[
    {
        "content": "# \u9898\u89e3 Luogu P5055\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\n------------\n## <Part0.\u524d\u8a00>\n------------\n\n\u5bf9\u4e8e\u6211\u4eec\u7684\u6240\u6c42\uff0c\u8fd9\u4e00\u9898\u7684\u9898\u76ee\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u3002        \n\u5728\u9898\u89e3\u7684\u6b63\u9898\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u653e\u51e0\u4e2a\u94fe\u63a5:      \n[Luogu P3369 \u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)      \n[Luogu P3391 \u6587\u827a\u5e73\u8861\u6811(Splay)](https://www.luogu.org/problemnew/show/P3391)      \n[Luogu P3835 \u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3835)     \n\u5efa\u8bae\u8bd5\u7740\u7528**FHQ Treap**(\u975e\u65cb\u8f6cTreap)\u6765\u5b9e\u73b0\u8fd9\u51e0\u9898\u3002      \n\n------------\n## </Part 0\u524d\u8a00>\n------------\n## <Part1.FHQ Treap>\n------------\n```\n\u4f60\u770b\u554a\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u5e38\u6570\u6bd4Splay\u5c0f\uff0c\u7406\u89e3\u8d77\u6765\u6bd4Splay\u5bb9\u6613\uff0c\u957f\u5f97\u6bd4Splay\u597d\u770b\uff0c\u80fd\u5b9e\u73b0\u7684\u4e1c\u897f\u5e76\u4e0d\u6bd4Splay\u5c11\uff0c\u4ee3\u7801\u91cf\u6bd4Splay\u5c0f\uff0c\u8fd8\u80fd\u53ef\u6301\u4e45\u5316\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5b66\u5b66\u5462?\n```\n\u4f1aFHQ Treap\u7684\u53ef\u4ee5\u8df3\u8fc7\u4e86\u3002       \n\u6240\u8c13\u7684**FHQ Treap**\u5176\u5b9e\u662f\u4e00\u79cd\u52a0\u5f3a\u7248\u7684Treap\u3002\u4e0e\u4e00\u822c\u7684Treap\u6811\u4e0d\u540c\uff0cFHQ Treap\u4e0d\u4f9d\u8d56\u65cb\u8f6c\u64cd\u4f5c\u4fdd\u6301\u81ea\u8eab\u7ed3\u6784\u7684\u5e73\u8861\uff0c\u800c\u662f\u4f9d\u8d56**\u5206\u88c2**\u548c**\u5408\u5e76**\u64cd\u4f5c\u7ef4\u6301\u6811\u7684\u5e73\u8861\u6027\u8d28\u3002        \n\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5173\u952e\u64cd\u4f5c:         \n1.\u521b\u5efa\u65b0\u7684\u8282\u70b9(new_node):        \n\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002    \n\u8fd4\u56de\u5f53\u524d\u70b9\u7684\u4e0b\u6807\u3002       \n```cpp\ninline int new_node(long long v=0)\n{\n\tstatic int tot(0);\n\ttpi.val=v;tp.sum=v;\n\ttp.rand=rand();tp.size=1;\n\treturn tot;\n}\n```\n2.\u590d\u5236\u8282\u70b9(copy_node):      \n\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002        \n\u8fd4\u56de\u590d\u5236\u540e\u7684\u70b9\u7684\u4e0b\u6807\u3002       \n```cpp\ninline int copy_node(int p)\n{\n\tint ret=new_node();\n\ttree[ret]=tree[p];\n\treturn ret;\n}\n```\n3.\u66f4\u65b0(push_up):      \npush_up(p)\u4ee3\u8868\u66f4\u65b0\u4e0b\u6807\u4e3ap\u7684\u8282\u70b9\u3002         \n```cpp\ninline void push_up(int p)\n{\n\ttree[p].size=tls(p).size+trs(p).size+1;\n\ttree[p].sum=tls(p).sum+trs(p).sum+t(p).val;\n}\n```\n4.\u6807\u8bb0\u4e0b\u4f20(push_down):       \npush_down(p)\u4ee3\u8868\u5c06\u4e0b\u6807\u4e3ap\u7684\u70b9\u7684\u6807\u8bb0\u4e0b\u4f20\u3002     \n\u4ec0\u4e48\u6807\u8bb0\u5462?\u81ea\u7136\u662f\u7ffb\u8f6c\u6807\u8bb0\u3002        \n\u6ce8\u610f:\u4f20\u4e4b\u524d\u7684\u70b9\u522b\u6254\u4e86\uff0c\u7559\u7740\u53ef\u6301\u4e45\u5316\u5462\u3002      \n```cpp\ninline void push_down(int p)\n{\n\tif(!t(p).tag)return;\n\tif(ls(p))ls(p)=copy_node(ls(p));\n\tif(rs(p))rs(p)=copy_node(rs(p));\n\tswap(ls(p),rs(p));\n\tif(ls(p))tls(p).tag^=1;\n\tif(rs(p))trs(p).tag^=1;\n\ttree[p].tag=0;\n}\n```\n5.\u5206\u88c2(Split):      \n~~\u8fd9\u4e2a\u8bcd\u6211\u7ecf\u5e38\u6253\u6210Spilt~~\u3002        \n\u6240\u8c13\u7684\"\u5206\u88c2\"\uff0c\u5c31\u662f\u5c06\u4e00\u9897Treap\u5206\u6210\u4e24\u90e8\u5206\u3002     \n\u4f60\u53ef\u4ee5\u7406\u89e3\u6210\uff0c\u4f60\u62ff\u7740\u4e00\u4e2a\u9009\u62e9\u6027\u900f\u8fc7\u819c\u6765\"\u8fc7\u6ee4\"\u4e00\u9897Treap\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u4f1a\u5c06\u4e00\u9897Treap\u8fc7\u6ee4\u6210\u4e24\u4e2a\u90e8\u5206\u3002       \n\u6211\u4eec\u5b9a\u4e49split(p,k,x,y)\u4ee3\u8868\u5c06\u6839\u4e3ap\u7684\u5b50\u6811\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u7684\u4e00\u90e8\u5206size\u4e3ak\u3002     \n\u5177\u4f53\u5b9e\u73b0\u8d77\u6765\u5c31\u662f\u5de6\u5b50\u6811\u7684size\u8fd8\u591f\u7528\u7684\u65f6\u5019\uff0c\u5c31\u5f80\u5de6\u5b50\u6811\u9012\u5f52\uff0c\u4e0d\u591f\u7528\u7684\u8bdd\u5c31\u5f80\u53f3\u5b50\u6811\u9012\u5f52\u3002        \n**\u5148\u63a8\u6807\u8bb0\uff0c\u518d\u5206\u88c2!!!!**         \nSplit\u64cd\u4f5c\u5b8c\u6574\u4ee3\u7801:\n```cpp\nvoid split(int p,int k,int &x,int &y)\n{\n\tif(!p){x=y=0;return;}\n\tpush_down(p);\n\tif(tls(p).size<k){x=copy_node(p);split(rs(x),k-tls(p).size-1,rs(x),y);push_up(x);}\n\telse{y=copy_node(p);split(ls(y),k,x,ls(y));push_up(y);}\n}\n```\n6.\u5408\u5e76(Merge):          \n\u5408\u5e76\u5c31\u66f4\u597d\u7406\u89e3\u4e86\uff0c\u5c31\u662f\u628a\u4e24\u68f5\u5b50\u6811\u6811\u5408\u5e76\u5230\u4e00\u4e2a\u6839\u8282\u70b9\u4e0a\u3002          \n\u8ddf\u4e00\u822c\u7684\u5e73\u8861\u6811\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u5b83\u4eec\u7684\u952e\u503c\u5927\u5c0f\u5173\u7cfb\u51b3\u5b9a\u600e\u4e48\u5408\u5e76\u5b83\u4eec\u3002(\u952e\u503c\u600e\u4e48\u5f97\u5230?rand()\u4e86\u89e3\u4e00\u4e0b)        \n\u8fd4\u56de\u503c\u4e3a\u4ed6\u4eec\u7684\u6839\u8282\u70b9\u3002    \n**\u5148\u63a8\u6807\u8bb0\uff0c\u518d\u5408\u5e76!!!!**       \n```cpp\nint merge(int x,int y)\n{\n\tif(!x||!y)return x|y;\n\tpush_down(x);push_down(y);\n\tif(t(x).rand<t(y).rand){rs(x)=merge(rs(x),y);push_up(x);return x;}\n\telse{ls(y)=merge(x,ls(y));push_up(y);return y;}\n}\n```\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u4e00\u9897~~\u53ef\u4ee5\u62ff\u53bb\u6301\u4e45\u5316\u7684~~FHQ Treap\u7684\u4ee3\u7801:  \n```cpp\nconst int N(2e5);\nint n;ll lastans;\nstruct node\n{\n\tint rand,size,tag;\n\tll val,sum;\n\tint lson,rson;\n}tree[(N<<7)+10];\nint rt[N+10];\ninline int new_node(long long v=0)\n{\n\tstatic int tot(0);\n\ttpi.val=v;tp.sum=v;\n\ttp.rand=rand();tp.size=1;\n\treturn tot;\n}\ninline int copy_node(int p)\n{\n\tint ret=new_node();\n\ttree[ret]=tree[p];\n\treturn ret;\n}\ninline void push_up(int p)\n{\n\ttree[p].size=tls(p).size+trs(p).size+1;\n\ttree[p].sum=tls(p).sum+trs(p).sum+t(p).val;\n}\ninline void push_down(int p)\n{\n\tif(!t(p).tag)return;\n\tif(ls(p))ls(p)=copy_node(ls(p));\n\tif(rs(p))rs(p)=copy_node(rs(p));\n\tswap(ls(p),rs(p));\n\tif(ls(p))tls(p).tag^=1;\n\tif(rs(p))trs(p).tag^=1;\n\ttree[p].tag=0;\n}\nvoid split(int p,int k,int &x,int &y)\n{\n\tif(!p){x=y=0;return;}\n\tpush_down(p);\n\tif(tls(p).size<k){x=copy_node(p);split(rs(x),k-tls(p).size-1,rs(x),y);push_up(x);}\n\telse{y=copy_node(p);split(ls(y),k,x,ls(y));push_up(y);}\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)return x|y;\n\tpush_down(x);push_down(y);\n\tif(t(x).rand<t(y).rand){rs(x)=merge(rs(x),y);push_up(x);return x;}\n\telse{ls(y)=merge(x,ls(y));push_up(y);return y;}\n}\n```\n------------\n## </Part1.FHQ Treap>\n------------\n## <Part2.\u64cd\u4f5c\u5b9e\u73b0>\n------------\n\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u4e00\u5171\u8981\u5b9e\u73b04\u4e2a\u64cd\u4f5c(\u5355\u70b9\u63d2\u5165\uff0c\u5355\u70b9\u5220\u9664\uff0c\u533a\u95f4\u53cd\u8f6c\uff0c\u533a\u95f4\u6c42\u548c)\u3002       \n\u6682\u4e14\u629b\u5f00\u53ef\u6301\u4e45\u5316\u4e0d\u8c08\uff0c\u5177\u4f53\u5b9e\u73b0\u8d77\u6765\u4e5f\u4e0d\u96be\u3002      \n1.\u63d2\u5165:     \n\u5728\u7b2cp\u4e2a\u6570\u540e\u63d2\u5165\u6570x,\u5c31\u662f\u628ap\u62c6\u4e0b\u6765\u7136\u540e\u518d\u4f7f\u7528\u4e24\u904dmerge\uff0c\u5c06\u5b83\u4eec\u7c98\u5728\u4e00\u8d77\u3002       \n![](https://i.loli.net/2018/12/26/5c236a6400adb.bmp)      \n\u63d2\u5165\u64cd\u4f5c\u4ee3\u7801:\n```cpp\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],a,x,y);\n\t\t\trt[++cnt]=merge(merge(x,new_node(b)),y);\n\t\t}\n```\n2.\u5220\u9664:        \n\u5220\u6389\u7b2cp\u4e2a\u6570\uff0c\u5c31\u662f\u5c06\u5b83\u7684\u4e24\u5934\u5206\u522b\u62c6\u4e0b\u6765\uff0c\u518d\u62fc\u63a5\u5728\u4e00\u8d77\u3002        \n![](https://i.loli.net/2018/12/26/5c23725784b73.bmp)            \n\u5220\u9664\u64cd\u4f5c\u4ee3\u7801:   \n```cpp\n        if(op==2)\n        {\n            scanf(\"%lld\",&a);\n            a^=lastans;\n            split(rt[v],a,x,z);\n            split(x,a-1,x,y);\n            rt[++cnt]=merge(x,z);\n        }\n```\n3.\u7ffb\u8f6c:       \n\u5c06\u533a\u95f4```[l,r]```\u7ffb\u8f6c\uff0c\u5c31\u662f\u5c06\u8981\u53cd\u8f6c\u7684\u533a\u95f4\u7ed9\u62c6\u4e0b\u6765\uff0c\u6253\u4e0a\u6807\u8bb0\uff0c\u518d\u7c98\u56de\u53bb\u3002       \n![](https://i.loli.net/2018/12/26/5c237272b5ca3.bmp)       \n```cpp\n        if(op==3)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            a^=lastans;b^=lastans;\n            split(rt[v],b,x,z);\n            split(x,a-1,x,y);\n            t(y).tag^=1;\n            rt[++cnt]=merge(merge(x,y),z);\n        }\n```\n4.\u67e5\u8be2:\n\u67e5\u8be2\u533a\u95f4```[l,r]```\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u5c06\u8be5\u533a\u95f4\u62c6\u4e0b\u6765\uff0c\u8f93\u51fa\u6811\u6839\uff0c\u518d\u7c98\u56de\u53bb\u3002          \n![](https://i.loli.net/2018/12/26/5c2372f5c8fc2.bmp)\n\u67e5\u8be2\u64cd\u4f5c\u4ee3\u7801:\n```cpp\n        if(op==4)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            a^=lastans;b^=lastans;\n            split(rt[v],b,x,z);\n            split(x,a-1,x,y);\n            printf(\"%lld\\n\",lastans=t(y).sum);\n            rt[++cnt]=merge(merge(x,y),z);\n        }\n```\n\u4ee3\u7801\u8d34\u4e00\u4e0b:     \n```cpp\n\t\tscanf(\"%d%d\",&v,&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],a,x,y);\n\t\t\trt[++cnt]=merge(merge(x,new_node(b)),y);\n\t\t}\n\t\tif(op==2)\n\t\t{\n\t\t\tscanf(\"%lld\",&a);\n\t\t\ta^=lastans;\n\t\t\tsplit(rt[v],a,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\trt[++cnt]=merge(x,z);\n\t\t}\n\t\tif(op==3)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],b,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\tt(y).tag^=1;\n\t\t\trt[++cnt]=merge(merge(x,y),z);\n\t\t}\n\t\tif(op==4)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],b,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\tprintf(\"%lld\\n\",lastans=t(y).sum);\n\t\t\trt[++cnt]=merge(merge(x,y),z);\n\t\t}\n```\n------------\n## </Part2.\u64cd\u4f5c\u5b9e\u73b0>\n------------\n## <Part3.\u53ef\u6301\u4e45\u5316\u8bc1\u660e>\n------------\n\u4e3a\u4ec0\u4e48FHQ Treap\u53ef\u4ee5\u4f9d\u9760\u53ef\u6301\u4e45\u5316\u6765\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u5462?        \n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u56e0\u4e3aSplit\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5bf9\u70b9\u8fdb\u884c\u590d\u5236\uff0c\u5e76\u4e14\u6bcf\u6b21\u4fee\u6539\u7684\u5fc5\u7136\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\u4e0a\u7684\u70b9\u3002       \n\u800c\u4e14Split\u548cMerge\u603b\u662f\u6210\u5bf9\u51fa\u73b0\uff0c\u6211\u4eec\u5c31\u53ea\u7528\u590d\u5236\u4e00\u6b21\u3002    \n![](https://i.loli.net/2018/12/26/5c2377c0691f5.bmp)      \n\n------------\n## </Part3.\u53ef\u6301\u4e45\u5316\u8bc1\u660e>\n------------\n\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<climits>\n#include<cstdlib>\n#include<ctime>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define ll long long\n#define INF 0x3f3f3f3f\n#define ls(p) tree[p].lson\n#define rs(p) tree[p].rson\n#define tls(p) tree[ls(p)]\n#define trs(p) tree[rs(p)]\n#define t(p) tree[p]\n#define tpi t(++tot)\n#define tp t(tot)\nusing namespace std;\nconst int N(2e5);\nint n;ll lastans;\nstruct node\n{\n\tint rand,size,tag;\n\tll val,sum;\n\tint lson,rson;\n}tree[(N<<7)+10];\nint rt[N+10];\ninline int new_node(long long v=0)\n{\n\tstatic int tot(0);\n\ttpi.val=v;tp.sum=v;\n\ttp.rand=rand();tp.size=1;\n\treturn tot;\n}\ninline int copy_node(int p)\n{\n\tint ret=new_node();\n\ttree[ret]=tree[p];\n\treturn ret;\n}\ninline void push_up(int p)\n{\n\ttree[p].size=tls(p).size+trs(p).size+1;\n\ttree[p].sum=tls(p).sum+trs(p).sum+t(p).val;\n}\ninline void push_down(int p)\n{\n\tif(!t(p).tag)return;\n\tif(ls(p))ls(p)=copy_node(ls(p));\n\tif(rs(p))rs(p)=copy_node(rs(p));\n\tswap(ls(p),rs(p));\n\tif(ls(p))tls(p).tag^=1;\n\tif(rs(p))trs(p).tag^=1;\n\ttree[p].tag=0;\n}\nvoid split(int p,int k,int &x,int &y)\n{\n\tif(!p){x=y=0;return;}\n\tpush_down(p);\n\tif(tls(p).size<k){x=copy_node(p);split(rs(x),k-tls(p).size-1,rs(x),y);push_up(x);}\n\telse{y=copy_node(p);split(ls(y),k,x,ls(y));push_up(y);}\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)return x|y;\n\tpush_down(x);push_down(y);\n\tif(t(x).rand<t(y).rand){rs(x)=merge(rs(x),y);push_up(x);return x;}\n\telse{ls(y)=merge(x,ls(y));push_up(y);return y;}\n}\nint main()\n{\n\tsrand(224144);scanf(\"%d\",&n);\n\tint cnt(0);int v,op;ll a,b;int x,y,z;\n\twhile(n--)\n\t{\n\t\tscanf(\"%d%d\",&v,&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],a,x,y);\n\t\t\trt[++cnt]=merge(merge(x,new_node(b)),y);\n\t\t}\n\t\tif(op==2)\n\t\t{\n\t\t\tscanf(\"%lld\",&a);\n\t\t\ta^=lastans;\n\t\t\tsplit(rt[v],a,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\trt[++cnt]=merge(x,z);\n\t\t}\n\t\tif(op==3)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],b,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\tt(y).tag^=1;\n\t\t\trt[++cnt]=merge(merge(x,y),z);\n\t\t}\n\t\tif(op==4)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&a,&b);\n\t\t\ta^=lastans;b^=lastans;\n\t\t\tsplit(rt[v],b,x,z);\n\t\t\tsplit(x,a-1,x,y);\n\t\t\tprintf(\"%lld\\n\",lastans=t(y).sum);\n\t\t\trt[++cnt]=merge(merge(x,y),z);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n------------\n# \u9898\u89e3\u7ed3\u675f\n------------",
        "postTime": 1545821294,
        "uid": 105496,
        "name": "KevinYu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "**\u63d0\u4f9b\u6307\u9488\u7248`FHQ Treap`\u9898\u89e3**\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n- \u4f1a\u7528`FHQ Treap`\u901a\u8fc7\u6587\u827a\u5e73\u8861\u6811\uff0c \u719f\u6089\u533a\u95f4\u53cd\u8f6c\u7684\u6807\u8bb0\u4e0b\u4f20\u3002\u4ee5\u4e0a\u5728\u6587\u827a\u5e73\u8861\u6811\u9898\u89e3\u91cc\u90fd\u6709\u3002\n\n- \u5199\u8fc7\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff0c\u660e\u767d\u53ef\u6301\u4e45\u5316\u539f\u7406\u3002\n\n### \u672c\u9898\u89e3\u6cd5\n\n\u5927\u4f53\u601d\u8def\u90fd\u4e00\u6837\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5386\u53f2\u7248\u672c\u4e0d\u4ea7\u751f\u5f71\u54cd\uff0c\u5728`PushDown()`\u548c`Split()`\u7684\u64cd\u4f5c\u65f6\u590d\u5236\u8282\u70b9\u3002\u56e0\u4e3a\u6bcf\u6b21`Merge()`\u524d\u90fd\u4f1a`Split()`\uff0c\u6240\u4ee5`Merge()`\u65f6\u5c31\u4e0d\u9700\u8981\u590d\u5236\u8282\u70b9\u4e86\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <iostream>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int MAXN = 2e5 + 5;\nconst int INF = 1e9 + 7;\n\nint Rand() {\n    static LL seed = 0x131309d;\n    return seed = ((seed * 233333LL) ^ 12345678LL) % INF;\n}\n\nstruct Node{\n    int val, pri, siz;\n    bool tag;\n    LL sum;\n    Node *ch[2];\n\n    Node(int val = 0) : val(val) {\n        pri = Rand();\n        siz = 1;\n        sum = val;\n        ch[0] = ch[1] = NULL;\n        tag = false;\n    }\n};\n\nNode *rt[MAXN];\nint n, m;\nLL cur;\n\nNode *Copy(Node *now) {\n    Node *ret = new Node;\n    if (now) *ret = *now;\n    return ret;\n}\n\nvoid Update(Node *now) {\n    now->siz = (LL)(now->ch[0] ? now->ch[0]->siz : 0) + (LL)(now->ch[1] ? now->ch[1]->siz : 0) + 1;\n    now->sum = (LL)(now->ch[0] ? now->ch[0]->sum : 0) + (LL)(now->ch[1] ? now->ch[1]->sum : 0) + (LL)now->val;\n}\n\nvoid PushDown(Node *now) {\n    if (!now->tag) return;\n    swap(now->ch[0], now->ch[1]);\n    if (now->ch[0]) {\n        now->ch[0] = Copy(now->ch[0]);\n        now->ch[0]->tag ^= 1;\n    }\n    if (now->ch[1]) {\n        now->ch[1] = Copy(now->ch[1]);\n        now->ch[1]->tag ^= 1;\n    }\n    now->tag = false;\n}\n\nvoid Split(Node *now, int k, Node *&l, Node *&r) {\n    if (!now) {\n        l = r = NULL;\n        return;\n    }\n    PushDown(now);\n    int ls = now->ch[0] ? now->ch[0]->siz : 0;\n    if (k <= ls) {\n        r = Copy(now);\n        Split(r->ch[0], k, l, r->ch[0]);\n        Update(r);\n    } else {\n        l = Copy(now);\n        Split(l->ch[1], k - ls - 1, l->ch[1], r);\n        Update(l);\n    }\n}\n\nNode *Merge(Node *a, Node *b) {\n    if (!a || !b) return a ? a : b;\n    if (a->pri <= b->pri) {\n        PushDown(b);\n        b->ch[0] = Merge(a, b->ch[0]);\n        Update(b);\n        return b;\n    } else {\n        PushDown(a);\n        a->ch[1] = Merge(a->ch[1], b);\n        Update(a);\n        return a;\n    }\n}\n\nvoid Insert(Node *&root, int k, int val) {\n    Node *a, *b;\n    Split(root, k, a, b);\n    root = Merge(a, Merge(new Node(val), b));\n}\n\nvoid Remove(Node *&root, int pos) {\n    Node *a, *b, *c, *d;\n    Split(root, pos, d, c);\n    Split(d, pos - 1, a, b);\n    if (b) delete b;\n    root = Merge(a, c);\n}\n\nvoid Reverse(Node *&root, int l, int r) {\n    Node *a, *b, *c, *d;\n    Split(root, r, d, c);\n    Split(d, l - 1, a, b);\n    if (b) b->tag ^= 1;\n    root = Merge(a, Merge(b, c));\n}\n\nLL Query(Node* &root, int l, int r) {\n    Node *a, *b, *c, *d;\n    Split(root, r, d, c);\n    Split(d, l - 1, a, b);\n    LL ans = b ? b->sum : 0LL;\n    root = Merge(a, Merge(b, c));\n    return ans;\n}\n\nvoid Init() {\n    ios :: sync_with_stdio(false);\n    cin.tie(NULL); cout.tie(NULL);\n    cin >> n;\n    cur = 0LL;\n}\n\nvoid Work() {\n    int op, ver;\n    LL p, x, l, r;\n    for (int i = 1; i <= n; i++) {\n        cin >> ver >> op;\n        rt[i] = rt[ver];\n        if (op == 1) {\n            cin >> p >> x;\n            p ^= cur; x ^= cur;\n            Insert(rt[i], p, x);\n        } else if (op == 2) {\n            cin >> p;\n            p ^= cur;\n            Remove(rt[i], p);\n        } else if (op == 3) {\n            cin >> l >> r;\n            l ^= cur; r ^= cur;\n            Reverse(rt[i], l, r);\n        } else {\n            cin >> l >> r;\n            l ^= cur; r ^= cur;\n            cur = Query(rt[i], l, r);\n            cout << cur << endl;\n        }\n    }\n}\n\nint main() {\n    Init();\n    Work();\n    return 0;\n}\n```",
        "postTime": 1559397583,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "~~skip2004\u79d2\u51fa\u7684\u4e00\u79cd\u4e0d\u7528\u4e0b\u653e\u6807\u8bb0\u7684\u5199\u6cd5~~\n\n\u53ef\u6301\u4e45\u5316\u533a\u95f4\u7ffb\u8f6c\uff0c\u8003\u8651\u53ef\u6301\u4e45\u5316Treap\u5b9e\u73b0\u3002\n\n1,2,4\u64cd\u4f5c\u90fd\u597d\u5b9e\u73b0\uff0c4\u64cd\u4f5c\u7ef4\u62a4\u4e00\u4e0b\u5b50\u6811\u548c\u5373\u53ef\u3002\n\n\u5173\u952e\u5c31\u5728\u90a3\u4e2a\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u4e0a\u3002\n\n\u4f20\u7edf\u7684\u533a\u95f4\u7ffb\u8f6c\uff0c\u90fd\u662f\u8981\u6253\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0\uff0c\u7136\u540e\u4e0b\u653e\u3002\u4f46\u5982\u679c\u53ef\u6301\u4e45\u5316\u7684\u8bdd\uff0c\u5c31\u6709\u70b9\u96be\u5904\u7406\u3002\n\n\u5982\u679c\u6211\u4eec\u80fd\u4e8b\u5148\u77e5\u9053\u7ffb\u8f6c\u540e\u7684\u533a\u95f4\uff0c\u90a3\u5c31\u65b9\u4fbf\u5f88\u591a\u4e86\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u53cd\u5e8f\u5217\u7684Treap\uff0c\u5219\u8981\u7ffb\u8f6c\u7684\u533a\u95f4\u5728\u53cdTreap\u4e2d\u7684\u5bf9\u5e94\u533a\u95f4\uff0c\u5c31\u662f\u7ffb\u8f6c\u540e\u7684\u5e8f\u5217\u3002\n\n\u7136\u540e\uff0c\u7ffb\u8f6c\u4e00\u6bb5\u533a\u95f4\uff0c\u5c31\u76f4\u63a5\u5728\u6b63\u3001\u53cd\u4e24\u4e2aTreap\u4e2d\uff0c\u628a\u5bf9\u5e94\u533a\u95f4split\u51fa\u6765\uff0c\u7136\u540e\u4e92\u6362\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n\\log n)$\u7684\u3002\u5e38\u6570\u4f1a\u6bd4\u8f83\u5927\uff08\u7ef4\u62a4\u4e24\u4e2aTreap\uff0c\u81f3\u5c112\u500d\uff09\u3002\n\n\u7a7a\u95f4\u4f1a\u7528\u5f97\u6bd4\u8f83\u591a\u3002\u628arand\u6570\u7ec4\u7528unsigned short\u538b\u4e00\u538b\u4f1a\u6bd4\u8f83\u597d\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#define N 200005\n#define P 100\n#define LL long long\n#define next_int(x)(x^=x<<13,x^=x>>17,x^=x<<5)\nint seed=19260817;\ninline LL readint(){\n    int c=getchar(),b=0;\n\tLL d=0;\n    for(;!isdigit(c);c=getchar())b=c=='-';\n    for(;isdigit(c);c=getchar())d=(d<<3)+(d<<1)+(c^'0');\n    return b?-d:d;\n}\nint L[N*P],R[N*P],sz[N*P],s[N*P];\nLL sm[N*P];\nunsigned short rnd[N*P];\nint cnt=0,rt[N],irt[N];\nLL ans=0;\n#define update(x)(sm[x]=sm[L[x]]+sm[R[x]]+s[x],sz[x]=sz[L[x]]+sz[R[x]]+1)\nint merge(int x,int y){\n\tif(!x||!y)return x|y;\n\tint u=++cnt;\n\tif(rnd[x]<rnd[y]){\n\t\trnd[u]=rnd[x];\n\t\tL[u]=L[x];\n\t\ts[u]=s[x];\n\t\tsm[u]=sm[x];\n\t\tsz[u]=sz[x];\n\t\tR[u]=merge(R[x],y);\n\t}else{\n\t\trnd[u]=rnd[y];\n\t\ts[u]=s[y];\n\t\tR[u]=R[y];\n\t\tsm[u]=sm[y];\n\t\tsz[u]=sz[y];\n\t\tL[u]=merge(x,L[y]);\n\t}\n\tupdate(u);\n\treturn u;\n}\nvoid split(int u,int k,int&x,int&y){\n\tif(!u)x=y=0;else\n\tif(k==0)x=0,y=u;else\n\tif(k==sz[u])x=u,y=0;else\n\tif(sz[L[u]]>=k){\n\t\ty=++cnt;\n\t\trnd[y]=rnd[u];\n\t\tR[y]=R[u];\n\t\ts[y]=s[u];\n\t\tsm[y]=sm[u];\n\t\tsz[y]=sz[u];\n\t\tsplit(L[u],k,x,L[y]);\n\t\tupdate(y);\n\t}else{\n\t\tx=++cnt;\n\t\trnd[x]=rnd[u];\n\t\tL[x]=L[u];\n\t\ts[x]=s[u];\n\t\tsm[x]=sm[u];\n\t\tsz[x]=sz[u];\n\t\tsplit(R[u],k-sz[L[u]]-1,R[x],y);\n\t\tupdate(x);\n\t}\n}\nvoid insert(int p,int f,int ver,int t){\n\tint len=sz[rt[ver]],x,y;\n\tsplit(rt[ver],p,x,y);\n\tint nw=++cnt;\n\ts[nw]=f,rnd[nw]=next_int(seed)&65535;sm[nw]=f;sz[nw]=1;\n\trt[t]=merge(merge(x,cnt),y);\n\tsplit(irt[ver],len-p,x,y);\n\ts[++cnt]=f,rnd[cnt]=rnd[nw];sm[cnt]=f;sz[cnt]=1;\n\tirt[t]=merge(merge(x,cnt),y);\n}\nvoid erase(int p,int ver,int t){\n\tint len=sz[rt[ver]],a,b,c,d;\n\tsplit(rt[ver],p,a,b);\n\tsplit(a,p-1,c,d);\n\trt[t]=merge(c,b);\n\tsplit(irt[ver],len-p+1,a,b);\n\tsplit(a,len-p,c,d);\n\tirt[t]=merge(c,b);\n}\nvoid reverse(int ver,int l,int r,int t){\n\tint len=sz[rt[ver]];\n\tint r1,r2,r3,r0,i1,i2,i3,i0;\n\tsplit(rt[ver],r,r0,r3);\n\tsplit(r0,l-1,r1,r2);\n\tsplit(irt[ver],len-l+1,i0,i3);\n\tsplit(i0,len-r,i1,i2);\n\trt[t]=merge(merge(r1,i2),r3);\n\tirt[t]=merge(merge(i1,r2),i3);\n}\nLL query(int ver,int l,int r,int t){\n\trt[t]=rt[ver],irt[t]=irt[ver];\n\tint _0,_1,_2,_3;\n\tsplit(rt[ver],r,_0,_3);\n\tsplit(_0,l-1,_1,_2);\n\treturn sm[_2];\n}\nint main(){\n\tfor(int T=readint(),t=1;t<=T;++t){\n\t\tint v=readint(),opt=readint();\n\t\tswitch(opt){\n\t\t\tcase 1:{\n\t\t\t\tint p=readint()^ans,x=readint()^ans;\n\t\t\t\tinsert(p,x,v,t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tint p=readint()^ans;\n\t\t\t\terase(p,v,t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tint l=readint()^ans,r=readint()^ans;\n\t\t\t\treverse(v,l,r,t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4:{\n\t\t\t\tint l=readint()^ans,r=readint()^ans;\n\t\t\t\tprintf(\"%lld\\n\",ans=query(v,l,r,t));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543575219,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u542c\u8bf4\u8fd9\u9898\u662f\u7528\u6211\u7684\u7a0b\u5e8f\u5f53std\u5bf9\u62cd\u7684\uff0c\u7136\u800c\u6211\u6628\u5929\u665a\u4e0a\u5199\u7740\u6025\u4e86\uff0c\u5220\u9664\u64cd\u4f5c\u5199\u9519\u4e86\uff0c\u5728\u6b64\u5bf9\u4e8e\u7ed9\u51fa\u9898\u4eba\u5e26\u6765\u7684\u4e0d\u4fbf\u8868\u793a\u6b49\u610f2333...\n\n\u9996\u5148\u4f60\u8981\u4f1a\u7528\u975e\u65cbtreap\u505a[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3391)\u8fd9\u9898\u3002\u505a\u6cd5\u5c31\u662f\uff0c\u5982\u679c\u8981\u7ffb\u8f6c\u4e00\u4e2a\u533a\u95f4$[l, r]$\uff0c\u6211\u4eec\u5c31\u628a\u6811split\u6210\u4e09\u68f5\uff0c\u5206\u522b\u5b58\u50a8$[1,l-1],[l,r],[r+1,n]$\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u90a3\u68f5\u6811\u4e0a\u6253\u6807\u8bb0\uff0c\u518d\u628a\u4e09\u68f5\u6811\u5408\u5e76\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9898\u800c\u8a00\uff0c\u5c31\u662f\u628a\u8fd9\u4e2a\u975e\u65cbtreap\u53ef\u6301\u4e45\u5316\u4e0b\u6765\u5373\u53ef\u3002\u53ef\u6301\u4e45\u5316\u7684\u65b9\u6cd5\u5c31\u662f\u5bf9\u4e8e\u8981\u4fee\u6539\u7684\u7ed3\u70b9\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u5b83\u7684\u62f7\u8d1d\uff0c\u5728\u65b0\u8282\u70b9\u4e0a\u4fee\u6539\u3002\u5176\u5b9e\u8ddf\u7ebf\u6bb5\u6811\u7684\u53ef\u6301\u4e45\u5316\u662f\u5dee\u4e0d\u591a\u7684\u3002\n\n```cpp\n// can\u662f\u5783\u573e\u6876\uff0c\u6211\u4eec\u8981\u8282\u7ea6\u80fd\u6e90\u4fdd\u62a4\u73af\u5883\n// clone\u51fd\u6570\u7528\u6765\u514b\u9686\u4e00\u4e2a\u7ed3\u70b9\ninline int clone(int y) {\n    int x = cantop ? can[cantop--] : ++tot;\n    val[x] = val[y]; pri[x] = pri[y]; sum[x] = sum[y]; size[x] = size[y];\n    ch[x][0] = ch[y][0]; ch[x][1] = ch[y][1]; rev[x] = rev[y];\n    return x;\n}\n```\n\n\u4fee\u6539\u64cd\u4f5c\u5305\u62ecsplit\uff0cmerge\uff0cpushdown\uff0c\u8fd9\u91cc\u4ee5split\u4e3a\u4f8b\uff1a\n\n\u666e\u901a\u975e\u65cbtreap\u7684split\uff1a\n\n```cpp\nvoid split(int x, int k, int &l, int &r) {\n    if (!x) l = r = 0;\n    else {\n        pushdown(x);\n        if (k <= size[ch[x][0]]) {\n            r = x;\n            split(ch[x][0], k, l, ch[x][0]);\n        } else {\n            l = x;\n            split(ch[x][1], k - size[ch[x][0]] - 1, ch[x][1], r);\n        }\n        update(x);\n    }\n}\n```\n\n\u53ef\u6301\u4e45\u5316\u7248\u672c\uff1a\n\n```cpp\nvoid split(int x, int k, int &l, int &r) {\n    if (!x) l = r = 0;\n    else {\n        pushdown(x);\n        if (k <= size[ch[x][0]]) {\n            r = clone(x);\n            split(ch[r][0], k, l, ch[r][0]);\n            update(r);\n        } else {\n            l = clone(x);\n            split(ch[l][1], k - size[ch[x][0]] - 1, ch[l][1], r);\n            update(l);\n        }\n    }\n}\n```\n\n\u6ce8\u610f\u5176\u4e2d\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u5f02\uff0c\u6bd4\u5982\u666e\u901a\u7248\u672c\u7684split\u53ea\u8981update(x)\u5373\u53ef\uff0c\u800c\u53ef\u6301\u4e45\u5316\u7248\u672c\u7684\u8981\u5bf9r\u6216l\u800c\u975ex\u8c03\u7528update\uff0c\u56e0\u4e3ax\u7684\u5b69\u5b50\u5e76\u6ca1\u6709\u88ab\u4fee\u6539\n\n\u53e6\u5916\uff0c\u5173\u4e8emerge\uff0c\u7406\u8bba\u4e0a\u6765\u8bb2merge\u91cc\u4e5f\u5e94\u8be5\u514b\u9686\u7ed3\u70b9\uff0c\u4f46\u662f\u672c\u9898\u5e76\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8c03\u7528merge\u4e4b\u524d\u603b\u662f\u4f1a\u8c03\u7528split\uff0c\u5c31\u5df2\u7ecf\u628a\u8be5\u514b\u9686\u7684\u7ed3\u70b9\u514b\u9686\u5b8c\u4e86\u3002\n\n\u5176\u5b83\u7684\u533a\u95f4\u548c\u4fe1\u606f\u5c31\u6b63\u5e38\u7ef4\u62a4\u5c31\u597d\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\uff08\u4eba\u50bb\u81ea\u5e26\u5927\u5e38\u6570\uff09\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define dwn(I, A, B) for (int I = (A); I >= (B); --I)\n#define erp(I, X) for (int I = head[X]; I; I = next[I])\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...); \n}\ntemplate <typename T> void write(T x) {\n    if (x < 0) x = -x, putchar('-');\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T> void writeln(T x) {\n    write(x);\n    puts(\"\");\n}\ntemplate <typename T> inline bool chkMin(T& x, const T& y) { return y < x ? (x = y, true) : false; }\ntemplate <typename T> inline bool chkMax(T& x, const T& y) { return x < y ? (x = y, true) : false; }\n\ntypedef long long LL;\nconst int maxn = 2e5 + 207;\nint ch[maxn << 6][2], pri[maxn << 6], val[maxn << 6], size[maxn << 6];\nLL sum[maxn << 6];\nbool rev[maxn << 6];\nint root[maxn];\nint can[maxn], cantop;\nint n, m, tot;\n\ninline int newNode(int v = 0) {\n    int x = cantop ? can[cantop--] : ++tot;\n    val[x] = sum[x] = v; pri[x] = rand(); size[x] = 1;\n    ch[x][0] = ch[x][1] = rev[x] = 0;\n    return x;\n}\ninline int clone(int y) {\n    int x = cantop ? can[cantop--] : ++tot;\n    val[x] = val[y]; pri[x] = pri[y]; sum[x] = sum[y]; size[x] = size[y];\n    ch[x][0] = ch[y][0]; ch[x][1] = ch[y][1]; rev[x] = rev[y];\n    return x;\n}\ninline void update(int x) {\n    size[x] = size[ch[x][0]] + size[ch[x][1]] + 1;\n    sum[x] = sum[ch[x][0]] + sum[ch[x][1]] + val[x];\n}\ninline void pushdown(int x) {\n    if (rev[x]) {\n        std::swap(ch[x][0], ch[x][1]);\n        if (ch[x][0]) {\n            ch[x][0] = clone(ch[x][0]);\n            rev[ch[x][0]] ^= 1;\n        }\n        if (ch[x][1]) {\n            ch[x][1] = clone(ch[x][1]);\n            rev[ch[x][1]] ^= 1;\n        }\n        rev[x] = 0;\n    }\n}\nvoid split(int x, int k, int &l, int &r) {\n    if (!x) l = r = 0;\n    else {\n        pushdown(x);\n        if (k <= size[ch[x][0]]) {\n            r = clone(x);\n            split(ch[r][0], k, l, ch[r][0]);\n            update(r);\n        } else {\n            l = clone(x);\n            split(ch[l][1], k - size[ch[x][0]] - 1, ch[l][1], r);\n            update(l);\n        }\n    }\n}\nint merge(int x, int y) {\n    if (!(x && y)) return x ^ y;\n    if (pri[x] < pri[y]) {\n        pushdown(y);\n        ch[y][0] = merge(x, ch[y][0]);\n        update(y);\n        return y;\n    } else {\n        pushdown(x);\n        ch[x][1] = merge(ch[x][1], y);\n        update(x);\n        return x;\n    }\n}\ninline void insert(int &rt, int k, int val) {\n    int x, y;\n    split(rt, k, x, y);\n    rt = merge(merge(x, newNode(val)), y);\n}\ninline void erase(int &rt, int pos) {\n    int x, y, z;\n    split(rt, pos, x, z);\n    split(x, pos - 1, x, y);\n    can[++cantop] = y;\n    rt = merge(x, z);\n}\ninline void reverse(int &rt, int l, int r) {\n    int x, y, z;\n    split(rt, r, x, z);\n    split(x, l - 1, x, y);\n    rev[y] ^= 1;\n    rt = merge(merge(x, y), z);\n}\ninline LL query(int &rt, int l, int r) {\n    int x, y, z;\n    split(rt, r, x, z);\n    split(x, l - 1, x, y);\n    LL ans = sum[y];\n    rt = merge(merge(x, y), z);\n    return ans;\n}\n\nint main() {\n    read(n);\n    LL lastans = 0;\n    rep(i, 1, n) {\n        int v, q; read(v, q);\n        root[i] = root[v];\n        if (q == 1) {\n            int p, x; read(p, x);\n            p ^= lastans; x ^= lastans;\n            insert(root[i], p, x);\n        } else if (q == 2) {\n            int p; read(p); p ^= lastans;\n            erase(root[i], p);\n        } else if (q == 3) {\n            int l, r; read(l, r);\n            l ^= lastans; r ^= lastans;\n            reverse(root[i], l, r);\n        } else {\n            int l, r; read(l, r);\n            l ^= lastans; r ^= lastans;\n            writeln(lastans = query(root[i], l, r));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1543501268,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# fhq Treap\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5e38\u7528\u6765\u5b9e\u73b0\u6587\u827a\u5e73\u8861\u6811\u7684Splay\u7531\u4e8e\u5728splay\u7684\u8fc7\u7a0b\u4e2d\u5f62\u6001\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6545\u4e0d\u9002\u7528\u4e8e\u53ef\u6301\u4e45\u5316\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u79cd\u975e\u65cb\u5e73\u8861\u6811\u6765\u505a\u672c\u9898\u3002\u6bd4\u5982\u8bf4fhq Treap\u3002\n\n\u524d\u7f6e\u6280\u80fd\uff1a\u666e\u901a\u5e73\u8861\u6811\n\n\u7ea6\u5b9a\uff1a\n\nch\\[x][0/1]\u8868\u793ax\u7684\u5de6/\u53f3\u5b69\u5b50\n\nval[x]\u8868\u793ax\u7684\u6743\u503c\uff0cdat\\[x]\u8868\u793ax\u7684\u5173\u952e\u7801\uff08\u65e2\u7136\u662fTreap\uff0c\u5c31\u8981\u6709\u5173\u952e\u7801\u3002\uff09\n\nsz[x]\u8868\u793ax\u7684\u5b50\u6811\u5927\u5c0f\uff08\u5305\u62ecx\uff09\n\ntag[x]\u8868\u793ax\u7684\u6807\u8bb0\uff08\u542b\u4e49\u5f85\u4f1a\u518d\u8bb2\uff09\n\n\n\n## \u539f\u7406\n\nfhq Treap\u7684\u539f\u7406\u5341\u5206\u7b80\u5355\u7c97\u66b4\uff0c\u5c31\u662f\u628a\u8981\u64cd\u4f5c\u7684\u533a\u95f4\u626f\u4e0b\u6765\uff0c\u6253\u4e2a\u6807\u8bb0\u518d\u62fc\u56de\u53bb\u3002\n\n## \u57fa\u672c\u64cd\u4f5c\n\n### #1\uff1asplit\n\n\u683c\u5f0f\uff1asplit(now,k,&x,&y);\n\nsplit\u64cd\u4f5c\u5206\u4e24\u79cd\uff0c\u7b2c\u4e00\u79cd\u662f\u6743\u503c\u5206\u88c2\uff0c\u7b2c\u4e8c\u79cd\u662f\u6392\u540d\u5206\u88c2\u3002\n\n\u6743\u503c\u5206\u88c2\u5c31\u662f\u628anow\u7684\u5b50\u6811\u4e2d\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u8282\u70b9\u653e\u5728x\u4e0a\uff0c\u5176\u4f59\u7684\u8282\u70b9\u653e\u5728y\u4e0a\n\n\u4e3e\u4e2a\u897f\u74dc\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/49411.png)\n\n\n\n\u5982\u679c\u6211\u4eec\u8fdb\u884csplit(3,1,x,y)\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\n\nx=1,y=3\n\n![](https://cdn.luogu.com.cn/upload/pic/49419.png)\uff08\u5bf9\u4e0d\u8d77\uff0csplit\u64cd\u4f5c\u5e76\u4e0d\u80fd\u5e2e\u4f60\u628a\u8282\u70b9\u7684\u8fb9\u6846\u52a0\u7c97\uff09\n\n\u8fd9\u600e\u4e48\u5b9e\u73b0\u5462\n\n```c++\nvoid split(int now,int k,int &x,int &y)\n{\n\tif (!now) \n    {\n        x=y=0; //\u5982\u679cnow\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5206\u88c2\u6210\u7684\u4e24\u68f5\u5b50\u6811\u4e5f\u4e0d\u5b58\u5728\n        return ;\n    }\n    if (tag[now]) down(now); //\u5148\u4e0d\u7ba1\u4ed6\n    if (val[now]<=k) //\u5982\u679cnow\u7684\u6743\u503c\u6bd4k\u5c0f\uff0c\u90a3\u4e48\u6743\u503c\u6bd4k\u5927\u7684\u8282\u70b9\u4e00\u5b9a\u53ea\u5728now\u7684\u53f3\u5b50\u6811\uff08bst\u6027\u8d28\uff09\uff0c\u6240\u4ee5\u5206\u88c2\u7684\u5730\u65b9\u5728now\u7684\u53f3\u5b50\u6811\n\t{\n\t\tx=now;//x\u7684\u6839\u8282\u70b9\u5c31\u662fnow\u3002\n\t\tsplit(ch[now][1],k,ch[now][1],y);//\u628anow\u7684\u53f3\u5b50\u6811\u4e2d\u6743\u503c\u6bd4k\u5c0f\u7684\u90e8\u5206\u5f53\u4f5cnow\u7684\u53f3\u5b50\u6811\uff0c\u5176\u4f59\u7684\u90e8\u5206\u653e\u5728y\u3002\n\t\tupdate(now); //\u8f85\u52a9\u64cd\u4f5c\uff0c\u5373\u66f4\u65b0now\u7684\u4fe1\u606f\n\t}\n\telse //\u5426\u5219\u5206\u88c2\u7684\u5730\u65b9\u5728now\u7684\u5de6\u5b50\u6811\n\t{\n\t\ty=now;//y\u7684\u6839\u8282\u70b9\u5c31\u662fnow\n\t\tsplit(ch[now][0],k,x,ch[now][0]);//\u540c\u4e0a\n\t\tupdate(now);\n\t}\n    //\u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e24\u4e2aupdate(now)\u4e00\u8d77\u5199\u5728\u8fd9\u91cc\u5462\uff1f\u662f\u4e3a\u4e86\u65b9\u4fbf\u53ef\u6301\u4e45\u5316\u3002\n}\n```\n\n\u8fd9\u6837\u4e0b\u6765\uff0cnow\u7684\u5b50\u6811\u5c31\u88ab\u5206\u6210\u4e86x\uff0cy\u4e24\u90e8\u5206\u3002\n\n\u6392\u540d\u5206\u88c2\u5c31\u662f\u628anow\u7684\u5b50\u6811\uff08\u5305\u62ecnow\uff09\u7684\u4e2d\u5e8f\u904d\u5386\u4e2d\u524dk\u4e2a\u8282\u70b9\u653e\u5728x\uff0c\u5176\u4f59\u7684\u8282\u70b9\u653e\u5728y\n\n\u5b9e\u73b0\u8ddf\u6743\u503c\u5206\u88c2\u5dee\u4e0d\u591a\u3002\u4ee3\u7801\uff1a\n\n```c++\nvoid split(int now,int k,int &x,int &y)\n{\n\tif (!now) {x=y=0;return;}\n\tif (tag[now]) down(now);\n\tif (sz[ch[now][0]]<k)\n\t{\n\t\tx=now;\n\t\tsplit(ch[now][1],k-sz[ch[now][0]]-1,ch[now][1],y);\n\t\tupdate(now);\n\t}\n\telse \n\t{\n\t\ty=now;\n\t\tsplit(ch[now][0],k,x,ch[now][0]);\n\t\tupdate(now);\n\t}\n}\n```\n\n### #2 merge\n\n\u683c\u5f0f\uff1amerge(x,y)\n\n\u5c31\u662f\u628ax\uff0cy\u4e24\u4e2a\u6811\u5408\u5e76\u5728\u4e00\u8d77\u3002\n\n\u8be6\u60c5\u770b\u4ee3\u7801\uff1a\n\n```cpp\nint merge(int x,int y)\n{ \n\tif (!x||!y) return x+y; //\u5982\u679c\u4e24\u4e2a\u5b50\u6811\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u975e\u7a7a\u7684\u90a3\u4e00\u4e2a\u3002\n\tif (dat[x]<dat[y]) \n\t{\n\t\tif (tag[x]) down(x);//\u522b\u7ba1\u4ed6\n\t\tch[x][1]=merge(ch[x][1],y); //\u4e3a\u4e86\u6ee1\u8db3\u5806\u6027\u8d28\uff0c\u4f7f\u6811\u7684\u9ad8\u5ea6\u5c3d\u91cf\u5c0f\n\t\tupdate(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tif (tag[y]) down(y);\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\n```\n\n\n\n### #3 del\n\n\u683c\u5f0f\uff1adel(a)\n\n\u5c31\u662f\u628a\u6743\u503c\u4e3aa\u7684\u8282\u70b9\u5220\u9664\u4e00\u4e2a\n\n\u600e\u4e48\u5220\u5462\uff1f\n\n\u628a\u8fd9\u4e2a\u8282\u70b9\u5207\u6389\uff0c\u518d\u628a\u65ad\u5f00\u7684\u4e24\u90e8\u5206\u7c98\u8d77\u6765\n\n\u4ee3\u7801\n\n```c++\nvoid del(int a)\n{\n\tsplit(root,a,x,z);//\u8fd9\u91cc\u7684split\u5e94\u8be5\u662f\u6743\u503c\u5206\u88c2\uff08\u663e\u7136\uff09\n\tsplit(x,a-1,x,y);\n\ty=merge(ch[y][0],ch[y][1]);//\u5982\u679c\u6709\u91cd\u590d\u8282\u70b9\n\troot=merge(merge(x,y),z);\n}\n```\n\n\u5982\u679c\u6ca1\u6709\u91cd\u590d\u8282\u70b9\uff0c\u5c31\u8fd9\u6837\u5199\n\n```c++\nvoid del(int a)\n{\n\tsplit(root,a,x,z);//\u8fd9\u91cc\u7684split\u5e94\u8be5\u662f\u6743\u503c\u5206\u88c2\uff08\u663e\u7136\uff09\n\tsplit(x,a-1,x,y);\n\troot=merge(x,z);\n}\n```\n\n\n\n### #4 insert\n\n\u683c\u5f0f\uff1ainsert(a\uff09\n\n\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/49442.png)(\u5982\u679c\u6709\u91cd\u590d\u6743\u503c\u7684\u8bdd\uff0c<a\u5e94\u8be5\u4e3a$\\leq$a)\n\n\u4ee3\u7801\n\n```c++\nint new_node(int a)//\u65b0\u5efa\u8282\u70b9\n{\n\tsz[++tot]=1,val[tot]=a,dat[tot]=rand();\n\treturn tot;\n}\nvoid insert(int a)\n{\n\tsplit(root,a,x,y);//\u628a\u5c0f\u4e8e\u7b49\u4e8ea\u7684\u8282\u70b9\u653e\u5728x\uff0c\u5927\u4e8ea\u7684\u8282\u70b9\u653e\u5728y\uff0c\u7528\u6743\u503c\u5206\u88c2\n\troot=merge(merge(x,new_node(a)),y);\u628ax\uff0ca\uff0c\u548cy\u62fc\u8d77\u6765\n}\n```\n\n### #5 rank\n\n\u683c\u5f0f\uff1arank(a)\n\n\u67e5\u8be2a\u7684\u6392\u540d\u3002\n\n\u628a\u5c0f\u4e8ea\u7684\u8282\u70b9\u6570\u91cf\u52a01\u5c31\u662fa\u7684\u6392\u540d\u4e86\n\n\u4ee3\u7801\n\n```c++\nint rank(int a)\n{\n\tsplit(root,a-1,x,y);\n\tint ans=sz[x]+1;\n\tmerge(x,y);\n\treturn ans;\n}\n```\n\n### #6 kth\n\n\u683c\u5f0f\uff1akth(now,k)\n\n\u67e5\u8be2now\u7684\u5b50\u6811\u4e2d\u7b2ck\u5c0f\u503c\u6240\u5728\u7684\u8282\u70b9\u3002\n\n\u540c\u666e\u901a\u5e73\u8861\u6811\uff0c\u9700\u8981\u9012\u5f52\u5b9e\u73b0\n\n```cpp\nint kth(int now,int k)\n{\n\tif (k==sz[ch[now][0]]+1) return now;\n\tif (k<=sz[ch[now][0]]) return kth(ch[now][0],k);\n\telse return kth(ch[now][1],k-sz[ch[now][0]]-1);\n}\n```\n\n### #7  pre/pst\n\n\u683c\u5f0f\uff1apre(a)/pst(a)\n\n\u67e5\u8be2a\u7684\u524d\u9a71\u540e\u7ee7\n\n\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u770b\u4ee3\u7801\u5e94\u8be5\u80fd\u61c2\u3002\n\n```c++\nint pre(int a)\n{\n\tsplit(root,a-1,x,y);\n\tint ans=val[kth(x,sz[x])];\n\troot=merge(x,y);\n\treturn ans;\n}\nint pst(int a)\n{\n\tsplit(root,a,x,y);\n\tint ans=val[kth(y,1)];\n\troot=merge(x,y);\n\treturn ans;\n}\n```\n\n\n\n### #8 \u5404\u79cd\u533a\u95f4\u64cd\u4f5c\n\n#### \u6ce8\u610f\uff1a\u5982\u679c\u6709\u533a\u95f4\u64cd\u4f5c\uff0c\u5fc5\u987b\u7528\u6392\u540d\u5206\u88c2\uff01\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u4e00\u6bb5\u533a\u95f4\u91cc\u7684\u6570\uff0c\u6743\u503c\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002\n\n\u800cfhq Treap\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u4ee5\u540e\u5c31\u662f\u539f\u5e8f\u5217\u3002\n\n\u533a\u95f4\u64cd\u4f5c\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u5148\u770b\u4ee3\u7801\uff1a\n\n```c++\nvoid rev(int l,int r)//\u4ee5\u533a\u95f4\u53cd\u8f6c\u4e3a\u4f8b\n{\n\tsplit(root,l-1,x,y);//\u6392\u540d\u5206\u88c2\n\tsplit(y,r-l+1,y,z);\n    //\u4e5f\u53ef\u4ee5\u6539\u6210split(root,r,x,z),split(x,l-1,x,y),\u4f5c\u7528\u662f\u628a\u533a\u95f4\u5206\u6210[1,l-1],[l,r],[r+1,n]\u4e09\u6bb5\n\ttag[y]^=1;//\u5728\u4e2d\u95f4\u4e00\u6bb5\u6253\u6807\u8bb0\n\troot=merge(x,merge(y,z));//\u62fc\u56de\u53bb\n}\n```\n\n\u63a5\u4e0b\u6765\u63ed\u6653down\u51fd\u6570\u7684\u4f5c\u7528\uff1a\n\n\u5982\u679c\u4f60\u8981\u53cd\u8f6c\u533a\u95f4[1,2,3,4]\uff0c\u5047\u8bbe\u8fd9\u4e2a\u533a\u95f4\u88ab\u4fdd\u5b58\u5728y\u8282\u70b9\u4e0a\n\n\u90a3\u4e48\u4f60\u5148\u5728y\u4e0a\u6253\u6807\u8bb0\u3002\n\n\u5982\u679c\u4f60\u4e0d\u9700\u8981\u5bf9y\u8fdb\u884csplit\u6216merge\u64cd\u4f5c\uff0c\u90a3\u4e48\u65e0\u8bba\u5b83\u6709\u6ca1\u6709\u88ab\u53cd\u8f6c\u4f60\u752d\u7ba1\n\n\u4f46\u662f\u5982\u679c\u4f60\u8981\u5bf9\u5b83split\u6216merge\u7684\u8bdd\uff0c\u4f60\u5c31\u5e94\u8be5\u5148\u4ea4\u6362\u5b83\u7684\u4e24\u4e2a\u5b50\u6811\uff0c\u6bd4\u5982\u8bf4\u53d8\u4e3a[3,4,1,2]\u3002\n\n\u7136\u540e\u518d\u5728[3,4]\u548c[1,2]\u4e0a\u6253\u6807\u8bb0\uff08\u5982\u679c\u5df2\u7ecf\u6709\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\u53d6\u6d88\uff09\u3002\n\n```c++\n void down(int x)\n{\n\tswap(ch[x][0],ch[x][1]);\n\tif (ch[x][0]) tag[ch[x][0]]^=1;\n\tif (ch[x][1]) tag[ch[x][1]]^=1;\n\ttag[x]=0;\n}\n```\n\n\u533a\u95f4\u6c42\u548c:\n\n```c++\nll query(int l,int r)\n{\n\tsplit(root,l-1,x,y);\n\tsplit(y,r-l+1,y,z);\n\tll ans=sum[y];\n\troot=merge(x,merge(y,z));\n\treturn ans;\n}\n```\n\n\n\n## \u53ef\u6301\u4e45\u5316\n\nfhq Treap\u5982\u4f55\u53ef\u6301\u4e45\u5316\u5462\uff1f\u5c31\u662f\u5728split\u548cmerge\u64cd\u4f5c\u91cc\u514b\u9686\u8981\u64cd\u4f5c\u7684\u8282\u70b9\uff0c\u7136\u540e\u5728\u514b\u9686\u7684\u8282\u70b9\uff08\u800c\u975e\u539f\u8282\u70b9\uff09\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u800c\u5728\u672c\u9898\u4e2d\uff0c\u7531\u4e8e\u6bcf\u4e2amerge\u64cd\u4f5c\u4e4b\u524d\u90fd\u4f1asplit\u4e00\u904d\uff0c\u6240\u4ee5merge\u64cd\u4f5c\u91cc\u5c31\u4e0d\u7528\u514b\u9686\u4e86\u3002\n\n```c++\nint clone(int y)\n{\n    int x=++tot;\n\tch[x][0]=ch[y][0],ch[x][1]=ch[y][1],val[x]=val[y],dat[x]=dat[y],sz[x]=sz[y];\n    return x;\n}\nvoid split(int now,int k,int &x,int &y)\n{\n\tif (!now) {x=y=0;return;}\n\tif (tag[now]) down(now);\n\tif (sz[ch[now][0]]<k)\n\t{\n\t\tx=clone(now);\n\t\tsplit(ch[x][1],k-sz[ch[x][0]]-1,ch[x][1],y);\n\t\tupdate(x);\n\t}\n\telse \n\t{\n\t\ty=clone(now);\n\t\tsplit(ch[y][0],k,x,ch[y][0]);\n\t\tupdate(y);\n\t}\n}\n```\n\n\n\n## \u5783\u573e\u56de\u6536\n\n\uff08\u4e0d\u662f\u56de\u6536\u6211\uff09\n\n\u4e3a\u4e86~~\u73af\u4fdd~~\u8282\u7701\u7a7a\u95f4\uff0c\u6240\u4ee5del\u3001clone\u548cnew_node\u64cd\u4f5c\u5f97\u6539\u4e00\u6539\n\n```c++\n int new_node(int x)\n{\n\tint a=cantop?can[cantop--]:++tot;\n\tsz[a]=1,sum[a]=val[a]=x,dat[a]=rand();\n\treturn a;\n}\nint clone(int x)\n{\n\tint a=cantop?can[cantop--]:++tot;\n\tsz[a]=sz[x],sum[a]=sum[x],val[a]=val[x],ch[a][0]=ch[x][0],ch[a][1]=ch[x][1],dat[a]=dat[x],tag[a]=tag[x];\n\treturn a;\n}\nvoid del(int &root,int a)//\u4e3a\u4e86\u53ef\u6301\u4e45\u5316\uff0c\u9664\u4e86split\u548cmerge\u4ee5\u5916\u7684\u6bcf\u4e00\u4e2a\u57fa\u672c\u64cd\u4f5c\u90fd\u8981\u52a0\u4e0a&root\u53c2\u6570\uff08\u5fc5\u987b\u662f\u5f15\u7528\uff09\n{\n\tsplit(root,a,x,z);\n\tsplit(x,a-1,x,y);\n\tcan[++cantop]=y;\n\troot=merge(x,z);\n}\n```\n\n## \u6700\u7ec8\u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=200005;\nint ch[N<<6][3],val[N<<6],dat[N<<6],sz[N<<6],tag[N<<6],root[N],tot,x,y,z;\nint can[N],cantop;\nll sum[N<<6];\nvoid read(int &n)\n{\n\tint fh=1,ans;\n\tchar c;\n\twhile (!isdigit(c=getchar())) if (c=='-') fh=-1;\n\tans=c-48;\n\twhile (isdigit(c=getchar())) ans=ans*10+c-48;\n\tn=ans*fh;\n}\nint new_node(int x)\n{\n\tint a=cantop?can[cantop--]:++tot;\n\tsz[a]=1,sum[a]=val[a]=x,dat[a]=rand();\n\treturn a;\n}\nint clone(int x)\n{\n\tint a=cantop?can[cantop--]:++tot;\n\tsz[a]=sz[x],sum[a]=sum[x],val[a]=val[x],ch[a][0]=ch[x][0],ch[a][1]=ch[x][1],dat[a]=dat[x],tag[a]=tag[x];\n\treturn a;\n}\nvoid down(int x)\n{\n\tswap(ch[x][0],ch[x][1]);\n\tif (ch[x][0]) ch[x][0]=clone(ch[x][0]),tag[ch[x][0]]^=1;\n\tif (ch[x][1]) ch[x][1]=clone(ch[x][1]),tag[ch[x][1]]^=1;\n\ttag[x]=0;\n}\nvoid update(int x)\n{\n\tsz[x]=1+sz[ch[x][0]]+sz[ch[x][1]];\n\tsum[x]=val[x]+sum[ch[x][0]]+sum[ch[x][1]];\n}\nvoid split(int now,int k,int &x,int &y)\n{\n\tif (!now) {x=y=0;return;}\n\tif (tag[now]) down(now);\n\tif (sz[ch[now][0]]<k)\n\t{\n\t\tx=clone(now);\n\t\tsplit(ch[x][1],k-sz[ch[x][0]]-1,ch[x][1],y);\n\t\tupdate(x);\n\t}\n\telse \n\t{\n\t\ty=clone(now);\n\t\tsplit(ch[y][0],k,x,ch[y][0]);\n\t\tupdate(y);\n\t}\n}\nint merge(int x,int y)\n{\n\tif (!x||!y) return x+y;\n\telse if (dat[x]<dat[y])\n\t{\n\t\tif (tag[x]) down(x);\n\t\tch[x][1]=merge(ch[x][1],y);\n\t\tupdate(x);\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tif (tag[y]) down(y);\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\nvoid insert(int &root,int k,int a)\n{\n\tsplit(root,k,x,y);\n\troot=merge(merge(x,new_node(a)),y);\n}\nvoid del(int &root,int a)\n{\n\tsplit(root,a,x,z);\n\tsplit(x,a-1,x,y);\n\tcan[++cantop]=y;\n\troot=merge(x,z);\n}\nvoid rev(int &root,int l,int r)\n{\n\tsplit(root,l-1,x,y);\n\tsplit(y,r-l+1,y,z);\n\ttag[y]^=1;\n\troot=merge(x,merge(y,z));\n}\nll query(int &root,int l,int r)\n{\n\tsplit(root,l-1,x,y);\n\tsplit(y,r-l+1,y,z);\n\tll ans=sum[y];\n\troot=merge(x,merge(y,z));\n\treturn ans;\n}\nint main()\n{\n\tint n;\n\tll lastans=0;\n\tread(n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint v,opt,p,x,l,r;\n\t\tread(v),read(opt);\n\t\troot[i]=root[v];\n\t\tif (opt==1)\n\t\t{\n\t\t\tread(p),read(x);\n\t\t\tp^=lastans,x^=lastans;\n\t\t\tinsert(root[i],p,x);\n\t\t}\n\t\telse if (opt==2)\n\t\t{\n\t\t\tread(p);\n\t\t\tp^=lastans;\n\t\t\tdel(root[i],p);\n\t\t}\n\t\telse if (opt==3)\n\t\t{\n\t\t\tread(l),read(r);\n\t\t\tl^=lastans,r^=lastans;\n\t\t\tif (l>r) swap(l,r);\n\t\t\trev(root[i],l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(l),read(r);\n\t\t\tl^=lastans,r^=lastans;\n\t\t\tif (l>r) swap(l,r);\n\t\t\tlastans=query(root[i],l,r);\n\t\t\tprintf(\"%lld\\n\",lastans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1548303605,
        "uid": 107935,
        "name": "Thomasguo666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "$leafytree$ \u7684\u53ef\u6301\u4e45\u5316\u3002\n\n\u5495\u4e86\u5f88\u4e45\uff0c\u6ca1\u4e8b\u5e72\u5c31\u5199\u4e86\u3002\n\n\u5176\u5b9e\u548c\u666e\u901a $FHQ$ \u7684\u53ef\u6301\u4e45\u5316\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u5728 $pushdown$ \u4e0b\u4f20\u6807\u8bb0\u7684\u65f6\u5019\u5c06\u8282\u70b9\u53ef\u6301\u4e45\u5316\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\u3002\u4e0d\u8fc7\u56e0\u4e3a $leafytree$ \u7684 $merge$ \u662f $O(\\log \\frac{mxsz}{mnsz})$ \u7684\uff0c\u56e0\u6b64\u5728\u7384\u5b66\u610f\u4e49\u4e0a\u4e5f\u8bb8\u4f1a\u5feb\u4e9b(~~\u5047\u7684\uff0c\u5206\u88c2\u590d\u6742\u5ea6\u4e3a $O(\\log sz)$~~)\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u5f62\u6001\u4f7f\u8fd9\u68f5\u6811\u53ef\u4ee5\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u4ee3\u7801:\n```cpp\n#include<cctype>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<iostream>\n#include<map>\n#include<vector>\n#include<cmath>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<(b);++i)\n#define pb push_back\n#define mp make_pair\ntypedef unsigned long long uint64;\ntypedef unsigned int uint32;\ntypedef long long ll;\nusing namespace std;\n\nnamespace IO\n{\n    const uint32 Buffsize=1<<15,Output=1<<23;\n    static char Ch[Buffsize],*S=Ch,*T=Ch;\n    inline char getc()\n\t{\n\t\treturn((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n\t}\n    static char Out[Output],*nowps=Out;\n    \n    inline void flush(){fwrite(Out,1,nowps-Out,stdout);nowps=Out;}\n\n    template<typename T>inline void read(T&x)\n\t{\n\t\tx=0;static char ch;T f=1;\n\t\tfor(ch=getc();!isdigit(ch);ch=getc())if(ch=='-')f=-1;\n\t\tfor(;isdigit(ch);ch=getc())x=x*10+(ch^48);\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write(T x,char ch='\\n')\n\t{\n\t\tif(!x)*nowps++='0';\n\t\tif(x<0)*nowps++='-',x=-x;\n\t\tstatic uint32 sta[111],tp;\n\t\tfor(tp=0;x;x/=10)sta[++tp]=x%10;\n\t\tfor(;tp;*nowps++=sta[tp--]^48);\n\t\t*nowps++=ch;\n\t}\n}\nusing IO::read;\nusing IO::write;\nusing IO::getc;\nusing IO::flush;\n\ninline void Chkmin(int&u,int v){u>v?u=v:0;}\n\ninline void Chkmax(int&u,int v){u<v?u=v:0;}\n\ninline void file()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"water.in\",\"r\",stdin);\n\tfreopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\nconst int MAXN=2e5+7;\n\nstatic int N,rt[MAXN];\n\nnamespace BST\n{\n\tconst int NODE=MAXN*70;\n\n\tconst double alp=1-sqrt(2)/2,delp=alp/(1-alp);\n\n\tstatic struct node\n\t{\n\t\tll sm;\n\t\tint sz,rev,son[2];\n\t\tnode(){}\n\n\t\tnode(ll _s,int _sz,int _re,int _ls,int _rs)\n\t\t{sm=_s,sz=_sz,rev=_re,son[0]=_ls,son[1]=_rs;}\n\t}p[NODE];\n\n\tstatic int e;\n\n\tinline void reflush(int u)\n\t{\n\t\tp[u].sz=p[p[u].son[0]].sz+p[p[u].son[1]].sz;\n\t\tp[u].sm=p[p[u].son[0]].sm+p[p[u].son[1]].sm;\n\t}\n\n\tinline void pushdown(int u)\n\t{\n\t\tif(p[u].son[0]&&p[u].rev)\n\t\t{\n\t\t\tint ls=++e,rs=++e;\n\t\t\tp[ls]=p[p[u].son[1]],p[rs]=p[p[u].son[0]];\n\t\t\tp[u].son[0]=ls,p[u].son[1]=rs;\n\t\t\tp[ls].rev^=1,p[rs].rev^=1;\n\t\t\tp[u].rev=0;\n\t\t}\n\t}\n\n\tint merge(int u,int v)\n\t{\n\t\tif(!u||!v)return u|v;\n\t\tif(p[u].sz>=delp*p[v].sz&&p[v].sz>=delp*p[u].sz)\n\t\t{\n\t\t\tregister int cr=++e;\n\t\t\tp[cr].son[0]=u,p[cr].son[1]=v;\n\t\t\treflush(cr);\n\t\t\treturn cr;\n\t\t}\n\t\tif(p[u].sz<=p[v].sz)\n\t\t{\n\t\t\tpushdown(v);\n\t\t\tregister int ls=p[v].son[0],rs=p[v].son[1];\n\t\t\tif(p[rs].sz>=alp*(p[u].sz+p[v].sz))return merge(merge(u,ls),rs);\n\t\t\telse\n\t\t\t{\n\t\t\t\tpushdown(ls);\n\t\t\t\tregister int ll=p[ls].son[0],rr=p[ls].son[1];\n\t\t\t\treturn merge(merge(u,ll),merge(rr,rs));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpushdown(u);\n\t\t\tregister int ls=p[u].son[0],rs=p[u].son[1];\n\t\t\tif(p[ls].sz>=alp*(p[u].sz+p[v].sz))return merge(ls,merge(rs,v));\n\t\t\telse\n\t\t\t{\n\t\t\t\tpushdown(rs);\n\t\t\t\tregister int ll=p[rs].son[0],rr=p[rs].son[1];\n\t\t\t\treturn merge(merge(ls,ll),merge(rr,v));\n\t\t\t}\n\t\t}\n\t}\n\n\ttypedef pair<int,int>Pr;\n\n\tPr split(int u,int k)\n\t{\n\t\tif(!u||!k)return mp(0,u);\n\t\tif(k==p[u].sz)return mp(u,0);\n\t\tpushdown(u);\n\t\tif(k<=p[p[u].son[0]].sz)\n\t\t{\n\t\t\tPr y=split(p[u].son[0],k);\n\t\t\treturn mp(y.first,merge(y.second,p[u].son[1]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPr y=split(p[u].son[1],k-p[p[u].son[0]].sz);\n\t\t\treturn mp(merge(p[u].son[0],y.first),y.second);\n\t\t}\n\t}\n\n\tinline int insert(int ver,int ps,int x)\n\t{\n\t\tPr z=split(rt[ver],ps);\n\t\tp[++e]=node(x,1,0,0,0);\n\t\treturn merge(merge(z.first,e),z.second);\n\t}\n\n\tinline int del(int ver,int x)\n\t{\n\t\tPr z=split(rt[ver],x-1),y=split(z.second,1);\n\t\treturn merge(z.first,y.second);\n\t}\n\n\tinline int rever(int ver,int l,int r)\n\t{\n\t\tPr z=split(rt[ver],l-1),y=split(z.second,r-l+1);\n\t\tp[++e]=p[y.first],p[e].rev^=1;\n\t\treturn merge(z.first,merge(e,y.second));\n\t}\n\n\tinline ll query(int ver,int l,int r)\n\t{\n\t\tPr z=split(rt[ver],l-1),y=split(z.second,r-l+1);\n\t\treturn p[y.first].sm;\n\t}\n}\nusing BST::insert;\nusing BST::del;\nusing BST::rever;\nusing BST::query;\n\nstatic ll lasans;\n\ninline void work()\n{\n\tread(N);\n\tstatic int las,op;\n\tstatic ll l,r;\n\tfor(int i=1;i<=N;++i)\n\t{\n\t\tread(las),read(op),read(l),l^=lasans;\n\t\tif(op==2)rt[i]=del(las,l);\n\t\telse\n\t\t{\n\t\t\tread(r),r^=lasans;\n\t\t\tif(op==1)rt[i]=insert(las,l,r);\n\t\t\telse if(op==3)rt[i]=rever(las,l,r);\n\t\t\telse\n\t\t\t{\n\t\t\t\twrite(lasans=query(las,l,r)),\n\t\t\t\trt[i]=rt[las];\n\t\t\t}\n\t\t}\n\t}\n\tflush();\n}\n\nint main()\n{\n    file();\n\twork();\n\treturn 0;\n}\n```",
        "postTime": 1553607953,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6211\u662f\u53ef\u7231\u7684 [X](/user/502410) \u7684\u5c0f\u53f7\uff0c\u56e0\u4e3a [X](/user/502410) \u5df2\u7ecf\u5199\u8fc7 $\\text{fhq\\_treap}$ \u7684[\u9898\u89e3](/blog/502410/solution-p5055)\u4e86\uff0c\u6211\u53c8\u53d1\u73b0\u4e86\u4e00\u79cd\u5e38\u6570\u540a\u6253 $\\text{fhq\\_treap}$ \u7684\u6587\u827a\u5e73\u8861\u6811\uff0c\u53ea\u4ea4\u4e86\u56db\u53d1\u5c31\u5f97\u5230\u4e86\u6700\u4f18\u89e3 $\\text{(2022.9.28)}$\uff0c\u5c31\u518d\u5199\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u8bb2\u7684\u662f $\\text{merge\\_WBLT}$\uff0c\u5373\u53ef\u4ee5\u5408\u5e76\u7684 [$\\text{WBLT}$](http://oi-wiki.org/ds/wblt/)\uff0c\u5b83\u8fd8\u6709\u5f88\u591a\u522b\u79f0\uff0c\u4f8b\u5982 $\\text{Zyf\\_tree}$\u3002\n\n\u7531\u4e8e\u8fd9\u662f $\\text{leafy\\_tree}$\uff0c\u6240\u6709\u6570\u503c\u90fd\u5b58\u5728\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c\u5c31\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u8fd9\u6837\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u5b58\uff1a\n\n1. `sz`\uff1a\u5b50\u6811\u5927\u5c0f\uff08\u53f6\u5b50\u4e2a\u6570\uff09\uff1b\n2. `df`\uff1a\u5efa\u7acb\u65f6\u95f4\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u9700\u8981\u590d\u5236\uff1b\n3. `sm`\uff1a\u5b50\u6811\u6743\u503c\u548c\uff1b\n4. `rv`\uff1a\u7ffb\u8f6c\u7684\u61d2\u6807\u8bb0\u3002\n\n\u7279\u6b8a\u7684\uff0c\u53f6\u5b50\u8282\u70b9\u4e0d\u4f1a\u7ffb\u8f6c\uff0c`sm` \u7ef4\u62a4\u7684\u662f\u81ea\u5df1\u7684\u6743\u503c\u3002\n\n\u5206\u88c2\u548c $\\text{fhq\\_treap}$ \u7c7b\u4f3c\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u8003\u8651\u81ea\u5df1\uff1a\n```cpp\nvoid spt(int x,int k,int &L,int &R){\n    if(!x){L=R=0;return;}\n    if(!k){L=0,R=x;return;}\n    if(k==sz[x]){L=x,R=0;return;}pd(x);\n    if(k<sz[ls])cp(x),spt(ls,k,L,ls),pp(R=x);\n    else if(k==sz[ls])L=ls,R=rs;\n    else cp(x),spt(rs,k-sz[ls],rs,R),pp(L=x);\n}\n```\n\u5408\u5e76\u662f\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u5173\u952e\uff0c\u8003\u8651\u5408\u5e76\u4e24\u68f5\u6811 $L,R$\uff0c\u5982\u679c\u5927\u5c0f\u5dee\u5f02\u4e0d\u5927\uff0c\u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u5c06\u5b83\u4eec\u4e32\u8d77\u6765\uff0c\u5177\u4f53\u7684\uff0c$\\frac{\\max\\{sz_L,sz_R\\}}{sz_L+sz_R}\\le1-\\alpha$\uff0c$\\alpha$ \u662f\u4e00\u4e2a $(0,1)$ \u4e2d\u7684\u5b9e\u6570\uff0c\u4e00\u822c\u53d6 $1-\\frac{\\sqrt2}{2}$\uff0c\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u3002\n\n\u5426\u5219\uff0c\u5047\u5b9a $sz_R>sz_L$\uff0c\u8fd9\u65f6\u82e5 $sz_{rson_R}$ \u8db3\u591f\u5927\uff0c\u5373 $\\frac{sz_{rson_R}}{sz_L+sz_R}>\\alpha$\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 $L$ \u4e0e $sz_{lson_R}$ \u5408\u5e76\uff0c\u8fd4\u56de $R$\uff1b\n\n\u82e5\u4e0d\u591f\u5927\uff0c\u5219\u5c06 $lson_R$ \u62c6\u6210\u5de6\u53f3\u5b50\u6811 $l'$ \u548c $r'$\uff0c\u5c06 $L$ \u4e0e $l'$ \u5408\u5e76\uff0c\u518d\u5c06 $r'$ \u548c $rson_R$ \u5408\u5e76\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u6837\u6700\u591a\u9012\u5f52 $\\log_2sz_R$ \u5c42\u3002\n\n\u5982\u679c $sz_L>sz_R$ \u5bf9\u79f0\u5730\u505a\u5373\u53ef\uff1a\n```cpp\nint mg(int L,int R){\n    if(!L||!R)return L|R;\n    int x=sz[L]>sz[R]?L:R,sm=sz[L]+sz[R],y;\n    if(sz[x]<ra*sm){\n        df[x=++cnt]=dt,ls=L,rs=R,pp(x);\n        return x;\n    }\n    if(x==L){\n        pd(x);\n        if(sz[ls]>af*sm){\n            cp(x),rs=mg(rs,R),pp(x);return x;\n        }else{\n            y=rs,pd(y);int _l=t[y][0],_r=t[y][1];\n            return mg(mg(ls,_l),mg(_r,R));\n        }\n    }else{\n        pd(x);\n        if(sz[rs]>af*sm){\n            cp(x),ls=mg(L,ls),pp(x);return x;\n        }else{\n            y=ls,pd(y);int _l=t[y][0],_r=t[y][1];\n            return mg(mg(L,_l),mg(_r,rs));\n        }\n    }exit(102893);return 0;\n}\n```\n#### \u5c0f\u8bb0\uff1a\u4f5c\u8005\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u6837\u7684\u6587\u827a\u5e73\u8861\u6811\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5b9e\u6d4b\u65f6\u8dd1\u5f97\u6bd4\u5176\u5b83\u5e73\u8861\u6811\u771f\u7684\u5feb\u5f88\u591a\uff0c\u4ed4\u7ec6\u5206\u6790\uff0c\u8be5\u5e73\u8861\u6811\u4e5f\u8bb8\u5408\u5e76\u662f$O(\\log_2^2sz_R)$ \u7684\uff0c\u4f46\u53ef\u4ee5\u65ad\u5b9a\u7edd\u5bf9\u4e0d\u4f1a\u9000\u5316\u5230 $O(sz_R)$\uff0c\u5177\u4f53\u7684\uff0c\u53ef\u4ee5\u60f3\u8c61\u6700\u574f\u60c5\u51b5\u5e76\u8ba1\u7b97\u5408\u5e76\u9012\u5f52\u6b21\u6570\u3002",
        "postTime": 1664356232,
        "uid": 755286,
        "name": "EnofTeiPeople",
        "ccfLevel": 0,
        "title": "\u5e38\u6570\u4f18\u79c0\u7684merge-WBLT"
    },
    {
        "content": "\u4f60\u9700\u8981\u4f1a\u6587\u827a\u5e73\u8861\u6811\uff0c\u4e0d\u4f1a\u7684\u8bdd\u770b\u4e00\u4e0b[\u8fd9\u91cc](https://www.luogu.com.cn/blog/huaerxiao-nuo0930/solution-p3391)\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u662f\u7ef4\u62a4\u4e00\u4e0b\u7ffb\u8f6c\u7684\u61d2\u60f0\u6807\u8bb0\u548c\u533a\u95f4\u548c\uff0c\u63d2\u5165\u548c\u5220\u9664\u5c31\u50cf\u666e\u901a\u5e73\u8861\u6811\u91cc\u9762\u90a3\u6837\u5206\u88c2\u5408\u5e76\uff0c\u53ef\u6301\u4e45\u5316\u7684\u8bdd\u5c31\u662f\u5bf9\u4efb\u4f55\u4e00\u4e2a\u4fe1\u606f\uff08\u5305\u62ec\u61d2\u60f0\u6807\u8bb0\uff09\u6709\u4fee\u6539\u7684\u8bdd\u90fd\u8981\u590d\u5236\u4e00\u4e0b\u5728\u4fee\u6539\uff0c\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u7248\u672c\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\u4e22\u4e2a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstdlib>\nconst int maxn = 2e+5, maxsize = (maxn << 7) + 10;\nint val[maxsize];\nint key[maxsize];\nint size[maxsize];\nint lc[maxsize], rc[maxsize];\nbool lazy[maxsize];\ntypedef long long ll;\nll sum[maxsize];\nint nodecnt;\ninline int newnode(int x) {\n    val[++nodecnt] = x;\n    key[nodecnt] = std::rand();\n    size[nodecnt] = 1;\n    lc[nodecnt] = rc[nodecnt] = 0;\n    lazy[nodecnt] = 0;\n    sum[nodecnt] = x;\n    return nodecnt;\n}\ninline int copynode(int x) {\n    val[++nodecnt] = val[x];\n    key[nodecnt] = key[x];\n    size[nodecnt] = size[x];\n    lc[nodecnt] = lc[x];\n    rc[nodecnt] = rc[x];\n    lazy[nodecnt] = lazy[x];\n    sum[nodecnt] = sum[x];\n    return nodecnt;\n}\ninline void pushup(int x) {\n    size[x] = size[lc[x]] + size[rc[x]] + 1;\n    sum[x] = sum[lc[x]] + sum[rc[x]] + val[x];\n}\ninline void swap(int& x, int& y) {\n    int t = x;\n    x = y;\n    y = t;\n}\ninline void pushdown(int x) {\n    if (lazy[x]) {\n        if(lc[x]) \n            lc[x] = copynode(lc[x]),lazy[lc[x]] ^= 1;\n        if(rc[x]) \n            rc[x] = copynode(rc[x]),lazy[rc[x]] ^= 1;\n        swap(lc[x], rc[x]);\n        lazy[x] = 0;\n    }\n}\nvoid split(int rt, int x, int& a, int& b) {\n    if (!rt)\n        return (void)(a = b = 0);\n    int t = copynode(rt);\n    pushdown(t);\n    if (size[lc[t]] + 1 <= x) {\n        a = t;\n        split(rc[a], x - size[lc[t]] - 1, rc[a], b);\n    } else {\n        b = t;\n        split(lc[b], x, a, lc[b]);\n    }\n    pushup(t);\n}\nvoid join(int& rt, int a, int b) {\n    if (!a || !b)\n        return (void)(rt = a ^ b);\n    if (key[a] < key[b]) {\n        rt = b;\n        pushdown(rt);\n        join(lc[rt], a, lc[rt]);\n    } else {\n        rt = a;\n        pushdown(rt);\n        join(rc[rt], rc[rt], b);\n    }\n    pushup(rt);\n}\nll query(int& rt, int l, int r) {\n    int a, b, c;\n    split(rt, l - 1, a, b);\n    split(b, r - l + 1, c, b);\n    ll ans = sum[c];\n    join(b, c, b);\n    join(rt, a, b);\n    return ans;\n}\nvoid flip(int& rt, int l, int r) {\n    int a, b, c;\n    split(rt, l - 1, a, b);\n    split(b, r - l + 1, c, b);\n    lazy[c] ^= 1;\n    join(b, c, b);\n    join(rt, a, b);\n}\nvoid ins(int& rt, int p, int x) {\n    int a, b;\n    split(rt, p, a, b);\n    join(b, newnode(x), b);\n    join(rt, a, b);\n}\nvoid del(int& rt, int p) {\n    int a, b, c;\n    split(rt, p - 1, a, b);\n    split(b, 1, c, b);\n    join(rt, a, b);\n}\nint root[maxn + 1];\nint main() {\n    int n;\n    std::scanf(\"%d\", &n);\n    int v, op;\n    ll lastans = 0,x,y;\n    for (int i = 1; i <= n; i++) {\n        std::scanf(\"%d%d%lld\", &v, &op, &x);\n        x ^= lastans;\n        if (op != 2) {\n            std::scanf(\"%lld\", &y);\n            y ^= lastans;\n        }\n        root[i] = root[v];\n        switch (op) {\n            case 1:\n                ins(root[i], x, y);\n                break;\n            case 2:\n                del(root[i], x);\n                break;\n            case 3:\n                flip(root[i], x, y);\n                break;\n            case 4:\n                printf(\"%lld\\n\", lastans = query(root[i], x, y));\n                break;\n        }\n    }\n    return 0;\n}\n```\n\u81f3\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u6709\u4ec0\u4e48\u7528\u7684\u8bdd\uff0c\u5176\u5b9e\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u5982\u679c\u6709\u4eba\u77e5\u9053\u80fd\u5728\u8bc4\u8bba\u533a\u91cc\u9762\u8bf4\u4e00\u4e0b\u5417/kk\uff0c\u611f\u6fc0\u4e0d\u5df2\u3002",
        "postTime": 1621091279,
        "uid": 203008,
        "name": "toaru",
        "ccfLevel": 5,
        "title": "P5055 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811 \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a  \n*  $Splay$ \n*  \u53ef\u6301\u4e45\u5316$FHQ Treap \n\n\u53ef\u6301\u4e45\u5316$Splay =$\u53ef\u6301\u4e45\u5316$ FHQ Treap+Splay$   \n\u7b80\u5355\u52a0\u6cd5\u5373\u53ef     \n\u6253\u4e2a\u5e7f\u544a\uff1a[->](https://www.luogu.com.cn/blog/117771/p3835-ti-xie)         \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=5e5+10;\n#define int long long\nstruct node{\n\tint val;\n\tint size;\n\tint ch[2];\n\tint rnd;\n\tlong long sum;\n\tint rev;\n}t[NR<<6];\n#define lson t[id].ch[0]\n#define rson t[id].ch[1]\nvoid update(int id){\n\tt[id].size=t[lson].size+t[rson].size+1;\n\tt[id].sum=t[lson].sum+t[rson].sum+t[id].val;\n} \nint tot;\nint newNode(int val=0){\n\ttot++;\n\tt[tot].val=val;\n\tt[tot].size=1;\n\tt[tot].rnd=rand();\n\tt[tot].sum=val;\n\treturn tot;\n}\nvoid pushdown(int id){\n\tif(!t[id].rev)return;\n\tswap(t[id].ch[0],t[id].ch[1]);\n\tt[lson].rev^=1;\n\tt[rson].rev^=1;\n\tt[id].rev=0;\n}\nvoid splitk(int id,int k,int &x,int &y){\n\tif(!id){\n\t\tx=y=0;\n\t\treturn;\t\n\t}\n\tpushdown(id);\n\tint lsize=t[lson].size;\n\tif(k<=lsize){\n\t\ty=newNode();\n\t\tt[y]=t[id];\n\t\tsplitk(lson,k,x,t[y].ch[0]);\n\t\tupdate(y);\n\t}\n\telse{\n\t\tx=newNode();\n\t\tt[x]=t[id];\n\t\tsplitk(rson,k-lsize-1,t[x].ch[1],y);\n\t\tupdate(x);\n\t}\n}\nvoid inorder(int id){\n\tif(!id)return ;\n\tinorder(lson);\n\tprintf(\"{ \",t[id].val);\n\tinorder(rson);\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rnd<t[y].rnd){\n\t\tint id=newNode();\n\t\tpushdown(x);\n\t\tt[id]=t[x];\n\t\tt[id].ch[1]=merge(t[id].ch[1],y);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n\telse{\n\t\tint id=newNode();\n\t\tpushdown(y);\n\t\tt[id]=t[y];\n\t\tt[id].ch[0]=merge(x,t[id].ch[0]);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n}\nvoid insert(int k,int val,int &id){\n\tint x,y;\n\tsplitk(id,k,x,y);\n\tid=merge(x,merge(newNode(val),y));\n}\nvoid del(int k,int &id){\n\tint x,y,z;\n\tx=y=z=0;\n\tsplitk(id,k,x,z);\n\tsplitk(x,k-1,x,y);\n\tid=merge(x,z); \n}\nint rt[NR];\nint kth(int id,int k){\n\twhile(1){\n\t\tif(k<=t[lson].size)id=lson;\n\t\telse{\n\t\t\tk-=t[lson].size;\n\t\t\tif(!--k)return id;\n\t\t\tid=rson;\n\t\t}\n\t}\n}\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\tint n;\n\tcin>>n;\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint ver,opt,x,y;\n\t\tscanf(\"%lld%lld\",&ver,&opt);\n\t\trt[i]=rt[ver];\n\t\tif(opt==1){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tinsert(x,y,rt[i]);\n\t\t}\n\t\tif(opt==2){\n\t\t\tint x;\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tx^=ans;\n\t\t\tdel(x,rt[i]);\n\t\t}\n\t\tif(opt==3){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tint t1,t2,t3;\n\t\t\tsplitk(rt[i],x-1,t1,t2);\n\t\t\tsplitk(t2,y-x+1,t2,t3);  \n\t\t\tt[t2].rev^=1;\n\t\t\trt[i]=merge(t1,merge(t2,t3));\n\t\t}\n\t\tif(opt==4){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tint t1,t2,t3;\n\t\t\tsplitk(rt[i],y,t1,t3);\n\t\t\tsplitk(t1,x-1,t1,t2);\n\t\t\tans=t[t2].sum;\n\t\t\trt[i]=merge(t1,merge(t2,t3));\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u4f60\u89c9\u5f97\u8fd9\u5c31\u5b8c\u4e86\uff1f     \n\u7ffb\u8f6c\u64cd\u4f5c\u672c\u8d28\u4e0a\u4e5f\u662f\u5bf9\u5e8f\u5217\u505a\u4e86\u4fee\u6539   \n\u6240\u4ee5\u5728\u7ffb\u8f6c\u7684\u65f6\u5019\u8981\u628a\u7ffb\u8f6c\u524d\u7684\u5e8f\u5217\u4fdd\u5b58\u4e0b\u6765   \n\u800c\u7ffb\u8f6c\u6709\u53ef\u80fd\u81ea\u5df1\u662f\u4e00\u4e2a\u7248\u672c   \n\u6240\u4ee5\u4e0d\u4fdd\u5b58\u5c31\u4f1aWA\u4e00\u7247    \nAC\u4ee3\u7801\uff1a   \n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int NR=5e5+10;\n#define int long long\nstruct node{\n\tint val;\n\tint size;\n\tint ch[2];\n\tint rnd;\n\tlong long sum;\n\tint rev;\n}t[NR<<6];\n#define lson t[id].ch[0]\n#define rson t[id].ch[1]\nvoid update(int id){\n\tt[id].size=t[lson].size+t[rson].size+1;\n\tt[id].sum=t[lson].sum+t[rson].sum+t[id].val;\n} \nint tot;\nint newNode(int val=0){\n\ttot++;\n\tt[tot].val=val;\n\tt[tot].size=1;\n\tt[tot].rnd=rand();\n\tt[tot].sum=val;\n\treturn tot;\n}\nint copy(int k){\n\tint id=newNode();\n\tt[id]=t[k];\n\treturn id;\n}\nvoid pushdown(int id){\n\tif(!t[id].rev)return;\n\tif(t[id].ch[0])t[id].ch[0]=copy(t[id].ch[0]);\n\tif(t[id].ch[1])t[id].ch[1]=copy(t[id].ch[1]);\n\tswap(t[id].ch[0],t[id].ch[1]);\n\tt[lson].rev^=1;\n\tt[rson].rev^=1;\n\tt[id].rev=0;\n}\nvoid splitk(int id,int k,int &x,int &y){\n\tif(!id){\n\t\tx=y=0;\n\t\treturn;\t\n\t}\n\tpushdown(id);\n\tint lsize=t[lson].size;\n\tif(k<=lsize){\n\t\ty=newNode();\n\t\tt[y]=t[id];\n\t\tsplitk(lson,k,x,t[y].ch[0]);\n\t\tupdate(y);\n\t}\n\telse{\n\t\tx=newNode();\n\t\tt[x]=t[id];\n\t\tsplitk(rson,k-lsize-1,t[x].ch[1],y);\n\t\tupdate(x);\n\t}\n}\nvoid inorder(int id){\n\tif(!id)return ;\n\tinorder(lson);\n\tprintf(\"{ \",t[id].val);\n\tinorder(rson);\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rnd<t[y].rnd){\n\t\tint id=x;\n\t\tpushdown(x);\n\t\tt[id].ch[1]=merge(t[id].ch[1],y);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n\telse{\n\t\tint id=y;\n\t\tpushdown(y);\n\t\tt[id].ch[0]=merge(x,t[id].ch[0]);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n}\nvoid insert(int k,int val,int &id){\n\tint x,y;\n\tsplitk(id,k,x,y);\n\tid=merge(x,merge(newNode(val),y));\n}\nvoid del(int k,int &id){\n\tint x,y,z;\n\tx=y=z=0;\n\tsplitk(id,k,x,z);\n\tsplitk(x,k-1,x,y);\n\tid=merge(x,z); \n}\nint rt[NR];\nint kth(int id,int k){\n\twhile(1){\n\t\tif(k<=t[lson].size)id=lson;\n\t\telse{\n\t\t\tk-=t[lson].size;\n\t\t\tif(!--k)return id;\n\t\t\tid=rson;\n\t\t}\n\t}\n}\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tint n;\n\tcin>>n;\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint ver,opt,x,y;\n\t\tscanf(\"%lld%lld\",&ver,&opt);\n\t\trt[i]=rt[ver];\n\t\tif(opt==1){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tinsert(x,y,rt[i]);\n\t\t}\n\t\tif(opt==2){\n\t\t\tint x;\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tx^=ans;\n\t\t\tdel(x,rt[i]);\n\t\t}\n\t\tif(opt==3){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tint t1,t2,t3;\n\t\t\tsplitk(rt[i],x-1,t1,t2);\n\t\t\tsplitk(t2,y-x+1,t2,t3);  \n\t\t\tt[t2].rev^=1;\n\t\t\trt[i]=merge(t1,merge(t2,t3));\n\t\t}\n\t\tif(opt==4){\n\t\t\tint x,y;\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tx^=ans;\n\t\t\ty^=ans;\n\t\t\tint t1,t2,t3;\n\t\t\tsplitk(rt[i],y,t1,t3);\n\t\t\tsplitk(t1,x-1,t1,t2);\n\t\t\tans=t[t2].sum;\n\t\t\trt[i]=merge(t1,merge(t2,t3));\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u7801\u5b57\u4e0d\u6613\uff0c\u70b9\u8d5e\u652f\u6301\u4e00\u4e0b\uff1f",
        "postTime": 1596199257,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u5728\u6211\u770b\u6765\uff0c$\\text{fhq treap}$ \u6700\u5927\u7684\u4f18\u70b9\u5c31\u662f\u5b9e\u73b0\u4e86\u671f\u671b\u590d\u6742\u5ea6\u4e3a $O(\\log_2n)$ \u7684\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\uff0c\u8fd9\u4e00\u70b9\u5c06\u5b83\u7684\u529f\u80fd\u548c $\\text{splay}$\u3001\u5757\u72b6\u94fe\u8868\u533a\u5206\u5f00\u4e86\u3002\n\n\u8bf4\u5230\u5e95\uff0c\u53ef\u6301\u4e45\u5316\u548c\u666e\u901a\u7684\u5230\u5e95\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u5176\u5b9e\u5c31\u662f\uff1a\u540e\u9762\u7684\u64cd\u4f5c\u4e0d\u80fd\u5f71\u54cd\u5230\u524d\u9762\u7684\u8282\u70b9\uff0c\u4e8e\u662f\u5f53\u4e00\u4e2a\u8282\u70b9\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u8981\u5c06\u81ea\u5df1\u590d\u5236\u4e00\u904d\u3002\n\n\u8fd9\u6837\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u662f $O(n\\log_2n)$ \u7684\uff0c\u590d\u6742\u5ea6\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u6709\u4e00\u4e2a\u91cd\u70b9\uff1a\u5bf9 $\\text{Treap}$ \u6765\u8bf4\uff0c\u53ea\u8981\u6811\u5806\u7684\u6027\u8d28\u5f97\u5230\u6ee1\u8db3\uff0c\u4e00\u822c\u6811\u9ad8\u90fd\u5728 $2\\log_2n$ \u5de6\u53f3\uff0c\u4f46\u524d\u63d0\u662f\u8981\u6ee1\u8db3\u6811\u5806\u6027\u8d28\uff01\u4e8e\u662f\uff0c\u5982\u679c\u5728\u590d\u5236\u8282\u70b9\u65f6\u4e0d\u590d\u5236\u968f\u673a\u56e0\u5b50\uff0c\u7531\u4e8e\u6811\u5806\u7684\u6027\u8d28\u5f97\u4e0d\u5230\u6ee1\u8db3\uff0c\u6811\u7684\u9ad8\u5ea6\u5c31\u4f1a\u9000\u5316\u6210 $O(n)$\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e7+7;\nchar buf[N+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\ninline ll read(){\n    ll an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n    do an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n}\nint t[N][7],cnt,tim,Q,rt[N];\nll sum[N],dat[N],las;\n#define l(x) t[x][0]\n#define r(x) t[x][1]\n#define s(x) t[x][2]\n#define rv(x) t[x][3]\n#define d(x) t[x][4]\n#define dfn(x) t[x][5]\n#define rd(x) t[x][6]\ninline void cp(int &x){\n    if(x&&dfn(x)<tim){\n        dat[++cnt]=dat[x],sum[cnt]=sum[x];\n        for(int i=0;i<7;++i)t[cnt][i]=t[x][i];\n        dfn(x=cnt)=tim;\n    }\n}\ninline void pp(int &x){\n    s(x)=s(l(x))+s(r(x))+1;\n    sum[x]=sum[l(x)]+sum[r(x)]+dat[x];\n}\ninline void Rev(int &x){\n    if(x)cp(x),swap(l(x),r(x)),rv(x)^=1;\n}\ninline void pd(int &x){\n    cp(x);if(rv(x))Rev(l(x)),Rev(r(x)),rv(x)=0;\n}\nvoid split(int &x,int &y,int k,int now=rt[tim]){\n    if(!now)return void(x=y=0);pd(now);\n    if(k<=s(l(now))){\n        cp(y=now),split(x,l(y),k,l(y)),pp(y);\n    }else{\n        cp(x=now),split(r(x),y,k-s(l(now))-1,r(x)),pp(x);\n    }return;\n}\nint merge(int x,int y){\n    if(!x||!y)return x|y;pd(x),pd(y);\n    if(rd(x)<rd(y)){\n        r(x)=merge(r(x),y),pp(x);return x;\n    }else{\n        l(y)=merge(x,l(y)),pp(y);return y;\n    }\n}\nint main(){\n    mt19937 rg(N^time(0));\n    srand(time(0)^N);\n    int v,op,x,l,r,p,L,R;\n    Q=read();\n    for(tim=1;tim<=Q;++tim){\n        v=read(),op=read();\n        rt[tim]=rt[v];\n        if(op<3){\n            p=read()^las;\n            if(op&1){\n                split(L,R,p),dfn(++cnt)=tim,rd(cnt)=rg()^rand();\n                dat[cnt]=sum[cnt]=read()^las,s(cnt)=1;\n                rt[tim]=merge(merge(L,cnt),R);\n            }else{\n                split(L,rt[tim],p-1);\n                split(rt[tim],R,1);\n                rt[tim]=merge(L,R);\n            }\n        }else{\n            l=read()^las,r=read()^las;\n            split(L,rt[tim],l-1);\n            split(rt[tim],R,r-l+1);\n            if(op&1)Rev(rt[tim]);\n            else printf(\"%lld\\n\",las=sum[rt[tim]]);\n            rt[tim]=merge(merge(L,rt[tim]),R);\n        }\n    }return 0;\n}\n```",
        "postTime": 1647992153,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u53ef\u6301\u4e45\u5316\u7684 fhq_treap"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316$\\text{fhq-treap}$\u3002    \n\u6bd4\u8f83\u5e38\u7528\u7684\u5e73\u8861\u6811\u4e00\u822c\u5c31\u662f$\\text{fhq-treap}$\u548c$\\text{splay}$\u4e86\uff0c\u56e0\u4e3a$\\text{splay}$\u5728\u65cb\u8f6c\u7684\u65f6\u5019\u6811\u7684\u5f62\u6001\u53d1\u751f\u4e86\u53d8\u6362\uff0c\u56fa\u4e0d\u80fd\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u3002\u800c$\\text{fhq-treap}$\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u57fa\u4e8e\u5206\u88c2\u548c\u5408\u5e76\u7684\u57fa\u7840\u4e0a\u7684\uff0c\u5bf9\u8fd9\u68f5\u6811\u5e76\u6ca1\u6709\u5f71\u54cd\uff0c\u6545\u53ef\u4ee5\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u3002  \n### \u5982\u4f55\u8fdb\u884c\u53ef\u6301\u4e45\u5316\uff1f                 \n\u6211\u4eec\u5148\u601d\u8003\u4e00\u4e0b\u4e00\u9897\u666e\u901a\u7684$\\text{fhq-treap}$\u600e\u4e48\u5199\uff1f  \n\u6211\u4eec\u7528$\\text{size}$\u5728\u5206\u7684\u65f6\u5019\u4e00\u822c\u76f4\u63a5\u8ba9\u5f53\u524d\u8282\u70b9\u7684\u5de6/\u53f3\u5b69\u5b50\u76f4\u63a5\u8fdb\u884c\u9012\u5f52\u3002\u7136\u800c\u6211\u4eec\u5728\u53ef\u6301\u4e45\u5316\u7684\u65f6\u5019\u5fc5\u987b\u8981\u5c06\u8981\u6c42\u7684\u5386\u53f2\u7248\u672c\u7684\u6811\u5168\u90e8$\\text{copy}$\u4e0b\u6765\uff0c\u81ea\u7136\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a$\\text{clone}$\u51fd\u6570\u6765\u5b8c\u6210\u8fd9\u4e2a\u6b65\u9aa4\uff0c\u6211\u4eec\u9012\u5f52\u7684\u65f6\u5019\u76f4\u63a5\u6539\u6389\u8fd9\u9897\u514b\u9686\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u5c31\u597d\u4e86\u3002            \n\u81f3\u4e8e$\\text{merge}$\u7531\u4e8e\u6211\u4eec\u5728$\\text{split}$\u7684\u65f6\u5019\u5df2\u7ecf\u514b\u9686\u8fc7\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b89\u5fc3\u5927\u80c6\u7684\u5408\u5e76\u5373\u53ef\u3002           \n\u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u7a7a\u95f4\u7684\u95ee\u9898\u3002        \n\u5f53\u6211\u4eec\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8d44\u6e90\u5c31\u7a7a\u4e86\u51fa\u6765\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u7684\u8bdd\u5c31\u5b9e\u5728\u592a\u6d6a\u8d39\u4e86\u3002        \n\u6211\u4eec\u7528\u4e00\u4e2a$\\text{emp}$\u6570\u7ec4\u6765\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u3002     \n\u597d\u50cf\u5341\u5206\u597d\u5199\u7684\u6837\u5b50\u3002      \n### My Code:\n```cpp\n#include <bits/stdc++.h>\n#define il inline                       \ntypedef long long ll;         \nconst int maxn = 2e5 + 10;            \nusing namespace std;\ntemplate<class T> il void rd(T& res) {\n    res = 0;char c;bool sign = 0;\n    for(c = getchar();!isdigit(c);c = getchar()) sign |= c == '-';\n    for(;isdigit(c);c = getchar()) res = (res << 1) + (res << 3) + (c ^ 48);\n    (sign) && (res = -res);\n    return;\n}      \nstruct TreapNode {\n    int ch[2];\n    int rnd,size,val;bool rev;\n    ll sum;\n}tr[maxn << 6];               \nint emp[maxn],root[maxn];           \nint n,m,i,j,k,q,tot,emp_top,a,b,c,d;ll lans;\nil void _swap(int& x,int& y) {\n    x ^= y ^= x ^= y;\n    return;\n}   \nil int new_node(int v) {\n    int id = emp_top ? emp[emp_top--] : ++tot;                      \n    tr[id].rnd = rand();tr[id].val = v;       \n    tr[id].size = 1;tr[id].sum = v;tr[id].rev = 0; \n    tr[id].ch[0] = tr[id].ch[1] = 0;\n    return id;\n}\nil int clone(int o) {\n    int id = emp_top ? emp[emp_top--] : ++tot;\n    tr[id].ch[0] = tr[o].ch[0];tr[id].ch[1] = tr[o].ch[1];\n    tr[id].rnd = tr[o].rnd;tr[id].size = tr[o].size;tr[id].val = tr[o].val;\n    tr[id].rev = tr[o].rev;tr[id].sum = tr[o].sum;\n    return id;   \t\n}\nil void push_down(int o) {\n    if(tr[o].rev) {\n        _swap(tr[o].ch[0],tr[o].ch[1]);        \n        if(tr[o].ch[0]) tr[o].ch[0] = clone(tr[o].ch[0]),tr[tr[o].ch[0]].rev ^= 1; \n        if(tr[o].ch[1]) tr[o].ch[1] = clone(tr[o].ch[1]),tr[tr[o].ch[1]].rev ^= 1;\n        tr[o].rev = 0;\n  \t}\n  \treturn;\n}\nil void push_up(int o) {\n    tr[o].size = tr[tr[o].ch[0]].size + tr[tr[o].ch[1]].size + 1;\n    tr[o].sum = tr[tr[o].ch[0]].sum + tr[tr[o].ch[1]].sum + tr[o].val;\n    return;\n}\nvoid split_k(int now,int k,int& x,int& y) { \n    if(!now) {x = y = 0;return;}         \n    push_down(now);       \n    if(tr[tr[now].ch[0]].size < k) { \n        x = clone(now);        \n        split_k(tr[x].ch[1],k - tr[tr[x].ch[0]].size - 1,tr[x].ch[1],y);\n        push_up(x);\n    } else {\n        y = clone(now);\n        split_k(tr[y].ch[0],k,x,tr[y].ch[0]);                    \n        push_up(y);\t\t\n    } \n    return;\n} \nint merge(int u,int v) {\n    if(!u) return v;if(!v) return u;\n    if(tr[u].rnd < tr[v].rnd) {\n        push_down(u);\n        tr[u].ch[1] = merge(tr[u].ch[1],v);\n        push_up(u);\n        return u;\n    } else {\n        push_down(v);\n        tr[v].ch[0] = merge(u,tr[v].ch[0]);      \n        push_up(v);\n        return v;\n    }\n}\nil void insert(int& root,int x,int v) {   \n    split_k(root,x,a,b);                           \n    root = merge(merge(a,new_node(v)),b);\n    return;\n}  \nil void erase(int& root,int x) {  \n    split_k(root,x,a,c);  \n    split_k(a,x - 1,a,b);           \n    emp[++emp_top] = b;     \n    root = merge(a,c); \n    return;\n}\nil void rever(int& root,int l,int r) {\n    split_k(root,l - 1,a,b);\n    split_k(b,r - l + 1,b,c);  \n    tr[b].rev ^= 1;    \n    root = merge(a,merge(b,c));\n    return;\n}\nil ll query(int& root,int l,int r) {\n    split_k(root,l - 1,a,b);\n    split_k(b,r - l + 1,b,c);                     \n    ll res = tr[b].sum;\n    root = merge(a,merge(b,c));\n    return res;\n}\nint main() { \n    srand((unsigned)time(NULL));\n    rd(q);\n    for(int i = 1,x,y,l,r;i <= q;i++) {\n        int his,opt;rd(his);rd(opt);root[i] = root[his];\n        switch(opt) {\n            case 1:rd(x);rd(y);insert(root[i],x ^ lans,y ^ lans);break;\n            case 2:rd(x);erase(root[i],x ^ lans);break;\n            case 3:rd(l);rd(r);rever(root[i],l ^ lans,r ^ lans);break;  \n            case 4:rd(l);rd(r);l ^= lans;r ^= lans;printf(\"%lld\\n\",lans = query(root[i],l,r));break;\n        }    \n    //\tcout << a << ' ' << b << ' ' << c << endl;\n    }\n} \n\n```\n\n\n\n\n\n",
        "postTime": 1551781715,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u5565\u65f6\u5019\u201c\u6587\u827a\u5e73\u8861\u6811\u201d\u6210\u4e86 Splay \u7684\u4ee3\u79f0\u4e86\u2026\u2026\n\n\u679c\u65ad\u5199\u4e86\u4e2a FHQ Treap\uff0c\u7136\u540e 30pts\u3002  \n\u6c42\u52a9\u5927\u4f6c\u4e4b\u540e\u53d1\u73b0\u6807\u8bb0\u4e0b\u4f20\u65f6\u4e5f\u8981\u65b0\u5efa\u7ed3\u70b9\u3002\n\n\u4ee5\u53ca\u5408\u5e76\u7684\u65f6\u5019\u4e0d\u5fc5\u65b0\u5efa\u7ed3\u70b9\uff0c\u56e0\u4e3a\u5206\u88c2\u65f6\u5df2\u7ecf\u65b0\u5efa\u4e86\uff0c\u5426\u5219\u4f1a MLE\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#define ls(p) tree[p].lson\n#define rs(p) tree[p].rson\nusing namespace std;\nconst int N = 2e5;\nint n;\nlong long lastans;\nstruct node\n{\n    int rnd,sz,rev;\n    long long val,sum;\n    int lson,rson;\n} tree[(N << 7) + 10];\nint rt[N + 10];\ninline int new_node(long long v = 0)\n{\n    static int tot = 0;\n    tree[++tot].val = v;\n    tree[tot].sum = v;\n    tree[tot].rnd = rand();\n    tree[tot].sz = 1;\n    return tot;\n}\ninline int copy_node(int p)\n{\n    int ret = new_node();\n    tree[ret] = tree[p];\n    return ret;\n}\ninline void up(int p)\n{\n    tree[p].sz = tree[ls(p)].sz + 1 + tree[rs(p)].sz;\n    tree[p].sum = tree[ls(p)].sum + tree[p].val + tree[rs(p)].sum;\n}\ninline void down(int p)\n{\n    if(tree[p].rev)\n    {\n        if(ls(p))\n            ls(p) = copy_node(ls(p));\n        if(rs(p))\n            rs(p) = copy_node(rs(p));\n        swap(ls(p),rs(p));\n        if(ls(p))\n            tree[ls(p)].rev ^= 1;\n        if(rs(p))\n            tree[rs(p)].rev ^= 1;\n        tree[p].rev = 0;\n    }\n}\nvoid split(int p,int k,int &x,int &y)\n{\n    if(!p)\n    {\n        x = y = 0;\n        return ;\n    }\n    down(p);\n    if(tree[ls(p)].sz < k)\n        x = copy_node(p),split(rs(x),k - tree[ls(p)].sz - 1,rs(x),y),up(x);\n    else\n        y = copy_node(p),split(ls(y),k,x,ls(y)),up(y);\n}\nint merge(int x,int y)\n{\n    if(!x || !y)\n        return x | y;\n    down(x),down(y);\n    if(tree[x].rnd < tree[y].rnd)\n    {\n        rs(x) = merge(rs(x),y);\n        up(x);\n        return x;\n    }\n    else\n    {\n        ls(y) = merge(x,ls(y));\n        up(y);\n        return y;\n    }\n}\nint main()\n{\n    srand(19260817);\n    scanf(\"%d\",&n);\n    int cnt = 0;\n    int v,op;\n    long long a,b;\n    int x,y,z;\n    while(n--)\n    {\n        scanf(\"%d%d\",&v,&op);\n        if(op == 1)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            a ^= lastans,b ^= lastans;\n            split(rt[v],a,x,y);\n            rt[++cnt] = merge(merge(x,new_node(b)),y);\n        }\n        else if(op == 2)\n        {\n            scanf(\"%lld\",&a);\n            a ^= lastans;\n            split(rt[v],a,x,z);\n            split(x,a - 1,x,y);\n            rt[++cnt] = merge(x,z);\n        }\n        else if(op == 3)\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            a ^= lastans,b ^= lastans;\n            split(rt[v],b,x,z);\n            split(x,a - 1,x,y);\n            tree[y].rev ^= 1;\n            rt[++cnt] = merge(merge(x,y),z);\n        }\n        else\n        {\n            scanf(\"%lld%lld\",&a,&b);\n            a ^= lastans,b ^= lastans;\n            split(rt[v],b,x,z);\n            split(x,a - 1,x,y);\n            printf(\"%lld\\n\",lastans = tree[y].sum);\n            rt[++cnt] = merge(merge(x,y),z);\n        }\n    }\n}\n```\n",
        "postTime": 1543658425,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u524d\u7f6e\u77e5\u8bc6\uff1a[P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)`&&(`[P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.luogu.com.cn/problem/P3919)`||`[P3835 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3835)`)`\n\n\u589e\u52a0\uff1f\u5220\u9664\uff1f\u7ffb\u8f6c\uff1f\u8be2\u95ee\uff1f\u8fd8\u53ef\u6301\u4e45\u5316\uff1f\u600e\u4e48\u529e\uff1f\n\n> \u8ba9\u6211\u601d\u8003\u4e00\u4e0b `root[i]` \u548c `root[i - 1]` \u7684\u5b50\u8282\u70b9\u4eec\u6709\u54ea\u4e9b\u4e92\u76f8\u91cd\u53e0\u2026\u2026\u545c\u545c\u545c\uff0c\u592a\u590d\u6742\u4e86\uff0c\u60f3\u4e0d\u51fa\u6765\u3002\n\n\u663e\u7136\uff0c\u4eba\u8111\u7684\u6027\u80fd\u4e0d\u8db3\u4ee5\u60f3\u8c61\u8fd9\u4e48\u4e00\u4e2a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e0d\u8fc7\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u5206\u6210\u51e0\u90e8\u5206\uff0c**\u53ea\u8981\u80fd\u6ee1\u8db3\u5404\u90e8\u5206\u7684\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u505a\u51fa\u6765\u4e86**\u3002\n\n\u9996\u5148\uff0c\u8981**\u4fdd\u8bc1\u4ee5 `root[i]` \u4e3a\u6839\u7684\u6811\u6ee1\u8db3treap\u6027\u8d28**\uff0c\u8fd9\u6837\u624d\u80fd\u4ee5 $O(\\log{n})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u6811 `split` \u548c `merge`\u3002\u8fd9\u663e\u7136\u662f\u666e\u901a\u5e73\u8861\u6811\u7684\u95ee\u9898\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u7ba1\u5b83\u7684\u5b50\u8282\u70b9\u662f\u54ea\u6765\u7684\uff0c\u662f\u5df2\u6709\u7684\u8fd8\u662f\u65b0\u751f\u6210\u7684\uff0c\u53ea\u8981\u6ee1\u8db3treap\u6027\u8d28\u7b2c\u4e00\u6b65\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u5176\u6b21\uff0c\u8981\u53ef\u6301\u4e45\u5316\u3002\u53ef\u6301\u4e45\u5316\u5176\u5b9e\u5c31\u662f\u8981**\u4fdd\u8bc1\u65e7\u7248\u672c\u7684\u6811\u6ca1\u6709\u88ab\u4fee\u6539**\u3002\u6211\u4eec\u4e0d\u9700\u8981\u60f3\u8c61\u51fa\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u548b\u64cd\u4f5c\u7684\uff0c\u53ea\u9700\u8981\u6ee1\u8db3\u8fd9\u4e2a\u6027\u8d28\u5c31\u884c\u4e86\u3002\u4e8e\u662f\uff0c\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u66f4\u6539\u65e7\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u5c06\u8981\u66f4\u6539\u7684\u8282\u70b9\u590d\u5236\u4e00\u4e0b\uff0c\u66f4\u6539\u590d\u5236\u540e\u7684\u8282\u70b9\u3002\u8fd9\u8981\u5c31\u6ee1\u8db3\u53ef\u6301\u4e45\u5316\u7684\u6027\u8d28\u4e86\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8981\u6253\u4e00\u4e2a\u7ffb\u8f6c\u61d2\u6807\u8bb0 `rev`\uff0c**\u4fdd\u8bc1 `rev = true` \u65f6\uff0c\u6574\u68f5\u6811\u88ab\u7ffb\u8f6c\u8fc7**\u3002\u6211\u4eec\u4f9d\u65e7\u4e0d\u7ba1\u548b\u64cd\u4f5c\u7684\uff0c\u5f53\u6211\u4eec\u8981\u8bbf\u95ee\u8282\u70b9 `o` \u7684\u5b50\u8282\u70b9\u65f6\uff0c \u6211\u4eec\u5c31\u4e0b\u4f20\u61d2\u6807\u8bb0\u3002\n\n\u8fd9\u6837\uff0c\u6240\u6709\u6027\u8d28\u5c31\u90fd\u6ee1\u8db3\u5566\uff01\uff01\uff01\u6b63\u786e\u6027\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4fdd\u8bc1\u4e86\uff01\uff01\uff01\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct node {\n\tbool rev;\n\tint val; long long sum; int size, rnd;\n\tnode *lson, *rson;\n};\nstruct node_pair {node *le, *gt;};\n\nconst int N = 2e5;\nint n; long long lastans;\nnode *null = new node{false, 0, 0, 0, 0, nullptr, nullptr}, *root[N + 1];\n\nnode *copy(node *o) {\n\treturn new node{o->rev, o->val, o->sum, o->size, o->rnd, o->lson, o->rson};\n}\ninline void update(node *o) {\n\to->size = o->lson->size + o->rson->size + 1;\n\to->sum = o->lson->sum + o->rson->sum + o->val;\n}\ninline void push_down(node *o) {\n\tif(o->rev) {\n\t\to->rev = false;\n\t\tswap(o->lson, o->rson);\n\t\tif(o->lson != null) {o->lson = copy(o->lson); o->lson->rev ^= true;}\n\t\tif(o->rson != null) {o->rson = copy(o->rson); o->rson->rev ^= true;}\n\t}\n}\nnode_pair split(node *o, int k) {\n\tif(o == null) return {null, null};\n\tnode *p = copy(o); push_down(p);\n\tif(k <= p->lson->size) {\n\t\tnode_pair get = split(p->lson, k);\n\t\tp->lson = get.gt; update(p);\n\t\treturn {get.le, p};\n\t}\n\telse {\n\t\tnode_pair get = split(p->rson, k - p->lson->size - 1);\n\t\tp->rson = get.le; update(p);\n\t\treturn {p, get.gt};\n\t}\n}\nnode *merge(node *o, node *p) {\n\tif(o == null) return p;\n\tif(p == null) return o;\n\tif(o->rnd < p->rnd) {\n\t\tnode *q = copy(o); push_down(q);\n\t\tq->rson = merge(q->rson, p);\n\t\tupdate(q); return q;\n\t}\n\telse {\n\t\tnode *q = copy(p); push_down(q);\n\t\tq->lson = merge(o, q->lson);\n\t\tupdate(q); return q;\n\t}\n}\n\nint main() {\n\t// freopen(\"in\", \"r\", stdin); freopen(\"out\", \"w\", stdout);\n\tsrand(time(nullptr));\n\tscanf(\"%d\", &n);\n\troot[0] = null;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint v, opt;\n\t\tscanf(\"%d%d\", &v, &opt);\n\t\tif(opt == 1) {\n\t\t\tlong long p, x; scanf(\"%lld%lld\", &p, &x); p ^= lastans; x ^= lastans;\n\t\t\tnode_pair get = split(root[v], p);\n\t\t\troot[i] = merge(get.le, merge(new node{false, x, x, 1, rand(), null, null}, get.gt));\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt == 2) {\n\t\t\tlong long p; scanf(\"%lld\", &p); p ^= lastans;\n\t\t\tnode_pair get1 = split(root[v], p - 1); node_pair get2 = split(get1.gt, 1);\n\t\t\troot[i] = merge(get1.le, get2.gt);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt == 3) {\n\t\t\tlong long l, r; scanf(\"%lld%lld\", &l, &r); l ^= lastans; r ^= lastans;\n\t\t\tnode_pair get1 = split(root[v], l - 1); node_pair get2 = split(get1.gt, r - l + 1);\n\t\t\tget2.le->rev ^= true;\n\t\t\troot[i] = merge(get1.le, merge(get2.le, get2.gt));\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt == 4) {\n\t\t\troot[i] = root[v];\n\t\t\tlong long l, r; scanf(\"%d%d\", &l, &r); l ^= lastans; r ^= lastans;\n\t\t\tnode_pair get1 = split(root[v], l - 1); node_pair get2 = split(get1.gt, r - l + 1);\n\t\t\tprintf(\"%lld\\n\", lastans = get2.le->sum);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1647754247,
        "uid": 150956,
        "name": "StillEmpty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 \u2014\u2014 P5055 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811"
    },
    {
        "content": "\u770b\u9898\u89e3\u4e4b\u524d\u4f60\u9700\u8981\u5b66\u4f1a\uff1a[fhq_Treap](https://www.luogu.com.cn/blog/s19418/fei-xuan-treap-xue-xi-bi-ji)\uff0c[\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3835)\uff0c[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\u3002\n\n\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\uff0c\u5c31\u662f \u53ef\u6301\u4e45\u5316 \u7684 \u6587\u827a \u7684 \u5e73\u8861\u6811\uff08\u5176\u5b9e\u5c31\u662f\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u7684\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\uff09\u3002\n\n\u9996\u5148\u53ef\u6301\u4e45\u5316\u90a3\u5c31\u8981\u7528 fhq_Treap\uff0c\u800c\u521a\u597d\u6587\u827a\u5e73\u8861\u6811\u4e5f\u53ef\u4ee5\u7528\u5b83\u6765\u5b9e\u73b0\u3002\n\n\u5148\u8bf4\u8bf4\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3002\n\n\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u56e0\u4e3a fhq_Treap \u4e0d\u9700\u8981\u65cb\u8f6c\uff0c\u6240\u4ee5\u5728 Split \u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5bf9\u70b9\u8fdb\u884c\u590d\u5236\u3002\n\n\u800c\u4e14\u6bcf\u6b21\u4fee\u6539\u7684\u5fc5\u7136\u53ea\u6709\u4e00\u4e2a\u5b50\u6811\u4e0a\u7684\u70b9\uff0c\u6240\u4ee5\u6bcf\u6b21\u4fee\u6539\u7684\u8282\u70b9\u4e0d\u4f1a\u5f88\u591a\uff0c\u5c31\u80fd\u505a\u5230\u4f18\u5316\u7a7a\u95f4\u7684\u7ed3\u679c\u3002\n\n\u518d\u8bf4\u8bf4\u6587\u827a\u5e73\u8861\u6811\u3002\n\n\u60f3\u8981\u8ba9\u533a\u95f4\u7ffb\u8f6c\u90a3\u53ea\u8981\u5c06\u8282\u70b9\u90fd\u5c5e\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u8c03\u6362\u7684\u884c\u4e86\uff08\u5efa\u8bae\u753b\u56fe\u7406\u89e3\uff09\u3002\n\n\u5982\u4f55\u627e\u5230\u8282\u70b9\u90fd\u5c5e\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u5b50\u6811\u5462\uff1f\n\n\u539f\u672c\u7684 fhq_Treap \u662f\u6309\u7167\u8282\u70b9\u503c\u6765 Split\uff0c\u73b0\u5728\u6539\u4e00\u4e0b\uff0c\u6309\u7167\u4f4d\u7f6e\u6765 Split\u3002\n\n\u5f88\u663e\u7136\u5148 Split \u53f3\u7aef\u70b9\uff0c\u518d\u5728\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u7aef\u70b9\u7684\u5b50\u6811\u91cc Split \u5de6\u7aef\u70b9\u51cf\u4e00\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f97\u5230\u4f4d\u7f6e\u5728\u533a\u95f4\u5185\u7684\u5b50\u6811\u7684\u6839\u4e86\u3002\n\n\u4f46\u662f\u8981\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\u8282\u70b9\u65f6\u95f4\u4f1a\u70b8\u6389\uff0c\u600e\u4e48\u529e\uff1f\n\n\u5176\u5b9e\u53ea\u8981\u5b66\u4e60\u7ebf\u6bb5\u6811\u90a3\u6837\u5728\u6839\u8282\u70b9\u6253\u4e0a\u61d2\u6807\u8bb0\uff0c\u8981\u8bbf\u95ee\u7684\u65f6\u5019\u518d\u66f4\u65b0\u3002\n\n\u6700\u540e\u7684\u4ee3\u7801\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u5c06\u4e24\u4e2a\u4ee3\u7801\u7ed3\u5408\u8d77\u6765\uff0c\u7136\u540e\u8c03\u4e00\u4e0b\u7ec6\u8282\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 200005\nint n;long long lastans;\nstruct fhq_Treap{\n    int lson,rson,rnd,siz,tag;\n    long long val,sum;\n} t[N<<6];\nint rt[N];\n#undef N\ninline int New(long long v=0){\n    static int tot(0);\n    t[++tot].val=v;t[tot].sum=v;\n    t[tot].rnd=rand();t[tot].siz=1;\n    return tot;\n}\ninline int Copy(int p){\n    int res(New());\n    t[res]=t[p];\n    return res;\n}\ninline void pushup(int p){\n    t[p].siz=t[t[p].lson].siz+t[t[p].rson].siz+1;\n    t[p].sum=t[t[p].lson].sum+t[t[p].rson].sum+t[p].val;\n}\ninline void pushdown(int p){\n    if(!t[p].tag)return;\n    if(t[p].lson) t[p].lson=Copy(t[p].lson);\n    if(t[p].rson) t[p].rson=Copy(t[p].rson);\n    swap(t[p].lson,t[p].rson);\n    if(t[p].lson) t[t[p].lson].tag^=1;\n    if(t[p].rson) t[t[p].rson].tag^=1;\n    t[p].tag=0;\n}\nvoid Split(int p,int k,int &x,int &y){\n    if(!p){\n        x=y=0;\n        return;\n    }\n    pushdown(p);\n    if(t[t[p].lson].siz<k){\n        x=Copy(p);\n        Split(t[x].rson,k-t[t[p].lson].siz-1,t[x].rson,y);\n        pushup(x);\n    }\n    else{\n        y=Copy(p);\n        Split(t[y].lson,k,x,t[y].lson);\n        pushup(y);\n    }\n}\nint Merge(int x,int y){\n    if(!x||!y)return x|y;\n    pushdown(x);pushdown(y);\n    if(t[x].rnd<t[y].rnd){\n        t[x].rson=Merge(t[x].rson,y);\n        pushup(x);\n        return x;\n    }\n    else{\n        t[y].lson=Merge(x,t[y].lson);\n        pushup(y);\n        return y;\n    }\n}\nint main(){\n    srand((unsigned)time(NULL));\n    scanf(\"%d\",&n);\n    int v,op,x,y,z;long long a,b;\n    for(int i(1);i<=n;++i){\n        scanf(\"%d%d\",&v,&op);\n        if(op==1){\n            scanf(\"%lld%lld\",&a,&b);\n            a^=lastans;b^=lastans;\n            Split(rt[v],a,x,y);\n            rt[i]=Merge(Merge(x,New(b)),y);\n        }\n        else if(op==2){\n            scanf(\"%lld\",&a);\n            a^=lastans;\n            Split(rt[v],a,x,z);\n            Split(x,a-1,x,y);\n            rt[i]=Merge(x,z);\n        }\n        else if(op==3){\n            scanf(\"%lld%lld\",&a,&b);\n            a^=lastans;b^=lastans;\n            Split(rt[v],b,x,z);\n            Split(x,a-1,x,y);\n            t[y].tag^=1;\n            rt[i]=Merge(Merge(x,y),z);\n        }\n        else{\n            scanf(\"%lld%lld\",&a,&b);\n            a^=lastans;b^=lastans;\n            Split(rt[v],b,x,z);\n            Split(x,a-1,x,y);\n            printf(\"%lld\\n\",lastans=t[y].sum);\n            rt[i]=Merge(Merge(x,y),z);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1647601682,
        "uid": 554574,
        "name": "gyyyyx",
        "ccfLevel": 0,
        "title": "\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811"
    },
    {
        "content": "\u677f\u5b50\u9898\u5566\uff0c\u8fd9\u73a9\u610f\u513f\u53ea\u80fd FHQ treap \u505a\n\n\n\uff08\u5c31\u662f\u597d\u5947\u4e3a\u4ec0\u4e48\u7a7a\u95f4\u8981\u5f00\u90a3\u4e48\u5927\uff0c\u522b\u7684\u9898\u89e3\u90fd\u6ca1\u89e3\u91ca\u8fc7\uff0c\u6211\u7b97\u51fa\u6765\u7684\u8bdd\u662f log \u7ea7\u522b\u7684\u554a...\u54ea\u4f4d\u5927\u4f6c\u80fd\u56de\u7b54\u4e00\u4e0b\u554aQWQ\uff09\n\n\n\u603b\u4f53\u6765\u8bb2\u4e0d\u662f\u975e\u5e38\u7684 nan \uff0c\u5176\u5b9e\u5c31\u662f\u6c5f \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 \u548c FHQ treap \u4e24\u9053\u7d2b\u9898\u5e76\u5728\u4e86\u4e00\u8d77\u53d8\u6210\u4e86\u9ed1\u9898\uff0c~~\u5047\u7684\u3010\u96fe~~\n\n\u4f46\u53ef\u6301\u4e45\u5316\u786e\u5b9e\u5927\u591a\u662f\u7528\u4e86\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u601d\u8def\uff0c\u8003\u8651\u65b0\u5efa\u8282\u70b9\uff0c\u4fdd\u7559\u5386\u53f2\u7248\u672c\u4ec0\u4e48\u7684...\n\n\u4e8e\u662f\u5c31\u8fd9\u4e48\u6109\u5feb\u7684 A \u4e86\u6b64\u9898...\n\n------\n\n\u804a\u592a\u591a\u4e86 QWQ\n\n\u9996\u5148\u4f60\u5f97 A \u4e86\u6587\u827a\u5e73\u8861\u6811\uff08\u7528 FHQ treap A \u7684\uff09\n\n\u5176\u6b21\u4f60\u5f97\u5b66\u4f1a\u53ef\u6301\u4e45\u5316\u7684\u601d\u60f3\n\n\u5176\u5b9e\u522b\u7684\u90fd\u662f\u677f\u5b50\uff0c\u5c31\u662f split \u7684\u65f6\u5019\u6bd4\u8f83\u7279\u6b8a\u7f62\u4e86\uff0c\u8fd8\u6709\u4e0b\u7a7f\u6807\u8bb0\u7684\u65f6\u5019\u4e5f\u662f\uff0c\u9700\u8981\u65b0\u5efa\u8282\u70b9\u7136\u540e\u8fde\u5230\u7236\u8282\u70b9\u90a3\u91cc\n\n\n```\n//by Judge\n#include<cstdio>\n#include<iostream>\n#define ll long long\nusing namespace std;\nconst int N=2e5;\nconst int M=(N<<7)+3; //\u6ce8\u610f\u770b\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline ll read(){ ll x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(ll x,char chr='\\n'){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=chr;\n} int n,op,v,l,r,a,b,c; ll ans;\nnamespace FHQTreap{ arr rt,pos,siz,fl;\n\tll w[M],sum[M]; int now,tot,son[M][2];\n\tinline int Rand() { static int seed=703;return seed=int(seed*48271LL%(~0u>>1));}\n\tinline int newnode(ll x=0){return w[++tot]=x,sum[tot]=x,pos[tot]=Rand(),siz[tot]=1,tot;}\n\tinline int copy(int x){ int y=newnode(); //\u590d\u5236\u8282\u70b9\u6700\u597d\u5355\u72ec\u6765\u4e00\u4e2a\u5c0f\u51fd\u6570...\u7136\u540e\u91cc\u9762\u8981 copy \u7684\u522b\u5fd8 copy \u5168\uff0c\u6211\u88ab\u8fd9\u73a9\u610f\u513f\u5751\u4e86\u4e24\u6b21\n\t\tson[y][0]=son[x][0],son[y][1]=son[x][1],siz[y]=siz[x];\n\t\tw[y]=w[x],sum[y]=sum[x],fl[y]=fl[x]; return y;\n\t}\n\tinline void pushup(int x){\n\t\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n\t\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+w[x];\n\t}\n\tinline void pushdown(int x){ if(!fl[x]) return;  //\u6ce8\u610f\u770b+1\n\t\tif(son[x][0]) son[x][0]=copy(son[x][0]);\n\t\tif(son[x][1]) son[x][1]=copy(son[x][1]);\n\t\tfl[son[x][0]]^=1,fl[son[x][1]]^=1;\n\t\tswap(son[x][0],son[x][1]),fl[x]=0;\n\t}\n\tint merge(int x,int y){ if(!x||!y) return x|y; //merge \u597d\u50cf\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\n\t\tif(pos[x]<pos[y]) return pushdown(x),son[x][1]=merge(son[x][1],y),pushup(x),x;\n\t\telse return pushdown(y),son[y][0]=merge(x,son[y][0]),pushup(y),y;\n\t}\n\tvoid split(int rt,int k,int& x,int& y){ //\u6ce8\u610f\u770b+1\n    \tif(!rt) return x=y=0,void(); pushdown(rt);\n\t\tif(siz[son[rt][0]]>=k) y=copy(rt),split(son[y][0],k,x,son[y][0]),pushup(y); //\u8fd9\u91cc\u662fcopy\u4e86\u4e4b\u524d\u7684\u8282\u70b9\u7136\u540e\u76f4\u63a5\u62ff\u4ed6\u505a\u4e0b\u53bb\u4e86\n\t\telse x=copy(rt),split(son[x][1],k-siz[son[x][0]]-1,son[x][1],y),pushup(x);  //\u540c\u4e0a\n\t}\n} using namespace FHQTreap;\nint main(){ //\u4e3b\u51fd\u6570\u7167\u7740\u9898\u76ee\u6253\u5c31\u597d\u4e86\n\tfor(n=read();n;--n){ v=read(),op=read();\n\t\tif(op==1){\n\t\t\tl=read()^ans,r=read()^ans,split(rt[v],l,a,b);\n\t\t\trt[++now]=merge(a,merge(newnode(r),b));\n\t\t} else if(op==2){\n\t\t\tl=read()^ans,split(rt[v],l-1,a,b);\n\t\t\tsplit(b,1,b,c),rt[++now]=merge(a,c);\n\t\t} else if(op==3){ l=read()^ans,r=read()^ans;\n\t\t\tsplit(rt[v],r,a,c),split(a,l-1,a,b);\n\t\t\tfl[b]^=1,rt[++now]=merge(a,merge(b,c));\n\t\t} else if(op==4){ l=read()^ans,r=read()^ans;\n\t\t\tsplit(rt[v],r,a,c),split(a,l-1,a,b);\n\t\t\tprint(ans=sum[b]),rt[++now]=merge(a,merge(b,c));\n\t\t}\n\t} return Ot(),0;\n}\n```\n\n\n",
        "postTime": 1552529407,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6211\u7528\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u652f\u6301\u533a\u95f4\u4fee\u6539\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u3002\u770b\u5230\u5927\u5bb6\u7684\u505a\u6cd5\u90fd\u662f\u5728\u4e0b\u653e\u6807\u8bb0\u7684\u65f6\u5019\u628a\u8282\u70b9\u590d\u5236\u4e00\u904d\uff0c\u89c9\u5f97\u8fd9\u6837\u5f88\u4e0d\u723d\u554a\u2026\u2026\u6211\u60f3\uff0c\u80fd\u4e0d\u80fd\u5e72\u8106\u628a\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u8282\u7ea6\u4e00\u4e9b\u7a7a\u95f4\u548c\u65f6\u95f4\u5462\uff1f\n\n\u5b9e\u73b0\u7684\u5173\u952e\u5728\u4e8emerge\u548csplit\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002\n\n### split\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u628a\u4ee5$x$\u4e3a\u6839\u7684\u8fd9\u4e00\u68f5\u5b50\u6811\uff0c\u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u4e2d\u7684\u524d$k$\u4e2a\u8282\u70b9\u5206\u5230\u7b2c\u4e00\u68f5$treap$\u4e2d\u53bb\uff0c\u540e$n-k$\u4e2a\u8282\u70b9\u5206\u5230\u7b2c\u4e8c\u68f5$treap$\u4e2d\u53bb\u3002\u5047\u8bbe$x$\u7684\u5b50\u6811\u5185\u7684\u70b9\uff0c\u5e94\u8be5\u5206\u5230\u7b2c\u4e00\u68f5$treap$\u4e2d\u7684$a$\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5e94\u8be5\u5206\u5230\u7b2c\u4e8c\u68f5$treap$\u4e2d\u7684$b$\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u6211\u4eec\u8bb0$tag_x$\u4e3a\u8981\u5206\u79bb\u7684\u8fd9\u4e00\u68f5$treap$\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5230$x$\u7684\u7236\u4eb2\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\uff1b\u8bb0$tag_a$\u4e3a\u7b2c\u4e00\u68f5$treap$\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5230$a$\u70b9\u7684\u7236\u4eb2\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\uff1b\u8bb0$tag_b$\u4e3a\u4ece\u6839\u8282\u70b9\u5230$b$\u70b9\u7684\u7236\u4eb2\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\u3002\u6211\u4eec\u8bb0$rev_i$\u4e3a$i$\u8fd9\u4e2a\u70b9\u7684\u6807\u8bb0\uff0c\u5176\u4e2d$rev_i=1$\u8868\u793a\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u9700\u8981\u7ffb\u8f6c\uff0c$rev_i=0$\u8868\u793a\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u4e0d\u9700\u8981\u7ffb\u8f6c\u3002\n\n\u90a3\u4e48\uff0c\u5047\u5982$x$\u7684\u5de6\u513f\u5b50\u7684\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e$k$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$x$\u5c5e\u4e8e\u7b2c\u4e8c\u68f5$treap$\uff0c\u5e76\u4e14$x$\u7684\u53f3\u513f\u5b50\u5168\u90e8\u5c5e\u4e8e\u7b2c\u4e8c\u68f5$treap$\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5e94\u8be5\u628a$x$\u8fd9\u4e2a\u70b9\u653e\u5728$b$\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u9012\u5f52\u5206\u79bb$x$\u7684\u5de6\u513f\u5b50\uff08\u6b64\u65f6\u7b2c\u4e8c\u68f5\u6811\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5c31\u662f$b$\u7684\u5de6\u513f\u5b50\u4e86\uff09\u3002\u8003\u8651\u6807\u8bb0\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\uff0c\u7b2c\u4e8c\u68f5\u6811\u4e2d$tag_b \\text{ xor } rev_b = tag_x \\text { xor } rev_x $\u3002\u6211\u4eec\u4ee4$rev_b = tag_x \\text{ xor } rev_x \\text { xor } tag_b $\u5373\u53ef\u3002\n\n\u5de6\u513f\u5b50\u7684\u5927\u5c0f\u5c0f\u4e8e$k$\u4e5f\u662f\u540c\u7406\uff0c\u6211\u4eec\u4ee4$rev_a = tag_x \\text{ xor } rev_x \\text{ xor } tag_a$\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e2a\u70b9$x$\uff0c\u6807\u8bb0\u53e0\u52a0\u7684\u7ed3\u679c\u662f$tg$\uff0c\u5047\u5982\u539f\u6765\u6211\u4eec\u7528$ch_{x,0}$\u8868\u793a$x$\u7684\u5de6\u513f\u5b50\uff0c$ch_{x,1}$\u8868\u793a\u67d0\u4e2a\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u73b0\u5728$x$\u7684\u5de6\u513f\u5b50\u5e94\u8be5\u8868\u793a\u4e3a$ch_{x,tg}$\uff0c\u53f3\u513f\u5b50\u5219\u662f$ch_{x,tg\\text{ xor }1}$\u3002\n\n``` cpp\nint tx,ta,tb;\nvoid split(int x,int k,int &a,int &b)\n{\n\tif(!x){a=b=0; return;} tx^=rev[x];\n\tif(sz[ch[x][tx]]>=k)\n\t{\n\t\trev[b=cpy(x)]=tb^tx,tb=tx;\n\t\tsplit(ch[x][tx],k,a,ch[b][tb]),push_up(b);\n\t}\n\telse\n\t{\n\t\trev[a=cpy(x)]=ta^tx,ta=tx;\n\t\tsplit(ch[x][tx^1],k-sz[ch[x][tx]]-1,ch[a][ta^1],b),push_up(a);\n\t}\n}\n```\n\n\n\n### merge\n\n\u6211\u4eec\u5047\u8bbe\u73b0\u5728\u8981\u628a\u7b2c\u4e00\u68f5$treap$\u4e2d\u4ee5$a$\u4e3a\u6839\u7684\u8fd9\u4e2a\u5b50\u6811\uff0c\u4ee5\u53ca\u7b2c\u4e8c\u68f5$treap$\u4e2d\u4ee5$b$\u4e3a\u6839\u7684\u8fd9\u4e00\u68f5\u5b50\u6811\uff0c\u5408\u5e76\u5230$r$\u8fd9\u4e2a\u8282\u70b9\u4e0a\u3002\n\n\u6211\u4eec\u4ecd\u7136\u8bb0$tag_a$\u4e3a\u7b2c\u4e00\u68f5$treap$\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5230$a$\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\uff1b\u8bbe$tag_b$\u4e3a\u7b2c\u4e8c\u68f5$treap$\u4e2d\u4ece\u6839\u8282\u70b9\u5230$b$\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\uff1b\u8bbe$tag_r$\u4e3a\u5408\u5e76\u540e\u5f97\u5230\u7684\u6811\u4e2d\uff0c\u4ece\u6839\u8282\u70b9\u5230$r$\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\u3002\n\n\u5047\u5982\u73b0\u5728$key_a\\le key_b$\uff0c\u5373\u5e94\u8be5\u628a$a$\u8282\u70b9\u653e\u5230$r$\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u628a$a$\u7684\u53f3\u513f\u5b50\u548c$b$\u5408\u5e76\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u4ece\u5408\u5e76\u540e\u7684\u6811\u7684\u6839\u5230$r$\uff08\u4e5f\u5c31\u662f$a$\uff09\u7684\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\u7b49\u4e8e$tag_a\\text{ xor } rev_a$\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u4ee4$r$\u8fd9\u4e2a\u8282\u70b9\u7684\u6807\u8bb0\u7b49\u4e8e$tag_a\\text{ xor } rev_a \\text { xor } tag_r$\uff0c\u8fd9\u6837\u5c31\u6709$rev_r \\text{ xor } tag_r =tag_a \\text { xor }  rev_a$\u3002\u7136\u540e\u9012\u5f52\u5408\u5e76$a$\u7684\u53f3\u513f\u5b50\u548c$b$\u5373\u53ef\u3002\n\n\u5bf9\u4e8e$key_a >key_b$\u7684\u60c5\u51b5\u4e5f\u662f\u540c\u7406\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4ece\u5408\u5e76\u540e\u7684\u6811\u7684\u6839\u5230$r$\u7684\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u6807\u8bb0\u7d2f\u52a0\u7684\u7ed3\u679c\u7b49\u4e8e$tag_b\\text{ xor } rev_b$\u3002\u4ee4$rev_r = tag_b\\text{ xor } rev_b \\text{ xor } tag_r$\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6211\u4eec$split$\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u68f5\u6811\u7684\u6574\u6761\u6700\u53f3\u94fe\u548c\u7b2c\u4e8c\u68f5\u6811\u7684\u6700\u5de6\u94fe\u4e0a\u7684\u8282\u70b9\u90fd\u662f\u590d\u5236\u8fc7\u4e86\u7684\uff0c\u800c\u5728$merge$\u7684\u65f6\u5019\u663e\u7136\u4e5f\u53ea\u4f1a\u7528\u5230\u7b2c\u4e00\u68f5\u6811\u7684\u6700\u53f3\u94fe\u548c\u7b2c\u4e8c\u68f5\u6811\u7684\u6700\u5de6\u94fe\uff0c\u6240\u4ee5\u5728$merge$\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u590d\u5236\u8282\u70b9\u3002\n\n``` cpp\nint tx,ta,tb;\nvoid merge(int &r,int a,int b)\n{\n\tif(!a||!b)\n\t{\n\t\tif(a) ta^=rev[a],rev[r=a]=tx^ta;\n\t\telse if(b) tb^=rev[b],rev[r=b]=tx^tb;\n\t\telse r=0;\n\t\treturn;\n\t}\n\tif(key[a]<=key[b])\n\t{\n\t\tta^=rev[a],rev[r=a]=tx^ta,tx=ta;\n\t\tmerge(ch[r][tx^1],ch[a][ta^1],b);\n\t}\n\telse\n\t{\n\t\ttb^=rev[b],rev[r=b]=tx^tb,tx=tb;\n\t\tmerge(ch[r][tx],a,ch[b][tb]);\n\t}\n\tpush_up(r);\n}\n```\n\n\u4e0b\u9762\u662f\u6211\u5de8\u4e11\u65e0\u6bd4\u7684\u5b8c\u6574\u4ee3\u7801\uff1a\n``` cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#define ll long long\n#define uint unsigned int\n#define done tx=ta=tb=0\nusing namespace std;\ntemplate <class T>\ninline void read(T &x)\n{\n    x=0; char c=getchar();  int f=1;\n    while(!isdigit(c)){if(c=='-')f=-1; c=getchar();}\n    while(isdigit(c)) x=x*10-'0'+c,c=getchar(); x*=f;\n}\nuint seed=19260817;\nuint Rand()\n{\n\tseed^=seed<<13,seed^=seed>>17,seed^=seed<<5;\n\treturn seed;\n}\nconst int N=2e5+10,M=N*66;\nint rt[N],ch[M][2],val[M],rev[M],sz[M],ncnt;\nll sum[M];\nuint key[M];\nvoid push_up(int x){sz[x]=sz[ch[x][0]]+sz[ch[x][1]]+1,sum[x]=sum[ch[x][0]]+sum[ch[x][1]]+val[x];}\nint stk[M],top;\nint make(int v)\n{\n\tint u=top?stk[top--]:++ncnt;\n\tch[u][0]=ch[u][1]=rev[u]=0;\n\tval[u]=sum[u]=v,key[u]=Rand(),sz[u]=1;\n\treturn u;\n}\nint cpy(int c)\n{\n\tint u=top?stk[top--]:++ncnt;\n\tch[u][0]=ch[c][0],ch[u][1]=ch[c][1],rev[u]=rev[c];\n\tval[u]=val[c],sum[u]=sum[c],key[u]=key[c],sz[u]=sz[c];\n\treturn u;\n}\nint tx,ta,tb;\nvoid merge(int &r,int a,int b)\n{\n\tif(!a||!b)\n\t{\n\t\tif(a) ta^=rev[a],rev[r=a]=tx^ta;\n\t\telse if(b) tb^=rev[b],rev[r=b]=tx^tb;\n\t\telse r=0;\n\t\treturn;\n\t}\n\tif(key[a]<=key[b])\n\t{\n\t\tta^=rev[a],rev[r=a]=tx^ta,tx=ta;\n\t\tmerge(ch[r][tx^1],ch[a][ta^1],b);\n\t}\n\telse\n\t{\n\t\ttb^=rev[b],rev[r=b]=tx^tb,tx=tb;\n\t\tmerge(ch[r][tx],a,ch[b][tb]);\n\t}\n\tpush_up(r);\n}\nvoid split(int x,int k,int &a,int &b)\n{\n\tif(!x){a=b=0; return;} tx^=rev[x];\n\tif(sz[ch[x][tx]]>=k)\n\t{\n\t\trev[b=cpy(x)]=tb^tx,tb=tx;\n\t\tsplit(ch[x][tx],k,a,ch[b][tb]),push_up(b);\n\t}\n\telse\n\t{\n\t\trev[a=cpy(x)]=ta^tx,ta=tx;\n\t\tsplit(ch[x][tx^1],k-sz[ch[x][tx]]-1,ch[a][ta^1],b),push_up(a);\n\t}\n}\n\nvoid insert(int r1,int &r2,int p,int v)\n{\n\tint x,y; done; split(r1,p,x,y);\n\tdone; merge(r2,x,make(v)); done; merge(r2,r2,y);\n}\nvoid del(int r1,int &r2,int p)\n{\n\tint x,y,z; done; split(r1,p,x,y); done; split(x,p-1,x,z);\n\tstk[++top]=z; done; merge(r2,x,y);\n}\nvoid Reverse(int r1,int &r2,int l,int r)\n{\n\tint x,y,z; done; split(r1,l-1,x,y); done; split(y,r-l+1,y,z);\n\trev[y]^=1; done; merge(r2,x,y); done; merge(r2,r2,z);\n}\nll query(int r1,int l,int r)\n{\n\tint x,y,z; done; split(r1,l-1,x,y); done; split(y,r-l+1,y,z);\n\treturn sum[y];\n}\nint main()\n{\n\tint q,v,op,x,l,r; ll lst=0; read(q);\n\tfor(int i=1;i<=q;++i)\n\t{\n\t\tread(v),read(op);\n\t\tif(op==1)\n\t\t{\n\t\t\tread(l),read(x); l^=lst,x^=lst;\n\t\t\tinsert(rt[v],rt[i],l,x);\n\t\t}\n\t\telse if(op==2)\n\t\t{\n\t\t\tread(l); l^=lst;\n\t\t\tdel(rt[v],rt[i],l);\n\t\t}\n\t\telse if(op==3)\n\t\t{\n\t\t\tread(l),read(r); l^=lst,r^=lst;\n\t\t\tReverse(rt[v],rt[i],l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(l),read(r); l^=lst,r^=lst;\n\t\t\tprintf(\"%lld\\n\",lst=query(rt[v],l,r)),rt[i]=rt[v];\n\t\t}\n\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550041319,
        "uid": 40534,
        "name": "zhongyuwei",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5055 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "- \u8fd9\u91cc\u91cd\u70b9\u8bb2\u6811\u5806\uff08$\\text{Treap}$\uff09\u3002\n- \u56e0\u4e3a\u4f38\u5c55\u6811\u7684\u590d\u6742\u5ea6\u5e26\u5747\u644a\uff0c\u5982\u679c\u88ab\u6b7b\u5361\u5728\u4e00\u4e2a\u64cd\u4f5c\u4e0a\u5c31\u9ebb\u70e6\u4e86\uff0c\u65e0\u6cd5\u53ef\u6301\u4e45\u5316\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/u33d4630.png)\n- \u524d\u9762\u7684\u8bb2\u89e3\u9075\u5faa\u5faa\u5e8f\u6e10\u8fdb\u7684\u539f\u5219\uff0c\u53ef\u4ee5\u8df3\u8fc7\u524d\u9762\u7684\u5185\u5bb9\u76f4\u63a5\u6765\u5230\u975e\u65cb\u8f6c\u6811\u5806\u3002\n- \u53e6\u5916\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5c31\u662f\uff1a\u9898\u89e3\u7684\u4ee3\u7801\u5bb9\u6613\u6302\uff0c\u5982\u679c\u6302\u4e86\u8bf7\u53c2\u7167\u76f8\u5e94\u7ae0\u8282\u4e91\u526a\u8d34\u677f\u201c\u666e\u901a\u5e73\u8861\u6811\u52a0\u5f3a\u7248\u201d\u7684\u5b9e\u73b0\u3002\n\n**\u65cb\u8f6c**\n- \u65cb\u8f6c\u662f\u8bb8\u591a\u5e73\u8861\u6811\u7b97\u6cd5\u7684\u96be\u70b9\u6240\u4ee5\u9700\u8981\u4ed4\u7ec6\u8bb2\u89e3\u3002\n- \u9996\u5148\u4ecb\u7ecd\u5355\u65cb\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/gx1ysuso.png)\n- \u4ece\u5de6\u5f80\u53f3\u79f0\u4e3a\u53f3\u65cb\uff0c\u4ece\u53f3\u5f80\u5de6\u79f0\u4e3a\u5de6\u65cb\uff0c\u5982\u4f55\u7b80\u6d01\u5730\u5199\u51fa\u65cb\u8f6c\u7684\u4ee3\u7801\u5462\uff1f\n![](https://cdn.luogu.com.cn/upload/image_hosting/he7yqphu.png)\n- \u53f3\u65cb\u53ef\u4ee5\u7c7b\u6bd4\u3002\n```cpp\ninline void turn(bool k,int &v)\n{\n\tint u=sn[k^1][v];\n\tsn[k^1][v]=sn[k][u];\n\tupdate(v),sn[k][u]=v;\n\tupdate(u),v=u;\n}\n```\n\n**\u6811\u5806**\n- \u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u5bb9\u6613\u88ab\u5361\u3002\n- \u5bf9\u4e8e\u6570\u636e\u79bb\u7ebf\u7684\u60c5\u51b5\u4e0b\uff0c\u968f\u673a\u6392\u5e8f\u4e00\u904d\u662f\u597d\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8bc1\u660e\u671f\u671b\u6811\u9ad8\u662f $O(\\log n)$\u3002\n- \u4f46\u6709\u7684\u65f6\u5019\u8981\u540c\u65f6\u652f\u6301\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u4e8c\u53c9\u641c\u7d22\u6811\u4fdd\u6301\u4e00\u4e2a\u52a8\u6001\u5e73\u8861\u7684\u72b6\u6001\u3002\n- \u6811\u5806\u901a\u8fc7\u968f\u673a\u6743\u503c\u540c\u65f6\u7528\u65cb\u8f6c\u8ba9\u6743\u503c\u4fdd\u6301\u5806\u5e8f\u6765\u5b9e\u73b0\u968f\u673a\u5e73\u8861\u7684\u6548\u679c\uff0c\u5355\u6b21\u64cd\u4f5c\u671f\u671b $O(\\log n)$\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/gx1ysuso.png)\n- \u4e0b\u9762\u5de6\u8fb9\u548c\u53f3\u8fb9\u5206\u522b\u662f\u4e24\u79cd\u65cb\u8f6c\u7684\u65b9\u5f0f\u3002\n- \u63d2\u5165\u8282\u70b9\u540e\u8981\u5f80\u4e0a\u65cb\u8f6c\uff0c\u5220\u9664\u8282\u70b9\u540e\u8981\u5f80\u4e0b\u65cb\u8f6c\u5230\u53f6\u5b50\u3002\n- \u6bcf\u6b21\u7ef4\u62a4\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u67e5\u8be2\u7b2c $k$ \u5927\u4e86\uff0c\u5982\u4f55\u5728\u65cb\u8f6c\u65f6\u987a\u4fbf\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\u5462\uff1f\n```cpp\ninline void update(int u)\n{\n\tsz[u]=sz[sn[0][u]]+sz[sn[1][u]]+nm[u];\n}\ninline void turn(bool k,int &v)\n{\n\tint u=sn[k^1][v];\n\tsn[k^1][v]=sn[k][u];\n\tupdate(v),sn[k][u]=v;\n\tupdate(u),v=u;\n}\n```\n- \u663e\u7136\u53ef\u4ee5\u3002\n- \u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 $0$ \u53f7\u8282\u70b9\u4ee5\u4fdd\u8bc1\u6b63\u786e\u7684\u8fb9\u754c\u60c5\u51b5\u5904\u7406\uff0c\u5b83\u7528\u4f5c\u8868\u793a\u7a7a\u8282\u70b9\u548c\u9632\u6b62\u8d8a\u754c\u8bbf\u95ee\u3002\n- \u6ce8\u610f\u662f\u5927\u6839\u5806\u8fd8\u662f\u5c0f\u6839\u5806\uff0c\u6ce8\u610f\u6bcf\u6b21\u66f4\u6539\u90fd\u8981\u7ef4\u62a4\u5806\u6027\u8d28\uff0c\u6ce8\u610f\u5206\u6e05 $\\text{son}(0,i)$\uff0c\u4ee5\u4e0b\u662f\u6bd4\u8f83\u590d\u6742\u7684\u5220\u9664\u8282\u70b9\u64cd\u4f5c\u7684\u4ee3\u7801\u3002\n- \u6ce8\u610f\u52a0\u5165\u70b9\u540e\u8981\u58f0\u660e\u52a0\u5165\u70b9\u7684\u7236\u4eb2\uff0c\u8981\u4e0d\u7136\u540e\u9762\u8f6c\u4e0d\u4e0a\u53bb\u3002\n```cpp\nvoid erase(int &u,int G)\n{\n\tif(G==g[u])\n\t{\n\t\tif(nm[u]>0)--nm[u],--sz[u];\n\t\tif(!nm[u])\n\t\t{\n\t\t\tif(!sn[0][u]||!sn[1][u]) \n\t\t\t\tu=sn[!sn[0][u]][u];\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool k=(w[sn[0][u]]<w[sn[1][u]]); \n\t\t\t\tturn(k,u);\n\t\t\t\terase(sn[k][u],G);\n\t\t\t}\n\t\t}\n\t\tupdate(u);\n\t\treturn;\n\t}\n\terase(sn[g[u]<G][u],G);\n\tupdate(u);\n}\n```\n- [\u6811\u5806\u5e26\u6ce8\u91ca\u5b9e\u73b0](https://www.luogu.com.cn/paste/e1tqxv7z)\u3002\n- [\u666e\u901a\u5e73\u8861\u6811\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/io5v0c8k)\u3002\n- [\u666e\u901a\u5e73\u8861\u6811\u52a0\u5f3a\u7248\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/dv5y1jfk)\uff08\u63a8\u8350\uff09\u3002\n- [\u975e\u9012\u5f52\u666e\u901a\u5e73\u8861\u6811\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/rljr6i6c)\u3002\n\n**\u53ef\u5206\u88c2\u6811\u5806**\n- \u7531\u4e8e\u6811\u7684\u7ed3\u6784\u76f8\u5bf9\u7a33\u5b9a\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u652f\u6301\u53ef\u6301\u4e45\u5316\u3002\n- \u800c\u4e14\u6bd4\u65cb\u8f6c\u64cd\u4f5c\u8981\u597d\u6253\uff0c\u636e\u8bf4\u4ee3\u7801\u91cf\u4e5f\u5f88\u5c0f\u3002\n- \u6838\u5fc3\u64cd\u4f5c\u5c31\u662f\u5408\u5e76\u548c\u5206\u88c2~~\u5f53\u7136\u8fd8\u6709\u968f\u673a\u79cd\u5b50\u3002~~\n- \u6709\u6309\u503c\u5408\u5e76\u548c\u6309\u6392\u540d\u5206\u88c2\u4e24\u79cd\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/4xojsudx.png)\n- \u5bb9\u6613\u53d1\u73b0\u5408\u5e76\u4e0e\u5206\u88c2\u7684\u6838\u5fc3\u5728\u4e00\u6761\u6709\u8da3\u7684\u94fe\u4e0a\uff08\u6ce8\u610f\u5408\u5e76\u8981\u6c42\u503c\u57df\u4e0d\u4ea4\uff09\uff0c\u6240\u4ee5\u590d\u6742\u5ea6 $O(h)$\u3002\n- \u5408\u5e76\uff1a\n```cpp\nint merge(int x,int y)\n{\n\tif(!x||!y)return x|y;\n\tint u;\n\tif(w[x]<w[y])sn[1][u=x]=merge(sn[1][x],y);\n\telse sn[0][u=y]=merge(x,sn[0][y]);\n\tupdate(u);\n\treturn u;\n}\n```\n- \u5206\u88c2\uff1a\n```cpp\nvoid split(int u,int &x,int &y,int G)\n{\n\tif(!u)\n\t{\n\t\tx=y=0;\n\t\treturn;\n\t}\n\tif(g[u]<=G)split(sn[1][u],sn[1][x=u],y,G);\n\telse split(sn[0][u],x,sn[0][y=u],G);\n\tupdate(u);\n}\n```\n- [\u5e26\u6ce8\u91ca\u53ef\u5206\u88c2\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/1gkhqn6r)\u3002\n- [\u666e\u901a\u5e73\u8861\u6811\u53ef\u5206\u88c2\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/mfltlj30)\u3002\n- [\u666e\u901a\u5e73\u8861\u6811\u52a0\u5f3a\u7248\u53ef\u5206\u88c2\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/u9whqt8a)\uff08\u6570\u7ec4\u5f00\u592a\u5c0f\uff0c\u7206\u96f6\u4e24\u884c\u6cea\uff09\u3002\n- [\u6587\u827a\u5e73\u8861\u6811\u53ef\u5206\u88c2\u6811\u5806\u5e26\u6ce8\u91ca\u5b9e\u73b0](https://www.luogu.com.cn/paste/3show9cj)\u3002\n- [\u6587\u827a\u5e73\u8861\u6811\u53ef\u5206\u88c2\u6811\u5806\u5b9e\u73b0](https://www.luogu.com.cn/paste/0i1g1mp9)\uff08\u4f5c\u8005\u7684 $\\text{get node}$ \u5199\u9519\u4e86\u8ba9 $\\text{sz[0]=1}$\uff09\uff08\u6ce8\u610f\u5206\u88c2\u64cd\u4f5c\u4e0d\u540c\u4e86\uff0c\u4e0a\u4f20\u4e0e\u4e0b\u4f20\u4e5f\u4e0d\u540c\u4e86\uff0c\u6bcf\u6b21 $\\text{split}$ \u7684\u65f6\u5019\u8bb0\u5f97\u4e0b\u4f20\u61d2\u6807\u8bb0\uff09\u3002\n- [\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u53ef\u5206\u88c2\u6811\u5806\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/6q89rg9a)\uff08\u6838\u5fc3\u662f\u5728\u5206\u88c2\u7684\u65f6\u5019\u65b0\u5efa\u8282\u70b9\uff0c\u5408\u5e76\u7684\u65f6\u5019\u4e0d\u65b0\u5efa\u8282\u70b9\uff09\u3002\n- \u63a5\u4e0b\u6765\u662f\u4eca\u5929\u7684\u4f8b\u9898\u3002\n\n**\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811**\n- [\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5055)\u3002\n- \u652f\u6301\u53ef\u6301\u4e45\u5316\u52a8\u6001\u63d2\u5165\uff0c\u52a8\u6001\u5220\u9664\uff0c\u533a\u95f4\u53cd\u8f6c\uff0c\u533a\u95f4\u6c42\u548c\u3002\n- \u8fd9\u9898\u76ee\u770b\u4f3c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5176\u5b9e\u5982\u679c\u638c\u63e1\u4e86\u4e0a\u9762\u7684\u5957\u8def\u7684\u8bdd\u4e5f\u5e76\u4e0d\u56f0\u96be\uff0c\u6240\u4ee5\u91cd\u70b9\u8bb2\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u3002\n- \u6570\u7ec4\u5927\u5c0f\u548c\u957f\u6574\u578b\u8981\u9002\u5b9c\u3002\n- \u6ce8\u610f\u5206\u88c2\u64cd\u4f5c\u662f\u6309\u6392\u540d\u5206\u88c2\uff0c\u6bcf\u6b21 $\\text{split}$ \u7684\u65f6\u5019\u8bb0\u5f97\u4e0b\u4f20\u61d2\u6807\u8bb0\u3002\n- \u7531\u4e8e $\\text{split}$ \u548c $\\text{merge}$ \u64cd\u4f5c\u6210\u5bf9\u51fa\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u5206\u88c2\u65f6\u65b0\u5efa\u8282\u70b9\uff08\u6ce8\u610f\u8981\u5728\u8fd9\u4e4b\u524d\u4e0b\u4f20\uff0c\u56e0\u4e3a\u5b50\u6811\u5728\u4ee5\u540e\u5176\u5b9e\u4e5f\u4f1a\u6539\u53d8\uff0c\u9700\u8981\u907f\u514d\u51fa\u73b0\u53ef\u80fd\u7684\u53cd\u590d\u4fee\u6539\u7684\u5371\u9669\uff09\u5373\u53ef\u3002\n- \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5408\u5e76\u4e5f\u9700\u8981\u4e0b\u4f20\uff0c\u4e3a\u5565\uff1f\n- \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0b\u4f20\u7684\u65f6\u5019\uff0c\u5de6\u53f3\u513f\u5b50\u9700\u8981\u65b0\u5efa\u8282\u70b9\uff0c\u9632\u6b62\u540e\u6765\u7684\u6807\u8bb0\u66f4\u6539\u5230\u4ee5\u524d\u7684\u6807\u8bb0\u3002\n- \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8f93\u5165\u8981\u5f00 $\\text{long long}$\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5f02\u6216\u7684\u4e0a\u4e00\u4e2a\u7b54\u6848\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u503c\uff0c\u5982\u679c\u4e0d\u5f00\u5c31\u4f1a\u7206\u6389\u3002\n- [\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/q2rckhj6)\u3002",
        "postTime": 1643066687,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "P5055"
    }
]