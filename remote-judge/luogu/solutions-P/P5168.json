[
    {
        "content": "[$\\texttt{my blog}$](https://www.cnblogs.com/Isaunoya/p/11983101.html)\n\n[P5168 xtq\u73a9\u9b54\u5854](https://www.luogu.com.cn/problem/P5168)\n\n\u53c8\u662f\u7801\u519c\u9898\u2026\n\n\u5229\u7528[\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811](https://www.cnblogs.com/Isaunoya/p/11780762.html)\u7684\u6027\u8d28\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u51fa $dep$ \u503c\u5c0f\u7684\uff0c\u80af\u5b9a\u6bd4 $dep$ \u5927\u7684\u503c\u8981\u4f18\u3002\n\n\u4e8e\u662f\u7b2c\u4e8c\u95ee\u5c31\u53ef\u4ee5\u76f4\u63a5 LCA \u6c42\u51fa\u6765\u4e86\u2026\n\n\u81f3\u4e8e\u7b2c\u4e09\u95ee\uff0cdfs\u5e8f\u4e00\u4e0b\uff0c\u7136\u540e\u6c42\u5b50\u6811\u2026\u8003\u8651\u83ab\u961f\n\u4fee\u6539\u76f4\u63a5[\u5e26\u4fee\u83ab\u961f](https://www.luogu.com.cn/problem/P1903)\uff0c\u6ca1\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nint min(int x , int y) { return x < y ? x : y ; }\nvoid swap(int & x , int & y) { x ^= y ^= x ^= y ; }\nint read() {\n  int x = 0 , f = 1 ; char c = getchar() ;\n  while(c < '0' || c > '9') { if(c == '-') f = -1 ; c = getchar() ; }\n  while(c >= '0' && c <= '9') { x = (x << 3) + (x << 1) + (c & 15) ; c = getchar() ; }\n  return x * f ;\n}\nvoid print(int x) {\n  char _st[20] ; int tp = 0 ;\n  if(! x) { putchar('0') ; }\n  while(x) { _st[++ tp] = (x % 10) ^ 48 ; x /= 10 ; }\n  while(tp) { putchar(_st[tp --]) ; }\n  putchar('\\n') ;\n}\nconst int N = 1e5 + 10 ;\nconst int M = 3e5 + 10 ;\nconst int Q = 2e5 + 10 ;\nstruct Edge { int u , v , w ; } E[M] ;\nstruct _Link { int v , nxt ; } e[N << 1] ;\nstruct Change { int pos , col ; } qc[Q] ;\nstruct Qry { int l , r , id , t ; } qr[Q] ;\nint n , m , q , change_cnt = 0 , qry_cnt = 0 , len = 0 ;\nint col[N] , fa[N << 1] , val[N << 1] , head[N << 1] , cnt = 0 , f[N << 1][22] , d[N << 1] ;\nint rev[N << 1] , dfn[N << 1] , sz[N << 1] , idx = 0 , ans[Q] , _cnt[N << 1] , bl[N] ;\nvoid Link(int u , int v) { e[++ cnt] = { v , head[u] } ; head[u] = cnt ; }\nvoid dfsfa(int u) {\n  for(int i = head[u] ; i ; i = e[i].nxt) { d[e[i].v] = d[f[e[i].v][0] = u] + 1 ; dfsfa(e[i].v) ; }\n}\nvoid dfssz(int u) {\n  if(u <= n) { rev[dfn[u] = ++ idx] = u ; sz[u] = 1 ; } else dfn[u] = 1e9 ;\n  for(int i = head[u] ; i ; i = e[i].nxt) { dfssz(e[i].v) ; sz[u] += sz[e[i].v] ; dfn[u] = min(dfn[u] , dfn[e[i].v]) ; }\n}\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]) ; }\nvoid Kruskal() {\n  int tot = n ; sort(E + 1 , E + m + 1 , [](Edge x , Edge y) { return x.w < y.w ; }) ;\n  for(int i = 1 ; i <= (n << 1) ; i ++) fa[i] = i ;\n  for(int i = 1 ; i <= m ; i ++) {\n    int u = find(E[i].u) , v = find(E[i].v) ;\n    if(u ^ v) { ++ tot ; val[fa[tot] = fa[u] = fa[v] = tot] = E[i].w ; Link(tot , u) ; Link(tot , v) ; }\n  } dfsfa(tot) ; dfssz(tot) ;\n}\nint Lca(int u , int v) {\n  if(d[u] < d[v]) swap(u , v) ;\n  for(int i = 20 ; ~ i ; i --) if(d[f[u][i]] >= d[v]) u = f[u][i] ; if(u == v) return u ;\n  for(int i = 20 ; ~ i ; i --) if(f[u][i] ^ f[v][i]) { u = f[u][i] ; v = f[v][i] ; } return f[u][0] ;\n}\nint gettop(int u , int _val) { for(int i = 20 ; ~ i ; i --) if(f[u][i] && val[f[u][i]] <= _val) u = f[u][i] ; return u ; }\nint Ans = 0 ;\nvoid ins(int x) { if(++ _cnt[x] == 1) ++ Ans ; }\nvoid del(int x) { if(-- _cnt[x] == 0) -- Ans ; }\nvoid modify(int x , int now) {\n  if(qc[x].pos >= qr[now].l && qc[x].pos <= qr[now].r) { del(col[rev[qc[x].pos]]) ; ins(qc[x].col) ; }\n  swap(qc[x].col , col[rev[qc[x].pos]]) ;\n}\nvoid Solve() {\n  for(int j = 1 ; j <= 20 ; j ++)\n    for(int i = 1 ; i <= (n << 1) ; i ++) f[i][j] = f[f[i][j - 1]][j - 1] ;\n  for(int i = 1 ; i <= q ; i ++) {\n    int opt = read() ;\n    if(opt == 1) { int pos = read() , col = read() ; qc[++ change_cnt] = { dfn[pos] , col } ; }\n    if(opt == 2) { ans[++ qry_cnt] = val[Lca(read() , read())] ; }\n    if(opt == 3) { ++ qry_cnt ; int x = read() , top = gettop(x , read()) ; qr[++ len] = { dfn[top] , dfn[top] + sz[top] - 1 , qry_cnt , change_cnt} ; }\n  }\n  vector < int > b ; for(int i = 1 ; i <= n ; i ++) b.push_back(col[i]) ;\n  for(int i = 1 ; i <= change_cnt ; i ++) b.push_back(qc[i].col) ;\n  sort(b.begin() , b.end()) ; b.erase(unique(b.begin() , b.end()) , b.end()) ;\n  for(int i = 1 ; i <= n ; i ++) col[i] = lower_bound(b.begin() , b.end() , col[i]) - b.begin() ;\n  for(int i = 1 ; i <= change_cnt ; i ++) qc[i].col = lower_bound(b.begin() , b.end() , qc[i].col) - b.begin() ;\n  int block = sqrt(n * (2.0 / 3.0)) ; for(int i = 1 ; i <= n ; i ++) bl[i] = (i - 1) / block + 1 ;\n  sort(qr + 1 , qr + len + 1 , [](Qry x , Qry y) {\n    if(bl[x.l] ^ bl[y.l]) return x.l < y.l ;\n    if(bl[x.r] ^ bl[y.r]) return x.r < y.r ;\n    return x.t < y.t ;\n  }) ;\n  int l = 1 , r = 0 , now_t = 0 ;\n  for(int i = 1 ; i <= len; i ++) {\n    while(l > qr[i].l) ins(col[rev[-- l]]) ; while(r < qr[i].r) ins(col[rev[++ r]]) ;\n    while(l < qr[i].l) del(col[rev[l ++]]) ; while(r > qr[i].r) del(col[rev[r --]]) ;\n    while(now_t < qr[i].t) modify(++ now_t , i) ; while(now_t > qr[i].t) modify(now_t -- , i) ;\n    ans[qr[i].id] = Ans ;\n  }\n  for(int i = 1 ; i <= qry_cnt ; i ++) print(ans[i]) ;\n}\nsigned main() {\n  n = read() ; m = read() ; q = read() ;\n  for(int i = 1 ; i <= n ; i ++) { col[i] = read() ; }\n  for(int i = 1 ; i <= m ; i ++) { int u = read() , v = read() , w = read() ; E[i] = { u , v , w } ; }\n  Kruskal() ; Solve() ;\n  return 0 ;\n}\n\n```\n",
        "postTime": 1575444255,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5168 \u3010xtq\u73a9\u9b54\u5854\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u9519\u554a\uff0c\u7ed3\u5408\u4e86\u4e00\u4e9b\u4e0d\u592a\u4f20\u7edf\u7684\u59ff\u52bf\u3002\n\n\u9996\u5148\u770b\u5230\u9898\u76ee\u6709\u4e00\u95ee\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u8fb9\u6743\u6700\u5c0f\u503c\u3002\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n~~**\u514b\u9c81\u65af\u5361\u5c14\u751f\u6210\u6811+\u500d\u589e\uff1f**~~\u597d\u5427\u5176\u5b9e\u6709\u4e00\u4e2a\u66f4~~\u5e38\u7528~~**NB**\u7684\u7b97\u6cd5\u53eb**\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811**\n\n\uff08\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b[dalao's blog](https://www.cnblogs.com/LadyLex/p/7275821.html)\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c1d\u8bd5\u5207\u6389[Luogu P4768 [NOI2018]\u5f52\u7a0b](https://www.luogu.org/problemnew/show/P4768)\uff09\n\n\u56de\u5230\u8fd9\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u91cd\u6784\u6811\u5efa\u51fa\u6765\u4e4b\u540e\u76f4\u63a5\u6c42\u4e24\u70b9**LCA**\u7684\u6743\u503c\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e09\u95ee\uff0c\u8003\u8651\u7ee7\u7eed\u5229\u7528\u91cd\u6784\u6811\uff0c\u6211\u4eec\u53d1\u73b0\u6b64\u65f6\u80fd\u8d70\u5230\u7684\u70b9\u5728\u6811\u4e0a\u4e00\u5b9a\u662f\u4e00\u9897\u5b50\u6811\u3002\n\n\u5b50\u6811\u5185**DFS\u5e8f**\u8fde\u7eed\u554a\uff0c\u6240\u4ee5\u5c31\u53d8\u6210**\u533a\u95f4\u6570\u989c\u8272**\u4e86\uff0c\u76f4\u63a5**\u83ab\u961f**\u554a\uff01\n\n\u597d\u5427\u8fd8\u6709\u4fee\u6539\uff0c\u90a3\u5c31**\u5e26\u4fee\u83ab\u961f**\uff0c\u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\u7a33\u5982\u8001\u72d7\u3002\n\n\u7136\u540e\u8fd9\u9898\u5c31\u5b8c\u4e86\uff0c\u4e0d\u8fc7\u6709\u4e00\u4e2a\u7ec6\u8282\u5c31\u662f\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u7684\u7236\u8282\u70b9\u6743\u503c\u4e00\u5b9a\u5927\u4e8e\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u7528\u5728\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u518d\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u503c\u6570\u7ec4\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cmath>\n#include<algorithm>\n#define RI register int\n#define Tp template <typename T>\nusing namespace std;\nconst int N=100005;\nstruct data\n{\n    int x,y,val;\n    inline friend bool operator <(data A,data B)\n    {\n        return A.val<B.val;\n    }\n}a[N*3]; int n,m,s,opt,x,y,z,ans[N<<1],rst[N*3],dfn[N<<1],blk[N];\nstruct ques\n{\n    int l,r,id,t;\n    inline ques (int L=0,int R=0,int Id=0,int T=0)\n    {\n        l=L; r=R; id=Id; t=T;\n    }\n    inline friend bool operator <(ques A,ques B)\n    {\n        return blk[A.l]!=blk[B.l]?blk[A.l]<blk[B.l]:(blk[A.r]!=blk[B.r]?blk[A.r]<blk[B.r]:A.t<B.t);\n    }\n}q[N<<1]; int cnt_q,cnt_cm,cnt_col,bkt[N*3],tot,d[N<<1],sze[N<<1];\nstruct operation\n{\n    int pos,col;\n    inline operation(int Pos=0,int Col=0) { pos=Pos; col=Col; }\n}p[N<<1]; int cnt_p,col[N],now,L=1,R,list[N],ret,size;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int Ftop,pt[15];\n    public:\n        Tp inline void read(T &x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n            if (!x) return (void)(pc('0'),pc('\\n')); RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc('\\n');\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n}F;\ninline void swap(int &x,int &y)\n{\n    int t=x; x=y; y=t;\n}\nclass Double_Increased_On_Tree\n{\n    private:\n        static const int P=18;\n        struct edge\n        {\n            int to,nxt;\n        }e[N<<1]; int head[N<<1],cnt,idx,anc[N<<1][P],dep[N<<1];\n        inline void reset(int now)\n        {\n            for (RI i=0;i<P-1;++i) if (anc[now][i])\n            anc[now][i+1]=anc[anc[now][i]][i]; else break;\n        }\n        inline void miner(int &x,int y)\n        {\n            if (y<x) x=y;\n        }\n    public:\n        inline void add(int x,int y)\n        {\n            e[++cnt]=(edge){y,head[x]},head[x]=cnt;\n        }\n        #define to e[i].to\n        inline void DFS(int now)\n        {\n            if (now<=n) list[dfn[now]=++idx]=now,sze[now]=1;\n            else dfn[now]=1e9;reset(now); for (RI i=head[now];i;i=e[i].nxt)\n            anc[to][0]=now,dep[to]=dep[now]+1,DFS(to),sze[now]+=sze[to],miner(dfn[now],dfn[to]);\n        }\n        #undef to\n        inline int getLCA(int x,int y)\n        {\n            RI i; if (dep[x]<dep[y]) swap(x,y); for (i=P-1;~i;--i)\n            if (dep[anc[x][i]]>=dep[y]) x=anc[x][i]; if (x==y) return x;\n            for (i=P-1;~i;--i) if (anc[x][i]!=anc[y][i])\n            x=anc[x][i],y=anc[y][i]; return anc[x][0];\n        }\n        inline int getinterval(int x,int y)\n        {\n            for (RI i=P-1;~i;--i)if (anc[x][i]&&d[anc[x][i]]<=y) x=anc[x][i]; return x;\n        }\n}T;\nclass Kruskal_Rubuild_Tree_Solver\n{\n    private:\n        int father[N<<1];\n        inline int getfather(int x)\n        {\n            return father[x]^x?father[x]=getfather(father[x]):x;\n        }\n    public:\n        inline void init(void)\n        {\n            for (RI i=1;i<=n;++i) father[i]=i;\n        }\n        inline void Kruskal(void)\n        {\n            sort(a+1,a+m+1); init(); for (RI i=1;i<=m;++i)\n            if ((a[i].x=getfather(a[i].x))!=(a[i].y=getfather(a[i].y)))\n            {\n                d[++tot]=a[i].val; father[a[i].x]=father[a[i].y]=tot;\n                T.add(tot,a[i].x); T.add(tot,a[i].y); father[tot]=tot;\n            }\n        }\n}K;\ninline void add(int col)\n{\n    if (++bkt[col]==1) ++ret;\n}\ninline void del(int col)\n{\n    if (--bkt[col]==0) --ret;\n}\ninline void travel(int now)\n{\n    if (p[now].pos>=L&&p[now].pos<=R) del(col[list[p[now].pos]]),\n    add(p[now].col); swap(p[now].col,col[list[p[now].pos]]);\n}\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),F.read(m),F.read(s),i=1;i<=n;++i)\n    F.read(col[i]),rst[++cnt_col]=col[i]; for (i=1;i<=m;++i)\n    F.read(a[i].x),F.read(a[i].y),F.read(a[i].val);\n    for (tot=n,K.Kruskal(),T.DFS(tot),i=1;i<=s;++i)\n    {\n        F.read(opt); F.read(x); F.read(y);\n        switch (opt)\n        {\n            case 1:\n                p[++cnt_p]=operation(dfn[x],y); rst[++cnt_col]=y; break;\n            case 2:\n                ans[++cnt_q]=d[T.getLCA(x,y)]; break;\n            case 3:\n                int top=T.getinterval(x,y);\tq[++cnt_cm]=ques(dfn[top],dfn[top]+sze[top]-1,++cnt_q,cnt_p); break;\n        }\n    }\n    sort(rst+1,rst+cnt_col+1); cnt_col=unique(rst+1,rst+cnt_col+1)-rst-1;\n    for (i=1;i<=n;++i) col[i]=lower_bound(rst+1,rst+cnt_col+1,col[i])-rst;\n    for (i=1;i<=cnt_p;++i) p[i].col=lower_bound(rst+1,rst+cnt_col+1,p[i].col)-rst;\n    for (size=(int)pow(n,2.0/3.0),i=1;i<=n;++i) blk[i]=(i-1)/size+1;\n    for (sort(q+1,q+cnt_cm+1),i=1;i<=cnt_cm;++i)\n    {\n        while (now<q[i].t) travel(++now); while (now>q[i].t) travel(now--);\n        while (L>q[i].l) add(col[list[--L]]); while (R<q[i].r) add(col[list[++R]]);\n        while (L<q[i].l) del(col[list[L++]]); while (R>q[i].r) del(col[list[R--]]);\n        ans[q[i].id]=ret;\n    }\n    for (i=1;i<=cnt_q;++i) F.write(ans[i]); return F.Fend(),0;\n}\n```",
        "postTime": 1546862392,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5168 \u3010xtq\u73a9\u9b54\u5854\u3011"
    },
    {
        "content": "\u968f\u673a\u6570\u636e\u4e5f\u592a\u6bd2\u4e86\u5427\uff0c\u5047\u7b97\u6cd5\u653e\u8fc7\u53bb\u4e00\u5927\u5806\uff0c\u8fd9\u9898\u660e\u660e\u6709\u4e00\u4e2a$\\log$\u7684\u7b97\u6cd5\u7684\u554a\u2026\u2026~~\u6709\u672c\u4e8b\u6570\u636e\u8303\u56f4\u52a0\u4e2a0~~\n\n\u9996\u5148\u8003\u8651\u7b2c\u4e8c\u4e2a\u8be2\u95ee\uff0c\u8fd9\u4e2a\u8be2\u95ee\u548c[ \\[NOI2018\\] \u5f52\u7a0b](https://www.luogu.org/problemnew/show/P4768)\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f7f\u7528\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u89e3\u51b3\u3002\n\n\u7136\u540e\u8003\u8651\u7b2c\u4e09\u4e2a\u8be2\u95ee\uff0c\u628a\u5b83\u653e\u5728\u91cd\u6784\u6811\u4e0a\uff0c\u5c31\u662f\u4e00\u4e2a\u5b50\u6811\u6570\u989c\u8272\u95ee\u9898\u3002\u7531\u4e8e\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u6240\u4ee5\u5c31\u662f\u4e2a\u5e26\u4fee\u5b50\u6811\u6570\u989c\u8272\u95ee\u9898\u3002\n\n\u8fd9\u4e2a\u662f\u53ef\u4ee5\u4e00\u4e2a$\\log$\u89e3\u51b3\u7684\u3002~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u653e\u5e26\u4fee\u83ab\u961f\u548c\u6811\u5957\u6811\u8fc7\u53bb\u800c\u4e14\u8fd8\u8dd1\u90a3\u4e48\u5feb~~\n\n\u663e\u7136\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\uff08dfs\u5e8f\u8fde\u7eed\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u6bcf\u52a0\u5165\u4e00\u4e2a\u8282\u70b9$x$\u7684\u65f6\u5019\uff0c\u5728\u54ea\u4e9b\u8282\u70b9\u5904\u80fd\u4ea7\u751f\u8d21\u732e\u3002\u663e\u7136\uff0c\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u8282\u70b9\u6240\u5728\u5b50\u6811\u5185\u539f\u672c\u6ca1\u6709\u8fd9\u79cd\u989c\u8272\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8fd9\u79cd\u989c\u8272\u7684\u4e00\u4e2a\u5176\u4ed6\u8282\u70b9$y$\uff0c\u4f7f\u5b83\u4e0e$x$\u7684$\\rm LCA$\u7684\u6df1\u5ea6\u6700\u6df1\u3002\u90a3\u4e48$x$\u80fd\u5728\u8be5\u8282\u70b9\u5230$\\rm{LCA}$\uff08\u4e0d\u5305\u542b$\\rm{LCA}$\uff09\u7684\u8def\u5f84\u4e0a\u5404\u4ea7\u751f1\u7684\u8d21\u732e\u3002\n\n\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\uff0c$x$\u5904\u52a01\uff0c\u5728$\\rm{LCA}$\u5904\u51cf1\u5373\u53ef\u3002\n\n\u800c\u8fd9\u6837\u7684$y$\uff0c\u53ea\u53ef\u80fd\u662fdfs\u5e8f\u548c$x$\u6700\u76f8\u8fd1\u7684\u4e24\u4e2a\u4e2d\u7684\u4e00\u4e2a\uff08\u6bd4\u5b83\u5c0f\u548c\u6bd4\u5b83\u5927\uff0c\u4e5f\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u7528```set```\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u7136\u540e\u67e5\u8be2\u989c\u8272\u5c31\u76f4\u63a5\u67e5\u8be2\u6811\u72b6\u6570\u7ec4\u4e0a\u8fd9\u68f5\u5b50\u6811\u5373\u53ef\u3002\n\n\u8fd9\u6837\u5c31\u505a\u5230\u4e00\u4e2a$\\log$\u7ef4\u62a4\u989c\u8272\u4fe1\u606f\u4e86\u3002\n\n\u4e8e\u662f\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O((n+m+q)\\log n)$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#include<set>\n#include<vector>\nusing namespace std;\nvector<int>vec;\ninline int readint(){\n\tint c=getchar(),d=0;\n\tfor(;!isdigit(c);c=getchar());\n\tfor(;isdigit(c);c=getchar())d=d*10+(c^'0');\n\treturn d;\n}\nconst int N=4e5+5;\nint ff[N],n,m,col[N],Q;\ninline int find(int x){return x==ff[x]?x:ff[x]=find(ff[x]);}\nstruct que{\n\tint op,x,y;\n}q[N];\nnamespace nt{\n\tint to[N],nxt[N],head[N],cnt,fa[N],dw[N],rt,dep[N],F[18][N],idfn[N];\n\tint sz[N],son[N],top[N],dfn[N],idx;\n\tinline void addedge(int u,int v,int w){to[++cnt]=v,nxt[cnt]=head[u],head[u]=cnt,fa[v]=u,dw[u]=w;}\n\tvoid dfs(int now){\n\t\tsz[now]=1,son[now]=0;\n\t\tfor(int i=head[now];i;i=nxt[i]){\n\t\t\tdep[to[i]]=dep[now]+1,F[0][to[i]]=now,dfs(to[i]),sz[now]+=sz[to[i]];\n\t\t\tif(!son[now]||sz[son[now]]<sz[to[i]])son[now]=to[i];\n\t\t}\n\t}\n\tvoid dfs2(int now){\n\t\tidfn[dfn[now]=++idx]=now;\n\t\tif(son[now])top[son[now]]=top[now],dfs2(son[now]);\n\t\tfor(int i=head[now];i;i=nxt[i])if(to[i]!=son[now])dfs2(top[to[i]]=to[i]);\n\t}\n\tinline int LCA(int x,int y){\n\t\twhile(top[x]!=top[y])\n\t\tif(dep[top[x]]>dep[top[y]])x=fa[top[x]];else y=fa[top[y]];\n\t\treturn dep[x]<dep[y]?x:y;\n\t}\n\tvoid init(){\n\t\tdep[rt]=1,top[rt]=rt;\n\t\tdfs(rt),dfs2(rt);\n\t\tfor(int i=1;i<18;++i)\n\t\tfor(int j=1;j<=rt;++j)F[i][j]=F[i-1][F[i-1][j]];\n\t}\n\tint B[N];\n\tinline void add(int i,int x){for(;i<N;i+=i&-i)B[i]+=x;}\n\tinline int ask(int i){int x=0;for(;i;i&=i-1)x+=B[i];return x;}\n\tstruct colors{\n\t\tset<int>s;\n\t\tvoid ADD(int x){\n\t\t\tadd(x,1);\n\t\t\tif(s.empty()){\n\t\t\t\ts.insert(x);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tauto nxt=s.lower_bound(x);\n\t\t\tif(nxt==s.begin()){\n\t\t\t\ts.insert(x);\n\t\t\t\tadd(dfn[LCA(idfn[x],idfn[*nxt])],-1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tauto pre=nxt;--pre;\n\t\t\tif(nxt==s.end()){\n\t\t\t\ts.insert(x);\n\t\t\t\tadd(dfn[LCA(idfn[x],idfn[*pre])],-1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint lft=LCA(idfn[x],idfn[*pre]),rgt=LCA(idfn[x],idfn[*nxt]);\n\t\t\tint X=dep[lft]>dep[rgt]?lft:rgt;\n\t\t\ts.insert(x);\n\t\t\tadd(dfn[X],-1);\n\t\t}\n\t\tvoid DEL(int x){\n\t\t\ts.erase(x);\n\t\t\tadd(x,-1);\n\t\t\tif(s.empty())return;\n\t\t\tauto nxt=s.lower_bound(x);\n\t\t\tif(nxt==s.begin()){\n\t\t\t\tadd(dfn[LCA(idfn[x],idfn[*nxt])],1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tauto pre=nxt;--pre;\n\t\t\tif(nxt==s.end()){\n\t\t\t\tadd(dfn[LCA(idfn[x],idfn[*pre])],1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint lft=LCA(idfn[x],idfn[*pre]),rgt=LCA(idfn[x],idfn[*nxt]);\n\t\t\tint X=dep[lft]>dep[rgt]?lft:rgt;\n\t\t\tadd(dfn[X],1);\n\t\t}\n\t}c[N];\n\tvoid work(){\n\t\tfor(int i=1;i<=n;++i)\n\t\tc[col[i]].ADD(dfn[i]);\n\t\tfor(int i=1;i<=Q;++i){\n\t\t\tswitch(q[i].op){\n\t\t\t\tcase 1:{\n\t\t\t\t\tif(col[q[i].x]==q[i].y)break;\n\t\t\t\t\tc[col[q[i].x]].DEL(dfn[q[i].x]);\n\t\t\t\t\tc[col[q[i].x]=q[i].y].ADD(dfn[q[i].x]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2:{\n\t\t\t\t\tint p=LCA(q[i].x,q[i].y);\n\t\t\t\t\tprintf(\"%d\\n\",dw[p]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3:{\n\t\t\t\t\tint x=q[i].x,y=q[i].y;\n\t\t\t\t\tfor(int i=17;~i;--i)\n\t\t\t\t\tif(F[i][x]&&dw[F[i][x]]<=y)x=F[i][x];\n\t\t\t\t\tprintf(\"%d\\n\",ask(dfn[x]+sz[x]-1)-ask(dfn[x]-1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nstruct EDGE{\n\tint u,v,w;\n\tinline int operator<(const EDGE&r)const{return w<r.w;}\n}e[N];\nvoid kruskal(){\n\tint tot=n;\n\tfor(int i=1;i<=m;++i){\n\t\tint u=find(e[i].u),v=find(e[i].v);\n\t\tif(u!=v){\n\t\t\t++tot;\n\t\t\tnt::addedge(tot,u,e[i].w),nt::addedge(tot,v,e[i].w);\n\t\t\tff[u]=ff[v]=tot;\n\t\t}\n\t}\n\tnt::rt=tot;\n}\nint main(){\n\tn=readint(),m=readint(),Q=readint();\n\tfor(int i=1;i<=n;++i)vec.push_back(col[i]=readint());\n\tfor(int i=1;i<=m;++i)e[i].u=readint(),e[i].v=readint(),e[i].w=readint();\n\tsort(e+1,e+m+1);\n\tfor(int i=1;i<=2*n;++i)ff[i]=i;\n\tfor(int i=1;i<=Q;++i){\n\t\tq[i].op=readint(),q[i].x=readint(),q[i].y=readint();\n\t\tif(q[i].op==1)vec.push_back(q[i].y);\n\t}\n\tsort(vec.begin(),vec.end()),vec.erase(unique(vec.begin(),vec.end()),vec.end());\n\tfor(int i=1;i<=n;++i)col[i]=lower_bound(vec.begin(),vec.end(),col[i])-vec.begin();\n\tfor(int i=1;i<=Q;++i)if(q[i].op==1)q[i].y=lower_bound(vec.begin(),vec.end(),q[i].y)-vec.begin();\n\tkruskal();\n\tnt::init();\n\tnt::work();\n\treturn 0;\n}\n```",
        "postTime": 1561638319,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5168 \u3010xtq\u73a9\u9b54\u5854\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6bd4\u8f83\u4e0d\u9519 \u9996\u5148\u6211\u4eec\u770b\u4e86\u662f\u4e00\u5f20\u56fe\uff0c\u6709\u70b9\u532a\u5937\u6240\u601d\u3002\u3002\u3002\n\n\u5c31\u77e5\u9053\u8ddfkruskal\u7b97\u6cd5\u6709\u5173\uff0c\n\n\u6ca1\u9519\uff0c\u539f\u6765\u7684kruskal\u7b97\u6cd5\u5c31\u662f\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u7684\uff0c\n\n\u4f46\u5f53\u6211\u4eec\u4f7f\u7528kruskal\u91cd\u6784\u6811\u7684\u65f6\u5019\uff0c\n\n\u5bf9\u4e8e\u6bcf\u6b21\u627e\u51fa\u7684\u4e0d\u540c\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u7956\u5148\uff0c\n\n\u6211\u4eec\u90fd\u65b0\u5efa\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u4e24\u4e2a\u7956\u5148\u7684\u7236\u4eb2\uff0c\u5e76\u5c06\u5f53\u524d\u8fb9\u7684\u8fb9\u6743\u8f6c\u5316\u4e3a\u65b0\u70b9\u7684\u70b9\u6743\u3002\n\n\n\n------------\n\n\n\u7136\u800c\uff0c\n\n\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\u4f1a\u8ba9\u6211\u4eec\u4e22\u5931\u8fd9\u79cd\u8f9b\u8f9b\u82e6\u82e6\u521b\u9020\u7684\u6811\u7684\u5f62\u72b6\u3002\u3002\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u540c\u65f6\u4f7f\u7528\u4e8c\u53c9\u6811\u6765\u7ef4\u62a4\u6811\u7684\u5f62\u72b6\u3002\n\n\u8fd9\u6837\u7ef4\u62a4\u51fa\u6765\u7684\u6811\u5c31\u662fkruskal\u91cd\u6784\u6811\u3002\n\n\n------------\n\n\n\u4e0d\u96be\u53d1\u73b0kruskal\u91cd\u6784\u6811\u6709\u51e0\u6761\u91cd\u8981\u7684\u6027\u8d28\uff1a\n\n1.\u6811\u4e0a\u9664\u53f6\u5b50\u7ed3\u70b9\u4ee5\u5916\u7684\u70b9\u90fd\u5bf9\u5e94\u7740\u539f\u6765\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\n\n\u53f6\u5b50\u7ed3\u70b9\u5c31\u662f\u539f\u6765\u751f\u6210\u6811\u4e0a\u7684\u8282\u70b9\u3002\n\n2.\u7531\u4e8e\u65b0\u70b9\u7684\u521b\u5efa\u987a\u5e8f\u4e0e\u539f\u6765\u751f\u6210\u6811\u4e0a\u8fb9\u6743\u7684\u5927\u5c0f\u6709\u5173\uff0c\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u9664\u53f6\u5b50\u7ed3\u70b9\u5916\u6309\u987a\u5e8f\u8bbf\u95ee\u5230\u7684\u70b9\u7684\u70b9\u6743\u662f\u5355\u8c03\u7684\u3002\n\n3.\u51fa\u4e8ekruskal\u7b97\u6cd5\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\n\n\u4e24\u4e2a\u70b9u\u548cv\u7684lca\u7684\u70b9\u6743\u5c31\u5bf9\u5e94\u7740\u5b83\u4eec\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u74f6\u9888\u3002\n\n4.\u5b9e\u9645\u4e0a\u8fd9\u68f5\u6811\u5c31\u662f\u4e00\u4e2a\u4e8c\u53c9\u5806\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u5982\u4f55\u7528krukal\u91cd\u6784\u6811\u505a\u5462\uff1f\n\n\n\u7136\u540e\u6211\u4eec\u5047\u8bbe\u5bf9\u4e8e\u5f53\u524d\u8be2\u95ee\uff0c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9uu\uff0c\n\n\u6ee1\u8db3d[u]>pd[u]>p\n\n\u4e14d[fa[u]]<=pd[fa[u]]<=p\u4e14\u51fa\u53d1\u70b9vv\u5728\u5b50\u6811\u4e2d\uff0c\n\n\u8fd9\u65f6\u4ecev\u51fa\u53d1\u53ef\u4ee5\u76f4\u63a5\u62b5\u8fbe\u5b50\u6811\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4ece\u4f17\u591a\u53f6\u5b50\u8282\u70b9\u4e2d\u9009\u51fa\u4e00\u4e2a\u8ddd\u79bb\u82b1\u8d39\u6700\u5c0f\u7684\u3002\n\n\u9650\u5236\u4e00\u4e0b\u70b9\u6743\uff0c\u500d\u589e\u4e00\u4e0b\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u5c31\u5e26\u4fee\u83ab\u961f\uff0c\u4e71\u641e\u4e00\u53d1\u3002\u3002\u3002\n\n\u4ee3\u7801\u6709\u70b9\u957f\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 200005, M = (N << 3), K = 25;\nstruct krus {int u, v, w;} e[M];\nstruct qst {int l, r, t, id;} que[N];\nint fa[N][K], B[N], beg[N], ed[N], la[N], ra[N], pt[N], col[N], to[M], nxt[M], fir[N];\nint ini[N], val[N], ans[N], f[N], depth[N], rt[N];\nint res, ecnt, tot, n, m, Q, S;\nunordered_map <int, int> mp;\ntemplate <class T> void cmax(T &x, T y) {x = x > y ? x : y;}\ntemplate <class T> void cmin(T &x, T y) {x = x < y ? x : y;}\ntemplate <class T> void rd(T &x) {\n    char c = getchar(); int f = 1; x = 0;\n    for (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n    for (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n    x *= f;\n}\ntemplate <class T> void write(T x) {\n    if (x < 0) putchar('-'), x = -x, write(x);\n    if (x > 9) write(x / 10); putchar(x % 10 + '0');\n}\ntemplate <class T> void writeln(T x) {write(x); putchar('\\n');}\nbool cmp1(krus a, krus b) {return a.w < b.w;}\nbool cmp2(qst a, qst b) {\n    if (B[a.l] != B[b.l]) return B[a.l] < B[b.l];\n    if (B[a.r] != B[b.r]) {\n        if (B[a.l] & 1) return B[a.r] < B[b.r];\n        return B[a.r] > B[b.r];\n    }\n    return a.t < b.t;\n}\nvoid add(int x) {if (!pt[x]++) ++res;}\nvoid dec(int x) {if (!--pt[x]) --res;}\nvoid upd(int x, int y) {\n    if (que[x].l <= la[y] && que[x].r >= la[y]) add(ra[y]), dec(col[la[y]]);\n     swap(col[la[y]], ra[y]);\n}\nint find(int u) {return f[u] = f[u] == u ? u : find(f[u]);}\nvoid ae(int u, int v) {to[++ecnt] = v; nxt[ecnt] = fir[u]; fir[u] = ecnt;}\nvoid dfs(int u, int dep, int f) {\n    int i; fa[u][0] = f, depth[u] = dep;\n    if (!nxt[fir[u]]) beg[u] = ++tot;\n    for (i = fir[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if (v != f) {\n            dfs(v, dep + 1, u);\n            if (!beg[u]) beg[u] = beg[v];\n        }\n    }\n    ed[u] = tot;\n}\nint lca(int u, int v) {\n    int i; if (depth[u] < depth[v]) swap(u, v);\n    for (i = 20; ~i; --i) if (depth[fa[u][i]] >= depth[v]) u = fa[u][i];\n    if (u == v) return u;\n    for (i = 20; ~i; --i) if (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\nint main() {\n    int i, j; rd(n); rd(m); rd(Q); S = sqrt(n);\n    for (i = 1; i <= n; ++i) rd(ini[i]), B[i] = (i - 1) / S + 1;\n    for (i = 1; i <= m; ++i) rd(e[i].u), rd(e[i].v), rd(e[i].w);\n    for (i = 1; i <= n; ++i) f[i] = rt[i] = i;\n    sort(e + 1, e + m + 1, cmp1);\n    int cnt = n, cntc, cntq; cntc = cntq = 0;\n    for (i = 1; i <= m; ++i) {\n        int u = e[i].u, v = e[i].v, w = e[i].w;\n        u = find(u), v = find(v);\n        if (rt[u] != rt[v]) {\n            int p = ++cnt;\n            ae(p, rt[u]), ae(rt[u], p), ae(p, rt[v]), ae(rt[v], p);\n            f[u] = v, val[rt[v] = p] = w;\n        }\n    }\n    dfs(cnt, 1, tot = 0); memset(ans, -1, sizeof(ans));\n    for (i = 1; i <= 20; ++i)\n        for (j = 1; j <= cnt; ++j) fa[j][i] = fa[fa[j][i - 1]][i - 1];\n    for (i = 1, tot = 0; i <= n; ++i) if (!mp[ini[i]]) mp[ini[i]] = ++tot;\n    for (i = 1; i <= Q; ++i) {\n        int a, b, c; rd(a); rd(b); rd(c);\n        if (a == 1) ++cntc, la[cntc] = beg[b], ra[cntc] = c;\n        else if (a == 2) ans[i] = val[lca(b, c)];\n        else {\n            for (j = 20; ~j; --j)\n                if (fa[b][j] && val[fa[b][j]] <= c) b = fa[b][j];\n            que[++cntq] = (qst) {beg[b], ed[b], cntc, i};\n        }\n    }\n    for (i = 1; i <= cntc; ++i) if (!mp[ra[i]]) mp[ra[i]] = ++tot;\n    for (i = 1; i <= cntc; ++i) ra[i] = mp[ra[i]];\n    for (i = 1; i <= n; ++i) col[beg[i]] = mp[ini[i]];\n    sort(que + 1, que + cntq + 1, cmp2);\n    int L = 1, R = 0, C = 0;\n    for (i = 1; i <= cntq; ++i) {\n        while (L > que[i].l) add(col[--L]);\n        while (R < que[i].r) add(col[++R]);\n        while (L < que[i].l) dec(col[L++]);\n        while (R > que[i].r) dec(col[R--]);\n        while (C < que[i].t) upd(i, ++C);\n        while (C > que[i].t) upd(i, C--);\n        ans[que[i].id] = res; \n    } \n    for (i = 1; i <= Q; ++i) if (ans[i] > -1) writeln(ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1549157946,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5168 \u3010xtq\u73a9\u9b54\u5854\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\u5e26\u6743\u56fe\uff0c\u70b9\u6709\u989c\u8272\u3002\u9700\u8981\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n1. \u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u989c\u8272\n2. \u67e5\u8be2 $x,y$ \u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n3. \u67e5\u8be2 $x$ \u7ecf\u8fc7\u6743\u503c\u4e0d\u8d85\u8fc7 $y$ \u7684\u8fb9\u80fd\u5230\u7684\u6240\u6709\u70b9\u4e2d\uff0c\u4e0d\u540c\u7684\u989c\u8272\u79cd\u6570\n\n## \u5206\u6790\n\n\u770b\u5230\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u5bb9\u6613\u60f3\u5230 Kruskal \u91cd\u6784\u6811\u3002\n\n\u90a3\u4e48\u7b2c\u4e09\u79cd\u64cd\u4f5c\u5c31\u662f\u67e5\u8be2\u5b50\u6811\u4e2d\u989c\u8272\u79cd\u6570\u4ee5\u53ca\u5355\u70b9\u4fee\u6539\u3002\n\n\u663e\u7136\u53ef\u4ee5 dfs \u4e00\u904d\u4e4b\u540e\u53d8\u6210\u533a\u95f4\u989c\u8272\u79cd\u6570\u4ee5\u53ca\u5355\u70b9\u4fee\u6539\uff0c\u5e26\u4fee\u83ab\u961f\u53ef\u4ee5 $O(n^\\frac{5}{3})$\uff0c\u800c\u4e14\u6570\u636e\u968f\u673a\u8dd1\u4e0d\u6ee1\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u590d\u6742\u5ea6\u592a\u9ad8\u4e86\uff0c\u5176\u5b9e\u6709\u4e00\u4e2a $O(m\\log m+q\\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u628a\u6539\u53d8\u989c\u8272\u770b\u505a\u5148\u5220\u9664\u518d\u63d2\u5165\u3002\u8fd9\u91cc\u53ea\u8003\u8651\u63d2\u5165\u3002\n\n\u663e\u7136\uff0c\u5728 $x$ \u4f4d\u7f6e\u63d2\u5165\uff0c\u53ea\u4f1a\u5bf9 $x$ \u7684\u7956\u5148\u8282\u70b9\u4e2d\uff0c\u539f\u672c\u5b50\u6811\u5185\u6ca1\u6709\u8fd9\u79cd\u989c\u8272\u7684\u8282\u70b9\u9020\u6210\u8d21\u732e\u3002\n\n\u5728\u6240\u6709\u540c\u8272\u7684\u8282\u70b9\u4e2d\uff0c\u627e\u5230\u4e0e\u8fd9\u4e2a\u70b9\u7684 LCA \u6700\u6df1\u7684\uff0c\u8bbe\u627e\u5230\u7684\u70b9\u662f $y$\uff0c\u5219 $x$ \u5230 LCA\uff08\u4e0d\u5305\u62ec LCA\uff09\u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u7b54\u6848\u90fd\u4f1a\u589e\u52a0\u3002\n\n\u800c\u4e14\u5982\u679c\u6309\u7167 dfn \u6392\u5e8f\uff0c$y$ \u53ea\u80fd\u662f $x$ \u7684\u540e\u7ee7\u6216\u8005\u524d\u9a71\u3002\u53ef\u4ee5\u7528 set \u7ef4\u62a4\u3002\n\n## \u89e3\u51b3\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <set>\n#include <unordered_map>\n\nusing namespace std;\n\nconst int N = 100005, NN = N << 1, M = 300005, LOG = 18;\nint n, m, q, idx, col[N], val[NN], lc[NN], rc[NN], id[NN], siz[NN], dfn[NN],\n    dep[NN], fa[NN], Fa[NN][LOG], tree[NN];\nset<int> pos[NN];\nunordered_map<int, int> cid;\nstruct Edge {\n    int u, v, w;\n    bool operator<(const Edge &oth) const { return w < oth.w; }\n} e[M];\n\nvoid add(int x, int y) {\n    for (; x < n << 1; x += x & -x) tree[x] += y;\n}\n\nint sum(int x) {\n    int res = 0;\n    for (; x; x &= x - 1) res += tree[x];\n    return res;\n}\n\nint getFather(int x) { return x == fa[x] ? x : fa[x] = getFather(fa[x]); }\n\nvoid Kruskal() {\n    sort(e + 1, e + m + 1);\n    for (int i = 1; i < n << 1; i++) fa[i] = i;\n    for (int i = 1, j = n; i <= m; i++) {\n        int u = getFather(e[i].u), v = getFather(e[i].v), w = e[i].w;\n        if (u == v) continue;\n        val[++j] = w, fa[u] = fa[v] = j, lc[j] = u, rc[j] = v;\n    }\n}\n\nvoid dfs(int cur, int fa) {\n    siz[cur] = 1, Fa[cur][0] = fa, dfn[cur] = ++idx, dep[cur] = dep[fa] + 1,\n    id[idx] = cur;\n    for (int i = 1; i < LOG; i++) Fa[cur][i] = Fa[Fa[cur][i - 1]][i - 1];\n    if (cur > n)\n        dfs(lc[cur], cur), dfs(rc[cur], cur),\n            siz[cur] += siz[lc[cur]] + siz[rc[cur]];\n}\n\nint lca(int x, int y) {\n    if (dep[x] < dep[y]) swap(x, y);\n    for (int i = LOG - 1; i >= 0; i--)\n        if (dep[Fa[x][i]] >= dep[y]) x = Fa[x][i];\n    if (x == y) return x;\n    for (int i = LOG - 1; i >= 0; i--)\n        if (Fa[x][i] != Fa[y][i]) x = Fa[x][i], y = Fa[y][i];\n    return Fa[x][0];\n}\n\nvoid modify(int x, int y) {\n    int c = col[x];\n    add(dfn[x], y);\n    if (y == 1) {\n        pos[c].insert(dfn[x]);\n        if (pos[c].size() == 1) return;\n    } else {\n        pos[c].erase(dfn[x]);\n        if (pos[c].empty()) return;\n    }\n    set<int>::iterator it;\n    int nxt = (it = pos[c].upper_bound(dfn[x])) == pos[c].end()\n                  ? n << 1\n                  : lca(x, id[*it]),\n        pre = (it = pos[c].lower_bound(dfn[x])) == pos[c].begin()\n                  ? n << 1\n                  : lca(x, id[*--it]);\n    add(dep[nxt] < dep[pre] ? dfn[pre] : dfn[nxt], -y);\n}\n\ntemplate <class T>\nvoid read(T &ret) {\n    ret = 0;\n    char ch = getchar();\n    bool found = false;\n    while (!isdigit(ch) && ch != '-') ch = getchar();\n    if (ch == '-') found = true, ch = getchar();\n    while (isdigit(ch)) ret = ret * 10 + ch - '0', ch = getchar();\n    if (found) ret = -ret;\n}\n\ntemplate <class T, class... Args>\nvoid read(T &ret, Args &...rest) {\n    read(ret), read(rest...);\n}\n\nint ppk;\nint getID(int x) { return cid.count(x) ? cid[x] : cid[x] = ++ppk; }\n\nint main() {\n    read(n, m, q);\n    for (int i = 1; i <= n; i++) read(col[i]), col[i] = getID(col[i]);\n    for (int i = 1; i <= m; i++) read(e[i].u, e[i].v, e[i].w);\n    Kruskal(), dfs((n << 1) - 1, (n << 1) - 1);\n    for (int i = 1; i <= n; i++) modify(i, 1);\n    while (q--) {\n        int op, x, y;\n        read(op, x, y);\n        if (op == 1)\n            modify(x, -1), col[x] = getID(y), modify(x, 1);\n        else if (op == 2)\n            printf(\"%d\\n\", val[lca(x, y)]);\n        else {\n            for (int i = LOG - 1; i >= 0; i--)\n                if (val[Fa[x][i]] <= y) x = Fa[x][i];\n            printf(\"%d\\n\", sum(dfn[x] + siz[x] - 1) - sum(dfn[x] - 1));\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1636894764,
        "uid": 253946,
        "name": "ClHg2",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011xtq \u73a9\u9b54\u5854"
    },
    {
        "content": "\u5df2\u7ecf\u6709\u5e26\u4fee\u83ab\u961f\u7684\u4e86\uff0c\u90a3\u6211\u5c31\u63d0\u4f9b\u4e2a\u6811\u5957\u6811\u7684\u5427\n\n**kruskal\u91cd\u6784\u6811**+**\u500d\u589e**+**lca**(\u6211\u7528\u6811\u5256)+**\u6811\u5957\u6811**(\u6211\u7528\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811)+\u72ec\u7acb\u7684\u82e5\u5e72\u68f5\u5e73\u8861\u6811\n\n\u9898\u610f\uff1a**\u9759\u6001\u4e24\u70b9\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c\u52a8\u6001\u4fee\u6539\u5355\u70b9\u989c\u8272\uff0c\u6240\u8d70\u8def\u5f84\u6240\u6709\u8fb9\u6743\u4e0d\u80fd\u8d85\u8fc7\u67d0\u4e2a\u503c\uff0c\u6c42\u6700\u591a\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u7684\u989c\u8272\u6570**\n\n\u9996\u5148 **_opt=2\u4ee3\u8868\u67e5\u8be2\u4ecexx\u70b9\u8981\u5230\u8fbeyy\u70b9\u6240\u9700\u7684\u6700\u5c0f\u8840\u91cf_**  \u8fd9\u4e2a\u8be2\u95ee\u5c31\u662f\u88f8\u7684kruskal\u91cd\u6784\u6811\uff0c\u4e0eP1967\u8d27\u8f66\u8fd0\u8f93\u7c7b\u4f3c\uff0c\u7528\u6700\u5c0f\u751f\u6210\u6811\u89e3\u51b3\n\n\u6837\u4f8b\u91cd\u6784\u5b8c\u6811\u662f\u8fd9\u6837\u7684\uff1a\n![luogu](https://cdn.luogu.com.cn/upload/pic/50261.png)\n\n5,6,7\u4e3a\u65b0\u5efa\u7684\u70b9\uff0c\u6743\u503c\u4e3a\u5176\u5de6\u5b50\u6811\u6bcf\u4e2a\u70b9\u5230\u53f3\u5b50\u6811\u6bcf\u4e2a\u70b9\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\uff0c\u64cd\u4f5c2\u5c31\u76f4\u63a5\u627e\u51fa\u4e24\u70b9lca\u8f93\u51fa\u6743\u503c\u5c31ok\u4e86\n\n\u8003\u8651\u64cd\u4f5c3\uff0c\u9996\u5148\u8003\u8651\u6761\u4ef6\uff1a\u8fb9\u6743\u4e0d\u8d85\u8fc7y\u3002\u8d2a\u5fc3\u5730\uff0c\u4e24\u70b9\u95f4\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u82e5>y\uff0c\u5c31\u4e0d\u80fd\u901a\u5f80\u8be5\u70b9\u3002\u8fd9\u4e2a\u9650\u5236\u8fd8\u662f\u660e\u663e\u5730\u8981\u6211\u4eec\u4e86\u89e3\u4e24\u70b9\u6700\u5c0f\u6700\u5927\u503c\uff0c\u8fd8\u662f\u8981\u56de\u5230\u6211\u4eec\u7684\u91cd\u6784\u6811\u4e0a\u3002\n\n\u90a3\u4e48\u4e0e\u7ed9\u5b9a\u70b9x\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u4e0d\u8d85\u8fc7y\u7684\u70b9\u90fd\u6709\u54ea\u4e9b\u5462\uff1f\u770b\u5230\u6811\u4e0a\uff0c\u4ece\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u51fa\u53d1\uff0c\u8d8a\u5f80\u4e0a\u8df3\u70b9\u6743\u8d8a\u5927\uff0c\u5982\u679c\u5f80\u4e0a\u8df3\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u662f<=y\u7684\uff0c\u5f88\u663e\u7136\u5219\u5c31\u8bf4\u660ex\u80fd\u591f\u5230\u8fbe\u8be5\u70b9\u5b50\u6811\u7684\u6240\u6709\u70b9\u3002\u8df3\u5f97\u8d8a\u9ad8\u80fd\u8bbf\u95ee\u7684\u70b9\u5c31\u8d8a\u591a\uff0c\u6240\u83b7\u53d6\u7684\u989c\u8272\u6570\u4e5f\u5c31\u53ef\u80fd\u8d8a\u591a\uff0c\u4e3a\u4e86\u9ad8\u6548\u627e\u51fa\u8fd9\u4e2a\u70b9\uff0c\u9ad8\u6548\u5730\u8df3\u5c31\u60f3\u5230\u4e86\u500d\u589e\u3002\n\n\u901a\u8fc7\u500d\u589e\u627e\u5230\u8fd9\u4e2a\u70b9\u540e\uff0c\u8981\u7edf\u8ba1\u8be5\u70b9\u7684\u5b50\u6811\u7684\u53f6\u5b50\u7ed3\u70b9(\u5373\u539f\u56fe\u7684\u70b9)\u7684\u989c\u8272\u6570\u91cf\uff0c\u8fd8\u8981\u5e26\u5355\u70b9\u4fee\u6539\uff0c\u5c31\u60f3\u5230\u4e86[P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217](https://www.luogu.org/problemnew/show/P1903)\u3002\n\n\u4f46\u9996\u5148\u8981\u77e5\u9053\u5b50\u6811\u4e2d\u90fd\u6709\u54ea\u4e9b\u53f6\u8282\u70b9\u624d\u80fd\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u4e14\u533a\u95f4\u6570\u989c\u8272\u4e00\u5b9a\u662f\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u800c\u5047\u5982\u8df3\u5230\u4e865\u53f7\u70b9\uff0c\u5176\u53f6\u8282\u70b9\u662f2\u548c4\uff0c\u7f16\u53f7\u5e76\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u7f16\u53f7\u6765\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u7684\u65b9\u6cd5\u662f\u8fdb\u884c\u4e00\u6ce2**\u91cd\u65b0\u7f16\u53f7**(\u5f53\u7136\u6709\u50cf\u5176\u4ed6\u9898\u89e3\u90a3\u6837\u7684\u5176\u4ed6\u65b9\u6cd5)\n\n\u904d\u5386\u6574\u68f5\u6811\uff0c\u7ed9\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4e00\u4e2adfs\u5e8f\u5f53\u4f5c\u7f16\u53f7\uff0c\u975e\u53f6\u8282\u70b9\u5c31\u5f53\u4f5c\u4e00\u4e2a\u533a\u95f4\uff0c\u4ee3\u8868\u5176\u6240\u542b\u53f6\u8282\u70b9dfs\u5e8f\u7684\u8303\u56f4/\u96c6\u5408\uff0c\u7528l[]\u6570\u7ec4\u548cr[]\u6570\u7ec4\u8868\u793a\uff0c\u83b7\u53d6l[]\u8ddfr[]\u7684\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0cdfs\u7684\u65f6\u5019l\u53d6\u5176\u513f\u5b50l\u7684\u6700\u5c0f\u503c\uff0cr\u53d6\u5176\u513f\u5b50r\u7684\u6700\u5927\u503c\u5373\u53ef\n\n\u5982\u56fe\u662f\u91cd\u65b0\u7f16\u53f7\u7f16\u533a\u95f4\u7684\u6811\n![luogu](https://cdn.luogu.com.cn/upload/pic/50271.png)\n\n\u6b64\u65f6\u500d\u589e\u8df3\u5b8c\u627e\u5230\u6700\u9ad8\u7684\u70b9\u540e\uff0c\u83b7\u53d6\u8be5\u70b9\u7684l\u548cr\uff0c\u6811\u5957\u6811\u67e5\u8be2\u533a\u95f4[l,r]\u5373\u53ef\n\n\u6b64\u9898\u53ea\u8bf4\u6570\u5b57<=intmax\uff0c\u989c\u8272\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u6211\u7528map\u5b9e\u73b0\n\n\u81f3\u4e8e\u6811\u5957\u6811\u5982\u4f55\u4fee\u6539\u4e0e\u67e5\u8be2\u8be5\u7c7b\u95ee\u9898(\u6211\u662f\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0c\u548c\u8be5\u7c7b\u95ee\u9898\u89e3\u51b3\u7684\u4e00\u822c\u65b9\u6cd5\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u6709\u6240\u4e0d\u540c)\uff0c\u89c1[\u6211\u5199\u7684P1903\u9898\u89e3](https://www.luogu.org/blog/van/solution-p1903)\u5c31\u597d\u4e86\n\n```cpp\n#include<map>\n#include<cstdio>\n#include<algorithm>\n#define rt (n<<1)-1 //\u56e0\u4e3a\u751f\u6210\u6811\u4e2d\u6709n-1\u6761\u8fb9\uff0c\u6709\u591a\u5c11\u6761\u8fb9\u5c31\u4f1a\u91cd\u6784\u6811\u591a\u5c11\u4e2a\u70b9\uff0c\u6240\u4ee5\u91cd\u6784\u6811\u4e2d\u603b\u5171\u4f1a\u67092n-1\u4e2a\u70b9\uff0c\u56e0\u4e3a\u6dfb\u52a0\u7684\u603b\u662f\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6700\u540e\u6dfb\u52a0\u7684\u4e00\u5b9a\u662f\u6839\u8282\u70b9\uff0c\u6240\u4ee5(2n-1)\u662f\u6839\nusing std::max;\nusing std::min;\nusing std::map;\nusing std::sort;\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();short fh=1;\n\twhile (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n\tin*=fh;\n}\nconst int N=1e5+10,M=3e5+10,Q=2e5+10,K=17;\nint n,m,q,last[N],tmp[N],tot,col[N];\nmap<int,int>id; //\u628a\u989c\u8272\u8f6c\u5316\u4e3a\u53ef\u64cd\u4f5c\u7684\u7f16\u53f7\nstruct edge\n{\n\tint x,y,z;\n\tinline const bool operator<(const edge &e)const\n\t{\n\t\treturn z<e.z;\n\t}\n}e[M],t[N<<1];\nint head[N<<1],cnt;\ninline const void addedge(int u,int v)\n{\n\tcnt++;\n\tt[cnt]=(edge){v,head[u],0};\n\thead[u]=cnt;\n}\nclass Union_Find_Set\n{\n\tprivate:\n\t\tint fa[N<<1];\n\tpublic:\n\t\tinline const void Init()\n\t\t{\n\t\t\tfor (int i=1;i<=rt;i++)fa[i]=i;\n\t\t}\n\t\tinline const int Find(int x)\n\t\t{\n\t\t\treturn fa[x]==x?x:fa[x]=Find(fa[x]);\n\t\t}\n\t\tinline const void Union(int x,int y)\n\t\t{\n\t\t\tint fx=Find(x),fy=Find(y);\n\t\t\tif (fx==fy)return;\n\t\t\tfa[fx]=fy;\n\t\t}\n}ufs;\nint chosen[M],num;\ninline const void kruskal()\n{\n\tufs.Init();\n\tsort(e+1,e+m+1);\n\tfor (int i=1;i<=m;i++)\n\t\tif (ufs.Find(e[i].x)^ufs.Find(e[i].y))\n\t\t\tufs.Union(e[i].x,e[i].y),chosen[++num]=i;\n}\nint w[N<<1],l[N<<1],r[N<<1],org[N],ranking;\ninline const void rebuild()\n{\n\tufs.Init();\n\tfor (int x,y,i=1;i<=num;i++)\n\t\tx=ufs.Find(e[chosen[i]].x),y=ufs.Find(e[chosen[i]].y),\n\t\taddedge(n+i,x),addedge(n+i,y),w[n+i]=e[chosen[i]].z,\n\t\tufs.Union(x,n+i),ufs.Union(y,n+i);\n}\ninline const void renumber(int p)\n{\n\tl[p]=n;r[p]=1;\n\tfor (int i=head[p];i;i=t[i].y)\n\t\trenumber(t[i].x),\n\t\tl[p]=min(l[t[i].x],l[p]),\n\t\tr[p]=max(r[t[i].x],r[p]);\n\tif (head[p])return;\n\torg[r[p]=l[p]=++ranking]=p;\n}\nint fa[N<<1][K+1],wson[N<<1],size[N<<1],dep[N<<1],top[N<<1];\ninline const void dfs(int p)\n{\n\tsize[p]=1;\n\tfor (int i=head[p];i;i=t[i].y)\n\t{\n\t\tint son=t[i].x;\n\t\tdep[son]=dep[p]+1;fa[son][0]=p;\n\t\tdfs(son);size[p]+=size[son];\n\t\tif (size[son]>size[wson[p]])wson[p]=son;\n\t}\n}\ninline const void dfs(int p,int tp)\n{\n\ttop[p]=tp;\n\tif (wson[p])dfs(wson[p],tp);\n\tfor (int i=head[p];i;i=t[i].y)\n\t\tif (t[i].x!=wson[p])\n\t\t\tdfs(t[i].x,t[i].x);\n}\ninline const int lca(int a,int b)\n{\n\twhile (top[a]^top[b])\n\t\tdep[top[a]]>dep[top[b]]\n\t\t?a=fa[top[a]][0]:b=fa[top[b]][0];\n\treturn dep[a]<dep[b]?a:b;\n}\ninline const void getfa()\n{\n\tfor (int j=1;j<=K;j++)\n\t\tfor (int i=1;i<=rt;i++)\n\t\t\tfa[i][j]=fa[fa[i][j-1]][j-1];\n}\nnamespace Splay\n{\n\tstruct tree\n\t{\n\t\tint val,cnt,size;\n\t\ttree *fa,*son[2];\n\t\tinline const void pushup()\n\t\t{\n\t\t\tsize=son[0]->size+cnt+son[1]->size;\n\t\t}\n\t\tinline const bool identity()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t}memory_pool[N<<6],*recycle[N<<6],*tail,*null,*root[N+Q]; //\u6700\u591a\u53ef\u80fd\u6709n+q\u79cd\u4e0d\u540c\u7684\u989c\u8272\n\tint top;\n\tinline const void init()\n\t{\n\t\ttail=memory_pool;\n\t\tnull=tail++;\n\t\tnull->val=null->cnt=null->size=top=0;\n\t\tnull->fa=null->son[0]=null->son[1]=null;\n\t\tfor (int i=1;i<=n+q;i++)root[i]=null;\n\t}\n\tinline tree *spawn(int key)\n\t{\n\t\ttree *p=top?recycle[--top]:tail++;\n\t\tp->val=key;\n\t\tp->size=p->cnt=1;\n\t\tp->fa=p->son[0]=p->son[1]=null;\n\t\treturn p;\n\t}\n\tinline const void erase(tree *&p)\n\t{\n\t\trecycle[top++]=p;\n\t\tp=null;\n\t}\n\tinline const void connect(tree *p,tree *fa,bool which)\n\t{\n\t\tif (p!=null)p->fa=fa;\n\t\tif (fa!=null)fa->son[which]=p,fa->pushup();\n\t}\n\tinline const void rotate(tree *p)\n\t{\n\t\ttree *fa=p->fa;\n\t\tbool id=p->identity();\n\t\tconnect(p,fa->fa,fa->identity());\n\t\tconnect(p->son[id^1],fa,id);\n\t\tconnect(fa,p,id^1);\n\t}\n\tinline const void splay(tree *&root,tree *p)\n\t{\n\t\tfor (tree *fa;(fa=p->fa)!=null;rotate(p))\n\t\t\tif (fa->fa!=null)\n\t\t\t\trotate(p->identity()^fa->identity()?fa:p);\n\t\troot=p;\n\t}\n\tinline const void insert(tree *&root,int key)\n\t{\n\t\tif (root==null)return (void)(root=spawn(key));\n\t\ttree *now=root;\n\t\twhile (1)\n\t\t{\n\t\t\tif (now->val==key)\n\t\t\t\treturn now->cnt++,now->pushup(),splay(root,now);\n\t\t\ttree *fa=now;\n\t\t\tbool nxt=fa->val<key;\n\t\t\tnow=fa->son[nxt];\n\t\t\tif (now==null)\n\t\t\t\treturn now=spawn(key),connect(now,fa,nxt),splay(root,now);\n\t\t}\n\t}\n\tinline const void find(tree *&root,int key)\n\t{\n\t\ttree *now=root;\n\t\tif (now==null)return;\n\t\twhile (now->son[now->val<key]!=null&&now->val!=key)\n\t\t\tnow=now->son[now->val<key];\n\t\tsplay(root,now);\n\t}\n\tinline tree *precursor(tree *&root,int key)\n\t{\n\t\tfind(root,key);\n\t\tif (root->val<key)return root;\n\t\ttree *now=root->son[0];\n\t\twhile (now->son[1]!=null)now=now->son[1];\n\t\treturn now;\n\t}\n\tinline tree *successor(tree *&root,int key)\n\t{\n\t\tfind(root,key);\n\t\tif (root->val>key)return root;\n\t\ttree *now=root->son[1];\n\t\twhile (now->son[0]!=null)now=now->son[0];\n\t\treturn now;\n\t}\n\tinline const void Delete(tree *&root,int key)\n\t{\n\t\tfind(root,key);tree *p=root;\n\t\tif (p->cnt>1)return p->cnt--,p->pushup();\n\t\tif (p->son[0]==null&&p->son[1]==null)return root=null,erase(p);\n\t\tif (p->son[0]==null)return (root=p->son[1])->fa=null,erase(p);\n\t\tif (p->son[1]==null)return (root=p->son[0])->fa=null,erase(p);\n\t\ttree *pre=precursor(root,key);splay(root,pre);connect(p->son[1],pre,1);erase(p);\n\t}\n\tinline const int less(tree *&root,int key)\n\t{\n\t\ttree *now=root;int tot=0;\n\t\twhile (now!=null)\n\t\t\tif (key<now->val)now=now->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\ttot+=now->son[0]->size;\n\t\t\t\tif (now->val==key)return tot;\n\t\t\t\ttot+=now->cnt;\n\t\t\t\tnow=now->son[1];\n\t\t\t}\n\t\treturn tot;\n\t}\n}using namespace Splay;\nclass Segment_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tSplay::tree *root;\n\t\t\ttree *lson,*rson;\n\t\t\tinline const void update(int l,int r,int pos,int key)\n\t\t\t{\n\t\t\t\tDelete(root,last[pos]);\n\t\t\t\tinsert(root,key);\n\t\t\t\tif (l==r)return;\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\tif (pos<=mid)lson->update(l,mid,pos,key);\n\t\t\t\telse rson->update(mid+1,r,pos,key);\n\t\t\t}\n\t\t\tinline const int query(int l,int r,int L,int R)\n\t\t\t{\n\t\t\t\tif (l>R||r<L)return 0;\n\t\t\t\tif (l>=L&&r<=R)return less(root,L);\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\treturn lson->query(l,mid,L,R)+rson->query(mid+1,r,L,R);\n\t\t\t}\n\t\t}memory_pool[N<<2],*tail;\n\t\tinline const void init()\n\t\t{\n\t\t\ttail=memory_pool;\n\t\t}\n\t\tinline tree *spawn()\n\t\t{\n\t\t\ttree *p=tail++;\n\t\t\tp->root=null;\n\t\t\tp->lson=p->rson=NULL;\n\t\t\treturn p;\n\t\t}\n\tpublic:\n\t\ttree *root;\n\t\tinline Segment_Tree(){init();}\n\t\tinline const void build(tree *&p,int l,int r)\n\t\t{\n\t\t\tp=spawn();\n\t\t\tfor (int i=l;i<=r;i++)\n\t\t\t\tinsert(p->root,last[i]);\n\t\t\tif (l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(p->lson,l,mid);\n\t\t\tbuild(p->rson,mid+1,r);\n\t\t}\n}sgt;\ninline const void update(int x,int y)\n{\n\tint pos=l[x],c=id[col[x]],\n\t\tpre=precursor(root[c],pos)->val,\n\t\tnxt=successor(root[c],pos)->val;\n\tDelete(root[c],pos);col[x]=y;\n\tif (nxt)sgt.root->update(1,n,nxt,pre),last[nxt]=pre;\n\tif (id.find(y)==id.end())y=id[y]=++tot;\n\telse y=id[y];\n\tinsert(root[y],pos);\n    pre=precursor(root[y],pos)->val;\n    nxt=successor(root[y],pos)->val;\n    if (nxt)sgt.root->update(1,n,nxt,pos),last[nxt]=pos;\n    sgt.root->update(1,n,pos,pre);last[pos]=pre;\n}\ninline const int query(int x,int y)\n{\n\tfor (int i=K;i+1;i--)\n\t\tif (fa[x][i]&&w[fa[x][i]]<=y)\n\t\t\tx=fa[x][i];\n\treturn sgt.root->query(1,n,l[x],r[x]);\n}\nint main()\n{\n\tread(n);read(m);read(q);\n\tfor (int i=1;i<=n;i++)read(col[i]);\n\tfor (int i=1;i<=m;i++)\n\t\tread(e[i].x),read(e[i].y),read(e[i].z);\n\tkruskal();rebuild();renumber(rt);\n\tdfs(rt);dfs(rt,rt);getfa();init();\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint c=col[org[i]];\n\t\tif (id.find(c)==id.end())c=id[c]=++tot; //\u79bb\u6563\u989c\u8272\n\t\telse c=id[c];\n\t\tlast[i]=tmp[c];\n\t\tinsert(root[c],tmp[c]=i);\n\t}\n\tsgt.build(sgt.root,1,n);\n\tint opt,x,y;\n\twhile (q--)\n\t\tswitch (read(opt),read(x),read(y),opt)\n\t\t{\n\t\t\tcase 1:update(x,y);break;\n\t\t\tcase 2:printf(\"%d\\n\",w[lca(x,y)]);break;\n\t\t\tcase 3:printf(\"%d\\n\",query(x,y));break;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1548761151,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5168 \u3010xtq\u73a9\u9b54\u5854\u3011"
    }
]