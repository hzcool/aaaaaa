[
    {
        "content": "\u849f\u84bb\u7684\u8d85\u77ed\u9898\u89e3\n\n\u4e8b\u5b9e\u4e0a\u6ca1\u5fc5\u8981\u5199\u7ebf\u6bb5\u6811\uff0c\u53ea\u7528\u968f\u673a\u5316\u5c31\u884c\u4e86\uff0c\u6bcf\u6b21\u5728\u533a\u95f4\u91cc\u968f\u673a\u53d6k\u4e2a\u6570\uff0c\u7136\u540e\u7528\u5e73\u8861\u6811\u5224\u65ad\u662f\u5426\u5728\u533a\u95f4\u91cc\u51fa\u73b0\u6b21\u6570 \u8d85\u8fc7\u4e00\u534a\u5373\u53ef\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u4e00\u534a\u662f\u6570\u5b58\u5728\uff0c\u6ca1\u6709\u968f\u673a\u5230\u51fa\u73b0\u5927\u4e8e\u4e00\u534a\u6570\u7684\u6982\u7387 \u80af\u5b9a\u5c0f\u4e8e $\\frac{1}{2^k}$\n\n\u7a33\u59a5\u8d77\u89c1 k \u53d6 30\u6bd4\u8f83\u597d\n\n\u4f46\u662f\u672c\u9898\u7531\u4e8e\u6781\u5ea6\u5361\u5e38\uff0c\u6240\u4ee5\u8bf4\u8fd9\u6837\u53ef\u80fd\u4f1a\u88ab\u5361\n\n\u4f46\u662f\u4e8b\u5b9e\u4e0a\u7531\u4e8e\u8fd9\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u5f80\u5f80\u5927\u4e8e\u533a\u95f4\u4e00\u534a\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u6982\u7387\u662f\u8981\u5c0f\u4e8e $\\frac{1}{2^k}$\n\n\u6240\u4ee5\u5176\u5b9e$k$\u53d6\u5c0f\u4e00\u70b9\u662f\u53ef\u4ee5\u7684\n\n\u6211\u662f$k$\u53d6\u4e86$14$\uff0c\u7136\u540e\u5e73\u8861\u6811\u7528pb_ds\u5199\n\n\u7136\u540e\u5c31\u6210\u4e3a\u4e86\u672c\u9898\u6700\u77ed\u89e3\n\n```\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\n#define LL long long\n#define MAXN 500005\n\ntree<LL,null_type,less<LL>,rb_tree_tag,tree_order_statistics_node_update> s[MAXN];\nint n,m,an;\nint a[MAXN];\nint c[MAXN],d[MAXN],f[MAXN],nn,mm = 14;\nint p[MAXN];\nvoid rd() {\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i ++) {\n\t\tscanf(\"%d\",&a[i]);\n\t\ts[a[i]].insert(i); \n\t}\n}\n\nint qwq(int x,int l,int r) {\n\treturn s[x].order_of_key(r+1) - s[x].order_of_key(l); \n} \n\nint solve(int l,int r)\n{\n\tint n = r-l+1;\n\tfor(int i = 1; i <= mm; i ++)\n\t{\n\t\tint x = rand()%n+l;\n\t\tx = a[x];\n\t\tif(qwq(x,l,r) > (n>>1)) return x;\n\t}\n\treturn -1;\n\n}\n\nsigned main()\n{\n\trd();\n\tan = -1;\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tint l,r,k,ss;\n\t\tscanf(\"%d%d%d%d\",&l,&r,&ss,&k);\n\t\tfor(int j = 1; j <= k; j ++)\n\t\t\tscanf(\"%d\",&p[j]);\n\t\tint ans = solve(l,r);\n\t\t\n\t\tif(ans == -1) {\n\t\t\tans = ss;\n\t\t\tprintf(\"%d\\n\",ss);\n\t\t} else printf(\"%d\\n\",ans);\n\t\t\n\t\tfor(int j = 1; j <= k; j ++) {\n\t\t\ts[ a[p[j]] ].erase(p[j]);\n\t\t\ta[p[j]] = ans;\n\t\t\ts[ ans ].insert(p[j]);\n\t\t}\n\t}\n\tcout<<solve(1,n)<<\"\\n\";\n\treturn 0;\n } \n\n```",
        "postTime": 1561777283,
        "uid": 124721,
        "name": "Ynoi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "~~\u849f\u84bb\u7684\u8d85\u957f\u4ee3\u7801~~\n\n~~\u7406\u89e3\u5230\u4ee5\u540e \u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u5e73\u8861\u6811\u548c\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u800c\u5df2~~\n\n------------\n\n### \u524d\u7f6e\u6280\u80fd p2397 yyy loves Maths VI (mode)\n\n\u9898\u610f\u662f\u627en\u4e2a\u6570\u5185\u51fa\u73b0\u6b21\u6570\u5927\u4e8en/2\u7684\u6570 \u4fdd\u8bc1\u5b58\u5728\u8fd9\u4e2a\u6570\n\n\u7528\u7684\u65b9\u6cd5\u53eb\u505a**\u6469\u5c14\u6295\u7968\u6cd5**\n\n    \u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u6837\u4e00\u4e2a\u73b0\u8c61\uff1a \u5728\u4efb\u4f55\u6570\u7ec4\u4e2d\uff0c\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u8be5\u6570\u7ec4\u957f\u5ea6\u4e00\u534a\u7684\u503c\u53ea\u80fd\u6709\u4e00\u4e2a\u3002\n\n    \u6469\u5c14\u6295\u7968\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5728\u6bcf\u4e00\u8f6e\u6295\u7968\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u4e00\u5bf9\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u3002\n\n    \u8fd9\u6837\u4e0d\u65ad\u7684\u5220\u9664\u76f4\u5230\u65e0\u6cd5\u518d\u8fdb\u884c\u6295\u7968\uff0c\u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u8be5\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\u3002\u5982\u679c\u53ea\u5b58\u5728\u4e00\u79cd\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5143\u7d20\u5219\u53ef\u80fd\u4e3a\u76ee\u6807\u5143\u7d20\u3002\n\n\uff08\u6ce8\u610f\u8fd9\u4e2a\u53ef\u80fd ~~\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u4ee3\u7801\u957f\u5ea6\u7ffb\u4e00\u500d\u7684\u539f\u56e0~~\n\n\u4e0d\u61c2\uff1f\u4e0a\u4ee3\u7801\u4e00\u770b\u5c31\u61c2\u4e86\n\n```cpp\nint cnt=0,t=0;//t\u662f\u76ee\u524d\u627e\u5230\u7684\u4f17\u6570\nfor(int i=1;i<=n;i++)\n{\n\tint x;\n    scanf(\"%d\",&x);\n    if(cnt==0) t=x,cnt=1;\n    else \n    {\n    \tif(x!=t) cnt--;\n    \telse cnt++;\n\t}\n}\n```\n\n\u8fd9\u6837\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684 \u800c\u4e14\u8fde\u6570\u7ec4\u90fd\u4e0d\u7528\u5f00\n\n------------\n\n\u56de\u5230\u8fd9\u9053\u9898\n\n\u6709\u4e86\u8fd9\u4e2a\u524d\u7f6e\u6280\u80fd\u4ee5\u540e \u8fd9\u9053\u9898\u7684\u7b2c\u4e00\u4e2a\u601d\u8def\u5e94\u8be5\u5f88\u660e\u663e\u4e86\uff1a\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u7684cnt\u548c\u4f17\u6570\n\n\u4f46\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \u5fc5\u987b\u4fdd\u8bc1\u7ef4\u62a4\u7684\u4e1c\u897f\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\n\n\u663e\u7136\u6469\u5c14\u6295\u7968\u6cd5\u662f\u6709\u533a\u95f4\u53ef\u52a0\u6027\u7684\n\n\u5177\u4f53\u6765\u8bf4 \u5982\u679c\u4e24\u4e2a\u513f\u5b50\u7684\u4f17\u6570\u76f8\u540c \u8fd9\u4e2a\u8282\u70b9\u7684\u4f17\u6570\u5c31\u7b49\u4e8e\u513f\u5b50\u7684\u4f17\u6570 cnt\u5c31\u7b49\u4e8e\u4e24\u4e2a\u513f\u5b50\u7684cnt\u76f8\u52a0\n\n\u5982\u679c\u4e0d\u540c \u8fd9\u4e2a\u8282\u70b9\u7684\u4f17\u6570\u5c31\u7b49\u4e8ecnt\u8f83\u5927\u7684\u90a3\u4e2a\u513f\u5b50\u7684\u4f17\u6570 cnt\u5c31\u7b49\u4e8e\u5927\u7684\u51cf\u53bb\u5c0f\u7684\n\n\u5199\u6210\u4ee3\u7801\u4e5f\u5f88\u7b80\u5355\n\n```\nif(tree[ls].num==tree[rs].num) tree[id].num=tree[ls].num,tree[id].cnt=tree[ls].cnt+tree[rs].cnt;\nelse\n{\n\tif(tree[ls].cnt>=tree[rs].cnt) tree[id].cnt=tree[ls].cnt-tree[rs].cnt,tree[id].num=tree[ls].num;\n\telse tree[id].cnt=tree[rs].cnt-tree[ls].cnt,tree[id].num=tree[rs].num;\n}\n```\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\u4e00\u534a\u4e86\n\n------------\n\n\u76ee\u524d\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898 \u8fd9\u9053\u9898\u5e76\u4e0d\u4fdd\u8bc1\u6709\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u533a\u95f4\u7684\u4e00\u534a\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8d39\u5c3d\u5343\u8f9b\u4e07\u82e6\u627e\u5230\u7684\u4f17\u6570\u53ef\u80fd\u662f\u9519\u7684qwq\n\n\u8fd9\u91cc\u6ce8\u610f \u5982\u679c\u6709\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u533a\u95f4\u7684\u4e00\u534a\u7684\u8bdd \u627e\u5230\u7684\u8fd9\u4e2a\u6570\u4e00\u5b9a\u662f\u6b63\u786e\u7684 \u4f46\u662f~~\u51e1\u4e8b\u5c31\u6015\u4e07\u4e00~~\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u9a8c\u8bc1\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8e\u533a\u95f4\u7684\u957f\u5ea6\u9664\u4ee52\n\n\u8fd9\u91cc\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4 \u5176\u5b9e\u6211\u4e5f\u60f3\u8fc7\u7ebf\u6bb5\u6811 ~~\u5982\u679c\u70b9\u6570\u5c0f\u7684\u8bdd\u5e94\u8be5\u662f\u53ef\u4ee5\u7684 \u4f46\u662f\u6570\u636e\u8fa3\u4e48\u5927\u6211\u8fd8\u771f\u5199\u4e0d\u51fa\u6765~~\n\n\u5e73\u8861\u6811 \u52a8\u6001\u5f00\u70b9 \u52a0\u4e0ak\u603b\u5171<=10^6\u70b9\u6761\u4ef6 \u70b9\u662f\u80fd\u5f00\u4e0b\u7684\n\n\u600e\u4e48\u9a8c\u8bc1\u7b54\u6848\u5462\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4eba \u5f00\u4e00\u4e2a\u5e73\u8861\u6811 \u6811\u4e2d\u5b58\u7684\u662f**\u6240\u6709\u652f\u6301\u4ed6\u7684\u4eba\u7684\u7f16\u53f7**\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4l,r \u6211\u4eec\u8981\u6c42\u7684\u662f\u7f16\u53f7\u5728l~r\u4e4b\u95f4\u7684\u652f\u6301\u7f16\u53f7\u4e3ai\u7684\u4eba\u7684\u6570\u91cf\n\n\u90a3\u4e48\u7528\u5e73\u8861\u6811\u627e\u5230\u7f16\u53f7\u5c0f\u4e8e\u7b49\u4e8er\u7684\u4eba\u4e2d\u652f\u6301i\u7684\u4eba\u7684\u6570\u91cf \u518d\u627e\u5230\u7f16\u53f7\u5c0f\u4e8e\u7b49\u4e8el-1\u7684\u4eba \u76f8\u51cf\u5c31\u53ef\u4ee5\u4e86\n\n\u600e\u4e48\u627e\u5462 \u56e0\u4e3a\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570 \u5176\u5b9e\u5c31\u662f\u627e\u4e00\u4e2a\u6570\u7684\u6392\u540d\u5566\n\n------------\n\u6240\u4ee5\u8fd9\u9053\u9898\u7684\u4e3b\u8981\u601d\u8def\u5c31\u662f\u8fd9\u6837\u4e86\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n\n\u9996\u5148\u9884\u5904\u7406 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4eba\u5efa\u4e00\u68f5\u5e73\u8861\u6811 \u4e5f\u5c31\u662f\u5728a[i]\u8fd9\u68f5\u5e73\u8861\u6811\u4e2d\u52a0\u5165i\u8fd9\u4e2a\u70b9 \u8868\u793ai\u8fd9\u4e2a\u4eba\u652f\u6301a[i] \u7136\u540e\u5efa\u597d\u7ebf\u6bb5\u6811\n\n\u7136\u540e\u5904\u7406\u8be2\u95ee \u5148\u5728\u7ebf\u6bb5\u6811\u4e2d\u627e\u5230\u533a\u95f4l,r\u4e2d\u53ef\u80fd\u662f\u4f17\u6570\u7684\u90a3\u4e2a\u7f16\u53f7x \u7136\u540e\u5728\u5e73\u8861\u6811\u4e2d\u9a8c\u8bc1x\u5728\u533a\u95f4l,r\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u5927\u4e8e(r-l+1) \u5982\u679c\u5927\u4e8e \u5c31\u628as\u66ff\u6362\u6210x\n\n\u7136\u540e\u4fee\u6539 \u8981\u4fee\u6539\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9 \u5728\u539f\u6765i\u652f\u6301\u7684\u4eba\u7684\u90a3\u68f5\u5e73\u8861\u6811\u4e2d\u5220\u53bbi \u5728\u73b0\u5728i\u652f\u6301\u7684\u4eba\u7684\u5e73\u8861\u6811\u4e2d\u52a0\u4e0ai\u8fd9\u4e2a\u70b9\n\n\u6700\u540e\u7684\u5904\u7406\u548c\u4e2d\u95f4\u4e5f\u662f\u4e00\u6837\u7684\n\n------------\n\n\n\u7136\u540e\u5c31\u4e0a\u4ee3\u7801\u5566 \u7801\u91cf\u8d85\u5927 \u56e0\u4e3a\u6253\u4e86\u4e00\u68f5\u7ebf\u6bb5\u6811 \u4e00\u68f5\u5e73\u8861\u6811 \u4e3a\u4e86\u65b9\u4fbf \u5c01\u88c5\u4e86\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811 \u56e0\u4e3a\u559c\u6b22splay\u6253\u7684splay\u4ee5\u81f3\u4e8e\u8dd1\u7684\u975e\u5e38\u6162\n\n\u8981\u5efa\u5f88\u591a\u68f5\u6811\u7684\u8bdd \u8fd8\u662f\u5c01\u88c5\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u601d\u8def\u5982\u679c\u7406\u6e05\u695a\u4e86\u5c31\u4e0d\u7b97\u96be \u4f46\u662f\u8981\u6709\u524d\u7f6e\u77e5\u8bc6\u8fd8\u8981\u6253\u5bf9\u4e24\u68f5\u6811 \u5728\u8003\u573a\u4e0a\u8fd8\u662f\u5f88\u6709\u96be\u5ea6\n\n```\n#include<bits/stdc++.h>\n#define ls id<<1\n#define rs id<<1|1\n#define inf 0x7f7f7f7f\nusing namespace std;\nint k,aa[5000010];\n\nstruct xd_node\n{\n    int l,r;\n    int cnt,num;//\u548c\u627e\u4f17\u6570\u90a3\u9053\u9898\u4e00\u6837 \u7ef4\u62a4\u4e00\u4e2acnt\u548c\u4f17\u6570\u7684\u5e8f\u53f7 \n}tree[5000010];\nstruct xd_tree\n{\n    void change(int id)\n    {\n        if(tree[ls].num==tree[rs].num) tree[id].num=tree[ls].num,tree[id].cnt=tree[ls].cnt+tree[rs].cnt;\n        else\n        {\n            if(tree[ls].cnt>=tree[rs].cnt) tree[id].cnt=tree[ls].cnt-tree[rs].cnt,tree[id].num=tree[ls].num;\n            else tree[id].cnt=tree[rs].cnt-tree[ls].cnt,tree[id].num=tree[rs].num;\n        }\n    }\n    void build(int id,int l,int r)\n    {\n        tree[id].l=l; tree[id].r=r;\n        if(l==r)\n        {\n            tree[id].cnt=1;\n            tree[id].num=aa[l];\n            return;\n        }\n        int mid=(l+r)>>1;\n        build(ls,l,mid); build(rs,mid+1,r);\n        change(id);\n    }\n    void updata(int id,int pos,int w)\n    {\n        if(tree[id].l==pos&&tree[id].r==pos)\n        {\n            tree[id].num=w;\n            tree[id].cnt=1;\n            return;\n        }\n        int mid=(tree[id].l+tree[id].r)>>1;\n        if(mid>=pos) updata(ls,pos,w);\n        else updata(rs,pos,w);\n        change(id);\n    }\n    xd_node search(int id,int l,int r)\n    {\n        if(tree[id].l==l&&tree[id].r==r) return tree[id];\n        int mid=(tree[id].l+tree[id].r)>>1;\n        if(mid>=r) return search(ls,l,r);\n        else if(mid<l) return search(rs,l,r);\n        else\n        {\n            xd_node a=search(ls,l,mid),b=search(rs,mid+1,r),c;\n            if(a.num==b.num) c.num=a.num,c.cnt=a.cnt+b.cnt;\n            else\n            {\n                if(a.cnt>=b.cnt) c.cnt=a.cnt-b.cnt,c.num=a.num;\n                else c.cnt=b.cnt-a.cnt,c.num=b.num;\n            }\n            return c;\n        }\n    }\n}a;\n\nstruct splay_node\n{\n    int fa,ch[2],w,size;\n}t[5000010];//splay\u8282\u70b9\u53ef\u4ee5\u516c\u7528 \u8282\u70b9\u6570\u8981\u5f00\u5f88\u5927 \nstruct splay_tree\n{\n    int root;\n    void updata(int x)\n    {\n        t[x].size=t[t[x].ch[0]].size+t[t[x].ch[1]].size+1;\n    }\n    void rotate(int x)\n    {\n        int y=t[x].fa; int z=t[y].fa;\n        int f=x==t[y].ch[1];\n        t[z].ch[y==t[z].ch[1]]=x; t[x].fa=z;\n        t[y].ch[f]=t[x].ch[f^1]; t[t[x].ch[f^1]].fa=y;\n        t[x].ch[f^1]=y; t[y].fa=x;\n        updata(y); updata(x);\n    }\n    void splay(int x,int goal)\n    {\n        while(t[x].fa!=goal)\n        {\n            int y=t[x].fa;\n            int z=t[y].fa;\n            if(z==goal) rotate(x);\n            else\n            {\n                if((t[z].ch[0]==y)^(t[y].ch[0]==x)) rotate(x); \n                else rotate(y);\n                rotate(x);\n            }\n        }\n        if(goal==0) root=x;\n    }\n    void find(int x)\n    {\n        int id=root; if(!id) return ;\n        while(t[id].ch[x>t[id].w]&&t[id].w!=x) id=t[id].ch[x>t[id].w];\n        splay(id,0);\n    }\n    int next(int x,int f)\n    {\n        find(x); int id=root;\n        if((t[id].w>x&&f==1)||(t[id].w<x&&f==0)) return id;\n        id=t[id].ch[f];\n        while(t[id].ch[f^1]) id=t[id].ch[f^1];\n        return id;\n    }\n    void adde(int x)\n    {\n        int id=root,fa=0;\n        while(id) t[id].size++,fa=id,id=t[id].ch[x>t[id].w];\n        t[++k].w=x; if(fa) t[fa].ch[x>t[fa].w]=k;\n        t[k].fa=fa; t[k].size=1; splay(k,0);\n    }\n    void del(int x)\n    {\n        int qq=next(x,0),hj=next(x,1);\n        splay(qq,0); splay(hj,qq);\n        t[hj].ch[0]=0; updata(hj); updata(qq);\n    }\n    int get(int x)//\u627e\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6570 \u5c31\u662f\u627ex\u7684\u6392\u540d \u56e0\u4e3a\u6709\u4e2a-inf\u7684\u70b9 \u6240\u4ee5-1 \u53c8\u56e0\u4e3aans\u53ea\u52a0\u4e86\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u6ca1\u6709\u52a0\u4e0ax\u8fd9\u4e2a\u6570 \u6240\u4ee5\u76f4\u63a5\u8fd4\u56deans\n    {\n        find(x); if(t[root].w!=x) x=t[next(x,0)].w;//\u5982\u679c\u4e0d\u5b58\u5728x\u8fd9\u4e2a\u70b9 \u627ex\u7684\u524d\u9a71 \n        int id=root,ans=0;\n        while(1)\n        {\n            if(t[id].w>x) id=t[id].ch[0];\n            else if(t[id].w==x) \n            {\n                ans+=t[t[id].ch[0]].size;\n                splay(id,0);\n                return ans;\n            }\n            else\n            {\n                ans+=t[t[id].ch[0]].size+1;\n                id=t[id].ch[1];\n            }\n        }\n    }\n}b[500010];//\u5bf9\u6bcf\u4e2a\u4eba\u5efa\u4e00\u68f5splay \u5b58\u50a8\u652f\u6301\u4ed6\u7684\u4eba \n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) b[i].adde(-inf),b[i].adde(inf);//\u5e73\u8861\u6811\u521d\u59cb\u5316 \n    for(int i=1;i<=n;i++) scanf(\"%d\",&aa[i]),b[aa[i]].adde(i);\n    a.build(1,1,n);//\u7ebf\u6bb5\u6811\u521d\u59cb\u5316 \n    for(int i=1;i<=m;i++)\n    {\n        int l,r,s,q;\n        scanf(\"%d%d%d%d\",&l,&r,&s,&q);\n        int x=a.search(1,l,r).num;//x\u662f\u6700\u6709\u53ef\u80fd\u662f\u533a\u95f4\u4f17\u6570\u7684\u4eba \n        int sum=b[x].get(r)-b[x].get(l-1);//\u5bfb\u627el~r\u533a\u95f4\u5185\u652f\u6301x\u7684\u4eba\u7684\u4e2a\u6570 \n        if(sum>(r-l+1)/2) s=x;//\u5982\u679c\u8fd9\u4e2a\u4eba\u6570\u8d85\u8fc7\u4e86\u533a\u95f4\u7684\u4e00\u534a \n        for(int i=1;i<=q;i++)\n        {\n            scanf(\"%d\",&x);\n            a.updata(1,x,s);//\u628ax\u652f\u6301\u7684\u4eba\u53d8\u6210s \n            b[aa[x]].del(x); aa[x]=s;\n            b[aa[x]].adde(x); \n        }\n        printf(\"%d\\n\",s);\n    }\n    int x=a.search(1,1,n).num;\n    int sum=b[x].get(n);\n    if(sum>n/2) printf(\"%d\",x);\n    else printf(\"-1\");\n    return 0;\n}\n```\n",
        "postTime": 1538055938,
        "uid": 85691,
        "name": "LengChu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6b63\u89e3\u662f\u201c\u6469\u5c14\u6295\u7968\u6cd5\u201d\uff0c\u4e5f\u6709\u968f\u673a\u5316\u7684\u671f\u671b\u6b63\u786e\u505a\u6cd5\uff0c\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff0c\u751a\u81f3\u8fbe\u5230\u4e86\u6700\u4f18\u89e3\u8fdc\u8d85\u6b21\u4f18\u89e3\u7684\u795e\u5947\u529f\u6548\uff01\u63d0\u4f9b\u4e00\u4e2a\u5f88\u597d\u7684\u5199\u6cd5\uff08\u5e76\u4e0d\u80fd\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u4f46\u601d\u8def\u4e00\u6837\uff09\u3002\n\n\u7b97\u6cd5\u590d\u6742\u5ea6\uff1a$O(m\\sqrt{n\\log_2 n}+\\sum k\\log_2 n)$\n\n\u600e\u4e48\u6839\u53f7\u5206\u6cbb\uff1f\u8bbe\u5757\u957f\u4e3a $K$\uff0c\u5f53\u8be2\u95ee\u957f\u5ea6\u5728 $K$ \u4ee5\u5185\u65f6\uff0c\u6211\u4eec\u66b4\u529b\u6c42\u4f17\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(K)$\uff0c\u5426\u5219\uff0c\u7531\u4e8e\u4f17\u6570\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7 $\\frac{K}{2}$\uff0c\u8fd9\u6837\u7684\u6570\u4e00\u5b9a\u4e0d\u8d85\u8fc7 $\\frac{2n}{K}$ \u4e2a\uff0c\u6c42\u6bcf\u4e00\u4e2a\u6570\u5b57\u5728 $[l,r]$ \u51fa\u73b0\u6b21\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2 n)$ \u5355\u6b21\u4fee\u6539\u53ea\u9700\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m(K+\\frac{n\\log_2 n)}{K})+k\\log_2 n)$ \u5f53 $K=\\sqrt{n\\log_2 n}$ \u6700\u4f18\uff0c\u4e3a $O(m\\sqrt{n\\log_2 n}+\\sum k\\log_2 n)$.\n\n\u4ee3\u7801\u5f88\u597d\u5b9e\u73b0\uff1a\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\nconst int N=5e5+4,M=2e6+6,D=1000;\nchar buf[M+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,M,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n    int an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n    do an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n}\ntree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>tr[N];\nvector<int>cd,wp;\n#define Up(a,b) upper_bound(a.begin(),a.end(),b)\n#define Lw(a,b) lower_bound(a.begin(),a.end(),b)\ninline void Ins(int x){\n\tcd.insert(Up(cd,x),x);\n}\ninline void Del(int x){\n\tcd.erase(Lw(cd,x));\n}\nint n,m,k,a[N],cnt[N];\nint main(){\n\tint i,x,l,r,cs,b;n=read(),m=read();\n\tfor(i=1;i<=n;++i){\n\t\ttr[a[i]=read()].insert(i);\n\t\tif(tr[a[i]].size()==D+1)Ins(a[i]);\n\t}\n\tfor(i=1;i<=m;++i){\n\t\tl=read(),r=read(),cs=read(),b=r-l+1>>1;\n\t\tif(r-l<=D+D+5){\n\t\t\tfor(x=l;x<=r;++x)\n\t\t\t\tif(++cnt[a[x]]>b){\n\t\t\t\t\tcs=a[x];break;\n\t\t\t\t}\n\t\t\tfor(x=l;x<=r;++x)cnt[a[x]]=0;\n\t\t}else{\n\t\t\tfor(int x:cd)\n\t\t\t\tif(tr[x].order_of_key(r+1)-tr[x].order_of_key(l)>b){\n\t\t\t\t\tcs=x;break;\n\t\t\t\t}\n\t\t}printf(\"%d\\n\",cs);\n\t\tfor(k=read();k;--k){\n\t\t\tx=read();tr[a[x]].erase(x);\n\t\t\tif(tr[a[x]].size()==D)Del(a[x]);\n\t\t\ttr[a[x]=cs].insert(x);\n\t\t\tif(tr[a[x]].size()==D+1)Ins(cs);\n\t\t}\n\t}cs=-1,b=n>>1;\n\tfor(x=1;x<=n;++x)\n\t\tif(tr[x].size()>b)cs=x;\n\tprintf(\"%d\\n\",cs);\n\treturn 0;\n}\n```",
        "postTime": 1646744649,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u6839\u53f7\u5206\u6cbb\u8fdb\u9636"
    },
    {
        "content": "\u6b63\u89e3\u505a\u6cd5\u597d\u5f3a\u554a\uff0c\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\u4e86\u66b4\u529bO(n)\u505a\u6cd5\u3002\n\n\u4e5f\u5c31\u662fbzoj\u90a3\u9053\u9898(\u540d\u5b57\u6211\u5fd8\u4e86..)\u3002\n\n\u6211\u7684\u505a\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4>\u4e00\u534a\u7684\u90a3\u4e2a\u6570mx[i]\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8be2\u95ee\u533a\u95f4\u88ab\u5206\u6210\u4e86log\u4e2a\u533a\u95f4\uff0c\u800c\u7b54\u6848\u4e00\u5b9a\u662f\u5176\u4e2d\u7684\u4e00\u4e2amx[i]\uff0c\n\n\u5426\u5219\u4ed6\u5728\u6240\u6709\u533a\u95f4\u90fd<=\u4e00\u534a\uff0c\u663e\u7136\u5728\u5927\u533a\u95f4\u4e5f<=\u4e00\u534a\u3002\n\n\u68c0\u9a8c\u65f6\u4e5f\u662f\u5bf9\u6bcf\u4e2a\u6743\u503c\u5f00\u4e2a\u5e73\u8861\u6811\u3002\n\n\u65f6\u95f4O(nlog^2)\n\n```cpp\n#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n#define ll long long\n\n#define gc getchar()\nint read()\n{\n    char ch;\n    while((ch=gc)<'0');\n    int x=ch-'0';\n    while((ch=gc)>='0')x=x*10+ch-'0';\n    return x;\n}\n\ntypedef\n__gnu_pbds::\ntree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> \nTree;\n\nconst int N=500005;\nTree T[N];\n\nint n;\n\nvoid add(int x,int y)\n{\n    T[x].insert(y);\n}\nvoid del(int x,int y)\n{\n    T[x].erase(y);\n}\nint qiu(int x,int y)\n{\n    return T[x].order_of_key(y);\n}\n\nint a[N],mx[N*4];\nint dy[N];\n#define mid (l+r>>1)\n#define cl (k*2)\n#define cr (cl+1)\nint L[N*4],R[N*4];\nint Count(int x,int l,int r)\n{\n    if(r-l<=20)\n    {\n        int ans=0;\n        for(;l<=r;++l)\n        if(a[l]==x)++ans;\n        return ans;\n    }\n    return qiu(x,r+1)-qiu(x,l);\n}\nvoid up(int k)\n{\n    int l=L[k],r=R[k];\n    if(mx[cl])\n    if(Count(mx[cl],l,r)*2>r-l+1) {mx[k]=mx[cl];return ;}\n    if(mx[cr])\n    if(Count(mx[cr],l,r)*2>r-l+1) {mx[k]=mx[cr];return ;}\n    mx[k]=0;\n}\nvoid init(int k,int l,int r)\n{\n    L[k]=l;R[k]=r;\n    if(l==r) \n    { \n      dy[l]=k; \n      add(mx[k]=a[l]=read(),l); \n      return ;\n    }\n    init(cl,l,mid);init(cr,mid+1,r);\n    up(k);\n}\n\nint ql,qr,ans;\nvoid modify()\n{\n    int x=read();\n    if(a[x]==ans)return ;\n    del(a[x],x);add(a[x]=ans,x);\n    int k=dy[x];\n    mx[k]=ans;\n    while(k>>=1)up(k);\n}\nbool qiu(int k,int l,int r)\n{\n    if(ql<=l&&qr>=r)\n    {\n        if(mx[k])\n        {\n            if(Count(mx[k],ql,qr)*2>qr-ql+1) {ans=mx[k];return 1;}\n        }\n        return 0;\n    }\n    if(ql<=mid)if(qiu(cl,l,mid))return 1;\n    if(qr>mid)if(qiu(cr,mid+1,r))return 1;\n    return 0;\n}\n\nint main()\n{\n\n    n=read();int m=read();\n    init(1,1,n);\n    \n    while(m--)\n    {\n        ql=read();qr=read();\n        \n        if(!qiu(1,1,n))ans=read();\n        else read();\n        printf(\"%d\\n\",ans);\n        \n        int k=read();\n        while(k--) modify();\n    }\n    \n    if(mx[1]) printf(\"%d\\n\",mx[1]);\n    else puts(\"-1\");\n}\n```",
        "postTime": 1494324378,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3765)\n\n\u8003\u8651\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u4eba\u5728\u4e00\u4e2a\u533a\u95f4\u4e2d\u5360\u6709\u8d85\u8fc7\u4e00\u534a\u7684\u7968\u6570\uff0c\u90a3\u4e48\u628a\u8fd9\u4e2a\u533a\u95f4\u5206\u6210\u4efb\u610f\u4e24\u4e2a\uff0c\u4ed6\u80af\u5b9a\u5728\u81f3\u5c11\u4e00\u4e2a\u533a\u95f4\u4e2d\u5360\u6709\u8d85\u8fc7\u4e00\u534a\u7684\u7968\u6570\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u4e86\uff0c\u90a3\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u7528\u5e73\u8861\u6811\u67e5\u8be2\u4e00\u4e2a\u4eba\u5728\u7ed9\u5b9a\u533a\u95f4\u5185\u5360\u6709\u591a\u5c11\u7968\u3002\n\n\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u6539\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <algorithm>\n\nint root[500001],lson[500001],rson[500001],size[500001],pri[500001],n,m,num[500001],l,r,s,k;\nvoid pushup(int x){size[x]=size[lson[x]]+size[rson[x]]+1;}\nvoid split(int now,int k,int &x,int &y){\n    if(!now)x=y=0;\n    else{\n        if(now<=k)x=now,split(rson[now],k,rson[x],y);\n        else y=now,split(lson[now],k,x,lson[y]);\n        pushup(now);\n    }\n}\nint merge(int x,int y){\n    if(!x||!y)return x^y;\n    if(pri[x]<pri[y]){\n        rson[x]=merge(rson[x],y);\n        pushup(x);\n        return x;\n    }\n    else{\n        lson[y]=merge(x,lson[y]);\n        pushup(y);\n        return y;\n    }\n}\nint mx[4000001];\nint check(int col,int l,int r){\n    int t1,t2,t3,t4,ans;\n    split(root[col],l-1,t1,t2);\n    split(t2,r,t3,t4);\n    ans=size[t3];\n    root[col]=merge(merge(t1,t3),t4);\n    return ans;\n}\nint query(int root,int l,int r,int el,int er){\n    if(el<=l&&er>=r)return mx[root];\n    int mid=(l+r)>>1;\n    if(mid>=er)return query(root<<1,l,mid,el,er);\n    else if(mid<el)return query(root<<1|1,mid+1,r,el,er);\n    int col1=query(root<<1,l,mid,el,er),col2=query(root<<1|1,mid+1,r,el,er);\n    int L=std::max(l,el),R=std::min(r,er);\n    if(check(col1,L,R)>(R-L+1)/2)return col1;\n    else if(check(col2,L,R)>(R-L+1)/2)return col2;\n    return -1;\n}\nvoid modify(int root,int l,int r,int e){\n    if(l==r){\n        mx[root]=num[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(mid>=e)modify(root<<1,l,mid,e);\n    else modify(root<<1|1,mid+1,r,e);\n    int col1=mx[root<<1],col2=mx[root<<1|1];\n    if(check(col1,l,r)>(r-l+1)/2)mx[root]=col1;\n    else if(check(col2,l,r)>(r-l+1)/2)mx[root]=col2;\n    else mx[root]=-1;\n}\nvoid build(int root,int l,int r){\n    if(l==r){\n        mx[root]=num[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(root<<1,l,mid);\n    build(root<<1|1,mid+1,r);\n    int col1=mx[root<<1],col2=mx[root<<1|1];\n    if(check(col1,l,r)>(r-l+1)/2)mx[root]=col1;\n    else if(check(col2,l,r)>(r-l+1)/2)mx[root]=col2;\n    else mx[root]=-1;\n}\nint read()\n{\n    register char c;register int x=0;register bool flag=0;\n    while(c<'0'||c>'9') (c=='-')&&(flag=1),c=getchar();\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    (flag)&&(x=-x);\n    return x;\n}\nint main(){\n    n=read(),m=read();\n    srand(432567356);\n    for(int i=1,tem;i<=n;i++){\n        tem=read();\n        pri[i]=rand()%1278943;\n        if(!root[tem])root[tem]=i;\n        else root[tem]=merge(root[tem],i);\n        num[i]=tem;\n    }\n    build(1,1,n);\n    for(int i=1;i<=m;i++){\n        l=read(),r=read(),s=read(),k=read();\n        int ans=query(1,1,n,l,r);\n        if(ans==-1)ans=s;\n        for(int j=1,tem;j<=k;j++){\n            tem=read();\n            if(num[tem]!=ans){\n                int t1,t2,t3,t4;\n                split(root[num[tem]],tem,t1,t2);\n                split(t1,tem-1,t3,t4);\n                root[num[tem]]=merge(t3,t2);\n                split(root[ans],tem,t1,t2);\n                root[ans]=merge(merge(t1,tem),t2);\n                num[tem]=ans;\n                modify(1,1,n,tem);\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    printf(\"%d\\n\",mx[1]);\n}\n```",
        "postTime": 1537705606,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3765 \u603b\u7edf\u9009\u4e3e"
    },
    {
        "content": "\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\u3002\n\n### Part.1\n\n\u4e00\u5f00\u59cb\u62ff\u5230\u8fd9\u9053\u9898\u4e00\u770b\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u533a\u95f4\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u8fd9\u4e2a\u663e\u7136\u6ca1\u6cd5\u505a\uff0c\u636e\u6211\u6240\u77e5\u53ea\u6709\u9759\u6001\u5206\u5757\u6216\u8005\u56de\u6eda\u83ab\u961f\u53ef\u4ee5\u505a\u4e0d\u5e26\u4fee\u7248\u672c\u7684\uff0c\u4f46\u662f\u4ed6\u8981\u6211\u4eec\u6c42\u7684\u6bd4\u8fd9\u4e2a\u8981\u5f31\u8bb8\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u663e\u7136\u5982\u679c\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\uff0c\u6211\u4eec\u8ba9\u5b83\u4e0e\u5269\u4e0b\u7684\u6570\u4e24\u4e24\u62b5\u6d88\uff0c\u5269\u4e0b\u7684\u6570\u5fc5\u7136\u53ea\u6709\u5b83\u81ea\u5df1\u3002\u66f4\u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u533a\u95f4\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\uff0c\u6211\u4eec\u4efb\u610f\u9009\u4e0d\u540c\u7684\u4e24\u4e2a\u6570\u62b5\u6d88\uff0c\u5269\u4e0b\u7684\u5fc5\u7136\u662f\u90a3\u4e2a\u6570\u3002\n\n\u6211\u4eec\u7528\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u8003\u8651\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5979\u7ef4\u62a4\u533a\u95f4\u4e2d\u4e24\u4e24\u62b5\u6d88\u8fd8\u5269\u54ea\u4e2a\u6570\u4ee5\u53ca\u8fd8\u5269\u591a\u5c11\u3002\u5979\u7684\u5de6\u53f3\u513f\u5b50\u4fe1\u606f\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u770b\u4e24\u4e2a\u513f\u5b50\u5269\u4e0b\u7684\u6570\u662f\u5426\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\u5c31\u76f8\u52a0\uff0c\u5982\u679c\u4e0d\u4e00\u6837\u5c31\u53d6\u6700\u5927\uff0c\u7136\u540e\u4e92\u76f8\u62b5\u6d88\u3002\n\n### Part.2\n\n\u7136\u540e\uff0c\u4f60\u4ee5\u4e3a\u505a\u5b8c\u4e86\uff1f\n\n\u5982\u679c\u771f\u505a\u5b8c\u4e86\u90a3\u4e48\u5b83\u6700\u591a\u662f\u7eff\u9898\u3002\n\n\u6211\u4eec\u521a\u624d\u5047\u8bbe\u4e86\u533a\u95f4\u7edd\u5bf9\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u5982\u679c\u533a\u95f4\u4e0d\u6ee1\u8db3\u6761\u4ef6\u5462\uff1f~~\u66b4\u529b\u627e~~\n\n\u4e00\u4e2a\u663e\u7136\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u603b\u7edf\u5efa\u4e00\u4e2a$vector$\uff0c\u6bcf\u6b21\u627e\u51fa\u7b54\u6848\u540e\u518d$vector$\u4e2d\u4e8c\u5206\u8be2\u95ee\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u770b\u4e2d\u95f4\u6570\u7684\u4e2a\u6570\u662f\u5426\u5927\u4e8e$len/2$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u800c\u9898\u76ee\u4e2d\u6709\u4fee\u6539\u3002~~\u66b4\u529b\u4fee\u6539~~\n\n\u4e8e\u662f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8981\u652f\u6301\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u67e5\u8be2\u67d0\u4e2a\u6570\u7684\u6392\u540d\uff08\u76f8\u5f53\u4e0e\u4e8c\u5206\uff09\n\n\u8fd9\u662f\u4ec0\u4e48\uff1f\u5e73\u8861\u6811\u677f\u5b50\u3002\n\n\u7136\u540e\uff0c\u7136\u540e\u5c31\u771f\u7684\u5b8c\u4e86\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u6bcf\u6b21\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u51fa\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u518d\u5728\u5e73\u8861\u6811\u4e0a\u627e\u51fa\u533a\u95f4\u4e2d\u8be5\u6570\u7684\u4e2a\u6570\u68c0\u67e5\u662f\u5426\u5408\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n#### Part.3\n\n\u5b89\u5229\u4e00\u4e0b$LeafyTree$\uff0c\u5373$WBLT$\uff0c\u5979\u7684\u5f62\u6001\u4e0e\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\uff0c\u5e38\u6570\u5c0f\u8dd1\u7684\u98de\u5feb\uff0c\u4e00\u822c\u6bd4$Splay$\u6216$FHQTreap$\u5feb\u4e24\u5230\u4e09\u500d\u3002\n\n\u6700\u540e\u4e00\u4e2a\u7ec6\u8282\uff0c\u5728\u627e\u6392\u540d\u7684\u65f6\u5019\uff0c\u4e00\u8def\u8d70\u5230\u53f6\u5b50\u540e\u4e00\u5b9a\u8981\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6570\u662f\u4e0d\u662f\u6bd4\u53f6\u5b50\u5927\uff0c\u5982\u679c\u5c0f\u8981$return\\;0$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u53ef\u80fd\u6bd4\u5e73\u8861\u6811\u4e2d\u7684\u6240\u6709\u6570\u90fd\u5c0f\u3002\n\n### Code\n\n```cpp\nstruct Node\n{\n    int siz,val;\n    Node *lc,*rc;\n    Node(int siz,int val,Node *lc,Node *rc) : siz(siz),val(val),lc(lc),rc(rc) {}\n    Node() {}\n}*null,*stk[maxn*3],utk[maxn*3];\nint utot,a[maxn],n;\n\nstruct Leafy_Tree\n{\n    Node *rt[maxn];\n    #define newnode(a,b,c,d) (&(*stk[utot++]=Node(a,b,c,d)))\n    #define merge(a,b) newnode(a->siz+b->siz,b->val,a,b)\n    inline void init()\n    {\n        for(int i=1;i<=n;++i)\n            rt[i]=newnode(1,0x3f3f3f3f,null,null);\n    }\n    inline void rotate(Node *u)\n    {\n        if(u->lc->siz > u->rc->siz*ratio)\n            u->rc=merge(u->lc->rc,u->rc),stk[--utot]=u->lc,u->lc=u->lc->lc;\n        else if(u->rc->siz > u->lc->siz*ratio)\n            u->lc=merge(u->lc,u->rc->lc),stk[--utot]=u->rc,u->rc=u->rc->rc;\n    }\n    inline void pushup(Node *u)\n    {\n        if(!u->lc->siz) return;\n        u->siz=u->lc->siz+u->rc->siz;\n        u->val=u->rc->val;\n    }\n    inline void insert(Node *u,int val)\n    {\n        if(u->siz==1)\n        {\n            u->lc=newnode(1,min(u->val,val),null,null);\n            u->rc=newnode(1,max(u->val,val),null,null);\n        }\n        else insert(val > u->lc->val?u->rc:u->lc,val);\n        pushup(u);rotate(u);\n    }\n    inline void erase(Node *u,int val)\n    {\n        if(u->lc->siz==1&&u->lc->val==val)\n            stk[--utot]=u->lc,stk[--utot]=u->rc,*u=*u->rc;\n        else if(u->rc->siz==1&&u->rc->val==val)\n            stk[--utot]=u->lc,stk[--utot]=u->rc,*u=*u->lc;\n        else erase(val > u->lc->val?u->rc:u->lc,val);\n        pushup(u);rotate(u);\n    }\n    inline int rnk(Node *u,int val)\n    {\n        if(u->siz==1) return val>=u->val;\n        return val > u->lc->val ? rnk(u->rc,val)+u->lc->siz : rnk(u->lc,val);\n    }\n}leafy;\n\nstruct Segment_Tree\n{\n    int mx[maxn],cnt[maxn];\n    inline void pushup(int u)\n    {\n        if(mx[u<<1]==mx[u<<1|1]) mx[u]=mx[u<<1],cnt[u]=cnt[u<<1]+cnt[u<<1|1];\n        else if(cnt[u<<1]>cnt[u<<1|1]) mx[u]=mx[u<<1],cnt[u]=cnt[u<<1]-cnt[u<<1|1];\n        else mx[u]=mx[u<<1|1],cnt[u]=cnt[u<<1|1]-cnt[u<<1];\n    }\n    inline void build(int u,int l,int r)\n    {\n        if(l==r) {mx[u]=a[l],cnt[u]=1;return;}\n        int mid=(l+r)>>1;\n        build(u<<1,l,mid);build(u<<1|1,mid+1,r);\n        pushup(u);\n    }\n    inline void modify(int u,int l,int r,int x,int val)\n    {\n        if(l==r) {mx[u]=val;return;}\n        int mid=(l+r)>>1;\n        if(x<=mid) modify(u<<1,l,mid,x,val);\n        else modify(u<<1|1,mid+1,r,x,val);\n        pushup(u);\n    }\n    inline pii query(int u,int l,int r,int x,int y)\n    {\n        if(x<=l&&r<=y) return make_pair(mx[u],cnt[u]);\n        int mid=(l+r)>>1;\n        if(y<=mid) return query(u<<1,l,mid,x,y);\n        else if(x>mid) return query(u<<1|1,mid+1,r,x,y);\n        else\n        {\n            pii a=query(u<<1,l,mid,x,y),b=query(u<<1|1,mid+1,r,x,y),c;\n            if(a.first==b.first) c.first=a.first,c.second=a.second+b.second;\n            else if(a.second>b.second) c.first=a.first,c.second=a.second-b.second;\n            else c.first=b.first,c.second=b.second-a.second;\n            return c;\n        }\n    }\n}seg;\n\ninline void modify(int x,int val)\n{\n    leafy.erase(leafy.rt[a[x]],x);\n    leafy.insert(leafy.rt[val],x);\n    seg.modify(1,1,n,x,val);\n    a[x]=val;\n}\n\ninline int query(int x,int y)\n{\n    int ans=seg.query(1,1,n,x,y).first;\n    if(((y-x+1)>>1)<leafy.rnk(leafy.rt[ans],y)-leafy.rnk(leafy.rt[ans],x-1)) return ans;\n    else return -1;\n}\n\ntemplate<typename T>\ninline void read(T &x)\n{\n    char c;int f=1;\n    while(!isdigit(c=getchar())) (c=='-')&&(f=-1);\n    x=c^48;\n    while(isdigit(c=getchar())) x=x*10+(c^48);\n    x*=f;\n}\n\nint main()\n{\n    int l,r,s,k,m,x;\n    for(int i=0;i<maxn*3;++i)\n        stk[i]=&utk[i];\n    null=new Node(0,0,0,0);\n    read(n);read(m);\n    for(int i=1;i<=n;++i)\n        read(a[i]);\n    leafy.init();\n    seg.build(1,1,n);\n    for(int i=1;i<=n;++i)\n        leafy.insert(leafy.rt[a[i]],i);\n    while(m--)\n    {\n        read(l);read(r);read(s);read(k);\n        x=query(l,r);\n        if(x!=-1) s=x;\n        printf(\"%d\\n\",s);\n        while(k--)\n            read(x),modify(x,s);\n    }\n    printf(\"%d\\n\",query(1,n));\n    return 0;\n}\n```\n\n",
        "postTime": 1598444513,
        "uid": 199750,
        "name": "\u8bd5\u8bd5\u4e8b\u5b9e\u4e0a\u5417",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u8fd9\u9898\u9700\u8981\u4e00\u4e2a\u9ed1\u79d1\u6280\u2014\u2014\u6469\u5c14\u6295\u7968\u3002\u8fd9\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\uff1f\u4e00\u4e2a\u795e\u5947\u7684\u65b9\u6cd5\u6c42\u4e00\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u957f\u5ea6\u4e00\u534a\u7684\u6570\u3002    \n\u7b80\u800c\u8a00\u4e4b\u5c31\u662f`\u540c\u52a0\u5f02\u51cf`\uff1b  \n\u6bd4\u5982\u6709\u4e00\u4e2a\u4ee3\u8868\u6295\u7968\u7ed3\u679c\u7684\u5e8f\u5217\u3002  \n$$[1,2,1,1,2,1,1]$$  \n\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a$num$\u548c$cnt$\u5148\u522b\u7ba1\u5b83\u4eec\u662f\u5e72\u4ec0\u4e48\u7684\u3002\u6211\u4eec\u6a21\u62df\u4e00\u904d\u6a21\u62df\u6392\u5e8f\u3002    \n\u9996\u5148\u8bfb\u7b2c\u4e00\u4e2a\u65701\uff0cnum==0,\u6211\u4eec\u628acnt+1=1,num=1    \n\u7b2c\u4e8c\u4e2a\u65702\uff0cnum==1$\\neq$2,\u6211\u4eec\u628acnt-1=0,num\u4e0d\u53d8    \n\u7136\u540e\u7b2c\u4e09\u4e2a\u65701\uff0cnum==0\uff0c\u6211\u4eec\u628acnt+1=1,num=1    \n\u7b2c\u56db\u4e2a\u65701\uff0cnum==1=1,cnt+1=2,num\u4e0d\u53d8    \n\u7b2c\u4e94\u4e2a\u65702\uff0cnum==1$\\neq$2,\u6211\u4eec\u628acnt-1=1,num\u4e0d\u53d8    \n\u7b2c\u516d\u4e2a\u65701\uff0cnum==1=1,cnt+1=2,num\u4e0d\u53d8    \n\u6700\u540e\u7684num\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u4e00\u534a\u7684\u6570\u3002\u5f53\u7136\u5fc5\u987b\u8981\u4fdd\u8bc1\u771f\u7684\u6709\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u4e00\u534a\u3002\u8981\u4e0d\u6700\u540e\u7684num\u662f\u9519\u7684\u3002  \n\u6469\u5c14\u6295\u7968\u6709\u4ec0\u4e48\u7528\u5462\uff0c\u6211\u4eec\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u66b4\u529b\u7684\u60f3\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5019\u9009\u4eba\u5efa\u4e00\u9897\u5e73\u8861\u6811\uff0c\u91cc\u9762\u8282\u70b9\u6743\u503c\u5c31\u662f\u652f\u6301\u8fd9\u4e2a\u5019\u9009\u4eba\u7684\u4eba\u7684\u4e0b\u6807\u3002  \u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u904d\u5386\u6bcf\u4e00\u4e2a\u5e73\u8861\u6811\u770b\u770b\u6743\u503c\u5728$[l,r]$\u4e2d\u7684\u8282\u70b9\u6709\u591a\u5c11\u4e2a\uff0c\u6c42max\u770b\u770b\u5927\u4e0d\u5927\u4e8e\u533a\u95f4\u957f\u5ea6\u4e00\u534a\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u5019\u9009\u4eba\u4e86\uff0c\u7ef4\u62a4\u4e5f\u633a\u597d\u7ef4\u62a4\u3002    \n\u4f46\u662f\u6bcf\u4e00\u6b21\u904d\u5386\u5e73\u8861\u6811\u592a\u6162\u4e86\uff0c\u6211\u4eec\u7528\u6469\u5c14\u6295\u7968\u5148\u6c42\u51fa\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u7136\u540e\u5224\u65ad\u7b54\u6848\u5bf9\u5e94\u7684\u90a3\u4e2a\u5e73\u8861\u6811\u5c31\u884c\u4e86\u3002\u7136\u540e\u6469\u5c14\u6295\u7968\u6709\u533a\u95f4\u53ef\u52a0\u6027\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u81f3\u6b64\u6b64\u9898\u5f97\u5230\u5b8c\u7f8e\u89e3\u51b3\u3002  \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nconst int N=501000;\nint num[N*5],cnt[N*5];\nint tot,rad[N],v[N],size[N],ch[N][2],root[N],x,y,z;\nint n,m,a[N];\nstruct node{\n\tint cnt,num;\n};\nvoid update(int now){\n\tif(num[now*2]==num[now*2+1])num[now]=num[now*2],cnt[now]=cnt[now*2]+cnt[now*2+1];\n\telse if(cnt[now*2]>cnt[now*2+1])num[now]=num[now*2],cnt[now]=cnt[now*2]-cnt[now*2+1];\n\telse num[now]=num[now*2+1],cnt[now]=cnt[now*2+1]-cnt[now*2];\n}\nvoid build(int l,int r,int now){\n\tif(l==r){\n\t\tnum[now]=a[l];\n\t\tcnt[now]=1;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,now*2);\n\tbuild(mid+1,r,now*2+1);\n\tupdate(now);\n}\nnode check(int l,int r,int L,int R,int now){\n\tif(l==L&&r==R){\n\t\tnode g;\n\t\tg.num=num[now];\n\t\tg.cnt=cnt[now];\n\t\treturn g;\n\t}\n\tint mid=(l+r)>>1;\n\tif(L>mid)return check(mid+1,r,L,R,now*2+1);\n\telse if(R<=mid)return check(l,mid,L,R,now*2);\n\telse{\n\t\tnode a=check(l,mid,L,mid,now*2);\n\t\tnode b=check(mid+1,r,mid+1,R,now*2+1);\n\t\tnode g;\n\t\tif(a.num==b.num)g.num=a.num,g.cnt=a.cnt+b.cnt;\n\t\telse if(a.cnt>b.cnt)g.num=a.num,g.cnt=a.cnt-b.cnt;\n\t\telse g.num=b.num,g.cnt=b.cnt-a.cnt;\n\t\treturn g;\n\t}\n}\nvoid change(int l,int r,int x,int w,int now){\n\tif(l==r){\n\t\tnum[now]=w;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x>mid)change(mid+1,r,x,w,now*2+1);\n\telse change(l,mid,x,w,now*2);\n\tupdate(now);\n}\nint new_node(int x){\n\tint now=++tot;\n\trad[now]=rand(),v[now]=x,size[now]=1;\n\treturn now;\n}\nvoid pushup(int x){\n\tsize[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(rad[x]>rad[y]){\n\t\tch[x][1]=merge(ch[x][1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\nvoid split(int &x,int &y,int now,int w){\n\tif(now==0)x=y=0;\n\telse{\n\t\tif(v[now]<=w){\n\t\t\tx=now;\n\t\t\tsplit(ch[x][1],y,ch[x][1],w);\n\t\t}\n\t\telse{\n\t\t\ty=now;\n\t\t\tsplit(x,ch[y][0],ch[y][0],w);\n\t\t}\n\t\tpushup(now);\n\t}\n}\nbool judge(int now,int l,int r){\n\tsplit(x,z,root[now],r);\n\tsplit(x,y,x,l-1);\n\tint tmp=size[y];\n\troot[now]=merge(merge(x,y),z);\n\tif(tmp>(r-l+1)/2)return true;\n\telse return false;\n}\nint read(){\n\tint sum=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nint main(){\n\tsrand(time(NULL));\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=read();\n\t\troot[a[i]]=merge(root[a[i]],new_node(i));\n\t}\n\tbuild(1,n,1);\n\twhile(m--){\n\t\tint l=read(),r=read(),s=read(),k=read();\n\t\tint f=check(1,n,l,r,1).num;\n\t\tif(judge(f,l,r))s=f;\n\t\tprintf(\"%d\\n\",s);\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tf=read();\n\t\t\tchange(1,n,f,s,1);\n\t\t\tsplit(x,z,root[a[f]],f);\n\t\t\tsplit(x,y,x,f-1);\n\t\t\troot[a[f]]=merge(x,z);\n\t\t\tsplit(x,z,root[s],f);\n\t\t\troot[s]=merge(merge(x,y),z);\n\t\t\ta[f]=s;\n\t\t}\n\t}\n\tint f=check(1,n,1,n,1).num;\n\tif(judge(f,1,n))printf(\"%d\",f);\n\telse printf(\"-1\");\n\treturn 0;\n}\n```",
        "postTime": 1546216118,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u4f7f\u7528\u9898\u89e3\u7684\u601d\u8def\u3002\u5199\u4e86\u4e00\u904dT\u4e86\u3002\u3002\uff08\u5176\u5b9eWindows\u4e0b\u5927\u968f\u673a\u6570\u636ePascal\u8dd1\u5f97\u8fd8\u6bd4C++\u7565\u5feb\u4e00\u70b9\u7684\u8bf4\uff09\n\n\u6211\u77e5\u9053\u7528C++\u91cd\u5199\u4e00\u904d\u5c31\u80fdA\uff0c\u6211\u77e5\u9053\u6211\u5199\u7684Treap\u67092\u500d\u5e38\u6570\u3002\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u59a8\u4ee5\u63d0\u4ea4\u6b21\u6570\u4e3a\u4ee3\u4ef7\u6c34\u4e00\u4e0b\u6b64\u9898\u3002\u3002\u3002\n\n\u6b63\u89e3\u90e8\u5206\uff1a\n\n\u25cf\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u5019\u9009\u4eba\u5f00\u5e73\u8861\u6811\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u8be2\u95ee[L,R]\u7684\u9009\u6c11\u9009\u62e9\u8be5\u5019\u9009\u4eba\u7684\u6570\u91cf\u3002\u6bd4\u5982[1,R]-[1,L-1]\u8fd9\u6837\u3002\n\n\u25cf\u5f00\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4f17\u6570\u3002\u590d\u6742\u5ea6O(nlognlogn)\u3002\n\n\u597d\u5427\uff0c\u4ee5\u4e0a\u6211\u76f4\u63a5\u6a21\u62df\u5730\u5199\u4e00\u904d\u53ea\u670930\u5206\uff0c\u5176\u4f59\u5168T\u3002\n\n\u4e71\u641e\u5361\u5e38\u90e8\u5206\uff1a\n\n\u2460\u4e00\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6570>\u533a\u95f4\u7684\u4e00\u534a\uff0c\u5219\u968f\u673a\u9009\u6570\u6b63\u786e\u7684\u6982\u7387\u4e3a1/2\u3002\u9009\u62e9K\u6b21\u51fa\u9519\u7684\u6982\u7387\u5c31\u4f4e\u52301/2^K\u4e86\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6b21\u6570K\u4e0d\u4e00\u5b9a\u8981\u90092^K>=\u03b1M\u8fd9\u79cd\uff0c\u5b9e\u9645\u4e0a\uff0c\u900915\u5de6\u53f3\u5c31\u80fd\u5bf9\u7edd\u5927\u591a\u6570\u6570\u636e\u4e86\uff08\u6bd5\u7adf\u5f88\u53ef\u80fd\u672c\u6765\u5c31\u6ca1\u6709\u5927\u4e8e\u4e00\u534a\u7684\u6570\uff0c\u8fd9\u6837\u591a\u8be2\u95ee\u5c31\u5f88\u6d6a\u8d39\uff09\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u662fO(nlognK)\n\n\u2461\u4e00\u4e2a\u5019\u9009\u4eba\uff0c\u4ed6\u53ef\u80fd\u51fa\u73b0\u7684\u603b\u6b21\u6570\u672c\u6765\u5c31\u6781\u5c11\uff0c\u5df2\u7ecf\u5c11\u4e8e\u8be2\u95ee\u533a\u95f4\u7684\u4e00\u534a\u4e86\uff0c\u6211\u4eec\u8fd9\u65f6\u5c31\u4e0d\u9700\u8981\u82b1\u8d39logn\u7684\u4ee3\u4ef7\u53bb\u8be2\u95ee\uff0c\u76f4\u63a5\u8fd4\u56defalse\u3002\n\n\u2462\u51fa\u9898\u4eba\u6700\u64c5\u957f\u6784\u9020\u7684\u6570\u636e\u83ab\u8fc7\u4e8e\u3010\u6570U\u51fa\u73b0\u4e86x\u6b21\uff0c\u6570V\u51fa\u73b0\u4e86(x+1)\u6b21\u3011\u8fd9\u79cd\u6781\u7aef\uff0c\u8fd9\u65f6\u6570U\u53ef\u80fd\u90fd\u4f1a\u88ab\u95ee\u5230\u591a\u6b21\uff0c\u7528\u65f6\u95f4\u6233\u5224\u6389\u5bf9\u540c\u4e00\u4e2a\u9009\u6c11\u7684\u91cd\u590d\u8be2\u95ee\u5373\u53ef\u3002\n\n\u2463\u554a\u4f60\u53d1\u73b0\u4ee5\u4e0a\u7684\u505a\u6cd5\u8fd8\u662f\u8fc7\u4e0d\u4e86\uff0c\u53ef\u4ee5\u5f9790\u5206\uff0c\u7279\u522b\u662f\u7b2c7\u4e2a\u70b9\u6211\u4e0d\u77e5\u9053\u51fa\u9898\u4eba\u662f\u600e\u4e48\u6784\u9020\u7684\u800cLuogu\u53c8\u6ca1\u6cd5\u4e0b\u8f7d\u3002\u90a3\u4e48\uff0c\u4f60\u4e5f\u4e0d\u8981\u8f7b\u6613\u653e\u5f03\u4fe1\u4ef0\u53bb\u7528c++\u3002\u4f60\u53ef\u4ee5\u5bf9\u533a\u95f4\u5c0f\u7684\u6570\uff0c\u6d4b\u8bd5\u6b21\u6570K\u8bbe\u7f6e\u7684\u5c0f\u4e00\u4e9b\uff1b\u533a\u95f4\u5927\u7684\u6570\uff0c\u6d4b\u8bd5\u6b21\u6570K\u8bbe\u7f6e\u7684\u5927\u4e00\u4e9b\u3002\u3002\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u4f60\u7684\u5206\u6570\u4f1a\u572870~90\u5206\u5f98\u5f8a\uff0c\u4f46\u662f\u5f53\u4f60\u6b27\u6c14\u597d\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u62b5\u8fbe100\u5206\u3002\n\n\n\u4ee3\u7801\u6bd4\u8f83\u4e11\u4e0d\u8d34\u4e86\u3002\u3002\n",
        "postTime": 1496069462,
        "uid": 8073,
        "name": "s_h_y",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "Orz \u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u968f\u673a\u5316\u5927\u6cd5\uff0c\u601d\u8def\u7c7b\u4f3c\n\n\u5bf9\u4e8e\u5c1d\u8bd5\u6b21\u6570\u672c\u4eba\u503e\u5411\u4e8e $\\log n$\n\n\u4f46\u672c\u4eba\u624b\u5199 fhqTreap \u88ab\u5361\u5e38\u4e86\uff0c\u5b9e\u6d4b\u672c\u4eba\u7684 pb_ds(O2) \u5feb\u4e8e Treap \u5feb\u4e8e fhqTreap\uff0c\u56e0\u4e3a\u60f3~~\u5077\u61d2~~\u953b\u70bc\u5361\u5e38\u80fd\u529b\u51b3\u5b9a\u5c31\u7528 fhqTreap\uff0c\u4e8e\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/h5dpqh54.png)\n\n\u7a81\u7136\u53d1\u73b0\u6709\u65f6\u5019\u6ca1\u5f00 O2\u3002\u3002\u3002\n\n\u5206\u4eab\u4e00\u4e0b\u7528\u5230\u7684\u6280\u5de7\uff08\u89c1\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n// \u7701\u7565\u4e00\u5768\u5934\u6587\u4ef6\nnamespace IO { // fread+fwrite\n#define gc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<22,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<22],*p1=buf,*p2=buf;\nint read(){\n\tint x=0;char c=gc();\n\twhile(!isdigit(c))c=gc(); // \u6ca1\u6709\u8d1f\u6570\n\tfor(;isdigit(c);c=gc())x=x*10-48+c;\n\treturn x;\n}\nchar pbuf[1<<22],*pp=pbuf;\nvoid pc(char c) {\n\tif(pp-pbuf==1<<22)fwrite(pbuf,1,1<<22,stdout),pp=pbuf;\n\t*pp++=c;\n}\nvoid write(int x) {\n\tif(!x)pc('0');\n\telse{\n    \tstatic int s[10];int l=0;\n    \tif(x<0)pc('-'),x=-x;\n\t\tfor(;x;x/=10)s[l++]=x%10;\n\t\twhile(l)pc(s[--l]|48);\n    }\n}\n}\nusing IO::pc;\nusing IO::read;\nusing IO::write;\n\nconst int N = 5e5+5, K = N+1e6+5;\nint n,m,a[N];\n\nint ind;\nbool vis[N];\n\nmt19937 mt(time(0));\n\nint rnd(int l,int r) { return l + mt() % (r-l+1); }\n\nstruct Node {\n\tint val,ls,rs,siz;\n\tunsigned rnd;\n\t#define ls(x) t[x].ls\n\t#define rs(x) t[x].rs\n} t[K];\nclass Treap {\nprivate:\n\tint rt;\n\tint newnode(int x) {\n\t\tt[++ind] = (Node){x,0,0,1,mt()};\n\t\treturn ind;\n\t}\n\tvoid up(int u) { t[u].siz = t[ls(u)].siz + t[rs(u)].siz + 1; }\n\tvoid split(int u,int x,int &l,int &r) {\n\t\tif( !u ) { l = r = 0; return; };\n\t\tif( t[u].val <= x ) l = u, split(rs(u),x,rs(l),r), up(l);\n\t\telse r = u, split(ls(u),x,l,ls(r)), up(r);\n\t}\n\tint merge(int l,int r) {\n\t\tif( !l || !r ) return l | r;\n\t\tif( t[l].rnd < t[r].rnd ) { rs(l) = merge(rs(l),r), up(l); return l; }\n\t\telse { ls(r) = merge(l,ls(r)), up(r); return r; }\n\t}\npublic:\n\tvoid insert(int x) {\n\t\tint l,r;\n\t\tsplit(rt,x,l,r);\n\t\trt = merge(merge(l,newnode(x)),r);\n\t}\n\tvoid erase(int x) {\n\t\tint l,mid,r;\n\t\tsplit(rt,x,l,r), split(l,x-1,l,mid);\n\t\trt = merge(l,r); // \u4e0d\u4f1a\u6709\u76f8\u540c\u7684\u6570\uff0c\u5373ls(mid)=rs(mid)=0\n\t}\n\tint rank(int x) {\n\t\tint l,r;\n\t\tsplit(rt,x,l,r);\n\t\tint k = t[l].siz;\n\t\trt = merge(l,r);\n\t\treturn k;\n\t}\n} tr[N];\n\nint query(int l,int r) {\n    int stk[14],tp=0, res = -1, mid = (r-l+1)/2; // \u9632\u6b62\u6bcf\u6b21\u7b97mid\n\tFor(i,1,13) { // \u5b9e\u6d4b\u5c0f\u4e8e13\u5c31\u4f1aWA\n\t\tint x = a[rnd(l,r)];\n\t\tif( vis[x] ) continue; // \u6700\u5173\u952e\u7684\u4f18\u5316\uff1a\u67e5\u8fc7\u7684\u5c31\u4e0d\u67e5\u4e86\n\t\tvis[x] = 1, stk[++tp] = x;\n\t\tif( tr[x].rank(r)-tr[x].rank(l-1) > mid ) { res = x; break; }\n\t}\n\twhile( tp ) vis[stk[tp--]] = 0;\n\treturn res;\n}\n\nint main() {\n// \tfreopen(\"P3765_8.in\",\"r\",stdin); \u4e00\u76f4\u6b7b\u5728\u8fd9\u4e2a\u70b9\n// \tfreopen(\"a.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tFor(i,1,n) tr[ a[i]=read() ].insert(i);\n\twhile( m-- ) {\n\t\tint l=read(),r=read(),s=read(),k=read();\n\t\tint win = query(l,r);\n\t\tif( win == -1 ) win = s;\n\t\twhile( k-- ) {\n\t\t\tint x=read();\n\t\t\ttr[a[x]].erase(x), tr[ a[x]=win ].insert(x);\n\t\t}\n\t\twrite(win),pc(10);\n\t}\n\twrite(query(1,n));\n\tfwrite(IO::pbuf,1,IO::pp-IO::pbuf,stdout);\n\treturn 0;\n}\n```\n\n---\n\n\u6c42\u8d5e & \u5ba3\u4f20\u4e00\u4e0b [blog](https://www.luogu.com.cn/blog/Rings/#)",
        "postTime": 1625657123,
        "uid": 236866,
        "name": "401rk8",
        "ccfLevel": 9,
        "title": "P3765 \u603b\u7edf\u9009\u4e3e \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u4e86\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6211\u61c2\u4e86\u968f\u673a\u5316\u7684\u827a\u672f\u3002\n\n\u786e\u5b9e\uff0c\u8fd9\u79cd\u533a\u95f4\u4f17\u6570\u7528\u968f\u673a\u5316\u7684\u9519\u8bef\u6982\u7387\u5f88\u5c0f\uff0c\u5e76\u4e14\u4e5f\u5feb\uff0c\u90a3\u6211\u5c31\u662f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u3002\n\n\u663e\u7136\u6211\u4eec\u77e5\u9053\u533a\u95f4\u4f17\u6570\u662f\u533a\u95f4\u4e2d\u67d0\u4e2a\u6570\u51fa\u73b0\u6b21\u6570 $ > $ \u533a\u95f4\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6b21\u968f\u673a\u62bd\u4e0d\u4e2d\u7684\u53ef\u80fd\u662f $\\frac{1}{2}$\uff0c\u9009 $k$ \u6b21\u62bd\u4e0d\u4e2d\u7684\u6982\u7387\u662f $\\frac{1}{2^k}$\uff0c\u5c06 $k$ \u8bbe\u4e3a $20$\uff0c\u6bcf\u6b21\u9009\u51fa\u7684\u6570\u7528\u5e73\u8861\u6811\u7edf\u8ba1\u6b21\u6570\u3002\u8ddf\u7b2c\u4e00\u7bc7\u9898\u89e3\u4e00\u6837\uff0c\u6211\u7528\u7684 `pbds` \u7684\u7ea2\u9ed1\u6811\uff0c`pbds` \u7684 `splay` \u4f1a\u88ab\u5361\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n/*\n* author: happybob\n* date: 2022/3/20\n* 10.34s /  63.41MB /  1.22KB C++20\n* https://www.luogu.com.cn/record/71948451\n*/\n\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n#include <bits/extc++.h>\nusing namespace std;\nusing namespace __gnu_pbds;\n\nconstexpr int N(5e5 + 5), t(20);\ntree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> tr[N];\nint n, m, a[N];\n\ninline int getmax(int l, int r)\n{\n\tfor (register int i(1); i <= t; i++)\n\t{\n\t\tint place(l + rand() % (r - l + 1));\n\t\tif (tr[a[place]].order_of_key(r + 1) - tr[a[place]].order_of_key(l) > (r - l + 1) >> 1)\n\t\t{\n\t\t\treturn a[place];\n\t\t}\n\t}\n\treturn -1;\n}\n\nint main()\n{\n\tsrand(time(NULL));\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &a[i]);\n\t\ttr[a[i]].insert(i);\n\t}\n\twhile (m--)\n\t{\n\t\tint l, r, s;\n\t\tscanf(\"%d%d%d\", &l, &r, &s);\n\t\tint g(getmax(l, r));\n\t\tif (g == -1)\n\t\t{\n\t\t\tprintf(\"%d\\n\", s);\n\t\t\tg = s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%d\\n\", g);\n\t\t}\n\t\tint k;\n\t\tscanf(\"%d\", &k);\n\t\tfor (int i(1); i <= k; ++i)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\ttr[a[x]].erase(x);\n\t\t\ta[x] = g;\n\t\t\ttr[a[x]].insert(x);\n\t\t}\n\t}\n\tint l(1), r(n), s;\n\tint g(getmax(l, r));\n\tif (g == -1)\n\t{\n\t\tprintf(\"%d\\n\", -1);\n\t}\n\telse\n\t{\n\t\tprintf(\"%d\\n\", g);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1647779563,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P3765 \u603b\u7edf\u9009\u4e3e"
    },
    {
        "content": "NOI2022 \u524d\u6765\u8003\u53e4\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811\uff0c\u5e73\u8861\u6811\uff0c**\u6469\u5c14\u6295\u7968**\u3002\n\n\u6469\u5c14\u6295\u7968\u663e\u7136\u662f\u662f\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\u7684\uff0c\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5177\u4f53\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4f17\u6570\u4ee5\u53ca\u5b83\u4eec\u5728\u7ecf\u8fc7\u5bf9\u62fc\u62b5\u6d88\u7684\u6b21\u6570\u3002\u5408\u5e76\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u770b\u4ee3\u7801\uff1a\n\n```cpp\nnode push_up(node a,node b)\n{\n\tif(a.mx==b.mx) return {a.mx,a.cnt+b.cnt};\n\tif(a.cnt>b.cnt) return {a.mx,a.cnt-b.cnt};\n   return {b.mx,b.cnt-a.cnt};\n}\n```\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\u4e00\u5927\u534a\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u7edd\u5bf9\u4f17\u6570\u53ef\u80fd\u4e0d\u5b58\u5728\u3002\u6b64\u65f6\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u533a\u95f4\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u4e2a\u6570\u3002~~\u56e0\u4e3a\u5e73\u8861\u6811\u6211\u5199\u6302\u4e86~~\u53ef\u4ee5\u7528 pbds \u6765\u5b9e\u73b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal{O}(m \\log n)$\uff0c\u7ec6\u8282\u6709\u70b9\u5c0f\u591a\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\nconst int N = 5e5+5;\nconst int M = 1.5e6+5;\nint a[N],n,m;\nstruct node{\n\tint mx,cnt;\n} t[N<<2];\n//\u7ebf\u6bb5\u6811\nstruct seg_tree{\n\tnode push_up(node a,node b)\n\t{\n\t\tif(a.mx==b.mx) return {a.mx,a.cnt+b.cnt};\n\t\tif(a.cnt>b.cnt) return {a.mx,a.cnt-b.cnt};\n\t\treturn {b.mx,b.cnt-a.cnt};\n\t}\n\tvoid build(int p,int l,int r)\n\t{\n\t\tif(l==r){t[p].mx=a[l];t[p].cnt=1;return;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1,l,mid); build(p<<1|1,mid+1,r);\n\t\tt[p]=push_up(t[p<<1],t[p<<1|1]);\n\t}\n\tvoid modify(int p,int l,int r,int x,int v)\n\t{\n\t\tif(l==r){t[p].mx=v;return;}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) modify(p<<1,l,mid,x,v);\n\t\telse modify(p<<1|1,mid+1,r,x,v);\n\t\tt[p]=push_up(t[p<<1],t[p<<1|1]); \n\t}\n\tnode query(int p,int l,int r,int L,int R)\n\t{\n\t\tif(L<=l&&r<=R) return t[p];\n\t\tint mid=(l+r)>>1; node ls={0,0},rs={0,0};\n\t\tif(L>mid) return query(p<<1|1,mid+1,r,L,R);\n\t\tif(R<=mid) return query(p<<1,l,mid,L,R);\n\t\tls=query(p<<1,l,mid,L,R); rs=query(p<<1|1,mid+1,r,L,R);\n\t\treturn push_up(ls,rs);\n\t}\n} seg;\n//int val[M],siz[M],rnd[M],ch[M][2],cnt;\nmt19937 mt(time(0));\n//\u6302\u6389\u7684 Treap\n//struct Treap{\n//\tint root;\n//\tvoid maintain(int x){siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;}\n//\tint newnode(int x){cnt++;val[cnt]=x;siz[x]=1;rnd[x]=mt();return cnt;}\n//\tvoid split(int p,int k,int& x,int& y)\n//\t{\n//\t\tif(!p) return x=y=0,void();\n//\t\tif(val[p]<k) split(ch[p][1],k,ch[p][1],y),x=p;\n//\t\telse split(ch[p][0],k,x,ch[p][0]),y=p;\n//\t\tmaintain(p);\n//\t}\n//\tint merge(int x,int y)\n//\t{\n//\t\tif(!x||!y) return x+y;\n//\t\tif(rnd[x]>=rnd[y]) return ch[y][0]=merge(x,ch[y][0]),maintain(y),y;\n//\t\treturn ch[x][1]=merge(ch[x][1],y),maintain(x),x;\n//\t}\n//\tvoid insert(int v)\n//\t{\n//\t\tint x,y; split(root,v,x,y);\n//\t\troot=merge(merge(x,newnode(v)),y);\n//\t}\n//\tvoid erase(int v)\n//\t{\n//\t\tint x,y,z;\n//\t\tsplit(root,v,x,y); split(x,v-1,x,z);\n//\t\troot=merge(x,y);\n//\t}\n//\tint getrnk(int v)\n//\t{\n//\t\tint x,y; split(root,v,x,y);\n//\t\tint ret=siz[x]; root=merge(x,y);\n//\t\treturn ret;\n//\t}\n//} tr[N];\ntree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> s[N];\nvoid modify(int x,int v)\n{\n\tseg.modify(1,1,n,x,v);\n//\ttr[a[x]].erase(x);\n//\ttr[a[x]=v].insert(x);\n\ts[a[x]].erase(x);\n\ts[a[x]=v].insert(x);\n}\nint query(int l,int r)\n{\n\tint ret=seg.query(1,1,n,l,r).mx;\n\t//if(tr[ret].getrnk(r)-tr[ret].getrnk(l-1)>((r-l+1)>>1)) return ret;\n\tif(s[ret].order_of_key(r+1)-s[ret].order_of_key(l)>((r-l+1)>>1)) return ret;\n\treturn -1;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tseg.build(1,1,n);\n\tfor(int i=1;i<=n;i++) s[a[i]].insert(i);//tr[a[i]].insert(i);\n\twhile(m--)\n\t{\n\t\tint l,r,s,k,x;\n\t\tscanf(\"%d%d%d%d\",&l,&r,&s,&k);\n\t\tx=query(l,r);\n\t\tif(x!=-1) s=x;\n\t\tprintf(\"%d\\n\",s);\n\t\twhile(k--) scanf(\"%d\",&x),modify(x,s);\n\t}\n\tprintf(\"%d\\n\",query(1,n));\n\treturn 0;\n}\n```",
        "postTime": 1662200820,
        "uid": 280473,
        "name": "404Not_Found",
        "ccfLevel": 5,
        "title": "\u603b\u7edf\u9009\u4e3e"
    },
    {
        "content": "emmm...5k\u7684\u4ee3\u7801\u6211\u5e94\u8be5\u76f4\u63a5\u53d1\u8fd8\u662f\u5e94\u8be5\u526a\u8d34\u677f.....  \n\u8fd9\u4e2a\u9898\u76ee\u770b\u5230\u8981\u7ef4\u62a4\u4e00\u4e2a\u4eba\u5728\u67d0\u4e00\u4e2a\u533a\u95f4\u7684\u7968\u6570\uff0c\u5982\u679c\u505a\u8fc7[P3987 \u6211\u6c38\u8fdc\u559c\u6b22\u73c2\u6735\u8389~](https://www.luogu.com.cn/problem/P3987)  \u7684\u8bdd\u5176\u5b9e\u5f88\u5bb9\u6613\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4eba\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7136\u540e\u5355\u70b9\u67e5\u8be2\u6392\u540d\uff0c\u518d\u76f8\u51cf\u5c31\u641e\u5b9a\u4e86\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u662frk(r)-rk(l-1)\uff0c\u8981\u662f\u5199rk(l)\u611f\u89c9\u5c31\u4e0d\u597d\u534f\u8c03\u4e86~~\u4f60\u89c9\u5f97\u6211\u4f1a\u544a\u8bc9\u4f60\u6211\u56e0\u4e3a\u8fd9\u4e2a\u60f3\u4e86\u534a\u4e2a\u5c0f\u65f6\uff1f~~    \n\u7136\u800c\u6211\u4eec\u8fd9\u9898\u671f\u671b\u7684\u662f\u627e\u5230\u6bcf\u4e2a\u533a\u95f4\u7684\u4f17\u6570\uff0c\u90a3\u4e48\u5982\u679c\u968f\u673a\u62bd10\u51e0\u4e2a\u6570\uff0c\u7136\u540e\u53bb\u9a8c\u8bc1\uff0c\u90a3\u4e48\u7531\u4e8e\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4f1a\u5927\u4e8e\u6574\u4e2a\u533a\u95f4\u7684\u4e00\u534a\uff0c\u6240\u4ee5\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u5bf9\u7684\u4e86\uff0c\u7136\u800c\u7531\u4e8e\u6211\u5199\u4e86\u4e2a\u5751\u7239\u7684splay\uff0c\u6b7b\u6d3b90\u5206\uff0c\u591a\u51e0\u6b21\u5c31T\u5c11\u51e0\u6b21\u5c31Wa\uff0c\u6240\u4ee5\u8fd8\u662f\u9009\u62e9\u7528\u7ebf\u6bb5\u6811\u6765\u627e\u4f17\u6570\uff0c\u601d\u8def\u5c31\u662f\u6839\u7b2c\u4e00\u7bc7\u9898\u89e3\u4e00\u6837\u4e86\uff0c\u7528\u6469\u5c14\u6295\u7968\u6cd5\u7684\u601d\u60f3\u7ef4\u62a4cnt\u548c\u5f53\u524d\u7684\u201c\u4f17\u6570\u201d\uff0c\u90a3\u4e48\u5982\u679c\u4e24\u4e2a\u513f\u5b50\u7684\u4f17\u6570\u76f8\u540c \u8fd9\u4e2a\u8282\u70b9\u7684\u4f17\u6570\u5c31\u7b49\u4e8e\u513f\u5b50\u7684\u4f17\u6570 cnt\u5c31\u7b49\u4e8e\u4e24\u4e2a\u513f\u5b50\u7684cnt\u76f8\u52a0\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u4f17\u6570\u5c31\u7b49\u4e8ecnt\u8f83\u5927\u7684\u90a3\u4e2a\u513f\u5b50\u7684\u4f17\u6570 cnt\u5c31\u7b49\u4e8e\u5927\u7684\u51cf\u53bb\u5c0f\u7684\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u7ef4\u62a4\u4e86  \n~~\u4ee3\u7801\u53ca\u5176\u611f\u4eba~~\n\n```cpp\n#include <cstdio>\n#include <utility>\n\nusing std::pair;\n\n#define R register\nconst int MAXN=5e5+10;\n\ninline int read();\ninline void write(int x);\ninline void print(int x);\n\nint n,m;\nint a[MAXN];\n\nstruct Node\n{\n\tint ch[2],siz,val,fa,cnt;\n}t[MAXN*4];\nint tot=0;\n\nclass Splay\n{\n\tprivate:\n\t\tint rt;\n\t\tinline int New(int x);\n\t\tinline int get(int x);\n\t\tinline void splay(int x);\n\t\tinline void clear(int x);\n\t\tinline void update(int x);\n\t\tinline void rotate(int x);\n\t\tinline int  get(int x,int y);\n\t\tinline void connect(int x,int y,int chk);\n\tpublic:\n\t\tinline int Pre();\t\t\n\t\tinline int Nxt();\t\t\n\t\tinline int rk(int k);\t\t\t\n\t\tinline void del(int k);\n\t\tinline void insert(int k);\n\t\tinline int find(int k);\n};\n\nclass Seg_Tree\n{\n\tprivate:\n\t\tint mx[MAXN<<2],cn[MAXN<<2];\n\t\tinline int Ls(int x);\n\t\tinline int Rs(int x);\n\t\tinline void update(int x);\n\tpublic:\n\t\tinline void build(int x,int l,int r);\n\t\tinline void chg(int x,int l,int r,int ad,int k);\n\t\tinline pair<int,int> find(int x,int l,int r,int LL,int RR);\n};\n\nSplay Tree[MAXN];\nSeg_Tree ST;\n\nint main()\n{\n\tn=read();m=read();\n\tfor(R int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();\n\t\tTree[a[i]].insert(i);\n\t}\n\tST.build(1,1,n);\n\tint l,r,s,k;\n\tfor(R int i=1;i<=m;i++)\n\t{\n\t\tl=read();r=read();s=read();k=read();\n\t\tpair<int,int > pa=ST.find(1,1,n,l,r);\n\t\tint who=pa.second;\n\t\tint k1,k2;\n\t\tk1=Tree[who].find(l-1);\n\t\tk2=Tree[who].find(r);\n\t\tint cnt=k2-k1;\n\t\tif(cnt>(r-l+1)/2) s=who;\n\t\tfor(R int j=1;j<=k;j++)\n\t\t{\n\t\t\tint who=read();\n\t\t\tTree[a[who]].del(who);\n\t\t\ta[who]=s;\n\t\t\tST.chg(1,1,n,who,s);\n\t\t\tTree[a[who]].insert(who);\n\t\t}\n\t\tprint(s);\n\t}\n\tl=1,r=n,s=-1;\n\tpair<int,int > pa=ST.find(1,1,n,l,r);\n\tint who=pa.second;\n\tint k1,k2;\n\tk1=Tree[who].find(l-1);\n\tk2=Tree[who].find(r);\n\tint cnt=k2-k1;\n\tif(cnt>(r-l+1)/2) s=who;\n\tprint(s);\n\treturn 0;\n}\n\ninline int read()\n{\n\tchar a=getchar();\n\tint x=0,f=1;\n\tfor(;a>'9'||a<'0';a=getchar()) if(a=='-') f=-1;\n\tfor(;a>='0'&&a<='9';a=getchar())\n\t\tx=x*10+a-'0';\n\treturn x*f;\n}\n\ninline void write(int x)\n{\t\n\tif(x>=10)\n\t\twrite(x/10);\n\tputchar(x%10+'0');\n}\n\ninline void print(int x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\twrite(x);\n\tputchar('\\n');\n}\n\n#define ls(x) t[x].ch[0]\n#define rs(x) t[x].ch[1]\n#define fa(x) t[x].fa\n#define cnt(x) t[x].cnt\n#define siz(x) t[x].siz\n#define val(x) t[x].val\n\ninline int Splay::New(int x)\n{\n\ttot++;\n\tval(tot)=x;\n\tcnt(tot)=siz(tot)=1;\n\tfa(tot)=ls(tot)=rs(tot)=0;\n\treturn tot;\n}\n\ninline int Splay::get(int x)\n{\n\treturn x==rs(fa(x));\n}\n\ninline int Splay::get(int x,int y)\n{\n\treturn x==rs(y);\n}\n\ninline void Splay::update(int x)\n{\n\tsiz(x)=siz(ls(x))+siz(rs(x))+cnt(x);\n}\n\ninline void Splay::connect(int x,int y,int chk)\n{\n\tt[y].ch[chk]=x;\n\tfa(x)=y;\n}\n\ninline void Splay::rotate(int x)\n{\n\tint y=fa(x);int z=fa(y);\n\tint chk=get(x);\n\tconnect(t[x].ch[chk^1],y,chk);\n\tconnect(y,x,chk^1);\n\tif(z) connect(x,z,get(y,z));\n\telse fa(x)=0;\n\tupdate(y);\n}\n\ninline void Splay::splay(int x)\n{\n\tfor(R int f=fa(x);f;rotate(x),f=fa(x))\n\tif(fa(f)) rotate(get(x)==get(f)?f:x);\n\trt=x;\n}\n\ninline void Splay::clear(int x)\n{\n\tfa(x)=siz(x)=cnt(x)=ls(x)=rs(x)=val(x)=0;\n}\n\ninline void Splay::insert(int k)\n{\n\tif(!rt)\n\t{\n\t\trt=New(k);\n\t\tupdate(rt);\n\t\treturn;\n\t}\n\tint x=rt,f=0;\n\twhile(1)\n\t{\n\t\tif(val(x)==k)\n\t\t{\n\t\t\tcnt(x)++;\n\t\t\tsplay(x);\n\t\t\treturn ;\n\t\t}\n\t\tf=x;x=t[x].ch[k>val(x)];\n\t\tif(!x)\n\t\t{\n\t\t\tx=New(k);\n\t\t\tconnect(x,f,k>val(f));\n\t\t\tsplay(x);\n\t\t\treturn ;\n\t\t}\n\t}\n}\n\ninline int Splay::rk(int k)\n{\n\tint res=0,x=rt;\n\twhile(1)\n\t{\n\t\tif(k<val(x)) x=ls(x);\n\t\telse\n\t\t{\n\t\t\tres+=siz(ls(x));\n\t\t\tif(k==val(x)) {splay(x);return res+1;}\n\t\t\tres+=cnt(x);x=rs(x);\n\t\t}\t\t\n\t}\n}\n\ninline int Splay::Pre()\n{\n\tint x=ls(rt);\n\twhile(rs(x)) x=rs(x);\n\treturn x;\n}\n\ninline int Splay::Nxt()\n{\n\tint x=rs(rt);\n\twhile(ls(x)) x=ls(x);\n\treturn x;\n}\n\ninline void Splay::del(int k)\n{\n\trk(k);\n\tif(cnt(rt)>1)\n\t{\n\t\tcnt(rt)--;\n\t\tupdate(rt);\n\t\treturn;\n\t}\n\tif(!ls(rt)&&!rs(rt))\n\t{\n\t\tclear(rt);\n\t\trt=0;\n\treturn;\n\t}\n\tif(!ls(rt))\n\t{\n\t\tint x=rt;\n\t\trt=rs(x);\n\t\tfa(rt)=0;\n\t\tclear(x);\n\t\treturn;\n\t}\n\tif(!rs(rt))\n\t{\n\t\tint x=rt;\n\t\trt=ls(x);\n\t\tfa(rt)=0;\n\t\tclear(x);\n\t\treturn;\n\t}\n\tint x=rt,tmp=Pre();\n\tsplay(tmp);\n\tconnect(rs(x),tmp,1);\n\tclear(x);\n\tupdate(rt);\n}\n\ninline int Splay::find(int k)\n{\n\tint x=rt,res=0,las;\n\twhile(1)\n\t{\n\t\tlas=x;\n\t\tif(val(x)<=k) res+=cnt(x)+siz(ls(x)),x=rs(x);\n\t\telse x=ls(x);\n\t\tif(x==0) {splay(las);return res;}\n\t}\n}\n\ninline int Seg_Tree::Ls(int x) {return x<<1;}\ninline int Seg_Tree::Rs(int x) {return x<<1|1;}\n\ninline void Seg_Tree::update(int x)\n{\n\tif(mx[Ls(x)]==mx[Rs(x)])\n\t{\n\t\tmx[x]=mx[Ls(x)];\n\t\tcn[x]=cn[Ls(x)]+cn[Rs(x)];\n\t}\n\telse\n\t{\n\t\tif(cn[Ls(x)]>cn[Rs(x)])\n\t\t{\n\t\t\tmx[x]=mx[Ls(x)];\n\t\t\tcn[x]=cn[Ls(x)]-cn[Rs(x)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmx[x]=mx[Rs(x)];\n\t\t\tcn[x]=cn[Rs(x)]-cn[Ls(x)];\n\t\t}\n\t}\n}\n\ninline void Seg_Tree::build(int x,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tmx[x]=a[l];\n\t\tcn[x]=1;\n\t\treturn;\n\t}\n\tint mid=l+r;mid>>=1;\n\tbuild(Ls(x),l,mid);\n\tbuild(Rs(x),mid+1,r);\n\tupdate(x);\n}\ninline void Seg_Tree::chg(int x,int l,int r,int ad,int k)\n{\n\tif(l==r)\n\t{\n\t\tmx[x]=k;\n\t\tcn[x]=1;\n\t\treturn ;\n\t}\n\tint mid=l+r;mid>>=1;\n\tif(ad<=mid) chg(Ls(x),l,mid,ad,k);\n\telse chg(Rs(x),mid+1,r,ad,k);\n\tupdate(x);\n}\t\n\ninline pair<int,int> Seg_Tree::find(int x,int l,int r,int LL,int RR)\n{\n\tif(l>=LL&&r<=RR) return std::make_pair(cn[x],mx[x]);\n\tint mid=l+r;mid>>=1;\n\tif(RR<=mid) return find(Ls(x),l,mid,LL,RR);\n\t\telse \n\t\tif(LL>mid) return find(Rs(x),mid+1,r,LL,RR);\n\t\telse\n\t\t{\n\t\t\tpair<int,int> A=find(Ls(x),l,mid,LL,RR);\n\t\t\tpair<int,int> B=find(Rs(x),mid+1,r,LL,RR);\n\t\t\tpair<int,int> C;\n\t\t\tif(A.second==B.second)\n\t\t\t{\n\t\t\t\tC.second=A.second;\n\t\t\t\tC.first=A.first+B.first;\n\t\t\t\treturn C;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(A.first>B.first)\n\t\t\t\t{\n\t\t\t\t\tC.second=A.second;\n\t\t\t\t\tC.first=A.first-B.first;\n\t\t\t\t\treturn C;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tC.second=B.second;\n\t\t\t\t\tC.first=B.first-A.first;\n\t\t\t\t\treturn C;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n```\n",
        "postTime": 1581304303,
        "uid": 139012,
        "name": "______OvO______",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": " [$$ \\Large \\texttt{My Blog} $$](http://blog.flyinthesky.win/Luogu3765/)\n\n------------\n\n\u7b2c\u4e00\u773c\u4ee5\u4e3a\u5e26\u4fee\u4e3b\u5e2d\u6811\uff0c\u611f\u89c9\u80af\u5b9a\u8dd1\u4e0d\u8fc7\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[Luogu 2397](https://www.luogu.org/problemnew/show/P2397)\n> \u6c42\u5e8f\u5217\u5927\u4e8e\u4e00\u534a\u6570\u7684\u4f17\u6570\n\n\u672c\u9898\u53ef\u4ee5\u91c7\u7528\u6469\u5c14\u6295\u7968\u6cd5\u6c42\uff0c\u5373\u5c06\u4e0d\u540c\u6570\u4e24\u4e24\u6d88\u9664\uff0c\u6700\u540e\u4e00\u5b9a\u5269\u4e0b\u7684\u662f\u8fd9\u4e2a\u4f17\u6570\u3002\n**\u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u5b58\u5728\u5927\u4e8e\u4e00\u534a\u6570\u7684\u4f17\u6570**\n\n\u7136\u540e\u770b\u8fd9\u9898\uff0c\u663e\u7136\u6469\u5c14\u6295\u7968\u6cd5\u662f\u6ee1\u8db3\u53ef\u52a0\u6027\u7684\uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e4b\u3002\n\n\u4f46\u662f\u5982\u679c\u4e0d\u6ee1\u8db3**\u5b58\u5728\u5927\u4e8e\u4e00\u534a\u6570\u7684\u4f17\u6570**\u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6570\u5728\u67d0\u4e2a\u533a\u95f4\u51fa\u73b0\u6b21\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u7ecf\u5178\u5957\u8def\uff0c\u9759\u6001\u5219\u7528 `vector` \u6392\u5e8f\u540e\u4e8c\u5206\uff0c\u800c\u52a8\u6001\u5219\u9700\u8981\u540d\u6b21\u6811`Splay`\u7ef4\u62a4\u3002\u5177\u4f53\u65b9\u6cd5\u4e3a\u5728\u540d\u6b21\u6811\u4e0a\u7c7b\u4f3c\u9759\u6001\u65b9\u6cd5\u4e8c\u5206\u5373\u53ef\u3002\n\n\u7136\u540e\u6bcf\u6b21\u67e5\u8be2\uff0c\u66f4\u6539\u5373\u53ef\u3002\n\n```c++\n#include<cstdio> \n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<set>\n#include<vector>\n#define ms(i, j) memset(i, j, sizeof i)\n#define LL long long\n#define db double\n#define fir first\n#define sec second\n#define mp make_pair\nusing namespace std;\n\nnamespace flyinthesky {\n\n\tconst int MAXN = 500000 + 5, INF = 2000000000;\n\t\n\tint n, m, vt[MAXN];\n\tstruct node {\n\t    vector<int > a;\n\t    void insert(int x) {a.insert(lower_bound(a.begin(), a.end(), x), x);}\n\t    void del(int x) {a.erase(lower_bound(a.begin(), a.end(), x));}\n\t    int rank(int x) {return lower_bound(a.begin(), a.end(), x) - a.begin() + 1;}\n\t    int kth(int k) {return a[k - 1];}\n\t    int pre(int x) {return a[lower_bound(a.begin(), a.end(), x) - a.begin() - 1];}\n\t    int nxt(int x) {return a[upper_bound(a.begin(), a.end(), x) - a.begin()];}\n\t}s[MAXN];\n\t\n\tint chk(int l, int r, int i) { // 1\n\t\tif (i == 0) return 0;\n\t\treturn upper_bound(s[i].a.begin(), s[i].a.end(), r) - upper_bound(s[i].a.begin(), s[i].a.end(), l - 1);\n\t}\n\t\n\t#define lc (o << 1)\n\t#define rc (o << 1 | 1)\n\t#define M ((l + r) >> 1)\n\t#define lson lc, l, M\n\t#define rson rc, M + 1, r \n\tint cnt[MAXN * 4], num[MAXN * 4];\n\tvoid pushup(int o) { // 1\n\t\tif (num[lc] == num[rc]) num[o] = num[lc], cnt[o] = cnt[lc] + cnt[rc];\n\t\telse {\n\t\t\tif (cnt[lc] > cnt[rc]) cnt[o] = cnt[lc] - cnt[rc], num[o] = num[lc];\n\t\t\telse cnt[o] = cnt[rc] - cnt[lc], num[o] = num[rc];\n\t\t}\n\t}\n\tvoid build(int o, int l, int r) { // 1\n\t\tcnt[o] = num[o] = 0;\n\t\tif (l == r) return ; else {\n\t\t\tbuild(lson), build(rson);\n\t\t\tpushup(o);\n\t\t}\n\t}\n\tint query(int o, int l, int r, int x, int y, int &whw) {\n\t\tif (x <= l && r <= y) { // 1\n\t\t\treturn whw = cnt[o], num[o];\n\t\t}\n\t\tint ret = 0, cc = 0;\n\t\tif (x <= M) {\n\t\t\tret = query(lson, x, y, cc);\n\t\t}\n\t\tif (M < y) {\n\t\t\tint tmp1, tmp2;\n\t\t\ttmp1 = query(rson, x, y, tmp2);\n\t\t\tif (tmp1 == ret) cc += tmp2; else {\n\t\t\t\tif (tmp2 > cc) ret = tmp1, cc = tmp2 - cc; \n\t\t\t\telse cc = cc - tmp2;\n\t\t\t}\n\t\t}\n\t\treturn whw = cc, ret;\n\t}\n\tvoid update(int o, int l, int r, int p, int v) { // 1\n\t\tif (l == r) {\n\t\t\tcnt[o] = 1, num[o] = v;\n\t\t\treturn ;\n\t\t}\n\t\tif (p <= M) update(lson, p, v);\n\t\telse update(rson, p, v);\n\t\tpushup(o);\n\t}\n\n    void clean() {\n    }\n    int solve() {\n\n    \tclean();\n    \t\n    \tcin >> n >> m;\n    \tbuild(1, 1, n);\n    \t\n    \tfor (int i = 1; i <= n; ++i) \n\t\t\tscanf(\"%d\", &vt[i]), \n\t\t\tupdate(1, 1, n, i, vt[i]), s[vt[i]].insert(i), s[i].insert(INF), s[i].insert(-INF);\n    \t\n    \twhile (m--) {\n    \t\tint l, r, si, k; scanf(\"%d%d%d%d\", &l ,&r, &si, &k);\n    \t\tint gg, ret = query(1, 1, n, l, r, gg);\n    \t\tif (chk(l, r, ret) <= (r - l + 1) / 2) printf(\"%d\\n\", ret = si); else printf(\"%d\\n\", ret);\n    \t\tfor (int x, i = 1; i <= k; ++i) {\n    \t\t\tscanf(\"%d\", &x);\n    \t\t\tupdate(1, 1, n, x, ret);\n    \t\t\ts[vt[x]].del(x), s[vt[x] = ret].insert(x);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint gg, ret = query(1, 1, n, 1, n, gg);\n    \tif (chk(1, n, ret) <= (n - 1 + 1) / 2) printf(\"-1\\n\"); else printf(\"%d\\n\", ret);\n    \t\n        return 0;\n    }\n}\nint main() {\n\tflyinthesky::solve();\n    return 0;\n}\n```",
        "postTime": 1550412380,
        "uid": 12943,
        "name": "FlyInTheSky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u505a\u8fd9\u9053\u9898\u524d\uff0c\u8bf7\u5148\u505ahttps://www.luogu.org/problemnew/show/P2397\n(code)\n```cpp\n    scanf(\"%d\",&n);int x;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&x);\n        if(!s) num=x,s=1;\n        else \n        {\n            if(num==x) s++;\n            else s--;\n        }\n    }\n    printf(\"%d\",num);\n```\n\n\u8003\u8651\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u7531\u6469\u5c14\u6295\u7968\u6cd5\u53ef\u5f97\uff1a\u6700\u7ec8\u7b54\u6848\u4f1a\u662f\u7ebf\u6bb5\u6811\u5206\u5272\u5f97\u533a\u95f4\u7684\u4e00\u5768\u7b54\u6848\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\uff08\u4e5f\u53ef\u80fd\u4f1a\u6ca1\u6709\uff09\n\u8003\u8651\u5982\u4f55\u5408\u5e76\u533a\u95f4\uff1a~~(\u5982\u679c\u4f60\u7406\u89e3\u4e86\u6469\u5c14\u6295\u7968\u6cd5\uff0c\u5c31\u53ef\u4ee5\u201c\u663e\u7136\u201d\u4e86)~~\n```cpp\ninline void Update(int x)//num\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\uff0ccnt\u662fp2397\u4e2d\u7684s\n{\n    if(num[lc]==num[rc]) num[x]=num[lc],cnt[x]=cnt[lc]+cnt[rc];\n    else if(cnt[lc]>cnt[rc]) num[x]=num[lc],cnt[x]=cnt[lc]-cnt[rc];\n    else num[x]=num[rc],cnt[x]=cnt[rc]-cnt[lc];\n}\n```\n\n\u7136\u800c\u4f1a\u53d1\u73b0\u5f97\u51fa\u7684\u603bans\u7684\u4e2a\u6570\u5e76\u4e0d\u4e00\u5b9a>1/2 * size\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u6743\u503c\u5efa\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u7136\u540e\u5c31\u662fP3369\u4e86\uff08\u5176\u5b9e\u53ef\u4ee5\u4e0d\u624b\u6253Treap\u6216Splay\uff0c\u7528\u4e8c\u5206\u52a0vector\u5c31\u53ef\u4ee5\u641e\u5b9a\uff0c\u4f46\u6709\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898->\u89c1code\u6ce8\u91ca\uff09\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<cstdlib>\n#include<vector>\nusing namespace std;\n#define ll long long\n#define lc (x<<1)\n#define rc (x<<1|1)\nconst int INF = 0x7fffffff;\nconst int N   = 500009;\nint Read() {int ret=0,nag=1;char c=getchar();  while (c>'9'||c<'0') {if(c=='-') nag=-1;  c=getchar();}  while (c<='9'&&c>='0')    ret=(ret<<3)+(ret<<1)+c-'0',c=getchar();  return ret*nag;}\nvoid Print(int x) {if(x<0) putchar('-'),x=-x;  if(x>9) Print(x/10);  putchar(x%10+'0');}\nint st[N],n,m,Q;\nint cnt[N<<3],num[N<<3];\ninline void Update(int x)\n{\n    if(num[lc]==num[rc]) num[x]=num[lc],cnt[x]=cnt[lc]+cnt[rc];\n    else if(cnt[lc]>cnt[rc]) num[x]=num[lc],cnt[x]=cnt[lc]-cnt[rc];\n    else num[x]=num[rc],cnt[x]=cnt[rc]-cnt[lc];\n}\nvoid Build(int x,int l,int r)\n{\n    if(l==r) {cnt[x]=1,num[x]=st[l];return;}\n    int mid=(l+r)>>1;\n    Build(lc,l,mid),Build(rc,mid+1,r);\n    Update(x);\n}\nvoid Modify(int x,int l,int r,int w)\n{\n    if(l==r) {cnt[x]=1,num[x]=st[l];return;}\n    int mid=(l+r)>>1;\n    if(w<=mid) Modify(lc,l,mid,w);\n    else Modify(rc,mid+1,r,w);\n    Update(x);\n}\npair<int,int> Query(int x,int l,int r,int L,int R)\n{\n    if(l==L&&r==R){return pair<int,int>(num[x],cnt[x]);}\n    int mid=(l+r)>>1;\n    if(R<=mid) return Query(lc,l,mid,L,R);\n    else if(mid<L) return Query(rc,mid+1,r,L,R);\n    pair<int,int> A=Query(lc,l,mid,L,mid),B=Query(rc,mid+1,r,mid+1,R);\n    int numa=A.first,cnta=A.second,numb=B.first,cntb=B.second;\n    if(numa==numb) return pair<int,int>(numa,cnta+cntb);\n    else if(cnta>cntb) return pair<int,int>(numa,cnta-cntb);\n    else return pair<int,int>(numb,cntb-cnta);\n}\nstruct node//vector\u7248Treap\n{\n    vector<int> a;\n    void Insert(int x){a.insert(lower_bound(a.begin(),a.end(),x),x);}\n    void Del(int x){a.erase(lower_bound(a.begin(),a.end(),x));}\n    int Rank(int x){return lower_bound(a.begin(),a.end(),x)-a.begin()+1;}\n    int Kth(int k){return a[k-1];}\n    int Pre(int x){return a[lower_bound(a.begin(),a.end(),x)-a.begin()-1];}\n    int Nxt(int x){return a[upper_bound(a.begin(),a.end(),x)-a.begin()];}\n}T[N];\nint main ()\n{\n    #ifndef ONLINE_JUDGE\n    freopen(\"INPUT.in\",\"r\",stdin);\n    freopen(\"OUTPUT.out\",\"w\",stdout);\n    #endif\n    n=Read(),Q=Read();for(int i=1;i<=n;i++)   st[i]=Read(),T[st[i]].Insert(i);\n    Build(1,1,n);for(int i=1;i<=n;i++) T[i].Insert(0),T[i].Insert(n+1);//\u4e00\u5b9a\u8981\u6709\uff01\uff01\uff01\u56e0\u4e3alower_bound\u4f1a\u51fa\u73b0\u8fb9\u754c\u95ee\u9898\n    while(Q--)\n    {\n        int l=Read(),r=Read(),s=Read(),k=Read();\n        int res=Query(1,1,n,l,r).first;\n        int sum=T[res].Rank(T[res].Pre(T[res].Nxt(r))) - T[res].Rank(T[res].Pre(l));\n        if(sum<=(r-l+1)/2) res=s;\n        Print(res),puts(\"\");\n        for(int i=1;i<=k;i++)\n        {\n            int x=Read();\n            T[st[x]].Del(x);\n            st[x]=res;Modify(1,1,n,x);\n            T[st[x]].Insert(x);\n        }\n    }\n    int res=Query(1,1,n,1,n).first;\n    int sum=T[res].Rank(T[res].Pre(T[res].Nxt(n))) - T[res].Rank(T[res].Pre(1));\n    if(sum<=n/2) res=-1;\n    Print(res);\n    return 0;\n}\n\n```",
        "postTime": 1543839585,
        "uid": 26926,
        "name": "bjxdw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "\u82e5\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\uff0c \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u627e\u5230\u53ef\u80fd\u7684\u7b54\u6848\uff1a \u8bb0\u5f53\u524d\u53ef\u80fd\u7684\u7b54\u6848\u4e3a x\uff0c \u6743\u503c v \u5f00\u59cb\u4e3a 0\uff0c \u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\uff0c \u5982\u679c\u4e0e x \u4e0d\u540c\uff0c \u82e5 v=0 \u5219\u7528\u8fd9\u4e2a\u6570\u66ff\u6362 x \u5e76\u4f7f v=1\uff0c \u5426\u5219\u4f7f v \u51cf 1\uff1b\u5982\u679c\u4e0e x \u76f8\u540c\u5219\u4f7f v \u52a0 1\u3002\u53ef\u4ee5\u53d1\u73b0\u82e5\u5b58\u5728\u7b54\u6848\u5219\u5fc5\u7136\u662f\u6700\u540e\u7684x\u3002 \u8fd9\u4e2a\u4fe1\u606f\u6ee1\u8db3\u533a\u95f4\u52a0\u6cd5\uff0c \u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c \u6bcf\u6b21\u8be2\u95ee\u627e\u5230\u53ef\u80fd\u5408\u6cd5\u7684\u7b54\u6848\u540e\uff0c \u53ea\u9700\u8981\u68c0\u9a8c\u8be5\u7b54\u6848\u5728\u533a\u95f4\u5185\u51fa\u73b0\u7684\u6b21\u6570\u5373\u53ef\uff0c \u6211\u4eec\u5bf9\u6bcf\u79cd\u6743\u503c\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u51fa\u73b0\u7684\u4f4d\u7f6e\u5373\u53ef\u89e3\u51b3\uff0c\u590d\u6742\u5ea6$O(n log n)$ \u3002\n",
        "postTime": 1494259778,
        "uid": 12462,
        "name": "ditoly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    },
    {
        "content": "[P3765 \u603b\u7edf\u9009\u4e3e](https://www.luogu.org/problemnew/show/P3765)\n\n\u697c\u4e0b\u51e0\u4f4d\u597d\u5f3a\u554a\uff0c\u4e24\u4f4d\u5de8\u4f6c\u90fd\u6ca1\u6709\u7ed9\u51fa\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u4f4d\u5de8\u4f6c\u7528\u4e86$STL$\u7684\u5e73\u8861\u6811\uff0c\u770b\u5f97\u6211\u597d\u65e0\u5948\u554a\u3002\u3002\u3002\n\n\u9996\u5148\u5f97\u4f1a\u8fd9\u9898\uff1a[P2397 yyy loves Maths VI (mode)](https://www.luogu.org/problemnew/show/P2397)\n\n\u76f4\u63a5\u7528\u5bf9\u6297\u6cd5/\u6d88\u53bb\u6cd5\u627e\u5230\u4f17\u6570\u5373\u53ef\u3002\n\n\u90a3\u4e48\uff0c\u5e26\u4e0a\u4fee\u6539\u548c\u591a\u6b21\u8be2\u95ee\u5462\uff1f\n\n\u4e5f\u5c31\u662f\u8fd9\u9898\uff1f\n\n\u6211\u662f\u770b\u8fd9\u4f4d\u5de8\u4f6c\u7684\u535a\u5ba2\u5f04\u61c2\u7684\uff1a[\u94fe\u63a5](https://blog.csdn.net/Ab_Ever/article/details/72675837)\n\n\u6211\u4eec\u53d1\u73b0\u4e0a\u8ff0\u90a3\u4e2a\u5bf9\u6297\u6cd5\u662f\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u5408\u5e76\u7684\u3002\n\n\u4e5f\u5c31\u662f\u80fd\u4ece$[l,mid],[mid+1,r]$\u5408\u5e76\u6210$[l,r]$\u3002\n\n\u8bb0\u5f55\u5f53\u524d\u7684\u533a\u95f4\u4f17\u6570\uff0c\u533a\u95f4\u4f17\u6570\u5728\u5bf9\u6297\u540e\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\n\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5f53\u4e24\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u4f17\u6570\u76f8\u7b49\u65f6\uff0c\u76f4\u63a5\u628a\u6b21\u6570\u76f8\u52a0\u3002\n\n2. \u5f53\u4e24\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u4f17\u6570\u4e0d\u76f8\u65f6\uff0c\u5c06\u51fa\u73b0\u6b21\u6570\u591a\u7684\u4f5c\u4e3a\u5408\u5e76\u540e\u533a\u95f4\u7684\u533a\u95f4\u4f17\u6570\uff0c\u51fa\u73b0\u6b21\u6570\u5c31\u662f$\\text{\u51fa\u73b0\u6b21\u6570\u591a\u7684\u6b21\u6570-\u51fa\u73b0\u6b21\u6570\u5c11\u7684\u6b21\u6570}$\u3002\n\n\u8fd9\u4e2a\u5408\u5e76\u8ba9\u6211\u4eec\u60f3\u8d77\u4e86\u4ec0\u4e48\uff1f\n\n\u6216\u8005\u8bf4\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u7ef4\u62a4\uff1f\n\n### \u7ebf\u6bb5\u6811\uff01\n\n\u4fee\u6539\u76f4\u63a5\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u56e0\u4e3a\u7ef4\u62a4\u4e86\u4e24\u4e2a\u503c\uff1a\u533a\u95f4\u4f17\u6570\u4ee5\u53ca\u51fa\u73b0\u6b21\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\u5c31\u597d\u3002\n\n\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\n\n\u5417\uff1f\n\n\u5e76\u4e0d\u3002\n\n\u56e0\u4e3a\u201c\u4f17\u6570\u201d\u4e0d\u4e00\u5b9a\u5b58\u5728\uff01\n\n\u5c31\u662f\u8bf4\u672a\u5fc5\u6709\u6ee1\u8db3\u9898\u76ee\u7684\u7b54\u6848\uff0c\u6211\u4eec\u7ef4\u62a4\u51fa\u7684\u672a\u5fc5\u662f\u6b63\u786e\u7b54\u6848\uff0c\u53ea\u662f\u7ef4\u62a4\u7684\u90a3\u4e2a\u6570\u662f\u201c\u6700\u5177\u6709\u6210\u4e3a\u2018\u4f17\u6570\u2019\u7684\u6f5c\u8d28\u201d\u7684\u6570\u7f62\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5e73\u8861\u6811\u6765\u68c0\u9a8c\u6211\u4eec\u6c42\u51fa\u7684\u201c\u533a\u95f4\u4f17\u6570\u201d\u662f\u5426\u662f\u771f\u6b63\u7684\u533a\u95f4\u4f17\u6570\u3002\n\n\u68c0\u9a8c\u5f88\u7b80\u5355\uff0c\u6bcf\u4e2a\u4eba\u5f00\u4e2a$Treap$\uff0c\u5224\u65ad\u5728$[l,r]$\u5185\u6709\u51e0\u4e2a\u4eba\u9009\u4ed6\u5c31\u884c\u4e86\u3002\n\n\u5dee\u5206\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u5728$Treap$\u4e0a\u8fdb\u884c\u666e\u901a\u7684\u4e8c\u53c9\u67e5\u627e\u4e86\u3002\n\n\u590d\u6742\u5ea6\u662f$O(\\sum k_i\\log_2n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u9644\u4e0a\u957f\u957f\u7684\u5c01\u88c5\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 500010\nusing namespace std;\nint n,m;\nint val[MAXN];\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nnamespace T{//\u8fd9\u662f\u4e2a\u6307\u9488+\u7ed3\u6784\u4f53\u7684\u88f8\u7684Treap\uff0c\u4e0d\u4e60\u60ef\u53ef\u4ee5\u81ea\u5df1\u5199\uff0c\u56e0\u4e3a\u8fd9\u662f\u7eaf\u677f\u5b50\u3002\u3002\u3002\n\tstruct node{\n\t\tnode* son[2];\n\t\tint v,w,s,flag;\n\t\tnode(){\n\t\t\tson[0]=son[1]=NULL;\n\t\t\tw=rand();\n\t\t\tv=0;\n\t\t\ts=flag=1;\n\t\t}\n\t};\n\tnode* root[MAXN];\n\tinline void maintain(node* &u){\n\t\tu->s=u->flag;\n\t\tif(u->son[0]!=NULL)u->s+=u->son[0]->s;\n\t\tif(u->son[1]!=NULL)u->s+=u->son[1]->s;\n\t}\n\tinline void turn(node* &u,int f){\n\t\tnode* t=u->son[f^1];\n\t\tu->son[f^1]=t->son[f];\n\t\tt->son[f]=u;\n\t\tmaintain(u);\n\t\tmaintain(t);\n\t\tu=t;\n\t}\n\tvoid insert(node* &u,int x){\n\t\tif(u==NULL){\n\t\t\tu=new node;\n\t\t\tu->v=x;\n\t\t\treturn;\n\t\t}\n\t\telse if(u->v==x){\n\t\t\tu->flag++;\n\t\t\tmaintain(u);\n\t\t\treturn;\n\t\t}\n\t\tint y=u->v<x?1:0;\n\t\tinsert(u->son[y],x);\n\t\tif(u->son[y]->w>u->w)turn(u,y^1);\n\t\telse maintain(u);\n\t}\n\tvoid remove(node* &u,int x){\n\t\tif(u==NULL)return;\n\t\tif(u->v==x){\n\t\t\tif(u->flag>1)u->flag--;\n\t\t\telse{\n\t\t\t\tif(u->son[0]==NULL&&u->son[1]==NULL)u=NULL;\n\t\t\t\telse if(u->son[0]!=NULL&&u->son[1]!=NULL){\n\t\t\t\t\tif(u->son[0]->w>u->son[1]->w){\n\t\t\t\t\t\tturn(u,1);\n\t\t\t\t\t\tremove(u->son[1],x);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tturn(u,0);\n\t\t\t\t\t\tremove(u->son[0],x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(u->son[0]==NULL)u=u->son[1];\n\t\t\t\t\telse u=u->son[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u!=NULL)maintain(u);\n\t\t}\n\t\telse{\n\t\t\tif(u->v>x)remove(u->son[0],x);\n\t\t\telse if(u->v<x)remove(u->son[1],x);\n\t\t\tif(u!=NULL)maintain(u);\n\t\t}\n\t}\n\tint query(node* u,int k){//\u8fd9\u4e2a\u51fd\u6570\u662f\u7eaf\u7684\u4e8c\u53c9\u67e5\u627e\n\t\tif(u==NULL)return 0;\n\t\tint lsons=0;\n\t\tif(u->son[0]!=NULL)lsons=u->son[0]->s;\n\t\tif(k<u->v)return query(u->son[0],k);\n\t\telse if(k>=u->v)return lsons+u->flag+query(u->son[1],k);\n\t}\n}\nnamespace ST{//\u7ebf\u6bb5\u6811\uff0c\u4e5f\u662f\u7eaf\u677f\u5b50\uff0c\u4e0d\u4e60\u60ef\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5199\u3002\n\t#define LSON rt<<1\n\t#define RSON rt<<1|1\n\t#define DATA(x) a[x].data\n\t#define NUM(x) a[x].num\n\t#define LSIDE(x) a[x].l\n\t#define RSIDE(x) a[x].r\n\tstruct Segment_Tree{\n\t\tint data,num,l,r;\n\t}a[MAXN<<2];\n\tinline void pushup(int rt){\n\t\tif(DATA(LSON)==DATA(RSON)){\n\t\t\tDATA(rt)=DATA(LSON);\n\t\t\tNUM(rt)=NUM(LSON)+NUM(RSON);\n\t\t}\n\t\telse if(NUM(LSON)>NUM(RSON)){\n\t\t\tDATA(rt)=DATA(LSON);\n\t\t\tNUM(rt)=NUM(LSON)-NUM(RSON);\n\t\t}\n\t\telse{\n\t\t\tDATA(rt)=DATA(RSON);\n\t\t\tNUM(rt)=NUM(RSON)-NUM(LSON);\n\t\t}\n\t}\n\tvoid buildtree(int l,int r,int rt){\n\t\tLSIDE(rt)=l;RSIDE(rt)=r;DATA(rt)=NUM(rt)=0;\n\t\tif(l==r){\n\t\t\tDATA(rt)=val[l];\n\t\t\tNUM(rt)=1;\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuildtree(l,mid,LSON);\n\t\tbuildtree(mid+1,r,RSON);\n\t\tpushup(rt);\n\t}\n\tvoid update(int k,int c,int rt){\n\t\tif(LSIDE(rt)==RSIDE(rt)){\n\t\t\tDATA(rt)=c;\n\t\t\tNUM(rt)=1;\n\t\t\treturn;\t\n\t\t}\n\t\tint mid=LSIDE(rt)+RSIDE(rt)>>1;\n\t\tif(k<=mid)update(k,c,LSON);\n\t\telse update(k,c,RSON);\n\t\tpushup(rt);\n\t}\n\tSegment_Tree query(int l,int r,int rt){\n\t\tif(l<=LSIDE(rt)&&RSIDE(rt)<=r)return a[rt];\n\t\tint mid=LSIDE(rt)+RSIDE(rt)>>1;\n\t\tSegment_Tree ans,lson=(Segment_Tree){0,0,0,0},rson=(Segment_Tree){0,0,0,0};\n\t\tif(l<=mid)lson=query(l,r,LSON);\n\t\tif(mid<r)rson=query(l,r,RSON);\n\t\tif(lson.data==rson.data){\n\t\t\tans.data=lson.data;\n\t\t\tans.num=lson.num+rson.num;\n\t\t}\n\t\telse if(lson.num>rson.num){\n\t\t\tans.data=lson.data;\n\t\t\tans.num=lson.num-rson.num;\n\t\t}\n\t\telse{\n\t\t\tans.data=rson.data;\n\t\t\tans.num=rson.num-lson.num;\n\t\t}\n\t\treturn ans;\n\t}\n}\nvoid work(){\n\tint l,r,s,k,x,ans;\n\twhile(m--){\n\t\tl=read();r=read();s=read();k=read();\n        \n\t\tans=ST::query(l,r,1).data;\n\t\tif((T::query(T::root[ans],r)-T::query(T::root[ans],l-1))<=(r-l+1)/2)ans=s;\n        //\u68c0\u9a8c\u7b54\u6848\n\t\tprintf(\"%d\\n\",ans);//\u6c42\u51fa\u7b54\u6848\n        \n\t\twhile(k--){//\u4fee\u6539\n\t\t\tx=read();\n\t\t\tST::update(x,ans,1);\n\t\t\tT::remove(T::root[val[x]],x);\n\t\t\tval[x]=ans;\n\t\t\tT::insert(T::root[val[x]],x);\n\t\t}\n\t}\n    \n\tans=ST::query(1,n,1).data;\n\tif((T::query(T::root[ans],r)-T::query(T::root[ans],l-1))<=n/2)ans=-1;\n    //\u68c0\u9a8c\u7b54\u6848\n\tprintf(\"%d\\n\",ans);//\u6700\u540e\u8fd8\u6709\u4e00\u904d\u3002\u3002\u3002\n}\nvoid init(){//\u8bfb\u5165+\u9884\u5904\u7406\n\tsrand(2002);//\u968f\u673a\u79cd\u5b50\u968f\u4fbf\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tval[i]=read();\n\t\tT::root[i]=NULL;\n\t}\n\tST::buildtree(1,n,1);\n\tfor(int i=1;i<=n;i++)T::insert(T::root[val[i]],i);\n}\nint main(){//\u4e3b\u51fd\u6570So easy!\n\tinit();\n\twork();\n    return 0;\n}\n\n```",
        "postTime": 1537201027,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3765 \u3010\u603b\u7edf\u9009\u4e3e\u3011"
    }
]