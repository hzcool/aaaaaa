[
    {
        "content": "Solution\n---\n\u53ea\u662f\u672c\u4eba\u81ea\u5df1\u7684\u4ee3\u7801,\u679c\u7136\u5f88\u5f31\n\u8fd9\u9053\u9898\u5c31\u662f\u6211\u7684\u5fcd\u8005\u4eec\u90fd\u770b\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u5806\n\u5bf9\u4e8e\u6bcf\u4e2a\u5fcd\u8005\u6211\u4eec\u5bf9\u8fdb\u884c\u76f8\u5e94\u7684\u679a\u4e3e,\u628a\u4ed6\u7684\u5f53\u4f5c\u9886\u5bfc\u8282\u70b9\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5efa\u5806,\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9,\u5c06\u8be5\u8282\u70b9\u4e0e\u6bcf\u4e2a\u513f\u5b50\u8282\u70b9\u5408\u5e76(\u5de6\u504f\u6811),\u7ef4\u62a4\u5806\u4e2d\u8282\u70b9\u6570\u548c\u5806\u4e2d\u8282\u70b9\u7684\u70b9\u6743\u548c\n```\n#include<bits/stdc++.h>\n#define LL long long\n#define N 100005\nusing namespace std;\ninline int gi(){\n    char ch=getchar();int x=0,q=0;\n    while(ch<'0' || ch>'9') ch=='-'?q=1:0,ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return q?(-x):x;\n}\nstruct Player{\n\tint fa,cost,lead;\n}R[N<<2];\nint n,m;\nLL ans;\nint size[N],root[N],dis[N],ls[N],rs[N];\nLL sum[N];\nvoid BuildHeap(int now){\n\tsize[now]=1;\n\troot[now]=now;\n\tsum[now]=R[now].cost;\n}\nint Merge(int A,int B){\n\tif(!A||!B) return A+B;\n\tif(R[A].cost<R[B].cost) swap(A,B);\n\trs[A]=Merge(rs[A],B);\n\tif(dis[ls[A]]<dis[rs[A]]) swap(ls[A],rs[A]);\n\tdis[A]=dis[rs[A]]+1;\n\treturn A;\n}\nint main(){\n\t//freopen(\"Master.in\",\"r\",stdin);\n\t//freopen(\"Master.out\",\"w\",stdout);\n\tn=gi();m=gi();\n\tfor(int i=1,b,c,l;i<=n;i++){\n\t\tb=gi();c=gi();l=gi();\n\t\tR[i]=(Player){b,c,l};\n\t\tans=max((LL)(R[i].lead),ans);\n\t\tBuildHeap(i);    //\u6bcf\u4e2a\u5fcd\u8005\u770b\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u5806\n\t}\n\tfor(int i=n;i>1;i--){\n\t\tint fa=R[i].fa;          //\u5f53\u524d\u7684\u5fcd\u8005\u770b\u4f5c\u4e3a\u9886\u5bfc,\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u8fdb\u884c\u679a\u4e3e\n\t\troot[fa]=Merge(root[i],root[R[i].fa]);      //\u5408\u5e76\u5f53\u524d\u8282\u70b9\u548c\u672c\u8eab\u7684\u7236\u4eb2\u8282\u70b9\n\t\tsize[fa]+=size[i];sum[fa]+=sum[i];        //\u628a\u5f53\u524d\u7684\u5143\u7d20\u52a0\u5230\u7236\u4eb2\u6570size\u548csum\u90fd\u60f3\u5e94\u6539\u53d8\n\t\twhile(sum[fa]>m){\n\t\t\tsum[fa]-=R[root[fa]].cost;      //\u5982\u679c\u8d85\u8fc7\u4e86\u5220\u9664\u5806\u9876\u5143\u7d20\n\t\t\troot[fa]=Merge(ls[root[fa]],rs[root[fa]]);     \n\t\t\tsize[fa]--;    //\u66f4\u65b0size\n\t\t}\n\t\tans=max(ans,(LL)(R[fa].lead)*(LL)(size[fa]));   //\u53d6max\u7684ans\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1519394693,
        "uid": 61360,
        "name": "KingBenQi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u535a\u5ba2\u5730\u5740\uff1ahttps://www.cnblogs.com/Miracevin/p/9368414.html\n\nn\u4e2a\u70b9\u7ec4\u6210\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u9886\u5bfc\u529b\u548c\u8d39\u7528\uff0c\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u70b9\u5f53\u9886\u5bfc\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u9009\u62e9\u4e00\u4e9b\u8d39\u7528\u4e4b\u548c\u4e0d\u8d85\u8fc7m\u7684\u70b9\uff0c\u5f97\u5230\u9886\u5bfc\u7684\u9886\u5bfc\u529b\u4e58\u9009\u62e9\u7684\u70b9\u7684\u4e2a\u6570\uff08\u9886\u5bfc\u53ef\u4e0d\u88ab\u9009\u62e9\uff09\u7684\u5229\u6da6\u3002\u6c42\u5229\u6da6\u6700\u5927\u503c\u3002\nn\u2264100000 \uff1b\n\n\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u6bcf\u4e2a\u70b9\u5f00\u59cb\u662f\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u5806\u91cc\u7684\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u4eba\u3002\n\n\u5f80\u7236\u4eb2\u90a3\u91cc\u5408\u5e76\u5806\uff0c\u8bb0\u5f55\u5806\u7684\u5927\u5c0f\uff0c\u8d39\u7528\u7684\u603b\u548c\u3002\n\n\u4ece\u513f\u5b50\u5408\u5e76\u5b8c\u6bd5\u540e\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\uff0c\u4e0d\u65ad\u8e22\u51fa\u8d39\u7528\u6700\u5927\u7684\u4eba\uff0c\u76f4\u5230\u8d39\u7528\u7684\u603b\u548c<=m \u8fd9\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u6700\u4f18\u65b9\u6848\u4e86\u3002\uff08\u663e\u7136\uff0c\u82b1\u8d39\u6700\u5c0f\u7684\u90fd\u7559\u4e0b\u4e86\uff09\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7528\u8fd9\u4e2a\u70b9\u7684\u9886\u5bfc\u529b\u4e58\u5806\u7684\u5927\u5c0f\u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n \n\n\u6ce8\u610f\uff1a\u548c\u5b50\u6811\u5408\u5e76\u7684\u65f6\u5019,rt[x]=mer(rt[x],rt[y]) \u6ce8\u610f\u662frt[y]\u56e0\u4e3a\u8fd9\u624d\u662fy\u7684\u6240\u5c5e\u5806\u7684\u5165\u53e3\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=100000+10;\nint n;\nll m;\nll c[N],p[N];\nint rt[N];\nll siz[N];\nll ans;\nstruct node{\n    int nxt,to;\n}e[2*N];\nint hd[N],cnt;\nvoid add(int x,int y){\n    e[++cnt].nxt=hd[x];\n    e[cnt].to=y;\n    hd[x]=cnt;\n}\nstruct tr{\n    int ls,rs,d;\n    ll cos;\n    ll sum,siz;\n}z[N];\nvoid pushup(int x){\n    z[x].sum=z[z[x].ls].sum+z[z[x].rs].sum+z[x].cos;\n    z[x].siz=z[z[x].ls].siz+z[z[x].rs].siz+1;\n}\nint mer(int x,int y){\n    if(!x||!y) return x+y;\n    if(z[x].cos<z[y].cos) swap(x,y);\n    z[x].rs=mer(z[x].rs,y);\n    \n    if(z[z[x].ls].d<z[z[x].rs].d) swap(z[x].ls,z[x].rs);\n    z[x].d=z[z[x].rs].d+1;\n    pushup(x);\n    return x;\n}\nint split(int x){\n    return mer(z[x].ls,z[x].rs);\n}\nvoid dfs(int x,int fa){\n    z[x].cos=c[x];\n    z[x].ls=z[x].rs=0;z[x].siz=1;\n    z[x].sum=c[x];\n    rt[x]=x;\n    for(int i=hd[x];i;i=e[i].nxt){\n        int y=e[i].to;\n        if(y==fa) continue;\n        dfs(y,x);\n        rt[x]=mer(rt[x],rt[y]);//\u6ce8\u610frt[y] \n    }\n    while(z[rt[x]].sum>m&&z[rt[x]].siz){\n        rt[x]=split(rt[x]);\n    }\n    ans=max(ans,z[rt[x]].siz*p[x]);\n}\nint main()\n{\n    scanf(\"%d%lld\",&n,&m);\n    int fa;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%lld%lld\",&fa,&c[i],&p[i]);\n        add(fa,i);add(i,fa);\n    }\n    dfs(1,0);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1532587937,
        "uid": 56672,
        "name": "\u67ab\u6797\u665a",
        "ccfLevel": 9,
        "title": "[APIO2012]\u6d3e\u9063"
    },
    {
        "content": "\n\u5de6\u504f\u6811 + \u6811\u5f62DP\n\n\u8fd9\u9898\u7684\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u7684  \n\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5de6\u504f\u6811\uff08\u5927\u6839\u5806\uff09\uff0c\u540c\u65f6\u7ef4\u62a4\u5806\u5185\u5fcd\u8005\u4e2a\u6570\u548c\u8d39\u7528\u548c  \n\u63a5\u7740\uff0c\u6211\u4eec\u7528 dfs \u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76  \n\u5f53\u6211\u4eec\u5408\u5e76\u5230\u70b9 $x$ \u65f6\uff0c\u6709\u53ef\u80fd\u76ee\u524d\u5806\u5185\u7684\u603b\u8d39\u7528\u4e4b\u548c\u8d85\u51fa\u9884\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u5c06\u8d39\u7528\u6700\u9ad8\u7684\u5fcd\u8005\u4f9d\u6b21\u5f39\u51fa\uff0c\u76f4\u5230\u603b\u8d39\u7528\u4e0d\u8d85\u8fc7\u9884\u7b97\n\n\u8bbe $s[x],c[x],id[x]$ \u5206\u522b\u4e3a $x$ \u6240\u5728\u7684\u5806\u4e2d\u5fcd\u8005\u6570\uff0c\u8d39\u7528\u548c\uff0c\u548c\u8be5\u5806\u7684\u6839\u8282\u70b9\n\n\u5173\u952e\u4ee3\u7801\n\n```cpp\nvoid dfs(long long x)\n{\n\ts[x]=1,c[x]=a[x]; // a[x] \u4e3a\u5fcd\u8005x\u6240\u9700\u7684\u8d39\u7528\n\tfor(long long i=0;i<e[x].size();++i)\n\t{\n\t\tlong long y=e[x][i];\n\t\tdfs(y);\n\t\tid[x]=merge(id[x],id[y]); //\u5408\u5e76\u6240\u6709\u5b50\u8282\u70b9\u6240\u5728\u7684\u5806\n\t\ts[x]+=s[y],c[x]+=c[y];// \u66f4\u65b0\n\t}\n\twhile(c[x]>m) // \u5c06\u6700\u8d35\u7684\u5fcd\u8005\u4f9d\u6b21\u5f39\u51fa\uff0c\u76f4\u5230\u4e0d\u8d85\u8fc7\u9884\u7b97\u4f4d\u7f6e\n\t{\n\t\t--s[x],c[x]-=v(id[x]);\n\t\tid[x]=del(id[x]);\n\t}\n\tans=max(ans,b[x]*s[x]);\n}\n```\n\n\u6ce8\uff1a\u8fd9\u91cc\u7684 \u8d39\u7528\u548c\u4e0e\u5806\u4e2d\u4eba\u6570 \u90fd\u662f\u5728\u5de6\u504f\u6811\u5916\u9762\u7ef4\u62a4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u7b80\u6d01\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5728\u5806\u5185\u7ef4\u62a4\n\n\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst long long Maxn=200000+10,inf=0x3f3f3f3f;\nstruct node{\n\tlong long ls,rs,val,fa,dis;\n\t#define ls(x) g[x].ls\n\t#define rs(x) g[x].rs\n\t#define v(x) g[x].val\n\t#define f(x) g[x].fa\n\t#define dis(x) g[x].dis\n}g[Maxn];\nlong long a[Maxn],b[Maxn];\nlong long s[Maxn],c[Maxn],id[Maxn];\nvector <long long> e[Maxn];\nlong long n,m,root,ans;\ninline long long read()\n{\n\tlong long s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\nvoid init()\n{\n\tfor(long long i=1;i<=n;++i)\n\tf(i)=i,v(i)=a[i];\n}\nlong long merge(long long x,long long y)\n{\n\tif(!x || !y)return x|y;\n\tif(v(x)<v(y))swap(x,y);\n\trs(x)=merge(rs(x),y);\n\tif(dis(rs(x))>dis(ls(x)))swap(ls(x),rs(x));\n\tif(!rs(x) || !ls(x))dis(x)=0;\n\telse dis(x)=dis(rs(x))+1;\n\treturn x;\n}\nlong long del(long long x)\n{\n\tlong long l=ls(x),r=rs(x);\n\tf(l)=l,f(r)=r;\n\tls(x)=rs(x)=dis(x)=0;\n\treturn merge(l,r);\n}\nvoid dfs(long long x)\n{\n\ts[x]=1,c[x]=a[x];\n\tfor(long long i=0;i<e[x].size();++i)\n\t{\n\t\tlong long y=e[x][i];\n\t\tdfs(y);\n\t\tid[x]=merge(id[x],id[y]);\n\t\ts[x]+=s[y],c[x]+=c[y];\n\t}\n\twhile(c[x]>m)\n\t{\n\t\t--s[x],c[x]-=v(id[x]);\n\t\tid[x]=del(id[x]);\n\t}\n\tans=max(ans,b[x]*s[x]);\n}\nint main()\n{\n//\tfreopen(\"in.txt\",\"r\",stdin);\n//\tfreopen(\"out.txt\",\"w\",stdout);\n\tn=read(),m=read();\n\tdis(0)=-1;\n\tfor(long long i=1;i<=n;++i)\n\t{\n\t\tlong long x=read();\n\t\ta[i]=read(),b[i]=read();\n\t\tif(x)e[x].push_back(i);\n\t\telse root=i;\n\t\tid[i]=i;\n\t}\n\tinit();\n\tdfs(root);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1586919532,
        "uid": 120362,
        "name": "Priori_Incantatem",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u55ef\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u3002\n\n\u6211\u4eec\u8003\u8651\u4ee5\u4efb\u610f\u4e00\u4e2a\u70b9$u$\u4e3a\u9886\u5bfc\u8005\u7684\u60c5\u51b5\uff1a\n\n\u663e\u7136\uff0c\u6211\u4eec\u9009\u51fa\u4ee5$u$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d$C$(\u85aa\u6c34)\u6700\u5c0f\u7684$k$\u4e2a\u70b9(\u5fcd\u8005)\uff0c\u4f7f$\\sum{C}\\leq m$\uff0c\u4e14\u4ee4$k$\u5c3d\u91cf\u5927\u3002\u8fd9\u6837\u4ee5$u$\u4e3a\u9886\u5bfc\u8005\u7684\u6700\u5927\u6ee1\u610f\u5ea6\u4e3a$L_{u}*k$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u7684$C$\u79bb\u6563\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9$u$\uff0c\u8bb0\u5f55$C_u$\u7684\u6392\u540d$rk_u$\u3002\u8fd9\u662f\u51c6\u5907\u5de5\u4f5c\u3002\n\n\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u9ad8\u6548\u5730\u6c42\u51fa\u6bcf\u4e2a\u70b9\u4e3a\u9886\u5bfc\u8005\u65f6\u80fd\u6d3e\u9063\u7684\u5fcd\u8005\u7684\u6700\u5927\u6570\u91cf\u3002\n\n\u4e0d\u59a8\u8bbe\u5f53\u524d\u6839\u8282\u70b9\u4e3a$u$\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u5947\u5999\u7684\u65b9\u6cd5\u5c06\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u7684$C$\u5b58\u5165\u4e00\u68f5\u4ee5$rk$\u4e3a\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5728\u8fd9\u68f5\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u4e00\u4e0b\uff0c\u5c31\u80fd\u6c42\u51fa\u6d3e\u9063\u5fcd\u8005\u7684\u6700\u5927\u6570\u91cf(\u56e0\u4e3a\u5728\u8fd9\u68f5\u6811\u4e2d\uff0c\u968f\u7740\u53f6\u5b50\u8282\u70b9\u7684\u4e0b\u6807\u7684\u9012\u589e\uff0c\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5fcd\u8005\u7684\u85aa\u6c34\u5c31\u8d8a\u5927)\u3002\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a***\u5947\u5999\u7684\u65b9\u6cd5***\u5f97\u5230\u8fd9\u6837\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u5408\u5e76\u5b9e\u73b0\u3002\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u5168\u90e8\u9700\u8981\u52a8\u6001\u5f00\u70b9\u3002\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5fcd\u8005(\u5305\u62ec$Master$)\u90fd\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5411\u6811\u4e2d\u63d2\u5165\u8be5\u5fcd\u8005\u7684$C$\uff1b\u7136\u540e\u6211\u4eec\u4ece\u5fcd\u8005\u6811\u7684\u5e95\u5c42\u4f9d\u6b21\u5411\u4e0a\uff0c\u6bcf\u4e00\u6b21\u901a\u8fc7\u6811\u4e0a\u4e8c\u5206\u6c42\u51fa\u5f53\u524d\u70b9\u4e3a\u9886\u5bfc\u8005\u65f6\u80fd\u6d3e\u9063\u7684\u5fcd\u8005\u7684\u6700\u5927\u6570\u91cf\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5fcd\u8005\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u8be5\u5fcd\u8005\u4e0a\u7ea7\u7684\u7ebf\u6bb5\u6811\u4e0a\u3002\u8fd9\u6837\u6211\u4eec\u80fd\u591f\u5728$\\Omega(nlogn)$\u7684\u65f6\u95f4\u5185\u6c42\u51fa\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u53ef\u4ee5\u8bc1\u660e\u4e0d\u4f1a\u51fa\u73b0\u5408\u5e76\u65f6$key$\u76f8\u540c\u7684\u60c5\u51b5\u3002\n\n\u4ee3\u7801(**\u771f\u7684\u5f88\u77ed\uff01\uff01**)\uff1a\n```\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define cint const int\n#define newnode() ++idx\nusing namespace std;\nint lch[3000010],rch[3000010];\nlong long sum[3000010];\nint cnt[3000010];\nint idx;\nint root[100010];\nvoid merge(int &u,cint &v){\n\tif((!u)||(!v)){\n\t\tsum[u+v]=sum[u]+sum[v];\n\t\tcnt[u+v]=cnt[u]+cnt[v];\n\t\tu+=v;\n\t}else{\n\t\tmerge(lch[u],lch[v]);\n\t\tmerge(rch[u],rch[v]);\n\t\tsum[u]=sum[lch[u]]+sum[rch[u]];\n\t\tcnt[u]=cnt[lch[u]]+cnt[rch[u]];\n\t}\n}\nvoid ins(cint &u,cint &left,cint &right,cint &pos,cint &w){\n\tsum[u]+=w;\n\t++cnt[u];\n\tif(right-left>1){\n\t\tif(pos<((left+right)>>1)){\n\t\t\tif(!lch[u])lch[u]=newnode();\n\t\t\tins(lch[u],left,(left+right)>>1,pos,w);\n\t\t}else{\n\t\t\tif(!rch[u])rch[u]=newnode();\n\t\t\tins(rch[u],(left+right)>>1,right,pos,w);\n\t\t}\n\t}\n}\nint bisearch(cint &u,cint &left,cint &right,cint &limit){\n\tif(!u)return 0;\n\tif(right-left>1){\n\t\tif(sum[lch[u]]<limit)\n\t\t\treturn cnt[lch[u]]+bisearch(rch[u],(left+right)>>1,right,limit-sum[lch[u]]);\n\t\telse\n\t\t\treturn bisearch(lch[u],left,(left+right)>>1,limit);\n\t}else{\n\t\tif(sum[u]<=limit)return 1;\n\t\telse return 0;\n\t}\n}\nstruct node{\n\tint a,b;\n\tinline bool operator<(const node &v)const{return a<v.a;}\n};\nint n,m;\nint b[100010],c[100010];\nlong long l[100010];\nnode t[100010];\nint rk[100010];\nlong long ans;\nint main(){\n\tint i,j,k;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;++i){\n\t\tscanf(\"%d%d%lld\",b+i,c+i,l+i);\n\t\tt[i]={c[i],i};\n\t}\n\tstable_sort(t+1,t+n+1);\n\tfor(i=1;i<=n;++i){\n\t\tk=t[i].b;\n\t\trk[k]=i;\n\t\troot[k]=newnode();\n\t\tins(root[k],1,n+1,rk[k],c[k]);\n\t}\n\tfor(i=n;i;--i){\n\t\tans=max(ans,l[i]*bisearch(root[i],1,n+1,m));\n\t\tif(b[i])merge(root[b[i]],root[i]);\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```",
        "postTime": 1518091402,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u9996\u5148\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u91c7\u7528\u6811\u5f62DP\u7684\u65b9\u6cd5\u5411\u4e0a\u5408\u5e76\u89e3\u3002\n\n\n\u6545\u60f3\u5230\u4f7f\u7528\u53ef\u5e76\u5806\u3002\u4f46\u662f\u662f\u5927\u6839\u5806\u8fd8\u662f\u5c0f\u6839\u5806\uff1f\n\n\n\u82e5\u5c0f\u6839\u5806(\u6211\u6700\u5f00\u59cb\u5199\u7684)\uff0c\u5e94\u5f53\u987a\u5e8f\u7edf\u8ba1\uff0c\u76f4\u5230\u548c\u5927\u4e8em\u4e3a\u6b62\uff0c\u5176\u4ed6\u5168\u90e8pop\n\n\n\u770b\u51fa\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002(\u7136\u800c\u6211\u6ca1\u6709TLE\uff0cWA\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002)\n\n\n\u5927\u6839\u5806\u7684\u8bdd\uff0c\u5f39\u51fa\u5143\u7d20\u76f4\u5230\u5143\u7d20\u548c<=m.\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u3002\n\n\n\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62\u53d8\u91cf\u4e4b\u95f4\u7684\u51b2\u7a81\uff0c\n\n\n\u8fd8\u8981\u8bbe\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u5f53\u524d\u70b9\u6240\u5c5e\u7684\u5806\u3002\uff08\u53ef\u80fd\u6211\u5c31WA\u5728\u8fd9\u91cc\u5427\u3002\u3002\u3002\u3002\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define RG register\n#define il inline\n#define N 100010\n#define LL long long\nusing namespace std;\nint v[N],l[N],r[N],d[N],L[N],n,head[N],tot,BL[N],sz[N];LL sum[N];\nstruct ed{int nxt,to;}e[N];int m;LL ans;\nvoid add(RG int u,RG int v){e[tot].nxt=head[u];e[tot].to=v;head[u]=tot++;}\nil int merge(RG int x,RG int y){\n  if(!x||!y)return x+y;\n  if(v[x]<v[y])swap(x,y);\n  r[x]=merge(r[x],y);\n  if(d[r[x]]>d[l[x]])swap(r[x],l[x]);\n  d[x]=d[r[x]]+1;return x;\n}\nil int getint(){\n    int w=0;bool q=0;\n    char c=getchar();\n    while((c>'9'||c<'0')&&c!='-') c=getchar();\n    if(c=='-') c=getchar(),q=1;\n    while(c>='0'&&c<='9') w=w*10+c-'0',c=getchar();\n    return q?-w:w;\n}\nil void dfs(int u){BL[u]=u;sum[u]=v[u];sz[u]=1;\n  for(RG int i=head[u];i!=-1;i=e[i].nxt){\n      RG int v=e[i].to;\n      dfs(v);sum[u]+=sum[v];\n      sz[u]+=sz[v];\n      BL[u]=merge(BL[u],BL[v]);\n  }while(sum[u]>m&&sz[u]){\n    sum[u]-=v[BL[u]];\n    BL[u]=merge(r[BL[u]],l[BL[u]]);\n    sz[u]--;\n  }ans=max(ans,(LL)sz[u]*L[u]);\n}\nint main(){\n  freopen(\"dispatching.in\",\"r\",stdin);\n  freopen(\"dispatching.out\",\"w\",stdout);\n  memset(head,-1,sizeof(head));\n  n=getint(),m=getint();\n  for(RG int i=1;i<=n;++i){int ytk;\n    ytk=getint(),v[i]=getint(),L[i]=getint();\n    add(ytk,i);\n  }dfs(1);printf(\"%lld\",ans);\n  return 0;\n}\n\n```",
        "postTime": 1501497407,
        "uid": 23122,
        "name": "\u57c3\u7f57\u8292\u963f\u8001\u5e08\u00b7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u5b9e\u9645\u4e0a\u4e0d\u7528\u5de6\u504f\u6811\u4e5f\u53ef\u4f5c\u3002\u3002\n\n\u53ef\u4ee5\u7528\u5e73\u8861\u6811+\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u65b9\u6cd5\u4e0e\u697c\u4e0a\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5904\u7406\u67d0\u4e2a\u5b50\u6811\u4e2d\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5c31\u8d2a\u5fc3\u7684\u9009\u62e9\u5c3d\u91cf\u5c0f\u7684\u85aa\u6c34\uff0c\u5e76\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e0d\u8d85\u8fc7M\u3002\n\n```cpp\n\n\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<typename Type>\nvoid Get_Val(Type &Ret)\n{\n    Ret = 0;\n    char ch;\n    while (ch = getchar(), ch > '9' || ch < '0')\n        ;\n    do\n    {\n        (Ret *= 10) += ch - '0';\n    }\n    while (ch = getchar(), ch >= '0' && ch <= '9');\n}\n\nconst int Max_N(100050);\n\nstruct UFS\n{\n    int Father[Max_N];\n    void given(const int&);\n    int Get_Father(const int&);\n};\nUFS Tree;\n\nvoid UFS::given(const int &n)\n{\n    for (int i = 1;i <= n;++i)\n        Father[i] = i;\n}\n\nint UFS::Get_Father(const int &x)\n{\n    return Father[x] == x ? x : Father[x] = Get_Father(Father[x]);\n}\n\nstruct Treap\n{\n    Treap(const long long int &v = 0) : v(v), sumv(v), size(1)\n    {\n        priority = rand();\n        ch[0] = ch[1] = NULL;\n    }\n    int priority;\n    long long int v, sumv;\n    int size;\n    Treap *ch[2];\n};\nTreap *root[Max_N];\n\nvoid pushup(Treap *&o)\n{\n    o -> sumv = o -> v, o -> size = 1;\n    if (o -> ch[0] != NULL)\n    {\n        o -> sumv += o -> ch[0] -> sumv;\n        o -> size += o -> ch[0] -> size;\n    }\n    if (o -> ch[1] != NULL)\n    {\n        o -> sumv += o -> ch[1] -> sumv;\n        o -> size += o -> ch[1] -> size;\n    }\n}\n\nvoid rotate(Treap *&o, const int &d)\n{\n    Treap *k = o -> ch[d ^ 1];\n    o -> ch[d ^ 1] = k -> ch[d];\n    k -> ch[d] = o;\n    pushup(o), pushup(k), o = k;\n}\n\nvoid insert(Treap *&o, const long long int &v)\n{\n    if (o == NULL)\n        o = new Treap(v);\n    else\n    {\n        int d = v > o -> v;\n        insert(o -> ch[d], v);\n        if (o -> ch[d] -> priority > o -> priority)\n            rotate(o, d ^ 1);\n    }\n    pushup(o);\n}\n\nvoid merge(Treap *&a, Treap *&b)\n{\n    if (a == NULL)\n        return;\n    merge(a -> ch[0], b);\n    merge(a -> ch[1], b);\n    insert(b, a -> v);\n    delete a, a = NULL;\n}\n\nvoid addedge(const int &u, const int &v)\n{\n    int f1 = Tree.Get_Father(u), f2 = Tree.Get_Father(v);\n    if (f1 != f2)\n        if (root[f1] -> size < root[f2] -> size)\n        {\n            merge(root[f1], root[f2]);\n            Tree.Father[f1] = f2;\n        }\n        else\n        {\n            merge(root[f2], root[f1]);\n            Tree.Father[f2] = f1;\n        }\n}\n\nint maxsize(Treap *o, const long long int &m)\n{\n    if (o == NULL || m == 0LL)\n        return 0;\n    long long int sv = (o -> ch[0] == NULL ? 0 : o -> ch[0] -> sumv) + o -> v;\n    int s = (o -> ch[0] == NULL ? 0 : o -> ch[0] -> size) + 1;\n    if (m >= sv)\n        return s + maxsize(o -> ch[1], m - sv);\n    else\n        return maxsize(o -> ch[0], m);\n}\n\nint N;\nlong long int M;\nint Father[Max_N];\nlong long int C[Max_N], L[Max_N];\n\nvoid init()\n{\n    Get_Val(N), Get_Val(M);\n    for (int i = 1;i <= N;++i)\n    {\n        Get_Val(Father[i]), Get_Val(C[i]), Get_Val(L[i]);\n        root[i] = new Treap(C[i]);\n    }    \n    Tree.given(N);\n}\n\nvoid work()\n{\n    long long int Ans(0LL);\n    for (int i = N;i >= 1;--i)\n    {\n        Ans = max(Ans, maxsize(root[Tree.Get_Father(i)], M) * L[i]);\n        if (i != 1)\n            addedge(i, Father[i]);\n    }\n    printf(\"%lld\\n\", Ans);\n}\n\nint main()\n{\n    init();\n    work();\n    return 0;\n}\n\n```",
        "postTime": 1456494831,
        "uid": 3182,
        "name": "Created_equal1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u5de6\u504f\u6811\u88f8\u9898\u3002\n\n\u660e\u663e\u9886\u5bfc\u5173\u7cfb\u5f62\u6210\u4e00\u68f5\u6811\uff0c\u5219\u7b54\u6848\u4e3aans=max{L[u]\\times k}\uff0c\u5176\u4e2dk\u4ee3\u8868\u4ee5u\u4e3a\u6839\u7684\u5b57\u6570\u4e2d\u9009\u51fa\u7684\u8282\u70b9\u6570\u4e2a\u6570\uff08\u8bbe\u8fd9\u4e9b\u8282\u70b9\u4e3av\\_1,v\\_2\\cdots v\\_k\uff09\u4e14\u6709\\sum\\_{i=1}^{k}C[v\\_i]\\leq M\u3002\n\n\u6240\u4ee5\u4ee5\u6bcf\u4e2a\u8282\u70b9\u5efa\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u7ef4\u62a4\u85aa\u6c34\u503c\u3002\u521d\u59cb\u65f6\u82e5\u81ea\u5df1\u6ee1\u8db3\u6761\u4ef6\u5c31\u9009\u81ea\u5df1\uff0c\u5426\u5219\u4e0d\u9009\u3002\u4ece\u53f6\u5b50\u8282\u70b9\u5f80\u4e0a\u63a8\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u4e0e\u5b83\u7684\u513f\u5b50\u8282\u70b9\u5408\u5e76\u3002\u5982\u679c\u5f53\u524d\u7684\u9009\u62e9\u8d39\u7528\u8d85\u51fa\u4e86M\uff0c\u5c31\u5f39\u51fa\u5806\u91cc\u6700\u5927\u7684\uff0c\u4e00\u76f4\u5230\u4e0d\u8d85\u8fc7M\u4e3a\u6b62\u3002\u52a8\u6001\u7ef4\u62a4\u5f53\u524d\u9009\u62e9\u7684\u8282\u70b9\u6570num\u548c\u9009\u62e9\u8d39\u7528sum\u5373\u53ef\u3002\u590d\u6742\u5ea6\u6709\u70b9\u96be\u5206\u6790\uff0c\u4e0d\u8fc7\u5927\u6982\u662fO(nlogn)\u7ea7\u522b\uff1f\u5982\u679c\u6709\u5927\u795e\u77e5\u9053\u8bf7\u6559\u6211orz\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\ntypedef long long ll;\nconst int maxn=100005,maxe=100005;\nint val[maxn],lc[maxn],rc[maxn],dis[maxn],root[maxn],l[maxn],num[maxn],c[maxn],head[maxn],next[maxe],to[maxe],sum[maxn],n,m,cnt,b,w;\nll ans;\nvoid swap(int&a,int&b){int c=a;a=b,b=c;}\nint merge(int x,int y)\n{\n    if(!x||!y)return x?x:y;\n    if(val[x]<val[y])swap(x,y);\n    rc[x]=merge(rc[x],y);\n    if(!lc[x]||dis[lc[x]]<dis[rc[x]])swap(lc[x],rc[x]);\n    dis[x]=dis[rc[x]]+1;\n    return x;\n}\nvoid insert(int a,int b){to[cnt]=b,next[cnt]=head[a];head[a]=cnt++;}\nll max(ll a,ll b){return a>b?a:b;}\nint main()\n{\n    memset(head,-1,sizeof head);dis[0]=-1;\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=n;++i)\n    {\n        scanf(\"%d%d%d\",&b,c+i,l+i);\n        insert(b,i);\n    }\n    for(register int u=n;u;--u)\n    {\n        if(c[u]<=m)root[u]=++w,num[u]=1,val[w]=sum[u]=c[u];\n        for(register int i=head[u],v=to[i];~i;v=to[i=next[i]])\n        {\n            root[u]=merge(root[u],root[v]);\n            sum[u]+=sum[v],num[u]+=num[v];\n            while(sum[u]>m)\n            {\n                sum[u]-=val[root[u]];--num[u];\n                root[u]=merge(lc[root[u]],rc[root[u]]);\n            }\n        }\n        ans=max(ans,(ll)l[u]*num[u]);\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1481461291,
        "uid": 13180,
        "name": "amazingOZR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u5fcd\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u6811\u5f62\u7ed3\u6784\u3002\n\n\u53d1\u73b0\u7b54\u6848\u7684\u7edf\u8ba1\u53ea\u662f\u5728\u8be5\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u901a\u8fc7\u6811\u5f62$DP$\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8003\u8651\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u4f18\u7b54\u6848\u53ea\u4e0e\u4ed6\u7684\u9886\u5bfc\u529b\u548c\u5728\u5b50\u6811\u4e2d\u9009\u4e86\u51e0\u4e2a\u70b9\u6709\u5173\uff0c\u4e0e\u9009\u54ea\u4e9b\u70b9\u65e0\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6700\u5927\u5316\u9009\u70b9\u7684\u4e2a\u6570\u3002\n\n\u8d2a\u5fc3\u7b56\u7565\u5373\u4e3a\u5c3d\u53ef\u80fd\u7684\u591a\u9009\u70b9\uff0c\u5f53\u9009\u51fa\u7684\u70b9\u7684\u85aa\u6c34\u8d85\u8fc7\u9884\u7b97\u65f6\uff0c\u5220\u53bb\u5f53\u524d\u9009\u51fa\u7684\u70b9\u4e2d\u85aa\u6c34\u6700\u5927\u7684\u70b9\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u7b56\u7565\u6765\u4fdd\u8bc1\u6211\u4eec\u80fd\u9009\u51fa\u6700\u591a\u7684\u70b9\u3002\n\n\u901a\u8fc7\u53ef\u5e76\u5806\uff08\u5de6\u504f\u6811\uff09\u6765\u5b9e\u73b0\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e9b\u4fe1\u606f\uff0c\u9009\u51fa\u70b9\u7684\u85aa\u6c34\u603b\u548c$sum$\uff0c\u9009\u51fa\u70b9\u7684\u4e2a\u6570$siz$\u3002\n\n\u5176\u4ed6\u7684\u4e00\u4e9b\u7ec6\u8282\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u7edf\u8ba1\u7b54\u6848\u8bb0\u5f97\u5f00$long\\ long$\u3002\n\n$code:$\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nll n,m,root,ans;\nll fa[maxn],ls[maxn],rs[maxn],dis[maxn],val[maxn],l[maxn],sum[maxn],siz[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nint find(int x)\n{\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nint merge(int x,int y)\n{\n\tif(x==y) return 0;\n    if(!x||!y) return x+y;\n\tif(val[x]<val[y]) swap(x,y);\n\trs[x]=merge(rs[x],y),fa[rs[x]]=x;\n\tif(dis[ls[x]]<dis[rs[x]]) swap(ls[x],rs[x]);\n\tif(rs[x]) dis[x]=dis[rs[x]]+1;\n\telse dis[x]=0;\n\treturn x;\n}\nvoid del(int x)\n{\n\tfa[ls[x]]=ls[x],fa[rs[x]]=rs[x];\n\tfa[x]=merge(ls[x],rs[x]);\n}\nvoid dfs(int x)\n{\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        dfs(y);\n        siz[x]+=siz[y];\n        sum[x]+=sum[y];\n        merge(find(x),find(y));\n    }\n    while(sum[x]>m)\n    {\n        int rootx=find(x);\n        siz[x]--;\n        sum[x]-=val[rootx];\n        del(rootx);\n    }\n    ans=max(ans,l[x]*siz[x]);\n}\nint main()\n{\n\tread(n),read(m);\n    for(int i=1;i<=n;++i)\n    {\n        int fath;\n        read(fath),read(val[i]),read(l[i]);\n        sum[i]=val[i],siz[i]=1,fa[i]=i;\n        if(fath) add(fath,i);\n        else root=i;\n    }\n    dfs(root);\n    printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1576403275,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "**\u9898\u610f**\n\n\u7ed9\u5b9a\u4e00\u4e2a$1$\u4e3a\u6839\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709$c,w$\u4e24\u4e2a\u5c5e\u6027\uff0c\u4f60\u9700\u8981\u4ece\u67d0\u4e2a\u70b9$u$\u5b50\u6811\u91cc\u9009\u62e9$k$\u4e2a\u70b9\uff0c\u6ee1\u8db3\u9009\u51fa\u6765\u7684\u70b9$\\sum_{i=1}^k w(i)\\leq m$\uff0c\u6700\u5927\u5316$k\\times c(u)$\n\n**\u9898\u89e3**\n\n\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76$splay$\u6765\u505a\uff0c$\\text{dfs}$\u6bcf\u4e2a\u70b9\uff0c\u6bcf\u6b21\u548c\u513f\u5b50\u7684$splay$\u5408\u5e76\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u5b50\u6811\u7684\u5e73\u8861\u6811\u3002\u518d\u7528\u8fd9\u4e2a\u70b9\u7684$w$\uff08\u9898\u76ee\u4e2d\u7684\u9886\u5bfc\u529b\uff09\u4e58\u4ee5\u5b50\u6811\u4e2d\u6700\u591a\u9009\u591a\u5c11\u7ed3\u70b9\u6ee1\u8db3$c$\uff08\u85aa\u6c34\uff09\u548c$\\leq m$\n\n\u80af\u5b9a\u8d2a\u5fc3\u9009\uff0c\u5c0f\u7684\u5148\u9009\n\n\u7136\u540e\u8fd9\u73a9\u610f\u6211\u4e00\u5f00\u59cb\u8111\u62bd\u5199\u4e86\u4e8c\u5206$+kth$\u7684\u4e24\u4e2a$\\log$\u505a\u6cd5\uff0c\u4f1a$\\text{TLE}$\u4e00\u4e2a\u70b9\uff0c$97pts$\uff1a\n\n```cpp\nint kth(int u, int k) {\n    while(1) {\n        if(sz[ch[u][0]] >= k) u = ch[u][0];\n        else {\n            k -= sz[ch[u][0]] + 1;\n            if(k <= 0) break ;\n            u = ch[u][1];\n        }\n    }\n    splay(u);\n    return u;\n}\n\nll qsum(int &u, int k) {\n    u = kth(u, k);\n    return sum[ch[u][0]] + w[u];\n}\nll query(int &u) {\n    int l = 1, r = sz[u], ans = 0;\n    while(l <= r) {\n        int mid = (l + r) >> 1;\n        if(qsum(u, mid) <= m) l = (ans = mid) + 1;\n        else r = mid - 1;\n    }\n    return ans;\n}\n```\n\n\u540e\u6765\u53d1\u73b0\u76f4\u63a5\u9012\u5f52\u627e\u5c31\u884c\u4e86\uff0c\u5341\u5206\u7b80\u5355\uff0c\u4ece\u5de6\u5b50\u6811\u5f80\u81ea\u5df1\u5f80\u53f3\u5b50\u6811\u4f9d\u6b21\u5224\u80fd\u4e0d\u80fd\u9009\u8fdb\u53bb\n\n\u6700\u540e\u7684\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u4e86qwq\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\ntypedef long long ll;\n\nconst int N = 2e5 + 10;\n\nint n, m, w[N], c[N];\nint fa[N], sz[N], ch[N][2];\nvector<int> G[N];\nll ans, sum[N];\n\nint dir(int u) { return ch[fa[u]][1] == u; }\nvoid upd(int u) {\n    sum[u] = sum[ch[u][0]] + sum[ch[u][1]] + w[u];\n    sz[u] = sz[ch[u][0]] + sz[ch[u][1]] + 1;\n}\nvoid rotate(int u) {\n    int d = dir(u), f = fa[u];\n    if(fa[u] = fa[f]) ch[fa[u]][dir(f)] = u;\n    if(ch[f][d] = ch[u][d ^ 1]) fa[ch[f][d]] = f;\n    fa[ch[u][d ^ 1] = f] = u;\n    upd(f); upd(u);\n}\nvoid ins(int &rt, int u, int f = 0) {\n    if(!rt) {\n        rt = u; fa[u] = f;\n        sz[u] = 1; sum[u] = w[u];\n        ch[u][0] = ch[u][1] = 0;\n        return ;\n    }\n    ins(ch[rt][w[u] > w[rt]], u, rt);\n    upd(rt);\n}\nvoid splay(int u) {\n    for(; fa[u]; rotate(u)) if(fa[fa[u]])\n        rotate(dir(u) == dir(fa[u]) ? fa[u] : u);\n}\nll query(int u, ll s) {\n    if(!u || !s) return 0;\n    if(sum[u] <= s) return sz[u];\n    if(sum[ch[u][0]] >= s) return query(ch[u][0], s);\n    if(sum[ch[u][0]] + w[u] == s) return sz[ch[u][0]] + 1;\n    if(sum[ch[u][0]] + w[u] > s) return sz[ch[u][0]];\n    return sz[ch[u][0]] + 1 + query(ch[u][1], s - sum[ch[u][0]] - w[u]);\n}\n\nint a[N], l;\nvoid get(int u) {\n    if(u) {\n        get(ch[u][0]);\n        a[++ l] = u;\n        get(ch[u][1]);\n    }\n}\nint merge(int u, int v) {\n    if(sz[u] < sz[v]) swap(u, v);\n    l = 0; get(v); int rt = u;\n    for(int i = 1; i <= l; i ++) {\n        ins(rt, a[i]);\n        splay(rt = a[i]);\n    }\n    return rt;\n}\n\nint dfs(int u) {\n    int rt = u; sz[u] = 1; sum[u] = w[u];\n    fa[u] = ch[u][0] = ch[u][1] = 0;\n    for(int i = 0; i < G[u].size(); i ++)\n        rt = merge(rt, dfs(G[u][i]));\n    ans = max(ans, c[u] * query(rt, m));\n    return rt;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for(int f, i = 1; i <= n; i ++) {\n        scanf(\"%d%d%d\", &f, &w[i], &c[i]);\n        G[f].push_back(i);\n    }\n    dfs(1);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1550151220,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "P1552 \u300cAPIO 2012\u300d\u6d3e\u9063\u300c\u542f\u53d1\u5f0f\u5408\u5e76\u300d"
    },
    {
        "content": "\u5177\u4f53\u601d\u8def\u5c31\u4e0d\u8bb2\u60f9\u3002\r\n\r\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u7528 STL \u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u8dd1\u5f97\u5f88\u5feb\u3002\r\n\r\n\u542f\u53d1\u5f0f priority_queue \u64cd\u4f5c\u3002\r\n\r\n```cpp\r\n#include<iostream>\r\n#include<cstdio>\r\n#include<algorithm>\r\n#include<queue>\r\n#define ll long long\r\n#define N 100005\r\n\r\nll n,m;\r\n\r\nstruct P{\r\nll f,c,l;\r\nll head,sum;\r\nP(){sum = 0;}\r\n}T[N];\r\n\r\nstd::priority_queue<ll>QWQ[N];\r\n\r\nll head[N],cnt,ans;\r\n\r\nstruct E{int to,next;}e[N << 1];\r\n\r\ninline void add(int x,int y){\r\n\te[++cnt].to = y;\r\n\te[cnt].next = head[x];\r\n\thead[x] = cnt;\r\n}\r\n\r\ninline void merge(int x,int y){//x -> y\r\n\tif(QWQ[T[x].head].size() > QWQ[T[y].head].size())\r\n\tstd::swap(T[x].head,T[y].head),std::swap(T[x].sum,T[y].sum);\r\n\twhile(QWQ[T[x].head].size())\r\n\tQWQ[T[y].head].push(QWQ[T[x].head].top()),T[y].sum += QWQ[T[x].head].top(),QWQ[T[x].head].pop();\r\n}\r\n\r\ninline void dfs(int u,int f){\r\n//\tstd::cout<<u<<\" \"<<f<<std::endl;\r\n\tif(T[u].c <= m)\r\n\tQWQ[T[u].head].push(T[u].c),T[u].sum += T[u].c;\r\n\tfor(int i = head[u];i;i = e[i].next){\r\n\t\tint v = e[i].to;\r\n\t\tif(v == f)\r\n\t\tcontinue;\r\n\t\tdfs(v,u);\r\n\t\tmerge(v,u);\r\n\t}\r\n\twhile(T[u].sum > m)\r\n\tT[u].sum -= QWQ[T[u].head].top(),QWQ[T[u].head].pop();\r\n\tans = std::max((1ull) * ans, T[u].l * QWQ[T[u].head].size());\r\n}\r\n\r\nint main(){\r\n\tscanf(\"%lld%lld\",&n,&m);\r\n\tfor(int i = 1;i <= n;++i)\r\n\t\tscanf(\"%lld%lld%lld\",&T[i].f,&T[i].c,&T[i].l),add(T[i].f,i);\r\n\tfor(int i = 1;i <= n;++i)\r\n\tT[i].head = i;\r\n\tdfs(1,0);\r\n\tstd::cout<<ans<<std::endl;\r\n}\r\n```\r\n",
        "postTime": 1621949508,
        "uid": 138390,
        "name": "fhq_treap",
        "ccfLevel": 7,
        "title": "[APIO2012]\u6d3e\u9063"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P1552)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8d2a\u5fc3$+$\u4e3b\u5e2d\u6811\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0d\u96be\u60f3\u5230\u4e00\u79cd\u8d2a\u5fc3\u601d\u8def\uff0c\u4e5f\u5c31\u662f\u679a\u4e3e\u4f5c\u4e3a\u7ba1\u7406\u8005\u7684\u70b9$u$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u6d3e\u9063\u7684\u5fcd\u8005\u5c31\u53ea\u80fd\u5728$u$\u7684\u5b50\u6811\u5185\u4e86\u3002\u6211\u4eec\u80af\u5b9a\u662f\u5c3d\u91cf\u9009\u53d6\u6700\u591a\u7684\u5fcd\u8005\uff0c\u8fd9\u6837\u6ee1\u610f\u5ea6\u624d\u53ef\u4ee5\u5c3d\u91cf\u5927\u3002\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u5c31\u5148\u9009\u62e9\u6700\u4fbf\u5b9c\u7684\u5fcd\u8005\u52a0\u5165\u6d3e\u9063\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5230\u8fd9\u4e9b\u53ef\u9009\u7684\u5fcd\u8005\u90fd\u5728$u$\u7684\u5b50\u6811\u5185\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4e00\u79cd\u7ecf\u5178\u7684\u5957\u8def\uff0c\u5c31\u662f\u628a\u6240\u6709\u7684\u70b9\u6309\u7167$DFS$\u5e8f\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u6784\u5efa\u4e3b\u5e2d\u6811\u3002\u6bcf\u6b21\u67e5\u8be2\u5c31\u53ef\u4ee5\u53c2\u8003\u9759\u6001\u533a\u95f4\u7b2c$K$\u5927\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u5728\u4e3b\u5e2d\u6811\u4e0a\u9762\u4e8c\u5206\uff0c\u5e76\u4e14\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u52a0\u5165\u6d3e\u9063\u7684\u5fcd\u8005\u4e00\u5b9a\u662f\u5f53\u524d\u6700\u4fbf\u5b9c\u7684\u3002\u6784\u5efa\u4e3b\u5e2d\u6811\u4e4b\u540e\u626b\u4e00\u904d\u70b9\uff0c\u7528\u4e0a\u9762\u8bf4\u5230\u7684\u65b9\u6cd5\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9884\u5904\u7406\u4e3b\u5e2d\u6811\u53ef\u4ee5\u79bb\u6563\u5316\u4e4b\u540e\u518d\u6784\u5efa\uff0c\u5f53\u7136~~\u61d2\u4e86\u7684\u8bdd~~\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u52a8\u6001\u5f00\u70b9\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u65f6\u95f4\u662f$O(n\\log_2n)$\uff08\u79bb\u6563\u5316\uff09\uff0c\u6216\u8005$O(n\\log_2m)$\uff08\u52a8\u6001\u5f00\u70b9\uff09\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n\ntypedef long long LL;\n\nconst int MAXN = 1e5 + 5, MAXLOG = 35, up = 1e9;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar(); int f = 1;\n\twhile( s < '0' || '9' < s ){ f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ){ x = ( x << 3 ) + ( x << 1 ) + s - '0', s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ), x = -x; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct segmentTreeNode\n{\n\tLL s; int lch, rch, siz;\n\t#define s( a ) ( segTree[a].s )\n\t#define siz( a ) ( segTree[a].siz )\n\t#define lch( a ) ( segTree[a].lch )\n\t#define rch( a ) ( segTree[a].rch )\n}segTree[MAXN * MAXLOG];\n\nstruct edge\n{\n\tint to, nxt;\n}Graph[MAXN];\n\nint seq[MAXN], rt[MAXN], tsiz[MAXN];\nint head[MAXN], DFN[MAXN], C[MAXN], L[MAXN];\nLL res;\nint N, M, cnt, siz, ID;\n\nvoid addEdge( const int from, const int to ) { Graph[++ cnt].to = to, Graph[cnt].nxt = head[from], head[from] = cnt; }\nvoid upt( const int u ) { s( u ) = s( lch( u ) ) + s( rch( u ) ), siz( u ) = siz( lch( u ) ) + siz( rch( u ) ); }\n\nint update( const int u, const int l, const int r, const int pos )\n{\n\tint cur = ++ siz, mid = l + r >> 1; segTree[cur] = segTree[u];\n\tif( pos <= l && r <= pos ) { s( cur ) += pos, siz( cur ) ++; return cur; }\n\tif( pos <= mid ) lch( cur ) = update( lch( u ), l, mid, pos );\n\telse rch( cur ) = update( rch( u ), mid + 1, r, pos );\n\tupt( cur ); return cur;\n}\n\nint query( const int lr, const int rr, const int l, const int r, const int mon )\n{\n\tif( ! lr && ! rr ) return 0;\n\tif( l == r ) return mon / l;\n\tLL cost = s( lch( rr ) ) - s( lch( lr ) );\n\tint mid = l + r >> 1;\n\tif( mon <= cost ) return query( lch( lr ), lch( rr ), l, mid, mon );\n\telse return siz( lch( rr ) ) - siz( lch( lr ) ) + query( rch( lr ), rch( rr ), mid + 1, r, mon - cost );\n}\n\nvoid DFS( const int u ) \n{ \n\ttsiz[u] = 1, seq[++ ID] = u, DFN[u] = ID; \n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt ) \n\t\tDFS( v = Graph[i].to ), tsiz[u] += tsiz[v]; \n}\n\nvoid solve( const int u )\n{\n\tres = MAX( res, 1ll * L[u] * query( rt[DFN[u] - 1], rt[DFN[u] + tsiz[u] - 1], 1, up, M ) );\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt ) solve( Graph[i].to );\n}\n\nint main()\n{\n\tint Master;\n\tread( N ), read( M );\n\tfor( int i = 1, B ; i <= N ; i ++ ) \n\t{\n\t\tread( B ), read( C[i] ), read( L[i] );\n\t\tif( B ) addEdge( B, i ); else Master = i;\n\t}\n\tDFS( Master );\n\tfor( int i = 1 ; i <= N ; i ++ ) rt[i] = update( rt[i - 1], 1, up, C[seq[i]] );\n\tsolve( Master );\n\twrite( res ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1577684106,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[APIO2012]\u6d3e\u9063"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\u95ee\u9898\u5c31\u662f\u627e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u4f7f\u4ece\u81ea\u5df1\u548c\u5b50\u6811\u4e2d\u627e\u5230\u5c3d\u91cf\u591a\u7684\u8282\u70b9\uff0c\u603b\u7684\u6743\u503c\u548c\u4e0d\u8d85\u8fc7 $m$\uff0c\u8282\u70b9\u6570$\\times$\u81ea\u5df1\u7684\u6743\u503c\u6700\u5927\u3002\n\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5e94\u8be5\u5728\u5b50\u6811\u4e2d\u9009\u62e9\u6743\u503c\u5c3d\u91cf\u5c0f\u7684\u7ed3\u70b9\u3002 \n\n\u53ef\u4ee5\u7528\u53ef\u5e76\u5806\uff0c\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u5411\u4e0a\u5408\u5e76\u5806\uff08\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u4f18\u5316\uff09\n\n### \u5806\u7684\u5408\u5e76\n\u8fd9\u91cc\u7684\u5806\u7528\u4f18\u5148\u961f\u5217\u4ee3\u66ff\u3002\n- \u5bf9\u4e8e\u53f6\u5b50\u7ed3\u70b9\uff0c\u5806\u7684\u5927\u5c0f\u4e3a $1$\n\n- \u5bf9\u4e8e\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u4ee4\u5f53\u524d\u7ed3\u70b9\u4e3a $x$\uff0c\u513f\u5b50\u96c6\u5408\u4e3a $\\{son_i\\}$\uff0c\u513f\u5b50\u96c6\u5408\u4e2d\u7684\u5806\u90fd\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff0c\u53ea\u9700\u8981\u5c06\u5806 $son_1\\ldots son_n$ \u5408\u5e76\u5230\u5806 $x$ \u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u5806\u7ef4\u62a4\u7684\u662f\u5f53\u524d\u7684\u4ece\u5c0f\u5230\u5927\u7684\u70b9\u6743\uff08\u5373\u5c0f\u6839\u5806\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u7ef4\u62a4\u70b9\u6743\u548c $\\leqslant m$ \u7684\u65f6\u5019\u6bd4\u8f83\u9ebb\u70e6\uff08\u56e0\u4e3a\u6b64\u65f6\u4f18\u5148\u961f\u5217\u53ea\u80fd $pop$ \u6700\u5c0f\u7684\u70b9\uff0c\u800c\u4e0d\u80fd $pop$ \u6700\u5927\u7684\u70b9\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u6539\u7528\u5927\u6839\u5806\uff0c\u6bcf\u6b21\u7ef4\u62a4\u5806\u7684\u64cd\u4f5c\u53d8\u4e3a $pop$ \u6700\u5927\u7684\u503c\uff0c\u76f4\u5230\u70b9\u6743\u548c $\\leqslant m$\u3002\n\n\u8fd9\u6837\u8fd8\u4e0d\u591f\uff0c\u666e\u901a\u7684\u5f80\u4e0a\u5408\u5e76\u5728 $Luogu$ \u8bc4\u6d4b\uff08\u5f00 $O2$\uff09\u53ea\u6709 $88pts$\uff0c\u4e8e\u662f\u6211\u4eec\u91c7\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06\u5806\u5927\u5c0f\u5c0f\u7684\u5f80\u5806\u5927\u5c0f\u5927\u7684\u5806\u5408\u5e76\uff0c\u4e8e\u662f\uff1a\n\n```cpp\nstd::priority_queue<int> q;\ninline int merge(int x,int y){\n\tif(q[x].size()<q[y].size()) std::swap(x,y);\n\twhile(!q[y].empty()){\n\t\tq[x].push(q[y].top()),ret[x]+=q[y].top(),q[y].pop();\n\t\twhile(ret[x]>m&&!q[x].empty()) ret[x]-=q[x].top(),q[x].pop();\n\t}\n\treturn x;\n}\n```\n\u5176\u4e2d $\\{ret_i\\}$ \u4e3a\u7f16\u53f7\u4e3a $i$ \u7684\u5806\u7684\u70b9\u6743\u548c\u3002\n\n### \u6811\u5f62 $dp$ ?\n\u53ef\u80fd\u4e0d\u7b97\u6811\u5f62 $dp$ \u5427\u3002\u3002\u3002\n\n$dfs$ \u65f6\u5148\u904d\u5386\uff0c\u7b49\u5230\u56de\u5230\u539f\u5148\u7684\u70b9 $x$ \u65f6\uff0c\u8bb0\u5806\u5408\u5e76\u540e\u7684\u5927\u5c0f $sz_x$\uff0c\u70b9 $x$ \u7684\u70b9\u6743\uff08\u9898\u76ee\u4e2d\u7684\u9886\u5bfc\u503c\uff09\u4e3a $led_x$\uff0c\u5219\u8be5\u70b9\u7684\u6700\u5927\u503c\u4e3a $sz_x\\times led_x$\uff0c\u7b54\u6848\u4e3a $Max_{i=1}^n sz_x\\times led_i$\uff0c$dfs$ \u4e00\u6b21\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlog^2n)$ \uff1f~~\u53ef\u80fd\u4f1a\u9000\u5316\u6210 $O(n^2)$\uff0c\u4e0d\u8fc7\u2026\u2026~~\n\n$dfs$ \u7684\u4ee3\u7801\uff1a\n```cpp\ninline void dfs(int x){\n\tid[x]=x; //id \u8868\u793a\u5806\u5408\u5e76\u540e\u7684\u7f16\u53f7\n\tif((ret[x]=val[x])<=m) q[x].push(val[x]);\n\tfor(int i:e[x]){\n\t\tdfs(i);\n\t\tid[x]=merge(id[x],id[i]);\n\t}\n\tans=std::max(ans,led[x]*static_cast<long long>(q[id[x]].size()));\n\t// ans \u5373\u4e3a\u7b54\u6848 \n}\n```\n\n### \u601d\u8003\n\n\u7528 $STL$ \u7684 $priority\\_queue$ \u4f1a\u88ab\u5361\u5417\uff1f\u53ef\u80fd\u5e38\u6570\u6709\u70b9\u513f\u5927\uff0c\u53ef\u4ee5\u6362\u6210 $pd\\_ds$ \u7684\u4f18\u5148\u961f\u5217\u5427\uff08~~\u53cd\u6b63 noip \u4e5f\u8ba9\u7528~~\uff09",
        "postTime": 1594173622,
        "uid": 101891,
        "name": "cyn2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "#### [\u9898\u76ee\u94fe\u63a5  Click  Here](https://www.luogu.org/problemnew/show/P1552)\n\n\u8fd9\u4e2a\u9898\u597d\u50cf\u5927\u591a\u6570\u4eba\u7528\u7684\u90fd\u662f\u5de6\u504f\u6811\u554a\uff1f\u8fd9\u91cc\u6211\u6765\u8d21\u732e\u4e00\u53d1\u4e3b\u5e2d\u6811\u7684\u89e3\u6cd5\u3002\n\n\u628a\u9898\u76ee\u4e2d\u7684\u95ee\u9898\u62bd\u8c61\u51fa\u6765\uff0c\u5176\u5b9e\u5c31\u662f\u8be2\u95ee\u6bcf\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u5de5\u8d44\u524d$tot_i$\u5927\u7684\u70b9\uff0c\u4f7f\u5b83\u4eec\u7684\u548c\u6ee1\u8db3$\\sum cost_i<=m$\uff0c\u5728\u6b64\u524d\u63d0\u4e0b\u4f7f$tot_i$\u5c3d\u53ef\u80fd\u5927\uff0c\u7b54\u6848\u5c31\u662f$ans=max(tot_i*lead_i)$\u3002\n\n\n\n\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u8bdd\u76f4\u63a5\u4e8c\u5206\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u4f46\u73b0\u5728\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53ef\u80fd\u662f\u7b54\u6848\u7684\u4ea7\u751f\u5904\u3002\u4e3a\u4e86\u4fbf\u4e8e\u8bbf\u95ee\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u6211\u4eec\u628a\u539f\u5148\u7684\u6811\u6309$dfs$\u5e8f\u5212\u5206\uff0c\u5b50\u6811\u663e\u7136\u5c31\u662f\u8fde\u7eed\u7684\u4e00\u4e2a\u5e8f\u5217\u3002\u7d27\u63a5\u7740\u6211\u4eec\u6309$dfs$\u5e8f\u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u6700\u540e\u5728\u4e3b\u5e2d\u6811\u4e0a\u6bcf\u4e2a\u70b9\u4e8c\u5206\u4e00\u4e0b$tot_i$\u7684\u5927\u5c0f\u5c31\u597d\u5566\uff5e\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n\nconst int N = 100010;\nint ans;\nint n, m, rt, cnt, sz[N], dfn[N], cost[N], lead[N], head[N];\n\nstruct edge {\n    int nxt, to;\n\n    edge (int _nxt = 0, int _to = 0) {\n        nxt = _nxt, to = _to;\n    }\n}e[N << 1];\n\nvoid add_len (int u, int v) {\n    e[++cnt] = edge (head[u], v); head[u] = cnt;\n    e[++cnt] = edge (head[v], u); head[v] = cnt;\n}\n\n#define mid ((l + r) >> 1)\n\nint tot;\n\nstruct Segment_Tree {\n    struct Segment_Node {\n        int ls, rs, sz, sum;\n        Segment_Node () {sum = ls = rs = sz = 0;}\n    }t[N << 5];\n    \n    int modify (int _rt, int l, int r, int w) {\n        int p = ++tot;\n        t[p].ls = t[_rt].ls;\n        t[p].rs = t[_rt].rs;\n        t[p].sz = t[_rt].sz + 1;\n        t[p].sum = t[_rt].sum + w;\n        if (l != r) {\n            if (w <= mid) {\n                t[p].ls = modify (t[_rt].ls, l, mid, w);\n            } else {\n                t[p].rs = modify (t[_rt].rs, mid + 1, r, w);\n            }\n        }\n        return p;\n    }\n\n    #undef mid\n\n    int query (int u, int v, int l, int r, int m) {\n        int ans = 0;\n        while (l < r) {\n            int mid = (l + r) >> 1;\n            int suml = t[t[v].ls].sum - t[t[u].ls].sum;\n            // printf (\"v = %d, t[v].sum = %d, t[v].sz = %d, t[ls].sum = %d, t[ls].sz = %d\\n\", v, t[v].sum, t[v].sz, t[t[v].ls].sum, t[t[v].ls].sz);\n            // printf (\"l = %d, r = %d, m = %d, mid = %d, suml = %d, sz = %d\\n\", l, r, m, mid, suml, t[t[v].ls].sz - t[t[u].ls].sz);\n            if (m <= suml) {\n                u = t[u].ls;\n                v = t[v].ls;\n                r = mid;\n            } else {\n                ans += t[t[v].ls].sz - t[t[u].ls].sz;\n                u = t[u].rs;\n                v = t[v].rs;\n                l = mid + 1;\n                m -= suml;\n            }\n        }\n        // printf (\"m = %d, r = %d, ans = %d\\n\", m, r, ans);\n        ans += floor ((1.0 * m) / (1.0 * r));\n        // printf (\"ans = %d\\n\", ans);\n        return ans;\n    }\n}tree;\n\nint root[N];\nvoid pre (int u, int fa) {\n    sz[u] = 1;\n    dfn[u] = ++dfn[0];\n    root[dfn[u]] = tree.modify (root[dfn[u] - 1], 1, m, cost[u]);\n    for (int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].to;\n        if (v != fa) {\n            pre (v, u);\n            sz[u] += sz[v];\n        }\n    }\n}\n\nsigned main () {\n    cin >> n >> m;\n    for (int u = 1; u <= n; ++u) {\n        static int v;\n        cin >> v >> cost[u] >> lead[u];\n        if (v == 0) {\n            rt = u;\n        } else {\n            add_len (u, v);\n        }\n    }\n    pre (rt, 0);\n    for (int u = 1; u <= n; ++u) {\n        int dfnu = dfn[u];\n        int dfnv = dfn[u] + sz[u] - 1;\n        ans = max (ans, 1LL * lead[u] * tree.query (root[dfnu - 1], root[dfnv], 1, m, m));\n    }\n    cout << ans << endl;\n} \n\n```\n\n",
        "postTime": 1552459376,
        "uid": 58698,
        "name": "Nativ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u8d2a\u5fc3+\u4e71\u641e\n\n~~\u8fd9\u9898\u7684\u6570\u636e\u5f31\u5230\u4e00\u5b9a\u7a0b\u5ea6\u4e86~~\n\n\u66b4\u529b\uff1a\u679a\u4e3e\u9886\u5bfc\u8005 \u5728\u4ed6\u7684\u5b50\u6811\u4e2d\u4ece\u5c0f\u5f80\u5927\u9009\n\n\u526a\u679d\uff1a\u8003\u8651\u4e00\u4e2a\u5fcd\u8005 \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4ed6\u7684\u4e0a\u7ea7\u9886\u5bfc\u529b\u6bd4\u4ed6\u9ad8 \u90a3\u4e48\u9009\u4ed6\u80af\u5b9a\u4e0d\u4f18 \u6392\u9664\u8fd9\u4e9b\u5fcd\u8005 \u5269\u4e0b\u66b4\u529b\u5c31\u8fc7\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n~~~ cpp\n#include<iostream>\n#include<vector>\n#include<ctime>\n#include<algorithm>\nusing namespace std;\nvector<int> tu[100010];\nint n,zuo[100010],you[100010],cnt,c[100010],b[100010],ni[100010];\nlong long m,xs[100010],l[100010],sz[100010],ans;\nstruct ren\n{\n       int id;\n       long long l;\n}a[100010];\nvoid dfs(int x,long long mxl)\n{\n     int i;\n     zuo[x]=++cnt;\n     ni[cnt]=x;\n     sz[x]=1;\n     if(l[x]>mxl) c[x]=1;\n     for(i=0;i<tu[x].size();i++)\n     {\n          dfs(tu[x][i],max(mxl,l[x]));\n          sz[x]+=sz[tu[x][i]];\n     }\n     you[x]=cnt;\n}\nlong long check(int x)\n{\n    int i,tt=0,now=0,tot=0;\n    for(i=zuo[x];i<=you[x];i++) b[++tt]=xs[ni[i]];\n    sort(b+1,b+tt+1);\n    for(i=1;i<=tt;i++)\n     if(now+b[i]<=m)\n     {\n         now+=b[i];\n         tot++;\n     }\n    return tot;\n}\nint main()\n{\n    int i,t1,tt=clock();\n    cin>>n>>m;\n    for(i=1;i<=n;i++)\n    {\n        cin>>t1>>xs[i]>>l[i];\n        tu[t1].push_back(i);\n    }\n    dfs(1,0);\n    cnt=0;\n    for(i=1;i<=n;i++) if(c[i]==1) a[++cnt].id=i,a[cnt].l=l[i];\n    for(i=1;i<=cnt;i++) ans=max(ans,a[i].l*check(a[i].id));\n    cout<<ans;\n    //system(\"pause\");\n    return 0;\n}\n\n~~~",
        "postTime": 1522202710,
        "uid": 31476,
        "name": "\u6211\u6ca1\u6709\u540d\u79f0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u60f3\u4e86\u8f83\u957f\u65f6\u95f4\uff08\u5176\u5b9e\u662f\u8111\u5b50\u574f\u4e86\uff09\u3002\n\n\u6211\u6700\u521d\u7684\u60f3\u6cd5\u5c31\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4f4f\u4e00\u4e2a\u70b9x\uff0c\u5c06\u5b83\u5f53\u505a\u662f\u7ba1\u7406\u8005\uff0c\u7136\u540e\u90a3\u4e9b\u88ab\u6d3e\u9063\u7684\u4eba\u4ece\u4ee5\u5176\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u627e\u3002\n\n\u7136\u540eans=max(ans,lead[x]\\*calc(x))\u3002\u663e\u7136\uff0c\u8fd9\u662f\u6b63\u786e\u7684\u5427\u3002\u56e0\u4e3a\u7ba1\u7406\u8005\u9700\u8981\u80fd\u5230\u8fbe\u6240\u6709\u7684\u88ab\u6d3e\u9063\u8005\uff0c\u53ca\u7ba1\u7406\u8005\u662f\u88ab\u9009\u51fa\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\u8fd9\u6837\u65b9\u4fbf\u4e86\u6211\u4eeccalc\uff08\u5176\u5b9e\u5c31\u662f\u8fd0\u7528\u4e86\u4e00\u70b9\u70b9\u7684\u52a8\u89c4\u601d\u60f3\u548c\u8d2a\u5fc3\u601d\u60f3\uff09\u3002\n\n\u90a3\u4e48\uff0ccalc\u600e\u4e48\u529e\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u5728x\u7684\u51e0\u68f5\u5b50\u6811\u4e2d\uff08\u5305\u62ec\u81ea\u5df1\uff09\u627e\u5230\u6700\u591a\u7684\u70b9\u4ee3\u4ef7\u548c\u4e0d\u8d85\u8fc7m\u3002\n\n\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u5de6\u504f\u6811\u597d\u50cf\u53ef\u4ee5\u3002\n\n\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9x\uff0c\u90fd\u8fde\u7740\u597d\u51e0\u68f5\u5904\u7406\u597d\u7684\u5de6\u504f\u6811\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528log\u7684\u65f6\u95f4\u5408\u5e76\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u8981\u5220\u6389\u4e00\u4e9b\u70b9\u4f7f\u6ee1\u8db3\u6761\u4ef6\u3002\u6211\u9009\u62e9\u4e86\u7528\u5927\u6839\u5806\uff0c\u8fd9\u6837\u5220\u9664\u65b9\u4fbf\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u64cd\u4f5c\u5177\u4f53\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7531\u4e8e\u5220\u9664\u7684\u70b9\u4e0d\u4f1a\u91cd\u65b0\u88ab\u52a0\u5165\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u5220\u9664\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u4e3anlogn\u3002\n\n\u52a0\u4e0a\u4e0a\u9762\u7684\u4e00\u7cfb\u5217\u64cd\u4f5cnlogn\u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u4f9d\u7136\u662fnlogn\u3002\n\n\u53ef\u4ee5\u53c2\u8003\u6211\u7684blog\uff1a<http://www.cnblogs.com/whc200305/p/7616108.html>\n\ncode\uff1a\n\n```cpp\n%:pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int N=100005;\nvector <int> son[N];\nint n,m,ro[N]; LL s[N],c[N],f[N],ans;\nstruct lft {int l,r,d,w; void cl() {l=r=d=0;}}a[N];\ninline int read() {\n    int x=0; char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nint merge(int x,int y) {\n    if (!x||!y) return x+y; if (a[x].w<a[y].w) swap(x,y);\n    a[x].r=merge(a[x].r,y); int l=a[x].l,r=a[x].r;\n    if (a[l].d<a[r].d) swap(a[x].l,a[x].r);\n    a[x].d=a[a[x].r].d+1;\n    return x;\n}\nint main() {\n    n=read(),m=read(),ans=0,a[0].d=-1;\n    for (int i=1; i<=n; i++) {\n        a[i].cl(),ro[i]=i,son[read()].push_back(i);\n        s[i]=a[i].w=read(),c[i]=1,f[i]=read();\n    }\n    for (int i=n,siz; i>=1; i--) {\n        siz=son[i].size();\n        for (int k=0,j; k<siz; k++) {\n            j=son[i][k],ro[i]=merge(ro[i],ro[j]);\n            s[i]+=s[j],c[i]+=c[j];\n        }\n        for (; s[i]>m;) {\n            s[i]-=a[ro[i]].w,c[i]--;\n            ro[i]=merge(a[ro[i]].l,a[ro[i]].r);\n        }\n        ans=max(ans,f[i]*c[i]);\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1506776073,
        "uid": 21158,
        "name": "pinkex",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u6811\u5f62DP+\u5de6\u504f\u6811\u3002\n\n\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u68f5\u5de6\u504f\u6811\u3002\n\n\u5904\u7406\u4e00\u4e2a\u70b9\u65f6\uff0c\u5148\u5904\u7406\u5b83\u7684\u5b69\u5b50\uff0c\u518d\u628a\u5b83\u548c\u5b83\u6240\u6709\u5b69\u5b50\u7684\u5de6\u504f\u6811\u5408\u5e76\u3002\n\n\u6bcf\u6b21\u5220\u53bb\u5de5\u8d44\u6700\u9ad8\u7684\uff0c\u76f4\u81f3\u5de5\u8d44\u5728\u5141\u8bb8\u8303\u56f4\u5185\u4e3a\u6b62\u3002\n\n\u6700\u540e\u6c42\u6240\u6709f[i]\u4e2d\u6700\u5927\u7684\u5373\u53ef\u3002\n\n\u53e6\u5916\uff0c\u7531\u4e8e\u53ef\u80fd\u6709100000\u5c42\uff0c\u6240\u4ee5\u5f97\u7528\u624b\u5de5\u6808\uff08\u5426\u5219\u4f1a\u6302\u51e0\u4e2a\u70b9\uff09\n",
        "postTime": 1380641246,
        "uid": 203,
        "name": "JOHNKRAM",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "## BZOJ2809&&LG1552 APIO2012\u6d3e\u9063(\u7ebf\u6bb5\u6811\u5408\u5e76)\n\n### \u9898\u9762\n\n\u81ea\u5df1\u627e\u53bb\n\n### HINT\n\n\u7b80\u5316\u4e00\u9898\u9762\u5c31\u662f\u8ba9\u4f60\u4ece\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u4ee5$<=m$\u7684\u4ee3\u4ef7\u9009\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\uff0c\u7136\u540e\u4e58\u4e0a\u5b50\u6811\u6839\u7684\u4e00\u4e2a\u5c5e\u6027\u503c\uff0c\u6bcf\u4e2a\u70b9\u505a\u4e00\u904d\u53d6\u4e2a$max$\u3002\u770b\u5927\u5bb6\u90fd\u662f\u4ec0\u4e48\u53ef\u5e76\u5806\u3001dfs\u5e8f+\u4e3b\u5e2d\u6811\uff0c\u6211\u7684\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4$size$\u548c$tot$\uff0c\u7136\u540e\u4fee\u6539\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u90fd\u662f\u5e38\u89c4\u5199\u6cd5\u3002\n### \u7740\u91cd\u8bb2\u4e00\u4e0b\u67e5\u8be2\n\u8fd9\u6837\u7684\u5199\u6cd5\u4e4b\u540e\u5c31\u662f\u8981\u5b9e\u73b0\u67e5\u8be2\u7528m\u7684\u4ee3\u4ef7\u53ef\u4ee5\u6700\u591a\u9009\u62e9\u591a\u5c11\u4e2a\u70b9\n```cpp\ninline int query(int p,long long rk,int l,int r){\n        if(!p) return 0;//\u5982\u679c\u8fdb\u5165\u4e86\u7a7a\u8282\u70b9\uff0c\u5c31\u80af\u5b9a\u6ca1\u6709\u53ef\u9009\u7684\uff0c\u8fd4\u56de0\n        if(l==r){\n            int x=st[p].tot/st[p].size;return min((long long)rk/x,(long long)st[p].size);\n//\u8fd9\u91cc\u662f\u91cd\u70b9\uff0c\u67e5\u8be2\u5230\u8be5\u70b9\u7684\u65f6\u5019\u6211\u8fd8\u6709rk\u7684\u5269\u4f59\uff0c\u5df2\u7ecf\u5230\u53f6\u5b50\u8282\u70b9\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u8981\u8ba1\u7b97\u4e00\u4e0b\u81ea\u5df1\u6700\u591a\u53ef\u4ee5\u9009\u591a\u5c11\u4e2a\uff0c\u5982\u679c\u80fd\u90fd\u9009\u5c31\u90fd\u9009\uff0c\u5982\u679c\u4e0d\u80fd\u591a\u9009\u5c31\u5c3d\u91cf\u9009\u6ee1\n        }\n        long long now=st[ls(p)].tot;int mid=(l+r)>>1;\n        if(rk<=now) return query(ls(p),rk,l,mid);\n        else return st[ls(p)].size+query(rs(p),rk-now,mid+1,r);\n    }\n```\n### \u5176\u4ed6\u7684\u770b\u4ee3\u7801\u5427\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\n#define ls(x) st[x].ch[0]\n#define rs(x) st[x].ch[1]\nusing namespace std;\ninline int read(){\n    int w=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        w=(w<<3)+(w<<1)+ch-48;\n        ch=getchar();\n    }\n    return w*f;\n}\nint n,m,cur,root[100010],a[100010],b[100010],val[100010],now[100010];\nlong long l[100010],ans[100010];\nbool debug;\nstruct CHAIRMANTREE{\n    struct Node{\n        int size,ch[2];long long tot;\n    }st[6000010];\n    int tot;\n    inline void pushup(int x){\n        st[x].size=st[ls(x)].size+st[rs(x)].size;\n        st[x].tot=st[ls(x)].tot+st[rs(x)].tot;return;\t\n    }\n    inline int change(int p,int l,int r,int pos,int val){\n        if(!p)p=++tot;\n        if(l==r){\n            st[p].size+=1;st[p].tot+=val;return p;\n        }\n        int mid=(l+r)>>1;\n        if(pos<=mid) ls(p)=change(ls(p),l,mid,pos,val);\n        else rs(p)=change(rs(p),mid+1,r,pos,val);\n        pushup(p);return p;\n    }\n    inline int merge(int x,int y,int l,int r){\n        if(!x||!y) return x|y;\n        int p=++tot;\n        if(l==r){\n            st[p].size=st[x].size+st[y].size;\n            st[p].tot=st[x].tot+st[y].tot;return p;\n        }\n        int mid=(l+r)>>1;\n        ls(p)=merge(ls(x),ls(y),l,mid);\n        rs(p)=merge(rs(x),rs(y),mid+1,r);\n        pushup(p);return p;\n    }\n    inline int query(int p,long long rk,int l,int r){\n        if(!p) return 0;\n        if(l==r){\n            int x=st[p].tot/st[p].size;return min((long long)rk/x,(long long)st[p].size);\n        }\n        long long now=st[ls(p)].tot;int mid=(l+r)>>1;\n        if(rk<=now) return query(ls(p),rk,l,mid);\n        else return st[ls(p)].size+query(rs(p),rk-now,mid+1,r);\n    }\n}TREE;\nint cnt,head[100010];\nstruct Edge{\n    int from,to,next;\n}edge[200010];\ninline void addedge(int u,int v){\n    cnt++;\n    edge[cnt].from=u;\n    edge[cnt].to=v;\n    edge[cnt].next=head[u];\n    head[u]=cnt;\n}\nmap<int,int> mapp;\ninline void prework(){\n    sort(a+1,a+n+1);\n    for(int i=1;i<=n;i++){\n        if(!mapp[a[i]]){\n            cur++;mapp[a[i]]=cur;b[cur]=a[i];\n        }\n    }\n    for(int i=1;i<=n;i++){\n        val[i]=mapp[val[i]];\n    }\n}\ninline void dfs(int u){\n    root[u]=TREE.change(root[u],1,cur,val[u],now[u]);\n    for(int i=head[u];i;i=edge[i].next){\n        int v=edge[i].to;dfs(v);\n        root[u]=TREE.merge(root[u],root[v],1,cur);\n    }\n    if(debug)cout<<\"test\"<<u<<endl;\n    ans[u]=(long long)TREE.query(root[u],m,1,cur);\n    if(debug){\n        cout<<u<<\" \"<<ans[u]<<endl;\n    }\n}\nsigned main(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        int x=read();addedge(x,i);\n        now[i]=a[i]=val[i]=read();l[i]=read();\n    }\n    prework();\n    //debug=true;\n    dfs(1);\n    long long Ans=-1;\n    for(int i=1;i<=n;i++){\n        //cout<<l[i]<<\" \"<<ans[i]<<endl;\n        Ans=max(Ans,l[i]*ans[i]);\n    }\n    cout<<Ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1554248378,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p1552-apio2012%E6%B4%BE%E9%81%A3/)\n\n---\n# Solution\n\u8fd9\u662f\u4e00\u9053\u5de6\u504f\u6811\u7684\u6a21\u677f\u9898\uff0c\u4e0d\u4f1a\u5de6\u504f\u6811\u7684\u53ef\u4ee5[\u6233\u8fd9\u91cc](https://www.goldenpotato.cn/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%AF%E5%B9%B6%E5%A0%86%E5%B7%A6%E5%81%8F%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\n\n\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u540c\u4e00\u9897\u5b50\u6811\uff0c\u6211\u4eec\u60f3\u8ba9\u53d6\u7684\u4eba\u5c3d\u53ef\u80fd\u4fbf\u5b9c\uff0c\u5982\u679c\u8bf4\u76ee\u524d\u4e3a\u6b62\u53d6\u7684\u4ef7\u683c\u8d85\u8fc7$C$,\u5c31\u4f18\u5148\u628a\u8d35\u7684\u4eba\u5148\u4e22\u6389\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u7528\u5de6\u504f\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4eba\uff0c\u6211\u4eec\u90fd\u5efa\u4e00\u9897\u4ee5\u4ef7\u683c\u4e3a\u5173\u952e\u5b57\u7684\u5927\u6839\u5806\u3002\u8003\u8651\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76\uff0c\u4e00\u65e6\u5806\u7684\u5143\u7d20\u603b\u548c\u8d85\u8fc7$C$\u5c31\u4e0d\u65ad\u5f39\u6808\uff0c\u5f39\u5230\u5408\u6cd5\u4e3a\u6b62\u3002\u7136\u540e\u6211\u4eec\u7b97\u4e00\u4e0b$l_i*size$\uff0c\u53d6\u4e2a\u6700\u5927\u503c\u5c31\u597d\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n\u5c31\u9171\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u5207\u6389\u5566(\uff89\uff9f\u2200\uff9f)\uff89 \n\n---\n# Code\n```cpp\n//Luogu  P1552 [APIO2012]\u6d3e\u9063\n//Mar,15th,2019\n//\u5de6\u504f\u6811\u6c34\u9898\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;\tc=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nstruct LST\n{\n\tint fa[N],son[N][2],dis[N],w[N];\n\tlong long sum[N],size[N];\n\tinline void update(int x)\n\t{\n\t\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+w[x];\n\t\tsize[x]=size[son[x][0]]+size[son[x][1]]+1;\n\t}\n\tint Merge(int x,int y)\n\t{\n\t\tif(x==0 or y==0) return x+y;\n\t\tif(w[x]>w[y]) swap(x,y);\n\t\tson[y][1]=Merge(x,son[y][1]);\n\t\tfa[son[y][1]]=y;\n\t\tupdate(y);\n\t\tif(dis[son[y][1]]>dis[son[y][0]]) \n\t\t\tswap(son[y][0],son[y][1]);\n\t\tdis[y]=dis[son[y][1]]+1;\n\t\treturn y;\n\t}\n\tint Pop(int x)\n\t{\n\t\tfa[x]=Merge(son[x][0],son[x][1]);\n\t\treturn fa[x];\n\t}\n}lst;\nvector <int> e[N];\nlong long c[N],l[N],size[N],n,m;\nint root[N];\nlong long ans;\nvoid dfs(int now)\n{\n\tfor(int i=0;i<int(e[now].size());i++)\n\t{\n\t\tdfs(e[now][i]);\n\t\troot[now]=lst.Merge(root[now],root[e[now][i]]);\n\t}\n\twhile(root[now]!=0 and lst.sum[root[now]]>m)\n\t\troot[now]=lst.Pop(root[now]);\n\tif(root[now]!=0)\n\t\tans=max(ans,l[now]*lst.size[root[now]]);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\te[i].reserve(4);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint fa=read();c[i]=read(),l[i]=read();\n\t\te[fa].push_back(i);\n\t\tsize[i]=1;\n\t\troot[i]=i,lst.w[i]=lst.sum[i]=c[i],lst.size[i]=1;\n\t}\n\t\n\tdfs(1);\n\t\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1552614529,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "## \u770b\u5230\u8fd9\u9053\u9898\u6211\u7b2c\u4e00\u611f\u89c9\u4ee5\u4e3a\u662fdp\uff08\u4f46\u662f\u4e0d\u4f1a\u5199\uff08\u611f\u89c9\u6ca1\u6cd5\u505a\u3002\n### \u90a3\u5c31\u7528\u6807\u51c6~~sao~~\u505a\u6cd5\u5427\u3002\n\n\n------------\n\n~~orzorzorzorzorzorzorzorz\u3002~~\n\n\n------------\n\n### \u6211\u4eec\u5148\u9009\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u70b9\u5b50\u6811\u91cc\u627e\u82e5\u5e72\u4e2a\u70b9\uff0c\u4f7f\u85aa\u6c34\u603b\u548c\u4e0d\u8d85\u8fc7M\u3002\n### \u6ee1\u610f\u5ea6max=\u6839\u8282\u70b9L * \u8fd9\u68f5\u5b50\u6811\u6211\u4eec\u9009\u7684\u70b9\u7684\u4e2a\u6570\u3002\n# \u94b1\u8d8a\u5c11\u4eba\u8d8a\u591a\u5c82\u4e0d\u7f8e\u6ecb\u6ecb\u3002\n### \u7528\u5927\u6839\u5806\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u53bb\u8fdb\u884c\u7ef4\u62a4\uff0c\u5728\u6bcf\u4e2a\u70b9\u90fd\u8981\u66f4\u65b0\u4e00\u6ce2\u7b54\u6848\u3002\n### \u5408\u5e76\u4e4b\u540e\u628a\u8d85\u8fc7\u7684\u5c31\u53ef\u4ee5pop\u6389\u4e86\u3002\n### \u6bd4\u8f83\u61d2\u7684\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u4e1c\u897f\u53eb\u505apbds(\u5e73\u677f\u7535\u89c6\uff09\u3002\n~~\u636e\u8bf4noip\u53ef\u4ee5\u7528\u7684\u4e0d\u4f1a\u88ab\u5361\u6389\u3002~~\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cctype>\n#include<ext/pb_ds/priority_queue.hpp>\n#define rg register \n#define int unsigned long long\nusing namespace std;\ninline int read(){\n\trg int s=0,f=0;\n\trg char ch=getchar();\n\twhile(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch)) s=(s<<1)+(s<<3)+(ch^48),ch=getchar();\n\treturn f?-s:s;\n}\nint n,m,ans;\nconst int MAX=100015;\nconst int inf=1e9;\nint f[MAX],v[MAX],l[MAX];\nint sum[MAX];\n__gnu_pbds::priority_queue<int>q[MAX];\nsigned main(){\n\tn=read(),m=read();\n\tfor(rg int i=1;i<=n;++i){\n\t\tf[i]=read();\n\t\tv[i]=read();\n\t\tl[i]=read();\n\t}\n\tfor(rg int i=n;i;--i){\n\t\tq[i].push(v[i]);\n\t\tsum[i]+=v[i];\n\t\twhile(sum[i]>m){\n\t\t\tsum[i]-=q[i].top();\n\t\t\tq[i].pop();\n\t\t}\n\t\tans=max(ans,1ll*q[i].size()*l[i]);\n\t\tsum[f[i]]+=sum[i];\n\t\tq[f[i]].join(q[i]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n#### pbds\u8fd9\u73a9\u610f\u5177\u4f53\u7528\u6cd5\u4ee5\u540e\u4f1a\u5f80\u6211\u535a\u5ba2\u91cc\u505a\u4e00\u671f\uff08\u771f\u65b9\u4fbf\u563b\u563b\u563b\u3002\n## ~~over and sto~~",
        "postTime": 1551255154,
        "uid": 121619,
        "name": "Prev1ous",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "\u5f88\u663e\u7136\u6211\u4eec\u5e94\u8be5\u9009\u6700\u4ef7\u503c\u5c3d\u91cf\u5c0f\u7684\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\uff0c\u5c0f\u7684\u5806\u5f80\u5927\u7684\u5806\u4e0a\u9762\u5408\u5e76\n\n\u4f46\u4eba\u61d2\u5440\uff0c\u4e8e\u662f\u5c31\u76f4\u63a5\u5f00\u4e86\u4e00\u5806\u4f18\u5148\u961f\u5217\uff08\u9003)\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\ntemplate <class T> void read(T &x) {\n\tx = 0;\n\tll f = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9') x = (x << 3) + (x << 1) + ch - '0', ch = getchar();\n\tx *= f;\n}\nll n,m,head[100005],cnt,val[100005],leader[100005],fa[100005],ans,nowval[100005],gg[100005],siz[100005];\nstruct edge{ll to,next;\n}e[200005];\npriority_queue<ll>q[100005];\nvoid dfs(ll u,ll pre)\n{\n\tgg[u]=u;\n\tfor(ll i=head[u];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==pre)continue;\n\t\tdfs(e[i].to,u);\n\t\tif(q[gg[u]].size()>=q[gg[e[i].to]].size())\n\t\t{\n\t\t\twhile(!q[gg[e[i].to]].empty())\n\t\t\t{\n\t\t\t\tll x=q[gg[e[i].to]].top();\n\t\t\t\tq[gg[e[i].to]].pop();\n\t\t\t\tq[gg[u]].push(x);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(!q[gg[u]].empty())\n\t\t\t{\n\t\t\t\tll x=q[gg[u]].top();\n\t\t\t\tq[gg[u]].pop();\n\t\t\t\tq[gg[e[i].to]].push(x);\n\t\t\t}\n\t\t\tgg[u]=gg[e[i].to];\n\t\t}\n\t\tsiz[u]+=siz[e[i].to];\n\t\tnowval[u]+=nowval[e[i].to];\n\t}\n\tq[gg[u]].push(val[u]);\n\tsiz[u]++;nowval[u]+=val[u];\n\twhile(nowval[u]>m)\n\t{\n\t\tll x=q[gg[u]].top();\n\t\tq[gg[u]].pop();\n\t\tsiz[u]--;\n\t\tnowval[u]-=x;\n\t}\n\tans=max(ans,siz[u]*leader[u]);\n}\nvoid add(ll a,ll b)\n{\n\te[cnt].to=b;\n\te[cnt].next=head[a];\n\thead[a]=cnt++;\n}\nint main()\n{\n\tcnt=1;\n\tread(n);read(m);\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\tread(fa[i]);read(val[i]);read(leader[i]);\n\t\tif(fa[i])add(fa[i],i);\n\t}\n\tdfs(1,0);\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1544078975,
        "uid": 55703,
        "name": "ywh666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    },
    {
        "content": "- \u9898\u76ee\u94fe\u63a5:\n\n  https://www.luogu.org/problemnew/show/P1552\n  \n- \u5206\u6790:\n\n  \u4e00\u5f00\u59cb\u6123\u662f\u6ca1\u770b\u61c2\u9898,\u540e\u9762\u53d1\u73b0\u5c31\u662f\u4f60\u8981\u627e\u4e00\u4e2a\u6811\u4e0a\u70b9\u96c6\u4f7f\u5f97\u5404\u70b9\u6743\u503c\u4e4b\u548c\u5c0f\u4e8e$M$,\u5e76\u4e14\u627e\u4e00\u4e2a\u70b9\u96c6\u7684\u516c\u5171\u7956\u5148$Anc$(\u7ba1\u7406\u8005),\u4f7f$Anc$\u7684\u9886\u5bfc\u529b\u4e58\u4ee5\u70b9\u96c6\u5927\u5c0f\u6700\u5927\n  \n  \u4e00\u5f00\u59cb\u60f3DP,\u4e00\u770b\u6570\u636e\u8303\u56f4,\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u66b4\u529b\u4e00\u70b9,\u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u7ba1\u7406\u8005\u7684\u7b54\u6848\u6700\u5927\u503c,\u6211\u4eec\u53ea\u8981\u5728\u5b50\u6811\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u70b9\u9009\u8d77\u4f7f\u6743\u503c\u4e4b\u548c\u5c0f\u4e8e$M$\u5c31\u53ef\u4ee5\u4e86,\u4e00\u4e0b\u95ee\u9898\u7b80\u5355\u4e86\u8bb8\u591a.\n  \n  \u518d\u6697\u4e2d\u89c2\u5bdf\u5206\u6790,\u53d1\u73b0\u8fd9\u4e2a\u4fe1\u606f\u662f\u53ef\u4ee5\u7ef4\u62a4\u8f6c\u79fb\u7684,\u5728\u4e24\u9897\u5b50\u6811\u5408\u5e76\u65f6\u53ef\u4ee5\u7528\u5927\u6839\u5806\u641e\u4e00\u641e.\u6211\u4eec\u4e0d\u59a8\u5148\u5bf9\u6811\u8fdb\u884c$dfs$,\u4e2d\u9014\u4e0d\u65ad\u5408\u5e76\u6743\u503c\u4fe1\u606f.\n  \n  \u5f53$dfs$ $x$\u8282\u70b9\u65f6,\u4ee5$x$\u4e3a\u6839\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u79f0\u4e3ax\u7684\u4ee3\u8868\u5806,$dfs$\u5b8c$x$\u7684\u4e00\u4e2a\u5b50\u6811\u56de\u6eaf\u5230$x$\u65f6,\u5c06\u5b50\u6811\u7684\u4ee3\u8868\u5806\u4e0e$x$\u7684\u4ee3\u8868\u5806\u8fdb\u884c\u5408\u5e76,\u540c\u65f6\u5c06\u4e24\u5806\u6743\u503c\u4e4b\u548c\u76f8\u52a0.\u82e5\u6743\u503c\u4e4b\u548c\u5927\u4e8e$m$,\u7531\u4e8e\u662f\u5927\u6839\u5806,\u4e0d\u65ad$pop$\u5806\u9876\u76f4\u81f3\u5c0f\u4e8e$m$,\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784.\n  \n  \n- \u6ce8\u610f\n\n  \u672c\u9898\u601d\u7ef4\u5bb9\u6613\u4f46\u8981\u6ce8\u610f\u4e00\u4e9b\u95ee\u9898:\n  \n  1. \u867d\u8bf4\u662fX\u7684\u4ee3\u8868\u5806,\u7136\u800cX\u53ef\u80fd\u4f1a\u88ab$pop$\u8fd9\u4e2a\u5806,\u4e8e\u662f\u8981\u7528\u4e00\u4e2a$root$\u8bb0\u5f55\u4ee3\u8868\u5806\u7684\u6839,\u540c\u65f6dfs\u8fd4\u56de\u8be5root\u503c\n  \n  2. \u53ef\u5e76\u5806\u53ef\u7528\u659c\u5806\u6216\u5de6\u504f\u5806 COGS\u4e0a\u659c\u5806\u7565\u80dc\u4e00\u7b79,luogu\u4e0a\u5374\u4e0d\u5c3d\u4eba\u610f\n  \n  3. \u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u548c\u5c0f\u6280\u5de7,\u6bd4\u5982\u5904\u7406\u7956\u5b97\u7684\u6700\u5927\u9886\u5bfc\u529b\u53ef\u4ee5\u770b\u4ee3\u7801\n  \n  \n- \u4ee3\u7801(\u5de6\u504f\u6811)\n\n  ```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <queue>\n#define ri register int \n#define ll long long \nusing namespace std;\nconst int maxn=103005;\nconst int inf=0x7fffffff;\ntemplate <class T>inline void read(T &x){\n\tx=0;int ne=0;char c;\n\twhile(!isdigit(c=getchar()))ne=c=='-';\n\tx=c-48;\n\twhile(isdigit(c=getchar()))x=(x<<3)+(x<<1)+c-48;\n\tx=ne?-x:x;\n\treturn ;\n}\nint n;\nll  m,leader[maxn],key[maxn],ans[maxn],anss=-inf;\nint ls[maxn],rs[maxn],fa[maxn],cnt[maxn],npl[maxn];//\u53ef\u5e76\u5806\nvector <int>son[maxn];\nint get(int x){\n\twhile(x!=fa[x])fa[x]=get(fa[x]);\n\treturn fa[x];\n}\nint merge(int x,int y){\n\tif(!x)return y;\n\tif(!y)return x;\n\tif(key[x]<key[y])swap(x,y);\n\tfa[y]=x;\n\trs[x]=merge(rs[x],y);\n\tif(!ls[x]||npl[ls[x]]<npl[rs[x]])swap(ls[x],rs[x]);\n\tif(!rs[x])npl[x]=0;\n\telse npl[x]=npl[rs[x]]+1;\n\t//swap(ls[x],rs[x]);\n\treturn x;\n}\nint del(int now){\n\tfa[now]=-1;\n\tfa[ls[now]]=fa[rs[now]]=0;\n\treturn merge(ls[now],rs[now]);\n}\nint dfs(int now,ll mx){//mx--\u7956\u5148\u4e0a\u7684\u9886\u5bfc\u529b\u6700\u5927\u503c\n\tint s,root=now,ro_s;\n\tmx=max(mx,leader[now]);\n\tans[now]=key[now],cnt[now]=1;\n\tanss=max(anss,leader[now]);\n\tfor(ri i=0;i<son[now].size();i++){\t\t\n\t\ts=son[now][i];\t\t\n\t\tro_s=dfs(s,mx);\t\n\t\tans[now]+=ans[s],cnt[now]+=cnt[s];\n\t\troot=merge(root,ro_s);\t\n\t\twhile(ans[now]>m&&cnt[now]) {\n\t\t\tans[now]-=key[root];\n\t\t\tcnt[now]--;\n\t\t\troot=del(root);\n\t\t}\n\t\tanss=max(anss,cnt[now]*mx);\n\t}\n\treturn root;\n}\nint main(){\n\tint pa;\n\t//freopen(\"dispatching.in\",\"r\",stdin);\n\t//freopen(\"dispatching.out\",\"w\",stdout);\n\tread(n),read(m);\n\tfor(ri i=1;i<=n;i++){\n\t\tread(pa),read(key[i]),read(leader[i]);\n\t\tls[i]=rs[i]=0,fa[i]=i,npl[i]=0;\n\t\tson[pa].push_back(i);\n\t}\n\tdfs(1,leader[1]);\n\tprintf(\"%lld\\n\",anss);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn  0;\n}\n```",
        "postTime": 1530626497,
        "uid": 61382,
        "name": "Rye_Catcher",
        "ccfLevel": 6,
        "title": "luogu\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011\u53ef\u5e76\u5806"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u8fd8\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u505a\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5b50\u6811\u4e2d\u5c3d\u91cf\u591a\u7684\u70b9\u88ab\u9009\u62e9\u3002\u7136\u800c\u600e\u4e48\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u88ab\u9009\u4eba\u6570\u5462\uff1f\n\n\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u7528\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u7ebf\u6bb5\u6811\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u662f\u6bcf\u4e2a\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u7684\u603b\u7684\u82b1\u8d39\uff0c\u4ee5\u53ca\u603b\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5de6\u513f\u5b50\u7684\u603b\u82b1\u8d39\u5927\u4e8e\u9884\u7b97\u7ecf\u8d39\uff0c\u5219\u9012\u5f52\u5230\u5de6\u513f\u5b50\u53bb\u67e5\u8be2\u3002\n\n\u5426\u5219\uff0c\u5c31\u9012\u5f52\u5230\u53f3\u513f\u5b50\uff0c\u6b64\u65f6\u5df2\u7ecf\u9009\u62e9\u4e86\u6574\u4e2a\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u9884\u7b97\u7ecf\u8d39\u8981\u51cf\u53bb\u5de6\u513f\u5b50\u7684\u603b\u6743\u503c\u3002\n\n\u7136\u540e\u5728\u9012\u5f52\u7684\u65f6\u5019\u7b97\u4e00\u4e0b\u53ef\u4ee5\u9009\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n",
        "postTime": 1510055386,
        "uid": 19863,
        "name": "1234KID",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1552 \u3010[APIO2012]\u6d3e\u9063\u3011"
    }
]