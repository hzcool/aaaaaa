[
    {
        "content": "\u4e0a\u6b21\u53d1\u8fc7\u8d85\u957f\u4ee3\u7801\u7684\u9898\u89e3\u540e\u60e8\u906d\u540c\u6821\u5927\u4f6c\u6279\u6597\n\n\n\u75db\u5b9a\u601d\u75db\uff0c\u5728\u5411\u5927\u4f6c\u5b66\u4e60\u4e4b\u540e\uff0c\u5e26\u6765\u6700\u77ed\u4ee3\u7801\uff08\u6ed1\u7a3d\uff09\n\n\u601d\u8def\u5927\u4f53\u4e0e\u4e4b\u524d\u76f8\u540c\uff1a\n\nmap\u53bb\u91cd\uff0c\n\n\u5728\u8fd9\u91cc\u53ea\u9700\u8981\u4e00\u4e2a\u961f\u5217\uff0c\u56e0\u4e3a\u9700\u8981\u8f83\u5c11\u6b65\u6570\u8fbe\u5230\u7684\u72b6\u6001\u4e00\u5b9a\u5728\u6b65\u6570\u8f83\u591a\u7684\u72b6\u6001\u524d\u5165\u961f\u5217\n\n\uff08\u6211\u4e4b\u524d\u90a3\u4e2a\u6700\u957f\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u4e0d\u9700\u8981\u4e24\u4e2a\u961f\u5217\u8f97\u8f6c\uff0c\u53ea\u8981\u52a0\u4e2a\u6b65\u6570\u7684\u8bb0\u5f55\u5c31\u884c\u4e86\uff09\n\n\nstl\u5927\u6cd5\u597d%%%\n\n\n```cpp\n#include<iostream>\n#include<map>\n#include<queue>\n#include<algorithm>\n#define ll long long//\u5728\u8fd9\u91cc\u770b\u5230\u4e00\u79cd\u5f88\u9a9a\u7684\u64cd\u4f5c\uff1a\u76f4\u63a5\u628aint\u5b9a\u4e49\u6210long long\uff1bmain\u51fd\u6570\u7528signed\u7c7b\u578b--\u9ebb\u9ebb\u518d\u4e5f\u4e0d\u6015\u6211\u5fd8\u5f00long long\u4e86\uff01\nusing namespace std;\nconst ll dx[]={-1,0,0,1},dy[]={0,-1,1,0};//\u8f6c\u79fb\u6570\u7ec4\uff1b\nll n;\nint  main()\n{\n    cin>>n;\n    queue<ll> q;\n    q.push(n);\n    map<ll,ll> m;\n    m[n]=0;\n    while(!q.empty())\n    {\n        int u=q.front(); //\u521d\u59cb\u72b6\u6001\u5165\u961f\u5217\n        int c[3][3],f=0,g=0,n=u;q.pop();\n        if(u==123804765)break;\n        for(ll i=2;i>=0;i--)\n            for(ll j=2;j>=0;j--)\n            {\n                c[i][j]=n%10,n/=10;\n                if(!c[i][j])f=i,g=j;\n            }\n        for(ll i=0;i<4;i++)\n        {\n            ll nx=f+dx[i],ny=g+dy[i],ns=0;\n            if(nx<0||ny<0||nx>2||ny>2)continue; //\u8d8a\u754c\u5c31\u4e0d\u6267\u884c\n            swap(c[nx][ny],c[f][g]);\n            for(ll i=0;i<3;i++)\n                for(ll j=0;j<3;j++)ns=ns*10+c[i][j];//\u77e9\u9635\u8f6c\u6570\u5217 \n            if(!m.count(ns))\n            {\n                m[ns]=m[u]+1;//map\u53bb\u91cd\u7684\u540c\u65f6\u987a\u4fbf\u7edf\u8ba1\u5230\u8fbe\u8fd9\u4e2a\u72b6\u6001\u6240\u9700\u7684\u6b65\u6570\n                q.push(ns);\n            }\n            swap(c[nx][ny],c[f][g]);//\u72b6\u6001\u590d\u539f\n        }\n    }\n    cout<<m[123804765]<<endl; // map\u7684\u4e0b\u6807\u76f4\u63a5\u7528\u6570\u5217\u8868\u793a\n    return 0;\n}\n\n```",
        "postTime": 1509543772,
        "uid": 53454,
        "name": "hidden_er",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "Upd on 2022.3.23\uff1a\u8fd9\u7bc7\u9898\u89e3\u662f\u6211\u5c0f\u5b66\u65f6\u671f\uff082017.12.31\uff09\u5199\u7684\uff0c\u6ca1\u60f3\u5230\u4e00\u76f4\u5230\u73b0\u5728\u8fd9\u7bc7\u9898\u89e3\u90fd\u4e0d\u505c\u5730\u6709\u65b0\u7684\u8bc4\u8bba\uff0c\u6240\u4ee5\u8d81\u8fd8\u6ca1\u9000\u5f79\uff0c\u6765\u4fee\u7f2e\u4e00\u4e0b\u8fd9\u7bc7\u9898\u89e3\u7684\u5185\u5bb9\u3002\u8fd9\u4e2a\u53f7\u5df2\u7ecf\u4e0d\u7528\u4e86\uff0c\u4f46\u5076\u5c14\u8fd8\u662f\u4f1a\u6765\u4e0a\u4e00\u4e0b\u7684\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u63d0\u51fa\u3002\n\n**\u601d\u8def\u4e00**\uff1a\u7528\u6700\u6734\u7d20\u7684 BFS\uff0c\u6bcf\u5f53\u641c\u7d22\u5230\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u65f6\uff0c\u5c31\u5c06\u8fd9\u4e2a\u65b0\u7684\u72b6\u6001\u653e\u5165\u961f\u5217\u5185\uff0c\u7136\u540e\u5b58\u50a8 0 \u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u4e8e\u4ee5\u540e\u7684\u641c\u7d22\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u7684\u72b6\u6001\u8fdb\u5165\u961f\u5217\uff0c\u5bfc\u81f4\u641c\u7d22\u7684\u901f\u5ea6\u53d8\u6162\u4e86\uff0c\u800c\u4e14\u8fd8\u5360\u7528\u4e86\u8bb8\u591a\u7684\u7a7a\u95f4\u3002\n\n**\u601d\u8def\u4e8c**\uff1a\u8fd9\u91cc\u4e0e **\u601d\u8def\u4e00** \u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\u591a\u4e86\u4e00\u4e2a\u5bf9\u4e8e\u641c\u7d22\u5230\u7684\u65b0\u72b6\u6001\u8fdb\u884c\u5224\u91cd\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u7684\u6d88\u8017\uff0c\u4f46\u662f\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u6837\u5b50\u5c31\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u6548\u7387\u8f83\u4e3a\u4f4e\u4e0b\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e0d\u53ef\u884c\u7684\u3002\n\n\n**\u601d\u8def\u4e09**\uff1a\u6211\u4eec\u7528\u53cc\u5411\u5bbd\u641c\u89e3\u51b3\u95ee\u9898\uff0c\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u548c\u961f\u5217 $f$ \u6765\u5b58\u50a8\u76f8\u5173\u6570\u636e\uff0c$f[i].map[j][k]$ \u8868\u793a\u8fd9\u4e2a\u961f\u5217\u91cc\u7684\u7b2c $i$ \u7ec4\u6570\u636e\u7684\u72b6\u6001\u7684\u7b2c $j$ \u884c $k$ \u5217\uff0c\u5e76\u7528 $w_i$ \u548c $w_j$ \u6765\u8868\u793a 0 \u6240\u5728\u7684\u4f4d\u7f6e\u7684\u7eb5\u5750\u6807\u4ee5\u53ca\u6a2a\u5750\u6807\uff0c\u7528 $t$ \u6765\u8868\u793a\u6b65\u6570\uff0c\u6211\u4eec\u7528 $f[1]$ \u6765\u5b58\u50a8\u5f00\u59cb\u7684\u72b6\u6001\uff0c\u7528 $f[2]$ \u6765\u5b58\u50a8\u7ed3\u675f\u7684\u72b6\u6001\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u7528 $c$ \u6765\u8868\u793a\u5b83\u662f\u4ece\u8d77\u59cb\u72b6\u6001\u5f00\u59cb\u5ef6\u4f38\u8fc7\u6765\u7684\uff0c\u8fd8\u662f\u4ece\u76ee\u6807\u72b6\u6001\u5f00\u59cb\u5ef6\u4f38\u8fc7\u6765\u7684\u3002\u82e5 $c=1$\uff0c\u5c31\u8868\u793a\u5b83\u662f\u4ece\u8d77\u59cb\u72b6\u6001\u5f00\u59cb\u5ef6\u4f38\u8fc7\u6765\u7684\uff0c\u5426\u5219\u5f53 $c=2$ \u65f6\u5c31\u8868\u793a\u5b83\u662f\u4ece\u76ee\u6807\u72b6\u6001\u5f00\u59cb\u5ef6\u4f38\u8fc7\u6765\u7684\u3002\u6240\u4ee5\u5f53\u641c\u7d22\u65b0\u7684\u72b6\u6001\u65f6\u53d1\u73b0\u6709\u4e24\u4e2a\u91cd\u590d\u7684\u8bdd\u5c31\u5224\u65ad\u4e00\u4e0b\u4ed6\u4eec\u7684 $c$ \u662f\u5426\u76f8\u7b49\uff0c\u82e5\u6211\u4eec\u7528 $\\text{now}$ \u6765\u8868\u793a\u4e0e\u65b0\u641c\u7d22\u5230\u7684\u72b6\u6001\u76f8\u540c\u7684\u72b6\u6001\u7684\u4f4d\u7f6e\uff0c$\\text{tou}$ \u8868\u793a\u5f53\u524d\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u7b54\u6848\u7b49\u4e8e $(f[\\text{now}].c+f[\\text{tou}].c+1)$\u3002\u5176\u6548\u7387\u76f8\u6bd4\u4e8e **\u601d\u8def\u4e8c** \u6709\u663e\u8457\u63d0\u5347\u3002\n\n\u5982\u679c\u4f60\u8fd8\u4e0d\u660e\u767d\u4ec0\u4e48\u662f\u53cc\u5411\u5bbd\u641c\u7684\u8bdd\uff0c\u5728\u8fd9\u91cc\u6211\u505a\u4e86\u4e00\u4e2a $3 \\times 3$ \u7684\u793a\u4f8b\uff0c\u6d45\u7eff\u8272\u4e3a\u8d77\u59cb\u72b6\u6001\uff0c\u6df1\u7eff\u8272\u4e3a\u76ee\u6807\u72b6\u6001\uff0c\u9ec4\u8272\u4ee3\u8868\u8981\u641c\u7d22\u7684\u70b9\u3002\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/12638.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12639.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12640.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12641.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12642.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12643.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12644.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12645.png) \n ![](https://cdn.luogu.com.cn/upload/pic/12646.png) \n\n\n**\u601d\u8def\u56db**\uff1a\u65e2\u7136\u53cc\u5411\u5bbd\u641c AC \u4e0d\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u591f\u518d\u4f18\u5316\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u5927\u90e8\u5206\u7684\u65f6\u95f4\u90fd\u662f\u7528\u6765\u8fdb\u884c\u72b6\u6001\u7684\u5224\u91cd\u4e86\u3002\u90a3\u4e48\uff0c\u600e\u6837\u80fd\u591f\u66f4\u5feb\u5730\u8fdb\u884c\u5224\u91cd\u5462\uff1f\u8003\u8651\u66b4\u529b\uff01\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e5d\u7ef4\u7684 $\\text{bool}$ \u6570\u7ec4 $cq$ \u6765\u8fdb\u884c\u5224\u91cd\uff0c\u5047\u8bbe\u6211\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 $nz$ \u6765\u5b58\u50a8\u65b0\u7684\u72b6\u6001\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5224\u91cd\u65f6\u4ec5\u9700\u8981\u5224\u65ad $cq[nz[1][1]][nz[1][2]][nz[1][3]][nz[2][1]][nz[2][2]][nz[2][3]][nz[3][1]][nz[3][2]][nz[3][3]]$ \u7684\u503c\u4e3a\u771f\u8fd8\u662f\u5047\u5373\u53ef\uff0c\u6211\u628a\u5b83\u4e3a\u771f\u65f6\u7b97\u4f5c\u5df2\u6709\u91cd\u590d\uff0c\u4e3a\u5047\u65f6\u4e3a\u6ca1\u6709\u91cd\u590d\uff0c\u867d\u7136\u8fd9\u4e2a\u5f0f\u5b50\u6709\u70b9\u957f\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5224\u91cd\u65f6\u4ec5\u9700\u5224\u65ad 1 \u6b21\uff0c\u5927\u5927\u5730\u51cf\u5c11\u4e86\u5224\u91cd\u65f6\u7684\u8fd0\u7b97\u91cf\u3002\n\n\u5bf9\u4e8e\u8f93\u5165\u4e3a ``603712458`` \u7684\u6570\u636e\uff0c\u8fd9\u79cd\u505a\u6cd5\u6bd4\u524d\u9762\u7684\u8981\u5feb\u4e0a 100s+\uff0c\u4e5f\u5145\u5206\u5730\u4f53\u73b0\u4e86\u4f18\u5316\u7684\u91cd\u8981\u6027\u3002\n\n\u6ce8\u610f\u5f53\u8d77\u70b9\u548c\u7ec8\u70b9\u72b6\u6001\u76f8\u540c\u7684\u65f6\u5019\u8981\u7279\u5224\u3002\n\n\u7531\u4e8e\u6bcf\u79cd\u72b6\u6001\u53ea\u4f1a\u641c\u4e00\u6b21\uff0c\u6240\u4ee5\u4e0d\u4f1a TLE\u3002\u672c\u9898\u4e2d\u8fd0\u7528\u7684\u7528\u4e5d\u4f4d\u6570\u7ec4\u5224\u65ad\u72b6\u6001\u91cd\u590d\u6027\u7684\u601d\u60f3\uff0c\u5176\u5b9e\u5c31\u662f\u72b6\u6001\u538b\u7f29\u7684\u57fa\u7840\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e5d\u4e2a\u6570\u538b\u6210\u4e00\u4e2a\u4e5d\u4f4d\u6570\uff0c\u7136\u540e\u7528\u4e2a ``set`` \u4e4b\u7c7b\u7684\u4e1c\u897f\u5b58\u72b6\u6001\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <cstring>\nstruct node{ int map[5][5],wi,wj,t; } f[100001];\nint dx[4]={1,0,-1,0};\nint dy[4]={0,1,0,-1};\nint xd[5][5]={0,0,0,0,0,\n              0,1,2,3,0,\n              0,8,0,4,0,\n              0,7,6,5,0,\n              0,0,0,0,0};\nbool cq[9][9][9][9][9][9][9][9][9];\nint nz[5][5];\nbool zp(int tou)\n{\n    for(int i=1;i<=3;i++)\n    {\n        for(int j=1;j<=3;j++)\n        {\n            if(f[tou].map[i][j]!=xd[i][j])\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nbool pdc()\n{\n    if(cq[nz[1][1]][nz[1][2]][nz[1][3]][nz[2][1]][nz[2][2]][nz[2][3]][nz[3][1]][nz[3][2]][nz[3][3]]==true)\n    {\n        return false;\n    }\n    return true;\n}\nvoid paint()\n{\n    cq[nz[1][1]][nz[1][2]][nz[1][3]][nz[2][1]][nz[2][2]][nz[2][3]][nz[3][1]][nz[3][2]][nz[3][3]]=true;\n}\nvoid bfs()\n{\n    int tou=1,wei=2;\n    while(tou<wei)\n    {\n        if(zp(tou)==true)\n        {\n            printf(\"%d\",f[tou].t);\n            return ;\n        }\n        for(int i=0;i<=3;i++)\n        {\n            int nx=f[tou].wi+dx[i];\n            int ny=f[tou].wj+dy[i];\n            if(nx>=1 && nx<=3 && ny>=1 && ny<=3)\n            {\n                memset(nz,0,sizeof(nz));\n                for(int j=1;j<=3;j++)\n                {\n                    for(int k=1;k<=3;k++)\n                    {\n                        nz[j][k]=f[tou].map[j][k];\n                    }\n                }\n                nz[f[tou].wi][f[tou].wj]=f[tou].map[nx][ny];\n                nz[nx][ny]=0;\n                if(pdc()==true)\n                {\n                    for(int j=1;j<=3;j++)\n                    {\n                        for(int k=1;k<=3;k++)\n                        {\n                            f[wei].map[j][k]=nz[j][k];\n                        }\n                    }\n                    f[wei].t=f[tou].t+1;\n                    f[wei].wi=nx;\n                    f[wei].wj=ny;\n                    paint();\n                    if(zp(wei)==true)\n                    {\n                        printf(\"%d\",f[tou].t+1);\n                        return ;\n                    }\n                    wei++;\n                }\n            }\n        }\n        tou++;\n    }\n}\nint main()\n{\n    for(int i=1;i<=3;i++)\n    {\n        for(int j=1;j<=3;j++)\n        {\n            char ch;\n            scanf(\"%c\",&ch);\n            f[1].map[i][j]=ch-'0';\n            if(f[1].map[i][j]==0)\n            {\n                f[1].t=0;\n                f[1].wi=i;\n                f[1].wj=j;\n            }\n        }\n    }\n    bfs();\n    return 0;\n}\n```",
        "postTime": 1514707814,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u600e\u4e48\u6240\u6709dalao\u5199\u7684\u90fd\u662f\u53cc\u5411bfs\uff0c\n\u849f\u84bb\u5199\u4e86\u4e00\u53d1IDA*\uff0c \u672c\u4ee5\u4e3a\u4f1aT\uff0c\u7ed3\u679c\u5176\u5b9e~~\u8dd1\u5f97\u8fd8\u633a\u5feb\uff1f~~\n\n\u8fed\u4ee3\u52a0\u6df1\u7684A*\u7b97\u6cd5\n\n\u6240\u8c13\u8fed\u4ee3\u52a0\u6df1\u5c31\u662f\u6bcf\u6b21**\u9650\u5236\u641c\u7d22\u6df1\u5ea6**\uff0c\n\u8fd9\u6837\u53ef\u4ee5\u5728\u6574\u4e2a\u641c\u7d22\u6811\u6df1\u5ea6\u5f88\u5927\u800c\u7b54\u6848\u6df1\u5ea6\u53c8\u5f88\u5c0f\u7684\u60c5\u51b5\u4e0b\u5927\u5927\u63d0\u9ad8\u6548\u7387\n\n\u4f7fk\u4ece1\u5f00\u59cb\u4e0d\u65ad\u52a0\u6df1\u679a\u4e3e\uff0c\n\u4f5c\u4e3a\u6700\u5927\u6b65\u6570\u8fdb\u884c**\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22**\u5224\u65ad\uff0c\u800c\u5bf9\u4e8e\u4e0d\u7528\u79fb\u52a8\u7684\u60c5\u51b5\u53ef\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u7279\u5224\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u7684**A*\u4f30\u4ef7\u51fd\u6570**\u8bbe\u7f6e\u4e3a\n\n**\u5f53\u524d\u72b6\u6001\u8fd8\u6709\u591a\u5c11\u4e2a\u4f4d\u7f6e\u4e0e\u76ee\u6807\u72b6\u6001\u4e0d\u5bf9\u5e94**\n\n\u82e5**\u5f53\u524d\u6b65\u6570+\u4f30\u4ef7\u51fd\u6570\u503c>\u679a\u4e3e\u7684\u6700\u5927\u6b65\u6570**\n\u5219\u76f4\u63a5\u8fd4\u56de\n\n\u5f53\u7136\u8fd9\u53ea\u662f\u57fa\u672c\u601d\u8def\uff0c\u641c\u7d22\u8fd8\u53ef\u4ee5\u6709\u5f88\u5927\u4f18\u5316\n\n\u6211\u4eec\u5728\u641c\u7d22\u4e2d\u518d\u52a0\u5165**\u6700\u4f18\u6027\u526a\u679d**\uff0c\n\u663e\u7136\u5f53\u524d\u679a\u4e3e\u4e0b\u4e00\u4e2a\u72b6\u6001\u65f6\u5982\u679c**\u56de\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\u80af\u5b9a\u4e0d\u662f\u6700\u4f18**\uff0c\n\u6240\u4ee5\u6211\u4eec\u5728\u679a\u4e3e\u4e0b\u4e00\u72b6\u6001\u65f6\u52a0\u5165\u5bf9\u8fd9\u79cd\u60c5\u51b5\u7684\u5224\u65ad\n\n\u5c06\u72b6\u6001\u6570\u7ec4\u5bf9\u79f0\u6392\u5217\u4f1a\u5f88\u65b9\u4fbf\u8fdb\u884c\u8fd9\u4e00\u64cd\u4f5c\n```cpp\nint nxtx[]={0,1,-1,0};\nint nxty[]={1,0,0,-1};\n```\n*********************\n\n```cpp\n//niiick\n#include<iostream>\n#include<string>\n#include<map>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\ntypedef long long lt;\n\nint read()\n{\n    int f=1,x=0;\n    char ss=getchar();\n    while(ss<'0'||ss>'9'){if(ss=='-')f=-1;ss=getchar();}\n    while(ss>='0'&&ss<='9'){x=x*10+ss-'0';ss=getchar();}\n    return f*x;\n}\n\nchar ss[15];\nint ans[4][4]=\n{{0,0,0,0},\n {0,1,2,3},\n {0,8,0,4},\n {0,7,6,5}};\nint a[5][5],k,judge;\nint nxtx[]={0,1,-1,0};\nint nxty[]={1,0,0,-1};\n\nint check()\n{\n    for(int i=1;i<=3;++i)\n    for(int j=1;j<=3;++j)\n    if(ans[i][j]!=a[i][j])return 0;\n    return 1;\n}\n\nint test(int step)\n{\n    int cnt=0;\n    for(int i=1;i<=3;++i)\n    for(int j=1;j<=3;++j)\n    if(ans[i][j]!=a[i][j]){ if(++cnt+step>k) return 0;}\n    return 1;\n}\n\nvoid A_star(int step,int x,int y,int pre)\n{\n    if(step==k){ if(check())judge=1; return;}\u8fbe\u5230\u5f53\u524d\u9650\u5236\u7684\u6700\u5927\u6df1\u5ea6\n    if(judge) return;\n    for(int i=0;i<4;++i)\n    {\n        int nx=x+nxtx[i],ny=y+nxty[i];\n        if(nx<1||nx>3||ny<1||ny>3||pre+i==3) continue;//\u52a0\u5165\u4e86\u4e0a\u8ff0\u6700\u4f18\u6027\u526a\u679d\n        swap(a[x][y],a[nx][ny]);\n        if(test(step)&&!judge) A_star(step+1,nx,ny,i);//A*\u4f30\u4ef7\u5408\u6cd5\u518d\u5411\u4e0b\u641c\u7d22\n        swap(a[x][y],a[nx][ny]);\n    }\n}\n\nint main()\n{\n    int x,y;\n    scanf(\"%s\",&ss);\n    for(int i=0;i<9;++i)\n    {\n        a[i/3+1][i%3+1]=ss[i]-'0';\n        if(ss[i]-'0'==0)x=i/3+1,y=i%3+1;\n    }\n    if(check()){printf(\"0\");return 0;}//\u7279\u5224\u4e0d\u7528\u79fb\u52a8\n    while(++k)//\u679a\u4e3e\u6700\u5927\u6df1\u5ea6\n    {\n        A_star(0,x,y,-1);\n        if(judge){printf(\"%d\",k);break;}\n    }\n    return 0;\n}\n```",
        "postTime": 1533104363,
        "uid": 60885,
        "name": "niiick",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u516b\u6570\u7801\u96be\u9898\uff0c\u4e00\u9053\u7ecf\u5178\u7684BFS\u9898\u76ee\uff08\u53cd\u6b63\u6211\u4e5f\u4e0d\u4f1a\u4ec0\u4e48\u5eb7\u6258\u5c55\u5f00...\uff09\u5199\u5b8c\u540e\uff0c\u53d1\u73b0\u4f17\u591a\u9898\u89e3\u4e2d\u5e76\u6ca1\u6709\u51e0\u7bc7\u53cc\u5411BFS\uff0c\u4e8e\u662f\u5c31\u6765\u53d1\u4e00\u6ce2\u9898\u89e3\uff08\u5c3d\u7ba1\u5355\u5411\u7684BFS\u4e5f\u80fdAC\uff0c\u4f46\u53cc\u5411BFS\u660e\u663e\u8981\u9ad8\u6548\u8bb8\u591a\uff09\u3002\n\n#### \u601d\u8def\u5982\u4e0b\uff1a\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a3x3\u7684\u77e9\u9635\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e5d\u4f4d\u6570\u5b57\uff0c\u5b58\u5165\u961f\u5217\u65f6\u4e5f\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u6309\u65b9\u5411\u5c1d\u8bd50\u5468\u56f4\u7684\u6570\u5b57\uff0c\u5224\u91cd\u8bb0\u7b54\u6848\u65f6\u53ef\u4ee5\u4f7f\u7528map\u3002\u7136\u540e\u5c31\u8fd9\u6837\u8fdb\u884c\u5355\u5411\u7684BFS\uff0caccepted\uff01\n\n#### \u91cd\u8981\u4f18\u5316\uff1a\u53cc\u5411BFS\n\u53cc\u5411BFS\u7684\u4f7f\u7528\u8981\u6c42\u4e4b\u4e00\u5c31\u662f\u77e5\u9053\u7ec8\u6b62\u72b6\u6001\uff0c\u8fd9\u9053\u9898\u76ee\u5b9e\u5728\u662f\u5728\u5408\u9002\u4e0d\u8fc7\u4e86\u3002\t\u8fd9\u91cc\u53ef\u4ee5\u5c06\u5224\u91cd\u6570\u7ec4\u7684\u503c\u8bbe\u4e3a0,1,2\uff0c\u5206\u522b\u4ee3\u8868\u672a\u8bbf\u95ee\u8fc7\uff0c\u987a\u5e8f\u8bbf\u95ee\u8fc7\uff0c\u9006\u5e8f\u8bbf\u95ee\u8fc7\uff0c\u5f53\u67d0\u4e2a\u72b6\u6001\u88ab\u987a\u5e8f\u9006\u5e8f\u90fd\u8bbf\u95ee\u8fc7\u65f6\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u8fde\u63a5\u7b54\u6848\u7684\u90a3\u4e2a\u72b6\u6001\u3002\u5982\u679c\u770b\u5230\u8fd9\u91cc\u8fd8\u4e0d\u751a\u7406\u89e3\uff0c\u4e0d\u7528\u7740\u6025\uff0c\u4ee3\u7801\u662f\u6bd4\u8f83\u6e05\u6670\u7684\u3002\n\n#### \u53cc\u5411BFS\u6ee1\u5206\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define ll long long int\nusing namespace std;\nint n,g=123804765;\nshort a[4][4],fx,fy,nx,ny;\nint dx[4]={1,-1,0,0};\nint dy[4]={0,0,1,-1}; //\u4ee3\u8868\u5411\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\nqueue<int> q;\nmap<int,int> v;\nmap<int,int> ans;\nvoid solve()\n{\n\tif(n==g) \t\t //\u7279\u5224\n    {\n        printf(\"0\");\n        exit(0);\n    }\t\t\t\t\n    q.push(n);\t\t//\u8d77\u59cb\u72b6\u6001\u4e0e\u7ec8\u6b62\u72b6\u6001\u540c\u65f6\u5165\u961f\n    q.push(g);\n    ans[n]=0;\n    ans[g]=1;\t\t\n    v[g]=2;\t\t\t//\u5c06\u4e24\u4e2a\u65b9\u5411\u6807\u8bb0\u6210\u4e0d\u540c\u7684\u6570\u5b57\n    v[n]=1;\n    while(!q.empty())\n    {\n        ll now,cur=q.front();\n        q.pop();\n        now=cur;\n        for(int i=3;i>=1;i--)\n            for(int j=3;j>=1;j--)\n            {\n                a[i][j]=now%10,now/=10;\n                if(a[i][j]==0) fx=i,fy=j;\n            }\n        for(int i=0;i<4;i++)\n        {\n            nx=fx+dx[i];\n            ny=fy+dy[i];\n            if(nx<1 || nx>3 || ny<1 || ny>3) continue;\n            swap(a[fx][fy],a[nx][ny]);\n            now=0;\n            for(int p=1;p<=3;p++)\n                for(int j=1;j<=3;j++)\n                    now=now*10+a[p][j];\t//\u6570\u5b57\u8f6c\u77e9\u9635\n            if(v[now]==v[cur]) \n            {\n                swap(a[fx][fy],a[nx][ny]); //\u4e00\u5b9a\u8981\u5148\u6362\u56de\u6765\u518d\u8df3\u8fc7\n                continue;\n            }\n            if(v[now]+v[cur]==3)\t\t//\u8bf4\u660e\u65b0\u5ef6\u4f38\u51fa\u7684\u70b9\u5df2\u88ab\u53e6\u4e00\u65b9\u5411\u8bbf\u95ee\u8fc7\n            {\n                printf(\"%d\",ans[cur]+ans[now]);//\u4e24\u65b9\u5411\u6b65\u6570\u548c\u5373\u4e3a\u603b\u6b65\u6570\n                exit(0);\n            }\n            ans[now]=ans[cur]+1;\n            v[now]=v[cur];\t\t\t\t//\u4e0e\u4e0a\u4e00\u72b6\u6001\u7684\u65b9\u5411\u4fdd\u6301\u4e00\u81f4\n            q.push(now);\n            swap(a[fx][fy],a[nx][ny]); //\u4e0d\u8981\u5fd8\u8bb0\u5c06\u8fd8\u56de\u6765\n        }\t\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    solve();\n}\n```\n\u6700\u540e\u8bf4\u4e00\u4e0b\u8fd9\u4e2a\u53cc\u5411\u7684\u6548\u7387\u6709\u591a\u9ad8\uff1a\n\n\u5355\u5411BFS\uff1a8388ms.\n\n\u53cc\u5411BFS\uff1a228ms.\n\n\u8fd9\u91cc\u5217\u4e3e\u4e86\u4e24\u7ec4\u6570\u636e\uff0c\u79d1\u5b66\u51c6\u786e\u7684\u8bf4\u660e\u4e86....\n\n\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u9053\u9898\u76ee\u5199\u53cc\u5411BFS\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n",
        "postTime": 1527348664,
        "uid": 26512,
        "name": "Christopher_Yan",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37 1379 \u516b\u6570\u7801\u96be\u9898"
    },
    {
        "content": "# \u516b\u6570\u7801~~\u96be~~\u9898\n\n\u8fd9\u771f\u662f\u4e00\u9053\u84dd\u9898\uff0c~~\u84dd\u662f\u6c34\u7684\u989c\u8272~~\n\n\u672c\u4eba\u51c6\u5907\u4e86\u4e09\u79cdAC\u6b64\u9898\u7684\u65b9\u6cd5\n\n\u4ece\u4e0a\u5230\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u6b21\u964d\u4f4e\n\n\u8bdd\u4e0d\u591a\u8bf4\n\n# NO.1 \u6734\u7d20BFS + MAP\n~~STL\u5927\u53d1\u543c~~\n\n\u7528map\u5c06\u6bcf\u4e00\u6b65\u7684\u72b6\u6001\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u4e0aBFS\n\n\u662f\u672c\u849f\u84bb\u82b1~~\u534a\u4e2a\u5c0f\u65f6~~\u5199\u7684\uff0c\u4ee3\u7801\u91cf\u7565\u957f\n\n\u4e0d\u5f00O2 6418ms ~~\u5de8\u6162\u65e0\u6bd4~~\n\n```cpp\n//\u516b\u6570\u7801BFS\u7248  \n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n    ll f=1,x=0;\n    char ch;\n    do {\n        ch=getchar();\n        if(ch=='-')f=-1;\n    } while(ch>'9'||ch<'0');\n    do {\n        x=x*10+ch-'0';\n        ch=getchar();\n    } while(ch>='0'&&ch<='9');\n    return f*x;\n}\n\nstring a;\n\nstring goal=\"123804765\";\n\nmap<string,bool>vis;\n\nstruct node{\n    string a;\n    int step;\n};\n\nqueue<node>q;\n\ninline void expand(node b){\t\n    string s=b.a;\n    int st=b.step;\n    int cnt=st;\n//\tif(cnt==11) exit(0);\n\n    string olds=s;\n    for(int i=0;i<9;i++){\n        if(s[i]=='0')\n        {\n            if(i>=3&&i<=8){//\u5411\u4e0a\u62d3\u5c55 \n                swap(s[i],s[i-3]);\n            //\tcout<<cnt<<\" q 1 \"<<s<<endl;\n                if(s==goal){\n                    cout<<st+1<<endl;\n                    exit(0);\n                }\n                if(vis[s]==0){\n                    vis[s]=1;\n                    q.push({s,st+1});\n                }\n                swap(s[i],s[i-3]);\n            }\n            if(i>=0&&i<=5)//\u5411\u4e0b\u62d3\u5c55 \n            {\n                swap(s[i],s[i+3]);\n        //\t\tcout<<cnt<<\" q 2 \"<<s<<endl;\n                if(s==goal){\n                    cout<<st+1<<endl;\n                    exit(0);\n                }\n                if(vis[s]==0){\n                    vis[s]=1;\n                    q.push({s,st+1});\n                }\n                swap(s[i],s[i+3]);\n            }\n            if(i%3==1||i%3==2)//\u5411\u5de6\u62d3\u5c55 \n            {\n                swap(s[i],s[i-1]); \n        //\t\tcout<<cnt<<\" q 3 \"<<s<<endl;\n                if(s==goal){\n                    cout<<st+1<<endl;\n                    exit(0);\n                }\n                if(vis[s]==0)\n                {\n                    vis[s]=1;\n                    q.push({s,st+1});\n                }\n                swap(s[i],s[i-1]); \n            }\n            if(i%3==1||i%3==0)//\u5411\u53f3\u62d3\u5c55 \n            {\n                swap(s[i],s[i+1]); \n        //\t\tcout<<cnt<<\" q 4 \"<<s<<endl;\n                if(s==goal){\n                    cout<<st+1<<endl;\n                    exit(0);\n                }\n                if(vis[s]==0){\n                    vis[s]=1;\n                    q.push({s,st+1});\n                }\n                swap(s[i],s[i+1]); \n            }\n            break;\n        }\n    }\n    return ;\n}\n\n\ninline void BFS()\n{\n    \n    node r;\n    r.a=a;r.step=0;\n    q.push(r);\n    vis[a]=1;\n    while(!q.empty())\n    {\n        node sss=q.front();q.pop();\n        expand(sss);\n    } \n}\n\nint main(){\n    cin>>a;\t\n    if(a==goal) {\n        cout<<\"0\\n\";\n        return 0;\n    }\n    BFS();\n    return 0;\n}\n\n```\n\n\n# NO.2 HASH+\u6734\u7d20BFS\n------------\n\u4e0a\u4ee3\u7801\n\n\u7528hash\u8868\u5c06\u6bcf\u4e00\u4e2a\u72b6\u6001\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5c31\u662fBFS\u677f\u5b50\n\n\u4e0d\u5f00O2 1202ms ~~\u597d\u6162\u554a~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MOD 3600\nstruct node{\n    int p,t;char c[9];\n}num;\nqueue<node>q;\nint st,en,ans;\nvector<long long>hash[MOD];\nint a[9];\nbool found=false;\nconst int w[10][5]={{0},{2,2,4},{3,1,3,5},{2,2,6},{3,1,5,7},{4,2,4,6,8},{3,3,5,9},{2,4,8},{3,5,7,9},{2,6,8}};\nchar che[9]={'1','2','3','8','0','4','7','6','5'};\ninline bool check(node x){\n    for(int i=0;i<=8;i++)\n    if(x.c[i]!=che[i]) return false;\n    return true;\n}\nint b[9]; \ninline bool checkh(node x){\n    long long num=0,tmp;\n    for(int i=0;i<9;i++)\n    {\n        a[i]=x.c[i]-'0';\n        num=num*10+a[i];\n    }\n    tmp=a[8]*256+a[7]*128+a[6]*64+a[5]*32+a[4]*16+a[3]*8+a[2]*4+a[1]*2+a[0];\n    for(int i=0,to=hash[tmp].size();i<to;i++){\n        if(hash[tmp][i]==num) return false;\n    }\n    hash[tmp].push_back(num);\n    return true;\n}\ninline void make(node x){\n    for(int i=1;i<=w[x.p][0];i++){\n        node nxt=x;\n        nxt.p=w[x.p][i];\n        nxt.t=nxt.t+1;\n        char ch;\n        ch=nxt.c[x.p-1],nxt.c[x.p-1]=nxt.c[w[x.p][i]-1],nxt.c[w[x.p][i]-1]=ch;\n        if(check(nxt)){found=true,ans=nxt.t;return;}\n        if(checkh(nxt))q.push(nxt);\n    }\n}\nint main()\n{\n    scanf(\"%s\",num.c);\n    for(int i=0;i<=8;i++){\n        if(num.c[i]!=che[i]){\n            found=true;\n            break;\n        }\n    }\n    if(!found){puts(\"0\");return 0;}\n    found=false;\n    for(int i=0;i<=8;i++)\n    {\n        if(num.c[i]=='0'){\n            num.p=i+1;\n            break;\n        }\n    }\t\n    q.push(num);\n    while(!q.empty())\n    {\n        make(q.front());\n        q.pop();\n        if(found) break;\n    }\n    printf(\"%d\",ans);\n    return 0;\n} \n```\n# NO.3 \u53cc\u7aef\u961f\u5217BFS\n\n\u4e0d\u5f00O2 148ms ~~\u8d28\u7684\u98de\u8dc3~~\n\n\u53cc\u7aef\u961f\u5217\u662f\u5728\u7f51\u4e0a\u770b\u535a\u5ba2\u5b66\u7684\n\n\u4ee5\u4e3a\u662f\u7528deque\u6216\u8005\u4e24\u4e2aqueue\u5b9e\u73b0\u7684\n\n\u7136\u800c\u4e00\u4f4d\u5927\u4f6c\u7ed9\u4e86\u6211\u542f\u53d1 \n\n\u53ef\u4ee5\u7528\u4e00\u4e2aqueue \u5199\u53cc\u7aef\u961f\u5217\n\n\u628a\u521d\u59cb\u72b6\u6001\u548c\u6700\u540e\u72b6\u6001\u4e00\u8d77\u5b58\u8fdb\u53bb\uff0c\u8fd9\u6837\u4ee3\u7801\u91cf\u53ef\u4ee5\u66f4\u5c11\n\n\u4e5f\u5c31A\u4e86\u8fd9\u9053\u9898\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n    ll f=1,x=0;\n    char ch;\n    do {\n        ch=getchar();\n        if(ch=='-')f=-1;\n    } while(ch>'9'||ch<'0');\n    do {\n        x=x*10+ch-'0';\n        ch=getchar();\n    } while(ch>='0'&&ch<='9');\n    return f*x;\n}\n\nll a,goal=123804765;\n\nll s[4][4];\n\nmap<int,int>dis;\n\nmap<int,int>vis;\n\nint dx[5]={1,-1,0,0};\nint dy[5]={0,0,1,-1};\n\ninline void deque_BFS()\n{\n    queue<ll>q;\n    if(a==goal){\n        cout<<\"0\\n\";\n        exit(0);\n    }\n    vis[a]=1;vis[goal]=2;\n    dis[a]=0;dis[goal]=0;\n    q.push(a);\n    q.push(goal);\n    while(!q.empty())\n    {\n        ll now,cur=q.front();q.pop();\n        now=cur;\n        int sx,sy;\n        for(int i=3;i>=1;i--)\n        {\n            for(int j=3;j>=1;j--)\n            {\n                s[i][j]=now%10;now/=10;\n                if(!s[i][j])sx=i,sy=j;\t\n            }\n        }\n        for(int i=0;i<4;i++)\n        {\n            int xx=sx+dx[i],yy=sy+dy[i];\n            if(xx<1||xx>3||yy<1||yy>3) continue;\n            swap(s[sx][sy],s[xx][yy]);\n            now=0;\n            for(int j=1;j<=3;j++)\n            {\n                for(int k=1;k<=3;k++)\n                {\n                    now=now*10+s[j][k];\n                }\n            }\n            if(vis[cur]==vis[now])\n            {\n                swap(s[sx][sy],s[xx][yy]);\n                continue;\n            }\n            if(vis[now]+vis[cur]==3)\n            {\n                cout<<dis[cur]+dis[now]+1<<endl;\n                exit(0); \n            }\n            \n            dis[now]=dis[cur]+1;\n            vis[now]=vis[cur];\n            q.push(now);\n            swap(s[sx][sy],s[xx][yy]);\n        }\n    }\n}\n\nint main(){\n    a=read();\n    deque_BFS(); \n    return 0;\n}\n\n```\n\n### update 2019.8.16 \u66f4\u65b0\u4e86 $A*$ \u548c $IDA*$\u7684\u505a\u6cd5\n\n# NO.4 $A*$ \u505a\u6cd5\n\n$A*$\u5176\u5b9e\u662f\u4f18\u5148\u961f\u5217$priority$$_$$queue$ $BFS$ \u52a0\u4e0a\u4e00\u4e2a\u4f30\u4ef7\u51fd\u6570\n\n$F(N) = H(N) + G(N)$\n\n$F*(N) = H*(N) + G*(N)$\n\n\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f$IDA*$\u5feb\n\n### CODE \n```cpp\n#include <bits/stdc++.h>\n\n//#include <windows.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n    ll f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nint x, y, now;\n\nchar s[15];\n\nstring goal = \"123804765\";\n\nint h(string cur){\n\tint res = 0;\n\tfor (int i = 0; i < 9; i ++ ){\n\t\tif (goal[i] != cur[i] && goal[i] != 0) res++;\n\t}\n\treturn res;\n} \n\nstruct node{  \n    int f, step;  \n    string now; \n\tbool operator < (const node &x) const {  \n        return f > x.f;        \n    }  \n};\n\nint ans = 0x7fffffff;\n\npriority_queue <node> q;\n\nmap <string, bool>mp;\n\nmap <string, int> dis;\n\nint dx[4] = {0, 1, -1, 0};\nint dy[4] = {1, 0, 0, -1};\n\nvoid A_STAR(){\n\twhile (!q.empty())\n\t{\n\t\tnode t = q.top(); q.pop();\n\t\tstring cur = t.now;\n\t\tif (cur == \"123804765\") {\n\t\t\tprintf(\"%d\\n\", t.step);\n\t\t\texit(0);\n\t\t}\n\t\tint sx, sy;\n\t\tfor(int i = 0; i < 9; i ++ ){\n\t       \tif(cur[i] - '0' == 0) sx = i / 3 + 1, sy = i % 3 + 1;\n\t\t}\n\t//\t0 1 2 3 4 5 6 7 8 \n\t//\t(1, 1) (1, 2) (1, 3)\n\t//\t(2, 1) (2, 2) (2, 3)\n\t//\t(3, 1) (3, 2) (3, 3)\n \t//\t(xx - 1) * 3 + yy - 1\n\t\tint tmp1 = (sx - 1) * 3 + sy - 1;\n\t\tfor (int i = 0; i < 4 ; i ++ ){\n\t\t\tint xx = dx[i] + sx, yy = dy[i] + sy;\t\t\t\n\t\t\tif (xx < 1 || xx > 3 || yy < 1 || yy > 3) continue;\n\t\t\tint tmp2 = (xx - 1) * 3 + yy - 1;\n\t\t\tswap(cur[tmp1], cur[tmp2]);\n\t\t\tif (mp[cur] == 0 || (mp[cur] == 1 && (t.step + 1) < dis[cur])) {\n\t\t\t\tdis[cur] = t.step + 1;\n\t\t\t\tq.push((node){h(cur) + t.step + 1, t.step + 1, cur}); \n\t\t\t\tmp[cur] = 1;\n\t\t\t}\n\t\t\tswap(cur[tmp1], cur[tmp2]);\n\t\t}\n\t}\n}\n\nint main() {\n    scanf(\"%s\",s);\n    for(int i = 0; i < 9; ++ i ) \n\t\tif(s[i] - '0' == 0) x = i / 3 + 1, y = i % 3 + 1;\n    if (h(s) == 0) {puts(\"0\"); return 0;}\n    while(q.size()) q.pop();\n\tq.push((node){h(s), 0, s});\n\tmp[s] = 1;\n\tdis[s] = 0;\n\tA_STAR();\n\treturn 0;\n}\n```\n\n# NO.5 $IDA *$ \u7b97\u6cd5\n\n\u4e0d\u5f00O2 462ms\n\n\u4fee\u6539\u4e0b \u4f30\u4ef7\u51fd\u6570(h()) \u4f30\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u964d\u66f4\u4f4e\n\n### code\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n\tll f = 1, x = 0; char ch;\n\tdo {ch = getchar(); if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n\tdo {x = x * 10 + ch - '0'; ch = getchar();} while (ch >= '0' && ch <= '9');\n\treturn f * x;\n}\n\nchar s[15];\n\nchar goal[] = {'1', '2', '3', '8', '0', '4', '7', '6', '5'};\n\nint maxdepth;\n\ninline int h(char *cur) {\n\tint res = 0;\n\tfor (int i = 0; i < 9; i ++ ) {\n\t\tif (goal[i] != cur[i] && cur[i] != 0) res++;\n\t}\n\treturn res;\n}\n\nint dx[] = {0, 1, -1, 0};\nint dy[] = {1, 0, 0, -1};\n\n\nbool dfs (int depth, char *a, int pre) {\n\tif (h(a) == 0) return true;\n\tif (depth + h(a) - 1 > maxdepth) return false;\n\tint sx, sy;\n\tfor (int i = 0; i < 9; i ++ )\n\t\tif (a[i] == '0') sx = i / 3 + 1, sy = i % 3 + 1;\n\tfor (int i = 0; i < 4; i ++ ) {\n\t\tint xx = dx[i] + sx, yy = dy[i] + sy;\n\t\tif (xx < 1 || xx > 3 || yy < 1 || yy > 3 || (pre + i == 3)) continue;\n\t\tswap(a[(xx - 1) * 3 + yy - 1], a[(sx - 1) * 3 + sy - 1]);\n\t\tif (dfs(depth + 1, a, i)) return true;\n\t\tswap(a[(xx - 1) * 3 + yy - 1], a[(sx - 1) * 3 + sy - 1]);\n\t}\n\treturn false;\n}\n\nint main() {\n\tscanf (\"%s\", s);\n\tif (h(s) == 0) {puts(\"0\"); return 0;}\n\tfor (maxdepth = 1; ; maxdepth ++ ) {\n\t\tif (dfs(0, s, -1)) {\n\t\t\tprintf (\"%d\\n\", maxdepth);\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1563538591,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "### \u524d\u8a00\uff1a\u5bf9\u4e8e\u516b\u6570\u7801\u96be\u9898\u8fd9\u9053\u7ecf\u5178bfs\u7684\u9898\u76ee\uff0c~~\uff08\u8fd9\u662f\u6211\u542c\u5b66\u957f\u8bb2\u7684\uff09~~\uff0c\u6211\u82b1\u4e86\u4e0d\u6b62\u591a\u4e45\u7684\u65f6\u95f4\u624d\u8fc7\u4e86\u5b83\u3002  \n\n**\u601d\u8def\uff1a\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u7528bfs\uff0c\u5728\u961f\u5217\u4e2d\u5b58\u50a8\u6bcf\u4e00\u6b65\u7684\u72b6\u6001\uff0c\u5e76\u5c06\u8fd9\u4e00\u4e2a\u72b6\u6001\u53d6hash\u503c\uff0c~~\u4e5f\u5c31\u662f\u4f17\u4f4d\u5927\u4f6c\u8bb2\u7684\u5eb7\u6258\u5c55\u5f00~~\uff0c\u5982\u679c\u5f53\u67d0\u4e00\u4e2a\u72b6\u6001\u7684hash\u503c\u5df2\u7ecf\u7b49\u4e8e\u4e86\u76ee\u6807\u72b6\u6001\u7684hash\u503c\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u5b83\u7684\u6b65\u6570\u5373\u53ef\u3002\uff08\u56e0\u4e3a\u5e7f\u641c\u6709\u4e00\u4e2a\u7b2c\u4e00\u4e2a\u641c\u5230\u7684\u76ee\u6807\u72b6\u6001\u5fc5\u5b9a\u662f\u6700\u4f18\u7684\u7279\u6027\uff09 **\n\n### \u8865\u5145\u2014\u2014\u5eb7\u6258\u5c55\u5f00\uff08\u4ee5\u4e0b\u5185\u5bb9\u9009\u81ea\u5ea6\u5a18\uff09\uff1a  \n```\n\u5eb7\u6258\u5c55\u5f00\u662f\u4e00\u4e2a\u5168\u6392\u5217\u5230\u4e00\u4e2a\u81ea\u7136\u6570\u7684\u53cc\u5c04\uff0c\u5e38\u7528\u4e8e\u6784\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u7a7a\u95f4\u538b\u7f29\u3002  \n\u5eb7\u6258\u5c55\u5f00\u7684\u5b9e\u8d28\u662f\u8ba1\u7b97\u5f53\u524d\u6392\u5217\u5728\u6240\u6709\u7531\u5c0f\u5230\u5927\u5168\u6392\u5217\u4e2d\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u662f\u53ef\u9006\u7684\u3002\n```        \n**\u5eb7\u6258\u5c55\u5f00\u8fd0\u7b97:\n       $X=a_n(n-1)!+a_{n-1}(n-2)!+...+a_1\\cdot0!$  \n\u5176\u4e2d$a_i$\u4e3a\u6574\u6570,\u5e76\u4e14$0\\leq a_i<i,1\\leq i \\leq n$\u3002    \n$a_i$\u8868\u793a\u539f\u6570\u7684\u7b2c$i$\u4f4d\u5728\u5f53\u524d\u672a\u51fa\u73b0\u7684\u5143\u7d20\u4e2d\u662f\u6392\u5728\u7b2c\u51e0\u4e2a  \n**    \n**\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff1a  \n\u5728$(1,2,3,4,5)$ $5$\u4e2a\u6570\u7684\u6392\u5217\u7ec4\u5408\u4e2d\uff0c\u8ba1\u7b97 $34152$ \u7684\u5eb7\u6258\u5c55\u5f00\u503c\u3002  \n\u9996\u4f4d\u662f $3$ \uff0c\u5219\u5c0f\u4e8e $3$ \u7684\u6570\u6709\u4e24\u4e2a\uff0c\u4e3a $1$ \u548c $2$ ,\u5219\u9996\u4f4d\u5c0f\u4e8e $3$ \u7684\u6240\u6709\u6392\u5217\u7ec4\u5408\u4e3a $a[5]\\times(5-1)!$  \n\u7b2c\u4e8c\u4f4d\u662f $4$\uff0c\u5219\u5c0f\u4e8e $4$ \u7684\u6570\u6709\u4e24\u4e2a\uff0c\u4e3a $1$ \u548c $2$\uff0c$a[5]=2$ ,\u6ce8\u610f\u8fd9\u91cc $3$ \u5e76\u4e0d\u80fd\u7b97\uff0c\u56e0\u4e3a $3$ \u5df2\u7ecf\u5728\u7b2c\u4e00\u4f4d\uff0c\u6240\u4ee5\u5176\u5b9e\u8ba1\u7b97\u7684\u662f\u5728\u7b2c\u4e8c\u4f4d\u4e4b\u540e\u5c0f\u4e8e4\u7684\u4e2a\u6570\u3002\u56e0\u6b64$a[4]=2$\u3002  \n\u7b2c\u4e09\u4f4d\u662f $1$\uff0c\u5219\u5728\u5176\u4e4b\u540e\u5c0f\u4e8e $1$ \u7684\u6570\u6709 $0$ \u4e2a\uff0c\u6240\u4ee5 $a[3]=0 $\u3002  \n\u7b2c\u56db\u4f4d\u662f $5$\uff0c\u5219\u5728\u5176\u4e4b\u540e\u5c0f\u4e8e $5$ \u7684\u6570\u6709 $1$ \u4e2a\uff0c\u4e3a $2$\uff0c\u6240\u4ee5 $a[2]=1$\u3002  \n\u6700\u540e\u4e00\u4f4d\u5c31\u4e0d\u7528\u8ba1\u7b97\u5566\uff0c\u56e0\u4e3a\u5728\u5b83\u4e4b\u540e\u5df2\u7ecf\u6ca1\u6709\u6570\u4e86\uff0c\u6240\u4ee5 $a[1]$ \u56fa\u5b9a\u4e3a $0$   \n\u6839\u636e\u516c\u5f0f\uff1a  \n  \t$X=2\\times 4!+2\\times3!+0\\times2!+1\\times1!+0\\times0!=61$  \n\u6240\u4ee5 $34152$\u7684\u5eb7\u6258\u5c55\u5f00\u503c\u662f $61$ \uff08\u4ee3\u7801\u5b9e\u73b0\u5c31\u5728\u672c\u9898\u4e2d\u6709\uff09  \n**  \n### \u56de\u5f52\u6b63\u9898\n\u6839\u636e\u4e0a\u9762\u6211\u4eec\u7684\u601d\u8def\uff0c\u6211\u4eec\u628a\u4ee3\u7801\u5b9e\u73b0\u51fa\u6765\u5c31\u662f\u8fd9\u6837\uff1a  \n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\ntypedef unsigned long long ull;  //\u7eaf\u5c5e\u95f2\u5f97\u86cb\u75db\null end;\nint book[3000000];  //\u5224\u65ad\u6bcf\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u4e5f\u5c31\u662f\u6392\u91cd\uff08\u503c\u53ef\u4ee5\u4e0d\u5f00\u8fd9\u4e48\u5927\uff09\nint v1[4]={0,1,0,-1};  //\u65b9\u5411\u6570\u7ec4\uff0c\u679a\u4e3e0\u53ef\u4ee5\u8d70\u7684\u56db\u4e2a\u65b9\u5411\nint v2[4]={1,0,-1,0};\nstruct node\n{\n    int x,y,kkk;  //x,y\u8868\u793a0\u5728a\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807,kkk\u8868\u793a\u5f53\u524d\u7684\u6b65\u6570\n    ull hash1;    //\u5eb7\u6258\u5c55\u5f00\u7684\u54c8\u5e0c\u503c\n    int a[4][4];  //\u72b6\u6001\u6570\u7ec4\n};\nnode que[2000001]; //\u7ed3\u6784\u4f53\null hash1(char s[])//\u5eb7\u6258\u5c55\u5f00\u7684\u51fd\u6570\n{\n\tint f[9]={0,1,2,6,24,120,720,5040,40320}; //\u5148\u5c06\u6bcf\u4e00\u4e2a\u9636\u4e58\u7684\u503c\u5b58\u4e0b\u6765\uff0c\u65b9\u4fbf\u76f4\u63a5\u8fd0\u7b97\n\tint book[9]={0}; //\u5224\u65ad\u6bcf\u4e00\u4e2a\u6570\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\n    ull ans=0,x=8;\n    for(int i=0;i<strlen(s);i++) //\u5c06\u4f20\u6765\u7684\u5b57\u7b26\u6570\u7ec4\u904d\u5386\u4e00\u904d\n    {\n    \tint num=0;   //num\u5b58\u50a8\u5728\u7b2ci\u4e2a\u6570\u524d\u7684\u6570\u7684\u6570\u76ee\n    \tbook[s[i]-'0']=1; //\u5148\u6807\u8bb0\u7b2cs[i]\u4e2a\u6570\u5df2\u7ecf\u51fa\u73b0\n    \tfor(int j=0;j<s[i]-'0';j++) //\u904d\u5386s[i]\u4e4b\u524d\u7684\u6570\n    \t\tif(!book[j])  //\u5982\u679c\u8fd9\u4e2a\u6570\u6ca1\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48num++\n\t\t\t\tnum++;\n    \tans+=num*f[x--];  //\u5eb7\u6258\u5c55\u5f00\u7684\u516c\u5f0f\uff0c\u6bcf\u4e00\u9879\u7b49\u4e8e\u8fd9\u4e00\u9879\u6570\u524d\u672a\u51fa\u73b0\u8fc7\u7684\u6570\u4e58\u4ee5\u8fd9\u4e2a\u6570\u4f4d\u6570\u7684\u9636\u4e58\n    }\n    return ans;  //\u8fd4\u56de\u5eb7\u6258\u5c55\u5f00\u7684\u503c\n}\nint main()\n{\n    int head=1,tail=2;\n    int i,j,k,n;\n    char s[9],ss[9];\n    scanf(\"%s\",s);\n    end=hash1(\"123804765\");  //\u9996\u5148\u5c06\u76ee\u6807\u72b6\u6001\u7684\u503c\u5b58\u4e0b\u6765\n    que[head].kkk=0;  //\u6b65\u6570\u521d\u59cb\u5316\u4e3a0\n    que[head].hash1=hash1(s);  //\u5c06\u521d\u59cb\u72b6\u6001\u7684\u54c8\u5e0c\u503c\u653e\u5165hash1\n    book[que[head].hash1]=1;  //\u6807\u8bb0\u76ee\u6807\u72b6\u6001\u5df2\u7ecf\u51fa\u73b0\n    for(i=1;i<=3;i++)\n    \tfor(j=1;j<=3;j++)\n    \t{\n    \t\tque[head].a[i][j]=s[(i-1)*3+j-1]-'0';\n    \t\tif(que[head].a[i][j]==0)\n    \t\t{\n    \t\t\tque[head].x=i;\n    \t\t\tque[head].y=j;\n    \t\t}\n\t\t}//\u5c06\u521d\u59cb\u72b6\u6001\u5b58\u8fdb\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5e76\u8bb0\u5f55\u4e0b0\u7684\u4f4d\u7f6e\n    while(head<=tail) //bfs\n    {\n        if(que[head].hash1==end) //\u5982\u679c\u5f53\u524d\u72b6\u6001\u7684\u503c\u7b49\u4e8e\u76ee\u6807\u72b6\u6001\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u6b65\u6570\n        {\n            printf(\"%d\",que[head].kkk);\n            return 0;\n        }\n        for(k=0;k<4;k++) //\u5426\u5219\uff0c\u679a\u4e3e\u56db\u4e2a\u65b9\u5411\n        {\n        \tchar ch[9]={0};  //\u7528\u6765\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\n            int tx=que[head].x+v1[k],ty=que[head].y+v2[k];//0\u79fb\u52a8\u540e\u7684\u4f4d\u7f6e\n            if(tx<1 || tx>3 || ty<1 || ty>3) continue; //\u5982\u679c\u79fb\u52a8\u51fa\u4e86\u8fb9\u754c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u80af\u5b9a\u4e0d\u5408\u6cd5\n            for(i=1;i<=3;i++)\n            \tfor(j=1;j<=3;j++)\n            \t\tque[tail].a[i][j]=que[head].a[i][j]; \n            swap(que[tail].a[tx][ty],que[tail].a[que[head].x][que[head].y]); //\u5c06\u4e0a\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u518d\u8f6c\u6362\u4f4d\u7f6e\n            for(i=1;i<=3;i++)\n            \tfor(j=1;j<=3;j++)\n            \t\tch[(i-1)*3+j-1]=que[tail].a[i][j]+'0'; //\u5c06\u4e8c\u7ef4\u6570\u7ec4\u5b58\u8fdb\u5b57\u7b26\u6570\u7ec4\n            ull ans=hash1(ch);  //\u83b7\u53d6\u8fd9\u4e2a\u4e8c\u4f4d\u6570\u7ec4\u7684\u54c8\u5e0c\u503c\uff08\u5eb7\u6258\u5c55\u5f00\u503c\uff09\n            if(!book[ans]) //\u5982\u679c\u8fd9\u4e2a\u72b6\u6001\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c06\u4ed6\u52a0\u5165\u961f\u5217\n            {\n                book[ans]=1; //\u6807\u8bb0\u8fd9\u4e2a\u72b6\u6001\u51fa\u73b0\u8fc7\n                que[tail].hash1=ans;  //\u8bb0\u5f55\u4e0b\u5b83\u7684\u54c8\u5e0c\u503c\n                que[tail].x=tx; que[tail].y=ty;  //\u5b58\u4e0b\u76ee\u524d\u72b6\u60010\u7684\u4f4d\u7f6e\n                que[tail].kkk=que[head].kkk+1; //\u5c06\u6b65\u6570+1\n                tail++;\n            }\n        }\n        head++;  //\u5343\u4e07\u8981\u52a0\u4e0a\u8fd9\u53e5\u8bdd\uff0c\u4e0d\u7136\u5c31\u4f1a\u6b7b\u5faa\u73af\n    }\n    return 0;\n}\n```\n### \u8fd9\u5c31\u662f\u672c\u849f\u84bb\u7684\u89c1\u89e3\uff0c\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u4e9b\u5e2e\u52a9  \n### \u5982\u679c\u6587\u7ae0\u6709\u95ee\u9898\uff0c\u6216\u8005\u90a3\u4e9b\u5730\u65b9\u4e0d\u61c2\uff0c\u53ef\u4ee5\u79c1\u4fe1\u53d1\u7ed9\u6211",
        "postTime": 1548412289,
        "uid": 101042,
        "name": "zhz\u5c0f\u849f\u84bb",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "$2018.11.5$ $Update:$ \u6574\u4f53\u8c03\u6574\u4e86\u7801\u98ce(\u4f46\u662f\u7eaf\u4ee3\u7801\u90a3\u91cc\u6ca1\u6709\u8c03\u6574) \u52a0\u5165\u4e86 $LaTeX$ ~~\u96be\u4ee5\u60f3\u8c61\u4e00\u4e2a\u4e0d\u7528LeTeX\u7684\u6587\u7ae0\u662f\u591a\u4e48\u4e11\u964b~~\n\n\u96be\u5f97\u5199\u4e2a\u84dd\u9898\u4e0d\u770b\u9898\u89e3 \u90a3\u5c31\u6765\u6c34\u4e00\u7bc7\u9898\u89e3\u5427 $233333$\n\n~~\uff08\u8bdd\u8bf4\u8fd9\u9898\u771f\u7684\u662f\u84dd\u9898\u5417 map\u53bb\u91cd\u5355\u5411\u5e7f\u641c\u5957\u677f\u5b50\u8ddf\u9b54\u677f2730\u4e00\u6837\u7684\u554a\uff09~~\n\n\u6211\u91c7\u7528\u7684\u65b9\u6cd5\u662f\uff1a\n## \u53cc\u5411\u5e7f\u641c+\u54c8\u5e0c\u94fe\u8868\n\u53cc\u5411\u5e7f\u641c\u6211\u60f3\u697c\u4e0a\u5927\u4f6c\u5df2\u7ecf\u8bb2\u7684\u6bd4\u8f83\u6e05\u695a\u4e86\n\n\u4ee5\u540e\u8981\u8bb0\u5f97 \u770b\u5230\u8fd9\u79cd\n### \u76ee\u6807\u548c\u521d\u59cb\u72b6\u6001\u786e\u5b9a\n\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u53cc\u5411\u5e7f\u641c\uff01\uff01\uff01\uff08\u6bd4\u5355\u5411\u5feb\u5f88\u591a\uff09\n\n\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0b\u54c8\u5e0c\u94fe\u8868\n~~\uff08\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u4e0d\u7528map \u5c31\u662f\u60f3\u649e\u4e2a\u58c123333\uff09~~\n\n\u6b63\u5982\u697c\u4e0a\u5927\u4f6c\u6240\u8bf4 \u5982\u679c\u76f4\u63a5\u5c06\u8fd9 $9$ \u4e2a\u6570\u5b57\u51d1\u6210 $9$ \u4f4d\u6570\u518d\u7528 $ bool$ \u6570\u7ec4\u53bb\u91cd \u7edd\u5bf9\u662f\u4e0d\u884c\u7684\uff08$1e9$ \u8fd8\u4e0d\u70b8\u5185\u5b58\u5417\uff09\n\n\u4f46\u662f\u4e0d\u53bb\u91cd\u53c8\u4f1a **TLE** \u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u65b9\u6cd5\u591a\u79cd\u591a\u6837 \u5eb7\u6258\u5c55\u5f00 $(unordered)map$ \u8fdb\u5236\u8f6c\u6362 \u7b49\u7b49\u7b49\u7b49\n\n\u54c8\u5e0c\u8868\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9 \u8fd9\u91cc \u6211\u9009\u62e9\u4e86\u5e38\u7528\u7684\u53d6\u6a21\u6cd5\u6c42\u54c8\u5e0c\u503c\n\n\u5148\u770b\u4ee3\u7801\uff1a\n```cpp\nstruct Node\n//\u4e2a\u4eba\u4e60\u60ef \u7ed3\u6784\u4f53\u548c\u51fd\u6570\u5f00\u5934\u5927\u5199\n{\n\tint key, step;\n\tbool head;\n\tNode *next;\n\tNode(){key = step = head = 0;next = NULL;}\n    //\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\n}hash[mod1 + 2];\n//\u8fd9\u91cc\u6211\u7684mod1\u53d6\u4e861e5+7\n```\n\u89e3\u91ca\u4e00\u4e0b:\n\u5f00\u7ed3\u6784\u4f53\u5b58\u8282\u70b9 \u5404\u4e2a\u53d8\u91cf\u6240\u8868\u793a\u7684\u5206\u522b\u662f\uff1a\n\n$key$ \uff1a\u5173\u952e\u503c\n\n$step$ \uff1a\u6b65\u6570\n\n$head$ \uff1a\u8fd9\u4e2a\u8282\u70b9\u96b6\u5c5e\u4e8e\u521d\u59cb\u8fd8\u662f\u76ee\u6807\uff0c\u5f88\u91cd\u8981\n\n$*next$ \uff1a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \u7528\u4f5c\u94fe\u8868 \n\n$hash$ \u6570\u7ec4\uff1a\u4ee5 $hash$ \u503c\u4e3a\u4e0b\u6807 \u5373\u53ef\u8bbf\u95ee\u76f8\u5e94\u8282\u70b9\n\n\u770b\u5230\u8fd9\u91cc \u4f60\u4e5f\u8bb8\u4ea7\u751f\u4e86\u7591\u95ee\uff1a\n\n\u660e\u660e $hash$ \u503c\u5df2\u7ecf\u662f\u4e00\u4e2a\u5173\u952e\u503c\u4e86\uff08\u4f5c\u4e3a\u4e0b\u6807\u7528\u6765\u8bbf\u95ee\u6570\u7ec4\uff09\n\u90a3\u4e48 $key$ \u662f\u7528\u6765\u5e72\u561b\u7684\uff1f\n\n\u4f60\u53ef\u4ee5\u5c06 $hash$ \u6570\u7ec4 \u62bd\u8c61\u4e3a\u8fd9\u4e48\u4e00\u4e2a\u8868\uff1a\n\n|  \u54c8\u5e0c\u503c|\n| :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- |\n|1|  |  |  |  |  |  |  |\n|2|  |  |  |  |  |  |  |\n|3|  |  |  |  |  |  |  |\n|4|  |  |  |  |  |  |  |\n|5|  |  |  |  |  |  |  |\n|6|  |  |  |  |  |  |  |\n|7|  |  |  |  |  |  |  |\n|\u2026\u2026|  |  |  |  |  |  |  |\n|(\u6b64\u5217\u5373\u4e0b\u6807)|  |  |  |  |  |  |  | |\n\n\u8fd9\u662f\u6700\u521d\u59cb\u7684\u72b6\u6001 \u6570\u7ec4\u5185\u90e8\u90fd\u4e3a\u7a7a \u6ca1\u6709\u94fe\u8868\n\n\u73b0\u5728 \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1a$(1)$\n\n\u8ba1\u7b97\u5176\u54c8\u5e0c\u503c\u4e3a $1$ $mod$ $(1e5+7)=1$\n\n\u90a3\u4e48\u67e5\u8be2 $hash$ \u6570\u7ec4\n```cpp\nint a = 1, H = a % mod1;\nhash[H].key == 0\n```\n\u67e5\u627e\u5230\u5176key\u503c \u53d1\u73b0\u4e3a\u96f6\n\n\u5c31\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n\n\u90a3\u4e48 \u63d2\u5165 $(1)$ \u8fd9\u4e2a\u5143\u7d20\uff1a\n```cpp\nif(hash[H].key == 0)\n\thash[H].key = a,\n    ......;\n```\n\u73b0\u5728\u7684\u54c8\u5e0c\u8868\u53d8\u6210\u4e86\u8fd9\u6837\n\n|\u54c8\u5e0c\u503c|\n| :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- |\n|1|$key=1$,(...)|  |  |  |  |  |  |\n|2|  |  |  |  |  |  |  |\n|3|  |  |  |  |  |  |  |\n|4|  |  |  |  |  |  |  |\n|5|  |  |  |  |  |  |  |\n|6|  |  |  |  |  |  |  |\n|7|  |  |  |  |  |  |  |\n|\u2026\u2026|  |  |  |  |  |  |  |\n|(\u6b64\u5217\u5373\u4e0b\u6807)|  |  |  |  |  |  |  | |\n\n\uff08\u7701\u7565\u53f7\u5c31\u662f\u7701\u7565\u4e86\u5176\u4f59\u72b6\u6001, $head$ \u548c $step$ \u7b49\uff09\n\n\u90a3\u4e48 \u518d\u6765 \u63d2\u5165 $(1e5+9)$ \u8fd9\u4e2a\u5143\u7d20\n```cpp\nint b = 1e5 + 9, H = b % mod1(==2);\nhash[H].key == 0\n```\n\u67e5\u8be2\u5230\u5176 $key$ \u503c\u4e3a $0$, \u90a3\u4e48\u5c31\u7ee7\u7eed\u63d2\u5165\uff1a\n```cpp\nif(hash[H].key == 0)\n\thash[H].key = b,\n    ....;\n```\n|  \u54c8\u5e0c\u503c|\n|:----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- |\n|1|$key=1$,(...)|  |  |  |  |  |  |\n|2|$key=1e5+9$,(...)|  |  |  |  |  |  |\n|3|  |  |  |  |  |  |  |\n|4|  |  |  |  |  |  |  |\n|5|  |  |  |  |  |  |  |\n|6|  |  |  |  |  |  |  |\n|7|  |  |  |  |  |  |  |\n|\u2026\u2026|  |  |  |  |  |  |  |\n|(\u6b64\u5217\u5373\u4e0b\u6807)|  |  |  |  |  |  |  | |\n\n\u770b\u8d77\u6765 \u8fd9\u4e00\u70b9\u4e5f\u4e0d\u96be\u5199\u5427\uff1f\n\n\u7136\u800c \u65e0\u8bba\u662f\u4ec0\u4e48\u65b9\u6cd5 \u5355\u54c8\u5e0c\u603b\u662f\u4f1a\u51fa\u73b0\u51b2\u7a81\u7684\u65f6\u5019\n\n\uff08\u4e5f\u8bb8\u8fd9\u4e2a\u9898\u4f1a\u4e0d\u51b2\u7a81\uff1f\u6211\u4e0d\u4f1a\u8bc1\u660e \u53ea\u597d\u8ba4\u771f\u5199\u5b8c233\uff09\n\n\u6bd4\u5982 \u73b0\u5728\u518d\u63d2\u5165\u4e00\u4e2a\u503c\uff1a$(2e5+16)$\n```cpp\nint c = 2e5 + 16, H = c % mod1(==2)\nhash[H].key == 1e5+9\n```\n\u8fd9\u65f6\u5019 \u53d1\u73b0\u53d6\u6a21\u6cd5\u51fa\u73b0\u51b2\u7a81\u4e86 \u90a3\u4e48\u8be5\u600e\u4e48\u653e\u5462\uff1f\n\n\u8fd9\u65f6\u5019 $*next$ \u4e5f\u5c31\u662f\u94fe\u8868\u7684\u4f5c\u7528\u4f53\u73b0\u51fa\u6765\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u8fd9\u4e48\u653e:\n\n|  \u54c8\u5e0c\u503c|\n|:----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- | :----------- |\n|1|$key=1$,(...)||  |  |  |  |  |\n|2|$key=1e5+9$,(...)|--->|$key=2e5+16$,(...)|  |  |  |  |\n|3|  |  |  |  |  |  |  |\n|4|  |  |  |  |  |  |  |\n|5|  |  |  |  |  |  |  |\n|6|  |  |  |  |  |  |  |\n|7|  |  |  |  |  |  |  |\n|\u2026\u2026|  |  |  |  |  |  |  |\n|(\u6b64\u5217\u5373\u4e0b\u6807)|  |  |  |  |  |  |  | |\n\u201c$---->$\u201d\u5c31\u662f\u6211\u62bd\u8c61\u7684\u94fe23333\n\u8868\u793a\u94fe\u8868\n\n\u5199\u6210\u4ee3\u7801 \u8be5\u600e\u4e48\u5b9e\u73b0\uff1f\n```cpp\nif(hash[H].key != 0 && hash[H].key != c)\n//\u5982\u679ckey == c\u8bf4\u660e\u8fd9\u662f\u540c\u4e00\u4e2a\u503c \u4e0d\u9700\u8981\u63d2\u5165\n{\n\tNode *newnode=new Node;\n    newnode->key=c;\n    ......;\n    hash[H].next=newnode;\n}\n```\n$next$ \u8868\u793a\u8be5\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u94fe\u63a5\u8282\u70b9\n\n\u56e0\u4e3a\u521d\u59cb\u503c\u8d4b\u4e3a\u4e86 $NULL$ \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c $next$ \u6307\u9488\n\n\u9700\u8981\u9644\u8bbe\u4e00\u4e2a $newnode$ \u6307\u9488 \u5e76\u7528 $new$ \u52a8\u6001\u5206\u914d\u7a7a\u95f4\n\n\u90a3\u4e48\u4e00\u4e2a\u54c8\u5e0c\u94fe\u8868\u5c31\u5982\u6b64\u5b9e\u73b0\u4e86\uff01\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\n\n\u5982\u679c\u5df2\u7ecf\u94fe\u63a5\u4e86 \u4ece\u7b2c\u4e00\u4e2a\u904d\u5386\u5230\u6700\u540e\u4e00\u4e2a\u518d\u63d2\u5165\u5c31\u53ef\u4ee5\u4e86\n```cpp\nNode *now = &hash[H];\nwhile(now->next)//\u7b49\u4ef7\u4e8e now->next != NULL\n\tnow=now->next;\n```\n\u8fd9\u6837\u5b50 \u904d\u5386\u5230\u6700\u540e\u518d\u63d2\u5165\u5c31\u597d\u4e86\n\n\u8fd9\u79cd\u54c8\u5e0c\u8868\u6700\u5dee\u90fd\u662f\u4e00\u4e2a\u7ebf\u6027\u7684\u94fe\u8868\n\n\u4e0d\u8fc7\u6700\u5dee\u60c5\u51b5\u57fa\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0\u5427\uff08\u9664\u975e\u4f60\u50bb\u5b50\u4e00\u6837\u7684\u8bbe $mod1=2$\uff09\n\n\u4e00\u822c\u51b2\u7a81\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u591a\u5c11\u6b21\u7684\uff08\u751a\u81f3\u4e0d\u4ea7\u751f\u90fd\u5f88\u6709\u53ef\u80fd\uff09\n\n\u54c8\u5e0c\u94fe\u8868\u7684\u539f\u7406\u548c\u5b9e\u73b0\u5927\u6982\u8bb2\u5b8c\u4e86 \u90a3\u4e48\u6211\u4eec\u56de\u5230\u5177\u4f53\u7684\u9898\u76ee\uff1a\n\n\u8981\u7528\u54c8\u5e0c\u94fe\u8868\u5b8c\u6210\u53bb\u91cd\u7684\u5de5\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8868\u5c31\u5f97\u652f\u6301\u67e5\u8be2\u548c\u63d2\u5165\u4e24\u79cd\u64cd\u4f5c\n\n\u4f46\u662f \u4ed4\u7ec6\u60f3\u60f3 \u5177\u4f53\u9898\u76ee\u5177\u4f53\u5206\u6790 \u8c8c\u4f3c\u53ef\u4ee5\u76f4\u63a5\u628a\u67e5\u8be2\u548c\u63d2\u5165\u878d\u4e3a\u4e00\u4f53\uff1f\n\n\u6211\u7684\u53bb\u91cd\u4ee3\u7801\u662f\u8fd9\u6837\u7684\n```cpp\nbool Query(const CB& x, bool head)\n//\u8fd4\u56de\u503c\u4e3atrue\u5219\u8868\u793a\u6ca1\u6709\u641c\u8fc7\n//head\u8868\u793a\u662f\u4ece\u54ea\u4e2a\u8282\u70b9\uff08\u5934\u6216\u5c3e\uff09\u6269\u5c55\u800c\u6765\n//CB\uff1aCheckerkBoard,\u68cb\u76d8\uff0c\u6211\u81ea\u5df1\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\n{\n\tint num = 0, sum1, sum2;\n//num\u7528\u4e8e\u8ba1\u7b97\u5f53\u524d\u72b6\u6001\u7684\u90a3\u4e2a\u4e5d\u4f4d\u6570 sum1\u662f\u53d6\u6a21mod1\u540e\u7684\u503c\n//sum2\u662f\u6ca1\u6709\u5fc5\u8981\u7684 \u6211\u5f3a\u884c\u53cc\u54c8\u5e0c \u539f\u672ckey\u662f\u5b58num\u7684 \u6211\u6539\u6210\u4e86\u5b58sum2- -\n\tFor(i, 3)\n\t\tFor(j, 3)\n\t\t\tnum = num * 10 + x.value[i][j];\n//#define For(i, j) for(register int (i) = 0; (i) < (j); ++(i))\n//\u5f00\u5b8f\u5b9a\u4e49\u7b80\u5316\u4ee3\u7801\n//value\u5c31\u662f\u68cb\u76d8\u4e0a\u7684\u6570\u5b57\n\tsum1 = num % mod1, sum2 = num % mod2;\n\tif(!hash[sum1].key)\n//\u5982\u679ckey\u503c\u4e3a0 \u4ee3\u8868\u6ca1\u6709\u51fa\u73b0\u8fc7 return true\u8868\u793a\u6ca1\u641c\u5230\u7684\u540c\u65f6\u987a\u624b\u63d2\u5165\u4e00\u4e0b\u94fe\u8868\n\t{\n\t\thash[sum1].key = sum2;\n\t\thash[sum1].head = head;\n\t\thash[sum1].step = x.step;\n\t\treturn true;\n\t}\n\tif(hash[sum1].key == sum2)\n//\u5982\u679ckey\u503c\u4e0esum2\u76f8\u7b49 \u5219\u8bc1\u660e\u5df2\u7ecf\u653e\u8fc7\u8fd9\u4e2a\u503c \u5373\u5df2\u7ecf\u641c\u8fc7\n\t{\n\t\tif(head != hash[sum1].head)\n//\u6572\u9ed1\u677f\uff01\uff01\uff01head\u8fd9\u4e2a\u503c\u7684\u4f5c\u7528\u5728\u8fd9\u91cc\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\n//\u7b2c\u4e00\u4e2a\u6ca1\u6709\u7ed3\u6784\u4f53\u7684head\u662f\u8fd9\u4e2a\u51fd\u6570\u4f20\u8fdb\u6765\u7684\u53c2\u6570\n//\u4e24\u4e2ahead\u90fd\u662f\u4e00\u4e2a\u610f\u601d \u8868\u793a\u662f\u4ece\u54ea\u4e2a\u8282\u70b9\uff08\u5934\u6216\u5c3e\uff09\u6269\u5c55\u800c\u6765\n//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u641c\u8fc7 \u90a3\u4e48\u5c31\u5224\u65ad\n//\u8981\u662fhead\u4e0d\u76f8\u7b49 \u5c31\u8bf4\u660e\u662f\u4e24\u68f5\u4e0d\u540c\u641c\u7d22\u6811\u540c\u65f6\u641c\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9\n//\u4e24\u4e2a\u641c\u7d22\u6811\u4ea7\u751f\u4e86\u4ea4\u53c9 \u5373\u5df2\u7ecf\u641c\u5230\u4e86\u7b54\u6848\n//\u7b54\u6848\u8def\u5f84\u5c31\u662f \u5934->\u4ea4\u53c9\u70b9->\u5c3e\n//\u53ef\u4ee5\u8bc1\u660e\u6700\u4f18(\u5f53\u524d\u5c42\u6b21\u5373\u5f53\u524d\u6b65\u6570\uff09\n//\u8fd9\u5c31\u662f\u53cc\u5411bfs\u7684\u7cbe\u9ad3\u4e4b\u5904\n\t\t{\n\t\t\tflag = true;\n\t\t\tans = x.step + hash[sum1].step;\n//\u5e94\u7528\u5168\u5c40\u53d8\u91cfflag\u8868\u793a\u5df2\u7ecf\u641c\u5230\u7b54\u6848 ans\u5b58\u50a8\u7b54\u6848\n//\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u7684\u54c8\u5e0c\u8868\u987a\u624b\u5b58\u4e86\u4e2a\u6b65\u6570\n//\u53ef\u80fd\u6709\u4e9b\u4eba\uff08\u5c31\u662f\u6211\uff09\u4f1a\u60f3\u4e0d\u901a \u89c9\u5f97ans\u5e94\u8be5\u7b49\u4e8e\uff1a\n//x.step + hash[sum1].step -1\u6216\u8005\u662f+1\n//\u8fd9\u4e2a\u5c31\u81ea\u5df1\u753b\u4e00\u4e0b\u641c\u7d22\u6811\u63a8\u5427\n\t\t}\n\t\treturn false;\n\t}\n\telse\n\t{\n//\u5982\u679ckey != sum2 \u5c31\u662f\u4ea7\u751f\u51b2\u7a81\u4e86\n//\u90a3\u4e48\u6211\u4eec\u904d\u5386\u94fe\u8868 \u770b\u770b\u662f\u4e0d\u662f\u6709\u8fd9\u4e2a\u8282\u70b9\n\t\tNode *now = hash[sum1];\n\t\twhile(now->next)\n\t\t{\n\t\t\tnow = now->next;\n\t\t\tif(now->key == sum2)\n\t\t\t{\n//\u8fd9\u91cc\u540c\u4e0a \u5982\u679c\u5df2\u7ecf\u641c\u5230\u8fc7 \u5c31\u5224\u65ad\u4e00\u4e0bhead\u7684\u503c \u4e0d\u540c\u5219\u8868\u793a\u641c\u7d22\u5b8c\u6210\n\t\t\t\tif(head != now->head)\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tans = now->step + x.step;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n//\u6ca1\u627e\u5230 return true\u8868\u793a\u6ca1\u641c\u8fc7 \u987a\u624b\u63d2\u5165\u4e00\u4e0b \n\t\tNode *newnode = new Node;\n\t\tnewnode->key = sum2;\n\t\tnewnode->head = head;\n\t\tnow->next = newnode;\n\t\treturn true;\n\t}\n}\n```\n\u987a\u4fbf\u653e\u4e0a\u6211\u7684\u53cc\u5411bfs\uff1a(\u4ee3\u7801\u91cc\u5f88\u591a\u6ce8\u91ca, \u522b\u8df3\u8fc7\u53bb\u4e86233)\n```cpp\nvoid BFS()\n{\n\tqueue<CB> q1;\n\tqueue<CB> q2;\n// \u7528STL\u7684\u961f\u5217 \u61d2\u5f97\u624b\u6253\u4e8623333\n\tstart.step = goal.step = 0;\n\tq1.push(start);\n\tq2.push(goal);\n\twhile(true)\n\t{\n\t\tif(q1.size() > q2.size())\n// \u8282\u70b9\u5c11\u7684\u5148\u6269\u5c55 \u53cc\u5411bfs\u9ed8\u8ba4\u89c4\u5219\n\t\t{\n\t\t\tCB now = q2.front();\n\t\t\tq2.pop();\n\t\t\tFor(i, 4)\n\t\t\t{\n\t\t\t\tint xx = now.spx + dx[i], yy = now.spy + dy[i];\n\t\t\t\tif(xx < 0 or xx > 2 or yy < 0 or yy > 2)\n// or \u548c || \u662f\u7b49\u6548\u7684- -\u540c\u6837\u7684\u8fd8\u6709and(\u4e0e)\u548cxor(\u5f02\u6216)\u7b49\u7b49\n\t\t\t\t\tcontinue;\n\t\t\t\tCB wib = now;\n\t\t\t\twib.step = now.step + 1;\n\t\t\t\twib.spx = xx, wib.spy = yy;\n\t\t\t\tswap(wib.value[xx][yy], wib.value[now.spx][now.spy]);\n//\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b \u56e0\u4e3a\u4e00\u4e2a\u7a7a\u683c\u53ea\u80fd\u8ddf\u9644\u8fd1\u56db\u4e2a\u6362 \n//\u90a3\u5c31\u5f00\u4e2a\u5e38\u91cf\u6570\u7ec4 \u8ddf\u5e73\u5e38\u8d70\u8ff7\u5bab\u7684\u6570\u7ec4\u4e00\u6837 \u4e0d\u8981\u50bb\u50bb\u7684\u51994\u6b21\u4ee3\u7801233\n//spx\u4e0espy\u8868\u793a\u201c0\u201d \u5373\u7a7a\u683c\u6240\u5728\u4f4d\u7f6e\n\t\t\t\tif(Query(wib, 0))\n\t\t\t\t\tq2.push(wib);\n\t\t\t\tif(flag)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCB now = q1.front();\n\t\t\tq1.pop();\n\t\t\tFor(i, 4)\n\t\t\t{\n\t\t\t\tint xx = now.spx + dx[i], yy = now.spy + dy[i];\n\t\t\t\tif(xx < 0 or xx > 2 or yy < 0 or yy > 2)\n\t\t\t\t\tcontinue;\n\t\t\t\tCB wib = now;\n\t\t\t\tswap(wib.value[xx][yy], wib.value[now.spx][now.spy]);\n\t\t\t\twib.spx = xx, wib.spy = yy;\n\t\t\t\twib.step = now.step + 1;\n\t\t\t\tif(Query(wib, 1))\n\t\t\t\t\tq1.push(wib);\n\t\t\t\tif(flag)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\treturn;\n\t}\n}\n```\n\u8bf4\u5230\u8fd9\u91cc \u5927\u5bb6\u5927\u81f4\u660e\u767d\u4e86\u8fd9\u9053\u9898\u7684\u601d\u8def\u4e86\u5427\uff1f\n\u653e\u4e0a\u5b8c\u6574\u65e0\u6ce8\u91ca\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<queue>\n#define For(i,j) for(register int (i)=0;(i)<(j);++(i))\n\nusing std::cin;\nusing std::cout;\nusing std::queue;\nusing std::swap;\nusing std::endl;\n\nconst int mod1=1e5+7,mod2=1e6+9,dx[]={0,0,1,-1},dy[]={1,-1,0,0};\n\nbool flag;\nint ans;\nstruct Node\n{\n\tint key,step;\n\tbool head;\n\tNode *next;\n\tNode(){key=step=head=0;next=NULL;}\n}hash[mod1+2];\nstruct CB\n{\n\tint value[3][3],spx,spy,step;\n\tvoid init()\n\t{\n\t\tvalue[0][0]=1;\n\t\tvalue[0][1]=2;\n\t\tvalue[0][2]=3;\n\t\tvalue[1][0]=8;\n\t\tvalue[1][1]=0;\n\t\tvalue[1][2]=4;\n\t\tvalue[2][0]=7;\n\t\tvalue[2][1]=6;\n\t\tvalue[2][2]=5;\n\t\tspx=1,spy=1;\n\t}\n\tbool operator== (const CB &x) const\n\t{\n\t\tFor(i,3)\n\t\t\tFor(j,3)\n\t\t\t\tif(value[i][j]!=x.value[i][j])\n\t\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}start,goal;\nbool Query(const CB &x,bool head)\n{\n\tint num=0,sum1,sum2;\n\tFor(i,3)\n\t\tFor(j,3)\n\t\t\tnum=num*10+x.value[i][j];\n\tsum1=num%mod1,sum2=num%mod2;\n\tif(!hash[sum1].key)\n\t{\n\t\thash[sum1].key=sum2;\n\t\thash[sum1].head=head;\n\t\thash[sum1].step=x.step;\n\t\treturn true;\n\t}\n\tif(hash[sum1].key==sum2)\n\t{\n\t\tif(head!=hash[sum1].head)\n\t\t{\n\t\t\tflag=true;\n\t\t\tans=x.step+hash[sum1].step;\n\t\t}\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tNode *now=&hash[sum1];\n\t\twhile(now->next)\n\t\t{\n\t\t\tnow=now->next;\n\t\t\tif(now->key==sum2)\n\t\t\t{\n\t\t\t\tif(head!=now->head)\n\t\t\t\t{\n\t\t\t\t\tflag=true;\n\t\t\t\t\tans=now->step+x.step;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tNode *newnode=new Node;\n\t\tnewnode->key=sum2;\n\t\tnewnode->head=head;\n\t\tnow->next=newnode;\n\t\treturn true;\n\t}\n}\nvoid BFS()\n{\n\tqueue <CB> q1;\n\tqueue <CB> q2;\n\tstart.step=goal.step=0;\n\tq1.push(start);\n\tq2.push(goal);\n\twhile(true)\n\t{\n\t\tif(q1.size()>q2.size())\n\t\t{\n\t\t\tCB now=q2.front();\n\t\t\tq2.pop();\n\t\t\tFor(i,4)\n\t\t\t{\n\t\t\t\tint xx=now.spx+dx[i],yy=now.spy+dy[i];\n\t\t\t\tif(xx<0||xx>2||yy<0||yy>2)\n\t\t\t\t\tcontinue;\n\t\t\t\tCB wib=now;\n\t\t\t\twib.step=now.step+1;\n\t\t\t\twib.spx=xx,wib.spy=yy;\n\t\t\t\tswap(wib.value[xx][yy],wib.value[now.spx][now.spy]);\n\t\t\t\tif(Query(wib,0))\n\t\t\t\t\tq2.push(wib);\n\t\t\t\tif(flag)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCB now=q1.front();\n\t\t\tq1.pop();\n\t\t\tFor(i,4)\n\t\t\t{\n\t\t\t\tint xx=now.spx+dx[i],yy=now.spy+dy[i];\n\t\t\t\tif(xx<0||xx>2||yy<0||yy>2)\n\t\t\t\t\tcontinue;\n\t\t\t\tCB wib=now;\n\t\t\t\tswap(wib.value[xx][yy],wib.value[now.spx][now.spy]);\n\t\t\t\twib.spx=xx,wib.spy=yy;\n\t\t\t\twib.step=now.step+1;\n\t\t\t\tif(Query(wib,1))\n\t\t\t\t\tq1.push(wib);\n\t\t\t\tif(flag)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\treturn;\n\t}\n}\nint main(int argc,char *argv[])\n{\n\tstd::ios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tchar ch;\n\tFor(i,3)\n\t\tFor(j,3)\n\t\t{\n\t\t\tcin>>ch;\n\t\t\tif(ch=='0')\n\t\t\t\tstart.spx=i,start.spy=j;\n\t\t\tstart.value[i][j]=ch-'0';\n\t\t}\n\tgoal.init();\n\tif(goal==start)\n\t{\n\t\tcout<<0;\n\t\treturn 0;\n\t}\n\tBFS();\n\tcout<<ans;\n\treturn 0;\n}\n```\n\uff08\u8bb0\u5f97\u7279\u5224\u521d\u59cb\u8ddf\u7ed3\u675f\u76f8\u7b49\u7684\u7279\u6b8a\u60c5\u51b5\uff01(\u522b\u770b\u4e86\u7b2c31\u4e2a\u70b9\u6211\u8bf4\u7684\u5c31\u662f\u4f60)\uff09\n\n~~\u4ee5\u4e3a\u80fdAC\u4ea4\u4e0a\u53bb\u7ed3\u679c90 \u770b\u5230\u90a3\u4e2aexpected 0\u6211\u5c31\u77e5\u9053\u51fa\u4e86\u4ec0\u4e48\u4e8b\u4e86~~\n\n~~\u987a\u624b\u91cd\u8f7d\u4e86\u4e2a\u8fd0\u7b97\u7b26\u5224\u76f8\u7b49233(\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981)~~\n\n\uff08\u8fd8\u6709\u6211\u4e0d\u660e\u767d\u7684\u662f\n\u4e3a\u4ec0\u4e48\u9898\u89e3\u53cc\u5411\u5e7f\u641c\u4f1a\u6709\u51e0\u767ems\uff1f~~\u6211\u624d0ms~~\uff09\n\n# \u795d\u5927\u5bb6\u65e9\u65e5\u6210\u4e3a\u795e\u725b\u726a\u7287\uff01\uff01\n\n# $(Update:NOIP2018rp++)$",
        "postTime": 1531821336,
        "uid": 91252,
        "name": "EndSaH",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u5982\u679c\u60f3\u8981\u66f4\u597d\u7684\u4f53\u9a8c\uff0c\u53ef\u4ee5\u5230[\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/I-AK-IOI/)\u53bb\u770b\n\n\u6211\u4f7f\u7528\u7684\u7b97\u6cd5\u662fIDA_star\n\n\u597d\u5904\u5728\u4e8e\u6548\u7387\u9ad8\uff0c\u4e0d\u7528hash\n\n\u6211\u4eec\u60f3\u60f3\uff0c\u5047\u8bbe\u6bcf\u4e00\u6b65\u90fd\u662f\u6709\u610f\u4e49\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u6570\u5b57\u6210\u529f\u5bf9\u4e0a\u4e5f\u8981\u79fb\u52a8\u4ed6\u4eec\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6b21\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c06\u4f30\u4ef7\u51fd\u6570\u8bbe\u8ba1\u4e3a\u6240\u6709\u6570\u5b57\u4e0e\u76ee\u6807\u72b6\u6001\u4e2d\u6570\u5b57\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e4b\u548c\uff08\u5f53\u71360\u4e0d\u7b97\uff0c\u5426\u5219\u4f60\u5c31\u53ef\u4ee5\u9ad8\u5174\u7684WA\u4e86\uff09\n\n\u8fd8\u6709\u4e00\u4e2a\u663e\u7136\u7684\u4f18\u5316\uff0c\u5c31\u662f\u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c\n\n\u800c\u4e14\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u7528\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2astring\u6765\u4fdd\u5b58\u72b6\u6001\u3002\u5bf9\u4e8e\u4e00\u4e2astring\u4e2d\u7684\u4e0b\u6807i\uff0c\u7eb5\u5750\u6807\u4e3ai/3, \u6a2a\u5750\u6807\u4e3ai%3\u3002\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e0b\u6807x, y, string\u4e2d\u7684\u4e0b\u6807\u4fbf\u4e3ax * 3 + y\n\n\u8fd8\u6709\u4e0d\u660e\u767d\u7684\uff0c\u8bf7\u770b\u4ee3\u7801\n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\nstring st, ed;//\u8d77\u59cb\u72b6\u6001\u548c\u76ee\u6807 \nint depth;//\u641c\u7d22\u6df1\u5ea6 \n//\u4f30\u4ef7\u51fd\u6570\uff0c\u4e3a\u6bcf\u4e2a\u6570\u5b57\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e4b\u548c \nint hfunc(string st) {\n\tint ans = 0;\n\tfor (register int i = 0; i < st.size(); ++i) {\n\t\tif (st[i] == '0') continue;//0\u4e0d\u7b97\uff0c\u5426\u5219\u4f1aWA \n\t\tint j = ed.find(st[i]), r = i / 3, c = i % 3;\n\t\tint x = j / 3, y = j % 3;\n\t\t//\u6a2a\u5750\u6807\u4e3a/3, \u7eb5\u5750\u6807\u4e3a%3 \n\t\tans += abs(r - x) + abs(c - y);\n\t}\n\treturn ans;\n}\nconst int dx[4] = {1, -1, 0, 0}, dy[4] = {0, 0, -1, 1};\n//IDA_star\n//\u9664\u4e86\u4f30\u4ef7\u51fd\u6570\uff0c\u8fd8\u6709\u4e00\u4e2a\u663e\u7136\u7684\u4f18\u5316\u662f\u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u64cd\u4f5c \nbool dfs(int now, int pre) {\n\tint cnt = hfunc(st);\n\tif (!cnt) return 1;\n\tif (now + cnt > depth) return 0;\n\t//\u5f53\u524d\u6b65\u6570+\u4f30\u4ef7>\u6df1\u5ea6\u9650\u5236\uff0c\u7acb\u5373\u56de\u6eaf \n\tint pos = st.find('0'), x = pos / 3, y = pos % 3;\n\tfor (register int i = 0; i < 4; ++i) {\n\t\tint nx = x + dx[i], ny = y + dy[i];\n\t\tif (nx < 0 || nx > 2 || ny < 0 || ny > 2 || nx * 3 + ny == pre) continue;\n\t\t//\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4e3a\u6a2a\u5750\u6807*3+\u7eb5\u5750\u6807 \n\t\tswap(st[pos], st[nx * 3 + ny]);\n\t\tif (dfs(now + 1, pos)) return 1;\n\t\tswap(st[pos], st[nx * 3 + ny]);\n\t}\n\treturn 0;\n}\nint main() {\n\tcin >> st;\n\ted = \"123804765\";\n\tdepth = hfunc(st);\n\twhile (depth <= 27 && !dfs(0, -1)) ++depth;\n\tcout << depth << endl;\n}\n```\n\u8dd1\u5f97\u8fd8\u5f88\u5feb\n\n[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/record/22955029)\n",
        "postTime": 1566103897,
        "uid": 162196,
        "name": "\u4f1f\u5927\u7684\u738b\u592b\u5b50",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u6211\u7ed9\u4f60\u8bf4\u4e2a\u5927\u5b9e\u8bdd\n\n\u8fed\u4ee3\u52a0\u6df1\u5c31\u662f\u6df1\u641c\u548c\u5e7f\u641c\u7684\u82f1\u96c4\u7ed3\u5408\u4f53\n\n\u592a\u5999\u4e86  \n\n\u592a\u5f3a\u4e86\n\n\u8fd9\u9053\u9898\u7528\u4e2a\u8fed\u4ee3\u52a0\u6df1\u5206\u5206\u949fac\n\n~~\u7136\u800c\u6211\u7528\u4e86\u4e24\u5c0f\u65f6\u5b66\u4e60\u8fed\u4ee3\u52a0\u6df1~~\n\n\u6240\u8c13\u8fed\u4ee3\u52a0\u6df1\u5c31\u662f\u5c06\u6df1\u641c\u9650\u5236\u4e00\u4e2a\u6df1\u5ea6\uff0c\u518d\u6269\u5c55\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u60c5\u51b5\n\n\u8fd9\u6837\u6709\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u5728\u7b54\u6848\u5f88\u6d45\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u5f88\u5feb\u641c\u51fa\u7b54\u6848\u800c\u4e0d\u7528\u987a\u85e4\u6478\u74dc\u627e\u4e0b\u53bb\uff0c\u90a3\u6837tle\u3002\n\n\u8fd9\u4e2a\u9898\u5c31\u662f\u4e00\u4e2a\u5b9e\u8df5\u8fed\u4ee3\u7684\u597d\u9898\u5427\n\n\u6211\u770b\u4e86\u7b2c\u4e00\u7bc7\u9898\u89e3\u624d\u505a\u7684\u9898\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u6709\u7684\u5730\u65b9\u8bb2\u7684\u6211\u4e0d\u592a\u61c2\uff0c\u6240\u4ee5\u5199\u4e86\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u53d1\u7ed9\u5927\u5bb6\u4e00\u4e2a\u66f4\u597d\u61c2\u7684\u7248\u672c\uff1f\uff1f\uff1f\n\n\n\n```cpp\n//A*\u7b97\u6cd5 +\u6df1\u641c \n//\u6700\u4f18\u6027\u526a\u679d\u6709\u4e24\u4e2a\n//\u7b2c\u4e00\u4e2a\u662f\u5f53\u524d\u4e00\u5b9a\u4e0d\u662f\u6700\u4f18\u89e3\u89c1test\n//\u7b2c\u4e8c\u4e2a\u662f\u5f53\u524d\u72b6\u6001\u5728\u4ee5\u524d\u51fa\u73b0\u8fc7\u89c1pre \n#include <iostream>\n#include <cstdio>\nusing namespace std; \nchar s[10];\nbool judge;\nint sta[4][4],x,y,k=2;\nint ans[4][4]={{0,0,0,0},{0,1,2,3},{0,8,0,4},{0,7,6,5}};\n//\u65b9\u5411\u8bbe\u6210\u8fd9\u6837\u5f88\u6709\u8bb2\u7a76\n//\u628a\u5de6\u53f3\u4e24\u6b65\u76f8\u52a0\u7b49\u4e8e3\uff0c\u4e0a\u4e0b\u4e24\u6b65\u76f8\u52a0\u7b49\u4e8e3\n//\u5982\u679c\u8bf4\u4e0a\u4e00\u6b65\u662f\u5411\u5de6\u4f60\u8fd9\u4e00\u6b65\u5411\u53f3\uff0c\u6216\u8005\u662f\u4e0a\u4e00\u6b65\u5411\u4e0a\u8fd9\u4e00\u6b65\u5411\u4e0b\uff0c\u5c31\u56de\u5230\u4e0a\u6b21\u72b6\u6001\u4e86\u5427\uff1f\n//\u56de\u5230\u4e0a\u6b21\u72b6\u6001\u5c31\u91cd\u590d\u4e86\u76f4\u63a5\u8fc7\u6ee4return\n//\u65b9\u4fbf\u540e\u9762check \nint dx[4]={0,1,-1,0};\nint dy[4]={1,0,0,-1};\n//\u5224\u5f53\u524d\u72b6\u6001\u662f\u5426\u4e0e\u76ee\u6807\u72b6\u6001\u543b\u5408 \nbool check(){\n    for(int i=1;i<=3;i++)\n    for(int j=1;j<=3;j++)\n    if(ans[i][j]!=sta[i][j])return 0;\n    return 1;\n}\n//\u6700\u4f18\u6027\u526a\u679d \n//\u5982\u679c\u5f53\u524d\u72b6\u6001\u548c\u76ee\u6807\u72b6\u6001\u7684\u4e0d\u540c\u70b9+\u5df2\u7ecf\u8d70\u7684\u6b65\u6570>\u679a\u4e3e\u7684\u6df1\u5ea6\u5c31\u4e0d\u7528\u8d70\u4e0b\u53bb \nbool test(int step){\n    int diff=0;\n    for(int i=1;i<=3;i++)\n    for(int j=1;j<=3;j++)\n    if(ans[i][j]!=sta[i][j]){\n        if(++diff+step>k)return 0; //\u5728\u5faa\u73af\u5185\u90e8\u5224\uff0c\u66f4\u597d \n    } \n    return 1;\n}\n//\u7b97\u6cd5\u6838\u5fc3\n//\u7b2c\u4e00\u6b65\u662f\u770b\u8fd9\u4e2a\u6b65\u9aa4\u5230\u8fbe\u6ca1\u6709 \nvoid Astar(int step,int x,int y,int pre){\n    if(step==k){\n        if(check())judge=1;//\u8fd9\u91cc\u4e0d\u5e94\u8be5\u628acheck\u548cstep\u4e00\u8d77\u5f62\u6210\u6761\u4ef6\u5224\u65ad\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u5230\u4e86k\u6b65\u8fd8\u4f1a\u4e00\u76f4\u641c\u4e0b\u53bb \n        return;\n    }\n    if(judge)return;\n    for(int i=0;i<4;i++){//\u56db\u9762\u5e7f\u641c \n        int nx=x+dx[i];\n        int ny=y+dy[i];\n        if(nx>3||nx<1||ny>3||ny<1||pre+i==3)continue;//\u8fd9\u4e2a\u5c31\u662f\u90a3\u4e2a\u5224\u65ad\u6709\u6ca1\u6709\u56de\u5230\u4e0a\u6b21\u72b6\u6001\u7684\u8bf7\u51b5\uff0c\u7b80\u76f4\u5927\u4f6c\uff01 \n        swap(sta[nx][ny],sta[x][y]);\n        if(test(step))Astar(step+1,nx,ny,i);\n        swap(sta[nx][ny],sta[x][y]);\n    }\n}\nint main() {\n    scanf(\"%s\",&s);\n    for(int i=0;i<9;i++){\n        sta[i/3+1][i%3+1]=s[i]-'0';\n        if(s[i]-'0'==0){x=i/3+1;y=i%3+1;}\n    }\n    if(check()){\n        printf(\"%d \",0);\n        return 0;\n    }\n    while(++k){\n        Astar(0,x,y,-1);\n        if(judge){\n            printf(\"%d\",k);\n            break;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1541208942,
        "uid": 119161,
        "name": "SSSF",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\n\u9996\u5148\u611f\u8c22\u8001\u5e08\u7684\u6307\u5bfc\uff01\uff01\uff01\n\n\n\u5728\u6b64\u5f15\u7528\u4e00\u4e0b\u8001\u5e08\u7684\u8bb2\u89e3\n\n\n\u5eb7\u62d3\u5c55\u5f00\n\n\n\u5982\u679c\u6309\u7167\u5e73\u5e38\u7684\u601d\u8def\uff0c\u628a $x$ \u7684\u4f4d\u7f6e\u770b\u505a $0$ \uff0c\u4e00\u5171\u6709 $8!$ \u4e2a\u72b6\u6001\uff0c\u6765\u5224\u65ad\u67d0\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\u3002 \n\n\u4f46\u662f\u95ee\u9898\u6765\u4e86\uff1f\n\n\u600e\u4e48\u628a\u4e00\u4e2a\u5e26\u6709 $x$ \u7684\u6570\u7ec4\u8f6c\u53d8\u4e3a\u8f6c\u53d8\u4e3a\u6570\u5b57\u5462\uff1f\n\n\u7b2c\u4e00\u4e2a\u8054\u60f3\u5230\u7684\u5c31\u662f $STL$ \u4e2d\u7684 $map$ \uff0c\u4f46\u662f $map$  \u7684\u901f\u5ea6\u592a\u6162\u4e86\uff0c\u4f1a\u8d85\u65f6\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u8981\u7528\u4e00\u79cd\u5feb\u901f\u7684\u65b9\u6cd5\u628a\u8fd9\u4e2a\u5e26\u6709 $x$ \u7684\u6570\u7ec4\u8f6c\u6362\u4e3a\u6570\u7ec4\uff0c\u90a3\u5c31\u662f $hash$ \uff0c\u5982\u4f55$hash$ \u5c31\u662f\u7528\u5eb7\u62d3\u5c55\u5f00\u8fd9\u4e2a\u516c\u5f0f\u3002 \n\n\u8fd9\u4e2a\u516c\u5f0f\u7684\u63cf\u8ff0\uff1a\n$X=a_n*(n-1)!+a_{n-1}*(n-2)!+...+a_i*(i-1)!+...+a_2*1!+a_1*0!$  $a_i$ \u8868\u793a\u6240\u6709\u672a\u51fa\u73b0\u7684\u5143\u7d20\u4e2d\u6bd4 $a_i$ \u8fd9\u4e2a\u5143\u7d20\u5c0f\u7684\u4e2a\u6570\uff0c\u4ed6\u662f\u6700\u5c0f\u7684\u5c31\u4e3a $0$ . \n\n\u8fd9\u4e2a\u91cc\u9762\u6709\u51e0\u4e2a\u5173\u952e\u8bcd\u5c31\u662f\u524d\u9762\u672a\u51fa\u73b0\u7684\u6240\u6709\u5143\u7d20\u548c\u4e3a\u51fa\u73b0\u7684\u5143\u7d20; \n\n\u6211\u4eec\u6765\u4e3e\u4e2a\u4f8b\u5b50 \n\n\u6570\u7ec4 $ \\{1,2,3 \\}$ \u6309\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5217\u4e00\u5171 $6$ \u4e2a\uff1a$123 \\ 132 \\ 213 \\ 231 \\ 312 \\ 321$\u3002 \n\n\u6709\u4e00\u4e2a\u6570\u7ec4 $ \\{2,5,7,8 \\} $ \u6c42\u5b83\u7684\u4e00\u4e2a\u6392\u5217 $7528$ \u7684\u5bf9\u5e94\u7684\u503c \n\n$ a_4=7$ \uff08\u6ce8\u610f\u8fd9\u91cc\u7684 $7$ \u8868\u793a\u7684\u662f\u5143\u7d20\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u4e0b\u540c\uff09 \u8fd9\u4e2a\u5143\u7d20\u5728 \u524d\u9762\u672a\u51fa\u73b0\u7684\u6240\u6709\u5143\u7d20 $ \\{2,5,7,8 \\}$ \u4e2d\u662f\u524d\u9762\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\u6570\uff1f\u5176\u4e2d $2,5$ \u90fd\u6bd4\u4ed6\u5c0f\u6240\u4ee5$a_4 = 2$\uff1b \n\n$a_3=5$ \u8fd9\u4e2a\u5143\u7d20\u5728\u524d\u9762\u672a\u51fa\u73b0\u7684\u6240\u6709\u5143\u7d20 $ \\{2,5,7 \\}$(\u5143\u7d20 $8$ \u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e86\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u7ea2\u5b57\u7684\u6761\u4ef6)\u4e2d\uff0c\u6709\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\uff0c\u6240\u4ee5 $a_3 = 1$\uff1b \n\n$a_3=2$ \u8fd9\u4e2a\u5143\u7d20\u5728\u524d\u9762\u672a\u51fa\u73b0\u7684\u6240\u6709\u5143\u7d20 $ \\{2,7 \\}$ \u4e2d\uff0c\u6709 $0$ \u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\uff0c\u6240\u4ee5 $a_3 = 0$\uff1b \n\n$a_3=8$ \u8fd9\u4e2a\u5143\u7d20\u5728\u524d\u9762\u672a\u51fa\u73b0\u7684\u6240\u6709\u5143\u7d20 $ \\{7 \\}$ \u4e2d\uff0c\u6709 $0$ \u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\uff0c\u6240\u4ee5 $a_3 = 1$\uff1b \n\n\u6240\u4ee5 $X = a_4*(4-1)!+a_3*(3-1)!+a_2*(2-1)!+a_1*(1-1)!$  \n\n$X = 2*(3!) + 1*(2!) +0*(1!) + 0*(0!)= 14 $\n\n\u4e0a\u9762\u5c31\u662f\u5eb7\u62d3\u5c55\u5f00\u7684\u4e00\u822c\u8fc7\u7a0b\uff0c\u7b80\u5355\u63cf\u8ff0\u4e3a\u5df2\u77e5\u4e00\u4e2a\u6392\u5217\uff0c\u5c31\u80fd\u77e5\u9053\u8fd9\u4e2a\u6392\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 $len$ ,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u51e0\u4e2a\u5143\u7d20\u548c $len$ \u5c06\u8fd9\u4e2a\u6392\u5217\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u8fdb\u5236\u6570 \n\n\u4e0a\u9762\u6240\u8bf4\u7684\u662f\u5eb7\u62d3\u5c55\u5f00\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff01\n\n\n\u5eb7\u62d3\u9006\u5c55\u5f00\u751f\u6210\u5168\u6392\u5217\n\n\n\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6392\u5217\u628a\u7ed9\u51fa\u7684\u5143\u7d20\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u90a3\u4e48\u80af\u5b9a\u80fd\u901a\u8fc7\u8fd9\u4e2a\u8fd9\u4e2a\u9006\u5411\u7684\u8fc7\u7a0b\uff0c\u7531 $X$ \u8ba1\u7b97\u51fa$a_1,a_2,a_3\u2026.a_n$ \n\n\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6765\u89e3\u91ca\u4e0a\u9762\u6240\u8bf4\u7684\u8bdd\uff0c\u5c31\u6bd4\u5982\u4e0a\u9762\u90a3\u4e2a\u89e3\u91ca\u5eb7\u62d3\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u662f\u5426\u80fd\u8fc7\u901a\u8fc7\u77e5\u9053 $X=14$ \u4ee5\u53ca\u5143\u7d20\u6570\u7ec4 $\\{2,5,7,8\\}$\u8ba1\u7b97\u51fa $a_1,a_2,a_3,a_4$ \u5462\uff1f \n\n\u5728\u4e0d\u8003\u8651\u4efb\u4f55\u8303\u56f4\u7684\u60c5\u51b5\u4e0b\uff0c\u5217\u4e3e\u4e0d\u5b8c\u5168\u7684\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\uff1a \n\n$14 = 1*(3!) + 1*(2!) +1*(1!) + 1*(0!)$ \n\n$14 = 2*(3!) + 2*(2!) +0*(1!) + 0*(0!)$ \n\n$14 = 0*(3!) + 6*(2!) +1*(1!) + 1*(0!)$ \n\n\u6ee1\u8db3\u60c5\u51b5\u7684\u4e4b\u6709\u7b2c\u4e8c\u79cd\u60c5\u51b5\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6570\u4e5f\u5c31\u662f $a_1$ \u5fc5\u987b\u662f $0$ \uff0c\u56e0\u4e3a\u505a\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u4e86\uff0c\u4e0d\u53ef\u80fd\u518d\u6709\u6bd4\u4ed6\u5c0f\u7684\u6570\u5b57\u4e86 \n\n\u6211\u4eec\u5c31\u7528\u8fd9\u79cd\u60c5\u51b5 $14 = 2*(3!) + 2*(2!) +0*(1!) + 0*(0!) $\uff0c\u6765\u63a8\u7b97\u51fa\u4e00\u822c\u7684\u60c5\u51b5\uff0c \n\n1. \u56e0\u4e3a\u6700\u540e\u4e09\u4e2a\u6570\u52a0\u8d77\u6765\u662f\u4e0d\u53ef\u80fd\u8d85\u8fc7 $(3!)$ \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 $14%(3!)$ \u6765\u5f97\u5230 $a_4$ \n\n2. \u7528 $14/(3!)$ \u7684\u4f59\u6570\u5c31\u662f\u5269\u4e0b\u7684\u540e\u9762\u4e09\u4e2a\u6570\u4e4b\u548c\uff0c\u4e3a $4$ \n\n3. \u7136\u540e\u901a\u8fc7 $4$ \u5728\u5bf9 $(2\uff01)$ \u53d6\u6a21\uff0c\u5c31\u5f97\u5230\u4e86 $a_3$ \n\n4. \u7136\u540e\u4e00\u76f4\u91cd\u590d\u7684\u5faa\u73af $1,2$ \u8fc7\u7a0b\u5c31\u80fd\u8fc7\u4f9d\u6b21\u5f97\u5230 $a_n,a_{n-1},...a_1$ \n\n\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e5f\u53eb\u505a\u8f97\u8f6c\u76f8\u9664\n\n\n\u901a\u8fc7\u4e0a\u9762\u7684\u8fc7\u7a0b\u5c31\u80fd\u901a\u8fc7\u6570\u7ec4\u5143\u7d20 $A_n$ \u548c\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6570\uff0c\u5c31\u80fd\u6c42\u51fa\u8fd9\u4e2a\u6392\u5217\n\n\n\u89e3\u9898\u601d\u8def\n\n\n\u61c2\u5f97\u4e86\u4e0a\u9762\u7684\u7406\u8bba\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u53ef\u4ee5\u628a $x$ \u7684\u4f4d\u7f6e\u770b\u505a $0$ \uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570\u503c\u6570\u7ec4\u901a\u8fc7\u5eb7\u62d3\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u8868\u793a\u521d\u59cb\u72b6\u6001\uff0c\u7136\u540e\u4e00\u5171\u8fc7 $(9!)$ \u4e2a\u72b6\u6001\uff0c\u901a\u8fc7 $BFS$ \u679a\u4e3e\u8fd9\u4e9b\u72b6\u6001\uff0c\u6c42\u5f97\u8f6c\u5316\u7684\u8def\u5f84\u3002\n\n\u4e0b\u9762\u9644\u4e0a\u6211\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct position\n{\n\tint a,b,c,d,e,f,g,h,i;\n\tlong long step;\n}f,t;\nbool vis[400000];\nqueue<position> q;\nint ans;\ninline int jc(int n)\n{\n\tint num=1;\n\tfor(int i=2;i<=n;i++)\n\t\tnum*=i;\n\treturn num;\n}\ninline int ktzk(position f)//\u5eb7\u62d3\u5c55\u5f00 \n{\n\tint a[15],num=0;\n\tbool v[15];\n\tfor(int i=0;i<=10;i++)\n\t\ta[i]=v[i]=0;\n\ta[0]=f.a,a[1]=f.b,a[2]=f.c,a[3]=f.d,a[4]=f.e,a[5]=f.f,a[6]=f.g,a[7]=f.h,a[8]=f.i;\t\n\tfor(int j=0;j<9;j++)\n\t{\n\t\tint x=a[j];\t\n\t\tint s=0;\n\t\tfor(int i=0;i<x;i++)\n\t\t\tif(v[i]==0)\n\t\t\t\ts++;\n\t\tv[x]=1;\n\t\tnum+=s*jc(9-j-1);\n\t}\n\treturn num;\n} \nint main()\n{\n\tscanf(\"%1d%1d%1d%1d%1d%1d%1d%1d%1d\",&f.a,&f.b,&f.c,&f.d,&f.e,&f.f,&f.g,&f.h,&f.i);\n\tf.step=0;\n\tq.push(f);\n\tans=46685;//1 2 3 8 0 4 7 6 5\n\twhile(!q.empty())\n\t{\n\t\tf=q.front();\n\t\tq.pop();\n\t\tint x=ktzk(f);\n \t\tif(x==ans)\n\t\t{\n\t\t\tprintf(\"%lld\\n\",f.step);\n\t\t\treturn 0;\n\t\t}\n\t\tif(vis[x]==1)\n\t\t\tcontinue;\n\t\tvis[x]=1;\n\t\tf.step++;\n\t\tif(f.a==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.a,t.b);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.a,t.d);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.b==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.b,t.a);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.b,t.c);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.b,t.e);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.c==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.c,t.b);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.c,t.f);\n\t\t\tq.push(t);\t\n\t\t}\n\t\telse if(f.d==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.d,t.a);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.d,t.e);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.d,t.g);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.e==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.e,t.b);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.e,t.d);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.e,t.f);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.e,t.h);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.f==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.f,t.c);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.f,t.e);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.f,t.i);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.g==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.g,t.d);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.g,t.h);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.h==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.h,t.i);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.h,t.e);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.h,t.g);\n\t\t\tq.push(t);\n\t\t}\n\t\telse if(f.i==0)\n\t\t{\n\t\t\tt=f;\n\t\t\tswap(t.i,t.h);\n\t\t\tq.push(t);\n\t\t\tt=f;\n\t\t\tswap(t.i,t.f);\n\t\t\tq.push(t);\n\t\t}\n\t}\n\tprintf(\"no answer!\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1528527256,
        "uid": 25030,
        "name": "zsc2003",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "IDA\\*\u6c34\u8fc7...\n\n\u542f\u53d1\u51fd\u6570h\u4e3a\u6240\u6709\u6570\u5b57\u79bb\u6b63\u786e\u4f4d\u7f6e\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u6bcf\u6b21\u589e\u52a0\u641c\u7d22\u6df1\u5ea6\uff0c\u641c\u5230\u5219\u51fa\u89e3\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN = 100005;\nint fin[9][2] = {{1,1},{0,0},{0,1},{0,2},{1,2},{2,2},{2,1},{2,0},{1,0}};\nstruct State\n{\n    int a[3][3];\n};\nint lim, ok;\nint H(const State &st)\n{\n    int ret = 0;\n    for(int i = 0; i < 3; ++i){\n        for(int j = 0; j < 3; ++j){\n            int t = st.a[i][j];\n            if(t) ret += abs(fin[t][0]-i) + abs(fin[t][1]-j);\n        }\n    }\n    return ret;\n}\nvoid dfs(State st, int g)\n{\n    int h = H(st);\n    if(ok || g + h > lim){\n        return;\n    }\n    if(h == 0){\n        ok = 1; return;\n    }\n    int x, y;\n    for(int i = 0; i < 3; ++i){\n        for(int j = 0; j < 3; ++j){\n            if(st.a[i][j] == 0) x = i, y = j;\n        }\n    }\n    if(x > 0){\n        swap(st.a[x][y], st.a[x-1][y]);\n        dfs(st, g+1);\n        swap(st.a[x][y], st.a[x-1][y]);\n    }\n    if(x < 2){\n        swap(st.a[x][y], st.a[x+1][y]);\n        dfs(st, g+1);\n        swap(st.a[x][y], st.a[x+1][y]);\n    }\n    if(y > 0){\n        swap(st.a[x][y], st.a[x][y-1]);\n        dfs(st, g+1);\n        swap(st.a[x][y], st.a[x][y-1]);\n    }\n    if(y < 2){\n        swap(st.a[x][y], st.a[x][y+1]);\n        dfs(st, g+1);\n        swap(st.a[x][y], st.a[x][y+1]);\n    }\n}\nchar ch[10];\nint main()\n{\n    freopen(\"in.txt\", \"r\", stdin);\n    State st;\n    scanf(\"%s\", ch);\n    for(int i = 0; i < 3; ++i){\n        for(int j = 0; j < 3; ++j){\n            st.a[i][j] = ch[i*3+j] - '0';\n        }\n    }\n    for(lim = 0;; ++lim){\n//        printf(\"lim=%d\\n\", lim);\n        dfs(st, 0);\n        if(ok) break;\n    }\n    printf(\"%d\\n\", lim);\n    return 0;\n}\n```",
        "postTime": 1478783228,
        "uid": 15326,
        "name": "will7101",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u600e\u4e48\u9898\u89e3\u533a\u7684\u5de8\u4f6c\u7528\u7684\u90fd\u662f\u53cc\u5411\u5e7f\u641c/\u54c8\u5e0c/\u5eb7\u6258\u5c55\u5f00/Astar\uff0c\u592a\u9ad8\u6df1\u4e86\uff01\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u53ea\u8981 $24$ \u884c\u7684\u89e3\u6cd5\u3002\r\n\r\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u7528\u6700\u57fa\u7840\u7684 BFS\u3002`map`\u6765\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u9700\u8981\u591a\u5c11\u6b65\u5230\u8fbe\u540c\u65f6\u5224\u91cd\uff0c\u5f53\u524d\u72b6\u6001\u7b26\u5408\u7ed3\u679c\u5c31\u8f93\u51fa\u5b83\u7684\u503c\uff0c\u5426\u5219\u679a\u4e3e\u6bcf\u4e00\u79cd\u72b6\u6001\u3002\r\n\r\n\u5b9e\u73b0\u65b9\u9762\u7684\u96be\u70b9\u5728\u679a\u4e3e\u6bcf\u4e00\u79cd\u72b6\u6001\uff0c\u65b9\u6cd5\u662f\u627e\u5230\u5c06\u7a7a\u683c\u5728\u68cb\u76d8\u4e2d\u7684\u5750\u6807\uff0c\u4e4b\u540e\u5c06\u8fd9\u4e2a\u70b9\u5411\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u5e76\u4e0e\u539f\u4f4d\u7f6e\u4ea4\u6362\uff0c\u5224\u65ad\u4ea4\u6362\u540e\u7684\u7684\u72b6\u6001\u662f\u5426\u8bbf\u95ee\u8fc7\uff08\u8fd9\u91cc\u7684\u5224\u91cd\u53ef\u4ee5\u7528`map`)\uff0c\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5c31\u5c06\u5b83\u5165\u961f\uff0c\u6b64\u65f6\u5b83\u7684\u503c\u5c31\u662f\u539f\u72b6\u6001\u7684\u503c\u52a0\u4e00\u3002\r\n\r\n\u4ee3\u7801\u5199\u4e0a\u4e86\u8be6\u5c3d\u7684\u6ce8\u91ca\uff0c\u53ef\u4ee5\u914d\u5408\u98df\u7528\u3002\r\n```cpp\r\n#include<bits/stdc++.h>\r\nstd::string s;\r\nstd::map<std::string,int> mp;//\u952e\u4e3a\u68cb\u76d8\u7684\u72b6\u6001\uff0c\u503c\u4e3a\u5230\u8fbe\u5f53\u524d\u72b6\u6001\u7684\u957f\u5ea6\r\nstd::queue<std::string> q;\r\nconst int pos[4][2]={{1,0},{-1,0},{0,1},{0,-1}};//\u56db\u4e2a\u65b9\u5411\r\nint main() {\r\n\tstd::cin>>s;q.push(s);mp[s]=0;//\u8bfb\u5165\uff1b\u5165\u961f\uff1b\u8bb0\u5f55\u957f\u5ea6\r\n\twhile(!q.empty()){\r\n\t\tstd::string t=q.front();q.pop();//BFS\u57fa\u672c\u64cd\u4f5c\uff0c\u5c06\u961f\u9996\u53d6\u51fa\u5e76\u8bb0\u5f55\uff1b\u51fa\u961f\r\n\t\tif(t==\"123804765\"){ printf(\"%d\",mp[t]);return 0; }//\u5982\u679c\u5230\u8fbe\u7b26\u5408\u7ed3\u679c\uff0c\u8f93\u51fa\u7ed3\u675f\u72b6\u6001\u7684\u952e\u5e76\u7ed3\u675f\u7a0b\u5e8f\r\n\t\tint k=t.find('0'),x=k/3,y=k%3,dis=mp[t];//k\u662f\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0cx\uff0cy\u7a7a\u683c\u7684\u5750\u6807\uff0cdis\u662f\u5f53\u524d\u72b6\u6001\u7684\u503c\r\n\t\tfor(int i=0;i<4;i++){\r\n\t\t\tint dx=x+pos[i][0],dy=y+pos[i][1];//dx,dy\u662f\u65b0\u4f4d\u7f6e\u7684\u5750\u6807\r\n\t\t\tif(dx<0||dx>2||dy<0||dy>2) continue;//BFS\u57fa\u672c\u64cd\u4f5c\uff0c\u5982\u679c\u8d85\u8fc7\u8fb9\u754c\u5c31\u7565\u53bb\r\n\t\t\tstd::swap(t[k],t[dx*3+dy]);//\u4ea4\u6362\u65e7\u7a7a\u683c\u4f4d\u7f6e\u548c\u65b0\u7a7a\u683c\u4f4d\u7f6e\r\n\t\t\tif(!mp.count(t)){//\u5982\u679c\u65b0\u72b6\u6001\u6ca1\u6709\u8bbf\u95ee\u8fc7\r\n\t\t\t\tq.push(t);//\u5c06\u65b0\u72b6\u6001\u5165\u961f\r\n\t\t\t\tmp[t]=dis+1;//\u65b0\u72b6\u6001\u7684\u952e\u503c\u5c31\u662f\u65e7\u72b6\u6001+1\r\n\t\t\t}\r\n\t\t\tstd::swap(t[k],t[dx*3+dy]);//\u63a5\u4e0b\u6765\u8fd8\u8981\u5224\u65ad\u5176\u4ed6\u65b9\u5411\uff0c\u6240\u4ee5\u8981\u518d\u4ea4\u6362\u4e00\u6b21\u56de\u5230\u521d\u59cb\u72b6\u6001\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1673423462,
        "uid": 672333,
        "name": "VT_SODC3DC3BSLF",
        "ccfLevel": 0,
        "title": "P1379 \u9898\u89e3"
    },
    {
        "content": "## BFS\u6a21\u677f\u9898\n\n\u901a\u8fc7\u9898\u610f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a1.\u6c42\u89e3\u6700\u5c11\u6b65\u6570 2.\u8fbe\u5230\u6700\u7ec8\u72b6\u6001\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u80af\u5b9a\u8fd9\u662f\u4e00\u9053BFS\u4e86\u3002\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u6765\u5199\u5462\uff1f\n\n### \u72b6\u6001\u8868\u793a\n\u7531\u4e8e\u9898\u76ee\u6240\u7ed9\u7684\u662f\u4e00\u4e2a\u7531\u6570\u5b57\u7ec4\u6210\u7684\u4e32\uff0c\u4e14\u6709\u53ef\u80fd\u4f1a\u6709\u524d\u5bfc\u96f6\u3002~~\u611f\u8c22\u524d\u9762\u5927\u4f6c\u6392\u96f7~~   \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5b58\u5165\u4e00\u4e2a**\u5b57\u7b26\u4e32**\u4e2d\uff0c\u5728\u4f7f\u7528'0'\u7684\u5750\u6807\u65f6\uff0c\u53ea\u9700\u8981\u505a\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u5c31\u884c\u4e86\uff08\u5177\u4f53\u64cd\u4f5c\u89c1\u4ee3\u7801\uff09\u3002\n\n### \u72b6\u6001\u8f6c\u79fb\n1.\u8bb0\u5f97\u5224\u65ad\u662f\u5426\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\uff0c\u5982\u679c\u5230\u8fbe\uff0c\u8fd4\u56dedistance\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u627e\u51fa**0**\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5176\u5206\u522b\u5411\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u770b\u80fd\u5426\u6210\u529f\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u5c31\u5728**\u5224\u91cd**\u540e\u585e\u5165\u961f\u5217\n\n#### \u4ee5\u4e0a\uff0c\u5c31\u662f\u8fd9\u9053\u9898\u7684\u5177\u4f53\u601d\u8def\uff0c\u4e5f\u5927\u6982\u662fBFS\u7684\u901a\u7528\u5957\u8def\n\n\u4e0a\u4ee3\u7801\uff01\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint bfs(string s)\n{\n\tmap<string,int> d;//\u901a\u8fc7hash\u6765\u4fdd\u5b58\u8ddd\u79bb\n\tqueue<string> q;//BFS\u7684\u5bf9\u5217\n\tint dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};//\u504f\u5dee\u91cf\u6570\u7ec4\n\tstring end=\"123804765\";//\u4e2d\u6b62\u60c5\u51b5\n\tq.push(s);\n\td[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tstring now=q.front();\n\t\tq.pop();\n\t\t\n\t\tif(now==end)\n\t\t{\n\t\t\treturn d[now];\n\t\t}\n\t\tint dis=d[now];\n\t\tint pos=now.find('0');//\u67e5\u627e0\u7684\u4f4d\u7f6e\n\t\tint x=pos/3,y=pos%3;//1\u7ef4->2\u7ef4\u57fa\u672c\u64cd\u4f5c\n\t\n\t\tfor(int j=0;j<4;j++)//\u904d\u5386\n\t\t{\n\t\t\tint fx=x+dx[j],fy=y+dy[j];\n\t\t\tif(fx>=0&&fx<3&&fy>=0&&fy<3)\n\t\t\t{\n\t\t\t\tswap(now[fx*3+fy],now[pos]);\n\t\t\t\tif(!d.count(now))\n\t\t\t\t{\n\t\t\t\t\td[now]=dis+1;\n\t\t\t\t\tq.push(now);\n\t\t\t\t}\n\t\t\t\tswap(now[fx*3+fy],now[pos]);//\u8bb0\u5f97\u5728\u53d8\u5316\u540e\u8fd8\u539f\u73b0\u573a\n\t\t\t}\n\t\t}\n\t\n\t}\n}\nint main ()\n{\n\tstring s;\n\tcin>>s;//\u8f93\u5165\n\tcout<<bfs(s)<<endl;//\u8f93\u51fa\n\treturn 0;\n} \n```\n\n\u5728AcWing\u4e0a\u8fd8\u6709\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u662f\u8003\u5bdf\u5c06BFS\u8def\u5f84\u4fdd\u5b58\u7684\u4e00\u9053\u9898\uff0c\u5927\u5bb6\u53ef\u4ee5\u8bd5\u8bd5\uff1a\u53eb[\u8fd9\u4e2a](https://www.acwing.com/problem/content/181/)\u3002\u8fd9\u4e2a\u771f\u7684\u4e0d\u662f\u5728\u6253\u5e7f\u544a\uff01\uff01\uff01\u6c42\u7ba1\u7406\u5458\u5927\u5927\u4e0d\u8981\u62d2\uff01\n\n\u601d\u8def\uff1ayxc\n\n\u611f\u8c22\uff01",
        "postTime": 1572955207,
        "uid": 129782,
        "name": "Lee02",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u53d1\u73b0\u81ea\u5df1\u6700\u8fd1\u975e\u5e38\u9ed1\uff0c\u51e0\u6b21\u7f16\u8bd1\u9519\u8bef\u90fd\u662f\u56e0\u4e3a\u53d8\u91cf\u540d\u4ea7\u751f\u6b67\u4e49\uff08\u5728\u81ea\u5df1\u7535\u8111\u4e0a\u597d\u597d\u7684\uff09\u3002\n\u8fd9\u9053\u9898\u76ee\u4e2d\u6700\u70e6\uff08\u7325\uff09\u607c\uff08\u7410\uff09\u7684\u65e0\u975e\u5c31\u662f\u5224\u91cd\u4e86\uff0c~~\u5176\u4ed6\u7684\u90fd\u5f88\u7b80\u5355~~\uff08\u4e2a\u9b3c\uff09\u3002\n\n\u4eca\u5929\u5462\uff0c\u6211\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u79cd\u5224\u91cd\u67e5\u627e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u201c\u5eb7\u6258\u5c55\u5f00\u201d\u7684\u65b9\u6cd5.\n\n\u6211\u5148\u5927\u81f4\u8bb2\u4e00\u4e0b\u5eb7\u62d3\u5c55\u5f00\uff1a\n\n\u6bd4\u59821\uff5e4\u7684\u5168\u6392\u5217\uff0c\u5148\u770b\u7b2c\u4e00\u4f4d\uff0c\u65e0\u8bba\u600e\u4e48\u9009\uff0c\u90fd\u5269\u4e0b\u4e09\u4e2a\u6570\uff0c\u8f6c\u53d8\u4e3a\u5269\u4e0b\u4e09\u4e2a\u6570\u7684\u5168\u6392\u5217\u3002\u4f17\u6240\u5468\u77e5\uff0cn\u4e2a\u6570\u7684\u5168\u6392\u5217\u6709n\uff01\u4e2a\u3002\u56e0\u6b64\uff0c\u786e\u5b9a\u7b2cm\u4f4d\u5728n\u4e2a\u6570\uff08\u4e00\u5b9a\u8981\u662f\u5269\u4e0b\u7684\uff0c\u5df2\u9009\u8fc7\u7684\u4e0d\u7b97\uff09\u4e2d\u6392\u7b2c\u51e0\uff08\u8bbe\u4e3ap\uff09\uff0c\u7136\u540esum\uff08\u4f4d\u7f6e\uff09\u52a0\u4e0a\uff08n-1\uff09\uff01* p\uff0c\u76f4\u5230n=1\u4e3a\u6b62\uff0c\u6700\u540esum++\u5373\u53ef\u5f97\u5230\u5168\u6392\u5217s\u5728n\u4f4d\u5168\u6392\u5217\u4e2d\u7684\u6392\u540d\u4e86\n\n\u5c06\u65b9\u6848\uff080~8\u6392\u5217\u7ec4\u6210\u7684\uff09\u57280~8\u4e5d\u4e2a\u6570\u7684\u5168\u6392\u5217\u4e2d\u67e5\u627e\u4f4d\u7f6e\uff08yasuo\u51fd\u6570\uff09\uff1a\n```\nint yasuo(char s[10])//s=\"012345678\"  -->x=1\n{\n\tint p,sum=0;//p\u4e3a\u5728s[m]\u4e4b\u524d\u7684\u6570\n\tfor (int m=1;m<=9;m++)\n\t{\n\t\tp=0;\n\t\tfor (int i=m+1;i<=9;i++)\n\t\t\tif (s[i]-'0'<s[m]-'0')\n\t\t\t\tp++;//\u6bcf\u5f53\u6709\u4e00\u4e2a\u6570\u6bd4s[m]\u5c0f\uff0cp++\n\t\tif (m<9) sum+=p*jc[9-m];//jc\u6570\u7ec4\u91cc\u88c5\u7684\u9636\u4e58\n\t\telse sum++;//\u6ce8\u610f\u6700\u540esum\u8981+1\n\t}\n\treturn sum;//\u5bbf\u547d\u5373\u4f4d\u7f6e\n}\n```\n\n\u8fd8\u6709\u5c06\u4f4d\u7f6e\u62d3\u5c55\u6210\u65b9\u6848\u7684\u51fd\u6570\uff08jieya\u51fd\u6570\uff09\uff1a\n\u5373\u662f\u5c06\u4e4b\u524d\u7684yasuo\u51fd\u6570\u5012\u8fc7\u6765\u5199\u4e00\u904d\uff0c\u4e0d\u662f\u7528\u7b2cm\u9879\u7684\u9636\u4e58\u53bb\u4e58\u4e0ap\uff0c\u800c\u662f\u7528\u603b\u91cf/m\u9879\u7684\u9636\u4e58 + 1\u5f97\u5230p\uff0c\u518d\u5224\u91cd\uff0c\u6700\u540e\u5c06p\u52a0\u5165\u6570\u7ec4\uff0c\u5982\u4e0b\u6240\u793a\n\n```\nvoid jieya(int x)\t//x=1 --> s=\"012345678\"\n{\n\tint w,js=0,xx,w2,l;\n\tbool pc[10];\n\tmemset(pc,false,sizeof(pc));\n\tfor (int m=8;m>=1;m--)\n\t{\n\t\tjs=0;\n\t\tw=x/jc[m]+1;//jc\u6570\u7ec4\u91cc\u88c5\u7684\u9636\u4e58\n\t\txx=x%jc[m];\n\t\tx=xx;\n\t\tfor (int i=1;i<=9;i++)\n\t\t{\n\t\t\tif (pc[i]==false) js++,l=i;\n\t\t\tif (js==w) w2=l-1,pc[l]=true;\n\t\t}\n\t\tnow[9-m]=w2+'0';\n\t}\n\tfor (int i=1;i<=9;i++)\n\t\tif (!pc[i])\n\t\t{\n\t\t\tw=i-1;\n\t\t\tbreak;\n\t\t}\n\tnow[9]=w+'0';\n}\n```\n\n\u63a5\u4e0b\u6765\uff0c\u6709\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u65b9\u6848\u4e0e\u4f4d\u7f6e\u5bf9\u5e94\uff0c\u4ece\u800c\u5feb\u901f\u5730\u67e5\u627e\uff08\u65f6\u95f4\u6548\u7387\u4e3aO(n\u65b9)\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\uff0c\u53ea\u662f\u672c\u849f\u84bb\u592a\u6e23\u4e86\uff0c\u5c31\u6ca1\u5199\uff09\u3002\u4e4b\u540e\u4fbf\u662f~~\u7b80\u5355\u7684~~bfs\u5e7f\u641c\u6765\u67e5\u627e\uff08\u5e7f\u641c\u5c31\u4e0d\u5520\u53e8\u4e86\uff0c\u770b\u4ee3\u7801\uff09\uff1a\n\n# code\uff1a\n\n\n```\n#include<bits/stdc++.h>\n#define MAXN 400000\nusing namespace std;\nchar st[10],ed[10]={' ','1','2','3','8','0','4','7','6','5'},now[10],yyyy[10];\nbool find1=false;\nint mubiao,tmp,jc[10],dx[5]={0,1,0,-1,0},dy[5]={0,0,1,0,-1};\nint head,tail;\nint dui[MAXN],step[MAXN];\nbool chuxian[MAXN];\nint yasuo(char s[10])//s=\"012345678\"  -->x=1\n{\n\tint p,sum=0;\n\tfor (int m=1;m<=9;m++)\n\t{\n\t\tp=0;\n\t\tfor (int i=m+1;i<=9;i++)\n\t\t\tif (s[i]-'0'<s[m]-'0')\n\t\t\t\tp++;\n\t\tif (m<9) sum+=p*jc[9-m];\n\t\telse sum++;\n\t}\n\treturn sum;\n}\n\nvoid jieya(int x)\t//x=1 --> s=\"012345678\"\n{\n\tint w,js=0,xx,w2,l;\n\tbool pc[10];\n\tmemset(pc,false,sizeof(pc));\n\tfor (int m=8;m>=1;m--)\n\t{\n\t\tjs=0;\n\t\tw=x/jc[m]+1;\n\t\txx=x%jc[m];\n\t\tx=xx;\n\t\tfor (int i=1;i<=9;i++)\n\t\t{\n\t\t\tif (pc[i]==false) js++,l=i;\n\t\t\tif (js==w) w2=l-1,pc[l]=true;\n\t\t}\n\t\tnow[9-m]=w2+'0';\n\t}\n\tfor (int i=1;i<=9;i++)\n\t\tif (!pc[i])\n\t\t{\n\t\t\tw=i-1;\n\t\t\tbreak;\n\t\t}\n\tnow[9]=w+'0';\n}\nint main()\n{\n\t\n\tjc[1]=1;jc[2]=2;\n\tint sss=3;\n\tfor (int i=3;i<=9;i++)\n\t{\n\t\tjc[i]=sss*jc[i-1];\n\t\tsss++;\n\t}\n\tmemset(chuxian,false,sizeof(chuxian));\n\tmubiao=yasuo(ed);\n\tfor (int i=1;i<=9;i++)\n\t\tcin>>st[i];\n\tdui[1]=yasuo(st);\n\tchuxian[dui[1]]=true;\n\tstep[1]=0;\n\thead=1;\n\ttail=1;\n\twhile(head<=tail)\n\t{\n\t\tjieya(dui[head]-1);//\u5c06\u5f53\u524d\u7684\u4f4d\u7f6e\u8f6c\u5316\u4e3a\u65b9\u6848\u5b58\u4e8enow\u6570\u7ec4\n\t\tchar sb[4][4];//\u4e0d\u8981\u5728\u610f\u53d8\u91cf\u540d\n\t\tint cen=1,lie=1,lx,ly;\n\t\tfor (int i=1;i<=9;i++)//\u5c06\u65b9\u6848\u5b58\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u4e2d\n\t\t{\n\t\t\tsb[cen][lie]=now[i];\n\t\t\tif (now[i]=='0') lx=cen,ly=lie;\n\t\t\tlie++;\n\t\t\tif (lie>3)\n\t\t\t\tlie=1,cen++;\n\t\t}\n\t\tchar sc[4][4];//\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff0c\u4ee5\u514d\u4e22\u5931\n\t\t\tfor (int i=1;i<=3;i++)\n\t\t\t\tfor (int j=1;j<=3;j++)\n\t\t\t\t\tsc[i][j]=sb[i][j];\n\t\tfor(int i=1;i<=4;i++)\n\t\t{\n\t\t\tfor (int q=1;q<=3;q++)\n\t\t\t\tfor (int j=1;j<=3;j++)\n\t\t\t\t\tsb[q][j]=sc[q][j];//\u63d0\u53d6\u5f53\u524d\u72b6\u6001\n\t\t\tint nx=lx+dx[i],ny=ly+dy[i];//\u62d3\u5c55\u65b0\u65b9\u6848\n\t\t\tswap(sb[lx][ly],sb[nx][ny]);//\u4ea4\u6362\n\t\t\tint sd=1;\n\t\t\tfor (int ssss=1;ssss<=3;ssss++)\n\t\t\t\tfor (int j=1;j<=3;j++)\n\t\t\t\t\tyyyy[sd]=sb[ssss][j],sd++;\u5c06\u65b0\u65b9\u6848\u5b58\u4e8eyyyy\u6570\u7ec4\u4e2d\n\t\t\tif (nx>=1&&nx<=3&&ny>=1&&ny<=3)//\u5982\u679c\u65b9\u6848\u53ef\u884c\n\t\t\t{\n\t\t\t\ttmp=yasuo(yyyy);//tmp\u4e3a\u5f53\u524d\u65b9\u6848\u7684\u4f4d\u7f6e\n\t\t\t\tif(chuxian[tmp]==false)//\u5982\u679c\u65b9\u6848\u6ca1\u6709\u8fc7\n\t\t\t\t{\n\t\t\t\t\tchuxian[tmp]=true;//\u6807\u8bb0\n\t\t\t\t\ttail++;\n\t\t\t\t\tdui[tail]=tmp;\n\t\t\t\t\tstep[tail]=step[head]+1;//\u8d4b\u503c\n\t\t\t\t\tif(tmp==mubiao)//\u5982\u679c\u5b8c\u6210\u76ee\u6807\n\t\t\t\t\t{\n\t\t\t\t\t\tcout<<step[tail];//\u8f93\u51fa\n\t\t\t\t\t\tfind1=true;//\u6807\u8bb0\u5df2\u627e\u5230\n\t\t\t\t\t\tbreak;\u7ed3\u675f\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(find1) break;//\u5982\u679c\u627e\u5230\u5219\u7ed3\u675f\n\t\thead++;//\u961f\u9996\u52a0\u52a0\n\t}\n\tif (!find1) cout<<\"0\";//\u5982\u679c\u6ca1\u627e\u5230\uff08\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u5c31\u662f\u76ee\u6807\u72b6\u6001\uff0c\u8f93\u51fa0\uff09\n\treturn 0;\n}\n```",
        "postTime": 1563712686,
        "uid": 215590,
        "name": "Ckger",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u516b\u6570\u7801\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u9898\uff0c\u6211\u7528\u7684\u65b9\u6cd5\u662f\uff1a\u5eb7\u6258\u5c55\u5f00\u3001\u6a21\u62df\u3001\u5b57\u7b26\u4e32\u2026\u2026[\u5176\u5b9e\u6b63\u89e3\u662fHASH]\n\n\u9898\u9762\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u6570\u7801\u521d\u59cb\u72b6\u6001\uff0c\u6c42\u591a\u5c11\u6b65\u53ef\u4ee5\u8fbe\u5230\u7ed9\u5b9a\u72b6\u6001\u3002\n\n\u5206\u6790\uff1a\u8f93\u5165\u7684\u662f\u4e00\u4e2a\u4e5d\u4f4d\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5\u8f93\u5165\uff1a1\u3001\u6570\u5b57\uff1b2\u3001\u5b57\u7b26\u6570\u7ec4(\u5b57\u7b26\u4e32)\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u662f\u4e00\u9053\u56fe\uff0c\u4f46\u662f\u6ca1\u6709\u76f4\u63a5\u7ed9\u51fa\u660e\u786e\u7684\uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a\u9690\u5f0f\u56fe\u3002\u5728\u6784\u9020\u5b8c\u56fe\u4e4b\u540e\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u662fBFS\n\n**\u8981\u70b9\uff1a**\n\n1\u3001\u516b\u6570\u7801\u7684\u50a8\u5b58\u95ee\u9898\uff1a\u96be\u9053\u771f\u7684\u8981\u5f00\u4e00\u4e2a[3][3]\u7684\u4e8c\u7ef4\u6570\u7ec4\u5417\uff1f\u5176\u5b9e\u6ca1\u5fc5\u8981\uff0c\u6709\u9898\u7684\u8f93\u5165\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u542f\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a9\u4f4d\u6570\u6765\u50a8\u5b58\u8fd9\u4e2a\u72b6\u6001\u3002\n\n2\u3001\u5982\u4f55\u50a8\u5b58\uff1f\u961f\u5217\u5c31\u597d\u4e86\u3002\u6700\u5f00\u59cb\u7531\u5b57\u7b26\u6570\u7ec4\u8f93\u5165(\u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u6570\u5b57),\u5728\u9700\u8981\u6539\u53d8\u72b6\u6001\u65f6\u538b\u7f29\u6539\u53d8\u72b6\u6001\uff0c\u5728\u4e0d\u9700\u8981\u65f6\u89e3\u538b\u50a8\u5b58\u3002\n\n3\u3001\u5173\u4e8e\u89e3\u538b\u548c\u538b\u7f29\uff0c\u5176\u5b9e\u5c069\u4f4d\u6570\u653e\u8fdb\u6570\u7ec4\u91cc\u5f88\u5bb9\u6613\uff0c\u53cd\u4e4b\u4e5f\u5f88\u5bb9\u6613\u3002\u89e3\u538b\uff1a\n```\nint Decompression/*\u89e3\u538b(\u7528\u6570\u5b57\u50a8\u5b58)*/(char s[10])\n{\n\tint x=0;\n\tfor(int i=1;i<=9;++i)\n\t\tx=x*10+(s[i]-'0');\n\treturn x; \n}\n```\n\u538b\u7f29\uff1a\n```\nvoid Compression/*\u5c06\u6570\u5b57\u53d8\u6210\u5b57\u7b26*/(int x,char s[10])\n{\n\tint i=9;\n\twhile(i)\n\t{\n\t\ts[i]=(x%10+'0');\n\t\tx/=10;\n\t\t--i;\n\t}\n\treturn;\n}\n```\n4\u3001\u5173\u4e8e\u632a\u52a8\u89c4\u5f8b\uff1a\u5c06\u4e00\u4e2a\u6570\u7801\u5411\u4e0a\u632a\u52a8\u5c31\u662f-3\uff0c\u5411\u4e0b\u632a\u52a8\u5c31\u662f+3\uff0c\u5411\u5de6\u632a\u52a8\u5c31\u662f-1\uff0c\u5411\u53f3\u632a\u52a8\u5c31\u662f+1(\u8fb9\u754c\u7684\u8981\u989d\u5916\u5224\u65ad)\n```\n\t//w\u6240\u5728\u4f4d\u7f6e\u5c31\u662f0\u6240\u5728\u4f4d\u7f6e\n\tswitch(plan)\n\t{\n\t\tcase 1:\n\t\t\tif(w>3)\n\t\t\t\tswap(to[w],to[w-3]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif(w<=6)\n\t\t\t\tswap(to[w],to[w+3]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif(w%3!=1)\n\t\t\t\tswap(to[w],to[w-1]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tif(w%3!=0)\n\t\t\t\tswap(to[w],to[w+1]);\n\t\t\tbreak;\n\t\tdefault:break;\n\t}\n```\n**5\u3001\u5224\u91cd\uff1a**\n\n\u8fd9\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u70b9\u4e86\uff0c\u6700\u65e0\u8bed\u7684\u529e\u6cd5(\u518d\u4e0d\u80fd\u60f3\u51fa\u66f4\u597d\u65b9\u6cd5\u7684\u524d\u63d0\u4e0b)\u7528set/map\uff0c\u6700\u6b63\u5e38\u7684\u65b9\u6cd5\u5c31\u662f\u7528Hash(\u4f46\u662f\u672c\u6587\u7ae0\u4e0d\u4ecb\u7ecd),\u4ee5\u53ca\u672c\u6587\u4ecb\u7ecd\u7684\u5eb7\u6258\u5c55\u5f00\u3002\n\n\u4f55\u4e3a\u5eb7\u6258\u5c55\u5f00\uff1f\u9644\u4e00\u4e2a\u94fe\u63a5[\u5eb7\u6258\u5c55\u5f00](\u5eb7\u6258\u5c55\u5f00_\u767e\u5ea6\u767e\u79d1)\u81ea\u5df1\u4e86\u89e3\u4e86\u89e3\u3002\n\n\u56e0\u4e3a\u5f00\u4e00\u4e2a\u4e5d\u4f4d\u6570\u7684\u6570\u7ec4\u80af\u5b9a\u4e0d\u884c(\u6709\u4e07\u6076\u7684\u7a7a\u95f4\u9650\u5236)\u6240\u4ee5\u8981\u5c3d\u53ef\u80fd\u7684\u51cf\u5c11\u6570\u4f4d\uff0c\u90a3\u4e489\uff01\u7684\u6570\u7ec4\u5f00\u7684\u4e86\u5417\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8\u6bcf\u4e00\u79cd\u72b6\u6001\u6240\u5728\u7684\u662f\u8be5\u5e8f\u5217\u7684\u7b2c\u591a\u5c11\u4e2a\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nint wh=1;\n\tfor(int i=1;i<=9;++i){\n\t\tint k=0;\n\t\tfor(int j=1;j<=i;++j)\n\t\t\tif(s[j]<=s[i])\n\t\t\t\t++k;\n\t\twh+=(s[i]-'0'+1-k)*times[i];\n\t}\n\treturn wh;\n```\n\u90a3\u4e48\u4e00\u5207\u90fd\u597d\u4e86\uff0cBfs\u600e\u4e48\u5199\u5462\uff1f\uff08\u53ea\u8981\u5b66\u8fc7\u7684\u90fd\u77e5\u9053\uff09\u53d1\u4e00\u4e2a\u4f2a\u4ee3\u7801\uff1a\n```\n\t\u5934=\u5c3e=1;\t\n\twhile(\u5934<=\u5c3e){\n\t\t\u53d6\u51fa\u6700\u5f00\u59cb\u7684\u5934\u5143\u7d20\n\t\t\u538b\u7f29\u6210\u6570\u7ec4;\n\t\t\u56db\u4e2a\u65b9\u5411\u5faa\u73af{\n\t\t\t\u5c06\u8f6c\u6362\u540e\u7684\u72b6\u6001\u50a8\u5b58\n\t\t\t\u5c06\u8f6c\u6362\u540e\u7684\u72b6\u6001\u89e3\u538b\u6210\u6570\u5b57\n\t\t\t\u6c42\u8f6c\u6362\u540e\u7684\u72b6\u6001\u662f\u7b2c\u591a\u5c11\u4e2a\n\t\t\tif(\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7){\n\t\t\t\t\u51fa\u73b0\n\t\t\t\t\u5c06\u89e3\u538b\u540e\u7684\u6570\u5b57\u5165\u961f\n\t\t\t\t\u6b65\u6570\u4e3a\u4e0a\u4e00\u6b65\u7684\u6b65\u6570+1;\n\t\t\t\t\u5982\u679c\u548c\u8981\u6c42\u7684\u72b6\u6001\u4e00\u6837{\n\t\t\t\t\t\u8f93\u51fa\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\u5934\u6307\u9488++;\n\t}\n```\n\u8bf4\u4e86\u8fd9\u4e48\u591a\u4e86\uff0c\u76f8\u4fe1\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6700\u540e\uff0c\u5b8c\u6574\u4ee3\u7801\u653e\u4e0a\uff01\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define SET 400000\nchar str[10],aim[10]{' ','1','2','3','8','0','4','7','6','5'};\nchar now[10],next[10];\nint a,times[10];\nint team[SET],step[SET];\nbool apear[SET];\nint Decompression(char s[10])\n{\n\tint x=0;\n\tfor(int i=1;i<=9;++i)\n\t\tx=x*10+(s[i]-'0');\n\treturn x; \n}\nvoid Compression(int x,char s[10])\n{\n\tint i=9;\n\twhile(i)\n\t{\n\t\ts[i]=(x%10+'0');\n\t\tx/=10;\n\t\t--i;\n\t}\n\treturn;\n}\nvoid move(int plan,char where[10],char to[10])\n{\n\tmemcpy(to,where,10);\n\tint w;\n\tfor(int i=1;i<=9;++i)\n\t\tif(to[i]=='0')\n\t\t\tw=i;\n\tswitch(plan)\n\t{\n\t\tcase 1:\n\t\t\tif(w>3)\n\t\t\t\tswap(to[w],to[w-3]);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif(w<=6)\n\t\t\t\tswap(to[w],to[w+3]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tif(w%3!=1)\n\t\t\t\tswap(to[w],to[w-1]);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tif(w%3!=0)\n\t\t\t\tswap(to[w],to[w+1]);\n\t\t\tbreak;\n\t\tdefault:break;\n\t}\n}\nint f(char s[10])\n{\n\tint wh=1;\n\tfor(int i=1;i<=9;++i){\n\t\tint k=0;\n\t\tfor(int j=1;j<=i;++j)\n\t\t\tif(s[j]<=s[i])\n\t\t\t\t++k;\n\t\twh+=(s[i]-'0'+1-k)*times[i];\n\t}\n\treturn wh;\n}\nvoid solve()\n{\n\ta=Decompression(aim);\n\tteam[1]=Decompression(str);\n\tif(a==team[1]){\n\t\tcout<<0<<endl;\n\t\treturn;\n\t}\n\tint head,tail;\n\thead=tail=1;\t\n\twhile(head<=tail){\n\t\tint n=team[head];\n\t\tCompression(n,now);\n\t\tfor(int i=1;i<=4;++i){\n\t\t\tmove(i,now,next);\n\t\t\tint nn,wn;\n\t\t\tnn=Decompression(next);\n\t\t\twn=f(next);\n\t\t\tif(!apear[wn]){\n\t\t\t\tapear[wn]=1;\n\t\t\t\tteam[++tail]=nn;\n\t\t\t\tstep[tail]=step[head]+1;\n\t\t\t\tif(nn==a){\n\t\t\t\t\tcout<<step[tail]<<endl;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t++head;\n\t}\n\treturn;\n}\nint main()\n{\n\ttimes[8]=1;\n\tfor(int i=7;i>=1;--i)\n\t\ttimes[i]=(9-i)*times[i+1];\n\tfor(int i=1;i<=9;++i)\n\t\tcin>>str[i];\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1563712492,
        "uid": 154334,
        "name": "Garrison",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u4e0d\u88abOrz.....\n\n\n------------\n#\u5728\u770b\u5230\u6709\u786e\u5b9a\u7684**\u8d77\u59cb\u72b6\u6001**\u548c**\u7ec8\u6b62\u72b6\u6001**\u65f6\u5c31\u5f88\u81ea\u7136\u60f3\u5230\u4e86\n## **\u53cc\u5411BFS**\n\u4f46\u662f\u600e\u4e48\u6837\u5b58\u6bcf\u4e2a\u7684\u72b6\u6001\u5462\uff1f\n\u5982\u679c\u76f4\u63a5\u5c06\u6bcf\u4e2a\u72b6\u6001\u51d1\u6210**9\u4f4d**\u7684\u6570\u5b57\uff0c\u518d\u7528bool\u53bb\u91cd\uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u70b8\n(1e9\u7684\u7a7a\u95f4)\n\n**\u90a3\u4e48\uff0c\u91cd\u70b9\u6765\u4e86**\n## \u5eb7\u6258\u5c55\u5f00\n\u5eb7\u6258\u5c55\u5f00\u662f\u4e00\u4e2a\u5168\u6392\u5217\u5230\u4e00\u4e2a\u81ea\u7136\u6570\u7684\u53cc\u5c04\uff0c\u5e38\u7528\u4e8e\u6784\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u7a7a\u95f4\u538b\u7f29\u3002\n\u5176\u5b9e\u53ef\u4ee5\u7406\u89e3\u4e3a\u2014\u2014\u7531N\u4e2a\u6570\u5b57(\u4e0d\u91cd\u590d\uff0c\u4e14\u4ece\u5c0f\u5230\u5927)\u7ec4\u6210\u7684N\u4f4d\u6570\u5b57\uff0c\u518dN\u4e2a\u6570\u5b57\u7684\u5168\u6392\u5217\u4e2d\u7684\u987a\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff09\n\n**\u6bd4\u5982**\uff1a\n231\n\n\u5728\u75311,2,3\u8fd9\u4e09\u4e2a\u6570\u5b57\u7684\u5168\u6392\u5217\n\uff1a123 \uff0c132 \uff0c213 \uff0c231 \uff0c312 \uff0c321\n\u4e2d\u6392\u7b2c3(\u4ece\u7b2c0\u5f00\u59cb)\uff0c\u6240\u4ee5231\u7684\u5eb7\u6258\u503c\u4e3a3\n\n**\u90a3\u4e48\u5eb7\u6258\u503c\u600e\u4e48\u6c42\u5462**\uff1f\n\nX = A[0] * (n-1)! + A[1] * (n-2)! + \u2026 + A[n-1] * 0!~~(\n\u600e\u4e48\u8bc1\u660e\uff0c\u6211\u771f\u7684\u4e0d\u77e5\u9053\uff0cOrz)~~\n\nA[i]\u8868\u793a\u5728\u7b2ci\u4f4d\u6570\u5b57\u4e4b\u540e\u6bd4A[i]\u5c0f\u7684\u6570\u5b57\u7684\u6570\u91cf\n\neg.  \n\t231=1x2 +1x1+0x1\n    \n    \u5728\u7b2c\u4e00\u4f4d\u6570\u5b572\u540e\u53ea\u67091\u4e2a\u6bd42\u5c0f\uff1a1  \u6240\u4ee5 1*\uff083-1\uff09!\n    \n    \u5728\u7b2c\u4e8c\u4f4d\u6570\u5b573\u540e\u53ea\u67091\u4e2a\u6bd43\u5c0f\uff1a1  \u6240\u4ee5 1*\uff082-1\uff09!\n    \n    \u5728\u7b2c\u4e09\u4f4d\u6570\u5b571\u540e\u6ca1\u6709\u6bd41\u5c0f\u7684  \u6240\u4ee50*(1-1)!\n```cpp\nint cantor(int *A,int n)//\u6c42\u5eb7\u6258\u503c\n{\n\tint ans=0,sum=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tsum=0;\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t{\n\t\t\tif(a[i]>a[j])sum++;\n\t\t}\n\t\tans+=jc[n-i]*sum;\n\t}\n\treturn ans;\n}\n```\n\u540c\u65f6\u77e5\u9053\u5eb7\u6258\u503c\u540c\u65f6\u4e5f\u53ef\u4ee5\u6c42\u51fa\u90a3\u4e2a\u6570\n```cpp\nvoid ccantor(int n,int can)//\u6709\u70b9\u4e11\n{\n\tfor(int i=n;i>1;i--)\n\t{\n\t\tint p=can/jc[i-1];\n\t\tcan=can-p*jc[i-1];\n\t\tint turns=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(vis[j]==0)\n\t\t\t{\n\t\t\t\tturns++;\n\t\t\t}\n\t\t\tif(p+1==turns)\n\t\t\t{\n\t\t\t\ta[n-i+1]=j;vis[j]=1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(vis[i]==0)a[n]=i;\n\t}\n}\n```\n\u90a3\u4e48\u672c\u9898\u81ea\u7136\u5c31\u53ef\u4ee5\u7528\u5eb7\u6258\u5c55\u5f00\u6765\u538b\u7f29\u7a7a\u95f4\n\uff08\u8bb2\u4e5d\u5bab\u683c\u5f62\u8c61\u4e3a\u4e00\u5217\u6570\uff09\n\n# **\u4e0a\u4ee3\u7801\uff0c\u4ee3\u7801\u91cc\u6709\u6ce8\u91ca**\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<iostream>\nusing namespace std;\n///362880+10\u4e3a\u4e5d\u5bab\u683c\u5eb7\u6258\u5c55\u5f00\u6700\u5927\u503c \nchar Begin[10],End[10];///\u5b9a\u4e49\u6b63\u5411\u6570\u5217\u548c\u53cd\u5411\u6570\u5217 \nint step[2][362890],pose,posb,m;///\u53cc\u5411\u6b65\u6570\uff0c\u6b63\u5411\u7a7a\u4f4d\u5730\u5740\uff0c\u53cd\u5411\u7a7a\u4f4d\u5730\u5740 \nbool vis[2][362890];///\u53cc\u5411\u8bbf\u95ee\u6807\u8bb0 \nstruct node{\n\tchar word[9];\n\tint poss;\n\tbool flag;\n\tnode(){};\n\tnode(const char a[],const int b,const bool c)///\u521d\u59cb\u5316\u53cc\u5411\u4e5d\u5bab\u683c\u7684\u7ed3\u6784\u4f53\u51fd\u6570 \n\t{\n\t\tstrcpy(word,a),poss=b,flag=c;\n\t} \n}tmp;\nqueue<node> point;///\u4e00\u4e2a\u961f\u5217 \nint power[10]={1,1,2,6,24,120,720,5040,40320,362880};///\u5eb7\u6258\u5c55\u5f00\u7684\u9636\u4e58\u8868 \nbool flag[10];\nint cantor(char s[])///\u5eb7\u6258\u5c55\u5f00\u6a21\u677f \n{\n\tmemset(flag,1,sizeof(flag));\n\tint ans=0,temp;\n\tfor(int i=0;i<9;i++)\n\t{\n\t\tflag[s[i]-'0']=0;\n\t\ttemp=0;\n\t\tfor(int j=0;j<s[i]-'0';j++)\n\t\t\tif(flag[j])temp++;\n\t\tans+=temp*power[8-i];\n\t}\n\treturn ans;\n}\nint dir[4]={1,-1,3,-3};///\u4e5d\u5bab\u683c\u4e0a\u4e0b\u5de6\u53f3\u7684bfs \nint twobfs()///\u53cc\u5411bfs \n{\n\tmemset(vis,0,sizeof(vis));\n\tpoint.push(node(Begin,posb,0));///\u538b\u5165\u6b63\u53cd\u7a7a\u4f4d \n\tpoint.push(node(End,pose,1));\n\tvis[0][cantor(Begin)]=vis[1][cantor(End)]=1;\n\tint temp,dx,temp2,pos;\n\t///temp\u5b58\u5f53\u524d\u4e5d\u5bab\u683c\u6620\u5c04\u503c,temp2\u5b58\u540e\u4e00\u6b65\u6620\u5c04\uff0cdx\u5b58\u4e0b\u4e00\u6b65\u7a7a\u683c\u4f4d\u7f6e\uff0cpos\u4e3a\u5f53\u524d\u4f4d\u7f6e \n\twhile(!point.empty())//\u961f\u5217\u975e\u7a7a \n\t{\n\t\ttmp=point.front();///\u53d6\u961f\u5934\u6269\u5c55 \n\t\tpos=tmp.poss;///\u5b58\u50a8\u5f53\u524d\u7a7a\u683c\u4f4d\u7f6e \n\t\tpoint.pop();///\u961f\u5934\u51fa\u961f \n\t\ttemp=cantor(tmp.word);///\u4e5d\u5bab\u683c\u79bb\u6563\u5316\uff08\u5eb7\u6258\uff09 \n\t\tif(vis[!tmp.flag][temp])///\u5f53\u524d\u4f4d\u7f6e\u7684\u53cd\u5411bfs\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u89e3 \n\t\t\treturn step[0][temp]+step[1][temp];\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tdx=pos+dir[i];///4\u4e2a\u65b9\u5411 \n\t\t\tif(dx>=0&&dx<=8&&(dx/3==pos/3||dx%3==pos%3))///0\u7684\u4f4d\u7f6e\u5728\u8303\u56f4\u4e4b\u5185\u4e14\u4fdd\u8bc1\u540c\u884c\u540c\u5217\u4ea4\u6362\uff08\u6ce8\u610f:\u662f\u4ece0~8\uff0c\u800c\u4e0d\u662f1~9[\u8fd9\u91cc\u9700\u8981\u601d\u8003\u4e00\u4e0b]\uff09 \n\t\t\t{\n\t\t\t\tswap(tmp.word[dx],tmp.word[pos]);///\u4ea4\u63620\u4e0e\u9694\u58c1\u7684\u4f4d\u7f6e \n\t\t\t\ttemp2=cantor(tmp.word);///\u5b58\u50a8\u8d70\u540e\u6620\u5c04\u503c \n\t\t\t\tif(!vis[tmp.flag][temp2])///\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u6ca1\u88ab\u8bbf\u95ee\u8fc7 \n\t\t\t\t{\n\t\t\t\t\tvis[tmp.flag][temp2]=1;///\u6807\u8bb0\u4e3a\u8bbf\u95ee \n\t\t\t\t\tstep[tmp.flag][temp2]=step[tmp.flag][temp]+1;///\u5f53\u524d\u65b9\u5411\u6b65\u6570+1 \n\t\t\t\t\tpoint.push(node(tmp.word,dx,tmp.flag));///\u538b\u5165\u961f\u5217 \n\t\t\t\t}\n\t\t\t\tswap(tmp.word[dx],tmp.word[pos]);///\u6062\u590d\u539f\u72b6\u6001\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u79fb\u52a8 \n\t\t\t}\n\t\t}\n\t}\n\treturn -1;///\u961f\u5217\u4e3a\u7a7a\u4e86\u8fd8\u6ca1\u627e\u5230\u6700\u77ed\u8def\u8fd4\u56de-1\uff08\u5f53\u7136\u672c\u9898\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\uff09 \n}\nint main()\n{\n\tfor(int i=0;i<9;i++)///\u521d\u59cb\u4e5d\u5bab\u683c \n\t{\n\t\tscanf(\" %c\",&Begin[i]);\n\t\tif(Begin[i]-'0'==0)posb=i;\n\t}\n\tEnd[0]='1';End[1]='2';End[2]='3';End[3]='8';End[4]='0';End[5]='4';End[6]='7';End[7]='6';End[8]='5';pose=4;\n\t///\u76ee\u6807\u56fe\u5df2\u786e\u8ba4 \n\tprintf(\"%d\\n\",twobfs());\n\treturn 0;\n}\n```\n\n\n\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\uff0c\u5e0c\u671b\u5927\u5bb6\u770b\u7684\u61c2\uff0cQAQ...\n\n\n# \u6269\u5c55\n\u672c\u9898\u4fdd\u8bc1\u4e86\u4e00\u5b9a\u6709\u89e3\uff0c\u53ef\u5982\u679c\u6709\u65e0\u6cd5\u8fbe\u5230\u7684\u60c5\u51b5\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u628a\u65f6\u95f4\u6d6a\u8d39\u5728**\u65e0\u7528**\u7684bfs\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u5927\u5927\u589e\u52a0\u3002\n\n\u8fd9\u91cc\u5c31\u6709\u4e00\u79cd\u5224\u65ad\u662f\u5426\u4e00\u5b9a\u53ef\u4ee5\u8fbe\u5230\u76ee\u6807\u56fe\u7684\u65b9\u6cd5\n\n# \u9006\u5e8f\u5bf9\n**\u6ce8\u610f\uff1a\uff080\u4ee3\u8868\u7684\u662f\u7a7a\u683c\uff0c\u800c\u975e\u662f\u4e00\u4e2a\u6570\u503c\uff09**\n\n\u601d\u80031:\n\n0\u5728\u5411\u5de6\u6216\u5411\u53f3\u8d70\u65f6\uff0c\u9006\u5e8f\u5bf9\u6570\u4f1a\u6539\u53d8\u5417\uff1f\n\u5c31\u50cf1234\u25a15678 ==\u300b123\u25a1456789 or\n12345\u25a1678\u8fd9\u6837\uff0c\u4ed6\u53ea\u662f\u6539\u53d8\u4e86\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0c\u800c\u6ca1\u6709\u6539\u53d8\u6570\u5b57\u7684\u4f4d\u7f6e\u3002\u56e0\u6b64\u9006\u5e8f\u5bf9\u6570\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\n\n\u601d\u80032\uff1a\n\n0\u5728\u4e0a\u4e0b\u79fb\u52a8\u65f6\uff0c\u9006\u5e8f\u5bf9\u6570\u4f1a\u6539\u53d8\u5417\uff1f\n\n\u52063\u7c7b\u8ba8\u8bba\uff08\n\nx1 x2 x3\n\nx4  \u25a1  x5\n\nx6 x7 x8\n\n\u2460\u5f53x2<x3&&x2<x4\u65f6\uff0c\u9006\u5e8f\u5bf9\u6570\u4f1a\u51cf\u5c112\n\n\u2461\u5f53x2>x3&&x2>x4\u65f6\uff0c\u9006\u5e8f\u5bf9\u6570\u4f1a\u589e\u52a02\n\n\u2462\u5f53x2<x3&&x2>x4||x2>x3&&x2<x4\u65f6\uff0c\u9006\u5e8f\u5bf9\u6570\u4e0d\u53d8\uff08+1\uff0c-1\uff09\n\n\u56e0\u6b64\uff0c\u4e0d\u8bba\u600e\u4e48\u79fb\u52a8\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0c\u9006\u5e8f\u5bf9\u7684\u5947\u5076\u6027\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\n\n\u601d\u80033\n\n\u5982\u679c\u8d77\u59cb\u72b6\u6001\u548c\u7ec8\u6b62\u72b6\u6001\u7684\u9006\u5e8f\u5bf9\u6570\u5947\u5076\u6027\u4e0d\u540c\u90a3\u4e48\u53ef\u4ee5\u8fbe\u5230\u5417\uff1f\n\n\u7b54\u6848\u663e\u7136\u662f**\u4e0d\u80fd**\u7684\uff01\u56e0\u4e3a2\u4e2a\u82e5\u8981\u8fbe\u5230\u76ee\u6807\u72b6\u6001\uff0c\u90a3\u4e48\u4e5d\u5bab\u683c\u5fc5\u7136\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u5fc5\u7136\u4ed6\u4eec\u7684\u9006\u5e8f\u5bf9\u6570\u5947\u5076\u6027\u662f\u76f8\u540c\u7684\u3002\u90a3\u4e48\u4f60\u8fde\u5947\u5076\u6027\u90fd\u65e0\u6cd5\u4fdd\u8bc1\u76f8\u540c\uff0c\u4f60\u80fd\u4fdd\u8bc1\u56fe\u76f8\u540c\u5417\uff1f\n\n\u6240\u4ee5\u5224\u65ad\u9006\u5e8f\u5bf9\u5947\u5076\u6027\uff0c\u5c31\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u65f6\u95f4\u3002\uff08~~\u867d\u7136\u8fd9\u9053\u9898\u4e0d\u9700\u8981\uff0c\u4f46\u662f\u53ef\u4ee5\u7ec3\u4e00\u4e0b\u601d\u7ef4\u7801~~\uff09\n**\u800c\u4e14\u4e00\u5171\u53ea\u67099\u4e2a\u6570\uff0c\u6c42\u9006\u5e8f\u5bf9\u5c31\u4e0d\u9700\u8981\u7279\u522b\u9ad8\u7ea7\u7684\u7b97\u6cd5\u6765\u6c42**\uff0c**\u4ec0\u4e48\u5f52\u5e76\uff0c\u6811\u72b6\u6570\u7ec4\u90fd\u4e0d\u9700\u8981\u5566**\uff08\u6240\u4ee5\u9006\u5e8f\u5bf9\u4f18\u5316\u81ea\u5df1\u6253\u5427\uff09\n\n\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u7684\u601d\u8def\uff08~~\u96be\u5f97\u6253\u4e86\u90a3\u4e48\u4e45\uff0c\u7ed9\u4e2a\u8d5e\uff1f~~\uff09[\u6302\u4e2a\u535a\u5ba2](http://www.luogu.org/blog/nono123/)\n",
        "postTime": 1556693706,
        "uid": 69921,
        "name": "nono123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "##  A* \u505a\u6cd5\n\n - \u4ec0\u4e48\u4e3aA*\n \n   \u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u201c\u76ee\u6807\u72b6\u6001\u201d\uff08\u5982\u516b\u6570\u7801\u4e2d\u7684\u76ee\u6807\u72b6\u6001\uff09\uff0c\u9700\u8981\u6c42\u51fa\u4ece\u51fa\u53f0\u5230\u76ee\u6807\u72b6\u6001\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u90a3\u4e48BFS\u751a\u81f3\u4f18\u5148\u961f\u5217BFS\u90fd\u4e0d\u591f\u5b8c\u5584\uff0c\u591a\u4f59\u7684\u72b6\u6001\u591a\u8fc7\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u8fc7\u6162\uff0cTLE\u3002\u4e00\u4e2a\u72b6\u6001\u7684\u5f53\u524d\u4ee3\u4ef7\u6700\u5c0f\uff0c\u4f46\u4e0d\u610f\u5473\u7740\u4ee5\u540e\u8fd9\u4e2a\u72b6\u6001\u90fd\u4fdd\u6301\u6700\u4f18\uff0c\u5176\u4ed6\u72b6\u6001\u53ef\u80fd\u4f1a\u6210\u4e3a\u6700\u4f18\u89e3\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5230**\u4f30\u8ba1\u51fd\u6570**\u6765\u6c42\u6c42\u89e3\u4e86\uff0c\u4fdd\u6301\u73b0\u5728\u6700\u4f18\u4ee5\u53ca\u672a\u6765\u4f30\u8ba1\u6700\u4f18\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684A*\u7b97\u6cd5\u3002\n   \n - \u57fa\u672c\u51c6\u5219\n \n \t\u56e0\u4e3aA*\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u542f\u53d1\u5f0f\u7b97\u6cd5\uff0c\u6240\u4ee5\u6ca1\u6709\u4ec0\u4e48\u56fa\u5b9a\u7684\u5957\u8def\u3002\n    \n    \u4f46\u6709\u57fa\u672c\u51c6\u5219\uff1a\n    \u8bbe\u5f53\u524d\u72b6\u6001state\u5230\u76ee\u6807\u72b6\u6001\u6240\u9700\u4ee3\u4ef7\u7684\u4f30\u8ba1\u503c\u4e3af(state)\u3002\n    \n    \u8bbe\u5728\u672a\u6765\u641c\u7d22\u4e2d\uff0c\u5b9e\u9645\u6c42\u51fa\u7684\u4ece\u5f53\u524d\u72b6\u6001state\u5230\u76ee\u6807\u72b6\u6001\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e3ag(state).\n    \n    \u5bf9\u4e8e\u4efb\u610f\u7684state\uff0c\u5e94\u6709f(state)\u2264g(state)\u3002\n    \n    \u8bc1\u660e\u8bf7\u53c2\u7167lyd\u7684\u7b97\u6cd5\u8fdb\u9636\u6307\u5357\u3002\n    \n \n - \u601d\u8def\n \n \t\u5c31\u662f\u5f53\u524d\u79fb\u52a8\u6b21\u6570dis+\u5f53\u524d\u72b6\u6001\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5230\u76ee\u6807\u72b6\u6001\u7684\u4f4d\u7f6e\u7684\u66fc\u54c8\u987f\u8ddd\u79bb,\u6bcf\u6b21\u53d6\u51fa\u5806\u9876(\u4ee5\u5806\u9876\u7684\u4f30\u8ba1\u51fd\u6570+dis\u4e3a\u5173\u952e\u9879)\uff0c\u5c31\u53ef\u4ee5~~\u6c42\u51fa\u6700\u77ed\u6b21\u6570\u4e86~~\u3002\n \n - \u4ee3\u7801\u6bd4\u8f83\u5197\u6742\uff08~~\u8bf7\u8f7b\u55b7~~)\n ```cpp\n #include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int dx[4]={0,1,-1,0};\nconst int dy[4]={1,0,0,-1};\nint d[9];\nvoid pre()\n{\n    d[0]=1;for(int i=1;i<=8;i++)d[i]=d[i-1]*i;\n}\nstruct node\n{\n    int dis,f,k,x,y,ans;\n    int a[5][5];\n    node(){dis=k=f=0;memset(a,0,sizeof(a));x=y=0;}\n    bool operator <(const node &a)const{return f==a.f?dis>a.dis:f>a.f;}//\u91cd\u6784\u5c0f\u6839\u5806 \n    inline void kt()//\u5eb7\u6258\u5c55\u5f00 \n    { \n        k=0;\n        int b[20],len=0;\n        for(int i=1;i<=3;i++)for(int j=1;j<=3;j++)b[++len]=a[i][j]+1;//\u76f8\u5f53\u4e8e\u5c06\u4e00\u4e2a3*3\u7684\u56fe\u6392\u6210\u4e00\u884c\uff1b \n        bool bo[20];memset(bo,false,sizeof(bo));//\u521d\u59cb\u5316 \n        //\u7edf\u8ba1\u5f53\u524d\u8fd9\u4e2a\u662f\u7b2c\u51e0\u4e2a\u5eb7\u6258\u6392\u5217 \n        for(int i=1;i<=9;i++)\n        {\n            for(int j=1;j<b[i];j++)\n            {\n                if(bo[j]==false)\n                {\n                    k+=d[9-i];\n                }\n            }\n            bo[b[i]]=true;\n        } \n    }\n    inline void find_f(const node &ed)//A*\u7684\u4f30\u8ba1\u51fd\u6570f \n    {\n        int x1=1,y1=1;bool ap[10];memset(ap,false,sizeof(ap));\n        f=dis;\n        while(x1<=3)\n        {\n            if(y1==4)x1++,y1=1;\n            bool bk=true;\n            for(int i=1;i<=3;i++)\n            {\n                for(int j=1;j<=3;j++)\n                {\n                    if(ap[ed.a[i][j]])continue;\n                    if(ed.a[i][j]==a[x1][y1])\n                    {\n                        f+=abs(x1-i)+abs(y1-j);ap[a[x1][y1]]=true;\n                        y1++;\n                        bk=false;\n                        break;\n                    }\n                }\n                if(bk==false)break;\n            }\n        }\n    }\n};\nnode st,ed;\npriority_queue<node>q;\nbool v[510000];\nint main()\n{\n    pre();\n    memset(v,false,sizeof(v));\n    for(int i=1;i<=3;i++)\n    {\n        for(int j=1;j<=3;j++)\n        {\n        \tchar c=getchar();\n            st.a[i][j]=c-'0';if(st.a[i][j]==0){st.x=i,st.y=j;}\n        }\n    }\n    ed.a[1][1]=1;ed.a[1][2]=2;ed.a[1][3]=3;\n\ted.a[2][1]=8;ed.a[2][2]=0;ed.a[2][3]=4;\n\ted.a[3][1]=7;ed.a[3][2]=6;ed.a[3][3]=5;\n\ted.x=2,ed.y=2;\n    st.kt();ed.kt();\n    if(st.k==ed.k){printf(\"0\\n\");return 0;}\n\tv[st.k]=true;st.dis=0;st.find_f(ed);\n    q.push(st);\n    while(!q.empty())\n    {\n        node t=q.top();\n        q.pop(); \n        for(int i=0;i<4;i++)\n        {\n            node now=t;\n\t\t\tint x=now.x+dx[i],y=now.y+dy[i];\n            if(x<1||x>3||y<1||y>3)continue;\n            int tw=now.a[now.x][now.y];now.a[now.x][now.y]=now.a[x][y];now.a[x][y]=tw;\n            now.x=x,now.y=y;\n            now.dis++;\n            now.kt();\n            if(v[now.k])continue;\n            now.find_f(ed);\n            v[now.k]=true;\n\t\t\tif(now.k==ed.k){printf(\"%d\\n\",now.dis);return 0;}\n            q.push(now);\n        }\n    }\n    return 0;\n}\n ```\n AC:189ms\n \n",
        "postTime": 1545804058,
        "uid": 106232,
        "name": "_Sein",
        "ccfLevel": 0,
        "title": "\u516b\u6570\u7801\u96be\u9898"
    },
    {
        "content": "# \u516b\u6570\u7801\n## \u975e\u5e38\u7ecf\u5178\u7684\u4e00\u9053\u9898\n\n** \u524d\u9762\u51e0\u4e2a\u5927\u4f6c\u5df2\u7ecf\u8bf4\u4e86\u4e3b\u8981\u601d\u8def **\n\n~~\u6211\u8fd9\u4e2a\u849f\u84bb\u53ea\u80fd\u641e\u641e\u4f18\u5316~~\n\n\u4f46\u662f\u4f18\u5316\u662f\u53ef\u4ee5\u66b4\u529b\u51fa\u5947\u8ff9\u7684\n\n~~\u867d\u7136\u672c\u6765\u5c31\u662f\u4e00\u4e2a\u66b4\u529b\u7684\u9898~~\n\n\n\n------------\n\n\n\n#### 1.   \t\u8003\u8651\u7a7a\u95f4\u4f18\u5316\n\t\u9996\u5148\u516b\u6570\u7801\u7684\u77e9\u9635\u75289\u4e2aint\u6709\u70b9\u6d6a\u8d39\u7a7a\u95f4\n \t9\u4e2a\u6570\u5b57\u90fd\u662f0\u52309\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b58\u5c31\u884c\u4e86\n \t\u5206\u522b\u653e\u5230\u6bcf\u4e00\u4e2a\u6570\u4f4d\u91cc\n \t\u5728\u77e9\u9635\u548cint\u4e4b\u95f4\u8f6c\u5316\u5c31\u884c\u4e86\n \t\u9644\u4e0a\u8fa3\u9e21\u4ee3\u7801\n\n```cpp\n//#define I int\n//#define fo(i,a,b) for(I i=a;i<b;++i)\n//defeine FO(i,a,b) for(I i=a;i<=b;++i)\nstruct ED{\n    short a[3][3];\n};\nstruct EE{\n    int v;\n    int id;\n    EE(I a=0,I b=0):v(a),id(b){}\n};\nstruct D{\n\tI x;\n\tI y;\n}dd[]={{0,1},{1,0},{-1,0},{0,-1}};\nI d[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\n\nI toint(ED x){\n    I a=0;\n    fo(i,0,9){\n        a+=x.a[i/3][i%3]*d[i];\n    }\n    return a;\n}\nED toju(I x){\n    ED s;\n    fo(i,0,9){\n        s.a[i/3][i%3]=x/d[i]%10;\n    }\n    return s;\n}\n```\n\ttoint \u548c toju \u5b9e\u73b0\u5728\u77e9\u9635\u548cint\u7684\u8f6c\u5316\n\td\u6570\u7ec4\u5904\u7406\u51fa10\u7684i\u6b21\u5e42\uff0c\u65b9\u4fbf\u4f7f\u7528\n\tEE\u7ed3\u6784\u91cc\u7684ID\u662f\u641c\u7d22\u6df1\u5ea6\uff0cv\u662f\u8f6c\u6362\u6210int\u7684\u77e9\u9635\n#### 2. \u8003\u8651\u5224\u91cd\n\t\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u5143\u7d20\u5165\u961f\uff0c\u9700\u8981\u5224\u91cd\uff0c\u600e\u4e48\u5224\uff1fbool\u6570\u7ec4\uff1f\n\t0-9\u7684\u6570\u5b57\u4e00\u5171\u67099876543210\u4e2a bool\u6570\u7ec4\u5f00\u4e0d\u4e0b\uff0c\u600e\u4e48\u529e\uff1f\n    \u7528\u54c8\u5e0c\uff01\n    \u53ef\u4ee5\u7528STL\u7684unordered_map\n    \u4e5f\u53ef\u4ee5\u81ea\u5df1\u5199\u54c8\u5e0c\n   ~~\u53cd\u6b63\u4e71\u641e\u5c31\u662f\u4e86~~\n    \n #### 3.BFS\u5b9e\u73b0\n \t\u76f4\u63a5\u4e0a\u4ee3\u7801\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<cstring>\n#include<queue>\n#include<unordered_map>\n#define IL inline\n#define R register\n#define I int\n#define OP operator\n#define CT const\n#define FUCK friend\n#define FO(i,a,b) for(I i=a;i<=b;++i)\n#define fo(i,a,b) for( I i=a;i<b;++i)\n#define ll long long\nCT I goal = 123804765;\ntypedef bool QWQ;\nusing namespace std;\nstruct ED{\n    short a[3][3];\n};\nstruct EE{\n    int v;\n    int id;\n    EE(I a=0,I b=0):v(a),id(b){}\n};\nstruct D{\n\tI x;\n\tI y;\n}dd[]={{0,1},{1,0},{-1,0},{0,-1}};\nI d[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\n\nI toint(ED x){\n    I a=0;\n    fo(i,0,9){\n        a+=x.a[i/3][i%3]*d[i];\n    }\n    return a;\n}\nED toju(I x){\n    ED s;\n    fo(i,0,9){\n        s.a[i/3][i%3]=x/d[i]%10;\n    }\n    return s;\n}\nqueue< EE >q;\nunordered_map<I,I> mp;\nI fir;\nI main(){\n    scanf(\"%d\",&fir);\n    q.push(EE(fir,0));\n    while(!q.empty()){\n            EE x=q.front();q.pop();\n            if(mp.count(x.v))continue;\n            mp[x.v]=1;\n            if(x.v==goal){\n                cout<<x.id<<endl;\n                return 0;\n            }else{\n                ED xx=toju(x.v);\n                fo(i,0,3){\n                    fo(j,0,3){\n                        if(xx.a[i][j]==0)\n                            fo(k,0,4){\n                                I fx,fy;\n                                fx=i+dd[k].x;\n                                fy=j+dd[k].y;\n                                if(fx<0||fy<0||fx>=3||fy>=3)\n\t\t\t\t\t\t\t\t{\n                                    continue;\n                                }else{\n                                \tED xxxx=xx;\n                                    swap(xxxx.a[i][j],xxxx.a[fx][fy]);\n                                    I xxx=toint(xxxx); \n\t                                q.push(EE(xxx,x.id+1));\n                                }\n                            }\n                \t }\n           \t\t}\n\t\t\t}\t\n       }\n    return 0;\n}\n```\n~~\u5927\u62ec\u53f7\u592a\u6076\u5fc3\u4e86\uff0c\u4e0d\u8c03\u4e86~~\n\n\t\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86",
        "postTime": 1525476791,
        "uid": 88127,
        "name": "enceladus",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u554a\uff01\uff01\u8fd9\u4e00\u9898\u7b97\u662fBFS\u4e2d\u7684\u7ecf\u5178\u4e86\uff0c\u5982\u679c\u4f60\u4e0d\u61c2BFS\u7684\u8bdd\uff0c\u53ef\u4ee5\u7761\u89c9\u4e86~~~\n\n\u554a\uff01\uff01\u73b0\u5728\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u601d\u8def\n\n1.\u4f7f\u75283\\*3\u7684\u6570\u7ec4\u5b58\u50a8\uff0c\u64cd\u4f5c\u5341\u5206\u7b80\u5355\uff0c\u4f46\u4f1a\u8d85\u65f6\u5f88\u591a\u70b9\uff0c\u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u4e00\u4e0b\uff1b\n\n2.\u7a0b\u5e8f\u4e2d\u75283\\*3\u7684\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u5e03\u5c40\u6bd4\u8f83\u76f4\u89c2\uff0c\u4f46\u5728\u5224\u65ad\u91cd\u590d\uff0c\u5224\u65ad\u662f\u5426\u8fbe\u5230\u76ee\u6807\u65b9\u9762\uff0c\u5374\u7ed9\u7a0b\u5e8f\u589e\u52a0\u4e86\u590d\u6742\u6027\uff0c\u4e5f\u5f71\u54cd\u4e86\u8fd0\u884c\u901f\u5ea6\u3002\u53ef\u4ee5\u6539\u7528\u5b57\u7b26\u4e32\u5f62\u5f0f\u6765\u8868\u793a\u5e03\u5c40\uff0c\u7b2c1..3\u4e2a\u6570\u8868\u793a\u7b2c\u4e00\u884c\u7684\u4e09\u4e2a\u6570\uff0c\u7b2c4..6\u4e2a\u6570\uff0c\u8868\u793a\u7b2c\u4e8c\u884c\u7684\u4e09\u4e2a\u6570\uff0c\u7b2c7..9\u4e2a\u6570\u8868\u793a\u7b2c\u4e09\u884c\u7684\u4e09\u4e2a\u6570\u3002\u8fd9\u6837\uff0c\u7a0b\u5e8f\u7684\u5224\u65ad\u548c\u5224\u91cd\u53ef\u4ee5\u65b9\u4fbf\u5f88\u591a\u3002\n\n\u4f46\u5982\u5224\u91cd\u65f6\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u5b58\u4e0b\u6240\u6709\u60c5\u51b5\u7684\u6570\u7ec4\uff0c\u90a3\u4e5f\u80fd\u62ff10\u5206\u3002\n\n\u5982\uff1a10\u5206\u4ee3\u7801\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<string>\nusing namespace std;\nint hash1=1,f[51000];\nstring go,to,hashb[51000],ans[51000];\nint h=0,t=1;\nint a[4]={1,-1,0,0},\n    b[4]={0,0,1,-1};\nint out(int t)\n{  int s=0;\n    do{s++;\n      t=f[t];\n    }while(f[t]!=0);\n        return s;\n}\nint pz(int n)\n{\n    for(int i=1;i<=n;i++) \n      if(hashb[i]==ans[h]) return 0;\n      return 1;\n}\nint bfs()\n{  \n    ans[1]=go;f[1]=0;\n    do{int i;\n    \n        h++;\n        for( i=0;i<=8;i++)\n          if(ans[h][i]=='0') break;\n         for(int x=0;x<4;x++)\n         {\n                int nowx,nowy,tox,toy,wz;\n                nowx=i/3+1;\n                nowy=i%3+1;\n                tox=nowx+a[x];\n                toy=nowy+b[x];\n                wz=(tox-1)*3+toy-1;\n                if(tox>=1&&tox<=3&&toy>=1&&toy<=3&&wz>=0&&wz<=8&&nowx>=1&&nowx<=3&&nowy>=1&&nowy<=3)\n                {\n                    char c;\n                    c=ans[h][wz];\n                    ans[h][wz]=ans[h][i];\n                    ans[h][i]=c;\n                    \n                    if(pz(hash1)==1) {\n                        t++;ans[t]=ans[h];\n                        f[t]=h;\n                        hashb[++hash1]=ans[t];\n                        if(ans[t]==to) {return out(t);}\n                        \n                    \n                     }\n                      c=ans[h][i];\n                        ans[h][i]=ans[h][wz];\n                        ans[h][wz]=c;\n                            \n                        \n                         \n                }\n         }\n        \n     }while(h<t);\n}\nint main()\n{\n    cin>>go;\n    hashb[1]=go;\n    to=\"123804765\";\n    int answer;\n      answer=bfs();\n    printf(\"%d\",answer);\n   \n    return 0;\n}\n```\n\u73b0\u5728\u6211\u4eec\u53d1\u73b0\u5224\u91cd\u7684\u65f6\u5019\u6d6a\u8d39\u4e86\u8bb8\u591a\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4f7f\u7528MAP\u6216\u5eb7\u6258\u5c55\u5f00\n\n100\u5206\uff08MAP\uff09\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<map>\nusing namespace std;\nint hash1=1,f[510000];\nstring go,to,ans[510000];\nint h=0,t=1;\nint a[4]={1,-1,0,0},\n    b[4]={0,0,1,-1};\nmap<string,int>hashb;\nint out(int t)\n{  int s=0;\n    do{s++;\n      t=f[t];\n    }while(f[t]!=0);\n        return s;\n}\nint bfs()\n{  \n    ans[1]=go;f[1]=0;\n    do{int i;\n    \n        h++;\n        for( i=0;i<=8;i++)\n          if(ans[h][i]=='0') break;\n         for(int x=0;x<4;x++)\n         {\n                int nowx,nowy,tox,toy,wz;\n                nowx=i/3+1;\n                nowy=i%3+1;\n                tox=nowx+a[x];\n                toy=nowy+b[x];\n                wz=(tox-1)*3+toy-1;\n                if(tox>=1&&tox<=3&&toy>=1&&toy<=3&&wz>=0&&wz<=8&&nowx>=1&&nowx<=3&&nowy>=1&&nowy<=3)\n                {\n                    char c;\n                    c=ans[h][wz];\n                    ans[h][wz]=ans[h][i];\n                    ans[h][i]=c;\n                    \n                    if(hashb[ans[h]]!=1) {\n                        t++;ans[t]=ans[h];\n                        f[t]=h;\n                        hashb[ans[h]]=1;\n                        if(ans[t]==to) {return out(t);}\n                        \n                    \n                     }\n                      c=ans[h][i];\n                        ans[h][i]=ans[h][wz];\n                        ans[h][wz]=c;\n                            \n                        \n                         \n                }\n         }\n        \n     }while(h<t);\n}\nint main()\n{\n    cin>>go;\n    hashb[go]=1;\n    to=\"123804765\";\n    int answer;\n      answer=bfs();\n    printf(\"%d\",answer);\n   \n    return 0;\n}\n```",
        "postTime": 1508665784,
        "uid": 33339,
        "name": "Zcus",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "/\\*\u8fd9\u9053\u9898\u4e00\u5f00\u59cb\u7528\u7684\u662fmap\u5224\u91cd\uff0cTLE\u4e86\u4fe9\u70b9\u3002\u7136\u540e\u6539hash\uff0c\u5168WA\u4e86\uff0c\u611f\u89c9\u6211\u81ea\u5df1\u5199hash\u9009\u6a21\u6570\u9760\u8fd0\u6c14\u3002\n\n\u7136\u540e\u4e0d\u5199hash\u4e86\uff0c\u5199\u8fdb\u5236\u4f4d\uff0cAC\u4e86\uff0c\u56e0\u4e3a\u77e5\u9053\u4e86\u524d\u516b\u4f4d\u6570\u540e\uff0c\u7b2c\u4e5d\u4f4d\u5c31\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u53ea\u6c42\u524d\u516b\u4f4d\u6570\u7684\u548c\u5c31\u53ef\u4ee5\u3002\n\n\u697c\u4e0b\u5199\u7684\u662f\u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\uff0c\u6211\u5199\u7684\u662f\u5b57\u7b26\u4e32\u8f6c\u56fe\u6765\u6269\u5c55\u72b6\u6001\uff0c\u7136\u540e\u518d\u5c06\u5408\u6cd5\u89e3\u8f6c\u5b57\u7b26\u4e32\u52a0\u5165\u641c\u7d22\u72b6\u6001\u4e2d\u5e76\u5728\u8f6c\u5316\u8fc7\u7a0b\u4e2d\u5224\u91cd\u3002\n\n\\*/\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<string> \n#include<queue>\nusing namespace std;\nint pos,x,y,ans;\nint sum;\nstring s;\nchar a[4][4];\nstruct state    //\u8bb0\u5f55\u641c\u7d22\u72b6\u6001 \n{\n    string s;    //\u5b57\u7b26\u4e32\u8868\u72b6\u6001 \n    int step;    //\u5230\u8fbe\u8fd9\u4e2a\u72b6\u6001\u9700\u8981\u51e0\u6b65 \n}now,temp;\nbool flag[88888888];    //\u516b\u4f4d\u6570\u5224\u91cd \nqueue<state> que;        //\u641c\u7d22\u7528\u7684\u961f\u5217 \nint cx[4]={-1,0,1,0};    //\u6539\u65b9\u5411\u7528\u7684\u6570\u7ec4 \nint cy[4]={0,1,0,-1};\nvoid mswap(char &a,char &b)        //\u624b\u5199swap \n{\n    char c;\n    c=a;a=b;b=c;\n    return;\n}\nstring change()        //\u5c06\u56fe\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\uff0c\u987a\u4fbf\u6c42\u524d\u516b\u4f4d\u6570\u7684\u548c \n{\n    sum=0;\n    string s;\n    for(int i=1;i<=3;i++)\n    {\n        for(int j=1;j<=3;j++)\n        {\n            s+=a[i][j];\n            if(!(i==3&&j==3)) sum=sum*10+a[i][j]-'0';    //\u6c42\u524d\u516b\u4f4d\u6570 \n        }\n    }\n    return s;\n}\nvoid bfs()\n{\n    while(!que.empty())\n    {\n        pos=0;\n        now=que.front();que.pop();\n        for(int i=1;i<=3;i++)    //\u8f6c\u5316\u6210\u4e00\u4e2a3*3\u7684\u77e9\u9635 \n        {\n            for(int j=1;j<=3;j++)\n            {\n                if(now.s[pos]=='0') x=i,y=j;\n                a[i][j]=now.s[pos++];\n            }\n        }\n        for(int i=0;i<4;i++)    //\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u627e \n        {\n            if(x+cx[i]>0&&x+cx[i]<4&&y+cy[i]>0&&y+cy[i]<4)\n            {\n                mswap(a[x][y],a[x+cx[i]][y+cy[i]]);        //\u6362\u4f4d \n                temp.s=change();    //\u5c06\u56fe\u8f6c\u5316\u6210\u5b57\u7b26\u4e32\uff0c\u5224\u91cd \n                if(temp.s==\"123804765\")        //\u5230\u8fbe\u4e86\u76ee\u6807\u72b6\u6001\uff0c\u8f93\u51fa\u7b54\u6848 \n                {\n                    printf(\"%d\",now.step+1);\n                    return;\n                }\n                if(!flag[sum])        //\u5f53\u524d\u72b6\u6001\u6ca1\u51fa\u73b0\u8fc7\uff0c\u6dfb\u52a0\u72b6\u6001 \n                {\n                    flag[sum]=1;\n                    temp.step=now.step+1;\n                    que.push(temp);\n                }\n                mswap(a[x][y],a[x+cx[i]][y+cy[i]]);        //\u518d\u6362\u56de\u6765 \n            }\n        }\n    }\n}\nint main()\n{\n    cin>>s;\n    now.s=s;now.step=0;\n    que.push(now);\n    for(int i=0;i<8;i++)    //\u521d\u59cb\u72b6\u6001\u5224\u91cd \n    {\n        sum=sum*10+s[i]-'0';\n    }\n    flag[sum]=1;\n    bfs();\n    return 0;\n}\n```",
        "postTime": 1502491824,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u597d\u591a\u5927\u4f6c\u7528\u7684BFS\uff0c\u672c\u849f\u84bb\u9ed8\u9ed8\u6765\u4e00\u53d1\u8fed\u4ee3\u6df1\u641c\n\n\u6211\u4eec\u628a\u79fb\u52a8\u68cb\u5b50\u770b\u4f5c\u79fb\u52a8\u7a7a\u683c\uff0c\u8fd9\u6837\u65b9\u4fbf\u5199\uff0c\u5728dfs\u7684\u65f6\u5019\u52a0\u4e00\u4e2a\u6df1\u5ea6\u9650\u5236\uff0c\u907f\u514d\u9012\u5f52\u5c42\u6570\u8fc7\u591a\uff0c\u76ee\u6807\u72b6\u6001\u6253\u4e2a\u8868\uff0c\u6bcf\u6b21\u79fb\u52a8\u5224\u5b9a\u4e00\u4e0b\uff0c\u8fd8\u8981\u6ce8\u610f\u79fb\u52a8\u7a7a\u683c\u65f6\u4e0d\u8981\u5f80\u56de\u8d70\u4e86\uff0c\u4e00\u65e6\u4e0e\u76ee\u6807\u72b6\u6001\u76f8\u540c\uff0c\u8f93\u51fa\u6df1\u5ea6-1(\u6b65\u6570)\u5373\u53ef\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <string>\n#include <cstdlib>\n#include <algorithm>\n\nusing namespace std;\nint deep;\nint dx[5]={0,-1,1,0};\nint dy[5]={1,0,0,-1};\nchar m[5][5];\nchar mb[4][4]={\n{},\n0,'1','2','3',\n0,'8','0','4',\n0,'7','6','5'\n};\nbool dfs(int step,int x,int y,int last,int sum)\n{\n    if (step+sum>deep)return false;\n    if (!sum)return true;\n    int p;\n    for (int k=0;k!=4;++k)\n    {\n        if (k!=(3-last))\n        {\n            p=sum;\n            int xx=x+dx[k],yy=y+dy[k];\n            if (xx<=0||yy<=0||xx>3||yy>3)continue;\n            if (m[xx][yy]==mb[xx][yy]&&m[xx][yy]!=mb[x][y])++p;\n            if (m[xx][yy]!=mb[xx][yy]&&m[xx][yy]==mb[x][y])--p;\n            if (mb[xx][yy]=='0')--p;\n            if (mb[x][y]=='0')++p;\n            swap(m[xx][yy],m[x][y]);\n            if (dfs(step+1,xx,yy,k,p))return true;\n            swap(m[xx][yy],m[x][y]);\n        }\n    }\n    return false;\n}\n\nint main()\n{\n    int x,y;\n    int sum=0;\n    for (int i=1;i<=3;++i)\n    {\n        for (int j=1;j<=3;++j)\n        {\n            m[i][j]=getchar();\n            if (m[i][j]=='0')\n            {\n                x=i;\n                y=j;\n            }\n            if (m[i][j]!=mb[i][j])\n            ++sum;\n        }\n    }\n    for (deep=1;;++deep)\n    {\n        if (dfs(0,x,y,-1,sum))\n        {\n            printf(\"%d\",deep-1);\n            break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1531815697,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "# A\\*\u7b97\u6cd5\n\n\u5728\u8fd9\u91cc\uff0c\u53ea\u8bb2\u4e00\u4e0bA\\*\u7684\u505a\u6cd5\uff0c\u5c31\u4e0d\u8bb2A\\*\u7684\u539f\u7406\u4e86\u6bd5\u7adf\u539f\u7406\u592a\u591a\u4e86\uff0c\u6709\u9700\u6c42\u7684\u53ef\u4ee5\u6233[\u8fd9\u91cc](http://www.cnblogs.com/xiaotuzi/p/6491491.html)\n\n\u601d\u8def\uff1aA\\*\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u526a\u679d\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9700\u8981\u4e00\u4e2a\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f30\u4ef7\u51fd\u6570\uff1a\n\n**\u5f53\u524d\u72b6\u6001\u7684\u4f30\u4ef7\u51fd\u6570\u662f\u5f53\u524d\u5728\u72b6\u6001\u7406\u60f3\u60c5\u51b5\u4e0b\u5230\u8fbe\u76ee\u6807\u72b6\u6001\u7684\u4ee3\u4ef7\uff1b **\n\n\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u8d70\u4e86g\u6b65\uff0c\u4f30\u4ef7\u4e3aH\u6b65\uff0c \u7136\u540e\u6211\u4eec\u8fed\u4ee3\u52a0\u6df1\u679a\u4e3e\u7684k\u6b65(k\u4ece0\u5f00\u59cb\u679a\u4e3e\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u9884\u5148\u7279\u5224\u65e0\u89e3\u60c5\u51b5\uff0c\u5f53\u7136\u53ef\u4ee5\u6390\u79d2)\uff1b\n\n\u5982\u679cg+H>k\uff0c\u663e\u7136\u5c31\u4e0d\u80fd\u7ee7\u7eed\u4e86\u3002\\(^o^)/\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff1b\n\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48A\\*\u662fdfs\u4e0d\u662fbfs\uff0c\u56e0\u4e3abfs\u6ca1\u6709\u4e00\u4e2a\u786e\u5b9a\u7684k\uff0c\u800cdfs\u7684k\u6211\u4eec\u662f\u679a\u4e3e\u7684\uff0c\u81f3\u4e8e\u8fd9\u6837\u7684\u8bdd\u6709\u5f88\u591a\u7684\u91cd\u590d\u3002\n\n\u56e0\u4e3a\u5047\u5982\u7b54\u6848\u662f4\uff0c \u90a3\u4e48k=0~3\u65f6\u7684\u641c\u7d22\u662f\u65e0\u7528\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u9762\u663e\u7136k\u4e0d\u662f\u5f88\u5927\uff0c\u800c\u4e14\u52a0\u5165k=ans\u7206\u641c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fn\uff1b\n\n\u90a3\u4e48k=0~ans\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7c7b\u4f3c\u4e0en\\*n\uff0c\u867d\u7136\u8fd9\u6837\uff0c\u8fd8\u662f\u6bd4\u76f4\u63a5\u66b4\u529b\u597d\uff0c\u90a3\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u628ak-1\u7684\u6240\u6709g==k,g==k-1\u7684\u72b6\u6001\u5b58\u4e0b\u6765\u5462??\n\n\u597d\u50cf\u5f88\u9ebb\u70e6\u6b38\uff0c\u5f53\u7136\u55bdk\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206?(\u5728\u8fd9\u91cc\uff0c\u6211\u53ea\u63d0\u4f9b\u8fd9\u4e9b\u4f18\u5316\u601d\u8def\uff0c\u800c\u6211\u7684\u5c31\u662f\u6700\u6734\u7d20\u7684\u55bd)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint ans,num[4][4];\nint n,m,x,y,z,X,Y;\nint dx[4]={0,1,-1,0};\nint dy[4]={1,0,0,-1};\nint fx[11]={0,1,1,1,2,3,3,3,2};\nint fy[11]={0,1,2,3,3,3,2,1,1};\nint H(){\n    int bns=0;\n    for(int i=1;i<=3;i++)\n        for(int j=1;j<=3;j++)\n            if(num[i][j])\n                bns+=abs(i-fx[num[i][j]])+abs(j-fy[num[i][j]]);\n    return bns;\n}\nvoid dfs(int k,int X,int Y,int g){\n    int h=H();\n    if(!h){\n        ans=g;\n        return ;\n    }\n    if(h+g>k||ans||g==k)    return ;\n    for(int i=0;i<4;i++){\n        int x=dx[i]+X;\n        int y=dy[i]+Y;\n        if(x>=1&&y>=1&&x<=3&&y<=3){\n            swap(num[X][Y],num[x][y]);\n            dfs(k,x,y,g+1);\n            swap(num[x][y],num[X][Y]);\n        }\n    }\n}\nint main(){\n    for(int i=1;i<=3;i++)\n        for(int j=1;j<=3;j++){\n            char x;\n            scanf(\"%c\",&x);\n            num[i][j]=x-'0';\n            if(!num[i][j])\n                X=i,Y=j;\n        }\n    for(int k=1;;k++){\n        dfs(k,X,Y,0);\n        if(ans){\n            printf(\"%d\",ans);\n            return 0;\n        }\n    }\n}\n```",
        "postTime": 1503490595,
        "uid": 21719,
        "name": "\u6ca7\u6f9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8f83\u96be\uff0c\u5148\u53d1\u4e2a\u9898\u89e3\u5427\uff01\n\n```cpp\nconst goal='123804765';\nvx:array[1..4] of integer=(1,-1,3,-3);\nmaxn=1200007; \ntype rec=record      s:string[9];      \nstep:longint;      end;      re=record      f:boolean; \ns:string[9];      end;\nvar opt:array[0..maxn] of rec; flag:array[0..maxn] of re; i,j,n,m,x,w,k:longint; v:boolean;  st,y:string[9];\n function lhash(s:string):int64; {\u5c4f\u5f03\u4e86\u5176\u4ed6\u7684\u6240\u6709HASH\u51fd\u6570\uff0c\u56e0\u4e3a\u5176\u4ed6\u7684\u51fd\u6570\u518d\u597d\u90fd\u8981\u6709\u4e00\u4e2aLENGTH\uff08S\uff09\u7684\u5faa\u73af\uff0c\u6709\u53ef\u80fd\u9020\u6210\u8d85\u65f6}   \nvar   hash:int64;   \nbegin   val (s,hash);   \nlhash:=hash mod maxn;   \nend; \nprocedure judge; {\u5224\u65ad\u662f\u5426\u8fbe\u5230\u76ee\u6807\u72b6\u6001}   \nbegin   if opt[m].s=goal then     \nbegin     writeln (opt[m].step);\nhalt;     end;   end; \nbegin readln (st); opt[1].s:=st\uff1b \nopt[1].step:=0; x:=lhash(st); flag[x].f:=true;\nflag[x].s:=st; i:=1; j:=1; while i<=j do   \nbegin   w:=pos ('0',opt[i].s);   \nfor k:=1 to 4 do     \nif ((w mod 3=1) and (k<>2) or ((w mod 3=0)) and (k<>1))or (w mod 3=2) then\nif (w+vx[k]>0) and (w+vx[k]<=9) then       \nbegin       y:=opt[i].s;      {\u72b6\u6001\u521d\u59cb\u5316}\ny[w]:=y[w+vx[k]];       y[w+vx[k]]:='0';       x:=lhash(y);       v:=false;      \nwhile (x<maxn) and (flag[x].f) do   \nbegin         if flag[x].s=y then          \nbegin           v:=true;           break;\nend;         inc (x);\nend;       if not v then    {\u751f\u6210\u72b6\u6001}      \nbegin         inc (j);\nm:=j mod maxn;        opt[m].s:=y;      opt[m].step:=opt[i].step+1;        \nflag[x].f:=true;         flag[x].s:=y;        judge;         end; \nend;  inc (i);   end; end.\n\u7406\u89e3\u4e86\u518d\u7092\uff0c\u6211\u4e5f\u60f3\u4e86\u5f88\u4e45\u7684\uff08\u5907\u6ce8\u81ea\u5df1\u5220\u5427\uff01\uff09\n```",
        "postTime": 1428215378,
        "uid": 5057,
        "name": "XiXi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u672c\u9898\u6709\u5199\u6cd5\u597d\u51e0\u4e2a\u5199\u6cd5\uff0c\u4f46\u4e3b\u8981\u601d\u8def\u662fBFS\uff1a\n\n\n##No\u30021\n\n\n\u91c7\u7528\u53cc\u5411\u5bbd\u641c\uff0c\u5206\u522b\u4ece\u8d77\u59cb\u6001\u548c\u7ed3\u675f\u6001\u8fdb\u884c\u5bbd\u641c\uff0c\u66b4\u529b\u5224\u91cd\u3002\u5982\u679c\u53ea\u8fdb\u884c\u5355\u5411\u4f1a\u8d85\u65f6\u3002\n\n\n##No\u30022\n\n\n\u91c7\u7528hash\u8fdb\u884c\u5224\u91cd\uff0c\u5bbd\u641c\u91c7\u7528\u5355\u5411\u5c31\u53ef\u4ee5AC\u3002\n\n\n##No\u30023\n\n\n\u8fd0\u7528\u5eb7\u62d3\u5c55\u5f00\u8fdb\u884c\u5224\u91cd\uff0c\u5373\u4f7f\u91c7\u7528\u5355\u5411\u5bbd\u641c\u65f6\u95f4\u6548\u7387\u4e5f\u5f88\u9ad8\u3002\n",
        "postTime": 1375601156,
        "uid": 277,
        "name": "plane",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u60f3\u6cd5\u80af\u5b9a\u662fBFS\u4f46\u4f1aTLE\uff0864\u5206\uff09\uff0c\u8003\u8651\u4f18\u5316\n\n\u672c\u4eba\u5229\u7528\u4e86A*\u8fdb\u884c\u4e86\u4f18\u5316\n\nA*\u7684\u601d\u8def\u662f\u5bf9\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u76ee\u6807\u72b6\u6001\u7684\u6700\u5c0f\u82b1\u8d39\u8fdb\u884c\u9884\u4f30\uff08\u5373\u4f30\u503c\u51fd\u6570\uff09\uff0c\u5219\u4ece\u521d\u59cb\u72b6\u6001\u5230\u8be5\u72b6\u6001\u7684\u6700\u5c0f\u5316\u8d39\u52a0\u4e0a\u8be5\u4f30\u503c\u5c31\u662f\u4ece\u521d\u59cb\u72b6\u6001\u7ecf\u8fc7\u8be5\u72b6\u6001\u5230\u76ee\u6807\u72b6\u6001\u7684\u82b1\u8d39\u6700\u5c0f\u503c\u7684\u4f30\u503c\uff0c\u6bcf\u6b21\u62d3\u5c55\u4f30\u503c\u6700\u5c0f\u7684\uff0c\u53ef\u5229\u7528\u4f18\u5148\u961f\u5217\u8fdb\u884c\u7ef4\u62a4\uff08\u7c7b\u4f3c\u4e8eDijkstra\u5806\u4f18\u5316\uff09\uff08\u8be6\u60c5\u70b9[\u8fd9\u91cc](https://www.jianshu.com/p/a3951ce7574d)\uff09\n\n\u81f3\u4e8e\u4f30\u503c\u51fd\u6570\u672c\u4eba\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u4f4d\u7f6e\u76ee\u6807\u72b6\u6001\u4e0e\u8be5\u72b6\u6001\u7684\u6570\u4e0d\u4e00\u6837\n```cpp\nint g(const f &a){\n\tint cnt=0;\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\tif(a.g[i][j]!=e.g[i][j])cnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\n```\n\u53bb\u91cd\u7684\u95ee\u9898\u7528set\u89e3\u51b3\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,s,e) for(int i=s;i<=e;i++)\n#define REP(i,s,e) for(int i=s;i>=e;i--)\nint dx[]={0,0,1,-1};\nint dy[]={1,-1,0,0};\nstruct f{\n\tint g[4][4];//\u5b58\u56fe\n\tint w;//\u5230\u8be5\u72b6\u6001\u7684\u8def\u5f84\u957f\n\tint fx(){//\u5bfb\u627e\u7a7a\u683c\n\t\trep(i,1,3)\n\t\t\trep(j,1,3)\n\t\t\t\tif(g[i][j]==0)return i;\n\t}\n\tint fy(){\n\t\trep(i,1,3)\n\t\t\trep(j,1,3)\n\t\t\t\tif(g[i][j]==0)return j;\n\t}\n}p,e;\nint g(const f &a){//\u4f30\u503c\u51fd\u6570\n\tint cnt=0;\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\tif(a.g[i][j]!=e.g[i][j])cnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\nvoid copy(f &a,const f &b){//\u590d\u5236\u961f\u9876\n\ta.w=b.w;\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\ta.g[i][j]=b.g[i][j];\n\t\t}\n\t}\n}\nbool operator == (const f &a,const f &b){//set\u9700\u8981\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\tif(a.g[i][j]!=b.g[i][j])return false;\n\t\t}\n\t}\n\treturn true;\n}\nbool operator < (const f &a,const f &b){//set\u9700\u8981\n\tstring sa,sb;\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\tsa+=a.g[i][j]+'0';\n\t\t\tsb+=b.g[i][j]+'0';\n\t\t}\n\t}\n\treturn sa<sb;\n}\nbool operator > (const f &a,const f &b){//\u4f18\u5148\u961f\u5217\u9700\u8981\n\tint fa=a.w+g(a),fb=b.w+g(b);\n\treturn fa>fb;\n}\nset<f> s;\npriority_queue<f,vector<f>,greater<f> > q;\nint main(){\n\te.g[1][1]=1;e.g[1][2]=2;e.g[1][3]=3;//\u76ee\u6807\u72b6\u6001\n\te.g[2][1]=8;e.g[2][2]=0;e.g[2][3]=4;\n\te.g[3][1]=7;e.g[3][2]=6;e.g[3][3]=5;\n\tp.w=0;\n\tchar c;\n\trep(i,1,3){\n\t\trep(j,1,3){\n\t\t\tcin>>c;\n\t\t\tp.g[i][j]=c-'0';\n\t\t}\n\t}\n\tq.push(p);\n\twhile(!q.empty()){//\u641c\u7d22\n\t\tcopy(p,q.top());q.pop();\n\t\tif(s.count(p))continue;\n\t\ts.insert(p);\n\t\tif(p==e){\n\t\t\tcout<<p.w<<endl;\n\t\t\tbreak;\n\t\t}\n\t\tint x=p.fx(),y=p.fy();\n\t\tp.w++;\n\t\trep(i,0,3){\n\t\t\tif(x+dx[i]<1||x+dx[i]>3||y+dy[i]<1||y+dy[i]>3)continue;\n\t\t\tswap(p.g[x+dx[i]][y+dy[i]],p.g[x][y]);\n\t\t\tif(!s.count(p))q.push(p);\n\t\t\tswap(p.g[x+dx[i]][y+dy[i]],p.g[x][y]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566962460,
        "uid": 136816,
        "name": "hhhwg07",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "#\u672c\u849f\u84bb\u8868\u793aSET\u8fc7\u4e86 \u5374\u628aHASH\u5199TLE\n\n##\u7528set\u5f88\u5bb9\u6613\u7406\u89e3 \u628a\u6bcf\u4e2a\u72b6\u6001\u7528\u4e00\u4e2a\u53d8\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u4e5d\u4f4d\u6570\n\n##\u5982\u679c\u8bbf\u95ee\u8fc7 return false \u5426\u5219\u628a\u8fd9\u4e2a\u72b6\u6001\u52a0\u8fdb\u53bb\n\n##BFS\u5957\u6a21\u677f\u5c31\u597d\u4e86\n\n\u00b7\u00b7\u00b7cpp\n\n\n    \n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <set>\n#define hashsize 1000003\nusing namespace std;\ntypedef int state[9];\nstate st[1000001],goal;\nint mx[4] = {0,0,1,-1};\nint my[4] = {1,-1,0,0};\nint first[100001],next[100001];\nint disit[1000001];\nint head = 1, tail = 2;\nset<int> vis;\nint hash(state&);\nbool insert(int );\nint BFS();\nint main()\n{\n    for(int i = 0; i < 9; i++)\n    scanf(\"%1d\",&st[1][i]);\n    goal[0] = 1;\n    goal[1] =2;\n    goal[2] =3;\n    goal[3] =8;\n    goal[4] =0;\n    goal[5] =4;\n    goal[6] =7;\n    goal[7] =6;\n    goal[8] =5;\n    BFS();\n    cout<<disit[head];\n}\nint BFS()\n{\n    memset(first,0,sizeof(first));\n    while(head < tail)\n    {\n        state& now = st[head];\n        if(memcmp(&now,&goal,sizeof(goal)) == 0) return head;\n        int zero_pos;\n        for(zero_pos = 0; zero_pos < 9; zero_pos++) if(now[zero_pos] == 0) break;     //\u627e\u201c0\u201d \n        int x = zero_pos / 3;                  //\u5750\u6807\u8f6c\u5316 \n        int y = zero_pos % 3;\n        for(int i = 0; i < 4; i++)             //\u5c1d\u8bd5\u4e0a\u4e0b\u5de6\u53f3 \n        {\n            int xx = x + mx[i];\n            int yy = y + my[i];\n            if(xx > 2 || xx < 0 || yy > 2 || yy < 0) continue;\n            int zz = xx * 3 + yy;\n            state& n = st[tail];\n            memcpy(&n,&now,sizeof(now));\n            n[zz] = now[zero_pos];\n            n[zero_pos] = now[zz];             //\u66f4\u65b00\u70b9 \n            disit[tail] = disit[head] + 1;\n            if(insert(tail)) tail++;\n        }\n        head++;\n    }\n}\nint hash(int s)\n{\n    int ans = 0;\n    for(int i = 0; i < 9; i++) ans= ans * 10 + st[s][i];\n    return ans % hashsize;\n}\nbool insert(int s)\n{\n    int v = 0;\n    for(int i = 0; i < 9; i++) v = v*10 + st[s][i];\n    if(vis.count(v)) return false;      //\u82e5\u8bbf\u95ee\u8fc7 \n    vis.insert(v);                      //\u5c06\u8fd9\u4e2a\u72b6\u6001\u52a0\u8fdb\u53bb \n    return true;\n}\n/*bool insert(int s)\n{\n    int val = hash(s);\n    int u = first[val];\n    while(u)\n    {\n        if(memcpy(&st[u],&st[s],sizeof(st[u])) == 0) return false;        // \u5783\u573e\u7684HASH \n        u = next[u];\n    }\n    next[s] = first[val];\n    first[val] = s;\n    return true;\n}*/\n```\n```cpp",
        "postTime": 1510062390,
        "uid": 35900,
        "name": "Fuyang_KBZ",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "/\\*\n\\* P1379\n\n\\* Au\uff1aSmall\\_Ash\n\n\\* \u5927\u5bb6\u51e0\u4e4e\u90fd\u662fbfs+\u54c8\u5e0c\u6216\u8005\u662f\u53cc\u5411bfs+\u54c8\u5e0c\u554a\n\n\\* \u6211\u4e0d\u4f1a\u54c8\u5e0c\u5c31\u5f31\u5f31\u7684\u4e0a\u4e00\u4e2a\u5355\u5411bfs+STL\u7684set\u3002\u3002\u3002\uff08\u8017\u65f6\u5f88\u5927\uff09\n\n\\* \u552f\u4e00\u7684\u597d\u5904\u5c31\u662f\u5b9e\u73b0\u4ee3\u7801\u52a0\u4e0a\u601d\u8003\u7684\u65f6\u95f4\u4ec5\u4ec5\u53ea\u82b1\u4e8620\u6765\u5206\u949f\u3002\u3002\u3002\uff08\u5e9f\u8bdd\u4ee3\u7801\u5c31\u53ea\u670931\u884c\uff09\n\n\\* \u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u56e0\u4e3abfs\u697c\u4e0a\u7684\u5927\u795e\u4eec\u8bb2\u7684\u90fd\u5f88\u8be6\u7ec6\u4e86\uff0c\u6211\u5c31\u53ea\u5bf9set\u505a\u6279\u6ce8\u4e86\n\n\\* \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528set\uff0c\u662f\u5229\u7528\u4e86set\u7684\u7279\u6027\uff0c\u5143\u7d20\u65e0\u5e8f\uff0c\u800c\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\\*/\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <set>\nusing namespace std;\nstring start,end=\"123804765\";\nset <string> v;//\u67d0\u72b6\u6001\u662f\u5426\u88ab\u8bbf\u95ee \nstring q[1000001],fx[9]={\"13\",\"024\",\"15\",\"046\",\"1357\",\"248\",\"37\",\"468\",\"57\"};\nint ql,qr,t[1000001];\nvoid bfs(){\n    while (qr>ql){\n        string s=q[ql]; int temp=t[ql],begin=s.find(\"0\",0); ql++;\n        for (int i=0;i<fx[begin].size();i++){\n            int next=fx[begin][i]-48;string ss=s;\n            char tt=ss[begin]; ss[begin]=ss[next]; ss[next]=tt;\n            if (ss==end) {printf(\"%d\",temp+1); return;}\n            if (v.count(ss)==0){//count \u662f\u8fd4\u56de\u5143\u7d20\u4e2a\u6570\uff0c\u56e0\u4e3aset\u91cc\u4e00\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u6240\u4ee5\u53ef\u4e00\u7406\u89e3\u6210count=1\u65f6\uff0c\u8be5\u60c5\u51b5\u5df2\u88ab\u8bbf\u95ee \n                q[qr]=ss;t[qr]=temp+1;qr++;v.insert(ss);\n            } \n        }\n    }\n    return;\n}\nint main(){\n    cin>>start;\n    if (start==end) printf(\"0\");\n    q[qr]=start;t[qr]=0;qr++;v.insert(start);\n    bfs();\n    return 0;\n}\n\n```",
        "postTime": 1475113780,
        "uid": 745,
        "name": "dph754132771",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u849f\u84bb\u7528\u7684\u662f\u53cc\u5411bfs\u3002\u7531\u4e8e\u672c\u849f\u84bb\u7684\u601d\u8def\u4e0e\u5176\u4ed6\u5927\u4f6c\u6709\u4e9b\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u6253\u51fa\u6765\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint a[10][10],x[5]={0,0,0,1,-1},y[5]={0,1,-1,0,0},l,r;\nmap<int,int>bj,bs;//map\u5b58\u56fe\uff0c\u4e0d\u7528\u62c5\u5fc3\u7206\u7a7a\u95f4\nqueue<int>q1,q2;\nint beg,en=123804765,cnt1,cnt2;\nvoid cf(long long x){//\u62c6\u5206\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u4e5d\u4f4d\u6570\u62c6\u5230\u4e8c\u7ef4\u6570\u7ec4\u91cc\n    for(int i=3;i>=1;--i){\n        for(int j=3;j>=1;--j){\n            a[i][j]=x%10;\n            x/=10;\n            if(a[i][j]==0)l=i,r=j;//\u8bb0\u5f550\u7684\u4f4d\u7f6e\n        }\n    }\n}\nint hb(){//\u5408\u5e76\u51fd\u6570\uff0c\u5c06\u4e8c\u4f4d\u6570\u7ec4\u5408\u5e76\u6210\u4e5d\u4f4d\u6570\n        int s=0;\n        for(int i=1;i<=3;++i)for(int j=1;j<=3;++j)\n            s=s*10+a[i][j];\n    return s;\n}\nint main(){\n    scanf(\"%d\",&beg);\n    bj[beg]=1,bj[en]=2,bs[beg]=0,bs[en]=0;//bs\u662f\u5df2\u7ecf\u8d70\u8fc7\u7684\u6b65\u6570\uff0cbj\u662f\u6807\u8bb0\uff0c\u4ece\u4e0a\u5f80\u4e0b\u641c\u662f1\uff0c\u4ece\u4e0b\u5f80\u4e0a\u641c\u662f2\n    q1.push(beg),q1.push(en);//\u5165\u961f\n    if(beg==en){\n        cout<<0;\n        return 0;\n    }\n    while(!q1.empty()){\n        int p=q1.front();\n        q1.pop();\n        cf(p);\n        for(int ij=1;ij<=4;++ij){\n            if(l+x[ij]>3||l+x[ij]<1||r+y[ij]>3||r+y[ij]<1)continue;\n            swap(a[l][r],a[l+x[ij]][r+y[ij]]);//\u627e\u6240\u6709\u53ef\u80fd\u6027\n            int q=hb();\n            swap(a[l][r],a[l+x[ij]][r+y[ij]]);\n            if(bj[p]==1){//\u4ece\u4e0a\u5f80\u4e0b\u641c\n                if(bj[q]==1)continue;//\u641c\u8fc7\u5c31\u8df3\u8fc7\n                if(bj[q]==2||p==en){//\u5df2\u7ecf\u627e\u5230\u7b54\u6848\uff0c\u8f93\u51fa\n                    printf(\"%d\",bs[q]+bs[p]+1);\n                    return 0;\n                }else{//\u5165\u961f\n                    q1.push(q);\n                    bj[q]=1;\n                    bs[q]=bs[p]+1;\n                }\n            }else{//\u540c\u4e0a\n                if(bj[q]==2)continue;\n                if(bj[q]==1){\n                    printf(\"%d\",bs[p]+bs[q]+1);\n                    return 0;\n                }else{\n                    q1.push(q);\n                    bj[q]=2;\n                    bs[q]=bs[p]+1;\n                }\n            }        \n        }  \n    }\n    return 0;\n}",
        "postTime": 1573300867,
        "uid": 109636,
        "name": "N0othing",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u4fd7\u8bdd\u8bf4\uff0c**\u66b4\u529b\u51fa\u5947\u8ff9\uff0c\u9a97\u5206\u5f97\u7701\u4e00**  \n\u8fd9\u9053\u9898\u4e3b\u8981\u5c31\u662f\u66b4\u641c\uff08\u5e7f\u641c\uff09  \n\u600e\u4e48\u641c\u5462\uff0c\u5e94\u8be5\u5927\u90e8\u5206\u7684\u540c\u5b66\u90fd\u80fd\u60f3\u5230\u6211\u4eec\u53ea\u8981\u8003\u8651\u7a7a\u683c\u7684\u53d8\u5316\uff0c\u7136\u540e\u6839\u636e\u7a7a\u683c\u7684\u53d8\u5316\u8fdb\u884c\u5e7f\u641c\u5c31\u53ef\u4ee5\u4e86  \n\u8fd9\u9053\u9898\u9664\u4e86\u66b4\u641c\u8fd9\u4e00\u7c7b\u57fa\u672c\u64cd\u4f5c\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5224\u91cd\u4e86\u5176\u5b9e\u7528\u6563\u5217\u8868\u5c31\u53ef\u4ee5\u505a\u5230\uff0c  \n~~emmmm\uff0c\u672c\u6765\u54c8\u5e0c\u8868\u91cc\u9762\u60f3\u8981%19260817\u7684\uff0c\u540e\u6765\u53d1\u73b0\u4e0d\u662f\u7d20\u6570\u4e0d\u591f\u4f18\u2026\u2026~~  \n\u6563\u5217\u8868\u7528vector\u5b9e\u73b0\uff08\u4e0d\u8981\u5bf9STL\u6709\u4ec0\u4e48\u8bef\u4f1a\uff0c\u8dd1\u7684\u98de\u5feb\u7684\uff09\uff0c\u7136\u540e\u5224\u91cd\u540e\u63d2\u5165\u5c31\u53ef\u4ee5\u4e86  \n\u5148\u4e0a\u4e00\u6ce2hash\u7684\u5b9e\u73b0\n```cpp\nconst int ha=192817;\nvector<int> hash[ha];\nstruct state{\n    int a[10],dis;\n    state(int *b,int d)\n    {\n    \tfor(register int i=1;i<=9;i++) a[i] = b[i];\n    \tdis = d;\n\t}\n};\nbool myhash(state xx)\n{\n\tint x=0;\n\tfor(int i=1;i<=9;i++) x=x*10+xx.a[i]; \n\tint m=x%ha;\n\tint siz=hash[m].size();\n\tfor(register int i=0;i<siz;i++) if(hash[m][i]==x) return false;\n\thash[m].push_back(x);\n\treturn true;\n}\n```\n\u7136\u540e\u5c31\u662f\u6b63\u6587\u7684bfs\u5566\uff0c\u4e3a\u4e86\u5e2e\u52a9\u5927\u5bb6\u66f4\u5feb\u9605\u8bfb\uff08\u4f5c\u8005\u61d2\uff09\uff0c\u4ee3\u7801\u4e0d\u7ed9\u6ce8\u91ca\uff0c\u6ce8\u610f\u5176\u4e2dbfs\u7684\u65f6\u5019\u8981\u5224\u65ad\u80fd\u4e0d\u80fd\u8fdb\u884c\u8282\u70b9\u7684\u62d3\u5c55\uff08\u4e5f\u5c31\u662f\u201c\u8d8a\u754c\u201d\uff09\u7684\u95ee\u9898  \n\u8fd8\u6709\uff0c\u8f93\u5165\u7684\u65f6\u5019\u4e0d\u8981\u53ea\u662f\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u540e\u8f6c\u6210\u72b6\u6001\uff0c\u800c\u5e94\u5148\u8f6c\u6210\u5b57\u7b26\u540e\u518d\u64cd\u4f5c\uff0c\u6bd5\u7adf\u8c01\u90fd\u65e0\u6cd5\u9884\u89c1\u662f\u5426\u51fa\u9898\u4eba\u7684\u6570\u636e\u662f\u7531\u524d\u5bfc0\u7684  \n\u5177\u4f53\u89c1\u4ee3\u7801  \ncoding\uff1a\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\ntypedef long long ll;\nconst int ha=192817;\nvector<int> hash[ha];\nstruct state{\n    int a[10],dis;\n    state(int *b,int d)\n    {\n    \tfor(register int i=1;i<=9;i++) a[i] = b[i];\n    \tdis = d;\n\t}\n};\nbool myhash(state xx)\n{\n\tint x=0;\n\tfor(int i=1;i<=9;i++) x=x*10+xx.a[i]; \n\tint m=x%ha;\n\tint siz=hash[m].size();\n\tfor(register int i=0;i<siz;i++) if(hash[m][i]==x) return false;\n\thash[m].push_back(x);\n\treturn true;\n}\nint bfs(state s)\n{\n     int ans,b[10]={0,1,2,3,8,0,4,7,6,5};\n     state goal(state(b,0));\n     queue<state> q;\n     q.push(s);\n     myhash(s);\n     while(!q.empty())\n     {\n     \tstate x=q.front();q.pop();\n     \tbool ok=1;\n     \tfor(register int i=1;i<=9;i++) if(x.a[i]!=goal.a[i]) ok=0;\n     \tif(ok) return x.dis;\n     \tint cen=0,pos=0;\n\t\tfor(register int i=1;i<=9;i++) if(x.a[i] == 0)\n\t    {\n\t    \tpos=i;cen=pos/3+1;\n\t    \tif(pos%3==0) cen--;\n\t    \tbreak;\n\t\t}\n\t\tif(pos+1<=3*cen)\n\t\t{\n\t\t\tstate tmp=x;\n\t\t\ttmp.dis=x.dis+1;\n\t\t\tswap(tmp.a[pos],tmp.a[pos+1]);\n\t\t\tif(myhash(tmp)) q.push(tmp);\n\t\t}\n\t\tif(pos-1>(cen-1)*3)\n\t\t{\n\t\t\tstate tmp=x;\n\t\t\ttmp.dis=x.dis+1;\n\t\t\tswap(tmp.a[pos],tmp.a[pos-1]);\n\t\t\tif(myhash(tmp)) q.push(tmp);\n\t\t}\n\t\tif(cen<3)\n\t\t{\n\t\t\tstate tmp=x;\n\t\t\ttmp.dis=x.dis+1;\n\t\t\tswap(tmp.a[pos],tmp.a[pos+3]);\n\t\t\tif(myhash(tmp)) q.push(tmp);\n\t\t }\n\t\t if(cen>1)\n\t\t {\n\t\t \tstate tmp=x;\n\t\t \ttmp.dis=x.dis+1;\n\t\t \tswap(tmp.a[pos],tmp.a[pos-3]);\n\t\t \tif(myhash(tmp)) q.push(tmp);\n\t\t  } \n\t }\n}\nint main()\n{\n\tint a[10]={0};\n\tfor(register int i=1;i<=9;i++)\n\t{\n\t\tchar ch=0;\n\t\tch=getchar();\n\t\ta[i] = ch-'0';\n\t}\n\tprintf(\"%i\",bfs(state(a,0)));\nreturn 0;\n}\n\n```\n\n",
        "postTime": 1572822280,
        "uid": 185855,
        "name": "\u5ff5\u53e4\u5170",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u4e0b\u9762\u6211\u53ea\u4f1a\u8bf4\u7b97\u6cd5\u601d\u8def\uff0c\u5177\u4f53\u7684\u4ee3\u7801\u7ec6\u8282\u6211\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u6211\u8d34\u51faAC\u4ee3\u7801\uff0c\u5e0c\u671b\u80fd\u7ed9\u5404\u4f4d\u4e00\u70b9\u5e2e\u52a9\uff01\u7531\u4e8e\u6211\u5728\u4e0d\u540coj\u4e0a\u63d0\u4ea4\uff0c\u4ee3\u7801\u4f1a\u6709\u4e9b\u6539\u52a8\uff0c\u6211\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u641e\u6df7\u4e86\u3002\u5982\u6709\u9519\u8bef\uff0c\u8bf7\u5404\u4f4d\u6307\u6b63\u3002\n\u4e3a\u786e\u4fdd\u9898\u89e3\u4e0d\u8981\u592a\u957f\uff0c\u4ee3\u7801\u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u8d34\u3002\u9700\u8981\u53c2\u8003\u4ee3\u7801\u70e6\u8bf7\u79fb\u6b65\uff1ahttps://blog.csdn.net/qq_43290318/article/details/102764787\n\uff08~~\u6253\u5e7f\u544a~~\uff09\n\n\u826f\u5fc3\u9898\u89e3\uff0c\u80fd\u8fc7\u4e48..QAQ.\u3002\u6c42\u8fc7\u4e48\u4e48\u54d2\n\n## \u7248\u672c1\n#### \u5355\u5411bfs + stl set\u5bb9\u5668\u5224\u91cd\n\n\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a7.53s\n\n\u4f46\u8fc7\u4e0d\u4e86\u84dd\u6865\u676f\u90a3\u9898\uff0c\u90a3\u9898\u7684\u6570\u636e\u70b9\u6bd4\u6d1b\u8c37\u5f3a\u3002\u3002\u3002\n\n## \u7248\u672c2\n#### \u5355\u5411bfs + \u5b57\u5178\u6811\u5224\u91cd\u00a0\n\n\u5c06\u5224\u91cd\u548c\u63d2\u5165\u5206\u5f00\uff1a\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a3.38s\n\n\u5728\u5224\u91cd\u7684\u540c\u65f6\u5b9e\u73b0\u63d2\u5165\uff1a\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a2.59s\u00a0\n\n\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u91cc\u9762\u662f\u4ee5\u6574\u6570\u5f62\u5f0f\u5b58\u50a8\u6bcf\u79cd\u72b6\u6001\uff0c\u6211\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u5b58\u50a8\uff0c\u611f\u89c9\u64cd\u4f5c\u65b9\u4fbf\u4e00\u70b9\n\n\u624b\u5199\u5b57\u5178\u6811\uff0c\u5982\u975e\u5fc5\u8981\uff0c\u4e0d\u8981\u88c5\u00d7\u3002\u5728\u786e\u4fdd\u4e86\u6211\u7684bfs\u4e3b\u7b97\u6cd5\u6b63\u786e\u540e\uff0c\u6211\u624d\u8bd5\u7740\u624b\u5199\u5b57\u5178\u6811\u7684\uff0c\u867d\u7136\u5fc3\u91cc\u8fd8\u662f\u6709\u70b9\u865a\u3002\u4f46\u5f88\u5e86\u5e78\uff0c\u8c03\u4e862\u6b21\u5c31\u8fc7\u4e86\u3002\u4e4b\u524d\u5e08\u5144\u66fe\u7ed9\u6211\u4eec\u5c55\u793a\u8fc7\u4e00\u4e2a\u7528\u6570\u7ec4\u5b9e\u73b0\u5b57\u5178\u6811\u7684\u6a21\u677f\uff0c\u4f46\u7531\u4e8e\u8fd9\u5b66\u671f\u5b66\u6570\u636e\u7ed3\u6784\uff0c\u8001\u5e08\u4ecb\u7ecd\u4e86\u6811\u7684\u5de6\u5144\u5f1f\u53f3\u5b69\u5b50\u8868\u793a\u6cd5\uff0c\u4e8e\u662f\u6211\u5c31\u8bd5\u7740\u7528\u94fe\u8868\u5b9e\u73b0\u5b57\u5178\u6811\u3002\u00a0\n\n## \u7248\u672c3\n#### \u5355\u5411bfs + \u624b\u5199\u54c8\u5e0c\u8868\u5224\u91cd\n\n\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a2.67s\n\n\u5728\u5224\u91cd\u7684\u540c\u65f6\u8fdb\u884c\u63d2\u5165\uff0c\u961f\u5217\u6211\u7528\u6570\u7ec4\u6a21\u62df\uff0c\u4f46\u6548\u7387\u6ca1\u6709\u660e\u663e\u63d0\u9ad8\uff0c\u5efa\u8bae\u90fd\u7528stl\u63d0\u4f9b\u7684\u961f\u5217\u3002\n\n\u989d\uff0c\u662f\u4e0d\u662f\u89c9\u5f97\u6211\u5f88\u65e0\u804a\u3002\u53c8\u624b\u5199\u54c8\u5e0c\u8868\u3002\u3002\u3002\u8fd9\u5b66\u671f\u5b66Java\uff0c\u4e86\u89e3\u4e86HashSet\u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u4e8e\u662f\u5c31\u81ea\u5df1\u6a21\u4effJava\u7684\u5b9e\u73b0\u539f\u7406\u5c1d\u8bd5\u7528C++\u5199\u4e2a\u7b80\u5355\u7684\u54c8\u5e0c\u8868\u3002\u5176\u5b9e\u8fd9\u4e5f\u4e0d\u662f\u6211\u7b2c\u4e00\u6b21\u624b\u5199\u54c8\u5e0c\u8868\uff0c23333\u3002\u3002\u3002\n\n\u57283\u4e2aoj\u4e0a\u5b9e\u6d4b\uff0c\u6548\u7387\u4e00\u822c\u6765\u8bf4\u6bd4\u5b57\u5178\u6811\u9ad8\uff0c\u4f46\u4e0d\u592a\u7a33\u5b9a\u3002\u54c8\u5e0c\u8868\u7684\u6548\u7387\u4e3b\u8981\u53d6\u51b3\u4e8e\u54c8\u5e0c\u51fd\u6570\u7684\u4f18\u7565\u548c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u3002\u6211\u7528\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u51fd\u6570\u662f\u4ece\u7f51\u4e0a\u627e\u7684\uff0c\u522b\u4eba\u6d4b\u8bd5\u8fc7\u7684\u3002\u53e6\u5916\u54c8\u5e0c\u8868\u7684\u5927\u5c0f1000003\uff0c\u6700\u597d\u4e0d\u8981\u52a8\u5b83\uff0c\u6211\u8bd5\u8fc7\u6211\u4e00\u65e6\u52a8\u4e86\u5b83\uff0c\u7528\u65f6\u5c31\u8fb9\u957f\u4e86\u3002\u81f3\u5c11\uff0c\u5047\u5982\u4f60\u7528\u8fd9\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u8fd9\u4e2a\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u5c31\u5efa\u8bae\u75281000003\uff01\u9488\u5bf9\u5176\u4ed6\u54c8\u5e0c\u51fd\u6570\u6211\u4e0d\u77e5\u9053\u3002\n\n## \u7248\u672c4\n#### \u53cc\u5411bfs + map\u6807\u8bb0\n\n\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a351ms\n\n\u5927\u4e00\u53c2\u52a0\u84dd\u6865\u676f\u7701\u8d5b\u4e4b\u524d\uff0c\u5e08\u5144\u66fe\u5f00\u8fc7\u4e00\u573a\u57f9\u8bad\uff0c\u90a3\u65f6\u5e08\u5144\u5c31\u4ecb\u7ecd\u8fc7\u53cc\u5411bfs\uff0c\u5f53\u65f6\u4e5f\u8bb2\u4e86\u54c8\u5e0c\u8868\u3002\u3002\u4f46\u5f53\u65f6\u542c\u4e2a\u61f5\u61f5\u61c2\u61c2\u3002\u53cc\u5411bfs\uff0c\u5c31\u662f\u4ece\u8d77\u70b9\u548c\u4ece\u7ec8\u70b9\u201c\u540c\u65f6\u201dbfs\uff0c\u8fd9\u4e2a\u540c\u65f6\u5e76\u4e0d\u662f\u771f\u7684\u540c\u65f6\uff0c\u53ea\u662f\u4e24\u68f5bfs\u6811\u4ea4\u66ff\u5411\u5916\u6269\u5c55\uff0c\u76f8\u5f53\u4e8e\u4f60\u6269\u5c55\u4e00\u5c42\u540e\uff0c\u7136\u540e\u8f6e\u5230\u6211\u6269\u5c55\u4e00\u5c42\u3002\u5f53\u4e24\u68f5bfs\u6811\u76f8\u9047\uff0c\u6700\u77ed\u8def\u4e3a\u76f8\u9047\u7684\u4e24\u4e2a\u72b6\u6001\u7684\u6b65\u6570\u4e4b\u548c+1\u3002\u5f00\u4e00\u4e2a\u961f\u5217\u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff01\n\n\u5982\u4f55\u5224\u65ad\u4e24\u68f5bfs\u6811\u76f8\u9047\u5462\uff1f\u8fd9\u4e2a\u6807\u8bb0\u5c31\u5f88\u5de7\u5999\u4e86\u3002\u3002\u8fd9\u4e2a\u6807\u8bb0\u6211\u662f\u501f\u9274\u4e86\u5176\u5b83\u9898\u89e3\u7684\u3002\n\n\u770b\u7684\u51fa\u6765\uff0c\u7efc\u5408\u8003\u8651\uff0c\u5728\u8d5b\u573a\u4e0a\u8fd9\u662f\u9996\u9009\uff01\u4ee3\u7801\u7b80\u77ed\uff0c\u6548\u7387\u8fd8\u9ad8\u3002\n\n## \u7248\u672c5\n#### \u53cc\u5411bfs\u4f18\u5316 + map\u5224\u91cd\n\n\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a358ms\n\n\u6bcf\u6b21\u51fa\u961f\uff0c\u5143\u7d20\u5c11\u7684\u90a3\u4e2a\u961f\u5217\u7684\u5bf9\u5934\u5143\u7d20\u51fa\u961f\uff01\u00a0\u6240\u6709\u53ea\u80fd\u5f00\u4e24\u4e2a\u961f\u5217\u4e86\u3002\n\n\u8be6\u60c5\u89c1\u5927\u795e\u535a\u5ba2\uff1ahttps://blog.csdn.net/ww32zz/article/details/50755225\n\n\u597d\u50cf\u7528\u65f6\u6ca1\u6709\u51cf\u5c11\u3002\u3002\u4f46\u6211\u5728\u84dd\u6865\u676f\u9898\u5e93\u548c\u5b66\u6821oj\u4e0a\u63d0\u4ea4\uff0c\u7528\u65f6\u5c11\u4e86\u4e00\u70b9\u70b9\u3002\u539f\u56e0\u6211\u76f2\u731c\u4e00\u4e0b\uff0c\u9020\u6210\u4e24\u4e2a\u961f\u5217\u91cc\u9762\u5143\u7d20\u4e2a\u6570\u4e0d\u76f8\u7b49\u7684\u539f\u56e0\uff0c\u5c31\u662f\u5176\u4e2d\u4e00\u4e2abfs\u5728\u6269\u5c55\u72b6\u6001\u7ed3\u70b9\u65f6\u78b0\u5230\u8fb9\u754c\u4e86\u3002\u6240\u4ee5\u8fd9\u4e2a\u4f18\u5316\u662f\u5426\u660e\u663e\u8fd8\u8981\u5374\u51b3\u4e8e\u4e24\u4e2abfs\u7684\u8d77\u70b9\u7684\u4f4d\u7f6e\u3002\u84dd\u6865\u676f\u90a3\u9898\u7684\u7ec8\u70b9\u72b6\u6001\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u53ef\u80fd\u8fd9\u4e2a\u4f18\u5316\u5bf9\u4e8e\u84dd\u6865\u676f\u90a3\u9898\u4f1a\u6bd4\u8f83\u660e\u663e\u5427\u3002\u3002\u5feb\u4e86\u5341\u51e0ms\u3002\u3002\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u3002\u3002\u5f53\u7136\uff0c\u4e0a\u8ff0\u7eaf\u662f\u6211\u76f2\u731c\u3002\u3002\u3002\u4e5f\u6709\u53ef\u80fd\u6211\u4ee3\u7801\u5199\u9519\u4e86\uff0c\u6240\u4ee5\u4e0d\u660e\u663e\u3002\u3002\n\n## \u7248\u672c6\u00a0 \u7ec8\u6781\u7248\u672c\n#### \u53cc\u5411bfs\u4f18\u5316 +\u00a0 \u5b57\u5178\u6811\u5224\u91cd\n\n\uff08\u6d1b\u8c37\uff09\u603b\u7528\u65f6\uff1a178ms\n\n\u7531\u4e8e\u5728\u4f7f\u7528\u53cc\u5411bfs\u65f6\u8981\u8fdb\u884c\u7279\u6b8a\u6807\u8bb0\uff0c\u6240\u4ee5\u5b57\u5178\u6811\u8981\u8fdb\u884c\u6539\u52a8\uff01\u5177\u4f53\u5b9e\u73b0\u6211\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u53c2\u89c1\u4ee3\u7801\u3002\n\n\u5728\u5b66\u6821oj\u6d4b\u8bd5\uff0c\u6700\u9ad8\u7528\u65f6\uff1a16ms\n\n\u5728\u84dd\u6865\u676f\u9898\u5e93\uff0c\u6700\u9ad8\u7528\u65f6\uff1a23ms\n",
        "postTime": 1572151418,
        "uid": 153853,
        "name": "passerbyYSQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "Cantor\u5c55\u5f00\u7684\u8bc1\u660e\u6765\u81ea\u6211\u7684\u9898\u89e3[P3014 \u725b\u7ebfCow Line](https://www.luogu.org/problemnew/show/P3014)\n\n\u672c\u9898\u4e5f\u662f\u4e00\u9053**Cantor\u5c55\u5f00**\u7684\u6a21\u677f~~\u6c34~~\u9898, \u4e3a\u4e86\u572868\u7bc7\u9898\u89e3\u91cc\u751f\u5b58\u4e0b\u53bb, \u5728\u8fd9\u91cc\u7529\u4e00\u4e0b\u81ea\u5df1\u5bf9Cantor\u5c55\u5f00\u7684\u8bc1\u660e:\n# Cantor\u5c55\u5f00\n\u5148\u7529\u4e00\u4e0b\u539f\u5b9a\u7406:  \n**\u7ed9\u5b9a\u4e00\u957f\u5ea6\u4e3a$n$\u4e25\u683c\u4e0a\u5347\u6570\u5217$a$, \u4ee4\u521d\u59cb\u72b6\u6001$a_0=a$, \u5bf9a\u8fdb\u884c\u5168\u6392\u5217, \u7b2ck\u6b21\u751f\u6210\u7684\u6570\u5217\u4e3a$a_k$, \u5219\u6709Cantor\u5c55\u5f00\u5f0f:**  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$k=Hash(a_k)=\\sum_{i=1}^n(n-i)!\\sum_{j=i+1}^n[a_{k,i}>a_{k,j}]$\n## \u8bc1\u660e\n\u6784\u9020\u5982\u4e0bHash\u64cd\u4f5c:  \n&nbsp;&nbsp;&nbsp;&nbsp;**1)\u6309\u987a\u5e8f\u53d6\u51fa$a_{k,i}$**  \n&nbsp;&nbsp;&nbsp;&nbsp;**2)\u53d6\u6240\u6709$a_{k,j}<a_{k,i},i<j$\u4e0e$a_{k,i}$\u4ea4\u6362\u4f4d\u7f6e, \u5e76\u5bf9$a_{k,i+1}$\u81f3$a_{k,n}$\u7684\u5143\u7d20\u8fdb\u884c\u5168\u6392**  \n\u73b0\u53ea\u9700\u8bc1, **\u8be5\u64cd\u4f5c(1)\u4ec5\u9650\u4e8e, (2)\u4e0d\u91cd\u590d, (3)\u4e0d\u9057\u6f0f\u5730\u751f\u6210\u6240\u6709\u4e8e$a_k$\u4e4b\u524d\u751f\u6210\u7684\u6570\u5217, \u5373$a_1,a_2,...,a_{k-1}$.** \u4e0d\u59a8\u8bbe$a_k=S$, \u64cd\u4f5c\u540e$a_k'=T$. \n\n------------\n \n### \u4e0b\u8bc1\u6027\u8d28(1)\n\u4e0d\u59a8\u8bbe\u53d6\u51fa$S_m$\u4e0e\u540e\u4ea4\u6362,  \n$\\because$\u5bf9\u4e8e$\\forall i<m,S_i=T_i$  \n\u53c8$\\because S_m>T_m$  \n$\\therefore T$\u4e00\u5b9a\u5168\u6392\u751f\u6210\u4e8e$S$\u4e4b\u524d, \u5df2\u8bc1.  \n\n------------\n  \n### \u4e0b\u8bc1\u6027\u8d28(2)\n(\u4e00) \u82e5\u53d6$S_m$\u4e8e\u540e\u4ea4\u6362, \u8bbe\u591a\u79cd\u4e0d\u540c\u4ea4\u6362\u7ed3\u679c$T_1,T_2,...$  \n\u663e\u7136\uff0c$T_{1,m}\\neq T_{2,m}\\neq ...$.  \n\u53c8\u5728$\\forall T_i$\u4e2d\uff0c$T_{m+1}$\u81f3$T_n$\u53c8\u5168\u6392\u751f\u6210, \u5fc5\u4e0d\u5168\u7b49, \u5df2\u8bc1.  \n  \n(\u4e8c) \u82e5\u53d6$S_n,S_m$\u5206\u522b\u4ea4\u6362, \u4e0d\u59a8\u8bbe$n<m$,  \n\u5219\u53d6$S_m$\u6240\u751f\u6210\u7684\u7ed3\u679c$T,T_n=S_n$,  \n\u53c8\u53d6$S_n$\u6240\u751f\u6210\u7684\u7ed3\u679c$T',T'\\neq S_n$.  \n$\\therefore T\\neq T'$, \u5df2\u8bc1.  \n  \n\u7efc\u4e0a,\u6027\u8d28(2)\u5df2\u8bc1.  \n\n------------\n\n### \u4e0b\u8bc1\u6027\u8d28(3)\n\u4e0d\u59a8\u4efb\u53d6\u5168\u6392\u6570\u5217$a_i, i\\in[0,k-1]$  \n$\\because S$\u751f\u6210\u4e8e$a_i$\u4e4b\u540e  \n$\\therefore$\u5fc5\u5148\u51fa\u73b0\u6700\u5c0f\u7684$m$, s.t.(such that, \u4f7f\u5f97)$S_m>a_{i,m}$, \u4e14\u5bf9\u4e8e$j<m,S_j=a_{i,j}$.  \n$\\because a_i$\u65e0\u91cd\u590d\u5143\u7d20  \n$\\therefore a_{i,m}\\in\\{S_n|n>m\\}$  \n\u53c8$\\because S_m>a_{i,m}$  \n$\\therefore$\u5f53\u53d6$S_m$\u4ea4\u6362\u65f6, \u5fc5\u4f1as.t.\u4e00\u7ec4\u7ed3\u679c$T$, $T_m=a_{i,m}$  \n\u6b64\u65f6, $a_i$\u5fc5\u7531$T_{m+1}$\u81f3$T_n$\u7684\u5168\u6392\u5217\u751f\u6210, \u5df2\u8bc1.  \n\n------------\n\n\u6545, \u8be5\u64cd\u4f5c\u6027\u8d28\u5df2\u8bc1\u660e, \u5176\u751f\u6210\u7684\u6570\u5217\u603b\u6570\u5c31\u662f$k$.  \n\u4e0d\u59a8\u8bbe\u53d6\u51fa$S_i$\u4e0e\u540e\u4ea4\u6362, \u5176\u751f\u6210\u7684\u6570\u5217\u603b\u6570\u663e\u7136\u4e3a:  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$Total_i=(n-i)!\\sum_{j=i+1}^n[S_i>S_j]$  \n\n\u90a3\u4e48\u6240\u6709\u7684\u6570\u5217\u603b\u6570\u5373\u4e3a:  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$k=\\sum_{i=1}^nTotal_i=\\sum_{i=1}^n(n-i)!\\sum_{j=i+1}^n[S_i>S_j]$  \n\n\u5219\u5bf9\u4e8e$\\forall a_k$, \u8be5\u64cd\u4f5c\u751f\u6210\u7684\u6570\u5217\u603b\u6570\u4e3a:  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$k=\\sum_{i=1}^n(n-i)!\\sum_{j=i+1}^n[a_{k,i}>a_{k,j}]$  \n\n\u6545, \u539f\u547d\u9898\u6210\u7acb, \u8bc1\u6bd5!  \n\n\n------------\n\u662f\u4e0d\u662f\u975e\u5e38\u7b80\u5355\u5462? ~~\u6ed1\u7a3d~~  \n\u4e4b\u6240\u4ee5\u5728\u8fd9\u91cc\u5f15\u51faCantor\u5c55\u5f00, \u662f\u56e0\u4e3a\u6211\u4eec\u5728Search\u65f6\u5fc5\u987b\u5bf9\u72b6\u6001\u8fdb\u884cHash\u5904\u7406, \u4e0d\u7136\u96be\u4ee5\u6807\u8bb0Vis\u6570\u7ec4.  \n\u4e0b\u9762\u5462, \u5c31\u770b\u770b\u6211\u5199\u7684\u53cc\u5411BFS\u5427, \u5982\u679c\u5728\u641c\u7d22\u6a21\u677f\u65b9\u9762\u6709\u7591\u95ee, \u53ef\u4ee5\u63a2\u8bbf\u5176\u4ed6dalao\u7684\u9898\u89e3!\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <algorithm>\n\nnamespace Optimize { // IO\u4f18\u5316\u6a21\u677f \n\t#define Eps 1e-8\n\t#define Inf 0x3f3f3f3f\n\t#define Int register int\n\t#define LL long long int\n\t#define Type template<typename _T>\n\t#define FileClose() fclose ( stdin ), fclose ( stdout )\n\t#define FileOpen( fname ) freopen ( fname\".in\", \"r\", stdin ), freopen ( fname\".out\", \"w\", stdout )\n\tType inline _T Max ( const _T a, const _T b ) { return a > b ? a : b; }\n\tType inline _T Min ( const _T a, const _T b ) { return a < b ? a : b; }\n\tType inline _T Abs ( const _T x ) { return x < 0 ? -x : x; }\n\tType inline _T rint () {\n\t\t_T x = 0; int f = 1; char s = getchar ();\n\t\twhile ( s < '0' || '9' < s ) f = s == '-' ? -1 : 1, s = getchar ();\n\t\twhile ( '0' <= s && s <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar ();\n\t\treturn x * f;\n\t}\n\tType inline void wint ( _T x ) {\n\t\tif ( x < 0 ) putchar ( '-' ), x = ( ~ x ) + 1;\n\t\tif ( 9 < x ) wint ( x / 10 );\n\t\tputchar ( x % 10 + '0' );\n\t}\n}\n\nusing namespace std;\nusing namespace Optimize;\n\nstruct Node { // \u7ed3\u70b9\u7ed3\u6784\u4f53 \n\tint k, x, CantorKey, Step; // CantorKey\u662f\u72b6\u6001\u7684Hash; k\u8bb0\u5f55\u7ed3\u70b9\u65b9\u5411(\u6b63\u6216\u53cd) \n\tNode () {}\n\tinline Node ( const int SearchWay, const int _, const int __, const int ___ ) {\n\t\tk = SearchWay, x = _, CantorKey = __, Step = ___;\n\t}\n};\n\nconst int Mov[4] = { -3, 1, 3, -1 };\nLL FAC[10] = { 1 }; // \u9636\u4e58\u9884\u5904\u7406 \nvector<int> Start, Target;\nint sx, sy, tx, ty;\nint Vis[2][362885] = {}; // 9! = 326880\n\ninline LL Cantor ( vector<int> a, const int n = 9 ) { // Cantor\u5c55\u5f00 \n\tLL ret = 0, tot = 0;\n\tfor ( Int i = 0; i < n; ++ i ) {\n\t\ttot = 0;\n\t\tfor ( Int j = i + 1; j < n; ++ j ) {\n\t\t\ttot += a[i] > a[j];\n\t\t}\n\t\tret += tot * FAC[n - i - 1];\n\t}\n\treturn ret;\n}\n\ninline vector<int> ReCantor ( LL k, const int n = 9 ) { // \u9006\u5c55\u5f00(ps.\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u50a8\u5b58\u5e8f\u5217) \n    vector<int> v, ret;\n    for ( Int i = 0; i < n; ++ i ) {\n        v.push_back ( i );\n    }\n    for ( Int i = n; i; -- i ) {\n        LL r = k % FAC[i - 1], t = k / FAC[i - 1];\n        k = r;\n        ret.push_back ( v[t] );\n        v.erase ( v.begin () + t );\n    }\n    return ret;\n}\n\ninline int DBFS () {\n\tint s = Cantor ( Start ), t = Cantor ( Target );\n\tif ( s == t ) { // \u8d77\u70b9\u7ec8\u70b9\u91cd\u5408, \u5728DBFS\u91cc\u5fc5\u987b\u7279\u5224 \n\t\treturn 0;\n\t}\n\tqueue<Node> Q;\n\tQ.push ( Node ( 0, sx, s, 0 ) );\n\tQ.push ( Node ( 1, tx, t, 0 ) );\n\twhile ( ! Q.empty () ) {\n\t\tNode now = Q.front ();\n\t\tQ.pop ();\n\t\tvector<int> S = ReCantor ( now.CantorKey );\n\t\tif ( Vis[now.k ^ 1][now.CantorKey] ) {\n\t\t\treturn Vis[now.k][now.CantorKey] + Vis[now.k ^ 1][now.CantorKey]; // \u76f4\u63a5\u5728Vis\u6570\u7ec4\u91cc\u8bb0\u5f55\u6b65\u6570 \n\t\t}\n\t\tfor ( Int i = 0; i < 4; ++ i ) {\n\t\t\tint mx = now.x + Mov[i];\n\t\t\tif ( 0 <= mx && mx < 9 && ( now.x / 3 == mx / 3 || now.x % 3 == mx % 3 ) ) { // (\u5e38\u89c4\u64cd\u4f5c)\n\t\t\t\tswap ( S[now.x], S[mx] );\n\t\t\t\tint Key = Cantor ( S );\n\t\t\t\tif ( ! Vis[now.k][Key] ) {\n\t\t\t\t\tVis[now.k][Key] = now.Step + 1;\n\t\t\t\t\tQ.push ( Node ( now.k, mx, Key, now.Step + 1 ) );\n\t\t\t\t}\n\t\t\t\tswap ( S[now.x], S[mx] );\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\ninline void Work () {\n\t#define rint rint<int> () // \u58f0\u660e\u8bfb\u5165int\u7c7b\u578b \n\tfor ( Int i = 1; i <= 9; ++ i ) {\n\t\tFAC[i] = FAC[i - 1] * i;\n\t}\n\tfor ( Int i = 0; i < 9; ++ i ) {\n\t\tStart.push_back ( getchar () - '0' );\n\t\tif ( ! Start[i] ) {\n\t\t\tsx = i;\n\t\t}\n\t}\n\tint a[] = { 1, 2, 3, 8, 0, 4, 7, 6, 5 };\n\tfor ( Int i = 0; i < 9; ++ i ) { // \u7ed9\u51fa\u7ec8\u6b62\u72b6\u6001 \n\t\tTarget.push_back ( a[i] );\n\t\tif ( ! Target[i] ) {\n\t\t\ttx = i;\n\t\t}\n\t}\n\tint Ans = DBFS ();\n\twint ( Ans ), putchar ( '\\n' ); // Bye! \n}\n\nint main () {\n//\tFileOpen ( \"\" );\n\tWork ();\n//\tFileClose ();\n\treturn 0;\n}\n```",
        "postTime": 1558327956,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u5728vjudge\u4e0a\u5199\u8fc7\u4e00\u904d\uff0c\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\u5199\u4e86\u4e24\u5929QAQ\n\u90a3\u9053\u9898\u8fd8\u5f97\u628a\u8def\u5f84\u6c42\u51fa\u6765\uff0c\u8fd8\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u6709\u89e3~~awsl~~\u6d1b\u8c37\u592a\u53cb\u5584\u4e86qwq\n\n\u65b9\u6cd5\u4e00\uff1a\u53cc\u5411bfs+\u5eb7\u6258\u5c55\u5f00\n\n\u5eb7\u6258\u5c55\u5f00\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u4e0d\u540c\u7684\u6570\uff0c\u53cc\u5411bfs\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6bd5\u7adf\u904d\u5386\u7684\u6df1\u5ea6\u4f1a\u964d\u4f4e\u4e00\u534a\n\n\u672c\u9898ac\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e5+10;\nstruct qw\n{\n\tstring x;\n\tint num;\n};\nint hash1[9]={1,1,2,6,24,120,720,5040,40320};\nqueue<qw> q[2];\nstring s1,b=\"123804765\";\nint vis[maxn][2]={0},d[4]={-3,3,-1,1},step=0;\nint pan(int i,int x)//\u5224\u65ad\u4f4d\u7f6e \n{\n\tif((i==0&&x<3)||(i==1&&x>5)) return 0;\n\tif((i==2&&x%3==0)||(i==3&&x%3==2)) return 0;\n\treturn 1;\n} \nint get_h(string s)//\u5eb7\u6258\u5c55\u5f00 \n{\n\tint ans=0,i,j,k;\n\tfor(i=0;i<9;i++)\n\t{ \n\t\tk=0;\n\t\tfor(j=0;j<i;j++)\n\t\t{\n\t\t\tif(s[j]>s[i]) k++;\n\t\t}\n\t\tans+=k*hash1[i];\n\t}\n\treturn ans;\n}\nvoid bfs(int t)\n{\n\tint len=q[t].size();\n\twhile(len--)\n\t{\n\t\tqw u=q[t].front();q[t].pop();\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tif(!pan(i,u.num)) continue;\n\t\t\tint bx=u.num+d[i];\n\t\t\tstring c=u.x;swap(c[bx],c[u.num]);\n\t\t\tint p=get_h(c);\n\t\t\tif(vis[p][t]) continue;\n\t\t\tvis[p][t]=1;\n\t\t\tif(vis[p][t^1]) {cout<<step<<endl;exit(0);} \n\t\t\tq[t].push((qw){c,bx});\n\t\t}\n\t}\n}\nvoid solve()\n{\n\tvis[get_h(s1)][0]=vis[get_h(b)][1]=1;\n\twhile(step<=5000)\n\t{\n\t\tstep++;bfs(0);\n\t\tstep++;bfs(1);\n\t}\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>s1;\n\t//cout<<get_h(s1)<<\" \"<<get_h(b);\n\tfor(int i=0;i<9;i++)\n\tif(s1[i]=='0') {q[0].push((qw){s1,i});}\n\tq[1].push((qw){b,4});\n\tif(s1==b) {cout<<\"0\"<<endl;return 0;}//\u7279\u5224 \n\tsolve();\n} \n```\n\n\u6c42\u8def\u5f84\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u627e\u4e0d\u5230\u8def\u5f84\u60c5\u51b5\u7684\u7279\u5224\uff08\u8d77\u59cb\u72b6\u6001\u548c\u8fd9\u9053\u9898\u4e0d\u592a\u4e00\u6837\uff09\u4ee3\u7801\u5f88\u4e11QAQ\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <vector>\nusing namespace std;\nconst int maxn=5e5+10;\nint hash1[9]={1,1,2,6,24,120,720,5040,40320};\nstruct node\n{\n\tint num;//\u8ffd\u6eaf\u4e0a\u4e00\u4e2a\u72b6\u6001 \n\tchar ch;//\u5b58\u50a8\u8be5\u72b6\u6001\u7684\u5b57\u7b26 \n}pre[maxn];\nint vis[maxn]={0},vis1[maxn]={0};\nstruct node2\n{\n\tstring c;//\u50a8\u5b58\u77e9\u9635\u72b6\u6001 \n\tint num;\n}e;\nint dir[4]={-3,3,-1,1};\nchar d[10]={\"udlr\"},d1[10]={\"durl\"};//\u65b9\u5411 \nvoid show(int x)//\u4ece\u6700\u5f00\u59cb\u7684\u70b9\u8f93\u51fa\u5b57\u7b26 \n{\n\tif(pre[x].num==-1) return ;\n\tshow(pre[x].num);\n\tprintf(\"%c\",pre[x].ch);\n}\nvoid show1(int x)//\u8f93\u51fa\u7ec8\u70b9\u7ecf\u8fc7\u8def\u5f84\u7684\u5b57\u7b26 \n{\n\twhile(pre[x].num!=-1)\n\t{\n\t\tprintf(\"%c\",pre[x].ch);\n\t\tx=pre[x].num;\n\t}\n\tprintf(\"\\n\");\n}\nint get_hash(string e)//\u83b7\u5f97\u54c8\u5e0c\u503c\u5eb7\u6258\u5c55\u5f00\n{\n\tint s=0,i,j,k;\n\tfor(i=0;i<9;i++)\n\t{\n\t\tk=0;\n\t\tfor(j=0;j<i;j++)\n\t\tif(e[j]>e[i]) k++;\n\t\ts+=k*hash1[i];\n\t}\n\treturn s;\n}\nint pan(int i,int x)\n{\n\tif((i==0&&x<3)||(i==1&&x>5)) return 0;\n\tif((i==2&&x%3==0)||(i==3&&x%3==2)) return 0;\n\treturn 1;\n} \nvoid bfs()\n{\n\tint num=2;\n\tpre[1].num=-1;pre[2].num=-1;\n\tstring end1=\"123456780\";//\u7ec8\u70b9 \n\tvis[get_hash(e.c)]=1;\n\tvis1[get_hash(end1)]=2;\n\tnode2 f,w;\n\tqueue<node2> q1,q2;\n\tf.c=end1,f.num=8;\n\tq1.push(e);q2.push(f);//\u5b58\u50a8\u6700\u521d\u72b6\u6001\n\twhile(!q1.empty()&&!q2.empty())\n\t{\n\t\tf=q1.front();q1.pop();\n\t\tint p=get_hash(f.c);\n\t\tif(vis1[p]) \n\t\t{\n\t\t\tshow(vis[p]);show1(vis1[p]);\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tif(!pan(i,f.num)) continue;\n\t\t\tint x=f.num+dir[i];w=f;\n\t\t\tswap(w.c[f.num],w.c[x]);\n\t\t\tint q=get_hash(w.c);\n\t\t\tif(vis[q]) continue;\n\t\t\tvis[q]=++num;\n\t\t\tw.num=x;\n\t\t\tpre[num].num=vis[p];\n\t\t\tpre[num].ch=d[i];\n\t\t\tq1.push(w);\n\t\t}\n\t\tf=q2.front();q2.pop();\n\t\tp=get_hash(f.c);\n\t\tif(vis[p])\n\t\t{\n\t\t\tshow(vis[p]);show1(vis1[p]);\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tif(!pan(i,f.num)) continue;\n\t\t\tint x=f.num+dir[i];w=f;\n\t\t\tswap(w.c[f.num],w.c[x]);\n\t\t\tint q=get_hash(w.c);\n\t\t\tif(vis1[q]) continue;\n\t\t\tvis1[q]=++num;\n\t\t\tw.num=x;\n\t\t\tpre[num].num=vis1[p];\n\t\t\tpre[num].ch=d1[i];\n\t\t\tq2.push(w);\n\t\t}\n\t} \n\tprintf(\"unsolvable\\n\");\n}\nint main()\n{\n\tchar a[30];\n\twhile(gets(a))\n\t{\n\t\tint i,j,k=0,n;\n\t\tn=strlen(a);\n\t\te.c=\"\";\n\t\tfor(i=0,j=0;i<n;i++)\n\t\t{\n\t\t\tif(a[i]!=' ')\n\t\t\t{\n\t\t\t\tif(a[i]=='x') {e.num=j;e.c+='0';}\n\t\t\t\telse e.c+=a[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tfor(i=0;i<9;i++)\n\t\t{\n\t\t\tif(e.c[i]=='0') continue;\n\t\t\tfor(j=0;j<i;j++)\n\t\t\t{\n\t\t\t\tif(e.c[j]=='0') continue;\n\t\t\t\tif(e.c[j]>e.c[i]) k++;\n\t\t\t}\n\t\t}\n\t\tmemset(vis1,0,sizeof(vis1));\n        memset(vis,0,sizeof(vis));\n\t\tif(k&1) printf(\"unsolvable\\n\");\n\t\telse bfs();\n\t}\n\treturn 0;\n} \n//4  3  2  7  5  x  1  6  8\n```\nA*\u7b97\u6cd5\uff08\u8fd8\u662fvjudge\u4e0a\u7684\u9898\uff09\n\n\u53ef\u4ee5\u548cspfa\u76f8\u7c7b\u6bd4\uff0c\u4e00\u53e5\u8bdd\u6982\u62ec\u5c31\u662f\u4e0d\u65ad\u5730\u6c42\u5f53\u524d\u72b6\u6001\u548c\u76ee\u6807\u72b6\u6001\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\uff08\u81ea\u5df1\u8ba1\u7b97\u7684\uff0c\u5fc5\u5b9a\u5c0f\u4e8e\u5b9e\u9645\u8ddd\u79bb\uff09\uff0c\u5148\u5904\u7406\u4f18\u5148\u961f\u5217\u4e2d\u79bb\u7ec8\u70b9\u6700\u5c0f\u7684\u70b9\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm> \n#include<queue>\n#include<vector>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nconst int maxn=5e5+10;\nstruct qw\n{\n\tint num;\n\tchar ch;\n}pre[maxn];\nstruct node\n{\n\tint f[3][3];\n\tint x,y;\n\tint g,h;\n\tint hash_num;\n\tbool operator<(const node &a)const\n\t{\n\t\treturn h+g>a.h+a.g;\n\t}\n};\nint dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}},vis[maxn]={0};\nint ha[9]={1,1,2,6,24,120,720,5040,40320};\nchar d[5]={\"udlr\"};\nint get_hash(node x)//\u72b6\u6001\u538b\u7f29\uff1a\u5eb7\u6258\u5c55\u5f00 \n{\n\tint i,j,k=0,a[9],ans=0;\n\tfor(i=0;i<3;i++)\n\tfor(j=0;j<3;j++) a[k++]=x.f[i][j];\n\tfor(i=0;i<9;i++)\n\t{\n\t\tk=0;\n\t\tfor(j=0;j<i;j++) if(a[j]>a[i]) k++;\n\t\tans+=ha[i]*k;\n\t} \n\treturn ans;\n}\n//\u8bc4\u4f30\u51fd\u6570\uff0c\u83b7\u5f97\u8bc4\u4f30\u503c\uff0c\u8ba1\u7b971\u52308\u56de\u5230\u539f\u70b9\u9700\u8981\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u5fc5\u5b9a\u5c0f\u4e8e\u5b9e\u9645\u64cd\u4f5c\u6570 \nint get_h(node x)\n{\n\tint i,j,ans=0;\n\tfor(i=0;i<3;i++)\n\t{\n\t\tfor(j=0;j<3;j++)\n\t\t{\n\t\t\tif(x.f[i][j])\n\t\t\tans+=abs(i-(x.f[i][j]-1)/3)+abs(j-(x.f[i][j]-1)%3); \n\t\t}\n\t}\n\treturn ans;\n}\nvoid print(int x)\n{\n\tif(pre[x].num==-1)  return;\n\tprint(pre[x].num);\n\tprintf(\"%c\",pre[x].ch);\n}\nvoid A_star(node e)\n{\n\tmemset(vis,0,sizeof(vis));\n\tint q1=get_hash(e),k=1,en;\n\tnode u,w;\t\t\t\t\t\t\t\n\tfor(int i=0;i<3;i++)\n\tfor(int j=0;j<3;j++) \n\t{\n\t\tif(i==2&&j==2) u.f[i][j]=0;\n\t\telse u.f[i][j]=k++;\n\t}\n\ten=get_hash(u);\n\tif(en==q1) {printf(\"\\n\");return;} \n\te.g=0;e.h=get_h(e);e.hash_num=q1;\n\tvis[q1]=1;pre[q1].num=-1;\n\tpriority_queue<node> q;q.push(e);\n\twhile(!q.empty())\n\t{\n\t\tu=q.top();q.pop();\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tint cx=u.x+dir[i][0],cy=u.y+dir[i][1];\n\t\t\tif(cx<0||cx>=3||cy<0||cy>=3) continue;\n\t\t\tw=u;swap(w.f[cx][cy],w.f[u.x][u.y]);\n\t\t\tq1=get_hash(w);\n\t\t\tif(vis[q1]) continue;vis[q1]=1;\n\t\t\tw.g+=1;w.h=get_h(w);w.x=cx;w.y=cy;w.hash_num=q1;\n\t\t\tpre[q1].num=u.hash_num;pre[q1].ch=d[i];\n\t\t\tif(q1==en) {print(q1);printf(\"\\n\");return;} \n\t\t\tq.push(w);\n\t\t}\n\t}\n\tprintf(\"unsolvable\\n\");\n}\nint main()\n{\n\tchar a[30];\n\twhile(gets(a))\n\t{\n\t\tnode e;\n\t\tint i,j,n,num=0;\n\t\tn=strlen(a);\n\t\tfor(i=0;i<=n;i++)\n\t\t{\n\t\t\tif(a[i]!=' ')\n\t\t\t{\n\t\t\t\tif(a[i]!='x'&&a[i]>='1'&&a[i]<='8') e.f[num/3][num%3]=a[i]-'0';\n\t\t\t\telse if(a[i]=='x') {e.f[num/3][num%3]=0;e.x=num/3;e.y=num%3;} \n\t\t\t\tnum++;\n\t\t\t}\n\t\t}\n\t\tint b[10],k=0;\n\t\tfor(i=0;i<3;i++)\n\t\tfor(j=0;j<3;j++) b[k++]=e.f[i][j];\n\t\tfor(i=0;i<9;i++)\n\t\t{\n\t\t\tk=0;\n\t\t\tfor(j=0;j<i;j++) if(b[j]>b[i]) k++; \n\t\t}\n\t\tif(k&1) printf(\"unsolvable\\n\");\n\t\telse A_star(e);\n\t}\n}\n//2  3  4  1  5  x  7  6  8\n```\n\n\n",
        "postTime": 1556025922,
        "uid": 128739,
        "name": "q17770027225",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u5f88\u660e\u663e\u662f\u4e2a**BFS**~~\uff0c\u610f\u601d\u5c31\u662f\u4ece\u4e00\u4e2a\u521d\u59cb\u65b9\u9635\u5f00\u59cb\uff0c**\u79fb\u52a80\uff08\u7a7a\u683c\uff09\u7684\u4f4d\u7f6e**\uff0c\u4f7f\u77e9\u9635**\u53d8\u6210\u6700\u540e\u7684\u65b9\u9635**\uff08123 804 765\uff09\u3002\u90a3\u4e48\u5199\u4e00\u4e2a**\u5e7f\u641c**\u5c31\u53ef\u4ee5\u5b8c\u6210\u6b64\u9898\u4e86\u3002\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u89e3\u51b3**\u5224\u91cd**\u7684\u95ee\u9898\u5462\uff1f\n\n**\u4e00\u3001map**\n\nc++\u4e2d\u7684stl\uff0c\u53ef\u6548\u7387\u592a\u4f4e\uff0cpass\uff08~~\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u4e0d\u4f1a\u7528~~\uff09\n\n**\u4e8c\u3001\u54c8\u5e0c\u8868**\n\n\u697c\u4e0b\u5927\u4f6c\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u672c\u849f\u5c31\u4e0d\u518d\u4ecb\u7ecd\u4e86\n\n**\u4e09\u3001\u5eb7\u62d3\u5c55\u5f00+\u6807\u8bb0\u6570\u7ec4**\n\n\u8fd9\u91cc\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u5eb7\u62d3\u5c55\u5f00\u3002\n\n\u5eb7\u62d3\u5c55\u5f00\u5176\u5b9e\u5c31\u662f\u6c42\u51fa\u4e00\u4e2a\u6570\u5217\u662f\u6574\u4e2a\u6392\u5217\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff0c\n\n\u516c\u5f0f\u4e3a\uff1a\u5eb7\u6258\u5c55\u5f00\u7684\u516c\u5f0f\u662f **X=a1*(n-1)!+a2*(n-2)!+...+an*0!**\n\n\u5176\u4e2d\uff0c**Ai\u6307\u7684\u662f\u4f4d\u4e8e\u4f4d\u7f6ei\u540e\u9762\u7684\u6570\u5c0f\u4e8eAi\u503c\u7684\u4e2a\u6570**\n\n\u5982\uff0c\u5728\uff081\uff0c2\uff0c3\uff0c4\uff0c5\uff095\u4e2a\u6570\u7684\u6392\u5217\u7ec4\u5408\u4e2d\uff0c\u8ba1\u7b97 14352\u4f4d\u4e8e\u7b2c\u51e0\u4e2a\u6392\u5217\u3002\n\n\u7b2c\u4e00\u4f4d\u662f1\uff0c\u540e\u9762**\u6ca1\u6709\u6bd41\u5c0f\u7684\u6570**\uff0c\u6240\u4ee5a1=0\uff1b\n\n\u7b2c\u4e8c\u4f4d\u662f4\uff0c\u540e\u97623,2\u6bd44\u5c0f\uff0c\u6240\u4ee5a2=2\uff1b\n\n\u7b2c\u4e09\u4f4d\u662f3\uff0c\u540e\u97622\u6bd43\u5c0f\uff0c\u6240\u4ee5a3=1\uff1b\n\n\u7b2c\u56db\u4f4d\u662f5\uff0c\u540e\u97622\u6bd45\u5c0f\uff0c\u6240\u4ee5a4=1\uff1b\n\n\u7b2c\u4e94\u4f4d\u662f2\uff0c\u540e\u9762**\u6ca1\u6709\u6570\u6bd4\u5b83\u5c0f**\uff0c\u6240\u4ee5a5=0\uff1b\n\n\u4ee3\u5165\u516c\u5f0f\uff0c\u5f97\uff1a\n\n```\nX=0*4!+2*3!+1*2!+1*1!+0*0!\n\nX=0+12+2+1\n\nX=15\n```\n\n\u6240\u4ee514352\u7684\u5eb7\u62d3\u5c55\u5f00\u503c\u4e3a15\n\n\u4f46\u662f\u5982\u679c\u8981**\u6c42\u662f\u7b2c\u51e0\u4e2a\u6392\u5217\u7684\u8bdd\uff0c\u5c31\u8fd8\u9700\u8981\u52a01**\n\n\u6240\u4ee514352\u662f\u7b2c**16**\u4e2a\u6392\u5217\u3002\n\ncode\uff1a\n```cpp\nint cantor(int a[], int n)\n{\n\tint ans = 0;\n\tfor (int i = 1;i <= n;i++)\n\t{\n\t\tint x = 0, c = 1, m = 1;\n\t\tfor (int j = i + 1;j <= n;j++)\n\t\t{\n\t\t\tif (a[j] < a[i]) x++;\n\t\t\tm *= c;\n\t\t\tc++;\n\t\t}\n\t\tans += x * m;\n\t}\n\treturn ans;\n}\n```\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u5f00\u4e00\u4e2a**\u6807\u8bb0\u6570\u7ec4**\u6765\u6807\u8bb0\u6240\u6709\u5eb7\u62d3\u5c55\u5f00\u503c\u5c31\u884c\u4e86\u3002\n\uff08**876543210\u7684\u5eb7\u62d3\u5c55\u5f00\u503c\u662f362879\uff0c\u6240\u4ee5\u628a\u6570\u7ec4\u5f00\u5230362881\u5c31\u884c\u4e86**\uff09\n\n\u5e9f\u8bdd\u4e0d\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff1a\n```\n#include <cstdio>\n#include <cstdlib> \n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint dx[4] = {1, -1, 0, 0};\nint dy[4] = {0, 0, 1, -1};\t//\u7a7a\u683c\u79fb\u52a8\u56db\u4e2a\u65b9\u5411\u7684\u53d8\u5316\nstruct node\n{\n\tint nonex, noney;\t//\u5b58\u7a7a\u683c\u7684x\u548cy\u5750\u6807\n\tint step;\t//\u5b58\u6b65\u6570\n\tint a[4][4];\t//\u5b58\u68cb\u76d8\n}q[362881];\nint book[362881], need = 46686;\t//123804765\u662f\u7b2c46686\u4e2a\u6392\u5217\u3002\nint cantor(int tmp[][4], int n)\t//\u5eb7\u62d3\u5c55\u5f00\n{\n\tint a[10];\n\tfor (int i = 1;i <= 3;i++)\n\t\tfor (int j = 1;j <= 3;j++)\n\t\t\ta[(i - 1) * 3 + j] = tmp[i][j];\t//\u4e8c\u7ef4\u8f6c\u4e00\u7ef4\n\tint ans = 0;\n\tfor (int i = 1;i <= n;i++)\n\t{\n\t\tint x = 0, c = 1, m = 1;\n\t\tfor (int j = i + 1;j <= n;j++)\n\t\t{\n\t\t\tif (a[j] < a[i]) x++;\n\t\t\tm *= c;\n\t\t\tc++;\n\t\t}\n\t\tans += x * m;\n\t}\n\treturn ans;\n}\nvoid bfs(int a[][4])\n{\n\tint tmpx, tmpy, head = 0, tail = 0;\n\tfor (int i = 1;i <= 3;i++)\t//\u627e\u5230\u7a7a\u683c\u7684\u4f4d\u7f6e\n\t{\n\t\tfor (int j = 1;j <= 3;j++)\n\t\t{\n\t\t\tif (a[i][j] == 0)\n\t\t\t{\n\t\t\t\ttmpx = i;\n\t\t\t\ttmpy = j;\n\t\t\t\tbreak;\n\t\t\t}\t\n\t\t}\n\t}\n\tq[++tail].nonex = tmpx;\n\tq[tail].noney = tmpy;\n\tq[tail].step = 0;\n\tfor (int i = 1;i <= 3;i++)\n\t\tfor (int j = 1;j <= 3;j++)\n\t\t\tq[tail].a[i][j] = a[i][j];\n\tbook[cantor(a, 9) + 1] = 1;\t//\u6253\u6807\u8bb0\n\tif(cantor(a, 9) + 1 == need) \t//\u8981\u52a0\u4e0a\uff0c\u4e0d\u7136\u7b2c31\u4e2a\u70b9\u8fc7\u4e0d\u4e86\uff08\u6211\u88ab\u5361\u8fc7\u4e00\u6b21\u4e86\uff0c\u800c\u4e14\u8fd810\u5206\uff08\u5176\u5b83\u70b9\u90fd\u4e09\u5206\uff09\uff09\n\t{\n\t\tprintf(\"0\");\n\t\treturn;\n\t}\n\twhile (head < tail)\n\t{\n\t\thead++;\n\t\tfor (int i = 0;i < 4;i++) //\u679a\u4e3e\u7a7a\u683c\u7684\u79fb\u52a8\n\t\t{\n\t\t\tint xx = q[head].nonex + dx[i];\n\t\t\tint yy = q[head].noney + dy[i];\n\t\t\tif (xx > 3 || xx < 1 || yy > 3 || yy < 1) continue;\t//\u5224\u8d8a\u754c\n\t\t\tint b[4][4];\n\t\t\tfor (int j = 1;j <= 3;j++)\n\t\t\t\tfor (int k = 1;k <= 3;k++)\n\t\t\t\t\tb[j][k] = q[head].a[j][k];\n\t\t\tswap(b[q[head].nonex][q[head].noney], b[xx][yy]);\n\t\t\tint tt = cantor(b, 9) + 1;\n\t\t\tif (book[tt] == 0) //\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5165\u961f\n\t\t\t{\n\t\t\t\tbook[tt] = 1;\n\t\t\t\tq[++tail].nonex = xx;\n\t\t\t\tq[tail].noney = yy;\n\t\t\t\tq[tail].step = q[head].step + 1;\n\t\t\t\tfor (int j = 1;j <= 3;j++)\n\t\t\t\t\tfor (int k = 1;k <= 3;k++)\n\t\t\t\t\t\tq[tail].a[j][k] = b[j][k];\n\t\t\t\tif (tt == need)\t//\u5224\u65ad\u662f\u5426\u627e\u5230\u7b54\u6848\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d\", q[tail].step);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint a[4][4];\n\tchar x[10];\n\tscanf(\"%s\", x);\n\tfor (int i = 0;i < 9;i++)\n\t\ta[i / 3 + 1][i % 3 + 1] = x[i] - '0'; //\u5c06\u4e00\u7ef4\u6570\u7ec4\u8f6c\u5316\u6210\u4e8c\u7ef4\u6570\u7ec4\n\tbfs(a);\n\treturn 0;\n}\n```",
        "postTime": 1546154075,
        "uid": 70418,
        "name": "f\u03b1ns",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "# STL\u5927\u6cd5\u597d\uff01\uff01\uff01\n\n### \u4f7f\u7528STL\u4e2d\u7684queue\u548cset\u53ef\u4ee5\u5f88\u5feb\u6c34\u8fc7\u6b64\u9898\uff01\n\n# \u7b97\u6cd5\uff1a\u666e\u901aBFS(\u6d1b\u8c37\u670d\u52a1\u5668\u5c31\u662f\u5feb!)\n\n### \u8bdd\u8bf4NOIP\u7ea7\u522b\u7684\u9009\u624b\u662f\u4e0d\u662f\u53ef\u4ee5\u5927\u91cf\u4f7f\u7528STL\u6765\u51cf\u5c11\u4ee3\u7801\u91cf\u548c\u51fa\u9519\u7387\u554a\uff1f\u611f\u89c9NOIP\u4e0d\u4f1a\u6bd2\u7624\u5361\u5e38\u7684\u8bf4...\n\n**\u6ce8\u610f\uff1a**\n\n- \u72b6\u6001\u7684\u8f6c\u79fb\u6709\u6761\u4ef6\uff0c\u4e0d\u8981\u505a\u5c06\u4f4d\u4e8e\u7b2c\u4e00\u884c\u7684\u6570\u5b57\u4e0e\u5176\u4e0a\u65b9\u7684\u6570\u5b57\u4ea4\u6362\u8fd9\u6837\u7684\u50bb\u4e8b\uff01\n\n- set\u5e93\u4e2dfind()\u51fd\u6570\u4f7f\u7528\u65f6\u4e00\u5b9a\u8981\u642d\u914d\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\uff0c\u5f53\u96c6\u5408\u4e2d\u5b58\u5728\u8be5\u5143\u7d20\u65f6\u8fd4\u56de\u5176\u6240\u5728\u7684\u8fed\u4ee3\u5668\uff0c\u53cd\u4e4b\u8fd4\u56deend()\u8fed\u4ee3\u5668\u7684\u503c\n\n\u7136\u540e\u5c31\u662f\u6e90\u4ee3\u7801\u4e86\uff0c~~\u8be6\u5c3d\u7684~~\u6ce8\u91ca\u5e94\u8be5\u80fd\u5e2e\u52a9\u65b0\u624b\u4eec\u770b\u61c2\u4ee3\u7801\uff1a\n\n```cpp\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\nint getp(int x,int y){return x*3+y;}//\u627e\u5230\u5728\u4e5d\u5bab\u683c\u4e2d\u5f53\u524d\u4f4d\u70b9\u6240\u5bf9\u5e94\u7684\u6807\u53f7->[0,8] \nstruct Cse{\n\tint f[9],x,y;//\u4e5d\u5bab\u683c\u548c0\u70b9\u7684x,y\u5750\u6807 \n\tinline Cse UpShft(){Cse ans=*this; swap(ans.f[getp(x,y)],ans.f[getp(x-1,y)]); ans.x=x-1; return ans;} \n\tinline Cse DwnShft(){Cse ans=*this; swap(ans.f[getp(x,y)],ans.f[getp(x+1,y)]); ans.x=x+1; return ans;}\n\tinline Cse LftShft(){Cse ans=*this; swap(ans.f[getp(x,y)],ans.f[getp(x,y-1)]); ans.y=y-1; return ans;}\n\tinline Cse RhtShft(){Cse ans=*this; swap(ans.f[getp(x,y)],ans.f[getp(x,y+1)]); ans.y=y+1; return ans;}\n\t//\u56db\u4e2a\u51fd\u6570\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a80\u70b9\u4f4d\u7f6e\u66f4\u65b0x,y\u503c\u5e76\u8fd4\u56de\u79fb\u52a8\u540e\u7ed3\u679c \n\tbool operator == (const Cse& rhs) { for(int i=0;i<9;i++) if(f[i]!=rhs.f[i]) return 0; return 1; }//\u91cd\u8f7d==\u8fd0\u7b97\u7b26\u4fbf\u4e8e\u5224\u65ad\u72b6\u6001 \n\tint turn(){long long ans=0; for(int i=0;i<9;i++) ans=ans*10+(f[i]-'0'); return ans;}//\u5c06\u5f53\u524d\u4e5d\u5bab\u683c\u5185\u72b6\u6001\u8f6c\u5316\u4e3a\u6570\u5b57(Hash) \n\tvoid print(){for(int i=0;i<9;i++) cout<<f[i]<<\" \"; cout<<endl;}//\u8c03\u8bd5\u7528\u8f93\u51fa \n};\nqueue<Cse> Q;//BFS\u6807\u914d\u961f\u5217 \nset<int> Set;//\u5224\u91cd\u6240\u7528\u7684\u96c6\u5408 \nset<int>::iterator itr;//\u4e3a\u5224\u91cd\u6b65\u9aa4\u4e13\u95e8\u58f0\u660e\u7684\u8fed\u4ee3\u5668\uff0c\u7528\u6765\u5b58\u50a8find()\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5e76\u4e8eend()\u8fed\u4ee3\u5668\u505a\u5bf9\u6bd4 \nqueue<int> Step;//\u683c\u5916\u7528\u4e00\u4e2a\u961f\u5217\u6765\u4fdd\u5b58\u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\u7684\u64cd\u4f5c\u6b65\u6570 \nint main()\n{\n\tCse res={{1,2,3,8,0,4,7,6,5},1,1};//\u5b9a\u4e49\u6700\u7ec8\u72b6\u6001 \n\tint f[9],x,y;\n\tchar c;\n\tfor(int i=0;i<9;i++) {cin>>c; f[i]=c-'0'; if(f[i]==0) x=i/3 , y=i%3;}//\u8bfb\u5165\u521d\u59cb\u72b6\u6001\u5e76\u627e\u5230x,y\u7684\u503c \n\tCse Start={{f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8]},x,y};//\u5b9a\u4e49\u672b\u72b6\u6001 \n\tQ.push(Start);\n\tStep.push(0);//\u72b6\u6001\u548c\u6b65\u6570\u5165\u961f \n\twhile(!Q.empty())\n\t{\n\t\tCse np=Q.front();\n\t\tQ.pop();\n\t\tint ns=Step.front();\n\t\tStep.pop();//\u72b6\u6001\u4e0e\u6b65\u6570\u51fa\u961f \n\t\tif((itr=Set.find(np.turn()))!=Set.end()) continue;//\u5224\u91cd\uff1a\u5982\u679c\u96c6\u5408\u4e2d\u6709\u4e00\u4e2a\u72b6\u6001\u4f7f\u7528turn\u51fd\u6570\u5f97\u5230\u7684hash\u503c\u4e0e\u5f53\u524d\u72b6\u6001\u76f8\u540c\u5219\u8df3\u8fc7 \n\t\tSet.insert(np.turn());//\u8bb0\u5f55\u4e0b\u5f53\u524d\u72b6\u6001 \n\t\tif(np==res) {cout<<ns; return 0;}//\u5982\u679c\u5f53\u524d\u72b6\u6001\u4e3a\u76ee\u6807\u72b6\u6001\uff0c\u8f93\u51fa\u5e76\u9000\u51fa \n\t\tif(np.x!=0) {Q.push(np.UpShft());  Step.push(ns+1);}\n\t\tif(np.x!=2) {Q.push(np.DwnShft()); Step.push(ns+1);}\n\t\tif(np.y!=0) {Q.push(np.LftShft()); Step.push(ns+1);}\n\t\tif(np.y!=2) {Q.push(np.RhtShft()); Step.push(ns+1);}//\u6839\u636e\u5f53\u524d\u72b6\u6001\u7684x,y\u5750\u6807\u8ba8\u8bba\u4e0b\u4e00\u6b65\u7684\u53d8\u5316,\u5c06\u4e0b\u4e00\u6b65\u7684\u72b6\u6001\u4e0e\u6b65\u6570\u5165\u961f \n\t}\n}\n```",
        "postTime": 1541174686,
        "uid": 9198,
        "name": "\u59041a2b3c4d",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "### \u6bd4\u8f83\u660e\u663e\u7684\u5bbd\u641c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u72b6\u6001\u8ba9\u7a7a\u683c\u548c\u4e0a\u4e0b\u5de6\u53f3\u7684\u68cb\u5b50\u4ea4\u6362\u4f4d\u7f6e\n### \u72b6\u6001\u5b58\u50a8\uff1a\n\u4e3a\u4e86\u9632\u6b62MLE\uff0c\u548c\u9898\u76ee\u4e00\u6837\u7528\u4e00\u4e2a\u6570\u5b57\u4fdd\u5b58\u68cb\u5b50\u7684\u987a\u5e8f\n### \u5224\u91cd\n\u7528STL\u7684set\uff0c\u4ee3\u7801\u4f1a\u6bd4\u8f83\u77ed\n### \u961f\u5217\u56e0\u4e3a\u4e0d\u77e5\u9053\u8be5\u5f00\u591a\u5927\u76f4\u63a5\u7528STL\u7684\n\u6211\u89c9\u5f97\u4ee3\u7801\u8fd8\u662f\u5f88\u77ed\u7684\uff1a\n```cpp\n#include <cstdio>\n#include <set>\n#include <queue>\n#include <cmath>\nusing namespace std;\nstruct node{\n\tint val;//\u72b6\u6001 \n\tint step;//\u5230\u8fd9\u4e2a\u72b6\u6001\u7684\u6b65\u6570 \n};\nint f[4][4],i,j,k,n,v,m,t,sx,sy,b=123804765;\nqueue <node> q;\nset <int> book;\nnode a;\n\nint F(int u,int tx,int ty,int sx,int sy){\n\t//u: \u539f\u72b6\u6001 | tx,ty:\u8981\u548c\u7a7a\u683c\u66ff\u6362\u68cb\u5b50\u7684\u4f4d\u7f6e | sx,sy:\u7a7a\u683c\u7684\u4f4d\u7f6e  \n\tint t=f[tx][ty];\n\tu=u-t*pow(10,9-(tx-1)*3-ty)+t*pow(10,9-(sx-1)*3-sy); \n\treturn u;//\u8fd4\u56de\u4e92\u6362\u4f4d\u7f6e\u4e4b\u540e\u7684\u72b6\u6001 \n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tq.push((node){n,0});\n\t\n\twhile(!q.empty()){\n\t\ta=q.front();\n\t\tq.pop();\n\t\tv=m=a.val;\n\t\t\n\t\tif(book.find(v)!=book.end())//set\u5224\u91cd \n\t\t\tcontinue;\n\t\tbook.insert(v);\n\t\t\n\t\tif(v==b){\n\t\t\tprintf(\"%d\",a.step);//\u5982\u679c\u5230\u8fbe\u76ee\u6807\u72b6\u6001\u5c31\u8f93\u51fa \n\t\t\treturn 0;\n\t\t}\n\t\t//\u5148\u628a\u6570\u5b57\u6362\u6210\u6570\u7ec4\uff08\u597d\u5427\u662f\u56e0\u4e3a\u6211\u592a\u5f31\uff09 \n\t\tfor(i=3;i>=1;i--){\n\t\t\tfor(j=3;j>=1;j--){\n\t\t\t\tf[i][j]=v%10;\n\t\t\t\tv/=10;\n\t\t\t\tif(!f[i][j]){\n\t\t\t\t\tsx=i;sy=j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\u548c\u56db\u4e2a\u65b9\u5411\u7684\u68cb\u5b50\u6362\u4f4d\u7f6e \n\t\tif(sx>1){\n\t\t\tk=F(m,sx-1,sy,sx,sy);\n\t\t\tq.push((node){k,a.step+1});\n\t\t}\n\t\tif(sx<3){\n\t\t\tk=F(m,sx+1,sy,sx,sy);\n\t\t\tq.push((node){k,a.step+1});\n\t\t}\n\t\tif(sy>1){\n\t\t\tk=F(m,sx,sy-1,sx,sy);\n\t\t\tq.push((node){k,a.step+1});\n\t\t}\n\t\tif(sy<3){\n\t\t\tk=F(m,sx,sy+1,sx,sy);\n\t\t\tq.push((node){k,a.step+1});\n\t\t}\n\t\t\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1528001005,
        "uid": 57592,
        "name": "Cobalt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u663e\u7136\u5224\u91cd\u53ef\u4ee5\u7528map,\u7136\u800cmap\u592a\u6162\u4e86.\u4e8e\u662f\u6211\u5c31\u7528bitset,\u5f00\u4e5d\u4ebf\u4f3c\u4e4e\u4e0d\u4f1a\u70b8,\u7136\u800c\u871c\u6c41ce,\u7136\u540e\u5f00\u516b\u4f4d\u7b97\u4e86,\u6700\u540e\u4e00\u4f4d\u76f4\u63a5\u6254\u6389\n\n\u800c\u4e14\u8fd9\u6837\u8dd1\u5f97\u5f88\u5feb.\n\n\u672c\u6765\u6253\u7b97\u76f4\u63a5\u5728\u4e00\u4e2a9\u4f4d\u6570\u4e0a\u6a21\u6765\u6a21\u53bb\u641e\u4e00\u4e0b\u7136\u540e\u56db\u4e2a\u65b9\u5411\u592a\u9ebb\u70e6\u4e86\u6240\u4ee5\u5e72\u8106\u62c6\u5f00\u4ea4\u6362\u518d\u5408\u8d77\u6765\u5165\u961f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long T;\nlong long n;\nbitset<90000000> Map;\nstruct node\n{\n    long long a;\n    long long d;//\u5b580\u7684\u4f4d\u7f6e\n    long long s;//\u8bb0\u5f55\u6b65\u6570\n};\nqueue<node> q;\nnode u,v;\nlong long a[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\nlong long b[10];\ninline void rpk()\n{\n    b[1]=0;\n    for (long long i=1;i<=9;i++)\n    {\n        b[9-i+1]=v.a%10;\n        v.a/=10;\n    }//\u62c6\u62109\u4f4d\n    long long t=b[u.d];b[u.d]=b[v.d];b[v.d]=t;//\u4ea4\u6362\n    v.a=0;\n    for (long long i=1;i<=9;i++)\n    {\n        v.a+=b[i]*a[9-i];\n    }//\u518d\u62fc\u8d77\u6765\n    if (Map[v.a/10]==0) q.push(v);\n    Map[v.a/10]=1;\n}\nint main()\n{\n    scanf(\"%lld\",&n);\n    u.a=n;\n    for (long long i=1;i<=9;i++)\n    {\n        if ((n%10)==0) \n        {\n            u.d=9-i+1;\n            //cout<<u.d;\n            break;\n        }\n        n/=10;\n    }\n    Map[n/10]=1;//\u8d77\u70b9\u6807\u8bb0\n    T=123804765;\n    u.s=0;\n    q.push(u);\n    while (!q.empty())\n    {\n        u=q.front();q.pop();\n        if (u.d>3)//\u4e0d\u5728\u7b2c\u4e00\u884c\n        {\n            v.d=u.d-3;//\u6539\u53d80\u7684\u4f4d\u7f6e\n            v.a=u.a;\n            v.s=u.s+1;\n            rpk();\n            if (v.a==T)\n            {\n                printf(\"%lld\",u.s+1);\n                return 0;\n            }\n        }//\u4e0a\u79fb\n        if (u.d<7)//\u4e0d\u662f\u6700\u4e0b\u9762\u7684\u51e0\u884c\n        {\n            v.d=u.d+3;\n            v.a=u.a;\n            v.s=u.s+1;\n            rpk();\n            if (v.a==T)\n            {\n                printf(\"%lld\",u.s+1);\n                return 0;\n            }    \n        }\u4e0b\u79fb\n        if ((u.d%3==1)||(u.d%3==2))//\u4e0d\u662f\u6700\u540e\u4e00\u5217\u5c31\u53ef\u4ee5\u5de6\u79fb\n        {\n            v.d=u.d+1;\n            v.a=u.a;\n            v.s=u.s+1;\n            rpk();\n            if (v.a==T)\n            {\n                printf(\"%lld\",u.s+1);\n                return 0;\n            }        \n        }//\u5de6\u79fb\n        if (u.d%3!=1)//\u4e0d\u5728\u7b2c\u4e00\u5217\u5c31\u53ef\u4ee5\u53f3\u79fb\n        {\n            v.d=u.d-1;\n            v.a=u.a;\n            v.s=u.s+1;       \n            rpk();\n            if (v.a==T)\n            {\n                printf(\"%lld\",u.s+1);\n                return 0;\n            } \n            //cout<<v.a<<\"\\n\";\n        }//\u53f3\u79fb\n    }\n    return 0;\n}\n```",
        "postTime": 1502455980,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9898\u9898\u89e3\u6e05\u4e00\u8272\u7684\u5eb7\u6258\n\n\n\u6211\u89c9\u5f97\u8fd9\u771f\u7684\u5fc5\u8981\u4e48......\n\n\n\u72b6\u6001\u662f9\u4f4d\u6570\uff0c\u53ea\u8981\u77e5\u90538\u4e2a\u6570\u5b57\u53e6\u5916\u4e00\u4e2a\u81ea\u7136\u4e5f\u5c31\u77e5\u9053\u4e86\n\n\n\u6570\u5b570---8\u663e\u7136\u53ea\u8981\u4e5d\u8fdb\u5236\n\n\n\u90a3\u66b4\u529b\u5f00bool\u6876\u5c31\u597d\u4e86\u554a......\n\n\n\u4e3a\u4e86\u8282\u7ea6\u65f6\u95f4\u7528char\u8fdb\u884c\u7684\u7eaf\u5e7f\u641c\u65e0\u4f18\u5316\uff0c\u5171\u8ba11010ms\u3002\u867d\u7136\u4e0d\u5feb\uff0c\u4f46\u81f3\u5c11\u8fc7\u6240\u6709\u70b9\u4e5f\u662f\u65e0\u538b\u529b\u7684\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nbool ss[88888888];//\u6570\u5b57\u968f\u4fbf\u6253\u7684\nint i,j,k,m,n,h,t;char sans[10]={'0','1','2','3','8','0','4','7','6','5'};//\u6700\u7ec8\u72b6\u6001\nstruct ppp{\n    int f,x;\n    char t[10];\n}a[500001];\nvoid push(char s[10],int x,int ans)\n{\n    int anst=1,p=0;\n    for(int i=1;i<=8;i++)\u6c42\u8fd9\u4e2a\u6570\u5b57\u7684\u524d\u516b\u4f4d\u4e5d\u8fdb\u5236\u8868\u793a\n    {\n        p+=anst*(s[i]-48);\n        anst*=10;\n    }\n    if(ss[p])return;\n    ss[p]=1;\n    if(!strcmp(s,sans))\n    {\n        cout<<ans+1;\n        exit(0);\n    }\n    t++;\n    a[t].f=ans+1;strcpy(a[t].t,s);a[t].x=x;\n}\ninline void Swap(char &c1,char &c2)//\u624b\u5199\u7684\u7a0d\u5fae\u5feb\u4e00\u70b9\n{\n    char c3=c1;c1=c2;c2=c3;\n}\nint main()\n{\n    gets(a[1].t);\n    for(int i=9;i>=1;i--)\n    a[1].t[i]=a[1].t[i-1]; a[1].t[0]='0';//\u4e0d\u8981\u4ecb\u610f\uff0c\u6211\u89c9\u5f971---9\u8868\u793a\u770b\u8d77\u6765\u987a\u4e00\u70b9.........\n    for(i=1;i<=9;i++)if(a[1].t[i]=='0')break;\n    h=0,t=1;a[1].f=0;a[1].x=i;\n    while(h<t)//\u5e7f\u641c\u6a21\u7248\u90e8\u5206\n    {\n        h++;\n        int q=a[h].x;\n        if(q-3>=1)Swap(a[h].t[q],a[h].t[q-3]),push(a[h].t,q-3,a[h].f),Swap(a[h].t[q],a[h].t[q-3]);\n        if(q+3<=9)Swap(a[h].t[q],a[h].t[q+3]),push(a[h].t,q+3,a[h].f),Swap(a[h].t[q],a[h].t[q+3]);\n        if(q%3!=1)Swap(a[h].t[q],a[h].t[q-1]),push(a[h].t,q-1,a[h].f),Swap(a[h].t[q],a[h].t[q-1]);\n        if(q%3!=0)Swap(a[h].t[q],a[h].t[q+1]),push(a[h].t,q+1,a[h].f),Swap(a[h].t[q],a[h].t[q+1]);\n    }\n}\n```",
        "postTime": 1502022968,
        "uid": 6063,
        "name": "NephrenRuq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "    \n\n        \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint vis[362885],ss;  //visit\u6570\u7ec4\uff1a\u6b64\u5eb7\u6258\u5c55\u5f00\u503c\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \nconst int jc[]={1,1,2,6,24,120,720,5040,40320,362880};  //\u9636\u4e58\u6253\u8868 \nconst int dx[]={-1,1,0,0};  //\u63a7\u5236 \nconst int dy[]={0,0,-1,1};  //\u79fb\u52a8 \nstruct node{\n    int x,y;     //\u7ed3\u6784\u4f53\u4e2d-\u5750\u6807 \n    int step;    //\u6b65\u6570 \n    int a[10];   //\u6570\u5217 \n};\nnode target;     //\u5b9a\u4e49 target\u4e3a\u6700\u7ec8\u72b6\u6001\nqueue<node> q;\nint result(int a[])  //\u5eb7\u6258\u5c55\u5f00 \n{\n    int sum=0,num;\n    for(int i=0;i<9;i++){\n        num=0;\n        int cur=a[i];\n        for(int j=i+1;j<9;j++){\n            if(a[j]<cur) num++;\n        }\n        sum+=num*jc[8-i];    \n    }\n    return sum;\n}\nvoid bfs()\n{\n    while(!q.empty()){            //\u82e5\u961f\u5217\u4e0d\u4e3a\u7a7a \n        node cs=q.front();        //\u5c06\u5f53\u524d\u961f\u9996\u8d4b\u7ed9cs \n        q.pop();                  //\u5c06\u961f\u9996\u5f39\u51fa \n        if(result(cs.a)==ss) {    //\u82e5\u6b64\u65f6cs\u5eb7\u6258\u5c55\u5f00\u503c\u7b49\u4e8e\u6700\u7ec8\u72b6\u6001\u7684\u503c \n        printf(\"%d\\n\",cs.step) ;return ;}  //\u6253\u5370\u6b64\u65f6\u6b65\u6570\u5e76\u8fd4\u56de \n        int x=cs.x,y=cs.y,yl=x*3+y;       //\u82e5\u8fd8\u4e0d\u7b49\u4e8e\u6700\u7ec8\u503c  \u5b9a\u4e49x=\u539f\u6765\u884c\u6570\uff0cy=\u539f\u6765\u5217\u6570\uff0cyl= \u539f\u6765\u7a7a\u683c\u6240\u5728\u7684\u4f4d\u7f6e \n        for(int i=0;i<4;i++){    //\u5faa\u73af\uff1a\u5c1d\u8bd5\u5411\u56db\u4e2a\u65b9\u5411\u79fb\u52a8 \n            node ns;            //\u5b9a\u4e49\u79fb\u52a8\u540e\u7684ns \n            ns=cs;              //\u628a\u539f\u6765\u7684cs\u8d4b\u7ed9ns \n            int nx=x+dx[i];     //\u79fb\u52a8\u884c\u6570 \n            int ny=y+dy[i];        //\u79fb\u52a8\u5217\u6570 \n            if(nx>=0&&nx<3&&ny>=0&&ny<3){   //\u82e5\u672a\u51fa\u8fb9\u754c \n                int xz=nx*3+ny;        //\u5b9a\u4e49 xz=\u79fb\u52a8\u540e\u7684\u7a7a\u683c\u6240\u5728\u4f4d\u7f6e \n                ns.a[yl]=cs.a[xz];  //\u5c06\u4ea4\u6362\u7a7a\u683c\u4f4d\u7f6e\u7684\u503c\u4e0e\u7a7a\u683c\u4f4d\u7f6e\u7684\u503c\u4ea4\u6362 \n                ns.a[xz]=0;   //\u5c06\u4ea4\u6362\u7a7a\u683c\u4f4d\u7f6e\u7684\u503c\u4e0e\u7a7a\u683c\u4f4d\u7f6e\u7684\u503c\u4ea4\u6362 \n                ns.step=cs.step+1; //\u6b65\u6570+1 \n                ns.x=nx,ns.y=ny;   //\u5c06\u79fb\u52a8\u540e\u7684\u884c\u5217\u6570\u8d4b\u7ed9ns\u4e2d\u7684x\uff0cy \n            }\n            if(!vis[result(ns.a)]) {  //\u5982\u679c\u6b64\u6392\u5217\u7684\u5eb7\u6258\u5c55\u5f00\u672a\u88ab\u5360\u7528 \n                vis[result(ns.a)]=1;  //\u90a3\u4e48\u5c06\u6b64\u6392\u5217\u7684\u5eb7\u6258\u5c55\u5f00\u503c\u5360\u7528 \n                q.push(ns);            //\u5c06\u6b64\u6392\u5217\u653e\u5165\u961f\u5217 \n            }        \n        }\n    }\n}\nint main()\n{\n    char s[10];              //s[]\u8868\u793a\u521d\u59cb\u72b6\u6001 \n    scanf(\"%s\",s);\n    node start;              //\u5c06\u521d\u59cb\u5b57\u7b26\u578b\u8f6c\u6362\u4e3aint\u578b \n    for(int i=0;i<9;i++) start.a[i]=s[i]-'0';    //start.a[i]\u4e3a\u521d\u59cb\u7684\u6392\u5217 \n    for(int i=0;i<9;i++)\n        if(start.a[i]==0){                        //\u82e5\u51fa\u73b0\u7a7a\u683c \n            start.x=i/3;                       //start.x\u521d\u59cb\u884c \n            start.y=i%3;                       //start.y\u521d\u59cb\u5217 \n            break;\n        }                                     //\u627e\u5230\u521d\u59cb\u5750\u6807   start.x start.y \u521d\u59cb\u6570\u5217 start.a[] \n    start.step=0;                             //\u8bbe\u5f00\u59cb\u6b65\u6570\u4e3a0 \n    q.push(start);                            //\u5c06\u521d\u59cb\u72b6\u6001 start.x start.y start.a[] start.step\u653e\u8fdb\u961f\u5217 \n    vis[result(start.a)]=1;                  //\u521d\u59cb\u72b6\u6001\u7684\u6570\u5217\u5eb7\u6258\u5c55\u5f00\u503c\u5df2\u88ab\u5360\u7528 \n    int b[10]={1,2,3,8,0,4,7,6,5};            //\u6700\u7ec8\u72b6\u6001 \n    memcpy(target.a,b,sizeof(target.a));    //\u5c06b\u6570\u7ec4\uff08\u6700\u7ec8\u72b6\u6001\uff09\u7684\u503c\u8d4b\u7ed9target\u4e2d\u7684a\u6570\u7ec4 \n    ss=result(target.a);                    //\u5b9a\u4e49ss\u4e3a\u6700\u7ec8\u6570\u5217\u7684\u5eb7\u6258\u5c55\u5f00\u503c \n    bfs();\n    return 0;\n}\n\n```",
        "postTime": 1501558357,
        "uid": 50981,
        "name": "zxxdxlh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\uff0c\u8fd9\u9053\u9898\u505a\u4e862\u4e2a\u5c0f\u65f6\u591a\u3002\u3002\u6700\u540e\u53d1\u73b0\u5c45\u7136\u662f\u6ca1\u6709\u5224\u65ad\u662f\u4e0d\u662f\u975e\u6cd5\u79fb\u52a8\u3002\u3002\n\n\u9996\u5148\u53ea\u7528bfs\u662f\u4f1a\u8d85\u65f6\u7684\uff0c\u8fd9\u91cc\u6211\u7528\u4e86\u5eb7\u6258\u5c55\u5f00\uff0c\u4e3b\u8981\u662f\u5224\u91cd\u53ef\u4ee5\u7701\u65f6\u95f4\uff1b\n\n\u5eb7\u6258\u5c55\u5f00\u5927\u81f4\u610f\u601d\u5c31\u662f\u8ba9\u6bcf\u4e00\u79cd\u6392\u5217\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u8fd9\u6837\u5224\u91cd\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u4e00\u4e2a\u4e00\u4e2a\u6bd4\u5bf9\uff0c\u76f4\u63a5\u6bd4\u8f83\u7b97\u51fa\u6765\u7684\u6570\u5b57\u5c31\u884c\u4e86\u3002\u5177\u4f53\u5b9e\u9645\u65b9\u6cd5\u548c\u601d\u60f3\u8bf7\u81ea\u884c\u767e\u5ea6\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct abc{\n    int x[10];//\u961f\u5217\u4e2d\u6bcf\u4e2a\u90fd\u5b58\u4e0b\u6574\u4e2a\u6392\u5217\n    int w;//\u8bb0\u5f55\u7a7a\u683c\u5728\u54ea\n    int ans;//\u8bb0\u5f55\u5f53\u524d\u79fb\u52a8\u6b65\u6570\n};\nint k[]={1,1,2,6,24,120,720,5040,40320},a[4]={3,-3,-1,1},s[10],want;\nabc h[500000];\nchar o[10];\nbool z[500000];//\u6570\u7ec4\u5f00\u5927\u4e00\u70b9\uff0c\u4e0d\u7136\u4f1are\nint kang()//\u5eb7\u6258\u5c55\u5f00\n{\n    int sum=0,i,j,t;\n    for(i=1;i<=9;i++)\n    {\n        t=0;\n        for(j=i;j<=9;j++)\n        {\n            if(s[i]>s[j]) t++;\n        }\n        sum+=t*k[9-i];\n    }\n    return sum;\n} \nbool may(int kk,int p)//\u5224\u65ad\u79fb\u52a8\u662f\u5426\u5408\u6cd5\uff0c\u8fd9\u91cc\u53ea\u5224\u65ad\u4e24\u79cd\uff0c\u56e0\u4e3a\u5176\u4ed6\u7684\u60c5\u51b5\u6211\u5728bfs\u4e2d\u987a\u4fbf\u5224\u65ad\u4e86\n{\n    if(kk==3||kk==6||kk==9) \n        if(p==1) return false;\n    if(kk==4||kk==7) \n        if(p==-1) return false;    \n    return true;    \n}\nvoid bfs(int y)\n{\n    int i,head=0,tail=1;\n    for(i=1;i<=9;i++)\n        h[1].x[i]=s[i];    \n    z[kang()]=true;    \n    while(head<tail)//\u961f\u5217\u4e0d\u89e3\u91ca\n    {\n        head++;\n        for(i=0;i<4;i++)\n        {\n            y=h[head].w;\n            for(int j=1;j<=9;j++)\n                s[j]=h[head].x[j];//\u7528s\u6570\u7ec4\u6765\u5b58\u5c06\u8981\u8fdb\u884c\u79fb\u52a8\u7684\u72b6\u6001\n//\uff08\u7528\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\uff0c\u9632\u6b62\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\u65f6\u8fd9\u4e2a\u72b6\u6001\u88ab\u63d0\u524d\u6539\u53d8\uff09\n            if(y+a[i]>0&&y+a[i]<=9) \n            {\n                if(may(y,a[i])==false) continue;\n                swap(s[y],s[y+a[i]]);\n                if(z[kang()]) continue;\n                z[kang()]=true;\n                tail++;\n                for(int j=1;j<=9;j++)\n                h[tail].x[j]=s[j];\n                h[tail].w=y+a[i];\n                h[tail].ans=h[head].ans+1;    //\u6bcf\u79fb\u52a8\u4e00\u6b21\uff0c\u6b65\u6570\u52a01\uff08\u6ce8\u610f\u8981\u5728\u524d\u9762\u7684\u57fa\u7840\u4e0a\u52a01\uff09\n            }\n            if(kang()==want)//\u5982\u679c\u79fb\u52a8\u5230\u4e86\u76ee\u6807\u72b6\u6001\u5c31\u8f93\u51fa\uff0c\u56e0\u4e3abfs\u7684\u7279\u6027\uff0c\u6240\u4ee5\u4e00\u65e6\u79fb\u52a8\u5230\uff0c\u5c31\u662f\u6700\u5c11\u6b65\u6570\n            {\n                printf(\"%d\",h[tail].ans);\n                return ;\n            }\n        }\n    }\n}\nint main()\n{\n    int i,where;\n    memset(z,0,50000);//\u521d\u59cb\u5316z\u6570\u7ec4\n    cin>>o;\n    for(i=0;i<=8;i++)//\u7528\u5b57\u7b26\u6570\u7ec4\u8bfb\u5165\n    {\n        s[i+1]=o[i]-'0';//\u8f6c\u5316\u6210\u6570\u5b57\u5b58\u5165\u6570\u7ec4\n        if(s[i+1]==0) where=i+1;\n    }\n    want=46685;//\u63d0\u524d\u7b97\u51fa\u4ee3\u8868\u76ee\u6807\u72b6\u6001\u7684\u6570\u5b57\n    h[1].w=where;//\u5b58\u4e0b\u7a7a\u683c\u7684\u521d\u59cb\u4f4d\u7f6e\n    bfs(where);//\u5f00\u59cbbfs\n    return 0;\n}\n```",
        "postTime": 1500973018,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u5148\u540e\u5199\u8fc7\u4e09\u904d\u8fd9\u4e2a\u9898\u3002\n\n\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u7528\u7684\u662f bfs+\u5eb7\u6258\u5c55\u5f00 \u5728\u6570\u636e\u4fee\u6539\u4e4b\u524d\u56e0\u8be5\u662f\u53ef\u4ee5AC\u7684\uff0c\u5c31\u662f\u7528\u65f6\u5728\u8fb9\u7f18\u5f98\u5f8a\uff08\u6539\u4e86\u540e\u8fd8\u6ca1\u8bd5\u8fc7\uff09\n\n\u7b2c\u4e8c\u6b21\u7528\u7684\u662fA\\*+map \u4f46\u662f\u4f30\u503c\u51fd\u6570\u6ca1\u6709\u9009\u597d\uff0c\u7528\u7684\u662f\u6ca1\u6709\u5f52\u4f4d\u7684\u6570\u7801\u4e2a\u6570 \u5bfc\u81f4\u6709\u4e00\u4e2a\u70b9\u76f4\u63a5WA\uff0c\u901f\u5ea6\u4e5f\u53d7\u5230\u4e86\u5f71\u54cd\u518d\u52a0\u4e0a\u4f7f\u7528map\uff0c\u57fa\u672c\u4e0a\u57281000MS\u5de6\u53f3\n\n\u4eca\u5929\u7a81\u7136\u60f3\u8d77\u6765\uff0c\u5c31\u91cd\u65b0\u5199\u4e86\u4e00\u904d\uff0cA\\*+\u5eb7\u6258\u5c55\u5f00\uff0c\u5e76\u4e14\u6362\u7528\u6bcf\u4e00\u4e2a\u6570\u7801\u5230\u76ee\u6807\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u901f\u5ea6\u679c\u7136\u63d0\u5347\u3002\u76f4\u63a5\u4e0a\u523042MS\n\n\u4e0b\u9762\u662f\u98ce\u683c\u9b3c\u755c\u7684\u4ee3\u7801\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<string>\nusing namespace std;\nint des[10]={1,2,3,8,0,4,7,6,5,0};\nint dpos[10]={4,0,1,2,5,8,7,6,3,0};//\u9884\u5904\u7406\u76ee\u6807 \nbool vis[1000000];\nint fact[]={1,1,2,6,24,120,720,5040,40320,362880};//\u9636\u4e58\u8868 \nint ch(int * c){//\u5eb7\u6258\u5c55\u5f00 \n    int n=0;\n    int len=9;\n    for(int i=0;i<len;i++){\n        int cnt = 0;\n        for(int j=i+1;j<len;j++) if(c[i]>c[j]) cnt++;\n        n+=    fact[len-1-i] * cnt;\n    }\n    return n;\n}\nstruct node\n{\n    int state[10];\n    int h(){\n        int ret=0;\n        for(int i=0;i<9;i++){    //\u8ba1\u7b97\u65b9\u6cd5\u4e3a\u6240\u6709\u6570\u7801\u5230\u76ee\u6807\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e4b\u548c \n                int sx=i%3,sy=i/3;\n                int dx=dpos[state[i]]%3,dy=dpos[state[i]]/3;\n                ret+=abs(dx-sx)+abs(dy-sy);\n            }\n        return ret;\n    }\n    int f;\n    int step;\n    node(int rs[],int rstep){\n        for(int i=0;i<9;i++){\n            state[i]=rs[i]; }\n        step=rstep;\n    }\n    node(){ }\n    void judge(){f=step+h();}\n    bool operator <(const node &a) const{\n        return f>a.f;//\u4f30\u503c\u8d8a\u5c0f \u8d8a\u4f18\u5148 \n    }\n};\npriority_queue<node > qn;\nint fdz(int * state){\n    for(int i=0;i<9;i++)\n        if(state[i]==0)\n            return i;\n}\nbool tryleft(int * state,int pos){\n    if(pos%3==0) return false;\n    swap(state[pos],state[pos-1]);\n    return true;\n}\nbool tryright(int * state,int pos){\n    if(pos%3==2) return false;\n    swap(state[pos],state[pos+1]);\n    return true;\n}\nbool tryup(int * state,int pos){\n    if(pos/3==0) return false;\n    swap(state[pos],state[pos-3]);\n    return true;\n}\nbool trydown(int * state,int pos){\n    if(pos/3==2) return false;\n    swap(state[pos],state[pos+3]);\n    return true;\n}\nbool cmp(int * a,int * b){\n    for(int i=0;i<9;i++)\n        if(a[i]!=b[i])    return 0;\n    return 1;\n}\nint Astar(){\n    while(!qn.empty()){\n        node org;\n        node nstate=qn.top();\n        int step=nstate.step;\n        if(cmp(nstate.state,des))\n            return step;\n        int pos=fdz(nstate.state);\n        qn.pop();\n        org=nstate;\n        if(tryleft(org.state,pos))\n            if(!vis[ch(org.state)]){                    \n                node newn(org.state,step+1);\n                newn.judge();\n                vis[ch(org.state)]=1;\n                qn.push(newn);\n            }\n        org=nstate;\n        if(tryright(org.state,pos))\n            if(!vis[ch(org.state)]){\n                node newn(org.state,step+1);\n                newn.judge();\n                vis[ch(org.state)]=1;\n                qn.push(newn);\n            }\n        org=nstate;\n        if(tryup(org.state,pos))\n            if(!vis[ch(org.state)]){\n                node newn(org.state,step+1);\n                newn.judge();\n                vis[ch(org.state)]=1;\n                qn.push(newn);\n            }\n        org=nstate;\n        if(trydown(org.state,pos))\n            if(!vis[ch(org.state)]){\n                node newn(org.state,step+1);\n                newn.judge();\n                vis[ch(org.state)]=1;\n                qn.push(newn);\n            }\n    }\n    return -1;\n}\nint main()\n{\n    int start[9];\n    char s[10];\n    gets(s);\n    for(int i=0;i<9;i++)\n        start[i]=s[i]-'0';\n    node st(start,0);\n    vis[ch(start)]=1;\n    st.judge();\n    qn.push(st);\n    int ans=Astar();\n    if(ans!=-1) printf(\"%d\",ans);\n    else printf(\"No\");\n    return 0;\n}\n\u540c\u4e00\u9053\u9898\uff0c\u5728\u4e0d\u540c\u7684\u65f6\u6bb5\u80fd\u5199\u51fa\u8d28\u91cf\u5b8c\u5168\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u770b\u6765OI\u4e4b\u8def\u8fd8\u5f88\u957f\u554a\n```",
        "postTime": 1499238695,
        "uid": 39907,
        "name": "Rockdu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u4f7f\u7528map\u5e7f\u641c\u538b\u4f4d\u548c\u795e\u5947\u768410\u8fdb\u5236\u4f4d\u8fd0\u7b97\u6765\u7f29\u77ed\u4ee3\u7801\u957f\u5ea6\u548c\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\n\n\u601d\u8def\u540c\u4e0a\uff0c\u5b9e\u73b0\u65b9\u5f0f\u66f4\u4fbf\u4e8e\u7406\u89e3\uff1a\u4e0d\u7528\u5eb7\u6258\u5c55\u5f00\uff0c\u4e0d\u7528\u5b57\u7b26\u4e32\uff0c\u9644\u6709\u6ce8\u91ca\u56fe\u793a\n\n\n\n\n\n\n\n\n\n        \n\n```cpp\n#include <iostream>\n#include <cstdio> \n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <cmath>\nusing namespace std;\n#define ll long long\n#define BASIC 123456780\n#define GOAL1 123456780\n#define pli pair<ll,int>\n#define x first\n#define y second\n// 8 7 6            1 2 3            1 2 3            1 2 3\n// 5 4 3            4 5 6            4 5 0            4 0 5\n// 2 1 0            7 8 0            7 8 6            7 8 6\n// 876543210        BASIC            GOAL1            GOAL2\nmap <ll,int> f; \npli q[1000000];\nll F(ll S, ll p, int direct)\n{\n    int b, c = log10(p)+.1;\n    switch(direct)\n    {\n        case 0://left\n        {\n            if(!(-~c%3))\n                return -1;\n            else\n            {\n                b = S/(p*10) % 10;\n                return S-b*p*9;\n            }\n        }\n        case 1://up\n        {\n            if(c > 5)\n                return -1;\n            else\n            {\n                b = S/(p*1000) % 10;\n                return S-b*p*999;\n            }\n        }\n        case 2://right\n        {\n            if(!(c%3))\n                return -1;\n            else\n            {\n                b = (S*10)/p % 10;\n                return S+b*p*9/10;\n            }\n        }\n        case 3://down\n        {\n            if(c < 3)\n                return -1;\n            else\n            {\n                b = (S*1000)/p % 10;\n                return S+b*p*999/1000;\n            }\n        }\n    }\n    return -1;\n}\nvoid Robot(ll S)\n{\n    int head = 0, tail = 1;\n    f[S] = 1;\n    q[0] = pli(S,1);\n    ll p; \n    while(head < tail)\n    { \n        pli t = q[head++];\n        for(p = 1; p <= 100000000; p *= 10)\n            if(!(t.x/p % 10))\n                break;    \n        for(int i = 0, N; i < 4; i++)\n            if((N = F(t.x,p,i))+1 && !f[N])\n                f[N] = t.y+1, q[tail++] = pli(N,f[N]);\n    } \n    return;\n}\nint main()\n{\n    ll a;\n    cin >> a;\n    Robot(a);\n    cout << f[123804765]-1 << endl;\n    return 0;\n}\n```",
        "postTime": 1477576714,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u9898\u89e3\u91cc\u6ca1\u6709A\\*\u7b97\u6cd5\u548c\u53cc\u5411\u5bbd\u641c\u7684\u4ee3\u7801\uff0c\u90a3\u6211\u5c31\u732e\u4e00\u4e0b\u4e11\u5427\n\n\u5148Orz\u697c\u4e0b\u66b4\u529b\u5bbd\u641cAC\u7684\u5927\u795e\uff0c\u53e6\u5916\u5728\u4e0b\u4e5f\u662f\u521a\u5b66\u8fd9\u4e9b\u4e1c\u897f\uff0c\u53ef\u80fd\u8bb2\u5f97\u4e0d\u597d\n\nA\\*\uff1a\u4e2a\u4eba\u8ba4\u4e3aA\\*\u6bd4\u53cc\u5411\u5bbd\u641c\u597d\u5199\u7684\u591a\uff0c\u4ee3\u7801\u957f\u5ea6\u4e5f\u662f\u5f88\u77ed\uff0c\u4f30\u4ef7\u51fd\u6570\u975e\u5e38\u5bb9\u6613\u60f3\u5230\uff0c\u5373\u5f53\u524d\u6240\u67091-8\uff08\u4e0d\u5305\u62ec0\uff09\u6570\u5b57\u4f4d\u7f6e\u4e0e\u76ee\u6807\u4f4d\u7f6e\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u5728\u8fd9\u91cc\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7591\u95ee\uff1a\u4e3a\u4ec0\u4e48\u662f\u4e0d\u5305\u62ec0\u7684\uff1f\u6211\u521a\u5f00\u59cb\u4e5f\u662f\u6253\u4e0a0\uff0c\u7684\u4ed4\u7ec6\u7814\u7a76\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u90fd\u504f\u59272\u5de6\u53f3\uff08\u5176\u5b9e\u628aAns-2\u4e5f\u53ef\u4ee5A\u4e86\u6570\u636e\u592a\u6c34\uff09\u540e\u6765\u53d1\u73b0\uff1a\u53ea\u89811-8\u7684\u6570\u5b57\u90fd\u5b8c\u7f8e\u5730\u548c\u76ee\u6807\u4f4d\u7f6e\u5339\u914d\u4e86\uff0c\u90a30\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u7531\u79fb\u52a8\u7684\u6570\u5b57\u4e5f\u81ea\u7136\u5728\u76ee\u6807\u4f4d\u7f6e\u4e0a\u4e86\uff0c\u6545\u53ef\u4ee5\u4f30\u4ef7\u7684\u65f6\u5019\u4e0d\u7edf\u8ba1\uff08\u5728\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u628a0\u770b\u6210\u4e00\u4e2a\u9700\u8981\u8f6c\u79fb\u5230\u76ee\u6807\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff0c\u800c\u662f\u4e0d\u5b58\u5728\u7684\u7f3a\u53e3\uff0c\u53ef\u80fd\u4f1a\u6709\u52a9\u4e8e\u7406\u89e3\uff09\u63a5\u4e0b\u6765\u53ef\u4ee5\u8fed\u4ee3\u679a\u4e3e\u7b54\u6848\uff0c\u6bcf\u6b21\u8bb0\u5f550\u5750\u6807\u5373\u53ef\uff0c\u82e5  \u5f53\u524d\u4f30\u4ef7\u503c+\u5f53\u524d\u6b65\u6570>\u7b54\u6848  \u5219\u526a\u679d\uff08\u56e0\u4e3a\u4f30\u4ef7\u503c\u662f\u4e00\u4e2a\u5b8c\u6210\u5339\u914d\u7684\u6700\u4f4e\u9650\uff09\u3002\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nstruct A{int x,y;};\nint a[3][3],flag,stx,sty,Ans;\nint p1[4]={1,-1,0,0};int p2[4]={0,0,1,-1};\nint gx[9]={1,0,0,0,1,2,2,2,1};\nint gy[9]={1,0,1,2,2,2,1,0,0};\nint Guess(){\n    A z[9]={0};int sum=0;\n    for(int i=0;i<=2;i++)\n        for(int j=0;j<=2;j++)\n            z[a[i][j]].x=i,z[a[i][j]].y=j;\n    for(int i=1;i<9;i++)\n        sum+=(abs(z[i].x-gx[i])+abs(z[i].y-gy[i]));\n    return sum;\n}\nvoid Dfs(int now,int goal,int x,int y){\n    if(now>goal)return;\n    if(flag)return;int v=Guess();\n    if(v==0){flag=1;return;}\n    if(now+v>goal)return;\n    for(int k=0;k<4;k++){\n        int nx=x+p1[k];int ny=y+p2[k];\n        if(nx<0||nx>2||ny<0||ny>2)continue;\n        swap(a[x][y],a[nx][ny]);\n        Dfs(now+1,goal,nx,ny);\n        swap(a[x][y],a[nx][ny]);\n    }\n}\nint main(){\n    char ch[10];scanf(\"%s\",ch);\n    int k=0;\n    for(int i=0;i<3;i++)\n    for(int j=0;j<3;j++){\n        a[i][j]=ch[k]-'0',k++;\n        if(a[i][j]==0)stx=i,sty=j;\n    }Ans=-1;\n    while(!flag)\n        Ans++,Dfs(0,Ans,stx,sty);\n    printf(\"%d\\n\",Ans);\n    return 0;\n}\n)\n```\n\u53cc\u5411\u5bbd\u641c\uff1a\u4ee3\u7801\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u7528\u5230\u79bb\u6563\u548c\u5eb7\u6258\u5c55\u5f00\uff0c\u57fa\u672c\u601d\u60f3\u4e0e\u666e\u901a\u53cc\u5411\u5bbd\u641c\u4e00\u6837\uff0c\u4ece\u76ee\u6807\u72b6\u6001\u548c\u8d77\u59cb\u72b6\u6001\u540c\u65f6\u5f00\u59cb\u641c\u7d22\uff0c\u82e5\u4e00\u65b9\u6269\u5c55\u5230\u53e6\u4e00\u65b9\u66fe\u5230\u8fbe\u8fc7\u7684\u72b6\u6001\uff0c\u5373\u8f93\u51fa\u4e24\u8005\u6b65\u6570\u4e4b\u548c\u7ec8\u6b62\u7a0b\u5e8f\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nstruct A{int a[3][3];}q[2][1000005];\nint p1[4]={1,-1,0,0};int p2[4]={0,0,1,-1};\nint Ans[2][1000005];int head[2]={1,1};int tail[2]={2,2};\nint Contor(int x){\n    int Fac[10]={1,1,2,6,24,120,720,5040,40320,362880},m[9];\n    for(int i=9;i>=1;i--)m[i]=x%10,x/=10;int Ret=0;\n    for(int i=1;i<=9;i++){\n        int tmp=0;\n        for(int j=i+1;j<=9;j++)\n            if(m[i]>m[j])tmp++;\n        Ret+=tmp*Fac[9-i];\n    }return Ret;\n}\nint HASH(int a[3][3]){\n    int x=0,k=1;\n    for(int i=2;i>=0;i--)\n    for(int j=2;j>=0;j--)\n        x+=a[i][j]*k,k*=10;\n    return Contor(x);\n}\nvoid Bfs(int m){\n    for(int i=0;i<3;i++)\n        for(int j=0;j<3;j++)\n            q[m][tail[m]].a[i][j]=q[m][head[m]].a[i][j];\n    int x,y;int s=HASH(q[m][head[m]].a);\n    for(int i=0;i<3;i++)\n        for(int j=0;j<3;j++)\n            if(q[m][head[m]].a[i][j]==0)x=i,y=j;\n    for(int k=0;k<4;k++){\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                q[m][tail[m]].a[i][j]=q[m][head[m]].a[i][j];\n        int nx=x+p1[k];int ny=y+p2[k];\n        if(nx<0||nx>2||ny<0||ny>2)continue;\n        swap(q[m][tail[m]].a[x][y],q[m][tail[m]].a[nx][ny]);\n        int now=HASH(q[m][tail[m]].a);\n        if(Ans[m][now]==-1){\n            Ans[m][now]=Ans[m][s]+1;\n            if(Ans[1][now]!=-1&&Ans[0][now]!=-1)\n                {printf(\"%d\\n\",Ans[1][now]+Ans[0][now]);exit(0);}\n            tail[m]++;\n        }\n    }head[m]++;\n}\nvoid Work(){\n    while(1)\n        if(head[0]-tail[0]<=head[1]-tail[1])Bfs(0);\n        else Bfs(1);\n}\nint main(){\n    char ch[10];scanf(\"%s\",ch);\n    int k=0;\n    for(int i=0;i<3;i++)\n    for(int j=0;j<3;j++)\n        q[0][1].a[i][j]=ch[k]-'0',k++;\n    q[1][1].a[0][0]=1;q[1][1].a[0][1]=2;q[1][1].a[0][2]=3;\n    q[1][1].a[1][0]=8;q[1][1].a[1][1]=0;q[1][1].a[1][2]=4;\n    q[1][1].a[2][0]=7;q[1][1].a[2][1]=6;q[1][1].a[2][2]=5;\n    memset(Ans,-1,sizeof Ans);\n    Ans[0][HASH(q[0][1].a)]=Ans[1][HASH(q[1][1].a)]=0;\n    Work();return 0;\n}\n\n```",
        "postTime": 1460473218,
        "uid": 9193,
        "name": "a526955194",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u7531\u660e\u786e\u7684\u4e24\u79cd\u72b6\u6001\u53ef\u4ee5\u60f3\u5230\n\nD(double)BFS\u5373\u53cc\u5411BFS \n\n\u8f93\u5165\u7684\u662f\u4e2a\n\n```cpp\n283104765\n```\n\n\u7136\u800c \u51e1\u662f\u641c\u7d22\u90fd\u6709\u4e2a\u6807\u8bb0\u5373vis[]\n\n\u4f46 \u6309\u9898\u610f3 * 3\u7684\u5730\u56fe\u4e0d\u597d\u6807\u8bb0\uff08\u4e5f\u8bb8\u7528map\u53ef\u4ee5\uff09\n\n\n\u4e8e\u662f\u76f4\u63a5\u7528\u4e00\u7ef4dir\u6570\u7ec4\u6539\u6210\n\n```cpp\nint dir[4] = {1,-3,-1,3};\n```\n\n\u4f46\u4e5d\u4f4d\u6570\u4e5f\u662f\u5f00\u4e0d\u4e86\u7684\n\n\u5c31\u6709\u4e00\u4e2acantor\u5c55\u5f00\u5f0f\n\n\u72b6\u6001\u538b\u7f29\u4e00\u4e0b\n\n```cpp\ninline int cantor(int a[])\n{\n\tint i,j,ans = 0;\n\tfor(i = 0;i < 9;i++)\n\t{\n\t\tint s = 0;\n\t\tfor(j = i + 1;j < 9;j++)\n\t\t\tif(a[j] < a[i]) s++;\n\t\tans += s * fac[8 - i];\n\t}\n\treturn ans;\n}\n```\n\n\u7136\u540e\u5c31\u884c\u4e86 DBFS\u76f4\u63a5\u5957\u677f\u5b50\u554a\n\n## \u4f18\u5316\n\n\u5176\u5b9e\u5c31\u4e0a\u9762\u7684\u597d\u50cf\u5c31\u53ef\u4ee5\u8fc7\u4e86\n\n\u4f46\u8fd8\u6709\u4e2a\u4f18\u5316\n\n\u4e0e**\u9006\u5e8f\u5bf9**\u6709\u5173\n\n\u5c063 * 3 \u7684\u56fe \u5f04\u6210\u5e8f\u5217\n\n>\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\u521d\u59cb\u72b6\u6001\u7684\u9006\u5e8f\u5bf9\u6a212\u5fc5\u987b\u7b49\u4e8e\u76ee\u6807\u72b6\u6001\u7684\u9006\u5e8f\u5bf9\u6a212\uff0c\u5426\u5219\u65e0\u6cd5\u8fbe\u6210\uff0c\u8f93\u51fa-1\n\n#### \u8bc1\u660e\n\n\u53ef\u4ee5\u8f6c\u4e3a **\u521d\u59cb\u72b6\u6001\u65e0\u8bba\u5982\u4f55\u6539\u53d8\u5176\u5947\u5076\u6027\u4e0d\u53d8**\n\n\u4f4d\u7f6e\u56fe\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\n\n\u5c063 * 3 \u7684\u56fe \u5f04\u6210\u5e8f\u5217\n\n1 2 3 4 5 6 7 8 9\n\n**\u6ce8\u610f** 0 \u4e0d\u7b97\u5165\u961f\u5217 \u6240\u4ee5\u4e0a\u9762\u5b9e\u9645\u4e0a\u662f8\u4e2a\n\n~~\n\n2 8 3\n\n1 0 4\n\n7 6 5\n\n\u53ef\u89c1 \u5f53\u4f4d\u7f6e5\u76840\u4e0e\u4f4d\u7f6e8\u76846\u4ea4\u6362\u4f1a\u6709\u51e0\u79cd\u60c5\u51b5\n\n\u4f4d\u7f6en\u7684\u6570 \u4e3a\u65b9\u4fbf\u7b80\u5199\u4e3a\uff08n\uff09\n\nCase1\uff1a\uff086\uff09\u548c\uff087\uff09\u4e2d\u67090\u4e2a\u6bd4\uff088\uff09\u5c0f\n\n\u5219\u9006\u5e8f\u5bf9+ 2\n\nCase2:\uff086\uff09\u548c\uff087\uff09\u4e2d\u67091\u4e2a\u6bd4\uff088\uff09\u5c0f\n\n\u5219\u9006\u5e8f\u5bf9- 1 + 1\n\nCase2:\uff086\uff09\u548c\uff087\uff09\u4e2d\u67092\u4e2a\u6bd4\uff088\uff09\u5c0f\n\n\u5219\u9006\u5e8f\u5bf9+ 2\n\n\u7efc\u4e0a\u9006\u5e8f\u5bf9\u5947\u5076\u6027\u4e0d\u53d8\n\n\u5176\u5b83\u4ea4\u6362\u60c5\u51b5\u53ef\u4ee5\u7c7b\u4f3c\u8ba8\u8bba\n\n\n## \u4ee3\u7801\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <vector>\n#include <cstring>\nusing namespace std;\nconst int MAXN = 400000;\nint step[2][MAXN],fac[10] = {1,1,2,6,24,120,720,5040,40320,362880};\nbool vis[2][MAXN];\nint dir[4] = {1,-3,-1,3};\n\n//cantor\u72b6\u6001\u538b\u7f29\ninline int cantor(int a[])\n{\n\tint i,j,ans = 0;\n\tfor(i = 0;i < 9;i++)\n\t{\n\t\tint s = 0;\n\t\tfor(j = i + 1;j < 9;j++)\n\t\t\tif(a[j] < a[i]) s++;\n\t\tans += s * fac[8 - i];\n\t}\n\treturn ans;\n}\nstruct Node\n{\n\tint word[9],loc,ca;\n\tbool f;\n\tvoid node(int Word[],int LOC,int CA,bool F)\n\t{\n\t\tfor(int i = 0;i < 9;i++) word[i] = Word[i];\n\t\tloc = LOC,ca = CA,f = F;\n\t}\n}Start,order;\ninline int dbfs()\n{\n\tqueue<Node> q;\n\tStart.f = 1,order.f = 0;\n\tq.push(Start);\n\tq.push(order);\n\tint i;\n\twhile(!q.empty())\n\t{\n\t\tNode tmp = q.front();\n\t\tq.pop();\n\t\tif(vis[!tmp.f][tmp.ca])\n\t\t\treturn (step[1][tmp.ca] + step[0][tmp.ca]);\n\t\tint Step = step[tmp.f][tmp.ca];\n\t\tfor(i = 0;i < 4;i++)\n\t\t{\n\t\t\tint poss = tmp.loc + dir[i];\n            \n            //\u7531\u4e8edir\u6570\u7ec4\u6539\u4e86 \u5224\u65ad\u4e5f\u5f97\u6539\n\t\t\tif(0 <= poss&&poss < 9&&(tmp.loc % 3 == poss % 3||tmp.loc / 3 == poss / 3))\n\t\t\t{\n\t\t\t\tswap(tmp.word[tmp.loc],tmp.word[poss]);\n\t\t\t\tint nca = cantor(tmp.word);\n\t\t\t\tif(!vis[tmp.f][nca])\n\t\t\t\t{\n\t\t\t\t\tNode g;\n\t\t\t\t\tvis[tmp.f][nca] = 1;\n\t\t\t\t\tstep[tmp.f][nca] = Step + 1;\n\t\t\t\t\tg.node(tmp.word,poss,nca,tmp.f);\n\t\t\t\t\tq.push(g);\n\t\t\t\t}\n\t\t\t\tswap(tmp.word[tmp.loc],tmp.word[poss]);\t\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\n//\u4f18\u5316 \u6c42\u9006\u5e8f\u5bf9\ninline int cutdown(int a[])\n{\n\tint i,j,q = 0;\n\tfor(i = 0;i < 9;i++)\n\t\tfor(j = i + 1;j < 9;j++)\n\t\t\tif(a[i] != 0&&a[j] != 0&&a[j] < a[i]) q++;\n\treturn q;\n}\nint main()\n{\n\tint i;\n\tfor(i = 0;i < 9;i++) \n\t{\n\t\tscanf(\"%d\",&Start.word[i]);\n\t\tif(!Start.word[i]) Start.loc = i;\n\t}\n\tfor(i = 0;i < 9;i++)\n\t{\n\t\tscanf(\"%d\",&order.word[i]);\n\t\tif(!order.word[i]) order.loc = i;\n\t}\n    //\u4f18\u5316\n\tif(cutdown(Start.word) % 2 != cutdown(order.word) % 2)\n\t{\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\tStart.ca = cantor(Start.word);\n\tvis[1][Start.ca] = 1;\n\torder.ca = cantor(order.word);\n\tvis[0][order.ca] = 1;\n\tprintf(\"%d\",dbfs());\n\treturn 0;\n}\n```",
        "postTime": 1557631111,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u2014\u2014\u516b\u6570\u7801\u96be\u9898"
    },
    {
        "content": "# \u516b\u6570\u7801\u96be\u9898\u9898\u89e3\n\u8fd9\u9898\u5f88\u660e\u663e\u662f\u8981\u7528BFS\uff0c\u4f46\u662f\u6211\u6709\u4e09\u79cd\u89e3\u51b3\u529e\u6cd5\uff1a\n## \u89e3\u51b3\u601d\u8def1\n\n\u6211\u4eecBFS\u7684\u65b9\u6cd5:\u6bcf\u64cd\u4f5c\u4e00\u6b21\u540e\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u68cb\u76d8\u72b6\u6001,\u5982\u679c\u8fd9\u4e2a**\u72b6\u6001**\u662f\u6ca1\u6709\u9047\u89c1\u8fc7\u7684,\u5c31\u52a0\u5165\u961f\u5217,\u5982\u679c\u9047\u89c1\u8fc7,\u5c31\u4e22\u5f03,\u5982\u679c\u8fd9\u4e2a\u65b0\u72b6\u6001\u662f\u76ee\u6807\u72b6\u6001,\u5c31\u8f93\u51fa\u662f\u7b2c\u51e0\u6b65\u64cd\u4f5c.\u5f53\u7136\u6211\u4eec\u8981\u89e3\u51b3\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898.\n\n### \u5982\u4f55\u5b58\u72b6\u6001\n\n\u6700\u7b80\u5355\u7684\u60f3\u6cd5,\u56e0\u4e3a\u6700\u5927\u7684\u72b6\u6001\u53ef\u4ee5\u7528\u6570\u5b57`876543210`\u6765\u8868\u793a,\u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4`bool vis[876543210+1]`\u6765\u8868\u793a\u67d0\u4e2a\u72b6\u6001\u662f\u4e0d\u662f\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86,\u7b97\u4e00\u4e0b\u5185\u5b58\u5360\u7528:876543211\u4e2abyte\u5c31\u662f`876543211 / 1024 /1024 = 835.9367475509644 mb`,\u660e\u663e\u8d85\u8fc7\u4e86\u9898\u76ee\u8981\u6c42\u7684`128mb`\n\n\u4e5f\u53ef\u4ee5\u7528`bool vis[9][9][9][9][9][9][9][9][9]`9\u7ef4\u6570\u7ec4\u6765\u8868\u793a,\u90a3\u5171\u5360\u7528\u5185\u5b58$$ 9 ^ 9 = 387420489$$byte.\u4e5f\u5c31\u662f`387420489 /1024/1024 = 369.4729700088501mb`,\u6bd4\u4e0a\u9762\u597d\u591a\u4e86,\u4f46\u4e5f\u8d85\u8fc7\u4e86`128mb`.\n\n\u4ed4\u7ec6\u60f3\u4e00\u60f3\u6211\u4eec\u53ef\u4ee5\u7528**8\u7ef4\u6570\u7ec4**\u6765\u5b58\u72b6\u6001,\u53ea\u5b58\u524d\u9762\u76848\u4e2a\u6570\u503c\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6570\u503c\u53ef\u4ee5\u63a8\u5bfc\u51fa\u6765\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8d85\u5185\u5b58\u4e86\u3002\n\n### \u5982\u4f55\u64cd\u4f5c\n\n\u6211\u7528\u4e00\u4e2a8\u4f4d\u6570\u6765\u8868\u793a\u72b6\u6001,\u53ef\u4ee5\u7528`state2map`\u51fd\u6570\u628a\u6570\u5b57\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4,\u7136\u540e\u7528`find0`\u51fd\u6570\u6765\u627e\u52300\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e,\u7136\u540e\u628a0\u548c\u4e0a\u4e0b\u5de6\u53f3\u7684\u56db\u4e2a\u4f4d\u7f6e\u7684\u4ea4\u6362\u4e00\u4e0b,\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4e8c\u7ef4\u6570\u7ec4,\u518d\u628a\u8fd9\u4e2a\u6570\u7ec4\u7528`map2state`\u51fd\u6570\u8f6c\u5316\u6210\u6570\u5b57\u5c31ok\u4e86\n\n\n### **\u4ee3\u7801**\n\n\u4fee\u6539\u62108\u7ed9\u6570\u7ec4\uff0ctodo\uff01\uff01\uff01\n```c\n#include <cstdio>\n#include <cstring>\n\n\n//bool vis[876543210+1]; //876543211 byte 876543211 /1024 kb/1024mb = 835mb \u6839\u672c\u5b58\u4e0d\u4e0b\u8fd9\u4e48\u591a\u7684\u72b6\u6001\n\n\n//\u4f7f\u75289\u7ef4\u6570\u7ec4\u6765\u5b58\nbool vis[9][9][9][9][9][9][9][9][9] = {0}; //9*9 = 81 \u4e2abyte\nint fx[4][2] ={ {1,0}, {0,1}, {-1,0}, {0,-1} };\n\nvoid state2map(int map[4][4],int state){\n    int i;\n    for(i=8;i>=0;i--){\n        int t= state % 10;\n        state /= 10;\n        map[i/3+1][i % 3+1] = t; // 8/3+1 =3 8%3+1 = 3 \n                                 // 0/3+1 =1 0%3+1 = 1\n    }\n}\n\nint map2state(int map[4][4]){\n    int r = 0;\n    int i;\n    for(i=8;i>=0;i--){\n        r = r*10+map[i/3+1][i % 3+1];\n    }\n    return r;\n}\n\n// \u627e\u52300\u7684\u4f4d\u7f6e\nvoid find0(int map[4][4],int &x,int &y){\n    int i,j;\n    for(i=1;i<=3;i++)\n        for(j=1;j<=3;j++){\n            if( map[i][j] == 0){\n                x = i,y = j;\n                return ;\n            }\n        }\n}\n\n//--------- \u8bbe\u5b9a\u67d0\u4e2a\u72b6\u6001\u5df2\u7ecf\u8bbf\u95ee\u7684\u64cd\u4f5c\nvoid setVis(int state){\n    int t1  = state % 10;  state /= 10;\n    int t2  = state % 10;  state /= 10;\n    int t3  = state % 10;  state /= 10;\n    int t4  = state % 10;  state /= 10;\n    int t5  = state % 10;  state /= 10;\n    int t6  = state % 10;  state /= 10;\n    int t7  = state % 10;  state /= 10;\n    int t8  = state % 10;  state /= 10;\n    int t9  = state % 10;  state /= 10;\n    vis[t9][t8][t7][t6][t5][t4][t3][t2][t1] = 1;\n}\n\n// \u8fd4\u56de0 \u8868\u793a\u6ca1\u6709\u8bbf\u95ee\u8fc7\nbool isVis(int state){\n    int t1  = state % 10;  state /= 10;\n    int t2  = state % 10;  state /= 10;\n    int t3  = state % 10;  state /= 10;\n    int t4  = state % 10;  state /= 10;\n    int t5  = state % 10;  state /= 10;\n    int t6  = state % 10;  state /= 10;\n    int t7  = state % 10;  state /= 10;\n    int t8  = state % 10;  state /= 10;\n    int t9  = state % 10;  state /= 10;\n    return vis[t9][t8][t7][t6][t5][t4][t3][t2][t1];\n}\n\n//--------- \u8bbe\u5b9a\u67d0\u4e2a\u72b6\u6001\u5df2\u7ecf\u8bbf\u95ee\u7684\u64cd\u4f5c -- end\n\n\nstruct _node {\n    int state;\n    int step;\n};\n\n\n//-------------- \u961f\u5217\u64cd\u4f5c\n#define qsize 1000000\n_node queue[qsize]; //\u56e0\u4e3a\u4e0d\u77e5\u9053\u6700\u5927\u6b65\u6570,\u4f7f\u7528\u5faa\u73af\u961f\u5217\nint idx=0;\nint head=0,tail =0;\n\nvoid push(_node t){\n    queue[tail]= t;\n    tail = (tail+1) % qsize; //tail \u6700\u5927 qsize-1\n}\n\nvoid pop(){ head = (head+1) % qsize; }\n_node front(){ return queue[head];}\nbool empty(){ return head == tail;}\n//-------------- \u961f\u5217\u64cd\u4f5c --- end\n\nbool inmap(int x,int y){\n    if(x >=1 && x <=3 && y>=1 && y<=3)\n        return true;\n    return false;\n}\n//\u8fdb\u884c\u56db\u79cd\u64cd\u4f5c state \u6570\u5b57\u8868\u793a\u7684\u72b6\u6001,op \u8868\u793a\u90a3\u4e2a\u64cd\u4f5c,0,1,2,3\nint opt(int state,int op){\n    int t_map[4][4];\n    state2map(t_map,state); //\u8f6c\u5316\u4e8c\u7ef4\n    int x,y;\n    find0(t_map,x,y); //\u627e\u52300\u7684\u4f4d\u7f6e\n\n    int nx = x + fx[op][0];\n    int ny = y + fx[op][1]; //nx,ny \u8981\u4ea4\u6362\u7684\u6570\u5b57\u7684\u4f4d\u7f6e\n    if (inmap(nx,ny)){\n        int t = t_map[x][y];\n        t_map[x][y] = t_map[nx][ny];\n        t_map[nx][ny] = t; //\u4ea4\u6362\n        return map2state(t_map); //\u8fd4\u56de\u8f6c\u6362\u7684\u6570\u5b57\n    }\n    else \n        return -1; //\u8868\u793a\u4e0d\u53ef\u4ee5\n}\n\nint bfs(int state){\n    _node first ;\n    first.state = state;\n    first.step = 0;\n    push(first); //\u52a0\u5165\u8d77\u70b9\n    setVis(state); //\u8bbe\u5b9a\u5df2\u7ecf\u8bbf\u95ee\n\n    while( !empty()){ //\u975e\u7a7a\n        _node t = front(); pop(); //\u53d6\u51fa\u5934\n\n        int i;\n        int state = t.state;\n        int step = t.step;\n        for(i=0;i<4;i++){\n            int tn = opt(state,i);\n            if( tn != -1){ // \u8fd4\u56de\u4e00\u4e2a\u6b63\u5e38\u7684\u64cd\u4f5c\u540e\u7684\u72b6\u6001\n                if( tn == 123804765) //\u627e\u5230\u7ed3\u679c\n                    return step+1;\n                if ( isVis(tn) == 0){ //\u6ca1\u6709\u88abvis\u8fc7\n                    _node tnode;\n                    tnode.state = tn;\n                    tnode.step = step+1;\n                    push(tnode);\n                    setVis(tn); //\u8bbe\u4e3a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\n                }\n            }\n        }\n    }\n    return -1; //\u8868\u793a\u65e0\u89e3\n}\n\n\nint main(){\n    int s;\n    scanf(\"%d\",&s);\n    int ans = bfs(s);\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n## \u89e3\u51b3\u601d\u8def2:\u5eb7\u6258\u5c55\u5f00\n\n9\u7ef4\u6570\u7ec4\u7684vis\u4f1a\u8d85\u5185\u5b58,\u90a3\u5e94\u8be5\u600e\u4e48\u529e\u5462?\n\n\u4ed4\u7ec6\u60f3\u4e00\u4e2a,\u72b6\u6001\u662f9\u4e2a\u6570\u5b57\u7684\u7ec4\u5408,\u4e00\u5171\u6709$$ 9! = 362880$$  \u79cd\u6392\u5217\u65b9\u6848,\u4e5f\u5c31\u662f\u8bf4\u4e00\u5171\u6709362880\u79cd\u72b6\u6001,\u5982\u679c\u72b6\u6001\u4ece0\u5f00\u59cb\u5bf9\u5e94\u4e00\u4e2a\u6570\u5b57,\u90a3\u5f00\u4e00\u4e2a`bool vis[362880]`\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u72b6\u6001\u5b58\u4e00\u6765.\u8fd9\u79cd\u64cd\u4f5c\u5c31\u662f\u5eb7\u6258\u5c55\u5f00\u3002\n\n```c\n#include <cstdio>\n#include <cstring>\n\nchar str[100];\nchar dest[10] = { '1', '2', '3', '8', '0', '4', '7', '6', '5','\\0'};\nint dest_num;\nchar lx[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8'};\nbool isExit[10];\n\nbool vis[400000] = {0};\n\nint fx[4][2] ={ {1,0}, {0,1}, {-1,0}, {0,-1} };\nint fac[10];\n\n\n// \u627e\u52300\u7684\u4f4d\u7f6e\nvoid find0(char map[4][4],int &x,int &y){\n    int i,j;\n    for(i=1;i<=3;i++)\n        for(j=1;j<=3;j++){\n            if( map[i][j] == '0'){\n                x = i,y = j;\n                return ;\n            }\n        }\n}\n\nint encoding(char str[],int len){\n    int num =0,i,j;\n    for(i=0;i<len;i++){\n        int tmp = 0;\n        for(j=i+1;j<len;j++)   //\u4ece\u540e\u9762\u4e00\u4e2a\u6570\u5f00\u59cb,\u8ba1\u7b97\u6709\u51e0\u4e2a\u6570\n            if(str[j] < str[i])//\u6bd4str[i]\u5c0f,\u5982\u679c\u67090\u4e2a\u6bd4str[i]\n                tmp++;         //str[i]\u5c31\u662f\u7b2c0\u5c0f\n        num += tmp*fac[len-i-1];\n    }\n    return num;\n}\n\n//\u9006\u5c55\u5f00\nvoid decoding(int num,int len,char str[]){\n    memset(isExit,0,sizeof(isExit));\n    int i,j,cnt;\n    for(i=0;i<len;i++){\n        int y = num / fac[len-i-1];//\u9700\u8981\u627e\u7b2cy\u5c0f\u7684\u6570\n        num = num % fac[len-i-1];\n\n        //\u4ece\u5b58\u5728\u7684\u6570\u91cc\u627e\u5230\n        cnt = -1; //\u627e\u5230\u4e00\u4e2a\u6570\u540e,cnt++ == 0 \u8868\u793a\u7b2c0\u5c0f\n        for(j=0;j<len;j++){\n            if(isExit[j] == 0) { //\u5b58\u5728\n                cnt++;\n                if(cnt == y) //\n                    break;\n            }\n        }\n        isExit[j] = 1;\n        str[i] = lx[j];\n    }\n}\n\n\n\nstruct _node {\n    int state; //\u5b58\u7684\u5eb7\u6258\u5c55\u5f00\u540e\u7684\u6570\u5b57\n    int step;\n};\n\n\n//-------------- \u961f\u5217\u64cd\u4f5c\n#define qsize 1000000\n_node queue[qsize]; //\u56e0\u4e3a\u4e0d\u77e5\u9053\u6700\u5927\u6b65\u6570,\u4f7f\u7528\u5faa\u73af\u961f\u5217\nint idx=0;\nint head=0,tail =0;\n\nvoid push(_node t){\n    queue[tail]= t;\n    tail = (tail+1) % qsize; //tail \u6700\u5927 qsize-1\n}\n\nvoid pop(){ head = (head+1) % qsize; }\n_node front(){ return queue[head];}\nbool empty(){ return head == tail;}\n//-------------- \u961f\u5217\u64cd\u4f5c --- end\n\nbool inmap(int x,int y){\n    if(x >=1 && x <=3 && y>=1 && y<=3)\n        return true;\n    return false;\n}\n//\u8fdb\u884c\u56db\u79cd\u64cd\u4f5c state \u6570\u5b57\u8868\u793a\u7684\u72b6\u6001,op \u8868\u793a\u90a3\u4e2a\u64cd\u4f5c,0,1,2,3\nint opt(char s[],int op){\n    char st[4][4];\n    char sst[9];\n    int i,j;\n    for(i=1;i<=3;i++)\n     for(j=1;j<=3;j++)\n         st[i][j] = s[(i-1)*3+(j-1)];\n    int x,y;\n    find0(st,x,y);\n    \n    int nx = x +fx[op][0];\n    int ny = y +fx[op][1];\n\n    if( inmap(nx,ny)){\n        char t = st[nx][ny];\n        st[nx][ny] = st[x][y];\n        st[x][y] = t;\n        for(i=1;i<=3;i++)\n            for(j=1;j<=3;j++)\n                sst[(i-1)*3+(j-1)] =  st[i][j];\n        return encoding(sst,9);\n    }\n    return -1;\n}\n\n\n\nint bfs(){\n    _node first ;\n\n    first.state = encoding(str,9);\n    first.step = 0;\n    push(first); //\u52a0\u5165\u8d77\u70b9\n    vis[first.state]  =1;\n\n    while( !empty()){ //\u975e\u7a7a\n        _node t = front(); pop(); //\u53d6\u51fa\u5934\n\n        int i;\n        int state = t.state;\n        int step = t.step;\n        char tmp[10];\n        decoding(state,9,tmp);\n        for(i=0;i<4;i++){\n            int tn = opt(tmp,i);\n            if( tn != -1){ // \u8fd4\u56de\u4e00\u4e2a\u6b63\u5e38\u7684\u64cd\u4f5c\u540e\u7684\u72b6\u6001\n                if( tn == dest_num) //\u627e\u5230\u7ed3\u679c\n                    return step+1;\n                if ( vis[tn] == 0){ //\u6ca1\u6709\u88abvis\u8fc7\n                    _node tnode;\n                    tnode.state = tn;\n                    tnode.step = step+1;\n                    push(tnode);\n                    vis[tn] = 1;\n                }\n            }\n        }\n    }\n    return -1; //\u8868\u793a\u65e0\u89e3\n}\n\n\nint main(){\n    fac[0] = 1;\n    int i;\n    for(i=1;i<=9;i++) fac[i] =  fac[i-1]*i;\n    scanf(\"%s\",str);\n    if(strcmp(str,dest)==0){\n        printf(\"0\");\n        return 0;\n    }\n    dest_num = encoding(dest,9);\n    int ans = bfs();\n\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n## \u89e3\u51b3\u601d\u8def3:STL\n\n\u65e2\u7136\u72b6\u6001\u53ea\u6709 362880\u79cd,\u96be\u70b9\u53ea\u662f\u5728\u4e8e\u600e\u4e48\u6807\u8bb0\u4e00\u4e2a\u72b6\u6001,\u5982\u679c\u8fd9\u91cc\u7528STL,\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7528`map`,\u6216\u8005`set`\u5f88\u8f7b\u677e\u7684\u5199\u51fa\u6765.\n",
        "postTime": 1548646704,
        "uid": 110596,
        "name": "\u8dea\u4e0b\u53eb\u54e5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "~~\u8bdd\u8bf4\u5eb7\u6258\u5c55\u5f00\u662f\u4ec0\u4e48\u7384\u5b66\u73a9\u610f\u554a\u3002\u3002\u3002~~\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5728\u9690\u5f0f\u56fe\u4e2d\u904d\u5386\u6c42\u6700\u77ed\u6b65\u6570\u7684\u9898\u4e00\u822c\u90fd\u8981\u7528\u5230bfs\uff08\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u3010\u7d2b\u4e66\u3011\u4e0a\u8bb2\u8fc7\uff09\uff0c\u56e0\u6b64\u76f4\u63a5bfs\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u5199\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u628a\u5f53\u524d\u72b6\u6001\u538b\u5230\u4e00\u4e2aint\u91cc\u548c\u628a\u4e00\u4e2aint\u8f6c\u5316\u4e3a\u538b\u7f29\u524d\u7684\u72b6\u6001\uff0c\u5982\u4e0b\uff1a\n```cpp\nstruct State{    //\u4fdd\u5b58\u72b6\u6001\u7684\u7ed3\u6784\u4f53\n\tint a[5][5];\n\tbool operator ==(const State &rhs)const{\n\t\tfor(int i=1;i<=3;++i)\n\t\t\tfor(int j=1;j<=3;++j)\n\t\t\t\tif(a[i][j]!=rhs.a[i][j]) return 0;\n\t\treturn 1;\n\t}\n};\n//\u538b\u7f29\nint zip(State x){\n\tint res=0;\n\tfor(int i=1;i<=3;++i)\n\t\tfor(int j=1;j<=3;++j)\n\t\t\tres=res*10+x.a[i][j];\n\treturn res;\n}\n//\u89e3\u538b\nState unzip(int x){\n\tState res;\n\tfor(int i=3;i>=1;--i){\n\t\tfor(int j=3;j>=1;--j){\n\t\t\tres.a[i][j]=x%10;\n\t\t\tx/=10;\n\t\t}\n\t}\n\treturn res;\n}\n```\n\u4f46\u4e0a\u8ff0\u65b9\u6cd5\u6709\u4e00\u4e2a\u7f3a\u70b9\uff0c\u5c31\u662f\u4f1a\u9020\u6210\u7a7a\u95f4\u7684\u5927\u91cf\u6d6a\u8d39\uff0c\u6bd4\u5982dis\u6570\u7ec4\u4e2d 19 \u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u4ece\u6765\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u4e00\u4e2a\u72b6\u6001\u662f000000019\uff0c\u5bf9\u5427\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528hash\u6765\u5b8c\u6210\u79bb\u6563\u5316\u7684\u64cd\u4f5c\n```cpp\nstruct HashTable{\n\t#define P 976237\n\t#define MAXSIZ 1000007\n\tstruct Node{\n\t\tint data,val,nxt;\n\t}ct[MAXSIZ];\n\tint head[MAXSIZ],tot,num;\n\tvoid init(){\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(ct,0,sizeof(ct));\n\t\ttot=0; num=0;\n\t}\n\tint map(int x){\n\t\tint h=((long long)x*32767+17)%P+1;\n\t\tfor(int i=head[h];i;i=ct[i].nxt){\n\t\t\tif(ct[i].data==x) return ct[i].val;\n\t\t}\n\t\tct[++tot].data=x; ct[tot].val=++num;\n\t\tct[tot].nxt=head[h]; head[h]=tot;\n\t\treturn num;\n\t}\n\t#undef P\n\t#undef MAXSIZ\n}hash;\n```\n\u5230\u8fd9\u91cc\u8be5\u8bb2\u7684\u6211\u4eec\u57fa\u672c\u90fd\u8bb2\u5b8c\u4e86\uff0c\u4f46\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\u6211\u611f\u89c9\u5f88\u6709\u7528\uff0c\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\uff0c\u5c31\u662f\u6211\u4eec\u628a\u521d\u59cb\u72b6\u6001\u7684dis\u503c\u8d4b\u4e3a1\uff0c\u8fd9\u6837\u5f53\u4ea7\u751f\u4e00\u4e2a\u65b0\u72b6\u6001\u65f6\u6211\u4eec\u5224\u65ad\u5b83\u538b\u7f29+hash\u540e\u5728dis\u4e2d\u7684\u503c\u662f\u4e0d\u662f\u4e3a0\u5c31\u53ef\u4ee5\u5224\u65ad\u8be5\u72b6\u6001\u662f\u5426\u4e4b\u524d\u5df2\u7ecf\u4ea7\u751f\u8fc7\u4e86\uff0c\u53ef\u4ee5\u7701\u6389\u4e00\u4e2avis\u6570\u7ec4\u6216\u8005\u628adis\u6570\u7ec4memset\u6210-1\u7684\u529f\u592b\u4e86\u3002\u4e0d\u8fc7\u8f93\u51fa\u7684\u65f6\u5019\u53ef\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u628adis\u503c-1\u554a\u3002\u3002\u3002\u4e0d\u7136\u4f1aWA\u7684\u5f88\u60e8\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nstruct State{\n\tint a[5][5];\n\tbool operator ==(const State &rhs)const{\n\t\tfor(int i=1;i<=3;++i)\n\t\t\tfor(int j=1;j<=3;++j)\n\t\t\t\tif(a[i][j]!=rhs.a[i][j]) return 0;\n\t\treturn 1;\n\t}\n};\nstruct HashTable{\n\t#define P 976237\n\t#define MAXSIZ 1000007\n\tstruct Node{\n\t\tint data,val,nxt;\n\t}ct[MAXSIZ];\n\tint head[MAXSIZ],tot,num;\n\tvoid init(){\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(ct,0,sizeof(ct));\n\t\ttot=0; num=0;\n\t}\n\tint map(int x){\n\t\tint h=((long long)x*32767+17)%P+1;\n\t\tfor(int i=head[h];i;i=ct[i].nxt){\n\t\t\tif(ct[i].data==x) return ct[i].val;\n\t\t}\n\t\tct[++tot].data=x; ct[tot].val=++num;\n\t\tct[tot].nxt=head[h]; head[h]=tot;\n\t\treturn num;\n\t}\n\t#undef P\n\t#undef MAXSIZ\n}hash;\nint zip(State x){\n\tint res=0;\n\tfor(int i=1;i<=3;++i)\n\t\tfor(int j=1;j<=3;++j)\n\t\t\tres=res*10+x.a[i][j];\n\treturn res;\n}\nState unzip(int x){\n\tState res;\n\tfor(int i=3;i>=1;--i){\n\t\tfor(int j=3;j>=1;--j){\n\t\t\tres.a[i][j]=x%10;\n\t\t\tx/=10;\n\t\t}\n\t}\n\treturn res;\n}\nint ans,dis[7000007],dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};\nState sta,tar;\nvoid readin(State &x){\n\tfor(int i=1;i<=3;++i)\n\t\tfor(int j=1;j<=3;++j)\n\t\t\tscanf(\"%1d\",&x.a[i][j]);\n\treturn;\n}\npair<int,int> getZero(State x){\n\tfor(int i=1;i<=3;++i){\n\t\tfor(int j=1;j<=3;++j){\n\t\t\tif(x.a[i][j]==0) return make_pair(i,j);\n\t\t}\n\t}\n\treturn make_pair(0,0);\n}\nState Update(State x,int tow,int zx,int zy){\n\tint tarx=zx+dx[tow],tary=zy+dy[tow];\n\tif(tarx<1||tarx>3||tary<1||tary>3){\n\t\tx.a[1][1]=-1; return x;\n\t}\n\tswap(x.a[zx][zy],x.a[tarx][tary]);\n\treturn x;\n}\nint bfs(State s){\n\tqueue<int> q;\n\tint sint=zip(s);\n\tdis[hash.map(sint)]=1; q.push(sint);\n\twhile(!q.empty()){\n\t\tint tmp=q.front(); q.pop();\n\t\tState tp=unzip(tmp);\n\t\tpair<int,int> pos=getZero(tp);\n\t\tfor(int tow=0;tow<4;++tow){\n\t\t\tState upd=Update(tp,tow,pos.first,pos.second);\n\t\t\tif(upd==tar) return dis[hash.map(tmp)];\n\t\t\tif(upd.a[1][1]==-1) continue;\n\t\t\tint now=hash.map(zip(upd));\n\t\t\tif(dis[now]) continue;\n\t\t\tdis[now]=dis[hash.map(tmp)]+1;\n\t\t\tq.push(zip(upd));\n\t\t}\n\t}\n\treturn -1;\n}\nint main(){\n\tint ed=123804765; tar=unzip(ed);\n\treadin(sta);\n\tans=bfs(sta);\n\tif(sta==tar) ans=0;\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\u770b\u4e86\u9898\u89e3\u611f\u89c9\u6211\u5199\u7684\u4ee3\u7801\u597d\u957f\u554a\uff0c\u4f3c\u4e4e\u6709\u4e00\u4e9b\u64cd\u4f5c\u662f\u4e0d\u5fc5\u8981\u7684\uff1f\u4f46\u5b83\u5374\u8dd1\u7684\u633a\u5feb\uff08\u6b63\u5e381400ms\u5de6\u53f3\uff0c\u5438\u6c27\u540e700ms\u5de6\u53f3\uff09\uff0c\u611f\u89c9\u6211\u4ee3\u7801\u91cc\u7684\u4e00\u4e9b\u5c0f\u6280\u5de7\u8fd8\u662f\u633a\u6709\u7528\u7684\u3002\u3002\u3002\u3002\u3002",
        "postTime": 1547218370,
        "uid": 69426,
        "name": "Nartsam",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u7528\u666e\u901a\u7684BFS\u5c31\u884c\uff0c\u4e0d\u7528\u53cc\u5411\uff08~~\u56e0\u4e3a\u6211\u4e0d\u4f1a~~\uff0c\u4f46\u771f\u7684\u666e\u901a\u7684\u5c31\u53ef\u4ee5\u8fc7\uff09\n\n\u5c06\u77e9\u9635\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5176\u5b9e\u5c31\u662f\u54c8\u5e0c\uff09\uff0c\u90a3\u4e48`a(x,y)`\u4e2d\u7684\u5185\u5bb9\u5c31\u53d8\u6210\u4e86`b(x*3+y)`\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff09\n\n\u76ee\u6807\u77e9\u9635\uff1a\n```\n1 2 3\n8 0 4\n7 6 5\n```\nHASH\uff1a`123804765`\n\n\u4ee5`0`\u6765BFS\uff0c\u63a7\u5236`0`\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6\u5c31\u50cf\u6b63\u5e38BFS\u4e00\u6837\u5566\uff0c\u6ce8\u610f\u8f93\u5165\u7684\u5c31\u662f\u76ee\u6807\u77e9\u9635\u3002map\u53bb\u91cd\u3002\nCode\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(\"Ofast\")\nstring s,to=\"123804765\";\nmap<string,bool> vis;\nstruct per\n{\n\tstring ss;\n\tint zx,zy,st;\n\tper(string s,int x,int y,int step)\n\t{ss=s;zx=x;zy=y;st=step;}\n};//ss:HASH,zx:0\u7684x\u5750\u6807,zy:0\u7684y\u5750\u6807(\u65b9\u4fbf\u5224\u65ad),step:\u6b65\u6570  \nqueue<per> q;\nint f0(string s)\n{\n\tfor(int i=0;i<s.size();i++)\n\tif(s[i]=='0')\n\treturn i;\n\treturn -1;\n}//\u5224\u65ad0\u7684\u4f4d\u7f6e  \nint bfs()\n{\n\tint dir[4][2]={0,-1,-1,0,0,1,1,0};\n\tint t=f0(s);\n\tq.push(per(s,t/3,t%3,1));//b(x) -> a(x/3,x%3) (\u60f3\u4e00\u60f3,\u4e3a\u4ec0\u4e48)\n\tvis[s]=1;//\u6807\u8bb0 \n\twhile(!q.empty())\n\t{\n\t\tper t=q.front();\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tint tx=t.zx+dir[i][0];\n\t\t\tint ty=t.zy+dir[i][1];\n\t\t\tif(tx<0||tx>2||ty<0||ty>2)continue;\n\t\t\tswap(t.ss[t.zx*3+t.zy],t.ss[tx*3+ty]);//\u4ea4\u6362 \n\t\t\tif(t.ss==to)return t.st;\n\t\t\tif(vis[t.ss]){swap(t.ss[t.zx*3+t.zy],t.ss[tx*3+ty]);continue;}\n\t\t\tvis[t.ss]=1;//\u6807\u8bb0 \n\t\t\tq.push(per(t.ss,tx,ty,t.st+1));\n\t\t\tswap(t.ss[t.zx*3+t.zy],t.ss[tx*3+ty]);//\u6362\u56de\u6765  \n\t\t}\n\t\tq.pop();\n\t}//\u666e\u901aBFS  \n\treturn 0;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>s;//\u56e0\u4e3a\u6709string,\u53ea\u80fd\u7528cin(\u65b9\u4fbf\u4e8e\u6bd4\u8f83) \n\tif(s==to) cout<<'0'<<endl;\n\telse cout<<bfs()<<endl;\n\treturn 0;\n}\n```\n\n---\n\u7b2c\u4e8c\u79cd\uff0c\u8bb0\u5fc6\u5316BFS\uff0c\uff08\u6211\u4e0d\u60f3\u8d34\u4ee3\u7801\u4e86\uff09",
        "postTime": 1544272505,
        "uid": 89127,
        "name": "2x6_81",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": " \u6b64\u9898\u4e3a**\u8def\u5f84\u5bfb\u627e\u95ee\u9898**\u7684\u5178\u578b\u4f8b\u9898\uff0c\u548c\u56de\u6eaf\u6cd5\u7684\u4e0d\u540c\u662f\u524d\u8005\u9700\u8981\u627e\u5230\u4e00\u4e2a**\u6ee1\u8db3\u7ea6\u675f\u7684\u89e3**\u800c\u540e\u8005\u662f\u5bfb\u627e\u4e00\u4e2a\u4ece\u521d\u59cb\u72b6\u6001\u5230\u7ec8\u6b62\u72b6\u6001\u7684\u8def\u5f84\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5c06\u56fe\u4e2d\u8282\u70b9\u7f16\u53f7\u7684\u72b6\u6001\u89c6\u4e3a\u7ed3\u70b9\uff0c\u6c42\u4e00\u6761\u4ece\u521d\u59cb\u7ed3\u70b9\uff08\u59cb\u6001\u7f16\u53f7\uff09\u81f3\u7ec8\u70b9\uff08\u672b\u6001\u7f16\u53f7\uff09\u7684\u6700\u77ed\u8def\uff0c\u8fd9\u91cc\u7528BFS\u6765\u89e3\u51b3\u6b64\u7c7b\u95ee\u9898\n\n\u7136\u800c\u6b64\u9898\u4e0d\u662f\u7b80\u7b80\u5355\u5355\u7684\u5957\u4e0a\u6a21\u677f\u5c31\u53ef\u4ee5\u4e86\uff0c\u72b6\u6001\u600e\u4e48\u8868\u793a\uff1f\u7ed3\u70b9\u600e\u4e48\u8868\u793a\uff1f\u8fd9\u91cc\u9009\u62e9\u5b9a\u4e49\u4e00\u4e2a\u72b6\u6001\u7c7b\u578b\u7528\u6765\u4fdd\u5b58\u72b6\u6001\n\u9996\u5148\u89e3\u51b3\u72b6\u6001\u7684\u5b9a\u4e49\u95ee\u9898\uff0c\u5f53\u7136\u8fd9\u53ef\u80fd\u5bf9\u4f60\u4e0d\u6210\u95ee\u9898\u5982\u679c\u4e0d\u662f\uff0c\u53ef\u4ee5\u501f\u9274\u4e00\u4e0b\u5982\u4e0b\u5b9a\u4e49\u65b9\u6cd5\n```cpp\ntypedef int state[9];//\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a\u72b6\u6001\u7684\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4e2d\u4fdd\u5b58\u4e86\u5404\u7f16\u53f7\u7684\u4f4d\u7f6e\u4fe1\u606f\nconst int maxstate =3628802;//\u5341\u7684\u9636\u4e58\uff0c\u7136\u800c\u5b9e\u9645\u4e0a\uff019\u5c31\u8db3\u591f\u4e86\uff1b\nstate st[maxstate],goal;//\u5b9a\u4e49\u72b6\u6001\u6570\u7ec4\uff0c\u4ee5\u53ca\u76ee\u6807\u72b6\u6001\uff1b//\u5b9e\u9645\u4e0a\u7b49\u540c\u4e8est[maxstate][9];\nint dist[maxstate];//\u5b9a\u4e49\u8ddd\u79bb\u6570\u7ec4\uff0c\u610f\u4e49\u540c\u6700\u77ed\u8defd\u6570\u7ec4\n\nconst int dx[] = {-1,1,0,0};\nconst int dy[] = {0,0,-1,1};//\u8fd9\u4e2a\u4e0d\u9700\u8981\u89e3\u91ca\u4e86\u5427\n```\n\u653f\u6cbb\u8bfe\u672c\u6709\u8a00\uff1a\u51e1\u662f\u7686\u6709\u77db\u76fe\uff0c\u6211\u4eec\u7cbe\u529b\u6709\u9650\uff0c\u5e94\u5f53\u5148\u96c6\u4e2d\u89e3\u51b3\u4e3b\u8981\u77db\u76fe\uff0c\u8fd9\u91cc\u7684\u4e3b\u8981\u77db\u76fe\u5f53\u7136\u5c31\u662fbfs\u600e\u4e48\u5199\u4e86\u3002\n\n```cpp\nint bfs(){\t\t\n\tinit_lookup_table();\n    int front = 1,rear = 2;\n    while(front<rear)//\u57fa\u64cd\u81ea\u7136\u662f\u4e0d\u80fd\u53d8\u7684\n\t{\n    \tstate &s = st[front]//\u8fd9\u4e2a\u662f\u5f15\u7528\u64cd\u4f5c\uff0cs\u5373\u4e3a\u5404\u4e2a\u7f16\u53f7\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u662f\u5f53\u524d\u72b6\u6001\u7684\u4fe1\u606f\n        if(memcmp(goal,s,sizeof(s))==0)return front;//\u56e0\u4e3a\u641c\u7d22\u5927\u540d\u662fbfs\u561b\uff0c\u6700\u5148\u904d\u5386\u5230\u7684\u81ea\u7136\u662f\u6b21\u6570\u6700\u5c11\u7684\u4e86\n        for(int j = 0;j<9;j++)if(!s[j])break;//\u5bfb\u627e\u5230\u96f6\u6240\u5728\u7684\u4f4d\u7f6e\n        int x = j/3,y = j%3;//\u5bf9\u4f4d\u7f6e\u8fdb\u884cdecoding\u64cd\u4f5c,\u5f53\u65f6\u4e00\u76f4\u641e\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48x\u8981\u9664\u4ee5\u4e09\u800cy\u8981\u53d6\u6478\u4e09\uff0c\n        //\u540e\u6765\u610f\u8bc6\u5230\u8fd9tm\u6839\u672c\u65e0\u6240\u8c13\n        for(int d = 0;d<4;d++){\n        \tint newx = x+dx[d];\n            int newy = y+dy[d];\n            int newj = newx*3+newy;\n            if(newx>=0&&new<3&&newy>=0&&newy<3)//\u79fb\u52a8\u5408\u6cd5\u5224\u5b9a\n            {\n            \tstate& t = st[rear];\n                memcpy(&t,&s,sizeof(s));//\u5b9e\u6d4b\u6548\u7387\u660e\u663e\u9ad8\u4e8e\u5faa\u73af\u8d4b\u503c\uff0cmemcmp\u540c\n                t[newz] = s[j];//\u6784\u9020\u51fas\u3010j\u3011\u72b6\u6001\u79fb\u52a8\u4e00\u4e2a\u7269\u5757\u540e\u7684\u72b6\u6001\n                t[j] = s[newz];\n                dist[rear] = front + 1;//\u6807\u8bb0rear\u72b6\u6001\u662f\u7531front\u72b6\u6001\u6269\u5c55\u4e00\u6b21\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u52a0\u4e00\n                if(try_to_insert(rear))rear++\uff1b\n            }\n        }\n        front ++;    \n    }\n}\n```\n\n\n\u5c31\u6b64\uff0c\u4e3b\u8981\u77db\u76fe\u5c31\u89e3\u51b3\u5b8c\u4e86..\n\n\n\n\n\n\n\n\n\u5417\uff1f\n\u5e76\u6ca1\u6709\uff0c\u56e0\u4e3a\u8fd8\u6709\u4e00\u4e2a\u5173\u952e\u7684\u5730\u65b9\u6ca1\u6709\u505a\u3002\n\u663e\u7136\uff0c\u6ed1\u6ed1\u5757\u6ed1\u4e00\u6b21\u8fbe\u5230\u67d0\u4e2a\u72b6\u6001\uff0c\u548c\u6ed1\u591a\u6b21\u6ed1\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u5b83\u4eec\u4ee5\u540e\u6269\u5c55\u7684\u65b9\u5f0f\u662f\u76f8\u540c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e0d\u8003\u8651\u91cd\u590d\u72b6\u6001\uff0c\u591a\u6b21\u6269\u5c55\u4e4b\u540e\u4f1a\u8fdb\u884c\u5927\u91cf\u7684\u65e0\u7528\u529f\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\u8be5\u72b6\u6001\u6709\u6ca1\u6709\u904d\u5386\u5230\uff0c\u6ca1\u9519\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\uff1b\n\n\u90a3\u4e48\u8bb0\u5fc6\u5316\u641c\u7d22\u600e\u4e48\u5199\u5462\uff1f\n\u7b2c\u4e00\u79cd\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u5f00\u4e00\u4e2a\u4e5d\u7ef4\u6570\u7ec4\uff0c\u4f46\u662f\u4f60\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\uff0c\u6570\u7ec4\u5f88\u77eb\u60c5\uff0c\u5f00\u4e0d\u4e0b\u8fd9\u4e48\u5927\uff0c\u4e5d\u7684\u4e5d\u6b21\u65b9\u5927\u6982\u662f4\u4ebf\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\uff019\u5c31\u53ef\u4ee5\u4e86\uff0c\u7528\u4e5d\u7ef4\u6570\u7ec4\u4f1a\u9020\u6210\u5927\u91cf\u7a7a\u95f4\u6d6a\u8d39\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662fen/de coding\uff0c\u4e5f\u5c31\u662f\u7f16\u7801\u89e3\u7801\n\u600e\u4e48\u64cd\u4f5c\u5462\uff1f\u5c06\u6392\u5217\u6784\u9020\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u548c\u4e5d\u7684\u9636\u4e58\u4e00\u4e00\u5bf9\u5e94\u8d77\u6765\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nint vis[362881],actual[9];\nvoid init_lookup_table(){\n\tactual[0] = 1;\n    for(int i = 1;i<9;i++)actual[i]=actual[i-1]*i;//\u9012\u63a8\u5b58\u9636\u4e58\n}\nint try_to_insert(int s){\n\tint code = 0;//\u5c06st\u3010s\u3011\u5411code\u4e0a\u8fdb\u884c\u6620\u5c04\n    for(int i = 0;i<9;i++){\n    \tint cnt = 0;\n        for(int j = i+1;i<9;i++)if(st[s][j]<st[s][i])cnt++;\n        code += actual[8-i] * cnt;\n    }\n    if(vis[code])return 0;\n    return vis[code] = 1;\n}\n```\n\u7b2c\u4e09\u79cd\u5c31\u662f\u5229\u7528STL\u4e2d\u7684set\uff0c\u7136\u800c\u65f6\u95f4\u6548\u7387\u4f4e\u52a3\uff0c\u5982\u679c\u4e0d\u5438\u6c27\uff0c\u54b3\u54b3\uff0c\u5206\u6570\u53ef\u80fd\u60e8\u4e0d\u5fcd\n\u7b2c\u56db\u79cd\u5229\u7528hash\u6280\u672f\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\n\n\u6700\u540e\u4ea4\u4e0a\u5934\u6587\u4ef6\u8dd1\u8def\n```cpp\nint main(){\n\t\n\t/*\u6570\u636e\u8f93\u5165begin*/\n\tint a[10];\n\tfor(int i = 1;i<=9;i++)cin>>st[1][i];\n\t/*end*/\n\tgoal[] ={1,2,3,8,0,4,7,6,5}; \n\t\n\tint ans = bfs();\n\tif(ans>0)printf(\"%d\\n\",dist[ans]);\n\telse printf(\"-1\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1540190658,
        "uid": 55613,
        "name": "only_\u675c\u6625\u840c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "# \u3010\u5eb7\u62d3\u5c55\u5f00\u3011\u516b\u6570\u7801 #\n\n\n------------\n\n> \u6458\u81ea\u767e\u5ea6\u767e\u79d1\uff1a\n> \n> \u5eb7\u6258\u5c55\u5f00\u662f\u4e00\u4e2a\u5168\u6392\u5217\u5230\u4e00\u4e2a\u81ea\u7136\u6570\u7684\u53cc\u5c04\uff0c\u5e38\u7528\u4e8e\u6784\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u7a7a\u95f4\u538b\u7f29\u3002 \u5eb7\u6258\u5c55\u5f00\u7684\u5b9e\u8d28\u662f\u8ba1\u7b97\u5f53\u524d\u6392\u5217\u5728\u6240\u6709\u7531\u5c0f\u5230\u5927\u5168\u6392\u5217\u4e2d\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u662f\u53ef\u9006\u7684\u3002\n\n\n------------\n\n\u7b80\u5355\u8bf4\u6765\uff0c\u5eb7\u62d3\u5c55\u5f00\u53ef\u4ee5\u6c42\u5f97\u4e00\u7ec4\u6392\u5217\u7684\u5b57\u5178\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u5b57\u5178\u5e8f\u6c42\u5f97\u4e00\u7ec4\u6392\u5217\u3002\u4ece\u800c\u5f62\u6210\u54c8\u5e0c\u6620\u5c04\u3002\n\n\u5173\u4e8e\u5eb7\u62d3\u5c55\u5f00\u548c\u9006\u5c55\u5f00\u7684\u8fd0\u7b97\uff0c\u9700\u8981\u7528\u5230\u6392\u5217\u7ec4\u5408\u7684\u76f8\u5173\u77e5\u8bc6\uff1a\n\n## \u516c\u5f0f \uff1a##\n![](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D280/sign=bffaac6e6081800a6ae58e06813433d6/dcc451da81cb39dbd85f32b7dc160924aa1830b7.jpg)\n\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n#### \u5eb7\u62d3\u5c55\u5f00\uff1a ##\n\n    static const int FAC[] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};   // \u9636\u4e58\n\tint cantor(int *a, int n)\n\t{\n\t    int x = 0;\n\t    for (int i = 0; i < n; ++i) {\n\t        int smaller = 0;  // \u5728\u5f53\u524d\u4f4d\u4e4b\u540e\u5c0f\u4e8e\u5176\u7684\u4e2a\u6570\n\t        for (int j = i + 1; j < n; ++j) {\n\t            if (a[j] < a[i])\n\t                smaller++;\n\t        }\n\t        x += FAC[n - i - 1] * smaller; // \u5eb7\u6258\u5c55\u5f00\u7d2f\u52a0\n\t    }\n\t    return x;  // \u5eb7\u6258\u5c55\u5f00\u503c\n\t}\n\n#### \u9006\u5eb7\u62d3\u5c55\u5f00\uff1a ##\n\n\tstatic const int FAC[] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};   // \u9636\u4e58\n  \n\t//\u5eb7\u6258\u5c55\u5f00\u9006\u8fd0\u7b97\n\tvoid decantor(int x, int n)\n\t{\n\t    vector<int> v;  // \u5b58\u653e\u5f53\u524d\u53ef\u9009\u6570\n\t    vector<int> a;  // \u6240\u6c42\u6392\u5217\u7ec4\u5408\n\t    for(int i=1;i<=n;i++)\n\t        v.push_back(i);\n\t    for(int i=m;i>=1;i--)\n\t    {\n\t        int r = x % FAC[i-1];\n\t        int t = x / FAC[i-1];\n\t        x = r;\n\t        sort(v.begin(),v.end());// \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\t        a.push_back(v[t]);      // \u5269\u4f59\u6570\u91cc\u7b2ct+1\u4e2a\u6570\u4e3a\u5f53\u524d\u4f4d\n\t        v.erase(v.begin()+t);   // \u79fb\u9664\u9009\u505a\u5f53\u524d\u4f4d\u7684\u6570\n\t    }\n\t}\n\n### \u9898\u76ee\u5206\u6790 ####\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5b58\u50a8\u7684\u662f\u4e09\u7ef4\u6570\u7ec4q[i][j][k], i \u4ee3\u8868\u56fe\u7684\u5e8f\u53f7\uff0cj \u4ee3\u8868\u56fe\u7684\u6a2a\u5750\u6807\uff0ck\u4ee3\u8868\u56fe\u7684\u7eb5\u5750\u6807\uff0cq[i][j][k] \u4ee3\u8868\u8be5\u70b9\u7684\u503c\u3002\u90a3\u4e48\u5224\u91cd\u64cd\u4f5c\u4f1a\u5f88\u9ebb\u70e6\u3002 \u628a\u4e09\u7ef4\u6570\u7ec4\u538b\u6210\u4e8c\u7ef4\u4e5f\u4e00\u6837\u3002\u89e3\u51b3\u5224\u91cd\u662f\u5173\u952e\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f15\u5165\u4e86\u5eb7\u62d3\u5c55\u5f00\uff0c\u5982\u679c\u6211\u4eec\u628a\u4e00\u4e2a\u56fe\u7684\u5eb7\u62d3\u5c55\u5f00\u503c\u8fdb\u884c\u5b58\u50a8\uff0c\u7528vis\u6570\u7ec4\u5224\u91cd\uff0c vis[cantor]=1 \u8868\u793a\u8fd9\u5f20\u56fe\u5df2\u7ecf\u904d\u5386\u8fc7\u3002\u90a3\u4e48BFS\u7684\u961f\u5217\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\uff1a\n\n\tint t[10]={0,1,2,3,8,0,4,7,6,5};//\u76ee\u6807\u60c5\u51b5 \n\tint a[10]; //\u8f93\u5165\u56fe\n\tint d[10]; //\u9006\u5eb7\u62d3\u56fe\n\tint tar,ans; //tar\u4e3a\u76ee\u6807\u56fe\u7684cantor\u503c\n    struct Node{\n\t\tint cVal;//\u8fd9\u5f20\u56fe\u7684cantor\u503c\n\t\tint dis;//\u4ece\u8d77\u70b9\u5230\u8fd9\u5f20\u56fe\u7684\u8ddd\u79bb\n\t\tint pos;//\u8bb0\u5f55\u8fd9\u5f20\u56fe\u4e2d0\u7684\u4f4d\u7f6e\n\t}q[400000];//\u56e0\u4e3a\u6700\u591a\u67098!\u79cd\u6392\u5217 \u63a5\u8fd1370000\n\tint head=1,tail=2;\n\tbool vis[400000];//\u5224\u91cd\u6570\u7ec4\n\t\n### BFS \u51fd\u6570\uff1a ###\n\n\u5728\u904d\u5386\u65f6\u6211\u4f7f\u7528\u7684\u662f\u4e00\u7ef4\uff0c\u6ca1\u6709\u8f6c\u6210\u4e8c\u7ef4\u5750\u6807\u7cfb\uff0c\n\u56e0\u6b64\u72af\u4e86\u4e00\u4e2a\u9519\u8bef~~\uff08gdb\u4e00\u4e07\u5e74\u6709\u6728\u6709QAQ\uff09~~\n\n\tint dir[4]={-3,-1,1,3};\n\n\u5355\u7eaf\u4ee5\u4e3a\u5411\u4e0a\u5411\u4e0b\u4e3a-3/+3\uff0c\u5411\u5de6\u5411\u53f3\u4e3a-1/+1\uff0c\u56e0\u6b64\u5728\u904d\u5386\u65f6\u51fa\u73b0\u95ee\u9898\uff1a\n\ne.g. \n\n\u6709[1][2][3][0][4][5][6][7][8]\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c-1\u64cd\u4f5c\u4e0d\u80fd\u8fdb\u884c\n\n\u6709[1][2][0][3][4][5][6][7][8]\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c+1\u64cd\u4f5c\u4e0d\u80fd\u8fdb\u884c\n\n\u56e0\u6b64\u672c\u849f\u84bb\u53ea\u80fd\u8fdb\u884c\u8fd9\u6837\u7684\u4fee\u6539\n\t\n\tif(q[head].pos%3==1 && dir[i]==-1) continue;//QAQ\n\tif(q[head].pos%3==0 && dir[i]==1)  continue;//QAQ\n\n~~\uff08\u6253\u6b7b\u4e0d\u6539\u6210\u7528\u4e8c\u7ef4\u5750\u6807\u7cfb>w<\uff09~~\n\n\tint bfs()\n\t{\n\t\tq[head].dis=0; //\u5f00\u59cb\u7684\u8ddd\u79bb\u4e3a0 \n\t\tq[head].cVal = cantor(a); //\u8ba1\u7b97cantor\u503c\n\t\tvis[q[head].cVal]=1;//\u4ee5\u53ca\u904d\u5386\n\t\t//q[head].pre=0;//\u8bb0\u5f55\u524d\u9a71cantor\u503c\uff08gdb\u65f6\u7528\uff09\n\t\tif(q[head].cVal==tar) return 0;//\u5224\u65ad\u6709\u65e0\u8f93\u5165\u5373\u4e3a\u6240\u6c42\u7684\u60c5\u51b5\n\t\twhile(head<=tail)//BFS\n\t\t{\t\n\t\t\tfor(int i=0;i<4;i++)//\u56db\u4e2a\u65b9\u5411\n\t\t\t{\n\t\t\t\tif(q[head].pos%3==1 && dir[i]==-1) continue;//QAQ\n\t\t\t\tif(q[head].pos%3==0 && dir[i]==1)  continue;//QAQ\n\t\t\t\tint newPos=q[head].pos+dir[i];\n\t\t\t\tif(newPos>0 && newPos<10)//\u5728\u8fb9\u754c\u5185\n\t\t\t\t{\n\t\t\t\t\tdecantor(q[head].cVal);\n\t\t\t\t\tswap(d[newPos],d[q[head].pos]);\n\t\t\t\t\tint tmp=cantor(d);\n\t\t\t\t\tif(vis[tmp]==0)//\u5224\u91cd\n\t\t\t\t\t{\n\t\t\t\t\t\tq[tail].cVal=tmp;\n\t\t\t\t\t\tq[tail].dis=q[head].dis+1;\n\t\t\t\t\t\tq[tail].pos=newPos;\n\t\t\t\t\t\tvis[q[tail].cVal]=1;\n\t\t\t\t\t\t//q[tail].pre=head;\n\t\t\t\t\t\tif(q[tail].cVal==tar)//\u5224\u627e\u5230\u6240\u6c42 \n\t\t\t\t\t\t\treturn q[tail].dis;\n\t\t\t\t\t\ttail++;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t\thead++;\n\t\t}\n\t}\n\n#### \u5728\u63d0\u4ea4\u65f6\u8fd8\u9047\u5230\u7684\u95ee\u9898\u53ca\u4fee\u6539 ####\n\n- \u4e4b\u524d\u7684decantor\u5199\u6cd5\u7206TLE\uff1a\n \t\n\n\t\tvoid decantor(int x)\n\t\t{\n\t\t\n\t\t\tint v[10];\n\t\t\tint cnt=1;\n\t\t\tfor(int i=0;i<=8;i++) v[i]=i;\n\t\t\tfor(int i=9;i>=1;i--)\n\t\t\t{\n\t\t\t\tint r= x% Fac[i-1];\n\t\t\t\tint t= x/ Fac[i-1];\n\t\t\t\tx = r;\n\t\t\t\td[cnt++] = v[t];\n\t\t\t\tfor(int j=t;j<=8;j++)\n\t\t\t\t\tv[j]=v[j+1];\n\t\t\t}\n\t\t\n\t\t}\n\n\n## \u5b8c\u6574\u4ee3\u7801 ##\n\n\t#include<stdio.h>\n\t#include<iostream>\n\t#include<algorithm>\n\t#include<cstring>\n\t#include<vector>\n\t#include<queue>\n\tusing namespace std;\n\tint t[10]={0,1,2,3,8,0,4,7,6,5};//\u76ee\u6807\u60c5\u51b5 \n\tint tar,ans; \n\tint a[10],d[10]; \n\tint dir[4]={-3,-1,1,3};\n\tint Fac[10]={1,1,2,6,24,120,720,5040,40320,362880};//\u9636\u4e58\u6570\u7ec4 \n\tstruct Node{\n\t\tint pos;\n\t\tint cVal;\n\t\tint dis;\n\t\t//int s[10];\n\t\t//int pre;\n\t}q[400000];\n\tbool vis[400000];\n\tint head=1,tail=2;\n\t\n\tint cantor(int t[])\n\t{\n\t\tint nu=0;\n\t\tfor(int i=1;i<=9;i++)\n\t\t{\n\t\t\tint smaller=0;\n\t\t\tfor(int j=i+1;j<=9;j++){\n\t\t\t\tif(t[i]>t[j]){\n\t\t\t\t\tsmaller++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnu+=Fac[9-i]*smaller;\n\t\t}\n\t\treturn nu;\n\t\t\t\n\t}\n\t\n\tvoid decantor(int x)\n\t{\n\t\n\t\tint v[10];\n\t\tint cnt=1;\n\t\tfor(int i=0;i<=8;i++) v[i]=i;\n\t\tfor(int i=9;i>=1;i--)\n\t\t{\n\t\t\tint r= x% Fac[i-1];\n\t\t\tint t= x/ Fac[i-1];\n\t\t\tx = r;\n\t\t\td[cnt++] = v[t];\n\t\t\tfor(int j=t;j<=8;j++)\n\t\t\t\tv[j]=v[j+1];\n\t\t}\n\t\n\t}\n\t\n\tint bfs()\n\t{\n\t\tq[head].dis=0; \n\t\tq[head].cVal = cantor(a);\n\t\tvis[q[head].cVal]=1;\n\t\t//q[head].pre=0;\n\t\tif(q[head].cVal==tar) return 0;\n\t\twhile(head<=tail)//BFS\n\t\t{\t\n\t\t\tfor(int i=0;i<4;i++)\n\t\t\t{\n\t\t\t\tif(q[head].pos%3==1 && dir[i]==-1) continue;//QAQ\n\t\t\t\tif(q[head].pos%3==0 && dir[i]==1)  continue;//QAQ\n\t\t\t\tint newPos=q[head].pos+dir[i];\n\t\t\t\tif(newPos>0 && newPos<10)\n\t\t\t\t{\n\t\t\t\t\tdecantor(q[head].cVal);//decantor->TLE\n\t\t\t\t\tswap(d[newPos],d[q[head].pos]);\n\t\t\t\t\tint tmp=cantor(d);\n\t\t\t\t\tif(vis[tmp]==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tq[tail].cVal=tmp;\n\t\t\t\t\t\tq[tail].dis=q[head].dis+1;\n\t\t\t\t\t\tq[tail].pos=newPos;\n\t\t\t\t\t\tvis[q[tail].cVal]=1;\n\t\t\t\t\t\t//q[tail].pre=head;\n\t\t\t\t\t\tif(q[tail].cVal==tar) return q[tail].dis;\n\t\t\t\t\t\ttail++;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t\thead++;\n\t\t}\n\t}\n\t\n\t\n\tint main()\n\t{\n\t\tchar s;\n\t\tfor(int i=1;i<=9;i++) \n\t\t{\n\t\t\tscanf(\"%c\",&s);\n\t\t\ta[i]=s-'0';\n\t\t\tif(a[i]==0) q[head].pos=i;\n\t\t}\n\t\ttar =cantor(t);\n\t\t\n\t\tans = bfs();\n\t\tprintf(\"%d\\n\",ans);\n\t\t\t/*for(int i=tail;i>0;i=q[i].pre)\n\t\t\t{\n\t\t\t\tfor(int j=1;j<=9;j++) cerr<<q[i].s[j]; \n\t\t\t\tcerr<<endl;\n\t\t\t}*///\u67e5\u770b\u8def\u5f84 \uff08gdb\uff09\n\t\t\t\n\t\treturn 0;\n\t\t\n\t } ",
        "postTime": 1537282164,
        "uid": 57652,
        "name": "minGr",
        "ccfLevel": 4,
        "title": "\u3010\u5eb7\u62d3\u5c55\u5f00\u3011\u516b\u6570\u7801"
    },
    {
        "content": "# \u9898\u89e3\n\nBFS\u3002\u5c06\u521d\u59cb\u72b6\u6001\u538b\u5165\u961f\u5217\uff0c\u518d\u5c1d\u8bd5\u6bcf\u4e00\u79cd\u53d8\u6362\uff0c\u540c\u65f6\u7edf\u8ba1\u79fb\u52a8\u6b21\u6570\uff0c\u76f4\u5230\u51fa\u73b0\u76ee\u6807\u72b6\u6001\u3002\n\n## \u72b6\u6001\u7684\u8868\u793a\n\n\u8fd9\u91cc\u4f7f\u7528 C++11 \u7684\u65b0\u7279\u6027 `std::array<int, 9>` \u6765\u8868\u793a\u72b6\u6001\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u666e\u901a\u6570\u7ec4\u7684\u539f\u56e0\uff1a\n\n1. \u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u961f\u5217\u5143\u7d20\u7c7b\u578b~~\uff08\u5f53\u7136\u666e\u901a\u6570\u7ec4\u5c01\u88c5\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e5f\u53ef\u4ee5\uff09~~\u3002\n2. \u65b9\u4fbf\u5224\u91cd\uff0c\u5177\u4f53\u89c1\u4e0b\u6587\u3002\n\n## \u5224\u91cd\n\n\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a `std::unordered_set< std::array<int, 9> >` \u6765\u5224\u91cd\uff0c\u73b0\u5728 `std::array` \u7684\u597d\u5904\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff1a**\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u96c6\u5408\u7c7b\u578b**\uff01\n\n\u5f53\u7136\u54c8\u5e0c\u51fd\u6570\u8fd8\u662f\u8981\u81ea\u5df1\u5199\uff0c\u4e0d\u8fc7\u4e5f\u4e0d\u96be\uff0c\u628a\u72b6\u6001\u538b\u6210\u4e00\u4e2a $9$ \u4f4d\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n# \u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cctype>\n#include <array>\n#include <queue>\n#include <unordered_set>\n\nconst int StateSize = 9;\nconst int Line = 3;\nconst int Row = 3;\ntypedef std::array<int, StateSize> State;\nconst State Goal = {1, 2, 3, 8, 0, 4, 7, 6, 5};\n\nconst int DirSize = 4;\nconst int Dx[DirSize] = {0, 1, 0, -1};\nconst int Dy[DirSize] = {1, 0, -1, 0};\n\nstruct Node {\n    State st;\n    int dist;\n\n    Node(const State &st, const int &dist = 0) : st(st), dist(dist) {}\n};\n\nstruct StateHash {\n    size_t operator()(const State &s) const {\n        size_t v = 0;\n        for (int x : s)\n            v = v * 10 + x;\n        \n        return v; \n    }\n};\n\nchar getGraph() {\n    char c;\n    while (!isgraph(c = getchar()));\n\n    return c;\n}\n\nvoid readState(State &st) {\n    for (int i = 0; i < StateSize; ++i)\n        st[i] = getGraph() - '0';\n}\n\nint main() {\n    State st;\n    readState(st);\n\n    std::queue<Node> Q;\n    std::unordered_set<State, StateHash> S;\n    Q.push(Node(st));\n    S.insert(st);\n\n    while (!Q.empty()) {\n        Node &node = Q.front();\n        State &st = node.st;\n        if (st == Goal) {\n            printf(\"%d\\n\", node.dist);\n            break;\n        }\n\n        int z;\n        for (z = 0; z < StateSize; ++z) {\n            if (!st[z]) {\n                break;\n            }\n        }\n\n        int x = z / Line, y = z % Row;\n        for (int i = 0; i < DirSize; ++i) {\n            int _x = x + Dx[i], _y = y + Dy[i];\n            int _z = _x * Line + _y;\n            if (_x >= 0 && _x < Line && _y >= 0 && _y < Row) {\n                State _st = st;\n                _st[_z] = st[z];\n                _st[z] = st[_z];\n\n                if (!S.count(_st)) {\n                    S.insert(_st);\n                    Q.push(Node(_st, node.dist + 1));\n                }\n            }\n        }\n\n        Q.pop();\n    }\n}\n```",
        "postTime": 1533097060,
        "uid": 5491,
        "name": "STLGirlfriend",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\n\n\u5218\u6c5d\u4f73\u4e66\u4e0a\u539f\u9898, \u7167\u505a\u5373\u53ef. \n\n\u548c\u4e66\u4e0a\u539f\u6765\u7684\u89e3\u6cd5\u76f8\u6bd4, \u6211\u6709\u6240\u4fee\u6539\u7684\u5730\u65b9: \n\n#### \u72b6\u6001\u76f4\u63a5\u7528\u4e00\u4e2a9\u4f4d\u6574\u6570\u8868\u793a.\n\n- \u597d\u5904: \u5b58\u50a8\u7a7a\u95f4\u7701\u4e86\n\n- \u574f\u5904: \u4ea4\u6362\u4e24\u4f4d\u6570\u5b57\u7565\u6709\u4e9b\u9ebb\u70e6\n\n#### \u6ce8\u610f: \u72b6\u6001\u548c\u72b6\u6001\u4e0b\u6807\n\n\u8fd9\u4e2a\u9898\u76ee\u6700\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f\u72b6\u6001\u548c\u72b6\u6001\u4e0b\u6807\u7684\u533a\u522b. \u72b6\u6001\u4e0b\u6807\u5c31\u662f\u72b6\u6001\u5728st\u6570\u7ec4\u4e2d\u7684\u7f16\u53f7. \n\n\u4f7f\u7528\u72b6\u6001\u4e0b\u6807\u8868\u793a\u4e00\u4e2a\u72b6\u6001, \u800c\u4e0d\u662f\u76f4\u63a5\u7528\u72b6\u6001\u672c\u8eab\u8868\u793a, \u662f\u4e3a\u4e86\u538b\u7f29\u5b58\u50a8\u7a7a\u95f4, \u907f\u514d\u9020\u6210\u6d6a\u8d39. \u56e0\u4e3a, \u5982\u679c\u76f4\u63a5\u7528\u72b6\u6001\u8868\u793a\u5176\u672c\u8eab, \u8981\u5c06\u5176\u7684\u4e00\u4e9b\u5c5e\u6027(\u5982\u8ddd\u79bb/\u54c8\u5e0c\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001)\u5b58\u50a8\u8d77\u6765, \u5c31\u8981\u8017\u8d3910^9\u5927\u5c0f\u7684\u6570\u7ec4. \u4f46\u6211\u4eec\u7684\u72b6\u6001\u5e76\u4e0d\u662f\u968f\u610f\u7684\u4e5d\u4f4d\u6570. \u8fd9\u4e5d\u4f4d\u6570\u662f0~9\u7684\u5168\u6392\u5217, \u4e00\u5171\u53ea\u67099!=362880\u4e2a, \u56e0\u6b64\u4e0a\u8ff0\u7684\u5b58\u50a8\u65b9\u5f0f\u5c06\u6709\u5927\u91cf\u6d6a\u8d39. \n\n\u800c\u628a\u6bcf\u4e00\u79cd\u7528\u5230\u7684\u6392\u5217\u65b9\u5f0f\u7f16\u4e0a\u53f7, \u6210\u4e3a\u72b6\u6001\u4e0b\u6807, \u518d\u8fdb\u884c\u5b58\u50a8, \u5219\u5177\u6709\u8f83\u5927\u4f18\u52bf. \n\n\u6839\u636e\u4e2a\u4eba\u7ecf\u9a8c, \u8fd9\u6837\u7684\u5b58\u50a8\u65b9\u5f0f\u8fd8\u662f\u6bd4\u8f83\u5e38\u89c1\u7684.\n\n#### \u54c8\u5e0c\u8868\u7684\u4f7f\u7528\n\n\u6211\u4eec\u4e0d\u60f3\u91cd\u590d\u8ba1\u7b97\u76f8\u540c\u7684\u72b6\u6001. \u56e0\u6b64, \u9700\u8981\u627e\u5230\u4e00\u79cd\u65b9\u5f0f\u628a\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\u5b58\u50a8\u8d77\u6765. \u8f83\u4e3a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u6309\u7167\u72b6\u6001\u4e0b\u6807\u5b58\u50a8\u5728st\u6570\u7ec4\u91cc, \u6bcf\u4e00\u6b21\u4ece\u7b2c\u4e00\u4e2a\u5230\u6700\u540e\u4e00\u4e2a\u68c0\u7d22\u662f\u5426\u8ba1\u7b97\u8fc7. \u8fd9\u6837\u7684\u65b9\u5f0f\u662f\u4f4e\u6548\u7684.\n\n\u54c8\u5e0c\u8868\u5c06\u6570\u636e\u589e\u52a0\u4e86\u4e00\u4e2a\u7ef4\u5ea6. \u9996\u5148\u7ed9\u72b6\u6001\u8ba1\u7b97\u4e00\u4e2a\u54c8\u5e0c\u7f16\u7801. \u672c\u9898\u4e2d\u76f4\u63a5\u5bf9\u72b6\u6001\u53d6\u6a21\u5373\u53ef. \u628a\u6240\u6709\u54c8\u5e0c\u7f16\u7801\u76f8\u540c\u7684\u72b6\u6001\u5f52\u4e3a\u4e00\u7c7b. \u6bcf\u6b21\u5728\u8fd9\u4e2a\u7c7b\u522b\u4e2d\u5bfb\u627e\u662f\u5426\u6709\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\u5373\u53ef.\n\n\u5218\u6c5d\u4f73\u4e66\u4e0a\u7ed9\u51fa\u7684\u54c8\u5e0c\u8868\u662f\u901a\u8fc7\u94fe\u8868\u5b9e\u73b0\u7684. \u5176\u5b9e\u7528vector\u4e5f\u53ef\u4ee5, \u5199\u8d77\u6765\u7a0d\u5fae\u5bb9\u6613\u4e00\u70b9, \u800c\u4e14\u672c\u9898\u540c\u6837\u53ef\u4ee5AC. \u4e2a\u4eba\u89c9\u5f97\u54c8\u5e0c\u8868\u7684\u8fd9\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\u548c\u56fe\u8bba\u91cc\u5b58\u56fe\u7684\u4e24\u79cd\u65b9\u6cd5\u662f\u76f8\u4f3c\u7684.\n\n#### BFS\n\n\u9996\u5148\u628a\u5f00\u59cb\u72b6\u6001\u5165\u961f. \u6bcf\u6b21\u53d6\u961f\u9996, \u770b\u770b\u662f\u4e0d\u662f\u76ee\u6807. \u662f\u5c31\u7ed3\u675f. \u4e0d\u662f, \u627e\u52300, \u5c1d\u8bd5\u6ed1\u52a8, \u7ec4\u6210\u65b0\u7684\u72b6\u6001, \u8ddd\u79bb+1. \u5c1d\u8bd5\u628a\u65b0\u7684\u72b6\u6001\u63d2\u5165\u54c8\u5e0c\u8868\u91cc. \u5982\u679c\u4ee5\u524d\u8ba1\u7b97\u8fc7\u5c31\u4e0d\u4f1a\u63d2\u5165. \u5982\u6b64\u53cd\u590d, \u627e\u5230\u7b54\u6848.\n\n\u4e66\u4e0a\u8fd9\u9898\u7684BFS\u6ca1\u6709\u7528queue, \u800c\u662f\u624b\u5de5\u7528\u6570\u7ec4\u5b9e\u73b0. \u8fd9\u6837\u7684\u597d\u5904\u5e94\u8be5\u662f\u4e0b\u6807\u6bd4\u8f83\u5bb9\u6613\u5bf9\u5e94. \u6211\u60f3\u7528queue\u4e5f\u662f\u53ef\u4ee5\u7684.\n\n#### \u4ee3\u78011 \u6ca1\u6709\u4f7f\u7528STL\n\n```\n//8Numbers\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<bitset>\n#include<queue>\n#include<deque>\n#include<vector>\n#include<string>\n#include<stack>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#define INF 0x3f3f3f3f\n#define MAXS 363000\n#define HASH 100007\nusing namespace std;\nint start; //\u8d77\u59cb\u72b6\u6001 \nint dist[MAXS]; //\u4e0b\u6807\u662fn\u7684\u72b6\u6001\u7684\u8ddd\u79bb \nint head[HASH]; //\u54c8\u5e0c\u7f16\u7801\u662fh\u7684\u9996\u4e2a\u72b6\u6001\u4e0b\u6807 \nint next[MAXS]; //\u72b6\u6001\u4e0b\u6807n\u7684\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u4e0b\u6807 \nint st[MAXS]; //\u72b6\u6001\u4e0b\u6807n\u5bf9\u5e94\u7684\u72b6\u6001 \nconst int goal=123804765;\nconst int dx[4]={0, 0, 1, -1};\nconst int dy[4]={1, -1, 0, 0};\nconst int ten[10]={1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000}; //10\u7684n\u6b21\u65b9\ninline int trans(int s, int z, int zz){\n\t//s\u539f\u6765\u76840\u5728\u7b2cz\u4f4d, \u8981\u53d8\u6210\u7b2czz\u4f4d\n\tz=8-z;\n\tzz=8-zz;\n\tint m=(s/ten[zz])%10;\n\treturn s-m*ten[zz]+m*ten[z];\n}\n\ninline int zero(int s){ //\u8fd4\u56de\u72b6\u6001\u4e2d0\u7684\u4f4d\u7f6e \n\tint z=8;\n\twhile(1){\n\t\tif ((s%10)==0) break;\n\t\ts=s/10;\n\t\tz--;\n\t}\n\treturn z;\n}\n\nbool insert(int s, int n){ //s\u662f\u8981\u63d2\u5165\u7684\u72b6\u6001, n\u662f\u72b6\u6001\u4e0b\u6807 \n\tint h=s%HASH;//h\u662f\u54c8\u5e0c\u7f16\u7801\n\tint u=head[h];//u\u662f\u72b6\u6001\u4e0b\u6807 \n\twhile(u){\n\t\tif (st[u]==s) return 0;\n\t\tu=next[u];\n\t}\n\tnext[n]=head[h];\n\thead[h]=n;\n\tst[n]=s;\n\treturn 1;\n}\n\nint bfs(){ //\u8fd4\u56de\u76ee\u6807\u72b6\u6001\u7684\u4e0b\u6807 \n\tmemset(head, 0, sizeof(head));\n\tint front=1; int rear=2;\n\tst[1]=start;\n\twhile(front<rear){\n\t\tint s=st[front];\n\t\tif (s==goal) return front;\n\t\tint z=zero(s); \n\t\tint x=z/3, y=z%3;\n\t\tfor (int d=0; d<4; d++){\n\t\t\tint xx=x+dx[d];\n\t\t\tint yy=y+dy[d];\n\t\t\tint zz=xx*3+yy;\n\t\t\tif (xx>=0 && xx<3 && yy>=0 && yy<3){\n\t\t\t\tint t=trans(s, z, zz); //\u65b0\u7684\u72b6\u6001 \n\t\t\t\tdist[rear]=dist[front]+1;\n\t\t\t\tif (insert(t, rear))  rear++;\n\t\t\t}\n\t\t}\n\t\tfront++;\n\t}\n\treturn 0;\n}\n\nint main(){\n\tcin>>start;\n\tint ans=bfs();\n\t//dist[0]=-1; //\u5982\u679c\u9898\u76ee\u662f\u65e0\u89e3\u8f93\u51fa-1\u65f6\u7528\n\tcout<<dist[ans]<<endl;\n}\n\n```\n\n-------------\n\n\n#### \u4ee3\u78012 \u54c8\u5e0c\u8868\u7528vector, BFS\u7528queue\u7684STL~~\u8c6a\u534e~~\u7248\n```cpp\n//8Numbers\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<bitset>\n#include<queue>\n#include<deque>\n#include<vector>\n#include<string>\n#include<stack>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#define INF 0x3f3f3f3f\n#define MAXS 363000\n#define HASH 100007\nusing namespace std;\nint start; //\u8d77\u59cb\u72b6\u6001 \nvector<int> hash[HASH]; //\u54c8\u5e0c\u7f16\u7801\u662fh\u7684\u72b6\u6001\u4e0b\u6807\u90fd\u5b58\u50a8\u5728hash[h]\u4e2d \nint dist[MAXS]; //\u4e0b\u6807\u662fn\u7684\u72b6\u6001\u7684\u8ddd\u79bb \nint st[MAXS]; //\u72b6\u6001\u4e0b\u6807n\u5bf9\u5e94\u7684\u72b6\u6001 \nconst int goal=123804765;\nconst int dx[4]={0, 0, 1, -1};\nconst int dy[4]={1, -1, 0, 0};\nconst int ten[10]={1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};\ninline int trans(int s, int z, int zz){\n\t//s\u539f\u6765\u76840\u5728\u7b2cz\u4f4d, \u8981\u53d8\u6210\u7b2czz\u4f4d\n\tz=8-z;\n\tzz=8-zz;\n\tint m=(s/ten[zz])%10;\n\treturn s-m*ten[zz]+m*ten[z];\n}\n\ninline int zero(int s){ //\u8fd4\u56de\u72b6\u6001\u4e2d0\u7684\u4f4d\u7f6e \n\tint z=8;\n\twhile(1){\n\t\tif ((s%10)==0) break;\n\t\ts=s/10;\n\t\tz--;\n\t}\n\treturn z;\n}\n\nbool insert(int s, int n){ //s\u662f\u8981\u63d2\u5165\u7684\u72b6\u6001, n\u662f\u72b6\u6001\u4e0b\u6807 \n\tint h=s%HASH;//h\u662f\u54c8\u5e0c\u7f16\u7801\n\tfor (int i=0; i<hash[h].size(); i++){\n\t\tint u=hash[h][i];\n\t\tif (st[u]==s) return 0;\n\t} \n\thash[h].push_back(n);\n\tst[n]=s;\n\treturn 1;\n}\n\nint bfs(){ //\u8fd4\u56de\u76ee\u6807\u72b6\u6001\u7684\u4e0b\u6807 \n\tqueue<int> q;\n\tint tot=2;\n\tq.push(1);\n\tst[1]=start;\n\twhile(!q.empty()){\n\t\tint front=q.front(); q.pop();\n\t\tint s=st[front];\n\t\tif (s==goal) return front;\n\t\tint z=zero(s); \n\t\tint x=z/3, y=z%3;\n\t\tfor (int d=0; d<4; d++){\n\t\t\tint xx=x+dx[d];\n\t\t\tint yy=y+dy[d];\n\t\t\tint zz=xx*3+yy;\n\t\t\tif (xx>=0 && xx<3 && yy>=0 && yy<3){\n\t\t\t\tint t=trans(s, z, zz); //\u65b0\u7684\u72b6\u6001\n\t\t\t\tif (insert(t, tot)){\n\t\t\t\t\tdist[tot]=dist[front]+1;\n\t\t\t\t\tq.push(tot);\n\t\t\t\t\ttot++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tcin>>start;\n\tint ans=bfs();\n\t//dist[0]=-1; \n\tcout<<dist[ans]<<endl;\n}\n\n```\n\n\u4e24\u4efd\u4ee3\u7801\u90fd\u662f\u53ef\u4ee5AC\u7684.\n",
        "postTime": 1531310830,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011\u54c8\u5e0c\u8868"
    },
    {
        "content": "#### Solution\n\u3000\u3000\u5176\u5b9e\u6211\u662f\u7b2c\u4e00\u6b21\u505a\u8fd9\u4e2a\u9898, \u4e3b\u8981\u662f\u7ed9\u50cf\u6211\u8fd9\u6837\u6bd4\u8f83\u83dc\u65e2\u4e0d\u4f1a**\u53cc\u5411\u5bbd\u641c**\u4e0d\u4f1a**\u5eb7\u6258\u5c55\u5f00**\u4e5f\u4e0d\u4f1a**\u6781\u9650\u526a\u679d**\u7684\u4eba\u770b. \u6211\u4eec\u8981\u5de7\u5999\u5229\u7528**STL**\u7ed9\u4e88\u6211\u4eec\u7684\u5de5\u5177.\u5177\u4f53\u505a\u6cd5\u5982\u4e0b:\n  \n- \u5bbd\u641c, \u5229\u7528stl\u4e2d\u7684`queue`, \u72b6\u6001\u7528`pair<int,int>`\u5206\u522b\u8868\u793a\u68cb\u76d8\u5f62\u6210\u7684\u6574\u6570\u548c\u5f53\u524d\u6b65\u6570.\n- \u7528`map/set`\u5224\u65ad\u72b6\u6001\u7684\u91cd\u590d, \u6b64\u5904\u53ef\u66ff\u6362\u4e3a\u5eb7\u6258\u5c55\u5f00.\n- \u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u68cb\u76d8, \u7528\u5230\u65f6\u5c06\u5176\u8f6c\u5316\u4e3a$3\\times 3$\u7684\u6570\u7ec4, \u7136\u540e\u518d\u79fb\u52a8\u7a7a\u767d\u4f4d\u7f6e.\u4e5f\u53ef\u4ee5\u4e0d\u8f6c\u5316, \u5c31\u662f\u611f\u89c9\u4f1a\u66f4\u9ebb\u70e6\u4e00\u70b9.\n\n\u3000\u3000\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u4e86\u5927\u91cf\u7684`map,pair,queue`\u56e0\u6b64\u5e38\u6570\u5de8\u5927, \u4f46\u662f\u5199\u7684\u6bd4\u8f83\u8f7b\u677e.\n\n#### Code\n```c++\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<map>\nusing namespace std;\n\nint dx[5]={0,0,1,-1};\nint dy[5]={1,-1,0,0};\n\nint st,ts;\nint zt[4][4];\n\npair<int,int> convert(int z){\n    zt[2][2]=z%10,z/=10,zt[2][1]=z%10,z/=10,zt[2][0]=z%10,z/=10,\n    zt[1][2]=z%10,z/=10,zt[1][1]=z%10,z/=10,zt[1][0]=z%10,z/=10,\n    zt[0][2]=z%10,z/=10,zt[0][1]=z%10,z/=10,zt[0][0]=z%10,z/=10;\n    for(int i=0;i<3;++i)\n        for(int j=0;j<3;++j)\n            if(!zt[i][j])return make_pair(i,j);\n}\nvoid Convert(){\n    ts=0;\n    ts+=zt[0][0],ts*=10,ts+=zt[0][1],ts*=10,ts+=zt[0][2],ts*=10,\n    ts+=zt[1][0],ts*=10,ts+=zt[1][1],ts*=10,ts+=zt[1][2],ts*=10,\n    ts+=zt[2][0],ts*=10,ts+=zt[2][1],ts*=10,ts+=zt[2][2];\n}\nint mubiao=123804765;\nbool in(int x,int y){\n    if(x>-1&&y>-1&&x<3&&y<3)return true;\n    return false;\n}\nmap<int,int>ma;\nint tot=0;\n\nmain(){\n    scanf(\"%d\",&st);\n    queue<pair<int,int> >que;\n    que.push(make_pair(st,0));\n    while(!que.empty()){\n        pair<int,int> top=que.front();\n        if(top.first==mubiao){\n            printf(\"%d\",top.second);\n            return 0;\n        }\n        pair<int,int> bi=convert(top.first);\n        que.pop();\n        for(int i=0;i<4;++i){\n            int xx=bi.first+dx[i],yy=bi.second+dy[i];\n            swap(zt[xx][yy],zt[bi.first][bi.second]);\n            Convert();\n            if(in(xx,yy)&&!ma.count(ts)){\n                que.push(make_pair(ts,top.second+1));\n                ma[ts]=++tot;\n            }\n            swap(zt[xx][yy],zt[bi.first][bi.second]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1529934559,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u516b\u6570\u7801\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u56fe\u7684\u201c\u8282\u70b9\u201d\u5c31\u662f9\u4e2a\u683c\u5b50\u4e2d\u7684\u6ed1\u5757\u7f16\u53f7\uff08\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u628a\u5b83\u4eec\u653e\u5230\u4e00\u4e2a\u5305\u542b9\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u4e2d\uff09\u3002\u65e0\u6743\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u95ee\u9898\u53ef\u4ee5\u7528BFS\u6c42\u89e3\u3002\r\n\r\n\r\n------------\r\n\r\n\u6811\u7684BFS\u4e0d\u9700\u8981\u5224\u91cd\uff0c\u56e0\u4e3a\u6839\u672c\u4e0d\u4f1a\u91cd\u590d\uff1b\u4f46\u5bf9\u4e8e\u56fe\u6765\u8bf4\uff0c\u5982\u679c\u4e0d\u5224\u91cd\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u5c06\u4ea7\u751f\u6781\u5927\u7684\u6d6a\u8d39\u3002 \u697c\u4e0b\u7684\u5224\u91cd\u65b9\u5f0f\u5efa\u8bae\u4e0d\u8981\u5b66\u4e60\uff0c\u56e0\u4e3a\u7528\u4e00\u4e2a\u4e5d\u7ef4\u6570\u7ec4\u4e00\u5171\u67099^9=387420489\u9879\uff0c\u592a\u591a\u4e86\uff0c\u6570\u7ec4\u53ef\u80fd\u5f00\u4e0d\u4e0b\u3002\u5b9e\u9645\u7ed3\u70b9\u6570\u5e76\u6ca1\u6709\u8fd9\u4e48\u591a\uff0c0~8\u7684\u6392\u5217\u603b\u5171\u53ea\u67099!=362880\u4e2a\u3002\u8fd9\u6837\u7684\u7528\u6cd5\u5b58\u5728\u5927\u91cf\u7684\u6d6a\u8d39\u2026\u2014\u2014\u6570\u7ec4\u4e2d\u6709\u5f88\u591a\u9879\u90fd\u6ca1\u6709\u88ab\u7528\u5230\uff0c\u4f46\u5374\u5360\u636e\u4e86\u7a7a\u95f4\u3002\r\n\r\n\r\n------------\r\n\r\n\u7b2c\u4e00\u79cd\u529e\u6cd5\u662f\u628a\u6392\u5217\u53d8\u6210\u6574\u6570\uff0c\u8fd9\u6837\u53ea\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u6548\u7387\u8fd8\u884c\uff09\u3002\u4f46\u662f\u9002\u7528\u8303\u56f4\u4e0d\u5927\uff1a\u5982\u679c\u9690\u5f0f\u56fe\u7684\u603b\u7ed3\u70b9\u6570\u975e\u5e38\u5927\uff0c\u7f16\u7801\u4e5f\u4f1a\u5f88\u5927\uff0c\u6570\u7ec4\u8fd8\u662f\u5f00\u4e0d\u4e0b\u3002\r\n\r\n\r\n------------\r\n\r\n\u7b2c\u4e8c\u79cd\u529e\u6cd5\u662f\u4f7f\u7528\u54c8\u5e0c\uff08hash\uff09\u6280\u672f\uff08\u7b80\u5355\u5730\u8bf4\uff0c\u662f\u628a\u7ed3\u70b9\u53d8\u6210\u6574\u6570\uff0c\u4f46\u4e0d\u5fc5\u4e00\u4e00\u5bf9\u5e94\uff09\u3002\uff08\u6bd4\u8d5b\u4e2d\u6700\u5e38\u7528\uff09\r\n\r\n\r\n------------\r\n\r\n\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u5229\u7528STL\u96c6\u5408\u3002\uff08\u4ee3\u7801\u6700\u597d\u5199\uff09\uff0c\u4f46\u662f\u6548\u7387\u6bd4\u8f83\u6162\uff0c\u5efa\u8bae\u5728\u65f6\u95f4\u7d27\u8feb\u6216\u5bf9\u6548\u7387\u8981\u6c42\u4e0d\u592a\u9ad8\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u6216\u8005\u4ec5\u628a\u5b83\u4f5c\u4e3a\u201c\u8df3\u677f\u201d\u2014\u2014\u5148\u5199\u4e00\u4e2aSTL\u7684\u7a0b\u5e8f\uff0c\u786e\u4fdd\u4e3b\u7b97\u6cd5\u6b63\u786e\uff0c\u7136\u540e\u628aset\u66ff\u6362\u6210\u81ea\u5df1\u5199\u7684\u54c8\u5e0c\u8868\u3002\r\n\r\n\r\n------------\r\n\r\n\u8fd9\u91cc\u5229\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6bd4\u8d5b\u4e2d\u6bd4\u8f83\u5e38\u7528\uff0c\u800c\u4e14\u6267\u884c\u6548\u7387\u5f88\u9ad8\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\r\n```cpp\r\n#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nusing State = int[9]; // \u5b9a\u4e49\u201c\u72b6\u6001\u201d\u7c7b\u578b\r\nconst int maxstate = 1000000;\r\nState st[maxstate], goal = {1, 2, 3, 8, 0, 4, 7, 6, 5}; // \u72b6\u6001\u6570\u7ec4\u3002\u6240\u6709\u72b6\u6001\u90fd\u4fdd\u5b58\u5728\u8fd9\u91cc\r\nint dist[maxstate]; // \u8ddd\u79bb\u6570\u7ec4\r\n\r\nconst int dx[] = {-1, 1, 0, 0};\r\nconst int dy[] = {0, 0, -1, 1};\r\n\r\nnamespace myhash // STL\u6709\u8bb8\u591a\u51fd\u6570\u540d\u662fhash\u7684\u51fd\u6570\uff0c\u4e3a\u4e86\u4fdd\u9669\u6700\u597d\u7528\u540d\u79f0\u7a7a\u95f4\uff08\u6362\u4e2a\u540d\u5b57\u4e5f\u53ef\u4ee5\uff09\uff0c\u4e2a\u4eba\u4e60\u60ef\r\n{\r\n    const int hashsize = 1000003;\r\n    int head[hashsize], next[maxstate];\r\n\r\n    void init_lookup_table()\r\n    {\r\n        memset(head, 0, sizeof(head));\r\n    }\r\n\r\n    int hash(State& s)\r\n    {\r\n        int v = 0;\r\n        // \u628a9\u4e2a\u6570\u5b57\u7ec4\u5408\u62109\u4f4d\u6570\r\n        for (int i = 0; i < 9; i++)\r\n            v = v * 10 + s[i];\r\n        return v % hashsize;\r\n        // \u786e\u4fddhash\u503c\u662f\u4e0d\u8d85\u8fc7hash\u8868\u7684\u5927\u5c0f\u7684\u975e\u8d1f\u6574\u6570\r\n    }\r\n\r\n    int try_to_insert(int s)\r\n    {\r\n        int h = hash(st[s]);\r\n        int u = head[h]; // \u4ece\u8868\u5934\u5f00\u59cb\u67e5\u627e\u94fe\u8868\r\n        while (u)\r\n        {\r\n            // \u627e\u5230\u4e86\uff0c\u63d2\u5165\u5931\u8d25\r\n            if (!memcmp(st[u], st[s], sizeof(st[s])))\r\n                return 0;\r\n            u = next[u]; // \u987a\u7740\u94fe\u8868\u63a5\u7740\u627e\r\n        }\r\n        next[s] = head[h]; // \u63d2\u5165\u5230\u94fe\u8868\u4e2d\r\n        head[h] = s;\r\n        return 1;\r\n    }\r\n}\r\n\r\n// BFS\uff0c\u8fd4\u56de\u76ee\u6807\u72b6\u6001\u5728st\u6570\u7ec4\u4e0b\u6807\r\nint bfs()\r\n{\r\n    myhash::init_lookup_table(); // \u521d\u59cb\u5316\u67e5\u627e\u8868\r\n    int front = 1, rear = 2; // \u4e0d\u4f7f\u7528\u4e0b\u68070\uff0c\u56e0\u4e3a0\u88ab\u770b\u505a\u201c\u4e0d\u5b58\u5728\u201d\r\n    while (front < rear)\r\n    {\r\n        State& s = st[front]; // \u7528\u5f15\u7528\u7b80\u5316\u4ee3\u7801\r\n        if (!memcmp(goal, s, sizeof(s)))\r\n            return front; // \u627e\u5230\u76ee\u6807\u72b6\u6001\uff0c\u6210\u529f\u8fd4\u56de\r\n        int z;\r\n        for (z = 0; z < 9; z++)\r\n            if (!s[z])\r\n                break; // \u627e\u201c0\u201d\u7684\u4f4d\u7f6e\r\n        // \u83b7\u53d6\u884c\u5217\u7f16\u53f7\uff080~2\uff09 \r\n        int x = z / 3;\r\n        int y = z % 3;\r\n        for (int d = 0; d < 4; d++)\r\n        {\r\n            int newx = x + dx[d];\r\n            int newy = y + dy[d];\r\n            int newz = newx * 3 + newy;\r\n            if (newx >= 0 && newx < 3 && newy >= 0 && newy < 3)\r\n            { // \u5982\u679c\u79fb\u52a8\u5408\u6cd5\r\n                State& t = st[rear]; // \u6269\u5c55\u65b0\u7ed3\u70b9\r\n                memcpy(&t, &s, sizeof(s));\r\n                t[newz] = s[z];\r\n                t[z] = s[newz];\r\n                // \u66f4\u65b0\u65b0\u7ed3\u70b9\u7684\u8ddd\u79bb\u503c\r\n                dist[rear] = dist[front] + 1;\r\n                // \u5982\u679c\u6210\u529f\u63d2\u5165\u67e5\u627e\u8868\uff0c\u4fee\u6539\u961f\u5c3e\u6307\u9488\r\n                if (myhash::try_to_insert(rear))\r\n                    rear++;\r\n            }\r\n        }\r\n        front++;\r\n    }\r\n    return 0; // \u5931\u8d25\r\n}\r\n\r\nint main()\r\n{\r\n    char tmp;\r\n    for (int i = 0; i < 9; i++)\r\n    {\r\n        cin >> tmp; // \u8d77\u59cb\u72b6\u6001\r\n        st[1][i] = tmp - '0';\r\n    }\r\n    int ans = bfs(); // \u8fd4\u56de\u76ee\u6807\u72b6\u6001\u7684\u4e0b\u6807\r\n    if (ans > 0)\r\n        cout << dist[ans] << endl;\r\n    else\r\n        cout << -1 << endl;\r\n    return 0;\r\n}\r\n```\r\n\u6ce8\u610f\uff1a\u672c\u4ee3\u7801\u7528\u7684\u662fC++11\u65b0\u6807\u51c6\uff0c\u5982\u9700\u8981C++98\u4ee3\u7801\uff0c\u8bf7\u79c1\u4fe1\u6211\u3002\r\n\r\n\u63d0\u793a\uff1a\u67d0\u4e9b\u7279\u5b9a\u7684STL\u5b9e\u73b0\u8fd8\u6709hash_set\uff0c\u5b83\u6b63\u662f\u57fa\u4e8e\u524d\u9762\u7684\u54c8\u5e0c\u8868\uff0c\u4f46\u5b83\u5e76\u4e0d\u662f\u6807\u51c6C++\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u53ef\u7528\u3002",
        "postTime": 1525436019,
        "uid": 84282,
        "name": "andyli",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u516b\u6570\u7801\u96be\u9898\uff0c\u5f88\u663e\u7136~~\u770b\u7b97\u6cd5\u6807\u7b7e~~\u5c31\u77e5\u9053\u8fd9\u662f\u4e00\u9053Bfs\u9898\uff0c\u56e0\u4e3aBfs\u7684\u7279\u70b9\u5c31\u662f\uff1a\u9002\u5408\u4e8e\u627e\u6700\u4f18\u89e3\u3002\u5982\u679c\u7528Dfs\uff0c\u90a3\u4e48\u9700\u8981\u679a\u4e3e\u6240\u6709\u60c5\u51b5\uff0c\u53d6\u6700\u4f18\u89e3\uff0c\u800cBfs\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5c31\u80fd\u786e\u5b9a\u5b83\u662f\u6700\u4f18\u89e3\n\n----\n\n#### \u8fd9\u9898\u89e3\u6cd5\u5f88\u591a\uff0c\u5728\u8fd9\u7bc7\u9898\u89e3\u91cc\u6211\u9610\u8ff0\u4e09\u79cd\u89e3\u6cd5\n1. Set\n2. Hash\n3. \u5eb7\u62d3\u5c55\u5f00\n\n~~\u81f3\u4e8e\u53cc\u5411\u5bbd\u641c\u53ef\u4ee5\u53bb\u770b\u522b\u7684\u9898\u89e3\u6211\u4e0d\u4f1a~~\n\n~~\u4e5d\u8fdb\u5236\u592a\u9ebb\u70e6\u6211\u6ca1\u5199~~\n\n~~\u542f\u53d1\u5f0f\u641c\u7d22\u4f60\u770b\u6211\u9893\u5e9f\u7684\u6a21\u6837\u5c31\u77e5\u9053\u6211\u4e0d\u4f1a\u4e86~~\n\n-----\n\n#### Bfs\u4e00\u822c\u5199\u6cd5\n\nCode(\u4f2a\u4ee3\u7801):\n\n```cpp\nstruct state //\u72b6\u6001\n{\n\t\n}now, next;\n\nqueue<state> Q; //Bfs\u4e2d\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u961f\u5217\nQ.push(first) //\u57fa\u7840\u72b6\u6001\nwhile (!Q.empty()) //\u679a\u4e3e\u6240\u6709\u65b9\u6848\n{\n\tnow = Q.top();\n    if (now \u6ee1\u8db3\u6761\u4ef6)\n    {\n    \t//\u8f93\u51fa\u7b54\u6848\u6216\u8005\u5176\u4ed6\n    }\n    Q.pop();\n    if (now \u4e0e\u4e4b\u524d\u7684\u7b54\u6848\u91cd\u590d)\n    {\n    \tcontinue; \u6216\u8005\u5176\u5b83\n    }\n    for (next \u7b26\u5408\u4e0b\u4e00\u6b65\u6761\u4ef6)\n    {\n    \tQ.push(next);\n    }\n}\n//\u5982\u679c\u6240\u6709\u53ef\u884c\u72b6\u6001\u5168\u90e8\u679a\u4e3e\u5b8c\u6bd5\u5374\u6ca1\u6709\u627e\u5230\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\n//\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u7ed3\u679c\n```\n------\n\n1. \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a$vis$\u6570\u7ec4\u6765\u5224\u91cd\uff0c\u90a3\u4e48\u4f60\u7684$vis$\u6570\u7ec4\u5927\u5c0f\u8981$>=876543210$\uff0c\u5f88\u663e\u7136``MLE``\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u6548\u7684\u5224\u91cd\u65b9\u5f0f\u3002\n\n2. \u4f60\u8868\u793a\u6bcf\u4e2a\u72b6\u6001\u53ef\u4ee5\u7528$a[3][3]$\u6216$a[9]$\uff0c\u5982\u679c\u4f60\u7528\u524d\u8005\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5728\u5224\u91cd\u65b9\u9762\u53ef\u80fd\u90fd\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u7684\u4ee3\u7801\u90fd\u91c7\u53d6\u4e86$a[9]$\u8fd9\u6837\u7684\u5f62\u5f0f\u3002\n\n------\n\n- Set\n\nSTLSet\u601d\u8def\u5f88\u597d\u60f3\uff0c\u5728\u6bcf\u6b21\u8bbf\u95ee\u540e\u90fd\u5c06\u5f53\u524d\u72b6\u6001\u653e\u8fdbSet\uff0c\u8fd9\u6837\u6bcf\u6b21\u653e\u5165\u548c\u5224\u91cd\u90fd\u662f$O(logn)$\u7684\n\n> Tips: \n- set.insert(x) \u5c06x\u653e\u8fdbset\n- set.count(x) \u8be2\u95eex\u662f\u5426\u5728set\u91cc\uff0c\u8fd4\u56de$0/1$\n- set.empty() set\u662f\u5426\u4e3a\u7a7a\n\n[$Luogu$\u8bc4\u6d4b\uff1a$5728ms / 11339KB$](https://www.luogu.org/recordnew/show/6894610)\n\nCode:\n```cpp\n#include <cstdio>\n#include <queue>\n#include <set>\nusing namespace std;\n\nstruct state\n{\n\tint a[10], s;\n}now; //\u7528\u7ed3\u6784\u4f53state\u5b58\u50a8\u6bcf\u4e00\u4e2a\u72b6\u6001\n\nqueue<state> Q; //\u4e00\u53eaSTL\u961f\u5217\uff08\u6211\u61d2qwq\uff09\nset<int> S;  //\u4e00\u53eaSTLset\nint aim[10] = {0, 1, 2, 3, 8, 0, 4, 7, 6, 5}; //\u6700\u540e\u7684\u76ee\u6807\n\nint main()\n{\n\tint i;\n\tfor (i = 1; i <= 9; i++) now.a[i] = getchar() - '0'; //\u8f93\u5165\n\tnow.s = 0;\n\tQ.push(now);  //\u521d\u59cb\u72b6\u6001\uff0c\u5373\u8f93\u5165\u6570\u636e\n\twhile (!Q.empty()) //\u4e0d\u505c\u679a\u4e3e\uff0c\u76f4\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u72b6\u6001\u679a\u4e3e\u5b8c\u6bd5\n\t{\n\t\tfor (i = 1; i <= 9; i++) now.a[i] = Q.front().a[i];\n\t\tnow.s = Q.front().s;\n\t\tQ.pop(); //\u8fd9\u4e00\u6b21\u8981\u5904\u7406\u7684\u72b6\u6001\n\t\t\n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\tbool flag = true;\n\t\tfor (i = 1; i <= 9; i++) if (now.a[i] != aim[i]) flag = false;\n\t\tif (flag)\n\t\t{\n\t\t\tprintf(\"%d\", now.s);\n\t\t\treturn 0;\n\t\t} \n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\t\n        //\u5224\u91cd\n\t\tint id = 0;\n\t\tfor (i = 1; i <= 9; i++) id = id * 10 + now.a[i];\n\t\tif (!S.empty() && S.count(id)) continue; //S.empty()\u662f\u4e3a\u4e86\u4fdd\u9669\uff0c\u5982\u679cS.empty()\u4e3afalse\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8c03\u7528S.count()\u51fd\u6570\u8be2\u95ee\n\t\telse S.insert(id); \n        //\u5224\u91cd\n\t\t\n\t\tfor (i = 1; i <= 9; i++) if (!now.a[i]) break;\n\t\tint ni = i; //\u627e\u52300\u9879\n\t\t\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t\tnow.s++;\n\t\tif ((ni - 1) / 3 != 0) //\u8fd9\u4e9b\u8f6c\u6362\u53ef\u4ee5\u7528\u7eb8\u6a21\u62df\u4e00\u4e0b\uff0c\u770b\u770b\u548c\u4e8c\u7ef4\u6570\u7ec4\u662f\u5426\u7b49\u6548\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t}\n\t\tif ((ni - 1) / 3 != 2)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t}\n\t\tif (ni % 3 != 1)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t}\n\t\tif (ni % 3 != 0)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t}\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t}\n\tprintf(\"-1\"); //\u4e0d\u80fd\u5230\u8fbe\u76ee\u6807\u72b6\u6001\uff0c\u5c3d\u7ba1\u9898\u76ee\u6ca1\u6709\u8981\u6c42\n\treturn 0;\n} \n```\n\n------\n\n- Hash\n\n\u5f88\u663e\u7136$Map$\u65f6\u95f4\u5f88\u6162~~\u4e5f\u53ef\u80fd\u662f\u6211\u5e38\u6570\u592a\u5927~~\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u66f4\u9ad8\u6548\u7684\u5224\u91cd\u6761\u4ef6\n\n\u6211\u4eec\u4f7f\u7528Hash\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n**Hash\u662f\u4ec0\u4e48\uff1f**\n\n\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u770b\u6210\u4e00\u4e2a$T$\u8fdb\u5236\u4f4d\u7684\u6574\u6570\uff0c\u800c\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u6709\u5b83\u5bf9\u5e94\u7684\u503c\u3002\n\n\u4e60\u60ef\u4e0a\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u7684ASCII\u4f5c\u4e3a\u5b83\u4ee3\u8868\u7684\u503c\u3002\n\n\u5f53\u7136\uff0c\u73b0\u5728\u6211\u4eec\u7684Hash\u8981\u5904\u7406\u7684\u662f\u4e00\u4e2a\u5927\u6574\u6570\uff0c\u6240\u4ee5\u6bcf\u4e00\u4f4d\u6570\u662f\u4ec0\u4e48\u503c\u5c31\u628a\u4ed6\u5f53\u4ec0\u4e48\u503c\u3002\n\n\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u4f60\u7684\u7ed3\u679c\u9700\u8981%\u4e00\u4e2a$MOD$\u3002\n\n\u8fd9\u6837\uff0c$vis$\u6570\u7ec4\u5927\u5c0f\u5c31\u80fd\u4ece$876543210$\u964d\u5230$2000000$\u751a\u81f3\u66f4\u5c11~~\u518d\u5c11\u4e0b\u53bb\u5c31\u6709\u70b9\u5371\u9669\u4e86~~\n\n\u6ce8\u610f\uff1a$vis[hash(x)]=true$\u4ee3\u8868\u8fd9\u4e2a\u6570\u5f88\u5927\u6982\u7387\u51fa\u73b0\u8fc7\uff0c$vis[hash(x)]=false$\u4ee3\u8868\u8fd9\u4e2a\u6570\u4e00\u5b9a\u6ca1\u51fa\u73b0\u8fc7\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u53cc$Hash$\u4fdd\u9669\u3002\n\n\u4e24\u4e2a$Hash$\u5206\u522b\u7528\u4e0d\u540c\u7684$T$\u548c$MOD$\uff0c\u5b58\u5728$vis[]$\u548c$vis2[]$\u91cc\uff0c\u5982\u679c$vis[hash(x)]=true$ && $vis2[hash2(x)]=true$\uff0c\u90a3\u8fd9\u4e2a\u6570\u4e00\u5b9a\u51fa\u73b0\u8fc7\u4e86\uff08\u5f53\u7136\uff0c\u5982\u679c\u4f60$rp$\u4e0d\u597d\uff0c\u4ecd\u7136\u53ef\u80fd\u51fa\u73b0\u77db\u76fe\uff09\n\n>P.S. Hash\u592a\u7384\u5b66\uff0c\u6b63\u5f0f\u8003\u8bd5\u4e07\u4e0d\u5f97\u5df2\u5c3d\u91cf\u4e0d\u8981\u7528\n1. [61\u5206](https://www.luogu.org/recordnew/show/6895184)\n2. [76\u5206](https://www.luogu.org/record/show?rid=6895212)\n3. [97\u5206](https://www.luogu.org/record/show?rid=6895271)\n4. [100\u5206](https://www.luogu.org/record/show?rid=6895271)\n\n$2832ms / 5460KB$ \u6bd4 $Set$ \u597d\u591a\u5566\n\nCode:\n```cpp\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\nstruct state\n{\n\tint a[10], s;\n}now; //\u7528\u7ed3\u6784\u4f53state\u5b58\u50a8\u6bcf\u4e00\u4e2a\u72b6\u6001\n\nqueue<state> Q; //\u4e00\u53eaSTL\u961f\u5217\uff08\u6211\u61d2qwq\uff09\nbool vis[2000000], vis2[2000000];\nconst int MOD1 = 1163729, T1 = 1123121, MOD2 = 1122677, T2 = 122077; //\u89c4\u5b9a\u53cchash\u7684MOD\u548cT \nint aim[10] = {0, 1, 2, 3, 8, 0, 4, 7, 6, 5}; //\u6700\u540e\u7684\u76ee\u6807\n\nint hash(int a[], const int MOD, const int T)\n{\n\tint ret = 0, i;\n\tfor (i = 1; i <= 9; i++) ret = ((ret * T + MOD) % MOD + a[i] + MOD) % MOD;\n\treturn ret;\n} //Hash\u51fd\u6570 \n\nint main()\n{\n\tint i;\n\tfor (i = 1; i <= 9; i++) now.a[i] = getchar() - '0'; //\u8f93\u5165\n\tnow.s = 0;\n\tQ.push(now);  //\u521d\u59cb\u72b6\u6001\uff0c\u5373\u8f93\u5165\u6570\u636e\n\twhile (!Q.empty()) //\u4e0d\u505c\u679a\u4e3e\uff0c\u76f4\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u72b6\u6001\u679a\u4e3e\u5b8c\u6bd5\n\t{\n\t\tfor (i = 1; i <= 9; i++) now.a[i] = Q.front().a[i];\n\t\tnow.s = Q.front().s;\n\t\tQ.pop(); //\u8fd9\u4e00\u6b21\u8981\u5904\u7406\u7684\u72b6\u6001\n\t\t\n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\tbool flag = true;\n\t\tfor (i = 1; i <= 9; i++) if (now.a[i] != aim[i]) flag = false;\n\t\tif (flag)\n\t\t{\n\t\t\tprintf(\"%d\", now.s);\n\t\t\treturn 0;\n\t\t} \n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\t\n\t\t//Hash\u7248\u5224\u91cd \n\t\tint hash1 = hash(now.a, MOD1, T1), hash2 = hash(now.a, MOD2, T2);\n        if (vis[hash1] && vis[hash2]) continue;\n        vis[hash1] = vis[hash2] = true;\n        //Hash\u7248\u5224\u91cd \n\t\t\n\t\tfor (i = 1; i <= 9; i++) if (!now.a[i]) break;\n\t\tint ni = i; //\u627e\u52300\u9879\n\t\t\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t\tnow.s++;\n\t\tif ((ni - 1) / 3 != 0) //\u8fd9\u4e9b\u8f6c\u6362\u53ef\u4ee5\u7528\u7eb8\u6a21\u62df\u4e00\u4e0b\uff0c\u770b\u770b\u548c\u4e8c\u7ef4\u6570\u7ec4\u662f\u5426\u7b49\u6548\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t}\n\t\tif ((ni - 1) / 3 != 2)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t}\n\t\tif (ni % 3 != 1)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t}\n\t\tif (ni % 3 != 0)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t}\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t}\n\tprintf(\"-1\"); //\u4e0d\u80fd\u5230\u8fbe\u76ee\u6807\u72b6\u6001\uff0c\u5c3d\u7ba1\u9898\u76ee\u6ca1\u6709\u8981\u6c42\n\treturn 0;\n} \n```\n\n----\n\n- \u5eb7\u62d3\u5c55\u5f00\n\n\u60f3\u60f3\uff0c\u6211\u4eec\u7684\u6734\u7d20$vis$\u6570\u7ec4\u4e3a\u4ec0\u4e48\u4f1a\u5f00\u5230$876543210$\uff1f\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a$vis$\u6570\u7ec4\u9020\u6210\u4e86\u592a\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002\n\n\u6bd4\u5982$100000000$\uff0c$123456789$\u8fd9\u4e9b\u72b6\u6001\u662f\u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u3002\n\n\u8bd5\u60f3\uff0c\u6211\u4eec\u7684\u516b\u6570\u7801\u6700\u591a\u6709\u591a\u5c11\u79cd\uff1f\n\n$9! = 362880$.\n\n\u663e\u7136$876543210$\u592a\u6d6a\u8d39\u4e86\u3002\n\n\u5982\u679c\u6211\u4eec\u80fd\u628a\u6bcf\u79cd\u5168\u6392\u5217\u90fd\u7f16\u4e2a\u53f7\uff0c\u8fd9\u6837$vis$\u6570\u7ec4\u5c31\u53ea\u7528\u5f00\u5230$362880$\u5c31\u591f\u5566\uff01\n\n\u90a3\uff0c\u600e\u4e48\u505a\u5462\uff1f\n\n>\u5eb7\u62d3\u5c55\u5f00\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$n$\u4f4d\u7684\u5168\u6392\u5217$a[n]$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$a[i]$\uff0c\u8bbe$X[n-i+1]$\u4e3a$a[i]$\u53f3\u8fb9\u4e25\u683c\u5c0f\u4e8e$a[i]$\u7684\u6570\u5b57\u4e2a\u6570\uff0c\u5e76\u5c06\u8fd9\u4e2a\u6570\u5b57\u4e58\u4e0a$(n-1)!$\u3002\n\n>\u90a3\u4e48\u8fd9\u4e2a\u5168\u6392\u5217\u5c31\u662f\u6240\u6709\u5168\u6392\u5217\u4e2d\u7684\u7b2c$X[1]+X[2]+...+X[n]+1$\u4e2a\u3002\n\n**\u5eb7\u62d3\u5c55\u5f00\u5b9e\u73b0\u5982\u4e0b\uff1a**\n```cpp\nint Cantor(int l, int a[]) //l\u662f\u6392\u5217\u957f\u5ea6\uff0ca[]\u662f\u6392\u5217\u6570\u7ec4\n{\n\tint i, j, x[MAXN], ret = 0;\n\tfor (i = 1; i <= l; i++) x[i] = 0;\n\tfor (i = 1; i <= l; i++) for (j = i + 1; j <= l; j++) if (a[j] < a[i]) x[l - i + 1]++; \n\tfor (i = 1; i <= l; i++) ret += x[i] * jc[i - 1];\n\treturn ret + 1;\n}\n```\n\nCode:\n\n[$Luogu$\u8bc4\u6d4b\uff1a$2720ms / 4742KB$](https://www.luogu.org/recordnew/show/6895835)\n\n```cpp\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\nstruct state\n{\n\tint a[10], s;\n}now; //\u7528\u7ed3\u6784\u4f53state\u5b58\u50a8\u6bcf\u4e00\u4e2a\u72b6\u6001\n\nqueue<state> Q; //\u4e00\u53eaSTL\u961f\u5217\uff08\u6211\u61d2qwq\uff09\nbool vis[362881];\nint aim[10] = {0, 1, 2, 3, 8, 0, 4, 7, 6, 5}; //\u6700\u540e\u7684\u76ee\u6807\nconst int jc[] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};\n\nint Cantor(int l, int a[])\n{\n\tint i, j, x[10], ret = 0;\n\tfor (i = 1; i <= l; i++) x[i] = 0;\n\tfor (i = 1; i <= l; i++) for (j = i + 1; j <= l; j++) if (a[j] < a[i]) x[l - i + 1]++; \n\tfor (i = 1; i <= l; i++) ret += x[i] * jc[i - 1];\n\treturn ret + 1;\n}\n\nint main()\n{\n\tint i;\n\tfor (i = 1; i <= 9; i++) now.a[i] = getchar() - '0'; //\u8f93\u5165\n\tnow.s = 0;\n\tQ.push(now);  //\u521d\u59cb\u72b6\u6001\uff0c\u5373\u8f93\u5165\u6570\u636e\n\twhile (!Q.empty()) //\u4e0d\u505c\u679a\u4e3e\uff0c\u76f4\u5230\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u72b6\u6001\u679a\u4e3e\u5b8c\u6bd5\n\t{\n\t\tfor (i = 1; i <= 9; i++) now.a[i] = Q.front().a[i];\n\t\tnow.s = Q.front().s;\n\t\tQ.pop(); //\u8fd9\u4e00\u6b21\u8981\u5904\u7406\u7684\u72b6\u6001\n\t\t\n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\tbool flag = true;\n\t\tfor (i = 1; i <= 9; i++) if (now.a[i] != aim[i]) flag = false;\n\t\tif (flag)\n\t\t{\n\t\t\tprintf(\"%d\", now.s);\n\t\t\treturn 0;\n\t\t} \n        //\u4e00\u6bb5\u7b80\u5355\u7684\u5224\u65ad\u662f\u5426\u6210\u529f\u7684\u4ee3\u7801\n\t\t\n\t\t//\u5eb7\u6258\u5c55\u5f00\u7248\u5224\u91cd \n\t\tint cantor = Cantor(9, now.a);\n\t\tif (vis[cantor]) continue;\n\t\tvis[cantor] = true;\n\t\t//\u5eb7\u6258\u5c55\u5f00\u7248\u5224\u91cd \n\t\t\n\t\tfor (i = 1; i <= 9; i++) if (!now.a[i]) break;\n\t\tint ni = i; //\u627e\u52300\u9879\n\t\t\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t\tnow.s++;\n\t\tif ((ni - 1) / 3 != 0) //\u8fd9\u4e9b\u8f6c\u6362\u53ef\u4ee5\u7528\u7eb8\u6a21\u62df\u4e00\u4e0b\uff0c\u770b\u770b\u548c\u4e8c\u7ef4\u6570\u7ec4\u662f\u5426\u7b49\u6548\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 3]);\n\t\t}\n\t\tif ((ni - 1) / 3 != 2)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 3]);\n\t\t}\n\t\tif (ni % 3 != 1)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni - 1]);\n\t\t}\n\t\tif (ni % 3 != 0)\n\t\t{\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t\tQ.push(now);\n\t\t\tswap(now.a[ni], now.a[ni + 1]);\n\t\t}\n        //\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\n\t}\n\tprintf(\"-1\"); //\u4e0d\u80fd\u5230\u8fbe\u76ee\u6807\u72b6\u6001\uff0c\u5c3d\u7ba1\u9898\u76ee\u6ca1\u6709\u8981\u6c42\n\treturn 0;\n} \n```\n\n---------\n\nThat's All.",
        "postTime": 1524146897,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[\u3010P1379\u3011\u516b\u6570\u7801\u96be\u9898 - \u6d1b\u8c37 ](https://www.luogu.org/problemnew/show/P1379)\n\n\u770b\u5230\u9898\u76ee\u6807\u7b7e\u201cHASH\u201d\u7684\u65f6\u5019\u6211\u662f\u61f5\u903c\u7684\uff0c\u7136\u540e\u770b\u5230\u4e86\u201c\u679a\u4e3e\uff0c\u66b4\u529b\u201d\uff0c\u4e8e\u662f\u5206\u522b\u7528\u5224\u91cd\u548c\u4e0d\u5224\u91cd\u7684BFS\u6253\u4e86\u4e00\u8fb9\uff0c\u90fd\u662fTLE\u3002\n\n\u770b\u9898\u89e3\u91cc\u9762\u90fd\u662f\u795e\u4ed9\uff0c\u6211\u5c31\u8bf4\u4e00\u4e2a\u6211\u7684BFS\u7684\u7b80\u5355\u4f18\u5316\u65b9\u6cd5\uff1a\u5199\u4e24\u904d\u3002\u6211\u4eec\u77e5\u9053\uff0cBFS\u662f\u5f80\u5e7f\u5904\u53bb\u641c\u7d22\uff0c\u6211\u4eec\u628a\u8fd9\u60f3\u8c61\u6210\u4e00\u4e2a\u4ee5\u8d77\u70b9\u4e3a\u5706\u5fc3\u7684\u4e00\u4e2a\u5706\uff0c\u6bcf\u5411\u524d\u8d70\u4e00\u6b65\uff0c\u5c31\u662f\u5706\u7684\u534a\u5f84\u589e\u5927\u4e00\u4e2a\u5355\u4f4d\uff0c\u800c\u5706\u7684\u6bcf\u4e2a\u5355\u4f4d\u9762\u79ef\u4e0a\u662f\u4e00\u79cd\u72b6\u6001\uff0c\u5f53\u5706\u589e\u5927\u5230\u76ee\u6807\u70b9\u90a3\u4e48\u5927\u65f6\uff0c\u627e\u5230\u4e86\u7b54\u6848\uff0c\u641c\u7d22\u7ed3\u675f\u3002\u90a3\u4e48\u663e\u7136\u7684\uff0c\u5f53\u534a\u5f84\u8f83\u5927\u65f6\uff0c\u6bcf\u8d70\u4e00\u6b65\u5c31\u4f1a\u6709\u5341\u5206\u5927\u91cf\u7684\u72b6\u6001\u9700\u8981\u6765\u50a8\u5b58\uff08 _S=\u03c0r\u00b2_ \uff09\u3002\u901a\u5e38\u7684\uff0c\u6211\u4eec\u7528\u201c\u5224\u91cd\u201d\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\uff0c\u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff1a\u53cc\u5411\u641c\u7d22\u3002\n\n\u53cc\u5411\u641c\u7d22\u9002\u7528\u4e8e\u8d77\u70b9\u548c\u7ec8\u70b9\u72b6\u6001\u90fd\u5f88\u660e\u786e\u7684\u641c\u7d22\u9898\u3002\u8bd5\u60f3\uff0c\u6211\u4ece\u8d77\u70b9\u63a8\u7b97\u5230\u7ec8\u70b9\uff0c\u4e0e\u6211\u4ece\u7ec8\u70b9\u63a8\u7b97\u5230\u8d77\u70b9\uff0c\u6700\u540e\u5f97\u5230\u7684\u6700\u5c11\u6b65\u9aa4\u6570\u4e00\u5b9a\u662f\u76f8\u7b49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u8d77\u70b9\u548c\u7ec8\u70b9\u540c\u65f6\u641c\u7d22\u3002\u540c\u6837\u7528\u5706\u6765\u6253\u6bd4\u65b9\uff0c\u5047\u8bbe\u4ee5\u8d77\u70b9\u4e3a\u5706\u5fc3\u753b\u5706\u65f6\uff0c\u6700\u7ec8\u534a\u5f84\u4e3ar\uff0c\u4ee5\u7ec8\u70b9\u4e3a\u5706\u5fc3\u753b\u5706\u65f6\uff0c\u6700\u7ec8\u534a\u5f84\u4e3aR\u3002\u90a3\u4e48\u663e\u7136\u6709\uff1a\n\n#### \u03c0r\u00b2+\u03c0R\u00b2\u2264\u03c0(r+R)\u00b2\n\n\n\u6240\u4ee5\u5f53\u5bb3\u6015BFS\u4f1aTLE\u65f6\uff0c\u4e0d\u59a8\u6253\u4e00\u6253\u53cc\u5411BFS\u3002\n\n\u4ee3\u7801\u5949\u4e0a\uff1a\n\n```cpp\n#include<iostream>\nusing namespace std;\nconst int MAXN=50000;\nstring l[MAXN],r[MAXN]={\"123804765\"};///l\u5373\u4ece\u5de6\uff08\u8d77\u70b9\uff09\u641c\u7d22\uff0cr\u5373\u4ece\u53f3\uff08\u7ec8\u70b9\uff09\u641c\u7d22\uff0c\u4e14\u7ec8\u70b9\u662f\u786e\u5b9a\u7684\nint lstep[MAXN],rstep[MAXN],l0[MAXN],r0[MAXN]={4},lh,lt,rh,rt,anima;\n///\u4e24\u4e2astep\u6570\u7ec4\u50a8\u5b58\u6b65\u6570\uff0c\u4e24\u4e2a0\u6570\u7ec4\u50a8\u5b58\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0c\u4e24\u4e2ah\u53d8\u91cf\u6307\u5934\u6307\u9488\uff08head\uff09\uff0ct\u53d8\u91cf\u6307\u5c3e\u6307\u9488\uff08tail\uff09\n///anima\u7528\u6765\u5224\u91cd\u4ee5\u53ca\u5224\u65ad\u662f\u5426\u5f97\u89e3\uff08\u5176\u5b9eanima\u662f\u6211\u73a9\u7684\u97f3\u6e38deemo\u91cc\u7684\u4e00\u9996\u9b54\u738b\u66f2\uff09\nint ljudge(string tmp)///\u5de6\u4fa7\u641c\u7d22\u7684\u5224\u91cd\n{\n    for(int i=0;i<rt;i++)\n        if(r[i]==tmp)\n            return i;///\u4e0e\u53f3\u4fa7\u67d0\u70b9\u91cd\u5408\uff0c\u627e\u5230\u7b54\u6848\uff0c\u8fd4\u56de\u53f3\u4fa7\u8be5\u70b9\u7684\u503c\n    for(int i=0;i<lt;i++)\n        if(l[i]==tmp)\n            return -1;///\u91cd\u590d\uff0c\u8fd4\u56de-1\n    return -2;///\u65b0\u72b6\u6001\uff0c\u8fd4\u56de-2\n}\nint rjudge(string tmp)///\u53f3\u4fa7\u641c\u7d22\u7684\u5224\u91cd\n{\n    for(int i=0;i<lt;i++)\n        if(l[i]==tmp)\n            return i;///\u4e0e\u5de6\u4fa7\u67d0\u70b9\u91cd\u5408\uff0c\u627e\u5230\u7b54\u6848\uff0c\u8fd4\u56de\u5de6\u4fa7\u8be5\u70b9\u7684\u503c\n    for(int i=0;i<rt;i++)\n        if(r[i]==tmp)\n            return -1;///\u91cd\u590d\uff0c\u8fd4\u56de-1\n    return -2;///\u65b0\u72b6\u6001\uff0c\u8fd4\u56de-2\n}\nint main()\n{\n    cin>>l[0];\n    if(l[0]==r[0])\n    {\n        cout<<0;\n        return 0;///\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\n    }\n    for(int i=0;i<9;i++)\n    {\n        if(l[0][i]=='0')\n        {\n            l0[0]=i;///\u627e\u7a7a\u683c\n            break;\n        }\n    }\n    while(1)///\u4e00\u5b9a\u4f1a\u6709\u89e3\uff0c\u6240\u4ee5\u65e0\u9650\u5faa\u73af\u76f4\u5230\u627e\u5230\u89e3\n    {\n    \t///\u5de6\u4fa7\u641c\u7d22\u5f00\u59cb\n        if(l0[lh]>2)\n        {\n            l[++lt]=l[lh];\n            l[lt][l0[lh]]=l[lt][l0[lh]-3];\n            l[lt][l0[lh]-3]='0';\n            anima=ljudge(l[lt]);\n            if(anima>=0)\n            {\n                cout<<rstep[anima]+lstep[lh]+1;\n                return 0;\n            }\n            else if(anima==-1) lt--;\n            else if(anima==-2)\n            {\n                lstep[lt]=lstep[lh]+1;\n                l0[lt]=l0[lh]-3;\n            }\n        }\n        if(l0[lh]<6)\n        {\n            l[++lt]=l[lh];\n            l[lt][l0[lh]]=l[lt][l0[lh]+3];\n            l[lt][l0[lh]+3]='0';\n            anima=ljudge(l[lt]);\n            if(anima>=0)\n            {\n                cout<<rstep[anima]+lstep[lh]+1;\n                return 0;\n            }\n            else if(anima==-1) lt--;\n            else if(anima==-2)\n            {\n                lstep[lt]=lstep[lh]+1;\n                l0[lt]=l0[lh]+3;\n            }\n        }\n        if(l0[lh]%3!=0)\n        {\n            l[++lt]=l[lh];\n            l[lt][l0[lh]]=l[lt][l0[lh]-1];\n            l[lt][l0[lh]-1]='0';\n            anima=ljudge(l[lt]);\n            if(anima>=0)\n            {\n                cout<<rstep[anima]+lstep[lh]+1;\n                return 0;\n            }\n            else if(anima==-1) lt--;\n            else if(anima==-2)\n            {\n                lstep[lt]=lstep[lh]+1;\n                l0[lt]=l0[lh]-1;\n            }\n        }\n        if(l0[lh]%3!=2)\n        {\n            l[++lt]=l[lh];\n            l[lt][l0[lh]]=l[lt][l0[lh]+1];\n            l[lt][l0[lh]+1]='0';\n            anima=ljudge(l[lt]);\n            if(anima>=0)\n            {\n                cout<<rstep[anima]+lstep[lh]+1;\n                return 0;\n            }\n            else if(anima==-1) lt--;\n            else if(anima==-2)\n            {\n                lstep[lt]=lstep[lh]+1;\n                l0[lt]=l0[lh]+1;\n            }\n        }\n        lh++;///\u5de6\u4fa7\u641c\u7d22\u7ed3\u675f\uff0c\u5934\u6307\u9488\u81ea\u52a0\n        ///\u53f3\u4fa7\u641c\u7d22\u5f00\u59cb\n        if(r0[rh]>2)\n        {\n            r[++rt]=r[rh];\n            r[rt][r0[rh]]=r[rt][r0[rh]-3];\n            r[rt][r0[rh]-3]='0';\n            anima=rjudge(r[rt]);\n            if(anima>=0)\n            {\n                cout<<lstep[anima]+rstep[rh]+1;\n                return 0;\n            }\n            else if(anima==-1) rt--;\n            else if(anima==-2)\n            {\n                rstep[rt]=rstep[rh]+1;\n                r0[rt]=r0[rh]-3;\n            }\n        }\n        if(r0[rh]<6)\n        {\n            r[++rt]=r[rh];\n            r[rt][r0[rh]]=r[rt][r0[rh]+3];\n            r[rt][r0[rh]+3]='0';\n            anima=rjudge(r[rt]);\n            if(anima>=0)\n            {\n                cout<<lstep[anima]+rstep[rh]+1;\n                return 0;\n            }\n            else if(anima==-1) rt--;\n            else if(anima==-2)\n            {\n                rstep[rt]=rstep[rh]+1;\n                r0[rt]=r0[rh]+3;\n            }\n        }\n        if(r0[rh]%3!=0)\n        {\n            r[++rt]=r[rh];\n            r[rt][r0[rh]]=r[rt][r0[rh]-1];\n            r[rt][r0[rh]-1]='0';\n            anima=rjudge(r[rt]);\n            if(anima>=0)\n            {\n                cout<<lstep[anima]+rstep[rh]+1;\n                return 0;\n            }\n            else if(anima==-1) rt--;\n            else if(anima==-2)\n            {\n                rstep[rt]=rstep[rh]+1;\n                r0[rt]=r0[rh]-1;\n            }\n        }\n        if(r0[rh]%3!=2)\n        {\n            r[++rt]=r[rh];\n            r[rt][r0[rh]]=r[rt][r0[rh]+1];\n            r[rt][r0[rh]+1]='0';\n            anima=rjudge(r[rt]);\n            if(anima>=0)\n            {\n                cout<<lstep[anima]+rstep[rh]+1;\n                return 0;\n            }\n            else if(anima==-1) rt--;\n            else if(anima==-2)\n            {\n                rstep[rt]=rstep[rh]+1;\n                r0[rt]=r0[rh]+1;\n            }\n        }\n        rh++;///\u5de6\u4fa7\u641c\u7d22\u7ed3\u675f\uff0c\u5934\u6307\u9488\u81ea\u52a0\n    }\n}\n```",
        "postTime": 1523776042,
        "uid": 51983,
        "name": "Uranus",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u9898\u7684\u601d\u8defbfs\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u4e3b\u8981\u8fd8\u662f\u5224\u91cd\u65b9\u9762\u3002\n\n\u8bf4\u4e00\u4e0b\u6211\u5224\u91cd\u7684\u601d\u8def\u5427\uff0c\u8c8c\u4f3c\u8fd8\u6ca1\u6709\u8fd9\u4e48\u505a\u7684\u3002\n\n\u9996\u5148\u5c06\u6bcf\u4e2a\u72b6\u6001\u8f6c\u6362\u4e3a\u6570\u7136\u540ehash\u6620\u5c04\u52300-100003\u7684\u8303\u56f4\u5185\uff0c\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a100003\u7684\u4e8c\u7ef4vector\u3002\n\n\u5224\u91cd\uff1a\n\n\u9996\u5148\u8fd8\u662f\u5c06\u72b6\u6001\u8f6c\u6362\u4e3a\u6570\u3002\u7136\u540e\u627e\u5230vector\u4e2d\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\uff0c\u904d\u5386\u90a3\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u627e\u5230\u4e86\u8fd9\u4e2a\u72b6\u6001\u5c31\u91cd\u4e86\u3002\n\n\u63d2\u5165\uff1a\n\n\u5728\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u76f4\u63a5push\\_back\u8fd9\u4e00\u4e32\u6570\u3002\n\n\u5509\u603b\u89c9\u5f97\u6ca1\u8bf4\u6e05\u695a\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5427\uff08\u81ea\u8ba4\u4e3a\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0d\u9519\uff09\n\n2384ms/14.54MB\n\n    \n    \n    \n    \n    \n    \n        \n    \n    \n```cpp\n    #include <cstdio>\n    #include <cstring>\n    #include <vector>\n    #include <algorithm>\n    #define hashsize 100003\n    using namespace std;\n    struct p\n    {\n        int map[3][3];\n        int z[2];\n        int step;\n    };\n    struct p queue[1000000];\n    struct p now;\n    int directions[4][2]={{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n    vector <int> hashlist[hashsize];\n    void read(); //\u8bfb\u5165\u6570\u636e\n    struct p move(struct p a, int x, int y, int step);//\u79fb\u52a8\u5c40\u9762\n    int cheak(struct p now);//\u5c06\u5c40\u9762\u8f6c\u6362\u6210\u6570\n    int hash(int x);//hash\u51fd\u6570\n    int in(struct p a);//\u5224\u91cd\n    int main()\n    {\n        read();\n        int tail = 1;\n        for (int i = 0; i < tail; ++i) //bfs\n        {\n            if (cheak(queue[i])==123804765)\n            {\n                printf(\"%d\", queue[i].step);\n                return 0;\n            }\n            for (int j=0;j<4;++j)\n            {\n                now=move(queue[i], directions[j][0], directions[j][1], queue[i].step);\n                if (now.step>=0&&in(now)==0)\n                {\n                    hashlist[hash(cheak(now))].push_back(cheak(now));\n                    queue[tail]=now;\n                    tail++;\n                }\n            }\n        }\n        return 0;\n    }\n    int hash(int x)\n    {\n        return x%hashsize;\n    }\n    int in(struct p a)\n    {\n        int k = cheak(a);\n        int h=hash(k);\n        for (int i = 0; i < hashlist[h].size(); ++i)\n        {\n            if (hashlist[h][i]==k) return 1;\n        }\n        return 0;\n    }\n    struct p move(struct p a, int x, int y, int step)\n    {\n        struct p n;\n        if (a.z[0]+x<0||a.z[0]+x>2||a.z[1]+y<0||a.z[1]+y>2)\n        {\n            n.step=-1;\n            return n;\n        }\n        n.step=step+1;\n        n.z[0]=a.z[0]+x;\n        n.z[1]=a.z[1]+y;\n        for (int i = 0; i < 3; ++i)\n        {\n            for (int j = 0; j < 3; ++j)\n            {\n                n.map[i][j]=a.map[i][j];\n            }\n        }\n        swap(n.map[a.z[0]][a.z[1]],n.map[n.z[0]][n.z[1]]); \n        return n;\n    }\n    int cheak(struct p now)\n    {\n        int k = 0;\n        for (int i = 0; i < 9; ++i)\n        {\n            k=k*10;\n            k+=now.map[i/3][i%3];\n        }\n        return k;\n    }\n    void read()\n    {\n        char n[10];\n        scanf(\"%s\", n);\n        for (int i = 0; i < strlen(n); ++i)\n        {\n            queue[0].map[i/3][i%3]=n[i]-'0';\n            if (n[i]-'0'==0) {queue[0].z[0]=i/3; queue[0].z[1]=i%3;}\n        }\n        queue[0].step=0;\n        hashlist[hash(cheak(queue[0]))].push_back(cheak(queue[0]));\n        return;\n    }\n\n```",
        "postTime": 1515892853,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u9996\u5148\u6b64\u9898\u7684\u96be\u70b9\u662f\u552f\u4e00\u786e\u5b9a\u8fd9\u4e5d\u4e2a\u6570\u7801\uff0c\u56e0\u6b64\u6211\u7528\u4e86\u79cd\u7c7b\u4f3c\u5eb7\u6258\u5c55\u5f00\u7684\u7f16\u7801\uff0c\u5373\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6570\u7684\u5e73\u65b9\u4e58\u4e0a\u8be5\u4f4d\u7684\u9636\u4e58\uff0c\u518d\u628a\u6240\u6709\u4f4d\u4e0a\u7684\u8fd9\u4e9b\u7ed3\u679c\u52a0\u8d77\u6765\u3002\uff08\u6211\u5f00\u59cb\u7684\u65f6\u5019\u6ca1\u6709\u5e73\u65b9\uff0c\u7136\u540e\u5c31WA\u4e86\u4e00\u4e2a\u70b9\uff0c\u81f3\u4eca\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09\uff0c\u4f8b\u5982\uff0c283104765\u7684\u7f16\u7801\u5c31\u662f\uff1a2\u00d72\u00d79\uff01+8\u00d78\u00d78\uff01+3\u00d73\u00d77\uff01+1\u00d71\u00d76\uff01+0\u00d70\u00d75\uff01+4\u00d74\u00d74\uff01+7\u00d77\u00d73\uff01+6\u00d76\u00d72\uff01+5\u00d75\u00d71\uff01\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u8fd9\u5806\u6570\u3002\u4f46\u662f\u5728bfs\u4e2d\u6211\u4eec\u600e\u4e48\u8868\u793a\u8fd99\u4e2a\u6570\u5462\uff08\u5f53\u7136\u4e0d\u53ef\u4ee5\u7528\u7f16\u7801\uff01\u6211\u4eec\u8fd8\u8981\u5728\u4f4d\u7f6e\u4e0a\u627e\u6570\uff09\uff0c\u6211\u7528\u4f4d\u8fd0\u7b97\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\uff089\uff0910=\uff081001\uff092\uff0c\u800c\u4e144\u00d79=36\uff0c\u6240\u4ee5\u6211\u5f00\u4e86\u4e00\u4e2aunsigned long long\uff0c\u8ba9\u6bcf\u4e2a\u6570\u5206\u522b\u5360\u5176\u4e2d\u76844\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00\u4e2a\u6570\u7ec4\u5b58\u4e86\uff0c\u975e\u5e38\u7684\u7701\u4e8b\u3002\u81f3\u4e8e\u6570\u7684\u79fb\u52a8\u95ee\u9898\uff0c\u6211\u4e3a\u4e86\u7701\u4e8b\u800c\u6253\u4e86\u4e2a\u8868\uff0c\u6307\u660e\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u53ef\u4ee5\u5f80\u90a3\u79fb\u3002\u7136\u540e\u5c31\u65e0\u8111bfs\u5427\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    #include<cstdio>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    unsigned char bs[40000000];//\u6839\u636e\u7f16\u7801\u8bb0\u5f55\u8fd9\u4e2a\u4e5d\u6570\u7801\u662f\u5426\u5df2\u7ecf\u641c\u8fc7\n    queue<unsigned long long> que;\n    queue<int> steps;\n    char str[10]=\"123804765\";\n    int facts[10]={1,1,2,6,24,120,720,5040,40320,362880};//\u9636\u4e58\u8868\n    inline unsigned long long castdata(){//\u628a\u5b57\u7b26\u4e32str\u7684\u5185\u5bb9\u8f6c\u6362\u4e3a\u6309\u4f4d\u5b58\u50a8\u7684\u4e5d\u6570\u7801\n        unsigned long long tmp=0;\n        for(int i=0;i<9;i++){\n            tmp=tmp|(((unsigned long long)str[i]-'0')<<(32-4*i));\n        }\n        return(tmp);\n    }\n    inline int encode(unsigned long long data){//\u7f16\u7801\u51fd\u6570\uff0c\u628a\u6309\u4f4d\u5b58\u50a8\u7684\u4e5d\u6570\u7801\u7f16\u7801\n        int tmp=0;\n        unsigned long long yinzi=15;\n        int cx=0;\n        for(int i=1;i<=9;i++){\n            int num=(data&yinzi)>>cx;\n            tmp+=(num*num*facts[i]);\n            yinzi=yinzi<<4;\n            cx+=4;\n        }\n        return(tmp);\n    }\n    inline int findzero(unsigned long long data){//\u627e\u4e5d\u6570\u7801\u4e2d0\u7684\u4f4d\u7f6e\n        unsigned long long yinzi=15;\n        for(int i=8;i>=0;i--){\n            if((data&yinzi)==0)return(i);\n            yinzi=yinzi<<4;\n        }\n    }\n    inline int getnum(unsigned long long data,int index){//\u83b7\u53d6\u6309\u4f4d\u5b58\u50a8\u7684\u4e5d\u6570\u7801\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\n        unsigned long long yinzi=15;\n        int bits=32-index*4;\n        return((data&(yinzi<<bits))>>bits);\n    }\n    inline unsigned long long setnum(unsigned long long data,int index,int num){//\u628a\u6570\u653e\u5230\u4e5d\u6570\u7801\u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e\n        unsigned long long yinzi=15;\n        int bits=32-index*4;\n        return((data&(~(yinzi<<bits)))|(((unsigned long long)num)<<bits));\n    }\n    int tables[10][6]={\n        {2,1,3},\n        {3,0,2,4},\n        {2,1,5},\n        {3,0,4,6},\n        {4,1,3,5,7},\n        {3,2,4,8},\n        {2,3,7},\n        {3,4,6,8},\n        {2,5,7}\n    };//\u6570\u7801\u79fb\u52a8\u8868\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u53ef\u79fb\u52a8\u7684\u6570\u76ee\uff0c\u4e0b\u9762\u7684\u5219\u662f\u53ef\u4ee5\u79fb\u52a8\u5230\u7684\u76ee\u6807\u4f4d\u7f6e\n    int main(){\n        unsigned long long dest=castdata();//\u5148\u628a123804765\u6309\u4f4d\u5b58\u50a8\n        scanf(\"%s\",str);\n        unsigned long long source=castdata();//\u628a\u8d77\u70b9\u6570\u7801\u6309\u4f4d\u5b58\u50a8\n        if(source==dest){\n            printf(\"%d\\n\",0);//\u8d77\u70b9\u662f123804765\u5c31\u76f4\u63a5\u8f93\u51fa0\n            return(0);\n        }\n        que.push(source);\n        steps.push(0);\n        bs[encode(source)]=1;\n        while(1){\n            unsigned long long head=que.front();\n            int headstep=steps.front();\n            que.pop();\n            steps.pop();\n            int zeroindex=findzero(head);\n            int loop=tables[zeroindex][0];\n            for(int i=1;i<=loop;i++){\n                unsigned long long tmph=head;\n                int dst=tables[zeroindex][i];\n                int num=getnum(head,dst);\n                tmph=setnum(tmph,dst,0);\n                tmph=setnum(tmph,zeroindex,num); //\u4ea4\u63620\u548c\u65c1\u8fb9\u7684\u6570\n                int encoding=encode(tmph);\n                if(!bs[encoding]){//\u8fd9\u4e2a\u7f16\u7801\u6ca1\u6709\u88ab\u8bb0\u5f55\u8fc7\uff0c\u5c31\u5165\u961f\n                    bs[encoding]=1;\n                    if(tmph==dest){//\u627e\u5230\u7ec8\u70b9123804765\uff0c\u5b8c\u6210\uff01\n                        printf(\"%d\\n\",headstep+1);\n                        return(0);\n                    }\n                    else{\n                        que.push(tmph);\n                        steps.push(headstep+1);\n                    }\n                }\n            }\n        }\n        return(0);\n}\n```",
        "postTime": 1514110532,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u672c\u6765\u662f\u60f3\u62ff\u8fd9\u4e2a\u9898\u6765\u7ec3\u4e60\u53cc\u5411bfs\u7684 \u7ed3\u679c\u4e00\u5f00\u59cb\u8fde\u6734\u7d20\u5199\u6cd5\u90fd\u5199\u4e0d\u51fa\u6765\n\n\u7ec8\u4e8e\u574e\u5777\u5730\u6253\u5b8c\u4ee3\u7801 \u6240\u4ee5\u6765\u53d1\u4e2a\u9898\u89e3\n\n**\u53cc\u5411bfs+map\u5224\u91cd**\n\n\u5982\u679c\u4e0d\u52a0\u53cc\u5411\u4f1at\u4e00\u4e2a\u70b9 \u52a0\u5b8c\u5c31\u80fdac\n\n\u4ee3\u7801\u6bd4\u8f83\u4e11 \u5927\u5bb6\u5c06\u5c31\u770b\u770b\u5427\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <queue>\n#include <map>//\u4e2a\u4eba\u60ef\u7528\u7684\u5934\u6587\u4ef6\nusing namespace std;\nstruct xxx{\n    string str;\n    short i;\n};//i\u8868\u793a0\u5728\u4e32\u4e2d\u7684\u4f4d\u7f6e\nbool check(int i,int d){//d\u662f0\u79fb\u52a8\u7684\u65b9\u5411 \u8be6\u89c1\u4e0b\u65b9dic\u6570\u7ec4\n    if((i + d > 8)||(i + d < 0)) return 0;\n    if((i % 3 == 0)&&(d == -1)) return 0;\n    if((i % 3 == 2)&&(d == 1)) return 0;\n    return 1;\n}//\u5206\u522b\u5224\u65ad0\u7684\u4f4d\u7f6e\u8fdb\u884c\u53d8\u5316\u540e\u662f\u5426\u5408\u6cd5 \nint dic[4] = {1,-1,3,-3};//0\u53d8\u5316\u7684\u56db\u79cd\u65b9\u5411\nmap <string,int> m1,m2;\nqueue <xxx> q1,q2;//\u4e24\u4e2a\u961f\u5217\u548cmap\u522b\u7528\u4e8e\u4e24\u4e2abfs\u65b9\u5411\nxxx st,ed;//\u8d77\u59cb\u548c\u7ec8\u6b62\u72b6\u6001\u5b58\u50a8\nint c,c1 = 1,c2 = 1,cc = 0;//\u5206\u522b\u8868\u793a\u8ba1\u6570\u5668\u3001\u5f53\u524d\u5c42\u7ea7\u6b63\u65b9\u5411\u7684\u72b6\u6001\u603b\u6570\u3001\u5f53\u524d\u5c42\u7ea7\u8d1f\u65b9\u5411\u7684\u72b6\u6001\u603b\u6570\u3001\u5f53\u524d\u5c42\u7ea7\nint bfs(){\n    while (!q1.empty()){\n        ++ cc;//\u66f4\u65b0\u5f53\u524d\u5c42\u7ea7\n        xxx lx,x;//lx\u7528\u4e8e\u53d6\u51fa\u961f\u9996 x\u7528\u4e8e\u53d8\u5316\u64cd\u4f5c\n\n        c = c1;\n        c1 = 0;\n        for (int i = 1;i <= c;++ i){//\u904d\u5386\u5f53\u524d\u5c42\u7ea7\u6b63\u65b9\u5411\u7684\u6240\u6709\u72b6\u6001\n            lx = q1.front();q1.pop();//\u53d6\u961f\u5934\n\n            for (int z = 0;z < 4;++ z){//\u56db\u79cd\u79fb\u52a8\u65b9\u5411\n                x = lx;//\u91cd\u7f6ex\n                int d = dic[z];\n                if(!check(x.i,d)) continue;//\u5224\u65ad\u79fb\u52a8\u662f\u5426\u5408\u6cd5\n                swap(x.str[x.i],x.str[x.i + d]);\n                x.i += d;//\u66f4\u65b0x\u7684\u72b6\u6001\n\n                if (m1[x.str]) continue;\n                q1.push(x);m1[x.str] = 1;++ c1;//\u5224\u65ad\u662f\u5426\u91cd\u590d \u4e0d\u91cd\u590d\u65f6\u5c06\u65b0\u72b6\u6001\u5b58\u5165\u961f \u4e14\u66f4\u65b0c1\n\n                if (m2[x.str]) return cc * 2 - 1;//\u5224\u65ad\u662f\u5426\u5728\u4e0a\u4e00\u5c42\u7684\u53cd\u65b9\u5411\u4e0a\u51fa\u73b0\u8fc7\u8be5\u72b6\u6001 \u6709\u5219\u8fd4\u56de\uff08\u5f53\u524d\u5c42\u7ea7+\u4e0a\u4e00\u5c42\u5c42\u7ea7\uff09\uff08\u5373cc*2 - 1\uff09\n            }\n        }\n        //-------------------------------\u4ee5\u4e0b\u662f\u53cd\u65b9\u5411\u7684\u5904\u7406 \u4e0e\u6b63\u65b9\u5411\u76f8\u540c\n        c = c2;\n        c2 = 0;\n        for (int i = 1;i <= c;++ i){\n            lx = q2.front();q2.pop();\n\n            for (int z = 0;z < 4;++ z){\n                x = lx;\n                int d = dic[z];\n                if(!check(x.i,d)) continue;\n                swap(x.str[x.i],x.str[x.i + d]);\n                x.i += d;\n\n                if (m2[x.str]) continue;\n                q2.push(x);m2[x.str] = 1;++ c2;\n\n                if (m1[x.str]) return cc * 2;//\u8fd9\u91cc\u5e94\u4e3a\u5224\u65ad\u540c\u5c42\u7ea7\u7684\u6b63\u65b9\u5411\u662f\u5426\u51fa\u73b0\u8fc7\u8be5\u72b6\u6001 \u6709\u5219\u8fd4\u56de\uff08\u5f53\u524d\u5c42\u7ea7+\u5f53\u524d\u5c42\u7ea7\uff09\n            }\n        }\n    }\n}\nint main (){\n    cin >> st.str;\n    for (int i = 0;i < 9;++ i){\n            if(st.str[i] == '0')    st.i = i;\n    }//\u8bfb\u5165 \u5904\u74060\u7684\u4f4d\u7f6e\n    ed = (xxx){\"123804765\",4};\n    q1.push(st);m1[st.str] = 1;\n    q2.push(ed);m2[st.str] = 1;//\u521d\u59cb\u5316\n    if(st == ed){\n        printf(\"0\");\n        return 0;\n    }//\u7279\u5224\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u72b6\u6001\n    printf(\"%d\",bfs());//\u8fdb\u5165bfs\n    return 0;\n}\n\n```",
        "postTime": 1508514607,
        "uid": 61353,
        "name": "BeautyYu\u8a00\u91b4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "#\u53cc\u5411BFS + \u54c8\u5e0c\u5224\u91cd\n\n\u8fd9\u662f\u4e00\u9053\u516c\u8ba4\u7684\u7ec3\u4e60BFS\u7684\u7ecf\u5178\u9898\n\n\u5982\u679c\u666e\u901a\u7684BFS\u5199\u5f97\u597d\u7684\u8bdd\u4e5f\u53ef\u4ee5\u8fc7\u8fd9\u9053\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u9053\u9898\u6ee1\u8db3\u4ece\u7ed3\u675f\u72b6\u6001\u53cd\u5411\u6269\u5c55\u7684\u6761\u4ef6\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86\u66f4\u7701\u65f6\u4e5f\u66f4\u7701\u7a7a\u95f4\u7684\n\n##\u53cc\u5411BFS   \u30fd(\uffe3\u25bd\uffe3)\uff89\n\n\n\u5224\u91cd\u4e5f\u9009\u62e9\u4e86\u6bd4map\u7b49STL\u66f4\u7701\u65f6\u7684\n\n##\u54c8\u5e0c\u5224\u91cd    \uffe3\u03c9\uffe3=\n\n\n\u5728\u5b9e\u73b0\u65f6\u5e94\u6ce8\u610f\u53ef\u4ee5\u4f7f\u7528\u5360\u7a7a\u95f4\u8f83\u5c0f\u7684\u4e00\u7ef4\u72b6\u6001\u5b58\u50a8\u5230\u961f\u5217\u4e2d\uff0c\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u65f6\u5148\u5c06\u5c0f\u72b6\u6001\u8f6c\u5316\u6210\u6613\u4e8e\u64cd\u4f5c\u4f46\u5360\u7a7a\u95f4\u8f83\u5927\u7684\u4e8c\u7ef4\u72b6\u6001\uff0c\u8f6c\u79fb\u5b8c\u6210\u518d\u8f6c\u5316\u6210\u6613\u4e8e\u5b58\u50a8\u7684\u4e00\u7ef4\u72b6\u6001\u5b58\u5165\u961f\u5217\uff08\u5f53\u7136dalao\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4e00\u7ef4\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\uff0c\u4e0d\u8fc7\u7b14\u8005\u89c9\u5f97\u6709\u4e9b\u9ebb\u70e6\u4e14\u4e0d\u76f4\u89c2\uff09\u3002\n\n\u8fdb\u884c\u54c8\u5e0c\u5224\u91cd\u662f\u4e3a\u4e86\u51cf\u5c0f\u5224\u91cd\u6570\u7ec4\u5360\u7528\u7a7a\u95f4\uff1b\u4f17\u6240\u5468\u77e5\uff0c\u5982\u679c\u7528\u4e8e\u53d6\u6a21\u7684\u8d28\u6570\u4e0d\u591f\u5927\uff0c\u5219\u53ef\u80fd\u4f1a\u4ea7\u751f\u54c8\u5e0c\u51b2\u7a81\uff1b\u4f46\u53d6\u6a21\u7684\u8d28\u6570\u8fc7\u5927\u5219\u9700\u5f00\u66f4\u5927\u7684\u5224\u91cd\u6570\u7ec4\uff0c\u4e0e\u539f\u610f\u76f8\u6096\u3002\u6240\u4ee5\u7b14\u8005\u91c7\u7528\u4e86\u53cc\u54c8\u5e0c\u5224\u91cd\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u54c8\u5e0c\u51b2\u7a81\u7684\u6982\u7387\uff08\u4e5f\u53ef\u4ee5\u91c7\u7528\u4e09\u54c8\u5e0c\u751a\u81f3\u56db\u54c8\u5e0c\u5224\u91cd\uff0c\u56db\u54c8\u5e0c\u5224\u91cd\u7684\u54c8\u5e0c\u51b2\u7a81\u6982\u7387\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\uff09\u3002\n\n\u8be6\u60c5\u8bf7\u89c1\u4ee3\u7801\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\nconst int HASH = 10007;\nconst int HASH2 = 10037;\nint head1 = 0, head2 = 0;\nint tail1 = 1, tail2 = 1;\nint pan1[2][10039];\nint pan2[2][10039];\nconst int mubiao = 123804765 % HASH;\nint map1[3][3];\nint map2[3][3] = {{1, 2, 3}, {8, 0, 4}, {7, 6, 5}};\nint dx[5] = {0, 1, -1, 0, 0};\nint dy[5] = {0, 0, 0, 1, -1};\nstruct duilie\n{\n    int heap;\n    int step;                 //\u7528\u4e8e\u8bb0\u5f55BFS\u7684\u5c42\u6570\n};\nduilie a1[87390];      //\u7528\u4e8eBFS\u7684\u4e24\u4e2a\u961f\u5217\nduilie a2[87390];\nint x1, x2;   //\u4e00\u7cfb\u5217\u7684x,y\u7528\u4e8e\u8f6c\u79fb\u72b6\u6001\nint y1, y2;\nint linshi;\nint lx1, ly1, lx2, ly2;\nint ans1 = 0;\nint ans2 = 0;\n\ntemplate<class T>void read(T &x) //\u8bfb\u5165\u4f18\u5316\uff08\u672c\u9898\u4e0d\u7528\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\uff0c\u4f7f\u7528\u4ec5\u4e3a\u7b14\u8005\u4e60\u60ef\uff09\uff08\u8fd9\u4efd\u8bfb\u5165\u4f18\u5316\u6bd4\u4e16\u4e0a\u6240\u719f\u77e5\u7684\u90a3\u4e2a\u66f4\u5feb\u4e00\u4e9b\uff0c\u4e5f\u8bb8\u5427\uff09\n{\n    int f = 0; x = 0; char ch = getchar();\n    while(ch < '0' || ch > '9') f |= (ch == '-'), ch = getchar();\n    while(ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    x = f? -x : x;\n}\nvoid write(int x)   //\u8f93\u51fa\u4f18\u5316\n{\n    if(x < 0) {putchar('-'); x = -x;}\n    if(x > 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nvoid chuli(int aa[3][3], int b, int &x, int &y)  // \u628a\u75289\u4f4d\u6570\u5b58\u50a8\u7684\u72b6\u6001\u5c55\u5f00\u4e3a\u4e8c\u7ef4\u5e73\u9762\u72b6\u6001\u5e76\u8bb0\u5f55\u5f53\u524d0\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbfBFS\u4e2d\u72b6\u6001\u7684\u8f6c\u79fb\n{\n    for(int i = 2; i >= 0; i--)\n      for(int j = 2; j >= 0; j--)\n        {\n            aa[i][j] = b % 10;\n            if(aa[i][j] == 0)\n              {\n                  x = i;\n                  y = j;\n              }\n            b /= 10;\n        }\n}\n\nint chuli2(int aa[3][3])  //\u628a\u4e8c\u7ef4\u5e73\u9762\u7684\u6570\u636e\u72b6\u6001\u8f6c\u5316\u4e3a9\u4f4d\u6570\u7684\u4e00\u7ef4\u6570\u636e\u72b6\u6001\uff0c\u65b9\u4fbf\u72b6\u6001\u5728BFS\u961f\u5217\u4e2d\u7684\u5b58\u50a8\n{\n    int x = 0;\n    for(int i = 0; i <= 2; i++)\n      for(int j = 0; j <= 2; j++)\n        {\n            x = x * 10 + aa[i][j];\n        }\n    return x;\n}\nvoid change(int &a, int &b){int c = a; a = b; b = c;}  //\u7528\u4e8e\u4ea4\u6362\u503c\u7684\u51fd\u6570\uff08\u7b14\u8005\u4e60\u60ef\u624b\u5199\u67d0\u4e9bSTL\uff09\n\nvoid bfs()\n{\n    \n    do    //BFS\n      {\n          head1++;head2++;  //\u961f\u9996\u6307\u9488\n          chuli(map1, a1[head1].heap , x1, y1);  //\u628a\u538b\u7f29\u62109\u4f4d\u6570\u7684\u4e00\u7ef4\u72b6\u6001\u8f6c\u5316\u4e3a\u6613\u4e8e\u5904\u7406\u7684\u4e8c\u7ef4\u5e73\u9762\u72b6\u6001\n          chuli(map2, a2[head2].heap , x2, y2);\n          for(int i = 1; i <= 4; i++)    //0\u53ef\u4ee5\u54114\u4e2a\u65b9\u5411\u79fb\u52a8\uff08\u6b63\u5411BFS\uff09\n            {\n                  lx1 = x1 + dx[i]; ly1 = y1 + dy[i];  //0\u4f4d\u7f6e\u7684\u79fb\u52a8\n                  if(lx1 >= 0 && lx1 <= 2 && ly1 <= 2 && ly1 >= 0)  //\u6ee1\u8db3\u8f6c\u79fb\u6761\u4ef6\n                    {\n                          change(map1[lx1][ly1], map1[x1][y1]);  //\u4ea4\u6362\u4e8c\u7ef4\u5e73\u9762\u4e0a0\u521d\u59cb\u4f4d\u7f6e\u4e0e\u79fb\u52a8\u540e\u4f4d\u7f6e\u4e0a\u7684\u503c                         \n                          linshi = chuli2(map1);  //\u628a\u4e8c\u7ef4\u5e73\u9762\u72b6\u6001\u4e0b\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6613\u4e8e\u5b58\u50a8\u76849\u4f4d\u6570\u4e00\u7ef4\u6570\u636e\n                          if(pan1[0][linshi % HASH] == 0 || pan1[1][linshi % HASH2] == 0)  //\u5229\u7528\u54c8\u5e0c\u5224\u65ad\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u5728\u4e4b\u524d\u51fa\u73b0\u8fc7\uff0c\u82e5\u5426\uff0c\u5219\u5b58\u50a8\n                            {\n                                  tail1++;  //\u5c3e\u6307\u9488++\n                                  a1[tail1].heap = linshi;  //\u5b58\u5165\u72b6\u6001\n                                  a1[tail1].step = a1[head1].step + 1;  //\u8bb0\u5f55\u5f53\u524dBFS\u7ed3\u70b9\u6269\u5c55\u5c42\u6570\n                                  pan1[0][linshi % HASH] = 1;  //\u8bb0\u5f55\u8be5\u72b6\u6001\u54c8\u5e0c\u503c\n                                  pan1[1][linshi % HASH2] = 1;  //\u53cc\u54c8\u5e0c\u4ee5\u6392\u9664\u54c8\u5e0c\u51b2\u7a81\n                                  \n                            }\n                          if(pan2[0][linshi % HASH] == 1 && pan2[1][linshi % HASH2] == 1)  //\u5982\u679c\u5728\u53cd\u5411BFS\u5b58\u5728\u73b0\u5728\u8fd9\u79cd\u72b6\u6001\uff0c\u5219\u8868\u660e\u5df2\u7ecf\u627e\u5230\u7b54\u6848\uff0c\u6240\u4ee5\u8f93\u51fa\u7b54\u6848\u5e76\u7ec8\u6b62\u7a0b\u5e8f\n                            {\n                                for(int i = 1; i <= tail2; i++)  //\u5bfb\u627e\u6b63\u5411BFS\u4e0e\u53cd\u5411BFS\u53d1\u751f\u72b6\u6001\u91cd\u590d\u65f6\u53cd\u5411BFS\u7684\u6269\u5c55\u5c42\u6570\n                                    {\n                                      if(a2[i].heap == linshi)\n                                        {\n                                          int ans = a2[i].step + a1[tail1].step;  //\u8ba1\u7b97\u7b54\u6848\n                                          write(ans);  //\u8f93\u51fa\u7b54\u6848\n                                          exit(0);  //\u76f4\u63a5\u5e72\u51c0\u5229\u7d22\u4e0d\u5e26\u4e00\u4e1d\u8fdf\u7591\u7684\u7ed3\u675f\u7a0b\u5e8f\n                                        }\n                                  }\n                            }\n                         change(map1[lx1][ly1], map1[x1][y1]);  //\u7531\u4e8e\u5728\u4e0b\u4e00\u6b21\u8ba1\u7b97\u4e2d\u8fd8\u8981\u7528\u5230\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u636e\uff0c\u6240\u4ee5\u628a\u521a\u624d\u6362\u6389\u7684\u518d\u6362\u56de\u6765\n                    }\n                    \n                  lx2 = x2 + dx[i]; ly2 = y2 + dy[i];\n                  if(lx2 >= 0 && lx2 <= 2 && ly2 <= 2 && ly2 >= 0)  //\u53cd\u5411BFS\u4ece\u7ec8\u6b62\u72b6\u6001\u5f00\u59cb\u6269\u5c55\uff0c\u4e3b\u4f53\u4e0e\u6b63\u5411\u5927\u81f4\u76f8\u540c\uff0c\u53d8\u91cf\u548c\u7ec8\u6b62\u6761\u4ef6\u6362\u6362\u5373\u53ef\n                    {\n                          change(map2[lx2][ly2], map2[x2][y2]);\n                          linshi = chuli2(map2);\n                          if(pan2[0][linshi % HASH] == 0 || pan2[1][linshi % HASH2] == 0)\n                            {\n                                  tail2++;\n                                  a2[tail2].heap = linshi;\n                                  a2[tail2].step = a2[head2].step + 1;\n                                  pan2[0][linshi % HASH] = 1;\n                                  pan2[1][linshi % HASH2] = 1;\n                                  \n                                  \n                            }\n                            if(pan1[0][linshi % HASH] == 1 && pan1[1][linshi % HASH2] == 1)\n                            {\n                                for(int i = 1; i <= tail1; i++)\n                                    {\n                                      if(a1[i].heap == linshi)\n                                        {\n                                          int ans = a2[tail2].step + a1[i].step;\n                                          write(ans);\n                                            exit(0);\n                                        }\n                                  }\n                            }\n                          change(map2[lx2][ly2], map2[x2][y2]);\n                }\n          }\n      }while(head1 < tail1 || head2 < tail2);\n}\n\n\nint main()\n{\n    a1[1].step = 0;  //\u521d\u59cb\u6269\u5c55\u5c42\u6570\u8bb0\u4e3a0\n    a2[1].step = 0; \n    int a;\n    read(a);  //\u7531\u9898\u610f\u8f93\u5165\u8d77\u59cb\u72b6\u6001\n    a1[1].heap = a;  //\u521d\u59cb\u72b6\u6001\n    a2[1].heap = 123804765;  //\u7ec8\u6b62\u72b6\u6001\n    chuli(map1, a, x1, y1);\n    bfs();\n    return 0;\n}\n```",
        "postTime": 1507820233,
        "uid": 62410,
        "name": "Mashiro_ylb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "```cpp\n//\u7ecf\u5178\u7684bfs\uff0c\u96be\u70b9\u5728\u4e8e\u53bb\u91cd \n//\u697c\u4e0b\u7684\u5927\u4f6c\u4eec\u65b9\u6cd5\u591a\u79cd\u591a\u6837\uff0c\u4ec0\u4e48\u5eb7\u6258\u5c55\u5f00\u5b8c\u5168\u6ca1\u542c\u8bf4\u8fc7 \n//\u6709\u7528map\u53bb\u91cd\u7684\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u7528set\u5462 \n//\u4e8e\u662f\u6211\u5c31\u7528set\u6765\u6c34\u4e00\u6ce2 \n//\u8fd8\u662f\u6709\u4e9b\u6162\uff0c\u4e3b\u7ad9\u4f1at\u6389\u4e00\u4e2a\u70b9\uff0c\u5927\u725b\u53ef\u4ee5A \n//\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427 \n#include<iostream>\n#include<queue>\n#include<set>//set\u8981\u7528\u5230\u7684\u5934\u6587\u4ef6 \n#include<cstdio>\n#include<string>\nusing namespace std;\nconst int dx[4]={-1,-3,1,3};//\u56db\u5411\u79fb\u52a8\uff0c\u4e0d\u8fc7\u4e00\u4e9b\u8fb9\u754c\u95ee\u9898\u5728bfs\u91cc\u518d\u7279\u5224 \nconst string ds=\"123804765\";\nstruct node\n{\n    string s;\n    int step,z;//step\u8868\u793a\u5f53\u524d\u6b65\u6570\uff0cz\u8bb0\u5f550\u7684\u4f4d\u7f6e \n}start,mid;\nstring st;\nbool check(int q,int h)\n{\n    if(h<0||h>8) return false;\n    if(q==3&&h==2) return false;\n    if(q==2&&h==3) return false;\n    if(q==5&&h==6) return false;\n    if(q==6&&h==5) return false;//\u4e00\u4e9b\u8fb9\u754c\u7684\u7279\u6b8a\u60c5\u51b5 \n    return true;\n}\nvoid bfs()\n{\n    queue<node> q;\n    set<string> vis;//\u5b9a\u4e49\u4e00\u4e2astring\u578b\u7684set\uff0c\u7528\u4e8e\u53bb\u91cd \n    vis.insert(start.s);\n    q.push(start);\n    while(!q.empty())//\u5982\u679c\u961f\u5217\u975e\u7a7a \n    {\n        mid=q.front();\n        q.pop();\n        for(int i=0;i<4;i++)\n        {\n            int xx=mid.z+dx[i];\n            string ss=mid.s;\n            int l=vis.size();//\u8bb0\u5f55\u5f53\u524dset\u5185\u7684\u5143\u7d20\u4e2a\u6570 \n            if(!check(mid.z,xx)) continue;//\u8f6c\u79fb\u4e0d\u5408\u6cd5\uff0c\u5c31continue\u6389 \n            swap(ss[mid.z],ss[xx]);//\u4ea4\u6362\u5f97\u5230\u65b0\u72b6\u6001 \n            if(ss==ds)\n            {\n                cout<<mid.step+1<<endl;\n                return;\n            }\n            vis.insert(ss);//\u628a\u65b0\u72b6\u6001\u4e22\u8fdbset\u91cc \n            if(vis.size()==l+1)//\u56e0\u4e3aset\u6ca1\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u5982\u679c\u6b64\u65f6set\u7684\u5143\u7d20\u4e2a\u6570\u52a01\uff0c\u8bf4\u660e\u8fd9\u4e2a\u65b0\u72b6\u6001\u4ee5\u524d\u6ca1\u6709\u5f97\u5230\u8fc7 \n            {\n                node c;\n                c.s=ss;\n                c.z=xx;\n                c.step=mid.step+1;\n                q.push(c);//\u8ba9\u65b0\u72b6\u6001\u5165\u961f \n            }\n        }\n    }\n}\nint main()\n{\n    cin>>st;\n    if(st==ds)\n    {\n        cout<<\"0\"<<endl;\n        return 0;//\u7279\u5224\uff0c\u5982\u679c\u8bfb\u8fdb\u6765\u5c31\u662f\u76ee\u6807\u72b6\u6001\uff0c\u8f93\u51fa0\u9000\u51fa\u5c31\u597d\u4e86 \n    }\n    start.s=st;\n    for(int i=0;i<9;i++)\n    if(st[i]=='0')\n    {\n        start.z=i;\n        break;//\u8bb0\u5f55\u521d\u59cb\u72b6\u60010\u7684\u4f4d\u7f6e \n    }    \n    start.step=0;\n    bfs();\n    return 0;\n}\n```",
        "postTime": 1507206884,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6700\u6734\u7d20\u7b97\u6cd5\uff0c\u5927\u6982\u662f\u4e3b\u8fc7\u7a0b\u957f\u5ea6\u6700\u77ed\u7684\u4e86\n\n\u597d\u50cf\u6ca1\u4ec0\u4e48\u597d\u89e3\u91ca\u7684\u5427\u2026\n\nmap\u5224\u91cd\uff0c\u6240\u4ee5\u6bd4\u8f83\u6162\uff0c\u5728\u5927\u725b\u624d\u80fd\u8fc7\u5567\n\n```cpp\n#include<map>\n#include<queue>\n#include<string>\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define final \"123804765\"\n#define up pos-3\n#define down pos+3\n#define left pos-1\n#define right pos+1\n#define reg register\nusing namespace std;\nstruct node{string a;int s,loc;}; //a\u662f\u5f53\u524d\u6570\u7801\u7684\u72b6\u6001\uff0cs\u662f\u5f53\u524d\u7b54\u6848\uff0cloc\u662f\u5f53\u524d0\u7684\u4f4d\u7f6e \nstring s;\nmap<string,bool>able;\nqueue<node>q;\nint ans=2147483647;\nint main()\n{\n    cin>>s;\n    reg int loc=find(s.begin(),s.end(),48)-s.begin();  //\u7528find\u627e0\u7684\u4f4d\u7f6e \n    q.push((node){s,0,loc});\n    while (q.size())\n    {\n        reg string a=q.front().a,b=a;\n        reg int pos=q.front().loc,now=q.front().s;\n        q.pop();\n        if (now>=ans)continue; //\u5982\u679c\u5f53\u524d\u7b54\u6848\u5df2\u7ecf\u8d85\u8fc7\u5f53\u524d\u6700\u4f18\u7b54\u6848\u4e86\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u7ee7\u7eed\u7684\u5fc5\u8981\u6027\u4e86 \n        if (a==final){ans=now;continue;}  //\u66f4\u65b0\u7b54\u6848 \n        if (able[a])continue;able[a]=1; //\u5224\u91cd \n        if (pos>2)swap(a[up],a[pos]),q.push((node){a,now+1,up});a=b; //\u4e0a\u9762\u79fb\u4e0b\u6765 \n        if (pos<6)swap(a[down],a[pos]),q.push((node){a,now+1,down});a=b;  //\u4e0b\u9762\u79fb\u4e0a\u6765 \n        if (pos!=0&&pos!=3&&pos!=6)swap(a[left],a[pos]),q.push((node){a,now+1,left});a=b;  //\u5de6\u8fb9\u79fb\u8fc7\u6765 \n        if (pos!=2&&pos!=5&&pos!=8)swap(a[right],a[pos]),q.push((node){a,now+1,right});  //\u53f3\u8fb9\u79fb\u56de\u53bb \n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1504706164,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u770b\u4e0b\u9762\u90a3\u4e48\u591a\u5eb7\u6258\u5c55\u5f00\u7684\uff0c\u849f\u84bb\u8868\u793a\u5b8c\u5168\u4e0d\u61c2\u2026\u2026\n\n\u7814\u7a76\u4e86\u4e00\u4e0b\u5348\uff0c\u81ea\u5b66\u4e86\u6ca1\u5b66\u8fc7\u7684map\u8bed\u53e5\u2026\u2026\n\n\u601d\u8def\uff1a\u5e7f\u641c\uff0c\u7136\u540e\u628a\u77e9\u9635\u4e2d\u7684\u6570\u5b57\u8f6c\u6210\u5b57\u7b26\u4e32\uff08\u77e9\u9635\u6bcf\u4e00\u79cd\u72b6\u6001\u90fd\u6709\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff09\uff0c\u901a\u8fc7map\u6620\u5c04\uff0c\u5982\u679c\u4e4b\u524d\u6709\u8fc7\uff08\u6620\u5c04\u7684\u6570\u5b57\u4e3a1\uff09\u5219\u5f53\u524d\u5750\u6807\u51fa\u961f\uff0c\u5426\u5219\u5c06\u5f53\u524d\u5b57\u7b26\u4e32\u6620\u5c04\u7684\u6570\u5b57\u6539\u4e3a1\uff0c\u7701\u4e0b\u4e86\u65f6\u95f4\uff0c\u4e5f\u7701\u4e0b\u4e86\u7a7a\u95f4\uff0c\u5982\u679c\u5355\u7eaf\u5e7f\u641c\uff0c\u53ea\u67097\u5206\uff0c\u5176\u4ed6\u7684\u90fd\u662fTLE\u6216\u8005MLE\uff01\uff01\uff01\n\nmap\u5927\u6cd5\u597d\uff01\uff01\uff01\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<map>//\u5934\u6587\u4ef6 \nusing namespace std;\nshort b[5000000][4],a[5000000][4][4],x[4]={0,0,1,-1},y[4]={1,-1,0,0};//\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u624d\u7528\u7684short\u5b9a\u4e49\u6570\u7ec4\uff08\u53cd\u6b63\u6570\u4e0d\u5927\uff09 \nchar s; \nstring cs=\" \";//\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u5b57\u7b26\u4e32\uff0c\u5728\u4e0b\u9762\u5e7f\u641c\u7a0b\u5e8f\u91cc\u4e5f\u4f1a\u8bf4\u5230 \nint bfs(){//\u7b80\u6734\u7684\u5e7f\u641c\uff0cmap\u4f18\u5316\u2026\u2026 \n    map<string,int> gd;//\u7528map\u5b9a\u4e49gd \n    register int head=0,foot=1,xx,yy,k;//\u4e3a\u4e86\u63d0\u5347\u901f\u5ea6\uff0c\u53ea\u597d\u7528register \n    b[1][3]=1;\n    do{\n        head++;\n        for(register int i=0;i<4;i++){\n            xx=b[head][1]+x[i];yy=b[head][2]+y[i];\n            if((xx>=1)&&(xx<=3)&&(yy>=1)&&(yy<=3)){//\u5982\u679c\u7b26\u5408\u6761\u4ef6 \n                foot++;\n                b[foot][1]=xx;b[foot][2]=yy;b[foot][3]=b[head][3]+1;//\u5750\u6807xx\u548cyy\u8fdb\u961f\uff0c\u7d2f\u52a0\u6b65\u6570 \n                for(register int j=1;j<=3;j++){\n                    for(register int q=1;q<=3;q++){\n                        a[foot][j][q]=a[head][j][q];//copy\u4e00\u4e2a\u526f\u672c\uff0c\u7528\u6765\u4ea4\u6362 \n                    }\n                }\n                //-------------------\u4e3b\u8981\u90e8\u5206\u5206\u754c\u7ebf------------------------ \n                cs=\" \";//\u91cd\u7f6ecs\u5b57\u7b26\u4e32 \n                swap(a[foot][b[head][1]][b[head][2]],a[foot][xx][yy]);//\u5c060\u548c\u53e6\u4e00\u4e2a\u641c\u7d22\u5230\u7684\u6570\u4ea4\u6362 \n                cs+=(char)a[foot][1][1]+'A';cs+=(char)a[foot][1][2]+'A';cs+=(char)a[foot][1][3]+'A';cs+=(char)a[foot][2][1]+'A';cs+=(char)a[foot][2][2]+'A';//\u521b\u9020\u5b57\u7b26\u4e32 \n                cs+=(char)a[foot][2][3]+'A';cs+=(char)a[foot][3][1]+'A';cs+=(char)a[foot][3][2]+'A';cs+=(char)a[foot][3][3]+'A';//\u4e3a\u4e0b\u9762map\u5224\u65ad\u4f5c\u51c6\u5907 \n                if(gd[cs]){foot--;continue;}//\u5982\u679c\u5b57\u7b26\u4e32cs\u6620\u5c04\u7684\u6574\u6570\u4e3a1\uff08\u4e5f\u5c31\u662f\u91cd\u590d\uff09\u961f\u5934\u51fa\u961f\uff0c\u76f4\u63a5\u7ed3\u675f\u672c\u6b21\u5faa\u73af\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af \n                gd[cs]=1;//\u5982\u679c\u4e0d\u91cd\u590d\uff0c\u5c06cs\u6620\u5c04\u7684\u6574\u6570\u7f6e\u4e3a1 \n                if(a[foot][1][1]==1&&a[foot][1][2]==2&&a[foot][1][3]==3&&a[foot][2][3]==4&&a[foot][3][3]==5&&a[foot][3][2]==6&&a[foot][3][1]==7&&a[foot][2][1]==8){return b[head][3];}//\u5982\u679c\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c\u8f93\u51fa\u6b65\u6570 \n                //-------------------\u4e3b\u8981\u90e8\u5206\u7ed3\u675f-------------------------- \n            }\n        }\n    }while(head<foot); \n    return 0;\n}\nint main(){\n    for(register int i=1;i<=3;i++){\n        for(register int j=1;j<=3;j++){\n            cin>>s;//\u5b57\u7b26\u8bfb\u5165 \n            a[1][i][j]=s-'0';//\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u5b58\u5165\u4e09\u7ef4\u6570\u7ec4 \n            if(a[1][i][j]==0){\n                b[1][1]=i;b[1][2]=j;//\u5bfb\u627e0\u7684\u4f4d\u7f6e\uff0c\u8fdb\u5165\u961f\u5217 \n            }\n        }\n    }\n    cout<<bfs();//\u5e7f\u641c\u5927\u6cd5 \n}\n```",
        "postTime": 1503312149,
        "uid": 34239,
        "name": "ironwheel",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u7ecf\u5178\u7684\u516b\u6570\u7801\u96be\u9898\n\n**\u53cc\u5411bfs+\u5eb7\u6258\u5c55\u5f00+\u5eb7\u6258\u9006\u5c55\u5f00**\n\n\u53cc\u5411bfs\uff1a\n\n\u4ece\u8d77\u59cb\u548c\u7ed3\u675f\u72b6\u6001\u5f00\u59cb\u641c\u7d22\uff0c\u6bcf\u6b21\u9009\u62e9\u641c\u7d22\u6b21\u6570\u6700\u5c11\u7684\u90a3\u4e00\u8fb9\u5f80\u4e0b\u641c\uff0c\u76f4\u81f3\u76f8\u9047\u4e3a\u6b62\uff0c\u628a\u6b65\u6570\u76f8\u52a0\u5373\u4e3a\u7b54\u6848\n\n\n\u5eb7\u6258\u5c55\u5f00&\u5eb7\u6258\u9006\u5c55\u5f00\uff1a\n\n<http://blog.csdn.net/qq\\_38678604/article/details/77413715>\u535a\u5ba2\u94fe\u63a5\n\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u8ba1\u7b97\u4e00\u4e2a\u6392\u5217\u7684\u6392\u540d\u4e0e\u5229\u7528\u6392\u540d\u8ba1\u7b97\u6392\u5217\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff1f\n\n\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u5c06\u4e00\u4e2a9\u4f4d\u6570\u4f5c\u4e3a\u6bcf\u4e2a\u72b6\u6001\u7684\u4e0b\u8868\uff0c\u663e\u7136\u4f1aMLE\uff0c\u4f46\u5b9e\u9645\u4e0a9\u4e2a\u6570\u7684\u6392\u5217\u53ea\u67099\uff01\u7ea6\u7b49\u4e8e36w\u4e2d\u72b6\u6001\uff0c\u6240\u4ee5\u5229\u7528\u5eb7\u6258\u5c55\u5f00\u6211\u4eec\u53ea\u7528\u5f0040w\u7684\u6570\u7ec4\u5c31\u4e0d\u91cd\u590d\u5730\u8868\u793a\u51fa\u4e86\u4e00\u4e2a\u6392\u5217\n\n\n\u6240\u4ee5\u5c31\u8fd9\u6837\u5427\uff1a\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cctype>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1000005,INF=2000000000;\ntypedef int state[9];\nint d[maxn],vis[maxn],fac[10],label[10];\nvoid cal(){              //\u5feb\u901f\u8bfb\u5165\n    fac[0]=1;\n    for(int i=1;i<=9;i++) fac[i]=fac[i-1]*i;\n}\nint code(state a){      //\u5eb7\u6258\u5c55\u5f00\n    int ans=0;\n    for(int i=0;i<=9;i++) label[i]=1;\n    for(int i=0;i<9;i++){\n        int cnt=0;\n        for(int j=0;j<a[i];j++) if(label[j]) cnt++;\n        label[a[i]]=0;\n        ans+=cnt*fac[8-i];\n    }\n    return ans;\n}\nstate n;\nvoid codel(int x){     //\u5eb7\u6258\u9006\u5c55\u5f00\n    int cnt;\n    for(int i=0;i<9;i++) label[i]=1;\n    for(int i=0;i<9;i++){\n        cnt=x/fac[8-i];\n        x=x%fac[8-i];\n        for(int j=0;j<9;j++){\n            if(!label[j]) continue;\n            if(!cnt) {label[j]=0;n[i]=j;break;}\n            cnt--;\n        }\n    }\n}\nstate ori={1,2,3,8,0,4,7,6,5},S;\nint aim,ans=0,X[4]={0,0,-1,1},Y[4]={-1,1,0,0};\nvoid bfs(){          //\u53cc\u5411\u5e7f\u641c\n    queue<int> q[2];\n    int cnt[2],s,u,v,x,y,nx,ny;\n    cnt[0]=cnt[1]=0;\n    u=code(S);\n    q[0].push(u);\n    q[1].push(aim);\n    vis[u]=1;vis[aim]=2;\n    while(true){\n        s=(cnt[0]>cnt[1]);   //\u9009\u62e9\u641c\u7d22\u6b21\u6570\u6700\u5c11\u7684\u90a3\u4e2a\u641c\n        cnt[s]++;\n        u=q[s].front();\n        q[s].pop();\n        codel(u);\n        for(int i=0;i<9;i++) if(!n[i]) {x=i/3;y=i%3;break;}\n        for(int i=0;i<4;i++){\n            nx=x+X[i];\n            ny=y+Y[i];\n            if(nx<0||nx>2||ny<0||ny>2) continue;\n            swap(n[3*nx+ny],n[3*x+y]);\n            v=code(n);\n            if(!vis[v]){\n                q[s].push(v);\n                d[v]=d[u]+1;\n                vis[v]=s+1;\n            }\n            else if(vis[v]==(s^1)+1) {ans=d[u]+d[v]+1;return;}\n            swap(n[3*nx+ny],n[3*x+y]);\n        }\n    }\n}\nint main()\n{\n    cal();\n    aim=code(ori);\n    char c;\n    for(int i=0;i<9;i++){\n        c=getchar();\n        while(!isdigit(c)) c=getchar();\n        S[i]=c-'0';\n    }\n    bfs();\n    cout<<ans<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1503219219,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "IDA\\*\uff1fA\\*\uff1f\u5eb7\u6258\u5c55\u5f00\uff1f\u4e0d\uff0c\u90fd\u4e0d\u7528\u3002\n\n\u76f4\u63a5\u6bcf\u4e2a\u72b6\u6001\u5f009\u8fdb\u5236\u6570\uff08\u4e5f\u4e0d\u4f1a\u8d85int\uff09\u7136\u540e\u53d6\u6a21\u4e00\u4e0b\u4e22\u5230hash\u8868\u91cc\u5224\u4e2a\u91cd....\n\n\u72b6\u6001\u6700\u591a\u4e5f\u5c3130\u591aW\u79cd\uff0c\u5b8c\u5168\u4e0d\u7528\u62c5\u5fc3\u8d85\u65f6\u3002\n\n\u6700\u540e\u518d\u6765\u4e2a\u6700\u7ecf\u5178\u7684BFS....\u8fc7\u4e86....\n\n\u672c\u9898\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u5224\u91cd\u3002\u4ee5\u53ca\u4ee3\u7801\u91cf\u53ef\u80fd\u6709\u70b9\u5c0f\u5927\uff0c\u7ec6\u5fc3\u70b9\u5c31\u4e0d\u4f1a\u9519\u5566~\n\n\uff08\u5176\u5b9e\u5e76\u4e0d\u96be\u7684\u5440XD\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint s[3][3],e[3][3]={{1,2,3},{8,0,4},{7,6,5}},ee;//\u521d\u59cb\u72b6\u6001\u3001\u6700\u7ec8\u72b6\u6001\u3001\u6700\u7ec8\u72b6\u6001\u8f6cint \nconst int MOD=1e6+13,N=370000;\nint h[MOD],val[N],nexp[N],p=1;//\u94fe\u5f0f\u524d\u5411\u661f\uff0cHash\u7528 \ninline int blo2int(int x[][3]){\n    int ret=0;\n    for(int i=0;i<3;i++)\n        for(int j=0;j<3;j++)\n            ret*=9,ret+=x[i][j];\n    return ret;\n}//\u77e9\u9635\u8f6cint \ninline void int2blo(int x,int y[][3]){\n    for(int i=2;i>=0;i--)\n        for(int j=2;j>=0;j--)\n            y[i][j]=x%9,x/=9;\n}//int\u8f6c\u77e9\u9635 \ninline bool insHash(int c){\n    int d=c%MOD;\n    for(int u=h[d];u;u=nexp[u]){\n        if(val[u]==c)return 0;\n    }\n    nexp[p]=h[d],h[d]=p,val[p]=c,p++;\n    return 1;\n}//\u4e22\u8fdbHash\u8868\u5224\u91cd \nstruct Que{\n    int con,x,y,ste;//\u5f53\u524d\u72b6\u6001\uff08\u8f6c\u6210\u4e86int\u7684\u77e9\u9635\uff09\u30010\u70b9\u7684\u5750\u6807\u3001\u6b65\u6570 \n};//\u961f\u5217\u7ed3\u6784 \ninline bool valid(int x,int y){return x>=0&&x<3&&y>=0&&y<3;}//\u5224\u65ad\u5750\u6807\u662f\u5426\u5408\u6cd5 \n\nint mv[]={0,1,0,-1,0};//\u5750\u6807\u8f6c\u79fb \nint main(){\n    ee=blo2int(e);//\u628a\u76ee\u6807\u72b6\u6001\u53d8\u6210\u8fdb\u5236\u6570 \n    int sx,sy;\n    char ch;\n    for(int i=0;i<3;i++)\n        for(int j=0;j<3;j++){\n            cin>>ch;\n            s[i][j]=ch-'0';\n            if(!s[i][j])\n                sx=i,sy=j;\n        }//\u8f93\u5165 \n    queue<Que> qu;//\u961f\u5217 \n    insHash(blo2int(s));\n    qu.push((Que){blo2int(s),sx,sy,0});\n    Que na;\n    int nx,ny,ns;\n    /*\u6807\u51c6BFS*/ \n    while(!qu.empty()){\n        na=qu.front(),qu.pop();\n        int2blo(na.con,s);\n        /*\u72b6\u6001\u8f6c\u79fb*/ \n        for(int i=1;i<=4;i++){\n            nx=na.x+mv[i-1],ny=na.y+mv[i];\n            if(valid(nx,ny)){\n                swap(s[nx][ny],s[na.x][na.y]);\n                ns=blo2int(s);\n                if(ns==ee){//\u82e5\u8fbe\u5230\u76ee\u6807\u72b6\u6001 \n                    printf(\"%d\",na.ste+1);\n                    return 0;\n                }\n                if(insHash(ns))qu.push((Que){ns,nx,ny,na.ste+1});\n                swap(s[nx][ny],s[na.x][na.y]);//\u8bb0\u5f97\u8fd8\u539f \n            }\n        }\n    }\n    printf(\"no solution\");//\u82e5\u65e0\u89e3\uff08\u9898\u76ee\u65e0\u65e0\u89e3\u60c5\u51b5\uff09 \n    return 0;\n}\n```",
        "postTime": 1502850636,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7ec6\u8282\u5bb9\u6613\u9519\n\n\u867d\u7136\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5\n\n\u4f46\u662f\u5728\u903b\u8f91\u65b9\u9762\u8fd8\u662f\u5f88\u4e0d\u540c\u5440\n\n\u6211\u8bf4\u8bf4\u6211\u7684\u601d\u8def\n\n\u5148\u628a\u521d\u59cb\u72b6\u6001\u5165\u961f\n\n\u7136\u540ewhile(!q.empty()){}\n\n\u5faa\u73af\u6240\u6709\u53ef\u5ef6\u4f38\u7684\u72b6\u6001\n\n\u5982\u4f55\u7b26\u5408\u6761\u4ef6,\u5165\u961f\n\n\u4e0d\u7b26\u5408,\u8df3\u8fc7\n\n\u5faa\u73af\u7ed3\u675f,\u8be5\u8282\u70b9\u51fa\u961f\n\n\u8981\u4e48\u641c\u5230\u7b54\u6848,\u8f93\u51fa\u5e76return\n\n\u8981\u4e48\u76f4\u5230\u961f\u5217\u4e3a\u7a7a,\u627e\u4e0d\u5230\u7b54\u6848\n\n\u4ee5\u4e0b\u662f\u6211\u6734\u7d20\u7684\u7eafbfs\uff0c\uff0c\u770b\u53d8\u91cf\u540d\u5b57\u5e94\u8be5\u5c31\u77e5\u9053\u7528\u9014\u5427,,\u6ce8\u91ca\u6709\u70b9\u5c11,\u89c1\u8c05\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<cstring>\nclass node{public:int x,y,step,a[10];}s;    \u7a7a\u683c\u4f4d\u7f6e\u4e3a(x,y),\u5f53\u524d\u6b65\u6570step,a[10]\u50a8\u5b58\u987a\u5e8f\nstd::queue<node>q;\nint book[526888],f[]={1,1,2,6,24,120,720,5040,40320,326880},cannot_use_next[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\nusing namespace std;\nint inline expansion(int*a)\n{\n    int ans=0;\n    for(int i=0;i<9;i++)\n    {\n        int tmp=0;\n        for(int j=i+1;j<9;j++)\n            if(a[i]>a[j])tmp++;\n        ans+=tmp*f[8-i];\n    }\n    return ans;\n}\nint main()\n{\n    char temp_start[10];                            //temp_abc\u524d\u7f00\u4ee3\u8868abc\u9884\u5904\u7406\u7528\u7684\u4e34\u65f6\u53d8\u91cf \n    int temp_end[]={1,2,3,8,0,4,7,6,5};\n    int end=expansion(temp_end);\n    cin>>temp_start;\n    for(int i=0;i<9;i++)s.a[i]=temp_start[i]-'0';\n    for(int i=1;i<9;i++)\n    {\n        if(s.a[i]==0)\n        {\n            s.x=i%3;\n            s.y=i/3;\n            s.step=0;\n            break;                                         //\u627e\u5230\u7a7a\u683c\u4f4d\u7f6e \n        }\n    }\n    q.push(s);\n    book[expansion(s.a)]=1;        //\u6807\u8bb0,\u5eb7\u62d3\u5c55\u5f00\n    node temp,now_head;      /\u961f\u9996\u5143\u7d20\n    while(!q.empty())\n    {\n        int blank=q.front().x+q.front().y*3; \n        now_head=q.front();                              //\u5f53\u524d\u8282\u70b9\u7684\u7a7a\u683c\u4f4d\u7f6e \n        for(int i=0;i<4;i++)                              //\u904d\u5386\u56db\u4e2a\u65b9\u5411 \n        {\n            temp=now_head;\n            int tx=q.front().x+cannot_use_next[i][0];\n            int ty=q.front().y+cannot_use_next[i][1];\n            if(tx>=0&&tx<=2&&ty>=0&&ty<=2)\n            {        //\u51fa\u754c\u5219\u8df3 \n                int newblank=tx+ty*3;     //\u56db\u4e2a\u65b9\u5411\u904d\u5386\u65b0\u7a7a\u683c\u4f4d\u7f6e \n                temp.a[blank]=temp.a[newblank];\n                temp.a[newblank]=0;\n                temp.step=q.front().step+1; \n                if(expansion(temp.a)==end)\n                {\n                    cout<<temp.step;\n                    return 0;\n                }\n                if(book[expansion(temp.a)]==0)\n                {\n                    book[expansion(temp.a)]=1;\n                    temp.x=tx;temp.y=ty;\n                    q.push(temp);\n                }\n            }\n        }\n        q.pop();                                              //\u7528\u5b8cpop\u6389 \n    }\n}\n\n```",
        "postTime": 1502534717,
        "uid": 36507,
        "name": "shijunfeng00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "emmmm\u7ecf\u5178\u95ee\u9898\u5927\u8ba8\u8bba.jpg\n\n\u867d\u7136\u6211\u4e0d\u77e5\u9053\u5eb7\u6258\u5c55\u5f00\u662f\u4ec0\u4e48\u4f46\u662f\u4e0d\u5f71\u54cd\u6211\u7528bfs\u554a\uff08\n\n\u5728\u8fd9\u4e2a\u9898\u91cc\u9762\uff0c\u6211\u8ba4\u4e3a\u6bd4\u8f83\u7ecf\u5178\u7684\u89e3\u6cd5\u8fd8\u662f\u53cc\u5411bfs\uff0cA\\*\u5982\u679c\u4f30\u503c\u51fd\u6570\u6ca1\u5199\u597d\u4f1a\u9020\u6210\u90e8\u5206\u70b9\u9519\u8bef\n\n\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u8868\u793a\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u4e00\u4e2a\u6570\uff0c\u7528\u4e8e\u4ee3\u66ff\u6574\u4e2a\u8868\u7684\u72b6\u6001\uff0c\u800c\u4e14\u8981\u80fd\u591f\u4f7f\u5f97\u8fd9\u4e2a\u72b6\u6001\u6570\u4e0e\u6574\u4e2a\u8868\u4ea7\u751f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\u3002\n\n\u6211\u4e0b\u610f\u8bc6\u60f3\u5230\u7684\u5c31\u662f\u4e5d\u8fdb\u5236\uff08\uff09\uff0c\u4ee5\u4e0b\u628a\u8fd9\u4e2a\u6570\u5c31\u53eb\u505a \u4f4d\u7f6e\u6570\u3002\n\n\u8003\u8651\u6574\u4e2a\u8868\u7684\u603b\u72b6\u6001\u6570\u4e3a181440\uff0c\u800c\u6700\u5927\u6b65\u6570\u53ea\u670930\uff0c\u90a3\u4e48\u8003\u8651\u53cc\u5411bfs\u65f6\u53ea\u752815\u6b65\u7684\u9650\u5236\u5373\u53ef\n\n\u4ee3\u7801\u5730\u5740\uff1ahttp://paste.ubuntu.com/25162981/\n\n\u4e3a\u4e86\u4f18\u5316\u53c8\u4f18\u5316\uff0c\u6211\u5355\u72ec\u505a\u4e86\u4e00\u70b9\u5904\u7406\u2026\u2026\u5927\u6982\u5728IDE\u4e0a\u90a3\u4e9b30\u6b65\u7684\u72b6\u6001\u80fd\u7528\u63a5\u8fd130ms\u89e3\u51b3\u6389\uff08\u5e94\u8be5\u6ca1\u6709O2\uff09\uff0c\u7ef0\u7ef0\u6709\u4f59\n\n\n\u91cd\u70b9\u5206\u6790\uff1a\n\n```cpp\nqueue<u32>    qu;\nqueue< pair<u32,int> >    requ;\nvector< vector< pair<u32,int> > >    hash_step,rehash_step;\nconst u32 MOD=10009;\n```\n\u8fd9\u90e8\u5206\u5206\u522bqu\u548crequ\u533a\u5206bfs\u548crebfs\u4f7f\u7528\u7684\u961f\u5217\uff0crequ\u7684\u90e8\u5206\u76f4\u63a5\u4ee5<u32,int>\u4e3a\u5355\u4f4d\uff0c\u6709\u6548\u7684\u5feb\u901f\u63d0\u53d6\u51fa\u5bf9\u5e94\u7684\u72b6\u6001\u6570\u7684\u6b65\u6570\n\n\u5bf9\u6bcf\u4e00\u4e2abfs\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\uff0c\u5c06\u5b83\u7684\u4f4d\u7f6e\u6570\u548c\u6b65\u6570\u7ec4\u5408\u8d77\u6765\uff0c\u5bf9\u4f4d\u7f6e\u6570\u5173\u4e8e\u8d28\u6570MOD\u6c42\u4f59\uff0c\u4e5f\u5c31\u662f\u5f97\u5230\u4e86hash\u8fc7\u540e\u7684\u8868\u7684\u4f4d\u7f6e\u585e\u8fdb\u53bb\n\nrehash\\_step\u540c\u7406\uff0c\u4e0d\u8fc7\u4e0d\u9700\u8981\u8bb0\u5f55\u6b65\u6570\u5c31\u662f\u4e86\uff0c\u8fd9\u91cc\u8fdb\u884c\u533a\u5206\u53ea\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u8d70\u5165\u540c\u4e00\u4e2a\u72b6\u6001\n\n\n```cpp\nu32 calc(const vector<int> &in)\nvector<int>    recalc(int in)\n```\n\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u524d\u4e00\u4e2a\u5c06\u6570\u7684\u4f4d\u7f6e\u5206\u5e03\u8f6c\u5316\u4e3a\u4f4d\u7f6e\u6570\uff0c\u540e\u4e00\u4e2a\u5219\u76f8\u53cd\n\n```cpp\nint    zero(const vector<int> &in)\ninline u32     calc_left(vector<int> in,int zero_pos)\ninline u32     calc_right(vector<int> in,int zero_pos)\ninline u32     calc_up(vector<int> in,int zero_pos)\ninline u32     calc_down(vector<int> in,int zero_pos)\n```\n\u524d\u4e00\u4e2a\u51fd\u6570\u8ba1\u7b97\u8be5\u72b6\u6001\u4e0b0\u7684\u4f4d\u7f6e\uff0c\u540e\u9762\u56db\u4e2a\u5c060\u8fdb\u884c\u79fb\u52a8\u5e76\u8fd4\u56de\u5176\u4f4d\u7f6e\u6570\n\n```cpp\nvector< pair<u32,int> >::iterator     ser(u32 ha_in)\nvector< pair<u32,int> >::iterator     reser(u32 ha_in)\n```\n\u4f20\u5165\u4f4d\u7f6e\u6570\uff0c\u8fd4\u56de\u5728hash\u8868\u548crehash\u8868\u4e2d\u7684\u8fed\u4ee3\u5668\u3002\u8fd9\u4e24\u51fd\u6570\u7528\u4e8e\u5728bfs\u548crebfs\u4e2d\u67e5\u91cd\u4ee5\u53ca\u662f\u5426\u53ef\u4ee5\u6784\u6210\u5b8c\u6574\u7684\u53d8\u6362\u8def\u5f84\uff0c\u4e5f\u662fMITM\u7684\u91cd\u70b9\n\n```cpp\nvoid bfs(int lim)\nvoid rebfs(int lim)\n```\n\u4f7f\u7528lim\u9650\u5236bfs\u7684\u6b65\u6570\n\n```cpp\npair<u32,int>    pa=requ.front();    \n        vector< pair<u32,int> >::iterator    iter=ser(pa.first);\n        if(iter!=hash_step[pa.first%MOD].end())    {\n            cout<<iter->second+pa.second<<endl;\n            exit(0);\n        }\n\n        vector<int>    ve=recalc(pa.first);\n        int zero_pos=zero(ve);\n\nif(pa.second>lim)    break;\n        requ.pop();\n```\n\u8fd9\u662frebfs\u7684\u90e8\u5206\uff0c\u524d\u9762\u7684if\u7528\u4e8e\u5224\u65ad\u6b64\u65f6\u5728bfs\u4ea7\u751f\u7684\u8868\u4e2d\u662f\u5426\u6709\u5df2\u7ecf\u8d70\u8fc7\u7684\u72b6\u6001\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u7acb\u523b\u5224\u65ad\u6b64\u65f6\u6b65\u6570\u6700\u77ed\u5e76\u4e14\u7acb\u523b\u9000\u51fa\u3002zero\\_pos\u8bb0\u5f55\u6b64\u65f6\u76840\u7684\u4f4d\u7f6e\u3002\u540e\u9762\u7684if\u4f7f\u5f97\u961f\u5217\u4e2d\u72b6\u6001\u6570\u8d85\u8fc7\u9650\u5236\u65f6\u4e0d\u5f39\u51fa\u961f\u9996\u800c\u662f\u505c\u4e0b\u4e0d\u518d\u641c\u7d22\n\n```cpp\nint be_pos[9]={1,2,3,8,0,4,7,6,5};\n    int en_pos[9];\n    char in[10];\n    scanf(\"%s\",in);\n    hash_step.resize(MOD);\n    rehash_step.resize(MOD);\n    for(int i=0;i<9;i++)    en_pos[i]=in[i]-'0';\n    vector<int> be_ve(&be_pos[0],&be_pos[9]);\n    vector<int>    en_ve(&en_pos[0],&en_pos[9]);\n    int hash_be_ve=calc(be_ve);\n    int hash_en_ve=calc(en_ve);\n    hash_step[hash_be_ve%MOD].push_back(pair<u32,int>(hash_be_ve,0));\n    qu.push(hash_be_ve);\n    requ.push(pair<u32,int>(hash_en_ve,0));\n    rehash_step[hash_en_ve%MOD].push_back(pair<u32,int>(hash_en_ve,0));\n```\n\u521d\u59cb\u5316\uff0c\u8f6c\u6362\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e3a\u5bf9\u5e94\u7684\u72b6\u6001\u3002\u987a\u4fbf\u5c06hash\u7684\u4e24\u4e2a\u8868\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684MOD\u5927\u5c0f\u9632\u6b62\u51fa\u9519\n\n```cpp\nfor(limts=0;limts<15;limts++)    {\n        bfs(limts);\n        rebfs(limts);\n    }\n```\n\u53cc\u7aef\u51fa\u53d1\u5e76\u540c\u65f6\u9650\u5236\u6b65\u6570\u4ee5\u8fbe\u5230\u6700\u5c0f\u641c\u7d22\u91cf\n\nEOF.",
        "postTime": 1500912069,
        "uid": 29077,
        "name": "TBB_Nozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u516b\u6570\u7801\u95ee\u9898\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u641c\u7d22\u9898\uff0c\u65b9\u6cd5\u81ea\u7136\u4e5f\u5f88\u591a\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u53cc\u5411\u5e7f\u641c\u3002\n\n\u53cc\u5411\u5e7f\u641c\u5c31\u662f\u4ece\u521d\u59cb\u8282\u70b9\u548c\u76ee\u6807\u8282\u70b9\u540c\u65f6\u5411\u5916\u6269\u5c55\uff0c\u6839\u636e\u5e7f\u641c\u7684\u7279\u70b9\uff0c\u5f97\u5230\u7684\u7b2c\u4e00\u4e2a\u76f8\u540c\u8282\u70b9\u5c31\u662f\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u800c\u5f97\u89e3\u3002\u81f3\u4e8e\u53cc\u5411\u5e7f\u641c\u548c\u5e7f\u641c\u7684\u6548\u7387\u6bd4\u8f83\uff0c\u672c\u4eba\u5e76\u6ca1\u6709\u53bb\u4e13\u95e8\u7814\u7a76\u7a76\u7adf\u53ef\u4ee5\u5feb\u591a\u5c11\u500d\uff0c\u4f46\u662f\u4e8b\u5b9e\u8bc1\u660e\u5c31\u662f\u5feb\u597d\u591a\u597d\u591a\u3002\n\n\u6253\u53cc\u5411\u5e7f\u641c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5f00\u4e24\u4e2a\u961f\u5217\uff0ch[0]\u548ch[1]\uff0c\u5f00\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u8c03\u7528\u3002\u4e0b\u9762\u653e\u4e00\u4e2a\u7b80\u5355\u7684\u53cc\u5411\u5e7f\u641c\u6a21\u677f\uff1a\n\n```cpp\nwhile (head[0]<tail[0]&&head[1]<tail[1])\n    {\n        if (tail[0]<=tail[1])\n          double_BFS(0);\n        else double_BFS(1);\n    }\n```\n\u53ef\u4ee5\u770b\u51fa\u53cc\u5411\u5e7f\u641c\u4f18\u5148\u6269\u5c55\u8282\u70b9\u5c11\u7684\u4e00\u7aef\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u4e24\u4e2a\u961f\u5217\u8f6e\u756a\u6269\u5c55\uff0c\u4ece\u800c\u52a0\u5feb\u6c42\u89e3\u901f\u5ea6\u3002\u5728\u8f93\u5165\u6570\u636e\u9884\u5904\u7406\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u628a\u521d\u59cb\u8282\u70b9\u548c\u76ee\u6807\u8282\u70b9\u5206\u522b\u5165\u961f\u3002\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5224\u91cd\u3002\u5eb7\u6258\u5c55\u5f00\u662f\u8fd9\u9053\u9898\u7684\u5f88\u597d\u7684\u5224\u91cd\u65b9\u6cd5\uff0c\u5728\u53cc\u5411\u5e7f\u641c\u4e2d\uff0c\u53ea\u9700\u8981\u4e0e\u540c\u4e00\u961f\u5217\u91cc\u7684\u5143\u7d20\u8fdb\u884c\u5224\u91cd\uff01\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5f00\u4e24\u4e2a\u7528\u4e8e\u5224\u91cd\u7684bool\u578b\u6570\u7ec4vis[0]\uff0cvis[1]\uff0c\u5206\u522b\u8868\u793a\u67d0\u4e00\u961f\u5217\u662f\u5426\u6269\u5c55\u5230\u4e86\u8be5\u8282\u70b9\u3002\u8fd9\u4e48\u6765\u8bf4\uff0c\u641c\u5230\u6b63\u89e3\u7684\u6761\u4ef6\u5c31\u53d8\u6210\u4e86\uff1a\u6709\u4e00\u4e2a\u8282\u70b9\u540c\u65f6\u88ab\u4e24\u8fb9\u8bbf\u95ee\u8fc7\uff0c\u5373\u8be5\u8282\u70b9\u5728\u4e24\u4e2avis\u6570\u7ec4\u4e2d\u5747\u4e3a1\u3002\u90a3\u4e48\u6211\u4eec\u5728\u6bcf\u8bbf\u95ee\u5230\u4e00\u4e2a\u65b0\u8282\u70b9\u65f6\u5c31\u505a\u5982\u4e0a\u5224\u65ad\uff0c\u5c31\u53ef\u4ee5\u5728\u7b2c\u4e00\u65f6\u95f4\u627e\u5230\u6b63\u89e3\u5e76\u8f93\u51fa\u4e86\u3002\n\n\n\u5176\u5b9e\u8fd9\u4e2a\u53cc\u5411\u7684BFS\u662f\u5728\u539f\u6709\u7684\u6734\u7d20BFS\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u7684\uff0cBFS\u8dd1\u4e863000\u591ams\uff0c\u53cc\u5411BFS\u786c\u662f\u8dd1\u8fdb\u4e86100ms\uff0c\u53ef\u4ee5\u8bf4\u6548\u7387\u6709\u4e86\u5f88\u5927\u7684\u63d0\u5347\u3002\n\n\n\u53cc\u5411BFS\uff1a\n\n\n\n\n\n\n\n    \n    \n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\nint biao[]={1,1,2,6,24,120,720,5040,40320};\nchar c[10];\nint temp[10];\nbool vis[2][500000];\nint h[2][500000][10];\nint g[2][500000];\nint head[2],tail[2]={1,1};\nbool key;\nint cantor(int a[10])\n{\n    int sum=0;\n    for (int i=1;i<=9;i++)\n    {\n        int s=0;\n        for (int j=i+1;j<=9;j++)\n          if (a[j]<a[i]) s++;\n        sum+=s*biao[9-i];\n    }\n    return sum;\n}\nvoid check(int num)\n{\n    if (vis[0][num]==1&&vis[1][num]==1)\n    {\n        printf(\"%d\",g[0][num]+g[1][num]);\n        key=1;\n    }\n}\nbool move(int s[10],int i)\n{\n    int p;\n    int a[10];\n    for (int k=1;k<=9;k++)\n    {\n        a[k]=s[k];\n        if (a[k]==0) p=k;\n    }\n    if (i==1)\n    {\n        if (p>=1&&p<=3) return false;\n        swap(a[p],a[p-3]);\n    }\n    if (i==2)\n    {\n        if (p>=7&&p<=9) return false;\n        swap(a[p],a[p+3]);\n    }\n    if (i==3)\n    {\n        if (p%3==1) return false;\n        swap(a[p],a[p-1]);\n    }\n    if (i==4)\n    {\n        if (p%3==0) return false;\n        swap(a[p],a[p+1]);\n    }\n    for (int k=1;k<=9;k++)\n      temp[k]=a[k];\n    return true;\n}\nvoid double_BFS(int x)\n{\n    head[x]++;\n    int num_head=cantor(h[x][head[x]]);\n    for (int i=1;i<=4;i++)\n    {\n        memset(temp,0,sizeof(temp));\n        if ( move(h[x][head[x]],i)==false ) continue;//\u5982\u679c\u4e0d\u80fd\u5411\u8fd9\u4e2a\u65b9\u5411\u79fb\u52a8 \n        int num=cantor(temp);\n        if ( vis[x][num]==1 ) continue;//\u5224\u91cd\n        tail[x]++;\n        for (int k=1;k<=9;k++)\n            h[x][tail[x]][k]=temp[k];\n        vis[x][num]=1;\n        g[x][num]=g[x][num_head]+1;\n        check(num);\n        if (key) return;\n    }\n}\nint main()\n{\n    //freopen(\"eight.in\",\"r\",stdin);\n    scanf(\"%s\",c);\n    for (int i=1;i<=9;i++)\n      h[0][1][i]=c[i-1]-'0';\n    h[1][1][1]=1;h[1][1][2]=2;h[1][1][3]=3;\n    h[1][1][4]=8;h[1][1][5]=0;h[1][1][6]=4;\n    h[1][1][7]=7;h[1][1][8]=6;h[1][1][9]=5;\n    vis[0][cantor(h[0][1])]=1;vis[1][131976]=1;\n    while (head[0]<tail[0]&&head[1]<tail[1])\n    {\n        if (tail[0]<=tail[1])\n          double_BFS(0);\n        else double_BFS(1);\n        if (key) break;\n    }\n    return 0;\n}\n```\n\u518d\u653e\u4e00\u4e2a\u8dd1\u4e863000\u591ams\u7684\u5355\u5411BFS\uff1a\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\nint biao[]={1,1,2,6,24,120,720,5040,40320};\nchar c[10];\nint temp[10];\nbool vis[500000];\nint h[500000][10];\nint g[500000];\nint head,tail=1;\nbool key;\nint cantor(int a[10])\n{\n    int sum=0;\n    for (int i=1;i<=9;i++)\n    {\n        int s=0;\n        for (int j=i+1;j<=9;j++)\n          if (a[j]<a[i]) s++;\n        sum+=s*biao[9-i];\n    }\n    return sum;\n}\nbool move(int s[10],int i)\n{\n    int p;\n    int a[10];\n    for (int k=1;k<=9;k++)\n    {\n        a[k]=s[k];\n        if (a[k]==0) p=k;\n    }\n    if (i==1)\n    {\n        if (p>=1&&p<=3) return false;\n        swap(a[p],a[p-3]);\n    }\n    if (i==2)\n    {\n        if (p>=7&&p<=9) return false;\n        swap(a[p],a[p+3]);\n    }\n    if (i==3)\n    {\n        if (p%3==1) return false;\n        swap(a[p],a[p-1]);\n    }\n    if (i==4)\n    {\n        if (p%3==0) return false;\n        swap(a[p],a[p+1]);\n    }\n    for (int k=1;k<=9;k++)\n      temp[k]=a[k];\n    return true;\n}\nint main()\n{\n    freopen(\"eight.in\",\"r\",stdin);\n    scanf(\"%s\",c);\n    for (int i=1;i<=9;i++)\n      h[1][i]=c[i-1]-'0';\n    vis[cantor(h[1])]=1;\n    while (head<tail)\n    {\n        head++;\n        int num_head=cantor(h[head]);\n        for (int i=1;i<=4;i++)\n        {\n            memset(temp,0,sizeof(temp));\n            if ( move(h[head],i)==false ) continue;//\u5982\u679c\u4e0d\u80fd\u5411\u8fd9\u4e2a\u65b9\u5411\u79fb\u52a8 \n            int num=cantor(temp);\n            if ( vis[num]==1 ) continue;//\u5224\u91cd\n            tail++;\n            for (int k=1;k<=9;k++)\n               h[tail][k]=temp[k];\n            vis[num]=1;\n            g[num]=g[num_head]+1;\n            if (num==46685) \n            {\n                printf(\"%d\",g[num]);\n                return 0;\n            } \n        }\n    }\n}\n\u867d\u8bf4\u5f88\u591a\u65f6\u5019\u5355\u5411BFS\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u5bf9\u4e8e\u8ffd\u6c42\u901f\u5ea6\u66f4\u5feb\uff0c\u6548\u7387\u66f4\u9ad8\u7684OIer\uff0c\u53cc\u5411BFS\u65e0\u7591\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\n```",
        "postTime": 1499936385,
        "uid": 47654,
        "name": "\u79df\u9165\u96e8",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76f4\u63a5\u5355\u5411 BFS \u52a0\u5eb7\u6258\u5c55\u5f00\u5c31\u53ef\u4ee5\u4e86\uff0c \u6700\u6162\u7684\u4e5f\u53ea\u8dd1\u4e86 200\u591a\u4e00\u70b9\u70b9MS\uff1b\n\n\n\u5148\u8bf4\u4e0b\u5728\u8fd9\u9053\u9898\u4e2d\u5eb7\u6258\u5c55\u5f00\u7684\u7528\u9014\uff08\u5177\u4f53\u600e\u4e48\u5c55\u5f00\u53bb\u7f51\u4e0a\u770b\u5427\uff0c\u53ea\u6709\u81ea\u5df1\u770b\u61c2\u4e86\u624d\u662f\u6700\u597d\u7684\uff09\uff1a\n\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u4e2d\u5eb7\u6258\u5c55\u5f00\u7684\u552f\u4e00\u7528\u9014\u5c31\u662f \"\u65b9\u4fbf\u5224\u91cd\"  \uff0c\u5c55\u5f00\u540e\u5f97\u5230\u7684\u4e00\u4e2a\u503c\u53ef\u76f4\u63a5\u5bf9\u5e94\u4e00\u4e2a\u4e0b\u6807\uff0c\u7528 BOOL\u578b\u6570\u7ec4\u5b58\u50a8\u8be5\u72b6\u6001\u662f\u5426\u51fa\u73b0\u8fc7\u5373\u53ef\uff1b\n\n\n\u72b6\u6001\u5b58\u50a8\u6211\u7684\u662f\u7528\u7684\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff08\u5176\u5b9e\u662f2\u7ef4\uff0c\u56e0\u4e3a\u662f\u5e7f\u641c\u8981\u5b58\u50a8\u6bcf\u4e00\u4e2a\u8282\u70b9\uff09\u6765\u5b58\u50a8\u72b6\u6001\uff0c\u600e\u4e48\u4ea4\u6362\u4f4d\u7f6e\u7684\u8bdd\u770b\u4e86\u6211\u7684\u4ee3\u7801\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff1b\n\n\n\u4e0b\u9762\u770b\u4ee3\u7801\u5427\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstdio>\n#include<cstring> \nusing namespace std;\nconst int fac[11]={1,1,2,6,24,120,720,5040,40320,362880};\nint now[999999][11];\nint  step[999999][2];\nint gg[5000000];\nint KT(int a[11])//\u5eb7\u6258\u5c55\u5f00\uff0c\u4e0d\u77e5\u9053\u7684\u7f51\u4e0a\u67e5\n{\n    int num=0;\n    for(int i=0;i<=8;i++)\n    {\n        int k=0;\n        for(int j=i+1;j<=8;j++)\n        {\n            if(a[i]>a[j]){\n                k++;\n            }\n        }\n        num+=k*fac[8-i];\n    }\n    return num;\n}\ninline bool pd(int pos,int how)//\u7528\u6765\u5224\u65ad\u6539\u4f4d\u7f6e\u4ea4\u6362\u65b9\u5f0f\u662f\u5426\u53ef\u884c\uff08\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\uff09\n{\n    switch(how){\n        case 1:\n            if(pos>=3) return 1;\n            else return 0;\n        case 2:\n            if(pos!=0&&pos!=3&&pos!=6) return 1;\n            else return 0;\n        case 3:\n            if(pos!=2&&pos!=5&&pos!=8) return 1;\n            else return 0;\n        case 4:\n            if(pos<=5) return 1;\n            else return 0;\n    }\n}\nvoid bfs()\n{\n    int h=0;int t=1;\n    do{\n        h++;\n        for(int i=1;i<=4;i++)//\u679a\u4e3e\u65b9\u5f0f\uff081\u662f\u4e0a\u79fb\uff08\u7a7a\u4f4d\u7f6e\uff09\uff0c2\u662f\u5de6\u79fb\uff0c3\u662f\u53f3\u79fb\uff0c4\u662f\u4e0b\u79fb\uff09\n        {\n            if(pd(step[h][1],i))\n            {\n                t++;\n                for(int j=0;j<=8;j++)  {now[t][j]=now[h][j];}\n                step[t][0]=step[h][0]+1;//\u8bb0\u5f55\u6b65\u6570\n                step[t][1]=step[h][1]+2*i-5;//\u4f4d\u7f6e\u4ea4\u6362\uff08\u81ea\u5df1\u6a21\u62df\u5c31\u77e5\u9053\u4e86\uff09\n                swap(now[t][step[h][1]],now[t][step[t][1]]);\n                int g=KT(now[t]);//\u8ba1\u7b97\u5eb7\u6258\u5c55\u5f00\u540e\u7684\u6570\u503c\n                if(g==46685){//\u8fd9\u662f\u76ee\u6807\u72b6\u6001\n                    cout<<step[t][0]<<endl;return ;\n                }\n                if(gg[g]) {t--;}//\u53bb\u91cd\n                gg[g]=1;//\u6807\u8bb0\n            }\n        }\n    }while(h<t);\n}\nint main()\n{\n    char x=getchar();int l=0;\n    while(x>'9'||x<'0') x=getchar();\n    while(x>='0'&&x<='9'){//\u8bfb\u5165\n        now[1][l]=x-'0';\n        if(x=='0') {\n            step[1][1]=l;\n        }\n        l++;\n        x=getchar();\n    }\n    step[1][0]=0;\n    bfs();\n    return 0;\n}\n\n```",
        "postTime": 1499917479,
        "uid": 47803,
        "name": "NeosKnight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "### \u6211\u5b9e\u5728\u662f\u592a\u83dc\u4e86\n\n\n## \u8fd9\u9898\u53ef\u884c\u505a\u6cd5(\u4e0d\u4e00\u5b9aAC)\u5e94\u8be5\u662f:\n\n```cpp\n    1.IDA*(\u542f\u53d1\u5f0f\u8fed\u4ee3\u52a0\u6df1)\n\n    2.\u8fed\u4ee3\u52a0\u6df1(\u6211\u83dc\u5230\u5199\u4e0d\u51fa\u542f\u53d1\u5f0f)\n\n    3.bfs\n\n    4.\u53cc\u5411bfs\n```\n## \u8fd8\u6709\u53ef\u884c\u7684\u5224\u91cd:\n\n```cpp\n    1.map(\u65e0\u8111)\n\n    2.hash\n\n    3.\u5eb7\u6258\u5c55\u5f00\n```\n\n### \u7136\u540e\u53ef\u4ee5\u968f\u4fbf\u7ec4\u5408....(\u4e0d\u4fdd\u8bc1\u4e0dTLE\n\n\u5eb7\u6258\u5c55\u5f00,\u9650\u4e8e\u6211\u7684\u6c34\u5e73,\u6ca1\u53bb\u5199~~(\u61d2)~~\n\n\n\u4e0d\u7528\u5eb7\u6258\u5c55\u5f00,\u4e2a\u4eba\u611f\u89c9,\u4e00\u4e2a\u72b6\u6001\u7528int\u5b58\u53ef\u80fd\u4f1a\u6bd4string\u7b49\u7a0d\u5fae\u597d\u4e00\u70b9...\u65b9\u4fbf\u4e00\u70b9,\u6240\u4ee5\u4e09\u4e2a\u7a0b\u5e8f\u90fd\u662f\u8fd9\u6837...\n\n\n## \u6211\u5199\u4e86\u5982\u4e0b\u4e09\u79cd...\u4e11\u5f97\u4e0d\u884c(~~\u6c34\u5e73\u6709\u9650,\u65e0\u6cd5\u4f5c\u6ce8\u91ca~~\u4ec5\u4f9b\u53c2\u8003)\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,x,y) for(int i=(x);i<=(y);i++)\n#define ll long long\nconst int N=10000002,M=1999993,go=123804765,p[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\nint s,h,Hash[2000002],d[N],q[N],t;\nshort int a[N];\nvoid Insert(int x){\n  for(int i=0;1;i++)\n    if(!Hash[(x+i*i)%M]){\n      Hash[(x+i*i)%M]=x;\n      break;\n    }\n}\nbool Query(int x){\n  for(int i=0;1;i++)\n    if(!Hash[(x+i*i)%M]) return 0;\n    else if(Hash[(x+i*i)%M]==x) return 1;\n}\n\nvoid work(int i,int j){\n  int x=p[i],y=p[j],tmp=s-s/y%10*y+s/y%10*x;\n  if(!Query(tmp)){\n    if(tmp==go){\n      cout<<d[h]+1;\n      exit(0);\n    }\n    Insert(tmp);\n    q[++t]=tmp;\n    a[t]=j+1;\n    d[t]=d[h]+1;\n  }\n}\nint main(){\n  cin>>s;\n  q[t=1]=s;\n  for(int i=1;i<=9;i++){\n    if(s%10==0){\n      a[1]=i;//\u4ece\u53f3\u5411\u5de6\u6570\u7b2c\u51e0\u4e2a...\u4f4d \n      break;\n    }\n    s/=10;\n  }\n  \n  while(h<t){\n    s=q[++h];\n    //printf(\"%d %d\\n\",s,a[h]);\n    int i=a[h];\n    if((i-1)%3) work(i-1,i-2);\n    if(i%3) work(i-1,i);\n    if(i>3) work(i-1,i-4);\n    if(i<7) work(i-1,i+2);\n  }\n  return 0;\n}\n```\n\n\n```cpp\n#prag\\\nma GCC optimize (2)\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,x,y) for(int i=(x);i<=(y);i++)\nconst int N=200002,M=1999993,go=123804765,p[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\nint s,h,Hash[M],q[N],f[M],Hash1[M],f1[M],t,t1,q1[N];\nshort int a[N],a1[N],d[N],d1[N];\ninline void Insert(int x,int y){\n  int tmp;\n  for(int i=0;1;i++)\n    if(!Hash[tmp=(x+i*i)%M]){\n      Hash[tmp]=x;\n      f[tmp]=y;\n      break;\n    }\n}\ninline int Query(int x){\n  for(int i=0;1;i++)\n    if(!Hash[(x+i*i)%M]) return 0;\n    else if(Hash[(x+i*i)%M]==x) return f[(x+i*i)%M];\n}\ninline void Insert1(int x,int y){\n  int tmp;\n  for(int i=0;1;i++)\n    if(!Hash1[tmp=(x+i*i)%M]){\n      Hash1[tmp]=x;\n      f1[tmp]=y;\n      break;\n    }\n}\ninline int Query1(int x){\n  for(int i=0;1;i++)\n    if(!Hash1[(x+i*i)%M]) return 0;\n    else if(Hash1[(x+i*i)%M]==x) return f1[(x+i*i)%M];\n}\n\ninline void work(int i,int j){\n  int x=p[i],y=p[j],tmp=s-s/y%10*y+s/y%10*x;\n  if(!Query(tmp)){\n    if(Query1(tmp)){\n      cout<<d[h]+1+Query1(tmp)-2;\n      //cout<<endl<<\"0\"<<tmp<<endl<<(Hash1[tmp%M]==tmp)<<' '<<f1[tmp%M];\n      exit(0);\n    }\n    Insert(tmp,d[h]+1);\n    q[++t]=tmp;\n    a[t]=j+1;\n    d[t]=d[h]+1;\n  }\n}\n\ninline void work1(int i,int j){\n  int x=p[i],y=p[j],tmp=s-s/y%10*y+s/y%10*x;\n  if(!Query1(tmp)){\n    if(Query(tmp)){\n      cout<<d1[h]+1+Query(tmp)-2;\n      exit(0);\n    }\n    Insert1(tmp,d1[h]+1);\n    q1[++t1]=tmp;\n    a1[t1]=j+1;\n    d1[t1]=d1[h]+1;\n  }\n}\nint main(){\n  cin>>s;\n  q[t=1]=s;\n  for(int i=1;i<=9;i++){\n    if(s%10==0){\n      a[1]=i;//\u4ece\u53f3\u5411\u5de6\u6570\u7b2c\u51e0\u4e2a...\u4f4d \n      break;\n    }\n    s/=10;\n  }\n  d[1]=1;\n  Insert(s,1);\n  \n  q1[t1=1]=go;\n  a1[1]=5;\n  d1[1]=1;\n  Insert1(go,1);\n  \n  while(h<t){\n    s=q[++h];\n    int i=a[h];\n    if((i-1)%3) work(i-1,i-2);\n    if(i%3) work(i-1,i);\n    if(i>3) work(i-1,i-4);\n    if(i<7) work(i-1,i+2);\n    \n    s=q1[h];\n    i=a1[h];\n    //printf(\"%d %d\\n\",s,d1[h]);\n    if((i-1)%3) work1(i-1,i-2);\n    if(i%3) work1(i-1,i);\n    if(i>3) work1(i-1,i-4);\n    if(i<7) work1(i-1,i+2);\n  }\n  return 0;\n}\n```\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,x,y) for(int i=(x);i<=(y);i++)\n#define ll long long\nconst int go=123804765;\nint s,h;\nmap<int,int> a;\ninline int w(int x,int y){\n  return x/y%10;\n}\ninline void Swap(int x,int t,int k,int &n,int &d,int tmp[],int v[]){\n  int xt=x/t%10,xk=x/k%10;\n  tmp[++n]=x-xk*k+xk*t;\n  if(a[tmp[n]]&&a[tmp[n]]>d+1){\n    n--;\n    return;\n  }\n  v[n]=(xt==go/t%10)+(xk==go/k%10)-(tmp[n]/t%10==go/t%10)-(tmp[n]/k%10==go/k%10);\n}\nvoid dfs(int s,int d){\n  if(s==go){\n    cout<<d;\n    exit(0);\n  }\n  if(d==h) return;\n  //printf(\"%d %d\\n\",s,d);\n  a[s]=d;\n  int t=1,n=0,tmp[5],v[5];\n  for(int i=9;i;i--){\n    if(s/t%10==0){\n      if((i-1)%3) Swap(s,t,t*10,n,d,tmp,v);\n      if(i%3) Swap(s,t,t/10,n,d,tmp,v);\n      if(i<7) Swap(s,t,t/1000,n,d,tmp,v);\n      if(i>3) Swap(s,t,t*1000,n,d,tmp,v);\n      //for(int j=2;j>=-2;j--)\n        for(int k=1;k<=n;k++) /*if(v[k]==j)*/ dfs(tmp[k],d+1);\n      break;\n    }\n    t*=10;\n  }\n}\nint main(){\n  cin>>s;\n  for(h=1;2333;h++){\n    dfs(s,0);\n    a.clear();\n  }\n  return 0;\n}\n## 1.bfs+hash(\u5171540ms)\u5c45\u7136\u795e\u5947\u5730AC\u4e86\n\n## 2.\u53cc\u5411bfs+hash(115ms,\u52a0\u4e86inline,O2\u4ec0\u4e48\u7684...\u6700\u540e\u4e5f\u5f88\u6162)\n\n## 3.\u8fed\u4ee3\u52a0\u6df1+map(46\u5206,TLE,\u53ef\u4ee5\u8df3\u8fc7\u4e86...)\n\n```",
        "postTime": 1499093373,
        "uid": 21856,
        "name": "Cekavis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0b\u90a3\u4e48\u957f\u7684\u4ee3\u7801\uff0c\u6211\u5c31\u53d1\u4e2a\u77ed\u70b9\u7684\u5427!\n\n\u6240\u9700\u77e5\u8bc6\uff1a\u5eb7\u6258\u5c55\u5f00\uff08\u697c\u4e0b\u6709\u8bb2\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff09\uff0cbfs\uff08\u8fd9\u4e2a\u5e94\u8be5\u6ca1\u4eba\u4e0d\u4f1a\u5427\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n```cpp\n#include<iostream>\n#include<cmath>\nusing namespace std;\nint f[10]= {1,1,2,6,24,120,720,5040,40320};\nint nx[4]= {1,0,0,-1};\nint ny[4]= {0,1,-1,0};\nint fg[500000];\nbool flag=false;\nstruct node\n{\n    int x,y; //\u5750\u6807\n    int fa; \n    int step;\n    int f1[15]; //\u5f53\u524d\u7684\u987a\u5e8f\n} a[500000];\nint c(int a[])  //\u8ba1\u7b97\u5eb7\u6258\u5c55\u5f00\u7684\u503c\n{\n    int sum=0;\n    for(int i=1; i<=9; i++)\n    {\n        int s=0;\n        for(int j=1; j<i; j++)\n            if(a[j]>a[i])\n                s++;\n        sum+=s*f[i-1];\n    }\n    return sum;\n}\nint main()\n{\n    for(int i=1; i<=9; i++)\n    {\n        char x;\n        cin>>x;\n        if(x=='0')\n        {\n            a[0].f1[i]=0;\n            a[0].x=ceil(i/3.0);\n            a[0].y=(i-1)%3+1;\n        }\n        else\n            a[0].f1[i]=x-'0';\n    }\n    int head=0,tail=1;\n    a[0].step=0;\n    while(head<tail) //bfs\n    {\n        for(int k=0; k<=3; k++)\n        {\n            int tx=a[head].x+nx[k],ty=a[head].y+ny[k];\n            if(tx<1||tx>3||ty<1||ty>3)\n                continue;\n            for(int i=1; i<=9; i++) a[tail].f1[i]=a[head].f1[i];\n            swap(a[tail].f1[(a[head].x-1)*3+a[head].y],a[tail].f1[(tx-1)*3+ty]);  //\u6362\u683c\u5b50\n            if(!fg[c(a[tail].f1)])  //\u5982\u679c\u5f53\u524d\u72b6\u6001\u6ca1\u904d\u5386\u8fc7\n            {\n                a[tail].x=tx;\n                a[tail].y=ty;\n                a[tail].fa=head;\n                a[tail].step=a[head].step+1;\n                fg[c(a[tail].f1)]=1;\n                tail++;\n            }\n        }\n        if(c(a[head].f1)==131976)  //131976\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u8fbe\u5230\u7684\u5eb7\u6258\u5c55\u5f00\u503c\n        {\n            cout<<a[head].step;\n            break;\n        }\n        head++;\n    }\n    return 0;\n}\n```",
        "postTime": 1495438079,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u672c\u9898\u53ef\u4ee5\u7528\u53cc\u5411\u5e7f\u641c~~\n\n\u8111\u888b\u6709\u70b9\u70b8\uff0c\u5199\u7684\u4e9b\u5fae\u590d\u6742\uff0c\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n \n\n```cpp\n//\u516b\u6570\u7801\u95ee\u9898\uff0d\u53cc\u5411\u5bbd\u5ea6\u641c\u7d22\u6f14\u793a\u7248 \n#include <iostream>\nusing namespace std;\nint p1,p2,t1,t2,number,x[5];//p\u4e3a\u9996\uff0ct\u4e3a\u5c3e\uff0cnumber\u4e3a\u4ea4\u6362\u7684\u603b\u6b21\u6570 \nstruct node\n{\n  string str;\n  int pre;//\u524d\u5bfc \n}c1[70004],c2[70004];\nint change(int p0)//\u627e\u51fa\u53ef\u4ea4\u6362\u7684\u53ef\u80fd\u6b21\u6570\uff0c\u53ca\u80fd\u4ea4\u6362\u7684\u6240\u5728\u4f4d\u7f6e \n{\n  if(p0==0)\n  { x[1]=1,x[2]=3;return 2;  }\n  else if(p0==1)\n  { x[1]=0,x[2]=2,x[3]=4;return 3; }\n  else if(p0==2)\n  { x[1]=1,x[2]=5;return 2;  }\n  else if(p0==3)\n  { x[1]=0,x[2]=4,x[3]=6;return 3;}\n  else if(p0==4)\n  { x[1]=1,x[2]=3,x[3]=5,x[4]=7;return 4; }\n  else if(p0==5)\n  { x[1]=2,x[2]=4,x[3]=8;return 3; }\n  else if(p0==6)\n  { x[1]=3,x[2]=7;return 2;  }\n  else if(p0==7)\n  { x[1]=4,x[2]=6,x[3]=8;return 3; }\n  else if(p0==8)\n  { x[1]=5,x[2]=7;return 2;  }\n}\nvoid outC1(int v)//\u9012\u5f52\u9006\u5e8f\u8f93\u51fa \n{\n  if(v==1)\n  {\n    number++;\n  }\n  else\n  { \n    outC1(c1[v].pre);\n    number++;\n  }  \n}\nvoid outC2(int v)\n{\n  while(v>=1)\n  {          \n    number++;          \n    v=c2[v].pre;\n  }\n}\nvoid out()\n{\n  outC1(t1);\n  outC2(c2[t2].pre);\n  cout<<number-1<<endl;  \n  exit(0);\n}\nint find(int x,string tmp)//\u67e5\u627e\u672c\u961f\u5217\u6709\u65e0\u91cd\u590d\u7684\u5b57\u7b26\u4e32 \n{\n   int i,k;\n   if(x==1)\n   {\n     for(i=1;i<=t1;i++)\n       if(tmp==c1[i].str)\n         return 1;\n   }\n   if(x==2)\n   {\n     for(i=1;i<=t2;i++)\n       if(tmp==c2[i].str)\n         return 1;     \n   }  \n   return 0;    \n}\nint checkC1(string tmp)//\u68c0\u67e5\u53e6\u4e00\u961f\u5217\u662f\u5426\u6709\u78b0\u5934 \n{\n  int i;\n  for(i=1;i<=t1;i++)\n    if(tmp==c1[i].str)\n    {\n      t1=i;                \n      return 1;\n    }\n  return 0;      \n}\nint checkC2(string tmp)//\u68c0\u67e5\u53e6\u4e00\u961f\u5217\u662f\u5426\u6709\u78b0\u5934 \n{\n  int i;\n  for(i=1;i<=t2;i++)\n    if(tmp==c2[i].str)\n    {\n      t2=i;                \n      return 1;\n    }  \n  return 0;\n}\nvoid addC1()//\u6dfb\u52a0\u961f\u52171 \n{\n  int k,i,pos,v;\n  string tmp,t;\n  k=p1;\n  pos=c1[k].str.find('0',0);//\u627e\u51fa0\u5728\u4f55\u5904 \n  v=change(pos);//\u83b7\u5f97\u53ef\u4ee5\u4ea4\u6362\u7684\u6b21\u6570 \n  for(i=1;i<=v;i++)//\u5c06\u56db\u4e2a\u65b9\u5411\u90fd\u904d\u5386 \n  { \n    tmp=c1[k].str;  //\u4e24\u4e24\u66ff\u6362 \n    t=tmp[x[i]];\n    tmp.replace(pos,1,t);\n    tmp.replace(x[i],1,\"0\");\n    if(find(1,tmp)==0)//\u5982\u679c\u672c\u961f\u5217\u65e0\u8be5\u65b0\u5b57\u7b26\u4e32\uff0c\u5219\u6dfb\u52a0 \n    {\n      t1++;\n      c1[t1].str=tmp;\n      c1[t1].pre=p1;\n      if(checkC2(tmp)==1)//\u5982\u679c\u5728\u53e6\u4e00\u961f\u5217\u78b0\u5934 \n        out(); \n    }   \n  }\n  if(p1<t1)  \n    p1++;    \n} \nvoid addC2()//\u6dfb\u52a0\u961f\u52172 \n{\n  int k,i,pos,v;\n  string tmp,t;\n  k=p2;\n  pos=c2[k].str.find('0',0);\n  v=change(pos);\n  for(i=1;i<=v;i++)//\u5c06\u56db\u4e2a\u65b9\u5411\u90fd\u904d\u5386 \n  { \n    tmp=c2[k].str;  //\u4e24\u4e24\u66ff\u6362 \n    t=tmp[x[i]];\n    tmp.replace(pos,1,t);\n    tmp.replace(x[i],1,\"0\");\n    if(find(2,tmp)==0)//\u5982\u679c\u672c\u961f\u5217\u65e0\u8be5\u5b57\u7b26\u4e32\uff0c\u5219\u6dfb\u52a0\u65b0\u4e32 \n    {\n      t2++;\n      c2[t2].str=tmp;\n      c2[t2].pre=p2;\n      if(checkC1(tmp)==1)//\u5982\u679c\u548c\u53e6\u4e00\u961f\u5217\u91cd\u5408\uff0c\u5219\u6253\u5370\u7ed3\u679c \n        out();\n    }\n  }\n  if(p2<t2)  \n    p2++;    \n} \nint main()\n{ \n  int i;  \n  string start;\n  cin>>start;\n  string goal= \"123804765\";\n  p1=1,p2=1;//\u9996\u6307\u9488 \n  t1=1,t2=1;//\u5c3e\u6307\u9488 \n  c1[1].str=start;//\u4ece\u4e0b\u68071\u5f00\u59cb \n  c1[1].pre=0;\n  c2[1].str=goal;\n  c2[1].pre=0;\n  while(t1<50000 ||t2<50000) \n  {\n    if(t1<=t2 )//\u53cd\u590d\u6269\u5c55\u961f\u5217\uff0c\u961f\u5217\u77ed\u7684\u4f18\u5148\u8003\u8651\n      addC1();\n    else\n      addC2();  \n  }\n  cout<<\"-1\\n\";    \n}\n```",
        "postTime": 1495187631,
        "uid": 22228,
        "name": "\u534a\u4e91_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u6211\u7684\u9898\u89e3\u662f\u6765\u8bf4\u660e\uff0c\u53ea\u8981\u4f60\u4e0d\u5acc\u9ebb\u70e6\uff0c\u4f60\u5c31\u53ef\u80fdAC\n\n\u4f5c\u4e3a\u4e00\u4e2a\u521a\u600e\u4e48\u5b66\u641c\u7d22\u7684\u849f\u84bb\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9898\u8fd8\u662f\u6709\u70b9\u56f0\u96be\u7684\uff0cTLE\u975e\u5e38\u591a\u6b21\uff0c\u76f4\u5230\u6211\u81ea\u5b66\u4e86\u5eb7\u6258\u5c55\u5f00\uff08\u8fd9\u4e0d\u662f\u6253\u5e7f\u544a\uff09\n\n\u5eb7\u6258\u5c55\u5f00\n\n\u5bf9\u4e8eX=a[n]\\*(n-1)!+a[n-1]\\*(n-2)!+...+a[i]\\*(i-1)!+...+a[1]\\*0! \uff0c\u5176\u4e2da[i]\u4e3a\u5f53\u524d\u672a\u51fa\u73b0\u7684\u5143\u7d20\u4e2d\u662f\u6392\u5728\u7b2c\u51e0\u4e2a\uff08\u4ece0\u5f00\u59cb\uff09\u3002\u8fd9\u5c31\u662f\u5eb7\u6258\u5c55\u5f00\u3002\n\n\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5df2\u7ecf\u51fa\u73b0\u7684\u72b6\u6001\uff0c\u4f46\u662f\u7528\u6570\u7ec4\u6765\u8bb0\u65e2\u8d39\u7a7a\u95f4\u53c8\u8d39\u65f6\u95f4\uff0c\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u7b26\u5408\u5168\u6392\u5217\u7684\u7279\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5eb7\u6258\u5c55\u5f00\u8bb0\u5f55\u72b6\u6001\uff0c\u8fd9\u6837\u53ea\u9700\u89819\uff01\u7684note\u7a7a\u95f4  \u503c\u5f97\u6ce8\u610f\u7684\u662f 0\u7684\u9636\u4e58\u662f\u4ec0\u4e48\u4e0d\u7528\u62c5\u5fc3\uff0c\u6211\u521a\u5f00\u59cb\u8fd8\u5947\u602a\u4e3a\u4ec0\u4e480\u7684\u9636\u4e58\u662f1\uff0c\u540e\u6765\u624d\u53d1\u73b0\u5728\u5faa\u73af\u4e2d\uff0c\u4e58\u4ee5fac\u30100\u3011\u7684\u6570\u5b57\u4e00\u5b9a\u662f0\u3002\u5982\u4e0b\u662f\u5eb7\u6258\u5c55\u5f00\u7684\u6a21\u677f \uff08\u516b\u4f4d\u7684\uff09\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int fac[8] = { 1000, 1, 2, 6, 24, 120, 720, 5040 };\nchar c[8];\nint kangtuozhankai(char c[])\n{\n    int len=strlen(c);\n    int ans=0;\n    for(int i=0;i<len;i++)\n    {\n        int tot=0;\n        for(int j=i+1;j<len;j++)\n          if(c[j]<c[i])\n            tot++;\n        ans+=tot*fac[len-1-i];\n    }\n    return ans;\n}\nint main()\n{\n    scanf(\"%s\",c);\n    int zz=kangtuozhankai(c);\n    printf(\"%d\",zz+1);\n    return 0;\n} \n```\n\u53ef\u4ee5\u5c06\u7a7a\u4f4d\u770b\u4f5c\u662f\u96f6\uff0c\u6bcf\u8d70\u4e00\u6b65\u53ef\u4ee5\u770b\u505a\u96f6\u548c\u4ed6\u5468\u56f4\u7684\u67d0\u4e2a\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06\u4e5d\u4e2a\u65b9\u683c\u770b\u505a\u4e00\u4e2a\u7ec4\u6210\u7684\u4e5d\u4f4d\u7684\u6570\uff0c\u7136\u540e\u8fdb\u884c\u5e7f\u641c\u5373\u53ef\u3002\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u7ef4\u6570\u7ec4\u6a21\u62df\u4e8c\u7ef4\u6570\u7ec4\n\u4e4b\u540e\u6211\u53d1\u73b0\u6211\u8fd8\u662f\u6709\u4e2a\u5730\u65b9\u4e0d\u4f1a\uff0c\u56e0\u4e3a\u6211\u8981\u7528\u4e00\u7ef4\u7684\u6570\u7ec4\u6a21\u62df\u4e8c\u7ef4\uff0c\u6240\u4ee5\u5728\u96f6\u548c\u5176\u4ed6\u7684\u4ea4\u6362\u65f6\u7279\u522b\u96be\u53d7\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u8010\u5fc3\u7684\u6211\u53ea\u7528\u4e00\u4e2aswitch\u8bed\u53e5\u5c31\u89e3\u51b3\u4e86\u95ee\u9898\uff08\u4e0d\u8fc7\u957f\u5ea6\u2026\u2026\uff09\n\n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                \n                   \n                   \n                   \n                   \n```cpp\n#include<cstdio>\n#include<iostream> \n#include<string>\n#include<algorithm>\nusing namespace std;\nstruct note{string op;int w0;int step;};\nstring biaozhun(\"123804765\");\nint jiec[10]={1,1,2,6,24,120,720,5040,40320,362880};\nnote train[400000];bool visited[400000];\nint head=0;int tail=0;\nint kangtuozhankai(string a)\n{\n    int ans=0;\n    for(int i=0;i<9;i++)\n    {\n        int tot=0;\n        for(int j=i+1;j<9;j++)\n          if(a[j]<a[i])\n            tot++;\n        ans+=tot*jiec[8-i];\n    }\n    return ans;\n}\nvoid push(string a,int wei,int step)\n{\n    train[tail].op=a;\n    train[tail].w0=wei;\n    train[tail].step=step;\n    tail++;\n    visited[kangtuozhankai(a)]=1;\n}\nint main()\n{\n    string jin;\n    cin>>jin;\n    int where;\n    for(int i=0;i<9;i++)\n      if(jin[i]=='0')\n        where=i;\n    push(jin,where,0);\n    while(head<tail)\n    {\n        note now=train[head];\n        head++;\n        string dang=now.op;\n        int k=now.w0;\n        int s=now.step;\n        if(now.op==biaozhun)\n        {\n            printf(\"%d\",now.step);\n            return 0;\n        }\n        switch(k)\n        {\n            case 0:swap(dang[0],dang[1]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,1,s+1);\n                   swap(dang[0],dang[1]);\n                   swap(dang[0],dang[3]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,3,s+1);\n                   swap(dang[0],dang[3]);\n                   break;\n            case 1:swap(dang[1],dang[0]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,0,s+1);\n                   swap(dang[1],dang[0]);\n                   swap(dang[1],dang[2]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,2,s+1);\n                   swap(dang[1],dang[2]);\n                   swap(dang[1],dang[4]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,4,s+1);\n                   swap(dang[1],dang[4]);\n                   break;\n            case 2:swap(dang[2],dang[1]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,1,s+1);\n                   swap(dang[2],dang[1]);\n                   swap(dang[2],dang[5]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,5,s+1);\n                   swap(dang[2],dang[5]);\n                   break;\n            case 3:swap(dang[3],dang[0]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,0,s+1);\n                   swap(dang[3],dang[0]);\n                   swap(dang[3],dang[4]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,4,s+1);\n                   swap(dang[3],dang[4]);\n                   swap(dang[3],dang[6]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,6,s+1);\n                   swap(dang[3],dang[6]);\n                   break;                \n            case 4:swap(dang[4],dang[1]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,1,s+1);\n                   swap(dang[4],dang[1]);\n                   swap(dang[4],dang[3]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,3,s+1);\n                   swap(dang[4],dang[3]);\n                   swap(dang[4],dang[5]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,5,s+1);\n                   swap(dang[4],dang[5]);\n                   swap(dang[4],dang[7]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,7,s+1);\n                   swap(dang[4],dang[7]);\n                   break;                    \n            case 5:swap(dang[5],dang[2]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,2,s+1);\n                   swap(dang[5],dang[2]);\n                   swap(dang[5],dang[4]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,4,s+1);\n                   swap(dang[5],dang[4]);\n                   swap(dang[5],dang[8]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,8,s+1);\n                   swap(dang[5],dang[8]);\n                   break;\n            case 6:swap(dang[6],dang[7]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,7,s+1);\n                   swap(dang[6],dang[7]);\n                   swap(dang[6],dang[3]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,3,s+1);\n                   swap(dang[6],dang[3]);\n                   break;                \n            case 7:swap(dang[7],dang[6]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,6,s+1);\n                   swap(dang[7],dang[6]);\n                   swap(dang[7],dang[4]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,4,s+1);\n                   swap(dang[7],dang[4]);\n                   swap(dang[7],dang[8]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,8,s+1);\n                   swap(dang[7],dang[8]);\n                   break;                \n            case 8:swap(dang[8],dang[7]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,7,s+1);\n                   swap(dang[8],dang[7]);\n                   swap(dang[8],dang[5]);\n                   if(visited[kangtuozhankai(dang)]==0)\n                     push(dang,5,s+1);\n                   swap(dang[8],dang[5]);\n                   break;\n        }\n    }\n    return 0;\n}\n```\n\u6700\u540e\u795d\u5927\u5bb6\u8eab\u4f53\u5065\u5eb7\uff0c\u8499\u7684\u5168\u5bf9\n",
        "postTime": 1493976128,
        "uid": 39865,
        "name": "fastle",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u53cc\u5411\u5e7f\u641c\u6a21\u677f\u989850ms\n\n\u4e0d\u4f1a\u5eb7\u6258\u5c55\u5f00\u5c31\u9ed8\u9ed8\u7684\u7528map\u6216\u8005hash\u5427\n\n            \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<map>\n#define mp make_pair\nusing namespace std;\nint d[]={-3,-1,1,3};\nstring A,B(\"123804765\");\ninline bool judge(int nx,int ls)\n{\n    if(nx<0||nx>8)return 0;\n    int d=nx-ls;\n    if(d==-1&&(ls==3||ls==6))return 0;\n    if(d==1&&(ls==2||ls==5))return 0;\n    return 1;\n}\nint bfs()\n{\n    queue<pair<string,int> >q1;map<string,int>m1;\n    queue<pair<string,int> >q2;map<string,int>m2;\n    q1.push(mp(A,A.find(\"0\")));q2.push(mp(B,B.find(\"0\")));\n    m1[A]=1,m2[B]=1;\n    while(!q1.empty()&&!q2.empty())\n    {\n        pair<string,int>head=q1.front();q1.pop();\n        pair<string,int>tail=q2.front();q2.pop();\n        string now=head.first,next;\n        if(m2[now])return m1[now]+m2[now]-2;\n        for(int i=0;i<4;i++){\n            int change=head.second+d[i];\n            if(judge(change,head.second)){\n                next=now;\n                next[head.second]=now[change];\n                next[change]='0';\n                if(!m1[next])q1.push(mp(next,change)),m1[next]=m1[now]+1;\n            }\n        }\n        now=tail.first;\n        if(m1[now])return m1[now]+m2[now]-2;\n        for(int i=0;i<4;i++){\n            int change=tail.second+d[i];\n            if(judge(change,tail.second)){\n                next=now;\n                next[tail.second]=now[change];\n                next[change]='0';\n                if(!m2[next])q2.push(mp(next,change)),m2[next]=m2[now]+1;\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    cin>>A;\n    printf(\"%d\",bfs());\nreturn 0;\n}\n```",
        "postTime": 1489288338,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u65e2\u7136\u63d0\u5230\u4e86\u6253\u8868\u90a3\u6211\u4eec\u5c31\u6765\u6109\u5feb\u7684\u6253\u8868\u5427~\n\n\u56e0\u4e3a\u7ec8\u72b6\u6001\u5df2\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u7ec8\u72b6\u6001\u5f00\u59cb\u5f80\u5916\u641c\u4fbf\u53ef\u4ee5\u77e5\u9053\u6240\u6709\u72b6\u6001\u5230\u7ec8\u72b6\u6001\u7684\u8ddd\u79bb\u3002\n\n\u597d\u5427\u6211\u77e5\u9053\u53cc\u5411\u5bbd\u641c\uff0ca\\*\u4ec0\u4e48\u7684\u5f88\u725bb\u3002\u53cd\u6b63\u72b6\u6001\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc79!\u90a3\u5c31\u6253\u8868\u55bd\u3002\n\n\u4e8b\u5b9e\u4e0a\u72b6\u6001\u603b\u6570\u662f181440=9\uff01/2\u3002\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\n\u4f46\u662f\u6211\u7684\u4ee3\u7801\u5728\u5404\u4e2aoj\u90fd\u63d0\u4ea4\u4e0d\u4e86\uff08too long\uff09qoq\u3002\n\n\u7136\u540e\u732e\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n//\u6253\u8868\u673aowo~ \n#include<bits/stdc++.h>\n#define rep(i,s,n) for(int (i)=(s);(i)<=(n);(i)++)\nusing namespace std;\nconst int fac[10]={1,1,2,6,24,120,720,5040,40320,362880},maxn=1000000+7,\n                    mx[4]={0,0,-1,1},my[4]={1,-1,0,0};\nstatic int biao[maxn],vis[maxn];\nint cantor(int x[3][3])\n{\n    int m[10];\n  rep(i,0,2) rep(j,0,2) m[i*3+j+1]=x[i][j];\n    int s=0;\n    for(int i=1;i<=9;++i)\n    {\n        int temp=0;\n        for(int j=i+1;j<=9;++j)\n          if(m[j]<m[i]) ++temp;\n          s+=fac[9-i]*temp;\n    }\n    return s;\n}\nstruct node\n{\n    int x,y;\n}sp[maxn];\nstatic int l,r,q[maxn][3][3],dep[maxn];\nconst int fir[3][3]={1,2,3,8,0,4,7,6,5};\nint main()\n{\n    freopen(\"e:/out.txt\",\"w\",stdout);\n    int kt;\n     memcpy(q[0],fir,sizeof(fir));r=1;\n     sp[0].x=1;sp[0].y=1;kt=cantor(q[0]);biao[kt]=0;\n     vis[kt]=1;\n     while(l<r)\n     {\n         int u[3][3],v[3][3];node vsp,usp;\n         memcpy(u,q[l],sizeof(u));usp=sp[l];\n         rep(i,0,3)\n         {\n             memcpy(v,u,sizeof(u));vsp.x=usp.x+mx[i];vsp.y=usp.y+my[i];\n             if(vsp.x<0||vsp.y<0||vsp.x>2||vsp.y>2) continue;\n             swap(v[usp.x][usp.y],v[vsp.x][vsp.y]);\n             kt=cantor(v);\n             if(!vis[kt])\n             {\n                 vis[kt]=1;\n                 memcpy(q[r],v,sizeof(v));\n                 dep[r]=dep[l]+1;\n                 biao[kt]=dep[r];\n                 sp[r++]=vsp;\n          }\n      }\n      ++l;\n  }\n  rep(i,0,fac[9]-1) printf(\"%d,\",biao[i]);\n  printf(\"%d\",biao[fac[9]]);\n  return 0;\n}//by fjlyyz-ljy\n```",
        "postTime": 1476712626,
        "uid": 17378,
        "name": "Vin_1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u4ee3\u7801\u4e0d\u957f\uff0c\u4f46\u597d\u61c2\u2026\u2026\u5417\u2026\u2026\n\n\u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u6253\u8868\uff0c\u5982\u679c\u4e0d\u5e26\u4efb\u4f55\u6280\u5de7\u76f4\u63a5\u679a\u4e3e\u7684\u8bdd\uff0c\u4e00\u5171\u6709362880\u884c\u2026\u2026\n\n\u65b9\u6cd5\u4e00\uff1abfs+hash\n\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<string>\nusing namespace std;\nstring qs[3000000],data[1000007],s,c,a,b=\"123804765\",gz[9]={\"13\",\"024\",\"15\",\"046\",\"1357\",\"248\",\"37\",\"468\",\"57\"};\nint sum,list[1000007]={0},next[1000007]={0},u,tim[3000000],head=0,tail=1,cnt=0,t,x,p,i,j;\nint hash(string h)\n{\n    sum=0;\n    for(i=0;i<h.size();i++){sum=sum*33+h[i];}//\u5fae\u5c0f\u7684\u5904\u7406\n    sum=abs(sum%1000007),u=list[sum];\n    while(u){if(data[u]==h){return 0;}u=next[u];}//\u5982\u679c\u51fa\u73b0\u8fc7\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u627e\u5230\u6700\u540e\u4e00\u4e2a\uff0c\u8fd4\u56de1\u5e76\u4e14\u8fdb\u5165\u5230\u94fe\n    data[++cnt]=h,next[cnt]=list[sum],list[sum]=cnt;\n    return 1;\n}\nvoid jh(int x,int y){char t=s[x];s[x]=s[y],s[y]=t;}//\u4e24\u4e2a\u4f4d\u7f6e\u4ea4\u6362\nint main()\n{\n    cin>>a;\n    if(a==b){cout<<\"0\";return 0;}//\u7279\u5224\uff0c\u867d\u7136\u597d\u50cf\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\n    qs[1]=a,tim[1]=0;\n    while(head<tail)\n    {\n        head++,c=qs[head],t=tim[head],x=c.find(\"0\",0);//\u62d6\u51fa\u72b6\u6001\uff0c\u627e\u52300\u7684\u4f4d\u7f6e\n        for(j=0;j<gz[x].size();j++)\n        {\n            s=c,p=gz[x][j]-48;jh(x,p);//\u4ea4\u6362\n            if(s==b){cout<<t+1;return 0;}//\u5982\u679c\u662f\u76ee\u6807\u60c5\u51b5\uff0c\u8f93\u51fa\n            if(hash(s)){tail++,qs[tail]=s,tim[tail]=t+1;}//\u5982\u679c\u6ca1\u51fa\u73b0\u8fc7\uff0c\u8fdb\u961f\n        }\n    }\n    return 0;\n}\n```\n\u65b9\u6cd5\u4e8c\uff1a\u6253\u8868\n\u4e5d\u4f4d\uff0cint\u90fd\u80fd\u5b58\u5f97\u4e0b\u2026\u2026\n\n\u611f\u53d7\u5230\u8d85\u957f\u5ea6\u7684\u6050\u60e7\u4e86\u5417\u2026\u2026\n",
        "postTime": 1475488176,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u6211\u77e5\u9053\u4ee3\u7801\u5f88\u957f\uff0c\u4f46\u662f\u5404\u4f4d\u5fcd\u4e00\u4e0b\uff0c\u6709\u6ce8\u91ca\uff0c\u6709\u5927\u91cf\u91cd\u590d\u53ef\u4ee5\u8df3\u8fc7\u3002\n\n\u6548\u7387\u8f83\u9ad8\uff0c102ms\u8fc7\u3002\n\n\u57fa\u672c\u601d\u8def\uff1a\u53cc\u5411\u5bbd\u641c+Contor\u9a8c\u91cd\u3002\n\n/\\*\nP1379\nAu:H15teve\n\n\\*/\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\nusing namespace std;\nint n0l=0,n0r=0,n1l=0,n1r=0;//\u5728\u5f53\u524d\u6df1\u5ea6\u65f6\u961f\u5217\u7684\u8303\u56f4\uff0c\u6bd4\u5982time=3,\u5bf9\u5e94\u76840\u961f\u5217\u5de6\u754cn0l=7,\u53f3\u754cn0r=11\u4e4b\u7c7b \nstruct queue\n{\n    queue(): cont(-1) {}\n    int a[3][3],cont,x,y,depth;\n    bool flag;\n}map[400000][2];//\u7ed3\u6784\u4f53\u5f53\u4e2d\u5b58\u7684\u662f\u672cContor\u503c\u6240\u5bf9\u5e94\u7684\u6392\u5217\uff08a)\uff0c0\u70b9\u4f4d\u7f6e\uff08x,y\uff09\uff0c\u64cd\u4f5c\u6b65\u6570\uff08depth\uff09\uff0c\u662f\u5426\u6709\u70b9 \uff08bool\uff0c\u5b9e\u9645\u4e0a\u4e0d\u5fc5\u8981\uff0c\u68c0\u67e5cont\u5373\u53ef\u4f46\u662f\u6211\u61d2\u5f97\u6539\u4e86...\uff09 \n//cont\u5b58\u7684\u662f\u961f\u5217\u5f53\u4e2d\u5bf9\u5e94\u7f16\u53f7\u7684Contor\u503c\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff01 \u56e0\u4e3a\u662f\u53cc\u5411\u5bbd\u641c\uff0c\u6240\u4ee5map\u7684\u7b2c\u4e8c\u4e2a\u53c2\u65700\u6307\u7684\u662f\u4ece\u8f93\u5165\u72b6\u6001\u51fa\u53d1\uff0c1\u6307\u7684\u662f\u4ece123804765\u51fa\u53d1 \nint contor(int m[3][3])\n{\n    int fac[9]={1,1,2,6,24,120,720,5040,40320},ans=0;\n    for (int i=0;i<=8;i++)\n    {\n        int tmp=0;\n        for (int j=i+1;j<=8;j++)\n          if (m[i/3][i%3]>m[j/3][j%3]) tmp++;\n        ans+=tmp*fac[8-i];\n    }\n    return ans;\n```\n}//\u8ba1\u7b97Contor\u503c\n\nbool check(int hash,int mode)\n\n{\n    return map[hash][mode].flag?1:0;\n\n}//\u9a8c\u91cd\n\n\n```cpp\nvoid copy(int m[3][3],int mode,int contcode)\n{\n    for (int i=0;i<=2;i++)\n      for (int j=0;j<=2;j++)\n      {\n            map[contcode][mode].a[i][j]=m[i][j];\n            if (m[i][j]==0) map[contcode][mode].x=i,map[contcode][mode].y=j;\n      }\n    map[contcode][mode].flag=1;   \n```\n}//\u610f\u4e49\u5982\u5176\u540d\n\nvoid godie(int depth1,int depth2)\n\n{\n    printf(\"%d\",depth1+depth2);\n\n}//\u8f93\u51fa\n\n\n```cpp\nint main()\n{\n    char start;\n    int tmp[3][3],a,b,tmpcont;\n    for (int i=0;i<=8;i++) \n    {\n        scanf(\"%c\",&start),tmp[i/3][i%3]=start-'0';\n        if (start=='0') a=i/3,b=i%3;\n    }\n    tmpcont=contor(tmp),map[0][0].cont=tmpcont,map[tmpcont][0].flag=1,map[tmpcont][0].x=a,map[tmpcont][0].y=b;\n    for (int i=0;i<=2;i++)\n      for (int j=0;j<=2;j++)\n        map[tmpcont][0].a[i][j]=tmp[i][j];\n    map[46685][1].a[0][0]=1,map[46685][1].a[0][1]=2,map[46685][1].a[0][2]=3,\n    map[46685][1].a[1][0]=8,map[46685][1].a[1][1]=0,map[46685][1].a[1][2]=4,\n    map[46685][1].a[2][0]=7,map[46685][1].a[2][1]=6,map[46685][1].a[2][2]=5;\n    map[0][1].cont=46685,map[46685][1].flag=1,map[46685][1].x=1,map[46685][1].y=1;\n    if(check(tmpcont,1))\n        {\n            godie(0,map[46685][1].depth);\n            return 0;\n        }\n    //\u521d\u59cb\u5316\u3002123804765\u7684Contor\u503c\u662f46685 \n    int time=0;\n    while (1)\n    {\n        int lf=n0l,rf=n0r,now=0;\n        time++;//\u6df1\u5ea6 \n        for (int i=lf;i<=rf;i++)\n        {\n```\n/\\*\n\u4ee5\u4e0b\u6709\u516b\u4e2aif\uff0c\u5206\u522b\u5bf9\u5e94\u7684\u662f\u53cc\u5411\u5bbd\u641c\u4e0a\u4e0b\u5de6\u53f3\u5171\u516b\u79cd\u72b6\u6001\u3002\n\n\u9996\u5148\u628a\u5f53\u524d\u72b6\u6001\u88c5\u5230temp\u4e2d\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u4e0a\u4e0b\u5de6\u53f3\u5904\u7406\uff08swap\uff09\uff0c\u8ba1\u7b97Contor\u503c\uff0c\u9a8c\u91cd\uff08\u5df1\u65b9\u4e3a\u91cd\uff0c\u5bf9\u65b9\u4e3a\u7b54\u6848\uff09\uff0c\u65e0\u91cd\u590d\u5236\u4e22\u8fdb\u961f\u5217\u3002\n\n\\*/\n```cpp\n            int temp[4][3][3];\n            if(map[map[i][0].cont][0].x>0)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[0][j][k]=map[map[i][0].cont][0].a[j][k];\n                swap(temp[0][map[map[i][0].cont][0].x-1][map[map[i][0].cont][0].y],temp[0][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y]);\n                tmpcont=contor(temp[0]);\n                if(!check(tmpcont,0))\n                {\n                    if(check(tmpcont,1))\n                    {\n                        godie(time,map[tmpcont][1].depth);\n                         return 0;\n                    }\n                    copy(temp[0],0,tmpcont);\n                    map[tmpcont][0].depth=time,map[++now+rf][0].cont=tmpcont;\n                }\n            }\n            if(map[map[i][0].cont][0].x<2)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[1][j][k]=map[map[i][0].cont][0].a[j][k];\n                swap(temp[1][map[map[i][0].cont][0].x+1][map[map[i][0].cont][0].y],temp[1][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y]);\n                tmpcont=contor(temp[1]);\n                if(!check(tmpcont,0))\n                {\n                    if(check(tmpcont,1))\n                    {\n                        godie(time,map[tmpcont][1].depth);\n                        return 0;\n                    }\n                    copy(temp[1],0,tmpcont);\n                    map[tmpcont][0].depth=time,map[++now+rf][0].cont=tmpcont;\n                }\n            }\n            if(map[map[i][0].cont][0].y>0)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[2][j][k]=map[map[i][0].cont][0].a[j][k];\n                swap(temp[2][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y-1],temp[2][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y]);\n                tmpcont=contor(temp[2]);\n                if(!check(tmpcont,0))\n                {\n                    if(check(tmpcont,1))\n                    {\n                        godie(time,map[tmpcont][1].depth);\n                        return 0;\n                    }\n                    copy(temp[2],0,tmpcont);\n                    map[tmpcont][0].depth=time,map[++now+rf][0].cont=tmpcont;\n                }\n            }\n            if(map[map[i][0].cont][0].y<2)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[3][j][k]=map[map[i][0].cont][0].a[j][k];\n                swap(temp[3][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y+1],temp[3][map[map[i][0].cont][0].x][map[map[i][0].cont][0].y]);\n                tmpcont=contor(temp[3]);\n                if(!check(tmpcont,0))\n                {\n                    if(check(tmpcont,1))\n                    {\n                        godie(time,map[tmpcont][1].depth);\n                        return 0;\n                    }\n                    copy(temp[3],0,tmpcont);\n                    map[tmpcont][0].depth=time,map[++now+rf][0].cont=tmpcont;\n                }\n            }\n        }\n        n0l=n0r+1;n0r+=now;\n        lf=n1l,rf=n1r,now=0;\n        for (int i=lf;i<=rf;i++)\n        {\n            int temp[4][3][3];\n            if(map[map[i][1].cont][1].x>0)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[0][j][k]=map[map[i][1].cont][1].a[j][k];\n                swap(temp[0][map[map[i][1].cont][1].x-1][map[map[i][1].cont][1].y],temp[0][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y]);\n                tmpcont=contor(temp[0]);\n                if(!check(tmpcont,1))\n                {\n                    if(check(tmpcont,0))\n                    {\n                        godie(time,map[tmpcont][0].depth);\n                        return 0;\n                    }\n                    copy(temp[0],1,tmpcont);\n                    map[tmpcont][1].depth=time,map[++now+rf][1].cont=tmpcont;\n                }\n            }\n            if(map[map[i][1].cont][1].x<2)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[1][j][k]=map[map[i][1].cont][1].a[j][k];\n                swap(temp[1][map[map[i][1].cont][1].x+1][map[map[i][1].cont][1].y],temp[1][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y]);\n                tmpcont=contor(temp[1]);\n                if(!check(tmpcont,1))\n                {\n                    if(check(tmpcont,0))\n                    {\n                        godie(time,map[tmpcont][0].depth);\n                        return 0;\n                    }\n                    copy(temp[1],1,tmpcont);\n                    map[tmpcont][1].depth=time,map[++now+rf][1].cont=tmpcont;\n                }\n            }\n            if(map[map[i][1].cont][1].y>0)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[2][j][k]=map[map[i][1].cont][1].a[j][k];\n                swap(temp[2][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y-1],temp[2][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y]);\n                tmpcont=contor(temp[2]);\n                if(!check(tmpcont,1))\n                {\n                    if(check(tmpcont,0))\n                    {\n                        godie(time,map[tmpcont][0].depth);\n                        return 0;\n                    }\n                    copy(temp[2],1,tmpcont);\n                    map[tmpcont][1].depth=time,map[++now+rf][1].cont=tmpcont;\n                }\n            }\n            if(map[map[i][1].cont][1].y<2)\n            {\n                for(int j=0;j<=2;j++)\n                  for (int k=0;k<=2;k++)\n                    temp[3][j][k]=map[map[i][1].cont][1].a[j][k];\n                swap(temp[3][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y+1],temp[3][map[map[i][1].cont][1].x][map[map[i][1].cont][1].y]);\n                tmpcont=contor(temp[3]);\n                if(!check(tmpcont,1))\n                {\n                    if(check(tmpcont,0))\n                    {\n                        godie(time,map[tmpcont][0].depth);\n                        return 0;\n                    }\n                    copy(temp[3],1,tmpcont);\n                    map[tmpcont][1].depth=time,map[++now+rf][1].cont=tmpcont;\n                }\n            }\n        }\n        n1l=n1r+1;n1r+=now;\n    }\n    return 0;\n}\n```",
        "postTime": 1475074428,
        "uid": 595,
        "name": "H15teve",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    },
    {
        "content": "\u5176\u5b9e\u53ef\u4ee5\u7528\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u4e0d\u9760\u8c31\u7684\u4f30\u4ef7\u51fd\u6570 A\\*\u6c34\u8fc7\u8fd9\u9053\u9898 \u4ee3\u7801\u975e\u5e38\u7b80\u5355\n\n\u6bd4\u8f83\u5f53\u524d\u72b6\u6001\u4e0e\u76ee\u6807\u72b6\u6001 \u5982\u679c\u6709cnt\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u4e0d\u4e00\u6837\n\n\u5f53\u524d\u6b65\u6570+cnt\u5982\u679c\u8d85\u8fc7\u4e86\u8fed\u4ee3\u52a0\u6df1\u7684\u65f6\u5019\u5b9a\u7684\u6b65\u6570\u5c31\u76f4\u63a5\u8fd4\u56de\n\n\u597d\u9669 \u6700\u540e\u4e00\u4e2a\u70b9\u5dee\u70b9\u5c31T\u4e86hhhh\n\n[codec]\n\n\n\n                   \n\n\n    \n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int T[3][3]={{1,2,3},\n                   {8,0,4},\n                   {7,6,5}};\nconst int DX[]={1,-1,0,0},DY[]={0,0,-1,1};\nint s[3][3],k=0,flag=0;\nint end() {\n    for (int i=0;i<3;++i)\n        for (int j=0;j<3;++j)\n            if (s[i][j]!=T[i][j])\n                return 0;\n    return 1;    \n}\nint judge(int step) {\n    int cnt=0;\n    for (int i=0;i<3;++i)\n        for (int j=0;j<3;++j)\n            if (s[i][j]!=T[i][j]) {\n                ++cnt;\n                if (cnt+step>k)\n                    return 0;\n            }\n    return 1;\n}\n#define X x+DX[i]\n#define Y y+DY[i]\nvoid dfs(int step) {\n    if (step>k || flag)\n        return;\n    if (end()) {\n        flag=1;\n        return;\n    }\n    int x=0,y=0;\n    for (int i=0;i<3;++i)\n        for (int j=0;j<3;++j)\n            if (!s[i][j]) {\n                x=i;\n                y=j;\n                break;\n            }\n    for (int i=0;i<4;++i)\n        if (X>=0 && Y>=0 && X<3 && Y<3) {\n            swap(s[x][y],s[X][Y]);\n            if (judge(step))\n                dfs(step+1);\n            swap(s[X][Y],s[x][y]);\n        }\n}\n```\n#undef X\n#undef Y\n\n\n```cpp\nint main(void) {\n    char s0[233];\n    scanf(\"%s\",s0);\n    for (int i=0;i<9;++i) \n        s[i/3][i%3]=s0[i]-'0';\n    while (!flag) {\n        flag=0;\n        ++k;\n        dfs(0);\n    }\n    printf(\"%d\\n\",k);\n    return 0;\n} \n[/codec]\n```",
        "postTime": 1476758568,
        "uid": 13433,
        "name": "QwQ2000",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1379 \u3010\u516b\u6570\u7801\u96be\u9898\u3011"
    }
]