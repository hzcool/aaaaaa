[
    {
        "content": "[\u63a8\u5e7f\u6211\u7684\u535a\u5ba2](https://cnyali-lk.com)\n\n\u8fd9\u9898\u771f\u662f666.\n\n\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6a21\u62df\u53e6\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff1a\n\n1. \u63d2\u5165\u7684\u65f6\u5019\uff0c\u9996\u5148\u627e\u5230\u5b83\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5728spaly\u4e2d\u5b83\u4eec\u663e\u7136\u662f\u8fde\u7eed\u7684\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230\u6df1\u7684\u90a3\u4e2a\u628a\u65b0\u8282\u70b9\u63a5\u5728\u5b83\u4e0b\u9762\u3002\n\n2. \u5355\u65cb\u6700\u5c0f\u6700\u5927\u503c\uff0c\u5c31\u662f\u628a\u5b83\u7684\u513f\u5b50\u76f4\u63a5\u63a5\u5230\u7236\u4eb2\u4e0a\uff0c\u5e76\u4e14\u628a\u5b83\u53d6\u51fa\u6765\uff0c\u628a\u539f\u6811\u6302\u5728\u5b83\u4e0b\u9762\uff0c\u6b64\u65f6\u5b83\u7684\u5b50\u6811\u4ee5\u5916\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u90fd+1\u4e86\u3002\n\n3. \u5220\u9664\u6700\u5927\u6700\u5c0f\u503c\uff0c\u5c31\u662f\u628a\u5b83\u7684\u513f\u5b50\u76f4\u63a5\u63a5\u5230\u7236\u4eb2\u4e0a\uff0c\u5e76\u628a\u5b83\u6254\u6389\uff0c\u6b64\u65f6\u5b83\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u90fd-1\u4e86\u3002\n\n\u53d1\u73b0\u70b9\u6743\u4e92\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u7528\u79bb\u6563\u5316\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6df1\u5ea6\u548c\u8ba1\u7b97\u524d\u9a71\u540e\u7ee7\uff08\u5c31\u662f\u7ef4\u62a4\u5173\u952e\u7801\u4e3akey\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4ee5\u53ca\u5b58\u4e0d\u5b58\u5728\uff09\n\n\u5f53\u7136\u4e5f\u5f97\u6a21\u62df\u51fa\u8fd9\u68f5\u6811\u7684\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\u3002\n``` C++\n/*\nAuthor: CNYALI_LK\nLANG: C++\nPROG: 3721.cpp\nMail: cnyalilk@vip.qq.com\n*/\n#include<bits/stdc++.h>\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define DEBUG printf(\"Passing [%s] in LINE %d\\n\",__FUNCTION__,__LINE__)\n#define Debug debug(\"Passing [%s] in LINE %d\\n\",__FUNCTION__,__LINE__)\n#define all(x) x.begin(),x.end()\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntemplate<class T>int chkmin(T &a,T b){return a>b?a=b,1:0;}\ntemplate<class T>int chkmax(T &a,T b){return a<b?a=b,1:0;}\ntemplate<class T>T sqr(T a){return a*a;}\ntemplate<class T>T mmin(T a,T b){return a<b?a:b;}\ntemplate<class T>T mmax(T a,T b){return a>b?a:b;}\ntemplate<class T>T aabs(T a){return a<0?-a:a;}\n#define min mmin\n#define max mmax\n#define abs aabs\nint read(){\n\tint s=0,base=1;\n\tchar c;\n\twhile(!isdigit(c=getchar()))if(c=='-')base=-base;\n\twhile(isdigit(c)){s=s*10+(c^48);c=getchar();}\n\treturn s*base;\n}\nchar WriteIntBuffer[1024];\ntemplate<class T>void write(T a,char end){\n\tint cnt=0,fu=1;\n\tif(a<0){putchar('-');fu=-1;}\n\tdo{WriteIntBuffer[++cnt]=fu*(a%10)+'0';a/=10;}while(a);\n\twhile(cnt){putchar(WriteIntBuffer[cnt]);--cnt;}\n\tputchar(end);\n}\nint type[102424],lsh[102424],w[102424],t,ds;\nstruct smt{\n\tsmt *l,*r;\n\tint cnt,add,_l,_r;\n\tsmt(int l_,int r_){\n\t\t_l=l_;_r=r_;\n\t\tif(l_!=r_){\n\t\t\tint mid=(_l+_r)>>1;\t\n\t\t\tl=new smt(l_,mid);\n\t\t\tr=new smt(mid+1,r_);\n\t\t}\n\t\tcnt=0;\n\t}\n\tvoid upd(int x,int s){\n\t\tcnt+=s;\n\t\tif(_l<_r)if(x<r->_l)l->upd(x,s);\n\t\telse r->upd(x,s);\n\t}\n\tvoid _add(int l_,int r_,int w){\n\t\tif(l_<=_l&&_r<=r_){\n\t\t\tadd+=w;\n\t\t\treturn;\n\t\t} if(l_<=l->_r)l->_add(l_,r_,w);\n\t\tif(r_>=r->_l)r->_add(l_,r_,w);\n\t}\n\tint prev(int x){\n\t\tif((!cnt)||x<_l)return 0;\n\t\tif(_l==_r)return _l;\n\t\tint s=r->prev(x);\n\t\treturn s?s:l->prev(x);\t\n\t}\n\tint next(int x){\n\t\tif((!cnt)||_r<x)return 0;\n\t\tif(_l==_r)return _l;\n\t\tint s=l->next(x);\n\t\treturn s?s:r->next(x);\n\t}\n\tint height(int x){\n\t\tif(!x)return 0;\n\t\tif(_l==_r)return add;\n\t\tif(x<=l->_r)return add+l->height(x);\n\t\telse return add+r->height(x);\n\t}\n};\nsmt *root;\nint fa[102424],son[102424][2],ps,_root;\nvoid insert(int x){\n\tfa[x]=son[x][0]=son[x][1]=0;\n\tif(!ps){\n\t\troot->_add(x,x,1-root->height(x));\n\t\t_root=x;\n\t\t++ps;\n\t\twrite(1,'\\n');\n\t}\n\telse{\n\t\t++ps;\n\t\tint sl=root->prev(x),sr=root->next(x);\n\t\tint hl=root->height(sl),hr=root->height(sr);\n\t\tif(hl<hr){\n\t\t\tfa[x]=sr;\n\t\t\tson[sr][0]=x;\n\t\t\troot->_add(x,x,hr+1-root->height(x));\n\n\t\t\tprintf(\"%d\\n\",hr+1);\n\t\t}\n\t\telse{\n\t\t\tfa[x]=sl;\n\t\t\tson[sl][1]=x;\n\t\t\troot->_add(x,x,hl+1-root->height(x));\n\t\t\tprintf(\"%d\\n\",hl+1);\n\t\t}\n\t}\n\troot->upd(x,1);\n}\nvoid splay_min(){\n\tint x=root->next(1);\n\tif(_root==x){printf(\"1\\n\");return;}\n\telse{\n\t\tint w;\n\t\tprintf(\"%d\\n\",w=root->height(x));\n\t\troot->_add(x,x,1-w);\n\t\tson[fa[x]][0]=son[x][1];\n\t\tfa[son[x][1]]=fa[x];\n\t\troot->_add(fa[x],t,1);\n\t\tson[fa[_root]=x][1]=_root;\n\t\t_root=x;\n\t}\n}\nvoid splay_max(){\n\tint x=root->prev(t);\n\tif(_root==x)printf(\"1\\n\");\n\telse{\n\t\tint w=root->height(x);\n\t\tprintf(\"%d\\n\",w);\n\t\troot->_add(x,x,1-w);\n\t\tson[fa[x]][1]=son[x][0];\n\t\tfa[son[x][0]]=fa[x];\n\t\troot->_add(1,fa[x],1);\n\t\tson[fa[_root]=x][0]=_root;\n\t\t_root=x;\n\t}\n}\nvoid remove_min(){\n\tint x=root->next(1);\n\tif(x==_root){\n\t\tfa[_root=son[x][1]]=0;\n\t\troot->_add(1,t,-1);\n\t\tprintf(\"1\\n\");\n\t}\n\telse{\n\t\tprintf(\"%d\\n\",root->height(x));\n\t\troot->_add(x+1,fa[x]-1,-1);\t\n\t\tfa[son[x][1]]=fa[x];\n\t\tson[fa[x]][0]=son[x][1];\n\t}\n\n\troot->upd(x,-1);\n}\n\nvoid remove_max(){\n\tint x=root->prev(t);\n\tif(x==_root){\n\t\tfa[_root=son[x][0]]=0;\n\t\troot->_add(1,t,-1);\n\t\tprintf(\"1\\n\");\n\t}\n\telse{\n\t\tprintf(\"%d\\n\",root->height(x));\n\t\troot->_add(fa[x]+1,x-1,-1);\t\n\t\tfa[son[x][0]]=fa[x];\n\t\tson[fa[x]][1]=son[x][0];\n\t}\n\n\troot->upd(x,-1);\n}\nint main(){\n#ifdef cnyali_lk\n\tfreopen(\"3721.in\",\"r\",stdin);\n\tfreopen(\"3721.out\",\"w\",stdout);\n#endif\n\tint n;\n\tn=read();\n\tfor(int i=n;i;--i){\n\t\ttype[i]=read();\n\t\tif(type[i]==1){\n\t\t\tlsh[++t]=w[i]=read();\n\t\t}\n\t}\n\tsort(lsh+1,lsh+t+1);\n\tfor(int i=1;i<=n;++i){\n\t\tif(type[i]==1){w[i]=lower_bound(lsh+1,lsh+t+1,w[i])-lsh;}\n\t}\n\troot=new smt(1,t);\n\n\twhile(n){\n\t\tif(type[n]==1){\n\t\t\tinsert(w[n]);\n\t\t}\n\t\telse if(type[n]==2){\n\t\t\tsplay_min();\n\t\t}\n\t\telse if(type[n]==3){\n\t\t\tsplay_max();\n\t\t}\n\t\telse if(type[n]==4){\n\t\t\tremove_min();\n\t\t}\n\t\telse{\n\t\t\tremove_max();\n\t\t}\n\t\t--n;\n\t}\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1522921093,
        "uid": 8943,
        "name": "\u8001K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u6807\u7b7e\uff1a\u7ebf\u6bb5\u6811+set\n\n\u9898\u89e3\uff1a\n\n\u6b64\u9898\u7684\u6807\u9898\u4e3asplay\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6392\u9664\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u662fsplay\u7684\u53ef\u80fd\u6027\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u6700\u503c\u7684\u5355\u65cb\uff0c\u800c\u4e14\uff0c\u4e09\u70b9\u4e00\u7ebf\u4e0d\u9700\u8981\u5148\u65cb\u8f6c\u7236\u4eb2\u3002\u901a\u8fc7\u624b\u73a9\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5c31\u662f\u628a\u6700\u503c\u76f4\u63a5\u79fb\u5230\u6700\u9876\u7aef\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u5176\u4ed6\u7684\u70b9\u4ee5\u53ca\u4ed6\u4eec\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\u5168\u90e8\u90fd\u6ca1\u6709\u53d8\u5316\u3002\u4e8e\u662f\u5c31\u53ea\u8981\u6c42\u6df1\u5ea6\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6700\u5c0f\u503c\uff0c\u4ed6\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u800c\u53f3\u5b50\u6811\u5728\u5355\u65cb\u4e4b\u540e\u6df1\u5ea6\u4e0d\u53d8\uff08-1+1\uff09\uff0c\u800c\u5176\u4ed6\u7684\u70b9\u6df1\u5ea6\u5168\u90e8+1\u3002\u5982\u679c\u518d\u5220\u6389\u6839\u8282\u70b9\uff0c\u5168\u90e8\u7684\u70b9\u6df1\u5ea6-1\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u9996\u5148\u8f93\u5165\u6240\u6709\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u5168\u90e8\u7684\u503c\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u5c31\u662f\u5bf9\u5e94\u79bb\u6563\u5316\u4e4b\u540e\u7684\u70b9\u7684\u6df1\u5ea6\u3002\n\n\u6700\u5c0f\u503cx\uff0c\u4ed6\u7684\u53f3\u5b50\u6811\u7684\u8303\u56f4\u4e3a[x+1,fa]\u3002\u4e8e\u662f\u6211\u4eec\u5bf9\u8fd9\u6bb5\u533a\u95f4-1\uff0c\u5bf9\u5168\u90e8\u533a\u95f4+1\u3002\u7136\u540e\u5c06x\u6df1\u5ea6\u4fee\u6539\u4e3a1\u3002\u6700\u5927\u503c\u7c7b\u4f3c\u3002\u5982\u679c\u8981\u5220\u9664\uff0c\u5168\u90e8\u533a\u95f4-1\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u4e0d\u597d\u63d2\u5165\uff0c\u5177\u4f53\u6765\u8bf4\u5e94\u8be5\u662f\u5bf9\u4e8ex\uff0c\u4ed6\u7684fa\u4e0d\u597d\u627e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bb0\u4e0b\u6765\u3002\u7136\u540e\u5728\u63d2\u5165\u7684\u65f6\u5019\uff0c\u540c\u65f6\u63d2\u5165\u5230set\u4e2d\uff0c\u5229\u7528set\u6765\u627efa\u3002\u5982\u679c\u63d2\u5165\u7684\u4e0d\u662f\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u53ef\u80fd\u4e3a\u53f3\u5b50\u6811\uff0c\u6211\u4eec\u5c31\u628ait--\uff0c\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u6709\u53f3\u513f\u5b50\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u627e\u5230\u7236\u4eb2\u4e86\u3002\u5426\u5219\uff0c\u518d\u627e\uff08it++\uff09++\u3002\u8fd9\u4e2a\u5c31\u662f\u4ed6\u7684\u7236\u4eb2\uff0c\u7136\u540e\u6807\u8bb0\u597d\u3002\n\nset\u7684insert()\u8fd4\u56de\u4e00\u4e2apair\u7c7b\u578b\uff0cfirst\u4ee3\u8868\u6307\u9488\uff0c\u6307\u5411\u63d2\u5165\u7684\u4f4d\u7f6e\uff0csecond\u662fbool\uff0c\u4ee3\u8868\u662f\u5426\u5df2\u6709\u6b64\u5143\u7d20\u3002\n\n```cpp\n<http://www.cnblogs.com/D-O-Time/p/7922491.html>\n  1 #include<set>\n  2 #include<cstdio>\n  3 #include<iostream>\n  4 #include<algorithm>\n  5 #define ls k*2\n  6 #define rs (k*2+1)\n  7 using namespace std;\n  8 const int MAXN=210000;\n  9 int m,sz,root,tp;\n 10 int v[MAXN],q[MAXN],op[MAXN];\n 11 int dep[MAXN*4],fa[MAXN],ch[MAXN][2];\n 12 set<int>st;\n 13 inline int gi() { int res; scanf(\"%d\",&res); return res; }\n 14 void down(int k)\n 15 {\n 16   if(!dep[k])return ;\n 17   dep[ls]+=dep[k];\n 18   dep[rs]+=dep[k];\n 19   dep[k]=0;\n 20 }\n 21 void add(int k,int ll,int rr,int L,int R,int Val)\n 22 {\n 23   if(ll==L && rr==R) { dep[k]+=Val; return; }\n 24   down(k);\n 25   int mid=(ll+rr)/2;\n 26   if(R<=mid)\n 27     add(ls,ll,mid,L,R,Val);\n 28   else if(mid<L)\n 29     add(rs,mid+1,rr,L,R,Val);\n 30   else\n 31     {\n 32       add(ls,ll,mid,L,mid,Val);\n 33       add(rs,mid+1,rr,mid+1,R,Val);\n 34     }\n 35 }\n 36 void modify(int k,int ll,int rr,int p,int Val)\n 37 {\n 38   if(ll==rr) { dep[k]=Val; return;}\n 39   down(k);\n 40   int mid=(ll+rr)/2;\n 41   if(p<=mid)\n 42     return modify(ls,ll,mid,p,Val);\n 43   else\n 44     return modify(rs,mid+1,rr,p,Val);\n 45 }\n 46 int query(int k,int ll,int rr,int p)\n 47 {\n 48   if(ll==rr) return dep[k];\n 49   down(k);\n 50   int mid=(ll+rr)/2;\n 51   if(p<=mid)\n 52     return query(ls,ll,mid,p);\n 53   else\n 54     return query(rs,mid+1,rr,p);\n 55 }\n 56 int insert(int x)\n 57 {\n 58   set<int>::iterator it=st.insert(x).first;\n 59   if(root==0) {root=x; modify(1,1,tp,x,1); return 1;}\n 60   if(it!=st.begin())\n 61     {\n 62       if(!ch[*--it][1]) ch[fa[x]=*it][1]=x;\n 63       it++;\n 64     }\n 65   if(!fa[x]) ch[fa[x]=*++it][0]=x;\n 66   int deep=query(1,1,tp,fa[x])+1;\n 67   modify(1,1,tp,x,deep);\n 68   return deep;\n 69 }\n 70 int findmin()\n 71 {\n 72   int x=*st.begin(),res=query(1,1,tp,x);\n 73   if(x==root)return 1;\n 74   if(x+1<=fa[x]-1)\n 75     add(1,1,tp,x+1,fa[x]-1,-1);\n 76   add(1,1,tp,1,tp,1);\n 77   ch[fa[x]][0]=ch[x][1];\n 78   fa[ch[x][1]]=fa[x];\n 79   ch[fa[root]=x][1]=root;\n 80   root=x;\n 81   modify(1,1,tp,x,1);\n 82   return res;\n 83 }\n 84 void delmin()\n 85 {\n 86   printf(\"%d\\n\",findmin());\n 87   add(1,1,tp,1,tp,-1);\n 88   st.erase(root);\n 89   root=ch[root][1];\n 90   fa[root]=0;\n 91 }\n 92 int findmax()\n 93 {\n 94   int x=*st.rbegin(),res=query(1,1,tp,x);\n 95   if(x==root)return 1;\n 96   if(fa[x]+1<=x-1)\n 97     add(1,1,tp,fa[x]+1,x-1,-1);\n 98   add(1,1,tp,1,tp,1);\n 99   ch[fa[x]][1]=ch[x][0];\n100   fa[ch[x][0]]=fa[x];\n101   ch[fa[root]=x][0]=root;\n102   root=x;\n103   modify(1,1,tp,x,1);\n104   return res;\n105 }\n106 void delmax()\n107 {\n108   printf(\"%d\\n\",findmax());\n109   add(1,1,tp,1,tp,-1);\n110   st.erase(root);\n111   root=ch[root][0];\n112   fa[root]=0;\n113 }\n114 int main()\n115 {\n116   scanf(\"%d\",&m);\n117   for(int i=1;i<=m;i++)\n118     {\n119       scanf(\"%d\",&op[i]);\n120       if(op[i]==1) q[++tp]=v[i]=gi();\n121     }\n122   sort(q+1,q+1+tp);\n123   for(int i=1;i<=m;i++)\n124     if(op[i]==1)\n125       v[i]=lower_bound(q+1,q+1+tp,v[i])-q;\n126   for(int i=1;i<=m;i++)\n127     {\n128       if(op[i]==1) { printf(\"%d\\n\",insert(v[i])); }\n129       else if(op[i]==2) printf(\"%d\\n\",findmin());\n130       else if(op[i]==3) printf(\"%d\\n\",findmax());\n131       else if(op[i]==4) delmin();\n132       else if(op[i]==5) delmax();\n133     }\n134 }\n```",
        "postTime": 1511958708,
        "uid": 38711,
        "name": "DOTime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3721 \u3010[AH/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\n\u53ef\u4ee5\u76f4\u63a5\u53bb\u6211\u535a\u5ba2\uff1a<http://www.cnblogs.com/zzmmm/p/7273747.html>\n\n\u601d\u8def{\n\n\n\u6bcf\u6b21\u5355\u65cb\u53ea\u4f1a\u53d6$maxormin$,\u90a3\u4e48\u624b\u73a9\u53d1\u73b0,\u8fd9\u6837\u6811\u7684\u5f62\u6001\u57fa\u672c\u4e0d\u53d8!\n\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628ax\u63d0\u4e0a\u53bb,\u8fd9\u662f\u624b\u52a8\u7ef4\u62a4Spaly\u7684\u5f62\u6001,\n\n\n\u6211\u4eec\u60f3\u600e\u4e48\u7edf\u8ba1\u7b54\u6848\u5462?\u66b4\u529b\u8df3\u663e\u7136\u662f\u4f1aT\u7684,\u8fd9\u91cc\u5b9e\u8d28\u662f\u67e5\u8be2\u70b9\u5230\u6839\u7684\u8ddd\u79bb,\n\n\n\u53ef\u4ee5\u8003\u8651\u4f7f\u7528$LCT$\u7ef4\u62a4,\u8fd9\u6837\u5c31\u76f4\u63a5\u67e5\u8be2\u70b9\u5230\u6839\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u53ef\u4ee5\u4e86.\n\n\n(LCT\u7ef4\u62a4\u7684\u662f\u65e0\u6839\u6811!\u6240\u4ee5\u6bcf\u6b21\u67e5\u8be2\u90fd\u8981\u628a$Spaly$\u7684\u6839\u641e\u5230$LCT$\u7684\u603b\u6839)\n\n\n\u7136\u540e\u76f4\u63a5\u6309\u7167Spaly\u7684\u65b9\u6cd5$Link,Cut$,\u5220\u9664\u64cd\u4f5c\u540c\u7406\u8fa3\u3002\u3002\u3002\u3002\n\n\n\u63d2\u5165\u5462\uff1f\uff1f\uff1f\uff1f\n\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u603b\u662f\u63d2\u5728\u5176\u524d\u9a71\u7684\u53f3\u513f\u5b50\u6216\u662f\u540e\u7ee7\u7684\u5de6\u513f\u5b50.\n\n\n\u90a3\u4e48\u624b\u73a9\u53d1\u73b0,\u4e00\u5b9a\u63d2\u5728\u6df1\u5ea6\u66f4\u6df1\u7684\u8282\u70b9\u4e2d.\u597d,\u90a3\u4e48\u5148\u67e5\u8be2\u540e\u5224\u65ad,\n\n\n\u5bf9\u4e8e\u524d\u9a71,\u540e\u7ee7,\u6700\u5c0f,\u6700\u5927\u64cd\u4f5c,\u65e0\u8111set\u5c31\u884c\u4e86\u3002\u3002\u3002\u3002\u3002\n\n\n```cpp\n}\n#include<bits/stdc++.h>\n#define RG register\n#define il inline\n#define N 1100000\n#define inf (1<<30)\nusing namespace std;\nint ch[N][2],fa[N],st[N],sub[N],rt,cnt,c[N][2],f[N],sz[N];bool rev[N];\nbool isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\nvoid up(int x){sz[x]=sz[ch[x][0]]+sz[ch[x][1]]+1;return;}\nvoid down(int x){if(rev[x])rev[x]^=1,rev[ch[x][0]]^=1,rev[ch[x][1]]^=1,swap(ch[x][1],ch[x][0]);}\nvoid Rotate(int x){\n  int y=fa[x],z=fa[y];\n  int l=ch[y][1]==x,r=l^1;\n  if(!isroot(y))ch[z][ch[z][1]==y]=x;\n  fa[x]=z,fa[y]=x,fa[ch[x][r]]=y;ch[y][l]=ch[x][r];\n  ch[x][r]=y;up(y),up(x);\n}\nvoid Splay(int x){int top(0),y=x;st[++top]=x;\n  while(!isroot(y))st[++top]=fa[y],y=fa[y];\n  for(int i=top;i;i--)down(st[i]);\n  while(!isroot(x)){\n    y=fa[x];int z=fa[y];\n    if(!isroot(y)){\n      if(ch[z][0]==y^ch[y][0]==x)Rotate(x);\n      else Rotate(y);\n    }Rotate(x);\n  }\n}\nvoid access(int x){int t(0);while(x)Splay(x),ch[x][1]=t,t=x,up(x),x=fa[x];}\nvoid makeroot(int x){access(x),Splay(x),rev[x]^=1;}\nvoid link(int x,int y){\n  if(!x||!y)return;\n  makeroot(x);\n  fa[x]=y;\n}\nvoid cut(int x,int y){\n  if(!x||!y)return;\n  makeroot(x),access(y),Splay(y);\n  ch[y][0]=fa[x]=0,up(x),up(y);\n}\nint Query(int x){makeroot(rt),access(x),Splay(x);return sz[x];}\nset<int>s;\nset<int>::iterator it;\nstruct ask{int flag,kk;}a[N];\nint main(){\n  freopen(\"spaly.in\",\"r\",stdin);\n  freopen(\"spaly.out\",\"w\",stdout);\n  int T;scanf(\"%d\",&T);\n  s.insert(-inf),s.insert(inf);\n  for(int i=1;i<=T;++i){\n    scanf(\"%d\",&a[i].flag);\n    if(a[i].flag==1)scanf(\"%d\",&a[i].kk),sub[++sub[0]]=a[i].kk;\n  }\n  sort(sub+1,sub+sub[0]+1);int szz=unique(sub+1,sub+sub[0]+1)-sub-1;\n  for(int i=1;i<=T;++i){\n    if(a[i].flag==1){\n      a[i].kk=lower_bound(sub+1,sub+szz+1,a[i].kk)-sub;\n      if(!cnt){cnt++,rt=a[i].kk,s.insert(rt),printf(\"1\\n\");continue;}\n      else{\n    it=s.upper_bound(a[i].kk);int nxt=*it,deep(0),x;--it;int pre=*it;\n    if(pre!=-inf){int now=Query(pre);if(now>deep)deep=now,x=pre;}\n    if(nxt!=inf){int now=Query(nxt);if(now>deep)deep=now,x=nxt;}\n    printf(\"%d\\n\",deep+1);c[x][a[i].kk>x]=a[i].kk,f[a[i].kk]=x;cnt++;link(x,a[i].kk);\n    s.insert(a[i].kk);\n      }\n    }\n    if(a[i].flag==2){\n      if(cnt==1){printf(\"1\\n\");continue;}\n      it=s.begin(),++it;int x=*it,y=c[x][1],z=f[x],k=Query(x);\n      if(rt!=x){\n    cut(x,z),cut(x,y),link(x,rt),link(z,y);\n    f[x]=0,c[x][1]=rt,f[rt]=x,rt=x,c[z][0]=y,f[y]=z;\n      }\n      printf(\"%d\\n\",k);\n    }\n    if(a[i].flag==3){\n      if(cnt==1){printf(\"1\\n\");continue;}\n      it=s.end(),--it,--it;int x=*it,y=c[x][0],z=f[x],k=Query(x);\n      if(rt!=x){\n    cut(x,z),cut(x,y),link(x,rt);link(z,y);\n    f[x]=0,c[x][0]=rt,f[rt]=x,rt=x,c[z][1]=y;\n    f[y]=z;\n      }printf(\"%d\\n\",k);\n    }\n    if(a[i].flag==4){\n      if(cnt==1){cnt--;printf(\"1\\n\"),s.erase(s.find(rt)),rt=0;continue;}\n      it=s.begin(),++it;int x=*it,y=c[x][1],z=f[x],k=Query(x);\n      cut(x,z),cut(x,y);\n      link(y,z);\n      cnt--;s.erase(s.find(x));\n      if(x==rt)rt=y;\n      c[x][0]=c[x][1]=f[x]=0,c[z][0]=y,f[y]=z;\n      printf(\"%d\\n\",k);\n    }\n    if(a[i].flag==5){\n      if(cnt==1){cnt--;printf(\"1\\n\"),s.erase(s.find(rt)),rt=0;continue;}\n      it=s.end(),--it,--it;int x=*it,y=c[x][0],z=f[x],k=Query(x);\n      cut(x,z),cut(x,y);link(y,z);cnt--;s.erase(s.find(x));\n      printf(\"%d\\n\",k);if(x==rt)rt=y;\n      c[x][0]=c[x][1]=f[x]=0,c[z][1]=y,f[y]=z;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1507772434,
        "uid": 23122,
        "name": "\u57c3\u7f57\u8292\u963f\u8001\u5e08\u00b7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3721 \u3010[AH/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u795e\u9898\uff0c\u9700\u8981\u6211\u4eec\u624b\u73a9\u6765\u53d1\u73b0\u6027\u8d28\u3002\n\n\u53d1\u73b0\u5355\u65cb\u6700\u5c0f\u503c\u7684\u8fc7\u7a0b\u6709\u4e00\u6761\u957f\u94fe\u4e0d\u4f1a\u6539\u53d8\uff0c\u8fd9\u5c31\u662f Spaly \u7684\u9519\u8bef\u4e4b\u5904\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u65ad\u8fb9\u8fde\u8fb9\u7684\u6d41\u7a0b\uff1a\n1. \u5c06\u4ed6\u7684\u53f3\u513f\u5b50\u63a5\u5230\u4ed6\u7684\u7236\u4eb2\uff1b\n2. \u65ad\u6389\u81ea\u5df1\u7684\u6240\u6709\u8054\u7cfb\uff1b\n3. \u5c06\u5f53\u524d\u7684\u6811\u6839\u4f5c\u4e3a\u81ea\u5df1\u7684\u5de6\u513f\u5b50\u3002\n\n\u6700\u5927\u503c\u540c\u7406\uff0c\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u505a\u9898\u4e86\u3002\n\n\u5148\u5c06\u6240\u6709\u8be2\u95ee\u8bfb\u5165\uff0c\u5c06\u6570\u503c\u79bb\u6563\u5316\uff0c\u7ef4\u62a4\u4e00\u4e2a set \u8868\u793a\u5f53\u524d Spaly \u4e2d\u7684\u8282\u70b9\uff0c\u63d2\u5165\u65f6\u5c06\u5176\u63a5\u5230\u524d\u9a71\u540e\u7ee7\u6df1\u5ea6\u66f4\u5927\u7684\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002\n```cpp\nfor(x=1;x<=q;++x){\n\tread(qr[x][0]);\n\tif(qr[x][0]==1)read(qr[x][1]),mp[++mt]=qr[x][1];\n\t}sort(mp+1,mp+mt+1);\nfor(x=1;x<=q;++x)\n\tqr[x][1]=lower_bound(mp+1,mp+mt+1,qr[x][1])-mp;\n```\n\n\u81f3\u4e8e\u7236\u5b50\u5173\u7cfb\u548c\u6df1\u5ea6\uff0c\u53ea\u9700\u8981\u4f7f\u7528 Splay \u7ef4\u62a4\u5b9e\u94fe\u5e76\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\uff0c\u5f53\u5b9e\u94fe\u6253\u901a\u5230\u6839\u8282\u70b9\u65f6\uff0cSplay \u7684\u5927\u5c0f\u5c31\u662f\u6df1\u5ea6\u3002\n```cpp\n#define tp(x) (t[f[x]][1]==x)\n#define in(x) (t[f[x]][0]==x||tp(x))\n#define ls t[x][0]\n#define rs t[x][1]\ninline void pp(int x){\n\tsz[x]=sz[ls]+sz[rs]+1;\n}\ninline void rot(int x){\n\tint y=f[x],k=tp(x),w=t[x][!k];\n\tt[x][!k]=y,t[y][k]=w;\n\tif(in(y))t[f[y]][tp(y)]=x;\n\tf[x]=f[y],f[f[w]=y]=x,pp(y);\n}\ninline void splay(int x){\n\tfor(int y=f[x];in(x);rot(x),y=f[x])\n\t\tif(in(y))rot(tp(x)^tp(y)?x:y);pp(x);\n}\ninline void access(int x){\n\tfor(int y=0;x;x=f[y=x])\n\t\tsplay(x),rs=y,pp(x);\n}\ninline int dep(int x){\n\tif(!x)return 0;\n\taccess(x);\n\tsplay(x);\n\treturn sz[x];\n}\n```\n[LOJ \u7684 AC\u8bb0\u5f55](https://loj.ac/s/1534334)",
        "postTime": 1659091840,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "Splay \u7ef4\u62a4 Spaly"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3721)\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684\u9898\u2026\u2026\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u53e6\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u2026\u2026\n\n\u5148\u8003\u8651\u8fd9\u4e2a\u9898\u7684\u7b54\u6848\uff0c\u4e5f\u5c31\u662f\u6df1\u5ea6\u5982\u4f55\u7ef4\u62a4\uff1f\u4f5c\u4e3a `LCT` \u7ec3\u4e60\u9898\u5355\u4e2d\u7684\u4e00\u9053\u9898\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528 `LCT` \u7ef4\u62a4\u94fe\u4e0a\u70b9\u6570\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u70b9\u548c\u6839 `split`\u51fa\u6765\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u70b9\u7684 `siz` \u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\uff0c\u8003\u8651\u5230\u9700\u8981\u627e\u6574\u68f5\u6811\u7684\u6700\u5c0f\u70b9\u548c\u6700\u5927\u70b9\uff0c\u6240\u4ee5\u4f7f\u7528 `set` \u6765\u7ef4\u62a4\u6574\u68f5\u6811\u4e2d\u5b58\u5728\u7684\u70b9\uff0c\u627e\u6700\u5c0f\u548c\u6700\u5927\u5c31\u8c03\u7528 `t.begin()` \u548c `t.end()` \u5373\u53ef\u3002\uff08\u6ce8\u610f `end()` \u662f\u5f00\u7684\uff0c\u9700\u8981 `--it` \u624d\u80fd\u627e\u5230\u6700\u5927\u7684\u5143\u7d20\uff09\n\n\u8003\u8651\u5269\u4e0b\u56db\u4e2a\u64cd\u4f5c\u6811\u7684\u5f62\u6001\u4f1a\u53d1\u751f\u54ea\u4e9b\u53d8\u5316\uff1a\n\n2\u30013\u64cd\u4f5c\uff1a\u628a\u6700\u5c0f\u7684\u6216\u8005\u6700\u5927\u7684\u6570\u79fb\u5230\u6839\u3002\u4ee5\u6700\u5c0f\u7684\u4e3a\u4f8b\uff1a\u8bbe\u8fd9\u4e2a\u70b9\u4e3a $x$\uff0c\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u4e3a $u$\uff0c\u7236\u4eb2\u4e3a $v$\uff0c\u6839\u4e3a $rt$\uff0c\u90a3\u4e48\u9700\u8981\u505a\u7684\u64cd\u4f5c\u662f `cut(x,u),cut(x,v),link(u,v),link(x,rt)`\u3002\u8fd9\u4e2a\u5927\u5bb6\u753b\u4e2a\u56fe\u5c31\u7406\u89e3\u4e86\u3002\u90a3\u4e48\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u627e\u5230\u8fd9\u4e2a $u$ \u548c $v$ \u5462\uff1f\u9700\u8981\u7528\u6570\u7ec4\u6a21\u62df\u4e00\u4e0b\u539f\u6811\u7684\u7ed3\u6784\uff0c\u5728\u63d2\u5165\u3001\u65cb\u8f6c\u548c\u5220\u9664\u7684\u65f6\u5019\u66f4\u65b0\u4e00\u4e0b\u5373\u53ef\uff0c\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u3002\n\n4\u30015\u64cd\u4f5c\uff1a\u79fb\u5230\u6839\u4e4b\u540e\u8981\u5220\u9664\uff0c\u6240\u4ee5\u6700\u540e\u90a3\u4e2a `link(x,rt)` \u5c31\u4e0d\u9700\u8981\u505a\u4e86\u3002\n\n\u603b\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7801\u91cf\u8f83\u5927\uff0c\u5bf9\u7801\u529b\u8981\u6c42\u8f83\u9ad8\u4e14\u96be\u8c03\uff0c\u5982\u679c\u6709\u5176\u4ed6\u66f4\u597d\u65b9\u6cd5\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u2026\u2026\u4f46\u662f\u5982\u679c\u771f\u7684\u60f3\u7ec3\u4e60 `LCT`\uff0c\u672c\u9898\u4e0d\u5931\u4e3a\u4e00\u9053\u597d\u9898\u3002\n\n\u6700\u540e\u653e\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#include<algorithm>\nusing namespace std;\ninline void swap(int &x,int &y){x^=y^=x^=y;}\ninline int max(const int &a,const int &b){return a>b?a:b;}\nconst int N=1e5+13;\nstruct Lct{\n\tstruct Stack{\n\t\tint s[N],t;\n\t\tinline void clear(){t=0;}\n\t\tStack(){clear();}\n\t\tinline void push(int x){s[++t]=x;}\n\t\tinline void pop(){--t;}\n\t\tinline int top(){return s[t];}\n\t\tinline bool empty(){return !t;}\n\t};\n\tint fa[N],siz[N],ch[N][2];bool tag[N];\n\tinline void refresh(int x){siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;}\n\tinline bool isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\n\tinline bool chk(int x){return ch[fa[x]][1]==x;}\n\tinline void rotate(int x){\n\t\tint f=fa[x],gf=fa[f],k=chk(x),w=ch[x][k^1];\n\t\tfa[x]=gf;if(!isroot(f)) ch[gf][chk(f)]=x;\n\t\tif(w) fa[w]=f;ch[f][k]=w;\n\t\tfa[f]=x;ch[x][k^1]=f;\n\t\trefresh(f),refresh(x);\n\t}\n\tinline void pushdown(int x){\n\t\tif(!tag[x]) return;\n\t\ttag[ch[x][0]]^=1,tag[ch[x][1]]^=1,tag[x]=0;\n\t\tswap(ch[x][0],ch[x][1]);\n\t}\n\tinline void splay(int x){\n\t\tStack st;int p=x;\n\t\twhile(!isroot(p)) st.push(p),p=fa[p];\n\t\tst.push(p);\n\t\twhile(!st.empty()) pushdown(st.top()),st.pop();\n\t\twhile(!isroot(x)){\n\t\t\tint f=fa[x];\n\t\t\tif(!isroot(f)){\n\t\t\t\tif(chk(f)==chk(x)) rotate(f);\n\t\t\t\telse rotate(x);\n\t\t\t}\n\t\t\trotate(x);\n\t\t}\n\t}\n\tinline void access(int x){\n\t\tfor(int p=0;x;p=x,x=fa[x]) splay(x),ch[x][1]=p,refresh(x);\n\t}\n\tinline void makeroot(int x){access(x);splay(x);tag[x]^=1;}\n\tinline int findroot(int x){\n\t\taccess(x);splay(x);\n\t\twhile(ch[x][0]) x=ch[x][0];\n\t\treturn x;\n\t}\n\tinline void split(int x,int y){makeroot(x);access(y);splay(y);}\n\tinline void link(int x,int y){\n\t\tif(!x||!y) return;\n\t\tmakeroot(x);\n\t\tfa[x]=y;\n\t}\n\tinline void cut(int x,int y){\n\t\tif(!x||!y) return;\n\t\tsplit(x,y);\n\t\tch[y][0]=fa[x]=0,refresh(x),refresh(y);\n\t}\n\tinline int finddep(int x,int y){//\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u627e\u6df1\u5ea6 \n\t\tsplit(x,y);\n\t\treturn siz[y];\n\t}\n}T;\nint m,tot,rt,op[N],a[N],b[N],Cnt,f[N],c[N][2];\nset<int> t;\nset<int>::iterator it;\nint main(){\n//\tfreopen(\"splay1.in\",\"r\",stdin);\n//\tfreopen(\"splay.out\",\"w\",stdout);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;++i) T.siz[i]=1;\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d\",&op[i]);\n\t\tif(op[i]==1) scanf(\"%d\",&a[i]),b[++tot]=a[i];\n\t}\n\tsort(b+1,b+tot+1);tot=unique(b+1,b+tot+1)-b-1;\n\tfor(int i=1;i<=m;++i){\n\t\tswitch(op[i]){\n\t\t\tcase 1:{\n\t\t\t\tint x=lower_bound(b+1,b+tot+1,a[i])-b;\n\t\t\t\tint pre=0,suf=0;\n\t\t\t\tif(!Cnt){//\u6ce8\u610f\u7279\u5224\uff0c\u8fd9\u4e2a\u9898\u56e0\u4e3a\u6d89\u53ca\u5230\u8fb9\u754c\u7684\u5730\u65b9\u5f88\u591a\uff0c\u6240\u4ee5\u9700\u8981\u5f88\u591a\u7279\u5224 \n\t\t\t\t\tt.insert(x);rt=x;\n\t\t\t\t\tputs(\"1\");++Cnt;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tt.insert(x);it=t.find(x);++Cnt;\n\t\t\t\tif(it!=t.begin()) pre=*(--it),++it;//\u627e\u524d\u9a71\u548c\u540e\u7ee7\u7684set\u64cd\u4f5c\u4e0d\u592a\u4e00\u6837\uff0c\u8981\u6ce8\u610f \n\t\t\t\t++it;\n\t\t\t\tif(it!=t.end()) suf=*it;\n\t\t\t\tint r1=pre?T.finddep(rt,pre):0,r2=suf?T.finddep(rt,suf):0;\n\t\t\t\tif(r1<r2){\n\t\t\t\t\tprintf(\"%d\\n\",r2+1);\n\t\t\t\t\tf[x]=suf,c[suf][0]=x,T.link(x,suf);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tprintf(\"%d\\n\",r1+1);\n\t\t\t\t\tf[x]=pre,c[pre][1]=x,T.link(x,pre);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tit=t.begin();int x=*it;\n\t\t\t\tif(rt==x){puts(\"1\");continue;}\n\t\t\t\tprintf(\"%d\\n\",T.finddep(rt,x));\n\t\t\t\tint u=c[x][1],v=f[x];//\u5f00\u4e86\u4e24\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u539f\u6811 \n\t\t\t\tT.cut(x,v),T.cut(x,u),T.link(x,rt),T.link(v,u);\n\t\t\t\tf[x]=0,c[x][1]=rt,f[rt]=x;rt=x;\n\t\t\t\tc[v][0]=u;f[u]=v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tit=t.end();int x=*(--it);\n\t\t\t\tif(rt==x){puts(\"1\");continue;}\n\t\t\t\tprintf(\"%d\\n\",T.finddep(rt,x));\n\t\t\t\tint u=c[x][0],v=f[x];\n\t\t\t\tT.cut(x,v),T.cut(x,u),T.link(x,rt),T.link(v,u);\n\t\t\t\tf[x]=0,c[x][0]=rt,f[rt]=x;rt=x;\n\t\t\t\tc[v][1]=u;f[u]=v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4:{\n\t\t\t\tit=t.begin();int x=*it;t.erase(x);\n\t\t\t\tprintf(\"%d\\n\",T.finddep(rt,x));\n\t\t\t\t--Cnt;\n\t\t\t\tif(!Cnt) continue;\n\t\t\t\tint u=c[x][1],v=f[x];\n\t\t\t\tT.cut(x,v),T.cut(x,u);T.link(u,v);\n\t\t\t\tc[x][0]=c[x][1]=f[x]=0;if(rt==x) rt=u;//\u522b\u5fd8\u4e86\u66f4\u65b0\u6839\u8282\u70b9 \n\t\t\t\tc[v][0]=u;f[u]=v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 5:{\n\t\t\t\tit=t.end();int x=*(--it);t.erase(x);\n\t\t\t\tprintf(\"%d\\n\",T.finddep(rt,x));\n\t\t\t\t--Cnt;\n\t\t\t\tif(!Cnt) continue;\n\t\t\t\tint u=c[x][0],v=f[x];\n\t\t\t\tT.cut(x,v),T.cut(x,u);T.link(u,v);\n\t\t\t\tc[x][0]=c[x][1]=f[x]=0;if(rt==x) rt=u;\n\t\t\t\tc[v][1]=u;f[u]=v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1617778632,
        "uid": 160484,
        "name": "cunzai_zsy0531",
        "ccfLevel": 7,
        "title": "P3721\u9898\u89e3"
    },
    {
        "content": "\u5176\u5b9e\u2026\u2026\u6811\u72b6\u6570\u7ec4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n\u63d2\u5165\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u524d\u9a71\u540e\u7ee7\u4e2d\u9009\u51fa\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u5c06\u81ea\u5df1\u8fde\u5728\u5b83\u4e0b\u9762\u3002\u81f3\u4e8e\u5982\u4f55\u8fde\u63a5\u7a0d\u540e\u63cf\u8ff0\u3002\n\n\u5176\u4ed6\u9898\u89e3\u90fd\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u5355\u65cb $\\min$ \u6216 $\\max$ \u5230\u6839\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6700\u503c\u653e\u5230\u6839\u7136\u540e\u5ac1\u63a5\u6700\u503c\u539f\u6765\u7684\u513f\u5b50\u3002\n\n\u8bbe\u9700\u8981\u5355\u9009\u7684 $\\min$ \u503c\u6216\u8005 $\\max$ \u503c\u4e3a $x$ \u3002\n\n\u8003\u8651\u5982\u4f55\u8fdb\u884c\u628a\u5ac1\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u548c\u7236\u4eb2\u3002\n\n\u5c06 $x$ \u653e\u5230\u6839\u4e4b\u540e\uff0c\u9664\u4e86 $x$ \u539f\u5b50\u6811\u7684\u70b9\u7684\u6df1\u5ea6\u90fd\u9700\u8981 $+1$ \u3002\u8fd9\u4e2a\u64cd\u4f5c\u76f8\u5f53\u4e8e\u533a\u95f4 $+1$\uff08$x$ \u7684\u5b50\u6811\u4ee3\u8868\u7740\u8fde\u7eed\u7684\u533a\u95f4\uff09\uff0c\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u5355\u65cb\u5e76\u5220\u9664 / \u63d2\u5165\u662f\u5355\u70b9 $\\mathrm{set}$ \u64cd\u4f5c\uff0c\u91c7\u7528\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u52a0\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathrm O(M\\log N)$ \u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <set>\n#define N 100020\nusing namespace std;\n\nint a[N], b[N];\nvector<int> v;\nset<int> f;\nint g[N];\nint s[N][2], p[N];\n\ninline int Lowbit(int x)\n{\n    return x & -x;\n}\n\nvoid AddFenwick(int x, int v)\n{\n    for(; x <= (signed)::v.size(); x += Lowbit(x))\n        g[x] += v;\n\n    return;\n}\n\nint SumFenwick(int x)\n{\n    int o;\n\n    for(o = 0; x; x -= Lowbit(x))\n        o += g[x];\n\n    return o;\n}\n\nvoid AddChunk(int l, int r, int v)\n{\n    AddFenwick(l    ,  v);\n    AddFenwick(r + 1, -v);\n\n    return;\n}\n\nint main(void)\n{\n    int m;\n    int i, r, t, o;\n    set<int>::iterator x, y;\n\n    scanf(\"%d\", &m);\n    for(i = 1; i <= m; i ++)\n    {\n        scanf(\"%d\", &a[i]);\n        if(a[i] == 1)\n        {\n            scanf(\"%d\", &b[i]);\n            v.push_back(b[i]);\n        }\n    }\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(), v.end()), v.end());\n\n    for(i = 1; i <= m; i ++)\n        if(a[i] == 1)\n        {\n            b[i] = lower_bound(v.begin(), v.end(), b[i]) - v.begin() + 1;\n\n            if(!f.empty())\n            {\n                y = f.upper_bound(b[i]);\n                if(y == f.begin())\n                {\n                    o = SumFenwick(*y) + 1;\n                    s[*y][0] = b[i];\n                    p[b[i]] = *y;\n                }\n                else if(y == f.end())\n                {\n                    x = -- y;\n                    o = SumFenwick(*x) + 1;\n                    s[*x][1] = b[i];\n                    p[b[i]] = *x;\n                }\n                else\n                {\n                    x = y;\n                    x --;\n                    if(SumFenwick(*y) > SumFenwick(*x))\n                    {\n                        o = SumFenwick(*y) + 1;\n                        s[*y][0] = b[i];\n                        p[b[i]] = *y;\n                    }\n                    else\n                    {\n                        o = SumFenwick(*x) + 1;\n                        s[*x][1] = b[i];\n                        p[b[i]] = *x;\n                    }\n                }\n            }\n            else\n            {\n                r = b[i];\n                o = 1;\n            }\n            AddChunk(b[i], b[i], o - SumFenwick(b[i]));\n            printf(\"%d\\n\", o);\n            f.insert(b[i]);\n        }\n        else if(a[i] == 2)\n        {\n            t = *f.begin();\n            printf(\"%d\\n\", SumFenwick(t));\n            AddChunk(t, t, 1 - SumFenwick(t));\n            if(p[t])\n            {\n                AddChunk(p[t], v.size(), 1);\n                s[p[t]][0] = s[t][1];\n                if(s[t][1])\n                    p[s[t][1]] = p[t];\n                p[t] = 0;\n                s[t][1] = r;\n                p[r] = t;\n                r = t;\n            }\n        }\n        else if(a[i] == 3)\n        {\n            t = *f.rbegin();\n            printf(\"%d\\n\", SumFenwick(t));\n            AddChunk(t, t, 1 - SumFenwick(t));\n            if(p[t])\n            {\n                AddChunk(1, p[t], 1);\n                s[p[t]][1] = s[t][0];\n                if(s[t][0])\n                    p[s[t][0]] = p[t];\n                p[t] = 0;\n                s[t][0] = r;\n                p[r] = t;\n                r = t;\n            }\n        }\n        else if(a[i] == 4)\n        {\n            t = *f.begin();\n            printf(\"%d\\n\", SumFenwick(t));\n            AddChunk(t, t, 1 - SumFenwick(t));\n            if(p[t])\n            {\n                AddChunk(p[t], v.size(), 1);\n                s[p[t]][0] = s[t][1];\n                if(s[t][1])\n                    p[s[t][1]] = p[t];\n                p[t] = 0;\n                s[t][1] = r;\n                p[r] = t;\n                r = t;\n            }\n\n            r = s[t][1];\n            p[r] = 0;\n            AddChunk(1, v.size(), -1);\n            f.erase(t);\n        }\n        else\n        {\n            t = *f.rbegin();\n            printf(\"%d\\n\", SumFenwick(t));\n            AddChunk(t, t, 1 - SumFenwick(t));\n            if(p[t])\n            {\n                AddChunk(1, p[t], 1);\n                s[p[t]][1] = s[t][0];\n                if(s[t][0])\n                    p[s[t][0]] = p[t];\n                p[t] = 0;\n                s[t][0] = r;\n                p[r] = t;\n                r = t;\n            }\n\n            r = s[t][0];\n            p[r] = 0;\n            AddChunk(1, v.size(), -1);\n            f.erase(t);\n        }\n\n    return 0;\n}\n\n```",
        "postTime": 1547599032,
        "uid": 34354,
        "name": "gorokokoro",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u5176\u5b9e\u6211splay\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u2026\u2026\n\n~~\u7b49\u7b49\uff0c\u600e\u4e48\u53c8\u53cc\u53d2\u53d5\u6b7b\u5faa\u4e86\u2026\u2026\u6eda\u56de\u53bb\u5199\u7ebf\u6bb5\u6811\uff01~~\n\n\u90a3\u4e48\u9996\u5148\u8fd9\u9053\u9898\u8981\u6c42\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u2014\u2014spaly\n\n\u6ecb\u78c1\u63d2\u5165\uff0c\u5355\u65cb\u6700\u503c\uff0c\u5355\u65cb\u5e76\u5220\u9664\u6700\u503c\u3002\n\n\u90a3\u4e48\u9996\u5148spaly\u80af\u5b9a\u662f\u4f1aT\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u901a\u8fc7\u67d0\u4e9b\u4e1c\u897f\u6a21\u62df\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u6211\u4eec\u7ecf\u8fc7\u624b\u73a9\u53d1\u73b0\uff0c\u7531\u4e8e\u6211\u4eec\u5355\u65cb\u7684\u662f\u6700\u503c\uff0c\u610f\u5473\u7740\u6211\u4eec\u4e00\u76f4\u5728\u5de6\u65cb\uff0c\u6216\u8005\u4e00\u76f4\u5728\u53f3\u65cb\u3002\n\n\u56de\u5fc6\u4e0b\u65cb\u8f6c\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u53ea\u662f\u8f6c\u79fb\u4e86\u4e86\u4e00\u4e2a\u5b50\u6811\u7684\u6240\u6709\u8005\uff0c\u6bcf\u6b21\u90fd\u662f\u4e2d\u95f4\u7684\u90a3\u4e2a\u5b50\u6811\u88ab\u62ff\u8d70\uff0c\u4f46\u662f\u6211\u4eec\u8fde\u7eed\u8fdb\u884c\u540c\u4e00\u65cb\u8f6c\u7684\u65f6\u5019\uff0c\u4e0a\u6b65\u65cb\u8f6c\u62ff\u8d70\u7684\u5b50\u6811\u4f1a\u5728\u4e0b\u4e00\u6b65\u88ab\u6362\u56de\u6765\uff0c(\u5982\u679c\u8fd8\u662f\u4e86\u89e3\u4e0d\u4e86\u7684\u8bdd\u81ea\u884c\u624b\u73a9\uff0c\u540c\u201c\u6811\u72b6\u6570\u7ec4\u201d\u90a3\u9053\u9898\u7684\u7ed3\u8bba)\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u4e00\u6b21\u65cb\u8f6c\u5bf9\u6811\u7ed3\u6784\u7684\u7834\u574f\u5f88\u5feb\u5c31\u4f1a\u88ab\u4fee\u6b63\uff0c\u6700\u540e\u7684\u7ed3\u679c\u662f\uff0c\u5c06\u6700\u503c\u653e\u5728\u6839\u4e0a\uff0c\u518d\u5c06\u5b83\u539f\u6765\u7684\u5de6/\u53f3\u5b50\u6811\u5ac1\u63a5\u5230\u5b83\u539f\u6765\u7684\u7236\u4eb2\u4e0a\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u9664\u4e86\u4ed6\u7684\u539f\u6765\u5b50\u6811\u548c\u4ed6\u81ea\u5df1\u4e4b\u5916\uff0c\u5176\u4ed6\u70b9\u7684\u6df1\u5ea6+1\n\n\u5982\u679c\u5220\u6389\u4e86\u6839\uff0c\u90a3\u4e48\u6240\u6709\u70b9\u6df1\u5ea6-1\n\n\u7136\u540e\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6811\u7684\u59ff\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f00\u4e00\u4e2aspalytree\n\u5c31\u50cf\u5e73\u65f6\u7ef4\u62a4splaytree\u4e00\u6837\u7ef4\u62a4\u4ed6\u7684\u59ff\u6001\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5728\u8fd9\u68f5\u6811\u4e0a\u63d2\u5165\u548c\u67e5\u627e\uff0c\u67e5\u524d\u9a71\u540e\u7ee7\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981set~\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7ef4\u62a4\u8fd9\u4e2aspalytree\uff0c\u4f7f\u7528set\u7ef4\u62a4\u5b83\u7684\u5e73\u8861\u6811\u90e8\u5206\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5b83\u7684\u6df1\u5ea6\u90e8\u5206\uff0c\u5bf9\u4e8e\u6df1\u5ea6\u5982\u4f55\u7ef4\u62a4\u5462\uff0c\u8fd8\u8bb0\u5f97\u6211\u4eec\u6ecb\u78c1\u7684\u64cd\u4f5c\u4eec\u5417\uff1f\u6211\u4eec\u73b0\u5728\u6765\u62c6\u5206\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5230\u5e95\u8981\u7ef4\u62a4\u90a3\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n\n(\u4ee3\u7801\u5b9e\u73b0\u4e0a\uff0c\u4e3a\u4e86\u597d\u5199\uff0c\u6211\u4eec\u628a\u503c\u8bfb\u8fdb\u6765\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u76f4\u63a5\u628a\u503c\u4f5c\u4e3a\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u65e0\u8bba\u662f\u5728spalytree\u4e0a\u8fd8\u662f\u7ebf\u6bb5\u6811\u4e0a)\n\n##### \u64cd\u4f5c1\uff1a\u63d2\u5165\n\n1.\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7(set\u64cd\u4f5c)\n\n2.\u5bfb\u627e\u524d\u9a71\u548c\u540e\u7ee7\u4e2d\u6709\u7a7a\u95f2\u513f\u5b50\u4f4d\u7f6e\u7684\u70b9(spalytree\u64cd\u4f5c)\n\n3.\u67e5\u627e\u7236\u4eb2\u8282\u70b9\u7684\u6df1\u5ea6\u5e76\u4e14+1\u5b69\u5b50\u6df1\u5ea6(\u7ebf\u6bb5\u6811\u64cd\u4f5c)\n\n##### \u64cd\u4f5c2\uff1a\u5355\u65cbmin\n\n1.\u67e5\u627emin(set\u64cd\u4f5c)\n\n2.\u5ac1\u63a5\u5b83\u7684\u5b50\u6811\u5e76\u5c06\u5176\u63d0\u81f3\u6839\u7684\u4f4d\u7f6e(spalytree\u64cd\u4f5c)\n\n3.\u6bd4\u4ed6\u7684\u539f\u7236\u4eb2\u5927\u7684\u503c\uff0c\u6df1\u5ea6\u52a01,**\u81ea\u5df1\u7684\u6df1\u5ea6\u8bbe\u4e3a1**\uff0c(\u7ebf\u6bb5\u6811\u64cd\u4f5c)\n\n##### \u64cd\u4f5c3\uff0c\u5355\u65cbmax\n\n\u540c\u4e0a\uff0c\u6d41\u7a0b\u5b8c\u5168\u76f8\u540c\n\n##### \u64cd\u4f5c4\uff1a\u5355\u65cb\u5e76\u5220\u9664min\n\n1.\u8fdb\u884c\u64cd\u4f5c2(\u590d\u5408\u64cd\u4f5c)\n\n2.\u5c06min\u7684\u53f3\u513f\u5b50\u8bbe\u4e3a\u6839(spalytree\u64cd\u4f5c)\n\n3.\u5220\u9664min(set\u64cd\u4f5c)\n\n4.\u6240\u6709\u70b9\u6df1\u5ea6-1\n\n##### \u64cd\u4f5c5\uff1a\u5355\u65cb\u5e76\u5220\u9664max\n\n\u540c\u4e0a\uff0c\u53ea\u662f\u8ba9\u5de6\u513f\u5b50\u6210\u4e3a\u6839\n\n\u7136\u540e\u6d41\u7a0b\u5c31\u5f88\u6e05\u695a\u5566(\u8fd9\u91cc\u5f53\u7136\u5f00\u7684\u8fd8\u662f\u503c\u57df\u7ebf\u6bb5\u6811)\n\n\u4e0a\u4ee3\u7801~\n```c\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<vector>\n#include<stack>\nusing namespace std;\nconst int N=1e5+10;int m;\nstruct linetree//\u901a\u7528\u7ebf\u6bb5\u6811\u677f\u5b50\n{\n    int val[4*N];int add[4*N];\n    inline void pushdown(int p,int l,int r)\n    {\n        if(r-l>1){add[2*p]+=add[p];add[2*p+1]+=add[p];}\n        val[p]+=(r-l)*add[p];add[p]=0;return;\n    }\n    inline void setadd(int p,int l,int r,int dl,int dr,int plus)\n    {\n        if(dl==l&&dr==r){add[p]+=plus;pushdown(p,l,r);return;}\n        if(add[p]!=0)pushdown(p,l,r);int mid=(l+r)/2;\n        if(dl<mid){setadd(2*p,l,mid,dl,min(dr,mid),plus);}\n        else pushdown(2*p,l,mid);\n        if(mid<dr){setadd(2*p+1,mid,r,max(dl,mid),dr,plus);}\n        else pushdown(2*p+1,mid,r);\n        val[p]=val[2*p]+val[2*p+1];\n    }\n    inline int sum(int p,int l,int r,int dl,int dr)\n    {\n        if(add[p]!=0){pushdown(p,l,r);}\n        if(dl==l&&dr==r){return val[p];}int mid=(l+r)/2;int res=0;\n        if(dl<mid){res+=sum(2*p,l,mid,dl,min(dr,mid));}\n        if(mid<dr){res+=sum(2*p+1,mid,r,max(dl,mid),dr);}\n        return res;\n    }\n    inline void setval(int p,int v)\n    {int nowv=sum(1,0,m,p-1,p);setadd(1,0,m,p-1,p,v-nowv);}\n    inline int getval(int p){return sum(1,0,m,p-1,p);}\n}lt;\nset <int> se;//\u4e00\u4e2aset\nstruct data\n{\n    int pos;int val;\n    friend bool operator <(data a,data b){return a.val<b.val;}\n}data[N];int cnt;//\u79bb\u6563\u5316\u7684\u7ed3\u6784\u4f53\nstruct op{int tp;int val;}op[N];\nstruct spalytree//\u76f4\u63a5\u7ef4\u62a4\u6811\u7684\u5f62\u6001\n{\n    int s[2][N];int fa[N];int root;\n    inline int ins(int v,int tp,int p)//\u8f85\u52a9\u51fd\u6570,\u63d2\u5165\u4e00\u4e2a\u503c\u5e76\u8fd4\u56de\u6df1\u5ea6\n    {\n        s[tp][p]=v;fa[v]=p;int dep=lt.getval(p)+1;\n        lt.setval(v,dep);se.insert(v);return dep;\n    }\n    inline int insert(int v)\n    {\n        if(root==0){root=v;se.insert(v);lt.setval(v,1);return 1;}//\u7a7a\u6811\n        set <int>::iterator it;\n        it=se.begin();if(v<*it){return ins(v,0,*it);}//\u65e0\u524d\u9a71\n        it=se.end();--it;if(v>*it){return ins(v,1,*it);}//\u65e0\u540e\u7ee7\n        it=se.lower_bound(v);if(s[0][*it]==0){return ins(v,0,*it);}//\u67e5\u770b\u524d\u9a71\u548c\u540e\u7ee7\n        --it;return ins(v,1,*it);\n    }\n    inline int spalymi()\n    {\n        set <int>:: iterator it;it=se.begin();int dep=lt.getval(*it);//\u67e5\u6700\u5c0f\u503c\n        if(*it==root){return 1;}//\u5982\u679c\u662f\u6839\u5c31\u4e0d\u7528\u64cd\u4f5c\n        lt.setadd(1,0,m,fa[*it]-1,m,1);lt.setval(*it,1);//\u6dfb\u52a0\u6df1\u5ea6\n        s[0][fa[*it]]=s[1][*it];if(s[1][*it])fa[s[1][*it]]=fa[*it];\n        s[1][*it]=root;fa[*it]=0;fa[root]=*it;root=*it;return dep;//\u53d8\u6362\u6811\u7684\u59ff\u6001\n    }\n    inline int spalyma()//\u540c\u4e0a\n    {\n        set <int>:: iterator it;it=--se.end();int dep=lt.getval(*it);\n        if(*it==root){return 1;}\n        lt.setadd(1,0,m,0,fa[*it],1);lt.setval(*it,1);\n        s[1][fa[*it]]=s[0][*it];if(s[0][*it])fa[s[0][*it]]=fa[*it];\n        s[0][*it]=root;fa[*it]=0;fa[root]=*it;root=*it;return dep;\n    }\n    inline int erasemi()\n    {\n        int dep=spalymi();se.erase(root);//spaly\u540e\u76f4\u63a5erase\u5c31\u597d\n        int tmp=root;root=s[1][root];s[1][tmp]=0;\n        lt.setadd(1,0,m,0,m,-1);return dep;//\u5168\u4f53\u6df1\u5ea6-1\n    }\n    inline int erasema()//\u540c\u4e0a\n    {\n        int dep=spalyma();se.erase(root);\n        int tmp=root;root=s[0][root];s[0][tmp]=0;\n        lt.setadd(1,0,m,0,m,-1);return dep;\n    }\n}sly;\nint main()\n{\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&op[i].tp);\n        if(op[i].tp==1)\n        {\n            scanf(\"%d\",&op[i].val);\n            data[++cnt].pos=i;data[cnt].val=op[i].val;\n        }\n    }\n    sort(data+1,data+cnt+1);\n    for(int i=1;i<=cnt;i++){op[data[i].pos].val=i;}//\u79bb\u6563\u5316\n    for(int i=1;i<=m;i++)//\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e86\n    {\n        switch(op[i].tp)\n        {\n            case 1:{printf(\"%d\\n\",sly.insert(op[i].val));break;}\n            case 2:{printf(\"%d\\n\",sly.spalymi());break;}\n            case 3:{printf(\"%d\\n\",sly.spalyma());break;}\n            case 4:{printf(\"%d\\n\",sly.erasemi());break;}\n            case 5:{printf(\"%d\\n\",sly.erasema());break;}\n        }\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f\n}\n```",
        "postTime": 1519809524,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e2a\u5947\u602a\u7684\u9898\u76ee\uff0c\u8981\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u53e6\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n## $\\text{Solution}$\n- $1$.\u63d2\u5165\u64cd\u4f5c\uff0c\u65b0\u8282\u70b9\u7684\u7236\u4eb2\u8981\u4e48\u662f\u5b83\u7684\u524d\u9a71\uff0c\u8981\u4e48\u662f\u5b83\u7684\u540e\u7ee7\uff0c\u5c06\u65b0\u8282\u70b9\u63d2\u5728\u8f83\u6df1\u90a3\u4e2a\u70b9\u4e0b\u9762\uff0c\u65b0\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a\u7236\u4eb2\u7684\u6df1\u5ea6$+1$\n- $2$.\u8bb0\u6700\u5c0f\u7684\u70b9\u4e3a$X$,$X$\u7684\u7236\u4eb2\u4e3a$Y$,\u5f53\u524d\u7684\u6839\u4e3a$rt$,\u7531\u4e8e\u662f\u5355\u65cb\uff0c\u6240\u4ee5\u4ece$Y$\u5230$rt$\u8fd9\u6bb5\u7684\u7236\u5b50\u5173\u7cfb\u90fd\u4e0d\u53d8\uff0c\u6211\u4eec\u53ea\u9700\u628a$X$\u63a5\u5728$rt$\u4e0a\uff0c\u5c06$X$\u7684\u53f3\u513f\u5b50\u63a5\u5728$Y$\u7684\u5de6\u513f\u5b50\u4e0a\uff0c$Y\\sim rt$\u7684\u70b9\u7684\u6df1\u5ea6\u90fd$+1$\uff0c$X$\u7684\u53f3\u513f\u5b50\u6df1\u5ea6\u4e0d\u53d8\uff0c$X$\u7684\u6df1\u5ea6\u53d8\u4e3a1\n![\u79fb\u6839\u524d](https://cdn.luogu.com.cn/upload/image_hosting/p78ucl7j.png)\n![\u79fb\u6839\u540e](https://cdn.luogu.com.cn/upload/image_hosting/d88x2jqj.png)\n- $3$.\u4e0e$2$\u7c7b\u4f3c\n- $4$.\u5148\u8fdb\u884c$2$\u64cd\u4f5c\uff0c\u7136\u540e\u5c06$rt$\u4e0e\u513f\u5b50\u7684\u5173\u7cfb\u65ad\u6389\uff0c\u628a\u9664\u6839\u4ee5\u5916\u7684\u70b9\u7684\u6df1\u5ea6\u90fd$-1$\n- $5$.\u4e0e$4$\u7c7b\u4f3c         \n\n\u524d\u9a71\u540e\u7ee7\u53ef\u4ee5\u7528$set$\u7ef4\u62a4\uff0c\u6df1\u5ea6\u53ef\u4ee5\u7528\u79bb\u6563\u5316\u540e\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\n## $\\text{Code}$\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#define N 110000 \nusing namespace std;\nint read()\n{\n\tint res=0,x=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){ if(ch=='-') x=-x; ch=getchar();}\n\twhile('0'<=ch&&ch<='9')\tres=(res<<1)+(res<<3)+(ch^'0'),ch=getchar();\n\treturn res*x;\n}\nconst int inf=2147483647;\nint a[N+1],b[N+1];\nint tag[N<<2|1];\nint c[N+1],len;\nvoid update(int p,int l,int r,int L,int R,int k)\n{\n//\tif(L>R)\n//\t\treturn;\n\tif(L<=l&&r<=R)\n\t{\n\t\ttag[p]+=k;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(L<=mid)\n\t\tupdate(p<<1,l,mid,L,R,k);\n\tif(R>mid)\n\t\tupdate(p<<1|1,mid+1,r,L,R,k);\n}\nint query(int p,int l,int r,int k)\n{\n\tif(l==r)\n\t\treturn tag[p];\n\ttag[p<<1]+=tag[p],tag[p<<1|1]+=tag[p];\n\ttag[p]=0;\n\tint mid=(l+r)>>1;\n\tif(k<=mid)\n\t\treturn query(p<<1,l,mid,k);\n\telse\n\t\treturn query(p<<1|1,mid+1,r,k);\n}\nset<int> t;\nset<int>::iterator it;\nint fa[N+1],ch[N+1][2],rt;\nint insert(int key)\n{\n\tit=t.upper_bound(key);\n\tint nxt=*it;\n\tit--;\n\tint pre=*it;\n\tint depp=-1,depn=-1;\n\tif(pre!=-inf)\n\t\tdepp=query(1,0,len,pre);\n\tif(nxt!=inf)\n\t\tdepn=query(1,0,len,nxt);\n//\tprintf(\"%d %d\\n\",depp,depn);\n\tif(depp==-1&&depn==-1)\n\t\tfa[key]=0,update(1,0,len,key,key,1-query(1,0,len,key)),rt=key;\n\telse\n\t\tif(depp>depn)\n\t\t\tfa[key]=pre,ch[pre][1]=key,update(1,0,len,key,key,depp+1-query(1,0,len,key));\n\t\telse\n\t\t\tfa[key]=nxt,ch[nxt][0]=key,update(1,0,len,key,key,depn+1-query(1,0,len,key));\n\tt.insert(key);\n\treturn query(1,0,len,key);\n}\nint rmin()\n{\n\tit=t.begin(),it++;\n\tint minn=*it;\n\tif(rt==minn)\n\t\treturn 1;\n\tint res=query(1,0,len,minn);\n\tint son=ch[minn][1];\n\tupdate(1,0,len,fa[minn],len,1),update(1,0,len,minn,minn,1-query(1,0,len,minn));\n\tfa[son]=fa[minn],ch[fa[minn]][0]=son;\n\tfa[minn]=0,ch[minn][1]=rt,fa[rt]=minn;\n\trt=minn;\n\treturn res;\n}\nint rmax()\n{\n\tit=t.end(),it--,it--;\n\tint maxn=*it;\n\tif(rt==maxn)\n\t\treturn 1;\n\tint res=query(1,0,len,maxn);\n\tint son=ch[maxn][0];\n\tupdate(1,0,len,0,fa[maxn],1),update(1,0,len,maxn,maxn,1-query(1,0,len,maxn));\n\tfa[son]=fa[maxn],ch[fa[maxn]][1]=son;\n\tfa[maxn]=0,ch[maxn][0]=rt,fa[rt]=maxn;\n\trt=maxn;\n\treturn res;\n}\nint delmin()\n{\n\tint res=rmin();\n\tupdate(1,0,len,0,len,-1);\n\tint s=ch[rt][1];\n\tfa[ch[rt][1]]=0,ch[rt][0]=ch[rt][1]=0;\n\tt.erase(rt);\n\trt=s;\n\treturn res;\n}\nint delmax()\n{\n\tint res=rmax();\n\tupdate(1,0,len,0,len,-1);\n\tint s=ch[rt][0];\n\tfa[ch[rt][0]]=0,ch[rt][0]=ch[rt][1]=0;\n\tt.erase(rt);\n\trt=s;\n\treturn res;\n}\nint main()\n{\n//\tfreopen(\"splay.in\",\"r\",stdin);\n//\tfreopen(\"splay.out\",\"w\",stdout);\n\tint m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta[i]=read();\n\t\tif(a[i]==1)\n\t\t\tc[i]=b[i]=read();\n\t}\n\tsort(c+1,c+1+m);\n\tlen=unique(c+1,c+1+m)-c-1;\n\tfor(int i=1;i<=m;i++)\n\t\tb[i]=lower_bound(c+1,c+1+len,b[i])-c;\n\tt.insert(-inf),t.insert(inf);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(a[i]==1)\n\t\t\tprintf(\"%d\\n\",insert(b[i]));\n\t\tif(a[i]==2)\n\t\t\tprintf(\"%d\\n\",rmin());\n\t\tif(a[i]==3)\n\t\t\tprintf(\"%d\\n\",rmax());\n\t\tif(a[i]==4)\n\t\t\tprintf(\"%d\\n\",delmin());\n\t\tif(a[i]==5)\n\t\t\tprintf(\"%d\\n\",delmax());\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596118341,
        "uid": 111475,
        "name": "doctorZ_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5904\u7406\u7684\u786e\u5f88\u7f8e\u5999\uff0c\u4f46\u662f\u4f9d\u65e7\u9700\u8981\u7ef4\u62a4\u539f\u6811\u7236\u4eb2\uff0c\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u591a\u6a21\u62df\u4e00\u4e0b\uff0c\u53ea\u7528splay\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u9898\n\nSplay+\u6570\u7ec4\u6a21\u62df\n\n\u6211\u4eec\u53d1\u73b0\u4ed6\u53ea\u8981\u6c42\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7684\u4fee\u6539\uff0c\u90a3\u4e48\u624b\u52a8\u627e\u4e00\u4e0b\u89c4\u5f8b\u5f88\u5bb9\u6613\u53d1\u73b0\n\u5bf9\u4e8e\u63d2\u5165\u6211\u4eec\u4e5f\u624b\u52a8\u627e\u4e00\u4e0b\u89c4\u5f8b\uff0c\u5bf9\u4e8e\u6811\u4e2d\u7684\u5927\u5c0f\u7d27\u90bb\u7684\u70b9\uff0c\u4ed6\u4eec\u5728\u6811\u5f62\u6001\u4e2d\u4e5f\u662f\u7d27\u90bb\u7684\uff0c\u6240\u4ee5\u6a21\u62df\u4e00\u4e0b\u5c31\u53ef\u4ee5\u627e\u5230\u89c4\u5f8b\uff08\u5373\u5728\u4e0dsplay\u7684\u524d\u63d0\u6811\u662f\u5f88\u591a\u94fe\u6784\u6210\u7684\uff09\n\n\u7136\u540e\u5f00simer\u548csimfa\u8bb0\u5f55\u539f\u6811\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u4fee\u6539\u4e0d\u4f1a\u5927\u5e45\u5ea6\u4fee\u6539\u539f\u6811\uff0c\u6240\u4ee5\u5bf9\u4e8esimer\u548csimfa\u7684\u4fee\u6539\u4e5f\u6bd4\u8f83\u53cb\u597d\n\n\u5e0c\u671b\u5728\u96be\u9898\u65b9\u9762\u80fd\u6709\u66f4\u591a\u7684\u4eba\u5206\u4eab\u9898\u89e3\uff0c\u4e92\u76f8\u5e2e\u52a9\uff0c\u8fd8\u80fd\u63d0\u5347\u81ea\u4fe1\uff0c\u7406\u6e05\u9898\u76ee\u601d\u8def\uff0c\u591a\u597d\u7684\u4e00\u4ef6\u4e8b\u60c5\uff01\n```c\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<stack>\nusing namespace std;\nconst int maxn=1e5+7;\nstack<int>sta;\nint n,m,cnt=1,simfa[maxn],dep[maxn],fa[maxn],son[maxn],\nt[maxn][2],w[maxn],rt,simer[maxn][2],laz[maxn],ans,simrt,\nrev;\nvoid up(int x)\n{\n    son[x]=son[t[x][0]]+son[t[x][1]]+1;\n}\nvoid downit(int x)\n{\n    if(!laz[x]) return ;\n    int l=t[x][0],r=t[x][1];\n    if(l) {dep[l]+=laz[x];laz[l]+=laz[x];}\n    if(r) {dep[r]+=laz[x];laz[r]+=laz[x];}\n    laz[x]=0;\n    \n}\nvoid Insert(int &x,int v)\n{\n    if(!x) \n    {\n        x=++cnt;w[x]=v;son[x]=1;return ;\n    }\n    downit(x);\n    if(v<w[x]) Insert(t[x][0],v);\n    else Insert(t[x][1],v);\n    up(x);fa[t[x][0]]=fa[t[x][1]]=x;\n}\nvoid rotate(int x,int &k)\n{\n    int y=fa[x],z=fa[y],d=t[y][1]==x;\n    if(y==k) k=x;\n    else t[z][t[z][1]==y]=x;\n    fa[x]=z;fa[y]=x;fa[t[x][d^1]]=y;\n    t[y][d]=t[x][d^1];t[x][d^1]=y;up(y);up(x);\n}\nvoid splay(int x,int &k)\n{\n    int xx=x;sta.push(xx);\n    while(fa[xx]) {xx=fa[xx];sta.push(xx);}\n    while(sta.size()) {downit(sta.top());sta.pop();}\n    while(x!=k)\n    {\n        int y=fa[x],z=fa[y];\n        if(y!=k)\n        {\n            if((t[y][0]==x)^(t[z][0]==y)) rotate(x,k);\n            else rotate(y,k);\n        }\n        rotate(x,k);\n    }\n}\nvoid solve2()\n{\n    int p1=rt,old=simrt;downit(p1);\n    while(t[p1][0]) {p1=t[p1][0];downit(p1);}simrt=p1;\n    splay(p1,rt);ans=dep[p1];int s=simer[p1][1];\n    if(ans==1) return ;\n    if(t[p1][1]) \n    {\n        dep[t[p1][1]]++;laz[t[p1][1]]++;\n        simfa[old]=p1;simer[p1][1]=old;\n    }\n    if(simfa[p1]) \n    {\n        splay(simfa[p1],t[p1][1]);int p2=simfa[p1];\n        if(t[p2][0]) {dep[t[p2][0]]--;laz[t[p2][0]]--;}\n        simer[simfa[p1]][0]=s;\n        if(s) simfa[s]=simfa[p1];\n        simfa[p1]=0;dep[p1]=1;rev=p1;\n    }\n}\nvoid solve3()\n{\n    int p1=rt;int old=simrt;downit(p1);\n    while(t[p1][1]) {p1=t[p1][1];downit(p1);}simrt=p1;\n    splay(p1,rt);ans=dep[p1];int s=simer[p1][0];\n    if(ans==1) return ;\n    if(t[p1][0]) \n    {\n        dep[t[p1][0]]++;laz[t[p1][0]]++;\n        simfa[old]=p1;simer[p1][0]=old;\n    }\n    if(simfa[p1])\n    {\n        splay(simfa[p1],t[p1][0]);int p2=simfa[p1];\n        if(t[p2][1]) {laz[t[p2][1]]--;dep[t[p2][1]]--;}\n        simer[simfa[p1]][1]=s;\n        if(s) simfa[s]=simfa[p1];\n        simfa[p1]=0;dep[p1]=1;rev=p1;\n    }\n}\nint find_hea(int x,int v)\n{\n\tif(!x) return -1e9;\n\tif(w[x]<v) return max(w[x],find_hea(t[x][1],v));\n\telse return find_hea(t[x][0],v);\n}\nint find_nxt(int x,int v)\n{\n\tif(!x) return 1e9;\n\tif(w[x]>v) return min(w[x],find_nxt(t[x][0],v));\n\telse return find_nxt(t[x][1],v);\n}\nint find_na(int x,int v)\n{\n\tif(w[x]==v) return x;\n\tif(w[x]<v) return find_na(t[x][1],v);\n\telse return find_na(t[x][0],v);\n}\nint main()\n{\n    scanf(\"%d\",&m);n=m;\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;ans=0;scanf(\"%d\",&x);\n        if(x==1)\n        {\n            scanf(\"%d\",&y);int de=0;\n            int p1=find_hea(rt,y),p2=find_nxt(rt,y);\n            if(p1!=-1e9)\n            {\n            \tp1=find_na(rt,p1);splay(p1,rt);\n            \tif(!simer[p1][1])\n            \t{\n            \t\tsimer[p1][1]=cnt+1;simfa[cnt+1]=p1;de=dep[p1];\n            \t}\n            }\n            if(p2!=1e9)\n            {\n            \tp2=find_na(rt,p2);splay(p2,rt);\n            \tif(!simer[p2][0])\n            \t{\n            \t\tsimer[p2][0]=cnt+1;simfa[cnt+1]=p2;de=dep[p2];\n            \t}\n            }\n            if(!de) simrt=cnt+1;ans=de+1;\n            dep[cnt+1]=de+1;Insert(rt,y);splay(cnt,rt);\n        }\n        if(x==2) solve2();\n        if(x==4)\n        {\n            solve2();\n            int p1=rt;simfa[simer[p1][1]]=0;\n            fa[t[rt][1]]=0;rt=t[rt][1];\n            simrt=simer[p1][1];\n            if(rt) {laz[rt]--;dep[rt]--;}\n        }\n        if(x==3) solve3();\n        if(x==5)\n        {\n            solve3();\n            int p1=rt;simfa[simer[p1][0]]=0;\n            simrt=simer[p1][0];rt=t[p1][0];\n            fa[rt]=0;t[p1][0]=0;\n            if(rt) {laz[rt]--;dep[rt]--;}\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1522551306,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n&emsp;&emsp;[luogu](https://www.luogu.com.cn/problem/P3721).\n\n# \u9898\u89e3\n\n&emsp;&emsp;\u6811\u72b6\u6570\u7ec4 + set\u3002\uff08\u603b\u7b97\u4e0d\u7528\u795e\u4ed9\u6570\u636e\u7ed3\u6784\u4e86qwq\u3002  \n\n&emsp;&emsp;~~\u7531\u4e8e\u4f5c\u8005\u5f88\u83dc\uff0c~~ \u53ef\u80fd\u4f1a\u8fc7\u4e8e\u8be6\u7ec6\uff0c\u8bf7[\u5927\u4f6c](https://www.luogu.com.cn/problem/P3724)\u4eec\u89c1\u8c05\u5450~  \n\n&emsp;&emsp;\u9996\u5148\uff0c\u5173\u4e8e \u201cspaly\u201d\uff0c\u53ef\u4ee5\u5148\u753b\u4e00\u753b\u56fe\u627e\u627e\u89c4\u5f8b\u3002  \n\n&emsp;&emsp;\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n![graph _1_.png](https://i.loli.net/2020/06/02/OKhMmt4NeQ7Wn5v.png)\n\n![graph _2_.png](https://i.loli.net/2020/06/02/l1ew7r8CE3LHmYk.png)\n\n![graph _3_.png](https://i.loli.net/2020/06/02/2vUSbxHuQamAoyg.png)\n\n![graph _4_.png](https://i.loli.net/2020/06/02/LgZBAdNiG6Yws7D.png)\n\n&emsp;&emsp;\u5982\u4e0a\u56db\u5e45\u56fe\u4f53\u73b0\u4e86\u628a\u6743\u503c\u6700\u5c0f\u7684 $6$ \u53f7\u7ed3\u70b9\u201cspaly\u201d\u5230\u6839\u7684\u8fc7\u7a0b\u3002\u76f4\u63a5\u89c2\u5bdf\u521d\u59cb\u72b6\u6001 P1 \u548c\u6700\u7ec8\u72b6\u6001 P4\uff0c\u53d1\u73b0\u9664\u4e86\u5173\u4e8e $6$ \u53f7\u7ed3\u70b9\u672c\u8eab\u53ca\u5176\u90bb\u63a5\u70b9\u5916\uff0c\u6811\u5f62\u6ca1\u6709\u6539\u53d8\uff01  \n\n&emsp;&emsp;\u8fd9\u63d0\u793a\u6211\u4eec\uff0c\u53ef\u4ee5\u628a\u6811\u5f62\u4e0e\u6df1\u5ea6\u4fe1\u606f**\u5206\u5f00\u7ef4\u62a4**\u3002\u4e3a\u4e86\u65b9\u4fbf\u5efa\u7acb\u7f16\u53f7\u4e0e\u952e\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c**\u79bb\u7ebf\u6240\u6709\u64cd\u4f5c\uff0c\u5e76\u79bb\u6563\u5316\u952e\u503c\u3002** \u6b64\u540e\uff0c\u4ee4\u4efb\u610f\u7ed3\u70b9\u7684\u7f16\u53f7 $u$ \u7b49\u4e8e\u5176\u952e\u503c $key_u$\u3002\u4e00\u6b65\u6b65\u6765\uff1a\n\n## \u7ef4\u62a4\u6811\u5f62\n\n&emsp;&emsp;\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u90fd\u4e0e\u6700\u5c0f\u6700\u5927\u503c\u6709\u5173\uff0c\u4e0d\u96be\u60f3\u5230\u7528 `std::set` \u6765\u52a8\u6001\u7ef4\u62a4\u5f53\u524d\u201cspaly\u201d\u4e0a\u5b58\u5728\u7684\u70b9\u6743\u3002  \n\n&emsp;&emsp;\u5bf9\u4e8e\u6bcf\u79cd\u64cd\u4f5c\uff1a\n\n### \u64cd\u4f5c $1$\n\n&emsp;&emsp;\u82e5\u6811\u7a7a\uff0c\u76f4\u63a5\u4ee4\u201cspaly\u201d\u7684\u6839\u4e3a\u8be5\u7ed3\u70b9\uff0c\u9000\u51fa\u3002  \n\n&emsp;&emsp;\u5426\u5219\uff0c\u5229\u7528 `set`\uff0c\u5c06\u5f53\u524d\u7684\u952e\u503c\u63d2\u5165 `set`\uff0c\u5e76\u53d6\u5f97 `set` \u4e2d\u4e0e\u5176\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4ee4\u4e3a $u,v$\u3002\uff08`set.insert()` \u4f1a\u8fd4\u56de\u63d2\u5165\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff09\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u201cspaly\u201d\u4e0a\u4efb\u610f\u7ed3\u70b9 $p<q$\uff0c\u82e5**\u4e0d\u5b58\u5728 $p<r<q$** \uff08\u4e5f\u5373\u662f $key_p<key_r<key_q$\uff09\uff0c\u5219 $p$ \u4e0e $q$ \u5b58\u5728**\u7236\u5b50\u5173\u7cfb**\u3002\u7b80\u5355\u5730\u8ba8\u8bba\u4e00\u4e0b\u5f53\u524d\u7ed3\u70b9\u6302\u5728 $u$ \u4e0b\u8fd8\u662f $v$ \u4e0b\u5373\u53ef\u3002\u4e0d\u5728\u8d58\u8ff0\u3002\n\n### \u64cd\u4f5c $2$\n\n&emsp;&emsp;\u5229\u7528 `set` \u76f4\u63a5\u627e\u5230\u6700\u5c0f\u503c\u7ed3\u70b9\u7f16\u53f7\uff0c\u4fee\u6539\u5176\u7236\u4eb2\u7684\u4fe1\u606f\uff0c\u7236\u4eb2\u7684\u513f\u5b50\u4fe1\u606f\uff0c\u6839\u7684\u4fe1\u606f\u3002\n\n### \u64cd\u4f5c $3$\n\n&emsp;&emsp;\u540c\u64cd\u4f5c $2$\uff0c\u4e0d\u8d58\u8ff0\u3002\n\n### \u64cd\u4f5c $4$\n\n&emsp;&emsp;\u5728\u64cd\u4f5c $2$ \u7684\u57fa\u7840\u4e0a\uff0c\u65ad\u7edd\u6839\u4e0e\u5176\u53f3\u513f\u5b50\uff08\u6700\u5c0f\u503c\u6ca1\u6709\u5de6\u513f\u5b50\uff09\u7684\u5173\u7cfb\uff0c\u4fee\u6539\u76f8\u5173\u4fe1\u606f\u3002\n\n### \u64cd\u4f5c $5$\n\n&emsp;&emsp;\u540c\u64cd\u4f5c $4$\uff0c\u4e0d\u8d58\u8ff0\u3002\n\n## \u7ef4\u62a4\u6df1\u5ea6\n\n&emsp;&emsp;\u6709\u56db\u79cd\u5f71\u54cd\u6df1\u5ea6\u7684\u5f62\u5f0f\uff1a\u63d2\u5165\u7ed3\u70b9\uff0c\u67d0\u5b50\u6811\u4e0a\u79fb\u4e00\u4f4d\uff08\u65cb\u8f6c\u6362\u7236\u4eb2\uff09\uff0c\u67d0\u7ed3\u70b9\u5230\u6839\uff0c\u53bb\u9664\u6839\u8282\u70b9\u3002\n\n&emsp;&emsp;\u5bf9\u4e8e\u540e\u4e24\u79cd\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u6240\u6709\u7ed3\u70b9\u7684\u6df1\u5ea6 $+1$ \u6216 $-1$\uff0c\u7b2c\u4e00\u79cd\u5219\u662f\u5355\u70b9\u67e5\u8be2\uff08\u67e5\u8be2\u7236\u4eb2\uff09\u548c\u5355\u70b9\u4fee\u6539\uff08\u66f4\u65b0\u513f\u5b50\uff09\uff1b\u7b2c\u4e8c\u79cd\u662f\u4ea6\u662f\u533a\u95f4 $-1$\u3002\n\n&emsp;&emsp;\u6240\u4ee5\uff0c\u7528\u4e00\u4e2a\u7ecf\u5178\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5e8f\u5217\u5dee\u5206\u5c31\u53ef\u4ee5\u652f\u6301\u6240\u6709\u64cd\u4f5c\u4e86\u3002  \n\n&emsp;&emsp;\u6700\u540e\u7ec6\u8bf4\u4e00\u4e0b\u7b2c\u4e8c\u79cd\uff0c\u8bbe\u4e0a\u65cb\u7684\u7ed3\u70b9\u4e3a $u$\uff0c\u5b83\u662f\u7236\u4eb2 $fa_u$ \u7684\u5de6\u513f\u5b50\u3002\u90a3\u4e48 $[u+1,fa_u-1]$ \u91cc\u7684\u7ed3\u70b9\u90fd\u5728 $fa_u$ \u7684\u53f3\u5b50\u6811\u5185\uff0c\u5c06\u5176\u533a\u95f4 $-1$\uff0c\u62b5\u6d88\u6389\u6574\u68f5\u6811\u7684\u533a\u95f4 $+1$\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u8be5\u5b50\u6811\u6811\u6df1\u4e0d\u53d8\u3002$u$ \u4f5c\u4e3a $fa_u$ \u7684\u53f3\u513f\u5b50\u65f6\u540c\u7406\u3002\u5176\u4f59\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u7ef4\u62a4\u6811\u5f62\u7684\u6b65\u9aa4\u91cc\u52a0\u4e0a\u5bf9\u6811\u72b6\u6570\u7ec4\u7684\u7ef4\u62a4\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n&emsp;&emsp;~~\u771f\u7684\u77edw\u3002~~\n\n```cpp\n#include <set>\n#include <cstdio>\n#include <algorithm>\n\ninline int rint () {\n\tint x = 0; char s = getchar ();\n\tfor ( ; s < '0' || '9' < s; s = getchar () );\n\tfor ( ; '0' <= s && s <= '9'; s = getchar () ) x = x * 10 + ( s ^ '0' );\n\treturn x;\n}\n\ninline void wint ( const int x ) {\n\tif ( 9 < x ) wint ( x / 10 );\n\tputchar ( x % 10 ^ '0' );\n}\n\nconst int MAXN = 1e5;\nint n, kcnt, ktmp[MAXN + 5];\nint root, fa[MAXN + 5], ch[MAXN + 5][2]; // spaly tree.\nstd :: set<int> aprk; // appearing keys.\nstd :: set<int> :: iterator it;\n\nstruct Event { int opt, key; } evt[MAXN + 5];\n\nclass BinaryIndexTree {\nprivate:\n\tint siz, val[MAXN + 5];\n\tinline int lowbit ( const int x ) const { return x & -x; }\n\npublic:\n\tinline void set ( const int s ) { siz = s; }\n\tinline void add ( const int x, const int v ) { for ( int i = x; i <= siz; i += lowbit ( i ) ) val[i] += v; }\n\tinline void addsec ( const int l, const int r, const int x ) { add ( l, x ), add ( r + 1, -x ); }\n\tinline int sum ( const int x ) { int ret = 0; for ( int i = x; i; i -= lowbit ( i ) ) ret += val[i]; return ret; }\n\tinline void assign ( const int x, const int v ) { addsec ( x, x, v - sum ( x ) ); }\n} bit;\n\ninline int insert ( const int k ) {\n\tit = aprk.insert ( k ).first;\n\tif ( ! root ) return bit.assign ( root = k, 1 ), 1;\n\tif ( it != aprk.begin () ) {\n\t\tif ( ! ch[*-- it][1] ) ch[*it][1] = k, fa[k] = *it;\n\t\t++ it;\n\t}\n\tif ( ! fa[k] ) ch[*++ it][0] = k, fa[k] = *it;\n\tint ret = bit.sum ( fa[k] ) + 1;\n\treturn bit.assign ( k, ret ), ret;\n}\n\ninline int getMin () {\n\tint p = *aprk.begin (), ret = bit.sum ( p );\n\tif ( root == p ) return 1;\n\tif ( p + 1 != fa[p] ) bit.addsec ( p + 1, fa[p] - 1, -1 );\n\tbit.addsec ( 1, kcnt, 1 ), bit.assign ( p, 1 );\n\tif ( ch[p][1] ) fa[ch[p][1]] = fa[p];\n\tch[fa[p]][0] = ch[p][1];\n\tfa[root] = p, fa[p] = 0, ch[p][1] = root, root = p;\n\treturn ret;\n}\n\ninline int getMax () {\n\tint p = *-- ( it = aprk.end () ), ret = bit.sum ( p );\n\tif ( root == p ) return 1;\n\tif ( fa[p] + 1 != p ) bit.addsec ( fa[p] + 1, p - 1, -1 );\n\tbit.addsec ( 1, kcnt, 1 ), bit.assign ( p, 1 );\n\tif ( ch[p][0] ) fa[ch[p][0]] = fa[p];\n\tch[fa[p]][1] = ch[p][0];\n\tfa[root] = p, fa[p] = 0, ch[p][0] = root, root = p;\n\treturn ret;\n}\n\ninline int remMin () {\n\tint ret = getMin ();\n\tbit.addsec ( 1, kcnt, -1 );\n\tfa[root = ch[root][1]] = 0, aprk.erase ( *aprk.begin () );\n\treturn ret;\n}\n\ninline int remMax () {\n\tint ret = getMax ();\n\tbit.addsec ( 1, kcnt, -1 );\n\tfa[root = ch[root][0]] = 0, aprk.erase ( -- ( it = aprk.end () ) );\n\treturn ret;\n}\n\nint main () {\n\tn = rint ();\n\tfor ( int i = 1; i <= n; ++ i ) {\n\t\tif ( ( evt[i].opt = rint () ) == 1 ) {\n\t\t\tevt[i].key = ktmp[++ kcnt] = rint ();\n\t\t}\n\t}\n\tstd :: sort ( ktmp + 1, ktmp + kcnt + 1 );\n\tbit.set ( kcnt );\n\tfor ( int i = 1, opt, ans; i <= n; ++ i ) {\n\t\topt = evt[i].opt;\n\t\tif ( opt == 1 ) ans = insert ( std :: lower_bound ( ktmp + 1, ktmp + kcnt + 1, evt[i].key ) - ktmp );\n\t\telse if ( opt == 2 ) ans = getMin ();\n\t\telse if ( opt == 3 ) ans = getMax ();\n\t\telse if ( opt == 4 ) ans = remMin ();\n\t\telse ans = remMax ();\n\t\twint ( ans ), putchar ( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1591101165,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "\u6709\u70b9\u610f\u601d\u7684 ds \u9898\u3002\n\n\u7136\u800c\u5bf9\u4e8e\u6211\u8fd9\u79cd\u53ea\u4f1a\u66b4\u529b\u7684\u9009\u624b\u6765\u8bf4\u5c31\u6ca1\u6709\u4efb\u4f55\u6280\u5de7\u53ef\u8a00\u4e86\u3002\n\n\u9996\u5148\u624b\u73a9\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u6b21 spaly \u5c31\u662f\u628a\u5b83\u7684\u552f\u4e00\u7684\u513f\u5b50\u63a5\u5230\u5b83\u7684\u7236\u4eb2\u4e0a\u9762\uff0c\u7136\u540e\u628a\u6839\u63a5\u5230\u5b83\u4e0b\u9762\u3002\n\n\u6211\u4eec\u7528 lct \u53bb\u7ef4\u62a4\u8fd9\u4e2a spaly \u7684\u5f62\u6001\u3002\u95ee\u9898\u662f\u6211\u4eec\u600e\u4e48\u627e\u5230\u8fd9\u4e2a\u552f\u4e00\u7684\u513f\u5b50\u5462\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7ef4\u62a4\u865a\u5b50\u6811\u4fe1\u606f\u7684 trick\uff0c\u7528\u4e00\u4e2a `set` \u53bb\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\uff08\u6700\u591a\u4e24\u4e2a\uff09\u865a\u513f\u5b50\u3002\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u4fe1\u606f\u7684\u7ef4\u62a4\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u63d2\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5b83\u7684\u7236\u8282\u70b9\u4e0d\u662f\u5b83\u7684\u524d\u9a71\u5c31\u662f\u5b83\u7684\u540e\u7ee7\u3002\u6211\u4eec\u627e\u5230\u5b83\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u6613\u5f97\u8fd9\u4e24\u4e2a\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\u3002\u6240\u4ee5\u6211\u4eec\u627e\u5230\u6bd4\u8f83\u6df1\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u5c31\u662f\u65b0\u8282\u70b9\u7684\u7236\u4eb2\u3002\n\n\u7136\u540e\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u4ee3\u7801\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c31\u5199\u4e86\u8fd9\u4e48\u957f\u2026\u2026\n```cpp\n#include<set>\n#include<map>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxm=1e5+5;\nint m;\nint fa[maxm],ch[maxm][2],size[maxm],mn[maxm];\nset<int> ich[maxm];\nvoid pushup(int x){\n\tsize[x]=1;\n\tif(ch[x][0]) size[x]+=size[ch[x][0]];\n\tif(ch[x][1]) size[x]+=size[ch[x][1]];\n\tif(ch[x][0]) mn[x]=mn[ch[x][0]];\n\telse mn[x]=x;\n}\nbool isroot(int x){\n\treturn !fa[x]||(ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x);\n}\nvoid rotate(int x){\n\tint y=fa[x],z=fa[fa[x]];\n\tif(!isroot(y)) ch[z][ch[z][1]==y]=x;\n\tbool d=ch[y][1]==x;\n\tint k=ch[x][!d];\n\tch[x][!d]=y;\n\tch[y][d]=k;\n\tfa[x]=z;\n\tfa[y]=x;\n\tif(k) fa[k]=y;\n\tpushup(y);\n\tpushup(x);\n}\nvoid splay(int x){\n\twhile(!isroot(x)){\n\t\tint y=fa[x],z=fa[fa[x]];\n\t\tif(!isroot(y)){\n\t\t\tif((ch[y][1]==x)^(ch[z][1]==y)) rotate(x);\n\t\t\telse rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n}\nvoid access(int x){\n\tint y=0;\n\twhile(x){\n\t\tsplay(x);\n\t\tif(ch[x][1]) ich[x].insert(mn[ch[x][1]]);\n\t\tif(y) ich[x].erase(y);\n\t\tch[x][1]=y;\n\t\tpushup(x);\n\t\ty=x;\n\t\tx=fa[x];\n\t}\n}\nvoid link(int x,int y){\n\tfa[x]=y;\n\tich[y].insert(x);\n}\nvoid cut(int x,int y){\n\taccess(y);\n\tsplay(x);\n\tfa[x]=0;\n\tich[y].erase(x);\n}\nint findroot(int x){\n\taccess(x);\n\tsplay(x);\n\twhile(ch[x][0]) x=ch[x][0];\n\tsplay(x);\n\treturn x;\n}\nint findfa(int x){\n\taccess(x);\n\tsplay(x);\n\tif(!ch[x][0]) return 0;\n\tx=ch[x][0];\n\twhile(ch[x][1]) x=ch[x][1];\n\tsplay(x);\n\treturn x;\n}\nint get_dep(int x){\n\taccess(x);\n\tsplay(x);\n\treturn ch[x][0]?size[ch[x][0]]+1:1;\n}\nset<int> s;\ntypedef set<int>::iterator iter;\nvoid spaly(int u){\n\tint y=findfa(u);\n\taccess(u);\n\tif(!ich[u].empty()){\n\t\tint z=*ich[u].begin();\n\t\tif(y){\n\t\t\tcut(z,u);\n\t\t\tlink(z,y);\n\t\t}\n\t}\n\tif(y){\n\t\tcut(u,y);\n\t\tlink(findroot(y),u);\n\t}\n}\nvoid del(int u){\n\tint y=findfa(u);\n\taccess(u);\n\tif(!ich[u].empty()){\n\t\tint z=*ich[u].begin();\n\t\tcut(z,u);\n\t\tif(y) link(z,y);\n\t}\n\tif(y) cut(u,y);\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tm=readint();\n\tfor(int i=1;i<=m;i++) pushup(i);\n\tmap<int,int> mp;\n\twhile(m--){\n\t\tint c=readint();\n\t\tif(c==1){\n\t\t\tint key=readint();\n\t\t\tif(!mp.count(key)){\n\t\t\t\tint res=mp.size();\n\t\t\t\tmp[key]=res+1;\n\t\t\t}\n\t\t\tint u=mp[key];\n\t\t\tif(!s.empty()){\n\t\t\t\titer it=s.lower_bound(key);\n\t\t\t\tif(it==s.begin()) link(u,mp[*it]);\n\t\t\t\telse if(it==s.end()) link(u,mp[*--it]);\n\t\t\t\telse{\n\t\t\t\t\tint pre,suc=mp[*it];\n\t\t\t\t\tpre=mp[*--it];\n\t\t\t\t\tif(get_dep(pre)<get_dep(suc)) link(u,suc);\n\t\t\t\t\telse link(u,pre);\n\t\t\t\t}\n\t\t\t}\n\t\t\ts.insert(key);\n\t\t\tprintf(\"%d\\n\",get_dep(u));\n\t\t}\n\t\telse if(c==2){\n\t\t\tint u=mp[*s.begin()];\n\t\t\tprintf(\"%d\\n\",get_dep(u));\n\t\t\tspaly(u);\n\t\t}\n\t\telse if(c==3){\n\t\t\tint u=mp[*--s.end()];\n\t\t\tprintf(\"%d\\n\",get_dep(u));\n\t\t\tspaly(u);\n\t\t}\n\t\telse if(c==4){\n\t\t\tint u=mp[*s.begin()];\n\t\t\tprintf(\"%d\\n\",get_dep(u));\n\t\t\tdel(u);\n\t\t\ts.erase(s.begin());\n\t\t}\n\t\telse{\n\t\t\tint u=mp[*--s.end()];\n\t\t\tprintf(\"%d\\n\",get_dep(u));\n\t\t\tdel(u);\n\t\t\ts.erase(--s.end());\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1589891186,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3721 \u3010[AH2017/HNOI2017]\u5355\u65cb\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&emsp;&emsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3722)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&emsp;&emsp;\u6700\u5999\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u8fd9\u9053\u9898\u5176\u5b9e\u662f**\u7528\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6a21\u62df\u53e6\u4e00\u79cd\u6570\u636e\u7ed3\u6784**\uff01  \n&emsp;&emsp;\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6df1\u5ea6\u548c\u6811\u7684\u7ed3\u6784\uff0c\u4ee5\u4e0b\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u8fdb\u884c\u5206\u522b\u8ba8\u8bba\u3002  \n\n### \u63d2\u5165\u4e00\u4e2a\u65b0\u8282\u70b9  \n&emsp;&emsp;\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u65b0\u8282\u70b9\u4e00\u5b9a\u4f1a**\u6210\u4e3a\u81ea\u5df1\u7684\u524d\u9a71\u6216\u8005\u540e\u7ee7\u4e2d\u6df1\u5ea6\u8f83\u5927\u8005\u7684\u513f\u5b50**\u3002  \n&emsp;&emsp;\u7136\u540e\u53ef\u4ee5\u66f4\u65b0\u6df1\u5ea6\u548c\u6811\u7684\u7ed3\u6784\u3002  \n### \u5355\u65cb\u6700\u5c0f\u503c  \n&emsp;&emsp;\u53d1\u73b0\u6811\u4f1a\u6709\u5982\u4e0b\u7684\u53d8\u5316\uff1a  \n&emsp;&emsp;&emsp;&emsp;\u5982\u679c\u81ea\u5df1\u6709\u513f\u5b50\uff0c\u90a3\u4e48\u5b83\u53ea\u4f1a\u662f\u81ea\u5df1\u7684\u53f3\u513f\u5b50\uff1b\u65cb\u8f6c\u540e\uff0c**\u5b83\u4f1a\u63a5\u5230\u81ea\u5df1\u539f\u5148\u7684\u7236\u4eb2\u4e0a**\u3002  \n&emsp;&emsp;&emsp;&emsp;**\u9664\u4e86\u81ea\u5df1\u7684\u513f\u5b50\u4ee5\u5916\uff0c\u5176\u5b83\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u90fd\u4f1a +1** \u3002  \n&emsp;&emsp;&emsp;&emsp;**\u539f\u5148\u7684\u6839\u53d8\u6210\u4e86\u6700\u5c0f\u503c\u7684\u513f\u5b50**\uff0c**\u6839\u968f\u540e\u53d8\u6210\u6700\u5c0f\u503c**\u3002  \n&emsp;&emsp;\u5355\u65cb\u6700\u5927\u503c\u540c\u7406\u5206\u6790\u3002  \n### \u5355\u65cb\u6700\u5c0f\u503c\u5e76\u5220\u9664  \n&emsp;&emsp;\u5148\u6a21\u62df\u597d\u5355\u65cb\u7684\u4fee\u6539\uff0c\u7136\u540e\u8003\u8651**\u65cb\u8f6c\u540e**\u7684\u53d8\u5316\uff1a  \n&emsp;&emsp;&emsp;&emsp;**\u6240\u6709\u8282\u70b9\u6df1\u5ea6 -1** \u3002  \n&emsp;&emsp;&emsp;&emsp;**\u65ad\u5f00\u6700\u5c0f\u503c\u548c\u5b83\u7684\u53f3\u513f\u5b50\u7684\u8fb9\uff0c\u6839\u53d8\u4e3a\u5b83\u7684\u53f3\u513f\u5b50**\u3002    \n&emsp;&emsp;\u5355\u65cb\u6700\u5927\u503c\u5e76\u5220\u9664\u540c\u7406\u5206\u6790\u3002  \n\n&emsp;&emsp;\u53d1\u73b0\u6811\u7684\u6df1\u5ea6\u7684\u4fee\u6539\u5b9e\u9645\u4e0a\u53ef\u4ee5\u7406\u89e3\u4e3a**\u503c\u57df\u4e0a\u4e00\u6bb5\u533a\u95f4\u7684\u52a0\u51cf**\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff1b\u524d\u9a71\u540e\u7ee7\u4e5f\u53ef\u4ee5\u987a\u4fbf\u7528\u5b83\u7ef4\u62a4\u4e86\u3002  \n&emsp;&emsp;\u4e2d\u9014\u6211\u4eec\u9700\u8981\u7528 map \u6765\u7ef4\u62a4\u6811\u7684\u5f62\u6001\uff0c\u6216\u8005\u79bb\u6563\u5316\u4e4b\u540e\u76f4\u63a5\u5b58\u4e0b\u6765\u4e5f\u53ef\u4ee5\u3002  \n&emsp;&emsp;\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log_2|V|)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <map>\n#include <cstdio>\nusing namespace std;\n\nconst int up = 1e9/*4*/;\nconst int MAXN = 1e5 + 5, MAXLOG = 30, MAXS = MAXN * MAXLOG/*205*/;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nmap<int, int> fa, ch[2];\n\nint siz[MAXS], dep[MAXS], tag[MAXS], lch[MAXS], rch[MAXS];\nint tot, rt, sgrt;\n\nvoid upt( const int x ) { siz[x] = siz[lch[x]] + siz[rch[x]]; }\nvoid add( const int x, const int v ) { dep[x] += siz[x] * v, tag[x] += v; }\nvoid normalize( const int x ) { if( tag[x] ) add( lch[x], tag[x] ), add( rch[x], tag[x] ), tag[x] = 0; }\n\nvoid setNode( int &u, const int l, const int r, const int pos, const int v )\n{\n\tif( ! u ) u = ++ tot;\n\tif( l == r ) { siz[u] += v; return ; }\n\tint mid = l + r >> 1; normalize( u );\n\tif( pos <= mid ) setNode( lch[u], l, mid, pos, v );\n\telse setNode( rch[u], mid + 1, r, pos, v );\n\tupt( u );\n}\n\nvoid update( int &u, const int l, const int r, const int segL, const int segR, const int v )\n{\n\tif( ! u ) u = ++ tot;\n\tif( segL <= l && r <= segR ) { add( u, v ); return ; }\n\tint mid = l + r >> 1; normalize( u );\n\tif( segL <= mid ) update( lch[u], l, mid, segL, segR, v );\n\tif( mid < segR ) update( rch[u], mid + 1, r, segL, segR, v );\n\tupt( u );\n}\n\nint query( const int u, const int l, const int r, const int segL, const int segR )\n{\n\tif( ! u ) return 0;\n\tif( segL <= l && r <= segR ) return siz[u];\n\tint mid = l + r >> 1, ret = 0; normalize( u );\n\tif( segL <= mid ) ret += query( lch[u], l, mid, segL, segR );\n\tif( mid < segR ) ret += query( rch[u], mid + 1, r, segL, segR );\n\treturn ret;\n}\n\nint Kth( const int u, const int l, const int r, const int rnk )\n{\n\tif( l == r ) return l;\n\tint mid = l + r >> 1; normalize( u );\n\tif( rnk <= siz[lch[u]] ) return Kth( lch[u], l, mid, rnk );\n\treturn Kth( rch[u], mid + 1, r, rnk - siz[lch[u]] );\n}\n\nint getDep( const int u, const int l, const int r, const int pos )\n{\n\tif( l == r ) return dep[u];\n\tint mid = l + r >> 1; normalize( u );\n\tif( pos <= mid ) return getDep( lch[u], l, mid, pos );\n\treturn getDep( rch[u], mid + 1, r, pos );\n}\n\nint Kth( const int rnk ) { if( rnk <= 0 ) return -1; if( rnk > siz[sgrt] ) return up + 1; return Kth( sgrt, 1, up, rnk ); }\nint getDep( const int id ) { if( id < 0 || id > up ) return -0x3f3f3f3f; return getDep( sgrt, 1, up, id ); }\n\nint getMx( const int u, const int l, const int r )\n{\n\tif( l == r ) return l;\n\tint mid = l + r >> 1; normalize( u );\n\tif( siz[rch[u]] ) return getMx( rch[u], mid + 1, r );\n\treturn getMx( lch[u], l, mid );\n}\n\nint getMn( const int u, const int l, const int r )\n{\n\tif( l == r ) return l;\n\tint mid = l + r >> 1; normalize( u );\n\tif( siz[lch[u]] ) return getMn( lch[u], l, mid );\n\treturn getMn( rch[u], mid + 1, r );\n}\n\nint rotMn()\n{\n\tint id = getMn( sgrt, 1, up ), rig = ch[1][id], y = fa[id];\n\tif( rt == id ) return 1;\n\tif( rig ) fa[rig] = y; fa[rt] = id, fa[id] = 0;\n\tch[1][id] = rt, ch[0][y] = rig, rt = id;\n\tint ret = getDep( id );\n\tupdate( sgrt, 1, up, y, up, 1 );\n\tupdate( sgrt, 1, up, id, id, -ret + 1 );\n\treturn ret;\n}\n\nint rotMx()\n{\n\tint id = getMx( sgrt, 1, up ), lef = ch[0][id], y = fa[id];\n\tif( rt == id ) return 1;\n\tif( lef ) fa[lef] = y; fa[rt] = id, fa[id] = 0;\n\tch[0][id] = rt, ch[1][y] = lef, rt = id;\n\tint ret = getDep( id );\n\tupdate( sgrt, 1, up, 1, y, 1 );\n\tupdate( sgrt, 1, up, id, id, -ret + 1 );\n\treturn ret;\n}\n\nint main()\n{\n\tint op, k, N;\n\tread( N );\n\twhile( N -- )\n\t{\n\t\tread( op );\n\t\tif( op == 1 )\n\t\t{\n\t\t\tread( k ), setNode( sgrt, 1, up, k, 1 );\n\t\t\tif( siz[1] == 1 ) \n\t\t\t{ \n\t\t\t\tfa[rt = k] = 0, update( sgrt, 1, up, k, k, 1 ); \n\t\t\t\tputs( \"1\" );\n\t\t\t\tcontinue; \n\t\t\t}\n\t\t\tint rnk = query( sgrt, 1, up, 1, k );\n\t\t\tint pre = Kth( rnk - 1 ), suf = Kth( rnk + 1 );\n\t\t\tint dpre = getDep( pre ), dsuf = getDep( suf );\n\t\t\tif( dpre > dsuf ) fa[k] = pre, ch[1][pre] = k, update( sgrt, 1, up, k, k, dpre + 1 );\n\t\t\telse fa[k] = suf, ch[0][suf] = k, update( sgrt, 1, up, k, k, dsuf + 1 );\n\t\t\twrite( getDep( k ) ), putchar( '\\n' );\n\t\t}\n\t\tif( op == 2 ) write( rotMn() ), putchar( '\\n' );\n\t\tif( op == 3 ) write( rotMx() ), putchar( '\\n' );\n\t\tif( op == 4 ) \n\t\t{\n\t\t\tint ans = rotMn(), tmp = rt, y = ch[1][tmp];\n\t\t\tupdate( sgrt, 1, up, tmp + 1, up, -1 );\n\t\t\tupdate( sgrt, 1, up, tmp, tmp, - ans );\n\t\t\tif( y ) fa[y] = 0; ch[1][tmp] = 0, rt = y;\n\t\t\tsetNode( sgrt, 1, up, tmp, -1 );\n\t\t\twrite( ans ), putchar( '\\n' );\n\t\t}\n\t\tif( op == 5 )\n\t\t{\n\t\t\tint ans = rotMx(), tmp = rt, y = ch[0][tmp];\n\t\t\tupdate( sgrt, 1, up, 1, tmp - 1, -1 );\n\t\t\tupdate( sgrt, 1, up, tmp, tmp, -ans );\n\t\t\tif( y ) fa[y] = 0; ch[0][tmp] = 0, rt = y;\n\t\t\tsetNode( sgrt, 1, up, tmp, -1 );\n\t\t\twrite( ans ), putchar( '\\n' );\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1591163574,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[AH2017/HNOI2017]\u5355\u65cb"
    }
]