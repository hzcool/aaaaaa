[
    {
        "content": "\u8fd9\u9898\u7684\u90e8\u5206\u5206\u53ef\u4ee5\u7528\u9ad8\u65af\u6d88\u5143\u89e3\u5f02\u6216\u65b9\u7a0b\u7ec4\u89e3\u51b3\u3002\u5373\n\n$$\\oplus_{e\\in edge_u}x_e=col_u$$\n\n$edge_u$\u8868\u793a\u4e0e$u$\u76f8\u90bb\u7684\u8fb9\u3002\n\n\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u7b54\u6848\u5c31\u662f$2^{\u81ea\u7531\u5143\u7684\u6570\u91cf}$\uff0c\u4e5f\u5c31\u662f\u8981\u6c42\u77e9\u9635\u7684\u79e9($=$m-\u81ea\u7531\u5143\u6570)\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u80fd\u9009\u51fa\u7684\u7ebf\u6027\u6781\u5927\u65e0\u5173\u7ec4\u4e3a$n-1$(\u56e0\u4e3a\u786e\u5b9a\u4e86$n-1$\u4e2a\u70b9\u65f6\uff0c\u5269\u4e0b\u7684\u90a3\u4e2a\u70b9\u4e00\u5b9a\u786e\u5b9a)\u3002\u6240\u4ee5\u77e9\u9635\u7684\u79e9\u4e3a$n-p$\uff0c\u81ea\u7531\u5143\u7684\u6570\u91cf\u4e3a$m-n+p$\u3002\u7b54\u6848\u4e3a$2^{m-n+p}$\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5219\u5199\u4e2a$tarjan$\u6c42\u8fde\u901a\u6027\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 1000005, mod = 1e9 + 7;\n\nint pow2[maxn];\nint n, m;\n\nstruct edge\n{\n\tint to, next;\n} e[maxn];\nint h[maxn], tot;\n\nchar S[maxn];\nint dfn[maxn], low[maxn], sz[maxn], bel[maxn], flag[maxn], sub[maxn], cut[maxn], deg[maxn], now, Time;\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\ninline void add(int u, int v)\n{\n\te[++tot] = (edge) {v, h[u]}; h[u] = tot; ++deg[u];\n\te[++tot] = (edge) {u, h[v]}; h[v] = tot; ++deg[v];\n}\n\nvoid tarjan(int u, int fa = 0)\n{\n\tlow[u] = dfn[u] = ++Time;\n\tflag[u] = 1; sz[u] = S[u] == '1';\n\tbel[u] = now;\n\tfor (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v, u);\n\t\t\tsz[u] += sz[v];\n\t\t\tif (low[v] >= dfn[u]) {\n\t\t\t\t++cut[u]; flag[u] &= (sz[v] & 1) == 0;\n\t\t\t\tsub[u] += sz[v];\n\t\t\t} else low[u] = min(low[u], low[v]);\n\t\t} else if (v != fa) low[u] = min(low[u], dfn[v]);\n\tif (!fa) --cut[u];\n}\n\nint main()\n{\n\tpow2[0] = 1;\n\tfor (int i = 1; i <= 100000; ++i) pow2[i] = pow2[i - 1] * 2 % mod;\n\n\tint T = gi();\n\twhile (T--) {\n\t\tn = gi(); m = gi();\n\t\tmemset(sz + 1, 0, sizeof(int) * n);\n\t\tmemset(deg + 1, 0, sizeof(int) * n);\n\t\tmemset(sub + 1, 0, sizeof(int) * n);\n\t\tmemset(cut + 1, 0, sizeof(int) * n);\n\t\tmemset(h + 1, 0, sizeof(int) * n); tot = 0;\n\t\tmemset(dfn + 1, 0, sizeof(int) * n); Time = 0;\n\t\tfor (int i = 1; i <= m; ++i) add(gi(), gi());\n\t\tscanf(\"%s\", S + 1);\n\n\t\tint cnt = 0, cnt_odd = 0;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tif (!dfn[i]) {\n\t\t\t\tnow = i;\n\t\t\t\ttarjan(i); ++cnt;\n\t\t\t\tcnt_odd += sz[i] & 1;\n\t\t\t}\n\n\t\tint ans = m - n + cnt;\n\t\tprintf(\"%d\", cnt_odd ? 0 : pow2[ans]);\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tif (!deg[i]) printf(\" %d\", cnt_odd - sz[i] == 0 ? pow2[ans] : 0);\n\t\t\telse {\n\t\t\t\tif (flag[i] && (((sz[bel[i]] - (S[i] == '1') - sub[i]) & 1) == 0) && cnt_odd - (sz[bel[i]] & 1) == 0)\n\t\t\t\t\tprintf(\" %d\", pow2[ans - deg[i] + 1 + cut[i]]);\n\t\t\t\telse printf(\" 0\");\n\t\t\t}\n\t\t}\n\t\tputs(\"\");\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1551178832,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4494 \u3010[HAOI2018]\u53cd\u8272\u6e38\u620f\u3011"
    },
    {
        "content": "\n\u5148\u8003\u8651\u4e00\u4e2a\u7ecf\u5178\u9898\uff0c\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6709\u7684\u70b9\u8981\u6c42\u5ea6\u6570\u4e3a\u5947\u6570\uff0c\u6709\u7684\u4e3a\u5076\u6570\uff0c\u6c42\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u4f1a\u6709\u4e00\u4e2a\u7236\u4eb2\u6765\u8c03\u6574\u5176\u5ea6\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5224\u65ad\u5176\u5230\u5176\u7236\u4eb2\u7684\u8fb9\u80fd\u5426\u4fdd\u7559\u5373\u53ef\u3002\n\n\u6362\u800c\u8a00\u4e4b\u53ea\u8981\u4e0d\u5b58\u5728\u5947\u6570\u4e2a\u5ea6\u6570\u8981\u6c42\u4e3a\u5947\u6570\u7684\u70b9\u90a3\u4e48\u603b\u80fd\u6784\u6210\u51fa\u6765\u4e00\u4e2a\u5408\u6cd5\u89e3\uff0c\u4e14\u8fd9\u4e2a\u5408\u6cd5\u89e3\u56fa\u5b9a\u3002\n\n\u8003\u8651\u672c\u9898\u505a\u6cd5\uff0c\u6211\u4eec\u968f\u4fbf\u641e\u51fa\u4e00\u68f5\u751f\u6210\u6811\uff0c\u90a3\u4e48\u53ea\u8981\u4e0d\u5b58\u5728\u4e24\u4e2a\u70b9\u5ea6\u6570\u8981\u6c42\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u5916\u90e8\u7684\u8fb9\u65e0\u8bba\u600e\u4e48\u9009\u90fd\u53ef\u4ee5\u89c6\u4e3a\u4e0a\u8ff0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u603b\u80fd\u591f\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u89e3\u3002\n\n\u6240\u4ee5\u6b64\u65f6\u7684\u7b54\u6848\u4e3a $2^{m+1-n}$ \n\n\u73b0\u5728\u8003\u8651\u5220\u70b9\u4e4b\u540e\u600e\u4e48\u505a\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u5220\u70b9\u4e4b\u540e\u53ef\u80fd\u4f1a\u7834\u574f\u8fde\u901a\u6027\u3002\u5bf9\u4e8e\u53ef\u80fd\u7684\u591a\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5757\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u5bf9\u539f\u56fe\u5efa\u7acb\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u90a3\u4e48\u5220\u9664\u4e00\u4e2a\u70b9\u4e4b\u540e\u4f1a\u6709\u5176\u8fde\u63a5\u7684\u65b9\u70b9\u7684\u8fb9\u90fd\u4f1a\u88ab\u7834\u574f\uff08\u56e0\u4e3a\u6b64\u70b9\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u5272\u70b9\uff09\u8bbe\u70b9 $i$ \u7684\u5ea6\u6570\u4e3a $x$\uff0c\u90a3\u4e48\u5220\u9664\u4e4b\u540e\u5269\u4f59\u7684\u8fb9\u6570\u4e3a $m-x$\uff0c\u6b64\u65f6\u7b54\u6848\u4e3a $2^{(m-x)+cnt-(n-1)}$\uff0c\u5176\u4e2d $cnt$ \u4e3a\u8054\u901a\u5757\u6570\u91cf\uff0c\u5373\u5176\u5728\u5706\u65b9\u6811\u4e0a\u7684\u51fa\u5ea6\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u4e2a\u8054\u901a\u5757\u5185\u9700\u8981\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u65f6\u5019\u4e3a\u5947\u6570\u5373\u53ef\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5728\u5e7f\u4e49\u5706\u65b9\u6811\u4e0a\u7edf\u8ba1\uff0c\u590d\u6742\u5ea6 $\\mathcal O(n+m)$",
        "postTime": 1592573882,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4494 \u3010[HAOI2018]\u53cd\u8272\u6e38\u620f\u3011"
    },
    {
        "content": "\u7ed9\u4f60\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u7684\u4e00\u79cd\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u540c\u65f6\u53cd\u8f6c\u4e0e\u5176\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u7684\u989c\u8272\u6216\u8005\u4e0d\u64cd\u4f5c\u3002\u95ee\u539f\u56fe\u548c\u5bf9\u4e8e\u5220\u6389\u4efb\u4f55\u4e00\u4e2a\u70b9\u548c\u4e0e\u5176\u76f8\u90bb\u7684\u8fb9\u540e\u5f62\u6210\u7684\u56fe\uff0c\u6709\u591a\u5c11\u79cd\u9009\u62e9\u8fb9\u7684\u65b9\u6848\u4f7f\u5f97\u6700\u540e\u6240\u6709\u70b9\u7684\u989c\u8272\u90fd\u662f\u767d\u8272\u3002$n,m\\leqslant 10^5$\uff0c$T\\leqslant 5$\u3002\r\n\r\n\u591a\u6d4b\u662f\u574f\u6587\u660e\uff01\u94c3\u592a\u574f\u4e86\uff01\uff08\u607c\r\n\r\n\u5148\u4e0d\u8003\u8651\u5220\u9664\u70b9\u7684\u60c5\u51b5\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u5206\u522b\u8003\u8651\u3002\u6ce8\u610f\u5230\u6bcf\u6b21\u64cd\u4f5c\u4e0d\u4f1a\u66f4\u6539\u9ed1\u70b9\u4e2a\u6570\u7684\u5947\u5076\u6027\uff0c\u6240\u4ee5\u5bf9\u4e8e\u67d0\u4e2a\u8fde\u901a\u5757\uff0c\u5982\u679c\u5176\u4e2d\u6709\u5947\u6570\u4e2a\u9ed1\u70b9\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $0$\u3002\u5426\u5219\u6211\u4eec\u8003\u8651\u968f\u4fbf\u627e\u51fa\u4e00\u68f5\u751f\u6210\u6811\uff0c\u6211\u4eec\u53d1\u73b0\u65e0\u8bba\u975e\u6811\u8fb9\u600e\u4e48\u9009\u62e9\uff0c\u603b\u6709\u552f\u4e00\u7684\u4e00\u79cd\u9009\u62e9\u6811\u8fb9\u7684\u65b9\u6848\u4f7f\u5f97\u6700\u540e\u90fd\u662f\u767d\u8272\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u8d21\u732e\u5c31\u662f $2$ \u7684\u975e\u6811\u8fb9\u4e2a\u6570\u6b21\u65b9\u3002\u6240\u4ee5\u5047\u8bbe\u539f\u56fe\u6709 $k$ \u4e2a\u8fde\u901a\u5757\uff0c\u4e0d\u96be\u5f97\u5230\u82e5\u5408\u6cd5\uff0c\u65b9\u6848\u6570\u4e3a $2^{m-n+k}$\u3002\r\n\r\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5220\u70b9\u3002\u8003\u8651\u5220\u6389\u67d0\u4e2a\u70b9\u540e\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\uff1a\u5982\u679c\u65b0\u5f62\u6210\u4e86\u542b\u5947\u6570\u4e2a\u9ed1\u70b9\u7684\u8fde\u901a\u5757\uff0c\u7b54\u6848\u4e3a $0$\uff0c\u5426\u5219\u8fd8\u6709\u53ef\u80fd\u4f1a\u589e\u52a0\u8fde\u901a\u5757\u7684\u4e2a\u6570\u3002\r\n\r\n\u6211\u4eec\u8003\u8651\u5bf9\u539f\u56fe\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a\u5220\u6389\u67d0\u4e2a\u70b9\u540e\u4f1a\u5f62\u6210\u65b0\u7684\u8fde\u901a\u5757\u7684\u6570\u91cf\u6070\u597d\u662f\u8fd9\u4e2a\u70b9\u5728\u5706\u65b9\u6811\u4e2d\u7684\u5ea6\u6570\uff08\u4e0d\u96be\u8bc1\u660e\uff09\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u539f\u56fe\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u7136\u540e\u5224 $0$ \u53ea\u9700\u8981\u5728\u5706\u65b9\u6811\u4e0a dfs \u4e00\u904d\uff0c\u4f46\u662f\u6ce8\u610f\u539f\u56fe\u53ef\u80fd\u6709\u591a\u4e2a\u8fde\u901a\u5757\u90fd\u6709\u5947\u6570\u4e2a\u9ed1\u70b9\uff0c\u8fd9\u65f6\u5efa\u8bae\u7279\u5224\u3002\u590d\u6742\u5ea6 $O(n+m)$\u3002\r\n\r\n\u4ee3\u7801\uff08\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u7684\uff0c\u591a\u6d4b\u662f\u771f\u7684\u96be\u53d7\u5440\uff01\uff09\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nint const p=1e9+7;\r\nint st2[200005],d[200005],d2[200005],n,cnt,target[200005],pre[200005],last[200005],tot,pw[200005],tim,dfn[200005],low[200005],st[200005],sum,siz[200005];\r\nbool vis[200005],tag[200005],tag2[200005];\r\nchar s[200005];\r\nvector<int>to[200005];\r\nvoid add(int x,int y)\r\n{\r\n    target[++tot]=y;\r\n    pre[tot]=last[x];\r\n    last[x]=tot;\r\n}\r\nvoid dfs(int x)\r\n{\r\n    dfn[x]=low[x]=++tim;\r\n    if(s[x]=='1')sum++;\r\n    st[++st[0]]=x;st2[++st2[0]]=x;\r\n    for(int i=last[x];i;i=pre[i])\r\n    {\r\n        int tar=target[i];\r\n        if(!dfn[tar])\r\n        {\r\n            dfs(tar),low[x]=min(low[x],low[tar]);\r\n            if(low[tar]==dfn[x])\r\n            {\r\n                cnt++;\r\n                while(1)\r\n                {\r\n                    d2[st[st[0]]]++;\r\n                    to[cnt].push_back(st[st[0]]);\r\n                    to[st[st[0]]].push_back(cnt);\r\n                    st[0]--;\r\n                    if(st[st[0]+1]==tar)break;\r\n                }\r\n                to[cnt].push_back(x);\r\n                to[x].push_back(cnt);\r\n                d2[x]++;\r\n            }\r\n        }\r\n        else low[x]=min(low[x],dfn[tar]);\r\n    }\r\n}\r\nvoid dfs2(int x)\r\n{\r\n    st[++st[0]]=x;\r\n    vis[x]=1;siz[x]=(x<=n&&s[x]=='1');\r\n    for(auto tar:to[x])\r\n    {\r\n        if(vis[tar])continue;\r\n        dfs2(tar);\r\n        siz[x]+=siz[tar];\r\n        if(x<=n&&(siz[tar]&1))tag[x]=1;\r\n    }\r\n}\r\nint main()\r\n{\r\n    pw[0]=1;\r\n    for(int i=1;i<=100000;i++)pw[i]=pw[i-1]*2%p;\r\n    int _;\r\n    scanf(\"%d\",&_);\r\n    while(_--)\r\n    {\r\n        int m,x,y,num=0,num2=0;\r\n        scanf(\"%d%d\",&n,&m);\r\n        memset(d,0,sizeof(d));\r\n        memset(d2,0,sizeof(d2));\r\n        memset(last,0,sizeof(last));\r\n        memset(tag2,0,sizeof(tag2));\r\n        tot=0;\r\n        for(int i=1;i<=m;i++)scanf(\"%d%d\",&x,&y),add(x,y),add(y,x),d[x]++,d[y]++;\r\n        scanf(\"%s\",s+1);\r\n        memset(dfn,0,sizeof(dfn));tim=0;cnt=n;\r\n        for(int i=1;i<=n*2;i++)to[i].clear();\r\n        bool flag=0;\r\n        for(int i=1;i<=n;i++)\r\n            if(!dfn[i])\r\n            {\r\n                sum=0;num++;st[0]=st2[0]=0;\r\n                dfs(i);\r\n                if(sum&1)\r\n                {\r\n                    num2++;\r\n                    flag=1;\r\n                    for(int j=1;j<=st2[0];j++)tag2[st2[j]]=1;\r\n                }\r\n            }\r\n        if(flag)printf(\"0 \");\r\n        else printf(\"%d \",pw[m-n+num]);\r\n        if(num2>1)\r\n        {\r\n            for(int i=1;i<=n;i++)printf(\"0 \");\r\n            puts(\"\");\r\n            continue;\r\n        }\r\n        memset(vis,0,sizeof(vis));\r\n        memset(tag,0,sizeof(tag));\r\n        for(int i=1;i<=n;i++)\r\n            if(!vis[i])\r\n            {\r\n                st[0]=0;\r\n                dfs2(i);\r\n                for(int j=1;j<=st[0];j++)\r\n                    if(st[j]<=n&&((siz[i]-siz[st[j]])&1))tag[st[j]]=1;\r\n            }\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            if(tag[i]||(flag&&(!tag2[i])))printf(\"0 \");\r\n            else printf(\"%d \",pw[(m-d[i])-(n-1)+(num+d2[i]-1)]);\r\n        }\r\n        puts(\"\");\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n",
        "postTime": 1614952116,
        "uid": 96912,
        "name": "AzusaCat",
        "ccfLevel": 9,
        "title": "\u300cHAOI2018\u300d\u53cd\u8272\u6e38\u620f"
    },
    {
        "content": "\u770b\u6ca1\u4eba\u5206\u6790\u4ee3\u7801\u7ec6\u8282\u6211\u5c31\u6765\u8bb2\u8bb2\u628a...\n\n# \u5206\u6790\n\n\u591a\u4e2a\u8fde\u901a\u56fe\u53ef\u4ee5\u5206\u5f00\u8ba1\u7b97\n\n\u8003\u8651\u5355\u4e2a\u8fde\u901a\u56fe\uff0c\u9ed1\u70b9\u5947\u5076\u6027\u4e00\u5b9a\u4e0d\u53d8\uff0c\u53ef\u4ee5\u7531\u6b64\u5224\u65ad\u5355\u5f20\u56fe\u662f\u5426\u6709\u89e3\u3002\n\n\u5982\u679c\u6709\u89e3\uff0c\u53ef\u4ee5\u5728\u56fe\u4e2d\u968f\u4fbf\u5212\u51fa\u4e00\u68f5\u6811\uff08\u5305\u542b\u56fe\u6240\u6709\u8282\u70b9\uff09\u3002\u4ece\u53f6\u8282\u70b9\u5411\u6839\u8c03\u8282\uff0c\u603b\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e14\u4ec5\u4e00\u4e2a\u65b9\u6848\u3002\u800c\u975e\u6811\u8fb9\u53ea\u8981\u968f\u4fbf\u9009\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837\u5bf9\u4e8e\u4e00\u5f20\u56fe\u7b54\u6848\u662f $2^{m-n+1}$\uff1b\u5bf9\u4e8e\u591a\u5f20\u56fe\u53d1\u73b0\u6bcf\u591a\u4e00\u5f20\u56fe\u5c31\u5c11\u4e00\u4e2a\u6811\u8fb9\uff0c\u4e8e\u662f\u7b54\u6848\u4e3a $2^{m-n+\\text{\u56fe\u6570}}$\u3002\n\n\u73b0\u5728\u8003\u8651\u5220\u70b9\u3002\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u5220\u53bb\u70b9\u540e\u8be5\u56fe\u6d88\u5931\uff08\u5373\u72ec\u7acb\u70b9\uff09\u3002\u8fd9\u65f6\u5224\u65ad\u9664\u53bb\u8fd9\u5f20\u56fe\u662f\u5426\u518d\u6ca1\u6709\u65e0\u89e3\u7684\u56fe\u3002\n\n2. \u5220\u53bb\u70b9\u540e\u56fe\u6570\u4e0d\u53d8\u3002\u8fd9\u65f6\u5224\u65ad\u8fd9\u5f20\u56fe\u662f\u5426\u65e0\u89e3\uff1a\u5982\u679c\u662f\uff0c\u5224\u65ad\u662f\u5426\u5220\u53bb\u4e86\u4e00\u4e2a\u9ed1\u70b9\uff08**\u4f7f\u56fe\u6709\u89e3**\uff09\u4e14\u8be5\u56fe\u662f\u5426\u662f**\u552f\u4e00\u7684\u4e00\u5f20\u65e0\u89e3\u56fe**\uff1b\u5982\u679c\u5426\uff0c\u5224\u65ad\u662f\u5426**\u4ee4\u8fd9\u5f20\u56fe\u65e0\u89e3**\u4e14\u539f\u6765**\u6ca1\u6709\u5176\u5b83\u56fe\u65e0\u89e3**\u3002\u53e6\u5916\u8fd9\u65f6\u8fd8\u8981\u5904\u7406\u56e0\u5220\u70b9**\u5931\u53bb\u7684\u8fb9**\u3002\n\n3. \u5220\u53bb\u70b9\u540e\u56fe\u6570\u589e\u52a0\uff08\u5272\u70b9\uff09\u3002\u8fd9\u65f6\u6211\u4eec\u8981\u5206\u522b\u77e5\u9053\u4ea7\u751f\u7684\u6bcf\u4e00\u5f20\u56fe\u662f\u5426\u65e0\u89e3\u4e14\u540c\u65f6\u786e\u8ba4\u539f\u6765\u6709\u6ca1\u6709\u5176\u5b83\u65e0\u89e3\u56fe\u3002\u540c\u6837\u8fd8\u9700\u5904\u7406\u5931\u53bb\u7684\u8fb9\u3002\uff08\u8fd9\u79cd\u60c5\u51b5\u6700\u9ebb\u70e6\uff09\n\n---\n\n\u8fd9\u91cc\u7740\u91cd\u8bb2\u4e0b\u7b2c\u4e09\u79cd\u60c5\u51b5\u7684\u5b9e\u73b0\uff1a\n\n\u5224\u65ad\u9700\u8981\u77e5\u9053\u5206\u88c2\u51fa\u7684\u6bcf\u5f20\u56fe\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 tarjan \u6c42\u5272\u70b9\u65f6\u8bb0\u5f55\u3002\n\n\u76f4\u63a5\u8003\u8651\u4ece\u67d0\u4e2a\u5272\u70b9\u5f00\u59cb dfs \u7684\u60c5\u51b5\uff1a\u5982\u679c\u53d1\u73b0dfs\u6811\u4e2d\u6709\u513f\u5b50\u4f1a\u88ab\u5b83\u6240\u201c\u5272\u201d\uff0c\u6211\u4eec\u6b64\u65f6\u5e94\u8be5\u5df2\u7ecf\u8bbf\u95ee\u4e86\u8fd9\u5f20\u5206\u88c2\u51fa\u6765\u7684\u56fe\u7684**\u6240\u6709\u8282\u70b9**\uff0c\u4e8e\u662f\u5c31\u53ef\u80fd\u8bb0\u5f55\u4e0b\u5206\u88c2\u56fe\u7684\u9ed1\u70b9\u6570\uff1b\u5bf9\u4e8e\u6bcf\u5f20\u5206\u88c2\u51fa\u7684\u56fe\uff08\u9664\u4e86**\u7236\u4eb2\u5904**\uff09\uff0c\u6211\u4eec\u90fd\u4f1a**\u8bbf\u95ee\u4e00\u6b21**\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u603b\u5171\u4ea7\u751f\u4e86\u51e0\u5f20\u56fe\u3002\n\n\u5bf9\u4e8e\u7236\u4eb2\u5904\u5206\u88c2\u51fa\u7684\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u539f\u6765\u6bcf\u5f20\u8fde\u901a\u56fe\u7684\u9ed1\u70b9\u6570\uff0c\u7136\u540e**\u51cf\u53bb\u5206\u88c2\u51fa\u7684\u56fe\u7684\u9ed1\u70b9\u6570**\uff08\u5bb9\u65a5\uff09\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u53e6\u5728 dfs \u65f6\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u5c5e\u4e8e\u54ea\u5f20\u56fe\u3002\n\n\u8fd9\u91cc\u8fd8\u56e0\u6ce8\u610f**\u4e0d\u662f\u6240\u6709dfs\u6811\u513f\u5b50\u90fd\u88ab\u8be5\u5272\u70b9\u6240\u201c\u5272\u201d**\uff0c\u5177\u4f53\u6765\u8bf4\u5e94\u5f53\u53ea\u7edf\u8ba1 \u201c`low[to] >= dfn[u]`\u201d \u7684\u9ed1\u70b9\u6570\u3002\n\n\u8fd8\u6709\u5404\u79cd\u7ec6\u8282\u770b\u4ee3\u7801\u53ef\u80fd\u4f1a\u6bd4\u8f83\u6e05\u6670\u3002\n\n# Code\n\n\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\u76f4\u63a5\u5bf9\u4e09\u79cd\u60c5\u51b5\u66b4\u529b\u5206\u7c7b\uff0c\u603b\u5171\u4e0d\u591a\u4e0d\u5c11\u521a\u597d 99 \u884c\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing std::min;\n\nconst int MAXN =2e5+50, M =1000000007;\n\nint n, m, CNT, CNTmap;\nint first[MAXN>>1], dfn[MAXN>>1], low[MAXN>>1];\nint cut[MAXN>>1]/*\u5220\u70b9\u591a\u4ea7\u751f\u56fe\u6570*/, cntB[MAXN>>1]/*\u9ed1\u70b9\u6570*/,\n    cntBcut[MAXN>>1]/*\u5220\u70b9\u65b0\u4ea7\u751f\u56fe\u7684\u603b\u9ed1\u70b9\u6570 +\u81ea\u5df1\u662f\u5426\u9ed1\u70b9*/, edg[MAXN>>1]/*\u8fde\u63a5\u8fb9\u6570*/;\nint group[MAXN>>1], cntBmap[MAXN>>1];\nbool col[MAXN>>1], unsol[MAXN>>1]/*\u5bf9\u4e8e\u6bcf\u4e2a\u5272\u70b9\u662f\u5426\u4ea7\u751f\u65e0\u89e3\u56fe*/, isunsol[MAXN>>1]/*\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u56fe\u662f\u5426\u65e0\u89e3*/;\nstruct edge{\n\tint net, to;\n}e[MAXN];\n\nvoid tarjan(int u, int fa){\n\tgroup[u] =CNTmap;\n\tcntBcut[u] =(col[u] == 1);\n\tdfn[u] =low[u] =++CNT;\n\tcntB[u] =(col[u] == 1);\n\tedge E;\n\tfor(int l =first[u]; l != -1; l =E.net){\n\t\tE =e[l];\n\t\tif(!dfn[E.to]){\n\t\t\ttarjan(E.to, u), low[u] =min(low[u], low[E.to]);\n\t\t\tcntB[u] +=cntB[E.to];\n\t\t\tif(low[E.to] >= dfn[u]){\n\t\t\t\tcntBcut[u] +=cntB[E.to];/*\u5272\u70b9\u4e0d\u4e00\u5b9a\u4f7f\u6240\u6709\u513f\u5b50\uff08\u8054\u901a\u56fe\uff09\u53cc\u53cc\u65ad\u5f00*/\n\t\t\t\t++cut[u];\n\t\t\t\tunsol[u] =(unsol[u] || (cntB[E.to]%2 != 0));\n\t\t\t}\n\t\t}\n\t\telse if(E.to != fa) low[u] =min(low[u], dfn[E.to]);\n\t}\n\tif(!fa) --cut[u];/*\u7279\u5224*/\n}\n\ninline void addedge(int u, int v, int i){\n\t++edg[u], ++edg[v];\n\tedge &E =e[i], &E2 =e[i+m];\n\tE.net =first[u], first[u] =i;\n\tE.to =v;\n\tE2.net =first[v], first[v] =m+i;\n\tE2.to =u;\n}\n\ninline int read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn x;\n}\n\nint pow2[MAXN>>1];\nchar s[MAXN>>1];\n\nint main(){\n\tpow2[0] =1;\n\tfor(int i =1; i < (MAXN)>>1; ++i) pow2[i] =(pow2[i-1]<<1)%M;\n\tfor(int k =0, T =read(); k < T; ++k){\n\t\tn =read(), m =read(); CNT =0, CNTmap =0;\n\t\tmemset(first, -1, sizeof(first));\n\t\tmemset(dfn, 0, sizeof(dfn));\n\t\tmemset(cut, 0, sizeof(cut));\n\t\tmemset(edg, 0, sizeof(edg));\n\t\tmemset(unsol, 0, sizeof(unsol));\n\t\tfor(int i =0; i < m; ++i) addedge(read(), read(), i);\n\t\tscanf(\"%s\", s);\n\t\tfor(int i =1; i <= n; ++i) col[i] =s[i-1]-'0';\n\t\tint cntunsol =0;\n\t\tfor(int i =1; i <= n; ++i)\n\t\t\tif(dfn[i] == 0){\n\t\t\t\t++CNTmap, tarjan(i, 0), cntunsol +=(cntB[i]&1);\n\t\t\t\tcntBmap[CNTmap] =cntB[i];\n\t\t\t\tisunsol[CNTmap] =(cntBmap[CNTmap]&1);\n\t\t\t}\n\t\tint ans =m-n+CNTmap;\n\t\tprintf(\"%d \", (!cntunsol) ? pow2[ans] : 0);\n\t\tfor(int i =1; i <= n; ++i){/*\u5206\u7c7b\u7279\u5224*/\n\t\t\tif(!edg[i]/*\u5355\u72ec\u70b9*/) printf(\"%d \", (cntunsol-cntB[i] == 0) ? pow2[ans] : 0);\n\t\t\telse if(cut[i] == 0/*\u975e\u5272\u70b9*/){\n\t\t\t\tif(isunsol[group[i]] && cntunsol-col[i] == 0)/*\u5bf9\u4e8e\u8be5\u8fde\u901a\u56fe\u65e0\u89e3*/\n\t\t\t\t\tprintf(\"%d \", pow2[ans-edg[i]+1/*\u5c11\u4e00\u4e2a\u70b9\uff08\u6811\u8fb9\uff09*/+cut[i]]);\n\t\t\t\telse if(!isunsol[group[i]] && !cntunsol && col[i] != 1)/*\u5bf9\u4e8e\u8be5\u8fde\u901a\u56fe\u6709\u89e3*/\n\t\t\t\t\tprintf(\"%d \", pow2[ans-edg[i]+1+cut[i]]);\n\t\t\t\telse printf(\"0 \");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbool Nunsol/*\u662f\u5426\u4ea7\u751f\u65e0\u89e3*/ =(!unsol[i] && (cntBmap[group[i]]-cntBcut[i])%2 == 0 /*dfs\u96be\u4ee5\u8ba1\u7b97\u7236\u4eb2\u4fe1\u606f*/);\n\t\t\t\tif(Nunsol && cntunsol-isunsol[group[i]]/*\u53ef\u80fd\u51cf\u5c11\u4e00\u4e2a\u65e0\u89e3\u56fe*/ == 0)\n\t\t\t\t\tprintf(\"%d \", pow2[ans-edg[i]+1+cut[i]]);\n\t\t\t\telse printf(\"0 \");\n\t\t\t}\n\t\t}\n\t\tputchar('\\n');\n\t}\n}\n```\n",
        "postTime": 1589515626,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4494 \u3010[HAOI2018]\u53cd\u8272\u6e38\u620f\u3011"
    },
    {
        "content": "## P4494 [HAOI2018]\u53cd\u8272\u6e38\u620f\n\n### \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u662f\u9ed1\u8272\u6216\u8005\u767d\u8272\u3002\u4f60\u53ef\u4ee5\u5c06\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u989c\u8272\u53d6\u53cd\u3002\u95ee\u4f60\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u6bcf\u4e2a\u8fb9\u81f3\u591a\u53d6\u53cd\u4e00\u6b21\u4f7f\u5f97\u56fe\u4e0a\u5168\u53d8\u6210\u767d\u8272\u7684\u70b9\u3002\n\n### \u601d\u8def\n\n\u82e5\u4efb\u610f\u4e00\u4e2a\u8fde\u901a\u5757\u9ed1\u8272\u70b9\u7684\u4e2a\u6570\u4e3a\u5947\u6570\u90a3\u4e48\u65e0\u89e3\u3002\n\n\u5148\u8003\u8651\u6811\u7684\u60c5\u51b5\u3002\u53d1\u73b0\u5982\u679c\u662f\u6811\uff0c\u5e76\u4e14\u9ed1\u70b9\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u79cd\u65b9\u5f0f\u8fbe\u5230\u76ee\u6807\u3002\u7136\u540e\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5b83\u7684\u4efb\u610f\u4e00\u4e2a\u751f\u6210\u6811\u82e5\u6709\u89e3\uff0c\u90a3\u4e48\u5176\u4ed6\u975e\u6811\u8fb9\u65e0\u8bba\u662f\u5426\u53d6\u53cd\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u79cd\u60c5\u51b5\u8fbe\u5230\u76ee\u6807\uff0c\u5e76\u4e14\u5145\u5206\u3002\u6240\u4ee5\u7b54\u6848\u5c31\u662f $2^{m-n+1}$\u3002\n\n\u8003\u8651\u4e0d\u8054\u901a\u7684\u60c5\u51b5\uff0c\u6bcf\u591a\u4e00\u4e2a\u8fde\u901a\u5757\u76f8\u5f53\u4e8e\u5c11\u4e86\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f $2^{m-n+cnt( \u8fde\u901a\u5757\u4e2a\u6570 )}$\u3002\n\n\u7136\u540e\u8003\u8651\u5bf9\u4e8e\u5220\u9664\u6bcf\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a\n\n1. \u72ec\u7acb\u70b9\uff0c\u4e0d\u4e0e\u4efb\u4f55\u5176\u4ed6\u70b9\u8054\u901a\uff0c\u5224\u65ad\u5220\u53bb\u540e\u662f\u5426\u6709\u89e3\uff1b\n2. \u975e\u5272\u70b9\uff0c\u5224\u65ad\u5220\u53bb\u540e\u662f\u5426\u6709\u89e3\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u8be5\u70b9\u4e3a\u9ed1\u70b9\u65f6\uff0c\u5f53\u4e14\u4ec5\u5f53\u5168\u5c40\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u4e14\u6b63\u662f\u6240\u5c5e\u8fde\u901a\u5757\u65e0\u89e3\u65f6\u5220\u9664\u540e\u6709\u89e3\u3002\u767d\u70b9\u65f6\u7c7b\u4f3c\u3002\n3. \u662f\u5272\u70b9\uff0c\u5224\u65ad\u5220\u53bb\u8be5\u70b9\u540e\u51fa\u73b0\u7684\u6240\u6709\u8fde\u901a\u5757\u662f\u5426\u6709\u89e3\uff0c\u5e76\u4e14\u4e5f\u8981\u5224\u65ad\u662f\u5426\u4ec5\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u65e0\u89e3\u4e14\u6b63\u662f\u8be5\u70b9\u5bfc\u81f4\u65e0\u89e3\u65f6\u5220\u6389\u540e\u6709\u89e3\u3002\n\n\u5bf9\u4e8e\u6bcf\u79cd\u60c5\u51b5\uff0c\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8ba1\u7b97\u4e00\u4e0b\u6709\u89e3\u65f6\u7684\u65b0\u56fe\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<cstring>\n#include<cmath>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=x*10+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=1e5+10,mod=1e9+7;\n\tint n,m,pow[maxn],in[maxn];\n\tint ecnt,head[maxn],to[maxn<<1],nxt[maxn<<1];\n\tinline void addedge(int a,int b){\n\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,in[a]++\t;\n\t\tto[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,in[b]++;\n\t}\n\tint bel[maxn],dfn[maxn],low[maxn],cut[maxn],cnt[maxn],cntbel[maxn],cutcnt[maxn];\n\tbool col[maxn],unsol[maxn],unsolbel[maxn];\n\tvoid tarjan(int x,int fa){\n\t\tbel[x]=bel[0],cutcnt[x]=cnt[x]=col[x];\n\t\tdfn[x]=low[x]=++dfn[0];\n\t\tfor(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa)\n\t\t\tif(!dfn[u]) {\n\t\t\t\ttarjan(u,x),low[x]=min(low[x],low[u]);\n\t\t\t\tcnt[x]+=cnt[u];\n\t\t\t\tif(dfn[x]<=low[u]) cutcnt[x]+=cnt[u],++cut[x],unsol[x]|=cnt[u]&1;\n\t\t\t}else low[x]=min(low[x],dfn[u]);\n\t\tcut[x]-=!fa;\n\t}\n\tinline void work(){\n\t\tmemset(head,0,sizeof head),ecnt=bel[0]=0;memset(dfn,0,sizeof dfn),memset(cut,0,sizeof cut),memset(in,0,sizeof in),memset(unsol,0,sizeof unsol);\n\t\tn=read(),m=read();\n\t\tfor(int i=1;i<=m;i++) addedge(read(),read());\n\t\tfor(int c,i=1;i<=n;i++) scanf(\"%1d\",&c),col[i]=c;\n\t\tint cntunsol=0;\n\t\tfor(int i=1;i<=n;i++) if(!dfn[i]) \n\t\t\tbel[0]++,tarjan(i,0),cntunsol+=cnt[i]&1,cntbel[bel[0]]=cnt[i],unsolbel[bel[0]]=cntbel[bel[0]]&1;\n\t\tint ans=m-n+bel[0]; \n\t\tprintf(\"%d \",cntunsol?0:pow[ans]);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(!in[i]) printf(\"%d \",cntunsol^cnt[i]?0:pow[ans]);\n\t\t\telse if(!cut[i]){\n\t\t\t\tif((unsolbel[bel[i]] and !(cntunsol^col[i])) or (!unsolbel[bel[i]] and !cntunsol and !col[i]))\n\t\t\t\t\tprintf(\"%d \",pow[ans-in[i]+1+cut[i]]);\n\t\t\t\telse printf(\"0 \");\n\t\t\t}else if(!unsol[i] and !((cntbel[bel[i]]-cutcnt[i])&1) and !(cntunsol-unsolbel[bel[i]])) \n\t\t\tprintf(\"%d \",pow[ans-in[i]+1+cut[i]]);\n\t\t\telse printf(\"0 \");\n\t\t}\n\t\tputs(\"\");\n\t}\n}\nsigned main(){\n\tstar::pow[0]=1;\n\tfor(int i=1;i<=100000;i++) star::pow[i]=(star::pow[i-1]<<1)%star::mod;\n\tint T=read();\n\twhile(T--)star::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1611187019,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4494 \u3010[HAOI2018]\u53cd\u8272\u6e38\u620f\u3011"
    },
    {
        "content": "\u5b89\u5229\u535a\u5ba2 [\u79cb\u8449 - \u6811\u53f6\u7684\u4e00\u751f\uff0c\u53ea\u662f\u4e3a\u4e86\u5f52\u6839\u4e48](https://chlience.com/solution/357.html)\n\n## Problem\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u662f\u9ed1\u8272\u6216\u8005\u767d\u8272\n\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u8fb9\u96c6\uff0c\u4f7f\u5f97\u5176\u76f8\u8fde\u7684\u4e24\u7aef\u8282\u70b9\u53cd\u8272\uff0c\u663e\u7136\uff0c\u4e00\u5171\u6709 $2^m$ \u79cd\u65b9\u6848\n\n\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6848\u53ef\u4ee5\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u53d8\u767d\uff1f\n\n\u5982\u679c\u5220\u6389\u8282\u70b9 $i$ \u6709\u591a\u5c11\u79cd\u65b9\u6848\u4f7f\u6240\u6709\u8282\u70b9\u53d8\u767d\uff1f\n\n## Thought\n\n\u663e\u7136\u6709\u4e00\u4e2a $n*2^m$ \u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7 $10pt$ \u7684\u6570\u636e\n\n\u663e\u7136\u6709\u4e00\u4e2a $m*2^n$ \u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7 $30pt$ \u7684\u6570\u636e\n\n\u5982\u679c\u5355\u4e2a\u8054\u901a\u56fe\u4e0a\u9ed1\u70b9\u6570\u4e3a\u5947\u6570\uff0c\u65e0\u89e3\n\u5426\u5219\u5fc5\u7136\u6709\u89e3\n\n\u8003\u8651\u5148\u5efa\u51fa\u4efb\u610f\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u7136\u540e\u641e\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u89e3\n\u90a3\u4e48\u53ea\u9700\u8981\u8003\u8651\u6bcf\u6761\u975e\u6811\u8fb9\u7ec4\u6210\u7684\u73af\u9009\u8fd8\u662f\u4e0d\u9009\n\n\u4e00\u5171\u6709 $2^{m-n+1}$ \u79cd\u65b9\u6848\n\n\u53ef\u4ee5\u901a\u8fc7 $70pt$ \u7684\u6570\u636e\n\n\u8003\u8651\u5220\u6389\u4e00\u4e2a\u70b9\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\uff1a\n\n\u5047\u8bbe\u5220\u6389\u8fd9\u4e2a\u70b9\u540e\u56fe\u4ecd\u7136\u8054\u901a\uff0c\u90a3\u4e48\u53ef\u4ee5\u6309\u7167 $70pt$ \u7684\u65b9\u6cd5 $O(1)$ \u7684\u8fdb\u884c\u8ba1\u7b97\u7b54\u6848\n\u5047\u8bbe\u5220\u6389\u8fd9\u4e2a\u70b9\u540e\u56fe\u4e0d\u518d\u8054\u901a\uff0c\u90a3\u4e48\u8003\u8651\u5bf9\u6bcf\u4e2a\u8054\u901a\u5757\u8fdb\u884c\u5224\u65ad\uff0c\u662f\u5426\u6709\u89e3\n\n\u8003\u8651\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u5728\u5706\u65b9\u6811\u4e0a\u8fdb\u884c $DP$\n\u5982\u679c\u5f53\u524d\u70b9\u4e0d\u662f\u5272\u70b9\uff0c\u53c2\u7167\u60c5\u51b5 $1$\n\u5982\u679c\u5f53\u524d\u70b9\u662f\u5272\u70b9\uff0c\u8003\u8651 $DP$ \u65f6\u7b97\u51fa\u5404\u5b50\u6811\u7684\u9ed1\u70b9\u6570\uff0c\u7136\u540e $O(1)$ \u8ba1\u7b97\u7b54\u6848\n\n\u53ef\u4ee5\u901a\u8fc7 $100pt$ \u7684\u6570\u636e\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint read() {\n\tint ans = 0, flag = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {if(ch == '-') flag = - flag; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {ans = ans * 10 + ch - '0'; ch = getchar();}\n\treturn ans * flag;\n}\nconst int N = 100010;\nconst int mod = 1000000007;\nstruct Graph {\n\tint deg[N << 1];\n\tint f[N << 2], t[N << 2], n[N << 2], head[N << 1], tot;\n\tvoid addedge(int u, int v) {\n\t\t++ tot; ++ deg[u]; ++ deg[v];\n\t\tf[tot] = u;\n\t\tt[tot] = v;\n\t\tn[tot] = head[u];\n\t\thead[u] = tot;\n\t}\n}G, H;\nint low[N], dfn[N], DFN;\nint sta[N << 2], top;\nint bel[N], cnt;\nint n, m;\n\nint col[N];\nchar s[N];\nint beg[N], bcnt;//the beg's top Node and the num of beg\n\nint ansBeg[N];//the ans of the beg if not del ant Node\nint belBeg[N];//which beg is the Node belong to;\nint nodBeg[N];//howmany Node in the beg\nint edgBeg[N];//howmany Edge in the beg\nint colBeg[N];//how many black Node in the beg\n\nint Ans[N];\nint colSum[N << 1];\nint bin[N];\nvoid clear() {\n\tmemset(&G, 0, sizeof(G));\n\tmemset(&H, 0, sizeof(H));\n\tmemset(low, 0, sizeof(low));\n\tmemset(dfn, 0, sizeof(dfn));\n\tmemset(sta, 0, sizeof(sta));\n\tmemset(bel, 0, sizeof(bel));\n\tDFN = top = cnt = 0;\n\n\tmemset(col, 0, sizeof(col));\n\tmemset(belBeg, 0, sizeof(belBeg));\n\twhile(bcnt) {\n\t\tbeg[bcnt] = \n\t\tansBeg[bcnt] = \n\t\tnodBeg[bcnt] = \n\t\tedgBeg[bcnt] =\n\t\tcolBeg[bcnt] = 0;\n\t\t-- bcnt;\n\t}\n\tmemset(Ans, 0, sizeof(Ans));\n\tmemset(colSum, 0, sizeof(colSum));\n}\nvoid dfs1(int x, int bcnt) {\n\tbelBeg[x] = bcnt;\n\tnodBeg[bcnt] += 1;\n\tedgBeg[bcnt] += G.deg[x];\n\tcolBeg[bcnt] += col[x];\n\n\tlow[x] = dfn[x] = ++ DFN;\n\tfor(int i = G.head[x]; i; i = G.n[i]) {\n\t\tint t = G.t[i];\n\t\tif(!dfn[t]) {\n\t\t\tsta[++ top] = i;\n\t\t\tdfs1(t, bcnt);\n\t\t\tlow[x] = min(low[x], low[t]);\n\t\t\tif(low[t] == dfn[x]) {\n\t\t\t\t++ cnt;\n\t\t\t\tH.addedge(x, n + cnt);\n\t\t\t\tH.addedge(n + cnt, x);\n\t\t\t\tbel[x] = cnt;\n\t\t\t\tH.addedge(t, n + cnt);\n\t\t\t\tH.addedge(n + cnt, t);\n\t\t\t\tbel[t] = cnt;\n\t\t\t\tfor(; sta[top] != i; sta[top --] = 0) {\n\t\t\t\t\tint fr = G.f[sta[top]];\n\t\t\t\t\tint to = G.t[sta[top]];\n\t\t\t\t\tif(bel[fr] != cnt) {\n\t\t\t\t\t\tH.addedge(fr, n + cnt);\n\t\t\t\t\t\tH.addedge(n + cnt, fr);\n\t\t\t\t\t\tbel[fr] = cnt;\n\t\t\t\t\t}\n\t\t\t\t\tif(bel[to] != cnt) {\n\t\t\t\t\t\tH.addedge(to, n + cnt); \n\t\t\t\t\t\tH.addedge(n + cnt, to);\n\t\t\t\t\t\tbel[to] = cnt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsta[top --] = 0;\n\t\t\t}\n\t\t}\n\t\telse if(dfn[t] < dfn[x]) {\n\t\t\tsta[++ top] = i;\n\t\t\tlow[x] = min(low[x], dfn[t]);\n\t\t}\n\t}\n}\nvoid dfs2(int x, int f, int bcnt) {\n\tif(x <= n) colSum[x] = col[x];\n\tfor(int i = H.head[x]; i; i = H.n[i]) {\n\t\tint t = H.t[i];\n\t\tif(t == f) continue;\n\t\tdfs2(t, x, bcnt);\n\t\tcolSum[x] += colSum[t];\n\t}\n\tif(x > n) return;\n\tAns[x] = 1;\n\tfor(int i = H.head[x]; i; i = H.n[i]) {\n\t\tint t = H.t[i];\n\t\tif(t == f) {\n\t\t\tif((colBeg[bcnt] - colSum[x]) % 2)\n\t\t\t\tAns[x] = 0;\n\t\t}\n\t\telse\n\t\t\tif(colSum[t] % 2)\n\t\t\t\tAns[x] = 0;\n\t}\n\tAns[x] = Ans[x] * bin[(edgBeg[bcnt] - G.deg[x]) - max(0, nodBeg[bcnt] - 1 - H.deg[x])];\n}\nvoid work() {\n\tclear();\n\tn = read(); m = read();\n\tfor(int i = 1; i <= m; ++ i) {\n\t\tint u = read(), v = read();\n\t\tG.addedge(u, v);\n\t\tG.addedge(v, u);\n\t}\n\tfor(int i = 1; i <= n; ++ i)\n\t\tG.deg[i] /= 2;\n\tscanf(\"%s\", s);\n\tfor(int i = 0; i < n; ++ i)\n\t\tcol[i + 1] = (s[i] == '1');\n\tfor(int i = 1; i <= n; ++ i)\n\t\tif(!dfn[i]) {\n\t\t\tbelBeg[i] = ++ bcnt;\n\t\t\tbeg[bcnt] = i;\n\t\t\tdfs1(i, bcnt);\n\t\t}\n\tfor(int i = 1; i <= n + cnt; ++ i)\n\t\tH.deg[i] /= 2;\n\tfor(int i = 1; i <= bcnt; ++ i)\n\t\tedgBeg[i] /= 2;\n\tint ans = 1, Boom = 0;\n\tfor(int i = 1; i <= bcnt; ++ i) {\n\t\tif(colBeg[i] % 2) ansBeg[i] = 1;\n\t\telse ansBeg[i] = 0;\n\t\tBoom += ansBeg[i];\n\t}\n\tif(Boom) printf(\"0 \");\n\telse printf(\"%d \", bin[m - n + bcnt]);\n\tfor(int i = 1; i <= bcnt; ++ i)\n\t\tdfs2(beg[i], 0, i);\n\tfor(int i = 1; i <= n; ++ i) {\n\t\tif(Boom - ansBeg[belBeg[i]]) printf(\"0 \");\n\t\telse printf(\"%d \", 1ll * Ans[i] * bin[(m - edgBeg[belBeg[i]]) - (n - nodBeg[belBeg[i]]) + (bcnt - 1)] % mod);\n\t}\n\tputs(\"\");\n}\nint main() {\n\tbin[0] = 1;\n\tfor(int i = 1; i < N; ++ i)\n\t\tbin[i] = 1ll * bin[i - 1] * 2 % mod;\n\tint t = read();\n\twhile(t --)\n\t\twork();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1552951478,
        "uid": 20601,
        "name": "League\u4e36\u7fce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4494 \u3010[HAOI2018]\u53cd\u8272\u6e38\u620f\u3011"
    }
]