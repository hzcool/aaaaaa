[
    {
        "content": "~~**\u4f60\u77e5\u9053\u81ea\u5df1yy\u51fa\u6765\u7684\u4ee3\u7801\u9898\u89e3\u91cc\u6ca1\u6709\uff0cWA\u6570\u636e\u8fd8\u4e0d\u7ed9\u4e0b\u8f7d\u7684\u611f\u53d7\u5417\uff1f**~~\n\n~~**\u6211\u5c31\u662f\u5f88\u60f3\u95ee\uff1a\u8fd9\u4e48\u6c34\u7684\u4e00\u9053\u9898\uff0c\u5199\u4ec0\u4e48\u5e73\u8861\u6811\uff1f**~~\n\n### \u672c\u4eba\u80e1\u4e71yy\u51fa\u6765\u7684\u60f3\u6cd5\uff1a\u626b\u63cf\u7ebf+\u7ebf\u6bb5\u6811\u505a\u7ebf\u6bb5\u533a\u95f4\u8986\u76d6\n\n\u7ecf\u5178\u9898\u578b\uff1a[HDU1542 Atlantis](http://acm.hdu.edu.cn/showproblem.php?pid=1542)\n\n\u9996\u5148\u9898\u610f\u5df2\u7ecf\u5f88\u660e\u786e\u4e86\uff1a\u6c42\u51fa\u82e5\u5e72\u4e2a\u77e9\u5f62\u7684\u5e76 \u6240\u5f62\u6210\u7684\u4e0d\u89c4\u5219\u56fe\u5f62 \u7684\u9876\u70b9\uff08\u771f\u662f\u4e0d\u50cf\u4eba\u8bdd\uff09\u3002\n\n### \u626b\u63cf\u7ebf\u6cd5\n\n**\u5148\u629b\u5f00\u672c\u9898**\uff0c\u6765\u8c08\u77e9\u5f62\u5e76\u95ee\u9898\u7684\u4e00\u822c\u89e3\u6cd5\uff1a**\u626b\u63cf\u7ebf\u6cd5**\u3002\n\n\u5047\u8bbe\u5e73\u9762\u5185\u6709\u82e5\u5e72\u4e2a\u77e9\u5f62\uff08\u672c\u9898\u4e2d\u77e9\u5f62\u4e00\u5b9a\u4e0ex\u8f74\u76f8\u5207\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u9898\u76ee\u4e2d\u4e0d\u4e00\u5b9a\uff0c\u56e0\u6b64\u6765\u770b\u4e00\u822c\u60c5\u51b5\uff09\uff0c\u77e9\u5f62\u4e24\u4e24\u53ef\u80fd\u76f8\u4ea4\uff0c\u73b0\u5728\u8981\u6c42\u6211\u4eec\u5728**\u77e9\u5f62\u7684\u5e76**\u6240\u5f62\u6210\u7684**\u4e0d\u89c4\u5219\u56fe\u5f62**\u4e0a\u641e\u4e00\u4e9b\u4e8b\u60c5\uff08\u5982\u6c42\u51fa\u5b83\u7684\u9762\u79ef\uff09\u3002\n\n\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u6761\u5e73\u884c\u4e8ey\u8f74\u7684\u7ebf\u6bb5\uff0c\u4ecey\u8f74\u5f00\u59cb\u4e0d\u65ad\u5411x\u8f74\u6b63\u65b9\u5411\u5e73\u79fb\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u6761\u7ebf\u6bb5\u628a\u8fd9\u4e2a\u4e0d\u89c4\u5219\u56fe\u5f62\u5207\u5272\u6210\u82e5\u5e72\u90e8\u5206\uff0c\u5982\u4e0b\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/64666.png)\n\n\u4e0d\u96be\u53d1\u73b0\u4efb\u610f\u65f6\u523b\uff0c\u8fd9\u4e2a\u4e0d\u89c4\u5219\u56fe\u5f62\u5728\u4e24\u6761\u76f8\u90bb\u7684\u626b\u63cf\u7ebf\uff08\u7070\u8272\uff09\u4e4b\u95f4\u7684\u90e8\u5206\u603b\u662f\u89c4\u5219\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u89c4\u5219\u56fe\u5f62\u7684\u4e00\u4e9b\u6027\u8d28\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u8fd9\u90e8\u5206\u89c4\u5219\u56fe\u5f62\u6765\u8bb2\uff0c\u5bbd\uff08\u4e24\u6761\u626b\u63cf\u7ebf\u95f4\u7684\u8ddd\u79bb\uff09\u662f\u5f88\u5bb9\u6613\u77e5\u9053\u7684\uff0c\u5173\u952e\u5728\u4e8e\u6c42\u51fa\u5b83\u7684\u9ad8\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u89c4\u5219\u56fe\u5f62\uff08\u4e5f\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff09\u7684\u9ad8\u5728y\u8f74\u4e0a\u7684\u6295\u5f71\uff0c\u5982\u4e0b\u56fe\u3002\n\nps\uff1a\u56fe\u7247\u7528\u7684\u4e4b\u524d\u7ed8\u5236\u7684\uff0c\u56e0\u6b64\u6807\u6ce8\u7684\u662f\u77e9\u5f62\u7684\u9762\u79ef\uff0c~~\u4f46\u662f\u6211\u61d2\u5f97\u518d\u7ed8\u56fe\u4e86...~~\n![](https://cdn.luogu.com.cn/upload/pic/64668.png)\n\n**\u56de\u5230\u9898\u76ee**\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u4e24\u6761\u626b\u63cf\u7ebf\u4e4b\u95f4\u7684\u8f6e\u5ed3\u7ebf\u53d1\u751f\u6539\u53d8\uff0c\u4ec5\u6709\u53ef\u80fd\u662fy\u8f74\u4e0a\u7684\u6295\u5f71\u53d1\u751f\u53d8\u5316\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7ef4\u62a4y\u8f74\u4e0a\u6295\u5f71\u7684\u603b\u957f\u5ea6\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u628a\u4e00\u4e2a\u77e9\u5f62\u53d8\u6210\u5e73\u884c\u4e8ey\u8f74\u7684\u4e24\u6761\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u5f97\u5230\u4e00\u5806\u7ebf\u6bb5\u3002\n\n\u82e5\u628a\u5b83\u4eec\u6295\u5f71\u5728y\u8f74\u4e0a\uff0c\u5219\u626b\u63cf\u4e00\u4e2a\u77e9\u5f62\u7684\u8fc7\u7a0b\u53ef\u4ee5\u770b\u4f5c\u5148\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\uff0c\u518d\u5220\u9664\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5e72\u8fd9\u6837\u4e00\u4ef6\u4e8b\u60c5\uff1a\u5728\u67d0\u4e00\u533a\u95f4\u5185\uff0c\u7ef4\u62a4\u82e5\u5e72\u7ebf\u6bb5\u7684\u5e76\u7684\u957f\u5ea6\uff0c\u652f\u6301\u5220\u9664\u6216\u63d2\u5165\u4e00\u6bb5\u7ebf\u6bb5\u3002\n\n\u4e5f\u5c31\u662f\u201c\u7ebf\u6bb5\u8986\u76d6\u201d\u3002\n\n### \u7ebf\u6bb5\u8986\u76d6\n\n\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u68f5\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u201c\u7ebf\u6bb5\u201d\u7684\u7ebf\u6bb5\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5728\u67d0\u4e2a\u533a\u95f4$[l,r]$\u5185\u88ab\u8986\u76d6\u7684\u7ebf\u6bb5\u957f\u5ea6\u3002\u8282\u70b9\u7684\u8be6\u7ec6\u5b9a\u4e49\u5982\u4e0b\uff1a\n```cpp\nclass node{ \n  public:\n    int l,r; //\u8282\u70b9\u6240\u7ef4\u62a4\u7684\u533a\u95f4\n    int cnt; //\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u6b21\u6570\n    int len; //\u8fd9\u4e2a\u533a\u95f4\u88ab\u8986\u76d6\u7684\u957f\u5ea6\n}\n```\n\u90a3\u4e48\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u4e00\u6761\u7ebf\u6bb5\uff1a\n```cpp\nclass Sugment{\n  public: \n    int r; //\u7ebf\u6bb5\u7684\u9ad8\u5ea6\n    int x; //\u6a2a\u5750\u6807\n    int k; //\u7ebf\u6bb5\u6743\u503c\n}\n```\n\u63d2\u5165\u7ebf\u6bb5\u65f6\uff0c\u6211\u4eec\u8bbe\u5b83\u7684\u6743\u503c\u4e3a1 \uff0c\u5220\u9664\u7ebf\u6bb5\u65f6\uff0c\u6211\u4eec\u8bbe\u5b83\u7684\u6743\u503c\u4e3a-1\u3002\u8fd9\u6837\u5c31\u80fd\u8ba9\u8fd9\u4e24\u6761\u7ebf\u6bb5\u62b5\u6d88\uff0c\u8fbe\u5230\u5220\u9664\u7684\u4f5c\u7528\u3002\n\n\u628a\u8fd9\u68f5\u7ef4\u62a4\u201c\u7ebf\u6bb5\u201d\u7684\u7ebf\u6bb5\u6811\u5f62\u8c61\u7684\u8868\u793a\u51fa\u6765\uff0c\u5982\u4e0b\u56fe\uff1a\n\nps:\u6bcf\u6761\u7ebf\u6bb5\u4e24\u5934\u7684\u6807\u53f7\u4ee3\u8868\u8282\u70b9\u6240\u7ef4\u62a4\u7684\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\uff08\u79bb\u6563\u5316\u4e4b\u540e\uff09\n![](https://cdn.luogu.com.cn/upload/pic/64676.png)\n\n\u4e0d\u96be\u53d1\u73b0\u7ebf\u6bb5\u662f\u6ee1\u8db3\u201c\u533a\u95f4\u52a0\u6cd5\u201d\u7684\u6027\u8d28\u7684\uff0c\u56e0\u4e3a\u5728\u5408\u5e76\u65f6\uff0c\u7236\u533a\u95f4\u82e5\u672a\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u5219\u7236\u533a\u95f4\u7ef4\u62a4\u7684\u7ebf\u6bb5\u957f\u5ea6\u4e00\u5b9a\u662f\u5b50\u533a\u95f4\u7ef4\u62a4\u503c\u7684\u548c\uff0c\u5426\u5219\u5c31\u662f\u5b50\u533a\u95f4\u7684\u8986\u76d6\u957f\u5ea6\u4e4b\u548c\u3002\n\n### \u89e3\u51b3\u95ee\u9898\n\n\u6709\u4e86\u7ebf\u6bb5\u8986\u76d6\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u597d\u89e3\u51b3\u4e86\u3002\n\n\u6bcf\u6b21\u6211\u4eec\u628a\u6a2a\u5750\u6807\u76f8\u540c\u7684\u6240\u6709\u7ebf\u6bb5\uff08\u6ce8\u610f\uff1a\u6a2a\u5750\u6807\u76f8\u540c\u7684\u8981\u4e00\u8d77\u5904\u7406\uff0c\u4e3a\u6b64\u6211\u5bf9\u62cd\u4e86\u534a\u5c0f\u65f6...\uff09\u62ff\u51fa\u6765\u66f4\u65b0\u7ebf\u6bb5\u8986\u76d6\uff0c\u82e5\u53d1\u73b0\u8986\u76d6\u7684\u603b\u957f\u5ea6\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u90a3\u4e48\u8f6e\u5ed3\u7ebf\u5c31\u4e00\u5b9a\u4f1a\u6539\u53d8\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e24\u4e2a\u6298\u70b9\uff0c\u6a2a\u5750\u6807\u90fd\u662f\u5f53\u524d\u626b\u63cf\u7ebf\u7684\u6a2a\u5750\u6807\uff0c\u7eb5\u5750\u6807\u5206\u522b\u662f\u8fdb\u884c\u7ebf\u6bb5\u8986\u76d6\u4e4b\u524d\u548c\u4e4b\u540e\uff0c\u8986\u76d6\u7ebf\u6bb5\u7684\u603b\u957f\u5ea6\uff08~~\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48~~\uff09\u3002\u7136\u540e\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\uff1a\u522b\u5fd8\u4e86\u5bf9\u7eb5\u5750\u6807\u79bb\u6563\u5316\uff01\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nconst int CN = 4e6+6;\n\nint read(){ //\u5feb\u8bfb\n    int s=0,ne=1; char c=getchar();\n    for(;c<'0'||c>'9';c=getchar()) if(c=='-') ne=-1;\n    for(;c>='0'&&c<='9';c=getchar()) s=(s<<1)+(s<<3)+c-'0';\n    return s*ne;\n}\n\nint n;\n\nclass locat{\n  public: int x,y;\n    bool operator < (const locat &a)const{\n    \tif(x == a.x) return y < a.y;\n    \treturn x < a.x;\n    }\n}ans[CN]; \nint acnt = 0;\n\n//\u7ebf\u6bb5\u8986\u76d6\nclass Sugment{ //\u5b9a\u4e49\u4e00\u6761\u7ebf\u6bb5\n  public: int r,x,k;\n    bool operator < (const Sugment &a)const\n    {return x < a.x;} \n}sug[CN];\nint scnt = 0;\n\nint pos[CN],pcnt; //\u79bb\u6563\u5316\u6570\u7ec4\nclass node{ //\u5b9a\u4e49\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\n  public: int len,cnt;\n};\nclass SGT{ //\u7ebf\u6bb5\u6811 (SugmentTree,\u4e60\u60ef\u7b80\u5199\u6210SGT,\u6211\u82f1\u8bed\u4e0d\u597d)\n  public:\n  \tnode d[CN<<2];\n  \tint GetLen(int l,int r,int k){ //\u66f4\u65b0\u5f97\u5230\u7684\u7ebf\u6bb5\u7684\u957f\u5ea6\n  \t\tif(d[k].cnt) return pos[r+1]-pos[l];\n  \t\tif(l == r) return 0;\n  \t\treturn d[k<<1].len + d[k<<1|1].len;\n    }\n  \tvoid modify(int l,int r,int k,int s,int t,int x){ //\u4fee\u6539(\u63d2\u5165/\u5220\u9664)\n  \t\tif(s<=l && r<=t){ //\u8fd9\u91cc\u7684\u64cd\u4f5c\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u7c7b\u4f3c\n  \t\t\td[k].cnt += x;\n  \t\t\td[k].len = GetLen(l,r,k);\n  \t\t\treturn;\n        }\n        int m = (l+r)>>1;\n        if(s <= m) modify(l,m,k<<1,s,t,x);\n        if(m < t) modify(m+1,r,k<<1|1,s,t,x);\n        d[k].len = GetLen(l,r,k); //\u66f4\u65b0\u7ebf\u6bb5\u957f\u5ea6\n    }\n}sgt;\n\nvoid SugmentCover(int i){ //\u7ebf\u6bb5\u8986\u76d6\n    int l = 1;\n    int r = lower_bound(pos+1,pos+pcnt+1,sug[i].r)-pos-1; //\u67e5\u627e\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\n    sgt.modify(1,pcnt,1,l,r,sug[i].k);\n}\n\nint main()\n{\n    //freopen(\"data.in\",\"r\",stdin);\n    \n    n = 0;\n    int x,y,z;\n    while(~scanf(\"%d%d%d\",&x,&y,&z)){\n        n++;\n        sug[scnt+1].r = y; sug[scnt+1].x = x; sug[scnt+1].k = 1; //\u4fdd\u5b58\u6210\u4e24\u6761\u7ebf\u6bb5\n        sug[scnt+2].r = y; sug[scnt+2].x = z; sug[scnt+2].k = -1;\n        scnt += 2;\n        pos[n] = y;\n    }\n    pos[++n] = 0; //\u9632\u6b62\u51fa\u9505 \n    \n    //\u79bb\u6563\u5316 \n    sort(sug+1,sug+scnt+1);\n    sort(pos+1,pos+n+1);\n    pcnt =1;\n    for(int i=2;i<=n;i++) \n        if(pos[i] != pos[i-1]) //\u53bb\u91cd\n            pos[++pcnt] = pos[i];\n    //solve\n    int prvh = 0; //\u4e0a\u4e00\u6b21\u7ebf\u6bb5\u8986\u76d6\u4e4b\u540e,\u5f97\u5230\u7684\u603b\u957f\u5ea6\n    for(int i=1;i<=scnt;i++){\n        while(sug[i].x==sug[i+1].x && i<scnt) //\u628a\u6a2a\u5750\u6807\u76f8\u540c\u7684\u5168\u90e8\u8986\u76d6\n            SugmentCover(i),i++;\n        SugmentCover(i);\n        if(sgt.d[1].len != prvh){ //\u51fa\u73b0\u4e86\u62d0\u70b9\n            ans[++acnt].x = sug[i].x; //\u8bb0\u5f55\u7b54\u6848,\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\n            ans[acnt].y = prvh;\n            prvh = sgt.d[1].len;\n            ans[++acnt].x = sug[i].x;\n            ans[acnt].y = prvh;\n        }\n    }\n    \n    //print\n    for(int i=1;i<=acnt;i++) //\u4f18\u96c5\u7684\u8f93\u51fa\n        if(i & 1) printf(\"%d \",ans[i].x);\n            else printf(\"%d \",ans[i].y);\n    \n    return 0; //\u53ef\u7231\u7684return 0\n}\n```\n\nin the end\uff1a~~\u5199\u5b8c\u8fd9\u4e2a,\u53d1\u73b0\u4e4b\u524d\u5199\u7684\u626b\u63cf\u7ebf\u6d45\u8c08\u6211\u81ea\u5df1\u90fd\u770b\u4e0d\u61c2\u4e86(\u6211\u8bed\u6587\u4e0d\u597d)...~~\n\n\nin the end of end:\u9644\u4e00\u7ec4\u6bd2\u7624\u6570\u636e:\n```\n1 2 2\n1 1 2\n```",
        "postTime": 1563539775,
        "uid": 70177,
        "name": "big_news",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "### \u8bba\u5982\u4f55\u5c06\u4e00\u9053\u201c\u63d0\u9ad8+\u201d\u7684\u9898\u76ee\u5199\u6210\u201c\u666e\u53ca-\u201d\n\u5173\u4e8e\u201c\u63d0\u9ad8+\u201d\u7ea7\u522b\u7684\u505a\u6cd5\uff08**\u626b\u63cf\u7ebf+\u7ebf\u6bb5\u6811+\u79bb\u6563\u5316**\uff09\u9898\u89e3\u533a\u7684\u5404\u8def\u5927\u795e\u5404\u663e\u795e\u901a\uff0c\u5df2\u7ecf\u8bb2\u89e3\u5f97\u5f88\u8be6\u7ec6\u4e86\u3002\u5bf9\u4e8e\u50cf\u6211\u4e00\u6837\u521a\u5b66\u4e60\u626b\u63cf\u7ebf\u3001\u7ebf\u6bb5\u6811\u3001\u79bb\u6563\u5316\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u9053\u4e0d\u9519\u7684\u7efc\u5408\u5165\u624b\u9898\uff08**\u5176\u5b9e\u8fd8\u662f\u5efa\u8bae\u8fd9\u51e0\u79cd\u7b97\u6cd5\u5206\u5f00\u5b66**\uff09\u3002\n\n\u4e0d\u8fc7\u5728\u8d5b\u573a\u4e0a\uff0c\u80fd\u60f3\u5230\u4e00\u4e9b\u4ee3\u7801\u7b80\u6d01\u800c\u53c8\u80fd\u4fdd\u8bc1\u6b63\u786e\u7387\u7684\u7b97\u6cd5\u4f55\u4e50\u4e0d\u4e3a\uff1f\n\n(\u4ee5\u4e0b\u4e3a\u6b63\u6587)\n\n\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u8bb0\u5f55\u4e0b\u8f74\u4e0a\u6bcf\u4e2a\u70b9\u4e0a\u5efa\u8d77\u7684\u697c\u623f\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u3002\u600e\u4e48\u8bb0\u5f55\u5462\uff1f~~\u61d2\u5f97\u6253\u7ebf\u6bb5\u6811\u7684\u8bdd\u90a3\u5c31~~\u66b4\u529b\u54af\uff1a\n\n```cpp\nwhile(scanf(\"%d%d%d\",&a,&h,&b)!=EOF) \n\tfor(i=a;i<=b;++i) H[i]=max(H[i],h); \n```\n\n\u5e94\u8be5\u5f88\u591a\u4eba\u90fd\u60f3\u5230\u4e86\u4f46\u6015T\u5c31\u4e0d\u6562\u5199\uff0c\u7b97\u4e00\u4e0b**\u65f6\u95f4\u590d\u6742\u5ea6\uff1a5000\u00d710000=5e7<1e8**\uff0c\u52a0\u4e4b\u8fd9\u9898\u5e38\u6570\u8f83\u5c0f\uff0c\u5e94\u8be5\u662f\u80fd\u8fc7\u7684\uff08\u5b9e\u9645\u4e0a\u80fd\u75284ms\u4ee5\u5185\u65f6\u95f4\u901a\u8fc7\u6240\u6709\u8be5\u9898\u7684\u6d4b\u8bd5\u70b9 \uff09\n\n\u7136\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u5947\u6570\u70b9\u548c\u5076\u6570\u70b9\u603b\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff08\u5e9f\u8bdd\uff09\uff0c**\u6bcf\u6b21\u9020\u6210\u4e24\u70b9\u51fa\u73b0\u7684\u539f\u56e0\u90fd\u662f\u6700\u5927\u9ad8\u5ea6\u7684\u53d8\u5316\u5f15\u8d77\u7684**\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u4ece\u5750\u68070\u523010000\u7ebf\u6027\u679a\u4e3e\u4e00\u904d\uff0c\u5982\u679c\u8be5\u70b9\u7684\u9ad8\u5ea6\u4e0e\u4e0a\u4e00\u70b9\u6709\u5dee\u8ddd\uff0c\u5c31\u7b49\u4e8e\u65b0\u589e\u4e86\u4e24\u4e2a\u70b9\uff0c\u5c06\u5373\u5b83\u4eec\u6a2a(\u7eb5)\u5750\u6807\u8f93\u51fa\u5373\u53ef\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint H[10005];\nint main(){\n\tregister int i,a,b,h;\n\twhile(scanf(\"%d%d%d\",&a,&h,&b)!=EOF) \n\t\tfor(i=a;i<=b;++i) H[i]=max(H[i],h); \n\tfor(i=1,h=0;i<1e4;++i)\n\t\tif(h!=H[i])\n\t\t\th=H[i],printf(\"%d %d \",i,H[i]);\n\treturn 0;\n}\n```\n\n\u60f3\u5230\u8fd9\uff0c\u5f88\u5f00\u5fc3\u5730\u5c31\u628a\u4ee3\u7801\u63d0\u4ea4\u4e86\uff0c\u4e8e\u662f\u5c31WA\u4e86\u2026\u2026(20\u5206)\n\n\u539f\u56e0\u5728\u54ea\uff1f\u5728\u70b9\u4e0e\u70b9\u95f4\u7684\u7f1d\u9699\u3002\n\n**e.g.\u5982\u679c\u6709\u4e24\u4e2a\u623f\u5b50\u7684\u4e09\u5143\u7ec4\u662f\\[1,10,3]\u4e0e\\[4,10,6],\u663e\u7136\u533a\u95f4\\[3\uff0c4]\u5185\u5b58\u5728\u4e00\u4e2a\u7f1d\u9699\uff0c\u5982\u679c\u6309\u521a\u624d\u7684\u7b97\u6cd5\uff0c\u7f1d\u9699\u9020\u6210\u7684\u56db\u4e2a\u70b9\u5c31\u88ab\u5ffd\u7565\u4e86\u3002**\n\n\u600e\u4e48\u6539\u5462\uff1f\u6709\u4e9b\u4eba\u7528\u7684\u662f\u00b10.5\u7684\u505a\u6cd5\uff0c\u4e2a\u4eba\u89c9\u5f97\u592a\u9ebb\u70e6\u4e86\uff0c\u5176\u5b9e\u53ea\u8981\u628a\u4ee3\u7801\u7b2c7\u884c\u7684\"<=\"\u6539\u6210\"<\"\u5c31\u884c\u4e86\u3002\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5c31\u7559\u7ed9\u5927\u5bb6\u601d\u8003\u4e0b\uff09\n\n\u4ee5\u4e0b\u5949\u4e0a\u7b80\u77ed\u7684AC\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint H[10005];\nint main(){\n\tregister int i,a,b,h;\n\twhile(scanf(\"%d%d%d\",&a,&h,&b)!=EOF) \n\t\tfor(i=a;i<b;++i) H[i]=max(H[i],h); \n\tfor(i=1,h=0;i<1e4;++i)\n\t\tif(h!=H[i])\n\t\t\th=H[i],printf(\"%d %d \",i,H[i]);\n\treturn 0;\n}\n```\n\n###### //\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u9009\u4e86\u8f83\u4e3a\u7b80\u5355\u7684\u9898\u76ee\u8bd5\u4e00\u4e0b\u624b\uff0c\u5982\u6709\u95ee\u9898\u6211\u4f1a\u5c3d\u5feb\u6539\u6b63\u3002",
        "postTime": 1585803361,
        "uid": 233477,
        "name": "InchTree",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u4e00\u770b\u5c31\u662f\u4e00\u9053\u626b\u63cf\u7ebf\u7684\u9898~~  \n\u770b\u770b\u8fd9\u9898\u7684\u6570\u636e\u5927\u5c0f\uff0c\u697c\u6570$n \\leq 5000$\uff0c\u5750\u6807$x,y \\leq 10000$\uff0c\u800c\u4e14\u5750\u6807\u90fd\u662f\u6574\u6570\uff0c\u7528\u66b4\u529b\u4e00\u70b9\u95ee\u9898\u90fd\u6ca1\u6709\u3002\n\n\u8fd9\u9898\u8bf4\uff0c\u7b2c\u5947\u6570\u4e2a\u70b9\u8f93\u51fa\u6a2a\u5750\u6807\uff0c\u7b2c\u5076\u6570\u4e2a\u70b9\u8f93\u51fa\u7eb5\u5750\u6807\u3002\u4f46\u4ed4\u7ec6\u7814\u7a76\u6837\u4f8b\u7684\u56fe\u7247\u6211\u4eec\u5c31\u80fd\u53d1\u73b0\uff0c\u7b2c1\u3001 2\u4e2a\u70b9\u6a2a\u5750\u6807\u76f8\u540c\uff0c\u7b2c3\u3001 4\u4e2a\u70b9\u6a2a\u5750\u6807\u76f8\u540c\u2026\u2026\u4e8e\u662f\u8fd9\u9898\u76f8\u5f53\u4e8e\u8ba9\u6211\u4eec\u4e00\u4e2a\u4e2a\u8f93\u51fa\u7b2c\u5076\u6570\u4e2a\u70b9\u7684\u5750\u6807\u3002\n\n\u5bf9\u5e94\u6bcf\u4e00\u4e2a$x$\u5750\u6807\uff0c\u7528$maxh$\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a$x$\u5750\u6807\u7684\u6700\u9ad8\u7684\u697c\u3002\n\n\u7531\u4e8e\u70b9\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u90a3\u4e48\u7b2c\u5076\u6570\u4e2a\u70b9\u662f\u8fd9\u5bf9\u70b9\u7684\u4e0a\u9762\u90a3\u4e2a\u65f6\uff0c\u5b83\u7684\u5de6\u8fb9\u7684$maxh$\u503c\u5c31\u6bd4\u5b83\u5c0f\uff1b\u5982\u679c\u662f\u4e0b\u9762\u90a3\u4e2a\u65f6\uff0c\u5b83\u53f3\u8fb9\u7684$maxh$\u503c\u6bd4\u5b83\u8981\u5c0f\u3002\n\n\u6240\u4ee5\uff0c\u53ea\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$x$\u5224\u65ad\u5b83\u7684$maxh$\u548c\u5de6\u53f3\u4e24\u8fb9\u7684\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5c31\u8f93\u51fa\u5373\u53ef\uff08\u6ce8\u610f\u6b64\u65f6\u7684$y$\u5750\u6807\u5e94\u8be5\u8f93\u51fa\u4e0a\u9762\u7684\u8fd8\u662f\u4e0b\u9762\u7684\uff09\u3002\n\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\uff1a\n![](https://i.loli.net/2019/08/18/POHRspNaMkJenm6.jpg)\n\n\u8fd9\u65f6\uff0c$maxh[x+1]$\u548c$maxh[x-1]$\u90fd\u4f1a\u76f4\u63a5\u8bbf\u95ee\u5230\u53e6\u5916\u4e00\u680b\u697c\uff0c\u56e0\u4e3a\u9ad8\u5ea6\u76f8\u7b49\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8f93\u51fa\uff0c\u8fd9\u5c31\u5c11\u8f93\u51fa\u4e86\u4e24\u4e2a\u6570\uff01  \n\u6240\u4ee5\uff0c\u6211\u4eec\u5e94\u8be5\u8bbf\u95ee$maxh[x \\pm 0.5]$\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4e0d\u80fd\u662f\u5c0f\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9$maxh[i]$\u91cc\u5b58\u5750\u6807$i/2$\u7684\u6700\u9ad8\u697c\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint maxh[20005];\nint main() {\n\tint l,h,r,L=10005,R=0; //L\u548cR\u4e3a\u6240\u6709\u697c\u623f\u7684\u6a2a\u5750\u6807\u7684\u6700\u5c0f\u548c\u6700\u5927\u503c \n\twhile(scanf(\"%d%d%d\",&l,&h,&r)!=EOF) {\n\t\tL=min(L,l);\n\t\tR=max(R,r);\n\t\tfor(int i=l; i<=r; i++) {\n\t\t\tmaxh[i<<1]=max(maxh[i<<1],h);\n\t\t\tif(i<r) maxh[i<<1|1]=max(maxh[i<<1|1],h);\n\t\t}//\u66f4\u65b0\u6bcf\u4e2ax\u5750\u6807\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6ce8\u610f2*r+1\u4e0d\u5305\u62ec\u5728\u8fd9\u90e8\u5206\u91cc \n\t}\n\tfor(int i=L; i<=R; i++) {\n\t\tif(maxh[i<<1]!=maxh[(i<<1)-1]) printf(\"%d %d \",i,maxh[i<<1]);//\u5982\u679cx\u548cx-0.5\u7684\u6700\u5927\u4e0d\u76f8\u7b49\uff0c\u8f93\u51fa(x,x\u7684\u6700\u5927\u9ad8\u5ea6) \n\t\tif(maxh[i<<1]!=maxh[i<<1|1]) printf(\"%d %d \",i,maxh[i<<1|1]);//\u5982\u679cx\u548cx+0.5\u7684\u6700\u5927\u4e0d\u76f8\u7b49\uff0c\u8f93\u51fa(x,x+0.5\u7684\u6700\u5927\u9ad8\u5ea6) \n\t}\n\treturn 0;\n}\n```\n\n\u4ee3\u7801\u603b\u517119\u884c\uff0c\u6bd4\u8d77\u5199\u626b\u63cf\u7ebf\u5c11\u4e86\u4e0d\u5c11\u3002\u8fd9\u6837\u5199\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709$O(nx)$\uff0c\u9898\u76ee\u6240\u7ed9\u7684\u6570\u636e\u8303\u56f4\u662f\u53ef\u4ee5AC\u7684\u3002\n",
        "postTime": 1566126114,
        "uid": 82124,
        "name": "sfmmdm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P1904\u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "P1904 \u89e3\u9898\u5206\u6790 By xiaolou\n\n# \u524d\u7f6e\u778eBB\uff1a\n\n\u6700\u8fd1\u67e5\u6f0f\u8865\u7f3a\uff0c\u628a\u5b66\u7684\u4e0d\u592a\u597d\u7684\u7ebf\u6bb5\u6811\u5927\u8865\u4e86\u4e00\u4e0b\n\n\u770b\u5230\u8fd9\u9898\u662f\u7ebf\u6bb5\u6811\u5c31\u679c\u65ad\u70b9\u8fdb\u6765\u4e86\n\n\u5207\u6389\u4ee5\u540e\u4e00\u770b\u9898\u89e3\u90fd\u770b\u4e0d\u61c2\uff0c\u597d\u50cf\u8fd8\u6ca1\u6709\u7ebf\u6bb5\u6811\u7684\n\n# \u4e3b\u8981\u601d\u8def\uff1a\n\n\u9898\u610f\u5927\u6982\u5c31\u662f\u7ed9\u4e86\u51e0\u4e2a\u957f\u65b9\u4f53\uff0c\u6446\u6210\u4e00\u6392\uff0c\u7136\u540e\u95ee\u6b63\u89c6\u56fe\u957f\u4ec0\u4e48\u6837\n\n\u5f88\u663e\u7136\u5c31\u662f\u6c42\u6bcf\u4e2a\u5355\u4f4d\u4e0a\u9ad8\u5ea6\u6700\u5927\u503c\uff0c\u662f\u4eba\u90fd\u80fd\u770b\u51fa\u7528\u7ebf\u6bb5\u6811\u505a\uff08\u5199\u9898\u89e3\u7684\u90a3\u7fa4\u4eba\u5927\u6982\u662f\u795e\u4ed9\uff09\n\n\u4e3b\u8981\u601d\u60f3\uff1a\u5bf9\u4e8e\u6bcf\u680b\u5efa\u7b51\u7684\u5360\u5730\u8303\u56f4\uff0c\u8fdb\u884c\u4e00\u4e0b\u533a\u95f4\u6c42\u6700\u5927\u503c\uff0c\u590d\u6742\u5ea6O(mlogn)\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u4f4d\uff0c\u6c42\u51fa\u8be5\u5355\u4f4d\u4e0a\u7684\u6700\u5927\u503c\uff0c\u590d\u6742\u5ea6O(nlog n)\n\n\u56e0\u4e3an<=10000,m<=5000\uff0c\u6240\u4ee5\u53ef\u4ee5\u7a33\u8fc7\n\n# \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\u76f4\u63a5\u8d34\u4ee3\u7801\u5427\uff0c\u5177\u4f53\u770b\u6ce8\u91ca\uff0c\u7ebf\u6bb5\u6811\u5c31\u4e0d\u89e3\u91ca\u4e86\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nstruct SGTree\n{\n    int le,ri;\n    int la;\n    int mx;\n}t[40005];\nstruct Buildings\n{\n\tint l,r;\n\tint h;\n\tbool operator <(const Buildings A) const\n\t{\n\t\treturn h<A.h;\n\t}\n}b[10005]; \nint a[10005];\nvoid BuildT(int id,int l,int r)//\u5efa\u6811\n{\n    t[id].le=l;\n    t[id].ri=r;\n    t[id].la=0;\n    if(t[id].le==t[id].ri)\n    {\n        t[id].mx=0;\n        return;\n    }\n    int mid=(l+r)/2;\n    BuildT(id*2,l,mid);\n    BuildT(id*2+1,mid+1,r);\n}\nvoid Push(int id)//la\u6807\u8bb0\u4e0b\u653e\n{\n    if(t[id].la)\n    {\n        t[id*2].la=t[id].la;\n        t[id*2+1].la=t[id].la;\n        t[id*2].mx=max(t[id*2].mx,t[id*2].la);\n        t[id*2+1].mx=max(t[id*2+1].mx,t[id*2+1].la);\n        t[id].la=0;\n    }\n}\nvoid Change(int id,int l,int r,int c)//\u4fee\u6539\uff0c\u6ce8\u610f\u7ec6\u8282\n{\n    if(t[id].le==l&&t[id].ri==r)\n    {\n        t[id].mx=max(t[id].mx,c);\n        t[id].la=c;\n        return;\n    }\n    Push(id);\n    if(r<=t[id*2].ri)\n    {\n        Change(id*2,l,r,c);\n    }\n    else if(l>=t[id*2+1].le)\n    {\n        Change(id*2+1,l,r,c);\n    }\n    else\n    {\n        Change(id*2,l,t[id*2].ri,c);\n        Change(id*2+1,t[id*2+1].le,r,c);\n    }\n    t[id].mx=max(t[id*2].mx,t[id*2+1].mx);\n}\nint Query(int id,int l,int r)//\u67e5\u8be2\n{\n    if(t[id].le==l&&t[id].ri==r)\n    {\n        return t[id].mx;\n    }\n    Push(id);\n    if(r<=t[id*2].ri)\n    {\n        return Query(id*2,l,r);\n    }\n    else if(l>=t[id*2+1].le)\n    {\n        return Query(id*2+1,l,r);\n    }\n    else\n    {\n        return max(Query(id*2,l,t[id*2].ri),Query(id*2+1,t[id*2+1].le,r));\n    }\n}\n\nint main()\n{\n    BuildT(1,1,10000);\n    int l,h,r;\n    int cnt=1;\n    while(cin >> b[cnt].l >> b[cnt].h >> b[cnt].r)\n    {\n        if(b[cnt].l==0&&b[cnt].r==0&&b[cnt].h==0)\n        {\n            break;\n        }\n        cnt++;\n    }\n    sort(b+1,b+cnt);//\u5c06\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4e0d\u7136\u4f1a\u9519\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\n    for(int i=1;i<cnt;++i)\n    {\n    \tChange(1,b[i].l,b[i].r-1,b[i].h);\n    }\n    for(int i=1;i<=10000;++i)\n    {\n        a[i]=Query(1,i,i);\n        printf(\"%d \",a[i]);\n    }\n    for(int i=1;i<=10000;++i)\n    {\n\t\t   if(a[i]!=a[i-1])\n\t\t\t{\n\t\t\t\tprintf(\"%d %d \",i,a[i]);//\u6309\u7167\u8981\u6c42\u8f93\u51fa\n\t\t\t}\n     } \n     return 0;\n}\n```\n\n\u6700\u540e\u5b89\u5229\u4e00\u4e0b[\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/xiaolou/)\n\n~~\u70b9\u4e2a\u8d5e\u5427~~",
        "postTime": 1559445138,
        "uid": 68675,
        "name": "xiaolou",
        "ccfLevel": 0,
        "title": "P1904\u9898\u89e3"
    },
    {
        "content": "\u5e73\u8861\u6811+\u626b\u63cf\u7ebf\n\n\u628a(l,h,r)\u7684\u697c\u623f\u8f6c\u5316\u4e3a\u4e24\u6761\u7ad6\u76f4\u7684\u7ebf\u6bb5(l,h,0),(r,h,1) \u8868\u793a\u5728l\u7684\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u9ad8h\u7684\u7ebf\u6bb5\uff0c\u5728r\u7684\u4f4d\u7f6e\u5220\u53bb\u4e00\u6761\u9ad8h\u7684\u7ebf\u6bb5\n\n\u6309\u7167x\u5750\u6807\u5347\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u9010\u6b21\u626b\u8fc7\u53bb\uff0c\u5f00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u6700\u5927\u503c(~~\u5f53\u7136\u7528\u5806\u4e5f\u53ef\u4ee5\uff0c\u4f46\u6211\u5c31\u559c\u6b22\u5e73\u8861\u6811~~)\uff0c\u8fd9\u91cc\u7528Treap\n\n\u8fdb\u6765\u4e00\u6761\u7ebf\u6bb5(pos,len)\u7684\u65f6\u5019\uff0c\u5982\u679c\u5b83\u7684\u9ad8\u5ea6\u6bd4\u539f\u6765\u7684\u90fd\u8981\u9ad8\uff0c\u90a3\u5c31\u4f1a\u9020\u6210\u4e24\u4e2a\u4e2a\u8f6e\u5ed3\u70b9\u4e86\uff0c\u5750\u6807\u662f(pos,\u524d\u6700\u9ad8\u7684\u9ad8\u5ea6)\u548c(pos,len)\n\n\u5220\u53bb\u4e00\u6761\u7ebf\u6bb5(pos,len)\u7684\u65f6\u5019\uff0c\u5982\u679c\u5b83\u662f\u5f53\u524d\u6700\u9ad8\u7684\u8bdd\uff0c\u5c31\u4f1a\u9020\u6210\u4e24\u4e2a\u8f6e\u5ed3\u70b9(pos,len)\u548c(pos,\u5220\u53bb\u540e\u6700\u9ad8\u7684\u9ad8\u5ea6)\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing std::max;\nusing std::sort;\ntemplate<class type>inline const void read(type &in)\n{\n    in=0;char ch=getchar();short fh=1;\n    while (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n    while (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n    in*=fh;\n}\nconst int N=1e5+10;\nstruct segment\n{\n    int pos,len;bool type;\n    inline const bool operator<(const segment &s)const\n    {\n        if (pos!=s.pos)return pos<s.pos;\n        if (type!=s.type)return type<s.type;\n        return len>s.len;\n    }\n}s[N<<1];\nint cnt;\ninline const void add(int pos,int len,bool type)\n{\n    s[++cnt]=(segment){pos,len,type};\n}\nclass Treap\n{\n    private:\n        struct tree\n        {\n            int value,cnt,priority;\n            tree *son[2];\n        }memory_pool[N<<1],*tail,*null,*recycle[N];\n        int top;\n    public:\n        tree *root;\n    protected:\n        inline const void init()\n        {\n            top=0;\n            tail=memory_pool;\n            null=tail++;\n            null->son[0]=null->son[1]=null;\n            null->value=null->cnt=null->priority=0;\n            root=null;\n        }\n        inline tree *spawn(int key)\n        {\n            tree *p=top?recycle[--top]:tail++;\n            p->cnt=1;\n            p->value=key;\n            p->priority=rand();\n            p->son[0]=p->son[1]=null;\n            return p;\n        }\n        inline const void erase(tree *&p)\n        {\n            recycle[top++]=p;p=null;\n        }\n        inline const void rotate(tree *&fa,bool f)\n        {\n            tree *p=fa->son[f];\n            fa->son[f]=p->son[f^1];\n            p->son[f^1]=fa;\n            fa=p;\n        }\n        inline tree *getmax()\n        {\n\t\t\ttree *p=root;\n\t\t\twhile (p->son[1]!=null)p=p->son[1];\n\t\t\treturn p;\n\t\t}\n    public:\n        inline Treap(){init();}\n        inline const void insert(tree *&p,int key)\n        {\n            if (p==null)return (void)(p=spawn(key));\n            if (p->value==key)return (void)(p->cnt++);\n            bool f=p->value<key;\n            insert(p->son[f],key);\n            if (p->son[f]!=null&&p->priority>p->son[f]->priority)\n                rotate(p,f);\n        }\n        inline const void Delete(tree *&p,int key)\n        {\n            if (p==null)return;\n            if (p->value==key)\n            {\n                if (p->cnt>1)return (void)(p->cnt--);\n                if (p->son[0]==null&&p->son[1]==null)return erase(p);\n                if (p->son[0]==null)return (void)(p=p->son[1]);\n                if (p->son[1]==null)return (void)(p=p->son[0]);\n                bool f=p->son[0]->priority>p->son[1]->priority;\n                rotate(p,f);Delete(p,key);\n            }\n            else Delete(p->son[p->value<key],key);\n        }\n        inline const int mx()\n        {\n            return getmax()->value;\n        }\n        inline const bool only()\n        {\n\t\t\treturn getmax()->cnt==1;\n\t\t}\n}T;\nint n,tot,sum,ans[N<<2][2];\ninline const void ins(int x,int y)\n{\n    tot++;\n    ans[tot][1]=x;\n    ans[tot][0]=y;\n}\nint main()\n{\n    for (int l,h,r;scanf(\"%d%d%d\",&l,&h,&r)==3;n++)add(l,h,0),add(r,h,1); //\u5de7\u5999\u7684\u8bfb\u5165\n    sort(s+1,s+cnt+1); //\u6392\u5e8f\n    for (int i=1;i<=cnt;i++)\n    {\n        int fm=T.mx(); //\u4ee3\u8868\u4e4b\u524d\u7684\u6700\u5927\u503c(former_max)\n        if (s[i].type)\n        {\n\t\t\tbool only=T.only(); //\u53ea\u662f\u7528\u6765\u5224\u65ad\u5f53\u524d\u7684\u6700\u5927\u503c\u662f\u5426\u552f\u4e00\uff0c\u9632\u6b62\u91cd\u590d\u52a0\u5165\u7b54\u6848\n            T.Delete(T.root,s[i].len);\n            if (s[i].len!=fm||!only)continue;\n            ins(s[i].pos,s[i].len);\n            int nm=T.mx(); //\u5220\u53bb\u540e\u7684\u65b0\u6700\u5927\u503c(new/next_max)\n            ins(s[i].pos,nm);\n        }\n        else\n        {\n            T.insert(T.root,s[i].len);\n            if (s[i].len<=fm)continue;\n            ins(s[i].pos,fm);\n            ins(s[i].pos,s[i].len);\n        }\n    }\n    for (int i=1;i<=tot;i++)\n        printf(\"%d \",ans[i][i%2]); //\u5de7\u5999\u7684\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1548256785,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u9898\u9762\u770b\u8d77\u6765\u5f88\u4e0d\u597d\u505a\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ed4\u7ec6\u53d1\u73b0\uff0c\u6298\u7ebf\u7684\u4f4d\u7f6e\u663e\u7136\u5728\u6709\u9ad8\u5ea6\u53d8\u5316\u7684\u5730\u65b9\u51fa\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06(hi,ri)\u4e8c\u5143\u7ec4\uff08\u6253\u4e2a\u7ed3\u6784\u4f53)\u5efa\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4ee5hi\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e\uff0cri\u7528\u6765\u5224\u65ad\u5806\u9876\u6709\u6ca1\u6709\u8fc7\u671f\uff0c\u8fc7\u671f\u5219\u5f39\u51fa\uff0c\u82e5\u6700\u5927\u503c\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u5c31\u662f\u6709\u6298\u7ebf\uff0c\u5c06\u5f53\u524dx\u5750\u6807\u548c\u53d8\u5316\u540e\u7684\u503c\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6ce8\uff1a[\u8fd9\u9898\u6570\u636e\u6709\u95ee\u9898](https://www.luogu.org/discuss/show?postid=46558)\uff082018/08/14)\n\n\u6211\u4eec\u5148\u5c06\u6240\u6709\u5efa\u7b51\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7c7b\u4f3c\u79bb\u6563\u5316\u4e00\u6837\u3002\n\n\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u8fd9\u4e9b\u70b9\uff0c\u5982\u679c\u662f\u5de6\u7aef\u70b9\u5219\u5165\u5806\u3002\u6bcf\u5230\u4e00\u4e2a\u7aef\u70b9\u90fd\u8981\u5224\u65ad\u5f53\u524d\u5806\u9876\u662f\u5426\u8fc7\u65f6\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u6709\u6ce8\u91ca\uff0c\u597d\u5427\u7528\u4e86\u4f18\u5148\u961f\u5217\uff09\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n#define N 5050\nstruct building{\n\tint h,r;//h\u4e3a\u9ad8\u5ea6\uff0cr\u4e3a\u53f3\u7aef\u70b9\n\tbuilding(int h_,int r_){h=h_;r=r_;}\n\tbool operator <(const building& i)const{return h<i.h;}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u4ee5\u9ad8\u5ea6h\u6765\u5efa\u5927\u6839\u5806\u3002\n};\nstruct sp{\n\tint v,w;//v\u6307\u5411\u539f\u6765\u4f4d\u7f6e\uff0cw\u4e3ax\u5750\u6807\n\tbool p;//p=0\u5219\u662f\u5de6\u7aef\u70b9\uff0cp=1\u662f\u53f3\u7aef\u70b9\n\tsp(int v_=0,int w_=0,bool p_=0){v=v_;w=w_;p=p_;}\n}b[N*2];\nint n,a[N][3];\ninline bool comp(const sp&x,const sp&y){return x.w<y.w;}\npriority_queue<building>q;\nint main(){\n\tint l,h,r;\n\twhile (scanf(\"%d%d%d\",&l,&h,&r)!=EOF){\n\t\ta[++n][0]=h;\n\t\ta[n][1]=l;\n\t\ta[n][2]=r;\n\t\tb[n*2-1]=sp(n,l,0);\n\t\tb[n*2]=sp(n,r,1);//\u628a\u5de6\u53f3\u7aef\u70b9\u90fd\u52a0\u4e2ab\u6570\u7ec4\n\t}\n\tsort(b+1,b+2*n+1,comp);//\u5c06b\u6570\u7ec4\u6309x\u5750\u6807\u6392\u5e8f\n\tint last=0;\n\tfor (int i=1;i<=2*n;i++){\n\t\tif (q.size()){//\u8fd9\u4e00\u6bb5\u65f6\u5224\u65ad\u5806\u9876\u662f\u5426\u8fc7\u65f6\n\t\t\tr=(q.top()).r;\n\t\t\twhile (q.size()&&b[i].w>=r){\n\t\t\t\tq.pop();\n\t\t\t\tif (q.empty()) break;\n\t\t\t\tr=(q.top()).r;\n\t\t\t}\n\t\t}\n\t\tif (!b[i].p) q.push(building(a[b[i].v][0],a[b[i].v][2]));//\u662f\u5de6\u7aef\u70b9\u5165\u5806\n\t\tif (i<2*n&&b[i].w==b[i+1].w) continue;\n\t\tif (q.size()) h=(q.top()).h; else h=0;//\u5806\u7a7a\u9ad8\u5ea6\u4e3a0\n\t\tif (h!=last){//\u9ad8\u5ea6\u53d8\u5316\u5219\u8f93\u51fa\n\t\t\tprintf(\"%d %d \",b[i].w,h);\n\t\t\tlast=h;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1534167699,
        "uid": 4352,
        "name": "haoyun1",
        "ccfLevel": 7,
        "title": "\u5929\u9645\u7ebf\u3010\u89e3\u9898\u62a5\u544a\u3011"
    },
    {
        "content": "\u770b\u9898\u89e3\u91cc\u6ca1\u6709\u4eba\u7528\u5206\u5757\uff1f\u90a3\u5c31\u6765\u4e00\u53d1\u5206\u5757\u7684\u9898\u89e3\u3002\n\n\u5148\u5c06\u6570\u636e\u8bfb\u5165\uff0c\u518d\u7edf\u8ba1\u51fa\u5efa\u7b51\u7269\u7684x\u5750\u6807\u6700\u5927\u503c\uff0c\u8fd8\u8981\u52a0\u4e00\u4e2a$1$\uff0c\u5426\u5219\u5c31\u4f1a\u6ca1\u6709\u6700\u540e\u4e24\u4e2a\u8f93\u51fa\u3002\u5fc5\u987b\u5148\u8bfb\u5165\uff0c\u5426\u5219\u5f88\u96be\u786e\u5b9a\u5206\u5757\u6bcf\u5757\u7684\u5927\u5c0f\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u4e0a\u6211\u4eec\u7684\u5206\u5757\u5927\u6cd5\u4e86\u3002\u3002\u3002\u6bcf\u626b\u4e00\u904d\u533a\u95f4\uff0c\u7136\u540e\u518d\u5c06\u4e0d\u5728\u6574\u4e2a\u5757\u5185\u7684\u70b9\u5168\u90e8\u66b4\u529b\u5904\u7406\uff0c\u518d\u5c06\u6bcf\u5757\u6807\u8bb0\u4e0a\u53d6\u6700\u5927\u503c\uff0c\u6700\u540e\u7edf\u8ba1\u8be5\u70b9\u7684\u9ad8\u5ea6\u5c31\u662f\u5728\u6570\u7ec4\u5185\u7684\u9ad8\u5ea6\u548c\u8be5\u70b9\u6240\u5728\u7684\u5757\u7684\u6807\u8bb0\u7684\u6700\u5927\u503c\u3002\n\n\u6700\u540e\u5224\u65ad\u5c06\u6bcf\u4e00\u4e2a\u70b9\u626b\u4e00\u904d\uff0c\u5982\u679c\u4e0e\u524d\u9762\u7684\u9ad8\u5ea6\u4e0d\u4e00\u81f4\uff0c\u5c31\u8f93\u51fa\u8be5\u70b9\u7684\u6a2a\u5750\u6807\u548c\u9ad8\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n \\sqrt{n})$\uff0c\u4f1a\u6bd4\u7eaf\u66b4\u529b\u5feb\u5f88\u591a\u3002\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 10010\nusing namespace std;\nint a[maxn],l[maxn],r[maxn],h[maxn],N,ln,rn;\nint n,m,f[maxn];\ntemplate <typename T> void read(T &x) {\nx = 0; char c = getchar();\nfor (; !isdigit(c); c = getchar());\nfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n}\nint main() \n{\nn=0;m=1;\nwhile (scanf(\"%d\",&l[m])!=EOF) //\u5148\u8bfb\u5165\n  {\n  \tread(h[m]);read(r[m]);\n  \tr[m]--;\n  \tn=max(n,r[m]); //\u7edf\u8ba1\u6a2a\u5750\u6807\u7684\u6700\u5927\u503c\n  \tm++;\n  }\nm--;\nn++; //\u6700\u5927\u6a2a\u5750\u6807\u8981\u52a0\u4e00\u54e6\nN=sqrt(n);\nfor (int j=1;j<=m;j++)\n  {\n  \tln=(l[j]-1)/N+1; \n  \trn=(r[j]-1)/N+1; //\u5c06\u4e24\u4e2a\u70b9\u6240\u5728\u7684\u5757\u627e\u51fa\u6765\n  \tif (ln==rn)//\u5206\u5757\u5927\u6cd5\u4e0d\u89e3\u91ca\n  \t  {\n  \t  \tfor (int i=l[j];i<=r[j];i++)\n  \t  \t  a[i]=max(a[i],h[j]);\n  \t  \tcontinue;\n\t\t}\n\tif (l[j]!=(ln-1)*N+1)\n\t  {\n\t  \tfor (int i=l[j];i<=ln*N;i++)\n\t  \t  a[i]=max(a[i],h[j]);\n\t  \tln++;\n\t  }\n\tif (r[j]!=rn*N)\n\t  {\n\t  \tfor (int i=(rn-1)*N+1;i<=r[j];i++)\n\t  \t  a[i]=max(a[i],h[j]);\n\t  \trn--;\n\t  }\n\tfor (int i=ln;i<=rn;i++)\n\t  f[i]=max(f[i],h[j]);\n  }\nint flag=0;\nfor (int i=1;i<=n;i++)\n  {\n  \ta[i]=max(a[i],f[(i-1)/N+1]);   //\u8be5\u70b9\u7684\u9ad8\u5ea6\u5c31\u662f\u5728\u6570\u7ec4\u5185\u7684\u9ad8\u5ea6\u548c\u8be5\u70b9\u6240\u5728\u7684\u5757\u7684\u6807\u8bb0\u7684\u6700\u5927\u503c\n  \tif (a[i]!=a[i-1])\n  \t    {\n  \t    if (flag==0) \n  \t      printf(\"%d %d\",i,a[i]);\n  \t    else printf(\" %d %d\",i,a[i]);\n  \t  \tflag=1;\n  \t    }\n  }\nprintf(\"\\n\");\nreturn 0;\n}\n\n```\n\n",
        "postTime": 1565177053,
        "uid": 119685,
        "name": "Kevin_Wa",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5427\uff0c\u8fd9\u9898\uff0c\u548cUVA105\u4e00\u6bdb\u4e00\u6837\uff0c\u53ef\u662f\u8fd9\u9053\u9898\u56fe\u597d\u770b\u4e86\u4e00\u70b9\uff0c\u5543\u5543\uff0c\u5c31\u63d0\u9ad8+\u84dd\u4e86\uff0c\u53ef\u601c\u4e86\u6211\u4eec\u7684UVA105\u624d\u666e\u53ca\u9ec4\uff1b\n\n\u597d\u5427\u8fdb\u5165\u6b63\u9898QWQ\n\u4e0b\u9762\u662f\u8d34\u4ee3\u7801\u65f6\u95f4\u3002\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint ans[10001],ls=0x7f7f7f,rs=-0x7f7f7f; \nint main() {\n\tstd::ios::sync_with_stdio(false); \n\tint l,r,h;\n\tmemset(ans,0,sizeof(ans));\n\twhile(cin>>l>>h>>r) {\n\t\tls=min(l,ls); rs=max(r,rs);\n\t\tfor(int i=l; i<r; i++) {\n\t\t\tif(ans[i]<h) ans[i]=h;}}\n\tfor(int i=ls; i<rs; i++) {\n\t\tif(ans[i]!=ans[i-1]) {\n\t\t\tif(ans[i]==0) cout<<i<<\" \"<<0<<\" \";\n\t\t\telse cout<<i<<\" \"<<ans[i]<<\" \";} }\n\tcout<<rs<<\" \"<<0<<endl;\n}\n```\n\u5f53\u7136\u4e86\u65e2\u7136\u601d\u7ef4\u96be\u5ea6\u548c\u7f16\u7a0b\u590d\u6742\u5ea6\u90a3\u4e48\u4f4e\u3002\u3002\u65f6\u95f4\u4e5f\u662f\u5927\u7684\u53ef\u601c\uff0c\uff0c\n14ms\uff0c\u8fbe\u5230\u4e86\u5012\u6570\uff0c\uff0c\uff0c\uff0c\n\u601d\u8def\u5c31\u662f\u548chash\u8868\u5dee\u4e0d\u591a\uff0c\u4e00\u4e0b\u628a10000\u62c9\u5f00\u6765\uff0c\u6bcf\u6709\u4e00\u4e2a\u5efa\u7b51\u5c31\u8fdb\u884c\u4fee\u6539\u6700\u5927\u503c\uff08\u56e0\u4e3a\u8f6e\u5ed3\u53ea\u770b\u6700\u5927\u503c\uff09\n\u5206\u6790\u4e00\u4e0b\u540e\uff0c\u795e\u5947\u7684\u53d1\u73b0\uff0c\u53c8\u4e0d\u7206\u7a7a\u95f4\uff0c\u66f4\u4e0d\u70b8\u65f6\u95f4\uff0c\uff0c\nQAQQAQAQAQ\n\u53ef\u601c\u6211\u662f\u51b2\u7740\u7ebf\u6bb5\u6811\u70b9\u8fdb\u6765\u7684\uff0c\u5dee\u70b9\u5199\u4e86\u4e2anlogn\u7684\u4fee\u6539\uff0c\uff0c\u62dc\u62dc\u653e\u7740n\u7684\u4fee\u6539\u4e0d\u770b\u3002\u3002\u3002\u6211\u8fd9\u662f\u592a\u5f31\u4e86",
        "postTime": 1540819235,
        "uid": 27427,
        "name": "keydu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\u8f6e\u5ed3\u7ebf\u4e0a\u7684\u70b9\u5750\u6807\u90fd\u5728\u8f6e\u5ed3\u9ad8\u5ea6\u53d1\u751f\u53d8\u5316\u7684\u4f4d\u7f6e\u4e0a\n\n\u800c\u5bf9\u4e8e\u8f93\u51fa\uff0c\u53ef\u4ee5\u53d1\u73b0\u5c31\u662f\u9ad8\u5ea6\u53d1\u751f\u53d8\u5316\u7684\u6a2a\u5750\u6807\u4e0e\u53d8\u5316\u540e\u7684\u9ad8\u5ea6\n\n\u800c\u5f53\u524d\u8f6e\u5ed3\u7684\u9ad8\u5ea6\u5c31\u662f\u5f53\u524d\u6700\u9ad8\u697c\u623f\u7684\u9ad8\u5ea6\n\n\u626b\u63cf\u7ebf\u518d\u7ef4\u62a4\u6700\u5927\u503c\n\n\u8fd9\u91cc\u7528Splay\n\n//\u5176\u5b9e\u66b4\u529b\u90fd\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n=1,xm,ym,hst1,hst2,in,u=1,root,tot;\nstruct House\n{\n\tint x,y,h;\n}h[5010];\nstruct Splay\n{\n\tint son[2],fa,val,size,cnt;\n}t[5010];\nbool cmp(House a,House b)//\u6839\u636e\u697c\u623f\u5148\u540e\u987a\u5e8f\u6392\u5e8f\n{\n\tif(a.x==b.x){return a.h>b.h;}\n\treturn a.x<b.x;\n}\nint min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nint max(int a,int b)\n{\n\treturn a>b?a:b;\n}\nint New(int x)\n{\n\tt[++tot].val=x,t[tot].cnt=1,t[tot].size=1;\n\treturn tot;\n}\nvoid Update(int p)\n{\n\tt[p].size=t[t[p].son[0]].size+t[t[p].son[1]].size+t[p].cnt;\n}\nint Relate(int p)\n{\n\treturn t[t[p].fa].son[1]==p; \n}\nvoid Connect(int p,int fa,bool which)\n{\n\tt[p].fa=fa;\n\tif(fa){t[fa].son[which]=p;}\n}\nvoid Rotate(int p)\n{\n\tint fa=t[p].fa;\n\tbool lr=Relate(p);\n\tConnect(p,t[fa].fa,Relate(fa));\n\tConnect(t[p].son[lr^1],fa,lr);\n\tConnect(fa,p,lr^1);\n\tUpdate(fa);Update(p);\n}\nvoid Splay(int p,int goal)\n{\n\tfor(int fa;(fa=t[p].fa)!=goal;Rotate(p))\n\t{\n\t\tif(t[fa].fa!=goal){Rotate(Relate(p)==Relate(fa)?fa:p);}\n\t}\n\tif(!goal){root=p;}\n}\nvoid Insert(int x)\n{\n\tif(!root){New(x);root=tot;return;}\n\tint now=root;\n\twhile(1)\n\t{\n\t\tif(x==t[now].val)\n\t\t{\n\t\t\t++t[now].cnt;\n\t\t\tUpdate(now);Update(t[now].fa);\n\t\t\tSplay(now,0);\n\t\t\treturn;\n\t\t}\n\t\tint fa=now;\n\t\tbool which=x>t[now].val;\n\t\tnow=t[fa].son[which];\n\t\tif(!now)\n\t\t{\n\t\t\tNew(x);\n\t\t\tConnect(tot,fa,which);\n\t\t\tUpdate(fa);\n\t\t\tSplay(tot,0);\n\t\t\treturn;\n\t\t}\n\t}\n}\nvoid Find(int x)\n{\n\tif(!root){return;}\n\tint now=root;\n\twhile(t[now].son[x>t[now].val]&&t[now].val!=x){now=t[now].son[x>t[now].val];}\n\tSplay(now,0);\n}\nint GP(int x)\n{\n\tFind(x);\n\tif(t[root].val<x){return root;}\n\tint now=t[root].son[0];\n\twhile(t[now].son[1]){now=t[now].son[1];}\n\treturn now;\n}\nint GN(int x)\n{\n\tFind(x);\n\tif(t[root].val>x){return root;}\n\tint now=t[root].son[1];\n\twhile(t[now].son[0]){now=t[now].son[0];}\n\treturn now;\n}\nvoid Delete(int x)\n{\n\tint pre=GP(x),nxt=GN(x);\n\tSplay(pre,0);\n\tSplay(nxt,pre);\n\tint del=t[nxt].son[0];\n\tif(t[del].cnt>1)\n\t{\n\t\tt[del].cnt--;\n\t\tSplay(del,0);\n\t}\n\telse{t[nxt].son[0]=0;}\n}\nint GVBR(int rank)\n{\n\tint now=root;\n\twhile(now)\n\t{\n\t\tif(t[now].son[0]&&rank<=t[t[now].son[0]].size)\n\t\t{\n\t\t\tnow=t[now].son[0];\n\t\t\tcontinue;\n\t\t}\n\t\trank-=t[t[now].son[0]].size+t[now].cnt;\n\t\tif(rank<=0){return t[now].val;}\n\t\tnow=t[now].son[1];\n\t}\n}\nint main()\n{\n\tInsert(-19260817);Insert(19260817);//\u5728\u5220\u9664\u65f6\u9700\u8981\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u53ef\u4ee5\u63d2\u5165\u4e00\u4e2ainf\u4e0e-inf\n\twhile(scanf(\"%d%d%d\",&h[n].x,&h[n].h,&h[n].y)!=EOF)//\u7279\u6b8a\u7684\u8bfb\u5165\u5904\u7406\n\t{\n\t\txm=min(xm,h[n].x),ym=max(ym,h[n].y);\n\t\t++n;\n\t}\n\t--n;\n\tsort(h+1,h+n+1,cmp);\n\tfor(int i=xm;i<=ym;++i)\n\t{\n\t\thst2=0;\n\t\twhile(h[u].x==i)//\u628a\u5f53\u524d\u697c\u623f\u63d2\u5165\n\t\t{\n\t\t\tInsert(h[u].h);\n\t\t\t++u,++in;\n\t\t}\n\t\tfor(int j=1;j<=u;++j)//\u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\uff0c\u4e0d\u8fc7O(nm)\u4e5f\u8db3\u4ee5\u901a\u8fc7\u8fd9\u9898\n\t\t{\n\t\t\tif(h[j].y==i){Delete(h[j].h);--in;}//\u628a\u7ed3\u675f\u7684\u697c\u623f\u5220\u9664\n\t\t}\n\t\thst2=max(hst2,GVBR(in+1));//\u66f4\u65b0\u6b64\u65f6\u7684\u9ad8\u5ea6\n\t\tif(hst1!=hst2){printf(\"%d %d \",i,(hst2==-19260817?0:hst2));}\n\t\thst1=hst2;//\u4fdd\u5b58\u6b64\u65f6\u7684\u9ad8\u5ea6\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1563542014,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u8bf4\u5b9e\u8bdd \u8fd9\u9898\u771f\u7684\u4e0d\u662f\u5f88\u96be \u4f46\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u662f\u84dd\u9898   \n\u770b\u89c1\u8fd9\u9898\u4ece $a[i].l$ \u5230 $a[i].r$ \u7684\u5efa\u7b51\u9ad8\u5ea6\u5168\u662f $a[i].h$ \n\u81ea\u7136\u60f3\u5230 \u7528 [ODT](https://www.cnblogs.com/yzhang-rp-inf/p/9443659.html) \u6765\u6c34 \u4f46\u662f \u6709\u4e2a~~\u5c0f\u5c0f\u7684~~\u95ee\u9898   \n#### \u73c2\u6735\u8389\u6811\u7684\u63a8\u5e73\u592a\u66b4\u529b\u4e86  \u4e00\u822c\u4e0d\u8003\u8651\u5927\u5c0f\u5173\u7cfb \u76f4\u63a5\u8d4b\u503c  \u4f46\u662f\u8fd9\u9898\u662f\u8f6e\u5ed3\u7ebf  \n\u4e0d\u50cf [\u8fd9\u9898](https://www.luogu.com.cn/problem/P3740) \u53ef\u4ee5\u76f4\u63a5\u7528\u73c2\u6735\u8389\u6811\u6a21\u677f\u6c34  \n\u5176\u5b9e\u5f88\u7b80\u5355 ~~\u663e\u7136~~ \u5bf9\u4e8e\u4e00\u4e2a\u70b9 \u6700\u9ad8\u7684\u90a3\u680b\u697c\u624d\u662f\u6700\u540e\u7ec4\u6210\u8f6e\u5ed3\u7ebf\u7684\u90e8\u5206 \u90a3\u6211\u4eec\u5bf9\u4e8e $a[i]$ \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4 \u6309\u7167 $h$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5728\u63a8\u5e73\u7684\u65f6\u5019\u8ba9\u66f4\u5927\u7684 $h$ \u8986\u76d6\u6389\u8f83\u5c0f\u7684    \n### $\\text{\u672c\u9898\u6bd2\u7624 \u8bf7\u6ce8\u610f\u7ec6\u8282}$   \n\n\n------------\n\u6211\u77e5\u9053\u4f60\u4eec\u6700\u60f3\u8981\u8fd9\u4e2a   \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#include<cstdlib> \n#include<vector>\n#define IT set<node>::iterator //\u5f04\u4e00\u4e2a\u77ed\u4e00\u70b9\u7684 \nusing namespace std;\ntypedef long long ll;\nstruct node//\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9 \n{\n\tint l,r;\n\tmutable int v;\n\tnode(int L,int R=-1,int V=0):l(L),r(r),v(V){}\n\tbool operator < (const node &t)const{\n\t\treturn l<t.l;\n\t}\n};\nset<node> s;//\u73c2\u6735\u8389\u6811 \nstruct node2//\u518d\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53 \u5b58 \u8bfb\u5165\u7684\u6570\u636e \u548c \u8f93\u51fa\u7b54\u6848\u7684\u6570\u7ec4 \n{\n\tint l;\n\tint r;\n\tint v;\n}a[5005];\nint n;//\u4e00\u5171\u6709\u591a\u5c11\u4e2a \nint rl,rr,rh;//\u8bfb\u5165\u7684 l r h \nvector<node2> ans;//\u7528\u4e8e\u8ba1\u7b97\u7b54\u6848\u7684\u6570\u7ec4 \ninline void read(int &x)//\u5feb\u8bfb \n{\n\tint f;char c;\n\tfor (f=1,c=getchar();c<'0'||c>'9';c=getchar()) if(c=='-') f=-1;\n\tfor (x=0;c<='9'&&c>='0';c=getchar()) x=x*10+(c&15);x*=f;\n}\ninline IT split(int pos)//\u73c2\u6735\u8389\u6811\u6807\u51c6\u64cd\u4f5c*1 \n{\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos) return it;\n\t--it;\n\tint tl=it->l;\n\tint tr=it->r;\n\tint tv=it->v;\n\ts.erase(it);\n\ts.insert(node(tl,pos-1,tv));\n\treturn s.insert(node(pos,tr,tv)).first; \n}\ninline void assign_val(int l,int r,int val)//\u73c2\u6735\u8389\u6811\u6807\u51c6\u64cd\u4f5c*2 \n{\n\tIT itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,val));\n}\ninline bool cmp(node2 p,node2 q)//\u6392\u5e8f \u6309\u7167 h \u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n{\n\treturn p.v<q.v;\n}\nint main()\n{\n\twhile(scanf(\"%d %d %d\",&rl,&rh,&rr)!=EOF)//\u8bfb\u5165 \n\t{\n\t\tn++;//\u4fdd\u5b58 \n\t\ta[n].l=rl;\n\t\ta[n].r=rr-1;//\u7ec6\u8282*1 \n\t\ta[n].v=rh;\n\t}\n\tsort(a+1,a+n+1,cmp);//\u6392\u5e8f \n\ts.insert(node(1,20010,0));//\u63d2\u5165\u6574\u4e2a\u533a\u95f4 \u65e2\u7136\u4e0d\u5927 \u90a3\u5c31\u63d2\u4e24\u500d\u7684 \n\tfor(int i=1;i<=n;i++)//\u4e00\u4e2a\u4e00\u4e2a\u63a8\u5e73 \n\t\tassign_val(a[i].l,a[i].r,a[i].v);\n\tfor(IT it=s.begin();it!=s.end();++it)//\u6682\u5b58\u4e00\u4e0b \n\t\tans.push_back(node2{it->l,it->r,it->v});\n//\tfor(int i=0;i<ans.size();i++)\n//\t\tprintf(\"%d %d %d\\n\",ans[i].l,ans[i].r,ans[i].v);\n\tif(ans[0].v!=0) printf(\"%d %d \",ans[0].l,ans[0].v);//\u7279\u5224\u5f00\u5934\u8f6e\u5ed3\u7ebf\u662f\u4e0d\u662f\u5df2\u7ecf\u6709\u5efa\u7b51\u4e86 \n\tfor(int i=1;i<ans.size();i++)\n\t\tif(ans[i].v!=ans[i-1].v)//\u4e0d\u7b49\u4e8e\u5c31\u7b49\u4e8e\u53d8\u5316\u4e86 \n\t\t{\n\t\t\tprintf(\"%d %d \",ans[i].l,ans[i].v);//\u8f93\u51fa\u5457  \n\t\t}\n\tputs(\"\"); \n\treturn 0;\n}\n\n\n\n```\n\u795d\u5927\u5bb6 $\\text{N\u65b9\u8fc7\u767e\u4e07 \u66b4\u529b\u78be\u6807\u7b97}$ ",
        "postTime": 1584267748,
        "uid": 219198,
        "name": "Minecraft\u4e07\u5c81",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u5bf9\u6a2a\u5750\u6807\u8fdb\u884c\u5efa\u6811\uff0c\u5e76\u4e14\u628a\u6bcf\u4e00\u680b\u5efa\u7b51\u770b\u4f5c\u662f\u5bf9**\u4e00\u6bb5\u533a\u95f4\u8fdb\u884c\u8d4b\u503c**\uff0c\n\u6240\u4ee5**ODT\uff0c\u73c2\u6735\u8389\u6811**\u767b\u573a\uff0c\u4e0d\u4f1a\u7684\u5148\u770b[ODT\u6a21\u677f](https://www.luogu.org/problem/CF896C)\n\u56e0\u4e3a\u662f\u5bf9\u533a\u95f4\u8fdb\u884c\u8d4b\u503c\uff0c\n\n\u5e76\u4e14\u6bcf\u6b21**\u8f93\u51fa\u6700\u9ad8\u7684\u9ad8\u5ea6**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8f93\u5165\u4e4b\u540e\u5148\u6309\u9ad8\u5ea6\u5bf9\u5efa\u7b51\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u8d4b\u503c\u7684\u65f6\u5019\u8003\u8651\u533a\u95f4\u6700\u5927\u503c\u95ee\u9898\u3002\u8d4b\u7684\u5c31\u76f4\u63a5\u662f\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u503c\u4e86\u3002\n\nAC\u4ee3\u7801\u5949\u4e0a\u3002\n\n\u5982\u679c\u5bf9\u4ee3\u7801\u6709\u7591\u95ee\u7684\u5728\u4e0b\u9762\u63d0\u51fa\u6216\u8005\u79c1\u804a\uff0c\u540e\u7eed\u8fd8\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u5bf9\u4ee3\u7801\u7684\u6ce8\u91ca\u3002\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<set>\n#include<queue>\n#include<vector>\nusing namespace std;\nstruct n\n{\n    int l;\n    int h;\n    int r;//\u8fdb\u884c\u50a8\u5b58\u5efa\u7b51\u7684\u4ee3\u7801\n}num[5005];\nstruct node\n{\n    int l;\n    int r;\n    int h;\n    bool operator<(const node &a)const{\n        return l<a.l;\n    }\n};\nset<node> tree;\nset<node>::iterator split(int pos){//ODT\u6838\u5fc3\u51fd\u6570\u3002\u4e0d\u4f1a\u7684\u89c1CF896C\u9898\u89e3\u3002\n    set<node>::iterator iter=tree.lower_bound((node){pos,0,0});\n    if (iter!=tree.end()&&iter->l==pos)\n    {\n        return iter;\n    }\n    iter--;\n    int ll=iter->l;\n    int rr=iter->r;\n    int pt=iter->h;\n    tree.erase(iter);\n    tree.insert((node){ll,pos-1,pt});\n    return tree.insert((node){pos,rr,pt}).first;\n}\nvoid add(int l,int r,int pt){\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    tree.erase(itl,itr);//\u662f\u7684\u5c31\u4e09\u884c\u3002\n    tree.insert((node){l,r,pt});\n    return;\n}\nint cmp(const void *a,const void *b){\n    return (*((n *)a)).h>(*(n *)b).h;//qsort\u5feb\u6392\u51fd\u6570\uff0c\u9700\u8981\u53cd\u7740\u5199\uff0c\u8ba9\u5efa\u7b51\u6309\u4ece\u5c0f\u5230\u5927\u6392\u3002\n}\nint main(void){\n    int pt=0,l,r,h,rmax=0;\n    while (scanf(\"%i%i%i\",&num[pt].l,&num[pt].h,&num[pt].r)!=EOF)\n    {\n        rmax=max(rmax,num[pt].r);//\u50a8\u5b58\u5efa\u7b51\n        num[pt].r--;//\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8981-1\u7684\u770b\u6837\u4f8b\u3002\n        pt++;\n    }\n    tree.insert((node){0,rmax,0});//\u5efa\u7b51\uff0c\u5c31\u4e00\u884c\n    qsort(num,pt,sizeof(n),cmp);\n    for (int i = 0; i < pt; i++)\n    {\n        add(num[i].l,num[i].r,num[i].h);\n    }//\u533a\u95f4\u8d4b\u503c\u3002\n    set<node>::iterator iter;\n    int now=0;\n    bool open=0;\n    for (iter = tree.begin(); iter != tree.end()&&iter->h==0; iter++)\n    {\n        now=iter->h;\n    }//\u8fc7\u6ee4\u524d\u5bfc0\n    for (iter; iter != tree.end(); iter++)\n    {\n        if (iter->h!=now)\n        {\n            if (open)\n            {\n                open=1;\n                printf(\" \");\n            }\n            printf(\"%i %i\",iter->l,iter->h);\n            open=1;\n        }\n        now=iter->h;//\u50a8\u5b58\u4e0a\u4e00\u4e2a\u7684\u5927\u5c0f\uff0c\u9632\u6b62\u51fa\u73b0\u8fde\u7eed\u533a\u95f4\u76f8\u540c\u9ad8\u5ea6\u5374\u8f93\u51fa\u8fd9\u79cd\u60c5\u51b5\u3002\n    }\n    return 0;\n}\n```\n",
        "postTime": 1574163924,
        "uid": 225285,
        "name": "Most_Goodlooking",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u7528STL\u505a\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f00\u4e24\u4e2avector\u8bb0\u5f55\u5f53\u524d\u70b9\u662f\u54ea\u51e0\u4e2a\u697c\u7684\u5de6\u8fb9\u70b9\uff0c\u54ea\u51e0\u4e2a\u697c\u7684\u53f3\u8fb9\u70b9\uff08\u5373\u5f53\u524d\u70b9\u8981\u653e\u5165\u90a3\u4e2a\u697c\uff0c\u8981\u5f39\u51fa\u90a3\u4e2a\u697c\u3002\uff09\u3002\u518d\u5f00\u4e00\u4e2amultiset\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u6700\u5927\u503c\u5c31\u884c\u4e86\u3002\n\n\u8f93\u5165\u65f6\u5728\u5de6\u7aef\u70b9\u7684add\u6570\u7ec4\u91cc\u653e\u5165h\uff0c\u5728\u53f3\u7aef\u70b9\u7684del\u6570\u7ec4\u91cc\u653e\u5165h\u3002\n\n\u7136\u540e\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u5c31\u884c\u4e86\u3002\n\n$\\color{white}\\text{\u8bb0\u4f4f\u5220\u9664multiset\u91cc\u7684\u5143\u7d20\u65f6\u8981\u5220\u9664\u8fed\u4ee3\u5668\u800c\u4e0d\u80fd\u5220\u6389\u6570\u5b57\uff0c\u4e0d\u7136\u4f1a\u5220\u6389\u6240\u6709\u5f53\u524d\u6570\u5b57\u3002}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int> add[10000],del[10000];\nmultiset<int>tr;\nint a[10000],zuo=1e9,you=-1e9;\nint l,h,r;\nint main(){\n\twhile(~scanf(\"%d%d%d\",&l,&h,&r)){\n\t\tyou=max(you,r);\n\t\tzuo=min(zuo,l);\n\t\tadd[l].push_back(h);\n\t\tdel[r].push_back(h);\n\t}\n\ttr.insert(0);\n\tfor(int i=zuo;i<=you;++i){\n\t\tvector<int>::iterator it;\n\t\tmultiset<int>::iterator pos;\n\t\tfor(it=add[i].begin();it!=add[i].end();++it){\n\t\t\ttr.insert(*it);\n\t\t}\n\t\tfor(it=del[i].begin();it!=del[i].end();++it){\n\t\t\tpos=tr.find(*it);\n\t\t\ttr.erase(pos);\n\t\t}\n\t\tpos=tr.end();\n\t\tpos--;\n\t\ta[i]=*pos;\n//\t\tcout<<*pos<<endl;\n\t}\n\tint l=0,cur=0;\n\tfor(int i=zuo;i<=you;++i){\n\t\tif(l==a[i])continue;\n\t\telse{\n\t\t\tif(!cur)printf(\"%d \",i);\n\t\t\telse printf(\"%d \",l);\n\t\t\tcur^=1;\n\t\t\tif(!cur)printf(\"%d \",i);\n\t\t\telse printf(\"%d \",a[i]);\n\t\t\tcur^=1;l=a[i];\n\t\t}\n\t}\n}\n```",
        "postTime": 1542624633,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "~~\u56e0\u4e3a\u4e0d\u60f3\u6253\u626b\u63cf\u7ebf\u6240\u4ee5\u2026\u2026~~\n\n\u56e0\u4e3a\u5bf9\u4e8e\u6574\u4e2a\u8f6e\u5ed3\u7ebf\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053\u5404\u4e2a\u4f4d\u7f6e\u6700\u9ad8\u7684\u5efa\u7b51\u7684\u9ad8\u5ea6\u5373\u53ef\uff0c\u6240\u4ee5\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\n\n\u9996\u5148\u7b2c\u4e00\u611f\u89c9\u80af\u5b9a\u662f\u7ef4\u62a4\u4e0b\u56fe\u4e2d\u6bcf\u4e2a\u7ea2\u70b9\u4f4d\u7f6e\u4e0a\u6700\u9ad8\u7684\u5efa\u7b51\u7684\u9ad8\u5ea6\u4fe1\u606f\uff0c\u4ece\u800c\u63cf\u8ff0\u6574\u4e2a\u8f6e\u5ed3\u7ebf    \n![](https://cdn.luogu.com.cn/upload/image_hosting/sc8rc1vk.png)\n\n~~\u7136\u800c\u5f88\u4e0d\u5e78\u8fd9\u6837\u5e76\u4e0d\u884c~~\n\n\u4e8e\u662f\u5c06\u7ef4\u62a4\u5bf9\u8c61\u4ece\u6bcf\u4e2a\u7ea2\u70b9\u6362\u6210\u4e0b\u56fe\u4e2d\u6bcf\u6bb5\u7eff\u8272\u7ebf\u6bb5\u7684\u4fe1\u606f\uff0c\u5f53\u67d0\u4e2a\u7ea2\u70b9\u5de6\u53f3\u4e24\u4fa7\u7ebf\u6bb5\u4fe1\u606f\u4e0d\u540c\u65f6\u610f\u5473\u7740\u8f6e\u5ed3\u7ebf\u5728\u6b64\u51fa\u73b0\u6298\u70b9\n![](https://cdn.luogu.com.cn/upload/image_hosting/yzk9eiop.png)\n\n\u6ce8\u610f\u5982\u679c\u662f\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u8986\u76d6\u9700\u8981\u63d0\u524d\u6392\u5e8f\uff0c\u6309\u5efa\u7b51\u9ad8\u5ea6\u4ece\u77ee\u5230\u9ad8\u8fdb\u884c\u4fee\u6539\n\n```\n#include<bits/stdc++.h>\n#define ls(w) w<<1\n#define rs(w) (w<<1)^1\nusing namespace std;\nconst int n=10000;\nstruct jgt{\n\tint l,r,x;\n};\njgt a[5005],tree[(n<<3)+5];\nint i,h[(n<<1)+5];\nbool cmp(jgt x,jgt y){return x.x<=y.x;}\nvoid csh(int w,int l,int r)\n{\n\ttree[w].l=l,tree[w].r=r;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tcsh(ls(w),l,mid),csh(rs(w),mid+1,r);\n}\nvoid cd(int w){if(tree[w].x)tree[ls(w)].x=tree[rs(w)].x=tree[w].x,tree[w].x=0;}\nvoid xg(int w,int l,int r,int x)\n{\n\tif(l<=tree[w].l&&tree[w].r<=r){tree[w].x=x;return;}\n\tcd(w);\n\tint mid=(tree[w].l+tree[w].r)>>1;\n\tif(l<=mid)xg(ls(w),l,r,x);\n\tif(mid<r)xg(rs(w),l,r,x);\n}\nvoid bl(int w)\n{\n\tif(tree[w].l==tree[w].r){h[tree[w].l]=tree[w].x;return;}\n\tcd(w),bl(ls(w)),bl(rs(w));\n}\nint main()\n{\n\twhile(scanf(\"%d%d%d\",&a[i].l,&a[i].x,&a[i].r)==3)++i;\n\tsort(a,a+i,cmp);\n\tcsh(1,1,n<<1);\n\tfor(int j=0;j<i;j++)xg(1,a[j].l<<1,(a[j].r<<1)-1,a[j].x);\n\tbl(1);\n\tfor(int j=1;j<=n;j++)if(h[(j<<1)-1]!=h[j<<1])printf(\"%d %d \",j,h[j<<1]);\n}\n```\n",
        "postTime": 1572676758,
        "uid": 104581,
        "name": "kkk\u7684\u5c0f\u8214\u72d7",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u533a\u95f4\u6700\u5927\u503c\uff08val\uff09\u548c\u8be5\u533a\u95f4\u662f\u5426\u5e73\u5766\uff08isbroke\uff09\uff0c\u6bcf\u6b21\u7528\u697c\u9ad8\u66f4\u65b0\u533a\u95f4\u5185\u7684\u4e24\u4e2a\u503c\uff0c\u6709\u591a\u79cd\u60c5\u51b5\uff1a\n\n 1 isbroke=0\u4e14val > now_val(\u5c31\u662fv)\n\u76f4\u63a5return\n\t\n         1.5 val < v  val=tag=v,return\n\n 2 isbroke=1\u4e14val < v\nisbroke=0 val=tag=v\n\n 3 isbroke=1\u4e14val > v\n\u4e0d\u66f4\u6539val\u548cisbroke,\u4f46\u6253\u4e0atag=v\n\n\n------------\n\n \u5f53\u524d\u533a\u95f4\u9012\u5f52\u5b8c\u6210\u540e\u5982\u679c(tree[i*2].val != tree[i*2+1].val || tree[i*2].isbroke || tree[i*2+1].isbroke)==1\uff0c\u90a3\u4e48tree[i].isbroke = 1 \u5426\u5219 =0\n\n------------\n\n\n------------\n \u67e5\u8be2\u65f6\u82e5\u9047\u5230\u76ee\u6807\u70b9\u6240\u5728\u533a\u95f4\u7684isbroke == 0\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56deval\uff0c\u5426\u5219pushdown\u540e\u7ee7\u7eed\u3002pushdown\u65f6\u5728\u81ea\u5df1\u7684tag\u548c\u513f\u5b50\u7684tag\u4e2d\u9009\u6700\u5927\u503c\u8d4b\u7ed9\u513f\u5b50\uff0c\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\u5177\u4f53\u5728\u4ee3\u7801\u4e2d\u3002\n\n```cpp\n#include<iostream>\nusing namespace std;\nstruct node\n{\n\tint val,tag;\n\tbool isbroke;\n} tree[100001];\nint n;\nvoid pushdown(int i)\n{\n\tif(tree[i].tag&&tree[i*2].val<=tree[i].tag)\n\t{\n\t\ttree[i*2].val=tree[i*2].tag=tree[i].tag;\n\t\ttree[i*2].isbroke=0;\n\t}\n\telse if(tree[i].tag)\n\t{\n\t\tif(tree[i*2].isbroke)\n\t\t{\n\t\t\ttree[i*2].tag=max(tree[i*2].tag,tree[i].tag);\n\t\t}\n\t}\n\tif(tree[i].tag&&tree[i*2+1].val<=tree[i].tag)\n\t{\n\t\ttree[i*2+1].val=tree[i*2+1].tag=tree[i].tag;\n\t\ttree[i*2+1].isbroke=0;\n\t}\n\telse if(tree[i].tag)\n\t{\n\t\tif(tree[i*2+1].isbroke)\n\t\t{\n\t\t\ttree[i*2+1].tag=max(tree[i*2+1].tag,tree[i].tag);\n\t\t}\n\t}\n\ttree[i].tag=0;\n\treturn;\n}\nvoid change(int i,int nl,int nr,int tl,int tr,int v)\n{\n\tint mid=(nl+nr)/2;\n\tif(nr<tl||nl>tr)\n\t{\n\t\treturn;\n\t}\n\telse if(tl<=nl&&nr<=tr)\n\t{\n\t\tif(tree[i].isbroke==0)\n\t\t{\n\t\t\tif(tree[i].val>=v)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttree[i].val=v;\n\t\t\t\ttree[i].tag=v;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(tree[i].val<v)\n\t\t\t{\n\t\t\t\ttree[i].val=v;\n\t\t\t\ttree[i].tag=v;\n\t\t\t\ttree[i].isbroke=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttree[i].tag=v;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tpushdown(i);\n\t\tchange(i*2,nl,mid,tl,tr,v);\n\t\tchange(i*2+1,mid+1,nr,tl,tr,v);\n\t\tif(tree[i*2].val!=tree[i*2+1].val||tree[i*2].isbroke==1||tree[i*2+1].isbroke==1)\n\t\t{\n\t\t\ttree[i].isbroke=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t    tree[i].isbroke=0;\n\t\t}\n\t\ttree[i].val=max(tree[i*2].val,tree[i*2+1].val);\n\t}\n\n}\nint query(int i,int nl,int nr,int target)\n{\n\tint mid=(nl+nr)/2;\n\tif(target<nl||nr<target)\n\t{\n\t\treturn 0;\n\t}\n\telse if(nl<=target&&target<=nr)\n\t{\n\t\tif(tree[i].isbroke==0)\n\t\t{\n\t\t\treturn tree[i].val;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpushdown(i);\n\t\t\treturn max(query(i*2,nl,mid,target),query(i*2+1,mid+1,nr,target));\n\t\t}\n\t}\n}\nint main()\n{\n\tint t1,t2,t3;\n\twhile(cin>>t1>>t3>>t2)\n\t{\n\t\tchange(1,1,10001,t1,t2-1,t3);\n\t}\n\tint last=0,now;\n\tint cnt=0;\n\tfor(int i=1; i<=10001; i++)\n\t{\n\t\tnow=query(1,1,10001,i);\n\t\tif(now==0&&last==0)\n\t\t{\n\t\t\t1;\n\t\t}\n\t\telse if(now!=last)\n\t\t{\n\t\t\tcnt++;\n\t\t\tcout<<(cnt%2==0?last:i)<<\" \";\n\t\t\tcnt++;\n\t\t\tcout<<(cnt%2==0?now:i)<<\" \";\n\n\t\t}\n\t\tlast=now;\n\t}\n}\n```\n",
        "postTime": 1572441781,
        "uid": 54672,
        "name": "xiaoDiPa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u5e95\u76f8\u540c\u7684\u626b\u63cf\u7ebf\u9898\u76ee\uff0c\u5927\u77e9\u5f62\u8986\u76d6\u5c0f\u77e9\u5f62\u548c\u4e00\u6bb5\u503c\u66f4\u9ad8\u7684\u533a\u95f4\u8986\u76d6\u4e00\u6bb5\u503c\u5c0f\u7684\u533a\u95f4\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u7528\u73c2\u6735\u8389\u6811\u5c31\u80fd\u5f88\u597d\u5730\u7ef4\u62a4\u4e86\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T>\ninline bool read(T &ret)\n{\n    char c;\n    int sgn;\n    if (c = getchar(), c == EOF)\n    {\n        return 0;\n    }\n    while (c != '-' && (c < '0' || c > '9'))\n    {\n        c = getchar();\n    }\n    sgn = (c == '-') ? -1 : 1;\n    ret = (c == '-') ? 0 : (c - '0');\n    while (c = getchar(), c >= '0' && c <= '9')\n    {\n        ret = ret * 10 + (c - '0');\n    }\n    ret *= sgn;\n    return 1;\n}\n\ntemplate <class T>\ninline void write(T x)\n{\n    if (x > 9)\n    {\n        write(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\n\nstruct node\n{\n    int l,r,v;\n    node(){}\n    node(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n    inline bool operator <(const node &o) const\n    {\n        return l<o.l;\n    }\n};\n\nstruct house\n{\n    int l,r,h;\n    inline bool operator <(const house &o) const\n    {\n        return h<o.h;\n    }\n};\n\nset<node> s;\n\nint n;\nhouse a[100010];\nvector<pair<int,int> >ans;\n\ninline void merge(int l)\n{\n    set<node>::iterator it1,it2,it3;\n    it2=s.lower_bound(l);\n    if(it2==s.begin())\n        return;\n    it1=it2,it3=it2;\n    --it1,++it3;\n    bool pd3=(it3!=s.end());\n    if(pd3&&it1->v==it2->v&&it2->v==it3->v&&it1->v==it3->v)\n    {\n        int l=it1->l,r=it3->r,v=it2->v;\n        s.erase(it1,++it3);\n        s.insert(node(l,r,v));\n    }\n    else if(it1->v==it2->v)\n    {\n        int l=it1->l,r=it2->r,v=it2->v;\n        s.erase(it1,++it2);\n        s.insert(node(l,r,v));\n    }\n    else if(pd3&&it2->v==it3->v)\n    {\n        int l=it2->l,r=it3->r,v=it2->v;\n        s.erase(it2,++it3);\n        s.insert(node(l,r,v));\n    }\n}\n\ninline set<node>::iterator split(int pos)\n{\n    set<node>::iterator it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos) return it;\n    --it;\n    int L=it->l,R=it->r,V=it->v;\n    s.erase(it);\n    s.insert(node(L,pos-1,V));\n    return s.insert(node(pos,R,V)).first;\n}\n\ninline void assignval(int l,int r,int v)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,v));\n}\n\ninline void query()\n{\n    set<node>::iterator it=s.begin();\n    while(it!=s.end())\n    {\n        for(;it!=s.end();++it)\n        {\n            if(it->v!=0)\n                break;\n        }\n        if(it==s.end())\n            break;\n//        ans.push_back(make_pair((it->l)/2,0));\n        ans.push_back(make_pair((it->l)/2,it->v));\n        for(;it!=s.end();++it)\n        {\n            if(it->v==0)\n                break;\n            int ccv1=it->v,ccpos1=it->r;\n            ++it;\n            int ccv2=it->v,ccpos2=it->l;\n            --it;\n            if(ccv2==ccv1)continue;\n            else if(ccv2>ccv1)\n            {\n//                ans.push_back(make_pair(ccpos2/2,ccv1));\n                ans.push_back(make_pair(ccpos2/2,ccv2));\n            }\n            else\n            {\n//                ans.push_back(make_pair(ccpos1/2,ccv1));\n                ans.push_back(make_pair(ccpos1/2,ccv2));\n            }\n        }\n    }\n}\n\nint main()\n{\n    n=0;\n    s.insert(node(0,20010));\n    int sr;\n    while(scanf(\"%d\",&sr)!=EOF)\n    {\n        n++;\n        a[n].l=sr,read(a[n].h),read(a[n].r);\n        a[n].l*=2;\n        a[n].r*=2;\n    }\n    sort(a+1,a+n+1);\n    for(register int i=1;i<=n;++i)\n    {\n        assignval(a[i].l,a[i].r,a[i].h);\n        merge(a[i].l);\n        merge(a[i].r);\n    }\n    query();\n    int sz=ans.size();\n    for(register int i=0;i<sz;++i)\n    {\n        printf(\"%d %d \",ans[i].first,ans[i].second);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1570195537,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "## \u4e00\u53e5\u8bdd\u601d\u8def\nsort + priority_queue\n\n## \u5177\u4f53\u601d\u8def\n\n### step#1 : \u8bfb\u5165\n\u628a\u4e00\u4e2a building \u62c6\u6210\u4e24\u6761\u5782\u76f4\u4e8e\u5730\u5e73\u7ebf\u7684 line\uff0c\u9ad8\u5ea6\u5747\u4e3a $h_i$\uff0c\u6a2a\u5750\u6807\u5206\u522b\u4e3a $l_i$ \u4e0e $r_i$\uff08\u53e6\u5916\u7ed9\u6bcf\u6761 line \u589e\u52a0\u4e00\u4e2a\u53c2\u6570 type \u8868\u793a\u8be5 line \u662f\u5728\u4e00\u4e2a building \u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff09\u3002\n\n### step#2 : sort\n\u6309\u6a2a\u5750\u6807\u5bf9\u8fd9 $2n$ \u6761 line \u8fdb\u884c sort\n\n### step#3 : priority_queue (\u7b54\u6848\u5904\u7406)\n\u4e00\u6761\u6761\u626b\u8fc7\u53bb\uff0c\u5206\u4fe9\u79cd\u60c5\u51b5\uff1a\n\n1. \u8fd9\u6761 line \u662f\u4e00\u4e2a building \u7684\u5de6\u8fb9\uff08\u5f00\u59cb\uff09\uff1apush \u8fdb priority_queue\uff08priority_queue \u6743\u503c\u6309\u9ad8\u5ea6\uff0c\u5927\u6839\u5806\uff09  \n2. \u8fd9\u6761 line \u662f\u4e00\u4e2a building \u7684\u53f3\u8fb9\uff08\u7ed3\u675f\uff09\uff1a\u6807\u8bb0\u8be5 building \u4e3a ended\uff0c\u7136\u540e pop \u6389 priority_queue \u9876\u7aef\u7684\u6240\u6709\u8fc7\u65f6\u7684 line\n\n## \u8fd9\u79cd\u505a\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\u4e24\u4e2a building \u53ef\u80fd\u76f8\u90bb\u800c\u4e0d\u91cd\u5408\uff0c\u9700\u8981\u5904\u7406\uff0c\u5426\u5219\u53ef\u80fd\u4f1a $\\text{WA}\\ \\ 80pts$  \n\u5904\u7406\u65b9\u6cd5\uff1a\u5728\u4e00\u5f00\u59cb sort \u65f6\u6bd4\u8f83\u51fd\u6570\u91cc\u82e5\u4e24\u6761 line \u7684\u6a2a\u5750\u6807\u76f8\u540c\uff0c\u5219\u6bd4\u8f83\u5176 type\uff0c\u4f4d\u4e8e\u4e00\u4e2a building \u5de6\u8fb9\u7684 line \u201c\u5c0f\u201d\n\n\u5927\u6982\u601d\u8def\u662f\u8fd9\u6837\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n## Code\n\n```cpp\n/*************************************\n * problem:      P1904 \u5929\u9645\u7ebf.\n * user ID:      63720.\n * user name:    Jomoo.\n * time:         2019-08-04.\n * language:     C++.\n * upload place: Luogu.\n*************************************/ \n\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename Int>\ninline Int read()       \n{\n    Int flag = 1;\n    char c = getchar();\n    while ((!isdigit(c)) && c != '-') c = getchar();\n    if (c == '-') flag = -1, c = getchar();\n    Int init = c & 15;\n    while (isdigit(c = getchar())) init = (init << 3) + (init << 1) + (c & 15);\n\treturn init * flag;\n}\n\ntemplate <typename Int>\ninline void write(Int x)\n{\n    if (x < 0) putchar('-'), x = ~x + 1;\n    if (x > 9) write(x / 10);\n    putchar((x % 10) | 48);\n}  \n\ntemplate <typename Int>\ninline void write(Int x, char nextch)\n{\n    write(x);\n    putchar(nextch);\n}\n\nint n = 0;\n#define NEW_BUILDING 1\n#define END_BUILDING 0\nstruct Line {\n    int buildingId;\n    bool type;\n    int pos, high;\n    bool operator < (const Line &other) const\n    {\n        return pos != other.pos ? pos < other.pos : type > other.type;\n    }\n} b[100000 + 7];\n\nstruct PQ_Node {\n    int buildingId;\n    int pos, high;\n    PQ_Node(const Line other) {\n        buildingId = other.buildingId;\n        pos = other.pos;\n        high = other.high;\n    }\n    bool operator < (const PQ_Node &other) const\n    {\n        return high < other.high;\n    }\n};\n\nbool readln()\n{\n    static int l, h, r;\n    if (scanf(\"%d%d%d\", &l, &h, &r) == EOF) return false;\n    b[n] = (Line){n >> 1, NEW_BUILDING, l, h};\n    n++;\n    b[n] = (Line){n >> 1, END_BUILDING, r, h};\n    n++;\n    return true;\n}\n\nbool ended[50000 + 7] = {false};\n\npriority_queue<PQ_Node> pq;\n\nint main()\n{\n    while (readln());\n    sort(b, b + n);\n    int y = 0;\n    for (int i = 0; i < n; i++) {\n        if (b[i].type == NEW_BUILDING) {\n            pq.push(PQ_Node(b[i]));\n            if (pq.top().high != y) {\n                y = pq.top().high;\n                write(b[i].pos, 32);\n                write(y, 32);\n            }\n        } else {\n            ended[b[i].buildingId] = true;\n            while (!pq.empty() && ended[pq.top().buildingId]) pq.pop();\n            if (pq.empty() || pq.top().high != y) {\n                y = pq.empty() ? 0 : pq.top().high;\n                write(b[i].pos, 32);\n                write(y, 32);\n            }\n        }\n\n    }\n    return 0;\n}\n```",
        "postTime": 1564910966,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "\u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u6211\u4eec\u77e5\u9053Genoa\u6240\u6709\u7684\u5efa\u7b51\u5171\u4eab\u4e00\u4e2a\u5730\u9762\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u6c34\u5e73\u7684\u3002\u6240\u6709\u7684\u5efa\u7b51\u7528\u4e00\u4e2a\u4e09\u5143\u7ec4\uff08Li,Hi,Ri\uff09\u5176\u4e2dLi\u548cRi\u5206\u522b\u662f\u5efa\u7b51\u7684\u5de6\u5750\u6807\u548c\u53f3\u5750\u6807\uff0cHi\u5c31\u662f\u5efa\u7b51\u7684\u9ad8\u5ea6\u3002\u4f60\u88ab\u8981\u6c42\u7ed9\u51fa\u57ce\u5e02\u7684\u8f6e\u5ed3\u7ebf\u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u6765\u63cf\u8ff0\uff1a\u5bf9\u4e8e\u6240\u6709\u8f6e\u5ed3\u7ebf\u4e0a\u7684\u6298\u70b9\uff0c\u6309\u987a\u5e8f\u6392\u597d\uff0c\u7b2c\u5947\u6570\u4e2a\u70b9\u8f93\u51fax\u5750\u6807\uff0c\u7b2c\u5076\u6570\u4e2a\u70b9\u8f93\u51fay\u5750\u6807\n\n\u3010\u7b97\u6cd5\u8ba8\u8bba\u3011\n\n\u8fd0\u7528\u7ebf\u6bb5\u6811\u6210\u6bb5\u66f4\u65b0+\u79bb\u6563\u5316\u7684\u7b97\u6cd5\u3002\u5148\u5c06\u6bcf\u4e00\u680b\u697c\u623f\u6309\u7167\u4ece\u4f4e\u5230\u9ad8\u7684\u987a\u5e8f\u6392\u5e8f\uff08\u56e0\u4e3a\u4f4e\u7684\u697c\u623f\u4f1a\u88ab\u9ad8\u7684\u6321\u4f4f\uff09\u3002\u63a5\u4e0b\u6765\u8fdb\u884c\u79bb\u6563\u5316\uff08\u53ea\u9700L\u548cR\uff09\u3002\u7136\u540e\u628a\u6bcf\u4e00\u6bb5L\uff0cR\u653e\u5165\u7ebf\u6bb5\u6811\uff08\u7ebf\u6bb5\u6811\u7ef4\u62a4[I,j]\u533a\u95f4\u697c\u623f\u7684\u9ad8\u5ea6\uff09\u3002\u6700\u540e\uff0c\u641c\u7d22\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u8282\u70b9i\u4e0a\u7684\u9ad8\u5ea6\u5373\u4e3ay\u5750\u6807\uff0cx\u5750\u6807\u4e3ai\u79bb\u6563\u5316\u524d\u7684\u503c\uff0c\u5e76\u5224\u65ad\u540e\u8f93\u51fa\u3002\n\n\u5f97\u5206\uff1a100\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(2nlogn)\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(22n)\n\n\u3010C++\u4ee3\u7801\u3011\n\n```cpp\n\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\n#define maxn 100005\n#define lson l,mid,rt<<1\n#define rson mid+1,r,rt<<1|1\nusing namespace std;\nint n,col[maxn<<3],num[maxn<<3],le[maxn<<1],len,m=1,next,last,x[maxn<<1],y[maxn<<1],sum;\nstruct node{int h,i,j;}a[maxn];\nbool cmp(node p1,node p2){return p1.h<p2.h;}\nvoid pushdown(int rt)\n{\n    col[rt<<1]=col[rt<<1|1]=1;\n    num[rt<<1]=num[rt<<1|1]=num[rt];\n    col[rt]=0;\n}\nint ef(int l1,int r1,int mb)\n{\n    int l=l1,r=r1;\n    while (l<=r)\n    {\n        int mid=(l+r)>>1;\n        if (le[mid]>=mb)r=mid-1;\n        else l=mid+1;\n    }\n    return l;\n}\nvoid update(int l,int r,int rt,int L,int R,int H)\n{\n    if (L<=l && r<=R){col[rt]=1;num[rt]=H;return;}\n    int mid=(l+r)>>1;\n    if (col[rt])pushdown(rt);\n    if (L<=mid)update(lson,L,R,H);\n    if (R>mid)update(rson,L,R,H);\n}\nint query(int l,int r,int rt,int u)\n{\n    if (l==r)return num[rt];\n    int mid=(l+r)>>1;\n    if (col[rt])pushdown(rt);\n    if (u<=mid)query(lson,u);\n    else query(rson,u);\n}\nint main()\n{\n    while (~scanf(\"%d%d%d\",&a[m].i,&a[m].h,&a[m].j))\n    {\n        le[++len]=a[m].i;\n        le[++len]=a[m].j;\n        m++;\n    }\n    m--;\n    sort(le+1,le+len+1);\n    sort(a+1,a+m+1,cmp);\n    n=1;for (int b=1;b<len;++b)if (le[b]!=le[b+1])le[++n]=le[b+1];\n    for (int b=1;b<=m;++b)\n    {\n        a[b].i=ef(1,n,a[b].i);\n        a[b].j=ef(1,n,a[b].j);\n        update(1,n,1,a[b].i,a[b].j-1,a[b].h);\n    }\n    for (int b=1;b<=n;++b)\n    {\n        x[b]=le[b];\n        y[b]=query(1,n,1,b);\n        if (y[b]!=y[b-1])sum++;\n    }\n    for (int b=1;b<=n;++b)\n    {\n        if (y[b]!=y[b-1])\n        {\n            printf (\"%d \",x[b]);\n            printf (\"%d \",y[b]);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1438870827,
        "uid": 171,
        "name": "Timothy",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    },
    {
        "content": "## ~~STL\u5927\u6cd5\u597d~~##\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5ea7\u5efa\u7b51\u7269\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5de6\u53f3\u8fb9\u754c\u5b58\u5165\u4e00\u4e2a\u8868\u793a\u547d\u4ee4\u7684\u961f\u5217\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u4ece0\u5f00\u59cb\u904d\u5386\u5750\u6807\uff0c\u5982\u679c\u9047\u5230\u5de6\u8fb9\u754c\u5219\u5c06\u8fd9\u6761\u5de6\u8fb9\u754c\u5bf9\u5e94\u7684\u90a3\u4e2a\u77e9\u5f62\u7684\u9ad8\u52a0\u5165\u5e73\u8861\u6811\uff0c\u9047\u5230\u53f3\u8fb9\u754c\u5219\u4ece\u6811\u4e2d\u5220\u9664\u8fd9\u6761\u53f3\u8fb9\u754c\u5bf9\u5e94\u7684\u90a3\u4e2a\u77e9\u5f62\u7684\u9ad8\uff0c\u6bcf\u6b21\u53d6\u5e73\u8861\u6811\u4e2d\u6700\u5927\u503c\u8f93\u51fa\u5373\u53ef\n```cpp\n#include <cstdio>\n#include <set>\n#include <queue>\nconst int maxn = 5005;\nconst int maxp = 10005;\nusing namespace std;\n\nstruct obj{\n    int l, h, r;\n}rect[maxn];//\u5b9a\u4e49\u77e9\u5f62\nint n = 0;\nqueue<int> inc[maxp], out[maxp];\n//inc[i]\u5b58\u50a8\u4e86\u4f4d\u4e8ex=i\u8fd9\u6761\u76f4\u7ebf\u4e0a\u7684\u5de6\u8fb9\u754c\u5bf9\u5e94\u7684\u77e9\u5f62\u7f16\u53f7\n//out[i]\u540c\u7406\n\nstruct pir{\n    int key, h;\n};\npir make_pir(int _k, int _h){\n    pir p;\n    p.key = _k, p.h = _h;\n    return p;\n}\nbool operator < (pir a, pir b){\n    return a.h > b.h;//\u5b9a\u4e49\u5c0f\u4e8e\u53f7\uff0c\u4f7f\u6bcf\u6b21\u53d6\u51fa\u7684\u9ad8\u5ea6\u4e3a\u5f53\u524d\u6811\u4e2d\u6700\u5927\u9ad8\u5ea6\n}\nmultiset<pir> task;\n\nint main(){\n    while(~scanf(\"%d %d %d\", &rect[n].l, &rect[n].h, &rect[n].r))\n        n++;//\u8f93\u5165\n    for(int i = 0; i < n; i++){\n        inc[rect[i].l].push(i);\n        out[rect[i].r].push(i);\n    }\n    int now, last = 0;\n    for(int i = 0; i < maxp; i++){\n        while(!inc[i].empty()){\n            int fnt = inc[i].front(); inc[i].pop();\n            task.insert(make_pir(fnt, rect[fnt].h));\n        }\n        while(!out[i].empty()){\n            int fnt = out[i].front(); out[i].pop();\n            task.erase(make_pir(fnt, rect[fnt].h));\n        }\n        multiset<pir>::iterator it = task.begin();\n        now = it -> h;\n        if(last != now){//\u82e5\u6700\u9ad8\u5ea6\u53d1\u751f\u6539\u53d8\uff0c\u5219\u8f93\u51fa\n            printf(\"%d %d \", i, now);\n        }\n        last = now;\n    }\n\treturn 0;\n}\n\n```",
        "postTime": 1541655167,
        "uid": 74398,
        "name": "Mufanc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1904 \u3010\u5929\u9645\u7ebf\u3011"
    }
]