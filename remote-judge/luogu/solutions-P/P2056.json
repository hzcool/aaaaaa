[
    {
        "content": "\u5199\u4e2a\u62ec\u53f7\u5e8f\u5217\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148dfs\u6574\u68f5\u6811\u4e00\u904d\uff0c\u8fdb\u5165\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u52a0\u4e0a\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u7136\u540e\u662f\u8282\u70b9\u7f16\u53f7\uff0c\u5f53\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u6811\u904d\u5386\u5b8c\u540e\u518d\u6dfb\u4e0a\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u8fd9\u5c31\u662f\u62ec\u53f7\u5e8f\u5217\u3002\uff08\u5176\u5b9e\u5c31\u662fdfs\u5e8f\u52a0\u4e0a\u4e86\u62ec\u53f7\u800c\u5df2\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/20390.png)\n\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u8fd9\u68f5\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u662f(1(2(3))(4(5)(6)(7(8))))\n\n\u6211\u4eec\u8981\u6c423\u52308\u7684\u8ddd\u79bb\uff0c\u622a\u53d6\u4e24\u70b9\u95f4\u7684\u62ec\u53f7\u5e8f\u5217\u4e3a\n\n3))(4(5)(6)(7(8\n\n\u628a\u7f16\u53f7\u548c\u5339\u914d\u7684\u62ec\u53f7\u5220\u6389\n\n))(((\n\n\u5269\u4e0b\u4e865\u4e2a\u5de6\u53f3\u62ec\u53f7\uff0c\u800c\u8fd9\u5c31\u662f3\u52308\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u5c31\u662f\u62ec\u53f7\u5e8f\u5217\u7684\u6027\u8d28\u3002\n\n\u600e\u4e48\u8bc1\u660e\uff1f\u8111\u8865\u4e00\u4e0b\uff0c\u5230\u8fbei\u70b9\u65f6\n\n1)\u6dfb\u5b8c\u4e86\u5de6\u53f3\u62ec\u53f7\n\n\u90a3\u4e2a\u70b9\u662fi\u7684\u7956\u5148\u4eec\u7684\u5b69\u5b50\u3002\uff08\u4e0d\u5728i\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff09\n\n2\uff09\u6dfb\u4e86\u5de6\u62ec\u53f7\u6ca1\u586b\u53f3\u62ec\u53f7\n\n\u90a3\u4e2a\u70b9\u662fi\u7684\u7956\u5148\u3002\uff08\u5728i\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff09\n\n3\uff09\u6ca1\u6dfb\u5de6\u62ec\u53f7\n\n\u90a3\u4e2a\u70b9\u662fi\u7684\u7956\u5148\u4eec\u7684\u5b69\u5b50\u6216\u8005i\u7684\u5b69\u5b50\uff08\u4e0d\u5728i\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff09\n\n\u56e0\u6b64\uff0c\u4eces\u5230t\uff0c\u5220\u53bb\u7684\u5339\u914d\u62ec\u53f7\u4eec\u5bf9\u4e8es\u6765\u8bf4\u662f\u60c5\u51b53\uff0c\u5bf9\u4e8et\u6765\u8bf4\u662f\u60c5\u51b51\uff0c\u5f88\u663e\u7136\u8fd9\u4e2a\u70b9\u4e0d\u5728s\u5230t\u7684\u8def\u5f84\u4e0a\u3002\u5269\u4e0b\u7684\u53f3\u62ec\u53f7\uff0c\u5bf9\u4e8es\u6765\u8bf4\u662f\u60c5\u51b52\uff0c\u5bf9\u4e8et\u6765\u8bf4\u662f\u60c5\u51b51\uff0c\u56e0\u6b64\u8868\u793a\u4eces\u5230\u8fbe\u3010t\u5230\u6839\u7684\u8fd9\u6761\u94fe\u3011\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u3002\u5269\u4e0b\u7684\u5de6\u62ec\u53f7\uff0c\u5bf9\u4e8es\u6765\u8bf4\u662f\u60c5\u51b53\uff0c\u5bf9\u4e8et\u6765\u8bf4\u662f\u60c5\u51b52\uff0c\u56e0\u6b64\u8868\u793a\u4ecet\u5230\u8fbe\u3010s\u548ct\u7684lca\uff08\u4e0d\u5305\u62eclca\uff09\u3011\u7684\u7ecf\u8fc7\u70b9\u6570\u3002\n\n\u7efc\u4e0a\u6211\u4eec\u8bc1\u660e\u4e86\u5220\u6389\u4e24\u70b9\u95f4\u6240\u6709\u5339\u914d\u62ec\u53f7\u5269\u4e0b\u7684\u5de6\u53f3\u62ec\u53f7\u6570\u4e3a\u8ddd\u79bb\u3002\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u628a\u6574\u68f5\u6811\u538b\u6210\u4e86\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\u4e86\uff0c\u800c\u6211\u4eec\u8981\u6c42\u7684\u662f\u4e24\u4e2a\u9ed1\u70b9\u95f4\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u6211\u4eec\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6c42\u89e3\u3002\n\n\u6beb\u65e0\u7591\u95ee\u8981\u8bb0\u5f55\u6bcf\u6bb5\u533a\u95f4\u5220\u6389\u5339\u914d\u62ec\u53f7\u540e\u5269\u4e0b\u7684\u5de6\u53f3\u62ec\u53f7\u6570\uff0c\u6211\u4eec\u8bb0\u53f3\u62ec\u53f7\u6570\u4e3aa\uff0c\u5de6\u62ec\u53f7\u6570\u4e3ab\u3002\n\n\u3010\u6ce8\u610f\u6211\u63a5\u4e0b\u6765\u8bf4\u7684\u6240\u6709\u5de6\u53f3\u533a\u95f4\u90fd\u4e0d\u9650\u4e8e\u7ebf\u6bb5\u6811\u4e2d\u7684\u5de6\u53f3\u533a\u95f4\uff0c\u4efb\u610f\u8fde\u7eed\u7684\u5de6\u53f3\u533a\u95f4\u5747\u53ef\u3011\n\n\u5de6\u53f3\u533a\u95f4\u7684a\u3001b\u7684\u5408\u5e76\uff1a\n\n\u663e\u7136\u5de6\u533a\u95f4\u7684\u5de6\u62ec\u53f7\u548c\u53f3\u533a\u95f4\u7684\u53f3\u62ec\u53f7\u5408\u5e76\u6d88\u53bb\uff0c\u8c01\u591a\u5269\u8c01\n```cpp\n//lc\u5de6\u533a\u95f4\uff0crc\u53f3\u533a\u95f4\n\tif(tr[lc].b>tr[rc].a)\n\t tr[id].a=tr[lc].a,tr[id].b=tr[lc].b-tr[rc].a+tr[rc].b;else\n\t tr[id].a=tr[lc].a+tr[rc].a-tr[lc].b,tr[id].b=tr[rc].b;\n```\n\n\u8de8\u533a\u95f4\u8ddd\u79bb\u8ba1\u7b97\uff1a\n\n\u5de6\u533a\u95f4\u53f3\u5de6\u62ec\u53f7\u6570\u8bb0\u4e3aa1,b1\uff0c\u53f3\u533a\u95f4a2,b2\n\ndis=a1+abs(b1-a2)+b2=max((a1+b1)+(b2-a2),(a1-b1)+(a2+b2))\n\n\u663e\u7136max(a1+b1),max(b2-a2)\u8fd9\u79cd\u662f\u53ef\u4ee5\u5355\u72ec\u7ef4\u62a4\u7684\u3002\n\n\u56e0\u6b64\u8bb0\u5f55\u533a\u95f4\u524d\u7f00\u7684max(a+b),max(b-a)\uff08l1,l2\uff09,\u540e\u7f00\u7684max(a+b),max(a-b)(r1,r2)\u5373\u53ef\u7ef4\u62a4dis\u503c\n```cpp\n\ttr[id].dis=max(max(tr[lc].r1+tr[rc].l2,tr[lc].r2+tr[rc].l1),max(tr[lc].dis,tr[rc].dis));\n\n```\nl1,r1,l2,r2\u7684\u7ef4\u62a4\u53c2\u8003\u5408\u5e76\u64cd\u4f5c\uff0c\u4e0d\u89e3\u91ca\u4e86\u81ea\u5df1\u4f53\u4f1a\n```cpp\n\ttr[id].l1=max(tr[lc].l1,max(tr[rc].l1+tr[lc].a-tr[lc].b,tr[rc].l2+tr[lc].a+tr[lc].b));\n\ttr[id].l2=max(tr[lc].l2,tr[rc].l2-tr[lc].a+tr[lc].b);\n\ttr[id].r1=max(tr[rc].r1,max(tr[lc].r1-tr[rc].a+tr[rc].b,tr[lc].r2+tr[rc].a+tr[rc].b));\n\ttr[id].r2=max(tr[rc].r2,tr[lc].r2+tr[rc].a-tr[rc].b);\n```\n\n\u56e0\u4e3a\u662f\u8981\u6c42\u9ed1\u70b9\u95f4\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u663e\u7136\u521d\u59cb\u5316\u65f6\u767d\u70b9\u7684l1,r1,l2,r2\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u7f6e\u4e3a-inf\n\n\u81f3\u6b64\u672c\u9898\u89e3\u51b3\u3002\n\n```cpp\n//\u62ec\u53f7\u5e8f\u5217\n#include<cstdio>\n//(a1 b1)(a2 b2)->(a,b)\n//a+b=a1+abs(b1-a2)+b2=max((a1-b1)+(a2+b2),(a1+b1)+(b2-a2))\n//\u9700\u8981\u5de6\u533a\u95f4\u540e\u7f00\u7684max(a-b),max(a+b)\uff0c\u53f3\u533a\u95f4\u524d\u7f00\u7684max(a+b),max(b-a) \nint num,s[300005],pos[1000005],head[100005],n,m,cnt,tot;\nbool c[100005];\nstruct edge{int to,next;}e[200005];\nvoid add(int u,int v){e[++num]=(edge){v,head[u]},head[u]=num;}\nstruct node\n{\n\tint a,b,l1,l2,r1,r2,dis;\n\t//a,b\u53f3\u5de6\u62ec\u53f7\u6570,l1,l2\u524d\u7f00\u7684max(a+b),max(b-a),r1,r2\u540e\u7f00\u7684max(a+b),max(a-b)  \n}tr[1200005];\nvoid dfs(int u,int fa)\n{\n\ts[++tot]=-1;//\u5de6\u62ec\u53f7\n\ts[++tot]=u;pos[u]=tot;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;if(v==fa)continue;\n\t\tdfs(v,u);\n\t}\n\ts[++tot]=-2;//\u53f3\u62ec\u53f7 \n}\nvoid push(int id,int x)\n{\n\ttr[id].a=tr[id].b=0;tr[id].l1=tr[id].l2=tr[id].r1=tr[id].r2=tr[id].dis=-1e9;\n\tif(s[x]==-1)tr[id].b=1;else\n\tif(s[x]==-2)tr[id].a=1;else\n\tif(!c[s[x]])tr[id].l1=tr[id].r1=tr[id].r2=tr[id].l2=0;//\u9ed1\u70b9 \n}\nint max(int a,int b){return a>b?a:b;}\nvoid merge(int id)\n{\n\tint lc=id<<1,rc=id<<1|1;\n\tif(tr[lc].b>tr[rc].a)\n\t tr[id].a=tr[lc].a,tr[id].b=tr[lc].b-tr[rc].a+tr[rc].b;else\n\t tr[id].a=tr[lc].a+tr[rc].a-tr[lc].b,tr[id].b=tr[rc].b;\n\ttr[id].l1=max(tr[lc].l1,max(tr[rc].l1+tr[lc].a-tr[lc].b,tr[rc].l2+tr[lc].a+tr[lc].b));\n\ttr[id].l2=max(tr[lc].l2,tr[rc].l2-tr[lc].a+tr[lc].b);\n\ttr[id].r1=max(tr[rc].r1,max(tr[lc].r1-tr[rc].a+tr[rc].b,tr[lc].r2+tr[rc].a+tr[rc].b));\n\ttr[id].r2=max(tr[rc].r2,tr[lc].r2+tr[rc].a-tr[rc].b);\n\ttr[id].dis=max(max(tr[lc].r1+tr[rc].l2,tr[lc].r2+tr[rc].l1),max(tr[lc].dis,tr[rc].dis));\n}\nvoid build(int id,int l,int r)\n{\n\tif(l==r){push(id,l);return;}\n\tint mid=l+r>>1;\n\tbuild(id<<1,l,mid);build(id<<1|1,mid+1,r);\n\tmerge(id);\n}\nvoid modify(int id,int l,int r,int x)\n{\n\tif(l==r){push(id,l);return;}\n\tint mid=l+r>>1;\n\tif(x<=mid)modify(id<<1,l,mid,x);else modify(id<<1|1,mid+1,r,x);\n\tmerge(id);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1,u,v;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v),add(v,u);\n\t}\n\tdfs(1,0);cnt=n;\n\tbuild(1,1,tot); \n\tscanf(\"%d\",&m);\n\tfor(int i=1,x;i<=m;i++)\n\t{\n\t\tchar s[2];\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='C')scanf(\"%d\",&x),cnt+=c[x]?1:-1,c[x]^=1,modify(1,1,tot,pos[x]);\n\t\telse if(cnt==0)printf(\"-1\\n\");else if(cnt==1)printf(\"0\\n\");else\n\t\tprintf(\"%d\\n\",tr[1].dis);\n\t}\n}\n```",
        "postTime": 1527852817,
        "uid": 13183,
        "name": "\u58a8\u5c14",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u52a8\u6001\u70b9\u5206\u6cbb\u677f\u5b50\u9898\uff0c\u8fd9\u9898\u9898\u89e3\u91cc\u6ca1\u52a8\u6001\u70b9\u5206\u6cbb\u89e3\u6cd5\u771f\u662f\u4e0d\u79d1\u5b66\u3002~~\u867d\u7136\u8fd9\u4e1c\u897f\u591a\u5e26\u4e00\u4e2alog\u2026\u2026~~\n\n\u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\u6211\u4eec\u5728\u9759\u6001\u7684\u70b9\u5206\u6cbb\u7684\u57fa\u7840\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u9ad8\u5ea6\u4e3a$O(logn)$\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u8fd9\u68f5\u6811\u4e0a\u7684\u70b9\u4e3a\u5f53\u524d\u505a\u70b9\u5206\u6cbb\u65f6\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u91cd\u5fc3\uff0c\u5e94\u8be5\u662f\u5f88\u597d\u60f3\u7684\u6bd5\u7adf\u5206\u6cbb\u672c\u8eab\u5c31\u662f\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u5177\u4f53\u5b9e\u73b0\u51fa\u6765\u4e86\u800c\u5df2\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u79f0\u4f5c\u70b9\u5206\u6811\u3002\n\n\u7136\u540e\u6211\u4eec\u5728\u70b9\u5206\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4fe1\u606f\uff0c\u5c31\u80fd\u591f\u652f\u6301\u5e26\u52a8\u6001\u4fee\u6539\u7684\u548c\u666e\u901a\u70b9\u5206\u6cbb\u4e00\u6837\u7684\u8def\u5f84\u4fe1\u606f\u7edf\u8ba1\u4e86\u3002\u56e0\u4e3a\u4fee\u6539\u7684\u65f6\u5019\u53ea\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u800c\u6811\u9ad8\u662f$O(logn)$\u7684\u5c31\u66b4\u529b\u8df3\u5c31\u884c\u4e86\u3002\n\n\u5173\u4e8e\u5982\u4f55\u5728\u70b9\u5206\u6811\u4e0a\u7ef4\u62a4\u8fd9\u91cc\u5199\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n**\u65b9\u6cd51.**\uff08~~\u8fd9\u5176\u5b9e\u662f\u6211\u81ea\u5df1YY\u51fa\u6765\u7684\u2026\u2026~~\uff09\u666e\u901a\u70b9\u5206\u6cbb\u662f\u4ee5\u5f53\u524d\u8fde\u901a\u5757\u7684\u91cd\u5fc3\u4e3a\u6839\uff0c\u7136\u540e\u9010\u4e2a\u626b\u4e00\u904d\u4ed6\u7684\u513f\u5b50\u505a\u7c7b\u4f3c\u4e8edp\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u8fd9\u5176\u4e2d\u7684\u5173\u952e\u5c31\u662f **\u4ee5\u91cd\u5fc3\u4e3a\u6839\u5408\u5e76\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u7684\u5b50\u6811** \uff0c\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u5728\u5f53\u524d\u8fde\u901a\u5757\u7684\u91cd\u5fc3\u5904\u7528\u4e2a\u652f\u6301\u5220\u9664\u7684logn\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4ed6\u6240\u6709\u513f\u5b50\uff08\u8fd9\u91cc\u8bf4\u7684\u90fd\u662f\u539f\u6765\u6811\u4e0a\u7684\u513f\u5b50\uff0c\u522b\u548c\u70b9\u5206\u6811\u4e0a\u7684\u513f\u5b50\u641e\u6df7\u4e86\uff09\u5b50\u6811\u5185\u7684\u5173\u706f\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u663e\u7136\u8fd9\u4e24\u4e2a\u52a0\u8d77\u6765\u5c31\u662f\u8fc7\u8fd9\u4e2a\u70b9\u6240\u6709\u5408\u6cd5\u8def\u5f84\u7684\u6700\u5927\u503c\u3002\u800c\u4ed6\u7684\u513f\u5b50\u7684\u5b50\u6811\u5982\u4f55\u5206\u5f00\u7ef4\u62a4\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528$dfs$\u5e8f\u628a\u513f\u5b50\u7684\u5b50\u6811\u5f53\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u91cd\u5fc3\u4e0a\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u663e\u7136\u8fd9\u6837\u505a\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$O(nlogn)$\u7684\uff09$dfs$\u5e8f\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u518d\u5728\u91cd\u5fc3\u4e0a\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e9b\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\u4ed6\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\u7684\u7b54\u6848\u5462\uff1f\u6211\u4eec\u518d\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u70b9\u5206\u6811\u4e0a\u5b50\u6811\u7684\u7b54\u6848\u6700\u5927\u503c\uff0c\u518d\u7528\u8fd9\u68f5\u5e73\u8861\u6811\u7684\u6700\u5927\u503c\u66f4\u65b0\u70b9\u5206\u6811\u4e0a\u7236\u4eb2\u7684\u7b54\u6848\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u4fee\u6539\u7684\u65f6\u5019\u7ef4\u62a4\u8fd93\u68f5\u6811\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u65b9\u6cd5\u4ee3\u7801\u6781\u957f\uff08\u6211\u76ee\u524d\u5199\u8fc7\u7684\u6700\u957f\u4ee3\u7801\u2026\u2026\uff09\uff0c\u8fc7\u4e8e\u6bd2\u7624\uff0c\u8fd9\u8fd8\u4e0d\u7b97\u2014\u2014\u5b83\u5e38\u6570\u592a\u5927\u4e86\uff0c\u6bd5\u7adf\u6211\u4eec\u8981\u540c\u65f6\u5728\u4e00\u6761\u5230\u6839\u7684\u94fe\u4e0a\u7ef4\u62a43\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u5176\u4e2d\u8fd8\u6709\u4e2a\u5e38\u6570\u5927\u7684\u5413\u4eba\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u2026\u2026\u5b9e\u6d4b\u6700\u540e\u4e00\u4e2a\u70b9\u8fc7\u4e0d\u53bb\u2026\u2026\n\n~~\u4ee3\u7801\u8fc7\u4e8e\u6bd2\u7624\u5c31\u4e0d\u653e\u4e86\u2026\u2026~~\n\n**\u65b9\u6cd52.** \u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\u7edf\u8ba1\u7b54\u6848\uff0c\u65b9\u6cd51\u8bf4\u4e86\u6211\u4eec\u5f97\u5728\u91cd\u5fc3\u5904\u5408\u5e76\u4e24\u4e2a\u5b50\u6811\u7684\u7b54\u6848\uff0c\u800c\u5b50\u6811\u6211\u4eec\u8fd8\u5f97\u5728\u8fd9\u4e00\u5c42\u60f3\u529e\u6cd5\u7ef4\u62a4\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0**\u6bcf\u4e2a\u5b50\u6811\u53ef\u662f\u8981\u5728\u5206\u6cbb\u7684\u4e0b\u4e00\u5c42\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u7684\u8fde\u901a\u5757\u7684**\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u8003\u8651\u4ed6\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2$fa$\uff0c\u6211\u4eec\u7ef4\u62a4\u5f53\u524d\u8fde\u901a\u5757\u5185\u6240\u6709\u5173\u706f\u70b9\u5230$fa$\u8ddd\u79bb\u7684\u6700\u5927\u503c\uff0c\u8bb0\u4e3a$mxdis_i$\uff0c\u7136\u540e\u6211\u4eec\u5728$fa$\u5904\u7ef4\u62a4\u4ed6\u70b9\u5206\u6811\u7684\u513f\u5b50\u7684$mxdis_i$\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u7b54\u6848\u4e86\u3002\u81f3\u4e8e\u7ef4\u62a4\u603b\u4f53\u7684\u7b54\u6848\u5176\u5b9e\u4e5f\u4e0d\u7528\u5728\u6811\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u7ef4\u62a4\u4e00\u904d\uff0c\u5728\u5168\u5c40\u7528\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u7ef4\u62a4\u70b9\u5206\u6811\u513f\u5b50\u6700\u5927\u7684$mxdis_i$\u7684\u65f6\u5019\uff0c\u5982\u679c\u81ea\u5df1\u662f\u5173\u7740\u706f\u7684\u5c31\u5f97\u518d\u989d\u5916\u63d2\u5165\u4e00\u4e2a0\uff0c\u56e0\u4e3a\u81ea\u5df1\u4e5f\u53ef\u4ee5\u662f\u7aef\u70b9\u3002\n\n\u53e6\u5916\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u9700\u8981\u652f\u6301\u67e5\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u548c\u5220\u9664\uff0c\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5e73\u8861\u6811\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u4e24\u4e2a\u5927\u6839\u5806$A$\u548c$B$\u6784\u6210\u7684\u73a9\u610f\u5c31\u53ef\u4ee5\u7ef4\u62a4\u3002\u5220\u9664\u7684\u65f6\u5019\u5e76\u4e0d\u8003\u8651$A$\u7684\u5220\u9664\uff0c\u800c\u662f\u628a\u8fd9\u4e2a\u6570\u63d2\u5230$B$\u5185\uff0c\u67e5\u6700\u5927\u503c\u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0$A$\u7684\u5806\u9876\u548c$B$\u7684\u5806\u9876\u4e00\u6837\u5c31\u8bf4\u660e\u8fd9\u4e2a\u6570\u88ab\u5220\u9664\u8fc7\u4e86\uff0c\u5c31\u540c\u65f6\u5f39\u6389\u3002\uff08\u611f\u8c22$PoPoQQQ$\u5927\u795e\u535a\u5ba2\u91cc\u5199\u7684\u8fd9\u4e2a\u6280\u5de7\uff09\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u7528\u5e38\u6570\u66f4\u5c0f\u7684\u5806\u4ee3\u66ff\u4e86\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\uff0c\u800c\u4e14\u7ef4\u62a4\u8d77\u6765\u4e5f\u66f4\u65b9\u4fbf\u4e86\uff0c\u4ee3\u7801\u77ac\u95f4\u77ed\u4e86\u8bb8\u591a\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define inf 123456789\nusing namespace std;\nnamespace ywy{\n\tinline int get(){//\u6211\u7684\u5783\u573e\u5feb\u8bfb \n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid print(int num){\n\t\tif(num>=10)print(num/10);putchar(num%10+'0');\n\t}\n\tinline char cget(){\n\t\tchar c;while((c=getchar())||23333)if(c>='A'&&c<='Z')return(c);\n\t}\n\tint heads[100001]\uff1b \n\tint fa[100001];//\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2 \n\tint size[100001];//\u5f53\u524d\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u627e\u91cd\u5fc3\u7528\u7684 \n\tint que[100001];\n\tunsigned char bv[100001];//\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u8fd9\u4e2a\u70b9\u662f\u5426\u88absolve\u4e86 \n\ttypedef struct _dui{//\u628a\u8fd9\u4e24\u4e2a\u5927\u6839\u5806\u6784\u6210\u7684\u73a9\u610f\u5c01\u88c5\u8d77\u6765 \n\t\tpriority_queue<int> me,del;//del\u5b58\u5220\u9664\u7684\u4fe1\u606f \n\t\tinline int getmax(){\n\t\t\twhile(!me.empty()&&(!del.empty()&&me.top()==del.top()))me.pop(),del.pop();//\u5f39\u51fa\u5df2\u7ecf\u5220\u9664\u7684\u5806\u9876 \n\t\t\tif(me.empty())return(-inf);return(me.top());\n\t\t}\n\t\tinline void remove(int num){\n\t\t\tif(me.top()==num)me.pop();else del.push(num);\n\t\t}\n\t\tinline void insert(int num){\n\t\t\tme.push(num);\n\t\t}\n\t\tinline int getsecond(){\n\t\t\tint cjr=getmax();if(cjr==-inf)return(-inf);me.pop();int ywy=getmax();me.push(cjr);return(ywy);\n\t\t}\n\t}dui;\n\tdui globe\uff1b//\u7ef4\u62a4\u5168\u5c40\u7684\u7b54\u6848 \n\tdui fuqin[100001];//\u7ef4\u62a4\u5f53\u524d\u8fde\u901a\u5757\u5173\u706f\u7684\u70b9\u5230\u70b9\u5206\u6811\u7236\u4eb2\u7684\u6700\u5927\u8ddd\u79bb \n\tdui chs[100001];//\u7ef4\u62a4\u513f\u5b50\uff08\u5f53\u7136\u4e5f\u5305\u62ec\u81ea\u5df1\uff09\u6700\u5927\u7684maxdis \n\ttypedef struct _b{\n\t\tint dest;int nxt;\t\n\t}bian;\n\tbian memchi[200001];\n\tint gn=1;\n\tinline void add(int s,int t){\n\t\tmemchi[gn].dest=t;memchi[gn].nxt=heads[s];heads[s]=gn;gn++;\n\t}\n\tint dis[100001][18];//\u5f53\u524d\u5206\u6cbb\u5230\u8fd9\u4e2a\u6df1\u5ea6\u65f6\uff0c\u5230\u70b9\u5206\u6811\u7236\u4eb2\u7684\u8ddd\u79bb \n\tint rdeep[100001];//\u4f5c\u4e3a\u91cd\u5fc3\u65f6\u7684\u5206\u6cbb\u6df1\u5ea6 \n\tunsigned char zt[100001];//\u662f\u5426\u5173\u706f \n\tint gdeep,tot,zx;\n\tinline void bfs(int pt){//bfs\u6c42\u51fa\u8ddd\u79bb \n\t\ttot=0;\n\t\tregister int head=0,tail=1;\n\t\tque[0]=pt;\n\t\tdis[pt][gdeep]=1;\n\t\tdo{\n\t\t\tint me=que[head];head++;tot++;\n\t\t\tfor(register int i=heads[me];i;i=memchi[i].nxt){\n\t\t\t\tif(bv[memchi[i].dest])continue;\n\t\t\t\tif(dis[me][gdeep]+1<dis[memchi[i].dest][gdeep]){\n\t\t\t\t\tdis[memchi[i].dest][gdeep]=dis[me][gdeep]+1;\n\t\t\t\t\tque[tail]=memchi[i].dest;tail++;\n\t\t\t\t}\n\t\t\t}\n\t\t}while(head<tail);\n\t}\n\tvoid afs(int pt,int baba){//\u627e\u91cd\u5fc3 \n\t\tsize[pt]=1;\n\t\tint mx=0;\n\t\tfor(register int i=heads[pt];i;i=memchi[i].nxt){\n\t\t\tif(bv[memchi[i].dest]||memchi[i].dest==baba)continue;\n\t\t\tafs(memchi[i].dest,pt);\n\t\t\tsize[pt]+=size[memchi[i].dest];\n\t\t\tmx=max(mx,size[memchi[i].dest]);\n\t\t}\n\t\tif(max(mx,tot-size[pt])<=tot/2)zx=pt;\n\t}\n\tint lstans[100001];//\u5b58\u653e\u8fd9\u4e2a\u70b9\u7684\u7b54\u6848\uff0c\u65b9\u4fbf\u7ef4\u62a4\u5168\u5c40\u7684\u5806 \n\tint hexin;\n\tvoid digui(int pt,int baba,int dp){//\u70b9\u5206\u6cbb \n\t\tgdeep=dp;\n\t\tbfs(pt);\n\t\tafs(pt,0);\n\t\tif(!baba)hexin=zx;\n\t\trdeep[zx]=dp;\n\t\tif(baba){\n\t\t\tfor(register int i=0;i<tot;i++)fuqin[zx].insert(dis[que[i]][dp]);//\u7ef4\u62a4maxdis\t\n\t\t}\n\t\tfa[zx]=baba;\n\t\tint me=zx;bv[zx]=1;\n\t\tfor(register int i=heads[zx];i;i=memchi[i].nxt){\n\t\t\tif(bv[memchi[i].dest])continue;\n\t\t\tdigui(memchi[i].dest,me,dp+1);\n\t\t}\n\t\tif(baba)chs[baba].insert(fuqin[me].getmax());//\u628amaxdis\u63d2\u5165\u7236\u4eb2 \n\t\tchs[me].insert(0);//\u522b\u5fd8\u4e86\u7ef4\u62a4\u81ea\u5df1 \n\t\tglobe.insert(lstans[me]=chs[me].getmax()+chs[me].getsecond());//\u5f53\u524d\u70b9\u7684\u7b54\u6848 \n\t}\n\tvoid ywymain(){\n\t\tmemset(dis,0x7f,sizeof(dis));\n\t\tint n=get();\n\t\tfor(register int i=1;i<n;i++){\n\t\t\tint s=get(),t=get();add(s,t);add(t,s);\n\t\t}\n\t\tdigui(1,0,0);\n\t\tint q=get();\n\t\tint guan=n;//\u6709\u591a\u5c11\u706f\u5173\u7740 \n\t\twhile(q){\n\t\t\tq--;\n\t\t\tchar cmd=cget();\n\t\t\tif(cmd=='G'){\n\t\t\t\tif(guan==1)printf(\"0\\n\");else{\n\t\t\t\t\tif(guan==0)printf(\"-1\\n\");\n\t\t\t\t\telse print(globe.getmax()),putchar('\\n');\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tint x=get();\n\t\t\t\tif(zt[x])chs[x].insert(0),guan++;//\u8fd9\u4e2a\u706f\u5173\u4e86\u5c31\u8981\u989d\u5916\u63d2\u51650 \n\t\t\t\telse chs[x].remove(0),guan--;\n\t\t\t\tint cur=x;\n\t\t\t\twhile(cur){\n\t\t\t\t\tint cjr=chs[cur].getmax()+chs[cur].getsecond();\n\t\t\t\t\tif(cjr!=lstans[cur]){\n\t\t\t\t\t\tglobe.remove(lstans[cur]);\n\t\t\t\t\t\tglobe.insert(lstans[cur]=cjr);//\u66f4\u65b0\u5168\u5c40\u7b54\u6848 \n\t\t\t\t\t}if(!fa[cur])break;\n\t\t\t\t\tint dp=rdeep[cur];\n\t\t\t\t\tcjr=fuqin[cur].getmax();\n\t\t\t\t\tif(zt[x])fuqin[cur].insert(dis[x][dp]);\n\t\t\t\t\telse fuqin[cur].remove(dis[x][dp]);//\u7ef4\u62a4\u5230\u70b9\u5206\u6811\u7236\u4eb2\u7684\u8ddd\u79bb \n\t\t\t\t\tint ywy=fuqin[cur].getmax();\n\t\t\t\t\tif(ywy!=cjr){\n\t\t\t\t\t\tchs[fa[cur]].remove(cjr);\n\t\t\t\t\t\tchs[fa[cur]].insert(ywy);\n\t\t\t\t\t}\n\t\t\t\t\tcur=fa[cur];\n\t\t\t\t}\n\t\t\t\tzt[x]^=1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);\n}\n```",
        "postTime": 1543309016,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "\u8bb2\u4e00\u4e0b\u7b80\u5355\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba:\n\n\u73b0\u6709\u96c6\u5408$S,T$\u3002\u8bbe\u5176\u76f4\u5f84\u70b9\u96c6\u4e3a$F(S),F(T)$\u3002\u5219$F(S\\bigcup T)\\subset F(S)\\bigcup F(T)$\u3002\n\n\u90a3\u4e48\uff0c\u6839\u636e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u8003\u8651\u5229\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u76f4\u5f84\u3002\u5408\u5e76\u533a\u95f4\u65f6\u76f4\u63a5\u66b4\u529b\u5408\u5e76\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u5173\u4e8e\u8ba1\u7b97\u76f4\u5f84\uff0c\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684$lca$\u3002\u5982\u679c\u4f7f\u7528\u6811\u94fe\u5256\u5206\u6216\u8005\u500d\u589e\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log^2n)$\u3002\u5982\u679c\u4f7f\u7528$st$\u8868\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log n)$\u3002\n\n\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\n#define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n#define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n#define For(i,a,b) for(i=(a),i<=(b);++i)\n#define Forward(i,a,b) for(i=(a),i>=(b);--i)\n#define Chkmax(a,b) a=a>b?a:b\n\ntypedef unsigned int uint32;\n\ninline uint32 getwd(void)\n{\n    static const uint32 BUFSIZE = 1048576;\n    static char buf[BUFSIZE];\n    static char *bufnow = buf;\n    static char *bufmax = buf;\n    if (bufnow == bufmax) {\n        bufmax = buf + fread(buf, 1, BUFSIZE, stdin);\n        bufnow = buf;\n    }\n\treturn *bufnow++;\n}\n\ninline void read(uint32 &x){\n\tstatic char k;k=getwd();x=0;\n    while(!isdigit(k)&&k^'-')k=getwd();\n    while(isdigit(k)){x=x*10+(k^48);k=getwd();}\n}\n\ninline void getopt(char &opt){for(opt=getwd();!isupper(opt);opt=getwd());}\n\ninline void write(uint32 x)\n{\n    static uint32 sta[35],tp;\n    if(!x){putchar(48),putchar('\\n');return;}\n    for(tp=0;x;x/=10)sta[++tp]=x%10;\n    for(;tp;putchar(sta[tp--]^48));\n    putchar('\\n');\n}\nusing namespace std;\nvoid file()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"practice.in\",\"r\",stdin);\n\tfreopen(\"practice.out\",\"w\",stdout);\n#endif\n}\n\nconst uint32 MAXN=5e5+7;\n\nstatic uint32 n,e,head[MAXN],m;\n\nstatic struct edge\n{\n\tuint32 v,nxt;\n}p[MAXN<<1];\n\ninline void add(uint32 u,uint32 v){p[++e]=(edge){v,head[u]};head[u]=e;}\n\nstatic uint32 st[MAXN],dfn[MAXN],las[MAXN],fa[20][MAXN],dep[MAXN],re[MAXN];\n\nvoid dfs(uint32 u,uint32 fr)\n{\n\tre[dfn[u]=++e]=u;fa[0][u]=fr;dep[u]=dep[fr]+1;\n\tfor(register uint32 v=head[u];v;v=p[v].nxt)if(p[v].v^fr)dfs(p[v].v,u);\n\tlas[u]=e;\n}\n\nstatic uint32 Log[MAXN];\n\ninline void init()\n{\n\tread(n);\n\tstatic uint32 u,v;\n\tRep(i,1,n-1)read(u),read(v),add(u,v),add(v,u);e=0;\n\tdfs(1,0);\n\tRep(i,2,n)Log[i]=Log[i>>1]+1;\n\tRep(j,1,Log[n])Rep(i,1,n)fa[j][i]=fa[j-1][fa[j-1][i]];\n}\n\ninline uint32 dist(uint32 u,uint32 v)\n{\n\tu=re[u];v=re[v];\n\tstatic uint32 dps;dps=dep[u]+dep[v];\n\tif(dep[u]<dep[v])swap(u,v);\n\tfor(;dep[u]-dep[v];u=fa[Log[dep[u]-dep[v]]][u]);\n\tif(u==v)return dps-2*dep[u];\n\tRepe(i,Log[dep[u]],0)if(fa[i][u]^fa[i][v])u=fa[i][u],v=fa[i][v];\n\treturn dps-2*dep[u]+2;\n}\n\nnamespace Segment_Tree\n{\n\tstatic uint32 poi[MAXN<<2][3],dst[MAXN<<2];\n\n\tinline void pushup(uint32 h)\n\t{\n\t\tstatic uint32 dis;\n\t\tdst[h]=-1;poi[h][0]=poi[h][1]=poi[h][2]=0;\n\t\tif(dst[h<<1]==-1)\n\t\t{\n\t\t\tdst[h]=dst[h<<1|1],poi[h][0]=poi[h<<1|1][0];\n\t\t\tpoi[h][1]=poi[h<<1|1][1],poi[h][2]=poi[h<<1|1][2];\n\t\t}\n\t\telse if(dst[h<<1|1]==-1)\n\t\t{\n\t\t\tdst[h]=dst[h<<1],poi[h][0]=poi[h<<1][0];\n\t\t\tpoi[h][1]=poi[h<<1][1],poi[h][2]=poi[h<<1][2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(dst[h<<1]<dst[h<<1|1])\n\t\t\t{\n\t\t\t\tdst[h]=dst[h<<1|1],poi[h][0]=poi[h<<1|1][0];\n\t\t\t\tpoi[h][1]=poi[h<<1|1][1],poi[h][2]=poi[h<<1|1][2];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdst[h]=dst[h<<1],poi[h][0]=poi[h<<1][0];\n\t\t\t\tpoi[h][1]=poi[h<<1][1],poi[h][2]=poi[h<<1][2];\n\t\t\t}\n\t\t\tRep(i,1,poi[h<<1][0])Rep(j,1,poi[h<<1|1][0])\n\t\t\t\tif((dis=dist(poi[h<<1][i],poi[h<<1|1][j]))>dst[h])\n\t\t\t\t\tdst[h]=dis,poi[h][1]=poi[h<<1][i],poi[h][2]=poi[h<<1|1][j];\n\t\t\tpoi[h][0]=2;\n\t\t}\n\t}\n\n\tvoid make_tree(uint32 h,uint32 l,uint32 r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tst[l]=1;poi[h][0]=1;poi[h][1]=l;\n\t\t\treturn;\n\t\t}\n\t\tuint32 mid=(l+r)>>1;\n\t\tmake_tree(h<<1,l,mid);make_tree(h<<1|1,mid+1,r);\n\t\tpushup(h);\n\t}\n\n\tvoid modify(uint32 h,uint32 l,uint32 r,uint32 x)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tif(st[l])st[l]=poi[h][0]=poi[h][1]=0,dst[h]=-1;\n\t\t\telse st[l]=poi[h][0]=1,poi[h][1]=l,dst[h]=0;\n\t\t\treturn;\n\t\t}\n\t\tstatic uint32 mid;mid=(l+r)>>1;\n\t\tx<=mid?modify(h<<1,l,mid,x):modify(h<<1|1,mid+1,r,x);\n\t\tpushup(h);\n\t}\n\n\tstatic uint32 dsts,pi[3];\n\n\tinline void Combine(uint32 h)\n\t{\n\t\tstatic uint32 u,v,dis;\n\t\tif(!poi[h][0])return;\n\t\tif(!pi[0])pi[0]=poi[h][0],pi[1]=poi[h][1],pi[2]=poi[h][2],dsts=dst[h];\n\t\telse\n\t\t{\n\t\t\tif(dst[h]>dsts)dsts=dst[h],u=poi[h][1],v=poi[h][2];\n\t\t\telse u=pi[1],v=pi[2];\n\t\t\tRep(i,1,pi[0])Rep(j,1,poi[h][0])\n\t\t\t\tif((dis=dist(pi[i],poi[h][j]))>dsts)\n\t\t\t\t\tdsts=dis,u=pi[i],v=poi[h][j];\n\t\t\tpi[0]=2;pi[1]=u;pi[2]=v;\n\t\t}\n\t}\n\n\tvoid query(uint32 h,uint32 l,uint32 r,uint32 x,uint32 y)\n\t{\n\t\tif(l>=x&&r<=y)\n\t\t{\n\t\t\tCombine(h);\n\t\t\treturn;\n\t\t}\n\t\tuint32 mid=(l+r)>>1;\n\t\tif(x<=mid)query(h<<1,l,mid,x,y);\n\t\tif(y>mid)query(h<<1|1,mid+1,r,x,y);\n\t}\n}\nusing namespace Segment_Tree;\n\ninline void solve()\n{\n\tread(m);\n\tstatic char x;\n\tstatic uint32 rt;\n\tmake_tree(1,1,n);\n\tRep(i,1,m)\n\t{\n\t\tgetopt(x);read(rt);\n\t\tif(x=='C')modify(1,1,n,dfn[rt]);\n\t\telse\n\t\t{\n\t\t\tpi[0]=pi[1]=pi[2]=0;dsts=-1;\n\t\t\tquery(1,1,n,dfn[rt],las[rt]);\n\t\t\t~dsts?write(dsts):(void)puts(\"-1\");\n\t\t}\n\t}\n\tcerr<<1.0*clock()/CLOCKS_PER_SEC<<endl;\n}\n\nint main()\n{\n\tfile();\n\tinit();\n\tsolve();\n\treturn 0;\n}\n\n\n```",
        "postTime": 1532242518,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "\u70b9\u5206\u6811\u4e00\u70b9\u90fd\u4e0d\u4f1a\u554a\uff08\u8fd8\u662f\u592a\u83dc\u4e86\uff09  \n\u70b9\u5206\u6811\u5c31\u662f\u6211\u4eec\u70b9\u5206\u6cbb\u6784\u6210\u7684\u65b0\u6811\u3002\u6ee1\u8db3\u6df1\u5ea6\u5f88\u5c0f\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4e0a\u9762\u778e\u7ef4\u62a4\u4e1c\u897f\u4e86\u3002  \n\u4e09\u4e2a\u5927\u6839\u5806\uff1a  \n$C[u]$\u91cc\u88c5\u7684\u662f\u70b9\u5206\u6811\u4e2du\u7684\u5b50\u6811\u6240\u6709\u70b9\u5230\u70b9\u5206\u6811\u4e2du\u7684\u7236\u4eb2\u7684\u8ddd\u79bb\u3002  \n$B[u]$\u91cc\u88c5\u7684\u662f\u70b9\u5206\u6811\u4e2du\u7684\u6240\u6709\u513f\u5b50\u7684C\u7684\u6700\u5927\u503c\u3002  \n$A$\u91cc\u88c5\u7684\u662f\u6240\u6709$B$\u7684\u6700\u5927\u503c\u4e0e\u6b21\u5927\u503c\u4e4b\u548c\u3002  \n$A$\u7684\u5806\u9876\u5c31\u662f\u7b54\u6848\u3002  \n~~\uff08\u6211\u4e00\u5f00\u59cb\u4e00\u76f4\u4ee5\u4e3a\u4e24\u4e2a\u5806\u5c31\u884c\uff0c\u5bf9\u7b2c\u4e09\u4e2a\u5bf9\u8868\u793a\u7591\u60d1\uff0c\u53c8\u61d2\u5f97\u6df1\u5165\u60f3\uff0c\u4e00\u76f4\u7ffb\u9898\u89e3\u3002\u5343\u4e07\u4e0d\u80fd\u72af\u61d2\u4e0d\u60f3\u554a\uff09~~  \n\u6211\u4eec\u627e\u7b54\u6848\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u3002\u95ee\u9898\u662f\u600e\u4e48\u7ef4\u62a4\uff1f  \n\u56e0\u4e3a\u6211\u4eec\u662f\u70b9\u5206\u6811\uff0c\u6df1\u5ea6\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e00\u4e2a\u4e00\u4e2a\u8df3\u5230\u6839\u66b4\u529b\u4fee\u6539\u7ef4\u62a4\u3002\u5177\u4f53\u4e00\u4e9b\u5c31\u662f\u8bbe\u5220\u7684\u70b9\u4e3a$x$\uff0c\u8df3\u5230\u4e00\u4e2a\u70b9$u$\u628a$x$\u7684\u8d21\u732e\u4ece$C[u]$\u4e2d\u5220\u6389\uff0c\u7136\u540e\u91cd\u65b0\u8ddf\u65b0$B[u]$\u548c$A$\u3002  \n\u81f3\u6b64\u672c\u9898\u5f97\u5230\u89e3\u51b3\uff0c\u5c31\u662f\u6211\u4ee3\u7801\u5e38\u6570\u592a\u5927\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int N=200100;\nstruct que{\n    priority_queue<int> x,y;\n    inline void push(int a){x.push(a);}\n    inline void del(int a){y.push(a);}\n    inline int top(){while(y.size()&&x.top()==y.top())x.pop(),y.pop();return x.top();}\n    inline int size(){return x.size()-y.size();}\n    inline void pop(){while(y.size()&&x.top()==y.top())x.pop(),y.pop();x.pop();}\n    inline int sectop(){int a=top();pop();int b=top();push(a);return b;}\n}A,B[N],C[N];\nint cnt,head[N];\nint light[N],tot,n,m;\nint root,size[N],g[N],vis[N],all,f[N];\nint dep[N],mn[N*2][24],num,dfn[N];\nint Log[N];\nstruct edge{\n    int to,nxt;\n}e[N*2];\ninline void add_edge(int u,int v){\n    cnt++;\n    e[cnt].nxt=head[u];\n    e[cnt].to=v;\n    head[u]=cnt;\n}\ninline void dfs(int u,int f){\n    dfn[u]=++num;\n    dep[u]=dep[f]+1;\n    mn[num][0]=dep[u];\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v==f)continue;\n        dfs(v,u);\n        mn[++num][0]=dep[u];\n    }\n}\ninline void getroot(int u,int f){\n    g[u]=0;size[u]=1;\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v==f||vis[v])continue;\n        getroot(v,u);\n        g[u]=max(g[u],size[v]);\n        size[u]+=size[v];\n    }\n    g[u]=max(g[u],all-size[u]);\n    if(g[u]<g[root])root=u;\n}\ninline int getdep(int x,int y){\n    int a=dfn[x];\n    int b=dfn[y];\n    if(a>b)swap(a,b);\n    int len=Log[b-a+1];\n    return min(mn[a][len],mn[b-(1<<len)+1][len]);\n}\ninline int dis(int x,int y){\n    return dep[x]+dep[y]-2*getdep(x,y);\n}\ninline void work(int u,int ff){\n    C[root].push(dis(u,f[root]));\n    size[u]=1;\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v==ff||vis[v])continue;\n        work(v,u);\n        size[u]+=size[v];\n    }\n}\ninline void pusha(int x){\n    if(B[x].size()>=2)A.push(B[x].top()+B[x].sectop());\n}\ninline void dela(int x){\n    if(B[x].size()>=2)A.del(B[x].top()+B[x].sectop());\n}\ninline void build(int u,int ff){\n    f[u]=ff;vis[u]=1;\n    B[u].push(0);\n    work(u,0);\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(vis[v])continue;\n        root=0,all=size[v];\n        getroot(v,0);\n        v=root;\n        build(root,u);\n        B[u].push(C[v].top());\n    }\n    pusha(u);\n}\ninline void on(int x){\n    dela(x);\n    B[x].del(0);\n    pusha(x);\n    for(int i=x;f[i];i=f[i]){\n        dela(f[i]);\n        B[f[i]].del(C[i].top());\n        C[i].del(dis(x,f[i]));\n        if(C[i].size())B[f[i]].push(C[i].top());\n        pusha(f[i]);\n    }\n}\ninline void off(int x){\n    dela(x);\n    B[x].push(0);\n    pusha(x);\n    for(int i=x;f[i];i=f[i]){\n        dela(f[i]);\n        if(C[i].size())B[f[i]].del(C[i].top());\n        C[i].push(dis(x,f[i]));\n        B[f[i]].push(C[i].top());\n        pusha(f[i]);\n    }\n}\nvoid prework(){\n    for(int j=1;j<=Log[num];j++)\n        for(int i=1;i+(1<<j)-1<=num;i++)\n            mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]);\n}\ninline int read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nint main(){\n    n=read();\n    Log[0]=-1;for(int i=1;i<=200000;i++)Log[i]=Log[i>>1]+1;\n    for(int i=1;i<n;i++){\n        int u=read(),v=read();\n        add_edge(u,v);add_edge(v,u);\n    }\n    dfs(1,0);\n    prework();\n    g[0]=n;root=0;all=n;\n    getroot(1,0);build(root,0);\n    tot=n;\n    m=read();\n    char s;\n    while(m--){\n        s=getchar();\n        if(s=='G'){\n            if(tot<=1)printf(\"%d\\n\",tot-1);\n            else printf(\"%d\\n\",A.top());\n        }\n        else{\n            int x=read();\n            if(light[x]==0)on(x),tot--;\n            else off(x),tot++;\n            light[x]^=1;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1546216283,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u6211\u7684[blog](https://www.cnblogs.com/bztMinamoto/p/9381655.html)\n\n\u795e\u4ed9\u822c\u7684\u64cd\u4f5c\u2026\u2026\n\n\u819c\u62dc\u5c9b\u5a18\u7684\u601d\u8def\u548chzwer\u7684\u4ee3\u7801\u2026\u2026\n\n![](https://i.loli.net/2018/07/28/5b5c0a750c492.png)\n\n\u6211\u4eec\u5148\u5047\u8bbe\u6709\u4ee5\u4e0a\u8fd9\u4e48\u4e00\u68f5\u6811\uff08\u56fe\u4e11\u52ff\u4ecb\uff09\n\n\u8fdb\u884c\u5148\u5e8f\u904d\u5386\uff0c\u5f97\u5230$[A[B[E][F[H][I]]][C][D[G]]]$\n\n\u518d\u628a\u6240\u6709\u5b57\u6bcd\u53bb\u6389$[ [ [ ] [ [ ] [ ] ] ] [ ] [ [ ] ] ]$\n\n\u8fd9\u5c31\u662f\u8fd9\u4e00\u68f5\u6811\u7684\u62ec\u53f7\u7f16\u7801\uff08\u672c\u8d28\u662fdfs\u5f97\u5230\u7684\uff09\n\n\u82b1\u4e86\u8fd9\u4e48\u5927\u529f\u592b\u627e\uff0c\u4f46\u8fd9\u73a9\u610f\u513f\u5230\u5e95\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u8282\u70b9\uff0cE\u548cG\n\n\u53d6\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u90a3\u6bb5\u62ec\u53f7\u7f16\u7801$] [ [ ] [ ] ] ] [ ] [ [$\n\n\u518d\u5c06\u6240\u6709\u5339\u914d\u7684\u62ec\u53f7\u53bb\u6389\uff0c\u5f97\u5230$] ] [ [$\n\n\u6211\u4eec\u770b\u5230\u4e86\u4e24\u4e2a$]$\u548c\u4e24\u4e2a$[$\n\n\u518d\u56de\u5230\u6811\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0E\u5411\u4e0a\u8d70\u4e24\u6b65\uff0c\u518d\u5411\u4e0b\u8d70\u4e24\u6b65\u5c31\u5230\u8fbe\u4e86G\n\n\u4e8e\u662f\u53d1\u73b0\u62ec\u53f7\u5e8f\u5217\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u7ef4\u62a4\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n\u80fd\u4e0d\u80fd\u8fdb\u4e00\u6b65\u4f18\u5316\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u8ddd\u79bb\u800c\u8a00\uff0c\u5339\u914d\u7684\u62ec\u53f7\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\n\n\u800c\u4e14\uff0c\u7531\u4e8e\u8ddd\u79bb\u53ea\u9700\u8981\u8bb0\u5f55\u6570\u5b57\uff0c\u6240\u4ee5\u7ef4\u62a4\u62ec\u53f7\u4e5f\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u53ea\u8981\u6709\u7f16\u7801\u5c31\u884c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u5143\u7ec4$(a,b)$\u6765\u63cf\u8ff0\u5b83\uff0c\u8868\u793a\u6709a\u4e2a$]$\u548cb\u4e2a$[$\n\n\u6240\u4ee5\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u70b9P\u548cQ\uff0c\u5982\u679c\u4ecb\u4e8eP\u548cQ\u4e4b\u95f4\u7684\u62ec\u53f7\u7f16\u7801\u8868\u793a\u4e3a$(a,b)$\uff0c\u5219P\u548cQ\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\u5c31\u662fa+b\n\n\u662f\u4e0d\u662f\u5f88\u65b9\u4fbf\u554a~\\(\u2267\u25bd\u2266)/~\u5566\u5566\u5566\n\n\u4f46\u662f\u73b0\u5728\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u600e\u4e48\u7ef4\u62a4\u7f16\u7801\u5462\uff1f\n\n\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5de6\u8fb9\u4e00\u534a\u7684\u4fe1\u606f\u548c\u53f3\u8fb9\u4e00\u534a\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u5f97\u5230\u6574\u6bb5\u7f16\u7801\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u7528\u6211\u4eec\u719f\u6089\u7684\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u4e86\n\n\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u5206\u6790\n\n\u8003\u8651\u5bf9\u4e8e\u4e24\u6bb5\u62ec\u53f7\u7f16\u7801$s1(a,b)$\u548c$s2(c,d)$\uff0c\u4ed6\u4eec\u5408\u5e76\u8d77\u6765\u53ef\u4ee5\u5f97\u5230$s(x,y)$\n\n\u6ce8\u610f\u5230$s1$\u548c$s2$\u5408\u5e76\u8d77\u6765\u65f6\u4f1a\u4ea7\u751f$min(b,c)$\u7684\u5339\u914d\u62ec\u53f7\uff0c\u5408\u5e76\u540e\u4ed6\u4eec\u4f1a\u88ab\u62b5\u6d88\u6389\n\n\u4e8e\u662f\n\n\u5f53 $b<c$ \u65f6\u7b2c\u4e00\u6bb5 [ \u5c31\u88ab\u6d88\u5b8c\u4e86\uff0c\u4e24\u6bb5 $]$ \u8fde\u5728\u4e00\u8d77\uff0c\u4f8b\u5982\uff1a\n\n$]  ]  [  [  +  ]  ]  ]  [  [  =  ]  ]  ]  [  [$\n\n\u5f53 $b>=c$ \u65f6\u7b2c\u4e8c\u6bb5 ] \u5c31\u88ab\u6d88\u5b8c\u4e86\uff0c\u4e24\u6bb5 $[ $\u8fde\u5728\u4e00\u8d77\uff0c\u4f8b\u5982\uff1a\n$]  ]  [  [  [  +  ]  ]  [  [  = ] ]  [  [  [$\n\n\u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u51e0\u4e2a\u5341\u5206\u6709\u7528\u7684\u7ed3\u8bba\n\n\u5f53 $b<c$ \u65f6\uff0c$(x,y) = (a-b+c,d)$\n\n\u5f53 $b>=c$ \u65f6\uff0c$(x,y) = (a,b-c+d)$\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6574\u68f5\u6811\u7684\u62ec\u53f7\u7f16\u7801~\\(\u2267\u25bd\u2266)/~\u5566\u5566\u5566\n\n\u9898\u76ee\u6240\u8981\u6c42\u7ef4\u62a4\u7684\uff0c\u662fmax{a+b|s'(a,b)\u662fs\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4e14s'\u4f4d\u4e8e\u4e24\u9ed1\u70b9\u4e4b\u95f4}\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u503c\u8868\u793a\u4e3a$dis(s)$\n\n\u6211\u4eec\u5148\u6839\u636e\u4e0a\u9762\u7684\u4e24\u6761\u7ed3\u8bba\uff0c\u5f97\u5230\u51e0\u4e2a\u63a8\u8bba\n\n\u2460$x+y=a+d+|b-c|=max((a+b-c+d),(a-b+c+d))$\n\n\u2461$x-y=a-b+c-d$\n\n\u2462$y-x=b-a+d-c$\n\n\u7531\u2460\u5f0f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u7ef4\u62a4$dis(s)$\uff0c\u8981\u7ef4\u62a4\u56db\u4e2a\u503c$a+b,d-c,a-b,d+c$\n\n\u53c8\u4e3a\u4e86\u4fdd\u8bc1$s'$\u5728\u4e24\u4e2a\u9ed1\u70b9\u4e4b\u95f4\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a\u4e00\u4e9b\u9650\u5236\n\n\u4e8e\u662f\u5b9a\u4e49\u51fa\u5982\u4e0b\u56db\u4e2a\u53c2\u6570\n\nrightplus:max(a+b),s'\u662fs\u7684\u4e00\u4e2a\u524d\u7f00\u4e14s\u7d27\u63a5\u5728\u4e00\u4e2a\u9ed1\u70b9\u4e4b\u540e\n\nrightminus:max(a-b),s'\u662fs\u7684\u4e00\u4e2a\u524d\u7f00\u4e14s\u7d27\u63a5\u5728\u4e00\u4e2a\u9ed1\u70b9\u4e4b\u540e\n\nleftplus:max(a+b),s'\u662fs\u7684\u4e00\u4e2a\u540e\u7f00\u4e14\u4e00\u4e2a\u9ed1\u70b9\u7d27\u63a5\u5728s\u4e4b\u540e\n\nleftminus:max(b-a),s'\u662fs\u7684\u4e00\u4e2a\u540e\u7f00\u4e14\u4e00\u4e2a\u9ed1\u70b9\u7d27\u63a5\u5728s\u4e4b\u540e\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5de6\u53f3\u4e24\u534a\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u4e00\u6574\u6bb5\u7684\u72b6\u6001\u5566\n\n\u8fd8\u662f\u8003\u8651$s(x,y),s1(a,b),s2(c,d)$\n\n$(x,y)=b<c?(a-b+c,d):(a,b-c+d)$\n\n$dis(s)=max(dis(s1),dis(s2),rightplus(s1)+leftminus(s2),rightminus(s1)+leftplus(s2))$\n\n\uff08\u628a\u56db\u4e2a\u53c2\u6570\u7684\u503c\u5e26\u5165\u4e0a\u9762\u7684\u7b49\u5f0f\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u6b63\u786e\u7684\uff09\n\n\u7136\u540e\u518d\u6765\u8003\u8651\u5982\u4f55\u6c42\u51fa\u56db\u4e2a\u53c2\u6570\u5462\uff1f\n\n$rightplus(s)=max(rightplus(s1)-c+d,rightminus(s1)+c+d,rightplus(s2))$\n\n$rightminus(s)=max(rightminus(s1)+c-d,rightminus(s2))$\n\n$leftplus(s)=max(leftplus(s2)-b+a,left_minus(s1)+b+a,leftplus(s1))$\n\n$leftminus(s)=max(leftminus(s2)+b-a,leftminus(s1))$\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5904\u7406\u6574\u4e2a\u62ec\u53f7\u7f16\u7801\u4e86\n\n\u5b9e\u9645\u5b9e\u73b0\u7684\u65f6\u5019\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u8981\u6ce8\u610f\n\n\u6211\u4eec\u4e3a\u4e86\u5b9e\u73b0\u66f4\u65b9\u4fbf\uff0c\u6700\u597d\u8fd8\u662f\u5728\u7f16\u7801\u65f6\u52a0\u5165\u62ec\u53f7\n\n\u5bf9\u4e8e\u5e95\u5c42\u7ed3\u70b9\uff0c\u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u662f\u4e00\u4e2a\u62ec\u53f7\u6216\u8005\u4e00\u4e2a\u767d\u70b9\uff0c\u90a3 \u4e48right_plus\u3001right_minus\u3001left_plus\u3001left_minus\u3001dis \u7684\u503c\u5c31\u90fd\u662f -inf\uff1b\u5982\u679c\u5bf9\u5e94\u5b57\u7b26\u662f\u4e00\u4e2a\u9ed1\u70b9\uff0c\u90a3\u4e48 right_plus\u3001right_minus\u3001left_plus\u3001left_minus \u90fd\u662f 0\uff0cdis \u662f-inf\u3002\n\n\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u53c2\u89c1\u4ee3\u7801\uff0c\u6ce8\u89e3\u6bd4\u8f83\u8be6\u7ec6\uff08\u4e3b\u8981\u662f\u56e0\u4e3a\u81ea\u5df1\u7167\u7740\u6253\u4e86\u4e00\u904d\u4e5f\u4e0d\u592a\u770b\u5f97\u61c2\u4ee3\u7801\u2026\u2026\uff09\n\n```\n// luogu-judger-enable-o2\n//minamoto\n#include<bits/stdc++.h>\n#define N 100005\n#define inf 0x3f3f3f3f\nusing namespace std;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getchar()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getchar());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nint ver[N<<1],Next[N<<1],head[N];\nint v[N*3],pos[N],c[N];\nint n,q,cnt,tot,black;\nstruct seg{\n    int l,r,l1,l2,r1,r2,c1,c2,dis;\n    void init(int x){\n        dis=-inf;\n        c1=c2=0;\n        if(v[x]==-1) c2=1;\n        if(v[x]==-2) c1=1;\n        /*c2\u4e3a\u5931\u914d\u5de6\u62ec\u53f7\uff0cc1\u4e3a\u5931\u914d\u53f3\u62ec\u53f7 \n        \u4e3a\u5de6\u62ec\u53f7\uff0cc2=1\uff1b\u4e3a\u53f3\u62ec\u53f7\uff0cc1=1*/\n        if(v[x]>0&&c[v[x]]) l1=l2=r1=r2=0;\n        else l1=l2=r1=r2=-inf;\n        /*\u4e3a\u9ed1\u70b9\uff0cl_plus,l_minus,r_plus,r_minus\u5168\u4e3a0 \n        \u4e3a\u767d\u70b9\u6216\u62ec\u53f7\uff0c\u5168\u4e3a1*/\n    }\n}a[N*12];\ninline int max(int a,int b,int c){return max(a,max(b,c));}\nvoid add(int u,int v){\n    ver[++tot]=v,Next[tot]=head[u],head[u]=tot;\n    ver[++tot]=u,Next[tot]=head[v],head[v]=tot;\n}\nvoid dfs(int u,int fa){\n    v[++cnt]=-1;\n    v[++cnt]=u;\n    pos[u]=cnt;\n    for(int i=head[u];i;i=Next[i])\n    if(ver[i]!=fa) dfs(ver[i],u);\n    v[++cnt]=-2;\n    /*\u8fdb\u5165\u52a0\u5de6\u62ec\u53f7\uff0c\u79bb\u5f00\u52a0\u53f3\u62ec\u53f7*/\n}\ninline void merge(seg &s,seg s1,seg s2){\n    /*r1=max(a+b),r2=max(a-b){s1(a,b)\u662fs\u524d\u7f00\u4e14s1\u7d27\u63a5\u5728\u4e00\u4e2a\u9ed1\u70b9\u4e4b\u540e}\n    l1=max(a+b),l2=max(b-a){s2(a,b)\u662fs\u540e\u7f00\u4e14s2\u7d27\u63a5\u5728\u4e00\u4e2a\u9ed1\u70b9\u4e4b\u524d}*/\n    int a=s1.c1,b=s1.c2,c=s2.c1,d=s2.c2;\n    s.dis=max(s1.dis,s2.dis);\n    s.dis=max(s.dis,s1.r1+s2.l2,s1.r2+s2.l1);\n    /*s.dis=max(s1.dis,s2.dis,a1+b1-a2+b2,a1-b1+a2+b2)*/ \n    b<c?(s.c1=a-b+c,s.c2=d):(s.c1=a,s.c2=b-c+d);\n    s.r1=max(s2.r1,s1.r1-c+d,s1.r2+c+d);\n    /*a+b=max(a1-b1+a2+b2,a1+b1+b2-a2)*/\n    s.r2=max(s2.r2,s1.r2+c-d);\n    /*a-b=a1-b1+a2-b2*/\n    s.l1=max(s1.l1,s2.l1-b+a,s2.l2+b+a);\n    /*\u540c62\u884c*/\n    s.l2=max(s1.l2,s2.l2+b-a);\n    /*b-a=b2-a2+b1-a1*/\n}\nvoid build(int p,int l,int r){\n    a[p].l=l,a[p].r=r;\n    if(l==r){\n        a[p].init(l);\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    merge(a[p],a[p<<1],a[p<<1|1]);\n}\nvoid modify(int p,int x){\n    int l=a[p].l,r=a[p].r;\n    if(l==r){a[p].init(l);return;}\n    int mid=(l+r)>>1;\n    if(x<=mid) modify(p<<1,x);\n    else modify(p<<1|1,x);\n    merge(a[p],a[p<<1],a[p<<1|1]);\n}\nint main(){\n    //freopen(\"testdata.in\",\"r\",stdin);\n    black=n=read();\n    for(int i=1;i<=n;++i) c[i]=1;\n    for(int i=1;i<n;++i){\n        int u=read(),v=read();\n        add(u,v);\n    }\n    dfs(1,0);\n    build(1,1,cnt);\n    q=read();\n    while(q--){\n        char s[10];\n        scanf(\"%s\",s);\n        if(s[0]=='C'){\n            int x=read();\n            if(c[x]) --black;\n            else ++black;\n            c[x]^=1;\n            modify(1,pos[x]);\n        }\n        else{\n            if(!black) puts(\"-1\");\n            else if(black==1) puts(\"0\");\n            else printf(\"%d\\n\",a[1].dis);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1532758698,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "LCT\u4e5f\u662f\u6b64\u9898\u7684\u4e00\u79cd\u505a\u6cd5\u3002     \n\u6211\u4eec\u9700\u8981\u7684\u7ef4\u62a4\u7684\u662f\u6811\u4e0a\u6700\u8fdc\u5173\u706f\u70b9\u3002      \nLCT\u662f\u4e00\u79cd\u94fe\u5206\u6cbb\uff0c\u76f8\u8f83\u4e8e\u70b9\u5206\u6cbb\u548c\u8fb9\u5206\u6cbb\uff0c\u94fe\u5206\u6cbb\u4e0d\u4ec5\u9700\u8981\u5728\u53d8\u6362\u5206\u6cbb\u4e2d\u5fc3\u7684\u65f6\u5019\u7ef4\u62a4\u7b54\u6848\uff08\u7ecf\u8fc7\u865a\u8fb9\uff09\uff0c\u5728\u4e00\u6761\u94fe\u4e2d\u4e5f\u9700\u8981\u7ef4\u62a4\u7b54\u6848\uff08\u7ecf\u8fc7Splay\u4e0a\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u5b9e\u8fb9\uff09\u3002  \n\u5bf9\u4e8e\u865a\u8fb9\uff0c\u4e5f\u5c31\u662f\u8f7b\u513f\u5b50\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u4e0b\u9762\u6700\u6df1\u7684\u5173\u706f\u70b9\uff0c\u66f4\u65b0\u7b54\u6848\u65f6\u9700\u8981\u7528\u6700\u6df1\u5173\u706f\u70b9\u548c\u53e6\u4e00\u8f7b\u513f\u5b50\u4e2d\u7684\u6700\u6df1\u5173\u706f\u70b9\u6765\u66f4\u65b0\uff0c\u53e6\u5916\u8fd8\u9700\u8981\u8003\u8651\u5f53\u524d\u70b9\u662f\u5173\u706f\u70b9\u7684\u60c5\u51b5\uff0c\u548c\u6700\u8fdc\u70b9\u5728\u8f7b\u513f\u5b50\u5b50\u6811\u4e2d\u7684\u60c5\u51b5\uff0c\u8fd9\u4e9b\u5206\u522b\u7528\u4e24\u4e2a\u5806\u6765\u5206\u522b\u8bb0\u5f55\uff0c\u5e76\u5728access\u65f6\u7ef4\u62a4\u3002  \n\u5bf9\u4e8eSplay\u4e0a\u7684\u5b9e\u8fb9\uff0c\u6211\u4eec\u6709\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff0c\u5de6\u513f\u5b50\u662f\u4e0a\u534a\u7684\u91cd\u94fe\uff0c\u53f3\u513f\u5b50\u662f\u4e0b\u534a\u91cd\u94fe\u3002\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u5de6\u513f\u5b50\u6700\u4e0b\u70b9\u5f80\u4e0a\u7684\u6700\u8fdc\u8ddd\u79bb,\u548c\u53f3\u513f\u5b50\u6700\u4e0a\u70b9\u5f80\u4e0b\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u8fd8\u6709\u5f53\u524d\u70b9\u7684\u8f7b\u513f\u5b50\u6700\u8fdc\u8ddd\u79bb3\u8005\u7684\u4efb\u610f\u4e00\u79cd\u7ed3\u5408\uff0c\u66f4\u65b0\u7b54\u6848\u3002 \u5e76\u7ee7\u7eed\u7ef4\u62a4\u5f53\u524d\u94fe\u6700\u4e0a\u70b9\u5f80\u4e0b\uff0c\u6700\u4e0b\u70b9\u5f80\u4e0a\u7684\u6700\u8fdc\u8ddd\u79bb\u3002  \n\u6ca1\u6709link\u64cd\u4f5c\u7684LCT\u53ef\u4ee5\u53ea\u7528access+splay\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u5e38\u6570\u5e76\u975e\u7279\u522b\u5927\uff0c\u751a\u81f3\u53ef\u4ee5\u8bf4\u5341\u5206\u4f18\u79c0\u3002  \n\u56e0\u4e3a\u9700\u8981\u7528\u5806\u7ef4\u62a4\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u590d\u6742\u5ea6$O(n\\log^2 n)$\n\u60f3\u4ed4\u7ec6\u4e4b\u540e\uff0c\u4ee3\u7801\u5e76\u4e0d\u96be\u5199\uff0c\u53ea\u662f\u7ec6\u8282\u5f88\u591a\u3002  \nAC Code:\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100005\n#define LL long long\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nint n;\nint info[maxn],Prev[maxn<<1],to[maxn<<1],cst[maxn<<1],cnt_e;\nvoid Node(int u,int v,int c){ Prev[++cnt_e]=info[u],info[u]=cnt_e,to[cnt_e]=v,cst[cnt_e]=c; }\nmultiset<int>path[maxn],chain[maxn];\nint Max(multiset<int>&s){ return s.empty()?-inf:*s.rbegin(); }\nint sMax(multiset<int>&s){ return s.size()<=1?-inf:*++s.rbegin(); }\n\nnamespace LCT{\n\tint ch[maxn][2],fa[maxn],val[maxn],lm[maxn],rm[maxn],mx[maxn],w[maxn],sum[maxn];\n\t#define il inline \n\t#define pa fa[x]\n\til int inr(int x){ return ch[pa][1]==x; }\n\til int isr(int x){ return ch[pa][0]!=x && ch[pa][1]!=x; }\n\til void upd(int x){\n\t\tint im = max(w[x],Max(chain[x]));\n\t\tint Um = max(im,rm[ch[x][0]]+val[x]) , Dm = max(im,lm[ch[x][1]])+val[x];\n\t\tlm[x] = max(lm[ch[x][0]],Dm+sum[ch[x][0]]);\n\t\trm[x] = max(rm[ch[x][1]],Um+sum[ch[x][1]]);\n\t\tmx[x] = max(\n\t\t\tmax(rm[ch[x][0]]+Dm,lm[ch[x][1]]+Um),\n\t\t\tmax(max(Max(path[x]),Max(chain[x])+sMax(chain[x])),\n\t\t\tmax(mx[ch[x][0]],mx[ch[x][1]])));\n\t\tif(w[x]==0) \n\t\t\tmx[x] = max(mx[x] , max(Max(chain[x]),0));\n\t\tsum[x] = sum[ch[x][0]] + sum[ch[x][1]] + val[x];\n\t}\n\til void rot(int x){\n\t\tint y = fa[x] , z = fa[y] , c = inr(x);\n\t\tif(!isr(y)) ch[z][inr(y)] = x;\n\t\t(ch[y][c]=ch[x][!c])&&(fa[ch[y][c]]=y);\n\t\tfa[fa[ch[x][!c]=y]=x]=z;\n\t\tupd(y);\n\t}\n\til void splay(int x){\n\t\tfor(;!isr(x);rot(x))\n\t\t\tif(!isr(pa)) rot(inr(pa)==inr(x)?pa:x);\n\t\tupd(x);\n\t}\n\til int access(int x,int\ty=0){\n\t\tfor(;x;x=fa[y=x]){\n\t\t\tsplay(x);\n\t\t\tif(ch[x][1]) path[x].insert(mx[ch[x][1]]),chain[x].insert(lm[ch[x][1]]);\n\t\t\tif(y) path[x].erase(path[x].find(mx[y])),chain[x].erase(chain[x].find(lm[y]));\n\t\t\tch[x][1] = y , upd(x);\n\t\t}\n\t\treturn y;\n\t}\n}\nusing namespace LCT;\nvoid dfs(int now,int ff){\n\tfa[now] = ff; \n\tfor(int i=info[now];i;i=Prev[i])\n\t\tif(to[i]!=ff){\n\t\t\tval[to[i]] = sum[to[i]] = cst[i];\n\t\t\tdfs(to[i],now);\n\t\t\tpath[now].insert(mx[to[i]]),\n\t\t\tchain[now].insert(lm[to[i]]);\n\t\t}\n\tupd(now);\n}\n\nchar cb[1<<15],*cs=cb,*ct=cb;\n#define getc() (cs==ct&&(ct=(cs=cb)+fread(cb,1,1<<15,stdin),cs==ct)?0:*cs++)\nvoid read(int &res){\n\tchar ch;bool f = 0;\n\tfor(;!isdigit(ch=getc());) if(ch=='-') f=1;\n\tfor(res=ch-'0';isdigit(ch=getc());res=res*10+ch-'0');\n\t(f) && (res = -res);\n}\n\nint main(){\n\tread(n);\n\tfor(int i=0;i<=n;i++) lm[i]=rm[i]=mx[i]=-inf;\n\tfor(int i=1,u,v;i<n;i++){\n\t\tread(u),read(v);\n\t\tNode(u,v,1),Node(v,u,1);\n\t}\n\tdfs(1,0);\n\tint ans = mx[1];\n\tint Q;read(Q);\n\tfor(char s[2];Q--;){\n\t\tfor(;!isalpha(s[0]=getc()););\n\t\tif(s[0]=='C'){\n\t\t\tint x;read(x);\n\t\t\taccess(x),splay(x);\n\t\t\tw[x]=(w[x]?0:-inf);\n\t\t\tupd(x),ans=mx[x];\n\t\t}\n\t\telse ans>=0?printf(\"%d\\n\",ans):puts(\"They have disappeared.\");\n\t}\n}\n```\n",
        "postTime": 1553605161,
        "uid": 30037,
        "name": "Freopen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "\u663e\u7136\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u70b9\u5206\u6cbb\u6765\u5b9e\u73b0\u3002\n\n\u4f46\u662f\u73b0\u5728\u6211\u4eec\u6709\u591a\u7ec4\u8be2\u95ee\uff0c\u8fd8\u5e26\u6709\u4fee\u6539\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u52a8\u6001\u70b9\u5206\u6cbb\u6765\u505a\u4e86\u3002\n\n\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u4e3b\u8981\u601d\u60f3\uff1a\u7701\u53bb\u6bcf\u6b21\u70b9\u5206\u6cbb\u6c42\u91cd\u5fc3\u7684\u8fc7\u7a0b\uff0c\u76f4\u63a5\u9884\u5904\u7406\u51fa\u6765\uff08\u56e0\u4e3a\u6811\u7684\u5f62\u6001\u4e0d\u4f1a\u6539\u53d8\uff09\uff0c\u5efa\u7acb\u70b9\u5206\u6811\u3002\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u5206\u6cbb\u65f6\u53ea\u9700\u6309\u7167\u70b9\u5206\u6811\u4e0a\u7684\u8def\u5f84\u8d70\u5c31\u662f\u4e86\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u8fd9\u4e48\u4e00\u9897\u6811\uff1a\uff08\u6837\u4f8b\uff0c1\u4e3a\u6839\uff09\uff08\u611f\u8c22\u7ed8\u56fe\u7f51\u7ad9[https://csacademy.com/app/graph_editor/](https://csacademy.com/app/graph_editor/)\uff09\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2019120709432633.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u5efa\u51fa\u6765\u7684\u70b9\u5206\u6811\u662f\u8fd9\u6837\u7684\uff1a\uff083\u4e3a\u6839\uff09\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2019120709433857.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u6ce8\u610f\uff1a\u70b9\u5206\u6811\u53ea\u662f\u628a\u5728\u539f\u6811\u4e2d\u70b9\u5206\u6cbb\u904d\u5386\u7684\u987a\u5e8f\u5efa\u4e86\u51fa\u6765\uff0c\u5982\u679c\u6c42 $dis$ \u6216 $lca$ \u8fd8\u662f\u8981\u5728\u539f\u6811\u4e2d\u6c42\uff0c\u4e0d\u80fd\u5728\u70b9\u5206\u6811\u4e0a\u6c42\uff0c\u56e0\u4e3a\u70b9\u5206\u6811\u6539\u53d8\u4e86\u539f\u6811\u5f62\u6001\u3002\u6240\u4ee5\u5982\u679c\u9898\u76ee\u7684\u8be2\u95ee\u4e0d\u662f\u9488\u5bf9\u5168\u5c40\u7684\uff0c\u800c\u662f\u5e26\u6709\u7236\u5b50\u5173\u7cfb\u6216\u6df1\u5ea6\u5173\u7cfb\u7684\uff08\u6bd4\u5982\u591a\u6b21\u8be2\u95ee\u6811\u4e2d\u8def\u5f84\u957f\u5ea6\u4e3a $k$ \u7684\u8def\u5f84\u4e2a\u6570\uff0c\u4e14\u6ee1\u8db3\u8def\u5f84\u4e2d\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6240\u6709\u70b9\u6df1\u5ea6\u9012\u589e\uff09\u5c31\u4e0d\u80fd\u5efa\u70b9\u5206\u6811\u4e86\u3002\n\n~~\u5e94\u8be5\u4e0d\u80fd\u5427\uff0c\u6bd5\u7adf\u6211\u4e5f\u5f88\u849f~~\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7ef4\u62a4\u56db\u4e2a\u5927\u6839\u5806\uff1a\n\n1. $dis1$\uff0c\u7ef4\u62a4\uff1a\u5728\u70b9\u5206\u6811\u4e2d\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6240\u6709\u706d\u706f\u7684\u8282\u70b9\u5230 $u$ \u7684 $fa$ \u7684\u8ddd\u79bb\u3002\n2. $erase1$\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u8981\u4ece $dis1$ \u4e2d\u5220\u53bb\u4e00\u4e9b\u503c\uff0c\u6240\u4ee5 $erase1$ \u7ef4\u62a4\u5728 $dis1$ \u4e2d\u8981\u5220\u53bb\u7684\u503c\u3002\n3. $dis2$\uff0c\u7ef4\u62a4\uff1a\u5728\u70b9\u5206\u6811\u4e2d $u$ \u7684\u6240\u6709\u513f\u5b50\u7684 $dis1$ \u7684\u5806\u9876\u3002\u90a3\u4e48\u5c06 $dis2$ \u7684 $top1$ \u548c $top2$ \u53d6\u51fa\u6765\uff0c\u518d\u76f8\u52a0\uff0c\u5c31\u662f\u5408\u6cd5\u7684\u7ecf\u8fc7 $u$ \u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002\n4. $erase2$\uff0c\u548c $erase1$ \u5dee\u4e0d\u591a\uff0c\u7528\u6765\u7ef4\u62a4\u5728 $dis2$ \u4e2d\u8981\u5220\u53bb\u7684\u503c\u3002\n\n\u7531\u4e8e\u5bf9\u4e8e $dis1$ \u548c $dis2$ \u90fd\u6709\u4e00\u4e2a\u5220\u9664\u5806\uff0c\u6240\u4ee5\u6211\u628a $dis1$\u3001$erase1$ \u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u79f0\u4e3a $heap1$\uff1b$dis2$\u3001$erase2$\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u79f0\u4e3a $heap2$\u3002\u90a3\u4e48\u8fd9\u4e24\u4e2a $heap$ \u90fd\u53ef\u4ee5\u5b9e\u73b0 $top1()$\u3001$top2()$\u3001$pop()$\u3001$erase()$ \u548c $size()$ \u64cd\u4f5c\u3002\n\n\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40 $heap$\uff1a$Ans$ \u5806\uff0c\u540c\u6837\u6709\u4e00\u4e2a $erase$ \u5806\u3002$Ans$\u7528\u6765\u7ef4\u62a4\u5168\u5c40 $dis2$ \u5806\u7684 $top1$ \u548c $top2$ \u4e4b\u548c\u3002\n\n\u90a3\u4e48\u5982\u679c\u8be2\u95ee\uff0c\u7b54\u6848\u5c31\u662f $Ans$ \u5806\u5806\u9876\u3002\n\n\u8003\u8651\u5982\u679c\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u53ea\u4f1a\u5bf9\u5b83\u7684\u6240\u6709\u7956\u5148\u7684 $dis1$\u3001$dis2$ \u6709\u5f71\u54cd\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8bb0\u5f55\u4e0b\u8be2\u95ee\u70b9 $Qpoint=u$\uff0c\u7136\u540e\u8ba9 $u$ \u5f80\u4e0a\u8df3\uff0c\u66f4\u65b0 $dis1$ \u548c $dis2$\u3002\n\n\u4ee3\u7801\u548c\u6ce8\u91ca\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define N 100010\n#define INF 0x7fffffff\n\nusing namespace std;\n\nstruct heap\n{\n\tpriority_queue<int>q1,q2;\n\tint size()\n\t{\n\t\treturn q1.size()-q2.size();\n\t}\n\tvoid push(int x)\n\t{\n\t\tq1.push(x);\n\t} \n\tvoid erase(int x)\n\t{\n\t\tq2.push(x);\n\t}\n\tvoid pop()\n\t{\n\t\twhile(!q2.empty()&&q1.top()==q2.top())\n\t\t\tq1.pop(),q2.pop();\n\t\tq1.pop();\n\t}\n\tint top()\n\t{\n\t\twhile(!q2.empty()&&q1.top()==q2.top())\n\t\t\tq1.pop(),q2.pop();\n\t\treturn q1.empty()?0:q1.top();\n\t}\n\tint top2()\n\t{\n\t\tif(size()<2)return 0;\n\t\tint x=top();\n\t\tpop();\n\t\tint y=top();\n\t\tpush(x);\n\t\treturn y;\n\t}\n}q,q1[N],q2[N];\n//q\u5168\u5c40\u8def\u5f84\u6700\u5927\n//q1\u8ddd\u79bb\u81ea\u5df1\u7236\u4eb2\u8ddd\u79bb\u6700\u5927\n//q2\u8ddd\u79bb\u81ea\u5df1\u8ddd\u79bb\u6700\u5927\uff08\u6bcf\u4e2a\u513f\u5b50\u4ec5\u6709\u4e00\u6761\u8def\u5f84\uff09 \n\nint n,Q,nn,root,sum;\nint cnt,head[N],nxt[N<<1],to[N<<1];\nint size[N],maxsize[N];\nint d[N],f[N][17];\nint fa[N],ans[N];\nbool vis[N],open[N];\n\nvoid adde(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\n//------------------------------------------------------------\u500d\u589e\u6c42\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\nvoid dfs(int u)\n{\n\tfor(int i=1;i<=16;i++)\n\t\tf[u][i]=f[f[u][i-1]][i-1];\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==f[u][0])\n\t\t\tcontinue;\n\t\tf[v][0]=u;\n\t\td[v]=d[u]+1;\n\t\tdfs(v);\n\t}\n}\n\nint lca(int a,int b)\n{\n\tif(d[a]<d[b])\n\t\tswap(a,b);\n\tfor(int i=16;i>=0;i--)\n\t\tif(d[f[a][i]]>=d[b])\n\t\t\ta=f[a][i];\n\tif(a==b)\n\t\treturn a;\n\tfor(int i=16;i>=0;i--)\n\t\tif(f[a][i]!=f[b][i])\n\t\t\ta=f[a][i],b=f[b][i];\n\treturn f[a][0];\n}\n\nint getdis(int a,int b)\n{\n\treturn d[a]+d[b]-2*d[lca(a,b)];\n}\n\n//------------------------------------------------------------\u5efa\u70b9\u5206\u6811\nvoid getroot(int u,int fa)\n{\n\tsize[u]=1,maxsize[u]=0;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa||vis[v])\n\t\t\tcontinue;\n\t\tgetroot(v,u);\n\t\tsize[u]+=size[v];\n\t\tmaxsize[u]=max(maxsize[u],size[v]);\n\t}\n\tmaxsize[u]=max(maxsize[u],nn-size[u]);\n\tif(maxsize[u]<maxsize[root])\n\t\troot=u;\n}\n\nvoid maketree(int u)\n{\n\tvis[u]=true;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(vis[v])\n\t\t\tcontinue;\n\t\tnn=size[v],root=0;\n\t\tgetroot(v,u);\n\t\tfa[root]=u;//\u8bb0\u5f55\u70b9\u5206\u6811\u4e2d\u7684fa\n\t\tmaketree(root);\n\t}\n}\n\n//------------------------------------------------------------\u4fee\u6539\nvoid update(int u)\n{\n\tif(open[u])\n\t{\n\t\tsum++;\n\t\tq2[u].push(0);//push(0)\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5f53\u706f\u662f\u5173\u7740\u65f6\uff0cq2[u]\u7684size\u81f3\u5c11\u4e3a1\n\t\tif(q2[u].size()==2) \n\t\t\tq.push(q2[u].top());\n\t}\n\telse\n\t{\n\t\tsum--;\n\t\tif(q2[u].size()==2) \n\t\t\tq.erase(q2[u].top());\n\t\tq2[u].erase(0);\n\t}\n\tint now=u;\n\twhile(1)\n\t{\n\t\tint dis=getdis(fa[now],u),t1;\n\t\tif(!fa[now])\n\t\t\treturn;\n\t\tif(!open[u])t1=q1[now].top(),q1[now].push(dis);//\u66f4\u65b0q1\n\t\telse q1[now].erase(dis),t1=q1[now].top();\n\t\tif(dis>t1)\n\t\t{\n\t\t\tint s1=q2[fa[now]].top()+q2[fa[now]].top2();\n\t\t\tint siz=q2[fa[now]].size();\n\t\t\tif(open[u])//\u66f4\u65b0q2\n\t\t\t{\n\t\t\t\tif(t1) \n\t\t\t\t\tq2[fa[now]].erase(t1);\n\t\t\t\tq2[fa[now]].push(dis);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tq2[fa[now]].erase(dis);\n\t\t\t\tif(t1) \n\t\t\t\t\tq2[fa[now]].push(t1);\n\t\t\t}\n\t\t\tint s2=q2[fa[now]].top()+q2[fa[now]].top2();\n\t\t\tif(s2!=s1)//\u66f4\u65b0Ans\u5806\n\t\t\t{\n\t\t\t\tif(siz>=2) \n\t\t\t\t\tq.erase(s1);\n\t\t\t\tif(q2[fa[now]].size()>=2)\n\t\t\t\t\tq.push(s2);\n\t\t\t}\n\t\t}\n\t\tnow=fa[now];\n\t}\n}\n\n//------------------------------------------------------------\u4e3b\u7a0b\u5e8f\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadde(u,v),adde(v,u);\n\t}\n\td[1]=1;\n\tdfs(1);\n\tnn=n,maxsize[0]=INF;\n\tgetroot(1,0);\n\tmaketree(root);\n\tfor(int i=1;i<=n;i++)\n\t\topen[i]=true;\n\tfor(int i=1;i<=n;i++)\n\t\tupdate(i),open[i]=false;\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tchar ch=getchar();\n\t\twhile(ch!='C'&&ch!='G')\n\t\t\tch=getchar();\n\t\tif(ch=='G')\n\t\t{\n\t\t\tif(sum>=2) printf(\"%d\\n\",q.top());\n\t\t\telse if(sum==1) puts(\"0\");\n\t\t\telse puts(\"-1\");\n\t\t}\n\t\tif(ch=='C')\n\t\t{\n\t\t\tint u;\n\t\t\tscanf(\"%d\",&u);\n\t\t\topen[u]^=1;\n\t\t\tupdate(u);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1576898788,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "[Query on a tree IV](https://www.luogu.com.cn/problem/SP2666)\u548c\u8fd9\u9898\u57fa\u672c\u662f\u4e00\u6837\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u4ea4\u4e00\u4e0b   \n\n\u9996\u5148\uff0c\u6211\u4eec\u6c42\u51fa\u6811\u7684\u91cd\u94fe\uff0c\u7136\u540e**\u5bf9\u4e8e\u6bcf\u4e00\u6761\u94fe\uff0c\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811**   \n\u6811\u5927\u6982\u957f\u8fd9\u6837\uff1a\n![](https://img-blog.csdnimg.cn/2019120708490960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VtbWEyb282,size_16,color_FFFFFF,t_70)\n\uff08\u5176\u4e2d\u7528\u7ea2\u8fb9\u8fde\u8d77\u6765\u7684\u662f\u4e00\u6761\u6761\u91cd\u94fe\uff09\n\n**\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u7ef4\u62a4**\uff1a   \n**Opt(u)\uff1a\u7ecf\u8fc7 u\u8282\u70b9\u4ee3\u8868\u7684\u94fe\u7684\u5176\u4e2d\u4e00\u6bb5 \u7684\u4e24\u4e2a\u767d\u70b9\u95f4\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6             \nMaxL(u)\uff1au\u8282\u70b9\u4ee3\u8868\u7684\u94fe\u7684\u5de6\u7aef\u70b9\u5230\u6700\u8fdc\u7684\u767d\u70b9\u7684\u8ddd\u79bb        \nMaxR(u)\uff1au\u8282\u70b9\u4ee3\u8868\u7684\u94fe\u7684\u53f3\u7aef\u70b9\u5230\u6700\u8fdc\u7684\u767d\u70b9\u7684\u8ddd\u79bb**   \n\u600e\u4e48\u7ef4\u62a4\u5462\uff1f   \n\u6211\u4eec\u518d\u5b9a\u4e49\u4e00\u4e9b\u8f85\u52a9\u53d8\u91cf\u65b9\u4fbf\u63cf\u8ff0\uff1a  \n**D(i)\uff1a\u8282\u70b9i\u5230\u6700\u8fdc\u7684\u767d\u70b9\u7684\u8ddd\u79bb  \nD2(i)\uff1a\u8282\u70b9i\u5230\u6b21\u8fdc\u7684\u767d\u70b9\u7684\u8ddd\u79bb  \nDist(x,y)\uff1a\u8282\u70b9x,y\u4e4b\u95f4\u7684\u8ddd\u79bb  \nLc\uff1a\u7ebf\u6bb5\u6811\u4e0a\u5de6\u513f\u5b50  \nRc\uff1a\u7ebf\u6bb5\u6811\u4e0a\u53f3\u513f\u5b50**  \n\u5f53 l==r \u5373\u94fe\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u65f6\uff1a                           \n**\u82e5u\u4e3a\u9ed1\u8272\uff1a                                 \nMaxL(u)=MaxR(u)=D(L)                            \nOpt(u)=D(L)+D2(L)                          \n \u82e5u\u4e3a\u767d\u8272\uff1a                                    \n MaxL(u)=MaxR(u)=Max{D(L),0}                        \nOpt(u)=Max{D(L)+D2(L),D(L)}**  \n\u7136\u540e\u8003\u8651\u5982\u4f55push_up\uff1a  \n**MaxL(u)=Max{MaxL(Lc),Dist(L,mid+1)+MaxL(Rc)}            \nMaxR(u)=Max{MaxR(Rc),Dist(mid,R)+MaxR(Lc)}               \nOpt(u)=Max{Opt(Lc),Opt(Rc),MaxR(Lc)+MaxL(Rc)+Dist(mid,mid+1)}**  \n\u8fd9\u6837\u6211\u4eec\u5c31\u7ef4\u62a4\u597d\u7ebf\u6bb5\u6811\u5566\uff0c\u63a5\u4e0b\u6765**\u8003\u8651\u600e\u4e48\u5728\u6811\u4e0a\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u989c\u8272**\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191207091459609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VtbWEyb282,size_16,color_FFFFFF,t_70)\n\u5047\u8bbe\u6211\u4eec\u8981\u4fee\u6539\u9ec4\u8272\u70b9\u7684\u989c\u8272\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u8981\u4fee\u6539\u88ab\u9ec4\u8272\u7b14\u6846\u4f4f\u7684\u8fd9\u6761\u94fe  \n\u7136\u540e\u84dd\u8272\u70b9\u80af\u5b9a\u4e5f\u88ab\u5f71\u54cd\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u4fee\u6539\u88ab\u84dd\u8272\u7b14\u6846\u4f4f\u7684\u8fd9\u6761\u94fe  \n\u518d\u63a5\u4e0b\u6765\u7eff\u8272\u70b9\u4e5f\u88ab\u5f71\u54cd\u529b\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u88ab\u7eff\u8272\u7b14\u6846\u4f4f\u7684\u8fd9\u6761\u94fe  \n\u800c\u4e0b\u9762\u5df2\u7ecf\u6ca1\u6709\u70b9\u88ab\u5f71\u54cd\u4e86\uff0c\u4fee\u6539\u7ed3\u675f  \n\u53ef\u89c1\u8981\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u4e00\u5c42\u5c42\u94fe\u8df3\u4e0a\u53bb**\u76f4\u5230**\u5f53\u524d\u7684\u94fe\u5934\u65e0\u7236\u8282\u70b9**\u4e3a\u6b62  \n\u7136\u540e\uff0c\u6211\u4eec\u8fd8\u8981\u8003\u8651\u4e00\u4e0b**\u5982\u4f55\u7ef4\u62a4D(i)\u548cD2(i)** (\u8282\u70b9\u5230\u6700\u8fdc\u548c\u6b21\u8fdc\u767d\u70b9\u7684\u8ddd\u79bb)\uff1a                                       \n\u5bf9\u6b64\uff0c\u6211\u4eec**\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806**\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u5230\u6bcf\u4e2a\u767d\u70b9\u7684\u8ddd\u79bb  \n**D(i)=s.top();  \ns.pop();  \nD2(i)=s.top();  \ns.push(D(i));**  \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51faD(i)\u548cD2(i)\u5566                             \n\u6700\u540e\uff0c**\u5728\u5168\u5c40\u7528\u4e2a\u5806\u7ef4\u62a4\u6bcf\u6761\u94fe\u7684Opt**\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u4e86         \n\u8fd9\u662fQuery on a tree IV\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int maxn=100005;\nconst int inf=1e9;\nstruct work{\n    priority_queue <int> f,g;\n    inline void ins(int v) { if(v != -inf) f.push(v); } \n    inline void era(int v) { if(v != -inf) g.push(v); }\n    inline int top() {\n        while(1){\n            if(f.empty()) return -inf;\n            if(g.empty()) return f.top();\n            if(f.top() == g.top()) f.pop(), g.pop();\n            else return f.top();\n        }\n    }\n}h[maxn], ans;\nstruct Edge{\n\tint u,v,w,next;\n}edge[maxn<<1];\nstruct seg{\n\tint l,r,v,ls,rs;\n}st[maxn<<2];\nint wn,n,m,head[maxn],cnt,col[maxn],rt[maxn],onp;\nint sz[maxn],fa[maxn],dep[maxn],son[maxn];\nint tid[maxn],ord[maxn],ind,top[maxn],len[maxn];\ninline int read() {\n    int p=0,w=1; \n\tchar ch=getchar();\n    while(ch>'9'||ch<'0') {if(ch=='-') w = -1; ch=getchar();}\n    while(ch>='0'&&ch<='9') p=p*10+ch-'0',ch=getchar();\n    return p*w;\n}\nvoid add(int u,int v,int w){\n    edge[cnt].u=u;\n    edge[cnt].v=v;\n    edge[cnt].w=w;\n    edge[cnt].next=head[u];\n    head[u]=cnt++;\n}\n#define dis(x) dep[ord[x]]\nvoid push(int u,int l,int r){\n    int ls=st[u].ls,rs=st[u].rs,mid=(l+r)>>1;\n    st[u].l=max(st[ls].l,st[rs].l+dis(mid+1)-dis(l));//MaxL(u)=Max{MaxL(Lc),Dist(L,mid+1)+MaxL(Rc)}\n    st[u].r=max(st[rs].r,st[ls].r+dis(r)-dis(mid));//MaxR(u)=Max{MaxR(Rc),Dist(mid,R)+MaxR(Lc)}\n    st[u].v=max(max(st[ls].v,st[rs].v),st[ls].r+st[rs].l+dis(mid+1)-dis(mid));\n\t//Opt(u)=Max{Opt(Lc),Opt(Rc),MaxR(Lc)+MaxL(Rc)+Dist(mid,mid+1)}\n}\nvoid build(int &u,int l,int r){\n    if(!u) u=++onp;\n    if(l==r){\n        int x=ord[l];\n        for(int i=head[x];i!=-1;i=edge[i].next){\n        \tint v=edge[i].v;\n        \tif(v==fa[x]||v==son[x]) continue;\n\t\t\th[x].ins(st[rt[v]].l+dep[v]-dep[x]);\n        }\n        int d1=h[x].top(); \n\t\th[x].era(d1); \n\t\tint d2=h[x].top(); \n\t\th[x].ins(d1);\n        st[u].l=st[u].r=max(d1,0); \n\t\tst[u].v=max(0,max(d1,d1+d2));//Opt(u)=Max{D(L)+D2(L),D(L)} \u767d\u8272 \n        return;\n    }\n    int mid =(l+r)>>1;\n    build(st[u].ls,l,mid);\n    build(st[u].rs,mid+1,r);\n    push(u,l,r);\n}\nvoid update(int u,int l,int r,int v,int s){\n\tif(l==r){\n        if(v==s){\n            int d1=h[v].top();\n\t\t\th[v].era(d1); \n\t\t\tint d2 = h[v].top(); \n\t\t\th[v].ins(d1);\n            if(col[v]) st[u].l=st[u].r=d1,st[u].v=d1+d2;//Opt=D(L)+D2(L) \u9ed1\u8272 \n            else st[u].l=st[u].r=max(d1,0),st[u].v=max(0,max(d1,d1+d2));//Opt(u)=Max{D(L)+D2(L),D(L)} \u767d\u8272 \n        }\n        else{\n            h[v].ins(st[rt[s]].l+dep[s]-dep[v]);\n            int d1 = h[v].top(); \n\t\t\th[v].era(d1);\n\t\t\tint d2 = h[v].top(); \n\t\t\th[v].ins(d1);\n            if(col[v]) st[u].l=st[u].r=d1,st[u].v=d1+d2;//Opt=D(L)+D2(L) \u9ed1\u8272 \n            else st[u].l=st[u].r=max(d1,0),st[u].v=max(0,max(d1,d1+d2));//Opt(u)=Max{D(L)+D2(L),D(L)} \u767d\u8272 \n        }\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(tid[v]<=mid) update(st[u].ls,l,mid,v,s);\n    else update(st[u].rs,mid+1,r,v,s);\n    push(u,l,r);\n}\nvoid dfs1(int u){\n    sz[u]=1;\n    for(int i=head[u];i!=-1;i=edge[i].next){\n        int v=edge[i].v;\n        int w=edge[i].w;\n        if(v==fa[u]) continue;\n        fa[v]=u; \n\t\tdep[v]=dep[u]+w;\n        dfs1(v);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[son[u]]) son[u]=v;\n    }\n}\nvoid dfs2(int u,int tp){\n    tid[u]=++ind;\n    top[u]=tp;\n    ord[ind]=u;\n    len[tp]++;\n    if(!son[u]) return;\n    dfs2(son[u],tp);\n    for(int i=head[u];i!=-1;i=edge[i].next){\n        int v=edge[i].v;\n        if(v==fa[u]||v==son[u]) continue;\n        dfs2(v,v);\n    }\n} \nint main(){\n\tios::sync_with_stdio(false);\n\tmemset(head,-1,sizeof(head));\n\twn=n=read();\n\tint u,v,w;\n\tfor(int i=1;i<n;i++){\n\t\tu=read();v=read();w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tans.ins(0);\n\tfor(int i=n;i;i--){\n        int u=ord[i]; \n\t\tif(u!=top[u]) continue; \n        build(rt[u],tid[u],tid[u]+len[u]-1);  //\u6bcf\u4e00\u6761\u94fe\u5efa\u4e00\u7ebf\u6bb5\u6811 \n        ans.ins(st[rt[u]].v);\n    }\n    m=read();\n    char ch;\n    for(int i=1;i<=m;i++){\n    \tch=getchar();\n        while(ch!='C'&&ch!='A') ch=getchar();\n    \tif(ch=='C'){\n            int x=read(); \n\t\t\tcol[x]^= 1;\n            if(col[x]==0) wn++; \n\t\t\telse wn --;\n            for(int u=x,p=u;u;u=fa[u]){\n                int tp=top[u];\n                int p1=st[rt[tp]].v,d1=st[rt[tp]].l;\n                if(fa[tp]) h[fa[tp]].era(st[rt[tp]].l+dep[tp]-dep[fa[tp]]);\n                update(rt[tp],tid[tp],tid[tp]+len[tp]-1,u,p);\n                int p2=st[rt[tp]].v,d2=st[rt[tp]].l;\n                if(p1!=p2) ans.era(p1),ans.ins(p2);\n                p=u=tp;\n            }\n        }\n        else {\n            if(wn==0) printf(\"They have disappeared.\\n\");\n            else printf(\"%d\\n\", ans.top());\n        }\n    }\n\treturn 0;\n}\n```\n[\u6349\u8ff7\u85cf](https://www.luogu.com.cn/problem/P2056)\u7684\u4ee3\u7801\u53ea\u9700\u8981\u6539\u4e00\u4e0b\u8f93\u5165\u8f93\u51fa\uff0c\u5c31\u4e0d\u8d34\u4e86",
        "postTime": 1575683273,
        "uid": 111081,
        "name": "Mistletoes",
        "ccfLevel": 0,
        "title": "[BZOJ1095][ZJOI2007]\u6349\u8ff7\u85cf & Query on a tree IV(\u6811\u94fe\u5256\u5206)"
    },
    {
        "content": "\u5165\u5751**\u52a8\u6001\u70b9\u5206\u6cbb**\u7684\u9898\u76ee\uff0c\u611f\u89c9\u8fd8\u4e0d\u9519~~\u88ab\u5361\u5e38\u540e\u91cd\u6784\u4ee3\u7801~~\n\n\u9996\u5148**\u9759\u6001\u70b9\u5206\u6cbb**\u76f8\u4fe1\u5927\u5bb6\u80af\u5b9a\u90fd\u4f1a\uff0c\u5c31\u662f\u4e0d\u65ad\u627e\u91cd\u5fc3\u7136\u540e\u66b4\u529b\u8ba1\u7b97\u6bcf\u68f5\u5b50\u6811\u5185\u7684\u8d21\u732e\u3002\n\n\u8fd9\u9898\u5982\u679c\u53ea\u6709\u5355\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u7684\u6240\u4ee5\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u627e\u4e24\u6761**\u6700\u957f**\u94fe\u62fc\u8d77\u6765\u3002\n\n\u6216\u8005\u662f\u76f4\u63a5\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u7aef\u70b9\u7684\u4e00\u6761\u94fe\u7684\u6700\u5927\u503c\u3002\n\n\u5982\u679c\u5c31\u8fd9\u4e48\u505a\u590d\u6742\u5ea6\u5c06\u8fbe\u5230$O(qn\\log n)$\uff0c\u5b8c\u5168\u65e0\u6cd5\u63a5\u53d7\u3002\n\n\u6211\u4eec\u8fd8\u662f\u8003\u8651\u5229\u7528\u4e00\u4e0b\u8fd9\u4e2a\u601d\u60f3\uff0c\u70b9\u5206\u6cbb\u7684\u4f18\u5316\u65f6\u95f4\u7684\u4e3b\u8981\u65b9\u5f0f\u5c31\u662f\u5b83\u8fd9\u68f5\u9012\u5f52\u6811**\u9ad8\u5ea6\u5747\u8861**\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u4e0a\u9762\u5b8c\u6210\u66b4\u529b\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9053\u9898\u6ca1\u6709\u52a8\u6001\u52a0\u8fb9\uff0c\u6240\u4ee5\u5176\u5b9e\u6811\u7684\u5f62\u6001\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u59cb\u65f6\u5148\u8dd1\u4e00\u8fb9\u9759\u6001\u7684\u70b9\u5206\u6cbb\uff0c\u5728\u4e0a\u9762\u8ba1\u7b97\u7b54\u6848\u7684\u540c\u65f6\u628a\u6bcf\u6b21\u7684**\u5206\u652f\u4e2d\u5fc3**\u7684\u6811\u7ed3\u6784\u5efa\u51fa\u6765\u3002\n\n\uff08\u5728\u5b9e\u9645\u9898\u76ee\u4e2d\u7531\u4e8e\u6211\u4eec\u4e00\u822c\u53ea\u662f\u66b4\u529b\u8df3\u7236\u4eb2\u8282\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u53ea\u8bb0\u5f55\u7236\u8282\u70b9\uff09\n\n\u7136\u540e\u8fd9\u4e2a\u770b\u4f3c\u66b4\u529b\u7684\u4e1c\u897f\u5176\u5b9e\u5c31\u662f\u4f20\u8bf4\u4e2d\u7684**\u70b9\u5206\u6811**\n\n\u90a3\u4e48\u52a8\u6001\u7684\u95ee\u9898\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u6bcf\u6b21\u5f00\u5173\u4e00\u76cf\u706f\u7684\u65f6\u5019\u4f1a\u5f71\u54cd\u5230\u70b9\u5206\u6811\u4e0a\u4e00\u6761\u94fe\u7684\u4fe1\u606f\u3002\u76f4\u63a5\u8df3\u5373\u53ef\u3002\n\n\u8003\u8651\u7ef4\u62a4\u7b54\u6848\uff0c\u8fd9\u4e2a\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5f00\u4e09\u4e2a**\u5927\u6839\u5806**\uff0c\u4e00\u4e2a\u7ef4\u62a4\u5b50\u6811\u5185\u6700\u957f\u94fe\uff0c\u4e00\u4e2a\u7ef4\u62a4\u5230\u7236\u8282\u70b9\u7684\u6700\u957f\u94fe\uff0c\u8fd8\u6709\u4e00\u4e2a\u7ef4\u62a4\u6240\u6709\u7684\u7b54\u6848\u3002\n\n\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u6bcf\u4e2a\u5b50\u6811\u53ea\u7528\u53d6**\u6700\u5927\u503c**\u548c**\u6b21\u5927\u503c**\u5373\u53ef\u3002\u4e0d\u8fc7\u8981\u652f\u6301\u5220\u9664\uff0c\u53ef\u4ee5\u8003\u8651\u518d\u5f00\u4e00\u4e2a\u7ef4\u62a4\u5220\u9664\u6807\u8bb0\u7684\u5806~~\u514d\u53bb\u624b\u5199\u70e6\u607c~~\u3002\n\n\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u5728DFS\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u957f\u7136\u540e\u7528**LCA**\u5dee\u5206\u7b97\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u603b\u4f53\u590d\u6742\u5ea6\u4e3a$O(n\\log^2 n)$\uff0c\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u5148\u9001\u4e0a\u6700\u65e9\u5199\u7684\u601d\u8def\u6bd4\u8f83\u6e05\u6670\u7684CODE\uff0c\u4f46\u4e00\u76f4\u88ab\u5361$90pts$\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#define RI register int\n#define Tp template <typename T>\n#define add(x,y) e[++cnt]=(edge){y,head[x]},head[x]=cnt\nusing namespace std;\nconst int N=100005,INF=1e9;\nstruct edge\n{\n    int to,nxt;\n}e[N<<1]; int head[N],n,m,rt,sonsize,mx[N],cnt,x,y,num; bool is_light[N]; char opt;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int pt[15],Ftop;\n    public:\n        Tp inline void read(T &x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n            if (!x) return (void)(pc('0'),pc('\\n')); if (x<0) pc('-'),x=-x; RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc('\\n');\n        }\n        inline void get_alpha(char &ch)\n        {\n            while (!isalpha(ch=tc()));\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef tc\n        #undef pc\n}F;\nstruct Heap\n{\n    priority_queue <int> big,del;\n    inline void push(int x)\n    {\n        big.push(x);\n    }\n    inline void erase(int x)\n    {\n        del.push(x);\n    }\n    inline int top(void)\n    {\n        while (!del.empty()&&big.top()==del.top())\n        big.pop(),del.pop(); return big.top();\n    }\n    inline int sectop(void)\n    {\n        int t=top(); pop(); int ret=top(); push(t); return ret;\n    }\n    inline void pop(void)\n    {\n        while (!del.empty()&&big.top()==del.top())\n        big.pop(),del.pop(); big.pop();\n    }\n    inline int size(void)\n    {\n        return big.size()-del.size();\n    }\n    inline bool empty(void)\n    {\n        return size()?0:1;\n    }\n}T[N],M[N],A;\nclass LCA_Solver\n{\n    private:\n        static const int P=17;\n        int anc[N][P],dep[N];\n        inline void swap(int &x,int &y)\n        {\n            int t=x; x=y; y=t;\n        }\n        inline void reset(int now)\n        {\n            for (RI i=0;i<P-1;++i) if (anc[now][i])\n            anc[now][i+1]=anc[anc[now][i]][i]; else break;\n        }\n        inline int query(int x,int y)\n        {\n            RI i; if (dep[x]<dep[y]) swap(x,y); for (i=P-1;~i;--i)\n            if (dep[anc[x][i]]>=dep[y]) x=anc[x][i]; if (x==y) return x;\n            for (i=P-1;~i;--i) if (anc[x][i]!=anc[y][i])\n            x=anc[x][i],y=anc[y][i]; return anc[x][0];\n        }\n    public:\n        #define to e[i].to\n        inline void DFS(int now,int fa)\n        {\n            dep[now]=dep[fa]+1; reset(now);\n            for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa) anc[to][0]=now,DFS(to,now);\n        }\n        #undef to\n        inline int dis(int x,int y)\n        {\n            return dep[x]+dep[y]-(dep[query(x,y)]<<1);\n        }\n}L;\ninline void insert(Heap &s)\n{\n    if (s.size()>1) A.push(s.top()+s.sectop());\n}\ninline void remove(Heap &s)\n{\n    if (s.size()>1) A.erase(s.top()+s.sectop());\n}\nclass Point_Division_Solver\n{\n    private:\n        int size[N],tofa[N]; bool vis[N];\n        inline void maxer(int &x,int y)\n        {\n            if (y>x) x=y;\n        }\n        #define to e[i].to\n        inline void travel(int now,int fa,int fart)\n        {\n            T[rt].push(L.dis(now,fart)); for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa&&!vis[to]) travel(to,now,fart);\n        }\n    public:\n        inline void getrt(int now,int fa)\n        {\n            size[now]=1; mx[now]=0; for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa&&!vis[to]) getrt(to,now),size[now]+=size[to],maxer(mx[now],size[to]);\n            if (maxer(mx[now],sonsize-size[now]),mx[now]<mx[rt]) rt=now;\n        }\n        inline void solve(int now,int fa)\n        {\n            tofa[now]=fa; vis[now]=1; M[now].push(0); travel(now,fa,fa);\n            for (RI i=head[now];i;i=e[i].nxt) if (to!=fa&&!vis[to])\n            mx[rt=0]=INF,sonsize=size[to],getrt(to,now),to=rt,solve(rt,now),M[now].push(T[to].top()); insert(M[now]);\n        }\n        #undef to\n        inline void Off(int now)\n        {\n            remove(M[now]); M[now].push(0); insert(M[now]);\n            for (RI i=now;i;i=tofa[i])\n            {\n                remove(M[tofa[i]]); if (!T[i].empty()) M[tofa[i]].erase(T[i].top());\n                T[i].push(L.dis(now,tofa[i])); if (!T[i].empty())\n                M[tofa[i]].push(T[i].top()); insert(M[tofa[i]]);\n            }\n        }\n        inline void On(int now)\n        {\n            remove(M[now]); M[now].erase(0); insert(M[now]);\n            for (RI i=now;i;i=tofa[i])\n            {\n                remove(M[tofa[i]]); if (!T[i].empty()) M[tofa[i]].erase(T[i].top());\n                T[i].erase(L.dis(now,tofa[i])); if (!T[i].empty())\n                M[tofa[i]].push(T[i].top()); insert(M[tofa[i]]);\n            }\n        }\n}S;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),num=n,i=1;i<n;++i) F.read(x),F.read(y),add(x,y),add(y,x);\n    for (sonsize=n,L.DFS(1,0),mx[rt=0]=INF,S.getrt(1,0),S.solve(rt,0),F.read(m),i=1;i<=m;++i)\n    {\n        F.get_alpha(opt); if (opt^'C') { F.write(num<=1?num-1:A.top()); continue; }\n        F.read(x); if (is_light[x]) S.Off(x),++num; else S.On(x),--num; is_light[x]^=1;\n    }\n    return F.Fend(),0;\n}\n```\n\n\u540e\u6765\u6ca1\u529e\u6cd5\u91cd\u6784\u4e86\u4ee3\u7801\uff0c\u52a0\u4e86\u4e00\u5806\u7c7b\u4f3c\u526a\u679d\u7684\u4e1c\u897f\u4e0a\u53bb\u7ec8\u4e8e\u641e\u8fc7\u53bb\u4e86\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#define RI register int\n#define Tp template <typename T>\n#define add(x,y) e[++cnt]=(edge){y,head[x]},head[x]=cnt\nusing namespace std;\nconst int N=100005,INF=1e9;\nstruct edge\n{\n    int to,nxt;\n}e[N<<1]; int head[N],n,m,rt,sonsize,mx[N],cnt,x,y,num; bool is_light[N]; char opt;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int pt[15],Ftop;\n    public:\n        Tp inline void read(T &x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n            if (!x) return (void)(pc('0'),pc('\\n')); if (x<0) pc('-'),x=-x; RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc('\\n');\n        }\n        inline void get_alpha(char &ch)\n        {\n            while (!isalpha(ch=tc()));\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef tc\n        #undef pc\n}F;\nstruct Heap\n{\n    priority_queue <int> big,del;\n    inline void push(int x)\n    {\n        big.push(x);\n    }\n    inline void erase(int x)\n    {\n        del.push(x);\n    }\n    inline int top(void)\n    {\n        while (!del.empty()&&!(big.top()^del.top()))\n        big.pop(),del.pop(); return big.empty()?0:big.top();\n    }\n    inline int get(void)\n    {\n    \tint s=size(); if (!s) return 0; if (s==1) return top();\n        int t=top(); pop(); int ret=top()+t; push(t); return ret;\n    }\n    inline void pop(void)\n    {\n        while (!del.empty()&&!(big.top()^del.top()))\n        big.pop(),del.pop(); big.pop();\n    }\n    inline int size(void)\n    {\n        return big.size()-del.size();\n    }\n}T[N],M[N],A;\nclass LCA_Solver\n{\n    private:\n        static const int P=17;\n        int anc[N][P],dep[N];\n        inline void swap(int &x,int &y)\n        {\n            int t=x; x=y; y=t;\n        }\n        inline void reset(int now)\n        {\n            for (RI i=0;i<P-1;++i) if (anc[now][i])\n            anc[now][i+1]=anc[anc[now][i]][i]; else break;\n        }\n        inline int query(int x,int y)\n        {\n            RI i; if (dep[x]<dep[y]) swap(x,y); for (i=P-1;~i;--i)\n            if (dep[anc[x][i]]>=dep[y]) x=anc[x][i]; if (x==y) return x;\n            for (i=P-1;~i;--i) if (anc[x][i]!=anc[y][i])\n            x=anc[x][i],y=anc[y][i]; return anc[x][0];\n        }\n    public:\n        #define to e[i].to\n        inline void DFS(int now,int fa)\n        {\n            dep[now]=dep[fa]+1; reset(now);\n            for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa) anc[to][0]=now,DFS(to,now);\n        }\n        #undef to\n        inline int dis(int x,int y)\n        {\n            return dep[x]+dep[y]-(dep[query(x,y)]<<1);\n        }\n}L;\nclass Point_Division_Solver\n{\n    private:\n        int size[N],tofa[N]; bool vis[N];\n        inline void maxer(int &x,int y)\n        {\n            if (y>x) x=y;\n        }\n        #define to e[i].to\n        inline void travel(int now,int fa,int fart)\n        {\n            T[rt].push(L.dis(now,fart)); for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa&&!vis[to]) travel(to,now,fart);\n        }\n    public:\n        inline void getrt(int now,int fa)\n        {\n            size[now]=1; mx[now]=0; for (RI i=head[now];i;i=e[i].nxt)\n            if (to!=fa&&!vis[to]) getrt(to,now),size[now]+=size[to],maxer(mx[now],size[to]);\n            if (maxer(mx[now],sonsize-size[now]),mx[now]<mx[rt]) rt=now;\n        }\n        inline void solve(int now,int fa)\n        {\n            tofa[now]=fa; vis[now]=1; M[now].push(0); travel(now,fa,fa);\n            for (RI i=head[now];i;i=e[i].nxt) if (to!=fa&&!vis[to])\n            mx[rt=0]=INF,sonsize=size[to],getrt(to,now),to=rt,solve(rt,now),M[now].push(T[to].top());\n            A.push(M[now].get());\n        }\n        #undef to\n        inline void Off(int now)\n        {\n            M[now].push(0); if (M[now].size()==2) A.push(M[now].top());\n            for (RI i=now;tofa[i];i=tofa[i])\n            {\n                int fa=tofa[i],D=L.dis(fa,now),temp=T[i].top();\n                T[i].push(D); if (D<=temp) continue;\n                int mx=M[fa].get(),size=M[fa].size();\n                if (temp) M[fa].erase(temp); M[fa].push(D);\n                int Mx=M[fa].get(); if (Mx>mx)\n                {\n                \tif (size>=2) A.erase(mx);\n                \tif (M[fa].size()>=2) A.push(Mx);\n                }\n            }\n        }\n        inline void On(int now)\n        {\n            if (M[now].size()==2) A.erase(M[now].top()); M[now].erase(0);\n            for (RI i=now;tofa[i];i=tofa[i])\n            {\n                int fa=tofa[i],D=L.dis(fa,now),temp=T[i].top();\n                T[i].erase(D); if (D!=temp) continue;\n                int mx=M[fa].get(),size=M[fa].size();\n                M[fa].erase(D); if (temp=T[i].top()) M[fa].push(temp);\n                int Mx=M[fa].get(); if (Mx<mx)\n                {\n                \tif (size>=2) A.erase(mx);\n                \tif (M[fa].size()>=2) A.push(Mx);\n                }\n            }\n        }\n}S;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),num=n,i=1;i<n;++i) F.read(x),F.read(y),add(x,y),add(y,x);\n    for (sonsize=n,L.DFS(1,0),mx[rt=0]=INF,S.getrt(1,0),S.solve(rt,0),F.read(m),i=1;i<=m;++i)\n    {\n        F.get_alpha(opt); if (opt^'C') { F.write(num<=1?num-1:A.top()); continue; }\n        F.read(x); if (is_light[x]) S.Off(x),++num; else S.On(x),--num; is_light[x]^=1;\n    }\n    return F.Fend(),0;\n}\n```",
        "postTime": 1546863766,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u51fa\u4e00\u68f5$N$\u4e2a\u6709\u8272(\u9ed1\u767d\uff0c\u9ed1\u8272\u5bf9\u5e94\u5173\u706f\uff0c\u767d\u8272\u5bf9\u5e94\u5f00\u706f)\u8282\u70b9\u7684\u6811\u4ee5\u53ca$M$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u6539\u53d8\u4e00\u4e2a\u8282\u70b9\u7684\u989c\u8272\u6216\u8005\u6c42\u51fa\u6811\u4e0a\u6700\u8fdc\u7684\u4e24\u4e2a\u767d\u70b9\u8ddd\u79bb\n\n----\n### \u57fa\u672c\u601d\u8def\n#### $60pts$\u505a\u6cd5\n\u8fd9\u9053\u9898\u662f\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u677f\u5b50\u9898\uff0c\u52a8\u6001\u70b9\u5206\u6cbb\u8fd8\u662f\u6bd4(shi)\u8f83(fen)\u96be\u5199\u7684\u3002\u3002\u3002  \n\u6240\u4ee5\u6211\u4eec\u5148\u6253\u4e00\u6253\u90e8\u5206\u5206\uff0c\u7784\u4e00\u773c\u6570\u636e\u8303\u56f4\uff1a  \n\u5bf9\u4e8e$\\%60$\u7684\u6570\u636e\uff0c$N\\leq3000,M\\leq10000$  \n\u8fd9\u6837\u7684\u6570\u636e\u5f88\u597d\u505a\u5427\uff0c\u6211\u4eec\u7528\u6811\u7684\u76f4\u5f84\u6765\u641e\u5c31\u597d\u4e86(\u8fd8\u53ef\u4ee5\u52a0\u4e00\u70b9\u5361\u5e38)\u3002  \n\u6c42\u6811\u7684\u76f4\u5f84\u6211\u7528\u7684\u662f\u4e24\u6b21$DFS$\uff0c\u4e0d\u8fc7\u6211\u4eec\u8981\u6539\u4e00\u70b9\u7ec6\u8282\uff1a  \n```cpp\nint id, __max, co[MAXN];\n//co\u7ef4\u62a4\u5355\u70b9\u989c\u8272\uff0c0\u8868\u793a\u9ed1\u8272\uff0c1\u8868\u793a\u767d\u8272\ninline void dfs(int u, int fa, int dis) {\n    if (dis >= __max && !co[u]) __max = dis, id = u;\n    //\u53ea\u6709\u5f53\u70b9u\u4e3a\u9ed1\u70b9\u624d\u53ef\u4ee5\u66f4\u65b0\n    for (rg int v, i = head[u]; i; i = nxt[i])\n        if ((v = ver[i]) ^ fa) dfs(v, u, dis + 1);\n}\n```\n\u8fd9\u6837\u5c31\u6539\u597d\u4e86\uff0c\u590d\u6742\u5ea6\u8fd8\u662f$O(N)$\u7684\u3002  \n\u5728\u4e3b\u51fd\u6570\u91cc\u9762\uff0c\u6211\u4eec\u52a0\u4e00\u70b9\u8fd9\u6837\u7684\u5361\u5e38\uff1a  \n\u56e0\u4e3a\u8fd9\u6837\u7684\u7b97\u6cd5\u5728\u6267\u884c\u4fee\u6539\u65f6\uff0c\u53ea\u9700$O(1)$\u4fee\u6539$co$\u6570\u7ec4\uff0c\u800c\u66f4\u65b0\u7b54\u6848\u662f$O(N)$\u7684  \n\u6240\u4ee5\u6211\u4eec\u53ea\u5728\u6bcf\u6b21\u67e5\u8be2\u65f6\u91cd\u65b0\u8dd1\u4e00\u904d$DFS$\u5e76\u4e14\u6211\u4eec\u7528\u4e00\u4e2a\u53d8\u91cf$flag$\uff0c\u8868\u793a\u6211\u4eec\u662f\u5426\u6c42\u51fa\u4e86\u6700\u65b0\u7684\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u7b97\u6709\u8fde\u7eed\u591a\u6b21\u67e5\u8be2\u6211\u4eec\u4e5f\u53ef\u4ee5\u9a6c\u4e0a\u8f93\u51fa\u7b54\u6848\u8d70\u4eba\u3002  \n#### $60pts$\u53c2\u8003\u4ee3\u7801\n```cpp\n/*--------------------------------\n  Code name: HideAndSeek.cpp\n  Author: The Ace Bee\n  This code is made by The Ace Bee\n--------------------------------*/\n#include <queue>\n#include <cstdio>\n#include <algorithm>\n#define rg register\nusing namespace std;\nconst int MAXN = 100010;\ninline int read() {\n    int s = 0; bool f = false; char c = getchar();\n    while (c < '0' || c > '9') f |= (c == '-'), c = getchar();\n    while (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c ^ 48), c = getchar();\n    return f ? -s : s;\n}\nint n, m;\nint tot, head[MAXN], nxt[MAXN << 1], ver[MAXN << 1];\ninline void Add_edge(int u, int v)\n{ nxt[++tot] = head[u], head[u] = tot, ver[tot] = v; }\nint id, __max, co[MAXN];\ninline void dfs(int u, int fa, int dis) {\n    if (dis >= __max && !co[u]) __max = dis, id = u;\n    for (rg int v, i = head[u]; i; i = nxt[i])\n        if ((v = ver[i]) ^ fa) dfs(v, u, dis + 1);\n}\nint main() {\n    n = read();\n    for (rg int u, v, i = 1; i <= n - 1; ++i)\n        u = read(), v = read(), Add_edge(u, v), Add_edge(v, u);\n    m = read(); char s[5]; bool flag = false;\n    for (rg int i = 1; i <= m; ++i) {\n        scanf(\"%s\", s);\n        if (s[0] == 'C')\n            co[read()] ^= 1, flag = false;\n\t\telse {\n            if (flag) printf(\"%d\\n\", __max);\n            else {\n                __max = 0, dfs(1, 0, 0);\n                __max = 0, dfs(id, 0, 0);\n                printf(\"%d\\n\", __max);\n                flag = true;\n            }\n        }\n    }\n    return 0;\n}\n\n```\n----\n#### $100pts$\u6b63\u89e3\n\u4e0a\u9762\u4e5f\u63d0\u5230\u4e86\uff0c\u52a8\u6001\u70b9\u5206\u6cbb\u96be\u5f97\u5199\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u6253\u4e00\u53d1\u62ec\u53f7\u5e8f\u5217\u5427\u3002  \n\u81f3\u4e8e\u5177\u4f53\u5b9e\u73b0\u7684\u8bdd\u4ee5\u53ca\u4ee3\u7801\u8bb2\u89e3\u7684\u8bdd\uff0c\u542c\u8bf4\u5927\u5bb6\u90fd\u662f\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u6240\u4ee5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86(Orz \u5c9b\u5a18\uff01\uff01\uff01)  \n\u90a3\u6211\u53ef\u5c31\u76f4\u63a5\u4e0a\u4ee3\u7801\u4e86(\u538b\u884c\u6bd2\u7624qwq)\n```cpp\n/*--------------------------------\n  Code name: HideAndSeek.cpp\n  Author: The Ace Bee\n  This code is made by The Ace Bee\n--------------------------------*/\n#include <cstdio>\n#define rg register\nconst int INF = 2e9;\nconst int MAXN = 500010;\ninline int max(int a, int b) { return a > b ? a : b ; }\ninline int read() {\n    int s = 0; bool f = false; char c = getchar();\n    while (c < '0' || c > '9') f |= (c == '-'), c = getchar();\n    while (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c ^ 48), c = getchar();\n    return f ? -s : s;\n}\nint tot, head[MAXN], nxt[MAXN << 1], ver[MAXN << 1];\ninline void Add_edge(int u, int v)\n{ nxt[++tot] = head[u], head[u] = tot, ver[tot] = v; }\nint n, m, col[MAXN];\nint black, len, s[MAXN * 3], pos[MAXN];\ninline void dfs(int u, int fa) {\n    s[++len] = -1;\n    s[++len] = u, pos[u] = len;\n    for (rg int v, i = head[u]; i; i = nxt[i])\n        if ((v = ver[i]) ^ fa) dfs(v, u);\n    s[++len] = -2;\n}\nstruct node{ int a, b, l1, l2, r1, r2, dis; }c[MAXN << 2];\ninline int lc(int rt) { return rt << 1; }\ninline int rc(int rt) { return rt << 1 | 1; }\ninline void upt(int rt, int x) {\n    c[rt].a = c[rt].b = 0;\n    c[rt].l1 = c[rt].l2 = c[rt].r1 = c[rt].r2 = c[rt].dis = -1e9;\n    if (s[x] == -1) { c[rt].b = 1; return ; }\n    if (s[x] == -2) { c[rt].a = 1; return ; }\n    if (!col[s[x]]) c[rt].l1 = c[rt].l2 = c[rt].r1 = c[rt].r2 = c[rt].dis = 0;\n}\ninline void pushup(int rt) {\n    if (c[lc(rt)].b > c[rc(rt)].a)\n        c[rt].a = c[lc(rt)].a, c[rt].b = c[lc(rt)].b - c[rc(rt)].a + c[rc(rt)].b;\n    else\n        c[rt].a = c[lc(rt)].a - c[lc(rt)].b + c[rc(rt)].a, c[rt].b = c[rc(rt)].b;\n    c[rt].l1 = max(c[lc(rt)].l1, max(c[rc(rt)].l1 + c[lc(rt)].a - c[lc(rt)].b, c[rc(rt)].l2 + c[lc(rt)].a + c[lc(rt)].b));\n    c[rt].l2 = max(c[lc(rt)].l2, c[rc(rt)].l2 - c[lc(rt)].a + c[lc(rt)].b);\n    c[rt].r1 = max(c[rc(rt)].r1, max(c[lc(rt)].r1 - c[rc(rt)].a + c[rc(rt)].b, c[lc(rt)].r2 + c[rc(rt)].a + c[rc(rt)].b));\n    c[rt].r2 = max(c[rc(rt)].r2, c[lc(rt)].r2 + c[rc(rt)].a - c[rc(rt)].b);\n    c[rt].dis = max(max(c[lc(rt)].dis, c[rc(rt)].dis), max(c[lc(rt)].r1 + c[rc(rt)].l2, c[lc(rt)].r2 + c[rc(rt)].l1));\n}\ninline void build(int rt, int l, int r) {\n    if (l == r) { upt(rt, l); return ; }\n    int mid = (l + r) >> 1;\n    build(lc(rt), l, mid), build(rc(rt), mid + 1, r);\n    pushup(rt);\n}\ninline void update(int rt, int l, int r, int id) {\n    if (l == r) { upt(rt, l); return; }\n    int mid = (l + r) >> 1;\n    if (id <= mid) update(lc(rt), l, mid, id);\n    else update(rc(rt), mid + 1, r, id);\n    pushup(rt);\n}\nint main() {\n    black = n = read();\n    for (rg int u, v, i = 1; i <= n - 1; ++i)\n        u = read(), v = read(), Add_edge(u, v), Add_edge(v, u);\n    dfs(1, 0);\n    build(1, 1, len);\n    m = read();\n    char ss[5];\n    for (rg int i = 1; i <= m; ++i) {\n        scanf(\"%s\", ss);\n        if (ss[0] == 'C') {\n            int x = read();\n            black += col[x] ? -1 : 1;\n            col[x] ^= 1, update(1, 1, len, pos[x]);\n        } else {\n            if (black == 0) puts(\"-1\");\n            else if (black == 1) puts(\"0\");\n            else printf(\"%d\\n\", c[1].dis);\t\n        }\n    }\n    return 0;\n}\n\n```\n**\u5b8c\u7ed3\u6492\u82b1$qwq$**",
        "postTime": 1563335570,
        "uid": 87839,
        "name": "Sangber",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    },
    {
        "content": "# [ZJOI 2007] \u6349\u8ff7\u85cf\n\n\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u70b9\u5206\u6cbb\uff08\u6bd2\u7624\uff09\u3002\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u6709$n$\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e00\u5f00\u59cb\u6240\u6709\u70b9\u90fd\u662f\u9ed1\u8272\u7684\uff0c\u8981\u6c42\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n+ \u66f4\u6539\u70b9\u7684\u989c\u8272\n+ \u6c42\u6240\u6709\u9ed1\u70b9\u7684\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\u5bf9\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u52a8\u6001\u70b9\u5206\u6cbb\u3002\n\n\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5806\uff0c\u8003\u8651\u76f4\u63a5\u627e\u5230\u4e0d\u5305\u62ec\u540c\u4e00\u5b50\u6811\u91cc\u7684\uff08\u56e0\u4e3a\u4e0d\u80fd\u5bb9\u65a5\uff09\u3002\u4e00\u4e2a\u70b9\u7684\u5806\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u7ba1\u7406\u7684\u8fde\u901a\u5757\u91cc\u7684\u6240\u6709\u70b9\u7684\u8ddd\u79bb\uff0c\u4f46\u8fd9\u6837\u663e\u7136\u4f1a\u6709\u540c\u4e00\u5b50\u6811\u91cc\u7684\u3002\u4e8e\u662f\u8003\u8651\u8fd9\u4e2a\u70b9\u7684\u6bcf\u4e2a\u513f\u5b50\u7ef4\u62a4\u4e00\u4e2a\u5806\uff0c\u8fd9\u4e2a\u5806\u63d2\u5165\u6240\u6709\u90a3\u4e2a\u513f\u5b50\u7684\u8fde\u901a\u5757\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\uff08\u5c31\u662f\u4e00\u4e2a\u513f\u5b50\u7ba1\u7406\u7684\u8fde\u901a\u5757\u5230\u7236\u4eb2\u7684\u8ddd\u79bb\u63d2\u5165\u5230\u90a3\u4e2a\u5806\u91cc\u9762\uff09\u3002\u90a3\uff0c\u8fd9\u4e2a\u70b9\u81ea\u5df1\u7ef4\u62a4\u7684\u5806\u7684\u503c\u5e94\u8be5\u63d2\u5165\u6240\u6709\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6837\u5fc5\u7136\u6ca1\u6709\u540c\u4e00\u5b50\u6811\u91cc\u7684\u70b9\u4e86\u3002\n\n## \u4ee3\u7801\n\n\u5947\u4e11\u65e0\u6bd4\uff0c\u63ba\u6742\u7740\u4e00\u4e9b\u6ce8\u91ca\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <iostream>\nusing namespace std;\nconst int maxNode = 1e5 + 5, maxOula = 2e5 + 5;\nint nbNode, nbQry, maxPart[maxNode], size[maxNode], up[maxNode], state[maxNode], dep[maxNode];\nint st[maxOula][19], Lg[maxOula], oula[maxNode], tail;\nbool vis[maxNode];\nvector<int> G[maxNode];\nstruct Heap {\n\tpriority_queue<int> all, rem;\n\tvoid Insert(int val) { all.push(val); }\n\tvoid Erase(int val) { rem.push(val); }\n\tint Top() {\n\t\twhile (!rem.empty() && all.top() == rem.top()) {\n\t\t\tall.pop();\n\t\t\trem.pop();\n\t\t}\n\t\treturn all.top();\n\t}\n\tvoid Pop() {\n\t\twhile (!rem.empty() && all.top() == rem.top()) {\n\t\t\tall.pop();\n\t\t\trem.pop();\n\t\t}\n\t\tall.pop();\n\t}\n\tint SecTop() {\n\t\tint tmp = Top(), ret;\n\t\tPop();\n\t\tret = Top();\n\t\tInsert(tmp);\n\t\treturn ret;\n\t}\n\tint Size() { return all.size() - rem.size(); }\n};\nHeap ans, ch[maxNode], dist[maxNode];\nvoid Dfs(int now, int from) {\n\tdep[now] = dep[from] + 1;\n\tst[++tail][0] = dep[now];\n\toula[now] = tail;\n\tfor (int to : G[now]) {\n\t\tif (to == from) continue ;\n\t\tDfs(to, now);\n\t\tst[++tail][0] = dep[now];\n\t}\n}\nvoid Build() {\n\tfor (int num = 2; num <= tail; ++num)\n\t\tLg[num] = Lg[num >> 1] + 1;\n\tfor (int lift = 1; lift <= Lg[tail]; ++lift)\n\t\tfor (int pos = 1; pos + (1 << lift) - 1 <= tail; ++pos)\n\t\t\tst[pos][lift] = min(st[pos][lift - 1], st[pos + (1 << (lift - 1))][lift - 1]);\n}\nint Lca(int uNd, int vNd) {\n\tint lEP = oula[uNd], rEP = oula[vNd];\n\tif (lEP > rEP) swap(lEP, rEP);\n    //\u8fd9\u91cc\u8981\u5148swap\u518d\u8ba1\u7b97\u4e0b\u9762\u8fd9\u4e2a\u503c\u3002\u3002\u3002\n\tint lg2 = Lg[rEP - lEP + 1];\n\treturn min(st[lEP][lg2], st[rEP - (1 << lg2) + 1][lg2]);\n}\nint Dis(int uNd, int vNd) {\n\treturn dep[uNd] + dep[vNd] - (Lca(uNd, vNd) << 1);\n}\nint GetRoot(int now, int from, int all) {\n\tsize[now] = 1;\n\tmaxPart[now] = 0;\n\tint ret = 0;\n\tfor (int to : G[now]) {\n\t\tif (vis[to] || to == from) continue ;\n\t\tint sonRoot = GetRoot(to, now, all);\n\t\tsize[now] += size[to];\n\t\tmaxPart[now] = max(maxPart[now], size[to]);\n\t\tif (maxPart[ret] > maxPart[sonRoot])\n\t\t\tret = sonRoot;\n\t}\n\tmaxPart[now] = max(maxPart[now], all - size[now]);\n\tif (maxPart[ret] > maxPart[now])\n\t\tret = now;\n\treturn ret;\n}\nvoid Divide(int now, int all) {\n\tvis[now] = 1;\n\tfor (int to : G[now]) {\n\t\tif (vis[to]) continue ;\n\t\tint sonSize = (size[to] > size[now]) ? (all - size[now]) : size[to];\n\t\tint rt = GetRoot(to, -1, sonSize);\n\t\tup[rt] = now;\n\t\tDivide(rt, sonSize);\n\t}\n}\nvoid On(int node) {\n\tbool is = node == 2;\n\tstate[node] ^= 1;\n\tif (dist[node].Size() >= 2)\n\t\tans.Erase(dist[node].Top() + dist[node].SecTop());\n\tdist[node].Insert(0);\n\tif (dist[node].Size() >= 2)\n\t\tans.Insert(dist[node].Top() + dist[node].SecTop());\n\tfor (int now = node; up[now]; now = up[now]) {\n\t\tint dis = Dis(node, up[now]);\n\t\tint nowTop = ch[now].Size() ? ch[now].Top() : -1;\n\t\tch[now].Insert(dis);\n\t\tif (nowTop != ch[now].Top()) {\n\t\t\tif (dist[up[now]].Size() >= 2)\n\t\t\t\tans.Erase(dist[up[now]].Top() + dist[up[now]].SecTop());\n\t\t\tif ((~nowTop) && dist[up[now]].Size())\n\t\t\t\tdist[up[now]].Erase(nowTop); \n\t\t\tdist[up[now]].Insert(ch[now].Top());\n\t\t\tif (dist[up[now]].Size() >= 2)\n\t\t\t\tans.Insert(dist[up[now]].Top() + dist[up[now]].SecTop());\n\t\t}\n\t}\n}\nvoid Off(int node) {\n\tstate[node] ^= 1;\n\tif (dist[node].Size() >= 2)\n\t\tans.Erase(dist[node].Top() + dist[node].SecTop());\n\tdist[node].Erase(0);\n\tif (dist[node].Size() >= 2)\n\t\tans.Insert(dist[node].Top() + dist[node].SecTop());\n\tfor (int now = node; up[now]; now = up[now]) {\n\t\tint dis = Dis(node, up[now]);\n\t\tif (ch[now].Top() == dis) {\n\t\t\tif (dist[up[now]].Size() >= 2)\n\t\t\t\tans.Erase(dist[up[now]].Top() + dist[up[now]].SecTop());\n\t\t\tdist[up[now]].Erase(ch[now].Top());\n\t\t\tch[now].Erase(dis);\n\t\t\tif (ch[now].Size())\n\t\t\t\tdist[up[now]].Insert(ch[now].Top());\n\t\t\tif (dist[up[now]].Size() >= 2)\n\t\t\t\tans.Insert(dist[up[now]].Top() + dist[up[now]].SecTop());\n\t\t}\n\t\telse ch[now].Erase(dis);\n\t}\n}\nint main() {\n\tmaxPart[0] = 0x3f3f3f3f;\n\tscanf(\"%d\", &nbNode);\n\tfor (int edge = 1; edge < nbNode; ++edge) {\n\t\tint u, v; scanf(\"%d%d\", &u, &v);\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tDivide(GetRoot(1, 0, nbNode), nbNode);\n\tDfs(1, 0);\n\tBuild();\n\tfor (int i = 1; i <= nbNode; ++i) On(i);\n\tscanf(\"%d\", &nbQry);\n\tint nowTot = nbNode, light = nbNode;\n\tint cnt = 0;\n\twhile (nbQry--) {\n\t\tchar opt;\n\t\tscanf(\"\\n%c\", &opt);\n\t\tif (opt == 'G') {\n\t\t\tif (light <= 1) printf(\"%d\\n\", light - 1);\n\t\t\telse printf(\"%d\\n\", ans.Top());\n\t\t} else {\n\t\t\tint node;\n\t\t\tscanf(\"%d\", &node);\n\t\t\tif (state[node]) Off(node);\n\t\t\telse {\n\t\t\t\tOn(node);\n\t\t\t\t++light;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## \u77e5\u8bc6\u70b9\n\n+ \u601d\u8003\u8981\u907f\u514d\u5957\u8def\u3002\u4ee5\u524d\u505a\u70b9\u5206\u6cbb\u505a\u591a\u4e86\uff0c\u5bfc\u81f4\u81ea\u5df1\u601d\u8003\u603b\u662f\u60f3\u628a\u5bf9\u4e8e\u5230\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u8def\u5f84\u90fd\u641e\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u7528\u4e2a\u7ebf\u6bb5\u6811\u4e4b\u7c7b\u7684\u4e1c\u897f\u641e\u4e00\u4e0b\u3002\u867d\u7136\u8fd9\u9053\u9898\u53ef\u80fd\u4e5f\u53ef\u4ee5\u505a\uff0c\u4f46\u662f\u9ebb\u70e6\u6b7b\u3002\u8fd8\u662f\u8981\u56de\u5f52\u539f\u672c\u6ca1\u6709\u5957\u8def\u7684\u72b6\u6001\u3002\n+ \u5bf9\u9876\u5806\u5c0f\u6280\u5de7\u3002\n+ \u4e0d\u4f1a\u505a\u4e86\u5c31\u6362\u4e2a\u65b9\u6cd5\u63cf\u8ff0\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u5c31\u4f1a\u4e86\u3002",
        "postTime": 1583686620,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[ZJOI 2007] \u6349\u8ff7\u85cf\uff08\u5806\uff0c\u52a8\u6001\u70b9\u5206\u6cbb\uff09"
    },
    {
        "content": "\u672c\u9898\u6211\u91c7\u7528\u8fb9\u5206\u6cbb\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u8bf4\u662f\u548cQTREE4\u57fa\u672c\u76f8\u540c\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u53c2\u89c1QTREE4\u7684\u9898\u89e3\uff1a[\u9898\u89e3 SP2666 \u3010QTREE4 - Query on a tree IV\u3011 - KSkun's Blog - \u6d1b\u8c37\u535a\u5ba2](https://kskun.blog.luogu.org/solution-sp2666)\n\n\u4e0b\u9762\u7684\u5185\u5bb9\u662f\u4ece\u90a3\u7bc7\u9898\u89e3\u590d\u5236\u8fc7\u6765\u7684\u3002\n\n# \u9898\u89e3\n\n\u6211\u4eec\u5728\u4e2d\u5fc3\u8fb9\u4f4d\u7f6e\u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u8868\u793a\u5de6\u8fb9\u5b50\u6811\u7684\u5404\u4e2a\u767d\u70b9\u8ddd\u79bb\uff0c\u4e00\u4e2a\u8868\u793a\u53f3\u8fb9\u5b50\u6811\u7684\u3002\u5355\u72ec\u7ef4\u62a4\u6bcf\u4e2a\u5206\u6cbb\u7ed3\u6784\u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u4e2a\u7edf\u8ba1\u6700\u5927\u503c\u7684\u65f6\u5019\u987a\u5e26\u628a\u5b50\u5206\u6cbb\u7ed3\u6784\u7684\u6700\u5927\u503c\u4e5f\u8ba1\u7b97\u8fdb\u6765\uff0c\u8fd9\u6837\u8be2\u95ee\u7684\u65f6\u5019\u53ea\u9700\u8981\u8be2\u95ee\u6839\u5206\u652f\u7ed3\u6784\u7684\u7b54\u6848\u5373\u53ef\u3002\u5728\u52a0\u70b9\u7684\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u70b9\u4f1a\u5f71\u54cd\u5230\u7684\u5806\u7684\u6570\u636e\u3002\u53d8\u767d\u8981\u628a\u8fd9\u4e2a\u70b9\u653e\u8fdb\u5806\u91cc\uff0c\u53d8\u9ed1\u53ea\u9700\u8981\u6253\u6807\u8bb0\u3002\u800c\u6bcf\u4e00\u6b21\u66f4\u65b0\u7b54\u6848\u7684\u65f6\u5019\uff0c\u4ece\u5806\u9876\u628a\u9ed1\u70b9\u5168\u6254\u6389\u5c31\u597d\u3002\u5982\u679c\u7528\u6570\u7ec4/vector\u6765\u5b58\u7684\u8bdd\uff0c\u8fd9\u4e2a\u66f4\u65b0\u8981\u6839\u636e\u5012\u5e8f\uff0c\u56e0\u6b64\u5012\u5e8f\u624d\u662f\u5206\u6cbb\u7ed3\u6784\u4ece\u5e95\u5411\u6839\u7684\u987a\u5e8f\u3002\n\n# \u4ee3\u7801\n\u53ef\u4ee5\u76f4\u63a5\u6284QTREE4\u7684\u4ee3\u7801\u3002",
        "postTime": 1521969467,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2056 \u3010[ZJOI2007]\u6349\u8ff7\u85cf \u3011"
    }
]