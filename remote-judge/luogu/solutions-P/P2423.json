[
    {
        "content": "\u76f4\u63a5\u8dd1\u65e0\u5411\u56fe\u6700\u5927\u56e2\u6d1b\u8c37\u4e0a\u80fd\u5f9770\u5206\uff0c\u60ca\u4e86\u3002\u8bf4\u8bf4\u6b63\u89e3\uff0c\u9996\u5148A\u56fd\u7684\u5fc5\u987bxor\u540emod2\u4f591\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u4eba\u5fc5\u987b\u662f1\u59471\u5076\uff0c\u6240\u4ee5A\u56fd\u7684\u4eba\u53ea\u80fd\u90090,1,2\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u9009\u8c01\u3002\u7ee7\u7eed\u8003\u8651B\u56fd\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5b9e\u9645\u4e0a\u5c31\u7b80\u5316\u4e3a\u4e86\u5728B\u56fd\u4e2d\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u56e2\uff0c\u8fd9\u4e2a\u56e2\u4e5f\u5fc5\u987b\u548cA\u56fd\u6240\u9009\u51fa\u7684\u4eba\u662f\u670b\u53cb\uff0c\u53c8\u56e0\u4e3a\u6700\u5927\u56e2=\u603b\u70b9\u6570-\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\uff0c\u8865\u56fe\u5c31\u662f\u5c06\u539f\u6765\u8fde\u7740\u7684\u8fb9\u65ad\u4e86\uff0c\u539f\u6765\u6ca1\u8fde\u7684\u8fb9\u8fde\u4e0a\uff0c\u800c\u8fdb\u4e00\u6b65\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9eB\u56fd\u7684\u8865\u56fe\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8\u70b9\u662f%2\u4f591\u7684\uff0c\u53f3\u90e8\u70b9\u662f%2\u4f590\u7684\uff0c\u5982\u679c\u5b83\u4eec\u6216\u8d77\u6765\u6709\u5076\u6570\u4e2a1\u5c31\u53ef\u4ee5\u8fde\u8fb9\uff0c\u7136\u540e\u5c31\u662f\u4e8c\u5206\u56fe\u4e2d\u6c42\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u6211\u7528\u7684\u5308\u7259\u5229\u5361\u4e86\u8fc7\u53bb\u3002\u3002\u597d\u50cf\u8fd9\u9053\u9898\u7279\u6b8a\u6570\u636e\u53ef\u4ee5\u5361\u6b7b\u5308\u7259\u5229\uff0c\u54ea\u4f4d\u5927\u4f6c\u6709\u6254\u4e00\u4e2a\u8c22\u8c22\u4e86\u3002\n\u7801\u98ce\u5e94\u8be5\u662f\u6bd4\u8f83\u6b63\u5e38\u7684\u3002\n\n\n## \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n\nusing namespace std;\nconst int MAXN = 3205;\nconst int MAXM = 1500*1500+5;\n\ninline int rd(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)) {f=ch=='-'?0:1;ch=getchar();}\n\twhile(isdigit(ch))  {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn f?x:-x;\n}\n\nint T,A,B,M,head[MAXM],cnt,ans;\nint to[MAXM],nxt[MAXM],now;\nint a[MAXN],b[MAXN],e[MAXN][MAXN];\nint num,t,vis[MAXN],flag[MAXN],match[MAXN];\n\ninline void add(int bg,int ed){\n\tto[++cnt]=ed,nxt[cnt]=head[bg],head[bg]=cnt;\n}\n\ninline bool dfs(int x){\n\tfor(register int i=head[x];i;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(vis[u]!=num && flag[u]==t){\n\t\t\tvis[u]=num;\n\t\t\tif(!match[u] || dfs(match[u])){\n\t\t\t\tmatch[u]=x;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint main(){\n\tT=rd(); \n\tA=rd();B=rd();M=rd();\n\tfor(register int i=1;i<=A;i++) a[i]=rd();\n\tfor(register int i=1;i<=B;i++) b[i]=rd();\n\tfor(register int i=1;i<=B;i++)if((b[i]&1)) //\u5efa\u8865\u56fe\u3002 \n\t\tfor(register int j=1;j<=B;j++) \n\t\t\tif(!(b[j]&1) && !((__builtin_popcount((b[i]|b[j])))&1)) add(i,j);\n\t\t\t\t//__builtin_popcount \u67e5\u8be2\u4e8c\u8fdb\u5236\u4e0b1\u7684\u4e2a\u6570\uff0c\u5077\u4e86\u4e2a\u61d2\uff0c\u8054\u8d5b\u6700\u597d\u4e0d\u8981\u7528\u5427\u3002\u3002 \n\tfor(register int i=1;i<=M;i++) {\n\t\tint x=rd(),y=rd();\n\t\te[x][y+A]=e[y+A][x]=1;\n\t}\n\tfor(register int i=1;i<=B;i++)if((b[i]&1)){  //A\u4e2d\u7684\u70b9\u90fd\u4e0d\u9009\u3002 \n\t\tnum++;\n\t\tif(dfs(i)) ans++;\n \t}ans=B-ans;  //\u6700\u5927\u56e2=\u603b\u70b9\u6570-\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \n\tfor(register int i=1;i<=A;i++){   //\u679a\u4e3eA\u4e2d\u90091\u4e2a\u70b9 \n\t\tt++;int sum=0;now=0;\n\t\tmemset(match,0,sizeof(match));\n\t\tfor(register int j=1;j<=B;j++)\n\t\t\tif(e[i][j+A]) flag[j]=t,now++; //\u8bb0\u5f55\u6709\u51e0\u4e2a\u70b9\u5728\u5b50\u56fe\u91cc \n\t\tfor(register int j=1;j<=B;j++)\n\t\t\tif(flag[j]==t && (b[j]&1)) {\n\t\t\t\tnum++;  //\u4e0dmemset,\u65f6\u95f4\u6233 \n\t\t\t\tif(dfs(j)) sum++; \n\t\t\t}\n\t\tans=max(ans,now-sum+1); //\u52a0\u4e0aA\u4e2d\u7684\u90a3\u4e2a\u70b9 \n\t}\n\tfor(register int i=1;i<=A;i++) //\u679a\u4e3eA\u4e2d\u90092\u4e2a\u70b9 \n\t\tfor(register int j=i+1;j<=A;j++)if((a[i]^a[j])&1){\n\t\t\tmemset(match,0,sizeof(match));\n\t\t\tt++;int sum=0;now=0;\n\t\t\tfor(register int k=1;k<=B;k++)\n\t\t\t\tif(e[i][k+A] && e[j][k+A]) flag[k]=t,now++;\n\t\t\tfor(register int k=1;k<=B;k++)\n\t\t\t\tif(flag[k]==t && (b[k]&1)) {\n\t\t\t\t\tnum++;\n\t\t\t\t\tif(dfs(k)) sum++;\n\t\t\t\t}\n\t\t\tans=max(ans,now-sum+2); //\u52a0\u4e0aA\u4e2d\u90a3\u4e24\u4e2a\u70b9 \n\t\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1534928447,
        "uid": 52394,
        "name": "Monster_Qi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u9898\u76ee\u8981\u6c42\u6c42\u6700\u5927\u56e2.\n\n\u6211\u4eec\u4ece\u9898\u4e2d\u7684\u6027\u8d28\u5165\u624b,\u770b\u5230\u8fd9\u4e00\u6761\n\n> B\u56fd\uff1a\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u53cb\u5584\u503c\uff0c\u5f53\u4e24\u4e2aB\u56fd\u4eba\u7684\u53cb\u5584\u503ca\u3001b\uff0c\u5982\u679ca xor b mod 2=0 \u6216\u8005 (a or b)\u5316\u6210\u4e8c\u8fdb\u5236\u6709\u5947\u6570\u4e2a1\uff0c\u90a3\u4e48\u4e24\u4e2a\u4eba\u662f\u670b\u53cb\uff0c\u5426\u5219\u4e0d\u662f\u670b\u53cb\uff1b\n\n\u663e\u7136\u53ef\u77e5,\u5728b\u56fd\u4e2d,\u53cb\u5584\u503c\u90fd\u4e3a\u5947\u6570\u7684\u4e92\u76f8\u662f\u670b\u53cb,\u90fd\u4e3a\u5076\u6570\u7684\u4e92\u76f8\u4e5f\u662f\u670b\u53cb,\u4e24\u4e2a\u4eba\u5947\u5076\u6027\u4e0d\u4e00\u6837\u7684\u8bdd\u5c31\u4e0d\u4e00\u5b9a\u662f.\n\n\u4e8e\u662f\u6309\u7167\u5947\u5076\u6027\u628ab\u56fd\u4eba\u5206\u4e3a2\u7c7b,\u6240\u4ee5\u5de6\u8fb9\u662f\u4e00\u4e2a\u56e2,\u53f3\u8fb9\u4e5f\u662f\u4e00\u4e2a\u56e2,\u4e2d\u95f4\u6709\u4e00\u4e9b\u8fb9\u76f8\u8fde.\n\n\u8fd0\u7528\u5e7f\u5927\u52b3\u52a8\u4eba\u6c11\u7684\u667a\u6167,\u6211\u4eec\u628a\u8fd9\u5f20\u56fe\u53d6\u53cd,\u5c31\u5f97\u5230\u4e86\u4e00\u5f20\u4e8c\u90e8\u56fe.\n\n\u4e8e\u662f\u6211\u4eec\u5728\u5efa\u56fe\u7684\u65f6\u5019,\u5c06b\u56fd\u4e2da\u4e0eb\u5947\u5076\u6027\u4e0d\u540c,a or b\u6709\u5076\u6570\u4e2a1\u7684\u4eba\u8fde\u8fb9.\n\n\u56e0\u4e3a\u662f\u8865\u56fe,\u6240\u4ee5\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u7b49\u4e8e\u539f\u56fe\u7684\u6700\u5927\u56e2.\n\n\u8fd9\u4e00\u70b9\u5e94\u8be5\u5f88\u597d\u7406\u89e3,\u6700\u5927\u72ec\u7acb\u96c6\u662f\u8981\u9009\u6700\u591a\u7684\u70b9\u4e92\u4e0d\u76f8\u90bb,\u53d6\u53cd\u540e\u5c31\u6210\u4e86\u8ba9\u6700\u591a\u7684\u70b9\u8054\u901a.\n\n\u7136\u540e\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e\u6700\u5927\u5339\u914d,\u8fd9\u4e2a\u8bb0\u7ed3\u8bba\u5373\u53ef.\n\n\u73b0\u5728\u8003\u8651\u8fde\u4e0aa\u56fd\u7684\u4eba,\u56e0\u4e3aa\u56fd\u7684\u6027\u8d28\u5f88\u602a,\u56e2\u4e2d\u7684\u4eba\u5fc5\u987b\u5947\u5076\u6027\u4e24\u4e24\u76f8\u53cd,\u6240\u4ee5\u4e0d\u53ef\u80fd\u67092\u4e2a\u4ee5\u4e0a\u7684\u4eba\u5728\u56e2\u4e2d,\u6240\u4ee5\u76f4\u63a5\u7206\u641c1\u4e2a\u4eba\u62162\u4e2a\u4eba\u5373\u53ef.\n\n\u6bcf\u6b21\u91cd\u65b0\u5efa\u56fe\u8dd1\u5373\u53ef.\n\n## \u4ee3\u7801\n\n```cpp\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cstring\"\n#include \"cstdlib\"\n#include \"cctype\"\n#include \"cmath\"\n#include \"algorithm\"\n#include \"set\"\n#include \"queue\"\n#include \"stack\"\n#include \"vector\"\n#include \"map\"\n#define lxl long long\n#define R register\n#define INF 0x3f3f3f3f\n#define debug(x) printf(\"debug:%lld\\n\",x)\n#define lowbit(x) (x&(-x))\nusing namespace std;\nconst lxl maxn=5010,maxm=900010,big=3010;\nlxl n,m,k,st,ed,EdgeSize,ans,sz;\nlxl a[big],b[big],top[2],st_[2][maxn],pr[big],head[maxn],cur[maxn],u[maxm],v[maxm],dis[maxm],vis[big];\nvector<lxl>v_[maxn];\nqueue<lxl>q;\nstruct _Edge\n{\n\tlxl to,next,last;\n}e[maxn*400];\ninline lxl read()\n{\n\tchar c=getchar();\n\tlxl f=1,x=0;\n\tfor(;!isdigit(c);c=getchar())(c=='-')&&(f=-1);\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n\treturn f*x;\n}\ninline bool count(lxl x)\n{\n\tbool now=false;\n\tfor(;x;x-=lowbit(x))now^=true;\n\treturn now;\n}\ninline void EdgeAdd(lxl from,lxl to,lxl flow)\n{\n\te[EdgeSize].to=to;\n\te[EdgeSize].last=flow;\n\te[EdgeSize].next=head[from];\n\thead[from]=EdgeSize++;\n}\ninline void coc(lxl u,lxl v,lxl flow)\n{\n\tEdgeAdd(u,v,flow),EdgeAdd(v,u,0);\n}\ninline bool bfs()\n{\n\tcur[st]=head[st],cur[ed]=head[ed],dis[ed]=0;\n\tfor(R int i(1);i<=sz;++i)cur[pr[i]]=head[pr[i]],dis[pr[i]]=0;\n\tdis[st]=1,q.push(st);\n\twhile(!q.empty())\n\t{\n\t\tlxl now=q.front();\n\t\tq.pop();\n\t\tfor(R int i=head[now],to,last_;~i;i=e[i].next)\n\t\t{\n\t\t\tto=e[i].to,last_=e[i].last;\n\t\t\tif(last_>=1&&(!dis[to]))\n\t\t\t{\n\t\t\t\tdis[to]=dis[now]+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[ed];\n}\nlxl dfs(lxl now,lxl flow)\n{\n\tlxl sum=0;\n\tif(now==ed||(!flow))return flow;\n\tfor(R lxl &i=cur[now],to,last_;~i;i=e[i].next)\n\t{\n\t\tto=e[i].to,last_=e[i].last;\n\t\tif(dis[to]==dis[now]+1&&last_>=1)\n\t\t{\n\t\t\tlxl f=dfs(to,min(flow-sum,last_));\n\t\t\te[i].last-=f;\n\t\t\te[i^1].last+=f;\n\t\t\tsum+=f;\n\t\t\tif(sum==flow)return sum;\n\t\t}\n\t}\n\treturn sum;\n}\ninline void dinic(lxl val)\n{\n\tlxl now=val;\n\twhile(bfs())\n\t{\n\t\tnow-=dfs(st,INF);\n\t\tif(now<=ans)return;\n\t}\n\tans=now;\n}\ninline void con()\n{\n\tEdgeSize=0,sz=0;\n\tmemset(head,-1,sizeof(head));\n\tfor(R int i(1);i<=m;++i)if(vis[i])pr[++sz]=i;\n\tfor(R int i(1);i<=u[0];++i)if(vis[u[i]]&&vis[v[i]])coc(u[i],v[i],1);\n\tfor(R int i(1);i<=top[0];++i)if(vis[st_[0][i]])coc(st,st_[0][i],1);\n\tfor(R int i(1);i<=top[1];++i)if(vis[st_[1][i]])coc(st_[1][i],ed,1);\n}\ninline void one(lxl x)\n{\n\tmemset(vis,0,sizeof(vis));\n\tfor(R int i(0);i<v_[x].size();++i)++vis[v_[x][i]];\n\tlxl p=1;\n\tfor(R int i(1);i<=m;++i)p+=vis[i];\n\tif(p<=ans)return;\n\tcon(),dinic(p);\n}\ninline void two(lxl x,lxl y)\n{\n\tmemset(vis,0,sizeof(vis));\n\tfor(R int i(0);i<v_[x].size();++i)++vis[v_[x][i]];\n\tfor(R int i(0);i<v_[y].size();++i)++vis[v_[y][i]];\n\tlxl p=2;\n\tfor(R int i(1);i<=m;++i)\n\t{\n\t\tif(vis[i]>=2)vis[i]=1;\n\t\telse vis[i]=0;\n\t\tp+=vis[i];\n\t}\n\tif(p<=ans)return;\n\tcon(),dinic(p);\n}\nint main(void)\n{\n\tmemset(head,-1,sizeof(head));\n\tn=read(),n=read(),m=read(),k=read();\n\tst=0,ed=m+1;\n\tfor(R int i(1);i<=n;++i)a[i]=read();\n\tfor(R int i(1);i<=m;++i)\n\t{\n\t\tb[i]=read();\n\t\tst_[b[i]&1][++top[b[i]&1]]=i;\n\t\tpr[++sz]=i;\n\t}\n\tfor(R int i(1);i<=top[0];++i)\n\t\tfor(R int j(1);j<=top[1];++j)\n\t\t\tif(!count(b[st_[0][i]]|b[st_[1][j]]))\n\t\t\t\tu[++u[0]]=st_[0][i],v[u[0]]=st_[1][j];\n\tfor(R int i(1);i<=u[0];++i)coc(u[i],v[i],1);\n\tfor(R int i(1);i<=top[0];++i)coc(st,st_[0][i],1);\n\tfor(R int i(1);i<=top[1];++i)coc(st_[1][i],ed,1);\n\tdinic(m);\n\tfor(R int i(1),u,v;i<=k;++i){u=read(),v=read(),v_[u].push_back(v);}\n\tfor(R int i(1);i<=n;++i)one(i);\n\tfor(R int i(1);i<=n;++i)\n\t\tfor(R int j(i+1);j<=n;++j)\n\t\t\tif((a[i]^a[j])&1)two(i,j);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1581597763,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P2423)\n\n\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u6700\u5927\u56e2\u95ee\u9898\uff0c\u4f17\u6240\u5468\u77e5\u8fd9\u662f\u4e00\u4e2a$NP$\u96be\u95ee\u9898\uff0c\u9664\u4e86\u7206\u641c\u6ca1\u6709\u4ec0\u4e48\u522b\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u56fe\u7684\u7279\u6b8a\u6027\u8d28\u5165\u624b\n\n\u6211\u4eec\u5982\u679c\u628a$B$\u56fd\u7684\u4eba\u5206\u6210\u5947\u6570\u548c\u5076\u6570\u4e24\u7c7b\uff0c\u5c31\u4f1a\u53d1\u73b0\u5947\u6570\u548c\u5076\u6570\u8fd9\u4e24\u90e8\u5206\u90fd\u662f\u4e00\u4e2a\u56e2\n\n\u800c\u4e14\u8fd9\u4e24\u90e8\u5206\u4e4b\u95f4\u6709\u4e00\u4e9b\u8fde\u8fb9\n\n\u5f88\u50cf\u4e8c\u5206\u56fe\u662f\u5427\uff0c\u5c31\u53ea\u662f\u5de6\u53f3\u4e24\u8fb9\u7684\u70b9\u4ece\u4e24\u4e24\u6ca1\u8fb9\u53d8\u6210\u4e86\u4e24\u4e24\u6709\u8fb9\n\n\u4e8e\u662f\u6211\u4eec\u53d6\u4e00\u4e2a\u8865\u56fe\uff0c\u8fd9\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u5f20\u4e8c\u5206\u56fe\n\n\u8865\u56fe\u6709\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6027\u8d28\uff0c**\u8865\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e\u539f\u56fe\u6700\u5927\u56e2**\n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\u5417\uff0c\u6700\u5927\u56e2\u8981\u6c42\u4e24\u4e24\u6709\u8fb9\uff0c\u6700\u5927\u72ec\u7acb\u96c6\u8981\u6c42\u4e24\u4e24\u6ca1\u8fb9\uff0c\u4e8e\u662f\u628a\u8fb9\u7684\u5b58\u5728\u6027\u53d6\u53cd\u4e4b\u540e\u4e24\u8005\u662f\u7b49\u4ef7\u7684\n\n\u800c\u4e8c\u5206\u56fe\u7684**\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e\u603b\u70b9\u6570-\u6700\u5c0f\u70b9\u8986\u76d6**\n\n**\u6700\u5c0f\u70b9\u8986\u76d6\u7b49\u4e8e\u6700\u5927\u5339\u914d**\n\n\u4e8e\u662f$B$\u56fd\u7684\u60c5\u51b5\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\n\n\u518d\u6765\u770b\u770b$A$\u56fd\u548c\u8de8\u56fd\u5173\u7cfb\n\n\u53d1\u73b0$A$\u56fd\u4e2d\u53ea\u80fd\u9009\u62e9$0,1,2$\u4eba\uff0c\u4e8e\u662f\u6211\u4eec\u679a\u4e3e\u5728$A$\u56fd\u91cc\u9009\u62e9\u54ea\u4e9b\u4eba\uff0c\u4e4b\u540e\u5904\u7406\u51fa$B$\u56fd\u4e2d\u7684\u548c\u8fd9\u4e9b\u4eba\u90fd\u6709\u670b\u53cb\u5173\u7cfb\u7684\u4eba\uff0c\u5bf9\u8fd9\u4e9b\u70b9\u8dd1\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u597d\u4e86\n\n\u4e4b\u540e\u5c31\u662f\u5982\u4f55\u8dd1\u6700\u5927\u5339\u914d\u7684\u95ee\u9898\u4e86\uff0c\u53d1\u73b0\u5168\u7f51\u90fd\u662f\u65f6\u95f4\u6233\u4f18\u5316\u7684\u5308\u7259\u5229\n\n\u6bd5\u7adf\u5308\u7259\u5229\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u6784\u56fe\n\n\u4f46\u662f\u6211$Dinic$\u4e0d\u670d\uff01\n\n\u53ea\u8981\u63a7\u5236\u597d\u6570\u7ec4\u7684\u5927\u5c0f\uff0c$Dinic$\u4e5f\u662f\u80fd\u8dd1\u8fc7\u53bb\u7684\n\n\u4ee3\u7801\n\n```cpp\n#include<queue>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define LL long long\n#define inf 999999999\n#define lowbit(i) ((i)&(-i))\n#define re register\n#define maxn 5005\ninline int read() {\n    int x=0;char c=getchar();while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nstd::vector<int> v[maxn];\nstd::queue<int> q;\nstruct E{int v,nxt,f;}e[2000005];\nint n,m,K,tot,ans,S,T,sz;\nint num=1,a[3005],b[3005],vis[3005],pr[3005];\nint st[2][5005],top[2];\nint head[maxn],cur[maxn],d[maxn];\nint U[900005],V[900005];\ninline void add(int x,int y,int f) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;e[num].f=f;}\ninline void C(int x,int y,int f) {add(x,y,f),add(y,x,0);}\ninline int count(int x) {\n    int now=0;\n    while(x) {now^=1,x-=lowbit(x);}\n    return now;\n}\ninline int BFS() {\n    cur[S]=head[S],d[T]=0,cur[T]=head[T];\n    for(re int i=1;i<=sz;i++) d[pr[i]]=0,cur[pr[i]]=head[pr[i]];\n    d[S]=1,q.push(S);\n    while(!q.empty()) {\n        int k=q.front();q.pop();\n        for(re int i=head[k];i;i=e[i].nxt)\n        if(e[i].f&&!d[e[i].v]) d[e[i].v]=d[k]+1,q.push(e[i].v);\n    }\n    return d[T];\n} \nint dfs(int x,int now) {\n    if(x==T||!now) return now;\n    int flow=0,ff;\n    for(re int& i=cur[x];i;i=e[i].nxt) \n    if(d[e[i].v]==d[x]+1) {\n        ff=dfs(e[i].v,min(now,e[i].f));\n        if(ff<=0) continue;\n        now-=ff,flow+=ff,e[i].f-=ff,e[i^1].f+=ff;\n        if(!now) break;\n    }\n    return flow;\n}\ninline void Dinic(int val) {\n    int now=val;\n    while(BFS()) {\n        now-=dfs(S,inf);\n        if(now<=ans) return; \n    }\n    ans=now;\n}\ninline void Connect() {\n    num=1;memset(head,0,sizeof(head));\n    sz=0;for(re int i=1;i<=m;i++) if(vis[i]) pr[++sz]=i;\n    for(re int i=1;i<=tot;i++) if(vis[U[i]]&&vis[V[i]]) C(U[i],V[i],1);\n    for(re int i=1;i<=top[0];i++) if(vis[st[0][i]]) C(S,st[0][i],1);\n    for(re int i=1;i<=top[1];i++) if(vis[st[0][i]]) C(st[1][i],T,1);\n}\ninline void make(int x) {\n    memset(vis,0,sizeof(vis));\n    for(re int i=0;i<v[x].size();i++) vis[v[x][i]]++;\n    int P=1;\n    for(re int i=1;i<=m;i++) P+=vis[i];\n    if(P<=ans) return;\n    Connect();Dinic(P);\n}\ninline void choice(int x,int y) {\n    memset(vis,0,sizeof(vis));\n    for(re int i=0;i<v[x].size();i++) vis[v[x][i]]++;\n    for(re int i=0;i<v[y].size();i++) vis[v[y][i]]++;\n    int P=2;\n    for(re int i=1;i<=m;i++) {\n        if(vis[i]<2) vis[i]=0;else vis[i]=1;\n        P+=vis[i];\n    }\n    if(P<=ans) return;\n    Connect();Dinic(P);\n}\nint main() {\n    n=read(),n=read(),m=read(),K=read();S=0,T=m+1;\n    for(re int i=1;i<=n;i++) a[i]=read();\n    for(re int i=1;i<=m;i++) {\n        b[i]=read();st[b[i]&1][++top[b[i]&1]]=i;\n    }\n    for(re int i=1;i<=m;i++) pr[++sz]=i;\n    for(re int i=1;i<=top[0];i++)\n        for(re int j=1;j<=top[1];j++)\n            if(!count(b[st[0][i]]|b[st[1][j]])) \n                U[++tot]=st[0][i],V[tot]=st[1][j];\n    for(re int i=1;i<=tot;i++) C(U[i],V[i],1);\n    for(re int i=1;i<=top[0];i++) C(S,st[0][i],1);\n    for(re int i=1;i<=top[1];i++) C(st[1][i],T,1);\n    Dinic(m);\n    for(re int x,y,i=1;i<=K;i++) x=read(),y=read(),v[x].push_back(y);\n    for(re int i=1;i<=n;i++) make(i);\n    for(re int i=1;i<=n;i++) \n    \tfor(re int j=i+1;j<=n;j++) if((a[i]^a[j])&1) choice(i,j);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1551964299,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    },
    {
        "content": "\u8003\u8651\u5230 $A$ \u56fd\u663e\u7136\u4e4b\u80fd\u9009\u81f3\u591a\u4e24\u4e2a\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u9009\u8c01\u3002\n\n~~\u4f46\u662f\u8fd9\u4e5f\u4e0d\u5e94\u8be5\u80fd\u8fc7\u3002~~\n\n\u63a5\u7740\u8003\u8651\u5bf9\u4e8e $B$ \u56fd\uff0c\u663e\u7136\u5c06\u5947\u6570\u548c\u5076\u6570\u70b9\u5206\u5728\u4e24\u4e2a\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u539f\u56fe\u4e2d\u4e24\u4e2a\u96c6\u5408\u4efb\u610f\u4e24\u70b9\u90fd\u6709\u8fb9\uff0c\u4e14\u6709\u4e00\u4e9b\u7b2c\u4e8c\u7c7b\u8fb9\u8d21\u732e\u4e86\u5f02\u5947\u5076\u7684\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u679a\u4e3e $A$ \u56fd\u4e2d\u7684\u70b9\u540e\u6211\u4eec\u73b0\u5728\u76f8\u5f53\u4e8e\u8981\u4ece $B$ \u56fd\u4e2d\u7684\u4e00\u4e2a\u70b9\u96c6\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u56e2\uff0c\u8003\u8651\u5230\u56fe\u672c\u8eab\u7684\u6027\u8d28\uff0c\u6211\u4eec\u4e0d\u59a8\u5bf9\u539f\u56fe\u5efa\u7acb\u8865\u56fe\uff0c\u663e\u7136\u96c6\u5408\u5185\u7684\u70b9\u4e92\u76f8\u90fd\u4e0d\u4f1a\u8fde\u8fb9\uff0c\u53ea\u4f1a\u6709\u5f02\u5947\u5076\u7684\u70b9\u8fde\u8fb9\uff0c\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u3002\n\n\u4f7f\u7528\u7f51\u7edc\u6d41\u5373\u53ef\uff0c\u53ea\u80fd\u8bf4\u80fd\u8fc7\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 3015 , Inf = 1e9;\n#define bpc __builtin_popcount\nint m,A,B,dep[Len],cur[Len],S,T,head[Len],cnt = 1;\nint mp[Len][Len],a[Len],b[Len],flag[Len];\nstruct node\n{\n\tint next,to,w;\n}edge[Len * Len << 1];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w;\n\thead[from] = cnt;\n}\nvoid addedge(int u,int v,int w)\n{\n\tadd(u , v , w);\n\tadd(v , u , 0);\n}\nvoid Build_Graph()//\u9075\u5faa\u5947->\u5076\u8fde\u8fb9 \n{\n\tfor(int i = 1 ; i <= B ; i ++)//\u8fd9\u91cc\u88ab\u5361\u5e38\u4e86\u518d\u6765\u641e\u2026\u2026 \n\t\tfor(int j = i + 1 ; j <= B ; j ++) \n\t\t{\n\t\t\tint u = i , v = j;\n\t\t\tif(!flag[u] || !flag[v]) continue;\n\t\t\tif((b[u] & 1) == (b[v] & 1)) continue;\n\t\t\tif(bpc(b[u] | b[v]) & 1) continue;\n\t\t\tif(!(b[u] & 1)) swap(u , v);\n\t\t\t//printf(\"???%d %d\\n\",u,v);\n\t\t\taddedge(u , v , 1);\n\t\t}\n}\nvoid memhead(){for(int i = 0 ; i <= T + 5 ; i ++) head[i] = 0;}\nbool BFS()\n{\n\tqueue<int> q;\n\tfor(int i = 1 ; i <= T ; i ++) dep[i] = 0;\n\tdep[S] = 1;q.push(S);cur[S] = head[S];\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(!dep[to] && edge[e].w)\n\t\t\t{\n\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T];\n}\nint dfs(int u,int In)\n{\n\tif(u == T) return In;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t{\n\t\tcur[u] = e;\n\t\tint to = edge[e].to;\n\t\tif(edge[e].w && dep[to] == dep[u] + 1)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res;\n\t\t}\n\t}\n\tif(!Out) return dep[u] = 0;\n\treturn Out;\n}\nint main()\n{\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"11.out\",\"w\",stdout);\n\tint TT;scanf(\"%d\",&TT);\n\twhile(TT --)\n\t{\n\t\tscanf(\"%d %d %d\",&A,&B,&m);\n\t\tfor(int i = 1 ; i <= A ; i ++) scanf(\"%d\",&a[i]);\n\t\tfor(int i = 1 ; i <= B ; i ++) scanf(\"%d\",&b[i]);\n\t\tS = B + 1 , T = S + 1;\n\t\tfor(int i = 1 ; i <= m ; i ++)\n\t\t{\n\t\t\tint u,v;scanf(\"%d %d\",&u,&v);\n\t\t\tmp[u][v] = 1;\n\t\t}\n\t\t//\u9009\u4e2a\u5565\u5440\n\t\tint ans = 0 , res = 0;\n\t\tcnt = 1;memhead();\n\t\tfor(int i = 1 ; i <= B ; i ++) \n\t\t{\n\t\t\tflag[i] = 1;\n\t\t\tif(b[i] & 1) addedge(S , i , 1);\n\t\t\telse addedge(i , T , 1);\n\t\t}\n\t\tBuild_Graph();\n\t\twhile(BFS()) res += dfs(S , Inf);\n\t\tans = max(ans , B - res);\n\t\t//puts(\"YES\");\n\t\tfor(int i = 1 ; i <= A ; i ++)\n\t\t{\t\n\t\t\tcnt = 1;res = 0;memhead();\n\t\t\t//printf(\"#%d\\n\",i);\n\t\t\tint tt = 0;\n\t\t\tfor(int j = 1 ; j <= B ; j ++) \n\t\t\t{\n\t\t\t\tif(mp[i][j]) \n\t\t\t\t{\n\t\t\t\t\ttt ++;\n\t\t\t\t\tflag[j] = 1;\n\t\t\t\t\tif(b[j] & 1) addedge(S , j , 1);\n\t\t\t\t\telse addedge(j , T , 1);\n\t\t\t\t}\n\t\t\t\telse flag[j] = 0;\n\t\t\t}\n\t\t\tBuild_Graph();\n\t\t\twhile(BFS()) res += dfs(S , Inf);\n\t\t\tans = max(ans , tt - res + 1);\n\t\t}\n\t\t//puts(\"YES\");\n\t\tfor(int i = 1 ; i <= A ; i ++)\n\t\t\tfor(int j = i + 1 ; j <= A ; j ++)\n\t\t\t{\n\t\t\t\tif((a[i] & 1) == (a[j] & 1)) continue;\n\t\t\t\tint tt = 0;\n\t\t\t\tcnt = 1;res = 0;memhead();\n\t\t\t\tfor(int k = 1 ; k <= B ; k ++)\n\t\t\t\t{\n\t\t\t\t\tif(mp[i][k] && mp[j][k]) \n\t\t\t\t\t{\n\t\t\t\t\t\tflag[k] = 1;\n\t\t\t\t\t\ttt ++;\n\t\t\t\t\t\tif(b[k] & 1) addedge(S , k , 1);\n\t\t\t\t\t\telse addedge(k , T , 1);\n\t\t\t\t\t}\n\t\t\t\t\telse flag[k] = 0;\n\t\t\t\t}\n\t\t\t\tBuild_Graph();\n\t\t\t\twhile(BFS()) res += dfs(S , Inf);\n\t\t\t\tans = max(ans , tt - res + 2);\n\t\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t\tmemset(mp , 0 , sizeof mp);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1647847961,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2423 [HEOI2012]\u670b\u53cb\u5708"
    },
    {
        "content": "\u6539\u52a8\uff1a\u6dfb\u52a0\u4e86\u6b63\u4f53\uff0c\u53bb\u9664\u4e86\u591a\u4f59\u7684\u7a7a\u683c\u3002\n\n\u8fd9\u9898\u4e8b\u5b9e\u4e0a\u8981\u6c42\u6211\u4eec\u627e\u6700\u5927\u56e2\uff08\u6700\u591a\u7684\u70b9\u4e24\u4e24\u76f8\u90bb\uff09\u3002\n\n\u6700\u5927\u56e2\u7684\u6c42\u6cd5\u662f\u6c42\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u82e5\u56fe\u4e2d\u4e24\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fb9\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u53ef\u80fd\u76f8\u90bb\u3002  \n\n\u5728\u8865\u56fe\uff0c\u8fd9\u4e24\u70b9\u6709\u8fb9\uff0c\u56e0\u4e3a\u6c42\u72ec\u7acb\u96c6\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u540c\u65f6\u9009\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0cA \u56fd\u662f\u6700\u591a\u9009\u4e24\u4e2a\u70b9\uff0c\u56e0\u4e3a\u82e5 $a\\operatorname{xor} b \\bmod 2=1$\uff0c\u4e0d\u5b58\u5728 $c\\operatorname{xor} a \\bmod 2=1$\uff0c\u4e14 $c\\operatorname{xor} b \\bmod 2=1$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u679a\u4e3e A \u56fd\u60c5\u51b5\u3002\n\n\u90a3\u4e48 B \u56fd\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5947\u5076\u6027\u628a B \u56fd\u5206\u6210\u4e8c\u90e8\u5206\u3002  \n\n\u540c\u5947\u5076\u7684\u4e00\u90e8\u5206\u4e92\u76f8\u6709\u8fb9\u3002\u5f02\u5947\u5076\u4e24\u90e8\u5206\u6309\u7167 $a\\operatorname{or} b$ \u6709\u8fb9\u3002\n\n\u90a3\u6211\u4eec\u6c42\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u60ca\u4eba\u5730\u53d1\u73b0\uff0cB \u56fd\u7adf\u7136\u5206\u6210\u4e86\u4e8c\u5206\u56fe\u3002  \n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u4e86\u3002\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u4e3a\u603b\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u3002\n\n\u7528\u7f51\u7edc\u6d41\u6c42\u53ef\u4ee5\u3002",
        "postTime": 1683892928,
        "uid": 253936,
        "name": "gaosichensb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2423"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u4e00\u5f20\u65e0\u5411\u56fe\u6709 $A,B$ \u4e24\u7c7b\u70b9\uff0c$A$ \u7c7b\u70b9\u6709\u6743\u503c $a$\uff0c$B$ \u7c7b\u70b9\u6709\u6743\u503c $b$\u3002\n\n\u82e5 $x,y \\in A$ \u4e14 $a_x \\operatorname{xor} a_y \\bmod 2 = 1$\uff0c\u5219 $x,y$ \u4e4b\u95f4\u6709\u8fb9\u3002\n  \n\u82e5 $x,y \\in B$ \u4e14 $b_x \\operatorname{xor} b_y \\bmod 2 = 0$ \u6216 $\\operatorname{count}(b_x \\operatorname{or} b_y) \\bmod 2 = 1$\uff0c\u5219 $x,y$ \u4e4b\u95f4\u6709\u8fb9\uff0c\u5176\u4e2d $\\operatorname{count}(x)$ \u8868\u793a $x$ \u5728\u4e8c\u8fdb\u5236\u4e0b $1$ \u7684\u4e2a\u6570\u3002\n\n\u53e6\u5916\u7ed9\u5b9a $m$ \u6761\u8fb9 $(x,y)$\uff0c\u4fdd\u8bc1 $x \\in A$ \u4e14 $y \\in B$\u3002\n  \n\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u56e2\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u8f6c\u6362\u4e00\u4e0b\uff0c$A$ \u8fde\u8fb9\u6761\u4ef6\u5c31\u662f\u5947\u5076\u6027\u4e0d\u540c\uff0c**\u6545 $\\rm A$ \u6700\u591a\u53ea\u80fd\u9009\u4e24\u4e2a\u3002**$B$ \u5219\u662f\u5947\u6570\u6743\u503c\u4e4b\u95f4\u6709\u8fb9\uff0c\u5076\u6570\u6743\u503c\u4e4b\u95f4\u6709\u8fb9\uff0c\u5947\u5076\u6027\u4e0d\u540c\u7684\u70b9\u4e4b\u95f4\u6709\u4e00\u4e9b\u8fb9\u3002\u6240\u4ee5 $B$ \u53ef\u4ee5\u770b\u6210\u5de6\u8fb9\u4e00\u56e2\u5076\u6570\u6743\u503c\uff0c\u53f3\u8fb9\u4e00\u56e2\u5947\u6570\u6743\u503c\uff0c\u4e2d\u95f4\u6709\u4e00\u4e9b\u8fb9\u3002\u4f17\u6240\u5468\u77e5\uff0c\u4e00\u822c\u56fe\u7684\u6700\u5927\u56e2\u95ee\u9898\u5c5e\u4e8e $\\verb!NPC!$ \u95ee\u9898\uff0c\u53ef\u662f $B$ \u7684\u56fe\u5f88\u7279\u6b8a\u3002$B$ \u7684\u8865\u56fe\u5c31\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\u6545 $B$ \u7684\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e $B$ \u7684\u6700\u5927\u56e2\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u7b49\u4e8e $n-$ \u6700\u5927\u5339\u914d\u6570\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u80fd\u505a\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff0c\u6309\u7167\u4e0a\u9762\u6211\u8bf4\u7684\u5076\u6570\u653e\u5de6\u8fb9\u4f1a\u88ab\u5361\u5e38\uff0c\u5fc5\u987b\u5947\u6570\u653e\u5de6\u8fb9\u3002\u3002\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\t#ifndef ONLINE_JUDGE\n\t#define getc getchar\n\t#endif\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline double double_read() {\n\t\tlong long ret = 0,w = 1,aft = 0,dot = 0,num = 0;\n\t\tchar ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif (ch == '-') w = -1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch) || ch == '.') {\n\t\t\tif (ch == '.') {\n\t\t\t\tdot = 1;\n\t\t\t} else if (dot == 0) {\n\t\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\t} else {\n\t\t\t\taft = (aft << 3) + (aft << 1) + ch - '0';\n\t\t\t\tnum ++;\n\t\t\t}\n\t\t\tch = getc();\n\t\t}\n\t\treturn (pow(0.1,num) * aft + ret) * w;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\n\nconst int N = 3005;\nstruct Graph {\n\tint v,nxt;\n} gra[N * N];\nint head[N],le[N],ri[N],mat[N],vis[N],ok[N];\nbool G[N][N];\nint T,a,b,c,idx,nowidx,id;\ninline int popcount(int u) {\n    u = (u & 0x55555555) + ((u >> 1) & 0x55555555);\n    u = (u & 0x33333333) + ((u >> 2) & 0x33333333);\n    u = (u & 0x0F0F0F0F) + ((u >> 4) & 0x0F0F0F0F);\n    u = (u & 0x00FF00FF) + ((u >> 8) & 0x00FF00FF);\n    u = (u & 0x0000FFFF) + ((u >> 16) & 0x0000FFFF);\n    return u;\n}\ninline void add(int u,int v) {\n\tgra[++ idx] = (Graph){v,head[u]},head[u] = idx;\n}\ninline bool dfs(int now) {\n\tfor (register int i = head[now];i;i = gra[i].nxt) {\n\t\tint v = gra[i].v;\n\t\tif (vis[v] != nowidx && ok[v] == id) {\n\t\t\tvis[v] = nowidx;\n\t\t\tif (!mat[v] || dfs(mat[v])) {\n\t\t\t\tmat[v] = now;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\ninline void init() {\n\tidx = nowidx = id = 0;\n\tmst(G,false),mst(mat,0),mst(vis,0),mst(ok,0),mst(head,0),mst(gra,0);\n}\ninline void solve() {\n\ta = read(),b = read(),c = read();\n\tfor (register int i = 1;i <= a; ++ i) le[i] = read();\n\tfor (register int i = 1;i <= b; ++ i) ri[i] = read();\n\tfor (register int i = 1;i <= b; ++ i) {\n\t\tif (ri[i] % 2 == 1) {\n\t\t\tfor (register int j = 1;j <= b; ++ j) {\n\t\t\t\tif (ri[j] % 2 == 0 && popcount(ri[i] | ri[j]) % 2 == 0) {\n\t\t\t\t\tadd(i,j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1;i <= c; ++ i) {\n\t\tint u = read(),v = read();\n\t\tG[u][v + a] = G[v + a][u] = true;\n\t}\n\tint ans = 0;\n\tfor (register int i = 1;i <= b; ++ i) {\n\t\tif (ri[i] % 2 == 1) {\n\t\t\tnowidx ++;\n\t\t\tif (dfs(i)) ans ++;\n\t\t}\n\t}\n\tans = b - ans;\n\tfor (register int i = 1;i <= a; ++ i) {\n\t\tmst(mat,0);\n\t\tid ++;\n\t\tint all = 1,cnt = 0;\n\t\tfor (register int j = 1;j <= b; ++ j) {\n\t\t\tif (G[i][j + a]) {\n\t\t\t\tok[j] = id;\n\t\t\t\tall ++;\n\t\t\t}\n\t\t}\n\t\tfor (register int j = 1;j <= b; ++ j) {\n\t\t\tif (ok[j] == id && ri[j] % 2 == 1) {\n\t\t\t\tnowidx ++;\n\t\t\t\tif (dfs(j)) cnt ++;\n\t\t\t}\n\t\t}\n\t\tans = std::max(ans,all - cnt);\n\t}\n\tfor (register int i = 1;i <= a; ++ i) {\n\t\tfor (register int j = i + 1;j <= a; ++ j) {\n\t\t\tif (le[i] % 2 != le[j] % 2) {\n\t\t\t\tmst(mat,0);\n\t\t\t\tid ++;\n\t\t\t\tint all = 2,cnt = 0;\n\t\t\t\tfor (register int k = 1;k <= b; ++ k) {\n\t\t\t\t\tif (G[i][k + a] && G[j][k + a]) {\n\t\t\t\t\t\tok[k] = id;\n\t\t\t\t\t\tall ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (register int k = 1;k <= b; ++ k) {\n\t\t\t\t\tif (ok[k] == id && ri[k] % 2 == 1) {\n\t\t\t\t\t\tnowidx ++;\n\t\t\t\t\t\tif (dfs(k)) cnt ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans = std::max(ans,all - cnt);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\nint main(void) {\n\tT = read();\n\twhile (T --) {\n\t\tinit();\n\t\tsolve();\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1656458218,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P2423 [HEOI2012]\u670b\u53cb\u5708"
    },
    {
        "content": "~~\u5148\u5410\u69fd~~\uff1a\u56e0\u4e3a\u6309\u4f4d\u5f02\u6216\u548c\u6309\u4f4d\u4e0e\u7684\u4f18\u5148\u7ea7\u8c03\u8fd9\u4e2a\u7834\u9898\u4e00\u4e0b\u5348\uff0c\u8c22\u8c22\u6709\u88ab\u6076\u5fc3\u5230\u3002\n\n\u6b64\u9898\u4e00\u770b\u5c31\u53ef\u77e5\u9053\u662f\u4e00\u4e2a\u6c42\u6700\u5927\u56e2\u7684\u95ee\u9898\uff0c\u7136\u800c\u4e00\u822c\u65e0\u5411\u56fe\u7684\u6c42\u6700\u5927\u56e2\u662f\u4e00\u4e2a$NPC$\u95ee\u9898\uff0c\u51b5\u4e14\u770b\u5230\u5176\u6570\u636e\u8303\u56f4\u5c31\u53ef\u4ee5\u5f03\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u5206\u6790\u4e00\u4e0b\u5176\u4e2d\u7684\u6027\u8d28\u3002\n\n\u5148\u770b$B$\u56fd\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u4e3a\u4e00\u4e9b\u5947\u6570\u70b9\u548c\u5076\u6570\u70b9\uff0c\u51b5\u4e14\u5176\u4e2d\u5b58\u5728\u4e00\u4e9b\u8fde\u8fb9\u3002\u662f\u4e8c\u5206\u56fe\u65e2\u89c6\u611f\u3002\u4e0d\u8fc7\u4e8c\u5206\u56fe\u662f\u4e24\u8fb9\u7684\u90e8\u70b9\u4e0d\u5b58\u5728\u8fde\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u4e00\u4e2a\u5173\u4e8e$B$\u56fd\u7684\u8865\u56fe\u3002\u540c\u65f6\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u662f\u539f\u56fe\u7684\u6700\u5927\u56e2\uff0c\u4e8e\u662f$B$\u56fd\u76f4\u63a5\u5efa\u8865\u56fe\u8dd1\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002\n\n\u518d\u770b$A$\u56fd\uff0c\u5176\u8981\u6c42\u53ef\u7406\u89e3\u4e3a\u9009\u51fa\u7684\u4eba\u8981\u6c42\u4e24\u4e24\u5947\u5076\u4e0d\u540c\uff0c\u6240\u4ee5$A$\u56fd\u53ea\u80fd\u9009\u51fa$0\u30011\u30012$\u4eba\uff0c\u518d\u770b$B$\u56fd\u4e2d\u548c\u8fd9\u51e0\u4e2a\u4eba\u6709\u5173\u7cfb\u7684\u8dd1\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u628a\u6240\u6709\u60c5\u51b5\u53d6\u4e2a$\\max$\u5373\u53ef\uff0c\u8bb0\u5f97\u6700\u5927\u72ec\u7acb\u96c6$=n-$\u6700\u5927\u5339\u914d\u6570\u3002\n\n\u7136\u540e\u4f60\u5feb\u4e50\u7684\u8fde\u8fb9\u4e4b\u540e\u4e00\u987f\u975e\u5e38\u5de8\u7684\u64cd\u4f5c\u8dd1\u5308\u7259\u5229\u5199\u5b8c\u4e86\u53d1\u73b0$T$\u4e86\u51e0\u4e2a\u70b9\u3002\uff08\u7136\u540e\u5e76\u4e0d\u4f1a$Dinic$\uff09\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u65f6\u95f4\u6233\u4f18\u5316\u5308\u7259\u5229\u3002\n\n\u5308\u7259\u5229\u4e2d\u5360\u4e86\u65f6\u95f4\u6548\u7387\u5f88\u5927\u7684\u4e00\u5757\u5c31\u662f`memset`\uff0c\u6bcf\u6b21\u90fd\u8981`memset`\u7406\u8bba\u6bcf\u6b21\u90fd\u662f$O(n)$\u7684\u6548\u7387\uff08\u5f53\u7136\u80af\u5b9a\u8981\u5c0f\u4e00\u70b9\uff09\uff0c\u90a3\u4e48\u6bcf\u5339\u914d\u4e00\u6b21\u90fd\u662f$O(n^2m)$\u7684\uff0c\u8fd9\u4e2a\u9898\u8981\u6c42\u591a\u6b21\u5339\u914d\u5c82\u4e0d\u662f\u76f4\u63a5\u6302\u4e86\u3002\n\n~~\u6240\u4ee5\u65f6\u95f4\u6233\u4f18\u5316\u51fa\u73b0\u4e86\uff01~~\u5176\u5b9e\u6839\u672c\u6ca1\u90a3\u4e48\u9ad8\u6df1\uff0c\u8bbe\u4e00\u4e2a\u65f6\u95f4\u6233\u4e3a$\\text{Clock}$\uff0c\u539f\u6765\u7684\u5e03\u5c14\u7c7b\u578b\u6570\u7ec4\u5c31\u6539\u4e3a\u6574\u6570\u7c7b\u578b\uff0c\u8f6c\u5316\u5982\u4e0b\uff1a\n\n$$\\text{vis}[v]=1\\rightarrow \\text{vis}[v]=\\text{Clock}$$\n$$\\text{vis}[v]=0\\rightarrow \\text{vis}[v]\\not=\\text{Clock}$$\n\n\u6bcf\u6b21`Clock++`\uff0c\u5373\u53ef$O(1)$\u521d\u59cb\u5316\u3002\n\n~~\u7136\u540e\u5c31\u6109\u5feb\u7684\u8dd1\u5c31\u5b8c\u4e8b\u4e86~~\u624d\u4e0d\uff0c\u8fd9\u4e2a\u6bd2\u7624\u51fa\u9898\u4eba\u5c45\u7136\u5361\u5e38\uff08\u53ef\u80fd\u53ea\u6709\u6211/kk\uff09\uff0c\u8dd1\u5308\u7259\u5229\u7684\u51fd\u6570\u91cc\u7684\u90a3\u4e2a\u5faa\u73af\u5fc5\u987b\u52a0`register`\u624d\u80fd\u8fc7\uff08\u5927\u6570\u636e\u5c45\u7136\u5feb\u4e86$\\text{200ms}$\uff09\uff0c\u5426\u5219\u5361\u7ebf$TLE$\u3002\n\n\u5176\u4ed6\u6ca1\u5565\u4e86\u3002",
        "postTime": 1596961919,
        "uid": 46420,
        "name": "Midoria7",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    },
    {
        "content": "\u4e8c\u5206\u56fe\u5339\u914d\uff01\n\n\u672c\u9898\u9996\u5148\u8981\u8003\u8651\uff0c\u7ed9\u5b9a\u7684\u9898\u76ee\u6761\u4ef6\u6240\u9690\u542b\u7684\u4fe1\u606f\u3002\u50cfA\u56fd\uff0c\u81ea\u5df1\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u6709\u4e24\u4e2aA\u56fd\u4eba\u7684\u53cb\u5584\u503c\u662f\u5947\u6570\u548c\u5076\u6570\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2aA\u56fd\u4eba\u624d\u662f\u670b\u53cb\u3002\u8003\u8651A\u56fd\u5bf9\u6574\u4e2a\u670b\u53cb\u5708\u7684\u5f71\u54cd\u3002\u5982\u679c\u4e00\u4e2a\u670b\u53cb\u5708\u4e2d\uff0c\u51fa\u73b0\u4e86\u4e09\u4e2aA\u56fd\u4eba\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e09\u4e2a\u5fc5\u987b\u662f\u670b\u53cb\uff0c\u4f46\u662f\u5f88\u663e\u7136\uff0c\u8fd9\u662f\u4e0e\u524d\u9762\u6211\u4eec\u627e\u51fa\u7684\u6761\u4ef6\u662f\u77db\u76fe\u7684\uff01\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u786e\u5b9a\u4e86A\u7684\u679a\u4e3e\u8303\u56f4\uff0c\u53ea\u80fd\u662f0\u4e2a\uff0c1\u4e2a\uff0c2\u4e2a\u3002\u6211\u4eec\u518d\u6765\u770bB\u7684\u6761\u4ef6\uff0c\u5f88\u660e\u663e\uff0c\u6761\u4ef6\u7684\u610f\u601d\u5c31\u662f\uff0c\u5f53\u4e24\u4e2aB\u56fd\u4eba\u7684\u53cb\u5584\u503c\u540c\u4e3a\u5947\u6570\u6216\u8005\u540c\u4e3a\u5076\u6570\uff0c\u4ed6\u4eec\u4e24\u4e2a\u662f\u670b\u53cb\uff0c\u6216\u8005\u4e00\u5947\u4e00\u5076\uff0c\u6709\u53ef\u80fd\u662f\u670b\u53cb\uff0c\u8fd9\u6837\u5b50\u4ed6\u4eec\u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u5f62\u6210\u4e00\u5f20\u5b8c\u5168\u56fe\u3002\u6211\u4eec\u518d\u6765\u770b\u9898\u76ee\uff0c\u9898\u76ee\u9700\u8981\u6c42\u7684\u662f\u6700\u5927\u670b\u53cb\u5708\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u6c42\u6700\u5927\u73af\u3002\n\n\u8fd9\u91cc\uff0c\u6709\u4e24\u4e2a\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff1a\n\n\u6700\u5927\u73af=\u6700\u5927\u72ec\u7acb\u96c6\n\n\u6700\u5927\u72ec\u7acb\u96c6=\u603b\u70b9\u6570-\u6700\u5927\u5339\u914d\u6570\n\n\u4e3a\u4e86\u6c42\u51fa\u6700\u5927\u73af\uff0c\u6211\u4eec\u5c31\u5f97\u6c42\u51fa\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u4e5f\u5c31\u5fc5\u987b\u8981\u6c42\u51fa\u6700\u5927\u5339\u914d\u6570\uff0c\u53ef\u662f\u6700\u5927\u5339\u914d\u6570\u662f\u5728\u4e8c\u5206\u56fe\u624d\u6709\u7684\uff0c\u90a3\u600e\u4e48\u5904\u7406\uff1f\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u7528\u5efa\u7acb\u8865\u56fe\u7684\u65b9\u6cd5\u6765\u6784\u9020\u4e8c\u5206\u56fe\uff0c\u4ece\u800c\u6c42\u51fa\u7b54\u6848\u3002",
        "postTime": 1525172103,
        "uid": 31470,
        "name": "B_K201",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    },
    {
        "content": "\u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u6709\u4e24\u4e2a\u56fd\u5bb6A\u548cB\u3002\u5b58\u5728\u4ee5\u4e0b\u670b\u53cb\u5173\u7cfb\uff1a\n\n1.A\u56fd\uff1a\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u53cb\u5584\u503c\uff0c\u5f53\u4e24\u4e2aA\u56fd\u4eba\u7684\u53cb\u5584\u503ca\u3001b\uff0c\u5982\u679ca xor b mod 2=1\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u4eba\u90fd\u662f\u670b\u53cb\uff0c\u5426\u5219\u4e0d\u662f\uff1b\n2.B\u56fd\uff1a\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u53cb\u5584\u503c\uff0c\u5f53\u4e24\u4e2aB\u56fd\u4eba\u7684\u53cb\u5584\u503ca\u3001b\uff0c\u5982\u679ca xor b mod 2=0\n\u6216\u8005 (a or b)\u5316\u6210\u4e8c\u8fdb\u5236\u6709\u5947\u6570\u4e2a1\uff0c\u90a3\u4e48\u4e24\u4e2a\u4eba\u662f\u670b\u53cb\uff0c\u5426\u5219\u4e0d\u662f\u670b\u53cb\uff1b\n3.A\u3001B\u4e24\u56fd\u4e4b\u95f4\u7684\u4eba\u4e5f\u6709\u53ef\u80fd\u662f\u670b\u53cb\uff0c\u6570\u636e\u4e2d\u5c06\u4f1a\u7ed9\u51faA\u3001B\u4e4b\u95f4\u201c\u670b\u53cb\u201d\u7684\u60c5\u51b5\u3002\n4.\u5728AB\u4e24\u56fd\uff0c\u670b\u53cb\u5708\u7684\u5b9a\u4e49\uff1a\u4e00\u4e2a\u670b\u53cb\u5708\u96c6\u5408S\uff0c\u6ee1\u8db3S\u2208A\u222aB\uff0c\u5bf9\u4e8e\u6240\u6709\u7684i\uff0cj\u2208S\uff0ci\u548cj\u662f\u670b\u53cb\u3002\n\u6c42\u6700\u5927\u7684\u670b\u53cb\u5708\u7684\u4eba\u6570\u3002\n \n\u3010\u601d\u8def\u3011\n\u8fd9\u9053\u9898\u6c42\u7684\u662f\u6700\u5927\u56e2\u3002\u9996\u5148\u5c06\u9898\u76ee\u5927\u610f\u7ffb\u8bd1\u4e00\u4e0b\uff1a\n1.A\u56fd\u4e4b\u95f4\uff0c\u53cb\u5584\u503c\u4e3a\u4e00\u5947\u4e00\u5076\u7684\u4e3a\u670b\u53cb\uff1bB\u56fd\u4e4b\u95f4\uff0c\u53cb\u5584\u503c\u540c\u5947\u5076\u6027\u6216\u6709\uff08a or b\uff09\u4e8c\u8fdb\u5236\u6709\u5947\u6570\u4e2a1\u7684\u4e3a\u670b\u53cb\uff08\u540e\u9762\u4e00\u4e2a\u6761\u4ef6\u771f\u6ca1\u529e\u6cd5\u7ffb\u8bd1\uff0c\u5230\u65f6\u5019\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\uff09\u3002\u4e24\u4e2a\u4e4b\u95f4\u7684\u76f4\u63a5\u8f93\u5165\u3002\n2.\u663e\u7136A\u56fd\u81f3\u591a\u53d6\u51fa\u4e24\u4e2a\u4eba\u3002\u4e5f\u5c31\u662f\u7531\u4e09\u79cd\u60c5\u51b5\uff1a\u53d60\u4e2a\u4eba\u3001\u53d61\u4e2a\u4eba\u3001\u53d62\u4e2a\u4eba\u3002\n3.\u90a3\u4e48\u6211\u4eec\u5c31\u679a\u4e3e\u4eceA\u56fd\u53d6\u51fa\u6765\u7684\u4eba\uff0c\u7136\u540e\u518dB\u4e2d\u5220\u53bb\u4e0e\u90a3\u4e24\u4e2a\u4eba\u4e0d\u662f\u670b\u53cb\u7684\u6210\u5458\u2460\uff0c\u5219\u53ea\u9700\u8981\u5355\u72ec\u8003\u8651B\u4e2d\u7684\u60c5\u51b5\u5566\uff01\n4.\u6700\u5927\u56e2\u663e\u7136\u662f\u6ca1\u6709\u529e\u6cd5\u505a\u7684\uff0c\u4e0d\u59a8\u5bf9B\u96c6\u5408\u53d6\u4e2a\u53cd\u56fe\uff0c\u4e5f\u5c31\u662f\u539f\u6765\u6ca1\u6709\u8fb9\u7684\u73b0\u5728\u8fde\u4e0a\uff0c\u539f\u6765\u6709\u7684\u73b0\u5728\u4e0d\u8fde\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u540c\u5947\u540c\u5076\u95f4\u4e0d\u8fde\u8fb9\uff0c\u5947\u5076\u4e4b\u95f4\u5982\u679c\u6ee1\u8db3(a or b)\u5316\u6210\u4e8c\u8fdb\u5236\u6709\u5076\u6570\u4e2a1\u5c31\u8fde\u8fb9\u3002\u663e\u7136\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff01\u8fd9\u6837\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u3002\u6700\u5927\u70b9\u72ec\u7acb\u96c6=\u603b\u6570-\u4e8c\u5206\u56fe\u5339\u914d\u3002\n \n\u3010\u4f18\u5316\u3011\n\u76f4\u63a5\u8dd1Hungary\u662f\u8fc7\u4e0d\u53bb\u7684\u3002\u95ee\u9898\u5728\u54ea\u91cc\u5462\uff1f\u56e0\u4e3a\u4e00\u76f4memset\u592a\u632b\u4e86\uff01\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u7528\u5230\u65f6\u949fT1\u3001T2\u548ctim\u3001vis\u4e24\u4e2a\u6570\u7ec4\u3002\u8fd8\u6709\u601d\u8def\u2460\u5904\u7684ban\u6570\u7ec4\u4e5f\u6ce8\u610f\u4e00\u4e0b\u3002\n\u5230\u5e95\u4ec0\u4e48\u662f\u65f6\u95f4\u6233\u5462\uff1f\u597d\u50cf\u5e76\u6ca1\u6709\u4eba\u89e3\u91ca\u3002\u5f04\u4e86\u4e00\u5929\u5927\u81f4\u5f04\u51fa\u4e86\u4e00\u4e2a\u6bd4\u8f83\u6e05\u6670\u7684\u89e3\u91ca\uff1a\n\u4e00\u822c\u6765\u8bf4\u5308\u7259\u5229\u7b97\u6cd5\u662f\u8fd9\u6837\u5f04\u5f97\u3002\u6bcf\u6b21\u5308\u7259\u5229\u7b97\u6cd5\u524d\u5c06lk\u6570\u7ec4\u6e05\u7a7a\u4e3a-1\uff08\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u679a\u4e3e\u4e86A\u4e2d0\u4e2a1\u4e2a2\u4e2a3\u4e2a\u4eba\uff09\uff0c\u7136\u540e\u5308\u7259\u5229\u7b97\u6cd5\u5185\u90e8\u7684\u5faa\u73af\u4e2d\u5c06vis\u6570\u7ec4\u6e05\u96f6\u3002\u8fd8\u662f\u8fd9\u53e5\u8bdd\u2014\u2014\u592a\u632b\u4e86\uff01\uff01\uff01\uff01\nT1\u5728\u6bcf\u6b21\u679a\u4e3e\u5f00\u59cb+1\u3002\u5b83\u7528\u5728lk\u6570\u7ec4\u4e0a\u3002\u7531\u4e8elk\u6570\u7ec4\u5e76\u6ca1\u6709\u6e05\u7a7a\uff0c\u4e4b\u524d\u53ef\u80fd\u5df2\u7ecflk\u8fc7\u4e86\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u6bcf\u6b21\u5308\u7259\u5229\u7b97\u6cd5\uff0clk\u662f\u8981\u6e05\u7a7a\u7684\u3002\u6240\u4ee5\u5982\u679ctim[x]\u7684\u503c\uff01=T1\uff0c\u5c31\u8868\u793a\u5f53\u524d\u8fd9\u6b21\u679a\u4e3e\u4e2d\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u8fde\u63a5\u8fc7\uff0c\u76f8\u5f53\u4e8elk[x]=0;\u5982\u679ctim[x]=T1\u4e86\uff0c\u8bf4\u660e\u5f53\u524d\u8fd9\u6b21\u5df2\u7ecf\u7528\u8fc7\u5b83\u4e86\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u6e05\u96f6\u8fc7\u4e86\u7684\u542b\u4e49\uff0c\u90a3\u4e48\u6309\u7167\u6734\u7d20\u7684\u5308\u7259\u5229\u6765\u505a\u3002\nT2\u5219\u5728\u5308\u7259\u5229\u7b97\u6cd5\u4e2d\u7684\u5faa\u73af\u8bed\u53e5\u4e2d\u4f7f\u7528\uff0c\u51fa\u73b0\u5728find\u524d\uff0c\u8fd9\u4e2a\u662f\u51cf\u53bbvis\u6570\u7ec4\u4f18\u5316\u7684\uff0c\u9053\u7406\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u3002vis[x]=T2\u8868\u793a\u5f53\u524d\u8fd9\u6b21find\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u800cvis[x]!=T2\u5c31\u8868\u793a\u5f53\u524d\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u76f8\u5f53\u4e8evis=0\u62161\u3002\n\u53e6\u5916\uff0cban\u4e5f\u662f\u4e00\u4e2a\u9053\u7406\uff0cban[x]=T1\u8868\u793a\u5f53\u524d\u8fd9\u6b21x\u88abban\u6389\u4e86\u3002\n \n\u7efc\u4e0a\u6240\u8ff0\uff0c\u65f6\u95f4\u6233\u5e76\u4e0d\u662f\u50cf\u662f\u4e00\u4e9b\u5730\u65b9\u6240\u8bf4\u7684\u4e00\u6837\u7528\u6765\u5728\u4e0a\u4e00\u6b21\u5308\u7259\u5229\u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u5e7f\uff0c\u800c\u662f\u771f\u7684\u3001\u7eaf\u7cb9\u5730\u514d\u53bbmemset\u7684\u8fc7\u7a0b\u800c\u5df2\u2026\u2026\n\u518d\u7b80\u5355\u70b9\u6982\u8ff0\uff0c\u5982\u679c\u6709i\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21vis\u6570\u7ec4\u90fd\u8981\u6e05\u7a7a\u7684\u8bdd\uff0c\u90a3\u4e48\u7b2ci\u6b21\u64cd\u4f5c\u4e0d\u5982\u8fd9\u6837\u8f6c\u6362:!vis[x]\u2192vis[x]!=i\uff0cvis[x]\u2192vis[x]=i\u3002\n\u6240\u4ee5\u4e0a\u9762\u56e0\u4e3alk\u6570\u7ec4\u6bcf\u6b21\u679a\u4e3e\u53ea\u8981\u6e05\u96f6\u4e00\u6b21\uff0cban\u6570\u7ec4\u4e5f\u53ea\u9700\u8981ban\u4e00\u6b21\uff0c\u6240\u4ee5T1\u53ea\u5728\u4e09\u79cd\u60c5\u51b5\u7684\u7684\u5f00\u5934\u6e05\u7a7a;\u800cvis\u6570\u7ec4\u5728for\u5faa\u73af\u4e2d\u6bcf\u6b21\u90fd\u8981\u6e05\u7a7a\uff0c\u6240\u4ee5\u540c\u7406T2\u4e5f\u8981\u4e00\u76f4+1\u3002\n\u54c7\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u597d\u7b80\u5355\u7684\u4e1c\u897f\u2026\u2026\u2026\u2026\u5e76\u6ca1\u6709\u65f6\u95f4\u6233\u8fd9\u4e2a\u540d\u5b57\u6765\u5f97\u90a3\u4e48\u9ad8\u5927\u4e0a\u3002\n\n\n\nCode:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nconst int MAX_B=3000 + 10 ;\nbool mp[MAX_B][MAX_B] ;\nvector <int> E[MAX_B] ;\nint use1[MAX_B],use2[MAX_B],use3[MAX_B],result[MAX_B],a[MAX_B],b[MAX_B] ;\nint m,cnt1,cnt2,na,nb,t,x,y ;\nint calc(int x){\n    int re=0 ;\n    while (x) x-=x&-x,++re ;\n    return re ;//\u6709\u5947\u6570\u4e2a1 \uff08\u5947\u6570\u7684\u4e8c\u8fdb\u5236\u672b\u5c3e\u4e00\u5b9a=1\uff09 \n} \nbool dfs(int now){\n    if (use1[now]==cnt1) return false;\n    for (int i=0;i<E[now].size();i++){\n        int to=E[now][i] ;\n        if ((use1[to]!=cnt1) && (use2[to]!=cnt2)){\n            use2[to]=cnt2;\n            if (use3[to]!=cnt1 || !result[to] || dfs(result[to])){\n                use3[to]=cnt1 ;\n                result[to]=now ;\n                return true ;\n            }\n        }\n    }\n    return false;\n}\nint xyl(int x=0,int y=0) \n{\n    int t=0;cnt1++ ;\n    for (int i=1;i<=nb;i++) if (mp[x][i] || mp[y][i]) use1[i]=cnt1,t++ ;\n    //\u8be5\u70b9\u81f3\u5c11\u4e0eA,B\u4e2d\u7684\u4e00\u4e2a\u6ca1\u6709\u8fb9,\u6240\u4ee5\u4e0d\u53ef\u80fd\u6210\u4e3a\u72ec\u7acb\u96c6\uff0c\u6392\u6389\uff08A or B=0\u7684\u60c5\u51b5\u5df2\u9884\u5904\u7406\u8fc7\uff09 \n    \n    for (int i=1;i<=nb;i++){\n        if (b[i]&1){\n            ++cnt2 ;\n            if (dfs(i)) t++ ;\n        }\n    }\n    return (nb-t) ;\n     \n} \nvoid solve(){\n    int ans=xyl() ;//\u9009\u62e90\u4f4dA\u56fd\u4eba\n    for (int i=1;i<=na;i++) \n\tans=max(ans,xyl(i)+1) ; //\u9009\u62e9i\u53f7A\u56fd\u4eba \n    for (int i=1;i<=na;i++) if (a[i]&1) //\u9009\u62e9i\u53f7A\u56fd\u4eba \n    for (int j=1;j<=na;j++) if (~a[j]&1) //\u9009\u62e9j\u53f7A\u56fd\u4eba \n    ans=max(ans,xyl(i,j)+2) ;\n    printf(\"%d\\n\",ans) ;\n}\nint main(){\n    scanf(\"%d\",&t) ;\n    while (t--){\n        memset(mp,1,sizeof(mp)) ;\n        \n        scanf(\"%d%d%d\",&na,&nb,&m) ;//a\u56fd\u4eba\u7684\u6570\u91cf\uff0cb\u56fd\u4eba\u7684\u6570\u91cf\uff0cab\u4e24\u56fd\u7684\u670b\u53cb\u5173\u7cfb\u6570 \n        for (int i=1;i<=na;i++) scanf(\"%d\",&a[i]) ;\n        for (int i=1;i<=nb;i++) scanf(\"%d\",&b[i]) ;\n        for (int i=1;i<=m;i++){\n            scanf(\"%d%d\",&x,&y) ;\n            mp[x][y]=0 ;\n        }\n        \n        for (int i=1;i<=nb;i++) \n        if (b[i]&1)\n        for (int j=1;j<=nb;j++)\n        if (~b[j]&1)\n        { //B[i] xor B[j] mod 2=0 \n            if (~calc(b[i]|b[j])&1) E[i].push_back(j),E[j].push_back(i) ;\n        }\n        for (int i=1;i<=nb;i++) mp[0][i]=0;//\u9884\u8bbe\uff0c\u56e0\u4e3a\u540e\u9762xyl\u65f6\u4f1a\u6709x,y\u7b49\u4e8e0\u7684\u60c5\u51b5 \n        \n        solve() ;\n    }\n    return 0 ;\n}\n```",
        "postTime": 1525181690,
        "uid": 54900,
        "name": "__Hacheylight__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2423 \u3010[HEOI2012]\u670b\u53cb\u5708\u3011"
    }
]