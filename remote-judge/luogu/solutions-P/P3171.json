[
    {
        "content": "#### \u524d\u8a00:\n\u672c\u6765\u81ea\u5df1\u66fe\u60f3\u5230\u4e0e\u8fd9\u9053\u9898\u4e00\u6a21\u4e00\u6837\u7684\u6a21\u578b\u7684\uff0c\u6211\u672c\u6765\u8fd8\u51c6\u5907\u81ea\u5df1\u51fa\u9053\u8fd9\u6837\u7684\u9898\u7684\uff0c\u7ed3\u679c\u88ab\u81ea\u5df1\u7701\u7684\u7701\u9009\u5148\u51fa\u4e86\uff0c\u90a3\u5c31\u53ea\u80fd\u5199\u7bc7\u9898\u89e3\u4e86\u3002\u3002\u3002\n#### \u601d\u8def\uff1a\n\u901a\u8fc7\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff0c\u8fd9\u9053\u9898\u5b9e\u8d28\u6240\u6c42\u7684\u662f\uff1a\n\n\u5728\u7b2ci\u4e2a\u70b9\u53ea\u80fd\u9009$A[i]$\u6b21\u7684\u60c5\u51b5\u4e0b\uff08$A[1],A[n]=inf$\uff09,\u80fd\u9009\u51fa\u591a\u5c11\u6761$1-n$\u7684\u6700\u77ed\u8def\n\n\u8bbe$1$\u5230\u7b2c$i$\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a$dist[i]$,\u7b2c$i$\u4e2a\u70b9\u548c\u7b2c$j$\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u957f\u4e3a$e[i][j]$(\u6ca1\u6709\u7684\u8bdd\u5f53\u7136\u5c31\u662f$inf$\u4e86),\u90a3\u4e48\u663e\u7136\u7684:\n\n**\u82e5\u6211\u4eec\u8981\u8d70$1$\u5230$n$\u7684\u6700\u77ed\u8def\uff0c\u6211\u4eec\u53ea\u80fd\u8d70:$dist[v]=dist[u]+e[u][v]$\u7684\u8fb9**\n\n\u7136\u540e\u73b0\u5728\u53ea\u5269\u4e0b\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u540e\uff0c\u601d\u8def\u4e5f\u5f88\u660e\u663e\u4e86\uff0c\u5f88\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u6d41\u7684\u95ee\u9898\uff0c\u4f46\u662f\u552f\u4e00\u8ba8\u538c\u7684\u5c31\u662f\u6539\u9898\u662f\u5bf9\u7ecf\u8fc7\u70b9\u7684\u5bb9\u91cf\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u800c\u4e0d\u662f\u5bf9\u8fb9\u3002\n\n\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n\u505a\u8fc7\u4e00\u4e9b\u6700\u5927\u6d41\u7684\u540c\u5b66\u4e5f\u90fd\u77e5\u9053\uff0c\u73b0\u5728\u5f53\u7136\u5c31\u8be5\u62c6\u70b9\u4e86\u3002\n\n\u62c6\u5b8c\u70b9\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5c31\u597d\u4e86\u3002\n\n#### \u505a\u6cd5\uff1a\n\u5148\u8dd1\u6700\u77ed\u8def\uff0c\u7559\u4e0b\u5728\u6700\u77ed\u8def\u4e2d\u7684\u8fb9\u3002\n\n\u5c06$n$\u4e2a\u70b9\u62c6\u6210$2n$\u4e2a\u70b9\uff0c\uff08\u5176\u4e2d$1$\u5bf9\u5e94$1+n$,$2$\u5bf9\u5e94$2+n$...\uff09\n\n\u4ece\u7b2c$i(1<=i<=n)$\u4e2a\u70b9\u5411\u7b2c$i+n$\u4e2a\u70b9\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$A[i]$\u7684\u8fb9(**\u4e3a\u4e86\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6d41\u4e0d\u8d85\u8fc7A**)\n\n\u5bf9\u4e8e\u6bcf\u6761\u5728\u6700\u77ed\u8def\u4e2d\u7684$e[u][v]$\uff0c\u4ece\u7b2c$u+n$\u4e2a\u70b9\u671d\u7b2c$v$\u4e2a\u70b9\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$inf$\u7684\u8fb9\n\n\u4ece\u6e90\u70b9$s$\u671d\u70b9$1$\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$inf$\u7684\u8fb9,\u4ece\u70b9$2*n$\u671d\u6c47\u70b9$t$\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$inf$\u7684\u8fb9\n\n\u6700\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n#### \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<queue>\n#define inf 0x7fffffffff/2\n#define eps 1e-6\n#define N 2010\n#define M 100010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nll dist[N];//\u8fd9\u9053\u9898\u6700\u5751\u7684\u5c31\u662f\u6ca1\u5f00long long 0\u5206,rip for 2015\u5e74\u53c2\u52a0\u7701\u9009\u6ca1\u5f00long long\u7684\u5b66\u957f\u4eec\nstruct edge\n{\n\tint next,to;\n\tll fl;\n}e[M<<1];\nint cnt=1,head[N];\nint n,m;\nint vis[N];\nll c[N];\nint s,t;\nint depth[N];\nqueue<int>Q;\nvector<int>to[N];\nvector<ll>v[N];\ninline void add_edge(int from,int to,ll fl)\n{\n\te[++cnt].to=to;\n\te[cnt].next=head[from];\n\te[cnt].fl=fl;\n\thead[from]=cnt;\n}//\u5efa\u8fb9\ninline int bfs()\n{\n\twhile(!Q.empty())Q.pop();memset(depth,0,sizeof(depth));\n\tQ.push(s);depth[s]=1;\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front();Q.pop();\n\t\tfor(register int i=head[x];i;i=e[i].next)\n\t\t{\n\t\t\tif(!depth[e[i].to]&&e[i].fl>0)\n\t\t\t{\n\t\t\t\tdepth[e[i].to]=depth[x]+1;\n\t\t\t\tQ.push(e[i].to);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nll dfs(int now,ll flow)\n{\n\tif(now==t)return flow;\n\tll ret=0;\n\tfor(register int i=head[now];i;i=e[i].next)\n\t{\n\t\tif(ret==flow)return ret;\n\t\tif(depth[e[i].to]==depth[now]+1&&e[i].fl>0)\n\t\t{\n\t\t\tll fl=dfs(e[i].to,min(flow-ret,e[i].fl));\n\t\t\tif(fl>0)\n\t\t\t{\n\t\t\t\tret+=fl;\n\t\t\t\te[i].fl-=fl;\n\t\t\t\te[i^1].fl+=fl;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\ninline ll Dinic()\n{\n\tll sum=0;\n\twhile(bfs())\n\t{\n\t\tll x=1;while(x){x=dfs(s,inf);sum+=x;}\n\t}\n\treturn sum;\n}//\u6700\u5927\u6d41\ninline void spfa()\n{\n\tfor(register int i=2;i<=n;i++)dist[i]=inf;\n\twhile(!Q.empty())Q.pop();\n\tQ.push(1);vis[1]=1;\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front();Q.pop();vis[x]=0;\n\t\tfor(register int i=0;i<to[x].size();i++)\n\t\t{\n\t\t\tint go=to[x][i];\n\t\t\tll val=v[x][i];\n\t\t\tif(dist[x]+val<dist[go])\n\t\t\t{\n\t\t\t\tdist[go]=dist[x]+val;\n\t\t\t\tif(!vis[go])\n\t\t\t\t{\n\t\t\t\t\tvis[go]=1;\n\t\t\t\t\tQ.push(go);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}//\u6700\u77ed\u8def\uff0cDijkstra\u8fc7\u4e0d\u4e86\u00b7 \nint main()\n{\n\tn=read(),m=read();\n\tt=n*2+1;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tll val=read();\n\t\tto[x].push_back(y);v[x].push_back(val);\n\t\tto[y].push_back(x);v[y].push_back(val);\n\t}\n\tspfa();\n\tfor(register int i=1;i<=n;i++)c[i]=read();\n\tadd_edge(s,1,inf);add_edge(1,s,0);\n\tadd_edge(2*n,t,inf);add_edge(t,2*n,0);\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tif(i!=1&&i!=n){add_edge(i,i+n,c[i]);add_edge(i+n,i,0);}\n\t\telse {add_edge(i,i+n,inf),add_edge(i+n,i,0);}\n\t}//\u901a\u8fc7\u62c6\u70b9\u5bf9\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6d41\u91cf\u8fdb\u884c\u9650\u5236\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tfor(register int j=0;j<to[i].size();j++)\n\t\t{\n\t\t\tint go=to[i][j];\n\t\t\tll val=v[i][j];\n\t\t\tif(dist[go]==dist[i]+val)//\u5728\u6700\u77ed\u8def\u4e2d\n\t\t\t{\n\t\t\t\tadd_edge(i+n,go,inf);add_edge(go,i+n,0);\n\t\t\t}\n\t\t}\n\t}//\u5bf9\u5728\u6700\u77ed\u8def\u4e2d\u7684\u8fb9\u5efa\u8fb9 \n\tprintf(\"%lld\\n\",Dinic());\n\treturn 0;\n}\n\n```\n\n#### \u540e\u8bb0\uff1a\n\u8fd9\u9053\u9898\u4e0e\u7f51\u7edc\u6d4124\u9898\u4e2d\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5e8f\u5217\u95ee\u9898\u7c7b\u4f3c\uff0c\u90fd\u662f\u5bf9DP\u65b9\u6848\u6570\u7684\u8ba8\u8bba\uff08\u6700\u77ed\u8def\u6211\u8ba4\u4e3a\u4e5f\u662f\u4e00\u79cdDP\uff09\uff0c\u505a\u5b8c\u8fd9\u9053\u9898\u6ca1\u505a\u90a3\u9053\u9898\u7684\u7ecf\u9a8c\u53ef\u4ee5\u53bbA\u4e00\u4e0b\uff08~~\u53cc\u500d\u7ecf\u9a8c~~\uff09\n\n#### \u5982\u679c\u8ba4\u4e3a\u6211\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\u7684\u53ef\u4ee5\u7ed9\u6211\u70b9\u4e00\u4e0b\u8d5eqwq\u3002\u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6216\u8005\u8ba4\u4e3a\u6211\u7684\u9898\u89e3\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\uff0c\u8bf7\u52a1\u5fc5\u79c1\u4fe1\u6211\uff0c\u611f\u6fc0\u4e0d\u5c3d\uff01\u6211\u4f1a\u52aa\u529b\u628a\u6211\u7684\u9898\u89e3\u5199\u5f97\u6700\u597d\u7684!\n",
        "postTime": 1544717438,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "### \u6a21\u62df\u8d5b\u7206\u96f6\u7684T1QAQ\n\n~~\u672c\u6765\u4ee5\u4e3a\u662f\u9053\u6c34\u9898\uff0c\u6ca1\u60f3\u5230\u662f\u5751\u3002~~\n\n\u521a\u5f00\u59cb\u4ee5\u4e3a\u53ef\u4ee5\u76f4\u63a5\u5728\u539f\u56fe\u4e0a\u8dd1\u8d39\u7528\u6d41\u3002\n\n\u4f46\u662f\u6709\u70b9\u6743\u548c\u6700\u77ed\u8def\u7684\u9650\u5236\uff0c\u663e\u7136\u6211\u4eec\u8981\u91cd\u65b0\u5efa\u56fe\u3002\n\n\u5728\u5efa\u56fe\u524d\u8dd1SPFA\u6c42\u6700\u77ed\u8def\uff08\u6570\u636e\u5e94\u8be5\u5361\u4e0d\u6389\uff0c~~\u53ea\u8981\u4f60\u5e38\u6570\u5c0f~~\uff09\u3002\n\n\u7531\u4e8e\u53ea\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u6d41\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u6761\u8fb9\u770b\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\u3002\n\n\u5982\u679c\u5728\u5c31\u8fde\u8fb9\u3002\n\n**\u6ce8\u610f\uff1a**\u8fd9\u9898\u7684\u6570\u636e\u6709\u91cd\u8fb9\uff0c\u5982\u679c\u7528\u90bb\u63a5\u77e9\u9635\uff0c\u8981\u7279\u5224\u53d6min\uff01\uff01\uff01\uff01\n\n\u5982\u679c\u4f60\u7528vector\u5c31\u6ca1\u4e8b\u3002\n\n\uff08\u8fd9\u5c31\u662f\u6211\u7206\u96f6\u539f\u56e0/kk\uff09\u3002\n\n\u800c\u5bf9\u4e8ec\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u62c6\u70b9\uff0c\u4ecei\u5411i\u2018\u8fde\u4e00\u6761ci\u7684\u8fb9\u3002\n\n\u4f46\u662f1\u548cn\u8981\u8fde\u65e0\u9650\u5927\u3002\n\n\u6700\u540e\u5c31\u53ef\u4ee5\u8dd1\u6700\u5927\u6d41\u60f9qwq\u3002\n\n\u53e6\uff1a\u6b64\u9898\u4e0d\u7528\u5efa\u6e90\u6c47\u70b9\uff0c\u76f4\u63a5\u75281\u548cn\u5c31\u884c  ~~\u867d\u7136\u6211\u8fd8\u662f\u5efa\u4e86~~\u3002\n\n#### \u5f88\u91cd\u8981\uff1a\n\n1.\u4e0d\u5f00longlong\u89c1\u7956\u5b97\uff01\n\n2.INF\u8d4b\u5c0f\u89c1\u4e0a\u5e1d\uff01\n\n3.\u4e0d\u5224\u91cd\u4e24\u884c\u6cea\uff01\n\n~~\u51fa\u9898\u4eba\u597d\u6bd2QAQ~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N=1e6+9,INF=5e17;\n\nint dis[N],ver[N<<1],w[N<<1],nxt[N<<1],h[N],cur[N],dep[N];\nint n,m,c[N],x,y,z,ans,g[509][509],tot=1,s=0,t=1501;\nbool vis[N];\n\ninline void SPFA()\n{\n\tqueue<int> Q;\n\tfor(int i=2;i<=n;i++) dis[i]=INF;\n\tQ.push(1),vis[1]=true;dis[1]=0;\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();Q.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=0;i<=n;i++)\n\t\t{\n\t\t\tif(dis[i]>dis[u]+g[u][i]&&g[u][i]!=-1)\n\t\t\t{\n\t\t\t\tdis[i]=dis[u]+g[u][i];\n\t\t\t\tif(!vis[i]) Q.push(i),vis[i]=true;\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void addedge(int x,int y,int z)\n{\n\tver[++tot]=y,w[tot]=z,nxt[tot]=h[x],h[x]=tot;\n\tver[++tot]=x,w[tot]=0,nxt[tot]=h[y],h[y]=tot;\n}\n\ninline bool bfs()\n{\n\tqueue<int> Q;\n\tmemset(dep,-1,sizeof dep);\n\tQ.push(s);dep[s]=0;\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=h[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=ver[i];\n\t\t\tif(dep[v]==-1&&w[i]>0)\n\t\t\t{\n\t\t\t\tQ.push(v);\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\n\ninline int dfs(int u,int flow)\n{\n\tif(u==t) return flow;\n\tint delta,max_flow=0;\n\tfor(int i=cur[u];i;i=nxt[i])\n\t{\n\t\tcur[u]=i;\n\t\tint v=ver[i];\n\t\tif(dep[v]==dep[u]+1&&w[i]>0)\n\t\t{\n\t\t\tdelta=dfs(v,min(w[i],flow));\n\t\t\tflow-=delta;\n\t\t\tmax_flow+=delta;\n\t\t\tw[i]-=delta;\n\t\t\tw[i^1]+=delta;\n\t\t\tif(!flow) break;\n\t\t}\n\t}\n\treturn max_flow;\n}\n\ninline void Dinic()\n{\n\twhile(bfs())\n\t{\n\t\tmemcpy(cur,h,sizeof h);\n\t\tans+=dfs(s,INF);\n\t}\n}\n\nsigned main()\n{\n    // freopen(\"Alansp.out\",\"w\",stdout);\n\tscanf(\"%lld%lld\",&n,&m);\n\tt=n*2+1;\n     memset(g,-1,sizeof g);\n    for(int i=1;i<=m;i++) \n    {\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        if(g[x][y]==-1) g[x][y]=g[y][x]=z;\n        else g[x][y]=min(g[x][y],z),g[y][x]=g[x][y];\n    }\n\t// for(int i=1;i<=n;i++)\n    // {\n    //     for(int j=1;j<=n;j++) if(g[i][j]!=-1) cout<<i<<' '<<j<<endl;\n    // }\n    for(int i=1;i<=n;i++) scanf(\"%lld\",&c[i]);\n\tSPFA();\n    // for(int i=1;i<=n;i++) cout<<dis[i]<<endl;\n\taddedge(s,1,INF),addedge(n*2,t,INF);\n\tfor(int i=1;i<=n;i++) \n\t{\n\t\tif(i!=1&&i!=n) addedge(i,i+n,c[i]);\n\t\telse addedge(i,i+n,INF);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{ \n\t\t\tif(i==j) continue;\n\t\t\tif(dis[i]+g[i][j]==dis[j]&&g[i][j]!=-1) addedge(i+n,j,INF);\n\t\t}\n\t}\n\tDinic();\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1584625619,
        "uid": 237308,
        "name": "AlanSP",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "//\u849f\u84bb\u535a\u5ba2\u540c\u6b65\u9605\u8bfb:[Newuser\u5c0f\u7ad9\uff01](http://www.newuser.top/2018/04/13/cqoi2015wangluotuntu/)\n\n   #### \u4e0d\u5f00longlong \u6bc1\u4e00\u751f\n\n\u9996\u5148\u5148\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\u4e0a\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\uff0c\u7136\u540e\u52a0\u5165\u56fe\u4e2d\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\uff0c\u8fd8\u662f\u6bd4\u8f83\u88f8\u7684\u4e00\u9053\u9898\u3002if(dis[x]+len[y]==dis[y])\u5219\u8fd9\u6761\u8def\u5728\u6700\u77ed\u8def\u4e0a\u3002\u7136\u540e\u770b\u6bcf\u4e2a\u70b9\u7684\u541e\u5410\u91cf\u9650\u5236\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u8def\u7531\u5668\u62c6\u6210\u4e24\u4e2a\u70b9\u6765\u8003\u8651\uff0c\u4ece\u4e00\u4e2a\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u955c\u50cf\u7ed3\u70b9\u7684\u5bb9\u91cf\u4e3a\u5176\u9650\u5236\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u4ed6\u8fb9\u76f4\u63a5\u8fde\u56fe\uff0c\u5bb9\u91cf\u4e3ainf\u3002\n\n\u7136\u800c\u8fd9\u9053\u9898\u6709\u5751\u70b9\u3002\u3002\u9996\u5148\u8d77\u59cb\u70b9\u6ca1\u6709\u541e\u5410\u91cf\u9650\u5236\uff01\u8981\u7279\u5224\uff01\u8fd8\u6709\u5c31\u662f\u8981\u5f00longlong ,inf\u4e5f\u8981\u8bbe\u5927\u4e00\u4e9b\u3002int,\u4e00\u5206\u90fd\u6ca1\u6709\uff0c\uff0c\uff0c\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u5427\u3002\u3002\u4ee5\u4e0b\u662fsap\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m;\nlong long owo,dis[300005],en[300005],nt[300005],la[300005],len[300005];\nlong long v[1005][1005];\nlong long fr[300005],to[300005],cd[300005];\nlong long cnt[1005]; \nvoid addedge(long long a,long long b,long long c)\n{\n\ten[++owo]=b; nt[owo]=la[a]; la[a]=owo; len[owo]=c;\n}\nlong long dijdis[1005];\nstruct node\n{\n\tlong long di,tt;\n}tmp;\npriority_queue<node>q;\nbool operator<(const node &aa,const node &bb)\n{ return aa.di>bb.di; }  \nvoid dijkstra(long long x)\n{\n\tlong long ddd;\n\tfor(long long i=1;i<=n;i++) dijdis[i]=0x3f3f3f3f;\n\tdijdis[1]=0; q.push((node){0,1});\n\twhile(q.size())\n\t{\n\t\tx=q.top().tt; ddd=q.top().di; q.pop();\n\t\tif(ddd!=dijdis[x]) continue;\n\t\tfor(long long it=la[x];it;it=nt[it])\n\t\t{\n\t\t\tif(dijdis[en[it]]>ddd+len[it])\n\t\t\t{\n\t\t\t\tdijdis[en[it]]=ddd+len[it];\n\t\t\t\tq.push((node){ddd+len[it],en[it]});\n\t\t\t}\n\t\t}\n\t}\n}\nlong long sap(long long x,long long flow)\n{\n\tif(x==2*n) return flow;\n\tlong long delta=0,tmp;\n\tfor(long long i=1;i<=2*n;i++)\n\t{\n\t\tif(v[x][i]&&dis[x]==dis[i]+1)\n\t\t{\n\t\t\ttmp=sap(i,min(flow-delta,v[x][i]));\n\t\t\tdelta+=tmp;\n\t\t\tv[x][i]-=tmp;\n\t\t\tv[i][x]+=tmp;\n\t\t\tif(delta==flow||dis[1]>=2*n) return delta;\n\t\t}\n\t}\n\tif(dis[1]>=2*n) return delta;\n\tcnt[dis[x]]--;\n\tif(!cnt[dis[x]]) dis[1]=2*n;\n\tdis[x]++;\n\tcnt[dis[x]]++;\n\treturn delta;\n}\nint main()\n{\n\tlong long a,b,c;\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\taddedge(a,b,c);\n\t\taddedge(b,a,c);\n\t\tfr[i]=a; to[i]=b; cd[i]=c;\n\t}\n\tdijkstra(1);\n\tlong long x,y;\n\tfor(long long i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&x);\n\t\tif(i!=n&&i!=1)v[i][i+n]=x;\n\t\telse v[i][i+n]=1e14;\n\t}\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tif(dijdis[fr[i]]+cd[i]==dijdis[to[i]]) v[fr[i]+n][to[i]]=1e14;\n\t\tif(dijdis[to[i]]+cd[i]==dijdis[fr[i]]) v[to[i]+n][fr[i]]=1e14;\n\t}\n\tlong long ans=0;\n\twhile(dis[1]<2*n)\n\t{\n\t\tans+=sap(1,1e14);\n\t}\n\tprintf(\"%lld\",ans);\n}\n\n```\n",
        "postTime": 1523609442,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u6765\u5237\u6c34\u9898\u3002\n\n\u9898\u76ee\u8bb2\u5f97\u5f88\u6e05\u695a,\u6211\u4eec\u5c31\u76f4\u63a5\u5e72\u4e0b\u9762\u7684\u4e8b\u60c5\u5c31\u597d\u4e86: \u8dd1\u6700\u77ed\u8def\u7136\u540e\u8fde\u8fb9\u8dd1\u6700\u5927\u6d41\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u8981\u77e5\u9053\u54ea\u6761\u8fb9\u5728\u6700\u77ed\u8def\u91cc\u9762,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b50\u5224\u65ad: ``dis[from[i]]+value[i]=dis[reach[i]]`` \u90a3\u4e48 $i$ \u53f7\u8fb9\u5c31\u662f\u4e00\u6761\u6700\u77ed\u8def\u91cc\u9762\u7684\u8fb9\u3002\n\n\u6ce8\u610f\u5230\u7ed9\u7684\u662f\u70b9\u7684\u6d41\u91cf\u9650\u5236,\u6211\u4eec\u76f4\u63a5\u62c6\u70b9\u5c31\u597d\u4e86\u3002\n\n\u5f88\u591a\u4eba\u7528\u90bb\u63a5\u77e9\u9635,\u6211\u8fd8\u662f\u7167\u5e38\u7528\u94fe\u5f0f\u524d\u5411\u661f\u3002\n\n~~\u81f3\u4e8e\u6211\u4e3a\u4ec0\u4e48\u4e00\u9875\u7684 $20$ \u5206:\u662f\u56e0\u4e3a\u6211\u7684\u6d41\u91cf\u5f00\u7684\u662f $\\max longint$ \u800c\u663e\u7136\u7b54\u6848\u53ef\u80fd\u4f1a\u8d85\u3002(\u8fd8\u8ba9\u6211\u6539\u51fa\u4e86\u4e00\u5806\u7ec6\u8282\u9519\u8bef)~~\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    value,reach,next:array[-1..210000] of int64;\n    gap,dis,cnt,long:array[-1..210000] of int64;\n    queue:array[-1..620000,1..2] of int64;\n    ask:array[-1..210000] of boolean;\n    _:array[-1..210000] of int64;\n    i:longint;\n    n,m,l,r,k,maxflow,j,tot,tail,sink,source:int64;\n\nprocedure add(l,r,sum:int64);\nbegin\n    inc(tot); reach[tot]:=r; value[tot]:=sum; next[tot]:=cnt[l]; cnt[l]:=tot;\nend;\n\nprocedure SPFA;\nvar\n    i,l,head,tail:int64;\nbegin\n    fillchar(ask,sizeof(ask),False);\n    head:=1; tail:=1; _[1]:=1; long[1]:=0; ask[1]:=True;\n    repeat\n        l:=_[head]; ask[l]:=False;\n        i:=cnt[l];\n        while i<>-1 do\n        begin\n            if long[l]+value[i]<=long[reach[i]] then\n            begin\n                long[reach[i]]:=long[l]+value[i];\n                if ask[reach[i]]=False then\n                begin\n                    inc(tail); ask[reach[i]]:=True;\n                    _[tail]:=reach[i];\n                end;\n            end;\n            i:=next[i];\n        end;\n        inc(head);\n    until head>tail;\nend;\n\nfunction Dfs(now,flow:int64):int64;\nvar \n    i,k,mindis,ret:int64;\nbegin\n    mindis:=n-1; ret:=flow;\n    if now=sink then exit(flow);\n    i:=cnt[now];\n    while i<>-1 do\n    begin\n        if value[i]>0 then\n        begin\n            if dis[now]=dis[reach[i]]+1 then\n            begin\n                k:=Dfs(reach[i],min(ret,value[i]));\n                dec(value[i],k);inc(value[i xor 1],k);\n                dec(ret,k);\n                if dis[source]>=n then exit(flow-ret);\n                if ret=0 then break;\n            end;\n             mindis:=min(mindis,dis[reach[i]]);\n        end;\n        i:=next[i];\n    end;\n    if ret=flow then\n    begin\n        dec(gap[dis[now]]);\n        if gap[dis[now]]=0 then dis[source]:=n;\n        dis[now]:=mindis+1;\n        inc(gap[dis[now]]);\n    end;\n    exit(flow-ret);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1);\n    fillchar(long,sizeof(long),1);\n    read(n,m);\n    for i:=1 to m do begin read(l,r,k); add(l,r,k); add(r,l,k); end;\n    SPFA;\n    for i:=1 to n do\n    begin\n        j:=cnt[i];\n        while j<>-1 do\n        begin\n            if (long[i]+value[j]=long[reach[j]]) then\n            begin\n                inc(tail);\n                queue[tail,1]:=i;\n                queue[tail,2]:=reach[j];\n            end;\n            j:=next[j];\n        end;\n    end;\n\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1);\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(next,sizeof(next),0); tot:=1;\n    for i:=1 to tail do\n    begin\n        add(queue[i,1]+n,queue[i,2],maxlongint*888);\n        add(queue[i,2],queue[i,1]+n,0);\n    end;\n    for i:=1 to n do\n    begin\n        read(k);\n        if (i=1)or(i=n) then\n        begin\n            add(i,i+n,maxlongint*888);\n            add(i+n,i,0);\n        end else\n        begin\n            add(i,i+n,k); add(i+n,i,0);\n        end;\n    end;\n    source:=1; sink:=n << 1; n:=sink; gap[source]:=n;\n    while dis[source]<n do inc(maxflow,Dfs(source,maxlongint*888));\n    writeln(maxflow);\nend.\n```",
        "postTime": 1541134870,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u6765\u53d1\u4e00\u7bc7\u975e\u5b8c\u7f8e\u89e3\u6cd5\u7684\u9898\u89e3;[\u6211\u7684\u535a\u5ba2](http://www.wjyyy.top/771.html)\n\n# \u975e\u5b8c\u7f8e\u89e3\u6cd5\uff1a\n\n\u00a0 \u00a0\u770b\u5230\u8fd9\u4e2a\u9898\uff0c\u7528\u7f51\u7edc\u6d41\u6765**\u9650\u6d41**\u5f53\u7136\u662f\u7b2c\u4e00\u60f3\u6cd5\u3002\u4e8e\u662f\u5148spfa\u6c42\u6700\u77ed\u8def\uff0c\u63a5\u7740\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\u3002\u5224\u65ad\u65b9\u6cd5\uff1a\u4ece\u8d77\u70b9/\u7ec8\u70b9\u51fa\u53d1\u5404\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8bb0\u5f55dis[0]\u548cdis[1]\uff0c\u6700\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9\u662f\u5426\u6ee1\u8db3$dis[0][u]+w+dis[1][v]=dis[0][t]$\uff08t\u8868\u793a\u7ec8\u70b9\uff09\u3002\u5982\u679c\u5728\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u7f51\u7edc\u6d41\u56fe\u4e2d\uff0c**\u6d41\u91cf\u4e3a\u4e24\u7aef\u70b9\u4e2d\u541e\u5410\u91cf\u8f83\u5c0f\u7684\u4e00\u4e2a**\u3002\u8fd9\u79cd\u505a\u6cd5\u770b\u4e0a\u53bb\u6ca1\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u4e24\u4e2a\u70b9\u76f8\u8fde\u65b0\u541e\u5410\u91cf\u4f9d\u8d56\u4e8e\u8f83\u4f4e\u7684\u70b9\u7684\u541e\u5410\u91cf\u3002\n\n\n\n\u00a0 \u00a0\u4e0d\u8fc7\u4e00\u4e2a\u70b9**\u4e0d\u4e00\u5b9a\u53ea\u6709\u8fd9\u4e00\u6761\u6d41\u8fde\u63a5**\uff0c\u5f53\u6709\u591a\u6761\u6d41\u6d41\u5165\u4e14\u6709\u591a\u6761\u6d41\u6d41\u51fa\u65f6\uff0c\u5b83\u7684\u6d41\u91cf\u53ef\u4ee5\u88ab**\u6269\u5145**\u8d85\u8fc7\u5b83\u7684\u541e\u5410\u91cf\u3002\u6bd4\u5982\u8bf4\u5341\u5b57\u8def\u53e3\u8fd9\u79cd\u56fe\uff1a\n\n![](http://www.wjyyy.top/wp-content/uploads/2018/07/201807071657.png)\u6240\u6709\u70b9\u7684\u541e\u5410\u91cf\u5747\u4e3a1\u3002\n\n\u00a0 \u00a0\u5373\u4f7f4\u53f7\u70b9\u7684\u541e\u5410\u91cf\u4e3a1\uff0c\u4e5f\u53ea\u80fd\u6784\u5efa\u51fa\u8fd9\u6837\u7684\u56fe\uff0c\u800c\u8fd9\u65f6\u6700\u5927\u6d41\u4e3a2\uff0c\u4e0d\u7b26\u5408\u9898\u610f\u3002\u5f53\u8fd9\u4e2a\u5341\u5b57\u8def\u53e3\u53d8\u4e3a\u5ea6\u4e3a2k\u7684\u70b9\u65f6\uff0c\u5b83\u7684\u6d41\u91cf\u53ef\u4ee5\u8fbe\u5230\u541e\u5410\u91cf\u00d7k\u3002\n\n\n\n\u00a0 \u00a0\u53ef\u80fd\u662f\u6570\u636e\u4e0d\u591f\u5f3a\uff0c\u81f4\u4f7f\u6211\u8fd9\u79cd\u975e\u5b8c\u7f8e\u89e3\u6cd5\u80fd\u901a\u8fc7\u3002\n\n\n\n# \u6b63\u786e\u89e3\u6cd5\uff1a\n\n\u00a0 \u00a0\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u4e00\u4e2a\u7ba1\u8fdb\u5165\uff0c\u4e00\u4e2a\u7ba1\u6d41\u51fa\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u4ee5\u541e\u5410\u91cf\u4e3a\u6d41\u91cf\u7684\u8fb9\u8fde\u63a5\u8d77\u6765\u3002\u518d\u628a\u6700\u77ed\u8def\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff08\u5206\u62c6\u70b9\u7684\u8fdb\u51fa\uff09\u76f8\u8fde\uff0c\u6743\u503c\u4e3ainf\u3002\u76f4\u63a5\u8dd11\u5230n\u7684\u6700\u5927\u6d41\uff0c\u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\u4e86\u3002\n   \n   \u8d34\u4e00\u4e0b\u975e\u5b8c\u7f8e\u89e3\u6cd5\u7684Code\uff0c\u5b8c\u7f8e\u89e3\u6cd5\u53c2\u8003\u5176\u4ed6dalao\u7684\u9898\u89e3\u3002\n   \n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing std::deque;\nint min(int x,int y)\n{\n    return x<y?x:y;\n}\nnamespace graph//\u5efa\u4e86\u4e24\u4e2a\u56fe\u6240\u4ee5\u7528\u547d\u540d\u7a7a\u95f4\n{\nstruct edge\n{\n    int n;\n    int v;\n    int nxt;\n    edge(int n,int v,int nxt)\n    {\n        this->n=n;\n        this->v=v;\n        this->nxt=nxt;\n    }\n    edge()\n    {\n        nxt=-1;\n    }\n}e[210000];\nint head[501],cnt=-1;\nvoid add(int from,int to,int v)\n{\n    e[++cnt]=edge(to,v,head[from]);\n    head[from]=cnt;\n    e[++cnt]=edge(from,v,head[to]);\n    head[to]=cnt;\n}\nvoid init()\n{\n    memset(head,-1,sizeof(head));\n}\nlong long dis[2][510];\nvoid spfa(int x)\n{\n    deque<int> q;\n    bool used[510];\n    memset(used,0,sizeof(used));\n    memset(dis[x!=1],0x3f,sizeof(dis[x!=1]));\n    used[x]=1;\n    dis[x!=1][x]=0;\n    int flag=(x!=1);\n    q.push_back(x);\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop_front();\n        used[k]=false;\n        for(int i=head[k];~i;i=e[i].nxt)\n        {\n            if(dis[flag][e[i].n]>dis[flag][k]+e[i].v)\n            {\n                dis[flag][e[i].n]=dis[flag][k]+e[i].v;\n                if(!used[e[i].n])\n                {\n                    if(q.empty()||dis[flag][e[i].n]<dis[flag][q.front()])\n                        q.push_front(e[i].n);\n                    else\n                        q.push_back(e[i].n);\n                    used[e[i].n]=true;\n                }\n            }\n        }\n    }\n}\n}\nint flow[510];\nlong long sum=0;//\u8981\u5f00long long\nnamespace Flow\n{\nstruct edge\n{\n    int n,v;\n    int nxt;\n    edge(int n,int v,int nxt)\n    {\n        this->n=n;\n        this->v=v;\n        this->nxt=nxt;\n    }\n    edge()\n    {\n        nxt=-1;\n    }\n}e[210000];\nint head[505],cnt=-1;\nvoid add(int from,int to,int v)\n{\n    e[++cnt]=edge(to,v,head[from]);\n    head[from]=cnt;\n    e[++cnt]=edge(from,0,head[to]);\n    head[to]=cnt;\n}\nvoid init()\n{\n    memset(head,-1,sizeof(head));\n}\nint d[505],gap[505];\nvoid bfs(int x)\n{\n    memset(d,0,sizeof(d));\n    int q[505],l=0,r=0;\n    q[++r]=x;\n    d[x]=1;\n    gap[0]=123456;\n    while(l<r)\n    {\n        int k=q[++l];\n        for(int i=head[k];~i;i=e[i].nxt)\n        {\n            if(!d[e[i].n])\n            {\n                d[e[i].n]=d[k]+1;\n                gap[d[e[i].n]]++;\n                q[++r]=e[i].n;\n            }\n        }\n    }\n}\nvoid isap(int x)//x\u8868\u793a\u6709\u591a\u5c11\u4e2a\u70b9\n{\n    bfs(x);\n    int s=1;\n    int pre[505];\n    memset(pre,-1,sizeof(pre));\n    int cur[505];\n    for(int i=1;i<=x;i++)\n        cur[i]=head[i];\n    while(d[1]<=x)\n    {\n        if(s==x)\n        {\n            int minn=1234567890;\n            int p=pre[s];\n            while(~p)\n            {\n                minn=min(minn,e[p].v);\n                p=pre[e[p^1].n];\n            }\n            sum+=minn;\n            p=pre[s];\n            while(~p)\n            {\n                e[p].v-=minn;\n                e[p^1].v+=minn;\n                p=pre[e[p^1].n];\n            }\n            s=1;\n        }\n        int flag=0;\n        for(int i=cur[s];~i;i=e[i].nxt)\n            if(e[i].v&&d[e[i].n]+1==d[s])\n            {\n                pre[e[i].n]=i;\n                cur[s]=e[i].nxt;\n                flag=1;\n                s=e[i].n;\n                break;\n            }\n        if(flag==0)\n        {\n            int tmp=d[s];\n            d[s]=x+1;\n            for(int i=head[s];~i;i=e[i].nxt)\n                if(e[i].v)\n                    d[s]=min(d[s],d[e[i].n]+1);\n            gap[tmp]--;\n            gap[d[s]]++;\n            if(gap[tmp]==0)\n                return;\n            cur[s]=head[s];\n            if(s!=1)\n                s=e[pre[s]^1].n;\n        }\n    }\n}\n}\nint main()\n{\n    using namespace graph;\n    init();\n    Flow::init();\n    int n,m,u,v,w;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w);\n    }\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&flow[i]);\n    flow[1]=1234567890;\n    flow[n]=1234567890;\n    spfa(1);\n    spfa(n);\n    for(int i=1;i<=n;i++)\n        for(int j=head[i];~j;j=e[j].nxt)\n            if(dis[0][i]+e[j].v+dis[1][e[j].n]==dis[0][n])\n                Flow::add(i,e[j].n,min(flow[i],flow[e[j].n]));\n    Flow::isap(n);\n    printf(\"%lld\\n\",sum);\n    return 0;\n}\n```",
        "postTime": 1530954519,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011 \u975e\u5b8c\u7f8e\u89e3\u6cd5"
    },
    {
        "content": "\u521a\u5b66\u6700\u5927\u6d41\uff0c\u6765\u505a\u505a\u8fd9\u9898\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u4ee5\u8d77\u70b9\u51fa\u53d1\u7684\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u5224\u65ad\u6bcf\u6761\u8fb9\u5c5e\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\u3002\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u5224\u65ad\u5462\uff1f\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6bd4\u5982\u4eceu\u5230v\u6709\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5982\u679c\u8d77\u70b9\u5230u\u7684\u8ddd\u79bb+\u8fd9\u6761\u8fb9\u6743=\u8d77\u70b9\u5230v\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\u4e86\u3002\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\u3002\n\n\u7b49\u7b49\uff01\uff01\u8fd9\u9650\u5236\u662f\u5728\u70b9\u4e0a\u554a\uff0c\u597d\u50cf\u6ca1\u6cd5\u76f4\u63a5\u8dd1\uff1f\n\n~~\u5982\u679c\u4f60\u89c9\u5f97\u6ca1\u95ee\u9898\u53ef\u4ee5\u76f4\u63a5\u8dd1\uff0c\u90a3\u4f60\u5c31\u8dd1\u5427\u8bf4\u4e0d\u5b9a\u660e\u5929\u5c31\u6709\u4e2a\u65b0\u7b97\u6cd5\u4e86\u3002\u3002\u3002~~\n\n\u6211\u4eec\u53ef\u4ee5\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5176\u4e2d\u8fde\u4e00\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u5bb9\u91cf\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8dd1\u4e86\uff0c\u6211\u7528\u4e86Edmonds-Karp\u7b97\u6cd5\uff08\u76ee\u524d\u53ea\u4f1a\u8fd9\u4e2a\uff09\n\n\u9644\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\nconst long long INF=1e18;\nint n,m,c,r[1002];\nbool f[502];\nlong long a[1002],d[502];\ntypedef struct{\n    int to,dist;\n}P;\nstruct Edge{\n    int from,to;\n    long long cap,flow;\n    Edge(int u,int v,long long c,long long f):from(u),to(v),cap(c),flow(f){}\n};\nvector<Edge>edges;\nvector<int>g[1002];\nvector<P>p[502];\nP aa;\nvoid spfa(int s){\n    queue<int>q;\n    for (int i=1;i<=n;i++)d[i]=INF;\n    d[s]=0;q.push(s);f[s]=1;\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();f[u]=0;\n        for (int i=0;i<p[u].size();i++)\n        if (d[u]+p[u][i].dist<d[p[u][i].to])\n        {\n            d[p[u][i].to]=d[u]+p[u][i].dist;\n            if (!f[p[u][i].to])\n            {\n                f[p[u][i].to]=1;q.push(p[u][i].to);\n            }\n        }\n    }\n}\nvoid add(int from,int to,long long cap){\n    edges.push_back(Edge(from,to,cap,0));\n    edges.push_back(Edge(to,from,0,0));\n    g[from].push_back(edges.size()-2);\n    g[to].push_back(edges.size()-1); \n}\nlong long maxflow(int s,int t){\n    long long flow=0;\n    while(1)\n    {\n        memset(a,0,sizeof(a));\n        queue<int>q;\n        q.push(s);\n        a[s]=INF;\n        while(!q.empty())\n        {\n            int x=q.front();q.pop();\n            for (int i=0;i<g[x].size();i++)\n            {\n                Edge e=edges[g[x][i]];\n                if (!a[e.to] && e.cap>e.flow)\n                {\n                    r[e.to]=g[x][i];\n                    a[e.to]=min(a[x],e.cap-e.flow);\n                    q.push(e.to); \n                }\n            }\n            if (a[t])break;\n        }\n        if (!a[t])break;\n        for (int u=t;u!=s;u=edges[r[u]].from)\n        {edges[r[u]].flow+=a[t];edges[r[u]^1].flow-=a[t];}\n        flow+=a[t];\n    }\n    return flow;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);int u,v,w;\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        aa.to=v;aa.dist=w;\n        p[u].push_back(aa);\n        aa.to=u;\n        p[v].push_back(aa); \n    }\n    spfa(1);\n    for (int i=1;i<=n;i++)\n    for (int j=0;j<p[i].size();j++)\n    if (d[i]+p[i][j].dist==d[p[i][j].to])\n    add(i+n,p[i][j].to,INF);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&c);\n        if (i!=1 && i!=n)add(i,i+n,c);else add(i,i+n,INF);\n    }\n    printf(\"%lld\",maxflow(1,n));\n    return 0;\n}\n```",
        "postTime": 1494336827,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u6ee1\u7b80\u5355\u7684\n\n\u8fd9\u9898\u8981\u6c42\u5fc5\u987b\u8981\u8d70\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u95ee\u9898\u662f\u548c\u7f51\u7edc\u6d41\u6a21\u677f\u4e0d\u4e00\u6837\u7684\uff0c\u8003\u8651\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u624d\u662f\u6709\u7528\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u51fa\u54ea\u4e9b\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\u5373\u53ef\u3002\u8003\u8651\u7528 $\\text{spfa}$ \u8ba1\u7b97\u51fa\u6240\u6709\u70b9\u7684 $dis$ \u503c\uff0c\u90a3\u4e48\u6709\u7528\u7684\u8fb9\u4e00\u5b9a\u662f $dis_u+val=dis_v$ \u7684\u8fb9\uff0c\u8fd9\u79cd\u8fb9\u624d\u6709\u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u9884\u5904\u7406\u51fa\u6765\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff0c\u76f4\u63a5\u679a\u4e3e\u8fb9\u8fdb\u884c\u5224\u65ad\u6b63\u786e\u6027\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u6ee1\u8db3 $dis_u+val=dis_v$ \u4f46\u5176\u5b9e\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8bdd\uff0c\u5728 $v$ \u5230 $n$ \u7684\u8def\u4e0a\u4e00\u5b9a\u4f1a\u51fa\u73b0\u65ad\u6d41\uff0c\u6240\u4ee5\u76f4\u63a5\u5efa\u8fb9\u5373\u53ef\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u3002~~INF\u4e00\u5b9a\u4e0d\u80fd\u8bbe0x3f3f3f3f\uff0c\u6211\u8c03\u8fd9\u73a9\u610f\u8c03\u4e861h~~\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int NR=1005+10;\nconst int MR=3e5+10;\nconst int INF=1e18;\nvoid Min(int& x,int y){x=min(x,y);}\nvoid Max(int& x,int y){x=max(x,y);}\nint n,m;\nint a[NR];\nint to[MR*5],nxt[MR*5],val[MR*5];\nint head[NR<<1];\nint tot=1;\nvoid add(int x,int y,int z)\n{\n\tto[tot]=y;\n\tval[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot++;\n}\nint s[MR],t[MR],v[MR];\nbool vis[NR];\nint dis[NR];\nvoid spfa()\n{\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1]=0;vis[1]=1;queue<int>q;q.push(1);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();vis[x]=0;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tif(dis[y]>dis[x]+val[i])\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+val[i];\n\t\t\t\tif(!vis[y])vis[y]=1,q.push(y);\n\t\t\t}\n\t\t}\n\t}\n}\nint S,T;\nint dep[NR<<1];\nint now[NR<<1];\nbool bfs()\n{\n\tmemcpy(now,head,sizeof(now));\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int>q;q.push(S);dep[S]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];if(!val[i]||dep[y])continue;\n\t\t\tdep[y]=dep[x]+1;q.push(y);if(y==T)return 1;\n\t\t}\n\t}return 0;\n}\nint dinic(int x,int flow)\n{\n\tif(x==T)return flow;int mxflow=0;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tif(flow==mxflow)return flow;\n\t\tint y=to[i];now[x]=i;\n\t\tif(!val[i]||dep[y]!=dep[x]+1)continue;\n\t\tint num=dinic(y,min(val[i],flow-mxflow));\n\t\tmxflow+=num;val[i]-=num,val[i*2-(i^1)]+=num;\n\t}\n\treturn mxflow;\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nsigned main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\ts[i]=x,t[i]=y;v[i]=z;add(x,y,z),add(y,x,z);\n\t}spfa();\n\tmemset(head,0,sizeof(head));tot=1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(dis[t[i]]==dis[s[i]]+v[i])add(s[i]+n,t[i],INF),add(t[i],s[i]+n,0);\n\t\tif(dis[s[i]]==dis[t[i]]+v[i])add(t[i]+n,s[i],INF),add(s[i],t[i]+n,0);\n\t}\n\tfor(int i=1;i<=n;i++)a[i]=read();S=1,T=n*2;\n\tadd(1,n+1,INF),add(n+1,1,0);add(n,n*2,INF),add(n*2,n,0);\n\tfor(int i=2;i<n;i++)add(i,i+n,a[i]),add(i+n,i,0);\n\tint ans=0;while(bfs())ans+=dinic(S,INF);printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n",
        "postTime": 1611324370,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\n\u8fd9\u4e0d\u7981\u8ba9\u6211\u4eec\u60f3\u5230\u6700\u77ed\u8def\u5f84\u6811\u548c\u6700\u77ed\u8def\u5f84\u56fe\uff0c\u4ed6\u4eec\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u5728\u67d0\u4e00\u6761\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u4e0d\u8fc7\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u5e76\u4e0d\u80fd\u5305\u542b\u6240\u6709\u53ef\u80fd\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u6700\u77ed\u8def\u5f84\u56fe\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n\u4e8e\u662f\u9898\u76ee\u5c31\u975e\u5e38\u6e05\u6670\u4e0e\u7b80\u5355\u4e86\uff0c\u6240\u6709\u7684\u6570\u636e\u5305\u53ea\u80fd\u5728\u6700\u77ed\u8def\u5f84\u56fe\u4e0a\u8fdb\u884c\u4f20\u8f93\uff0c\u4ece\u8def\u7531\u56681\u4f20\u8f93\u5230n\u8def\u7531\u5668 \uff0c\u6bcf\u4e2a\u8def\u7531\u5668\u6709\u4e00\u4e2a\u6700\u5927\u541e\u5410\u91cf\uff0c\u95ee\u4ece1\u5230n \u4f20\u8f93\u6570\u636e\u7684\u6700\u5927\u541e\u5410\u91cf\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e2a\u70b9i \uff0c\u62c6\u70b9\u4e3a i_1,i_2 \u3002\u4ece i_1 \u5411i_2 \u8fde\u5bb9\u91cf\u4e3ai \u7684\u541e\u5410\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u5c31\u9650\u5236\u4e86\u7ecf\u8fc7\u8def\u7531\u5668i \u7684\u6570\u636e\u6d41\u91cf\uff0c\u5bf9\u4e8e\u6700\u77ed\u8def\u5f84\u56fe\u4e0a\u7684\u4e00\u6761\u8fb9 (v,v)\uff0c\u4ece u_2 \u5411v1 \u8fde\u5bb9\u91cf\u4e3a\u65e0\u7a77\u7684\u8fb9\u6765\u4ee3\u8868\u4ece u\u5411 v\u53d1\u9001\u6570\u636e\u65f6\u7684\u60c5\u51b5\uff0c\u4ece v_2 \u5411 u_1 \u8fde\u5bb9\u91cf\u4e3a\u65e0\u7a77\u7684\u8fb9\u4ee3\u8868u \u5411 v\u53d1\u9001\u6570\u636e\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u80fd\u4f7f\u5f97\u7ecf\u8fc7\u7684\u6570\u636e\u4e00\u5b9a\u901a\u8fc7 u_1->u_2 \u8fd9\u6761\u8fb9\u4ece\u800c\u9650\u5236\u6d41\u91cf\u5927\u5c0f\u3002\n\n\u6e90\u70b9 s\u4e3a 1_1 \uff0c\u6c47\u70b9 t\u4e3a n_2 \uff0c\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n```\n#include<bits/stdc++.h>\n#define N 200020\n#define maxn 1000\n#define maxm 1000010\n#define inf 1000000000000000LL\nusing namespace std;\nint read()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile (ch<'0' || ch>'9') {if (ch=='-') f=-1; ch=getchar();}\n\twhile (ch>='0' && ch<='9') {x=x*10+ch-'0'; ch=getchar();}\n\treturn x*f;\n}\n\nint n,m;\nstruct EdgeNode{int to,next;long long cap;}edge[maxm];\nstruct RoadNode{int to,next,len;}road[maxn<<1];\nint head[maxn<<1],cnt=1,last[maxn],tot;\nvoid addroad(int u,int v,int w) {\n\ttot++; road[tot].to=v; road[tot].next=last[u];\n\tlast[u]=tot; road[tot].len=w;\n}\nvoid insertroad(int u,int v,int w) {addroad(u,v,w); addroad(v,u,w);}\nvoid addedge(int u,int v,long long w) {\n\tcnt++; edge[cnt].next=head[u];\n\thead[u]=cnt; edge[cnt].to=v; edge[cnt].cap=w;\n}\nvoid insertedge(int u,int v,long long w) {addedge(u,v,w); addedge(v,u,0);}\nlong long dis[maxn]; int s,t; bool visit[maxn];\n\nvoid spfa()\n{\n\tfor (int i=s; i<=t; i++) dis[i]=inf;\n\tqueue<int>q; q.push(s); visit[s]=1; dis[s]=0;\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop(); visit[now]=0;\n\t\tfor (int i=last[now]; i; i=road[i].next)\n\t\tif (dis[road[i].to]>dis[now]+road[i].len)\n\t\t{\n\t\t\tdis[road[i].to]=(long long)(dis[now]+road[i].len);\n\t\t\tif (!visit[road[i].to])\n\t\t\t\tvisit[road[i].to]=1,q.push(road[i].to);\n\t\t}\n\t}\n}\nint h[maxn<<1],cur[maxn<<1],S,T;\nqueue<int>Q;\nbool in[N];\nlong long xf[N];\nint l[N];\nlong long PR()\n{\n\tfor(int i=S;i<=T;i++)if(i!=S)xf[i]=0,l[i]=0;else l[i]=T+1;\n\tfor(int i=head[S];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(edge[i].cap==0)continue;\n\t\tedge[i^1].cap+=edge[i].cap;\n\t\txf[v]+=edge[i].cap,xf[S]-=edge[i].cap;\n\t\tedge[i].cap=0;\n\t\tif(v!=S&&v!=T&&!in[v])Q.push(v),in[v]=1;\n\t}\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();Q.pop();in[u]=0;\n\t\tfor(int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(l[u]!=l[v]+1||edge[i].cap==0)continue;\n\t\t\tlong long flow=min(edge[i].cap,xf[u]);\n\t\t\tedge[i].cap-=flow,edge[i^1].cap+=flow;\n\t\t\txf[v]+=flow,xf[u]-=flow;\n\t\t\t//if(v==T)while(1);\n\t\t\tif(v!=S&&v!=T&&!in[v])Q.push(v),in[v]=1;\n\t\t}\n\t\tif(xf[u]==0)continue;\n\t\tint tmp=1000000000;\n\t\tfor(int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tif(edge[i].cap==0)continue;\n\t\t\ttmp=min(tmp,l[edge[i].to]+1);\n\t\t}\n\t\tif(tmp<=2*(T+1)-1)\n\t\t{\n\t\t\tl[u]=tmp;\n\t\t\tif(!in[u])Q.push(u);\n\t\t}\n\t}\n\treturn xf[T];\n}\nint tt[maxn],uu[maxm],vv[maxm],ww[maxm];\nint main()\n{\n\tn=read(),m=read();\n\tfor (int i=1; i<=m; i++)\n\t\tuu[i]=read(),vv[i]=read(),ww[i]=read(),insertroad(uu[i],vv[i],ww[i]);\n\ts=1,t=n; spfa();\n\tfor (int i=1; i<=n; i++) tt[i]=read();\n\t\tS=0; T=n*2+1;\n\tfor (int i=2; i<=n-1; i++) insertedge(i,i+n,(long long)tt[i]);\n\tinsertedge(S,1,inf); insertedge(1,1+n,inf); insertedge(n,n+n,inf);\n\tinsertedge(n+n,T,inf);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tif (dis[uu[i]]+ww[i]==dis[vv[i]]) insertedge(uu[i]+n,vv[i],inf);\n\t\tif (dis[vv[i]]+ww[i]==dis[uu[i]]) insertedge(vv[i]+n,uu[i],inf);\n\t}\n\tprintf(\"%lld\\n\",PR());\n\treturn 0;\n}\n```\n",
        "postTime": 1590825403,
        "uid": 324858,
        "name": "\u26a1114514_zzm\u26a1",
        "ccfLevel": 5,
        "title": "P3171 [CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf"
    },
    {
        "content": "## \u9707\u60ca\uff01\u6211\u5c45\u7136\u7528\u8d39\u7528\u6d41\u628a\u8fd9\u9898\u6c34\u8fc7\u53bb\u4e86\u3002\n\n\u9996\u5148\u5148\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\n\u628a\u4e00\u4e2a\u70b9\u62c6\u4e3a\u4e00\u4e2a\u5165\u70b9\u548c\u4e00\u4e2a\u51fa\u70b9\u3002\n\u7136\u540e\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u8fb9\u6743\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n\n\u7136\u540e\u539f\u56fe\u4e2d\u4e00\u6761\u4ece$u$\u5230$v$\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\uff0c\u5bf9\u5e94\u7740\u65b0\u5efa\u7684\u56fe\u4e2d\u4e00\u6761\u4ece$u$\u7684\u51fa\u70b9\u5230$v$\u7684\u5165\u70b9\u8d39\u7528\u4e3a$w$\uff0c\u6d41\u91cf\u4e3aINF\u7684\u8fb9\u548c\u4e00\u6761\u4ece$v$\u7684\u51fa\u70b9\u5230$u$\u7684\u5165\u70b9\u8d39\u7528\u4e3a$w$\uff0c\u6d41\u91cf\u4e3a$INF$\u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u8d39\u7528\u6d41\u3002\n\n\u56e0\u4e3a\u8d39\u7528\u6d41\u7684\u539f\u7406\u662f\u627e\u6700\u77ed\u8def\u589e\u5e7f\uff0c\u6240\u4ee5\u5f53\u67d0\u4e00\u6b21\u7684\u6700\u77ed\u8def\u4e0e\u4e0a\u4e00\u6b21\u7684\u6700\u77ed\u8def\u4e0d\u4e00\u6837\u65f6\uff0c\u7ed3\u675f\u5c31\u884c\u4e86\u3002\n\n\u4e5f\u8bb8\u5f88\u591a\u4eba\u4e5f\u8fd9\u4e48\u60f3\u8fc7\uff0c\u6211\u4e5f\u60f3\u8fc7\u8fd9\u6837\u4f1a$T$\uff0c\u4f46\u662f\u4eba\u603b\u662f\u8981\u6709\u68a6\u60f3\u3002\u7136\u540e\u6211\u4e00\u4ea4\u679c\u7136$T$\u4e86\u3002\u3002\u3002\n\n\u4e4b\u540e\u6211\u8111\u5b50\u91cc\u7a81\u7136\u51fa\u73b0\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u60f3\u6cd5\uff0c\u4e00\u4e2a\u968f\u673a\u7684\u56fe\u5e94\u8be5\u5f88\u591a\u8fb9\u90fd\u6709\u91cd\u590d\u3002\uff08\u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u907f\u514d\uff09\u6211\u51b3\u5b9a\u78b0\u78b0\u8fd0\u6c14\uff0c\u6211\u53ea\u628a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6700\u77ed\u7684\u8fb9\u7559\u4e0b\u5efa\u56fe\u3002\u7136\u540e\u4e00\u4ea4\u5c45\u7136\u8fc7\u4e86\u3002\u3002\n\n\u6211\u7acb\u9a6c\u53bb$BZOJ$\u4e0a\u4ea4\u679c\u7136$T$\u4e86\uff0c\u6240\u4ee5\u6211**\u5efa\u8bae\u52a0\u5f3a\u4e00\u4e0b\u6570\u636e\uff01\uff01\uff01**\n\n~~\u6240\u4ee5\u6211\u5c31\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\u6211\u77e5\u9053\u4e00\u5b9a\u5ba1\u6838\u4e0d\u8fc7\uff0c\u4f46\u662f\u5982\u679c\u7ba1\u7406\u5458\u4e0d\u770b\u7684\u8bdd\uff0c\u4e5f\u8bb8\u5c31\u6709\u53ef\u80fd\uff08\u6ed1\u7a3d\uff09\u3002\u5982\u679c\u770b\u5230\u7684\u8bdd\u5c31\u5f53\u505a\u4e3a\u793e\u533a\u505a\u8d21\u732e\u4e86\u3002~~\n```cpp\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define int long long\nconst int INF=1e14+1e8;\nconst int N=10100;\nconst int M=201000;\nint book[N][N];\nstruct edge{\n    int to,nxt,flow;\n    long long cost;\n}e[M*2];\nint cnt=1,head[N];\nvoid add_edge(int u,int v,int flow,long long cost){\n    cnt++;\n    e[cnt].nxt=head[u];\n    e[cnt].to=v;\n    e[cnt].flow=flow;\n    e[cnt].cost=cost;\n    head[u]=cnt;\n    cnt++;\n    e[cnt].nxt=head[v];\n    e[cnt].to=u;\n    e[cnt].flow=0;\n    e[cnt].cost=-cost;\n    head[v]=cnt;\n}\nlong long dis[N],mn;\nint road[N],ans,S,T,n,m;\nbool vis[N];\nbool spfa(){\n    queue<int> q;\n    for(int i=S;i<=T;i++)dis[i]=INF;\n    memset(vis,0,sizeof(vis));\n    dis[S]=0;\n    vis[S]=1;\n    q.push(S);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        vis[u]=0;\n        for(int i=head[u];i;i=e[i].nxt){\n            int v=e[i].to;\n            if(dis[v]>dis[u]+e[i].cost&&e[i].flow){\n                dis[v]=dis[u]+e[i].cost;\n                road[v]=i;\n                if(vis[v]==0){\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    if(dis[T]==INF)return false;\n    if(mn==1e14)mn=min(mn,dis[T]);\n    else if(dis[T]!=mn)return false;\n    int minn=INF;\n    for(int i=T;i!=S;i=e[road[i]^1].to)\n        minn=min(minn,e[road[i]].flow);\n    ans+=minn;\n    for(int i=T;i!=S;i=e[road[i]^1].to){\n        e[road[i]].flow-=minn;\n        e[road[i]^1].flow+=minn;\n    }\n    return true;\n}\nint read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nsigned main(){\n    n=read();m=read();\n    for(int i=1;i<=m;i++){\n        int u=read(),v=read(),w=read();\n        if(book[u][v])book[u][v]=book[v][u]=min(book[u][v],w);\n        else book[u][v]=book[v][u]=w;\n    }\n    for(int i=1;i<=n;i++)\n    \tfor(int j=i+1;j<=n;j++)\n    \t\tif(book[i][j]){\n        \t\tadd_edge(i+n,j,INF,book[i][j]);\n        \t\tadd_edge(j+n,i,INF,book[i][j]);\n    \t\t}\n    for(int i=1;i<=n;i++){\n        int w=read();\n        if(i==1||i==n)add_edge(i,i+n,INF,0);\n        else add_edge(i,i+n,w,0);\n    }\n    S=1;T=n+n;\n    mn=1e14;\n    while(spfa());\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1553084879,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "###Dinic+SPFA\n\n###\u5f00long long\n\n###\u5982\u679c\u770b\u8fc7\u4e0a\u9762\u4e24\u6761\u8fd8\u6ca1\u660e\u767d\u7684\uff0c\u95ee\u9898\u5e94\u8be5\u5c31\u5728\u600e\u4e48\u5728spfa\u4e4b\u540e\u627e\u51fa\u6700\u77ed\u8def\u5f84\u3002\u53ef\u4ee5\u904d\u5386\u4e00\u8fb9\u6240\u6709\u70b9\u53ca\u5176\u76f8\u90bb\u70b9\uff0c\u82e5v[y]==v[i]+E[o].w\u5219\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 200005\n#define inf 9223372036854775807\n#define int long long\nint n,S=1,T,m,num_e=1,ans,num_E=1;\nint head[maxn],dis[maxn],had[maxn];\nbool in_que[maxn];\nint vis[maxn],v[maxn],maxx[maxn];\nstruct edge{\n    int to,nex,rest,w;\n}e[maxn],E[maxn];\nvoid add(int x,int y,int z){\n    E[++num_E].to=y;E[num_E].nex=had[x];had[x]=num_E;E[num_E].w=z;\n    E[++num_E].to=x;E[num_E].nex=had[y];had[y]=num_E;E[num_E].w=z;\n}\nvoid add_edge(int x,int y,int z){\n    e[++num_e].to=y;e[num_e].nex=head[x];head[x]=num_e;e[num_e].rest=z;\n    e[++num_e].to=x;e[num_e].nex=head[y];head[y]=num_e;e[num_e].rest=0;\n}\nvoid SPFA(){\n    queue<int> q;\n    q.push(S);\n    in_que[S]=true;\n    for(int i=1;i<=n;i++) v[i]=inf;\n    v[S]=0;\n    while(!q.empty()){\n        int x=q.front();q.pop();in_que[x]=false;\n        for(int i=had[x];i;i=E[i].nex){\n            int y=E[i].to;\n            if(v[y]>v[x]+E[i].w){\n                v[y]=v[x]+E[i].w;\n                if(!in_que[y]) q.push(y),in_que[y]=true;\n            }\n        }\n    }\n    for(int i=1;i<=n;i++){\n        add_edge(i,i+n,maxx[i]);\n        for(int o=had[i];o;o=E[o].nex){\n            int y=E[o].to;\n            if(v[y]==v[i]+E[o].w){\n                add_edge(i+n,y,inf);\n            }\n        }\n    }\n}\nbool bfs(){\n    memset(dis,0,sizeof(dis));\n    queue<int> q;\n    q.push(S);\n    dis[S]=1;\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for(int i=head[x];i;i=e[i].nex){\n            int y=e[i].to;\n            if(!dis[y]&&e[i].rest) dis[y]=dis[x]+1,q.push(y);\n        }\n    }\n    if(dis[T]) return true;\n    return false;\n}\nint dfs(int x,int minn){\n    if(x==T) return minn;\n    int sum=0,qaq=0;\n    for(int i=head[x];i;i=e[i].nex){\n        int y=e[i].to;\n        if(dis[y]==dis[x]+1&&e[i].rest){\n            qaq=dfs(y,min(minn-sum,e[i].rest));\n            e[i].rest-=qaq;\n            e[i^1].rest+=qaq;\n            sum+=qaq;\n            if(sum==minn) return sum;\n        }\n    }\n    if(!sum) dis[x]=0;\n    return sum;\n}\nint dinic(){\n    int anss=0;\n    while(bfs()) anss+=dfs(S,inf);\n    return anss;\n}\nint b[maxn];\n#undef int\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    int a,b,c;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n    for(int i=1;i<=n;i++) scanf(\"%lld\",&maxx[i]);\n    maxx[1]=maxx[n]=inf;\n    SPFA();S=1;T=n*2;\n    printf(\"%lld\",dinic());\n\n    return 0;\n}\n\n```",
        "postTime": 1508248852,
        "uid": 58489,
        "name": "\u4e1c\u5bfa\u4e36\u95f2\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u54c7\u585e\u697c\u4e0b\u521d\u4e2d\u751f\u90fd\u5f00\u59cb\u505a\u7f51\u7edc\u6d41\u4e86\u554a\u4f24QwQ\n\n\u6700\u77ed\u8def\u7f51\u7edc\u6d41\u5957\u8def\u6a21\u677f\uff0c\n\n\u6700\u77ed\u8def\u8c8c\u4f3c\u9009\u7528\u4e0d\u52a0\u5bf9\u4f18\u5316\u7684dijkstra\u6216\u8005spfa\u66f4\u597d\uff1f\u4e0d\u7ba1\u53cd\u6b63\u5199dijk+heap\u5199\u4e60\u60ef\u4e86\u5c31\u61d2\u5f97\u6539\u4e86QwQ\n\n\u7f51\u7edc\u6d41\u91c7\u7528dinic\uff0c\u5957\u8def\u662f\u62c6\u70b9\u3002\n\n\u672c\u9898\u89e3\u4e3b\u8981\u662f\u7528\u6765\u819c\u62dc\u697c\u4e0bccj\u5927\u4f6c\u7684QwQ\u3010\u9003\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<climits>\n#define INF (LLONG_MAX/3)\n#define MAXN 1010\n#define MAXM 200010\n#define lint long long\n#define debug(x) cerr<<#x<<\"=\"<<x\n#define sp <<\" \"\n#define ln <<endl\nusing namespace std;\nint n;bool vis[MAXN];lint d[MAXN];\nstruct node{\n    int to,wgt;\n    node(int _t,int _w)\n    {\n        to=_t;\n        wgt=_w;\n    }\n};\nvector<node> g[MAXN];\nstruct heapnode{\n    int id;lint dist;\n    heapnode(int _i,lint _d)\n    {\n        id=_i;\n        dist=_d;\n    }\n    bool operator<(const heapnode &hn)const\n    {\n        return this->dist>hn.dist;\n    }\n};\npriority_queue<heapnode> heap;\nstruct edges{\n    int to,pre;lint resf;\n}e[MAXM];\nint etop,h[MAXN],cur[MAXN];\ninline int add_edge(int u,int v,lint c)\n{\n    etop++;\n    e[etop].to=v;\n    e[etop].resf=c;\n    e[etop].pre=h[u];\n    h[u]=etop;\n    return 0;\n}\ninline int build_edge(int u,int v,lint c)\n{\n    add_edge(u,v,c),add_edge(v,u,0);return 0;\n}\nlint dijkstra(int s,int t)\n{\n    memset(vis,false,sizeof(vis));\n    while(!heap.empty()) heap.pop();\n    for(int i=1;i<=n;i++) d[i]=INF;\n    heap.push(heapnode(s,d[s]=0));\n    while(!heap.empty())\n    {\n        int x=heap.top().id;heap.pop();\n        if(vis[x]) continue;vis[x]=true;\n        for(int i=0;i<g[x].size();i++)\n        {\n            int v=g[x][i].to;lint w=g[x][i].wgt;\n            if(!vis[v]&&d[v]>d[x]+w)\n                heap.push(heapnode(v,d[v]=d[x]+w));\n        }\n    }\n    return d[t];\n}\nqueue<int> q;int lev[MAXN];\ninline bool bfs(int s,int t)\n{\n    memset(vis,false,sizeof(vis));\n    while(!q.empty()) q.pop();\n    memset(lev,0,sizeof(lev));\n    lev[s]=0;q.push(s);vis[s]=true;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=h[x];i;i=e[i].pre)\n            if(!vis[e[i].to]&&e[i].resf)\n            {\n                vis[e[i].to]=true;\n                lev[e[i].to]=lev[x]+1;\n                q.push(e[i].to);\n            }\n    }\n    return vis[t];\n}\ninline lint dfs(int s,int t,lint a)\n{\n    if(s==t||!a) return a;\n    lint flow=0,f;\n    for(int &i=cur[s];i;i=e[i].pre)\n        if(lev[e[i].to]==lev[s]+1&&(f=dfs(e[i].to,t,min(e[i].resf,a)))>0)\n        {\n            a-=f;flow+=f;e[i].resf-=f;\n            e[((i-1)^1)+1].resf+=f;\n            if(!a) break;\n        }\n    return flow;\n}\nint main()\n{\n    int m;scanf(\"%d%d\",&n,&m);\n    while(m--)\n    {\n        int u,v,w;scanf(\"%d%d%d\",&u,&v,&w);\n        g[u].push_back(node(v,w));\n        g[v].push_back(node(u,w));\n    }\n    for(int i=1;i<=n;i++)\n    {\n        int c;scanf(\"%d\",&c);\n        if(i==1||i==n) build_edge(i,i+n,INF);\n        else build_edge(i,i+n,c);\n    }\n    int s=1,t=n<<1;\n    dijkstra(1,n);\n    for(int i=1;i<=n;i++)\n        for(int j=0;j<g[i].size();j++)\n            if(d[i]+g[i][j].wgt==d[g[i][j].to])\n                build_edge(i+n,g[i][j].to,INF);\n    lint flow=0;\n    while(bfs(s,t))\n    {\n        for(int i=s;i<=t;i++)\n            cur[i]=h[i];\n        flow+=dfs(s,t,INF);\n    }\n    printf(\"%lld\\n\",flow);return 0;\n}\n```",
        "postTime": 1498313418,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u770b\u4e0a\u53bb\u6ca1\u6709\u4e00\u4efd\u50cf\u6837\u7684\u9898\u89e3\uff1b\n\n\u5176\u5b9e\u662f\u4e00\u9053\u4e0d\u7b97\u96be\u7684\u7701\u9009\u9898\uff0c\u5c31\u662f\u7ec3\u7ec3\u677f\u5b50\uff08spfa+\u6700\u5927\u6d41\uff09\uff1b\n\n\u628a\u6700\u77ed\u8def\u8dd1\u51fa\u6765\u540e\u6839\u636edis[a[i]]+w[i]==dis[b[i]],\u6765\u5efa\u7f51\u7edc\u6d41\u7684\u56fe\uff1b\n\n\u6ce8\u610f\u5f00long long\uff01\n\n~~~\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#define N 100005\n#define LL long long\nusing namespace std;\nLL LINF=1;\nstruct node{\n    int a,b,nt;\n    LL w;\n}e[N],mp[N];\nint cnt,p[N],dis[N],d[N],cur[N],qq[N*4],n,m;bool vis[N];\nqueue<int>q;\nvoid add(int x,int y,LL z){\n    cnt++;\n    e[cnt].a=x;e[cnt].b=y;e[cnt].w=z;\n    e[cnt].nt=p[x];\n    p[x]=cnt;\n}\nvoid add1(int x,int y,LL z){\n    cnt++;\n    mp[cnt].a=x;mp[cnt].b=y;mp[cnt].w=z;\n    mp[cnt].nt=p[x];\n    p[x]=cnt;\n}\nvoid spfa(){\n    memset(dis,63,sizeof(dis));\n    q.push(1);\n    vis[1]=true;dis[1]=0;\n    while(!q.empty()){\n        int k=q.front();q.pop();vis[k]=false;\n        for(int i=p[k];i;i=e[i].nt){\n            int kk=e[i].b;\n            if(dis[kk]>dis[k]+e[i].w){\n                dis[kk]=dis[k]+e[i].w;\n                if(!vis[kk]){\n                    vis[kk]=true;\n                    q.push(kk);\n                }\n            }\n        }\n    }\n}\nint bfs(){\n    memset(d,-1,sizeof(d));\n    int head=0,tail=1;\n    qq[0]=1;d[1]=0;\n    while(head<tail){\n        int k=qq[head];head++;\n        cur[k]=p[k];\n        for(int i=p[k];i;i=mp[i].nt){\n            int kk=mp[i].b;\n            if(mp[i].w>0&&d[kk]<0){\n                d[kk]=d[k]+1;\n                qq[tail++]=kk;\n            }\n        }\n    }\n    if(d[2*n]<0)return 0;\n    else return 1;\n}\nint deal(int x){\n    if(x&1)return x+1;\n    else return x-1;\n}\nLL dfs1(int k,LL flow){\n    LL a=0;\n    if(k==2*n)return flow;\n    for(int i=p[k];i;i=mp[i].nt){\n        int kk=mp[i].b;\n        if(mp[i].w>0&&d[kk]==d[k]+1)\n            if(a=dfs1(kk,min(flow,mp[i].w))){\n                   //cur[k]=i;\n                mp[i].w-=a;\n                mp[deal(i)].w+=a;\n                return a;\n            }\n    }\n    return 0;\n}\nLL dfs(int k,LL flow){\n    LL a=0;\n    if(k==2*n)return flow;\n    for(int i=cur[k];i;i=mp[i].nt){\n        int kk=mp[i].b;\n        if(mp[i].w>0&&d[kk]==d[k]+1){\n            LL f=dfs(kk,min(flow-a,mp[i].w));\n            a+=f;\n            mp[i].w-=f;\n            mp[deal(i)].w+=f;\n        }\n    }\n    return a;\n}\nint main()\n{\n    for(int i=1;i<=60;i++)LINF*=2;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int x,y;\n        LL z;\n        scanf(\"%d%d%lld\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    spfa();\n    for(int i=1;i<=2*n;i++)p[i]=0;\n    for(int i=1;i<=2*m;i+=2){\n        if(dis[e[i].a]+e[i].w==dis[e[i].b]){\n            add1(e[i].a+n,e[i].b,LINF);\n            add1(e[i].b,e[i].a+n,0);\n        }\n        if(dis[e[i].b]+e[i].w==dis[e[i].a]){\n            add1(e[i].b+n,e[i].a,LINF);\n            add1(e[i].a,e[i].b+n,0);\n        }\n    }\n    for(int i=1;i<=n;i++){\n        LL c;scanf(\"%lld\",&c);\n        if(i!=1&&i!=n)add1(i,i+n,c);\n        else add1(i,i+n,LINF);\n        add1(i+n,i,0);\n    }\n    LL ans=0;\n    while(bfs()){\n        LL t;\n        while(t=dfs(1,1<<30))ans+=t;\n    }\n    cout<<ans;\n    return 0;\n}\n```\n~~~",
        "postTime": 1490853744,
        "uid": 29379,
        "name": "Tyw_ei",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    },
    {
        "content": "\u9898\u9762\u5373\u9898\u89e3\u7684\u9898...\u601d\u8def\u5f88\u663e\u7136\uff0c**\u5148\u7528dijkstra\u8dd1\u51fa\u6700\u77ed\u8def\uff0c\u7136\u540e\u5012\u7740\u5efa\u4e00\u5f20\u6700\u77ed\u8def\u56fe\uff0c\u7136\u540e\u968f\u4fbf\u8dd1\u6700\u5927\u6d41\u5c31\u597d\u4e86\u3002**\n\n\u552f\u4e00\u5751\u7684\u662f\u7cbe\u5ea6\u95ee\u9898..\u4e00\u5b9a\u6ce8\u610f\u7528long long\uff0cINF\u8981\u591f\u5927..\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct graph{\n    struct node {\n        int to, next, neg;\n        long long dis;\n    }edge[400005];\n    int head[505], top;\n    graph(){top = 0; memset(head, 0, sizeof head);}\n    void push(int i, int j, long long k)\n    {\n        edge[++top].to = j;\n        edge[top].dis  = k;\n        edge[top].next = head[i];\n        head[i] = top;\n    }\n}g_nor, g_build;\n\nint n, m;\nlong long siz[505];\nlong long dis[505];\nint did[505][505];\nint vis[505];\n\nvoid dijkstra()\n{\n    memset(dis, 0x7f, sizeof dis);\n    memset(vis, 0, sizeof vis);\n    memset(did, 0, sizeof did);\n    dis[1] = 0;\n    for (int i = 2; i <= n; i++) {\n        int k = 0;\n        for (int j = 1; j <= n; j++)\n            if (!vis[j] && dis[j] < dis[k])\n                k = j;\n        vis[k] = 1;\n        for (int j = g_nor.head[k]; j; j = g_nor.edge[j].next)\n            dis[g_nor.edge[j].to] = min(dis[g_nor.edge[j].to], dis[k]+g_nor.edge[j].dis);\n    }\n}\n\nvoid build(int i)\n{\n    for (int k = g_nor.head[i]; k; k = g_nor.edge[k].next) {\n        int to = g_nor.edge[k].to; long long d = g_nor.edge[k].dis;\n        if (dis[to] + d == dis[i] && !did[to][i]) {\n            g_build.push(to, i, min(siz[to], siz[i]));\n            g_build.push(i, to, 0);\n            g_build.edge[g_build.top].neg = g_build.top-1;\n            g_build.edge[g_build.top-1].neg = g_build.top;\n            did[to][i] = 1;\n            build(to);\n        }\n    }\n}\n\nint S, T;\nint lev[505], bfstime = 0;\nqueue<int> que;\nbool bfs()\n{\n    lev[S] = 1; vis[S] = ++bfstime;\n    que.push(S);\n    while (!que.empty()) {\n        int t = que.front(); que.pop();\n        for (int k = g_build.head[t]; k; k = g_build.edge[k].next) {\n            if (!g_build.edge[k].dis || vis[g_build.edge[k].to] == bfstime) continue;\n            int to = g_build.edge[k].to;\n            lev[to] = lev[t] + 1;\n            vis[to] = bfstime;\n            que.push(to);\n        }\n    }\n    return vis[T] == bfstime;\n}\nlong long dfs(int nd, long long maxflow)\n{\n    if (nd == T || !maxflow) return maxflow;\n    long long ans = 0, t;\n    for (int k = g_build.head[nd]; k; k = g_build.edge[k].next) {\n        if (!g_build.edge[k].dis || lev[g_build.edge[k].to] != lev[nd]+1) continue;\n        int to = g_build.edge[k].to, neg = g_build.edge[k].neg;\n        long long d = g_build.edge[k].dis;\n        t = dfs(to, min(maxflow, d));\n        maxflow -= t;\n        ans += t;\n        g_build.edge[k].dis -= t;\n        g_build.edge[neg].dis += t;\n    }\n    if (maxflow) lev[nd] = -1;\n    return ans;\n}\nlong long dinic()\n{\n    long long ans = 0; S = 1, T = n;\n    while (bfs())\n        ans += dfs(S, LONG_MAX);\n    return ans;\n}\n\nint main()\n{\n    //freopen(\"cqoi15_network.in\", \"r\", stdin);\n    //freopen(\"cqoi15_network.out\", \"w\", stdout);\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i++) {\n        int a, b;\n        long long d;\n        scanf(\"%d%d%lld\", &a, &b, &d);\n        g_nor.push(a, b, d);\n        g_nor.push(b, a, d);\n    }\n    for (int i = 1; i <= n; i++)\n        scanf(\"%lld\", &siz[i]);\n    siz[1] = siz[n] = 1ll<<60;\n    dijkstra();\n    build(n);\n    memset(vis, 0, sizeof vis);\n    cout << dinic() << endl;\n    return 0;\n}\n```",
        "postTime": 1485270776,
        "uid": 12511,
        "name": "ljt12138",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3171 \u3010[CQOI2015]\u7f51\u7edc\u541e\u5410\u91cf\u3011"
    }
]