[
    {
        "content": "### \u601d\u8def\uff1a\n\n\u3000\u3000\u5148\u5410\u69fd\u4e00\u822c\u6570\u636e\u8f83\u6c34\uff5e\uff5e\n\n\u3000\u3000\u672c\u6765\u60f3\u6253\u4e2a\u66b4\u529b\uff0c\u4e8e\u662f\u7801\u4e86\u4e00\u4e2a\u83ab\u961f+\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt{n}logn)$\uff08\u663e\u7136\u8fc7\u4e0d\u4e86\u554a\uff01\uff5e\uff09\uff0c\u7ed3\u679c$AC$\u8fd8\u8fdb\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u3002\n\n\u3000\u3000\u9996\u5148\u5c31\u662f\u5e38\u89c4\u7684\u83ab\u961f\u79bb\u7ebf\uff0c\u8bb0\u5f55\u533a\u95f4\uff0c\u6392\u5e8f\u3002\n\n\u3000\u3000\u5bf9\u539f\u6570\u79bb\u6563\u5316\uff0c\u518d\u6784\u5efa\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e2a\u6570\u7684\u589e\u51cf\uff0c\u67e5\u8be2\u6574\u4e2a\u533a\u95f4\u7b2c$k$\u5927\uff0c\u8bb0\u5f55$ans$\u5c31$OK$\u4e86\u3002\n  \n$\\quad$\u8fd9\u91cc\u6211\u5b89\u5229\u4e00\u6ce2\u6743\u503c\u7ebf\u6bb5\u6811\uff1a\n\t\n$\\quad$1\u3001\u63d2\u5165\u64cd\u4f5c\uff1a\u5176\u5b9e\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u5bf9\u4e8e\u79bb\u6563\u540e\u7684\u6570\u6bcf\u6b21\u627e\u5230\u5b83\u6240\u5728\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4f7f\u5176\u6743\u503c\u589e\u51cf$1$\uff08\u8bf4\u660e\u8fd9\u4e2a\u6570\u51fa\u73b0\u4e86\u4e00\u6b21\u6216\u8005\u51cf\u5c11\u4e86\u4e00\u4e2a\uff09\uff0c\u5e76\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u51fa\u73b0\u7684\u4e2a\u6570\uff08\u5373\u533a\u95f4\u6c42\u548c\uff09\n\n$\\quad$2\u3001\u67e5\u8be2\u64cd\u4f5c\uff1a\u8be2\u95ee\u7b2c$k$\u5c0f\u7684\u6570\u65f6\uff0c\u4ece\u6574\u4e2a\u533a\u95f4$[1,n]$\u5f00\u59cb\u9012\u5f52\uff0c\u5f53\u5de6\u513f\u5b50\u533a\u95f4$[l,mid]$\u4e2d\u51fa\u73b0\u7684\u6570\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e$k$\u65f6\uff0c\u67e5\u8be2\u5de6\u513f\u5b50\uff0c\u5426\u5219\u67e5\u8be2\u53f3\u513f\u5b50\u4e2d\u7684\u7b2c$k-sum[l,mid]$\u5c0f\u7684\u6570(\u5373\u5de6\u513f\u5b50\u4e2d\u5df2\u6709$sum[l,mid]<k$\u4e2a\u6570\uff0c\u90a3\u4e48\u6574\u4e2a\u533a\u95f4\u7b2c$k$\u5c0f\u7684\u6570\u5728\u53f3\u513f\u5b50\u91cc\uff0c\u4e14\u662f\u53f3\u513f\u5b50\u4e2d\u7684\u7b2c$k-sum[l,mid]$\u5c0f\u7684\u6570)\uff0c\u5f53\u67e5\u8be2\u5230$l==r$\u65f6\u8fd4\u56de$l$\u5c31$ok$\u4e86\u3002\n\n$\\quad$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2[five20](http://www.cnblogs.com/five20/p/8962105.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff09\n\n### \u4ee3\u7801\uff1a\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define il inline\n#define ll long long\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\nconst int N=300005;\nint tr[N<<2],n,m,pos[N],a[N],ans[N];\nstruct node{\n\tint l,r,k,id;\n}q[N];\nstruct numm{\n\tint v,id;\n\tbool operator < (const numm a)const{return v<a.v;}\n}nm[N];\nil bool cmp(node a,node b){return pos[a.l]==pos[b.l]?a.r<b.r:a.l<b.l;}\nil int gi(){\n\tint a=0;char x=getchar();bool f=0;\n\twhile((x<'0'||x>'9')&&x!='-')x=getchar();\n\tif(x=='-')x=getchar(),f=1;\n\twhile(x>='0'&&x<='9')a=a*10+x-48,x=getchar();\n\treturn f?-a:a;\n}\nil void pushup(int rt){tr[rt]=tr[rt<<1]+tr[rt<<1|1];}\nil void update(int k,int c,int l,int r,int rt){\n\tif(l==k&&r==k){tr[rt]+=c;return;}\n\ttr[rt]+=c;\n\tint m=l+r>>1;\n\tif(k<=m)update(k,c,lson);\n\telse update(k,c,rson);\n\tpushup(rt);\n}\nil int query(int k,int l,int r,int rt){\n\tif(l==r)return l;\n\tint m=l+r>>1;\n\tif(tr[rt<<1]>=k)return query(k,lson);\n\telse return query(k-tr[rt<<1],rson);\n}\nint main(){\n\tn=gi(),m=gi();\n\tint s=int(sqrt(n));\n\tfor(int i=1;i<=n;i++)nm[i].v=gi(),nm[i].id=i,pos[i]=(i-1)/s+1;\n\tsort(nm+1,nm+n+1);\n\tfor(int i=1;i<=n;i++)a[nm[i].id]=i;\n\tfor(int i=1;i<=m;i++)q[i].l=gi(),q[i].r=gi(),q[i].k=gi(),q[i].id=i;\n\tsort(q+1,q+m+1,cmp);\n\tfor(int i=1,l=1,r=0;i<=m;i++){\n\t\twhile(r<q[i].r)update(a[++r],1,1,n,1);\n\t\twhile(r>q[i].r)update(a[r--],-1,1,n,1);\n\t\twhile(l<q[i].l)update(a[l++],-1,1,n,1);\n\t\twhile(l>q[i].l)update(a[--l],1,1,n,1);\n\t\tans[q[i].id]=nm[query(q[i].k,1,n,1)].v;\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1524808919,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "# P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011\n\n[\u539f\u9898\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1533)\n\n**\u9898\u610f**\uff1a\u7ed9\u4f60\u4e00\u5217\u6570\uff0c\u4ee5\u53cam\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u6c42$l$,$r$\u533a\u95f4\u5185\u7684\u7b2c$k$\u5c0f\u6570\n\n\u505a\u6cd5\u5f88\u591a\uff0c\u4e3b\u5e2d\u6811\u3001\u6574\u4f53\u4e8c\u5206\u90fd\u53ef\u4ee5\uff0c\u6211\u7528\u7684\u662f\u79bb\u7ebf+Treap(~~\u4e3b\u8981\u662f\u4e0a\u5348\u521a\u5b66\u4e86\u5e73\u8861\u6811\u6765\u9a97\u70b9\u7ecf\u9a8c~~)\n\n## \u505a\u6cd5\uff1a\n\n\u9996\u5148\u80af\u5b9a\u662f\u5c06\u8be2\u95ee\u6392\u5e8f\uff0c\u81f3\u4e8e\u5982\u4f55\u6392\uff0c\u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u8981\u5206\u5757\uff0c\u7ed3\u679c\u53d1\u73b0\u9898\u76ee\u4e2d\u6709\u8fd9\u53e5\u8bdd\uff1a\n\n```\n\u800c\u4e14\u4e3a\u4e86\u4fdd\u8bc1\u67d0\u4e00\u53ea\u72d7\u72d7\u4e0d\u4f1a\u88ab\u5582\u592a\u591a\u6b21\uff0c\u4ed6\u5582\u7684\u6bcf\u4e2a\u533a\u95f4\uff08i,j\uff09\u4e0d\u4e92\u76f8\u5305\u542b\u3002\n```\n\u8fd9\u6837\u4e00\u6765\u53ea\u8981\u4e00\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u5c31\u884c\u4e86\n\n**\u5177\u4f53\uff1a** \u5b9a\u4e49\u5de6\u53f3\u6307\u9488$l$,$r$\u8868\u793a\u5f53\u524d\u5de6\u53f3\u7aef\u70b9\uff0c\u7531\u4e8e\u6392\u5e8f\u540e\u8be2\u95ee\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u5355\u8c03\u9012\u589e\uff0c\u5c31\u6709\u4e86\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n```cpp\nwhile(r<que[i].r) Insert(root,w[++r]);\nwhile(l<que[i].l) Remove(root,w[l++]);\nans[que[i].id]=getval(root,que[i].k+1);\n```\n\u610f\u4e3a\uff0c\u5f53\u5de6\u53f3\u6307\u9488\u5c0f\u4e8e\u8be2\u95ee\u7684\u5de6\u53f3\u7aef\u70b9\u65f6\uff0c\u4e0d\u65ad\u53f3\u79fb\uff0c\u5b8c\u6210\u540e\u67e5\u8be2\u5e76\u8bb0\u5f55\u5373\u53ef\u3002~~\u5341\u5206\u65e0\u8111~~\n\n### \u6ce8\u610f\u70b9\uff1a\n1.\u4e00\u5f00\u59cbTreap\u4e2d\u4f1a\u63d2\u5165$inf$\u548c$-inf$\uff0c\u56e0\u6b64\u67e5\u8be2\u65f6\u8981\u5c06$k+1$\n\n2.\u53f3\u79fb\u6307\u9488\u65f6\u4e00\u5b9a\u8981\u5148\u79fb$r$\u540e\u79fb$l$\uff08\u5373\u5148\u63d2\u5165\u540e\u5220\u9664\uff09\uff0c\u5426\u5219\u4f1a\u51fa\u9505\n\n3.\u6392\u5e8f\u524d\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8be2\u95ee\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u6700\u540e\u6309\u987a\u5e8f\u8f93\u51fa\n\n### Code\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int N=3e5+2,inf=2147483647;\nint n,m,tot,root,w[N],ans[N];\nstruct node {\n    int l,r,k,id;\n} que[50005];\nstruct treap {\n    int l,r,val,data,size;\n} a[N];\n\nint New(int val) {\n    a[++tot].val=val;\n    a[tot].data=rand();\n    a[tot].size=1;\n    return tot;\n}\n\nvoid update(int p) {\n    a[p].size=a[a[p].l].size+a[a[p].r].size+1;\n}\n\nvoid build() {\n    New(-inf),New(inf);\n    root=1,a[1].r=2;\n    update(root);\n}\n\nint getval(int p,int rank) {\n    if(!p) return inf;\n    if(a[a[p].l].size>=rank) return getval(a[p].l,rank);\n    if(a[a[p].l].size+1==rank) return a[p].val;\n    return getval(a[p].r,rank-a[a[p].l].size-1);\n}\n\nvoid zag(int &p) {\n    int q=a[p].r;\n    a[p].r=a[q].l,a[q].l=p,p=q;\n    update(a[p].l),update(p);\n}\n\nvoid zig(int &p) {\n    int q=a[p].l;\n    a[p].l=a[q].r,a[q].r=p,p=q;\n    update(a[p].r),update(p);\n}\n\nvoid Insert(int &p,int val) {\n    if(!p) {\n        p=New(val);\n        return;\n    }\n    if(val<a[p].val) {\n        Insert(a[p].l,val);\n        if(a[p].data<a[a[p].l].data) zig(p);\n    } else {\n        Insert(a[p].r,val);\n        if(a[p].data<a[a[p].r].data) zag(p);\n    }\n    update(p);\n}\n\nvoid Remove(int &p,int val) {\n    if(!p) return;\n    if(val==a[p].val) {\n        if(a[p].l||a[p].r) {\n            if(!a[p].r||a[a[p].l].data>a[a[p].r].data) zig(p),Remove(a[p].r,val);\n            else zag(p),Remove(a[p].l,val);\n            update(p);\n        } else p=0;\n        return;\n    }\n    val<a[p].val?Remove(a[p].l,val):Remove(a[p].r,val);\n    update(p);\n}\n\nbool cmp(const node &p,const node &q) {\n    if(p.l!=q.l) return p.l<q.l;\n    return p.r<q.r;\n}\n\nint main() {\n    build();\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; ++i) scanf(\"%d\",&w[i]);\n    for(int i=1; i<=m; ++i) scanf(\"%d%d%d\",&que[i].l,&que[i].r,&que[i].k),que[i].id=i;\n    sort(que+1,que+m+1,cmp);\n    for(int i=1,l=1,r=0; i<=m; ++i) {\n        while(r<que[i].r) Insert(root,w[++r]);\n        while(l<que[i].l) Remove(root,w[l++]);\n        ans[que[i].id]=getval(root,que[i].k+1);\n    }\n    for(int i=1; i<=m; ++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}",
        "postTime": 1552389444,
        "uid": 60504,
        "name": "Karnage",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u5728\u8fd9\u91ccmark\u4e00\u4e0b\u6574\u4f53\u4e8c\u5206\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7$O(nlogn)$\u4e8c\u5206\u51fa\u6765\n\n\u5177\u4f53\u800c\u8a00\uff0c\u5c31\u662f\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u6743\u503c\uff0c\u628a\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u6743\u503c\u7684\u6570\u6807\u4e3a1\uff0c\u628a\u5927\u4e8e\u8fd9\u4e2a\u6743\u503c\u7684\u6570\u6807\u4e3a0\uff0c\u90a3\u4e48\u6211\u4eec\u8be2\u95ee\u8fd9\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u8bb0\u4e3a$sum$\uff0c\u5bb9\u6613\u53d1\u73b0\u5982\u679c$k\\leq sum$\u8bf4\u660e\u6211\u4eec\u4e8c\u5206\u7684\u6743\u503c\u5927\u4e86\uff0c\u9700\u8981\u53d8\u5c0f\uff08\u4fdd\u7559$mid$\uff09\uff0c\u5426\u5219\uff0c\u5219\u8981\u53d8\u5927\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u76ee\u600e\u4e48\u505a\u5462\n\n\u9996\u5148\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u6bcf\u4e2a\u6570\u7684\u5177\u4f53\u5927\u5c0f\uff0c\u53ea\u5173\u5fc3\u4ed6\u4eec\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u4e0d\u59a8\u5148\u79bb\u6563\u5316\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u6743\u503c\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u6743\u503c\u7684\u6254\u5230\u4e00\u4e2a\u961f\u5217\u91cc\uff0c\u5c06\u6240\u6709\u5927\u4e8e\u8fd9\u4e2a\u6743\u503c\u7684\u6254\u5230\u53e6\u4e00\u4e2a\u961f\u5217\u91cc\uff0c\u4e0d\u96be\u53d1\u73b0\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\u548c\u7684\u67e5\u8be2\uff0c\u5982\u679c\u7ed3\u679c\u5c0f\u4e8e\u5176$k$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6743\u503c\u8fd8\u8981\u53d8\u5927\u4e00\u4e9b\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5c06\u5176\u6254\u8fdb\u7b2c\u4e8c\u4e2a\u961f\u5217\uff0c\u540c\u65f6\u5176$k$\u503c\u9700\u8981\u51cf\u53bb\u8fd9\u4e2a\u8be2\u95ee\u7684\u7ed3\u679c\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u5219\u8868\u660e\u8fd9\u4e2a\u4e8c\u5206\u7684\u7ed3\u679c\u504f\u5927\uff0c\u6211\u4eec\u5c06\u5176\u6254\u5230\u7b2c\u4e00\u4e2a\u961f\u5217\u91cc\u3002\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e24\u4e2a\u961f\u5217\u518d\u8fdb\u884c\u4e8c\u5206\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u961f\u5217\uff0c\u5c06\u4e8c\u5206\u7684\u6743\u503c\u53d8\u5927\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u961f\u5217\uff0c\u5c06\u4e8c\u5206\u7684\u6743\u503c\u53d8\u5c0f\u3002\n\n\u7ec8\u6b62\u6761\u4ef6\uff0c\u5f53\u6211\u4eec\u4e8c\u5206\u5230$l=r$\u65f6\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u961f\u5217\u7684\u8be2\u95ee\u64cd\u4f5c\u7684\u7b54\u6848\u6807\u4e3a$l$\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlog^2n)$\uff0c\u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$O(n)$\u7684\u3002\n\u662f\u4e0d\u662f\u5f88\u4f18\u8d8a\u5462\u55b5~\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile(!isdigit(c)) {if(c == '-') f = -1; c = getchar();}\n\tdo {x = x * 10 + (c ^ 48); c = getchar();} while(isdigit(c));\n\treturn x * f;\n}\n\nconst int N = 4e5 + 29;\nstruct data {\n\tint l, r, k, id, type; \n} opt[N], q1[N], q2[N];\nint a[N], b[N], c[N], bit[N], ans[N], ch[N];\nint n, m, cnt;\n\nvoid add(int x, int v) {\n\twhile(x <= n) {\n\t\tbit[x] += v;\n\t\tx += x & -x;\n\t}\n}\n\nint sum(int x) {\n\tint res = 0;\n\twhile(x) {\n\t\tres += bit[x];\n\t\tx -= x & -x;\n\t}\n\treturn res;\n}\n\nvoid solve(int sb, int se, int l, int r) {\n\tif(sb > se) return;\n\tif(l == r) {\n\t\tfor(int i = sb; i <= se; ++i)\n\t\t\tif(opt[i].type) ans[opt[i].id] = l;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1, cur = 0;\n\tint cnt1 = 0, cnt2 = 0;\n\tfor(int i = sb; i <= se; ++i) {\n\t\tif(!opt[i].type) {\n\t\t\tif(opt[i].k <= mid) {\n\t\t\t\tadd(opt[i].id, 1);\n\t\t\t\tch[++cur] = opt[i].id;\n\t\t\t\tq1[++cnt1] = opt[i];\n\t\t\t} else q2[++cnt2] = opt[i];\n\t\t} else {\n\t\t\tint tmp = sum(opt[i].r) - sum(opt[i].l - 1);\n\t\t\tif(opt[i].k <= tmp) q1[++cnt1] = opt[i];\n\t\t\telse {\n\t\t\t\topt[i].k -= tmp;\n\t\t\t\tq2[++cnt2] = opt[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= cur; ++i) add(ch[i], -1);\n\tfor(int i = 1; i <= cnt1; ++i)\n\t\topt[sb + i - 1] = q1[i];\n\tfor(int i = 1; i <= cnt2; ++i)\n\t\topt[sb + i - 1 + cnt1] = q2[i];\n\tsolve(sb, sb + cnt1 - 1, l, mid);\n\tsolve(sb + cnt1, se, mid + 1, r);\n}\n\nint main() {\n\tn = read(), m = read();\n\tfor(int i = 1; i <= n; ++i) {\n\t\ta[i] = read(); b[i] = a[i];\n\t}\n\tsort(b + 1, b + n + 1);\n\tint tot = unique(b + 1, b + n + 1) - b - 1;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tint p = lower_bound(b + 1, b + tot + 1, a[i]) - b;\n\t\tc[p] = a[i]; a[i] = p;\n\t\topt[++cnt] = (data) {0, 0, p, i, 0};\n\t}\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint left = read(), right = read(), k = read();\n\t\topt[++cnt] = (data) {left, right, k, i, 1};\n\t}\n\tsolve(1, cnt, 1, tot);\n\tfor(int i = 1; i <= m; ++i)\n\t\tprintf(\"%d\\n\", c[ans[i]]);\n\treturn 0;\n}\n\n```",
        "postTime": 1537510824,
        "uid": 46749,
        "name": "misinclair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10519718.html)\n\n\u9996\u5148\u8fd9\u9053\u9898\u76ee\uff0c\u5f53\u7136\u53ef\u4ee5\u4f5c\u4e3a[\u4e3b\u5e2d\u6811](https://www.cnblogs.com/bcoier/p/10293521.html)\u7684\u6a21\u677f\u6765\u505a\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u76ee\u6709\u4ee4\u4e00\u79cd\u89e3\u6cd5\n\n\u53d1\u73b0\u64cd\u4f5c\u5141\u8bb8\u79bb\u7ebf\uff0c\u6211\u4eec\u8003\u5f8b\u83ab\u961f\n\n\u9996\u5148\u5efa\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u6743\u503c\u7ebf\u6bb5\u6811\u91cc\u7684\u503c\u7684\u7b2cK\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u83ab\u961f\u8fdb\u884c\u5220\u51cf\u64cd\u4f5c\uff08\u5176\u5b9e\u548c\u4e3b\u5e2d\u6811\u5dee\u4e0d\u591a\uff1f\uff09\u3002\n\nPS\uff1a\u7531\u4e8e\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u4e0d\u91cd\u590d\uff0c\u79bb\u6563\u5316\u7684\u65f6\u5019\u5c31\u6ca1\u5fc5\u8981\u53bb\u91cd\u4e86\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define inf 123456789\nil int read()\n{\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define Next(i, u) for(re int i = head[u]; i; i = e[i].next)\n#define ls k * 2\n#define rs k * 2 + 1\n#define maxn 300005\nstruct node{int x, y, k, id;}q[maxn];\nstruct pax{int id, val;}p[maxn];\nint n, m, val[maxn], ans[maxn], bl, l = 1, r, Val[maxn << 2];\nil bool cmp1(pax a, pax b){return a.val < b.val;}\nil bool cmp(node a, node b){return (a.x / bl == b.x / bl) ? (a.y < b.y) : (a.x < b.x);}\nil void add(int k, int l, int r, int opt, int v)\n{\n\tVal[k] += opt;\n\tif(l == r && l == v) return;\n\tint mid = (l + r) >> 1;\n\tif(v <= mid) add(ls, l, mid, opt, v);\n\telse add(rs, mid + 1, r, opt, v);\n}\nil int query(int k, int l, int r, int v)\n{\n\tif(l == r) return l;\n\tint lmid = Val[ls], mid = (l + r) >> 1;\n\tif(v <= lmid) return query(ls, l, mid, v);\n\telse return query(rs, mid + 1, r, v - lmid);\n}\nil void add(int x){add(1, 1, n, 1, val[x]);}\nil void del(int x){add(1, 1, n, -1, val[x]);}\nint main()\n{\n\tfile(a);\n\tn = read(), m = read(), bl = pow(n, 0.666);\n\trep(i, 1, n) p[i].id = i, p[i].val = read();\n\trep(i, 1, m) q[i].id = i, q[i].x = read(), q[i].y = read(), q[i].k = read();\n\tsort(p + 1, p + n + 1, cmp1);\n\trep(i, 1, n) val[p[i].id] = i;\n\tsort(q + 1, q + m + 1, cmp);\n\trep(i, 1, m)\n\t{\n\t\twhile(r < q[i].y) add(++ r);\n\t\twhile(r > q[i].y) del(r --);\n\t\twhile(l < q[i].x) del(l ++);\n\t\twhile(l > q[i].x) add(-- l);\n\t\tans[q[i].id] = p[query(1, 1, n, q[i].k)].val;\n\t}\n\trep(i, 1, m) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n} \n```",
        "postTime": 1552396594,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u672c\u6765\u4ee5\u4e3a\u53ea\u662f\u4e00\u9053\u6e05\u65b0\u7684\u5c0f\u6c34\u9898\uff0c\u7136\u800c\u5374\u8c03\u4e86\u6211\u4e00\u4e0a\u5348 TAT\n\n\u770b\u5230\u533a\u95f4\u7b2c k \u5c0f\u7acb\u523b\u8054\u60f3\u5230\u5e73\u8861\u6811\uff0c\u4f46\u662f\u95ee\u9898\u5728\u4e8e\u8fd9\u662f\u6709\u533a\u95f4\u8303\u56f4\u7684\u55f7\uff0c\u6bcf\u6b21\u90fd\u91cd\u65b0\u628a\u533a\u95f4\u91cc\u7684\u70b9\u90fd\u52a0\u8fdb\u6765\u80af\u5b9a gg\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u79bb\u7ebf\u7136\u540e[\u83ab\u961f](https://blog.sengxian.com/algorithms/mo-s-algorithm)\u6c42\u89e3\n\n\u8fd9\u9053\u9898\u8981\u6ce8\u610f\u5148\u63d2\u5165\u518d\u5220\u9664\uff0c\u5c31\u662f\u8bf4\u6211\u4eec\u9ed8\u8ba4\u6211\u4eec\u7684\u5de6\u53f3\u7aef\u70b9 $l$\uff0c$r$ \u662f\u5728\u8be2\u95ee\u8303\u56f4 $[ql,\\ qr]$ \u524d\u7684\uff0c\u8fd9\u6837\u5b50\u6dfb\u52a0\u70b9\u80af\u5b9a\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u82e5\u8be2\u95ee\u7ed9\u51fa $[2,\\ 3]$ \u8fd9\u6837\u7684\u533a\u95f4\uff0c\u800c\u6211\u4eec\u7684\u5de6\u53f3\u7aef\u70b9\u4e00\u5f00\u59cb\u662f $l = 1, r = 0$ \u7684\uff0c\u6811\u91cc\u9762\u4e5f\u6ca1\u6709\u70b9\uff0c\u5f00\u59cb\u79fb\u52a8\u65f6\u4f1a\u5148\u5220\u9664 $l = 1$ \u5440\uff0c\u7136\u540e $l+1\\ \\to \\ l=2$\uff0c\u4f46\u6211\u4eec\u5220\u9664 $l = 1$ \u5c31\u4f1a\u6302\u554a\uff0c\u56e0\u4e3a\u6811\u6ca1\u6709\u8282\u70b9\uff0c\u7136\u540e\u7a0b\u5e8f\u5c31\u4f1a\u5947\u5947\u602a\u602a\u7684\u628a\u7b2c\u4e00\u53ea\u72d7\u7684\u989c\u503c\u5f04\u8fdb\u6811\u4e86emm\n\n\u53e6\u5916\u5c31\u662f\u5f88\u591a\u5e73\u8861\u6811\u9898\u76ee\u9898\u89e3\u91cc\u90fd\u4f1a\u5148\u63d2\u5165 $inf$ \u4e0e $-inf$\uff0c\u6211\u8ba4\u4e3a**\u90e8\u5206**\u9898\u76ee\u5176\u5b9e\u4e0d\u9700\u8981\u554a\uff0c\u56e0\u4e3a\u4e0d\u5b58\u5728\u4ec0\u4e48\u67e5\u627e\u4f1a\u8d8a\u754c\u5427\u3002\u5982\u679c\u662f\u6211\u7406\u89e3\u9519\u8bef\u9ebb\u70e6\u5927\u4f6c\u80fd\u6307\u51faorz\n\n\u8fd9\u91cc\u7ed9\u51fa fhqTreap \u4e0e vector \u7684\u4ee3\u7801\u5b9e\u73b0\u3002\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int inf = 2100000000;\nconst int N = 300007;\n\ntemplate < class T > inline void read(T &x)\n{\n    x = 0; bool f = 1; register char ch = getchar();\n    for(; ch < '0' || ch > '9'; ch = getchar())\n        if(ch == '-') f = 0;\n    for(; ch >= '0' && ch <= '9'; ch = getchar())\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n    x = f ? x : -x;\n}\n\nint n, m;\nint a[N], Ans[N];\nint root, cnt;\n\nstruct fhqTreap\n{\n    int l, r;\n    int val, key;\n    int size;\n};\nfhqTreap tr[N << 1];\n\ninline void pushUp(int p) {\n    tr[p].size = tr[tr[p].l].size + tr[tr[p].r].size + 1;\n}\n\ninline int newnode(int val)\n{\n    ++cnt; tr[cnt].l = tr[cnt].r = 0;\n    tr[cnt].val = val, tr[cnt].key = rand();\n    tr[cnt].size = 1; return cnt;\n}\n\nvoid split(int p, int val, int &x, int &y)\n{\n    if(!p)\n    {\n        x = y = 0;\n        return ;\n    }\n    if(tr[p].val <= val)\n    {\n        x = p;\n        split(tr[p].r, val, tr[p].r, y);\n    }\n    else\n    {\n        y = p;\n        split(tr[p].l, val, x, tr[p].l);\n    }\n    pushUp(p);\n}\n\nint merge(int x, int y)\n{\n    if(!x || !y) return x | y;\n    if(tr[x].key > tr[y].key)\n    {\n        tr[x].r = merge(tr[x].r, y);\n        pushUp(x); return x;\n    }\n    else\n    {\n        tr[y].l = merge(x, tr[y].l);\n        pushUp(y); return y;\n    }\n}\n\nint kthNum(int p, int k)\n{\n    if(k <= tr[tr[p].l].size)\n        return kthNum(tr[p].l, k);\n    else if(k == tr[tr[p].l].size + 1)\n        return p;\n    else\n    {\n        k -= (tr[tr[p].l].size + 1);\n        return kthNum(tr[p].r, k);\n    }\n}\n\n//\u4ee5\u4e0a\u4e3a fhq-treap \u677f\u5b50\n\nstruct captainMo { int l, r, k, id, block; };\ncaptainMo q[N];\n\ninline bool cmp(captainMo a, captainMo b) {\n    return (a.block ^ b.block) ? a.block < b.block : (a.block & 1) ? a.r < b.r : a.r > b.r;\n}\n\n//\u4f7f\u7528\u5947\u5076\u6027\u6392\u5e8f\u52a0\u901f\uff0c\u8fd9\u91cc\u4e0d\u7ec6\u8bb2\u3002\n\ninline void del(int t)\n{\n    int val = a[t], x, y, z;\n    split(root, val, x, y);\n    split(x, val - 1, x, z);\n    z = merge(tr[z].l, tr[z].r);\n    root = merge(merge(x, z), y);\n}\n\n//\u6811\u4e2d\u5220\u9664\u4e0b\u6807\u4e3a t \u7684\u72d7\u7684\u989c\u503c\n\ninline void add(int t)\n{\n    int val = a[t], x, y;\n    split(root, val, x, y);\n    root = merge( merge(x, newnode(val)), y );\n}\n\n//\u6dfb\u52a0\u4e0b\u6807\u4e3a t \u7684\u72d7\u7684\u989c\u503c\n\nsigned main()\n{\n    srand(1******7);\n    read(n); read(m);\n\n\t//\u5757\u7684\u5927\u5c0f\u8bbe\u4e3a n/\u221a(m*2/3) \u7384\u5b66\u52a0\u901f\n    register int S = n / sqrt((m << 1) / 3);\n    for(register int i = 1; i <= n; ++i) read(a[i]);\n    for(register int i = 1; i <= m; ++i)\n    {\n        read(q[i].l), read(q[i].r), read(q[i].k);\n        q[i].id = i, q[i].block = q[i].l / S;\n    }\n    sort(q + 1, q + m + 1, cmp);\n\t\n    //\u83ab\u961f\u64cd\u4f5c\n    register int l = 1, r = 0;\n    for(register int i = 1; i <= m; ++i)\n    {\n        while(l > q[i].l) add(--l);\n        while(r < q[i].r) add(++r);\n        while(l < q[i].l) del(l++);\n        while(r > q[i].r) del(r--);\n        Ans[q[i].id] = tr[kthNum(root, q[i].k)].val;\n        //\u8bb0\u5f55\u6b64\u8be2\u95ee\u7684\u4f4d\u7f6e\u7684\u7b54\u6848\n    }\n    for(register int i = 1; i <= m; ++i) printf(\"%d\\n\", Ans[i]);\n    return 0;\n}\n\n```\n\n```cpp\n#pr\\\nagma GCC optimize(3)\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int inf = (1 << 30);\nconst int N = 300007;\n\ntemplate < class T > inline void read(T &x)\n{\n    x = 0; bool f = 1; register char ch = getchar();\n    for(; ch < '0' || ch > '9'; ch = getchar())\n        if(ch == '-') f = 0;\n    for(; ch >= '0' && ch <= '9'; ch = getchar())\n        x = (x << 1) + (x << 3) + (ch ^ 48);\n    x = f ? x : -x;\n}\n\nint n, m;\nint a[N], Ans[N];\n\nvector < int > v;\n\nstruct captainMo { int l, r, k, id, block; };\ncaptainMo q[N];\n\ninline bool cmp(captainMo a, captainMo b) {\n    return (a.block ^ b.block) ? a.block < b.block : (a.block & 1) ? a.r < b.r : a.r > b.r;\n}\n\ninline void del(int t) {\n    v.erase(lower_bound(v.begin(), v.end(), a[t]));\n}\ninline void add(int t) {\n    v.insert(lower_bound(v.begin(), v.end(), a[t]), a[t]);\n}\n\nsigned main()\n{\n    read(n); read(m);\n    v.push_back(inf); v.push_back(-inf);\n    //\u8fd9\u91cc\u662f\u4e3a\u4e86\u4e0d lower_bound \u51fa\u754c RE\n    \n    register int S = n / sqrt((m << 1) / 3);\n    for(register int i = 1; i <= n; ++i) read(a[i]);\n    for(register int i = 1; i <= m; ++i)\n    {\n        read(q[i].l), read(q[i].r), read(q[i].k);\n        q[i].id = i, q[i].block = q[i].l / S;\n    }\n    sort(q + 1, q + m + 1, cmp);\n\t\n    register int l = 1, r = 0;\n    for(register int i = 1; i <= m; ++i)\n    {\n        while(l > q[i].l) add(--l);\n        while(r < q[i].r) add(++r);\n        while(l < q[i].l) del(l++);\n        while(r > q[i].r) del(r--);\n        Ans[q[i].id] = v.at(q[i].k + 1);\n        //\u63d2\u5165\u4e86-inf\u4e14\u4e0d\u4f1a\u88ab\u5220\u9664\uff0c\u6240\u4ee5\u6392\u540d+1\n    }\n    for(register int i = 1; i <= m; ++i) printf(\"%d\\n\", Ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1565770000,
        "uid": 80358,
        "name": "Rbu_nas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10015943.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1533)\n\n### [\u83ab\u961f\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9991671.html),[Splay\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9957906.html)\n\n\u79bb\u7ebf\u7684\u9898\u76ee\uff0c\u83ab\u961f\u662f\u4e0d\u9519\u7684\u89e3\u51b3\u65b9\u6cd5\n\n\u5148\u628a\u8be2\u95ee\u6392\u4e00\u4e0b\u5e8f\n\n\u5269\u4e0b\u5c31\u5957\u4e00\u4e2a\u83ab\u961f\u7684\u677f\u5b50\n\n\u6bcf\u6765\u4e00\u53ea\u72d7\u5c31\u628a\u6f02\u4eae\u503c\u63d2\u5165\u5e73\u8861\u6811\n\n\u6bcf\u53bb\u6389\u4e00\u53ea\u72d7\u5c31\u628a\u6f02\u4eae\u503c\u4ece\u5e73\u8861\u6811\u4e2d\u5220\u6389\n\n\u6bcf\u6b21\u67e5\u8be2\u67e5\u5e73\u8861\u6811\u4e2d\u7b2ck\u5c0f\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#define N 800005\n#define M 50005\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf; \n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++; \n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=nc();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=nc();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=nc();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\nstruct Splay{\n\tint v,fa,ch[2],sum,rec;\n}tree[N];\nint tot=0;\ninline void update(register int x)\n{\n\ttree[x].sum=tree[tree[x].ch[0]].sum+tree[tree[x].ch[1]].sum+tree[x].rec;\n}\ninline bool findd(register int x)\n{\n\treturn tree[tree[x].fa].ch[0]==x?0:1;\n}\ninline void connect(register int x,register int fa,register int son)\n{\n\ttree[x].fa=fa;\n\ttree[fa].ch[son]=x;\n} \ninline void rotate(register int x)\n{\n\tint Y=tree[x].fa;\n\tint R=tree[Y].fa;\n\tint Yson=findd(x);\n\tint Rson=findd(Y);\n\tint B=tree[x].ch[Yson^1];\n\tconnect(B,Y,Yson);\n\tconnect(Y,x,Yson^1);\n\tconnect(x,R,Rson);\n\tupdate(Y),update(x);\n}\ninline void splay(register int x,register int to)\n{\n\tto=tree[to].fa;\n\twhile(tree[x].fa!=to)\n\t{\n\t\tint y=tree[x].fa;\n\t\tif(tree[y].fa==to)\n\t\t\trotate(x);\n\t\telse if(findd(x)==findd(y))\n\t\t\trotate(y),rotate(x);\n\t\telse\n\t\t\trotate(x),rotate(x);\n\t}\t\n}\ninline int newpoint(register int v,register int fa)\n{\n\ttree[++tot].fa=fa;\n\ttree[tot].v=v;\n\ttree[tot].sum=tree[tot].rec=1;\n\treturn tot; \n}\ninline void Insert(register int x)\n{\n\tint now=tree[0].ch[1];\n\tif(tree[0].ch[1]==0)\n\t{\n\t\tnewpoint(x,0);\n\t\ttree[0].ch[1]=tot;\n\t}\n\telse\n\t{\n\t\twhile(19260817)\n\t\t{\n\t\t\t++tree[now].sum;\n\t\t\tif(tree[now].v==x)\n\t\t\t{\n\t\t\t\t++tree[now].rec;\n\t\t\t\tsplay(now,tree[0].ch[1]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint nxt=x<tree[now].v?0:1;\n\t\t\tif(!tree[now].ch[nxt])\n\t\t\t{\n\t\t\t\tint p=newpoint(x,now);\n\t\t\t\ttree[now].ch[nxt]=p;\n\t\t\t\tsplay(p,tree[0].ch[1]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnow=tree[now].ch[nxt];\n\t\t}\n\t}\n}\ninline int find(register int v)\n{\n\tint now=tree[0].ch[1];\n\twhile(19260817)\n\t{\n\t\tif(tree[now].v==v)\n\t\t{\n\t\t\tsplay(now,tree[0].ch[1]);\n\t\t\treturn now;\n\t\t}\n\t\tint nxt=v<tree[now].v?0:1;\n\t\tif(!tree[now].ch[nxt])\n\t\t\treturn 0;\n\t\tnow=tree[now].ch[nxt];\n\t}\n}\ninline void delet(register int x)\n{\n\tint pos=find(x);\n\tif(!pos)\n\t\treturn;\n\tif(tree[pos].rec>1)\n\t{\n\t\t--tree[pos].rec;\n\t\t--tree[pos].sum;\n\t}\n\telse\n\t{\n\t\tif(!tree[pos].ch[0]&&!tree[pos].ch[1])\n\t\t\ttree[0].ch[1]=0;\n\t\telse if(!tree[pos].ch[0])\n\t\t{\n\t\t\ttree[0].ch[1]=tree[pos].ch[1];\n\t\t\ttree[tree[0].ch[1]].fa=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint left=tree[pos].ch[0];\n\t\t\twhile(tree[left].ch[1])\n\t\t\t\tleft=tree[left].ch[1];\n\t\t\tsplay(left,tree[pos].ch[0]);\n\t\t\tconnect(tree[pos].ch[1],left,1);\n\t\t\tconnect(left,0,1);\n\t\t\tupdate(left);\n\t\t}\n\t}\n}\ninline int arank(register int x)\n{\n\tint now=tree[0].ch[1];\n\twhile(19260817)\n\t{\n\t\tint used=tree[now].sum-tree[tree[now].ch[1]].sum;\n\t\tif(x>tree[tree[now].ch[0]].sum&&x<=used)\n\t\t{\n\t\t\tsplay(now,tree[0].ch[1]);\n\t\t\treturn tree[now].v;\n\t\t}\n\t\tif(x<used)\n\t\t\tnow=tree[now].ch[0];\n\t\telse\n\t\t\tx-=used,now=tree[now].ch[1];\n\t}\n}\nstruct query{\n\tint l,r,id,bl,k;\n}q[M];\nint a[N],blocksize=0,ans[M];\ninline bool cmp(register query a,register query b)\n{\n\treturn a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\nint main()\n{\n\tint n=read(),m=read();\n\tblocksize=sqrt(m);\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint l=read(),r=read(),k=read();\n\t\tq[i]=(query){l,r,i,l/blocksize,k};\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tint l=1,r=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint ll=q[i].l,rr=q[i].r;\n\t\twhile(ll<l)\n\t\t\tInsert(a[--l]);\n\t\twhile(rr>r)\n\t\t\tInsert(a[++r]);\n\t\twhile(ll>l)\n\t\t\tdelet(a[l++]);\n\t\twhile(rr<r)\n\t\t\tdelet(a[r--]);\n\t\tans[q[i].id]=arank(q[i].k);\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t\twrite(ans[i]),puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1543132899,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "[\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\uff1f](https://www.avg.cx/index.php/archives/134/)\n\n\n[P1533 \u53ef\u601c\u7684\u72d7\u72d7](https://www.luogu.org/problem/P1533 \"P1533 \u53ef\u601c\u7684\u72d7\u72d7\")\n\n\n------------\n\n\u8fd9\u9053\u9898\u770b\u4e0a\u53bb\u6807\u7b7e\u662f *\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784* \u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u4e3b\u5e2d\u6811\uff0c\u6211\u770b\u5927\u4f6c\u4eec\u76f4\u63a5*\u5e73\u8861\u6811*\uff0c*\u83ab\u961f* \u5565\u7684\uff0c\u53cd\u6b63\u6211\u4e5f\u4e0d\u4f1a\uff0c\u5c31\u6c34\u4e00\u53d1\u4e3b\u5e2d\u6811\u7684\u9898\u89e3\u5427\u3002\uff01\uff01\n\n\u76f4\u63a5\u88f8\u7684\u4e3b\u5e2d\u6811\u6a21\u677f\u5c31\u53ef\u4ee5\uff0c\u4ed6\u8bf4\u5927\u5c0f\u89c4\u5219\u662f\u5c0f\u7684\u6700\u5927\uff0c\u6240\u4ee5\u5c31\u5f88\u7b80\u5355\u4e86\u5440\u3002\n\n\u4ee3\u7801\u4e11\uff0c\u52ff\u602a\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n\n#define LL long long\n#define rg register\n\ntemplate<class T>\ninline void read(T &x)\n{\n\tx=0;\n\tbool f=0;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())\n\t\tf^=c=='-';\n\tfor(;isdigit(c);c=getchar())\n\t\tx=x*10+(c^48);\n\tx=f?-x:x;\n}\n\nconst int MAXN=3e5+10;\n\nint a[MAXN],b[MAXN],T[MAXN],n,m;\n\nint NodeNum,L[MAXN<<5],R[MAXN<<5],sum[MAXN<<5];\n\n//-----------------\u4e3b\u5e2d\u6811\u90e8\u5206------------------- \n\t\nint build(int l,int r)\n{\n\tint num=++NodeNum;\n\tif(l!=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tL[num]=build(l,mid);\n\t\tR[num]=build(mid+1,r);\n\t}\n\treturn num;\n}\n\t\t\nint Update(int pre,int l,int r,int val)\n{\t\t\n\tint num=++NodeNum;\n\tL[num]=L[pre];\n\tR[num]=R[pre];\n\tsum[num]=sum[pre]+1;\n\tif(l!=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(val<=mid)\n\t\t\tL[num]=Update(L[pre],l,mid,val);\t\n\t\telse\n\t\t\tR[num]=Update(R[pre],mid+1,r,val);\n\t\treturn num;\n\t}\n\treturn num;\n}\n\t\nint query(int u,int v,int l,int r,int k)\n{\n\tif(l==r)\n\t\treturn b[l];\n\tint mid=(l+r)>>1;\n\tint num=sum[L[v]]-sum[L[u]];\n\tif(num>=k)\n\t\treturn query(L[u],L[v],l,mid,k);\n\telse\n\t\treturn query(R[u],R[v],mid+1,r,k-num);\n}\n\n//--------------------------------------------------\n\nint main()\n{\n\tread(n),read(m);\n\tfor(rg int i=1;i<=n;i++)\n\t{\n\t\tread(a[i]);\n\t\tb[i]=a[i];\n\t}\n\tstd::sort(b+1,b+n+1);\n\tint size=std::unique(b+1,b+n+1)-b-1;//\u53bb\u91cd\u79bb\u6563 \n\tT[0]=build(1,size);\n\tfor(rg int i=1;i<=n;i++)\n\t{\n\t\tint x=std::lower_bound(b+1,b+size+1,a[i])-b;//\u79bb\u6563 \n\t\tT[i]=Update(T[i-1],1,size,x);\n\t}\n\tfor(rg int i=1,l,r,k;i<=m;i++)\n\t{\n\t\tread(l),read(r),read(k);\n\t\tprintf(\"%d\\n\",query(T[l-1],T[r],1,size,k));//\u67e5\u8be2 \n\t}\n}",
        "postTime": 1573089562,
        "uid": 48439,
        "name": "YuRuiH_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u79cd\u533a\u95f4\u7b2ck\u5c0f\u7684\u95ee\u9898\uff0c\u4e00\u822c\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\uff0c\u5212\u5206\u6811\u6216\u7ebf\u6bb5\u6811\u53ef\u4ee5\u505a\u3002\u4f46\u849f\u84bb\u592a\u5f31\u4e86\uff0c\u90fd\u4e0d\u4f1a\uff08\u9664\u4e86\u7ebf\u6bb5\u6811\uff09\uff0c\u53c8\u521a\u597d\u6700\u8fd1\u65b0\u5b66\u4e86treap\uff0c\u4fbf\u7528treap\u6253\u4e86\u4e00\u904d\uff0c\u53ef\u4ee5\u5e2e\u52a9\u81ea\u5df1\u638c\u63e1treap\u6c42\u7b2ck\u5c0f\u6570\u7684\u6253\u6cd5\uff0c\u4ee5\u53ca\u5220\u9664\uff0c\u63d2\u5165\u7b49\u64cd\u4f5c\u3002\uff08\u53e6\u5916treap\u662f\u548c\u5218\u6c5d\u4f73\u5927\u767d\u4e66\u5b66\u7684\uff0c\u98ce\u683c\u53ef\u80fd\u4e0e\u5218\u6c5d\u4f73\u5dee\u4e0d\u591a\uff09\n\n\u672c\u9898\u4e3b\u8981\u601d\u8def\u662f\uff1a\u628a\u9700\u8981\u6c42\u7684\u533a\u95f4\u6392\u5e8f\uff08\u4e00\u5b9a\u8bb0\u5f97\u6309\u539f\u987a\u5e8f\u7f16\u53f7\uff09\uff0c\u4e4b\u540e\u518d\u7b80\u5355\u7684\u5904\u7406\u4e00\u4e0b\u5c31\u884c\u4e86\uff08\u5efa\u8bae\u81ea\u5df1\u753b\u56fe\u4e0e\u7a0b\u5e8f\u4e00\u8d77\u7406\u89e3\uff09\n\n\u4e0b\u9644\u4ee3\u7801\uff1a\n\n \n```cpp\n#include<queue>\n#include<cmath> \n#include<cstdio> \n#include<cstring> \n#include<iostream> \n#include<algorithm> \n#define N 310000\nusing namespace std;\ninline void read(int &x) \n{ \n    x=0; \n    int p=1; \n    char c=getchar(); \n    while(!isdigit(c)){if(c=='-')p=-1;c=getchar();} \n    while(isdigit(c)) {x=(x<<1)+(x<<3)+(c^'0');c=getchar();} \n    x*=p; \n}\nstruct node\n{\n    node *ch[2];\n    int v,r,s;\n    int cmp(int x)const\n    {\n        if(x==v)return -1;\n        return x<v?0:1;\n    }\n    void maintain()\n    {\n        s=1;\n        if(ch[0]!=NULL)s+=ch[0]->s;\n        if(ch[1]!=NULL)s+=ch[1]->s;\n    }\n};\nstruct xg\n{\n    int l,r,k;\n    int num;\n    bool operator < (const xg &rs)const\n    {\n        return l<rs.l;\n    }\n}e[N];\nint a[N];\nnode *root;\nvoid rotate(node *&o,int d)\n{\n    node *k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d];\n    k->ch[d]=o;    \n    k->maintain();\n    o->maintain();\n    o=k;\n}\nvoid insert(node *&o,int x)//\u63d2\u5165\n{\n    if(o==NULL)\n    {\n        o=new node;\n        o->v=x;o->r=rand();o->ch[0]=o->ch[1]=NULL;\n    }\n    else \n    {\n        int d=x<o->v?0:1;\n        insert(o->ch[d],x);\n        if(o->ch[d]->r > o->r)rotate(o,d^1);\n    }\n    o->maintain();\n}\nvoid remove(node *&o,int x)//\u5220\u9664\n{\n    int d=o->cmp(x);\n    if(d==-1)\n    {\n        node *u=o;\n        if(o->ch[0]==NULL)o=o->ch[1],delete u;\n        else if(o->ch[1]==NULL)o=o->ch[0],delete u;\n        else\n        {\n            int d2=(o->ch[0]->r > o->ch[1]->r?1:0);\n            rotate(o,d2);\n            remove(o->ch[d2],x);\n        }\n    }else remove(o->ch[d],x);\n    if(o)o->maintain();\n}\nint minkth(node *o,int k)//\u7b2ck\u5c0f\n{\n    if(o==NULL||k<=0||k>o->s)return 0;\n    int sum=(o->ch[0]==NULL?0:o->ch[0]->s);\n    if(k==sum+1)return o->v;\n    else if(k<=sum)return minkth(o->ch[0],k);\n    else return minkth(o->ch[1],k-sum-1);\n}\nint ans[N];//\u5b58\u7b54\u6848\nint main() \n{ \n    srand(4531534);\n    int n,m;\n    read(n);read(m);\n    int x;\n    read(x);\n    a[1]=x;\n    root=new node;\n    for(int i=2;i<=n;i++)\n    read(a[i]);\n    for(int i=1;i<=m;i++)\n    {\n        read(e[i].l);read(e[i].r);read(e[i].k);\n        e[i].num=i;//\u7f16\u53f7\n    }\n    sort(e+1,e+m+1);\n    root->v=a[e[1].l];root->r=rand();root->ch[0]=root->ch[1]=NULL;//\u5904\u7406\u7b2c\u4e00\u4e2a\u70b9\n    for(int i=e[1].l+1;i<=e[1].r;i++)\n    insert(root,a[i]);\n    ans[e[1].num]=minkth(root,e[1].k);\n    for(int i=2;i<=m;i++)\n    {\n        if(e[i].l<e[i-1].r)\n        {for(int j=e[i-1].l;j<e[i].l;j++)remove(root,a[j]);\n        if(e[i-1].r<e[i].r)for(int j=e[i-1].r+1;j<=e[i].r;j++)insert(root,a[j]);\n        }\n        else \n        {\n            for(int j=e[i-1].l;j<=e[i-1].r;j++)remove(root,a[j]);\n            for(int j=e[i].l;j<=e[i].r;j++)insert(root,a[j]);\n        }\n        ans[e[i].num]=minkth(root,e[i].k);\n    }\n    for(int i=1;i<=m;i++)\n    printf(\"%d\\n\",ans[i]);\n    return 0; \n} \n\n```",
        "postTime": 1498644009,
        "uid": 22016,
        "name": "pengym",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9898\u5e94\u8be5\u662f\u7d2b\u554a\uff0c\u4e0d\u662f\u4e3b\u5e2d\u6811\uff0c\u5c31\u662f\u5e73\u8861\u6811\u3002\n\n\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\n\n>\u800c\u4e14\u4e3a\u4e86\u4fdd\u8bc1\u67d0\u4e00\u53ea\u72d7\u72d7\u4e0d\u4f1a\u88ab\u5582\u592a\u591a\u6b21\uff0c\u4ed6\u5582\u7684\u6bcf\u4e2a\u533a\u95f4\uff08i,j\uff09\u4e0d\u4e92\u76f8\u5305\u542b\u3002\n\n\u8fd9\u5c31\u8bf4\u660e\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4 $[l_1,r_1]$ \u548c $[l_2,r_2]$\uff0c\u5982\u679c $l_1< l_2$\uff0c\u90a3\u4e48 $r_1$ \u4e5f\u5fc5\u7136 $< r_2$\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5982\u679c $r_1\\ge r_2$ \u90a3\u4e48 $[l_1,r_1]$ \u5c31\u5305\u542b\u4e86 $[l_2,r_2]$\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u6027\uff1a\u4efb\u610f\u4e24\u4e2a\u533a\u95f4\u7684 $l$ \u6216 $r$ \u5747\u4e0d\u76f8\u7b49\u3002\u8fd9\u4e2a\u8bf7\u8bfb\u8005\u81ea\u884c\u8bc1\u660e\u3002\n\n\u5982\u679c\u628a\u83ab\u961f\u8fdb\u884c\u9b54\u6539\uff0c\u4ee5 $l$ \u6309\u9012\u589e\u987a\u5e8f\u6392\u5217\uff0c\u90a3 $r$ \u540c\u6837\u9012\u589e\u3002\n\n\u8fd9\u65f6\u5019\u83ab\u961f\u7684\u4e24\u4e2a\u6307\u9488 $L$ \u548c $R$ \u53ea\u4f1a\u5f80\u540e\u8df3\uff0c\u4e0d\u4f1a\u5411\u524d\u4e86\u3002\n\n\u8bc1\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6392\u5e8f $m\\log m$\u3002\u5176\u5b9e\u53ef\u4ee5\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u505a\u5230 $O(n)$ \u6392\u5e8f\u3002\u4f46\u5728\u6b64\u9898\u4e2d $m$ \u8fdc\u8fdc\u5c0f\u4e8e $n$\uff0c\u6240\u4ee5\u8fd8\u662f\u4f7f\u7528\u5feb\u6392\u3002\u4e0b\u9762\u8ba9\u4e24\u4e2a\u6307\u9488 $L$ \u548c $R$ \u8df3\u5b8c\uff0c\u56e0\u4e3a $L$ \u548c $R$ \u6700\u591a\u8df3 $n$ \u6b21\uff0c\u6bcf\u6b21\u66f4\u65b0\u6307\u9488\u7684\u590d\u6742\u5ea6\u662f $\\log n$\uff08\u4f7f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff09\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $n\\log n$\u3002\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4\u7b2c $k$ \u5c0f\uff08\u5373\u5728\u5e73\u8861\u6811\u91cc\u6c42\u6392\u540d\u7b2c $k$ \u5c0f\u7684\u6570\uff09\u65f6\u95f4\u590d\u6742\u5ea6 $\\log n$\uff0c\u5171\u67e5\u8be2 $m$ \u6b21\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $m(\\log m+\\log n)+n\\log n$\uff0c\u53ef\u4ee5\u89c6\u4f5c $O(n\\log n)$\u3002\n\n\u4ee3\u7801\u6bd4\u4e3b\u5e2d\u6811\u77ed\u5f97\u591a\uff0c\u56e0\u4e3a\u5e73\u8861\u6811\u4f7f\u7528\u4e86~~\u5e73\u677f\u7535\u89c6\u5927\u6cd5~~ pb_ds \u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntree<double,null_type,less<double>,rb_tree_tag,tree_order_statistics_node_update> t;\nstruct ask\n{\n\tint l,r,w,k;\n\tfriend bool operator <(const ask &qwq,const ask &qaq)\n\t{\n\t\treturn qwq.l<qaq.l;\n\t}\n}q[50005];\nint a[300005],ans[300005];\nconst double mf=1e-6;\nint main()\n{\n    int m,n,l=1,r=0,i,j;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)\n    \tscanf(\"%d\",&a[i]);\n    for(i=0;i<m;i++)\n    {\n    \tscanf(\"%d%d%d\",&q[i].l,&q[i].r,&q[i].k);\n    \tq[i].w=i;\n\t}\t\n    sort(q,q+m);\n    for(i=0;i<m;i++)\n    {\n    \twhile(r<q[i].r) t.insert(a[++r]+r*mf);\n    \twhile(l<q[i].l) t.erase(l*mf+a[l++]);\n    \tans[q[i].w]=*t.find_by_order(q[i].k-1);\n\t}\n    for(i=0;i<m;i++)\n    \tprintf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1585548542,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "# P1533 \u53ef\u601c\u7684\u72d7\u72d7\n\n[\u539f\u4f53\u5730\u5740](https://www.luogu.com.cn/problem/P1533)  \n[Github\u9898\u89e3](https://github.com/jerrykcode/luogu)  \n\u8fd9\u9053\u98982019\u5e7412\u670831\u53f7\u665a\u4e0a\u5199\u5b8c\uff0c\u4f46\u662f\u6709\u6bb5\u9519\u8bef\uff0c\u76f4\u52302020\u5e741\u67082\u53f7\u4e2d\u5348\u624d\u8c03\u5f0f\u5b8c\u5e76\u4e14AC.  \n21\u4e16\u7eaa20\u5e74\u4ee3\u6211\u5199\u7684\u9996\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u901a\u8fc7QAQ  \n## \u601d\u8def\n\n\u79bb\u7ebf+SBT\u5e73\u8861\u6811  \n\u67e5\u8be2\u6392\u540d\u7b2ck\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u6839\u636e\u7ed3\u70b9\u6570\u91cf\u7ef4\u62a4\u5e73\u8861\u7684SBT\u5e73\u8861\u6811\u3002  \n\n\u9996\u5148\u5bf9\u533a\u95f4\u6392\u5e8f\uff0c  \n\u628a\u7b2c\u4e00\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u63d2\u5165SBT\uff0c\u8ba1\u7b97\u7b2ck\u5c0f\u7684\u5143\u7d20  \n\u7136\u540e\u4fdd\u7559\u7b2c\u4e00\u4e2a\u533a\u95f4\u4e0e\u7b2c\u4e8c\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6\uff0c  \n\u5220\u9664\u7b2c\u4e00\u4e2a\u533a\u95f4\u6709\u800c\u7b2c\u4e8c\u4e2a\u533a\u95f4\u6ca1\u6709\u7684\u5143\u7d20\uff0c  \n\u63d2\u5165\u7b2c\u4e8c\u4e2a\u533a\u95f4\u6709\u800c\u7b2c\u4e00\u4e2a\u533a\u95f4\u6ca1\u6709\u7684\u5143\u7d20\u3002  \n\u6b64\u65f6SBT\u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u7b2c\u4e8c\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u5566\uff0c\u7136\u540e\u8ba1\u7b97\u7b2ck\u5c0f\u7684\u5143\u7d20\u3002  \n\u82e5\u4e24\u4e2a\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u5220\u9664\u7b2c\u4e00\u4e2a\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u63d2\u5165\u7b2c\u4e8c\u4e2a\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u3002  \n\u4ee5\u6b64\u7c7b\u63a8\u7b2c3\u4e2a\uff0c\u7b2c4\u4e2a\uff0c\u7b2c5\u4e2a\u533a\u95f4...  \n\u56e0\u4e3a\u533a\u95f4\u6392\u5e8f\u8fc7\uff0c\u4e14\u533a\u95f4\u65e0\u76f8\u4e92\u5305\u542b\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u63d2\u5165\u4e00\u6b21\uff0c\u5220\u9664\u4e00\u6b21\u3002  \n  \n\u5728\u6bcf\u4e2a\u533a\u95f4\u4e2d\uff0c\u7b2ck\u5c0f\u7684\u5143\u7d20\uff0c\u6709k-1\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u3002  \n\u90a3\u4e48\u5728SBT\u4e2d\u9012\u5f52\u67e5\u8be2\u5c31\u53ef\u4ee5\u5566\u3002  \n\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5728SBT\u4e2d\u67e5\u8be2\u6709k\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20(\u7ed9\u8fd9\u4e2a\u51fd\u6570\u4f20\u5165k-1\u5373\u53ef)  \n\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u82e5k\u6b63\u597d\u7b49\u4e8e\u5de6\u5b50\u6811\u7684size\uff0c\u90a3\u4e48\u8bf4\u660e\u6b63\u597d\u6709k\u4e2a\u5143\u7d20\u5c0f\u4e8e\u6839\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6839\u7ed3\u70b9\u5c31\u662f\u8981\u627e\u7684\u5143\u7d20\u3002  \n\u82e5k\u5c0f\u4e8e\u5de6\u5b50\u6811\u7684size\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u7ed3\u70b9\u4e00\u5b9a\u5c0f\u4e8e\u6839\u7ed3\u70b9\uff0c\u5219\u9012\u5f52\u67e5\u627e\u5de6\u5b50\u6811\u4e2d\u6709k\u4e2a\u7ed3\u70b9\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u3002  \n\u82e5k\u5927\u4e8e\u5de6\u5b50\u6811\u7684size\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u7ed3\u70b9\u4e00\u5b9a\u5927\u4e8e\u6839\u7ed3\u70b9\uff0c\u5e76\u4e14\u5728\u53f3\u5b50\u6811\u4e2d\u8fd8\u6709 k - \u5de6\u5b50\u6811\u7684size - 1\u4e2a\u7ed3\u70b9\u5c0f\u4e8e\u5b83(-1\u662f\u56e0\u4e3a\u6839\u7ed3\u70b9\u4e5f\u5c0f\u4e8e\u5b83)\uff0c  \n\u90a3\u4e48\u9012\u5f52\u67e5\u627e\u53f3\u5b50\u6811\u4e2d\u6709 k - \u5de6\u5b50\u6811\u7684size - 1\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u3002    \n(\u82e5\u5de6\u5b50\u6811\u4e0d\u5b58\u5728\uff0c\u5de6\u5b50\u6811\u7684size\u5c31\u662f0)  \n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\n\ntemplate<typename T>\nclass SBT {\npublic:\n\tvoid insert(T key);\n\tvoid remove(T key);\n\tT rank(int k);\n\n\tSBT() : tree_(NULL) {}\n\t~SBT() {\n\t\tdeleteTree(tree_);\n\t}\n\t\nprivate:\n\ttypedef struct TNode {\n\t\tT key;\n\t\tint size;\n\t\tstruct TNode *left, *right;\n\t\tTNode(T key) : key(key), size(1), left(NULL), right(NULL) {}\n\t} *Tree;\n\n\tint getSize(Tree t) { return t ? t->size : 0; }\n\n\tTree leftRotate(Tree t);\n\tTree rightRotate(Tree t);\n\tTree maintain(Tree t);\n\tTree maintainLeft(Tree t);\n\tTree maintainRight(Tree t);\n\tTree insert(Tree t, T key);\n\tTree remove(Tree t, T key);\n\tT rank(Tree t, int k);\n\tvoid deleteTree(Tree t);\n\nprivate:\n\tTree tree_;\n};\n\nstruct Query {\n\tint start, end;\n\tint k;\n\tint index;\n\tstatic bool compare(Query a, Query b) {\n\t\treturn a.start < b.start;\n\t}\n};\n\nint main() {\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\tint * arr = new int[n];\n\tQuery * queries = new Query[m];\n\tfor (int i = 0; i < n; i++)\n\t\tscanf(\"%d\", arr + i);\n\tint l, r, k;\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%d %d %d\", &l, &r, &k);\n\t\tl--; r--; k--; //l\u548cr\u51cf\u4e00\u662f\u4e3a\u4e86\u8ba9\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0ck\u51cf\u4e00\u662f\u56e0\u4e3aSBT\u4e2d\u67e5\u8be2\u6392\u540d\u7b2ck\u7684\u5143\u7d20\uff0c\u4e5f\u662f\u4ece0\u5f00\u59cb\u6392\u540d\u7684\u3002\u4ece1\u5f00\u59cb\u5f53\u7136\u4e5f\u53ef\u4ee5\uff0c\u4f46\u6211\u7684\u6076\u4e60\u662f\u4ece0\u5f00\u59cbqwq\n\t\tqueries[i].start = l;\n\t\tqueries[i].end = r;\n\t\tqueries[i].k = k;\n\t\tqueries[i].index = i;\n\t}\n\tsort(queries, queries + m, Query::compare);\n\tint * ans = new int[m];\n\tSBT<int> sbt;\n\tint start = 0, end = 0;\n\tsbt.insert(arr[0]); //\u521d\u59cb\u5316\n\tfor (int i = 0; i < m; i++) {\n\t\t//start\u548cend\u8868\u793a\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u6b62\u4f4d\u7f6e\n\t\t//queries[i].start\u548cqueries[i].end\u662f\u73b0\u5728\u8981\u7684\u533a\u95f4\u8d77\u6b62\u4f4d\u7f6e\n\t\t//for\u5faa\u73af\u5916\u7684\u521d\u59cb\u5316\u76f8\u5f53\u4e8e\u5728\u6700\u5f00\u59cb\u589e\u52a0\u4e86[0, 0]\u533a\u95f4\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u4ee3\u7801\u5bb9\u6613\u5199\u4e00\u70b9(\u597d\u50cf\u4e5f\u4e0d\u4e00\u5b9a\u6b38)\n\t\tfor (int j = start; j <= min(end, queries[i].start - 1); j++) //\u5220\u9664\u6389\u4e0a\u4e00\u4e2a\u533a\u95f4\u6709\u800c\u672c\u533a\u95f4\u6ca1\u6709\u7684\u5143\u7d20\uff0c\u6ce8\u610f\u8fd9\u4e2amin\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u5728\u4e24\u4e2a\u533a\u95f4\u6709\u65e0\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b\u90fd\u6b63\u5e38\u8fd0\u884c\n\t\t\tsbt.remove(arr[j]);\n\t\tfor (int j = max(end + 1, queries[i].start); j <= queries[i].end; j++) //\u63d2\u5165\u672c\u533a\u6709\u800c\u4e0a\u4e00\u4e2a\u533a\u95f4\u6ca1\u6709\u7684\u5143\u7d20\uff0c\u540c\u6837\u6ce8\u610fmax\n\t\t\tsbt.insert(arr[j]);\n\t\t//\u81f3\u6b64\uff0cSBT\u4e2d\u5b58\u50a8\u7684\u5df2\u7ecf\u662f\u672c\u533a\u95f4\u5143\u7d20\u4e86\n\t\tstart = queries[i].start;\n\t\tend = queries[i].end;\n\t\tans[queries[i].index] = sbt.rank(queries[i].k); //\u67e5\u8be2\n\t}\n\tfree(arr);\n\tfree(queries);\t\n\tfor (int i = 0; i < m; i++)\n\t\tprintf(\"%d\\n\", ans[i]);\n\tfree(ans);\n\treturn 0;\n}\n\n\n//\u4e0b\u9762\u90fd\u662f\u5b9e\u73b0SBT\u7684\u5197\u957f\u4ee3\u7801\ntemplate<typename T>\nvoid SBT<T>::insert(T key) {\n\ttree_ = insert(tree_, key);\n}\n\ntemplate<typename T>\nvoid SBT<T>::remove(T key) {\n\ttree_ = remove(tree_, key);\n}\n\ntemplate<typename T>\nT SBT<T>::rank(int k) {\n\treturn rank(tree_, k);\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::leftRotate(SBT<T>::Tree t) {\n\tTree k = t->right;\n\tt->right = k->left;\n\tk->left = t;\n\tk->size = t->size;\n\tt->size = getSize(t->left) + getSize(t->right) + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::rightRotate(SBT<T>::Tree t) {\n\tTree k = t->left;\n\tt->left = k->right;\n\tk->right = t;\n\tk->size = t->size;\n\tt->size = getSize(t->left) + getSize(t->right) + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintain(SBT<T>::Tree t) {\n\tt = maintainLeft(t);\n\treturn maintainRight(t);\t\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintainLeft(SBT<T>::Tree t) {\n\tif (t == NULL || t->left == NULL) return t;\n\tif (t->left->left && t->left->left->size > getSize(t->right)) {\n\t\tt = rightRotate(t);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\telse if (t->left->right && t->left->right->size > getSize(t->right)) {\n\t\tt->left = leftRotate(t->left);\n\t\tt = rightRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\treturn t;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintainRight(SBT<T>::Tree t) {\n\tif (t == NULL || t->right == NULL) return t;\n\tif (t->right->right && t->right->right->size > getSize(t->left)) {\n\t\tt = leftRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt = maintain(t);\n\t}\n\telse if (t->right->left && t->right->left->size > getSize(t->left)) {\n\t\tt->right = rightRotate(t->right);\n\t\tt = leftRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\treturn t;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::insert(SBT<T>::Tree t, T key) {\n\tif (t == NULL) {\n\t\treturn new TNode(key);\n\t}\n\tt->size++;\n\tif (key < t->key) {\n\t\tt->left = insert(t->left, key);\n\t\tt = maintainLeft(t);\n\t}\n\telse {\n\t\tt->right = insert(t->right, key);\n\t\tt = maintainRight(t);\n\t}\n\treturn t;\n}\n\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::remove(SBT<T>::Tree t, T key) {\n\t// (t == NULL) return NULL;\n\tt->size--;\n\tif (key == t->key){\n\t\tif (t->left && t->right) {\n\t\t\tif (t->left->size > t->right->size) {\n\t\t\t\tTree left_max = t->left;\n\t\t\t\twhile (left_max->right) {\n\t\t\t\t\tleft_max = left_max->right;\n\t\t\t\t}\n\t\t\t\tt->key = left_max->key;\n\t\t\t\tt->left = remove(t->left, left_max->key);\n\t\t\t\tt = maintainRight(t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tTree right_min = t->right;\n\t\t\t\twhile (right_min->left) {\n\t\t\t\t\tright_min = right_min->left;\n\t\t\t\t}\n\t\t\t\tt->key = right_min->key;\n\t\t\t\tt->right = remove(t->right, right_min->key);\n\t\t\t\tt = maintainLeft(t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tTree tmp = t;\n\t\t\tt = t->left ? t->left : t->right;\n\t\t\tdelete tmp;\n\t\t}\n\t}\n\telse if (key < t->key) {\n\t\tt->left = remove(t->left, key);\n\t\tt = maintainRight(t);\n\t}\n\telse {\n\t\tt->right = remove(t->right, key);\n\t\tt = maintainLeft(t);\n\t}\n\treturn t;\n}\n\n\n//\u4ece0\u5f00\u59cb\u6392\u540d\uff0c\u597d\u5904\u662f\u6392\u540dk\u7684\u610f\u601d\u5c31\u662f\u6709k\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\uff0c\u4ece1\u5f00\u59cb\u6392\u540d\u90a3\u5c31\u662fk-1\u4e86\u3002\u3002\ntemplate<typename T>\nT SBT<T>::rank(SBT<T>::Tree t, int k) {\n\t//if (t == NULL) return 0xffffffff;\n\tint left_size = getSize(t->left);\n\tif (k == left_size) {\n\t\treturn t->key;\n\t}\n\telse if (k < left_size) {\n\t\treturn rank(t->left, k);\n\t}\n\telse {\n\t\treturn rank(t->right, k - left_size - 1);\n\t}\n}\n\ntemplate<typename T>\nvoid SBT<T>::deleteTree(SBT<T>::Tree t) {\n\tif (t == NULL) {\n\t\treturn;\n\t}\n\tdeleteTree(t->left);\n\tdeleteTree(t->right);\n\tdelete t;\n}\n\n```\n",
        "postTime": 1577946085,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u4f6c\u4eec\u5199\u4e86\u5f88\u591a~~\u6211\u770b\u4e0d\u61c2\u7684~~\u590d\u6742\u9898\u89e3\n\n~~\u4f5c\u4e3a\u849f\u84bb\u7684~~\u6211\u5c31\u60f3\u5c1d\u8bd5\u4e00\u4e0b\u6709\u6ca1\u6709\u7b80\u5355**\u4e00\u70b9**\u7684\u65b9\u6cd5\n\n# \u89e3\u9898\u601d\u8def\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u4e2a\u9898\u76ee\uff0c\u55ef......\u8be2\u95ee\u533a\u95f4\uff0c\u5e94\u8be5\u662f\u83ab\u961f\u3002\n\n\u518d\u5b9a\u775b\u4e00\u770b\uff0c\u4e0d\u4e92\u76f8\u5305\u542b?\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u82e5\u5c06\u8be2\u95ee\u533a\u95f4\u6309 $l$ \u6392\u5217,  $r$ \u4e5f\u4e00\u5b9a\u662f\u6709\u5e8f\u7684\u3002\n\n\u6240\u4ee5\u5462\uff1f\u76f4\u63a5**vector\u66b4\u529b\u4e8c\u5206\u67e5\u627e**\u63d2\u5165/\u5220\u9664\uff0c\u6839\u672c\u4e0d\u7528\u83ab\u961f\u4f18\u5316\n\n\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\n# **\u4ee3\u7801\u90e8\u5206**\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[500500],ans[500500];\nvector <int> V;\nstruct md{\n    int x,y,k,num;\n} q[500500];//\u5176\u4e2dx\u8868\u793a\u5de6\u8fb9\u754c\uff0cy\u8868\u793a\u53f3\u8fb9\u754c\uff0ck\u8868\u793a\u8be2\u95ee\u7b2c\u51e0\u5927\uff0cnum\u8868\u793a\u8be2\u95ee\u7f16\u53f7\nbool cmp(md a,md b)\n{\n    return a.x!=b.x?a.x<b.x:a.y<b.y;//\u7531\u4e8e\u4e0d\u5305\u542b\uff0c\u5361\u5e38\u7b49\u7384\u5b66\u4f18\u5316\u90fd\u4e0d\u9700\u8981\n}\nint main()\n{\ncin>>n>>m;\nfor(int i=1;i<=n;i++)//\u8bfb\u5165\uff08\u5feb\u8bfb\u90fd\u61d2\u5f97\u5199= =\uff09\n    cin>>a[i];\nint l=1,r=1;\nV.push_back(a[1]);\nfor(int i=1;i<=m;i++)\n{\n    cin>>q[i].x>>q[i].y>>q[i].k;\n    q[i].num=i;\n}\nsort(q+1,q+1+m,cmp);//\u6309\u8be2\u95ee\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u6392\u5e8f\uff0c\u6b64\u65f6\u53f3\u8fb9\u754c\u4e5f\u662f\u6709\u5e8f\u7684\nfor(int i=1;i<=m;i++)\n{\n    while(r<q[i].y)//\u66f4\u65b0r\uff0c\u4e8c\u5206\u67e5\u627e\u63d2\u5165a[r]\n    {\n        r++;\n        V.insert(upper_bound(V.begin(),V.end(),a[r]),a[r]);\n    }\n    while(l<q[i].x)//\u66f4\u65b0l\uff0c\u4e8c\u5206\u67e5\u627e\u5220\u9664a[l]\n    {\n        V.erase(lower_bound(V.begin(),V.end(),a[l]));\n        l++;\n    }\n    ans[q[i].num]=V[q[i].k-1];//\u79bb\u7ebf\u8bb0\u5f55\u7b54\u6848\n}\nfor(int i=1;i<=m;i++)cout<<ans[i]<<endl;//\u8f93\u51fa\uff08\u61d2\u5f97\u5199\u5feb\u8f93= =\uff09\nreturn 0;\n}//\u7ed3\u675f\u4e86\uff1f\u7ed3\u675f\u4e86\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n```\n~~PS: STL\u5927\u6cd5\u597d~~",
        "postTime": 1574489242,
        "uid": 153072,
        "name": "SunnCloud",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u8981\u6c42\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u8981\u6c42\u4e00\u4e2a\u533a\u95f4\u7b2c$K$\u5927\n\n\u8bf4\u5230\u533a\u95f4\u7b2c$K$\u5927\uff0c\u6211\u4eec\u81ea\u7136\u5c31\u60f3\u5230\u4e86~~\u4e3b\u5e2d\u6811~~\u5212\u5206\u6811\n\n\u5212\u5206\u6811\u662f\u4e00\u79cd\u4e13\u95e8(\u4e5f\u53ea\u80fd)\u6c42\u89e3\u533a\u95f4\u7b2c$K$\u5927\u7684\u6570\u636e\u7ed3\u6784\uff0c\u548c\u7ebf\u6bb5\u6811\u7c7b\u4f3c\uff0c\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u6761\u957f\u7ebf\u6bb5\uff0c\u5de6\u53f3\u513f\u5b50\u5c31\u662f\u5f53\u524d\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u533a\u95f4\u4e2d\u4f4d\u6570\u7684\u6570\u548c\u5927\u4e8e\u7b49\u4e8e\u533a\u95f4\u4e2d\u4f4d\u6570\u7684\u6570\n\n\u8fd9\u6837\u5efa\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u65b9\u5f0f\u67e5\u8be2\u533a\u95f4\u7b2c$K$\u5927\uff0c\u56e0\u4e3a\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u5efa\u597d\u6811\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5de6\u513f\u5b50\u76f8\u5bf9\u4e8e\u53f3\u513f\u5b50\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u6765\u7f29\u5c0f\u67e5\u8be2\u533a\u95f4\uff0c\u548c\u5dee\u5206\u5dee\u4e0d\u591a\n\n\u533a\u95f4\u4e2d\u4f4d\u6570\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6280\u5de7\uff0c\u628a\u539f\u5e8f\u5217\u6392\u5e8f\u540e\uff0c\u4e2d\u95f4\u7684\u503c\u5c31\u5bf9\u5e94\u533a\u95f4\u4e2d\u4f4d\u6570\n\n\u66f4\u5177\u4f53\u7684\u5185\u5bb9\u53ef\u4ee5[\u770b\u8fd9\u91cc](https://www.luogu.org/blog/LordLeft-PHUCC/leng-men-shuo-ju-jie-gou-qian-tan-hua-fen-shu)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint read(){\n\tint w=0;\n\tbool s=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)){\n\t\ts=(c=='-');\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tw=w*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn s?-w:w;\n}\nconst int N=300005,M=20;\nint n,m;\nstruct Tree{\n\t#define mid ((le+ri)>>1)\n\t#define lson le,mid,dep+1\n\t#define rson mid+1,ri,dep+1\n\tstruct Node{\n\t\tint num[N],toleft[N];\n\t};\n\tNode t[M];\n\tint sorted[N];\n\tvoid build(int le,int ri,int dep){\n\t\tif(le==ri){\n\t\t\treturn;\n\t\t}\n\t\tint key=sorted[mid];\n\t\tint equ=mid-le+1;\n\t\tfor(int i=le;i<=ri;i++){\n\t\t\tif(t[dep].num[i]<key){\n\t\t\t\tequ--;\n\t\t\t}\n\t\t}\n\t\tint tl=0;\n\t\tint it1=le-1,it2=mid;\n\t\tfor(int i=le;i<=ri;i++){\n\t\t\tint now=t[dep].num[i];\n\t\t\tif(now<key||(now==key&&equ)){\n\t\t\t\tif(now==key){\n\t\t\t\t\tequ--;\n\t\t\t\t}\n\t\t\t\ttl++;\n\t\t\t\tt[dep+1].num[++it1]=now;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tt[dep+1].num[++it2]=now;\n\t\t\t}\t\n\t\t\tt[dep].toleft[i]=tl;\t\n\t\t}\n\t\tbuild(lson);\n\t\tbuild(rson);\n\t}\n\tint query(int le,int ri,int dep,int x,int y,int z){\n\t\tif(le==ri){\n\t\t\treturn t[dep].num[le];\n\t\t}\n\t\tint tl=0,del=t[dep].toleft[y];\t\n\t\tif(le!=x){\n\t\t\ttl=t[dep].toleft[x-1];\n\t\t\tdel-=tl;\n\t\t}\t\n\t\tint nx,ny;\t\n\t\tif(del>=z){\n\t\t\tnx=le+tl;\n\t\t\tny=nx+del-1;\n\t\t\treturn query(lson,nx,ny,z);\n\t\t}\n\t\telse{\t\n\t\t\tnx=mid+1+x-tl-le;\n\t\t\tny=nx+y-x-del;\n\t\t\treturn query(rson,nx,ny,z-del);\n\t\t}\t\n\t}\t\n};\nTree T;\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tT.t[0].num[i]=read();\n\t\tT.sorted[i]=T.t[0].num[i];\n\t}\n\tsort(T.sorted+1,T.sorted+1+n);\n\tT.build(1,n,0);\n\tint x,y,z;\n\tfor(int i=1;i<=m;i++){\n\t\tx=read(),y=read(),z=read();\n\t\tint ans=T.query(1,n,0,x,y,z);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571645257,
        "uid": 178864,
        "name": "LordLeft",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a\n\n\u6211\u7b2c\u4e00\u611f\u89c9\u662f\uff1a\u8fd9\u4e0d\u662f\u4e3b\u5e2d\u6811\u88f8\u9898\u5417\uff1f\n\n\u7136\u540e\uff1a\u8fd9\u7528\u4e0d\u7740\u4e3b\u5e2d\u6811\u5427\u3002\u3002\u3002\n\nThen\uff1a\u79bb\u7ebf\uff0c\u7136\u540evector\u66b4\u529b\u5e73\u8861\u6811\u4e71\u641e\u5c31\u597d\u4e86\u5440\uff01\n\n\u6253\u4ee3\u7801\u2026\u2026\u2026\u2026\n\n\u7136\u540e\u6109\u5feb\u5730\u4ea4\u4e86\u4e0a\u53bb\uff0c\u5c31\u53ea\u670990\uff0cTLE\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u679c\u7136\u66b4\u529b\u5e73\u8861\u6811\u8fd8\u662f\u8fc7\u4e0d\u4e86300000\u5440\u3002\n\n\u7136\u540e\u5c31\u641e\u51fa\u6765\u6211\u539f\u6765\u7684Splay\uff0c\u8d34\u4e86\u4e0a\u53bb\uff0c\u4fe1\u5fc3\u6ee1\u6ee1\u5730\u53c8\u4ea4\u4e86\u4e00\u6b21\u3002\n\n60\uff0c2WA\uff0c2TLE\uff0c\u6211\u5c31\u653e\u5f03\u4e86\u3002\n\n\u91cd\u65b0\u770b\u8fd9\u4e2a\u9898\uff0c\u6211\u53d1\u73b0\uff0c\u6211\u5c31\u53ef\u4ee5\u641e\u6743\u503c\u7ebf\u6bb5\u6811\u5440\uff0c\u4ee5\u6211\u81ea\u5e26\u7684\u5c0f\u5e38\u6570\uff0c\u5e94\u8be5\u4e0d\u4f1aT\u7684\u3002\n\n\u6253\u4ee3\u7801\u2026\u2026\u2026..\n\nAC\uff01\n\u5ba3\u4f20\u4e00\u53d1blog\uff1a[\u73ab\u8475\u4e4b\u8776\u7684blog](http://blog.csdn.net/stone41123/article/details/78152563)\n\n\u6b63\u9898\uff1a\n\n\u8fd9\u4e2a\u9898\u53ef\u4ee5\u79bb\u6563\u5316\uff0c\u8fd8\u8981\u79bb\u7ebf\u4e0b\u6765\uff0c\u5c06\u8be2\u95ee\u533a\u95f4\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\uff0c\u4e0d\u65ad\u79fb\u52a8\u5de6\u53f3\u7aef\u70b9\uff0c\u6dfb\u52a0\u533a\u95f4\u5185\u7684\u503c\uff0c\u5220\u9664\u88ab\u6392\u51fa\u533a\u95f4\u5916\u7684\u503c\uff0c\u6bcf\u6b21\u4e0d\u65ad\u79fb\u52a8\u76f4\u5230\u4e0e\u8be2\u95ee\u533a\u95f4\u91cd\u5408\uff0c\u7edf\u8ba1\u7b54\u6848\uff0c\u6700\u540e\u6309\u987a\u5e8f\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n\uff08p.s\uff1a\u4e3b\u5e2d\u6811\u5176\u5b9e\u5c31\u662f\u597d\u591a\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6211\u8fd9\u4e2a\u5c31\u662f\u4e3b\u5e2d\u6811\u7684\u7b80\u5316\u7248\uff0c\u4e0d\u8fc7\u8dd1\u7684\u5feb\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<vector>\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0;char ch=' ';int f=1;\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nint n,m,size;\nint a[300001];\nstruct block{\n    int l,r,k,id;\n    inline bool operator < (const block& y) const {\n        return l<y.l;\n    }\n}b[50001];\nint ans[50001];\nint c[300001];\ninline int Hash(int x){\n    return lower_bound(c+1,c+size+1,x)-c;\n}\nint sum[300001<<2];\nvoid update(int rt,int l,int r,int x,int v){\n    if(l==r){\n        sum[rt]+=v;\n        return;\n    }\n    int mid=l+r>>1;\n    if(x<=mid)update(rt<<1,l,mid,x,v);\n    else update(rt<<1|1,mid+1,r,x,v);\n    sum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}\nint kth(int rt,int l,int r,int k){\n    if(l==r)return c[l];\n    int mid=l+r>>1;\n    if(k<=sum[rt<<1])return kth(rt<<1,l,mid,k);\n    else return kth(rt<<1|1,mid+1,r,k-sum[rt<<1]);\n}\nint main(){\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n        c[i]=a[i];\n    }\n    sort(c+1,c+n+1);\n    size=unique(c+1,c+n+1)-c-1;\n    \n    for(int i=1;i<=m;i++){\n        b[i].l=read();b[i].r=read();b[i].k=read();b[i].id=i;\n    }\n    sort(b+1,b+m+1);\n    int l=1,r=0;\n    for(int i=1;i<=m;i++){\n        while(r<b[i].r){\n            update(1,1,size,Hash(a[++r]),1);\n        }\n        while(l<b[i].l){\n            update(1,1,size,Hash(a[l++]),-1);\n        }\n        ans[b[i].id]=kth(1,1,size,b[i].k);\n    }\n    for(int i=1;i<=m;i++){\n        printf(\"%d\\n\",ans[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1506949711,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u597d\u60f3\u7684\u672c\u9898\u505a\u6cd5\u3002\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u770b\u5230\u9759\u6001\u7b2cK\u5c0f\u6211\u5f88\u9ad8\u5174\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316sgt\uff09\u505a\u3002\n\n\u8003\u8651\u5c06\u503c\u57df\u79bb\u6563\u5316\uff0c\u5e76\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5168\u5c40\u6392\u540d\u3002\n\n\u800c\u53ef\u6301\u4e45\u5316\u540e\uff0croot[pos]\u7ef4\u62a4\u4e86\u4e00\u68f5\u4ee5\u5e8f\u5217\u4e2d1~pos\u7684\u6570\u5efa\u7acb\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u90a3\u4e48\u4f7f\u7528\u76f8\u51cf\u53ef\u4ee5\u77e5\u9053l~r\u4e2d\u67d0\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u8003\u8651\u540c\u6b65\u904d\u5386\u4ee5root[l - 1]\u548croot[r]\u4e3a\u6839\u7684\u6811\u3002\n\n\u5982\u679c\u5de6\u5b50\u6811\u5927\u5c0f\u4e4b\u5dee\u5c0f\u4e8ekth\uff0c\u5219\u7b54\u6848\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u9012\u5f52\u6267\u884c\u3002\n\n\u82e5\u5927\u4e8e\u7b49\u4e8ekth\uff0c\u5219kth -= sum[L[p]] - sum[L[q]]\u7136\u540e\u5728\u53f3\u5b50\u6811\u4e2d\u9012\u5f52\u3002\n\n\u82e5\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u4e3a\u7b54\u6848\uff0c\u53ef\u8fd4\u56de\u3002\n\n\u79bb\u6563\u5316\uff1a\n\n```cpp\n\tread(n), read(m);\n\tfor (int i = 1; i <= n; i++) read(a[i]), b[i] = a[i];\n\tsort(b + 1, b + n + 1); tot = unique(b + 1, b + n + 1) - (b + 1);\n\tT.build(root[0], 1, tot);\n\tfor (int i = 1; i <= n; i++) {\n\t\tint tmp = lower_bound(b + 1, b + tot + 1, a[i] + 1) - (b + 1);\n\t\tT.update(root[i], root[i - 1], 1, tot, tmp);\n\t}\n```\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\nint n, m, tot, a[Maxn], b[Maxn], root[Maxn];\nstruct PresidentTree {\n\tint sum[Maxn * 40], L[Maxn * 40], R[Maxn * 40], cnt;\n\tPresidentTree(void) { cnt = 0; Ms(sum, 0); }\n\tinline void build(int &pos, int l, int r) {\n\t\tpos = ++cnt; if (l == r) return; register int mid = l + r >> 1;\n\t\tbuild(L[pos], l, mid), build(R[pos], mid + 1, r);\n\t}\n\t\n\tinline void update(int &pos, int pre, int l, int r, int idx) {\n\t\tpos = ++cnt; L[pos] = L[pre], R[pos] = R[pre], sum[pos] = sum[pre] + 1;\n\t\tif (l == r) return; register int mid = l + r >> 1;\n\t\tif (idx <= mid) update(L[pos], L[pre], l, mid, idx);\n\t\telse update(R[pos], R[pre], mid + 1, r, idx);\n\t}\n\t\n\tinline int query(int p, int q, int l, int r, int kth) {\n\t\tif (l == r) return l;\n\t\tregister int cnt = sum[L[p]] - sum[L[q]], mid = l + r >> 1;\n\t\tif (kth <= cnt) return query(L[p], L[q], l, mid, kth);\n\t\telse return query(R[p], R[q], mid + 1, r, kth - cnt);\n\t}\n} T;\n```\n\n\u4f5c\u8005\u4e0d\u6613\uff0c\u5e0c\u671b\u652f\u6301\uff01\u8c22\u8c22\uff01\n\n",
        "postTime": 1573723909,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "[\u540c\u6b65\u4e8e\u6211\u7684blogs](https://www.cnblogs.com/henry-1202/p/10090698.html)\r\n\r\n## $fhq\\ treap$\u505a\u6cd5\r\n\r\n\u6ca1\u4eba\u5199$fhq\\ treap$\u505a\u6cd5\uff0c\u90a3\u6211\u5c31\u8865\u4e00\u7bc7qwq\r\n\r\n\u770b\u5230\u8fd9\u9898\u7b2c\u4e00\u65f6\u95f4\u60f3\u4e3b\u5e2d\u6811\uff0c\u7136\u540e\u53d1\u73b0\u6211\u8fd8\u6ca1\u5b66\u4e3b\u5e2d\u6811\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u5e73\u8861\u6811\u505a\u6cd5\uff08\u5f53\u7136\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u7684\u5957\u8def\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u4e24\u4e2a$log$\u7684\u590d\u6742\u5ea6\u592a\u4f18\u79c0\u4e86\u5c31\u4e0d\u5199\u4e86\uff09\r\n\r\n\u5176\u5b9e\u548ctreap\u7684\u5199\u6cd5\u5dee\u4e0d\u591a\uff0c\u4e5f\u662f\u6392\u5e8f\u4e00\u904d\u7136\u540e\u63d2\u5165\uff0c\u5220\u9664\uff0c\u6c42$kth$\r\n\r\n\u4e0d\u8fc7\u597d\u5199\u5f88\u591a\uff0c\u4e3b\u4f53\u5c3140+\u884c\uff0c\u6ce8\u610f\u4e00\u5f00\u59cb\u90a3\u4e2a\u8282\u70b9\u7684\u503c\u4e00\u5b9a\u8981\u5927...\r\n\r\n\u6211\u5f00$0x3f$\u7136\u540e\u6302\u4e86\u4e00\u4e2a\u4e0a\u5348...\r\n\r\n\uff08\u5176\u5b9e\u4e00\u5f00\u59cb\u8fd8\u5199\u4e86\u83ab\u961f\u6765\u7740\u4f46\u662f\u53d1\u73b0\u4e0d\u9700\u8981\uff09\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define inf 0x7fffffff\r\n#define il inline\r\n\r\nnamespace io {\r\n\r\n    #define in(a) a=read()\r\n    #define out(a) write(a)\r\n    #define outn(a) out(a),putchar('\\n')\r\n\r\n    #define I_int int\r\n    inline I_int read() {\r\n        I_int x = 0 , f = 1 ; char c = getchar() ;\r\n        while( c < '0' || c > '9' ) { if( c == '-' ) f = -1 ; c = getchar() ; }\r\n        while( c >= '0' && c <= '9' ) { x = x * 10 + c - '0' ; c = getchar() ; }\r\n        return x * f ;\r\n    }\r\n    char F[ 200 ] ;\r\n    inline void write( I_int x ) {\r\n        if( x == 0 ) { putchar( '0' ) ; return ; }\r\n        I_int tmp = x > 0 ? x : -x ;\r\n        if( x < 0 ) putchar( '-' ) ;\r\n        int cnt = 0 ;\r\n        while( tmp > 0 ) {\r\n            F[ cnt ++ ] = tmp % 10 + '0' ;\r\n            tmp /= 10 ;\r\n        }\r\n        while( cnt > 0 ) putchar( F[ -- cnt ] ) ;\r\n    }\r\n    #undef I_int\r\n\r\n}\r\nusing namespace io ;\r\n\r\nusing namespace std ;\r\n\r\n#define N 300010\r\n#define int long long \r\n\r\nint n , tot = 0, root = 1; \r\n\r\n//fhq-treap\r\nstruct fhq_treap {\r\n    int siz , val , lc , rc , rnk ;\r\n} t[N] ;\r\nvoid pushup(int rt) {t[rt].siz = t[t[rt].lc].siz + t[t[rt].rc].siz + 1 ;}\r\nvoid split(int &a , int &b , int val , int rt) {\r\n    if(!rt) { a = b = 0 ; return ; }\r\n    if(t[rt].val <= val) a = rt , split(t[a].rc , b , val , t[rt].rc) ;\r\n    else b = rt , split(a , t[b].lc , val , t[rt].lc) ;\r\n    pushup(rt) ;\r\n}\r\nvoid merge(int a , int b , int &rt) {\r\n    if(!a || !b) {rt = a + b ; return ;}\r\n    if(t[a].rnk < t[b].rnk) rt = a , merge(t[a].rc , b , t[rt].rc) ;\r\n    else rt = b , merge(a , t[b].lc , t[rt].lc) ;\r\n    pushup(rt) ;\r\n} \r\nint new_node(int val) {\r\n    t[++tot] = (fhq_treap) {1 , val , 0 , 0 , rand()} ;\r\n    return tot ;\r\n}\r\ninline void insert(int val) {\r\n    int x = 0 , y = 0 , z = new_node(val) ;\r\n    split(x , y , val , root) ;\r\n    merge(x , z , x) ; merge(x , y , root) ;\r\n}\r\nvoid Del(int val) {\r\n    int x = 0 , y = 0 , z = 0 ;\r\n    split(x , y , val , root) ; split(x , z , val - 1 , x) ;\r\n    merge(t[z].lc , t[z].rc , z) ; merge(x , z , x) ; merge(x , y , root) ;\r\n}\r\ninline int find_val(int rnk , int rt) {\r\n\twhile(t[t[rt].lc].siz + 1 != rnk) {\r\n\t\tif(t[t[rt].lc].siz >= rnk) rt = t[rt].lc ;\r\n\t\telse rnk -= t[t[rt].lc].siz + 1 , rt = t[rt].rc ;\r\n\t}\r\n\treturn t[rt].val ;\r\n}\r\n//fhq-treap end\r\n\r\nstruct query {\r\n    int l , r , val , id;\r\n} q[N] ;\r\nint ans[N] , a[N] , block ;\r\n\r\nbool cmp(query a , query b) {\r\n    return a.l == b.l ? a.r < b.r : a.l < b.l ;\r\n}\r\n\r\nsigned main() {\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"1.in\",\"r\",stdin);\r\n    freopen(\"1.out\",\"w\",stdout);\r\n#endif\r\n    srand((unsigned)time(0)) ;\r\n    n = read() ; int m = read() ;\r\n    new_node(inf) ; t[1].siz = 0 ;\r\n    for(int i = 1 ; i <= n ; i ++) a[i] = read() ;\r\n    for(int i = 1 ; i <= m ; i ++) q[i] = (query) {read() , read() , read() , i} ;\r\n    block = sqrt(n) ; sort(q + 1 , q + m + 1 , cmp) ;\r\n    q[0].l = 1 ;\r\n    for(int i = 1 ; i <= m ; i ++) {\r\n        for(int cur = q[i-1].r + 1 ; cur <= q[i].r ; cur ++) insert(a[cur]) ;\r\n        for(int cur = q[i-1].l ; cur < q[i].l ; cur ++) Del(a[cur]) ;\r\n        ans[q[i].id] = find_val(q[i].val , root) ;\r\n    }\r\n    for(int i = 1 ; i <= m ; i ++) outn(ans[i]) ;\r\n}\r\n```",
        "postTime": 1544328774,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u8981\u6c42\u4fee\u6539\u3002\u3002\u53ef\u4ee5\u79bb\u7ebf\u4e71\u641e\u3002\u3002\uff08\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u4e86\u5427\u3002\u3002\uff09\n\n\u5148\u628a\u6240\u6709\u8be2\u95ee\u8bfb\u8fdb\u6765\uff0c\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\u3002\u79bb\u6563\u5316\u4e00\u4e0b\u3002\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u3002\u3002\u3002\u4e0b\u9762\u7684redbag dalao \u5e94\u8be5\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u3002\u3002\n\n\u6211\u5c31\u8d34\u4ee3\u7801\u597d\u4e86\u3002\u3002\u8fd8\u662f\u6709\u5730\u65b9\u4e0d\u4e00\u6837\u7684\u5427\u3002\u3002\n\n\u4e3b\u8981\u662f\u5c06\u539f\u6570\u7ec4\u6620\u5c04\u5230\u4e861~ n\uff0c\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\u539f\u6765\u7684\u6570\u5b57\u3002\u8fd9\u6837\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u4e8c\u5206\u4e86\u3002\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define ri register int\n#define fp(i,a,b) for(ri i=a,I=b;i<=I;++i)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\nusing namespace std;\nchar ss[1<<17],*A=ss,*B=ss;\n//#define gc getchar\ninline char gc(){return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?EOF:*A++;}\ntemplate<class T>inline void read(T&x){\n    ri f=1,c;while(c=gc(),c<48||57<c)if(c=='-')f=-1;x=c^48;\n    while(c=gc(),47<c&&c<58)x=(x<<3)+(x<<1)+(c^48);x*=f;\n}\nchar sr[1<<20],z[20];int C=-1,Z;\ntemplate<class T>inline void wer(T x){\n    if(x<0) sr[++C]='-',x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=3e5+5,M=5e4+5;\nint n,m,siz,a[N],c[N],ans[M],mp[N];\nstruct node{\n    int l,r,k,id;\n    inline bool operator<(const node&r)const{return l<r.l;}\n}b[M];\n//\u6811\u72b6\u6570\u7ec4\u76f8\u5173\nint t[N];\ninline void update(ri x,ri v){for(;x<=n;x+=x&-x)t[x]+=v;}\ninline int  query(ri x){ri res=0;for(;x;x-=x&-x)res+=t[x];return res;} \ninline bool cmp(ri x,ri y){return a[x]<a[y];}\nint main(){\n    read(n);read(m);\n    fp(i,1,n) read(a[i]),c[i]=i;\n    sort(c+1,c+n+1,cmp);fp(i,1,n) mp[i]=a[c[i]],a[c[i]]=i;\n    fp(i,1,m)read(b[i].l),read(b[i].r),read(b[i].k),b[i].id=i;\n    sort(b+1,b+m+1);b[0].l=1,b[0].r=0;\n    fp(i,1,m){\n        fp(j,b[i-1].r+1,b[i].r) update(a[j],1);\n        fp(j,b[i-1].l,b[i].l-1) update(a[j],-1);\n        ri l = 1,r = n, mid;\n        while(l < r){\n            mid = l + r >> 1;\n            if(query(mid) >= b[i].k) r = mid;\n            else l = mid + 1; \n        }\n        ans[b[i].id] = mp[l];\n    }\n    fp(i,1,m) wer(ans[i]);\n    fwrite(sr,1,C+1,stdout);\n}\n```",
        "postTime": 1509111966,
        "uid": 48967,
        "name": "\u5948\u8299\u83b2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u9898\u89e3 by redbag\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u7528\u6811\u72b6\u6570\u7ec4\u7684\u89e3\u6cd5\n\n\u601d\u8def\uff1a\u5148\u79bb\u6563a\u6570\u7ec4\n\n\u7136\u540e\u8bfb\u5165\u8be2\u95ee\uff0c\n\n\u5c06\u8be2\u95ee\u6392\u5e8f\uff08\u7b2c\u4e00\u5173\u952e\u5b57\uff1a\u5de6\u7aef \u7b2c\u4e8c\u5173\u952e\u5b57\uff1a\u53f3\u7aef\uff09\n\n\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\n\n\u5c06\u5de6\u7aef\u4e4b\u524d\u7684\u5220\u53bb\n\n\u5c06\u5de6\u7aef\u5230\u53f3\u7aef\u4e2d\u6ca1\u6709\u52a0\u5230\u6811\u72b6\u6570\u7ec4\u7684\u52a0\u4e0a\u53bb\n\n\u6700\u540e\u4e8c\u5206\u627e\u7b2ck\u5c0f\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint a[300010];//\u70b9\u7684\u4e2a\u6570\nstruct node\n{\n    int x,y,k,d;//x\u2192y\u7b2ck\u5c0f\uff0cd\uff1a\u539f\u7f16\u53f7 \n} q[51000];//\u8be2\u95ee \nint ans[51000];//\u5b58\u7ed3\u679c \nint i,j,n,m;\nint t[301000];//\u6811\u72b6\u6570\u7ec4 \nint h[301000];\nbool cmp(node aa,node bb)//\u5173\u952e\u5b571\uff1a\u5de6\u7aef \u5173\u952e\u5b572\uff1a\u53f3\u7aef \n{\n    if (aa.x==bb.x) return aa.y<bb.y;\n    return aa.x<bb.x;\n} \nvoid xg(int k,int p)//\u6811\u72b6\u6570\u7ec4\u4e4b \n{\n    while (k<=n)\n    {\n        t[k]+=p;\n        k+= k & -k;\n    } \n} \nint qh(int k)\n{\n    int sum=0;\n    while (k>=1)\n    {\n        sum+=t[k];\n        k-= k & -k; \n    } \n    return sum;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        h[i]=a[i];\n    }\n    sort(h+1,h+n+1);//h:\u6392\u597d\u5e8f\u7684\u6570\u7ec4 \n    for (i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&q[i].x,&q[i].y,&q[i].k);\n        q[i].d=i;\n    }\n    int he=1;int ta=0;\n    sort(q+1,q+m+1,cmp);//\u6392\u5e8f\n    for (i=1;i<=m;i++)\n    {\n        while (ta<q[i].y)//\u628a\u4e4b\u524d\u6ca1\u6709\u52a0\u8fc7\u7684\u5143\u7d20\u52a0\u5230\u6811\u72b6\u6570\u7ec4\u4e2d \n        {\n            ta++;\n            xg(lower_bound(h+1,h+n+1,a[ta])-h,1);//\u540c\u4e0b \n        }\n        while (he<q[i].x)//\u5220\u53bb\u524d\u9762\u52a0\u8fc7\u7684\u5143\u7d20 \n        {\n            xg(lower_bound(h+1,h+n+1,a[he])-h,-1);\n            //lower_bound(h+1,h+n+1,a[he])-h\uff1a\u627eh[1]~h[ht]\u4e2d\u7b2c\u4e00\u4e2a>=a[ta]\u7684h[i]\u7684\u4e0b\u6807i \n            he++;\n        }\n        int l=1;\n        int r=n;\n        int mid;\n        while (l<r)//\u4e8c\u5206\u627e\u7b2ck\u5c0f\u6570 \n        {\n            mid=(l+r)>>1;\n            if (qh(mid)>=q[i].k) r=mid; else l=mid+1;\n        }\n        ans[q[i].d]=h[l]; \n    } \n    for (i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\u8fd8\u6709\u4e00\u4e2atreap\u7684\u89e3\u6cd5\n    \n    \n\n```cpp\n//treap\u7248 \n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<list>\n#include<cstdlib>\n#define For(i,a,b)for(i=(int)a;i<=int(b);++i)\n#define nu NULL\nusing namespace std;\n//--------------------------------------------------------------\nstruct node\n{\n    node* ch[2];//0:\u5de6\u5b50\u6811 1:\u53f3\u5b50\u6811\n    int s;//\u5b58\u8282\u70b9\u4e2a\u6570\n    int v;//\u5b58\u503c\n    int w;//\u968f\u673a\u4f18\u5148\u7ea7 \n    node()//\u521d\u59cb\u5316 \n    {\n        s=1;\n        v=0;\n        w=rand();\n        ch[0]=NULL;\n        ch[1]=NULL;\n    } \n};\nnode* root; \nstruct node1\n{\n    int x,y,k,d;//d: \u7f16\u53f7 \n} q[50010];\nint n,m,k;//j:\u5faa\u73af\u63a7\u5236\u53d8\u91cf\nint ans[50010];//\u5b58\u7ed3\u679c\nint a[300000];//\u5b58\u539f\u6570\u7ec4 \nbool cmp(node1 aa,node1 bb)//q\uff1a\u6392\u5e8f\u7528 \n{\n    if (aa.x==bb.x) return aa.y<bb.y;\n    return aa.x<bb.x;\n} \n//--------------------------------------------------------------\nvoid maintain(node* &u)//\u4fee\u6539\u8282\u70b9\u4e2a\u6570 \n{\n    u->s=1;//\u81ea\u5df1\u4e5f\u7b97QAQ \n    if (u->ch[0]!=NULL) u->s+=u->ch[0]->s;//\u52a0\u4e0a\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570 \n    if (u->ch[1]!=NULL) u->s+=u->ch[1]->s;//\u52a0\u4e0a\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570 \n}\nvoid turn(node* &u,int d)//d:0\u5de6\u65cb\uff0c1\uff1a\u53f3\u65cb \n{\n    node* k=u->ch[d^1];//\u6316\u51fa\u53f3\u5b50\u6811 \n    u->ch[d^1]=k->ch[d];//\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u53d8\u6210\u5f53\u524d\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811 \n    k->ch[d]=u;//\u539f\u672c\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u6574\u4e2a\u6811\u7684\u6839\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u53d8\u6210\u539f\u672c\u7684\u90a3\u68f5\u6811 \n    maintain(u);//\u91cd\u65b0\u7edf\u8ba1\u8282\u70b9\u4e2a\u6570 ,\u5148\u628a\u6811\u7684\u5de6\u5b50\u6811\u7684\u7edf\u8ba1\u4e86\uff0c\u624d\u80fd\u7edf\u8ba1\u6574\u4e2a\u6811\u7684 \n    maintain(k);//\u7edf\u8ba1 \n    u=k;//\u4f20\u8fc7\u53bb \n}\nvoid ins(node* &u,int x)//\u628ax\u63d2\u5230\u6811u\u4e2d\u53bb\n{\n    if (u==NULL)\n    {\n        u=new node;//\u5efa\u6811 \n        u->v=x; \n    } else\n    {\n        int d=x < u->v ? 0:1;\n        ins(u->ch[d],x);//\u6839\u636e\u5927\u5c0f\u63d2\u5165\u5230\u5bf9\u5e94\u5b50\u6811\uff08\u5de6\u5b50\u6811/\u53f3\u5b50\u6811 \n        if (u->ch[d]->w > u->w) turn(u,d^1);//\u5de6\u5b50\u6811\u7684w\u5927\u4e8e\u7236\u8282\u70b9\u7684w\u5c31\u53f3\u65cb\n        //\u53e6\u4e00\u4e2a\u5b50\u6811\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u7ba1\u56e0\u4e3a\u6ca1\u6709\u4fee\u6539  \n    }\n    maintain(u);//\u7136\u540e\u53c8\u8981\u66f4\u65b0QAQ \n}\nvoid remove(node* &u,int x)\n{\n    if (u->v==x)//\u627e\u5230\u8981\u5220\u9664\u7684\u70b9\u4e86\n    {\n        if (u->ch[0]!=NULL && u->ch[1]!=NULL)//\u6709\u5de6\u53f3\u5b50\u6811\n        {\n            int d=u->ch[0]->w >u->ch[1]->w ? 1:0; //\u5de6\u5b50\u6811\u7684W\u5927\u4e8e\u53f3\u5b50\u6811\u7684W \u53f3\u65cb \n            turn(u,d);//\u5de6\u65cb/\u53f3\u65cb \n            remove(u->ch[d],x);// \u7136\u540e\u65cb\u7684\u54ea\u4e2a\u65b9\u5411\u5c31\u626b\u90a3\u8fb9\u7684\u5b50\u6811\uff0c\u4f8b\u5982\uff1a\u53f3\u65cb\u4e4b\u540e\uff0c\u5728\u53f3\u5b50\u6811\u4e2d\u626bx \n        } \n        else if (u->ch[0]==NULL)//\u5de6\u5b50\u6811\u4e3a\u7a7a\u76f4\u63a5\u5220\u53bb\uff0c\u62ff\u53f3\u5b50\u6811\u8865\u4e0a \n             u=u->ch[1]; \n             else u=u->ch[0];\n    } \n    else\n    {\n        if (x<u->v) remove (u->ch[0],x);//x\u5c0f\u4e8eu->v \u626b\u5de6\u5b50\u6811 \n        else remove(u->ch[1],x); //\u5426\u5219\u626b\u53f3\u5b50\u6811 \n    } \n    if (u!=NULL) maintain(u);//\u66f4\u65b0\u8282\u70b9\u4e2a\u6570\uff0c\u8fd9\u4e2a\u7ecf\u5e38\u8981\u6539 QAQ \n} \nint sum(node* u,int k)\n{\n    if (u==NULL||k > u->s||k<=0) return 0;//k<0\u6216\u8005k\u6bd4\u8282\u70b9\u4e2a\u6570\u8fd8\u5927\uff0c\u80af\u5b9a\u4f1a\u51fa\u4e8b \n    int ss=0;\n    if (u->ch[0]!=NULL) ss=u->ch[0]->s;//\u6c42\u5de6\u5b50\u6811\u8282\u70b9\u4e2a\u6570 \n    if (k==ss+1) return u->v;//\u6bd4k\u5c0f\u7684\u6570 \u521a\u597d\u7b49\u4e8ek-1\uff0c\u8fd4\u56de\u503c \n    if (k<=ss)return sum(u->ch[0],k);//\u6bd4k\u5c0f\u7684\u6570>k-1\u641c\u5de6\u5b50\u6811 \n    else  return (sum(u->ch[1],k-ss-1));//\u6bd4k\u5c0f\u7684\u6570<k\uff0c\u641c\u53f3\u5b50\u6811 \n}\nint read()//\u8bfb\u5165\u4f18\u5316 \n{\n    int x=0,flag=1;\n    char a=getchar();\n    while (a<'0'||a>'9')\n    {\n        if (a=='-') flag=-1;\n        a=getchar();\n    }\n    while (a>='0'&&a<='9') \n    {\n        x=x*10+(a-'0');\n        a=getchar();\n    }\n    return x*flag;\n} \n//-------------------------------------------------------------- \nint main()\n{\n//    freopen(\"1.in\",\"r\",stdin);\n//    freopen(\"1.out\",\"w\",stdout);\n    int i,j;\n    srand(937);//\u4f3c\u4e4e937\u5feb\u4e9bQAQ\n    n=read();\n    m=read();\n    for (i=1;i<=n;i++)\n    a[i]=read();//\u8bfb\u5165\u6bcf\u4e2a\u6570\n    for (i=1;i<=m;i++)\n    {\n        q[i].x=read();\n        q[i].y=read();\n        q[i].k=read();\n        q[i].d=i;\n    }\n    sort(q+1,q+m+1,cmp);//\u6392\u5e8f\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\uff1ax\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\uff1ay  \n//    for (i=1;i<=n;i++) printf(\"%d \",a[i]);\n//    puts(\"\");\n//    for (i=1;i<=m;i++) printf(\"233-%d %d %d %d\\n\",q[i].x,q[i].y,q[i].k,q[i].d);\n//    puts(\"\"); \n    int he=1,ta=0;\n    for (i=1;i<=m;i++) \n    {\n        while (ta<q[i].y)\n        {\n            ta++;\n            ins(root,a[ta]);//y\u524d\u9762\u6ca1\u52a0\u5230treap\u91cc\u7684\u5168\u90fd\u52a0\u4e0a\u53bb \n        }\n        while (he<q[i].x)\n        {\n            remove(root,a[he]);//\u5220\u53bbx\u524d\u9762\u7684 \n            he++;\n        }\n        ans[q[i].d]=sum(root,q[i].k);//\u6c42\u548c \n    }\n/*    int t;\n    For(i,q[1].x,q[1].y)ins(root,a[i]);//\u628aa[i]\u52a0\u5230\u6811\u4e2d \n    ans[q[1].d]=sum(root,q[1].k);//\u6c42\u89e3 \n    // int t;\n    For(k,2,m)\n    {\n        t=min(q[k-1].y,q[k].x-1);\n        For(i,q[k-1].x,t)remove(root,a[i]);//\u5220\u53bbq[k].x\u524d\u9762\u7684\u70b9 \n        t=max(q[k-1].y+1,q[k].x);\n        For(i,t,q[k].y)ins(root,a[i]);//\u589e\u52a0\u8be5\u6bb5\u6ca1\u6709\u52a0\u8fdb\u53bb\u7684\u70b9 \n        ans[q[k].d]=sum(root,q[k].k);//\u6c42\u89e3 \n    }*/\n    for (i=1;i<=m;i++) printf(\"%d\\n\",ans[i]); \n    return 0;\n}\n```",
        "postTime": 1498732340,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6211\u8fd9\u4e2a\u521a\u5b66\u5b8c**\u83ab\u961f+\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u7684\u5e73\u8861\u6811**\u7684\u849f\u84bb\u6765\u8bf4,\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u89e3\u6cd5\u5c31\u662f\u5b83\u95e8\u4fe9\u4e86,\u6070\u597d\u8fd9\u4e00\u9898\u5bf9\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u5f88\u53cb\u597d.\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/34a0v1d4.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/rrro11x9.png)\n\n\u5982\u679c\u8fd8\u6ca1\u5b66\u8fc7\u83ab\u961f\u7684\u53ef\u4ee5\u901a\u8fc7[\u4e00\u53ea\u5c0f\u5175\u5927\u4f6c\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/I-O-I/solution-p2709)\u4e86\u89e3\u83ab\u961f\u7684\u57fa\u672c\u539f\u7406,\u7136\u540e\u518d\u901a\u8fc7[zcy\u5927\u4f6c\u6bd4\u8f83\u7cbe\u7b80\u7684\u4ee3\u7801](https://www.luogu.com.cn/blog/zcysky/solution-p2709)\u6765\u4f5c\u4e3a\u6a21\u677f(\u4e24\u7bc7\u9898\u89e3\u6240\u5c5e[\u9898\u76ee](https://www.luogu.com.cn/problem/P2709)),~~\u53cd\u6b63\u6211\u5c31\u662f\u8fd9\u4e48\u5b66\u7684~~\n\n\u5982\u679c\u6ca1\u5b66\u8fc7\u5e73\u8861\u6811\u7684\u53ef\u4ee5\u901a\u8fc7[songhn\u5927\u4f6c\u7684\u9898\u89e3](https://songhn.blog.luogu.org/solution-p3369)\u5b66\u4e60\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u7684\u5e73\u8861\u6811\n\n\u7136\u540e\u6765\u8bb2\u8bb2\u601d\u8def.\u7531\u4e8e\u83ab\u961f\u53ef\u4ee5**\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4**,\u800c\u5e73\u8861\u6811\u53ef\u4ee5**\u5feb\u901f\u6c42\u51fa\u533a\u95f4\u4e2d\u7b2ck\u5c0f\u7684\u6570**.\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u83ab\u961f\u7ef4\u62a4\u533a\u95f4\u65f6\u5c06**\u8fdb\u5165\u533a\u95f4\u7684\u6570\u52a0\u5165\u5e73\u8861\u6811\u4e2d**,\u628a**\u51fa\u533a\u95f4\u7684\u6570\u4ece\u5e73\u8861\u6811\u4e2d\u5220\u9664**,\u518d\u5c06\u5f97\u51fa\u6570\u5b58\u5165\u7528\u4e8e\u8f93\u51fa\u7684\u6570\u7ec4\u4e2d(\u56e0\u4e3a\u83ab\u961f\u4f1a\u6253\u4e71\u987a\u5e8f,\u6240\u4ee5\u6211\u4eec\u8981\u5728\u5b58\u9898\u76ee\u7ed9\u7684\u533a\u95f4\u7684\u7ed3\u6784\u4f53\u4e2d\u5b58\u53f7\u5e8f\u53f7),\u6700\u540e\u4e00\u8d77\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\n\n\u7ec6\u8282\u770b\u4ee3\u7801\u5427,\u51e0\u4e4e\u5c31\u662f\u628a\u4e24\u4e2a\u6a21\u677f\u62fc\u5728\u4e00\u8d77\n\n### \u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+5;\nint n,opt[N],a[N],l[N],tr[N],tot,sz,ot[N];\ninline int read()\n{\n    char c=getchar();int sum=0,f=1;\n    while(!(c>='0'&&c<='9')) {if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') {sum=((sum<<1)+(sum<<3))+(c-'0');c=getchar();}\n    return sum*f;\n}\nint lb(int x){return x&(-x);}//lowbit\nvoid add(int w,int x)//\u7ebf\u6bb5\u6811\u7684add\u64cd\u4f5c\n{\n\tfor(int i=w;i<=tot;i+=lb(i))\n\t{\n\t\ttr[i]+=x;\n\t}\n}\nint pm(int x)//\u6c42\u7b2cx\u5c0f\n{\n\tint t=0;\n\tfor(int i=19;i>=0;i--)\n\t{\n\t\tt+=1<<i;\n\t\tif(t>tot||tr[t]>=x) t-=1<<i;\n\t\telse x-=tr[t];\n\t}\t\n\treturn l[t+1];\n}\nint gt(int x){return lower_bound(l+1,l+tot+1,x)-l;}//\u79bb\u6563\u5316\nstruct hh\n{\n\tint l,r,id,k;\n\tint qj;\n}q[N];//\u5b58\u9898\u76ee\u7ed9\u7684\u533a\u95f4\nint cmp(hh s1,hh s2)\n{\n\tif(s1.qj==s2.qj) return s1.r<s2.r;\n\telse return s1.qj<s2.qj;\n}//\u83ab\u961f\u7684\u6392\u5e8f\u9700\u8981\nint main()\n{\n\tn=read();int m=read();\n\tfor(int i=1;i<=n;i++) a[i]=read(),l[++tot]=a[i];//l\u7528\u4e8e\u79bb\u6563\u5316(\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u7684\u5e73\u8861\u6811\u9700\u8981)\n\tsort(l+1,l+tot+1);//\u7528\u4e8e\u79bb\u6563\u5316\u7684\u6392\u5e8f\n\ttot=unique(l+1,l+tot+1)-l-1;//\u79bb\u6563\u5316\n\tint sz=(int)sqrt(n);//\u83ab\u961f\u7684\u64cd\u4f5c\n\tfor(int i=1;i<=m;i++)//\u8f93\u5165\u533a\u95f4\n\t{\n\t\tq[i].l=read();q[i].r=read();q[i].k=read();\n\t\tq[i].id=i;//\u5b58\u5e8f\u53f7\n\t\tq[i].qj=((q[i].l-1)/sz)+1;//\u83ab\u961f\u7684\u64cd\u4f5c\n\t}\n\tsort(q+1,q+m+1,cmp);//\u83ab\u961f\u7684\u6392\u5e8f\n\tint l=1,r=0;//\u83ab\u961f\u9700\u8981\u7684\u4e00\u4e9b\u53d8\u91cf,l\u8868\u793a\u533a\u95f4\u5de6\u7aef\u70b9,r\u53cd\u4e4b\n\tfor(int i=1;i<=m;i++)//\u83ab\u961f+\u5e73\u8861\u6811\n\t{\n\t\twhile(l>q[i].l) l--,add(gt(a[l]),1);//\u52a0\u5165\u5e73\u8861\u6811\n\t\twhile(l<q[i].l) add(gt(a[l]),-1),l++;//\u5220\u9664\n\t\twhile(r<q[i].r) r++,add(gt(a[r]),1);//\u52a0\u5165\n\t\twhile(r>q[i].r) add(gt(a[r]),-1),r--;//\u5220\u9664\n\t    ot[q[i].id]=pm(q[i].k);//\u5b58\u7b54\u6848\n\t}\n\tfor(int i=1;i<=m;i++) cout<<ot[i]<<'\\n';//\u8f93\u51fa\n\treturn 0;//\u5b8c\u7f8e\u7ed3\u675f\n}\n```\n",
        "postTime": 1583503313,
        "uid": 199270,
        "name": "Y_B_Y",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "**\u83ab\u961f+treap**\n\n\u7b97\u662f\u5bf9\u4e4b\u524d\u5b66\u7684\u4e00\u4e2a\u590d\u4e60\u5427\n\n\u4e0d\u4f1a\u83ab\u961f\u6216\u5e73\u8861\u6811\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u53bb\u770b\u770b[\u6d1b\u8c37P3369](https://www.luogu.org/problemnew/show/P3369)\u548c[\u6d1b\u8c37P3901](https://www.luogu.org/problemnew/show/P3901)\n\n**\u8fd9\u91cc\u5199\u4e00\u4e0b\u5bf9\u4e8e\u83ab\u961f\u7684\u81ea\u5df1\u7684\u4e00\u4e9b\u7406\u89e3**\n\n\u5c31\u662f\u83ab\u961f(while)\u7684\u65f6\u5019\uff0c4\u4e2a\u6307\u9488\u79fb\u52a8\u7684\u987a\u5e8f\uff0c\u5e94\u8be5\u662f\u5148\u5199\u4ece\u91cc\u5411\u5916\u7684\u6269\u5c55\uff0c\u7136\u540e\u518d\u5199\u4ece\u5916\u5411\u91cc\u7684\n\n#### \u4ec0\u4e48\u610f\u601d\u5462\uff1f\n**\u5c31\u662f\u5148\u9ed8\u8ba4\u4f60\u73b0\u5728\u5904\u7406\u7684\u8303\u56f4\u6bd4\u4f60\u8981\u6c42\u7684\u8303\u56f4\u5c0f\uff0c\u6269\u5c55\u518d\u5199\u7f29\u5c0f\u7684\u8303\u56f4**\n\n\u8fd9\u5bf9\u540e\u9762\u7684\u95ee\u9898\u5904\u7406\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5bf9\u7b2c1\u4e2a\u95ee\u9898\u7684\u6c42\u89e3\u6709\u5f71\u54cd\n\n\u56e0\u4e3a\u6211\u4eec\u4e00\u5f00\u59cbl=1 r=0;\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f[2,4],\u5982\u679c\u6211\u4eec\u5148\u7f29\u5c0f\u8303\u56f4\uff0c\u518d\u6269\u5927\u8303\u56f4\u7684\u8bdd\uff0c\u4f1a\u8bef\u628a1\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u5220\u53bb\n\n### \u5e94\u8be5\u6ca1\u6709\u60f3\u9519\u5427\uff0c\u5982\u679c\u5199\u9519\u4e86dalao\u79c1\u4fe1\u6307\u5bfc\u6211\u4e00\u4e0b\u5427\n\n\u7136\u540e\u5c31\u662f\u5e73\u8861\u6811\u7684\u4e09\u79cd\u57fa\u672c\u64cd\u4f5c\u4e86\uff1a\u63d2\u5165\uff0c\u5220\u9664\uff0c\u627e\u7b2ck\u5927\n\n**Code:(Pascal)\uff1a**\n```\nvar\n  root,sizen,ll,rr:longint;\n  block,i,j,m,n,k,p:longint;\n  a,rnd,v,w,l,r,size:array[0..1000005]of longint;\n  x,y,num,ans,z:array[0..50005]of longint;\nprocedure qs(l,r:longint);\nvar\n  i,j,mid1,mid2,a1:longint;\nbegin\n  i:=l; j:=r;\n  mid1:=x[(l+r) div 2]; mid2:=y[(l+r) div 2];\n  repeat\n    if i div block=j div block then\n      begin\n        while x[i]<mid1 do inc(i);\n        while x[j]>mid1 do dec(j);\n        if not(i>j) then\n          begin\n            a1:=x[i]; x[i]:=x[j]; x[j]:=a1;\n            a1:=y[i]; y[i]:=y[j]; y[j]:=a1;\n            a1:=z[i]; z[i]:=z[j]; z[j]:=a1;\n            a1:=num[i]; num[i]:=num[j]; num[j]:=a1;\n            inc(i); dec(j);\n          end;\n      end\n    else\n      begin\n        while y[i]<mid2 do inc(i);\n        while y[j]>mid2 do dec(j);\n        if not(i>j) then\n          begin\n            a1:=x[i]; x[i]:=x[j]; x[j]:=a1;\n            a1:=y[i]; y[i]:=y[j]; y[j]:=a1;\n            a1:=z[i]; z[i]:=z[j]; z[j]:=a1;\n            a1:=num[i]; num[i]:=num[j]; num[j]:=a1;\n            inc(i); dec(j);\n          end;\n      end;\n  until i>j;\n  if i<r then qs(i,r);\n  if l<j then qs(l,j);\nend;\nprocedure update(k:longint);\nbegin\n  size[k]:=size[l[k]]+size[r[k]]+w[k];\nend;\nprocedure rturn(var k:longint);\nvar\n  child:longint;\nbegin\n  child:=l[k]; l[k]:=r[child]; r[child]:=k;\n  size[child]:=size[k]; update(k); k:=child;\nend;\nprocedure lturn(var k:longint);\nvar\n  child:longint;\nbegin\n  child:=r[k]; r[k]:=l[child]; l[child]:=k;\n  size[child]:=size[k]; update(k); k:=child;\nend;\nprocedure put(var k:longint; x:longint);\nbegin\n  if k=0 then\n    begin\n      inc(sizen); k:=sizen;\n      rnd[k]:=random(20*n+5); w[k]:=1;\n      v[k]:=x; size[k]:=1;\n      exit;\n    end;\n  inc(size[k]);\n  if x=v[k] then inc(w[k])\n  else\n    if x>v[k] then\n      begin\n        put(r[k],x);\n        if rnd[r[k]]<rnd[k] then lturn(k);\n      end\n    else\n      begin\n        put(l[k],x);\n        if rnd[l[k]]<rnd[k] then rturn(k);\n      end;\nend;\nprocedure delete(var k:longint; x:longint);\nbegin\n  if k=0 then exit;\n  if v[k]=x then\n    begin\n      if w[k]>1 then\n        begin dec(size[k]); dec(w[k]); exit; end;\n      if l[k]*r[k]=0 then\n        k:=l[k]+r[k]\n      else\n        begin\n          if rnd[l[k]]<rnd[r[k]] then\n            begin rturn(k); delete(k,x); end\n          else\n            begin lturn(k); delete(k,x); end;\n        end;\n    end\n  else\n    begin\n      if x>v[k] then\n        begin dec(size[k]); delete(r[k],x); end\n      else\n        begin dec(size[k]); delete(l[k],x); end;\n    end;\nend;\nfunction get(k,x:longint):longint;\nbegin\n  if x<=size[l[k]] then\n    exit(get(l[k],x))\n  else\n    if x>size[l[k]]+w[k] then\n      exit(get(r[k],x-size[l[k]]-w[k]))\n  else\n    exit(v[k]);\nend;\nbegin\n  randomize;\n  readln(n,m);\n  block:=trunc(sqrt(n));\n  for i:=1 to n do\n    read(a[i]);\n  readln;\n  for i:=1 to m do\n    begin\n      readln(x[i],y[i],z[i]);\n      num[i]:=i;\n    end;\n  qs(1,m);\n  ll:=1; rr:=0;\n  for i:=1 to m do\n    begin\n      while ll>x[i] do\n        begin\n          dec(ll); put(root,a[ll]);\n        end;\n      while rr<y[i] do\n        begin\n          inc(rr); put(root,a[rr]);\n        end;\n      while ll<x[i] do\n        begin\n         delete(root,a[ll]); inc(ll);\n        end;\n      while rr>y[i] do\n        begin\n          delete(root,a[rr]); dec(rr);\n        end;\n      ans[num[i]]:=get(root,z[i]);\n    end;\n  for i:=1 to m do\n    writeln(ans[i]);\nend.\n\n```",
        "postTime": 1538047393,
        "uid": 39488,
        "name": "\u56af\u5440\u56af\u5440",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u9898\u76ee\u5927\u591a\u53ef\u4ee5\u7528\u79bb\u7ebf+\u7ebf\u6bb5\u6811+\u4e8c\u5206\u641e\u4e00\u641e\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u4e48\u660e\u663e\u7684\u4e3b\u5e2d\u6811\u6a21\u677f\u9898\uff0c\u66f4P3834\u4e00\u6bdb\u4e00\u6837\u3002\n\n[\u4e3b\u5e2d\u6811\u8be6\u89e3\u4f20\u9001\u95e8\u3002](http://blog.csdn.net/no1\\_terminator/article/details/77601599)\n\n\u8fd9\u91cc\u5c31\u7b80\u5355\u7684\u8bb2\u4e00\u4e0b\u4e3b\u5e2d\u6811\u5427\u3002\n\n\u5c31\u662f\u628aa[1]...a[i]\u4e00\u6b21\u63d2\u5165\u4ee5\u7b2ci\u4e2a\u8282\u70b9\u533a\u95f4[1..n]\u4e3a\u6839\u7684\u7ebf\u6bb5\u6811\u4e2d\u53bb\uff0c\u90a3\u4e48\u533a\u95f4[i..j]\u4e2d\u67d0\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u5c31\u53ef\u4ee5\u7528sum[j]-sum[i]\u641e\u4e00\u641e\u5c31\u884c\u4e86\uff0c\n\n\u5982\u679c\u76f4\u63a5\u5efan\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4f1a\u9700\u8981O(n^2logn),\n\n\u6211\u4eec\u518d\u8003\u8651\u4ecei\u8f6c\u79fb\u5230i+1\u65f6\u53ea\u662f\u63d2\u5165\u4e86\u4e00\u4e2a\u70b9\uff0c\u7ed3\u5408\u7ebf\u6bb5\u6811\u7684\u70b9\u4fee\u6539\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u6b21\u63d2\u5165\u53ea\u662f\u5f71\u54cd\u4e86logn\u4e2a\u70b9\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u76f4\u63a5\u7528\u6307\u9488\u4f20\u9012\uff0c\u4e0d\u9700\u8981\u65b0\u5efa\u4e86\u3002\u6709\u65f6\u95f4\u518d\u5b66\u5b66Treap\u5427\u3002\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nconst int N=3e5+5;\nconst int M=N*21;\nusing namespace std;\nstruct President_Tree{\n    int sum,L,R;\n}T[M];\nint n,m,totn=0,T_cnt=1;\nint root[N],b[N],a[N];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid insert(int &now,int x,int l=1,int r=totn){\n    T[T_cnt++]=T[now];now=T_cnt-1;\n    T[now].sum++;\n    if (l==r)return;\n    int mid=(l+r)>>1;\n    if (x<=mid)insert(T[now].L,x,l,mid);\n        else insert(T[now].R,x,mid+1,r);\n}\nint query(int i,int j,int k,int l=1,int r=totn){\n    if (l==r)return l;\n    int mid=(l+r)>>1,t=T[T[j].L].sum-T[T[i].L].sum;\n    if (k<=t)return query(T[i].L,T[j].L,k,l,mid);\n        else return query(T[i].R,T[j].R,k-t,mid+1,r);\n}\nint main(){\n    n=read(),m=read();\n    for (int i=1;i<=n;i++)\n        b[i]=a[i]=read();\n    sort(b+1,b+n+1);\n    totn=unique(b+1,b+n+1)-b-1;\n    root[0]=0;\n    for (int i=1;i<=n;i++){\n        root[i]=root[i-1];\n        int rk=lower_bound(b+1,b+totn+1,a[i])-b;\n        insert(root[i],rk);\n    }\n    for (int i=1;i<=m;i++){\n        int ql=read(),qr=read(),k=read();\n        printf(\"%d\\n\",b[query(root[ql-1],root[qr],k)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1503978815,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "##\u4e3b\u5e2d\u6811\u89e3\u6cd5\n\n\u8003\u8651\u8fd9\u4e48\u4e00\u79cd\u89e3\u6cd5\uff1a\u6211\u4eec\u6bcf\u6b21\u8be2\u95ee\u4e8c\u5206\u7b54\u6848 ans \uff0c\u7136\u540e\u6c42\u51fa\u533a\u95f4\u4e2d\u6f02\u4eae\u503c\u5c0f\u4e8e\u7b49\u4e8e ans \u7684\u72d7\u72d7\u4e2a\u6570\uff0c\u8fdb\u800c\u53ef\u4ee5\u5224\u65ad\u771f\u6b63\u7684\u7b54\u6848\u4e0e ans \u7684\u5927\u5c0f\u5173\u7cfb\u3002\u90a3\u4e48\u73b0\u5728\u53ea\u9700\u8003\u8651\u5982\u4f55\u6c42\u51fa\u533a\u95f4\u4e2d\u5c0f\u7b49\u4e8e\u67d0\u4e2a\u6f02\u4eae\u503c\u7684\u4e2a\u6570\u3002\n\n\u4e00\u79cd\u65b9\u5f0f\u662f\u6bcf\u6b21\u5c06\u8be2\u95ee\u533a\u95f4\u6392\u5e8f\uff0c\u7136\u540e\u4e8c\u5206\u6c42\u89e3\u3002\u4f46\u7531\u4e8e\u6709\u591a\u6b21\u8be2\u95ee\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u6bcf\u6b21\u90fd\u6392\u5e8f\u4e00\u904d\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u80fd\u5426\u9884\u5904\u7406\u4e00\u4e9b\u4e1c\u897f\u6765\u6c42\u89e3\u3002\u9996\u5148\u6211\u4eec\u5c06\u6240\u6709\u6570**\u79bb\u6563\u5316**\u3002\n\n\u8003\u8651\u7ef4\u62a4 n \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u4e5f\u5c31\u662f\u4e3b\u5e2d\u6811\uff09\uff0c\u7b2c i \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u4f4d\u7f6e\u533a\u95f4 [1, i] \u4e2d\u5c0f\u7b49\u4e8e\u7b2c i \u53ea\u72d7\u6f02\u4eae\u503c\u7684\u72d7\u72d7\u4e2a\u6570\uff0c\u73b0\u5728\u6211\u4eec\u67e5\u8be2\u533a\u95f4 [l, r] \u5185\u6f02\u4eae\u503c\u5c0f\u7b49\u4e8e ans \u7684\u72d7\u72d7\u4e2a\u6570\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u5206\u522b\u67e5\u8be2\u7b2cr\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u7684 [1, ans] \u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u72d7\u72d7\u4e2a\u6570 cnt1 \uff0c\u4ee5\u53ca\u7b2c l - 1 \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u7684 [1, ans] \u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u72d7\u72d7\u4e2a\u6570 cnt2 \uff0c\u90a3\u4e48 cnt1 - cnt2 \u5c31\u662f\u6211\u4eec\u6240\u8981\u6c42\u7684\u7b54\u6848\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5e8f\u5217\u524d\u7f00\u548c\u7684\u7528\u6cd5\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5e76\u4e0d\u7528\u771f\u6b63\u5730\u53bb\u4e8c\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u201c\u8d70\u201d\u3002\n\n\u66f4\u5177\u4f53\u7684\u8bf4\uff0c\u5047\u8bbe\u73b0\u5728\u8981\u6c42\u533a\u95f4\u91cc\u7684\u7b2c k \u5c0f\u6f02\u4eae\u503c\uff0c\u6211\u4eec\u5206\u522b\u8bb0\u5f55\u76ee\u524d\u5728\u7b2c r \u68f5\u548c\u7b2c l - 1 \u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9 u, v \u4e0a\uff0c\u5f53\u524d\u8282\u70b9\u4ee3\u8868\u7684\u6743\u503c\u533a\u95f4\u4e3a [L, R] \u3002\u6839\u636e\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u6240\u7ef4\u62a4\u7684\u533a\u95f4\u5185\u7684\u72d7\u72d7\u4e2a\u6570 sum \uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u4f4d\u7f6e\u533a\u95f4 [l, r] \u5185\uff0c\u7b2c i \u53ea\u72d7\u7684\u6f02\u4eae\u503c\u843d\u5728\u6743\u503c\u533a\u95f4 [L, (L+R) / 2] \u5185\u7684\u4e2a\u6570 cnt = sum[lc[u]] - sum[lc[v]]\uff0c\u5047\u5982 cnt \u2265 k \uff0c\u5219\u8bf4\u660e\u7b54\u6848\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u4e24\u4e2a\u8282\u70b9 u,v \u90fd\u5411\u5de6\u5b50\u6811\u8d70\uff1b\u5426\u5219\u8bf4\u660e\u7b54\u6848\u5728\u53f3\u5b50\u6811\uff0c\u4e14\u662f\u53f3\u5b50\u6811\u4e2d\u7684\u7b2c k-cnt  \u5c0f\u6f02\u4eae\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u4e0b\u53bb\u6c42\u89e3\u3002\u8fd9\u4e2a\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u3002\n\n\u6700\u540e\u9644\u4e0a**\u4ee3\u7801\uff1a**\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 3e5 + 5, M = N * 22; \nstruct point\n{\n    int lc, rc, sum;\n    #define l(x) tr[x].lc\n    #define r(x) tr[x].rc\n    #define s(x) tr[x].sum\n}tr[M];\nint a[N], b[N], rt[N], n, QAQ, m, T;\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void Ins(const int y, int &x, const int l, const int r, const int vi)\n{\n    tr[x = ++T] = tr[y]; ++s(x);\n    if (l == r) return ;\n    int mid = l + r >> 1;\n    if (vi <= mid) Ins(l(y), l(x), l, mid, vi);\n     else Ins(r(y), r(x), mid + 1, r, vi);\n}\ninline int Que(const int x, const int y, const int l, const int r, const int k)\n{\n    if (l == r) return l;\n    int Del = s(l(y)) - s(l(x)), mid = l + r >> 1;\n    if (k <= Del) return Que(l(x), l(y), l, mid, k);\n     else return Que(r(x), r(y), mid + 1, r, k - Del);\n}\ninline void Init()\n{\n    sort(b + 1, b + n + 1);\n    m = unique(b + 1, b + n + 1) - b - 1;\n    for (int i = 1; i <= n; ++i) \n     a[i] = lower_bound(b + 1, b + m + 1, a[i]) - b;\n    l(0) = r(0) = s(0) = 0;\n    for (int i = 1; i <= n; ++i)\n     Ins(rt[i - 1], rt[i], 1, m, a[i]);\n}\nint main()\n{\n    n = m = get(); QAQ = get();\n    for (int i = 1; i <= n; ++i) a[i] = b[i] = get();\n    Init(); int u, v;\n    while (QAQ--)\n    {\n        u = get(); v = get();\n        put(b[Que(rt[u - 1], rt[v], 1, m, get())]), putchar('\\n');\n    }\n    return 0;\n}\n\n```",
        "postTime": 1496741237,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u9053\u9898\u6211\u7528\u7ebf\u6bb5\u6811\u7684\u3002\u3002\u3002\n\n\u5148\u8981\u8fdb\u884c\u79bb\u6563\u5904\u7406\uff0c\u7528\u4e00\u4e2a\u7c7b\u4f3c\u6620\u5c04\u8868\u7684\u6570\u7ec4\u5b58\u51fa\u73b0\u8fc7\u7684\u503c\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u5185\u7684\u72d7\u7684\u6f02\u4eae\u503c\u53d6\u7b2ck\u5c0f\u7684\n\n\n```delphi\ntype\n  dd=record\n     k,l,r,g:longint;\n     end;\n\nvar\n  que:array[1..50000] of dd;\n  ans:array[1..50000] of longint;\n  a,li:array[1..300000] of int64;\n  f:array[1..1200000] of longint;\n  i,j,n,m,maxai,t:longint;\n\nprocedure sort(l,r: longint);\n      var\n         i,j,x: longint;\n         y:dd;\n      begin\n         i:=l;\n         j:=r;\n         x:=que[(l+r) div 2].l;\n         repeat\n           while que[i].l<x do\n            inc(i);\n           while x<que[j].l do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=que[i];\n                que[i]:=que[j];\n                que[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\n\nprocedure sort2(l,r: longint);\n      var\n         i,j:longint;\n         x,y:int64;\n      begin\n         i:=l;\n         j:=r;\n         x:=li[(l+r) div 2];\n         repeat\n           while li[i]<x do\n            inc(i);\n           while x<li[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=li[i];\n                li[i]:=li[j];\n                li[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort2(l,j);\n         if i<r then\n           sort2(i,r);\n      end;\n\nprocedure add(t,l,r,x:longint);\nvar\n  mid:longint;\nbegin\n  inc(f[t]);\n  if l=r then exit;\n  mid:=(l+r) div 2;\n  if x<=li[mid] then add(t*2,l,mid,x)\n                else add(t*2+1,mid+1,r,x);\nend;\n\nprocedure search(t,l,r,k,num:longint);\nvar\n  mid:longint;\nbegin\n  if l=r then\n    begin\n    ans[que[num].g]:=li[l];\n    exit;\n    end;\n  mid:=(l+r) div 2;\n  if k<=f[t*2] then search(t*2,l,mid,k,num)\n               else search(t*2+1,mid+1,r,k-f[t*2],num);\nend;\n\nprocedure del(t,l,r,x:longint);\nvar\n  mid:longint;\nbegin\n  dec(f[t]);\n  if l=r then exit;\n  mid:=(l+r) div 2;\n  if x<=li[mid] then del(t*2,l,mid,x)\n                else del(t*2+1,mid+1,r,x);\nend;\n\nbegin\n  readln(n,m);\n  maxai:=0;\n  for i:=1 to n do\n    begin\n    read(a[i]);\n    li[i]:=a[i];\n    end;\n  sort2(1,n);\n  maxai:=1;\n  for i:=2 to n do\n    if li[i]<>li[i-1] then begin inc(maxai);li[maxai]:=li[i];end;{\u79bb\u6563\u5904\u7406}\n  readln;\n  for i:=1 to m do\n    begin\n    readln(que[i].l,que[i].r,que[i].k);\n    que[i].g:=i;\n    end;\n  sort(1,m);\n  fillchar(f,sizeof(f),0);\n  for i:=que[1].l to que[1].r do add(1,1,maxai,a[i]);\n  i:=1;\n  search(1,1,maxai,que[1].k,1);\n  for i:=2 to m do\n    begin\n    for j:=que[i-1].r+1 to que[i].r do add(1,1,maxai,a[j]);\n    for j:=que[i-1].l to que[i].l-1 do del(1,1,maxai,a[j]);\n    search(1,1,maxai,que[i].k,i);\n    end;\n  for i:=1 to m do\n    writeln(ans[i]);\nend.\n```\n\n[color=red]\u5c31\u8fd9\u6837\uff0c\u6211\u8fd8\u6c34\u4e86\u5f88\u4e45\u3002\u3002\u3002[/color]\n",
        "postTime": 1388149696,
        "uid": 1790,
        "name": "Belongbb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "\u79bb\u6563\uff0c\u533a\u95f4\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u533a\u95f4\u4e0e\u524d\u4e00\u4e2a\u91cd\u590d\u7684\u4fdd\u7559\u4e0d\u91cd\u590d\u7684\u5220\u53bb\uff0c\u518d\u6dfb\u52a0\u8fd9\u4e2a\u533a\u95f4\u5269\u4e0b\u4e0d\u91cd\u590d\u7684\u4e00\u90e8\u5206\u2026\u2026\u6bcf\u4e00\u6b21\u5355\u72ec\u62ce\u51fa\u6765\u505a\uff0c\u585e\u5230\u6811\u91cc\u2026\u2026\n\n```delphi\n \n   for j:=z[i] to z[i-1]-1 do\n   change(pos[j],1);\n   for j:=y[i]+1 to y[i-1] do\n change(pos[j],-1);\n  ans[num[i]]:=b[num[get(k[i])]];\n\n```\n```delphi\n\nfunction get(tun:longint):longint;  \nvar i,now:longint;  \nbegin  \nget:=0; \n now:=0;  \n  for  i:=20 downto 0 do \n begin  get:=get+1 shl i; \n if (get>n) or (now+tree[get]>=tun) then \n  get:=get-1 shl i \n    else  \n  now:=now+tree[get];\n  end;  \n get:=get+1; \n  end; \n\n```",
        "postTime": 1388118197,
        "uid": 1708,
        "name": "sxyzhml",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e9b\u533a\u95f4\uff08\u4e0d\u4f1a\u51fa\u73b0\u5305\u542b\u7684\u60c5\u51b5\uff09\uff0c\u6bcf\u6b21\u95ee\u533a\u95f4\u91cc\u9762\u7b2ck\u5c0f\u7684\u6570\u662f\u4ec0\u4e48\u3002\n\n# \u9898\u610f\u5206\u6790\n\n\u5148\u6765\u5410\u69fd\u4e00\u6ce2\uff0c\u6d1b\u8c37\u539f\u521b=\u6570\u636e\u539f\u521b\u3002\n\n\u597d\u5427\uff0c\u8fdb\u5165\u6b63\u9898\uff0c\u539f\u9898\u662f[\u8fd9\u91cc](http://poj.org/problem?id=2761)\u3002\n\n\u6ce8\u610f\uff1a\u6211\u8fd9\u7bc7\u9898\u89e3\u9002\u5408\u6709treap\u57fa\u7840\u7684\u540c\u5b66\u98df\u7528\u3002\n\n\u6211\u7684\u601d\u8def\u5c31\u662f\u5148\u628a\u533a\u95f4\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u628a\u533a\u95f4\u91cc\u9762\u7684\u6570\u4e22\u8fdbtreap\u91cc\u9762\uff0c\u7136\u540e\u4e71\u641e\uff0c\u601d\u8def\u5e94\u8be5\u8ddf\u5404\u4f4ddalao\u5dee\u4e0d\u591a\u3002\u4f46\u5728poj\u4e0a\u9762\u600e\u4e48\u90fd\u8fc7\u4e0d\u4e86\uff0c\u7ed3\u679c\u5230\u4e86luogu\u4e0a\u9762\u4e00\u6b21AC\u3002\u55ef\uff0c\u662f\u65f6\u5019\u52a0\u5f3a\u4e00\u4e0b\u6570\u636e\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u6211\u6765\u8bf4\u4e00\u4e0b\u6211\u9519\u7684\u539f\u56e0\u5427\u3002\u5c31\u662f\u5982\u679c\u6709\u76f8\u540c\u7684\u6570\u8fdb\u5230treap\u91cc\u9762\u4e4b\u540e\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u628a\u4e00\u4e2a\u6570\u653e\u5728\u4e00\u4e2a\u6570\u7684\u53f3\u5b50\u6811\uff08\u4f60\u559c\u6b22\u653e\u5728\u5de6\u5b50\u6811\u4e5fok\uff0c\u53cd\u6b63\u6211\u662f\u5de6\u5b50\u6811\u5c0f\u4e8e\uff0c\u53f3\u5b50\u6811\u5927\u4e8e\u7b49\u4e8e\uff09\u3002\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u5de6\u65cb\u3001\u53f3\u65cb\u7b49\u4e71\u641e\u64cd\u4f5c\u4e4b\u540e\uff0c\u628a\u8fd9\u4e2a\u6570\u641e\u5230\u4e86\u5de6\u5b50\u6811\u53bb\u4e86\uff0c\u5c31\u597d\u50cf\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff08\u5706\u91cc\u7684\u662f\u952e\u503c\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/28330.png)\n\n\u7136\u540e\u5f53\u6211\u4eec\u60f3\u8981\u5220\u9664\u8fd9\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5148\u627e\u5230\u7236\u8282\u70b93\uff0c\u7136\u540e\u5f80\u53f3\u5b50\u6811\u91cc\u627e\uff0c\u7136\u540e\u6211\u4eec\u5c31\u8fd9\u6837\u9519\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u611f\u89c9\u6211\u7684\u8868\u8fbe\u4f3c\u4e4e\u4e0d\u592a\u6e05\u6670233.\n\n\u6211\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\uff1a\u6211\u4eec\u5220\u9664\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u5220\u70b9\uff0c\u800c\u662f\u5220\u6743\u503c\u3002\u5927\u5bb6\u8fd8\u662f\u5bf9\u6bd4\u4e00\u4e0b\u6211\u5148\u540e\u7684\u7a0b\u5e8f\u5427\u3002\n\n\u539f\u6765\u5728poj\u4e0a\u9519\u4e86\u3001\u5728luogu\u4e0a\u8fc7\u4e86\u7684\u7a0b\u5e8f\uff1a\n```c++\n#include <cstdio>\n#include <time.h>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#define cls(a) (memset(a,0,sizeof(a)))\nusing namespace std;\n\nconst int maxn=2000005;\nconst int maxm=500005;\nint N,n,m,Root;\nint val[maxn],W[maxn],Lson[maxn],Rson[maxn],Size[maxn],a[maxn],ans[maxm];\nstruct tmp\n{\n\tint l,r,place,rank;\n\tbool operator < (const tmp &a) const\n\t{\n\t\treturn (a.l==l)?(r<a.r):(l<a.l);\n\t}\n}num[maxm];\n\nint Newnode(int);\nvoid insert(int &root,int x);\nvoid Lrotate(int &x);\nvoid Rrotate(int &x);\nvoid maintain(int);\nint findkth(int,int);\nvoid remove(int &root,int x);\n\nint main()\n{\n\tsrand(19260817);\t\n\tscanf(\"%d%d\",&n,&m);\n\tW[0]=-1;\n\tfor(int i=1; i<=n; i++)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&num[i].l,&num[i].r,&num[i].place);\n\t\tnum[i].rank=i;\n\t}\n\tsort(num+1,num+m+1);\n\tint head=1,tail=0;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\twhile(tail<num[i].r)\t\n\t\t\tinsert(Root,Newnode(a[++tail]));\n\t\twhile(head<num[i].l)\t\n\t\t\tremove(Root,head++);//\u6ce8\u610f\u8fd9\u91cc\uff0c\u6211\u7684\u70b9\u7684\u7f16\u53f7\u662f\u4ece1\u5230N\uff0c\u6240\u4ee5\u8fd9\u91cc\u5220\u7684\u662f\u70b9\u7684\u7f16\u53f7\u3002\n\t\tans[num[i].rank]=val[findkth(Root,num[i].place)];\n\t}\n\tfor(int i=1; i<=m; i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\nvoid remove(int &root,int x)//\u8fd9\u91cc\u6211\u4eec\u5220\u7684\u662f\u4e00\u4e2a\u70b9\n{\n\tif(root==0)\n\t\treturn;\n\tif(root==x)//\u5982\u679c\u5f53\u524d\u70b9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\n\t{\n\t\tif(!Lson[x]&&!Rson[x])\n\t\t{\n\t\t\troot=0;\n\t\t\treturn;\n\t\t}\n\t\tif(W[Lson[x]]>W[Rson[x]])\n\t\t{\n\t\t\tRrotate(root);\n\t\t\tremove(Rson[root],x);\n\t\t}else\n\t\t{\n\t\t\tLrotate(root);\n\t\t\tremove(Lson[root],x);\n\t\t}\n\t}else\tif(val[x]<val[root])\n\t\tremove(Lson[root],x);\n\telse \tremove(Rson[root],x);\n\tmaintain(root);\n}\n\nint findkth(int root,int k)\n{\n\tif(!root)\n\t\treturn 0;\n\tint cnt=Size[Lson[root]];\n\tif(k<=cnt)\n\t\treturn findkth(Lson[root],k);\n\tif(k==cnt+1)\n\t\treturn root;\n\treturn findkth(Rson[root],k-cnt-1);\n} \n\nvoid insert(int &root,int x)\n{\n\tif(!root)\n\t{\n\t\troot=x;\n\t\treturn;\n\t}\n\tif(val[x]<val[root])\n\t\tinsert(Lson[root],x);\n\telse\tinsert(Rson[root],x);\n\tif(W[Lson[root]]>W[root])\n\t\tRrotate(root);\n\tif(W[Rson[root]]>W[root])\n\t\tLrotate(root);\n\tmaintain(root);\n}\n\nvoid maintain(int root)\n{\n\tif(!root)\n\t\treturn;\n\tSize[root]=Size[Lson[root]]+Size[Rson[root]]+1;\n}\n\nvoid Lrotate(int &x)\n{\n\tint y=Rson[x];\n\tRson[x]=Lson[y];\n\tLson[y]=x;\n\tmaintain(x);\n\tx=y;\n}\n\nvoid Rrotate(int &x)\n{\n\tint y=Lson[x];\n\tLson[x]=Rson[y];\n\tRson[y]=x;\n\tmaintain(x);\n\tx=y;\n}\n\nint Newnode(int v)\n{\n\tint x=++N;\n\tval[x]=v;Lson[x]=Rson[x]=0;\n\tSize[x]=1;W[x]=rand();\n\treturn x;\n}\n```\n\n\u53ccOJ AC\u7684\u7a0b\u5e8f\uff1a\n```c++\n#include <cstdio>\n#include <time.h>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#define cls(a) (memset(a,0,sizeof(a)))\nusing namespace std;\n\nconst int maxn=2000005;\nconst int maxm=500005;\nint N,n,m,Root;\nint val[maxn],W[maxn],Lson[maxn],Rson[maxn],Size[maxn],a[maxn],ans[maxm];\nstruct tmp\n{\n\tint l,r,place,rank;\n\tbool operator < (const tmp &a) const\n\t{\n\t\treturn (a.l==l)?(r<a.r):(l<a.l);\n\t}\n}num[maxm];\n\nint Newnode(int);\nvoid insert(int &root,int x);\nvoid Lrotate(int &x);\nvoid Rrotate(int &x);\nvoid maintain(int);\nint findkth(int,int);\nvoid remove(int &root,int x);\n\nint main()\n{\n\tsrand(19260817);\t\n\tscanf(\"%d%d\",&n,&m);\n\tW[0]=-1;\n\tfor(int i=1; i<=n; i++)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&num[i].l,&num[i].r,&num[i].place);\n\t\tnum[i].rank=i;\n\t}\n\tsort(num+1,num+m+1);\n\tint head=1,tail=0;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\twhile(tail<num[i].r)\t\n\t\t\tinsert(Root,Newnode(a[++tail]));\n\t\twhile(head<num[i].l)\t\n\t\t\tremove(Root,a[head++]);//\u8fd9\u91cc\u6211\u4eec\u5220\u7684\u662f\u6743\u503c\n\t\tans[num[i].rank]=val[findkth(Root,num[i].place)];\n\t}\n\tfor(int i=1; i<=m; i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\nvoid remove(int &root,int v)\n{\n\tif(val[root]==v)//\u5982\u679c\u5f53\u524d\u70b9\u7684\u6743\u503c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\n\t{\n\t\tif(!Lson[root]&&!Rson[root])\n\t\t{\n\t\t\troot=0;\n\t\t\treturn;\n\t\t}\n\t\tif(W[Lson[root]]>W[Rson[root]])\n\t\t{\n\t\t\tRrotate(root);\n\t\t\tremove(Rson[root],v);\n\t\t}else\n\t\t{\n\t\t\tLrotate(root);\n\t\t\tremove(Lson[root],v);\n\t\t}\n\t}else\tif(v<val[root])\n\t\tremove(Lson[root],v);\n\telse \tremove(Rson[root],v);\n\tmaintain(root);\n}\n\nint findkth(int root,int k)\n{\n\tif(!root)\n\t\treturn 0;\n\tint cnt=Size[Lson[root]];\n\tif(k<=cnt)\n\t\treturn findkth(Lson[root],k);\n\tif(k==cnt+1)\n\t\treturn root;\n\treturn findkth(Rson[root],k-cnt-1);\n} \n\nvoid insert(int &root,int x)\n{\n\tif(!root)\n\t{\n\t\troot=x;\n\t\treturn;\n\t}\n\tif(val[x]<val[root])\n\t\tinsert(Lson[root],x);\n\telse\tinsert(Rson[root],x);\n\tif(W[Lson[root]]>W[root])\n\t\tRrotate(root);\n\tif(W[Rson[root]]>W[root])\n\t\tLrotate(root);\n\tmaintain(root);\n}\n\nvoid maintain(int root)\n{\n\tif(!root)\n\t\treturn;\n\tSize[root]=Size[Lson[root]]+Size[Rson[root]]+1;\n}\n\nvoid Lrotate(int &x)\n{\n\tint y=Rson[x];\n\tRson[x]=Lson[y];\n\tLson[y]=x;\n\tmaintain(x);\n\tx=y;\n}\n\nvoid Rrotate(int &x)\n{\n\tint y=Lson[x];\n\tLson[x]=Rson[y];\n\tRson[y]=x;\n\tmaintain(x);\n\tx=y;\n}\n\nint Newnode(int v)\n{\n\tint x=++N;\n\tval[x]=v;Lson[x]=Rson[x]=0;\n\tSize[x]=1;W[x]=rand();\n\treturn x;\n}\n```",
        "postTime": 1534148790,
        "uid": 53167,
        "name": "kuansoudafahao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1533 \u3010\u53ef\u601c\u7684\u72d7\u72d7\u3011"
    }
]