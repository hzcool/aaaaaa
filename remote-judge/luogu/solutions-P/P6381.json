[
    {
        "content": "update\uff1a\u6709\u5927\u4f6c\u6307\u51fa\u6211\u7684\u505a\u6cd5\u4e0d\u9700\u8981\u7279\u5224\uff0c\u53ea\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86\u3002\n\n\u56e0\u4e3a\u5728\u5206\u5c42\u56fe\u62d3\u6251\u7684\u65f6\u5019\u5982\u679c $x=f_x$ \u5219\u76f8\u5f53\u4e8e\u5efa\u56fe\u4e24\u904d\uff0c\u6545\u8981\u5f00\u53cc\u500d\u6570\u7ec4\u3002\n\n\uff08\u4e8e\u662f\u6211\u5c31\u7701\u53bb\u4e86\u4e00\u4e2a\u7279\u5224\uff09\n\n----\n\n\u4ee5\u4e00\u4e2a\u9a8c\u9898\u4eba\u7684\u8eab\u4efd\u6765\u53d1\u4e00\u4e2a\u9898\u89e3\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u7531\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u53ef\u4ee5\u62c6\u6210 $p_1^{a_1}\\times p_2^{a_2}\\ldots p_s^{a_S}$ \u7684\u5f62\u5f0f\uff0c\n\n\u5176\u4e2d $p_i$ \u4e3a\u7d20\u6570\u4e14\u5bf9\u4e8e $i\\neq j,p_i\\neq p_j$\u3002\n\n\u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u6307\u6570\u5bf9 $k$ \u53d6\u6a21\uff0c\u4f7f\u5f97\u6240\u6709\u6307\u6570\u5c0f\u4e8e $k$\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8ba8\u8bba\u6bcf\u4e00\u4e2a $a_i$ \u90fd\u5c0f\u4e8e $k$ \u7684\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u6570\u4e2d\uff0c\u80fd\u4e0e\u4e4b\u6784\u6210\u5b8c\u7f8e\u6570\u5bf9\u7684\u6570\u552f\u4e00\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c$k=3$ \u65f6\uff0c$16=2^4$\uff0c\u53d6\u6a21\u540e\u4e3a $2^1$\uff0c\u4e5f\u5c31\u662f $2$\u3002\n\n\u800c\u80fd\u4e0e $2$ \u6784\u6210\u5b8c\u7f8e\u6570\u5bf9\u4e14\u6240\u6709\u6307\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e $2$ \u7684\u6570\u53ea\u6709 $4$\u3002\n\n\u7136\u540e\u6211\u4eec\u8bb0\u8fd9\u4e2a\u6570\u4e3a $f_i$\uff0c\u4f8b\u5982 $k=3$ \u65f6 $f_2=4$\u3002\n\n\u6211\u4eec\u5206\u522b\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u6743\u503c\u7684\u8fb9\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a $i$ \u548c $f_i$ \u8dd1\u4e00\u6b21\u5206\u5c42\u56fe\u62d3\u6251\u6392\u5e8f\u3002\n\n\u7136\u540e\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\uff08\u5176\u5b9e\u8fd9\u4e2a\u9898\u505a\u6cd5\u6709\u5f88\u591a\uff0c\u4f46\u662f\u5bf9\u4e8e\u524d\u9762\u5bf9\u6bcf\u4e2a\u6743\u503c\u7684\u5904\u7406\u8fd9\u4e00\u90e8\u5206\u57fa\u672c\u662f\u4e00\u6837\u7684\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-48;\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nchar cr[200];int tt;\ninline void print(register int x,register char k='\\n') {\n    if(!x) putchar('0');\n    if(x < 0) putchar('-'),x=-x;\n    while(x) cr[++tt]=x%10+'0',x/=10;\n    while(tt) putchar(cr[tt--]);\n    putchar(k);\n}\nconst int maxn=233333;\nconst int lim=100000;\nstruct edge{\n\tint from,to,nxt,lg;\n}e[maxn<<1];\nvector<edge>g[maxn];\nint n,m,k,f[maxn];\nint h[maxn],pri[maxn];\nbool vis[lim+5];\nvoid xxs(){\n    for(int i=2;i<=maxn;++i){\n        if(!vis[i]) pri[++pri[0]]=i;\n        for(int j=1;j<=pri[0]&&pri[j]*i<=lim;j++){\n            vis[pri[j]*i]=1;\n            if(i%pri[j]==0){\n                break;\n            }\n        }\n    }\n}\nvoid work(int u,int v,int w,int l){\n\tint res1=1,res2=1;\n\tfor(int i=1;pri[i]*pri[i]<=w;i++) {\n\t\tint tmp=0;\n\t\twhile(w%pri[i]==0){\n\t\t\ttmp++;\n\t\t\tw/=pri[i];\n\t\t}\n\t\tif(tmp%k){\n\t\t\tfor(int j=1;j<=tmp%k;j++){\n\t\t\t\tres1*=pri[i];\n\t\t\t}\n\t\t\tfor(int j=1;j<=k-tmp%k;j++){\n\t\t\t\tif(res2*pri[i]>lim){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tres2*=pri[i];\n\t\t\t}\n\t\t}\n\t}\n\tif(k!=1)res1*=w;\n\tfor(int j=2;j<=k;j++){\n\t\tif(res2*w>lim){\n\t\t\treturn;\n\t\t}\n\t\tres2*=w;\n\t}\n\tf[res1]=res2;f[res2]=res1;\n\tg[res1].push_back((edge){u,v,0,l});\n}\nqueue<int> q;\nint dp[maxn];\nint cnt=1;\nvoid add(int x,int y,int z) {\n\te[++cnt].nxt=h[x];\n\te[cnt].to=y;\n\te[cnt].lg=z;\n\th[x]=cnt;\n\treturn;\n}\nint in[maxn],ans;\nvoid topo(int w){\n\twhile(!q.empty())q.pop();\n\tfor(edge v:g[w]){\n\t\tin[v.to+n]++;\n\t\tadd(v.from,v.to+n,v.lg);\n\t}\n\tfor(edge v:g[f[w]]){\n\t\tin[v.to]++;\n\t\tadd(v.from+n,v.to,v.lg);\n\t}\n\tfor(edge v:g[w]){\n\t\tif(!in[v.from]) q.push(v.from),in[v.from]=999999999;\n\t}\n\tfor(edge v:g[f[w]]){\n\t\tif(!in[v.from+n]) q.push(v.from+n),in[v.from+n]=999999999;\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=h[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to,l=e[i].lg;\n\t\t\tdp[v]=max(dp[v],dp[u]+l);\n\t\t\tans=max(ans,dp[v]);\n\t\t\tin[v]--;if(!in[v]) q.push(v);\n\t\t}\n\t}\n\tfor(edge v:g[f[w]]){\n\t\tdp[v.from]=dp[v.from+n]=dp[v.to]=dp[v.to+n]=0;\n\t\th[v.from]=h[v.from+n]=h[v.to]=h[v.to+n]=0;\n\t\tin[v.from]=in[v.from+n]=in[v.to]=in[v.to+n]=0;\n\t}\n\tfor(edge v:g[w]){\n\t\tdp[v.from]=dp[v.from+n]=dp[v.to]=dp[v.to+n]=0;\n\t\th[v.from]=h[v.from+n]=h[v.to]=h[v.to+n]=0;\n\t\tin[v.from]=in[v.from+n]=in[v.to]=in[v.to+n]=0;\n\t}\n\tcnt=1;\n}\nsigned main(){\n\tn=read();m=read();k=read();\n\tmemset(f,-1,sizeof(f));xxs();f[0]=0;\n\tfor(int i=1;i<=m;++i){\n\t\tint u=read(),v=read(),w=read(),l=read();\n\t\tans=max(ans,l);\n\t\twork(u,v,w,l);\n\t}\n\tfor(int i=1;i<=lim;i++){\n\t\tif(f[i]>=0 && f[i]>=i){\n\t\t\ttopo(i);\n\t\t}\n\t}\n\tprint(ans);\n    return 0;\n}\n```\n",
        "postTime": 1586951297,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6381 \u3010\u300eMdOI R2\u300fOdyssey\u3011"
    },
    {
        "content": "## \u3010dp\u3011\u3010P6381\u3011\u300eMdOI R2\u300fOdyssey\n\n### Analysis\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u4e0d\u9700\u8981\u5206\u6790\u6027\u8d28\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u5bf9 $w$ \u5206\u89e3\u8d28\u56e0\u6570\u5e76\u628a\u6307\u6570\u5bf9 $k$ \u53d6\u6a21\uff0c\u628a\u7ed3\u679c hash \u4e00\u4e0b\uff0c\u5e76\u8bb0\u5f55\u4e0e\u5176\u914d\u5bf9\u7684\u6570\u5b57\u7684 hash \u503c\u3002\u7136\u540e\u5957\u8def\u7684\u8fdb\u884c DAG \u4e0a dp\uff0c\u7528 map \u5b58\u4e00\u4e0b\u72b6\u6001\u5373\u53ef\u3002\n\n\u8bbe $f_{u, i}$ \u662f\u4ee5 $u$ \u4e3a\u8d77\u70b9\uff0c\u7b2c\u4e00\u6761\u8fb9\u7684 hash \u503c\u4e3a $i$ \u7684\u6700\u957f\u8def\uff0c\u8f6c\u79fb\u4e3a\n\n$$f_{u, i} = \\max\\{f_{v, pi} + l\\}$$\n\n\u5176\u4e2d $pi$ \u662f\u4e0e $i$ \u914d\u5bf9\u7684 hash \u503c\uff0c$v$ \u662f\u4ece $u$ \u51fa\u53d1\u7684 hash \u4e3a $i$ \u7684\u8fb9\u6307\u5411\u7684\u6240\u6709\u8282\u70b9\uff0c$l$ \u662f\u5bf9\u5e94\u8fb9\u7684\u957f\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log w + m \\log m + w)$\u3002\n\n### Code\n\n\u5199\u8d77\u6765\u6709\u70b9\u7801\u519c\uff0c\u4e3a\u4e86\u9632\u6b62\u88ab\u5361\u7528\u4e86\u53cc\u6a21\u6570 hash\u3002\n\n```cpp\nnamespace Fusu {\n\nconst int maxn = 200005;\nconst int INF = 2000000005;\n\nvoid Init();\nvoid Calc();\nvoid GetPrime();\nvoid Topo_sort();\nvoid Make_hash();\n\nvoid Main() {\n  Init();\n  GetPrime();\n  Topo_sort();\n  Make_hash();\n  Calc();\n}\n\nint n, m, t;\nint ind[maxn];\nstruct Edge {\n  int v, w, l, nxt;\n};\nEdge edge[maxn];\nint hd[maxn];\nint ecnt;\ninline void cont(const int u, const int v, const int w, const int l) {\n  auto &e = edge[++ecnt];\n  e.v = v; e.w = w; e.l = l; e.nxt = hd[u];\n  hd[u] = ecnt;\n}\n\nvoid Init() {\n  qr(n); qr(m); qr(t);\n  for (int i = 1, u, v, w, l; i <= m; ++i) {\n    qr(u); qr(v); qr(w); qr(l);\n    cont(u, v, w, l);\n    ++ind[v];\n  }\n}\n\nstd::queue<int> Q;\nint top;\nint topo[maxn];\nvoid Topo_sort() {\n  for (int i = 1; i <= n; ++i) if (ind[i] == 0) {\n    Q.push(i);\n  }\n  for (int u, v; !Q.empty(); Q.pop()) {\n    topo[++top] = u = Q.front();\n    for (int e = hd[u]; e; e = edge[e].nxt) if (--ind[v = edge[e].v] == 0) {\n      Q.push(v);\n    }\n  }\n}\n\nint pcnt;\nint prm[maxn], pre[maxn];\nbool np[maxn];\nvoid GetPrime() {\n  const int x = 100000;\n  for (int i = 2; i <= x; ++i) {\n    if (np[i] == false) {\n      prm[++pcnt] = i;\n      pre[i] = pcnt;\n    }\n    for (int j = 1, k = prm[j] * i; j <= pcnt; k = prm[++j] * i) if (k <= x) {\n      np[k] = true;\n      pre[k] = j;\n      if ((i % prm[j]) == 0) break;\n    } else {\n      break;\n    }\n  }\n}\n\nconst int maxh = 2;\nconst int pmod[] = {998244353, 1000000009};\n\nint dcnt;\nstd::vector<int> d, cd;\nint make_hash(const int x) {\n  ll ret = 0;\n  for (int i = 0; i < dcnt; ++i) if (cd[i] != 0) {\n    (ret += (d[i] ^ 20020924ll) * (cd[i] ^ 20020301ll)) %= pmod[x];\n  }\n  return ret;\n}\n\nint hash[maxh][maxn], ph[maxh][maxn];\nvoid Make_hash() {\n  for (int i = 1; i <= m; ++i) {\n    d.clear(); cd.clear(); dcnt = 0;\n    for (int x = edge[i].w, pp = 0; x != 1; x /= prm[pre[x]]) if (pp == pre[x]) {\n      if (++cd[dcnt - 1] == t) cd[dcnt - 1] = 0;\n    } else {\n      d.push_back(pre[x]);\n      cd.push_back(t != 1);\n      ++dcnt;\n      pp = pre[x];\n    }\n    for (int j = 0; j < maxh; ++j) {\n      hash[j][i] = make_hash(j);\n    }\n    for (int j = 0; j < dcnt; ++j) if (cd[j]) {\n      cd[j] = t - cd[j];\n    }\n    for (int j = 0; j < maxh; ++j) {\n      ph[j][i] = make_hash(j);\n    }\n  }\n}\n\nstd::map<std::pair<int, int>, int> f[maxn];\nvoid Calc() {\n  std::pair<int, int> k;\n  int ans = 0;\n  for (int i = n, u = topo[i], v; i; u = topo[--i]) {\n    for (int e = hd[u]; e; e = edge[e].nxt) {\n      v = edge[e].v;\n      k = std::make_pair(hash[0][e], hash[1][e]);\n      f[u][k] = std::max(f[u][k], edge[e].l);\n      auto j = std::make_pair(ph[0][e], ph[1][e]);\n      f[u][k] = std::max(f[u][k], edge[e].l + f[v][j]);\n      ans = std::max(ans, f[u][k]);\n    }\n  }\n  qw(ans, '\\n');\n}\n\n} // namespace Fusu\n```\n\n",
        "postTime": 1586952522,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6381 \u3010\u300eMdOI R2\u300fOdyssey\u3011"
    },
    {
        "content": "\u597d\u4e0d\u5bb9\u6613\u8fc7\u4e86\u8fd9\u4e2a\u5927\u4f6c\u6240\u8c13\u7684\u667a\u969c\u9898\uff0c\u6765\u5199\u4e00\u7bc7\u9898\u89e3\n\n\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u5728\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\u8fc7\u540e\u6307\u6570\u5bf9 $k$ \u53d6\u6a21\u8fc7\u540e\u5f97\u5230\u7684\u6570\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u53ef\u4ee5\u7ee7\u7eed\u8d70\u7684\u6570\uff0c\u4e5f\u5c31\u662f\u4ed6\u4eec\u7684\u5bf9\u5e94\u8d28\u6570\u7684\u6307\u6570\u548c\u4e3a $k$\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u627e\u5230\u4ed6\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u6570\n\n\u8fd9\u91cc\u5c31\u6709\u4eba\u8bf4\u4e86\uff0c\u4e00\u4e2a\u5927\u8d28\u6570\u7684\u8bdd\uff0c\u4ed6\u7684 $k$ \u6b21\u65b9\u5c31\u5f88\u5927\u4e86\uff0c\u5c31\u5f88\u96be\u5b58\u4e0b\u6765\u4e86\uff0c\u4f46\u662f\u8fd9\u91cc\u53ef\u4ee5\u8003\u8651\uff0c**\u4e00\u4e2a\u6570\u5927\u4e8e\u503c\u57df\u5c31\u4e0d\u80fd\u4f5c\u4e3a\u8d77\u70b9\u7684\u72b6\u6001\u51fa\u73b0\u4e86,\u6362\u800c\u8a00\u4e4b\uff0c\u5c31\u53ea\u80fd\u4f5c\u4e3a\u7ec8\u70b9\u4e86**\uff0c\u6211\u4eec\u76f4\u63a5\u8d4b\u503c `-1` \u5c31\u884c\u4e86\n\n\u7531\u4e8e\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651 DP\n\n\u5f53\u524d\u70b9\u7684\u67d0\u4e2a\u72b6\u6001\u624d\u80fd\u901a\u8fc7\u8fb9\uff0c\u5230\u8fbe\u7ec8\u70b9\u7684\u53e6\u4e00\u4e2a\u72b6\u6001\uff0c\u8fd9\u91cc\u7684\u72b6\u6001\u4e5f\u5c31\u662f\u4e0a\u4e00\u6b21\u7ecf\u8fc7\u7684\u8fb9\u7684 $val$\n\n\u6211\u4eec\u8fd9\u91cc\u72b6\u6001\u6bd4\u8f83\u5927\uff0c\u53ef\u4ee5\u8003\u8651hash\uff0c\u4f46\u662f\u6211\u76f4\u63a5\u7528 unordered_map \u89e3\u51b3\u95ee\u9898\n\n\u6700\u540e\u8003\u8651\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5: $k=1$\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <unordered_map>\n#include <cmath>\n#include <queue>\n\nusing namespace std;\n\nstruct edge\n{\n  int to,next;\n  int win,vin,val;\n}e[200010];\n\nint n,m,k;\n\nint head[100010],num;\n\nint ru[100010];\n\nint ans;\n\nqueue<int>q;\n\nunordered_map<int,int>map[100010];\n\nint inv(int w)\n{\n  int ans=1;\n  for(int i=2;i*i<=w;i++)\n  {\n    int cnt=0;\n    while(w%i==0) w/=i,cnt++;\n    cnt%=k;\n    if(cnt)\n    {\n      cnt=k-cnt;\n      while(cnt--)\n      {\n        ans*=i;\n        if(ans>100000) return -1;\n      }\n    }\n  }\n  if(w>1)\n  {\n    int cnt=k-1;\n    while(cnt--)\n    {\n      ans*=w;\n      if(ans>100000) return -1;\n    }\n  }\n  return ans;\n}\n\nint yu(int w)\n{\n  int ans=1;\n  for(int i=2;i*i<=w;i++)\n  {\n    int cnt=0;\n    while(w%i==0) w/=i,cnt++;\n    cnt%=k;\n    while(cnt--) ans*=i;\n  }\n  if(w>1&&k!=1) return ans*w;\n  else return ans;\n}\n\nvoid addedge(int a,int b,int w,int v)\n{\n  e[++num].to=b;\n  e[num].next=head[a];\n  e[num].win=yu(w);\n  e[num].vin=inv(w);\n  e[num].val=v;\n  head[a]=num;\n}\n\nvoid topsort()\n{\n  while(!q.empty())\n  {\n    int now=q.front();\n    q.pop();\n    for(int i=head[now];i;i=e[i].next)\n    {\n      map[e[i].to][e[i].vin]=max(map[e[i].to][e[i].vin],map[now][e[i].win]+e[i].val);\n      ans=max(ans,map[e[i].to][e[i].vin]);\n      ru[e[i].to]--;\n      if(!ru[e[i].to]) q.push(e[i].to);\n    }\n  }\n  printf(\"%d\",ans);\n}\n\nint main()\n{\n  scanf(\"%d%d%d\",&n,&m,&k);\n  for(int i=1;i<=m;i++)\n  {\n    int a,b,w,v;\n    scanf(\"%d%d%d%d\",&a,&b,&w,&v);\n    addedge(a,b,w,v);\n    ru[b]++;\n  }\n  for(int i=1;i<=n;i++) if(ru[i]==0) q.push(i);\n  topsort();\n}\n```",
        "postTime": 1599010535,
        "uid": 62573,
        "name": "zzqDeco",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6381 \u3010\u300eMdOI R2\u300fOdyssey\u3011"
    },
    {
        "content": "### \u4e00\u4e9b BF \u7684\u4ee3\u7801\u89e3\u91ca\uff1a\r\n\r\n1. \u6bcf\u6b21 topo \u53ea\u662f\u5bf9\u6743\u503c\u4e3a $w$ \u548c $f_w$ \u7684\u8fb9\u8fdb\u884c\uff08\u6743\u503c\u9ed8\u8ba4\u5df2\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\u8f6c\u5316\uff09\uff0c\u800c\u4e14\u56fe\u8981\u6839\u636e\u8fd9\u4e9b\u8fb9\u91cd\u65b0\u5efa\uff0c\u56e0\u4e3a\u4ee5\u524d topo \u7684\u56fe\u7559\u4e0b\u7684\u8fb9\u4e0d\u80fd\u5b58\u5728\uff0c\u56e0\u6b64\u8fd8\u8981\u628a\u90bb\u63a5\u8868 head \u548c\u8fb9\u7684\u7f16\u53f7 cnt \u6e05\u96f6\u3002\r\n\r\n1. \u5efa\u56fe\u65f6 $+n$ \u662f\u4e3a\u4e86\u9632\u6b62\u8fde\u7eed\u7ecf\u8fc7 $w$ \u6216 $f_w$ \u7684\u8fb9\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e24\u79cd\u8fb9\uff0c\u4e00\u79cd\u662f\u8d77\u70b9 $+n$\uff0c\u4e00\u79cd\u662f\u7ec8\u70b9 $+n$\uff0c\u8fd9\u6837\u8dd1 DAGdp \u65f6\u5c31\u4f1a\u4ea4\u9519\u7ecf\u8fc7\u4e24\u79cd\u8fb9\u3002\r\n\r\n1. DAGdp \u7684\u521d\u59cb\u5316\uff0c\u628a\u96f6\u5165\u5ea6\u70b9\u52a0\u5165\u961f\u5217\u65f6\u5165\u5ea6\u8d4b\u503c\u4e3a\u6b63\u65e0\u7a77\uff0c\u662f\u9632\u6b62\u5b83\u4f5c\u4e3a\u5176\u4ed6\u8fb9\u7684\u8d77\u70b9\u65f6\u91cd\u590d\u628a\u5b83\u52a0\u5165\u961f\u5217\u3002\r\n\r\n1. topo \u6700\u540e\u8981\u6e05\u96f6\uff0c\u8fd9\u91ccBF\u5199\u7684\u6709\u4e9b\u591a\u4f59\u4e86\uff0c\u53ea\u7528\u8fd9\u6837\uff1a\r\n\r\n```cpp\r\ndp[e.v]=0;\r\nin[e.v]=in[e.u+n]=0;\r\nhead[e.u+n]=0;\r\n```\r\n\r\n\u53e6\u4e00\u534a\u540c\u7406\uff0c\u53ea\u662f\u8bb0\u5f97 $+n$ \u7684\u70b9\u53d8\u6210\u7ec8\u70b9 v\u3002\r\n\r\n\u6ce8\u610f\u6bcf\u6761\u8fb9\u7684\u8d77\u70b9\u5165\u5ea6\u4e5f\u8981\u6e05\u96f6\u56e0\u4e3a\u6709\u4e9b\u88ab\u8d4b\u503c\u6210\u6b63\u65e0\u7a77\u4e86\u3002\u3002\u3002\r\n\r\n\u8d28\u56e0\u6570\u5206\u89e3\u5c31\u4e0d\u8bf4\u4e86\uff0c\u5c31\u662f\u6ce8\u610f\u7b97 $f_i$ \u65f6 $>lim$ \uff08\u8fb9\u6743 w \u4e0a\u9650\uff09\u5c31\u8981 return\uff0c\u5426\u5219\u9001\u4f60\u7206 long long\u3002\r\n\r\n\u5bf9\u4e8e\u7528\u4e86\u5feb\u901f\u5e42\u7684\u73a9\u5bb6\uff0c\u8bf7\u6ce8\u610f\u5feb\u901f\u5e42\u91cc\u9762\u7279\u5224\u6709\u4e00\u5806\u7ec6\u8282\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0~~\u56e0\u4e3a\u6ca1\u51e0\u4e2a\u4eba\u50cf\u6211\u8fd9\u6837\u50bb\u7684\u7528\u5feb\u901f\u5e42~~\r\n\r\n\u5c0f\u8d34\u58eb\uff1a\u4e0d\u7528 xxs \u76f4\u63a5\u679a\u4e3e\u6765\u5206\u89e3\u8d28\u56e0\u6570\u4e5f\u80fd\u8fc7\uff0c\u867d\u7136\u8ba1\u7b97\u91cf\u6309\u7406\u4f1a\u8fbe\u5230 $1.8 \\times 10^8$ \u5de6\u53f3\u3002\r\n\r\n~~\u81ea\u5df1\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u4e11\u6b7b\u4e86~~\r\n",
        "postTime": 1587098463,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6381 \u3010\u300eMdOI R2\u300fOdyssey\u3011"
    },
    {
        "content": "\u4e00\u6761\u8fb9\u80fd\u4e0d\u80fd\u8d70\u4ec5\u53d6\u51b3\u4e8e\u8d70\u7684\u4e0a\u4e00\u6761\u8fb9\uff08\u53ef\u80fd\u6ca1\u6709\uff09\u3002\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55 $dp_{i,s}$ \u8868\u793a\u7b2c $i$ \u4e2a\u70b9\uff0c\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u8fb9\u6743\u503c\u8d28\u56e0\u6570\u5206\u89e3\u540e\u72b6\u6001\u4e3a $s$ \u7684\u6700\u957f\u8def\u5f84\u3002\uff08$s_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8d28\u6570\u51fa\u73b0\u6b21\u6570 $\\bmod k$ \u7684\u503c\uff09\u8fd9\u4e2a\u72b6\u6001\u4e0d\u597d\u5b58\uff0c\u53ef\u4ee5\u7528 map+vector \u5b9e\u73b0\u3002\n\n\u7136\u800c\u6211\u4eec\u53d1\u73b0\u5728 $10^5$ \u8303\u56f4\u5185\u7684\u8d28\u6570\u5f88\u591a\uff0c\u5982\u679c\u90fd\u5b58\u5230 $s$ \u4e2d\u4f1a\u70b8\u7a7a\u95f4\u3002\u800c\u5927\u4e8e $\\sqrt {10^5}$ \u7684\u8d28\u6570\u51fa\u73b0\u6b21\u6570\u4ec5\u53ef\u80fd\u662f $0/1$\uff0c\u4e14\u4ec5\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a `pair<vector<int>, pair<int, int> >` \u6765\u5b58\u72b6\u6001\u3002vector \u4e2d\u5b58 $\\le \\sqrt{10^5}$ \u7684\u8d28\u6570\u51fa\u73b0\u72b6\u6001\uff0c\u6700\u540e\u4e00\u4e2a pair \u8bb0\u5f55\u662f\u5426\u51fa\u73b0 $> \\sqrt{10^5}$ \u7684\u8d28\u6570\u4ee5\u53ca\u51fa\u73b0\u6b21\u6570\u3002\uff08\u6211\u5c06 $k=1$ \u7684\u60c5\u51b5\u4e5f\u8bb0\u4e3a\u4e86\u6ca1\u6709\u51fa\u73b0\uff09\u3002\u800c $\\le \\sqrt{10^5}$ \u7684\u8d28\u6570\u53ea\u6709 $65$ \u4e2a\uff0c\u6240\u4ee5\u8fd9\u6837\u5c31\u80fd\u5b58\u4e0b\u4e86\u3002\n\n\u539f\u56fe\u662f\u4e2a DAG\uff0c\u6240\u4ee5\u62d3\u6251\u7684\u8fc7\u7a0b\u4e2d\u8f6c\u79fb\u5373\u53ef\uff0c\u6ce8\u610f\u6bcf\u6761\u8fb9\u90fd\u53ef\u80fd\u662f\u8d77\u59cb\u8fb9\uff0c\u5fd8\u8bb0\u4e86\u5c31\u5361\u4e86 1h\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n + 65m + m \\log w + m \\log 65m)$\u3002\u4e0d\u5f00 O2 \u8fc7\u4e0d\u4e86\u3002\n\nmap \u7684\u590d\u6742\u5ea6\u4e0d\u592a\u4f1a\u5206\u6790\uff0c\u6709\u9519\u8bef\u8fd8\u8bf7\u6307\u51fa\u3002\n\n$\\text{Code}$\uff1a\n\n```cpp\ndef(N, int, 1e5 + 5)\ndef(M, int, 105)\n\nstruct Edge {\n\tint v, w, l;\n};\n\nint n, m, k, mx;\nbool np[M << 2];\nint pr[M], cnt;\nint deg[N];\nvector<Edge> e[N];\nmap<pair<vector<int>, pii>, int> dp[N];\n\nvoid init() {\n\tint lim = sqrt(mx);\n\trep(i, 2, lim) {\n\t\tif(!np[i]) pr[++cnt] = i;\n\t\tfor(int j = 1; j <= cnt && i * pr[j] <= lim; ++j) {\n\t\t\tnp[i * pr[j]] = 1;\n\t\t\tif(i % pr[j] == 0) break;\n\t\t}\n\t}\n}\n\npair<vector<int>, pii> solve(int x) {\n\tvector<int> v;\n\trep(i, 1, cnt) {\n\t\tint cn = 0;\n\t\twhile(x % pr[i] == 0) {\n\t\t\tx /= pr[i];\n\t\t\t++cn;\n\t\t}\n\t\tv.pb(cn % k);\n\t}\n\tif(x == 1 || k == 1) return mp(v, mp(-1, -1));\n\telse return mp(v, mp(x, 1));\n}\n\nvoid topo() {\n\tint ans = 0;\n\tqueue<int> q;\n\trep(i, 1, n) if(!deg[i]) q.push(i);\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(Edge x : e[u]) {\n\t\t\tint v = x.v, w = x.w, l = x.l;\n\t\t\t--deg[v];\n\t\t\tpair<vector<int>, pii> nw = solve(w);\n\t\t\tTo_max(ans, l), To_max(dp[v][nw], l);\n\t\t\tvector<int> vc;\n\t\t\tfor(int vl : nw.fi) vc.pb(!vl ? 0 : k - vl);\n\t\t\tif(nw.se.fi != -1) {\n\t\t\t\tint nwd = dp[u][mp(vc, mp(nw.se.fi, k - nw.se.se))];\n\t\t\t\tif(nwd) To_max(ans, nwd + l), To_max(dp[v][nw], nwd + l);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint nwd = dp[u][mp(vc, mp(-1, -1))];\n\t\t\t\tif(nwd) To_max(ans, nwd + l), To_max(dp[v][nw], nwd + l);\n\t\t\t}\n\t\t\tif(!deg[v]) q.push(v);\n\t\t}\n\t}\n\tcout << ans << endl;\n}\n\nint main() {\n\tqread(n, m, k);\n\trep(i, 1, m) {\n\t\tint u, v, w, l;\n\t\tqread(u, v, w, l);\n\t\tTo_max(mx, w);\n\t\te[u].pb((Edge){v, w, l});\n\t\t++deg[v];\n\t}\n\tinit();\n\ttopo();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1639751255,
        "uid": 242543,
        "name": "BreezeEnder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6381 \u300eMdOI R2\u300fOdyssey"
    },
    {
        "content": "# \u9898\u610f\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6381)\n\n# \u5206\u6790\n\nDP+\u5206\u89e3\u8d28\u56e0\u6570+\u54c8\u5e0c/map\n\n\u9996\u5148\u624b\u6a21\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a $$ab=c^k$$\u6709\u70b9\u6027\u8d28\uff1a\n\n\u5bf9\u4e8e$a$\u548c$b$\u5206\u89e3\u8d28\u56e0\u6570\u5f97\u5230\uff1a\n\n$a=p_1^{x_1}*p_2^{x_2}...*p_n^{x_n}$\n\n$b=p_1^{y_1}*p_2^{y_2}...*p_n^{y_n}$\n\n\u7136\u540e$a,b$\u4e00\u5b9a\u6ee1\u8db3\uff1a\n\n$x_1+y_1 \\equiv 0 \\mod k$\n\n$x_2+y_2 \\equiv 0 \\mod k$\n\n$...$\n\n$x_n+y_n \\equiv 0 \\mod k$\n\n\u5373\u5bf9\u4e8e\u4efb\u610f\u7684$i \\in [1,n] ,\\exists x_i+y_i \\equiv 0 \\mod k $\u4e14$0 \\leq x_i,y_i \\leq k*r$\uff0c\u5176\u4e2d$r$\u662f\u67d0\u4e2a\u4e0a\u754c\n\n\u4e8e\u662f\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u7684\u8fb9\u7684\u6743\u503c\u90fd\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u7528\u65b0\u7684\u6765\u4ee3\u66ff\uff08\u5373\u5bf9\u6240\u6709\u6307\u6570\u6a21$k$\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u6743\n\n\u63a5\u4e0b\u6765\u53ef\u4ee5\u53d1\u73b0\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u4e00\u7ec4\u4e24\u4e2a\u6570\u90fd\u662f\u552f\u4e00\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6570\u4e3a$p$\uff0c\u90a3\u4e48\u5b58\u5728\u4e14\u53ea\u6709**\u4e00\u4e2a**\u6570$q$\u548c$p$\u4e00\u8d77\u6784\u6210\u201d\u5b8c\u7f8e\u6570\u5bf9\u201c\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u663e\u800c\u6613\u89c1\uff0c\u56e0\u4e3a$\\exists x_i+y_i \\equiv 0 \\mod k$\uff09\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u5c42\u56fe\u7136\u540e$dp$\u5c31\u884c\u4e86\n\n\u8bbe$f_{x,p}$\u4e3a\u5230\u8fbe\u70b9$x$\uff0c\u4e14\u4e0a\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a$p$\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\uff0c\u8bbe$p$\u5728\u4e0a\u9762\u7684\u610f\u4e49\u4e0b\u6620\u5c04\u4e3a$map[p]$\n\n\u90a3\u4e48\u8f6c\u79fb\u5c31\u662f$f_{y,q}=max(f_{y,q},f_{x,p}*(map[p]==q))$\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u503c\u57df\u592a\u5927\u4e86\uff0c\u7a7a\u95f4\u5f00\u4e0d\u4e0b...\u518d\u60f3\u5230\u4e00\u4e2a\u6570\u5206\u89e3\u8d28\u56e0\u6570\u8fc7\u540e\u7684\u8d28\u56e0\u5b50\u4e2a\u6570\u53c8\u4e0d\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528$map$\u6216\u8005\u54c8\u5e0c\u4e71\u641e\u5c31\u884c\u4e86\n\n# \u4ee3\u7801\n\n\u4ee3\u7801\u592a\u4e11\u5c31\u4e0d\u53d1\u4e86$...$\n\n",
        "postTime": 1610446370,
        "uid": 130387,
        "name": "_Anchor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6381 \u3010\u300eMdOI R2\u300fOdyssey\u3011"
    }
]