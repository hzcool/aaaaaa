[
    {
        "content": "\u65e2\u7136\u5f00\u9898\u89e3\u4e86\u6211\u80af\u5b9a\u8981\u5ba3\u4f20\u91cd\u6807\u53f7\u554a\uff01\n\n\u6700\u5f00\u59cb\u6211\u7ed9\u4e00\u9053\u9898\u60f3\u4e86\u8fd9\u4e2a\u91cd\u6807\u53f7\uff08\u7136\u800c\u540e\u9762\u5047\u4e86\u53d8\u6210\u4e86 P8969\uff09\uff0c\u7ed9 joke3579 \u770b\u4e86\u4e00\u773c\uff0c\u7136\u540e\u62ff\u8fd9\u4e2a\u95ee Kaguya\uff0cKaguya \u76f4\u63a5\u5c31\u628a\u8fd9\u4e2a\u91cd\u6807\u53f7\u7ed9\u770b\u51fa\u6765\u4e86\uff0c\u5f88\u5f3a\u554a .\n\n***\n\n\u53ea\u6709\u8fde\u8fb9\u64cd\u4f5c\uff0c\u8003\u8651\u5c06\u7ed3\u70b9\u91cd\u65b0\u6807\u53f7\u4f7f\u5f97\u4efb\u610f\u65f6\u523b\u540c\u4e00\u8fde\u901a\u5757\u5185\u7ed3\u70b9\u6807\u53f7\u8fde\u7eed .\n\n\u4e00\u79cd\u505a\u6cd5\u662f\u9996\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u8dd1\u4e00\u904d\uff0c\u5148\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u96c6\u5408\u5185\u5143\u7d20\u7684\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u9700\u8981\u8bb0\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488\uff0c\u5408\u5e76\u4e24\u4e2a\u5e76\u67e5\u96c6\u7684\u65f6\u5019\u6309\u987a\u5e8f\u8fde\u4e0a\u6307\u9488\uff0c\u6700\u540e\u904d\u5386\u4e00\u904d\u94fe\u8868\u5373\u5b8c\u6210\u91cd\u6807\u53f7\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u5373\u53ef\u5f97\u5230\u6bcf\u4e2a\u65f6\u523b\u8fde\u901a\u5757\u8868\u793a\u7684\u533a\u95f4 .\n\n\u53e6\u4e00\u79cd\u505a\u6cd5\u662f\u540c\u6837\u5148\u628a\u9996\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u8dd1\u4e00\u904d\uff0c\u4e5f\u662f\u5148\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5408\u5e76\u4e24\u4e2a\u96c6\u5408 $A,B$ \u65f6\uff0c\u9996\u5148\u627e\u5230\u5e76\u67e5\u96c6\u4e2d $A,B$ \u8868\u793a\u7684\u7ed3\u70b9 $a,b$\uff0c\u7136\u540e\u5efa\u4e00\u4e2a\u865a\u62df\u70b9 $u$\uff0c\u8fde $(a,u),(b,u)$\uff0c\u5219\u5f62\u6210\u7684\u6811\u7684 DFS \u5e8f\u5373\u4e3a\u91cd\u6807\u53f7\u5e8f\uff08\u6709\u70b9 Kruskal \u91cd\u6784\u6811\u7684\u611f\u89c9\uff09\uff08\u8fd9\u4e2a\u662f Kaguya \u63d0\u51fa\u7684\uff09.\n\n\u4ee5\u4e0a\u65b9\u6cd5\u5df2\u7ecf\u628a\u95ee\u9898\u53d8\u4e3a\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\uff0c\u5dee\u5206\u5373\u53ef\u89e3\u51b3 .\n\n\u65f6\u7a7a\u590d\u6742\u5ea6 $\\Theta(n+q)$ .\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nconst int N = 222222;\nint n, q, a[N], nxt[N], lst[N], id[N];\nbool uok[N];\nstruct Query{int opt, u, v;}que[N];\nstruct dsu\n{\n\tint fa[N];\n\tdsu(){clear();}\n\tint get(int x){return x == fa[x] ? x : fa[x] = get(fa[x]);}\n\tinline void merge(int u, int v)\n\t{\n\t\tu = get(u); v = get(v);\n\t\tif (u == v) return ;\n\t\tnxt[lst[u]] = v; lst[u] = lst[v];\n\t\tfa[v] = u;\n\t}\n\tinline void clear(){iota(fa, fa+N, 0);}\n}D;\nint main()\n{\n\tscanf(\"%d%d\", &n, &q);\n\tmemset(nxt, -1, sizeof nxt); iota(lst, lst+1+n, 0);\n\tfor (int i=1; i<=q; i++)\n\t{\n\t\tscanf(\"%d%d%d\", &que[i].opt, &que[i].u, &que[i].v);\n\t\tif (que[i].opt == 1) D.merge(que[i].u, que[i].v);\n\t}\n\tfor (int i=1; i<=n; i++) uok[nxt[i]] = true;\n\tint cc = 0;\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tif (uok[i]) continue;\n\t\tint u = i; id[u] = ++cc;\n\t\twhile (~nxt[u]){u = nxt[u]; id[u] = ++cc;}\n\t}\n\tD.clear(); memset(nxt, -1, sizeof nxt); iota(lst, lst+1+n, 0);\n\tfor (int i=1; i<=q; i++)\n\t{\n\t\tif (que[i].opt == 1) D.merge(que[i].u, que[i].v);\n\t\telse{int L = D.get(que[i].u), R = lst[L]; a[id[L]] += que[i].v; a[id[R] + 1] -= que[i].v;}\n\t}\n\tfor (int i=1; i<=n; i++) a[i] += a[i-1];\n\tfor (int i=1; i<=n; i++) printf(\"%d \", a[id[i]]);\n\tputs(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1677139577,
        "uid": 227514,
        "name": "jijidawang",
        "ccfLevel": 0,
        "title": "P8710"
    },
    {
        "content": "\u4ece\u5e76\u67e5\u96c6\u6807\u7b7e\u6765\u7684\uff0c\u8fd9\u9053\u9898\u5f88\u7b80\u5355\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u5f97\u77e5\u9053\u600e\u4e48\u5e76\u67e5\u96c6\uff0c\u628a\u6240\u6709\u8054\u901a\u7684\u70b9\u52a0\u5165\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u4fd7\u79f0\uff1a\u5e76\u67e5\u96c6\u3002\n\n\u901a\u8fc7\u5e76\u67e5\u96c6\uff0c\u6211\u4eec\u5c31\u628a\u8bb8\u591a\u70b9\u8fde\u8d77\u6765\u7684\u3002\n\n\u7136\u540e\u628a\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u7684\u96c6\u5408\u52a0\u4e0a\u5728\u8fd9\u4e2a\u8282\u70b9\u5185\u4efb\u610f\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u503c\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u70b9\u653e\u5728\u6839\u8282\u70b9\u4e0a\u3002\u6bcf\u4e00\u6b21\u8fde\u4e0a $a$ \u548c $b$ \u7684\u65f6\u5019\u5c31\u628a\u503c\u52a0\u5230 $ans$ \u91cc\u9762\u53bb\u3002\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u6700\u540e\u4e00\u6b21\u7684\u8fd8\u5f97\u518d\u52a0\u4e00\u6b21\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u53ef\u4ee5\u4fdd\u8bc1\u6700\u540e\u4e00\u6b21\u662f\u94fe\u63a5\u4e24\u4e2a\u70b9\u3002\n\n\u6211\u4eec\u8fd8\u5f97\u8ba1\u5165\u4e00\u4e2a\u70b9\uff0c\u95ee\u9898\uff0c\u5c31\u662f\u5e76\u67e5\u96c6\u8c01\u662f\u6839\u8282\u70b9\uff0c\u6211\u4eec\u8bb0\u4e00\u4e0b\u3002\n\n`dep[y]+=dep[x]`\n\n\u8fd9\u91cc\u4fdd\u8bc1 $y$ \u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e $x$\u3002\n\n\u4f46\u662f\u73af\u7684\u60c5\u51b5\u662f\u8054\u901a\u4e86\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u52a0\u4e86\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MX=10005;\nint f[MX+10],dep[MX+10];\nint find(int x) {\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n}\nint val[MX+10],ans[MX+10];\nint main () {\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1; i<=n; ++i)\n\t\tf[i]=i,siz[i]=1;\n\tfor(int i=1; i<=m; i++) {\n\t\tint op,x,y;\n\t\tcin>>op>>x>>y;\n\t\tif(op==1) {\n\t\t\tx=find(x);\n\t\t\ty=find(y);\n\t\t\tif(x!=y) {\n\t\t\t\tfor(int i=1; i<=n; ++i)\tans[i]+=val[find(i)];\n\t\t\t\tfor(int i=1; i<=n; ++i) val[i]=0;\n\t\t\t\tif(dep[x]>dep[y])\tswap(x,y);\n\t\t\t\tf[x]=y,dep[y]+=dep[x];\n\t\t\t}\n\t\t}\n\t\tif(op==2) x=find(x),val[x]+=y;\n\t}\n\tfor(int i=1; i<=n; ++i) \n\t\tcout<<ans[i]+val[find(i)]<<\" \";\n\treturn 0;\n}\n```\n\u2014\u2014end\u2014\u2014",
        "postTime": 1677315889,
        "uid": 754300,
        "name": "redsky",
        "ccfLevel": 0,
        "title": "P8710"
    },
    {
        "content": "\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u6700\u591a\u53ea\u4f1a\u5408\u5e76 $n-1$ \u6b21\uff08\u7c7b\u4f3c\u6811\u53ea\u6709 $n-1$ \u6761\u8fb9\uff09\u3002\n\n\u4e8e\u662f\u5728\u5408\u5e76\u7684\u65f6\u5019\u66b4\u529b\u7edf\u8ba1\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2+m)$\u3002\n\n\u5efa\u8bae\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\nconst int N=10000;\nint f[N+10],siz[N+10];\nint find(int x){\n\tif(f[x]==x){\n\t\treturn x;\n\t}\n\treturn f[x]=find(f[x]);\n}\nint val [N + 10], ans [N + 10];\nint main () {\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i){\n\t\tf[i]=i;\n\t\tsiz[i]=1;\n\t}\n\twhile(m--){\n\t\tint op,x,y;\n\t\tcin>>op>>x>>y;\n\t\tswitch(op){\n\t\t\tcase 1:{\n\t\t\t\tx=find(x);\n\t\t\t\ty=find(y);\n\t\t\t\tif(x!=y){\n\t\t\t\t\tfor(int i=1;i<=n;++i){\n\t\t\t\t\t\tans[i]+=val[find(i)];\n\t\t\t\t\t}\n\t\t\t\t\tfor(int i=1;i<=n;++i){\n\t\t\t\t\t\tval[i]=0;\n\t\t\t\t\t}\n\t\t\t\t\tif(siz[x]>siz[y]) {\n\t\t\t\t\t\tswap(x,y);\n\t\t\t\t\t}\n\t\t\t\t\tf[x]=y;\n\t\t\t\t\tsiz[y]+=siz[x];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tx=find(x);\n\t\t\t\tval[x]+=y;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tcout<<ans[i]+val[find(i)]<<\" \";\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1677136222,
        "uid": 651908,
        "name": "8NewOC",
        "ccfLevel": 0,
        "title": "\u5e76\u67e5\u96c6\u6a21\u677f\u9898"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a $n$ \u4e2a\u5143\u7d20\u548c $m$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- `1 x y` \u5c06 $x$ \u5143\u7d20\u548c $y$ \u5143\u7d20**\u6240\u5728\u7684\u8054\u901a\u5757\u5408\u5e76\u3002**\n\n- `2 x y` \u5c06 $x$ \u6240\u5728\u7684\u8054\u901a\u5757\u7684\u6240\u6709\u5143\u7d20\u52a0 $y$\u3002\n\n### Solution\n\n\u9996\u5148\uff0c\u6392\u9664\u6389 Top-tree\u3001ETT \u7b49\u4e00\u7cfb\u5217\u4e0d\u6b63\u5e38\u505a\u6cd5\uff0c\u4f3c\u4e4e\u5f88\u50cf\u5e76\u67e5\u96c6\uff0c\u8003\u8651\u53ea\u7528\u5e76\u67e5\u96c6\u600e\u4e48\u505a\u3002\n\n\u8003\u8651\u5e26\u6743\u5e76\u67e5\u96c6\uff0c\u663e\u7136\u6211\u4eec**\u9700\u8981\u7ef4\u62a4\u5404\u4e2a\u8054\u901a\u5757\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb**\uff0c\u5426\u5219\u5982\u679c\u7236\u5b50\u5173\u7cfb\u4e71\u5e8f\uff0c\u5c31\u4f1a\u5bfc\u81f4\u6211\u4eec\u96be\u4ee5\u53d6\u51fa\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u6240\u5f71\u54cd\u5230\u7684\u7ed3\u70b9\u3002\u800c\u8def\u5f84\u538b\u7f29\u4f1a\u7834\u574f\u539f\u5e76\u67e5\u96c6\u7236\u5b50\u5173\u7cfb\uff0c\u4e0d\u65b9\u4fbf\u5904\u7406\u8fd9\u4e2a\u4fe1\u606f\u3002\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u4f18\u5316\uff0c\u53ef\u4ee5\u505a\u5230\u5728 $\\Theta(n \\log_2 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u5e76\u67e5\u96c6\u7684\u6240\u6709\u64cd\u4f5c\u4e14\u4e0d\u4f1a\u7834\u574f\u7236\u5b50\u5173\u7cfb\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a**\u521d\u6b65\u7684\u60f3\u6cd5\uff1a** \u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u4f18\u5316\u5e76\u67e5\u96c6\uff0c**\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4 $\\operatorname{tge}$ \u8868\u793a\u5176\u61d2\u6807\u8bb0**\uff0c\u540c\u65f6\u7528\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u513f\u5b50\uff0c\u4fee\u6539\u65f6\u76f4\u63a5\u4fee\u6539\u61d2\u6807\u8bb0\uff0c\u5408\u5e76\u76f4\u63a5\u5408\u5e76\u3002\u6700\u540e\u76f4\u63a5\u641c\u7d22\u5c06\u61d2\u6807\u8bb0\u9012\u5f52\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u53ef\u60dc\u6700\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5c06\u6837\u4f8b\u4e2d\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u7684\u503c\u9519\u8bef\u7684\u8f93\u51fa\u4e86\u3002\n\n\u89c2\u5bdf\u51fa\u95ee\u9898\u7684\u5730\u65b9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ducj48q8.png)\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u7236\u4eb2 $b$ \u4e4b\u524d\u5df2\u7ecf\u6709\u8fc7\u4e00\u4e2a\u61d2\u6807\u8bb0\u4e86\uff0c\u5219\u5982\u679c\u6211\u4eec\u4e0d pushdown \u4e0b\u53bb\u8fd9\u4e2a\u61d2\u6807\u8bb0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u61d2\u6807\u8bb0\u5c31\u4f1a\u201c\u6c61\u67d3\u201d\u5408\u5e76\u4e0a\u6765\u7684 $a$\uff0c\u5bfc\u81f4\u7b54\u6848\u504f\u5927\u3002\n\n\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5 pushdown \u7ed3\u70b9 $b$\uff0c\u4f46\u53ef\u60dc\u7684\u662f**\u5e76\u67e5\u96c6\u4e2d\u7ed3\u70b9\u7684\u513f\u5b50\u6570\u91cf\u6ca1\u6709\u9650\u5236**\uff0c\u6240\u4ee5\u5982\u679c\u76f4\u63a5\u66b4\u529b pushdown \u7ed3\u70b9 $b$ \u4f1a\u88ab \n\n```\n2 1 1\n1 1 2\n2 2 1\n1 2 3\n...\n2 i 1\n1 i i+1\n```\n\n\u8fd9\u6837\u7684\u6570\u636e\u5361 T \u98de\uff0c\u663e\u7136\u4e0d\u80fd\u8fd9\u6837\u505a\u3002\n\nupd\uff1a\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5728\u7ed3\u70b9 $a$ \u4e0a\u6253\u4e00\u4e2a\u51cf\u6cd5\u6807\u8bb0\u51cf\u53bb\u591a\u7684\u503c\uff0c\u4f46\u662f\u56db\u5468\u770b\u4e86\u4e00\u773c\u57fa\u672c\u90fd\u662f\u8fd9\u4e2a\u505a\u6cd5\uff0c~~\u6240\u4ee5\u540e\u9762\u7684\u5c31\u5f53\u505a\u63d0\u4f9b\u4e00\u4e2a\u65b0\u505a\u6cd5\u4e86~~\u3002\n\n\u6362\u4e00\u79cd\u60f3\u6cd5\uff0c\u8003\u8651\u51cf\u5c11\u5176\u513f\u5b50\u6570\u91cf\u3002\n\n\u8003\u8651\u50cf $\\text{Kruskal}$ \u91cd\u6784\u6811\u4e00\u6837\u6bcf\u6b21\u5408\u5e76\u65f6\u589e\u52a0\u865a\u70b9 $u$\uff0c\u6bcf\u6b21\u5408\u5e76 $a,b$ \u6240\u5728\u7684\u8054\u901a\u5757\uff0c\u5176\u5de6\u513f\u5b50\u7ef4\u62a4 $a$\uff0c\u53f3\u513f\u5b50\u7ef4\u62a4 $b$ \u5373\u53ef\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3g08uvbn.png)\n\n\u6b64\u65f6\u5c06\u4e0d\u518d\u51fa\u73b0\u61d2\u6807\u8bb0\u7684\u6c61\u67d3\u73b0\u8c61\u3002\n\n\u8fd9\u6837\u6bcf\u6b21\u5408\u5e76\u76f4\u63a5\u5728\u5e76\u67e5\u96c6\u4e0a\u67e5\u627e\u865a\u70b9\uff0c\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002\n\n\u73b0\u5728\u51fa\u73b0\u4e86\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u5408\u5e76\u7684\u6b21\u6570\u6700\u591a\u662f $\\Theta(m)$ \u7684\uff0c\u800c\u589e\u52a0\u865a\u70b9\u7834\u574f\u4e86\u542f\u53d1\u5f0f\u4f18\u5316\u4e0b\u7684\u5e76\u67e5\u96c6\u9ad8\u5ea6 $\\Theta(\\log_2 n)$ \u7684\u4e0a\u9650\uff0c\u8fd9\u6837\u5f88\u5bb9\u6613\u88ab\u5355\u94fe\u7684\u6570\u636e\u5361\u6b7b\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u663e\u6027\u7684\u7ef4\u62a4\u865a\u6811\uff0c\u5728\u6bcf\u4e2a\u5e76\u67e5\u96c6\u7684\u6839\u7ed3\u70b9\u4e0a\u7ef4\u62a4\u865a\u70b9\u6839\u8282\u70b9\u5373\u53ef\u3002\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u67e5\u627e\u51fa\u5176\u6839\u8282\u70b9\u7ef4\u62a4\u7684\u865a\u70b9\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u9012\u5f52\u4e0b\u4f20\u61d2\u6807\u8bb0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((n+m) \\log_2 n)$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define re register\nusing namespace std;\ntypedef long long int ll;\nconst int maxn = 2e5 + 10;\nint fa[maxn], ls[maxn], rs[maxn], siz[maxn], vf[maxn], cnt, n, m; ll tge[maxn];\n//\u771f\u5b9e\u7236\u4eb2\uff1b\u865a\u70b9\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff1b\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u7684\u7ed3\u70b9\u5b50\u6811\u6570\u76ee\uff1b\u865a\u6811\u6839\u7ed3\u70b9\u548c\u7ed3\u70b9\u6570\u76ee\n//tge \u4e3a\u61d2\u6807\u8bb0\nint find(int x) {\n    if (!fa[x])return x;\n    else return find(fa[x]);\n    //\u4e0d\u80fd\u5199 fa[x] = find(fa[x])\uff0c\u5426\u5219\u4f1a\u7834\u574f\u7236\u5b50\u5173\u7cfb\n}\ninline void merge(int x, int y) {\n    x = find(x); y = find(y); \n    if (x == y)return;\n    if (siz[x] < siz[y])swap(x, y);\n    fa[y] = x; siz[x] += siz[y]; \n    //\u542f\u53d1\u5f0f\u5408\u5e76\u8fc7\u7a0b\n    int u = ++cnt; ls[u] = vf[x]; rs[u] = vf[y];\n    vf[x] = vf[y] = u; \n    //\u7ef4\u62a4\u865a\u70b9\n}\nvoid dfs(int u) {\n    if (u <= n)return;\n    tge[ls[u]] += tge[u];\n    tge[rs[u]] += tge[u]; tge[u] = 0;\n    dfs(ls[u]); dfs(rs[u]);\n    //\u76f4\u63a5\u5728\u865a\u70b9\u4e0a\u9012\u5f52\u5373\u53ef\n}\nint vis[maxn];\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(); cout.tie(); cin >> n >> m; cnt = n;\n    for (int i = 1; i <= n; i++)siz[i] = 1, vf[i] = i; int x, a, b;\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> a >> b;\n        if (x == 1)merge(a, b);\n        else {\n            int p = vf[find(a)];\n            tge[p] += (ll)b;\n        }\n    }\n    for (int i = 1; i <= n; i++) { \n        int f = vf[find(i)];\n        if (!vis[f])dfs(f), vis[f] = 1;\n        //\u663e\u7136\u4e0d\u80fd\u91cd\u590d\u9012\u5f52\u4e00\u4e2a\u865a\u6839\u7ed3\u70b9\n    }\n    for (int i = 1; i <= n; i++)cout << tge[i] << \" \";\n    return 0;\n}\n```\n",
        "postTime": 1677154972,
        "uid": 551861,
        "name": "wql_cai",
        "ccfLevel": 4,
        "title": "P8710-Solution"
    }
]