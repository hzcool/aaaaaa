[
    {
        "content": "# \u901a\u4fd7\u6613\u61c2\uff01\uff01\uff01\n\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981**\u6784\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811**\uff0c\u6bcf\u6b21\u6784\u9020\u5de6\u53f3\u5b50\u6811\u65f6\u8ba1\u7b97**\u76ee\u524d\u6df1\u5ea6**\u5c31\u53ef\u4ee5\u8fbd\u3002\u3002\u3002\n\n\u6784\u9020\u5de6\u53f3\u5b50\u6811\u65b9\u6cd5\uff1a\n\n\u5982\u679c\u76ee\u524d\u5de6\u5b50\u6811\u8fd8\u672a\u8d4b\u503c\uff0c\u5c31\u8d4b\u503c\uff0c\u6bd4\u8f83\u76ee\u524d\u6700\u957f\u6df1\u5ea6\uff1b\n\n\u5982\u679c\u76ee\u524d\u5df2\u7ecf\u8d4b\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u7684\u5de6\uff08\u53f3\uff09\u5b50\u6811\u4f5c\u4e3a\u6839\uff0c\u8fdb\u884c\u5224\u65ad\u3002\n\n\u6700\u540e\u7528**\u540e\u6839\u6b21\u5e8f\u904d\u5386**\u8f93\u51fa\uff01\uff01\uff01\n\n\u90a3\u4e48\u5949\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\nusing namespace std;\nint d[10000000],dl[10000000],dr[10000000];\nlong long n;\nint prt(int k){//\u8f93\u51fa\n    if(k>0){\n        prt(dl[k]);//\u5148\u8f93\u51fa\u5de6\u8fb9\n        prt(dr[k]);//\u7136\u540e\u8f93\u51fa\u53f3\u8fb9\n        cout<<d[k]<<endl;//\u8f93\u51fa\u6839\n    }\n} \nint main(){\n    long long i,j,k,m,p;\n    long long ans=1,tot;\n    cin>>n;\n    for(i=1;i<=n;i++)cin>>d[i];\n    for(i=2;i<=n;i++){//\u4ece\u7b2c\u4e8c\u4e2a\u5f00\u59cb\u6bd4\u8f83\n        p=1;\n        tot=1;\n        while(p!=0){\n        \ttot++;//\u6df1\u5ea6++\n            if(d[i]<=d[p]){//\u5224\u65ad\u5de6\u53f3\u5b50\u6811\n                if(dl[p]==0){//\u672a\u8d4b\u503c\n                    dl[p]=i;//\u8d4b\u503c\n                    p=0;//\u624b\u52a8\u9000\u51fa\n                }\n                else p=dl[p];//\u5426\u5219\u518d\u8fdb\u884c\u4e00\u6b21\u5224\u65ad\n            }\n            else{\n                if(dr[p]==0){\n                    dr[p]=i;//\u8d4b\u503c\n                    p=0;\n                }\n                else p=dr[p];//\u518d\u6b21\u5224\u65ad\n            }\n            ans=max(ans,tot);//\u8ba1\u7b97\u76ee\u524d\u6700\u5927\u6df1\u5ea6\n        }\n    }\n    cout<<\"deep=\"<<ans<<endl;//\u8f93\u51fa\u6df1\u5ea6\n    prt(1);\n}\n```\n",
        "postTime": 1552734835,
        "uid": 133986,
        "name": "judgejudge",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\u5410\u69fd\u9898\u76ee\u96be\u5ea6\uff0c\u5c31\u7b97\u66b4\u529b\u53ef\u4ee5A\uff0c\u90a3\u4e5f\u662f\u6570\u636e\u7684\u5173\u7cfb\uff0c\u600e\u4e48\u4f1a\u662f\u666e\u53ca-\u2026\u2026\n\n\u9996\u5148\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u4e00\u68f5\u9898\u76ee\u6240\u8981\u6c42\u7684\u6811\uff0c\u5373\u4e0b\u9762\u9898\u89e3\u63d0\u5230\u7684BST\u3002\n\n\u6bcf\u6b21\u66b4\u529b\u63d2\u5165\u8282\u70b9\uff0c\u63d2\u5165\u65f6\u4ece\u6839\u5f00\u59cb\u5c06\u63d2\u5165\u503c\u4e0e\u5f53\u524d\u8282\u70b9\u6743\u503c\u6bd4\u8f83\uff0c\u5927\u5219\u9012\u5f52\u53f3\u5b50\u6811\uff0c\u5426\u5219\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u7a7a\u513f\u5b50\uff0c\u5efa\u7acb\u65b0\u7684\u8282\u70b9\u63d2\u5165\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e0d\u7528\u6307\u9488\u7684\u5c0f\u6e05\u65b0\u7248\u672c\uff1a\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define gt(x) x = read()\n#define max(x,y) x < y ? y : x\nconst int mxn = 300007;\nint n,cnt,dep,nowd,root;\nstruct data{\n    int ls,rs,val;\n}tr[mxn];//ls,rs\u4ee3\u8868\u5de6\u53f3\u513f\u5b50\ninline int read(int out = 0)//\u8bfb\u5165\u4f18\u5316\n{\n    char c;\n    while((c=getchar()) < 48 || c > 57);\n    while(c >= 48 &&c <= 57) out=out*10+c-48,c = getchar();\n    return out;\n}\nvoid insert(int& rt,int x)//\u63d2\u5165\uff0c\u5728\u4fee\u6539rt\u65f6\u53ef\u4ee5\u540c\u65f6\u4fee\u6539\u4e0a\u4e00\u5c42\u51fd\u6570\u4e2d\u7684tr[rt].ls/rs(\u8d77\u5230\u4ee3\u66ff\u6307\u9488\u7684\u4f5c\u7528)\n{\n    ++nowd;\n    if(!rt){rt = ++cnt,tr[rt].val = x;dep = max(dep,nowd);return;}\n    if(x > tr[rt].val) insert(tr[rt].rs,x);\n    else insert(tr[rt].ls,x);return;\n}\nvoid dfs(int rt)\n{\n    if(tr[rt].ls) dfs(tr[rt].ls);\n    if(tr[rt].rs) dfs(tr[rt].rs);\n    printf(\"%d\\n\",tr[rt].val);\n}\nint main()\n{\n    int in;\n    gt(n);\n    for(register int i = 1;i <= n;i++)\n    {\n        nowd = 0;//\u5f53\u524d\u6df1\u5ea6\uff0c\u6bcf\u9012\u5f52\u4e00\u6b21+1\uff0c\u6bcf\u6b21\u63d2\u5165\u521d\u59cb\u5316\u4e3a0\n        gt(in);\n        insert(root,in);\n    }\n    printf(\"deep=%d\\n\",dep);\n    dfs(root);\n    return 0;\n}\n```\nBST\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u590d\u6742\u5ea6\u662fO(n^2)\uff0c\u5bf9\u6bd4\u6570\u636e\u8303\u56f4\uff0c\u663e\u7136\u4e0d\u662f\u6b63\u786e\u7684\u590d\u6742\u5ea6\u3002\u4f46\u662f\u7531\u4e8e\u6570\u636e\u6ca1\u6709\u5361\uff0c\u6240\u4ee5\u8fd9\u6837\u5c31\u53ef\u4ee5AC\u4e86\u2026\u2026\n\u4e0b\u9762\u7ed9\u51fa\u6211\u80fd\u60f3\u5230\u7684\u590d\u6742\u5ea6\u6bd4\u8f83\u4f18\u7684\u505a\u6cd5\uff0c\u5c3d\u91cf\u8be6\u7ec6\u5730\u8bf4\uff0c\u53ef\u80fd\u6709\u70b9\u590d\u6742\u2026\u2026\n\n\u8bfb\u5165\u5168\u90e8\u6570\u636e\u540e\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u5efa\u7acb\u53cc\u5411\u94fe\u8868\uff0c\u5176\u4e2di\u7684\u524d\u9a71\u548c\u540e\u7ee7\u5206\u522b\u4e3ai-1\u548ci+1\u3002\n\n\u7136\u540e\u8003\u8651\u6bcf\u4e00\u4e2a\u6570\u7684\u63d2\u5165\uff0c\u57fa\u4e8eBST\u7684\u6027\u8d28\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u63d2\u5165\u540e\u7684\u7236\u8282\u70b9\u90fd\u662f\u5728\u5b83\u4e4b\u524d\u63d2\u5165\u7684\u6570\u4e2d\u6bd4\u5b83\u5c0f\u6216\u6bd4\u5b83\u5927\u7684\u7b2c\u4e00\u4e2a\u6570,\u7236\u8282\u70b9\u5177\u4f53\u662f\u54ea\u4e2a\u6570\u5219\u53d6\u51b3\u4e8e\u4ed6\u4eec\u63d2\u5165\u7684\u5148\u540e\u987a\u5e8f\u3002\n\n\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u7236\u8282\u70b9\u4e00\u5b9a\u662f\u4e24\u4e2a\u6570\u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\uff0c\u5373\u5f53\u524d\u63d2\u5165\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a\u4e3amax(deepu,deepd)+1,\u5176\u4e2du\uff0cd\u662f\u4e0a\u9762\u6240\u8bf4\u7684\u4e24\u4e2a\u70b9\u3002\n\n\u6309\u7167\u63d2\u5165\u987a\u5e8f\u5012\u5e8f\u5904\u7406\uff0c\u53e6\u5f00\u6570\u7ec4\u8bb0\u5f55\u4e0b\u5f53\u524d\u70b9\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u53bb\u3002\u7531\u4e8e\u4e4b\u540e\u63d2\u5165\u7684\u70b9\u6b64\u65f6\u5df2\u7ecf\u5220\u53bb\uff0c\u6240\u4ee5\u5f97\u5230\u7684\u524d\u9a71\u540e\u7ee7\u5c31\u662f\u6240\u6c42\u7684\u70b9u,v\u3002\n\n\u5c06\u7b2c\u4e00\u4e2a\u70b9\u8bbe\u4e3a\u6839\u8282\u70b9\uff0c\u6df1\u5ea6\u8bbe\u4e3a1\uff0c\u7136\u540e\u6309\u7167\u63d2\u5165\u987a\u5e8f\u6b63\u5e8f\u5904\u7406\uff0c\u8282\u70b9i\u7684\u7236\u4eb2\u4e3a\u8bb0\u5f55\u7684\u4e24\u4e2a\u70b9\u4e2d\u8f83\u6df1\u7684\u4e00\u4e2a\uff0c\u6df1\u5ea6\u4e3a\u7236\u4eb2\u7684\u6df1\u5ea6+1.\n\n\u8fc7\u7a0b\u4e2d\u6c42\u51fa\u6700\u5927\u6df1\u5ea6\uff0c\u5e76\u8bb0\u5f55\u4e0b\u7236\u5b50\u5173\u7cfb\uff0c\u6700\u540edfs\u4e00\u904d\u6c42\u51fa\u540e\u5e8f\u904d\u5386\u3002\n\n\u9664\u4e86\u79bb\u6563\u5316\u4e4b\u5916\uff0c\u5176\u4ed6\u90e8\u5206\u7684\u590d\u6742\u5ea6\u90fd\u4e3aO(n)\uff0c\u79bb\u6563\u5316\u7684\u590d\u6742\u5ea6\u4e3aO(nlogn)\uff0c\u603b\u590d\u6742\u5ea6\u4e3aO(nlogn)\uff0c\u4e0d\u4f1a\u88ab\u4e00\u6761\u94fe\u7684\u6570\u636e\u5361\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\n\ntip:\u6df1\u5ea6\u4e00\u5b9a\u8981\u521d\u59cb\u5316\u4e3a1\uff0c\u6709\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u679c\u65adWA90....\n\n\u4ee3\u7801\u89c1\u4e0b\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#define gt(x) x = read()\nusing namespace std;\nconst int mxn = 300007;\nint n,cnte,root,deep = 1;\nint a[mxn],b[mxn],dep[mxn],ls[mxn],rs[mxn];//b\u4e3a\u79bb\u6563\u5316\u540e\u6570\u5217\uff0cls rs\u5b58\u50a8\u5f53\u524d\u70b9\u5b69\u5b50\nint u[mxn],d[mxn],pre[mxn],nxt[mxn];//pre nxt\u6784\u5efa\u94fe\u8868\uff0cu d\u5b58\u50a8\u6240\u6c42\u70b9\ninline int read(int out = 0)\n{\n    char c;\n    while((c=getchar()) < 48 || c > 57);\n    while(c >= 48 &&c <= 57) out=out*10+c-48,c = getchar();\n    return out;\n}\nvoid dfs(int rt)\n{\n    if(ls[rt]) dfs(ls[rt]);\n    if(rs[rt]) dfs(rs[rt]);\n    printf(\"%d\\n\",a[rt]);\n}\nint find(int x)\n{\n    int l = 1,r = n;\n    while(l <= r)\n    {\n        int mid = l+r>>1;\n        if(a[mid] <= x) l = mid+1;\n        else r = mid-1;\n    }\n    return r;\n}\nint main()\n{\n    gt(n);\n    for(register int i = 1;i <= n;++i) gt(a[i]),b[i] = a[i],pre[i] = i-1,nxt[i] = i+1;//\u521d\u59cb\u5316\u94fe\u8868\n    sort(a+1,a+n+1);\n    for(int i = 1;i <= n;i++) b[i] = find(b[i]);//\u79bb\u6563\u5316\u8fc7\u7a0b\n    for(register int i = n;i >= 1;--i)\n    {\n        int t = b[i];\n        u[t] = pre[t],d[t] = nxt[t];\n        nxt[pre[t]] = nxt[t],pre[nxt[t]] = pre[t];//\u5220\u9664\u5f53\u524d\u70b9\uff0c\u8bb0\u5f55\u524d\u9a71\u540e\u7ee7\n    }\n    root = b[1];dep[b[1]] = 1,deep = 1;\n    for(int i = 2;i <= n;++i)\n    {\n        int f = 0,t = b[i];\n        if(u[t] >= 1 && u[t] <= n && dep[u[t]]+1 > dep[t]) dep[t] = dep[u[t]]+1,f = u[t];\n        if(d[t] >= 1 && d[t] <= n && dep[d[t]]+1 > dep[t]) dep[t] = dep[d[t]]+1,f = d[t];//\u5224\u65ad\u7236\u4eb2\n        if(f < t) rs[f] = t;\n        else ls[f] = t;//\u5224\u65ad\u513f\u5b50\u5de6\u53f3\n        deep = max(deep,dep[t]);\n    }\n    printf(\"deep=%d\\n\",deep);\n    dfs(root);\n    return 0;\n}\n```",
        "postTime": 1509356267,
        "uid": 27165,
        "name": "Dijkspfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u7684\u9898\u9762\u4e2d\u8bf4\u9053**\u5de6\u5b50\u6811<=\u6839<=\u53f3\u5b50\u6811**\uff0c\u8fd9\u5c31\u662f\u6807\u51c6\u7684\u4e8c\u53c9\u6392\u5e8f\u6811(BST)\u7684\u5b9a\u4e49.\n\n\u6b64\u9898\u8003\u67e5\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u77e5\u8bc6\u70b9\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u8003\u5bdf\u5efa\u6811\u3002\n\n\u5efa\u6811\u5c31\u662f\u4e0d\u65ad\u7684\u8c03\u7528$insert$\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6811\u7684\u6df1\u5ea6\uff1fDFS\u641c\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u540e\u5e8f\u904d\u5386\uff1f\u4f17\u4f4d\u5927\u4f6c\u90fd\u4f1a\u5427\n\n$AC$ $Code$(\u91cc\u9762\u6709\u6ce8\u91ca)\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nstruct node{\n    int data,left,right;\n};//\u5b9a\u4e49\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\n\nnode tree[300010];\n\nint n1;\n\nint n;\n\nint ans;\n\nint newnode(int x){\n    n++;\n    tree[n].data=x;\n    tree[n].left=tree[n].right=0;\n    return n;\n}//\u521b\u5efa\u65b0\u8282\u70b9\n\nvoid insert(int x,int& idx){\n    if(!idx){\n        idx=newnode(x);//\u5982\u679c\u5230\u4e86\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5c31\u8c03\u7528newnode\u51fd\u6570\n        return ;\n    }\n    if(x<tree[idx].data)\n        insert(x,tree[idx].left);//\u5f80\u5de6\u5b50\u6811\u8d70\n    else    \n        insert(x,tree[idx].right);//\u5f80\u53f3\u5b50\u6811\u8d70\n}\n\nvoid dfs(int idx,int deep){\n    if(!idx){\n        ans=max(ans,deep);\n        return ;\n    }\n    dfs(tree[idx].left,deep+1);\n    dfs(tree[idx].right,deep+1);\n}//\u6c42\u6df1\u5ea6\n\nvoid printhx(int idx){\n    if(idx){\n        printhx(tree[idx].left);\n        printhx(tree[idx].right);\n        cout<<tree[idx].data<<endl;\n    }\n}//\u540e\u5e8f\u904d\u5386\n\nint main(){\n    cin>>n1;\n    for(int i=1;i<=n1;i++){\n        int x;\n        cin>>x;\n        int id=1;\n        if(i==1)\n            newnode(x);\n        else\n            insert(x,id);\n    }//\u8f93\u5165\u6570\u5217\u52a0\u5efa\u6811\n    dfs(1,0);\n    cout<<\"deep=\"<<ans<<endl;//\u8f93\u51fa\u6df1\u5ea6\n    printhx(1);//\u8f93\u51fa\u540e\u5e8f\u904d\u5386\n    return 0;\n}\n```",
        "postTime": 1545210908,
        "uid": 88213,
        "name": "zhangyuhan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u9053\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6a21\u677f\u9898\uff0c\u6211\u4eec\u53ea\u8981\u6784\u5efa\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\u7136\u540e\u5728dfs\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5efa\u6811\u5462\uff1f\u770b\u4e00\u773c\u9694\u58c1\u4e8c\u53c9\u5806\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u7528 ```p*2```\n  \u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\uff0c ```p * 2 + 1``` \u8868\u793a\u53f3\u513f\u5b50\uff0c\u63d2\u5165\u65f6\u53ea\u8981\u5224\u65ad\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u8fd8\u662f\u5c0f\uff0c\u5982\u679c\u6bd4\u5b83\u5c0f\u800c\u5b83\u7684\u5de6\u513f\u5b50\u4e3a\u7a7a\uff0c\u5219\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\uff0c\u5927\u4e4b\u540c\u7406\u3002\n# code\n```cpp\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;\nint n,ans=1;\nint tree[20000005];\nbool pd=1;\nvoid push(int a){\n\tint p=1;//\u6700\u5f00\u59cb\u8bbf\u95ee\u6839\u8282\u70b9\n\twhile(tree[p]){//\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u7a7a\n\t\tif(a<tree[p]){//\u5982\u679c\u6bd4\u5b83\u5c0f\n\t\t\tp=p*2;//\u5219\u8bbf\u95ee\u5b83\u7684\u5de6\u513f\u5b50\n\t\t}else{\n\t\t\tp=p*2+1;//\u5426\u5219\u8bbf\u95ee\u4ed6\u7684\u53f3\u513f\u5b50\n\t\t}\n\t}\n\ttree[p]=a;//\u627e\u5230\u5408\u9002\u4f4d\u7f6e\u4e86\uff0c\u76f4\u63a5\u52a0\u5165\n}\nvoid dfs(int p,int d){\n\tif(tree[p]==0){//\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\u4e86\uff0c\u8fd4\u56de\u6df1\u5ea6\n\t\tans=max(ans,d);\n\t\treturn;\n\t}\n\tdfs(p*2,d+1);//\u904d\u5386\u5de6\u513f\u5b50\n\tdfs(p*2+1,d+1);//\u904d\u5386\u53f3\u513f\u5b50\n}\nvoid print(int p){//\u9012\u5f52\u8f93\u51fa\u89e3\n\tif(tree[p*2]){//\u5982\u679c\u5de6\u513f\u5b50\u975e\u7a7a\n\t\tprint(p*2);//\u5219\u904d\u5386\u5de6\u513f\u5b50\n\t}\n\tif(tree[p*2+1]){//\u5982\u679c\u53f3\u513f\u5b50\u975e\u7a7a\n\t\tprint(p*2+1);//\u5219\u904d\u5386\u53f3\u513f\u5b50\n\t}\n\tcout<<tree[p]<<endl;\n}\nsigned main(){\n\tcin>>n;\n\tfor(ri i=1;i<=n;i++){\n\t\tint a;\n\t\tcin>>a;\n\t\tpush(a);\n\t}\n\tdfs(1,0);\n\tcout<<\"deep=\"<<ans<<endl;\n\tprint(1);\n\treturn 0;\n}\n```\n\u63d0\u4ea4\u4e0a\u53bb\uff0c\u53ea\u6709 70 \u5206\uff0c RE \u4e86\u4e09\u4e2a\u70b9\uff0c\u662f\u4ec0\u4e48\u539f\u56e0\u5462\uff0c\u770b\u4e0b\u9762\u8fd9\u4e00\u7ec4\u6570\u636e\uff1a\n```cpp\nInput:\n20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\nOutput:\ndeep=20\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```\n\u663e\u7136\u5f53\u8f93\u5165\u6570\u636e\u6709\u5e8f\u65f6\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7a7a\u95f4\u4f1a\u9000\u5316\u4e3a O ( 2 n - 1 ) \u5bf9\u4e8e\u9898\u76ee   1 <= n <= 300000 \u662f\u663e\u7136\u4f1a\u70b8\u7a7a\u95f4\u7684\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\u53ea\u8981\u7528\u6307\u9488\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\n# code\n```cpp\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;\nint n,ans=1,cnt=1;\nint tree[2000005];\nbool pd=1;\nstruct node{\n\tint l;//\u5de6\u513f\u5b50\u4e0b\u6807\n\tint r;//\u53f3\u513f\u5b50\u4e0b\u6807\n}next[2000005];//\u6307\u9488\u6570\u7ec4\nvoid add(int p,int a,bool o){//o\u5224\u65ad\u662f\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\uff0ca\u4e3a\u7236\u4eb2\u7684\u4e0b\u6807\n\ttree[++cnt]=a;//\u65b0\u589e\u7a7a\u8282\u70b9\n\tif(o)next[p].l=cnt;//\u65b0\u589e\u5de6\u513f\u5b50\n\telse next[p].r=cnt;//\u65b0\u589e\u53f3\u513f\u5b50\n}\nvoid push(int a){\n\tint p=1;//\u8bbf\u95ee\u6839\u8282\u70b9\n\twhile(1){//\u4e00\u76f4\u641c\u7d22\u77e5\u9053\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u513f\u5b50\n\t\tif(a<tree[p]){//\u5982\u679c\u6bd4\u5b83\u5c0f\n\t\t\tif(!next[p].l){//\u4e14\u5b83\u6ca1\u6709\u5de6\u513f\u5b50\n\t\t\t\tadd(p,a,1);//\u627e\u5230\u4e86\u4f4d\u7f6e\uff0c\u65b0\u589e\u4e3a\u5b83\u7684\u5de6\u513f\u5b50\n\t\t\t\tbreak;//\u9000\u51fa\u641c\u7d22\n\t\t\t} \n\t\t\tp=next[p].l;//\u5426\u5219\u8bbf\u95ee\u5b83\u7684\u5de6\u513f\u5b50\n\t\t}else{//\u5426\u5219\u6bd4\u5b83\u5927\n\t\t\tif(!next[p].r){//\u4e14\u6ca1\u6709\u53f3\u513f\u5b50\n\t\t\t\tadd(p,a,0);//\u65b0\u589e\u4e3a\u53f3\u513f\u5b50\n\t\t\t\tbreak;\u9000\u51fa\u641c\u7d22\n\t\t\t}\n\t\t\tp=next[p].r;//\u5426\u5219\u7ee7\u7eed\u641c\u7d22\u53f3\u513f\u5b50\n\t\t}\n\t}\n}\nvoid dfs(int p,int d){\n\tif(p==0) return;//\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\n\tif(next[p].l==0&&next[p].r==0){//\u5982\u679c\u641c\u5230\u5e95\u4e86\n\t\tans=max(ans,d);//\u8fd4\u56de\u6df1\u5ea6\n\t\treturn;\n\t}\n\tdfs(next[p].l,d+1);//\u904d\u5386\u5de6\u513f\u5b50\n\tdfs(next[p].r,d+1);//\u904d\u5386\u53f3\u513f\u5b50\n}\nvoid print(int p){\n\tif(next[p].l){//\u5982\u679c\u5de6\u513f\u5b50\u975e\u7a7a\n\t\tprint(next[p].l);//\u8bbf\u95ee\u5de6\u513f\u5b50\n\t}\n\tif(next[p].r){//\u5982\u679c\u53f3\u513f\u5b50\u975e\u7a7a\n\t\tprint(next[p].r);//\u8bbf\u95ee\u53f3\u513f\u5b50\n\t}\n\tif(tree[p])cout<<tree[p]<<endl;\n}\nsigned main(){\n\tcin>>n;\n\tfor(ri i=1;i<=n;i++){\n\t\tint a;\n\t\tcin>>a;\n\t\tpush(a);\n\t}\n\tdfs(1,0);\n\tcout<<\"deep=\"<<ans<<endl;\n\tprint(1);\n\treturn 0;\n}\n```",
        "postTime": 1602129505,
        "uid": 244165,
        "name": "_121017_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "# ~~\u6b64\u9898\u8fc7\u6c34~~\n\n\u9898\u610f\u5c31\u662f\u8ba9\u4f60\u5efa\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\u7136\u540e\u8f93\u51fa\u6df1\u5ea6\u548c\u540e\u5e8f\u904d\u5386\u7684\u5e8f\u53f7\u5373\u53ef\n\n\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b9a\u4e49(\u6765\u81ea\u767e\u5ea6\u767e\u79d1)\n\n```\n\u4e8c\u53c9\u6392\u5e8f\u6811\u6216\u8005\u662f\u4e00\u68f5\u7a7a\u6811\uff0c\u6216\u8005\u662f\u5177\u6709\u4e0b\u5217\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a\n\n\uff081\uff09\u82e5\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b\n\n\uff082\uff09\u82e5\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b\n\n\uff083\uff09\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811\uff1b\n\n\uff084\uff09\u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u8282\u70b9\u3002\n\n```\n\n\u6bcf\u6b21\u66b4\u529b\u63d2\u5165\u5373\u53ef....\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+7;\nint n,a[N],root,sum,dep[N];\nstruct Tree{\n\tint l,r,val;\n}t[N];\nvoid ins(int &p,int val){//&\u7b26\u53f7\u53ef\u8ba9\u5c40\u90e8\u53d8\u91cf\u503c\u6539\u53d8\u65f6\u6240\u5bf9\u5e94\u7684\u7684\u5168\u5c40\u53d8\u91cf\u4e5f  \t\t\t\t\t\t//\u6539\u53d8\n\tif(!p){\n\t\tp=++sum;\n\t\tt[p].val=val;\n\t\tt[p].l=t[p].r=0;\n\t}\n\telse{\n\t\tif(t[p].val<=val)\n\t\t\tins(t[p].r,val);\n\t\telse ins(t[p].l,val);\n\t}\n}\nvoid print(int x){\n\tif(t[x].val){\n\t\tprint(t[x].l);\n\t\tprint(t[x].r);\n\t\tcout<<t[x].val<<endl;\n\t}\n}//\u6839\u636e\u540e\u7eed\u6392\u5e8f\u904d\u5386\u7684\u6027\u8d28\u8f93\u51fa\u5373\u53ef\nvoid dfs(int u,int fa){\n\tif(t[u].val){\n\t\tdep[u]=dep[fa]+1;\n\t\tdfs(t[u].l,u);\n\t\tdfs(t[u].r,u);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tins(root,a[i]);\n\t}\n\tdep[1]=1;\n\tdfs(1,0);\n\tint maxn=0;\n\tfor(int i=1;i<=sum;i++)\n\t\tmaxn=max(maxn,dep[i]);//\u9012\u5f52\u627e\u51fa\u6df1\u5ea6\u6700\u5927\u503c;\n\tcout<<\"deep=\"<<maxn<<endl;\n\tprint(1);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1572047343,
        "uid": 203825,
        "name": "\u5207\u683c\u74e6\u00b7\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u4f60\u8c37\u6ca1\u6709py\u7248\u7684BSTQwQ\n\n\u8fd9\u9053\u9898\u5c31\u662f\u4e2aBST\u7684\u6a21\u677f\uff08\u800c\u4e14\u66f4\u6c34\uff09\uff0c\u56e0\u4e3a\u53ea\u7528\u652f\u6301insert\u65b9\u6cd5\u548c\u540e\u5e8f\u904d\u5386\u5c31\u884c\u4e86\n\n~~\n\u60f3\u5f53\u5e74\u7a9d\u5b66BST\u7684\u5220\u9664\u5b66\u4e86\u4e00\u8282\u8bfe...\u81ea\u95ed~~\n\n\u5e9f\u8bdd\u4e0d\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff0c\u6709\u8be6\u7ec6\u89e3\u6790\u54e6\uff01\n```python\nans = 1#\u6807\u8bb0\u662f\u7b2c\u51e0\u5c42\nans1 = 0#\u6700\u9ad8\u5c42\u6570\nclass BST(object):\n    def __init__(self, data, left = None, right = None):#BST\u7684\u4e09\u4e2a\uff0c\u503c\uff0c\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\n        super(BST, self).__init__()\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def insert(self, val):#\u63d2\u5165\u51fd\u6570\n        global ans, ans1#\u8c03\u7528\u5168\u5c40\u53d8\u91cf\n        if val < self.data:#\u5982\u679c\u5c0f\u4e8e\u5c31\u653e\u5230\u5de6\u5b50\u6811\n            if self.left:#\u5982\u679c\u6709\u5de6\u5b50\u6811\n                ans += 1#\u5c42\u6570+1\n                self.left.insert(val)#\u5de6\u5b50\u6811\u8c03\u7528\u9012\u5f52\n            else:#\u6ca1\u6709\u5de6\u5b50\u6811\n                ans += 1#\u5c42\u6570+1\n                self.left = BST(val)#\u628a\u503c\u653e\u5728\u8fd9\u4e2a\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\n                if ans > ans1:#\u5982\u679c\u5c42\u6570\u6bd4\u4e4b\u524d\u6700\u9ad8\u5c42\u6570\u9ad8\n                    ans1 = ans#\u66ff\u6362\n                ans = 1#\u91cd\u65b0\u5f00\u59cb\n        else:#\u6bd4\u8282\u70b9\u7684\u503c\u5927\n            if self.right:#\u6709\u53f3\u5b50\u6811\n                ans += 1#\u5c42\u6570+1\n                self.right.insert(val)#\u53f3\u5b50\u6811\u8c03\u7528\u9012\u5f52\n            else:#\u6ca1\u6709\u53f3\u5b50\u6811\n                ans += 1#\u5c42\u6570+1\n                self.right = BST(val)#\u5c06\u503c\u653e\u5728\u53f3\u5b50\u6811\u4e0a\n                if ans > ans1:#\u5982\u679c\u5c42\u6570\u5927\u4e8e\u6700\u9ad8\u5c42\u6570\n                    ans1 = ans#\u8986\u76d6\n                ans = 1#\u91cd\u65b0\u5f00\u59cb\n\n    def last(self):#\u540e\u5e8f\u904d\u5386\uff1a\u5de6\uff0c\u53f3\uff0c\u6839\n        if self.left:#\u6709\u5de6\u5b50\u6811\n            self.left.last()#\u5148\u904d\u5386\u5b83\u7684\u5de6\u5b50\u6811\n        if self.right:#\u6709\u53f3\u5b50\u6811\n            self.right.last()#\u904d\u5386\u53f3\u5b50\u6811\n        print(self.data)#\u90fd\u6ca1\u6709\u6216\u5df2\u7ecf\u904d\u5386\u5b8c\u5c31\u8f93\u51fa\u503c\n\n\nn = int(input())#\u8f93\u5165\u6570\u5b57\u4e2a\u6570\ns = input().split()#\u5206\u5272\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u503c\nt = BST(int(s[0]))#\u5efa\u7acb\u4e00\u4e2a\u5bf9\u8c61\nfor i in range(1, n):#\u904d\u5386\u8981\u63d2\u5165\u7684\u6570\u5b57\n    t.insert(int(s[i]))#\u63d2\u5165\u8fdb\u53bb\nprint(\"deep={}\".format(ans1))#\u8f93\u51fa\u6df1\u5ea6\nt.last()#\u540e\u5e8f\u904d\u5386\n\n```\n\u5982\u679c\u60f3\u8981\u5b8c\u6574python\u7248\u7684BST\uff0c\u53ef\u4ee5\u79c1\u6211\u54e6QwQ\n\n\u795d\u5927\u5bb6A\u4e86\u8fd9\u9053\u9898~",
        "postTime": 1587102044,
        "uid": 220426,
        "name": "\u8840\u8272\u9ec4\u660f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\u8003\u5bdfBST\u7684\u63d2\u5165\u95ee\u9898\uff0c\u66b4\u529b\u53ef\u4ee5\u8fc7\uff0c\u6df1\u5ea6\u6211\u9009\u62e9\u4e86\u8fb9\u5efa\u6811\u8fb9\u66f4\u65b0...\u53cd\u6b63\u6570\u636e\u6c34\uff0c\u4e0b\u9762\u7ed9\u51fa\u5c0f\u6e05\u65b0\u7248\u672c\n```cpp\n#include<iostream>\n#include<cstdio>\n#define max(a , b) a > b ? a : b \nusing namespace std ;\nint n , maxdeep = 0 ;\n\nstruct node \n{\n\tint v , deep ;\n\tnode* lchild ;\n\tnode* rchild ;\t\n} ;\n\nnode* root = NULL ;\n\nnode* newnode (int v , int deep)\n{\n\tnode* Node = new node ;\n\tNode -> v = v ;\n\tmaxdeep = max(maxdeep , deep) ;\n\tNode -> deep = deep ;\n\tNode -> lchild = Node -> rchild = NULL ;\n\treturn Node ;\n}\n\nvoid insert (node* &root , int v , int deep)\n{\n\tif (root == NULL)\n\t{\n\t\troot = newnode (v , deep) ;\n\t\treturn ;\n\t}\n\tif (v <= root -> v) insert (root -> lchild , v , deep + 1) ;\n\telse insert (root -> rchild , v , deep + 1) ;\n}\n\nvoid posorder (node* root)\n{\n\tif (root == NULL) return ;\n\tposorder (root -> lchild) ;\n\tposorder (root -> rchild) ;\n\tprintf (\"%d\\n\" , root -> v) ;\n}\n\ninline int read ()\n{\n\tchar ch = getchar () ;\n\tint x = 0 , f = 1 ;\n\twhile (ch < '0' || ch > '9')\n\t{\n\t\tif (ch == '-') f = -1 ;\n\t\tch = getchar () ;\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t{\n\t\tx = x * 10 + ch - '0' ;\n\t\tch = getchar () ;\n\t}\n\treturn x * f ;\n}\n\nint main ()\n{\n\tn = read () ;\n\tfor (int i = 1 ; i <= n ; ++ i)\n\t{\n\t\tint x ;\n\t\tx = read () ;\n\t\tinsert (root , x , 1) ;\n\t}\n\tprintf (\"deep=%d\\n\" , maxdeep) ;\n\tposorder (root) ;\n\treturn 0 ;\n}\n```\n",
        "postTime": 1556437494,
        "uid": 107731,
        "name": "Crybl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "# \u9898\u610f\n- \u5bf9\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811\u8fdb\u884c\u540e\u5e8f\u904d\u5386\u3002\n\n# \u9898\u89e3\n- \u5176\u5b9e\u5c31\u662f\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a\n1. \u63d2\u5165\u8282\u70b9\uff1a\u6bcf\u5f53\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u53ea\u9700\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u7136\u540e\u5411\u5de6\u6216\u5411\u53f3\u904d\u5386\uff0c\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\u5373\u53ef\u3002\uff08\u6ce8\u610f\uff1a\u5f00\u59cb\u9700\u5224\u65ad\u6839\u8282\u70b9\u662f\u5426\u5b58\u5728\u3002\uff09\n3. \u6c42\u6df1\u5ea6\uff1a\u5f53\u524d\u8282\u70b9\u6df1\u5ea6\u5373\u4e3a **max(\u53f3\u8282\u70b9\u6df1\u5ea6\uff0c \u5de6\u8282\u70b9\u6df1\u5ea6\uff09**\u3002\n2. \u540e\u5e8f\u904d\u5386\uff1a\u5224\u65ad\u8282\u70b9\u662f\u5426\u5b58\u5728\u3002\u82e5\u5b58\u5728\uff0c\u5148\u904d\u5386\u5176\u5de6\u8282\u70b9\uff0c\u5728\u904d\u5386\u5176\u53f3\u8282\u70b9\uff0c\u6700\u540e\u8f93\u51fa\u672c\u8282\u70b9\u7684\u503c\u5373\u53ef\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u7ed3\u675f\u3002\uff08\u5176\u5b9e\u540e\u5e8f\u904d\u5386\u53ef\u4ee5\u7528\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u8bd5\u7740\u5199\u4e00\u5199\u3002\uff09\n- \u77e5\u9053\u4e86\u8fd9\u51e0\u70b9\uff0c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct BSTreeNode{\n    int data;\n    BSTreeNode *left;\n    BSTreeNode *right;\n    BSTreeNode *parent;\n    BSTreeNode (int e): data(e),left(NULL), right(NULL), parent(NULL){}\n};\n\nvoid addNode(BSTreeNode *& root, int e){\n    if (root == NULL){\n        root = new BSTreeNode(e);\n        return;\n    }\n    BSTreeNode* node = new BSTreeNode(e);\n    BSTreeNode* p = root;\n    BSTreeNode* preNode = NULL;\n    int flag = 0; // 0 \u8868\u793a\u5de6\uff0c1 \u8868\u793a\u53f3\n    while (p){\n        if (e > p->data){\n            preNode = p;\n            p = p->right;\n            flag = 1;\n        }else{\n            preNode = p;\n            p = p->left;\n            flag = 0;\n        }\n    }\n    if (flag == 0){\n        preNode ->left = node;\n        node ->parent = preNode;\n    }else{\n        preNode ->right = node;\n        node ->parent = preNode;\n    }\n\n}\n\nBSTreeNode *build(int elements[], int len){\n    BSTreeNode* root = NULL;\n    for (int i = 1; i <= len; i ++){\n        addNode(root, elements[i]);\n    }\n    return root;\n}\n\nint deep(BSTreeNode *root){\n    if (root == NULL)\n    {\n        return 0;\n    }\n    int ldeep = deep (root ->left);\n    int rdeep = deep (root -> right);\n    return max(ldeep , rdeep) + 1;\n}\n\nvoid postorder(BSTreeNode *root)\n{\n\tif (root)\n\t{\n\t\tpostorder(root -> left);\n\t\tpostorder(root -> right);\n\t\tcout << root -> data << endl;\n\t}\n}\n\nint e[1000001], n;\n\nint main()\n{\n\tcin >> n;\n\tfor (int i = 1;i <= n;i ++)\n\t{\n\t\tcin >> e[i];\n\t}\n    BSTreeNode *root = build(e, n);\n    cout << \"deep=\" << deep(root) << endl;\n    postorder(root);\n    return 0;\n}\n```\n\n",
        "postTime": 1612424087,
        "uid": 342868,
        "name": "Ted_hjl",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "- \u9898\u9762\u4e2d`\u5de6\u5b50\u6811<\u6839<\u53f3\u5b50\u6811`\u660e\u6446\u7740\u544a\u8bc9\u6211\u4eec\u8fd9\u4e00\u9898\u7528BST(\u4e8c\u53c9\u67e5\u627e\u6811)\u505a,\u7531\u4e8e\u8fd9\u4e00\u9898\u8fc7\u4e8e\u6c34,\u666e\u901a\u4e8c\u53c9\u67e5\u627e\u6811\u53ef\u4ee5\u76f4\u63a5\u8fc7,\u53ef\u4ee5\u5165\u95e8\u7ec3\u624b(\u6bd4\u5982\u6211).\n- \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28:`\u5de6\u5b50\u6811<\u6839<\u53f3\u5b50\u6811`,\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u6027\u8d28,\u5728\u5747\u644a$O(logN)$\u7684\u65f6\u95f4\u5185\u627e\u5230\u6211\u4eec\u9700\u8981\u7684\u503c\u662f\u5426\u5b58\u5728,\u9700\u8981\u6ce8\u610f\u7684\u662f,\u6709\u53ef\u80fd\u9000\u5316\u5230$O(N)$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d4tgpzne.png)\n\n- \u6211\u4eec\u67e5\u627e\u662f\u5426\u5b58\u5728`7`\u8fd9\u4e2a\u8282\u70b9,\u4ece1\u5f00\u59cb\u641c\u7d22,\n    - 1\u6bd47\u5c0f,\u5411\u53f3\u52305,\n    - 5\u6bd47\u5c0f,\u5411\u53f3\u52306,\n    - 6\u6bd47\u5c0f,\u5411\u53f3\u52308,\n    - 8\u6bd47\u5927,\u5411\u5de6\u52307,\u7ed3\u675f.\n- \u5047\u5982\u6211\u4eec\u8981\u63d2\u516510,\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u627e\u5230\n    - \u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u627e\u52309,\u53d1\u73b0\u65e0\u8def\u53ef\u8d70\n    - \u5411\u5bf9\u5e94\u5b50\u6811(\u53f3\u5b50\u6811)\u63d2\u516510.\n- \u9644\u5e26\u829d\u58eb:\u540e\u7eed\u904d\u5386: \u8f93\u51fa\u5728dfs\u7684\u6700\u540e,\u5373  ->  \u904d\u5386\u5de6\u8fb9-\u904d\u5386\u53f3\u8fb9-\u8f93\u51fa\u8be5\u70b9\n- \u6ce8\u610f:\u4e4b\u524d\u770b\u522b\u4eba\u7684\u9898\u89e3\u4ee5\u4e3a\u76f4\u63a5\u7206\u5f00\u6570\u7ec4\u5c31\u884c,\u7ed3\u679c\u7206\u70b8,\u8fd8\u662f\u5f97\u52a8\u6001\u5f00\u70b9.\n\n```cpp\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define Rint register int\n\nint N,deep;\n\nstruct BST{\n    int t[300005],cnt;\n    int lt[300005],rt[300005];\n    int build(int p,int plc,int val){\n        if(plc == 1) //\u63d2\u5165left\n            lt[p] = ++cnt,\n            t[lt[p]] = val;\n        else //\u63d2\u5165right\n            rt[p] = ++cnt,\n            t[rt[p]] = val;\n        return 0;\n    }\n    void ins(int val){\n        Rint p = 1,this_deep = 1;\n        while(true){\n            deep = max(deep,++this_deep);\n            if(t[p] > val) p=lt[p]?lt[p]:build(p,1,val);//\u5982\u679c\u65e0\u5de6\u513f\u5b50\u63d2\u5165\u5de6\u513f\u5b50,\u5426\u5219\u8df3\u5230\u5de6\u513f\u5b50\n            else p=rt[p]?rt[p]:build(p,2,val);//\u540c\u7406\n            if(p == 0) return;//\u5982\u679c\u63d2\u5165,\u5c31\u9000\u51fa\n        }\n    }\n    void dfs(int p){\n        if(p == 0) return ;\n        dfs(lt[p]);dfs(rt[p]);\n        cout << t[p] << endl;\n    }\n    BST () {cnt = 1;deep=1;}//\u9ed8\u8ba4\u4f1a\u8bfb\u5165\u4e00\u4e2a\u6570\u5b57,\u6240\u4ee5\u6df1\u5ea6\u548c\u7f16\u53f7\u8981\u52a01\n}bst;\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin >> N;cin >> bst.t[1];//\u8bfb\u5165\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u51cf\u5c11\u540e\u9762\u7684\u5224\u65ad\n    for(Rint i = 2,t;i<=N;i++){\n        cin >> t;\n        bst.ins(t);\n    }\n    cout << \"deep=\" << deep << endl;\n    bst.dfs(1);\n    return 0;\n}\n```",
        "postTime": 1568619757,
        "uid": 166274,
        "name": "By_Ha",
        "ccfLevel": 0,
        "title": "P2171 Hz\u5410\u6ce1\u6ce1"
    },
    {
        "content": "\u4e8c\u53c9\u6392\u5e8f\u6811\uff08BST\uff09\u6a21\u7248\u3002\n\n\u4e8c\u53c9\u6392\u5e8f\u6811\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\uff0c\u82e5\u6709\u5de6\u5b50\u6811\uff0c\u5219\u5de6\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u7684\u503c<\u8be5\u8282\u70b9\uff1b\u82e5\u6709\u53f3\u5b50\u6811\uff0c\u5219\u53f3\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u7684\u503c>\u8be5\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u672c\u9898\uff0c\u7a0d\u52a0\u6539\u9020\uff0c\u6ee1\u8db3 \u5de6\u5b50\u6811<=\u6839<\u53f3\u5b50\u6811\u3002\n\n\u5bf9\u4e8e\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u82e5\u9009\u53d6\u7684\u6839\u4e0d\u597d\uff0c\u53ef\u80fd\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u5355\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u9000\u5316\u6210O(n)\uff0c\u6545BST\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4e0d\u592a\u5e38\u7528\u3002\n\n\u800c\u4e3a\u4e86\u89e3\u51b3\u9000\u5316\u6210\u94fe\u7684\u60c5\u51b5\uff0c\u6709\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff1a\u5e73\u8861\u6811\u3002\u5373\u901a\u8fc7\u5404\u79cd\u5947\u602a\u7684\u64cd\u4f5c\u4f7fBST\u7684\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u8fbe\u5230O(log n)\uff0c\u5177\u4f53\u7684\u5728\u8fd9\u91cc\u4e0d\u4ecb\u7ecd\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nstruct Node {\n    int     val, dep; //\u7ed3\u70b9\u7684\u6743\u503c\u3001\u6df1\u5ea6\n    Node    *ch[2]; //ch[1]:\u53f3\u5b50\u6811, ch[0]:\u5de6\u5b50\u6811\n    Node(const int& _val) : val(_val)\n    { ch[0] = ch[1] = nullptr, dep = 0; }\n} *Root(nullptr);\n\nint    N, Ai, Dep;\n\nvoid Insert(const int& val) //\u5c06val\u63d2\u5165\u5230BST\u4e2d\n{\n    Node    *x(Root), *y(nullptr);\n    while(x) //\u5bfb\u627e\u63d2\u5165\u7684\u4f4d\u7f6e\n        y = x, x = x -> ch[val > x -> val];\n        //\u82e5val>x->val\u5219\u5728\u53f3\u5b50\u6811,\u53cd\u4e4b\u5728\u5de6\u5b50\u6811\n    x = new Node(val);\n    if(y)\n        y -> ch[val > y -> val] = x, x -> dep = y -> dep + 1;\n    else\n        Root = x, x -> dep = 1;\n    Dep = max(Dep, x -> dep);\n    //\u63d2\u5165BST\u5e76\u7ef4\u62a4\u7ed3\u70b9\u53ca\u5176\u7236\u4eb2\u4fe1\u606f\n}\n\nvoid Out(const Node* x) //\u540e\u5e8f\u904d\u5386:\u5de6 \u53f3 \u6839\n{\n    if(x -> ch[0])\n        Out(x -> ch[0]);\n    if(x -> ch[1])\n        Out(x -> ch[1]);\n    printf(\"%d\\n\", x -> val);\n}\n\nint main()\n{\n    cin >> N;\n    while(N--) {\n        scanf(\"%d\", &Ai);\n        Insert(Ai);\n    }\n\n    printf(\"deep=%d\\n\", Dep);\n    Out(Root);\n\n    return 0;\n}\n```",
        "postTime": 1504783242,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "\u9898\u76ee\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002\n\n\u5bf9\u4e8e\u7ed9\u51fa\u7684\u70b9\uff0c\u6211\u4eec\u5efa\u6811\uff0ca[i]\u8fd9\u4e2a\u6570\u7684\u7f16\u53f7\u5c31\u662fi\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6211\u4eec\u8bb0\u5f55\u5b83\u7684\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9\uff0c\u5c31\u4ece\u7b2c\u4e00\u4e2a\u70b9\u5f00\u59cb\u6bd4\u8f83\u7136\u540e\u9012\u5f52\u67e5\u8be2\uff0c(\u5982\u679c\u5b66\u8fc7\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u8bdd...emm\u53c8\u600e\u4e48\u4f1a\u6765\u770b\u6211\u7684\u9898\u89e3)\u3002\n\n\u5bf9\u4e8e\u540e\u7eed\u904d\u5386\uff0cdfs\u5c31\u597d\u5566\u3002\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <queue>\nusing namespace std;\nint n,x,a[300006],deep=1;\nstruct ahah{\n\tint l,r,v;\n}tree[300006];\nvoid dfs(int x)\n{\n\tif(tree[x].l)dfs(tree[x].l);\n\tif(tree[x].r)dfs(tree[x].r);\n\tprintf(\"%d\\n\",a[x]);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&a[1]);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tint ssj=1,flag=0,cnt=0;\n\t\twhile(a[ssj])\n\t\t{\n\t\t\tif(a[i]<=a[ssj])\n\t\t\t{\n\t\t\t\tif(tree[ssj].l)ssj=tree[ssj].l;\n\t\t\t\telse { flag=1; break; }\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(tree[ssj].r)ssj=tree[ssj].r;\n\t\t\t\telse { flag=2; break; }\n\t\t\t}\n\t\t\tcnt++;\n\t\t}\n\t\tdeep=max(deep,cnt+2);\n\t\tif(flag==1)tree[ssj].l=i;\n\t\telse tree[ssj].r=i;\n\t}\n\t\n//\twhile(cin>>n)cout<<tree[n].l<<\" \"<<tree[n].r<<\"\\n\";\n\tprintf(\"deep=%d\\n\",deep);\n\tdfs(1);\n}\n```\n\u6d1b\u8c37\u6570\u636e\u5c31\u662f\u826f\u5fc3\u554a\u3002",
        "postTime": 1537618103,
        "uid": 61727,
        "name": "Manjusaka\u4e36\u68a6\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "# \u601d\u8def\n\u5148\u9020\u6811\uff0c\u8bb0\u5f55\u597d\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff0c\u6df1\u5ea6\uff0c\u7238\u7238\u548c\u8f93\u5165\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u503c\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u5b8c\u4e86\u7136\u540e\u9012\u5f52\u8f93\u51fa\u540e\u5e8f\u904d\u5386\u3002\n\n[~(@^_^@)~](https://www.luogu.org/blog/dessert/)\u5b89\u5229\u4e00\u8bb0\n\n------------\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct {\n\tint deep;    //\u6df1\u5ea6\n\tint left;    //\u5de6\u513f\u5b50\n\tint right;   //\u53f3\u513f\u5b50\n\tint father;  //\u7238\u7238\n\tint date;    //\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503c\n} a[300001];\nint cout_last_tree(int x) {         \n\tif(a[x].left!=0)                //\u5148\u641c\u7d22\u5de6\u8fb9\u7684\n\t\tcout_last_tree(a[x].left);\n\tif(a[x].right!=0)               //\u7136\u540e\u53f3\u8fb9\n\t\tcout_last_tree(a[x].right);\n\tcout<<a[x].date<<endl;\n}\nint main() {\n    a[1].deep=1;     \n\tint n,maxx=1;                   //\u4e00\u5b9a\u8bb0\u4f4f\uff0c\u6df1\u5ea6\u8981\u8d4b\u503c\u62101\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n\tcin>>n>>a[1].date;\n\tfor(int i=2; i<=n; i++) {\n\t\tint j=1;                    //\u8bb0\u5f55\u5728\u54ea\u4e00\u4e2a\u8282\u70b9\u4e0b\u9762\n\t\tcin>>a[i].date;\n\t\twhile(1)\n\t\t\tif(a[i].date<=a[j].date)  //\u662f\u5426\u5728\u5de6\u8fb9\n\t\t\t\tif(a[j].left==0) {    //\u5de6\u4e8c\u5b50\u662f\u5426\u662f\u7a7a\u7684\n\t\t\t\t\ta[i].father=j;\n\t\t\t\t\ta[j].left=i;\n\t\t\t\t\ta[i].deep=a[j].deep+1;\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t\telse\n\t\t\t\t\tj=a[j].left;\n\t\t\telse                      //\u4e0d\u5728\u5de6\u8fb9\u5c31\u5728\u53f3\u8fb9\n\t\t\t    if(a[j].right==0) {\n\t\t\t\t   a[j].right=i;\n\t\t\t\t   a[i].father=j;\n\t\t\t\t   a[i].deep=a[j].deep+1;\n\t\t\t\t   break;\n\t\t\t    }   \n\t\t\t    else\n\t\t\t\t   j=a[j].right;\n\t\tmaxx=max(a[i].deep,maxx);     //\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6\n\t}\n\tcout<<\"deep=\"<<maxx<<endl;         //\u8f93\u51fa\n\tcout_last_tree(1);                 //\u5f00\u59cb\u9006\u5e8f\u8f93\u51fa\n\treturn 0;                          //\u5c0f\u6e05\u65b0\n}\n```\n\u8f9b\u82e6\u7ba1\u7406\u5927\u5927\u4e86\uff01\uff01\uff01",
        "postTime": 1534057419,
        "uid": 61268,
        "name": "dessert",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2171 \u3010Hz\u5410\u6ce1\u6ce1\u3011"
    },
    {
        "content": "### \u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3= =\n\n------------\n#### \u6839\u636e\u672c\u849f\u84bb\u7684~~\u7ecf\u9a8c~~\u6c34\u5e73\uff0c\u4e00\u770b\u9898\u5c31\u53ea\u4f1a\u66b4\u529b\uff08\u4e0d\u6127\u662f\u849f\u84bb\uff09\n# \u7136\u800c\u66b4\u529b\u51fa\u5947\u8ff9\uff01\n###### ~~\u5176\u5b9e\u53ea\u662f\u6570\u636e\u5f31~~\n####  _\u4e0d\u8bf4\u4e86\uff0c\u4e0a\u4ee3\u7801~~~_ \n```cpp\n#include<cstdio>\nint n,a[101],ans;\nbool flag[100001];\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n      scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=n;j++)\n        for(int k=1;k<=n;k++)\n          if (a[i]!=a[j]&&a[j]!=a[k]&&a[k]!=a[i]&&a[j]+a[k]==a[i])\n            flag[i]=true;\n    for(int i=1;i<=n;i++)ans+=flag[i];\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1533472254,
        "uid": 112557,
        "name": "UhhhQQQU",
        "ccfLevel": 0,
        "title": "\u9898\u89e3"
    }
]