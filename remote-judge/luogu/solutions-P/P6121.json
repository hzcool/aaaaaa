[
    {
        "content": "## P6121\n~~CSP\u524d\u53d1\u7bc7\u9898\u89e3\u589e\u52a0\u4e00\u4e9bRP~~\n\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u773c\uff0c~~\u601d\u8def\u5c31\u662f\u8dd1 n \u904d\u5e76\u67e5\u96c6~~\uff0c\u7785\u4e86\u4e00\u773c\u6570\u636e\uff081\u2264N,M\u22642\u00d7$10^5$\uff09\uff0cif I do that\uff0cI will T \u7684 ~~\u8d77\u98de~~\n\n\u6211\u89c9\u5f97\u8fd9\u9053\u9898\u7684\u201c[\u5f31\u5316\u7248](https://www.luogu.com.cn/problem/P3144)\u201d\u8fd8\u662f\u53ef\u4ee5\u8fc7\u5f97\n\n~~\u867d\u7136\u6211\u6ca1\u8fd9\u4e48\u5199~~\n\n\u8f93\u5165\u7684\u6700\u540en\u884c\u8868\u793a\u519c\u573a\u5173\u7684\u987a\u5e8f\uff0c\u90a3\u6211\u4eec\u5012\u8fc7\u6765\u770b\uff08\u4ece\u540e\u5f80\u524d\uff09\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u6210\u519c\u573a\u5f00\u7684\u987a\u5e8f\uff082-1-4-3\uff09\n\n```\nT0:\u5168\u5f00\u7740\uff081 2 3 4\uff09 \nT1:\u5173\u4e863 \uff081 2 4\uff09\nT2:\u5173\u4e864 \uff081 2\uff09\nT3:\u5173\u4e861 \uff082\uff09\nT4:\u5173\u4e862 \uff08-\uff09\n```\n\u770b\u4f5c\n```\nT4:\u5168\u5173\u7740\uff08-\uff09 \nT3:\u5f00\u4e862 \uff082\uff09\nT2:\u5f00\u4e861 \uff081 2\uff09\nT1:\u5f00\u4e864 \uff081 2 4\uff09\nT0:\u5f00\u4e863 \uff081 2 3 4\uff09\n```\n### 1.\u6574\u4f53\u601d\u8def\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u4ece$T_{n-1}$\u641c\u7d22\u5230${T_0}$\u65f6\u523b\uff0c\u6bcf\u6b21\u5224\u65ad\u52a0\u4e0a\u4e00\u4e2a\u70b9\uff0c\u8fd8\u662f\u5426\u4e0e\u5176\u4ed6\u70b9\u8054\u901a\u3002\n### 2.\u7406\u8bba\u652f\u6301\n\u628a $k$ \u4e2a\u70b9\u548c\u5e76\u6210\u4e00\u4e2a\u8054\u901a\u56fe\uff0c  \n\u4e00\u6b21\u5408\u5e76\u4e24\u4e2a\u70b9\uff08\u5373\u5728\u4e24\u4e2a\u70b9\u95f4\u52a0\u4e00\u6761\u8fb9\uff09\uff0c  \n\u4e0d\u91cd\u590d\u64cd\u4f5c\uff08\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8054\u901a\u7684\u5c31\u4e0d\u52a0\u4e86\uff09\uff0c  \n\u6211\u4eec\u53ea\u9700\u8981\u64cd\u4f5c $k-1$ \u6b21\uff08\u52a0 $k-1$ \u6761\u8fb9\uff09\u5373\u53ef\uff0c  \n\u5982\u679c\u8bf4\u6211\u4eec\u64cd\u4f5c\u4e0d\u591f $k-1$ \u6b21\uff08\u8fb9\u6570\u5c0f\u4e8e $k-1$\uff09\uff0c  \n\u90a3\u4e48\u8fd9\u5f20\u56fe\u4e00\u5b9a\u4e0d\u8fde\u901a\u3002\n\n\u6211\u4eec\u9700\u8981\u4f9d\u9760\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\uff0c  \n\u90a3\u7528\u5e76\u67e5\u96c6\u6765\u89e3\u91ca\u5c31\u662f\u6240\u6709\u7684\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c  \n\u5982\u679c\u5728\uff0c\u5219\u8054\u901a\uff1b \u53cd\u4e4b\uff0c\u5219\u4e0d\u8fde\u901a\u3002\n### 3.\u5177\u4f53\u5b9e\u73b0\n\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4 $ f $ \u6765\u5b58\u4ed6\u7684\u7956\u5148\u8282\u70b9\uff0c  \n\u5f00\u59cb\u521d\u59cb\u5316\u6210\u6bcf\u4e2a\u70b9\u81ea\u5df1\u5728\u4e00\u4e2a\u96c6\u5408\uff0c  \n\u5982\u679c\u4ed6\u4eec\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u7684\u8bdd\uff0c\u5e76\u4e14\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u4ed6\u4eec\u4e24\u4e2a\uff0c\u5c31\u628a\u4ed6\uff0c\u4eec\u5408\u5e76\u8d77\u6765\uff0c\u64cd\u4f5c\u6570 $+1$.  \n\u5982\u679c\u5f53\u524d\u6709 $k$ \u4e2a\u519c\u573a\u662f\u5f00\u7740\u7684\uff0c\u8bb0\u5f55\u5408\u5e76\u7684\u6b21\u6570\uff0c\u5982\u679c\u6b21\u6570\u7b49\u4e8e $k-1$ \u5219```YES```;\u53cd\u4e4b\uff0c\u5219```NO```.\n\n#### \u521d\u59cb\u5316\n```cpp\ninline void init(){\n    for(register int i=1;i<=n;i++)\n        f[i]=i;\n}\n```\n#### \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n```cpp\nint tot,head[200010];\ninline void add_edge(int from,int to){\n    e[++tot].from=from;\n    e[tot].to=to;\n    e[tot].next=head[from];\n    head[from]=tot;\n\u2026\u2026 \u2026\u2026 \u2026\u2026\nscanf(\"%d%d\",&u,&v);\n        add_edge(u,v);\n        add_edge(v,u);\n}\n```\n#### \u5e76\u67e5\u96c6\uff08\u8def\u5f84\u538b\u7f29+\u5408\u5e76\uff09\n```cpp\ninline int _find(int x){\n    while(x!=f[x]) x=f[x]=f[f[x]];\n    return x;\n\u2026\u2026 \u2026\u2026 \u2026\u2026\nint fx=_find(t[i]),fy=_find(e[j].to);\nif(fx!=fy)\n{\n\t++k; //\u5408\u5e76\u6b21\u6570+1\n\tf[fx]=fy;\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\u9644\u4e0a~\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nstruct _edge{\n    int from;\n    int to;\n    int next;\n}e[400010];\nint tot,head[200010],k;\nbool vis[200010];                        //\u5224\u65ad\u519c\u573a\u662f\u5426\u5f00\u7740 \ninline void add_edge(int from,int to){   //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n    e[++tot].from=from;\n    e[tot].to=to;\n    e[tot].next=head[from];\n    head[from]=tot;\n}\nint n,m,u,v,t[200010],ans[200010],f[200010];\ninline int _find(int x){            //\u67e5\u8be2+\u8def\u5f84\u538b\u7f29\n    while(x!=f[x]) x=f[x]=f[f[x]];\n    return x;\n}\ninline void init(){                 //\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    for(register int i=1;i<=n;i++)\n        f[i]=i;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add_edge(u,v);              //\u65e0\u5411\u56fe\u53cc\u5411\u5b58\u8fb9\n        add_edge(v,u);\n    }\n    for(register int i=1;i<=n;i++)\n        scanf(\"%d\",&t[i]);          //\u519c\u573a\u5173\u7684\u65f6\u95f4\uff0c\u53cd\u7740\u770b\u5c31\u662f\u5f00\u7684\u65f6\u95f4\n    init();                         //\u5b9a\u4e49\u4e86\u51fd\u6570\u2026\u2026\u8bb0\u5f97\u7528\n    vis[t[n]]=1;                    //t_n\u65f6\u5f00\u4e86\u519c\u573a t[n]\uff0c\u6807\u8bb0\n    ans[n]=1;                       //\u53ea\u5f00\u4e86\u4e00\u4e2a\u65f6\u56fe\u5fc5\u5b9a\u662f\u8054\u901a\u7684\n    for(register int i=n-1;i>=1;i--) //\u53cd\u7740\u641c\uff0c\u7b2ci \u65f6\u523b\u5f00\u4e86\u519c\u573at[i]\n    {\n        vis[t[i]]=1;                //\u6807\u8bb0\n        for(register int j=head[t[i]];j;j=e[j].next)\n        {\n            if(vis[e[j].to]==1)      //\u5982\u679c\u8be5\u8fb9\u7ec8\u70b9\u519c\u573a\u4e5f\u5f00\u4e86\uff0c\u6267\u884c\u5982\u4e0b\u8bed\u53e5\n            {\n                int fx=_find(t[i]),fy=_find(e[j].to);//\u5e76\u67e5\u96c6\u67e5\u8be2\n                if(fx!=fy)     //\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u8bdd\n                {\n                    ++k;       //\u5408\u5e76\u6b21\u6570 +1 \n                    f[fx]=fy;  //\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\n                }\n            }\n        }\n        if(k==n-i) ans[i]=1;   //\u5f53\u524d\u5f00\u4e86n-\uff08i-1\uff09\u4e2a\u519c\u573a\uff0c\u5224\u65ad\u662f\u5426\u8fde\u901a\uff0c\u50a8\u5b58\u7b54\u6848\n        else ans[i]=0;\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        if(ans[i]==1) printf(\"YES\\n\");  //\u6253\u5370\u7b54\u6848\n        else printf(\"NO\\n\");\n    }\n    return 0;\n}\n\n```\n**\u82e5\u6709\u5730\u65b9\u6ca1\u770b\u61c2\u53ef\u4ee5\u79c1\u4fe1\u6211**  \n**\u82e5\u5199\u7684\u4e0d\u597d\u8fd8\u8bf7\u5927\u5bb6\u7684\u4f53\u8c05**  \n**\u82e5\u6709\u9519\u7684\u5730\u65b9\u8fd8\u671b\u5927\u5bb6\u6307\u51fa**  \n**\u8c22\u8c22\u5404\u4f4d\u7684\u652f\u6301~**\n**\u6700\u540e\uff0cMeteorshower_Y\u5728\u8fd9\u91cc\u795d\u798f\u5927\u5bb6RP++\uff0cScore++**",
        "postTime": 1604565741,
        "uid": 239164,
        "name": "Meteorshower_Y",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "## $1^o$ \u5206\u6790\n\n  \u9996\u5148\u60f3\u5230\u7684\u6700\u6734\u7d20\u7684\u65b9\u6cd5\uff1a\u6bcf\u6b21\u6807\u8bb0\u5220\u9664\u7684\u70b9\uff0c\u7136\u540e\u904d\u5386\u4e00\u904d\u5224\u65ad\u662f\u5426\u8054\u901a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n(n+m))$\u3002\n\n  \u7136\u540e\u60f3\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u5982\u679c\u628a\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5012\u8fc7\u6765\uff0c\u5c31\u662f\u52a0\u5165\u4e00\u4e2a\u70b9\u5e76\u5224\u65ad\u662f\u5426\u8054\u901a\u3002  \n\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u52a0\u5165\u70b9\u7684\u8fb9\u5e76\u5224\u65ad\u8fd9\u6761\u8fb9\u662f\u5426\u8ba9\u6574\u4e2a\u56fe\u8054\u901a\u3002  \n\u5982\u4f55\u5224\u65ad\u8054\u901a\uff1f\u5bb9\u6613\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\u628a\u52a0\u5165\u70b9\u6240\u8fde\u6240\u6709\u8fb9\u7684\u7aef\u70b9\u5408\u5e76\u4e00\u904d\u540e $\\Theta(n)$ \u626b\u4e00\u904d\u7236\u4eb2\u6570\u7ec4\u5224\u65ad\u662f\u5426\u8054\u901a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n^2+mlog(m))$\uff08\u5e76\u67e5\u96c6\u53ef\u4ee5\u88ab\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u5230 $log$ \u7684\u590d\u6742\u5ea6\uff0c~~\u8fd9\u4e48\u4e00\u770b\u597d\u50cf\u6bd4\u6700\u6734\u7d20\u7684\u65b9\u6cd5\u8fd8\u8981\u6162~~\uff09\n\n\u8fd9\u4e24\u79cd\u65b9\u6cd5\u672c\u9898\u90fd\u8fc7\u4e0d\u53bb\uff0c\u4e8e\u662f\u8003\u8651\u4f18\u5316\u3002\n\n## $2^o$ \u4f18\u5316\n\n  \u6700\u6734\u7d20\u7684\u65b9\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u597d\u4f18\u5316\u7684\u3002~~\u6ca1\u51c6\u5361\u5361\u5e38\u5f00\u5f00O2\u6d17\u6d17\u8138\u5c31\u8fc7\u4e86~~\n\n  \u90a3\u770b\u4e00\u4e0b\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u80fd\u5426\u4f18\u5316\u3002  \n  \u9996\u5148 $\\Theta(mlog(m))$ \u7684\u5408\u5e76\u4f18\u5316\u4e0d\u4e86~~\u9664\u975e\u6709\u795e\u7287\u60f3\u51fa\u6765\u6bd4\u5e76\u67e5\u96c6\u8fd8\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784~~\uff0c\u90a3\u6765\u770b\u4e00\u4e0b $\\Theta(n^2)$ \u7684\u5224\u65ad\u80fd\u4e0d\u80fd\u4f18\u5316\u3002  \n  \u53d1\u73b0\u5982\u679c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u90a3\u4e48\u603b\u7684\u96c6\u5408\u6570\u91cf\u5c31\u4f1a\u51cf\u5c111\u3002  \n  \u4e8e\u662f\u5f00\u4e00\u4e2a\u53d8\u91cf $sum$ \u6765\u8bb0\u5f55\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u96c6\u5408\uff0c\u521d\u59cb $sum$ \u4e3a\u96f6\u3002\n  \u6bcf\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\u65f6 $sum$ \u52a0\u4e0a1\uff08\u65b0\u52a0\u5165\u7684\u70b9\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u96c6\u5408\uff09\uff0c\u7136\u540e\u5728\u904d\u5386\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u73b0\u4e24\u4e2a\u7aef\u70b9\u6240\u5c5e\u96c6\u5408\u4e0d\u540c\uff0c\u90a3\u5c31\u5408\u5e76\u4e00\u4e0b\u5e76\u4f7f $sum$ \u51cf1\uff0c\u904d\u5386\u5b8c\u4e4b\u540e\u518d\u5224\u65ad $sum$ \u662f\u5426\u4e3a1\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n+m+mlog(m)) = \\Theta(mlog(m))$\u3002\n\n## $3^o$ \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint fr(){//\u5feb\u8bfb\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c))f|=(c=='-'),c=getchar();\n    while(isdigit(c))x=x*10+(c&15),c=getchar();\n    return f?-x:x;\n}\nint n,m;\nnamespace Edges{//\u8fb9\n    struct edges{//\u5b58\u8fb9\u7684\u6570\u7ec4\n        int u,v,nxt;\n    }edge[400005];\n    int head[200005];\n    void add(int u,int v){//\u52a0\u8fb9\n        static int cnt=0;\n        edge[++cnt]=(edges){u,v,head[u]};\n        head[u]=cnt;\n    }\n}\nusing namespace Edges;\nnamespace ufs{//\u5e76\u67e5\u96c6\n    int f[200005];//\u7236\u4eb2\u6570\u7ec4\n    bool vis[200005];//\u7528\u6765\u6807\u8bb0\u8fd9\u4e2a\u70b9\u662f\u5426\u52a0\u5165\u4e86\u8fdb\u6765\uff0c\u52a0\u5165\u4e86\u4e3a1\uff0c\u6ca1\u52a0\u5165\u4e3a0\n    void init(){//\u521d\u59cb\u5316\n        memset(vis,0,sizeof vis);\n        for(int i=1;i<=n;i++)f[i]=i;\n    }\n    int find(int x){return f[x]==x?x:f[x]=find(f[x]);}//\u627e\u7956\u5148\n}\nusing namespace ufs;\nint kil[200005];//\u67aa\u6bd9\u540d\u5355\uff08\u5212\u6389\uff09\u8bb0\u5f55\u7b2ci\u4e2a\u88ab\u5220\u6389\u7684\u70b9\nbool ans[200005];//\u8868\u793a\u5220\u4e86i-1\u4e2a\u70b9\u540e\u8be5\u56fe\u662f\u5426\u8054\u901a\nint main(){\n    n=fr(),m=fr();\n    for(int i=1,u,v;i<=m;i++){\n        add((u=fr()),(v=fr()));\n        add(v,u);\n    }\n    init();\n    for(int i=1;i<=n;i++)kil[i]=fr();\n    //\u8bfb\u5165\u4e0e\u521d\u59cb\u5316\n    for(int i=n,u,sum=0;i;i--){//\u5012\u5e8f\u679a\u4e3e\n        u=kil[i];//\u5f53\u524d\u88ab\u52a0\u5165\u7684\u70b9\n        sum++;//\u8fd9\u4e2asum\u5c31\u662f\u4e0a\u9762\u90a3\u4e2asum\n        vis[u]=1;//\u6807\u8bb0\n        for(int j=head[u];j;j=edge[j].nxt){//\u679a\u4e3e\n            if(vis[edge[j].v]/*\u9996\u5148\u53e6\u5916\u4e00\u4e2a\u70b9\u5fc5\u987b\u5df2\u7ecf\u52a0\u5165\u4e86*/ && find(u)!=find(edge[j].v)/*\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408*/)f[find(u)]=find(edge[j].v),sum--;//\u5408\u5e76\u7136\u540esum--\n        }\n        ans[i]=(sum==1);//\u8bb0\u5f55\u7b54\u6848\n    }\n    for(int i=1;i<=n;i++)printf(ans[i]?\"YES\\n\":\"NO\\n\");//\u8f93\u51fa\n    return 0;\n}\n```\n\n### \u7ed3\u675f\n\n\u4e0e\u8fd9\u9053\u9898\u5dee\u4e0d\u591a\u7684\u4e00\u9053\u9898[\u661f\u7403\u5927\u6218](https://www.luogu.com.cn/problem/P1197)\u9001\u7ed9\u4f60\u4eec\u3002\u611f\u8c22\u89c2\u770b\uff01",
        "postTime": 1604121759,
        "uid": 180103,
        "name": "Ew_Cors",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6121)\n\n\u5224\u65ad\u662f\u5426\u8054\u901a\u81ea\u7136\u60f3\u5230\u5e76\u67e5\u96c6\u3002\n\n\u4f46\u4e0d\u8fc7\u6b64\u9898\u662f\u8981\u5728\u56fe\u4e2d\u5220\u70b9\uff0c\u8fd9\u4e00\u70b9\u7528\u5e76\u67e5\u96c6\u6765\u5b8c\u6210\u6bd4\u8f83\u56f0\u96be\u3002\n\n\u90a3\u4f55\u4e3a\u5e76\u67e5\u96c6\uff1f\u5f53\u7136\u6709\u4e24\u5927\u529f\u80fd\uff1a\u5408\u5e76\u548c\u67e5\u627e\u3002\u90a3\u6211\u4eec\u4e0d\u59a8\u628a\u5220\u70b9\u64cd\u4f5c\u8f6c\u6362\u6210\u5408\u5e76\u3002\n\n\u5c31\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff1a\n\n```cpp\n4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n```\n\u6211\u4eec\u4e00\u5171\u67094\u4e2a\u70b9\uff0c\u7136\u540e\u4f9d\u6b21\u8981\u5220\u70b93\u30014\u30011\u30012\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u539f\u672c\u56fe\u4e2d\u4e00\u4e2a\u70b9\u90fd\u6ca1\u6709\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u70b92\u30011\u30014\u30013\uff0c\u5e76\u628a\u4e0e\u5b83\u76f8\u5173\u7684\u70b9\u8fde\u8d77\u6765\uff0c\u67e5\u627e\u96c6\u5408\u7684\u4e2a\u6570\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u5f53\u524d\u5168\u8054\u901a\u3002\n\n\u4e0a\u4ee3\u7801\uff0c\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\nint const N=200000+3;\nint n,m,cnt,k,h[N<<1],fa[N<<1],a[N<<1],ans[N<<1],vis[N<<1];\nstruct edge{\n\tint to,nt;\n}e[N<<1];\nvoid add(int x,int y){//\u6b64\u5904\u5b58\u8fb9\u7528\u5230\u524d\u5411\u661f\uff0c\u7528vector\u4e5f\u53ef\u4ee5 \n\te[++cnt].nt=h[x];\n\te[cnt].to=y;\n\th[x]=cnt;\n}\nint find(int x){//\u57fa\u672c\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u64cd\u4f5c \n\treturn x==fa[x]?x:fa[x]=find(fa[x]);\n}\nint main(){\n\tn=read();m=read();\n\tfor (int i=1;i<=n;i++) fa[i]=i;\n\tfor (int i=1;i<=m;i++){\n\t\tint x=read(),y=read();\n\t\tadd(x,y);\n\t\tadd(y,x);//\u628a\u8fb9\u8bb0\u5f55\u4e0b\u6765 \n\t}\n\tfor (int i=1;i<=n;i++)\n\t  a[i]=read(),vis[a[i]]=1;//\u8bb0\u5f55\u5220\u6389\u7684\u70b9 \n\tint sum=0;//\u5f53\u524d\u56fe\u4e2d\u96c6\u5408\u4e2a\u6570 \n\tfor (int i=n;i>=1;i--){//\u4ece\u540e\u5f80\u524d\u52a0\u70b9 \n\t\tsum++;//\u6bcf\u6b21\u52a0\u70b9\u610f\u5473\u7740\u4f1a\u591a\u51fa\u6765\u4e00\u4e2a\u72ec\u7acb\u7684\u96c6\u5408 \n\t\tint u=a[i];\n\t\tfor (int j=h[u];j;j=e[j].nt){//\u52a0\u4e0a\u4e0e\u8be5\u70b9\u76f8\u5173\u7684\u8fb9 \n\t\t\tint v=e[j].to;\n\t\t\tif (find(u)!=find(v) && !vis[v]) fa[find(u)]=find(v),sum--;//\u4e24\u4e2a\u70b9\u8981\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u4e14\u90fd\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u96c6\u5408\u4f1a\u5c11\u4e00\u4e2a \n\t\t}\n\t\tvis[u]=0;//\u5c06\u70b9\u4ece\u5220\u6389\u70b9\u7684\u96c6\u5408\u4e2d\u53d6\u51fa\uff0c\u8868\u793a\u8be5\u5e97\u5df2\u5728\u56fe\u4e2d \n\t\tans[i]=sum;//\u8bb0\u5f55\u7b54\u6848 \n\t}\n\tfor (int i=1;i<=n;i++)\n\t  if (ans[i]==1) puts(\"YES\");//\u5224\u65ad\u662f\u5426\u5168\u8054\u901a \n\t  else puts(\"NO\");\n\treturn 0;\n}\n```\n",
        "postTime": 1583294749,
        "uid": 146307,
        "name": "\u8881\u5b87\u8f69",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "\u4e00\u9053\u5173\u4e8e\u5e76\u67e5\u96c6\u975e\u5e38\u597d\u7684\u7ec3\u624b\u9898\u3002\n## \u9898\u610f\n\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u7ed9\u51fa\u5220\u53bb\u70b9\u7684\u987a\u5e8f\uff0c\u6c42\u6bcf\u6b21\u5220\u5b8c\u70b9\u56fe\u662f\u5426\u8054\u901a\u3002\n\n## \u601d\u8def\n\u9996\u5148\u5220\u70b9\u6211\u4eec\u77e5\u9053\u8981\u975e\u5e38\u7684\u9ebb\u70e6\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5341\u5206\u6709\u7528\u7684\u6280\u2014\u2014**\u53cd\u5411\u5efa\u8fb9**\u3002\n$ $\n\n\u6240\u8c13\u53cd\u5411\u5efa\u8fb9\uff0c\u4e5f\u5c31\u662f**\u5c06\u6b63\u5e8f\u5220\u70b9\uff08\u8fb9\uff09\u53d8\u4e3a\u53cd\u5e8f\u52a0\u70b9(\u8fb9)** \uff0c\u5c31\u6bd4\u5982\u8bf4\u6837\u4f8b\u4e2d\uff1a\n```\n4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n```\n\u6837\u4f8b\u4e2d\u5148\u540e\u5220\u53bb\u4e86 $3,4,1,2$ ,\u901a\u5e38\u601d\u8def\u5c31\u662f\u5c06\u5173\u4e8e\u7b2c $i$ \u4e2a\u70b9\u7684\u6240\u6709\u76f4\u63a5\u8054\u7cfb\u7684\u8fb9\u5220\u53bb\uff0c\u90a3\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u601d\u8def\u6539\u4e3a**\u5c06 $2,1,4,3$\u4e2d\u7b2c $i$\u4e2a\u8282\u70b9\u7684\u6240\u6709\u7684\u76f4\u63a5\u8054\u7cfb\u5e76\u4e14\u5df2\u7ecf\u88ab\u52a0\u4e0a\u7684\u70b9\u5efa\u7acb\u8d77\u6765\uff0c\u67e5\u627e\u8054\u901a\u5757\u662f\u5426\u4e3a $1$ ,\u662f\u8f93\u51fa $YES$ \uff0c\u5426\u5219\u8f93\u51fa $NO$**, \u5176\u4e2d\u4f7f\u7528**\u5e76\u67e5\u96c6**\u8fdb\u884c\u5efa\u7acb\u548c\u67e5\u627e\u8054\u901a\u5757 \uff0c\u7a0d\u7a0d\u6574\u7406\u4e00\u4e0b\u601d\u8def\uff0c\u5e0c\u671b\u540c\u5b66\u4eec\u53ef\u4ee5\u501f\u9274\u601d\u8def\u800c\u4e0d\u662f\u501f\u9274\u4ee3\u7801\uff1a\n```\n\u8bfb\u5165\u6570\u636e\n\u5c06\u5220\u70b9\u987a\u5e8f\u4ece\u540e\u5f80\u524d\u626b:\n     \u8bb0\u5f55 node[i] \u8282\u70b9\u5df2\u7ecf\u5efa\u7acb\n     \u8054\u901a\u5757\u4e2a\u6570\u52a01\n     \u626b\u63cf\u6709\u5173 node[i] \u8282\u70b9\u7684\u6240\u6709\u8fb9:\n          \u5982\u679c\u8fb9\u7684\u53e6\u4e00\u7aef\u7684\u8282\u70b9 node[j] \u5df2\u7ecf\u5efa\u7acb:\n              \u5e76\u67e5\u96c6\u5408\u5e76 node[i] \u8282\u70b9\u4e0e node[j]\n              \u8054\u901a\u5757\u4e2a\u6570\u51cf1\n     \u5224\u65ad\u8054\u901a\u5757\u4e2a\u6570\u662f\u5426\u4e3a1:\n           \u6b63\u5047\u5904\u7406\n\u8f93\u51fa\u6570\u636e\n```\n## \u4ee3\u7801\n```cpp\n#include <cstdio>\nusing namespace std;\n#define MAX_N_M 200001\nconst int treem = 30;\nstruct tree1{\n    int father = -1;\n    int node_out[treem],out_t = 0;\n}node[MAX_N_M];\nint built[MAX_N_M],n,m;\nbool win[MAX_N_M],state[MAX_N_M];\nvoid read();\nvoid deal_with();\nint find_father(int x);\ninline int read_int();\nint main(){\n    read();\n    deal_with();\n    return 0;\n}\nvoid read(){\n    n = read_int();\n    m = read_int();\n    for(int i = 1;i <= m;i++){\n        int x,y;\n        x = read_int();\n        y = read_int();\n        node[x].out_t++;\n        node[x].node_out[node[x].out_t] = y;\n        node[y].out_t++;\n        node[y].node_out[node[y].out_t] = x;\n    }\n    for(int i = 1;i <= n;i++)\n        built[i] = read_int();\n}\nvoid deal_with(){\n    int Connected_num = 0;\n    for(int i = n;i >= 1;i--){\n        state[built[i]] = 1;\n        Connected_num++;\n        for(int j = 1;j <= node[built[i]].out_t;j++){\n            if(state[node[built[i]].node_out[j]] == 1){\n                if(find_father(built[i]) != find_father(node[built[i]].node_out[j])){\n                   node[find_father(built[i])].father = find_father(node[built[i]].node_out[j]);\n                   Connected_num--;\n                }\n            }\n        }\n        if(Connected_num != 1)win[i] = 1;\n    }\n    for(int i = 1;i <= n;i++){\n        if(win[i] == 1)\n          printf(\"NO\\n\");\n        else\n          printf(\"YES\\n\");\n    }\n}\nint find_father(int x){\n    if(node[x].father == -1)\n       return x;\n    return node[x].father = find_father(node[x].father);\n}\ninline int read_int()\n{\n\tint X=0; bool flag=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') flag=0; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {X=(X<<1)+(X<<3)+ch-'0'; ch=getchar();}\n\tif(flag) return X;\n\treturn ~(X-1);\n}\n```\n\u4ee3\u7801\u6613\u61c2\uff0c\u5927\u4f6c\u52ff\u55b7\n## \u540e\u8bb0\n$Updata \\ 2020.9.1 :$ \u5b8c\u6210\u9898\u89e3\uff0c\u6c42\u7ba1\u7406\u5458\u901a\u8fc7",
        "postTime": 1598968442,
        "uid": 355559,
        "name": "FutureThx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "~~\u8d81\u8fd9\u9053\u9898\u8fd8\u6ca1\u51e0\u4e2a\u4eba\u53d1\uff0c\u8d76\u7d27\u6c34\u4e00\u7bc7\u9898\u89e3~~\n\n\u9996\u5148\u8fd9\u9053\u9898\u5c31\u662f\u5f88\u6b63\u5e38\u5730\u7ed9\u4f60\u51e0\u6761\u8fb9\uff0c\u9700\u8981\u8fde\u8d77\u6765\uff0c\u8fd9\u4e48\u770b\u6765\u8fd8\u662f\u5f88\u7b26\u5408\u5e76\u67e5\u96c6\u7684\u3002\u4f46\u662f\u5f80\u540e\u770b\uff0c\u8fd8\u8981\u5220\u70b9\uff0c\u8fd9\u79cd\u64cd\u4f5c\u5e76\u67e5\u96c6\u662f\u5f88\u5c11\u7684\uff0c\u4e0d\u597d\u5f04\u3002\u4f46\u662f\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u597d\u641e\u554a\uff0c\u6211\u4eec\u5c31\u60f3\u7740\u628a\u5220\u9664\u6362\u4f4d\u5408\u5e76\n\n\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\u4e5f\u90fd\u8bb2\u4e86\uff0c\u6211\u4eec\u5012\u5e8f\u679a\u4e3e\u5220\u70b9\u7684\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4ece\u540e\u5f80\u524d\u6bcf\u6b21\u5408\u5e76\u70b9\uff0c\u518d\u53bb\u5224\u65ad\u52a0\u4e86\u8fd9\u4e2a\u70b9\u4e4b\u540e\u662f\u5426\u8fde\u901a\u3002\u5982\u679c\u5168\u90e8\u8fde\u901a\u7684\u8bdd\uff0c\u90a3\u8054\u901a\u5757\u6570\u91cf\u4e3a1\u7684\u8bdd\uff0c\u90a3\u5c31\u8bf4\u660e\u8054\u901a\u4e86\uff1b\u5927\u4e8e1\u7684\u8bdd\uff0c\u8bf4\u660e\u80af\u5b9a\u6709\u4e9b\u5730\u65b9\u88ab\u5206\u5f00\u4e86\n\n\u7136\u540e\u5404\u4f4d\u5927\u4f6c\u90fd\u662f\u7528\u7684\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\u7684\u8fb9\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u5c31\u7528vector\u5b58\u8fb9\uff0c\u4f46\u662f\u8003\u8bd5\u8fd8\u662f\u6700\u597d\u7528\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u80fd\u4e0d\u7528STL\u5c31\u4e0d\u7528STL\uff0c\u867d\u7136STL\u786e\u5b9e\u5f88\u9999\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int> e[200005];\nint f[200005];\nint m,n;\nint find(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n}\nint merge(int x,int y){\n\tif(find(x)==find(y)) return 0;\n\tf[find(x)]=find(y);\n\treturn 1;\n}  //\u6807\u51c6\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c \nint l,r;\nint del[200005]; //\u5220\u9664\u7684\u70b9 \nint sum; //\u8054\u901a\u5757\u6570\u91cf \nbool ok[200005]; //\u662f\u5426\u5168\u90e8\u8fde\u901a \nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&l,&r);\n\t\te[l].push_back(r);\n\t\te[r].push_back(l);\n\t} //vector\u5b58\u50a8\u8fb9\uff0c\u662f\u53cc\u5411\u5b58\u50a8 \n\tfor(register int i=1;i<=n;i++) scanf(\"%d\",&del[i]);\n\tfor(register int i=n;i>=1;i--){ //\u5012\u5e8f\u679a\u4e3e\u5220\u9664\u70b9 \n\t\tint x=del[i];\n\t\tf[x]=x; //\u521d\u59cb\u5316 \uff0c\u5982\u679c\u5728\u4e4b\u524d\u5168\u90e8\u521d\u59cb\u5316\u4e86\uff0c\u4e0d\u597d\u5224\u65ad\u662f\u5426\u679a\u4e3e\u8fc7 \n\t\t++sum; //\u52a0\u4e00\u4e2a\u70b9\uff0c\u8054\u901a\u5757\u6570\u91cf++\uff0c\u4e4b\u540e\u518d\u8fdb\u884c\u64cd\u4f5c \n\t\tfor(vector<int>::iterator it=e[x].begin();it!=e[x].end();it++){\n\t\t\tint y=*it;\n\t\t\tif(!f[y]) continue; //\u5982\u679c\u8fd8\u6ca1\u6709\u52a0\u8fd9\u4e2a\u70b9\uff0c\u56e0\u4e3a\u4e4b\u524d\u7684\u521d\u59cb\u5316 \n\t\t\tsum-=merge(x,y); //\u5982\u679c\u53ef\u4ee5\u8fde\u901a\uff0c\u5408\u5e76\u4e4b\u540e\u8054\u901a\u5757-- \n\t\t}\n\t\tif(sum<=1) ok[i]=true; //\u8054\u901a\u5757\u4e3a1\u7684\u8bdd\uff0c\u8bf4\u660e\u5168\u90e8\u8fde\u901a \n\t}\n\tfor(register int i=1;i<=n;i++){ //\u6b63\u5e8f\u8f93\u51fa \n\t\tif(ok[i]==true) puts(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1592448570,
        "uid": 113537,
        "name": "Poetic_Rain",
        "ccfLevel": 0,
        "title": "P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "\u521d\u770b\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u60f3\u5230\u8fd9\u662f\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u8981\u7ef4\u62a4\u5b83\u662f\u5426\u662f\u5168\u8054\u901a\u7684\u3002\n\n\u6bcf\u4e00\u6b21\u53bb\u70b9\u7684\u64cd\u4f5c\u540e\uff0c\u56fe\u7684\u8fde\u901a\u6027\u90fd\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u8fd9\u4e48\u4e00\u6765\uff0c\u6211\u4eec\u5728\u6bcf\u4e00\u6b21\u64cd\u4f5c\u540e\u90fd\u8981\u6765\u7ef4\u62a4\u4e00\u904d\uff0c\u5f00\u9500\u8fc7\u4e8e\u5e9e\u5927\uff0c\u7528\u4f20\u7edf\u7684bfs\u7684\u65b9\u6cd5\u4f1a\u98d9\u5230$O(n^2)$\uff0c\u5f53\u7136\u53ef\u80fd\u6709\u66f4\u5feb\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u4e0d\u505a\u8ba8\u8bba\u3002\n\n\u8be2\u95ee\u56fe\u8054\u901a\u7684\u95ee\u9898\u662f\u5f88\u7ecf\u5178\u7684\uff0c\u6211\u4eec\u5c1d\u8bd5\u7528\u719f\u6089\u7684\u51b0\u8336\u59ec\uff08\u5e76\u67e5\u96c6\uff09\u53bb\u505a\uff0c\u4f46\u53d1\u73b0\u51b0\u8336\u59ec\u662f\u505a\u4e0d\u4e86\u5220\u9664\u64cd\u4f5c\u7684\u3002\n\n\u6211\u4eec\u5f00\u52a8\u53f3\u8111\u7684\u9006\u5411\u601d\u7ef4\u7ec6\u80de\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\uff0c\u4e00\u5171N\u4e2a\u70b9\u5220\u9664N\u6b21\uff0c\u4ece\u540e\u5f80\u524d\u770b\u7684\u8bdd\u5176\u5b9e\u662f\u4e00\u4e2a\u4e0d\u65ad\u7684\u52a0\u70b9\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5012\u5e8f\u679a\u4e3e\u7136\u540e\u7528\u5e76\u67e5\u96c6\u89c2\u5bdf\u56fe\u7684\u8fde\u901a\u6027\u5c31\u53ef\u4ee5\u3002\n\n\u6211\u8fd9\u91cc\u9009\u62e9\u4e86\u8bb0\u5f55\u5408\u5e76\u6b21\u6570\u3002\u5012\u5e8f\u679a\u4e3ei\u65f6\uff0c\u6211\u4eec\u6709\u7684\u70b9\u4e00\u5171\u662fn-i\u4e2a\u3002\u56e0\u4e3a\u521a\u5f00\u59cb\u534a\u4e2a\u70b9\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u5f53\u4e14\u4ec5\u5f53\u56fe\u662f\u5168\u8054\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u5408\u5e76\u6b21\u6570\u624d\u4f1a\u7b49\u4e8e\u70b9\u6570\uff0c\u8fd9\u5c31\u662f\u90a3\u4e2a\u5224\u65ad\u7684\u542b\u4e49\u3002\n\u8fd9\u91cc\u5982\u679c\u6709\u95ee\u9898\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u79c1\u4fe1\u91cc\u5411\u6211\u63d0\u95ee\n```cpp\n\tfor(ri i=n;i>=1;i--)\t\t\t//\u5012\u5e8f\u679a\u4e3e \n\t{\n\t\tvis[open[i]]=1;\n\t\tint u=open[i];\n\t\tfor(ri j=head[u]; j; j=e[j].next)\n\t\tif(vis[e[j].to])\t\t\t//\u7ef4\u62a4\u8fde\u901a\u6027 \n\t\t{\n\t\t\tint v=e[j].to;\n\t\t\tif(find(u)!=find(v))\n\t\t\t{\n\t\t\t\tsum++;\t\t\t\t//\u8bb0\u5f55\u5408\u5e76\u6b21\u6570 \n\t\t\t\tun(u,v);\n\t\t\t}\n\t\t}\n\t\tif(sum==n-i)\tans.push(\"YES\\n\");\n\t\telse\t\t\tans.push(\"NO\\n\");\t\n\t}\n```\n\n\n\u6211\u8fd9\u91cc\u8111\u5b50\u62bd\u4e86\u7528\u4e86\u4e00\u4e2a\u6808\u53bb\u5b58\u50a8\u7b54\u6848\uff0c\u5b9e\u9645\u4e0a\u6709\u5f88\u5927\u7684\u53ef\u80fd\u4f1a\u7206\u7a7a\u95f4\uff0c\u4ec5\u505a\u53c2\u8003\u3002\n\n\u4ee5\u4e0b\u662fAC\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#include<stack>\n#define ri register int\nusing namespace std;\nstruct Edge{\n\tint to;\n\tint next;\n}e[400040];\nint fa[200020];\nint n,m;\nint head[200020],cnt;\nint open[200020],vis[200020],sum;\nstack <string> ans;\nvoid add_edge(int from,int to)\n{\n\te[++cnt].to=to;\n\te[cnt].next=head[from];\n\thead[from]=cnt;\n}\nint find(int x)\n{\n\treturn (x==fa[x])?x:fa[x]=find(fa[x]);\n}\nvoid un(int x,int y)\n{\n\tfa[find(x)]=find(y);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(ri i=1;i<=n;i++)\t\t\t//\u521d\u59cb\u5316\u51b0\u8336\u59ec \n\tfa[i]=i;\n\tfor(ri i=1;i<=m;i++)\t\t\t//\u5b58\u56fe \n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tfor(ri i=1;i<=n;i++)\n\tscanf(\"%d\",&open[i]);\n\tfor(ri i=n;i>=1;i--)\t\t\t//\u5012\u5e8f\u679a\u4e3e \n\t{\n\t\tvis[open[i]]=1;\n\t\tint u=open[i];\n\t\tfor(ri j=head[u]; j; j=e[j].next)\n\t\tif(vis[e[j].to])\t\t\t//\u7ef4\u62a4\u8fde\u901a\u6027 \n\t\t{\n\t\t\tint v=e[j].to;\n\t\t\tif(find(u)!=find(v))\n\t\t\t{\n\t\t\t\tsum++;\t\t\t\t//\u8bb0\u5f55\u5408\u5e76\u6b21\u6570 \n\t\t\t\tun(u,v);\n\t\t\t}\n\t\t}\n\t\tif(sum==n-i)\tans.push(\"YES\\n\");\n\t\telse\t\t\tans.push(\"NO\\n\");\t\n\t}\n\twhile(!ans.empty())\n\t{\n\t\tcout<<ans.top();\n\t\tans.pop();\n\t}\n}\n```\n\n",
        "postTime": 1605249549,
        "uid": 279288,
        "name": "No_wonder",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "## \u7b97\u6cd5\u9009\u62e9\n\u9996\u5148\u6211\u4eec\u62ff\u5230\u9898\u76ee\uff0c\u53d1\u73b0\u662f\u6c42\u8fde\u901a\u95ee\u9898\u7684\uff0c\u90a3\u6211\u4eec\u9996\u5148\u4f1a\u60f3\u5230**\u5e76\u67e5\u96c6**\u548c**tarjan**\u3002\u4f46\u662f\u7531\u4e8e\u6570\u636e\u8303\u56f4\u7684\u539f\u56e0\u6211\u4eec\u9009\u7528\u5e76\u67e5\u96c6\uff08\u65b9\u4fbf\u7edf\u8ba1\u8fde\u901a\u5757\u4e2a\u6570\uff09\u3002\n\n\n## \u64cd\u4f5c\u96be\u70b9\n\u5bf9\u4e8e\u9898\u76ee\u4e2d\u6d89\u53ca\u7684\u64cd\u4f5c\u4f20\u7edf\u7684\u5e76\u67e5\u96c6\u53ea\u652f\u6301\u5408\u5e76\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u5220\u70b9\u7684\u64cd\u4f5c\u3002\u9898\u76ee\u4e2d\u63d0\u5230\n```\n\u5f53\u4e00\u4e2a\u8c37\u4ed3\u88ab\u5173\u95ed\u4e86\uff0c\u6240\u6709\u7684\u8fde\u63a5\u5230\u8fd9\u4e2a\u8c37\u4ed3\u7684\u9053\u8def\u90fd\u4f1a\u88ab\u5173\u95ed\uff0c\u800c\u4e14\u518d\u4e5f\u4e0d\u80fd\u591f\u88ab\u4f7f\u7528\u3002\n```\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u5c06\u5220\u70b9\u7684\u64cd\u4f5c\u53d8\u4e3a**\u5012\u5e8f\u52a0\u70b9**\u7684\u64cd\u4f5c\u3002\n\n\u4f8b\u5982\uff1a\n\n```\n\u5220\u70b9\uff1a1,2,3,4\n\n\u53ef\u8f6c\u6362\u4e3a\u53cd\u5411\u52a0\u70b9\uff1a4,3,2,1\n\n\u6bd4\u5982\u6211\u5728\u5220\u70b91\u65f6\uff0c\u5b9e\u9645\u4e0a\u70b92,3,4\u8fd8\u5728(\u4e5f\u5c31\u662f\u65f6\u5019\u6211\u52a0\u70b94,3,2\u65f6\u76f8\u5f53\u4e8e\u5220\u6389\u70b91)\u3002\u5f53\u6211\u5220\u70b92\u65f6\uff0c\u70b93,4\u8fd8\u5728\uff08\u4e5f\u5c31\u662f\u65f6\u5019\u6211\u52a0\u70b94,3\u65f6\u76f8\u5f53\u4e8e\u5220\u6389\u70b91\u548c\u70b92)\u3002\n```\n\u4ee5\u6b64\u7c7b\u63a8\u5373\u53ef\u8bc1\u660e**\u6b63\u5e8f\u5220\u70b9=\u5012\u5e8f\u52a0\u70b9**\u7684\u6b63\u786e\u6027\u3002\n\n## \u601d\u7ef4\u8fc7\u7a0b\n\u6211\u4eec\u53ef\u4ee5\u5148\u5047\u8bbe\u539f\u6765\u7684\u56fe\u662f\u7a7a\u7684\uff0c\u6bcf\u52a0\u4e0a\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u5148\u628a\u8fde\u901a\u5757\u6570\u52a0$1$\u3002\u518d\u626b\u63cf\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u3002\u5982\u679c\u8fde\u63a5\u7684\u70b9\u5df2\u7ecf\u88ab\u52a0\u8fc7\u4e86\uff08\u5373\u5df2\u7ecf\u5728\u56fe\u4e0a\uff09\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u8fde\u901a\u5757\u7684\u4e2a\u6570\u5c31\u51cf$1$\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int M=2e5+5;\nbitset <M> check,ans;\nint pre[M],n,m,head[M],cnt,cl[M],sum;\nstruct pp{\n\tint to,next;\n}p[M*2-5];\ninline int read(){\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nvoid add(int x,int y){\n\tp[++cnt].to=y;\n\tp[cnt].next=head[x];\n\thead[x]=cnt;\n}\nint f(int x){\n\tif(pre[x]==x) return x;\n\telse return pre[x]=f(pre[x]);\n}\nint main(){\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<=n;i++) pre[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tx=read();\n\t\ty=read();\n\t\tadd(x,y);add(y,x);//\u53cc\u5411\u5efa\u8fb9\n\t}\n\tfor(int i=1;i<=n;i++) cl[i]=read();//\u5148\u8bfb\u5165\u8981\u5173\u95ed\u7684\u519c\u573a\n\tfor(int i=n;i>=1;i--){//\u5012\u5e8f\u52a0\u70b9\n\t\tsum++;//\u5047\u8bbe\u591a\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u540e\u9762\u518d\u5224\u65ad\u662f\u5426\u80fd\u5408\u5e76\n\t\tcheck[cl[i]]=1;//\u8be5\u70b9\u88ab\u52a0\u4e0a\uff08\u6ce8\u610f\uff0c\u8fd9\u662f\u52a0\u70b9\u64cd\u4f5c\uff09\uff0c\u6807\u8bb0\n\t\tfor(int j=head[cl[i]];j;j=p[j].next){//\u67e5\u770b\u8be5\u70b9\u7684\u8fb9\n\t\t\tint l=f(cl[i]),r=f(p[j].to);//\u67e5\u770b\u4e24\u70b9\u662f\u5426\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\n\t\t\tif(check[p[j].to]&&l!=r){//\u5982\u679c\u80fd\u94fe\u63a5\u4e14\u5728\u56fe\u4e0a\n\t\t\t\tpre[l]=r;//\u94fe\u63a5\n\t\t\t\tsum--;//\u5c11\u4e00\u4e2a\u8fde\u901a\u5757\n\t\t\t}\n\t\t}\n\t\tif(sum==1) ans[i]=true;//\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5168\u90e8\u8fde\u901a\uff0c\u8bb0\u5f55\u7b54\u6848\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(ans[i]) cout<<\"YES\"<<endl;\n\t\telse cout<<\"NO\"<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1602043799,
        "uid": 329866,
        "name": "dzdolrc",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "## \u9898\u610f:\n\u8fd9\u4e2a\u519c\u573a\u4e00\u5171\u6709\u88ab\u7528 M\u6761\u53cc\u5411\u9053\u8def\u8fde\u63a5\u7684 N\u4e2a\u8c37\u4ed3\uff0c\u9898\u76ee\u4f1a\u5148\u8f93\u5165M\u6761\u53cc\u5411\u7684\u8fb9\uff0c\u518d\u8f93\u5165\u8fd9N\u4e2a\u8c37\u4ed3\u7684\u5173\u95ed\u987a\u5e8f\uff0c\u5224\u65adN\u6b21\u5173\u95ed\u540e\u662f\u5426\u662f\u8fde\u901a\u56fe\u3002\n## \u505a\u6cd5\uff1a\n\u8fd9\u9898\u7528\u5e76\u67e5\u96c6\u548c\u94fe\u8868\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u94fe\u8868\u7528\u6765\u5b58\u5404\u4e2a\u70b9\u7684\u8fb9\uff0c\u5e76\u67e5\u96c6\u662f\u7528\u6765\u5224\u65ad\u6240\u6709\u70b9\u662f\u4e0d\u662f\u8fde\u901a\u7684\u3002\u5982\u679c\u4e00\u5f00\u59cb\u5c31\u5b58\u597d\u4e86\u6574\u4e2a\u56fe\uff0c\u8fb9\u5220\u9664\u8fb9\u8fb9\u5224\u65ad\u662f\u5426\u8fde\u901a\u7684\u8bdd\u6bd4\u8f83\u96be\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5012\u7740\u6765\u7684\u65b9\u6cd5\u6765\u5224\u65ad\uff0c\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u8fb9\u52a0\u70b9\u8fb9\u5224\u65ad\uff0c\u5c31\u4f1a\u7b80\u5355\u8bb8\u591a\u3002\n## \u5e76\u67e5\u96c6\n\u5e76\u67e5\u96c6\u76ee\u524d\u6211\u4f1a\u7684\u5c31\u662f\u4e24\u4e2a\u51fd\u6570\u548c\u4e24\u4e2a\u6570\u7ec4\uff0cfather[x]\u8868\u793ax\u7684\u7236\u8282\u70b9\u662f\u4ec0\u4e48\uff0c\u4e0d\u77e5\u9053\u7684\u53ef\u4ee5\u770b\u4e66\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002size[x]\u8868\u793a\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u8282\u70b9\u6570\u91cf\u3002find\uff08x\uff09\u5c31\u662f\u6c42x\u6240\u5904\u7684\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c\u5982\u679cx\u548cy\u7528find\uff08x\uff09\u540e\u7684\u503c\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u8fd8\u6709\u4e00\u4e2amerge\uff08x,y\uff09\u51fd\u6570\uff0c\u5c31\u662f\u628ax\u548cy\u8fd9\u4e24\u4e2a\u6811\u6709\u4e00\u4e2a\u8fb9\uff0c\u90a3\u4e48\u5c31\u628a\u4ed6\u4eec\u7ed3\u5408\uff0c\u5f62\u6210\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u8be6\u7ec6\u505a\u6cd5\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u7a0b\u5e8f\uff08\u5199\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u4e5f\u662f\u4e2a\u65b0\u624b\uff09\u3002\n## \u7a0b\u5e8f\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint tot,head[200005],to[400010],ne[400010];\nint d[200005];\nint father[200005],size[200005];\nint ok[200005];\nvoid jiabian(int x,int y)\n{\n\t++tot;\n\tto[tot]=y;\n\tne[tot]=head[x];\n\thead[x]=tot;\n}//\u94fe\u8868\u5b58\u8fb9\uff0c\u521a\u5b66\u4f1a\uff0c\u7528\u7684\u8fd8\u662f\u6a21\u677f \nint find(int x){return x==father[x]?x: father[x]=find(father[x]);}//find\u51fd\u6570\uff0c\u7528\u5230\u4e86\u8def\u5f84\u538b\u7f29\uff0c\u5c31\u662f\u5728\u5bfb\u627e\u6839\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u5c06\u8fd9\u4e2a\u6811\u7684\u9ad8\u5ea6\u51cf\u5c11 \nint merge(int x, int y)\n{\n\tx=find(x);\n\ty=find(y);\n    if(x==y) return 0;//\u5148\u5bfb\u627e\u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\uff0c\u5982\u679c\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5c31\u4e0d\u7528\u51cf\u5c11\u8fde\u901a\u5757\u7684\u603b\u6570\u4e86 \n    if(size[x] < size[y])\n       father[x]=y,size[y]+=size[x];\n    else father[y]=x,size[x]+=size[y];\n    return 1; \n}//\u7ed3\u5408 \nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint a,b;\n\tfor(int i=1;i<=m;++i)\n\t    scanf(\"%d%d\",&a,&b),jiabian(a,b),jiabian(b,a);//\u53cc\u5411\u7684 \n\tfor(int i=1;i<=n;++i)\n\t    scanf(\"%d\",&d[i]);\n\tint k=0;//\u8bb0\u5f55\u5f53\u524d\u8fde\u901a\u5757\u7684\u6570\u91cf \n\tfor(int i=n;i>=1;--i)\n\t{\n\t\tint x=d[i];\n\t\tfather[x]=x;\n\t\tsize[x]=1;\n\t\t++k;\n\t\tfor(int j=head[x];j;j=ne[j])\n\t\t{\n\t\t\tint y=to[j];\n\t\t\tif(!father[y]) continue;//\u5982\u679c\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u88ab\u52a0\u5165\uff0c\u5c31\u76f4\u63a5\u8df3\u8fc7 \n\t\t\tk -= merge(x, y); \n\t\t}\n\t\tif(k<=1) ok[i]=1; \n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tputs(ok[i]? \"YES\":\"NO\");\n\treturn 0;\n } \n```\n",
        "postTime": 1586787994,
        "uid": 196538,
        "name": "LikC1606",
        "ccfLevel": 7,
        "title": "P6121 [USACO16OPEN]Closing the Farm G"
    },
    {
        "content": "\u672c\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a**\u5e76\u67e5\u96c6\u6a21\u677f\u9898**\uff0c\u53ea\u662f\u9700\u8981\u7a0d\u5fae\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\u3002\n\n\u6240\u8c13\u5e76\u67e5\u96c6\uff0c\u5c31\u662f\u4e00\u4e2a\u5408\u5e76\u4e0e\u67e5\u627e\u7684\u96c6\u5408\uff0c\u5e76\u67e5\u96c6\u5408\u5e76\u8282\u70b9\u65f6\u975e\u5e38\u5bb9\u6613\uff0c\u4f46\u662f\u5220\u9664\u8282\u70b9\u65f6\u5c31\u5f88\u590d\u6742\u4e86\uff01\u800c\u672c\u9898\u4e2d\u7684**\u5173\u95ed\u519c\u573a**\uff0c\u5176\u5b9e\u5c31\u662f\u8981\u6211\u4eec**\u5220\u9664\u8282\u70b9**\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u540c\u4e00\u79cd\u9006\u5e8f\u601d\u60f3\uff1a\u5047\u8bbe\u6bcf\u4e2a\u519c\u573a\u5148**\u90fd\u662f\u5173\u95ed\u7684**\uff08\u5373\u6709n\u4e2a\u8fde\u901a\u5757\uff09\uff0c\u5f53\u6253\u5f00\u4e00\u4e2a\u519c\u573a\u65f6\u6211\u4eec\u518d**\u8fde\u8fd9\u4e2a\u519c\u573a\u4e0e\u4e4b\u524d\u6253\u5f00\u7684\u519c\u573a\u6709\u5173\u7684\u8fb9**\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u591a\u4e86\u3002\u5982\u679c\u770b\u4e0d\u61c2\uff0c\u5f85\u4f1a\u513f\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u81f3\u4e8e\u8fde\u8fb9\u7684\u8bdd\uff0c\u6211\u4eec\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u8282\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u5373**\u5176\u7236\u4eb2\u662f\u5426\u76f8\u540c**\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline int find(int x){return x==f[x]?x:f[x]=find(f[x]);}//\u5e76\u67e5\u96c6\u6807\u690e\u51fd\u6570\ninline void ff(int u){//\u8fde\u8fb9\u627e\u7236\u4eb2\uff08find father\uff09\n\tp=find(u);\n\tfor(RI i=h[u];i;i=a[i].n){\n\t\tv=a[i].t;\n\t\tif(!b[v]){//\u5224\u65ad\u6b64\u519c\u573a\u662f\u5426\u5df2\u7ecf\u6253\u5f00\n\t\t\tq=find(v);\n\t\t\tif(p!=q) f[q]=p,--now;//\u7236\u4eb2\u4e0d\u540c\u5219\u53d8\u4e3a\u76f8\u540c\uff0c\u8fde\u901a\u5757\u4e2a\u6570\u51cf1\u3002\n\t\t}\n\t}\n}\n```\n\u63a5\u7740\u662f\u9006\u5e8f\u6253\u5f00\u519c\u573a\uff1a\n```cpp\nfor(RI i=1;i<=n;i=-~i) f[i]=i,b[i]=1;//\u521d\u59cb\u5316\uff0c\u6240\u6709\u519c\u573a\u7684\u5148\u5173\u95ed\u3002\nfor(RI i=n;i>0;--i){\n\t\tb[gb[i]]=0;//\u6253\u5f00\u6b64\u519c\u573a\n\t\tff(gb[i]);//\u8fde\u8fb9\n\t\tans[i]=now-i+1;//\u7b54\u6848\u4e3a\u73b0\u5b58\u8fde\u901a\u5757\u6570\u51cf\u53bb\u5173\u95ed\u7684\u519c\u573a\u4e2a\u6570\uff0c\u56e0\u4e3a\u662f\u6bcf\u4e00\u6b21\u5173\u95ed\u8c37\u4ed3\u4e4b\u524d\u7684\u8fde\u901a\u5757\u6570\u91cf\uff0c\u6240\u4ee5\u8981\u52a01\u3002\n\t}\n```\n\n```cpp\n#include<bits/stdc++.h>\n#define RI register int\nusing namespace std;\nconst int N=2e5+3;\nstruct wu{\n\tint n,t;\n}a[N<<1];\nint f[N],t,h[N],gb[N],ans[N],u,v,p,q,now;bool b[N];\ninline int find(int x){return x==f[x]?x:f[x]=find(f[x]);}\ninline void add(int u,int v){\n\tt=-~t;a[t].t=v;\n\ta[t].n=h[u];h[u]=t;\n}\ninline void ff(int u){\n\tp=find(u);\n\tfor(RI i=h[u];i;i=a[i].n){\n\t\t\tv=a[i].t;\n\t\t\tif(!b[v]){\n\t\t\t\tq=find(v);\n\t\t\t\tif(p!=q) f[q]=p,--now;\n\t\t\t}\n\t\t}\n}\nint main(){\n\tRI n,m,k;\n\tscanf(\"%d%d\",&n,&m);now=n;\n\tfor(RI i=1;i<=m;i=-~i){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);//\u6ce8\u610f\u662f\u53cc\u5411\u8fb9\n\t}\n\tfor(RI i=1;i<=n;i=-~i)\n\t\tscanf(\"%d\",&gb[i]);\n\tfor(RI i=1;i<=n;i=-~i) f[i]=i,b[i]=1;\n\tfor(RI i=n;i>0;--i){\n\t\tb[gb[i]]=0;\n\t\tff(gb[i]);\n\t\tans[i]=now-i+1;\n\t}\n\tfor(RI i=1;i<=n;i=-~i)\n\t\tputs(ans[i]==1?\"YES\":\"NO\");//\u5168\u8fde\u901a\u65f6\u8fde\u901a\u5757\u7684\u4e2a\u6570\u4e3a1\n\treturn 0; \n}\n```",
        "postTime": 1611368139,
        "uid": 133037,
        "name": "_OccDreamer_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6\u5957\u8def\u9898\uff0c\u6b63\u7740\u5220\u8fb9\u53ef\u4ee5\u8f6c\u5316\u4e3a\u53cd\u7740\u52a0\u8fb9\uff0c\u6ce8\u610f\uff0c\u4e00\u6761\u9053\u8def\u53ef\u4ee5\u901a\u884c\u7684\u6761\u4ef6\u662f\u8fd9\u6761\u8fb9\u7684\u4e24\u7aef\u70b9\u7684\u8c37\u4ed3\u90fd\u5f00\u7740\uff0c\u56e0\u4e3a\u53ea\u8981\u6709\u4e00\u4e2a\u5173\u7740\uff0c\u8fd9\u6761\u9053\u8def\u5c31\u88ab\u5173\u4e86\u3002\u6240\u4ee5\u5408\u5e76\u7684\u6761\u4ef6\u662f\u4e24\u7aef\u70b9\u8c37\u4ed3\u90fd\u5f97\u5f00\u7740\u3002\n\n\u5982\u4f55\u5224\u65ad\u5168\u8054\u901a\u5462\uff1f\u6211\u4eec\u6bcf\u5408\u5e76\u4e00\u6b21\uff0c $tot$ \u5c31\u52a0\u4e00\uff0c\u5982\u679c $tot=n-i$ \uff0c\u4e5f\u5c31\u662f $i$ \u4e2a\u8c37\u4ed3\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u56fe\u4e86\uff0c\u90a3\u4e48\u5c31\u6ee1\u8db3\u8981\u6c42\u4e86\u3002\u8fd9\u91cc\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u540e\u5f80\u524d\u64cd\u4f5c\u7684\uff0c\u6240\u4ee5\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u4e5f\u8981\u5012\u7740\u8f93\u51fa\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,idx,tot;\nint head[200010],t[200010],ok[200010],fa[200010];\nstruct node{\n\tint nxt,to;\n}edge[400010];\nvector<int> g;\nvoid add(int u,int v)\n{\n\tedge[++idx].nxt=head[u];\n\tedge[idx].to=v;\n\thead[u]=idx;\n}\nint find(int x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n    }\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;\n\t\tscanf(\"%d\",&t[i]);\n\t}\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\tok[t[i]]=1;//\u5f00 \n\t\tfor(int j=head[t[i]];j;j=edge[j].nxt)\n\t\t{\n\t\t\tint v=edge[j].to;\n\t\t\tif(ok[v])\n\t\t\t{\n\t\t\t\tint fx=find(t[i]);\n\t\t\t\tint fy=find(v);\n\t\t\t\tif(fx==fy)\n\t\t\t\tcontinue;\n\t\t\t\tfa[fx]=fy;\n\t\t\t\ttot++;\n\t\t\t}\n\t\t}\n\t\tif(tot==n-i)//\u5982\u679c\u5f53\u524d\n\t\tg.push_back(1);\n\t\telse g.push_back(2);\n\t}\n\treverse(g.begin(),g.end());\n\tfor(int i=0;i<g.size();i++)\n\t{\n\t\tif(g[i]==1)\n\t\tputs(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n\treturn 0;\n}",
        "postTime": 1608796444,
        "uid": 250699,
        "name": "Herkaii",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    },
    {
        "content": "# \u5e76\u67e5\u96c6\n\n\u663e\u7136\u66b4\u529b\u5220\u8fb9\u4e0d\u600e\u4e48\u53ef\u505a\uff08\u5427\n\n\u4e8e\u662f\u60f3\u8c61\u4e00\u4e0bFarmer John\u65c5\u884c\u56de\u6765\u4e4b\u540e\u9006\u5e8f\u5730\u4e00\u4e2a\u4e00\u4e2a\u628a\u8c37\u4ed3\u91cd\u65b0\u5f00\u8d77\u6765\uff08\uff1f\n\n\u5c31\u53d8\u6210\u4e86\u4e00\u9053\u88f8\u7684\u5e76\u67e5\u96c6\u4e86\n\n\u6700\u540e\u5012\u5e8f\u8f93\u51fa\u7b54\u6848\u5c31\u884c\n\n~~\u6216\u8005\u76f4\u63a5\u5012\u7740\u5b58~~\n\n~~\u53cc\u500d\u7ecf\u9a8c[P1197 [JSOI2008]\u661f\u7403\u5927\u6218](https://www.luogu.com.cn/problem/P1197)~~\n\n\u552f\u4e00\u7684\u5dee\u522b\u662f\u4e00\u4e2a\u6c42\u7684\u662f\u8fde\u901a\u5757\u4e2a\u6570\u662f\u5426\u4e3a\u4e00\uff0c\u4e00\u4e2a\u8981\u8f93\u51fa\u8fde\u901a\u5757\u7684\u4e2a\u6570\uff0c\u601d\u8def\u90fd\u662f\u51cf\u8fb9->\u52a0\u8fb9\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint used[200001], q[200001], fa[200001], ans[200001];\nint head[200001], nxt[400001], to[400001], tot;\nvoid add(int x, int y)\n{\n    nxt[++tot] = head[x];\n    head[x] = tot;\n    to[tot] = y;\n}\nint find(int x)\n{\n    if(fa[x] == x) return x;\n    return fa[x] = find(fa[x]);\n}\nint main()\n{\n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= m; i++)\n    {\n        int x, y;\n        cin >> x >> y;\n        add(x, y);\n        add(y, x);\n    }\n    for(int i = 1; i <= n; i++)\n        fa[i] = i;\n    for(int i = 1; i <= n; i++)\n    {\n        cin >> q[i];\n    }\n    int sum = 0;\n    for(int i = n; i >= 1; i--)\n    {\n        sum++;\n        used[q[i]] = 1;\n        int fx = find(q[i]);\n        for(int j = head[q[i]]; j; j = nxt[j])\n        {\n            int y = to[j];\n            int fy = find(y);\n            if(fx != fy)\n            {\n                fa[fy] = fx;\n                if(used[y]) sum--;\n            }\n        }\n        if(sum == 1) ans[i] = 1;\n    }\n    for(int i = 1; i <= n; i++)\n    {\n        cout << ((ans[i] == 1) ? \"YES\\n\" : \"NO\\n\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1604035263,
        "uid": 75954,
        "name": "AuCloud",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6121 \u3010[USACO16OPEN]Closing the Farm G\u3011"
    }
]