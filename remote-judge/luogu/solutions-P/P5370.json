[
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u5927\u529b\u51fa\u5947\u8ff9\u7684\u9898\u3002\n\n\u9996\u5148\u9898\u76ee\u7684 $\\mathrm{mod}\\ 998244353$ \u662f\u6765\u5413\u4eba\u7684\u3002\u5176\u5b9e\u5728\u53bb\u6389 $3$ \u4e4b\u540e\uff0c \u4e5d\u6761\u53ef\u601c\u7684\u724c\u81f3\u591a\u53ea\u6709\u51e0\u767e\u4e07\u79cd\uff0c\u56e0\u6b64\u5b8c\u5168\u53ef\u4ee5\u679a\u4e3e\u4e5d\u6761\u53ef\u601c\u7684\u724c\uff0c\u7136\u540e\u66b4\u529b\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\n\n\u5982\u4f55\u5224\u65ad\u662f\u5426\u53ef\u884c\u5462\uff1f\u660e\u786e\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u987a\u5b50\u662f\u65e0\u7528\u7684\uff0c\u53ef\u4ee5\u62c6\u6210\u5355\u724c\u3002\u4e8e\u662f\u4e0d\u9700\u641c\u987a\u5b50\uff0c\u9996\u5148\u641c\u7d22\u4e09\u4e2a\u548c\u56db\u4e2a\u7684\u6570\u91cf\uff08\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u5e26\u724c\uff09\uff1b\u7136\u540e\u679a\u4e3e\u6709\u51e0\u4e2a\u4e09\u5e26\u5bf9\uff0c\u5269\u4e0b\u7684\u5168\u90e8\u4e09\u5e26\u4e00\u6216\u8005\u56db\u5e26\u4e8c\uff08\u56e0\u4e3a\u5982\u679c\u4e0d\u5e26\uff0c\u5219\u53ef\u4ee5\u62c6\u6210\u5355\u724c\u6765\u6253\uff09\uff0c\u4e5d\u6761\u53ef\u601c\u5e26\u5927\u724c\uff0c\u7f51\u53cb\u5e26\u5c0f\u724c\uff0c\u5269\u4e0b\u7684\u724c\u4ece\u5c0f\u5230\u5927\u626b\u4e00\u904d\uff0c\u770b\u662f\u5426\u53ef\u884c\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5199\u5728~~\u8bc4\u6d4b\u673a\u6781\u6162~~\u7684\u672c\u6821 oj \u4e0a\u8fc7\u4e0d\u53bb\u3002\n\n\u56e0\u6b64\u52a0\u5165\u4ee5\u4e0b\u4f18\u5316\uff1a\n\n1. \u5047\u5982\u8bf4\u8981\u5e26\u7684\u724c\u5df2\u7ecf\u8d85\u8fc7\u4e86 $17$ \u5f20\uff0c\u76f4\u63a5\u8fd4\u56de\uff1b\n2. \u7528 `memset` \u548c `memcpy` \u8ba9\u5e38\u6570\u4e58\u4e0a $\\frac{1}{8}$\uff1b\n3. \u672c\u6765\u201c\u5269\u4e0b\u7684\u724c\u4ece\u5c0f\u5230\u5927\u626b\u4e00\u904d\uff0c\u770b\u662f\u5426\u53ef\u884c\u5373\u53ef\u3002\u201d\u8fd9\u4e00\u90e8\u5206\u6211\u662f\u7528\u7684\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b58\u4e5d\u6761\u53ef\u601c\u7684\uff0c\u4e00\u4e2a\u5b58\u7f51\u53cb\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u6781\u6162\u3002\u6211\u4eec\u53ef\u4ee5\u5dee\u5206\uff0c\u53ea\u7528\u4e00\u4e2a\u6570\u7ec4 $c$\uff0c\u5047\u5982\u4e5d\u6761\u53ef\u601c\u6709 $x$ \u5f20 $y$\uff0c\u5219 $c_{y+1}\\leftarrow c_{y+1}-x$\uff1b\u5047\u5982\u7f51\u53cb\u6709 $z$ \u5f20 $w$\uff0c\u5219 $c_{w}\\leftarrow c_{w}+z$\u3002\u6700\u540e\u505a\u4e00\u904d\u524d\u7f00\u548c\uff0c\u5047\u5982\u6709 $>0$ \u7684\uff0c\u5219\u8bf4\u660e\u4e5d\u6761\u53ef\u601c\u724c\u592a\u591a\u4e86\uff0c\u4e0d\u53ef\u884c\uff1b\u5426\u5219\u53ef\u884c\u3002\u5e38\u6570\u53c8\u4e58\u4e0a $\\frac{1}{2}$\uff1b\n4. \u5047\u5982\u5bf9\u5b50\u6570\u5df2\u7ecf\u8d85\u8fc7\u4e86 $\\min(j,w)$\uff08$j$ \u4e3a\u4e5d\u6761\u53ef\u601c\u7684\u5bf9\u5b50\u6570\uff0c$w$ \u4e3a\u7f51\u53cb\u5bf9\u5b50\u6570\uff09\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u3002\n5. \u4e09\u5f20\u548c\u56db\u5f20\u53ea\u7528\u641c\u5230 `2` \u5c31\u597d\uff0c\u4e0d\u7528\u641c `w` \u548c `W`\u3002\n\n\u52a0\u5165\u4ee5\u4e0b\u4f18\u5316\u540e\uff0c\u5728\u672c\u6821 oj\u3001\u6d1b\u8c37\u3001loj \u4e0a\u5747\u8dd1\u5230\u4e86 Rank 1\u3002\uff08\u6d1b\u8c37\u4e0a\u663e\u793a\u4e3a Rank 2\uff0c\u4f46\u662f\u5176\u5b9e\u6211\u7684\u603b\u7528\u65f6\u6bd4 Rank 1 \u5c11\uff0c\u662f\u603b\u7528\u65f6\u8ba1\u7b97\u673a\u5236\u7684\u95ee\u9898\uff09\n\n\u4ee3\u7801\u76f4\u63a5\u53bb\u770b loj Rank 1 \u5c31\u597d\u3002\u63d0\u4ea4\u8005\u53eb\u505a `2`\u3002",
        "postTime": 1576542881,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5370 \u3010[PKUSC2018]\u4e3b\u6597\u5730\u3011"
    },
    {
        "content": "$\\color{white}\\text{\u4e25\u5389\u8c34\u8d23\u4efb\u4f55\u7684\u76d7\u7a83\u9898\u89e3\u884c\u4e3a}$\n\n## \u66b4\u641c\n\n\u975e\u5e38\u66b4\u529b\u7684\u641c\u7d22\uff0c\u4ee5\u81f3\u4e8e\u6211\u90fd\u4e0d\u76f8\u4fe1\u6211\u80fd\u8fc7\u3002\n\n\u65b9\u6cd5\u662f\uff1a\u66b4\u529b\u679a\u4e3e\u6240\u6709\u724c\u578b\uff0c\u7136\u540e\u66b4\u529b\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\n\n## \u66b4\u529b\u679a\u4e3e\u90e8\u5206:\n\n\u975e\u5e38\u66b4\u529b\uff1a\n```cpp\nvoid dfs(int x,int l){\n    if(l==0){\n        flag=0;\n        check(1,0,0,0,0);\n        if(flag)ans++;\n        return;\n    }\n    if(x>14)return;\n    for(res i=0;i<=limit[x]&&i<=l;++i){\n        jiry[x]=i;\n        dfs(x+1,l-i);\n    }\n}\n```\n\u641c\u4e0b\u6765\u53d1\u73b0\u724c\u578b\u6570\u91cf\u4e0d\u5927\u4e8e$3000000$\uff0c\u56e0\u4e3a\u51fa\u9898\u4eba\u826f\u5fc3\u7684\u628a3\u90fd\u53bb\u6389\u4e86\uff0c\u6240\u4ee5\u603b\u724c\u578b\u5927\u91cf\u7f29\u51cf\u3002\n\n## \u5224\u65ad\u90e8\u5206\uff1a\n\n\u8fd9\u91cc\u9700\u8981\u7528\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u4e00\u5e45\u98de\u673a\u6216\u987a\u5b50\u53ef\u4ee5\u5927\u4e8e\u53e6\u5916\u4e00\u5e45\u540c\u7c7b\u578b\u7684\u724c\uff0c\u90a3\u4e48\u628a\u4ed6\u62c6\u5f00\u6765\u4e5f\u53ef\u4ee5\u5927\u4e8e\u53e6\u5916\u4e00\u5e45\u724c\u62c6\u5f00\u6765\u3002\n\n\u5224\u65ad\u90e8\u5206\u5206\u4e24\u90e8\u5206\uff0c\u5148\u66b4\u529b\u641c\u7d22\u641c\u51fa\u54ea\u4e9b\u724c\u8981\u88ab\u62c6\u51fa\u6765\u53d8\u6210\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\u3002\n\n\u56e0\u4e3a\u53cc\u65b9\u7684\u603b\u724c\u6570\u90fd\u4e0d\u4f1a\u5f88\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u641c\u53ea\u4f1a\u5e26\u4e00\u4e2a\u5e38\u6570\u3002\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u53ea\u6709\u5f53\u4e5d\u6761\u53ef\u601c\u51fa\u4e86\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\u4ee5\u540e\uff0cxx\u7f51\u53cb\u624d\u80fd\u51fa\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\uff0c\u4e0d\u7136\u4e5d\u6761\u53ef\u601c\u5c06\u65e0\u6cd5\u51fa\u5c0f\u4e8exx\u7f51\u53cb\u7684\u724c\u578b\u3002\n\n\u6700\u540e\u4e24\u8005\u51fa\u7684\u4e09\u5f20\u724c\u548c\u56db\u5f20\u724c\u6570\u91cf\u5fc5\u987b\u76f8\u7b49\uff0c\u4e0d\u7136\u4f1a\u6709\u4e00\u526f\u724c\u65e0\u6cd5\u6709\u5bf9\u5e94\u7684\u724c\u3002\n\n```cpp\nvoid check(int x,int one,int oneortwo,int three,int four){\n    if(x>14){\n        if(three||four)return;\n        check(one,oneortwo);\n        return;\n    }\n    if(jiry[x]>=4){\n        jiry[x]-=4;\n        check(x+1,one+1,oneortwo,three,four+1);\n        jiry[x]+=4;\n        if(flag)return;\n    }\n    if(jiry[x]>=3){\n        jiry[x]-=3;\n        check(x+1,one,oneortwo+1,three+1,four);\n        jiry[x]+=3;\n        if(flag)return;\n    }\n    if(xx[x]>=4&&four){\n        xx[x]-=4;\n        check(x+1,one,oneortwo,three,four-1);\n        xx[x]+=4;\n        if(flag)return;\n    }\n    if(xx[x]>=3&&three){\n        xx[x]-=3;\n        check(x+1,one,oneortwo,three-1,four);\n        xx[x]+=3;\n        if(flag)return;\n    }\n    check(x+1,one,oneortwo,three,four);\n}\n```\n\n\u7136\u540e\u518d\u7528\u8d2a\u5fc3\u7684\u65b9\u5f0f\u5224\u65ad\u6700\u540e\u7684\u6563\u724c\u662f\u5426\u53ef\u4ee5\u3002\n\n\u679a\u4e3e\u6709\u591a\u5c11\u7684\u4e09\u5f20\u724c\u8981\u5e26\u4e00\u4e2a\uff0c\u7136\u540e\u5f97\u5230\u6709\u591a\u5c11\u7684\u4e00\u5f20\u724c\u548c\u591a\u5c11\u7684\u4e24\u5f20\u724c\u53ef\u4ee5\u88ab\u5e26\u6389\u3002\n\n\u5bf9\u4e8e\u4e5d\u6761\u53ef\u601c\u7684\u724c\uff0c\u53bb\u6389\u6700\u5927\u7684\u724c\u3002\u5bf9\u4e8exx\u7f51\u53cb\u7684\u724c\uff0c\u53bb\u6389\u6700\u5c0f\u7684\u724c\u3002\u8981\u5148\u7528\u4e24\u5f20\u724c\u6765\u8d2a\u5fc3\uff0c\u518d\u7528\u4e00\u5f20\u724c\u6765\u8d2a\u5fc3\u3002\n\n\u5269\u4e0b\u7684\u724c\u76f4\u63a5\u626b\u4e00\u904d\uff0c\u5982\u679c\u5728\u524d$i$\u79cd\u724c\u4e2dxx\u7f51\u53cb\u7684\u724c\u6bd4\u4e5d\u6761\u53ef\u601c\u7684\u8981\u591a\uff0c\u5219\u5f53\u524d\u724c\u9519\u8bef\u3002\n\n```cpp\nvoid check(int one,int oneortwo){\n    for(res i=0;i<=oneortwo;i++){\n        memcpy(jirycpy,jiry,sizeof jiry);\n        memcpy(xxcpy,xx,sizeof xx);\n        res o=i+one*2,t=oneortwo-i;\n        for(res j=1;j<=14;++j){\n            while(xxcpy[j]>=2&&t)xxcpy[j]-=2,t--;\n            while(xxcpy[j]>=1&&o)xxcpy[j]-=1,o--;\n        }\n        if(o||t)continue;\n        o=i+one,t=oneortwo-i;\n        for(res j=14;j;--j){\n            while(jirycpy[j]>=2&&t)jirycpy[j]-=2,t--;\n            while(jirycpy[j]>=1&&o)jirycpy[j]-=1,o--;\n        }\n        if(o||t)continue;\n        flag=1;\n        for(res j=1,now=0;j<=14;++j){\n            now-=xxcpy[j];\n            if(now<0){\n                flag=0;\n                break;\n            }\n            now+=jirycpy[j];\n        }\n        if(flag)return;\n    }\n}\n```\n\n\u7136\u540e\u662f\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define res register int\nusing namespace std;\nchar str[15];\nint jiry[15],xx[15],limit[15];\nint jirycpy[15],xxcpy[15];\nint cl(char c){\n    if(c=='T')return 7;\n    else if(c=='J')return 8;\n    else if(c=='Q')return 9;\n    else if(c=='K')return 10;\n    else if(c=='A')return 11;\n    else if(c=='2')return 12;\n    else if(c=='w')return 13;\n    else if(c=='W')return 14;\n    else return c-'3';  \n}\nbool flag;\nint ans;\nvoid check(int one,int oneortwo){\n    for(res i=0;i<=oneortwo;i++){\n        memcpy(jirycpy,jiry,sizeof jiry);\n        memcpy(xxcpy,xx,sizeof xx);\n        res o=i+one*2,t=oneortwo-i;\n        for(res j=1;j<=14;++j){\n            while(xxcpy[j]>=2&&t)xxcpy[j]-=2,t--;\n            while(xxcpy[j]>=1&&o)xxcpy[j]-=1,o--;\n        }\n        if(o||t)continue;\n        o=i+one,t=oneortwo-i;\n        for(res j=14;j;--j){\n            while(jirycpy[j]>=2&&t)jirycpy[j]-=2,t--;\n            while(jirycpy[j]>=1&&o)jirycpy[j]-=1,o--;\n        }\n        if(o||t)continue;\n        flag=1;\n        for(res j=1,now=0;j<=14;++j){\n            now-=xxcpy[j];\n            if(now<0){\n                flag=0;\n                break;\n            }\n            now+=jirycpy[j];\n        }\n        if(flag)return;\n    }\n}\nvoid check(int x,int one,int oneortwo,int three,int four){\n    if(x>14){\n        if(three||four)return;\n        check(one,oneortwo);\n        return;\n    }\n    if(jiry[x]>=4){\n        jiry[x]-=4;\n        check(x+1,one+1,oneortwo,three,four+1);\n        jiry[x]+=4;\n        if(flag)return;\n    }\n    if(jiry[x]>=3){\n        jiry[x]-=3;\n        check(x+1,one,oneortwo+1,three+1,four);\n        jiry[x]+=3;\n        if(flag)return;\n    }\n    if(xx[x]>=4&&four){\n        xx[x]-=4;\n        check(x+1,one,oneortwo,three,four-1);\n        xx[x]+=4;\n        if(flag)return;\n    }\n    if(xx[x]>=3&&three){\n        xx[x]-=3;\n        check(x+1,one,oneortwo,three-1,four);\n        xx[x]+=3;\n        if(flag)return;\n    }\n    check(x+1,one,oneortwo,three,four);\n};\nvoid dfs(int x,int l){\n    if(l==0){\n        flag=0;\n        check(1,0,0,0,0);\n        if(flag)ans++;\n        return;\n    }\n    if(x>14)return;\n    for(res i=0;i<=limit[x]&&i<=l;++i){\n        jiry[x]=i;\n        dfs(x+1,l-i);\n    }\n}\nint main(){\n    scanf(\"%s\",str+1);\n    int len=strlen(str+1);\n    for(int i=1;i<=12;++i){\n    \tlimit[i]=4;\n    }\n    limit[13]=limit[14]=1;\n    memset(xx,0,sizeof xx);\n    for(int i=1;i<=len;++i){\n        limit[cl(str[i])]--;\n        xx[cl(str[i])]++;\n    }\n    ans=0;\n    dfs(1,17); \n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1558575918,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5370 \u3010[PKUSC2018]\u4e3b\u6597\u5730\u3011"
    },
    {
        "content": "### \u559c\u6b22\u66b4\u529bqwq\uff08\u5176\u5b9e\u6211\u662f\u4e00\u4e2a\u6597\u5730\u4e3b\u5929\u624d\uff09\n\u663e\u7136\u7684\u60f3\u6cd5\u662f\u7206\u641c\u53ef\u601c\u7684\u724c\uff0c\u7136\u540e\u63a5\u7740\u627e\u662f\u5426\u6709\u5408\u6cd5\u51fa\u724c\u65b9\u6848\u3002\u56e0\u4e3a\u603b\u7684\u65b9\u6848\u6570\u53ea\u6709\u51e0\u767e\u4e07\u79cd\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u6bcf\u79cd\u65b9\u6848\u3002   \n\u7136\u540e\u662f\u4f18\u5316\u6bcf\u4e00\u4e2a $check$ \u8fc7\u7a0b.\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u5bf9\u5b50\u4e09\u5f20\u724c\u987a\u5b50\u8fde\u5bf9\u4e09\u987a\u53ef\u4ee5\u62c6\u6210\u82e5\u5e72\u5355\u724c\uff0c\u98de\u673a\u53ef\u4ee5\u62c6\u6210\u82e5\u5e72\u4e09\u5e26\u4e00\u6216\u4e09\u5e26\u4e8c\uff0c\u6240\u4ee5\u53ea\u6709\u6211\u4eec\u53ea\u7528\u8003\u8651\u5355\u724c\uff0c\u4e09\u5e26\u4e00\uff0c\u4e09\u5e26\u4e8c\uff0c\u56db\u5e26\u4e8c\u3002  \n\u5982\u679c\u53ea\u8003\u8651\u5355\u724c,\u90a3\u4e48\u4e00\u5b9a\u662f\u4e24\u8005\u7684\u724c\u5206\u522b\u6392\u597d\u5e8f\u540e\uff0c\u53ef\u601c\u67d0\u5f20\u724c\u8981\u4e25\u683c\u5c0f\u4e8e\u7f51\u53cb\u7684\u5bf9\u5e94\u4f4d\u7f6e\u7684\u724c\u624d\u5408\u6cd5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u53ef\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u724c\u5927\u5c0f\uff0c\u7136\u540e\u770b\u53ef\u601c\u7684\u6bcf\u79cd\u724c\u662f\u5426\u90fd\u6709\u7f51\u53cb\u7684\u66f4\u5927\u7684\u724c\u53ef\u4ee5\u914d\u4e0a\u5bf9\uff0c\u590d\u6742\u5ea6\u4e3a $O(14)$ \uff0c\u4e5f\u5c31\u662f\u724c\u7684\u79cd\u7c7b\u6570\u3002   \n\u7136\u540e\u8003\u8651\u5269\u4e0b\u7684\u4e09\u79cd $x$ \u5e26 $y$ \u3002\u6211\u4eec\u628a\u6240\u6709 $x$ \u5e26 $y$ \u770b\u6210\u5148\u9009\u597d $x$ \uff0c\u7136\u540e\u9009 $y$ \u3002\u4ee5\u5c31\u53ef\u4ee5\u8ba9\u4e24\u4e2a\u4eba\u5148\u53ea\u6253\u4e09\u5f20\u6216\u56db\u5f20\u4e00\u6837\u7684\u724c\uff0c\u5e76\u4e14\u8bb0\u5f55\u4e0b\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5bf9\u5e94\u5e26\u7684\u4e00\u4e9b\u6563\u724c\u540e\u9762\u5904\u7406\u3002  \n\u4e3a\u8fd9\u4e9b\u6563\u724c\u6ca1\u6709\u9650\u5236\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a $x$ \u5e26 $y$ \u7684\u4f5c\u7528\u662f\u628a\u4e00\u4e9b\u70b9\u6570\u5927\u5bfc\u81f4\u914d\u4e0d\u4e0a\u5bf9\u7684\u724c\u5148\u6d88\u6389\u3002\u4e00\u7ec4\u4e09\u5f20\u724c\u53ef\u4ee5\u5e26\u5355\u724c\u6216\u5bf9\u5b50\uff0c\u4e00\u7ec4\u56db\u5f20\u724c\u53ef\u4ee5\u5e26\u4e24\u5f20\u5355\u724c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6253\u51e0\u6b21\u5bf9\u5b50\uff0c\u6ce8\u610f\u5230\u5bf9\u5b50\u4e0d\u7528\u679a\u4e3e\u5404\u79cd\u6253\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5c3d\u91cf\u6d88\u6389\u53ef\u601c\u7684\u5927\u7684\u724c\uff0c\u6240\u4ee5\u6700\u4f18\u7684\u65b9\u6cd5\u662f\u6bcf\u6b21\u9009\u62e9\u53ef\u601c\u6700\u5927\u7684\u5bf9\u5b50\u6d88\u6389\uff1b\u540c\u6837\u8d2a\u5fc3\u7684\u8003\u8651,\u6211\u4eec\u7528\u7f51\u53cb\u6700\u5c0f\u7684\u5bf9\u5b50\u4e0e\u5176\u914d\u5bf9\uff0c\u663e\u7136\u4e5f\u662f\u6700\u4f18\u7684\u3002  \n\u6700\u540e\u8fd8\u5269\u4e0b\u4e00\u4e9b\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\u6ca1\u6709\u5e26\u4e0a\u4e1c\u897f(\u8bbe\u6709 $a$ \u7ec4\u4e09\u5f20\u724c,b\u79df\u56db\u5f20\u724c)\uff0c\u56e0\u4e3a\u524d\u9762\u679a\u4e3e\u4e86\u5bf9\u5b50\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u4e09\u5f20\u724c\u6211\u4eec\u5f3a\u5236\u5176\u5e26\u5355\u724c\uff0c\u6240\u4ee5\u5c31\u662f\u8fd8\u53ef\u4ee5\u9009\u51fa\u81f3\u591a $a+2b$ \u5355\u724c\u914d\u5bf9\uff0c\u5269\u4e0b\u7684\u724c\u5c31\u53ea\u80fd\u7528\u5355\u724c\u4e00\u4e00\u5bf9\u5e94\u53bb $check$ \u3002  \n\u5177\u4f53\u6765\u8bb2\uff0c\u5982\u679c\u5728\u5355\u724c $check$ \u8fc7\u7a0b\u4e2d\u6709 $c$ \u5f20\u724c\u6ca1\u88ab\u914d\u5bf9\uff0c\u90a3\u4e48\u5982\u679c\u6ee1\u8db3 $c  \\le a+2b$ ,\u90a3\u4e48\u8fd9\u4e2a\u5c31\u662f\u5408\u6cd5\u65b9\u6848\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e24\u4e2a\u4eba\u90fd\u4f1a\u6709 $c$ \u5f20\u724c\u6ca1\u88ab\u914d\u5bf9\u597d\uff0c\u90a3\u4e48\u8fd9 $c$ \u5f20\u724c\u88ab\u4e09\u5f20\u724c\u6216\u56db\u5f20\u724c\u5e26\u4e0a\u5c31\u884c\u4e86\u3002   \n\u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#define ll long long\nusing namespace std;\nchar s[20];\nmap<char,int>mp;\nvoid chu()\n{\n\tmp['4']=0;\n\tmp['5']=1;\n\tmp['6']=2;\n\tmp['7']=3;\n\tmp['8']=4;\n\tmp['9']=5;\n\tmp['T']=6;\n\tmp['J']=7;\n\tmp['Q']=8;\n\tmp['K']=9;\n\tmp['A']=10;\n\tmp['2']=11;\n\tmp['w']=12;\n\tmp['W']=13;\n}\nint l[20]={4,4,4,4,4,4,4,4,4,4,4,4,1,1};\nint ans,cnt[20],v[20];\nbool check(int num,int sum,int x,int y)\n{\n\tint sm=0;\n\tfor(int i=13;i>=0;i--)sm-=v[i],sm=max(sm,0)+cnt[i];\n\t\n\tif(sm<=x+y*2)return true;\n\tint m,mm;\n\tbool flag=false;\n\tfor(;num>=3;num--)\n\t{\n\t\tm=sum;\n\t\twhile(m<=13&&v[m]<num)m++;\n\t\twhile(m<=13)\n\t\t{\n\t\t\tmm=m+1;\n\t\t\twhile(mm<=13&&cnt[mm]<num)mm++;\n\t\t\tif(mm>13)break;\n\t\t\t\n\t\t\twhile(mm<=13)\n\t\t\t{\n\t\t\t\tv[m]-=num,cnt[mm]-=num;\n\t\t\t\t\n\t\t\t\tif(num==3)flag=check(num,m+1,x+1,y);\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tif(num==4)flag=check(num,m+1,x,y+1);\n\t\t\t\t\telse flag=check(num,m+1,x,y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tv[m]+=num,cnt[mm]+=num;\n\t\t\t\tmm++;\n\t\t\t\tif(flag)return true;\n\t\t\t\twhile(mm<=13&&cnt[mm]<num)mm++;\n\t\t\t}\n\t\t\tm++;\n\t\t\twhile(m<=13&&v[m]<num)m++;\n\t\t}\n\t\t\n\t\tsum=0;\n\t}\n\t\n\tif(x==0)return false;\n\t\n\tm=13,mm=0;\n\twhile(m>=0&&v[m]<num)m--;\n\t\n\twhile(mm<=13&&cnt[mm]<num)mm++;\n\tif(m<0||mm>13)return false;\n\t\n\tv[m]-=num,cnt[mm]-=num;\n\tflag=check(num,sum,x-1,y);\n\tv[m]+=num,cnt[mm]+=num;\n\t\n\treturn flag;\n}\nvoid dfs(int x,int sum)\n{\n\tif(sum==17)\n\t{\n\t\tif(check(4,0,0,0))ans++;\n\t\treturn;\n\t}\n\tif(x>13)return;\n\tfor(int i=0;i<=l[x]&&sum+i<=17;++i)\n\t{\n\t\tv[x]=i;\n\t\tdfs(x+1,sum+i);\n\t\tv[x]=0;\n\t}\n}\n\nint main()\n{\n\tchu();\n\t\n\tscanf(\"%s\",s+1);\n\tfor(int i=1;i<=17;i++)cnt[mp[s[i]]]++,l[mp[s[i]]]--;\n\tdfs(0,0);\n\tprintf(\"%d\",ans);\n}\n```\n",
        "postTime": 1621174686,
        "uid": 247269,
        "name": "MSqwq",
        "ccfLevel": 0,
        "title": "[PKUSC2018]\u4e3b\u6597\u5730"
    },
    {
        "content": "\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b\uff0c\u4e8b\u5b9e\u4e0a\u8fd9\u4e48\u591a\u724c\u578b\u6709\u5f88\u591a\u662f\u6ca1\u7528\u7684\u3002\n\n- \u5bf9\u5b50\uff0c\u4e09\u5f20\u724c\uff0c\u987a\u5b50\uff0c\u8fde\u5bf9\uff0c\u4e09\u987a\uff0c\u8fd9\u4e9b\u724c\u578b\u62c6\u6210\u5355\u724c\u51fa\u4e00\u5b9a\u4e0d\u52a3\u3002\n- \u98de\u673a\u62c6\u6210\u4e09\u5e26\u4e00\u6216\u4e09\u5e26\u4e8c\u4e00\u5b9a\u4e0d\u52a3\u3002\n\n\u6240\u4ee5\u6709\u7528\u7684\u724c\u578b\u53ea\u6709\u5355\u724c\uff0c\u4e09\u5e26\u4e00\uff0c\u4e09\u5e26\u4e8c\uff0c\u56db\u5e26\u4e8c\u3002\n\n\u8003\u8651\u6211\u4eec\u5df2\u77e5\u53cc\u65b9\u7684\u724c\uff0c\u5982\u679c\u5df2\u7ecf\u94a6\u5b9a\u4e86\u540e\u4e09\u79cd\u724c\u578b\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u90fd\u662f\u5355\u724c\u3002\u6211\u4eec\u628a\u53cc\u65b9\u7684\u724c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u4e00\u5bf9\u5e94\u7740\u51fa\uff0c\u662f\u4e0d\u52a3\u7684\u3002\n\n\u6211\u4eec\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u7206\u641c\u540e\u4e09\u79cd\u724c\u578b\u4e2d\u4e09\u548c\u56db\u7684\u90e8\u5206\uff08\u76f4\u89c9\u4e0a\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u724c\u578b\u4e0d\u4f1a\u5f88\u591a\uff09\uff0c\u7136\u540e\u5269\u4e0b\u88ab\u5e26\u7684\u90e8\u5206\u6211\u4eec\u91c7\u53d6\u8d2a\u5fc3\uff1a\n\n- xx \u7f51\u53cb\u4f18\u5148\u5e26\u5c0f\u724c\u3002\n- \u4e5d\u6761\u53ef\u601c\u4f18\u5148\u5e26\u5927\u724c\u3002\n\n\u7136\u540e\u518d\u6309\u7167\u5bf9\u5e94\u7740\u51fa\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u53cc\u65b9\u80fd\u4e0d\u80fd\u51fa\u5b8c\u8fd9\u526f\u724c\u4e86\u3002\n\n\u6211\u4eec\u641e\u5b9a\u4e86 Check \u7684\u90e8\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u96be\u9053\u8981\u5bf9\u6bcf\u79cd\u65b9\u6848\u5206\u522b\u68c0\u6d4b\u662f\u5426\u6709\u89e3\u5417\uff1f\n\n\u2014\u2014\u8fd8\u771f\u662f\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u7531\u4e8e\u826f\u5fc3\u51fa\u9898\u4eba\u53bb\u6389\u4e86 3\uff0c\u6240\u4ee5\u53ef\u884c\u7684\u624b\u724c\u65b9\u6848\u53ea\u6709\u767e\u4e07\u7ea7\u522b\u7684\u79cd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7206\u641c\u4e5d\u6761\u53ef\u601c\u7684\u624b\u724c\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u611f\u89c9\u6211\u7684\u7801\u98ce\u8fd8\u633a\u597d\u61c2\u7684\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint cardXX[15], cardRemain[15], cardKel[15];\nint ans;\nint GetID(char cd) {\n    if (cd >= '4' && cd <= '9') return cd - '3';\n    if (cd == 'T') return 7;\n    if (cd == 'J') return 8;\n    if (cd == 'Q') return 9;\n    if (cd == 'K') return 10;\n    if (cd == 'A') return 11;\n    if (cd == '2') return 12;\n    if (cd == 'w') return 13;\n    if (cd == 'W') return 14;\n    return -1;\n}\nchar s[18];\nint cardXXCpy[15], cardKelCpy[15];\nbool CheckSingle(int three, int four) {\n    for (int i = 0; i <= three; i++) {\n        int singleC = i + four * 2, doubleC = three - i;\n        memcpy(cardXXCpy, cardXX, sizeof(int) * 15);\n        memcpy(cardKelCpy, cardKel, sizeof(int) * 15);\n        for (int j = 14; j >= 1; j--) {\n            while (doubleC && cardKelCpy[j] >= 2) cardKelCpy[j] -= 2, doubleC--;\n            while (singleC && cardKelCpy[j]) cardKelCpy[j]--, singleC--;\n        }\n        if (singleC || doubleC) continue;\n        singleC = i + four * 2, doubleC = three - i;\n        for (int j = 1; j <= 14; j++) {\n            while (doubleC && cardXXCpy[j] >= 2) cardXXCpy[j] -= 2, doubleC--;\n            while (singleC && cardXXCpy[j]) cardXXCpy[j]--, singleC--;\n        }\n        if (singleC || doubleC) continue;\n        int counter = 0, j = 1;\n        for (; j <= 14; j++) {\n            if (counter < cardXXCpy[j]) break;\n            counter += cardKelCpy[j] - cardXXCpy[j];\n        }\n        if (j == 15) return true;\n    }\n    return false;\n}\nbool Check(int pos = 1, int three = 0, int four = 0, int threeUnmatched = 0, int fourUnmatched = 0) {\n    if (pos == 15) {\n        if (!threeUnmatched && !fourUnmatched) {\n            return CheckSingle(three, four);\n        }\n        return false;\n    }\n    if (cardKel[pos] >= 4) {\n        cardKel[pos] -= 4; \n        bool foundAns = Check(pos + 1, three, four + 1, threeUnmatched, fourUnmatched + 1);\n        cardKel[pos] += 4;\n        if (foundAns) return true;\n    }\n    if (cardKel[pos] >= 3) {\n        cardKel[pos] -= 3; \n        bool foundAns = Check(pos + 1, three + 1, four, threeUnmatched + 1, fourUnmatched);\n        cardKel[pos] += 3;\n        if (foundAns) return true;\n    }\n    if (cardXX[pos] >= 4 && fourUnmatched) {\n        cardXX[pos] -= 4; \n        bool foundAns = Check(pos + 1, three, four, threeUnmatched, fourUnmatched - 1);\n        cardXX[pos] += 4;\n        if (foundAns) return true;\n    }\n    if (cardXX[pos] >= 3 && threeUnmatched) {\n        cardXX[pos] -= 3;\n        bool foundAns = Check(pos + 1, three, four, threeUnmatched - 1, fourUnmatched);\n        cardXX[pos] += 3;\n        if (foundAns) return true;\n    }\n    return Check(pos + 1, three, four, threeUnmatched, fourUnmatched);\n}\nvoid DFS(int pos, int siz) {\n    if (pos == 15) {\n        if (siz == 17) {\n            if (Check()) ans++;\n        }\n        return;\n    }\n    for (int i = 0; i <= cardRemain[pos] && siz + i <= 17; i++) {\n        cardKel[pos] = i;\n        DFS(pos + 1, siz + i);\n    }\n}\nint main() {\n    while (~scanf(\"%s\", s + 1)) {\n        ans = 0;\n        for (int i = 1; i <= 17; i++) cardXX[i] = 0;\n        for (int i = 1; i <= 17; i++) {\n            cardXX[GetID(s[i])]++;\n        }\n        for (int i = 1; i <= 12; i++) {\n            cardRemain[i] = 4 - cardXX[i];\n        }\n        cardRemain[13] = 1 - cardXX[13]; cardRemain[14] = 1 - cardXX[14];\n        DFS(1, 0);\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1682773986,
        "uid": 363415,
        "name": "251Sec",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5370 [PKUSC2018]\u4e3b\u6597\u5730"
    },
    {
        "content": "# \u9898\u89e3 P5370 \u3010[PKUSC2018]\u4e3b\u6597\u5730\u3011\n### **\u5907\u6218PKUWC\u7684\u8fc7\u7a0b\u4e2d\uff0c\u505a\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u5728\u7ecf\u8fc7\u91cd\u91cd\u7684\u6bd2\u7624\u4e4b\u540e\uff0c\u6211\u7ec8\u4e8eAC\u4e86\u8fd9\u9053\u9898\u76ee\uff01**\n## \u6b63\u89e3\uff1a\u66b4\u641c\n#### \u8fd9\u9053\u9898\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u90e8\u5206\u5206\uff0c\u76f4\u63a5\u4e0a\u6b63\u89e3\u3002\n\n#### \u6211\u4eec\u53ef\u4ee5\u5148\u66b4\u529b\u641c\u7d22\u4e5d\u6761\u53ef\u601c\u624b\u4e0a\u7684\u724c\uff0c\u603b\u6570\u4e0d\u4f1a\u592a\u5927\uff0c\u5927\u7ea6\u572810^7\u7ea7\u522b\uff0c\n#### \u5bf9\u4e8e\u641c\u51fa\u6765\u7684\u724c\u6211\u4eec\u5c31\u8003\u8651\u5982\u4f55\u5224\u65ad\u5b83\u662f\u5426\u5408\u6cd5\u5c31\u884c\u4e86\n\n#### \uff08\u9898\u76ee\u7ed9\u7684\u6a21\u6570\u5c31\u662f\u4e2a\u5751\uff01\u6839\u672c\u7528\u4e0d\u5230\uff09\n\n\n## \u5982\u4f55\u5224\u65ad\uff1f\n\n#### \u6ce8\u610f\u5230\u987a\u5b50\u548c\u4e09\u987a\u662f\u4e0d\u4f18\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u62c6\u5f00\u6765\u6253\n\n### \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u679a\u4e3e\u6709\u591a\u5c11\u4e2a\u4e09\u5e26X\u548c\u591a\u5c11\u4e2a\u56db\u5e26\u4e8c\n\n### \u518d\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u4e09\u5e26\u4e2d\u6709\u591a\u5c11\u4e2a\u4e09\u5e26\u4e8c\n\n### \u518d\u7136\u540e\uff0c\u5c31\u662f\u5e26\u5269\u4e0b\u7684\u724c\uff0c\u8fd9\u8fb9\u6709\u4e00\u4e2a\u5c0f\u8d2a\u5fc3\uff0c\u5c31\u662f\u4e5d\u6761\u53ef\u601c\u7684\u724c\u5c3d\u91cf\u5e26\u5927\u7684\u8d70\uff0c\u7f51\u53cb\u7684\u724c\u5c3d\u91cf\u5e26\u5c0f\u7684\u8d70\u3002\n\n### \u518d\u7136\u540e\u2026\u2026\u6162\u6162\u6253\u6563\u724c\n\n### \u6700\u540e\uff0c\u9644\u4e0a\u62112.78K\u7684\u4ee3\u7801\uff0c\u5f88\u591a\u5c0f\u9519\u8bef\u6539\u4e86\u6211\u4e24\u4e2a\u5c0f\u65f6\uff01\uff01\uff01\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define N 20\nusing namespace std;\nint wy[N],jtkl[N],cnt[N];\nint n,thr[N],fou[N],orz[N];\nint a[N],W[N],J[N],p[N],ans;\nchar s[N];\nint Num(char ch) {\n\tif(ch=='T')return 7;\n\tif(ch=='J')return 8;\n\tif(ch=='Q')return 9;\n\tif(ch=='K')return 10;\n\tif(ch=='A')return 11;\n\tif(ch=='2')return 12;\n\tif(ch=='w')return 13;\n\tif(ch=='W')return 14;\n\treturn ch-'3';\n}\nbool Check(int f,int t) {\n\tfor(int i=0; i<=t; ++i) {\n\t\tmemcpy(W,wy,sizeof(wy)),memcpy(J,jtkl,sizeof(jtkl));\n\t\tint cnt=0;\n\t\tfor(int j=1; j<=12; ++j) {\n\t\t\tif(W[j]>=2&&cnt<i)W[j]-=2,++cnt;\n\t\t\tif(W[j]>=2&&cnt<i)W[j]-=2,++cnt;\n\t\t\tif(cnt==i)break;\n\t\t}\n\t\tif(cnt<i)break;\n\t\tcnt=0;\n\t\tfor(int j=12; j; --j) {\n\t\t\tif(J[j]>=2&&cnt<i)J[j]-=2,++cnt;\n\t\t\tif(J[j]>=2&&cnt<i)J[j]-=2,++cnt;\n\t\t\tif(cnt==i)break;\n\t\t}\n\t\tif(cnt<i)break;\n\t\tcnt=2*f+t-i,memset(p,0,sizeof(p));\n\t\tfor(int j=1; j<=14; ++j) {\n\t\t\tint t=min(W[j],cnt);\n\t\t\tW[j]-=t,cnt-=t;\n\t\t\tif(!cnt)break;\n\t\t}\n\t\tcnt=2*f+t-i;\n\t\tfor(int j=14; j; --j) {\n\t\t\tint t=min(J[j],cnt);\n\t\t\tJ[j]-=t,cnt-=t;\n\t\t\tif(!cnt)break;\n\t\t}\n\t\tif(J[14])continue;\n\t\tfor(int j=1; j<=14; ++j)p[j]+=W[j],p[j+1]-=J[j];\n\t\tcnt=0;\n\t\tfor(int j=1; j<=14; ++j) {\n\t\t\tcnt+=p[j];\n\t\t\tif(cnt>0)break;\n\t\t}\n\t\tif(!cnt)return true;\n\t}\n\treturn false;\n}\nbool Check_Jtkl(int now,int F,int T,int f,int t,int q1,int q2) {\n\tif(F==f&&T==t)return Check(f,t);\n\tif(now>=12)return false;\n\tq1+=thr[now],q2+=fou[now];\n\tif(q1>0||q2>0)return false;//\u4e5d\u6761\u53ef\u601c\u6ca1\u6709\u6bd4\u7f51\u53cb\u5c0f\u7684\u724c\n\tif(jtkl[now]>=3) {\n\t\tjtkl[now]-=3;\n\t\tif(Check_Jtkl(now,F,T,f,t+1,q1,q2-1))return true;\n\t\tjtkl[now]+=3;\n\t}\n\tif(jtkl[now]>=4) {\n\t\tjtkl[now]-=4;\n\t\tif(Check_Jtkl(now,F,T,f+1,t,q1-1,q2))return true;\n\t\tjtkl[now]+=4;\n\t}\n\treturn Check_Jtkl(now+1,F,T,f,t,q1,q2);\n}\nbool Check_Wy(int now,int f,int t) {//\u5224\u65ad\u4ece2\u5f00\u59cb\uff0c\u641c\u7d20\u4ece1\u5f00\u59cb\uff0c\u56e0\u4e3a\u4e00\u53ef\u4ee5\u88ab\u5e26\u51fa\u53bb\n\tif(f*6+t*4>17)return false;\n\tif(now>12)return Check_Jtkl(1,f,t,0,0,0,0);\n\tif(wy[now]>=3) {\n\t\twy[now]-=3,++thr[now];\n\t\tif(Check_Wy(now+1,f,t+1))return true;\n\t\twy[now]+=3,--thr[now];\n\t}\n\tif(wy[now]>=4) {\n\t\twy[now]-=4,++fou[now];\n\t\tif(Check_Wy(now+1,f+1,t))return true;\n\t\twy[now]+=4,--fou[now];\n\t}\n\treturn Check_Wy(now+1,f,t);\n}\nvoid Dfs(int x,int rest) {\n\tif(!rest) {\n\t\tmemset(thr,0,sizeof(thr));\n\t\tmemset(fou,0,sizeof(fou));\n\t\tmemcpy(wy,a,sizeof(a));\n\t\tmemcpy(jtkl,orz,sizeof(orz));\n\t\tif(Check_Wy(2,0,0))++ans;\n\t\treturn;\n\t}\n\tif(x>14)return;\n\tfor(int i=0; i<=cnt[x]; ++i) {\n\t\tif(i>rest)break;\n\t\torz[x]=i,Dfs(x+1,rest-i),orz[x]=0;\n\t}\n}\nint main() {\n\twhile(scanf(\"%s\",s+1)!=EOF) {\n\t\tmemset(a,0,sizeof(a));\n\t\tfor(int j=1; j<=12; ++j)cnt[j]=4;\n\t\tcnt[13]=cnt[14]=1;\n\t\tfor(int j=1; j<=17; ++j)++a[Num(s[j])],--cnt[Num(s[j])];\n\t\tans=0,Dfs(1,17),printf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1576483746,
        "uid": 112569,
        "name": "Time_tears",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5370 \u3010[PKUSC2018]\u4e3b\u6597\u5730\u3011"
    }
]