[
    {
        "content": "## \u6811\u94fe\u5256\u5206\u00b7\u7ebf\u6027\u57fa\u00b7\u771f\u00b7\u677f\u5b50\u9898\n~~[SJY](https://www.luogu.com.cn/user/151935)\u8bf4\uff1a\u8fd9\u662f\u4e00\u9053\u3010\u54d4~\u3011\u9898~~\n\n\u9996\u5148\uff0c\u6211\u4eec\u770b\u5230\u4e86**\u5f02\u6216**\u64cd\u4f5c\uff0c\u90a3\u6beb\u65e0\u7591\u95ee\uff0c\u5c31\u662f\u7528\u7ebf\u6027\u57fa\u4e86\n\n#### \u6211\u4eec\u77e5\u9053\uff0c\u7ebf\u6027\u57fa\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n- \u57fa\u4e2d\u7684\u6570\u65e0\u6cd5\u5f02\u6216\u51fa$0$\n- \u7ebf\u6027\u57fa\u4e2d\u7684\u6570\u5f02\u6216\u51fa\u6765\u7684\u503c\uff0c\u7528\u539f\u6570\u5217\u4e5f\u80fd\u5f02\u6216\u51fa\u6765\n\n\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u65e0\u6cd5\u88ab\u63d2\u5165\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u6570\u53ef\u4ee5$\\oplus$\u7ebf\u6027\u57fa\u4e2d\u7684\u6570\u4ece\u800c\u53d8\u6210$0$\uff0c\u6362\u53e5\u6216\u8bf4\uff1a\n\n#### \u5982\u679c\u4e00\u4e2a\u6570\u65e0\u6cd5\u88ab\u63d2\u5165\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53ef\u4ee5\u7531\u5df2\u63d2\u5165\u7684\u6570\u5f02\u6216\u5f97\u5230\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6027\u8d28\u6765\u5224\u65ad\u4e00\u7ec4\u6570\u636e``` \u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u503c\u76f8\u540c ```\n\n\u7136\u540e\uff0c\u6211\u4eec\u53c8\u53d1\u73b0\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u6027\u8d28\uff1a\u7ebf\u6027\u57fa\u4e2d\u4e00\u5171\u6709$\\lceil log_2(v)+1\\rceil$\u4e2a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u80fd\u63d2\u5165$31$\u4e2a\u6570\uff0c\u5bf9\u4e8e\u540e\u9762\u63d2\u5165\u7684\u6570\uff0c\u4e00\u5b9a\u53ef\u4ee5\u7531\u524d\u9762\u7684\u6570\u5f02\u6216\u5f97\u5230\uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u5f97\u5230\u4e86\u4e00\u6761\u6709\u7528\u7684\u6027\u8d28\uff1a\n\n#### \u5982\u679c\u4e24\u70b9\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u70b9\u6570$\uff1e31$,\u90a3\u4e48\u4e00\u5b9a\u6709\u96c6\u5408\u7684\u503c\u76f8\u7b49\n\n\u90a3\u4e48\u5c0f\u849f\u84bb\u53c8\u6709\u95ee\u9898\u4e86\uff1a\u6309\u7167\u4e0a\u9762\u7684\u601d\u8def\uff0c\u5c31\u9700\u8981\u5feb\u901f\u6c42\u51fa\u6811\u4e0a\u4e24\u70b9\u7684\u8ddd\u79bb\uff0c\u8fd8\u8981\u5feb\u901f\u4fee\u6539\uff0c~~\u849f\u84bb\u505a\u4e0d\u5230\u554a~~\n\n\u4e8e\u662f\u8fd9\u65f6\uff0c**\u6811\u94fe\u5256\u5206**\u5c31\u51fa\u73b0\u4e86\u3002\u4e0d\u4ec5\u80fd\u5feb\u901f\u6c42LCA\uff0c\u5957\u4e0a\u7ebf\u6bb5\u6811\u5feb\u901f\u4fee\u6539\uff0c\u5b8c\u5168\u7b26\u5408\u6211\u4eec\u7684\u9700\u8981\n\n~~\u6284~~\u501f\u9274\u5b8c\u6811\u94fe\u5256\u5206\uff0c\u8fd9\u9053\u9898\u5c31\u6109\u5feb\u5730\u505a\u5b8c\u4e86\n\n```cpp\n#pragma optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){\n\tx=0;char c=getchar();bool f=false;\n\tfor(;!isdigit(c);c=getchar())f!=c=='-';\n\tfor(;isdigit(c);c=getchar())x=x*10+c-'0';\n\tif(f)x=-x;\n}\ntemplate<typename T ,typename ...Arg>\ninline void read(T &x,Arg &...args){\n\tread(x);read(args...);\n}\ntemplate<typename T>\ninline void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\nchar get(){char c=getchar();while(!isalpha(c))c=getchar();return c;}\nconst int maxn=1e5+100;\nstruct Graph{\n\tstruct node{int v,nxt;}e[maxn*2];\n\tint cnt,head[maxn];\n\tinline void add(int x,int y){e[++cnt]={y,head[x]};head[x]=cnt;}\n\t#define For(G,x) for(int ___=(G).head[x];___;___=(G).e[___].nxt)\n\t#define v(G) (G).e[___].v\n}G;\n//----------\u6811----------\nstruct Segment_Tree{\n\tstruct node{\n\t\tint num,l,r;\n\t\tint tag;\n\t}t[maxn<<2];\n\tvoid build(int x,int l,int r){\n\t\tt[x].l=l,t[x].r=r;\n\t\tt[x].num=0,t[x].tag=0;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tbuild(x<<1,l,mid);\n\t\tbuild(x<<1|1,mid+1,r);\n\t}\n\tvoid pushdown(int x){\n\t\tif(t[x].tag){\n\t\t\tt[x<<1].tag^=t[x].tag;\n\t\t\tt[x<<1].num^=t[x].tag;\n\t\t\tt[x<<1|1].tag^=t[x].tag;\n\t\t\tt[x<<1|1].num^=t[x].tag;\n\t\t\tt[x].tag=0;\n\t\t}\n\t}\n\tvoid update(int x,int l,int r,int val){\n\t\tif(t[x].l>r||t[x].r<l)return;\n\t\tif(l<=t[x].l&&t[x].r<=r){t[x].num^=val;t[x].tag^=val;return;}\n\t\tpushdown(x);update(x<<1,l,r,val);update(x<<1|1,l,r,val);\n\t}\n\tint query(int x,int pos){\n\t\tif(t[x].l==t[x].r)return t[x].num;\n\t\tpushdown(x);\n\t\tint mid=t[x].l+t[x].r>>1;\n\t\tif(pos<=mid)return query(x<<1,pos);\n\t\telse return query(x<<1|1,pos);\n\t}\n\tvoid print(int x){\n\t\tif(t[x].l==t[x].r)printf(\"%d \",t[x].num);\n\t\telse pushdown(x),print(x<<1),print(x<<1|1);\n\t}\n}ST;\n//----------\u7ebf\u6bb5\u6811----------\nint fa[maxn];//\u7236\u8282\u70b9\nint deep[maxn];//\u6df1\u5ea6\nint size[maxn];//\u5b50\u6811\u5927\u5c0f\nint top[maxn];//\u94fe\u9876\nint id[maxn];//dfs\u5e8f\nint v[maxn];//\u6743\u503c \nint cnt=0;\nvoid dfs1(int x,int f){\n\t//\u5904\u7406\uff1a fa deep size\n\tfa[x]=f,deep[x]=deep[f]+1;size[x]=1;\n\tFor(G,x)if(v(G)!=f)dfs1(v(G),x),size[x]+=size[v(G)];\n} \nvoid dfs2(int x,int f){\n\t//\u5904\u7406\uff1a top id\n\tid[x]=++cnt;top[x]=f;ST.update(1,cnt,cnt,v[x]);\n\tint MAX=-1,s=-1;\n\tFor(G,x) if(v(G)!=fa[x]&&size[v(G)]>MAX) MAX=size[v(G)], s=v(G);\n\tif(MAX!=-1)dfs2(s,f);\n\tFor(G,x) if(v(G)!=fa[x]&&v(G)!=s)dfs2(v(G),v(G));\n}\nvoid update(int x,int y,int z){\n    while(top[x]!=top[y]){\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        ST.update(1,id[top[x]],id[x],z);\n        x=fa[top[x]];\n    }\n    if(id[x]>id[y])\n        swap(x,y);\n    ST.update(1,id[x],id[y],z);\n}\nint LCA(int u,int v){  \n    while(top[u]!=top[v])/*u\u3001v\u4e0d\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u65f6*/{\n        if(deep[top[u]]>deep[top[v]])//\u5c06\u6df1\u5ea6\u5927\u7684\u4e0a\u63d0\n            u=fa[top[u]];\n        else\n            v=fa[top[v]];\n    }\n    if(deep[u]<deep[v])//\u8fd4\u56deu\u3001v\u4e2d\u5728\u8f83\u4e0a\u65b9\u7684\u90a3\u4e2a\n        return u;\n    return v;\n}\n//----------\u6811\u94fe\u5256\u5206----------\nconst int max_wei=31;\nstruct leaner_basis{\n\tint b[max_wei];\n\tvoid init(){memset(b,0,sizeof b);}\n\tbool insert(int x){\n\t\tfor(int i=max_wei-1;i>=0;i--){\n\t\t\tif(!(x&(1<<i)))continue;\n\t\t\tif(!b[i]){b[i]=x;return true;}\n\t\t\tx^=b[i];\n\t\t}\n\t\treturn false;\n\t}\n}B;\n//----------\u7ebf\u6027\u57fa---------- \nint n,q,x,y,z;\nsigned main(){\n\tread(n,q);\n\tfor(int i=1;i<=n;i++)\n\t\tread(v[i]);\n\tfor(int i=1;i<n;i++)\n\t\tread(x,y),G.add(x,y),G.add(y,x);\n\tST.build(1,1,n);\n\tdfs1(1,-1);dfs2(1,1);\n\tfor(int i=1;i<=q;i++){\n\t\tchar opt=get();\n\t\tif(opt=='Q'){\n\t\t\tread(x,y);\n\t\t\tint lca=LCA(x,y);\n\t\t\tint dis=deep[x]+deep[y]-deep[lca]*2+1;\n\t\t\tif(dis>30)printf(\"YES\\n\");\n\t\t\telse{\n\t\t\t\tB.init();\n\t\t\t\tbool flag=false;\n\t\t\t\tif(!B.insert(ST.query(1,id[lca])))flag=true;\n\t\t\t\tif(!flag)\n\t\t\t\t\twhile(x!=lca){\n\t\t\t\t\t\tif(!B.insert(ST.query(1,id[x]))){flag=true;break;}\n\t\t\t\t\t\tx=fa[x];\n\t\t\t\t\t}\n\t\t\t\tif(!flag)\n\t\t\t\t\twhile(y!=lca){\n\t\t\t\t\t\tif(!B.insert(ST.query(1,id[y]))){flag=true;break;}\n\t\t\t\t\t\ty=fa[y];\n\t\t\t\t\t}\n\t\t\t\tprintf(flag?\"YES\\n\":\"NO\\n\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tread(x,y,z);\n\t\t\tupdate(x,y,z);\n\t\t}\n\t}\n}\n```",
        "postTime": 1591863778,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    },
    {
        "content": "\u795e [\u2657Wendigo\u265d](https://www.luogu.com.cn/user/118365) \u5728\u5927\u7ea6\u4e00\u5468\u524d10min\u7528\u7ebf\u6027\u57fa\u7206\u5207\u6b64\u9898\u3002\u849f\u84bb\u521d\u5b66\u7ebf\u6027\u57fa\uff0c\u60f3\u8d77\u6b64\u4e8b\uff0c\u4fbf\u6765\u4e00\u8bd5\n\n\u5982\u679c\u4e0d\u4f1a\u7ebf\u6027\u57fa\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u795e\u2657Wendigo\u265d\u7684[\u7ebf\u6027\u57fa\u8bb2\u89e3](https://www.luogu.com.cn/blog/Wendigo/xian-xing-ji) ~~\u63d0\u4ea4\u65e5\u62a5\u4e86\uff0c\u4f46\u662f\u7ba1\u7406\u5458\u83ab\u540d\u9e3d\u5b50~~\n\n\u8fd9\u9898\u53ef\u4ee5\u7528\u7ebf\u6027\u57fa\u63a8\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a**\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u672a\u80fd\u6210\u529f\u63d2\u5165\u7ebf\u6027\u57fa\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5c5e\u6027\u503c\u76f8\u540c\u3002**\n\n\u7c97\u7565\u8bc1\u660e\u4e00\u4e0b\uff1a\u5982\u679c\u672a\u80fd\u6210\u529f\u63d2\u5165\u5143\u7d20 $x$ \uff0c\u8bf4\u660e\u539f\u672c\u90a3\u4e9b\u6570\u4e2d\u67d0\u4e2a\u96c6\u5408\u7684\u5f02\u6216\u503c\u7b49\u4e8e $x$ \uff0c\u90a3\u4e48\u90a3\u4e2a\u96c6\u5408\u4e0e $x$ \u5c31\u662f $2$ \u4e2a\u4e0d\u76f8\u7b49\u4e14\u5c5e\u6027\u503c\u76f8\u540c\u7684\u5b50\u96c6\u3002\n\n\u53c8\u7531\u4e8e\u7ebf\u6027\u57fa\u6700\u591a $\\log S$ \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u5982\u679c\u4e24\u70b9\u95f4\u8ddd\u79bb\u5927\u4e8e $30$ \uff0c\u5fc5\u7136\u6709\u5143\u7d20\u4e0d\u80fd\u6210\u529f\u63d2\u5165\uff0c\u76f4\u63a5\u8f93\u51fa ```YES``` \u3002\n\n\u4fee\u6539\uff0c\u53ef\u4ee5\u6811\u5256\u5b8c\u5f04\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u533a\u95f4\u5f02\u6216\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u5c31\u597d\u4e86\u3002\u56e0\u4e3a\u63d2\u5165\u7ebf\u6027\u57fa\u53ea\u9700\u8981\u5355\u70b9\u67e5\u8be2 ~~\u597d\u50cf\u6bd4\u8f83\u663e\u7136\uff0c\u6ca1\u5565\u522b\u7684\u597d\u8bf4\u4e86qwq~~\n\n\u67e5\u8be2\uff0c\u521a\u521a\u8ddd\u79bb\u5927\u4e8e $30$ \u7684\u60c5\u51b5\u8bf4\u8fc7\u4e86\u3002\u5982\u679c\u5c0f\u4e8e $30$ \u66b4\u529b\u8df3\u5c31\u597d\u4e86\uff0c\u6bd5\u7adf $30$ \u6bd4\u8f83\u5c0f\u3002\u7136\u540e\u5e94\u7528\u4e0a\u9762\u90a3\u4e2a\u7ed3\u8bba\uff0c\u770b\u770b\u662f\u5426\u6709\u5143\u7d20\u672a\u6210\u529f\u63d2\u5165\u3002\n\n\u6240\u4ee5\u8fd9\u9898\u96be\u70b9\u5c31\u662f\u7528\u7ebf\u6027\u57fa\u53d1\u73b0\u90a3\u4e2a\u6027\u8d28\uff0c\u5176\u4f59\u90fd\u6bd4\u8f83\u663e\u7136\uff0c\u800c\u4e14\u4ee3\u7801\u8d85\u597d\u5199\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n#define int long long\n#define rint register int\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n//char buf[1<<21],*p1=buf,*p2=buf;\ninline int rd() {\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)) {if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch))x=x*10+(ch^48),ch=getchar();\n\treturn x*f;\n}\nconst int N=100010;\nint n,q,v[N];\nstruct edge {\n\tint to,nxt;\n}e[N<<1];\nint head[N],num_edge;\nint top[N],fa[N],dfn[N],timer,dep[N],siz[N],son[N];\nbool can;\nint d[40];\nnamespace BIT {\n\tint tr[N];\n\t#define lt(i) (i&(-i))\n\tvoid add(int x,int d) {for(rint i=x;i<=n;i+=lt(i))tr[i]^=d;}\n\tvoid upd(int l,int r,int d){add(l,d),add(r+1,d);}\n\tint ask(int x) {\n\t\tint res=0;\n\t\tfor(rint i=x;i>0;i-=lt(i))res^=tr[i];\n\t\treturn res;\n\t}\n}\nvoid addedge(int from,int to) {\n\t++num_edge;\n\te[num_edge].nxt=head[from];\n\te[num_edge].to=to;\n\thead[from]=num_edge;\n}\nvoid dfs1(int u,int ft) {\n\tsiz[u]=1;\n\tfor(rint i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==ft)continue;\n\t\tdep[v]=dep[u]+1;\n\t\tfa[v]=u;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\nvoid dfs2(int u,int tp)  {\n\ttop[u]=tp;\n\tdfn[u]=++timer;\n\tif(son[u])dfs2(son[u],tp);\n\tfor(rint i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\nint LCA(int x,int y) {\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]])x^=y^=x^=y;\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\nvoid update(int x,int y,int z) {\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]])x^=y^=x^=y;\n\t\tBIT::upd(dfn[top[x]],dfn[x],z);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])x^=y^=x^=y;\n\tBIT::upd(dfn[x],dfn[y],z);\n}\nvoid clear() {\n\tcan=0;\n\tfor(rint i=0;i<=30;++i)d[i]=0;\n}\nvoid add(int x) {\n\tbool flg=1;\n\tfor(rint i=30;~i;--i)\n\t\tif(x&(1<<i)) {\n\t\t\tif(d[i])x^=d[i];\n\t\t\telse {d[i]=x,flg=0;break;}\n\t\t}\n\tcan|=flg;\n}\nbool query(int x,int y) {\n\tint lca=LCA(x,y);\n\tif(dep[x]+dep[y]-(dep[lca]<<1)>30)return 1;\n\tclear();\n\twhile(dep[x]>dep[lca])add(v[x]^BIT::ask(dfn[x])),x=fa[x];\n\twhile(dep[y]>dep[lca])add(v[y]^BIT::ask(dfn[y])),y=fa[y];\n\tadd(v[lca]^BIT::ask(dfn[lca]));\n\treturn can;\n}\nsigned main() {\n\tn=rd(),q=rd();\n\tfor(rint i=1;i<=n;++i)v[i]=rd();\n\tfor(rint i=1,x,y;i<n;++i)\n\t\tx=rd(),y=rd(),addedge(x,y),addedge(y,x);\n\tdep[1]=1,dfs1(1,0),dfs2(1,1);\n\tchar opt[10];\n\twhile(q--) {\n\t\tscanf(\"%s\",opt);int x=rd(),y=rd();\n\t\tif(opt[0]=='Q')puts(query(x,y)?\"YES\":\"NO\");\n\t\telse update(x,y,rd());\n\t} \n\treturn 0;\n}\n```",
        "postTime": 1589792673,
        "uid": 123384,
        "name": "tommy0221",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    },
    {
        "content": "\u51fa\u9898\u4eba\uff1a [hsfzLZH1](https://www.luogu.org/space/show?uid=43486)\n\n\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u7ebf\u6027\u57fa\u548c\u6811\u94fe\u5256\u5206\u7684\u5185\u5bb9\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u70b9\u6743 $v_i$ \uff0c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u5f62\u5f0f\u4e4b\u4e00\uff1a\n\n1.  `Update x y z` \u5c06\u6811\u4e0a $x,y$ \u4e24\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u5f02\u6216\u4e0a $z$ \u3002\n\n2.  `Query x y` \u5224\u65ad\u5bf9\u4e8e\u6811\u4e0a $x,y$ \u4e24\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u70b9\u6784\u6210\u7684\u70b9\u7684\u96c6\u5408\uff0c\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b50\u96c6\uff0c\u8fd9\u4e24\u4e2a\u5b50\u96c6\u7684\u70b9\u6743\u5f02\u6216\u548c\u76f8\u7b49\u3002\n\n## Subtask#1\n\n\u89c2\u5bdf\u5230 $x,y$ \u5728\u6811\u4e0a\u7684\u8ddd\u79bb\u5f88\u5c0f\uff0c\u4fee\u6539\u65f6\u76f4\u63a5\u8df3\u8def\u5f84\u4fee\u6539\uff0c\u5224\u65ad\u65f6\u76f4\u63a5\u63d0\u53d6\u51fa\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u679a\u4e3e\u5b50\u96c6\u8fdb\u884c\u5224\u65ad\u5373\u53ef\u3002\n\n## Subtask#2\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\u8981\u6c42\u7684\u662f\u4ec0\u4e48\u3002\u5f02\u6216\u4e24\u4e2a\u5b50\u96c6\uff0c\u5f97\u5230\u7684\u96c6\u5408\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\u96c6\u4e14\u8fd9\u4e2a\u96c6\u5408\u7684\u70b9\u6743\u5f02\u6216\u548c\u4e3a $0$ \u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u5224\u65ad\u8def\u5f84\u4e0a\u70b9\u7684\u96c6\u5408\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u5176\u70b9\u6743\u7684\u5f02\u6216\u548c\u4e3a $0$ \u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u60f3\u8d77\u4e86 [**\u7ebf\u6027\u57fa**](https://oi-wiki.org/math/basis/) \u3002\n\n\u5f97\u5230\u4e86 $x,y$ \u4e24\u70b9\u95f4\u8def\u5f84\u7684\u7ebf\u6027\u57fa\uff0c\u53ea\u9700\u5224\u65ad\u5176\u4e2d\u6709\u503c\u7684\u6570\u91cf\u662f\u5426\u7b49\u4e8e\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n~~\u6b64\u5904\u5f00\u59cb\u60f3\u6b6a~~\n\n\u7ebf\u6027\u57fa\u53ef\u4ee5 $O(\\log_2^2 v)$ \u5408\u5e76\u3002\u8981\u5f97\u5230 $x,y$ \u4e24\u70b9\u95f4\u7684\u7ebf\u6027\u57fa\uff0c\u53ef\u4ee5\u91c7\u7528\u6811\u94fe\u5256\u5206\u7684\u7b56\u7565\u3002\n\n\u56e0\u4e3a\u8981\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4\u5dee\u5206\u540e\u7684\u5e8f\u5217\u4e0a\u7684\u7ebf\u6027\u57fa\u3002\u5728\u8fd9\u4e2a\u5dee\u5206\u7ebf\u6027\u57fa\u4e2d\u518d\u52a0\u5165\u4e00\u4e2a\u539f\u503c\uff0c\u5373\u53ef\u6c42\u51fa\u4e24\u70b9\u95f4\u8def\u5f84\u7684\u7ebf\u6027\u57fa\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log_2^4 v)$ \u3002\u5b9e\u73b0\u4e0d\u591f\u4f18\u79c0\u7684\u8bdd\u53ef\u80fd\u662f $O(n\\log_2^5 v)$ \u3002\n\n## Subtask#3\n\n\u89c2\u5bdf\u5230\u7ebf\u6027\u57fa\u4e2d\u6709\u503c\u7684\u4f4d\u6570\u4e00\u5b9a\u5c0f\u4e8e $30$ \u3002\u6240\u4ee5\uff0c\u5f53\u67e5\u8be2\u65f6 $x,y$ \u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u5927\u4e8e $30$ \uff0c\u76f4\u63a5\u8f93\u51fa `YES` \u3002\u5982\u679c\u4e0d\u662f\uff0c\u66b4\u529b\u8df3\u8def\u5f84\u5c06\u6bcf\u4e2a\u70b9\u6743\u63d2\u5165\u7ebf\u6027\u57fa\uff0c\u5982\u679c\u65e0\u6cd5\u63d2\u5165\u5219\u8f93\u51fa `YES` \u3002\u6ce8\u610f\u7279\u5224 $0$ \u7684\u60c5\u51b5\u3002\n\n\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u6811\u94fe\u5256\u5206\u3002\u53ea\u9700\u652f\u6301\u5355\u70b9\u67e5\u8be2\u70b9\u6743\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log_2^2 v)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$ \u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=200010;\nint n,q,x,y,z,v[maxn],t;\nbool tf;\nchar op[10];\nint cur,h[maxn*2],nxt[maxn*2],p[maxn*2];\nvoid add_edge(int x,int y)\n{\n\tcur++;\n\tnxt[cur]=h[x];\n\th[x]=cur;\n\tp[cur]=y;\n}\nint dep[maxn],siz[maxn],fa[maxn],son[maxn];\nint clk,dfn[maxn],rnk[maxn],top[maxn];\nvoid dfs1(int x)\n{\n\tsiz[x]=1;\n\tfor(int j=h[x];j;j=nxt[j])if(p[j]!=fa[x])\n\t{\n\t\tfa[p[j]]=x;\n\t\tdep[p[j]]=dep[x]+1;\n\t\tdfs1(p[j]);\n\t\tsiz[x]+=siz[p[j]];\n\t\tif((!son[x])||siz[son[x]]<siz[p[j]])son[x]=p[j];\n\t}\n}\nvoid dfs2(int x,int t)\n{\n\tdfn[x]=++clk;rnk[clk]=x;\n\ttop[x]=t;\n\tif(son[x])dfs2(son[x],t);\n\tfor(int j=h[x];j;j=nxt[j])if(p[j]!=fa[x]&&p[j]!=son[x])dfs2(p[j],p[j]);\n}\nint LCA(int x,int y)\n{\n    int fx=top[x],fy=top[y];\n    while(fx!=fy)\n    {\n        if(dep[fx]>=dep[fy])x=fa[fx];\n        else y=fa[fy];\n        fx=top[x];fy=top[y];\n    }\n    if(dep[x]<=dep[y])return x;\n    return y;\n}\nint sum[maxn];\nint lowbit(int x){return x&(-x);}\nvoid add(int x,int v){for(int i=x;i<=n;i+=lowbit(i))sum[i]^=v;}\nvoid add(int l,int r,int v){add(l,v);add(r+1,v);}\nint query(int x){int ret=0;for(int i=x;i;i-=lowbit(i))ret^=sum[i];return ret;}\nvoid Update(int x,int y,int z)\n{\n    int fx=top[x],fy=top[y];\n    while(fx!=fy)\n    {\n        if(dep[fx]>=dep[fy])add(dfn[fx],dfn[x],z),x=fa[fx];\n        else add(dfn[fy],dfn[y],z),y=fa[fy];\n        fx=top[x];fy=top[y];\n    }\n    if(dfn[x]<=dfn[y])add(dfn[x],dfn[y],z);\n    else add(dfn[y],dfn[x],z);\n}\nstruct linear_base\n{\n\tint p[31];\n\tvoid clear(){for(int i=30;i>=0;i--)p[i]=0;}\n\tbool insert(int x)\n\t{\n\t\tif(!x)return false; \n\t\tfor(int i=30;i>=0;i--)if((x>>i)&1)\n\t\t{\n\t\t\tif(!p[i]){p[i]=x;return true;}\n\t\t\telse x^=p[i];\n\t\t}\n\t\treturn false;\n\t}\n}ans;\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",v+i);\n\tfor(int i=1;i<n;i++)scanf(\"%d%d\",&x,&y),add_edge(x,y),add_edge(y,x);\n\tdep[1]=1;dfs1(1);dfs2(1,1);\n\tfor(int i=1;i<=n;i++)add(i,v[rnk[i-1]]^v[rnk[i]]);\n\tint qwq=0;\n\twhile(q--)\n\t{\n\t\tscanf(\"%s%d%d\",op,&x,&y);\n\t\tif(op[0]=='U')\n\t\t{\n\t\t\tscanf(\"%d\",&z);\n\t\t\tUpdate(x,y,z);\n\t\t}\n\t\telse\n\t\t{ \n\t\t\tans.clear();\n\t\t\tt=LCA(x,y);\n\t\t\tif(dep[x]+dep[y]-dep[t]*2+1>=31){printf(\"YES\\n\");continue;}\n\t\t\ttf=false;\n\t\t\tif(!ans.insert(query(dfn[t])))tf=true;\n\t\t\tif(!tf)while(x!=t)\n\t\t\t{\n\t\t\t\tif(!ans.insert(query(dfn[x]))){tf=true;break;}\n\t\t\t\tx=fa[x];\n\t\t\t}\n\t\t\tif(!tf)while(y!=t)\n\t\t\t{\n\t\t\t\tif(!ans.insert(query(dfn[y]))){tf=true;break;}\n\t\t\t\ty=fa[y];\n\t\t\t}\n\t\t\tif(tf)printf(\"YES\\n\");\n\t\t\telse printf(\"NO\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1568278006,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2 $\\to$ [link](https://blog.csdn.net/BWzhuzehao/article/details/118398288)\n\n\u672c\u9898\u505a\u6cd5\uff1a\u6811\u94fe\u5256\u5206 + \u7ebf\u6027\u57fa\u3002\n\n\u6ca1\u6709\u5b66\u8fc7\u6811\u94fe\u5256\u5206\u548c\u7ebf\u6027\u57fa\uff1f\u5de6\u8f6c[\u6211\u7684\u6811\u94fe\u5256\u5206\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/BWzhuzehao/article/details/108280459)\uff0c\u53f3\u8f6c[\u6211\u7684\u7ebf\u6027\u57fa\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/BWzhuzehao/article/details/118388282)\u3002\n\n\u4e0b\u9762\u9ed8\u8ba4\u8bfb\u8005\u5b66\u4f1a\u4e86\u6811\u94fe\u5256\u5206\u4e0e\u7ebf\u6027\u57fa\u3002\n\n\u9996\u5148\u5bf9\u4e8e Query \u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u8f6c\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u70b9\u800c\u8a00\uff0c\u662f\u5426\u80fd\u591f\u9009\u51fa\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u70b9\u6743\u5f02\u6216\u503c\u4e3a 0\u3002\n\n\u8fd9\u4e48\u505a\u7684\u7406\u7531\u662f\u56e0\u4e3a\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u70b9\u96c6\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e24\u4e2a\u4e0d\u76f8\u540c\u7684\u96c6\u5408\u5176\u5f02\u6216\u503c\u76f8\u540c\u3002\n\n\u770b\u5230\u5f02\u6216\u503c\u8be2\u95ee\u662f\u5426\u6709 0\uff0c\u8fd9\u662f\u7ebf\u6027\u57fa\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\u5982\u679c\u6709\u6570\u63d2\u5165\u5931\u8d25\uff0c\u8fd9\u8bf4\u660e\u6709\u70b9\u96c6\u5f02\u6216\u7ed3\u679c\u4e3a 0\u3002\n\n\u56e0\u4e3a\u70b9\u6743\u7684\u503c\u57df\u662f $[0,2^{30})$\uff0c\u5728\u8fd9\u4e2a\u503c\u57df\u8303\u56f4\u4e0b\u7ebf\u6027\u57fa\u7684\u4e2a\u6570\u81f3\u591a\u53ea\u6709 30 \u4e2a\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6240\u6709\u8def\u5f84\u5927\u4e8e 30 \u7684\u8be2\u95ee\u5168\u90e8\u90fd\u662f `YES`\u3002\n\n\u5c0f\u4e8e\u7b49\u4e8e 30 \u7684\u8be2\u95ee\u5462\uff1f\u7531\u4e8e\u70b9\u6570\u53ea\u6709 30 \u4e2a\uff0c\u663e\u7136\u53ef\u4ee5\u66b4\u529b\u67e5\u627e\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u52a0\u5165\u7ebf\u6027\u57fa\u5373\u53ef\u3002\n\n\u5bf9\u4e8e Update \u64cd\u4f5c\uff0c\u5728\u6811\u5256\u4e4b\u540e\u76f4\u63a5\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff0cUpdate \u5373\u53ef\u3002\n\n\u5bf9\u4e8e Query \u64cd\u4f5c\uff0c\u4e0a\u9762\u5df2\u7ecf\u8be6\u7ec6\u8bb2\u8fc7\u4e86\uff0c\u53ea\u4e0d\u8fc7\u5f80\u7ebf\u6027\u57fa\u4e2d\u52a0\u6570\u7684\u65f6\u5019\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e2d\u5355\u70b9\u67e5\u8be2\u3002\n\nCode\uff1a[GitHub CodeBase-of-Plozia P5556 \u5723\u5251\u62a4\u7b26.cpp](https://github.com/Plozia/CodeBase-of-Plozia/blob/main/%E6%95%B0%E5%AD%A6%26%E6%95%B0%E8%AE%BA/%E7%BA%BF%E6%80%A7%E5%9F%BA/P5556%20%E5%9C%A3%E5%89%91%E6%8A%A4%E7%AC%A6.cpp)\n\n```cpp\n/*\n========= Plozia =========\n    Author:Plozia\n    Problem:P5556 \u5723\u5251\u62a4\u7b26\n    Date:2021/7/1\n========= Plozia =========\n*/\n\n#include <bits/stdc++.h>\nusing std::string;\n\ntypedef long long LL;\nconst int MAXN = 1e5 + 10;\nint n, m, aold[MAXN], a[MAXN], Head[MAXN], cnt_Edge = 1, Top[MAXN], Size[MAXN], Son[MAXN], id[MAXN], cnt, dep[MAXN], fa[MAXN], d[MAXN];\nstruct node { int to, Next; } Edge[MAXN << 1];\nstruct Tree\n{\n    int l, r, sum, Tag;\n    #define l(p) tree[p].l\n    #define r(p) tree[p].r\n    #define s(p) tree[p].sum\n    #define t(p) tree[p].Tag\n}tree[MAXN << 2];\n\nint Read()\n{\n    int sum = 0, fh = 1; char ch = getchar();\n    for (; ch < '0' || ch > '9'; ch = getchar()) fh -= (ch == '-') << 1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar()) sum = sum * 10 + (ch ^ 48);\n    return sum * fh;\n}\nint Max(int fir, int sec) { return (fir > sec) ? fir : sec; }\nint Min(int fir, int sec) { return (fir < sec) ? fir : sec; }\nvoid add_Edge(int x, int y) { ++cnt_Edge; Edge[cnt_Edge] = (node){y, Head[x]}; Head[x] = cnt_Edge; }\n\nvoid Build(int p, int l, int r)\n{\n    l(p) = l, r(p) = r;\n    if (l == r) { s(p) = a[l]; t(p) = 0; return ; }\n    int mid = (l + r) >> 1;\n    Build(p << 1, l, mid); Build(p << 1 | 1, mid + 1, r);\n    s(p) = s(p << 1) ^ s(p << 1 | 1);\n}\n\nvoid Spread(int p)\n{\n    if (t(p))\n    {\n        s(p << 1) ^= t(p); s(p << 1 | 1) ^= t(p);\n        t(p << 1) ^= t(p); t(p << 1 | 1) ^= t(p); t(p) = 0;\n    }\n}\n\nvoid Change(int p, int l, int r, int k)\n{\n    if (l(p) >= l && r(p) <= r) { s(p) ^= k; t(p) ^= k; return ; }\n    Spread(p); int mid = (l(p) + r(p)) >> 1;\n    if (l <= mid) Change(p << 1, l, r, k);\n    if (r > mid) Change(p << 1 | 1, l, r, k);\n    s(p) = s(p << 1) ^ s(p << 1 | 1);\n}\n\nint Ask(int p, int x)\n{\n    if (l(p) == r(p) && l(p) == x) return s(p);\n    Spread(p); int mid = (l(p) + r(p)) >> 1;\n    if (x <= mid) return Ask(p << 1, x);\n    else return Ask(p << 1 | 1, x);\n}\n\nvoid dfs1(int now, int father, int depth)\n{\n    dep[now] = depth, fa[now] = father, Size[now] = 1;\n    for (int i = Head[now]; i; i = Edge[i].Next)\n    {\n        int u = Edge[i].to;\n        if (u == father) continue ;\n        dfs1(u, now, depth + 1);\n        Size[now] += Size[u];\n        if (Size[Son[now]] < Size[u]) Son[now] = u;\n    }\n}\n\nvoid dfs2(int now, int Top_father)\n{\n    id[now] = ++cnt; a[cnt] = aold[now]; Top[now] = Top_father;\n    if (Son[now] == 0) return ;\n    dfs2(Son[now], Top_father);\n    for (int i = Head[now]; i; i = Edge[i].Next)\n    {\n        int u = Edge[i].to;\n        if (u == fa[now] || u == Son[now]) continue ;\n        dfs2(u, u);\n    }\n}\n\nint Add(int x)\n{\n    for (int i = 33; i >= 0; --i)\n    {\n        if (x & (1 << i))\n        {\n            if (d[i] & x) x ^= d[i];\n            else { d[i] = x; return 0; }\n        }\n    }\n    return 1;\n}\n\nint main()\n{\n    n = Read(), m = Read();\n    for (int i = 1; i <= n; ++i) aold[i] = Read();\n    for (int i = 1; i < n; ++i)\n    {\n        int x = Read(), y = Read();\n        add_Edge(x, y); add_Edge(y, x);\n    }\n    dfs1(1, 0, 1); dfs2(1, 1); Build(1, 1, n);\n    for (int i = 1; i <= m; ++i)\n    {\n        string str;\n        std::cin >> str;\n        if (str == \"Update\")\n        {\n            int x = Read(), y = Read(), z = Read();\n            while (Top[x] != Top[y])\n            {\n                if (dep[Top[x]] < dep[Top[y]]) std::swap(x, y);\n                Change(1, id[Top[x]], id[x], z); x = fa[Top[x]];\n            }\n            if (dep[x] > dep[y]) std::swap(x, y);\n            Change(1, id[x], id[y], z);\n        }\n        else\n        {\n            int x = Read(), y = Read();\n            int dis = 0, lca = 0, tx = x, ty = y;\n            while (Top[x] != Top[y])\n            {\n                if (dep[Top[x]] < dep[Top[y]]) std::swap(x, y);\n                dis += id[x] - id[Top[x]]; x = fa[Top[x]];\n            }\n            if (dep[x] > dep[y]) std::swap(x, y);\n            dis += id[y] - id[x]; lca = x;\n            if (dis > 31) { printf(\"YES\\n\"); continue ; }\n            for(int j = 0; j <= 33; ++j) d[j] = 0;\n            bool flag = Add(Ask(1, id[lca]));\n            for (int j = tx; j != lca; j = fa[j]) flag |= Add(Ask(1, id[j]));\n            for (int j = ty; j != lca; j = fa[j]) flag |= Add(Ask(1, id[j]));\n            if (flag) printf(\"YES\\n\");\n            else printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1625806462,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "P5556 \u5723\u5251\u62a4\u7b26 \u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u53d1\u73b0\u8be2\u95ee\u5982\u679c\u662fNO\uff0c\u90a3\u4e48$x,y$\u8def\u5f84\u4e0a\u7684\u70b9\u662f\u7ebf\u6027\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u63d2\u5165\u8def\u5f84\u4e0a\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u65e0\u6cd5\u63d2\u5165\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662fYES\uff0c\u5426\u5219\u5c31\u662fNO\u3002\n\n\u800c\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u80af\u5b9a\u662f\u4e0d\u5bf9\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5bfb\u627e\u4e00\u4e9b\u89c4\u5f8b\u3002\n\n\u5728\u5f53\u524d\u90fd\u662fNO\u7684\u524d\u63d0\u4e0b\uff0c\u53d1\u73b0\u6700\u591a\u63d2\u5165$31$\u4e2a\u6570\u5c31\u4e00\u5b9a\u80fd\u4f7f\u7ebf\u6027\u57fa\u63d2\u6ee1\uff0c\u518d\u63d2\u5165\u5c31\u4e00\u5b9a\u63d2\u4e0d\u8fdb\u53bb\u4e86\uff0c\u6240\u4ee5\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u5982\u679c\u5927\u4e8e$31$\u90a3\u4e48\u7b54\u6848\u80af\u5b9a\u662fYES\u3002\n\n\u5c0f\u4e8e\u7b49\u4e8e$31$\u7684\u8be2\u95ee\u679a\u4e3e\u6bcf\u4e2a\u70b9\u66b4\u529b\u63d2\u5165\u5224\u65ad\u5c31\u597d\u4e86\u3002\n\n\u9700\u8981\u6811\u5256\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5f02\u6216\u548c\u5355\u70b9\u67e5\u8be2\u3002\n\n\u590d\u6742\u5ea6$O(n31logn)$\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nconst int N = 1e5;\nusing namespace std;\nint n,p[31],q,edge[N * 2 + 5],nxt[N * 2 + 5],head[N + 5],edge_cnt,dfn[N + 5],dfc,size[N + 5],son[N + 5],top[N + 5],dep[N + 5],fa[N + 5],val[N + 5],ID[N + 5];\nchar ch[10];\nvoid add_edge(int u,int v)\n{\n    edge[++edge_cnt] = v;\n    nxt[edge_cnt] = head[u];\n    head[u] = edge_cnt;\n}\nstruct Seg\n{\n    #define zrt k << 1\n    #define yrt k << 1 | 1\n    int tag[N * 4 + 5],sm[N * 4 + 5];\n    void build(int k,int l,int r)\n    {\n        if (l == r)\n        {\n            sm[k] = val[ID[l]];\n            return;\n        }\n        int mid = l + r >> 1;\n        build(zrt,l,mid);\n        build(yrt,mid + 1,r);\n    }\n    void add(int k,int l,int r,int z)\n    {\n        tag[k] ^= z;\n        sm[k] ^= z;\n    }\n    void pushdown(int k,int l,int r,int mid)\n    {\n        if (tag[k])\n        {\n            add(zrt,l,mid,tag[k]);\n            add(yrt,mid +1,r,tag[k]);\n            tag[k] = 0;\n        }\n    }\n    void modify(int k,int l,int r,int x,int y,int z)\n    {\n        if (l >= x && r <= y)\n        {\n            add(k,l,r,z);\n            return;\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            modify(zrt,l,mid,x,y,z);\n        if (y > mid)\n            modify(yrt,mid + 1,r,x,y,z);\n    }\n    int query(int k,int l,int r,int x)\n    {\n        if (l == r)\n            return sm[k];\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            return query(zrt,l,mid,x);\n        else\n            return query(yrt,mid + 1,r,x);\n    }\n}tree;\nvoid dfs1(int u,int f)\n{\n    fa[u] = f;\n    size[u] = 1;\n    dep[u] = dep[f] + 1;\n    for (int i = head[u];i;i = nxt[i])\n    {\n        int v = edge[i];\n        if (v == f)\n            continue;\n        dfs1(v,u);\n        size[u] += size[v];\n        if (size[v] > size[son[u]]) \n            son[u] = v;\n    }\n}\nvoid dfs2(int u,int to)\n{\n    top[u] = to;\n    dfn[u] = ++dfc;\n    ID[dfc] = u;\n    if (son[u])\n        dfs2(son[u],to);\n    for (int i = head[u];i;i = nxt[i])\n    {\n        int v = edge[i];\n        if (v == son[u] || v == fa[u])\n            continue;\n        dfs2(v,v);\n    }\n}   \nint lca(int x,int y)\n{\n    while (top[x] != top[y])\n    {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x,y);\n        x = fa[top[x]];\n    }\n    if (dep[x] > dep[y])\n        swap(x,y);\n    return x;\n}\nint dist(int x,int y)\n{\n    return dep[x] + dep[y] - 2 * dep[lca(x,y)];\n}\nbool ins(int x)\n{\n    if (!x)\n        return 0;\n    for (int i = 30;i >= 0;i--)\n        if (x >> i & 1)\n        {\n            if (!p[i])\n            {\n                p[i] = x;\n                return 1;\n            }\n            x ^= p[i];\n        }\n    return 0;\n}\nbool query(int x,int y)\n{\n    memset(p,0,sizeof(p));\n    while (top[x] != top[y])\n    {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x,y);\n        for (int i = dfn[top[x]];i <= dfn[x];i++)\n            if (!ins(tree.query(1,1,n,i)))\n                return 1;\n        x = fa[top[x]];\n    }\n    if (dfn[x] > dfn[y])\n        swap(x,y);\n    for (int i = dfn[x];i <= dfn[y];i++)\n        if (!ins(tree.query(1,1,n,i)))\n            return 1;\n    return 0;\n}\nvoid modify(int x,int y,int z)\n{\n    while (top[x] != top[y])\n    {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x,y);\n        tree.modify(1,1,n,dfn[top[x]],dfn[x],z);\n        x = fa[top[x]];\n    }\n    if (dfn[x] > dfn[y])\n        swap(x,y);\n    tree.modify(1,1,n,dfn[x],dfn[y],z);\n}\nint main()\n{\n    //freopen(\"p5556.in\",\"r\",stdin);\n    //freopen(\"a1.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&q);\n    int u,v;\n    for (int i = 1;i <= n;i++)\n        scanf(\"%d\",&val[i]);\n    for (int i = 1;i < n;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    tree.build(1,1,n);\n    int x,y,z;\n    while (q--)\n    {\n        scanf(\"%s\",ch + 1);\n        if (ch[1] == 'Q')\n        {\n            scanf(\"%d%d\",&x,&y);\n            if (dist(x,y) > 31)\n                printf(\"YES\\n\");\n            else\n            {\n                if (query(x,y))\n                    printf(\"YES\\n\");\n                else\n                    printf(\"NO\\n\");\n            }\n        }\n        else\n        {\n            scanf(\"%d%d%d\",&x,&y,&z);\n            modify(x,y,z);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1600225558,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    },
    {
        "content": "\n**Problem** \n\n\u5c0fL \u548c \u5c0fK \u9762\u524d\u7684\u5723\u5251\u7531 $n$ \u5757\u62a4\u7b26\u7ec4\u6210\uff0c\u5206\u522b\u7f16\u53f7\u4e3a $1,2,\\ldots , n$ \uff0c\u6709 $n-1$ \u6761\u5492\u529b\u7ebf\u8fde\u63a5\u4e24\u5757\u62a4\u7b26\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002\n\n\u7ecf\u8fc7 \u5c0fL \u548c \u5c0fK \u7684\u957f\u65f6\u95f4\u7684\u7814\u7a76\uff0c\u4ed6\u4eec\u53d1\u73b0\u62a4\u7b26\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u5e76\u4e0d\u590d\u6742\u3002\u6bcf\u5757\u62a4\u7b26\u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\u503c\uff0c\u7b2c $i$ \u5757\u62a4\u7b26\u7684\u5c5e\u6027\u503c\u8bb0\u4e3a $v_i$  \u3002\u8fd9\u4e2a\u503c\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684 $0$ \u6216 $1$ \u8868\u793a\u8fd9\u5757\u62a4\u7b26\u662f\u5426\u62e5\u6709\u7279\u5b9a\u5c5e\u6027\u3002\u6240\u6709\u5c5e\u6027\u503c\u4e2d\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u4f4d\u5bf9\u5e94\u7684\u662f\u76f8\u540c\u7684\u5c5e\u6027\u3002\n\n\u5bf9\u4e8e\u4e00\u7cfb\u5217\u62a4\u7b26\uff08\u62a4\u7b26\u7684\u96c6\u5408\uff09\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u7279\u5b9a\u5c5e\u6027\uff0c\u7edf\u8ba1\u5176\u4e2d\u5305\u542b\u8fd9\u4e00\u5c5e\u6027\u7684\u62a4\u7b26\u6570\u91cf\uff0c\u5982\u679c\u4e3a\u5076\u6570\uff0c\u5219\u8fd9\u4e00\u7cfb\u5217\u62a4\u7b26\u5f62\u6210\u4e86\u5e72\u6d89\uff0c\u6700\u7ec8\u7684\u5c5e\u6027\u503c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u4e3a $0$ \uff0c\u5982\u679c\u4e3a\u5947\u6570\u5219\u5e72\u6d89\u540e\u5269\u4e0b\u4e86\u4e00\u5757\u62a4\u7b26\u7684\u5f71\u54cd\uff0c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e3a $1$ \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c **\u62a4\u7b26\u96c6\u5408\u7684\u5c5e\u6027\u503c\u4e3a\u5355\u4e2a\u62a4\u7b26\u7684\u5c5e\u6027\u503c\u7684\u5f02\u6216\u548c** \u3002 \u7a7a\u96c6\u7684\u5c5e\u6027\u503c\u5b9a\u4e49\u4e3a $0$ \u3002\n\n\u73b0\u5728\uff0c\u5c0fL\u60f3\u77e5\u9053\uff0c\u5982\u679c\u53d6\u51fa\u4e24\u5757\u62a4\u7b26 $x,y$ \u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6240\u6709\u62a4\u7b26\uff0c\u80fd\u5426\u627e\u5230\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5c5e\u6027\u503c\u76f8\u540c\uff08\u6ce8\u610f\u5230\u7a7a\u96c6\u4e5f\u662f\u8def\u5f84\u4e0a\u6240\u6709\u62a4\u7b26\u96c6\u5408\u7684\u5b50\u96c6\uff09\u3002\u540c\u65f6\uff0c\u5c0fK\u4f1a\u5c06\u4e24\u5757\u62a4\u7b26\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u62a4\u7b26\u53d6\u51fa\u8fdb\u884c\u8c03\u6574\uff0c\u5c06\u6240\u6709\u8fd9\u4e9b\u62a4\u7b26\u7684\u5c5e\u6027\u503c\u5728\u67d0\u4e9b\u76f8\u540c\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u8fdb\u884c\u4fee\u6539\uff08\u5373 $0$ \u53d8\u4e3a $1$ \uff0c$1$ \u53d8\u4e3a $0$ \uff09\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u5c06\u6240\u6709\u8fd9\u4e9b\u62a4\u7b26\u7684\u5c5e\u6027\u503c\u5f02\u6216\u4e0a\u4e86\u4e00\u4e2a\u503c\u3002\n\n \n\n$1\\le n,q\\le 10^5,1\\le x,y\\le n,0\\le v_i,z< 2^{30}$\n\n**Solution**\n\n\n\u9898\u76ee\u6bd4\u8f83\u957f\uff0c\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f\u8def\u5f84\uff0c\u770b\u505a\u4e00\u4e2a\u6570\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u9009\u53d6\u4e24\u4e2a\u5b50\u96c6\uff0c\u8fd9\u4e24\u4e2a\u5b50\u96c6\u7684\u5f02\u6216\u548c\u76f8\u7b49\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u5f02\u6216\u548c\u76f8\u7b49\u7684\u81ea\u5df1\u518d\u6b21\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u5f02\u6216\u548c\u4e3a $0$ \u7684\u5b50\u96c6\uff0c\u7531\u4e8e\u8def\u5f84\u4e0a\u4e00\u5b9a\u5b58\u5728\u7a7a\u96c6\uff0c\u7a7a\u96c6\u5f02\u6216\u548c\u4e3a $0$ \uff0c\u8be5\u5f02\u6216\u548c\u4e3a $0$ \u7684\u5b50\u96c6\u5c31\u4e0e\u7a7a\u96c6\u914d\u5bf9\uff0c\u8f93\u51fa `YES`\uff0c\u4e5f\u5c31\u662f\u8bf4\u9898\u76ee\u6240\u6c42\u662f\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u4e14\u8be5\u5b50\u96c6\u7684\u5f02\u6216\u548c\u4e3a $0$ \u3002\n\n\u8003\u8651\u6c42\u5f02\u6216\u548c\u663e\u7136\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6027\u57fa\u3002\u6211\u4eec\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5b83\u7684\u7ebf\u6027\u57fa\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u5f97\u4ed6\u4eec\u80fd\u591f\u5f02\u6216\u5f97\u5230\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u503c\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6dfb\u52a0\u81f3\u7ebf\u6027\u57fa\u4e2d\uff0c\u5bf9\u4e8e\u5f53\u524d\u7684\u503c $v_x$\uff0c\u82e5\u52a0\u5165\u540e\u51fa\u73b0\u67d0\u5b50\u96c6\u7684\u5f02\u6216\u548c\u4e3a $0$\uff0c\u8bf4\u660e\u52a0\u5165 $v_x$ \u524d\u7684\u7ebf\u6027\u57fa\u53ef\u4ee5\u5f02\u6216\u7ebf\u6027\u8868\u51fa $v_x$\uff0c\u6b64\u65f6\u6211\u4eec\u4f7f\u7528\u7ebf\u6027\u57fa `insert`  $v_x$ \u5c31\u4f1a\u5931\u8d25\uff0c\u76f4\u63a5\u8f93\u51fa `YES` \u5373\u53ef\u3002\n\n\u8003\u8651\u6811\u4e0a\u8def\u5f84\u95ee\u9898\uff0c\u4ee5\u53ca\u8def\u5f84\u4fee\u6539\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u6811\u94fe\u5256\u5206 + \u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u4f46\u662f\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^5 v)$\uff0c\u8003\u8651\u80fd\u5426\u4f18\u5316\u3002\n\n\n\u6211\u4eec\u53d1\u73b0\u8f93\u5165\u7684\u6570\u636e $v_i\\le 2^{30}$\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u7ebf\u6027\u57fa\u7684\u7ef4\u5ea6\u4e0d\u8d85\u8fc7 $30$\uff0c\u5047\u8bbe\u4e00\u6761\u8def\u5f84\u4e0a\u6709 $num\\ge30$ \u4e2a\u70b9\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9\uff0c\u5047\u8bbe\u4ed6\u4eec\u90fd\u7ebf\u6027\u65e0\u5173\uff0c\u4e5f\u6700\u591a\u80fd\u63d2\u5165 $30$ \u4e2a\u70b9\uff0c\u8d85\u8fc7 $30$ \u4e2a\u70b9\uff0c\u5f00\u59cb\u7684 $30$ \u4e2a\u70b9\u7531\u4e8e\u7ebf\u6027\u65e0\u5173\u7ec4\u6210\u4e86\u7ebf\u6027\u57fa\uff0c\u65b0\u52a0\u5165\u7684\u70b9\u4e00\u5b9a\u80fd\u591f\u88ab\u7ebf\u6027\u8868\u51fa\uff0c\u76f4\u63a5\u8f93\u51fa `YES` \u5373\u53ef\u3002\u82e5\u524d\u9762\u63d2\u5165\u7684\u5e76\u4e0d\u662f\u5168\u90e8\u7ebf\u6027\u65e0\u5173\uff0c\u663e\u7136\u4e5f\u76f4\u63a5\u8f93\u51fa `YES` \u5373\u53ef\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5728\u8def\u5f84\u957f\u5ea6\u5c0f\u4e8e $30$ \u7684\u65f6\u5019\u66b4\u529b\u505a\u6811\u94fe\u5256\u5206\uff0c\u5927\u4e8e $30$ \u7684\u65f6\u5019\u76f4\u63a5\u8f93\u51fa `YES` \u5373\u53ef\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n**Code**\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int maxn = 1e5 + 7, maxm = maxn << 1 | 7;\n\nint n, m, s, t, ans;\nint head[maxn], edge[maxm], nex[maxm], ver[maxm], tot;\nint hson[maxn];\nint depth[maxn];\nint siz[maxn];\nint fa[maxn];\nint dfn[maxn], idx; \nint a_after[maxn];\nint top[maxn];\nint id[maxn];\nbool flag;\nbool vis[maxn];\nint v[maxn];\nint q;\n\nstruct Segment_tree\n{\n\tstruct Tree\n\t{\n\t\tint l, r, num, laz;\n\t}tr[maxn << 2];\n\t\n\tvoid pushdown(int p)\n\t{\n\t\tif(tr[p].laz) {\n\t\t\ttr[p << 1].laz ^= tr[p].laz;\n\t\t\ttr[p << 1].num ^= tr[p].laz;\n\t\t\ttr[p << 1 | 1].laz ^= tr[p].laz;\n\t\t\ttr[p << 1 | 1].num ^= tr[p].laz;\n\t\t\ttr[p].laz = 0;\n\t\t}\n\t}\n\t\n\tvoid modify(int p, int l, int r, int v)\n\t{\n\t\tif(tr[p].l > r || tr[p].r < l) return ;\n\t\tif(tr[p].l >= l && tr[p].r <= r) {\n\t\t\ttr[p].num ^= v;\n\t\t\ttr[p].laz ^= v;\n\t\t\treturn ;\n\t\t}\n\t\tpushdown(p);\n\t\tmodify(p << 1, l, r, v);\n\t\tmodify(p << 1 | 1, l, r, v);\n\t}\n\t\n\tint query(int p, int pos)\n\t{\n\t\tif(tr[p].l == tr[p].r) return tr[p].num;\n\t\tpushdown(p);\n\t\tint mid = tr[p].l + tr[p].r >> 1;\n\t\tif(pos <= mid) return query(p << 1, pos);\n\t\treturn query(p << 1 | 1, pos);\n\t}\n\t\n\tvoid print(int p)\n\t{\n\t\tif(tr[p].l == tr[p].r) printf(\"%d \", tr[p].num);\n\t\telse {\n\t\t\tpushdown(p);\n\t\t\tprint(p << 1);\n\t\t\tprint(p << 1 | 1);\n\t\t}\n\t}\n\t\n\tvoid build(int p, int l, int r)\n\t{\n\t\ttr[p].l = l, tr[p].r = r;\n\t\ttr[p].num = 0, tr[p].laz = 0;\n\t\tif(l == r) return ;\n\t\tint mid = l + r >> 1;\n\t\tbuild(p << 1, l, mid);\n\t\tbuild(p << 1 | 1, mid + 1, r);\n\t}\n}ST;\n\nvoid add(int x, int y)\n{\n\tver[tot] = y;\n\tnex[tot] = head[x];\n\thead[x] = tot ++ ;\n}\n\nvoid dfs1(int x, int father, int depths)\n{\n\tsiz[x] = 1;\n\tfa[x] = father;\n\tdepth[x] = depths;\n\tint max_son_size = -1;\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tif(y == father) continue;\n\t\tdfs1(y, x, depths + 1);\n\t\tsiz[x] += siz[y];\n\t\tif(siz[y] > max_son_size)\n\t\t\thson[x] = y, max_son_size = siz[y];\n\t}\n}\n\nvoid dfs2(int x, int topfa)\n{\n\tdfn[x] = ++ idx;\n\tid[idx] = x;\n\ta_after[idx] = v[x];\n\ttop[x] = topfa;\n\t\n\tST.modify(1, idx, idx, v[x]);\n\tif(hson[x] == 0) return ;\n\tdfs2(hson[x], topfa);\n\tfor (int i = head[x]; ~i; i = nex[i]) {\n\t\tint y = ver[i];\n\t\tif(y == fa[x] || y == hson[x]) continue;\n\t\tdfs2(y, y);\n\t}\n}\n\nint get_lca(int x, int y)\n{\n\twhile(top[x] != top[y]) {\n\t\tif(depth[top[x]] > depth[top[y]])\n\t\t\tx = fa[top[x]];\n\t\telse y = fa[top[y]];\n\t}\n\tif(depth[x] < depth[y]) return x;\n\treturn y;\n}\n\nstruct leaner_basis \n{\n\tint b[31];\n\tvoid init() {\n\t\tmemset(b, 0, sizeof b);\n\t}\n\tbool insert(int x) {\n\t\tfor(int i = 31 - 1;i >= 0; -- i){\n\t\t\tif((x & (1 << i)) == 0)\n\t\t\t\tcontinue;\n\t\t\tif(b[i] == 0){\n\t\t\t\tb[i] = x;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tx ^= b[i];\n\t\t}\n\t\treturn false;\n\t}\n}B;\n\nbool work(int lca, int x, int y)\n{\n\tB.init();\n\tif(B.insert(ST.query(1, dfn[lca])) == 0)\n\t\treturn true; \n\twhile(x != lca) \n\t\tif(B.insert(ST.query(1, dfn[x])) == 0) \n\t\t\treturn true;\n\t\telse x = fa[x];\n\twhile(y != lca) \n\t\tif(B.insert(ST.query(1, dfn[y])) == 0) \n\t\t\treturn true;\n\t\telse y = fa[y];\n\treturn false;\n}\n\nvoid update(int x, int y, int z)\n{\n\twhile(top[x] != top[y]) {\n\t\tif(depth[top[x]] < depth[top[y]])\n\t\t\tswap(x, y);\n\t\tST.modify(1, dfn[top[x]], dfn[x], z);\n\t\tx = fa[top[x]];\n\t}\n\tif(dfn[x] > dfn[y])\n\t\tswap(x, y);\n\tST.modify(1, dfn[x], dfn[y], z);\n}\n\nsigned main()\n{\n\tmemset(head, -1, sizeof head);\n\tscanf(\"%lld%lld\", &n, &q);\n\tfor (int i = 1; i <= n; ++ i)\n\t\tscanf(\"%lld\", &v[i]);\n\tfor (int i = 1; i <= n - 1; ++ i) {\n\t\tint x, y;\n\t\tscanf(\"%lld%lld\", &x, &y);\n\t\tadd(x, y);\n\t\tadd(y, x);\n\t}\t\n\tST.build(1, 1, n); \n\tdfs1(1, -1, 1); \n\tdfs2(1, 1);\n\tfor (int i = 1; i <= q; ++ i) {\n\t\tstring ch;\n\t\tcin >> ch;\n\t\tif(ch == \"Query\") {\n\t\t\tint x, y;\n\t\t\tscanf(\"%lld%lld\", &x, &y);\n\t\t\tint lca = get_lca(x, y);\n\t\t\tint dist = depth[x] + depth[y] - 2 * depth[lca] + 1;//\u7ecf\u8fc7\u7684\u70b9\u6570\n\t\t\tif(dist > 30)\n\t\t\t\tputs(\"YES\");\n\t\t\telse {\n\t\t\t\tif(work(lca, x, y))\n\t\t\t\t\tputs(\"YES\");\n\t\t\t\telse puts(\"NO\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint x, y, z;\n\t\t\tscanf(\"%lld%lld%lld\", &x, &y, &z);\n\t\t\tupdate(x, y, z);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1631628267,
        "uid": 262605,
        "name": "fanfansann",
        "ccfLevel": 0,
        "title": "Luogu P5556 \u5723\u5251\u62a4\u7b26\uff08\u7ebf\u6027\u57fa\uff0c\u6811\u94fe\u5256\u5206\uff0c\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "\u5efa\u6811\u5efa\u9519\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\u3002        \n\n\u62ff\u5230\u8fd9\u9053\u9898\uff0c\u770b\u8fd9\u4e2a qry \uff0c\u5224\u6709\u6ca1\u6709\u4e24\u4e2a\u5b50\u96c6\u5f02\u6216\u8d77\u6765\u662f\u4e0d\u662f\u76f8\u7b49\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u60f3\u5230\u7ebf\u6027\u57fa\u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u5982\u679c\u6700\u540e\u5168\u63d2\u5165\u8fdb\u53bb\u4e86\u5c31\u662f\u6709\u5b50\u96c6\u7684\u5f02\u6216\u503c\u76f8\u7b49\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u3002         \n\n\u7136\u540e\u6211\u770b\u5230\u8fd9\u4e2a upd \uff0c\u6211\u76f4\u547c\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a[\u65e0\u529b\u56de\u5929](https://www.luogu.com.cn/problem/P5607) \u4e0a\u6811\u5417\uff1f\u7136\u540e\u5f00\u5f00\u5fc3\u5fc3\uff0c\u4e00\u624b\u4e00\u4e2a\u5dee\u5206\uff0c\u4e00\u624b\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5f80\u4e0a\u9762\u5957\uff0c\u5199\u5230\u4e00\u534a\u5c31\u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u6709\u70b9\u4e0d\u5bf9\uff0c\u53c8\u4ed4\u7ec6\u7b97\u4e86\u4e00\u4e0b\uff0c upd \u4e00\u6b21\u8981 $\\log^2$ \uff0c\u7136\u540e\u4e00\u4e2a\u6811\u5256\u5c31\u662f $\\log^3$ \u2026\u2026             \n\n\u7136\u540e\u5c31\u6709\u70b9\u5c34\u5c2c\uff0c\u53c8\u60f3\u8d77\u6765\u4e86\u4e00\u4e2a\u5f88 naive \u7684\u6027\u8d28\uff0c\u7ebf\u6027\u57fa\u7684\u63d2\u5165\u4e0a\u9650\u4e3a $O(\\log_{MaxV})$ \u3002       \n\n\u63a5\u7740\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u5bf9\u4e8e\u8def\u5f84\u4e0a\u7684\u70b9\u6570\u5927\u4e8e $\\log_{MaxV}$ \u7684\u60c5\u51b5\u6211\u4eec\u76f4\u63a5 YES \u6389\uff0c\u76f8\u53cd\uff0c\u5c31\u8bf4\u660e\u5f53\u524d\u8def\u5f84\u7684\u70b9\u6570\u5c0f\u4e8e $\\log_{MaxV}$ \uff0c\u6211\u4eec\u66b4\u529b\u628a\u8fd9\u6761\u8def\u5f84\u7684\u7ebf\u6027\u57fa\u5408\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u5bf9\u4e8e\u4fee\u6539\u6211\u4eec\u76f4\u63a5\u6811\u5256\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u7684\u503c\u5373\u53ef\u3002          \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int Len = 4e5 + 5,LOG = 30;\nint sz[Len],top[Len],fa[Len],son[Len],id[Len],dep[Len],val[Len];\nint a[Len],n,m,head[Len],cnt,tot,tag[Len << 2],ans[Len << 2];\nstruct LinearBasis\n{\n\tint a[LOG + 5];\n\tLinearBasis(){memset(a , 0 , sizeof a);}\n\tinline bool insert(int t)\n\t{\n\t\tfor(int i = LOG ; i >= 0 ; i --)\n\t\t{\n\t\t\tif(!t) return false;\n\t\t\tif(!(t >> i & 1)) continue;\n\t\t\tif(a[i]) t ^= a[i];\n\t\t\telse{a[i] = t ; return true;}\n\t\t}\n\t\treturn false;\n\t}\n};\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to){edge[++ cnt].to = to ; edge[cnt].next = head[from] ; head[from] = cnt;}\nvoid dfs1(int x,int f)\n{\n\tdep[x] = dep[f] + 1;\n\tfa[x] = f;\n\tsz[x] = 1;\n\tint maxn = -1;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs1(to , x);\n\t\tsz[x] += sz[to];\n\t\tif(sz[to] > maxn) maxn = sz[to] , son[x] = to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tid[x] = ++ tot;\n\tval[tot] = a[x];\n\ttop[x] = topf;\n\tif(!son[x]) return;\n\tdfs2(son[x] , topf);\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs2(to , to);\n\t}\n}\nint ls(int x){return x << 1;};\nint rs(int x){return x << 1 | 1;}\nvoid build(int p,int l,int r)\n{\n\tans[p] = 0 , tag[p] = 0;\n\tif(l == r){ans[p] = val[l];return;}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n}\nvoid push_down(int p,int l,int r)\n{\n\tif(tag[p])\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tif(l == mid) ans[ls(p)] ^= tag[p];\n\t\tif(mid + 1 == r) ans[rs(p)] ^= tag[p];\n\t\telse tag[ls(p)] ^= tag[p] , tag[rs(p)] ^= tag[p]; \n\t}\n\ttag[p] = 0;\n}\ninline void update(int p,int l,int r,int nl,int nr,int v)\n{\n\tif(nl <= l && nr >= r)\n\t{\n\t\tans[p] ^= v;\n\t\ttag[p] ^= v;\n\t\treturn;\n\t}\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update(ls(p) , l , mid , nl , nr , v);\n\tif(nr > mid) update(rs(p) , mid + 1 , r , nl , nr , v);\n}\ninline int query(int p,int l,int r,int idx)\n{\n\tif(l == r) return ans[p];\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) return query(ls(p) , l , mid , idx);\n\treturn query(rs(p) , mid + 1 , r , idx);\n}\ninline void updRange(int x,int y,int v)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tupdate(1 , 1 , n , id[top[x]] , id[x] , v);\n\t\tx = fa[top[x]];\n\t}\n\tif(id[x] > id[y]) swap(x , y);\n\tupdate(1 , 1 , n , id[x] , id[y] , v);\n}\nint qRange_LCA(int x,int y)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x , y);\n\treturn x;\n}\nbool qry(int x,int y)\n{\n\tint LCA = qRange_LCA(x , y);\n\tint num = dep[x] + dep[y] - (dep[LCA] << 1) + 1;\n\tif(num > 31) return false;\n\tLinearBasis Calc;\n\twhile(x != LCA){if(!Calc.insert(query(1 , 1 , n , id[x]))) return false;x = fa[x];}\n\twhile(y != LCA){if(!Calc.insert(query(1 , 1 , n , id[y]))) return false;y = fa[y];}\n\treturn Calc.insert(query(1 , 1 , n , id[LCA]));\n}\nchar s[10];\nsigned main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%d\",&a[i]);\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\tadd(x , y) , add(y , x);\n\t}\n\tdfs1(1 , 0);\n\tdfs2(1 , 1);\n\tbuild(1 , 1 , n);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tscanf(\"%s\",s);int x,y;scanf(\"%d %d\",&x,&y);\n\t\tif(s[0] == 'U') \n\t\t{\n\t\t\tint z;scanf(\"%d\",&z);\n\t\t\tupdRange(x , y , z);\n\t\t}\n\t\telse {(qry(x , y)) ? puts(\"NO\") : puts(\"YES\");}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614847856,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5556 \u5723\u5251\u62a4\u7b26"
    },
    {
        "content": "## \u9898\u610f\n\u8282\u70b9\u4e2a\u6570\u4e3a $n$ \u7684\u6811\uff0c $m$ \u6b21\u64cd\u4f5c\u3002\n\n- \u67e5\u8be2 $x,y$ \u4e2d\u662f\u5426\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5143\u7d20\u53ea\u6709\u552f\u4e00\u5f02\u6216\u65b9\u6848\u3002\n- \u6539\u53d8 $x,y$ \u8def\u5f84\u4e0a\u7684\u6240\u6709\u5143\u7d20\u3002\n## \u5206\u6790\n### \u7b2c\u4e00\u95ee\n\u53d1\u73b0\u7b2c\u4e00\u95ee\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u7ebf\u578b\u57fa\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u53c2\u89c1 [\u8fd9\u91cc](https://www.luogu.com.cn/blog/xzc/xian-xing-ji) \uff0c\u6216\u8005\u5176\u4ed6\u9898\u89e3\u3002\u56e0\u4e3a\u4fdd\u8bc1 $w_i < 2^{30}$ \uff0c\u56e0\u4e3a\u7ebf\u6027\u57fa\u8981\u6ee1\u8db3:\u7ebf\u6027\u57fa\u7684\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u4e92\u4e0d\u76f8\u540c\u3002\u6240\u4ee5\u5bf9\u5e94\u7684\u7ebf\u6027\u57fa\u7684\u5927\u5c0f\u957f\u5ea6\u4e3a $30$ \u3002\u4e5f\u8bf4\u660e\u5982\u679c\u6709 $31$ \u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u53ef\u4ee5\u88ab\u6784\u9020\u51fa\u6765\u7684\u3002\n$$\nans = YES (sum \\ge 31) \n$$\n\u8003\u8651 $sum \\le 30$ \u7684\u60c5\u51b5\u3002\u5c31\u76f4\u63a5\u6784\u9020\u7ebf\u6027\u57fa\u3002\u66b4\u529b\u5224\u65ad\u4e86\u3002\n### \u7b2c\u4e8c\u95ee\n\u4e00\u4e2a\u6811\u4e0a\u95ee\u9898\uff0c\u8003\u8651\u7528 $Link -Cut-Tree$ \u7ef4\u62a4\u3002\u5176\u76ee\u7684\uff1a\n- \u4e00\uff1a\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\n- \u4e8c\uff1a\u4e0d\u5fc5\u518d\u6c42 $LCA$ \u4e86\uff0c\u56e0\u4e3a\u5b9e\u94fe\u5256\u5206\uff0c\u5728 $makeroot(x),access(y),splay(y)$ \u4e4b\u540e\u53ef\u4ee5\u786e\u4fdd $x$ \u662f\u539f\u6811\u7684\u6839\uff0c\u800c\u8def\u5f84\u4e5f\u53ea\u6709 $x->y$ \u7684\u3002\u53ef\u4ee5\u76f4\u63a5 $dfs$ \u4e86\u3002\n- \u4e09\uff1a\u5bf9\u4e8e $sum$ \u53ef\u4ee5\u4e00\u6b65\u5230\u4f4d \uff08\u6811\u94fe\u5256\u5206\u4e5f\u53ef\u4ee5\uff09\n## \u4ee3\u7801\n\u603b\u590d\u6742\u5ea6\u4e3a $O(n \\log n \\times \\log {w_{max}})$  \u3002 \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5+100;\nconst int inf = 2e5+10;\nint c[N][2],f[N],n,m,val[N],sum[N],lazy[N];\nbool r[N];\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\ninline void write(int x)\n{\n\tif(x>9)write(x/10);\n    putchar(x%10+'0');\n}\nvoid pushr(int x)\n{\n\tswap(c[x][1],c[x][0]);\n\tr[x] ^= 1;\n}\nvoid pushlazy(int x,int Val)\n{\n\tval[x] = val[x]^Val;\n\tlazy[x] = lazy[x]^Val;\n}\nvoid pushdown(int x)\n{\n\tif(r[x])\n\t{\n\t\tif(c[x][1]) pushr(c[x][1]);\n\t\tif(c[x][0]) pushr(c[x][0]);\n\t\tr[x] = 0;\n\t}\t\t\n\tif(lazy[x])\n\t{\n\t\tif(c[x][1]) pushlazy(c[x][1],lazy[x]);\n\t\tif(c[x][0]) pushlazy(c[x][0],lazy[x]);\n\t\tlazy[x] = 0;\n\t}\n}\nvoid pushup(int x)\n{\n\tsum[x] = 1;\n\tsum[x] += sum[c[x][1]] + sum[c[x][0]]; \n}\nbool nroot(int x)\n{\n\treturn c[f[x]][0] == x || c[f[x]][1] == x; \n}\nvoid rotate(int x)\n{\n\tint y = f[x],z = f[y],k = c[y][1] == x,w = c[x][!k];\n\tif(nroot(y)) c[z][c[z][1] == y] = x;\n\tc[x][!k] = y;c[y][k] = w;\n\tf[w] = y;f[y] = x;f[x] = z;\n\tpushup(y);\n}\nvoid push(int x)\n{\n\tif(nroot(x)) push(f[x]);\n\tpushdown(x);\n}\nvoid splay(int x)\n{\n\tpush(x);\n\twhile(nroot(x))\n\t{\n\t\tint y = f[x],z = f[y];\n\t\tif(nroot(y))\n\t\t{\n\t\t\trotate((c[y][1]==x)^(c[z][1]==y)?x:y);\n\t\t}\n\t\trotate(x);\n\t\tpushup(x);\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y = 0;x;x = f[y=x])\n\tsplay(x),c[x][1] = y,pushup(x);\n}\nvoid makeroot(int x)\n{\n\taccess(x);splay(x);pushr(x);\n}\nvoid link(int x,int y)\n{\n\tmakeroot(x);\n\tf[x] = y;\n}\nint p[32];\nbool solve(int u)\n{\n//\tcout<<\"debug \"<<u<<endl;\n\tfor(int i = 30;i >= 0;i--)\n\t{\n\t\tif(u&(1<<i))\n\t\t{\n\t\t\tif(!p[i])\n\t\t\t{\n\t\t\t\tp[i] = u;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tu ^= p[i];\n\t\t}\n\t}\n\treturn 1;\n}\nbool dfs(int x)\n{\n\tpushdown(x);\n\tif(solve(val[x])) {return 1;}\n\tbool tot = 0;\n//\tcout<<\"debug \"<<c[x][1]<<\" \"<<c[x][0]<<endl;\n\tif(c[x][1]) tot |= dfs(c[x][1]);\n\tif(c[x][0]) tot |= dfs(c[x][0]);\n\treturn tot;\n}\nsigned main()\n{\n\tn = read();m = read();\n\tfor(int i = 1;i <= n;i++) val[i] = read();\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tint a = read(),b = read();\n\t\tlink(a,b);\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tchar ch[10];\n\t\tscanf(\"%s\",ch);\n\t\tif(ch[0] == 'Q')\n\t\t{\n\t\t\tint x = read(),y = read();\n\t\t\tmakeroot(x);\n\t\t\taccess(y);\n\t\t\tsplay(y);\n\t\t\tif(sum[y] > 30)\n\t\t\t{\n\t\t\t\tprintf(\"YES\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmemset(p,0,sizeof(p));\n\t\t\tif(dfs(y))\n\t\t\t{\n\t\t\t\tprintf(\"YES\\n\");\n\t\t\t}\n\t\t\telse printf(\"NO\\n\");\n\t\t}\n\t\tif(ch[0] == 'U')\n\t\t{\n\t\t\tint x = read(),y = read(),z = read();\n\t\t\tmakeroot(x);\n\t\t\taccess(y);\n\t\t\tsplay(y);\n\t\t\tpushlazy(y,z);\n\t\t}\n//\t\tfor(int i = 1;i <= n;i++)\n//\t\t{\n//\t\t\tcout<<\"debug \"<<val[i]<<endl; \n//\t\t}\n//\t\tcout<<endl;\n\t}\n}\n```\n### 6.15 \u4fee\u6539\u4e86\u4ee3\u7801\u7684\u5c0f\u9519\u8bef\u3002\n\n[\u6b22\u8fce\u6765\u8e29](https://www.luogu.com.cn/blog/xzc/solution-p5556)",
        "postTime": 1592050635,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    },
    {
        "content": "\u505a\u8fd9\u9053\u9898\u9996\u5148\u9700\u8981\u60f3\u5230\u8fd9\u4e48\u4e00\u4e2a\u7ed3\u8bba\u4e0d\u7136\u5c31\u5b8c\u86cb\u4e86emmmmm\n\n\u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e30 \u90a3\u4e48\u4efb\u53d6\u4e00\u4e2a\u8be5\u5e8f\u5217\u7684\u5b50\u5e8f\u5217\uff0c\u6240\u6709\u5b50\u5e8f\u5217\u7684xor\u548c\u5fc5\u7136\u6709\u4e24\u4e2a\u662f\u91cd\u590d\u7684\uff0c\u8bc1\u660e\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6027\u57fa\uff0c\u63d2\u5165\u4e8630\u4e2a\u6570\u4e4b\u540e\uff0c\u5982\u679c\u524d30\u4e2a\u5168\u90e8\u6210\u529f\u63d2\u5165\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u5fc5\u7136\u65e0\u6cd5\u6210\u529f\u63d2\u5165\uff0c\u5176\u5b9e\u4e5f\u5c31\u4ee3\u8868\u4e4b\u524d\u7684\u6570\u80fd\u591f\u8868\u793a\u5f53\u524d\u7684xor\u548c\u3002\n\n\u6240\u4ee5\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u5927\u4e8e30\uff0c\u76f4\u63a5\u4e3ayes\n\u5426\u5219\u5c31\u5c06\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u6743\u4e00\u4e2a\u4e2a\u63d2\u5165\u4e00\u4e2a\u7a7a\u7684\u7ebf\u6027\u57fa\uff0c\u5982\u679c\u6709\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u65e0\u6cd5\u63d2\u8fdb\uff0c\u5219\u8f93\u51fayes\uff0c\u5426\u5219\u8f93\u51fano\n\n\u7b2c\u4e8c\u70b9\u8003\u8651\u5230\u4ed6\u662f\u5b50\u6811\u4fee\u6539\uff0c\u6240\u4ee5\u7528\u6811\u5256\u7ef4\u62a4\u70b9\u6743\uff0c\u8fd9\u91cc\u6811\u5256\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u5dee\u5206\u6811\u72b6\u6570\u7ec4\u90fd\u53ef\u4ee5\u3002\n```cpp\n#include<bits/stdc++.h>\n#define MAX_N 100010\nusing namespace std;\nint n,q,w[MAX_N];\ninline int read()\n{\n\tint x=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t\tch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t\tx=x*10+ch-'0',ch=getchar();\n\treturn x;\n}\nstruct edge\n{\n\tint v,next;\n}e[MAX_N<<1];\nint p[MAX_N],eid;\ninline void insert(int u,int v)\n{\n\te[++eid]={v,p[u]};\n\tp[u]=eid;\n}\nint idx,c[MAX_N],d[MAX_N],dep[MAX_N],size[MAX_N],son[MAX_N],top[MAX_N],fa[MAX_N];\nvoid dfs1(int u,int f)\n{\n\tfa[u]=f;\n\tsize[u]=1;\n\tdep[u]=dep[f]+1;\n\tfor(register int i=p[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==f)continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[son[u]]<size[v])son[u]=v;\n\t}\n}\nvoid dfs2(int u,int f)\n{\n\tc[u]=++idx,d[idx]=u,top[u]=f;\n\tif(son[u])dfs2(son[u],f);\n\tfor(register int i=p[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(fa[u]==v||son[u]==v)continue;\n\t\tdfs2(v,v);\n\t}\n}\nnamespace SEG\n{\n\tint tag[MAX_N<<2];\n\tvoid build(int p,int l,int r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\ttag[p]=w[d[l]];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1,l,mid);\n\t\tbuild(p<<1|1,mid+1,r);\n\t}\n\tvoid change(int p,int l,int r,int x,int y,int w)\n\t{\n\t\tif(l>=x&&r<=y)\n\t\t{\n\t\t\ttag[p]^=w;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)change(p<<1,l,mid,x,y,w);\n\t\tif(y>mid)change(p<<1|1,mid+1,r,x,y,w);\n\t}\n\tint query(int p,int l,int r,int x)\n\t{\n\t\tif(l==r)\n\t\t\treturn tag[p];\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)return tag[p]^query(p<<1,l,mid,x);\n\t\telse return tag[p]^query(p<<1|1,mid+1,r,x);\n\t}\n}\ninline void change(int u,int v,int w)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tSEG::change(1,1,n,c[top[u]],c[u],w);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]<dep[v])swap(u,v);\n\tSEG::change(1,1,n,c[v],c[u],w);\n}\ninline int dist(int u,int v)\n{\n\tint ans=0;\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tans+=dep[u]-dep[top[u]]+1;\n\t\tu=fa[top[u]];\n\t}\n\tans+=abs(dep[v]-dep[u]);\n\treturn ans;\n}\nnamespace LB\n{\n\tint a[32];\n\tinline void init()\n\t{\n\t\tmemset(a,0,sizeof a);\n\t}\n\tinline bool insert(int x)\n\t{\n\t\tfor(register int i=30;i>=0;--i)\n\t\t\tif(x&(1<<i))\n\t\t\t{\n\t\t\t\tif(a[i])\n\t\t\t\t\tx^=a[i];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ta[i]=x;\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\treturn 0;\n\t}\n}\ninline bool check(int u,int v)\n{\n\tif(dist(u,v)>30)return 1;\n\tLB::init();\n\tif(dep[u]<dep[v])swap(u,v);\n\twhile(dep[u]>dep[v])\n\t{\n\t\tif(LB::insert(SEG::query(1,1,n,c[u]))==0)return 1;\n\t\tu=fa[u];\n\t}\n\twhile(u!=v)\n\t{\n\t\tif(LB::insert(SEG::query(1,1,n,c[u]))==0)return 1;\n\t\tif(LB::insert(SEG::query(1,1,n,c[v]))==0)return 1;\n\t\tu=fa[u],v=fa[v];\n\t}\n\tif(LB::insert(SEG::query(1,1,n,c[u]))==0)return 1;\n\treturn 0;\n}\ninline void init()\n{\n\tdfs1(1,1);\n\tdfs2(1,1);\n\tSEG::build(1,1,n);\n}\nint main()\n{\n    n=read(),q=read();\n    for(register int i=1;i<=n;++i)w[i]=read();\n\tfor(register int i=1,u,v;i<n;++i)u=read(),v=read(),insert(u,v),insert(v,u);\n\tinit();\n\twhile(q--)\n\t{\n\t\tchar op[10];\n\t\tint x,y,z;\n\t\tscanf(\"%s\",op);\n\t\tif(op[0]=='U')\n\t\t{\n\t\t\tx=read(),y=read(),z=read();\n\t\t\tchange(x,y,z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tif(check(x,y))putchar('Y'),putchar('E'),putchar('S'),putchar('\\n');\n\t\t\telse putchar('N'),putchar('O'),putchar('\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568723189,
        "uid": 26937,
        "name": "_soul_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5556 \u3010\u5723\u5251\u62a4\u7b26\u3011"
    }
]