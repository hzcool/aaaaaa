[
    {
        "content": "\u6839\u53f7\u597d\u9898\u3002\u524d\u534a\u90e8\u5206\u601d\u8def\u6765\u81ea\u6211\uff0c\u540e\u534a\u90e8\u5206\u6765\u81ea @abruce\uff08adj.\uff09\u3002\n\n___\n\n\u5efa\u51fa AC \u81ea\u52a8\u673a\u8fc7\u540e\uff0c\u95ee\u9898\u53d8\u6210\u4e86**\u865a\u6811\u4ea4**\u3002\n\n- \u8fd9\u4e00\u6b65\u5982\u679c\u4e0d\u61c2\u4e0d\u5efa\u8bae\u4f60\u505a\u8fd9\u4e2a\u9898\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u662f\u5f88\u597d\u9884\u5904\u7406\u4e0e\u7ef4\u62a4\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u81ed\u6d3b\uff1a\n\n\u8bbe\u603b\u4e32\u957f\uff08\u865a\u6811\u5927\u5c0f\u548c\uff09\u662f $S$\uff0c\u8be2\u95ee\u6b21\u6570\u662f $q$\uff0c\u4e24\u4e2a\u865a\u6811\u7684\u5927\u5c0f\u662f $x,y$\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728 $O(\\bold{min}(x,y))$ \u5185\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\uff0c\u5e76\u5c06**\u8be2\u95ee\u8bb0\u5fc6\u5316**\uff0c\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $S\\sqrt q$\u3002\n\n- \u8bc1\u660e\uff1a\u8003\u8651\u80fd\u600e\u4e48\u5361\u4f60\u3002\u53d6\u51fa\u524d $q$ \u5927\u7684 pair \u6765\u8be2\u95ee\uff0c\u5047\u8bbe\u5c06\u865a\u6811\u6309\u5927\u5c0f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u4f9d\u6b21\u4e3a $\\{T_i\\}$\uff0c\u90a3\u4e48\u81f3\u591a\u7ed9\u4f60\u5361\u5230 $\\sum_{i=1}^{O(\\sqrt q)}i|T_i| \\le O(S\\sqrt q)$\uff08\u8003\u8651\u9636\u68af\u72b6\u6c42\u548c\u5373\u8bc1\uff09\u3002\n\n\u90a3\u4e48\u95ee\u9898\u53d8\u6210\u4e86\u8bbe\u8ba1\u7b97\u6cd5\u4ee5\u652f\u6301\u5728 $O(\\bold{min}(x,y))$ \u7684\u65f6\u95f4\u5185\u56de\u7b54\u8be2\u95ee\u3002\n\n\u4e00\u4e2a\u66b4\u529b\u81f3\u6781\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\n- \u89c2\u5bdf\u5230\uff1a\u4efb\u610f\u5230\u6839\u94fe\u4e0a\u5173\u4e8e \u201c\u5b50\u6811\u5185\u662f\u5426\u5305\u542b\u5927\u865a\u6811\u70b9\u201d \u6709**\u5355\u8c03\u6027**\u3002\n\n- \u56e0\u6b64\uff0c\u8003\u8651\u679a\u4e3e\u5c0f\u865a\u6811\u7684\u53f6\u5b50\uff0c\u627e\u5230\u5176\u5230\u6839\u94fe\u4e0a**\u6700\u6df1\u7684\u5305\u542b\u5927\u865a\u6811\u70b9\u7684\u70b9**\u3002\n\t\n    - \u8fd9\u91cc\u9700\u8981\u4f7f\u7528**\u500d\u589e**\u5904\u7406\uff0c\u4e8e\u662f\u5e26\u4e0a\u4e86 $\\log$\u3002 \n\n- \u5c06\u6240\u6709\u8fd9\u4e9b\u70b9\u62bd\u51fa\u6765\u518d\u505a\u4e00\u6b21**\u6811\u94fe\u5e76**\uff08\u865a\u6811\u6743\u503c\u548c\uff09\u5c31\u662f\u7b54\u6848\u3002\n\n\t- \u6811\u94fe\u5e76\u4e2d\u7684 LCA \u91c7\u7528\u6b27\u62c9\u5e8f $O(1)$ \u5b9e\u73b0\u3002 \n\n\u590d\u6742\u5ea6 $O(S\\sqrt q \\log S)$\uff0c\u7531\u4e8e\u65f6\u95f4\u5145\u88d5\uff0c\u4e0d\u6392\u9664\u53ef\u4ee5\u8fc7\u7684\u53ef\u80fd\u6027\u3002\n\n\u8003\u8651\u5982\u4f55\u53bb $\\log$\u3002\n\n\u5c06\u500d\u589e\u90a3\u4e00\u6b65\u53cd\u8fc7\u6765\u770b\uff1a\u5982\u679c\u6211\u4eec**\u679a\u4e3e\u5927\u865a\u6811**\uff0c\u9884\u5904\u7406\u6bcf\u4e00\u4e2a\u70b9\u7684\u5230\u6839\u94fe\u4e0a\u6700\u6df1\u7684\u5927\u865a\u6811\u4e0a\u70b9\uff0c\u5c31\u53ef\u4ee5 $O(1)$ \u4e86\u3002\n\n\u4f46\u662f\u6bcf\u679a\u4e3e\u4e00\u4e2a\u5927\u865a\u6811\uff0c\u6211\u4eec\u90fd\u9700\u8981 $O(S)$ \u7684\u65f6\u95f4\u904d\u5386\u6574\u4e2a Trie \u6811\uff0c\u590d\u6742\u5ea6\u5c31\u7206\u4e86\u3002\n\n\u8003\u8651**\u5e73\u8861**\u3002\u6211\u4eec\u771f\u7684\u6709\u5fc5\u8981\u679a\u4e3e\u6240\u6709\u5927\u865a\u6811\u5417\uff1f\n\n\u5982\u679c\u4e00\u4e2a\u865a\u6811\u7684 siz \u5927\u4e8e\u6211\u4eec\u8bbe\u7f6e\u7684\u4e00\u4e2a\u9608\u503c $B$\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u5b83\u8fdb\u884c\u4e00\u6b21\u4e0a\u8ff0\u9884\u5904\u7406\u3002\u590d\u6742\u5ea6 $O(S\\sqrt S)$\u3002\n\n- \u4e3a\u4e86\u51cf\u5c11\u5e38\u6570\uff0c\u7c7b\u4f3c\u4e8e CF1039D\uff0c\u6211\u4eec\u53ef\u4ee5**\u4f7f\u7528 dfn \u5e8f\u4e0a\u626b\u4ee3\u66ff dfs**\u3002\n\n\u8fd9\u6837\u5982\u679c\u8be2\u95ee\u4e2d\u5927\u865a\u6811 siz $\\ge B$\uff0c\u5c31\u53ef\u4ee5\u4e0d\u5e26 log\u3002\n\n\u5426\u5219\u4e24\u4e2a\u865a\u6811 siz \u90fd $\\le B$\uff0c\u76f4\u63a5\u66b4\u529b\u5728\u865a\u6811\u4e0a\u505a\u590d\u6742\u5ea6\u4e5f\u4e0d\u8d85\u8fc7 $O(B)$\u3002\n\n- \u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u5f52\u5e76\u5408\u5e76\u70b9\u96c6\u8fc7\u540e\u66b4\u529b\u6c42\u4ea4\uff1b\n\n- \u66f4\u597d\u7684\u5b9e\u73b0\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5c0f\u865a\u6811\u4e2d\u7684\u70b9\uff0c\u5728\u5927\u865a\u6811\u4e2d\u53cc\u6307\u9488\u627e\u5230\u5176**\u524d\u9a71\u540e\u7ee7**\uff0c\u5176\u5bf9\u5e94\u7684 \u201c\u6700\u6df1\u5305\u542b\u5927\u865a\u6811\u7684\u7956\u5148\u201d \u4e00\u5b9a\u662f\u5176\u4e0e\u524d\u9a71\u540e\u7ee7\u7684 LCA \u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u3002\n\n\u4e8e\u662f\u5c31\u505a\u5b8c\u4e86\u3002\u590d\u6742\u5ea6 $O(S\\sqrt S+S\\sqrt q)$\u3002",
        "postTime": 1647248410,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 DDOSvoid \u7684\u9988\u8d60"
    },
    {
        "content": "\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\uff0c\u6211\u4eec\u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f AC \u81ea\u52a8\u673a\uff0c\u6240\u4ee5\u6211\u4eec\u4ece AC \u81ea\u52a8\u673a\u51fa\u53d1\u3002\r\n\r\n\u6211\u4eec\u5bf9\u4e8e\u6a21\u677f\u4e32\u5efa\u7acb AC \u81ea\u52a8\u673a\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u6734\u7d20\u7684\u5904\u7406\u4e00\u6b21\u8be2\u95ee\uff0c\u4e0b\u6587\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5b9a\u4e49 AC \u81ea\u52a8\u673a\u4e0a\u4e00\u4e2a\u70b9\u7684\u6811\u94fe\u4e3a\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u7684\u6811\u662f AC \u81ea\u52a8\u673a\u7684 fail \u6811\r\n\r\n\u6211\u4eec\u9996\u5148\u5c06\u5728 AC \u81ea\u52a8\u673a\u4e0a\u505a\u5339\u914d\u6c42\u51fa\u67e5\u8be2\u4e32 $x$ \u548c\u67e5\u8be2\u4e32 $y$ \u7684\u6240\u6709\u524d\u7f00\u7684\u5339\u914d\u8282\u70b9\uff0c\u90a3\u4e48\u5bb9\u6613\u5f97\u5230\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u4e32 $x$ \u7684\u6240\u6709\u5339\u914d\u8282\u70b9\u7684\u6811\u94fe\u7684\u5e76\u548c\u4e32 $y$ \u7684\u6240\u6709\u5339\u914d\u8282\u70b9\u7684\u6811\u94fe\u7684\u5e76\uff0c\u7136\u540e\u5bf9\u8fd9\u4e24\u8005\u6c42\u4ea4\uff0c\u6c42\u4ea4\u6240\u5f97\u5230\u7684\u8282\u70b9\u7684\u8d21\u732e\u7684\u548c\u5c31\u662f\u6211\u4eec\u4e00\u6b21\u8be2\u95ee\u7684\u7b54\u6848\r\n\r\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u5904\u7406\u6240\u6709\u8be2\u95ee\uff0c\u9996\u5148\u8003\u8651\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u540c\u65f6\u6211\u4eec\u80fd\u591f\u53d1\u73b0\u8be2\u95ee\u7684\u4e00\u4e9b\u53ef\u4ee5\u5229\u7528\u7684\u6027\u8d28\uff0c\u4e0b\u6587\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u4ee4\u4e00\u6b21\u8be2\u95ee $(x,y)$ \u4e2d\u957f\u5ea6\u8f83\u5c0f\u7684\u4e32\u4e3a $x$\uff0c\u540c\u65f6\u79f0\u5176\u4e3a\u5c0f\u4e32\uff0c\u957f\u5ea6\u8f83\u5927\u7684\u4e32\u4e3a $y$\uff0c\u540c\u65f6\u79f0\u5176\u4e3a\u5927\u4e32\r\n\r\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u770b\u4f3c\u662f\u66b4\u529b\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u56fa\u5b9a\u5927\u4e32\uff0c\u5e76\u9884\u5904\u7406\u4e00\u4e9b\u4fe1\u606f\uff0c\u540c\u65f6\u5bf9\u4e8e\u8fd9\u4e2a\u5927\u4e32\u7684\u6240\u6709\u8be2\u95ee\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u5c0f\u4e32\uff0c\u5373\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5c0f\u4e32\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u73b0\u5728\u8bc1\u660e\u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a $B$ \u7684\u5c0f\u4e32\uff0c\u6211\u4eec\u8003\u8651\u679a\u4e3e\u5b83\u7684\u590d\u6742\u5ea6\uff0c\u4e0b\u9762\u9ed8\u8ba4\u5c06\u6240\u6709\u8be2\u95ee\u53bb\u91cd\r\n\r\n\u5982\u679c $B>\\sqrt n$\uff0c\u90a3\u4e48 $B$ \u6700\u591a\u53ea\u4f1a\u88ab\u679a\u4e3e $O(\\frac{n}{B})$ \u6b21\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u4e2a $B$ \u7684\u5bf9\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8d21\u732e\u6700\u591a\u5c31\u662f $O(n\\times \\frac{n}{B}=n)$\uff0c \u540c\u65f6 $B$  \u53ea\u6709 $O(\\frac{n}{B}=\\sqrt n)$ \u4e2a\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n\\sqrt n)$\r\n\r\n\u5982\u679c $B<\\sqrt n$\uff0c\u6ce8\u610f\u5230\u8be2\u95ee\u53ea\u6709 $O(n)$ \u4e2a\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $O(n\\sqrt n)$\r\n\r\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u9700\u8981\u8003\u8651\u5bf9\u4e8e\u5927\u4e32\uff0c\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u4ec0\u4e48\u4fe1\u606f\uff0c\u540c\u65f6\u53c8\u5982\u4f55\u5728\u679a\u4e3e\u5c0f\u4e32\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u56de\u7b54\u4e00\u6b21\u8be2\u95ee\r\n\r\n\u6211\u4eec\u7ee7\u7eed\u8003\u8651\u6700\u521d\u7684\u66b4\u529b\uff0c\u6211\u4eec\u9700\u8981\u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u7684\u4ea4\uff0c\u8003\u8651\u6362\u4e00\u4e0b\u987a\u5e8f\uff0c\u6211\u4eec\u9884\u5904\u7406\u4e00\u4e2a\u96c6\u5408\u7684\u5e76\uff0c\u7136\u540e\u5bf9\u4e8e\u53e6\u4e2a\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4e0e\u4e4b\u524d\u6c42\u597d\u7684\u5e76\u6c42\u4ea4\uff0c\u7136\u540e\u518d\u5e76\u8d77\u6765\r\n\r\n\u987a\u7740\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u5df2\u7ecf\u9884\u5904\u7406\u597d\u4e86\u5927\u4e32\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5c0f\u4e32\u7684\u6bcf\u4e2a\u70b9\uff0c\u5b83\u4e0e\u5927\u4e32\u7684\u5e76\u663e\u7136\u662f\u8be5\u70b9\u4e0e\u5927\u4e32\u6240\u6709\u8282\u70b9\u4e2d $dfs$ \u5e8f\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u7684 $lca$ \u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\uff0c\u4e0b\u9762\u8fd9\u4e2a\u56fe\u53ef\u80fd\u6bd4\u8f83\u5f62\u8c61\u4e00\u70b9\r\n\r\n[![b4FY6J.png](https://s1.ax1x.com/2022/03/10/b4FY6J.png)](https://imgtu.com/i/b4FY6J)\r\n\r\n$A,C,D$ \u8868\u793a\u5927\u4e32\u7684\u70b9\uff0c$B$ \u662f\u5c0f\u4e32\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5bb9\u6613\u5f97\u5230 $B$ \u7684\u6811\u94fe\u4e0e $A,C,D$ \u7684\u6811\u94fe\u7684\u5e76\uff0c\u663e\u7136\u662f $F$\uff08 $B$ \u4e0e $A$ \u7684 $lca$\uff09\uff0c\u800c\u4e0d\u662f $E$ \uff08$B$ \u4e0e $C$ \u7684 $lca$\uff09\r\n\r\n\u90a3\u4e48\u6c42\u4e00\u4e2a\u70b9 $dfs$ \u5e8f\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\uff0c\u6211\u4eec\u6700\u5148\u60f3\u5230\u7684\u662f\u76f4\u63a5\u5c06\u5c0f\u4e32\u548c\u5927\u4e32\u7684\u70b9\u90fd\u6309\u7167 dfs \u5e8f\u6392\u5e8f\u4e4b\u540e\u505a\u4e00\u4e2a\u53cc\u6307\u9488\uff0c\u4f46\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5927\u4e32\u7684\u957f\u5ea6\uff0c\u662f\u6709\u53ef\u80fd\u88ab\u5361\u6389\u7684\uff08\u5982\u679c\u5e38\u6570\u4e0d\u662f\u5f88\u5dee\u5e94\u8be5\u90fd\u80fd\u8fc7\uff09\r\n\r\n\u4e8e\u662f\u6211\u4eec\u518d\u4e00\u6b21\u8003\u8651\u6839\u53f7\u5206\u6cbb\uff0c\u6211\u4eec\u6309\u7167\u5927\u4e32\u7684\u957f\u5ea6\u6765\u8fdb\u884c\u5206\u6cbb\r\n\r\n\u5982\u679c\u5927\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e $\\sqrt n$\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5c06\u6392\u5e8f\u540e\u53cc\u6307\u9488\u5373\u53ef\r\n\r\n\u5982\u679c\u5927\u4e32\u7684\u957f\u5ea6\u5927\u4e8e $\\sqrt n$\uff0c\u6211\u4eec\u8003\u8651 $O(n)$ \u9884\u5904\u7406\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5de6\u53f3\u7b2c\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u957f\u5ea6\u5927\u4e8e $\\sqrt n$ \u7684\u5927\u4e32\u53ea\u6709 $O(\\sqrt n)$ \u4e2a\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(n\\sqrt n)$\r\n\r\n\u6240\u4ee5\u5230\u8fd9\u91cc\u8be5\u95ee\u9898\u5c31\u5728 $O(n\\sqrt n)$ \u5185\u987a\u5229\u89e3\u51b3\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u51e0\u70b9\u9700\u8981\u6ce8\u610f\uff1a\r\n\r\n1. \u6ce8\u610f\u5230\u6211\u4eec\u7684\u505a\u6cd5\u663e\u7136\u4f9d\u8d56\u4e8e\u6bcf\u4e2a\u70b9\u7684 dfs \u5e8f\uff0c\u5c3d\u7ba1\u4ee5\u4efb\u4f55\u65b9\u5f0f\u505a dfs \u590d\u6742\u5ea6\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u540c\u7684\u5e38\u6570\r\n2. \u6c42 lca \u662f\u5426\u9700\u8981\u505a\u5230 $O(1)$\uff1f\u7406\u8bba\u4e0a\u786e\u5b9e\u9700\u8981\uff0c\u4f46\u662f\u6211\u4eec\u4f7f\u7528\u6811\u5256\u5e76\u4e0d\u4f1a\u4f7f\u7a0b\u5e8f\u8dd1\u5f97\u66f4\u6162\uff08\u751a\u81f3\u66f4\u5feb\uff09\uff0c\u539f\u56e0\u5927\u6982\u662f\u56e0\u4e3a\u6811\u5256\u6c42 lca \u672c\u8eab\u5c31\u5f88\u5feb\uff0c\u540c\u65f6\u6811\u5256\u6c42\u51fa\u6765\u7684 dfs \u5e8f\u5728\u666e\u904d\u610f\u4e49\u4e0a\u66f4\u5feb",
        "postTime": 1647094811,
        "uid": 34531,
        "name": "DDOSvoid",
        "ccfLevel": 0,
        "title": "P8203"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u5bf9\u6240\u6709\u7684 $s$ \u5efa\u51fa ACAM\uff0c\u7136\u540e\u628a\u6240\u6709 $s$ \u7684\u4fe1\u606f\u4e22\u5230\u4e0a\u53bb\u3002\u95ee\u9898\u5c31\u53d8\u4e3a\u4e86\u6bcf\u4e2a\u4e32 $t$ \u5bf9\u5e94\u4e00\u4e2a\u5927\u5c0f\u4e3a $|t|$ \u7684\u70b9\u96c6\uff0c\u6c42\u4e24\u4e2a\u70b9\u96c6\u7684\u865a\u6811\u7684\u4ea4\u7684\u70b9\u6743\u548c\u3002\n\n\u865a\u6811\u4ea4\u8fd9\u79cd\u4e1c\u897f\u770b\u4e0a\u53bb\u6bd4\u8f83\u5947\u602a\uff0c\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u4f7f\u7528 $O(n\\log n)-O(1)$ \u7684 LCA\u3002\n\n\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff1a\u5927\u5bf9\u5927\uff0c\u5c0f\u5bf9\u5927\uff0c\u5c0f\u5bf9\u5c0f\u3002\n\n\u5c0f\u5bf9\u5927\u5f88\u5bb9\u6613\u554a\u3002\u76f4\u63a5\u628a\u5927\u7684\u4e13\u95e8\u5efa\u4e00\u9897\u6811\uff0c\u7136\u540e\u628a\u6240\u6709 $s$ \u7684\u4fe1\u606f\u63d2\u4e0a\u53bb\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u5c0f\u7684\u4e32\uff0c\u76f4\u63a5\u5728\u8fd9\u9897\u6811\u4e0a\u9762\u8dd1\u865a\u6811\u5c31\u5b8c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5c0f\u5bf9\u5c0f\u3002\n\n\u53ef\u4ee5\u5efa\u51fa\u865a\u6811\u7684\u5e76\uff0c\u7136\u540e\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u5305\u542b\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u4e32\uff0c\u7136\u540e\u5927\u529b\u7edf\u8ba1\u3002\n\n\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167 dfn \u5e8f\u6392\u5e8f\u540e\u5927\u529b\u5f52\u5e76\u3002\n\n\u5927\u6982\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u5982\u679c\u5728\u8fd9\u4e2a\u70b9\u96c6\u7684\u865a\u6811\u4e0a\u6700\u6df1\u7684\u88ab\u6807\u8bb0\u7684\u7956\u5148\u662f $z$ \u7684\u8bdd\uff0c\u76f8\u5f53\u4e8e\u8981\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u627e\u4e00\u4e2a\u6700\u6df1\u7684\u8282\u70b9\u80fd\u88ab\u53e6\u5916\u4e00\u4e2a\u70b9\u96c6\u7684\u865a\u6811\u6240\u5305\u542b\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5f52\u5e76\u7684\u65f6\u5019\u968f\u968f\u4fbf\u4fbf\u6c42\u4e00\u4e0b\u5c31\u5b8c\u4e86\uff08\n\n\u5927\u5bf9\u5927\u3002\u3002\u3002\u7528\u4e24\u79cd\u65b9\u6cd5\u9884\u5904\u7406\u90fd\u53ef\u4ee5\u3002\n\n\u6839\u53f7\u5206\u6cbb\u7684\u957f\u5ea6\u4e3a $\\sqrt{\\sum|S|}$\uff0c\u590d\u6742\u5ea6 $O(\\sum|S|\\log\\sum|S|+(m+\\sum|S|)\\sqrt{\\sum|S|})$\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u9700\u8981\u6c42\u7684\u662f\u865a\u6811\u7684\u70b9\u6743\u548c\u800c\u4e0d\u662f\u865a\u6811\u672c\u8eab\uff0c\u6240\u4ee5\u8fde\u865a\u6811\u90fd\u53ef\u4ee5\u4e0d\u7528\u5199\uff08\uff08\uff08\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<cmath>\ntypedef unsigned ui;\nconst ui M=1e5+5;\nui n,m,Q,B,lg[M<<1];char S[M],T[M],*s[M],*t[M];ui lens[M],lent[M];ui sums,sumt;\nui tot(1),fail[M],trans[M][26];ui dfc,d[M],dfn[M],lca[19][M<<1];\nui cnt,h[M];std::vector<ui>point[M];ui v[M];\nui LEN,id[M],ans[318][318];ui L,R,q[M];\nstruct Edge{\n\tui v,nx;\n}e[M];\ninline void Add(const ui&u,const ui&v){\n\te[++cnt]=(Edge){v,h[u]};h[u]=cnt;\n}\ninline bool cmp(const ui&u,const ui&v){\n\treturn dfn[u]<dfn[v];\n}\ninline void Insert(char*s,const ui&n){\n\tui u(1);\n\tfor(ui i=0;i<n;++i){\n\t\tconst ui&c=s[i]-97;\n\t\tif(!trans[u][c])trans[u][c]=++tot;u=trans[u][c];\n\t}\n}\ninline ui Match(char*s,const ui&n){\n\tui u(1);for(ui i=0;i<n;++i)u=trans[u][s[i]-97];return u;\n}\ninline void Find(char*s,const ui&n,std::vector<ui>&point){\n\tui u(1);for(ui i=0;i<n;++i)point.push_back(u=trans[u][s[i]-97]);std::sort(point.begin(),point.end(),cmp);\n}\ninline void DFS(const ui&u){\n\tlca[0][dfn[u]=++dfc]=u;d[u]=d[fail[u]]+1;for(ui E=h[u];E;E=e[E].nx)DFS(e[E].v),lca[0][++dfc]=u;\n}\ninline ui Merge(const ui&u,const ui&v){\n\treturn d[u]>d[v]?v:u;\n}\ninline ui merge(const ui&u,const ui&v){\n\treturn d[u]>d[v]?u:v;\n}\ninline ui LCA(ui u,ui v){\n\tif((u=dfn[u])>(v=dfn[v]))u^=v^=u^=v;\n\tconst ui&k=lg[v-u+1];return Merge(lca[k][u],lca[k][v-(1<<k)+1]);\n}\ninline void Build(){\n\tL=1;\n\tfor(ui c=0;c<26;++c){\n\t\tif(trans[1][c])q[++R]=trans[1][c],fail[trans[1][c]]=1;\n\t\telse trans[1][c]=1;\n\t}\n\twhile(L<=R){\n\t\tconst ui&u=q[L++];\n\t\tfor(ui c=0;c<26;++c){\n\t\t\tif(trans[u][c])q[++R]=trans[u][c],fail[trans[u][c]]=trans[fail[u]][c];\n\t\t\telse trans[u][c]=trans[fail[u]][c];\n\t\t}\n\t}\n\tfor(ui u=1;u<=tot;++u)Add(fail[u],u);DFS(1);\n\tlg[0]=-1;for(ui i=1;i<=dfc;++i)lg[i]=lg[i>>1]+1;\n\tfor(ui i=1;(1<<i)<=dfc;++i)for(ui j=1;j+(1<<i)-1<=dfc;++j){\n\t\tlca[i][j]=Merge(lca[i-1][j],lca[i-1][j+(1<<i-1)]);\n\t}\n}\ninline std::vector<ui>Merge(std::vector<ui>S,std::vector<ui>T){\n\tstatic std::vector<ui>ans;ui v,id(0);std::vector<ui>().swap(ans);\n\tfor(ui i=0;i<S.size()-1;++i){\n\t\tv=1;\n\t\tfor(ui j=id;j<T.size()&&dfn[T[j]]<dfn[S[i+1]];++j)v=merge(v,LCA(S[i],T[j]));\n\t\tif(v!=1)ans.push_back(v);while(id<T.size()&&dfn[T[id]]<dfn[S[i]])++id;\n\t}\n\tfor(v=1;id!=T.size();++id)v=merge(v,LCA(S[S.size()-1],T[id]));if(v!=1)ans.push_back(v);\n\treturn ans;\n}\nstruct Tree{\n\tui sum[M];bool vis[M];\n\tinline void DFS(const ui&u){\n\t\tsum[u]+=sum[fail[u]];for(ui E=h[u];E;E=e[E].nx)DFS(e[E].v);\n\t}\n\tinline void init(std::vector<ui>S){\n\t\tfor(ui&u:S)vis[u]=true;\n\t\tfor(ui i=R;i>=1;--i)vis[fail[q[i]]]|=vis[q[i]];\n\t\tfor(ui i=1;i<=tot;++i)if(!vis[i])sum[i]=0;\n\t\tfor(ui i=1;i<=R;++i)sum[q[i]]+=sum[fail[q[i]]];\n\t}\n\tinline ui Qry(std::vector<ui>S){\n\t\tui ans=sum[1],v=1;for(ui&u:S)ans+=sum[u]-sum[LCA(v,u)],v=u;return ans;\n\t}\n}tree[317];\nsigned main(){\n\tscanf(\"%u%u%u\",&n,&m,&Q);s[0]=S;t[0]=T;\n\tfor(ui i=1;i<=n;++i)scanf(\"%s\",s[i]=s[i-1]+lens[i-1]),lens[i]=strlen(s[i]),sums+=lens[i];\n\tfor(ui i=1;i<=m;++i)scanf(\"%s\",t[i]=t[i-1]+lent[i-1]),lent[i]=strlen(t[i]),sumt+=lent[i];\n\tfor(ui i=1;i<=n;++i)Insert(s[i],lens[i]);Build();B=ceil(sqrt(sumt));\n\tfor(ui i=1;i<=m;++i)if(lent[i]>=B)id[v[i]=++LEN]=i;\n\tfor(ui i=1;i<=m;++i)Find(t[i],lent[i],point[i]);\n\tfor(ui u=1;u<=tot;++u)point[0].push_back(u);\n\tfor(ui i=1;i<=n;++i){\n\t\tconst ui&u=Match(s[i],lens[i]);\n\t\tfor(ui k=0;k<=LEN;++k)++tree[k].sum[u];\n\t}\n\tfor(ui i=0;i<=LEN;++i)tree[i].init(point[id[i]]);\n\tfor(ui i=1;i<=LEN;++i)for(ui j=i+1;j<=LEN;++j){\n\t\tif(lent[id[i]]>lent[id[j]])ans[i][j]=ans[j][i]=tree[i].Qry(point[id[j]]);\n\t\telse ans[i][j]=ans[j][i]=tree[j].Qry(point[id[i]]);\n\t}\n\twhile(Q--){\n\t\tui x,y;scanf(\"%u%u\",&x,&y);if(lent[x]>lent[y])x^=y^=x^=y;\n\t\tif(v[x]&&v[y])printf(\"%u\\n\",ans[v[x]][v[y]]);\n\t\telse if(!v[x]&&v[y])printf(\"%u\\n\",tree[v[y]].Qry(point[x]));\n\t\telse printf(\"%u\\n\",tree[0].Qry(Merge(point[y],point[x])));\n\t}\n}\n```",
        "postTime": 1648525886,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u5b57\u7b26\u4e32 ACAM+\u6839\u53f7\u5206\u6cbb P8203\u9898\u89e3"
    },
    {
        "content": "\u66b4\u529b\u8fc7\u4e86\uff01\n\n\u6ce8\uff1a\u4e0b\u6587\u590d\u6742\u5ea6\u5206\u6790\u9ed8\u8ba4 $n,m,q$ \u540c\u9636\u3002\n\n\u8003\u8651\u5bf9 $s$ \u5efa AC \u81ea\u52a8\u673a\uff0c\u7136\u540e\u628a\u6bcf\u4e2a $t$ \u5f80\u4e0a\u9762\u8dd1\uff0c\u9884\u5904\u7406 $m$ \u4e2a `bitset`\uff0c\u4ee3\u8868\u6bcf\u4e2a $t$ \u5339\u914d\u4e86\u54ea\u4e9b $s$\u3002\u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u70b8\u4e86\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u53ef\u4ee5\u5bf9 $s$ \u5206\u5757\u3002\u8be2\u95ee\u79bb\u7ebf\uff0c\u4e00\u5757\u4e00\u5757\u505a\uff0c\u8fd9\u6837\u6bcf\u4e2a `bitset` \u5c31\u53ea\u6709 $O(\\dfrac n B)$ \u4e2a bit\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u4e3a $O(\\dfrac{n^2}{wB})$\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u628a\u4fe9 `bitset` \u6309\u4f4d\u4e0e\u8d77\u6765\uff0c\u7136\u540e\u6bcf\u5757\u7684 `.count()` \u52a0\u4e00\u5757\u5373\u4e3a\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\dfrac{n^2}w)$\uff0c\u4f46\u662f\u5b83\u80fd\u8fc7\uff01\n\n\u6ce8\u610f\u4ee3\u7801\u7ec6\u8282\u8f83\u591a\uff0c\u5b9e\u73b0\u6709\u4e9b\u9ebb\u70e6\u3002\n\n```cpp\nstruct G {\n  int h[N], tot;\n  struct E {\n    int t, n;\n  } e[N];\n  inline void Add(int f, int t) { e[++tot] = {t, h[f]}, h[f] = tot; }\n  inline void Reset() { tot = 0, memset(h, 0, sizeof h); }\n};\ntypedef bitset<400> BS;\n\nstruct Trie {\n  int e[N][26], tot = 1, scnt, fil[N], dfn[N], tim, sz[N], son[N], tp[N], dep[N], fa[N], ed[N],\n                vp[N];\n  vector<int> p;\n  G g, vg;\n  bool vis[N];\n\n  inline void Ins(const char *s, int n) {\n    int u = 1;\n    re (i, n) {\n      int c = s[i] - 'a';\n      if (!e[u][c]) e[u][c] = ++tot;\n      u = e[u][c];\n    }\n    if (!vis[u]) p.push_back(u), vis[u] = 1;\n    ed[++scnt] = u;\n  }\n\n  inline void AC() {\n    rep (i, 0, 25)\n      e[0][i] = 1;\n    queue<int> q;\n    q.push(1);\n    while (q.size()) {\n      int u = q.front();\n      q.pop();\n      rep (i, 0, 25)\n        if (e[u][i])\n          fil[e[u][i]] = e[fil[u]][i], q.push(e[u][i]);\n        else\n          e[u][i] = e[fil[u]][i];\n    }\n    rep (i, 2, tot)\n      g.Add(fil[i], i);\n    Dfs1(1), tp[1] = 1, Dfs2(1);\n    sort(p.begin(), p.end(), [&](int x, int y) { return dfn[x] < dfn[y]; });\n    vector<int> sta;\n    sta.push_back(1);\n    each (x, p) {\n      if (x == 1) continue;\n      int l = Lca(x, sta.back());\n      if (l != sta.back()) {\n        while (dfn[l] < dfn[sta[sta.size() - 2]])\n          vg.Add(sta[sta.size() - 2], sta.back()), sta.pop_back();\n        if (dfn[l] != dfn[sta[sta.size() - 2]])\n          vg.Add(l, sta.back()), sta.back() = l;\n        else\n          vg.Add(l, sta.back()), sta.pop_back();\n      }\n      sta.push_back(x);\n    }\n    rep (i, 0, sta.size() - 2)\n      vg.Add(sta[i], sta[i + 1]);\n    Dfs4(1);\n    memset(vis, 0, sizeof vis);\n  }\n\n  inline BS Ask(const char *s, int n) {\n    int u = 1;\n    re (i, n) {\n      int c = s[i] - 'a';\n      u = e[u][c];\n      vis[vp[u]] = 1;\n    }\n    Dfs3(1, 0);\n    BS res;\n    re (i, scnt)\n      if (vis[ed[i]]) res.set(i);\n    Dfs3(1, 1);\n    return res;\n  }\n\n  void Dfs1(int f) {\n    dep[f] = dep[fa[f]] + 1;\n    sz[f] = 1;\n    nxt (i, f, g) {\n      int t = g.e[i].t;\n      fa[t] = f, Dfs1(t), sz[f] += sz[t];\n      if (sz[t] > sz[son[f]]) son[f] = t;\n    }\n  }\n\n  void Dfs2(int f) {\n    dfn[f] = ++tim;\n    if (!son[f]) return;\n    tp[son[f]] = tp[f], Dfs2(son[f]);\n    nxt (i, f, g) {\n      int t = g.e[i].t;\n      if (t == son[f]) continue;\n      tp[t] = t, Dfs2(t);\n    }\n  }\n\n  inline int Lca(int u, int v) {\n    while (tp[u] != tp[v]) dep[tp[u]] > dep[tp[v]] ? u = fa[tp[u]] : v = fa[tp[v]];\n    return dep[u] > dep[v] ? v : u;\n  }\n\n  void Dfs3(int f, bool b) {\n    if (b) vis[f] = 0;\n    nxt (i, f, vg) {\n      int t = vg.e[i].t;\n      Dfs3(t, b);\n      if (!b) vis[f] |= vis[t];\n    }\n  }\n\n  void Dfs4(int f) {\n    if (vis[f]) vp[f] = f;\n    nxt (i, f, g) {\n      int t = g.e[i].t;\n      vp[t] = vp[f], Dfs4(t);\n    }\n  }\n\n  inline void Reset() {\n    g.Reset(), vg.Reset();\n    memset(e, 0, sizeof e), tot = 1, scnt = 0;\n    memset(fil, 0, sizeof fil);\n    memset(dfn, 0, sizeof dfn), tim = 0;\n    memset(sz, 0, sizeof sz);\n    memset(son, 0, sizeof son);\n    memset(tp, 0, sizeof tp);\n    memset(dep, 0, sizeof dep);\n    memset(fa, 0, sizeof fa);\n    memset(vis, 0, sizeof vis);\n    p.clear(), p.push_back(1);\n  }\n} tr;\n\nint n, m, qc, sz, bl[N], lbl[N], rbl[N], Ans[N];\nstring s[N], t[N];\npair<int, int> q[N];\nBS ans[N];\n\nvoid Init() {\n  sz = sqrt(n);\n  re (i, n) {\n    bl[i] = (i - 1) / sz + 1;\n    lbl[i] = (bl[i] - 1) * sz + 1;\n    rbl[i] = min(bl[i] * sz, n);\n  }\n}\n\nvoid Work(int x) {\n  unordered_map<string, int> mp;\n  tr.Reset();\n  rep (i, lbl[x], rbl[x])\n    tr.Ins(s[i].data() - 1, s[i].size());\n  tr.AC();\n  re (i, m) {\n    if (mp[t[i]])\n      ans[i] = ans[mp[t[i]]];\n    else\n      mp[t[i]] = i, ans[i] = t[i] != t[i - 1] ? tr.Ask(t[i].data() - 1, t[i].size()) : ans[i - 1];\n  }\n  re (i, qc)\n    Ans[i] += (ans[q[i].first] & ans[q[i].second]).count();\n}\n\nsigned main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m >> qc;\n  re (i, n)\n    cin >> s[i];\n  re (i, m)\n    cin >> t[i];\n  re (i, qc)\n    cin >> q[i].first >> q[i].second;\n  Init();\n  ste (x, 1, n, sz)\n    Work(x);\n  re (i, qc)\n    cout << Ans[i] << '\\n';\n  return 0;\n}\n```",
        "postTime": 1647173039,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "P8203 \u9898\u89e3"
    },
    {
        "content": "\u663e\u7136\u65e0\u8bba\u5982\u4f55\u9700\u8981\u5148\u5efa\u51fa\u5173\u4e8e $s$ \u7684 AC \u81ea\u52a8\u673a\u3002\u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u5373\u4e3a fail \u6811\u4e0a\u7684\u865a\u6811\u4ea4\u4e2d\u6240\u6709\u70b9\u6743\u4e4b\u548c\uff08\u70b9\u6743\u5373\u4e3a\u5728\u6b64\u7ed3\u675f\u7684 $s$ \u6570\u91cf\uff09\u3002\n\n\u8003\u8651\u5c06\u957f\u5ea6\u8f83\u5c0f\u7684 $y$ \u6302\u5230\u957f\u5ea6\u8f83\u5927 $x$ \u4e0a\u79bb\u7ebf\uff0c\u4e0d\u96be\u53d1\u73b0\u5982\u679c\u80fd\u591f\u5728 $O(y\\text{ polylog})$ \u7684\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u4e00\u6b21\u8be2\u95ee\uff0c\u5219\u7ecf\u5178\u7ed3\u8bba\u662f\u8bb0\u5fc6\u5316\u540e\u603b\u590d\u6742\u5ea6\u662f $O(n\\sqrt n\\text{ polylog})$\u3002\n\n\u800c $\\rm polylog$ \u7684\u505a\u6cd5\u662f\u5bb9\u6613\u7684\u3002\u8003\u8651\u5bf9\u4e8e $y$ \u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u627e\u51fa\u5176\u6240\u6709\u7956\u5148\u4e2d\u6700\u6df1\u7684\u5728 $x$ \u865a\u6811\u4e0a\u7684\u70b9\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u65b0\u70b9\u518d\u5efa\u865a\u6811\u3002\u5256\u4e00\u904d\u540e\u7ef4\u62a4\u6240\u6709\u91cd\u94fe\u4e0a\u6700\u6df1\u7684\u5728 $x$ \u865a\u6811\u4e0a\u7684\u70b9\u662f\u4ec0\u4e48\u5373\u53ef\uff0c\u4e00\u53ea $\\log$\u3002\n\n\u8003\u8651\u600e\u4e48\u4e0d\u5e26 $\\log$\u3002\u518d\u6b21\u4f7f\u7528\u6839\u5206\uff08\u4e0a\u4e00\u6b21\u662f\u8bb0\u5fc6\u5316\u6240\u6709\u5e26\u6765\u7684\u81ea\u7136\u6839\u5206\uff09\uff0c\u5982\u679c $x$ \u7684\u957f\u5ea6\u5927\u4e8e\u9608\u503c $B$\uff0c\u90a3\u4e48\u8003\u8651 dfs \u6574\u9897\u6811\u5904\u7406\u51fa\u6240\u6709\u70b9\u7684\u7b54\u6848\uff1b\u5426\u5219\u62bd\u51fa $x,y$ \u6240\u6709\u70b9\u7684 dfn \u5e8f\uff0c\u53cc\u6307\u9488\u7ef4\u62a4 $y$ \u7684\u6bcf\u4e2a dfn \u5e8f\u5728 $x$ dfn \u4e2d\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u5219\u5176\u6240\u6709\u7956\u5148\u4e2d\u6700\u6df1\u7684\u5728 $x$ \u865a\u6811\u4e0a\u7684\u70b9\u5373\u4e3a\u4e0e\u8fd9\u4e24\u70b9 lca \u4e2d\u6df1\u5ea6\u8f83\u5927\u8005\u3002\u4f7f\u7528 $O(1)$ LCA \u5bb9\u6613\u505a\u5230 $O(n\\sqrt n)$\u3002",
        "postTime": 1669183472,
        "uid": 314991,
        "name": "zhouyuhang",
        "ccfLevel": 7,
        "title": "\u7b80\u5355\u9898 \u9898\u89e3"
    }
]