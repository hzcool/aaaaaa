[
    {
        "content": "\u8bb0 $a_{i,j}$ \u662f\u7b2c $i$ \u4e2a\u4eba\u7684\u5f97\u5206\u3002\n\n\u8003\u8651 $l$ \u7531 $0$ \u5230 $10^9$ \u6bcf\u589e\u52a0 $1$ \u90fd\u4f1a\u5bfc\u81f4\u5176\u5f97\u5206\u589e\u52a0 $\\sum_{j=1}^h[a_{i,j} > l]$\u3002\u6545\u800c\u5982\u679c\u7528\u6240\u6709 $a_{i,j}$ \u628a\u6570\u8f74\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u5728\u4e00\u4e2a\u533a\u95f4\u5185\u67d0\u4e2a\u4eba\u7684\u5f97\u5206\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u800c\u7531\u4e8e $\\sum_{j=1}^h[a_{i,j} > l]$ \u968f $l$ \u4e0d\u51cf\uff0c\u6545\u67d0\u4e2a\u4eba\u5f97\u5206\u5173\u4e8e $l$ \u7684\u51fd\u6570\u662f\u4e00\u4e2a\u51f8\u58f3\u3002\n\n\u7531\u4e8e\u8fd9\u4e9b\u51f8\u58f3\u7684\u4e00\u4e2a\u4ea4\u70b9\u5bf9\u5e94\u7740\u4e00\u6b21\u6392\u540d\u7684\u53d8\u5316\uff0c\u6211\u4eec\u8003\u8651\u5173\u6ce8\u8fd9\u4e9b\u51f8\u58f3\u7684\u4ea4\u70b9\u3002\u4e00\u6761\u76f4\u7ebf\u81f3\u591a\u4ea4\u4e00\u4e2a\u51f8\u58f3\u4e8e $2$ \u70b9\uff0c\u800c\u4e00\u5171\u6709 $p\\cdot h$ \u6761\u76f4\u7ebf\uff0c$p$ \u4e2a\u51f8\u58f3\uff0c\u6545\u81f3\u591a\u6709 $p^2h$ \u4e2a\u4ea4\u70b9\u3002\n\n\u8003\u8651\u6bcf\u6b21\u5728\u62d0\u70b9\u5904\u5904\u7406\u65b0\u589e\u76f4\u7ebf\u5bf9\u65e7\u7684\u76f4\u7ebf\uff08\u4e5f\u5c31\u662f\u62d0\u70b9\u5728\u8fd9\u6761\u76f4\u7ebf\u4e4b\u524d\u7684\u76f4\u7ebf\uff09\u7684\u5f71\u54cd\uff0c\u7136\u540e\u5bf9\u6a21\u62df\u76f4\u7ebf\u4e4b\u95f4\u6392\u540d\u4e0a\u4e0b\u53d8\u5316\u7684\u8fc7\u7a0b\u5c31\u597d\u4e86\u3002\n\n\u7531\u4e8e\u62d0\u70b9\u5904\u6bd4\u8f83\u70e6\uff0c\u6240\u4ee5\u6211\u5728\u62d0\u70b9\u5904\u66b4\u529b\u7b97\u6392\u540d\uff0c\u7136\u540e\u518d\u6a21\u62df\u76f4\u7ebf\u7684\u6392\u540d\u53d8\u5316\u3002\n\n\u7531\u4e8e\u8981\u6392\u5e8f\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(p^2h\\log ph)$ \u7684\u3002\n\n```cpp\ntypedef std::pair <int, int> pii;\ntypedef std::pair <int, pii> pipii;\nconst int kP = 5e2 + 5, kH = 50 + 5, kN = kP * kP * kH, kInf = 0x3f3f3f3f;\nconst ll kMod = 998244353, kInfLL = 0x3f3f3f3f3f3f3f3fLL;\n\nint p, h, ans[kP]; ll A[kP][kH], cur_k[kP], cur_b[kP];\n\nint chg_pos[kN], cnt_cp = 0, cnt_ip = 0; bool vis[kP]; pipii intrs_pos[kN];\nll Intsec(int i, int j) {\n\tll dtk = cur_k[i] - cur_k[j], dtb = cur_b[j] - cur_b[i];\n\tif(!dtk) return -1;\n\treturn (ll)ceil(dtb / dtk);\n}\nvoid GetIntrsPos() {\n\tfor(int i = 1; i <= cnt_cp; ++i) {\n\t\tmemset(vis, false, sizeof(vis));\n\t\tint l = chg_pos[i];\n\t\tfor(int j = 1; j <= p; ++j) {\n\t\t\twhile(cur_k[j] && A[j][h - cur_k[j] + 1] <= l) {\n\t\t\t\tvis[j] = true; --cur_k[j];\n\t\t\t\tcur_b[j] += l;\n\t\t\t}\n\t\t}\n\t\tfor(int j = 1; j <= p; ++j) if(vis[j]) {\n\t\t\tfor(int k = 1; k <= p; ++k) if(j != k) {\n\t\t\t\tll x = Intsec(j, k);\n\t\t\t\tif(x >= A[j][h - cur_k[j] + 1] || x < A[j][h - cur_k[j]] ||\n\t\t\t\t\tx >= A[k][h - cur_k[k] + 1] || x < A[k][h - cur_k[k]])\n\t\t\t\t\tcontinue;\n\t\t\t\tintrs_pos[++cnt_ip] = mkp(\n\t\t\t\t\tx, cur_k[j] < cur_k[k] ? mkp(j, k) : mkp(k, j)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(intrs_pos + 1, intrs_pos + cnt_ip + 1);\n\tcnt_ip = std::unique(intrs_pos + 1, intrs_pos + cnt_ip + 1) - intrs_pos - 1;\n}\n\nint rk[kP]; ll pts[kP];\nvoid Calc() {\n\tmemset(cur_b, 0, sizeof(cur_b));\n\tfor(int i = 1; i <= p; ++i) cur_k[i] = h;\n\tfor(int i = 1, ptr = 0; i <= cnt_cp; ++i) {\n\t\tint o_l = chg_pos[i];\n\t\tfor(int j = 1; j <= p; ++j) {\n\t\t\twhile(cur_k[j] && A[j][h - cur_k[j] + 1] <= o_l) {\n\t\t\t\t--cur_k[j];\n\t\t\t\tcur_b[j] += o_l;\n\t\t\t}\n\t\t}\n\t\tfor(int j = 1; j <= p; ++j)\n\t\t\tpts[j] = cur_k[j] * o_l + cur_b[j];\n\t\tstd::sort(pts + 1, pts + p + 1);\n\t\tfor(int j = 1; j <= p; ++j) {\n\t\t\tll tmp_pts = cur_k[j] * o_l + cur_b[j];\n\t\t\trk[j] = std::upper_bound(pts + 1, pts + p + 1, tmp_pts) - pts - 1;\n\t\t\tans[j] = std::min(ans[j], rk[j]);\n\t\t}\n\t\t++o_l;\n\t\tif(o_l > chg_pos[i + 1]) continue;\n\t\tfor(int j = 1; j <= p; ++j)\n\t\t\tpts[j] = cur_k[j] * o_l + cur_b[j];\n\t\tstd::sort(pts + 1, pts + p + 1);\n\t\tfor(int j = 1; j <= p; ++j) {\n\t\t\tll tmp_pts = cur_k[j] * o_l + cur_b[j];\n\t\t\trk[j] = std::upper_bound(pts + 1, pts + p + 1, tmp_pts) - pts - 1;\n\t\t\tans[j] = std::min(ans[j], rk[j]);\n\t\t}\n\t\tfor(; ptr <= cnt_ip && intrs_pos[ptr].fi <= chg_pos[i + 1]; ++ptr) {\n\t\t\tpipii cur = intrs_pos[ptr]; int u = cur.se.fi, v = cur.se.se;\n\t\t\tif(cur.fi <= o_l) continue;\n\t\t\t--rk[u]; ++rk[v];\n\t\t\tans[u] = std::min(ans[u], rk[u]);\n\t\t}\n\t}\n}\n\nint main() { \n\tmemset(ans, 0x3f, sizeof(ans));\n\trd(p, h);\n\tfor(int i = 1; i <= p; ++i) {\n\t\tA[i][h + 1] = kInf;\n\t\tfor(int j = 1; j <= h; ++j) {\n\t\t\trd(A[i][j]);\n\t\t\tchg_pos[++cnt_cp] = A[i][j];\n\t\t}\n\t\tstd::sort(A[i] + 1, A[i] + h + 1);\n\t\tcur_k[i] = h;\n\t}\n\tchg_pos[++cnt_cp] = 1e9; chg_pos[++cnt_cp] = 0;\n\tstd::sort(chg_pos + 1, chg_pos + cnt_cp + 1);\n\tcnt_cp = std::unique(chg_pos + 1, chg_pos + cnt_cp + 1) - chg_pos - 1;\n\tGetIntrsPos(); Calc();\n\tfor(int i = 1; i <= p; ++i) {\n\t\tprintf(\"%d\\n\", ans[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1606354106,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6260 \u3010[ICPC2019 WF]Miniature Golf\u3011"
    }
]