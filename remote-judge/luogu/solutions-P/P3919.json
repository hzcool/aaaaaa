[
    {
        "content": "\u672c\u7bc7blog\u4e3b\u8981\u662f\u7ed9\u81ea\u5df1\uff08\u5927\u5bb6\uff09\u770b\u7684\u3002\n\n\u611f\u8c22[longlongzhu123](https://www.luogu.org/space/show?uid=57525)\u5946\u4f6c\uff08\u6b64\u4eba\u521d\u4e8cLCT\uff09\u7684\u6307\u70b9\uff0c\u4f7f\u672c\u849f\u84bb\u53ef\u4ee5\u5feb\u901f\u5f00\u59cb\u4e3b\u5e2d\u6811\u5165\u95e8\u3002\n\n# what is \u4e3b\u5e2d\u6811\uff1f\n$ \\ \\ \\ \\ \\ \\ \\ $\u4e3b\u5e2d\u6811\u8fd9\u4e2a\u540d\u5b57\u53ea\u4e0d\u8fc7\u662fOIer\u4eec\u5728\u601d\u8003\u653f(zhe)\u6cbb(xue)\u7684\u65f6\u5019\u53d1\u660e\u7684\u597d(du)\u542c(liu)\u7684\u540d\u5b57\u3002\u5176\u5b9e\u4e3b\u5e2d\u6811\u7684\u5927\u540d\u53eb\u201c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u201d\uff0c\u4e00\u542c\u8fd9\u540d\u5b57\u5c31\u77e5\u9053\u4e3b\u5e2d\u6811\u5f88\u6bd2\u7624\uff0c\u6240\u4ee5\u4ed6\u7684\u53d1\u660e\u8005\u53eb\u9ec4\u5609\u6cf0\uff08hjt***(\u4ec0\u4e48\u9b3c\u554a?)\uff09\u3002\n\n### \u5206\u6b65\u7406\u89e3\u201c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u201d\n$ \\ \\ \\ \\ \\ \\ \\ $\u9996\u5148\u6211\u4eec\u5148\u6765\u7406\u89e3\u4eba\u5c3d\u7686\u77e5\u7684\u5c0f\u540d\u201c\u4e3b\u5e2d\u6811\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u770b\u5230\u201c\u4e3b\u5e2d\u201d\u8fd9\u4e24\u4e2a\u5b57\uff0c\u55ef\uff0c\u5f88\u597d\uff0c\u5f88\u9738\u6c14\uff0c\u8bfb\u8d77\u6765\u6717\u6717\u4e0a\u53e3\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4e3b\u5e2d\u6811\u662f\u4e00\u4e2a\u5f88**\u9738\u6c14**\u7684\u4e1c\u897f\uff0c~~\u4ee5\u4e0a\u626f\u6de1~~\u3002\u518d\u6765\u770b\u201c\u6811\u201d\uff0c\u4ece\u8fd9\u4e2a\u5b57\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e3b\u5e2d\u6811\u7684\u672c\u8d28\u662f\u4e00\u68f5\u6811\uff0c\u90a3\u662f\u4e00\u68f5\u4ec0\u4e48\u6811\uff0c\u7ed3\u4ec0\u4e48\u679c\u5462\uff0c\u4e0b\u9762\u770b\u4e3b\u5e2d\u6811\u7684\u5927\u540d\u201c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u201d\u3002\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u770b\u201c\u53ef\u6301\u4e45\u5316\u201d\u8fd9\u56db\u4e2a\u5b57\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u4e3b\u5e2d\u6811\u5341\u5206**\u6301\u4e45**\uff0c\u56e0\u4e3a\u5b83\u53ef\u6301\u4e45\u5316\u3002\u90a3\u4ec0\u4e48\u53eb\u6301\u4e45\u5462\uff0c\u201c\u53ef\u6301\u4e45\u5316\u201d\u5b9a\u4e49\uff1a\u53ef\u4ee5\u652f\u6301\u56de\u9000\uff0c\u8bbf\u95ee\u4e4b\u524d\u7248\u672c\u7684\u6570\u636e\u7ed3\u6784\uff1b\u652f\u6301\u56de\u9000\u64cd\u4f5c\u7684\u610f\u601d\u5c31\u662f\u53ef\u4ee5\u8bbf\u95ee\u672a\u7ecf\u8fc7\u5176\u4ed6\u64cd\u4f5c\u7684\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd4\u56de\u5230\u4e86\u4ee5\u524d\u7684\u7248\u672c\u3002\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u770b\u201c\u7ebf\u6bb5\u6811\u201d\u8fd9\u51e0\u4e2a\u5b57\u773c\uff0c\u5341\u5206\u719f\u6089\uff01\u76f8\u4fe1\u5927\u5bb6\u80af\u5b9a\u5b66\u8fc7\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u6ca1\u5b66\u8fc7$\\color{red} \\large \\text{\u7ebf\u6bb5\u6811}$\u7684\u8bdd\uff0c\u90a3\u5c31\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u7bc7blog\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4e3b\u5e2d\u6811\u662f\u57fa\u4e8e**\u7ebf\u6bb5\u6811**\u7684\u4e00\u79cd**\u6570\u636e\u7ed3\u6784**WOW\u3002\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u7efc\u4e0a\u6240\u8ff0\uff0c\u4e3b\u5e2d\u6811\u662f\u4e00\u79cd~~\u9738\u6c14\u7684~~\uff0c\u6301\u4e45\u7684\uff0c\u57fa\u4e8e\u7ebf\u6bb5\u6811\u7684**\u6570\u636e\u7ed3\u6784**\u3002\n\n------------\n## \u4e3b\u5e2d\u6811\u57fa\u672c\u539f\u7406\n$ \\ \\ \\ \\ \\ \\ \\ $\u524d\u6587\u8bf4\u4e86\uff0c\u7ebf\u6bb5\u6811\u4e0e\u4e3b\u5e2d\u6811\u7684\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u4e3b\u5e2d\u6811\u53ef\u6301\u4e45\u5316\uff0c\u90a3\u4e48\u96be\u70b9\u5c31\u5728\u4e8e\u600e\u4e48\u652f\u6301\u53ef\u6301\u4e45\u5316\u3002\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u6211\u4eec\u60f3\u8981\u652f\u6301\u56de\u9000\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u90fd\u8fdb\u884c\u4e00\u6b21\u590d\u5236\uff0c\u5c06\u672a\u8fdb\u884c\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\u7248\u672c\u8fdb\u884c\u590d\u5236\uff0c\u518d\u5bf9\u539f\u7ebf\u6bb5\u6811\u7248\u672c\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u65e7\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u4e86\u3002\u4e0d\u8fc7\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u6837\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u4e58\u4e0a\u4e00\u4e2am\uff0c\u53d8\u6210O(n*m)\u3002\u4e0d\u7528\u8bf4\uff0c\u80af\u5b9a\u4f1a\u9677\u5165mle\u4e2d\u4e0d\u53ef\u81ea\u62d4\u3002\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u90a3\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\uff1a![\u4e3b\u5e2d\u68111](https://cdn.luogu.com.cn/upload/pic/46128.png)\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u6a59\u989c\u8272\u7ecf\u8fc7\u7684\u7ed3\u70b9\u624d\u88ab\u4fee\u6539\u8fc7\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u53ea\u5bf9\u8fd9\u4e9b\u8282\u70b9\u8fdb\u884c\u4fee\u6539\u5462\uff1f\u7b54\u6848\u5f53\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u4e3b\u5e2d\u6811\u7684\u57fa\u672c\u601d\u60f3\u5c31\u662f\u53ea\u5bf9\u8fdb\u884c\u4fee\u6539\u7684\u7ed3\u70b9\u8fdb\u884c\u590d\u5236\u3002\u90a3\u4e48\u4e3b\u5e2d\u6811\u662f\u957f\u4ec0\u4e48\u6837\u5b50\u7684\u5462\uff0c\u4e0b\u9762\u4e00\u8d77\u6765\u770b\u4e00\u4e0b\u5427\u3002![\u4e3b\u5e2d\u68112](https://cdn.luogu.com.cn/upload/pic/46147.png)\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u770b\u7740\u600e\u4e48\u6076\u5fc3\u7684\u56fe\uff0c\u76f8\u4fe1\u5927\u5bb6\u8fd8\u662f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u56fe\u4e2d\u4e3b\u5e2d\u6811\u7684\u4e00\u4e9b\u6027\u8d28\uff1a\n\n1\u3001\u6bcf\u4e00\u6b21\u4fee\u6539\u589e\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u4e3alog(n)\u3002\n\n2\u3001\u589e\u52a0\u7684\u975e\u53f6\u5b50\u7ed3\u70b9\u4f1a\u8fde\u5411\u4e00\u4e2a\u662f\u5176\u4ed6\u7248\u672c\u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u662f\u8fde\u5411\u65b0\u8282\u70b9\u3002\n\n3\u3001\u4e3b\u5e2d\u6811\u6709\u5f88\u591a\u6839\u2026\u2026\n\n4\u3001\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u90fd\u53ef\u4ee5\u6784\u6210\u4e00\u68f5\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\u3002\n\n5\u3001\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6709\u53ef\u80fd\u6709\u4e0d\u53ea\u4e00\u4e2a\u7238\u7238\u2026\u2026\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4e3b\u5e2d\u6811\u53ea\u4f1a\u5bf9\u90e8\u5206\u8282\u70b9\u8fdb\u884c\u590d\u5236\uff0c\u5e76\u4e14\u6bcf\u4e00\u6b21\u590d\u5236\u7684\u8282\u70b9\u4e2a\u6570\u662flog(n)\u3002\u6211\u4eec\u6bcf\u4e00\u6b21\u60f3\u8be2\u95ee\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u5c31\u53ef\u4ee5\u5728\u90a3\u4e2a\u7248\u672c\u7684\u6839\u6784\u6210\u7684\u7ebf\u6bb5\u6811\u4e2d\u8be2\u95ee\u3002\n\n\u4f46\u540c\u65f6\u4e5f\u5ef6\u4f38\u51fa\u8bb8\u591a\u95ee\u9898\uff1a\n\n1\u3001\u600e\u4e48\u6784\u5efa\u65b0\u8282\u70b9\uff1f\u600e\u4e48\u7ed9\u65b0\u8282\u70b9\u7f16\u53f7\uff1f\u600e\u4e48\u8fde\u8fb9\uff1f\n\n2\u3001\u600e\u4e48\u8bbf\u95ee\u5b50\u8282\u70b9\uff1f\n\n3\u3001\u600e\u4e48\u5b58\u6839\uff1f\n\n$ \\ \\ \\ \\ \\ \\ \\ $\u5f88\u660e\u663e\u8fd9\u4e9b\u95ee\u9898\u5728\u7ebf\u6bb5\u6811\u4e2d\u5b8c\u5168\u4e0d\u4f1a\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u611f\u89c9\u5230\u4e3b\u5e2d\u6811\u5728\u5efa\u6811\u7684\u4ee3\u7801\u4e2d\u4f1a\u548c\u7ebf\u6bb5\u6811\u4e0d\u540c\u3002\n\n\u73b0\u5728\u7ed9\u51fa\u521a\u624d\u95ee\u9898\u7684\u7b54\u6848\uff1a\n\n1\u3001\u76f4\u63a5\u5f00\u4e00\u5757\u5185\u5b58\u6c60\u5b58\u65b0\u8282\u70b9\u3002\u7f16\u53f7\u4e3a\u6b64\u65f6\u603b\u8282\u70b9\u6570\u4e2a\u6570+1\u3002\u5f00\u7ed3\u6784\u4f53\u5b58\u5b50\u8282\u70b9\u7f16\u53f7\uff1b\u7ebf\u6bb5\u6811\u5efa\u4ec0\u4e48\u8fb9\uff0c\u4e00\u6307\u4e86\u4e8b\u3002\n\n2\u3001\u8bbf\u95ee\u5b50\u8282\u70b9\u7f16\u53f7\uff0c\u4e0d\u662f\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\u4e582\u6216\u4e582+1\uff0c\u800c\u662f\u5728\u7ed3\u6784\u4f53\u5b58\u5b50\u8282\u70b9\u7f16\u53f7\u3002\n\n3\u3001\u53e6\u5916\u5f00\u4e2a\u6570\u7ec4\u5b58\u3002\n\n------------\n\n\u4ee3\u7801\u4e3b\u8981\u548c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\uff0c\u4e0b\u9762\u5c31\u770b\u4ee3\u7801\u5427\u3002\n\n# \u4ee3\u7801  P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\n\n\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u8981\u5b58\u4e09\u4e2a\u4fe1\u606f\uff1a\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff0c\u6743\u503c\n```cpp\nstruct kkk{\n\tint l,r,val;\n}tree[maxn];\n```\n\u65b0\u5efa\u8282\u70b9\uff1a\n```cpp\nint clone(int node){\n\ttop++;\n\ttree[top]=tree[node];//\u5168\u90e8\u4fe1\u606f\u90fd\u4f20\u5230\u65b0\u8282\u70b9\n\treturn top;\n}\n```\n\u5efa\u6811\u5176\u5b9e\u5c31\u662f\u65b0\u5efa\u8282\u70b9\u7684\u8fc7\u7a0b\uff1a\n```cpp\nint maketree(int node,int begin,int end){\n\tnode=++top;\n\tif(begin==end){\n\t\ttree[node].val=a[begin];\n\t\treturn top;\n\t}\n\tint mid=(begin+end)>>1;\n\ttree[node].l=maketree(tree[node].l,begin,mid);\n\ttree[node].r=maketree(tree[node].r,mid+1,end);\n\treturn node;\n}\n```\n\u66f4\u65b0\u548c\u7ebf\u6bb5\u6811\u5f88\u50cf\uff1a\n```cpp\nint update(int node,int begin,int end,int x,int val){\n\tnode=clone(node);\t//\u66f4\u65b0\u5c31\u8981\u65b0\u5efa\u8282\u70b9 \n\tif(begin==end){\n\t\ttree[node].val=val;\n\t}else{\n\t\tint mid=(begin+end)>>1;\n\t\tif(x<=mid)\n\t\t\ttree[node].l=update(tree[node].l,begin,mid,x,val);\t//\u8bbf\u95ee\u5de6\u5b50\u6811 \n\t\telse\n\t\t\ttree[node].r=update(tree[node].r,mid+1,end,x,val);\t//\u8bbf\u95ee\u53f3\u5b50\u6811 \n\t}\n\treturn node;\n}\n```\n\u8be2\u95ee\u4e5f\u4e00\u6837\uff1a\n```cpp\nint query(int node,int begin,int end,int x){\n\tif(begin==end){\n\t\treturn tree[node].val;\n\t}else{\n\t\tint mid=(begin+end)>>1;\n\t\tif(x<=mid)\n\t\t\treturn query(tree[node].l,begin,mid,x);\t//\u8bbf\u95ee\u5de6\u5b50\u6811 \n\t\telse\n\t\t\treturn query(tree[node].r,mid+1,end,x);\t//\u8bbf\u95ee\u53f3\u5b50\u6811 \n\t}\n}\n```\n\u90a3\u4e48\u4e3b\u5e2d\u6811\u7684\u64cd\u4f5c\u90e8\u5206\u5c31\u5199\u5b8c\u4e86QwQ\n\n\u518d\u6765\u770b\u4e3b\u7a0b\u5e8f\uff0c\u91cc\u9762\u770b\u6839\u600e\u4e48\u5b58\u50a8\uff1a\n```cpp\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\troot[0]=maketree(0,1,n);\t//root[i]\u4e3ai\u7248\u672c\u7684\u6839\u7f16\u53f7\uff0c\u521a\u5f00\u59cb\u7f16\u53f7\u4e3a0 \n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&rt,&mode,&x);\n\t\tif(mode==1){\n\t\t\tscanf(\"%d\",&y);\n\t\t\troot[i]=update(root[rt],1,n,x,y);\t//\u4fdd\u5b58\u7248\u672c \n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d\\n\",query(root[rt],1,n,x));\t//\u8f93\u51fa \n\t\t\troot[i]=root[rt];\t\t\t\t\t//\u65b0\u5efa\u7248\u672c \n\t\t}\n\t}\n}\n```\n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u5199\u5b8c\u4e86\u3002~~\uff08\u5176\u5b9e\u6211\u89c9\u5f97\u4e00\u770b\u56fe\u5c31\u61c2\u4e86\uff0c\u4ee3\u7801\u4ec0\u4e48\u7684\u90fd\u662f\u5047\u7684\uff09~~",
        "postTime": 1544764968,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4 -\u521d\u6b65\u63a2\u7a76\u4e3b\u5e2d\u6811"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b9e\u73b0\n\n\u7136\u540e\u5b9e\u73b0\u7684\u65b9\u6cd5\u5c31\u662f\u6bcf\u6b21\u5728\u5bf9\u5e94\u7684\u5386\u53f2\u7248\u672c\u8fdb\u884cpath-copy\u3002\n\n```cpp\n#include<bits/stdc++.h>\nconst int N=1000005;\nusing namespace std;\nint a[N],n,q,rt[N*20];\ninline int read(){\n    int f=1,x=0;char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f*x;\n}\nstruct Persistable_Segment_Tree{\n    int lc[N*20],rc[N*20],val[N*20],cnt;\n    inline void build(int &o,int l,int r){\n        o=++cnt;\n        if(l==r){val[o]=a[l];return;}\n        int mid=(l+r)>>1;\n        build(lc[o],l,mid);build(rc[o],mid+1,r);\n    }\n    inline void ins(int &o,int pre,int l,int r,int q,int v){\n        o=++cnt;lc[o]=lc[pre];rc[o]=rc[pre];val[o]=val[pre];\n        if(l==r){val[o]=v;return;}\n        int mid=(l+r)>>1;\n        if(q<=mid)ins(lc[o],lc[pre],l,mid,q,v);\n        else ins(rc[o],rc[pre],mid+1,r,q,v);\n    }\n    inline int query(int o,int l,int r,int q){\n        if(l==r)return val[o];\n        int mid=(l+r)>>1;\n        if(q<=mid)return query(lc[o],l,mid,q);\n        else return query(rc[o],mid+1,r,q);\n    }\n}T;\nint main(){\n    n=read();int m=read();\n    for(int i=1;i<=n;i++)a[i]=read();\n    T.build(rt[0],1,n);\n    for(int i=1;i<=m;i++){\n        int pre=read(),opt=read(),x=read();\n        if(opt==1){int v=read();T.ins(rt[i],rt[pre],1,n,x,v);}\n        if(opt==2){printf(\"%d\\n\",T.query(rt[pre],1,n,x));rt[i]=rt[pre];}\n    }\n}\n```",
        "postTime": 1504176686,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u867d\u7136\u8fd9\u8fdd\u53cd\u4e86\u6a21\u677f\u7684\u672c\u610f\uff0c\u4f46\u662f\u672c\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u505a\u6cd5\u4e5f\u4f1a\u5bf9\u5e94\u4e8e\u4e00\u7c7b\u7279\u522b\u7684\u9898\u76ee\u3002\u5373\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\u3002\n\n\n\u8003\u8651\u5230\u6bcf\u4e00\u4e2a\u7248\u672c\u90fd\u88ab\u4e00\u4e9b\u7248\u672c\u6240\u4f9d\u8d56\uff0c\u8fd9\u79cd\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u88ab\u5f53\u505a\u4e00\u68f5\u6811\u3002\u5728\u8bfb\u5165\u65f6\u5efa\u6811\uff0c\u6700\u540e\u8fdb\u884c\u64cd\u4f5c\u65f6\u5c31\u662f\u5c06\u6811\u4ece\u539f\u70b90\u5904\u8fdb\u884cdfs\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u76f4\u63a5\u5b58\u8fdb\u7b54\u6848\u6570\u7ec4\uff0c\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u8fdb\u884c\u4fee\u6539\u540e\u518ddfs\uff0c\u7ed3\u675f\u540e\u518d\u64a4\u56de\u4fee\u6539\u3002\n\n\n\u8fd9\u79cd\u601d\u8def\u53ef\u4ee5\u8fc7\u6389\u90e8\u5206\u9898\u76ee\uff0c\u4f46\u524d\u63d0\u662f\u64cd\u4f5c\u53ef\u9006\uff0c\u6240\u4ee5\u4e0d\u80fd\u8fc7\u6389\u8bf8\u5982\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7684\u9898\u76ee\u3002\n\n\n```cpp\n#include <cstdio>\n\nusing namespace std;\n\nstruct edge {\n    int v;\n    edge* next;\n};\n\nconst int N = 1000010;\n\nint n, m;\nint a[N], ans[N], op[N], k[N], x[N];\nedge* g[N];\n\nvoid add_edge(int u, int v);\nvoid dfs(int u);\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i)\n        scanf(\"%d\", &a[i]);\n    op[0] = 2;\n    for (int i = 1; i <= m; ++i) {\n        int v;\n        scanf(\"%d%d%d\", &v, &op[i], &k[i]);\n        if (op[i] == 1)\n            scanf(\"%d\", &x[i]);\n        add_edge(v, i);\n    }\n    dfs(0);\n    for (int i = 1; i <= m; ++i)\n        if (op[i] == 2)\n            printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n\nvoid dfs(int u) {\n    if (op[u] == 2) {\n        ans[u] = a[k[u]];\n        for (edge* p = g[u]; p; p = p->next)\n            dfs(p->v);\n    } else {\n        int ori = a[k[u]];\n        a[k[u]] = x[u];\n        for (edge* p = g[u]; p; p = p->next)\n            dfs(p->v);\n        a[k[u]] = ori;\n    }\n}\n\nvoid add_edge(int u, int v) {\n    static edge pool[N];\n    static edge* p = pool;\n    p->v = v;\n    p->next = g[u];\n    g[u] = p;\n    ++p;\n}\n\n```",
        "postTime": 1515564831,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "## \u4e00\u4e2a\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7684\u7b97\u6cd5\uff0c\u7b97\u662f\u7ef4\u62a4\u534a\u4e2a\u5e76\u67e5\u96c6\u5427\n\u6211\u770b\u5230\u8fd9\u9053\u9898\u662f\u7b2c\u4e00\u773c\u53d1\u73b0\u8fd9\u4e0d\u662f\u5c31\u662f\u4e3b\u5e2d\u6811\uff0c\u7136\u540e\u770b\u9898\u89e3\u90fd\u662f\u4ec0\u4e48\u5212\u5206\u6570\uff0c\u4e3b\u5e2d\u6811\uff0c\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811(:\u8ba4\u771f ~~\u6211\u771f\u7684\u7ffb\u5b8c\u6240\u6709\u7684\u9898\u89e3\uff0c\u6ca1\u6709\u770b\u5230\u4e00\u4e2a\u601d\u8def\u548c\u6211\u4e00\u6837\u7684~~)\u3002\n\n\u7136\u540e\u60f3\u4e86\u60f3\u611f\u89c9\u6309\u7167\u4e3b\u5e2d\u6811\u7684\u5199\u6cd5\u6709\u70b9\u6d6a\u8d39\u7a7a\u95f4\uff0c\u7136\u540e\u6211\u5c31\u60f3\u7528vector\u53bb\u6a21\u62df\u4e00\u4e0b\u94fe\u8868\uff0c\u5b58\u4e00\u4e0b\u4fee\u6539\u7684\u503c\n```cpp\nvector<int> a[maxn + 5], b[maxn + 5];\nint pr[maxn + 5], f[maxn + 5];\n```\n\u5148\u4ecb\u7ecd\u4e00\u4e0b\u53d8\u91cf\u7684\u7528\u9014\u5427\uff0c\u4e3b\u8981\u7684\u64cd\u4f5c\u5c31\u662f\u4f9d\u7167\u4e0a\u9762\u7684\u90a3\u4e9b\u4e1c\u897f\n\n\u5176\u5b9e\u6700\u5f00\u59cb\u6211\u662f\u60f3\u7528pair\u4f46\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u5199\u53ef\u4ee5\u7528lower_bound\u76f4\u63a5\u641c\u6240\u4ee5\u6211\u5f00\u4e86\u4e24\u4e2a\u6570\u7ec4a\u6570\u7ec4\u5b58\u7684\u662f\u7b2c\u51e0\u4ee3\uff0cb\u6570\u7ec4\u5b58\u7684\u662fa\u6570\u7ec4\u8868\u793a\u7b2c\u51e0\u4ee3\u7684\u90a3\u4e00\u6b21\u7684\u64cd\u4f5c\u6570\n\npr\u6570\u7ec4\u5b58\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u7956\u5148\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u524d\u9762\u6211\u8bf4\u8fd9\u662f\u7ef4\u62a4\u534a\u4e2a\u5e76\u67e5\u96c6\u5c31\u662f\u56e0\u4e3a\u6211\u4e0d\u4f1a\u7528\u5230\u5408\u5e76\u8def\u5f84\u7684\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u9501pr\u6570\u7ec4\u91cc\u53ea\u4f1a\u5b58\u7b2ci\u4e2a\u7248\u672c\u4f9d\u5b58\u7684vi\u7684\u7248\u672c\u7684\u7f16\u53f7\uff0c\u5176\u5b9e\u611f\u89c9\u8981\u662f\u6570\u636e\u5f3a\u7684\u8bdd\u6211\u8fd9\u6837\u5199\u4f1aT\u6389\uff0c\u6bd5\u7adf\u6ca1\u6709\u5408\u5e76\u8def\u5f84\n\nf\u6570\u7ec4\u5b58\u7684\u662f\u5f53\u524d\u64cd\u4f5c\u662f\u5426\u88ab\u4fee\u6539(\u9ed8\u8ba40\u7248\u672c\u662f\u6ca1\u6709\u88ab\u4fee\u6539\u7684,\u6240\u4ee5\u6211\u7279\u5224\u4e86\u4e00\u4e0b0\uff0c\u56e0\u4e3a\u53ea\u6709\u5728\u7f16\u53f7\u4e3a0\u7684\u7248\u672c\u4e2d\u76f8\u5f53\u4e8e\u6240\u6709\u7684\u6570\u90fd\u662f\u88ab\u4fee\u6539\u8fc7\u7684)\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u4fee\u6539\u5219\u5b580\uff0c\u82e5\u662f\u88ab\u4fee\u6539\u8fc7\u90a3f\u6570\u7ec4\u5c31\u5b58\u4e0b\u6765\u662f\u8fd9\u4e00\u884c\u54ea\u4e00\u4e2a\u6570\u88ab\u4fee\u6539\u8fc7\u4e86\n\n...cpp/* \u5047\u88c5\u4e00\u4e2acpp\u683c\u5f0f */\n\n//\u4e0b\u9762\u4ec5\u4ec5\u5305\u542b\u5904\u7406\u5de5\u4f5c\u4e5f\u5c31\u662f\u8bf4\u67e5\u8be2\u64cd\u4f5c\u4e0d\u8bb2\u8be5\u600e\u4e48\u8f93\u51fa,\u8f93\u51fa\u64cd\u4f5c\u6211\u5199\u5230\u4ee3\u7801\u6ce8\u91ca\u91cc\u9762\u4e86\n\n...\n\n\u5148\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u6b21\u67e5\u8be2\u64cd\u4f5c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u662f\u4e0d\u4f1a\u88ab\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u8bf4\u6211\u5c31\u8ba9\n```cpp\npr[i] = vi;//i\u662f\u7b2ci\u4e2a\u7248\u672c,vi\u662f\u8fd9\u4e00\u4e2a\u7248\u672c\u4f9d\u5b58\u7684\u4e0a\u4e00\u4e2a\u7248\u672c\n f[i] = 0;//\u6211\u5728\u4ee3\u7801\u4e2d\u6ca1\u6709\u5199\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4e0d\u5199\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5c31\u4ee3\u8868\u8fd9\u4e2a\u7248\u672c\u662f\u67e5\u8be2\u64cd\u4f5c\u7559\u4e0b\u4e86\u7684\u7248\u672c\n```\n\u7136\u540e\u6211\u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e00\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u7528\u4e3a\u8fd9\u4e00\u7248\u672c\u65b0\u5b58\u4e00\u4e0b\uff0c\u76f4\u63a5\u7559\u4e00\u4e2a\u7d22\u5f15\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u884c\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u5982\u4e0b\n```cpp\npr[i] = vi;  //\u5982\u4e0a\n f[i] = loci //\u7b2ci\u4e2a\u7248\u672c\u4e2d\u7b2cloci\u4e2a\u4f4d\u7f6e\u88ab\u4fee\u6539\u4e86\n a[loci].push_back(i); \n b[loci].push_back(vaule);//a,b\u4e24\u4e2a\u6570\u7ec4\u5b58\u7684\u662f\u7b2ci\u4e2a\u7248\u672c\u4e2d\u5b58\u4e0b\u6765vaule\uff0c\u53ea\u6709\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u53ef\u4ee5\u4e0d\u7528\u7ba1\u548c\u7956\u5148\u7684\u5173\u7cfb\uff0c\u5982\u679c\u67e5\u8be2\u5230\u7b2ci\u4e2a\u7248\u672c\u4e2d\u7684f[i]\u4e3a\u771f\uff0c\u5e76\u4e14\u67e5\u8be2\u5230\u7b2cloci\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56deb\u7684\u503c\u4e86\n ```\n\n\u6211\u6765\u5206\u6790\u4e00\u4e0b\u6837\u4f8b \u6570\u76ee\u592a\u591a\u6211\u5c31\u5206\u4eab\u4e00\u4e0b\u540e5\u6b21\u64cd\u4f5c//\u672c\u6765\u50cf\u5206\u6790\u524d\u4e94\u6b21\u64cd\u4f5c\uff0c\u4f46\u662f\u53d1\u73b0\u524d\u4e94\u6b21\u64cd\u4f5c\u6ca1\u6709\u4ec0\u4e48\u597d\u5206\u6790\u7684\n![](https://cdn.luogu.com.cn/upload/pic/59326.png)\n\n\u8fd9\u4e2a\u662f\u6211\u6837\u4f8b\u5f04\u5b8c\u4e4b\u540e\u7684\u5b58\u50a8\u72b6\u51b5\uff0c\u7a7a\u767d\u7684\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\n\n![](https://cdn.luogu.com.cn/upload/pic/59327.png)\n\n\u5bf9\u4e8e\u7b2c\u516d\u6b21\uff0c\u7b2c\u4e03\u6b21\u67e5\u8be2\u7684\u662f0\u7248\u672c\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\n\n\u7b2c\u516b\u6b21\u67e5\u8be2\u64cd\u4f5c\u65f6\u7b2c\u56db\u4e2a\u7248\u672c\n\n\u6240\u4ee5\u8bf4pr[8] = 4, f[8] = 0;\n\n\u7b2c\u4e5d\u6b21\u548c\u4e0a\u4e00\u6b21\u4e00\u6837\n\n\u7b2c\u5341\u6b21\u5c31\u662f\u5bf9\u7b2c\u4e00\u7248\u672c\u7684\u8fdb\u884c\u7b2c\u4e94\u4e2a\u4e66\u4fee\u6539\n\n\u6240\u4ee5pr[10] = 1, f[10] = 5;\n\n\u7136\u540e\u518da[5]\u548cb[5]\u540e\u9762\u5206\u522b\u52a0\u5165\u4e00\u4e2a10\u548c91\u8868\u793a\u7b2c\u5341\u4e2a\u7248\u672c\u66f4\u65b0\u621091\n\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\n\nconst int maxn = 1e6;\nvector<int> a[maxn + 5], b[maxn + 5];\nint pr[maxn + 5], f[maxn + 5];\n\nint32_t main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);// \u8fd9\u4e2a\u5c31\u4e0d\u8bf4\u4ec0\u4e48\u610f\u601d\u4e86\n    int n, m, x, vi, op, l, v; cin >> n >> m; // \u8bfb\u5165\u64cd\u4f5c\n    for(int i = 1 ; i <= n ; i ++)\n    {\n        cin >> x;\n        a[i].push_back(0);\n        b[i].push_back(x);\n    }//\u5904\u7406\u6700\u521d\u7684\u6570\u7ec4\u503c\uff0c\u800c\u4e14\u6700\u521d\u65f6\u7b2c0\u4ee3\n    for(int i = 1 ; i <= m ; i ++)\n    {\n        cin >> vi >> op >> l;\n        pr[i] = vi; // \u8868\u793a\u7b2ci\u4ee3\u7248\u672c\u662f\u7531\u7b2cvi\u4ee3\u7248\u672c\u7ee7\u627f\u800c\u6765\n        if(op == 1) \n        {\n             cin >> v;\n             a[l].push_back(i);\n             b[l].push_back(v); // \u5bf9\u4e8ea\u548cb\u5e94\u5f80\u6700\u540e\u52a0\u4e00\u4e2a\u8fd9\u662f\u7b2ci\u4ee3\u7248\u672c(\u4e3a\u4e86\u540e\u9762\u67e5\u627e\u65b9\u4fbf)\uff0c\u548c\u8fd9\u4e2a\u7248\u672c\u7b2cl\u4e2a\u4f4d\u7f6e\u7684\u503c\n             f[i]  = l; //\u8868\u793a\u7b2ci\u884c\u7b2cl\u4e2a\u6570\u88ab\u4fee\u6539\u4e86\n        }\n        else\n        {\n\t\t\twhile(true) // \u795e\u5947\u7684while(true)\n\t\t\t{\n\t\t\t\tint x = vi;\n\t\t\t\tif(x == 0) // \u5982\u679c\u8fd9\u4e2a\u7248\u672c\u7684\u6240\u4f9d\u8d56\u7684\u4e3a0\u5c31\u76f4\u63a5\u8f93\u51fa\u7b2c0\u4e2a\u5143\u7d20\n\t\t\t\t{\n\t\t\t\t\tcout << b[l][0] << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(f[x] == l) // \u5982\u679c\u8fd9\u4e2a\u5f53\u524d\u7248\u672c\u6240\u4f9d\u8d56\u7684\u7248\u672c\u65f6\u88ab\u4fee\u6539\u8fc7\u7684\uff0c\u5e76\u4e14\u4fee\u6539\u7684\u662f\u7b2cl\u5217\u5c31\u4e8c\u5206\u67e5\u627ea[l]\u6570\u7ec4\u627e\u5230\u51fa\u73b0\u8fc7\u7684\u7248\u672c\u7684\u4f4d\u7f6e\n\t\t\t\t{\n\t\t\t\t\tint y = lower_bound(a[l].begin(), a[l].end(), vi) - a[l].begin();\n\t\t\t\t\tif(y + a[l].begin() == a[l].end()) y -= 1; // \u5982\u679c\u6ca1\u6709\u5c31\u51cf1\uff0c\u5e94\u8be5\u6709,\u52a0\u4e0d\u52a0\u8fd9\u4e00\u884c\u662f\u4e0d\u662f\u8fc7\u7684\u6211\u4e5f\u4e0d\u6e05\u695a\n\t\t\t\t\tcout << b[l][y] << endl;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvi = pr[vi]; // \u5e76\u67e5\u96c6\u7684\u64cd\u4f5c\uff0c\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0a\u627e\uff0c\u4e0d\u8fc7\u4e0d\u80fd\u5408\u5e76\u8def\u5f84(\u5176\u5b9e\u53ef\u4ee5\u53ea\u662f\u8fd9\u6837\u5199\u4f1a\u9ebb\u70e6\u4e00\u70b9\uff0c\u800c\u4e14\u4e0d\u5199\u5c31\u53ef\u4ee5\u8fc7,\u6240\u4ee5\u6211\u5c31\u6ca1\u6709\u5199)\n\t\t\t\t}\n\t\t\t}\n        }\n        \n    }\n    return 0;\n}\n\n```\n\n### \u611f\u89c9\u6211\u5199\u7684\u8fd9\u4e2a\u6709\u70b9\u8ff7\uff0c\u4e0d\u77e5\u9053\u6539\u600e\u4e48\u9898\u73b0\u6211\u7684\u601d\u8def\uff0c\u5982\u679c\u5bf9\u4e8e\u8fd9\u4efd\u9898\u89e3\u6709\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u79c1\u4fe1\u6211",
        "postTime": 1558630076,
        "uid": 132994,
        "name": "lzx1999",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4f7f\u7528STL\u6df7\u5206\u7684\u65b9\u6cd5\uff0c\u6309\u7167\u73b0\u5728\u7684NOI Linux\u73af\u5883\uff0c\u6bd4\u8d5b\u91cc\u9762\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bc4\u6d4b\u3002\n\n\u5bfc\u5165ext/rope\uff0c\u5c31\u767d\u9001\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u6570\u7ec4233\n\n\u4e0d\u8fc7\u5e38\u6570\u6709\u70b9\u5927\u5c31\u662f\u4e86\uff0c\u8fd9\u4e2a\u9898\u76ee\u4f3c\u4e4e\u8981\u6c42\u6bd4\u8f83\u4e25\u683c\uff0c\u53ea\u80fd\u62ff80\u3002\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n#include <ext/rope>\nusing namespace std;\nusing namespace __gnu_cxx;\nconst int MAXM = 1e6;\nint N,M;\nrope<int> *S[MAXM+10];\ninline int readint(){\n    int f=1,r=0;char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1; c=getchar();}\n    while(isdigit(c)){r=r*10+c-'0';c=getchar();}\n    return f*r;\n}\nint main(){\n    N=readint();M=readint();\n    S[0]=new rope<int>();\n    S[0]->append(0);\n    for(int i=1;i<=N;i++)\n        S[0]->append(readint());\n    for(int i=1;i<=M;i++){\n        int v,k,a,b;\n        v=readint();k=readint();\n        S[i]=new rope<int>(*S[v]);//\u4ece\u6307\u5b9a\u7248\u672c\u751f\u6210\u65b0\u7248\u672c\uff08\u53ea\u6362\u6839\uff09\n        if(k==1) {\n            a=readint();b=readint();\n            S[i]->replace(a,b);\n        } else {\n            a=readint();\n            printf(\"%d\\n\",S[i]->at(a));\n        }\n    }\n}\n```",
        "postTime": 1503154353,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "## \u6d45\u8c08\u4e3b\u5e2d\u6811\n\n\u4e3b\u5e2d\u6811\uff0c\u53c8\u540d\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u51fd\u6570\u5f0f\u7ebf\u6bb5\u6811~~\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u5565\u610f\u601d\uff09~~\u3002\u4e4b\u6240\u4ee5\u53eb\u4e3b\u5e2d\u6811\u662f\u56e0\u4e3a\u53d1\u660e\u4eba\u9ec4\u5609\u6cf0\u59d3\u540d\u7f29\u5199\u662fhjt~~\uff08\u77e5\u9053\u662f\u8c01\u5427\uff09~~\n\n\u9996\u5148\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u987e\u540d\u601d\u4e49~~\u5b83\u662f\u6301\u4e45\u7684~~\uff0c\u5b83\u652f\u6301\u8be2\u95ee\u8fc7\u53bb\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u8fc7\u53bb\u67d0\u4e00\u6b21\u64cd\u4f5c\u65f6\u7684\u6811\uff0c\u90a3\u4e48\u8fd9\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u4f8b\u98981\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4$a_1,a_2,...,a_n$\uff0c\u73b0\u5728\u6709$m$\u6b21\u64cd\u4f5c\uff1a\n\n1.\u5c06$a_i$\u53d8\u4e3a$x$\n\n2.\u8be2\u95ee\u5728\u7b2ck\u6b21\u64cd\u4f5c\u540e\uff0c$\\Sigma_{i=l}^r a_i$\u7684\u503c\n\n\u6837\u4f8b\u8f93\u5165\n\n```\n4\n1000 200 30 4\n5\n1 3 50\n1 2 600\n2 0 1 4\n2 1 1 4\n2 2 1 4\n```\n\n\u6837\u4f8b\u8f93\u51fa\n\n```\n1234\n1254\n1654\n```\n\n\u548c\u4ee5\u5f80\u4e0d\u540c\uff0c\u73b0\u5728\u8be2\u95ee\u662f\u5bf9\u67d0\u4e00\u6b21\u7684\u64cd\u4f5c\u540e\u7684\u5e8f\u5217\u505a\u8be2\u95ee\u3002\n\n\u5982\u679c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u90a3\u6211\u4eec\u9700\u8981\u5b58\u4e0b\u6bcf\u6b21\u4fee\u6539\u5b8c\u540e\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u4e00\u4e2a\u7ebf\u6bb5\u6811\u9700\u8981 O(n) \u7684\u7a7a\u95f4\uff0c\u663e\u7136\u4e0d\u80fd\u5b58\u4e0b n \u9897\u7ebf\u6bb5\u6811,\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u91cc\u627e\u627e\u7a81\u7834\u53e3\u3002\n\n\u4e0d\u59a8\u5148\u8003\u8651\u6700\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/igkbj37t.png)\n\n\u7b2c\u4e00\u6b21\u64cd\u4f5c\uff1a\u628a\u7b2c 3 \u4e2a\u4f4d\u7f6e\u6539\u4e3a 50\n\n\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\uff0c\u8fd9\u9897\u7ebf\u6bb5\u6811\u548c\u4e0a\u4e00\u9897\u7ebf\u6bb5\u6811\u53ea\u6709 $logn$ \u4e2a\u8282\u70b9\u53d1\u751f\u4e86\u53d8\u5316\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4jlgsgid.png)\n\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\uff1a\u628a\u7b2c 2 \u4e2a\u4f4d\u7f6e\u6539\u4e3a 600\n\n\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\uff0c\u8fd9\u9897\u7ebf\u6bb5\u6811\u548c\u4e0a\u4e00\u9897\u7ebf\u6bb5\u6811\u540c\u6837\u4e5f\u53ea\u6709 $logn$ \u4e2a\u8282\u70b9\u53d1\u751f\u4e86\u53d8\u5316\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t4dunbjs.png)\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u5355\u70b9\u4fee\u6539\uff0c\u53d1\u751f\u6539\u53d8\u7684\u8282\u70b9\u53ea\u6709 $logn$ \u4e2a\uff0c\u5c31\u662f\u4ece\u6839\u8282\u70b9\u5230\u90a3\u4e2a\u70b9\u5bf9\u5e94\u7684\u53f6\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u53ea\u8981\u5b58\u4e0b\u6765\u8fd9\u65b0\u7684 $logn$ \u4e2a\u8282\u70b9\uff0c\u5c3d\u53ef\u80fd\u7684\u5229\u7528\u4e0a\u4e00\u9897\u6811\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u5b58\u4e0b\u4e00\u9897\u65b0\u7684\u7ebf\u6bb5\u6811\uff01\n\n\u5bf9\u4e8e\u8fd9\u68f5\u6811\u6765\u8bf4\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/igkbj37t.png)\n\n\u7b2c\u4e00\u6b21\u64cd\u4f5c\uff1a\u628a\u7b2c 3 \u4e2a\u4f4d\u7f6e\u6539\u4e3a 50\u3002\n\n\u6211\u4eec\u53ea\u8981\u65b0\u5efa log n \u4e2a\u65b0\u70b9\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u5229\u7528\u4e0a\u4e00\u9897\u6811\u7684\u4fe1\u606f\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rat8j56t.png)\n\n\u8fd9\u5c31\u662f\u7b2c\u4e00\u6b21\u64cd\u4f5c\u540e\u7684\u7ebf\u6bb5\u6811\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/17co0mzp.png)\n\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\uff1a\u628a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u6539\u621050\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qtk8f0zy.png)\n\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u540e\u7684\u7ebf\u6bb5\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ros9xx3w.png)\n\n\u628a\u4e09\u68f5\u6811\u90fd\u5217\u51fa\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5yqi3dmg.png)\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u4e86\n\n\u7531\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u90fd\u4f1a\u589e\u52a0$logn$\u4e2a\u70b9\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u53d8\u6210\u4e86$nlogn$\uff0c\u4e00\u822c\u5f0020\u500d\u7684\u6570\u7ec4\u5c31\u884c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u65e7\u662f$O(mlogn)$\n\n\u6ce8\u610f\u5b9e\u73b0\u7684\u65f6\u5019\u4e0d\u80fd\u7528$2x$\u548c$2x+1$\u8868\u793a\u5de6\u53f3\u8282\u70b9\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5f00Ls\u548cRs\u6570\u7ec4\u8bb0\u5f55\u5de6\u53f3\u513f\u5b50\n\n\u4f8b\u98982\uff1a\n\n[\u6d1b\u8c37P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4](<https://www.luogu.org/problem/P3919>)\n\n\u5982\u9898\uff0c\u4f60\u9700\u8981\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a $N$ \u7684\u6570\u7ec4\uff0c\u652f\u6301\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\n\n1. \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\n2. \u8bbf\u95ee\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u7684\u67d0\u4e00\u4f4d\u7f6e\u7684\u503c\n\n\u6b64\u5916\uff0c\u6bcf\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff08**\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u5373\u4e3a\u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u7248\u672c\uff0c\u4e0d\u4f5c\u4efb\u4f55\u6539\u52a8**\uff09\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002\u7248\u672c\u7f16\u53f7\u5373\u4e3a\u5f53\u524d\u64cd\u4f5c\u7684\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7248\u672c0\u8868\u793a\u521d\u59cb\u72b6\u6001\u6570\u7ec4\uff09\n\n\n\n\u5efa\u6811\uff1a\n\n```cpp\nvoid build(int &cnt, int l, int r)\n{\n\tcnt = ++iCnt;\n\tif(l == r) \n\t{\n\t\tiSum[cnt] = iA[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(iLs[cnt], l, mid);\n\tbuild(iRs[cnt], mid+1, r);\n}\n```\n\n\u4fee\u6539\uff1a\n\n```cpp\nvoid ins(int &cnt, int pre, int l, int r, int q, int v)\n{\n\tcnt = ++iCnt;\n\tiLs[cnt] = iLs[pre],iRs[cnt] = iRs[pre],iSum[cnt] = iSum[pre];\n\tif(l == r) \n\t{\n\t\tiSum[cnt] = v;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tif(q <= mid) ins(iLs[cnt], iLs[pre], l, mid, q, v);\n\tif(q > mid) ins(iRs[cnt], iRs[pre], mid+1, r, q, v);\n}\n```\n\n\u67e5\u8be2\uff1a\n\n```cpp\nint query(int cnt, int l, int r, int q)\n{\n\tif(l == r) return iSum[cnt];\n\tint mid = l + r >> 1;\n\tif(q <= mid) return query(iLs[cnt], l, mid, q);\n\tif(q > mid) return query(iRs[cnt], mid+1, r, q);\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1000005;\nint iRt[N * 20], iSum[N * 20], iLs[N * 20], iRs[N * 20], iCnt, n, m, iA[N];\n\nvoid build(int &cnt, int l, int r)\n{\n\tcnt = ++iCnt;\n\tif(l == r) \n\t{\n\t\tiSum[cnt] = iA[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(iLs[cnt], l, mid);\n\tbuild(iRs[cnt], mid+1, r);\n}\n\nvoid ins(int &cnt, int pre, int l, int r, int q, int v)\n{\n\tcnt = ++iCnt;\n\tiLs[cnt] = iLs[pre],iRs[cnt] = iRs[pre],iSum[cnt] = iSum[pre];\n\tif(l == r) \n\t{\n\t\tiSum[cnt] = v;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tif(q <= mid) ins(iLs[cnt], iLs[pre], l, mid, q, v);\n\tif(q > mid) ins(iRs[cnt], iRs[pre], mid+1, r, q, v);\n}\n\nint query(int cnt, int l, int r, int q)\n{\n\tif(l == r) return iSum[cnt];\n\tint mid = l + r >> 1;\n\tif(q <= mid) return query(iLs[cnt], l, mid, q);\n\tif(q > mid) return query(iRs[cnt], mid+1, r, q);\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\", &iA[i]);\n\tbuild(iRt[0], 1, n);\n\tfor(int i = 1, cnt, opt, x, y; i <= m; i++)\n\t{\n\t\tscanf(\"%d%d\", &cnt, &opt);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tscanf(\"%d%d\", &x, &y);\n\t\t\tins(iRt[i], iRt[cnt], 1, n, x, y);\n\t\t}\n\t\telse if(opt == 2)\n\t\t{\n\t\t\tscanf(\"%d\", &x);\n\t\t\tprintf(\"%d\\n\", query(iRt[cnt], 1, n, x));\n\t\t\tiRt[i] = iRt[cnt];\n\t\t}\n\t}\n}\n```\n\n\u4f8b\u98983\uff1a\n\n[P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1](<https://www.luogu.org/problem/P3834>)\n\n\u7ed9\u5b9a $n$ \u4e2a\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\uff0c\u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2c $k$ \u5c0f\u503c\u3002\n\n\u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $n,m$\uff0c\u5206\u522b\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u67e5\u8be2\u7684\u4e2a\u6570\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b $n$ \u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u5404\u9879\u7684\u6570\u5b57\u3002\n\n\u63a5\u4e0b\u6765 $m$ \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 $l, r, k$, \u8868\u793a\u67e5\u8be2\u533a\u95f4 $[l, r]$ \u5185\u7684\u7b2c $k$ \u5c0f\u503c\u3002\n\n\n\n\u8fd9\u4e2a\u9898\u867d\u7136\u548c\u4e0a\u4e00\u9053\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u4f46\u662f\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u505a\uff0c\u5177\u4f53\u601d\u60f3\u7684\u8bdd\u5c31\u662f\u5bf9\u6570\u636e\u79bb\u6563\u5316\u4e4b\u540e\u5efa\u4e00\u68f5\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u7684\u662f\u5728\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u8303\u56f4\u5185\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u6570\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u628a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u6dfb\u52a0\u5230\u7ebf\u6bb5\u6811\u4e2d\u5e76\u8bb0\u5f55\u5386\u53f2\u7248\u672c\n\n\u6bd4\u5982\uff1a\n\n```\n4 1\n1 3 4 2\n2 4 2\n```\n\n\u521a\u5f00\u59cb\u5148\u5efa\u4e00\u68f5\u7a7a\u6811\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gpuj6tw6.png)\n\n\u6309\u7167\u987a\u5e8f\u4e00\u4e2a\u4e2a\u6dfb\u52a0\n\nTree1\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lw2f1ip9.png)\n\nTree2\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g3m26as9.png)\n\nTree3\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jp9dy8en.png)\n\nTree4\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/juxhbamn.png)\n\n\u7531\u4e8e\u4e3b\u5e2d\u6811\u7684\u5f62\u5f0f\u6bd4\u8f83\u96be\u753b~~\uff08\u5176\u5b9e\u662f\u6211\u61d2\uff09~~\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7ed9\u51fa\u4e86\n\n\u6211\u4eec\u53d1\u73b0\u7531\u4e8e\u6bcf\u4e2a\u70b9\u5b58\u7684\u4fe1\u606f\u662f\u533a\u95f4\u548c\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u662f\u6ee1\u8db3\u53ef\u52a0\u51cf\u6027\u7684\n\n\u5177\u4f53\u6765\u8bf4\uff1a\n\n\u5bf9\u4e8e\u6837\u4f8b\u4e2d\u7684query\u64cd\u4f5c\uff0c\u8981\u6c42\u67e5\u8be2\u533a\u95f4$[2,4]$\u4e2d\u7684\u7b2c2\u5c0f\u503c\n\n\u6211\u4eec\u5355\u72ec\u628a\u7b2c1\u68f5\u6811\u548c\u7b2c4\u68f5\u6811\u53d6\u51fa\u6765\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/96f2rczw.png)\n\n\u6211\u4eec\u89c2\u5bdf\u5bf9\u5e94\u8282\u70b9\u7684\u7279\u5f81\u3002\u5982\u679c\u628a\u7b2c\u56db\u68f5\u6811\u76841~4\u7684\u8282\u70b9\u7684\u503c\u548c\u7b2c\u4e00\u68f5\u68111~4\u7684\u8282\u70b9\u7684\u503c\u76f8\u51cf\uff0c\u5f97\u5230\u5dee3\uff0c\u53d1\u73b03\u6b63\u597d\u662f\u5728\u64cd\u4f5c2~4\u4e2d\u63d2\u5165\u7684\u8303\u56f4\u57281~4\u4e2d\u7684\u6570\u7684\u4e2a\u6570\n\n\u540c\u6837\u7684\uff0c\u5bf91~2\u8fd9\u4e2a\u8282\u70b9\u505a\u5dee\u5f97\u52301,1\u5c31\u662f\u5728\u64cd\u4f5c2~4\u4e2d\u63d2\u5165\u7684\u8303\u56f4\u57281~2\u4e2d\u7684\u6570\u7684\u4e2a\u6570\n\n\u8fd9\u5c31\u662f\u521a\u624d\u63d0\u5230\u7684\u53ef\u52a0\u51cf\u6027\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u81ea\u7136\u4e5f\u5c31\u51fa\u6765\u4e86\uff1a\u6bcf\u4e00\u6b21\u67e5\u8be2\u64cd\u4f5c$[l,r]$\u5bf9\u7b2c$l-1$\u68f5\u6811\u548c\u7b2c$r$\u68f5\u6811\u505a\u5dee\u3002\u8bb0\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u5dee\u4e3a$\\Delta v$\u3002\u5982\u679c$k<=\\Delta v$\uff0c\u8bf4\u660e\u7b2ck\u5927\u7684\u6570\u5728\u5de6\u8fb9\u533a\u95f4\uff0c\u5c31\u5230\u5de6\u513f\u5b50\u53bb\u5bfb\u627e\uff0c\u5426\u5219\u5c31\u5230\u53f3\u513f\u5b50\u53bb\u5bfb\u627e\uff0c\u76f4\u5230$l =r$\u65f6\u8fd4\u56de\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\n\n```cpp\nint query(int nl, int nr, int l, int r, int k)\n{\n\tif(l == r) return iNum[l];\n\tint x = sT[sT[nr].Ls].Val - sT[sT[nl].Ls].Val;\n\tint mid = l + r >> 1;\n\tif(x >= k) return query(sT[nl].Ls, sT[nr].Ls, l, mid, k);\n\telse return query(sT[nl].Rs, sT[nr].Rs, mid+1 , r, k-x);\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 200005;\nint iNum[N], iNumber[N], iCnt, iCntNum;\nint iRt[N];\nstruct sTree\n{\n\tint Ls,Rs,Val;\n}sT[N*20];\n\nvoid build(int &cnt, int l, int r)\n{\n\tcnt = ++iCnt;\n\tif(l == r) return;\n\tint mid = l + r >> 1;\n\tbuild(sT[cnt].Ls, l, mid);\n\tbuild(sT[cnt].Rs, mid + 1, r); \n}\n\nvoid add(int &cnt, int pre, int l, int r, int pos)\n{\n\tcnt = ++iCnt;\n\tsT[cnt] = sT[pre];\n\tsT[cnt].Val++;\n\tif(l == r) return;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) add(sT[cnt].Ls, sT[pre].Ls, l, mid, pos);\n\telse add(sT[cnt].Rs, sT[cnt].Rs, mid+1, r, pos);\n}\n\nint query(int nl, int nr, int l, int r, int k)\n{\n\tif(l == r) return iNum[l];\n\tint x = sT[sT[nr].Ls].Val - sT[sT[nl].Ls].Val;\n\tint mid = l + r >> 1;\n\tif(x >= k) return query(sT[nl].Ls, sT[nr].Ls, l, mid, k);\n\telse return query(sT[nl].Rs, sT[nr].Rs, mid+1 , r, k-x);\n}\n\nint main()\n{\n\tint n, m;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\", &iNum[i]), iNumber[i] = iNum[i];\n\tsort(iNum + 1, iNum + 1 + n);\n\tiCntNum = unique(iNum + 1, iNum + 1 + n) - iNum - 1;\n\tbuild(iRt[0], 1, iCntNum);\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tint position = lower_bound(iNum + 1, iNum + 1 + iCntNum, iNumber[i]) - iNum;\n\t\tadd(iRt[i], iRt[i-1], 1, iCntNum, position);\n\t}\n\tfor(int i = 1, l, r, k; i <= m; i++)\n\t{\n\t\tscanf(\"%d%d%d\", &l, &r, &k);\n\t\tprintf(\"%d\\n\", query(iRt[l - 1], iRt[r], 1, iCntNum, k));\n\t}\n\treturn 0;\n}\n```\n\n\u4f8b\u98984\uff1a\n\n[\u6d1b\u8c37P3402 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6](<https://www.luogu.org/problem/P3402>)\n\nn\u4e2a\u96c6\u5408 m\u4e2a\u64cd\u4f5c\n\n\u64cd\u4f5c\uff1a\n\n- `1 a b` \u5408\u5e76a,b\u6240\u5728\u96c6\u5408\n- `2 k` \u56de\u5230\u7b2ck\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u72b6\u6001(\u67e5\u8be2\u7b97\u4f5c\u64cd\u4f5c)\n- `3 a b` \u8be2\u95eea,b\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u662f\u5219\u8f93\u51fa1\u5426\u5219\u8f93\u51fa0\n\n\u4e00\u770b\u5230**\u56de\u5230\u7b2ck\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u72b6\u6001**\u5c31\u53ef\u4ee5\u60f3\u5230\u4e3b\u5e2d\u6811\n\n\u5f88\u81ea\u7136\u60f3\u5230\u5bf9\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5efa\u4e00\u68f5\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u5b58\u50a8\u7236\u4eb2\uff0c\u7136\u540e\u5c31\u662f\u88f8\u7684\u5e76\u67e5\u96c6\u4e86\n\n\u7136\u800c\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u66b4\u529b\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\u662f$O(n^2)$\uff0c\u9700\u8981\u4f18\u5316\n\n\u6211\u4eec\u60f3\u5230\u6700\u5e38\u7528\u7684\u8def\u5f84\u538b\u7f29\uff0c\u4f46\u5728\u8fd9\u91cc\u663e\u7136\u662f\u884c\u4e0d\u901a\u7684\uff0c\u56e0\u4e3a\u4e0d\u65ad\u5730\u67e5\u8be2\u4fee\u6539\u4f1a\u5bfc\u81f4\u590d\u6742\u5ea6\u8d85\u51fa\u9650\u5236\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u8981\u9009\u62e9\u6309\u79e9\u5408\u5e76\n\n\u6309\u79e9\u5408\u5e76\u5176\u5b9e\u662f\u4e00\u79cd\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\uff0c\u5c31\u662f\u628a\u542b\u6709\u8f83\u5c11\u8282\u70b9\u7684\u96c6\u5408\u5408\u5e76\u5230\u542b\u6709\u8f83\u591a\u8282\u70b9\u7684\u96c6\u5408\uff0c\u800c\u8fd9\u4e2a\u8282\u70b9\u4e2a\u6570\u7684\u8868\u793a\u5c31\u5728\u4e8e\u6811\u7684\u9ad8\u5ea6\uff0c\u5373\u9ad8\u5ea6\u5c0f\u7684\u6811\u5408\u5e76\u5230\u9ad8\u5ea6\u5927\u7684\u6811\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u9632\u6b62\u6811\u7684\u4f18\u7f8e\u6027\u8d28\u88ab\u7834\u574f\uff0c\u5373\u6811\u9000\u5316\u6210\u94fe\u3002\u5f53\u4e24\u4e2a\u96c6\u5408\u7684\u79e9\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u5c31\u968f\u4fbf\u627e\u4e00\u4e2a\u96c6\u5408\u5408\u5e76\uff0c\u7136\u540e\u79e9\u52a0\u4e00\u3002\u8be6\u60c5\u53ef\u4ee5\u767e\u5ea6\u641c\u7d22\u6309\u79e9\u5408\u5e76\n\n```cpp\nint find(int cnt, int pos)\n{\n\tint f = query(cnt, 1, n, pos);\n\tif(pos == iFa[f]) return f;\n\treturn find(cnt, iFa[f]);\n}\n\nvoid add(int cnt, int l, int r, int pos)//\u66f4\u65b0\u79e9\n{\n\tif(l == r) \n\t{\n\t\tiDeep[cnt]++;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(pos <= mid) add(sT[cnt].Ls, l, mid, pos);\n\telse add(sT[cnt].Rs, mid+1, r, pos);\n}\n```\n\n\n\n\u5c0f\u7ed3\uff1a\n\n1.\u4e3b\u5e2d\u6811\u7684\u7279\u5f81\u5c31\u662f\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u5386\u53f2\u7248\u672c\u8fbe\u5230\u6c42\u89e3\u95ee\u9898\u7684\u76ee\u7684\n\n2.\u4e3b\u5e2d\u6811\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u91cd\u590d\u5229\u7528\uff0c\u8fd9\u4e00\u70b9\u5728\u5f88\u591a\u9898\u76ee\u4e2d\u90fd\u53ef\u4ee5\u89c1\u5230\u3002\u5f53\u4f60\u590d\u6742\u5ea6\u8d85\u6807\u65f6\u4e0d\u59a8\u60f3\u4e00\u60f3\u6709\u6ca1\u6709\u4ec0\u4e48\u4e1c\u897f\u88ab\u91cd\u590d\u7b97\u8fc7\uff0c\u80fd\u4e0d\u80fd\u4f18\u5316\u8fd9\u4e00\u90e8\u5206\u591a\u4f59\u7684\u65f6\u95f4\n\n\u672c\u9898\u89e3\u540c\u6b65\u53d1\u5e03\u4e8e[\u4e2a\u4eba\u535a\u5ba2](https://www.cnblogs.com/lcezych/p/11923001.html)",
        "postTime": 1574584885,
        "uid": 177510,
        "name": "\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "## 0.\u6982\u8ff0\n\n\u7b97\u6cd5\u6a21\u578b\uff1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO((n+m)logn)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO((n+m)logn)\u5176\u4e2d\n\n\u9884\u5904\u7406\uff1aO(nlogn)\n\n\u5355\u6b21\u4fee\u6539\uff1aO(logn)\n\n\u5355\u6b21\u67e5\u8be2\uff1aO(logn)\n\n## 1.\u601d\u60f3\n\n\u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4fdd\u5b58m\u4e2a\u7248\u672c\u7684\u72b6\u6001\uff0c\u5e76\u5b9e\u73b0\u67e5\u627e\u4e0e\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u7b80\u5355\u60f3\u6cd5\uff1a\u771f\u7684\u5f00\u6570\u7ec4\u4fdd\u5b58\u6bcf\u4e2a\u7248\u672c\u3002\u5f53\u7136\u4f1aMLE(\u7a7a\u95f4\u590d\u6742\u5ea6O(n*m))!!!\n\nidea:\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5f53\u524d\u7248\u672c\u4e0e\u5b83\u7684\u524d\u9a71\u7248\u672c\u76f8\u6bd4\uff0c\u53ea\u66f4\u6539\u4e86\u4e00\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5176\u4ed6\u5927\u591a\u6570\u8282\u70b9\u7684\u503c\u6ca1\u6709\u53d8\u5316\u3002\n\n\u80fd\u4e0d\u80fd\u91cd\u590d\u5229\u7528\uff0c\u4ee5\u8fbe\u5230\u8282\u7701\u7a7a\u95f4\u7684\u76ee\u7684\uff1f\n\n\u2014\u2014\u5206\u6cbb\uff1f\u6ca1\u9519\uff0c\u5982\u679c\u53ea\u4fee\u6539\u4e86\u5de6\u534a\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u524d\u9a71\u7248\u672c\u7684\u53f3\u534a\u8fb9\uff0c\u53cd\u4e4b\u540c\u7406\u3002\uff08\u53c2\u89c1\u697c\u4e0b\u67d0\u5927\u4f6c\u7684\u56fe\uff09\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u53ea\u8981\u5f53\u524d\u8282\u70b9\u7684\u5de6\uff08\u53f3\uff09\u513f\u5b50\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u524d\u9a71\u7248\u672c\u7684\u90a3\u4e2a\u8282\u70b9\u3002\n\n\u90a3\u67e5\u627e\u5462\uff1f\u6bcf\u6b21\u4fdd\u5b58\u7248\u672ci\u7684\u6839\u8282\u70b9\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u67e5\u627e\u5c31\u597d\u4e86\u3002\n\n## 2.\u6a21\u578b\n\n### build \u51fd\u6570\uff1a\n\n _int build(int l,int r)_\n \n \u5efa\u7acb\u4ee5\u3010l,r\u3011\u4e3a\u533a\u95f4\u7684\uff08\u521d\u59cb\uff09\u7ebf\u6bb5\u6811\u3002\n\n### update \u51fd\u6570\uff1a\n\n _int update(int pre,int l,int r,int &x,int &c)_\n \n \u5bf9\u7b2c pre \u7248\u672c\u7684\u3010l,r\u3011\u533a\u95f4\u9012\u5f52\u67e5\u627e\u5e76\u4fee\u6539\u7b2c x \u4f4d\u7f6e\u7684\u503c\u4e3a c \u3002\n \n###  query \u51fd\u6570\uff1a\n \n  _void query(int pre,int l,int r,int& x)_\n  \n  \u5bf9\u7b2c pre \u7248\u672c\u7684\u3010l,r\u3011\u533a\u95f4\u9012\u5f52\u67e5\u627e\u7b2c x \u4f4d\u7f6e\u7684\u503c\u3002\n\n## 3.\u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define mid ((l+r)>>1)\nusing namespace std;\nstruct chairman{\n\t//\u53c2\u89c1\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u8981\u5f00\u5927\u6570\u7ec4\n\tint rt[1000001],T[20000001],L[20000001],R[20000001];\n\tint cnt;//\u5c3e\u8282\u70b9\uff0c\u63d2\u5165\u8282\u70b9\u7528\n\tint build(int l,int r){\n\t\tint root=++cnt;\n\t\tif(l==r){\n\t\t\tscanf(\"%d\",&T[root]);return root;\n            //\u5efa\u6811\u4e0e\u8bfb\u5165\u5408\u4e8c\u4e3a\u4e00\n\t\t}\n        //\u9012\u5f52\u5efa\u5b50\u533a\u95f4\n\t\tL[root]=build(l,mid);R[root]=build(mid+1,r);\n\t\treturn root;\n\t}\n\tint update(int pre,int l,int r,int &x,int &c){\n\t\tint root=++cnt;\n\t\tif(l==r){\n\t\t\tT[root]=c;return root;//\u4fee\u6539\n\t\t}\n\t\tL[root]=L[pre];R[root]=R[pre];//\u5148\u628a\u5b50\u8282\u70b9\u6307\u5411\u524d\u9a71\u7ed3\u70b9\u4ee5\u5907\u590d\u7528\n        //\u9012\u5f52\u4fee\u6539\u5b50\u533a\u95f4\n\t\tif(x<=mid)L[root]=update(L[pre],l,mid,x,c);\n\t\telse R[root]=update(R[pre],mid+1,r,x,c);\n\t\treturn root;\n\t}\n\tvoid query(int pre,int l,int r,int& x){\n    \t//\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u67e5\u8be2\n\t\tif(l==r){\n\t\t\tprintf(\"%d\\n\",T[pre]);return;\n\t\t}\n\t\tif(x<=mid)query(L[pre],l,mid,x);\n\t\telse query(R[pre],mid+1,r,x);\n\t}\n}hsf; //\u67d0\u672c\u6821\u5927\u4f6c\u7684\u540d\u5b57\nint main(){\n\thsf.cnt=0;\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\thsf.build(1,n);\n\tint v,cd,x,y;\n\thsf.rt[0]=1;//\u7b2c\u96f6\u7248\u672c\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&v,&cd,&x);\n\t\tif(cd==1){\n\t\t\tscanf(\"%d\",&y);\n\t\t\thsf.rt[i]=hsf.update(hsf.rt[v],1,n,x,y);//\u4fee\u6539\n\t\t}\n\t\tif(cd==2){\n\t\t\thsf.rt[i]=hsf.rt[v];\n\t\t\thsf.query(hsf.rt[v],1,n,x);//\u67e5\u8be2\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n## 4.\u603b\u7ed3\n\n\u53ef\u89c1\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u4ec5\u4fdd\u6301\u4e86\u7ebf\u6bb5\u6811\u826f\u597d\u7684\u4fee\u6539/\u67e5\u8be2\u65b9\u5f0f\uff0c\u4e5f\u5229\u7528\u4e86\u5206\u6cbb\u601d\u60f3\uff0c\u964d\u4f4e\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u63d0\u9ad8\u4e86\u6548\u7387\u3002\n",
        "postTime": 1521821459,
        "uid": 48558,
        "name": "super\u5b66\u6e23",
        "ccfLevel": 4,
        "title": "P3919[\u6a21\u677f]\u53ef\u6301\u4e45\u5316\u6570\u7ec4 \u9898\u89e3"
    },
    {
        "content": "\u542c\u8bf4stl\u62d3\u5c55\u7684rope\u8fc7\u4e0d\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u624b\u64b8\u4e00\u4e2a\u5427\uff08\u7b11\n\n\uff08\u8fd9\u4e2arope\u662f\u6ca1\u6709\u518d\u5e73\u8861\u529f\u80fd\u7684\u7248\u672c\uff0c\u4e0d\u8fc7\u4e5f\u80fd\u8fc7\n\n\u6211\u4eec\u5148\u770b\u770b\u57fa\u672crope\u7684\u8282\u70b9\u7ed3\u6784\n```cpp\ntemplate<typename T> class RopeNode\n{\n    friend class Rope<T>;\nprivate:\n    RopeNode<T>() = default;\n    RopeNode<T>(T t);\n    RopeNode<T>(vector<T> & s);\n    int Height = 0;//\u7528\u4e8e\u5e73\u8861\u64cd\u4f5c\n                   //\u4e0d\u8fc7\u57fa\u4e8e\u672c\u9898\u5b9e\u8df5\uff0c\u4e0d\u5e73\u8861\u4e5f\u662f\u53ef\u4ee5\u7684\n                   //\u6240\u4ee5\u4e0b\u9762\u4e0d\u4f1a\u5305\u542b\u518d\u5e73\u8861\u64cd\u4f5c\n    int Size = 0;\n    int Begin = 0;//\u7ef4\u62a4\u7684\u4e32\u5728Data\u4e2d\u7684\u5f00\u59cb\u4e0b\u6807\n                  //\u53ea\u5728\u53f6\u5b50\u8282\u70b9\u4e2d\u53ef\u80fd\u4e0d\u4e3a0\n    RopeNode<T>* Lson = nullptr;\n    RopeNode<T>* Rson = nullptr;\n    vector<T>* Data = nullptr;//\u53ea\u5728\u53f6\u5b50\u8282\u70b9\u4e0d\u4e3a\u7a7a\u6307\u9488\n};\n```\n\n\u53ef\u4ee5\u770b\u51farope\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e32\u7684\u5927\u5c0f\u4ee5\u53ca\u8282\u70b9\u9ad8\u5ea6\u3002\n\n\u6211\u4eec\u518d\u6765\u770b\u770brope\u6240\u652f\u6301\u7684\u57fa\u672c\u64cd\u4f5c\n\n1\uff0cConnect \u8fd4\u56de\u5c06\u4e24\u4e2arope\u8fde\u63a5\u540e\u7684\u7ed3\u679c\uff0c\u4e0d\u6539\u53d8\u539f\u6765\u7684\u4e24\u4e2a\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u8fd9\u4e2a\u64cd\u4f5c\u82b1\u8d39\u5e38\u6570\u65f6\u95f4\uff0c\u63a5\u4e0b\u6765\u770b\u4ee3\u7801\u3002\n```cpp\ntemplate<typename T>\nRopeNode<T> * Rope<T>::Connect(RopeNode<T> * Left, RopeNode<T> * Right)\n{\n    if (Left == nullptr) return Right;\n    if (Right == nullptr) return Left;\n    if (GetHeight(Left->Lson) > GetHeight(Left->Rson) && GetHeight(Left->Lson) > GetHeight(Right))\n    {\n        return UncheckConnect(Left->Lson, UncheckConnect(Left->Rson, Right));\n    }\n    if (GetHeight(Right->Rson) > GetHeight(Right->Lson) && GetHeight(Right->Rson) > GetHeight(Left))\n    {\n        return UncheckConnect(UncheckConnect(Left, Right->Lson), Right->Rson);\n    }\n    //\u4e0a\u8ff0\u4e24\u4e2aif\u662f\u68c0\u67e5\u662f\u5426\u80fd\u5c06\u5176\u4e2d\u4e00\u4e2a\u4e32\u653e\u5230\u53e6\u4e00\u4e2a\u4e32\u7684\u5b50\u6811\u4e2d\uff0c\u5e76\u4e0d\u589e\u52a0\u6811\u7684\u9ad8\u5ea6\n    return UncheckConnect(Left, Right);\n}\n\n```\n```cpp\ntemplate<typename T>\nRopeNode<T> * Rope<T>::UncheckConnect(RopeNode<T> * Left, RopeNode<T> * Right)\n{\n    RopeNode<T>* ConnectNode = new RopeNode<T>();\n    ConnectNode->Lson = Left;\n    ConnectNode->Rson = Right;\n    ConnectNode->Height = max(GetHeight(Left), GetHeight(Right)) + 1;//\u9ad8\u5ea6\u4fe1\u606f\u53ef\u4ee5\u4e0d\u7ef4\u62a4\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u8bf4\u660e\u8fd9\u73a9\u610f\u662f\u53ef\u4ee5\u8fdb\u884c\u5e73\u8861\u7684\uff0c\u6211\u5c31\u6682\u4e14\u4fdd\u7559\u8fd9\u90e8\u5206\u4e86\n    ConnectNode->Size = GetSize(Left) + GetSize(Right);\n    MemoryPool.push_back(ConnectNode);\n    return ConnectNode;\n}\n```\n\n2 Substring \u8fd4\u56de\u4e00\u4e2a\u5b50\u4e32\uff0c\u4e0d\u6539\u53d8\u539f\u6765\u7684\u4e32\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c06\u82b1\u8d39O\uff08height\uff09\u7684\u65f6\u95f4\uff0c\u770b\u4ee3\u7801\u3002\n```cpp\ntemplate<typename T>\nRopeNode<T> * Rope<T>::Substring(RopeNode<T> * R, int Start, int Len)\n{\n    if (R == nullptr) return R;\n    if (Start <= 0 && Len >= GetSize(R)) return R;\n    if (R->Data != nullptr)\n    {\n        RopeNode<T>* SubNode = new RopeNode<T>(*R);\n        SubNode->Begin = R->Begin + (Start > 0 ? Start : 0);\n        SubNode->Size = min(R->Size, Len);\n        return SubNode;\n    }\n    RopeNode<T>* Left, *Right;\n    if (Start + Len <= GetSize(R->Lson))return Substring(R->Lson, Start, Len);\n    if (Start >= GetSize(R->Lson)) return Substring(R->Rson, Start - GetSize(R->Lson), Len);\n    Left = Substring(R->Lson, Start, GetSize(R->Lson) - Start);\n    Right = Substring(R->Rson, 0, Len - (GetSize(R->Lson) - Start));\n    return Connect(Left, Right);\n}\n```\n\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u5f88\u5bb9\u6613\u770b\u61c2\u4e86\uff0c\u4e0d\u591a\u52a0\u8bf4\u660e\u3002\n\n\u6709\u4e86\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u6211\u4eec\u9700\u8981\u7684Change\u548cFetch\u64cd\u4f5c\u4e86\n\nChange\u64cd\u4f5c\n```cpp\ntemplate<typename T>\nRopeNode<T>* Rope<T>::Change(RopeNode<T>* R, int Index, T t)\n{\n    if (Index < 0 || Index >= GetSize(R)) return R;\n    RopeNode<T>* Left = nullptr, *Right = nullptr;\n    if (Index > 0) Left = Substring(R, 0, Index);\n    if (Index < GetSize(R) - 1) Right = Substring(R, Index + 1, GetSize(R) - Index - 1);\n    RopeNode<T>* MidRope = new RopeNode<T>(t);\n    MemoryPool.push_back(MidRope);\n    return Connect(Left, Connect(MidRope, Right));\n}\n```\nFetch\u64cd\u4f5c\n\n```cpp\ntemplate<typename T>\nT Rope<T>::Fetch(RopeNode<T> * R, int Index)\n{\n    if (R->Data != nullptr) return (*(R->Data))[R->Begin + Index];\n    if (Index >= GetSize(R->Lson))\n    {\n        return Fetch(R->Rson, Index - GetSize(R->Lson));\n    }\n    else return Fetch(R->Lson, Index);\n}\n```\n\n\u53ef\u4ee5\u770b\u51farope\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u6539\u53d8\u539f\u672c\u7684\u4e32\uff0c\u8fd9\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u67e5\u8be2\u5bf9\u5e94\u7248\u672c\u5219\u548c\u5176\u4ed6\u505a\u6cd5\u4e00\u6837\uff0c\u4fdd\u5b58\u5bf9\u5e94\u7248\u672c\u7684\u6839\u5373\u53ef\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574AC\u4ee3\u7801\n\n```cpp\n#define _CRT_SECURE_NO_WARNINGS\n#pragma once\n#include<vector>\n#include<algorithm>\n#include<stdio.h>\nusing std::vector;\ntemplate<typename T> class Rope;\ntemplate<typename T> class RopeNode\n{\n    friend class Rope<T>;\nprivate:\n    RopeNode<T>() = default;\n    RopeNode<T>(T t);\n    RopeNode<T>(vector<T> & s);\n    int Height = 0;\n    int Size = 0;\n    int Begin = 0;\n    RopeNode<T>* Lson = nullptr;\n    RopeNode<T>* Rson = nullptr;\n    vector<T>* Data = nullptr;\n};\ntemplate<typename T> class Rope\n{\npublic:\n    void MakeEmpty();\n    RopeNode<T>* Init(vector<T>& v);\n    T Fetch(RopeNode<T>* R, int Index);\n    RopeNode<T>* Change(RopeNode<T>* R, int Index, T t);\n    inline int GetHeight(RopeNode<T>* R);\n    inline int GetSize(RopeNode<T>*R);\n    RopeNode<T>* Connect(RopeNode<T>* Left, RopeNode<T>* Right);\n    RopeNode<T>* UncheckConnect(RopeNode<T>* Left, RopeNode<T>* Right);\n    RopeNode<T>* Substring(RopeNode<T>* R, int Start, int Len);\n    vector<RopeNode<T>*>  MemoryPool;\n};\n\n#define max(x,y) (x)>(y)?(x):(y)\n#define min(x,y) (x)<(y)?(x):(y)\ntemplate<typename T>\nRopeNode<T>::RopeNode(T t)\n    :Size(1)\n{\n    Data = new vector<T>{ t };\n}\ntemplate<typename T>\nRopeNode<T>::RopeNode(vector<T> & s)\n    :Size(s.size())\n{\n    Data = new vector<T>(s);\n}\ntemplate<typename T>\nvoid Rope<T>::MakeEmpty()\n{\n    for (auto i : MemoryPool)\n    {\n        if (i != nullptr) delete i->Data;\n        delete i;\n    }\n    MemoryPool.clear();\n}\n\ntemplate<typename T>\nRopeNode<T>* Rope<T>::Init(vector<T>& v)\n{\n    MakeEmpty();\n    RopeNode<T>* R = new RopeNode<T>(v);\n    MemoryPool.push_back(R);\n    return R;\n}\n\ntemplate<typename T>\ninline int Rope<T>::GetHeight(RopeNode<T> * R)\n{\n    return R ? R->Height : -1;\n}\n\ntemplate<typename T>\ninline int Rope<T>::GetSize(RopeNode<T> * R)\n{\n    return R ? R->Size : 0;\n}\n\ntemplate<typename T>\nRopeNode<T> * Rope<T>::Connect(RopeNode<T> * Left, RopeNode<T> * Right)\n{\n    if (Left == nullptr) return Right;\n    if (Right == nullptr) return Left;\n    if (GetHeight(Left->Lson) > GetHeight(Left->Rson) && GetHeight(Left->Lson) > GetHeight(Right))\n    {\n        return UncheckConnect(Left->Lson, UncheckConnect(Left->Rson, Right));\n    }\n    if (GetHeight(Right->Rson) > GetHeight(Right->Lson) && GetHeight(Right->Rson) > GetHeight(Left))\n    {\n        return UncheckConnect(UncheckConnect(Left, Right->Lson), Right->Rson);\n    }\n    return UncheckConnect(Left, Right);\n}\n\ntemplate<typename T>\nT Rope<T>::Fetch(RopeNode<T> * R, int Index)\n{\n    if (R->Data != nullptr) return (*(R->Data))[R->Begin + Index];\n    if (Index >= GetSize(R->Lson))\n    {\n        return Fetch(R->Rson, Index - GetSize(R->Lson));\n    }\n    else return Fetch(R->Lson, Index);\n}\n\ntemplate<typename T>\nRopeNode<T>* Rope<T>::Change(RopeNode<T>* R, int Index, T t)\n{\n    if (Index < 0 || Index >= GetSize(R)) return R;\n    RopeNode<T>* Left = nullptr, *Right = nullptr;\n    if (Index > 0) Left = Substring(R, 0, Index);\n    if (Index < GetSize(R) - 1) Right = Substring(R, Index + 1, GetSize(R) - Index - 1);\n    RopeNode<T>* MidRope = new RopeNode<T>(t);\n    MemoryPool.push_back(MidRope);\n    return Connect(Left, Connect(MidRope, Right));\n}\n\ntemplate<typename T>\nRopeNode<T> * Rope<T>::UncheckConnect(RopeNode<T> * Left, RopeNode<T> * Right)\n{\n    RopeNode<T>* ConnectNode = new RopeNode<T>();\n    ConnectNode->Lson = Left;\n    ConnectNode->Rson = Right;\n    ConnectNode->Height = max(GetHeight(Left), GetHeight(Right)) + 1;\n    ConnectNode->Size = GetSize(Left) + GetSize(Right);\n    MemoryPool.push_back(ConnectNode);\n    return ConnectNode;\n}\n\ntemplate<typename T>\nRopeNode<T> * Rope<T>::Substring(RopeNode<T> * R, int Start, int Len)\n{\n    if (R == nullptr) return R;\n    if (Start <= 0 && Len >= GetSize(R)) return R;\n    if (R->Data != nullptr)\n    {\n        RopeNode<T>* SubNode = new RopeNode<T>(*R);\n        SubNode->Begin = R->Begin + (Start > 0 ? Start : 0);\n        SubNode->Size = min(R->Size, Len);\n        return SubNode;\n    }\n    RopeNode<T>* Left, *Right;\n    if (Start + Len <= GetSize(R->Lson))return Substring(R->Lson, Start, Len);\n    if (Start >= GetSize(R->Lson)) return Substring(R->Rson, Start - GetSize(R->Lson), Len);\n    Left = Substring(R->Lson, Start, GetSize(R->Lson) - Start);\n    Right = Substring(R->Rson, 0, Len - (GetSize(R->Lson) - Start));\n    return Connect(Left, Right);\n}\nRope<int> Array;\nvector<RopeNode<int>*> Root;\nint main(void)\n{\n    int n, m, i;\n    vector<int> init;\n    scanf(\"%d %d\", &n, &m);\n    for (i = 0; i < n; ++i)\n    {\n        int t;\n        scanf(\"%d\", &t);\n        init.push_back(t);\n    }\n    Root.push_back(Array.Init(init));\n    for (i = 0; i < m; ++i)\n    {\n        int ver, opt, loc, val;\n        scanf(\"%d %d %d\", &ver, &opt, &loc);\n        if (opt == 2)\n        {\n            printf(\"%d\\n\", Array.Fetch(Root[ver], loc-1));\n            Root.push_back(Root[ver]);\n        }\n        else\n        {\n            scanf(\"%d\", &val);\n            Root.push_back(Array.Change(Root[ver], loc-1, val));\n        }\n\n    }\n    Array.MakeEmpty();\n}\n```\n\n\n",
        "postTime": 1572244288,
        "uid": 189711,
        "name": "pigeonN",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u7684\u6570\u7ec4\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u2014\u2014\u4e3b\u5e2d\u6811\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u53ef\u4ee5\u5de6\u8f6c\u6a21\u677f\u3002\n\n\u4e3b\u5e2d\u6811\u5bf9\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u5efa\u6811\u3002\u6211\u4eec\u90fd\u77e5\u9053\u5176\u4e2d$root$\u6570\u7ec4\u8868\u793a\u524d\u7f00$1..i$\u4e3b\u5e2d\u6811\u7684\u6839\u3002\n\u90a3\u6211\u4eec\u73b0\u5728\u6362\u4e00\u79cd\u65b9\u5f0f\u5efa\u6811\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5e26\u6765\u7684\u7248\u672c\u5efa\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6570\u7ec4\u7684\u6743\u503c\u3002\n\n\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u770b\u56fe(\u6211\u4eec\u8bbe\u8fd9\u4e2a\u6570\u7ec4\u4e3aa={1,2,3,4})\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/29608.png)\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u68f5\u7ebf\u6bb5\u6811\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u5c31\u662f\u5b83\u6240\u5bf9\u5e94\u6570\u7ec4\u5185\u6570\u7684\u6743\u503c\uff0c\u8fd9\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u662f\u7c7b\u4f3c\u7684\u3002\n\n### \u4f46\u662f\u6211\u4eec\u4ee4\u975e\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u4e3a\u7a7a\u3002\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u4e8c\u5206\u67e5\u627e\u800c\u8bbe\u7f6e\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5728\u67e5\u8be2\u6570\u7ec4\u5185\u6570\u7684\u503c\u65f6\uff0c\u76f4\u63a5\u5355\u70b9\u8be2\u95ee\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(logN)$\n\n```\nint query(int rt,int l,int r,int kkk){\n    if (l==r) return tree[rt].sum;\n    int mid=(l+r)>>1;\n    if (kkk<=mid) return query(tree[rt].l,l,mid,kkk);\n    else return query(tree[rt].r,mid+1,r,kkk);\n}\n\u4e3b\u7a0b\u5e8f\u5185\uff1a\nquery(\u6811\u6839,1,n,\u8bbf\u95ee\u6570\u7ec4\u7684\u4e0b\u6807);\n\n```\n\u6211\u4eec\u4ee4\u521d\u59cb\u72b6\u6001\u4e3a\u7b2c$0$\u4e2a\u72b6\u6001\uff0c\u8fd9\u4e2a\u6811\u6839\u5373\u4e3a$root[0]$\u3002\n\u5982\u679c\u6211\u4eec\u628a$a[4]$\u6539\u4e3a$5$\u5462\uff1f\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u6839$root[1]$\n\n\u548c\u4e3b\u5e2d\u6811\u4e00\u6837\uff0c\u6570\u7ec4$a[1]$\u3001$a[2]$\u6ca1\u6709\u53d8\u5316\uff0c\u76f4\u63a5\u8fde\u63a5\uff0c\u548c\u4e3b\u5e2d\u6811\u4e00\u6837\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/29609.png)\n\n\u521b\u9020\u53f3\u8282\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/29610.png)\n\n\u7136\u540e$a[3]$\u4e5f\u6ca1\u6709\u53d8\u5316\uff0c\u8fde\u63a5\n\n![](https://cdn.luogu.com.cn/upload/pic/29611.png)\n\n\u968f\u540e\uff0c\u521b\u9020\u65b0\u7684\u53f6\u5b50\u8282\u70b9($a[4]=5$)\n\n\u4ee3\u7801\u548c\u4e3b\u5e2d\u6811\u795e\u4f3c\u3002\n```\nvoid build(int &rt,int l,int r){\n    rt=++cnt;\n    if(l==r){tree[rt].sum=a[l];return;}\n    int mid=(l+r)>>1;\n    build(tree[rt].l,l,mid);build(tree[rt].r,mid+1,r);\n}//\u521d\u59cb\u5efa\u8bbe\nvoid update(int num,int &rt,int l,int r){\n    tree[++cnt]=tree[rt]; rt=cnt; \n    int mid=(l+r)/2;\n    if (l==r){tree[rt].sum=aaaa; return;}\n    if (num<=mid) update(num,tree[rt].l,l,mid);\n    else update(num,tree[rt].r,mid+1,r);\n}//\u66f4\u65b0\n```\n\u65f6\u95f4\u590d\u6742\u5ea6$O(logN)$\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6b21\u4fee\u6539\u6211\u4eec\u521b\u9020\u4e86\u4e00\u4e2a\u65b0\u6811\u6839($root[1]$),\u8fd9\u6070\u597d\u8868\u793a\u4e86\u7b2c\u4e00\u6b21\u4fee\u6539\u540e\u7684\u72b6\u6001\u3002\n\n\u8fd9\u4e48\u4e00\u6765\uff0c\u56de\u5230\u67d0\u4e00\u4e2a\u72b6\u6001\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u82e5\u8981\u8bbf\u95ee\u67d0\u4e00\u4e2a\u72b6\u6001i\uff0c\u8bbf\u95ee\u6216\u66f4\u65b0\u65f6\u76f4\u63a5\u4f7f\u7528$root[i]$\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\n#define res register int \n#define ll long long\n#define jsz inline\nusing namespace std;\nint cnt,n,a[1000660],m,root[1000660],aaaa;\njsz int read(){\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){\n        if (ch=='-')f=-1;\n        ch=getchar();\n    }\n    while (isdigit(ch)){\n        x=x*10+ch-48;\n        ch=getchar();\n    }\n    return x*f;\n}\nstruct ZXT{\n    int l,r,sum;\n}tree[20006660];\njsz void build(int &rt,int l,int r){\n    rt=++cnt;\n    if(l==r){tree[rt].sum=a[l];return;}\n    int mid=(l+r)>>1;\n    build(tree[rt].l,l,mid);build(tree[rt].r,mid+1,r);\n}\njsz void update(int num,int &rt,int l,int r){\n    tree[++cnt]=tree[rt]; rt=cnt; \n    int mid=(l+r)/2;\n    if (l==r){tree[rt].sum=aaaa; return;}\n    if (num<=mid) update(num,tree[rt].l,l,mid);\n    else update(num,tree[rt].r,mid+1,r);\n}\njsz int query(int rt,int l,int r,int kkk){\n    if (l==r) return tree[rt].sum;\n    int mid=(l+r)>>1;\n    if (kkk<=mid) return query(tree[rt].l,l,mid,kkk);\n    else return query(tree[rt].r,mid+1,r,kkk);\n}\nint main(){\n    n=read();m=read();\n    for (res i=1;i<=n;i++) a[i]=read();\n    build(root[0],1,n);\n    for (res i=1;i<=m;i++){\n        int xxxx=read();int yyyy=read();\n        if (yyyy==1){\n            int zzzz=read();aaaa=read();\n            root[i]=root[xxxx];\n            update(zzzz,root[i],1,n);\n        }else{\n            int zzzz=read();\n            printf(\"%d\\n\",query(root[xxxx],1,n,zzzz));\n            root[i]=root[xxxx];\n        }\n    }\n}\n```",
        "postTime": 1534732431,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "## \u6307\u9488\u9898\u89e3\u6765\u4e00\u53d1\uff01\uff01\uff01\n\u6307\u9488\u9898\u89e3\u5be5\u5be5\u65e0\u51e0\uff0c\u8868\u793a\u4e0d\u670d\uff01\uff01\uff01\n\n\u6211\u4eec\u5c31\u6839\u636e\u9898\u610f\u53ef\u6301\u4e45\u5316\u5c31\u884c\u4e86\uff01\uff01\uff01\n\n\u4e4b\u524d\u8fd9\u91cc\u6211\u72af\u4e86\u4e00\u4e2a\u81f4\u547d\u9519\u8bef\uff0c\u5982\u4e0b\uff1a\n```cpp\nvoid insert(node *&p,node *A,int x,int val)\n{\n\tp = new (tail ++)node(); p = A;\n\tif(p -> l == p -> r) return (void)(p -> val = val);\n\tif(x <= mid) insert(p -> ls,A -> ls,x,val);\n\telse insert(p -> rs,A -> rs,x,val);\n}\n```\n\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u628aA\u8d4b\u7ed9p\uff0c\u56e0\u4e3a\u6211\u4eec\u7684p\u5e26\u7740\u53d6\u5730\u5740\u7b26\uff0c\u4fee\u6539p\u65f6\u4e5f\u4f1a\u628aA\u4fee\u6539\u4e86\uff1b\n\n\u4fee\u6539\u540e\u5982\u4e0b\uff1a\n```cpp\nvoid insert(node *&p,node *A,int x,int val)\n{\n\tp = new (tail ++)node(A -> l,A -> r); p -> ls = A -> ls;p -> rs = A -> rs;p -> val = A -> val;\n\tif(p -> l == p -> r) return (void)(p -> val = val);\n\tif(x <= mid) insert(p -> ls,A -> ls,x,val);\n\telse insert(p -> rs,A -> rs,x,val);\n}\n```\n\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\n```cpp\nvoid insert(node *&p,node *A,int x,int val)\n{\n\tp = new (tail ++)node(); *p = *A;\n\tif(p -> l == p -> r) return (void)(p -> val = val);\n\tif(x <= mid) insert(p -> ls,A -> ls,x,val);\n\telse insert(p -> rs,A -> rs,x,val);\n}\n```\n\u8fd9\u6837\u6bd4\u8f83\u7b80\u6d01\u3002\n\n\u5168\u90e8\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int N = 1000010;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , a[N];\nstruct Segment_tree\n{\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , val;\n\t\tnode (int l = 0,int r = 0) : l(l) , r(r) {val = 0;ls = rs = NULL;}\n\t}*root[N << 1] , pool[N * 13] , *tail;\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new (tail ++)node(l,r);\n\t\tif(l == r) return (void)(p -> val = a[l]);\n\t\tbuild(p -> ls,l,mid);\n\t\tbuild(p -> rs,mid+1,r);\n\t}\n\tvoid insert(node *&p,node *A,int x,int val)\n\t{\n\t\tp = new (tail ++)node(); *p = *A;\n\t\tif(p -> l == p -> r) return (void)(p -> val = val);\n\t\tif(x <= mid) insert(p -> ls,A -> ls,x,val);\n\t\telse insert(p -> rs,A -> rs,x,val);\n\t}\n\tint query(node *p,int x)\n\t{\n\t\tif(p -> l == p -> r) return p -> val;\n\t\tif(x <= mid) return query(p -> ls,x);\n\t\treturn query(p -> rs,x);\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1;i <= n;i ++)\ta[i] = read();\n\t\tbuild(root[0],1,n);\n\t\tfor(int i = 1 , v , opt , loc , val;i <= m;i ++)\n\t\t{\n\t\t\tv = read(); opt = read(); loc = read();\n\t\t\tif(opt & 1)\tval = read() , insert(root[i],root[v],loc,val);\n\t\t\telse printf(\"%d\\n\",query(root[v],loc)) , root[i] = root[v];\n\t\t}\n\t}\n\tSegment_tree() {tail = pool;}\n}CF;\nint main()\n{\t\n\tCF.LOL();\n\treturn 0;\n}\n```\n",
        "postTime": 1568624512,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u773c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811...\u561b\uff0c\u90a3\u5c31\u5199\u5427\n\n\u6570\u7ec4\u5f00\u592a\u5927\u4ea4\u4e0a\u53bb\u56de\u5168RE...\u957f\u89c1\u8bc6\n\n```cpp\n#include<bits/stdc++.h>\n#define debug(x) cout<<#x<<\"=\"<<x<<endl\nusing namespace std;\nconst int maxn = 1000009;\n\nint rt[maxn],a[maxn];\nstruct sg_tree{int val,lson,rson;}node[maxn*20];\nint n,m,tot;\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n\nvoid build(int &now,int l,int r)\n{\n    now=++tot;\n    if(l==r){node[now].val=a[l];return ;}\n    int mid=(l+r)>>1;\n    build(node[now].lson,l,mid);\n    build(node[now].rson,mid+1,r);\n}\nvoid insert(int &now,int last,int l,int r,int pos,int val)\n{\n    now=++tot;node[now]=node[last];\n    if(l==r){node[now].val=val;return ;}\n    int mid=(l+r)>>1;\n    if(pos<=mid) insert(node[now].lson,node[last].lson,l,mid,pos,val);\n    else insert(node[now].rson,node[last].rson,mid+1,r,pos,val);\n}\nint query(int now,int l,int r,int pos)\n{\n    if(l==r) return node[now].val;\n    int mid=(l+r)>>1;\n    if(pos<=mid) return query(node[now].lson,l,mid,pos);\n    else return query(node[now].rson,mid+1,r,pos);\n}\n\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++) a[i]=read();\n    build(rt[0],1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int ver=read(),opt=read(),pos=read();\n        if(opt==1) insert(rt[i],rt[ver],1,n,pos,read());\n        else printf(\"%d\\n\",query(rt[ver],1,n,pos)),rt[i]=rt[ver];\n    }\n    return 0;\n}\n```cpp\n\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662fO((n+q)logn)\u7ea7\u7684\n\n\u4f46\u662f\u4e0d\u5f3a\u5236\u5728\u7ebf\u7684\u53ef\u6301\u4e45\u5316\u90fd\u662f\u800d\u6d41\u6c13\uff0c\u6211\u4eec\u8003\u8651\u79bb\u7ebf\n\n\u53d1\u73b0\u6bcf\u4e2a\u7248\u672c\u90fd\u6709\u552f\u4e00\u4e00\u4e2a\u524d\u9a71\uff0c\u4e00\u5b9a\u7ec4\u6210\u4e00\u68f5\u6811\u7ed3\u6784\n\n\u5bf9\u8fd9\u68f5\u6811dfs\uff0c\u6bcf\u5230\u4e00\u4e2a\u70b9\u5982\u679c\u662f\u4fee\u6539\u5c31\u76f4\u63a5\u4fee\u6539\uff0c\u8be2\u95ee\u5c31\u76f4\u63a5\u5f97\u5230\u7b54\u6848\n\n\u79bb\u5f00\u4e00\u4e2a\u70b9\u65f6\u5982\u679c\u662f\u4fee\u6539\u5c31\u6539\u56de\u53bb\n\n\u603b\u590d\u6742\u5ea6O(n)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000009;\n\nint first[maxn];\nstruct edg{int next,to;}e[maxn];\nstruct node{int ver,opt,pos,val;}q[maxn];\nint n,m,e_sum;\nint a[maxn],ans[maxn];\nbool uuz[maxn];\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid add_edg(int x,int y)\n{\n    e_sum++;\n    e[e_sum].next=first[x];\n    first[x]=e_sum;\n    e[e_sum].to=y;\n}\n\nvoid dfs(int x)\n{\n    int last;\n    if(q[x].opt==1) last=a[q[x].pos],a[q[x].pos]=q[x].val;\n    else ans[x]=a[q[x].pos];\n    for(int i=first[x];i;i=e[i].next)\n    {\n        int w=e[i].to;\n        dfs(w);\n    }\n    if(q[x].opt==1) a[q[x].pos]=last;\n}\n\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++) a[i]=read();\n    for(int i=1;i<=m;i++)\n    {\n        q[i].ver=read();q[i].opt=read();q[i].pos=read();\n        if(q[i].opt==1) q[i].val=read();else uuz[i]=1;\n        add_edg(q[i].ver,i);\n    }\n    dfs(0);\n    for(int i=1;i<=m;i++) if(uuz[i]) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```cpp",
        "postTime": 1502982540,
        "uid": 10073,
        "name": "\u6211\u53eb\u5c0f\u660e0_0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\u6765\u5b9e\u73b0\uff0c\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u5355\u70b9\u67e5\u8be2\u6bcf\u4e2a\u7248\u672c\u3002\n\n\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u4e5f\u5f88\u7b80\u5355\uff1a\u591a\u4e2a\u6839\uff0c\u7b2c$ i $\u4e2a\u6839\u7684\u7b2c$ i $\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u3002\u800c\u52a0\u5165\u6bcf\u6b21\u65b0\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0d\u4ec5\u4f1aTLE\u8fd8\u4f1aRE\uff0c\u6240\u4ee5\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u5c31\u662f\uff1a\u6bcf\u6b21\u53ea\u4fee\u6539\u66f4\u65b0\u7684\u8282\u70b9\u3002\n\n\u5176\u4ed6\u8282\u70b9\u7684\u8bdd\uff0c\u4f60\u5728\u90a3\u4e2a\u7248\u672c\u67e5\u8be2\u5c31\u7528\u90a3\u4e2a\u7248\u672c\u7684\u8282\u70b9\u3002\u5c31\u50cf\u4e24\u4e2a\u4eba\u7761\u4e00\u5f20\u5e8a\uff0c\u7528\u4e00\u5e8a\u88ab\u5b50\u4e00\u6837\u3002\n\n\u4e0d\u8fc7\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u53ea\u9700\u8981\u67e5\u8be2\u53f6\u5b50\u8282\u70b9\u7684\u503c\uff0c\u5c31\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u6709\u6743\u503c\uff0c\u5176\u4ed6\u90fd\u662f0\uff08\u4e0d\u7136\u88ab\u5361\u5e38\u6570\u662f\u4e00\u4ef6\u5f88\u9999\u7684\u4e8b\u60c5\uff09\u3002\u53ef\u662f\u6bcf\u6b21\u65b0\u5efa\u70b9\u7528\u7ebf\u6bb5\u6811\u4e8c\u53c9\u6811\u7684\u601d\u60f3\u5f88\u53ef\u80fd\u4f1aMLE\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e09\u4e2a\u4fe1\u606f\uff1a\n\n\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff0c\u4ee5\u53ca\u6743\u503c\u3002\n\n\u90a3\u4e48\u4ee3\u7801\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n# \u5efa\u6811\n\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u5c31\u662f\u65b0\u589e\u7684\u8282\u70b9\uff0c\u4e0a\u4ee3\u7801\uff1a\n```cpp\nvoid build(int&a,int L,int R)\n{\n\ta=++cnt;\n\tif(L==R)return(void)(val[a]=p[L]);\n\tint mid=L+R>>1;\n\tbuild(chi[a][0],L,mid);build(chi[a][1],mid+1,R);\n}\n```\n$ a $\u5f53\u7136\u5c31\u662f\u8be5\u8282\u70b9\u5566\uff0c\u6700\u5f00\u59cb\u7684$ a $\u5f53\u7136\u5c31\u662f\u7b2c0\u4e2a\u7248\u672c\u7684\u6839\uff0c\u4e5f\u5c31\u662froot[0]\u5566\n# \u4fee\u6539\n\u7528\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u4fee\u6539\uff0c\u4ee3\u7801\uff1a\n```cpp\nvoid Add(int&a,int pre,int L,int R,int x,int v)\n{\n\ta=++cnt;\n\tchi[a][0]=chi[pre][0];chi[a][1]=chi[pre][1];val[a]=val[pre];\n\tif(L==R)return(void)(val[a]=v);\n\tint mid=L+R>>1;\n\tif(x<=mid)Add(chi[a][0],chi[pre][0],L,mid,x,v);\n\telse Add(chi[a][1],chi[pre][1],mid+1,R,x,v);\n}\n```\n\u5176\u4e2d$ pre $\u5c31\u662f\u5728\u54ea\u4e2a\u7248\u672c\u4fee\u6539\uff0c\u90a3\u4e2a\u7248\u672c\u7684\u8282\u70b9\u5566~\uff0c$ a $\u548c\u4e0a\u9762\u7684\u5b9a\u4e49\u4e00\u6837\uff0c$ L $\u548c$ R $\u5c31\u662f\u533a\u95f4\uff0c$ x $\u662f\u8981\u4fee\u6539\u7684\u4e0b\u6807\uff0c$ v $\u662f\u8981\u4fee\u6539\u7684\u6743\u503c\uff0c\u6240\u4ee5\uff1a\n```cpp\nif(L==R)return(void)(val[a]=v);\n```\n# \u67e5\u8be2\n\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\uff0c\u4ee3\u7801\u5c31\u4e0d\u7ed9\u4e86\u3002\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5047\u5982\u4e00\u4e2a\u7248\u672c\u7684\u8be2\u95ee\u7684\u8bdd\uff0c\u522b\u5fd8\u4e86\uff1a\n```cpp\nAsk(root[i]=root[pre],1,n,x))\n```\n\u5c31\u662f\u8981\u66f4\u65b0\u6839\u8282\u70b9\uff0c\u5426\u5219\u6765\u67e5\u8be2\u8fd9\u4e2a\u7248\u672c\uff08\u590d\u5236\u7684$ pre $\u7248\u672c\uff09\u5c31\u4f1a\u8fd4\u56de0",
        "postTime": 1588337163,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6a21\u677f P3919\u9898\u89e3"
    },
    {
        "content": " _**\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811**_ \n\n\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6216\u8005\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u5b9e\u73b0\uff0c\u5728\u672c\u7bc7\u9898\u89e3\u4e2d\uff0c~~\u56e0\u4e3a\u672c\u849f\u84bb\u53ea\u4f1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c~~ \u6211\u4eec\u5148\u6765\u7814\u7a76\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b9e\u73b0\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u3002\n\n>\u5f15\u5165\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e00\u9898\u7684\u7b2c\u4e00\u60f3\u6cd5\u662f\u5bf9\u6bcf\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u65b0\u5efa\u4e00\u4e2a\u6570\u7ec4~~\u522b\u6ce8\u610f\u9898\u76ee\u6807\u9898\uff0c\u90a3\u4e0d\u91cd\u8981~~\u3002\u4f46\u662f\uff0c\u9898\u76ee\u5e9e\u5927\u7684\u6570\u636e\u8303\u56f4\u4f1a\u4f7f\u5b83MLE\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6765\u4f18\u5316\u7a7a\u95f4\uff0c\u5b83\u5c31\u662f\u2014\u2014\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\n\n>\u539f\u7406\n\n\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u628a\u9898\u76ee\u4e2d\u7684\u6570\u636e\uff0c\u653e\u5165\u7ebf\u6bb5\u6811\u7684**\u53f6\u5b50\u8282\u70b9**\u4e2d\u64cd\u4f5c\u3002\u7b49\u7b49\uff0c\u653e\u5728\u7ebf\u6bb5\u6811\u91cc\uff1f\uff1f\uff1f\u8fd9\u4e0d\u662f\u66f4\u4f1aMLE\u5417\uff1f\n\n\u672c\u849f\u84bb\u7684\u56de\u7b54\uff1a\n\n\n\n\u5176\u5b9e\u662f\u4e0d\u4f1a\u7684\u3002\n\n\u539f\u7406\u662f\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u5e76\u4e0d\u7528\u591a\u65b0\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u800c\u53ea\u7528\u65b0\u5efa\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230\u94fe\u5c31\u53ef\u4ee5\u4e86\u3002\u53ea\u7528\u65b0\u5efa\u4e00\u6761\u94fe\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u662f\u4ee5\u53f6\u5b50\u8282\u70b9\u50a8\u5b58\u6570\u636e\u7684\uff0c\u6211\u4eec\u8981\u4ee5\u4ece\u6839\u8282\u70b9\u5230\u8fd9\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u6240\u6709\u8282\u70b9\u7684\u6570\u636e\u65b0\u5efa\u51fa\u4e00\u6761\u94fe\u3002\uff08\u5982\u679c\u4e0d\u7406\u89e3\u7684\u8bdd\u5c31\u8054\u7cfb\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684\u4fee\u6539\u64cd\u4f5c\uff09\uff08\u6ce8\u610f\uff1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u65b0\u5efa\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u8282\u70b9\u6570\u636e\uff0c\u56e0\u4e3a\u5b58\u50a8\u5386\u53f2\u7248\u672c\uff09\n\n\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e0b\u56fe\u3002\n![\u9898\u89e3](https://cdn.luogu.com.cn/upload/pic/56149.png)\n\n\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5728\u6bcf\u4e00\u6b21\u65b0\u5efa\u64cd\u4f5c\u53ea\u7528\u65b0\u5efaO(logn)\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u6bd4\u6734\u7d20\u7684\u7b97\u6cd5\u5728\u7a7a\u95f4\u4e0a\u8981\u4f18\u5316\u591a\u4e86\uff01\n\n>\u4ee3\u7801\n\n\u5176\u5b9e\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u5386\u53f2\u7248\u672c\u7684\u6570\u7ec4rt[]\uff0c\u4f46\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u4e0d\u7528\u591a\u8bf4\u4e86\u3002\n\n```\n#include<cstdio>\nint n,m,rt[1000010],cnt;//cnt\u8bb0\u5f55\u7248\u672c\u7684\u5e8f\u53f7 \nstruct tree{\n\tint ls,rs,value;\n}t[21000010];\ninline void read(int &x,char ch=getchar(),bool f=0)\n{\n\tfor(x=0;ch>'9'||ch<'0';f=ch=='-',ch=getchar());\n\tfor(;ch>='0'&&ch<='9';x=(x<<3)+(x<<1)+(ch^48),ch=getchar());\n\t(f)&&(x=-x);\n}\nvoid build(int &point,int l,int r)\n{\n\tpoint=++cnt;\n\tif(l==r)\n\t{\n\t\tread(t[point].value);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(t[point].ls,l,mid);\n\tbuild(t[point].rs,mid+1,r);\n}\nvoid change(int &point,int last,int l,int r,int pos,int value)\n{\n\tpoint=++cnt,t[point]=t[last];\n\tif(l==r)\n\t{\n\t\tt[point].value=value;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)change(t[point].ls,t[last].ls,l,mid,pos,value);\n\telse change(t[point].rs,t[last].rs,mid+1,r,pos,value);\n}\nint que(int point,int l,int r,int loc)\n{\n\tif(l==r)return t[point].value;\n\tint mid=(l+r)>>1;\n\tif(loc<=mid)return que(t[point].ls,l,mid,loc);\n\telse return que(t[point].rs,mid+1,r,loc);\n}\nint main()\n{\n\tread(n),read(m);\n\tbuild(rt[0],1,n);\n\tfor(int i=1,last,flag,x,y,loc;i<=m;i++)\n\t{\n\t\tread(last),read(flag);\n\t\tif(flag==1)\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tchange(rt[i],rt[last],1,n,x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread(loc);\n\t\t\tprintf(\"%d\\n\",que(rt[last],1,n,loc));\n\t\t\trt[i]=rt[last];//\u6ce8\u610f\u65b0\u5efa\u7684\u7248\u672c\u5e8f\u53f7 \n\t\t}\n\t}\n}\n```\n\n\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u5728\u53ef\u6301\u4e45\u5316\u7b97\u6cd5\u4e2d\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u8bf7\u5927\u5bb6\u597d\u597d\u8bb0\u4f4f\uff01\n\n~~\u54ea\u4e00\u4f4d\u5927\u4f6c\u53ef\u4ee5\u6559\u6211\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u9e2d\u3002\u3002\u3002~~",
        "postTime": 1554703256,
        "uid": 112557,
        "name": "UhhhQQQU",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u4eba\u53d1\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u7684\u9898\u89e3\u2026\u2026\u6211\u5c31\u7528\u6211\u81ea\u5df1\u7684\u7406\u89e3\u5199\u4e00\u4efd\u597d\u4e86\n\n\u5176\u5b9e\u4e24\u4e2a\u65b9\u6cd5\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u5c31\u662f\u5e73\u8861\u6811**\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7740\u4e00\u4e2a\u503c**\uff0c\u800c\u7ebf\u6bb5\u6811**\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u4e00\u6bb5\u533a\u95f4**\u3002\n\n\u5efa\u5e73\u8861\u6811\u5c31\u662f\u628a\u67d0\u4e2a\u4f4d\u7f6e\u7684\u503c\u4f5c\u4e3a\u8282\u70b9\u5b58\u4e0b\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u5de6\u8fb9\u7684\u6570\u5b58\u5728\u8be5\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\uff0c\u53f3\u8fb9\u7684\u5b58\u5728\u53f3\u5b50\u6811\u4e2d\u3002(\u4ee3\u7801\u91cc\u7528\u4e86\u4e2a\u7c7b\u4f3csplay\u5efa\u6811\u7684\u65b9\u6cd5)\n\n\u4fee\u6539\u65f6\u8ddf\u4e3b\u5e2d\u6811\u4fee\u6539\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u628a\u4ece\u6839\u8282\u70b9\u5230\u4fee\u6539\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u590d\u5236\u4e00\u904d\uff0c**\u6ce8\u610f\u8fd9\u4e2a\u5e73\u8861\u6811\u662f\u65e0\u65cb\u7684\uff0c\u5426\u5219\u6ca1\u6cd5(\u65b9\u4fbf\u5730)\u53ef\u6301\u4e45\u5316**\n\n### (PS:\u8fd9\u91cc\u5f88\u591a\u4eba\u8bf4\u6709\u95ee\u9898\u5c31\u6539\u4e86\u4e00\u4e0b) ### \n\n\u7406\u8bba\u4e0a\u6765\u8bf4\u5e73\u8861\u6811\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u5e38\u6570\u5e94\u8be5\u90fd\u4f1a\u5c0f\u4e00\u4e9b\uff0c\u4f46\u662f\u6211\u5199\u7684\u662f\u6307\u9488\u7248\u7684\uff0c\u4f1a\u6bd4\u6570\u7ec4\u7248\u7684\u4e3b\u5e2d\u6811\u8981\u6162\u4e00\u70b9(\u4e5f\u8bb8\u662f\u56e0\u4e3a\u7528\u6307\u9488\u5f00\u8282\u70b9\u9700\u8981\u65f6\u95f4)\n\n\u4e0b\u9762\u7ed9\u51fa\u6307\u9488\u7248\u4ee3\u7801\uff0c\u611f\u89c9\u4f1a\u66f4\u597d\u7406\u89e3\u4e00\u4e9b\uff0c\u6570\u7ec4\u7248\u7684\u76f4\u63a5\u770b\u6211\u7684\u63d0\u4ea4\u8bb0\u5f55\u597d\u4e86\u2026\u2026\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cctype>\nusing namespace std;\nconst int Mm(1000005);\nint qrd()    //\u5feb\u8bfb\n{\n    int x(0),f(1); char c(getchar());\n    while(!isdigit(c))\n    {\n        if(c=='-')  f=-1;\n        c=getchar();\n    }\n    while(isdigit(c))\n    { x=x*10+c-'0'; c=getchar(); }\n    return x*f;\n}\nstruct tn\n{\n    int s,v;    //\u5b50\u6811\u5927\u5c0f\u53ca\u8282\u70b9\u503c\n    tn *ls,*rs;    //\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u6307\u9488\n}*ver[Mm],*null;    //\u7248\u672c\u53ca\u81ea\u5b9a\u4e49null\u6307\u9488\nint a[Mm];    //\u539f\u6570\u7ec4\ninline void mt(tn* p)    //\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f(\u597d\u50cf\u6ca1\u4ec0\u4e48\u7528)\n{ p->s = p->ls ->s + p->rs ->s + 1; }\nvoid bud(int l,int r,tn* &p)    //\u4ee5p\u4e3a\u6839\u8282\u70b9\u5efa\u6811\n{\n    if(l>r) p=null;\n    else\n    {\n        int mid((l+r)>>1);\n        p=new tn();    //\u5f00\u8282\u70b9\n        p->v = a[mid];\n        bud(l,mid-1,p->ls);    //\u9012\u5f52\u6784\u5efa\u5de6\u5b50\u6811\n        bud(mid+1,r,p->rs);    //\u9012\u5f52\u6784\u5efa\u53f3\u5b50\u6811\n        mt(p);\n    }\n}\nvoid mdf(tn* lv,tn* &mv,int k,int v)    //\u7248\u672c\u66f4\u65b0\n{\n    mv = new tn();\n    mv->v = lv->v;\n    mv->s = lv->s;\n    if(lv->ls ->s+1==k)    //\u627e\u5230\u4fee\u6539\u8282\u70b9\n    {\n        mv->v = v;\n        mv->ls = lv->ls;\n        mv->rs = lv->rs;\n        return;\n    }\n    if(lv->ls ->s+1>k)    //\u8981\u4fee\u6539\u7684\u8282\u70b9\u5728\u5de6\u5b50\u6811(\u7c7b\u4f3c\u4e8e\u540d\u6b21\u6811)\n    {\n        mv->rs = lv->rs;\n        mdf(lv->ls,mv->ls,k,v);\n    }\n    else    //\u8981\u4fee\u6539\u7684\u8282\u70b9\u5728\u53f3\u5b50\u6811\n    {\n        mv->ls = lv->ls;\n        mdf(lv->rs,mv->rs,k-lv->ls ->s-1,v);\n    }\n}\nint qry(tn* v,int p)    //\u67e5\u627e\n{\n    if(v->ls ->s+1==p)  return v->v;    //\u627e\u5230\u9700\u8981\u67e5\u627e\u7684\u8282\u70b9\n    if(v->ls ->s+1>p)   return qry(v->ls,p);    //\u67e5\u627e\u8282\u70b9\u5728\u5de6\u5b50\u6811\n    else    return qry(v->rs,p-v->ls ->s-1);    //\u67e5\u627e\u8282\u70b9\u5728\u53f3\u5b50\u6811\n}\nvoid Mido(tn* p)    //\u4e2d\u5e8f\u904d\u5386\uff0c\u8c03\u8bd5\u7528\n{\n    if(p!=null)\n    {\n        Mido(p->ls);\n        printf(\"%d \",p->v);\n        Mido(p->rs);\n    }\n}\nint main()\n{\n    int n,m;\n    cin >> n >> m;\n    null = new tn();\n    null->ls = null->rs = null;\n    for(int i(1);i<=n;++i)\n        a[i] = qrd();\n    bud(1,n,ver[0]);    //\u57280\u53f7\u7248\u672c\u4ee5a\u6570\u7ec4\u5efa\u6811\n    int nver(0);    //\u5f53\u524d\u7248\u672c\n    while(m--)\n    {\n        int v(qrd()),opr(qrd()),p(qrd());\n        if(opr==1)\n        {\n            int val(qrd());\n            mdf(ver[v],ver[++nver],p,val);\n        }\n        if(opr==2)\n        {\n            ver[++nver] = ver[v];\n            printf(\"%d\\n\",qry(ver[nver],p));\n        }\n        //Mido(ver[nver]);\n    }\n    return 0;\n}\n```",
        "postTime": 1514091981,
        "uid": 22911,
        "name": "ajil",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u505a\u7684\u7b2c\u4e00\u9053\u4e3b\u5e2d\u6811\u7684\u9898\u76ee\uff1a\n\u4e3b\u5e2d\u6811:\u5c31\u662f\u5f88\u591a\u4e2a\u5386\u53f2\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u3002\n       \u8fd9\u4e9b\u7ebf\u6bb5\u6811\u5145\u5206\u670d\u7528\u4ee5\u524d\u7684\u8282\u70b9\u3002\n\u601d\u8def\uff1a\u4e3b\u5e2d\u6811\u7684\u6a21\u677f\u9898\n      \u4fee\u6539\u5c31\u662f\u66f4\u65b0\u64cd\u4f5c\uff0c\u65b0\u5efa\u4e00\u7cfb\u5217\u7684\u70b9\uff0c\u67e5\u8be2\u64cd\u4f5c\u5c31\u662f\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u67e5\u8be2\n      \u64cd\u4f5c\u3002\u4e4b\u540e\u7684\u590d\u5236\u5c31\u76f4\u63a5\u5c06\u67e5\u8be2\u7684\u5386\u53f2\u7248\u672c\u7684\u6839\u8282\u70b9\u590d\u5236\u8fc7\u53bb\u5c31\u597d\u4e86\u3002\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 30200\n#define MAXP 55\n#define maxnode 50010\n#define sigma_size 26\n#define mod 1000000007\n#define INF 0x3f3f3f3f\n#define mid (l+r)/2\nusing namespace std;\ntypedef long long LL;\n\n\nconst int N=1000010;\nint n,q,m,cnt=0;\nint a[N],b[N],T[N<<5];\nint sum[N<<5],Lc[N<<5],Rc[N<<5],val[N<<5];\n\ninline int build(int l,int r)\n{\n    int rt=++cnt;\n    if(l==r)\n    {\n        val[rt]=a[l];\n    }\n    if(l<r)\n    {\n        Lc[rt]=build(l,mid);\n        Rc[rt]=build(mid+1,r);\n    }\n    return rt;\n}\n\ninline int update(int pre,int l,int r,int x,int v)\n{\n    int rt=++cnt;\n    Lc[rt]=Lc[pre],Rc[rt]=Rc[pre],val[rt]=val[pre];\n    if(l==r)\n    {\n        val[rt]=v;\n        return rt;\n    }\n    if(x<=mid)\n        Lc[rt]=update(Lc[pre],l,mid,x,v);\n    else\n        Rc[rt]=update(Rc[pre],mid+1,r,x,v);\n    return rt;\n}\n\ninline int query(int o,int l,int r,int x)\n{\n    if(l==r)\n        return val[o];\n    if(x<=mid)\n        return query(Lc[o],l,mid,x);\n    else\n        return query(Rc[o],mid+1,r,x);\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    T[0]=build(1,n);\n    for(int i=1;i<=m;i++){\n        int pre,opt,x;\n        scanf(\"%d %d %d\",&pre,&opt,&x);\n        if(opt==1){\n        int v;\n        scanf(\"%d\",&v);\n        T[i]=update(T[pre],1,n,x,v);\n        }\n        if(opt==2)\n        {printf(\"%d\\n\",query(T[pre],1,n,x));T[i]=T[pre];}\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1578292528,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u7684\u9898\u89e3\u3002\n\n\u7531\u4e8e\u7ef4\u62a4\u533a\u95f4\uff0c\u6211\u4eec\u4ee5\u987a\u5e8f\u4e3a\u952e\u503c\u5efa\u7acb\u5e73\u8861\u6811\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u5728\u5b83\u5de6\u4fa7\uff0c\u53f3\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u5728\u5b83\u53f3\u4fa7\u3002\n\n\u8003\u8651\u5230\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u63d2\u5165\u548c\u5220\u9664\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6811\u7684\u5f62\u6001\u5728\u5efa\u6811\u4ee5\u540e\u5c31\u4e0d\u4f1a\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5DFS\u5efa\u6811\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5e73\u8861\uff0c\u5e76\u4e0d\u9700\u8981Split/Merge/Rotate\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\n\n\u7136\u540e\u8003\u8651\u53ef\u6301\u4e45\u5316\u3002\u6211\u4eec\u53ea\u9700\u8981\u5728\u4fee\u6539\u65f6\u628a\u4ece\u6839\u8282\u70b9\u5230\u4fee\u6539\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u590d\u5236\u4e00\u904d\u5373\u53ef\u3002\n\n\u7531\u4e8e\u5e73\u8861\u6811\u7684\u70b9\u6570\u6bd4\u7ebf\u6bb5\u6811\u5c11\u5f88\u591a\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u5b83\u662f\u6bd4\u7ebf\u6bb5\u6811\u5feb\u7684\uff08\u7136\u800c\u5b9e\u9645\u5e76\u6ca1\u6709\uff0c\u4e5f\u8bb8\u662f\u6211\u5e38\u6570\u5927\uff1f\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\nstruct Node{ int son[2],val,rnd; };\nstatic Node mem[30000001];\nstatic int null=0,cnt=0;\ninline int Create(int val,int num){\n\t++cnt;\n\tmem[cnt].son[0]=mem[cnt].son[1]=null;\n\tmem[cnt].val=val, mem[cnt].rnd=num;\n\treturn cnt;\n}\ninline int Copy(int a){ mem[++cnt]=mem[a]; return cnt; }\nstatic int Build(int l,int r,int *a){\n\tregister int m=l+r>>1;\n\tregister int ret=Create(m,a[m]);\n\tif(l<m) mem[ret].son[0]=Build(l,m-1,a);\n\tif(r>m) mem[ret].son[1]=Build(m+1,r,a);\n\treturn ret;\n}\nstatic void Update(int &root,int u,int v){\n    root=Copy(root);\n    if(mem[root].val==u){ mem[root].rnd=v; return; }\n    if(mem[root].val<u){ Update(mem[root].son[1],u,v); return; }\n    if(mem[root].val>u){ Update(mem[root].son[0],u,v); return; }\n}\nstruct Array{\n\tint root[1000001];\n\tinline Array(){ root[0]=null; }\n\tinline void Init(int n,int *a){ root[0]=Build(1,n,a); }\n\tinline void Copy(int a,int b){ root[a]=root[b]; }\n\tinline void Modify(int t,int p,int v){ Update(root[t],p,v); }\n\tinline int Query(int t,int p){\n\t\tregister int tmp=root[t];\n\t\twhile(mem[tmp].val!=p){\n\t\t\tif(mem[tmp].val<p) tmp=mem[tmp].son[1];\n\t\t\tif(mem[tmp].val>p) tmp=mem[tmp].son[0];\n\t\t}\n\t\treturn mem[tmp].rnd;\n\t}\n};\nstatic Array t;\nstatic int a[1000001];\nint main(){\n\tsrand(1234567);\n\tmem[null].son[0]=mem[null].son[1]=null;\n\tint n,m; scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tt.Init(n,a);\n\tfor(int i=1;i<=m;i++){\n\t\tint v,opt; scanf(\"%d%d\",&v,&opt);\n\t\tt.Copy(i,v);\n\t\tif(opt==1){\n\t\t\tint p,d; scanf(\"%d%d\",&p,&d);\n\t\t\tt.Modify(i,p,d);\n\t\t}else if(opt==2){\n\t\t\tint p; scanf(\"%d\",&p);\n\t\t\tprintf(\"%d\\n\",t.Query(i,p));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1562716638,
        "uid": 52024,
        "name": "\u9648\u741b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u8bf7\u524d\u5f80[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/hzf29721/p/9466930.html)\u67e5\u770b~\n\n#**\u2160\u3001\u524d\u8a00**\n\n\u611f\u8c22\u6d1b\u8c37[\u5b64\u72ec\u00b7\u7cb2\u6cfd](https://www.luogu.org/blog/LonecharmRiver/zhu-xi-shu)\u5927\u4f6c\u5199\u7684\u9898\u89e3\uff0c\u5bf9\u6211\u542f\u53d1\u81f3\u6df1\u3002\n\n#**\u2161\u3001\u5206\u6790\u95ee\u9898**\n\n\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u5176\u7279\u70b9\u5728\u4e8e\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u7684\u503c(\u4e0a\u9762\u8bb2\u4e86)\uff0c\u90a3\u4e48\u5982\u4f55\u8bb0\u5f55\u5386\u53f2\u7248\u672c\u5462\uff1f\n\n\u6700\u6734\u7d20\u7684\u601d\u60f3\u5c31\u662f\uff0c\u6211\u4eec\u6bcf\u9047\u5230\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u628a\u4e0a\u6b21\u7684\u7ebf\u6bb5\u6811\u590d\u5236\u4e0b\u6765\uff0c\u518d\u5728\u590d\u5236\u540e\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6709\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u5e76\u8bb0\u5f55\u6bcf\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u8bbf\u95ee\u67d0\u68f5\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u53ef\u4ed4\u7ec6\u5206\u6790\u590d\u6742\u5ea6\u540e\uff0c\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u8fdc\u5927\u4e8e\u6b63\u5e38\u8303\u56f4\uff0c\u7a7a\u95f4\u66f4\u662f\u5f00\u4e0d\u4e0b\uff0c\u76f4\u63a5\u65b0\u5efa\u65b0\u7ebf\u6bb5\u6811\u8fd9\u4e2a\u65b9\u6cd5\u7b97\u662f\u5e9f\u4e86\uff0c\u80fd\u4e0d\u80fd\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u6539\u8fdb\u5462\uff1f\n\n\u5206\u6790\u4e0b\u56fe\uff0c\u7b2c0\u68f5\u7ebf\u6bb5\u6811(\u7ea2\u8272\u4e3a\u70b9\u6743\u503c\uff0c\u7eff\u8272\u4e3a\u5176\u8986\u76d6\u533a\u95f4)\n\n![](https://images2018.cnblogs.com/blog/1191966/201808/1191966-20180818233117471-1787220189.png)\n\n\u7b2c1\u68f5\u7ebf\u6bb5\u6811\u662f\u4e0b\u56fe\u2193\n\n![](https://images2018.cnblogs.com/blog/1191966/201808/1191966-20180818233731962-1297196443.png)\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0e\u521d\u59cb\u7ebf\u6bb5\u6811(\u6211\u4eec\u6682\u4e14\u5728\u8fd9\u91cc\u600e\u4e48\u79f0\u547c\u5b83)\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\uff0c\u5982\u679c\u628a\u539f\u6765\u7684\u8282\u70b9\u90fd\u590d\u5236\u4e00\u904d\uff0c\u76f8\u5f53\u4e8e\u591a\u5f00\u4e86\u8bb8\u591a\u7a7a\u95f4\uff0c\u800c\u521d\u59cb\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u6743\u5374\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\u3002\n\n\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n\u8fd9\u91cc\u5f15\u5165\u4e00\u4e2a\u65b0\u64cd\u4f5c\uff0c\u53ef\u80fd\u6211\u4eec\u7684\u65b0\u7ebf\u6bb5\u6811\u53ef\u4ee5\u548c\u5386\u53f2\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u5171\u7528\u4e00\u6bb5\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6bcf\u6b21\u7ebf\u6bb5\u6811\u7684\u6539\u52a8\u662f\u6781\u4e3a\u5fae\u5c0f\u7684\uff0c\u53ea\u6539\u52a8\u4e86$\\log_{2}{n}$\u7684\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u5e76\u6ca1\u6709\u4fee\u6539\uff0c\u6b64\u65f6\u6211\u4eec\u5373\u53ef\u5c06\u672a\u6539\u52a8\u90e8\u5206\u548c\u5386\u53f2\u7248\u672c\u7684\u8fd9\u4e00\u90e8\u5206\u5171\u7528\u4e00\u6bb5\u7a7a\u95f4\n\n\u5982\u56fe\uff0c\u7b2c1\u68f5\u7ebf\u6bb5\u6811\u4e0e\u7b2c0\u68f5\u7ebf\u6bb5\u6811\u5171\u7528\u4e862~9\u8fd9\u4e00\u6bb5\u7a7a\u95f4\uff0c\u5728\u8282\u70b9\u6570\u91cf\u975e\u5e38\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u80fd\u53d6\u5f97\u5f88\u660e\u663e\u7684\u6548\u679c\u3002\n\n![](https://images2018.cnblogs.com/blog/1191966/201808/1191966-20180818234658206-1444248701.png)\n\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\uff0c\u5c06\u4e00\u53f7\u8282\u70b9\u7684\u503c\u52a014\n\n![](https://images2018.cnblogs.com/blog/1191966/201808/1191966-20180828230908245-1072623243.png)\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u4ee3\u7801(\u4e0b\u9762\u6709\u8be6\u7ec6\u7684\u6ce8\u91ca\u54e6)\uff1a\n\n\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define INF 2147483647\n#define mem(i,j) memset(i,j,sizeof(i))\n#define F(i,j,n) for(register int i=j;i<=n;i++)\nusing namespace std;\nint n,m,pntnum=0;//pntnum\u8868\u793a\u4e00\u5171\u5efa\u7acb\u8fc7\u591a\u5c11\u70b9\nint v[20000010],root[20000010];//v\u4e3a\u8f93\u5165\u7684\u70b9\u6743,root[i]\u8868\u793a\u7b2ci\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\ninline int read(){//\u5feb\u8bfb\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\n\tint datta=0;char chchc=getchar();bool okoko=0;\n\twhile(chchc<'0'||chchc>'9'){if(chchc=='-')okoko=1;chchc=getchar();}\n\twhile(chchc>='0'&&chchc<='9'){datta=datta*10+chchc-'0';chchc=getchar();}\n\tif(okoko==1)return -datta;return datta;\n}\nstruct Persistable_Segment_Tree{\n\tint ls[20000010],rs[20000010],tree[20000010];\n\t//ls[i]\u4e3ai\u7684\u5de6\u513f\u5b50,rs[i]\u4e3ai\u7684\u53f3\u513f\u5b50,tree[i]\u4e3ai\u7684\u503c\n\tvoid build_tree(int &pos,int l,int r){\n\t\tpos=++pntnum;//\u6dfb\u52a0\u65b0\u8282\u70b9,\u5f53\u524d\u8282\u70b9\u7f16\u53f7\u4e3a++pntnum\n\t\tif(l==r){\n\t\t\ttree[pos]=v[l];//\u521d\u59cb\u5316\u6bcf\u4e2a\u53f6\u8282\u70b9\u7684\u503c\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild_tree(ls[pos],l,mid);\n\t\tbuild_tree(rs[pos],mid+1,r); \n\t}\n\tvoid add(int &pos,int vsn,int l,int r,int loc,int val){//pos\u65b0\u7248\u672c\u7684\u5f53\u524d\u8282\u70b9\u7f16\u53f7,vsn\u65e7\u7248\u672c\u7684\u5f53\u524d\u8282\u70b9\u7f16\u53f7,l\u5de6\u7aef\u70b9,r\u53f3\u7aef\u70b9,loc\u8981\u4fee\u6539\u7684\u8282\u70b9\u7f16\u53f7,val\u4fee\u6539\u503c\n\t\tpos=++pntnum;//\u65b0\u5efa\u8282\u70b9\n\t\tif(l==r){\n\t\t\ttree[pos]=val;//\u4fee\u6539\u503c\n\t\t\treturn ;\n\t\t}\n\t\tls[pos]=ls[vsn];//\u7ee7\u627f\u65e7\u7248\u672c\u5de6\u5b50\u6811\n\t\trs[pos]=rs[vsn];//\u7ee7\u627f\u65e7\u7248\u53f3\u5de6\u5b50\u6811\n\t\tint mid=(l+r)>>1;\n\t\tif(loc<=mid)//\u5982\u679c\u8981\u4fee\u6539\u7684\u8282\u70b9\u5728\u5de6\u5b50\u6811\u4e2d\n\t\t\tadd(ls[pos],ls[vsn],l,mid,loc,val);//\u5904\u7406\u5de6\u5b50\u6811\n\t\telse\n\t\t\tadd(rs[pos],rs[vsn],mid+1,r,loc,val);//\u5904\u7406\u53f3\u5b50\u6811\n\t}\n\tint ask(int vsn,int l,int r,int loc){//vsn\u8981\u8bbf\u95ee\u7684\u7248\u672c\u7684\u5f53\u524d\u8282\u70b9\u7f16\u53f7,l\u5de6\u7aef\u70b9,r\u53f3\u7aef\u70b9,loc\u8981\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\n\t\tif(l==r)\n\t\t\treturn tree[vsn];\n\t\tint mid=(l+r)>>1;\n\t\tif(loc<=mid)//\u5982\u679c\u5728\u5de6\u5b50\u6811\u4e2d\n\t\t\treturn ask(ls[vsn],l,mid,loc);\n\t\telse\n\t\t\treturn ask(rs[vsn],mid+1,r,loc);\n\t}\n}T;\nint main(){\n\tn=read();m=read();\n\tF(i,1,n)\n\t\tv[i]=read();\n\tT.build_tree(root[0],1,n);//\u5efa\u6811\n\tF(i,1,m){\t\n\t\tint rt=read(),kd=read(),loc=read(),val;//rt\u5386\u53f2\u7248\u672c\u7f16\u53f7,kd\u64cd\u4f5c\u7c7b\u578b,loc\u8282\u70b9\u7f16\u53f7,val\u4fee\u6539\u540e\u7684\u503c\n\t\tif(kd==1){\n\t\t\tval=read();\n\t\t\tT.add(root[i],root[rt],1,n,loc,val);\n\t\t}else{\n\t\t\troot[i]=root[rt];//root[i]\u662f\u7b2ci\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\u7f16\u53f7,\u56e0\u4e3a\u6ca1\u6709\u4fee\u6539,\u6240\u4ee5\u53ea\u9700\u8981\u7ee7\u627f\u4ee5\u524d\u7248\u672c\n\t\t\tprintf(\"%d\\n\",T.ask(root[rt],1,n,loc));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u533a\u95f4\u7b2ck\u5c0f\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u7ecf\u5178\u5e94\u7528\uff0c\u5982\u9898\n\n##**\u9898\u76ee\u63cf\u8ff0**\n\n\u5982\u9898\uff0c\u7ed9\u5b9a$N$\u4e2a\u6b63\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\uff0c\u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2c$k$\u5c0f\u503c\u3002\n\n###**\u8f93\u5165\u8f93\u51fa\u683c\u5f0f**\n\n####**\u8f93\u5165\u683c\u5f0f\uff1a**\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570$N$\u3001$M$\uff0c\u5206\u522b\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u67e5\u8be2\u7684\u4e2a\u6570\u3002\n\n\u7b2c\u4e8c\u884c\u5305\u542b$N$\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u5404\u9879\u7684\u6570\u5b57\u3002\n\n\u63a5\u4e0b\u6765M\u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570$l,r,k$\uff0c\u8868\u793a\u67e5\u8be2\u533a\u95f4$\\left[l,r\\right]$\u5185\u7684\u7b2c$k$\u5c0f\u503c\u3002\n\n####**\u8f93\u51fa\u683c\u5f0f\uff1a**\n\n\u8f93\u51fa\u5305\u542b$k$\u884c\uff0c\u6bcf\u884c1\u4e2a\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u4e00\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\n\n###**\u8f93\u5165\u8f93\u51fa\u6837\u4f8b**\n\n####**\u8f93\u5165\u6837\u4f8b#1\uff1a**\n\n    5 5\n    25957 6405 15770 26287 26465 \n    2 2 1\n    3 4 1\n    4 5 1\n    1 2 2\n    4 4 1\n####**\u8f93\u51fa\u6837\u4f8b#1\uff1a**\n\n    6405\n    15770\n    26287\n    25957\n    26287\n\u533a\u95f4\u7b2ck\u5c0f\u95ee\u9898\u53ef\u4ee5\u6709\u8bb8\u591a\u5176\u4ed6\u5199\u6cd5\uff0c\u6211\u4eec\u8fd9\u91cc\u5c1d\u8bd5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u89e3\u9898\u3002\n\n\u533a\u95f4\u7b2ck\u5c0f(\u65e0\u4fee\u6539\u64cd\u4f5c)\uff1a\n\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define mem(i,j) memset(i,j,sizeof(i))\n#define F(i,j,n) for(register int i=j;i<=n;i++)\nusing namespace std;\nstruct hahaha{\n\tint v,id;\n}s[4000010];\nint n,m,pntnum=0,a[4000010];\nint root[4000010],b[4000010];\ninline int read(){\n\tint datta=0;char chchc=getchar();bool okoko=0;\n\twhile(chchc<'0'||chchc>'9'){if(chchc=='-')okoko=1;chchc=getchar();}\n\twhile(chchc>='0'&&chchc<='9'){datta=datta*10+chchc-'0';chchc=getchar();}\n\tif(okoko==1)return -datta;return datta;\n}\ninline bool cmp(hahaha a,hahaha b){\n\treturn a.v<b.v;\n}\nstruct Persistable_Segment_Tree{\n\tint ls[4000010],rs[4000010],tree[4000010];\n\tvoid build_tree(int &pos,int l,int r){\n\t\tpos=++pntnum;\n\t\tif(l==r)\n\t\t\treturn ;\n\t\tint mid=(l+r)>>1;\n\t\tbuild_tree(ls[pos],l,mid);\n\t\tbuild_tree(rs[pos],mid+1,r);\n\t}\n\tvoid add(int &pos,int vsn,int l,int r,int loc){//pos\u65b0\u7248\u672c\u7684\u5f53\u524d\u8282\u70b9\u7f16\u53f7,vsn\u65e7\u7248\u672c\u7684\u5f53\u524d\u8282\u70b9\u7f16\u53f7,l\u5de6\u7aef\u70b9,r\u53f3\u7aef\u70b9,loc\u8981\u4fee\u6539\u7684\u8282\u70b9\u7f16\u53f7\n\t\tpos=++pntnum;\n\t\tif(l==r){\n\t\t\ttree[pos]=tree[vsn]+1;//\u5f53\u524d\u8282\u70b9\u52a01\n\t\t\treturn ;\n\t\t}\n\t\tls[pos]=ls[vsn];//\u7ee7\u627f\u5de6\u5b50\u6811\n\t\trs[pos]=rs[vsn];//\u7ee7\u627f\u53f3\u5b50\u6811\n\t\ttree[pos]=tree[vsn]+1;//\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u6743\u503c\u52a01\n\t\tint mid=(l+r)>>1;\n\t\tif(loc<=mid)\n\t\t\tadd(ls[pos],ls[vsn],l,mid,loc);\n\t\telse\n\t\t\tadd(rs[pos],rs[vsn],mid+1,r,loc);\n\t}\n\tint ask(int lv,int rv,int l,int r,int k){\n\t\tif(l==r)\n\t\t\treturn l;//\u8fd4\u56de\u7b2cl\u5c0f\n\t\tint mid=(l+r)>>1,sum=tree[ls[rv]]-tree[ls[lv]];//sum\u4e3a\u7b2crv\u68f5\u6811\u7684\n\t\tif(k<=sum)\n\t\t\treturn ask(ls[lv],ls[rv],l,mid,k);\n\t\telse\n\t\t\treturn ask(rs[lv],rs[rv],mid+1,r,k-sum);\n\t}\n}T;\nint main(){\n\tn=read();m=read();\n\tF(i,1,n)\n\t\ts[i].v=read(),s[i].id=i;\n\tsort(s+1,s+n+1,cmp);//\u5c06\u8282\u70b9\u6309\u6743\u503c\u6392\u5e8f\n\tint num=0;\n\ts[0].v=-0x3f3f3f3f;\n\tF(i,1,n)\n\t\ta[s[i].id]=(s[i].v!=s[i-1].v)?++num:num;//\u5c06\u8282\u70b9\u6743\u503c\u79bb\u6563\u5316\n\tint nowi=1,numi=1;\n\twhile(numi<=n){\n\t\tif(s[numi].v!=s[numi-1].v)\n\t\t\tb[nowi++]=s[numi].v;//\u5c06\u79bb\u6563\u5316\u540e\u7684\u6570\u7ec4\u6bcf\u4e2a\u6570\u53ea\u51fa\u73b0\u4e00\u6b21\u5730\u653e\u5230b\u6570\u7ec4\u4e2d,\u4fbf\u4e8e\u6700\u540e\u8f93\u51fa\u7b2c\u51e0\u5c0f\n\t\tnumi++;\n\t}\n\tT.build_tree(root[0],1,nowi);//\u5efa\u7a7a\u6811\n\tF(i,1,n)\n\t\tT.add(root[i],root[i-1],1,n,a[i]);//\u52a0\u70b9,\u8be6\u89c1add\u51fd\u6570\n\tF(i,1,m){\n\t\tint lft=read(),rht=read(),kn=read();\n\t\tprintf(\"%d\\n\",b[T.ask(root[lft-1],root[rht],1,n,kn)]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1551183567,
        "uid": 45405,
        "name": "_____hzf_____",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\n \u5212\u5206\u6811\u662f\u4e00\u79cd\u6765\u89e3\u51b3\u533a\u95f4\u7b2c $K$ \u5927\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784,\u5176\u5e38\u6570,\u7406\u89e3\u96be\u5ea6\u90fd\u8981\u6bd4\u4e3b\u5e2d\u6811\u4f4e\u5f88\u591a\u3002\u540c\u65f6,\u5212\u5206\u6811\u7d27\u8d34\"\u7b2c $K$ \u5927\"\uff0c\u6240\u4ee5\u662f\u4e00\u79cd\u57fa\u4e8e\u6392\u5e8f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002**\u5efa\u8bae\u5148\u5b66\u5b8c\u4e3b\u5e2d\u6811\u518d\u770b\u5212\u5206\u6811\u54e6**\u3002\n\n ### \u5efa\u6811\n\n \u5212\u5206\u6811\u7684\u5efa\u6811\u6bd4\u8f83\u7b80\u5355,\u4f46\u662f\u76f8\u5bf9\u4e8e\u5176\u4ed6\u6811\u6765\u8bf4\u6bd4\u8f83\u590d\u6742\u3002\n ![](https://s1.ax1x.com/2018/08/31/Pvaer6.png)\n\n \u5982\u56fe,\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a\u770b\u4f3c\u65e0\u5e8f\u7684\u6570\u7ec4\u3002\u5176\u5b9e,\u6bcf\u4e00\u4e2a\u88ab\u7ea2\u8272\u6807\u8bb0\u7684\u6570\u5b57\u90fd\u662f**\u8981\u5206\u914d\u5230\u5de6\u513f\u5b50\u7684**\u3002\u800c\u5206\u914d\u7684\u89c4\u5219\u662f\u4ec0\u4e48?\u5c31\u662f\u4e0e**\u8fd9\u4e00\u5c42\u7684\u4e2d\u4f4d\u6570**\u505a\u6bd4\u8f83, $\\leq$ \u5de6\u8fb9,\u5426\u5219\u53f3\u8fb9\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b:\u5e76\u4e0d\u662f\u4e25\u683c\u7684 $\\leq$ **\u5de6\u8fb9,\u5426\u5219\u53f3\u8fb9**\u3002\u56e0\u4e3a\u4e2d\u4f4d\u6570\u53ef\u80fd\u6709\u76f8\u540c,\u800c\u4e14\u4e0e $N$ \u7684\u5947\u5076\u6709\u4e00\u5b9a\u5173\u7cfb\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4f1a\u6709\u4e00\u4e2a\u5de7\u5999\u7684\u8fd0\u7528,\u5927\u5bb6\u53ef\u4ee5\u53c2\u7167\u4ee3\u7801\u3002\n\n \u6211\u4eec\u4e0d\u80af\u80fd\u6bcf\u4e00\u6b21\u90fd\u5bf9\u6bcf\u4e00\u5c42\u6392\u5e8f,\u8fd9\u6837\u5b50\u4e0d\u8bf4\u5e38\u6570,\u5c31\u7b97\u662f\u7406\u8bba\u590d\u6742\u5ea6\u4e5f\u8fc7\u4e0d\u53bb\u3002\u6211\u4eec\u60f3,\u627e\u4e2d\u4f4d\u6570,\u4e00\u6b21\u6392\u5e8f\u5c31\u591f\u4e86\u3002\u4e3a\u4ec0\u4e48? \u6bd4\u5982,\u6211\u4eec\u6c42 $l,r$ \u7684\u4e2d\u4f4d\u6570,\u5176\u5b9e\u5c31\u662f\u5728\u6392\u5b8c\u5e8f\u8fc7\u540e\u7684 $num[mid]$\u3002\n\n\n \u4e24\u4e2a\u5173\u952e\u6570\u7ec4:\n ```\n tree[log(N),N]   : \u4e5f\u5c31\u662f\u6811,\u8981\u5b58\u4e0b\u6240\u6709\u7684\u503c,\u7a7a\u95f4\u590d\u6742\u5ea6 O(N log N)\u3002\n toleft[log(N),n] : \u4e5f\u5c31\u662f\u6bcf\u4e00\u5c42 1~i \u8fdb\u5165\u5de6\u513f\u5b50\u7684\u6570\u91cf,\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u4e00\u4e0b,\u8fd9\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u3002\u8fd8\u6709,\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u5206\u662f\u5728\u54ea\u4e00\u4e2a\u8282\u70b9,\u4f46\u662f\u5206\u90a3\u4e00\u5c42(\u6ca1\u6709\u5173\u7cfb)\u3002 \n ```\n\n ```pascal\n procedure Build(left,right,deep:longint); // left,right \u662f\u5de6\u53f3\u533a\u95f4,deep\u662f\u7b2c\u51e0\u5c42\n var\n \ti,mid,same,ls,rs,flag:longint; // \u5176\u4e2d flag \u662f\u7528\u6765\u5e73\u8861\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u91cf\u7684\n begin\n \tif left=right then exit; // \u5230\u5e95\u5c42\u4e86\n \tmid:=(left+right) >> 1;\n \tsame:=mid-left+1;\n \tfor i:=left to right do \n \t\tif tree[deep,i]<num[mid] then\n \t\t\tdec(same);\n\n \tls:=left; // \u5206\u914d\u5230\u5de6\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488\n \trs:=mid+1; // \u5206\u914d\u5230\u53f3\u513f\u5b50\u7684\u7b2c\u4e00\u4e2a\u6307\u9488\n \tfor i:=left to right do\n \tbegin\n \t\tflag:=0;\n \t\tif (tree[deep,i]<num[mid])or((tree[deep,i]=num[mid])and(same>0)) then // \u5206\u914d\u5230\u5de6\u8fb9\u7684\u6761\u4ef6\n \t\tbegin\n \t\t\tflag:=1; tree[deep+1,ls]:=tree[deep,i]; inc(ls);\n \t\t\tif tree[deep,i]=num[mid] then // \u5e73\u8861\u5de6\u53f3\u4e2a\u6570\n \t\t\t\tdec(same);\n \t\tend\n \t\telse\n \t\tbegin\n \t\t\ttree[deep+1,rs]:=tree[deep,i]; inc(rs);\n \t\tend;\n \t\ttoleft[deep,i]:=toleft[deep,i-1]+flag;\n \tend;\n \tBuild(left,mid,deep+1); // \u7ee7\u7eed\n \tBuild(mid+1,right,deep+1);\n end;\n ```\n\n ### \u67e5\u8be2\n\n \u90a3\u6211\u4eec\u5148\u626f\u4e00\u4e0b\u4e3b\u5e2d\u6811\u7684\u5185\u5bb9\u3002\u5728\u7528\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2c $K$ \u5c0f\u7684\u65f6\u5019,\u6211\u4eec\u4ee5 $K$ \u4e3a\u57fa\u51c6,\u5411\u5de6\u5c31\u5411\u5de6,\u5411\u53f3\u8981\u51cf\u53bb\u5411\u5de6\u7684\u503c,\u5728\u5212\u5206\u6811\u4e2d\u4e5f\u662f\u8fd9\u6837\u5b50\u7684\u3002\n\n \u67e5\u8be2\u96be\u7406\u89e3\u7684,\u5728\u4e8e**\u533a\u95f4\u7f29\u5c0f**\u8fd9\u79cd\u4e1c\u897f\u3002\u4e0b\u56fe,\u6211\u67e5\u8be2\u7684\u662f $3$ \u5230 $7$,\u90a3\u4e48\u4e0b\u4e00\u5c42\u6211\u5c31\u53ea\u9700\u8981\u67e5\u8be2 $2$ \u5230 $3$ \u4e86\u3002\u5f53\u7136,\u6211\u4eec\u5b9a\u4e49 $left,right$ \u4e3a\u7f29\u5c0f\u540e\u7684\u533a\u95f4(\u76ee\u6807\u533a\u95f4), $l,r$ \u8fd8\u662f\u6211\u6240\u5728\u8282\u70b9\u7684\u533a\u95f4\u3002\u90a3\u4e3a\u4ec0\u4e48\u8981\u6807\u51fa\u76ee\u6807\u533a\u95f4\u5462? \u56e0\u4e3a\u90a3\u662f**\u5224\u5b9a\u7b54\u6848\u5728\u5de6\u8fb9,\u53f3\u8fb9\u7684\u57fa\u51c6**\u3002\n\n ![](https://s1.ax1x.com/2018/08/31/Pvduyq.png)\n\n\n ```pascal\n function Query(left,right,k,l,r,deep:longint):longint;\n var\n \tmid,x,y,cnt,rx,ry:longint;\n begin\n \tif left=right then // \u5199\u6210 l=r \u4e5f\u65e0\u59a8,\u56e0\u4e3a\u76ee\u6807\u533a\u95f4\u4e5f\u4e00\u5b9a\u6709\u7b54\u6848\n \t\texit(tree[deep,left]);\n \tmid:=(l+r) >> 1;\n \tx:=toleft[deep,left-1]-toleft[deep,l-1]; // l \u5230 left \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570\n \ty:=toleft[deep,right]-toleft[deep,l-1]; // l \u5230 right \u7684\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570\n \try:=right-l-y; rx:=left-l-x; // ry \u662f l \u5230 right \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570,rx \u5219\u662f l \u5230 lefr \u53bb\u53f3\u513f\u5b50\u7684\u4e2a\u6570\n \tcnt:=y-x; // left \u5230 right \u5de6\u513f\u5b50\u7684\u4e2a\u6570\n \tif cnt>=k then // \u4e3b\u5e2d\u6811\u5e38\u8bc6\u5566\n \t\tQuery:=Query(l+x,l+y-1,k,l,mid,deep+1) // l+x \u5c31\u662f\u7f29\u5c0f\u5de6\u8fb9\u754c,l+y-1 \u5c31\u662f\u7f29\u5c0f\u53f3\u533a\u95f4\u3002\u5bf9\u4e8e\u4e0a\u56fe\u6765\u8bf4,\u5c31\u662f\u628a 1 \u548c 2 \u653e\u5f03\u4e86\u3002\n \telse\n \t\tQuery:=Query(mid+rx+1,mid+ry+1,k-cnt,mid+1,r,deep+1); // \u540c\u6837\u662f\u7f29\u5c0f\u533a\u95f4,\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86\u53f3\u8fb9\u800c\u5df2\u3002\u6ce8\u610f\u8981 k-cnt\u3002\n end;\n ```\n\n ### \u7406\u8bba\u590d\u6742\u5ea6\u548c\u4eb2\u6d4b\u7ed3\u679c\n\n \u65f6\u95f4\u590d\u6742\u5ea6 : \u4e00\u6b21\u67e5\u8be2\u53ea\u9700\u8981 $O(\\log\\ n)$,$m$\u6b21\u8be2\u95ee,\u5c31\u662f $O(m\\ \\log\\ n)$\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6 : \u53ea\u9700\u8981\u5b58\u50a8 $O(n\\ \\log\\ n)$ \u4e2a\u6570\u5b57\u3002\n\n \u4eb2\u6d4b\u7ed3\u679c:  \u4e3b\u5e2d\u6811 : $1482ms$\u3001\u5212\u5206\u6811 : $889ms$\u3002 (\u975e\u9012\u5f52,\u5e38\u6570\u6bd4\u8f83\u5c0f)\n\n\n\n ### \u540e\u8bb0\n\n \u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u53bb\u5199\u975e\u9012\u5f52\u7248\u54e6\u3002\u53c2\u8003\u535a\u6587 : [\u4f20\u9001\u95e8](https://blog.csdn.net/littlewhite520/article/details/70250722)\u3002",
        "postTime": 1535728339,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u5212\u5206\u6811"
    },
    {
        "content": "~~\u8c8c\u4f3c\u6ca1\u6709\u5199\u975e\u9012\u5f52\u7248\u7684\u9898\u89e3\u3002\u3002\u3002\u3002\u3002\u3002~~\n\n\n\u9996\u5148\u8981\u4e86\u89e3\u6b64\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\u2014\u2014\u7ebf\u6bb5\u6811\u3002\u63a8\u8350\u4e00\u4e0b[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/TenosDoIt/p/3453089.html)\uff0c\u5bf9\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u8bb2\u5f97\u633a\u8be6\u7ec6\u7684\u3002\n\n\u53ef\u6301\u4e45\u561b\uff01\u5c31\u662f\u5f53\u51fa\u73b0\u5386\u53f2\u7248\u672c\u7684\u65f6\u5019\uff0c\u80fd\u591f\u975e\u5e38\u65b9\u4fbf\u5730\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u7684\u5386\u53f2\u7248\u672c\u3002\n\n\n\u81ea\u7136\uff0c\u6211\u4eec\u9700\u8981\u5efa$N$\u68f5\u7ebf\u6bb5\u6811\u3002\u6700\u7c97\u66b4\u7684\u60f3\u6cd5\uff0c\u5bf9\u6bcf\u4e2a\u65b0\u7248\u672c\u90fd\u628a\u539f\u7248\u672c\u5185\u5bb9\u590d\u5236\u4e00\u904d\uff0c\u7136\u540e\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002\u8fd9\u6839\u672c\u4e0d\u7528\u60f3\uff0c\u76f4\u63a5MLE+TLE\u3002\u90a3\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u53c8\u662f\u600e\u6837\u5b9e\u73b0\u7684\u5462\uff1f\n\n\u5bf9\u4e8e\u672c\u9898\uff0c\u6bcf\u4e2a\u7248\u672c\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5b83\uff0c\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u800c\u53f6\u5b50\u8282\u70b9\u5c31\u8868\u793a\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u503c\u4e86\u3002\n\n\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u6837\u4f8b\u4e2d\u521d\u59cb\u7248\u672c\u53ef\u4ee5\u957f\u8fd9\u6837\u2014\u2014\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180116170324365-1465450989.png)\n\n\n\u800c\u7248\u672c1\u53ea\u662f\u67e5\u8be2\u4e86\u4e00\u4e0b\uff08\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff09\uff0c\u7136\u540e\u8ddf\u521d\u59cb\u7248\u672c\u4e00\u6a21\u4e00\u6837\u3002\u8fd9\u5c31\u6ca1\u5fc5\u8981\u590d\u5236\u4e86\u561b\uff01\u6211\u4eec\u8bbe\u7248\u672c$i$\u6709\u4e00\u4e2a\u6839\u8282\u70b9$root_i$\uff08\u8868\u793a\u6574\u6bb5\u533a\u95f4\uff09\uff0c\u6839\u8282\u70b9\u6709\u5de6\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u8ba9$root_1$\u7684\u5de6\u53f3\u513f\u5b50\u6307\u5411$root_0$\u7684\u5de6\u53f3\u513f\u5b50\u5c31\u597d\u4e86\uff0c\u6839\u672c\u4e0d\u7528\u590d\u5236\u6574\u4e2a\u7ebf\u6bb5\u6811\u561b\uff01\n\n\n\u90a3\u518d\u6765\u770b\u770b\u4fee\u6539\u64cd\u4f5c\u3002\u6bd4\u5982\u4ece\u7248\u672c1~2\u30021\u548c0\u662f\u4e00\u6837\u7684\uff0c\u800c\u7248\u672c2\u4f1a\u957f\u8fd9\u6837\u2014\u2014\n\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180116172034146-50319763.png)\n\n\n\u6709\u6ca1\u6709\u53d1\u73b01\u548c2\u771f\u7684\u5f88\u50cf\uff1f\u5176\u5b9e\u4ece\u524d\u5230\u540e\u53ea\u6539\u53d8\u4e86\u4e00\u4e2a\u8282\u70b9\uff01\u90a3\u4e48\u5176\u4ed6\u76f8\u540c\u7684\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u5171\u7528\u4e00\u6bb5\u5185\u5b58\u5462\uff1f\n\n\n![](http://images2017.cnblogs.com/blog/1309909/201801/1309909-20180116174004678-1770206820.png)\n\n\u6ca1\u9519\uff0c\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u65f6\uff0c\u53ea\u8981\u65b0\u5efa$\\log_2 n$\u4e2a\u8282\u70b9,\u4e5f\u5c31\u662f\u53ea\u4fdd\u5b58\u4ece\u65b0\u7248\u672c\u7684\u6839\u8282\u70b9\u5230\u66f4\u65b0\u7684\u90a3\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u5728\u6b64\u8def\u5f84\u4e0a\u7684\u5de6/\u53f3\u513f\u5b50\u53ea\u8981\u63a5\u539f\u7248\u672c\u5bf9\u5e94\u533a\u95f4\u7684\u5bf9\u5e94\u513f\u5b50\u5c31\u53ef\u4ee5\u5566\u3002\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u4ece\u5bf9\u5e94\u7248\u672c\u7684\u6839\u8282\u70b9\u4e00\u5b9a\u80fd\u8bbf\u95ee\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u503c\u3002\n\n\n\u4e0b\u9762\u662f\u52a0\u5165\u65b0\u7248\u672c\u7684\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801(\u6211\u5199\u7684\u662f\u975e\u9012\u5f52\u7248\uff09\uff1a\n\n```cpp\n#define R register int\ninline void insert(R*t,R u,R l,R r,R k)\n//t\u662f\u5f53\u524d\u8282\u70b9\u6307\u9488\uff0cu\u662f\u539f\u7248\u672c\u5bf9\u5e94t\u7684\u8282\u70b9\uff0cl\u3001r\u4e3a\u5f53\u524d\u533a\u95f4\uff0ck\u4e3a\u4fee\u6539\u70b9\u7684\u4f4d\u7f6e\n{\n    R m;\n    while(l!=r)\n    {\n        *t=++P;//\u4e3a\u65b0\u8282\u70b9\u5206\u914d\u7a7a\u95f4\uff0cP\u662f\u4e2a\u5916\u90e8\u53d8\u91cf\n        m=(l+r)>>1;//\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u8ba1\u7b97\u533a\u95f4\u4e2d\u70b9\n        if(k<=m)r=m,rc[*t]=rc[u],t=&lc[*t],u=lc[u];\n        else  l=m+1,lc[*t]=lc[u],t=&rc[*t],u=rc[u];\n        //\u4e0a\u9762\u4e24\u884c\u5f88\u5173\u952e\u3002\uff08if\u4e00\u884c\uff09\u5982\u679ck\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u6ca1\u6709\u53d8\uff0c\u76f4\u63a5\u8fde\u5230\u65e7\u7248\u672c\u7684\u5bf9\u5e94\u53f3\u5b50\u6811\u4e0a\uff0ct\u3001u\u66f4\u65b0\u4e3a\u5f53\u524d\u5de6\u5b50\u6811\u7ee7\u7eed\u3002\uff08else\u4e00\u884c\u53cd\u4e4b\u4ea6\u7136\uff09\n    }\n    in(val[*t=++P]);//\u8bfb\u5165\u65b0\u53f6\u5b50\u8282\u70b9\u7684\u503c\n}\n```\n\u6574\u4e2a\u7a0b\u5e8f\u7684\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define R register int\nconst int N=1000009,M=20000009;\nint P,rt[N],lc[M],rc[M],val[M];\nchar I[M<<1],O[M],*fi=I,*fo=O;\nbool nega;\ninline void in(R&z)\n{\n    while(*fi<'-')++fi;\n    if(*fi=='-')nega=1,++fi;\n    z=*fi++&15;\n    while(*fi>'-')z*=10,z+=*fi++&15;\n    if(nega)nega=0,z=-z;\n}\nvoid oi(R z)\n{\n    if(z>9)oi(z/10);\n    *fo++=z%10|'0';\n}\ninline void out(R z)\n{\n    z>0?oi(z):(*fo++='-',oi(-z));*fo++='\\n';\n}//\u4e0a\u9762\u5feb\u8bfb\u5feb\u5199\nvoid build(R&t,R l,R r)//\u521d\u59cb\u5316\u5efa\u6811\uff0c\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\n{\n    R m;\n    t=++P;\n    if(l!=r)\n    {\n        m=(l+r)>>1;\n        build(lc[t],l,m);\n        build(rc[t],m+1,r);\n    }\n    else in(val[P]);\n}\ninline void insert(R*t,R u,R l,R r,R k)//\u66f4\u65b0\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u8def\u5f84\n{\n    R m;\n    while(l!=r)\n    {\n        *t=++P;\n        m=(l+r)>>1;\n        if(k<=m)r=m,rc[*t]=rc[u],t=&lc[*t],u=lc[u];\n        else  l=m+1,lc[*t]=lc[u],t=&rc[*t],u=rc[u];\n    }\n    in(val[*t=++P]);\n}\ninline int ask(R t,R l,R r,R k)//\u8be2\u95ee\n{\n    R m;\n    while(l!=r)\n    {\n        m=(l+r)>>1;\n        if(k<=m)r=m,t=lc[t];\n        else  l=m+1,t=rc[t];\n    }\n    return val[t];\n}\nint main()\n{\n    fread(I,1,sizeof(I),stdin);\n    R n,m,i,v,op,loc;\n    in(n);in(m);\n    build(rt[0],1,n);\n    for(i=1;i<=m;++i)\n    {\n        in(v);in(op);in(loc);\n        if(op&1)insert(&rt[i],rt[v],1,n,loc);\n        else\n        {\n            out(ask(rt[v],1,n,loc));\n            rt[i]=++P;//\u6ca1\u9519\uff0c\u8fd9\u91cc\u7684\u7248\u672c\u590d\u5236\u5176\u5b9e\u5f88\u7b80\u5355\n            lc[P]=lc[rt[v]];\n            rc[P]=rc[rt[v]];\n        }\n    }\n    fwrite(O,1,fo-O,stdout);\n    fclose(stdin);fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1516103976,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "~~\u9996\u5148\uff0c\u6a21\u677f\u9898\u5957\u6a21\u677f\u662f\u5e9f\u8bdd\u3002~~\n\n\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u662f\u4e0d\u662f\u8981**\u4e00\u677f\u4e00\u773c**\u5730\u8ddf\u7740\u9898\u9762\u601d\u8def\u7684\u95ee\u9898\u3002\n\n##### **\uff08\u5f53\u7136\uff0c\u8981\u662f\u6bd4\u8d5b\u7684\u8bdd\uff0c\u522b\u72b9\u8c6b\u679c\u65ad\u4f18\u5316\uff09**\n\n\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u7565\u663e233\u7684\u5c01\u88c5\uff0c**AC 100point**\uff0c\u59d1\u4e14\u6ce8\u610f\u4e00\u4e0b\u6ce8\u91ca\u3002\n\n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <stdio.h>\n    using namespace std;\n    typedef long long LL;\n    template <int n>\n    class vervec{\n    LL tree[20*n],ls[20*n],rs[20*n],hd[n],hd1[n],tt,t,nh;LL*a;\n    LL&ins(LL nod,LL l,LL r,LL x){\n        if(l==r){return tree[nod];}\n        int mid=l+r>>1;\n        if(x<=mid){tree[++tt]=tree[ls[nod]];ls[tt]=ls[ls[nod]];rs[tt]=rs[ls[nod]];\n            ls[nod]=tt;return ins(tt,l,mid,x);}\n        if(x>mid){tree[++tt]=tree[rs[nod]];ls[tt]=ls[rs[nod]];rs[tt]=rs[rs[nod]];\n            rs[nod]=tt;return ins(tt,mid+1,r,x);}\n    }\n    void chit(){LL x=hd[nh];hd[++t]=++tt;tree[tt]=tree[x];\n        ls[tt]=ls[x];rs[tt]=rs[x];nh=t;}\n        //chit\u662f\u6211\u4e71\u641e\u7684\u8bcd\uff0c\u5927\u6982\u6ca1\u6709\u5fc5\u8981\u5728\u610f\u8fd9\u4e2a\u2014\u2014(http://fanyi.baidu.com/?aldtype=85#en/zh/chit \"chit\u7ffb\u8bd1\")\n    int build(LL l,LL r){\n        LL nod=++tt;if(l==r){tree[nod]=a[l];ls[nod]=rs[nod]=0;return nod;}\n        LL mid=l+r>>1;\n        ls[nod]=build(l,mid);\n        rs[nod]=build(mid+1,r);\n        return nod;\n    }\n    void init(){tt=0;hd[nh=0]=1;build(1,n);}\n    LL query(LL nod,LL l,LL r,LL x){\n        if(l==r)return tree[nod];\n        LL mid=l+r>>1;\n        if(x<=mid)return query(ls[nod],l,mid,x);\n        else if(x>mid)return query(rs[nod],mid+1,r,x);\n    }\n```\npublic:\n```cpp\n        vervec(){tt=0;t=0;nh=1;}\n        void init(LL*x){a=x;init();}\n        void mark(LL x){hd1[x]=nh;}\n        LL&operator[](LL x){chit();return ins(hd[nh],1,n,x);}\n        LL val(LL x){return query(hd[nh],1,n,x);}\n        void rever(LL x){nh=hd1[x];}\n    };\n    vervec<1000003>b;\n    LL a[1000003],n,m,x,y,z;\n    int main(){\n        scanf(\"%lld%lld\",&n,&m);\n        for(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\n        b.init(a);\n        for(int i=1;i<=m;i++){\n            scanf(\"%lld\",&x);b.rever(x);scanf(\"%lld\",&x);\n            if(x==1){scanf(\"%lld%lld\",&y,&z);b[y]=z;}\n            else{scanf(\"%lld\",&y);printf(\"%lld\\n\",b.val(y));}\n            //\u89c2\u5bdf\u4e0a\u9762\u8fd9\u884c\uff0c\u6ca1\u6709\u7528b[y]\u7684\u5199\u6cd5\uff0c\u56e0\u4e3a\u672c\u4eba\u53ea\u8981\u5206\u4e0d\u8981\u8138\n            b.mark(i);\n        }\n        return 0;\n    }\n```\n\u8fa3\u4e48\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u867d\u7136\u663e\u5f97\u6709\u70b9\u4e0d\u6574\u6d01\uff0c\u4f46\u662f**\u4e3a\u4e86\u5206**\uff0c\u5fcd\u4e86\uff01\n`printf(\"%lld\\n\",b.val(y));`\u5982\u679c\u8fd9\u4e48\u5199`printf(\"%lld\\n\",b[y]);`\n\n\u2014\u2014\u559c\u95fb\u4e50\u89c1**80p MLE+RE**\uff0c\n\n\u56e0\u4e3a\u8fd9\u4e2a\u6a21\u677f\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u51fa\u9519\uff0c`LL&operator[](LL)`\u7528\u4e86\u6bcf\u6b21\u90fd\u52a0\u8282\u70b9\u7684\u5199\u6cd5\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u4e5f\u66f4\u65b0\u7684\u8bdd\uff0c\u7a7a\u95f4\u6709\u53ef\u80fd\u4f1a\u8d85\u8fc7\u9884\u671f\u7206\u6389\u3002\uff08\u559c\u95fb\u4e50\u89c1\n\n//\u8ba4\u4e3a\u8865\u4e00\u4e2a\u4e0d\u66f4\u65b0\u7684`LL operator[](LL)`\u5c31\u53ef\u4ee5\u517c\u987e\u7f8e\u89c2\u548cAC\u7684\u540c\u5b66\u9762\u58c1\u601d\u8fc7\uff0c\u8fd9\u5199\u6cd5\u7f16\u8bd1\u80fd\u901a\u8fc7\u7684\u8bdd\u6211\u90fd\u8981\u6c42\u8d44\u6e90\u4e86\u554a\uff01\u5f53\u7136\u4e5f\u4e0d\u662f\u6ca1\u6709\u529e\u6cd5\uff0c\u53ef\u662f\u518d\u591a\u4e00\u5806\u5224\u65ad\u548c\u8f6c\u6362\u7684\u8bdd\u8fd8\u662f\u4e0d\u7f8e\u89c2:(\u3002\n\n\u90a3\u4e48\u518d\u6765\u4e00\u4e2a\u6b63\u5e38\u5199\u6cd5\uff0c\u8fd9\u4e2a\u6a21\u677f\u5c31\u771f\u7684\u559c\u95fb\u4e50\u89c1\u4e86\uff0c\u5f53\u7136\u8fd8\u662f**AC 100p**\u3002\n\n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <stdio.h>\n    using namespace std;\n    typedef long long LL;\n    LL tree[20000003],ls[20000003],rs[20000003],hd[1000003],tt=0,nh=1;\n    LL n,m,a[1000003],x,y,z;\n    void ins(int nod,int l,int r,int x,int v){\n        if(l==r){tree[nod]=v;return;}\n        int mid=l+r>>1;\n        if(x<=mid){tree[++tt]=tree[ls[nod]];ls[tt]=ls[ls[nod]];rs[tt]=rs[ls[nod]];\n            ls[nod]=tt;ins(tt,l,mid,x,v);}\n        if(x>mid){tree[++tt]=tree[rs[nod]];ls[tt]=ls[rs[nod]];rs[tt]=rs[rs[nod]];\n            rs[nod]=tt;ins(tt,mid+1,r,x,v);}\n    }\n    void chit(int t){int x=hd[nh];hd[t]=++tt;tree[tt]=tree[x];\n        ls[tt]=ls[x];rs[tt]=rs[x];nh=t;}\n    int build(int l,int r){\n        int nod=++tt;if(l==r){tree[nod]=a[l];ls[nod]=rs[nod]=0;return nod;}\n        int mid=l+r>>1;\n        ls[nod]=build(l,mid);\n        rs[nod]=build(mid+1,r);\n        return nod;\n    }\n    void init(){tt=0;hd[nh=0]=1;build(1,n);}\n    LL query(int nod,int l,int r,int x){\n        if(l==r)return tree[nod];\n        int mid=l+r>>1;\n        if(x<=mid)return query(ls[nod],l,mid,x);\n        else if(x>mid)return query(rs[nod],mid+1,r,x);\n    }\n    int main(){\n        scanf(\"%lld%lld\",&n,&m);\n        for(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\n        init();\n        for(int i=1;i<=m;i++){\n            scanf(\"%lld\",&x);hd[i]=hd[nh=x];scanf(\"%lld\",&x);\n            if(x==1){scanf(\"%lld%lld\",&y,&z);chit(i);ins(hd[nh],1,n,y,z);}\n            else{scanf(\"%lld\",&y);printf(\"%lld\\n\",query(hd[nh],1,n,y));}\n        }\n        return 0;\n    }\n```\n\u6ce8\u91ca\u4f60\u53ef\u4ee5\u81ea\u5df1\u770b\u7740\u529e\uff0c\u6211\u4f5c\u4e3a\u5f3a\u8feb\u75c7\u4e0d\u559c\u6b22\u6ce8\u91ca\u7684\u8fdd\u548c\u611f\u3002Anyway,\u8fd9\u4e2a\u662f\u6211\u5728\u4e0d\u77e5\u9053\u53ef\u6301\u4e45\u5316\u600e\u4e48\u6253\u7684\u60c5\u51b5\u4e0b\uff0c\u5f3a\u884c\u8ba9\u7ebf\u6bb5\u6811\u91cd\u590d\u5229\u7528\u4ee5\u540e\uff0c\u5f3a\u884c3\u6b21\u91cd\u6784\u5929\u7136\uff08\u5927\u96fe\uff09\u5f62\u6210\u7684\uff0c\u60f3\u60f3\u90fd\u523a\u6fc0\u3002\n**Reinvent the Wheel**\u7684\u786e\u662f\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u53ef\u662f**\u5f3a\u8feb\u75c7**\u6ca1\u6709\u826f\u836f\u53ef\u533b\u554a\u3002\n",
        "postTime": 1513773533,
        "uid": 13925,
        "name": "yyhhenry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u633a\u6709\u8da3\u7684\u6a21\u677f\u8bf6\u3002\u3002\u3002\n\n\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u6b21\u6570\u7ec4\u7684\u7248\u672c\u5c31\u884c\u5566\n\n\u6240\u4ee5\u5148\u53bb\u628a\u4e3b\u5e2d\u6811\u7684\u6a21\u677f\u5207\u6389\u518d\u6765\u641e\u8fd9\u4e2a\u5427\u3002\n\n(\u4e3a\u4ec0\u4e48\u8be2\u95ee\u4e5f\u7b97\u4e00\u4e2a\u7248\u672c\u3002\u3002\u3002\u3002)\n\n\u8be2\u95ee\u521b\u5efa\u65b0\u7248\u672c\u53ea\u8981\u76f4\u63a5\u590d\u5236\u4e00\u4e0b\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define MAX 1000100\ninline int read()\n{\n    register int x=0,t=1;\n    register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-'){t=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n    return x*t;\n}\nint root[MAX],a[MAX],N,M;\nstruct Node\n{\n    int l,r;\n    int ls,rs;\n    int val;\n}t[MAX*20];\nint sum=0,tot=1;\nvoid Build(int now,int l,int r)\n{\n    t[now].l=l;t[now].r=r;\n    if(l==r){t[now].val=a[l];return;}\n    t[now].ls=++tot;\n    int mid=(l+r)>>1;\n    Build(tot,l,mid);\n    t[now].rs=++tot;\n    Build(tot,mid+1,r);\n}\nvoid AddNode(int now,int New,int k,int w)\n{\n    t[New]=t[now];\n    if(t[now].l==t[now].r)\n    {\n            t[New].val=w;\n        return;\n    }\n    int mid=(t[now].l+t[now].r)>>1;\n    if(k<=mid)\n    {\n        t[New].ls=++tot;\n        AddNode(t[now].ls,tot,k,w);\n    }\n    else\n    {\n        t[New].rs=++tot;\n        AddNode(t[now].rs,tot,k,w);\n    }\n}\nvoid Query(int now,int k)\n{\n    if(t[now].l==t[now].r)\n    {\n        printf(\"%d\\n\",t[now].val);\n        return;\n    }\n    int mid=(t[now].l+t[now].r)>>1;\n    if(k<=mid)Query(t[now].ls,k);\n    else Query(t[now].rs,k);\n}\nint main()\n{\n    N=read();M=read();\n    for(int i=1;i<=N;++i)a[i]=read();\n    Build(1,1,N);\n    root[0]=1;\n    while(M--)\n    {\n        int v=read(),opt=read();\n        if(opt==1)\n        {\n            int vv=read(),ww=read();\n            AddNode(root[v],root[++sum]=++tot,vv,ww);\n        }\n        else\n        {\n            int vv=read();\n            Query(root[v],vv);\n            root[++sum]=root[v];\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1506944197,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u4e3b\u5e2d\u6811/\u7ebf\u6bb5\u6811\u662f\u4e8c\u53c9\u7684\uff0c\u8fd9\u6837\u5728\u5404\u79cd\u533a\u95f4\u64cd\u4f5c\u7684\u65f6\u5019\u90fd\u5f88\u65b9\u4fbf\u3002\u4f46\u662f\u8fd9\u9053\u9898\u91cc\u5e76\u6ca1\u6709\u4efb\u4f55\u533a\u95f4\u64cd\u4f5c\uff0c\u5176\u5b9e\u53ef\u4ee5\u8bbe\u60f3\u4e00\u79cd\u591a\u53c9\u7684\u4e3b\u5e2d\u6811\uff0c\u67e5\u8be2\u548c\u4fee\u6539\u7684\u539f\u7406\u90fd\u4e0e\u4e4b\u524d\u5b8c\u5168\u4e00\u6837\u3002\u8fd9\u91cc\u53d6\u4e8616\u53c9\uff0c\u6700\u591a5\u6b21\u8bbf\u95ee\u5185\u5b58\u5c31\u53ef\u4ee5\u5f97\u5230\u503c\uff0c\u5e38\u6570\u6bd4\u666e\u901a\u7684\u4e3b\u5e2d\u6811\u8981\u5c0f\u4e0d\u5c11\u3002\n\n\u4e3a\u4e86\u907f\u514d\u6bd4\u8f83\u7e41\u7410\u7684\u8fb9\u754c\u8ba8\u8bba\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u4e0d\u591f16\u7684\u5e42\u6b21\u7684\u90e8\u5206\u88650\u3002\u8fd9\u91cc\u6211\u662f\u76f4\u63a5\u8865\u5230\u4e861<<20\u3002\u8fd9\u6837\u65e2\u7136\u6570\u5b57\u5168\u90e8\u786e\u5b9a\u4e86\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u7528\u6a21\u677f\u6765\u4f20\u9012\u8fd9\u4e2a\u6570\u5b57\u3002\u5f53\u7136\uff0c\u7528\u4e0d\u7528\u6a21\u677f\u662f\u4e2a\u4eba\u559c\u597d\uff0c\u7528\u6a21\u677f\u5e38\u6570\u4f1a\u5c0f\u4e00\u70b9\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u5b9e\u8d28\u53d8\u5316\u3002\n\n636ms\uff0c\u5e94\u8be5\u5728\u771f\u6b63\u5b9e\u73b0\u4e86\u201c\u53ef\u6301\u4e45\u5316\u6811\u7ec4\u201d\u7684\u63d0\u4ea4\u91cc\u8dd1\u7684\u662f\u6700\u5feb\u7684\uff0c\u751a\u81f3\u4e5f\u8d85\u8fc7\u4e86\u4e00\u4e9b\u5e38\u6570\u6bd4\u8f83\u5927~~(io\u4f18\u5316\u4e0d\u8db3)~~\u7684\u5efa\u6811+dfs\u3002\n\n```cpp\n#include <cstdio>\n\nconst int N = 1 << 20;\n\nstruct IO\n{\n\tchar p[1 << 25], *s, e[1 << 25], *t;\n\n\tIO() : s(p), t(e)\n\t{ fread(s, 1, sizeof p, stdin); }\n\n\t~IO()\n\t{ fwrite(e, 1, t - e, stdout); }\n\n\toperator int()\n\t{\n\t\tunsigned v = 0, j = 0;\n\t\twhile (*s < '0')\n\t\t\tj = *s++ == '-';\n\t\tdo\n\t\t\tv = v * 10 + *s++ - '0';\n\t\twhile (*s > ' ');\n\t\treturn j ? -v : v;\n\t}\n\n\tvoid print(unsigned v)\n\t{\n\t\tchar a[16], *q = a;\n\t\tif (!v)\n\t\t\t*t++ = '0';\n\t\telse\n\t\t{\n\t\t\tif (v & 0x80000000)\n\t\t\t\t*t++ = '-', v = -v;\n\t\t\twhile (v)\n\t\t\t\t*q++ = v % 10 + '0', v /= 10;\n\t\t\twhile (q != a)\n\t\t\t\t*t++ = *--q;\n\t\t}\n\t\t*t++ = '\\n';\n\t}\n} io;\n\nnamespace array\n{\n\ttypedef int T;\n\tconst int block = 16;\n\tunion\n\t{\n\t\tT val[block];\n\t\tint ch[block];\n\t} buf[N * 6];\n\tint root[N], buf_sz, remain;\n\n\ttemplate<int Len = N>\n\tvoid build(int &rt)\n\t{\n\t\trt = ++buf_sz;\n\t\tfor (int i = 0; i < block; ++i)\n\t\t\tbuild<Len / block>(buf[rt].ch[i]);\n\t}\n\n\ttemplate<>\n\tvoid build<block>(int &rt)\n\t{\n\t\trt = ++buf_sz;\n\t\tfor (int i = 0; i < block && remain; ++i, --remain)\n\t\t\tbuf[rt].val[i] = io;\n\t}\n\n\ttemplate<int Len = N>\n\tint get(int rt, int pos)\n\t{\n\t\tconstexpr int ch_block = Len / block;\n\t\tint which = pos / ch_block;\n\t\treturn get<ch_block>(buf[rt].ch[which], pos - which * ch_block);\n\t}\n\n\ttemplate<>\n\tint get<block>(int rt, int pos)\n\t{ return buf[rt].val[pos]; }\n\n\ttemplate<int Len = N>\n\tint modify(int rt, int pos, int val)\n\t{\n\t\tconstexpr int ch_block = Len / block;\n\t\tint ret = ++buf_sz, which = pos / ch_block;\n\t\tbuf[ret] = buf[rt];\n\t\tbuf[ret].ch[which] = modify<Len / block>(buf[rt].ch[which], pos - which * ch_block, val);\n\t\treturn ret;\n\t}\n\n\ttemplate<>\n\tint modify<block>(int rt, int pos, int val)\n\t{\n\t\tint ret = ++buf_sz;\n\t\tbuf[ret] = buf[rt];\n\t\tbuf[ret].val[pos] = val;\n\t\treturn ret;\n\t}\n} // namespace array\n\nint main()\n{\n\tusing namespace array;\n\tint n = io, m = io;\n\tremain = n;\n\tbuild(root[0]);\n\tfor (int i = 1, v, op, pos; i <= m; ++i)\n\t{\n\t\tv = io, op = io, pos = io - 1;\n\t\tif (op == 1)\n\t\t\troot[i] = modify(root[v], pos, io);\n\t\telse\n\t\t\tio.print(get(root[i] = root[v], pos));\n\t}\n}\n\n```",
        "postTime": 1533026574,
        "uid": 68618,
        "name": "MashPlant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "# luogu3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\n\n## ps.\n\u9274\u4e8e\u8981\u52a0\u6df1\u4e00\u4e0b\u53ef\u6301\u4e45\u5316\u7684\u7406\u89e3\uff08\u4ee5\u53ca\u5e2e\u52a9\u4ed6\u4eba\u66f4\u597d\u7684\u7406\u89e3\n\n\u518d\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u5427QAQ.\n\n\n## \u9898\u610f\uff1a\n\n~~\u6807\u9898\u5373\u9898\u610f\uff08\u96fe~~\n\n\n\u597d\u4e86\u7b80\u5355\u8bf4\u4e00\u4e0b\u5427\u3002\n\n\u4f60\u9700\u8981\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a$N$\u7684\u6570\u7ec4\uff0c\u652f\u6301\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\n\n1. \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\n\n2. \u8bbf\u95ee\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u7684\u67d0\u4e00\u4f4d\u7f6e\u7684\u503c\n\n\n## \u505a\u6cd5\uff1a\n\n\u9996\u5148\u6211\u4eec\u6487\u5f00\u533a\u95f4\u7b2ck\u5c0f\uff0c\u518d\u6765\u7406\u89e3\u4e00\u4e0b\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u610f\u601d\u3002\n\n**\u901a\u4fd7\u7406\u89e3\uff1a**\u5f88\u591a\u4e2a\u7ebf\u6bb5\u6811\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u5efa\u7acb\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u6811i\u90fd\u548c\u4e4b\u524d\u7684\u67d0\u4e2a\u6709\u4e00\u5b9a\u8054\u7cfb\uff0c\u9700\u8981\u62f7\u8d1d\u4e00\u4e9b\u4e4b\u524d\u7684\u4fe1\u606f\u3002\n\n\u6bd4\u5982\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n>\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\uff1a\n>1. \u5355\u70b9\u52a0\n>2. \u8be2\u95ee\u533a\u95f4\u548c\n>3. \u56de\u5230\u4e4b\u524d\u67d0\u4e2a\u5386\u53f2\u72b6\u6001\n\n\u5176\u4e2d\u7b2c\u4e09\u70b9\u5c31\u662f\u7ecf\u5178\u7684\u53ef\u6301\u4e45\u5316\u5e94\u7528\u3002\n\n\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u6bcf\u4e2a\u72b6\u6001\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u62f7\u8d1d\u4e4b\u524d\u4e00\u68f5\u6811\u7684\u4fe1\u606f\uff0c\u5e76\u4fee\u6539\u76f8\u5173\u4fe1\u606f\u3002\n\n\u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u7a7a\u95f4\u4e0d\u591f\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u820d\u5f03\u5197\u4f59\u72b6\u6001\uff0c\u6bcf\u6b21\u53ea\u62f7\u8d1d\u9700\u8981\u4fee\u6539\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u6b21\u53ea\u65b0\u5efalog\u7ea7\u522b\u7684\u70b9\u3002\n\n\n\u7136\u540e\u8003\u8651\u8fd9\u4e2a\u9898\uff0c\u53d1\u73b0\u662f\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7684\u5f31\u5316\u7248\uff08\u5927\u96fe\n\n\u53ea\u8981\u628a\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u6539\u6210\u5355\u70b9\u4fee\u6539+\u5355\u70b9\u67e5\u8be2\u5373\u53ef\u3002\n\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cctype>\n#include<cstdlib>\n#include<cmath>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\n\ninline ll read() {\n    char ch = getchar(); ll x = 0; int op = 1;\n    for(; !isdigit(ch); ch = getchar()) if(ch == '-') op = -1;\n    for(; isdigit(ch); ch = getchar()) x = x*10+ch-'0';\n    return x*op;\n}\ninline void write(ll a) {\n    if(a < 0) putchar('-'), a = -a;\n    if(a >= 10) write(a/10); putchar('0'+a%10);\n}\n\nconst int N = 1000010, M = 20000010;\nint n, m, tot;\nint a[N], rt[N], ls[M], rs[M], v[M];\n\ninline void build(int &nk, int l, int r) {\n    nk = ++ tot;\n    if(l == r) { v[nk] = a[l]; return; }\n    int mid = l+r>>1;\n    build(ls[nk], l, mid); build(rs[nk], mid+1, r);\n}\ninline void update(int k, int &nk, int l, int r, int x, int y) {\n    nk = ++ tot; ls[nk] = ls[k]; rs[nk] = rs[k]; v[nk] = v[k];\n    if(l == r) { v[nk] = y; return; }\n    int mid = l+r>>1;\n    if(x <= mid) update(ls[k], ls[nk], l, mid, x, y);\n    else update(rs[k], rs[nk], mid+1, r, x, y);\n}\ninline int query(int nk, int l, int r, int x) {\n    if(l == r) return v[nk];\n    int mid = l+r>>1;\n    if(x <= mid) return query(ls[nk], l, mid, x);\n    else return query(rs[nk], mid+1, r, x);\n}\nint main() {\n    n = read(), m = read();\n    for(int i = 1; i <= n; i ++) a[i] = read();\n    build(rt[0], 1, n);\n    for(int i = 1; i <= m; i ++) {\n        int t = read(), opt = read(), x = read(), y;\n        rt[i] = rt[t];\n        if(opt == 1) {\n            y = read(); update(rt[i], rt[i], 1, n, x, y);\n        } else write(query(rt[t], 1, n, x)), puts(\"\");\n    } return 0;\n}\n```\n\n## \u62d3\u5c55\u7406\u89e3\n\n\u522b\u6025\uff0c\u8fd8\u6ca1\u7ed3\u675f\u3002\u3002\u3002\n\n\u6211\u4eec\u518d\u6765\u7406\u89e3\u4e00\u4e0b**\u533a\u95f4\u7b2ck\u5c0f**\u7684\u4e3b\u5e2d\u6811\u64cd\u4f5c\u5427\u3002\n\n\u4ecd\u7136\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u548c\u4e0a\u9762\u4e24\u79cd\u4f8b\u5b50\u90fd\u662f\u4e0d\u592a\u76f8\u4f3c\u7684\u3002\n\n\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2ck\u5c0f\uff0c\u6211\u4eec\u9700\u8981\u5efa\u7acb\u7684\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u9700\u8981\u5148\u79bb\u6563\u5316\u3002\n\n\u5728\u539f\u5e8f\u5217\u4e0a\u5efa\u7acb\u4e3b\u5e2d\u6811\uff0c\u6bcf\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811i\uff0c\u62f7\u8d1d\u7b2ci-1\u68f5\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\uff0c\u5e76\u5728\u4e0a\u9762\u4fee\u6539\uff08$a_i$\u7684\u6743\u503c\u8282\u70b9\u4e0a+1\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u4e3b\u5e2d\u6811\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7$sum_r-sum_{l-1}$\u5feb\u901f\u5730\u5f97\u5230\u67d0\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u6743\u503c\u8303\u56f4\uff0c\u5728\u533a\u95f4[l,r]\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4ece\u800c\u6765\u5b8c\u6210\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\n\u6240\u4ee5\uff0c\u867d\u8bf4\u90fd\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u8fd8\u662f\u6709\u6bd4\u8f83\u5927\u7684\u533a\u522b\u7684\u3002\n\n\u7279\u522b\u6ce8\u610f\u4e0d\u8981\u628a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7406\u89e3\u4e3a\u5c31\u7b49\u4e8e\u6743\u503c\u7ebf\u6bb5\u6811~~~\n\n\n\n\\_the end\\_\n\nby bestFy 2018.1\n",
        "postTime": 1517123710,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u9898\u76ee\u53ea\u8981\u6c42\u5355\u70b9\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u5386\u53f2\u7248\u672c\u2026\u2026\u6240\u4ee5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u8fd8\u633a\u597d\u5199~~\u867d\u7136WA\u4e86n\u6b21~~\u2026\u2026\u2026\u2026\u6ce8\u610f\u4e4b\u524d\u6211~~\u56e0\u4e3a\u61d2~~\u6ca1\u6709\u628a\u65b0\u5efa\u8282\u70b9\u4f20\u8fdb\u8fc7\u7a0b\u91cc\u9762\u2026\u2026\u7ed3\u679c\u6808\u7a7a\u95f4\u6ea2\u51fa\u4ea4\u4e0a\u53bb\u5168MLE\u2026\u2026\u8fd9\u91cc\u63d0\u9192\u4e00\u53e5\n\n~~\u6ca1\u4eba\u4f1a\u72af\u6211\u8fd9\u79cd\u849f\u84bb\u624d\u72af\u7684\u9519\u8bef\u4e86\u5427~~\n\n\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u589e\u52a0logn\u4e2a\u8282\u70b9\uff0c\u6700\u5927\u4fee\u6539\u6b21\u6570\u662f1000000\u6b21\n\nn\u6700\u5927\u4e5f\u662f1000000\uff0clogn\u5927\u6982\u662f20\uff0c\u6240\u4ee5\u5f0020\u500dn\u591a\u4e00\u70b9\u7684\u6570\u7ec4\u6bd4\u8f83\u7a33\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <climits>\nusing namespace std;\nconst int maxn=1000005;\nstruct Node\n{\n    int sum,lch,rch;\n}tree[maxn*20];\nint rt[maxn],tot,curver,n,m;\ninline void init() { tot=0; curver=0; }\ninline void up(int p) { tree[p].sum=tree[tree[p].lch].sum+tree[tree[p].rch].sum; }\ninline int read()\n{\n    int f=1,x=0; char ch;\n    do { ch=getchar(); if(ch=='-') f=-1; } while(ch<'0'||ch>'9');\n    do { x=x*10+ch-'0'; ch=getchar(); } while(ch>='0'&&ch<='9');\n    return f*x;\n}\nint build(int l,int r,int cp)\n{\n    tree[cp].sum=0; tree[cp].lch=-1; tree[cp].rch=-1;\n    if (l==r) { tree[cp].sum=read(); return cp; }\n    int m=l+r>>1;\n    tree[cp].lch=build(l,m,tot++); tree[cp].rch=build(m+1,r,tot++);\n    up(cp);\n    return cp;\n}\nint update(int p,int l,int r,int x,int k,int cp)\n{\n    tree[cp].sum=0; tree[cp].lch=tree[p].lch; tree[cp].rch=tree[p].rch;\n    if (l==r) { tree[cp].sum=k; return cp; }\n    int m=l+r>>1;\n    if (x<=m) tree[cp].lch=update(tree[p].lch,l,m,x,k,tot++); else tree[cp].rch=update(tree[p].rch,m+1,r,x,k,tot++);\n    up(cp);\n    return cp;\n}\nint query(int p,int l,int r,int x)\n{\n    if (l==r) return tree[p].sum;\n    int m=l+r>>1;\n    if (x<=m) return query(tree[p].lch,l,m,x); else return query(tree[p].rch,m+1,r,x);\n}\nint main()\n{\n    int v,c,s,k;\n    n=read(); m=read();\n    init();\n    rt[curver]=build(1,n,tot++);\n    for (int i=1;i<=m;i++)\n    {\n        v=read(); c=read(); s=read();\n        if (c==1)\n        {\n            k=read();\n            rt[++curver]=update(rt[v],1,n,s,k,tot++);\n        }\n        else if (c==2)\n        {\n            rt[++curver]=rt[v];\n            printf(\"%d\\n\",query(rt[v],1,n,s));\n        }\n    }\n    return 0;\n}\n```cpp",
        "postTime": 1513000765,
        "uid": 33509,
        "name": "Broadway",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811\uff08\u6216\u5e73\u8861\u6811\uff09\u6a21\u677f\u9898\u3002\n\n\u867d\u7136\u5982\u6b64\uff0c\u4f46\u6211\u5e76\u4e0d\u4f1a\u6253\u5e73\u8861\u6811\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4f1a\u6253\u7684\uff0c\u8bf7\u4e5f\u4f20\u4e00\u4efd\u9898\u89e3\u4e0a\u6765\u3002\n\n\u6240\u4ee5\u6211\u9009\u62e9\u7684\u662f\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811\u3002\u53ef\u6301\u7eed\u5316\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u7248\u672c\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5f3a\u5236\u67e5\u8be2\u3002\u4f46\u662f\u76f4\u63a5\u5efa\u7acb\u4f1a\u5bfc\u81f4MLE\u548cTLE\uff0c\u6240\u4ee5\u6bcf\u4e00\u68f5\u6811\u90fd\u8981\u5411\u524d\u9762\u7684\u6811\u201c\u501f\u70b9\u201d\u3002\u5177\u4f53\u601d\u60f3\u662f\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u6ca1\u6539\u7684\u70b9\u4e0d\u4f1a\u6539\u53d8\uff0c\u4e8e\u662f\u4e0e\u6539\u4e4b\u524d\u7684\u6811\u7684\u70b9\u5b8c\u5168\u76f8\u540c\uff0c\u4fbf\u4e0d\u9700\u8981\u91cd\u65b0\u5efa\u70b9\u4e86\u3002\u6bd4\u5982\u6539\u7684\u70b9\u5728\u6811\u7684\u5de6\u534a\u533a\u95f4\uff0c\u90a3\u4e48\u73b0\u5728\u7248\u672c\u7684\u53f3\u534a\u533a\u95f4\u548c\u539f\u7248\u672c\u7684\u53f3\u534a\u533a\u95f4\u76f8\u540c\uff0c\u76f4\u63a5\u5c06\u73b0\u7248\u672c\u7684\u53f3\u513f\u5b50\u6807\u8bb0\u6210\u539f\u7248\u672c\u7684\u53f3\u513f\u5b50\uff0c\u5728\u9012\u5f52\u89e3\u51b3\u5de6\u534a\u533a\u95f4\u3002\u540c\u65f6\u6ce8\u610f\u5230\u67e5\u8be2\u64cd\u4f5c\u5e76\u6ca1\u6709\u66f4\u6539\u533a\u95f4\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u5c06\u4ed6\u4e0e\u4ed6\u7684\u5386\u53f2\u7248\u672c\u5408\u5e76\u3002\u8fd9\u6837\u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u4e3a((n+m)logn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u51cf\u4e3a((n+q)logn)(q\u662f\u4fee\u6539\u6b21\u6570)\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\nusing namespace std;\nconst int MAXN=1000010;\ntemplate<typename T>\ninline void read(T &x)//\u8bfb\u5165\u4f18\u5316\n{\n    T s=0,f=1;\n    char k=getchar();\n    while(!isdigit(k)&&k!='-')k=getchar();\n    if(!isdigit(k))\n    {\n        f=-1;\n        k=getchar();\n    }\n    while(isdigit(k))\n    {\n        s=(s<<3)+(s<<1)+(k^48);\n        k=getchar();\n    }\n    x=s*f;\n}\nint n,m,t,head[MAXN];//head\u6570\u7ec4\u8bb0\u5f55\u6bcf\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u4e0b\u6807\nstruct tree//\u8fd9\u662f\u4e00\u4e2a\u68ee\u6797\n{\n    int v,l,r;\n}p[MAXN<<5];\nvoid make_tree(int h,int l,int r)//\u5efa\u6811\n{\n    if(l==r)\n    {\n        read(p[h].v);\n        return;\n    }\n    int mid=(l+r)>>1;\n    make_tree(p[h].l=++t,l,mid);\n    make_tree(p[h].r=++t,mid+1,r);\n}\nint f[MAXN];//\u5e76\u67e5\u96c6\uff0c\u4f18\u5316\u7a7a\u95f4\u7684\nint find(int x)//\u5e76\u67e5\u96c6\u67e5\u627e\n{\n    int t=f[x],d;\n    while(t!=f[t])t=f[t];\n    while(f[x]!=t)\n    {\n        d=f[x];\n        f[x]=t;\n        x=d;\n    }\n    return t;\n}\nvoid change(int last,int now,int l,int r,int pos,int ch)//\u4fee\u6539\n{\n    if(l==r)//\u627e\u5230\u4e86\u5c31\u76f4\u63a5\u6539\n    {\n        p[now].v=ch;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid)//\u5982\u679c\u5728\u5de6\u534a\u533a\u95f4\uff0c\u5219\u53f3\u534a\u533a\u95f4\u7b49\u4e8e\u5386\u53f2\u7248\u672c\u53f3\u534a\u533a\u95f4\uff0c\u9012\u5f52\u89e3\u51b3\u5de6\u534a\u533a\u95f4\n    {\n        p[now].r=p[last].r;\n        change(p[last].l,p[now].l=++t,l,mid,pos,ch);\n    }\n    else//\u53f3\u534a\u540c\u4e0a\n    {\n        p[now].l=p[last].l;\n        change(p[last].r,p[now].r=++t,mid+1,r,pos,ch);\n    }\n}\nint search(int h,int l,int r,int pos)//\u67e5\u8be2\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\n{\n    if(l==r)return p[h].v;\n    int mid=(l+r)>>1;\n    if(pos<=mid)return search(p[h].l,l,mid,pos);\n    return search(p[h].r,mid+1,r,pos);\n}\nint main()\n{\n    read(n);\n    read(m);\n    make_tree(head[0]=++t,1,n);\n    int i,v,x,y,opt;\n    For(i,1,m)\n    {\n        read(v);\n        v=find(v);\n        read(opt);\n        read(x);\n        if(opt==1)\n        {\n            read(y);\n            change(head[v],head[i]=++t,1,n,x,y);\n            f[i]=i;//\u4fee\u6539\u64cd\u4f5c\u65e0\u6cd5\u5f52\u5230\u5176\u4ed6\u5e76\u67e5\u96c6\u91cc\uff0c\u6240\u4ee5\u4ed6\u81ea\u5df1\u6210\u4e3a\u4e00\u4e2a\u5e76\u67e5\u96c6\n        }\n        else\n        {\n            printf(\"%d\\n\",search(head[v],1,n,x));\n            f[i]=v;//\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1502849798,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "# $0.$ \u524d\u8a00\n~~\u51fa\u9898\u51fa\u6302\u4e86\uff0c\u6765\u597d\u597d\u5b66\u4e3b\u5e2d\u6811\u4e86~~\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n\u7ebf\u6bb5\u6811\n\n\u6ca1\u4e86\n\n# $1.$ \u7b80\u4ecb\n\n\u5bf9\u4e8e\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u8f83\u597d\u5730\u89e3\u51b3\u201c\u5e26\u4fee\u6539\u7684\u5168\u5c40\u7b2ck\u5927\uff08\u6216\u5c0f\uff09\u95ee\u9898\u201d\u3002\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e2a\u533a\u95f4\u8fdb\u884c\u6c42\u7b2ck\u5927\uff08\u6216\u5c0f\uff09\u64cd\u4f5c\u5c31\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u4e86\u3002\n\n## $1.1$ \u201c\u53ef\u6301\u4e45\u5316\u201d\n\n\u53ef\u6301\u4e45\u5316\u4e00\u8bcd\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u5341\u5206\u5e38\u89c1\u3002\u201c\u53ef\u6301\u4e45\u5316\u201d\u7684\u610f\u601d\u5c31\u662f\u201c\u5e26\u6709\u5386\u53f2\u7248\u672c\u7684\u201d\u6570\u636e\u7ed3\u6784\u3002\u800c\u5728\u6211\u4eec\u6240\u63a5\u89e6\u5230\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e2d\uff08\u5982\u6570\u7ec4\u3001\u5e76\u67e5\u96c6\u3001\u5e73\u8861\u6811\u7b49\uff09\u90fd\u6709\u5404\u81ea\u7684\u53ef\u6301\u4e45\u5316\u7248\u672c\u3002\n\n## $1.2$ \u4e3b\u5e2d\u6811\u7684\u5f15\u51fa\n\n\u4e3b\u5e2d\u6811\uff0c\u53c8\u540d **\u201c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u201d**\u3002~~\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53eb\u201c\u4e3b\u5e2d\u6811\u201d\u6211\u4e5f\u4e0d\u662f\u7279\u522b\u660e\u767d~~\u3002\u5176\u57fa\u672c\u72b6\u6001\u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u5386\u53f2\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u3002\n\n## $1.3$ \u6a21\u677f\u9898\n\n [P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09](https://www.luogu.com.cn/problem/P3834)\n\n>## \u9898\u76ee\u80cc\u666f\n>\n>\u8fd9\u662f\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u5165\u95e8\u9898\u2014\u2014\u9759\u6001\u533a\u95f4\u7b2c $k$ \u5c0f\n>\n>## \u9898\u76ee\u63cf\u8ff0\n>\n>\u5982\u9898\uff0c\u7ed9\u5b9a $n$ \u4e2a\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\uff0c\u5c06\u5bf9\u4e8e\u6307\u5b9a\u7684\u95ed\u533a\u95f4\u67e5\u8be2\u5176\u533a\u95f4\u5185\u7684\u7b2c $k$ \u5c0f\u503c\u3002\n\n>## \u8f93\u5165\u683c\u5f0f\n>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $n,m$\uff0c\u5206\u522b\u8868\u793a\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u67e5\u8be2\u7684\u4e2a\u6570\u3002\n\n>\u7b2c\u4e8c\u884c\u5305\u542b $n$ \u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u5404\u9879\u7684\u6570\u5b57\u3002\n\n>\u63a5\u4e0b\u6765 mm \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 $l,r,k$ , \u8868\u793a\u67e5\u8be2\u533a\u95f4 $[l,r]$ \u5185\u7684\u7b2c $k$ \u5c0f\u503c\u3002\n\n>## \u8f93\u51fa\u683c\u5f0f\n\n>\u8f93\u51fa\u5305\u542b $m$ \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u4e00\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\n\n# $2.$ \u4e3b\u5e2d\u6811\n\n## $2.1$ \u6734\u7d20\u601d\u60f3\n\n\u6839\u636e\u4e0a\u6587\u6240\u8bf4\uff0c\u4e3b\u5e2d\u6811\u5c31\u662f\u5e26\u6709\u5386\u53f2\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u3002\u5982\u679c\u8981\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u6700\u666e\u901a\u7684\u601d\u60f3\u5c31\u662f\u5efa\u7acb\u591a\u4e2a\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\uff0c\u5e76\u5728\u5176\u4e0a\u9762\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u4f46\u662f\u5f88\u660e\u663e\u8fd9\u4e2a\u65b9\u6848\u662f\u4e0d\u53ef\u884c\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5728 $O(nlogn)$ \u7ea7\u522b\u4e0a\u7684\u7b97\u6cd5\u6765\u8bf4\uff0c\u6570\u636e\u901a\u5e38\u5728 $10^5 - 10^6$\u3002\u5982\u679c\u7ef4\u62a4\u7684\u5386\u53f2\u7248\u672c\u8fc7\u591a\uff0c\u4f1a\u5bfc\u81f4\u7a7a\u95f4\u590d\u6742\u8bfb\u8fc7\u5927(\u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u7684\u7a7a\u95f4\u90fd\u5728 $n<<2$ \u5373 $n*4$ \u7684\u7ea7\u522b\u4e0a)\u3002\n\n## $2.2$ \u6b63\u89e3\n\n\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u51e0\u4e4e\u6ca1\u6709\u5bf9\u5168\u5c40\u6240\u6709\u8282\u70b9\u7684\u4fee\u6539\u3002\u6240\u4ee5\u5728\u8fdb\u884c\u4fee\u6539\u65f6\u6211\u4eec\u53ea\u9700\u8981\u5c06\u88ab\u4fee\u6539\u7684\u70b9\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u201c\u5b58\u6863\u201d\u5c31\u53ef\u4ee5\u5b8c\u6210\u4fee\u6539\u3002\n\n\u4e00\u822c\u7684\u6211\u4eec\u53ea\u9700\u8981\u65b0\u5efa\u4ece\u6839\u5f00\u59cb\u5411\u4e0b\u7ecf\u8fc7\u7684\u6bcf\u4e00\u4e2a\u70b9\u5c31\u884c\u4e86\u3002\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\n\n\n\n## $2.3$ \u6a21\u677f\u9898\u89e3\u51b3\u601d\u8def\n\n\u6a21\u677f\u9898\u8981\u6c42\u67e5\u8be2\u533a\u95f4\u5185\u7b2ck\u5c0f\u3002\u6839\u636e\u4ee5\u5f80\u7ecf\u9a8c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8fd0\u7528\u201c\u6743\u503c\u7ebf\u6bb5\u6811\u201d\u89e3\u51b3\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u89e3\u51b3\u95ee\u9898\uff0c\u5373\u7528 $ [1,l-1] $ \u4e2d\u7684\u6570\u636e\u4e0e $[1,r]$ \u4e2d\u7684\u6570\u636e\u505a\u5dee\u5f97\u51fa\u533a\u95f4\u5185\u7684\u201c\u6743\u503c\u7ebf\u6bb5\u6811\u201d\uff08\u800c\u4e0d\u7528\u4ee5\u7206\u70b8\u7684\u590d\u6742\u5ea6\u4e3a\u6bcf\u6b21\u8be2\u95ee\u5efa\u6811\uff09\n\n## $2.3$ \u4ee3\u7801\u5b9e\u73b0\uff08\u4ee5\u6a21\u677f\u9898\u4e3a\u4f8b\uff09\n\n### \u4e3b\u5e2d\u6811\u7684\u5efa\u7acb\n\n\u5bf9\u4e8e\u4e3b\u5e2d\u6811\u6211\u4eec\u5e76\u4e0d\u80fd\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u901a\u8fc7\u516c\u5f0f\uff08$ls=now<<1,\\ rs=now<<1|1$\uff09\u8ba1\u7b97\u51fa\u5176\u5de6\u53f3\u513f\u5b50\u7684\u4e0b\u6807\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u9700\u8981\u5efa\u7acb\u8d77\u6570\u7ec4\uff08\u6216\u7ed3\u6784\u4f53\u89e3\u51b3\uff09\u8bb0\u5f55\u8282\u70b9\u4fe1\u606f\n\n```cpp\nconst int N=2e5+15;\nint rt[N],ls[N<<5],rs[N<<5],sum[N<<5],tot;\n```\n\n\u7136\u540e\u5c31\u662f\u5efa\u6811\u4e86\u3002\n\n\u5efa\u6811\u7684\u65f6\u5019\u5bf9\u4e8e\u6a21\u677f\u9898\u6211\u4eec\u9700\u8981\u5148\u5efa\u4e00\u4e2a\u7a7a\u7684\u6811\uff0c\u4f5c\u4e3a\u4ee5\u540e\u4fee\u6539\u7684\u57fa\u51c6\u70b9\u3002\n\n```cpp\nvoid build(int &o,int l,int r){\n\to=++tot;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(ls[o],l,mid);\n\tbuild(rs[o],mid+1,r);\n}\n```\n~~\uff08\u771f\u7684\u548c\u7ebf\u6bb5\u6811\u5efa\u6811\u4e00\u6a21\u4e00\u6837\u5462\uff08\u5927\u96fe\uff09\uff09~~\n\n### \u4fee\u6539\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u9897\u6811\uff0c\u5982\u679c\u60f3\u8981\u4ece\u6839\u8bbf\u95ee\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u7ecf\u8fc7\u4e00\u6761\u94fe\u3002\u7531\u4e8e\u5728\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u4e2d\uff0c\u6211\u4eec\u7ecf\u8fc7\u94fe\u4e0a\u7684\u70b9\u90fd\u9700\u8981\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u589e\u52a0\u8fd9\u4e00\u6761\u94fe\u7684\u526f\u672c\u5373\u53ef\u3002\n\n```cpp\n\t\ninline int modify(int o,int l,int r,int p){\n\tint oo=++tot;\n\tls[oo]=ls[o],rs[oo]=rs[o],sum[oo]=sum[o]+1;\n\tif(l==r) return oo;\n\tint mid=(l+r)>>1;\n\tif(p<=mid) ls[oo]=modify(ls[oo],l,mid,p);\n\telse rs[oo]=modify(rs[oo],mid+1,r,p);\n\treturn oo;\n}\n\n```\n\n### \u6a21\u677f\u9898\u7684\u67e5\u8be2\n\n\u6a21\u677f\u9898\u7684\u67e5\u8be2\u548c\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u76f8\u540c\u3002\u5728\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u60f3\u8c61\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u4ee5 $rt[r]$ \u4e3a\u6839\u7684\u7ebf\u6bb5\u6811\u76f8\u5e94\u8282\u70b9\u7684\u503c\u51cf\u53bb $rt[l-1]$ \u4e3a\u6839\u7684\u7ebf\u6bb5\u6811\u76f8\u5e94\u8282\u70b9\u7684\u503c\uff08\u53ef\u4ee5\u7c7b\u6bd4\u524d\u7f00\u5408\u7406\u89e3\uff09\n\n\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u8fd0\u7528\u5df2\u6709\u77e5\u8bc6\u89e3\u51b3\u3002\n\n```cpp\ninline int query(int L,int R,int l,int r,int k){\n\tint ans,mid=(l+r)>>1,x=sum[ls[R]]-sum[ls[L]];\n\tif(l==r) return l;\n\tif(x>=k) ans=query(ls[L],ls[R],l,mid,k);\n\telse ans=query(rs[L],rs[R],mid+1,r,k-x);\n\treturn ans;\n}\n```\n\n\n# $3.$  \u6700\u91cd\u8981\u7684\u5e94\u7528\u4e4b\u4e00 \u2014\u2014 \u53ef\u6301\u4e45\u5316\u6570\u7ec4\n\n\u4e3b\u5e2d\u6811\u53ef\u4ee5\u8f83\u597d\u5730\u7ef4\u62a4\u4e00\u4e2a\u201c\u652f\u6301\u67e5\u8be2\u5386\u53f2\u7248\u672c\u7684\u201d\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5176\u652f\u6301\u5386\u53f2\u7248\u672c\u7684\u7279\u70b9\uff0c\u5b9e\u73b0\u53ef\u6301\u4e45\u5316\n\n## $3.1$ \u6a21\u677f\u9898\n\n- [P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09](https://www.luogu.com.cn/problem/P3919)\n\n> ### \u9898\u76ee\u63cf\u8ff0\n>\u5982\u9898\uff0c\u4f60\u9700\u8981\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a NN \u7684\u6570\u7ec4\uff0c\u652f\u6301\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\n>\n>1. \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\n>\n>2. \u8bbf\u95ee\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u7684\u67d0\u4e00\u4f4d\u7f6e\u7684\u503c\n>\n>\u6b64\u5916\uff0c\u6bcf\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u5373\u4e3a\u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u7248\u672c\uff0c\u4e0d\u4f5c\u4efb\u4f55\u6539\u52a8\uff09\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002\u7248\u672c\u7f16\u53f7\u5373\u4e3a\u5f53\u524d\u64cd\u4f5c\u7684\u7f16\u53f7\uff08\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u7248\u672c0\u8868\u793a\u521d\u59cb\u72b6\u6001\u6570\u7ec4\uff09\n>\n>### \u8f93\u5165\u683c\u5f0f\n>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $N,M$, \u5206\u522b\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u548c\u64cd\u4f5c\u7684\u4e2a\u6570\n>\n>\u7b2c\u4e8c\u884c\u5305\u542b $N$ \u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3a\u521d\u59cb\u72b6\u6001\u4e0b\u6570\u7ec4\u5404\u4f4d\u7684\u503c (\u4f9d\u6b21\u4e3a $a_i$, $1\\leq i \\leq N$ )\n>\n>\u63a5\u4e0b\u6765 $M$ \u884c\u5305\u542b $3$ \u6216 $4$ \u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4e24\u79cd\u64cd\u4f5c\u4e4b\u4e00 ($i$ \u4e3a\u57fa\u4e8e\u7684\u5386\u53f2\u7248\u672c\u53f7)\uff1a\n>\n>> $1.$ \u5bf9\u4e8e\u64cd\u4f5c $1$ , \u683c\u5f0f\u4e3a $ v_i\\ 1\\ loc_i\\ value_i$ \u5373\u5728\u7248\u672c $v_i$ \u7684\u57fa\u7840\u4e0a\uff0c \u5c06 $a_{loc_i}$ \u4fee\u6539\u4e3a $value_i$\n>>\n>> $2.$ \u5bf9\u4e8e\u64cd\u4f5c $2$ , \u683c\u5f0f\u4e3a $ v_i\\ 2\\ loc_i\\ $ \u5373\u8bbf\u95ee\u7248\u672c $v_i$ \u4e2d $a_{loc_i}$ \u7684\u503c\uff0c \u751f\u6210\u4e00\u6837\u7248\u672c\u7684\u5bf9\u8c61\u5e94\u4e3a $v_i$\n>\n>### \u8f93\u51fa\u683c\u5f0f\n>\u8f93\u51fa\u5305\u542b\u82e5\u5e72\u884c\uff0c\u4f9d\u6b21\u4e3a\u6bcf\u4e2a\u64cd\u4f5c $2$ \u7684\u7ed3\u679c\u3002\n\n## $3.2$ \u89e3\u51b3\u601d\u8def\n\n\u5229\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\n\n\u6211\u4eec\u53ef\u4ee5\u539f\u6570\u7ec4\u5b58\u653e\u5728$rt[0]$\u7684\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\u76f4\u63a5\u4fee\u6539\u5373\u53ef\n\n## $3.3$ \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n\nusing namespace std;\n\n#define rg register\n#define ll long long\n#define ull unsigned long long\n\nnamespace Enterprise{\n\n\tinline int read(){\n\t\trg int s=0,f=0;\n\t\trg char ch=getchar();\n\t\twhile(not isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\t\twhile(isdigit(ch)) s=(s<<1)+(s<<3)+(ch^48),ch=getchar();\n\t\treturn f?-s:s;\n\t}\n\t\n\tconst int N=1e6+15;\n\tint val[N<<5],rt[N],ls[N<<5],rs[N<<5],a[N],tot;\n\tint n,m;\n\t\n\tinline int build(int l,int r){\n\t\tint o=++tot;\n\t\tif(l==r){ val[o]=a[l];return o; }//\u904d\u5386\u5230\u53f6\u5b50\u8282\u70b9\u8d4b\u503c\n\t\tint mid=(l+r)>>1;\n\t\tls[o]=build(l,mid);\n\t\trs[o]=build(mid+1,r);\n\t\treturn o;\n\t}\n\t\n\tinline int change(int pre,int l,int r,int x,int v){\n\t\tint o=++tot;\n\t\tls[o]=ls[pre],rs[o]=rs[pre],val[o]=val[pre];\n\t\tif(l==r){\n\t\t\tval[o]=v;//\u5728\u53f6\u5b50\u8282\u70b9\u5904\u4fee\u6539\n\t\t\treturn o;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) ls[o]=change(ls[pre],l,mid,x,v);\n\t\telse rs[o]=change(rs[pre],mid+1,r,x,v);\n\t\treturn o;\n\t}\n\t\n\tinline int query(int now,int l,int r,int x){//\u4e0e\u6b63\u5e38\u7ebf\u6bb5\u6811\u5355\u70b9\u67e5\u8be2\u65e0\u5f02\n\t\tif(l==r) return val[now];\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) return query(ls[now],l,mid,x);\n\t\telse return query(rs[now],mid+1,r,x);\n\t}\n\t\n\tinline void main(){\n\t\tn=read(),m=read();\n\t\tfor(rg int i=1;i<=n;i++) a[i]=read();\n\t\trt[0]=build(1,n);\n\t\tfor(rg int i=1;i<=m;i++){\n\t\t\tint ver=read(),opt=read(),x=read();\n\t\t\tif(opt==1){\n\t\t\t\tint v=read();\n\t\t\t\trt[i]=change(rt[ver],1,n,x,v);\n\t\t\t}else{\n\t\t\t\trt[i]=rt[ver];//\u76f4\u63a5\u5c06\u5f53\u524d\u7248\u672c\u8282\u70b9\u7f16\u53f7\u8d4b\u6210\u8981\u6c42\u7684\u7248\u672c\u7f16\u53f7\u3002\u8fd9\u6837\u53ef\u4ee5\u5feb\u6377\u5730\u5b8c\u6210\u65b0\u5efa\u7acb\u4e00\u4e2a\u548cv_i\u76f8\u540c\u7684\u7248\u672c\n\t\t\t\tprintf(\"%d\\n\",query(rt[ver],1,n,x));\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main(){\n\tEnterprise::main();\n\treturn 0;\n}\n```\n\n# $4.$ \u4e3b\u5e2d\u6811\u65f6\u7a7a\u590d\u6742\u5ea6\u5206\u6790\n\n## $4.1$ \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u4e3b\u5e2d\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\u601d\u60f3\u5927\u4f53\u4e00\u81f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u57fa\u672c\u4e00\u81f4\u3002\n\n\u5bf9\u4e8e\u5efa\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nlogn)$\n\n\u7531\u4e8e\u8fd9\u91cc\u67e5\u8be2\u548c\u4fee\u6539\u90fd\u662f\u5355\u70b9\u64cd\u4f5c\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(logn)$\n\n\u6240\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u57fa\u672c\u4e3a $O((m+n)logn)$\n\n## $4.2$ \u7a7a\u95f4\u590d\u6742\u5ea6\n\n\u5bf9\u4e8e $rt[0]$ \u6765\u8bf4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6=\u6b63\u5e38\u7ebf\u6bb5\u6811\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u5373\u6700\u574f $O(4n)$\n\n\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u7531\u4e8e\u4ec5\u4fee\u6539\u4e86 $logn$ \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6240\u6709\u65b0\u5efa\u7248\u672c\u7684\u6700\u574f\u590d\u6742\u5ea6\u4e3a $O(mlogn)$ \n\n## $4.3$ \u5c0f\u58f0bb\n\n\u4e00\u822c\u7684\u5bf9\u4e8e\u6240\u6709\u8282\u70b9\u53ca\u5176\u5bf9\u5e94\u503c\uff08\u5982\u8282\u70b9\u503c\uff0c\u5de6\u53f3\u513f\u5b50\u7b49\uff09\u6211\u4eec\u53ef\u4ee5\u5f0020\u500d\u7a7a\u95f4\uff0c\u6216\u8005 $maxn<<5$ \u5904\u7406\u3002 ~~\u5404\u4f4d\u5927\u4f6c\u80af\u5b9a\u5df2\u7ecf\u77e5\u9053\u4e86~~\u3002",
        "postTime": 1575465690,
        "uid": 230749,
        "name": "USSENTERPRISE",
        "ccfLevel": 0,
        "title": "[\u7b97\u6cd5\u5b66\u4e60\u7b14\u8bb0]\u4e3b\u5e2d\u6811"
    },
    {
        "content": "## P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\uff08\u9898\u89e3\uff09\n***\n**\u9898\u76ee\u4f20\u9001\u95e8\uff1a**\n\n[\u70b9\u6211](https://www.luogu.org/problemnew/show/P3919)\n***\n**\u89e3\u9898\u601d\u8def\uff1a**\n\n\u7528\u4e00\u68f5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u8bb0\u5f55\u6570\u7ec4\u4e2d\u7684\u6811\u3002  \n~~\uff08\u849f\u84bb\u6211\u4e0d\u60f3\u5199\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\uff09~~\n***\n**\u9898\u76ee\u6ce8\u610f\u70b9\uff1a**\n\n1. \u67e5\u8be2\u65f6\u5e94\u751f\u6210\u7684\u6811\u662f\u67e5\u8be2\u5230\u7684\u90a3\u68f5\u6811\n2. \u6ce8\u610f\u6570\u7ec4\u8303\u56f4\n[~~\u9519\u8befQWQ~~](https://www.luogu.org/recordnew/show/16232423)\n3. \u8fd9\u9053\u9898\u6bd2\u7624\u5730\u8ba9\u4e60\u60ef\u5f00$long long$\u7684\u4eba$MLE$\u4e86\n\n***\n**\u8865\u5145\uff1a**\n\n**\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811**\n1. \u53ef\u6301\u4e45\u5316\u5b9a\u4e49\uff08\u81ea\u884c\u4e0a\u7f51\u95ee[\u5ea6\u5a18](https://www.baidu.com)\uff09\n2. *\u5982\u4f55\u5b9e\u73b0\u53ef\u6301\u4e45\u5316\uff1a*\n\u5728\u6bcf\u6b21\u4fee\u6539\u7ed3\u675f\u540e\uff0c\u5efa\u4e00\u68f5\u65b0\u6811\u3002\n3. *\u7a7a\u95f4\u592a\u8d39\uff1a*\n\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u539f\u8282\u70b9\u3002\n\n*eg:*  \n![\u51fa\u9519\u4e86](https://cdn.luogu.com.cn/upload/pic/51566.png)\n\n\u50cf\u5de6\u4e0b\u65b9\u8fd9\u68f5\u6811\uff0c\u662f\u7531\u4e2d\u95f4\u7684\u8868\u683c\u751f\u6210\u7684\u3002\n\n\u628a\u7b2c\u4e09\u4e2a\u70b9\u6539\u52a8\uff0c\u5c31\u751f\u6210\u4e86\u53f3\u8fb9\u8fd9\u68f5\u6811\u3002\n\n\u753b\u7ea2\u8272\u5708\u7684\u5c31\u662f\u8981\u6539\u52a8\u7684\u8282\u70b9\u3002\n\n\u4e0a\u65b9\u8fd9\u4e2a\u8868\u683c\uff0c\u7b2c\u4e00\u884c\u662f\u6570\u503c\uff0c\u7b2c\u4e8c\u884c\u662f\u5de6\u5b69\u5b50\uff0c\u7b2c\u4e09\u884c\u662f\u53f3\u5b69\u5b50\u3002\n\n\u5e26\u7eff\u8272\u6846\u7684\u662f\u539f\u59cb\u8282\u70b9\uff0c\u7ea2\u8272\u7684\u662f\u65b0\u589e\u8282\u70b9\uff0c\u8bfb\u8005\u53ef\u81ea\u884c\u7406\u89e3\u3002\n\n\u6700\u540e\u518d\u7528\u4e00\u4e2a\u6570\u7ec4root\u8bb0\u5f55\u6bcf\u6b21\u4fee\u6539\u540e\u7684\u6839\u8282\u70b9\u3002\u4fbf\u53ef\u5b9e\u73b0\n\n***\n**\u4ee3\u7801\uff1a**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=30000005,maxm=1000005;\nstruct data\t\t//\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\n{\n\tint number,lson,rson;\n\tdata() {number=0;lson=0;rson=0;}\n\tdata(int n,int l,int r):number(n),lson(l),rson(r) {}\n};\nstruct zhu_tree\t\t//\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\n{\n\tdata tree[maxn];\n\tint root[maxm],tsize;\n\tzhu_tree()\t\t//\u521d\u503c\n\t{\n\t\ttsize=0;\n\t\troot[0]=1;\t\t//\u4e0d\u8981\u5fd8\u4e86\uff01\uff01\uff01\n\t}\n\tinline int add_node(int x)\t\t//\u628ax\u4f4d\u7684\u8282\u70b9\u62f7\u8d1d\n\t{\n\t\ttsize++;\n\t\ttree[tsize]=tree[x];\n\t\treturn tsize;\n\t}\n\tvoid build(int &now,int l,int r,int da[])\t\t//\u9020\u4e00\u68f5\u65b0\u6811\n\t{\n\t\ttsize++;\n\t\tnow=tsize;\n\t\tif(l==r)\n\t\t{\n\t\t\ttree[now].number=da[l];\n\t\t\ttree[now].lson=0;\n\t\t\ttree[now].rson=0;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(tree[now].lson,l,mid,da);\n\t\tbuild(tree[now].rson,mid+1,r,da);\n\t}\n\tint search(int now,int l,int r,int dw)\t\t//\u67e5\u627e\u8282\u70b9\n\t{\n\t\tif(l==r) return tree[now].number;\n\t\tint mid=(l+r)>>1;\n\t\tif(dw<=mid) return search(tree[now].lson,l,mid,dw);\n\t\treturn search(tree[now].rson,mid+1,r,dw);\n\t}\n\tvoid insert(int old,int &now,int l,int r,int dw,int dd)\t\t//\u4fee\u6539\u8282\u70b9\uff08\u540d\u5b57\u4e0d\u5927\u597d\uff0c\u83ab\u602a\uff09\n\t{\n\t\tnow=add_node(old);\n\t\tif(l==r)\n\t\t{\n\t\t\ttree[now].number=dd;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(dw<=mid) insert(tree[old].lson,tree[now].lson,l,mid,dw,dd);\n\t\telse insert(tree[old].rson,tree[now].rson,mid+1,r,dw,dd);\n\t}\n}tree;\nint main()\n{\n\tint n,m,a[maxm];\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\ttree.build(tree.root[0],1,n,a);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint v,f,l,val;\n\t\tscanf(\"%d%d%d\",&v,&f,&l);\n\t\tif(f==1)\n\t\t{\n\t\t\tscanf(\"%d\",&val);\n\t\t\ttree.insert(tree.root[v],tree.root[i],1,n,l,val);\n\t\t}\n\t\tif(f==2)\n\t\t{\n\t\t\ttree.root[i]=tree.root[v];\n\t\t\tprintf(\"%d\\n\",tree.search(tree.root[i],1,n,l));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550033403,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "> ## \u53ef\u6301\u4e45\u5316\u6570\u7ec4\u6d45\u8c08\n\n\u8fd9\u91cc\u6d45\u8c08\u4e00\u4e0b\u4e3b\u5e2d\u6811\u7684\u89e3\u6cd5\u3002\n\n\u6211\u4eec\u77e5\u9053,**\u53ef\u6301\u4e45\u5316**\u4e5f\u5c31\u662f\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u7684\u3002\u800c**\u53ef\u6301\u4e45\u5316\u6570\u7ec4**\u4e5f\u662f\u5982\u6b64,\u53ef\u4ee5\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u4e14\u53ef\u4ee5\u5c06\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u590d\u5236(\u6216\u4fee\u6539)\u53d8\u4e3a\u65b0\u7684\u5386\u53f2\u7248\u672c\u3002\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u5efa\u7acb\u4e00\u4e2a$N^2$\u7684\u77e9\u9635(\u6211\u8bf4\u7684$N^2$\u662f\u5e8f\u5217\u957f\u5ea6,\u53ef\u80fd\u4f1a\u8ddf\u9898\u76ee\u4e0d\u7b26\u5408,~~\u5e76\u6ca1\u6709\u8ba4\u771f\u770b\u9898\u76ee~~),\u4f46\u662f\u8fd9\u6837\u5b50\u663e\u7136\u5f88\u591a\u4f59\u3002\u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u53ef\u4ee5\u9884\u6d4b\u4e0b\u4e00\u6b21\u5e8f\u5217\u7684\u957f\u5ea6,\u6240\u4ee5\u4e5f\u4e0d\u80fd\u52a0\u4e00\u4e9b~~\u7a7a\u95f4\u5e95\u5c42\u4f18\u5316~~\u3002\u6211\u4eec\u66f4\u4e0d\u53ef\u4ee5\u8986\u76d6\u5386\u53f2\u7248\u672c,\u4e0d\u7136~~\u542c\u53d6$WA$\u58f0\u4e00\u7247~~\u3002\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u7a7a\u95f4\u538b\u7f29\u6210$N\\ log\\ N$,\u8fd0\u7528\u4e3b\u5e2d\u6811\u7684\u7a7a\u95f4\u5f62\u5f0f,\u8fd9\u4e5f\u662f\u4e3b\u5e2d\u6811\u7684\u6700\u5927\u4f18\u70b9\u4e4b\u4e00\u3002\u6709\u5174\u8da3\u5927\u5bb6\u53ef\u4ee5\u770b\u4e00\u770b[$Kth-Number$](https://www.luogu.org/problemnew/show/P3834)\u3002\n\n\u4e3b\u8981\u601d\u60f3\u8bb2\u5230\u8fd9\u91cc,\u5927\u5bb6\u81ea\u5df1\u53bb\u5b9e\u73b0\u5427(~~\u5077\u7b11~~)\u3002\n\n\u63a8\u8350\u9898\u76ee:\n\n[\u9ad8\u7ea7\u6253\u5b57\u673a](https://blog.csdn.net/stone41123/article/details/78271866)\n\n[\u6700\u957f\u4e0d\u4e0a\u5347\u5b50\u5e8f\u5217(LIS)](https://blog.csdn.net/puppywolf/article/details/78690750)",
        "postTime": 1532440810,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    },
    {
        "content": "### \u5410\u69fd\n\u6211\u968f\u4fbf\u4e00\u5199\u4e0d\u77e5\u9053\u7b97\u5565\u7684\u505a\u6cd5\u7136\u540e\u5c31\u901a\u8fc7\u4e86.\n\n\u7136\u540e\u6211\u501f\u9274\u4e86\u4e00\u4e0bRank1\u7684\u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u7136\u540e\u6210\u529f\u6210\u4e3aRank1.\n\n$\\text{Interesting!}$\n\n### Solution\n\n\u8fd9\u4e2a\u505a\u6cd5\u662f\u6211\u778e\u60f3\u7684, \u5e94\u8be5\u7b97\u4e0d\u4e0a\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u5427.\n\n- \u9996\u5148\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\u4e00\u4e2a\u7248\u672c, \u56e0\u4e3a\u4e00\u4e2a\u7248\u672c\u5bf9\u5b83\u7684\u7236\u4eb2\u7248\u672c\u81f3\u591a\u6539\u52a8\u4e00\u4e2a\u6570, \u56e0\u6b64\u53ef\u4ee5\u8868\u793a\u8fd9\u4e2a\u7248\u672c:\n\n```c++\nstruct Node{int p,s;Node *pre;}v[N];\n```\n`p`\u8868\u793a\u6539\u52a8\u7684\u4f4d\u7f6e, `s`\u8868\u793a\u6539\u52a8\u540e\u7684\u6570, `*pre`\u8868\u793a\u6307\u5411\u7236\u7248\u672c\u7684\u6307\u9488.\n\n\u6ce8\u610f: \u521d\u59cb\u7248\u672c\u7684\u7236\u7248\u672c\u6307\u9488\u4e3a$\\text{NULL}$.\n\n**\u5982\u4f55\u5904\u7406\u4e24\u79cd\u64cd\u4f5c**:\n- \u6bcf\u4e2a\u64cd\u4f5c\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7248\u672c.\n- \u53d1\u73b0\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u4e0d\u4f1a\u5bf9\u7236\u7248\u672c\u9020\u6210\u4efb\u4f55\u66f4\u6539, \u4e8e\u662f\u5c06\u5b83\u7684\u7236\u7248\u672c\u8bbe\u4e3a\u5b83\u7236\u7248\u672c\u7684\u7236\u7248\u672c.\u5373\n```c++\nv[i].pre=v[fa].pre;\n```\n\u53d1\u73b0\u4e00\u4e2a\u7248\u672c\u5bf9\u5176\u7236\u7248\u672c\u6539\u53d8\u4e00\u4e2a\u6570, \u7236\u7248\u672c\u5bf9\u5176\u7236\u7248\u672c\u6539\u53d8\u4e00\u4e2a\u6570, \u2026\u2026, \u76f4\u5230\u521d\u59cb\u7248\u672c.\t\n\u4e8e\u662f\u53ef\u4ee5\u8fd9\u6837\u5f80\u4e0a\u56de\u6eaf, \u76f4\u5230\u53d1\u73b0\u67d0\u4e2a\u7248\u672c\u6539\u53d8\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570, \u90a3\u5c31\u7ed3\u675f.\n- \u7b2c\u4e00\u79cd\u64cd\u4f5c\u6bd4\u8f83\u597d\u529e:\n```c++\nv[i]=(Node){ThePositionOfChange,TheNumberAfterChange,v+fa};\n```\n\n### Code\n\u8fd9\u4e2a\u662f\u6211\u4e0d\u52a0\u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u7684\u7248\u672c\u2026\u2026\n```c++\n#include<cstdio>\n#define N 1000005\nusing namespace std;\n\nint seq[N];\nstruct Node{int p,s;Node *pre;}v[N];\n\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)scanf(\"%d\",&seq[i]);\n    int a,b,c,d;bool flag;\n    v[0].pre=NULL;\n    for(int i=1;i<=m;++i){\n        scanf(\"%d%d%d\",&a,&b,&c);\n        if(b==1)\n            scanf(\"%d\",&d),v[i]=(Node){c,d,v+a};\n        else {\n            flag=false;\n            v[i]=(Node){v[a].p,v[a].s,v[a].pre};\n            Node *z=v+i;\n            while(z->pre){\n                if(z->p==c){\n                    flag=true;printf(\"%d\\n\",z->s);break;\n                }\n                z=z->pre;\n            }\n            if(!flag)printf(\"%d\\n\",seq[c]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1531379815,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3919 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\uff09\u3011"
    }
]