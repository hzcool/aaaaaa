[
    {
        "content": "## \u524d\u8a00\n\n[\u9898\u76ee\u4f20\u9001\u95e8\uff01](https://www.luogu.com.cn/problem/P4679)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f](https://www.cnblogs.com/liangbowen/p/16817148.html)\n\n\u5927\u529b\u6811\u5256\uff01\n\n\u505a\u6811\u5256\u65f6\uff0c\u5927\u5bb6\u53ef\u4ee5\u819c\u62dc @[liruiduan2](https://www.luogu.com.cn/user/488310) \u5de8\u4f6c\uff0c\u4ed6\u53ef\u4ee5\u5728\u8003\u573a\u4e0a\u7801 200 \u884c\u7684\u6811\u5256\u9898\u76ee\u3002\n\n## \u601d\u8def\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u533a\u95f4 $[l, r]$\uff0c\u8bb0\u5f55\u4e09\u4e2a\u4e1c\u897f\uff1a$lmx_i$\u3001$rmx_i$\u3001$dis_{i, j}$\u3002\n\n$lmx_i$ \uff08$0 \\le i \\le 1$\uff09\u8868\u793a\u4ece $l$ \u7684\u5de6\u6216\u53f3\u8282\u70b9\u51fa\u53d1\uff0c\u80fd\u8d70\u7684\u6700\u957f\u8ddd\u79bb\u3002$rmx_i$ \u5219\u662f\u4ece $r$ \u51fa\u53d1\u3002\n\n$dis_{i, j}$\uff08$0 \\le i, j \\le 1$\uff09\u8868\u793a\u4ece $l$ \u7684\u5de6\u6216\u53f3\u8282\u70b9\uff0c\u8d70\u5230 $r$ \u7684\u5de6\u6216\u53f3\u8282\u70b9\uff0c\u6700\u957f\u8ddd\u79bb\u3002\n\n\u5408\u5e76\u64cd\u4f5c\u770b\u4ee3\u7801\u6a21\u62df\u5c31\u884c\uff0c\u975e\u5e38\u597d\u7406\u89e3\u3002\u5047\u8bbe\u8981\u628a $x$ \u4e0e $y$ \u5408\u5e76\u5230 $ans$ \u91cc\uff1a\n\n1. `ans.lmx[i] = max(ans.lmx[i], max(x.lmx[i], x.dis[i][j] + y.lmx[j]))`\n2. `ans.rmx[i] = max(ans.rmx[i], max(y.rmx[i], y.dis[j][i] + x.rmx[j]));`\n3. $dis_{i, j}$ \u7528\u7c7b\u4f3c floyd \u7684\u601d\u60f3\u8f6c\u79fb\u5373\u53ef\u3002\n\n---\n\n\u7ebf\u6bb5\u6811\u662f\u5355\u70b9\u4fee\u6539\uff0c\u4e0d\u9700\u8981 `pushdown`\uff0c\u5199\u8d77\u6765\u975e\u5e38\u8212\u670d\u3002\n\n\u4e0d\u8fc7\u6ce8\u610f\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\n\n```cpp\ninline void create(bool a[]) //\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\n{\n\tint d = 2, x = a[0], y = a[1];\n\tconst int inf = 0x3f3f3f3f;\n\tif (!x) d = x = -inf;\n\tif (!y) d = y = -inf;\n\tlmx[0] = rmx[0] = max(x, 0), lmx[1] = rmx[1] = max(y, 0);\n\tdis[0][0] = x, dis[1][1] = y;\n\tdis[0][1] = dis[1][0] = d;\n}\n```\n\n\u6240\u4ee5\u63a5\u4e0b\u6765\u5c31\u662f\u6811\u5256\u4e86\u3002\u524d\u9762\u662f\u5e38\u89c4\u64cd\u4f5c\uff0c\u6700\u540e\u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u70b9\u76f8\u9047\u540e\u7684\u4e24\u4e2a\u7ed3\u679c\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\uff0c\u6c42\u51fa\u7684\u4e24\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/afpw9pq6.png)\n\n\u6211\u4eec\u663e\u7136\u60f3\u8ba9\u4e24\u4e2a\u7bad\u5934\u662f\u987a\u7740\u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/llg3129v.png)\n\n\u6240\u4ee5\u5f88\u7b80\u5355\uff0c\u628a\u4e00\u6bb5\u7ffb\u8f6c\u5373\u53ef\u3002\u8fd9\u4e2a\u65f6\u5019\u518d\u5408\u5e76\u4e24\u6bb5\u7684\u7b54\u6848\u5c31\u884c\u4e86\u3002\n\n```cpp\nvoid Swap(Node &a) //\u628a\u5f53\u524d\u70b9\u7ffb\u8f6c \n{\n\tfor (int i = 0; i <= 1; i++) swap(a.lmx[i], a.rmx[i]);\n\tswap(a.dis[0][1], a.dis[1][0]);\n}\n```\n\n\u6700\u540e\u7b54\u6848\u663e\u7136\u4e3a $\\max(lmx_{0}, lmx_{1})$\u3002\n\n## \u5b8c\u6574\u4ee3\u7801\n\n\u6709\u70b9\u957f\u3002\u53ef\u4ee5\u7528\u8fd9\u4efd\u4ee3\u7801\u5bf9\u62cd\u3002\n\n```cpp\n/*\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256\u6811\u5256*/\n/*lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256lrd\u7206\u5207\u6811\u5256*/\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define space putchar(' ')\n#define endl putchar('\\n')\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long ull;\ntypedef long double LD;\nnamespace io { //\u5feb\u8bfb\u5feb\u5199\uff0c\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\n\tvoid fastio()\n\t{\n\t\tios::sync_with_stdio(false);\n\t\tcin.tie(0), cout.tie(0);\n\t}\n\tinline int read()\n\t{\n\t\tchar op = getchar(); int x = 0, f = 1;\n\t\twhile (op < 48 || op > 57) {if (op == '-') f = -1; op = getchar();}\n\t\twhile (48 <= op && op <= 57) x = (x << 1) + (x << 3) + (op ^ 0x30), op = getchar();\n\t\treturn x * f;\n\t}\n\tinline void write(int x)\n\t{\n\t\tif (x < 0) putchar('-'), x = -x;\n\t\tif (x > 9) write(x / 10);\n\t\tputchar(x % 10 + 0x30);\n\t}\n} using namespace io;\nconst int N = 5e4 + 5;\nstruct Edge\n{\n\tint now, nxt;\n} e[N << 1];\nint head[N], cur;\ninline void add(int u, int v) //\u94fe\u5f0f\u524d\u5411\u661f\n{\n\te[++cur].now = v;\n\te[cur].nxt = head[u];\n\thead[u] = cur;\n}\nint siz[N], wson[N], fa[N], dep[N];\nvoid dfs(int u) //\u6811\u5256\u4e24\u6b21 dfs\n{\n\tsiz[u] = 1, dep[u] = dep[fa[u]] + 1;\n\tfor (int i = head[u]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].now;\n\t\tif (v != fa[u])\n\t\t{\n\t\t\tfa[v] = u;\n\t\t\tdfs(v);\n\t\t\tsiz[u] += siz[v];\n\t\t\tif (wson[u] == 0 || siz[v] > siz[wson[u]]) wson[u] = v;\n\t\t}\n\t}\n}\nint top[N];\nbool map[N][2], zlt[N][2]; //zlt : \u8f6c\u5316\u4e3adfn\u7684\u5730\u56fe \nint dfn[N], vist;\nvoid DFS(int u, int frt)\n{\n\tdfn[u] = ++vist;\n\ttop[u] = frt;\n\tzlt[vist][0] = map[u][0], zlt[vist][1] = map[u][1];\n\tif (wson[u] == 0) return;\n\tDFS(wson[u], frt);\n\tfor (int i = head[u]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].now;\n\t\tif (v != fa[u] && v != wson[u]) DFS(v, v);\n\t}\n}\nstruct Node\n{\n\tint lmx[2], rmx[2], dis[2][2];\n\tNode() {lmx[0] = lmx[1] = rmx[0] = rmx[1] = dis[0][0] = dis[0][1] = dis[1][0] = dis[1][1] = 0;}\n\tinline void create(bool a[]) //\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\n\t{\n\t\tint d = 2, x = a[0], y = a[1];\n\t\tconst int inf = 0x3f3f3f3f;\n\t\tif (!x) d = x = -inf;\n\t\tif (!y) d = y = -inf;\n\t\tlmx[0] = rmx[0] = max(x, 0), lmx[1] = rmx[1] = max(y, 0);\n\t\tdis[0][0] = x, dis[1][1] = y;\n\t\tdis[0][1] = dis[1][0] = d;\n\t}\n} s[N << 2];\ninline Node operator +(const Node &x, const Node &y) //\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\n{\n\tNode a;\n\tfor (int i = 0; i <= 1; i++)\n\t\tfor (int j = 0; j <= 1; j++)\n\t\t{\n\t\t\ta.lmx[i] = max(a.lmx[i], max(x.lmx[i], x.dis[i][j] + y.lmx[j]));\n\t\t\ta.rmx[i] = max(a.rmx[i], max(y.rmx[i], y.dis[j][i] + x.rmx[j]));\n\t\t\ta.dis[i][j] = -0x3f3f3f3f; //\u7c7b\u4f3c floyd \u7684\u5199\u6cd5\n\t\t\tfor (int k = 0; k <= 1; k++) a.dis[i][j] = max(a.dis[i][j], x.dis[i][k] + y.dis[k][j]);\n\t\t}\n\treturn a;\n}\nstruct SegmentTree //\u7ebf\u6bb5\u6811\n{\n\tinline int ls(int x) {return x << 1;}\n\tinline int rs(int x) {return x << 1 | 1;}\n\tinline void pushup(int pos) {s[pos] = s[ls(pos)] + s[rs(pos)];}\n\tvoid build(int l, int r, int pos)\n\t{\n\t\tif (l == r) return s[pos].create(zlt[l]);\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(l, mid, ls(pos));\n\t\tbuild(mid + 1, r, rs(pos));\n\t\tpushup(pos);\n\t}\n\tvoid update(int l, int r, int pos, int id, bool a[])\n\t{\n\t\tif (l == r) return s[pos].create(a);\n\t\tint mid = (l + r) >> 1;\n\t\tif (id <= mid) update(l, mid, ls(pos), id, a);\n\t\telse update(mid + 1, r, rs(pos), id, a);\n\t\tpushup(pos);\n\t}\n\tNode query(int l, int r, int pos, int L, int R) //warning: \u7531\u4e8e\u7a7a\u8282\u70b9\u4e0e\u975e\u7a7a\u8282\u70b9\u5408\u5e76\u4f1a\u6302\uff0c\u6240\u4ee5\u8981\u5206\u5f00\u5199 \n\t{\n\t\tif (L <= l && r <= R) return s[pos];\n\t\tint mid = (l + r) >> 1;\n\t\t/*\u6211\u5e73\u65f6\u7684\u5199\u6cd5\n\t\tNode ans;\n\t\tif (L <= mid) ans = ans + query(l, mid, ls(pos), L, R);\n\t\tif (mid < R) ans = ans + query(mid + 1, r, rs(pos), L, R);\n\t\treturn ans;\n\t\t*/\n\t\tif (L > mid) return query(mid + 1, r, rs(pos), L, R); //\u6ca1\u6709 L<=mid \u8bf4\u660e\u6709 mid<R \n\t\tif (mid >= R) return query(l, mid, ls(pos), L, R); //\u6ca1\u6709 mid<R \u8bf4\u660e\u6709 L<=mid\n\t\treturn query(l, mid, ls(pos), L, R) + query(mid + 1, r, rs(pos), L, R); //\u4e24\u4e2a\u975e\u7a7a\u8282\u70b9\u5408\u5e76\u624d\u4e0d\u4f1a\u6302 \n\t}\n} seg;\nint n;\nstruct Tree //\u5927\u529b\u6811\u5256\uff01\n{\n\tvoid Swap(Node &a) //\u628a\u5f53\u524d\u70b9\u7ffb\u8f6c \n \t{\n\t\tfor (int i = 0; i <= 1; i++) swap(a.lmx[i], a.rmx[i]);\n\t\tswap(a.dis[0][1], a.dis[1][0]);\n\t}\n\tint query(int x, int y)\n\t{\n\t\tNode nx, ny;\n\t\twhile (top[x] != top[y]) //\u4e0b\u9762\u6ce8\u610f\u8981\u5199\u6210 nx = query + nx\uff0c\u56e0\u4e3a\u7a7a\u8282\u70b9\u5408\u5e76\u4f1a\u6709\u95ee\u9898\n\t\t{\n\t\t\tif (dep[top[x]] > dep[top[y]])\n\t\t\t\t\tnx = seg.query(1, n, 1, dfn[top[x]], dfn[x]) + nx, x = fa[top[x]];\n\t\t\telse \tny = seg.query(1, n, 1, dfn[top[y]], dfn[y]) + ny, y = fa[top[y]];\n\t\t}\n\t\t\n\t\tif (dep[x] > dep[y]) nx = seg.query(1, n, 1, dfn[y], dfn[x]) + nx;\n\t\telse ny = seg.query(1, n, 1, dfn[x], dfn[y]) + ny;\n\t\tSwap(nx);\n\t\tNode ans = nx + ny;\n\t\treturn max(ans.lmx[0], ans.lmx[1]);\n\t}\n} tree;\nint main()\n{\n\tn = read(); int T = read();\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint u = read(), v = read();\n\t\tadd(u, v), add(v, u);\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tchar s[2]; scanf(\"%s\", s);\n\t\tmap[i][0] = (s[0] == '.'), map[i][1] = (s[1] == '.');\n\t}\n\tdfs(1), DFS(1, 1);\n\tseg.build(1, n, 1);\n\twhile (T--)\n\t{\n\t\tchar op[2];\n\t\tscanf(\"%s\", op);\n\t\tif (op[0] == 'C')\n\t\t{\n\t\t\tint i = read();\n\t\t\tchar s[2]; scanf(\"%s\", s);\n\t\t\tmap[i][0] = (s[0] == '.'), map[i][1] = (s[1] == '.'); //\u66b4\u529b\u66f4\u65b0\n\t\t\tseg.update(1, n, 1, dfn[i], map[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint u = read(), v = read();\n\t\t\twrite(tree.query(u, v)), endl;\n\t\t}\n\t}\n\treturn 0;\n}\n/*\nhack\n5 1\n4 5\n2 5\n4 3\n4 1\n..\n#.\n#.\n#.\n##\nQ 2 4\n*/\n```\n\n\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u5927\u5bb6\uff01",
        "postTime": 1666440806,
        "uid": 367488,
        "name": "liangbowen",
        "ccfLevel": 0,
        "title": "P4679 \u9898\u89e3"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4679)\n\n\u5c06\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u4e24\u4e2a\u70b9\u5206\u522b\u79f0\u4e3a$0/1$\uff0c\u7528\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9$[l,r]$,\u6211\u4eec\u7ef4\u62a4\u5982\u4e0b\u4fe1\u606f\uff1a  \n$lmax_{0/1}$\u8868\u793a\u4ece$l$\u7684$0/1$\u8282\u70b9\u80fd\u8d70\u7684\u6700\u957f\u8ddd\u79bb\u3002  \n$rmax_{0/1}$\u8868\u793a\u4ece$r$\u7684$0/1$\u8282\u70b9\u80fd\u8d70\u7684\u6700\u957f\u8ddd\u79bb\u3002  \n$dis_{0/1,0/1}$\u8868\u793a\u4ece$l$\u7684$0/1$\u8d70\u5230$r$\u7684$0/1$\u7684\u6700\u957f\u8ddd\u79bb\u3002\n\n\u5408\u5e76\u5982\u4e0b\uff1a  \n```\nSegment_tree operator+(const Segment_tree& a)const\n{\n\tSegment_tree res;\n\tfor(int i=0;i<=1;i++)\n\t\tfor(int j=0;j<=1;j++)\n\t\t\tres.lmax[i]=max(res.lmax[i],max(lmax[i],dis[i][j]+a.lmax[j]));\n\tfor(int i=0;i<=1;i++)\n\t\tfor(int j=0;j<=1;j++)\n\t\t\tres.rmax[i]=max(res.rmax[i],max(a.rmax[i],rmax[j]+a.dis[j][i]));\n\tfor(int i=0;i<=1;i++)\n\t\tfor(int j=0;j<=1;j++)\n        {\n\t\t\tres.dis[i][j]=-inf;\n\t\t\tfor(int k=0;k<=1;k++)res.dis[i][j]=max(res.dis[i][j],dis[i][k]+a.dis[k][j]);\n\t\t}\n\treturn res;\n}\n```\n\n\u67e5\u8be2\u65f6\u4e24\u4e2a\u70b9\u540c\u65f6\u8df3\u94fe\uff0c\u6700\u540e\u9700\u8981\u7ffb\u8f6c\u4e00\u6761\u94fe\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=50010;\nconst int inf=1e9;\nint n,m,cnt_edge;\nint head[maxn];\nint a[maxn][2];\ninline int read()\n{\n\tchar c=getchar();int res=0,f=1;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9')res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\nstruct edge{int to,nxt;}e[maxn<<1];\ninline void add_edge(int u,int v)\n{\n\te[++cnt_edge].nxt=head[u];\n\thead[u]=cnt_edge;\n\te[cnt_edge].to=v;\n}\nint tim;\nint dep[maxn],pre[maxn],size[maxn],son[maxn],dfn[maxn],pos[maxn],top[maxn];\nvoid dfs1(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;pre[x]=fa;size[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==fa)continue;\n\t\tdfs1(y,x);size[x]+=size[y];\n\t\tif(size[y]>size[son[x]])son[x]=y;\n\t}\n}\nvoid dfs2(int x,int tp)\n{\n\tdfn[x]=++tim;pos[tim]=x;top[x]=tp;\n\tif(son[x])dfs2(son[x],tp);\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==pre[x]||y==son[x])continue;\n\t\tdfs2(y,y);\n\t}\n}\n#define ls(p) (p<<1)\n#define rs(p) (p<<1|1)\nstruct Segment_tree\n{\n\tint lmax[2],rmax[2];\n\tint dis[2][2];\n\tSegment_tree()\n\t{\n\t\tmemset(lmax,0,sizeof(lmax));\n\t\tmemset(rmax,0,sizeof(rmax));\n\t\tmemset(dis,0,sizeof(dis));\n\t}\n\tSegment_tree operator+(const Segment_tree& a)const\n\t{\n\t\tSegment_tree res;\n\t\tfor(int i=0;i<=1;i++)\n\t\t\tfor(int j=0;j<=1;j++)\n\t\t\t\tres.lmax[i]=max(res.lmax[i],max(lmax[i],dis[i][j]+a.lmax[j]));\n\t\tfor(int i=0;i<=1;i++)\n\t\t\tfor(int j=0;j<=1;j++)\n\t\t\t\tres.rmax[i]=max(res.rmax[i],max(a.rmax[i],rmax[j]+a.dis[j][i]));\n\t\tfor(int i=0;i<=1;i++)\n\t\t\tfor(int j=0;j<=1;j++)\n\t\t\t{\n\t\t\t\tres.dis[i][j]=-inf;\n\t\t\t\tfor(int k=0;k<=1;k++)res.dis[i][j]=max(res.dis[i][j],dis[i][k]+a.dis[k][j]);\n\t\t\t}\n\t\treturn res;\n\t}\n}seg[maxn<<2];\ninline Segment_tree New(int* a)\n{\n\tSegment_tree res;\n\tif(a[0]&&a[1])\n\t{\n\t\tfor(int i=0;i<=1;i++)res.lmax[i]=res.rmax[i]=2;\n\t\tfor(int i=0;i<=1;i++)\n\t\t\tfor(int j=0;j<=1;j++)\n\t\t\t\tres.dis[i][j]=(i==j)?1:2;\n\t}\n\telse if(a[0]||a[1])\n\t{\n\t\tint op=a[0]?0:1;\n\t\tres.lmax[op]=res.rmax[op]=res.dis[op][op]=1;\n\t\tres.lmax[op^1]=res.rmax[op^1]=0;\n\t\tres.dis[op][op^1]=res.dis[op^1][op]=res.dis[op^1][op^1]=-inf;\n\t}\n\telse \n\t{\n\t\tfor(int i=0;i<=1;i++)res.lmax[i]=res.rmax[i]=0;\n\t\tfor(int i=0;i<=1;i++)\n\t\t\tfor(int j=0;j<=1;j++)\n\t\t\t\tres.dis[i][j]=-inf;\n\t}\n\treturn res;\n}\nvoid build(int p,int l,int r)\n{\n\tif(l==r){seg[p]=New(a[pos[l]]);return;}\n\tint mid=(l+r)>>1;\n\tbuild(ls(p),l,mid);build(rs(p),mid+1,r);\n\tseg[p]=seg[ls(p)]+seg[rs(p)];\n}\nvoid change(int p,int l,int r,int pos,int* a)\n{\n\tif(l==r){seg[p]=New(a);return;}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)change(ls(p),l,mid,pos,a);\n\telse change(rs(p),mid+1,r,pos,a);\n\tseg[p]=seg[ls(p)]+seg[rs(p)];\n}\nSegment_tree query(int p,int l,int r,int ql,int qr)\n{\n\tif(l>=ql&&r<=qr)return seg[p];\n\tint mid=(l+r)>>1;\n\tif(qr<=mid)return query(ls(p),l,mid,ql,qr);\n\telse if(ql>mid)return query(rs(p),mid+1,r,ql,qr);\n\telse return query(ls(p),l,mid,ql,qr)+query(rs(p),mid+1,r,ql,qr);\n}\ninline void reverse(Segment_tree& a)\n{\n\tfor(int i=0;i<=1;i++)swap(a.lmax[i],a.rmax[i]);\n\tswap(a.dis[0][1],a.dis[1][0]);\n}\ninline int query(int x,int y)\n{\n\tSegment_tree res1,res2,res;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])res1=query(1,1,n,dfn[top[x]],dfn[x])+res1,x=pre[top[x]];\n\t\telse res2=query(1,1,n,dfn[top[y]],dfn[y])+res2,y=pre[top[y]];\n\t}\n\tif(dep[x]<dep[y])res2=query(1,1,n,dfn[x],dfn[y])+res2;\n\telse res1=query(1,1,n,dfn[y],dfn[x])+res1;\n\treverse(res1);res=res1+res2;\n\treturn max(res.lmax[0],res.lmax[1]);\n}\nint main()\n{\n\t//freopen(\"test.in\",\"r\",stdin);\n\t//freopen(\"test.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tadd_edge(u,v);add_edge(v,u);\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar tmp[2];scanf(\"%s\",tmp);\n\t\tfor(int j=0;j<=1;j++)a[i][j]=(tmp[j]=='.');\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar op[10],s[2];int x,y;\n\t\tscanf(\"%s\",op+1);\n\t\tif(op[1]=='C')\n\t\t{\n\t\t\tx=read();scanf(\"%s\",s);\n\t\t\tfor(int j=0;j<=1;j++)a[x][j]=(s[j]=='.');\n\t\t\tchange(1,1,n,dfn[x],a[x]);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tprintf(\"%d\\n\",query(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1579587979,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4679 [ZJOI2011]\u9053\u9986\u4e4b\u6218(\u6811\u94fe\u5256\u5206)"
    },
    {
        "content": "> [\u6d1b\u8c37\u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4679)\n\n> \u6709\u4e00\u68f5\u6811$T=(V,E),|V|=n,|E|=n-1$\u3002\u8282\u70b9$i$\u6709$2$\u4e2a\u623f\u95f4\uff0c\u6bcf\u4e2a\u623f\u95f4\u662f\u8584\u51b0\u6216\u969c\u788d\u7269\uff0c\u5206\u522b\u7528$a_{i,1},a_{i,2}$\u8868\u793a\uff08$\\texttt.$\u8868\u793a\u8584\u51b0\uff0c$\\texttt\\#$\u8868\u793a\u969c\u788d\u7269\uff09\u3002\u4f60\u9700\u8981\u652f\u6301\u4ee5\u4e0b$2$\u79cd$q$\u6b21\u64cd\u4f5c\uff1a\n\n>1. $\\texttt C\\ x\\ y$\uff1a$y$\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$2$\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5c06\u8282\u70b9$x$\u7684\u623f\u95f4\u6539\u6210$y$\uff1b\n>1. $\\texttt Q\\ x\\ y$\uff1a\u67e5\u8be2\u4ece\u8282\u70b9$x$\u5f80\u8282\u70b9$y$\u8d70\u6700\u591a\u80fd\u8e0f\u8fc7\u591a\u5c11\u4e2a\u8584\u51b0\u3002\u53ef\u4ee5\u4ece\u8282\u70b9$x$\u7684\u4efb\u610f\u623f\u95f4\u51fa\u53d1\u3002\u6bcf\u6b21\u53ef\u4ee5\u79fb\u5230\u540c\u8282\u70b9\u7684\u53e6\u4e00\u623f\u95f4\u6216\u5f80$y$\u65b9\u5411\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u540c\u4e00\u623f\u95f4\u3002\u969c\u788d\u7269\u4e0d\u80fd\u8d70\u3002\u8d70\u8fc7\u7684\u623f\u95f4\u4e0d\u80fd\u8d70\u3002\u6700\u7ec8\u4e0d\u5fc5\u5230\u8fbe$y$\u3002\n\n>$n\\in\\left[1,5\\times10^4\\right],q\\in\\left[1,10^5\\right]$\u3002\n\n\u4e00\u773c\u7684\u91cd\u5256\u3002\n\n\u5148\u6765\u8003\u8651\u82e5\u51fa\u5728\u7ebf\u6027\u7ed3\u6784\u4e0a\u8be5\u600e\u4e48\u505a\u3002\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0cBIT\u53c8\u592a\u900a\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u5927\u5806\u4e1c\u897f\uff0c\u7136\u540e\u4e00\u8138\u533a\u95f4\u53ef\u5408\u5e76\u7684\u6837\u5b50\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9$i$\uff0c\u8bbe\u8868\u793a$[l_i,r_i]$\uff0c\u90a3\u4e48\u6700\u7ec8\u8981\u6c42\u7684\u201c\u6700\u591a\u80fd\u8e0f\u8fc7\u591a\u5c11\u4e2a\u8584\u51b0\u201d\u663e\u7136\u662f\u5fc5\u987b\u8981\u8bb0\u5f55\u7684\uff0c\u8bbe\u4e3a$mx_i$\u3002\u53c8\u7531\u4e8e\u533a\u95f4\u6ca1\u6709\u65b9\u5411\uff0c\u4f46\u662f\u64cd\u4f5c$\\texttt Q$\u4e2d\u7684$x,y$\u5de6\u53f3\u5173\u7cfb\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u53f3\u5f80\u5de6$2$\u79cd\u65b9\u5411\u4e0a\u7684\u7b54\u6848$mxl_i,mxr_i$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5408\u5e76\u3002\u4ee5\u4ece\u5de6\u5f80\u53f3\u4e3a\u4f8b\u3002$[l_i,r_i]$\u7684\u7b54\u6848\u663e\u7136\u5206\u4e3a$2$\u79cd\u60c5\u51b5\uff1a\u8f68\u8ff9\u5728$[l_i,r_{lson_i}]$\u5185\u548c\u8de8\u8d8a\u5b83\u3002\u60c5\u51b5$1$\u663e\u7136\u662f$mxl_{lson_i}$\u5c31\u591f\u4e86\u7684\u3002\u60c5\u51b5$2$\u5219\u9700\u8981\u524d\u63d0\u6761\u4ef6\u2014\u2014$[l_i,r_{lson_i}]$\u80fd\u591f\u8d70\u901a\u3002\u4e8e\u662f\u9700\u8981\u518d\u7ef4\u62a4\u4e00\u4e2a$can_i$\uff08\u8fd9\u4e2a$2$\u79cd\u65b9\u5411\u662f\u53ef\u4ee5\u4e92\u7528\u7684\uff09\u3002\u53c8\u7531\u4e8e\u5728$r_{lson_i},l_{rson_i}$\u5904\u7684\u63a5\u53e3\u6210\u529f\u6027\u4e0e\u8fde\u63a5\u7684\u623f\u95f4\uff08$1$\u8fd8\u662f$2$\uff09\u6709\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e2a\u8bb0\u5f55\u7684\u4e1c\u897f\u90fd\u8981\u5206\u8d77\u70b9\u7ec8\u70b9\u56db\u79cd\u60c5\u51b5\uff08\u5373$mxl_{i,0/1,0/1},mxr_{i,0/1,0/1},can_{i,0/1,0/1}$\uff09\u3002\u6b64\u65f6\u53ef\u5408\u5e76\u6027\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u5408\u5e76\u7684\u65b9\u6cd5\u6709\u70b9\u590d\u6742\uff0c\u8bb0\u5f55\u7684$12$\u4e2a\u91cf\u4e92\u76f8\u4f9d\u5b58\uff0c\u4e8e\u662f\u67e5\u8be2\u51fd\u6570\u4e4b\u7c7b\u76f4\u63a5\u8fd4\u56de\u8282\u70b9\u7ed3\u6784\u4f53\u3002\n\n\u73b0\u5728\u6765\u8003\u8651\u6811\u4e0a\u7684\u60c5\u51b5\u3002\u8003\u8651\u91cd\u5256\uff0c\u7531\u4e8e\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u662f\u5206\u65b9\u5411\u7684\uff0c\u4e8e\u662f\u4e0d\u80fd\u50cf\u666e\u901a\u7b97\u548c\u3001$\\min/\\max$\u4e4b\u7c7b\u76f4\u63a5\u5c06\u4e00\u4e2a\u4e2a\u5256\u51fa\u6765\u7684\u91cd\u94fe\u7684\u7ed3\u679c\u7d2f\u8ba1\u5230\u8def\u5f84\u7684\u603b\u7ed3\u679c\u4e2d\uff0c\u9700\u8981\u7ef4\u62a4$x\\to\\mathrm{LCA}(x,y),y\\to\\mathrm{LCA}(x,y)$\u8fd9$2$\u6761\u76f4\u94fe\u7684\u603b\u7ed3\u679c\uff08\u90fd\u662f\u7ebf\u6bb5\u6811\u8282\u70b9\u7ed3\u6784\u4f53\uff09\u3002\u6700\u7ec8\u5c06\u8fd9$2$\u6761\u76f4\u94fe\u7684\u603b\u7ed3\u679c\u5408\u5e76\u65f6\uff0c\u8981\u6ce8\u610f\u5c06$x\\to\\mathrm{LCA}(x,y)$\u7684\u603b\u7ed3\u679c\u65b9\u5411\u7ffb\u8f6c\uff08\u56e0\u4e3a\u6839\u636e\u91cd\u5256\u7684\u6027\u8d28\uff0c\u65b9\u5411\u662f\u4ece\u4e0a\u5f80\u4e0b\u7684\uff0c\u800c\u6211\u4eec\u4ece$x$\u5f80$\\mathrm{LCA}(x,y)$\u8d70\uff0c\u7406\u5e94\u662f\u4ece\u4e0b\u5f80\u4e0a\u7684\uff09\u3002\n\n\u7ebf\u6027\u7ed3\u6784\u4e0a\u7684\u7ebf\u6bb5\u6811\u590d\u6742\u5ea6\u5355$\\log$\uff0c\u52a0\u4e86\u4e2a\u91cd\u5256\u53d8\u6210$\\mathrm O\\!\\left(q\\log^2n\\right)$\u3002\n\n\u5bf9\u4e86\u6709\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u5c31\u662f\u7ebf\u6bb5\u6811\u7a7a\u8282\u70b9\u4e0e\u975e\u7a7a\u8282\u70b9\u5408\u5e76\u65f6\u8981\u7279\u5224\uff0c\u4e0d\u7136\u4f1aWA\u5230\u81ea\u95ed\uff0c\u5df2\u52a0\u5165[sb\u9519\u8bef\u5217\u8868](https://www.cnblogs.com/ycx-akioi/p/sb-mistakes.html)\uff08\u7b2c$2$\u6761\uff09\uff08\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\nconst int N=50000;\nint n,qu;\nvector<int> nei[N+1];//\u90bb\u63a5\u8868 \nchar a[N+1][5];//\u623f\u95f4\u60c5\u51b5 \nint fa[N+1],dep[N+1],sz[N+1],wson[N+1],top[N+1],dfn[N+1],nowdfn,mng[N+1];//\u91cd\u5256 \nvoid dfs1(int x=1){//\u91cd\u5256 \n\tsz[x]=1;\n\tfor(int i=0;i<nei[x].size();i++){\n\t\tint y=nei[x][i];\n\t\tif(y==fa[x])continue;\n\t\tfa[y]=x;\n\t\tdep[y]=dep[x]+1;\n\t\tdfs1(y);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>sz[wson[x]])wson[x]=y;\n\t}\n}\nvoid dfs2(int x=1,int t=1){//\u91cd\u5256 \n\tmng[dfn[x]=++nowdfn]=x;\n\ttop[x]=t;\n\tif(wson[x])dfs2(wson[x],t);\n\tfor(int i=0;i<nei[x].size();i++){\n\t\tint y=nei[x][i];\n\t\tif(y!=fa[x]&&y!=wson[x])dfs2(y,y);\n\t}\n}\nstruct segtree{//\u7ebf\u6bb5\u6811 \n\tstruct node{//\u8282\u70b9 \n\t\tint l,r,mxl[2][2],mxr[2][2];bool can[2][2];\n\t\tnode(){l=0;}//\u7a7a\u8282\u70b9\u7684\u6807\u5fd7 \n\t\tnode rev(){//\u65b9\u5411\u7ffb\u8f6c \n\t\t\tnode res=*this;\n\t\t\tswap(res.mxl[0][0],res.mxr[0][0]);\n\t\t\tswap(res.mxl[0][1],res.mxr[0][1]);\n\t\t\tswap(res.mxl[1][0],res.mxr[1][0]);\n\t\t\tswap(res.mxl[1][1],res.mxr[1][1]);\n\t\t\tswap(res.can[0][1],res.can[1][0]);\n\t\t\treturn res;\n\t\t}\n\t\tvoid prt(){//\u8c03\u8bd5\u7528 \n\t\t\tprintf(\"nd[%d,%d]=\\n\",l,r);\n\t\t\tprintf(\"\\tmxl[0][0]=%d mxl[0][1]=%d mxl[1][0]=%d mxl[1][1]=%d\\n\",mxl[0][0],mxl[0][1],mxl[1][0],mxl[1][1]);\n\t\t\tprintf(\"\\tmxr[0][0]=%d mxr[0][1]=%d mxr[1][0]=%d mxr[1][1]=%d\\n\",mxr[0][0],mxr[0][1],mxr[1][0],mxr[1][1]);\n\t\t\tprintf(\"\\tcan[0][0]=%d can[0][1]=%d can[1][0]=%d can[1][1]=%d\\n\",can[0][0],can[0][1],can[1][0],can[1][1]);\n\t\t}\n\t}nd[N<<2];\n\t#define l(p) nd[p].l\n\t#define r(p) nd[p].r\n\t#define mxl(p) nd[p].mxl\n\t#define mxr(p) nd[p].mxr\n\t#define can(p) nd[p].can\n\tvoid sprup(node &p,node lson,node rson){//\u4e0a\u4f20\uff08\u5373\u5408\u5e76\uff09 \n\t\tif(!lson.l)return p=rson,void();\n\t\tif(!rson.l)return p=lson,void();\n\t\tp.l=lson.l;p.r=rson.r;\n\t\tp.mxl[0][0]=max(lson.mxl[0][0]+lson.can[0][0]*rson.mxl[0][0],lson.mxl[0][1]+lson.can[0][1]*rson.mxl[1][0]);\n\t\tp.mxl[0][1]=max(lson.mxl[0][0]+lson.can[0][0]*rson.mxl[0][1],lson.mxl[0][1]+lson.can[0][1]*rson.mxl[1][1]);\n\t\tp.mxl[1][0]=max(lson.mxl[1][0]+lson.can[1][0]*rson.mxl[0][0],lson.mxl[1][1]+lson.can[1][1]*rson.mxl[1][0]);\n\t\tp.mxl[1][1]=max(lson.mxl[1][0]+lson.can[1][0]*rson.mxl[0][1],lson.mxl[1][1]+lson.can[1][1]*rson.mxl[1][1]);\n\t\tp.mxr[0][0]=max(rson.mxr[0][0]+rson.can[0][0]*lson.mxr[0][0],rson.mxr[0][1]+rson.can[1][0]*lson.mxr[1][0]);\n\t\tp.mxr[0][1]=max(rson.mxr[0][0]+rson.can[0][0]*lson.mxr[0][1],rson.mxr[0][1]+rson.can[1][0]*lson.mxr[1][1]);\n\t\tp.mxr[1][0]=max(rson.mxr[1][0]+rson.can[0][1]*lson.mxr[0][0],rson.mxr[1][1]+rson.can[1][1]*lson.mxr[1][0]);\n\t\tp.mxr[1][1]=max(rson.mxr[1][0]+rson.can[0][1]*lson.mxr[0][1],rson.mxr[1][1]+rson.can[1][1]*lson.mxr[1][1]);\n\t\tp.can[0][0]=lson.can[0][0]&&rson.can[0][0]||lson.can[0][1]&&rson.can[1][0];\n\t\tp.can[0][1]=lson.can[0][0]&&rson.can[0][1]||lson.can[0][1]&&rson.can[1][1];\n\t\tp.can[1][0]=lson.can[1][0]&&rson.can[0][0]||lson.can[1][1]&&rson.can[1][0];\n\t\tp.can[1][1]=lson.can[1][0]&&rson.can[0][1]||lson.can[1][1]&&rson.can[1][1];\n\t}\n\tvoid sprup(int p){sprup(nd[p],nd[p<<1],nd[p<<1|1]);}//\u771f\u6b63\u7684\u4e0a\u4f20 \n\tvoid bld(int l=1,int r=n,int p=1){//\u5efa\u6811 \n\t\tl(p)=l;r(p)=r;\n\t\tif(l==r){//\u533a\u95f4\u5927\u5c0f\u4e3a1\u65f6\u7684\u5904\u7406 \n\t\t\tmxl(p)[0][0]=mxr(p)[0][0]=a[mng[l]][0]=='.';\n\t\t\tmxl(p)[0][1]=mxr(p)[0][1]=a[mng[l]][0]=='.'?a[mng[l]][1]=='.'?2:1:0;\n\t\t\tmxl(p)[1][0]=mxr(p)[1][0]=a[mng[l]][1]=='.'?a[mng[l]][0]=='.'?2:1:0;\n\t\t\tmxl(p)[1][1]=mxr(p)[1][1]=a[mng[l]][1]=='.';\n\t\t\tcan(p)[0][0]=a[mng[l]][0]=='.';\n\t\t\tcan(p)[0][1]=can(p)[1][0]=a[mng[l]][0]=='.'&&a[mng[l]][1]=='.';\n\t\t\tcan(p)[1][1]=a[mng[l]][1]=='.';\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbld(l,mid,p<<1);bld(mid+1,r,p<<1|1);\n\t\tsprup(p);\n\t}\n\tvoid init(){bld();}\n\tnode mx(int l,int r,int p=1){//\u533a\u95f4\u67e5\u8be2 \n\t\tif(l<=l(p)&&r>=r(p))return /*nd[p].prt(),*/nd[p];\n\t\tint mid=l(p)+r(p)>>1;\n\t\tnode res;\n\t\tif(l<=mid)sprup(res,res,mx(l,r,p<<1));\n\t\tif(r>mid)sprup(res,res,mx(l,r,p<<1|1));\n//\t\tres.prt();\n\t\treturn res;\n\t}\n\tvoid chg(int x,char v[],int p=1){//\u5355\u70b9\u4fee\u6539 \n\t\tif(l(p)==r(p)){\n\t\t\tmxl(p)[0][0]=mxr(p)[0][0]=v[0]=='.';\n\t\t\tmxl(p)[0][1]=mxr(p)[0][1]=v[0]=='.'?v[1]=='.'?2:1:0;\n\t\t\tmxl(p)[1][0]=mxr(p)[1][0]=v[1]=='.'?v[0]=='.'?2:1:0;\n\t\t\tmxl(p)[1][1]=mxr(p)[1][1]=v[1]=='.';\n\t\t\tcan(p)[0][0]=v[0]=='.';\n\t\t\tcan(p)[0][1]=can(p)[1][0]=v[0]=='.'&&v[1]=='.';\n\t\t\tcan(p)[1][1]=v[1]=='.';\n\t\t\treturn;\n\t\t}\n\t\tint mid=l(p)+r(p)>>1;\n\t\tchg(x,v,p<<1|(x>mid));\n\t\tsprup(p);\n\t}\n}segt;\nint mx(int x,int y){//\u6811\u4e0a\u94fe\u67e5\u8be2 \n\tsegtree::node res[2];//2\u6761\u76f4\u94fe\u7684\u603b\u7ed3\u679c \n\tbool now=0;//\u5f53\u524d\u5728\u5408\u5e76\u5230\u54ea\u6761\u76f4\u94fe \n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])now^=1,swap(x,y);//\u6539\u53d8\u5f53\u524d\u72b6\u6001 \n\t\tsegt.sprup(res[now],segt.mx(dfn[top[x]],dfn[x]),res[now]);//\u5408\u5e76\u5f53\u524d\u91cd\u94fe\u7684\u7ed3\u679c\u5230\u6240\u5728\u76f4\u94fe\u7684\u603b\u7ed3\u679c \n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])now^=1,swap(x,y);//\u6539\u53d8\u5f53\u524d\u72b6\u6001 \n\tsegt.sprup(res[now],segt.mx(dfn[y],dfn[x]),res[now]);//\u5408\u5e76\u5f53\u524d\u91cd\u94fe\u7684\u7ed3\u679c\u5230\u6240\u5728\u76f4\u94fe\u7684\u603b\u7ed3\u679c\n//\tres[0].rev().prt();res[1].prt();\n\tsegt.sprup(res[0],res[0].rev()/*\u5de6\u76f4\u94fe\u8981\u5de6\u53f3\u7ffb\u8f6c*/,res[1]);//2\u6761\u76f4\u94fe\u5408\u5e76 \n\treturn max(max(res[0].mxl[0][0],res[0].mxl[0][1]),max(res[0].mxl[1][0],res[0].mxl[1][1]));//\u6700\u7ec8\u7b54\u6848 \n}\nint main(){\n\tcin>>n>>qu;\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tnei[x].pb(y);nei[y].pb(x);\n\t}\n\tfor(int i=1;i<=n;i++)cin>>a[i];\n\tdfs1();dfs2();//\u91cd\u5256 \n\tsegt.init();//\u7ebf\u6bb5\u6811\u521d\u59cb\u5316 \n\twhile(qu--){\n\t\tchar tp,z[5];int x,y;\n\t\tcin>>tp>>x;\n\t\tif(tp=='Q')cin>>y,cout<<mx(x,y)<<\"\\n\";\n\t\telse cin>>z,segt.chg(dfn[x],z);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1590669657,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u6d1b\u8c37 P4679 - \u9053\u9986\u4e4b\u6218"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10211747.html )\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P4679)\n\n### ~~\u7801\u519c\u9898~~\u6811\u5256\u597d\u9898\uff0c\u53e3\u888b\u5996\u602a\u662f\u4e2a\u597d\u73a9\u7684\u6e38\u620f\n\n### \u8fd9\u9053\u9898\u8981\u7528\u6811\u94fe\u5256\u5206\uff0c\u6211\u535a\u5ba2\u91cc\u6709[\u5bf9\u6811\u94fe\u5256\u5206\u7684\u8be6\u7ec6\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9966136.html)\n\n#### \u4e0b\u6587\u5de6\u53f3\u5c31\u4ee3\u8868\u6811\u7684\u8282\u70b9\u6309dfs\u5e8f\u540e\u7684\u5de6\u53f3\uff0c\u4e0a\u3001\u4e0b\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684A\u3001B\u533a\u57df\n\n\u8003\u8651\u5728\u94fe\u4e0a\u7684\u60c5\u51b5\uff0c\u5728\u5f53\u524d\u8003\u8651\u7684\u533a\u95f4\u4e2d\uff0c\u4ee4dis[0][0]\u8868\u793a\u4ece\u5de6\u4e0a\u8d70\u5230\u53f3\u4e0a\u7684\u6700\u957f\u8def\uff0cdis[0][1]\u8868\u793a\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b,dis[1][0],dis[1][1]\u4ee5\u6b64\u7c7b\u63a8. \u4ee4maxx[0][0]\u8868\u793a\u4ece\u5de6\u4e0a\u51fa\u53d1\u80fd\u8d70\u7684\u6700\u5927\u8ddd\u79bb,maxx[0][1]\u8868\u793a\u5de6\u4e0b\u7684\uff0cmaxx[1][0]\u8868\u793a\u53f3\u4e0a,maxx[1][1]\u8868\u793a\u53f3\u4e0b.\u5b83\u4eec\u7684\u5408\u5e76\u6bd4\u8f83\u7b80\u5355.\u4ee4\u5f53\u524d\u533a\u95f4\u4e3ac,\u5de6\u534a\u533a\u95f4\u4e3aa,\u53f3\u534a\u533a\u95f4\u4e3ab,\u90a3\u4e48\uff1a\n\n```cpp\n\tc.dis[0][0]=Max(-inf,Max(a.dis[0][0]+b.dis[0][0],a.dis[0][1]+b.dis[1][0]));\n\tc.dis[0][1]=Max(-inf,Max(a.dis[0][0]+b.dis[0][1],a.dis[0][1]+b.dis[1][1]));\n\tc.dis[1][0]=Max(-inf,Max(a.dis[1][1]+b.dis[1][0],a.dis[1][0]+b.dis[0][0]));\n\tc.dis[1][1]=Max(-inf,Max(a.dis[1][1]+b.dis[1][1],a.dis[1][0]+b.dis[0][1]));\n\tc.maxx[0][0]=Max(a.maxx[0][0],Max(a.dis[0][0]+b.maxx[0][0],a.dis[0][1]+b.maxx[0][1]));\n\tc.maxx[0][1]=Max(a.maxx[0][1],Max(a.dis[1][0]+b.maxx[0][0],a.dis[1][1]+b.maxx[0][1]));\n\tc.maxx[1][0]=Max(b.maxx[1][0],Max(b.dis[0][0]+a.maxx[1][0],b.dis[1][0]+a.maxx[1][1]));\n\tc.maxx[1][1]=Max(b.maxx[1][1],Max(b.dis[0][1]+a.maxx[1][0],b.dis[1][1]+a.maxx[1][1]));\n```\n\n\u5728\u6811\u4e0a\u600e\u4e48\u529e\u5462\uff1f\u6bcf\u6b21\u8be2\u95ee\u7684\u662f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u5f88\u663e\u7136\uff0c\u8981\u7528\u7ebf\u6bb5\u6811+\u6811\u94fe\u5256\u5206. \u5982\u679c\u8be2\u95ee\u7684\u4e24\u4e2a\u70b9\u5206\u522b\u662fx,y,\u4ee4lans\u8868\u793ax\u5411\u4e0a\u8df3\u5f97\u5230\u7684\u7b54\u6848\uff0crans\u8868\u793ay\u5411\u4e0a\u8df3\u5f97\u5230\u7684\u7b54\u6848\uff0c\u6700\u540e\u8981\u5c06lans\u53d6\u53cd\u518d\u4e0erans\u5408\u5e76\uff0c\u56e0\u4e3a\u5f53\u4e24\u4e2a\u70b9\u6700\u540e\u8df3\u5230\u4e00\u8d77\u65f6\uff0c\u5b83\u4eec\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u5bf9\u5e94\u53f3\u7aef\u70b9\uff0c\u800c\u6211\u4eec\u8981\u6c42\u5de6\u7aef\u70b9\u5bf9\u5e94\u53f3\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u5bf9\u5e94\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u8981\u53d6\u53cd\uff08\u8fd9\u4e2a\u73c2\u4ee5\u753b\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\u5b50\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define N 50005\n#define inf (1<<30)\nusing namespace std;\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline void Swap(register int &a,register int &b)\n{\n    a^=b^=a^=b;\n}\ninline int Max(register int x,register int y)\n{\n    return x>y?x:y;\n}\nstruct edge{\n    int to,next;\n}eg[N<<1];\nint head[N],cnt=0;\ninline void add(register int u,register int v)\n{\n    eg[++cnt]=(edge){v,head[u]};\n    head[u]=cnt;\n}\nint n,m;\nint size[N],dep[N],fa[N],son[N];\nint tot=0,dl[N],id[N],top[N];\nint a[N][2]; \ninline void dfs1(register int x,register int faa)\n{\n    fa[x]=faa;\n    size[x]=1;\n    dep[x]=dep[faa]+1;\n    for(register int i=head[x];i;i=eg[i].next)\n    {\n    \tint v=eg[i].to;\n    \tif(v==faa)\n    \t\tcontinue;\n    \tdfs1(v,x);\n    \tsize[x]+=size[v];\n    \tif(size[v]>size[son[x]])\n    \t\tson[x]=v;\n    }\n}\ninline void dfs2(register int x,register int t)\n{\n    dl[x]=++tot;\n    id[tot]=x;\n    top[x]=t;\n    if(son[x])\n        dfs2(son[x],t);\n    for(register int i=head[x];i;i=eg[i].next)\n    {\n    \tint v=eg[i].to;\n    \tif(v==fa[x]||v==son[x])\n    \t\tcontinue;\n    \tdfs2(v,v);\n    }\n}\nstruct node{\n    int dis[2][2],maxx[2][2];\n    inline void clear()\n    {\n        memset(dis,0,sizeof(dis));\n        memset(maxx,0,sizeof(maxx));\n    }\n    inline bool emptyy()\n    {\n        if(!dis[0][0]&&!dis[0][1]&&!dis[1][0]&&!dis[1][1]&&!maxx[0][0]&&!maxx[0][1]&&!maxx[1][0]&&!maxx[1][1])\n            return true;\n        return false;\n    }\n}e[N<<2];\ninline node pushup(register node a,register node b)\n{\n    node c;\n    if(a.emptyy())\n        c=b;\n    else if(b.emptyy())\n        c=a;\n    else\n    {\n        c.dis[0][0]=Max(-inf,Max(a.dis[0][0]+b.dis[0][0],a.dis[0][1]+b.dis[1][0]));\n        c.dis[0][1]=Max(-inf,Max(a.dis[0][0]+b.dis[0][1],a.dis[0][1]+b.dis[1][1]));\n        c.dis[1][0]=Max(-inf,Max(a.dis[1][1]+b.dis[1][0],a.dis[1][0]+b.dis[0][0]));\n        c.dis[1][1]=Max(-inf,Max(a.dis[1][1]+b.dis[1][1],a.dis[1][0]+b.dis[0][1]));\n        c.maxx[0][0]=Max(a.maxx[0][0],Max(a.dis[0][0]+b.maxx[0][0],a.dis[0][1]+b.maxx[0][1]));\n        c.maxx[0][1]=Max(a.maxx[0][1],Max(a.dis[1][0]+b.maxx[0][0],a.dis[1][1]+b.maxx[0][1]));\n        c.maxx[1][0]=Max(b.maxx[1][0],Max(b.dis[0][0]+a.maxx[1][0],b.dis[1][0]+a.maxx[1][1]));\n        c.maxx[1][1]=Max(b.maxx[1][1],Max(b.dis[0][1]+a.maxx[1][0],b.dis[1][1]+a.maxx[1][1]));\n    }\n    return c;\n}\ninline void build(register int x,register int l,register int r)\n{\n    if(l==r)\n    {\n        int p=a[id[l]][0],q=a[id[l]][1];\n        if(p==1&&q==1)\n        {\n            e[x].dis[0][0]=e[x].dis[1][1]=1;\n            e[x].dis[0][1]=e[x].dis[1][0]=2;\n            e[x].maxx[0][0]=e[x].maxx[0][1]=e[x].maxx[1][0]=e[x].maxx[1][1]=2;\n        }\n        else if(p==1)\n        {\n            e[x].dis[0][0]=1;\n            e[x].dis[0][1]=e[x].dis[1][0]=e[x].dis[1][1]=-inf;\n            e[x].maxx[0][0]=e[x].maxx[1][0]=1;\n            e[x].maxx[0][1]=e[x].maxx[1][1]=-inf;\n        }\n        else if(q==1)\n        {\n            e[x].dis[0][0]=e[x].dis[0][1]=e[x].dis[1][0]=-inf;\n            e[x].dis[1][1]=1;\n            e[x].maxx[0][0]=e[x].maxx[1][0]=-inf;\n            e[x].maxx[0][1]=e[x].maxx[1][1]=1;\n        }\n        else\n        {\n            for(register int i=0;i<=1;++i)\n                for(register int j=0;j<=1;++j)\n                    e[x].dis[i][j]=e[x].maxx[i][j]=-inf;\n        }\n        return;\n    }\n    int mid=l+r>>1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    e[x]=pushup(e[x<<1],e[x<<1|1]);\n}\ninline void update(register int x,register int l,register int r,register int v,register int p,register int q)\n{\n    if(l==r)\n    {\n        if(p==1&&q==1)\n        {\n            e[x].dis[0][0]=e[x].dis[1][1]=1;\n            e[x].dis[0][1]=e[x].dis[1][0]=2;\n            e[x].maxx[0][0]=e[x].maxx[0][1]=e[x].maxx[1][0]=e[x].maxx[1][1]=2;\n        }\n        else if(p==1)\n        {\n            e[x].dis[0][0]=1;\n            e[x].dis[0][1]=e[x].dis[1][0]=e[x].dis[1][1]=-inf;\n            e[x].maxx[0][0]=e[x].maxx[1][0]=1;\n            e[x].maxx[0][1]=e[x].maxx[1][1]=-inf;\n        }\n        else if(q==1)\n        {\n            e[x].dis[0][0]=e[x].dis[0][1]=e[x].dis[1][0]=-inf;\n            e[x].dis[1][1]=1;\n            e[x].maxx[0][0]=e[x].maxx[1][0]=-inf;\n            e[x].maxx[0][1]=e[x].maxx[1][1]=1;\n        }\n        else\n        {\n            for(register int i=0;i<=1;++i)\n                for(register int j=0;j<=1;++j)\n                    e[x].dis[i][j]=e[x].maxx[i][j]=-inf;\n        }\n        return;\n    }\n    int mid=l+r>>1;\n    if(v<=mid)\n        update(x<<1,l,mid,v,p,q);\n    else\n        update(x<<1|1,mid+1,r,v,p,q);\n    e[x]=pushup(e[x<<1],e[x<<1|1]);\n}\ninline node rev(register node a)\n{\n    Swap(a.maxx[0][0],a.maxx[1][0]);\n    Swap(a.maxx[0][1],a.maxx[1][1]);\n    Swap(a.dis[0][1],a.dis[1][0]);\n    return a;\n}\ninline node query(register int x,register int l,register int r,register int L,register int R)\n{\n    if(l==L&&r==R)\n        return e[x];\n    int mid=l+r>>1;\n    if(R<=mid)\n        return query(x<<1,l,mid,L,R);\n    else if(L>mid)\n        return query(x<<1|1,mid+1,r,L,R);\n    else\n        return pushup(query(x<<1,l,mid,L,mid),query(x<<1|1,mid+1,r,mid+1,R));\n}\ninline int Query(register int x,register int y)\n{\n    node lans,rans;\n    lans.clear();\n    rans.clear();\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]])\n        {\n            rans=pushup(query(1,1,n,dl[top[y]],dl[y]),rans);\n            y=fa[top[y]];\n        }\n        else\n        {\n            lans=pushup(query(1,1,n,dl[top[x]],dl[x]),lans);\n            x=fa[top[x]];\n        }\n    }\n    if(dep[x]>dep[y])\n        lans=pushup(query(1,1,n,dl[y],dl[x]),lans);\n    else\n        rans=pushup(query(1,1,n,dl[x],dl[y]),rans);\n    lans=pushup(rev(lans),rans);\n    int res=Max(lans.maxx[0][0],lans.maxx[0][1]);\n    return res<0?0:res;\n}\nint main()\n{\n    n=read(),m=read();\n    for(register int i=1;i<n;++i)\n    {\n        int u=read(),v=read();\n        add(u,v),add(v,u);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    for(register int i=1;i<=n;++i)\n    {\n        char ch[3];\n        scanf(\"%s\",ch);\n        a[i][0]=(ch[0]=='.')?1:0;\n        a[i][1]=(ch[1]=='.')?1:0;\n    }\n    build(1,1,n);\n    while(m--)\n    {\n        char c=getchar();\n        while(c!='C'&&c!='Q')\n            c=getchar();\n        if(c=='C')\n        {\n            int u=read();\n            char s[3];\n            scanf(\"%s\",s);\n            int p=(s[0]=='.')?1:0,q=(s[1]=='.')?1:0;\n            update(1,1,n,dl[u],p,q);\n        }\n        else\n        {\n            int u=read(),v=read();\n            write(Query(u,v)),puts(\"\");\n        }\n    } \n    return 0;\n}\n```",
        "postTime": 1546440012,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4679 \u3010[ZJOI2011]\u9053\u9986\u4e4b\u6218\u3011"
    },
    {
        "content": "\u5f88\u6076\u81ed\u7684\u6811\u5256\u9898\u3002\n\n\u9996\u5148\u8003\u8651\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u60c5\u51b5\uff1a\n\n\u6211\u4eec\u5b9a\u4e49$(0,0)$\u5de6\u4e0a$\\rightarrow$\u53f3\u4e0a\uff0c$(0,1)$\u5de6\u4e0a$\\rightarrow$\u53f3\u4e0b\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002$dis$\u4e3a\u6700\u957f\u8def\uff0c$l/rmax$\u4e3a\u4ece\u5de6/\u53f3\u51fa\u53d1\u7684\u7b54\u6848\u3002\n\n\u533a\u95f4$\\max$\u60f3\u5230\u7ebf\u6bb5\u6811\uff0c\u5408\u5e76\u5c31\u662f\u5206\u7c7b\u8ba8\u8bba\uff1a\n```cpp\nnode merge(node a, node b) {\n    node tmp;\n    tmp.dis[0][0] = max(a.dis[0][0] + b.dis[0][0], a.dis[0][1] + b.dis[1][0]);\n    if (tmp.dis[0][0] < 0)\n        tmp.dis[0][0] = -INF;\n    tmp.dis[0][1] = max(a.dis[0][0] + b.dis[0][1], a.dis[0][1] + b.dis[1][1]);\n    if (tmp.dis[0][1] < 0)\n        tmp.dis[0][1] = -INF;\n    tmp.dis[1][0] = max(a.dis[1][0] + b.dis[0][0], a.dis[1][1] + b.dis[1][0]);\n    if (tmp.dis[1][0] < 0)\n        tmp.dis[1][0] = -INF;\n    tmp.dis[1][1] = max(a.dis[1][0] + b.dis[0][1], a.dis[1][1] + b.dis[1][1]);\n    if (tmp.dis[1][1] < 0)\n        tmp.dis[1][1] = -INF;\n    tmp.lmax[0] = max(a.dis[0][0] + b.lmax[0], a.dis[0][1] + b.lmax[1]);\n    tmp.lmax[0] = max(tmp.lmax[0], a.lmax[0]);\n    if (tmp.lmax[0] < 0)\n        tmp.lmax[0] = -INF;\n    tmp.lmax[1] = max(a.dis[1][0] + b.lmax[0], a.dis[1][1] + b.lmax[1]);\n    tmp.lmax[1] = max(tmp.lmax[1], a.lmax[1]);\n    if (tmp.lmax[1] < 0)\n        tmp.lmax[1] = -INF;\n    tmp.rmax[0] = max(b.dis[0][0] + a.rmax[0], b.dis[1][0] + a.rmax[1]);\n    tmp.rmax[0] = max(tmp.rmax[0], b.rmax[0]);\n    if (tmp.rmax[0] < 0)\n        tmp.rmax[0] = -INF;\n    tmp.rmax[1] = max(b.dis[0][1] + a.rmax[0], b.dis[1][1] + a.rmax[1]);\n    tmp.rmax[1] = max(tmp.rmax[1], b.rmax[1]);\n    if (tmp.rmax[1] < 0)\n        tmp.rmax[1] = -INF;\n    return tmp;\n}\n```\n\u518d\u8003\u8651\u6811\u4e0a\u7684\u60c5\u51b5\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u91cd\u94fe\u5256\u5206\u8f6c\u6210\u94fe\u4e0a\u7684\u95ee\u9898\u6c42\u89e3\u3002\n\n\u7531\u4e8e\u6211\u4eec\u662f\u5728\u6811\u4e0a\u7edf\u8ba1\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u51fa$(x,y)$\u7684 LCA $z$\uff0c\u7b97\u51fa$x \\rightarrow z$\u548c$z \\rightarrow y$\u7684\u7b54\u6848\u3002\u4f46\u662f\u6811\u5256\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u6240\u4ee5\u9700\u8981\u7ffb\u8f6c\u4e00\u6761\u94fe\u3002\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nnamespace PragmaGCC {\n\t#define isdigit(ch) (ch >= '0' && ch <= '9')\n\t#define debug(...) fprintf(stderr,__VA_ARGS__)\n\t#define Debug(x) debug(\"Passing [%s] in LINE %d , %s=%d\\n\",__FUNCTION__,__LINE__,#x,x)\n\ttemplate <typename T> T read(T &n) {\n\t\tint f = 1; char ch = getchar();\n\t\tn = 0;\n\t\tfor (; !isdigit(ch); ch=getchar()) if (ch == '-') f = -1;\n\t\tfor (; isdigit(ch); ch=getchar()) n = (n << 3) + (n << 1) + (ch ^ 48);\n\t\treturn n *= f;\n\t}\n\ttemplate <typename T> void write(T x) {\n\t    char F[200];\n\t    if (!x) putchar('0');\n\t    if(x < 0) putchar('-'), x = -x;\n\t    int cnt = 0;\n    \tfor (; x; x/=10) F[cnt++] = x % 10 + '0';\n     \twhile(cnt > 0) putchar(F[--cnt]);\n\t}\n}\nusing namespace PragmaGCC; \nconst int N = 60007, INF = 1e9;\nint n, m;\nbool mp[N][2];\nstruct Edge {\n    int to, next;\n} e[N << 1];\nint head[N], ecnt;\nvoid addedge(int from, int to) {\n    e[++ecnt] = (Edge){ to, head[from] };\n    head[from] = ecnt;\n}\nint dep[N], pre[N], siz[N];\nint hson[N], dfn[N], tot, pos[N], top[N];\nvoid dfs1(int x, int fa) {\n    dep[x] = dep[fa] + 1;\n    pre[x] = fa, siz[x] = 1;\n    for (int i = head[x]; i; i = e[i].next) {\n        const int y = e[i].to;\n        if (y == fa)\n            continue;\n        dfs1(y, x);\n        siz[x] += siz[y];\n        if (siz[y] > siz[hson[x]])\n            hson[x] = y;\n    }\n}\nvoid dfs2(int x, int tp) {\n    dfn[x] = ++tot, pos[tot] = x, top[x] = tp;\n    if (hson[x])\n        dfs2(hson[x], tp);\n    for (int i = head[x]; i; i = e[i].next) {\n        const int y = e[i].to;\n        if ((y == pre[x]) || (y == hson[x]))\n            continue;\n        dfs2(y, y);\n    }\n}\nstruct node {\n    int lmax[2], rmax[2], dis[2][2];\n} t[N << 2];\n#define ls(k) k << 1\n#define rs(k) k << 1 | 1\nnode reset = { { 0, 0 }, { 0, 0 }, { { 0, 0 }, { 0, 0 } } };\nnode merge(node a, node b) {\n    node tmp;\n    tmp.dis[0][0] = max(a.dis[0][0] + b.dis[0][0], a.dis[0][1] + b.dis[1][0]);\n    if (tmp.dis[0][0] < 0)\n        tmp.dis[0][0] = -INF;\n    tmp.dis[0][1] = max(a.dis[0][0] + b.dis[0][1], a.dis[0][1] + b.dis[1][1]);\n    if (tmp.dis[0][1] < 0)\n        tmp.dis[0][1] = -INF;\n    tmp.dis[1][0] = max(a.dis[1][0] + b.dis[0][0], a.dis[1][1] + b.dis[1][0]);\n    if (tmp.dis[1][0] < 0)\n        tmp.dis[1][0] = -INF;\n    tmp.dis[1][1] = max(a.dis[1][0] + b.dis[0][1], a.dis[1][1] + b.dis[1][1]);\n    if (tmp.dis[1][1] < 0)\n        tmp.dis[1][1] = -INF;\n    tmp.lmax[0] = max(a.dis[0][0] + b.lmax[0], a.dis[0][1] + b.lmax[1]);\n    tmp.lmax[0] = max(tmp.lmax[0], a.lmax[0]);\n    if (tmp.lmax[0] < 0)\n        tmp.lmax[0] = -INF;\n    tmp.lmax[1] = max(a.dis[1][0] + b.lmax[0], a.dis[1][1] + b.lmax[1]);\n    tmp.lmax[1] = max(tmp.lmax[1], a.lmax[1]);\n    if (tmp.lmax[1] < 0)\n        tmp.lmax[1] = -INF;\n    tmp.rmax[0] = max(b.dis[0][0] + a.rmax[0], b.dis[1][0] + a.rmax[1]);\n    tmp.rmax[0] = max(tmp.rmax[0], b.rmax[0]);\n    if (tmp.rmax[0] < 0)\n        tmp.rmax[0] = -INF;\n    tmp.rmax[1] = max(b.dis[0][1] + a.rmax[0], b.dis[1][1] + a.rmax[1]);\n    tmp.rmax[1] = max(tmp.rmax[1], b.rmax[1]);\n    if (tmp.rmax[1] < 0)\n        tmp.rmax[1] = -INF;\n    return tmp;\n}\nnode change(bool *a) {\n    node res;\n    if (a[0] && a[1]) {\n        res.lmax[0] = res.lmax[1] = res.rmax[0] = res.rmax[1] = 2;\n        res.dis[0][0] = res.dis[1][1] = 1;\n        res.dis[0][1] = res.dis[1][0] = 2;\n    } else if (a[0]) {\n        res.lmax[0] = res.rmax[0] = res.dis[0][0] = 1;\n        res.lmax[1] = res.rmax[1] = -INF;\n        res.dis[0][1] = res.dis[1][0] = res.dis[1][1] = -INF;\n    } else if (a[1]) {\n        res.lmax[1] = res.rmax[1] = res.dis[1][1] = 1;\n        res.lmax[0] = res.rmax[0] = 0;\n        res.dis[0][1] = res.dis[1][0] = res.dis[0][0] = -INF;\n    } else {\n        res.lmax[0] = res.lmax[1] = res.rmax[0] = res.rmax[1] = -INF;\n        res.dis[0][0] = res.dis[1][1] = -INF;\n        res.dis[0][1] = res.dis[1][0] = -INF;\n    }\n    return res;\n}\nvoid build(int k, int l, int r) {\n    if (l == r) {\n        t[k] = change(mp[pos[l]]);\n        return;\n    }\n    const int mid = (l + r) >> 1;\n    build(ls(k), l, mid), build(rs(k), mid + 1, r);\n    t[k] = merge(t[ls(k)], t[rs(k)]);\n    return;\n}\nvoid update(int k, int l, int r, int p, bool *rm) {\n    if (l == r) {\n        t[k] = change(rm);\n        return;\n    }\n    const int mid = (l + r) >> 1;\n    if (p <= mid)\n        update(ls(k), l, mid, p, rm);\n    else\n        update(rs(k), mid + 1, r, p, rm);\n    t[k] = merge(t[ls(k)], t[rs(k)]);\n    return;\n}\nnode query(int k, int l, int r, int ql, int qr) {\n    if (l >= ql && r <= qr) {\n        return t[k];\n    }\n    const int mid = (l + r) >> 1;\n    if (mid >= qr)\n        return query(ls(k), l, mid, ql, qr);\n    else if (mid < ql)\n        return query(rs(k), mid + 1, r, ql, qr);\n    else\n        return merge(query(ls(k), l, mid, ql, qr), query(rs(k), mid + 1, r, ql, qr));\n}\nint qquery(int x, int y) {\n    node res1 = reset, res2 = reset;\n    while (top[x] != top[y]) {\n        if (dep[top[x]] > dep[top[y]])\n            res1 = merge(query(1, 1, n, dfn[top[x]], dfn[x]), res1), x = pre[top[x]];\n        else\n            res2 = merge(query(1, 1, n, dfn[top[y]], dfn[y]), res2), y = pre[top[y]];\n    }\n    if (dep[x] > dep[y])\n        res1 = merge(query(1, 1, n, dfn[y], dfn[x]), res1);\n    else\n        res2 = merge(query(1, 1, n, dfn[x], dfn[y]), res2);\n    swap(res1.lmax[0], res1.rmax[0]);\n    swap(res1.lmax[1], res1.rmax[1]);\n    swap(res1.dis[0][1], res1.dis[1][0]);\n    res1 = merge(res1, res2);\n    return max(res1.lmax[0], res1.lmax[1]);\n}\nchar tmp[5];\nint main(void) {\n    read(n), read(m);\n    for (int i = 1, u, v; i < n; i++) {\n        read(u), read(v);\n        addedge(u, v), addedge(v, u);\n    }\n    dfs1(1, 0), dfs2(1, 1);\n    for (int i = 1; i <= n; i++) {\n    \tscanf(\"%s\", tmp);\n    \tmp[i][0] = (tmp[0] == '.'), mp[i][1] = (tmp[1] == '.');\n    }\n    build(1, 1, n);\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%s\", tmp);\n        int x, y;\n        if (tmp[0] == 'C') {\n            read(x);\n            scanf(\"%s\", tmp);\n            mp[x][0] = (tmp[0] == '.'), mp[x][1] = (tmp[1] == '.');\n            update(1, 1, n, dfn[x], mp[x]);\n        } else {\n            read(x), read(y);\n            write(qquery(x, y));\n            puts(\"\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1613794164,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4679 \u3010[ZJOI2011]\u9053\u9986\u4e4b\u6218\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709 $A,B$ \u4e24\u4e2a\u623f\u95f4\uff0c\u4e00\u4e9b\u623f\u95f4\u53ef\u4ee5\u8d70\u4e00\u4e9b\u4e0d\u884c\uff0c\u53ea\u80fd\u4ece\u540c\u4e00\u4e2a\u623f\u95f4\u7684 $A\\to B$ \u6216\u8d70\u5230\u4e0d\u540c\u8282\u70b9\u7684\u540c\u4e00\u4e2a\u623f\u95f4\u3002\u4ece $u$ \u5230 $v$ \u7684\u8def\u5f84\u6700\u591a\u7ecf\u8fc7\u51e0\u4e2a\u623f\u95f4\u3002\u52a8\u6001\u4fee\u6539\u3002\n## \u9898\u89e3\n\u8c8c\u4f3c\u5168\u662f\u6811\u5256\uff0c\u8fd9\u91cc\u6765\u4e00\u53d1 $\\mathbf{ LCT}$\n\n\u5176\u5b9e\u64cd\u4f5c\u5341\u5206\u677f\uff0c\u4e0d\u8fc7\u7ec6\u8282\u662f\u771f\u5fc3\u591a\u3002\n\n\u7528\u4e00\u4e2a `node` \u6765\u8868\u793a\u72b6\u6001:\n\n1. $lmx_{i} (i\\in\\{0,1\\})$ \u8868\u793a\u4ece\u5f53\u524d\u8282\u70b9\u6700\u5de6\u4fa7\u7684 $i$ \u623f\u95f4\u5f00\u59cb\u7684\u6700\u5927\u8ddd\u79bb\n1. $rmx_{i} (i\\in\\{0,1\\})$ \u8868\u793a\u4ece\u5f53\u524d\u8282\u70b9\u6700\u53f3\u4fa7\u7684 $i$ \u623f\u95f4\u5f00\u59cb\u7684\u6700\u5927\u8ddd\u79bb\n1. $dis_{i,j}(i,j\\in\\{0,1\\})$ \u8868\u793a\u4ece\u5f53\u524d\u8282\u70b9\u6700\u5de6\u4fa7 $i$ \u623f\u95f4\u5230\u6700\u53f3\u4fa7 $j$ \u623f\u95f4\u7684\u6700\u5927\u8ddd\u79bb\u3002\n\n\u5408\u5e76\u7a0d\u5fae\u601d\u8003\u4e00\u4e0b\u5373\u53ef\u3002~~\u867d\u7136\u6211\u5199\u6302\u8c03\u8bd5\u4e863\u4e2a\u5c0f\u65f6~~\n\n\u7ffb\u8f6c\u65f6\u4e0d\u8981\u5fd8\u8bb0 `node` \u7684\u4fe1\u606f\u4e5f\u8981\u7ffb\u8f6c\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nnamespace in{\n\t#ifndef slow\n\tchar buf[1<<21],*p1=buf,*p2=buf;\n\tinline int getc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n\t#else\n\tinline int getc(){return getchar();}\n\t#endif\n\ttemplate <typename T>inline void read(T& t){\n\t\tt=0;int f=0;char ch=getc();while (!isdigit(ch)){if(ch=='-')f = 1;ch=getc();}\n\t    while(isdigit(ch)){t=t*10+ch-48;ch = getc();}if(f)t=-t;\n\t}\n\ttemplate <typename T,typename... Args> inline void read(T& t, Args&... args){read(t);read(args...);}\n\tchar getC(){char c=getc();while(c!='#'&&c!='.'&&!isalpha(c))c=getc();return c;}\n}\nnamespace out{\n\tchar buffer[1<<21];int p1=-1;const int p2 = (1<<21)-1;\n\tinline void flush(){fwrite(buffer,1,p1+1,stdout),p1=-1;}\n\tinline void putc(const char &x) {if(p1==p2)flush();buffer[++p1]=x;}\n\ttemplate <typename T>void write(T x) {\n\t\tstatic char buf[15];static int len=-1;if(x>=0){do{buf[++len]=x%10+48,x/=10;}while (x);}else{putc('-');do {buf[++len]=-(x%10)+48,x/=10;}while(x);}\n\t\twhile (len>=0)putc(buf[len]),--len;\n\t}\n}\nusing namespace std;\nconst int N=1e5+10;\nconst int inf=1e9;\n#define chkmx(a,b) (a)=max((a),(b))\nint n,m,c[N][2],f[N],r[N],v[N][2];\nstruct node{\n\tint lmx[2],rmx[2];int dis[2][2];\n\tnode(){\n\t\tmemset(lmx,0,sizeof lmx);\n\t\tmemset(rmx,0,sizeof rmx);\n\t\tmemset(dis,0,sizeof dis);\n\t}\n\tnode(int *a){\n\t\tmemset(lmx,0,sizeof lmx);\n\t\tmemset(rmx,0,sizeof rmx);\n\t\tmemset(dis,0,sizeof dis);\n\t\tif(a[0]&&a[1]){\n\t\t\tfor(int i=0;i<2;i++)lmx[i]=rmx[i]=2;\n\t\t\tfor(int i=0;i<2;i++)\n\t\t\t\tfor(int j=0;j<2;j++)\n\t\t\t\t\tdis[i][j]=i==j?1:2;\n\t\t}\n\t\telse if(a[0]||a[1]){\n\t\t\tint op=a[0]?0:1;\n\t\t\tlmx[op]=rmx[op]=dis[op][op]=1;\n\t\t\tlmx[op^1]=rmx[op^1]=0;\n\t\t\tdis[op][op^1]=dis[op^1][op]=dis[op^1][op^1]=-inf;\n\t\t}\n\t\telse{\n\t\t\tfor(int i=0;i<2;i++)lmx[i]=rmx[i]=0;\n\t\t\tfor(int i=0;i<2;i++)\n\t\t\t\tfor(int j=0;j<2;j++)\n\t\t\t\t\tdis[i][j]=-inf;\n\t\t}\n\t}\n\tfriend node operator+(const node l,const node r){\n\t\tnode res=node();\n\t\tfor(int i=0;i<2;i++)\n\t\t\tfor(int j=0;j<2;j++)\n\t\t\t\tchkmx(res.lmx[i],max(l.lmx[i],l.dis[i][j]+r.lmx[j]));\n\t\tfor(int i=0;i<2;i++)\n\t\t\tfor(int j=0;j<2;j++)\n\t\t\t\tchkmx(res.rmx[i],max(r.rmx[i],r.dis[j][i]+l.rmx[j]));\n\t\tfor(int i=0;i<2;i++)\n\t\t\tfor(int j=0;j<2;j++){\n\t\t\t\tres.dis[i][j]=-inf;\n\t\t\t\tfor(int k=0;k<2;k++)\n\t\t\t\t\tchkmx(res.dis[i][j],l.dis[i][k]+r.dis[k][j]);\n\t\t\t}\n\t\treturn res;\n\t}\n}t[N];\n//v=1 \u53ef\u8d70 \u5426\u5219\u4e0d\u53ef\u8d70\n#define lc c[x][0]\n#define rc c[x][1]\n#define get(x) (c[f[x]][1]==x)\n#define nroot(x) (c[f[x]][0]==x||c[f[x]][1]==x)\nvoid pushr(int x){\n\tswap(lc,rc);r[x]^=1;\n\tswap(t[x].rmx,t[x].lmx);\n\tswap(t[x].dis[0][1],t[x].dis[1][0]);\n}\nvoid pushdown(int x){\n\tif(r[x]){\n\t\tif(lc)pushr(lc);\n\t\tif(rc)pushr(rc);\n\t\tr[x]=0;\n\t}\n}\nvoid pushall(int x){\n\tif(nroot(x))pushall(f[x]);\n\tpushdown(x);\n}\n#define chkmx(a,b) (a)=max((a),(b))\nvoid pushup(int x){\n\t//***********************************\n\tt[x]=node(v[x]);\n\tif(lc)t[x]=t[lc]+t[x];\n\tif(rc)t[x]=t[x]+t[rc];\n}\nvoid rotate(int x){\n\tint fa=f[x],ffa=f[fa],k=get(x),w=c[x][!k];\n\tif(nroot(fa))c[ffa][get(fa)]=x;c[x][!k]=fa;c[fa][k]=w;\n\tif(w)f[w]=fa;f[x]=ffa;f[fa]=x;pushup(fa);\n}\nvoid splay(int x){\n\tpushall(x);\n\twhile(nroot(x)){\n\t\tint fa=f[x];\n\t\tif(nroot(fa))\n\t\t\trotate(get(x)==get(fa)?fa:x);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\nvoid access(int x){\n\tfor(int y=0;x;y=x,x=f[x])\n\t\tsplay(x),rc=y,pushup(x);\n}\nvoid makeroot(int x){\n\taccess(x);splay(x);pushr(x);\n}\nvoid split(int x,int y){\n\tmakeroot(x);access(y);splay(y);\n}\nvector<int>e[N];\nvoid dfs(int u){\n\tfor(auto v:e[u])if(v!=f[u])\n\t\tf[v]=u,dfs(v);\n\tpushup(u);\n}\nsigned main(){\n\t//freopen(\"9.in\",\"r\",stdin);\n\t//freopen(\"my.out\",\"w\",stdout);\n\tin::read(n,m);\n\tfor(int i=1,x,y;i<n;i++)\n\t\tin::read(x,y),e[x].push_back(y),e[y].push_back(x);\n\tfor(int i=1;i<=n;i++){\n\t\tv[i][0]=in::getC()=='.';\n\t\tv[i][1]=in::getC()=='.';\n\t}\n\tdfs(1);\n\twhile(m--){\n\t\tchar op=in::getC();\n\t\tif(op=='Q'){\n\t\t\tint u,v;in::read(u,v);\n\t\t\tsplit(u,v);\n\t\t\t//out::write(u);out::putc(' ');\n\t\t\t//out::write(v);out::putc(' ');\n\t\t\tout::write(max(t[v].lmx[0],t[v].lmx[1]));out::putc('\\n');\n\t\t}else{\n\t\t\tint u;in::read(u);splay(u);\n\t\t\tv[u][0]=in::getC()=='.';\n\t\t\tv[u][1]=in::getC()=='.';\n\t\t\tpushup(u);\n\t\t}\n\t}\n\tout::flush();\n\treturn 0;\n}\n```",
        "postTime": 1612765965,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4679 \u3010[ZJOI2011]\u9053\u9986\u4e4b\u6218\u3011"
    },
    {
        "content": "## \u300cZJOI2011\u300d\u9053\u9986\u4e4b\u6218\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9 $2$ \u4e2a\u623f\u95f4\uff0c\u53ef\u4ee5\u4e3a\u8584\u51b0\u6216\u8005\u969c\u788d\u7269\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u64cd\u4f5c\uff1a\u4fee\u6539\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u623f\u95f4\uff0c\u67e5\u8be2\u4ece $u$ \u8d70\u5230 $v$ \u6700\u591a\u53ef\u4ee5\u7ecf\u8fc7\u591a\u5c11\u8584\u51b0\uff08\u6700\u7ec8\u53ef\u4ee5\u4e0d\u5230\u8fbe $v$\uff09\u3002\n\n---\n\n\u6beb\u65e0\u7591\u95ee\uff0c\u7ef4\u62a4\u6811\u4e0a\u4fe1\u606f\uff0c\u80af\u5b9a\u662f\u9700\u8981\u91cd\u94fe\u5256\u5206\u7684\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u4fe1\u606f\uff08\u5176\u4e2d $0 \\le i,j \\le 1$\uff09\u3002\n\n$lmax_i$\uff1a\u8868\u793a\u4ece $l$ \u7684 $i$ \u623f\u95f4\u51fa\u53d1\u5411 $r$ \u51fa\u53d1\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u8584\u51b0\uff08\u6ce8\u610f\u6700\u7ec8\u53ef\u4ee5\u4e0d\u7528\u5230\u8fbe $r$\uff0c\u5e76\u4e14\u6700\u591a\u8d70\u5230 $r$\uff09\u3002\n\n$rmax_i$\uff1a\u8868\u793a\u4ece $r$ \u7684 $i$ \u623f\u95f4\u51fa\u53d1\u5411 $l$ \u51fa\u53d1\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u8584\u51b0\uff08\u540c\u6837\u6700\u7ec8\u53ef\u4ee5\u4e0d\u7528\u5230\u8fbe $l$\uff0c\u5e76\u4e14\u6700\u591a\u8d70\u5230 $l$\uff09\u3002\n\n$dis_{i,j}$\uff1a\u8868\u793a\u4ece $l$ \u7684 $i$ \u623f\u95f4\u8d70\u5230 $r$ \u7684 $j$ \u623f\u95f4\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u8584\u51b0\uff08\u8fd9\u6b21\u662f\u5fc5\u987b\u5230\u8fbe\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5982\u4e0b\u4ee3\u7801\u5c06\u4e24\u4e2a\u76f8\u90bb\u533a\u95f4\u5408\u5e76\u4e3a\u4e00\u4e2a\u533a\u95f4\u4e86\u3002\n\n```cpp\nfor(int i=0;i<=1;i++){\n\tfor(int j=0;j<=1;j++){\n\t\tc.lmax[i]=max(c.lmax[i],max(a.lmax[i],a.dis[i][j]+b.lmax[j]));\n\t\tc.rmax[i]=max(c.rmax[i],max(b.rmax[i],b.dis[j][i]+a.rmax[j]));\n\t\tfor(int k=0;k<=1;k++) c.dis[i][j]=max(-INF,c.dis[i][j],a.dis[i][k]+b.dis[k][j]);\n\t}\n}\n```\n\n\u4f46\u662f\u5bf9\u4e8e\u6700\u540e\u5bf9\u4e8e\u6811\u5256\u67e5\u8be2\u5408\u5e76\u4e24\u6761\u94fe\u5b50\u65f6\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\uff1a\n\n![1](https://cdn.fzoi.top/upload/user/c1120241532/23010907224248.png)\n\n\u4f46\u7531\u4e8e\u662f\u6811\u5256\u5411\u4e0a\u8df3\u4ece\u800c\u6c42\u5f97\u7b54\u6848\uff0c\u6240\u4ee5\u5b9e\u9645\u7684\u5e94\u8be5\u662f\uff1a\n\n![2](https://cdn.fzoi.top/upload/user/c1120241532/23010907255220.png)\n\n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u8fd9\u6837\u5c06\u5de6\u8fb9\u7684\u94fe\u65cb\u8f6c\uff08\u56e0\u4e3a\u5177\u6709\u5bf9\u79f0\u6027\uff0c\u6240\u4ee5\u4e0d\u662f\u5168\u90e8\u65cb\u8f6c\uff09\uff1a\n\n```cpp\nswap(res.lmax[0],res.rmax[0]);\nswap(res.lmax[1],res.rmax[1]);\nswap(res.dis[1][0],res.dis[0][1]);\n```\n\n\u8fd9\u91cc\u518d\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u8bbe\u8ba1\u7ebf\u6bb5\u6811\u6240\u8bb0\u5f55\u7684\u4fe1\u606f\uff1a\n\n\u5bf9\u4e8e $lmax_i$ \u5f88\u660e\u663e\u662f\u7528\u6765\u8bb0\u5f55\u7b54\u6848\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u6700\u540e\u9700\u8981\u65cb\u8f6c\uff0c\u65b9\u5411\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55 $rmax_i$\uff0c\u5bf9\u4e8e $dis_{i,j}$ \u6211\u4eec\u9700\u8981\u7528\u6765\u5408\u5e76\u7b54\u6848\u3002\u4f46\u662f\u53ef\u80fd\u4f1a\u6709\u4eba\u8ba4\u4e3a $dis_{i,j}$ \u6ca1\u7528\uff0c\u4f46\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u201c\u6700\u7ec8\u53ef\u4ee5\u4e0d\u5230\u8fbe $v$\u201d\uff0c\u6240\u4ee5\u4f1a\u5b58\u5728\u9519\u8bef\u5408\u5e76\uff0c\u4f8b\u5982\u4e0b\u56fe\uff1a\n\n![3](https://cdn.fzoi.top/upload/user/c1120241532/23010907585545.png)\n\n\u7ea2\u8272\u8def\u5f84\u4e3a $dis_{0,0}$ \u7684\u7b54\u6848\u8def\u5f84\uff0c\u84dd\u8272\u8def\u5f84\u4e3a $lmax_0$ \u7684\u8def\u5f84\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,tot,siz[50001],fa[50001],top[50001],son[50001],dep[50001],dfn[50001];\nvector <int> G[50001];\nchar s[10];\nvoid dfs1(int rt){\n\tson[rt]=-1;\n\tsiz[rt]=1;\n\tfor(int i=0;i<G[rt].size();i++){\n\t\tint to=G[rt][i];\n\t\tif(!dep[to]){\n\t\t\tdep[to]=dep[rt]+1;\n\t\t\tfa[to]=rt;\n\t\t\tdfs1(to);\n\t\t\tsiz[rt]+=siz[to];\n\t\t\tif(son[rt]==-1||siz[to]>siz[son[rt]]) son[rt]=to;\n\t\t}\n\t}\n}\nvoid dfs2(int rt,int t){\n\ttop[rt]=t;\n\tdfn[rt]=++tot;\n\tif(son[rt]==-1) return;\n\tdfs2(son[rt],t);\n\tfor(int i=0;i<G[rt].size();i++){\n\t\tint to=G[rt][i];\n\t\tif(to!=son[rt]&&to!=fa[rt]) dfs2(to,to);\n\t}\n}\nstruct node{\n\tint lmax[3],rmax[3],dis[3][3];\n\tnode(){\n\t\tmemset(lmax,0,sizeof(lmax));\n\t\tmemset(rmax,0,sizeof(rmax));\n\t\tmemset(dis,0,sizeof(dis));\n\t}\n\tbool empty(){\n\t\tif(!lmax[0]&&!lmax[1]&&!rmax[0]&&!rmax[1]&&!dis[0][0]&&!dis[0][1]&&!dis[1][0]&&!dis[1][1]) return true;\n\t\telse return false;\n\t}\n}t[200001];\nnode merge(node a,node b){\n\tnode c;\n\tif(a.empty()) return b;\n\tif(b.empty()) return a;\n\tfor(int i=0;i<=1;i++){\n\t\tfor(int j=0;j<=1;j++){\n\t\t\tc.lmax[i]=max(c.lmax[i],max(a.lmax[i],a.dis[i][j]+b.lmax[j]));\n\t\t\tc.rmax[i]=max(c.rmax[i],max(b.rmax[i],b.dis[j][i]+a.rmax[j]));\n\t\t\tc.dis[i][j]=-1e8;\n\t\t\tfor(int k=0;k<=1;k++) c.dis[i][j]=max(c.dis[i][j],a.dis[i][k]+b.dis[k][j]);\n\t\t}\n\t}\n\treturn c;\n}\nvoid updata(int rt,int l,int r,int x,int v1,int v2){\n\tif(l==r){\n\t\tif(v1==1&&v2==1){\n\t\t\tt[rt].lmax[0]=t[rt].lmax[1]=t[rt].rmax[0]=t[rt].rmax[1]=t[rt].dis[0][1]=t[rt].dis[1][0]=2;\n\t\t\tt[rt].dis[0][0]=t[rt].dis[1][1]=1;\n\t\t}\n\t\telse if(v1==1&&v2==0){\n\t\t\tt[rt].lmax[0]=t[rt].rmax[0]=t[rt].dis[0][0]=1;\n\t\t\tt[rt].lmax[1]=t[rt].rmax[1]=0;\n\t\t\tt[rt].dis[1][1]=t[rt].dis[1][0]=t[rt].dis[0][1]=-1e8;\n\t\t}\n\t\telse if(v1==0&&v2==1){\n\t\t\tt[rt].lmax[1]=t[rt].rmax[1]=t[rt].dis[1][1]=1;\n\t\t\tt[rt].lmax[0]=t[rt].rmax[0]=0;\n\t\t\tt[rt].dis[0][0]=t[rt].dis[1][0]=t[rt].dis[0][1]=-1e8;\n\t\t}\n\t\telse{\n\t\t\tt[rt].lmax[0]=t[rt].lmax[1]=t[rt].rmax[0]=t[rt].rmax[1]=0;\n\t\t\tt[rt].dis[0][0]=t[rt].dis[0][1]=t[rt].dis[1][0]=t[rt].dis[1][1]=-1e8;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(x<=mid) updata(rt*2,l,mid,x,v1,v2);\n\telse updata(rt*2+1,mid+1,r,x,v1,v2);\n\tt[rt]=merge(t[rt*2],t[rt*2+1]);\n}\nnode query(int rt,int l,int r,int L,int R){\n\tif(L<=l&&r<=R) return t[rt];\n\tint mid=(l+r)/2;\n\tnode res;\n\tif(L<=mid) res=merge(res,query(rt*2,l,mid,L,R));\n\tif(R>mid) res=merge(res,query(rt*2+1,mid+1,r,L,R));\n\treturn res;\n}\nint lookup(int u,int v){\n\tnode r1,r2;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]>dep[top[v]]){\n\t\t\tr1=merge(query(1,1,n,dfn[top[u]],dfn[u]),r1);\n\t\t\tu=fa[top[u]];\n\t\t}\n\t\telse{\n\t\t\tr2=merge(query(1,1,n,dfn[top[v]],dfn[v]),r2);\n\t\t\tv=fa[top[v]];\n\t\t}\n\t}\n\tif(dfn[u]>dfn[v]) r1=merge(query(1,1,n,dfn[v],dfn[u]),r1);\n\telse r2=merge(query(1,1,n,dfn[u],dfn[v]),r2);\n\tswap(r1.lmax[0],r1.rmax[0]);\n\tswap(r1.lmax[1],r1.rmax[1]);\n\tswap(r1.dis[1][0],r1.dis[0][1]);\n\tr1=merge(r1,r2);\n\treturn max(r1.lmax[0],r1.lmax[1]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tG[x].push_back(y);\n\t\tG[y].push_back(x);\n\t}\n\tdep[1]=1;\n\tdfs1(1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s);\n\t\tupdata(1,1,n,dfn[i],(s[0]=='.'),(s[1]=='.'));\n\t}\n\twhile(m--){\n\t\tscanf(\"%s%d\",s,&x);\n\t\tif(s[0]=='Q'){\n\t\t\tscanf(\"%d\",&y);\n\t\t\tprintf(\"%d\\n\",lookup(x,y));\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%s\",s);\n\t\t\tupdata(1,1,n,dfn[x],(s[0]=='.'),(s[1]=='.'));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1673263553,
        "uid": 673294,
        "name": "zyxawa",
        "ccfLevel": 6,
        "title": "\u300cZJOI2011\u300d\u9053\u9986\u4e4b\u6218"
    }
]