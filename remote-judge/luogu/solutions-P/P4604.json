[
    {
        "content": "\u8bf4\u660e\uff1a\u535a\u4e3b\u662f\u4e00\u4e2a\u9ad8\u4e00OIER\uff0c\u6ca1\u6709\u8ba4\u771f\u5b66\u8fc7\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u8bfe\u7a0b\uff0c\u5982\u679c\u9898\u89e3\u4e2d\u6709\u4efb\u4f55\u5730\u65b9\u4e0d\u4e25\u8c28\uff0c\u8bf7\u5728\u8bc4\u8bba\u533a\u544a\u77e5\u535a\u4e3b\u3002\n\n\u535a\u5ba2\u4e0a\u6548\u679c\u66f4\u597d\uff1ahttps://blog.csdn.net/zxyoi_dreamer/article/details/84828291\n\n---\n## Subtask1\uff1a\n\u9996\u5148\u8fd9\u4e2a\u6392\u5e8f\u7528$O(n\\log n)$\u7684\u5feb\u6392\u505a\u662f\u59a5\u59a5\u7684\u8d85\u65f6\uff0c\u800c\u4e14\u4e0d\u4fbf\u4e8e\u5e38\u6570\u4f18\u5316\u3002\n\n\u6876\u6392\u4e5f\u7b97\u4e86\uff0c\u7a7a\u95f4\u5f00\u4e0d\u4e0b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4f1a\u7528\u5230\u4e0e\u6876\u6392\u7c7b\u4f3c\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u57fa\u6570\u6392\u5e8f\u3002\n\n\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u57fa\u6570\u6392\u5e8f\u7684\u81ea\u884c\u767e\u5ea6\u3002\n\n\u5b83\u7684\u590d\u6742\u5ea6\u662f$O(n\\cdot max(a_i)/base)$\uff0c\u5176\u4e2d$base$\u662f\u9009\u53d6\u7684\u57fa\u6570\u5927\u5c0f\uff0c\u4e00\u822c\u6765\u8bf4\u5728\u4e0d\u8d85\u8fc7\u5185\u5b58\u9650\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u7684\u57fa\u6570\u8d8a\u5927\u6392\u5e8f\u8d8a\u5feb\u3002\n\n**\u6ce8\u610f\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5305\u62ec\u9700\u8981\u5361\u5e38\u6570\u7684\u65f6\u5019\u3002**\n\n\u7136\u540e\u8003\u8651\u9009\u62e9\u4ec0\u4e48\u6837\u7684\u57fa\u6570\uff0c\u7531\u4e8e\u76ee\u6807\u5927\u5c0f\u662f$2^{32}-1$\u4ee5\u5185\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9$2^{16}$\u6216\u8005$2^8$\u4f5c\u4e3a\u57fa\u6570\u8fdb\u884c\u6392\u5e8f\u3002\uff08$2^4$\u592a\u5c0f\uff0c\u6392\u5e8f\u6b21\u6570\u6709\u70b9\u591a\u4e86\uff0c\u4e0d\u8003\u8651\uff09\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u9009\u62e9\u54ea\u4e2a\uff1f\n\n\u4f60\u53ef\u80fd\u89c9\u5f97\u9009\u62e9$2^{16}$\u4f5c\u4e3a\u57fa\u6570\u53ea\u9700\u8981\u6392\u4e24\u6b21\u5c31\u80fd\u51fa\u7ed3\u679c\uff0c\u5e94\u8be5\u6bd4$2^8$\u6392\u56db\u6b21\u8981\u5feb\u5427\uff1f\n\n**\u5927\u9519\u7279\u9519\uff01\u5e38\u6570\u8981\u662f\u7b97\u7684\u8fd9\u4e48\u7b80\u5355\uff0c\u4e3a\u4ec0\u4e48\u5927\u5b66\u8fd8\u8981\u5b66\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\uff1f**\n\n\u8981\u660e\u767d\u8fd9\u4e2a\uff0c\u9996\u5148\u5f15\u5165\u4e00\u4e2a\u4e1c\u897f\uff0c\u9ad8\u901f\u7f13\u5b58\u5668\u3002\n\n---\n\n##### \u9ad8\u901f\u7f13\u5b58\u5668\uff08Cache\uff09\uff1a\n\u4e00\u4e0b\u5185\u5bb9\u6458\u81ea[\u767e\u5ea6\u767e\u79d1](https://baike.baidu.com/item/%E9%AB%98%E9%80%9F%E7%BC%93%E5%86%B2%E5%AD%98%E5%82%A8%E5%99%A8/9027270?fr=aladdin#4)\uff1a\n\n> \u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\uff08Cache\uff09\u5176\u539f\u59cb\u610f\u4e49\u662f\u6307\u5b58\u53d6\u901f\u5ea6\u6bd4\u4e00\u822c\u968f\u673a\u5b58\u53d6\u8bb0\u5fc6\u4f53\uff08RAM\uff09\u6765\u5f97\u5feb\u7684\u4e00\u79cdRAM\uff0c\u4e00\u822c\u800c\u8a00\u5b83\u4e0d\u50cf\u7cfb\u7edf\u4e3b\u8bb0\u5fc6\u4f53\u90a3\u6837\u4f7f\u7528DRAM\u6280\u672f\uff0c\u800c\u4f7f\u7528\u6602\u8d35\u4f46\u8f83\u5feb\u901f\u7684SRAM\u6280\u672f\uff0c\u4e5f\u6709\u5feb\u53d6\u8bb0\u5fc6\u4f53\u7684\u540d\u79f0\u3002\n\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\u662f\u5b58\u5728\u4e8e\u4e3b\u5b58\u4e0eCPU\u4e4b\u95f4\u7684\u4e00\u7ea7\u5b58\u50a8\u5668\uff0c \u7531\u9759\u6001\u5b58\u50a8\u82af\u7247(SRAM)\u7ec4\u6210\uff0c\u5bb9\u91cf\u6bd4\u8f83\u5c0f\u4f46\u901f\u5ea6\u6bd4\u4e3b\u5b58\u9ad8\u5f97\u591a\uff0c \u63a5\u8fd1\u4e8eCPU\u7684\u901f\u5ea6\u3002\u5728\u8ba1\u7b97\u673a\u5b58\u50a8\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784\u4e2d\uff0c\u662f\u4ecb\u4e8e\u4e2d\u592e\u5904\u7406\u5668\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u7684\u9ad8\u901f\u5c0f\u5bb9\u91cf\u5b58\u50a8\u5668\u3002\u5b83\u548c\u4e3b\u5b58\u50a8\u5668\u4e00\u8d77\u6784\u6210\u4e00\u7ea7\u7684\u5b58\u50a8\u5668\u3002\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\u548c\u4e3b\u5b58\u50a8\u5668\u4e4b\u95f4\u4fe1\u606f\u7684\u8c03\u5ea6\u548c\u4f20\u9001\u662f\u7531\u786c\u4ef6\u81ea\u52a8\u8fdb\u884c\u7684\u3002\n\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\u6700\u91cd\u8981\u7684\u6280\u672f\u6307\u6807\u662f\u5b83\u7684\u547d\u4e2d\u7387\u3002\n\n\u6ce8\u610f\u6700\u540e\u4e00\u53e5\u8bdd\n>\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\u6700\u91cd\u8981\u7684\u6280\u672f\u6307\u6807\u662f\u5b83\u7684\u547d\u4e2d\u7387\u3002\n\n\u90a3\u4e48\u5173\u4e8e\u547d\u4e2d\u7387\u7684\u76f8\u5173\u6982\u5ff5\u4e5f\u8bf7\u81ea\u5df1\u53bb\u767e\u5ea6\u767e\u79d1\u91cc\u9762\u4e86\u89e3\uff0c\u6216\u8005\u611f\u6027\u7406\u89e3\u5982\u4e0b\uff1a\n\n\u9ad8\u901f\u7f13\u5b58\u5668\u91cc\u9762\u5b58\u4e86\u4e00\u6bb5\u5185\u5b58\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u901a\u8fc7\u9ad8\u901f\u7f13\u5b58\u5668\u5feb\u901f\u8bbf\u95ee\u8fd9\u6bb5\u5185\u5b58\u91cc\u9762\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u3002\n\n\u4e00\u65e6\u8bbf\u95ee\u5185\u5b58\u5916\u7684\u5143\u7d20\uff0cCache\u5c31\u4f1a\u770b\u60c5\u51b5\u9009\u62e9\u662f\u5426\u6e05\u7a7a\u5e76\u91cd\u65b0\u88c5\u586b\u5185\u5b58\uff0c\u800c\u5728\u91cd\u65b0\u88c5\u586b\u6b21\u6570\u5c3d\u53ef\u80fd\u5c11\u7684\u540c\u65f6\u5c3d\u53ef\u80fd\u591a\u7684\u8bbf\u95eeCache\u91cc\u9762\u7684\u4e1c\u897f\uff0c\u5c31\u80fd\u624b\u52a8\u63d0\u9ad8\u5b83\u7684\u547d\u4e2d\u7387\u3002\n\n---\n\n\u90a3\u4e48\u6211\u4eec\u7684\u76ee\u7684\u5c31\u662f\u4f7f\u5f97\u8bbf\u95ee\uff08\u51c6\u786e\u8bf4\u662f\u67e5\u8be2\uff0c\u4e0d\u8003\u8651\u4fee\u6539\uff09\u7684\u5185\u5b58\u5c3d\u53ef\u80fd\u7684\u76f8\u90bb\uff0c\u5982\u679c\u4f60\u9009\u62e9\u7684\u6876\u7684\u5927\u5c0f\u662f$2^{16}=65536$\uff0c\u5c31\u5361\u4e0d\u8fdb\u4e00\u7ea7\u7f13\u5b58\uff0c\u4e0d\u80fd\u5c3d\u53ef\u80fd\u5229\u7528Cache\u5e26\u6765\u7684\u4f18\u52bf\u3002\n\n\u6240\u4ee5\u9009\u62e9\u6876\u7684\u5927\u5c0f\u4e3a$2^8=256$\uff0cCache\u80af\u5b9a\u80fd\u591f\u5b58\u4e0b\u7684\u5927\u5c0f\uff0c\u968f\u4fbf\u8fc7\u5427\u3002\n\n\u5b9e\u9645\u6d4b\u8bd5\u4e2d$2^{16}$\u7684\u6876\u6839\u672c\u8fc7\u4e0d\u53bb\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8bf7\u770b\u6587\u7ae0\u672b\u5c3e\u4ee3\u7801\u4e2d\u7684```namespace Sorting```\u3002\n\n---\n## Subtask2\uff1a\n\n\u9996\u5148\u4e0d\u8981\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e86\u5427\u3002\u3002\u3002\u523b\u610f\u9020\u7684\u6570\u636e\u4f60\u6839\u672c\u7ef4\u62a4\u4e0d\u4e86\u4efb\u4f55\u6709\u7528\u7684\u4e1c\u897f\u3002\n\n\u8fd9\u4e2a\u663e\u7136\u662f$O(nq)$\u7684\u590d\u6742\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u4e1c\u897f\uff1a\u5faa\u73af\u5c55\u5f00\n\n---\n##### \u5faa\u73af\u5c55\u5f00\uff1a\n\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u6570\u5217\u7684\u548c\uff0c\u4e00\u822c\u7684\u5199\u6cd5\u662f\u8fd9\u6837\uff1a\n```cpp\nlong long sum=0;\nfor(int i=1;i<=n;++i)sum+=a[i];\nreturn sum;\n```\n\n\u4f46\u662f\u5faa\u73af\u5c55\u5f00\u540e\u662f\u8fd9\u6837\u5199\u7684\uff1a\n```cpp\nlong long sum1=0,sum2=0,sum3=0,sum4=0,sum5=0,sum6=0,sum7=0,sum8=0;\n\nfor(int i=0;i+8<=n;i+=8){\n\tsum1+=a[i+1];\n\tsum2+=a[i+2];\n\tsum3+=a[i+3];\n\tsum4+=a[i+4];\n\tsum5+=a[i+5];\n\tsum6+=a[i+6];\n\tsum7+=a[i+7];\n\tsum8+=a[i+8];\n}\nswitch(n&7){\n\tcase 7:sum7+=a[n-6];\n\tcase 6:sum6+=a[n-5];\n\tcase 5:sum5+=a[n-4];\n\tcase 4:sum4+=a[n-3];\n\tcase 3:sum3+=a[n-2];\n\tcase 2:sum2+=a[n-1];\n\tcase 1:sum1+=a[n]; \n}\n\nreturn sum1+sum2+sum3+sum4+sum5+sum6+sum7+sum8;\n```\n\n\u8fd9\u6837\u5199\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5199\u8981\u5feb\u90a3\u4e48\u591a\u5462\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u56de\u5230\u8ba1\u7b97\u673a\u6267\u884c\u7a0b\u5e8f\u7684\u672c\u8d28\uff1a\u5b58\u50a8\uff0c\u67e5\u8be2\u548c\u8ba1\u7b97\u3002\n\n\u5176\u4e2d\u5b58\u50a8\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u5728\u65f6\u95f4\u4e0a\u4ea7\u751f\u592a\u591a\u4f18\u5316\u7684\u505a\u6cd5\uff0c\u5361\u7a7a\u95f4\u5e38\u6570\u5e76\u4e0d\u4f1a\u5bf9\u65f6\u95f4\u4ea7\u751f\u8fc7\u591a\u5f71\u54cd\u3002\n\n\u67e5\u8be2\u4e0a\u7684\u4f18\u5316\u4e3b\u8981\u5c31\u662f$Subtask1$\u4e2d\u7528\u5230\u7684\u5361\u9ad8\u901f\u7f13\u51b2\u5668\u548c\u5e38\u7528\u7684\u5361register\u5bc4\u5b58\u5668\u3002\n\n\u90a3\u4e48\u4f18\u5316\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u5230\u4e86\u8ba1\u7b97\u4e0a\u9762\u3002\n\u542c\u8bf4\u8fc7\u4e00\u79cd\u505a\u6cd5\u4f3c\u4e4e\u53ef\u4ee5\u628a\u6574\u578b\u548c\u5b9e\u578b\u7684\u56db\u5219\u8fd0\u7b97\u5e38\u6570\u4f18\u531610\u500d\uff0c\u6ca1\u5b66\u8fc7\uff0c\u800c\u4e14\u542c\u8bf4\u7801\u91cf\u7565\u5927\uff0c\u4e0d\u4e88\u8003\u8651\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u7528\u5230\u4e86\u5faa\u73af\u5c55\u5f00\u3002\n\n\u8003\u8651\u6211\u4eec\u8ba1\u7b97\u7684\u6b65\u9aa4\uff08\u9700\u8981\u5faa\u73af\u7684\u7b97\u6cd5\uff09\n>1.\u521d\u59cb\u5316\n>2.\u8fdb\u884c\u4e00\u6b21\u5faa\u73af\u4e2d\u7684\u64cd\u4f5c\n>3.\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\n\n\u4e00\u4e0b\u7684\u8ba8\u8bba\u5047\u8bbe\u5faa\u73af\u53d8\u91cf\u4e3a$i$\n\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u4e1c\u897f\u65f6\u5019\uff0c\u9700\u8981\u4fee\u6539$i$\u3002\n\u6240\u4ee5\u8bf4\uff0c\u4e0b\u4e00\u6b21\u7684$i$\u662f\u4e0e\u8fd9\u4e00\u6b21\u7684\u4fee\u6539**\u76f8\u5173\u7684**\u3002\n\n\u90a3\u4e48\u8981\u8c03\u7528\u4e0b\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684$i$\u5b9e\u9645\u4e0a\u9700\u8981\u8fd9\u4e00\u6b21\u7684\u4fee\u6539\u3002\n\n\u4e0d\u8981\u4e3a\u96be\u7f16\u8bd1\u5668\uff0c\u5b83\u4e5f\u65e0\u6cd5\u9884\u6d4b\u4e0b\u4e00\u6b21\u7684$i$\u4f1a\u4e0d\u4f1a\u53d8\u6210\u4ec0\u4e48\u5947\u602a\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u5b83\u53ea\u80fd\u4e00\u4e2a\u6b65\u9aa4\u4e00\u4e2a\u6b65\u9aa4\u7684\u6267\u884c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u544a\u8bc9\u5b83\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u64cd\u4f5c\u4e2d\u6240\u8981\u7528\u5230\u7684$i$\u4e0e\u73b0\u5728\u7684$i$\u6709\u4ec0\u4e48\u5173\u7cfb\u3002\u4ece\u800c\u8ba9\u5b83\u80fd\u591f\u77e5\u9053\u63a5\u4e0b\u6765\u8be5\u5e72\u4ec0\u4e48\uff0c\u8ba9CPU\u4ee5\u4e00\u5b9a\u6982\u7387\u540c\u65f6\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u597d\u51e0\u4e2a\uff0c\u8fd9\u5c31\u662f**CPU\u5e76\u53d1**\uff0c\u4e5f\u662f\u5faa\u73af\u5c55\u5f00\u7684\u7ec8\u6781\u76ee\u7684\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u80fd\u591f\u8ba9CPU\u505a\u5230\u8fd9\u6837\uff0c\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\uff0c\u8be6\u7ec6\u7684\u53d9\u8ff0\u5df2\u7ecf\u504f\u79bb\u4e86\u672c\u6587\u7684\u76ee\u7684\u3002\u8fd9\u91cc\u53ea\u7a0d\u5fae\u63d0\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4CPU\u4e2d\u662f\u6709\u591a\u4e2a\u8fd0\u7b97\u5668\u7684\uff0c\u4e5f\u5c31\u662f**\u591a\u6838\u5fc3**\uff0c\u8ba9\u8fd9\u4e48\u591a\u8fd0\u7b97\u5668\u7761\u5927\u89c9\u771f\u662f\u4e00\u79cd\u8d44\u6e90\u7684\u6d6a\u8d39\u554a\u3002\n\n### Detail\uff1a\n\u4e00\u822c\u6765\u8bf4\uff0c\u5faa\u73af\u5c55\u5f00\u53ea\u9700\u8981\u5c55\u5f006~8\u5c42\u5c31\u5df2\u7ecf\u591f\u4e86\uff0c\u591a\u4e86\u7684\u8bdd\u53ef\u80fd\u9020\u6210\u5bc4\u5b58\u5668\u6ea2\u51fa\u4ece\u800c\u53cd\u4f7f\u7a0b\u5e8f\u7684\u8fd0\u884c\u901f\u5ea6\u53d8\u6162\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u5bc4\u5b58\u5668\uff0c\u8bf7\u8bfb\u8005\u81ea\u5df1\u4e86\u89e3\uff0c\u8fd9\u91cc\u4e0d\u518d\u8fc7\u591a\u5c55\u5f00\u3002\n\n\u518d\u6765\u770b\u4e24\u79cd\u4e0d\u591f\u4f18\u79c0\u7684\u5199\u6cd5\uff0c\u4f46\u662f\u4e5f\u6709\u4f18\u5316\u4f5c\u7528\uff1a\n\n1.\u53ea\u7528\u4e00\u4e2asum\uff0c\u4e0d\u80fd\u5145\u5206\u523a\u6fc0CPU\u5e76\u53d1\u3002\n```cpp\nlong long sum=0;\n\nfor(int i=0;i+8<=n;i+=8){\n\tsum+=a[i+1];\n\tsum+=a[i+2];\n\tsum+=a[i+3];\n\tsum+=a[i+4];\n\tsum+=a[i+5];\n\tsum+=a[i+6];\n\tsum+=a[i+7];\n\tsum+=a[i+8];\n}\nswitch(n&7){\n\tcase 7:sum+=a[n-6];\n\tcase 6:sum+=a[n-5];\n\tcase 5:sum+=a[n-4];\n\tcase 4:sum+=a[n-3];\n\tcase 3:sum+=a[n-2];\n\tcase 2:sum+=a[n-1];\n\tcase 1:sum+=a[n]; \n}\n\nreturn sum;\n```\n2.\u5c55\u5f00\u7684\u65f6\u5019\u7528\u4e86++i\uff0c\u4e5f\u662f\u4e0d\u80fd\u5145\u5206\u523a\u6fc0CPU\u5e76\u53d1\u3002\n```cpp\nlong long sum1=0,sum2=0,sum3=0,sum4=0,sum5=0,sum6=0,sum7=0,sum8=0;\n\nfor(int i=0;i+8<=n;){\n\tsum1+=a[++i];\n\tsum2+=a[++i];\n\tsum3+=a[++i];\n\tsum4+=a[++i];\n\tsum5+=a[++i];\n\tsum6+=a[++i];\n\tsum7+=a[++i];\n\tsum8+=a[++i];\n}\nswitch(n&7){\n\tcase 7:sum7+=a[n-6];\n\tcase 6:sum6+=a[n-5];\n\tcase 5:sum5+=a[n-4];\n\tcase 4:sum4+=a[n-3];\n\tcase 3:sum3+=a[n-2];\n\tcase 2:sum2+=a[n-1];\n\tcase 1:sum1+=a[n]; \n}\n\nreturn sum1+sum2+sum3+sum4+sum5+sum6+sum7+sum8;\n```\n\n---\n### TIPS\uff1a\u5173\u4e8e\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684switch\n\n\u61c2\u4e0a\u9762\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5199\u7684\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6bb5\u4e0d\u770b\u3002\n\nswitch\u5185\u90e8\u6709\u4e24\u79cd\u53ef\u4ee5\u7528\u7684\u5173\u952e\u5b57\uff1acase\u548cdefault\uff0c\u5176\u4e2dcase\u540e\u9762\u8fd8\u9700\u8981\u8ddf\u4e00\u4e2a**\u5e38\u91cf\u8868\u8fbe\u5f0f**\u3002\u6bcf\u6b21switch\u8fdb\u5165\u5927\u62ec\u53f7\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6839\u636e\u9009\u62e9\u5206\u652f\u8df3\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002\n\n**\u7136\u540e\u6309\u7167\u987a\u5e8f\u4e00\u76f4\u6267\u884c\u5230switch\u7684\u672b\u5c3e**\uff0c\u9664\u975e\u9047\u5230break\u3002\n\n\u6240\u4ee5\u4e0a\u9762\u7684\u5faa\u73af\u5c55\u5f00\u5c31\u5199\u6210\u4e86\u90a3\u4e2a\u6837\u5b50\u3002\uff08\u5e76\u4e14\u51cf\u5c11\u4e86\u591a\u6b21$if$\u5224\u65ad\uff09\n\n---\n\u4f46\u662f\u5149\u662f\u5faa\u73af\u5c55\u5f00\u662f\u4e0d\u80fd\u628a\u5361\u5e38\u6570\u505a\u5230\u6781\u81f4\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u8fde\u7eed\u533a\u95f4\u578b$bool$\u8ba1\u6570\uff08\u535a\u4e3b\u778eyy\u7684\u4e00\u79cd\u53eb\u6cd5\uff0c\u597d\u8bb0\u53c8\u597d\u7406\u89e3\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u538b\u4f4d\u3002\n\n---\n##### \u538b\u4f4d\uff1a\n\n\u7531\u4e8e\u662f$bool$\u578b\u8ba1\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u538b\u4f4d\u4e71\u641e\u3002\n\n\u4e3a$s1\\text{ }s2$\u5206\u522b\u8bbe\u7f6e\u4e24\u4e2a\u6570\u7ec4$f1\\text{ }f2$\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u6570\u7ec4\u4f4d\u7f6e\u4e0a\u5360\u67093\u4e2a\u4f4d\u7f6e\uff0c\u5206\u522b\u8868\u793a\u5b83\u51fa\u77f3\u5934\uff0c\u526a\u5200\u6216\u5e03\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e24\u4e2a\u90e8\u5206\u7684\u62ff\u51fa\u6765\u4e00\u8d77\u641e\u5c31\u884c\u4e86\uff0c\u76f4\u63a5\u7528\u4e0e\u8fd0\u7b97\u5224\u65ad\u662f\u5426\u6709\u4e1c\u897f\uff0c\u7136\u540e\u7edf\u8ba1\u4f4d\u6570\u5c31\u884c\u4e86\u3002\n\n\u7edf\u8ba1\u4f4d\u6570\u5e73\u65f6\u53ef\u4ee5\u76f4\u63a5\u7528$O(1)$\u7684__builtin_popcountll\uff08C++STL\u91cc\u9762\u7684\u51fd\u6570\uff09\uff0c\u6216\u8005\u81ea\u5df1\u9884\u5904\u7406256\u4ee5\u5185\u7684\u6570\u7684\u4f4d\u6570\u4e2a\u6570\uff0c\u7136\u540e\u6bcf\u4e2a\u6570\u5206\u56db\u6bb5\u7528\u4f4d\u79fb\u8fd0\u7b97\u53d6\u5f97\u6bcf\u4e00\u6bb5\u7edf\u8ba1\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n---\n\n\u5177\u4f53\u5b9e\u73b0\u8bf7\u770b\u6587\u7ae0\u672b\u5c3e\u7684```namespace Game```\u3002\n\u542c\u8bf4\u6709$O(n^{1.5}\\log n)$\uff08\u5728\u6d1b\u8c37\u8ba8\u8bba\u533a\u770b\u89c1\u7684\uff09FFT\u7684\u505a\u6cd5\uff0c\u6ca1\u6709\u8fd9\u79cd\u4f18\u5316\u8fc7\u7684$O(nq)$\u5feb\uff08\u8bdd\u8bf4FFT\u672c\u8eab\u5c31\u4e0d\u5229\u4e8e\u5e38\u6570\u4f18\u5316\uff09\uff0c\u4e0d\u8bb2\u4e86\u3002\uff08\u53ef\u4ee5\u81ea\u5df1\u53bbLOJ\u770b[xumingkuan\u5927\u4f6c\u7684\u4ee3\u7801](https://loj.ac/submission/8304)\uff09\n\n---\n## Subtask3\uff1a\n\n\u4e00\u822c\u7684\u505a\u6cd5\u5c31\u662f\u76f4\u63a5\u5728DP\u6570\u7ec4\u4e0a\u9762\u7528\u4e00\u4e2a\u6307\u9488\u626b\u52a8\uff0c\u9047\u5230$?$\u5c31\u628a\u540e\u9762\u6240\u6709\u7684\u5168\u90e8\u66f4\u65b0\u4e00\u904d\uff0c\u5176\u5b9e\u5c31\u662f\u8003\u8651\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u4e3a\u2018\uff09\u2019\u548c\u2018\uff08\u2019\u7684\u60c5\u51b5\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u8fd8\u80fd\u4f18\u5316\uff1a\u5e76\u975e\u6240\u6709\u4e0b\u6807\u90fd\u53ef\u4ee5\u8fbe\u5230\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u9047\u5230\u2018\uff08\u2019\u548c\u2018\uff09\u2019\u7684\u65f6\u5019\u79fb\u52a8\u6307\u9488\u5224\u65ad\u4e00\u4e0b\u5947\u5076\u6027\u5c31\u884c\u4e86\uff08\u4e0d\u60f3\u641e\u5947\u5076\u6027\u53ef\u4ee5\u76f4\u63a5\u6734\u7d20\u5199\u6cd5+\u5947\u5076\u6027\u5361\u5e38\uff0c\u533a\u522b\u4e0d\u5927\uff09\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53c2\u8003\u6587\u7ae0\u672b\u5c3e\u7684```namespace Parentheses ```\n\n---\n#### \u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u5e76\u4e14\u5e38\u7528\u7684\u5361\u5e38\u6280\u5de7\uff1a\u6307\u9488\u4f18\u5316\u5bfb\u5740\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\u90fd\u58f0\u660e\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3a100\u7684int\u6570\u7ec4\uff0c\u6ca1\u6709\u4efb\u4f55\u533a\u522b\n```cpp\nint x[100];\nint *const y=new int[100];\n```\n\n\u6240\u4ee5\u8bf4\uff0c\u6570\u7ec4\u540d\u5b9e\u9645\u4e0a\u662f\u6570\u7ec4\u7684\u5934\u6307\u9488\u3002\n\n\u540c\u7406\uff0c\u5bf9\u4e8e\u6307\u9488\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528```[]```\u8fd0\u7b97\u7b26\u6765\u5bfb\u5740\uff0c\u8fd9\u6837\u5c31\u80fd\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8d1f\u6570\u4e0b\u6807\u662f\u5141\u8bb8\u7684\u4e86\u3002\n\n\u4e00\u4e0b\u4e24\u79cd\u65b9\u5f0f\u90fd\u662f\u8868\u793a\u5728\u6570\u7ec4$x$\u4e2d\u7684\u7b2c$i$\u4e2a\u5bf9\u8c61\n```cpp\nx[i];\n*(x+i);\n```\n\n\u90a3\u4e48\uff0c\u5728\u8bbf\u95ee\u4e00\u4e2a\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u6307\u9488\u626b\u4e00\u904d\u3002\n\n\u8fd9\u4e2a\u5361\u5e38\u4e3b\u8981\u5c31\u662f\u5361\u4e00\u4e2a\u52a0\u6cd5\u7684\u5e38\u6570\uff0c\u56e0\u4e3a```f[0]```\u7684\u8bbf\u95ee\u662f\u6bd4```*f```\u8bbf\u95ee\u6307\u9488\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5feb\u7684\u3002\n\n---\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define re register\n#define gc getchar\n#define pc putchar\n#define cs const\n\n#define u32 unsigned int\n#define u64 unsigned ll\n\ninline u32 getint(){\n    re u32 num;\n    re char c;\n    while(!isdigit(c=gc()));num=c^48;\n    while(isdigit(c=gc()))num=(num+(num<<2)<<1)+(c^48);\n    return num;\n}\n\ninline void skip(){while(isspace(cin.peek()))gc();}\n\n#define nxt_integer(x) (x^=x<<13,x^=x>>17,x^=x<<5)\n\ninline void output_arr(u32 * a,u32 size){\n    re u32 ret=size;--a;\n    for(u32 re x=23333333,*to=a+(size>>2)+1;++a<to;)\n    ret^=*a+x,nxt_integer(x);\n    printf(\"%u\\n\",ret);\n}\n\nnamespace Sorting{\n    u32 a[200000000],b[200000000];\n    int cnt0[1<<8],cnt8[1<<8],cnt16[1<<8],cnt24[1<<8];\n    int n;u32 seed;\n    \n    inline void init_data(){\n        for(u32 re *to=a+n,*now=a;now<to;++now){\n            *now=nxt_integer(seed);\n            ++cnt0[seed&255];\n            ++cnt8[seed>>8&255];\n            ++cnt16[seed>>16&255];\n            ++cnt24[seed>>24&255];\n        }\n    }\n    \n    inline void sort(){\n        for(int re i=1;i<256;++i){\n            cnt0[i]+=cnt0[i-1];\n            cnt8[i]+=cnt8[i-1];\n            cnt16[i]+=cnt16[i-1];\n            cnt24[i]+=cnt24[i-1];\n        }\n        \n        re int rep=n>>3,tim=rep;\n        re u32 *now=a+n-1;\n        while(tim--){\n            b[--cnt0[now[0]&255]]=now[0];\n            b[--cnt0[now[-1]&255]]=now[-1];\n            b[--cnt0[now[-2]&255]]=now[-2];\n            b[--cnt0[now[-3]&255]]=now[-3];\n            b[--cnt0[now[-4]&255]]=now[-4];\n            b[--cnt0[now[-5]&255]]=now[-5];\n            b[--cnt0[now[-6]&255]]=now[-6];\n            b[--cnt0[now[-7]&255]]=now[-7];now-=8;\n        }\n        switch(n&7){\n            case 7:{b[--cnt0[*now&255]]=*now;--now;}\n            case 6:{b[--cnt0[*now&255]]=*now;--now;}\n            case 5:{b[--cnt0[*now&255]]=*now;--now;}\n            case 4:{b[--cnt0[*now&255]]=*now;--now;}\n            case 3:{b[--cnt0[*now&255]]=*now;--now;}\n            case 2:{b[--cnt0[*now&255]]=*now;--now;}\n            case 1:{b[--cnt0[*now&255]]=*now;--now;}\n        }\n        tim=rep;\n        now=b+n-1;\n        while(tim--){\n            a[--cnt8[now[0]>>8&255]]=now[0];\n            a[--cnt8[now[-1]>>8&255]]=now[-1];\n            a[--cnt8[now[-2]>>8&255]]=now[-2];\n            a[--cnt8[now[-3]>>8&255]]=now[-3];\n            a[--cnt8[now[-4]>>8&255]]=now[-4];\n            a[--cnt8[now[-5]>>8&255]]=now[-5];\n            a[--cnt8[now[-6]>>8&255]]=now[-6];\n            a[--cnt8[now[-7]>>8&255]]=now[-7];now-=8;\n        }\n        switch(n&7){\n            case 7:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 6:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 5:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 4:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 3:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 2:{a[--cnt8[*now>>8&255]]=*now;--now;}\n            case 1:{a[--cnt8[*now>>8&255]]=*now;--now;}\n        }\n        tim=rep;\n        now=a+n-1;\n        while(tim--){\n            b[--cnt16[now[0]>>16&255]]=now[0];\n            b[--cnt16[now[-1]>>16&255]]=now[-1];\n            b[--cnt16[now[-2]>>16&255]]=now[-2];\n            b[--cnt16[now[-3]>>16&255]]=now[-3];\n            b[--cnt16[now[-4]>>16&255]]=now[-4];\n            b[--cnt16[now[-5]>>16&255]]=now[-5];\n            b[--cnt16[now[-6]>>16&255]]=now[-6];\n            b[--cnt16[now[-7]>>16&255]]=now[-7];now-=8;\n        }\n        switch(n&7){\n            case 7:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 6:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 5:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 4:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 3:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 2:{b[--cnt16[*now>>16&255]]=*now;--now;}\n            case 1:{b[--cnt16[*now>>16&255]]=*now;--now;}\n        }\n        tim=rep;\n        now=b+n-1;\n        while(tim--){\n            a[--cnt24[now[0]>>24]]=now[0];\n            a[--cnt24[now[-1]>>24]]=now[-1];\n            a[--cnt24[now[-2]>>24]]=now[-2];\n            a[--cnt24[now[-3]>>24]]=now[-3];\n            a[--cnt24[now[-4]>>24]]=now[-4];\n            a[--cnt24[now[-5]>>24]]=now[-5];\n            a[--cnt24[now[-6]>>24]]=now[-6];\n            a[--cnt24[now[-7]>>24]]=now[-7];now-=8;\n        }\n        switch(n&7){\n            case 7:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 6:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 5:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 4:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 3:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 2:{a[--cnt24[*now>>24]]=*now;--now;}\n            case 1:{a[--cnt24[*now>>24]]=*now;--now;}\n        }\n    }\n    \n    inline void main(){\n        n=getint();\n        seed=getint();\n        init_data();\n        sort();\n        output_arr(a,n<<2);\n    }\n}\n\nnamespace Game{\n    \n    ll f1[64][14063],f2[64][14063];\n    char s1[300000],s2[300000];\n    u32 x[300000],y[300000],len[300000],ans[300000];\n    int n,q;\n    \n    inline void set(ll f[][14063],int idx){\n        if(idx<64)for(int re i=0;i<=idx;++i)*f[i]|=1ll<<(idx-i);\n        else for(int re i=0;i<64;++i){\n            re int j=idx-i;\n            f[i][j>>6]|=1ll<<(j&63);\n        }\n    }\n    \n    inline void solve(){\n        for(int re i=0;i<n;++i)\n        switch(s1[i]){\n            case '0':set(f1,i*3);break;\n            case '1':set(f1,i*3+1);break;\n            case '2':set(f1,i*3+2);\n        }\n        for(int re i=0;i<n;++i)\n        switch(s2[i]){\n            case '0':set(f2,i*3+2);break;\n            case '1':set(f2,i*3);break;\n            case '2':set(f2,i*3+1);break;\n        }\n        for(int re i=0;i<q;++i){\n            x[i]*=3;y[i]*=3;len[i]*=3;\n            re int l=len[i]>>6,tim=l>>3;\n            re ll *p1=f1[x[i]&63]+(x[i]>>6),*p2=f2[y[i]&63]+(y[i]>>6);\n            re u32 ans0=0,ans1=0,ans2=0,ans3=0,ans4=0,ans5=0,ans6=0,ans7=0;\n            while(tim--){\n                ans0+=__builtin_popcountll(p1[0]&p2[0]);\n                ans1+=__builtin_popcountll(p1[1]&p2[1]);\n                ans2+=__builtin_popcountll(p1[2]&p2[2]);\n                ans3+=__builtin_popcountll(p1[3]&p2[3]);\n                ans4+=__builtin_popcountll(p1[4]&p2[4]);\n                ans5+=__builtin_popcountll(p1[5]&p2[5]);\n                ans6+=__builtin_popcountll(p1[6]&p2[6]);\n                ans7+=__builtin_popcountll(p1[7]&p2[7]);\n                p1=p1+8;p2=p2+8;\n            }\n            switch(l&7){\n                case 7:ans7+=__builtin_popcountll(p1[6]&p2[6]);\n                case 6:ans6+=__builtin_popcountll(p1[5]&p2[5]);\n                case 5:ans5+=__builtin_popcountll(p1[4]&p2[4]);\n                case 4:ans4+=__builtin_popcountll(p1[3]&p2[3]);\n                case 3:ans3+=__builtin_popcountll(p1[2]&p2[2]);\n                case 2:ans2+=__builtin_popcountll(p1[1]&p2[1]);\n                case 1:ans1+=__builtin_popcountll(p1[0]&p2[0]);\n                p1+=l&7,p2+=l&7;\n            }\n            ans[i]=ans0+ans1+ans2+ans3+ans4+ans5+ans6+ans7+__builtin_popcountll(*p1&*p2&(1ll<<(len[i]&63))-1);\n        }\n    }\n    \n    inline void main(){\n        n=getint(),q=getint();\n        skip();\n        fread(s1,1,n,stdin);\n        skip();\n        fread(s2,1,n,stdin);\n        for(int re i=0;i<q;++i)x[i]=getint(),y[i]=getint(),len[i]=getint();\n        solve();\n        output_arr(ans,q<<2);\n    }\n}\n\nnamespace Parentheses{\n    \n    u32 pool[266666<<1|1],*p=pool+266666;\n    char s[266666];\n    int n;\n    \n    inline u32 solve(){\n        *p=1;\n        for(int re i=0;i<n;++i)\n        switch(s[i]){\n            case '(':if(i&1)*--p=0;break;\n            case ')':p+=i&1^1;break;\n            case '?':{\n                int m=(min(i,n-i)>>1)+1;\n                if(i&1)*--p=0,++m;\n                re int tim=m>>3;\n                re u32 *f0=p;\n                while(tim--){\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                    f0[0]+=f0[1];++f0;\n                }\n                switch(m&7){\n                    case 7:f0[0]+=f0[1];++f0;\n                    case 6:f0[0]+=f0[1];++f0;\n                    case 5:f0[0]+=f0[1];++f0;\n                    case 4:f0[0]+=f0[1];++f0;\n                    case 3:f0[0]+=f0[1];++f0;\n                    case 2:f0[0]+=f0[1];++f0;\n                    case 1:f0[0]+=f0[1];++f0;\n                }\n            }\n        }\n        return *p;\n    }\n    \n    inline void main(){\n        n=getint();\n        skip();\n        fread(s,1,n,stdin);\n        printf(\"%u\",solve());\n    }\n}\n\nint op;\nsigned main(){\n    op=getint();\n    switch(op){\n        case 1:Sorting::main();break;\n        case 2:Game::main();break;\n        case 3:Parentheses::main();break;\n    }\n    return 0;\n}\n```",
        "postTime": 1544189308,
        "uid": 46382,
        "name": "_meaningless_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4604 \u3010[WC2017]\u6311\u6218\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u662f\u6c34\u6bcd\u54e5\u3002\u5728\u542c\u5230\u5f88\u591a\u4eba\u63d0\u5230\u8fd9\u9053\u6bd2\u7624\u9898\u540e\uff0c\u6211\u505a\u4e86\u8fd9\u9053\u9898\u3002\u4e0b\u9762\u6211\u8bb2\u8ff0\u4e00\u4e0b\u6211\u505a\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u4e0e\u5fc3\u8def\u5386\u7a0b\u3002\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u58f0\u660e\u4e00\u70b9\uff1a**\u8fd9\u7bc7\u9898\u89e3\u5e76\u6ca1\u6709\u4f7f\u7528\u5faa\u73af\u5c55\u5f00**\u3002\n\n## 35 \u5206\n\u7b2c\u4e00\u9898\uff0c\u6574\u6570\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u6c42\u7ebf\u6027\uff0c\u53ef\u4ee5\u57fa\u6570\u6392\u5e8f\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u81ea\u5b66\uff08\u7c7b\u4f3c\u4e8e\u6876\u6392\uff09\u3002\n\n\u57fa\u6570\u6392\u5e8f\u5728\u6876\u5927\u5c0f\u4e3a 256 \u65f6\u6700\u5feb\uff0c\u56e0\u4e3a\u4e00\u7ea7\u7f13\u5b58\u53ef\u4ee5\u88c5\u4e0b\u5b83\uff08\u4e0d\u8981\u95ee\u6211\u662f\u600e\u4e48\u77e5\u9053\u7684\uff09\u3002\n\n\u5173\u4e8e\u57fa\u6570\u6392\u5e8f\u5b9e\u73b0\u65b9\u5f0f\u7684\u89e3\u91ca\u89c1\u4ee3\u7801\u3002\n```c\n#define MSORT 200000005\n\nunsigned bucket[256];\n\n#define SORTBYTE(TYPE, FR, TO, LEN, BIT) {\\ //\u5b8f\u5b9a\u4e49\u51fd\u6570\uff0c\u51cf\u5c0f\u5e38\u6570\u3002\n    memset(bucket, 0, sizeof(bucket));\\\n    for (TYPE *it = (FR) + LEN; it != (FR); it--)\\ // \u4f7f\u7528\u6307\u9488\u5012\u5e8f\u904d\u5386\uff0c\u51cf\u5c11\u4e0b\u6807\u8fd0\u7b97\u3002\n        ++bucket[(it[-1] >> BIT) & 255];\\ // \u5c06\u6570\u653e\u5230\u5bf9\u5e94\u7684\u6876\u91cc\u3002\n    for (unsigned *it = bucket; it != bucket + 255; it++)\\\n        it[1] += it[0];\\ // \u5c06\u6876\u8f6c\u5316\u6210\u6876\u7684\u524d\u7f00\u548c\n    for (TYPE *it = (FR) + LEN; it != (FR); it--)\\\n        (TO)[--bucket[(it[-1] >> BIT) & 255]] = it[-1];\\ // \u5c06\u6570\u6309\u6876\u8bb0\u5f55\u7684\u503c\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\n}\n\nvoid Sorting_main(void)\n{\n    int n;\n    u32 seed;\n    static u32 a[MSORT], b[MSORT]; // \u6eda\u52a8\u6570\u7ec4\u3002\n    scanf(\"%d%u\", &n, &seed);\n\n    int i;\n    for (i = 0; i < n; i++)\n    {\n        seed = next_integer(seed);\n        a[i] = seed;\n    }\n\n    SORTBYTE(u32, a, b, n, 0); //\uff080 - 7 \u4e8c\u8fdb\u5236\u4f4d\u6392\u5e8f\uff09\n    SORTBYTE(u32, b, a, n, 8); //\uff088 - 15 \u4e8c\u8fdb\u5236\u4f4d\u6392\u5e8f\uff09\n    SORTBYTE(u32, a, b, n, 16); //\uff0816 - 23 \u4e8c\u8fdb\u5236\u4f4d\u6392\u5e8f\uff09\n    SORTBYTE(u32, b, a, n, 24); //\uff0824 - 31 \u4e8c\u8fdb\u5236\u4f4d\u6392\u5e8f\uff09\n\n    output_arr(a, n);\n}\n```\n\u4e8e\u662f\u6211\u5c31\u8fd9\u6837\u5f97\u4e86 35 \u5206\u3002\n\n## 65 \u5206\n\u77f3\u5934\u526a\u5200\u5e03\u533a\u95f4\u8fd0\u7b97\u3002\u66b4\u529b\u8fd0\u7b97\u5fc5\u7136\u8d85\u65f6\u3002\n\n\u5728\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u601d\u8003\u540e\uff0c\u6211\u53d1\u73b0\u53ef\u4ee5\u5c06\u77f3\u5934\u526a\u5200\u5e03\u5206\u522b\u653e\u5165\u4e09\u4e2a int \u4e2d\uff0c\u4e09\u4e2a int \u7684\u4e8c\u8fdb\u5236\u4f4d\u5206\u522b\u8868\u793a \u662f\u5426\u4e3a\u77f3\u5934 \u662f\u5426\u4e3a\u526a\u5200 \u662f\u5426\u4e3a\u5e03\u3002\u8fd9\u6837\u4e00\u6b21\u53ef\u4ee5\u8fd0\u7b97 32 \u4e2a\u9009\u624b\u3002\n\n\u6c42\u8fd9 32 \u4e2a\u9009\u624b\u4e2d\u6709\u51e0\u4e2a\u80dc\u51fa\uff0c\u5c31\u662f\n```c\n__builtin_popcount(\u7b2c\u4e00\u6392\u7684\u77f3\u5934 & \u7b2c\u4e8c\u6392\u7684\u526a\u5200) +\n__builtin_popcount(\u7b2c\u4e00\u6392\u7684\u526a\u5200 & \u7b2c\u4e8c\u6392\u7684\u5e03) + \n__builtin_popcount(\u7b2c\u4e00\u6392\u7684\u5e03 & \u7b2c\u4e8c\u6392\u7684\u77f3\u5934)\n// __builtin_popcount \u6307\u4e8c\u8fdb\u5236\u4f4d\u4e2d 1 \u7684\u4e2a\u6570\uff0c\u901f\u5ea6\u5f88\u5feb\n```\n\n\u8fd9\u6837\u8fd0\u884c\u6548\u7387\u4fbf\u80fd\u6210\u500d\u63d0\u5347\uff08\u8fd0\u884c\u65f6\u95f4\u5927\u6982\u80fd\u964d\u4f4e\u5230\u539f\u6765\u7684 1/32\uff09\u3002\n\n```c\n#define MGAME 300005\n\ntypedef struct\n{\n    u32 paper;\n    u32 scissor;\n    u32 stone;\n}\nStat;\n\nvoid Game_main(void)\n{\n    int n, q;\n    static char s1[MGAME];\n    static char s2[MGAME];\n\n    scanf(\"%d%d\", &n, &q);\n    scanf(\"%s%s\", s1, s2);\n\n    static Stat st1[32][MGAME / 32 + 1], st2[32][MGAME / 32 + 1];\n\n    for (int i = 0; i < n; i++)\n    {\n        if (s1[i] == '2')\n            st1[0][i >> 5].paper ^= 1 << (i & 31);\n        else if (s1[i] == '1')\n            st1[0][i >> 5].scissor ^= 1 << (i & 31);\n        else if (s1[i] == '0')\n            st1[0][i >> 5].stone ^= 1 << (i & 31);\n\n        if (s2[i] == '2')\n            st2[0][i >> 5].paper ^= 1 << (i & 31);\n        else if (s2[i] == '1')\n            st2[0][i >> 5].scissor ^= 1 << (i & 31);\n        else if (s2[i] == '0')\n            st2[0][i >> 5].stone ^= 1 << (i & 31);\n    } // \u538b\u5165 int \u4e2d\u3002\n    for (int i = 1; i < 32; i++)\n    {\n        for (int j = 0; j < (n + 31) >> 5; j++)\n        {\n            st1[i][j].stone = (st1[i - 1][j].stone >> 1) + ((st1[i - 1][j + 1].stone & 1) << 31);\n            st1[i][j].paper = (st1[i - 1][j].paper >> 1) + ((st1[i - 1][j + 1].paper & 1) << 31);\n            st1[i][j].scissor = (st1[i - 1][j].scissor >> 1) + ((st1[i - 1][j + 1].scissor & 1) << 31);\n            st2[i][j].stone = (st2[i - 1][j].stone >> 1) + ((st2[i - 1][j + 1].stone & 1) << 31);\n            st2[i][j].paper = (st2[i - 1][j].paper >> 1) + ((st2[i - 1][j + 1].paper & 1) << 31);\n            st2[i][j].scissor = (st2[i - 1][j].scissor >> 1) + ((st2[i - 1][j + 1].scissor & 1) << 31);\n        } // \u9884\u5904\u7406\u4ece\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 int\uff0c\u6bd4\u5982 1\uff5e32\uff0c2\uff5e33\uff0c3\uff5e34\u2026\u2026\u65b9\u4fbf\u8fd0\u7b97\u3002\n    }\n    static u32 anss[MGAME];\n    for (int i = 0; i < q; i++)\n    {\n        int x, y, len;\n        scanf(\"%d%d%d\", &x, &y, &len);\n        u32 dx = x & 31, dy = y & 31;\n        u32 block_len = len >> 5;\n        Stat *it1 = st1[dx] + (x >> 5), *it2 = st2[dy] + (y >> 5);\n        u32 ans = 0;\n        Stat *it1_end = st1[dx] + (x >> 5) + block_len;\n        while (it1 < it1_end) // \u4f7f\u7528\u6307\u9488\u987a\u5e8f\u904d\u5386\uff0c\u51cf\u5c11\u4e0b\u6807\u8fd0\u7b97\u3002\n        {\n            ans += __builtin_popcount((it1->paper & it2->stone)\n                                    | (it1->scissor & it2->paper)\n                                    | (it1->stone & it2->scissor));\n            it1++;\n            it2++;\n        } // \u6c42\u8d62\u7684\u4e2a\u6570\u3002\n        ans += __builtin_popcount(((it1->paper & it2->stone)\n                                 | (it1->scissor & it2->paper)\n                                 | (it1->stone & it2->scissor)) & ((1 << (len & 31)) - 1)); // \u6c42\u5269\u4e0b\u7684\u8d62\u7684\u4e2a\u6570\u3002\n                                \n        anss[i] = ans;\n    }\n\n    output_arr(anss, q);\n}\n\n```\n\u4ee5\u4e3a\u8fc7\u4e0d\u4e86\uff0c\u7ed3\u679c\u5c45\u7136\u6070\u6070\u76f8\u53cd\uff08210ms\uff09\u3002\n\n\n## 74 \u5206\n\n\u62ec\u53f7\u5e8f\u5217\uff0c\u5bb9\u6613\u60f3\u5230 $\\mathrm{O}(n^2)$ \u7684 dp\uff0c\u4e0d\u8fc7\u5fc5\u7136\u8d85\u65f6\u3002\n\n$$\n\\begin{aligned}\nf_{i,j} &=\n\\left\\{\\begin{matrix}\n&f_{i - 1,j - 1} + f_{i - 1,j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u95ee\u53f7} \\\\ \n&f_{i-1,j-1} \\text{\uff0c\u5f53\u524d\u4e3a\u5de6\u62ec\u53f7}\\\\\n&f_{i - 1,j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u53f3\u62ec\u53f7}\n\\end{matrix}\\right.\n\\end{aligned}\n$$\n\n## 79 \u5206\n\n\u6eda\u52a8\u6570\u7ec4 + \u6307\u9488\u904d\u5386 + memmove \u5c31\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u901f\u5ea6\u3002\n\n#### \u4f18\u5316 1\uff1a\u6eda\u52a8\u6570\u7ec4\n\n$$\n\\begin{aligned}\nf_{j} &=\n\\left\\{\\begin{matrix}\n&f_{j - 1} + f_{j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u95ee\u53f7} \\\\ \n&f_{j - 1} \\text{\uff0c\u5f53\u524d\u4e3a\u5de6\u62ec\u53f7}\\\\\n&f_{j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u53f3\u62ec\u53f7}\n\\end{matrix}\\right.\n\\end{aligned}\n$$\n\n#### \u4f18\u5316 2\uff1amemmove\n\n\u82e5 $f_j = f_{j-1}$ \uff0c\u90a3\u4e48\u4f7f\u7528 stdlib.h \u4e2d\u7684 memmove() (\u5e38\u6570\u5f88\u5c0f) \u5c06\u6574\u4e2a dp \u6570\u7ec4\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c$f_j = f_{j+1}$ \u5c31\u5411\u5de6\u4e00\u683c\u3002$f_j = f_{j-1} + f_{j+1}$ \u5c31\u5728\u5411\u5de6\u79fb\u52a8\u4e00\u683c\u7684\u57fa\u7840\u4e0a $f_j = f_j + f_{j - 2}$\u3002\n\n#### \u4f18\u5316 3\uff1a\u6307\u9488\u904d\u5386\n\n$f_j = f_j + f_{j + 2}$ \u65f6\u7528\u6307\u9488\u904d\u5386\uff0c\u51cf\u5c11\u4e0b\u6807\u8fd0\u7b97\u3002 \n\n\u4e8e\u662f\u6211\u5f97\u4e86 79 \u5206\u3002\n\n## 93 \u5206\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u5728\u89c2\u5bdf dp \u6570\u7ec4\u65f6\uff0c\u53d1\u73b0\u5728\u904d\u5386\u5230\u7b2c\u5355\u6570\u4e2a\u5b57\u7b26\u65f6\uff0c\u7b2c\u53cc\u6570\u4e2a dp \u503c\u5fc5\u7136\u662f 0\uff0c\u7b2c\u53cc\u6570\u4e2a\u5b57\u7b26\u65f6\u7b2c\u5355\u6570\u4e2a dp \u503c\u5fc5\u7136\u662f 0\u3002\u53ef\u4ee5\u518d\u6b21\u4f18\u5316\u3002\n\n#### \u4f18\u5316 4\uff1a\u5947\u5076\u4f18\u5316\n\n\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\n\n\n\u4e0b\u6807\u4e3a\u5355\u6570\uff1a\n$$\n\\begin{aligned}\nf_{j} &=\n\\left\\{\\begin{matrix}\n&f_{j} + f_{j - 1} \\text{\uff0c\u5f53\u524d\u4e3a\u95ee\u53f7} \\\\ \n&f_{j - 1} \\text{\uff0c\u5f53\u524d\u4e3a\u5de6\u62ec\u53f7}\\\\\n&f_{j} \\text{\uff0c\u5f53\u524d\u4e3a\u53f3\u62ec\u53f7}\n\\end{matrix}\\right.\n\\end{aligned}\n$$\n\u4e0b\u6807\u4e3a\u53cc\u6570\uff1a\n$$\n\\begin{aligned}\nf_{j} &=\n\\left\\{\\begin{matrix}\n&f_{j} + f_{j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u95ee\u53f7} \\\\ \n&f_{j} \\text{\uff0c\u5f53\u524d\u4e3a\u5de6\u62ec\u53f7}\\\\\n&f_{j + 1} \\text{\uff0c\u5f53\u524d\u4e3a\u53f3\u62ec\u53f7}\n\\end{matrix}\\right.\n\\end{aligned}\n$$\n\n\n\u53ef\u4ee5\u62ff\u5230 93 \u5206\u3002\n\n## 100 \u5206\n\n#### \u4f18\u5316 5\uff1a\u7f29\u77ed dp \u6570\u7ec4\u957f\u5ea6\n\n\u7136\u540e\uff0c\u6211\u53d1\u73b0\u5728\u904d\u5386\u4e00\u5b9a\u5b57\u7b26\u6570\u65f6\uff0c\u4e0b\u6807\u8f83\u5927\u7684 dp \u503c\u6ca1\u6709\u53c2\u4e0e\u7b54\u6848\u7684\u8fd0\u7b97\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b83\u4eec\uff0c\u7f29\u77ed dp \u6570\u7ec4\u957f\u5ea6\u3002\u8be6\u7ec6\u65b9\u5f0f\u89c1\u4ee3\u7801\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5 AC \u5566\uff01\n\n\n```c\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nvoid Parentheses_main(void)\n{\n    int n;\n    scanf(\"%d\", &n);\n\n    static char s[MPAIR];\n    scanf(\"%s\", s);\n\n    static u32 dp[MPAIR / 2] = {1}; // \u4f18\u5316 1\n    int cur_len = 0;\n    for (int i = 0; i < n; i++)\n    {\n        while (cur_len * 2> n - i) // \u4f18\u5316 5\n        {\n            dp[cur_len--] = 0;\n        }\n        if (s[i] == '?')\n        {\n            u32 tmp_dp0 = dp[0];\n            if ((i & 1) == 0) // \u4f18\u5316 4\n                memmove(dp, dp + 1, (cur_len + 1) * sizeof(u32)), dp[cur_len] = 0; // \u4f18\u5316 2\n            if ((i & 1) == 1) // \u4f18\u5316 4\n                cur_len++;\n            register u32 *it = dp + cur_len;\n            for (; it > dp; it--)\n            {\n                it[0] += it[-1]; // \u4f18\u5316 3\n            }\n            if ((i & 1) == 0) // \u4f18\u5316 4\n                dp[0] += tmp_dp0;\n        }\n        else if (s[i] == '(')\n        {\n            if ((i & 1) == 1) // \u4f18\u5316 4\n            {\n                memmove(dp + 1, dp, (cur_len + 1) * sizeof(u32)); // \u4f18\u5316 2\n                dp[0] = 0;\n                cur_len++;\n            }\n        }\n        else if (s[i] == ')')\n        {\n            if (cur_len == 0 && (i & 1) == 0) // \u4e00\u5b9a\u4e0d\u5408\u6cd5\u65f6\u8df3\u51fa\u3002\n            {\n                printf(\"0\");\n                return;\n            }\n            if ((i & 1) == 0) // \u4f18\u5316 4\n            {\n                memmove(dp, dp + 1, (cur_len + 1) * sizeof(u32)); // \u4f18\u5316 2\n                dp[cur_len] = 0;\n                cur_len--;\n            }\n        }\n    }\n\n    printf(\"%u\\n\", dp[0]);\n}\n```\n\n\u7efc\u4e0a\uff0c\u8fd9\u9053\u9898\u5e76\u975e\u4f7f\u7528 i++ \u6539\u6210 ++i\uff0c\u6216\u662f\u5feb\u8bfb\uff0c\u751a\u81f3\u662f\u5faa\u73af\u5c55\u5f00\u8fd9\u4e00\u7cfb\u5217\u7384\u5b66\u3001\u4e0d\u53ef\u9760\u3001\u964d\u4f4e\u4ee3\u7801\u53ef\u8bfb\u6027\u7684\u4f18\u5316\uff0c\u800c\u662f\u4e0d\u505c\u5730\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8fd0\u7b97\u3002\u6240\u4ee5\u8fd9\u9053\u9898\u8003\u9a8c\u7684\uff0c\u66f4\u591a\u662f\u5bf9\u7b97\u6cd5\u7684\u4f18\u5316\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u6240\u8c13\u7684\u201c\u786c\u4ef6\u77e5\u8bc6\u201d\u3002",
        "postTime": 1630917377,
        "uid": 52381,
        "name": "CodingJellyfish",
        "ccfLevel": 6,
        "title": "\u5e76\u4e0d\u7384\u5b66\u7684\u5361\u5e38\u9898\uff1aWC2017 \u6311\u6218"
    },
    {
        "content": "\u63cf\u53d9\u4e0a\u53ef\u80fd\u6709\u7f3a\u9677\uff0c\u89c1\u8c05\u3002\n# task1\n**\u5229\u7528\u7f13\u5b58\uff0c\u63d0\u9ad8\u8bbf\u95ee\u8fde\u7eed\u6027**\n\n\u6392\u5e8f\u561b\uff0c\u80af\u5b9a\u8981\u7528\u57fa\u6570\u6392\u5e8f\u7684\u3002\n\n\u90a3\u4e48\u5c31\u50cf\u6837\u5730\u5199\u4e2a\uff1a\u6a21\u657065535\u2014\u2014T\uff0c\u6a21\u65702048\u2014\u2014T\uff0c\u6a21\u6570256\u2014\u2014AC\uff08\u8bc4\u6d4b\u7ed3\u679c\u4ee5loj\u4e3a\u51c6\uff09\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u6709\u4e00\u70b9\u662f\u9700\u8981\u77e5\u9053\u7684\uff1a\u6570\u7ec4\u8bbf\u95ee\u5f88\u6162\u3002\u7136\u540e\u5462\uff0c\u6709\u4e2a\u4e1c\u897f\u53eb\u505a\u7f13\u5b58\uff0c\u5b83\u53ef\u4ee5\u63d0\u5347CPU\u8bfb\u53d6\u6570\u636e\u7684\u901f\u5ea6\u3002\u6570\u7ec4\u5f00256\u8bbf\u95ee\u8de8\u5ea6\u8f83\u5c0f\uff0c\u5c31\u53ef\u4ee5\u5361\u8fdb\u4e00\u7ea7\u7f13\u5b58\uff0c\u7136\u540e\u8bbf\u95ee\u5c31\u53d8\u5feb\u5566\u3002\n\n\u4e0d\u8fc7\u8fd9\u6837\u5199\u5728luogu\u4e0a\u4f9d\u65e7\u4f1aT\uff08\u8bc4\u6d4b\u59ec\u7384\u5b66\uff09\u3002\n\n\u8003\u8651\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u7ed3\u679c\u5206\u522b\u5b58\u653e\u57284\u4e2a\u6570\u7ec4\uff0c\u5e76\u4f9d\u6b21\u6392\u5e8f\u3002\u5177\u4f53\u7684\u539f\u7406\u4e0d\u662f\u7279\u522b\u6e05\u695a\uff0c\u4e0d\u8fc7\u4ee3\u7801\u7b80\u6d01\u591a\u4e86\u3002\n\n\u6700\u540e\uff0c\u8fd8\u8981\u627e\u4e00\u4e2a\u8bc4\u6d4b\u6570\u8f83\u5c11\u7684\u70b9\u63d0\u4ea4\uff0c\u8bc4\u6d4b\u6570\u8fc7\u591a\u4f1a\u5bfc\u81f4\u8bc4\u6d4b\u901f\u5ea6\u53d8\u6162\uff08\u6ce2\u52a8\u8fd8\u662f\u6bd4\u8f83\u5927\u7684\uff09\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u5e94\u7528\u5c31\u662f\u5728\u8bbf\u95ee\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5c3d\u91cf\u51cf\u5c11\u67e5\u8be2\u7684\u70b9\u7684\u5730\u5740\u8de8\u5ea6\uff0c\u4ee5\u6b64\u63d0\u9ad8\u6570\u7ec4\u8bbf\u95ee\u901f\u5ea6\uff08\u8f83\u5927\u7684\u7ef4\u5ea6\u653e\u524d\u9762\uff0c\u8f83\u5c0f\u7684\u7ef4\u5ea6\u653e\u540e\u9762\uff09\u3002\n# task2\n**\u5faa\u73af\u5c55\u5f00**\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u4efb\u52a1\u7684\u6734\u7d20\u5199\u6cd5\u5e94\u8be5\u5f88\u7b80\u5355\u5427\uff0c\u6bcf\u6b21\u57fa\u4e8e\u6570\u7ec4\u67e5\u8be2\u3002\u5177\u4f53\u7684\u4ee3\u7801\u5e94\u8be5\u957f\u8fd9\u6837\n```cpp\nvoid solve(int n,int Q,char* l,char* r,int* s,int* t,int* len,u32 anss[]) {\n\tfor(int i=0; i<n; ++i)l[i]^=48,r[i]^=48;\n\tfor(int i=0; i<Q; ++i) {\n\t\tint ans=0;\n\t\tfor(int j(0); j<len[i]; ++j) ans+=chk[l[s[i]+j]][r[t[i]+j]];\n\t\tanss[i]=ans;\n\t}\n}\n```\n\u5f53\u7136\u8fd9\u6837\u5e76\u4e0d\u80fd\u8fc7\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u662f\u4e00\u79cd\u6700\u65e0\u8111\u7684\u5361\u5e38\u6280\u5de7\uff1a\u5faa\u73af\u5c55\u5f00\u3002\n\n\u5faa\u73af\u5c55\u5f00\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u8bed\u53e5\u5c55\u5f00\u591a\u6b21\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u539f\u7406\u5c31\u662f\u63d0\u9ad8\u4ee3\u7801\u7684\u5e76\u884c\u6027\uff0c\u5229\u7528CPU\u7684\u4e71\u5e8f\u6267\u884c\u3002\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\u5c31\u662f\u5e76\u884c\u7684\u8bed\u53e5\u4e0d\u80fd\u6709\u5173\u8054\uff0c\u5c31\u662f\u8bf4\u4e00\u6761\u8bed\u53e5\u6267\u884c\u5b8c\u540e\u8981\u6c42\u5bf9\u53e6\u4e00\u6761\u8bed\u53e5\u8fd0\u7b97\u4e0d\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\n\n\u4e3e\u4e00\u4e2a\u7b80\u5355\u611a\u8822\u7684\u4f8b\u5b50\uff1a\n\n```cpp\nfor(int i=1;i<=n;++i)++a;\n```\n\u6b63\u786e\u5199\u6cd5:\n```cpp\nint i,a1=0,a2=0,a3=0,a4=0,a5=0,a6=0,a7=0;\nfor(i=1;i+8<=n;i+=8){\n    ++a;\n    ++a1;\n    ++a2;\n    ++a3;\n    ++a4;\n    ++a5;\n    ++a6;\n    ++a7;\n}\nfor(;i<=n;++i)++a;\na+=a1+a2+a3+a4+a5+a6+a7;\n```\n\u9519\u8bef\u5199\u6cd5\uff1a\n```cpp\nint i;\nfor(i=1;i+8<=n;i+=8){\n    ++a;\n    ++a;\n    ++a;\n    ++a;\n    ++a;\n    ++a;\n    ++a;\n    ++a;\n}\nfor(;i<=n;++i)++a;\n```\n\u4e0d\u8fc7\u9519\u8bef\u4ee3\u7801\u867d\u7136\u6548\u679c\u4e0d\u4f73\uff08\u76f8\u6bd4\u4e4b\u4e0b\u5dee\u591a\u4e86\uff09\uff0c\u4f46\u4e5f\u662f\u6709\u52a0\u901f\u7684\u3002\n\n\u4e00\u822c\u6765\u8bb2\u5faa\u73af\u5c55\u5f006~8\u5c42\u6548\u679c\u6700\u4f73\uff0c\u5faa\u73af\u5c55\u5f00\u7684\u7f3a\u9677\u5c31\u5728\u4e8e\u7834\u574f\u4e86\u4ee3\u7801\u7ed3\u6784\u3002\n\n\u7136\u540e\u5229\u7528\u5b83\u5c31\u53ef\u4ee5\u5b8c\u6210task2\u4e86\u3002\n\n\u4ee5\u4e0a\u4e3a\u66b4\u529b\u5199\u6cd5\uff0c\u5927\u7ea6\u8981\u8dd12500ms\uff0c\u8fd8\u6709\u66f4\u4f18\u7684\u5199\u6cd5\u3002\n\n\u5148\u89c2\u5bdf\u4e00\u4e0b\u8d62\u7684\u89c4\u5f8b\uff1al\u548c(r-1+3)%3\u76f8\u7b49\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u628ar\u6570\u7ec4\u8f6c\u6362\u6389\u3002\n\n\u7531\u4e8e\u67e5\u8be2\u7684\u662f\u533a\u95f4\uff0c\u53ef\u4ee5\u60f3\u5230\u5206\u5757\u3002\u8fd9\u4e2a\u4efb\u52a1\u539f\u9898\u5e94\u8be5\u5c31\u662f\u6b63\u7ecf\u7684\u5206\u5757\u4e86\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u91cc\u628a\u5757\u5927\u5c0f\u8bbe\u4e3a32\uff0c\u4f18\u70b9\uff1a\u67e5\u8be2\u4e24\u4e2a\u5757\u7684\u6bd4\u8f83\u53ea\u9700&\u4e00\u4e0b\u5e76\u67e5\u627e1\u7684\u4e2a\u6570\uff08\u7531\u4e8e\u662funsigned int\uff0c\u628a\u5b83\u5206\u6210\u4e24\u6bb5\u6765\u67e5\u627e\uff09\u3002\u7531\u4e8e\u8d77\u59cb\u70b9\u662f\u4efb\u610f\u7684\uff0c\u56e0\u6b64\u8981\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u8d77\u59cb\u70b9\u90fd\u9884\u5904\u7406\u4e00\u904d\uff080~31\uff09\uff0c\u5f53\u7136\u8fd8\u8981\u5206\u7b56\u7565\u7684\u7c7b\u578b\u3002\u5757\u4e4b\u5916\u7684\u66b4\u529b\u627e\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nu32 ls[32][3][(mn>>5)+5],rs[32][3][(mn>>5)+5];\nint cnt[(1<<16)+5];\nconst int INF=(1<<16)-1;\n#define uncnt(a) cnt[a>>16]+cnt[a&INF]\nvoid solve(int n,int Q,char* l,char* r,int* s,int* t,int* len,u32 anss[]) {\n\trep(q,1,INF)cnt[q]=cnt[q&q-1]+1;\n\trep(q,0,n-1)l[q]^=48,r[q]^=48;\n\trep(q,0,n-1)r[q]=r[q]==0?2:r[q]-1;\n\trep(st,0,31) {\n\t\tfor(int q=st; q+31<n; q+=32) {\n\t\t\tfor(u32 w=0; w<32; ++w)ls[st][l[q+w]][q>>5]|=1<<w;\n\t\t}\n\t\tfor(int q=st; q+31<n; q+=32) {\n\t\t\tfor(u32 w=0; w<32; ++w)rs[st][r[q+w]][q>>5]|=1<<w;\n\t\t}\n\t}\n\trep(q,0,Q-1) {\n\t\tanss[q]=0;\n\t\tint now=0;\n\t\tfor(; now+31<len[q]; now+=32) {\n\t\t\tu32 d=ls[s[q]&31][0][s[q]+now>>5]&rs[t[q]&31][0][t[q]+now>>5];\n\t\t\tu32 d1=ls[s[q]&31][1][s[q]+now>>5]&rs[t[q]&31][1][t[q]+now>>5];\n\t\t\tu32 d2=ls[s[q]&31][2][s[q]+now>>5]&rs[t[q]&31][2][t[q]+now>>5];\n\t\t\tanss[q]+=uncnt(d)+uncnt(d1)+uncnt(d2);\n\t\t}\n\t\tfor(; now<len[q]; ++now)anss[q]+=(l[s[q]+now]==r[t[q]+now]);\n\t}\n}\n```\n\n\u7136\u540e\u8dd1\u4e861500ms\u3002\n\n**\u4f7f\u7528\u6307\u9488\u4ee3\u66ff\u6570\u7ec4\u90e8\u5206\u7ef4\u5ea6**\n\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u91cc\uff0c\u53ef\u4ee5\u53d1\u73b0\u67e5\u8be2\u7684\u65f6\u5019\u6570\u7ec4\u524d2\u7ef4\u90fd\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u663e\u7136\u76f4\u63a5\u8bbf\u95ee\u4f1a\u767d\u767d\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\u3002\n\n\u5229\u7528\u6307\u9488\uff0c\u524d\u4e24\u7ef4\u7684\u8bbf\u95ee\u53ef\u4ee5\u7b80\u5316\u4e3a\u5bf9\u6307\u9488\u7684\u5bfb\u5740\uff0c\u901f\u5ea6\u5927\u5927\u63d0\u5347\u3002\n\n\u6709\u4fee\u6539\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n```cpp\nrep(q,0,Q-1) {\n\tanss[q]=0;\n\tu32 *d0=ls[s[q]&31][0]+(s[q]>>5),*d0_=rs[t[q]&31][0]+(t[q]>>5);\n\tu32 *d1=ls[s[q]&31][1]+(s[q]>>5),*d1_=rs[t[q]&31][1]+(t[q]>>5);\n\tu32 *d2=ls[s[q]&31][2]+(s[q]>>5),*d2_=rs[t[q]&31][2]+(t[q]>>5);\n\tint now=0,tim=-1;\n\tfor(; now+31<len[q]; now+=32) {\n\t\t++tim;\n\t\tanss[q]+=uncnt(d0[tim]&d0_[tim]);\n\t\tanss[q]+=uncnt(d1[tim]&d1_[tim]);\n\t\tanss[q]+=uncnt(d2[tim]&d2_[tim]);\n\t}\n\tfor(; now<len[q]; ++now)anss[q]+=(l[s[q]+now]==r[t[q]+now]);\n}\n```\n\n\u987a\u624b\u518d\u8865\u4e00\u4e2a\u8bfb\u5165\u6302\uff0c\u6700\u540e\u53ea\u9700650ms\u5566\u3002\n\n\u4e00\u822c\u6765\u8bb2\u6307\u9488\u8bbf\u95ee\u90fd\u8981\u6bd4\u6570\u7ec4\u4e0b\u6807\u8bbf\u95ee\u5feb\uff0c\u4e0d\u8fc7\u6700\u597d\u4e0d\u8981\u4f7f\u7528new\u64cd\u4f5c\u7b26\uff0c\u6162\u5f97\u53ef\u4ee5\uff0c\u6700\u597d\u624b\u5199\u5185\u5b58\u6c60\u548c\u5783\u573e\u6c60\u3002\n# task3\n**\u51cf\u5c11\u65e0\u7528\u8fd0\u7b97\uff0c\u4f18\u5316\u7b97\u6cd5**\n\n\u6734\u7d20\u7684\u5199\u6cd5\u5c31\u662f\u8bbe\u4e00\u4e2a\u5149\u6807\uff0c\u7136\u540e\u5728dp\u6570\u7ec4\u4e0a\u8fdb\u884c\u6ed1\u52a8\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\"?\"\uff0c\u5c31\u628a\u6240\u6709\u7684\u503c\u52a0\u4e0a\u4e24\u4fa7\u7684\u503c\u3002\n\n\u5177\u4f53\u5e94\u8be5\u957f\u8fd9\u6837\uff1a\n```cpp\nu32 ans[600000];\nu32 solve(int n,char* s) {\n\tu32* dp=ans+270000;\n\tdp[0]=1;\n\tfor(int q=n-1; q>-1; --q) {\n\t\tif(s[q]=='(')++dp;\n\t\telse if(s[q]==')')--dp;\n\t\telse {\n\t\t\tint Min=std::min(n-q,q),last=0;\n\t\t\tfor(int w=0; w<=Min; ++w) {\n\t\t\t\tint mid_last=dp[w];\n\t\t\t\tdp[w]=last+dp[w+1];\n\t\t\t\tlast=mid_last;\n\t\t\t}\n\t\t}\n\t\tdp[-1]=0;\n\t}\n\treturn dp[0];\n}\n```\n\u5f53\u7136\u662f\u8fc7\u4e0d\u6389\u7684\uff0c\u8fdb\u884c\u4e00\u70b9\u5c0f\u4f18\u5316\uff1a\u5e76\u975e\u6240\u6709\u4e0b\u6807\u90fd\u53ef\u4ee5\u8fbe\u5230\uff0c\u5982\u679c\u76ee\u524d\u5916\u5c42\u5faa\u73af\u5230q\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8fbe\u5230\u4e0b\u6807\u7684\u5947\u5076\u548cq\u662f\u4e00\u81f4\u7684\uff08\u4e00\u5bf9\u5339\u914d\u7684\u62ec\u53f7\u5360\u7528\u4e862\uff09\uff0c\u56e0\u6b64\u5176\u5b83\u7684\u5947\u5076\u4e0d\u4e00\u81f4\u7684\u4e0b\u6807\u53ef\u4ee5\u5ffd\u7565\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\uff08\u52a0\u4e86\u4e00\u4e2a\u5faa\u73af\u5c55\u5f00\uff0c\u4e0d\u8fc7\u6ca1\u6709\u7528\uff09\u3002\n## code\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#define rep(q,a,b) for(register int q(a),q##_end_(b);q<=q##_end_;++q)\n#define dep(q,a,b) for(register int q(a),q##_end_(b);q>=q##_end_;--q)\n#define mem(a,b) memset(a,b,sizeof a )\n#pragma GCC optimize(3)\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\n\n#define next_integer(x) x^=x<<13,x^=x>>17,x^=x<<5\n\nbool output_arr(void *a, u32 size) {\n\tif (size % 4) {\n\t\treturn puts(\"-1\"), 0;\n\t}\n\n\tu32 blocks = size / 4;\n\tu32 *A = (u32 *)a;\n\tu32 ret = size;\n\tu32 x = 23333333;\n\tfor (register u32 i = 0; i < blocks; i++) {\n\t\tret = ret ^ (A[i] + x);\n\t\tx ^= x << 13;\n\t\tx ^= x >> 17;\n\t\tx ^= x << 5;\n\t}\n\n\treturn printf(\"%u\\n\", ret), 1;\n}\n\n// ===== header ======\n\nnamespace Sorting {\n\tint sum[256],sum1[256],sum2[256],sum3[256];\n\tvoid init_data(u32 *a, int n, u32 seed) {\n\t\tfor (register int i = 0; i < n; i++) {\n\t\t\tnext_integer(seed);\n\t\t\ta[i] = seed;\n\t\t\t++sum[seed&255];\n\t\t\t++sum1[(seed>>8)&255];\n\t\t\t++sum2[(seed>>16)&255];\n\t\t\t++sum3[seed>>24];\n\t\t}\n\t}\n\tvoid main() {\n\t\tint n;\n\t\tu32 seed;\n\t\tscanf(\"%d%u\", &n, &seed);\n\n\t\tu32 *a = new u32[n];\n\t\tinit_data(a, n, seed);\n\n\t\tu32 *b=new u32[n];\n\t\trep(q,1,255) {\n\t\t\tsum[q]+=sum[q-1];\n\t\t\tsum1[q]+=sum1[q-1];\n\t\t\tsum2[q]+=sum2[q-1];\n\t\t\tsum3[q]+=sum3[q-1];\n\t\t}\n\t\tdep(q,n-1,0)b[--sum[a[q]&255]]=a[q];\n\t\tdep(q,n-1,0)a[--sum1[(b[q]>>8)&255]]=b[q];\n\t\tdep(q,n-1,0)b[--sum2[(a[q]>>16)&255]]=a[q];\n\t\tdep(q,n-1,0)a[--sum3[b[q]>>24]]=b[q];\n\n\t\toutput_arr(a, n * sizeof(u32));\n\t}\n}\n\nnamespace Game {\n\tconst int mn=300005;\n\tu32 ls[32][3][(mn>>5)+5],rs[32][3][(mn>>5)+5];\n\tint cnt[(1<<16)+5];\n\tconst int INF=(1<<16)-1;\n\tinline int uncnt(u32 a) {\n\t\treturn cnt[a>>16]+cnt[a&INF];\n\t}\n\tchar buf[10000000],*p1=buf,*p2=buf;\n\t#define Getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,10000000,stdin),p1==p2)?EOF:*p1++\n\tvoid in(int &r){\n\t\tstatic char c;\n\t\tr=0;\n\t\twhile(c=getchar(),c<48);\n\t\tdo r=(r<<1)+(r<<3)+(c^48);\n\t\twhile(c=getchar(),c>47);\n\t}\n\tvoid solve(int n,int Q,char* l,char* r,int* s,int* t,int* len,u32 anss[]) {\n\t\trep(q,1,INF)cnt[q]=cnt[q&q-1]+1;\n\t\trep(q,0,n-1)l[q]^=48,r[q]^=48;\n\t\trep(q,0,n-1)r[q]=r[q]==0?2:r[q]-1;\n\t\trep(st,0,31) {\n\t\t\tfor(int q=st; q+31<n; q+=32) {\n\t\t\t\tfor(u32 w=0; w<32; ++w)ls[st][l[q+w]][q>>5]|=1<<w;\n\t\t\t}\n\t\t\tfor(int q=st; q+31<n; q+=32) {\n\t\t\t\tfor(u32 w=0; w<32; ++w)rs[st][r[q+w]][q>>5]|=1<<w;\n\t\t\t}\n\t\t}\n\t\trep(q,0,Q-1) {\n\t\t\tanss[q]=0;\n\t\t\tu32 *d0=ls[s[q]&31][0]+(s[q]>>5),*d0_=rs[t[q]&31][0]+(t[q]>>5);\n\t\t\tu32 *d1=ls[s[q]&31][1]+(s[q]>>5),*d1_=rs[t[q]&31][1]+(t[q]>>5);\n\t\t\tu32 *d2=ls[s[q]&31][2]+(s[q]>>5),*d2_=rs[t[q]&31][2]+(t[q]>>5);\n\t\t\tint now=0,tim=-1;\n\t\t\tfor(; now+31<len[q]; now+=32) {\n\t\t\t\t++tim;\n\t\t\t\tanss[q]+=uncnt(d0[tim]&d0_[tim]);\n\t\t\t\tanss[q]+=uncnt(d1[tim]&d1_[tim]);\n\t\t\t\tanss[q]+=uncnt(d2[tim]&d2_[tim]);\n\t\t\t}\n\t\t\tfor(; now<len[q]; ++now)anss[q]+=(l[s[q]+now]==r[t[q]+now]);\n\t\t}\n\t}\n\n\tvoid main() {\n\t\tint n, q;\n\t\tscanf(\"%d%d\", &n, &q);\n\n\t\tchar *s1 = new char[n + 1];\n\t\tchar *s2 = new char[n + 1];\n\t\tscanf(\"%s%s\", s1, s2);\n\n\t\tu32 *anss = new u32[q];\n\t\tint *q_x = new int[q];\n\t\tint *q_y = new int[q];\n\t\tint *q_len = new int[q];\n\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tin(q_x[i]),in(q_y[i]),in(q_len[i]);\n\t\t}\n\n\t\tsolve(n, q, s1, s2, q_x, q_y, q_len, anss);\n\n\t\toutput_arr(anss, q * sizeof(u32));\n\t}\n}\nnamespace Parentheses {\n\tconst int mn=270000;\n\tu32 ans[600000];\n\tu32 solve(int n,char* s) {\n\t\tu32* dp=ans+mn+5;\n\t\tdp[0]=1;\n\t\tdep(q,n-1,0) {\n\t\t\tif(s[q]=='(')++dp;\n\t\t\telse if(s[q]==')')--dp;\n\t\t\telse {\n\t\t\t\tint Min=std::min(q,n-q),w=q&1;\n\t\t\t\tfor(; w+14<=Min; w+=14) {\n\t\t\t\t\tdp[w]=dp[w-1]+dp[w+1];\n\t\t\t\t\tdp[w+2]=dp[w+1]+dp[w+3];\n\t\t\t\t\tdp[w+4]=dp[w+3]+dp[w+5];\n\t\t\t\t\tdp[w+6]=dp[w+5]+dp[w+7];\n\t\t\t\t\tdp[w+8]=dp[w+7]+dp[w+9];\n\t\t\t\t\tdp[w+10]=dp[w+9]+dp[w+11];\n\t\t\t\t\tdp[w+12]=dp[w+11]+dp[w+13];\n\t\t\t\t}\n\t\t\t\tfor(; w<=Min; w+=2)dp[w]=dp[w-1]+dp[w+1];\n\t\t\t}\n\t\t\tdp[-1]=0;\n\t\t}\n\t\treturn dp[0];\n\t}\n\tvoid main() {\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\n\t\tchar *s = new char[n + 1];\n\t\tscanf(\"%s\", s);\n\n\t\tu32 ans;\n\t\tans = solve(n, s);\n\n\t\tprintf(\"%u\\n\", ans);\n\t}\n}\n\nint main() {\n\tint task_id;\n\tscanf(\"%d\", &task_id);\n\n\tswitch (task_id) {\n\t\tcase 1:\n\t\t\tSorting::main();\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tGame::main();\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tParentheses::main();\n\t\t\tbreak;\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1543052418,
        "uid": 92040,
        "name": "KLauraLee",
        "ccfLevel": 0,
        "title": "\u300cWC2017\u300d\u6311\u6218"
    },
    {
        "content": "# WC2017\n## T2 \u6311\u6218\n\n\u5bf9\u7740 yhx \u7684\u9898\u89e3\u7406\u89e3\u4e86\u4e00\u4e2a\u4e0b\u5348w\uff0c\u7b97\u662f\u5b66\u5230\u4e86\u5f88\u591a\u3002\n\n### \u4efb\u52a11 (6s) : $n=2e8,a_i\\in[0,2^{32})$ \u7684\u6392\u5e8f\n\n\u8003\u8651\u57fa\u6570\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\frac{nmax\\{a_i\\}}{base})$ \u7684\uff0c\u5373\u6211\u4eec\u9700\u8981\u6311\u4e00\u4e2a\u5408\u9002\u7684 $base$ \u6765\u4f18\u5316\u5e38\u6570\u3002\n\n\u9ad8\u901f\u7f13\u5b58\u5668 ($\\text{cache}$ ) : **\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\u6700\u91cd\u8981\u7684\u6280\u672f\u6307\u6807\u662f\u5b83\u7684\u547d\u4e2d\u7387\u3002**\n\n\u9ad8\u901f\u7f13\u5b58\u5668\u91cc\u9762\u5b58\u4e86\u4e00\u6bb5\u5185\u5b58\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u901a\u8fc7\u9ad8\u901f\u7f13\u5b58\u5668\u5feb\u901f\u8bbf\u95ee\u8fd9\u6bb5\u5185\u5b58\u91cc\u9762\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u3002\u4e00\u65e6\u8bbf\u95ee\u5185\u5b58\u5916\u7684\u5143\u7d20\uff0c $\\text{cache}$ \u5c31\u4f1a\u770b\u60c5\u51b5\u9009\u62e9\u662f\u5426\u6e05\u7a7a\u5e76\u91cd\u65b0\u586b\u5145\u5185\u5b58\u3002\n\n\u56e0\u6b64\u53ea\u8981\u6211\u4eec\u5c3d\u53ef\u80fd\u591a\u8bbf\u95ee $\\text{cache}$ \u5185\u7684\u4e1c\u897f\uff0c\u5c31\u80fd\u624b\u52a8\u63d0\u9ad8\u5b83\u7684\u547d\u4e2d\u7387\u3002\u9009\u62e9 $base=256$ \uff0c$\\text{cache}$ \u80fd\u5361\u8fdb\u4e00\u7ea7\u7f13\u5b58\uff0c\u5145\u5206\u5229\u7528 $\\text{cache}$ \u5e26\u6765\u7684\u4f18\u52bf\uff0c\u5e38\u6570\u5373\u53ef\u5927\u5927\u964d\u4f4e\u3002\n\n\u5faa\u73af\u5c55\u5f00\uff0c$8$ \u4e2a\u4e00\u6bb5\u4e00\u8d77\u5904\u7406\uff0c\u5373\u53ef\u901a\u8fc7\u3002\n\n### \u4efb\u52a12 (3s) : $n=q=300000$ \u7684\u77f3\u5934\u526a\u5200\u5e03\n\n\u5c06 $b[i]$ \u53d8\u6210 $b[i]-1(mod\\ 3)$ \uff0c\u8f6c\u5316\u6210\u6bd4\u8f83 $a_{x,...,x+len-1}$ \u548c $b_{y,...,y+len-1}$ \u6709\u591a\u5c11\u4e2a\u4f4d\u7f6e\u5339\u914d\u3002\n\n\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\uff1a$0$ \u5bf9\u5e94 $100$ \uff0c$1$ \u5bf9\u5e94 $010$ , $2$ \u5bf9\u5e94 $001$ \uff0c\u5c06\u5176\u538b\u5230 $bitset$ \u5185\u3002\n\n\u5faa\u73af\u5c55\u5f00\uff0c $8$ \u4e2a\u4e00\u6bb5\u4e00\u8d77\u5904\u7406\uff0c\u590d\u6742\u5ea6\u53ef\u505a\u5230 $O(\\frac{3n^2}{512})$ \uff0c\u5361\u5361\u5e38\u5373\u53ef\u901a\u8fc7\u3002\n\n### \u4efb\u52a13 (3s) : $n=266666$ \u7684\u62ec\u53f7\u5e8f\u5217\u8ba1\u6570\n\n\u8bb0 $dp[i][j]$ \u8868\u793a\u524d $i$ \u4e2a\u5b57\u7b26\u6709 $j$ \u4e2a\u5f85\u5339\u914d\u5de6\u62ec\u53f7\u7684\u65b9\u6848\u6570\u3002\n\n\u5f53 `a[i]='('\u6216')'` \u53d1\u73b0\u53ea\u662f\u6570\u7ec4\u5e73\u79fb\uff0c `a[i]='?'` \u5219 $dp[i][j]=dp[i-1][j-1]+dp[i-1][j+1]$ \u3002  \n\n\u7528\u6307\u9488\u5b9e\u73b0\u628a $i$ \u8fd9\u4e2a\u4f18\u5316\u6389\uff0c\u5faa\u73af\u5c55\u5f00\uff0c$8$ \u4e2a\u4e00\u6bb5\u4e00\u8d77\u5904\u7406\uff0c\u5e38\u6570\u4f18\u5316\uff1a\n\n- \u53ea\u6709 $j\\le min(i,n-i)$ \u624d\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff1b\n- \u53ea\u6709 $i\\equiv j (mod\\ 2)$ \u7684 $dp$ \u6709\u503c\u3002\n\n\u6574\u4f53\u5e38\u6570\u9664\u4ee5 $4$ \uff0c\u5373\u53ef\u901a\u8fc7\u3002\n\n```cpp\n// Author: wlzhouzhuan\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define u8 unsigned char\n#define u16 unsigned short\n#define u32 unsigned int\n#define u64 unsigned long long\n\ninline u32 next_integer(u32 x) {\n  x ^= x << 13;\n  x ^= x >> 17;\n  x ^= x << 5;\n  return x;\n}\nvoid output_arr(u32 *a, u32 size) {\n  u32 ret = size << 2, x = 23333333;\n  for (u32 i = 0; i < size; i++) ret ^= (a[i] + x), x = next_integer(x);\n  printf(\"%u\\n\", ret);\n}\nnamespace Sorting {\nconst int N = 200000000;\n\n#define fastsort(a, b, id) for (i0 = n - 1, i1 = n - 2, i2 = n - 3, i3 = n - 4, i4 = n - 5, i5 = n - 6, i6 = n - 7, i7 = n - 8; ~i0; ) \\\n    b[--S##id[ ((u8*)(a + i0))[id] ]] = a[i0], i0 -= 8, \\\n    b[--S##id[ ((u8*)(a + i1))[id] ]] = a[i1], i1 -= 8, \\\n    b[--S##id[ ((u8*)(a + i2))[id] ]] = a[i2], i2 -= 8, \\\n    b[--S##id[ ((u8*)(a + i3))[id] ]] = a[i3], i3 -= 8, \\\n    b[--S##id[ ((u8*)(a + i4))[id] ]] = a[i4], i4 -= 8, \\\n    b[--S##id[ ((u8*)(a + i5))[id] ]] = a[i5], i5 -= 8, \\\n    b[--S##id[ ((u8*)(a + i6))[id] ]] = a[i6], i6 -= 8, \\\n    b[--S##id[ ((u8*)(a + i7))[id] ]] = a[i7], i7 -= 8;\n\nu32 i, a[N], b[N], S0[256], S1[256], S2[256], S3[256];\nvoid main() {\n  u32 n, seed, i0, i1, i2, i3, i4, i5, i6, i7;\n  u8 *p = (u8*)&seed;\n  scanf(\"%u%u\", &n, &seed);\n  for (i = 0; i < n; i++) {\n    a[i] = seed = next_integer(seed);\n    S0[p[0]]++, S1[p[1]]++, S2[p[2]]++, S3[p[3]]++;\n  }\n  for (i = 1; i < 256; i++)\n    S0[i] += S0[i - 1], S1[i] += S1[i - 1], S2[i] += S2[i - 1], S3[i] += S3[i - 1];\n  fastsort(a, b, 0);\n  fastsort(b, a, 1);\n  fastsort(a, b, 2);\n  fastsort(b, a, 3);\n  output_arr(a, n);\n}\n}\nnamespace Game {\n#define popc(x) __builtin_popcountll(x) \nconst int N = 500005; \ntypedef u64 Bitset[3 * N >> 6], *pBitset;\nchar A[N], B[N];\nBitset a[64], b[64];\npBitset l0, l1, l2, l3, l4, l5, l6, l7;\npBitset r0, r1, r2, r3, r4, r5, r6, r7;\nvoid ins(pBitset a, int j) {\n  a[j >> 6] |= 1ull << (j & 63);\n}\nu32 ans[N];\nint n, q, len = 0;\nvoid main() {\n  scanf(\"%d%d%s%s\", &n, &q, A, B);\n  for (int i = 0; i < n; len += 3, i++) {\n    int letA = A[i] - '0', letB = (B[i] - '0' + 2) % 3;\n    int x = len + (letA & 3), y = len + (letB & 3);\n    for (int j = max(x - 63, 0); j <= x; j++) ins(a[x - j], j);\n    for (int j = max(y - 63, 0); j <= y; j++) ins(b[y - j], j); \n  }\n  for (int i = 0; i < q; i++) {\n    int x, y, len; scanf(\"%d%d%d\", &x, &y, &len);\n    x *= 3, y *= 3, len *= 3;\n    int blk = len >> 6;\n    l0 = a[x & 63] + (x >> 6), l1 = l0 + 1, l2 = l1 + 1, l3 = l2 + 1, l4 = l3 + 1, l5 = l4 + 1, l6 = l5 + 1, l7 = l6 + 1;\n    r0 = b[y & 63] + (y >> 6), r1 = r0 + 1, r2 = r1 + 1, r3 = r2 + 1, r4 = r3 + 1, r5 = r4 + 1, r6 = r5 + 1, r7 = r6 + 1;\n    for (int num = blk >> 3; num; num--) {\n      ans[i] += popc(*l0 & *r0), l0 += 8, r0 += 8;\n      ans[i] += popc(*l1 & *r1), l1 += 8, r1 += 8;\n      ans[i] += popc(*l2 & *r2), l2 += 8, r2 += 8;\n      ans[i] += popc(*l3 & *r3), l3 += 8, r3 += 8;\n      ans[i] += popc(*l4 & *r4), l4 += 8, r4 += 8;\n      ans[i] += popc(*l5 & *r5), l5 += 8, r5 += 8;\n      ans[i] += popc(*l6 & *r6), l6 += 8, r6 += 8;\n      ans[i] += popc(*l7 & *r7), l7 += 8, r7 += 8;\n    }\n    for (int num = blk & 7; num; num--) {\n      ans[i] += popc(*l0 & *r0), l0++, r0++;\n    } \n    ans[i] += popc(*l0 & *r0 & ~(-1ull << (len & 63)));\n  }\n  output_arr(ans, q);\n}\n}\nnamespace Parentheses {\nconst int N = 300000;\nchar s[N];\nint n;\nu32 i, dp[N << 1], *f = dp + N, *f0, *f1, *f2, *f3, *f4, *f5, *f6, *f7, *lim;\nvoid main() {\n  scanf(\"%d%s\", &n, s);\n  if (n & 1) {\n    puts(\"0\");\n    return ;\n  }\n  *f = 1;\n  for (int i = 0; i < n; f[-1] = 0, i++) {\n    if (s[i] == '(') f--;\n    else if (s[i] == ')') f++;\n    else {\n      f0 = f + !(i & 1), f1 = f0 + 2, f2 = f1 + 2, f3 = f2 + 2, f4 = f3 + 2, f5 = f4 + 2, f6 = f5 + 2, f7 = f6 + 2;\n      for (lim = f + min(i + 1, n - i - 1); f7 <= lim; ) {\n        *f0 = f0[-1] + f0[1], f0 += 16;\n        *f1 = f1[-1] + f1[1], f1 += 16;\n        *f2 = f2[-1] + f2[1], f2 += 16;\n        *f3 = f3[-1] + f3[1], f3 += 16;\n        *f4 = f4[-1] + f4[1], f4 += 16;\n        *f5 = f5[-1] + f5[1], f5 += 16;\n        *f6 = f6[-1] + f6[1], f6 += 16;\n        *f7 = f7[-1] + f7[1], f7 += 16;\n      }\n      for (; f0 <= lim; ) {\n        *f0 = f0[-1] + f0[1], f0 += 2;\n      }\n    }\n  }\n  printf(\"%u\\n\", *f);\n}\n}\nint main() {\n  int task_id;\n  switch (scanf(\"%d\", &task_id), task_id) {\n    case 1: Sorting::main(); break;\n    case 2: Game::main(); break;\n    case 3: Parentheses::main(); break;\n  }\n  return 0;\n}\n ```",
        "postTime": 1609315429,
        "uid": 112381,
        "name": "wlzhouzhuan",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4604 \u3010[WC2017]\u6311\u6218\u3011"
    },
    {
        "content": "# S1\n\n\u8003\u8651\u57fa\u6570\u6392\u5e8f\uff1a\u5bf9\u4e00\u4e2a\u8303\u56f4\u5c0f\u7684\u5173\u952e\u5b57\u505a $O(n)$ \u6392\u5e8f\uff0c\u4fdd\u5b58\u987a\u5e8f\u3002  \n\u600e\u4e48\u505a\u5462\uff1f\u89c2\u5bdf\u5230\u6392\u5e8f\u5b8c\u5173\u952e\u5b57\u4f1a\u5f62\u6210\u5f88\u591a\u5173\u952e\u5b57\u4e00\u6837\u7684\u201c\u5757\u201d\u3002\u53ef\u4ee5\u7edf\u8ba1\u8fd9\u4e9b\u5173\u952e\u5b57\u7684\u6570\u91cf\uff0c\u8dd1\u4e00\u4e2a\u524d\u7f00\u548c\u5c31\u5f97\u5230\u8fd9\u4e9b\u5757\u7684\u4f4d\u7f6e\u4e86\u3002  \n\u8fd9\u4e9b\u5757\u7684\u4f4d\u7f6e\u4e5f\u5b9a\u6392\u5e8f\u540e\u7684\u987a\u5e8f\u4e86\uff1a\u4ece\u6700\u540e\u9762\u6309\u7167\u524d\u7f00\u548c\u6570\u7ec4\u5b89\u6392\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6392\u5e8f\u4e00\u4e9b\u6570\u7b49\u4ef7\u4e8e\u6392\u5e8f\u4e00\u4e9b\u6570\u5bf9\uff0c\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u662f\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e8c\u4e2a\u5173\u952e\u5b57\u662f\u5b83\u4eec\u7684\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b50\u7528\u57fa\u6570\u6392\u5e8f\u3002\n\n\u6ce8\u610f\u5230\u6700\u4f73\u662f\u6309\u7167\u4e00\u4e2a\u5b57\u8282\u4e00\u4e2a\u5b57\u8282\u7684\u6392\u5e8f\u800c\u4e0d\u662f\u4e24\u4e2a\u5b57\u8282\u4e24\u4e2a\u5b57\u8282\u7684\u6392\u5e8f\uff0c\u7531\u4e8e\u4e00\u4e2a\u5b57\u8282\u7684\u524d\u7f00\u548c\u6570\u7ec4\u6b63\u597d\u53ef\u4ee5\u653e\u5165 L1 \u7f13\u5b58\u3002\u5957\u4e00\u4e9b\u5faa\u73af\u5c55\u5f00\u3002\n\n```cpp\n\tvoid sort(u32 *inp, u32 *tmp, int n) {\n#define half(a,b,k) \\\nmemset(oc, 0, sizeof oc); \\\nfor(int i=n; i; i-=8) { \\\n\toc[a[i-1]k]++;oc[a[i-2]k]++; \\\n\toc[a[i-3]k]++;oc[a[i-4]k]++; \\\n\toc[a[i-5]k]++;oc[a[i-6]k]++; \\\n\toc[a[i-7]k]++;oc[a[i-8]k]++; \\\n} \\\nfor(int i=1; i<256; i++) oc[i] += oc[i-1]; \\\nfor(int i=n; i; i-=8) { \\\n\tb[--oc[a[i-1]k]]=a[i-1];b[--oc[a[i-2]k]]=a[i-2];\\\n\tb[--oc[a[i-3]k]]=a[i-3];b[--oc[a[i-4]k]]=a[i-4];\\\n\tb[--oc[a[i-5]k]]=a[i-5];b[--oc[a[i-6]k]]=a[i-6];\\\n\tb[--oc[a[i-7]k]]=a[i-7];b[--oc[a[i-8]k]]=a[i-8];\\\n}\n\t\thalf(inp, tmp, &255);\n\t\thalf(tmp, inp, >>8&255);\n\t\thalf(inp, tmp, >>16&255);\n\t\thalf(tmp, inp, >>24);\n#undef half\n\t}\n```\n\n## S2\n\n\u9996\u5148\uff0c\u95ee\u9898\u53ef\u4ee5\u9000\u5316\u6210 \u201d\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u4e3a $3n$ \u7684\u6bd4\u7279\u5e8f\u5217 $a,b$\uff0c\u8be2\u95ee $\\textsf{popcount}(a[3x:3x+3L]\n\\&b[3y:3y+3L])$\u201c\u3002\u8f6c\u5316\u65b9\u5f0f\u662f\u628a\u6bcf\u4e00\u4e2a\u4eba\u62c6\u6210\u4e09\u4e2a\u6bd4\u7279\uff1a\u7b2c\u4e00\u6392\u4eba\u8868\u793a\u3010\u5b83\u51fa\u77f3\u5934\uff0c\u5b83\u51fa\u526a\u5200\uff0c\u5b83\u51fa\u5e03\u3011\uff0c\u7b2c\u4e8c\u6392\u4eba\u7684\u4e09\u4e2a\u6bd4\u7279\u8868\u793a\u3010\u5b83\u51fa\u526a\u5200\uff0c\u5b83\u51fa\u5e03\uff0c\u5b83\u51fa\u77f3\u5934\u3011\uff0c\u8fd9\u6837\u5b50\u4e24\u4e2a\u4eba\u76f8\u90bb\u7684\u65f6\u5019\u6309\u4f4d\u4e0e\u7b49\u4e8e $1$ \u7b49\u4ef7\u4e8e\u7b2c\u4e00\u6392\u7684\u4eba\u8d62\u4e86\u3002\n\n\u5176\u5b9e\u73b0\u5728\u5c31\u9000\u5316\u6210 CF472G \u4e86\u3002\u90a3\u9053\u9898\u76ee\u6b63\u89e3\u662f\u5206\u5757 + FFT \u4f46\u662f\u88ab\u66b4\u529b\u8fde\u7eed\u7684\u66b4\u8279\u4e86\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u4e5f\u7528\u66b4\u529b\u3002\n\n\u6211\u5f53\u65f6\u505a CF472G \u7684\u65f6\u5019\u5199\u7684\u65b9\u6cd5\u867d\u7136\u53ef\u4ee5\u8fc7 ($O(nm/\\omega),\\omega=64$\uff09\uff0c\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u9762\u8fdc\u8fdc\u4e0d\u53ef\u8fc7\uff0c$3n$ \u6700\u5927\u662f $9\\cdot10^5$\u3002\u663e\u7136\u9700\u8981\u5faa\u73af\u5c55\u5f00\uff0c\u4f46\u662f\u600e\u4e48\u6765\u6613\u4e8e\u5faa\u73af\u5c55\u5f00\u770b\u4e0d\u51fa\u6765\u3002\n\n\u8003\u8651\u5bf9\u4e24\u4e2a\u6bd4\u7279\u5e8f\u5217 $a,b$ \u90fd\u5f00 $\\omega$ \u4e2a $3n/\\omega$ \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u7b2c $p$ \u4e2a\u6570\u7ec4\u8868\u793a $(a/b)[p:3n]$ \u6309 $\\omega$ \u5206\u5757\u540e\u7684\u7ed3\u679c\uff0c\u8fd9\u6837\u9700\u8981\u8fde\u7eed\u4f7f\u7528\u7684\u6570\u5b57\u5728\u5185\u5b58\u91cc\u63a5\u8fd1\uff0c\u53ef\u4ee5\u5faa\u73af\u5c55\u5f00\u4e86\u3002\n\n```cpp\n\tu64 d1[64][14100], d2[64][14100];\n\tinline void make(u64 ar[64][14100], int loc) { \n\t\tint th = std::min(63, loc);\n\t\tfor(int i=0; i<=th; i++) ar[i][(loc-i) >> 6] |= (1ull << ((loc-i) & 63)); \n\t}\n\tvoid solve(int n, int q, char *s1, char *s2, int *q_x, int *q_y, int *q_len, u32 *anss) {\n\t\tfor(int i=0; i<n; i++) make(d1, 3*i+s1[i]-'0');\n\t\tfor(int i=0; i<n; i++) make(d2, 3*i+(s2[i]-'0'+2)%3);\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tu32 ans = 0;\n\t\t\tint x = q_x[i], y = q_y[i], l = q_len[i];\n\t\t\tx *= 3; y *= 3; l *= 3;\n\t\t\tint blc = l >> 6, c;\n\t\t\tu64 *td1 = d1[x & 63] + (x >> 6);\n\t\t\tu64 *td2 = d2[y & 63] + (y >> 6);\n\t\t\tfor(c=0; c+8<blc; c+=8, td1 += 8, td2 += 8) {\n\t\t\t\tans += __builtin_popcountll(td1[0] & td2[0]);\n\t\t\t\tans += __builtin_popcountll(td1[1] & td2[1]);\n\t\t\t\tans += __builtin_popcountll(td1[2] & td2[2]);\n\t\t\t\tans += __builtin_popcountll(td1[3] & td2[3]);\n\t\t\t\tans += __builtin_popcountll(td1[4] & td2[4]);\n\t\t\t\tans += __builtin_popcountll(td1[5] & td2[5]);\n\t\t\t\tans += __builtin_popcountll(td1[6] & td2[6]);\n\t\t\t\tans += __builtin_popcountll(td1[7] & td2[7]);\n\t\t\t}\n\t\t\tfor(; c<blc; c++, td1++, td2++)\n\t\t\t\tans += __builtin_popcountll(td1[0] & td2[0]);\n\t\t\t\n\t\t\tanss[i] = ans + __builtin_popcountll((td1[0] & td2[0]) & (((1ull << (l & 63)) - 1)));\n\t\t}\n\t}\n```\n\n# S3\n\n~~\u6700\u6bd2\u7624~~\n\n\u9996\u5148\uff0c\u8003\u8651\u6734\u7d20 $dp$\uff1a\n\n 0. \u521d\u59cb $dp[0]=1$\uff1b\n 1. \u9047\u5230 $($ \u505a $dp'[i] = dp[i-1]$\uff1b\n 2. \u9047\u5230 $)$ \u505a $dp'[i] = dp[i+1]$\uff1b\n 3. \u9047\u5230 $?$ \u505a $dp'[i] = dp[i-1]+dp[i+1]$\u3002\n\n\u4f46\u662f\u76f4\u63a5\u505a $T$ \u98de\uff1b\u8003\u8651\u4f18\u5316\u3002  \n1 \u548c 2 \u53ef\u4ee5\u7528\u4e00\u4e2a\u6eda\u52a8\u6570\u7ec4\u5904\u7406\uff1a\u5148\u5f00\u4e00\u4e2a $3n$ \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u6307\u9488\u653e\u5728\u5f00\u5934\u540e\u9762 $n$ \u4f4d\uff1b\u9047\u5230 1 \u5f80\u201d\u5de6\u201c\u6eda\u52a8\u4e00\u5355\u4f4d\uff0c\u9047\u5230 2 \u5f80\u201d\u53f3\u201c\u6eda\u52a8\u4e00\u5355\u4f4d\u3002\n\u5bf9\u4e8e 3\uff0c\u6765\u907f\u514d\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u53ef\u4ee5\u5148\u5f80\u201d\u5de6\u201d\u6eda\u52a8\u4e00\u5355\u4f4d\u7136\u540e\u505a $dp[i]+=dp[i+2]$\u3002\n\n\u8fd8 T  \n\u5bf9 3 \u52a0\u5faa\u73af\u5c55\u5f00\u3002  \n\u8fd8 T\uff01\uff01\uff01  \n\u6ce8\u610f\u5904\u7406\u7b2c $i$ \u4e2a\u5b57\u7684\u65f6\u5019\u53ea\u53ef\u80fd\u6709 $j\\le\\min(i,n-i)+1$ \u7684 $j$ \u53ef\u80fd\u5bf9\u7b54\u6848\u8d21\u732e\uff0c\u6240\u4ee5\u53ea\u5904\u7406\u8fd9\u4e9b\u3002  \n\u8fd8 T\uff01\uff01\uff01\uff01\uff01\uff01  \n\u6ce8\u610f\u5904\u7406\u7b2c $i$ \u4e2a\u5b57\u7684\u65f6\u5019\u53ea\u6709 $j\\equiv i\\pmod 2$ \u624d\u4e0d\u662f 0\u3002  \n~~\u7ec8\u4e8e\u597d\u4e86~~\n\n\u4f46\u662f\u5f00\u5fc3\u7684\u592a\u65e9\uff0c\u5728 LOJ \u8fc7\u4e86\uff0c\u5728\u6d1b\u8c37\u4e0a\u63d0\u4ea4\u4e86\u4e94\u6b21\u624d\u8fc7\u4e86 S1T3 \u7684\u6bd2\u7624\uff08\n\n```cpp\n\tu32 solve(int n, char *s) {\n\t\tu32* dp = new u32[3*n + 10] + n;\n\t\tdp[0] = 1;\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tif(s[i] == '(') *--dp = 0;\n\t\t\telse if(s[i] == ')') *dp++ = 0;\n\t\t\telse {\n\t\t\t\tint k, th = std::min(i, n-i) + 2; *--dp = 0;\n\t\t\t\tfor(k=1-(i&1); k<=th; k+=16) {\n\t\t\t\t\tdp[k+0] += dp[k+2]; dp[k+2] += dp[k+4];\n\t\t\t\t\tdp[k+4] += dp[k+6]; dp[k+6] += dp[k+8];\n\t\t\t\t\tdp[k+8] += dp[k+10]; dp[k+10] += dp[k+12];\n\t\t\t\t\tdp[k+12] += dp[k+14]; dp[k+14] += dp[k+16];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0];\n\t}\n```\n",
        "postTime": 1596271249,
        "uid": 220037,
        "name": "w33z8kqrqk8zzzx33",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4604 \u3010[WC2017]\u6311\u6218\u3011"
    },
    {
        "content": "# \u524d\u7f6e\u77e5\u8bc6\n\n## \u4f4d\u8fd0\u7b97\n\n\u5bf9\u4e8e $\\bmod (2^n)$ \u7684\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u7ed3\u679c\u4e4b\u540e `& ((1 << n) - 1)`\uff0c\u4e0d\u9700\u8981\u76f4\u63a5\u6a21\uff08\u56e0\u4e3a\u76f4\u63a5\u6a21\u5e38\u6570\u4f1a\u5f88\u5927\uff09\n\nUpdate\uff1a\u5b9e\u9645\u4e0a\u4e0d\u4f1a\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u6a21 2 \u7684\u5e42\u8f6c\u5316\u4e3a\u6309\u4f4d\u4e0e\uff1b[Godbolt](https://godbolt.org/z/j5s8P91h8) \u544a\u8bc9\u6211\u4eec\u5b83\u4eec\u7f16\u8bd1\u51fa\u7684\u6c47\u7f16\u662f\u4e00\u6837\u7684\n\n## \u5faa\u73af\u5c55\u5f00\n\n\u6bd4\u5982\u8bf4\u6709\u4e00\u4e2a\u5faa\u73af\u957f\u8fd9\u6837\uff1a\n```cpp\nint ans = 0;\nfor (int i = 0; i < n; i++)\n    ans += a[i];\n```\n\n\u8fd9\u6837\u5199\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8bc4\u6d4b\u673a\u5927\u90e8\u5206\u65f6\u5019\u90fd\u6709\u591a\u4e2a\u6838\u5fc3 (aka CPU)\uff0c\u8fd9\u4e00\u4e2a\u5faa\u73af\u53ea\u80fd\u7ed9\u4e00\u4e2a CPU \u8dd1\uff0c\u5176\u5b83 CPU \u90fd\u95f2\u7740\uff0c\u663e\u7136\u6ca1\u6709\u5bf9\u6700\u5927\u7a0b\u5ea6\u5730\u5229\u7528\u5176\u5b83\u6838\u5fc3\u3002\n\n\u6807\u51c6\u7684\u505a\u6cd5\u662f **\u5faa\u73af\u5c55\u5f00**:\n\n```cpp\nint ans;\nint ans1 = 0, ans2 = 0, ans3 = 0, ans4 = 0, ans5 = 0, ans6 = 0, ans7 = 0, ans8 = 0;\nfor (int i = 0; i + 8 <= n; i++)\n{\n    ans1 += a[i + 0];\n    ans2 += a[i + 1];\n    ans3 += a[i + 2];\n    ans4 += a[i + 3];\n    ans5 += a[i + 4];\n    ans6 += a[i + 5];\n    ans7 += a[i + 6];\n    ans8 += a[i + 7];\n}\nswitch (n & 7)\n{\n    case 7: ans += a[n - 7];\n    case 6: ans += a[n - 6];\n    case 5: ans += a[n - 5];\n    case 4: ans += a[n - 4];\n    case 3: ans += a[n - 3];\n    case 2: ans += a[n - 2];\n    case 1: ans += a[n - 1];\n}\nans += ans1 + ans2 + ans3 + ans4 + ans5 + ans6 + ans7 + ans8;\n```\n\u8fd9\u6837\uff0c\u5faa\u73af\u4e2d 8 \u4e2a\u8bed\u53e5\u53ef\u4ee5\u5206\u522b\u4ea4\u7ed9 8 \u4e2a CPU \u5904\u7406\uff0c\u8fd9\u6837\u5e38\u6570\u80fd _\u5927\u6982_ \u53d8\u6210\u539f\u6765\u7684 $\\frac{1}{8}$.\n\n\u4f46\u662f\uff0c\u524d\u9762\u7684\u5faa\u73af\u53ea\u80fd\u5904\u7406 $8k$ \u4e2a\u6570\uff0c\u5269\u4e0b\u7684\u6570\u5c31\u7531\u540e\u9762\u7684 `switch` \u5904\u7406\u3002`switch` \u4f1a\u8df3\u8f6c\u5230\u7b2c `n & 7`\uff08\u5373 $n\\bmod 8$\uff09\u4e2a\u5206\u652f\uff0c\u6765\u5904\u7406\u5269\u4e0b\u7684\u6570\u3002\n\n\uff08\u672c\u4eba\u8bed\u6587\u4e0d\u597d\uff0c\u6ca1\u542c\u61c2\u53ef\u4ee5\u81ea\u884c\u641c\u7d22 \"C++ switch\" \u548c \"Duff's Device\"\uff09\n\n# Subtask 1\n$O(n\\log n)$ \u7684\u6392\u5e8f\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u6211\u4eec\u8003\u8651 $O(n)$ \u7684\u6392\u5e8f\uff1a\u57fa\u6570\u6392\u5e8f\uff0c\u7b80\u79f0\u57fa\u6392\u3002\n\n\u57fa\u6392\u7684\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\n\n1. \u9009\u4e00\u4e2a\u57fa\u6570\uff0c\u6bd4\u5982 $2^{16}$. $2^{32}$ \u8303\u56f4\u5185\u7684\u6570\u53ef\u4ee5\u5206\u6210\u4f4e $16$ \u4f4d\u548c\u9ad8 $16$ \u4f4d\u3002\n2. \u5bf9\u6240\u6709\u6570\u6309\u4f4e $16$ \u4f4d\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n3. \u5bf9\u6240\u6709\u6570\u6309\u9ad8 $16$ \u4f4d\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n\n\u8fd9\u91cc\u6b65\u9aa4 2 \u548c 3 \u8981\u6c42\u4f7f\u7528**\u7a33\u5b9a**\u7684\u6392\u5e8f\u7b97\u6cd5\uff08\u5426\u5219\u6700\u540e\u6392\u5e8f\u7684\u7ed3\u679c\u5c31\u4e0d\u5bf9\uff09\u3002\n\n## \u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\n\u6211\u4eec\u5148\u7edf\u8ba1\u6709\u7ed9\u5b9a\u4f4e $16$ \u4f4d\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8bb0\u4e3a $p_i$\uff0c\u7136\u540e\u6211\u4eec\u5bf9 $p$ \u6c42\u524d\u7f00\u548c\uff0c\u8bb0\u4e3a $p'$\u3002\n\n\u90a3\u4e48\uff0c\u6240\u6709\u4f4e $16$ \u4f4d\u4e3a $i$ \u7684\u6570\u5728\u6392\u5e8f\u540e\u5e94\u8be5\u5728 $[p'_i,p'_{i+1})$ \u7684\u4f4d\u7f6e\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6392\u5e8f\u7a33\u5b9a\uff0c\u6211\u4eec\u4ece\u540e\u5f80\u524d\u586b\u3002\n\n\u8fd8\u6709\uff0c\u5b9e\u9645\u4e0a $2^{16}$ \u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u56e0\u4e3a\uff1a\n\n### CPU \u7f13\u5b58\n\u4e00\u822c\u60c5\u51b5\u4e0b\u5bf9\u5185\u5b58\u8fdb\u884c\u8bbf\u95ee\u662f\u8f83\u6162\u7684\uff0c\u6240\u4ee5 CPU \u4f1a\u5185\u7f6e\u4e00\u4e2a**\u7f13\u5b58**\uff0c\u8bbf\u95ee\u8fc7\u4e00\u4e2a\u5730\u5740\u4e4b\u540e\u4f1a\u5c06\u5468\u56f4\u7684\u5730\u5740\u653e\u5165\u7f13\u5b58\u4e2d\uff0c\u518d\u5bf9\u8fd9\u4e2a\u5730\u5740\u5468\u56f4\u7684\u5730\u5740\u8bbf\u95ee\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7f13\u5b58\u3002\n\n\u4f46\u662f\uff0c\u5982\u679c\u8bbf\u95ee\u7684\u5730\u5740\u5728\u7f13\u5b58\u4e4b\u5916\uff08\u79f0\u4e3a Cache Miss\uff09\u90a3\u4e48\u5c31\u4f1a\u5f88\u6162\uff0c\u8fd9\u4e5f\u662f\u5927\u5bb6\u8bf4\u7684\u201d\u8bbf\u95ee\u8fde\u7eed\u5185\u5b58\u8f83\u5feb\u201c\u7684\u539f\u56e0\u3002\n\n\u6700\u5feb\u7684\u4e00\u7ea7\u7f13\u5b58\uff08\u79f0\u4e3a L1 Cache\uff09\u7684\u5927\u5c0f\u4e00\u822c\u662f $2^8$\uff0c\u6240\u4ee5\u9009\u53d6\u57fa\u6570\u4e3a $2^8$ \u53ef\u4ee5\u8ba9 $p$ \u5361\u8fdb L1 Cache\uff0c\u4ece\u800c\u4f1a\u53d8\u5feb\u3002\n\n## Code\n```cpp\nnamespace Sorting\n{\n    void init_data(u32 *a, int n, u32 seed)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            seed = next_integer(seed);\n            a[i] = seed;\n        }\n    }\n\n    void sort(u32 *x, u32 *y, u32 *p, int n)\n    {\n#define once(a, b, m) \\\n        memset(p, 0, 256 * (sizeof(u32))); \\\n        for (int i = 0; i + 7 < n; i += 8) \\\n        { \\\n            p[a[i] m]++; \\\n            p[a[i + 1] m]++; \\\n            p[a[i + 2] m]++; \\\n            p[a[i + 3] m]++; \\\n            p[a[i + 4] m]++; \\\n            p[a[i + 5] m]++; \\\n            p[a[i + 6] m]++; \\\n            p[a[i + 7] m]++; \\\n        } \\\n        for (int i = 1; i < 256; i++) \\\n            p[i] += p[i - 1]; \\\n        for (int i = n; i; i -= 8) \\\n        { \\\n            b[--p[a[i - 1] m]] = a[i - 1]; \\\n            b[--p[a[i - 2] m]] = a[i - 2]; \\\n            b[--p[a[i - 3] m]] = a[i - 3]; \\\n            b[--p[a[i - 4] m]] = a[i - 4]; \\\n            b[--p[a[i - 5] m]] = a[i - 5]; \\\n            b[--p[a[i - 6] m]] = a[i - 6]; \\\n            b[--p[a[i - 7] m]] = a[i - 7]; \\\n            b[--p[a[i - 8] m]] = a[i - 8]; \\\n        }\n        once(x, y, & 255);\n        once(y, x, >> 8 & 255);\n        once(x, y, >> 16 & 255);\n        once(y, x, >> 24 & 255);\n    }\n\n    void main()\n    {\n        int n;\n        u32 seed;\n        scanf(\"%d%u\", &n, &seed);\n        assert((n & 7) == 0); // 8 | n\n\n        u32 *a = new u32[n], *b = new u32[n], *p = new u32[256];\n        init_data(a, n, seed);\n\n        sort(a, b, p, n);\n\n        output_arr(a, n * sizeof(u32));\n\n        delete[] a; delete[] b; delete[] p;\n    }\n}\n```\n\n# Subtask 2\n\u6211\u4eec\u5c06\u6bcf\u4e00\u6392\u7f16\u7801\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a $3n$ \u7684\u6570\u7ec4 $f$\u3002\u5177\u4f53\u5730\uff1a\n\n- \u5bf9\u4e8e\u7b2c\u4e00\u6392\uff0c$f[3i+j]=[a_{1i}=j]$\n- \u5bf9\u4e8e\u7b2c\u4e8c\u6392\uff0c$f[3i+j]=[a_{2i}\\equiv (j-1)\\pmod{3}]$\n\n\u5176\u4e2d $0\\le j<3$\uff0c\u4e2d\u62ec\u53f7\u90fd\u662f [Iverson bracket](https://cn.bing.com/search?q=iverson+bracket)\u3002\n\n\u8fd9\u6837\u5b9a\u4e49\u5c31\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u7b2c\u4e00\u6392\u7684 $x$ \u80fd\u6253\u8d25\u7b2c\u4e8c\u6392\u7684 $y$ \u5f53\u4e14\u4ec5\u5f53 $f_1[3x\\cdots (3x+2)]=f_{2}[3y\\cdots (3y+2)]$\u3002\n\n\u81f3\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u5bf9\u4e8e\u4e24\u4e2a `bool` \u6570\u7ec4 $f_1,f_2$\uff0c\u8be2\u95ee $f_1[x\\cdots x+l]$ \u548c $f_2[y\\cdots y+l]$ \u6709\u591a\u5c11\u4e2a\u4f4d\u5339\u914d\u3002\n\n## \u5206\u5757\n\u6bcf $64$ \u4e2a\u8fde\u7eed\u7684 bit \u53ef\u4ee5\u538b\u7f29\u6210\u4e00\u4e2a `u64`\u3002\u4e3a\u4e86\u4ee3\u7801\u65b9\u4fbf\u4e00\u70b9\u6211\u4eec\u4ee4 `f[0]` \u4ece 0 \u5f00\u59cb\u5206\u5757\uff0c\u4ee4 `f[1]` \u4ece 1 \u5f00\u59cb\u5206\u5757\uff0c\u4ee5\u6b64\u7c7b\u63a8\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hh2n6wmc.png)\n\n\u5361\u7684\u4e0d\u662f\u5f88\u7d27\uff0c\u6ca1\u6709\u5faa\u73af\u5c55\u5f00\u4e5f\u8fc7\u53bb\u4e86\n\n## Code\n```cpp\nnamespace Game\n{\n    const int N = 3e5 + 5, BL = 14063;\n    u64 f1[64][BL], f2[64][BL];\n\n    inline void set(u64 f[][BL], int x)\n    {\n        if (x < 64)\n            for (int i = 0; i <= x; i++) *f[i] |= u64(1) << (x - i);\n        else\n            for (int i = 0; i < 64; i++)\n            {\n                int j = x - i;\n                f[i][j >> 6] |= u64(1) << (j & 63);\n            }\n    }\n\n    void solve(int n, int q, char *s1, char *s2, int *q_x, int *q_y, int *q_len, u32 *anss)\n    {\n        for (int i = 0; i < n; i++)\n            switch (s1[i])\n            {\n                case '0': set(f1, i * 3    ); break;\n                case '1': set(f1, i * 3 + 1); break;\n                case '2': set(f1, i * 3 + 2); break;\n            }\n        for (int i = 0; i < n; i++)\n            switch (s2[i])\n            {\n                case '0': set(f2, i * 3 + 2); break;\n                case '1': set(f2, i * 3    ); break;\n                case '2': set(f2, i * 3 + 1); break;\n            }\n        for (int i = 0; i < q; i++)\n        {\n            int x = q_x[i] * 3, y = q_y[i] * 3, len = q_len[i] * 3;\n            u64 *p = f1[x & 63] + (x >> 6), *q = f2[y & 63] + (y >> 6);\n            for (int j = 0; j < (len >> 6); j++)\n                anss[i] += __builtin_popcountll((*p) & (*q)), p++, q++;\n            anss[i] += __builtin_popcountll((*p) & (*q) & ((u64(1) << (len & 63)) - 1));\n        }\n    }\n\n    void main()\n    {\n        int n, q;\n        scanf(\"%d%d\", &n, &q);\n    \n        char *s1 = new char[n + 1];\n        char *s2 = new char[n + 1];\n        scanf(\"%s%s\", s1, s2);\n\n        u32 *anss = new u32[q];\n        int *q_x = new int[q];\n        int *q_y = new int[q];\n        int *q_len = new int[q];\n\n        for (int i = 0; i < q; i++)\n        {\n            scanf(\"%d%d%d\", q_x + i, q_y + i, q_len + i);\n        }\n\n        solve(n, q, s1, s2, q_x, q_y, q_len, anss);\n\n        output_arr(anss, q * sizeof(u32));\n    }\n}\n```\n\n# Subtask 3\n\u8003\u8651\u6734\u7d20 dp\uff0c\u5176\u4e2d $dp_i$ \u8868\u793a\u524d\u7f00\u548c\u4e3a $i$ \u7684\u65b9\u6cd5\u6570\n\n- \u9047\u5230 `(`\uff1a$dp_i\\gets dp_{i-1}$\n- \u9047\u5230 `)`\uff1a$dp_i\\gets dp_{i+1}$\n- \u9047\u5230 `?`\uff1a$dp_i\\gets dp_{i-1}+dp_{i+1}$\n\n\u4f46\u662f dp \u6570\u7ec4\u6574\u4e2a\u79fb\u52a8\u592a\u6162\uff0c\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a `dp` \u6307\u9488\u5728\u4e00\u4e2a\u201c\u5927\u6570\u7ec4\u201d\u4e0a\u626b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a6cro5mb.png)\n\n\u9047\u5230 `?` \u6211\u4eec\u53ef\u4ee5\u5148 $dp_i\\gets dp_{i-1}$ \u7136\u540e $dp_i\\gets dp_i+dp_{i+2}$\n\n\u6709\u4e24\u4e2a\u5c0f\u4f18\u5316\uff1a\n\n1. \u5904\u7406\u5230\u7b2c $i$ \u4e2a\u5b57\u7b26\u65f6\u53ea\u6709 $j\\equiv i\\pmod{2}$ \u7684\u4e0b\u6807\u624d\u4f1a\u975e 0\n2. \u53ea\u6709 $j\\le 1+\\min(i,n-i)$ \u7684\u4e0b\u6807\u624d\u4f1a\u6709\u8d21\u732e\n\n\u5361\u7684\u540c\u6837\u4e0d\u662f\u5f88\u7d27\uff0c\u6ca1\u6709\u5faa\u73af\u5c55\u5f00\u4e5f\u8fc7\u53bb\u4e86\n\n```cpp\nnamespace Parentheses\n{\n    const int N = 266666;\n    u32 dp[N * 3 + 10] = {0};\n\n    u32 solve(int n, char *s)\n    {\n        u32 *rsg23 = dp + n;\n        *rsg23 = 1;\n        for (int i = 0; i < n; i++)\n        {\n            char c = s[i];\n            switch (c)\n            {\n                case '(': rsg23--, *rsg23 = 0; break;\n                case ')': rsg23++; break;\n                case '?':\n                    int bound = std::min(i, n - i) + 2;\n                    // due to the translation of indices we add 1\n                    rsg23--, *rsg23 = 0;\n                    for (int j = 1 ^ (i & 1); j <= bound; j += 2)\n                    {\n                        rsg23[j] += rsg23[j + 2];\n                    }\n            }\n        }\n        return *rsg23;\n    }\n\n    void main()\n    {\n        int n;\n        scanf(\"%d\", &n);\n\n        char *s = new char[n + 1];\n        scanf(\"%s\", s);\n\n        u32 ans;\n        ans = solve(n, s);\n\n        printf(\"%u\\n\", ans);\n    }\n}\n```\n\n[\u6700\u7ec8\u4ee3\u7801\u7684 record](https://www.luogu.com.cn/record/68717694)",
        "postTime": 1644241949,
        "uid": 384214,
        "name": "esquigybcu",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P4604"
    }
]