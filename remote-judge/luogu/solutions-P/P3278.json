[
    {
        "content": "\u7b2c\u4e00\u6b21\u6253$FHQ-treap$\uff0c[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/y2823774827y/p/10373978.html)\uff0c\u4e0d\u61c2$FHQ-treap$\u7684\u770b[\u8fd9\u91cc](https://www.cnblogs.com/y2823774827y/p/10321171.html)\n\n$(1)(2)$\u7ebf\u6bb5\u6811\u88f8\u9898\uff0c$(4)$\u4e0d\u8d85\u8fc7\u5341\u6b21\u66b4\u529b\u5373\u53ef\n\n\u4e3b\u8981\u662f\u5904\u7406$(3)$\uff1a$k_{l-1}x^{l-1}+k_lx^l+k_{l+1}x^{l+1}+...+k_rx^r+k_{r+1}x^{r+1}\\longrightarrow$\n$k_{l-1}x^{l-1}+0+k_lx^{l+1}+k_{l+1}x^{l+2}+...(k_r+k_{r+1})x^{r+1}$\n\n\u628a$x$\u7684\u5e42\u6b21\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\u7684\u987a\u5e8f\uff0c\u5176\u5b9e\u5c31\u662f\u628a$0$\u63d2\u5165\u5230$l-1$~$l$\uff0c\u628a$k_r$\u548c$k_{r+1}$\u5e76\u8d77\u6765\n\n\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u4e58\uff0c\u63d2\u5165\uff1a\u5e73\u8861\u6811\u88f8\u9898\n\n**\u7ec6\u8282**\uff1a\u9884\u5904\u7406\u63d2\u5165\u8282\u70b9\u524d\u9762\u8981\u63d2\u5165\u4e00\u4e2a\u865a\u8282\u70b9\u5904\u7406$(1)(2)l=0$\u7684\u7279\u6b8a\u60c5\u51b5\uff1b\u5176\u5b9e\u540e\u9762\u4e5f\u8981\u63d2\u5165\u4e00\u4e9b\u8282\u70b9\u5904\u7406$(3)r=1e5$\u7684\u53f3\u79fb\u60c5\u51b5\uff0c\u6570\u636e\u8fc7\u6c34\u4e0d\u63d2\u4e5f\u80fd\u8fc7\n\n\u8d85\u77ed\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ninline int Read(){\n    int x(0),f(1);char c=getchar();\n    while(c<'0' || c>'9'){ if(c=='-')f=-1; c=getchar(); }\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+c-'0', c=getchar();\n    return x*f;\n}\nconst LL p=20130426;\nconst int maxn=1e6,N=1e5+1;\nLL ret,ans;\nint n,root,q,cnt,f;\ninline int Rand(){ return rand()%100000; }\nstruct Treap{\n    LL key[maxn],lazy1[maxn],lazy2[maxn];\n\tint heap[maxn],size[maxn],son[maxn][2];\n    inline void Pushdown(LL x){\n        LL mu(lazy2[x]),ad(lazy1[x]);\n\t\tint lc(son[x][0]),rc(son[x][1]);\n        lazy1[x]=0,lazy2[x]=1;\n        if(mu!=1){\n            key[lc]=key[lc]*mu%p, lazy1[lc]=lazy1[lc]*mu%p, lazy2[lc]=lazy2[lc]*mu%p;\n            key[rc]=key[rc]*mu%p, lazy1[rc]=lazy1[rc]*mu%p, lazy2[rc]=lazy2[rc]*mu%p;\n        }\n        if(ad){\n            key[lc]=(key[lc]+ad)%p, lazy1[lc]=(lazy1[lc]+ad)%p;\n            key[rc]=(key[rc]+ad)%p, lazy1[rc]=(lazy1[rc]+ad)%p;\n        }\n    }\n    inline void Update(int x){\n        if(!x) return;\n        size[x]=size[son[x][0]]+size[son[x][1]]+1;\n    }\n    int Merge(int x,int y){\n        if(!x || !y) return x|y;\n        Pushdown(x),Pushdown(y);\n        if(heap[x] < heap[y]){\n            son[x][1]=Merge(son[x][1],y); Update(x); return x;\n        }else{\n            son[y][0]=Merge(x,son[y][0]); Update(y); return y;\n        }\n    }\n    void Split_r(int now,int k,int &x,int &y){\n        if(!now) return (void)(x=y=0);\n        Pushdown(now);\n        if(size[son[now][0]]<k)\n            x=now, Split_r(son[now][1], k-size[son[now][0]]-1, son[x][1], y), Update(x), Update(y);\n        else\n            y=now, Split_r(son[now][0], k, x, son[y][0]), Update(x), Update(y);\n    }\n    void Query(int now,LL v){\n        if(!now) return;\n        Pushdown(now);\n        Query(son[now][0],v);\n        ans=(ans+ret*key[now]%p)%p;\n        if(f) ret=ret*v%p; else f=true;\n        Query(son[now][1],v);\n    }\n}T;\nint main(){\n    srand(time(NULL));\n    T.heap[root=++(cnt=N)]=Rand(), T.size[cnt]=T.lazy2[cnt]=1;\n    for(LL i=1;i<cnt;++i)\n        T.heap[i]=Rand(), T.size[i]=T.lazy2[i]=1,\n        root=T.Merge(root,i);\n    q=Read();\n    int a,b,c,d,l,r; LL v;\n    char s[10];\n    while(q--){\n        scanf(\" %s\",s);\n        if(s[0]=='a'){\n            l=Read()+1, r=Read()+1, v=Read();\n            T.Split_r(root,l,a,b), T.Split_r(b,(r-(l-1)),b,c);\n            T.key[b]=(T.key[b]+v)%p, T.lazy1[b]=(T.lazy1[b]+v)%p;\n            root=T.Merge(a, T.Merge(b, c));\n        }else if(s[0]=='q'){\n            v=Read();\n            ret=1,ans=f=0;\n            T.Query(root,v);\n            printf(\"%lld\\n\",ans);\n        }else{\n            LL len(strlen(s));\n            if(len==3){\n                l=Read()+1, r=Read()+1, v=Read();\n                T.Split_r(root,l,a,b), T.Split_r(b,(r-(l-1)),b,c);\n                T.key[b]=(T.key[b]*v)%p, T.lazy1[b]=(T.lazy1[b]*v)%p, T.lazy2[b]=(T.lazy2[b]*v)%p;\n                root=T.Merge(a, T.Merge(b, c));\n            }else{\n                l=Read()+1, r=Read()+1;\n                T.Split_r(root,r,a,b), T.Split_r(b,1,b,c), T.Split_r(c,1,c,d);\n                T.key[c]=(T.key[c]+T.key[b])%p;\n                root=T.Merge(a, T.Merge(c, d));\n                T.heap[++cnt]=Rand(), T.size[cnt]=T.lazy2[cnt]=1;\n                T.Split_r(root,l,a,b);\n                root=T.Merge(a, T.Merge(cnt, b));\n            }\n        }\n    }return 0;\n}\n```",
        "postTime": 1550119853,
        "uid": 88804,
        "name": "y2823774827y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "\u641c\u7d22`splay`\u51fa\u6765\u4e86\u8fd9\u4e2a\u9898\u2026\u2026\n\n\u770b\u4e86\u4e24\u773c\uff0c\u53ea\u6709\u533a\u95f4\u52a0\u503c\u3001\u533a\u95f4\u4e58\u503c\u3001\u533a\u95f4\u53f3\u79fb\u4e00\u4f4d\u3001\u66b4\u529b\u67e5\u8be2\uff0c\u52a0\u4e0a\u6700\u8fd1\u521a\u521a\u5199\u4e86\u5927\u5206\u5757\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u8003\u8651`mulx`\u64cd\u4f5c\u7684\u672c\u8d28\uff1a\n\n- $a_{R + 1}$ \u589e\u52a0 $a_R$ \u3002\n- $a_i$ \u53d8\u4e3a $a_{i - 1}$ ( $L < i \\le R$ ) \u3002\n- $a_L$ \u53d8\u4e3a $0$ \u3002\n\n\u76f8\u5f53\u4e8e\u533a\u95f4 $[L,R-1]$ \u53f3\u79fb\u4e00\u4f4d\u518d\u8fdb\u884c\u4e24\u4e2a\u5355\u70b9\u4fee\u6539\u3002\n\n\u533a\u95f4\u53f3\u79fb\u4e00\u4f4d\u600e\u4e48\u505a\uff1f\u5982\u679c\u6b63\u5e38\u7684\u5206\u5757\uff0c\u6211\u4eec\u4f1a\u5bf9\u6bcf\u4e2a\u5728\u533a\u95f4\u4e2d\u7684\u5757\uff0c\u5f39\u51fa\u4e00\u4e2a\u6570\uff0c\u52a0\u5165\u4e00\u4e2a\uff08\u540e\u9762\u7684\uff09\u6570\u3002\u8fd9\u6837\u7684\u597d\u5904\u662f\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u5728\u4fee\u6539\u4e2d\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u4f46\u60f3\u8981\u8fd9\u6837\u505a\uff0c\u8981\u5c06\u5757\u4e2d\u7684\u6570\u5f39\u51fa\u5e76\u63d2\u5165\u5230\u4e0a\u4e00\u4e2a\u5757\u540e\u90e8\uff0c\u9700\u8981\u80fd\u591f\u5feb\u901f\u62b5\u6d88\u5757\u4e2d`tag`\u7684\u5f71\u54cd\u3002\n\n\u8003\u8651\u672c\u9898\u4e2d\u662f\u5426\u80fd\u591f\u5feb\u901f\u62b5\u6d88\u5757\u4e2d`tag`\u5f71\u54cd\u3002\n\n\u56e0\u4e3a\u6709\u524d\u4e24\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u52a0\u6cd5`tag`\u548c\u4e58\u6cd5`tag`\u3002\u8fd9\u6837\u4e00\u4e2a\u5757\u4e2d\u7684\u6570 $w$ \u7684\u5b9e\u9645\u503c\u4e3a $w\\times mul + add$ \u3002\u8003\u8651\u5728\u4e0d\u6539\u53d8`tag`\u7684\u60c5\u51b5\u4e0b\u63d2\u5165\u6570 $x$ \uff08\u5b9e\u9645\u503c\uff09\uff0c\u8bbe\u63d2\u5165\u540e\u5728\u5757\u4e2d\u8fd9\u4e2a\u6570\u7684\u503c\u4e3a $y$ \uff0c\u5219\u6709 $y\\times mul + add = x$ \u3002\u7531\u4e8e\u8fd9\u4e2a\u65b9\u7a0b\u662f\u5728\u6a21\u4e00\u4e2a\u5408\u6570 $20130426$ \u60c5\u51b5\u4e0b\u7684\uff0c\u53ef\u80fd\u65e0\u6574\u6570\u89e3\uff0c\u6545\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u3002\n\n\u90a3\u600e\u4e48\u505a\uff1f\u4e0a\u5757\u72b6\u94fe\u8868\u5427\u3002\n\n### \u5757\u72b6\u94fe\u8868\n\n\u5c06\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u7531\u5b9a\u957f\u8f6c\u4e3a\u4e0d\u5b9a\u957f\u601d\u8003\u3002\u8bbe\u9700\u8981\u53f3\u79fb\u7684\u533a\u95f4\u662f $[l,r]$ \uff0c\u8fd9\u6bb5\u533a\u95f4\u6700\u5de6\u548c\u6700\u53f3\u7684\u6563\u5757\u662f $B_l, B_r$ \u3002\u53f3\u79fb\u4e00\u4f4d\u5373\u4e3a\u5728\u7b2c $l$ \u4e2a\u6570\u524d\u65b9\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5e76\u5728\u7b2c $r$ \u4e2a\u6570\u540e\u65b9\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u518d\u4fee\u6539\u63d2\u5165\u7684\u90a3\u4e2a\u6570\u3002\u5373 $B_l$ \u7684\u957f\u5ea6\u8981\u589e\u52a0 $1$ \uff0c $B_r$ \u7684\u957f\u5ea6\u51cf\u5c11 $1$ \u3002\n\n\u8bbe\u5757\u957f $k$ \uff0c\u5219\u63d2\u5165\u6216\u5220\u9664\u5757\u4e2d\u7684\u4e00\u4e2a\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(k)$ \u7684\u3002\u4ece\u800c\u5355\u6b21`mulx`\u64cd\u4f5c\u590d\u6742\u5ea6\u662f $O(k + \\dfrac{N}{k})$ \u7684\uff08 $N$ \u4e3a\u591a\u9879\u5f0f\u6700\u5927\u6b21\u6570\uff09\u3002\u6b64\u65f6 $k$ \u53d6 $\\sqrt{N}$ \u4e3a\u6700\u4f18\u3002\n\n\u7136\u800c\u63d2\u5165\u6216\u5220\u9664\u4e00\u4e2a\u6570\u4e4b\u540e\u5757\u957f\u5c31\u53d8\u5316\u4e86\uff0c\u82e5\u7ecf\u5386\u5927\u91cf\u64cd\u4f5c\u540e\u5757\u592a\u957f\u6216\u5757\u8fc7\u77ed\uff08\u5757\u6570\u91cf\u592a\u591a\uff09\u90fd\u4f1a\u5bfc\u81f4\u590d\u6742\u5ea6\u9000\u5316\u3002\n\n\u6240\u4ee5\u5148\u5c06 $k$ \u8bbe\u4e3a $\\sqrt{N}$ \uff0c\u82e5\u67d0\u6b21`mulx`\u64cd\u4f5c\u4e4b\u540e\u67d0\u4e2a\u5757\u7684\u957f\u5ea6\u5927\u4e8e $2k$ \uff0c\u5c31\u5c06\u5176\u62c6\u6210\u4e24\u4e2a\u5757\uff1b\u67d0\u4e2a\u5757\u7684\u957f\u5ea6\u5c0f\u4e8e $\\dfrac{k}{2}$ \uff0c\u5c31\u5c06\u5b83\u4e0e\u4e0b\u4e00\u4e2a\u5757\u5408\u5e76\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u4e0d\u4f1a\u9000\u5316\u4e86\u3002\n\n\u5b9e\u73b0\u65f6\uff0c\u7ec6\u8282\u8f83\u591a\u3002\n\n\u867d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt{n})$ \uff0c\u4f46\u662f\u5374\u8fd8\u80fd\u52c9\u5f3a\u8fdb\u7b2c\u4e00\u9875\u2026\u2026\u679c\u7136\u5e73\u8861\u6811\u7684\u5e38\u6570\u8fd8\u662f\u592a\u5927\u4e86\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\nnamespace my_std{\n\tusing namespace std;\n\t#define reg register\n\t#define Rint register int\n\t#define FOR(i,a,b) for(register int i=(a),ed_##i=(b);i<=ed_##i;++i)\n\t#define ROF(i,a,b) for(register int i=(a),ed_##i=(b);i>=ed_##i;--i)\n\t#define FORit(templ,arr,i,a,b) for(register templ *i=(arr)+(a),*ed_##i=(arr)+(b)+1;i!=ed_##i;++i)\n\t#define ROFit(templ,arr,i,a,b) for(register templ *i=(arr)+(a),*ed_##i=(arr)+(b)-1;i!=ed_##i;--i)\n\t#define MEM(x,v) memset(x,v,sizeof(x))\n\t#define Templ(T) template<typename T>\n\tinline int read(){\n\t\tint ans=0,f=1;char c=getchar();\n\t\twhile(!isdigit(c)){ f^=(c=='-'); c=getchar(); }\n\t\tfor(;isdigit(c);c=getchar()) ans=(ans<<1)+(ans<<3)+(c^48); return f?ans:-ans;\n\t}\n\tconst int mod = 20130426, N = 100010, BN = 330, BLO = 325;\n\tinline void inc(int &x, const int &y){ x += y; if(x >= mod) x -= mod; }\n\tinline int ksm(int x, int y){\n\t\tx %= mod;\n\t\tint res=1;\n\t\tfor(; y; y >>= 1, x = 1ll * x * x % mod) if(y & 1) res = 1ll * res * x % mod;\n\t\treturn res;\n\t}\n}\nusing namespace my_std;\n\nint n;\n\nstruct Block;\ninline void del_Block(Block *B);\ninline Block *new_Block();\n\nstruct Block{\n\tBlock *nxt;\n\tint a[BN << 1], add, mul, cnt, beg;\n\tinline void init(){\n\t\tnxt = nullptr;\n\t\tMEM(a, 0);\n\t\tadd = 0, mul = 1, beg = 0, cnt = 0;\n\t\treturn;\t\n\t}\n\tinline void push_down(){\n\t\tif(mul == 1 && add == 0) return;\n\t\tFOR(i, 1, cnt) a[i] = (1ll * a[i] * mul + add) % mod;\n\t\tmul = 1, add = 0;\n\t\treturn;\n\t}\n\tinline void split(){//\u5c06\u8fc7\u5927\u7684\u5757\u62c6\u6210\u4e24\u4e2a\n\t\treg Block *to = nxt;\n\t\tnxt = new_Block();\n\t\tnxt->init();\n\t\tnxt->nxt = to;\n\t\tnxt->beg = beg + BLO;\n\t\tnxt->add = add, nxt->mul = mul;\n\t\tnxt->cnt = cnt - BLO, cnt = BLO;\n\t\tFOR(i, 1, nxt->cnt) nxt->a[i] = a[i + BLO];\n\t\treturn;\n\t}\n\tinline void merge(){//\u5c06\u8fc7\u5c0f\u7684\u5757\u4e0e\u540e\u9762\u5408\u5e76\n\t\treg Block *to = nxt, *toto = nullptr;\n\t\tif(to == nullptr) return;\n\t\ttoto = to->nxt;\n\t\tthis->push_down(), to->push_down();\n\t\tif(cnt + to->cnt >= (BLO << 1)){//\u5982\u679c\u5408\u5e76\u4e4b\u540e\u5927\u5c0f\u53c8\u8fc7\u5927\u4e86\uff0c\u5c31\u4e0d\u5408\u5e76\uff0c\u4ece\u4e0b\u4e00\u4e2a\u5757\u4e2d\u6316\u4e00\u6bb5\u5230\u8fd9\u4e2a\u5757\u4e2d\n\t\t\tFOR(i, 1, BLO - cnt) a[i + cnt] = to->a[i];\n\t\t\tFOR(i, BLO - cnt + 1, to->cnt) to->a[i - BLO + cnt] = to->a[i];\n\t\t\tto->cnt += cnt - BLO, to->beg -= cnt - BLO;\n\t\t\tcnt = BLO;\n\t\t\treturn;\n\t\t}\n\t\tFOR(i, 1, to->cnt) a[i + cnt] = to->a[i];\n\t\tnxt = toto;\n\t\tcnt += to->cnt;\n\t\tto->nxt = nullptr;\n\t\tdel_Block(to);\n\t\treturn;\n\t}\n\tinline void check(){\n\t\tif(cnt > (BLO << 1)) return split();\n\t\tif(cnt <= (BLO >> 1)) return merge();\n\t\treturn;\n\t}\n};\nBlock *St, *del[BN << 1];//\u5408\u5e76\u7684\u65f6\u5019\u9700\u8981\u5783\u573e\u56de\u6536\nint dtop;\n\ninline void del_Block(Block *B){\n\tdel[dtop++] = B;\n\treturn;\n}\ninline Block *new_Block(){\n\treturn dtop ? del[--dtop] : new Block;\n}\n\ninline void Build(){\n\tSt = new_Block();\n\tSt->init();\n\treg Block *now = St;\n\tFOR(i, 1, ceil(N / (double)BLO)){\n\t\tnow->add = 0, now->mul = 1, now->beg = (i - 1) * BLO - 1, now->cnt = BLO;\n\t\tFOR(j, 1, now->cnt) now->a[j] = 0;\n\t\tnow->nxt = (i == ed_i) ? nullptr : new_Block();\n\t\tif(now->nxt != nullptr) now->nxt->init();\n\t\tnow = now->nxt;\n\t}\n\treturn;\n}\n\ninline void update_add(int l, int r, int v){//add\n\treg Block *now = St;\n\t\n\twhile(now->beg + now->cnt < l) now = now->nxt;\n\t\n\tif(now->beg + now->cnt >= r){\n\t\tnow->push_down();\n\t\tFOR(i, l - now->beg, r - now->beg) inc(now->a[i], v);\n\t\treturn;\n\t}\n\t\n\tnow->push_down();\n\tFOR(i, l - now->beg, now->cnt) inc(now->a[i], v);\n\t\n\tnow = now->nxt;\n\twhile(now->beg + now->cnt < r){\n\t\tinc(now->add, v);\n\t\tnow = now->nxt;\n\t}\n\t\n\tnow->push_down();\n\tFOR(i, 1, r - now->beg) inc(now->a[i], v);\n\t\n\treturn;\n}\n\ninline void update_mul(int l, int r, int v){//mul\n\treg Block *now = St;\n\t\n\twhile(now->beg + now->cnt < l) now = now->nxt;\n\t\n\tif(now->beg + now->cnt >= r){\n\t\tnow->push_down();\n\t\tFOR(i, l - now->beg, r - now->beg) now->a[i] = 1ll * now->a[i] * v % mod;\n\t\treturn;\n\t}\n\t\n\tnow->push_down();\n\tFOR(i, l - now->beg, now->cnt) now->a[i] = 1ll * now->a[i] * v % mod;\n\t\n\tnow = now->nxt;\n\twhile(now->beg + now->cnt < r){\n\t\tnow->mul = 1ll * now->mul * v % mod, now->add = 1ll * now->add * v % mod;\n\t\tnow = now->nxt;\n\t}\n\t\n\tnow->push_down();\n\tFOR(i, 1, r - now->beg) now->a[i] = 1ll * now->a[i] * v % mod;\n\t\n\treturn;\n}\n\ninline int query(int v){//\u66b4\u529bquery\n\tRint res = 0, bt = 0, Add, Mul;\n\treg Block *now = St;\n\t\n\twhile(now != nullptr){\n\t\tAdd = now->add, Mul = now->mul;\n\t\tFOR(i, 1, now->cnt) inc(res, ((1ll * now->a[i] * Mul + Add) % mod) * ksm(v, bt++) % mod);\n\t\tnow = now->nxt;\n\t}\n\t\n\treturn res;\n}\n\ninline void update_shift(int l, int r){//mulx\n\treg Block *now = St, *lst = nullptr, *x = nullptr;\n\t\n\twhile(now->beg + now->cnt < l) now = now->nxt;\n\t\n\tif(now->beg + now->cnt >= r){\n\t\tnow->push_down();\n\t\tinc(now->a[r - now->beg], now->a[r - now->beg - 1]);\n\t\tROF(i, r - now->beg - 1, l - now->beg + 1) now->a[i] = now->a[i - 1];\n\t\tnow->a[l - now->beg] = 0;\n\t\treturn;\n\t}\n\t\n\tnow->push_down();\n\tnow->cnt++;\n\tROF(i, now->cnt, l - now->beg + 1) now->a[i] = now->a[i - 1];\n\tnow->a[l - now->beg] = 0;\n\tx = now;\n\t\n\tlst = now, now = now->nxt;\n\twhile(now->beg + now->cnt < r){\n\t\tnow->beg++;\n\t\tlst = now, now = now->nxt;\n\t}\n\t\n\tif(now->beg + 1 == r){//\u7ec6\u8282\uff0c\u8fd9\u91cc\u5982\u679c r \u662f\u5757\u5185\u7684\u7b2c\u4e00\u4e2a\u6570\u5c31\u5e94\u8be5\u628a\u4e0a\u4e00\u4e2a\u5757\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5220\u9664\n\t\tlst->push_down();\n\t\tnow->push_down();\n\t\tinc(now->a[1], lst->a[lst->cnt]);\n\t\tlst->cnt--;\n\t\tlst->check(), x->check();\n\t\treturn;\n\t}\n\t\n\tnow->push_down();\n\tinc(now->a[r - now->beg - 1], now->a[r - now->beg]);\n\tnow->cnt--;\n\tFOR(i, r - now->beg, now->cnt) now->a[i] = now->a[i + 1];\n\tnow->beg++;\n\tnow->check(), x->check();\n\t\n}\n\nint main(){\n\tn = read();\n\tBuild();\n\tchar opt[10];\n\tRint l, r;\n\tFOR(i, 1, n){\n\t\tscanf(\"%s\", opt);\n\t\tl = read();\n\t\tif(opt[0] != 'q') r = read();\n\t\tif(opt[0] == 'a'){\n\t\t\tupdate_add(l, r, read() % mod);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt[0] == 'q'){\n\t\t\tprintf(\"%d\\n\", query(l % mod));\n\t\t\tcontinue;\n\t\t}\n\t\tif(strlen(opt) == 4){\n\t\t\tupdate_shift(l, r + 1);//\u4e3a\u4e86\u65b9\u4fbf\u5c06 r \u52a0\u4e86 1\n\t\t\tcontinue;\n\t\t}\n\t\tupdate_mul(l, r, read() % mod);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573727943,
        "uid": 76107,
        "name": "\u661f\u00b7\u8f89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u9898\u9762\uff0cemm...\uff0c\u6211\u4e5f\u4e0d\u60f3\u5410\u69fd\u4ec0\u4e48\u4e86\n\n#### \u8fdb\u5165\u6b63\u9898\uff01\n\n**\u5206\u6790\uff1a**\n\n\u8981\u6c42\uff1a\n\n\u7ef4\u62a4\u4e00\u4e2a\u65e0\u7a77\u591a\u9879\u5f0f\uff0c\u6b21\u6570\u2264100001\n\n\u9700\u8981\u6ee1\u8db3\u533a\u95f4\u52a0\u6cd5\uff0c\u533a\u95f4\u79fb\u52a8\uff0c\u548c\u67e5\u8be2\uff08\u6b21\u6570\u8f83\u5c11\u53ef$O(n)$\u67e5\u8be2\uff09\n\n\n\u8fd9\u79cd\u533a\u95f4\u4fee\u6539\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u770b\u8d77\u6765\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\uff0cSplay\uff0cTreap\uff0c~~\u5757\u72b6\u94fe\u8868\u9a97\u5206~~\uff0c\u7b49\u7b49\n\n\u4f46\u662f\u662f\u4e0d\u662f\u90fd\u53ef\u4ee5\u7528\u5462\uff1f\n\n\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u5148\u6392\u9664\uff0c\u56e0\u4e3a\u672c\u849f\u84bb\u8fd8\u4e0d\u4f1a\u7528\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u76f4\u63a5\u533a\u95f4\u79fb\u52a8\uff08\u6b22\u8fce\u5927\u795e\u6765\u5199\uff09\n\n\u90a3\u4e48Splay\u548cTreap\u9009\u62e9\u90a3\u4e2a\u5462\uff1f\n\n\u5f53\u7136\u8981\u796d\u51fa **\u5e8f\u5217\u4e4b\u738b Splay** \u4e86~\n\nTreap\u4e5f\u53ef\u4ee5\u5566\uff0c\u4f46\u662f\u672c\u6587\u6682\u65f6\u4e0d\u8ba8\u8bba\n\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u5efa\u56fe\u601d\u8def\uff1a\n\n\u5c06\u4e2d\u5e8f\u904d\u5386\u6765\u4ee3\u8868\u6b21\u6570\uff0c\u7528key\u503c\u6765\u4fdd\u5b58\u7cfb\u6570\uff0cbuild\u4e8c\u5206\u5efa\u56fe\u5373\u53ef\uff08\u5c31\u662f\u5feb\uff01\uff09\n\n\u7b49\u4e0b\u5c31\u4f1a\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5efa\u56fe\u4e86\n\n\n\u5177\u4f53\u64cd\u4f5c\uff0c\u5177\u4f53\u5206\u6790\n\n\n#### mul\u64cd\u4f5c&add\u64cd\u4f5c\n\n\u76ee\u7684\uff1a\n\n1.\u5c06$x^L$\u5230$x^R$\u8fd9\u4e9b\u9879\u7684\u7cfb\u6570\u4e58\u4e0a\u67d0\u4e2a\u5b9a\u503cv\n\n2.\u5c06$x^L$\u5230$x^R$\u8fd9\u4e9b\u9879\u7684\u7cfb\u6570\u52a0\u4e0a\u67d0\u4e2a\u5b9a\u503cv\n\n\u5bf9\u4e8e\u5df2\u7ecf\u5165\u95e8splay\u7684\u4eba\u6765\u8bf4\u5f88easy\u5427\n\n\u5148\u5c06l-1\u65cb\u81f3root\uff0c\u5c06r+1\u65cb\u81f3ch\\[root\\]\\[1\\]\uff0c\u4e8e\u662f\u9700\u8981\u64cd\u4f5c\u7684\u533a\u95f4\u5c31\u662f\u4ee5ch\\[r\\]\\[0\\]\u4e3aroot\u7684\u5b50\u6811\n\n\u6211\u4eec\u5728ch\\[r\\]\\[0\\]\u4e0a\u6253\u4e0a\u4e58\u6cd5\u6807\u8bb0\u548c\u52a0\u6cd5\u6807\u8bb0\u5373\u53ef\n\n**\u6ce8\u610f\uff1a**\n\n\u4e0b\u4f20\u6807\u8bb0\u65f6\u8bb0\u5f97\u5148\u4e58\u518d\u52a0\n\n\u800c\u4e14\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u66f4\u65b0\u5b50\u8282\u70b9\u7684key\u503c\uff0c\u52a0\u6cd5\u6807\u8bb0\u4e5f\u9700\u8981\u4e00\u540c\u66f4\u65b0\n\n\n#### mulx\u64cd\u4f5c\n\n\u76ee\u7684\uff1a\n\n\u5c06$x^L$\u5230$x^R$\u8fd9\u4e9b\u9879\u4e58\u4e0ax\u53d8\u91cf\n\n\u8fd9\u4e2a\u505a\u6cd5\u5c31\u6bd4\u8f83\u5de7\u5999\u4e86\n\n\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u6b21\u6570\u90fd+1\uff0c\u60f3\u4e00\u60f3\u7b97\u5f0f\u7684\u53d8\u5316\uff0c\u53d1\u73b0\uff1a\n\n**\u5c06\u8fd9\u4e2a\u5e8f\u5217\u5411\u53f3\u5e73\u79fb\u4e00\u4f4d\uff0c\u7136\u540e\u5c06r\u548cr+1\u5408\u5e76\u5373\u53ef**\n\n\n\u90a3\u4e48\u6211\u4eec\u5efa\u56fe\u65f6\u4ee5\u4e2d\u5e8f\u904d\u5386\u6765\u4ee3\u8868\u6b21\u6570\u7684\u64cd\u4f5c\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\n\n\u6211\u4eec\u627e\u5230\u64cd\u4f5c\u5e8f\u5217\u4e2d\u6700\u5de6\u4fa7\u7684\u4e00\u4e2a\u70b9\uff08\u4e2d\u5e8f\u904d\u5386\u65f6\u6700\u9760\u524d\u7684\u70b9\uff09\n\n\u4e3a\u5b83\u589e\u52a0\u4e00\u4e2akey\u503c\u4e3a0\u7684\u5de6\u513f\u5b50\uff0c\u5373\u5c06**l\u540e\u9762\u7684\u6574\u4e2a\u5e8f\u5217**\u4e2d\u5e8f\u904d\u5386\u5411\u540e\u63a8\u79fb\u4e86\u4e00\u4f4d\n\n\n\u6211\u4eec\u627e\u5230\u64cd\u4f5c\u5e8f\u5217\u4e2d\u6700\u53f3\u4fa7\u7684\u4e00\u4e2a\u70b9\uff08\u4e2d\u5e8f\u904d\u5386\u65f6\u6700\u9760\u540e\u7684\u70b9\uff09\n\n\u5c06\u5176\u4e0er+1\u5408\u5e76\u5373\u53ef\uff0c\u5373\u5c06**r\u540e\u9762\u7684\u6574\u4e2a\u5e8f\u5217**\u4e2d\u5e8f\u904d\u5386\u5411\u524d\u63a8\u79fb\u4e86\u4e00\u4f4d\n\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5e73\u79fb\u5b8c\u6210\u4e86\uff01\n\n\n#### query\u64cd\u4f5c\n\n\u76ee\u7684\uff1a\n\n\u5c06\u67d0\u4e2a\u5b9a\u503cv\u4ee3\u5165\u591a\u9879\u5f0fF(x)\uff0c\u5e76\u8f93\u51fa\u4ee3\u5165\u540e\u591a\u9879\u5f0f\u7684\u503c\uff0c\u4e4b\u540e\u591a\u9879\u5f0f\u8fd8\u539f\u4e3a\u4ee3\u5165\u524d\u7684\u72b6\u51b5\n\n\u56e0\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc710\u6b21\uff0c\u76f4\u63a5$O(n)$\u904d\u5386\u67e5\u8be2\u5373\u53ef\n\n\n\u81ea\u8ba4\u4e3a\u4ee3\u7801\u53ef\u8bfb\u6027\u6bd4\u8f83\u597d~dalao\u52ff\u55b7\n\n**Code\uff1a**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define inf 21000000\n#define mod 20130426\n#define maxn 400000\nll ch[maxn][2],f[maxn],key[maxn],size[maxn],add[maxn],rid[maxn],num[maxn];\nll root,sz,n,ANS,q;\nchar str[10];\nll read() {\n    ll ans=0,flag=1;\n    char c=getchar();\n    while( (c>'9' || c<'0') && c!='-' ) c=getchar();\n    if(c=='-') flag=-1,c=getchar();\n    while(c>='0' && c<='9') ans=ans*10+c-'0',c=getchar();\n    return ans*flag;\n}\nbool get(int x) {return ch[f[x]][1]==x;}\nvoid update(int x) {size[x]=1+size[ch[x][0]]+size[ch[x][1]];}\nvoid clear(int x) {ch[x][0]=ch[x][1]=f[x]=key[x]=size[x]=add[x]=rid[x]=0;}\nvoid pushdown(int x) {\n    int l=ch[x][0];\n    int r=ch[x][1];\n    if(rid[x]!=1) {\n        if(l) {\n            key[l]=(key[l]*rid[x])%mod;\n            add[l]=(add[l]*rid[x])%mod;\n            rid[l]=(rid[l]*rid[x])%mod;\n        }\n        if(r) {\n            key[r]=(key[r]*rid[x])%mod;\n            add[r]=(add[r]*rid[x])%mod;\n            rid[r]=(rid[r]*rid[x])%mod;\n        }\n        rid[x]=1;\n    }\n    if(add[x]!=0) {\n        if(l) {\n            key[l]=(key[l]+add[x])%mod;\n            add[l]=(add[l]+add[x])%mod;\n        }\n        if(r) {\n            key[r]=(key[r]+add[x])%mod;\n            add[r]=(add[r]+add[x])%mod;\n        }\n        add[x]=0;\n    }\n    return ;\n}\nvoid rotate(int x) {\n    int fa=f[x],ffa=f[fa],w=get(x);\n    pushdown(fa),pushdown(x);\n    ch[fa][w]=ch[x][w^1],f[ch[fa][w]]=fa;\n    ch[x][w^1]=fa,f[fa]=x;\n    f[x]=ffa;\n    if(ffa)\n        ch[ffa][ch[ffa][1]==fa]=x;\n    update(fa),update(x);\n    return ;\n}\nvoid splay(int x,int tar) {\n    for(int fa;(fa=f[x])!=tar;rotate(x))\n        if(f[fa]!=tar)\n            rotate(get(x)==get(fa)?fa:x);\n    if(!tar)\n        root=x;\n    return ;\n}\nint findx(int x) {\n    int now=root;\n    while(1) {\n        pushdown(now);\n        if(ch[now][0] && x<=size[ch[now][0]])\n            now=ch[now][0];\n        else {\n            int tmp=(ch[now][0]?size[ch[now][0]]:0)+1;\n            if(x<=tmp) return now;\n            x-=tmp;\n            now=ch[now][1];\n        } \n    }\n}\nint build(int l,int r,int fa) {\n    if(l>r) return 0;\n    int mid=(l+r)>>1;\n    int now=++sz;\n    f[now]=fa;\n    rid[now]=1;\n    size[now]=1;\n    ch[now][0]=build(l,mid-1,now);\n    ch[now][1]=build(mid+1,r,now);\n    update(now);\n    return now;\n}\nvoid MUL() {\n    int l=read(),r=read();\n    ll v=read();\n    l=findx(l+1);\n    r=findx(r+3);\n    splay(l,0);\n    splay(r,l);\n    key[ch[ch[root][1]][0]]=(key[ch[ch[root][1]][0]]*v)%mod;\n    add[ch[ch[root][1]][0]]=(add[ch[ch[root][1]][0]]*v)%mod;\n    rid[ch[ch[root][1]][0]]=(rid[ch[ch[root][1]][0]]*v)%mod;\n    return ;\n}\nvoid ADD() {\n    int l=read(),r=read();\n    ll v=read();\n    l=findx(l+1);\n    r=findx(r+3);\n    splay(l,0);\n    splay(r,l);\n    key[ch[ch[root][1]][0]]=(key[ch[ch[root][1]][0]]+v)%mod;\n    add[ch[ch[root][1]][0]]=(add[ch[ch[root][1]][0]]+v)%mod;\n    return ;\n}\nvoid MULX() {\n    int l=read(),r=read();\n    l=findx(l+1);\n    r=findx(r+3);\n    splay(l,0);\n    splay(r,l);\n    \n    pushdown(l),pushdown(r);\n    \n    int now=r;\n    while(ch[now][0])\n        pushdown(now),now=ch[now][0];\n    pushdown(now);\n    ch[now][0]=++sz;\n    clear(sz);\n    f[sz]=now;\n    rid[sz]=1;\n    size[sz]=1;\n    while(now)\n        update(now),now=f[now];\n    \n    now=ch[r][0];\n    while(ch[now][1])\n        pushdown(now),now=ch[now][1];\n    pushdown(now);\n    key[r]=(key[r]+key[now])%mod;\n    int fa=f[now],w=get(now);\n    if(ch[now][0]) {\n        ch[fa][w]=ch[now][0];\n        f[ch[fa][w]]=fa;\n    }\n    else\n        ch[fa][w]=0;\n    clear(now);\n    while(fa)\n        update(fa),fa=f[fa];\n    \n    return ;\n}\nvoid print(int x) {\n    pushdown(x);\n    if(ch[x][0])\n        print(ch[x][0]);\n    if(q!=-1)\n        ANS=(ANS+(num[q]*key[x])%mod)%mod;\n    q++;\n    if(ch[x][1])\n        print(ch[x][1]);\n    return ;\n}\nvoid QUERY() {\n    ll v=read();\n    ANS=0,q=-1;\n    if(!v) {\n        puts(\"0\");\n        return ;\n    }\n    num[0]=1;\n    for(int i=1;i<=100001;i++)\n        num[i]=(num[i-1]*v)%mod;\n    print(root);\n    printf(\"%lld\\n\",ANS);\n    return ;\n}\nint main() {\n    n=read();\n    root=build(1,100100,0);\n    while(n--) {\n        scanf(\"%s\",str);\n        if(str[0]=='m' && strlen(str)==3)\n            MUL();\n        else if(str[0]=='a')\n            ADD();\n        else if(str[0]=='m' && strlen(str)==4)\n            MULX();\n        else if(str[0]=='q')\n            QUERY();\n    }\n    return 0;\n}\n```\n\nPS:\n\u8bdd\u8bf4\u4f60\u77e5\u90532014\u5e74\u56db\u5ddd\u7701\u9009\u662f\u4ec0\u4e48\u65f6\u5019\u4e48\uff1f\n\n\u7b54\u6848\u5c31\u5728\u535a\u5ba2\u4e2d\u54e6~\n",
        "postTime": 1515422382,
        "uid": 20601,
        "name": "League\u4e36\u7fce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "# \u7528Splay\u7ef4\u62a4\u8fd9\u5bb6\u4f19\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a(1e5+n+2)\u4e2a\u8282\u70b9\u7684Splay\uff0c\u5176\u4e2d\u591a\u4e86\u4e24\u4e2a\u8282\u70b9\u5360\u7528\u5e8f\u5217\u7684\u5934\u548c\u5c3e\uff0c\u4ee5\u4fbf\u5728Splay\u4e2d\u627e\u8282\u70b9\u65f6\u4e0d\u5206\u7c7b\u8ba8\u8bba\u6709\u6ca1\u6709\u9047\u5230\u8fb9\u754c\u60c5\u51b5\u3002\u7136\u540e\u5c31\u662f\u5bf9\u51e0\u4e2a\u64cd\u4f5c\u7684\u5904\u7406\uff1a\n\n### 1.\u533a\u95f4\u52a0\u3001\u4e58\n\n\u5728Splay\u4e2d\u5efa\u7acbadd\u57df\uff0c\u4ee3\u8868\u52a0\u7684lazy\u6807\u8bb0\u3002\u540c\u65f6\u8fd8\u6709mul\u57df\u4ee3\u8868\u4e58\u7684lazy\u6807\u8bb0\u3002\u4e3a\u4e86\u65b9\u4fbf\u4e0e\u76f4\u89c2\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u65b0\u589eaddflag\u548cmulflag\u57df\u4ee3\u8868\u662f\u5426\u6709\u672a\u4e0b\u4f20\u7684lazy\u6807\u8bb0\u3002\u6ce8\u610f\u4e00\u70b9\uff0cmul\u57df\u7684\u521d\u59cb\u503c\u4e3a1\u3002\n\n### 2.\u533a\u95f4\u4e58x\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u76f4\u63a5\u4f7f\u7528Splay\u7075\u6d3b\u7684\u6811\u64cd\u4f5c\u5b8c\u6210\u3002\u5c06[l,r]\u533a\u95f4\u5de6\u53f3\u4e24\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u5148splay\u5230\u6839\u8282\u70b9\u548c\u6839\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u3002\u6b64\u65f6\u6839\u8282\u70b9\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5c31\u662f[l,r]\u533a\u95f4\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u533a\u95f4\u5411\u53f3\u5e73\u79fb\u4e00\u4f4d\uff0c\u4e8e\u662f\u5bf9\u8fd9\u4e2a\u5b50\u6811\u7684\u67d0\u4e9b\u8282\u70b9\u66f4\u65b0\u503c\u540e\u5c06\u5b50\u6811\u526a\u4e0b\uff0c\u63a5\u5728\u5e73\u79fb\u540e\u7684\u4f4d\u7f6e\uff0c\u987a\u4fbfSplay\u56de\u6839\u8282\u70b9(\u65cb\u65cb\u66f4\u5065\u5eb7)\n\n### 3.lazy\u6807\u8bb0\u7684\u517c\u5bb9\u6027\u95ee\u9898\n\n\u6807\u8bb0\u7684\u65b0\u589e\uff1a\u5bf9\u4e8e\u533a\u95f4\u52a0\u3001\u4e58\u65f6\u5bf9\u67d0\u4e2a\u8282\u70b9\u6253\u6807\u8bb0\u65f6\u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u6253\u6807\u8bb0\u65f6\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u6807\u8bb0\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8282\u70b9\u7684\u5bf9\u5e94\u57df\u3002\u5177\u4f53\u7684\u64cd\u4f5c\u662fpushdown\u4e00\u4e0b\u3002\n\n\u6807\u8bb0\u7684pushdown\uff1a\u901a\u8fc7\u5bf9\u533a\u95f4\u52a0\u3001\u4e58\u7684\u6570\u5b66\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u8f83\u4e3a\u7b80\u5355\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u53ea\u8981\u76f8\u5e94\u5730\u5408\u7406\u5730\u4e0b\u7a7f\u4e24\u4e2a\u6807\u8bb0\u5373\u53ef\uff0c\u5177\u4f53\u65b9\u6cd5\u5728\u8fd9\u91cc\u7565\u53bb\u3002\n\n### 4.\u8be2\u95ee\u64cd\u4f5c\n\n\u6211\u4eec\u53ea\u9700O(n)\u66b4\u529b\u83b7\u5f97\u8fd9\u4e2a\u591a\u9879\u5f0f\u5373\u53ef\u8ba1\u7b97\u5176\u503c\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\u8fb9Push\\_down\u8fb9\u4e2d\u5e8f\u904d\u5386\u3002\n\n### 5.\u5982\u4f55\u538b\u884c\n\n\u5bf9\u4e0d\u8d77\uff0c200\u884c\u7684\u6211\u53d1\u73b0\u81ea\u5df1\u6839\u672c\u4e0d\u4f1a\u3002\n\n</br>\n### CODE:\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#define MX 410000\n#define MOD 20130426LL\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef struct tnode\n{\n    ll a;\n    int s[2],f,siz;\n    bool mfl,pfl;\n    ll mul,pls;\n}node;\nnode t[MX];\nint root,tnum;\nint n;\n\nint getp(int a){return t[t[a].f].s[1]==a;}\nvoid upd(int a)\n{\n    t[a].siz=t[t[a].s[0]].siz+t[t[a].s[1]].siz+1;\n}\nvoid psd(int a)\n{\n    int ls=t[a].s[0],rs=t[a].s[1];\n    ll mul=t[a].mul,pls=t[a].pls;\n    if(t[a].mfl)\n    {\n        if(ls)\n        {\n            t[ls].mfl=1;\n            t[ls].a=t[ls].a*mul%MOD;\n            t[ls].mul=t[ls].mul*mul%MOD;\n            t[ls].pls=t[ls].pls*mul%MOD;\n        }\n        if(rs)\n        {\n            t[rs].mfl=1;\n            t[rs].a=t[rs].a*mul%MOD;\n            t[rs].mul=t[rs].mul*mul%MOD;\n            t[rs].pls=t[rs].pls*mul%MOD;\n        }\n        t[a].mfl=0,t[a].mul=1;\n    }\n    if(t[a].pfl)\n    {\n        if(ls)\n        {\n            t[ls].pfl=1;\n            t[ls].a=(t[ls].a+pls)%MOD;\n            t[ls].pls=(t[ls].pls+pls)%MOD;\n        }\n        if(rs)\n        {\n            t[rs].pfl=1;\n            t[rs].a=(t[rs].a+pls)%MOD;\n            t[rs].pls=(t[rs].pls+pls)%MOD;\n        }\n        t[a].pfl=0,t[a].pls=0;\n    }\n}\nvoid rot(int a)\n{\n    int f=t[a].f,g=t[f].f,p=getp(a),q=getp(f);\n    t[f].s[p]=t[a].s[!p],t[a].s[!p]=f,t[f].f=a;\n    if(t[f].s[p])t[t[f].s[p]].f=f;\n    if(t[a].f=g)t[g].s[q]=a;\n    upd(f),upd(a);\n}\nvoid spl(int tar,int a)\n{\n    while(t[a].f!=tar)\n        if(t[t[a].f].f==tar)rot(a);\n        else if(getp(a)==getp(t[a].f))rot(t[a].f),rot(a);\n        else rot(a),rot(a);\n    if(!tar)root=a;\n}\nint findn(int p)\n{\n    int a=root,s;\n    while(a)\n    {\n        psd(a);\n        s=t[t[a].s[0]].siz;\n        if(s==p-1)return a;\n        else if(s<p-1)a=t[a].s[1],p-=s+1;\n        else a=t[a].s[0];\n    }\n    return a;\n}\nvoid insrt(int &a,int f,int p,ll x)\n{\n    int s=t[t[a].s[0]].siz;\n    if(!a)\n    {\n        a=++tnum;\n        t[a]=(node){x,0,0,f,1,0,0,1,0};\n        spl(0,a);\n    }\n    else if(s<=p-1)psd(a),insrt(t[a].s[1],a,p-s-1,x);\n    else psd(a),insrt(t[a].s[0],a,p,x);\n}\nvoid add(int l,int r,ll x)\n{\n    int ls=findn(l-1),rs=findn(r+1),a;\n    spl(0,ls);\n    spl(ls,rs);\n    a=t[rs].s[0];\n    psd(a);\n    t[a].a=(t[a].a+x)%MOD;\n    t[a].pfl=1;\n    t[a].pls=x%MOD;\n}\nvoid mul(int l,int r,ll x)\n{\n    int ls=findn(l-1),rs=findn(r+1),a;\n    spl(0,ls);\n    spl(ls,rs);\n    a=t[rs].s[0];\n    psd(a);\n    t[a].a=(t[a].a*x)%MOD;\n    t[a].mfl=1;\n    t[a].mul=x%MOD;\n}\nvoid mov(int l,int r)\n{\n    int ls=findn(l-1),rs=findn(r+1);\n    spl(0,ls),spl(ls,rs);\n    int rr=findn(r);\n    spl(rs,rr);\n    t[rs].a+=t[rr].a;\n    t[rs].s[0]=t[rr].s[0];\n    t[t[rr].s[0]].f=rs;\n    spl(0,rs);\n    insrt(root,0,l-1,0);\n}\nvoid init()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<101000;i++)insrt(root,0,rand()%i,0);\n}\nll fac[MX],fnum;\nvoid out(int a,int pos)\n{\n    psd(a);\n    int s=t[t[a].s[0]].siz+1;\n    if(s>pos)return;\n    if(t[a].s[0])out(t[a].s[0],pos);\n    fac[++fnum]=t[a].a;\n    if(t[a].s[1])out(t[a].s[1],pos-s);\n}\nvoid calc(ll x)\n{\n    ll ans=0,a=1;\n    fnum=0;\n    out(root,100015);\n    for(int i=2;i<fnum;i++)ans=(ans+fac[i]*a)%MOD,a=a*x%MOD;\n    printf(\"%lld\\n\",ans);\n}\nvoid work()\n{\n    int a,b;ll c;\n    char str[10];\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",str);\n        if(str[0]=='a')\n        {\n            scanf(\"%d%d%lld\",&a,&b,&c);\n            add(a+2,b+2,c);\n        }\n        else if(str[0]=='m'&&str[3]=='x')\n        {\n            scanf(\"%d%d\",&a,&b);\n            mov(a+2,b+2);\n        }\n        else if(str[0]=='m'&&str[3]!='x')\n        {\n            scanf(\"%d%d%lld\",&a,&b,&c);\n            mul(a+2,b+2,c);\n        }\n        else\n        {\n            scanf(\"%lld\",&c);\n            calc(c);\n        }\n    }\n}\nint main()\n{\n    init();\n    work();\n    return 0;\n}\n```",
        "postTime": 1514379000,
        "uid": 41155,
        "name": "totorato",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "### Description\n\n\u7ef4\u62a4\u4e00\u4e2a\u65e0\u7a77\u591a\u9879\u5f0f $a_0x^0+a_1x^1+a_2x^2+\\dots$\uff0c\u521d\u59cb\u6240\u6709 $a_i=0$\u3002\n\n$n$ \u6b21\u64cd\u4f5c\uff0c\u5305\u62ec\uff1a\n\n- \u5c06 $a_l,a_{l+1},\\dots,a_r$ \u52a0\u4e0a\u4e00\u4e2a\u503c\uff1b\n- \u5c06 $a_l,a_{l+1},\\dots,a_r$ \u4e58\u4e0a\u4e00\u4e2a\u503c\uff1b\n- \u5c06 $a_l,a_{l+1},\\dots,a_r$ \u4e58\u4e0a $x$\uff1b\n- \u7ed9\u5b9a $x$\uff0c\u6c42\u591a\u9879\u5f0f\u7684\u503c\u3002\n\n$n \\le 10^5$\uff0c\u591a\u9879\u5f0f\u6700\u591a $10^5+1$ \u9879\uff0c\u6c42\u503c\u64cd\u4f5c\u4e0d\u8d85\u8fc7 $10$ \u6b21\u3002\n\n### Sol\n\n\u7531\u4e8e\u6c42\u503c\u64cd\u4f5c\u4e0d\u8d85\u8fc7 $10$ \u6b21\uff0c\u56e0\u6b64\u6c42\u503c\u53ef\u4ee5\u66b4\u529b\u3002\n\n\u533a\u95f4\u52a0\u548c\u533a\u95f4\u4e58\u90fd\u662f\u5f88\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u3002\n\n\u8003\u8651\u533a\u95f4\u4e58 $x$ \u7684\u5b9e\u9645\u610f\u4e49\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a $a_l,a_{l+1},\\dots,a_r$ \u90e8\u5206\u6574\u4f53\u5411\u53f3\u5e73\u79fb\u4e00\u4f4d\uff0c\u5c06 $a_r$ \u4e0e $a_{r+1}$ \u5408\u5e76\uff0c\u7136\u540e\u5c06\u539f\u6765 $a_l$ \u7684\u5730\u65b9\u8865\u4e0a $0$\uff0c\u4e8e\u662f\u8fd9\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u5e73\u79fb\u548c\u63d2\u5165\u64cd\u4f5c\uff0c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta (n \\log n)$\u3002\n\n\u4ee3\u7801\u7528\u7684\u662f\u7b80\u5355\u597d\u5199\u7684 $\\rm fhqTreap$\u3002\n\n~~\u80fd\u628a\u533a\u95f4\u52a0\u7684\u61d2\u6807\u8bb0\u4e58\u4e0a\u5b50\u6811\u5927\u5c0f\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6\u6211\u90fd\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u5e72\u561b~~\n\n### Hint\n\n- \u6ce8\u610f\u61d2\u6807\u8bb0\u7684\u521d\u59cb\u5316\u3002\n- \u5982\u679c\u4e0d\u8fdb\u884c\u7a7a\u95f4\u56de\u6536\uff0c\u6570\u7ec4\u8981\u5f00\u4e8c\u500d\u3002\n- \u6ce8\u610f\u53d6\u6a21\uff0c\u63a8\u8350\u4f7f\u7528 `x=(x%y+y)%y` \u9632\u6b62\u51fa\u73b0\u8d1f\u6570\u3002\n- \u8bb0\u5f97\u5f00 `long long`\u3002\n\n### Code\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#define int long long\nconst int M=1e5+5;\nconst int Mod=20130426;\ninline int read(){int x(0),op(0);char ch=getchar();while(ch<'0'||ch>'9')op|=(ch==45),ch=getchar();while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();return op?-x:x;}\nint pw[M];\nnamespace Treap{\n    #define ls(p) t[p].ch[0]\n    #define rs(p) t[p].ch[1]\n    struct node{\n        int val,ch[2],pri,siz;\n    }t[M<<1];\n    int at[M<<1],mt[M<<1],rt,nt;//at\u4e3a\u52a0\u6cd5\u61d2\u6807\u8bb0\uff0cmt\u4e3a\u4e58\u6cd5\u61d2\u6807\u8bb0\n    void pushup(int p){\n        t[p].siz=t[ls(p)].siz+t[rs(p)].siz+1;\n    }\n    void pushdown(int p){//\u6807\u8bb0\u4e0b\u4f20\n        if(mt[p]^1){\n            t[ls(p)].val*=mt[p];\n            t[ls(p)].val=(t[ls(p)].val%Mod+Mod)%Mod;\n            t[rs(p)].val*=mt[p];\n            t[rs(p)].val=(t[rs(p)].val%Mod+Mod)%Mod;\n            mt[ls(p)]*=mt[p];\n            mt[ls(p)]=(mt[ls(p)]%Mod+Mod)%Mod;\n            mt[rs(p)]*=mt[p];\n            mt[rs(p)]=(mt[rs(p)]%Mod+Mod)%Mod;\n            at[ls(p)]*=mt[p];\n            at[ls(p)]=(at[ls(p)]%Mod+Mod)%Mod;\n            at[rs(p)]*=mt[p];\n            at[rs(p)]=(at[rs(p)]%Mod+Mod)%Mod;\n            mt[p]=1;\n        }\n        if(at[p]){\n            t[ls(p)].val+=at[p];\n            t[ls(p)].val=(t[ls(p)].val%Mod+Mod)%Mod;\n            t[rs(p)].val+=at[p];\n            t[rs(p)].val=(t[rs(p)].val%Mod+Mod)%Mod;\n            at[ls(p)]+=at[p];\n            at[ls(p)]=(at[ls(p)]%Mod+Mod)%Mod;\n            at[rs(p)]+=at[p];\n            at[rs(p)]=(at[rs(p)]%Mod+Mod)%Mod;\n            at[p]=0;\n        }\n    }\n    void print(int p){//\u8c03\u8bd5\u8f93\u51fa\u6811\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u5ffd\u7565\n\t\tif(!p)return;\n\t\tpushdown(p);\n\t\tprint(ls(p));\n\t\tprintf(\"%lld \",t[p].val);\n\t\tprint(rs(p));\n\t}\n    void split(int p,int s,int &x,int &y){//fhqTreap split by size\n        if(!p)return void(x=y=0);\n        pushdown(p);\n        int rk=t[ls(p)].siz+1;\n        if(rk<=s){\n            x=p;\n            split(rs(p),s-rk,rs(p),y);\n        }\n        else{\n            y=p;\n            split(ls(p),s,x,ls(p));\n        }\n        pushup(p);\n    }\n    int merge(int x,int y){\n        if(!x||!y)return x+y;\n        if(t[x].pri<t[y].pri){\n            pushdown(x);\n            rs(x)=merge(rs(x),y);\n            return pushup(x),x;\n        }\n        pushdown(y);\n        ls(y)=merge(x,ls(y));\n        return pushup(y),y;\n    }\n    void insert(int pos,int val){//\u5728\u4f4d\u7f6epos\u540e\u9762\u63d2\u5165\u503cval\n        t[++nt]=(node){val,{0,0},rand(),1};at[nt]=0;mt[nt]=1;\n        int x,y;\n        split(rt,pos,x,y);\n        rt=merge(merge(x,nt),y);\n    }\n    void add(int l,int r,int val){//\u533a\u95f4\u52a0\u6cd5\n        int x,y,z;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        t[y].val+=val;t[y].val=(t[y].val%Mod+Mod)%Mod;\n        at[y]+=val;at[y]=(at[y]%Mod+Mod)%Mod;\n        rt=merge(merge(x,y),z);\n    }\n    void mult(int l,int r,int val){//\u533a\u95f4\u4e58\u6cd5\n        int x,y,z;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        t[y].val*=val;t[y].val=(t[y].val%Mod+Mod)%Mod;\n        mt[y]*=val;mt[y]=(mt[y]%Mod+Mod)%Mod;\n        at[y]*=val;at[y]=(at[y]%Mod+Mod)%Mod;\n        rt=merge(merge(x,y),z);\n    }\n    void mulx(int l,int r){//\u533a\u95f4\u4e58x\n        int x,y,z,p,q;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        split(z,1,z,p);\n        split(y,r-l,y,q);\n        /*\n        \u8fd9\u4e00\u6b65\u5206\u88c2\u5b8c\u4e4b\u540e\u7684\u5e8f\u5217\u88ab\u5206\u6210\u4e86x,y,q,z,p\u4e94\u4e2a\u90e8\u5206\n        \u5c06q\u548cz\u52a0\u8d77\u6765\u5176\u4e2d\u4e00\u4e2a\u5408\u5e76\u56de\u53bb\u5373\u53ef\n        */\n        t[q].val+=t[z].val;t[q].val=(t[q].val%Mod+Mod)%Mod;\n        rt=merge(x,merge(y,merge(q,p)));\n        insert(l-1,0);\n    }\n    int qs,tm;\n    void dfs(int p){//dfs\u6c42\u6574\u4e2a\u5e8f\u5217\u7684\u503c\n        if(!p)return;\n        pushdown(p);\n        dfs(ls(p));\n        qs+=pw[++tm]*t[p].val%Mod;qs=(qs%Mod+Mod)%Mod;\n        dfs(rs(p));\n    }\n    int query(int x){//\u67e5\u8be2\n        qs=0;tm=-1;\n        pw[0]=1;\n        for(int i=1;i<M;++i)pw[i]=(pw[i-1]*x%Mod+Mod)%Mod;//\u9884\u5904\u7406\u5e42\n        dfs(rt);\n        return qs;\n    }\n}\nusing namespace Treap;\nsigned main(){\n    int n=read();\n    for(int i=0;i<M;++i){//\u63d2\u5165\u7ed3\u70b9\n        t[++nt]=(node){0,{0,0},rand(),1};at[nt]=0;mt[nt]=1;\n        rt=merge(rt,nt);\n    }\n    char str[10];\n    for(int i=1;i<=n;++i){\n        int l,r;\n        scanf(\"%s\",str);l=read();\n        if(str[0]=='q')printf(\"%lld\\n\",query(l));\n        else{\n            l++;\n            r=read()+1;\n            //\u8fd9\u91cc\u4f7f\u7528+1\uff0c\u9632\u6b62\u51fa\u73b0l-1<0\u7684\u60c5\u51b5\n            if(str[3]=='x')mulx(l,r);\n            else{\n                int x=read();\n                if(str[0]=='a')add(l,r,x%Mod);\n                else mult(l,r,x%Mod);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1673227955,
        "uid": 188716,
        "name": "pokefunc",
        "ccfLevel": 6,
        "title": "P3278"
    },
    {
        "content": "# Solution\n\n\u8d34\u4e00\u53d1 $treap$ \u9898\u89e3\u3002\n\n\u8fd9\u9898\u524d\u4e24\u79cd\u64cd\u4f5c\u660e\u663e\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u533a\u95f4\u52a0\u3001\u533a\u95f4\u4e58\u3002\n\n\u800c $mulx$ \u6211\u4eec\u5c31\u5728\u8fd9\u4e00\u6bb5\u524d\u9762\u63d2\u5165\u4e00\u4e2a $0$ \uff0c\u7136\u540e\u628a\u7b2c $R$ \u9879\u4e0e $R+1$ \u9879\u5408\u5e76\u3002\n\n\u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u76f4\u63a5\u628a\u539f\u6765\u7b2c $R$ \u9879\u7684\u8282\u70b9\uff0c\u7d2f\u52a0\u5230 $R+1$ \u4e4b\u540e\uff0c\u76f4\u63a5\u53d8\u6210 $0$ \u8282\u70b9\u63d2\u5728\u524d\u9762\u3002\uff08\u6211\u6ca1\u8fd9\u4e48\u5199\uff0c\u5077\u61d2\u4e86\uff09\n\n\u7531\u4e8e\u8be2\u95ee\u4e0d\u8d85\u8fc7 $10$ \u6b21\uff0c\u53d6\u51fa\u4e2d\u5e8f\u904d\u5386\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlogn)$ \u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fir first\n#define sec second\n#define pb push_back\n#define mp make_pair\n#define lc t[p].l\n#define rc t[p].r\n#define Size(x) ((int)((x).size()))\n#define rep(i, l, r) for(int (i) = (l); (i) <= (r); ++(i))\n#define per(i, r, l) for(int (i) = (r); (i) >= (l); --(i))\n#define N 100010\n#define mod 20130426\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vii;\n//inline char gc() {\n//\tstatic char now[1<<16], *S, *T;\n//\tif(S == T) {T = (S = now) + fread(now, 1, 1<<16, stdin); if(S == T) return EOF;}\n//\treturn *S++;\n//}\n#define gc getchar\ninline int read() {\n    int x = 0, f = 1; char c = gc();\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = gc();}\n    while(c >= '0' && c <= '9') {x = (x << 3) + (x << 1) + c - 48; c = gc();}\n    return x * f;\n}\nstruct Treap {\n    int l, r, w, mul, add, sz, h;\n}t[N << 1];\nint rt = 0, len = 0;\ninline int newnode(int w) {\n    t[++len] = (Treap){0, 0, w, 1, 0, 1, rand()};\n    return len;\n}\ninline void mulr(int p, int v) {\n    t[p].mul = 1ll * t[p].mul * v % mod;\n    t[p].add = 1ll * t[p].add * v % mod;\n    t[p].w = 1ll * t[p].w * v % mod;\n}\ninline void addr(int p, int v) {\n    (t[p].add+= v)%= mod;\n    (t[p].w+= v)%= mod;\n}\ninline void pushdown(int p) {\n    if(t[p].mul != 1) {\n        if(lc) mulr(lc, t[p].mul);\n        if(rc) mulr(rc, t[p].mul);\n        t[p].mul = 1;\n    }\n    if(t[p].add) {\n        if(lc) addr(lc, t[p].add);\n        if(rc) addr(rc, t[p].add);\n        t[p].add = 0;\n    }\n}\ninline void update(int p) {\n    t[p].sz = t[lc].sz + 1 + t[rc].sz;\n}\nvoid split1(int p, int x, int &a, int &b) {\n    if(!p) return (void)(a = b = 0);\n    pushdown(p);\n    if(t[lc].sz >= x) {\n        split1(lc, x, a, b);\n        lc = b;\n        b = p;\n        update(p);\n    } else {\n        split1(rc, x - 1 - t[lc].sz, a, b);\n        rc = a;\n        a = p;\n        update(p);\n    }\n}\nint merge1(int i, int j) {\n    if(!i || !j) return i + j;\n    if(t[i].h < t[j].h) {\n        pushdown(i);\n        t[i].r = merge1(t[i].r, j);\n        update(i);\n        return i;\n    } else {\n        pushdown(j);\n        t[j].l = merge1(i, t[j].l);\n        update(j);\n        return j;\n    }\n}\ninline void merge2(int x, int &y) {\n    t[y].w+= t[x].w;\n}\nint X, tmp, ans;\nvoid dfs(int p) {\n    pushdown(p);\n    if(lc) dfs(lc);\n    (ans+= 1ll * tmp * t[p].w % mod)%= mod;\n    (tmp = 1ll * tmp * X % mod)%= mod;\n    if(rc) dfs(rc);\n}\nint main() {\n    srand(20011118);\n    for(int i = 1; i <= 100001; ++i) {\n        rt = merge1(rt, newnode(0));\n    }\n    int n = read(); char opt[10];\n    while(n--) {\n        scanf(\"%s\", opt);\n        if(opt[0] == 'm' && opt[3] != 'x') {\n            int n1, n2, n3, n4;\n            int l = read() + 1, r = read() + 1, v = read();\n            split1(rt, l - 1, n1, n2);\n            split1(n2, r - l + 1, n3, n4);\n            mulr(n3, v);\n            rt = merge1(n1, merge1(n3, n4));\n        }\n        if(opt[0] == 'a') {\n            int n1, n2, n3, n4;\n            int l = read() + 1, r = read() + 1, v = read();\n            split1(rt, l - 1, n1, n2);\n            split1(n2, r - l + 1, n3, n4);\n            addr(n3, v);\n            rt = merge1(n1, merge1(n3, n4));\n        }\n        if(opt[0] == 'm' && opt[3] == 'x') {\n            int n1, n2, n3, n4, n5, n6, n7, n8, nn = newnode(0);\n            int l = read() + 1, r = read() + 1;\n            split1(rt, l - 1, n1, n2);\n            split1(n2, r - l + 1, n3, n4);\n            split1(n3, t[n3].sz - 1, n5, n6);\n            split1(n4, 1, n7, n8);\n            merge2(n6, n7);\n            rt = merge1(n1, merge1(nn, merge1(n5, merge1(n7, n8))));\n        }\n        if(opt[0] == 'q') {\n            X = read(); tmp = 1;\n            ans = 0;\n            dfs(rt);\n            printf(\"%d\\n\", ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1541506869,
        "uid": 31537,
        "name": "RichardSong",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "#Solution\n\n##\u5176\u4ed6\n\n~~\u8bdd\u8bf4\u6211\u597d\u50cf\u5199\u8fd9\u4e2a\u9898\u5199\u4e86\u56db\u5929\uff1f\u7b80\u76f4\u5c31\u662f\u8c03\u8bd5\u795e\u9898\u3002~~\u6211\u5728\u8c03\u8bd5\u671f\u95f4\u8fd8\u6252\u4e86\u697c\u4e0bdalao  boshi\u5199\u7684\u9898\u89e3\u4e0b\u6765\u5bf9\u62cd\uff08\u4e3a\u4e86\u9020\u798f\u4eba\u7c7b\uff0c\u5c0f\u6570\u636e\u751f\u6210\u5668\u4e5f\u53ef\u4ee5\u53bb[\u6211\u7684\u535a\u5ba2](http://blog.csdn.net/as\\_a\\_kid/article/details/78995788 \"\u6211\u7684\u535a\u5ba2\")\u62ff\uff09\u3002**\u5f3a\u70c8\u5efa\u8bae\u8c03\u8bd5\u4e86\u5f88\u4e45\u7684\u540c\u5b66\u91cd\u6784\u4ee3\u7801\uff01\uff01\uff01**\n\n\u53d1\u73b0\u539f\u6765\u7684\u7a0b\u5e8f\u9519\u4e86\u4e24\u4e2a\u5730\u65b9\u3002\u4e00\u4e2a\u662f\u5728mulx\u64cd\u4f5c\u65f6\u4e0b\u63a8\u6807\u8bb0\u7684fr\u548cba\u6ca1\u6709\u4e0b\u63a8\u6807\u8bb0\uff0c\u53e6\u4e00\u4e2a\u662f\u65b0\u5efa\u8282\u70b9\u8fd8\u662f\u6bd4\u8f83\u591a\uff0c\u5f00\u7ed9\u8282\u70b9\u7684\u7a7a\u95f4\u5c11\u4e86\uff0c\u5e94\u8be5\u81f3\u5c11\u8981\u5f00\u52302e5\uff0c\u6570\u7ec4\u6ea2\u51fa\u5bfc\u81f4\u7384\u5b66TLE\u3002\u8bb2\u8bb2\u89e3\u9898\u7684\u601d\u8def\u5427\u3002\n\n##\u65b9\u6cd5\n\n\u7528splay\u7ef4\u62a4\u7cfb\u6570\uff0c\u7136\u540e\u4ee5\u8282\u70b9\u5728splay\u4e2d\u7684rank\u5f53\u505a\u8282\u70b9\u7684\u5e42\u3002\u5728\u5bf9\u533a\u95f4[l,r]\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u8f6c\u5316\u4e3a\u5f00\u533a\u95f4(l-1,r+1)\uff0c\u5c06l-1\u65cb\u81f3\u6839\uff0cr+1\u65cb\u81f3l-1\u7684\u53f3\u513f\u5b50\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u64cd\u4f5c\u533a\u95f4\u5230r+1\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\uff0c\u7136\u540e\u5c31\u8fd0\u7528\u61d2\u60f0\u6807\u8bb0\u7684\u601d\u60f3\u3002\u5f53\u7136\u4e3a\u4e86\u9632\u6b62\u8f6c\u5316\u533a\u95f4\u65f6\u6ea2\u51fa\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u53f3\u79fb\u4e24\u4f4d\u5373\u53ef\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u90fd\u662f\u5957\u8def\u4e86\u554a\n\n###add&mul\n\n\u5bf9\u4e8eadd\u548cmul\u64cd\u4f5c\uff0c\u76f4\u63a5\u66f4\u6539r\u7684\u5de6\u513f\u5b50\u7136\u540e\u6253\u4e0a\u61d2\u60f0\u6807\u8bb0\u5373\u53ef\uff0c\u6ce8\u610f\u4e0b\u63a8\u6807\u8bb0\u7684\u65f6\u5019\u5148\u4e58\u518d\u52a0\u3002\n\n###mulx\n\n\u6211\u5199\u7684mulx\u6bd4\u8f83\u7e41\u7410\uff0c\u56e0\u4e3a\u4e2d\u95f4\u7684\u5220\u9664\u548c\u63d2\u5165\u64cd\u4f5c\u90fd\u76f4\u63a5\u6839\u636e\u60c5\u51b5\u624b\u5199\u4e86\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u559c\u6b22\u8fd9\u4e48\u7e41\u7410\u7684\uff0c\u5efa\u8bae\u8f6c\u6218\u697c\u4e0bdalao\u7684\u4ee3\u7801\u3002\u8bf4\u4e00\u4e9b\u5220\u9664\u548c\u63d2\u5165\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u5427\u3002\n\n\u5bf9\u4e8emulx\u64cd\u4f5c\u7684\u5904\u7406\u6bd4\u8f83\u5de7\u5999\uff0c\u9700\u8981\u628a\u5f53\u524dr\u5e42\u7684\u7cfb\u6570\u4e0er+1\u5e42\u7684\u7cfb\u6570\u8fdb\u884c\u5408\u5e76\uff0c\u7136\u540e\u65b0\u5efa\u7acb\u4ee3\u8868l\u5e42\u7cfb\u6570\u4e3a0\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u7528fr\u4ee3\u8868l\u5e42\u7684\u8282\u70b9\uff0cba\u4ee3\u8868r\u5e42\u7684\u8282\u70b9\u3002\u5728\u64cd\u4f5c\u4e4b\u524d\uff0c\u8981\u5c06\u6839\u8282\u70b9\u5230fr\u3001ba\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u6807\u8bb0\u4e0b\u63a8\u3002\n\n\u7136\u540e\u5220\u9664ba\u3002\u5728\u5220\u9664\u7684\u65f6\u5019\uff0c\u628aba\u7684\u5de6\u5b50\u6811\u63a5\u5230\u7236\u4eb2\u8282\u70b9\u4e0a\u53bb\u3002\u53ef\u4ee5\u8003\u8651\u5230\uff0c\u5f53ba\u7684\u7236\u4eb2\u8282\u70b9\u4e3ar\u65f6\uff0c\u5176\u5de6\u5b50\u6811\u5e94\u63a5\u5728\u7236\u4eb2\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0a\uff0c\u5176\u4ed6\u60c5\u51b5\u63a5\u53f3\u513f\u5b50\u4e0a\u3002\u6700\u540e\u7136\u540e\u627e\u5230fr\uff0c\u5e76\u4e3a\u5176\u65b0\u5efa\u5de6\u513f\u5b50\u3002\n\n\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u4e0b\u6b21\u64cd\u4f5cfindx\u51fd\u6570\u7684\u6b63\u786e\u6027\uff0c\u5728\u64cd\u4f5c\u5b8c\u4e4b\u540e\uff0c\u8981\u5bf9\u6839\u8282\u70b9(r\u8282\u70b9\u4ea6\u53ef)\u5230fr\u3001ba\u7684\u94fe\u4e0a\u7684\u8282\u70b9\u8fdb\u884cpushup\u64cd\u4f5c\u3002\n\n###query\n\nquery\u64cd\u4f5c\u56e0\u4e3a\u4e0d\u8d85\u8fc710\u6b21\uff0c\u53ef\u4ee5\u5229\u7528O(n)\u7684dfs\u51fa\u6240\u6709\u7cfb\u6570\uff0c\u7136\u540e\u66b4\u529b\u5b8c\u6210\u8be2\u95ee\u3002\n\n##\u4e00\u4e2a\u76f8\u5173\u6548\u7387\u95ee\u9898\n\n\u5bf9\u4e8e\u76f4\u63a5build\u6240\u6709\u8282\u70b9\u8fd8\u662f\u4f7f\u7528\u65f6insert\u7684\u6548\u7387\u7684\u5dee\u522b\uff0c\u5e94\u8be5\u662f\u5dee\u4e0d\u592a\u591a\u7684\u3002\u867d\u7136\u524d\u8005\u7684\u8282\u70b9\u8f83\u591a\uff0c\u4f46splay\u7684\u6548\u7387\u662fO(logn)\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5dee\u522b\u4e0d\u592a\u5927\u3002\u800c\u4e14\u672c\u9898\u7684\u6570\u636e\u5e76\u6ca1\u6709\u4ec0\u4e48\u5c0f\u6570\u636e\uff0c\u76f4\u63a5\u4e00\u6b21\u6027build\u53ef\u80fd\u5b9e\u9645\u6bd4insert\u66f4\u5feb\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\u4e0d\u5bb9\u6613\u51fa\u951923333\n\n#Code\n```cpp\n#include <iostream>\n#include <cstdio>\n#define pd(x) if(add[x]||mul[x]!=1)pushdown(x)\n//\u636e\u8bf4\u50cf\u8fd9\u6837\u5728\u5916\u9762\u5224\u65ad\u4e00\u4e0b\u61d2\u60f0\u6807\u8bb0\u53ef\u4ee5\u51cf\u5c0f\u5e38\u6570\nusing namespace std;\ntypedef long long ll;\nconst int maxn=200000,mod=20130426;\nint n,cnt,rt,sz,l,r,fr,ba,f[maxn],ch[maxn][2],s[maxn];\nll v,ans,key[maxn],add[maxn],mul[maxn],tmp[maxn];\nchar str[10];\ninline void clear(int x){f[x]=ch[x][0]=ch[x][1]=s[x]=0;key[x]=add[x]=mul[x]=0;}\ninline void pushup(int x){s[x]=s[ch[x][0]]+s[ch[x][1]]+1;}\ninline void pushdown(int x)\n{\n    int l=ch[x][0],r=ch[x][1];\n    if(mul[x]!=1)\n    {\n        if(l) key[l]=(key[l]*mul[x])%mod,mul[l]=(mul[l]*mul[x])%mod,add[l]=(add[l]*mul[x])%mod;\n        if(r) key[r]=(key[r]*mul[x])%mod,mul[r]=(mul[r]*mul[x])%mod,add[r]=(add[r]*mul[x])%mod;\n        mul[x]=1;\n    }\n    if(add[x])\n    {\n        if(l) key[l]=(key[l]+add[x])%mod,add[l]=(add[l]+add[x])%mod;\n        if(r) key[r]=(key[r]+add[x])%mod,add[r]=(add[r]+add[x])%mod;\n        add[x]=0;\n    }\n}\nvoid rotate(int x,int &k)\n{\n    int fa=f[x],ff=f[fa],l,r;\n    if(ch[fa][0]==x) l=0;\n    else l=1;r=l^1;\n    if(fa==k) k=x;\n    else {if(ch[ff][0]==fa) ch[ff][0]=x;else ch[ff][1]=x;}\n    f[x]=ff;f[fa]=x;f[ch[x][r]]=fa;\n    ch[fa][l]=ch[x][r];ch[x][r]=fa;\n    pushup(fa);pushup(x);\n}\nvoid splay(int x,int &k)\n{\n    while(x!=k)\n    {\n        int fa=f[x],ff=f[fa];\n        if(fa!=k)\n        {\n            if(ch[fa][0]==x^ch[ff][0]==fa)\n              rotate(x,k);\n            else\n              rotate(fa,k);\n        }\n        rotate(x,k);\n    }\n}\ninline int build(int l,int r,int pre)//\u76f4\u63a5\u5efa\u6240\u6709\u8282\u70b9\n{\n    if(l>r) return 0;\n    int m=(l+r)>>1;\n    sz++;clear(m);\n    f[m]=pre;mul[m]=1;\n    ch[m][0]=build(l,m-1,m);\n    ch[m][1]=build(m+1,r,m);\n    pushup(m);\n    return m;\n}\nint findx(int x)//find the kth node\n{\n    int now=rt;\n    while(1)\n    {\n        if(add[now]||mul[now]!=1) pushdown(now);\n        if(ch[now][0]&&x<=s[ch[now][0]]) now=ch[now][0];\n        else\n        {\n            int t=(ch[now][0]?s[ch[now][0]]:0)+1;\n            if(x<=t) return now;\n            x-=t;now=ch[now][1];\n        }\n    }\n}\nvoid work1(int l,int r,ll v)\n{\n    int now;\n    l=findx(l-1);r=findx(r+1);\n    splay(l,rt);splay(r,ch[l][1]);now=ch[r][0];\n    pd(now);\n    key[now]=(key[now]+v)%mod;add[now]=(add[now]+v)%mod;\n}\nvoid work2(int l,int r,ll v)\n{\n    int now;\n    l=findx(l-1);r=findx(r+1);\n    splay(l,rt);splay(r,ch[l][1]);now=ch[r][0];\n    pd(now);\n    key[now]=(key[now]*v)%mod;mul[now]=(mul[now]*v)%mod;\n}\nvoid work3(int l,int r)\n{\n    l=findx(l-1);r=findx(r+1);\n    splay(l,rt);splay(r,ch[l][1]);\n    pd(l);pd(r);\n    ba=ch[r][0];\n    while(ch[ba][1]){pd(ba);ba=ch[ba][1];}\n    pd(ba);key[r]+=key[ba];\n    if(f[ba]==r) ch[f[ba]][0]=ch[ba][0],f[ch[ba][0]]=f[ba];\n    else ch[f[ba]][1]=ch[ba][0],f[ch[ba][0]]=f[ba];\n    while(ba!=r){ba=f[ba];pushup(ba);}//clear(ba);\n    fr=r;\n    while(ch[fr][0]){pd(fr);fr=ch[fr][0];}\n    pd(fr);ch[fr][0]=++sz;clear(sz);\n    f[sz]=fr;mul[sz]=1;s[sz]=1;fr=sz;\n    while(fr!=r){fr=f[fr];pushup(fr);}\n}\nvoid dfs(int now,int pos)\n{\n    pd(now);\n    if(s[ch[now][0]]+1>pos) return ;\n    if(ch[now][0]) dfs(ch[now][0],pos);\n    tmp[++cnt]=key[now];\n    if(ch[now][1]) dfs(ch[now][1],pos-s[ch[now][0]]-1);\n}\nvoid query(ll v)\n{\n    ll x=1;\n    ans=0;cnt=0;\n    dfs(rt,100100);\n    for(int i=2;i<cnt;i++) ans=(ans+tmp[i]*x)%mod,x=x*v%mod;\n    printf(\"%lld\\n\",ans);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    rt=build(1,100100,0);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",str);\n        if(str[0]=='a'){scanf(\"%d%d%lld\",&l,&r,&v);work1(l+2,r+2,v);}\n        if(str[0]=='m'&&str[3]!='x'){scanf(\"%d%d%lld\",&l,&r,&v);work2(l+2,r+2,v);}\n        if(str[0]=='m'&&str[3]=='x'){scanf(\"%d%d\",&l,&r);work3(l+2,r+2);}\n        if(str[0]=='q'){scanf(\"%lld\",&v);query(v);}\n    }\n    return 0;\n}\n```",
        "postTime": 1515422111,
        "uid": 20602,
        "name": "Rayment",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3278 \u3010[SCOI2013]\u591a\u9879\u5f0f\u7684\u8fd0\u7b97 \u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3278)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io./2023/01/09/P3278%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E8%BF%90%E7%AE%97/)\n\n## \u524d\u8a00\n\n\u5199\u52a0\u8c03\u4e00\u904d\u8fc7\u5e76\u4e14\u8279\u5230\u4e86\u6700\u4f18\u89e3\uff0c\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n## \u5206\u6790\n\n`query` \u4e0d\u8d85\u8fc7 $10$ \u6b21\uff0c\u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u6240\u4ee5\u6211\u4eec\u4e3b\u8981\u8003\u8651\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u8003\u8651\u7528 Splay \u7ef4\u62a4 $(a_0, a_1, a_2,\\ldots)$\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u4e00\u6b21\u64cd\u4f5c\u7684\u5b9e\u8d28\u662f\u4ec0\u4e48\u3002\n\n\u5bf9\u4e8e `mul` \u548c `add`\uff0c\u6253\u4e24\u4e2a `tag` \u7136\u540e\u5148\u4e58\u540e\u52a0\u4e0b\u653e\u6807\u8bb0\u5373\u53ef\u3002\n\n\u5bf9\u4e8e `mulx`\uff0c\u624b\u73a9\u53d1\u73b0\u4ed6\u4f1a\u8ba9 $(a_L, a_{L + 1}, \\ldots, a_R, a_{R + 1}) \\rightarrow (0, a_L, a_L + 1, \\ldots, a_{R - 1}, a_{R} + a_{R + 1})$\uff0c\u53d1\u73b0\u662f\u4e00\u4e2a\u533a\u95f4\u5e73\u79fb\u52a0\u4e24\u4e2a\u5355\u70b9\u4fee\u6539\uff0c\u4e0a Splay \u7ef4\u62a4\u5e8f\u5217\u5373\u53ef\u3002\n\n\u6700\u540e `query` \u76f4\u63a5\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u904d\u5386 Splay \u8ba1\u7b97\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 2e5 + 10, mod = 20130426, INF = 1 << 30;\nstruct node {\n\tint s[2], v, p, sz, mul, add;\n\tvoid init(int _v, int _p) {\n\t\ts[0] = s[1] = 0, v = _v, p = _p, mul = sz = 1;\n\t}\n} t[N];\nint root, tot;\nint res, now;\n\ninline int read() {\n\tint x = 0, y = 1; char c = getchar();\n\twhile (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * y;\n}\n\ninline void pushup(int x) {\n\tt[x].sz = t[t[x].s[0]].sz + t[t[x].s[1]].sz + 1;\n}\n\ninline void pushadd(int x, int v) {\n\tt[x].add = (t[x].add + v) % mod, t[x].v = (t[x].v + v) % mod;\n}\n\ninline void pushmul(int x, int v) {\n\tt[x].mul = 1ll * t[x].mul * v % mod, t[x].add = 1ll * t[x].add * v % mod, t[x].v = 1ll * t[x].v * v % mod;\n}\n\ninline void pushdown(int x) {\n\tpushmul(t[x].s[0], t[x].mul), pushmul(t[x].s[1], t[x].mul), t[x].mul = 1;\n\tpushadd(t[x].s[0], t[x].add), pushadd(t[x].s[1], t[x].add), t[x].add = 0;\n}\n\ninline void rotate(int x) {\n\tint y = t[x].p, z = t[y].p, k = t[y].s[1] == x;\n\tt[z].s[t[z].s[1] == y] = x, t[x].p = z;\n\tt[y].s[k] = t[x].s[!k], t[t[x].s[!k]].p = y;\n\tt[x].s[!k] = y, t[y].p = x;\n\tpushup(y), pushup(x);\n}\n\ninline void splay(int x, int k) {\n\twhile (t[x].p != k) {\n\t\tint y = t[x].p, z = t[y].p;\n\t\tif (z != k)\n\t\t\tif ((t[z].s[1] == y) ^ (t[y].s[1] == x)) rotate(x);\n\t\t\telse rotate(y);\n\t\trotate(x);\n\t}\n\tif (!k) root = x;\n}\n\ninline int get_k(int k) {\n\tint u = root;\n\twhile (u) {\n\t\tpushdown(u);\n\t\tif (t[t[u].s[0]].sz >= k) u = t[u].s[0];\n\t\telse if (t[t[u].s[0]].sz + 1 == k) return u;\n\t\telse k -= t[t[u].s[0]].sz + 1, u = t[u].s[1];\n\t}\n\treturn u;\n}\n\ninline int build(int l, int r, int p) {\n\tint mid = (l + r) >> 1;\n\tint u = ++tot;\n\tt[u].init(0, p);\n\tif (l < mid) t[u].s[0] = build(l, mid - 1, u);\n\tif (r > mid) t[u].s[1] = build(mid + 1, r, u);\n\treturn pushup(u), u;\n}\n\ninline void query(int u, int v) {\n\tpushdown(u);\n\tif (t[u].s[0]) query(t[u].s[0], v);\n\tif (now != -1) res = (res + 1ll * t[u].v * now % mod) % mod, now = 1ll * now * v % mod;\n\telse now = 1;\n\tif (t[u].s[1]) query(t[u].s[1], v);\n}\n\nint main() {\n\tint q = read();\n\troot = build(0, 1e5 + 2, 0);\n\twhile (q--) {\n\t\tstring op; cin >> op;\n\t\tif (op == \"mul\") {\n\t\t\tint l = read() + 1, r = read() + 1, v = read();\n\t\t\tl = get_k(l), r = get_k(r + 2);\n\t\t\tsplay(l, 0), splay(r, l);\n\t\t\tnode &son = t[t[r].s[0]];\n\t\t\tson.v = 1ll * son.v * v % mod, son.mul = 1ll * son.mul * v % mod, son.add = 1ll * son.add * v % mod;\n\t\t}\n\t\telse if (op == \"add\") {\n\t\t\tint l = read() + 1, r = read() + 1, v = read();\n\t\t\tl = get_k(l), r = get_k(r + 2);\n\t\t\tsplay(l, 0), splay(r, l);\n\t\t\tnode &son = t[t[r].s[0]];\n\t\t\tson.v = (son.v + v) % mod, son.add = (son.add + v) % mod;\n\t\t}\n\t\telse if (op == \"mulx\") {\n\t\t\tint l = read() + 1, r = read() + 1;\n\t\t\tint lp = get_k(r), rp = get_k(r + 2);\n\t\t\tsplay(lp, 0), splay(rp, lp);\n\t\t\tint k = t[t[rp].s[0]].v;\n\t\t\tt[rp].v += k;\n\t\t\tt[rp].s[0] = 0, pushup(rp), pushup(lp);\n\t\t\tlp = get_k(l), rp = get_k(l + 1);\n\t\t\tsplay(lp, 0), splay(rp, lp);\n\t\t\tint u = ++tot;\n\t\t\tt[u].init(0, rp), t[rp].s[0] = u;\n\t\t\tpushup(rp), pushup(lp);\n\t\t}\n\t\telse {\n\t\t\tint v = read();\n\t\t\tprintf(\"%d\\n\", (res = 0, now = -1, query(root, v), res));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1673245949,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P3278"
    },
    {
        "content": "# \u9898\u610f\n\u9898\u76ee\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002\n\n# \u64cd\u4f5c\n\u64cd\u4f5c $1$ ,$2$ \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u5927\u529b\u4e0a\u7ebf\u6bb5\u6811\u6216\u8005\u6587\u827a\u5e73\u8861\u6811\u5373\u53ef\uff0c\u64cd\u4f5c   $4$ \u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u4e0d\u8d85\u8fc7 $10$ \u6b21\uff0c\u76f4\u63a5\u66b4\u529b\u4e2d\u5e8f\u904d\u5386\u5373\u53ef\uff0c\u6211\u4eec\u91cd\u70b9\u6765\u770b\u64cd\u4f5c $3$ \uff0c\u5c06\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u53d8\u91cf\u4e58\u4e0a $x$ \uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6b21\u6570\u52a0\u4e00\uff0c\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u7cfb\u6570\u6574\u4f53\u5411\u53f3\u5e73\u79fb\u4e00\u4f4d\uff0c\u540c\u65f6\u522b\u5fd8\u4e86\u52a0\u4e0a $x^{r+1}$  \u90a3\u9879\u7684\u7cfb\u6570\uff0c\u540c\u65f6\u539f\u6765  $\\ x^{l}\\ $ \u7684\u7cfb\u6570\u4e5f\u5c31\u53d8\u6210\u4e86\u96f6\u6240\u4ee5\u8fd8\u8981\u63d2\u5165\u4e00\u4e2a\u7a7a\u8282\u70b9 ,\u7136\u540e\u5c31\u53d8\u6210\u4e86 fhq__treap \u6a21\u677f\u9898\u4e86\uff0c\u8fd9\u4e2a\u9898\u8fde\u533a\u95f4\u548c\u90fd\u4e0d\u7528\u7ef4\u62a4\uff0c\u53ef\u8c13\u662f\u4e1a\u754c\u826f\u5fc3\u3002\n\n\u64cd\u4f5c $3$ ,\u4ee3\u7801\uff1a\n```cpp\n\t\t\tcin>>l>>r;l++,r++;\n\t\t\tsplit(root,l-1,x,y),split(y,r-l,y,z),split(z,1,z,r1),split(r1,1,r1,r2);\n\t\t\tz->plus(r1->w);r1->w=0;//x,r1,y,z,r2\n\t\t\troot=merge(merge(x,merge(r1,y)),merge(z,r2));\n```\n\n\u7531\u4e8e\u662f\u4e58\u6cd5\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8fdb\u884c\u533a\u95f4\u4e58\u7684\u65f6\u5019\u522b\u5fd8\u4e86\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0\u3002\n\n# \u4ee3\u7801\n\n\u7531\u4e8e\u9898\u89e3\u8fd8\u6ca1\u4eba\u7528\u6307\u9488\uff0c\u849f\u84bb\u51b3\u5b9a\u7528\u6307\u9488\u5199\u4e00\u6b21\u3002\n\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff1a\n1. \u7531\u4e8e\u6709\u64cd\u4f5c $3$ \uff0c\u957f\u5ea6\u6709\u53ef\u80fd\u8d85\u8fc7 $10^{5}$ \uff0c\u6211\u4eec\u5728\u5efa\u6811\u7684\u65f6\u5019\u8981\u591a\u5f00\u51e0\u4e2a\u8282\u70b9\u3002\n\n2. \u4e58\u6cd5\u6807\u8bb0\u8bb0\u5f97\u8d4b\u521d\u503c $1$ \uff0c\u4e0d\u7136\u8f93\u51fa\u5168\u662f $0$ \uff08\u8fd9\u4e2a\u5e94\u8be5\u597d\u67e5\u51fa\u6765\uff09\u3002\n\n3. \u5199\u64cd\u4f5c $3$ \u7684\u65f6\u5019\u4e00\u5b9a\u8981\u9759\u4e0b\u5fc3\u6765\uff0c\u4ed4\u7ec6\u5904\u7406\u533a\u95f4\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6700\u597d\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u88c2\u5f00\u3002\n\n4. fhq_treap \u8001\u751f\u5e38\u8c08\u4e86\uff0c\u8bb0\u5f97\u5408\u5e76\uff01\n\n5. \u591a\u9879\u5f0f\u7cfb\u6570\u4ece $0 $ \u5f00\u59cb\uff0c\u800c  fhq_treap \u7ef4\u62a4\u4ece $0 $ \u5f00\u59cb\u7684\u533a\u95f4\u4f1a\u51fa\u95ee\u9898\uff0c\u6574\u4f53\u52a0\u4e00\u5373\u53ef\u3002\n\n6. \u6c42\u503c\u7684\u65f6\u5019\u522b\u5fd8\u4e86 push_down\u3002\n\n[ \u4ee3\u7801\u6233\u8fd9\u91cc ](https://www.luogu.com.cn/paste/27fz5ycb)",
        "postTime": 1654690843,
        "uid": 571229,
        "name": "__stick",
        "ccfLevel": 7,
        "title": "solution"
    },
    {
        "content": "\u8fd9\u4e2a\u9898 $\\text{mul,add}$ \u90fd\u662f\u6570\u636e\u7ed3\u6784\u57fa\u7840\u64cd\u4f5c\uff0c $\\text{query}$ \u64cd\u4f5c\u7531\u4e8e\u53ea\u670910\u6b21\u76f4\u63a5\u5355\u6b21 $O(n\\log n)$ \u505a\u751a\u81f3\u90fd\u53ef\u4ee5\uff0c\u6240\u4ee5\u91cd\u70b9\u662f $\\text{mulx}$ \u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u5230\u5982\u679c\u6211\u4eec\u5bf9\u4e8e $[l,r]$ \u8fdb\u884c $\\text{mulx}$ \u64cd\u4f5c\u7684\u8bdd\uff0c\u76f8\u5f53\u4e8e\u628a $[l,r-1]$ \u5e73\u79fb\u5230 $[l+1,r]$ \u4e4b\u540e\u628a\u539f\u6765 $x^R$ \u4e0a\u7684\u7cfb\u6570\u52a0\u5230 $x^{R+1}$ \u4e0a\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa $\\text{mulx}$ \u64cd\u4f5c\u7684\u8fc7\u7a0b\uff08\u5728 $\\text{FHQ-Treap}$ \u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\uff09\uff1a\n\n```cpp\nvoid mulx(int l,int r){\n\tint r1,r2,r3,r4;\n\tsplit(rt,l,r1,r2);\n\tsplit(r2,r,r3,r4);\n \tsplit(r3,r+1,r3,r4);\n\tadd(r+1,r+1,t[r3].val);//\u628ax^r\u4e0a\u7684\u7cfb\u6570\u52a0\u5230x^r+1\u4e0a\n \trt=merge(r1,merge(newNode(0),merge(r2,r4)));//\u5728\u539f\u6765x^l\u7684\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u7cfb\u6570\u4e3a0\u7684\u9879\uff0c\u5e76\u6062\u590dTreap\u5f62\u72b6\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5c31\u4e0d\u7ed9\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u57fa\u7840\u7684\u677f\u5b50\u3002",
        "postTime": 1653826947,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "P3278 \u9898\u89e3"
    }
]