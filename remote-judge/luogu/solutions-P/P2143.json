[
    {
        "content": "[P2143 [JSOI2010]\u5de8\u989d\u5956\u91d1](https://www.luogu.com.cn/problem/P2143)\n\n[\u53cc\u500d\u7ecf\u9a8cP4208 [JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570](https://www.luogu.com.cn/problem/P4208) \n\n\n**\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u4e2a\u6027\u8d28\uff1a**\uff08\u8bc1\u660e\u53ef\u4ee5\u8003\u8651 kruskal \u7684\u8fc7\u7a0b\uff09\n\n* **\u5bf9\u4e8e\u540c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u7684\u6570\u91cf\u76f8\u540c** \n* \u53ea\u8fde\u63a5\u957f\u5ea6 $\\le w$ \u7684\u8fb9\u65f6\uff0c\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u6027\u76f8\u540c\u3002\n\n\u57fa\u4e8e\u4ee5\u4e0a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u672c\u9898\u7684\u57fa\u672c\u601d\u8def\uff1a\n\n* \u628a\u8fb9\u6743\u79bb\u6563\u5316\uff0c\u968f\u4fbf\u6c42\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bb0\u5f55\u8fb9\u6743\u4e3a $i$ \u7684\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u51fa\u73b0\u6b21\u6570 $cnt_i$\n\n* \u53d1\u73b0\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\u6570\u4e0d\u8d85\u8fc710\uff0c\u90a3\u4e48\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u6bcf\u79cd\u8fb9\u6743\u9009\u54ea $cnt_i$ \u6761\uff0c\u6309\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $O(2^{10} m+nm)$ \u3002\n\n* \u7ec6\u8282\uff1a\u9996\u5148\u8981\u5224\u539f\u56fe\u662f\u5426\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\u3002\u4e3a\u4e86\u66b4\u641c\u56de\u6eaf\u65f6\u80fd\u5feb\u901f\u5206\u5f00\u8fde\u901a\u5757\uff0c\u5e76\u67e5\u96c6**\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff01**\n\n\u4e8b\u5b9e\u4e0a\uff0c\u672c\u9898\u8fd8\u6709\u66f4\u4f18\u79c0\u7684\u89e3\u6cd5\uff1a\u679a\u4e3e\u6811\u8fb9\u7684\u6743\u503c $i$ \uff0c\u628a\u8fb9\u6743\u4e0d\u4e3a $i$ \u7684\u8fb9\u90fd\u52a0\u5165\u56fe\u4e2d\u540e\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u3002\u7528\u6743\u503c\u4e3a $i$ \u7684\u8fb9\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\u6784\u9020\u57fa\u5c14\u970d\u592b\u77e9\u9635\uff0c\u7528 Matrix-Tree \u5b9a\u7406\u89e3\u51b3\u3002\u6700\u540e\u6309\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u7b54\u6848\u3002\n\n~~\u4f46\u7b14\u8005\u61d2\u5f97\u5199\u7b2c\u4e8c\u79cd\u89e3\u6cd5\u7684\u4ee3\u7801\u4e86~~\uff0c\u8fd9\u91cc\u7ed9\u51fa\u66b4\u529b\u89e3\u6cd5\u7684\u4ee3\u7801\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace FGF\n{\n\tint n,m;\n\tint read()\n\t{\n\t\tint s=0;char ch=getchar();\n\t\twhile(!isdigit(ch))ch=getchar();\n\t\twhile(isdigit(ch))s=s*10+ch-'0',ch=getchar();\n\t\treturn s;\n\t}\n\tstruct edg{\n\t\tint u,v,w;\n\t}e[1005];\n\tint cnt[1005],a[1005],fa[105],ans=1;\n\tconst int mo=31011;\n\tbool cmp(edg x,edg y)\n\t{\n\t\treturn x.w<y.w;\n\t}\n\tint find(int x)\n\t{\n\t\treturn fa[x]==x? x:find(fa[x]);\n\t}\n\tbool kruskal()\n\t{\n\t\tfor(int i=1;i<=n;i++)fa[i]=i;\n\t\tint sum=0;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint u=find(e[i].u),v=find(e[i].v);\n\t\t\tif(u!=v)fa[u]=v,sum++,cnt[e[i].w]++;\n\t\t\tif(sum==n-1)return 1;\n\t\t}\n\t\treturn 0;\n\t}\n\tint dfs(int num,int w,int s)\n\t{\n\t\tif(s==cnt[w])return 1;\n\t\tif(e[num].w!=w)return 0;\n\t\tint sum=0,u=find(e[num].u),v=find(e[num].v);\n\t\tif(u!=v)\n\t\t{\n\t\t\tfa[u]=v;\n\t\t\tsum=dfs(num+1,w,s+1);\n\t\t\tfa[u]=u,fa[v]=v;\n\t\t}\n\t\treturn sum+dfs(num+1,w,s);\n\t}\n\tvoid work()\n\t{\n\t\tn=read(),m=read();\n\t\tfor(int i=1;i<=m;i++)\n\t\t\te[i].u=read(),e[i].v=read(),e[i].w=a[i]=read();\n\t\tsort(a+1,a+m+1),sort(e+1,e+m+1,cmp);\n\t\tint tot=unique(a+1,a+m+1)-a-1;\n\t\tfor(int i=1;i<=m;i++)\n\t\t\te[i].w=lower_bound(a+1,a+tot+1,e[i].w)-a;\n\t\tif(!kruskal())\n\t\t{\n\t\t\tputs(\"0\");\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)fa[i]=i;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tif(e[i].w==e[i-1].w||!cnt[e[i].w])continue;\n\t\t\tans=ans*dfs(i,e[i].w,0)%mo;\n\t\t\tint j=i;\n\t\t\twhile(e[j].w==e[i].w)\n\t\t\t{\n\t\t\t\tint u=find(e[j].u),v=find(e[j].v);\n\t\t\t\tfa[u]=v;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\",ans);\n\t}\n}\nint main()\n{\n\tFGF::work();\n\treturn 0;\n}\n```",
        "postTime": 1605496969,
        "uid": 224403,
        "name": "\u6728xx\u6728\u5927",
        "ccfLevel": 9,
        "title": "P2143 [JSOI2010]\u5de8\u989d\u5956\u91d1"
    },
    {
        "content": "\u5bf9\u6b64\u6211\u4eec\u5148\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u65e0\u6cd5\u751f\u6210\u6811\u5c31\u8f93\u51fa0\n\n\u7136\u540e\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u4e2a\u6743\u503c\u7684\u8fb9\u6709\u51e0\u6761\n\n\u5bf9\u4e8e\u6743\u503c\u4e3aW\u7684\u8fb9\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6709k\u6761\n\n\u90a3\u4e48\u628a\u8fd9\u4e9b\u8fb9\u4ece\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u53bb\u6389\uff0c\u4f1a\u5f62\u6210\u7f16\u53f7\u4e3a$B_1-B_{k+1}$\u7684\u8fde\u901a\u5757\n\n\u90a3\u4e48\u5728\u6240\u6709\u8fb9\u6743\u4e3aW\u7684\u8fb9\u4e2d\u9009k\u6761\uff0c\u53ea\u8981\u80fd\u628a\u8fd9k+1\u4e2a\u8fde\u901a\u5757\u8fde\u8d77\u6765\uff0c\u5c31\u662f\u8fd9\u4e2a\u6743\u503c\u7684\u4e00\u4e2a\u65b9\u6848\n\n\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u603b\u65b9\u6848\u6570\u5c31\u662f\u4e0a\u9762\u6240\u6709\u6743\u503c\u7684\u4e58\u79ef\n\n\u8bd5\u7740\u8bc1\u660e\u4e00\u4e0b\u6b63\u786e\u6027\n\n\u5728\u539f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6743\u503c\u4e3aW\u7684k\u6761\u8fb9\u7684\u552f\u4e00\u4f5c\u7528\u5c31\u662f\u628a$B_1-B_{k+1}$\u7ed9\u8054\u901a\n\n\u800c\u6211\u4eec\u6362\u53e6\u5916k\u6761\u8fb9\u7684\u4e00\u4e2a\u7ec4\u5408\uff0c\u53ea\u8981\u80fd\u8fde\u901a\u8fd9\u4e9bk+1\u4e2a\u8fde\u901a\u5757\uff0c\u5728\u751f\u6210\u6811\u4e2d\u7684\u4f5c\u7528\u5c31\u7b49\u4ef7\u4e8e\u539f\u6765k\u6761\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u8ba1\u7b97\u51fa\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2a\u6570\u4e00\u5b9a\u5206\u522b\u5bf9\u5e94\u4e00\u79cd\u771f\u5b9e\u5b58\u5728\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u53cd\u8fc7\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5047\u8bbe\u5b83\u6ca1\u6709\u88ab\u8ba1\u6570\uff0c\u90a3\u6709\u4e24\u79cd\u53ef\u80fd\u6027\n\n\u4e00\u79cd\u662f\u67d0\u79cd\u6743\u503c\u7684\u8fb9\u4e2a\u6570\u4e0e\u539f\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u4e00\u6837\uff0c\u90a3\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e24\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4e0e\u524d\u9762\u77db\u76fe\n\n\u53e6\u4e00\u79cd\u662f\u67d0\u4e2a\u6743\u503c\u7684\u8fb9\u672a\u80fd\u8fde\u901a\u539fk+1\u4e2a\u8fde\u901a\u5757\uff0c\u4e0d\u7b97\u91cd\u8fb9\u7684\u8bdd\uff0c\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728\u539f\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u56e0\u4e3a\u539f\u6700\u5c0f\u751f\u6210\u6811\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u53ef\u8bc1\u660e\u8fd9\u79cd\u60c5\u51b5\u4e0d\u6210\u7acb\n\n\u4ece\u800c\u53cd\u8bc1\u51fa\u6ca1\u6709\u5408\u6cd5\u7684\u6700\u5c0f\u751f\u6210\u6811\u6ca1\u6709\u88ab\u8ba1\u6570\n\n\u8ba1\u6570\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2a\u6570\u5f97\u8bc1\n\n\n\u5520\u53e8\u8fd9\u4e48\u957f\u4e86\uff0c\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u8d34\u4e2a\u94fe\u63a5\u5427\n\n[\u6ca1\u6709\u6ce8\u91ca\u7684\u4ee3\u7801](http://paste.ubuntu.com/25377013/)\n",
        "postTime": 1503502960,
        "uid": 25508,
        "name": "Night_Aurora",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2143 \u3010[JSOI2010]\u5de8\u989d\u5956\u91d1\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3002\n\n\u4e3b\u8981\u5c31\u662f\u5148\u505a$Kruskal$,\u7136\u540e\u5bf9\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u5229\u7528$Matrix-Tree$\u5b9a\u7406\u6c42\u65b9\u6848\u6570\u3002\n\n\u5f53\u6211\u4eec\u679a\u4e3e\u67d0\u4e2a\u6743\u503c$c$\u65f6\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a\u67d0\u4e9b\u8054\u901a\u5757\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u4f46\u53c8\u4e0d\u5f62\u6210\u73af\u3002\n\n\u90a3\u4e48\u6211\u4eec\u628a\u5408\u5e76\u524d\u7684\u8054\u901a\u5757\u5f53\u6210\u70b9\uff0c\u5408\u5e76\u540e\u5408\u6210\u4e00\u4e2a\u8054\u901a\u5757\u7684\u90e8\u5206 \u5206\u522b\u505a$Matrix-Tree$,\u518d\u628a\u5b83\u4eec\u7684\u65b9\u6848\u6570\u76f8\u4e58\u3002\n\n\u8bb0\u5f97\u7279\u5224\u56fe\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\ninline int read(){\n    int x = 0,f = 1; char c = getchar();\n    while (c != EOF && !isdigit(c)) {if (c == '-') f = -1; c = getchar();}\n    while (isdigit(c)) {x = x * 10 + c - '0'; c = getchar();}\n    return x * f;\n}\ninline void write(int x){\n    if (x < 0) putchar('-'),x = -x;\n    if (x > 9) write(x/10); putchar(x%10+'0');\n}\ninline void writeln(int x){ write(x),putchar('\\n'); }\nconst int P = 31011,N = 400,M = 10500; \nstruct Edge{\n    int u,v,w;\n    bool operator < (const Edge x) const{ return w < x.w; }\n}e[M];\nint n,m,a[M],k,cnt[M];\nvoid Init(){\n    int i;\n    n = read(),m = read();\n    for (i = 1; i <= m; ++i) e[i].u = read(),e[i].v = read(),e[i].w = read();\n    sort(e+1,e+m+1);\n    for (i = 1; i <= m; ++i) a[i] = e[i].w;\n    sort(a+1,a+m+1);\n    k = unique(a+1,a+m+1) - a - 1;\n}\nstruct UFS{\n    int fa[1050],rk[1050];\n    void Make(int n){for (int i = 0; i <= n; ++i) fa[i] = i,rk[i] = 1;}\n    int Find(int x){return x == fa[x] ? x : fa[x] = Find(fa[x]);}\n    bool Merge(int x,int y){\n        x = Find(x),y = Find(y);\n        if (x == y) return 0;\n        if (rk[x] > rk[y]) swap(x,y);\n        if (rk[x] == rk[y]) ++rk[y];\n        fa[x] = y;\n        return 1;\n    }\n}S,S2;\nint tot;\nvoid Kruskal(){\n    int i;\n    for (i = 1; i <= m; ++i) e[i].w = lower_bound(a+1,a+k+1,e[i].w) - a;\n    S.Make(n);\n    for (i = 1; i <= m; ++i) if (S.Merge(e[i].u,e[i].v)) ++cnt[e[i].w],++tot;\n}\nint Deg[N][N],G[N][N],A[N][N];\nint det(int n){\n    int ans = 1,i,j,k,q;\n    for (i = 1; i <= n; ++i)\n        for (j = 1; j <= n; ++j){\n            A[i][j] = (Deg[i][j] - G[i][j]) % P;\n            A[i][j] = (A[i][j] + P) % P;\n        }\n    --n;\n    for (i = 1; i <= n; ++i){\n        for (j = i + 1; j <= n; ++j){\n            while (A[j][i]){\n                q = A[i][i] / A[j][i];\n                for (k = 1; k <= n; ++k){\n                    A[i][k] = (A[i][k] - 1LL * q * A[j][k] % P) % P;\n                    A[i][k] = (A[i][k] + P) % P;\n                    swap(A[i][k],A[j][k]);\n                }\n                ans = P - ans;\n            }\n        }\n        ans = 1LL * ans * A[i][i] % P;\n    }\n    return ans;\n}\nEdge rp[M]; int krp;\nconst int E = 400;\nint To[E<<1],Ne[E<<1],He[N],gk,vis[N];\ninline void add(int x,int y){ To[++gk] = y,Ne[gk] = He[x],He[x] = gk; }\nint size,node[N];\nvoid dfs(int x){\n    vis[x] = 1;\n    node[++size] = x;\n    for (int p = He[x]; p ; p = Ne[p]) if (!vis[To[p]]) dfs(To[p]);\n}\nvoid Make_Matrix(){\n    int i,j,u,v;\n    for (i = 1; i <= size+1; ++i)\n    for (j = 1; j <= size+1; ++j) Deg[i][j] = G[i][j] = 0;\n    sort(node+1,node+size+1);\n    for (i = 1; i <= krp; ++i){\n        u = rp[i].u,v = rp[i].v;\n        u = lower_bound(node+1,node+size+1,u) - node;\n        v = lower_bound(node+1,node+size+1,v) - node;\n        if (rp[i].u != node[u] || rp[i].v != node[v]) continue;\n        if (u == v) continue;\n        ++Deg[u][u],++Deg[v][v],++G[u][v],++G[v][u];\n    }\n}\nint solver(){\n    int i,u,ans = 1;\n    gk = 0;\n    memset(He,0,sizeof(He));\n    for (i = 1; i <= krp; ++i) rp[i].u = S2.Find(rp[i].u),rp[i].v = S2.Find(rp[i].v);\n    for (i = 1; i <= krp; ++i) if (rp[i].u != rp[i].v) add(rp[i].u,rp[i].v),add(rp[i].v,rp[i].u);\n    for (i = 1; i <= n; ++i) vis[i] = 0;\n    for (i = 1; i <= n; ++i){\n        u = S2.Find(i);\n        if (!vis[u]){\n            size = 0;\n            dfs(u);\n            Make_Matrix();\n            ans = (LL)ans * det(size) % P;\n        }\n    }\n    for (i = 1; i <= krp; ++i) S2.Merge(rp[i].u,rp[i].v);\n    return ans;\n}\nint main(){\n    int i,ans = 1;\n    Init();\n    Kruskal();\n    if (tot != n - 1) {printf(\"0\\n\"); return 0;}\n    int l = 1;\n    S2.Make(n);\n    for (i = 1; i <= k; ++i)\n        if (cnt[i]){\n            krp = 0;\n            while (e[l].w < i && l <= m) ++l;\n            while (e[l].w == i && l <= m){\n                rp[++krp] = e[l];\n                ++l;\n            }\n            ans = (LL)ans * solver() % P;\n        }\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1560860457,
        "uid": 52518,
        "name": "s_r_f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2143 \u3010[JSOI2010]\u5de8\u989d\u5956\u91d1\u3011"
    },
    {
        "content": "## \u9898\u610f\u7406\u89e3\n> \u8981\u6c42\u4efb\u4f55\u4e24\u4e2a\u533a\u4e4b\u95f4\u90fd\u53ef\u4ee5\u53ea\u901a\u8fc7\u65b0\u578b\u5e72\u9053\uff08\u76f4\u63a5\u6216\u95f4\u63a5\u5730\uff09\u8fde\u63a5\u3002\n\n\u8981\u6c42\u4e00\u4e2a\u751f\u6210\u6811(\u5728\u4e00\u4e2a\u73af\u5220\u53bb\u4efb\u610f\u4e00\u6761\u65b0\u578b\u5e72\u9053\u90fd\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6)\u3002\n\n\u53c8\u56e0\u4e3a\u8981\u6c42\u8d39\u7528\u6700\u5c0f\u3002\u6240\u4ee5\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u6c42\u6700\u5c0f\u751f\u6210\u6811\u6709\u591a\u5c11\u79cd\u4e86\u3002\n## \u601d\u8def\n---\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u4e2a\u6027\u8d28,\u591a\u79cd\u6700\u5c0f\u751f\u6210\u6811,\u4efb\u610f\u4e00\u79cd\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\u9009\u62e9\u7684\u6570\u91cf\u4e0d\u53d8\u3002(\u5982\u679c\u591a\u9009\u4e00\u4e2a$1$\u4e2a\u5c31\u6784\u6210\u73af\u4e86,\u5c11\u9009$1$\u4e2a\u5c31\u4e0d\u6700\u4f18\u4e86\u3002)\u3002\n\n\u6b64\u9898\u6570\u636e\u6709\u70b9\u6c34,\u6240\u4ee5\u6211\u5c31\u7528dfs\u8fc7\u4e86\u3002\u8bb2\u4e00\u4e0bdfs\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f,\u627e\u51fa\u6240\u4ee5\u8fb9\u6743\u4e00\u6837\u7684\u9053\u8def,\u7136\u540e\u66b4\u529bdfs\u6709\u591a\u5c11\u79cd\u65b9\u6848\u80fd\u4f7f\u5176\u4e0d\u6784\u6210\u73af,\u4e14\u6ee1\u8db3\u6027\u8d28(\u9898\u89e3\u601d\u8def\u7684\u7b2c1\u884c\u63d0\u5230)\u3002\n\n\u7528\u4e58\u6cd5\u539f\u7406,\u5c06\u6240\u6709\u4e0d\u540c\u8fb9\u6743\u7684\u7b54\u6848\u4e58\u8d77\u6765,\u5c31\u662f\u7b54\u6848\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f,\u5224\u65ad\u6784\u4e0d\u6784\u6210\u73af\u8981\u7528\u5230\u5e76\u67e5\u96c6\u3002\u5e76\u67e5\u96c6\u5343\u4e07\u4e0d\u80fd\u8def\u5f84\u538b\u7f29,\u56e0\u4e3a\u6211\u4eec\u56de\u6eaf\u7684\u65f6\u5019\u8981\u65b9\u4fbf\u62c6\u3002\n\n\u5177\u4f53\u505a\u6cd5\u653e\u5728\u4ee3\u7801\u91cc\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(sum{$k \\times 2^k$})\u3002\u5176\u4e2dk\u4e3a\u76f8\u540c\u82b1\u8d39\u7684\u8fb9\u7684\u6570\u91cf\u3002\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\u00d72^{m})$,\u53ef\u4ee5\u88ab\u4e00\u7ec4\u6240\u6709\u8fb9\u6743\u90fd\u4e00\u6837\u7684\u6570\u636e\u5361\u6389\u3002\n\n## AC\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define mod 31011\nstruct xyq{\n\tlong long u,v,w; //u--w-->v(u\u5230v\u6709\u4e00\u6761w\u7684\u8fb9\u3002)\u3002\n}_[1000005];\nstruct rule{ //\u81ea\u5b9a\u4e49\u6392\u5e8f\u3002\n\tbool operator()(const xyq &s1,const xyq &s2){\n\t\treturn s1.w<s2.w;\n\t}\n};\nlong long f[1000005];\nlong long getfather(long long iakioi){ //\u5e76\u67e5\u96c6,\u627e\u6839\u8282\u70b9\u3002\n\tif(f[iakioi]==iakioi){\n\t\treturn iakioi;\n\t}\n\treturn getfather(f[iakioi]);\n}\nlong long dfs(long long l,long long r,long long a){ //l~r\u7684\u533a\u95f4\u91cc\u9009a\u6761\u8fb9\u3002\n\tif(l>r){ //\u5982\u679c\u8d85\u8fc7\u4e86\u3002\n\t\treturn (a==0); //\u8fd4\u56de\u662f\u5426\u9009\u5b8c\u4e86\u3002\n\t}\n\tlong long sum=0,i,f1,f2;\n\tf1=getfather(_[l].u);\n\tf2=getfather(_[l].v);\n\tif(f1!=f2){ //\u9009\u7684\u60c5\u51b5\u3002\u5fc5\u987b\u4e0d\u6784\u6210\u73af\u624d\u53ef\u4ee5\u9009\u3002\n\t\tf[f1]=f2; //\u5408\u5e76\u3002\n\t\tsum+=dfs(l+1,r,a-1); //\u4e0b\u4e00\u4e2a,l\u8981\u52a0\u4e00,\u7531\u4e8e\u9009\u4e86,\u6240\u4ee5a(\u8fd8\u9700\u9009\u591a\u5c11\u4e2a)\u8981\u51cf\u4e00\u3002\n\t\tf[f1]=f1; //\u7531\u4e8e\u6ca1\u6709\u8def\u5f84\u538b\u7f29,\u6240\u4ee5\u76f4\u63a5\u53d6\u6d88\u5c31\u53ef\u4ee5\u62c6\u5f00\u3002\n\t}\n\tsum+=dfs(l+1,r,a); //\u4e0d\u9009\u7684\u60c5\u51b5,\u5fc5\u987b\u4e0d\u8fc7\u600e\u4e48\u6837\u90fd\u53ef\u4ee5\u4e0d\u9009,\u6240\u4ee5\u4e0d\u9700\u8981if\u8bed\u53e5\u3002\n\treturn sum; \n}\nlong long l[1000005],size[1000005]; //size\u4e3a\u5e94\u9009\u8fb9\u7684\u6761\u6570\u3002\nvoid clearf(long long lid,long long rid){ //\u6e05\u7a7a\u5e76\u67e5\u96c6\u3002 \n\tlong long i;\n\tfor(i=lid;i<rid;++i){\n\t\tf[i]=i;\n\t}\n}\nint main(){\n\tlong long n,m,i,j,a,b,c,ykb,f1,f2,tot=1,sum=0;\n\tcin>>n>>m;\n\tclearf(0,n);\n\tfor(i=0;i<m;++i){\n\t\tcin>>_[i].u>>_[i].v>>_[i].w;\n\t}\n\tsort(_,_+m,rule()); //\u6309\u6539\u9020\u9053\u8def\u7684\u82b1\u8d39\u6392\u5e8f\u3002\n\tfor(i=0;i<m;++i){ //kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\t\tf1=getfather(_[i].u);\n\t\tf2=getfather(_[i].v);\n\t\tif(f1!=f2){\n\t\t\t++size[tot-1]; //\u8bb0\u5f55\u4e0b\u6bcf\u79cd\u82b1\u8d39\u9009\u4e86\u591a\u5c11\u3002\n\t\t\tf[f1]=f2;\n\t\t\t++sum; //\u8bb0\u5f55\u6539\u9020\u4e86\u591a\u5c11\u6761\u9053\u8def\u3002\n\t\t}\n\t\tif(_[i].w!=_[i+1].w){\n\t\t\tl[tot]=i+1; //\u8bb0\u5f55\u4e0b\u6bcf\u79cd\u82b1\u8d39\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002\n\t\t\t++tot;\n\t\t}\n\t}\n\tif(sum!=n-1){ //\u5982\u679c\u56fe\u4e0d\u8fde\u901a(\u5373\u9009\u4e0d\u51fa\u4e00\u68f5\u6811),\u5c31\u76f4\u63a5\u8f93\u51fa0,\u4e0d\u7279\u5224\u53ef\u80fd\u4f1aWA\u3002\n\t\tcout<<0;\n\t\treturn 0;\n\t}\n\tsum=1; //\u6ce8\u610f\u4e58\u6cd5\u4e0d\u8981\u521d\u59cb\u5316\u4e3a0,\u5426\u5219\u7b54\u6848\u6c38\u8fdc\u90fd\u662f0\u3002\n\tl[tot]=m+1;\n\tclearf(0,n); //kruskal\u5c06\u8fb9\u90fd\u8fde\u8d77\u6765\u4e86,dfs\u4e00\u5f00\u59cb\u4ec0\u4e48\u8fb9\u90fd\u6ca1\u8fde,\u8bb0\u5f97\u6e05\u7a7a\u3002\n\tfor(i=0;i<tot;++i){\n\t\tsum=(sum*dfs(l[i],l[i+1]-1,size[i]))%mod; //\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5230\u7ed3\u675f(\u4e0b\u4e00\u4e2a\u8d77\u59cb\u4f4d\u7f6e-1),\u56e0\u4e3a\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\u6570\u91cf\u4e0d\u53d8,\u6240\u4ee5\u679a\u4e3esize[i]\u4e2a\u3002\u3002\u3002\u3002\u3002\u4e58\u6cd5\u539f\u7406,\u8fb9\u4e58\u8fb9\u819c,\u9632\u6b62\u7206\u3002\n\t\tfor(j=l[i];j<l[i+1];++j){ //\u5408\u5e76,\u5c06\u6240\u6709\u8fd9\u4e00\u6b21\u9009\u7684\u8fb9\u5728\u4e0d\u6784\u6210\u73af\u7684\u60c5\u51b5\u4e0b\u90fd\u5408\u5e76\u3002\n\t\t\tf1=getfather(_[j].u);\n\t\t\tf2=getfather(_[j].v);\n\t\t\tif(f1!=f2){ //\u6ca1\u6709\u73af\u76f4\u63a5\u8fde\u63a5\u3002\n\t\t\t\tf[f1]=f2;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<sum%mod;\n\treturn 0;\n}\n```\n\u849f\u84bb\u4e0d\u4f1a\u4ec0\u4e48\u77e9\u9635\u6811,\u6240\u4ee5\u53ea\u5199\u4e86dfs,\u867d\u7136\u6211~~\u662f\u9760\u6570\u636e\u6c34\u901a\u8fc7\u7684~~\u5199\u7684\u4e0d\u662f\u6b63\u89e3,\u4f46\u6211\u5e0c\u671b\u5927\u5bb6\u90fd\u770b\u61c2\u4e86\u3002\u6ca1\u770b\u61c2\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u95ee,\u6211\u5c3d\u91cf\u56de\u7b54\u3002",
        "postTime": 1581558059,
        "uid": 87799,
        "name": "xh39",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2143 \u3010[JSOI2010]\u5de8\u989d\u5956\u91d1\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u94fe\u63a5](http://ljf-cnyali.cn/2019/05/24/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0/)\n\n## \u5b9a\u7406\n\n\u9996\u5148\u5f15\u5165\u51e0\u4e2a\u5b9a\u7406\n\n- \u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u6700\u5c0f\u751f\u6210\u6811$A,B$(\u8fd9\u91cc\u7684\u4e0d\u540c\u6307\u4e25\u683c\u610f\u4e49\u4e0b\u7684\u8fb9\u4e0d\u540c)\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\uff0c$A,B$\u6240\u62e5\u6709\u7684\u4e2a\u6570\u76f8\u7b49\n- \u53ea\u8fde\u63a5\u957f\u5ea6$\\leq w$\u7684\u8fb9\uff0c$A,B$\u8fde\u901a\u6027\u76f8\u540c\n\n\u8bc1\u660e\u7565\n\n## \u601d\u8def\n\n\u6839\u636e\u8fd9\u51e0\u4e2a\u5b9a\u7406\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u601d\u8def\n\n- \u5c06\u8fb9\u957f$w_i$\u79bb\u6563\u5316\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u6765\u8bf4\u53ea\u9700\u8003\u8651\u5927\u5c0f\u5173\u7cfb\n- \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811$A$\uff0c\u8bb0\u5f55\u957f\u5ea6$w_i$\u7684\u8fb9\u4f7f\u7528\u7684\u6b21\u6570$cnt[w_i]$\n- \u8003\u8651Kruscal\u7b97\u6cd5\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u6bcf\u6b21\u52a0\u8fb9\u6765\u8054\u901a\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u6240\u4ee5\u5047\u8bbe\u5f53\u524d\u8003\u8651\u5230\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u66b4\u641c\u8003\u8651\u52a0\u8fb9\u7684\u65b9\u6848\u6570\n- \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\n\n```cpp\n// luogu-judger-enable-o2\n/***************************************************************\n    File name: P2143.cpp\n    Author: ljfcnyali\n    Create time: 2019\u5e7405\u670824\u65e5 \u661f\u671f\u4e94 08\u65f638\u520649\u79d2\n***************************************************************/\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) \n#define mem(a) memset ( (a), 0, sizeof ( a ) ) \n#define str(a) strlen ( a ) \n\nconst int maxn = 2010;\nconst int INF = 0x3f3f3f3f;\nconst int Mod = 31011;\n\nstruct node\n{\n    int u, v, w;\n} a[maxn];\n\nint n, m, f[maxn], cnt[maxn], sum, ans, W;\n\ninline int cha(int x)\n{\n    return f[x] == x ? x : cha(f[x]);\n}\n\ninline int cmp(node x, node y)\n{\n    return x.w < y.w;\n}\n\ninline void Kruscal()\n{\n    ans = sum = 0;\n    REP(i, 1, m)\n    {\n        int fx = cha(a[i].u), fy = cha(a[i].v);\n        if ( fx != fy ) \n        {\n            f[fx] = fy; cnt[a[i].w] ++; ++ sum;\n//\t\t\tprintf(\"%d %d %d\\n\", a[i].u, a[i].v, a[i].w);\n        }\n        if ( sum == n - 1 ) { ans = 1; return ; }\n    }\n}\n\ninline int dfs(int x, int w, int s)\n{\n    if ( s == cnt[w] ) return 1;\t\n    if ( a[x].w != w ) return 0;\n    int fx = cha(a[x].u), fy = cha(a[x].v), sum = 0;\n    if ( fx != fy ) { f[fx] = fy; sum = dfs(x + 1, w, s + 1); f[fx] = fx; }\n    return sum + dfs(x + 1, w, s);\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n        mem(a); mem(cnt); W = 1; REP(i, 1, n) f[i] = i;\n        REP(i, 1, m) scanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].w);\n        sort ( a + 1, a + m + 1, cmp ); a[m + 1].w = INF;\n        REP(i, 1, m)\n        {\n            if ( a[i].w != a[i + 1].w ) a[i].w = W ++;\n            else a[i].w = W;\n        }\n        Kruscal();\n        if ( ans == 0 ) { printf(\"0\\n\"); continue ; }\n        REP(i, 1, n) f[i] = i;\n        REP(i, 1, m)\n        {\n            if ( !cnt[a[i].w] || a[i - 1].w == a[i].w ) continue ;\n            sum = dfs(i, a[i].w, 0);\n            ans = (ans * sum) % Mod;\n            for ( int j = i; j; ++ j )\n            {\n                if ( a[j].w != a[i].w ) break ;\n                int fx = cha(a[j].u), fy = cha(a[j].v);\n                if ( fx != fy ) f[fx] = fy;\n            }\n        }\n        printf(\"%d\\n\", ans);\n    return 0;\n}",
        "postTime": 1561342285,
        "uid": 8618,
        "name": "\u6c34\u5e93\u4e2d\u7684\u6c34\u5e93",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2143 \u3010[JSOI2010]\u5de8\u989d\u5956\u91d1\u3011"
    }
]