[
    {
        "content": "## bitset\u4f5c\u4e3aC++\u4e00\u4e2a\u975e\u5e38\u597d\u7528\u7684STL\uff0c\u5728\u4e00\u4e9b\u9898\u76ee\u4e2d\u5de7\u5999\u5730\u4f7f\u7528\u4f1a\u4ea7\u751f\u975e\u5e38\u4e0d\u9519\u7684\u6548\u679c\u3002\u4eca\u5929\u6276\u82cf\u6765\u5206\u4eab\u4e00\u70b9bitset\u7684\u57fa\u7840\u8bed\u6cd5\u548c\u5e94\u7528\n\n\u672c\u6587\u540c\u6b65\u53d1\u5e03\u4e8e[\u4e2a\u4eba\u5176\u4ed6\u535a\u5ba2](https://www.cnblogs.com/yifusuyi/p/10072729.html)\uff0c\u540c\u65f6\u4f5c\u4e3aP3674\u9898\u89e3\u53d1\u5e03\u3002\n\n\u672c\u6587\u611f\u8c22@[burnside](https://www.luogu.org/space/show?uid=64500)\u548c@[ddosvoid](https://www.luogu.org/space/show?uid=34531)\u795e\u4ed9\u5e2e\u52a9\u5ba1\u7a3f\u3002\n\n##### 2019\u5e7402\u670814\u65e5upd\uff1a\n\n\u611f\u8c22 @[Ender_zzm](https://www.luogu.org/space/show?uid=33339) \u795e\u4ed9\u4ee5\u53ca @[Thomasguo666](https://www.luogu.org/space/show?uid=107935) \u795e\u4ed9\u5206\u522b\u6307\u51fa\u6587\u7ae0\u53ca\u4ee3\u7801\u4e2d\u7684\u4e24\u5904\u9519\u8bef\uff0c\u73b0\u5728\u5df2\u7ecf\u4fee\u6539\u5b8c\u6bd5\u3002\n\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u5185\u5bb9\u5747\u6309\u7167C++98\u8bed\u6cd5\u4e66\u5199\uff0c\u53ef\u4ee5\u5728C++98\u4e0b\u7f16\u8bd1\u901a\u8fc7\u3002\n\nbitset\u662f\u4e00\u4e2a01\u4e32\uff0c\u6bcf\u4e00\u4f4d\u5360\u4e00\u4e2abit\uff0c\u53ef\u4ee5\u8fdb\u884c\u5355\u70b90/1\u4fee\u6539\uff0c\u5de6\u79fb\u53f3\u79fb\u4ee5\u53ca\u6309\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u3002\u4e00\u4e2a\u975e\u5e38\u597d\u7528\u7684\u7528\u6cd5\u662f\u7edf\u8ba1\u67d0\u4e2a\u6570\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u6876\u3002\u540c\u65f6\u4e24\u4e2abitset\u53d6\u6216\u53ef\u4ee5\u5728\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u4e0b\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\u7684\u4fe1\u606f\u3002\n\n\u53e6\u5916\u7531\u4e8e\u4e00\u4e2abitset\u4e2d\u6bcf\u4e00\u4f4d\u662f\u4e00\u4e2abit\uff0cbitset\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u6bd4\u4f7f\u7528\u6876\u5b58\u50a8\u4fe1\u606f\u4f18\u79c0\u3002\u5c06\u5728\u4e0b\u65b9\u8bf4\u660e\u3002\n\n(\u611f\u8c22@[\u5e3d\u5b50](https://www.luogu.org/space/show?uid=94690) \u6307\u51fa\uff0cbitset\u6bcf\u4e00\u4f4d\u5360\u4e00\u4e2abit\u800c\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\uff0c\u5df2\u7ecf\u4fee\u6539\u3002\u4e4b\u524d\u7b14\u8bef\u5341\u5206\u62b1\u6b49qwq)\n\n## \u58f0\u660e\u4e0e\u521d\u59cb\u5316\n\n\u4f7f\u7528bitset\u9700\u8981\u5f15\u7528``<bitset>``\u5934\u6587\u4ef6\u3002\n\n\u5176\u58f0\u660e\u65b9\u6cd5\u4e3a\n\n```cpp\nstd::bitset<N>s;\n```\n\n\u5176\u4e2dN\u4e3as\u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8es\u7684\u521d\u59cb\u5316\uff0c\u5f00\u5728\u5168\u5c40\u9ed8\u8ba4\u4e3a\u51680\u3002\u5982\u679c\u5f00\u5728\u5c40\u90e8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684reset\u51fd\u6570\u7f6e\u96f6\u3002\n\n\u540c\u65f6bitset\u8d44\u74f7\u4ee5\u4e0b\u8d4b\u503c\u59ff\u52bf\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540c\u957f\u5ea6\u7684std::string\u578b01\u4e32\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\uff0cbitset\u5185\u90e8\u4e0estring\u5bf9\u5e94\u4f4d\u76f8\u540c\uff1a\n\n```cpp\n// The default is that N is 8.\nstd::bitset<N> s (std::string(\"00110101\"));\n```\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u96c6\u5408\u5185\u90e8\u7684\u4e0b\u6807\u662f**\u4ece\u53f3\u5411\u5de6**\u5355\u8c03\u9012\u589e\u7684\uff0c\u5373\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4f4d\u4ee3\u8868set\u7684\u7b2c7\u4f4d(\u4ece0\u7f16\u53f7)\u3002\u4e0a\u9762\u7684\u8d4b\u503c\u65b9\u6cd5\u5bf9\u5e94s\u7684\u503c\u5982\u4e0b\u8868\uff1a\n\n![qwq](https://cdn.luogu.com.cn/upload/pic/45346.png )\n\n\n\n## \u4fee\u6539\u4e0e\u8fd0\u7b97\n\nbitset\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u7684\u65b9\u5f0f\u8bbf\u95ee\u3002\u4e00\u4e2a\u957f\u5ea6\u4e3a$N$\u7684bitset\u4e0b\u6807\u7f16\u53f7\u4e3a$[0,N)$\u3002\n\n\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u65f6\uff0c\u76f4\u63a5\u8bbf\u95ee\u4f4d\u7f6e\u7136\u540e\u8d4b\u503c\u5373\u53ef\uff1a\n\n```cpp\ns[pos] = x;\n```\n\n\u5355\u70b9\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a$O(1)$\u3002\n\n\u5de6\u79fb\u53f3\u79fb\u7684\u5199\u6cd5\u4e0e\u6574\u5f62\u7c7b\u4f3c\uff0c\u79fb\u52a8\u540e\u8fd4\u56de\u4e00\u4e2abitset\uff0c\u4f8b\u5982\u5de6\u79fb$x$\u4f4d\uff1a\n\n```cpp\nstd::bitset<N> k = s << x;\n```\n\n\u540c\u65f6\u8d44\u74f7<<=\u548c>>=\u64cd\u4f5c\uff1a\n\n```cpp\ns <<= x;\n```\n\n\u5982\u679c\u5c06\u5b57\u957f\u653e\u5728RAM\u6a21\u578b\u4e2d\uff0c\u7ea6\u5b9a\u8ba1\u7b97\u673a\u5b57\u957f\u4e3a$w$\u7684\u8bdd\uff0c\u4e00\u6b21\u5de6\u53f3\u79fb\u7684\u590d\u6742\u5ea6\u4e3a $O(\\frac{N}{w})$\u3002\u5176\u4e2d\u572832\u4f4d\u7cfb\u7edf\u4e0a\uff0c $w~=~32$\uff0c64\u4f4d\u7cfb\u7edf\u4e0a $w~=~64$\u3002\u7531\u4e8ebitset\u7684\u7edd\u5927\u90e8\u5206\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u90fd\u4e3a $O(\\frac{N}{w})$ \u4ee5\u4e0b\u5185\u5bb9\u4e2d\uff0c\u82e5\u4e0d\u7279\u6b8a\u8bf4\u660e\uff0c\u5219\u9ed8\u8ba4\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u540c\u4e0a\u3002\n\n\u5982\u679c\u4ec5\u4ec5\u8003\u5bdf\u8fd0\u7b97\u91cf\u540c\u8f93\u5165\u89c4\u6a21\u7684\u589e\u957f\u5173\u7cfb\u6216\u4e0d\u5c06\u5b57\u957f\u7eb3\u5165RAM\u6a21\u578b\uff0c\u5219\u53ef\u8ba4\u4e3a\u4e00\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a $O(N)$\uff0c\u5e38\u6570\u4e3a $\\frac{1}{32}$ \u6216 $\\frac{1}{64}$\uff0c\u8fd9\u4e24\u79cd\u8bf4\u6cd5\u5728\u6587\u732e\u4e0a\u90fd\u6709\u51fa\u73b0\uff0c\u5728OI\u4e2d\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u8fd0\u7b97\u91cf\uff0c\u4e00\u822c\u4f7f\u7528\u7b2c\u4e00\u79cd\u8868\u8fbe\u65b9\u6cd5\u3002\u4ee5\u4e0b\u5185\u5bb9\u4e00\u5f8b\u4f7f\u7528 $O(\\frac{N}{w})$ \u7684\u8868\u793a\u6cd5\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u56e0\u4e3a $w$ \u4f4d\u624d\u5360\u7528\u4e00\u4e2a\u6574\u5f62\u957f\u5ea6\uff0c\u6240\u4ee5bitset\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{N}{w})$\u3002\n\n\u540c\u65f6bitset\u8d44\u74f7\u4e8c\u5143\u6309\u4f4d\u8fd0\u7b97\uff0c\u5373\u8d44\u74f7\u4e0e\u3001\u6216\u3001\u5f02\u6216\u4e09\u4e2a\u8fd0\u7b97\u7b26\uff1a\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2abitset\u3002\u7ed3\u679c\u4e3a\u8fd0\u7b97\u7b26\u4e24\u4fa7\u7684bitset\u6309\u4f4d\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\n\n```cpp\nstd::bitset<N> k = s & s0;\n```\n\n## \u8f93\u5165\u8f93\u51fa\u4e0e\u8f6c\u6362\n\nbitset\u91cd\u8f7d\u4e86<<\u548c>>\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u53ef\u4ee5\u4f7f\u7528std::cin\u548cstd::cout\u6765\u8bfb\u5165\u548c\u8f93\u51fa\u4e00\u4e2abitset\u7684\u6240\u6709\u5143\u7d20\u3002\n\n\u5f53\u8bfb\u5165\u7684\u957f\u5ea6\u5c0f\u4e8ebitset\u7684\u4f4d\u6570\u65f6\uff0c\u4f1a\u4ece\u7b2c0\u4f4d\u5f00\u59cb\u8d4b\u503c\u76f4\u5230\u5b57\u7b26\u4e32\u7ed3\u675f\u3002\u5f53\u8bfb\u5165\u957f\u5ea6\u5927\u4e8ebitset\u7684\u4f4d\u6570\u65f6\uff0c\u5728\u6276\u82cf\u7684MinGW\u7f16\u8bd1\u5668\u4e0a\u4f1a\u622a\u53d6\u524d\u3010\u4f4d\u6570\u3011\u4e2a\u8fdb\u884c\u8d4b\u503c\u3002\u672a\u5c1d\u8bd5\u8fc7\u5728\u5176\u4ed6\u73af\u5883\u4e0b\u7684\u7ed3\u679c\u3002\n\n\u6ce8\u610f\uff0c\u8f93\u51fa\u65f6bitset\u662f\u53cd\u7740\u8f93\u51fa\u7684\uff0c\u5373\u7b2c0\u4f4d\u662f**\u4ece\u53f3\u5411\u5de6**\u6570\u7b2c1\u4e2a\uff1a\n\n```cpp\nstd::cin >> s;\t\t\t\t\t\t\t// 1101\nstd::cout << s << std::endl;\t\t\t// 000001101\n```\n\n\u4ece\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7b2c\u3010\u957f\u5ea6\u3011\u4f4d\u662f\u96c6\u5408\u7684\u7b2c1\u4f4d\u3002\u6ce8\u610f\u4e8b\u9879\u548c\u4f7f\u7528std::string\u8fdb\u884c\u521d\u59cb\u5316\u7684\u4e00\u81f4\u3002\n\nbitset\u63d0\u4f9b\u4e24\u4e2a\u8f6c\u6362\u51fd\u6570\uff0c\u53ef\u4ee5\u8f6c\u6362\u4e3astd::string\u578b\uff0cunsigned long int\u578b\uff08\u5373unsigned int\uff09\u3002\u51fd\u6570\u540d\u4e3a\u522b\u4e3ato_string()\u548cto_ulong();\n\n\u5728**C++11\u6807\u51c6\u4e0b**\u53ef\u4ee5\u8f6c\u6362\u4e3aunsigned long long int\u578b\uff0c\u51fd\u6570\u540d\u4e3a`to_ullong()`\n\n\u5176\u4e2d\u8f6c\u6362\u6210std::string\u578b\u4f1a\u8f6c\u6362\u621001\u4e32\uff0c\u5176\u4ed6\u4e24\u4e2a\u7c7b\u578b\u4f1a\u6309\u7167\u4e8c\u8fdb\u5236\u4f4d\u8f6c\u6362\u6210\u5341\u8fdb\u5236\u6570\u5b57\u3002\n\n\u5f53bitset\u5927\u5c0f\u5927\u4e8e32\u4f4d\u65f6\uff0c\u8f6c\u6362\u6210unsigned long int\u4f1a\u5bfc\u81f4RE\uff0c\u5927\u4e8e64\u4f4d\u65f6\uff0c\u8f6c\u6362\u6210unsigned long long int\u4f1a\u4ea7\u751fRE\uff1a\n\n```cpp\n// The default is that N is 8.\ns.reset();\ns[2] = true;\nunsigned int s1 = s.to_ulong();\nstd::cout << s1 << std::endl;\t\t\t\t\t//4\nunsigned long long int s2 = s.to_ullong();\t\t//C++11\nstd::cout << s2 << std::endl;\t\t\t\t\t//4\nstd::string ss = s.to_string();\t\t\t\t\t\nstd::cout << ss << std::endl;\t\t\t\t\t//00000100\n```\n\n\n\n## \u6210\u5458\u51fd\u6570\n\n### reset\n\nbitset\u7684\u6e05\u7a7a\u64cd\u4f5c\u4e3areset\u3002\u5c06\u96c6\u5408\u5185\u5143\u7d20\u5168\u90e8\u7f6e\u96f6\uff1a\n\n```cpp\ns.reset();\n```\n\n#### set\n\nset\u6709\u4e24\u79cd\u7528\u6cd5\uff0c\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u8c03\u7528set\u4e0d\u5e26\u53c2\u6570\uff0c\u4f1a\u5c06bitset\u5185\u6240\u6709\u5143\u7d20\u7f6e1\uff0c\u53e6\u4e00\u79cd\u662fset\u540e\u52a0\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662fpos\u548cval\uff0c\u610f\u4e3a\u5c06bitset\u4e2d\u7b2cpos\u4e2a\u5143\u7d20\u7684\u503c\u7f6e\u4e3av\u3002\u5f53v\u4e3atrue\u65f6\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\u3002\n\n```cpp\ns.reset();\ns.set()\t\t\t\t//11111111\ns.set(3,false)\t\t//11110111\ns.set(3)\t\t\t//11111111\n```\n\n\u4f7f\u7528set\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a $O(1)$, \u5c06\u6240\u6709\u5143\u7d20\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a $O(\\frac{n}{w})$\n\n### test\n\ntest\u6709\u4e00\u4e2a\u53c2\u6570pos\uff0c\u8fd4\u56de\u4e00\u4e2abitset\u5185\u7b2cpos\u4f4d\u7684\u503c\u3002\n\n```cpp\ns.reset();\ns.set(7);\nint k = s.test(7);\t\t// k is true\nk = s.test(6);\t\t\t// k is false\n```\n\ntest\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(1)$\n\n### any\n\nbitset\u6709\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u4e3aany\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u91cf\u3002\u82e5bitset\u5185\u90e8\u5b58\u5728\u4e00\u4f4d\u7684\u503c\u4e3a1\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\uff1a\n\n```cpp\ns.clear();\nbool k = s.any();\t\t\t//k is false\ns[1] = true;\nk = s.any()\t\t\t\t\t//k is true\n```\n\n\u590d\u6742\u5ea6\u540c\u4e0a\u3002\u6309\u7167\u4e0d\u540c\u7f16\u8bd1\u5668\u7248\u672c\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c.any()\u7684\u5e38\u6570\u751a\u81f3\u6709\u53ef\u80fd\u5c0f\u4e8e\u7406\u8bba\u503c\u3002\n\n### none\n\n\u4e0eany\u76f8\u5bf9\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u91cf\uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\u4e3a1\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n\n```cpp\ns.clear();\nbool k = s.none();\t\t\t//k is true\ns[1] = true;\nk = s.none()\t\t\t\t//k is false\n```\n\n### count\n\ncount\u8fd4\u56de\u4e00\u4e2abitset\u51851\u7684\u4e2a\u6570\uff0c\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u5f62\uff1a\n\n```cpp\ns.reset();\nint k = s.count();\t\t\t\t// k is 0\t\t\t\t\t\ns[1] = true;\nk = s.count();\t\t\t\t\t// k is 1\n```\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u76ee\u524d\u6276\u82cf\u5df2\u77e5\u7684\u8d44\u6599\u4e2d\uff0ccount\u7684\u590d\u6742\u5ea6\u4e5f\u662f $O(\\frac{N}{w})$ \u3002\n\n\u5f53\u7136\u60f3\u77e5\u90530\u7684\u4e2a\u6570\u53ef\u4ee5\u7528\u603b\u957f\u5ea6\u51cf\u53bbcount\u55bd\n\n### flip\n\nflip\u51fd\u6570\u7c7b\u4f3c\u4e8e\u6309\u4f4d\u53d6\u53cd\uff0c\u5b83\u7684\u4e24\u4e2a\u58f0\u660e\u5982\u4e0b\uff1a\n\n```cpp\nbitset& flip();\nbitset& flip (size_t pos);\n```\n\n\u5f53\u8c03\u7528s.flip()\u4e14\u62ec\u53f7\u5185\u65e0\u53c2\u6570\u65f6\uff0c\u4f1a\u5c06\u96c6\u5408\u5185\u6240\u6709\u5143\u7d20\u53d6\u53cd\uff080\u53d81,1\u53d80\uff09\n\n\u5f53\u8c03\u7528s.flip(x)\u65f6\uff0c\u4f1a\u5c06\u7b2cx\u4f4d\u53d6\u53cd(\u4ece0\u7f16\u53f7)\n\n```cpp\ns.reset();\ns[1] = true;\t//s is \"01000000\"\ns.flip();\t\t//s is \"10111111\"\ns.flip(1);\t\t//s is \"11111111\"\n```\n\n## \u624b\u5199\u4e00\u4e2abitset\n\n##### \u6ce8\u610f\uff0c\u4ee5\u4e0b\u624b\u5199bitset\u5185\u5bb9\u56e0\u4e3a\u65f6\u95f4\u7d27\u8feb\uff0c\u90e8\u5206\u51fd\u6570\u672a\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u7ecf\u6d4b\u8bd5\u4ec5\u4ec5A\u6389[P3674 \u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f](https://www.luogu.org/problemnew/show/P3674)\u3002\u5982\u679c\u60a8\u53d1\u73b0\u4ee3\u7801\u9519\u8bef\u8bf7\u5728\u8bc4\u8bba\u533a\u53d1\u8868\u8bc4\u8bba\u6216\u8005\u79c1\u4fe1\u8054\u7cfb@[\u4e00\u6276\u82cf\u4e00](https://www.luogu.org/space/show?uid=65363)\u3002\u5728\u6b64\u8868\u793a\u611f\u8c22qwq\n\nbitset\u7684\u8fc7\u5ea6\u5c01\u88c5\u5bfc\u81f4bitset\u7684\u4e00\u4e9b\u64cd\u4f5c\u4e0d\u80fd\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u6c42lowbit\u3002\u600e\u4e48\u529e\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u5199\u4e00\u4e2abitset\uff01\n\n\u4e00\u4e2abitset\u7684\u663e\u7136\u53ef\u4ee5\u7528\u4e00\u5806unsigned long long\u62fc\u6210\u7684\u6570\u7ec4\u5b9e\u73b0\uff0c\u4e00\u4e9b\u7b80\u5355\u7684\u4f4d\u8fd0\u7b97\u548c\u6210\u5458\u51fd\u6570\u5b9e\u73b0\u5341\u5206\u7b80\u5355\uff0c\u4f1a\u5728\u4e0b\u65b9\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u5de6\u79fb\u548c\u53f3\u79fb\u600e\u4e48\u5b9e\u73b0\u3002\n\n\u4ee5\u4e0b\u4e0d\u59a8\u8bbebitset\u5b57\u957fBitNum\u4e3a64\u3002\n\n\u4e0d\u59a8\u8bbe\u8fdb\u884c\u5de6\u79fb\uff0c\u5982\u679c\u5de6\u79fb\u4f4d\u6570v\u5c0f\u4e8e64\uff0c\u90a3\u4e48\u53ef\u4ee5\u5355\u4e2a\u6570\u5b57\u76f4\u63a5\u79fb\u52a8\uff0c\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u79fb\u52a8\u7684\u90e8\u5206\uff0c\u5c31\u662f\u5de6\u4fa7\u6570\u5b57\u7684\u6700\u9ad8v\u4f4d\u6210\u4e3a\u4e86\u53f3\u4fa7\u6570\u5b57\u7684\u6700\u4f4ev\u4f4d\uff0c\u4e8e\u662f\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u6700\u9ad8\u7684v\u4f4d\u5c31\u53ef\u4ee5\u8fed\u4ee3\u4e86\u3002\n\n\u8003\u8651\u5de6\u79fb\u4f4d\u6570\u5927\u4e8e64\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e\u5148\u6574\u4e2a\u6570\u7ec4\u5de6\u79fb $\\frac{v}{BitNum}$ \u4f4d\u7f6e\uff0c\u7136\u540e\u505a\u6a21\u610f\u4e49\u4e0b\u7684\u79fb\u52a8\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u4ec5\u4ec5\u8fd9\u4e48\u505a\u7684\u8bdd\uff0c\u56e0\u4e3a\u6211\u4eec\u7684bitset\u4e0d\u4e00\u5b9a\u662f\u4e25\u683c\u3010\u4f4d\u6570\u3011\u957f\u5ea6\u7684\uff0c\u53ef\u80fd\u4e00\u4e2a\u6570\u5b57\u5de6\u79fb\u4ee5\u540e\u518d\u53f3\u79fb\u4f1a\u7206\u70b8\u3002\u6bd4\u5982\u4e00\u4e2a\u957f\u5ea6\u4e3a $3$ \u7684\u4e8c\u8fdb\u5236\u4e32 $s~=~111$ \uff0c\u5bf9 $s$ \u5148\u5de6\u79fb\u4e00\u4f4d(110)\u518d\u53f3\u79fb\u4e00\u4f4d\u5e94\u8be5\u5f97\u5230011\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u5355\u4e2a\u5b57\u7b26\u4e00\u5b58\u5c31\u662f64\u4f4d\uff0c\u8fd9\u4e48\u505a\u4f1a\u8ba9\u7b54\u6848\u5f97\u5230111\u3002\u5177\u4f53\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6bcf\u6b21\u64cd\u4f5c\u7ed3\u675f\u4ee5\u540e\u628a\u6700\u9ad8\u4f4d\u5e94\u8be5\u662f $0$ \u7684\u4f4d\u7f6e\u5168\u90e8\u622a\u6389\u3002\n\n\u5177\u4f53\u4f4d\u79fb\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\n\n\u6ce8\u610f\u4ee3\u7801\u4e2d_Ary\u7684\u4e0b\u6807\u8d8a\u5927\u4ee3\u8868\u7684\u4e8c\u8fdb\u5236\u4f4d\u8d8a\u5c0f\u3002\u5373\\_Size-1\u7684\u4e0b\u6807\u4ee3\u8868\u4e8c\u8fdb\u5236\u4e32\u7684 $0~\\sim~63$ \u4f4d\uff0c\u4ee5\u6b64\u7c7b\u63a8\n\n```cpp\n    Bitset() {\t\t\t\t\t\t\t\t\t\t\t//constructed function of std::string is left out because i dont know how to implement it\n\t\tmemset(_Ary, 0, sizeof _Ary);\n\t\tint _firstsize = _len % _BitNum;\n\t\tfor (register int i = 0; i < _firstsize; ++i) _upceil |= 1ull << i;\n\t\tif (!_firstsize) _upceil = _INF;\n\t}\n    \n    void reset() {*this = Bitset();}\n                                                        //operators\n                                                        \n    void rtmve(const int &_v) {\n        for (register int i = _Size - 1; i >= _v; --i) this->_Ary[i] = this->_Ary[i - _v];\n        for (register int i = _v - 1; ~i; --i) this->_Ary[i] = 0;\n    }\n    \n    void lftmve(const int &_v) {\n        for (register int i = 0; (i + _v) < _Size; ++i) this->_Ary[i] = this->_Ary[i + _v];\n        for (register int i = _Size - _v; i < _Size; ++i) this->_Ary[i] = 0;\n    }\n    \n    Bitset& operator<<=(int _v) {\n        if (_v < 0) {\n            *this >>= -_v;\n            return *this;\n        }\n        this->lftmve(_v / _BitNum);\n        _v %= _BitNum;\n        ull _tp = 0, _Pos = _BitNum - _v;\n        for (register int  i = 1; i <= _v; ++i) _tp |= 1ull << (_BitNum - i);\n        ull _Lstv = 0;\n        for (register int i = _Size - 1; ~i; --i) {\n            ull _Tp_Lstv = (_Ary[i] & _tp) >> _Pos;\n            _Ary[i] <<= _v;\n            _Ary[i] |= _Lstv;\n            _Lstv = _Tp_Lstv;\n        }\n        this->_Ary[0] &= _upceil;\t\t\t// cut off redundant digit\n        return *this;\n    }\n    \n    Bitset& operator>>=(int _v) {\n        if (_v < 0) {\n            *this <<= -_v;\n            return *this;\n        }\n        this->rtmve(_v / _BitNum);\n        _v %= _BitNum;\n        ull _tp = (1ull << _v)- 1;\n        ull _Lstv = 0, __Pos = _BitNum - _v;\n        for (register int i = 0; i < _Size; ++i) {\n            ull _Tp_Lstv = (_Ary[i] & _tp) << __Pos;\n            _Ary[i] >>= _v;\n            _Ary[i] |= _Lstv;\n            _Lstv = _Tp_Lstv;\n        }\n        this->_Ary[0] &= _upceil;\t\t\t//// cut off redundant digit\n        return *this;\n    }\n```\n\n\u8003\u8651set\u548ctest\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4f4d\u8fd9\u4e00\u4f4d\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6309\u7167\u4e0a\u9762\u6240\u8ff0\u7684\u65b9\u6cd5\u5b58\u4e8c\u8fdb\u5236\u4e32\u7684\u8bdd\uff0c\u7b2c\u4e8c\u8fdb\u5236\u4e32\u7b2cv\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u5bf9\u5e94\u7684\u6570\u7ec4\u4f4d\u7f6e\\__Pos\u548c\u8fd9\u4e00\u4e2a\u6570\u4e0a\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\\_v\u5e94\u8be5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u5bfb\u627e\n\n```cpp\n\tinline void __GetPos(const ull &_pos, int &__Pos, int &_v) {\n\t\t__Pos = _Size - _pos / _BitNum - 1;\n\t\t_v = _pos % _BitNum;\n\t}\n```\n\n\u8003\u8651\u6211\u4eec\u5982\u4f55\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\uff1a\u5982\u679c\u4fee\u6539\u4e3atrue\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4e0e1ull<<v\u53d6\u6216\uff0c\u5982\u679c\u4fee\u6539\u4e3afalse\uff0c\u5219\u53ef\u4ee5\u5148\u4fee\u6539\u4e3atrue\uff0c\u7136\u540e\u4e0e1ull<<v\u53d6\u5f02\u6216\n\n```cpp\n\tvoid set(const ull &_pos, const bool val = true) {\n\t\tint __Pos , _v;\n\t\t__GetPos(_pos,__Pos,_v);\n\t\tif(val) {\n\t\t\tthis->_Ary[__Pos] |= (1ull << (_v));\n\t\t} else {\n\t\t\tthis->_Ary[__Pos] |= (1ull << (_v));\n\t\t\tthis->_Ary[__Pos] ^= (1ull << (_v));\n\t\t}\n\t}\n```\n\n\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u5f88\u7b80\u5355\u8fa3\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u8fd9\u4efd\u4ee3\u7801\u4e2d\u5b9e\u73b0\u4e86\u5927\u90e8\u5206bitset\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u5bf9\u5355\u4e2abit\u53d6\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u91cd\u8f7d[]\u8fd0\u7b97\u7b26\uff0c\u5bf9\u96c6\u5408\u7684\u4fee\u6539\u9700\u8981\u4f7f\u7528set\u548ctest\u51fd\u6570\u3002\n\n```cpp\n#define Fusu_Bitset\n\n#ifdef Fusu_Bitset\n#include <cstddef>              //size_t used\n#include <cstring>\n\n#include <string>\n#include <algorithm>\n\nnamespace Fusu {\n\ntemplate <size_t _len>\nstruct Bitset {\n    typedef long long int ll;\n    typedef unsigned long long int ull;\n    const static int _BitNum = 64;\n    const static int _Size = _len / _BitNum + ((_len % _BitNum) == 0 ? 0 : 1);\n    ull _Ary[_Size];\n    ull _upceil;\n    const static ull _INF = (1ull << 63) - 1 + (1ull << 63);\n    Bitset() {                                          //constructed function of std::string is left out because i dont know how to implement it\n        memset(_Ary, 0, sizeof _Ary);\n        int _firstsize = _len % _BitNum;\n        for (register int i = 0; i < _firstsize; ++i) _upceil |= 1ull << i;\n        if (!_firstsize) _upceil = _INF;\n    }\n\n    void reset() {*this = Bitset();}\n                                                        //operators\n\n    void rtmve(const int &_v) {\n        for (register int i = _Size - 1; i >= _v; --i) this->_Ary[i] = this->_Ary[i - _v];\n        for (register int i = _v - 1; ~i; --i) this->_Ary[i] = 0;\n    }\n\n    void lftmve(const int &_v) {\n        for (register int i = 0; (i + _v) < _Size; ++i) this->_Ary[i] = this->_Ary[i + _v];\n        for (register int i = _Size - _v; i < _Size; ++i) this->_Ary[i] = 0;\n    }\n\n    Bitset& operator<<=(int _v) {\n        if (_v < 0) {\n            *this >>= -_v;\n            return *this;\n        }\n        this->lftmve(_v / _BitNum);\n        _v %= _BitNum;\n        ull _tp = 0, _Pos = _BitNum - _v;\n        for (register int  i = 1; i <= _v; ++i) _tp |= 1ull << (_BitNum - i);\n        ull _Lstv = 0;\n        for (register int i = _Size - 1; ~i; --i) {\n            ull _Tp_Lstv = (_Ary[i] & _tp) >> _Pos;\n            _Ary[i] <<= _v;\n            _Ary[i] |= _Lstv;\n            _Lstv = _Tp_Lstv;\n        }\n        this->_Ary[0] &= _upceil;\n        return *this;\n    }\n\n    Bitset& operator>>=(int _v) {\n        if (_v < 0) {\n            *this <<= -_v;\n            return *this;\n        }\n        this->rtmve(_v / _BitNum);\n        _v %= _BitNum;\n        ull _tp = (1ull << _v)- 1;\n        ull _Lstv = 0, __Pos = _BitNum - _v;\n        for (register int i = 0; i < _Size; ++i) {\n            ull _Tp_Lstv = (_Ary[i] & _tp) << __Pos;\n            _Ary[i] >>= _v;\n            _Ary[i] |= _Lstv;\n            _Lstv = _Tp_Lstv;\n        }\n        this->_Ary[0] &= _upceil;\n        return *this;\n    }\n\n    Bitset operator&(const Bitset &_others) const {\n        Bitset _ret;\n        for (register int i = _Size - 1; ~i; --i) {\n            _ret._Ary[i] = this->_Ary[i] & _others._Ary[i];\n        }\n        return _ret;\n    }\n\n    Bitset operator|(const Bitset &_others) const {\n        Bitset _ret;\n        for (register int i = _Size - 1; ~i; --i) {\n            _ret._Ary[i] = this->_Ary[i] | _others._Ary[i];\n        }\n        return _ret;\n    }\n\n    Bitset operator^(const Bitset &_others) const {\n        Bitset _ret;\n        for (register int i = _Size - 1; ~i; --i) {\n            _ret._Ary[i] = this->_Ary[i] ^ _others._Ary[i];\n        }\n        return _ret;\n    }\n\n    Bitset operator~() const {\n        Bitset _ret;\n        for (register int i = _Size - 1; ~i; --i) {\n            _ret._Ary[i] = ~this->_Ary[i];\n        }\n        return _ret;\n    }\n\n    Bitset operator<<(const int &_v) const {\n        Bitset x = *this;\n        x <<= _v;\n        return x;\n    }\n\n    Bitset operator>>(const int &_v) const {\n        Bitset x = *this;\n        x >>= _v;\n        return x;\n    }\n\n                                                        //member functions\n    inline void __GetPos(const ull &_pos, int &__Pos, int &_v) {\n        __Pos = _Size - _pos / _BitNum - 1;\n        _v = _pos % _BitNum;\n    }\n\n    void set() {\n        for (register int i = 0; i < _Size; ++i) this->_Ary[i] = _INF;\n    }\n\n    void set(const ull &_pos, const bool val = true) {\n        int __Pos , _v;\n        __GetPos(_pos,__Pos,_v);\n        if (val) {\n            this->_Ary[__Pos] |= (1ull << (_v));\n        } else {\n            this->_Ary[__Pos] |= (1ull << (_v));\n            this->_Ary[__Pos] ^= (1ull << (_v));\n        }\n    }\n\n    int test(const ull &_pos) {\n        int __Pos , _v;\n        __GetPos(_pos,__Pos,_v);\n        return this->_Ary[__Pos] & (1ull << (_v)) ? 1 : 0;\n    }\n\n    bool any() {\n        for (register int i = _Size - 1; ~i; --i) if (this->_Ary[i]) return true;\n        return false;\n    }\n\n    bool none() {\n        return !this->any();\n    }\n\n    ull conut() {\n        ull _cnt = 0;\n        for (register int i = _Size - 1; ~i; --i) _cnt += __builtin_popcount(this->_Ary[i]);          \n        /*\n            *if u cant used double_underlined functions, \n            *u can set a val to maintain the num of true\n            *and change it in other operators which would change the num of true\n        */\n        return _cnt;\n    }\n\n    void flip() {\n        *(this) = ~(*this);\n    }\n\n    void flip(const ull &_pos) {\n        if(this->test(_pos)) this->set(_pos, false);\n        else this->set(_pos, true);\n    }\n\n                                                        //changing functions\n    std::string to_string() {\n        std::string _ret;\n        _ret.clear();\n        for (register int i = 0; i < _Size; ++i) {\n            for (register int j = _BitNum - 1; ~j; --j) _ret += (this->_Ary[i] & (1ull << j)) ? '1' : '0';\n        }\n        return _ret;\n    }\n\n    unsigned int to_ulong() {\n        return this->_Ary[_Size - 1];\n    }\n};\n}   //namespace\n#endif\n```\n\n## Samples\n\n[P1537\u5f39\u73e0](https://www.luogu.org/problemnew/show/P1537)\n\n\u8fd9\u662f\u975e\u5e38\u663e\u7136\u7684\u4e00\u4e2a\u5e03\u5c14\u80cc\u5305\u95ee\u9898\uff0c\u56e0\u4e3a\u6570\u636e\u89c4\u6a21\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u591a\u91cd\u80cc\u5305\u62c6\u5206\u621001\u80cc\u5305\u505a\u3002\n\n\u8003\u8651\u6734\u7d20\u7684\u505a\u6cd5\u663e\u7136\u662f\u8bbe$f_{i,j}$\u4e3a\u524d$i$\u4e2a\u4e2d\uff0c\u7b2c$j$\u7684\u4ef7\u503c\u80fd\u5426\u62fc\u51fa\u6765\uff0c\u8f6c\u79fb\u65b9\u7a0b\u663e\u7136\uff1a\n\n$$f_{i,j}~|=~f_{i-1,j-w_i}$$\n\n\u590d\u6742\u5ea6 $O(n\\sum~w_i)$ \uff0c\u8003\u8651\u53ef\u4ee5\u6eda\u52a8\u6389\u7b2c\u4e00\u7ef4\uff0c\u7136\u540e\u8003\u5bdf\u8f6c\u79fb\uff0c\u5b9e\u8d28\u4e0a\u662f\u5c06\u539f\u6570\u7ec4\u768401\u4e32\u5de6\u79fb\u4e86$w_i$\u4f4d\u4e0e\u539f\u4e32\u53d6\u6216\u3002\n\n\u4e8e\u662f\u5982\u679c\u8bbe$f$\u662f\u4e00\u4e2abitset\uff0c\u5219\u8f6c\u79fb\u53ef\u4ee5\u5199\u6210\n\n$$f_j~|=f_{j}~<<~w_i$$\n\n\u590d\u6742\u5ea6 $O(n~\\sum~w_i~\\times~\\frac{1}{w})$\uff0c\u5b9e\u9645\u6548\u7387\u5341\u5206\u4f18\u79c0\u3002\n\n\u4f7f\u7528bitset\u4f18\u531601bool\u80cc\u5305\u7684\u8f6c\u79fb\u662fbitset\u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u7528\u6cd5\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <bitset>\n#include <iostream>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\ntemplate <typename T>\ninline void ReadDb(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch = IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = x * 10 + (ch ^ 48), ch = IPT::GetChar();\n\tif (ch == '.') {\n\t\tch = IPT::GetChar();\n\t\tdouble base = 1;\n\t\twhile ((ch >= '0') && (ch <= '9')) x += (ch ^ 48) * ((base *= 0.1)), ch = IPT::GetChar();\n\t}\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = x % 10 + '0';} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 7;\nconst int maxt = 20010;\n\nint MU[maxn], kase;\nstd::bitset<maxt>frog;\n\nvoid clear();\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\twhile (true) {\n\t\tclear();\n\t\tfor (rg int i = 1; i < 7; ++i) qr(MU[i]);\n\t\tint sum = 0;\n\t\tfor (rg int i = 1; i < 7; ++i) sum += MU[i] * i;\n\t\tif (!sum) return 0;\n\t\tprintf(\"Collection #%d:\\n\", ++kase);\n\t\tif (sum & 1) {\n\t\t\tputs(\"Can't be divided.\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tfrog.set(0);\n\t\tfor (rg int i = 1; i < 7; ++i) {\n\t\t\tfor (rg int j = 1; j <= MU[i]; ++j)\n\t\t\t\tfrog |= (frog <<  i);\n\t\t}\n\t\tif (frog.test(sum >> 1)) puts(\"Can be divided.\\n\");\n\t\telse puts(\"Can't be divided.\\n\");\n\t}\n\treturn 0;\n}\n\nvoid clear() {\n\tfrog.reset();\n\tmemset(MU, 0, sizeof MU);\n}\n```\n\n\n\n[P5020 \u8d27\u5e01\u7cfb\u7edf](https://www.luogu.org/problemnew/show/P5020)\n\n\u65e2\u7136bitset\u53ef\u4ee5\u4f18\u531601\u80cc\u5305\uff0c\u90a3\u4e48\u53ef\u4e0d\u53ef\u4ee5\u4f18\u5316\u5b8c\u5168\u80cc\u5305\u5462\uff1f\u4e8b\u5b9e\u4e0a\u5b8c\u5168\u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u8fd9\u9053\u9898\u3002\n\n\u672c\u9898\u662f\u4e00\u4e2abool\u5b8c\u5168\u80cc\u5305\u7684\u9012\u63a8\uff0c\u4e0d\u4f1a\u505a\u8bf7\u53f3\u8f6c\u9898\u89e3\u533a\u3002\u8003\u8651\u8fd9\u9898\u5e03\u5c14\u80cc\u5305\u7684\u6734\u7d20\u8f6c\u79fb $O(n~\\times~\\max\\{a_i\\})$ \u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7bitset\u6765**\u964d\u4f4e\u8fd0\u7b97\u91cf**\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4f4d\u7f6e$x$\u80fd\u88ab\u8868\u793a\u51fa\u6765\u5f53\u4e14\u4ec5\u5f53 $f_{x-k~\\times~a_i}~= true$ \uff0c\u5176\u4e2d$f$\u4e3a\u5e03\u5c14\u6570\u7ec4\u3002\u5373 $f_x~|=~f_{x-k~\\times~a_i}$ \u3002\u6211\u4eec\u7528bitset\u6765\u4f5c\u4e3a\u8fd9\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u4e8e\u662f\u53d1\u73b0\u4e0a\u5f0f\u7b49\u4ef7\u4e8e $f~|=~f~<<(k~\\times~a_i)$ \u3002\u679a\u4e3e\u4e00\u4e0b $k$ \u5373\u53ef\u8f6c\u79fb\u3002\n\n\u63a5\u7740\u53d1\u73b0\u5f53 $k~=~3$ \u65f6\u7684\u7ed3\u679c\u7b49\u4ef7\u4e8e $k~=~1$ \u518d $k~=~2$ \u7684\u7ed3\u679c\u53e0\u52a0\uff0c\u4e8e\u662f $3$ \u662f\u4e0d\u9700\u8981\u679a\u4e3e\u7684\u3002$k~=~5$ \u65f6\u7684\u7ed3\u679c\u4e0e $k~=~1$ \u518d $k~=~4$ \u7684\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u679a\u4e3e\u3002\u540c\u7406\u53ef\u4ee5\u53d1\u73b0\u975e\u4e8c\u7684\u5e42\u6b21\u7684 $k$ \u90fd\u4e0d\u9700\u8981\u679a\u4e3e\uff0c\u4e8e\u662f\u53ef\u4ee5\u53ea\u679a\u4e3e $2$ \u7684\u5e42\u6b21\u3002\n\n\u4e8b\u5b9e\u4e0a\u4e0a\u8ff0\u679a\u4e3e\u65b9\u6cd5\u76f8\u5f53\u4e8e\u6b63\u7740\u505aDP\u5e76\u4e14\u5bf9\u7269\u54c1\u4e2a\u6570\u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\n\n\u8003\u8651\u590d\u6742\u5ea6\uff0c\u4e00\u5171\u679a\u4e3e $n$ \u4e2a\u503c\uff0c\u6bcf\u6b21\u679a\u4e3e\u4ece $a_i$ \u9010\u6b21\u4e58\u4e8c\u5230 $\\max\\{a_i\\}$ \uff0c\u4e00\u5171\u4e58 $\\log (\\max\\{a_i\\})$ \u6b21\u3002\u4e00\u6b21bitset\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a $O(\\frac{\\max\\{a_i\\}}{w})$ \uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(n~\\max\\{a_i\\}~\\log (\\max\\{a_i\\})~\\times~\\frac{1}{w})$\u3002\u5b9e\u9645\u8fd0\u7b97\u91cf\u4e0d\u589e\u53cd\u964d\u3002\n\n#### Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <bitset>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = x % 10 + '0';} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 110;\nconst int maxt = 25010;\n\nint t,n;\nint MU[maxn];\nstd::bitset<maxt>s;\n\nvoid clear();\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(t);\n\twhile(t--) {\n\t\tclear();\n\t\tqr(n);\n\t\tfor (rg int i = 1; i <= n; ++i) qr(MU[i]);\n\t\tstd::sort(MU + 1, MU + 1 + n);\n\t\ts[0] = true;\n\t\trg int ans = 0;\n\t\tfor (rg int i = 1; i <= n; ++i) if(!s[MU[i]]) {\n\t\t\t++ans;\n\t\t\tint x = MU[i];\n\t\t\twhile(x <= MU[n]) {\n\t\t\t\ts |= s << x;\n\t\t\t\tx <<= 1;\n\t\t\t}\n\t\t}\n\t\tqw(ans, '\\n' ,true);\n\t}\n\treturn 0;\n}\n\nvoid clear() {\n\tn = 0;\n\tmemset(MU, 0, sizeof MU);\n\ts.reset();\n}\n```\n\n[P3674 \u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f](https://www.luogu.org/problemnew/show/P3674)\n\n\u8fd9\u662f\u4e00\u4e2a\u6807\u51c6\u7684bieset\u9898\u76ee\u3002\n\n\u4e0d\u5e26\u4fee\u6539\uff0c\u8d44\u74f7\u79bb\u7ebf\uff0c~~\u800c\u4e14\u8fd8\u662fdllxl\u5927\u7237\u7684\u9898~~\uff0c\u4e8e\u662f\u8003\u8651\u4f7f\u7528\u83ab\u961f\u89e3\u51b3\u3002\n\n\u8003\u8651\u5728\u67e5\u8be2\u65f6\u5982\u4f55\u7ef4\u62a4\u7b54\u6848\uff1a\n\n\u5982\u679c\u5f53\u524d\u5e8f\u5217\u4e2d\n\n$$\\exists~a,b~~,~~s.t.~a~-~b~=~x$$\n\n\u79fb\u9879\u5f97\n\n$$a~=~x~+~b$$\n\n\u5373\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u540c\u65f6\u51fa\u73b0\u4e86\u4e00\u4e2a\u6570 $y$ \u548c $y~+~x$\u3002\n\n\u5373 $s[y]~=~true$ \u4e14 $s[y+x]~=~true$\n\n\u8fd9\u7b49\u4ef7\u4e8e $s~\\&~(s<<x)$ \u5b58\u5728\u4e00\u4e2a $1$\u3002\u4e8e\u662f\u7528bitset\u7ef4\u62a4\u51fa\u73b0\u7684\u6570\u5b57\u5373\u53ef\u3002\n\n\u8003\u8651\u52a0\u6cd5\uff1a\n\n\u82e5\n\n$$\\exists~a,b~~,~~s.t.~a~+~b~=~x$$\n\n\u6211\u4eec\u4ee4 $b'~=~N~-~b$\uff0c\u5176\u4e2d $N$ \u4e3a\u4e00\u4e2a\u5e38\u6570\uff0c\u5219\n\n$$a~+~b~=x$$\n\n$$\\Rightarrow~a~-~b'~=~a~-~(N~-~b)~=~a~+~b~-~n~=~x~-~N$$\n\n\u4e8e\u662f\u6309\u7167\u51cf\u6cd5\u7684\u65b9\u5f0f\uff0c\u518d\u7ef4\u62a4\u4e00\u4e2abitset\u8868\u793a $N - x$ \u662f\u5426\u51fa\u73b0\u5373\u53ef\u3002\n\n\u7531\u4e8ebitset\u4e0d\u80fd\u7ef4\u62a4\u8d1f\u6570\uff0c\u6211\u4eec\u53d6 $N$ \u4e3a\u503c\u57df\u7684\u4e0a\u9650\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e58\u6cd5\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u679a\u4e3e\u4e00\u4e2a\u6570\u7684\u56e0\u6570\u53ea\u9700\u8981 $O(\\sqrt{n})$ \uff0c\u4e8e\u662f\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u56e0\u6570\u5373\u53ef\u3002\n\n\u4e8e\u662f\u67e5\u8be2\u7684\u590d\u6742\u5ea6 $O(\\frac{nm}{w})$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n## Code\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <bitset>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n#define rg register\n#define ci const int\n#define cl const long long\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\ntemplate <typename T>\ninline void ReadDb(T &x) {\n\trg char ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch = IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = x * 10 + (ch ^ 48), ch = IPT::GetChar();\n\tif (ch == '.') {\n\t\tch = IPT::GetChar();\n\t\tdouble base = 1;\n\t\twhile ((ch >= '0') && (ch <= '9')) x += (ch ^ 48) * ((base *= 0.1)), ch = IPT::GetChar();\n\t}\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\trg int top=0;\n\tdo {OPT::buf[++top] = x % 10 + '0';} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 100010;\n\nstd::bitset<maxn>s1,s2;\n\nint n, m;\nint MU[maxn], belong[maxn], oc[maxn];\n\nstruct Ask {\n\tint opt, l, r, v, id;\n\tbool ans;\n\tinline bool operator<(const Ask &_others) const {\n\t\tif (belong[this->l] != belong[_others.l]) return this->l < _others.l;\n\t\tif (belong[this->l] & 1) return this->r < _others.r;\n\t\treturn this->r > _others.r;\n\t}\n};\nAsk ask[maxn];\ninline bool cmp(const Ask &_a,const Ask &_b) {\n\treturn _a.id < _b.id;\n}\n\nvoid add(int);\nvoid dlt(int);\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(n); qr(m);\n\tfor (rg int i = 1; i <= n; ++i) qr(MU[i]);\n\tfor (rg int i = 1; i <= m; ++i) {\n\t\tAsk &now = ask[i];\n\t\tqr(now.opt); qr(now.l); qr(now.r); qr(now.v); now.id = i;\n\t}\n\tfor (rg int i = 1, sn = sqrt(n); i <= n; ++i) belong[i] = i / sn;\n\tstd::sort(ask + 1, ask + 1 + m);\n\tint prel = ask[1].l, prer = prel - 1;\n\tfor (rg int  i = 1; i <= m; ++i) {\n\t\tint l = ask[i].l, r = ask[i].r;\n\t\twhile (prel < l) dlt(prel++);\n\t\twhile (prel > l) add(--prel);\n\t\twhile (prer < r) add(++prer);\n\t\twhile (prer > r) dlt(prer--);\n\t\tint op = ask[i].opt, x = ask[i].v;\n\t\tif (op == 1) {\n\t\t\task[i].ans = (s1 & (s1 << x)).any();\n\t\t} else if (op == 2) {\n\t\t\task[i].ans = (s1 & (s2 >> (n - x))).any();\n\t\t} else {\n\t\t\tfor (rg int j = 1; (j * j) <= x; ++j) if(!(x % j)) {\n\t\t\t\tif(s1[j] && s1[x / j]) {ask[i].ans = true; break;}\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(ask + 1, ask + 1 + m, cmp);\n\tfor (rg int i = 1; i <= m; ++i) puts(ask[i].ans ? \"hana\" : \"bi\");\n\treturn 0;\n}\n\ninline void add(int x) {\n\tx = MU[x];\n\tif (!(oc[x]++)) s1[x] = s2[n - x] = true;\n}\n\ninline void dlt(int x) {\n\tx = MU[x];\n\tif (!(--oc[x])) s1[x] = s2[n - x] = false;\n}\n```\n\n## Summary\n\nbitset\u662fC++\u4e2d\u5341\u5206\u7075\u6d3b\u7684\u4e00\u4e2aSTL\uff0c\u5728\u8bb8\u591a\u9898\u76ee\u4e2d\u53ef\u4ee5\u8d77\u5230\u4f18\u5316\u5e38\u6570\u4e43\u81f3\u590d\u6742\u5ea6\u3001\u964d\u4f4e\u4ee3\u7801\u96be\u5ea6\u7684\u6548\u679c\u3002\u4f60\u5b66\u4f1a\u4e86\u561b~",
        "postTime": 1544007770,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u6276\u82cf\u7684bitset\u6d45\u8c08"
    },
    {
        "content": " ![](https://cdn.luogu.com.cn/upload/pic/4666.png) \n\n\u8003\u8651\u5bf9\u4e8e\u51cf\u64cd\u4f5c\uff0c\u7528bitset\u6765\u7ef4\u62a4\u6bcf\u4e2a\u6570\u662f\u5426\u51fa\u73b0\u8fc7\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5O( c / 64 )\u7684\u67e5\u8be2\u533a\u95f4\u662f\u5426\u6709\u4e24\u4e2a\u6570\u5dee\u4e3ax\u4e86\uff0c\u5373\u5f97\u5230\u533a\u95f4\u7684bitset a\uff0c( a & ( a << x ) ).count()\n\n\u52a0\u64cd\u4f5c\u540c\u7406\uff0c\u7ef4\u62a4\u4e00\u4e2a\u53cd\u7684bitset\u5373\u53ef\n\n\u4e58\u64cd\u4f5c\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u5c0f\u7684\u56e0\u6570\uff0c\u662fO( sqrt( n ) )\u7684\n\n\u7528\u819c\u961f\u7ef4\u62a4\u533a\u95f4\u7684bitset\uff0c\u603b\u590d\u6742\u5ea6\u4e3aO( m( sqrt( n ) + c / 64 ) )\n\n\u5176\u5b9e\u9664\u4e5f\u53ef\u4ee5\u505a\u7684\u3002\u3002\u3002\u53ea\u662f\u4f3c\u4e4e\u6709\u70b9\u9ebb\u70e6\n",
        "postTime": 1489932399,
        "uid": 3296,
        "name": "noip",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u8bdd\u8bf4\u4e3a\u5565\u697c\u4e0b\u4e24\u4f4d\u5927\u4f6c\u5c31\u4e0d\u80fd\u8bf4\u7684\u6e05\u695a\u70b9\u4e48\u2026\u2026\u849f\u84bb\u7406\u89e3\u7684\u5f88\u8f9b\u82e6\u2026\u2026\u6211\u679c\u7136\u8fd8\u662f\u592a\u83dc\u4e86\u2026\u2026\n\n\u7531\u4e43tql\u2026\u2026zcytql\u2026\u2026\n\n\u6211\u4eec\u8003\u8651\u628a\u8be2\u95ee\u7ed9\u79bb\u7ebf\uff0c\u7528\u83ab\u961f\u505a\n\n\u7136\u540e\u7528bitset\u7ef4\u62a4\uff0c\u6bcf\u4e00\u4f4d\u4ee3\u8868\u6bcf\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u8bb0\u4e3a$now1$\n\n\u7136\u540e\u518d\u8bb0\u5f55\u4e00\u4e2a$now1$\u7684\u53cd\u4e32$now2$\uff08\u5c31\u662f\u6bcf\u4e00\u4f4d\u4ee3\u8868\u7684\u662f$N-x$\uff09\uff0c\u5e72\u5417\u7528\u7b49\u4e0b\u8bf4\n\n1\u64cd\u4f5c\u7684\u8bdd\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u5b58\u5728$z-y=x$\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u65f6\u5b58\u5728$z$\u548c$z-x$\uff0c\u90a3\u4e48\u628a$now1$\u5de6\u79fb$x$\u4f4d\u5e76\u4e0e$now1$\u505a$\\&$\u8fd0\u7b97\uff0c\u770b\u770b\u662f\u5426\u7b49\u4e8e$0$\uff0c\u5982\u679c\u4e0d\u662f\u8bf4\u660e\u4e0d\u5b58\u5728\n\n2\u64cd\u4f5c\u7684\u8bdd\uff0c$now2$\u4e2d\u7684$y'$\u4ee3\u8868\u6570\u5b57$N-y$\uff0c\u7136\u540e\u6c42\u662f\u5426\u5b58\u5728$z+y=x$\uff0c\u4e5f\u5c31\u662f\u6c42\u662f\u5426\u540c\u65f6\u6ee1\u8db3$now1$\u4e2d\u6709$z$\u548c$now2$\u4e2d\u6709$y'$\uff0c\u5e26\u8fdb\u524d\u9762\u7684\u5f0f\u5b50\u91cc\uff0c$N-y'+z=x,z-y'=x-N$\uff0c\u7136\u540e\u5c31\u8f6c\u5316\u6210\u548c\u4e0a\u9762\u4e00\u6837\u4e86\uff0c\u90a3\u4e48\u53ea\u8981\u628a$now2$\u53f3\u79fb$N-x$\u4f4d\u5e76\u4e0e$now1$\u505a$\\&$\u8fd0\u7b97\u5c31\u884c\u4e86\n\n3\u64cd\u4f5c\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u7ea6\u6570\uff08\u603b\u5171\u662f$\\sqrt {n}$\u4e2a\uff0c\u65f6\u95f4\u8db3\u591f\uff09\uff0c\u7136\u540e\u5728$now1$\u91cc\u6bcf\u4e00\u6b21\u67e5\u8be2\u5373\u53ef\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u4ee3\u7801\u91ccbitset\u4e2d\u7684any\u8fd4\u56de\u662f\u5426\u67091\n\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<bitset>\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nconst int N=100000;\nstruct node{\n\tint k,l,r,x,id;\n}q[N+5];\nint m,n,l,r,s;\nint a[N+5],c[N+5],ans[N+5],rt[N+5];\nbitset<N+5> now1,now2;\ninline int operator <(node x,node y){\n\treturn rt[x.l]==rt[y.l]?rt[x.l]&1?x.r<y.r:x.r>y.r:rt[x.l]<rt[y.l];\n}\ninline void init(){\n\tn=read(),m=read(),s=sqrt(n);\n\tfor(int i=1;i<=n;++i) a[i]=read(),rt[i]=(i-1)/s+1;\n\tfor(int i=1;i<=m;++i){\n\t\tq[i].k=read(),q[i].l=read(),q[i].r=read();\n\t\tq[i].x=read(),q[i].id=i;\n\t}\n\tsort(q+1,q+1+m);l=1,r=0;\n}\ninline void add(int x){if(c[x]++==0)now1[x]=1,now2[N-x]=1;}\ninline void del(int x){if(--c[x]==0)now1[x]=0,now2[N-x]=0;}\nint main(){\n\tinit();\n\tfor(int i=1;i<=m;++i){\n\t\twhile(l<q[i].l) del(a[l++]);\n\t\twhile(l>q[i].l) add(a[--l]);\n\t\twhile(r>q[i].r) del(a[r--]);\n\t\twhile(r<q[i].r) add(a[++r]);\n\t\tint k=q[i].k,x=q[i].x;\n\t\tswitch(k){\n\t\t\tcase 1:{\n\t\t\t\tif((now1&(now1<<x)).any())\n\t\t\t\tans[q[i].id]=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tif((now1&(now2>>(N-x))).any())\n\t\t\t\tans[q[i].id]=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tfor(int j=1;j*j<=x;++j)\n\t\t\t\tif(!(x%j))\n\t\t\t\tif(now1[j]&&now1[x/j]){\n\t\t\t\t\tans[q[i].id]=1;break;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)\n\tputs(ans[i]?\"hana\":\"bi\");\n\treturn 0;\n}\n```",
        "postTime": 1535085126,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u52a0\u51cf\u7ef4\u62a4\u4e00\u4e2abitset\u5c31\u597d\u4e86\n\n\u8fd9\u4e2a\u5957\u8def\u5f88\u7b80\u5355\uff0c\u767e\u5ea6\u4e0bbitset\u4f60\u5c31\u4f1a\u4e86\n\n\u5b9e\u5728\u4e0d\u884c\u4f60\u5c31\u7b80\u5355\u7406\u89e3\u4e3a\u72b6\u538b\n\n\u4f46\u662f\u4e58\u53ef\u80fd\u4e0d\u597dbitset\n\n\u6240\u4ee5\u76f4\u63a5\u5927\u529b\u679a\u4e3e\u7ea6\u6570\n\n\u53cd\u6b63\u662fO(sqrt(n))\u4e2a\n\n\u4e0d\u4f1a\u51fa\u4e8b\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100000\n#define M 20000005\nusing namespace std;\nstruct Query{int k,l,r,x,id;}q[N+5];\nint m,n,l,r,s;\nint a[N+5],c[N+5],ans[N+5],rt[N+5];\nbitset<N+5> now1,now2;\nchar DR[M+10],*P=DR;\ninline bool operator<(Query x,Query y){\n    return rt[x.l]==rt[y.l]?rt[x.l]&1?x.r<y.r:x.r>y.r:rt[x.l]<rt[y.l];\n}\nstruct FastIO{\n    static const int S=1310720;\n    int wpos;char wbuf[S];\n    FastIO():wpos(0) {}\n    inline int xchar(){\n        static char buf[S];\n        static int len=0,pos=0;\n        if(pos==len)pos=0,len=fread(buf,1,S,stdin);\n        if(pos==len)return -1;\n        return buf[pos++];\n    }\n    inline int read(){\n        int c=xchar(),x=0;\n        while(c<=32&&~c)c=xchar();\n        if(c==-1)return -1;\n        for(;'0'<=c&&c<='9';c=xchar())x=x*10+c-'0';\n        return x;\n    }\n}io;\ninline void init(){\n    n=io.read();m=io.read();s=(int)sqrt(n);\n    for(register int i=1;i<=n;++i)a[i]=io.read();\n    for(register int i=1;i<=n;++i)rt[i]=(i-1)/s+1;\n    for(register int i=1;i<=m;++i){\n        q[i].k=io.read();q[i].l=io.read();q[i].r=io.read();\n        q[i].x=io.read();q[i].id=i;\n    }\n    sort(q+1,q+m+1);l=1;r=0;\n}\ninline void add(int x){if(c[x]++==0)now1[x]=1,now2[N-x]=1;}\ninline void del(int x){if(--c[x]==0)now1[x]=0,now2[N-x]=0;}\nint main(){\n    init();\n    for(int i=1;i<=m;i++){\n        for(;q[i].l<l;)add(a[--l]);\n        for(;q[i].l>l;)del(a[l++]);\n        for(;q[i].r<r;)del(a[r--]);\n        for(;q[i].r>r;)add(a[++r]);int k=q[i].k,x=q[i].x;\n        if(k==1){if((now1&(now1<<x)).any())ans[q[i].id]=1;}\n        else if(k==2){if((now1&(now2>>(N-x))).any())ans[q[i].id]=1;}\n        else{\n            for(int j=1;j*j<=x;j++)\n                if(!(x%j))if(now1[j]&&now1[x/j]){ans[q[i].id]=1;break;}\n        }\n    }\n    for (int i=1;i<=m;i++)if(ans[i])puts(\"hana\");else puts(\"bi\");\n    return 0;\n}\n```",
        "postTime": 1497667486,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "$\\text{Updated on 12.20:}$ \u63cf\u8ff0\u7684\u5730\u65b9\u6709\u4e00\u4e9b\u9505\uff0c\u5df2\u4fee\u590d  \n\n\n\u8fd9\u662f\u4e2a\u5f88\u4e0d\u9519\u7684\u9898\u554a\uff0c\u5de7\u7528\u4e86 bitset\u3002  \n\u672c\u4eba\u505a\u5b8c\u8fd9\u9053\u9898\uff0c\u4e5f\u662f\u66f4\u6df1\u5730\u4e86\u89e3\u4e86 bitset \u7684\u5404\u79cd\u5999\u7528\u3002  \n\n\u4e0d\u8fc7\u5728\u8bf4\u6b63\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u6bd4\u8f83\u6709\u542f\u53d1\u610f\u4e49\u7684\u66b4\u529b\uff1a  \n\n\u5bf9\u4e8e\u66b4\u529b\u7b97\u6cd5\uff0c\u53ef\u4ee5\u641e\u4e09\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u53ef\u4ee5\u641e\u51fa\u7684\u548c\u3001\u5dee\u3001\u79ef\uff0c\u7b2c $i$ \u9879\u90fd\u8868\u793a\u662f\u5426\u80fd\u641e\u51fa $i$ \u6765\u3002  \n\u5728\u79fb\u52a8\u5f53\u524d\u533a\u95f4\u7aef\u70b9\u65f6\uff0c\u7ebf\u6027\u7684\u626b\u4e00\u904d\u533a\u95f4\uff0c\u7136\u540e\u66f4\u65b0\u8fd9\u4e09\u4e2a\u6570\u7ec4\u3002 \n\n\u7136\u800c\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $\\text O (n^\\frac52)$\u3002   \n***\n\u90a3\u6211\u4eec\u53ef\u4ee5\u4e0d\u8bb0\u5f55\u80fd\u641e\u51fa\u6765\u7684\u6570\uff0c\u800c\u662f\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5185\u51fa\u73b0\u7684\u6570\uff0c\u53c8\u4f1a\u600e\u6837\u5462\uff1f  \n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u8bb0\u5f55 $f_i$ \u8868\u793a\u5f53\u524d\u533a\u95f4\u5185\u662f\u5426\u51fa\u73b0\u8fc7 $i$\u3002  \n\u90a3\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5904\u7406\uff1a  \n\n\u5047\u8bbe\u53ef\u4ee5\u627e\u5230\u4e24\u4e2a\u6570 $a,b$\uff0c\u6ee1\u8db3 $a-b=x$\uff1b\u5b9e\u9645\u4e0a\u662f\u8981\u627e $a$ \u548c $a-x$ \u4e24\u4e2a\u6570\uff0c\u5c31\u6ee1\u8db3\u6761\u4ef6\u4e86\u3002  \n\u5728\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u8981 $\\text O (n)$ \u626b\u4e00\u904d\u6765\u68c0\u67e5\u3002  \n  \n\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u521a\u624d\u5c0f\u5c0f\u7684\u8f6c\u5316\uff0c\u5de7\u5999\u7684\u7528  bitset \u6765\u5f97\u51fa\u7b54\u6848\uff1a    \n\n\n\u53ea\u9700\u8981\u5c06 $f$ \u5de6\u79fb $x$ \u4f4d\uff0c\u539f\u672c\u5728\u7b2c $i$ \u9879\u7684\u6570\u79fb\u5230\u4e86\u7b2c $i-x$ \u9879\uff08\u82e5 $x>i$\uff0c\u8fd9\u4e00\u9879\u5c31\u88ab\u6324\u51fa bitset \u4e86\uff09\u3002  \n\n\u73b0\u5728\u518d\u628a\u5de6\u79fb\u540e\u7684 $f$ \u548c\u539f\u672c\u7684\u505a\u4e00\u4e2a $\\text{and}$ \u8fd0\u7b97\uff0c\u5982\u679c\u8fd0\u7b97\u7ed3\u679c\u4e2d\u5305\u542b $1$\uff0c\u663e\u7136\u5c31\u8bf4\u660e\u4e86\u533a\u95f4\u4e2d\u5b58\u5728 $a-b=x$\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709$\\Theta(n/w)$\u3002\u8fd9\u91cc $w$ \u53d6\u51b3\u4e8e\u7535\u8111\u914d\u7f6e\uff0c\u4e00\u822c\u662f $64$\u3002  \n\n\u987a\u5e26\u8bf4\u4e00\u4e0b\uff0cbitset \u81ea\u5e26\u4e00\u4e2a\u6210\u5458\u51fd\u6570 `any()`\uff0c\u53ef\u4ee5\u67e5\u8be2 bitset \u4e2d\u662f\u5426\u542b\u6709 $1$\u3002\n\n***\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a $f$ \u6570\u7ec4\u5df2\u7ecf\u4e0d\u591f\u7528\u4e86 \u2014\u2014 \u518d\u5f15\u5165\u4e00\u4e2a $g$ \u6570\u7ec4\u5c31\u597d\u5566\uff01  \n\u8fd9\u91cc $g_i$ \u8bb0\u5f55\u7684\u662f $f_{c-i}$ \u7684\u503c $(c=10^5)$\u3002  \n\n\u6211\u4eec\u7c7b\u6bd4\u64cd\u4f5c $1$ \u7684\u505a\u6cd5\uff0c\u8bbe\u5b58\u5728\u4e24\u4e2a\u6570 $a,b$\uff0c\u6ee1\u8db3 $a+b=x$\uff0c\u5f97\u5230 $b=x-a$\u3002   \n\n\u5c06 $g$ \u53f3\u79fb $c-x$ \u4f4d\uff0c\u548c $f$ \u505a\u4e00\u4e0b $\\text{and}$ \u8fd0\u7b97\u3002\u7c7b\u6bd4\u4e0a\u9762\u5c31\u77e5\u9053\u5982\u679c\u5b58\u5728 $1$\uff0c\u5c31\u8bf4\u660e\u7b54\u6848\u5b58\u5728\u3002\n\n***\n   \n\u5bf9\u4e8e\u64cd\u4f5c$3$\u5c31\u76f8\u5bf9\u7b80\u5355\u4e86\uff0c\u66b4\u529b\u679a\u4e3e $x$ \u7684\u56e0\u6570 $a$\uff0c\u82e5 $f$ \u4e2d\u540c\u65f6\u5b58\u5728 $a$ \u548c $\\dfrac xa$\uff0c\u90a3\u80af\u5b9a\u5c31\u6709 $a,b$ \u6ee1\u8db3 $a \\times b=x$ \u4e86\u3002\n  \n\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\text O(\\sqrt n)$ \u7684\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\text O \\left( \\dfrac{n^2}{w}+n\\sqrt n\\right)$\u3002\n\n\u4e0a\u4ee3\u7801\uff1a   \n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<bitset>\n#define N 100003\n#define C 100000\nusing namespace std;\n\nstruct query{\n    int l,r,id,k,x;\n};\n\ninline void read(int &x);\nbool cmp(query a,query b);\ninline void update(int i,int t);\n\nint n,m,block,lim;\nint be[N],a[N],s[N];\nquery q[N];\nbitset<N> f,g,ans; //\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0cans\u4e5f\u53ef\u4ee5\u7528bitset\u6765\u5b58\n\nint main(){\n    int k,l,r,x;\n    read(n),read(m);\n    block = sqrt(n);\n    for(int i=1;i<=n;++i){\n        read(a[i]);\n        be[i] = i/block+1;\n    }\n    for(int i=1;i<=m;++i){\n        read(q[i].k),read(q[i].l),read(q[i].r),read(q[i].x);\n        q[i].id = i;\n    }\n    sort(q+1,q+1+m,cmp);\n    l = 1,r = 0;\n    for(int i=1;i<=m;++i){\n        while(l<q[i].l) update(a[l],-1),++l;\n        while(l>q[i].l) update(a[l-1],1),--l;\n        while(r<q[i].r) update(a[r+1],1),++r;\n        while(r>q[i].r) update(a[r],-1),--r;\n        k = q[i].k;\n        x = q[i].x;\n        if(k==1){\n            if((f&(f<<x)).any()) \n                ans[q[i].id] = 1;\n        }else if(k==2){\n            if((f&(g>>(C-x))).any()) \n                ans[q[i].id] = 1;\n        }else{\n            for(int j=1;j*j<=x;++j){\n                if(x%j!=0) continue;\n                if(f[j]&&f[x/j]){\n                    ans[q[i].id] = 1;\n                    break;\n                }\n            }\n        }\n    }\n    for(int i=1;i<=m;++i){\n        if(ans[i]) printf(\"hana\");\n        else printf(\"bi\");\n        putchar('\\n');\n    }\n    return 0;\n}\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nbool cmp(query a,query b){\n    if(be[a.l]==be[b.l]) return a.r<b.r;\n    return a.l<b.l;\n}\n\ninline void update(int i,int t){\n    s[i] += t;\n    if(s[i]==1&&t==1)\n        f[i] = g[C-i] = 1;\n    else if(s[i]==0&&t==-1)\n        f[i] = g[C-i] = 0;\n}\n```",
        "postTime": 1545227974,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u5f88\u4e45\u4e4b\u524d\u8fc7\u4e86\u8fd9\u9898\n\n\u7136\u540e\u6709\u5929\u665a\u4e0a\u6211\u5728\u60f3\uff0c\u8fd9\u9898\u80fd\u4e0d\u80fd\u51fa\u6210\u5f3a\u5236\u5728\u7ebf\u5462\uff1f\n\n\u7136\u540e\u6211\u5c31\u60f3\u51fa\u4e86\u8fd9\u4e2a\u505a\u6cd5\n\n\u8fd9\u4e2a\u505a\u6cd5\u548c\u83ab\u961f\u505a\u6cd5\u4e00\u6837\uff0c\u90fd\u662f\u63d0\u53d6\u533a\u95f4\u7684bitset\u7136\u540e\u5904\u7406\n\n\u6211\u4eec\u5bf9\u5e8f\u5217\u5206\u5757\uff0c\u7136\u540e\u5728\u5757\u4e0a\u5904\u7406\u5757\u91cc\u7684bitset\uff0c\u8868\u793a\u5757\u91cc\u6709\u54ea\u4e9b\u6570\n\n\u4e4b\u540e\u6211\u4eec\u5728\u5757\u95f4\u5efaST\u8868\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5904\u7406\u5757\u95f4\u51fa\u73b0\u4e86\u54ea\u4e9b\u6570\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\uff0c\u6211\u4eec\u628a\u533a\u95f4\u5185\u7684\u5757bitset\u6c42\u51fa\u6765\uff0c\u7136\u540e\u5728\u628a\u8fb9\u4e0a\u7684\u6563\u5757\u52a0\u5165\u8fdb\u53bb\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u53cd\u8fc7\u6765\u7684`n-a[i]`\u4e5f\u4e00\u6837\u7684\u65b9\u6cd5\u7ef4\u62a4\n\n\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5047\u5982\u5757\u5927\u5c0f\u662f$S$\n\n\u90a3\u4e48\u9884\u5904\u7406\u65f6\u7a7a\u590d\u6742\u5ea6\u662f$\\frac{n^2logn}{Sw}$\n\n\u5355\u6b21\u8be2\u95ee$S+\\frac{n}{w}$\n\n\u6211\u7684\u4ee3\u7801\u6ca1\u591a\u60f3\uff0c$S$\u76f4\u63a5\u53d6$\\sqrt{n}$\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u548c\u83ab\u961f\u5c31\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u5e38\u6570\u5927\u4e86\u4e00\u4e9b\n(\u6211\u7684\u83ab\u961f\u603b\u51715.83s\uff0c\u8fd9\u4e2a\u505a\u6cd5\u603b\u5171 9.68s )\n\n\u9898\u5916\u8bdd\uff0c\u8fd9\u9898\u5982\u679c\u771f\u5f3a\u5236\u5728\u7ebf\u4f30\u8ba1\u4e0d\u53ea\u662f\u8981\u901a\u8fc7lastans\u7b97\u4e86\uff0c\u4f30\u8ba1\u8981\u524d\u591a\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e00\u8d77\u7b97\u51fa\n\n\nupdate0\uff1a\u539f\u6765\u7684\u4ee3\u7801\u6709\u70b9\u9505\uff0c\u73b0\u5728\u4fee\u590d\u4e00\u4e0b\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100005\n#define mk 350\n\nconst int N = 100000;\nint n,m,nn,mm;\nint a[MAXN],c[MAXN];\nbitset<MAXN>w[mk],fw[mk];\nbitset<MAXN>f[mk][10],g[mk][10];\n\ninline int read()\n{\n    register int x = 0 , ch = getchar();\n    while( !isdigit( ch ) ) ch = getchar();\n    while( isdigit( ch ) ) x = x * 10 + ch - '0' , ch = getchar();\n    return x;\n}\n\nvoid jianbiao()\n{\n\tfor(int i = 1; i <= n; i ++) {\n\t\tif(i%nn == 1) c[i] = c[i-1]+1;\n\t\telse c[i] = c[i-1];\n\t\tw[c[i]][a[i]] = 1;\n\t\tfw[c[i]][N-a[i]] = 1;\n\t}\n\tmm = c[n];\n\tfor(int i = 1; i <= mm; i ++) {\n\t\tf[i][0] = w[i];\n\t\tg[i][0] = fw[i];\n\t}\n\tfor(int j = 1; j <= 9; j ++)\n\t\tfor(int i = 1; i <= mm-(1<<j)+1; i ++) {\n\t\t\tf[i][j] = f[i][j-1]|f[i+(1<<(j-1))][j-1];\n\t\t\tg[i][j] = g[i][j-1]|g[i+(1<<(j-1))][j-1];\n\t\t}\n}\nbitset<MAXN>o,fo,ans;\n\nvoid rd()\n{\n\tn = read(); m = read();\n\tnn = sqrt(n);\n\tfor(int i = 1; i <= n; i ++)\n\t\ta[i] = read();\n\tjianbiao();\n}\n\nsigned main()\n{\n\trd();\n\tint cnt = 0;\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tint opt = read();\n\t\tint l,r,x;\n\t\tl = read(); r = read(); x = read();\n\t\to.reset();\n\t\tif(opt == 2) fo.reset();\n\t\tif(c[l]+1 >= c[r]) {\n\t\t\tfor(int i = l; i <= r; i ++) { \n\t\t\t\to[a[i]] = 1; \n\t\t\t\tfo[N-a[i]] = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tint _l = c[l]+1,_r = c[r]-1;\n\t\t\tint u = log2(_r-_l+1);\n\t\t\t o =  f[_l][u]| f[_r-(1<<u)+1][u];\n\t\t\tif(opt == 2) fo = g[_l][u]|g[_r-(1<<u)+1][u];\n\t\t\tfor(int i = l; c[i] == c[l]; i ++) {\n\t\t\t\to[a[i]] = 1;\n\t\t\t\tfo[N-a[i]] = 1; cnt ++;\n\t\t\t}\n\t\t\tfor(int i = r; c[i] == c[r]; i --) {\n\t\t\t\to[a[i]] = 1;\n\t\t\t\tfo[N-a[i]] = 1; cnt ++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(opt == 2) {\n\t\t\tans = o&(fo>>(N-x));\n\t\t\tif(ans.count() > 0) {\n\t\t\t\tcout<<\"hana\\n\";\n\t\t\t} else {\n\t\t\t\tcout<<\"bi\\n\";\n\t\t\t}\n\t\t} \n\t\t\n\t\tif(opt == 1) {\n\t\t\tans = o&(o>>x);\n\t\t\tif(ans.count() > 0) {\n\t\t\t\tcout<<\"hana\\n\";\n\t\t\t} else {\n\t\t\t\tcout<<\"bi\\n\";\n\t\t\t}\n\t\t} \n\t\tif(opt == 3) {\n\t\t\tbool fl = 0;\n\t\t\tfor(int i = 1; i*i <= x; i ++)\n\t\t\tif(x%i == 0) {\n\t\t\t\tif(o[i] && o[x/i])  {\n\t\t\t\t\tfl = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} \n\t\t\tif(fl) cout<<\"hana\\n\";\n\t\t\telse cout<<\"bi\\n\";\n\t\t}\n\t\t\n\t}\n\treturn 0;\n } \n```",
        "postTime": 1570840102,
        "uid": 124721,
        "name": "Ynoi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "# \u83ab\u961f+bitset\nlxl\u7684\u9898+\u4e0d\u5f3a\u5236\u5728\u7ebf+\u5e8f\u5217\u3002\u3002\u3002\u663e\u7136\u662f\u83ab\u961f\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u83ab\u961f\uff1a\n\n\u53d1\u73b0\u6570\u7684\u6700\u5927\u503c\u4e0d\u8d85\u8fc7100000\uff1a\u53ef\u80fd\u662f\u6839\u636e\u503c\u57df\u6765\u505a\n\n\u7136\u540e\u6211\u4eec\u770b\uff1a\n\u5982\u679c\u533a\u95f4\u4e2d\u5b58\u5728\u4e24\u4e2a\u6570$(x,y)$\u5dee\u4e3a$k$\uff0c\u76f8\u5f53\u4e8e\u533a\u95f4\u4e2d\u5b58\u5728\u4e24\u4e2a\u6570$(x-k,x)$\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a```bitset s1```\uff0c\u7b2c$i$\u4f4d\u8868\u793a\u5f53\u524d\u533a\u95f4\u4e2d\u662f\u5426\u5b58\u5728$i$\uff0c\u5982\u679c```s1&s1<<k```\u4e2d\u6709\u4efb\u610f\u4e00\u4f4d\u4e3a1\uff0c\u5047\u8bbe\u662f\u7b2c$i$\u4f4d\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4i\u548ci-k\u90fd\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u3002\n\n\u5982\u679c\u533a\u95f4\u4e2d\u5b58\u5728\u4e24\u4e2a\u6570$(x,y)$\u548c\u4e3a$k$\uff0c\u76f8\u5f53\u4e8e\u533a\u95f4\u4e2d\u5b58\u5728\u4e24\u4e2a\u6570$(x,k-x)$\uff0c\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c$bitset$\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u8fd0\u7b97\u53ef\u4ee5\u628a\u4e00\u4e2a\u5b58\u50a8\u662f\u5426\u5b58\u5728$i$\u7684$bitset$\uff0c\u6539\u6210\u4e00\u4e2a\u5b58\u50a8\u662f\u5426\u5b58\u5728$k-i$\u7684$bitset$\u3002\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u518d\u7ef4\u62a4\u4e00\u4e2a\u5b58\u50a8\u662f\u5426\u5b58\u5728$maxn-i$\u7684```bitset s2```\uff0c\u8fd9\u91cc$maxn$\u662f\u4e00\u4e2a\u6bd4\u6240\u6709\u6570\u90fd\u5927\u7684\u503c\uff0c\u6bd4\u5982\u8bf4$100005$\uff0c\u90a3\u4e48```s2>>(maxn-k)```\u7ef4\u62a4\u7684\u5c31\u662f\u662f\u5426\u5b58\u5728$(maxn-i)-(maxn-k)=(k-i)$\u4e86\n\n\u81f3\u4e8e\u4e58\u79ef\u3002\u3002\u3002\u53cd\u6b63\u7ea6\u6570\u4e5f\u4e0d\u591a\uff0c\u679a\u4e3e\u5c31\u597d\u4e86\u3002\n\n\u83ab\u961f\u7684\u4e24\u4e2a\u6307\u9488$l,r$\u79fb\u52a8\u65f6\uff0c\u7ef4\u62a4\u5f53\u524d\u662f\u5426\u5b58\u5728i\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31```s1[i]=s2[maxn-i]=1```\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5c31```s1[i]=s2[maxn-i]=0```\n\n\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nbitset<100005> s1,s2;\nint maxn=100000;\nint len;\nint ans[100005],cnt[100005],a[100005];\nstruct query\n{\n\tint opt,l,r,v,id;\n\tquery (int opt=0,int l=0,int r=0,int v=0,int id=0):opt(opt),l(l),r(r),v(v),id(id) {}\n    bool operator < (const query &rhs)\n    {\n    \treturn l/len==rhs.l/len?r<rhs.r:l<rhs.l;\n\t}\n} q[100005];\nvoid add(int x)\n{\n\ts1[a[x]]=s2[maxn-a[x]]=++cnt[a[x]];//\u7ef4\u62a4\u533a\u95f4\u4e2d\u662f\u5426\u5b58\u5728a[x]\n}\nvoid del(int x)\n{\n\ts1[a[x]]=s2[maxn-a[x]]=--cnt[a[x]]!=0;//\u7ef4\u62a4\u533a\u95f4\u4e2d\u662f\u5426\u5b58\u5728a[x]\n}\nint main()\n{\n\tint n,m;\n\tcin>>n>>m;\n\tlen=int(sqrt(n)+0.5);\n\tfor (int i=1;i<=n;i++) cin>>a[i];\n\tfor (int i=1,opt,l,r,v;i<=m;i++) cin>>opt>>l>>r>>v,q[i]=query(opt,l,r,v,i);\n\tsort(q+1,q+m+1);\n\tint l=1,r=0;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\twhile (l<q[i].l) del(l++);\n\t\twhile (l>q[i].l) add(--l);\n\t\twhile (r<q[i].r) add(++r);\n\t\twhile (r>q[i].r) del(r--);\n\t\tswitch(q[i].opt)\n\t\t{\n\t\t\tcase 1:{\n\t\t\t\tans[q[i].id]=(s1&(s1<<q[i].v)).any();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tans[q[i].id]=(s1&(s2>>(maxn-q[i].v))).any();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tfor (int j=1;j*j<=q[i].v;j++) if (q[i].v%j==0)\n\t\t\t\t{\n\t\t\t\t\tif (s1[j]&&s1[q[i].v/j]) ans[q[i].id]=1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i=1;i<=m;i++) cout<<(ans[i]?\"hana\":\"bi\")<<endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1549686992,
        "uid": 107935,
        "name": "Thomasguo666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "$\\text{bitset}$\u795e\u9898\u554a\u3002   \n### \u6b63\u6587\u90e8\u5206           \n\u9996\u5148\u4f60\u5f97\u60f3\u5230\u8fd9\u9898\u5f97\u7528$\\text{bitset}$\u6765\u505a\u3002   \n\u6211\u4eec\u5148\u8bbe\u4e00\u4e2a$\\text{bitset,zhe}$\u5176\u7b2c$i$\u4f4d\u8868\u793a$i$\u8fd9\u4e2a\u6570\u5b57\u6709\u6ca1\u6709\u51fa\u73b0\u3002       \n\u6211\u4eec\u518d\u8bbe\u4e00\u4e2a$\\text{bitset,rev}$\u5176\u7b2c$i$\u4f4d\u8868\u793a$n-i$\u662f\u5426\u51fa\u73b0\u3002             \n\u63a5\u7740\u6211\u4eec\u770b\u8be2\u95ee\uff1a     \n\u5bf9\u4e8e\u52a0\u6cd5\uff1a\u6211\u4eec\u53ea\u9700\u8981\u5c06$\\text{zhe}$\u4e0e$\\text{zhe<<x}$\u505a\u4e00\u4e0b$and$\u8fd0\u7b97\u5c31\u597d\u4e86\u3002     \n\u5bf9\u4e8e\u51cf\u6cd5:  \n\u6211\u4eec\u5148\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff1a  \n$z+y=x$      \n$n-(n-y)+z=x$        \n$z-(n-y)=x-n$         \n\u8fd9\u6837\u5c31\u548c\u52a0\u6cd5\u5f62\u5f0f\u4e00\u6837\u4e86   \n\u4e58\u6cd5:\u4e58\u6cd5\u6ca1\u4ec0\u4e48\u6280\u5de7\uff0c\u76f4\u63a5\u679a\u4e3e\u56e0\u6570      \n\u5bf9\u4e8e\u8be2\u95ee\u7684\u8bdd\u5176\u5b9e\u6211\u4eec\u7528\u4e00\u4e2a\u83ab\u961f\u6eda\u4e00\u4e0b\u5c31\u597d\u4e86    \n### My code\n```cpp\n#include <bits/stdc++.h>\n#define il inline\n#define gc getchar\n#define isd(c) (c >= '0' && c <= '9')\nconst int MAXN = 1e5 + 10;\nconst int MAXM = MAXN;\nusing namespace std;\nil int read() {\n    int res = 0;char c;bool sign = 0;\n    for(c = gc();!isd(c);c = gc()) sign |= c == '-';\n    for(;isd(c);c = gc()) res = (res << 1) + (res << 3) + (c ^ 48);\n    return sign ? -res : res;\n}\nint a[MAXN],bel[MAXN],cnt[MAXN];bool ans_arr[MAXM];\nint n,m,i,j,k;\nstruct Questions {\n    int opt,l,r,x,id;\n    Questions() {opt = l = r = x = id = 0;}\n    Questions(int _opt,int _l,int _r,int _x,int _id) {\n        opt = _opt;l = _l;r = _r;x = _x;id = _id;\n    }\n}Query[MAXM];\nbitset<MAXN>zhe,rev;\nil bool cmp1(Questions a,Questions b) {\n    if(bel[a.l] != bel[b.l]) return bel[a.l] < bel[b.l];\n    else return a.r < b.r;\n} \nil void add(int x) {\n    int tmp = a[x];\n    cnt[tmp]++;cnt[tmp] == 1 ? zhe[tmp] = 1,rev[n - tmp] = 1 : NULL;\n}\nil void del(int x) {\n    int tmp = a[x];\n    cnt[tmp]--;!cnt[tmp] ? zhe[tmp] = 0,rev[n - tmp] = 0 : NULL;\n}\nint main() { \n    n = read();m = read();\n    for(int i = 1;i <= n;i++) a[i] = read();const int bls = (int)(sqrt(n));\n    for(int i = 1;i <= m;i++) {\n        int opt = read(),l = read(),r = read(),x = read();\n        Query[i] = Questions(opt,l,r,x,i);\n        bel[i] = (i - 1) / bls + 1;\n    }\t\n    sort(Query + 1,Query + m + 1,cmp1);    \n    int l = 1,r = 0;\n    for(int _i = 1;_i <= m;_i++) {\n        while(l > Query[_i].l) add(--l);\n        while(r < Query[_i].r) add(++r);\n        while(l < Query[_i].l) del(l++);\n        while(r > Query[_i].r) del(r--);\n        int x = Query[_i].x;\n        switch(Query[_i].opt) {\n            case 1: {\n                if((zhe & (zhe << x)).any()) ans_arr[Query[_i].id] = 1;\n                break;\n            } \n            case 2: {\n                if((zhe & (rev >> n - x)).any()) ans_arr[Query[_i].id] = 1;\n                break;\n            }\n            case 3: {\n                for(int i = 1;i <= (int)(sqrt(x));i++) {\n                    if(x % i == 0) {\n                        if(zhe[i] && zhe[x / i]) {\n                            ans_arr[Query[_i].id] = 1;\n                            break;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    for(int i = 1;i <= m;i++) {\n        ans_arr[i] ? puts(\"hana\") : puts(\"bi\");\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1547630202,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u53c8\u6ca1\u6709\u4ec0\u4e48\u5f88\u597d\u7684\u65b9\u6cd5\u53bb\u679a\u4e3e\uff08\u56e0\u4e3a\u80af\u5b9a\u8d85\u65f6\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528 `bitset` \u53bb\u50a8\u5b58\u67d0\u4e2a\u6570\u662f\u5426\u51fa\u73b0\u3002\u56e0\u4e3a `bitset` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\dfrac{n}{w})$\uff08$w$ \u5728 $64$ \u4f4d\u7cfb\u7edf\u4e0a\u7b49\u4e8e $64$\uff09\uff0c\u6240\u4ee5 $O(\\dfrac{nm}{w})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u4e09\u79d2\u4e4b\u5185\u4e00\u5b9a\u80fd\u8fc7\u3002\n\n\u73b0\u5728\u52a0\u6cd5\u5c31\u89e3\u51b3\u6389\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e00\u4e2a `bitset`\uff0c\n\n\u8003\u8651\u505a\u51cf\u6cd5\uff0c\u6211\u4eec\u7a81\u7136\u53d1\u73b0\u4e00\u4e2a `bitset` \u5e76\u4e0d\u597d\u4ece\u5904\u7406\uff0c\u4e8e\u662f\u51c6\u5907\u53e6\u5f00\u4e00\u4e2a `bitset` \u4f5c\u4e3a\u7b2c\u4e00\u4e2a `bitset` \u53cd\u4e32\uff0c\u76f8\u5f53\u4e8e\u50a8\u5b58\u662f\u5426\u5b58\u5728 $n-x$\u3002\u73b0\u5728\u6211\u4eec\u7684\u51cf\u6cd5\u4e5f\u5904\u7406\u5b8c\u6210\u4e86\u3002\n\n\u6700\u540e\u662f\u4e58\u6cd5\u3002\u6211\u4eec\u76f4\u63a5\u66b4\u529b $O(\\sqrt n)$ \u8fdb\u884c\u5904\u7406\uff0c\u5224\u65ad\u4e00\u4e0b\u4e24\u4e2a\u56e0\u5b50\u662f\u5426\u5728\u533a\u95f4\u51fa\u73b0\u8fc7\u5373\u53ef\u3002\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u8fd8\u662f\u6ca1\u53bb\u60f3\u5982\u4f55\u4f18\u79c0\u5730\u5904\u7406\u6bcf\u4e2a\u533a\u95f4\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u7528\u83ab\u961f\u53bb\u7ef4\u62a4 `bitset` \u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint pos[100005],a[100005],n,m,p,cnt[100005];\nbool ans[100005];\nstruct queries{\n\tint op,l,r,x,id;\n\tqueries(){op=l=r=x=id=0;}\n\tqueries(int O,int L,int R,int X,int I){op=O,l=L,r=R,x=X,id=I;}\n\tbool operator < (queries qwq) const {\n\t\tif(pos[l]==pos[qwq.l])\treturn r<qwq.r;\n\t\treturn l<qwq.l;\n\t}\n}que[100005];\nbitset<100005> pre,suf;\nvoid add(int x)\n{\n    ++cnt[a[x]];\n//    pre[a[x]]=1;\n\tpre.set(a[x]);\n//    suf[n-a[x]]=1;\n\tsuf.set(n-a[x]);\n}\nvoid sub(int x)\n{\n\t--cnt[a[x]];\n\tif(!cnt[a[x]])\n\t{\n\t\tpre[a[x]]=0;\n\t\tsuf[n-a[x]]=0;\n\t}\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tp=sqrt(n);\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&a[i]),pos[i]=(i-1)/p+1;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint o,l,r,x,id=i;\n\t\tscanf(\"%d %d %d %d\",&o,&l,&r,&x);\n\t\tque[i]=queries(o,l,r,x,id);\n\t}\n\tsort(que+1,que+1+m);\n\tfor(int i=1,l=1,r=0;i<=m;++i)\n\t{\n\t\twhile(l>que[i].l)\tadd(--l);\n\t\twhile(l<que[i].l)\tsub(l++);\n\t\twhile(r<que[i].r)\tadd(++r);\n\t\twhile(r>que[i].r)\tsub(r--);\n\t\tif(que[i].op==1 && (pre&(pre<<que[i].x)).any())\tans[que[i].id]=true;\n\t\tif(que[i].op==2 && (pre&(suf>>(n-que[i].x))).any())\tans[que[i].id]=true;\n\t\tif(que[i].op==3)\n\t\t{\n\t\t\tfor(int j=1;j*j<=que[i].x;++j)\n\t\t\t{\n\t\t\t\tif(que[i].x%j==0 && pre[j] && pre[que[i].x/j])\n\t\t\t\t{\n\t\t\t\t\tans[que[i].id]=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)\tputs(ans[i]?\"hana\":\"bi\");\n\treturn 0;\n}\n```\n\n",
        "postTime": 1595819430,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "[\u540c\u6b65\u4e8e\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/henry-1202/p/10201959.html)\n\n~~\u8fd9\u79cdlxl\u7684\u9898\u8fd8\u662f\u6ca1\u4fee\u6539\u64cd\u4f5c\u7684\u9898\u57fa\u672c\u5c31\u662f\u83ab\u961f~~\n\n\u5206\u5f00\u8003\u8651\u6bcf\u4e2a\u8be2\u95ee\n\n### 1.\u51cf\u6cd5\n\n$a-b=x\u21d2a=b+x$\n\n\u7528\u4e00\u4e2a$bitset$\uff0c\u7b2c$i$\u4f4d\u8868\u793a\u6709\u6ca1\u6709$i$\u8fd9\u4e2a\u6570\n\n\u90a3\u4e48\u67e5\u8be2\u5176\u5b9e\u5c31\u7b49\u4ef7\u4e8e\u67e5\u8be2bit&(bit>>x)\u4e4b\u540e\u91cc\u9762\u6709\u6ca1\u67091\n\n$a+b=x$\n\n### 2.\u52a0\u6cd5\n\n$a+b=x$\n\n\u8bbe$p=n-b$\n\n$a-p=a-n+b=x-n$\n\n\u7ef4\u62a4\u4e00\u4e0b\u53e6\u5916\u4e00\u4e2a$bitset$\uff0c\u91cc\u9762\u5b58\u7684\u662f$n-i$\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\n\n\u67e5\u8be2\u76f4\u63a5\u67e5s1&(s2>>(n-x))\u91cc\u9762\u6709\u6ca1\u67091\u5c31\u597d\n\n### 3.\u4e58\u6cd5\n\n\u4e58\u6cd5\u4e0d\u597d\u7ef4\u62a4\n\n\u4f46\u662f\u76f4\u63a5\u679a\u4e3e\u56e0\u6570\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u5728\u7b2c\u4e00\u4e2abitset\u91cc\u9762\u770b\u6210\u5bf9\u7684\u56e0\u6570\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u5c31\u597d\n\n```\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\ninline int read() {\n    int x = 0, f = 1; char c = getchar();\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = getchar();}\n    return x * f;\n}\n\n#define N 100010\n\nbitset<N>s1;\nbitset<N>s2;\nint cnt[N];\nint n, m, a[N];\nint ans[N], block;\nstruct ques {\n\tint opt, l, r, x, id;\n} q[N];\n\nbool cmp(ques a, ques b) {\n\tif(a.l / block == b.l / block) return a.r < b.r;\n\telse return a.l < b.l;\n}\n\nvoid add(int x) {\n\tx = a[x];\n\tcnt[x]++;\n\tif(cnt[x] == 1) s1[x] = s2[n - x] = true;\n}\n\nvoid dele(int x) {\n\tx = a[x];\n\tcnt[x]--;\n\tif(!cnt[x]) s1[x] = s2[n - x] = false;\n}\n\nint main() {\n    n = read(); m = read();\n    for(int i = 1; i <= n; i ++) a[i] = read();\n    block = n / sqrt(m);\n    for(int i = 1; i <= m; i ++) {\n    \tq[i] = (ques) {read(), read(), read(), read(), i};\n\t}\n\tsort(q + 1, q + m + 1, cmp);\n\tint l = 1, r = 0;\n\tfor(int i = 1; i <= m; i ++) {\n\t\tint ql = q[i].l, qr = q[i].r, opt = q[i].opt, x = q[i].x;\n\t\twhile(l < ql) dele(l++);\n\t\twhile(l > ql) add(--l);\n\t\twhile(r < qr) add(++r);\n\t\twhile(r > qr) dele(r--);\n\t\tif(opt == 1) {\n\t\t\tans[q[i].id] = (s1 & (s1 >> x)).any();\n\t\t}\n\t\tif(opt == 2) {\n\t\t\tans[q[i].id] = (s1 & (s2 >> (n - x))).any();\n\t\t}\n\t\tif(opt == 3) {\n\t\t\tfor(int k = 1; k * k <= x; k ++) {\n\t\t\t\tif(x % k == 0) {\n\t\t\t\t\tif(s1[k] && s1[x / k]) {\n\t\t\t\t\t\tans[q[i].id] = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; i ++) {\n\t\tputs(ans[i] ? \"hana\" : \"bi\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546235910,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "## \u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\n\n[\u9898\u76ee](https://www.luogu.org/problem/P3674)\n\n### $\\mathcal{Description}$\n\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217\uff0c\u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $opt$\u3001$l$\u3001$r$\u3001$x$\u3002\n\n1\u3001\u82e5 $opt$ \u4e3a $1$, \u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u53ef\u4ee5\u9009\u51fa\u4e24\u4e2a\u6570\u5dee\u4e3a $x$\u3002\n\n2\u3001\u82e5 $opt$ \u4e3a $2$, \u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u53ef\u4ee5\u9009\u51fa\u4e24\u4e2a\u6570\u548c\u4e3a $x$\u3002\n\n1\u3001\u82e5 $opt$ \u4e3a $3$, \u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u53ef\u4ee5\u9009\u51fa\u4e24\u4e2a\u6570\u4e58\u79ef\u4e3a $x$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8f93\u51fa`hana`\uff0c\u5982\u679c\u4e0d\u53ef\u4ee5\uff0c\u8f93\u51fa`bi`\u3002\n\n### $\\mathcal{Solution}$\n\n\u5982\u679c\u60f3\u5b66 $bitset$ \u53ef\u4ee5\u8fdb\u8fd9\u4e2a[\u94fe\u63a5](https://www.cnblogs.com/yifusuyi/p/10072729.html)\u3002\n\n\u5f53\u7136\u672c\u9898\u53ea\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u5f88\u57fa\u7840\u7684\u3002\n\n\u7528 $bitset$ \u7ef4\u62a4\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u6bcf\u4e2a\u6570\u5b57\u662f\u5426\u5b58\u5728\uff0c\u8bb0\u4e3a$now1$\u3002\n\n\u82e5 $opt == 1$\uff0c\u5982\u679c\u5b58\u5728 $z - y = x$, \u5219\u5fc5\u5b58\u5728 $z$ \u548c $z - x$\u3002\n\n\u82e5 $opt == 2$\uff0c\u5c31\u662f\u6c42 $z + y = x$\uff0c\u6240\u4ee5\u9664 $now1$ \u5916\uff0c\u6211\u4eec\u8fd8\u9700\u7528 $bitset$ \u8bb0\u5f55\u4e00\u4e2a $now1$ \u7684\u53cd\u4e32\uff0c\u5c31\u662f\u6bcf\u4e00\u4f4d $i$ \u90fd\u8868\u793a $N - i$\u3002\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u6ee1\u8db3 $now1$ \u4e2d\u6709 $z$ \u548c $now2$ \u4e2d\u6709 $y^{'}$\u3002\u4ee3\u5165 $z + y = x$ \u4e2d\uff0c\u5f97\u5230 $z + N - y ^ {'} = x$\uff0c$z - y ^ {'} = x - N$\u3002\n\n\u82e5 $opt == 3$\uff0c\u76f4\u63a5\u679a\u4e3e\u7ea6\u6570\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 10, M = 2e6 + 10;\nint n, m, now, be[M], a[M], cnt[M], ans[M];\nbitset <N + 10> now1, now2;\nstruct Node {\n\tint l, r, id, k, x;\n} q[M];\ninline int read() {\n\tint x = 0, k = 1; char c = getchar();\n\tfor (; c < 48 || c > 57; c = getchar()) k ^= (c == '-');\n\tfor (; c >= 48 && c <= 57; c = getchar()) x = x * 10 + (c ^ 48);\n\treturn k ? x : -x;\n}\ninline bool cmp(Node a, Node b) {\n\treturn (be[a.l] ^ be[b.l]) ? be[a.l] < be[b.l] : ((be[a.l] & 1) ? a.r < b.r : a.r > b.r);\n} \ninline void del(int x) {\n\tif (--cnt[x] == 0)\n\t\tnow1[x] = now2[N - x] = 0;\n}\ninline void add(int x) {\n\tif (cnt[x]++ == 0)\n\t\tnow1[x] = now2[N - x] = 1;\n}\nint main() {\n\tn = read(), m = read();\n\tint sz = sqrt(n), n1 = ceil((double)n / sz);\n\tfor (int i = 1; i <= n1; i++)\n\t\tfor (int j = (i - 1) * sz + 1; j <= i * sz; j++)\n\t\t\tbe[j] = i;\n\tfor (int i = 1; i <= n; i++)\n\t\ta[i] = read();\n\tfor (int i = 1; i <= m; i++)\n\t\tq[i].k = read(), q[i].l = read(), q[i].r = read(), q[i].x = read(), q[i].id = i;\n\tstd::sort(q + 1, q + 1 + m, cmp);\n\tint L = 1, R = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint l = q[i].l, r = q[i].r, k = q[i].k, x = q[i].x;\n\t\twhile (L < l)\n\t\t\tdel(a[L++]);\n\t\twhile (L > l)\n\t\t\tadd(a[--L]);\n\t\twhile (R < r)\n\t\t\tadd(a[++R]);\n\t\twhile (R > r)\n\t\t\tdel(a[R--]);\n\t\tif (k == 1) {\n\t\t\tif ((now1 & (now1 << x)).any()) {\n\t\t\t\tans[q[i].id] = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (k == 2) {\n\t\t\tif ((now1 & (now2 >> (N - x))).any()) {\n\t\t\t\tans[q[i].id] = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (k == 3) {\n\t\t\tfor (int j = 1; j * j <= x; j++)\n\t\t\t\tif ((!(x % j)) && (now1[j] && now1[x / j])) {\n\t\t\t\t\tans[q[i].id] = 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t}\n\t\t// ans[q[i].id] = now;\n\t}\n\tfor (int i = 1; i <= m; i++)\n\t\tif (!ans[i])\n\t\t\tputs(\"bi\");\n\t\telse \n\t\t\tputs(\"hana\");\n\treturn 0;\n}\n```",
        "postTime": 1569637965,
        "uid": 13746,
        "name": "Trimsteanima",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u795e\u4ed9\u9898\u76ee\u3002\u9996\u5148\uff0c\u8fd9\u9898\u662f\u79bb\u7ebf\u7684\uff0c\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u83ab\u961f\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u83ab\u961f\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u663e\u7136\u9700\u8981\u7ef4\u62a4\u503c\u57df\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u503c\u662f\u5426\u51fa\u73b0\u3002\u56e0\u4e3a\u8fd9\u91cc\u6d89\u53ca\u5230\u6574\u4e2a\u6570\u7ec4\u5e73\u79fb\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\u4f7f\u7528 bitset \u53ef\u4ee5\u5927\u5927\u4f18\u5316\u5e38\u6570\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c1\uff1a\u5c06\u6b63\u5411\u7684 bitset \u5de6\u79fb $x$ \u4f4d\uff0c\u5e76\u4e0e\u539f bitset \u8fdb\u884c\u4e0e\u8fd0\u7b97\u3002  \n\u5bf9\u4e8e\u64cd\u4f5c2\uff1a\u7a0d\u5fae\u6709\u4e00\u70b9\u96be\u60f3\uff0c\u7531\u4e8e bitset \u652f\u6301\u5de6\u79fb\u3001\u53f3\u79fb\u8fd0\u7b97\uff0c\u56e0\u6b64\u52a0\u6cd5\u662f\u4e0d\u65b9\u4fbf\u7684\uff0c\u4e0d\u59a8\u5c1d\u8bd5\u6539\u6210\u51cf\u6cd5\u3002$x_1+x_2=x$ \u5c31\u7b49\u540c\u4e8e $(\\text{MAX} - x_2) - x_1 = \\text{MAX} - x$\u3002\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53cd\u5411\u7684 bitset \u7ef4\u62a4 $\\text{MAX} - x$\u3002  \n\u5bf9\u4e8e\u64cd\u4f5c3\uff1a\u76f4\u63a5\u66b4\u529b $\\mathcal O(\\sqrt n)$ \u5373\u53ef\u3002\n\n\u7adf\u7136\u4e0d\u5361\u5e38\uff01\u8d5e\u7f8elxl\uff01\n\n[Code Here](https://www.luogu.com.cn/paste/v29pz3pz)",
        "postTime": 1596334570,
        "uid": 319914,
        "name": "Aftershock",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u8fd9\u9898\u8fd8\u662f\u6709\u4e9b\u7ec6\u8282\u7684\u3002\n\n\u53d1\u73b0\u503c\u57df\u548c\u5e8f\u5217\u957f\u5ea6\u540c\u89c4\u6a21\u3002\n\n\u4e8e\u662f\u603b\u5f52\u5148\u60f3\u529e\u6cd5\u80fd\u4e0d\u80fd\u628a\u533a\u95f4\u4e0a\u7684\u503c\u57df\u8bbf\u95ee\u6570\u7ec4\u5f04\u51fa\u6765\u5427\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\uff08\u6574\u4e2a\u5e8f\u5217\u4e00\u822c\u603b\u662f\u6bd4\u533a\u95f4\u597d\u6363\u9f13\uff0c\u8be6\u89c1\u533a\u95f4k\u5927\uff09\n\n\u600e\u4e48\u5f04\uff1f\n\n\u60f3\u60f3\uff0clxl\u7684\u9898\u561b\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n**\u4e8c\u8bdd\u4e0d\u8bf4\u4e0a\u624b\u5206\u5757\u3002**\n\n~~\u540e\u6765\u770b\u5230\u597d\u50cf\u5f88\u591a\u4eba\u662f\u83ab\u961f\uff1f\u4e0d\u7ba1\u4e86\u5c31\u5206\u5757\u5427\u3002~~\n\n\u5206\u5757\uff0c\u6bcf\u4e00\u5757\u62d6\u4e00\u4e2abitset\u8868\u793a\u5757\u5185\u7684\u8bbf\u95ee\u6570\u7ec4\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5 $\\operatorname{O}(\\sqrt n)$ \u7684\u65f6\u95f4\u89e3\u51fa\u4efb\u610f\u533a\u95f4\u8bbf\u95ee\u6570\u7ec4\u4e86\u3002\n\n\u63a5\u7740\u5f00\u59cb\u8003\u8651\u4e09\u79cd\u64cd\u4f5c\u5206\u522b\u7684\u5904\u7406\u65b9\u6cd5\u3002\n\n\u5176\u5b9e\u4e58\u6cd5\u8fd8\u662f\u6bd4\u8f83\u597d\u505a\u7684\uff0c $\\operatorname{O}(\\sqrt n)$ \u679a\u4e3e\u56e0\u6570\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u7565\u3002\n\n\u63a5\u7740\u5f00\u59cb\u8003\u8651\u52a0\u51cf\u6cd5\u3002\n\n\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u597d\u529e\u6cd5\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u5f97\u4e86\u5c31\u66b4\u529b\u5427\u3002\n\n**\u600e\u4e48\u66b4\u529b\uff1f**\n\n**\u5145\u5206\u5229\u7528\u597dbitset\u7684\u5404\u79cd\u8fd0\u7b97\u7b26\u5427\uff01**\n\n\u51cf\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u8bbe\u8ba1\u6570\u5668\u4e3atmp\uff0c\u5219\u5982\u679c(tmp&tmp>>x).any()\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u4e86\u3002\n\n\u52a0\u6cd5\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u65e0\u975e\u5c31\u662f\u518d\u6765\u4e00\u4e2a\u8ba1\u6570\u5668\u8bb0\u5f55\u6bcf\u4e2a\u6570\u7684\u76f8\u53cd\u6570\u610f\u4e49\u4e0b\u7684\u8bbf\u95ee\u6570\u7ec4\uff0c\u4e24\u4e2abitset\u641e\u4e00\u4e0b\uff0c\u5c31\u8f6c\u5316\u4e3a\u51cf\u6cd5\u5dee\u4e0d\u591a\u65b9\u6cd5\u3002\n\n**\u4f46\u76f8\u53cd\u6570\u662f\u8d1f\u6570\uff0c\u4e0d\u80fd\u76f4\u63a5\u4e0b\u6807\uff0c\u600e\u4e48\u529e\uff1f**\n\n\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u5e73\u79fb\u4e00\u6bb5\u5c31\u597d\u4e86\u3002\n\n\u7efc\u4e0a\uff0c\u8fd9\u9898\u5c31**\u57fa\u672c**\u6ca1\u4e86\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u7ed9\u4e2a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+9;\nconst int ms=4e2+9;\nint bel[N],bg[ms],ed[ms],a[N];\n//\u4e0b\u6807\u6240\u5728\u5757\u53f7\uff0c\u5757\u5f00\u59cb\u5904\uff0c\u7ed3\u675f\u5904\uff0c\u539f\u6570\u7ec4\nbitset<N>bs[ms][2],tmp,tmp2;\n//bitset,\u8bbf\u95ee\u6570\u7ec4\uff0c\u76f8\u53cd\u6570\u8bbf\u95ee\u6570\u7ec4\ninline int read(){\n\tregister char c=getchar();\n\twhile(!isdigit(c))c=getchar();\n\tregister int x=c^48;\n\twhile(isdigit(c=getchar()))x=x*10+(c^48);\n\treturn x;\n}//\u5feb\u8bfb\nint main(){\n\tregister int n=read(),m=read();\n\tfor(register int i=1;i<=n;++i)a[i]=read();\n\tconst int sz=sqrt(n);\n\tfor(register int i=1;i<=n;++i){\n\t\tbel[i]=i/sz+1;\n\t\tif(bel[i]!=bel[i-1]){\n\t\t\ted[bel[i-1]]=i-1;\n\t\t\tbg[bel[i]]=i;\n\t\t}\n\t\tbs[bel[i]][0].set(a[i]);\n\t\tbs[bel[i]][1].set(N-1-a[i]);\n\t}\n\ted[bel[n]]=n;\n\t//\u5efa\u5757\n\twhile(m--){\n\t\tregister int opt=read(),l=read(),r=read(),x=read();\n\t\ttmp.reset(),tmp2.reset();\n\t\tif(bel[l]==bel[r])while(l<=r)tmp.set(a[l]),tmp2.set(N-1-a[l]),++l;\n\t\telse{\n\t\t\twhile(l!=bg[bel[l]])tmp.set(a[l]),tmp2.set(N-1-a[l]),++l;\n\t\t\twhile(r!=ed[bel[r]])tmp.set(a[r]),tmp2.set(N-1-a[r]),--r;\n\t\t\tfor(register int pos=bel[l];pos<=bel[r];++pos)tmp|=bs[pos][0],tmp2|=bs[pos][1];\t\n\t\t}//\u6363\u9f13\u533a\u95f4\u8bbf\u95ee\u6570\u7ec4\n\t\tswitch(opt){\n\t\t\tcase 1:\n\t\t\t\tputs((tmp&(tmp>>x)).any()?\"hana\":\"bi\");\t\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tputs(((tmp2>>N-1-x)&tmp).any()?\"hana\":\"bi\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tregister bool flg=0;\n\t\t\t\tfor(register int i=1;i*i<=x;++i)if(i<N&&x/i<N&&x%i==0&&tmp.test(i)&&tmp.test(x/i)){\n\t\t\t\t\tflg=1;\n\t\t\t\t\tputs(\"hana\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!flg)puts(\"bi\");\n\t\t\t\tbreak;\n\t\t}//\u5206\u7c7b\u5904\u7406\uff0c\u8981\u662f\u7406\u89e3\u4e86\u6211\u8bf4\u7684\u8bdd\u4ee3\u7801\u5e94\u8be5\u633a\u597d\u61c2\u7684\n\t}\n    return 0;\n}\n```\n\u795d\u5927\u5bb6AC\uff01\n\n~~\u53cd\u6b63\u6211\u8fd9\u4e2a\u4ee3\u7801\u53ea\u62ff\u4e8620\u5206\u3002~~\n\n\u4f46\u5206\u5757\u5e38\u6570\u5de8\u5927\uff0c\u8fd9\u4e2a\u4f1aTLE\u523020.\n\n\u5982\u4f55\u62ef\u6551\uff1f\n\n**\u89c2\u5bdf\u5230\u4e2d\u95f4\u4e00\u6bb5**\n\n```cpp\nfor(register int pos=bel[l];pos<=bel[r];++pos)tmp|=bs[pos][0],tmp2|=bs[pos][1];\t\n```\n**\u5176\u5b9e\u662f\u53ef\u4ee5\u770b\u6210\u533a\u95f4\u6c42\u6700\u5927\u503c\u3002**\n\n\u6ce8\u610f\u4e0d\u80fd\u770b\u6210\u533a\u95f4\u6c42\u548c\u3002\n\n\u90a3\u5c31\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u7ebf\u6bb5\u6811\uff0cST\u8868\u90fd\u53ef\u4ee5\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u7ebf\u6bb5\u6811\uff08\u5f53\u7136\u662f\u975e\u9012\u5f52\u7248\uff09\u3002\n\n\u4e8e\u662f\u6253\u51fa\u4ee3\u7801\uff08\u4e0d\u7ed9\u6ce8\u91ca\u4e86\uff0c\u548c\u524d\u9762\u5927\u90fd\u5dee\u4e0d\u591a\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+9;\nconst int ms=5e2+9;\nint bel[N],bg[ms],ed[ms],a[N];\nbitset<N>tmp0,tmp1,zkw[2][1025];\ninline int read(){\n\tregister char c=getchar();\n\twhile(!isdigit(c))c=getchar();\n\tregister int x=c^48;\n\twhile(isdigit(c=getchar()))x=x*10+(c^48);\n\treturn x;\n}\nint main(){\n\tconst int n=read(),sz=sqrt(n),M=512;\n\tregister int m=read();\n\tfor(register int i=1;i<=n;++i){\n\t\tif((bel[i]=i/sz+1)!=bel[i-1])ed[bel[i-1]]=i-1,bg[bel[i]]=i;\n\t\tzkw[0][bel[i]+M].set(a[i]=read()),zkw[1][bel[i]+M].set(N-1-a[i]);\n\t}ed[bel[n]]=n;\n\tfor(register int i=M;i;--i)zkw[0][i]=zkw[0][i<<1]|zkw[0][i<<1|1],zkw[1][i]=zkw[1][i<<1]|zkw[1][i<<1|1];\n\twhile(m--){\n\t\tregister int opt=read(),l=read(),r=read(),x=read();\n\t\ttmp0.reset(),tmp1.reset();\n\t\tif(bel[l]==bel[r])while(l<=r)tmp0.set(a[l]),tmp1.set(N-1-a[l++]);\n\t\telse{\n\t\t\twhile(l!=bg[bel[l]])tmp0.set(a[l]),tmp1.set(N-1-a[l++]);\n\t\t\twhile(r!=ed[bel[r]])tmp0.set(a[r]),tmp1.set(N-1-a[r--]);\n\t\t//\tfor(register int pos=bel[l];pos<=bel[r];++pos)tmp0|=st[0][0][pos],tmp1|=st[1][0][pos];\n\t\t\tfor(l=bel[l]+M-1,r=bel[r]+M+1;l^r^1;l>>=1,r>>=1){\n\t\t\t\tif(l&1^1)tmp0|=zkw[0][l^1],tmp1|=zkw[1][l^1];\n\t\t\t\tif(r&1  )tmp0|=zkw[0][r^1],tmp1|=zkw[1][r^1];\n\t\t\t}\n\t\t}\n\t\tif(opt==1)puts((tmp0&tmp0>>x).any()?\"hana\":\"bi\");\n\t\tif(opt==2)puts((tmp0&tmp1>>N-1-x).any()?\"hana\":\"bi\");\n\t\tif(opt==3){\n\t\t\tregister int flg=0;\n\t\t\tfor(register int i=1;i*i<=x;++i)if(x%i==0&&tmp0.test(i)&&tmp0.test(x/i)){\n\t\t\t\tflg=1,puts(\"hana\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!flg)puts(\"bi\");\n\t\t}\n\t}\n    return 0;\n}\n```\n\n\u795d\u5927\u5bb6AC\uff01\n\n~~\u53cd\u6b63\u6211\u8fd8\u6ca1A~~\u3002\n\n\u8fd8\u662fTLE60\u5206\uff0c~~\u8fd9\u5206\u5757\u5e38\u6570\u771f\u4e0d\u662f\u4e00\u822c\u7684\u5927~~\u3002\n\n\u6700\u540e\u8fd8\u6709\u4ec0\u4e48\uff1f\n\n\u8003\u8651\u5230\u8bfb\u5165\u91cf\u8f83\u5927\uff0c**\u8fd8\u53ef\u4ee5fread\u62ef\u6551\u4e00\u4e0b**\u3002\n\n\u6700\u540e\u662f~~\u9ad8\u6e05\u65e0\u6ce8\u91ca\u65b9\u4fbf\u76f4\u63a5Ctrl+C+V~~\u7684\u5b8c\u6574AC\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2),*p1++)\nchar buf[1<<23],*p1=buf,*p2=buf,obuf[1<<23],*O=obuf;\nusing namespace std;\nconst int N=1e5+9;\nconst int ms=5e2+9;\nint bel[N],bg[ms],ed[ms],a[N];\nbitset<N>tmp0,tmp1,zkw[2][1025];\ninline int read(){\n\tregister char c=getchar();\n\twhile(!isdigit(c))c=getchar();\n\tregister int x=c^48;\n\twhile(isdigit(c=getchar()))x=x*10+(c^48);\n\treturn x;\n}\nint main(){\n\tconst int n=read(),sz=sqrt(n),M=512;\n\tregister int m=read();\n\tfor(register int i=1;i<=n;++i){\n\t\tif((bel[i]=i/sz+1)!=bel[i-1])ed[bel[i-1]]=i-1,bg[bel[i]]=i;\n\t\tzkw[0][bel[i]+M].set(a[i]=read()),zkw[1][bel[i]+M].set(N-1-a[i]);\n\t}ed[bel[n]]=n;\n\tfor(register int i=M;i;--i)zkw[0][i]=zkw[0][i<<1]|zkw[0][i<<1|1],zkw[1][i]=zkw[1][i<<1]|zkw[1][i<<1|1];\n\twhile(m--){\n\t\tregister int opt=read(),l=read(),r=read(),x=read();\n\t\ttmp0.reset(),tmp1.reset();\n\t\tif(bel[l]==bel[r])while(l<=r)tmp0.set(a[l]),tmp1.set(N-1-a[l++]);\n\t\telse{\n\t\t\twhile(l!=bg[bel[l]])tmp0.set(a[l]),tmp1.set(N-1-a[l++]);\n\t\t\twhile(r!=ed[bel[r]])tmp0.set(a[r]),tmp1.set(N-1-a[r--]);\n\t\t//\tfor(register int pos=bel[l];pos<=bel[r];++pos)tmp0|=st[0][0][pos],tmp1|=st[1][0][pos];\n\t\t\tfor(l=bel[l]+M-1,r=bel[r]+M+1;l^r^1;l>>=1,r>>=1){\n\t\t\t\tif(l&1^1)tmp0|=zkw[0][l^1],tmp1|=zkw[1][l^1];\n\t\t\t\tif(r&1  )tmp0|=zkw[0][r^1],tmp1|=zkw[1][r^1];\n\t\t\t}\n\t\t}\n\t\tif(opt==1)puts((tmp0&tmp0>>x).any()?\"hana\":\"bi\");\n\t\tif(opt==2)puts((tmp0&tmp1>>N-1-x).any()?\"hana\":\"bi\");\n\t\tif(opt==3){\n\t\t\tregister int flg=0;\n\t\t\tfor(register int i=1;i*i<=x;++i)if(x%i==0&&tmp0.test(i)&&tmp0.test(x/i)){\n\t\t\t\tflg=1,puts(\"hana\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!flg)puts(\"bi\");\n\t\t}\n\t}\n    return 0;\n}\n```\n\n\u7ec8\u4e8e\u80fdAC\u4e86\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u603b\u7ed3\uff1a\u5176\u4f7f\u7528\u83ab\u961f\u53ef\u4ee5\u907f\u514d\u8fd9\u4e9b\u5361\u5e38\u624b\u6bb5\u3002\n\n\u4f46\u8fd9\u4e2a\u662f\u5728\u7ebf\u505a\u6cd5\uff0c\u8fd8\u662f\u51b3\u5b9a\u6253\u51fa\u6765\u7ed9\u5927\u5bb6\u53c2\u8003\u4e00\u4e0b\u3002\n\n\u5199\u7684\u4e0d\u5bb9\u6613\uff0c\u987a\u624b\u7559\u4e2a\u8d5e\u5457~\n\n\u771f\u00b7\u795d\u5927\u5bb6AC\uff01\n\nOver.",
        "postTime": 1585209875,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "# [P3674 \u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f](https://www.luogu.org/problemnew/show/P3674)\n\n(\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u89e3\u91ca\u5176\u4ed6\u9898\u89e3\u6240\u6ca1\u63d0\u5230\u7684\u548c\u95ee\u9898\u7684\u5f62\u8c61\u5316\u89e3\u91ca)\n\n\u521d\u770b\u8fd9\u9053\u9898\u6ca1\u4ec0\u4e48\u5934\u7eea\n\n\u53d1\u73b0\u7ed9\u51fa\u4e86\u6700\u5927\u503c\u7684\u8303\u56f4\n\n\u8fd9\u4e0d\u5c31\u660e\u793a\u8981\u5b58\u6570\u7ec4!\n\n\u7136\u540e\u5c31\u60f3\u5230\u4e86\u5f53\u4e00\u4e2a\u6570\u8fdb\u6765\u7684\u65f6\u5019\n\n\u4f1a\u5728\u4e4b\u524d\u7684\u6570\u4e0a\u65b0\u4ea7\u751f\u4e00\u4e9b\u5dee\u548c\u548c\n\n\u7136\u540e\u601d\u8def\u5c31\u6b6a\u4e86,\u60f3\u7740\u50a8\u5b58\u5dee\u548c\u548c\u7684\u5b58\u5728\u6027,\u4e0d\u597d\u5220\u9664\n\n\u4e00\u7b79\u83ab\u5c55\n\n\u4e8e\u662f\u5c31\u5077\u5077\u77a5\u4e86\u4e00\u773c\u9898\u89e3,\u5f00\u59cb\u8fd8\u662f\u4ee5\u4e3a\u5927\u5bb6\u5b58\u7684\u90fd\u662f\u5dee\u548c\u548c,\u4ec0\u4e48\u90fd\u770b\u4e0d\u61c2\n\n\u6ca1\u51e0\u4e2a\u8bb2\u6e05\u695a\u4e86\u7684,\u8fd8\u662f\u95ee\u4e86\u673a\u623f\u5927\u4f6c@[March_H](https://www.luogu.org/space/show?uid=92770)\u624d\u77e5\u9053\u5b58\u7684\u662f\u533a\u95f4\u5185\u6570\u7684\u5b58\u5728\u6027\n\n\u8fd9\u91cc\u6211\u5c31\u5f62\u8c61\u63cf\u8ff0\u4e00\u4e0b\u548c\u7684\u5904\u7406\u65b9\u5f0f\n\n## \u5148\u8bb2\u8bb2\u5dee\n\n\u6211\u4eec\u8981\u6c42\u5dee\u4e3ax\u7684\u4e24\u4e2a\u6570\u662f\u5426\u5b58\u5728,\n\n\u8bbe\u4e3aa,b(a<b),\u518d\u8bbe\u50a8\u5b58\u5b58\u5728\u6027\u7684bitset\u4e3afla\n\n\u5219b=a+x\n\n\u800c\u7528fla\u5b58\u4e86\u5b58\u5728\u6027\u540e,\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u67d0\u4e2a\u4f4d\u7f6ea\u4e0e\u5bf9\u5e94\u4f4d\u7f6ea+x\u662f\u5426\u540c\u65f6\u5b58\u5728\u7684\u95ee\u9898\n\n\u90a3\u5c31\u76f4\u63a5\u5c06fla\u5de6/\u53f3\u79fbx\u4f4d\u518d\u4e0e\u539ffla\u505a\u4e0e\u8fd0\u7b97,\u67e5\u770b\u7ed3\u679c\u662f\u5426\u67091(\u53ef\u7528bitset\u81ea\u5e26any\u51fd\u6570)\u5373\u53ef\n\n## \u5982\u4f55\u8868\u793a\u548c\n\n\u82e5\u95ee\u548c\u662f\u5426\u6709x,\u4f1a\u53d1\u73b0\u7b80\u5355\u7684\u4f4d\u8fd0\u7b97\u65e0\u6cd5\u4f53\u73b0\u548c\n\n\u5206\u6790\u5206\u6790\u8fd9\u4e2a\u95ee\u9898,\u8fd8\u662f\u5047\u8bbea,b\u4e3a\u8fd9\u4e24\u4e2a\u6570\n\na+b=x\n\n\u6211\u4eec\u53ef\u4ee5\u753b\u4e00\u753b,\u7528\u96c6\u5408\u8868\u793a\u770b\u770b(\u6211\u4e5f\u4e0d\u77e5\u9053\u5e94\u8be5\u8bf4\u662f\u4ec0\u4e48,\u5c31\u8bf4\u662f\u96c6\u5408\u5427)\n\n![](https://cdn.luogu.com.cn/upload/pic/50802.png)\n\n\u8fd9\u91cc\u7528S\u8868\u793aN,\u4ee5\u663e\u793a\u5b83\u662f\u5168\u96c6\n\n\u6211\u4eec\u6700\u597d\u7684\u5f53\u7136\u662f\u5c06\u548c\u95ee\u9898\u8f6c\u6362\u6210\u5dee\u95ee\u9898\n\n\u663e\u7136\u96be\u4ee5\u8868\u73b0a\u4e0e\u4e00\u4e2a\u4e0eb\u6709\u5173\u7684\u6570\u5dee\u4e3ax\n\n\u6362\u4e00\u4e2a\u601d\u8def,\u770b\u662f\u5426\u5b58\u5728\u5dee\u4e3aN-x\n\n\u8bbe\u4e3ay\n\n![](https://cdn.luogu.com.cn/upload/pic/50803.png)\n\n\u800c\u4e0ea\u5dee\u4e3ay\u7684\u663e\u7136\u662fN-b,\n\n\u5373\u5de6\u53f3\u4e24\u8fb9\u51cf\u53bb\u5de6\u8fb9\u5c31\u662f\u53f3\u8fb9\n\n\u8fd9\u5c31\u53d8\u6210\u5dee\u95ee\u9898\u4e86\n\n\u5373:\n** \u662f\u5426\u5b58\u5728a\u4e0e\u76f8\u5e94\u7684N-b,\u4f7f\u5f97\u5176\u5dee\u4e3aN-x**\n\n\u82e5\u5b58\u5728,\u5219a,b\u5c31\u6ee1\u8db3a+b=x\n\n\u6545\u518d\u5b58\u4e00\u4e2aN-a\u7684\u5b58\u5728\u6027\u7684\u6570\u7ec4\n\n\u6b63\u662f\u56e0\u4e3a\u4e24\u4e2a\u95ee\u9898\u90fd\u662f\u5dee\u95ee\u9898\n\n\u6545\u548c\u4e0e\u5dee\u7684\u4ee3\u7801\u90fd\u6bd4\u8f83\u7c7b\u4f3c\n\n\u4e00\u4e2a\u662fans=fla&(fla>>x)\n\n\u53e6\u4e00\u4e2a\u662fans=fla&(refla>>(N-x))\n\n\u5de6\u79fb\u53f3\u79fb\u90fd\u4e00\u6837,\u6bd5\u7adf**\u76f8\u5bf9\u8fd0\u52a8**\u662f\u4e00\u6837\u7684,233333\n\n```cpp\n\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#include<bitset>\n#include<cmath>\nusing namespace std;\nconst int N=100000;\ntemplate<class T>inline void read(T &num){\n\tchar ch;\n\twhile(!isdigit(ch=getchar()));\n\tnum=ch-'0';\n\twhile(isdigit(ch=getchar()))num=num*10+ch-'0';\n}\nbitset<N+5> fla;\nbitset<N+5> refla;\n\nstruct Infor{\n\tint l,r,typ,ran,blo,x;\n}a[N+5];\nint cnt[N+5],n,m,val[N+5],ans[N+5];\nbool cmp(const Infor a,const Infor b){\n\treturn a.blo==b.blo?((a.blo&1)?a.r<b.r:a.r>=b.r):a.blo<b.blo;\n}\n\nint main(){\n//\tfreopen(\"xiaoqingxing.out\",\"w\",stdout);\n\tread(n),read(m);\n\tfor(int i=1;i<=n;++i)read(val[i]);\n\tdouble sqrn=sqrt(n);\n\tfor(int i=1;i<=m;++i){\n\t\tread(a[i].typ),read(a[i].l),read(a[i].r),read(a[i].x);\n\t\ta[i].ran=i;\n\t\ta[i].blo=a[i].l/sqrn;\n\t}\n\tsort(a+1,a+1+m,cmp);\n\tint tem=0,l=1,r=0;\n\tfor(int i=1;i<=m;++i){\n\t\twhile(l<a[i].l){\n\t\t\tif((--cnt[val[l]])==0){\n\t\t\t\tfla[val[l]]=0;\n\t\t\t\trefla[N-val[l]]=0;\n\t\t\t}\n\t\t\tl++;\n\t\t}\n\t\twhile(r>a[i].r){\n\t\t\tif((--cnt[val[r]])==0){\n\t\t\t\tfla[val[r]]=0;\n\t\t\t\trefla[N-val[r]]=0;\n\t\t\t}\n\t\t\tr--;\n\t\t}\n\t\twhile(l>a[i].l){\n\t\t\tl--;\n\t\t\tif((++cnt[val[l]])==1){\n\t\t\t\tfla[val[l]]=1;\n\t\t\t\trefla[N-val[l]]=1;\n\t\t\t}\n\t\t}\n\t\twhile(r<a[i].r){\n\t\t\tr++;\n\t\t\tif((++cnt[val[r]])==1){\n\t\t\t\tfla[val[r]]=1;\n\t\t\t\trefla[N-val[r]]=1;\n\t\t\t}\n\t\t}\n\t\tint x=a[i].x;\n\t\tswitch(a[i].typ){\n\t\t\tcase 1:ans[a[i].ran]=(fla&(fla<<x)).any();break;\n\t\t\tcase 2:ans[a[i].ran]=(fla&(refla>>(N-x))).any();break;\n\t\t\tcase 3:\n\t\t\t\tint j,k;\n\t\t\t\tfor(j=1,k=sqrt(x);j<=k&&!(x%j==0&&fla[j]&&fla[x/j]);++j);\n\t\t\t\tans[a[i].ran]=(j<=k);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)printf(\"%s\\n\",ans[i]?\"hana\":\"bi\");\n\treturn 0;\n}\n\n```\n",
        "postTime": 1549071031,
        "uid": 106642,
        "name": "Ajsoabk",
        "ccfLevel": 0,
        "title": "P3674 \u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n~~\u5c3d\u7ba1\u9898\u610f\u5df2\u7ecf\u591f\u7b80\u6d01\u4e86\u4f46\u662f\u6211\u8fd8\u662f\u8981\u575a\u6301\u6211\u7684\u9898\u89e3\u98ce\u683c~~\n\n## \u9898\u89e3\n\ndllxl\u96be\u7684\u7684\u4e00\u4e2a\u6bd4\u8f83\u6c34\u7684\u9898\u3002\n\n\u6211\u4eec\u521d\u4e00\u770b\u8fd9\u9053\u9898\u76ee\u3002\u6ca1\u4fee\u6539\uff0c\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u57fa\u672c\u4e0a\u5927\u601d\u8def\u5c31\u5f80\u83ab\u961f\u8d70\u4e86\u3002\n\n\u8003\u8651\u4e00\u79cd\u66b4\u529b\u505a\u6cd5\uff0c\u5bf9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u5f00\u6876\u7b97\u8d21\u732e\uff0c\u52a0\u6cd5\u51cf\u6cd5\u7684\u8ba1\u7b97\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u52a0\u6cd5\u5c31\u662f\u51cf\u6cd5\u7684\u9006\u8fd0\u7b97\uff0c\u53cd\u7740\u5f00\u5c31\u884c\u4e86\u3002\u4e58\u6cd5\u76f4\u63a5\u679a\u4e3e\u7ea6\u6570\uff0c\u6bd5\u7adf\u8fd9\u9053\u9898\u7684\u503c\u57df\u548c\u6570\u5217\u957f\u5ea6\u53ca\u8be2\u95ee\u662f\u4e00\u6837\u7684\u3002\n\n\u53d1\u73b0\u5bb9\u6613\u70b8\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u7684\u6876\u662f\u6839\u636e\u5b58\u5728\u6027\u5f00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528bitset\u6765\u4f18\u5316\u3002\n\n\u8bb0\u5f55\u4e24\u4e2abitset\u4e3aclassic\u548cinverse\u3002\n\n\u5982\u679c\u4e3a\u64cd\u4f5c\u4e00\u7684\u8bdd\u5c31\u662f\uff1a\n\n$$\n\\operatorname{ANS_{Q_{i}->id}}=(\\operatorname{classic\\ bitand\\ (classic\\ shl\\ Q_{i}->x)}).\\operatorname{any()}\n$$\n\n\u64cd\u4f5c\u4e8c\u7c7b\u4f3c\uff1a\n\n$$\n\\operatorname{ANS_{Q_{i}->id}}=(\\operatorname{classic\\ bitand\\ (inverse\\ shr\\ (100000-Q_{i}->x))}).\\operatorname{any()}\n$$\n\n\u64cd\u4f5c\u4e09\u5219\u76f4\u63a5\u679a\u4e3e\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n\nusing namespace std;\n\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n#ifndef ONLINE_JUDGE\n#define gc() getchar()\n#else\n#define gc() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\n#endif\n#define is() (ch >= '0' && ch <= '9')\n\ntemplate < typename Type >\nvoid read(Type& a) {\n\ta = 0; char ch; bool f = 0;\n\twhile (!(ch = gc(), is())) if (ch == '-') f = 1;\n\twhile (is()) a = (a << 3) + (a << 1) + (ch ^ '0'), ch = gc();\n\ta = (f ? -a : a);\n}\n\ntemplate < typename Type, typename... Args >\nvoid read(Type& t, Args&... args) {\n\tread(t), read(args...);\n}\n\nconst int N = 1e5 + 5, R = 100000;\nstruct Query_Node {\n\tint id, pos;\n\tint tp, l, r, x;\n\tbool operator < (const Query_Node& rhs) const {\n\t\tif (pos != rhs.pos)\t\treturn pos < rhs.pos;\n\t\telse\treturn r < rhs.r;\n\t}\n} e[N];\nint n, m, Size, a[N], cnt[N], ans[N];\nbitset < N > classic, inverse;\n\nvoid Add(int x) {\n\t++cnt[a[x]];\n\tif (cnt[a[x]] == 1) {\n\t\tclassic[a[x]] = 1;\n\t\tinverse[R - a[x]] = 1;\n\t}\n}\n\nvoid Del(int x) {\n\t--cnt[a[x]];\n\tif (cnt[a[x]] == 0) {\n\t\tclassic[a[x]] = 0;\n\t\tinverse[R - a[x]] = 0;\n\t}\n}\n\nvoid Contribute() {\n\tint l = 1, r = 0;\n\tfor (int i = 1; i <= m; ++i) {\n\t\twhile (l < e[i].l) Del(l++);\n\t\twhile (l > e[i].l) Add(--l);\n\t\twhile (r > e[i].r) Del(r--);\n\t\twhile (r < e[i].r) Add(++r);\n\t\tif (e[i].tp == 1) {\n\t\t\tans[e[i].id] = (classic & (classic << e[i].x)).any();\n\t\t} else if (e[i].tp == 2) {\n\t\t\tans[e[i].id] = (classic & (inverse >> (R - e[i].x))).any();\n\t\t} else {\n\t\t\tfor (int j = 1; j * j <= e[i].x; ++j) {\n\t\t\t\tif (e[i].x % j == 0 && classic[j] && classic[e[i].x / j])\n\t\t\t\t\tans[e[i].id] = 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main() {\n\tread(n, m), Size = sqrt(n);\n\tfor (int i = 1; i <= n; ++i) \tread(a[i]);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tread(e[i].tp, e[i].l, e[i].r, e[i].x);\n\t\te[i].id = i, e[i].pos = (e[i].l - 1) / Size + 1;\n\t}\n\tsort(e + 1, e + 1 + m);\n\tContribute();\n\tfor (int i = 1; i <= m; ++i) \tputs(ans[i] ? \"hana\" : \"bi\");\n\treturn 0;\n}\n```",
        "postTime": 1591971213,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u83ab\u961f+$bitset$\u4f18\u5316\n\n\u64cd\u4f5c$1$\uff1a\t\n\n\u7ef4\u62a4\u4e00\u4e2a$bitset:$ $cnt1$.$cnt1_i$\u8868\u793a$i$\u8fd9\u4e2a\u6570\u662f\u5426\u51fa\u73b0\n\n\u82e5\u5b58\u5728\u6570$y,z$\u4f7f\u5f97$y-z=x$,\u5219$y = z + x$\n\n\u6545\u5c06$cnt1$\u4e0e($cnt1<<x$)\u505a\u4e0e\u8fd0\u7b97\u5373\u53ef\n\n\u64cd\u4f5c$2$\uff1a\t\n\n\u7ef4\u62a4\u4e24\u4e2a$bitset: cnt1,cnt2$.\n\n$cnt1_i$\u8868\u793a$i$\u8fd9\u4e2a\u6570\u662f\u5426\u51fa\u73b0,$cnt2_i$\u8868\u793a$MaxN-i$\u8fd9\u4e2a\u6570\u662f\u5426\u51fa\u73b0\n\n\u82e5\u5b58\u5728\u6570$y,z$\u4f7f\u5f97$y+z=x$,\u5219\u6709$y + z - MaxN= x - MaxN$\n\n\u4ee4$z'=MaxN-z$\uff0c\u5219\u539f\u5f0f\u8f6c\u5316\u4e3a$y - z' = x - MaxN$\n\n\u90a3\u4e48\u5c31\u53d8\u6210\u4e86\u64cd\u4f5c1\u4e86\u3002\u3002\u3002\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u5728cnt2\u4e2d\u67e5$z'$\n\n\u6545\u5c06$cnt1$\u4e0e$(cnt2>>($MaxN-x$))$\u505a\u4e0e\u8fd0\u7b97\u5373\u53ef(\u4e3a\u4ec0\u4e48\u53f3\u79fb$MaxN-x$\u4f4d\u5462\uff1f\u56e0\u4e3acnt2\u548ccnt1\u662f\u53cd\u7740\u5b58\u50a8\u7684)\n\n\u64cd\u4f5c$3$\uff1a\n\n\u66b4\u529b\u679a\u4e3e$x$\u7684\u7ea6\u6570\u67e5\u8be2\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\nconst int MaxN = 100010;\nstruct query\n{\n    int id, pos;\n    int op, l, r, x;\n};\nquery q[MaxN];\nint n, m, size;\nint a[MaxN], cnt[MaxN], ans[MaxN];\nstd::bitset<100010> cnt1, cnt2;\ninline int cmp(query a, query b)\n{\n    if (a.pos != b.pos)\n        return a.pos < b.pos;\n    else\n        return a.r < b.r;\n}\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\ninline void add(int x)\n{\n    ++cnt[a[x]];\n    if(cnt[a[x]] == 1)\n        cnt1[a[x]] = 1, cnt2[100000 - a[x]] = 1;\n}\ninline void del(int x)\n{\n    --cnt[a[x]];\n    if(cnt[a[x]] == 0)\n        cnt1[a[x]] = 0, cnt2[100000 - a[x]] = 0;\n}\ninline void solve()\n{\n    int l = 1, r = 0;\n    for (int i = 1; i <= m; i++)\n    {\n        while (l > q[i].l)\n            --l, add(l);\n        while (r < q[i].r)\n            ++r, add(r);\n        while (l < q[i].l)\n            del(l), ++l;\n        while (r > q[i].r)\n            del(r), --r;\n        if (q[i].op == 1)\n            ans[q[i].id] = (cnt1 & (cnt1 << q[i].x)).any();\n        else if (q[i].op == 2)\n            ans[q[i].id] = (cnt1 & (cnt2 >> (100000 - q[i].x))).any();\n        else if (q[i].op == 3)\n        {\n            for (int j = 1; j * j <= q[i].x; j++)\n            {\n                if (q[i].x % j == 0)\n                    if (cnt1[j] && cnt1[q[i].x / j])\n                        ans[q[i].id] = 1;\n            }\n        }\n    }\n}\nint main()\n{\n    n = read(), m = read();\n    size = pow(n, 0.55);\n    for (int i = 1; i <= n; i++)\n        a[i] = read();\n    for (int i = 1; i <= n; i++)\n    {\n        q[i].op = read(), q[i].l = read(), q[i].r = read(), q[i].x = read();\n        q[i].id = i, q[i].pos = (q[i].l - 1) / size + 1;\n    }\n    std::sort(q + 1, q + m + 1, cmp);\n    solve();\n    for (int i = 1; i <= m; i++)\n        puts(ans[i] == 1 ? \"hana\" : \"bi\");\n    return 0;\n}\n\n```\n\n",
        "postTime": 1549976731,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u83ab\u961f\u7ef4\u62a4bitset\u3002  \n\u7136\u800c\u6211\u5e76\u4e0d\u4f1abitset~~\u4ee5\u524d\u8bb2\u8fc7\u8ba4\u4e3a\u4e0d\u8003\u5c31\u6ca1\u5b66~~  \n\u6211\u771f\u7684\u592a\u83dc\u4e86\u3002  \n\u9996\u5148\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7684bitset\u2014\u2014s\u3002  \n\u64cd\u4f5c3\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5$\\sqrt{x}$\u679a\u4e3e\u7ea6\u6570\u7136\u540e\u5224\u65ad\u5c31\u884c\u4e86\u3002  \n\u64cd\u4f5c1\u5c31\u662f\u6c42\u662f\u5426\u5b58\u5728  \n$$\\exists{a,b},a-b=x$$  \n\u79fb\u4e00\u4e0b\u9879  \n$$a=x+b$$  \n\u4e5f\u5c31\u662f$\\text{(s<<x)}$&$x\\neq0$\u3002  \n\u90a3\u4e48\u64cd\u4f5c2\u8be5\u600e\u4e48\u529e?  \n\u6211\u4eec\u5148\u8bbe$b'=n-b$\u56e0\u4e3a$x=a+b$  \n$$a-b'=a-(n-b)=a+b-n=x-n$$  \n\u7136\u540e\u7c7b\u6bd4\u64cd\u4f5c1\u5c31\u884c\u4e86\u3002  \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\nconst int N=100101;\nint n,m,a[N],block[N],cnt[N];\nstring ans[N];\nstruct ques{\n    int l,r,type,id,x;\n}qu[N];\nbool cmp(ques a,ques b){\n    if(block[a.l]==block[b.l])return a.r<b.r;\n    else return block[a.l]<block[b.l];\n}\nbitset<N> x,y;\nint read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nint main(){\n    n=read();m=read();\n    int Block=sqrt(n);\n    for(int i=1;i<=n;i++)a[i]=read(),block[i]=(i-1)/Block+1;\n    for(int i=1;i<=m;i++)qu[i].type=read(),qu[i].l=read(),qu[i].r=read(),qu[i].x=read(),qu[i].id=i;\n    sort(qu+1,qu+1+m,cmp);\n    int l=1,r=0;\n    for(int i=1;i<=m;i++){\n        while(r<qu[i].r){\n            r++;\n            cnt[a[r]]++;\n            if(cnt[a[r]]==1)x[a[r]]=1,y[n-a[r]]=1;\n        }\n        while(l>qu[i].l){\n            l--;\n            cnt[a[l]]++;\n            if(cnt[a[l]]==1)x[a[l]]=1,y[n-a[l]]=1;\n        }\n        while(r>qu[i].r){\n            if(cnt[a[r]]==1)x[a[r]]=0,y[n-a[r]]=0;\n            cnt[a[r]]--;\n            r--;\n        }\n        while(l<qu[i].l){\n            if(cnt[a[l]]==1)x[a[l]]=0,y[n-a[l]]=0;\n            cnt[a[l]]--;\n            l++;\n        }\n        if(qu[i].type==1){\n            if((x&(x<<qu[i].x)).any())ans[qu[i].id]=\"hana\";\n            else ans[qu[i].id]=\"bi\";\n        }\n        else if(qu[i].type==2){\n            if(qu[i].x-n>=0){\n                if(((y<<(qu[i].x-n))&x).any())ans[qu[i].id]=\"hana\";\n                else ans[qu[i].id]=\"bi\";\n            }\n            else{\n                if(((x<<(n-qu[i].x))&y).any())ans[qu[i].id]=\"hana\";\n                else ans[qu[i].id]=\"bi\";\n            }\n        }\n        else{\n            for(int j=1;j<=sqrt(qu[i].x);j++)\n                if(qu[i].x%j==0&&x[j]&&x[qu[i].x/j])ans[qu[i].id]=\"hana\";\n            if(ans[qu[i].id]!=\"hana\")ans[qu[i].id]=\"bi\";\n        }\n    }\n    for(int i=1;i<=m;i++)cout<<ans[i]<<endl;\n    return 0;\n}\n```",
        "postTime": 1546216231,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3674 \u3010\u5c0f\u6e05\u65b0\u4eba\u6e23\u7684\u672c\u613f\u3011"
    }
]