[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5625)\n\n#### \u524d\u7f6e\u77e5\u8bc6\uff1a\n\nLink-Cut Tree\u3002\n\n#### \u9898\u610f\u7b80\u8ff0\uff1a\n\n- \u6709 $n$ \u4e2a\u672a\u77e5\u6570 $a_{1\\dots n}$\uff0c\u6bcf\u4e2a\u6570\u5728 $[0,2^k)$ \u8303\u56f4\u5185\uff0c$q$ \u6b21\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e09\u79cd\uff1a\n\t1. \u7ed9\u51fa\u4e00\u6761\u4fe1\u606f\uff1a$a_{l\\dots r}$ \u5f02\u6216\u548c\u4e3a $val$\u3002\n\t2. \u64a4\u56de\u7b2c $cnt$ \u6b21\u64cd\u4f5c 1\u3002\n\t3. \u8be2\u95ee\u6709\u591a\u5c11\u79cd $a$ \u5e8f\u5217\u6ee1\u8db3\u5f53\u524d\u672a\u88ab\u64a4\u56de\u7684\u64cd\u4f5c 1\u3002\n\n- $n\\le2\\times10^5$\uff0c$q\\le10^6$\uff0c$k\\le30$\u3002\n\n#### \u5206\u6790\uff1a\n\n\u8bb0 $s_i$ \u4e3a $a_{1\\dots i}$ \u7684\u5f02\u6216\u548c\uff0c\u5219\u64cd\u4f5c 1 \u7684\u4fe1\u606f\u5373\u4e3a $s_{l-1}\\operatorname{xor}s_r=val$\u3002\u8fd9\u610f\u5473\u7740\u786e\u5b9a\u4e86 $s_{l-1}$ \u548c $s_r$ \u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u53e6\u4e00\u4e2a\u5c31\u4f1a\u88ab\u786e\u5b9a\u3002\u5c06\u64cd\u4f5c 1 \u62bd\u8c61\u4e3a\u5728 $s_{l-1}$ \u4e0e $s_r$ \u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a $val$ \u7684\u8fb9\uff0c\u5219\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a $s$ \u786e\u5b9a\u540e\uff0c\u5176\u4ed6\u4e5f\u5747\u53ef\u786e\u5b9a\u3002\n\n\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u8003\u8651 $a_i$ \u7684\u53ef\u80fd\u53d6\u503c\u3002\u8003\u8651 $s_i$ \u7684\u503c\uff0c\u5982\u679c $s_{0\\dots i-1}$ \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0e $s_i$ \u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u90a3\u4e48 $s_i$ \u5c31\u4f1a\u88ab\u786e\u5b9a\uff0c$a_i$ \u80fd\u4e14\u4ec5\u80fd\u53d6 $s_i\\operatorname{xor}s_{i-1}$\u3002\u5426\u5219\u7531\u4e8e $s_i$ \u80fd\u53d6\u4efb\u610f\u503c\uff0c$a_i$ \u4e5f\u80fd\u53d6\u4efb\u610f\u503c\uff0c\u6709 $2^k$ \u79cd\u65b9\u6848\u3002\n\n\u6545\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u53ea\u6709\u5176\u4e2d\u6807\u53f7\u6700\u5c0f\u7684\u6709\u53ef\u80fd\u53d6\u6700\u4efb\u610f\u503c\uff08\u82e5\u6807\u53f7\u6700\u5c0f\u7684\u662f $s_0$\uff0c\u5219\u53ea\u6709\u4e00\u79cd\u53d6\u503c\uff0c\u5373 $0$\uff1b\u5426\u5219\u6807\u53f7\u6700\u5c0f\u7684\u6709 $2^k$ \u79cd\u65b9\u6848\uff09\uff0c\u5176\u4ed6\u6570\u90fd\u53ef\u4ee5\u7531\u8fd9\u4e2a\u6807\u53f7\u6700\u5c0f\u7684\u786e\u5b9a\u3002\u6545\u65b9\u6848\u6570\u662f $2^{k(m-1)}$\uff0c$m$ \u4ee3\u8868\u8fde\u901a\u5757\u6570\u91cf\u3002\n\n\u7279\u6b8a\u5730\uff0c\u5f53\u4e24\u6761\u64cd\u4f5c 1 \u77db\u76fe\u65f6\uff0c\u6ca1\u6709\u60c5\u51b5\u6ee1\u8db3\u6761\u4ef6\uff0c\u5e94\u8f93\u51fa $0$\u3002\n\n\u8fd9\u6837\u95ee\u9898\u5c31\u8f6c\u5316\u6210\uff1a\u52a0\u8fb9\uff0c\u5220\u8fb9\uff0c\u8be2\u95ee\u8fde\u901a\u5757\u6570\u4ee5\u53ca\u8fb9\u6743\u662f\u5426\u77db\u76fe\u3002\n\n\u5148\u4e0d\u8003\u8651\u8fb9\u6743\uff0c\u53ea\u8003\u8651\u8fde\u901a\u5757\u6570\u91cf\u3002\u6b64\u65f6\u64cd\u4f5c 1 \u4e0d\u4f1a\u4ea7\u751f\u77db\u76fe\u3002\n\n\u5982\u679c\u4fdd\u8bc1\u56fe\u662f\u68ee\u6797\uff0c\u5219\u663e\u7136\u53ef\u4ee5\u4f7f\u7528 LCT \u7ef4\u62a4\u3002\u8003\u8651\u600e\u4e48\u628a\u4e00\u822c\u7684\u8fde\u901a\u56fe\u8f6c\u5316\u4e3a\u6811\u7684\u60c5\u51b5\u3002\n\n\u6ce8\u610f\u5230\u5982\u679c\u8981\u5220\u9664\u7684\u8fb9\u5728\u67d0\u4e00\u4e2a\u73af\u4e0a\uff0c\u5219\u8be5\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u5220\u9664\u524d\u540e\u5747\u8fde\u901a\uff0c\u5373\u5220\u9664\u8be5\u8fb9\u5bf9\u8fde\u901a\u6027\u65e0\u5f71\u54cd\uff0c\u4e0d\u5982\u63d0\u524d\u5220\u6389\u8be5\u8fb9\u3002\u5373\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u5bf9\u4e8e\u5f62\u6210\u7684\u73af\uff0c\u6211\u4eec\u76f4\u63a5\u5220\u6389\u8be5\u73af\u4e2d\u6700\u65e9\u5c06\u88ab\u5220\u7684\u8fb9\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21\u52a0\u8fb9\u90fd\u4e0d\u4f1a\u5f62\u6210\u73af\uff0c\u8f6c\u5316\u6210\u4e86\u4e4b\u524d\u7684\u60c5\u51b5\u3002\n\n\u73b0\u5728\u8003\u8651\u8fb9\u6743\u3002\u65b0\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u65e0\u8fb9\u65f6\uff0c\u4e24\u70b9\u4e4b\u95f4\u65e0\u9650\u5236\u5173\u7cfb\uff0c\u4e0d\u4f1a\u4ea7\u751f\u77db\u76fe\uff1b\u6709\u8fb9\u65f6\uff0c\u82e5\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u5f02\u6216\u548c\u4e0d\u540c\u4e8e\u65b0\u8fb9\u7684\u8fb9\u6743\uff0c\u5219\u4ea7\u751f\u77db\u76fe\uff0c\u4e14\u77db\u76fe\u4f1a\u4e00\u76f4\u6301\u7eed\u5230\u8be5\u65b0\u8fb9\u88ab\u5220\u9664\u6216\u73af\u4e0a\u6700\u65e9\u5c06\u88ab\u5220\u7684\u8fb9\u88ab\u5220\u9664\u3002\n\n\u590d\u6742\u5ea6\u5747\u644a $\\mathcal O(q\\log n)$\u3002\n\n---\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i=l, _=r; i<=_; ++i)\n#pragma GCC diagnostic ignored \"-Wparentheses\"\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n\tll res=0; bool k=1; char ch;\n\twhile(!isdigit(ch=getchar())) k=ch^45;\n\tdo res=res*10+(ch&15); while(isdigit(ch=getchar()));\n\treturn k? res: -res;\n}\ninline void swap_(int &x, int &y) {int t_=x; x=y, y=t_;}\ninline void to_max(int &x, int y) {if(x<y) x=y;}\ninline int min_(int x, int y) {return x<y? x: y;}\nconst int mN=2e5+9, mQ=1e6+9, mS=mN+mQ, modn=998244353;\nint n, q, k, cnt, ans, p[mN];   //p \u4e3a 2^ki \u7684\u9884\u5904\u7406\nint opt[mQ], cut[mQ], tim[mS], a[mQ][2];\n//\u64cd\u4f5c\u7c7b\u578b\u3001\u5220\u6389\u7684\u8fb9\u6807\u53f7\u3001\u8fb9\u88ab\u5220\u7684\u65f6\u95f4\u3001\u8fb9\u7684\u4e24\u7aef\u70b9\n\nnamespace LCT {\n\t#define lc tr[p].son[0]\n\t#define rc tr[p].son[1]\n\t#define f tr[p].fa\n\tstruct Node {\n\t\tint fa, son[2], mn; //mn \u4e3a\u6700\u65e9\u88ab\u5220\u8fb9\u7684\u6807\u53f7\n\t\tll val, sum;    //\u8fb9\u6743\uff0c\u8fb9\u6743\u548c\n\t\tbool rev;\n\t} tr[mS];\n\tinline bool which(int p) {return tr[f].son[1]==p;}\n\tinline bool is_rt(int p) {return !f || tr[f].son[0]^p && tr[f].son[1]^p;}\n\tinline void push_up(int p) {\n\t\ttr[p].mn=tr[tr[p].son[tim[tr[rc].mn]<tim[tr[lc].mn]]].mn;\n\t\tif(tim[p]<tim[tr[p].mn]) tr[p].mn=p;\n\t\ttr[p].sum=tr[p].val^tr[lc].sum^tr[rc].sum;\n\t}\n\tinline void push_down(int p) {\n\t\tif(!tr[p].rev) return;\n\t\tswap_(tr[lc].son[0], tr[lc].son[1]), tr[lc].rev^=1;\n\t\tswap_(tr[rc].son[0], tr[rc].son[1]), tr[rc].rev^=1;\n\t\ttr[p].rev=0;\n\t}\n\tinline void rotate(int p) {\n\t\tint x=f, fx=tr[x].fa;\n\t\tbool wp=which(p), wx=which(x), isrtx=is_rt(x);\n\t\tif(tr[p].son[wp^1]) tr[tr[p].son[wp^1]].fa=x;\n\t\ttr[x].son[wp]=tr[p].son[wp^1];\n\t\ttr[x].fa=p, tr[p].son[wp^1]=x, f=fx;\n\t\tif(!isrtx) tr[fx].son[wx]=p;\n\t\tpush_up(x), push_up(p);\n\t}\n\tint sta[mS], top;\n\tvoid splay(int p) {\n\t\tfor(int x=sta[top=1]=p; !is_rt(x); ) sta[++top]=x=tr[x].fa;\n\t\twhile(top) push_down(sta[top--]);\n\t\tfor(; !is_rt(p); rotate(p)) if(!is_rt(f)) rotate(which(f)^which(p)? p: f);\n\t}\n\tinline void access(int p) {for(int x=0; p; x=p, p=f) splay(p), rc=x, push_up(p);}\n\tinline void make_rt(int p) {access(p), splay(p), swap_(lc, rc), tr[p].rev^=1;}\n\tinline int find_rt(int p) {\n\t\tfor(access(p), splay(p); lc; ) push_down(p=lc);\n\t\treturn splay(p), p;\n\t}\n\t#undef lc\n\t#undef rc\n\t#undef f\n}\nusing namespace LCT;\ninline void e_cut(int p) {\n\tmake_rt(p);\n\taccess(a[p-n-1][0]), splay(p), tr[a[p-n-1][0]].fa=0, tr[p].son[1]=0;\n\taccess(a[p-n-1][1]), splay(p), tr[a[p-n-1][1]].fa=0;\n}\n\nint main() {\n\tn=read(), q=read(), k=read();\n\tp[0]=1, p[1]=(1ll<<k)%modn;\n\trep(i, 2, ans=n+1) p[i]=(ll) p[i-1]*p[1]%modn;\n\trep(i, 0, n+q+1) tim[i]=q+1, tr[i].mn=i;    //\u521d\u59cb\u5316\n\trep(i, 1, q) {\n\t\tif((opt[i]=read())==0) ++cnt, a[cnt][0]=read(), a[cnt][1]=read()+1, tr[n+1+cnt].sum=tr[n+1+cnt].val=read();\n        //\u56e0\u4e3a\u4e0d\u60f3\u8ba9 a[i][0]=0\uff0c\u6545\u4e24\u8005\u5747 +1\uff1al-1 -> l\uff1b r -> r+1\n\t\telse if(opt[i]==1) tim[cut[i]=n+1+read()]=i;\n\t}\n\tcnt=0;\n\tint mx=0;\n\trep(i, 1, q) if(opt[i]==0) {\n\t\t++cnt;\n\t\tint u=a[cnt][0], v=a[cnt][1], t=tim[n+1+cnt];\n        make_rt(u);\n        int rt_v=find_rt(v);\n\t\tif(rt_v^u) {    //u,v \u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\n\t\t\t--ans;\n\t\t\tswap_(tr[rt_v].son[0], tr[rt_v].son[1]), tr[rt_v].rev^=1;   //\u76f8\u5f53\u4e8e make_rt(v)\n\t\t\ttr[rt_v].fa=tr[u].fa=n+1+cnt;   //\u76f8\u5f53\u4e8e link(u, n+1+cnt), link(v, n+1+cnt)\n\t\t} else {\n\t\t\tint id=tr[u].mn;\n\t\t\tif(tr[u].sum^tr[n+1+cnt].val) to_max(mx, min_(tim[id], t));\n            //\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u5219\u5230 min(tim[id], t) \u4e4b\u524d\u5747\u4f1a\u77db\u76fe\n\t\t\tif(tim[id]<t) { //\u6700\u5148\u88ab\u5220\u9664\u7684\u8fb9\u662f id\n\t\t\t\te_cut(id), cut[tim[id]]=0;  //\u6807\u8bb0\u88ab\u5220\u8fc7\n\t\t\t\tmake_rt(cnt+n+1);  \n\t\t\t\tmake_rt(u), splay(u), tr[u].fa=cnt+n+1; //link(u, cnt+n+1)\n\t\t\t\tmake_rt(v), splay(v), tr[v].fa=cnt+n+1; //link(v, cnt+n+1\n\t\t\t} else cut[t]=0;    //\u6700\u5148\u88ab\u5220\u7684\u8fb9\u662f t\uff0c\u76f4\u63a5\u4e0d\u52a0\u4e86\n\t\t}\n\t} else if(opt[i]==1) {\n\t\tif(cut[i]) ++ans, e_cut(cut[i]);\n\t} else printf(\"%d\\n\", i<=mx? 0: p[ans-1]);\n\treturn 0;\n}\n```",
        "postTime": 1637566338,
        "uid": 175807,
        "name": "ArrTue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5625 [Celeste-A]Good Karma \u56e0\u679c\u597d\u5faa\u73af"
    },
    {
        "content": "\u5361\u5e38\u534a\u5929\u539f\u6765\u662f\u8c03\u8bd5\u4fe1\u606f\u6ca1\u5220\uff08\n\n\u51fa\u9898\u4eba\u53c8\u4e0d\u8bf4\u4eba\u8bdd\u9898\u9762\uff08\n\n---\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u6574\u6570\u5e8f\u5217 $a$\uff0c\u503c\u57df $[0,2^k)$\u3002\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n- `0 l r v`\uff1a\u52a0\u4e0a $\\operatorname{xor}_{i=l}^r a_i=v$ \u7684\u9650\u5236\u6761\u4ef6\uff1b\n- `1 x`\uff1a\u64a4\u56de\u7b2c $x$ \u6761\u9650\u5236\uff1b\n- `2`\uff1a\u5728\u5f53\u524d\u9650\u5236\u4e0b\uff0c\u6709\u591a\u5c11\u79cd\u5e8f\u5217\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u4e0d\u8003\u8651\u64cd\u4f5c 2 \u65f6\uff0c\u4e00\u770b\u5230\u9650\u5236\u5c31\u65e0\u8111\u8f6c\u6210\u524d\u7f00\u548c\uff0c\u5219\u8981\u6c42\u53d8\u6210\u4e24\u4e2a\u6570\u5f02\u6216\u548c\uff0c\u60f3\u5230\u5efa\u56fe\u8fde\u8fb9\u3002\u6bcf\u6b21\u7edf\u8ba1\u8fde\u901a\u5757\u4e2a\u6570 $cnt$\uff0c\u540c\u65f6\u94a6\u5b9a\u957f\u5ea6\u4e3a $0$ \u7684\u524d\u7f00\u548c\u4e3a $0$\uff0c\u5219\u7b54\u6848\u5c31\u662f $2^{k\\times (cnt-1)}$\u3002\n\n\u4f46\u662f\uff0c\u7ed9\u51fa\u7684\u6761\u4ef6\u4e0d\u4fdd\u8bc1\u6709\u89e3\uff0c\u5982\u4f55\u5224\u65ad\uff1f\u8003\u8651\u5e26\u6743\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u52a0\u8fb9\uff0c\u5982\u679c\u4e24\u4e2a\u7aef\u70b9\u5728\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5219\u4e24\u70b9\u5728\u5e76\u67e5\u96c6\u4e0a\u5230\u6839\u8282\u70b9\u8ddd\u79bb\u7684\u5f02\u6216\u548c\u5c31\u662f\u4e24\u70b9\u95f4\u8def\u5f84\u7684\u5f02\u6216\u548c\u3002\u5982\u679c\u76f8\u7b49\uff0c\u5219\u4e0d\u5fc5\u518d\u52a0\u8fb9\uff0c\u5426\u5219\u5c31\u65e0\u89e3\u3002\n\n\u52a0\u4e0a\u64cd\u4f5c 2 \u540e\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5c06\u5e76\u67e5\u96c6\u6309\u79e9\u5408\u5e76\u652f\u6301\u64a4\u9500\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $\\mathcal{O}(q\\log q\\log n)$\u3002\n\n\u6ce8\u610f\u52a0\u8fb9\u7684\u65f6\u5019\u5e76\u67e5\u96c6\u4e0a\u7684\u8fb9\u6743\u8981\u5f02\u6216\u4e0a\u4e24\u70b9\u5230\u6839\u7684\u5f02\u6216\u503c\u3002\u8fd8\u53ef\u4ee5\u52a0\u4e2a\u4f18\u5316\uff1a\u5982\u679c\u5f53\u524d\u65e0\u89e3\u5219\u6240\u6709\u5b50\u8282\u70b9\u7684\u8be2\u95ee\u4e00\u5b9a\u65e0\u89e3\uff0c\u76f4\u63a5\u5168\u90e8\u8f93\u51fa\u3002\n\n\u5361\u5230\u4e86\u7b2c\u4e09\uff0c\u548c LCT \u7684\u505a\u6cd5\u5c45\u7136\u5dee\u4e0d\u591a\uff0c\u52a0\u4e2a zkw \u53ef\u80fd\u5c31\u80fd\u699c\u4e00\u4e86\uff08\uff1f\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <vector>\nusing namespace std;\n\ntypedef long long ll;\nconst int max_q = 1000000, max_qs = 1048576, max_n = 1000001, mod = 998244353;\n\nstruct stnode\n{\n\tint x, y;\n};\nstnode stk[max_q];\nint opt[max_q], qc[max_qs*2+1], l[max_q], r[max_q], v[max_q], qid[max_q], stp = 0;\nint dsu[max_n], val[max_n], rnk[max_n], k, kc;\nll pws[max_n];\nvector<int> p[max_qs*2+1];\n\ninline int ls(int x) { return x << 1; }\ninline int rs(int x) { return (x << 1) | 1; }\ninline void my_swap(int& a, int& b) { int k = a; a = b, b = k; }\n\nvoid build(int l, int r, int id)\n{\n\tif (l == r)\n\t{\n\t\tqc[id] = (opt[l] == 2);\n\t\treturn;\n\t}\n\t\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, ls(id)), build(mid + 1, r, rs(id));\n\tqc[id] = qc[ls(id)] + qc[rs(id)];\n}\n\nvoid modify(int L, int R, int l, int r, int id, int val)\n{\n\tif (L <= l && r <= R)\n\t{\n\t\tp[id].push_back(val);\n\t\treturn;\n\t}\n\t\n\tint mid = (l + r) >> 1;\n\tif (L <= mid && l <= R)\n\t\tmodify(L, R, l, mid, ls(id), val);\n\tif (L <= r && mid < R)\n\t\tmodify(L, R, mid + 1, r, rs(id), val);\n}\n\ninline void unite(int x, int y, int tv)\n{\n\tif (rnk[x] < rnk[y])\n\t\tmy_swap(x, y);\n\tstk[stp++] = { x, y };\n\trnk[x] += rnk[y], val[y] = tv;\n\tdsu[y] = x;\n}\n\nvoid solve(int L, int R, int id)\n{\n\tint pl, pr, tl, tr, pls = stp, hans = 1;\n\tfor (int x : p[id])\n\t{\n\t\tpl = l[x], tl = 0; while (pl != dsu[pl]) tl ^= val[pl], pl = dsu[pl];\n\t\tpr = r[x], tr = 0; while (pr != dsu[pr]) tr ^= val[pr], pr = dsu[pr];\n\t\tif (pl != pr)\n\t\t\tunite(pl, pr, v[x] ^ tl ^ tr), kc--;\n\t\telse if ((tl ^ tr) != v[x])\n\t\t{\n\t\t\tfor (int i = 0; i < qc[id]; i++)\n\t\t\t\tputs(\"0\");\n\t\t\thans = 0; break;\n\t\t}\n\t}\n\tif (hans)\n\t{\n\t\tif (L == R)\n\t\t{\n\t\t\tif (opt[L] == 2)\n\t\t\t\tprintf(\"%lld\\n\", pws[kc-1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid = (L + R) >> 1;\n\t\t\tsolve(L, mid, ls(id)), solve(mid + 1, R, rs(id));\n\t\t}\n\t}\n\t\n\twhile (stp > pls)\n\t{\n\t\tstp--;\n\t\trnk[stk[stp].x] -= rnk[stk[stp].y];\n\t\tdsu[stk[stp].y] = stk[stp].y;\n\t\tkc++;\n\t}\n}\n\ninline int read()\n{\n\tint c = getchar(), t = 1, n = 0;\n\twhile (isspace(c)) { c = getchar(); }\n\tif (c == '-') { t = -1, c = getchar(); }\n\twhile (isdigit(c)) { n = n * 10 + c - '0', c = getchar(); }\n\treturn n * t;\n}\n\nsigned main()\n{\n\tint n = read(), m = read(), qc = 0;\n\t\n\tk = (1 << read()) % mod, kc = n + 1;\n\tfor (int i = 0, px; i < m; i++)\n\t{\n\t\topt[i] = read();\n\t\t\n\t\tif (opt[i] == 0)\n\t\t{\n\t\t\tl[qc] = read() - 1, r[qc] = read(), v[qc] = read();\n\t\t\tqid[qc++] = i;\n\t\t}\n\t\telse if (opt[i] == 1)\n\t\t{\n\t\t\tpx = read() - 1;\n\t\t\tmodify(qid[px], i, 0, m - 1, 1, px);\n\t\t\topt[qid[px]] = -1;\n\t\t}\n\t}\n\tbuild(0, m - 1, 1);\n\tfor (int i = 0; i < qc; i++)\n\t\tif (opt[qid[i]] == 0)\n\t\t\tmodify(qid[i], m - 1, 0, m - 1, 1, i);\n\t\n\tfor (int i = 0; i <= n; i++)\n\t\tdsu[i] = i, rnk[i] = 1;\n\tpws[0] = 1;\n\tfor (int i = 0; i < n; i++)\n\t\tpws[i+1] = pws[i] * k % mod;\n\t\n\tsolve(0, m - 1, 1);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1633797983,
        "uid": 119491,
        "name": "5ab_juruo",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[Celeste-A]Good Karma"
    }
]