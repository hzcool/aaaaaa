[
    {
        "content": "~~\u4e38\u4e86\u4e38\u4e86\u6bd2\u7624\u5b9e\u9524\u4e86\uff0c110\u884c\u7684\u7d2b\u8346\u82b1\u4e4b\u604b\u4e86\u89e3\u4e00\u4e0b\uff1f~~\n\n\u53ea\u80fd\u8bf4\u8fd9\u9053\u9898\u7684\u7ec6\u8282\u4e0d\u662f\u4e00\u822c\u7684\u591a\uff0c\u6211\u4f1a\u5c3d\u91cf\u8be6\u7ec6\u7684\u5728\u8fd9\u7bc7\u9898\u89e3\u91cc\u5217\u4e3e\u4e00\u4e0b\n___________\n\n### \u524d\u7f6e\u829d\u58eb:\u52a8\u6001\u70b9\u5206\u6cbb(\u70b9\u5206\u6811)\n\n\u5982\u679c\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u52a8\u6001\u70b9\u5206\u6cbb(\u6216\u8005\u70b9\u5206\u6811)\u7684\u8bdd\u8fd8\u662f\u6682\u4e14\u4e0d\u8981\u6de6\u8fd9\u9898\u4e86\uff0c\u62ff\u8fd9\u9898\u53bb\u7ec3\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u624b\u4f1a\u8ba9\u4f60\u7559\u4e0b\u5fc3\u91cc\u9634\u5f71\n\n\u5173\u4e8e\u52a8\u6001\u70b9\u5206\u6cbb\u8fd9\u4e2a\u6280\u672f\u53ef\u4ee5\u53bb\u81ea\u884c\u767e\u5ea6\u4e00\u4e0b\uff0c\u505a\u51e0\u9053\u4f8b\u9898\u6765\u5b66\u4e60\u4e00\u4e0b\n\n### \u524d\u7f6e\u829d\u58eb:\u9ad8\u901f\u5e73\u8861\u6811\n\n\u8fd9\u91cc\u7684\u9ad8\u901f\u5e73\u8861\u6811\u6307\u7684\u662f\u9664\u4e86splay\u548cfhqtreap\u4ee5\u5916\u7684\u6240\u6709\u5e73\u8861\u6811(\u8fd9\u4e24\u4e2a\u5e73\u8861\u6811\u771f\u7684\u5f88\u6162)\uff0c\u5982\u679c\u4e0d\u4f1a\u8fd9\u4e9b\u5e73\u8861\u6811\u7684\u8bdd\u8bf7\u51fa\u95e8\u5de6\u8f6c\u6a21\u677f\u533a\n_______________\n\n# \u672c\u9898\u9898\u89e3\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff0c\u7ef4\u62a4\u4e00\u9897\u6811\u652f\u6301\u52a8\u6001\u7684\u63d2\u5165\u53f6\u5b50\uff0c\u6bcf\u4e2a\u8fb9\u4e0a\u6709\u8fb9\u6743\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\u8be2\u95ee\u6811\u4e0a\u6709\u591a\u5c11\u70b9\u5bf9\u6ee1\u8db3\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\u4e4b\u548c\u5927\u4e8e\u8fb9\u6743\n\n**\u5f3a\u5236\u5728\u7ebf**~~(\u5bf9\uff0c\u8fd9\u624d\u662f\u4e07\u6076\u4e4b\u6e90)~~\n\n\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u7b80\u5355\u7684\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u7684\u601d\u8def\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7684\u662f\u6211\u4eec\u6c42\u51fa\u7b54\u6848\u7684\u65b9\u5f0f\u5e94\u8be5\u662f\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u4e4b\u540ep\u8be2\u95ee\u4e00\u4e0b\u6811\u4e0a\u6709\u591a\u5c11\u4e2a\u70b9v\u548cp\u7684\u8ddd\u79bb\u5c0f\u4e8ev,p\u7684\u70b9\u6743\u4e4b\u548c\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u70b9\u7684\u6570\u76ee\u52a0\u5230\u7b54\u6848\u4e2d\u53bb\u5c31\u53ef\u4ee5\u5f97\u5230\u63d2\u5165\u4e86p\u4e4b\u540e\u7684\u7b54\u6848\u4e86\n\n\u6240\u4ee5\u8bf4\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u8be2\u95ee\u6811\u4e0a\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u4fe1\u606f\u7684\u95ee\u9898\n\n\u5982\u679c\u4f60\u5bf9\u52a8\u6001\u70b9\u5206\u6cbb(\u70b9\u5206\u6811)\u8fd9\u4e2a\u6280\u672f\u8db3\u591f\u719f\u7ec3\u7684\u8bdd\u5e94\u8be5\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u662f\u53ef\u4ee5\u7528\u70b9\u5206\u6811\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684(\u8fd9\u662f\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u4e24\u4e2a\u5e38\u89c1\u7528\u6cd5,\u4e00\u4e2a\u662f\u8be2\u95ee\u6811\u4e0a\u7684\u67d0\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u4fe1\u606f\uff0c\u53e6\u4e00\u4e2a\u662f\u6811\u4e0a\u4e8c\u5206\u5bfb\u627e\u5173\u952e\u70b9)\n\n\u6211\u4eec\u5c31\u5bf9\u8fd9\u4e2a\u6811\u5efa\u7acb\u8d77\u4e00\u9897\u70b9\u5206\u6811(\u8ba9\u6211\u4eec\u6682\u65f6\u5ffd\u7565\u590d\u6742\u5ea6\u95ee\u9898)\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u770b\u8fd9\u9897\u70b9\u5206\u6811\u90fd\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u4fe1\u606f\u5462\uff1f\n\n### part1:\u5904\u7406\u8be2\u95ee\n\n\u6211\u4eec\u73b0\u5728\u5e0c\u671b\u8be2\u95ee\u5bf9\u4e8e\u6811\u4e0a\u4e00\u4e2a\u70b9u\uff0c\u6709\u591a\u5c11\u4e2a\u70b9v\u7684\u70b9\u6743\u52a0\u8d77\u6765\u5927\u4e8e\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u904d\u5386u\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6240\u6709\u7956\u5148g(\u663e\u7136\u8fd9\u4e9b\u7956\u5148\u4e0d\u4f1a\u592a\u591a)\uff0c\u7136\u540e\u8003\u8651\u4e00\u6761\u5f62\u5982$u-v-g$\u7684\u8def\u5f84\u662f\u5426\u5408\u6cd5\n\n\u90a3\u4e48\u6211\u4eec\u8bbe$u-g$\u7684\u8def\u5f84\u4e3a$d_{u}$,$v-g$\u7684\u8def\u5f84\u957f\u5ea6\u4e3a$d_{v}$,\u663e\u7136$dis(u,v)=d_{u}+d_{v}$\uff0c\u6839\u636e\u9898\u610f\uff0c\u4e00\u4e2a\u70b9\u5bf9$u,v$\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53$dis(u,v) \\leq r_{u}+r_{v}$\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f$d_{u}+d_{v} \\leq r_{u}+r_{v}$\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u505a\u4e9b\u5c0f\u5c0f\u7684\u53d8\u6362\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u5f0f\u5b50\n\n\n$$d_{v}-r_{v} \\leq r_{u}-d_{u}$$\n\n\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u5728\u6bcf\u4e00\u5c42\u7684\u7956\u5148$g$\u5904\u9700\u8981\u67e5\u8be2\u7684\u4e1c\u897f\u5c31\u662f\u6709\u591a\u5c11\u4e2a$v$\u4ed6\u7684$d_{v}-r_{v}$\u6bd4$r_{u}-d_{u}$\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u8fd9\u4e9b$d_{v}-r_{v}$\u7684\u503c\uff0c(\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4e0d\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u548c\u6743\u503c\u6811\u72b6\u6570\u7ec4\u662f\u56e0\u4e3a\u6839\u672c\u65e0\u6cd5\u79bb\u6563\u5316\u6240\u4ee5\u53ea\u80fd\u4e0a\u5e73\u8861\u6811),\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u6709\u591a\u5c11\u4e2a\u5f62\u5982$u-g-v$\u7684\u8def\u5f84\u4e86\uff0c\u53ea\u662f\u8fd9\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u80fd\u8003\u8651\u4e86\u7684\u8def\u5f84\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u8def\u5f84\uff0c\u6362\u53e5\u8bdd\u8bf4\u5373\u4f7f\u5207\u6389$g$\uff0c$u,v$\u8fd8\u662f\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u91cc\n\n\u90a3\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u5207\u6389$g$\u4e4b\u540e\u5f62\u6210\u7684\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u6bcf\u4e2a\u5757\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u8fd8\u662f\u5b58\u540c\u6837\u7684\u503c\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u7528\u603b\u7684\u51cf\u53bb\u548c\u81ea\u5df1\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u7684\u5c31\u884c\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\u6211\u4eec\u70b9\u5206\u6811\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u5f00\u4e00\u4e2avector\n\nvector\u91cc\u9762\u5b58\u4e00\u4e2a\u4e09\u5143\u7ec4$(g,dis,tree)$\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7684\u4e00\u4e2a\u7956\u5148\u7f16\u53f7\uff0c\u5230\u8fd9\u4e2a\u7956\u5148\u7684\u8ddd\u79bb\uff0c\u4ee5\u53ca\u5728\u5207\u6389\u8fd9\u4e2a\u7956\u5148\u4e4b\u540e\uff0c\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u8054\u901a\u5757\u6240\u5728\u7684\u5e73\u8861\u6811\u7f16\u53f7(\u4e5f\u5c31\u662f\u8bf4\uff0c\u540c\u4e00\u4e2a\u5e73\u8861\u6811\u4f1a\u88ab\u4e0d\u540c\u7684\u8282\u70b9\u5b58\u5f88\u591a\u6b21)\n\n\u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u5b58\u7684\u662f\u70b9\u5206\u6cbb\u5230\u8fd9\u4e2a\u70b9g\u7684\u65f6\u5019\uff0c\u548cg\u5728\u540c\u4e00\u4e2a\u8054\u901a\u4e2d\u7684\u70b9$v$\u7684$d_{v}-r_{v}$\u503c\n\n\u67e5\u8be2\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9u\u5230\u6811\u4e0a\u7684\u5176\u4ed6\u70b9v\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5408\u6cd5$(u,v)$\u5bf9\u7684\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\n\n\u679a\u4e3e$u$\u7684vector\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7956\u5148$g$\uff0c\u5728\u8fd9\u4e2a\u70b9\u5e73\u8861\u6811\u4e0a\u67e5\u4e00\u4e0b\u6709\u51e0\u4e2a\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e$r_{u}-d_{u}$\uff0c\u52a0\u5230\u7b54\u6848\u91cc\uff0c\u7136\u540e\u5728\u8fd9\u4e2avector\u91cc\u5b58\u7684\u5e73\u8861\u6811\u4e2d\u67e5\u4e00\u4e0b\u6709\u51e0\u4e2a\u5143\u7d20\u5c0f\u4e8e$r_{u}-d_{u}$\u7b54\u6848\u51cf\u53bb\u8fd9\u4e2a\u503c\u3002\u5982\u6b64\u8fd9\u822c\u8fed\u4ee3\u6211\u4eec\u5c31\u80fd\u83b7\u5f97\u7b54\u6848\u4e86,\u5bf9\u4e86\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u81ea\u5df1\u7684\u5e73\u8861\u6811\u91cc\u9762\u6709\u591a\u5c11\u70b9\u7684\u503c\u5c0f\u4e8e$-r_{u}$(\u56e0\u4e3a\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u662f0)\n_______________________________\n\n### part2:\u5b9a\u671f\u91cd\u6784\u70b9\u5206\u6811\n\n\u7136\u540e\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u603b\u4e0d\u80fd\u6bcf\u6b21\u90fd\u70b9\u5206\u6cbb\u554a\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ea\u4f1a\u5f97\u5230\u4e00\u4e2a$O(n^2logn)$\u7684\u5783\u573e\u505a\u6cd5\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u5c31\u662f\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u5b58\u5728\u4e00\u5bf9\u7236\u5b50\u4f7f\u5f97\u7236\u4eb2\u7684$size\u00d7a$\u5c0f\u4e8e\u5b69\u5b50\u7684$size$\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u4e0d\u5e73\u8861\u5173\u7cfb\u6211\u4eec\u5c31\u627e\u5230\u6700\u9ad8\u7684\u70b9\uff0c\u7136\u540e\u91cd\u6784\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u70b9\u5206\u6811\u5b50\u6811\n\n\u597d\u4e86\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u6211\u4eec\u7684\u70b9\u5206\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5df2\u7ecf\u76f8\u5f53\u7684\u590d\u6742\u4e86\uff0c\u91cd\u6784\u6574\u9897\u70b9\u5206\u6811\u5c31\u7b97\u4e86\uff0c\u95ee\u9898\u662f\u91cd\u6784\u4e00\u4e2a\u70b9\u5206\u6811\u7684\u5b50\u6811\u7684\u65f6\u5019\u6211\u4eec\u8fdb\u884c\u7684\u64cd\u4f5c\u5c06\u4f1a\u76f8\u5f53\u7684\u96be\u53d7\u4e86\n\n~~\u4f46\u662f\u5c31\u7b97\u96be\u53d7\u6211\u4eec\u8fd8\u662f\u5f97\u5199~~\n\n\u6240\u4ee5\u6211\u4eec\u6162\u6162\u7684\u63a8\u6211\u4eec\u9700\u8981\u5728\u70b9\u5206\u6811\u4e0a\u7ef4\u62a4\u4ec0\u4e48\u9644\u52a0\u7684\u4fe1\u606f\u624d\u80fd\u8ba9\u6211\u4eec\u53ef\u4ee5\u91cd\u6784\u8fd9\u4e2a\u70b9\u5206\u6811\u7684\u4e00\u4e2a\u5b50\u6811\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u7684\u4fe1\u606f\u662f\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u91cc\u90fd\u6709\u8c01\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u66b4\u529b\u7684\u5f00\u4e00\u4e2avector\u5b58\u4ed6\u7684\u6240\u6709\u5b69\u5b50\u90fd\u662f\u8c01\uff0c\u540c\u65f6\u6211\u4eec\u5728\u91cd\u6784\u70b9\u5206\u6811\u7684\u65f6\u5019\u8fd8\u9700\u8981\u6e05\u7a7a\u4e00\u4e9b\u5e73\u8861\u6811(\u56e0\u4e3a\u8981\u91cd\u65b0\u63d2\u5165)\u6240\u4ee5\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2avector\u5b58\u7684\u662f\u5207\u6389\u8fd9\u4e2a\u70b9\u4e4b\u540e\uff0c\u5b58\u50a8\u5269\u4e0b\u7684\u5404\u4e2a\u8054\u901a\u5757\u4fe1\u606f\u7684\u5e73\u8861\u6811\uff0c\u4e5f\u5c31\u662f\u4f60\u67e5\u8be2\u7684\u65f6\u5019\u51cf\u6389\u7684\u90a3\u9897\u5e73\u8861\u6811\n\n\u597d\u4e86\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u8981\u91cd\u6784\u4e00\u4e2a\u70b9$p$\u5728\u70b9\u5206\u6811\u4e2d\u7684\u5b50\u6811\u4e86\n\n\u600e\u4e48\u529e\u5462?\n\n\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\u6211\u4eec\u6e05\u7a7a\u8be5\u6e05\u7a7a\u7684\u4e1c\u897f\u7559\u4e0b\u8be5\u7559\u4e0b\u7684\u4e1c\u897f\u7136\u540e\u70b9\u5206\u6cbb\u5c31\u884c\u4e86\n\n\u6211\u4eec\u9700\u8981\u6e05\u7a7a\u7684\u4e1c\u897f\u6709\n\n1.\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u5e73\u8861\u6811\n\n2.\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u7528\u6765\u51cf\u7684\u5e73\u8861\u6811\n\n3.\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7528\u6765\u5b58\u81ea\u5df1\u5b69\u5b50\u7684vector\n\n4.\u8fd9\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u5b58\u81ea\u5df1\u5468\u56f4\u4e00\u5708\u5e73\u8861\u6811\u7684vector\n\n\u4f46\u662f\u6700\u91cd\u8981\u7684\u8fd8\u662f\u6bcf\u4e2a\u70b9\u7528\u6765\u5b58\u81ea\u5df1\u7956\u5148\u7684vector\n\n\u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e00\u5c42\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u90fd\u5728\u8fd9\u4e2a\u5b58\u7956\u5148\u7684vector\u91cc\u9762push\u6211\u4eec\u8be5push\u7684\u5143\u7d20\u7684\u8bdd\uff0c\u4f60\u4f1a\u53d1\u73b0vector\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u521a\u597d\u662f\u6240\u6709\u7956\u5148\u6309\u7167\u6df1\u5ea6\u6392\u5e8f\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u6e05\u7a7a\u7684\u65f6\u5019\u4e0d\u505c\u7684pop_back\u76f4\u5230\u6211\u4eec\u628a$p$\u7ed9pop\u51fa\u6765\u4e3a\u6b62\n\n\u7136\u540e\u6e05\u7a7a\u4e86\u8fd9\u4e9b\u4e4b\u540e\u6211\u4eec\u8bbf\u95ee\u4e00\u904d$p$\u7684\u5b58\u5b69\u5b50\u6807\u8bb0\u7136\u540e\u628a\u5bf9\u5e94\u7684\u8282\u70b9\u90fd\u6253\u4e0a\u6807\u8bb0\u8dd1\u4e00\u904d\u70b9\u5206\u6cbb\u5c31\u53ef\u4ee5\u4e86\n_____________________\n\n### part3\u70b9\u5206\u6cbb\n\n\u5f53\u7136\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\u76f8\u5bf9\u6765\u8bb2\u8fd8\u662f\u6bd4\u8f83\u4eb2\u5207\u7684(\u5176\u5b9e\u8fd9\u9898\u54ea\u4e2a\u90e8\u5206\u90fd\u4e0d\u96be\u5199\uff0c\u5c31\u662f\u53e0\u8d77\u6765\u5c31\u5341\u5206\u7684\u8981\u547d\u53e6\u5916\u7ec6\u8282\u8d85\u7ea7\u591a)\n\n\u6211\u4eec\u5341\u5206\u5957\u8def\u5bf9\u76ee\u6807\u8054\u901a\u5757\u8fdb\u884c\u627e\u91cd\u5fc3\u64cd\u4f5c,\u627e\u5230\u91cd\u5fc3\u4e4b\u540e\u6211\u4eec\u8003\u8651\u6784\u9020\u8fd9\u4e00\u5c42\u7684\u70b9\u5206\u6811\n\n\u9996\u5148\u5148\u628a\u8fd9\u4e2a\u8054\u901a\u5757\u91cc\u7684\u6240\u6709\u70b9push\u5230g\u7684\u5b69\u5b50vector\u91cc\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\n\n\u7136\u540e\u63a5\u4e0b\u6765dfsg\u7684\u6bcf\u4e00\u4e2a\u5b50\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u91cc\u7684\u5143\u7d20v\u6211\u4eec\u628a$(g,dis(g,v),tree)$\u8fd9\u4e2a\u4e09\u5143\u7ec4\u63d2\u5230v\u7684vector\u91cc\u53bb\n\n\u7136\u540e\u5728\u4e0a\u8ff0dfs\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u987a\u624b\u628a\u5e73\u8861\u6811\u65b0\u5efa\u51fa\u6765\u987a\u4fbf\u628a\u6bcf\u4e2a\u8282\u70b9\u7684$d_{v}-r_{v}$\u63d2\u5230\u5e73\u8861\u6811\u4e2d\u53bb\u5c31\u53ef\u4ee5\u4e86\n\n___________________\n\n### part4\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\n\n\u55ef\uff0c\u6700\u8981\u547d\u7684\u4e1c\u897f\u6765\u4e86\n\n\u6211\u4eec\u9700\u8981\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u4ed6\u6302\u5728$u$\u4e0a\n\n\u6211\u4eec\u5177\u4f53\u7684\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\n\n\u9996\u5148\u628au\u7684\u7956\u5148vector\u590d\u5236\u4e00\u4efd\u7ed9p\n\n\u7136\u540efor\u4e00\u904d\u8fd9\u4e2avetor\uff0c\u91cc\u9762\u6240\u6709\u7684dis+=u\u548cp\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u5728\u8fd9\u4e2avector\u8bb0\u5f55\u7684\u5e73\u8861\u6811\u4ee5\u53ca\u7956\u5148g\u7684\u5e73\u8861\u6811\u4e2d\u63d2\u5165$dis-r_{p}$\u8fd9\u4e2a\u503c\n\n\u63a5\u4e0b\u6765\u5728p\u7684vector\u4e2d\u63d2\u5165$(u,dis(u,p),tree)$\u8fd9\u4e2a\u4e09\u5143\u7ec4\uff0c(\u5f53\u7136\u4f60\u9700\u8981\u628ap\u7684\u5e73\u8861\u6811\u5f00\u51fa\u6765)\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u628au\u7684\u5b58\u5e73\u8861\u6811\u7684vector\u4e2d\u63d2\u5165\u4e00\u4e2a\u5173\u4e8ep\u7684\u5e73\u8861\u6811\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u5e73\u8861\u6811\u4e2d\u63d2\u5165$dis(u,p)-r_{p}$\u8fd9\u4e2a\u503c\uff0c\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u628ap\u7684\u5e73\u8861\u6811\u4e5f\u7ed9\u5f00\u51fa\u6765\u540c\u65f6\u63d2\u5165$-r_{p}$\u8fd9\u4e2a\u503c\n\n\u63a5\u4e0b\u6765\u4e8b\u60c5\u8fd8\u6ca1\u6709\u7ed3\u675f\u6211\u4eecfor\u4e00\u904dp\u7684vector\uff0c\u5e76\u5728\u8fd9\u4e9b\u7956\u5148\u7684\u5b69\u5b50vector\u5f53\u4e2d\u63d2\u5165$p$\n\n\u6700\u540e\u6211\u4eec\u626b\u63cf\u4e00\u904dp\u7684vector\u68c0\u6d4b\u6709\u65e0\u8fdd\u53cd$a$\u5e73\u8861\u6761\u4ef6\u7684\u7236\u5b50\u5bf9\uff0c\u5982\u679c\u6709\uff0c\u5c31\u91cd\u6784\u90a3\u4e2a\u6700\u9ad8\u7684\u8282\u70b9\u6240\u5728\u7684\u5b50\u6811\n\n\u5bf9\u4e86\uff0c\u63d2\u51651\u53f7\u8282\u70b9\u8bb0\u5f97\u7279\u5224\n\n_____________________\n\n### \u5173\u4e8e\u9ad8\u901f\u5e73\u8861\u6811\n\n~~splay\u5b9e\u5728\u662f\u592a\u6162\u4e86~~\n\n\u53ef\u6211\u662f\u4e2asplay\u515a\u554a\uff0c\u53ea\u4f1asplay\u600e\u4e48\u529e\u554a\uff0c\u4e0d\u60f3\u5199treap\u554a\n\n~~\u5199bst\u554a~~\uff0c\u53ea\u8981\u6570\u636e\u968f\u673a\u5c31\u662f\u6700\u5feb\u7684\u4e8c\u53c9\u641c\u7d22\u6811\n\n\u53ef\u662f9,10\u4e24\u4e2a\u70b9\u5361bst\u554a\n\n~~\u66ff\u7f6a\u7f8a\u6811\u554a~~,\u7b80\u5355\u7c97\u66b4\u7684\u5e73\u8861\u6811$a$\u53d60.8\u5c31\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u4e86\n____________________\n\n110\u884c\u7d2b\u8346\u82b1\u4e4b\u604b\u4f60\u503c\u5f97\u62e5\u6709\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=1e5+10;const int M=6*1e6+10;typedef long long ll;const ll mod=1e9;\nint t;int n;ll lastans;\nnamespace SC//\u7b80\u6613\u66ff\u7f6a\u7f8a\u6811\u6a21\u677f \n{\n    int s[M][2];int fa[M];int siz[M];int val[M];int tr[N];int hd;int st[M];int tp;int ct;\n    inline int chk(){return tp?st[tp]:ct+1;}\n    inline int rus(){return tp?st[tp--]:++ct;}inline void rls(const int& x){st[++tp]=x;}\n    inline void del(const int& x)\n        {if(s[x][0])del(s[x][0]);if(s[x][1])del(s[x][1]);s[x][0]=s[x][1]=0;rls(x);}\n    inline int gc(const int& x){return s[fa[x]][1]==x;}\n    struct spt\n    {\n        int rt;\n        inline void itw(const int& p){if(s[p][0])itw(s[p][0]);tr[++hd]=p;if(s[p][1])itw(s[p][1]);}\n        inline int build(int l,int r)\n        {\n            if(l>r)return 0;int mid=(l+r)/2;int p=tr[mid];s[p][0]=build(l,mid-1);\n            s[p][1]=build(mid+1,r);fa[s[p][0]]=p;fa[s[p][1]]=p;siz[p]=siz[s[p][0]]+1+siz[s[p][1]];\n            return p;\n        }\n        inline void ins(const int& va)\n        {\n            int hi=-1;int p=0;\n            for(int tw=rt;tw;tw=s[p][val[p]<=va])//a\u53d60.8 \n                {p=tw;siz[p]++;if(fa[p]!=0&&fa[p]!=rt&&hi==-1&&siz[p]*5>=siz[fa[p]]*4)hi=fa[p];}\n            int np=rus();fa[np]=p;s[p][val[p]<=va]=np;val[np]=va;siz[np]=1;\n            if(hi!=-1){int d=fa[hi];int t=gc(hi);hd=0;itw(hi);s[d][t]=build(1,hd);fa[s[d][t]]=d;}\n        }\n        inline int qry(const int& va)\n        {int ret=0;for(int p=rt;p;)if(val[p]<=va)ret+=siz[s[p][0]]+1,p=s[p][1];else p=s[p][0];return ret;}\n        inline int rebuild(int* a,int l,int r)\n        {\n            if(l>r)return 0;int mid=(l+r)/2;int p=rus();val[p]=a[mid];\n            s[p][0]=rebuild(a,l,mid-1);s[p][1]=rebuild(a,mid+1,r);\n            fa[s[p][0]]=p;fa[s[p][1]]=p;siz[p]=siz[s[p][0]]+1+siz[s[p][1]];return p;\n        }\n        inline void clear(){del(rt);}inline void ih(int* a,int S){rt=rebuild(a,0,S);fa[rt]=0;}\n    };\n}\nnamespace VDC_tree//\u70b9\u5206\u6811 \n{\n    int v[2*N];int x[2*N];int ct;int al[N];int val[2*N];bool cut[N];int siz[N];int w[N];\n    struct data{int f;int dis;SC::spt sp;};vector <data> ve[N];\n    vector <int> so[N];vector <SC::spt> nw[N];SC::spt sct[N];int ndep[N];int tp;int* mdep;int tot;\n    inline void add(int u,int V,int va){v[++ct]=V;x[ct]=al[u];al[u]=ct;val[ct]=va;}\n    inline int dfs1(int u,int f)//\u627e\u91cd\u5fc3 \n    {siz[u]=1;for(int i=al[u];i;i=x[i])if(v[i]!=f&&cut[v[i]])siz[u]+=dfs1(v[i],u);return siz[u];}\n    inline int find(int u,int f,const int& tot)\n    {\n        for(int i=al[u];i;i=x[i])\n            if(v[i]!=f&&cut[v[i]]&&2*siz[v[i]]>=tot)return find(v[i],u,tot);return u;\n    }\n    inline void dfs3(int u,int f,int dis,const int& g,const int& p)//\u5904\u7406\u70b9\u5206\u6811 \n    {\n        so[g].push_back(u);ve[u].push_back((data){g,dis,(SC::spt){p}});mdep[++tp]=dis-w[u];\n        for(int i=al[u];i;i=x[i])if(v[i]!=f&&cut[v[i]])dfs3(v[i],u,dis+val[i],g,p);\n    }\n    inline void solve(int u)//\u70b9\u5206\u6cbb \n    {\n        dfs1(u,0);int g=find(u,0,siz[u]);cut[g]=false;so[g].clear();so[g].push_back(g);\n        if(siz[u]==1){ndep[0]=-w[u];sct[g].ih(ndep,0);return;}mdep=ndep;tp=-1;tot=0;\n        for(int i=al[g];i;i=x[i])\n        {\n            if(!cut[v[i]])continue;mdep=mdep+tp+1;tot+=tp+1;tp=-1;dfs3(v[i],g,val[i],g,SC::chk());\n            SC::spt tre;sort(mdep,mdep+tp+1);\n            tre.ih(mdep,tp);nw[g].push_back(tre);\n        }tot+=tp+1;ndep[tot]=-w[g];sort(ndep,ndep+tot+1);sct[g].ih(ndep,tot);\n        for(int i=al[g];i;i=x[i])if(cut[v[i]])solve(v[i]);\n    }\n    inline void rebuild(int p)//\u91cd\u6784\u524d\u7684\u6e05\u7a7a\u51fd\u6570 \n    {\n        vector <int>:: iterator it;vector <SC::spt>:: iterator it1;\n        for(it=so[p].begin();it!=so[p].end();++it)cut[*it]=true;\n        for(it=so[p].begin();it!=so[p].end();++it)sct[*it].clear();\n        for(it=so[p].begin();it!=so[p].end();++it)\n            {for(it1=nw[*it].begin();it1!=nw[*it].end();++it1)it1->clear();nw[*it].clear();}\n        for(it=so[p].begin();it!=so[p].end();++it)\n            if(*it!=p)while(1)if(ve[*it].rbegin()->f==p){ve[*it].pop_back();break;}else ve[*it].pop_back();\n        solve(p);\n    }\n    inline int ins(int p,int u,int va,int we)//\u63d2\u5165\u4e00\u4e2a\u70b9 \n    {\n        add(u,p,va);add(p,u,va);w[p]=we;vector <data>:: iterator it,it1,it2;int res=0;\n        for(ve[p]=ve[u],it=ve[p].begin();it!=ve[p].end();++it)\n            it->dis+=va,it->sp.ins(it->dis-we),sct[it->f].ins(it->dis-we);   \n        SC::spt tre;ndep[0]=va-we;tre.ih(ndep,0);ve[p].push_back((data){u,va,tre});\n        nw[u].push_back(tre);sct[u].ins(va-we);ndep[0]=-we;sct[p].ih(ndep,0);so[p].push_back(p);\n        for(it=ve[p].begin();it!=ve[p].end();++it)so[it->f].push_back(p);\n        for(it1=ve[p].begin(),it2=it1,++it2;it2!=ve[p].end();++it2,++it1)\n            if(so[it1->f].size()*4<=so[it2->f].size()*5){rebuild(it1->f);break;}\n        res+=sct[p].qry(we)-1;\n        for(it=ve[p].begin();it!=ve[p].end();++it)\n            res+=sct[it->f].qry(we-it->dis)-it->sp.qry(we-it->dis);return res;\t\t\t\t\t\t\n    }\n    inline void ih(int we){w[1]=we;ndep[0]=-we;sct[1].ih(ndep,0);so[1].push_back(1);}\n}\nint main()\n{\n    scanf(\"%d\",&t);scanf(\"%d\",&n);\n    int f;int va;int we;scanf(\"%d%d%d\",&f,&va,&we);VDC_tree::ih(we);printf(\"0\\n\");\n    for(int i=2;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&f,&va,&we);f^=(lastans)%mod;\n        lastans+=VDC_tree::ins(i,f,va,we);printf(\"%lld\\n\",lastans);\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1538137901,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "\u9898\u610f:\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u70b9,\u8be2\u95ee$dis_{(i,j)}\\le r_i+r_j$\u7684\u6570\u91cf\n\n\u2460:\u5047\u88c5\u8fd9\u68f5\u6811\u662f\u4e00\u5f00\u59cb\u7ed9\u4f60\u7684\n\n\u6811\u4e0a\u8def\u5f84\u95ee\u9898$->$\u70b9\u5206\u6cbb\n\n\u8003\u8651\u91cd\u5fc3$u$,\u7b54\u6848\u5c31\u662f$dis_{(i,u)}+dis_{(u,j)}\\le r_i+r_j$\u7684\u6570\u91cf\n\u79fb\u4e00\u4e2a\u9879$\\Rightarrow dis_{(i,u)}-r_i\\le r_j-dis_{(u,j)}$\n\n\u628a\u6240\u6709\u7684$dis_{(i,u)}-r_i$\u63d2\u5165$u$\u7684\u5e73\u8861\u6811,\u8be2\u95ee$u$\u7684\u5e73\u8861\u6811\u4e2d$r_j-dis_{(u,j)}$\u7684\u6392\u540d\u5c31\u597d\u4e86\n\n~~\u8ba1\u7b97\u8d21\u732e\u4ec0\u4e48\u7684\u57fa\u672c\u90fd\u662f\u70b9\u5206\u6cbb\u7684\u57fa\u672c\u5957\u8def(\u5176\u5b9e\u4e3b\u8981\u662f\u8fd9\u90e8\u5206\u5927\u5bb6\u90fd\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86)~~\n\n\u2461:\u8fd9\u68f5\u6811\u4f1a\u52a8\u600e\u4e48\u505a?\n\n\u8003\u8651\u7528\u6309\u7167\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3,\u4ece\u8fd9\u4e2a\u70b9\u4e0d\u65ad\u8df3\u4e0a\u4e00\u5c42\u91cd\u5fc3,\u5f53\u6ee1\u8db3$Sz_{i}\\gt Sz_{fa_i}*\\alpha$\u65f6\u5c31\u91cd\u6784$fa_i$\u8fd9\u68f5\u6811,\u5f53\u7136$fa_i$\u8981\u662f\u6700\u6d45\u7684\n\n\u2462:\u7ec6\u8282&\u5361\u5e38\n\n\u542c\u8d77\u6765\u4f3c\u4e4e\u597d\u7b80\u5355(\u60f3\u5b8c\u9898\u89e3\u540e\u6211\u4e5f\u662f\u8fd9\u4e48\u60f3\u7684),\u4f46\u662f\u5199\u8d77\u6765\u5199\u5230\u6000\u7591\u4eba\u751f\n\n\u6211\u4eec\u8bb2\u4e00\u8bb2\u8fd9\u9053\u9898\u6700\u8981\u547d\u7684\u5730\u65b9\u2014\u2014\u7ec6\u8282&\u5361\u5e38\n\n$1.$\u4f60\u9700\u8981\u4e00\u9897\u9ad8\u6548\u7684\u5e73\u8861\u6811,\u53ef\u80fd\u4f60$80-90$\u5206,\u8fd9\u65f6\u5019\u6362\u4e00\u9897\u5e73\u8861\u6811\u8bf4\u4e0d\u5b9a\u5c31\u5361\u8fc7\u4e86;\u5982\u679c\u4f60\u7528$Treap$\u7684\u8bdd\u4e0d\u5982\u624b\u5199\u968f\u673a\u4f1a\u5feb\u4e00\u4e9b\n\n$2.$\u4f60\u9700\u8981\u4e00\u4e2a\u5e73\u8861\u6811\u7684\u5783\u573e\u6876,\u56e0\u4e3a\u8fd9\u9898\u91cd\u6784\u662f\u8981\u6e05\u7a7a\u8fd9\u68f5\u6811\u4ee5\u53ca\u8fd9\u68f5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u5e73\u8861\u6811\u7684,\u8fd9\u91cc\u4f1a\u9020\u6210\u5de8\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39(\u5176\u5b9e\u4f60\u4e0d\u5199\u5783\u573e\u6876\u4f60\u53ef\u80fd\u4f1a\u88ab\u5361\u5230$MLE$)\n\n$3.$\u6211\u7a0d\u5fae\u611f\u53d7\u4e86\u4e00\u4e0b\u5e73\u8861\u6811\u5199\u6cd5\u7684\u901f\u5ea6\u5927\u6982\u662f\u8fd9\u6837\u7684:\u7ed3\u6784\u4f53$\\gt$\u6307\u9488$\\gt$\u6570\u7ec4\n\n\u5176\u5b9e\u60f3\u60f3\u4e5f\u6bd4\u8f83\u597d\u7406\u89e3\u5427\n\n$4.$\u5bf9\u4e8e\u50cf\u6211\u4e00\u6837\u7684\u624b\u6b8b\u515a,\u4e00\u5f00\u59cb\u5199\u4ee3\u7801\u7684\u65f6\u5019\u6700\u597d\u8fd8\u662f\u5199\u5230$namespace$\u91cc\u9762\u5427,\u4e4b\u524d\u56e0\u4e3a\u5e73\u8861\u6811\u8282\u70b9\u7684$size$\u7528$sz$\u5f53\u540d\u5b57,\u7136\u540e\u70b9\u5206\u6cbb\u6309\u7167\u4e60\u60ef\u4e5f\u5199\u7684$sz$,\u540e\u6765\u53d1\u73b0\u91cd\u540d\u4e86,\u7136\u540e\u5c31\u7a0d\u5fae\u6539\u4e86\u4e00\u4e0b,\u7136\u540e\u6709\u4e00\u4e2a\u5730\u65b9\u6ca1\u6709\u6539,\u4f46\u662f\u4ed6\u5c0f\u6570\u636e\u8dd1\u51fa\u6765\u4e86$exm?!?!$,\u7136\u540e\u8c03\u5230\u7edd\u671b\u624d\u627e\u51fa\u6765.\u4ec0\u4e48\u4f60\u8bf4\u90a3\u6837\u4e0d\u597d\u770b$?$\u4f60\u4e0d\u77e5\u9053\u5148\u5199\u5b8c\u4fdd\u8bc1\u4e0d\u9519\u7136\u540e$ctrl+F$\u66ff\u6362\u5417?\n\n$5.$\u4ec0\u4e48\u4f60\u95ee\u6211\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u540d\u90a3\u4e48\u5feb$?$\u5176\u5b9e\u4e3b\u8981\u662f\u5904\u7406\u94fe\u7684\u90e8\u5206\u975e\u5e38\u5feb\n\n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u94fe\u5b8c\u5168\u4e0d\u8981\u50cf\u4e0a\u9762\u90a3\u4e48\u505a\n\n\u5047\u8bbe$1$\u662f\u94fe\u7684\u9876\u7aef,\u5de6\u53f3\u5206\u522b\u62c9\u4e00\u6761\u94fe,\u4ee4$d_i=dis(1,i)$\n\n\u8003\u8651\u65b0\u52a0\u8fdb\u6765\u7684\u70b9\u4e00\u5b9a\u5728\u94fe\u7684\u5e95\u7aef,\u8003\u8651\u4e24\u79cd\u60c5\u51b5\n\n$d_u-d_i\\le r_u+r_i\\Rightarrow-d_i-r_i\\le r_u-d_u,u$\u548c$i$\u5728\u540c\u4e00\u8fb9\n\n$d_u+d_i\\le r_u+r_i\\Rightarrow d_i-r_i\\le r_u-d_u,u$\u548c$i$\u5728\u4e0d\u540c\u8fb9\n\n\u6240\u4ee5\u4f60\u7ef4\u62a4$4$\u68f5\u5e73\u8861\u6811\u5c31\u53ef\u4ee5\u5728$O(n\\log n)$\u7684\u65f6\u95f4\u5185\u5904\u7406\u51fa\u7b54\u6848\u4e86\n\n\u6ce8\u610f\u8981\u7279\u5224\u5f53$d_u\\le r_1+r_u$\u65f6\u7b54\u6848\u8981\u51cf$1$\n\n$6.$\u5361\u5e38\u6709\u98ce\u9669,$code$\u9700\u8c28\u614e\n\n$7.$\u4ec0\u4e48\u4f60\u8bf4\u8fd8\u4e0d\u591f\u5feb$?$\u90a3\u4f60\u53ef\u4ee5\u7528$bfs$\u6765\u6c42\u91cd\u5fc3,\u4e0d\u8981\u7528$STL$,\u80fd\u653e\u5728\u4e00\u5757\u7684\u7528\u7ed3\u6784\u4f53\u5b58\u8d77$\\ldots$",
        "postTime": 1519896885,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "45 \u884c 1.7KB \u7d2b\u8346\u82b1\u4e4b\u604b\u4e86\u89e3\u4e00\u4e0b~\n\n\u603b\u65f6\u95f4\u4e0d\u5230 20s\uff0c\u6682\u65f6\u662f\u6d1b\u8c37\u6700\u4f18\u89e3\u3002\n\n\u6811\u4e0a\u8def\u5f84\u8be2\u95ee\uff0c\u5e26\u4fee\uff0c\u548c\u8ddd\u79bb\u6709\u5173\uff0c\u679c\u65ad\u60f3\u5230\u70b9\u5206\u6811\u3002\n\n\u628a\u9898\u76ee\u4e2d\u7684\u5f0f\u5b50\u79fb\u9879\uff0c\u5c31\u662f $dis(i,l)-r_i\\leq r_j-dis(j,l)$\uff0c\u5176\u4e2d $l$ \u662f $i,j$ \u5728\u70b9\u5206\u6811\u4e0a\u7684 lca\u3002\n\n\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u6bcf\u65b0\u589e\u4e00\u4e2a\u70b9 $i$ \u65f6\uff0c\u5148\u5bf9 $i$ \u7684\u6240\u6709\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148 $l$\uff0c\u67e5\u8be2 $r_i-dis(i,l)$ \u7684\u6392\u540d\uff0c\u7136\u540e\u5411\u5e73\u8861\u6811\u63d2\u5165 $dis(i,l)-r_i$\u3002\n\n\u56e0\u4e3a\u5728 $fa_l$ \u7684\u5e73\u8861\u6811\u4e2d\u67e5\u8be2\u65f6 $l$ \u7684\u5b50\u6811\u4f1a\u7b97\u91cd\uff0c\u6240\u4ee5\u8981\u518d\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u7528\u6765\u5bb9\u65a5\uff0c\u5411\u5176\u4e2d\u63d2\u5165 $dis(i,fa_l)-r_i$\u3002\n\n\u56e0\u4e3a\u5e73\u8861\u6811\u7801\u91cf\u548c\u5e38\u6570\u90fd\u8f83\u5927\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528 basic_string/vector \u548c\u6839\u53f7\u91cd\u6784\u3002\u5177\u4f53\u505a\u6cd5\u662f\u7ef4\u62a4\u4e24\u4e2a basic_string \u5206\u522b\u4e3a $big$ \u548c $small$\uff0c\u63d2\u5165\u65f6\u76f4\u63a5\u5411 $small$ push_back\u3002\u5982\u679c $small$ \u7684\u5927\u5c0f\u5927\u4e8e\u6839\u53f7\uff0c\u5c31\u5bf9 $big$ \u548c $small$ \u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u653e\u5165 $big$ \u4e2d\u3002\u67e5\u8be2\u65f6\u5728 $big$ \u4e2d\u4e8c\u5206\uff0c\u7136\u540e\u5728 $small$ \u4e2d\u66b4\u529b\u679a\u4e3e\u3002\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f $O(n\\sqrt n)$\u3002\n\n\u56e0\u4e3a\u6b64\u9898\u6709\u52a0\u70b9\u64cd\u4f5c\uff0c\u8fd8\u8981\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u8981\u52a8\u6001\u70b9\u5206\u6811\u3002\n\n\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u52a0\u5165\u4e00\u4e2a\u70b9 $i$ \u548c\u8fb9 $(i,j)$ \u65f6\u5148\u5c06 $fa_i$ \u8bbe\u4e3a $j$\u3002\u7136\u540e\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u679a\u4e3e $i$ \u5728\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148\uff0c\u5982\u679c $sz_x>\\alpha\\times sz_{fa_x}$\uff0c\u5c31\u5bf9 $fa_x$ \u7684\u5b50\u6811\u91cd\u65b0\u5efa\u6811\uff0c\u8fd9\u91cc $fa$ \u8868\u793a\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u3002$\\alpha$ \u53d6 $0.8$ \u5de6\u53f3\u5373\u53ef\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u70b9\u5206\u6811\u9ad8\u4e3a $\\log n$\u3002\n\n\u91cd\u65b0\u5efa\u6811\u53ea\u9700\u8981\u5bf9\u6574\u68f5\u6811\u70b9\u5206\u6cbb\u4e00\u904d\u5373\u53ef\u3002\n\n\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\uff1a\n\n\u5bf9\u6bcf\u4e2a\u70b9 $i$ \u5f00\u4e24\u4e2a basic_string $f$ \u548c $d$\uff0c\u5206\u522b\u8868\u793a\u7956\u5148 $j$ \u548c $dis(i,j)$\u3002\n\n\u518d\u5f00\u4e00\u4e2a basic_string $g$\uff0c\u8868\u793a $i$ \u7684\u70b9\u5206\u6811\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u3002\n\n\u91cd\u6784\u5b50\u6811 $i$ \u65f6\uff0c\u5bf9\u4e8e $g_i$ \u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9 $k$\uff0c\u6e05\u7a7a $k$ \u7684\u5e73\u8861\u6811\u548c $g_k$\uff0c\u7136\u540e\u4e0d\u65ad\u540c\u65f6\u5f39\u51fa $f_k$ \u548c $d_k$ \u7684\u672b\u5c3e\uff0c\u76f4\u5230 $f_k$ \u5f39\u51fa\u70b9 $i$\u3002\u8fd9\u6837 $f_k$ \u4e2d\u5c31\u53ea\u5269\u4e0b $i$ \u5b50\u6811\u4ee5\u5916\u7684\u70b9\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+3;\nstruct T{//\u6839\u53f7\u91cd\u6784 basic_string\n\tbasic_string<int>b,s,t;\n\tvoid st(){sort(b.begin(),b.end());}\n\tint get(int x){\n\t\tif(s.size()>300)t.resize(s.size()+b.size()),sort(s.begin(),s.end()),merge(b.begin(),b.end(),s.begin(),s.end(),t.begin()),swap(b,t),s={};\n\t\tint w=upper_bound(b.begin(),b.end(),x)-b.begin();\n\t\tfor(int i:s)w+=i<=x;\n\t\treturn s+=-x,w;\n\t}\n}u[N],v[N];\nbasic_string<int>f[N],d[N],g[N],h;\nlong long ans;\nint m,o,r,he[N],len[N*2],to[N*2],ne[N*2],w[N],sz[N];\nbool b[N];\nvoid gr(int x,int y){//\u6c42\u91cd\u5fc3\n\tint i=he[x],j,w=0;\n\tfor(sz[x]=1;i;i=ne[i])if(b[j=to[i]]&&j!=y)gr(j,x),sz[x]+=sz[j],w=max(w,sz[j]);\n\tif((w=max(w,m-sz[x]))<=o)o=w,r=x;\n}\nvoid gd(int x,int y,int z){//\u6c42\u8ddd\u79bb\n\tif(d[x].size())v[r].b+=d[x].back()-w[x];\n\tf[x]+=r,d[x]+=z,g[r]+=x,u[r].b+=z-w[x];\n\tfor(int i=he[x],j;i;i=ne[i])if(b[j=to[i]]&&j!=y)gd(j,x,z+len[i]);\n}\nvoid wk(int x){//\u70b9\u5206\u6cbb\n\tint i=he[x],l=m,j;\n\tfor(b[x]=0,gd(x,0,0),u[x].st(),v[x].st();i;i=ne[i])if(b[j=to[i]])o=m=sz[j]<sz[x]?sz[j]:l-sz[x],gr(j,0),wk(r);\n}\nint main(){\n\tint n,i,j,k,l,z,y,x,t=0;\n\tfor(scanf(\"%*d%d%*d%*d%d\",&n,w+1),f[1]+=1,g[1]+=1,d[1]+=0,u[1].s+=-w[1],i=2;printf(\"%lld\\n\",ans),i<=n;++i){\n\t\tscanf(\"%d%d%d\",&j,&x,w+i),j^=ans%int(1e9),ne[++t]=he[i],to[t]=j,len[t]=x,he[i]=t,ne[++t]=he[j],to[t]=i,len[t]=x,he[j]=t,f[i]=f[j],d[i]=d[j];\n\t\tfor(int&k:d[i])k+=x;\n\t\tfor(f[i]+=i,d[i]+=0,l=f[i].size(),k=l-1;~k;--k)if(g[z=f[i][k]]+=i,ans+=u[z].get(w[i]-d[i][k]),k)ans-=v[z].get(w[i]-d[i][k-1]);//\u66f4\u65b0\u7b54\u6848\n\t\tfor(k=0;k<l-1;++k)if(g[z=f[i][k]].size()*.8<g[f[i][k+1]].size()){\n\t\t\tfor(int o:h=g[z])for(u[o].b=u[o].s=v[o].b=v[o].s=g[o]={},b[o]=1;y=f[o].back(),f[o].pop_back(),d[o].pop_back(),y!=z;);//\u6e05\u7a7a\n\t\t\tm=o=h.size(),gr(z,0),wk(r);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1618923703,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "P3920 [WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\uff08\u52a8\u6001\u70b9\u5206\u6811\uff09"
    },
    {
        "content": "### **\u9898\u5916\u8bdd**\n\nAC\u8fd9\u9898\u4e4b\u540e\u95f2\u6765\u65e0\u4e8b\u7ffb\u4e86\u4e0b\u63d0\u4ea4\u8bb0\u5f55\u53d1\u73b0\u4ec5\u4ec5\u4e24\u9875\u4e4b\u5185\u5c31\u6709\u81f3\u5c1110\u4e2a\u4eba\u7c98\u4e86\u540c\u673a\u623f\u5927\u795e @shadowice1984 \u7684\u4ee3\u7801\u2026\u2026\u53ef\u89c1\u8fd9\u9898\u4e71\u8c61\u4e4b\u4e25\u91cd\u3002\n\n### **\u8fd9\u9898\u7684\u4e3b\u8981\u601d\u8def**\n\n\u663e\u7136\u6211\u4eec\u8981\u5728\u52a0\u5165\u8fd9\u4e2a\u70b9$i$\u4e4b\u540e\u4ec5\u8003\u8651\u6709\u591a\u5c11\u70b9\u80fd\u591f\u8ddf\u4ed6\u914d\u6210\u5bf9\u5c31\u884c\u4e86\uff0c\u6bd5\u7adf\u6211\u4eec\u7684\u7b54\u6848\u662f\u4e0d\u65ad\u7d2f\u52a0\u7684\u3002\n\n\u7136\u540e\u7edf\u8ba1\u8def\u5f84\u5c31\u662f\u70b9\u5206\u6cbb\uff0c\u5e76\u4e14\u6211\u4eec\u9700\u8981\u628a\u70b9\u5206\u6811\u5efa\u51fa\u6765\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u91cd\u5fc3$M$\uff0c\u6309\u7167\u70b9\u5206\u6cbb\u7684\u5957\u8def\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u7ecf\u8fc7$M$\u7684\u6240\u6709\u8def\u5f84\u5427\uff0c\u6211\u4eec\u8981\u627e\u7684\u70b9$P$\u662f\u5728$M$\u7684\u5176\u4ed6\u5b50\u8fde\u901a\u5757\u91cc\u7684\uff0c\u90a3\u4e48\u663e\u7136\u6709\uff1a\n\n$dis(P,M)-r_P<=r_i-dis(i,M)$\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u6bcf\u4e2a\u91cd\u5fc3\u5904\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4**\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb-\u70b9\u6743**\u5373\u53ef\uff0c\u6ce8\u610f\u5728\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u67e5\u8be2\u4e2d\u6211\u4eec\u662f**\u4e0d\u80fd**\u626b\u4e00\u904d\u6bcf\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\u7684\uff0c\u90a3\u6837\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\uff0c\u6211\u4eec\u4e3a\u4e86\u4e0d\u8ba9$P$\u51fa\u73b0\u5728$i$\u6240\u5728\u7684\u5b50\u6811\u4e2d\uff0c\u5c31\u63a5\u7740\u5728\u91cd\u5fc3\u4e0a\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4**\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u7684\u8ddd\u79bb-\u70b9\u6743**\uff0c\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u5c31\u5728$M$\u7684\u5e73\u8861\u6811\u4e0a\u4e0e$i$\u6240\u5728\u7684$M$\u7684\u70b9\u5206\u6811\u513f\u5b50\u7684\u5e73\u8861\u6811\u4e0a\u627e\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a\u6bd4$r_i-dis(i,M)$\u5c0f\u7684\uff0c\u7136\u540e\u5bb9\u65a5\u4e00\u4e0b\u8ba9\u540e\u8005\u51cf\u53bb\u524d\u8005\u5373\u53ef\u3002\n\n\u53e6\u5916\u8fd9\u9898\u7684\u53e6\u4e00\u4e2a\u5173\u952e\u5c31\u662f\u6211\u4eec\u7684\u70b9\u5206\u6811\u662f\u76f8\u5f53\u4e8e\u4e0d\u90a3\u4e48\u6b63\u5e38\u7684\u6784\u5efa\u7684\uff08\u610f\u601d\u5c31\u662f\u6ca1\u7528\u6b63\u5e38\u7684\u70b9\u5206\u6cbb\u6784\u5efa\uff09\uff0c\u663e\u7136\u8fd9\u6837\u4e0d\u5e73\u8861\u7684\u6811\u9ad8\u590d\u6742\u5ea6\u4f1a\u88ab\u5361\u6210\u66b4\u529b\uff0c\u5176\u5b9e\u70b9\u5206\u6811\u8fd9\u73a9\u610f\u6709\u70b9\u50cfK-D Tree\uff0c\u90fd\u662f\u6574\u4e2a\u6784\u9020\u51fa\u6765\u662f\u975e\u5e38\u7406\u60f3\u7684\u7ed3\u6784\uff0c\u7136\u800c\u5355\u70b9\u63d2\u5165\u5c31wei\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u5957\u8def\u5c31\u662f\u66ff\u7f6a\u7f8a\u5f0f\u66b4\u529b\u91cd\u6784\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u56e0\u5b50$\\alpha$\uff0c\u5f53\u8fd9\u4e2a\u70b9\u7684\u70b9\u5206\u6811\u513f\u5b50\u91cc\u7684\u6700\u5927\u7684$size$\u8d85\u8fc7\u4e86\u81ea\u5df1\u7684$size*\\alpha$\u5c31\u66b4\u529b\u91cd\u6784\uff0c\u600e\u4e48\u66b4\u529b\u91cd\u6784\u5462\uff1f\u505a\u4e00\u904d$O(nlog^2n)$\u7684\u666e\u901a\u70b9\u5206\u6cbb\u2026\u2026\u53cd\u6b63\u590d\u6742\u5ea6$O(\\text{\u80fd\u8fc7})$\u2026\u2026\n\n\u597d\uff0c\u601d\u8def\u8fd8\u662f\u4e0d\u96be\u7684\u3002\n\n### **\u5b9e\u73b0\u7ec6\u8282**\n\n**1.** \u5173\u4e8e\u90a3\u4e2a\u7384\u5b66\u7684$\\alpha$\uff0c\u6211\u5728\u6b63\u5e38\u7684\u66ff\u7f6a\u7f8a\u6811\u4e0a\u8bbe\u7684\u90fd\u662f$0.7$\uff0c\u7136\u800c\u90a3\u4e2a\u66b4\u529b\u91cd\u6784\u662f$O(n)$\u7684\uff0c\u8fd9\u91cc\u662f$O(nlog^2n)$\u7684\uff0c\u4ee3\u4ef7\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5$\\alpha$\u5fc5\u987b\u8c03\u9ad8\u4e00\u70b9\uff08\u8fd9\u6837\u91cd\u6784\u6b21\u6570\u5c31\u4f1a\u51cf\u5c11\u4e00\u4e9b\uff09\uff0c\u5b9e\u6d4b$\\alpha=0.7$\u65f6T\u621055\u5206\uff0c\u5f00\u5230$0.8$\u5c31\u80fdAC\u4e86\u3002\n\n**2.** \u8fd8\u662f\u5173\u4e8e\u66b4\u529b\u91cd\u6784\u7684\u4e8b\u60c5\uff0c\u6211\u5728\u6b63\u5e38\u7684\u66ff\u7f6a\u7f8a\u6811\u4e0a\u7684\u5199\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n\u2460.\u9012\u5f52\u63d2\u5165\u8be5\u70b9\n\n\u2461.\u56de\u6eaf\uff0c\u53d1\u73b0\u8be5\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u66b4\u529b\u91cd\u6784\n\n\u2462\u91cd\u6784\u5b8c\u63a5\u7740\u56de\u6eaf\uff0c\u91cd\u590d\u2461\n\n\u5176\u5b9e\u8fd9\u79cd\u5199\u6cd5\u662f\u6709\u7f3a\u9677\u7684\uff0c\u5728\u8fd9\u79cd\u91cd\u6784\u4ee3\u4ef7\u6bd4\u8f83\u5927\u7684\u66f4\u80fd\u591f\u4f53\u73b0\u51fa\u6765\uff0c\u5982\u679c\u4f60\u91cd\u6784\u5b8c\u4e86\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\uff0c\u518d\u91cd\u6784\u4e00\u904d\u4ed6\u7684\u7956\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u4e0a\u91cd\u6784\u4e0d\u91cd\u6784\u8fd9\u4e2a\u70b9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4ed6\u7684\u7956\u5148\u7684\u5e73\u8861\u6548\u679c\uff0c\u6240\u4ee5\u8fd8\u4e0d\u5982\u76f4\u63a5\u91cd\u6784\u4ed6\u7684\u7956\u5148\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u4e00\u904d\u63d2\u5165\u7684\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u70b9\u5206\u6811\u4e0a\u7684\u94fe\uff0c\u627e\u4e00\u4e2a\u6700\u9760\u4e0a\u7684\u4e0d\u5e73\u8861\u70b9\u66b4\u529b\u91cd\u6784\u5c31\u884c\u4e86\u3002\n\n**3.** \u8fd9\u79cd\u9519\u8bef\u662f\u52a8\u6001\u70b9\u5206\u6cbb\u4e0a\u7ecf\u5e38\u72af\u7684\uff0c\u5c31\u662f\u6211\u4eec\u5728\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u65f6\u523b\u60f3\u7740\u5f53\u524d\u626b\u7684\u4e1c\u897f\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a**\u8fde\u901a\u5757**\u800c\u975e\u4e00\u68f5**\u771f\u5b9e\u7684\u5b50\u6811**\uff0c\u4ed6\u7684\u8fb9\u754c\u53ef\u4e0d\u6b62\u4e00\u4e2a\u70b9\u8fd9\u4e48\u7b80\u5355\uff0c\u6240\u4ee5\u5728\u66b4\u529b\u91cd\u6784\u4e4b\u524d\u6211\u4eec\u8981\u5148\u5bf9\u8be5\u70b9\u8fdb\u884c\u4e00\u904dbfs\u628a\u8fd9\u4e2a\u8fde\u901a\u5757\u627e\u51fa\u6765\uff0c\u5982\u679c\u6211\u4eecbfs\u5230\u4e86\u4e00\u4e2a\u70b9\u53d1\u73b0\u5b83\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6df1\u5ea6\u8fd8\u6ca1\u6709\u5f53\u524d\u7684\u70b9\u5927\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u70b9\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u8fde\u901a\u5757\u5c31\u628a\u8fd9\u4e2a\u70b9\u6807\u8bb0\u4e3a\u8fb9\u754c\u3002\n\n**4.** \u56e0\u4e3a\u6211\u4eec\u5728\u8fd8\u6ca1\u6709\u91cd\u6784\u7684\u60c5\u51b5\u4e0b\u4ec5\u6709\u52a0\u70b9\u64cd\u4f5c\uff0c$size$\u4f1a\u53ea\u589e\u4e0d\u51cf\uff0c\u6240\u4ee5\u5bf9$maxsize$\u7684\u7ef4\u62a4\u76f4\u63a5\u53d6$max$\u5373\u53ef\u3002\u5e76\u4e0d\u7528\u989d\u5916\u7684\u5f00\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n**5.** \u6211\u4eec\u5728\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u8981\u7ef4\u62a4**\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u5728\u70b9\u5206\u6811\u4e0a\u7236\u4eb2\u7684\u8ddd\u79bb**\u5bf9\u5427\uff0c\u8fd9\u4e2a\u4e1c\u897f\u663e\u7136\u53ef\u4ee5bfs\uff0c\u4f46\u662f\u4ece\u54ea\u91cc\u5f00\u59cbbfs\u5462\uff1f\u663e\u7136\u662f\u7236\u4eb2\u5728\u539f\u6811\u4e0a\u8fde\u7684\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u70b9\uff0c\u663e\u7136\u4e0d\u4e00\u5b9a\u662f\u91cd\u5fc3\u3002\u53ef\u662f\u6211\u4eec\u662f\u5728\u70b9\u5206\u6811\u4e0a\u66b4\u529b\u91cd\u6784\u554a\uff0c\u90a3\u4e48\u5c31\u5bf9\u6bcf\u4e2a\u91cd\u5fc3\u8bb0\u4e00\u4e0b\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u54ea\u4e2a\u70b9\u88ab\u7236\u4eb2\u6240\u8fde\u7740\uff0c\u5c31\u884c\u4e86\u3002\uff08\u56e0\u4e3a\u8fd9\u6bd5\u7adf\u4e0d\u662f\u6b63\u5e38\u7684\u70b9\u5206\u6cbb\uff09\n\n**6.** \u8bb0\u5f97\u5728\u5e73\u8861\u6811\u4e0a\u5f00\u5783\u573e\u56de\u6536\u3002\n\n~~\u6b64\u5916\u6211\u7684\u5e73\u8861\u6811\u7528\u7684\u4e5f\u662f\u66ff\u7f6a\u7f8a\u6811\u2026\u2026\u66ff\u7f6a\u7f8a\u5957\u66ff\u7f6a\u7f8a\u8fd8\u884c~~\n\n\u4e0a\u4ee3\u7801~\uff08\u81ea\u5e26\u8d85\u5927\u5e38\u6570\u2026\u2026\u6211\u5f00Ofast\u5361\u65f6\u8fc7\u7684\u2026\u2026\uff09\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define ll long long\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid print(ll num){\n\t\tif(num>=10)print(num/10);putchar(num%10+'0');\n\t}\n\tnamespace bst{//\u66ff\u7f6a\u7f8a\u5e73\u8861\u6811 \n\t\tll data[5000001];\n\t\tint ch[5000001][2],size[5000001],cnt[5000001],gc[5000001],tmp[100001]\uff1b \n\t\tint gptr=1,gcptr=0,gn=1;\n\t\tinline int getnew(){\n\t\t\tif(!gcptr){\n\t\t\t\tgn++;return(gn-1);\n\t\t\t}gcptr--;return(gc[gcptr]);\n\t\t}\n\t\tvoid dfs(int tree){\n\t\t\tif(!tree)return;dfs(ch[tree][0]);\n\t\t\ttmp[gptr]=tree,gptr++;dfs(ch[tree][1]);\n\t\t}\n\t\tint build(int l,int r){//\u5e73\u8861\u6811\u66b4\u529b\u91cd\u6784 \n\t\t\tif(l>r)return(0);\n\t\t\tint mid=(l+r)>>1;\n\t\t\tint tree=tmp[mid];\n\t\t\tch[tree][0]=build(l,mid-1);\n\t\t\tch[tree][1]=build(mid+1,r);\n\t\t\tsize[tree]=cnt[tree]+size[ch[tree][1]]+size[ch[tree][0]];\n\t\t\treturn(tree);\n\t\t}\n\t\tvoid insert(int &tree,ll num){\n\t\t\tif(!tree){\n\t\t\t\ttree=getnew();\n\t\t\t\tch[tree][0]=ch[tree][1]=0;\n\t\t\t\tsize[tree]=cnt[tree]=1;\n\t\t\t\tdata[tree]=num;return;\n\t\t\t}\n\t\t\tif(data[tree]==num){\n\t\t\t\tsize[tree]++;\n\t\t\t\tcnt[tree]++;return;\n\t\t\t}\n\t\t\tsize[tree]++;\n\t\t\tinsert(ch[tree][num>data[tree]],num);\n\t\t\tif(max(size[ch[tree][0]],size[ch[tree][1]])>=size[tree]*0.7)gptr=1,dfs(tree),tree=build(1,gptr-1);\n\t\t}\n\t\tvoid baodfs(int tree){\n\t\t\tif(!tree)return;\n\t\t\tgc[gcptr]=tree;gcptr++;\n\t\t\tbaodfs(ch[tree][0]);\n\t\t\tbaodfs(ch[tree][1]);\n\t\t}\n\t\ttypedef struct _scg{//\u5c01\u88c5\u5e73\u8861\u6811 \n\t\t\tint root;\n\t\t\t_scg(){root=0;}\n\t\t\tinline void insert(ll num){bst::insert(root,num);}\n\t\t\tinline int getrank(ll num){//\u627e\u6709\u591a\u5c11\u5c0f\u4e8e\u7b49\u4e8enum\u7684 \n\t\t\t\tint ans=0,cur=root;\n\t\t\t\twhile(cur&&data[cur]!=num){\n\t\t\t\t\tif(num>data[cur])ans+=cnt[cur]+size[ch[cur][0]],cur=ch[cur][1];\n\t\t\t\t\telse cur=ch[cur][0];\n\t\t\t\t}\n\t\t\t\tif(cur)ans+=cnt[cur]+size[ch[cur][0]];\n\t\t\t\treturn(ans);\n\t\t\t}\n\t\t\tinline void clear(){//\u6e05\u7a7a \n\t\t\t\tbaodfs(root);root=0;\n\t\t\t}\n\t\t}scg;\n\t}\n\tint cannot,gdeep;\n\tunsigned char bv[100001];//\u662f\u5426\u4e3a\u6807\u8bb0\u8fc7\u7684\u8fb9\u754c \n\tint yuan[100001];//\u5f53\u524d\u8fde\u901a\u5757\u7684\u8ddf\u7236\u4eb2\u8fde\u7740\u7684\u70b9 \n\ttypedef struct _b{\n\t\tint dest;int nxt;int len\uff1b \n\t}bian;\n\tbian memchi[200001];\n\tint gn=1;int heads[100001];\n\tinline void add(int s,int t,int l){\n\t\tmemchi[gn].dest=t;\n\t\tmemchi[gn].nxt=heads[s];\n\t\tmemchi[gn].len=l;\n\t\theads[s]=gn;gn++;\n\t}\n\tbst::scg chs[100001],fas[100001];//\u4e24\u9897\u5e73\u8861\u6811 \n\tint fa[100001],rdeep[100001];\n\tll dis[100001][41],disfa[100001][41];\n\tint rsize[100001],mxsize[100001],size[100001],que[100001],que1[100001],head,tail,zx;\n\tvoid afs(int pt,int baba){//\u627e\u91cd\u5fc3 \n\t\tsize[pt]=1;\n\t\tint mx=0;\n\t\tfor(register int i=heads[pt];i;i=memchi[i].nxt){\n\t\t\tif(memchi[i].dest==baba||bv[memchi[i].dest])continue;\n\t\t\tafs(memchi[i].dest,pt);\n\t\t\tsize[pt]+=size[memchi[i].dest];\n\t\t\tmx=max(mx,size[memchi[i].dest]);\n\t\t}\n\t\tif(max(tail-size[pt],mx)<=tail/2)zx=pt;\n\t}\n\tint fab[100001],cme[100001];\n\tint ints[100001];\n\tvoid digui(int pt,int baba,int babab,int deep,int link){//\u66b4\u529b\u70b9\u5206\u6cbb \n\t\thead=0,tail=0;\n\t\tque1[tail]=pt;\n\t\tcme[pt]=0;tail++;\n\t\tdo{//\u7b2c\u4e00\u904dbfs\u521d\u59cb\u5316\u4e00\u6ce2 \n\t\t\tint me=que1[head];head++;\n\t\t\tdis[me][deep]=disfa[me][deep]=0x7fffffffffffffff;\n\t\t\tfor(register int i=heads[me];i;i=memchi[i].nxt){\n\t\t\t\tif(memchi[i].dest==baba||memchi[i].dest==cme[me]||bv[memchi[i].dest])continue;\n\t\t\t\tcme[memchi[i].dest]=me;\n\t\t\t\tque1[tail]=memchi[i].dest;tail++;\n\t\t\t}\n\t\t}while(head<tail);\n\t\tcannot=baba;\n\t\tzx=0;afs(pt,0);\n\t\tfa[zx]=baba;fab[zx]=babab;\n\t\trdeep[zx]=deep;rsize[zx]=tail;\n\t\tyuan[zx]=link;\n\t\tmxsize[baba]=max(mxsize[baba],rsize[zx]);\n\t\thead=0,tail=1;\n\t\tque[0]=zx;\n\t\tdis[zx][deep]=0;\n\t\tchs[zx].clear();\n\t\tdo{//\u7b2c\u4e8c\u904dbfs\u627e\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb \n\t\t\tint me=que[head];cme[me]=0;head++;chs[zx].insert(dis[me][deep]-ints[me]);\n\t\t\tfor(register int i=heads[me];i;i=memchi[i].nxt){\n\t\t\t\tif(dis[me][deep]+memchi[i].len<dis[memchi[i].dest][deep]&&!bv[memchi[i].dest]){\n\t\t\t\t\tdis[memchi[i].dest][deep]=dis[me][deep]+memchi[i].len;que[tail]=memchi[i].dest;tail++;\n\t\t\t\t}\n\t\t\t}\n\t\t}while(head<tail);\n\t\tfas[zx].clear();\n\t\thead=0;tail=1;\n\t\tque[0]=link;\n\t\tdisfa[link][deep]=babab;\n\t\tdo{//\u7b2c\u4e09\u904dbfs\u627e\u5230\u91cd\u5fc3\u7236\u4eb2\u7684\u8ddd\u79bb \n\t\t\tint me=que[head];head++;fas[zx].insert(disfa[me][deep]-ints[me]);\n\t\t\tfor(register int i=heads[me];i;i=memchi[i].nxt){\n\t\t\t\tif(disfa[me][deep]+memchi[i].len<disfa[memchi[i].dest][deep]&&!bv[memchi[i].dest]){\n\t\t\t\t\tdisfa[memchi[i].dest][deep]=disfa[me][deep]+memchi[i].len;\n\t\t\t\t\tque[tail]=memchi[i].dest;tail++;\n\t\t\t\t}\n\t\t\t}\n\t\t}while(head<tail);\n\t\tint me=zx;bv[zx]=1;\n\t\tfor(register int i=heads[zx];i;i=memchi[i].nxt){\n\t\t\tif(memchi[i].dest==baba||bv[memchi[i].dest])continue;\n\t\t\tdigui(memchi[i].dest,me,memchi[i].len,deep+1,memchi[i].dest);\n\t\t}\n\t}\n\tvoid ywymain(){\n\t\tget();\n\t\tint n=get();\n\t\tll ans=0;\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tint baba=get()^(ans%1000000000),len=get();\n\t\t\tints[i]=get();\n\t\t\tif(baba)add(baba,i,len),add(i,baba,len);//\u5148\u5728\u539f\u6811\u4e0a\u8fde\u8fb9 \n\t\t\tchs[i].insert(-ints[i]);\n\t\t\tfas[i].insert(len-ints[i]);\n\t\t\trdeep[i]=rdeep[baba]+1;rsize[i]=1;\n\t\t\tfa[i]=baba;fab[i]=len;\n\t\t\tdisfa[i][rdeep[i]]=len;yuan[i]=i;//\u521d\u59cb\u5316\u8be5\u70b9\uff0c\u5148\u8ba9\u4ed6\u76f4\u63a5\u5728\u70b9\u5206\u6811\u4e0a\u6307\u5411\u7236\u4eb2 \n\t\t\tint cur=baba,pre=i;\n\t\t\tint cjr=0;\n\t\t\twhile(cur){//\u7edf\u8ba1\u7b54\u6848 \n\t\t\t\tint dp=rdeep[cur];\n\t\t\t\tdis[i][dp]=dis[baba][dp]+len;\n\t\t\t\tdisfa[i][dp]=disfa[baba][dp]+len;\n\t\t\t\tchs[cur].insert(dis[i][dp]-ints[i]);\n\t\t\t\tfas[cur].insert(disfa[i][dp]-ints[i]);\n\t\t\t\tll ywy=chs[cur].getrank(ints[i]-dis[i][dp])-fas[pre].getrank(ints[i]-dis[i][dp]);\n\t\t\t\tans+=ywy;\n\t\t\t\trsize[cur]++;\n\t\t\t\tmxsize[fa[cur]]=max(mxsize[fa[cur]],rsize[cur]);\n\t\t\t\tif(mxsize[cur]>=rsize[cur]*0.8)cjr=cur;\n\t\t\t\tpre=cur;cur=fa[cur];\n\t\t\t}\n\t\t\tprint(ans);putchar('\\n');\n\t\t\tif(!cjr)continue;\n\t\t\tcur=cjr;cme[cur]=0;//\u91cd\u6784cur \n\t\t\thead=0;tail=1;que[0]=cur;\n\t\t\tdo{//bfs\u628a\u8fde\u901a\u5757\u6807\u8bb0\u4e00\u53d1 \n\t\t\t\tint me=que[head];head++;\n\t\t\t\tfor(register int j=heads[me];j;j=memchi[j].nxt){\n\t\t\t\t\tif(rdeep[memchi[j].dest]>=rdeep[cur]&&memchi[j].dest!=cme[me]){\n\t\t\t\t\t\tcme[memchi[j].dest]=me;\n\t\t\t\t\t\tque[tail]=memchi[j].dest;tail++;\n\t\t\t\t\t}\n\t\t\t\t\tif(rdeep[memchi[j].dest]<rdeep[cur])bv[memchi[j].dest]=1;\n\t\t\t\t}\n\t\t\t}while(head<tail);\n\t\t\tfor(register int j=0;j<tail;j++)bv[que[j]]=0,cme[que[j]]=0;\n\t\t\tbv[fa[cur]]=1;\n\t\t\tdigui(cur,fa[cur],fab[cur],rdeep[cur],yuan[cur]);\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();\n\treturn(0);//\u518d\u89c1\u7a0b\u5e8f \n}\n```",
        "postTime": 1543993383,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "**\u5206\u6790**\n\n\n**\u52a8\u6001\u70b9\u5206\u6cbb $+$ treap $+$ \u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3**\n\n\n\u5bb9\u6613\u770b\u51fa\uff0c\u8fd9\u9898\u662f\u4e00\u4e2a\u52a8\u6001\u7684\u70b9\u5206\u6cbb\u3002\n\n\n\u9759\u6001\u7684\u70b9\u5206\u6cbb\u662f\u5c06\u91cd\u5fc3\u4f5c\u4e3a\u5206\u6cbb\u4e2d\u5fc3\uff0c\u52a8\u6001\u7684\u5206\u6cbb\uff0c\u6bcf\u6b21\u91cd\u5fc3\u90fd\u4f1a\u53d8\uff0c\u6240\u4ee5\u5c31\u4e0d\u80fd\u4ee5\u91cd\u5fc3\u4f5c\u4e3a\u5206\u6cbb\u4e2d\u5fc3\u3002\n\n\n\u7528\u91cd\u5fc3\u4f5c\u4e3a\u5206\u6cbb\u4e2d\u5fc3\uff0c\u662f\u56e0\u4e3a\u8fd9\u6837\u6700\u80fd\u7701\u65f6\u95f4\uff0c\u90a3\u4e48\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u91cd\u5fc3\u5462\uff0c\u663e\u7136\u662f\u53ef\u4ee5\u7684\u3002\n\n\n\u63a5\u4e0b\u6765\u8bf4\u4e00\u8bf4\u5206\u6cbb\u4e2d\u5fc3\u7684\u95ee\u9898\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/24550.png)\n\n\u5982\u56fe\uff0c1\u662f\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\uff0c2,3,4\u662f\u5206\u51fa\u6765\u7684\u5b50\u6811\u7684\u5206\u6cbb\u4e2d\u5fc3\u3002\u4ecb\u7ecd\u4e00\u4e2a\u6982\u5ff5\uff1a\u70b9\u5206\u6811\uff0c\u5373\u6240\u6709\u5206\u6cbb\u4e2d\u5fc3\u5f62\u6210\u7684\u6811\u7ed3\u6784\u3002\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c2,3,4\u5728\u70b9\u5206\u6811\u4e2d\u7684\u7236\u4eb2\u4e3a1\u3002\n\n\n\u6bcf\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u90fd\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u7b54\u6848\u8fdb\u884c\u7d2f\u52a0\u3002\u5982\u679c2\u7684\u7b54\u6848\u4f5c\u4e86\u4fee\u6539\uff0c\u8bf4\u660e\u4ee52\u4e3a\u5206\u6cbb\u4e2d\u5fc3\u7684\u5b50\u6811\u51fa\u73b0\u53d8\u52a8\uff0c\u90a3\u4e483,4\u7684\u7b54\u6848\u4e0d\u7528\u4fee\u6539\uff0c\u800c1\u7684\u7b54\u6848\u5fc5\u5b9a\u4fee\u6539\u3002\n\n\n\u5982\u679c1\u662f2,3,4\u5728\u539f\u6811\u7684\u7236\u4eb2\uff0c\u540c\u7406\uff0c2,3,4\u4e92\u4e0d\u5173\u8054\uff0c\u5b83\u4eec\u90fd\u548c1\u6709\u5173\u8054\u3002\n\n\n\u65b0\u63d2\u5165\u4e00\u4e2a\u53f6\u7ed3\u70b9\uff0c\u5b83\u5728\u70b9\u5206\u6811\u4e2d\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u800c\u5b83\u5728\u539f\u6811\u7684\u7236\u4eb2\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5b83\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u3002\n\n\n**\u56e0\u6b64\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u539f\u6811\u4f5c\u4e3a\u70b9\u5206\u6811\u3002\u5373\uff1a\u628a\u6839\u7ed3\u70b9\u5f53\u4f5c\u6574\u68f5\u6811\u7684\u5206\u6cbb\u4e2d\u5fc3\uff0c\u5c06\u6839\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u5f53\u4f5c\u5b50\u6811\u7684\u5206\u6cbb\u4e2d\u5fc3\u3002\u8fd9\u6837\u6bcf\u6b21\u63d2\u5165\u7ed3\u70b9\u65f6\uff0c\u53ea\u8981\u5728\u70b9\u5206\u6811\u4e2d\u627e\u5230\u5b83\u539f\u6811\u7236\u4eb2\u7684\u4f4d\u7f6e\uff0c\u63d2\u5165\u8fd9\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u53f6\u5b50\u7ed3\u70b9\u5373\u53ef\u3002**\n\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u70b9\u5206\u6811\u8fc7\u5ea6\u4e0d\u5e73\u8861\uff0c\u6bd4\u5982\u8bf4\u539f\u6811\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u4fee\u6539\u7956\u5148\u7ed3\u70b9\u7684\u7b54\u6848\u90fd\u4f1a\u904d\u5386\u6574\u68f5\u6811\u3002\n\n\n\u53ef\u4ee5\u5229\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u5f53\u4ee5\u67d0\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8fc7\u5ea6\u4e0d\u5e73\u8861\u65f6\u5c06\u5b83\u91cd\u5efa\u3002\n\n\n**\u56e0\u4e3a\u6309\u91cd\u5fc3\u5206\u6cbb\u662f\u6700\u7701\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u5c06\u8fd9\u68f5\u70b9\u5206\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u8fdb\u884c\u4e00\u6b21\u9759\u6001\u7684\u70b9\u5206\u6cbb\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06\u8fd9\u68f5\u70b9\u5206\u5b50\u6811\u5efa\u6210\u4e86\u8fd1\u4f3c\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u3002**\n\n\n\u5206\u6cbb\u4e2d\u5fc3\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\uff0c\u4e0b\u9762\u8bf4\u4e00\u8bf4\u600e\u4e48\u8ba1\u7b97\u7b54\u6848\u3002\n\n\n**\u8bbe\u6b64\u65f6\u5206\u6cbb\u4e2d\u5fc3\u4e3au\uff0c\u5219\uff1a**\n\n$dist(i,j)<=ri+rj$ **\u53d8\u4e3a** $dist(j,u)-rj<=ri-dist(i,u)$\n\n\n**\u56e0\u6b64\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a $u$ \u7ef4\u62a4\u4e00\u4e2atreap\uff0c\u5b58\u50a8\u6240\u6709 $dist(j,u)-rj$ \u7684\u503c\uff0c\u67e5\u627e $ri-dist(i,u)$ \u7684\u6392\u540d\uff0c\u5c31\u662f\u6240\u6709\u7684\u60c5\u51b5\u3002\u67e5\u627e\u4e4b\u540e\uff0c\u8981\u5c06 $dist(i,u)-ri$ \u52a0\u5165 $u$ \u7684treap\uff0c\u4f5c\u4e3a\u4ee5\u540e\u7684 $j$.**\n\n\n\u663e\u7136\u6709\u975e\u6cd5\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/29621.png)\n\n$i$\u5230$j$ \u7684\u6700\u77ed\u8def\u5f84\u662f\u4e0d\u4f1a\u7ecf\u8fc7 $u$ \u7684\uff0c\u4f46\u662f\u53ef\u80fd\u6ee1\u8db3 $dist(j,u)-rj<=ri-dist(i,u)$ \uff0c\u8fd9\u79cd\u60c5\u51b5\u975e\u6cd5\uff0c\u5e94\u8be5\u51cf\u6389\u3002\n\n\n\u6240\u4ee5\u5bf9\u6bcf\u4e2a\u70b9\u518d\u7ef4\u62a4\u4e00\u4e2atreap\uff0c\u5b58\u50a8\u8fd9\u79cd\u975e\u6cd5\u7684\u60c5\u51b5\u3002\n\n\n**\u5982\u56fe\u6240\u793a\uff0c$u$ \u662f\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\uff0c$v$ \u662f\u5b50\u6811\u7684\u5206\u6cbb\u4e2d\u5fc3\uff0c\u7ed3\u70b9 $i$\u548c$j$ \u5728\u4ee5 $v$ \u4e3a\u5206\u6cbb\u4e2d\u5fc3\u7684\u5b50\u6811\u4e2d\uff0c $v$ \u7684\u7b2c\u4e8c\u4e2atreap\u5b58\u50a8\u6240\u6709\u7684 $dist(j,u)-rj$\uff0c\u53ef\u4ee5\u67e5 $ri-dist(i,u)$ \u7684\u6392\u540d\uff0c\u5373\u975e\u6cd5\u60c5\u51b5\u7684\u6570\u91cf\u3002\u67e5\u5b8c\u4e4b\u540e\uff0c\u8981\u628a $dist(i,u)-ri$ \u52a0\u5165 $v$ \u7684\u7b2c\u4e8c\u4e2atreap\u3002**\n\n\n**\u603b\u7684\u6765\u8bf4\u5c31\u662f\uff0c\u6bcf\u4e2a\u70b9\u8981\u5b58\u50a8\u5b83\u6240\u6709\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148(\u5305\u62ec\u5b83\u81ea\u5df1)\u7684\u7f16\u53f7\uff0c\u4ee5\u53ca\u5b83\u5230\u7956\u5148\u7684\u8ddd\u79bb\u3002\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u53f6\u5b50\uff0c\u5148\u8fde\u63a5\u5b83\u7684\u7236\u4eb2\uff0c\u53ef\u4ee5\u6839\u636e\u5b83\u7684\u7236\u4eb2\u7684\u4fe1\u606f\uff0c\u5f97\u5230\u5b83\u7684\u7956\u5148\u4eec\u7684\u4fe1\u606f\u3002\u5148\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5728\u6240\u6709\u7956\u5148\u7ed3\u70b9\u4e2d\u67e5\u6392\u540d\uff0c\u7d2f\u8ba1\u7b54\u6848\uff0c\u518d\u5f80\u6240\u6709\u7956\u5148\u7ed3\u70b9\u548c\u5b83\u7684treap\u52a0\u5165\u7ed3\u70b9\u3002\u7136\u540e\uff0c\u518d\u4ece\u6df1\u5ea6\u6d45\u5230\u6df1\u904d\u5386\u6240\u6709\u7956\u5148\u7ed3\u70b9\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u5e73\u8861\u6761\u4ef6\u7684\u70b9\uff0c\u5c06\u5b83\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u8fdb\u884c\u4e00\u6b21\u9759\u6001\u7684\u70b9\u5206\u6cbb\uff0c\u76f8\u5f53\u4e8e\u91cd\u5efa\u70b9\u5206\u6811\u3002**\n\n\n**\u4ee3\u7801\u5982\u4e0b**\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\ninline int read() //\u8bfb\u5165\u4f18\u5316\n{\n    char ch; int res=0;\n    while (ch = getchar(), ch < '0' || ch > '9');\n    res = ch - 48;\n    while (ch = getchar(), ch >= '0' && ch <= '9')\n    res = res * 10 + ch - 48;\n    return res;\n}\n\nconst double alpha = 0.777666;\nconst int e = 1e5+5, mod = 1e9, inf = 0x3f3f3f3f, o = 4000006;\nint test, n, r[e], fa[e], sze[e], son[e], num, next[e << 1];\nint dist[e], head[e], go[e << 1], cost[e << 1];\nlong long ans = 0;\nbool vis[e];\nvector<int>anc[e], id[e], sons[e];\n\ninline void add(int x, int y, int v) //\u5efa\u8fb9 \n{\n    next[++num] = head[x]; \n    head[x] = num;\n    go[num] = y;\n    cost[num] = v;\n    next[++num] = head[y];\n    head[y] = num;\n    go[num] = x;\n    cost[num] = v;\n}\n\nint unused[o], top, pool, rt_self[e], rt_fa[e];\n\n//\u5f53 grav \u4e3a\u5206\u6cbb\u4e2d\u5fc3\u65f6\n//rt_self[grav]\u8868\u793a\u5b58\u50a8 dist(i, grav) - ri \u7684 treap \u7684\u6839\u7ed3\u70b9 \n//\u8bbe grav \u5728\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u4e3a f\n//rt_fa[grav] \u8868\u793a\u5b58\u50a8 dist(i, f) - ri \u7684\u6839\u7ed3\u70b9(\u975e\u6cd5\u60c5\u51b5)\n \nstruct node\n{\n    int lc, rc, val, s, pos;\n}a[o];\n\ninline void reset(int &x, int v)\n{\n    a[x].lc = a[x].rc = 0;\n    a[x].val = v;\n    a[x].s = 1;\n    a[x].pos = rand();\n}\n\ninline void update(int &x)\n{\n    a[x].s = a[a[x].lc].s + a[a[x].rc].s + 1;\n}\n\ninline int new_node()\n{\n    int res;\n    if (top > 0)\n    {\n        res = unused[top]; //\u5c06\u7528\u8fc7\u7684\u5e76\u4e14\u5220\u8fc7\u7684\u70b9\u7684\u7f16\u53f7\u653e\u5165 unused\n        top--;     //\u65b0\u5efa\u8282\u70b9\u7684\u65f6\u5019\u53ef\u4ee5\u518d\u4f7f\u7528\u8fd9\u4e9b\u7f16\u53f7\uff0c\u53ef\u4ee5\u7701\u7a7a\u95f4\n    }\n    else res = ++pool;\n    return res;\n}\n\ninline void del_node(int &u)\n{\n    if (!u) return;\n    unused[++top]=u;\n    a[u].val = a[u].s = a[u].pos = 0;\n    if (a[u].lc) del_node(a[u].lc);\n    if (a[u].rc) del_node(a[u].rc);\n    u = 0;\n}\n\ninline void zig(int &u)\n{\n    int v = a[u].lc;\n    a[u].lc = a[v].rc;\n    a[v].rc = u;\n    a[v].s = a[u].s;\n    update(u);\n    u = v;\n}\n\ninline void zag(int &u)\n{\n    int v = a[u].rc;\n    a[u].rc = a[v].lc;\n    a[v].lc = u;\n    a[v].s = a[u].s;\n    update(u);\n    u = v;\n}\n\ninline void insert(int &u,int v)\n{\n    if (!u)\n    {\n        u = new_node();\n        reset(u, v);\n        return;\n    }\n    a[u].s++;\n    if (v <= a[u].val)\n    {\n        insert(a[u].lc, v);\n        if (a[a[u].lc].pos < a[u].pos) zig(u);\n    }\n    else\n    {\n        insert(a[u].rc, v);\n        if (a[a[u].rc].pos < a[u].pos) zag(u);\n    }\n}\n\ninline int qrank(int u, int v)\n{\n    if (!u) return 0;\n    if (v < a[u].val) return qrank(a[u].lc, v);\n    else return a[a[u].lc].s + 1 + qrank(a[u].rc, v);\n}\n\ninline int calc_grav(int &st) //\u6c42\u6811\u7684\u91cd\u5fc3\n{\n    static int qn, que[e];\n    que[qn = 1] = st;\n    fa[st] = 0;\n    for (int i = 1; i <= qn; i++)\n    {\n        int u = que[i];\n        sze[u] = 1;\n        son[u] = 0;\n        for (int j = head[u]; j; j = next[j])\n        {\n            int v = go[j];\n            if(!vis[v] || v == fa[u])continue;\n            fa[v] = u;\n            que[++qn] = v;\n        }\n    }\n    for (int i = qn; i >= 2; i--)\n    {\n        int u = que[i], v = fa[u];\n        sze[v] += sze[u];\n        if (sze[u] > son[v])\n        son[v] = sze[u];\n    }\n    int all = sze[st], grav = 0, min = inf;\n    for (int i = 1; i <= qn; i++)\n    {\n        int u = que[i];\n        if (all - sze[u] > son[u])\n        son[u] = all - sze[u];\n        if (son[u] < min)\n        {\n            min = son[u];\n            grav = u;\n        }\n    }\n    return grav;\n}\n\ninline void dac(int &st, int &par) //\u9759\u6001\u70b9\u5206\u6cbb\uff0c\u7528\u4e8e\u91cd\u5efa \n{\n    static int qn, que[e];\n    int grav = calc_grav(st);\n    vis[grav] = false; // vis[] = false \u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u5f53\u8fc7\u5206\u6cbb\u4e2d\u5fc3\n    que[qn = 1] = grav;\n    fa[grav] = 0;\n    dist[grav] = 0;\n    for (int i = 1; i <= qn; i++)\n    {\n        int u = que[i];\n        for (int j = head[u]; j; j = next[j])\n        {\n            int v = go[j];\n            if (!vis[v] || v == fa[u]) continue;\n            fa[v] = u;\n            dist[v] = dist[u] + cost[j];\n            que[++qn] = v;\n        }\n    }\n    for (int i = 1; i <= qn; i++)\n    {\n        int u = que[i];\n        id[u].push_back(grav);\n        //id[u][i] \u8868\u793a u \u5728\u70b9\u5206\u6811\u7684\u6240\u6709\u7956\u5148\u4e2d(\u5305\u62ec\u5b83\u81ea\u5df1)\u7b2c i \u8001\u7684\u7f16\u53f7 \n        anc[u].push_back(dist[u]); //anc[u][i] \u5c31\u662f dist(u, id[u][i]) \n        //id[u][i] \u662f id[u][i+1] \u70b9\u5206\u6811\u4e2d\u7684\u7236\u4eb2\uff0canc \u540c\u7406 \n        sons[grav].push_back(u); //sons[u] \u5b58\u50a8\u5728\u70b9\u5206\u6811\u4e2du\u7684\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\n        insert(rt_self[grav], dist[u] - r[u]); //\u6240\u6709\u60c5\u51b5\n        if (par != 0)\n        insert(rt_fa[grav], anc[u][anc[u].size() - 2] - r[u]); //\u975e\u6cd5\u60c5\u51b5 \n    }\n    for (int i = head[grav]; i; i = next[i])\n    {\n        int v = go[i];\n        if (vis[v]) dac(v, grav);\n    }\n}\n\ninline void rebuild(int &u, int par) //\u91cd\u5efa\u70b9\u5206\u6811\u7684\u67d0\u4e00\u5b50\u6811 \n{\n    vector<int>tmpson = sons[u];\n    //\u8981\u5148\u628a\u539f\u6765\u7684 sons[u] \u5b58\u4e86\uff0c\u56e0\u4e3a\u4e0b\u9762 sons[v].clear\n    int notres = anc[par].size(), len = tmpson.size();\n    for (int i = 0; i < len; i++) //\u5148\u628a\u8fd9\u68f5\u5b50\u6811\u90e8\u5206\u7684\u4fe1\u606f\u5220\u4e86\n    {\n        int v = tmpson[i];\n        vis[v] = true;\n        sons[v].clear();\n        anc[v].resize(notres); //\u4ec5\u4e0e\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u7684\u7956\u5148\u4eec\u6709\u5173\u7684\u4fe1\u606f\u8fd8\u8981\u7559\u7740\n        id[v].resize(notres);\n        del_node(rt_self[v]);\n        del_node(rt_fa[v]);\n    }\n    dac(u, par); //\u518d\u5c06\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u8fdb\u884c\u4e00\u6b21\u9759\u6001\u7684\u70b9\u5206\u6cbb\n}\n\ninline void check(int &u)\n{\n\tint len = anc[u].size();\n    for (int i = 0; i < len; i++)\n    {\n        insert(rt_self[id[u][i]], anc[u][i] - r[u]);\n        //\u6240\u6709\u7956\u5148\u7684 treap (\u5305\u62ec\u5b83\u81ea\u5df1\u7684)\u90fd\u8981\u63d2\u5165\u65b0\u7ed3\u70b9\n        if (i != 0)\n        insert(rt_fa[id[u][i]], anc[u][i - 1] - r[u]);\n    }\n    for (int i = 0; i < len - 1; i++)\n    {\n        int sze_fa = a[rt_self[id[u][i]]].s;\n        int sze_son = a[rt_self[id[u][i + 1]]].s;\n        if (sze_fa <= 30)break;\n        if (sze_son > alpha * sze_fa) //\u8fc7\u5ea6\u4e0d\u5e73\u8861\uff0c\u91cd\u5efa\n        {\n            rebuild(id[u][i], i == 0 ? 0 : id[u][i - 1]);\n            break;\n        }\n    }\n}\n\ninline int calc_ans(int &u, int &v, int &w)\n{\n    int res = 0;\n    anc[u] = anc[v]; //\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u4eb2\u7684\u7956\u5148\u4e5f\u662f\u5b83\u7684\u7956\u5148 \n    id[u] = id[v]; //\u5b58\u50a8\u7684\u4fe1\u606f\u5148\u7531\u5b83\u7236\u4eb2\u5f97\u6765 \n    anc[u].push_back(-w); //\u548c += w \u62b5\u6d88\n    id[u].push_back(u);\n    int len = anc[u].size();\n    for (int i = 0; i < len; i++)\n    {\n        anc[u][i] += w;\n        sons[id[u][i]].push_back(u);\n        res += qrank(rt_self[id[u][i]], r[u] - anc[u][i]);\n        //\u67e5\u8be2 r[u] - dist(u, id[u][i]) \u7684\u6392\u540d\uff0c\u5373\u6240\u6709\u7684\u60c5\u51b5\n        if (i != 0)\n        res -= qrank(rt_fa[id[u][i]], r[u] - anc[u][i - 1]);\n        //\u67e5\u8be2 r[u] - dist(u, id[u][i] \u7684\u7236\u4eb2) \u7684\u6392\u540d\uff0c\u5373\u975e\u6cd5\u60c5\u51b5\n    }\n    return res;\n}\n\nint main()\n{\n    test = read();\n    n = read();\n    for (int i = 1; i <= n; i++)\n    {\n        int fa_i = read(), c = read();\n        r[i] = read();\n        fa_i ^= (ans % mod);\n        if(i == 1)\n        {\n            anc[i].push_back(0);\n            id[i].push_back(i);\n            sons[i].push_back(i);\n            insert(rt_self[i], -r[i]); //\u7b2c\u4e00\u4e2a\u7ed3\u70b9 dist \u4e3a 0  \n            puts(\"0\");\n            continue;\n        }\n        add(fa_i, i, c);\n        ans += calc_ans(i, fa_i, c); //\u7d2f\u52a0\u5305\u542b\u5f53\u524d\u7ed3\u70b9\u4e14\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9\u7684\u4e2a\u6570\n        check(i); //\u5f80\u6240\u6709\u7956\u5148\u7ed3\u70b9\u548c\u5b83\u7684 treap \u52a0\u5165\u7ed3\u70b9\n        //\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u8fc7\u5ea6\u4e0d\u5e73\u8861\u73b0\u8c61\n        printf(\"%lld\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1536140452,
        "uid": 15268,
        "name": "\u82b1\u6dc7\u6dcb",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u672c\u9898\u8fd9\u6837\u5e26\u4fee\u7684\u6811\u4e0a\u8def\u5f84\u95ee\u9898\uff0c\u8003\u8651\u7528\u52a8\u6001\u70b9\u5206\u6cbb\u6765\u89e3\u51b3\u3002\n\n\u5c06\u9898\u76ee\u4e2d\u7ed9\u7684\u5f0f\u5b50\u53d8\u5f62\u5f97\uff1a\n\n$$\n\\begin{aligned} \n\tval_x + val_y \\geqslant dis_{x,y} \\\\\n    \n    val_y \\geqslant dis_{x,y} - val_x\n\\end{aligned}\n$$\n\n\u5bf9\u4e8e\u70b9\u5206\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9 $x$ \u7ef4\u62a4 $dis_{x,y} - val_x$\uff0c$y$ \u4e3a\u5728\u70b9\u5206\u6811\u4e0a\u5176\u5b50\u6811\u5185\u7684\u8282\u70b9\u3002\u67e5\u8be2\u65f6\u53ea\u9700\u8003\u8651\u5bf9\u4e8e\u5f53\u524d\u5b50\u6811\uff0c\u7ef4\u62a4\u7684\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e\u63d2\u5165\u7684\u8282\u70b9\u6743\u503c\u7684\u4e2a\u6570\u3002\n\n\u8003\u8651\u5230\u65f6\u7a7a\u9650\u5236\uff0c\u70b9\u5206\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u4fe1\u606f\uff0c\u5e76\u4e14\u8fd8\u9700\u4f7f\u7528\u5feb\u901f\u7684 $Treap$ \u6216\u8005\u66ff\u7f6a\u7f8a\u6811\u3002\u5728\u70b9\u5206\u6811\u4e0a\u5411\u4e0a\u8df3\u65f6\uff0c\u67e5\u8be2\u5176\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u7b97\u91cd\uff0c\u8fd8\u9700\u51cf\u53bb\u5176\u5b50\u8282\u70b9\u5bf9\u5e94\u8fde\u901a\u5757\u7684\u8d21\u732e\uff0c\u8fd9\u91cc\u5bf9\u6bcf\u4e2a\u8282\u70b9\u518d\u7ef4\u62a4\u4e00\u4e2a\u5e73\u8861\u6811\u5373\u53ef\u3002\n\n\u5728\u4e0d\u65ad\u63d2\u5165\u8282\u70b9\u540e\uff0c\u70b9\u5206\u6811\u4f1a\u8d8a\u6765\u8d8a\u4e0d\u5e73\u8861\uff0c\u53ef\u4ee5\u5e94\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u548c\u5176\u7236\u4eb2\u8282\u70b9\u5b50\u6811\u5927\u5c0f\u6ee1\u8db3\u4e0d\u5e73\u8861\u7684\u5224\u5b9a\u5173\u7cfb\u540e\uff0c\u5c31\u5bf9\u8be5\u5b50\u6811\u8fdb\u884c\u91cd\u6784\uff0c\u5bf9\u8282\u70b9\u4e0a\u7ef4\u62a4\u7684\u5e73\u8861\u6811\u8fdb\u884c\u5783\u573e\u56de\u6536\uff0c\u53ea\u5bf9\u8fd9\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u70b9\u5206\u6cbb\uff0c\u7ef4\u62a4\u597d\u4fe1\u606f\u540e\u518d\u8fde\u63a5\u56de\u53bb\u5373\u53ef\u3002\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u5bf9\u70b9\u5206\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u8bb0\u5f55\u3002\n\n\u5b9e\u73b0\u65f6\uff0c\u6211\u5bf9\u4e8e\u539f\u6811\uff0c\u5e73\u8861\u6811\uff0c\u70b9\u5206\u6811\u4f7f\u7528\u4e86\u4e09\u4e2a\u7ed3\u6784\u4f53\u6765\u7ef4\u62a4\uff0c\u4fbf\u4e8e\u64cd\u4f5c\u548c\u8c03\u8bd5\uff0c\u5e73\u8861\u6811\u7528\u7684 $Treap$\uff0c\u7528\u7ed3\u6784\u4f53\u5c01\u88c5\u540e\u4f1a\u663e\u8457\u53d8\u5feb\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\n#define maxm 4000010\n#define mod 1000000000\n#define alpha 0.76\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n;\nll ans;\nstruct Graph\n{\n    int d[maxn],de[maxn],f[maxn][20],val[maxn];\n    struct edge\n    {\n        int to,nxt,v;\n    }e[maxn];\n    int head[maxn],edge_cnt;\n    void add(int from,int to,int val)\n    {\n        e[++edge_cnt]=(edge){to,head[from],val};\n        head[from]=edge_cnt;\n    }\n    void insert(int x,int fa,int v)\n    {\n        if(fa) add(fa,x,v),add(x,fa,v);\n        f[x][0]=fa,de[x]=de[fa]+1,d[x]=d[fa]+v;\n        for(int i=1;i<=17;++i) f[x][i]=f[f[x][i-1]][i-1];\n    }\n    int lca(int x,int y)\n    {\n        if(de[x]<de[y]) swap(x,y);\n        for(int i=17;i>=0;--i)\n            if(de[f[x][i]]>=de[y])\n                x=f[x][i];\n        if(x==y) return x;\n        for(int i=17;i>=0;--i)\n            if(f[x][i]!=f[y][i])\n                x=f[x][i],y=f[y][i];\n        return f[x][0];\n    }\n    int dis(int x,int y)\n    {\n        return d[x]+d[y]-d[lca(x,y)]*2;\n    }\n}G;\nstruct Treap\n{\n    int tot,top;\n    int st[maxm];\n    struct node\n    {\n        int val,key,cnt,siz;\n        int ch[2];\n    }t[maxm];\n    int add(int v)\n    {\n        int x;\n        if(top) x=st[top--];\n        else x=++tot;\n        t[x].ch[0]=t[x].ch[1]=0,t[x].val=v,t[x].key=rand(),t[x].siz=t[x].cnt=1;\n        return x;\n    }\n    void del(int x)\n    {\n        if(!x) return;\n        st[++top]=x,del(t[x].ch[0]),del(t[x].ch[1]);\n    }\n    void pushup(int x)\n    {\n        t[x].siz=t[t[x].ch[0]].siz+t[t[x].ch[1]].siz+t[x].cnt;\n    }\n    void rotate(int &x,int k)\n    {\n        int y=t[x].ch[k^1];\n        t[x].ch[k^1]=t[y].ch[k],t[y].ch[k]=x;\n        pushup(x),pushup(y),x=y;\n    }\n    void insert(int &x,int v)\n    {\n        if(!x)\n        {\n            x=add(v);\n            return;\n        }\n        if(v==t[x].val)\n        {\n            t[x].cnt++,pushup(x);\n            return;\n        }\n        int k=(v>t[x].val);\n        insert(t[x].ch[k],v);\n        if(t[x].key<t[t[x].ch[k]].key) rotate(x,k^1);\n        pushup(x);\n    }\n    int query(int x,int v)\n    {\n        if(!x) return 0;\n        if(v<t[x].val) return query(t[x].ch[0],v);\n        return t[t[x].ch[0]].siz+t[x].cnt+query(t[x].ch[1],v);\n    }\n}Tr;\nstruct Tree\n{\n    int tot,root;\n    int siz[maxn],ma[maxn],fa[maxn],rt1[maxn],rt2[maxn];\n    bool vis[maxn];\n    vector<int> ve[maxn];\n    void dfs_root(int x,int fath)\n    {\n        siz[x]=1,ma[x]=0;\n        for(int i=G.head[x];i;i=G.e[i].nxt)\n        {\n            int y=G.e[i].to;\n            if(vis[y]||y==fath) continue;\n            dfs_root(y,x),siz[x]+=siz[y];\n            ma[x]=max(ma[x],siz[y]);\n        }\n        ma[x]=max(ma[x],tot-siz[x]);\n        if(ma[x]<ma[root]) root=x;\n    }\n    void dfs_dis(int x,int fath,int dis,int id)\n    {\n        Tr.insert(rt1[id],dis-G.val[x]);\n        if(fa[id]) Tr.insert(rt2[id],G.dis(x,fa[id])-G.val[x]);\n        for(int i=G.head[x];i;i=G.e[i].nxt)\n        {\n            int y=G.e[i].to;\n            if(vis[y]||y==fath) continue;\n            dfs_dis(y,x,dis+G.e[i].v,id);\n        }\n    }\n    void solve(int x)\n    {\n        int now=tot;\n        vis[x]=true,dfs_dis(x,0,0,x);\n        for(int i=G.head[x];i;i=G.e[i].nxt)\n        {\n            int y=G.e[i].to;\n            if(vis[y]) continue;\n            root=0,tot=siz[y];\n            if(siz[y]>siz[x]) tot=now-siz[x];\n            dfs_root(y,x),fa[root]=x,ve[x].push_back(root),solve(root);\n        }\n    }\n    void del(int x)\n    {\n        vis[x]=false;\n        for(int i=0;i<ve[x].size();++i) del(ve[x][i]);\n        Tr.del(rt1[x]),Tr.del(rt2[x]),rt1[x]=rt2[x]=0,ve[x].clear();\n    }\n    void rebuild(int x)\n    {\n        root=0,tot=Tr.t[rt1[x]].siz,del(x),dfs_root(x,0);\n        for(int i=0;i<ve[fa[x]].size();++i)\n            if(ve[fa[x]][i]==x)\n                ve[fa[x]][i]=root;\n        fa[root]=fa[x],solve(root);\n    }\n    void insert(int x,int fath)\n    {\n        fa[x]=fath,ve[fath].push_back(x),vis[x]=true;\n        for(int i=x;i;i=fa[i])\n        {\n            if(fa[i])\n            {\n                int d=G.dis(fa[i],x);\n                ans+=Tr.query(rt1[fa[i]],G.val[x]-d)-Tr.query(rt2[i],G.val[x]-d);\n                Tr.insert(rt2[i],d-G.val[x]);\n            }\n            Tr.insert(rt1[i],G.dis(i,x)-G.val[x]);\n        }\n        int p=0;\n        for(int i=x;fa[i];i=fa[i])\n            if(Tr.t[rt1[i]].siz>Tr.t[rt1[fa[i]]].siz*alpha)\n                p=fa[i];\n        if(p) rebuild(p);\n    }\n}T;\nint main()\n{\n    read(n),read(n),T.ma[0]=n;\n    for(int i=1;i<=n;++i)\n    {\n        int fa,v;\n        read(fa),read(v),read(G.val[i]),fa^=ans%mod;\n        G.insert(i,fa,v),T.insert(i,fa),printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1595637325,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P3920)\n## \u9898\u610f\n\u7ed9 $n$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u52a0\u5165\u4e00\u4e2a\u8282\u70b9 $k$\uff0c\u7ed9\u51fa $k$ \u7684\u7236\u4eb2\u3001$k$ \u4e0e\u7236\u4eb2\u4e4b\u95f4\u7684\u8fb9\u6743\u3001$k$ \u7684\u70b9\u6743 $r_k$\uff0c\u64cd\u4f5c\u540e\u6c42\u51fa $|\\{(i,j)|1\\le i<j\\le k\\text{ and }r_i+r_j\\ge\\text{dis}(i,j)\\}|$\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n$n\\le 10^5$\u3002\n## \u601d\u8def\n\u9996\u5148\u601d\u8003\u4e00\u4e2a\u5f31\u5316\u95ee\u9898\uff1a\u7ed9\u4e00\u68f5\u6811\uff0c\u6c42\u51fa\u7b54\u6848\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u601d\u8003\u70b9\u5206\u6cbb\uff0c\u8bbe\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u4e3a $u$\u3002\u5bf9\u4e8e\u5728\u4e0d\u540c\u5b50\u6811\u4e2d\u7684 $i$ \u548c $j$\uff0c$\\text{dis}(i,j)=\\text{dis}(i,u)+\\text{dis}(j,u)$\uff0c\u5219\u7b54\u6848\u8f6c\u4e3a\u7edf\u8ba1 $r_i+r_j\\ge \\text{dis}(i,u)+\\text{dis}(u,j)$ \u7684\u5bf9\u6570\u3002\n\n\u6211\u4eec\u5c06\u5f0f\u5b50\u79fb\u9879\u5f97\u5230 $r_i-\\text{dis}(i,u)\\ge\\text{dis}(u,j)-r_j$\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\u548c\u6c42\u6392\u540d\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u4e5f\u53ef\u4ee5\u79bb\u6563\u5316\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u3001\u6743\u503c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 $u$ \u6240\u6709\u7684 $\\text{dis}(u,j)-r_j$\uff0c\u67e5\u8be2 $r_i-\\text{dis}(i,u)$ \u7684\u6392\u540d\u5373\u53ef\u3002\n\n\u8003\u8651\u5f3a\u5236\u5728\u7ebf\u540e\u600e\u4e48\u505a\uff0c\u663e\u7136\u6211\u4eec\u6709\u70b9\u5206\u6811\uff0c\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u70b9\u5206\u6cbb\u3002\n\n\u4f46\u662f\u95ee\u9898\u6765\u4e86\uff1a\u6211\u4eec\u52a8\u6001\u52a0\u70b9\uff0c\u600e\u4e48\u7ef4\u62a4\u70b9\u5206\u6811\u7684\u5f62\u6001\u5462\uff1f\n\n\u8003\u8651\u70b9\u5206\u6811\u7684\u590d\u6742\u5ea6\u662f\u600e\u4e48\u6765\u7684\uff1a\u70b9\u5206\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u662f\u4e0a\u5c42\u5206\u6cbb\u53d6\u7684\u91cd\u5fc3\uff0c\u4fdd\u8bc1\u4e86\u70b9\u5206\u6811\u6811\u9ad8\u4e3a $O(\\log n)$\uff0c\u4f7f\u5f97\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a $O(\\log n)\\times O(ds)$\u3002\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u5411\u76f4\u63a5\u4f7f\u7528\u539f\u6811\u4f5c\u4e3a\u70b9\u5206\u6811\u7684\u65b9\u5411\u601d\u8003\uff0c\u6811\u9ad8 $O(n)$\uff0c\u663e\u7136\u4e0d\u884c\uff0c\u53ea\u80fd\u5f97\u5230 $30\\text{pts}$\u3002\u8003\u8651\u7ef4\u62a4\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u4f7f\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u8bbe\u5b9a\u5e73\u8861\u56e0\u5b50 $\\alpha$\uff0c\u5f53 $siz_i>siz_{f_i}\\times \\alpha$ \u65f6\u66b4\u529b\u91cd\u6784\u8fd9\u9897\u70b9\u5206\u6811\u5b50\u6811\uff0c\u6b64\u5904\u91cd\u6784\u6307\u5bf9\u8fd9\u90e8\u5206\u5b50\u6811\u8fdb\u884c\u70b9\u5206\u6cbb\u5efa\u51fa\u70b9\u5206\u6811\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u6570\u636e\u7ed3\u6784\u7684\u9009\u7528\u63d0\u4e00\u53e5\uff1a\u7531\u4e8e\u5f3a\u5236\u5728\u7ebf\u7684\u7f18\u6545\uff0c\u65e0\u6cd5\u79bb\u6563\u5316\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u4f7f\u7528\u5e73\u8861\u6811\u7684\u8bdd\uff1a\u91cd\u6784\u4e2d\u91cd\u65b0\u63d2\u5165 $O(\\log n)$\uff0c\u6811\u9ad8 $O(\\log n)$\uff0c\u4f1a\u91cd\u6784 $O(\\log n)$ \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^3n)$\uff0c\u518d\u52a0\u4e0a\u5e73\u8861\u6811\u7684\u5927\u5e38\u6570\u53ef\u80fd\u9700\u8981\u5361\u5e38\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u5b9a\u671f\u91cd\u6784\u7684\u6570\u636e\u7ed3\u6784\uff1a\u7531\u4e8e\u53ea\u9700\u8981\u6e05\u7a7a\u3001\u63d2\u5165\u3001\u6c42\u6392\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a `vector` $a$ \u548c $b$\uff0c\u6bcf\u6b21\u66b4\u529b\u5728 $b$ \u4e2d\u63d2\u5165\uff0c\u5f53 $b$ \u7684\u5927\u5c0f\u8d85\u8fc7\u9884\u8ba2\u7684\u9600\u503c $S$ \u65f6\uff0c$O(n)$ \u5c06 $b$ \u5408\u5e76\u8fdb $a$ \u4e2d\uff0c\u67e5\u8be2\u6392\u540d\u76f4\u63a5\u5728\u4e24\u4e2a `vector` \u4e2d `upper_bound` \u5373\u53ef\u3002\n\n\u7b97\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8be2\u95ee $O(n\\log n)\\times O(\\log n)=O(n\\log^2n)$\uff0c\u63d2\u5165 $O(n\\log^2nS+\\dfrac{n^2\\log^2n}{S})$\uff0c$S$ \u53d6 $O(\\sqrt n)$ \u5f97\u590d\u6742\u5ea6 $O(n\\sqrt n\\log^2 n)$\u3002\u770b\u4f3c\u590d\u6742\u5ea6\u53d8\u5dee\u4e86\uff0c\u4f46\u7531\u4e8e `vector` \u81ea\u5e26\u7684\u8d85\u5c0f\u5e38\u6570\uff0c\u53cd\u800c\u8dd1\u5f97\u633a\u5feb\uff0c\u5b8c\u5168\u4e0d\u9700\u8981\u5361\u5e38\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 $\\alpha$ \u53d6 $0.95$ \u8dd1\u5f97\u6700\u5feb\u3002\n\n\u6700\u540e\u8d34\u4e00\u4e0b\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\n}\nconst int N=1e5+10,S=350,INF=1e7+10;\nconst double alpha=0.95; \n//like the Scapegoat_Tree to rebuild\nint head[N],sz[N],cnt,n,r[N];\nbool vis[N];\nstruct Edge{\n\tint to,nxt,val;\n}a[N<<1];\ninline void add(int u,int v){\n\tcnt++;\n\ta[cnt].to=v;\n\ta[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\ninline pair<int,int> findroot(int rt,int f,int pre){\n\tsz[rt]=1;\n\tint mx=0;\n\tpair<int,int> ans=make_pair(INF,0);\n\tfor(int i=head[rt];i;i=a[i].nxt){\n\t\tint t=a[i].to;\n\t\tif(vis[t]||t==f) continue;\n\t\tans=min(ans,findroot(t,rt,pre));\n\t\tsz[rt]+=sz[t];\n\t\tmx=max(mx,sz[t]);\n\t}\n\tans=min(ans,make_pair(max(mx,pre-sz[rt]),rt));\n\treturn ans;\n}\nstruct Dis{\n\tint f[17][N],dep[N],des[N];\n\tinline void insert(int x,int fa,int c){\n\t\tf[0][x]=fa;\n\t\tdep[x]=dep[fa]+1;\n\t\tdes[x]=des[fa]+c;\n\t\tfor(int i=1;i<=16;i++){\n\t\t\tf[i][x]=f[i-1][f[i-1][x]];\n\t\t}\n\t}\n\tinline int LCA(int x,int y){\n\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\tfor(int i=16;~i;i--){\n\t\t\tif(dep[f[i][x]]>=dep[y]){\n\t\t\t\tx=f[i][x];\n\t\t\t}\n\t\t}\n\t\tif(x==y) return x;\n\t\tfor(int i=16;~i;i--){\n\t\t\tif(f[i][x]!=f[i][y]){\n\t\t\t\tx=f[i][x],y=f[i][y];\n\t\t\t}\n\t\t}\n\t\treturn f[0][x];\n\t}\n\tinline int dis(int x,int y){\n\t\treturn des[x]+des[y]-2*des[LCA(x,y)];\n\t}\n}bz;\nstruct Data_Structer{\n\tvector<int>a,b;\n\tinline void insert(int x){\n\t\tb.insert(lower_bound(b.begin(),b.end(),x),x);\n\t\tif(b.size()>=S){\n\t\t\tvector<int>c,d;\n\t\t\t//use 3 not 1 or UB in O2\n\t\t\tint i=0,j=0;\n\t\t\tfor(;i<a.size()&&j<b.size();){\n\t\t\t\tif(a[i]<b[j]){\n\t\t\t\t\tc.push_back(a[i++]);\n\t\t\t\t}else{\n\t\t\t\t\tc.push_back(b[j++]);\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(i<a.size()){\n\t\t\t\tc.push_back(a[i++]);\n\t\t\t}\n\t\t\twhile(j<b.size()){\n\t\t\t\tc.push_back(b[j++]);\n\t\t\t}\n\t\t\tswap(a,c);\n\t\t\tswap(b,d);\n\t\t}\n\t}\n\tinline int rank(int x){\n\t\treturn (upper_bound(a.begin(),a.end(),x)-a.begin())+(upper_bound(b.begin(),b.end(),x)-b.begin())-2;\n\t}\n\tinline void clear(){\n\t\ta.clear(),b.clear();\n\t}\n}pa[N<<1],pb[N<<1];\n//smile\n//pa:when i is root pb:subtree f_i->i\nstruct Point_Divide_Tree{\n\tint f[N],dep[N],siz[N];\n\t//point x value v in subtree Rt\n\t//insert -r into DS count dis(j,u)-r_j\u2264r_i-dis(i,u)\n\tinline int query(int x,int r){\n\t\tint ans=0;\n\t\tfor(int i=x,j;f[i];i=j){\n\t\t\tj=f[i];\n\t\t\tint dis=r-bz.dis(x,j);\n\t\t\tans+=pa[j].rank(dis)-pb[i].rank(dis);\n\t\t}\n\t\treturn ans;\n\t}\n\tinline void insert(int x,int v,int Rt){\n\t\tpa[x].insert(-v);\n\t\tfor(int i=x,j;i!=Rt;i=j){\n\t\t\tj=f[i];\n\t\t\tint dis=bz.dis(x,j)-v;\n\t\t\tif(j!=Rt) pa[j].insert(dis);\n\t\t\tpb[i].insert(dis);\n\t\t}\n\t}\n\t//clear \"vis\" thats dep[i]>deps(rebuild Rt)\n\tinline void clear(int x,int fa,int deps){\n\t\tvis[x]=0;\n\t\tfor(int i=head[x];i;i=a[i].nxt){\n\t\t\tint t=a[i].to;\n\t\t\tif(t!=fa&&dep[t]>deps){\n\t\t\t\tclear(t,x,deps);\n\t\t\t}\n\t\t}\n\t}\n\t//build subtree Rt\n\tinline int build(int x,int pre,int fa,int Rt){\n\t\tint rt=findroot(x,0,pre).second,bas=sz[x];\n\t\tpa[rt].clear();\n\t\tpb[rt].clear();\n\t\tf[rt]=fa;\n\t\tsiz[rt]=1;\n\t\tvis[rt]=1;\n\t\tdep[rt]=dep[fa]+1;\n\t\tinsert(rt,r[rt],Rt);\n\t\tfor(int i=head[rt];i;i=a[i].nxt){\n\t\t\tint t=a[i].to;\n\t\t\tif(!vis[t]){\n\t\t\t\tsiz[rt]+=build(t,bas,rt,Rt);\n\t\t\t}\n\t\t}\n\t\treturn siz[rt];\n\t}\n\t//rebuild subtree x\n\tinline void rebuild(int x){\n\t\tif(!x) return ;\n\t\tclear(x,0,dep[x]);\n\t\tbuild(x,siz[x],f[x],f[x]);\n\t}\n\tinline void insert(int x,int v){\n\t\tpa[x].insert(-v);\n\t\tsiz[x]++;\n\t\tint Rt=0;\n\t\tfor(int i=x,j;f[i];i=j){\n\t\t\tj=f[i];\n\t\t\tint dis=bz.dis(x,j)-v;\n\t\t\tsiz[j]++;\n\t\t\tpa[j].insert(dis);\n\t\t\tpb[i].insert(dis);\n\t\t\tif(siz[i]>siz[j]*alpha){\n\t\t\t\tRt=j;\n\t\t\t}\n\t\t}\n\t\trebuild(Rt);\n\t}\n}t;\nint main(){\n\tll last=0;\n\tread();\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tvis[i]=1;\n\t\tint fa=read()^last%1000000000,c=read();\n\t\tr[i]=read();\n\t\tbz.insert(i,fa,c);\n\t\tif(i>1){\n\t\t\tadd(fa,i);\n\t\t\tadd(i,fa);\n\t\t}\n\t\tt.f[i]=fa;\n\t\tt.dep[i]=t.dep[fa]+1;\n\t\twrite(last+=t.query(i,r[i]));\n\t\tt.insert(i,r[i]);\n\t\tputc('\\n');\n\t}\n\tflush();\n}\n/*\nTime:52.31s\nMemory:162.77MB\n*/\n```\n\u518d\u89c1 qwq~",
        "postTime": 1623408571,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3920\u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "### [\u6211\u7684\u535a\u5ba2\u94fe\u63a5](https://www.cnblogs.com/GK0328/p/13857804.html)\n\n### \u52a8\u6001\u70b9\u5206\u6cbb\n\n\u9898\u76ee\u7ed9\u51fa\u7684\u6761\u4ef6\u662f\uff1a\n\n$$\ndist(i,j) \\le r_i+r_j\n$$\n\n\u8f6c\u6362\u53ef\u5f97\uff1a\n\n$$\ndist(i,j)-r_j \\le r_i\n$$\n\n\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u7528**\u52a8\u6001\u70b9\u5206\u6cbb**\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\n\u6dfb\u52a0\u65b0\u8282\u70b9$x$\uff0c\u66f4\u65b0\u7b54\u6848\u65f6\u8fd8\u662f**\u52a8\u6001\u70b9\u5206\u6cbb**\u7684\u5957\u8def\uff0c\u7531\u4e8e\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1\u65b0\u52a0\u5165\u8282\u70b9\u7684\u7b54\u6848\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u8def\u8df3\u70b9\u5206\u6811\uff0c\u5229\u7528\u5bb9\u65a5\uff0c\u8bbe\u5f53\u524d\u8df3\u5230\u70b9\u4e3a$t$\uff0c\u8def\u5f84\u957f\u5ea6\u4e3a$d$\uff0c\u8fd9\u91cc\u5229\u7528\u4e86\u5e73\u8861\u6811\uff08**\u66ff\u7f6a\u7f8a\u6811**\uff0c\u672c\u9898\u53ea\u6709\u63d2\u5165\u64cd\u4f5c\uff0c**\u66ff\u7f6a\u7f8a\u6811**\u5de8\u597d\u5199\uff0c\u5e38\u6570\u8fd8\u5c0f\uff09\u3002\n\n\u90a3\u4e48\u6ee1\u8db3\u9898\u610f\u7684\u70b9$y$\u9700\u6ee1\u8db3\u7684\u6761\u4ef6\u662f\uff1a\n\n$$\nd+dist(t,y) \\le r_x+r_y\n$$\n\n$$\n\\therefore r_x-d \\ge dist(t,y)-r_y\n$$\n\n\u67e5\u627e\u5176\u66ff\u7f6a\u7f8a\u6811\u4e0a$\\le r_x-d$\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5bb9\u65a5\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u8ba1\u7b97\u8def\u5f84\u957f\u5ea6$d$\uff0c\u6211\u60f3\u4e0d\u51fa$O(1)$\u6c42\u89e3\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u66b4\u529b\u5199$LCT$\uff08\u597d\u50cf\u500d\u589e\u5c31\u884c\u4e86\uff0c~~\u67d0\u6307\u5bfc\uff1a\u500d\u589e\u5df2\u7ecf\u88ab\u65f6\u4ee3\u9057\u5f03~~\uff09\u3002\n\n\u65b0\u6dfb\u52a0\u8282\u70b9\u53ef\u4ee5\u76f4\u63a5\u8fde\u4e0a\u53bb\u5f53\u6210\u4e00\u4e2a\u5927\u5c0f\u4e3a$1$\u7684\u8fde\u901a\u5757\uff0c\u4e0d\u4f1a\u6539\u53d8\u70b9\u5206\u6811\u7684\u6027\u8d28\u3002\n\n$But,$\u70b9\u5206\u6811\u6df1\u5ea6\u4f1a\u51fa\u95ee\u9898\u3002\n\n\u6211\u4eec\u5229\u7528**\u66ff\u7f6a\u7f8a\u6811**\u7684\u601d\u60f3\uff0c\u5bf9\u4e0d\u5e73\u8861\u8282\u70b9\u66b4\u529b\u91cd\u6784\uff0c\u76f4\u63a5\u628a\u6211\u4eec\u63d2\u5165\u8282\u70b9\u7684\u90a3\u6761\u94fe\u4ece\u9ad8\u5230\u4f4e\u626b\u5230\u7b2c\u4e00\u4e2a\u9700\u8981\u91cd\u6784\u7684\u8282\u70b9\uff08\u4e0d\u7528\u5c31\u4e0d\u91cd\u6784\uff09\u3002\n\n\u5047\u8bbe\u8981\u91cd\u6784$x$\u5b50\u6811\uff0c\u8fd9\u662f\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\uff0c\u6211\u4eec\u5982\u4f55\u5728\u539f\u6811\u4e0a\u627e\u5230\u8fd9\u68f5\u5b50\u6811\u5462\uff1f\n\n\u6211\u60f3\u4e86\u4e00\u4e2a\u5f88\u900a\u7684\u65b9\u6cd5\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6df1\u5ea6$dep$\uff0c\u6bcf\u6b21\u8bbf\u95ee\u5230$dep_y \\le dep_x$\u7684\u8282\u70b9\uff08\u4e0b\u9762\u79f0\u4e3a\u65e0\u6548\u8282\u70b9\uff09\u5c31\u8df3\u8fc7\uff0c\u5176\u4f59\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff08\u4e0b\u9762\u79f0\u4e3a\u6709\u6548\u8282\u70b9\uff09\u5c31\u4e00\u5b9a\u5728\u5b50\u6811\u5185\u3002\n\n\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u63a5\u8282\u70b9\u5f88\u591a\uff0c\u5bfc\u81f4\u904d\u5386\u590d\u6742\u5ea6\u7206\u70b8\u5462\uff1f\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/754kxglk.png)\n\n\u7b54\u6848\u662f\u4e0d\u4f1a\u3002\n\n\u8bbe\u70b9\u5206\u6811\u4e0a$x$\u8282\u70b9\u8bb0\u5f55\u7684\u539f\u6811\u8fde\u901a\u5757\u4e3a$T_x$\n\n\u6211\u4eec\u8003\u8651\u70b9\u5206\u6811\u7684\u6027\u8d28\uff0c\u5047\u5982$x$\u4e0e$T_{y}$\u4e2d\u4e00\u70b9\u6709\u8fb9\uff0c\u5fc5\u6709$x \\in T_{y}$\u548c$T_{y}  \\subset T_{x}$\u5176\u4e2d\u4e00\u4e2a\u6210\u7acb\u3002\n\n\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u6761\u8fb9$(u,v)$\uff0c$v$\u662f\u65e0\u6548\u8282\u70b9\uff0c$u$\u662f\u6709\u6548\u8282\u70b9\uff0c\u90a3\u4e48$v$\u5fc5\u7136\u4e3a$x$\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7956\u5148\u3002\n\n\u540c\u65f6\uff0c\u4e00\u4e2a\u65e0\u6548\u8282\u70b9\u9876\u591a\u4e0e$T_x$\u4e2d\u4e00\u4e2a\u8282\u70b9\u76f8\u8fde\uff0c\u5426\u5219\u5fc5\u7136\u51fa\u73b0\u4e86\u73af\u3002\n\n\u7531\u4e8e\u70b9\u5206\u6811\u6811\u9ad8\u4e3a$\\log$\u7ea7\u522b\uff0c\u6211\u4eec\u6700\u591a\u8bbf\u95ee\u5230$\\log$\u7ea7\u522b\u7684\u65e0\u6548\u8282\u70b9\uff0c\u800c\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u70b9\u6700\u591a\u91cd\u6784\u4e00\u6b21\uff0c\u90a3\u4e48\u8bbf\u95ee\u65e0\u6548\u8282\u70b9\u5728\u6574\u9053\u9898\u4e2d\u6d88\u8017\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650\u4e3a$O(n \\log n)$\u3002\n\n\u6ce8\u610f\uff0c\u8fd9\u91cc\u8ba1\u7b97\u65f6\u4e0d\u8981\u4f7f\u7528$LCT$\u6c42\u8ddd\u79bb\uff0c\u8981\u5efa$ST$\u8868\uff0c\u56e0\u4e3a$LCT$\u4e0a\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\log n)$\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6709\u5927\u5c0f\u4e3a$4$\u7684\u6811\u9700\u8981\u91cd\u6784\uff0c$LCT$\u4e00\u6b21\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\log n)$\uff0c\u663e\u7136\u7528$ST$\u8868\u5c31\u53ef\u4ee5$O(4 \\log 4)$\u9884\u5904\u7406\uff0c$O(1)$\u67e5\u8be2\u3002\n\n\u540c\u65f6\uff0c\u91cd\u6784\u65f6\uff0c\u5bf9\u4e8e$x$\u7684\u7236\u8282\u70b9$f_x$\uff0c$x$\u5bf9\u5b83\u7684\u5bb9\u65a5\u8d21\u732e\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u3002\n\n$Code:$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define N 100005\n#define M 8000005\n#define S 1000000000\n#define INF 1000000007\n#define il inline\n#define rint register int\n#define D double\n#define ll long long\n#define lc(x) lct[x].ch[0]\n#define rc(x) lct[x].ch[1]\n#define sr(x) lct[x].sz\n#define fa(x) lct[x].ft\n#define rev(x) lct[x].tag\n#define ls(x) a[x].ch[0]\n#define rs(x) a[x].ch[1]\n#define val(x) a[x].value\n#define cnt(x) a[x].cct\n#define s(x) a[x].siz\nusing namespace std;\nconst D alpha=0.7;\nint ty,n,ai,ci,ri;\nint w[N],q[N],lcq[N << 1],cq[N];\nint tot,f[N],dep[N],fr[N],nxt[N << 1],d1[N << 1],d2[N << 1];\nint lsz,rrf,rtsz,rt,tsz[N],sz[N];\nint dfnt,cdp[N],bg[N],lg2[N << 1],st[N << 1][22];\nint pool[M+25],ct;\nbool vis[N];\nll ans=0;\nstruct Link_Cut_Tree\n{\n    int ch[2],sz,ft;\n    bool tag;\n}lct[N << 1];\nint lctct,vd[N << 1];\nil void connect(int x,int y,int son)\n{\n    fa(x)=y;\n    lct[y].ch[son]=x;\n}\nil int id(int x)\n{\n    return lc(fa(x))==x?0:1;\n}\nil bool isrt(int x)\n{\n    return lc(fa(x))!=x && rc(fa(x))!=x;\n}\nil void update(int x)\n{\n    sr(x)=sr(lc(x))+sr(rc(x))+vd[x];\n}\nil void rot(int x)\n{\n    int y=fa(x),r=fa(y);\n    int yson=id(x),rson=id(y);\n    if (isrt(y))\n        fa(x)=r; else\n        connect(x,r,rson);\n    connect(lct[x].ch[yson^1],y,yson);\n    connect(y,x,yson^1);\n    update(y),update(x);\n}\nil void push_rev(int x)\n{\n    if (!x)\n        return;\n    swap(lc(x),rc(x));\n    rev(x)^=1;\n}\nil void push_down(int x)\n{\n    if (rev(x))\n    {\n        push_rev(lc(x));\n        push_rev(rc(x));\n        rev(x)=false;\n    }\n}\nil void splay(int x)\n{\n    int g=x,k=0;\n    lcq[++k]=g;\n    while (!isrt(g))\n        g=fa(g),lcq[++k]=g;\n    while (k)\n        push_down(lcq[k--]);\n    while (!isrt(x))\n    {\n        int y=fa(x);\n        if (isrt(y))\n            rot(x); else\n        if (id(x)==id(y))\n            rot(y),rot(x); else\n            rot(x),rot(x);\n    }\n}\nil void access(int x)\n{\n    for (rint y=0;x;y=x,x=fa(x))\n    {\n        splay(x);\n        rc(x)=y;\n        update(x);\n    }\n}\nil void makeroot(int x)\n{\n    access(x);\n    splay(x);\n    push_rev(x);\n}\nil void split(int x,int y)\n{\n    makeroot(x);\n    access(y);\n    splay(y);\n}\nil void link(int x,int y)\n{\n    makeroot(x);\n    fa(x)=y;\n}\nil void link_v(int x,int y,int z)\n{\n    ++lctct;\n    vd[lctct]=z;\n    link(x,lctct),link(y,lctct);\n}\nil int dis(int x,int y)\n{\n    split(x,y);\n    return sr(y);\n}\nstruct node\n{\n    int ch[2],value,cct,siz;\n}a[M+25];\nint rp,rq,rg,tr1[N],tr2[N];\nil void add_pool()\n{\n    for (rint i=1;i<=M;++i)\n        pool[i]=M-i+1;\n    ct=M;\n}\nil int newnode(int x)\n{\n    int z=pool[ct--];\n    ls(z)=rs(z)=0,val(z)=x,s(z)=cnt(z)=1;\n    return z;\n}\nil int build(int l,int r)\n{\n    if (l>r)\n        return 0;\n    if (l==r)\n    {\n        s(cq[l])=cnt(cq[l]),ls(cq[l])=rs(cq[l])=0;\n        return cq[l];\n    }\n    int mid=(l+r) >> 1;\n    ls(cq[mid])=build(l,mid-1);\n    rs(cq[mid])=build(mid+1,r);\n    s(cq[mid])=s(ls(cq[mid]))+s(rs(cq[mid]))+cnt(cq[mid]);\n    return cq[mid];\n}\nil void dfs(int x)\n{\n    if (!x)\n        return;\n    dfs(ls(x));\n    cq[++cq[0]]=x;\n    dfs(rs(x));\n}\nil int reb(int x)\n{\n    cq[0]=0;\n    dfs(x);\n    int tt=build(1,cq[0]);\n    return tt;\n}\nil bool bad(int x,int y)\n{\n    return alpha*s(x)<=s(y);\n}\nil void insr(int &x,int y)\n{\n    if (!x)\n    {\n        x=newnode(y);\n        return;\n    }\n    s(x)++;\n    if (val(x)==y)\n    {\n        cnt(x)++;\n        return;\n    }\n    int nxt=(val(x)>y)?0:1;\n    insr(a[x].ch[nxt],y);\n    if (bad(x,a[x].ch[nxt]))\n        rp=x,rq=rg=0; else\n    if (rp && !rq)\n        rq=x,rg=nxt;\n}\nil void ins(int &x,int y)\n{\n    rp=rq=rg=0;\n    insr(x,y);\n    if (rp)\n    {\n        if (rq)\n            a[rq].ch[rg]=reb(rp); else\n            x=reb(rp);\n    }\n}\nil int calc(int x,int y)\n{\n    int ans=0;\n    while (x)\n    {\n        if (val(x)==y)\n        {\n            ans+=s(ls(x))+cnt(x);\n            break;\n        }\n        if (val(x)<y)\n            ans+=s(ls(x))+cnt(x),x=rs(x); else\n            x=ls(x);\n    }\n    return ans;\n}\nil int read()\n{\n    int s=0;\n    char c=getchar();\n    while (c<'0' || c>'9')\n        c=getchar();\n    while ('0'<=c && c<='9')\n        s=(s << 3)+(s << 1)+(c^48),c=getchar();\n    return s;\n}\nil void write(ll x)\n{\n    if (x>9)\n        write(x/10);\n    putchar(x%10+48);\n}\nil void add(int x,int y,int z)\n{\n    ++tot;\n    d1[tot]=y,d2[tot]=z;\n    nxt[tot]=fr[x];\n    fr[x]=tot;\n}\nil void clear_sgt(int u)\n{\n    if (!u)\n        return;\n    pool[++ct]=u;\n    clear_sgt(ls(u)),clear_sgt(rs(u));\n}\nil void clear_vis_sgt_getst(int u,int F,int mxd)\n{\n    clear_sgt(tr1[u]),tr1[u]=0;\n    if (f[u]!=rrf)\n        clear_sgt(tr2[u]),tr2[u]=0;\n    vis[u]=false;\n    st[++dfnt][0]=u;\n    bg[u]=dfnt;\n    for (rint i=fr[u];i;i=nxt[i])\n    {\n        int v=d1[i];\n        if (dep[v]<=mxd || v==F)\n            continue;\n        cdp[v]=cdp[u]+d2[i];\n        clear_vis_sgt_getst(v,u,mxd);\n        st[++dfnt][0]=u;\n    }\n}\nil int lca(int x,int y)\n{\n    x=bg[x],y=bg[y];\n    if (x>y)\n        swap(x,y);\n    int k=lg2[y-x+1];\n    return (cdp[st[x][k]]<cdp[st[y-(1 << k)+1][k]])?st[x][k]:st[y-(1 << k)+1][k];\n}\nil int st_dis(int x,int y)\n{\n    return cdp[x]+cdp[y]-(cdp[lca(x,y)] << 1);\n}\nil void findrt(int u,int F,int rn)\n{\n    int mx=-1;\n    sz[u]=1;\n    for (rint i=fr[u];i;i=nxt[i])\n    {\n        int v=d1[i];\n        if (v==F || vis[v])\n            continue;\n        findrt(v,u,rn);\n        sz[u]+=sz[v];\n        if (sz[v]>mx)\n            mx=sz[v];\n    }\n    mx=max(mx,rn-sz[u]);\n    if (mx<rtsz)\n        rtsz=mx,rt=u;\n}\nil void getrt(int u,int rn)\n{\n    rtsz=INF;\n    findrt(u,0,rn);\n}\nil void update_dis(int u,int F,int rt)\n{\n    ins(tr1[rt],st_dis(rt,u)-w[u]);\n    if (f[rt] && f[rt]!=rrf)\n        ins(tr2[rt],st_dis(f[rt],u)-w[u]);\n    for (int i=fr[u];i;i=nxt[i])\n    {\n        int v=d1[i];\n        if (v==F || vis[v])\n            continue;\n        update_dis(v,u,rt);\n    }\n}\nil void solve(int u)\n{\n    int csz=lsz;\n    vis[u]=true,tsz[u]=1;\n    update_dis(u,0,u);\n    for (rint i=fr[u];i;i=nxt[i])\n    {\n        int v=d1[i];\n        if (vis[v])\n            continue;\n        lsz=(sz[v]<sz[u])?sz[v]:csz-sz[u];\n        getrt(v,lsz);\n        f[rt]=u,dep[rt]=dep[u]+1;\n        int qt=rt;\n        solve(rt);\n        tsz[u]+=tsz[qt];\n    }\n}\nil void rebuild(int x)\n{\n    rrf=f[x];\n    lsz=tsz[x];\n    dfnt=0,cdp[x]=0;\n    clear_vis_sgt_getst(x,0,dep[x]);\n    for (rint j=1;j<=lg2[dfnt];++j)\n        for (rint i=1;i<=dfnt-(1 << j)+1;++i)\n            st[i][j]=(cdp[st[i][j-1]]<cdp[st[i+(1 << j-1)][j-1]])?st[i][j-1]:st[i+(1 << j-1)][j-1];\n    getrt(x,lsz);\n    f[rt]=rrf,dep[rt]=dep[x],tr2[rt]=tr2[x],tr2[x]=0;\n    solve(rt);\n}\nil void isr(int x,int y)\n{\n    vis[x]=true;\n    f[x]=y,dep[x]=dep[y]+1;\n    int t=y;\n    q[0]=0;\n    while (t)\n        q[++q[0]]=t,tsz[t]++,t=f[t];\n    for (rint i=1;i<=q[0];++i)\n    {\n        int o=dis(q[i],x);\n        ans+=calc(tr1[q[i]],w[x]-o),ins(tr1[q[i]],o-w[x]);\n        if (i!=1)\n            ans-=calc(tr2[q[i-1]],w[x]-o),ins(tr2[q[i-1]],o-w[x]); else\n            ins(tr2[x],o-w[x]);\n    }\n    for (rint i=q[0];i>1;--i)\n        if (alpha*tsz[q[i]]<=tsz[q[i-1]])\n        {\n            rebuild(q[i]);\n            break;\n        }\n}\nint main()\n{\n    ty=read(),n=read();\n    add_pool();\n    lg2[0]=-1;\n    for (rint i=1;i<=(n << 1);++i)\n        lg2[i]=lg2[i >> 1]+1;\n    lctct=n;\n    for (rint i=1;i<=n;++i)\n    {\n        ai=read(),ci=read(),w[i]=read();\n        ai=(ans%S)^ai;\n        ins(tr1[i],-w[i]);\n        tsz[i]=1;\n        if (!ai && !ci)\n        {\n            vis[1]=true;\n            write(ans),putchar('\\n');\n            continue;\n        }\n        link_v(i,ai,ci);\n        add(ai,i,ci),add(i,ai,ci);\n        isr(i,ai);\n        write(ans),putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1603347562,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "\u672c\u4eba\u7b2c2\u9898\u70b9\u5206\u6811\uff0c\u5c31\u641e\u8fd9\u9898\u5927\u6bd2\u7624\uff0c\u5199\u4e86\u5341\u6765\u4e2a\u5c0f\u65f6\u5427\uff0c\u51e0\u4e2asb\u9519\u8bef~~\u6342\u8138~~\n\n\u5176\u5b9e\u70b9\u5206\u6811\u666e\u904d\u7684\u53eb\u6cd5\u662f\u52a8\u6001\u70b9\u5206\u6cbb\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u559c\u6b22\u53eb\u70b9\u5206\u6811\uff0c\u539f\u56e0\u7ed3\u5c3e\u8bf4\n\n\u7ffb\u4e86\u4e00\u904d\u9898\u89e3\uff0c\u6211\u7684\u4ee3\u7801\u91cf\u662f\u6700\u5c0f\u7684\uff0c\u800c\u4e14\u4ee3\u7801\u8fd8\u7b97\u53ef\u8bfb\u3002\uff08\u7eaf\u6570\u7ec4\uff09\n\n\u4eba\u50bb\u5e38\u6570\u5927\uff0c\u4e0d\u4fdd\u8bc1\u4efb\u4f55\u65f6\u5019\u90fd\u8dd1\u7684\u8fc7\u53bb\uff08\u5199\u9898\u89e3\u7684\u5ffd\u7136\u53d1\u73b0\u662f\u591a\u5f00\u4e862\u4e2alonglong......\uff09\n\n~~\u4f60\u8c37\u7684\u8bc4\u6d4b\u6ce2\u52a8\u592a\u6050\u6016\u4e86\uff0c\u6211\u7684#8\u8dd12\u6b21\uff0c\u4e00\u6b2112.01s\uff0c\u4e00\u6b216.8s\uff0c\u5dee\u4e86\u5feb2\u500d\u4e86~~\n\n------\n\n+ \u603b\u601d\u8def\n\n\u8fd9\u9898\u8981\u6c42\u7684\u662f\uff1a\n\n$dis_{u,v}\\le r_u+r_v$\n\n$dis_{u,lca}+dis_{v,lca}\\le r_u+r_v$\n\n$r_u-dis_{u,lca}\\ge dis_{v,lca}-r_v$\n\n\u5982\u679c\u5df2\u7ecf\u5efa\u51fa\u4e86\u5206\u6cbb\u6811\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53ef\u4ee5\u52a0\u4e0a\u5e73\u8861\u6811\u5bb9\u65a5\u51fa\u6765\uff08\u5e73\u8861\u6811\u7ef4\u62a4\u6392\u540d\uff09\n\n\u867d\u7136\u76f4\u63a5\u52a0\u53f6\u5b50\u4e0d\u4f1a\u5bf9\u91cd\u5fc3\u5f71\u54cd\u5f88\u5927\uff0c\u4f46\u662f\u52a0\u591a\u4e86\u5c31\u53ef\u80fd\u88ab\u5361\uff0c\u6240\u4ee5\u8003\u8651\u7c7b\u4f3c\u66ff\u7f6a\u7f8a\u7684\u91cd\u6784\u5206\u6cbb\u6811\n\n------\n\n\u672c\u7bc7\u9898\u89e3\u53d8\u91cf\u58f0\u660e\uff1a\n\n```vt,to``` \u5206\u6cbb\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u7236\u4eb2\u6307\u5411\u7684\u5b50\u8282\u70b9\uff08to\u662f\u4e2avector\uff09\n\n```fa,dep,dist``` \u500d\u589e\u6c422\u70b9\u95f4\u8ddd\u79bb\u7528\uff0cfa\u662f\u500d\u589e\u6570\u7ec4\uff0cdep\u662f\u8282\u70b9\u6df1\u5ea6\uff0cdist\u662f\u8ddd\u79bb\u6839\u7684\u8ddd\u79bb\n\n```val``` \u9898\u76ee\u4e2d\u7684r\uff0c\u611f\u77e5\u80fd\u529b\n\n```mx,siz,root,totsize,used``` \uff0c\u6c42\u5b50\u6811\u91cd\u5fc3\u7528\uff0cmx\u662f\u6700\u5927\u5b50\u6811\u5927\u5c0f\uff0csiz\u662f\u5f53\u524d\u5b50\u6811\u5927\u5c0f\uff0croot\u662f\u91cd\u5fc3\uff0ctotsize\u662f\u8981\u6c42\u91cd\u5fc3\u7684\u5b50\u6811\u7684\u603b\u5927\u5c0f\uff0c\u662f\u5426\u4f7f\u7528\u8fc7\u7684\u6807\u8bb0\n\n```rub,st,rub_top,st_top``` \uff0crub\u662f\u5783\u573e\u7bb1\uff0cst\u662f\u91cd\u6784\u6811\u7684\u65f6\u5019\u5b58\u8282\u70b9\u7f16\u53f7\u7684\n\n```num_node``` \u5e73\u8861\u6811\u603b\u7ed3\u70b9\u6570\n\n```key,sz,ch``` \u5e73\u8861\u6811\u7684\u6743\u503c\uff0c\u5b50\u6811\u5927\u5c0f\uff0c\u5de6\u53f3\u513f\u5b50\n\n```t1,t2``` \u5bb9\u65a5\u7528\u76842\u4e2a\u6839\u8282\u70b9\n\n------\n\n+ \u5e73\u8861\u6811\n\n\u636e\u8bf4\u5361\u5e38\u6570\u5927\u7684\u5e73\u8861\u6811\uff0c\u4e8e\u662f\u4e0d\u6562\u5199\u6211\u6700\u5e38\u5199\u7684fhqtreap\uff0c\u5199\u4e86\u66ff\u7f6a\u7f8a\u3002\u4f46\u662f\u4e4b\u524d\u6ca1\u5199\u8fc7\u66ff\u7f6a\u7f8a\uff0c\u7eaf\u624b\u63a8\u3002\n\n\u8bf4\u8bf4\u624b\u63a8\u7684\u8fc7\u7a0b\u5427\uff1a\n\n\u77e5\u9053\u4e86\u66ff\u7f6a\u7f8a\u662f**BST+\u91cd\u6784**\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u8003\u8651\u5199\u4e2aBST\uff0c\u63d2\u5165\u7ed3\u675f\u4ee5\u540e\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6784\u5373\u53ef\u3002\u91cd\u6784\u7684\u8bdd\u5c31\u904d\u5386\u6574\u9897\u5b50\u6811\uff0c\u628a\u6240\u6709\u7f16\u53f7\u5b58\u8d77\u6765\uff0c**\u6ce8\u610f\u4e2d\u5e8f\u904d\u5386**\uff0c\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\u5c31\u662f\u6709\u5e8f\u7684\uff0c\u5426\u5219\u91cd\u6784\u591a\u4e2a\u6392\u5e8f\uff0c\u591a\u4e2alog\u3002\u8fd8\u9700\u8981\u5783\u573e\u56de\u6536\uff0c\u548c\u91cd\u6784\u7684\u5199\u6cd5\u5dee\u4e0d\u591a\u5427qwq\u3002\u4f46\u662f\u8981\u4e48\u4ece\u5783\u573e\u7bb1\u91cc\u62ff\u51fa\u6765\u7684\u65f6\u5019\u6e05\u96f6\u5143\u7d20\uff0c\u8981\u4e48\u904d\u5386\u5b8c\u7acb\u5373\u6e05\u96f6\u5143\u7d20\uff0c\u4e0d\u7136\u4f1a\u628a\u6574\u9897\u6811\u53d8\u6210\u56fe\u7684\uff08\u5de6\u53f3\u513f\u5b50\u6ca1\u6e05\u96f6\u7684\u540e\u679c\uff09\n\n\u7136\u540e\u662f\u7a7a\u95f4\uff0c\u6211\u7b2c\u4e00\u6b21\u5199\u7684\u65f6\u5019\u60f3\u4e0d\u901a\u7a7a\u95f4\u600e\u4e48\u5f00\uff0c\u8fc7\u4e86\u4e00\u5929\u5ffd\u7136\u4f1a\u4e86\uff1a\u6211\u4eec\u63d2\u8282\u70b9\u7684\u65f6\u5019\u662f\u56e0\u4e3a\u5b83\u6709\u5206\u6cbb\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u800c\u8fd9\u4e2a\u662flog\u7ea7\u522b\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2alog\uff0c\u52a0\u4e2a\u5783\u573e\u56de\u6536\u7a7a\u95f4\u4e25\u683c $n\\log n$ \n\n\u4f46\u662f\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5f002\u9897\uff0c\u5bb9\u65a5\u7528\uff0c\u6240\u4ee5\u7a7a\u95f4\u662f $2\\times 10^5\\times \\log (10^5)$ \uff0c\u5f00\u4e2a4000000\u6bd4\u8f83\u4fdd\u9669\uff08\n\n------\n\n+ \u7edf\u8ba1\u7b54\u6848\n\n\u521d\u5b66\u70b9\u5206\u6811\u6700\u96be\u7406\u89e3\u7684\u5730\u65b9\u5427\uff08\u53cd\u6b63\u6211\u7406\u89e3\u4e86\u597d\u4e45\uff0c\u83dc\u6b7b\u4e86\uff09\n\n\u5bb9\u65a5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9x\u7ef4\u62a42\u9897\u5e73\u8861\u6811$t1[x],t2[x]$\uff0c\u5206\u522b\u7ef4\u62a4\uff08vt\u662fx\u6cbf\u5206\u6cbb\u6811\u5230\u6839\u6240\u6709\u8282\u70b9\uff09 $dis_{vt,x}-val_x$ \u548c $dis_{vt(vt),x}$\n\n**\u6ce8\u610f\u5e73\u8861\u6811\u63d2\u5165\u548c\u67e5\u8be2\u7684\u65f6\u5019\u4f20\u7684\u503c\u9700\u8981\u53cd\u53f7\uff0c\u539f\u56e0\u89c1\u603b\u601d\u8def\u7684\u63a8\u5bfc**\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u53ea\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5728\u8df3\u5230\u4e0a\u4e00\u5c42\u5206\u6cbb\u4e2d\u5fc3\u7684\u65f6\u5019\uff0c\u4ece\u5f53\u524d\u8282\u70b9\u5230\u5206\u6cbb\u4e2d\u5fc3\u7684\u8def\u5f84\u4f1a\u88ab\u591a\u7b97\u4e00\u904d\uff0c\u6240\u4ee5\u8981\u5bb9\u65a5\u6389\u3002\u6240\u4ee5\u518d\u7ef4\u62a4\u4e00\u68f5\u5c31\u597d\u4e86\u3002\n\n------\n\n+ \u91cd\u6784\u70b9\u5206\u6811\n\n  \u628a\u6574\u4e2a\u5b50\u6811\u62cd\u6241\uff0c\u7136\u540e\u627e\u5230\u91cd\u5fc3\uff0c\u5f53\u505a\u6839\uff0c\u6ce8\u610f\u7ef4\u62a4\u7236\u5b50\u5173\u7cfb\uff0c\u5269\u4e0b\u76f4\u63a5\u666e\u901a\u7684\u5efa\u70b9\u5206\u6811\u5373\u53ef\n\n  \u4f46\u662f\u5728\u91cd\u6784\u7684\u65f6\u5019\u8fd8\u8981\u91cd\u6784\u5bf9\u5e94\u8282\u70b9\u7684\u5e73\u8861\u6811\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u63a8\u8fdb\u5783\u573e\u7bb1\uff0c\u7136\u540e\u50cf\u4e0a\u9762\u4e00\u6837\u7ef4\u62a42\u9897\u5e73\u8861\u6811\uff0c\u91cd\u6784\u7ed3\u675f\u3002\n\n------\n\n+ \u63d2\u5165\u8282\u70b9\n\n\u53ef\u4ee5\u76f4\u63a5\u5f80\u67e5\u5230\u70b9\u5206\u6811\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u592a\u591a\u4e0d\u5e73\u8861\u4e86\u76f4\u63a5\u91cd\u5efa\u3002\u6240\u4ee5\u4e00\u5f00\u59cb\u5b8c\u5168\u73c2\u4ee5\u628a\u5b83\u7684\u7236\u4eb2\u5f53\u505a\u4e0a\u4e00\u5c42\u5206\u6cbb\u4e2d\u5fc3\uff0c\u7b49\u4e0d\u5e73\u8861\u4e86\u5c31\u662f\u91cd\u6784\u7684\u4e8b\u4e86\u3002\n\n------\n\n\n+ \u6ce8\u610f\u4e8b\u9879\uff1a\n\n  1. \u7528\u9ad8\u901f\u5e73\u8861\u6811\n\n  2. \u6ce8\u610f\u91cd\u6784\u66ff\u7f6a\u7f8a\u7684\u65f6\u5019\u6e05\u7a7a\u5143\u7d20\uff08\u6211\u8df3\u8fc7\u7684\u5751\uff09\n  3. \u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u8bb0\u5f97\u5f00 ```long long``` \uff0c\u56e0\u4e3a\u6700\u5927\u662f $10^5\\times10^5$\uff0c\u5176\u4f59\u522b\u5f00\uff0c\u4e0d\u7136\u4e0d\u7a33\uff08\u6211\u8df3\u8fc7\u7684\u5751\uff09\n  4. \u5982\u679c\u4e0b\u6570\u636e\u672c\u5730\u8dd1\uff0c\u8bb0\u5f97\u5f00\u5927\u6808\u7a7a\u95f4\uff0c\u4e0d\u7136\u4f1a\u56e0\u4e3a\u91cd\u6784\u65f6dfs\u7684\u592a\u6df1RE\uff08\u6211\u8df3\u8fc7\u7684\u5751\uff09\n\n------\n\n\u4ee3\u7801\uff0c\u8fd8\u662f\u653e\u51fa\u6765\u5427\uff0c\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u5e2e\u4e00\u4e9b\u4eba\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rint register int\ntypedef long long LL;\ninline int rd(){\n   int x=0,f=1;\n   char ch=getchar();\n   while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n   while(isdigit(ch)) x=x*10+(ch^48),ch=getchar();\n   return x*f;\n}\ninline int min(const int &a,const int &b) {return a<b?a:b;}\ninline int max(const int &a,const int &b) {return a>b?a:b;}\nconst int N=100010;\nconst int M=4000010;\nconst int mod=1000000000;\nconst double alpha=0.8;\nconst double beta=0.7;\nint n,val[N];\nLL ans;\nint head[N],num_edge;\nint fa[18][N],bin[18],dep[N],dist[N];\nint mx[N],siz[N],root,vt[N],totsize;\nbool used[N];\nint rub[M],rub_top,st[M],st_top,num_node;\nint sz[M],ch[M][2],key[M];\nint t1[N],t2[N];\nvector<int>to[N];\nstruct egde {\n\tint to,nxt;\n}e[N<<1];\nvoid addedge(int from,int to) {\n\t++num_edge;\n\te[num_edge].nxt=head[from];\n\te[num_edge].to=to;\n\thead[from]=num_edge;\n}\nint lca(int x,int y) {\n\tif(dep[x]<dep[y])x^=y^=x^=y;\n\tint delta=dep[x]-dep[y];\n\tfor(rint i=17;i>=0;--i)if(delta&bin[i])x=fa[i][x];\n\tif(x==y)return x;\n\tfor(rint i=17;i>=0;--i)if(fa[i][x]!=fa[i][y])x=fa[i][x],y=fa[i][y];\n\treturn fa[0][x];\n}\nLL dis(int x,int y) {return dist[x]+dist[y]-(dist[lca(x,y)]<<1);}\nvoid push_in_rub(int u) {\n\tif(!u)return;\n\tpush_in_rub(ch[u][0]);\n\trub[++rub_top]=u;\n\tpush_in_rub(ch[u][1]);\n\tch[u][0]=ch[u][1]=sz[u]=key[u]=0;\n}\nvoid pushup(int u) {\n\tsz[u]=sz[ch[u][0]]+sz[ch[u][1]]+1;\n}\nvoid push_in_st(int u) {\n\tif(!u)return;\n\tpush_in_st(ch[u][0]);\n\tst[++st_top]=u;\n\tpush_in_st(ch[u][1]);\n\tch[u][0]=ch[u][1]=0;\n}\nint getnew() {\n\treturn rub_top?rub[rub_top--]:++num_node;\n}\nvoid build(int &x,int l,int r) {\n\tif(l>r)return;\n\tint mid=(l+r)>>1;\n\tx=st[mid];sz[x]=r-l+1;\n\tbuild(ch[x][0],l,mid-1);\n\tbuild(ch[x][1],mid+1,r);\n}\nvoid rebuild(int &u) {\n\tst_top=0;push_in_st(u);\n\tbuild(u,1,st_top);\n}\nvoid insert(int &u,int val) {\n\tif(!u) {u=getnew(),key[u]=val,sz[u]=1;return;}\n\tif(val<=key[u])insert(ch[u][0],val);\n\telse insert(ch[u][1],val);\n\tpushup(u);\n\tif(sz[ch[u][0]]>1.0*sz[u]*beta)rebuild(u);\n\tif(sz[ch[u][1]]>1.0*sz[u]*beta)rebuild(u);\n}\nint rk(int u,int val) {\n\tint res=0,now=u;\n\twhile(now) {\n\t\tif(key[now]<val)res+=sz[ch[now][0]]+1,now=ch[now][1];\n\t\telse now=ch[now][0];\n\t}\n\treturn res;\n}\nvoid getroot(int u,int ft) {\n\tmx[u]=0,siz[u]=1;\n\tfor(rint i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==ft||used[v])continue;\n\t\tgetroot(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tmx[u]=max(mx[u],siz[v]);\n\t}\n\tmx[u]=max(mx[u],totsize-siz[u]);\n\tif(mx[root]>mx[u])root=u;\n}\nvoid calc(int u,int ft,int Vt) {\n\tinsert(t1[Vt],dis(u,Vt)-val[u]);\n\tif(vt[Vt])insert(t2[Vt],dis(u,vt[Vt])-val[u]);\n\tfor(rint i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==ft||used[v])continue;\n\t\tcalc(v,u,Vt);\n\t}\n}\nvoid dfs_build(int u) {\n\tcalc(u,0,u);used[u]=1;\n\tfor(rint i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(used[v])continue;\n\t\ttotsize=siz[v];\n\t\troot=0;\n\t\tgetroot(v,0);\n\t\tvt[root]=u;\n\t\tto[u].push_back(root);\n\t\tdfs_build(root);\n\t}\n}\nvoid dfs_pia(int u) {\n\t++totsize;used[u]=0;\n\tpush_in_rub(t1[u]);\n\tpush_in_rub(t2[u]);\n\tt1[u]=t2[u]=0;\n\tfor(rint i=0;i<to[u].size();++i)\n\t\tdfs_pia(to[u][i]);\n\tto[u].clear();\n}\nvoid dfs_rebuild(int u) {\n\ttotsize=0;dfs_pia(u);root=0;getroot(u,0);\n\tif(vt[u])\n\t\tfor(rint i=0;i<to[vt[u]].size();++i)\n\t\t\tif(to[vt[u]][i]==u)to[vt[u]][i]=root;\n\tvt[root]=vt[u];dfs_build(root);\n}\nvoid dfs_insert(int x) {\n\tfor(rint i=x;vt[i];i=vt[i]) {\n\t\tint tmp=val[x]-dis(x,vt[i])+1;\n\t\tans+=rk(t1[vt[i]],tmp)-rk(t2[i],tmp);\n\t}\n\tfor(rint i=x;i;i=vt[i]) {\n\t\tinsert(t1[i],dis(i,x)-val[x]);\n\t\tif(vt[i])insert(t2[i],dis(x,vt[i])-val[x]);\n\t}\n\tint res=0;\n\tfor(rint i=x;vt[i];i=vt[i])\n\t\tif(sz[t1[i]]>1.0*sz[t1[vt[i]]]*alpha)res=vt[i];\n\tif(res)dfs_rebuild(res);\n}\nsigned main() {\n\trd(),n=rd();\n\tbin[0]=1;for(rint i=1;i<=17;++i)bin[i]=bin[i-1]<<1;\n\tmx[root=0]=n;\n\tfor(rint i=1;i<=n;++i) {\n\t\tvt[i]=fa[0][i]=(rd()^(ans%mod));\n\t\tint c=rd();val[i]=rd();used[i]=1;\n\t\tdep[i]=dep[fa[0][i]]+1;\n\t\tdist[i]=dist[fa[0][i]]+c;\n\t\tfor(rint j=1;j<=17;++j)fa[j][i]=fa[j-1][fa[j-1][i]];\n\t\tif(vt[i])to[vt[i]].push_back(i),addedge(i,fa[0][i]),addedge(fa[0][i],i);\n\t\tdfs_insert(i);printf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n} \n```\n\n------\n\n\u4e4b\u524d\u8bf4\u6211\u559c\u6b22\u53eb\u70b9\u5206\u6811\uff0c\u56e0\u4e3a\u5982\u679c\u60a8\u548c\u4e00\u4e2a\u521a\u5b66\u4e0d\u4e45\u7684OIer\u8ba8\u8bba\uff0c\u5f88\u53ef\u80fd\u51fa\u73b0\u5982\u4e0b\u5751\u4eba\u7684\u5bf9\u8bdd\n\nA\uff1a\u60a8\u4f1adfs\u5417\uff1f\n\nB\uff1a\u4f1a\u554a\uff0c\u521a\u5b66\n\nA\uff1a\u60a8\u5b66\u4e86\u51e0\u4e2a\u6708\u5c31\u4f1a\u70b9\u5206\u6811\u4e86\uff0c\u540a\u6253\u6211%%%\n\nB\uff1a\uff1f\n\n~~\u5176\u5b9e\u4e00\u70b9\u90fd\u4e0d\u597d\u73a9~~\n\n\u6253\u4ee3\u7801\u53bb\u5427qwq\uff0c\u5e0c\u671b\u6211\u8fd9\u7bc7\u9898\u89e3\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\uff0c\u5e0c\u671b\u5927\u5bb6\u65e9\u70b9AC\u4e86\u8fd9\u9898\uff01\n\n",
        "postTime": 1587090912,
        "uid": 123384,
        "name": "tommy0221",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "\u53d1\u73b0\u9898\u89e3\u533a\u7684\u5927\u4f6c\u4eec\u8bb2\u89e3\u91cd\u6784\u70b9\u5206\u6811\u90e8\u5206\u849f\u84bb\u4e0d\u662f\u5f88\u80fd\u7406\u89e3\uff0c\u5f53\u65f6\u5c31\u662f\u5361\u5728\u4e86\u5982\u4f55\u91cd\u6784\u90e8\u5206\uff0c\u4e8e\u662f\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u9898\u610f\u5927\u6982\u5c31\u662f\u7ed9\u51fa\u4e00\u68f5\u652f\u6301\u63d2\u5165\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u548c\u81ea\u5df1\u7236\u4eb2\u7684\u8ddd\u79bb $w_i$ \u548c\u81ea\u5df1\u7684\u63a2\u7d22\u534a\u5f84 $r_i$\uff0c\u95ee\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u70b9\u4e4b\u540e\u6709\u591a\u5c11\u5bf9\u70b9\u6ee1\u8db3 $r_i+r_j\\geq dis(i,j)$\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e2a\u7b54\u6848\u53d8\u91cf\uff0c\u6bcf\u6b21\u52a0\u5165\u65b0\u70b9\u65f6\u7edf\u8ba1\u8fd9\u4e2a\u65b0\u70b9\u7684\u8d21\u732e\u5c31\u53ef\u4ee5\u4e86\u3002\u7531\u4e8e\u7b54\u6848\u548c\u6811\u7684\u5f62\u6001\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5efa\u9020\u70b9\u5206\u6811\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u6b65\u4e00\u6b65\u6765\uff1a\n\n### \u7edf\u8ba1\u8d21\u732e\n\u6211\u4eec\u8bbe $d_i$ \u8868\u793a i \u70b9\u5230\u70b9\u5206\u6811\u4e0a\u67d0\u4e2a\u7236\u4eb2\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u5f0f\u5b50\u5c31\u53d8\u6210\u4e86 $r_i+r_j\\geq d_i+d_j$ \uff0c\u79fb\u4e2a\u9879\u5c31\u53d8\u6210\u4e86 $r_i-d_i\\geq d_j-r_j$\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u70b9\u5206\u6811\u6bcf\u4e2a\u70b9\u4e0a\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5b50\u6811\u5185\u7684 $d_i-r_i$,\u5982\u679c\u8981\u7d2f\u52a0\u7b54\u6848\u5c31\u5728\u70b9\u5206\u6811\u4e0a\u66b4\u529b\u8df3\u7236\u4eb2\uff0c\u7edf\u8ba1\u6ee1\u8db3 $d_j-r_j\\leq r_i-d_i$ \u7684 j \u7684\u4e2a\u6570\u5373\u53ef\u3002\u7136\u540e\u66f4\u65b0\u7236\u4eb2\u4fe1\u606f\uff0c\u66b4\u529b\u8df3\u7236\u4eb2\u628a\u81ea\u5df1\u7684 $d_i-r_i$ \u63d2\u5230\u7236\u4eb2\u7684\u5e73\u8861\u6811\u91cc\u9762\u3002\n\n\u4e3a\u4e86\u907f\u514d\u4e00\u4e2a\u5b50\u6811\u5185\u5728\u7236\u4eb2\u5904\u7684\u4e92\u76f8\u914d\u5bf9\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u518d\u53e6\u5916\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u7ef4\u62a4\u81ea\u5df1\u5b50\u6811\u5bf9\u7236\u4eb2\u7684\u8d21\u732e\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u518d\u51cf\u53bb\u5373\u53ef\u3002\u4e8e\u662f\u6211\u4eec\u7ef4\u62a4\u4e86\u4e24\u9897\u66ff\u7f6a\u7f8a\u6811\uff0c\u628a\u4e0a\u9762\u90a3\u4e2a\u53eb\u505a 1 \u53f7\uff0c\u8fd9\u4e2a\u53eb\u505a 2 \u53f7\u6811\u3002\n\n\u53e6\u5916\u8003\u8651\u5982\u4f55\u8ba1\u7b97 $d_i$\uff0c\u6211\u4eec\u53d1\u73b0\u500d\u589e\u53ef\u4ee5\u5f88\u597d\u7684\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e8e\u662f\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u5904\u7406\u4e00\u4e0b\u5b83\u7684\u500d\u589e\u6570\u7ec4\u5c31\u884c\u4e86\u3002\n\n### \u91cd\u6784\u70b9\u5206\u6811\n\u6211\u4eec\u5728\u63d2\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u5728\u70b9\u5206\u6811\u4e0a\u4e5f\u662f\u76f4\u63a5\u628a\u5b83\u63d2\u5230\u539f\u6811\u7236\u4eb2\u4e0a\u9762\uff0c\u6240\u4ee5\u8fd9\u6837\u4f1a\u5bfc\u81f4\u70b9\u5206\u6811\u5728\u63d2\u5165\u4e00\u4e9b\u70b9\u4e4b\u540e\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\uff0c\u8bc4\u5224\u6807\u51c6\u662f\u67d0\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u8d85\u8fc7\u4e86\u81ea\u5df1\u7684\u603b\u7684\u5b50\u6811\u7684\u5927\u5c0f\u4e58\u4e0a\u4e00\u4e2a\u503c $\\alpha$\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u9700\u8981\u6211\u4eec\u53bb\u91cd\u6784\u70b9\u5206\u6811\u3002\u91cd\u6784\u70b9\u5206\u6811\u5728\u539f\u6811\u4e0a\u7684\u8868\u73b0\u662f\u91cd\u6784\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4f46\u662f\u5728\u70b9\u5206\u6811\u4e0a\u7684\u8868\u73b0\u5c31\u662f\u91cd\u6784\u4e00\u4e2a\u5b50\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u9762\u7684\u5b50\u6811\u4e0d\u5e73\u8861\u65f6\uff0c\u76f4\u63a5\u904d\u5386\u4e00\u904d\u5b83\u5728\u70b9\u5206\u6811\u4e0a\u9762\u7684\u5b50\u6811\uff0c\u7136\u540e\u91cd\u65b0\u627e\u8fd9\u4e2a\u70b9\u5206\u6811\u4e0a\u7684\u91cd\u5fc3\uff0c\u91cd\u65b0\u8fde\u8fb9\u5efa\u6811\u5373\u53ef\u3002\n\n\u518d\u5177\u4f53\u4e00\u70b9\u5c31\u662f\uff0c\u6211\u4eec\u628a\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\u904d\u5386\u4e00\u8fb9(bfs,dfs \u90fd\u53ef\u4ee5)\uff0c\u7136\u540e\u628a\u5f53\u524d\u70b9\u7684\u5e73\u8861\u6811\u6240\u6709\u8282\u70b9\u6e05\u7a7a\u56de\u6536\uff0c\u91cd\u65b0\u8ba1\u7b97\u4e00\u904d\u5b83\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u7136\u540e\u91cd\u5efa\u7684\u65f6\u5019\u518d\u6b21\u66b4\u529b\u8df3\u7236\u4eb2\uff0c\u628a\u81ea\u5df1\u7684\u6240\u6709\u4fe1\u606f\u91cd\u65b0\u63d2\u5230\u7236\u4eb2\u8282\u70b9\u7684\u5e73\u8861\u6811\u91cc\uff0c\u4f46\u662f\u6ce8\u610f\u8fd9\u91cc\u5c31\u4e0d\u662f\u4e00\u76f4\u8df3\u7236\u4eb2\u8df3\u5230\u5934\u4e86\uff0c\u800c\u662f\u53ea\u8df3\u5230\u88ab\u91cd\u6784\u7684\u6700\u6d45\u7684\u90a3\u4e2a\u7236\u4eb2\u4e3a\u6b62\uff0c\u56e0\u4e3a\u518d\u4e0a\u9762\u7684\u7236\u4eb2\u80af\u5b9a\u5df2\u7ecf\u5305\u542b\u8fc7\u81ea\u5df1\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u5b50\u6811\u91cd\u6784\u4e0d\u4f1a\u6539\u53d8\u5bf9\u8fd9\u4e9b\u7236\u4eb2\u7684\u5f71\u54cd\uff08\u56e0\u4e3a\u53cd\u6b63\u90fd\u662f\u4ece\u88ab\u91cd\u6784\u7684\u8fd9\u4e2a\u5b50\u6811\u8df3\u8fc7\u6765\u7684\uff0c\u600e\u4e48\u8df3\u8fc7\u6765\u65e0\u6240\u8c13\uff09\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u8fb9\u91cd\u5efa\u5b50\u6811\uff0c\u4e00\u8fb9\u628a\u4fe1\u606f\u4f20\u9012\u7ed9\u7236\u4eb2\uff0c\u8ba9\u70b9\u5206\u6811\u91cd\u65b0\u5e73\u8861\u4e0b\u6765\u3002\n\n\u7136\u540e\u8fd9\u91cc\u7684\u5e73\u8861\u6811\u6211\u7528\u7684\u662f\u66ff\u7f6a\u7f8a\u6811\uff0c\u7531\u4e8e\u91cd\u6784\u70b9\u5206\u6811\u4ee3\u4ef7\u6bd4\u8f83\u5927\uff0c\u53ef\u4ee5\u628a\u66ff\u7f6a\u7f8a\u6811\u548c\u70b9\u5206\u6811\u7684 $\\alpha$ \u90fd\u8bbe\u6210 0.8\u3002\n\n\u6709\u9053\u91cd\u6784\u70b9\u5206\u6811\u7684\u9898\u53ef\u4ee5\u7ec3\u7ec3\u624b\uff1a [link](https://www.luogu.com.cn/problem/P6541)\n\n### \u4e00\u4e9b\u5c0f\u7ec6\u8282\n1. \u6211\u4eec\u53d1\u73b0\u91cd\u6784\u70b9\u5206\u6811\u548c\u66ff\u7f6a\u7f8a\u6811\u65f6\u5982\u679c\u81ea\u5df1\u5b50\u6811\u4e0d\u5e73\u8861\uff0c\u81ea\u5df1\u7684\u7236\u4eb2\u5b50\u6811\u4e5f\u4e0d\u5e73\u8861\u65f6\u76f4\u63a5\u91cd\u6784\u81ea\u5df1\u7236\u4eb2\u7684\u5b50\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u91cd\u6784\u81ea\u5df1\u5b50\u6811\uff0c\u81ea\u5df1\u7684\u7236\u4eb2\u8fd8\u662f\u4f1a\u4e0d\u5e73\u8861\uff0c\u6240\u4ee5\u8fd8\u4e0d\u5982\u76f4\u63a5\u91cd\u6784\u7236\u4eb2\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u8ba9\u81ea\u5df1\u5e73\u8861\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u6bcf\u6b21\u5982\u679c\u8981\u91cd\u6784\u5c31\u627e\u5230\u6700\u4e0a\u9762\u7684\u4e0d\u5e73\u8861\u7684\u7236\u4eb2\u91cd\u6784\u5373\u53ef\u3002\n2. \u91cd\u6784\u70b9\u5206\u6811\u65f6\uff0c\u6e05\u7a7a\u66ff\u7f6a\u7f8a\u6811\u7684\u8282\u70b9\u540e\u53ef\u4ee5\u56de\u6536\u5230\u5185\u5b58\u6c60\u4e2d\uff0c\u91cd\u590d\u5229\u7528\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u7206\u70b8\u3002\n3. \u7531\u4e8e 1 \u53f7\u8282\u70b9\u5904\u7406\u7b54\u6848\u65f6\u6709\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u95ee\u9898\u6240\u4ee5\u53ef\u4ee5\u62ff\u51fa\u6765\u5355\u72ec\u5224\u65ad\u5904\u7406\u3002\n4. \u8fb9\u6743\u5f88\u5927\u6240\u4ee5\u8981\u5f00 long long\u3002\n5. \u5728\u6e05\u7a7a\u5b50\u6811\u65f6\u4e00\u5b9a\u8981\u5224\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u4e0d\u662f 0 \u518d\u6254\u5230\u5185\u5b58\u6c60\u91cc\u9762\uff0c\u5426\u5219\u4f1a\u628a 0 \u6254\u8fdb\u53bb\uff0c\u7136\u540e\u4e00\u4e2a\u8282\u70b9 pushup \u7684\u65f6\u5019\u5c31\u4f1a\u628a0\u7684\u4fe1\u606f\u7edf\u8ba1\u8fdb\u53bb\uff0c\u7136\u540e\u5c31\u4f1a\u70b8\u88c2\uff0c~~\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684~~\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\u653e\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstring>\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nnamespace EMT{\n\ttypedef long long ll;typedef double db;\n\t#define pf printf\n\t#define F(i,a,b) for(int i=a;i<=b;i++)\n\t#define D(i,a,b) for(int i=a;i>=b;i--)\n\tinline ll read(){ll x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();return x*f;}\n\tinline void file(){freopen(\"in.in\",\"r\",stdin);freopen(\"my.out\",\"w\",stdout);}\n\tinline int max(int a,int b){return a>b?a:b;}inline int min(int a,int b){return a<b?a:b;}\n\tinline void pi(ll x){pf(\"%lld \",x);}inline void pn(){pf(\"\\n\");}\n\tconst int N=1e5+10,mod=1e9;const db alp=0.8;\n\tint head[N],co,n,r[N];struct node{int next,to,w;}e[N<<1];\n\tll ans;\n\tnamespace times{\n\t\tint f[N][20],log[N],deep[N];ll pre[N];\n\t\tinline void init(){\n\t\t\tlog[0]=-1;\n\t\t\tF(i,1,n)log[i]=log[i>>1]+1;\n\t\t}\n\t\tinline void add(int next,int to,int w){\n\t\t\te[++co]={head[next],to,w},head[next]=co;\n\t\t\te[++co]={head[to],next,w},head[to]=co;\n\t\t\tint x=next,y=to;f[y][0]=x,deep[y]=deep[x]+1;pre[y]=pre[x]+w;\n\t\t\tF(i,1,log[deep[y]])f[y][i]=f[f[y][i-1]][i-1];\n\t\t}\n\t\tinline int getlca(int a,int b){\n\t\t\tif(deep[a]<deep[b])a^=b^=a^=b;\n\t\t\tD(i,log[deep[a]-deep[b]],0)if((1<<i)<=deep[a]-deep[b])a=f[a][i];\n\t\t\tif(a==b)return a;\n\t\t\tD(i,log[deep[a]],0)if(f[a][i]!=f[b][i])a=f[a][i],b=f[b][i];\n\t\t\treturn f[a][0];\n\t\t}\n\t\tinline ll getdis(int x,int y){return pre[x]+pre[y]-pre[getlca(x,y)]*2;}\n\t}\n\tnamespace sgt{\n\t\tint rt[N],tot,ls[N*60],rs[N*60],s[N*60],top,rec[N];\n\t\tstruct dp{ll val;int psiz,rsiz,cnt;}t[N*60];\n\t\tinline int New(){if(top)return s[top--];return ++tot;}\n\t\tinline void pia(int p){\n\t\t\tif(!p)return;\n\t\t\tif(ls[p])pia(ls[p]);\n\t\t\trec[++rec[0]]=p;\n\t\t\tif(rs[p])pia(rs[p]);\n\t\t}\n\t\tinline void clear(int &p){\n\t\t\tif(!p)return;\n\t\t\tif(ls[p])clear(ls[p]);\n\t\t\tif(rs[p])clear(rs[p]);\n\t\t\ts[++top]=p;t[p].cnt=t[p].rsiz=t[p].psiz=0;\n\t\t\tp=0;\n\t\t}\n\t\tinline void up(int p){\n\t\t\tif(!p)return;\n\t\t\tt[p].psiz=t[ls[p]].psiz+t[rs[p]].psiz+1;\n\t\t\tt[p].rsiz=t[ls[p]].rsiz+t[rs[p]].rsiz+t[p].cnt;\n\t\t}\n\t\tinline int rebuild(int l,int r){\n\t\t\tif(l>r)return 0;\n\t\t\tint mid=(l+r)>>1,p=rec[mid];\n\t\t\tls[p]=rebuild(l,mid-1),rs[p]=rebuild(mid+1,r);\n\t\t\tup(p);return p;\n\t\t}\n\t\tinline bool check(int &p){\n\t\t\tif(t[p].psiz*alp<max(t[ls[p]].psiz,t[rs[p]].psiz)){\n\t\t\t\trec[0]=0,pia(p),p=rebuild(1,rec[0]);return 1;\n\t\t\t}return 0;\n\t\t}\n\t\tinline void ins(int &p,ll v){\n\t\t\tif(!p){p=New(),t[p].psiz=t[p].rsiz=t[p].cnt=1,t[p].val=v,ls[p]=rs[p]=0;up(p);return;}\n\t\t\tif(t[p].val==v){t[p].cnt++;up(p);return;}\n\t\t\tif(t[p].val<v)ins(rs[p],v);else ins(ls[p],v);up(p);\n\t\t\treturn;\n\t\t}\n\t\tinline void dfs(int &p,ll v){\n\t\t\tif(!p)return;\n\t\t\tif(check(p))return;\n\t\t\tif(t[p].val==v)return;\n\t\t\tif(t[p].val<v)dfs(rs[p],v);\n\t\t\telse dfs(ls[p],v);\n\t\t}\n\t\tinline int ask(int p,ll v){\n\t\t\tif(!p)return 0;\n\t\t\tif(t[p].val==v)return t[p].cnt+t[ls[p]].rsiz;\n\t\t\tif(t[p].val>v)return ask(ls[p],v);\n\t\t\treturn ask(rs[p],v)+t[p].cnt+t[ls[p]].rsiz;\n\t\t}\n\t\tinline void insert(int &p,ll v){ins(p,v),dfs(p,v);}\n\t}\n\tnamespace sgt2{\n\t\tint rt[N],tot,ls[N*60],rs[N*60],s[N*60],top,rec[N];\n\t\tstruct dp{ll val;int psiz,rsiz,cnt;}t[N*60];\n\t\tinline int New(){if(top)return s[top--];return ++tot;}\n\t\tinline void pia(int p){\n\t\t\tif(!p)return;\n\t\t\tif(ls[p])pia(ls[p]);\n\t\t\trec[++rec[0]]=p;\n\t\t\tif(rs[p])pia(rs[p]);\n\t\t}\n\t\tinline void clear(int &p){\n\t\t\tif(!p)return;\n\t\t\tif(ls[p])clear(ls[p]);\n\t\t\tif(rs[p])clear(rs[p]);\n\t\t\ts[++top]=p;t[p].cnt=t[p].rsiz=t[p].psiz=0;\n\t\t\tp=0;\n\t\t}\n\t\tinline void up(int p){\n\t\t\tif(!p)return;\n\t\t\tt[p].psiz=t[ls[p]].psiz+t[rs[p]].psiz+1;\n\t\t\tt[p].rsiz=t[ls[p]].rsiz+t[rs[p]].rsiz+t[p].cnt;\n\t\t}\n\t\tinline int rebuild(int l,int r){\n\t\t\tif(l>r)return 0;\n\t\t\tint mid=(l+r)>>1,p=rec[mid];\n\t\t\tls[p]=rebuild(l,mid-1),rs[p]=rebuild(mid+1,r);\n\t\t\tup(p);return p;\n\t\t}\n\t\tinline bool check(int &p){\n\t\t\tif(t[p].psiz*alp<max(t[ls[p]].psiz,t[rs[p]].psiz)){\n\t\t\t\trec[0]=0,pia(p),p=rebuild(1,rec[0]);return 1;\n\t\t\t}return 0;\n\t\t}\n\t\tinline void ins(int &p,ll v){\n\t\t\tif(!p){p=New(),t[p].psiz=t[p].rsiz=t[p].cnt=1,t[p].val=v,ls[p]=rs[p]=0;up(p);return;}\n\t\t\tif(t[p].val==v){t[p].cnt++;up(p);return;}\n\t\t\tif(t[p].val<v)ins(rs[p],v);else ins(ls[p],v);up(p);\n\t\t}\n\t\tinline void dfs(int &p,ll v){\n\t\t\tif(!p)return;\n\t\t\tif(check(p))return;\n\t\t\tif(t[p].val==v)return;\n\t\t\tif(t[p].val<v)dfs(rs[p],v);\n\t\t\telse dfs(ls[p],v);\n\t\t}\n\t\tinline int ask(int p,ll v){\n\t\t\tif(!p)return 0;\n\t\t\tif(t[p].val==v)return t[p].cnt+t[ls[p]].rsiz;\n\t\t\tif(t[p].val>v)return ask(ls[p],v);\n\t\t\treturn ask(rs[p],v)+t[p].cnt+t[ls[p]].rsiz;\n\t\t}\n\t\tinline void insert(int &p,ll v){ins(p,v),dfs(p,v);}\n\t}\n\tnamespace tree{\n\t\tint fa[N],siz[N],maxn,mx[N],rt,deep[N];bool vis[N];\n\t\tinline void getans(int x){\n\t\t\tif(times::pre[x]<=r[x]+r[1])ans++;\n\t\t\tfor(int i=fa[x];i;i=fa[i])ans+=sgt::ask(sgt::rt[i],r[x]-times::getdis(x,i));\n\t\t\tfor(int i=fa[x];fa[i];i=fa[i])ans-=sgt2::ask(sgt2::rt[i],r[x]-times::getdis(x,fa[i]));\n\t\t}\n\t\tinline void add(int x){\n\t\t\tfor(int i=x;i;i=fa[i])sgt::insert(sgt::rt[i],times::getdis(x,i)-r[x]),siz[i]++;\n\t\t\tfor(int i=x;fa[i];i=fa[i])sgt2::insert(sgt2::rt[i],times::getdis(x,fa[i])-r[x]);\n\t\t}\n\t\tinline void clear(int k,int f,int lim){\n\t\t\tsiz[k]=mx[k]=fa[k]=deep[k]=vis[k]=0;\n\t\t\tsgt::clear(sgt::rt[k]),sgt2::clear(sgt2::rt[k]);\n\t\t\tfor(int i=head[k],j;i;i=e[i].next)if((j=e[i].to)!=f){\n\t\t\t\tif(deep[j]<lim)continue;\n\t\t\t\tclear(j,k,lim);\n\t\t\t}\n\t\t}\n\t\tinline void findrt(int x,int fa){\n\t\t\tsiz[x]=1,mx[x]=0;\n\t\t\tfor(int i=head[x],j;i;i=e[i].next)if(!vis[j=e[i].to]&&j!=fa){\n\t\t\t\tfindrt(j,x),siz[x]+=siz[j],mx[x]=max(mx[x],siz[j]);\n\t\t\t}mx[x]=max(mx[x],maxn-siz[x]);\n\t\t\tif(mx[x]<mx[rt])rt=x;\n\t\t}\n\t\tinline void dfs(int x,int lim){\n\t\t\tvis[x]=1;\n\t\t\tif(x!=1){\n\t\t\t\tfor(int i=x;i;i=fa[i])if(deep[i]>=lim)\n\t\t\t\tsgt::insert(sgt::rt[i],times::getdis(i,x)-r[x]);else break;\n\t\t\t\tfor(int i=x;fa[i];i=fa[i])if(deep[i]>=lim)\n\t\t\t\tsgt2::insert(sgt2::rt[i],times::getdis(fa[i],x)-r[x]);else break;\n\t\t\t}\n\t\t\tint st=maxn;\n\t\t\tfor(int i=head[x],j;i;i=e[i].next)if(!vis[j=e[i].to]){\n\t\t\t\tmaxn=siz[j]<siz[x]?siz[j]:st-siz[x];\n\t\t\t\tmx[rt=0]=n+1,findrt(j,x);\n\t\t\t\tfa[rt]=x,deep[rt]=deep[x]+1,siz[rt]=siz[j];\n\t\t\t\tdfs(rt,lim);\n\t\t\t}\n\t\t}\n\t\tinline void rebuild(int x){\n\t\t\tmaxn=siz[x],mx[rt=0]=n+1;\n\t\t\tint dep=deep[x],f=fa[x];\n\t\t\tclear(x,0,dep);\n\t\t\tfindrt(x,0);\n\t\t\tfa[rt]=f,deep[rt]=dep,siz[rt]=maxn;\n\t\t\tdfs(rt,dep);\n\t\t}\n\t\tinline void judge(int x){\n\t\t\tint goal=0;\n\t\t\twhile(fa[x]){\n\t\t\t\tif(siz[fa[x]]*alp<=siz[x])goal=fa[x];\n\t\t\t\tx=fa[x];\n\t\t\t}if(goal)rebuild(goal);\n\t\t}\n\t\tinline void upd(int x){\n\t\t\tadd(x),judge(x);\n\t\t}\n\t}\n\tinline short main(){\n\t\tread();n=read();times::init();\n\t\tread(),read();r[1]=read();\n\t\ttree::vis[1]=1,tree::siz[1]=1;pi(0);pn();\n\t\tF(i,2,n){\n\t\t\tint f=read()^(ans%mod),w=read();r[i]=read();\n\t\t\ttimes::add(f,i,w),tree::fa[i]=f;\n\t\t\ttree::deep[i]=tree::deep[f]+1;\n\t\t\ttree::vis[i]=1;\n\t\t\ttree::getans(i),tree::upd(i);\n\t\t\tpi(ans);pn();\n\t\t}\n\t\treturn 0;\n\t}\n}\nsigned main(){return EMT::main();}\n```\n",
        "postTime": 1642296812,
        "uid": 451066,
        "name": "letitdown",
        "ccfLevel": 9,
        "title": "P3920 \u7d2b\u8346\u82b1\u4e4b\u604b"
    },
    {
        "content": "\u597d\u5bb6\u4f19\u70b9\u5f00\u9898\u89e3\u533a\u4e00\u770b\u5168\u6ca1\u6709\u590d\u6742\u5ea6\u5206\u6790\uff0c\u4e00\u7bc7\u5b9a\u671f\u91cd\u6784 $O(n^{1.5}\\log^2 n)$\uff0c\u4e00\u7bc7\u8bf4\u66ff\u7f6a\u7f8a\u6811\u5f0f\u7684\u70b9\u5206\u6811\u590d\u6742\u5ea6\u4e3a $O(n^{1.5} \\log^2 n)$\u3002\n\n~~\u90a3\u6211\u6765\u4e00\u7bc7 $O(n^{1.5} \\log n)$ \u7684\u5427~~\n\n## \u9898\u76ee\u5927\u610f\n\n- \u4fee\u6539\u64cd\u4f5c\uff1a\u5728\u6811\u4e0a\u6302\u4e2a\u65b0\u53f6\u5b50\u3002\n\n- \u67e5\u8be2\u64cd\u4f5c\uff1a$dist(i,j)\\leq r_i + r_j$ \u7684\u70b9\u5bf9\u4e2a\u6570\u3002\n\n- \u5f3a\u5236\u5728\u7ebf\uff0c$n \\leq 10^5$\uff0c12s\u3002\n\n# \u4e00\u3001\u9898\u76ee\u5206\u6790\n\n\u770b\u89c1\u70b9\u5bf9\u7edf\u8ba1\uff0c\u5e76\u4e14\u9650\u5236\u8ddf\u8ddd\u79bb\u6709\u5173\uff0c\u751a\u81f3\u8fd8\u5e26\u4fee\uff0c\u679c\u65ad\u70b9\u5206\u6811\u3002\n\n\u5728\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u786e\u5b9a\u4e00\u4e2a\u6839\uff0c\u8ba1\u7b97\u5206\u6cbb\u8303\u56f4\u5185\u6240\u6709\u7ed3\u70b9\u7684\u6df1\u5ea6 $dep_i$\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u5728\u6839\u7684\u4e0d\u540c\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\uff0c\u8981\u6c42\u6539\u5199\u4e3a\n\n$$ dep_i+dep_j\\leq r_i +r_j $$\n\n\u5982\u679c\u60f3\u77e5\u9053 $i$ \u80fd\u8ddf\u51e0\u4e2a\u7ed3\u70b9\u6ee1\u8db3\u8981\u6c42\uff0c\u76f8\u5f53\u4e8e\u6c42\u6ee1\u8db3\n\n$$ r_i-dep_i \\geq dep_j-r_j $$\n\n\u7684 $j$ \u7684\u4e2a\u6570\uff0c\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u4f46\u662f\u70b9\u5206\u6811\u7684\u7ed3\u6784\u662f\u9759\u6001\u7684\uff0c\u4f46\u662f\u52a0\u53f6\u5b50\u64cd\u4f5c\u5374\u662f\u52a8\u6001\u7684\uff0c\u5982\u679c\u76f4\u63a5\u5728\u70b9\u5206\u6811\u4e0a\u63d2\u5165\u65b0\u7ed3\u70b9\u4f1a\u5bfc\u81f4\u7ed3\u6784\u4e0d\u5e73\u8861\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e00\u6b21\u5efa\u70b9\u5206\u6811\u7684\u590d\u6742\u5ea6\u662f $O(n\\log^2 n)$ \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u501f\u9274\u671d\u9c9c\u6811\u7684\u601d\u60f3\uff0c\u6bcf $S$ \u6b21\u64cd\u4f5c\u91cd\u6784\u4e00\u6b21\u3002\n\n\u5bf9\u4e8e\u4e0b\u6b21\u91cd\u6784\u672a\u5230\u6765\u524d\u52a0\u5165\u7684\u7ed3\u70b9\uff0c\u79f0\u4e3a\u5269\u4f59\u70b9\uff0c\u4e0d\u4f5c\u4e3a\u70b9\u5206\u6811\u7684\u67d0\u4e2a\u5206\u6cbb\u8303\u56f4\u7684\u6839\u7ed3\u70b9\uff0c\u4f46\u63d2\u5165\u5e73\u8861\u6811\u4e2d\uff0c\u5e76\u4e14\u5269\u4f59\u70b9\u95f4\u8fde\u8fb9\u6784\u6210\u5269\u4f59\u6811\u3002\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5269\u4f59\u70b9\uff0c\u6cbf\u7740\u70b9\u5206\u6811\u4e00\u8def\u4ece\u6839\u5f00\u59cb\u5411\u7236\u4eb2\u8d70\uff0c\u5e76\u67e5\u8be2\u5e73\u8861\u6811\uff0c\u6700\u540e\u8d70\u5230\u70b9\u5206\u6811\u4e0a\u7684\u7ed3\u70b9 $r$\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u5269\u4f59\u70b9\uff0c\u4e0e\u65b0\u7ed3\u70b9\u5728\u540c\u4e00 $r$ \u7684\u5b50\u6811\u4e2d\u3002\u76f4\u63a5\u5728\u5269\u4f59\u6811\u4e0a\u66b4\u529b\u8ba1\u7b97\u65b0\u7ed3\u70b9\u4e0e\u4ed6\u4eec\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u8fd9\u6837\u91cd\u6784\u590d\u6742\u5ea6 $O(\\frac{n}{S}n\\log^2 n)$\uff0c\u67e5\u8be2\u590d\u6742\u5ea6 $O(n(\\log^2n +S))$\uff0c\u53d6 $S=\\sqrt n \\log n$ \u5f97\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^{1.5} \\log n)$\uff0c\u7a7a\u95f4 $O(n \\log n)$\u3002\n\n~~\u6240\u4ee5\u66ff\u7f6a\u7f8a\u5f0f\u91cd\u6784\u7684\u590d\u6742\u5ea6\u8981\u600e\u4e48\u5206\u6790\u554a~~\n\n# \u4e8c\u3001\u4ee3\u7801\n\n\u624b\u8d31\u5199\u4e86 fhq\uff0c\u5bfc\u81f4\u6700\u4f18\u89e3\u5012\u4e00\uff01\uff01\uff01\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define Lson(x) node[x].Son[0]\n#define Rson(x) node[x].Son[1]\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN=1e5,LOGN=17;\nconst ll MOD=1e9;\n\ninline int Read()\n{\n\tint ret;char c;\n\twhile(1) {c=getchar();if('0'<=c && c<='9') {ret=c-'0';break;}}\n\twhile(1) {c=getchar();if('0'<=c && c<='9') ret=ret*10+c-'0';else break;}\n\treturn ret;\n}\n\n//---------------------- fhqTreap --------------------------\nstruct fhqTreap\n{\n\tint Son[2],SIZE,data,KEY;\n\t//KEY in [0,RAND_MAX]\n}node[2*MAXN*LOGN+5];int Tail;\n\nint New(int x)\n{\n\tnode[++Tail].data=x;\n\tnode[Tail].SIZE=1;\n\tnode[Tail].KEY=rand();\n\tnode[Tail].Son[0]=node[Tail].Son[1]=0;\n\treturn Tail;\n}\n\nvoid PushUp(int now) {node[now].SIZE=node[Lson(now)].SIZE+1+node[Rson(now)].SIZE;}\n\nvoid Split(int now,int x,int &a,int &b)//\u503c\u57df\u5206\u88c2\n{\n\tif(!now) {a=b=0;return;}\n\tif(node[now].data<=x) a=now,Split(Rson(now),x,Rson(now),b);\n\telse b=now,Split(Lson(now),x,a,Lson(now));\n\tPushUp(now);\n}\n\nint Merge(int a,int b)\n{\n\tif(!a || !b) return a^b;\n\tif(node[a].KEY>node[b].KEY) {Rson(a)=Merge(Rson(a),b),PushUp(a);return a;}\n\tLson(b)=Merge(a,Lson(b)),PushUp(b);return b;\n}\n\nint Ask(int now,int x)\n{\n\tif(!now) return 0;\n\tif(x<node[now].data) return Ask(Lson(now),x);\n\treturn node[Lson(now)].SIZE+1+Ask(Rson(now),x);\n}\n\nvoid Add(int &x,int v)\n{\n\tint a,b;Split(x,v,a,b);\n\tx=Merge(Merge(a,New(v)),b);\n}\n\n//---------------------- daq Tree --------------------------\nstruct DE {int nxt,val;};\n\nint n,S,q,R[MAXN+5];\nvector<DE> Tree[MAXN+5];\nll ans;\nvector<int> ance[MAXN+5],depth[MAXN+5],subt[MAXN+5];\n//\u70b9\u5206\u6811\u4e0a\u7956\u5148\uff0c\u6bcf\u5c42\u7684\u6df1\u5ea6\uff0c\u6bcf\u5c42\u6240\u5728\u5b50\u6811\u7f16\u53f7\nvector<int> subfhq[MAXN+5];//\u6210\u4e3a\u6839\u65f6\u6bcf\u4e2a\u5b50\u6811\u7684 fhq \u6839\nint beRoot,root[MAXN+5];//\u7f16\u53f7\u6700\u5927\u7684\u6210\u4e3a\u70b9\u5206\u6811\u6839\u7684\u7ed3\u70b9\uff0c\u6210\u4e3a\u6839\u65f6 fhq \u7684\u6839\nvector<DE> Left[MAXN+5];//\u5269\u4f59\u7ed3\u70b9\u6784\u6210\u7684\u6811 \n\nbool V[MAXN+5];int Size[MAXN+5];\nvoid CalSize(int now,int lst)\n{\n\tSize[now]=1;\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(rear==lst || V[rear]) continue;\n\t\tCalSize(rear,now),Size[now]+=Size[rear];\n\t}\n}\nint FindCG(int now,int lst,int ALL)\n{\n\tbool OK=1;\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(rear==lst || V[rear]) continue;\n\t\tif(2*Size[rear]>ALL) {OK=0;break;}\n\t}\n\tOK&=(2*Size[now]>=ALL);\n\tif(OK) return now;\n\tfor(int i=0,rear,res;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(rear==lst || V[rear]) continue;\n\t\tres=FindCG(rear,now,ALL);\n\t\tif(res) return res;\n\t}\n\treturn 0;\n}\nvoid BuildMainfhq(int now,int lst,int x,int dep)\n{\n\tance[now].push_back(x);\n\tdepth[now].push_back(dep);\n\tAdd(root[x],dep-R[now]);\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(rear==lst || V[rear]) continue;\n\t\tBuildMainfhq(rear,now,x,dep+Tree[now][i].val);\n\t}\n}\nvoid BuildSubfhq(int now,int lst,int x,int y,int dep)//\u6839\u4e0e\u7b2c\u51e0\u4e2a\u5b50\u6811\n{\n\tsubt[now].push_back(y);\n\tAdd(subfhq[x][y],dep-R[now]);\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(rear==lst || V[rear]) continue;\n\t\tBuildSubfhq(rear,now,x,y,dep+Tree[now][i].val);\n\t}\n}\nvoid daq(int now)//\u5206\u6cbb\u5efa\u6811\n{\n\tCalSize(now,0),now=FindCG(now,0,Size[now]);\n\tBuildMainfhq(now,0,now,0);\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(V[rear]) continue;\n\t\tsubfhq[now].push_back(0);\n\t\tBuildSubfhq(rear,now,now,subfhq[now].size()-1,Tree[now][i].val);\n\t}\n\tV[now]=1;\n\tfor(int i=0,rear;i<Tree[now].size();i++)\n\t{\n\t\trear=Tree[now][i].nxt;\n\t\tif(V[rear]) continue;\n\t\tdaq(rear);\n\t}\n}\n\nvoid Build()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tance[i].clear();\n\t\tdepth[i].clear();\n\t\tsubt[i].clear();\n\t\tsubfhq[i].clear();\n\t\tV[i]=root[i]=0;\n\t}\n\tfor(int i=beRoot+1;i<=n;i++) Left[i].clear();\n\tTail=0,daq(1),beRoot=n;\n}\n\nvoid Link(int a,int c)\n{\n\tif(a>beRoot)\n\t{\n\t\tLeft[a].push_back(DE{n,c});\n\t\tLeft[n].push_back(DE{a,c});\n\t\tfor(int i=0,now,dep;i<ance[a].size();i++)\n\t\t{\n\t\t\tnow=ance[a][i];\n\t\t\tdep=depth[a][i]+c;\n\t\t\t\n\t\t\tance[n].push_back(now);\n\t\t\tdepth[n].push_back(dep);\n\t\t\tsubt[n].push_back(subt[a][i]);\n\t\t\t\n\t\t\tAdd(root[now],dep-R[n]);\n\t\t\tAdd(subfhq[now][subt[n][i]],dep-R[n]);\n\t\t}\n\t}\n\telse\n\t\tfor(int i=0,now,dep;i<ance[a].size();i++)\n\t\t{\n\t\t\tnow=ance[a][i];\n\t\t\tdep=depth[a][i]+c;\n\t\t\t\n\t\t\tance[n].push_back(now);\n\t\t\tdepth[n].push_back(dep);\n\t\t\tif(i==ance[a].size()-1)\n\t\t\t{\n\t\t\t\tsubfhq[a].push_back(0);\n\t\t\t\tsubt[n].push_back(subfhq[a].size()-1);\n\t\t\t}\n\t\t\telse subt[n].push_back(subt[a][i]);\n\t\t\t\n\t\t\tAdd(root[now],dep-R[n]);\n\t\t\tAdd(subfhq[now][subt[n][i]],dep-R[n]);\n\t\t}\n}\n\nint LeftQuery(int now,int lst,int x,int dist)\n{\n\tint res=(dist<=R[x]+R[now] && now!=x);\n\tfor(int i=0,rear;i<Left[now].size();i++)\n\t{\n\t\trear=Left[now][i].nxt;\n\t\tif(rear==lst) continue;\n\t\tres+=LeftQuery(rear,now,x,dist+Left[now][i].val);\n\t}\n\treturn res;\n}\n\nint Query(int x)\n{\n\tint res=0;\n\tfor(int i=0,now;i<ance[x].size();i++)\n\t{\n\t\tnow=ance[x][i];\n\t\tres+=Ask(root[now],R[x]-depth[x][i]);\n\t\tif(x==ance[x][i]) --res;\n\t\telse\n\t\t{\n\t\t\tres-=Ask(subfhq[now][subt[x][i]],R[x]-depth[x][i]);\n\t\t\tif(i==ance[x].size()-1) res+=LeftQuery(x,0,x,0);\n\t\t}\n\t}\n\treturn res;\n}\n\nvoid Insert(int a,int c)//\u63d2\u5165\u7ed3\u70b9 n \n{\n\tif(!a) \n\t{\n\t\tbeRoot=1;\n\t\tance[n].push_back(n),depth[n].push_back(0);\n\t\troot[n]=0,Add(root[n],-R[n]);\n\t\treturn;\n\t}\n\tTree[a].push_back(DE{n,c});\n\tTree[n].push_back(DE{a,c});\n\tif(n%S==0) Build();//n-S+1 ~ n \u6ca1\u6709\u6210\u4e3a\u8fc7\u70b9\u5206\u6811\u7684\u6839\n\telse Link(a,c);\n\tans+=Query(n);\n}\n\nint main()\n{\n\tint T=Read();\n\tq=Read();\n\tS=ceil(sqrt(q)*log(q)/log(2));\n\tint a,c;\n\tfor(n=1;n<=q;n++)\n\t{\n\t\ta=Read(),c=Read(),R[n]=Read();\n\t\ta^=ans%MOD;\n\t\tInsert(a,c);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1655125118,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b \u7684\u9898\u89e3"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3920)\n\n## \u95f2\u8bdd\n\n\u65ad\u65ad\u7eed\u7eed\u5199\u4e86\u5dee\u4e0d\u591a\u4e00\u4e2a\u6708\u4e86\u3002\u3002\u3002\u6628\u5929\u53c8\u82b1\u4e86\u4e00\u6574\u5929\uff0c\u627e\u51fa\u4e86\u4e24\u53ea\u624b\u90fd\u6570\u4e0d\u8fc7\u6765\u7684\u9519\u8bef\uff0c\u5927\u6982\u6211\u5199\u7684\u65f6\u5019\u7761\u7740\u4e86\u5427\u3002\u3002\u6bd5\u7adf\u662f\u81ea\u5df1\u6ca1\u600e\u4e48\u6574\u7406\u597d\u601d\u8def\u5c31\u5f00\u59cb\u60f3\u4e86\uff0c\u4f46\u662f\u8fd9\u9898\u6574\u7406\u597d\u601d\u8def\u5bf9\u6211\u6765\u8bf4\u592a\u96be\u4e86\u4e00\u70b9\u3002\u8c03\u51fa\u6765\u7684\u65f6\u5019\u77ac\u95f4\u611f\u89c9\u4eba\u95f4\u503c\u5f97\u3002\n\n## \u9898\u9762\n\n\u4e00\u68f5\u5e26\u70b9\u6743\u8fb9\u6743\u7684\u6811\uff0c\u6bcf\u6b21\u52a0\u4e00\u4e2a\u70b9\uff0c\u6c42\u6240\u6709\u70b9\u6743\u548c\u5927\u4e8e\u7b49\u4e8e\u8def\u5f84\u8fb9\u6743\u548c\u7684\u70b9\u5bf9\u6570\u3002  \n\u5f3a\u5236\u5728\u7ebf\u3002  \n$n \\leqslant 10^5, r_i\\leqslant 10, e\\leqslant 10^4$  \n\u65f6\u9650\uff1a12s ~~\uff08\u5927\u6982\u662f\u5e38\u6570\u592a\u5927\u4f46\u662f\u8fd8\u662f\u8981\u5361\u66b4\u529b\u7684\uff09~~\n\n## \u9898\u89e3\n\n\u524d\u7f6e\u6280\u80fd\uff1a\u70b9\u5206\u6811\uff0c\u9ad8\u901f\u5e73\u8861\u6811~~\uff0c\u4e00\u884c\u4ee3\u7801\u8c03\u4e00\u5929\u7684\u8010\u6027~~\n\n\u5982\u679c\u53bb\u6389\u5f3a\u5236\u5728\u7ebf\u7684\u8bdd\u8fd9\u9898\u5176\u5b9e\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u666e\u901a\u7684\u70b9\u5206\u6811\u677f\u5b50\u9898\u3002\n\n\u8003\u8651\u52a8\u6001\u52a0\u70b9\uff0c\u663e\u7136\u628a\u8fd9\u4e2a\u70b9\u8fde\u5728\u5176\u7236\u8282\u70b9\u4e0a\u5728\u6b63\u786e\u6027\u662f\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\u95ee\u9898\u5728\u4e8e\uff0c\u70b9\u5206\u6811\u590d\u6742\u5ea6\u4f9d\u8d56\u4e8e\u6811\u7684\u7ed3\u6784\uff0c\u4e00\u4e2a\u6781\u5ea6\u4e0d\u5e73\u8861\u7684\u6811\u7ed3\u6784\u662f\u4f1a\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\uff0c\u5c31\u50cf\u67d0BST\u4e00\u6837\u3002  \n\n\u53ef\u60dc\u7684\u662f\u7531\u4e8e\u590d\u6742\u7684\u6811\u7ed3\u6784\u548c\u590d\u6742\u7684\u4fe1\u606f\u7ef4\u62a4\uff0c\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u65cb\u8f6c\u8c03\u6574\u6811\u9ad8\uff0c\u90a3\u600e\u4e48\u529e\uff1f\u62cd\u6241\u91cd\u6765\uff0c\u8ba9\u5b83\u6ca1\u813e\u6c14\uff0c\u66b4\u529b\u91cd\u6784\u53ef\u4ee5\u89e3\u51b3\u4e00\u5207\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002\n\n\u5927\u4f53\u601d\u8def\u6709\u4e86\uff0c\u8003\u8651\u5177\u4f53\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u3002$r_i + r_j \\geqslant dis_i + dis_j$\uff0c$r_i - dis_i \\geqslant dis_j - r_j$\u5728\u5206\u6cbb\u4e2d\u5fc3\u4e0a\u4fdd\u5b58\u6240\u6709\u7684$dis_j - r_j$\u5373\u53ef\uff0c\u6bcf\u6b21\u67e5\u8be2$\\leqslant r_i - dis_i$\u7684\u6570\u91cf\uff0c\u5f53\u7136\u6309\u7167\u4f20\u7edf\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fdd\u5b58\u5bf9\u4e8e\u5176\u7236\u8282\u70b9\u7684\u90e8\u5206\u7528\u4e8e\u5bb9\u65a5\u3002  \n\u636e\u8bc4\u8bba\u533a\u8bb0\u9898\u89e3\u533a\uff0c\u51fa\u4e8e\u5e38\u6570\u7684\u8981\u6c42\uff0c\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u9ad8\u901f\u5e73\u8861\u6811\uff08\u9664fhq,splay\u7684\u5e73\u8861\u6811\uff09\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u77e5\u9053$dis_i$\u7684\u503c\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u9897\u52a8\u6001\u7684\u6811\uff0c\u867d\u7136\u56e0\u4e3a\u90fd\u662f\u52a0\u70b9\u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u6765\u7ef4\u62a4\uff0c\u4e0d\u514d\u7801\u91cf\u592a\u5927\uff0c\u5077\u61d2\u7684\u505a\u6cd5\u5f53\u7136\u662f\u76f4\u63a5\u7528$vector$\u5c06\u6240\u6709\u7684\u7956\u5148\u548c\u8ddd\u79bb\u90fd\u4fdd\u5b58\u4e0b\u6765\uff0c\u52a0\u70b9\u7684\u65f6\u5019\u76f4\u63a5\u7ee7\u627f\uff0c\u7136\u540e\u5728$vector$\u4e0a\u722c\u70b9\u5206\u6811\u3002\n\n\u5728\u722c\u6811\u67e5\u8be2\u7684\u540c\u65f6\u7ef4\u62a4\u6bcf\u68f5\u70b9\u5206\u6811\u7684$size$\u4ee5\u53ca$son\\_max$\uff0c\u540e\u8005\u5177\u6709\u5355\u8c03\u6027\uff0c\u76f4\u63a5\u53d6$max$\u5373\u53ef\uff0c\u65e0\u9700\u518d\u52a0\u6570\u636e\u7ed3\u6784\u3002\n\n\u5f53\u67d0\u4e2a\u8282\u70b9$u$\uff0c\u6ee1\u8db3$son\\_max_u \\geqslant size_u \\cdot alpha$\uff0c\u8bf4\u660e\u8fd9\u9897\u6811\u5df2\u7ecf\u8fc7\u5ea6\u4e0d\u5e73\u8861\uff0c\u9700\u8981\u91cd\u6784\uff0c\u6bcf\u6b21\u9009\u62e9\u6700\u6d45\u7684\u4e00\u4e2a\u8fdb\u884c\u91cd\u6784\u3002\n\n\u8003\u8651\u5982\u4f55\u91cd\u6784\u3002\u57fa\u672c\u4e0a\u5c31\u662f\u8dd1\u4e00\u904d\u9759\u6001\u7684\u70b9\u5206\u6811\u4e86\uff0c\u9996\u5148\u8981\u505a\u7684\u662f\u6807\u8bb0\u8303\u56f4\u548c\u6570\u636e\u6e05\u96f6\uff0c\u53ef\u4ee5\u662f\u8dd1bfs\uff0c\u6211\u9009\u62e9\u76f4\u63a5\u5c06\u6240\u6709\u5b50\u8282\u70b9\u76f4\u63a5\u5b58\u4e0b\u6765\uff0c\u5c06\u6240\u6709\u5b50\u8282\u70b9\u6807\u8bb0$vis=1,fs,s,son$\u6e05\u96f6,$dis$\u5f39\u51fa\u5230$to\\_build$\u5f39\u51fa\u3002\uff08\u53d8\u91cf\u542b\u4e49\u89c1\u4ee3\u7801\uff09\n\n\u8fd9\u91cc\u91c7\u7528\u5728\u7236\u8282\u70b9\u51fa\u8ba1\u7b97\u5b50\u8282\u70b9\u7684$fs$\u7684\u505a\u6cd5\uff0c\u6240\u4ee5$to\\_build$\u7684$fs$\u5c06\u4f1a\u88ab\u4fdd\u7559\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u7801\u529b\u4e0e\u4fe1\u4ef0\u4e86\u3002\n\n## \u518d\u95f2\u8bdd\uff0c\u4e00\u4e9b\u6211\u5199\u7684nc\u9519\u8bef\u4ee5\u53ca\u4e00\u4e9b\u8981\u6ce8\u610f\u7684\u70b9\n\n\u9996\u5148\u662f\u5199\u4e86\u4e07\u5e74\u7684\u5e73\u8861\u6811\uff0c\u4e00\u5f00\u59cb\u5199\u66ff\u7f6a\u7f8a\u5b9e\u5728\u5199\u4e0d\u51fa\u6765\uff0c\u5c31\u6362\u6210treap\uff0c\u8fd8\u662f\u72af\u4e86\u641e\u95190,1\uff0c\u5927\u5c0f\u4e0d\u5206\u7684nc\u9519\u8bef\u3002\n\n\u5012\u817e\u4e0d\u7b49\u5f0f\u65f6\u6211\u4e00\u5f00\u59cb\u5c45\u7136\u8fd8\u641e\u53cd\u4e86\u3002\n\n\u6e05\u96f6\u65f6\u5019\u8981\u6e05\u5e72\u51c0\uff0c\u4e5f\u4e0d\u8981\u63d0\u524d\u52a0\u8fdb\u53bb\u4e00\u4e9b\u5947\u602a\u7684\u4e1c\u897f\u3002\n\n\u91cd\u6784\u65f6\u4e0d\u8981\u628a\u6839\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5199\u6cd5\u662f\u4f1a\u88ab\u4fee\u6539\u7684\u3002\n\n\u70b9\u5206\u6811\u548c\u539f\u6811\u4e0d\u4e00\u6837\uff0c\u539f\u6811\u7684\u6839\u4e0d\u662f\u70b9\u5206\u6811\u7684\u6839\uff0c\u6240\u4ee5\u8ba1\u7b97$fs$\u662f\u8981\u7528\u4e34\u65f6\u53d8\u91cf\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u52a0\u5230\u76f8\u90bb\u8282\u70b9\u4e0a\u3002\n\n\u6784\u601d\u7684\u65f6\u5019\u4f7f\u7528$dis$\u8ba1\u7b97$fs$\u4e5f\u8bb8\u4f1a\u7b80\u5355\u4e00\u70b9\uff0c\u6bd5\u7adf\u4e0d\u7528\u53cd\u590d\u8003\u8651\u9012\u5f52\u987a\u5e8f\n\n\u4fdd\u6301\u6e05\u9192\uff0c\u8981\u65f6\u523b\u8bb0\u5f97\u81ea\u5df1\u7684\u6807\u8bb0\u542b\u4e49\u3002\n\n\u6ce8\u610f\u53d6\u6a21\u3002\n\n\u5584\u7528\u5bf9\u62cd\uff0c\u8c03\u6574\u53c2\u6570\u5f3a\u5236\u7a0b\u5e8f\u505a\u51fa\u67d0\u4e9b\u884c\u4e3a\u4ee5\u68c0\u6d4b\uff0c\u6bd4\u5982\u628a$alpha$\u8c03\u5c0f\uff0c\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u7acb\u523b\u5f00\u59cb\u91cd\u6784\u3002\n\n## code\n$ Talk \\  is \\ cheap ,show\\ you\\ the\\ code. $  \n\u8fd9\u4e2a\u7248\u672c\u624d\u4e24\u767e\u884c\u51fa\u5934~~\uff08\u4e5f\u5c31\u4e24\u9053\u9898\u7684\u7801\u91cf\uff09~~\uff0c\u4f46\u662f\u8c03\u8bd5\u7248\u672c\u7684\u6574\u6574\u6709\u56db\u767e\u884c\uff0c\u6709\u591f\u545b\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define next nxt\nusing namespace std;\nint read(){\n\tint c=0,nx,sign=1;\n\twhile(!isdigit(nx = getchar()))\n\t\tif(nx=='-')\n\t\t\tsign=-1;\n\twhile(isdigit(nx))\n\t\tc=c*10+nx-'0',nx=getchar();\n\treturn sign*c;\n}\nconst int N=2e5+20,M=2*N,K=17,mod=1e9;\nint head[N],next[M],ver[M],edge[M];\ninline void addEdge(int u,int v,int e){\n\tstatic int now = 0;\n\tnext[++now]=head[u],head[u]=now,ver[now]=v,edge[now]=e;\n\tnext[++now]=head[v],head[v]=now,ver[now]=u,edge[now]=e;\n}\nnamespace treap{\n\tint now = 0;\n\tstruct node{\n\t\tint rnd;\n\t\tint size;\n\t\tint val, ch[2], cnt;\n\t}treap[N*K];\n\tint rub[N*K], top;\n\tinline int New(int u=0){\n\t\tint s = top ? rub[top--] : ++now;\n\t\tnode &ss = treap[s];\n\t\tss.ch[0] = ss.ch[1] = 0;\n\t\tss.cnt = ss.size = 1;\n\t\tss.val = u;\n\t\tss.rnd = rand();\n\t\treturn s;\n\t}\n\tvoid del(int &s){\n\t\tif(!s)\n\t\t\treturn ;\n\t\tif(treap[s].ch[0])\n\t\t\tdel(treap[s].ch[0]);\n\t\tif(treap[s].ch[1])\n\t\t\tdel(treap[s].ch[1]);\n\t\trub[++top] = s;\n\t\ts=0;\n\t}\n\tinline void upd(int &p){\n\t\ttreap[p].size = treap[p].cnt + treap[treap[p].ch[0]].size + treap[treap[p].ch[1]].size;\n\t}\n\tinline void rot(int &x, int t){\n\t\tint y = treap[x].ch[!t];\n\t\ttreap[x].ch[!t] = treap[y].ch[t];\n\t\ttreap[y].ch[t] = x;\n\t\tupd(x);\n\t\tx = y;\n\t\tupd(x);\n\t}\n\tvoid insert(int &p, int x){\n\t\tif(!p){\n\t\t\tp = New(x);\n\t\t\treturn ;\n\t\t}\n\t\tnode &s = treap[p];\n\t\ts.size++;\n\t\tif(x == s.val){\n\t\t\ts.cnt++;\n\t\t\treturn ;\n\t\t}\n\t\tint t = x > s.val;\n\t\tinsert(s.ch[t], x);\n\t\tif(treap[s.ch[t]].rnd > s.rnd)\n\t\t\trot(p, !t);\n\t}\n\tint query(int p,int val){\n\t\tif(!p)\n\t\t\treturn 0;\n\t\tint ans = 0;\n\t\twhile(p){\n\t\t\tnode &s = treap[p];\n\t\t\tint tmp = s.val;\n\t\t\tif(val < tmp)\n\t\t\t\tp = s.ch[0];\n\t\t\telse if(val == tmp)\n\t\t\t\treturn ans + s.cnt + treap[s.ch[0]].size;\n\t\t\telse\n\t\t\t\tp = s.ch[1], ans += s.size - treap[p].size;\n\t\t}\n\t\treturn ans;\n\t}\n}\nusing treap::del;\nusing treap::insert;\nusing treap::query;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\nconst double alpha = 0.75;\nint n;\nint r[N];\nint vis[N], fa[N], size[N];\nvector<pii> dis[N];//\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u70b9\u5206\u6811\u4e0a\u7956\u5148(\u5305\u62ec\u81ea\u8eab)\uff0c\u8ddd\u79bb \nvi son[N];//\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\u5185\u8282\u70b9\uff0c\u4e0d\u5305\u62ec\u6839 \nint sm[N];//\u91cd\u513f\u5b50\u7684size \nint s[N], fs[N];//\u5b50\u6811\u5185\u70b9\uff0c\u5230\u7956\u5148\u7684\nint to_build;//\u9700\u8981\u91cd\u6784\u7684\u8282\u70b9 \nint get_root(int u,int fa,int n){\n\tsize[u] = 1;\n\tint flag = 0, &son_max = sm[u];\n\tson_max = 0;\n\tfor(int i=head[u];i;i=next[i]){\n\t\tint v = ver[i];\n\t\tif(v == fa or !vis[v])\n\t\t\tcontinue;\n\t\tif(flag = get_root(v, u, n))\n\t\t\treturn flag;\n\t\tson_max = max(son_max, size[v]);\n\t\tsize[u] += size[v];\n\t}\n\tson_max = max(son_max, n - size[u]);\n\tif(son_max * 2 <= n)\n\t\treturn u;\n\telse\n\t\treturn 0;\n}\nint root = 0;//\u4e34\u65f6\u8bb0\u5f55dfs\u904d\u5386\u65f6\u7684\u6839 \nvoid dfs(int u, int fa,int d,int &s,int &fs){\n\tsize[u] = 1;\n\tdis[u].push_back(make_pair(root, d));\n\tson[root].push_back(u);\n\t\n\tinsert(s, d - r[u]);\n\tinsert(fs, d - r[u]);\n\tfor(int i=head[u];i;i=next[i]){\n\t\tint v = ver[i];\n\t\tif(v == fa or !vis[v])\n\t\t\tcontinue;\n\t\tdfs(v, u, d + edge[i], s, fs);\n\t\tsize[u] += size[v];\n\t}\n}\nint solve(int u,int f,int n, int _fs){\n\tint rt = get_root(u, 0, n);\n\tvis[rt] = 0, fa[rt] = f, fs[rt] = _fs, size[rt] = n;\n\t\n\tinsert(s[rt], 0 - r[rt]);\n\tdis[rt].push_back(make_pair(rt, 0));\n\tfor(int i=head[rt];i;i=next[i]){\n\t\tint v = ver[i];\n\t\tif(!vis[v])\n\t\t\tcontinue;\n\t\troot = rt;\n\t\tint _fs = 0;\n\t\tdfs(v, rt, edge[i], s[rt], _fs);\n\t\tsolve(v, rt, size[v], _fs);\n\t}\n\treturn rt;\n}\nint main(){\n\tint cnt = read();\n\tlong long ans = 0;\n\tn = read();\n\tread(), read(), r[1] = read();\n\tinsert(s[1], 0 - r[1]);\n\tsize[1] = 1;\n\tprintf(\"0\\n\");\n\tdis[1].push_back(make_pair(1, 0));\n\tfor(int i=2;i<=n;i++){\n\t\tint f = read() ^ (ans % mod), e = read();\n\t\tr[i] = read();\n\t\taddEdge(i, f, e);\n\t\tfa[i] = f, size[i] = 1;\n\t\tdis[i] = dis[f];\n\t\tfor(auto &it:dis[i])\n\t\t\tit.second += e, size[it.first]++;\n\t\tdis[i].push_back(make_pair(i, 0));\n\t\tfor(int j=dis[i].size()-2;j>=0;j--){\n\t\t\tpii &it = dis[i][j];\n\t\t\tint f = it.first, d = it.second, p = dis[i][j+1].first;\n\t\t\t\n\t\t\tans += query(s[f], r[i] - d);\n\t\t\tans -= query(fs[p], r[i] - d);\n\t\t\t\n\t\t\tinsert(s[f], d - r[i]);\n\t\t\tinsert(fs[p], d - r[i]);\n\t\t\tson[f].push_back(i);\n\t\t\t\n\t\t\tif(size[p] > sm[f])\n\t\t\t\tsm[f] = size[p];\n\t\t\tif(sm[f] > size[f] * alpha)\n\t\t\t\tto_build = f;\n\t\t}\n\t\tinsert(s[i], 0 - r[i]);\n\t\t\n\t\tif(to_build and i < n){\n\t\t\tfor(auto u:son[to_build]){\n\t\t\t\tvis[u] = 1;\n\t\t\t\tson[u].clear();\n\t\t\t\tsize[u] = sm[u] = 0;\n\t\t\t\twhile(dis[u].back().first != to_build)\n\t\t\t\t\tdis[u].pop_back();\n\t\t\t\tdis[u].pop_back();\n\t\t\t\tdel(s[u]);\n\t\t\t\tdel(fs[u]);\n\t\t\t}\n\t\t\tson[to_build].clear();\n\t\t\tvis[to_build] = 1;\n\t\t\tdis[to_build].pop_back();\n\t\t\tdel(s[to_build]);\n\t\t\t\n\t\t\tint tmp = fs[to_build];\n\t\t\tfs[to_build] = 0;\n\t\t\tsolve(to_build, fa[to_build], size[to_build], tmp);\n\t\t\tto_build = 0;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n```\n\n",
        "postTime": 1588473423,
        "uid": 144732,
        "name": "Alear",
        "ccfLevel": 8,
        "title": "P3920 [WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\uff08\u66ff\u7f6a\u7f8a\u5f0f\u52a8\u6001\u70b9\u5206\u6811\uff09"
    },
    {
        "content": "## P3920 [WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\n### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3920)\n\u8003\u8651\u5982\u679c\u9898\u76ee\u53ea\u67e5\u8be2\u4e00\u6b21\u8be5\u600e\u4e48\u505a\uff0c\u90a3\u5c31\u662f\u88f8\u7684\u70b9\u5206\u6811+\u5e73\u8861\u6811\u4e86\u3002  \n\u7136\u800c\u6b64\u9898\u662f\u52a8\u6001\u7684\uff0c\u4e0d\u53ef\u80fd\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u90fd\u6c42\u4e00\u6b21\u70b9\u5206\u6811\uff0c\u90a3\u4e48\u5c31\u8981\u52a8\u6001\u7ef4\u62a4\u70b9\u5206\u6811\u4e86\uff1f  \n\u7c7b\u4f3c\u66ff\u7f6a\u7f8a\u6811\uff0c\u4e5f\u662f$siz[son[x]]>alpha*siz[x]$\u65f6\u5c31\u91cd\u6784\uff0c\u7ef4\u62a4\u70b9\u5206\u6811\u6811\u9ad8\uff0c\u5f53\u7136\u91cd\u6784\u590d\u6742\u5ea6\u5176\u5b9e\u4e5f\u662f\u5f88\u5927\u7684\uff0c\u662f$O(log^3n)$\uff0c\u6240\u4ee5aplha\u4e0d\u80fd\u53d6\u592a\u5c0f\uff0c\u53d60.8-0.85\u90fd\u662f\u5408\u9002\u7684  \n\u54ce\uff0c\u4f60\u8bf4\u8fd9\u8c01\u80fd\u4e0d\u660e\u767d\u5462\uff1f\u5173\u952e\u662f\u8fd9\u9898\u7ec6\u8282\u771f\u7684\u591a\uff01\uff08\u5176\u5b9e\u6211\u662f\u628a\u8fd9\u9898\u5f53\u505a\u70b9\u5206\u6811\u5165\u95e8\u505a\u7684\uff0c\u7ed3\u679c....\uff09\u9996\u5148\u662f\u7b97\u8d21\u732e\uff0c\u9898\u76ee\u8981\u6c42$dis(x,i)<=r_x+r_i$  \n\u8f6c\u5316\u4e00\u4e0b\uff0c\u53d8\u6210\u6c42$dis(x,u)+dis(u,i)<=r_x+r_i$,\u4e5f\u5c31\u662f\u6c42$dis(u,i)-r_i<=r_x-dis(x,u)$\u7684$i$\u6709\u591a\u5c11\u4e2a\uff0c\u90a3\u4e48\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u91cd\u5fc3\u7ef4\u62a4\u4e00\u4e2a$(dis-r)$\u5c31\u597d\u4e86\u3002  \n\u7b49\u7b49\uff0c\u8fd9\u4e0d\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u8981\u600e\u4e48\u529e\uff1f\u5176\u5b9e\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u5f53\u524d\u91cd\u5fc3$x$,\u4e0a\u4e00\u5c42\u91cd\u5fc3$y$\uff08\u4ece\u5e95\u800c\u4e0a\uff09,\u53ea\u8981$x$\u6c42\u51fa\u7684\u5408\u6cd5\u8def\u5f84\u4e0d\u7ecf\u8fc7$y$\u7ba1\u8f96\u7684\u90a3\u9897\u5b50\u6811\u5c31\u597d\u4e86\n\n![](https://cdn.luogu.com.cn/upload/pic/57180.png)\n\n\u90a3\u4e48\u53bb\u6389$z$\u7684\u5f71\u54cd\u5373\u53ef\uff0c\u518d\u8bb0\u4e00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u5230$z$\uff08\u4e0d\u77e5\u9053\u5982\u4f55\u8868\u8ff0\uff0c\u770b\u56fe...\uff09\u7684\u8ddd\u79bb-r,\u90a3\u4e48\u5c31\u53ef\u4ee5\u7b97\u51fa\u6240\u6709\u5408\u6cd5\u7684\u8d21\u732e\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u91cc\u6c42$dis$\u4e0d\u8981\u7528\u500d\u589e\uff01\u6162\u6574\u6574\u4e00\u500d\uff01\u6240\u4ee5\u6539\u7528\u4e00\u4e2a\u6570\u7ec4$s[x][k]$\u4ee3\u8868\u7740$x$\u8282\u70b9\u5230\u70b9\u5206\u6811$dep=k$\u7684\u70b9\u7684\u8ddd\u79bb\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u662f\u8bb0\u5230\u7b2c$k$\u7956\u5148\u7684\u8ddd\u79bb\u5462\uff1f\u56e0\u4e3a\u540e\u9762\u91cd\u6784\u5982\u679c\u8fd9\u6837\u8bb0\u4f1a\u53d1\u73b0\u5e76\u4e0d\u597d\u64cd\u4f5c\uff0c\u5c31\u7b97\u80fd\u5199\u590d\u6742\u5ea6\u4e5f\u8f83\u5927\u3002  \n\u8fd9\u6837\u8bb0\u7684\u597d\u5904\u5728\u4e8e\u91cd\u6784\u65f6\u56e0\u4e3a\u5931\u914d\u7684\u7956\u5148\u90fd\u6ca1\u53d8\uff0c\u90a3\u4e48\u5c31\u53ea\u7528\u7ba1\u8fd9\u9897\u5b50\u6811\uff0c\u5426\u5219\u590d\u6742\u5ea6\u5c31\u6ca1\u6709\u4fdd\u8bc1\u4e86  \n\u91cd\u6784\u65f6\u5148\u6e05vis\u6570\u7ec4\u65b9\u4fbf\u4e4b\u540e\u5224\u65ad\u8fb9\u754c\uff0c\u6e05\u9664\u8bb0\u5f55\u7684\u5e73\u8861\u6811\u4fe1\u606f\uff0c\u8bb0\u7684\u56de\u6536\u8282\u70b9\u3002  \n\u7136\u540e\u5c31\u662f\u91cd\u6784\uff0c\u5047\u8bbe\u5f53\u524d\u7684\u5b50\u6811\u548c\u4e0a\u4e00\u4e2a\u91cd\u5fc3\u8fde\u63a5\u7684\u70b9\u662f$x$(\u5c31\u662f\u56fe\u793a\u7684$z$\u5566)\uff0c\u627e\u5230\u7684\u91cd\u5fc3\u4e3a$y$\uff0c\u90a3\u4e48\u5206\u522b\u4ee5$x,y \\ bfs$\u4e00\u6b21\uff0c\u5c31\u662f\u91cd\u6784$y$\u8282\u70b9\u7684\u5e73\u8861\u6811\uff0c\u6ce8\u610f\u4e24\u9897\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u540c\u6240\u4ee5bfs\u4e24\u6b21\uff08\u81f3\u5c11\u6211\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e24\u6b21\u3002\u3002\u3002\uff09\u4ee5$y$\u4e3a\u8d77\u70b9\u7684\u8fd8\u8981\u7ef4\u62a4\u4e0b$s$\u6570\u7ec4\uff0c\u7136\u540e\u597d\u50cf\u5c31\u6ca1\u4e86\u5427\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <vector>\nusing namespace std;\n#define ri register int\ntypedef long long LL;\nconst int N=100010,M=N*45;\nconst double alpha=0.7;\nconst double Alpha=0.8;\nint rt[N],rt1[N],r[N];\nstruct SC{\n    int ch[M][2],siz[M],v[M],st[M],tail;\n    inline void Init(int x){for(ri i=1;i<=x;++i)st[++tail]=i;}\n    //\u521d\u59cb\u5316 \n    inline int get_id(){return st[tail--];}\n    //\u5f97\u5230\u4e00\u4e2a\u672a\u88ab\u7528\u7684\u6570 \n    inline void push(int x){st[++tail]=x;}\n    //\u56de\u6536 \n    #define lc ch[x][0]\n    #define rc ch[x][1]\n    inline int New(ri val){ri x=get_id();lc=rc=0;siz[x]=1;v[x]=val;return x;}//\u65b0\u5efa\u8282\u70b9 \n    inline void pushup(ri x){siz[x]=siz[lc]+siz[rc]+1;}\n    inline void rotate(ri&x,register bool c){\n        ri y=ch[x][c];ch[x][c]=ch[y][!c];\n        ch[y][!c]=x;siz[y]=siz[x];pushup(x);\n        x=y;//\u8fd9\u6837\u6bd4\u66b4\u529b\u91cd\u6784\u5feb\u591a\u4e86\u3002\u3002\u3002 \n    }inline int rk(ri x,ri r){\n        ri ans=0;\n        while(x){\n            if(v[x]<=r)ans+=siz[lc]+1,x=rc;\n            else x=lc;\n        }return ans;\n    }inline void Insert(ri&x,ri val){\n        if(!x){x=New(val);return;}\n        ++siz[x];\n        ri d=val>=v[x];\n        Insert(ch[x][d],val);\n        if(siz[ch[x][d]]>siz[x]*alpha)rotate(x,d);//\u5224\u65ad\u662f\u5426\u8981rotate \n    }inline void recover(int x){if(!x)return;recover(lc);recover(rc);push(x);} \n    inline void clear(ri&x){recover(x);x=0;}//\u6e05\u7a7a\u5e73\u8861\u6811 \n}T;\nint n;\nLL ans;\nstruct VCD_tree{\n    int siz[N],dp[N],dep[N],failpos,center,sum;\n    bool vis[N];\n    int d[N],nxt[N<<1],to[N<<1],cost[N<<1],tot;\n    int p[N],c[N],s[N][50],top[N];\n    //p[x]:\u70b9\u5206\u6811\u4e0ax\u7684\u7236\u4eb2,dep:\u70b9\u5206\u6811\u4e0a\u7684\u6df1\u5ea6,siz:\u70b9\u5206\u6811\u7684\u5927\u5c0f,dp:\u6c42\u91cd\u5fc3\u7528 \n    //top[x]:\u662fp[x]\u76f8\u90bb\u7684\u4e00\u4e2a\u70b9,\u8be5\u70b9\u5c5e\u4e8ex\u8fd9\u4e2a\u91cd\u5fc3\u6240\u7ba1\u8f96\u7684\u533a\u57df,\u53ea\u662f\u4e3a\u4e86\u964d\u4f4e\u5e38\u6570,\u975e\u5fc5\u8981\n    //c[x]:top[x]\u548cp[x]\u8fd9\u6761\u8fb9\u7684\u6743\u503c,\u540c\u4e0a\u975e\u5fc5\u8981\n\t//s[x][k]:x\u548c\u70b9\u5206\u6811\u4e0a\u662fx\u7236\u4eb2\u5e76\u4e14dep=k\u7684\u70b9\u7684\u8ddd\u79bb \n    #define max(a,b) (a>b?a:b)\n    inline void add(ri a,ri b,ri v){to[++tot]=b;nxt[tot]=d[a];d[a]=tot;cost[tot]=v;}//\u52a0\u8fb9 \n    inline void ins(ri a,ri b,ri v){\n        add(a,b,v);add(b,a,v);\n        c[b]=s[b][0]=v;p[top[b]=b]=a;\n        //\u521d\u59cbp[b]=a,top[b]=a \n    }int st[N],f[N],dis[N],L,R;\n    inline void bfs(ri x){//\u627e\u91cd\u5fc3 \n        st[L=R=1]=x;f[x]=0;\n        ri i,u;\n        while(L<=R){\n            x=st[L++];\n            siz[x]=1;dp[x]=0;\n            for(i=d[x];i;i=nxt[i]){u=to[i];if(!vis[u]&&u!=f[x])st[++R]=u,f[u]=x;}\n        }for(i=R;i>=1;--i){\n            u=st[i];siz[f[u]]+=siz[u];dp[f[u]]=max(dp[f[u]],siz[u]);\n            dp[u]=max(dp[u],sum-dp[u]);\n            if(dp[u]<dp[center])center=u;\n        }\n    }inline int get_center(ri x){sum=siz[x];center=0;bfs(x);return center;}//\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684 \n    int maxx;\n    inline void clear(ri x){\n        st[L=R=1]=x;ri i,u;\n        while(L<=R){\n            x=st[L++];vis[x]=0;//\u6e05\u9664vis \n            T.clear(rt[x]);T.clear(rt1[x]);//\u6e05\u9664\u5e73\u8861\u6811 \n            for(i=d[x];i;i=nxt[i]){u=to[i];if(dep[u]>=maxx&&vis[u])st[++R]=u;}\n        }\n    }inline int work(ri x){\n        siz[x]=vis[x]=1;dep[x]=dep[p[x]]+1;\n        for(ri i=1;i<=dep[p[x]];++i)s[x][i]=s[p[x]][i]+c[x];\n\t\t//\u56e0\u4e3a\u9664\u975e\u662fp[y]\u548cp[p[y]]\u8de8\u8fc7\u4e86x\u8fd9\u6837\u4e0d\u80fd\u7b80\u5355\u7684+c[x]\n\t\t//\u800c\u56e0\u4e3a\u5982\u679c\u8de8\u8fc7\u4e86x,\u8bf4\u660e\u4e0d\u8fde\u901a\uff1f\u6240\u4ee5\u80af\u5b9a\u53ef\u4ee5\u8fd9\u6837,\u800c\u4e0b\u9762\u91cd\u6784\u5c31\u53ea\u6709bfs \n        //\u521d\u59cb\u5316 \n        ri ans=0,v=0;T.Insert(rt[x],-r[x]);\n        failpos=0;\n        for(ri y=x,k=dep[x];p[y];--k,y=p[y]){\n            v=s[x][k-1];//\u5176\u5b9e\u5c31\u662fx\u548cp[y]\u7684\u8ddd\u79bb \n            T.Insert(rt[p[y]],v-r[x]);T.Insert(rt1[y],v-r[x]-c[y]);//\u80af\u5b9a\u662f\u76f8\u5dee\u4e00\u4e2ac[y]\u5566 \n            ans+=T.rk(rt[p[y]],r[x]-v)-T.rk(rt1[y],r[x]-v-c[y]);\n            ++siz[p[y]];\n            if(siz[y]>=siz[p[y]]*Alpha)failpos=p[y];\n        }if(failpos){//\u91cd\u6784\n            maxx=dep[failpos]; \n            clear(failpos);\n            x=p[failpos];\n            siz[top[failpos]]=siz[failpos];\n\t\t\t//\u6ce8\u610f\u8fd9\u4e2a\u4e00\u5b9a\u8981,\u56e0\u4e3atop[failpos]\u4e0d\u4e00\u5b9a\u7b49\u4e8efailpos\n\t\t\t//\u4f46\u662fsiz\u786e\u5b9esiz[failpos],\u662f\u70b9\u5206\u6811\u548c\u539f\u6811\u7684\u533a\u522b \n            rebuild(top[failpos],x,c[failpos]);\n        }return ans;\n    }inline void build(ri x,ri now){//\u8fd9\u4e2a\u662f\u4ee5top[\u91cd\u5fc3]\u4e3a\u8d77\u70b9\u5efa\u7684\u5e73\u8861\u6811 \n        st[L=R=1]=x;f[x]=dis[x]=0;ri i,u;\n        while(L<=R){\n            x=st[L++];\n            T.Insert(rt1[now],dis[x]-r[x]);\n            for(i=d[x];i;i=nxt[i]){u=to[i];if(!vis[u]&&u!=f[x])st[++R]=u,f[u]=x,dis[u]=dis[x]+cost[i];}\n        }\n    }inline void build_2(ri x,ri now){//\u8fd9\u4e2a\u662f\u4ee5\u91cd\u5fc3\u4e3a\u8d77\u70b9\u5efa\u7684\u5e73\u8861\u6811 \n        st[L=R=1]=x;f[x]=dis[x]=0;ri i,u;\n        while(L<=R){\n            x=st[L++];\n            T.Insert(rt[now],dis[x]-r[x]);\n            s[x][dep[now]]=dis[x];//\u987a\u4fbf\u91cd\u6784s\u6570\u7ec4 \n            for(i=d[x];i;i=nxt[i]){u=to[i];if(!vis[u]&&u!=f[x])st[++R]=u,f[u]=x,dis[u]=dis[x]+cost[i];}\n        }\n    }inline void rebuild(ri x,ri f,ri v){\n        ri y=get_center(x);p[y]=f;dep[y]=dep[f]+1;\n        //\u5f97\u5230\u91cd\u5fc3,\u91cd\u6784\u4e0bp:\u7236\u4eb2,dep \n        build(x,y);\n        build_2(y,y);\n        vis[y]=1;siz[y]=siz[top[y]=x];c[y]=v;\n        //siz\u9700\u8981\u8d4b\u503c,\u8fd8\u662f\u56e0\u4e3a\u662f\u539f\u6811\u548c\u70b9\u5206\u6811\u7684\u533a\u522b\n\t\t//top[y]=x,c[y] =v \u8fd9\u4e2a\u6bcb\u5eb8\u7f6e\u7591\u5427 \n        ri i,u;\n        for(i=d[y];i;i=nxt[i]){\n            u=to[i];\n            if(!vis[u])rebuild(u,y,cost[i]);\n        }\n    }\n}wjr;\nconst int maxn=1<<20;\nchar IN[maxn+10],*A,*B;\n#define nc() (A==B&&(B=(A=IN)+fread(IN,1,maxn,stdin),A==B)?EOF:*A++)\ninline void read(ri&x){\n    x=0;ri f=1;register char c=nc();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=nc();}\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=nc();\n    x*=f;\n}int kkk_is_our_red_sun[50],cnt;//\u9003 \ninline void print(register LL x){cnt=0;\n    if(!x)kkk_is_our_red_sun[++cnt]=0;\n    while(x)kkk_is_our_red_sun[++cnt]=x%10,x/=10;\n    for(ri i=cnt;i>=1;--i)putchar('0'+kkk_is_our_red_sun[i]);\n    putchar('\\n');\n}const int mod=1e9;\nint main(){\n    T.Init(M-10);wjr.top[1]=1;\n    scanf(\"%*d\");read(n);wjr.dp[0]=n<<1;//\u521d\u59cb\u5316\u7701\u7684\u540e\u9762\u5224\u65ad \n    int a,b;\n    read(a);read(b);read(r[1]);wjr.work(1);\n    putchar('0');putchar('\\n');\n    for(ri i=2;i<=n;++i){\n        read(a);read(b);read(r[i]);\n        a^=(ans%mod);wjr.ins(a,i,b);\n        ans+=wjr.work(i);print(ans);\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1555900815,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b"
    },
    {
        "content": "# Description\n\n\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743 $r_i$\uff0c\u6c42 $r_x+r_y \\ge d(x,y)$ \u7684\u70b9\u5bf9\u6570\u76ee\u3002\u540c\u65f6\uff0c\u4f60\u9700\u8981\u652f\u6301\u63d2\u5165\u53f6\u5b50\u7ed3\u70b9\u3002\n\n$n \\le 10^5, r \\le 10^9$\uff0c\u65f6\u9650 12s\u3002\n\n# Solution\n\n\u6211\u4eec\u5148\u4e0d\u8003\u8651\u4fee\u6539\uff0c\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u8fdb\u884c\u70b9\u5206\u6cbb\u3002\n\n\u8bbe\u5f53\u524d\u7684\u5206\u6cbb\u4e2d\u5fc3\u4e3a $u$\uff0c\u4e0d\u59a8\u5c06\u539f\u5f0f\u5316\u6210 $d(u,x)-r_x \\le r_y-d(u,y)$\uff0c\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u5e73\u8861\u6811\u7684\u5927\u5e38\u6570\uff0c\u5361\u8fc7\u8fd9\u4e2a\u9898\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u6bd4\u8f83\u56f0\u96be\u3002\u6240\u4ee5\u6211\u9009\u62e9\u7528\u52a8\u6001\u6570\u7ec4\u548c\u6839\u53f7\u5206\u6cbb\u505a\u5230\u5c0f\u5e38\u6570 $\\mathcal O(n \\sqrt n)$ \u4ee3\u66ff\u5927\u5e38\u6570 $\\mathcal O(n \\log n)$ \u7684\u5e73\u8861\u6811\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u52a8\u6001\u6570\u7ec4 $x,y$\uff0c\u8fd9\u91cc\u7ea6\u5b9a ${\\rm siz}_x \\ge {\\rm siz}_y$\u3002\u63d2\u5165\u65f6\uff0c\u66b4\u529b\u5728 $y$ \u4e2d\u4e8c\u5206\u52a0\u5165\u5143\u7d20\uff0c\u82e5 ${\\rm siz}_y$ \u8d85\u8fc7\u9600\u503c $B$\uff0c\u5219\u5f52\u5e76 $x,y$\uff1b\u67e5\u8be2\u65f6\uff0c\u5728 $x,y$ \u4e2d\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n\u56de\u5230\u539f\u9898\uff0c\u7531\u4e8e\u9700\u8981\u652f\u6301\u63d2\u5165\u53f6\u5b50\u7ed3\u70b9\uff0c\u6211\u4eec\u53ea\u80fd\u7528\u52a8\u6001\u70b9\u5206\u6cbb\u5904\u7406\u3002\u6bcf\u6b21\u63d2\u5165\u65f6\uff0c\u76f4\u63a5\u5728\u70b9\u5206\u6811\u4e0a\u548c\u539f\u6811\u4e00\u6837\u5730\u66b4\u529b\u5efa\u8fb9\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u663e\u7136\u65e0\u6cd5\u4fdd\u8bc1\u70b9\u5206\u6811\u7684\u9ad8\u5ea6\u662f $\\mathcal O(\\log n)$ \u7ea7\u522b\u7684\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u501f\u9274\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u91cd\u6784\u5c40\u90e8\u4e0d\u5e73\u8861\u7684\u70b9\u5206\u6811\u3002\u5177\u4f53\u5730\uff0c\u5728\u70b9\u5206\u6811\u4e0a\u63d2\u5165\u53f6\u5b50\u7ed3\u70b9\uff0c\u679a\u4e3e\u5176\u7956\u5148\u65f6\uff0c\u82e5 ${\\rm siz}_x \\ge \\alpha \\times {\\rm siz}_{{\\rm fa}_x}$\uff0c\u5219\u5bf9 ${\\rm fa}_x$ \u7684\u5b50\u6811\u91cd\u65b0\u8dd1\u4e00\u904d\u70b9\u5206\u6cbb\uff0c\u91cd\u5efa\u70b9\u5206\u6811\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u666e\u901a\u66ff\u7f6a\u7f8a\u6811\u7684\u91cd\u6784\u6bd4\u67e5\u8be2\u5c11\u4e00\u4e2a $\\log$\uff0c\u4e00\u822c $\\alpha=0.75$\uff0c\u800c\u672c\u9898\u91cd\u6784\u590d\u6742\u5ea6\u8f83\u5927\uff0c\u6240\u4ee5\u5b9e\u9645\u5e94\u7528\u4e2d $\\alpha=0.9$ \u6bd4\u8f83\u5408\u9002\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u6211\u4eec\u6309\u7167\u8001\u5957\u8def\u5728\u70b9\u5206\u6811\u4e0a\u8df3\u7236\u4eb2\u5c31\u597d\u4e86\u3002\u4f46\u662f\u663e\u7136\u9700\u8981\u7ef4\u62a4 LCA\uff0c\u7136\u800c\u672c\u9898\u9700\u8981\u63d2\u5165\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u4f7f\u7528\u500d\u589e LCA \u6bd4\u8f83\u5408\u9002\u3002\n\n\u590d\u6742\u5ea6\u4e0d\u4f1a\u7b97\uff0c\u5927\u6982\u5e26\u4e2a $\\sqrt n$ \u548c\u51e0\u4e2a $\\log n$\uff0c\u5b9e\u9645\u8dd1\u8d77\u6765\u5f88\u5feb\u3002\n\n# Code\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=4e5+5,B=300;\nconst int mod=1e9;\nconst double alp=0.95;\nint typ,n,NumE,Sum,rt,lst,Fir[N],dep[N],dis[N],fa[N][25],r[N],ff[N],dd[N],ss[N],lg2[N],sl[N],sz[N];\nbool vis[N];\nvector<int> g[N];\nstruct Edge {\n\tint v,nxt;\n}E[N*2];\nvoid AddE(int u,int v) {\n\tE[++NumE]=(Edge){v,Fir[u]};\n\tFir[u]=NumE;\n}\nint LCA(int x,int y) {\n\tif (dep[x]<dep[y]) swap(x,y);\n\tfor (int i=lg2[dep[x]];i>=0;i--)\n\t\tif (dep[fa[x][i]]>=dep[y])\n\t\t\tx=fa[x][i];\n\tif (x==y) return x;\n\tfor (int i=lg2[dep[x]];i>=0;i--)\n\t\tif (fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nint Dis(int x,int y) {\n\treturn dis[x]+dis[y]-dis[LCA(x,y)]*2;\n}\nstruct BST {\n\tvector<int> b,s;\n\tvoid Ins(int x) {\n\t\ts.insert(lower_bound(s.begin(),s.end(),x),x);\n\t\tif (s.size()>=B) {\n\t\t\tvector<int> t;t.clear();\n\t\t\tt.resize(b.size()+s.size());\n\t\t\tmerge(b.begin(),b.end(),s.begin(),s.end(),t.begin());\n\t\t\tswap(b,t);s.clear();\n\t\t}\n\t}\n\tint rk(int x) {\n\t\treturn (upper_bound(b.begin(),b.end(),x)-b.begin())+(upper_bound(s.begin(),s.end(),x)-s.begin())-2;\n\t}\n\tvoid clr() {\n\t\tb.clear(),s.clear();\n\t}\n}v[N],fv[N];\nvoid GetR(int x,int fa) {\n\tsl[x]=0,sz[x]=1;\n\tfor (int i=Fir[x];i;i=E[i].nxt) {\n\t\tif (!vis[E[i].v] && E[i].v!=fa) {\n\t\t\tGetR(E[i].v,x);\n\t\t\tsl[x]=max(sl[x],sz[E[i].v]);\n\t\t\tsz[x]+=sz[E[i].v];\n\t\t}\n\t}\n\tsl[x]=max(sl[x],Sum-sz[x]);\n\tif (sl[x]<sl[rt]) rt=x;\n}\nvoid rins(int x,int r,int gua) {\n\tv[x].Ins(-r);\n\tint p=x;\n\twhile (p!=gua) {\n\t\tif (ff[p]!=gua) v[ff[p]].Ins(Dis(x,ff[p])-r);\n\t\tfv[p].Ins(Dis(x,ff[p])-r);\n\t\tp=ff[p];\n\t}\n}\nvoid Dfs(int u,int fa,int gua) {\n\tvis[u]=true;\n\tv[u].clr(),fv[u].clr();\n\tff[u]=fa,dd[u]=dd[fa]+1;\n\tss[u]=1,rins(u,r[u],gua);\n\tGetR(u,0);\n\tg[u].clear(); \n\tfor (int i=Fir[u];i;i=E[i].nxt)\n\t\tif (!vis[E[i].v]) {\n\t\t\trt=0,sl[0]=n,Sum=sz[E[i].v];\n\t\t\tGetR(E[i].v,u);\n\t\t\tg[u].push_back(rt);\n\t\t\tint now=rt;\n\t\t\tDfs(rt,u,gua);\n\t\t\tss[u]+=ss[now];\n\t\t}\n}\nvoid clr(int u) {\n\tvis[u]=0;\n\tfor (int i=0;i<g[u].size();i++)\n\t\tclr(g[u][i]);\n}\nvoid rebd(int u) {\n\tif (!u) return;\n\tclr(u);\n\trt=0,sl[0]=n,Sum=ss[u];\n\tGetR(u,0);\n\tfor (int i=0;i<g[ff[u]].size();i++)\n\t\tif (g[ff[u]][i]==u) g[ff[u]][i]=rt;\n\tDfs(rt,ff[u],ff[u]);\n}\nvoid Udfz(int x,int r) {\n\tv[x].Ins(-r);\n\tss[x]++;\n\tint rb=0,p=x;\n\twhile (ff[p]) {\n\t\tss[ff[p]]++;\n\t\tv[ff[p]].Ins(Dis(x,ff[p])-r);\n\t\tfv[p].Ins(Dis(x,ff[p])-r);\n\t\tif (1.0*ss[p]>1.0*ss[ff[p]]*alp) rb=ff[p];\n\t\tp=ff[p];\n\t}\n \trebd(rb);\n}\nint Qdfz(int x,int r) {\n\tint Ans=0,p=x;\n\twhile (ff[p])\n\t\tAns+=v[ff[p]].rk(r-Dis(x,ff[p]))-fv[p].rk(r-Dis(x,ff[p])),\n//\t\tprintf(\"%d\\n\",p),\n\t\tp=ff[p];\n\treturn Ans;\n}\nsigned main() {\n\tscanf(\"%lld%lld\",&typ,&n);\n\tfor (int i=2;i<=n;i++) lg2[i]=lg2[i>>1]+1;\n\tfor (int i=1;i<=n;i++) {\n\t\tvis[i]=1;\n\t\tint x,y;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&r[i]);\n\t\tx=x^(lst%mod);\n\t\tfa[i][0]=x,dep[i]=dep[x]+1,dis[i]=dis[x]+y;\n\t\tfor (int j=1;j<=lg2[dep[i]];j++)\n\t\t\tfa[i][j]=fa[fa[i][j-1]][j-1];\n\t\tif (i>1) AddE(i,x),AddE(x,i);\n\t\tff[i]=x,dd[i]=dd[x]+1;\n\t\tg[x].push_back(i);\n//\t\tprintf(\"D\");\n\t\tlst+=Qdfz(i,r[i]);\n//\t\tprintf(\"D\");\n\t\tprintf(\"%lld\\n\",lst);\n\t\tUdfz(i,r[i]);\n\t}\n//\tprintf(\"%d\\n\",Dis(2,5));\n\treturn 0;\n}\n```\n",
        "postTime": 1657466077,
        "uid": 283913,
        "name": "ZillionX",
        "ccfLevel": 6,
        "title": "\u3010\u70b9\u5206\u6811\uff0c\u6839\u53f7\u5206\u6cbb\u3011P3920 [WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b"
    },
    {
        "content": "# Solution\n\n\u5728\u6b64\u63d0\u4f9b\u4e00\u79cd\u53ef\u80fd\u76f8\u5bf9\u5176\u4ed6\u89e3\u6cd5~~\u8f83\u4e3a\u597d\u5199~~\u7684\u505a\u6cd5\u3002\n\n## \u4e00\n\n\u9996\u5148\u8003\u8651\u4e00\u68f5\u5982\u4e0b\u56fe\u7684\u6811\uff0c\u5176\u4e2d $rtlr_0=6,\\ rtlr_1=5$\u3002\n\n![1](https://img-blog.csdnimg.cn/d5e23f207b014b5789c81d4101795cdb.png#pic_center)\n\n\u53d1\u73b0\u6b64\u65f6\u8fd9\u68f5\u6811\u4e0d\u8003\u8651\u6839\u8282\u70b9\u53ea\u6709\u4e24\u6761\u94fe\uff0c\u800c\u5de6\u53f3\u94fe\u7684\u672b\u5c3e\u5206\u522b\u662f $rtlr_0$ \u548c $rtlr_1$\u3002\n\n\u540c\u65f6\uff0c~~\u6309\u7167\u5957\u8def~~\uff0c\u6211\u4eec\u5c06 $dist(i,j) \\leq r_i+r_j$ \u5316\u4e3a $dist(i, l)-r_i\\leq r_j-dist(j,l)$\uff0c\u5176\u4e2d $l$ \u4e3a $i$ \u548c $j$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u5bf9\u4e8e\u4e0a\u56fe\uff0c\u6211\u4eec\u53ea\u7528\u7ef4\u62a4 4 \u68f5\u5e73\u8861\u6811\uff08\u4f7f\u7528\u5e73\u8861\u6811\u56e0\u4e3a\u6211\u4eec\u662f\u5728\u7ef4\u62a4\u5728\u67d0\u4e00\u96c6\u5408\u5185\u6bd4\u67d0\u6570\u8981\u5927\u7684\u503c\u7684\u4e2a\u6570\uff09\u5c31\u53ef\u4ee5\u628a\u7b54\u6848\u6c42\u51fa\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n\ninline void add(int u, int v, int w){\n\te[++cnt] = (edge){v, hd[u], w}, hd[u] = cnt;\n\te[++cnt] = (edge){u, hd[v], w}, hd[v] = cnt;\n}\n\ninline void rotate(int &x, int k){\n\tint y = t[x].ch[k];\n\tt[x].ch[k] = t[y].ch[!k], t[y].ch[!k] = x;\n\tt[y].s = t[x].s, \n\tt[x].s = t[t[x].ch[1]].s + t[t[x].ch[0]].s + 1;\n\tx = y;\n}\n\ninline void insrt(int &x, int v){\n\tif(!x){\n\t\tx = ++tot;\n\t\tt[x].s = 1, t[x].a = v;\n\t\treturn;\n\t}\n\tbool k = (v >= t[x].a);\n\tinsrt(t[x].ch[k], v), t[x].s += 1;\n\tif(t[x].s * 0.8 < t[t[x].ch[k]].s) \n\t\trotate(x, k);\n}\n\ninline int query(int x, int v){\n\tif(!x) return 0;\n\tif(v <= t[x].a) \n\t\treturn query(t[x].ch[0], v) + t[t[x].ch[1]].s + 1;\n\telse return query(t[x].ch[1], v);\n}\n\n\nint main(){\n\trd(), n = rd(), rd(), rd(), val[1] = rd();\n\trtlr[0] = rtlr[1] = 1;\n\tprintf(\"0\\n\");\n\tinsrt(rt1[0], val[1]), insrt(rt1[1], val[1]);//rt1/2[0]\u7ef4\u62a4\u5de6\u8fb9\u7684\u5206\u652f \n\tinsrt(rt2[0], val[1]), insrt(rt2[1], val[1]);//rt1/2[1]\u7ef4\u62a4\u53f3\u8fb9\u7684\u5206\u652f \n\tfor(i = 2; i <= n; ++i){\n\t\tf[i] = rd() ^ ans % mod, j = rd(), val[i] = rd();\n\t\tif(f[i] != rtlr[1] and f[i] != rtlr[0]) break;//\u5982\u679c\u6b64\u65f6\u4e0d\u6ee1\u8db3\u53ea\u6709\u4e24\u6761\u94fe\u7684\u5f62\u6001\uff0c\u5c31 break \u6389 \n\t\tadd(i, f[i], j);\n\t\tdis[i] = dis[f[i]] + j;//dis[i] \u4e3a i \u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb \n\t\tfx = (f[i] == rtlr[1])/*\u770b i \u5728\u5de6\u53f3\u54ea\u6761\u94fe\u4e0a*/, rtlr[fx] = i;\n\t\tans += query(rt1[fx], dis[i] - val[i]) + query(rt2[!fx], dis[i] - val[i]); \n\t\tif(dis[i] <= val[1] + val[i]) ans -= 1;//\u51cf\u53bb\u91cd\u590d\u8ba1\u7b97\u7684 \n\t\tinsrt(rt1[fx], dis[i] + val[i]), insrt(rt2[fx], val[i] - dis[i]);//rt1\u548crt2\u5206\u522b\u63d2\u5165\u4e0d\u540c\u7684\u503c\uff0c\u8f85\u52a9\u6c42\u89e3\u7b54\u6848 \n\t\tprintf(\"%lld\\n\", ans); \n\t} \n}\n```\n\n## \u4e8c\n\n\u7136\u540e\u6211\u4eec\u518d\u6765\u8003\u8651\u5f53\u6811\u7684\u5f62\u6001\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u8981\u6c42\u65f6\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![2](https://img-blog.csdnimg.cn/d43aa4ebda234b70975d85ad1e39fa62.png#pic_center)\n\n### 1. \u6c42\u89e3\u7b54\u6848\n\n\u9762\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8981\u7ef4\u62a4\u4e24\u68f5\u5e73\u8861\u6811\uff1a\n\n\u4e00\u68f5\u7528\u4e8e\u8bb0\u5f55\u4ee5\u5f53\u524d\u8282\u70b9 $i$ \u4e3a\u6839\u7684\u6811\u5185\u6bcf\u4e2a\u5b50\u8282\u70b9 $j$ \u7684 $r_j-dist(j, fa_i)$ \u7684\u503c\uff0c\u8fd9\u68f5\u5e73\u8861\u6811\u7684\u6839\u7684\u7f16\u53f7\u8bb0\u4e3a $ms_i$\uff1b\n\n\u4e00\u68f5\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u8282\u70b9 $i$\uff0c\u5b83\u5176\u4e2d\u4e00\u4e2a\u513f\u5b50 $j$\uff0c$j$ \u5b50\u6811\u5185\u7684\u6240\u6709\u5b50\u8282\u70b9 $k$ \u7684 $r_k-dist(k,i)$ \u7684\u503c\uff0c\u8bb0\u4e3a $gs_i$\uff08\u6ce8\u610f $gs_i$ \u4e2d\u5e76\u6ca1\u6709\u8bb0\u5f55 $i$ \u7684\u76f4\u63a5\u513f\u5b50 $j$ \u7684\u4fe1\u606f\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u518d\u53bb\u7ef4\u62a4\u5b83\u5206\u522b\u5230\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u7684\u7956\u5148\u7684\u8ddd\u79bb\uff0c\u5bf9\u4e8e\u7b2c $k$ \u5c42\u7684\u7956\u5148\uff0c\u8282\u70b9 $i$ \u5230\u5b83\u7684\u8ddd\u79bb\u8bb0\u4e3a $adis_{k,i}$\u3002\n\n\u7136\u540e\u6211\u4eec\u8bd5\u7740\u53bb\u6c42\u4e00\u4e0b\u5bf9\u4e8e\u65b0\u589e\u7684\u4e00\u4e2a\u8282\u70b9 $i$\uff0c\u6700\u7ec8\u7b54\u6848\u662f\u591a\u5c11\u3002\n\n\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n```cpp\n\tfor(k = dep[f[i]], l = f[i], o = i; l; k--, o = l, l = f[l])\n\t\tu = adis[k][i] - val[i],\n\t\tans += query(gs[l], u) - query(ms[o], u);\n```\n\n\u6211\u4eec\u4ece\u4e0b\u5f80\u4e0a\u53bb\u904d\u5386\u6bcf\u4e00\u4e2a\u7956\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7956\u5148\uff0c\u6211\u4eec\u5229\u7528\u521a\u521a\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u4e24\u68f5\u5e73\u8861\u6811\u8fdb\u884c\u6c42\u89e3\u7b54\u6848\u3002\n\n### 2. \u6dfb\u52a0\u65b0\u8282\u70b9\n\n\u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u8fd9\u68f5\u6811\u5185\u3002\n\n\u9996\u5148\uff0c\u80af\u5b9a\u662f\u6309\u7167\u521a\u521a\u6c42\u7b54\u6848\u90a3\u6837\uff0c\u4ece\u4e0b\u5f80\u4e0a\u53bb\u904d\u5386\u7956\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7956\u5148\uff0c\u6211\u4eec\u5206\u522b\u5728\u5b83\u7684\u4e24\u68f5\u5e73\u8861\u6811\u5185\u63d2\u5165\u65b0\u8282\u70b9\u7684\u4fe1\u606f\u5373\u53ef\u3002\n\n\u4f46\u662f\u5982\u679c\u5355\u5355\u53ea\u662f\u8fd9\u6837\uff0c\u6811\u7684\u6df1\u5ea6\u5c31\u53ef\u80fd\u4f1a\u65e0\u6b62\u5883\u5730\u589e\u52a0\uff0c\u8fd9\u7edd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\n\n~~\u6240\u4ee5\u8fd9\u65f6\u5019\u5c31\u8981\u8bf7\u51fa\u66ff\u7f6a\u7f8a\u6811\u4e86\uff01~~ \u6211\u4eec\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u8def\uff0c\u5728\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386\u7956\u5148\u7684\u540c\u65f6\uff0c\u53bb\u68c0\u67e5\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u6709\u6ca1\u6709\u8d85\u8fc7\u5176\u7236\u4eb2\u5b50\u6811\u5927\u5c0f\u7684 0.88 \u500d\u3002\n\n\u5982\u679c\u6709\uff0c\u5c31\u628a\u5b83\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5c31\u5bf9\u5b83\u8fdb\u884c\u91cd\u6784\u3002\n\n\u91cd\u6784\u4e00\u68f5\u6811\u7684\u6b65\u9aa4\uff1a\n\n1. \u201c\u62cd\u6241\u201d\u8fd9\u68f5\u6811\uff0c\u7136\u540e\u9009\u51fa\u4e00\u4e2a\u5927\u5c0f\u521a\u521a\u597d\u8d85\u8fc7\u6216\u7b49\u4e8e\u603b\u8282\u70b9\u6570\u4e00\u534a\u7684\u8282\u70b9\uff0c\u628a\u5b83\u5f53\u505a\u65b0\u6839\u3002\n\n2. \u5bf9\u4e8e\u8fd9\u4e2a\u65b0\u6839\uff0c\u6211\u4eec\u53bb\u5efa\u7acb\u5b83\u7684\u65b0\u5e73\u8861\u6811\uff0c\u7136\u540e\u5bf9\u5b83\u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\uff0c\u91cd\u590d\u7b2c 1 \u548c 2 \u6b65\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u7ed3\u675f\u4e86\uff0c\u590d\u6742\u5ea6\u53ef\u8fc7\u3002\n\n\u867d\u7136~~\u53e3\u80e1~~\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u8fd8\u662f\u9700\u8981\u6ce8\u610f\u5f88\u591a\u7ec6\u8282\u7684\u3002\n\n# Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\nconst int maxn = 1e5 + 5;\nconst int mod = 1000000000;\n\ninline int rd(){\n\tint x = 1, s = 0;\n\tchar ch = getchar();\n\twhile(ch < '0' or ch > '9'){\n\t\tif(ch == '-') x = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' and ch <= '9')\n\t\ts = s * 10 + ch - '0', ch = getchar();\n\treturn s * x;\n}\n\nstruct tree{\n\tint s, a;\n\tint ch[2];\n}t[maxn * 200];\nbool fx;\nint rt1[2], rt2[2], rtlr[2];\nint n, m, i, j, k, l, o, u, v;\nint val[maxn], f[maxn];\nint cnt, hd[maxn];\nstruct edge{\n\tint to, nxt, w;\n}e[maxn << 1];\nint tsiz[maxn], siz[maxn], in[maxn], id[maxn];\nint gs[maxn], ms[maxn];\nint dep[maxn], dis[maxn], adis[100][maxn];\nint pre[maxn], he, ta, que[maxn];\nint tot;\nll ans;\n\ninline void add(int u, int v, int w){\n\te[++cnt] = (edge){v, hd[u], w}, hd[u] = cnt;\n\te[++cnt] = (edge){u, hd[v], w}, hd[v] = cnt;\n}\n\ninline void rotate(int &x, int k){\n\tint y = t[x].ch[k];\n\tt[x].ch[k] = t[y].ch[!k], t[y].ch[!k] = x;\n\tt[y].s = t[x].s, \n\tt[x].s = t[t[x].ch[1]].s + t[t[x].ch[0]].s + 1;\n\tx = y;\n}\n\ninline void insrt(int &x, int v){\n\tif(!x){\n\t\tx = ++tot;\n\t\tt[x].s = 1, t[x].a = v;\n\t\treturn;\n\t}\n\tbool k = (v >= t[x].a);\n\tinsrt(t[x].ch[k], v), t[x].s += 1;\n\tif(t[x].s * 0.8 < t[t[x].ch[k]].s) \n\t\trotate(x, k);\n}\n\ninline int query(int x, int v){\n\tif(!x) return 0;\n\tif(v <= t[x].a) \n\t\treturn query(t[x].ch[0], v) + t[t[x].ch[1]].s + 1;\n\telse return query(t[x].ch[1], v);\n}\n\ninline int fndrt(int x, int tdep, int tdis, int fa){\n\tint i, j, k;\n\the = ta = 0;\n\tque[ta++] = x, dis[x] = tdis;\n\tpre[x] = 0;\n\twhile(he != ta){\n\t\ti = que[he++];\n\t\tdep[i] = tdep + 1, tsiz[i] = 1;\n\t\tfor(j = hd[i]; j; j = e[j].nxt){\n\t\t\tk = e[j].to;\n\t\t\tif(k != pre[i] and dep[k] >= tdep)\n\t\t\t\tque[ta++] = k, pre[k] = i, \n\t\t\t\tdis[k] = dis[i] + e[j].w;\n\t\t}\n\t\tif(tdep) adis[tdep - 1][i] = dis[i];\n\t}\n\tfor(i = ta - 1; i >= 0; --i){\n\t\tk = pre[que[i]];\n\t\ttsiz[k] += tsiz[que[i]];\n\t\tif(tsiz[que[i]] * 2 >= ta) break;\n\t}\n\tj = que[i], f[j] = fa, siz[j] = ta, dep[j] = tdep;\n\tif(tdep) in[j] = x, id[j] = tdis;\n\telse in[j] = id[j] = 0;\n\treturn j;\n}\n\ninline void build(int x){\n\tint i, j, k, l, o;\n\tadis[dep[x]][x] = gs[x] = 0;\n\tinsrt(gs[x], val[x]);\n\tfor(i = hd[x], j = e[i].to; i; i = e[i].nxt, j = e[i].to){\n\t\tif(dep[j] < dep[x]) continue;\n\t\tk = fndrt(j, dep[x] + 1, e[i].w, x);\n\t\tms[k] = 0;\n\t\tfor(l = 0; l < siz[k]; ++l){\n\t\t\to = que[l];\n\t\t\tinsrt(gs[x], val[o] - dis[o]);\n\t\t\tinsrt(ms[k], val[o] - dis[o]);\n\t\t}\n\t\tbuild(k);\n\t}\n}\n\ninline void calc(int i){\n\tadd(i, f[i], j);\n\tdep[i] = dep[f[i]] + 1, siz[i] = 1, \n\tin[i] = i, id[i] = j;\n\tinsrt(gs[i], val[i]);\n\tfor(k = 0; k < dep[i]; ++k) \n\t\tadis[k][i] = adis[k][f[i]] + j;\n\tfor(k = dep[f[i]], l = f[i], o = i; l; k--, o = l, l = f[l])\n\t\tu = adis[k][i] - val[i],\n\t\tans += query(gs[l], u) - query(ms[o], u);\n\tprintf(\"%lld\\n\", ans);\n\tfor(k = dep[f[i]], v = 0, l = f[i], o = i; l; k--, o = l, l = f[l]){\n\t\tu = val[i] - adis[k][i];\n\t\tinsrt(gs[l], u), insrt(ms[o], u);\n\t\tsiz[l] += 1;\n\t\tif(siz[l] * 0.88 < siz[o]) v = l;\n\t}\n\tif(v){\n\t\tif(dep[v]) u = fndrt(in[v], dep[v], id[v], f[v]);\n\t\telse u = fndrt(1, 0, 0, 0);\n\t\tms[u] = ms[v], ms[v] = 0;\n\t\tbuild(u); \n\t}\n}\n\nint main(){\n\trd(), n = rd(), rd(), rd(), val[1] = rd();\n\trtlr[0] = rtlr[1] = 1;\n\tprintf(\"0\\n\");\n\tinsrt(rt1[0], val[1]), insrt(rt1[1], val[1]);\n\tinsrt(rt2[0], val[1]), insrt(rt2[1], val[1]);\n\tfor(i = 2; i <= n; ++i){\n\t\tf[i] = rd() ^ ans % mod, j = rd(), val[i] = rd();\n\t\tif(f[i] != rtlr[1] and f[i] != rtlr[0]) break;\n\t\tadd(i, f[i], j);\n\t\tdis[i] = dis[f[i]] + j;\n\t\tfx = (f[i] == rtlr[1]), rtlr[fx] = i;\n\t\tans += query(rt1[fx], dis[i] - val[i]) + query(rt2[!fx], dis[i] - val[i]); \n\t\tif(dis[i] <= val[1] + val[i]) ans -= 1;\n\t\tinsrt(rt1[fx], dis[i] + val[i]), insrt(rt2[fx], val[i] - dis[i]);\n\t\tprintf(\"%lld\\n\", ans); \n\t} \n\tif(i > n) return 0;\n\tfor(k = 1; k <= tot; ++k) \t\n\t\tt[k].ch[0] = t[k].ch[1] = 0;\n\ttot = 0, memset(dis, 0, sizeof dis);\n\tk = fndrt(1, 0, 0, 0), build(k);\n\tfor(calc(i), i += 1; i <= n; ++i)\n\t\tf[i] = rd() ^ ans % mod, j = rd(), val[i] = rd(), calc(i);\n\treturn 0;\n}\n```\n\n\n------------\n\u611f\u8c22\u9605\u8bfb\u3002\n\n\u8f9b\u82e6\u7ba1\u7406\u5458\u5ba1\u6838\uff0c\u82e5\u6709\u95ee\u9898\u70e6\u8bf7\u6307\u51fa\u3002",
        "postTime": 1654147438,
        "uid": 469672,
        "name": "\u4f0d\u53c1\u58f9",
        "ccfLevel": 7,
        "title": "\u3010LG-P3920/WC2014\u3011 \u7d2b\u8346\u82b1\u4e4b\u604b"
    },
    {
        "content": "\u8981\u6c42\u7ef4\u62a4\u4e00\u9897\u5e26\u8fb9\u6743\u548c\u70b9\u6743 $r$ \u7684\u6811\uff0c\u652f\u6301\u52a8\u6001\u63d2\u5165\u53f6\u5b50 \u4ee5\u53ca \u8be2\u95ee\u6811\u4e0a\u6709\u591a\u5c11\u70b9\u5bf9\u6ee1\u8db3\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\u4e4b\u548c\u5927\u4e8e\u4e24\u70b9\u95f4\u7684\u8fb9\u6743\u4e4b\u548c\uff0c\u5373 $\\forall i < j,r_i+r_j \\geq \\operatorname{dis}(i,j)$\u3002\n\n\u5f3a\u5236\u5728\u7ebf\u3002\n\n$1\\leq$ \u70b9\u6570 $\\leq 10^5$\uff0c$1 \\leq$ \u8fb9\u6743 $\\leq 10^4$\uff0c$1 \\leq $ \u70b9\u6743 $\\leq 10^9$\u3002\n\n#### std\n\n\u5148\u4e0d\u8003\u8651\u52a8\u6001\u63d2\u5165\u53f6\u5b50\uff0c\u5373\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6c42\u51fa\u7b54\u6848\u3002\n\n\u6309\u7167\u5957\u8def\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5927\u89c4\u6a21\u6811\u4e0a\u8def\u5f84\u95ee\u9898\uff0c\u8003\u8651\u70b9\u5206\u6cbb\u3002\n\n\u8003\u8651\u8be2\u95ee\uff0c\u7531\u4e8e\u70b9\u5206\u6cbb\u53ea\u7edf\u8ba1\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u8bbe\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u4e3a $g$\uff0c\u4e00\u6761\u7ecf\u8fc7 $g$ \u7684\u8def\u5f84 $(u,v)$ \u53ef\u5206\u4e3a $(u,g)$ \u548c $(g,v)$ \u4e24\u6bb5\uff0c\u90a3\u4e48 $\\operatorname{dis}(u,v)=\\operatorname{dis}(u,g)+\\operatorname{dis(g,v)}$\u3002\n\n\u8003\u8651\u5230\u539f\u5f0f\u53ef\u79fb\u9879\u4e3a $r_u-\\operatorname{dis}(u,g)\\leq \\operatorname{dis}(g,v)-r_v$\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\u548c\u6c42\u6392\u540d\u64cd\u4f5c\u7ef4\u62a4\u8282\u70b9 $g$ \u7684\u6240\u6709 $\\operatorname{dis}(g,v)-r_v$\uff0c\u67e5\u8be2 $r_u-\\operatorname{dis}(u,g)$ \u7684\u6392\u540d\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u591a\u6b21\u70b9\u5206\u6cbb\uff0c\u53ef\u7528\u70b9\u5206\u6811\u4f18\u5316\u3002\n\n\u518d\u8003\u8651\u52a8\u6001\u63d2\u5165\u53f6\u5b50\u600e\u4e48\u505a\u3002\n\n\u663e\u7136\uff0c\u5b9a\u671f\u91cd\u6784\u90e8\u5206\u70b9\u5206\u6811\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n \\sqrt n \\log^2n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace Fread\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S, *T;\n    inline char getchar()\n    {\n        if (S == T)\n        {\n            T = (S = buf) + fread(buf, 1, SIZE, stdin);\n            if (S == T)\n                return '\\n';\n        }\n        return *S++;\n    }\n}\n\nnamespace Fwrite\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S = buf, *T = buf + SIZE;\n    inline void flush()\n    {\n        fwrite(buf, 1, S - buf, stdout);\n        S = buf;\n    }\n    inline void putchar(char c)\n    {\n        *S++ = c;\n        if (S == T)\n            flush();\n    }\n    struct NTR\n    {\n        ~NTR()\n        {\n            flush();\n        }\n    } ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\n#define ll long long\n\ninline ll read()\n{\n    ll x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n        x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\ninline void write(ll x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\n\nconst int _ = 1e5 + 10, S = 350, inf = 1e7 + 10;\n\nconst double alpha = 0.95;\n\nint n, r[_];\n\nint sz[_];\n\nbool vis[_];\n\nint tot, head[_], to[_ << 1], nxt[_ << 1];\n\nll lst;\n\ninline void add(int u, int v)\n{\n    to[++tot] = v;\n    nxt[tot] = head[u];\n    head[u] = tot;\n}\n\ninline pair<int, int> get_rt(int rt, int f, int pre)\n{\n    sz[rt] = 1;\n    int mx = 0;\n    pair<int, int> ans = {inf, 0};\n    for (int i = head[rt]; i; i = nxt[i])\n    {\n        int v = to[i];\n        if (vis[v] || v == f)\n            continue;\n        ans = min(ans, get_rt(v, rt, pre));\n        sz[rt] += sz[v];\n        mx = max(mx, sz[v]);\n    }\n    ans = min(ans, {max(mx, pre - sz[rt]), rt});\n    return ans;\n}\n\nstruct DIS\n{\n    int f[_][17], dep[_], dis[_];\n    inline void insert(int x, int fa, int c)\n    {\n        f[x][0] = fa;\n        dep[x] = dep[fa] + 1;\n        dis[x] = dis[fa] + c;\n        for (int i = 1; i <= 16; ++i)\n            f[x][i] = f[f[x][i - 1]][i - 1];\n    }\n    inline int LCA(int x, int y)\n    {\n        if (dep[x] < dep[y])\n            swap(x, y);\n        for (int i = 16; ~i; --i)\n            if (dep[f[x][i]] >= dep[y])\n                x = f[x][i];\n        if (x == y)\n            return x;\n        for (int i = 16; ~i; --i)\n            if (f[x][i] != f[y][i])\n                x = f[x][i], y = f[y][i];\n        return f[x][0];\n    }\n    inline int Dis(int x, int y)\n    {\n        return dis[x] + dis[y] - 2 * dis[LCA(x, y)];\n    }\n} bz;\n\nstruct ABC\n{\n    vector<int> a, b;\n    inline void insert(int x)\n    {\n        b.insert(lower_bound(b.begin(), b.end(), x), x);\n        if (b.size() >= S)\n        {\n            vector<int> c, d;\n            int i = 0, j = 0;\n            for (; i < a.size() && j < b.size();)\n                if (a[i] < b[j])\n                    c.push_back(a[i++]);\n                else\n                    c.push_back(b[j++]);\n            while (i < a.size())\n                c.push_back(a[i++]);\n            while (j < b.size())\n                c.push_back(b[j++]);\n            swap(a, c);\n            swap(b, d);\n        }\n    }\n    inline int rank(int x)\n    {\n        return (upper_bound(a.begin(), a.end(), x) - a.begin()) + (upper_bound(b.begin(), b.end(), x) - b.begin()) - 2;\n    }\n    inline void clear()\n    {\n        a.clear();\n        b.clear();\n    }\n} pa[_ << 1], pb[_ << 1];\n\nstruct D_F_Z\n{\n    int f[_], dep[_], siz[_];\n    inline int query(int x, int r)\n    {\n        int ans = 0;\n        for (int i = x, j; f[i]; i = j)\n        {\n            j = f[i];\n            int dis = r - bz.Dis(x, j);\n            ans += pa[j].rank(dis) - pb[i].rank(dis);\n        }\n        return ans;\n    }\n    inline void insert(int x, int v, int Rt)\n    {\n        pa[x].insert(-v);\n        for (int i = x, j; i != Rt; i = j)\n        {\n            j = f[i];\n            int dis = bz.Dis(x, j) - v;\n            if (j != Rt)\n                pa[j].insert(dis);\n            pb[i].insert(dis);\n        }\n    }\n    inline void clear(int x, int fa, int deps)\n    {\n        vis[x] = 0;\n        for (int i = head[x]; i; i = nxt[i])\n        {\n            int v = to[i];\n            if (v == fa || dep[v] <= deps)\n                continue;\n            clear(v, x, deps);\n        }\n    }\n    inline int build(int x, int pre, int fa, int Rt)\n    {\n        int rt = get_rt(x, 0, pre).second, bas = sz[x];\n        pa[rt].clear();\n        pb[rt].clear();\n        f[rt] = fa;\n        siz[rt] = vis[rt] = 1;\n        dep[rt] = dep[fa] + 1;\n        insert(rt, r[rt], Rt);\n        for (int i = head[rt]; i; i = nxt[i])\n        {\n            int v = to[i];\n            if (vis[v])\n                continue;\n            siz[rt] += build(v, bas, rt, Rt);\n        }\n        return siz[rt];\n    }\n    inline void rebuild(int x)\n    {\n        if (!x)\n            return;\n        clear(x, 0, dep[x]);\n        build(x, siz[x], f[x], f[x]);\n    }\n    inline void insert(int x, int v)\n    {\n        pa[x].insert(-v);\n        siz[x]++;\n        int Rt = 0;\n        for (int i = x, j; f[i]; i = j)\n        {\n            j = f[i];\n            int dis = bz.Dis(x, j) - v;\n            siz[j]++;\n            pa[j].insert(dis);\n            pb[i].insert(dis);\n            if (siz[i] > siz[j] * alpha)\n                Rt = j;\n        }\n        rebuild(Rt);\n    }\n} t;\n\nsigned main()\n{\n    read(), n = read();\n    for (int i = 1; i <= n; i++)\n    {\n        vis[i] = 1;\n        int fa = read() ^ lst % 1000000000, c = read();\n        r[i] = read();\n        bz.insert(i, fa, c);\n        if (i > 1)\n        {\n            add(fa, i);\n            add(i, fa);\n        }\n        t.f[i] = fa;\n        t.dep[i] = t.dep[fa] + 1;\n        write(lst += t.query(i, r[i]));\n        t.insert(i, r[i]);\n        putchar('\\n');\n    }\n    return 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1647300102,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P3920 [WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b"
    },
    {
        "content": "\u4e45\u4ef0\u5927\u540d\u3002\n\n[\u539f\u9898](https://www.luogu.com.cn/problem/P3920)\n\n\u9996\u5148\uff0c\u5f3a\u5236\u5728\u7ebf\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u5e76\u5224\u65ad\u6709\u51e0\u4e2a\u70b9\u8ddf\u5b83\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u6ce8\u610f\u5230\u6761\u4ef6\u662f $dis$ \uff0c\u4e8e\u662f\u60f3\u5230\u70b9\u5206\u6811\u3002\n\n\u5047\u5982\u5f53\u524d\u52a0\u5165\u70b9\u4e3a $\\alpha$\uff0c\u5b83\u8ddf $\\beta$ \u6ee1\u8db3\u6761\u4ef6\uff0c\u5b83\u4eec\u5728\u70b9\u5206\u6811\u4e0a\u7684 $\\text{lca}$ \u4e3a $x$\uff0c\u90a3\u4e48\u6709 \n\n$$dis(\\alpha,x)+dis(x,\\beta)\\le r_{\\alpha}+r_{\\beta}$$\n\n$$dis(x,\\beta)-r_{\\beta}\\le r_{\\alpha}-dis(\\alpha,x)$$\n\n\u52a0\u5165 $\\alpha$ \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u5b83\u7684\u6bcf\u4e00\u4e2a\u70b9\u5206\u6811\u4e0a\u7956\u5148 $x$\uff0c\u53f3\u8fb9\u90a3\u90e8\u5206\u90fd\u662f\u786e\u5b9a\u7684\u3002\n\n\u6240\u4ee5\u53ea\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5206\u6811\u4e0a\u7684\u70b9\uff0c\u7ef4\u62a4\u4e00\u4e2a\u652f\u6301\u63d2\u5165\uff0c\u6c42\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u6570\u7684\u70b9\u7684\u6570\u91cf\u7684\u6570\u636e\u7ed3\u6784\u5c31\u597d\u4e86\u3002\u52a0\u5165\u70b9\u7684\u65f6\u5019\u628a $dis(x,\\alpha)-r_{\\alpha}$ \u4f5c\u4e3a\u6743\u503c\u52a0\u5165\u5230\u5b83\u7684\u7956\u5148\u91cc\u53bb\u5c31\u597d\u4e86\u3002\n\n\u56e0\u4e3a\u503c\u57df\u5f88\u5927\u5e76\u4e14\u4e0d\u80fd\u79bb\u6563\u5316\uff0c\u653e\u5f03\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6539\u6210\u5e73\u8861\u6811\u3002\uff08\u4e0d\u7136\u7a7a\u95f4\u5927\u6982\u4f1a\u6b7b\u7684\u5f88\u60e8\u5427\uff09\n\n\u5f53\u7136\uff0c\u9700\u8981\u4e00\u4e2a\u5957\u8def\u7684\u5bb9\u65a5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5206\u6811\u4e0a\u7684\u70b9 $x$ \uff0c\u518d\u7ef4\u62a4\u4e00\u4e0b\u5b83\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6240\u6709\u5b50\u6811\u4e0a\u70b9 $\\alpha$ \u548c\u5230\u5176\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2 $\\beta$ \uff0c\u8fd8\u6709\u4e00\u68f5\u5bb9\u65a5\u6240\u9700\u8981\u7684\uff0c\u4ee5 $dis(\\alpha,\\beta)-r_{\\alpha}$ \u4e3a\u6743\u503c\u7684\u5e73\u8861\u6811\uff0c\u4ece\u800c\u5728\u8df3\u7956\u5148\u7684\u65f6\u5019\u51cf\u53bb\u5f53\u524d\u5b50\u6811\u7684\u8d21\u732e\u3002\n\n\u7136\u540e\uff0c\u7531\u4e8e\u8fd1\u671f\u6d1b\u8c37\u8bc4\u6d4b\u59ec\u6027\u80fd\u663e\u8457\u63d0\u9ad8\uff0c**FHQ\u6d3b\u4e86\uff01**\n\n\u6c42 $dis$ \u7684\u65f6\u5019\u9700\u8981 $\\text{lca}$ \uff0c\u8fd9\u4e2a\u5982\u679c\u4f60\u5403\u5f97\u7279\u522b\u6491\u7684\u8bdd\u53ef\u4ee5\u5199 $\\text{LCT}$ \uff0c\u4f46\u662f\u4f30\u8ba1\u4e5f\u4f1a\u6b7b\u7684\u5f88\u60e8\u3002\u5b9e\u9645\u4e0a\u65b0\u52a0\u5165\u4e00\u4e2a\u53f6\u5b50\uff0c\u5b83\u7684\u500d\u589e\u6570\u7ec4\u662f\u5f88\u597d\u7ef4\u62a4\u7684\u3002\u6240\u4ee5\u500d\u589e\u5c31\u597d\u4e86\u3002 \n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4ee4\u4eba\u60b2\u75db\u7684\u95ee\u9898\uff1a\u70b9\u5206\u6811\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a\u7684\u8df3\u7956\u5148\u662f\u56e0\u4e3a\u5b83\u6811\u9ad8\u662f $\\log$ \u7684\uff0c\u6211\u4eec\u8fd9\u4e2a\u5e26\u63d2\u5165\u7684\u8bdd\uff0c\u6811\u9ad8\u8981\u600e\u4e48\u4fdd\u8bc1\u554a\uff1f\n\n**\u50cf\u66ff\u7f6a\u7f8a\u90a3\u6837\uff0c\u5982\u679c\u51fa\u73b0\u4e00\u4e2a\u7279\u522b\u4e0d\u5e73\u8861\u7684\u5b50\u6811\uff0c\u5c06\u5176\u91cd\u6784\u3002**\n\n\u4e8e\u662f\u68b3\u7406\u4e00\u4e0b\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u52a0\u5165\u7684\u70b9\uff0c\u627e\u5230\u5b83\u7684\u7236\u4eb2\u5728\u70b9\u5206\u6811\u4e0a\u7684\u4f4d\u7f6e\uff0c\u4e00\u8def\u4e0a\u8df3\u66f4\u65b0\u5176\u7956\u5148\u7684\u5e73\u8861\u6811\u3002\n\n\u540c\u65f6\uff0c\u66f4\u65b0\u5b83\u7684\u7956\u5148\u4eec\u5728\u70b9\u5206\u6811\u4e0a\u7684 $size$ \uff0c\u5e76\u8bb0\u5f55\u4e0b\u6700\u9ad8\u7684\uff0c\u9700\u8981\u88ab\u91cd\u6784\u7684\u4f4d\u7f6e\u3002\n\n\u5982\u679c\u9700\u8981\u91cd\u6784\u7684\u8bdd\uff0c\u5148\u628a\u5b83\u7684 $\\alpha$ \u679a\u4e3e\u4e00\u4e0b\uff0c\u6e05\u6389\u8fd9\u4e9b\u70b9\u7684\u5e73\u8861\u6811\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u9700\u8981\u5783\u573e\u56de\u6536\u3002\u540c\u65f6\uff0c\u8bb0\u5f55\u8fd9\u4e9b\u70b9\u201c\u9700\u8981\u88ab\u91cd\u6784\u201d\u3002\n\n\u7136\u540e\u5c31\u50cf\u4e00\u68f5\u6b63\u5e38\u7684\u70b9\u5206\u6811\u90a3\u6837\uff0c\u628a\u8fd9\u4e9b\u70b9\u5efa\u8d77\u6765\u5c31\u597d\uff0c\u91cd\u65b0\u8ba1\u7b97\u5b83\u4eec\u7684 $\\alpha,\\beta$\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u5e73\u8861\u6811\u3002\u6700\u540e\u5c06\u8fd9\u4e9b\u70b9\u6240\u6210\u7684\u6811\u7684\u6839\u7684 $\\beta$ \u6807\u4e3a\u539f\u6765\u7684\uff0c\u8fd9\u4e9b\u70b9\u6240\u6210\u7684\u6811\u7684\u6839\u7684 $\\beta$\u3002\n\n\u5176\u4f59\u4e0d\u9700\u8981\u88ab\u91cd\u6784\u7684\u70b9\uff0c\u5b83\u4eec\u6240\u7ef4\u62a4\u597d\u7684\u4e1c\u897f\u4e0d\u9700\u8981\u6539\u53d8\u3002\n\n\u81f3\u4e8e\u6c42\u6bcf\u4e2a\u70b9\u91cd\u513f\u5b50\u7684\u5927\u5c0f\uff0c\u7531\u4e8e\u53ea\u6709\u52a0\u70b9\u6ca1\u6709\u5220\u70b9\uff0c\u4e0d\u9700\u8981\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u6b21\u6539 $size$ \u7684\u65f6\u5019\u5c1d\u8bd5\u66f4\u65b0\u5b83\u7236\u4eb2\u7684\u91cd\u513f\u5b50\u5927\u5c0f\u5c31\u597d\u4e86\u3002\n\n\u7531\u4e8e\u91cd\u6784\u70b9\u5206\u6811\u7684\u4ee3\u4ef7\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u9700\u8981\u628a\u5e73\u8861\u56e0\u5b50\u8c03\u5927\u4e00\u70b9\uff0c\u5927\u6982\u5728 $0.8$ \u5230 $0.9$ \u5de6\u53f3\u3002\u4eb2\u6d4b $0.7$ \u5de6\u53f3\u6548\u679c\u6b20\u4f73\u3002\n\n**\u5199\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4fdd\u6301\u5934\u8111\u6e05\u9192\u3002\u6216\u8005\u8bf4\uff0c\u7b49\u5230\u72b6\u6001\u597d\u7684\u65f6\u5019\u518d\u6765\u5199\u8fd9\u4e2a\u3002**\n\n\u5269\u4e0b\u7684\uff0c\u89c1\u4ee3\u7801\u3002\n\n```\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <vector>\n\ntypedef long long ll;\nconst int maxn = 1e5 + 5,mod = 1e9;\n\ntemplate<typename T>\ninline void swap(T &a,T &b){\n\tT temp=a;a=b;b=temp;\n}\n\ntemplate<typename T>\ninline T max(const T &a,const T &b){\n\treturn a>b?a:b;\n}\n\nint n;ll RM[maxn],answer;\n\nstruct IO{\n\tIO(){};char c;\n\tinline char gc(){\n\t\tstatic char buf[maxn],*p1=buf,*p2=buf;\n\t\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,maxn,stdin),p1==p2)?EOF:*p1++;\n\t}\n\ttemplate<typename T>\n\tinline IO&operator>>(T &_){\n\t\t_=0;bool f=1;c=gc();while(c<'0'||c>'9'){if(c=='-') f=0; c=gc();}\n\t\twhile(c>='0'&&c<='9'){_=_*10+c-48;c=gc();}if(!f) _=-_;return *this;\n\t}\n\ttemplate<typename T>\n\tinline IO&operator<<(T x){\n\t\tif(!x){putchar(48);putchar('\\n');return *this;}\n\t\tstatic int wt[40],len;len=0;if(x<0){putchar('-');x=-x;}\n\t\tfor(;x;x/=10){wt[++len]=x%10;}\n\t\twhile(len){putchar(wt[len--]+48);}\n\t\tputchar('\\n');return *this;\n\t}\n}io;\n\nnamespace Tree{\n\tstruct edge{\n\t\tint v,nxt;ll w;\n\t}e[maxn<<1];\n\tint S,fir[maxn],edge_cnt;\n\tinline void add_edge(int u,int v,ll w){\n\t\te[++edge_cnt].nxt=fir[u];e[edge_cnt].v=v,e[edge_cnt].w=w;fir[u]=edge_cnt;\n\t}\n\tint anc[maxn][21];ll dis[maxn];int dep[maxn];\n\tconst int lim = 20;\n\tvoid insert(int fa,ll w){\n\t\tanc[++S][0]=fa;dis[S]=dis[fa]+w,dep[S]=dep[fa]+1;\n\t\tadd_edge(fa,S,w),add_edge(S,fa,w);\n\t\tfor(int i=1;i<=lim;i++) anc[S][i]=anc[anc[S][i-1]][i-1];//\u7ef4\u62a4\u500d\u589e\n\t}\n\tint lca(int Alpha,int Beta){\n\t\tif(dep[Alpha]<dep[Beta]) swap(Alpha,Beta);\n\t\tfor(int i=lim;i>=0;i--) if(dep[anc[Alpha][i]]>=dep[Beta]) Alpha=anc[Alpha][i];\n\t\tif(Alpha==Beta) return Alpha;\n\t\tfor(int i=lim;i>=0;i--) if(anc[Alpha][i]!=anc[Beta][i]) Alpha=anc[Alpha][i],Beta=anc[Beta][i];\n\t\treturn anc[Alpha][0];\n\t}\n}\n\nusing namespace Tree;\n\ninline ll El_Psy_Congroo(int Alpha,int Beta){\n\tint Tina=lca(Alpha,Beta);\n\treturn dis[Alpha]+dis[Beta]-2*dis[Tina];\n}\n\n//\u6c42\u4e24\u4e2a\u70b9\u5728\u539f\u6811\u4e0a\u7684\u8ddd\u79bb\n\nnamespace Steins{\n\tstruct gate{\n\t\tstruct node{\n\t\t\t#define null 0\n\t\t\tnode *l,*r;ll val;int size,luck;\n\t\t\tnode()\n\t\t\t{l=r=null;size = 1;luck=rand();}\n\t\t\tvoid push_up(){\n\t\t\t\tsize=(l?l->size:0)+(r?r->size:0)+1;\n\t\t\t}\n\t\t}*rt[maxn],*Alpha,*Beta,*biz[maxn*30],*pt;int top;\n\t\tgate(){pt=(node*)malloc(sizeof(node)*maxn*30);}\n\t\tinline node* Ot(){\n\t\t\tnode *p;if(top) p=biz[top--];else p=pt++;\n\t\t\tp->l=p->r=null,p->size=1,p->luck=rand();return p;\n\t\t}\n\t\tnode* &operator[](const int &id){\n\t\t\treturn rt[id];\n\t\t}\n\t\tvoid split(node *now,ll key,node* &Alpha,node* &Beta){\n\t\t\tif(now==null){Alpha=Beta=null;return ;}\n\t\t\tif(now->val<=key){Alpha=now;split(now->r,key,now->r,Beta);}\n\t\t\telse{Beta=now;split(now->l,key,Alpha,now->l);}\n\t\t\treturn now->push_up();\n\t\t}\n\t\tnode* merge(node *Alpha,node *Beta){\n\t\t\tif(Alpha==null) return Beta;if(Beta==null) return Alpha;\n\t\t\tif(Alpha->luck>=Beta->luck){Alpha->r=merge(Alpha->r,Beta);return Alpha->push_up(),Alpha;}\n\t\t\telse{Beta->l=merge(Alpha,Beta->l);return Beta->push_up(),Beta;}\n\t\t}\n\t\tvoid insert(int id,ll val){\n\t\t\tsplit(rt[id],val,Alpha,Beta);\n\t\t\tnode *W=Ot();W->val=val;\n\t\t\trt[id]=merge(merge(Alpha,W),Beta);\n\t\t}\n\t\tint wonder(int id,ll key){\n\t\t\tsplit(rt[id],key,Alpha,Beta);\n\t\t\tint answer = Alpha?Alpha->size:0;\n\t\t\treturn rt[id]=merge(Alpha,Beta),answer;\n\t\t}\n\t\tvoid Amadues(node* &now){\n\t\t\tif(now==null) return ;\n\t\t\tAmadues(now->l),Amadues(now->r);\n\t\t\tbiz[++top] = now;now = null;\n\t\t}\n\t}Sg,Sg0;\n\tconst double zeta = 0.818;\n\tstd::vector<int> Alpha[maxn];\n\tint cnt=0,Beta[maxn];\tint barrey[maxn];bool Dance[maxn];\n\tint rt,Ms,S;\tint King,Queen;\n\tint dfs_S(int now,int fa){\n\t\tint answer = 1;\n\t\tfor(int i=fir[now];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;if(v==fa||!Dance[v]) continue;\n\t\t\tanswer += dfs_S(v,now);\n\t\t}\n\t\treturn answer ;\n\t}\n\tint dfs_rt(int now,int fa){\n\t\tint answer = 1,result = 0;\n\t\tfor(int i=fir[now];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;if(v==fa||!Dance[v]) continue;\n\t\t\tint tp = dfs_rt(v,now);\n\t\t\tanswer += tp , result = max(result , tp);\n\t\t}\n\t\tif((result=max(result,S-answer))<Ms) Ms=result,rt = now;\n\t\treturn answer ;\n\t}\n\tvoid divide(int now){//\u91cd\u6784\n\t\tAlpha[now].clear();\n\t\tDance[now]=false;barrey[now]=0;Alpha[now].push_back(now);\n\t\tfor(int i=fir[now];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;if(!Dance[v]) continue;\n\t\t\tS=Ms=dfs_S(v,0);dfs_rt(v,0);int Cris = rt;Beta[Cris] = now;\n\t\t\tdivide(rt);barrey[now]=max(barrey[now],(int)Alpha[Cris].size());\n\t\t\tfor(unsigned p=0;p<Alpha[Cris].size();p++) Alpha[now].push_back(Alpha[Cris][p]);\n\t\t}\n\t\tint x = now;\n\t\twhile(x!=Queen){//\u8df3\u5230Queen\uff0c\u4e5f\u5c31\u662f\u88ab\u91cd\u6784\u7684\u5b50\u6811\u7684\u539f\u6765\u7684\u6839\u7684\u7236\u4eb2\u5c31\u4e0d\u7528\u8df3\u4e86\n\t\t\tSg.insert(x,El_Psy_Congroo(x,now)-RM[now]);\n\t\t\tif(Beta[x]) Sg0.insert(x,El_Psy_Congroo(Beta[x],now)-RM[now]);\n\t\t\tx = Beta[x];\n\t\t}\n\t}\n\tvoid rebuild(){\n\t\tfor(unsigned p=0;p<Alpha[King].size();p++){\n\t\t\tint now = Alpha[King][p];\n\t\t\tDance[now]=true;//Dance\u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u5426\u9700\u8981\u88ab\u91cd\u6784\n\t\t\tSg.Amadues(Sg[now]),Sg0.Amadues(Sg0[now]);\n\t\t}\n\t\tMs=S=Alpha[King].size();dfs_rt(King,0);Beta[rt]=Queen;divide(rt);//divide\u4f1a\u81ea\u5df1\u628aDance\u590d\u539f\n\t}\n\tvoid insert(int fa,ll w){\n\t\tif(fa>cnt){printf(\"now:%d fa:%d\\n\",cnt+1,fa);throw;}//\u8c03\u8bd5\u7528\uff0c\u5982\u679cWa\u6389\u4e86\uff0c\u7acb\u523b\u4f1a\u5728\u8fd9\u91cc\u7ed3\u675f\u3002\n\t\tTree::insert(fa,w);int now=++cnt;int x = now;Beta[now] = fa;\n\t\tKing = 0 , Queen = 0;\n\t\twhile(now){\n\t\t\tAlpha[now].push_back(x);\n\t\t\tif(Beta[now]&&barrey[Beta[now]]<Alpha[now].size()) barrey[Beta[now]]=Alpha[now].size();\n\t\t\t//barrey\u5b58\u91cd\u513f\u5b50\u5927\u5c0f\n\t\t\tif((double)barrey[now]>zeta*Alpha[now].size()) King = now,Queen = Beta[now];\n\t\t\tSg.insert(now,El_Psy_Congroo(now,x)-RM[x]);\n\t\t\tif(Beta[now]) Sg0.insert(now,El_Psy_Congroo(Beta[now],x)-RM[x]);\n\t\t\tnow=Beta[now];\n\t\t}\n\t\tif(King) rebuild();\n\t}\n\tvoid Pepper(){\n\t\tint now = cnt;\n\t\tanswer+=Sg.wonder(now,RM[now])-1;//\u51cf\u6389\u81ea\u5df1\n\t\twhile(Beta[now]){\n\t\t\tint Tina = Beta[now];ll tp=RM[cnt]-El_Psy_Congroo(cnt,Tina);\n\t\t\tanswer+=Sg.wonder(Tina,tp)-Sg0.wonder(now,tp);\n\t\t\tnow=Beta[now];\n\t\t}\n\t}\n}\n\nint main(){\n\t// freopen(\"1.in\",\"r\",stdin);freopen(\"Steins;gate\",\"w\",stdout);\n\tsrand(time(null));io>>n>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tll a,c;io>>a>>c>>RM[i];\n\t\ta^=(answer%mod);\n\t\tSteins::insert(a,c);Steins::Pepper();\n\t\tio<<answer;\n\t}\n\treturn 0;\n}\n\n```\n\n\u5728 darkbzoj \u4e0a\u6012\u780d\u6b21\u52a3\u89e3\u3002",
        "postTime": 1607600335,
        "uid": 101984,
        "name": "Rui_R",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u5b9e\u9645\u4e0a\u6bcf\u6b21\u53ea\u9700\u8981\u7edf\u8ba1\u65b0\u52a0\u8fdb\u7684\u7ed3\u70b9\u6709\u591a\u5c11\u5408\u6cd5\u89e3\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c06dist(i,j)dist(i,j)\u5199\u6210dist(i,p)+dist(j,p)dist(i,p)+dist(j,p)\uff0c\u5176\u4e2dp\u662fi\u548cj\u7684LCA\u3002\n\n\n\u90a3\u4e48\uff0c\n\n\ndist(i,j)\u21d4dist(i,p)+dist(j,p)\u21d4ri\u2212dist(i,p)\u2264ri+rj\u2264ri+rj\u2265dist(j,p)\u2212rj\n\ndist(i,j)\u2264ri+rj\u21d4dist(i,p)+dist(j,p)\u2264ri+rj\u21d4ri\u2212dist(i,p)\u2265dist(j,p)\u2212rj\n\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u679a\u4e3e\u65b0\u52a0\u7684\u7ed3\u70b9\u7684\u6240\u6709\u7956\u5148p\uff0c\u8ba1\u7b97\u4ee5p\u4e3aLCA\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9(i,j)(i,j)\u6709\u591a\u5c11\u4e2a\u5373\u53ef\u3002\n\n\n\u8ba1\u7b97\u65f6\uff0c\u5148\u67e5\u8be2pp\u5b50\u6811\u5728\u6dfb\u52a0i\u4e4b\u524d\u6709\u591a\u5c11j\u6ee1\u8db3ri\u2212dist(i,p)\u2265dist(j,p)\u2212rj\uff0c\u518d\u51cf\u53bb\u5176\u4e2dLCA\u4e0d\u662fp\u7684\uff08\u5373\uff0ci\u548cj\u5728p\u7684\u540c\u4e00\u68f5\u5b50\u6811\u91cc\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u8981\u67e5\u8be2\u5728\u8fd9\u68f5\u5b50\u6811\u91cc\u6709\u591a\u5c11j\u6ee1\u8db3\u6b64\u6761\u4ef6\uff09\u3002\n\n\n\u7136\u800c\uff0c\u8981\u9ad8\u6548\u5730\u7ef4\u62a4\u8fd9\u4e2a\u4fe1\u606f\uff0c\u5c31\u9700\u8981\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2aTreap\uff08\u8bb0\u5f55\u6240\u6709\u7684dist(j,p)\u2212rj\uff09\uff0c\u4f46\u8fd9\u6837\u5f53\u6811\u9000\u5316\u4e3a\u94fe\uff0c\u5355\u6b21\u52a0\u5165\u65f6\u95f4\u590d\u6742\u5ea6\u589e\u52a0\u4e3aO(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u589e\u52a0\u4e3aO(n2)\u3002\n\n\n\u4e8e\u662f\uff0c\u501f\u9274\u66ff\u7f6a\u7f8a\u6811\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5728\u67d0\u4e2a\u7ed3\u70b9\u5b50\u6811\u5185\u7684\u70b9\u4e2a\u6570\u5927\u4e8e\u5176\u7236\u4eb2\u5b50\u6811\u5185\u70b9\u7684\u4e2a\u6570\u7684\u03b1\u2208(0,1)\u03b1\u2208(0,1)\u500d\u7684\u65f6\u5019\u66b4\u529b\u91cd\u6784\u5176\u7236\u4eb2\u7684\u5b50\u6811\u3002\u65e2\u7136\u8981\u6c42\u91cd\u6784\u4e4b\u540e\u5c3d\u91cf\u5e73\u8861\uff0c\u7406\u6240\u5f53\u7136\u5730\u9009\u7528\u70b9\u5206\u6cbb\u3002\n\n\n\u8fd9\u6837\uff0c\u4e0a\u9762\u7684\u5206\u6790\u4e2d\u6240\u6709\u7684\u201c\u7236\u4eb2\u201d\u548c\u201c\u7956\u5148\u201d\u90fd\u5e94\u7406\u89e3\u4e3a\u70b9\u5206\u6cbb\u6811\u4e0a\u7684\u7956\u5148\uff08LCA\u5f53\u7136\u4e5f\u662f\uff09\uff0c\u4f46\u662f\u7b54\u6848\u4ecd\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u4e0d\u91cd\u4e0d\u6f0f\u5730\u679a\u4e3e\u4e86\u6240\u6709\u53ef\u80fd\u7684\u70b9\u3002\n\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\uff0c\u8fd8\u8981\u5199\u4e00\u4e2a\u500d\u589eLCA\u4ee5\u67e5\u8be2dist\uff0c\u56e0\u4e3a\u70b9\u5206\u6cbb\u4e4b\u540e\u7684\u7956\u5148\u4e0d\u4e00\u5b9a\u662f\u539f\u6811\u4e0a\u7684\u7956\u5148\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528dep\u76f8\u51cf\u3002\n\n\n\u54e6\uff0c\u8fd8\u6709\uff0c\u8981\u5199\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u6709\u91cd\u6784treap\uff0c\u4e4b\u524d\u7684\u5185\u5b58\u5fc5\u987b\u8981\u91cd\u590d\u5229\u7528\u3002\n\n\n\u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <stack>\n#include <set>\ntypedef long long LL;\nconst int N = 100050;\nint pre[N], to[N * 2], nxt[N * 2], c[N * 2], cnt = 0;\nint r[N];\ninline void add_edge(int x, int y, int v) {\n  nxt[cnt] = pre[x];\n  c[cnt] = v;\n  to[pre[x] = cnt++] = y;\n  nxt[cnt] = pre[y];\n  c[cnt] = v;\n  to[pre[y] = cnt++] = x;\n}\nnamespace Tree{\n  int dep[N], dep2[N], fa[N][17];\n  void insert(int x, int c, int f) {\n    add_edge(x, f, c);\n    dep[x] = dep[fa[x][0] = f] + 1;\n    dep2[x] = dep2[f] + c;\n    for (int i = 1; i < 17; ++i)\n      fa[x][i] = fa[fa[x][i - 1]][i - 1];\n  }\n  int LCA(int x, int y) {\n    if (dep[x] > dep[y]) std::swap(x, y);\n    for (int i = 16; ~i; --i)\n      if (dep[fa[y][i]] >= dep[x])\n        y = fa[y][i];\n    for (int i = 16; ~i; --i)\n      if (fa[x][i] != fa[y][i]) {\n        x = fa[x][i];\n        y = fa[y][i];\n      }\n    return x == y ? x : fa[x][0];\n  }\n  int dis(int x, int y) {\n    int l = LCA(x, y);\n    return dep2[x] + dep2[y] - 2 * dep2[l];\n  }\n};\nstruct Treap;\ntypedef Treap* PTreap;\nstruct Treap{\n  static std::stack<PTreap> bin;\n  PTreap lch, rch;\n  int val, key, cnt, siz;\n  void* operator new(size_t, int v) {\n    Treap *res;\n    res = bin.top();\n    bin.pop();\n    res->val = v; res->key = rand();\n    res->cnt = 1; res->siz = 1;\n    res->lch = res->rch = NULL;\n    return res;\n  }\n  void operator delete(void *t) {\n    bin.push((PTreap)t);\n  }\n  void update() {\n    siz = cnt;\n    if (lch != NULL) siz += lch->siz;\n    if (rch != NULL) siz += rch->siz;\n  }\n  friend void Zig(PTreap &t) { //\u53f3\u65cb\n    PTreap l = t->lch;\n    t->lch = l->rch;\n    l->rch = t;\n    t->update();\n    l->update();\n    t = l;\n  }\n  friend void Zag(PTreap &t) { //\u5de6\u65cb\n    Treap *r = t->rch;\n    t->rch = r->lch;\n    r->lch = t;\n    t->update();\n    r->update();\n    t = r;\n  }\n  friend int query(PTreap o, int x) {\n    if (o == NULL) return 0;\n    if (o->val > x) return query(o->lch, x);\n    else return query(o->rch, x) + (o->lch == NULL ? 0 : o->lch->siz) + o->cnt;\n  }\n  friend void insert(PTreap &o, int x) {\n    if (o == NULL)\n      o = new (x)Treap;\n    else if (o->val == x)\n      ++o->cnt;\n    else if (o->val > x) {\n      insert(o->lch, x);\n      if (o->lch->key > o->key)\n        Zig(o);\n    } else {\n      insert(o->rch, x);\n      if (o->rch->key > o->key)\n        Zag(o);\n    }\n    o->update();\n  }\n  friend void remove(PTreap &x) {\n    if (x == NULL) return;\n    remove(x->lch);\n    remove(x->rch);\n    delete x; x = NULL;\n  }\n};\nstd::stack<PTreap> Treap::bin;\nnamespace Dynamic_TreeDivision{\n  PTreap tree[N], sonTree[N];\n  int time, vise[N * 2];\n  int fa[N], vis[N];\n  std::set<int> son[N];\n  void remove(int x) {\n    vis[x] = time;\n    for (std::set<int>::iterator i = son[x].begin(); i != son[x].end(); ++i) {\n      remove(*i);\n      remove(sonTree[*i]);\n    }\n    son[x].clear();\n    remove(tree[x]);\n  }\n  int getCentre(int x, int f, int siz, int &ct) {\n    int res = 1;\n    bool ok = true;\n    for (int i = pre[x]; ~i; i = nxt[i]) {\n      if (vise[i] == time) continue;\n      if (to[i] == f) continue;\n      if (vis[to[i]] != time) continue;\n      int ss = getCentre(to[i], x, siz, ct);\n      if (ss > siz / 2) ok = false;\n      res += ss;\n    }\n    if (siz - res > siz / 2) ok = false;\n    if (ok) ct = x;\n    return res;\n  }\n  void insertAll(int x, int f, int dep, PTreap &p) {\n    insert(p, dep - r[x]);\n    for (int i = pre[x]; ~i; i = nxt[i]) {\n      if (vise[i] == time) continue;\n      if (to[i] == f) continue;\n      if (vis[to[i]] != time) continue;\n      insertAll(to[i], x, dep + c[i], p);\n    }\n  }\n  int divide(int x) {\n    getCentre(x, 0, getCentre(x, 0, 1000000000, x), x);\n    insertAll(x, 0, 0, tree[x]);\n    for (int i = pre[x]; ~i; i = nxt[i]) {\n      if (vise[i] == time) continue;\n      if (vis[to[i]] != time) continue;\n      vise[i] = vise[i ^ 1] = time;\n      PTreap p = NULL;\n      insertAll(to[i], 0, c[i], p);\n      int s = divide(to[i]);\n      fa[s] = x;\n      son[x].insert(s);\n      sonTree[s] = p;\n    }\n    return x;\n  }\n  void rebuild(int x) {\n    ++time;\n    remove(x);\n    int ff = fa[x];\n    PTreap p = sonTree[x];\n    sonTree[x] = NULL;\n    if (ff != 0) son[ff].erase(x);\n    x = divide(x);\n    fa[x] = ff;\n    sonTree[x] = p;\n    if (ff != 0) son[ff].insert(x);\n  }\n  LL insert(int x, int f) {\n    LL ans = 0;\n    son[f].insert(x);\n    fa[x] = f;\n    for (int i = x; i; i = fa[i]) {\n      if (fa[i] != 0) {\n        int d = Tree::dis(fa[i], x);\n        ans += query(tree[fa[i]], r[x] - d);\n        ans -= query(sonTree[i], r[x] - d);\n        insert(sonTree[i], d - r[x]);\n      }\n      int d = Tree::dis(i, x);\n      insert(tree[i], d - r[x]);\n    }\n    int rebuildx = 0;\n    for (int i = x; fa[i]; i = fa[i])\n      if (tree[i]->siz > tree[fa[i]]->siz * 0.88)\n        rebuildx = fa[i];\n    if (rebuildx) rebuild(rebuildx);\n    return ans;\n  }\n};\nTreap node[N * 100];\nint main() {\n  for (int i = 0; i < N * 100; ++i)\n    Treap::bin.push(node + i);\n  int n, a, cc, v;\n  scanf(\"%*d%d\", &n);\n  LL lastans = 0;\n  pre[0] = -1;\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%d%d%d\", &a, &cc, &v);\n    r[i] = v;\n    a ^= lastans % 1000000000;\n    pre[i] = -1;\n    Tree::insert(i, cc, a);\n    lastans += Dynamic_TreeDivision::insert(i, a);\n    printf(\"%lld\\n\", lastans);\n  }\n  return 0;\n}\n\n```",
        "postTime": 1515573342,
        "uid": 49027,
        "name": "\u65af\u8482\u82ac\u00b7\u5e93\u91cc30",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3920 \u3010[WC2014]\u7d2b\u8346\u82b1\u4e4b\u604b\u3011"
    }
]