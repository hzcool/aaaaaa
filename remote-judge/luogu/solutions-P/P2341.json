[
    {
        "content": "\u7531\u9898\u53ef\u5f97\uff0c\u53d7\u6b22\u8fce\u7684\u5976\u725b\u53ea\u6709\u53ef\u80fd\u662f\u56fe\u4e2d\u552f\u4e00\u7684\u51fa\u5ea6\u4e3a\u96f6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u5976\u725b\uff0c\u6240\u4ee5\u82e5\u51fa\u73b0\u4e24\u4e2a\u4ee5\u4e0a\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5219\u4e0d\u5b58\u5728\u660e\u661f\u5976\u725b\uff0c\u56e0\u4e3a\u90a3\u51e0\u4e2a\u51fa\u5ea6\u4e3a\u96f6\u7684\u5206\u91cf\u7684\u7231\u6155\u65e0\u6cd5\u4f20\u9012\u51fa\u53bb\u3002\u90a3\u552f\u4e00\u7684\u5206\u91cf\u80fd\u53d7\u5230\u5176\u4ed6\u5206\u91cf\u7684\u7231\u6155\u540c\u65f6\u5728\u5206\u91cf\u5185\u76f8\u4e92\u4f20\u9012\uff0c\u6240\u4ee5\u8be5\u5206\u91cf\u4e2d\u7684\u6240\u6709\u5976\u725b\u90fd\u662f\u660e\u661f\u3002\n\nac\u4ee3\u7801\uff1a\n\n```cpp\n    #include<bits/stdc++.h>\n    #define N 10050\n    using namespace std;\n    struct EDGE{\n        int next,to;\n    }edge[N*20];\n    int head[20*N],dfn[N],low[N];\n    int du[N],id[N],all[N];\n    bool insta[N];int cnt,tot,gg,n,m;\n    stack<int>s;\n    inline void add(int x,int y){\n        cnt++;\n        edge[cnt].to=y;\n        edge[cnt].next=head[x];\n        head[x]=cnt;\n    }\n    void in(int &read){\n        int x=0,f=1;char ch;\n        for(ch=getchar();(ch<'0'||ch>'9')&&ch!='-';ch=getchar());\n        if(ch=='-'){f=-1;ch=getchar();}\n        while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n        read=x*f;//\u53ef\u4ee5\u5904\u7406\u8d1f\u6570\u7684\u8bfb\u5165\u4f18\u5316\n    }\n    void tarjan(int x){\n        dfn[x]=low[x]=++tot;\n        s.push(x);insta[x]=true;\n        for(int i=head[x];i;i=edge[i].next){\n            int u=edge[i].to;\n            if(!dfn[u]){\n                tarjan(u);\n                low[x]=min(low[x],low[u]);\n            }\n            else if(insta[u])low[x]=min(low[x],dfn[u]);\n        }//tarjan\u6a21\u677f\n        int k;\n        if(low[x]==dfn[x]){\n            ++gg;\n            do{\n                k=s.top();s.pop();\n                insta[k]=false;\n                id[k]=gg;all[gg]++;//\u5c06\u4e00\u4e2a\u5206\u91cf\u4e2d\u7684\u5143\u7d20\u67d3\u6210\u4e00\u8272\n            }while(x!=k);\n        }\n    }\n    int main(){\n        in(n);in(m);\n        int a,b;\n        for(register int i=1;i<=m;i++){\n            in(a);in(b);\n            add(a,b);\n        }\n        for(register int i=1;i<=n;i++)\n            if(!dfn[i])tarjan(i);\n        for(register int w=1;w<=n;w++){\n            for(int i=head[w];i;i=edge[i].next){\n                int u=edge[i].to;\n                if(id[w]!=id[u]){\n                    du[id[w]]++;//\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\u5e76\u8bb0\u5f55\u51fa\u5ea6\n                }\n            }\n        }\n        int tt=0;\n        for(register int i=1;i<=gg;i++)\n            if(!du[i]){\n            if(tt){puts(\"0\");return 0;}//\u4e24\u6b21\u51fa\u73b0\u51fa\u5ea6\u4e3a0\u76f4\u63a5\u8f93\u51fa0\n            tt=i;//\u8bb0\u5f55\u51fa\u5ea6\u4e3a\u96f6\u7684\u5206\u91cf\u7684\u8fb9\u53f7\n        }\n        printf(\"%d\\n\",all[tt]);\n        return 0;\n}\n```",
        "postTime": 1515600294,
        "uid": 52605,
        "name": "\u6765\u65e5\u65b9\u957f",
        "ccfLevel": 4,
        "title": "P2341 \u53d7\u6b22\u8fce\u7684\u5976\u725b"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2341)\n\n\u6807\u7b7e\uff1a$tarjan$\u6c42\u5f3a\u8054\u901a\u5206\u91cf\n\n### \u4f55\u4e3a\u5f3a\u8054\u901a\u5206\u91cf\n\n\u6709\u5411\u56fe\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5728\u6709\u5411\u56fe$G$\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u9876\u70b9$V_i,V_j$\u95f4\uff08$V_i>V_j$\uff09\u6709\u4e00\u6761\u4ece$V_i$\u5230$V_j$\u7684\u6709\u5411\u8def\u5f84\uff0c\u540c\u65f6\u8fd8\u6709\u4e00\u6761\u4ece$V_i$\u5230$V_j$\u7684\u6709\u5411\u8def\u5f84\uff0c\u5219\u79f0\u4e24\u4e2a\u9876\u70b9\u5f3a\u8fde\u901a\u3002\u5982\u679c\u6709\u5411\u56fe$G$\u7684\u6bcf\u4e24\u4e2a\u9876\u70b9\u90fd\u5f3a\u8fde\u901a\uff0c\u79f0$G$\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u3002 \u2014\u2014\u767e\u5ea6\u767e\u79d1\n                          \n\u4e8b\u5b9e\u4e0a\uff0c\u4f60\u5927\u6982\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u5b50\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u70b9\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\uff0c\u90a3\u4e48\u8fd9\u5c31\u7ec4\u6210\u4e86\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u3002\n\n\u5982\u679c\u8fd8\u4e0d\u7406\u89e3\u600e\u4e48\u529e\uff1f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0a\u56fe\u50cf\u6765\u7406\u89e3\n\n![](http://www.th7.cn/d/file/p/2015/03/16/37f854f9c53856f0bf6d323e36e942d3.png)\n\n\u5982\u56fe\uff0c\u5728\u8fd9\u4e2a\u6709\u5411\u56fe\u4e2d\uff0c\u4e00\u5171\u6709$\\{1,2,3,4\\},\\{5\\},\\{6\\}$\u4e09\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\n\n### \u5982\u4f55\u6c42\u5f3a\u8054\u901a\u5206\u91cf\n\n\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6570\u7ec4\uff0c\u5728\u8fd9\u91cc\u5148\u8bf4\u660e\u4e00\u4e0b\n\n$1.dfn$\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u5728$dfs$\u65f6\u662f\u7b2c\u51e0\u4e2a\u88ab\u641c\u5230\u7684\u3002\n\n$2.low$\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u5176\u5b50\u5b59\u8282\u70b9\u8fde\u7684\u6240\u6709\u70b9\u4e2d$dfn$\u6700\u5c0f\u7684\u503c\n\n$3.stack$\uff0c\u8868\u793a\u5f53\u524d\u6240\u6709\u53ef\u80fd\u80fd\u6784\u6210\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u3002\n\n$4.vis$\uff0c\u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u5728$stack$\u6570\u7ec4\u4e2d\u3002\n\n\u6211\u4eec\u4f7f\u7528$tarjan$\u7684\u65b9\u6cd5\n(1)\u3001\u9996\u5148\u521d\u59cb\u5316$dfn[u]=low[u]=$\u7b2c\u51e0\u4e2a\u88ab$dfs$\u5230\n\n(2)\u3001\u5c06$u$\u5b58\u5165$stack[ ]$\u4e2d\uff0c\u5e76\u5c06$vis[u]$\u8bbe\u4e3a$true$\n\n(3)\u3001\u904d\u5386$u$\u7684\u6bcf\u4e00\u4e2a\u80fd\u5230\u7684\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9$dfn[ ]$\u4e3a$0$\uff0c\u5373\u4ecd\u672a\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u5c31\u5bf9\u70b9$v$\u8fdb\u884c$dfs$\uff0c\u7136\u540e$low[u]=min\\{low[u],low[v]\\}$\n\n(4)\u3001\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf$dfs$\u5b8c\u4e86$u$\u7684\u6240\u6709\u7684\u5b50\u6811\u90a3\u4e48\u4e4b\u540e\u65e0\u8bba\u6211\u4eec\u518d\u600e\u4e48$dfs$\uff0c$u$\u70b9\u7684$low$\u503c\u5df2\u7ecf\u4e0d\u4f1a\u518d\u53d8\u4e86\u3002\n\n\u81f3\u6b64\uff0c$tarjan$\u5b8c\u7f8e\u7ed3\u675f\n\n\u90a3\u4e48\u5982\u679c$dfn[u]=low[u]$\u8fd9\u8bf4\u660e\u4e86\u4ec0\u4e48\u5462\uff1f\n\n\u518d\u7ed3\u5408\u4e00\u4e0b$dfn$\u548c$low$\u7684\u5b9a\u4e49\u6765\u770b\u770b\u5427\n\n$dfn$\u8868\u793a$u$\u70b9\u88ab$dfs$\u5230\u7684\u65f6\u95f4\uff0c$low$\u8868\u793a$u$\u548c$u$\u6240\u6709\u7684\u5b50\u6811\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u4e2d$dfn$\u6700\u5c0f\u7684\u3002\n\n\u8fd9\u8bf4\u660e\u4e86$u$\u70b9\u53ca$u$\u70b9\u4e4b\u4e0b\u7684\u6240\u6709\u5b50\u8282\u70b9\u6ca1\u6709\u8fb9\u662f\u6307\u5411u\u7684\u7956\u5148\u7684\u4e86\uff0c\u5373\u6211\u4eec\u4e4b\u524d\u8bf4\u7684$u$\u70b9\u4e0e\u5b83\u7684\u5b50\u5b59\u8282\u70b9\u6784\u6210\u4e86\u4e00\u4e2a\u6700\u5927\u7684\u5f3a\u8fde\u901a\u56fe\u5373\u5f3a\u8fde\u901a\u5206\u91cf\n\n\u6b64\u65f6\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u628a\u6240\u6709\u7684u\u70b9\u4ee5\u540e\u538b\u5165\u6808\u4e2d\u7684\u70b9\u548cu\u70b9\u4e00\u5e76\u5f39\u51fa\uff0c\u5c06\u5b83\u4eec\u7684$vis[ ]$\u7f6e\u4e3a$false$\uff0c\u5982\u6709\u9700\u8981\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u4eec\u6253\u4e0a\u76f8\u540c\u6807\u8bb0\uff08\u540c\u4e00\u4e2a\u6570\u5b57\uff09\n\n\n------------\n\n\n$Q:$ $dfn$\u53ef\u4ee5\u7406\u89e3\uff0c\u4f46\u4e3a\u4ec0\u4e48$low$\u4e5f\u8981\u8fd9\u4e48\u505a\u5462\uff1f\n\n$A:$\u56e0\u4e3alow\u7684\u5b9a\u4e49\u5982\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6ca1\u6709\u5b50\u5b59\u4e0eu\u7684\u7956\u5148\u76f8\u8fde\u7684\u8bdd\uff0c$dfn[u]$\u4e00\u5b9a\u662f\u5b83\u548c\u5b83\u7684\u6240\u6709\u5b50\u5b59\u4e2d$dfn$\u6700\u5c0f\u7684\uff08\u56e0\u4e3a\u5b83\u7684\u6240\u6709\u5b50\u5b59\u4e00\u5b9a\u6bd4\u4ed6\u540e\u641c\u5230\uff09\u3002\n\n$Q:$ $stack[]$\u6709\u4ec0\u4e48\u7528\uff1f\n\n$A:$\u5982\u679c$u$\u5728$stack$\u4e2d\uff0c$u$\u4e4b\u540e\u7684\u6240\u6709\u70b9\u5728$u$\u88ab\u56de\u6eaf\u5230\u65f6$u$\u548c\u6808\u4e2d\u6240\u6709\u5728\u5b83\u4e4b\u540e\u7684\u70b9\u90fd\u6784\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n$Q:$ $low[ ]$\u6709\u4ec0\u4e48\u7528\uff1f\n\n$A:$\u5e94\u8be5\u80fd\u770b\u51fa\u6765\u5427\uff0c\u5c31\u662f\u8bb0\u5f55\u4e00\u4e2a\u70b9\u5b83\u6700\u5927\u80fd\u8fde\u901a\u5230\u54ea\u4e2a\u7956\u5148\u8282\u70b9\uff08\u5f53\u7136\u5305\u62ec\u81ea\u5df1\uff09\n\n\u5982\u679c\u904d\u5386\u5230\u7684\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u5230\u4e86\uff0c\u90a3\u4e48\u770b\u5b83\u5f53\u524d\u6709\u6ca1\u6709\u5728$stack[ ]$\u91cc,\u5982\u679c\u6709\u90a3\u4e48$low[u]=min\\{low[u],low[v]\\}$\n\n\u5982\u679c\u5df2\u7ecf\u88ab\u5f39\u6389\u4e86\uff0c\u8bf4\u660e\u65e0\u8bba\u5982\u4f55\u8fd9\u4e2a\u70b9\u4e5f\u4e0d\u80fd\u4e0e$u$\u6784\u6210\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5230\u8fbe$u$\n\n\u5982\u679c\u8fd8\u5728\u6808\u91cc\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u80af\u5b9a\u80fd\u5230\u8fbe$u$\uff0c\u540c\u6837$u$\u80fd\u5230\u8fbe\u4ed6\uff0c\u4ed6\u4fe9\u5f3a\u8054\u901a\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u975e$(sang)$\u5e38$(xin)$\u7b80$(bing)$\u5355$(kuang)$\u7684\u624b$\\%$\u8fc7\u7a0b\u4e86\n\n\u4ece\u8282\u70b9$1$\u5f00\u59cb$DFS$\uff0c\u628a\u904d\u5386\u5230\u7684\u8282\u70b9\u52a0\u5165\u6808\u4e2d\u3002\u641c\u7d22\u5230\u8282\u70b9$u=6$\u65f6\uff0c$DFN[6]=LOW[6]$\uff0c\u627e\u5230\u4e86\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u9000\u6808\u5230$u=v$\u4e3a\u6b62\uff0c$\\{6\\}$\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n![](http://www.th7.cn/d/file/p/2015/03/16/d8aa8e62b42fd3d5da5ade0fe90cffa6.png)\n\n\u4e4b\u540e\u8fd4\u56de\u8282\u70b9$5$,\u53d1\u73b0$DFN[5]=LOW[5]$\uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u627e\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u5f3a\u8054\u901a\u5206\u91cf$\\{5\\}$\n\n![](http://www.th7.cn/d/file/p/2015/03/16/ce2022b95cc040b0fbb2109df448dbbd.png)\n\n\u8fd4\u56de\u8282\u70b9$3$\uff0c\u7ee7\u7eed\u641c\u7d22\u5230\u8282\u70b9$4$\uff0c\u628a$4$\u52a0\u5165\u5806\u6808\u3002\u53d1\u73b0\u8282\u70b9$4$\u5411\u8282\u70b9$1$\u6709\u540e\u5411\u8fb9\uff0c\u8282\u70b9$1$\u8fd8\u5728\u6808\u4e2d\uff0c\u6240\u4ee5$LOW[4]=1$\u3002\u8282\u70b9$6$\u5df2\u7ecf\u51fa\u6808\uff0c$(4,6)$\u662f\u6a2a\u53c9\u8fb9\uff0c\u8fd4\u56de$3$\uff0c$(3,4)$\u4e3a\u6811\u679d\u8fb9\uff0c\u6240\u4ee5$LOW[3]=LOW[4]=1$\u3002\n\n![](http://www.th7.cn/d/file/p/2015/03/16/7d6d8c0516311035c8fe6f897eb7b911.png)\n\n\u7ee7\u7eed\u56de\u5230\u8282\u70b9$1$\uff0c\u6700\u540e\u8bbf\u95ee\u8282\u70b9$2$\u3002\u8bbf\u95ee\u8fb9$(2,4)$\uff0c$4$\u8fd8\u5728\u6808\u4e2d\uff0c\u6240\u4ee5$LOW[2]=DFN[4]=5$\u3002\u8fd4\u56de$1$\u540e\uff0c\u53d1\u73b0$DFN[1]=LOW[1]$\uff0c\u628a\u6808\u4e2d\u8282\u70b9\u5168\u90e8\u53d6\u51fa\uff0c\u7ec4\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u91cf$\\{1,3,4,2\\}$\u3002\n\n![](http://www.th7.cn/d/file/p/2015/03/16/b962e2b6b609aaf75d5e096d510a4251.png)\n\n\u81f3\u6b64\uff0c$tarjan$\u7b97\u6cd5\u7ed3\u675f\uff0c\u6211\u4eec\u627e\u5230\u4e86\u5168\u90e8\u7684$3$\u4e2a\u5f3a\u8054\u901a\u5206\u91cf$\\{1,2,3,4\\},\\{5\\},\\{6\\}$\n\n\u7a0b\u5e8f\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\n```cpp\ninline int tarjan(int u) \n{\n\tlow[u]=dfn[u]=++dfn_sum;\n\tstack[top++]=u;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(dfn(v))\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t\telse\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\tint now=stack[--top];s_sum++;\n\t\ts[u]+=s_sum;\n\t\twhile(now!=u)\n\t\t{\n\t\t\ts[now]=s_num;\n\t\t\tnow=s[--top];\n\t\t}\n\t}\n}\n```\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u518d\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\n\n\u9996\u5148\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u6240\u6709\u7684\u725b\u90fd\u5b58\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u3002\u90a3\u4e48\u5b83\u4eec\u4e00\u5b9a\u4e92\u76f8\u53d7\u6b22\u8fce\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u6765\u627e\u660e\u661f\u5462\u3002\n\n\u5f88\u7b80\u5355\uff0c\u627e\u51fa\u5ea6\u4e3a$0$\u7684\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u4eba\u90fd\u559c\u6b22\u5b83\uff0c\u4f46\u662f\u5b83\u4e0d\u559c\u6b22\u4efb\u4f55\u4eba\uff0c\u6240\u4ee5\u8bf4\u4e0d\u5b58\u5728\u8fd8\u6709\u4eba\u4e8b\u660e\u661f\u3002\n\n\u6b64\u9898\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a\n\n\u5982\u679c\u6709\u4e24\u4e2a\u70b9\u5206\u522b\u6ee1\u8db3\u51fa\u5ea6\u4e3a\u96f6\u7684\u6761\u4ef6\uff0c\u5219\u6ca1\u6709\u660e\u661f\uff0c\u8fd9\u6837\u65e0\u6cd5\u6ee1\u8db3\u6240\u6709\u7684\u725b\u559c\u6b22\u4ed6\u3002\n\n\u6709\u4e86\u4e0a\u8fb9\u7684\u89e3\u91ca\uff0c\u9898\u76ee\u5c31\u4e0d\u662f\u90a3\u4e48\u96be\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;\nconst int maxn=1e4+5;\nconst int maxm=5e4+5;\nint to[maxm],nex[maxm],fir[maxn];\nint col,num,dfn[maxn],low[maxn],de[maxn],si[maxn];\nint tot=0,co[maxn],n,m;\nint top,st[maxn];\ntemplate<class T> inline void read(T &x)\n{\n    x=0;\n    register char c=getchar();\n    register bool f=0;\n    while (!isdigit(c)) f ^=c=='-',c=getchar();\n \twhile (isdigit(c)) x=x*10+c-'0',c=getchar();\n    if(f)x=-x;\n}\ntemplate <class T> inline void print(T x)\n{\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar('0'+x%10);\n}\ninline void ins(int x,int y)\n{\n    to[++tot]=y;\n    nex[tot]=fir[x];\n    fir[x]=tot;\n}\nvoid Tarjan(int u)\n{\n    dfn[u]=low[u]=++num;\n    st[++top]=u;\n    for(int i=fir[u];i;i=nex[i])\n    {\n        int v=to[i];\n        if(!dfn[v])\n        {\n            Tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(!co[v])low[u]=min(low[u],dfn[v]);\n    }\n    if(low[u]==dfn[u])\n    {\n        co[u]=++col;\n        ++si[col];\n        while(st[top]!=u)\n        {\n            ++si[col];\n            co[st[top]]=col;\n            --top;\n        }\n        --top;\n    }\n}\nint main()\n{\n    int x,y;\n    read(n);read(m);\n    for(ri i=1;i<=m;i++)\n    {\n        read(x);read(y);\n        ins(y,x);\n    }\n    for(ri i=1;i<=n;i++)\n        if(!dfn[i])Tarjan(i);\n    for(ri i=1;i<=n;i++)\n        for(ri j=fir[i];j;j=nex[j])\n            if(co[i]!=co[to[j]])de[co[to[j]]]++;\n    int ans=0,u=0;\n    for(ri i=1;i<=col;i++)if(!de[i])ans=si[i],u++;\n    if(u==1)print(ans);\n     else print(0);\n \treturn 0;\n}\n```",
        "postTime": 1548824144,
        "uid": 51645,
        "name": "zybnxy",
        "ccfLevel": 0,
        "title": "tarjan&&\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "#\u672c\u849f\u84bb\u901b\u4e86\u4e00\u5708\u53d1\u73b0dalao\u4eec\u7528\u7684\u90fd\u662ftarjan\uff0c\u597d\u5427\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u7528kosaraju\u601d\u8def\u4e5f\u662f\u5f88\u7b80\u5355\u7684\n\n##\u5927\u4f53\u601d\u8def\u5c31\u662f\u7f29\u70b9\uff0c\u7f29\u5230\u6700\u540e\u7684\u7684\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u88ab\u559c\u6b22\u7684\u6700\u591a\u7684\u725b\u725b\u4eec\u3002\n\n\u8fd9\u5c31\u662fkosaraju\u7684\u8fc7\u7a0b\uff0c\u4e00\u4e2a\u53cd\u56fe\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u4ece\u6700\u540e\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u8fdb\u884c\u53cd\u56fe\u4fbf\u5229\n\n\u5982\u679c\u6240\u6709\u7684\u70b9\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u8bc1\u660e\u6700\u540e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u90fd\u662f\u660e\u661f\u725b\uff0c\u5982\u679c\u8bbf\u95ee\u4e0d\u5230\uff0c\u5219\u8bf4\u660e\u6ca1\u6709\u725b\u662f\u660e\u661f\n\n\uff08\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u5df2\u7ecf\u662f\u88ab\u6700\u591a\u7684\u559c\u6b22\u7684\u725b\u4e86\u9ebb\uff09\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u9700\u8981\u5728kosaraju\u7684\u6a21\u677f\u4e0a\u5728\u52a0\u4e00\u4e2aDFS\u5373\u53ef\uff1b\n\n###\n        \n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 10010\nint m,n,nl,mmp,sum;\nvector<int> G[maxn];\nvector<int> RG[maxn];\nvector<int> vs;\nbool used[maxn];\nint cmp[maxn];\nvoid add(int a,int b)//\u4e24\u4e2a\u90bb\u63a5\u8868\u5b58\u50a8 \n{\n    G[a].push_back(b);//\u6b63\u56fe \n    RG[b].push_back(a);//\u53cd\u56fe \n}\nvoid dfs(int v)//\u7b2c\u4e00\u904d\u641c\u7d22\uff1b \n{\n    used[v]=1;\n    for(int i=0;i<G[v].size();i++)\n    {\n        if(!used[G[v][i]])\n        dfs(G[v][i]);\n    }\n    vs.push_back(v);\n}\nvoid rdfs(int v,int k)//\u7b2c\u4e8c\u904d\u641c\u7d22 \n{\n    used[v]=1;\n    cmp[v]=k;\n    for(int i=0;i<RG[v].size();i++)\n    {\n        if(!used[RG[v][i]])\n        rdfs(RG[v][i],k);\n    }\n}\nint scc()\n{\n    memset(used,0,sizeof(used));\n    vs.clear();\n    for(int i=1;i<=n;i++)\n    if(!used[i])\n    dfs(i);\n    memset(used,0,sizeof(used));\n    int k=0;\n    for(int i=vs.size()-1;i>=0;i--)\n    if(!used[vs[i]])\n    rdfs(vs[i],k++);\n    return k;\n}\nint DFS(int haha)//\u5176\u5b9e\u8fd9\u4e2a\u641c\u7d22\u53ef\u4ee5\u76f4\u63a5\u7528\u7b2c\u4e8c\u4e2a\uff08rdfs\uff09\u66ff\u4ee3\uff0c\u4e0d\u8fc7\u8fd9\u6837\u770b\u8d77\u6765\u6bd4\u8f83\u6e05\u695a\u3002\u3002\u3002\u3002\u3002\u3002 \n{\n    used[haha]=1;\n    for(int i=0;i<RG[haha].size();i++)\n    {\n        if(!used[RG[haha][i]])\n        DFS(RG[haha][i]);\n    }\n}\nint main()\n{\n    int u,p;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    cin>>u>>p,add(u,p);\n    int ans=scc();\n    //cout<<ans<<endl;\n    for(int i=1;i<=n;i++)\n    {\n    if(cmp[i]==ans-1)//\u6ce8\u610f\u8fd9\u91ccans\u8981\u51cf\u4e00\uff1b \n        {\n            mmp=i;\n            sum++;\n        }\n    }\n    memset(used,0,sizeof(used));\n    rdfs(mmp,1);\n    for(int i=1;i<=n;i++)//\u770b\u4e00\u4e0b\u662f\u5426\u6240\u6709\u70b9\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86 \n    {\n        if(!used[i])\n        {\n            cout<<0<<endl;\n            return 0;\n        }\n    }\n    cout<<sum<<endl;//\u5982\u679c\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\u5219\u6700\u540e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u725b\u725b\u90fd\u662f\u660e\u661f\uff0c\u8f93\u51fa\u5373\u53ef\uff1b \n    return 0;\n}\n```",
        "postTime": 1510130095,
        "uid": 50409,
        "name": "\u5c0f\u83e0\u841d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "#Tarjan\u6b63\u89e3\uff0c\u81ea\u5df1\u7684\u5927\u6570\u636e\u5df2\u8fc7\n\n~~\u8fd9\u9053\u9898\u6d1b\u8c37\u4e0a\u7684\u6570\u636e\u6bd4\u8f83\u6c34~~\uff0c\u6240\u4ee5\u597d\u50cffloyd\u4e5f\u80fd\u8fc7\uff0c\u6211\u5e26\u6765\u7684\u662ftarjan\u7248~~\u7287\u7287\u52ff\u55b7~~\n\n\u4e0b\u9762\u6211\u4eec\u8bf4\u8bf4\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\uff0c\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff0ca\u4ef0\u6155b,b\u4ef0\u6155c,c\u4ef0\u6155d\uff0cd\u4ef0\u6155b\n\n ![](https://cdn.luogu.com.cn/upload/pic/9420.png) \n\n\u4e0d\u96be\u53d1\u73b0\uff0cb,c,d\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u679c\u8fd9\u4e2a\u5206\u91cf\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u88ab\u4ef0\u6155\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u7684\u725b\u90fd\u4f1a\u88ab\u4ef0\u6155\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u56fe\u5168\u90e8\u7f29\u6210\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u4e2a\u56fe\u5c31\u53d8\u6210\u4e86\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8fd9\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u88ab\u6240\u6709\u725b\u4ef0\u6155\u7684\u725b\u51fa\u5ea6\u4e00\u5b9a\u662f\u4e3a0\u7684\uff0c\u56e0\u4e3a\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5982\u679c\u88ab\u6240\u6709\u725b\u4ef0\u6155\uff0c\u81ea\u5df1\u53c8\u4ef0\u6155\u522b\u4eba\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u73af\u3002\n\n**\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u6ce8\u4e00\u4e2a\u5206\u91cf\u7684\u51fa\u5ea6\u662f\u5426\u4e3a0\uff0c\u6240\u4ee5\u4e0d\u7528\u5224\u65ad\u4e24\u4e2a\u5206\u91cf\u95f4\u7684\u8fb9\u662f\u5426\u91cd\u590d\u7edf\u8ba1**\n\n\u5176\u6b21\uff0c\u5982\u679c\u8fd9\u4e2a\u56fe\u5b58\u5728\u4e00\u4e2a\u4ee5\u4e0a\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u4e2a\u56fe\u5c31\u4f1a\u53d8\u6210\u975e\u8fde\u901a\u56fe\uff0c\u5c31\u4e0d\u5b58\u5728\u88ab\u6240\u6709\u725b\u4ef0\u6155\u7684\u725b\uff0c\u76f4\u63a5\u8f93\u51fa0\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u770b\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1000000\nusing namespace std;\nint Next[maxn],a=0,F[maxn],Head[maxn],cmpi[maxn],out[maxn],E[maxn],cmp[maxn],s[maxn],dfn[maxn],low[maxn],top=0,cmpid=0,tim=0;\nbool V[maxn],D[maxn];\nvoid ins(int x,int y,int i)\n{\n    E[i]=y;\n    Next[i]=Head[x];\n    Head[x]=i;\n}//\u94fe\u5f0f\u524d\u5411\u661f\nint find()\n{\n    int ans=0;\n    for(int i=1;i<=a;i++)\n    {\n        for(int p=Head[F[i]];p;p=Next[p])//\u5217\u4e3e\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u63a5\u70b9\n        {\n            if(!D[E[p]])ans++;//\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u90bb\u63a5\u70b9\u4e0d\u548c\u4ed6\u5728\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d1\u73b0\u4ed6\u6240\u5728\u7684\u5206\u91cf\u6709\u4e86\u51fa\u5ea6\n        }\n    }\n    return ans;\n}//\u627e\u4e00\u7ec4\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u51fa\u5ea6\nvoid tarjan(int u)\n{\n    dfn[u]=low[u]=++tim;\n    s[++top]=u;\n    V[u]=true;\n    for(int p=Head[u];p;p=Next[p])\n    {\n        int y=E[p];\n        if(!dfn[y])\n        {\n            tarjan(y);\n            low[u]=min(low[y],low[u]);\n        }\n        else\n        {\n            if(V[y])low[u]=min(low[u],dfn[y]);\n        }\n    }\n    if(dfn[u]==low[u])\n    {\n        int y;\n        cmpid++;\n        do\n        {\n            y=s[top--];\n            V[y]=false;\n            F[++a]=y;//\u5c06\u8fd9\u4e2a\u70b9\u5b58\u5165\u6682\u65f6\u6570\u7ec4\n            D[y]=true;\n            cmpi[cmpid]++;\n        }while(y!=u);\n        cmp[cmpid]=find();//cmp\u5b58\u50a8\u4ed6\u7684\u51fa\u5ea6\n        a=0;\n        memset(D,false,sizeof(D));//D\u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u70b9\u5728\u4e0d\u5728\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n    }\n}\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        ins(a,b,i);\n    }\n    for(int i=1;i<=n;i++)\n       if(!dfn[i])tarjan(i);\n    int c=0,ans;\n    for(int i=1;i<=cmpid;i++)\n      if(!cmp[i])c++,ans=i;//\u68c0\u67e5\u56fe\u662f\u5426\u8fde\u901a\n    if(c==1)printf(\"%d\",cmpi[ans]);//\u8f93\u51fa\n    else printf(\"0\");\n    return 0;\n} \n```",
        "postTime": 1508761992,
        "uid": 29261,
        "name": "Masterchief",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "### \u7ecf\u5178\u7684tarjan\u7f29\u70b9\u9898qwq\n\n\u5148\u628a\u7231\u6155\u5173\u7cfb\u6784\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u56e0\u4e3a\u7231\u6155\u5173\u7cfb\u53ef\u7ee7\u627f\uff0c\u6240\u4ee5**\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u725b\u90fd\u4e92\u76f8\u7231\u6155**\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5229\u7528tarjan\u8fdb\u884c\u7f29\u70b9\uff0c\u5c06\u90a3\u4e9b\u4e92\u76f8\u7231\u6155\u7684\u725b\u4eec\u770b\u505a\u4e00\u5934\u725b\u3002\n\n\u7f29\u70b9\u540e\u7684\u5976\u725b\u4eec\u5c31\u4e0d\u4f1a\u6709\u4e92\u76f8\u7231\u6155\u7684\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u51fa**\u53ea\u6709\u4e0d\u7231\u6155\u4ed6\u4eba\u7684\u725b\u624d\u53ef\u80fd\u5f53\u660e\u661f\uff08\u5657**\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u627e\u7f29\u70b9\u540e\u51fa\u5ea6\u4e3a0\u7684\u70b9\u3002\n\n\u4f46\u5982\u679c\u6709\u591a\u4e2a\u70b9\u51fa\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u5b83\u4eec\u90fd\u5f53\u4e0d\u4e86\u660e\u661f\uff08\u5b83\u4eec\u6ca1\u6709\u53d7\u5230\u5bf9\u65b9\u7684\u7231\u6155\u2014>\u5b83\u4eec\u6ca1\u6709\u53d7\u5230\u6240\u6709\u725b\u7684\u7231\u6155\uff09\u3002\n\n\u5f97\u51fa\u7ed3\u8bba:\n\n### 1.\u7f29\u70b9\u540e\uff0c\u82e5\u53ea\u6709\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90a3\u4e48\u660e\u661f\u725b\u7684\u4e2a\u6570\u5373\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5305\u542b\u7684\u70b9\u7684\u4e2a\u6570\uff1b\n\n### 2.\u7f29\u70b9\u540e\uff0c\u82e5\u6709\u591a\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\u6216\u65e0\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90a3\u4e48\u660e\u661f\u725b\u7684\u4e2a\u6570\u5373\u4e3a0\u3002\n\n\u4ee3\u7801\u5949\u4e0aqwq\n\n```cpp\n//Author:502BadGTway\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,fst[10010],v[100010],nex[100010],a,b,dfn[10010],low[10010];\nint scc[10010],t,cnt,size[10010],minn[10010],out[10010],cont,ans;\nbool f[10010];\nstack<int> s;\nvoid tarjan(int k)\n{\n    low[k]=dfn[k]=++t;\n    f[k]=true;\n    s.push(k);\n    for(int i=fst[k];i!=-1;i=nex[i])\n    {\n        if(!dfn[v[i]])\n        {\n            tarjan(v[i]);\n            low[k]=min(low[k],low[v[i]]);\n        }\n        else \n        {\n            if(f[v[i]])\n            low[k]=min(low[k],dfn[v[i]]);\n        }\n    }\n    if(low[k]==dfn[k])\n    {\n        f[k]=false;\n        scc[k]=++cnt;\n        size[cnt]=1;\n        while(s.top()!=k)\n        {\n            scc[s.top()]=cnt;\n            f[s.top()]=false;\n            size[cnt]++;\n            s.pop();\n        }\n        s.pop();\n    }\n    return ;\n}\nint main()\n{\n    cin>>n>>m;\n    memset(fst,-1,sizeof(fst));\n    memset(low,0x7f/3,sizeof(low));\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        nex[i]=fst[a];\n        v[i]=b;\n        fst[a]=i;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!dfn[i])\n        {\n            t=0;\n            tarjan(i);\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=fst[i];j!=-1;j=nex[j])\n        {\n            if(scc[i]!=scc[v[j]])\n            out[scc[i]]++;\n \t\t}\n    }\n    for(int i=1;i<=cnt;i++)\n    {\n        if(out[i]==0)\n        {\n            cont++;\n            ans+=size[i];\n        }\n    }\n    if(cont==1)\n    {\n        cout<<ans;\n    }\n    else\n    cout<<0;\n    return 0;\n}\n```\n",
        "postTime": 1550629635,
        "uid": 116368,
        "name": "BinDir0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u53ef\u4ee5\u7528\u66b4\u529b\u6c34\u8fc7\uff0c\u4e0d\u7528tarjan\n\n\u601d\u8def\uff1a\u5c06\u5976\u725b\u770b\u6210\u8282\u70b9\uff0c\u53cd\u5411\u5efa\u8fb9\uff0c\u5bf9\u4e8e\u4e00\u53ea\u5976\u725b\uff0c\u8dd1\u4e00\u8fb9\u66b4\u529bdfs\uff0c\u5224\u65ad\u80fd\u4e0d\u80fd\u5230\u8fbe\u5176\u4ed6\u6240\u6709\u5976\u725b\uff0c\u7136\u540e\u52a0\u4e00\u4e9b\u5c0f\u5c0f\u7684\u526a\u679d\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n//n\u65b9\u8fc7\u767e\u4e07\uff0c\u66b4\u529b\u78be\u6807\u7b97\n//\u6211\u76f8\u4fe1\uff1a\u66b4\u529b\u51fa\u5947\u8ff9 \n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#define MAXN 10005\nusing namespace std;\nint vis[MAXN];\nint is_all[MAXN];//\u662f\u5426\u5168\u90e8\u88ab\u6b22\u8fce:-1\u4e0d\u786e\u5b9a\uff0c1\uff1a\u5168\u90e8\u88ab\u6b22\u8fce\uff0c0\uff1a\u4e0d\u5168\u90e8\u88ab\u6b22\u8fce \nint sz[MAXN];\nint haveans;\nvector<int>G[MAXN];\nvoid dfs(int u){\n    if (haveans==1){\n        return ;\n    }\n    for (register int i=0;i<sz[u];++i){\n        if (!vis[G[u][i]]){\n            vis[G[u][i]]=true;\n            if (is_all[G[u][i]]==1){//\u526a\u679d1\uff1a\u5f53\u641c\u7d22\u5230\u4e00\u53ea\u5976\u725b\uff0c\u4ece\u5b83\u51fa\u53d1\u80fd\u5230\u8fbe\u6240\u6709\u5976\u725b\uff0c\u5219\u4ece\u8fd9\u53ea\u5976\u725b\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u6240\u6709\u5976\u725b\n                haveans=is_all[G[u][i]];\n                return ;\n            }\n            dfs(G[u][i]);\n        }\n    }\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (register int i=0;i<m;++i){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        vis[u]=true,vis[v]=true;\n        G[v].push_back(u);\n    }\n    bool flag=false;\n    for (register int i=1;i<=n;++i){\n        if (vis[i]==0){\n            flag=true;\n            break;\n        }\n    }\n    if (flag==true){//\u7b2c\u4e8c\u4e2a\u526a\u679d\uff0c\u5982\u679c\u6709\u5976\u725b\u6ca1\u6709\u5728\u56fe\u4e2d\uff0c\u5219\u7b54\u6848\u4e3a0\n        printf(\"0\\n\");\n        return 0;\n    }\n    for (register int i=1;i<=n;++i){\n        sort(G[i].begin(),G[i].end());\n        sz[i]=unique(G[i].begin(),G[i].end())-G[i].begin();\n    }\n    int sum=0;\n    memset(is_all,-1,sizeof(is_all));\n    for (register int i=1;i<=n;++i){\n        if (is_all[i]==0){//\u65e0\u6cd5\u5230\u8fbe\u6240\u6709\u5976\u725b\n            continue;\n        }\n        haveans=-1;\n        memset(vis,0,sizeof(vis));\n        vis[i]=true;\n        dfs(i);\n        if (haveans==1){\n            is_all[i]=1;\n            sum++;\n        }\n        else if (haveans==-1){\n            bool flag=false;\n            for (register int j=1;j<=n;++j){\n                if (vis[j]==0){\n                    flag=true;\n                    break;\n                }\n            }\n            if (flag==false){\n                is_all[i]=1;\n                sum++;\n            }\n            else {\n                for (register int j=1;j<=n;++j){\n                    if (vis[j]) is_all[j]=0;\n                }\n                //\u8fd9\u4e2a\u526a\u679d\u5f88\u91cd\u8981\uff0c\u5982\u679c\u6b64\u5976\u725b\u65e0\u6cd5\u5230\u8fbe\u6240\u6709\u5976\u725b\uff0c\u90a3\u4e48\u6b64\u5976\u725b\u80fd\u591f\u5230\u8fbe\u7684\u6240\u6709\u5976\u725b\u65e0\u6cd5\u5230\u8fbe\u6240\u6709\u5976\u725b(\u6709\u70b9\u7ed5\u53e3qwq)\n            }\n        }\n    }\n    printf(\"%d\\n\",sum);\n}\n```\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6c34\u8fc7\u4e86\uff0c\u819c\u62dc\u5404\u4e2a\u5927\u4f6c\u7684tarjan",
        "postTime": 1540198449,
        "uid": 45109,
        "name": "Steven_Meng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "[\u9898\u76ee\uff1a\u53d7\u6b22\u8fce\u7684\u725b](https://www.luogu.org/problem/P2341)\n\n## \u4ec0\u4e48\u662f\u5f3a\u8fde\u901a\u5206\u91cf\uff1f\uff1f\uff1f\n\n 1,\u5f3a\u8fde\u901a\uff1a\u5728\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u5c31\u79f0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u5f3a\u8fde\u901a\u3002\n \n 2,\u5f3a\u8fde\u901a\u56fe\uff1a\u5728\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4efb\u610f\u4e24\u4e2a\u70b9\u5f3a\u8fde\u901a\uff0c\u5c31\u628a\u8fd9\u4e2a\u56fe\u79f0\u4e3a\u5f3a\u8fde\u901a\u56fe\u3002\n \n 3,\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5728\u4e00\u4e2a\u975e\u5f3a\u8fde\u901a\u56fe\u4e2d\u7684\u6700\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n \n \u81f3\u6b64\uff0c\u5173\u4e8e\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u57fa\u672c\u77e5\u8bc6\u5df2\u7ecf\u4ecb\u7ecd\u5b8c\u4e86\uff0c\u90a3\u4e48\uff0cTarjan\u7b97\u6cd5\u5230\u5e95\u662f\u4ec0\u4e48\u4e1c\u4e1c\uff1f\uff1f\uff1f\n \n##  Tarjan\u7b97\u6cd5\n\ntarjan\u7b97\u6cd5\u662f\u901a\u8fc7\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6765\u5b9e\u73b0\u7684\uff0c\u5176\u4e2d\u6709\u51e0\u4e2a\u91cd\u8981\u7684\u6570\u7ec4\n\n1, dfn[]:\u8868\u793a\u7ed3\u70b9i\u662f\u7b2c\u51e0\u4e2a\u88ab\u641c\u7d22\u5230\u7684\u3002\n\n2\uff0clow[]:\u4e0e\u7ed3\u70b9i\u8fde\u63a5\u7684\u6240\u6709\u70b9\u4e2ddfn[]\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\n\n3,stack[]:\u6808\u91cc\u7684\u5143\u7d20\u3002\n\n4,flag[]:\u5224\u65ad\u7ed3\u70b9i\u662f\u5426\u5728\u6808\u91cc\u3002\n\n\u56e0\u4e3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5f53\u5b58\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u70b9u\u4e00\u5b9a\u4f1a\u4e0e\u5b83\u7684\u7956\u5148\u8fde\u901a\u3002\u56e0\u4e3alow\u503c\u4ee3\u8868\u7684\u662f\u5b83\u513f\u5b50\u4e2ddfn[]\u503c\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u5b83\u7684low\u503c\u5c31\u4f1a\u66f4\u65b0\uff0c\u4ece\u800c\u5c0f\u4e8e\u5b83\u7684dfn[]\u7684\u503c\u3002\n\n\u5f53\u4e00\u4e2a\u70b9\u7684low[]\u503c\u7b49\u4e8e\u5b83\u7684dfn[]\u7684\u503c\u7684\u65f6\u5019\uff0c\u8bf4\u660eu\u70b9\u7684\u513f\u5b50\u4eec\u6ca1\u6709\u6307\u5411\u4ed6\u4eec\u7956\u5148\u7684\u4e86\uff0c\u6240\u4ee5\u6b64\u65f6u\u70b9\u4e0e\u5b83\u7684\u5b50\u5b59\u4eec\u6784\u6210\u4e86\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002\n\n## \u7f29\u70b9\n\u63a5\u4e0b\u6765\u7f29\u70b9\u8fd9\u4e2a\u6b65\u9aa4\u5c31\u662f\u8fd9\u9898\u7684\u5173\u952e\u3002\n\n\u9996\u5148\u6211\u4eec\u5f97\u77e5\u9053\u4ec0\u4e48\u662f\u7f29\u70b9\uff0c\u5f53\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u770b\u6210\u4e00\u4e2a\u70b9\u3002\n\n\u5f53\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u90fd\u8fdb\u5b8c\u7f29\u70b9\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u5269\u4e0b\u7684\u8fd9\u5f20\u56fe\u4e2d\u627e\u660e\u661f\u5c31\u884c\u4e86\uff0c\u5982\u679c\u8fd9\u5f20\u56fe\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u5f20\u56fe\u91cc\u7684\u725b\u90fd\u662f\u660e\u661f\u3002\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u51fa\u5ea6\u4e3a0\u7684\u725b\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5176\u4ed6\u6240\u6709\u7684\u725b\u90fd\u559c\u6b22\u5b83\uff0c\u4f46\u662f\u5982\u679c\u67092\u4e2a\u4ee5\u4e0a\u7684\u51fa\u5ea6\u4e3a0\u7684\u725b\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u8fd9\u5f20\u56fe\u91cc\u662f\u4e0d\u5b58\u5728\u660e\u661f\u7684\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint w[10003],c[10003];\nstruct node{          //\u94fe\u5f0f\u524d\u9879\u578b\u5b58\u56fe \n\tint from;\n\tint to;\n\tint next;\n}a[100003];\nint head[190003],Dfn[100003],Low[100003],fl[100003],stack[100003],color[100003],cnt[100003],du[100003],t,tot,k;\n//stack[]\u8bb0\u5f55\u6808\u91cc\u7684\u5143\u7d20 \n//fl[]\u4e3a\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u662f\u5426\u5728\u6808\u91cc\n//color[]\u5c31\u662f\u628a\u6240\u6709\u7684\u8fde\u901a\u5206\u91cf\u90fd\u53d8\u6210\u4e00\u4e2a\u989c\u8272\uff0c\u4e5f\u5c31\u662f\u7f29\u70b9\n//cnt[]\u8bb0\u5f55\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u5143\u7d20\u4e2a\u6570\n//du[]\u5c31\u662f\u5728\u7f29\u5b8c\u70b9\u4e4b\u540e\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a\u591a\u5c11 \nvoid dfs(int i)\n{\n\tDfn[i]=Low[i]=++tot;         //\u8868\u793a\u70b9i\u662f\u7b2c\u51e0\u4e2a\u88ab\u904d\u5386\u5230\u7684\uff0c\u628alow[i]\u7684\u503c\u5148\u8d4b\u503c\u4e3adfn[i]\u7684\u503c \n\tstack[++k]=i;                //\u70b9i\u5165\u6808 \n\tfl[i]=1;                     //\u5165\u6808\u6240\u4ee5\u70b9i\u53d8\u4e3a1 \n\tfor(int j=head[i]; j; j=a[j].next)     //\u904d\u5386\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u70b9 \n\t{\n\t\tif(!Dfn[a[j].to]) dfs(a[j].to),Low[i]=min(Low[i],Low[a[j].to]);     //\u5982\u679c\u4e0e\u5b83\u76f8\u8fde\u7684\u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u904d\u5386\u8fc7\uff0c\u5c31\u5f80\u4e0b\u904d\u5386\uff0c\u5e76\u6bd4\u8f83\u5b83\u548c\u5b50\u5b59\u7684low[]\u503c \n\t\telse if(fl[a[j].to]) Low[i]=min(Low[i],Dfn[a[j].to]);               //\u5426\u5219\u5982\u679c\u8fd9\u4e2a\u70b9\u5728\u6808\u4e2d\uff0c\u8868\u793a\u4ed6\u4eec\u90fd\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u91cc \n\t}\n\tif(Low[i]==Dfn[i])           \n\t{\n\t\tt++;      //\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u6807\u53f7 \n\t\tdo{\n\t\t\tcolor[stack[k]]=t; cnt[t]++;           //cnt\u8bb0\u5f55\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6709\u591a\u5c11\u4e2a\u6570 \n\t\t\tfl[stack[k]]=0;                       //\u51fa\u6808 \n\t\t\tk--;\n\t\t}while(i!=stack[k+1]);\n\t}\n}\nint main(){\n\tint n,m,x,y;\n\tcin>>n>>m;\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tcin>>a[i].from>>a[i].to;\n\t\ta[i].next=head[a[i].from];\n\t\thead[a[i].from]=i;\n\t}\n\tfor(int i=1; i<=n; ++i)\n\tif(!Dfn[i]) dfs(i);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tfor(int j=head[i]; j; j=a[j].next)\n\t\t{\n\t\t\tif(color[i]!=color[a[j].to])            //\u7f29\u5b8c\u70b9\u4e4b\u540e\u5224\u65ad\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u5ea6\u4e3a\u591a\u5c11 \n\t\t\t{\n\t\t\t\tdu[color[i]]++;\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1; i<=t; ++i)\n\t{\n\t\tif(du[i]==0)   //\u627e\u5230\u5ea6\u4e3a0\u7684\u70b9 \n\t\t{\n\t\t\tif(ans) {cout<<0; return 0;\n\t\t\t}\n\t\t\tans=i;\n\t\t}\n\t}\n\tcout<<cnt[ans];\n\treturn 0;\n}\n```\n",
        "postTime": 1569893948,
        "uid": 93030,
        "name": "zhy_",
        "ccfLevel": 6,
        "title": "Tarjan\u7b97\u6cd5\uff08\u6c42\u5f3a\u8fde\u901a\u5206\u91cf/\u7f29\u70b9\uff09"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9140872.html)\n\n\n\n------------\n### Solution\n\u524d\u6392\u63d0\u793a\uff0c\u672c\u849f\u84bb\u505a\u6cd5\u65e2\u5947\u8469\u53c8\u9ebb\u70e6\n\n.\n\n \n\n\u6211\u4eec\u5148\u53ef\u4ee5\u628a\u9898\u76ee\u8f6c\u6362\u4e00\u4e0b\u3002\n\n\u53ef\u4ee5\u628a\u4e00\u5934\u725b\u559c\u6b22\u53e6\u5916\u4e00\u5934\u725b\u7406\u89e3\u4e3a\u53e6\u5916\u4e00\u5934\u725b\u88ab\u4e00\u5934\u725b\u559c\u6b22\u3002\n\n\u6211\u4eec\u628a\u88ab\u559c\u6b22\u7684\u5173\u7cfb\u5efa\u8fb9\uff0c**\u5373B\u88abA\u559c\u6b22\uff0c\u4eceB\u5411A\u8fde\u4e00\u6761\u6709\u5411\u8fb9**\u3002\n\n\u663e\u7136\uff0c\u4e00\u4e2a\u70b9\u82e5\u80fd\u5230\u8fbe\u5176\u4ed6\u6240\u6709\u8282\u70b9\uff0c\u5b83\u5c31\u662f\u9898\u76ee\u4e2d\u7684\u660e\u661f\u725b\u3002\n\n \n .\n \n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u4e8eDP\u7684\u505a\u6cd5\u3002\n\n\u5373\u4e00\u4e2a\u70b9\u80fd\u8bbf\u95ee\u5230\u7684\u70b9\uff0c\u7b49\u540c\u4e8e\u5b83\u7684\u513f\u5b50\u4eec\u8bbf\u95ee\u7684\u5230\u7684\u70b9\u52a0\u4e0a\u5b83\u81ea\u5df1\u3002\n\n\u663e\u7136\uff0c\u8fd9\u79cd\u7279\u6027\u8981\u5728DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u4e0a\u624d\u80fd\u65b9\u4fbf\u7684\u4f7f\u7528\u3002\n\n .\n \n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u7b2c\u4e00\u6b65\u8981\u5bf9\u9898\u76ee\u505a\u7684\u662f\u7f29\u70b9\u3002\n\n .\n\n\u7f29\u5b8c\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u56fe\u4e0aDP\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a01\u6570\u7ec4f[i][j]\u8868\u793ai\u80fd\u5177\u4f53\u80fd\u5230\u8fbe\u7684\u70b9\u4e3aj\uff08\u7528010101\u6570\u5217\u8868\u793a\uff09\u3002\n\n\u663e\u7136 f[i] |= f[k] \uff08\u6216\u8fd0\u7b97\uff09\uff08k\u4e3ai\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\uff09\n\n\u7b54\u6848\u4e3af[i][j] j=11111111.... \u7684\u70b9 \n\n.\n\n \n\n\u5f53\u7136\uff0c\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u95ee\u9898\u3002\n\n\u70b9\u7684\u6700\u5927\u6570\u76ee\u4e3an\uff0c\u6211\u4eec\u8fd9\u6837\u505a\u662fO(n^2)\u7684\uff0c\u5728\u6700\u574f\u6761\u4ef6\uff08\u6ca1\u6709\u4e00\u4e2a\u70b9\u80fd\u7f29\u5728\u4e00\u8d77\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1aT\u3002\n\n\u6211\u4eec\u8fd9\u65f6\u5019\u5c31\u5f97\u8bf7\u51fabitset\u3002\n\nbitset\u7684\u98df\u7528\u65b9\u6cd5\uff1a[\u501f\u7528\u80e1\u5c0f\u5154dalao\u7684\u535a\u5ba2](https://www.cnblogs.com/RabbitHu/p/bitset.html)\n\n\u4f7f\u7528bitset\u540e\uff0c\u6211\u4eec\u8ba1\u7b97\u4e00\u4e2a\u70b9\u80fd\u5230\u8fbe\u5176\u4ed6\u7684\u70b9\u7684\u590d\u6742\u5ea6\u4e00\u4e0b\u5b50\u964d\u4e3a\u4e86**O(n/32)**\n\n**\u603b\u590d\u6742\u5ea6\u4e3aO(n^2/32) **\n\n \n\n \n\n .\n \n .\n \n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u5566\u3002\n\n\n------------\n### Code\n```cpp\n//Luogu P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\n//June,5th,2018\n//\u7f29\u70b9+\uff08\u5b8c\u5168\u6ca1\u5fc5\u8981\u7684\uff09bitset\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<stack>\n#include<bitset>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int  N=10000+100;\nvector <int> e[N],e2[N];\nint n,m,belong[N],nd_tot,dfn[N],mcount,low[N],cnt[N];\nbool InStack[N];\nstack <int> s;\nbitset <N> arrival[N]; \nvoid Tarjan(int now)\n{\n    InStack[now]=true;\n    s.push(now);\n    dfn[now]=low[now]=++mcount;\n    for(int i=0;i<int(e[now].size());i++)\n        if(dfn[e[now][i]]==0)\n        {\n            Tarjan(e[now][i]);\n            low[now]=min(low[now],low[e[now][i]]);\n        }\n        else if(InStack[e[now][i]]==true)\n            low[now]=min(low[now],low[e[now][i]]);\n    if(low[now]==dfn[now])\n    {\n        nd_tot++;\n        while(s.empty()==false)\n        {\n            int temp=s.top();\n            s.pop();\n            InStack[temp]=false;\n            belong[temp]=nd_tot;\n            cnt[nd_tot]++;\n            if(temp==now) break;\n        }\n        arrival[nd_tot][nd_tot]=true;\n    }\n}\nbool vis[N];\nint ans=0;\nvoid dfs(int now)\n{\n    vis[now]=true;\n    for(int i=0;i<int(e2[now].size());i++)\n    {\n        if(vis[e2[now][i]]==false)\n            dfs(e2[now][i]);\n        arrival[now]|=arrival[e2[now][i]];\n    }\n    if(int(arrival[now].count())==nd_tot)\n        ans+=cnt[now];\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)\n        e2[i].reserve(4),\n        e[i].reserve(4);\n    for(int i=1;i<=m;i++)\n    {\n        int s=read(),t=read();\n        e[t].push_back(s);\n    }\n    \n    for(int i=1;i<=n;i++)\n        if(dfn[i]==0)\n            Tarjan(i);\n    for(int i=1;i<=n;i++)\n        for(int j=0;j<int(e[i].size());j++)\n            if(belong[i]!=belong[e[i][j]])\n                e2[belong[i]].push_back(belong[e[i][j]]);\n    for(int i=1;i<=nd_tot;i++)\n        if(vis[i]==false)\n            dfs(i);\n        \n    printf(\"%d\",ans);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1528191020,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2atarjan\u5f3a\u8fde\u901a\u5206\u91cf\u4e0e\u51fa\u5ea6\u7ed3\u5408\u7684\u4f8b\u9898\u3002\n\n\u5148\u660e\u786e\u4e00\u4e0b\u9898\u610f\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\uff08\u7f29\u70b9\u4e4b\u540e\u7684\uff09\u6ca1\u6709\u51fa\u5ea6\uff0c\u8fd9\u4e2a\u70b9\u624d\u80fd\u6210\u4e3a\u660e\u661f\u725b\uff08\u660e\u661f\u725b\u7684\u5b9a\u4e49\u662f\uff1a\u6240\u6709\u725b\u90fd\u559c\u6b22\u4ed6\u624d\u53ef\u4ee5\uff09\u3002\n\n\u7531\u4e8e\u6211\u4eec\u8fdb\u884c\u4e86\u7f29\u70b9\uff0c\u6240\u4ee5\u6211\u5c31\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4num[i]:\u8868\u793a\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\u3002\n\n```cpp\n\tint sum = 0;\n\tfor(int i=1;i<=cnt;i++)\n\t  if(!chu[i])  ans = num[i] , sum++;\n\tif(sum >= 2)  printf(\"0\");\n\telse printf(\"%d\",ans);\n```\n\n\u4ee5\u4e0a\u5c31\u662f\u600e\u6837\u5904\u7406\u6700\u540e\u7684\u7b54\u6848\uff1a\n\n\u5982\u679c\u6211\u4eec\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u51fa\u5ea6\u4e3a 0 \u70b9\uff08\u7f29\u70b9\u540e\u7684\uff09\uff0c\u8bf4\u660e\u8fd9\u51e0\u4e2a\u51fa\u5ea6\u4e3a 0 \u7684\u70b9\uff08\u7f29\u70b9\u540e\uff09\u4e92\u76f8\u4e0d\u559c\u6b22\uff0c\u6240\u4ee5\u6ca1\u6709\u660e\u661f\u725b\u3002\n\n\u5426\u5219\u5c31\u6709\u660e\u661f\u725b\uff08\u660e\u661f\u725b\u7684\u4e2a\u6570\u5c31\u662f\u51fa\u5ea6\u4e3a 0 \u7684\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u4e2a\u6570\uff09\uff0c\u5f88\u597d\u60f3\u5427\uff1a\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u725b\u4e92\u76f8\u559c\u6b22\uff0c\u800c\u5176\u4ed6\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u725b\u4e5f\u559c\u6b22\u4ed6\u4eec\uff0c\u7b49\u91cf\u4ee3\u6362\u6240\u6709\u725b\u90fd\u559c\u6b22\u4ed6\n\n\n\u9996\u5148\u662ftarjan\u7f29\u70b9\u4e2d\u7684\u51e0\u4e2a\u6570\u7ec4\uff1a\n\n     dfn[i]:i\u70b9\u7684\u65f6\u95f4\u6233\n\n     low[i]\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u4ee5\u53ca\u5176\u5b50\u5b59\u8282\u70b9\u8fde\u7684\u6240\u6709\u70b9\u4e2ddfn\u6700\u5c0f\u7684\u503c\n\n     stack[]\uff0c\u8868\u793a\u5f53\u524d\u6240\u6709\u53ef\u80fd\u80fd\u6784\u6210\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u3002\n\n     ins[i]\uff0c\u8868\u793a i \u662f\u5426\u5728stack[ ]\u6570\u7ec4\u4e2d\n\n     num[i],\u8868\u793a\u7b2c i \u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\n\n     belong[i],\u8868\u793a\u7b2c i \u70b9\u5728\u54ea\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\n     \n\u4e0b\u9762\u5c31\u662fAC\u4ee3\u7801\u4e86\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 1e4 + 4;\nconst int maxm = 5e4 + 4;\n\nint n,m,u,v;\nint head[maxn],tot;\nint dfn[maxn],low[maxn],ind;\nint stack[maxn],top,num[maxn],belong[maxn],cnt;\nbool ins[maxn];\nint chu[maxn],ans;\nstruct Edge{\n\tint from,to,next;\n}edge[maxm];\n\nvoid add(int u,int v){\n\tedge[++tot].from = u;\n\tedge[tot].to = v;\n\tedge[tot].next = head[u];\n\thead[u] = tot;\n}\n\nint read(){\n\tchar ch = getchar();\n\tint f = 1 , x = 0;\n\twhile(ch > '9' || ch < '0'){\n\t\tif(ch == '-')  f = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9'){\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar(); \n\t}\n\treturn x * f;\n}\n\nvoid tarjan(int x){\n\tdfn[x] = low[x] = ++ind;\n\tstack[++top] = x;\n\tins[x] = true;\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif(ins[v]) low[x] = min(low[x] , dfn[v]);\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[x] = min(low[x] , low[v]);\n\t\t}\n\t}\n\tint k = 0;\n\tif(dfn[x] == low[x]){\n\t\tcnt++;\n\t\tdo{\n\t\t\tk = stack[top];\n\t\t\tnum[cnt]++;\n\t\t\ttop--;\n\t\t\tins[k] = false;\n\t\t\tbelong[k] = cnt;\n\t\t} while(k != x);\n\t}\n} \n\nint main(){\n\tn = read();  m = read();\n\tfor(int i=1;i<=m;i++){\n\t\tu = read();  v = read();\n\t\tadd(u , v);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t  if(!dfn[i])  tarjan(i);\n\tfor(int i=1;i<=m;i++){\n\t\tif(belong[edge[i].from] != belong[edge[i].to]){\n\t\t\tchu[belong[edge[i].from]]++;\n\t\t}\n\t}\n\tint sum = 0;\n\tfor(int i=1;i<=cnt;i++)\n\t  if(!chu[i])  ans = num[i] , sum++;\n\tif(sum >= 2)  printf(\"0\");\n\telse printf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1536568048,
        "uid": 54635,
        "name": "Kevin_F",
        "ccfLevel": 0,
        "title": "\u53d7\u6b22\u8fce\u7684\u725b"
    },
    {
        "content": "\u65e2\u7136\u7231\u6155\u5173\u7cfb\u53ef\u4ee5\u4f20\u9012\uff0c\u90a3\u4e48\u5c06\u4e92\u76f8\u53ef\u8fbe\u7684\u67d0\u51e0\u4e2a\u70b9\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u5c31\u80fd\u7b80\u5316\u539f\u56fe\u4e86\uff0c\n\n\u90a3\u4e48\u5f88\u81ea\u7136\u60f3\u5230tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n\n\u90a3\u4e48\u5c31\u53ea\u9700\u627e\u5230\u53ef\u4ee5\u88ab\u6240\u6709\u7f29\u70b9\u904d\u5386\u5230\u7684\u90a3\u4e2a\u7f29\u70b9\n\n\u518d\u8f93\u51fa\u5b83\u6240\u542b\u7684\u70b9\u6570\u5c31\u884c\u4e86\n\n\u672c\u9898\u9700\u8981\u7528\u5230\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u7ed3\u8bba\uff1a\n\n\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a0 \uff08\u6ca1\u6709\u6307\u5411\u5176\u4ed6\u70b9\u7684\u8fb9\uff09\uff0c\u90a3\u4e48\u8be5\u70b9\u53ef\u4ee5\u88ab\u6240\u6709\u70b9\u904d\u5386\u5230\uff1b\u53cd\u4e4b\uff0c\u8be5\u56fe\u4e2d\u6ca1\u6709\u53ef\u4ee5\u88ab\u6240\u6709\u70b9\u904d\u5386\u5230\u7684\u70b9\n\n\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u88ab\u6240\u6709\u70b9\u904d\u5386\u5230\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a0\n\n\u53ef\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff0c\n\n\n\n\n\n\n\n            \n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstack<int>sta;\nint e=0,f=0,low[10004],nscc[10004],dfn[10004],head[10004],head2[10004],dfs_clock,sccno[10004],sccw[10004],scc_cnt,w[10004],dp[10004],ans,n,m;\nbool vis[10004];\nstruct node {\n    int v,next;\n} a[100004],b[100004];\nvoid insert(int u,int v) {\n    a[++e].v=v;\n    a[e].next=head[u];\n    head[u]=e;\n}\nvoid insert2(int u,int v) {\n    b[++f].v=v;\n    b[f].next=head2[u];\n    head2[u]=f;\n}\nvoid tarjan(int u) {\n    low[u]=dfn[u]=++dfs_clock;\n    sta.push(u);\n    for(int p=head[u]; p!=0; p=a[p].next) {\n        int v=a[p].v;\n        if(!dfn[v]) {\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        } else if(!sccno[v]) {\n            low[u]=min(low[u],dfn[v]);\n        }\n    }\n    if(low[u]==dfn[u]) {\n        scc_cnt++;\n        int x=0;\n        for(;;) {\n            x=sta.top();\n            sta.pop();\n            sccno[x]=scc_cnt;\n            nscc[scc_cnt]++;//nscc[i]\u8bb0\u5f55\u5f3a\u8fde\u901a\u5206\u91cfi\u6240\u542b\u7684\u70b9\u7684\u4e2a\u6570 \n            if(x==u)break;\n        }\n    }\n}\nint main() {\n    cin>>n>>m;\n    //for(int i=1; i<=n; i++)scanf(\"%d\",&w[i]);\n    for(int i=1; i<=m; i++) {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        insert(u,v);\n        //    insert2(v,u);\n    }\n    for(int i=1; i<=n; i++) {\n        if(!dfn[i])tarjan(i);\n    }\n    bool flag[scc_cnt+10][scc_cnt+10];\n    for(int i=1; i<=n; i++)//\u904d\u5386\u6240\u6709\u7684\u70b9 \n        for(int p=head[i]; p; p=a[p].next) {//\u904d\u5386\u6bcf\u4e2a\u70b9\u7684\u8fb9 \n            if(!flag[sccno[i]][sccno[a[p].v]]&&sccno[i]!=sccno[a[p].v]) {//\u82e5i\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u4e0e\u5b83\u7684\u5b50\u8282\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fde\u63a5\uff0c \n                insert2(sccno[i],sccno[a[p].v]);//\u5219\u8fde\u63a5\u4e24\u4e2a\u7f29\u70b9 \n                flag[sccno[i]][sccno[a[p].v]]=1;\n            }\n        }\n    int po=0,starscc=0;\n    //po\u8bb0\u5f55\u51fa\u5ea6\u4e3a0\u7684\u70b9\u7684\u6570\u91cf \n    for(int i=1; i<=scc_cnt; i++)\n    if(!head2[i]) {//\u82e5i\u70b9\u6ca1\u6709\u513f\u5b50\uff0c\u5219\u8be5\u70b9\u6ca1\u6709\u51fa\u8fb9 \n            po++;\n            starscc=i;\n    }\n    if(po==1) {\n        cout<<nscc[starscc]<<endl;\n        return 0;\n    }\n    cout<<0<<endl;\n}\n```",
        "postTime": 1508851358,
        "uid": 55643,
        "name": "WanchengNotWildMan",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "## **Tarjan \u7b97\u6cd5**\n\n\u4f20\u9001\u95e8\uff1a[P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b|\u3010\u6a21\u677f\u3011\u5f3a\u8fde\u901a\u5206\u91cf](https://www.luogu.org/problem/P2341)\n\n\u8fd9\u771f\u7684\u7b80\uff08du\uff09\u5355\uff08liu\uff09\n\n\u597d\u5427\n### $\\color{green}\\texttt{\u8fd9\u4e2a\u4e1c\u897f\u597d\u6076\u5fc3\u597d\u6076\u5fc3\u597d\u6076\u5fc3}$ \n\n\u5148\u8bb0\u5f55\u51e0\u4e2ablog\u8bb2\u89e3\uff08\u6211\u4e0d\u77e5\u9053\u8981\u4e0d\u8981\u7248\u6743\uff0c\u5982\u679c\u535a\u4e3b\u770b\u89c1\u6211\u7684\u8fd9\u7bc7\u6587\u7ae0\u4e86\u53ef\u4ee5\u5728\u6d1b\u8c37\u79c1\u4fe1\u6211\uff0c\u6211\u7684ID\u662f144762\uff09\n\n1.[tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf+\u7f29\u70b9+\u5272\u70b9/\u5272\u6865\uff08\u70b9\u53cc/\u8fb9\u53cc\uff09\u4ee5\u53ca\u4e00\u4e9b\u8bc1\u660e](https://www.cnblogs.com/stxy-ferryman/p/7779347.html)\n\n2.[[\u6d1b\u8c37\u65e5\u62a5\u7b2c23\u671f]\u521d\u63a2tarjan\u7b97\u6cd5 ](http://sohu.com/a/245954819_100201031)\n\n3.\u627e\u4e0d\u5230\u4e86\uff0c\u5230\u65f6\u6211\u4f1a\u8865\u4e0a\u7684\u3002\u3002\u3002\n\n------------------------------------------------------------\n\n\u8fd9\u4e2a\u7b97\u6cd5\u5462\uff0c\u5df2\u53d1\u9898\u89e3\u672c\u6765\u5df2\u7ecf\u6709\u5f88\u591a\u8bb2\u89e3\u4e86~~\u4f46\u662f\u6211\u5c31\u662f\u6ca1AC~~\uff0c\u4f46\u662f\u6211\u592a\u8822\u4e86\uff0c\u72af\u4e0b\u4e86\u8bb8\u591a\u5c0f\u9519\u8bef\uff0c\u6240\u4ee5\u624d\u5f04\u4e86\u4e00\u4e2a\u591a\u6708\u624d\u521d\u6b65\u6253\u51fa\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4ee3\u7801\u3002\n\n\u81f3\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u51e0\u70b9\uff1a\n\n------------------------------------------------------------\n\n#### 1.\u5982\u679c\u6709\u4e00\u5934\u725b\u53d7\u5230\u4e14\u4ec5\u53d7\u5230x\u5934\u5176\u4ed6\u725b\u7684\u7231\u6234\uff0c\u5e76\u4e14\u5b83\u4e0ep\u725b\u76f8\u4e92\u7231\u6234\uff0c\u90a3\u4e48p\u725b\u53d7\u5230\u4e14\u4ec5\u53d7\u5230x\u5934\u725b\u7684\u7231\u6234\u3002\n\n#### \u8fd9\u6837\u4e00\u770b\uff0c\u5c31\u76f8\u5f53\u4e8e\uff1a\u5982\u679c\u70b9A\u53ef\u4ee5\u4e14\u4ec5\u53ef\u4ee5\u88abx\u4e2a\u70b9\u8d70\u5230\uff0c\u5e76\u4e14A\u548cB\u76f8\u4e92\u901a\u8fbe\uff0c\u90a3\u4e48B\u4e5f\u53ef\u4ee5\u4e14\u4ec5\u53ef\u4ee5\u88abx\u70b9\u8d70\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4e92\u76f8\u7231\u6234\u7684\u4e00\u7fa4\u725b\u770b\u6210\u65b0\u7684\u4e00\u5934\u725b\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u7f29\u70b9\u201d\u3002\uff08\u81f3\u6b64\uff0c\u4e00\u4e0b\u7684\u4e00\u5934\u725b\u610f\u601d\u90fd\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u7fa4\u725b\uff09\n\n------------------------------------------------------------\n\n#### 2.\u5982\u679c\u6709\u4e24\u5934\u725b\uff0c\u4ed6\u4eec\u90fd\u6ca1\u6709\u7231\u6234\u7684\u5bf9\u8c61\uff0c\u8fd9\u8bf4\u660e\u5176\u4ed6\u7684\u6bcf\u4e00\u5934\u725b\u90fd\u53d7\u4e0d\u5230\u8fd9\u4e24\u5934\u725b\u7684\u7231\u6234\uff0c\u800c\u8fd9\u4e24\u5934\u725b\u90fd\u4e0d\u53d7\u5230\u5bf9\u65b9\u7684\u7231\u6234\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6ca1\u6709\u660e\u661f\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa0\u3002\n\n------------------------------------------------------------\n\n#### 3.\u5728\u53ea\u6709\u4e00\u5934\u725b\u4e0d\u7231\u6234\u5176\u4ed6\u4efb\u4f55\u4eba\uff08\u51fa\u5ea6\u4e3a0\uff09\uff0c\u5e76\u4e14\u6ca1\u6709\u60c5\u51b52\u7684\u65f6\u5019\uff0c\u8fd9\u8bf4\u660e\u6240\u6709\u725b\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u7231\u6234\u8fd9\u4e00\u5934\u725b\uff0c\u6240\u4ee5\u8fd9\u4e00\u5934\u725b\u5c31\u662f\u660e\u661f\u3002\uff08\u4e8b\u5b9e\u4e0a\u662f\u8fd9\u4e00\u7fa4\u725b\uff09\n\n------------------------------------------------------------\n\n\u7136\u540e\u6709\u7684\u840c\u65b0\uff08$\\color{blue}\\texttt{\u50cf\u6211}$ \uff09\u5c31\u6709\u4e2a\u95ee\u9898\u2014\u2014\u600e\u4e48\u7f29\u70b9\n\n\u5bf9\u4e8e\u7f29\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u57fa\u672cTarjan\u201c\u67d3\u8272\u201d\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u6bcf\u4e2a\u70b9\u6d53\u7f29\u540e\u5c5e\u4e8e\u54ea\u4e2a\u70b9\uff0c\u540c\u65f6\u7edf\u8ba1\u8fd9\u4e2a\u7f29\u70b9\u540e\u7684\u70b9\u6240\u5305\u542b\u7684\u539f\u6709\u70b9\u7684\u6570\u91cf\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u6839\u636e\u65e7\u7684\u8054\u7cfb\uff0c\u5728\u65b0\u7684\u56fe\u4e0a\u52a0\u8fb9\uff08\u8bb0\u5f97\u5224\u91cd\uff09\u3002\n\n\u8fd9\u5c31\uff08cai\uff09\u628a\u8fd9\u9053\u9898\u5f04\u5f97\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\u3002\u3002\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u8fd8\u4e0d\u662f\u5f88\u61c2\u7684\u53ef\u4ee5\u770b\u6ce8\u91ca\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 100005\nint n,m,t=0,c=0;\nint dfn[MAXN]={},low[MAXN],bel[MAXN],ct[MAXN]={};\nmap <int,bool> mm;//map\u5224\u91cd \nvector <int> vec[MAXN];\nvector <int> vec2[MAXN];\ndeque<int> que;\nvoid tarjan(int p)//Tarjan\n{\n\tdfn[p]=low[p]=++t;que.push_back(p);\n\tfor(int i=0;i<vec[p].size();i++)\n\t{\n\t\tif(dfn[vec[p][i]])\n\t\t\tlow[p]=min(low[p],dfn[vec[p][i]]);\n\t\telse\n\t\t{\n\t\t\ttarjan(vec[p][i]);\n\t\t\tlow[p]=min(low[p],low[vec[p][i]]);\n\t\t}\n\t}\n\tif(dfn[p]==low[p])//\u627e\u5230\u8fd4\u7956\u8fb9\uff0c\u5f00\u59cb\u67d3\u8272 \n\t{\n\t\tc++;\n\t\twhile(que.back()!=p)\n\t\t{\n\t\t\tbel[que.back()]=c;\n\t\t\tque.pop_back();\n\t\t\tct[c]++;//\u7edf\u8ba1 \n\t\t}\n\t\tbel[que.back()]=c;\n\t\tct[c]++; //\u7edf\u8ba1 \n\t\tque.pop_back();\n\t}\n}\n\nint main ( )\n{\n\tint shi,shou,ans=0,pos=0;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&shi,&shou);\n\t\tvec[shi].push_back(shou);//\u52a0\u8fb9 \n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(dfn[i]==0)\n\t\t\ttarjan(i);\n\tfor(int i=1;i<=n;i++)//\u73b0\u5728\u5f00\u59cb\u5efa\u7acb\u7f29\u70b9\u540e\u7684\u56fe \n\t{\n\t\tfor(int j=0;j<vec[i].size();j++)\n\t\t{\n\t\t\tint r=bel[vec[i][j]];\n\t\t\tif(r!=bel[i]&&!mm.count(bel[i]*99+r*9))//bel[i]*99+r*9 \u8fd9\u662f\u6211\u81ea\u5df1\u7684\u5224\u91cd\u65b9\u5f0f \n\t\t\t{\t\t\t\t\t\t\t\t//\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u8bbe\u7f6e\uff0c\u6211\u7684\u6bd4\u8f83\u7384\u5b66 \n\t\t\t\tvec2[bel[i]].push_back(r);\n\t\t\t\tmm[bel[i]*99+r*9]=true;//\u5224\u91cd\uff0c\u5176\u5b9e\u6211\u8fd9\u91cc\u672c\u6765\u662f\u6570\u7ec4\uff0c\u7136\u540eRE\u4e86 \n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=c;i++)\n\t{\n\t\tif(vec2[i].size()==0)\n\t\t{\n\t\t\tans++;\n\t\t\tpos=ct[i];\n\t\t}\n\t\tif(ans>1)//\u82e5\u679c\u6709\u4e24\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u51fa\u5ea6\u4e3a 0 \n\t\t{\n\t\t\tcout<<'0';//\u76f4\u63a5\u8f93\u51fa 0 \n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout<<pos;\n\treturn 0;\n}\n```\nPS:\u5927\u5bb6\u53ef\u4ee5\u67e5\u67e5\u6211\u7684\u8bb0\u5f55\uff0c\u6c72\u53d6\u6559\u8bad\uff0c\u6211\u7684ID\u5728\u6587\u7ae0\u5f00\u5934\u5df2\u7ecf\u7ed9\u51fa\n\nPS2\uff1a\u7ba1\u7406\u5927\u5927\u89c9\u5f97\u4e0d\u597d\uff0c\u6ca1\u5fc5\u8981\u7ed9\u901a\u8fc7\uff0c\u6211\u4e3b\u8981\u662f\u81ea\u6211\u53cd\u601d\u4e00\u4e0bqwq",
        "postTime": 1569144376,
        "uid": 144762,
        "name": "NIMNIM",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5c31\u50cf\u7b2c\u4e00\u7bc7\u9898\u89e3\u8bb2\u5230\uff0c\u672c\u9898\u5c31\u662f\u8981\u627e\u51fa \u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528tarjan\u627e\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff1b\n\u6807\u7a0b\uff1a\n```cpp\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++ti;\n\tstack[++top]=u;\n\tfor (int i=head[u];i;i=next[i]){\n\t\tint v=to[i];\n\t\tif (!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else if (!col[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (low[u]==dfn[u]){\n\t\tcol[u]=++co;\n\t\tsi[co]++;\n\t\twhile (stack[top]!=u){\n\t\t\tcol[stack[top--]]=co;\n\t\t\tsi[co]++;\n\t\t}\n\t\ttop--;\n\t}\n\treturn;\n}\n```\n\u63a5\u4e0b\u6765\u5c31\u662f\u8981\u8ba1\u7b97\u5404\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u51fa\u5ea6\uff0c\u6211\u7684\u65b9\u6cd5\u662f\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff1b\n```\nfor (int i=1;i<=n;i++){\n\t\tfor (int j=head[i];j;j=next[j]){\n\t\t\tif (col[i]==col[to[j]])continue;\n\t\t\tcol_out[col[i]]++;\n\t\t}\n\t}\n```\n\u6700\u540e\u5c31\u662f\u5f97\u51fa\u7b54\u6848\u4e86\uff0c\n\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u5751\uff0c\u82e5\u5bf9\u4e8e\u8be5\u56fe\uff0c\u5b58\u5728\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5219\u8868\u660e\u8be5\u56fe\u5e76\u4e0d\u8fde\u901a\u5219\u4e0d\u5b58\u5728\u201c\u660e\u661f\u725b\u201d\uff0c\n\u5373\u7b54\u6848\u4e3a0\uff1b\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;\n\tchar s=getchar();\n\twhile (s<'0' or s>'9'){\n\t\tif (s=='-') f=-1;\n\t\ts=getchar();\n\t}\n\twhile (s>='0'and s<='9'){\n\t\tx=(x<<3)+(x<<1)+s-'0';\n\t\ts=getchar(); \n\t}\n\treturn x*f;\n}\nconst int N=100000;\nconst int M=100000;\nint head[N],to[M],next[M];\nint stack[N],top,ti,dfn[N],low[N];\nint col[N],col_out[N],co,si[N];\nint n,m;\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++ti;\n\tstack[++top]=u;\n\tfor (int i=head[u];i;i=next[i]){\n\t\tint v=to[i];\n\t\tif (!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else if (!col[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (low[u]==dfn[u]){\n\t\tcol[u]=++co;\n\t\tsi[co]++;\n\t\twhile (stack[top]!=u){\n\t\t\tcol[stack[top--]]=co;\n\t\t\tsi[co]++;\n\t\t}\n\t\ttop--;\n\t}\n\treturn;\n}\nint main(){\n\tn=read();\n\tm=read();\n\tint a,b;\n\tfor (int i=1;i<=m;i++){\n\t\ta=read();\n\t\tb=read();\n\t\tto[i]=b;\n\t\tnext[i]=head[a];\n\t\thead[a]=i;\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tif (col[i])continue;\n\t\ttarjan(i);\n\t}\n\tfor (int i=1;i<=n;i++){\n\t\tfor (int j=head[i];j;j=next[j]){\n\t\t\tif (col[i]==col[to[j]])continue;\n\t\t\tcol_out[col[i]]++;\n\t\t}\n\t}\n//\tfor (int i=1;i<=n;i++){\n//\t\tcout<<i<<\" \"<<col[i]<<\" \"<<col_out[col[i]]<<endl;\n//\t}\n\tint ans=0;\n\tfor (int i=1;i<=co;i++){\n\t\tif (col_out[i]==0){\n\t\t\tif (ans==0) ans=si[i];\n\t\t\telse{\n\t\t\t\tcout<<0<<endl;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1540730707,
        "uid": 71109,
        "name": "\u6b8b\u8840\u5915\u9633",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u63a8\u8350\u535a\u5ba2\uff1ahttps://www.cnblogs.com/rmy020718/p/9440593.html\n\n\u5982\u679cA\u559c\u6b22B\uff0c\u90a3\u4e48A->B\u8fde\u8fb9\uff0c\u90a3\u4e48\u6574\u4e2a\u56fe\u50a8\u5b58\u4e0b\u6765\uff0c\u5982\u679c\u6709\u597d\u591a\u4e2a\u725b\u662f\u53d7\u6b22\u8fce\u7684\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u5728\u4e00\u4e2a\u73af\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u8dd1\u4e00\u8fb9 tarjan\u7f29\u70b9\uff0c\u90a3\u4e48\u53d7\u6b22\u8fce\u7684\u725b\u7fa4\u6240\u5728\u7684\u8fd9\u4e2a\u70b9(\u7f29\u5b8c)\uff0c\u5176\u51fa\u5ea6\u4e3a0\u3002\n\n\u8bc1\uff1a\u82e5\u5176\u51fa\u5ea6\u4e0d\u4e3a0\uff0c\u5219\u8868\u660e\u5bf9\u5916\u6709\u8fde\u8fb9\uff0c\u56e0\u4e3a\u725b\u7fa4\u662f\u53d7\u6b22\u8fce\u7684\u5219\u5916\u6765\u70b9\u5bf9\u5176\u4e5f\u5e94\u8be5\u6709\u8fde\u8fb9\uff0c\u90a3\u4e48\u4ed6\u4eec\u8fd9\u5c31\u4f1a\u5728\u4e00\u4e2a\u73af\u4e2d\u3002\n\n\u6240\u4ee5\u7f29\u5b8c\u70b9\u540e\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u6709\u591a\u5c11\u51fa\u5ea6\uff0c\u82e5\u4f1a\u5b58\u5728\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90a3\u4e48\u8868\u660e\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u8f93\u51fa0\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#define maxn int(1e2+2)\n#define N int(1e4+2)\n#define M int(5e4+2)\nusing namespace std;\nint n,m,ans[N],sum[N];\nstruct ahah{\n    int nxt,to;\n}edge[M];\nint head[N],tot;\nvoid add(int x,int y)\n{\n    edge[++tot].nxt=head[x],edge[tot].to=y,head[x]=tot;\n}\nbool in[N];\nint dfn[N],low[N],indx;\nint stack[N],top;\nint belong[N],cnt;\nvoid tarjan(int s)\n{\n    dfn[s]=low[s]=++indx;\n    in[s]=1,stack[++top]=s;\n    for(int i=head[s];i;i=edge[i].nxt)\n    {\n        int v=edge[i].to;\n        if(!dfn[v])\n        {\n            tarjan(v);\n            low[s]=min(low[v],low[s]);\n        }\n        else if(in[v]&&low[s]>dfn[v])low[s]=dfn[v];\n    }\n    if(dfn[s]==low[s])\n    {\n        int p;\n        belong[s]=++cnt;\n        do\n        {\n            p=stack[top--];\n            in[p]=0;\n            belong[p]=cnt;\n        }while(p!=s);\n    }\n}\nint main()\n{\n    int x,y;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)scanf(\"%d%d\",&x,&y),add(x,y);\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])tarjan(i);\n    for(int i=1;i<=n;i++)\n    {\n        ans[belong[i]]++;\n        for(int j=head[i];j;j=edge[j].nxt)\n            if(belong[i]!=belong[edge[j].to])sum[belong[i]]++;\n    }\n    int p=0;\n    for(int i=1;i<=cnt;i++)\n    {\n        if(!sum[i])\n        {\n            if(p)\n            {\n                printf(\"0\");\n                return 0;\n            }\n            p=i;\n        }\n    }\n    printf(\"%d\",ans[p]);\n}\n```",
        "postTime": 1533782527,
        "uid": 61727,
        "name": "Manjusaka\u4e36\u68a6\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "~~\u8fd9\u662f\u6211\u5199\u8fc7\u6700\u957f\u7684\u975e\u6a21\u62df\u9898\u4ee3\u7801\u4e86~~\n\n\u601d\u8def\u5c31\u662f\u5f3a\u8fde\u901a\uff0c\u7f29\u70b9\uff0c\u968f\u540e\u627e\u5230\u552f\u4e00\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u8054\u901a\u5757\uff08\u5982\u679c\u4e0d\u552f\u4e00\u5219\u5c31\u65e0\u89e3\uff0c\u8f93\u51fa0\uff09\uff0c\u8f93\u51fa\u8fd9\u4e2a\u70b9\u91cc\u7684\u5976\u725b\u6570\u5373\u53ef\u3002\n\n\u6211\u4e0d\u4f1atarjan\uff0c\u4e8e\u662f\u4ee3\u7801\u53c8\u957f\u53c8\u4e71\uff0c\u540e\u6765\u7f29\u70b9\u8fde\u8fb9\u65f6\u7684\u64cd\u4f5c\u6709\u4e2a\u5c0f\u9519\u8bef\u4e00\u76f4\u6ca1\u53d1\u73b0\uff0c45\u5206\u56f0\u6270\u4e86\u5f88\u4e45\uff0c\u7136\u540e\u5fc3\u6001\u5d29\u76d8\u3002\n\n\u5176\u5b9e\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u6211\u73b0\u5728\u7684\u4ee3\u7801\u6bd4\u62d3\u6251\u6392\u5e8f\u77ed\u5f88\u591a\uff0c\u56e0\u4e3a\u540e\u6765\u53d1\u73b0\u62d3\u6251\u6392\u5e8f\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u51fa\u7b54\u6848\u3002\n\n\u8d34\u4e0a\u4ee4\u4eba\u53d1\u614c\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,mm;\nint op;\nstruct ha\n{\n    int id,s;\n}a[100000];\nbool b[100000];\nint dis[100000];\n\nbool cmp(const ha &aa,const ha &bb)\n{\n    return aa.s>bb.s;\n}\n\nvector<int> q[60000];\nvector<int> rq[60000];\n\nint r[100000];\nvector<int> m[60000];\n\nbool ok[100000];\nbool oo[100000];\nint an[100000];\nint ans[100000];\n\nint d;\n\nvoid dfs(int x)\n{\n    for(int i=0;i<q[x].size();i++)\n    {\n        int nx=q[x][i];\n        if(b[nx])continue;\n        b[nx]=1;\n        dfs(nx);\n    }\n    op++;\n    a[x].id=x;\n    a[x].s=op;\n}\n\nvoid di(int x)\n{\n    dis[x]=op;\n    for(int i=0;i<rq[x].size();i++)\n    {\n        int nx=rq[x][i];\n        if(dis[nx]!=0)continue;\n        di(nx);\n    }\n}\n\nvoid ddd(int x,int k)\n{\n    for(int i=0;i<q[x].size();i++)\n    {\n        int nx=q[x][i];\n        if(ok[dis[nx]]||oo[nx])continue;\n        oo[nx]=1;\n        if(dis[nx]==k)\n        {\n            ddd(nx,k);\n        }\n        if(dis[nx]!=k)\n        {\n            ok[dis[nx]]=1;\n            r[dis[nx]]++;\n            an[k]++;\n            m[k].push_back(dis[nx]);\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&mm);\n    for(int i=1;i<=mm;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        q[x].push_back(y);\n        rq[y].push_back(x);\n    }\n\n    for(int i=1;i<=n;i++)\n    {\n        if(b[i])continue;\n        b[i]=1;\n        dfs(i);\n        op++;\n        a[i].id=i;\n        a[i].s=op;\n    }\n\n    sort(a+1,a+1+n,cmp);\n    op=0;\n\n    for(int i=1;i<=n;i++)\n    {\n        if(dis[a[i].id]!=0)continue;\n        op++;\n        di(a[i].id);\n    }\n\n\n    memset(b,0,sizeof(b));\n    for(int i=1;i<=n;i++)\n    {\n        ans[dis[i]]++;\n        if(b[dis[i]])continue;\n        memset(oo,0,sizeof(oo));\n        memset(ok,0,sizeof(ok));\n        b[dis[i]]=1;\n        ddd(i,dis[i]);\n    }\n\n    for(int i=1;i<=op;i++)\n    {\n        if(an[i]==0)\n        {\n            if(d>0)\n            {\n                printf(\"0\\n\");\n                return 0;\n            }\n            d+=ans[i];\n        }\n    }\n    printf(\"%d\\n\",d);\n\n    return 0;\n}\n\n```",
        "postTime": 1532358332,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "## \u8bb0\u5fc6\u5316\u641c\u7d22+Tarjan\n\n\u9996\u5148\u6211\u4eec\u60f3\u60f3\u66b4\u529b\uff1a $O[N(N+m)]$ \u663e\u7136\u70b8\u4e86\n\n\u4e8e\u662f\u60f3\u5230\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u9898\u76ee\u7ed9\u51fa\u7684\u662f\u4e00\u4e2a\u7b49\u4ef7\u5173\u7cfb\uff0c\u800c\u663e\u7136\u540c\u4e00\u4e2aSCC\u91cc\u9762\u7684\u5976\u725b\u90fd\u53ef\u8fbe\uff0c\u4e8e\u662f\u6211\u4eec\u5148\u7f29\u70b9\uff0c\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5305\u62ec\u591a\u5c11\u5976\u725b\uff0c\u518d\u53d6\u53cd\u56fe\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u627e\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5230\u6240\u6709\u70b9\u3002\n\n\u6574\u5f20\u56fe\u73b0\u5728\u662f\u4e2aDAG\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff1a\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\u70b9\u6ee1\u8db3\u5176\u4ed6\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u3002\n\n**\u8bc1\u660e:** \u5047\u8bbe\u5b58\u5728\u4e24\u4e2a\u8fd9\u6837\u7684\u70b9A\u548cB\uff0c\u90a3\u4e48\u7531\u4e8e\u5176\u4ed6\u70b9\u90fd\u53ef\u4ee5\u5230A\uff0c\u81ea\u7136B\u4e5f\u53ef\u4ee5\u5230A\uff1b\u540c\u7406A\u4e5f\u53ef\u4ee5\u5230B\uff0c\u56e0\u6b64A\u548cB\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u4f46\u662f\u5b83\u4eec\u5728\u7f29\u70b9\u540e\u662f\u4e24\u4e2a\u70b9\uff0c\u4e0e\u4e0a\u8ff0\u77db\u76fe\uff0c\u4e8e\u662f\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u4e0d\u5b58\u5728\u4e24\u4e2a\u70b9\uff0c\u6ee1\u8db3\u5176\u4ed6\u6240\u6709\u5e97\u90fd\u53ef\u4ee5\u5230\u5b83\u4eec\u3002\n\n\u65e2\u7136\u662fDAG\uff0c\u4e0d\u59a8\u8bbe$f(i):$\u7531i\u53ef\u4ee5\u5230\u51e0\u4e2a\u70b9\uff08\u5305\u62eci\uff09\uff0c\u76f4\u63a5\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\u3002\u6ce8\u610f\u5224\u65ad\uff1a\u5982\u679c\u56fe\u4e0a\u80fd\u5230\u7684\u70b9\u7684\u6570\u76ee\u6700\u5927\u503c\u90fd\u6ca1\u6709\u8fbe\u5230SCC\u6570\u76ee\uff0c\u8981\u8f93\u51fa0.\n\n\u590d\u6742\u5ea6\uff1a$O(N+M)$\n\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n#include <stack>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 10000, MAXM = 50000;\nstruct Edge{\n    int v,next;\n};\nstruct AdjTable{\n    int e_ptr=1,head[MAXN+10];\n    Edge E[MAXM*2+10];\n    void addedge(int u,int v){\n        E[e_ptr]=(Edge){v,head[u]};head[u]=e_ptr++;\n    }\n}; \ninline int readint() {\n    register int f=1,r=0;\n    register char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1; c=getchar();}\n    while(isdigit(c)){r=r*10+c-'0'; c=getchar();}\n    return f*r;\n}\n\nint N,M,maxp,maxv,W[MAXN+10],scc_cnt,dfs_clock,dfn[MAXN+10],low[MAXN+10],sccno[MAXN+10],opt[MAXN+10];\nstack<int> S; AdjTable G1,G2; \n\nvoid dfs(int u) {\n    low[u]=dfn[u]=++dfs_clock;\n    S.push(u);\n    for(int j=G1.head[u];j;j=G1.E[j].next) {\n        int v=G1.E[j].v;\n        if(!dfn[v]) {\n            dfs(v); low[u]=min(low[u],low[v]);\n        } else if(!sccno[v]) \n            low[u]=min(low[u],dfn[v]);\n    }\n    if(low[u]==dfn[u]) {\n        ++scc_cnt;\n        int v;\n        do {\n            v=S.top();\n            sccno[v]=scc_cnt;\n            W[scc_cnt]++;\n            S.pop();\n        } while(u!=v);//!\n    }\n}\n\nvoid Tarjan(){\n    for(int i=1;i<=N;i++)\n        if(!dfn[i]) dfs(i);\n}\n\nvoid Rebuild() {\n    for(int u=1;u<=N;u++) {\n        for(int j=G1.head[u];j;j=G1.E[j].next) {\n            int v=G1.E[j].v;\n            if(sccno[u]!=sccno[v])\n                G2.addedge(sccno[v],sccno[u]);\n        }\n    }\n}\n\nint dp(int u) {\n    if(opt[u]>0) return opt[u];\n    opt[u]=1;\n    for(int j=G2.head[u];j;j=G2.E[j].next) {\n        int v=G2.E[j].v;\n        opt[u]+=dp(v);\n    }\n    return opt[u];\n}\n\nint main() {\n    N=readint(); M=readint();\n    for(int i=1;i<=M;i++) {\n        int a,b;a=readint();b=readint();\n        G1.addedge(a,b);\n    }\n    Tarjan(); \n    Rebuild();\n    for(int i=1;i<=scc_cnt;i++)\n        if(dp(i)>maxv) {\n            maxv=dp(i);maxp=i;\n        }\n    if(maxv == scc_cnt)\n        printf(\"%d\",W[maxp]);\n    else printf(\"0\");\n}\n```",
        "postTime": 1507126406,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u770b\u5c31\u662f\u4e00\u9053\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u9898\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u53c2\u8003\u6211\u7684[\u535a\u5ba2](https://www.luogu.org/blog/chihik/qiang-lian-tong-fen-liang)\u3002\n\n\u5f53\u6211\u4eec\u7528$Tarjan$\u7f29\u70b9\u4e4b\u540e\uff0c\u8bb0\u65b0\u56fe\u70b9\u7684\u4e2a\u6570\u4e3a$cnt$\u3002\u6211\u4eec\u679a\u4e3e\u539f\u56fe\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u8ba1\u7b97\u65b0\u56fe\u4e2d\u7684\u70b9\u7684\u51fa\u5ea6\u3002\u5bf9\u4e8e\u70b9$i$\uff0c\u6211\u4eec\u628a\u5b83\u7684\u51fa\u5ea6\u8bb0\u4e3a$Out[i]$\u3002\u90a3\u4e48\uff0c\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1.\u6ca1\u6709\u4e00\u4e2a$Out[i]$\u4e3a0\uff0c\u8bf4\u660e\u6bcf\u4e00\u4e2a\u70b9\u81f3\u5c11\u6709\u4e00\u6761\u8fde\u5411\u5176\u4ed6\u8fb9\u7684\u6709\u5411\u8fb9\uff0c\u90a3\u4e48\u65b0\u56fe\u81f3\u5c11\u6709$cnt$\u6761\u8fb9\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u73af(\u56e0\u4e3a$cnt-1$\u6761\u8fb9\u662f\u4e00\u68f5\u6811\uff0c\u65e0\u8bba\u5982\u4f55\u52a0\u8fb9\u90fd\u4f1a\u6784\u6210\u73af)\uff0c\u4f46\u7f29\u70b9\u540e\u4e0d\u53ef\u80fd\u6709\u73af\uff0c\u77db\u76fe\u3002\n\n2.\u53ea\u6709\u4e00\u4e2a$Out[i]$\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u53d7\u5230\u6240\u6709\u5976\u725b\u7684\u819c\u62dc\uff0c\uff08\u5176\u4ed6\u5976\u725b\u51fa\u5ea6\u4e0d\u4e3a0\uff0c\u4f1a\u819c\u62dc\u5176\u4ed6\u5976\u725b\uff0c\u8fd9\u6837\u819c\u6765\u819c\u53bb\u4e00\u5b9a\u4f1a\u6c47\u96c6\u5230\u51fa\u5ea6\u4e3a0\u7684\u5976\u725b\u4e0a\uff0c~~\u4e0d\u7406\u89e3\u7684\u81ea\u884c\u8111\u8865\u4e00\u4e0b~~\uff09\n\n3.\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684$Out[i]$\u4e3a0\uff0c\u90a3\u4e48\u6bcf\u4e2a\u4eba\u81f3\u5c11\u5f97\u4e0d\u5230\u4e00\u7fa4\u5976\u725b\uff08\u5df2\u7ecf\u7f29\u70b9\uff0c\u53ef\u80fd\u4e0d\u6b62\u4e00\u5934\uff09\u7684\u652f\u6301\u3002\u76f4\u63a5\u8f93\u51fa0\u3002\n\n\n\u7efc\u5408\u4ee5\u4e0a\u4e09\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u6b63\u89e3\u4e86\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <stack>\n#include <iostream>\nusing namespace std;\n\nconst int MAXN = 10000;\nint n,m,x,y;\nvector< int > Graph[ MAXN + 5 ];\nvector< int > lit_Graph[ MAXN + 5 ];\nstack< int > s;\n\nint dfn[ MAXN + 5 ] , low[ MAXN + 5 ] , depth , cnt;\nint belong[ MAXN + 5 ] , num[ MAXN + 5 ] , Out[ MAXN + 5 ];\nbool is[ MAXN + 5 ];\nvoid Tarjan( int u ) {\n    dfn[ u ] = low[ u ] = ++ depth;\n    is[ u ] = 1 , s.push( u );\n\n    int v;\n    for( int i = 0 ; i < Graph[ u ].size( ) ; i ++ ) {\n        v = Graph[ u ][ i ];\n        if( !dfn[ v ] ) {\n            Tarjan( v );\n            low[ u ] = min( low[ u ] , low[ v ] );\n        }\n        else if( is[ v ] )\n            low[ u ] = min( low[ u ] , dfn[ v ] );\n    }\n    if( dfn[ u ] == low[ u ] ) {\n        cnt ++;\n        do{\n            v = s.top( );\n            is[ v ] = 0 , s.pop( );\n            belong[ v ] = cnt;\n            num[ cnt ] ++;\n        }while( u != v );\n    }\n}\n\nint main( ) {\n    scanf(\"%d %d\",&n,&m);\n    for( int i = 1 ; i <= m ; i ++ ) {\n        scanf(\"%d %d\",&x,&y);\n        Graph[ x ].push_back( y );\n    }\n    for( int i = 1 ; i <= n ; i ++ )\n        if( !dfn[ i ] ) Tarjan( i );\n    for( int i = 1 ; i <= n ; i ++ )\n        for( int j = 0 ; j < Graph[ i ].size( ) ; j ++ ) {\n            int u = belong[ i ] , v = belong[ Graph[ i ][ j ] ];\n            if( u != v ) {\n                lit_Graph[ u ].push_back( v );\n                Out[ u ] += num[ v ];\n            }\n        }\n    int Ans = 0 , tot = 0;\n    for( int i = 1 ; i <= cnt ; i ++ )\n        if( Out[ i ] == 0 ) Ans += num[ i ] , tot ++;\n    printf(\"%d\",tot >= 2 ? 0 : Ans);\n    return 0;\n}\n```\n",
        "postTime": 1563788213,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u901b\u4e86\u4e00\u5708\u53d1\u73b0\u6ca1\u6709Pascal\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u6765\u53d1\u4e00\u4e2a\u3002\u672c\u4eba\u849f\u84bb\uff0c\u5982\u6709\u4e0d\u59a5\u4e4b\u5904\uff0c\u5404\u4f4d\u795e\u7287\u656c\u8bf7\u8c05\u89e3\u3002\n\n\u6211\u4eec\u628a\u6bcf\u5934\u5976\u725b\u89c6\u4f5c\u4e00\u4e2a\u70b9\uff0c\u628a\u6240\u4ee5\u201c\u540c\u610f\u5173\u7cfb\u201d\u89c6\u4f5c\u4e00\u6761\u6709\u5411\u8fb9\u3002\u8fd9\u6837\u5efa\u7acb\u4e86\u4e00\u4e2a\u6709\u5411\u56fe\u3002\n\n\u7136\u540e\u4f7f\u7528Tarjan\u6c42\u51fa\u56fe\u4e2d\u7684\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u5206\u91cf\u4e2d\u7684\u70b9\u7684\u4e2a\u6570\uff08\u7528\u4e8e\u4ee5\u540e\u7edf\u8ba1\uff09\uff0c\u7f29\u70b9\u4ee5\u540e\u7edf\u8ba1\u65b0\u56fe\uff08\u4fdd\u8bc1\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff09\u4e2d\u6709\u51e0\u4e2a\u70b9\uff08\u5c31\u662f\u65e7\u56fe\u4e2d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff09\u51fa\u5ea6\u4e3a\u96f6\u3002\u5982\u679c\u53ea\u6709\u552f\u4e00\u4e00\u4e2a\u70b9\u51fa\u5ea6\u4e3a\u96f6\uff0c\u90a3\u4e48\u5b83\u6240\u5305\u542b\u7684\u65e7\u70b9\u6570\u91cf\u5c31\u662f\u7b54\u6848\u3002\u5982\u679c\u5927\u4e8e1\uff0c\u90a3\u4e48\u8f93\u51fa0\uff08\u6709\u4e24\u62e8\u751a\u81f3\u66f4\u591a\u62e8\u5976\u725b\u5728\u4e92\u603c)\u3002\u56e0\u4e3a\u65b0\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u3002\n\n~~\u6211\u7684\u4ee3\u7801\u53ef\u80fd\u6709\u70b9\u4e11\uff0c\u5927\u5bb6\u5fcd\u5fcd~~\n```cpp\nuses math;\nvar i,j,k,l,m,n,s,t,x,y,z,c,r,ans,s1,s2,s3,top:longint;\nhd,u,v,p,dfn,low,q,id,num,xp,yp,outp:array[0..200009]of longint;\nprocedure into(x,y:longint);\nbegin\n inc(t);\n u[t]:=y;\n v[t]:=hd[x];\n hd[x]:=t;\nend;\nprocedure tarjan(x:longint);//\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\nvar i,j:longint;\nbegin\n inc(t);\n dfn[x]:=t;\n low[x]:=t;\n inc(top);\n q[top]:=x;\n p[x]:=1;\n i:=hd[x];\n if hd[x]<>0 then\n  repeat\n   if dfn[u[i]]=0 then\n   begin\n    tarjan(u[i]);\n    low[x]:=min(low[x],low[u[i]]);\n   end else if p[u[i]]=1 then low[x]:=min(low[x],dfn[u[i]]);\n   i:=v[i];\n  until i=0;\n if low[x]=dfn[x] then\n begin\n  inc(s);\n  repeat\n   id[q[top]]:=s;\n   //p[q[top]]:=0;\n   dec(top);\n   inc(num[s]);\n  until q[top+1]=x;\n end;\nend;\nbegin\n read(n,m);\n for i:=1 to m do\n begin\n  read(xp[i],yp[i]);\n  into(xp[i],yp[i]);\n end;\n t:=0;\n s:=0;\n for i:=1 to n do\n  if p[i]=0 then tarjan(i);\n for i:=1 to m do\n  if id[xp[i]]<>id[yp[i]] then inc(outp[id[xp[i]]]);\n t:=0;\n for i:=1 to s do\n  if outp[i]=0 then\n  begin\n   inc(k,num[i]);\n   inc(t);\n  end;\n case t of\n  1:writeln(k);\n  2:writeln(0);\n end;\nend.\n```",
        "postTime": 1521721566,
        "uid": 34961,
        "name": "\u53d6\u540d\u6700\u70e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5230\u73b0\u5728\u624d\u6765\u5b66\u5f3a\u8fde\u901a\u5206\u91cfQaQ(\u4f5c\u4e3a\u6ca1\u6709\u6559\u7ec3\u5b66\u6821\u4e0d\u641eOI\u7684\u849f\u84bb\u6280\u80fd\u6811\u5b8c\u5168\u4e0d\u5e73\u8861)  \n\u6ce8\u610f\u7406\u89e3\u975e\u6811\u8fb9\u5bf9low\u7684\u66f4\u65b0:  \n\u53ea\u6709\u8fd4\u7956\u8fb9\u5165\u70b9\u7684dfn\u548c\u5165\u70b9\u672a\u5212\u5230\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6a2a\u53c9\u8fb9\u624d\u662f\u5408\u7406\u7684\u66f4\u65b0low\u3002\u5176\u4ed6\u975e\u6811\u8fb9\u5747\u4e0d\u53ef\u3002\u7136\u540e\u6839\u636edfs\u7684\u6027\u8d28,\u5e94\u5f53\u5224\u65ad\u975e\u6811\u8fb9\u6307\u5411\u7684\u70b9\u6709\u6ca1\u6709\u52a0\u5165\u5f3a\u8fde\u901a\u5206\u91cf\u3002  \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 12345, M = 56789;\nint head[N], ver[M], nex[M], my[M], tot;\ninline void addedge(int u, int v) {\n\tver[tot] = v; nex[tot] = head[u]; my[tot] = u; head[u] = tot++;\n}\n\nint dfn[N], low[N], cl[N], sta[N], outd[N], num[N], top = 0, dfs_clock = 1, col = 1;\nvoid dfs(int cur) {\n\tdfn[cur] = low[cur] = dfs_clock++;\n\tsta[top++] = cur;\n\tfor(int i = head[cur]; ~i; i = nex[i]) {\n\t\tif(!dfn[ver[i]]) {\n\t\t\tdfs(ver[i]);\n\t\t\tlow[cur] = min(low[cur], low[ver[i]]);\n\t\t} else if(!cl[ver[i]]) {\n\t\t\tlow[cur] = min(low[cur], dfn[ver[i]]);\n\t\t}\n\t}\n\tif(dfn[cur] == low[cur]) {\n\t\t--top;\n\t\twhile(sta[top] != cur) {\n\t\t\tcl[sta[top]] = col;\n\t\t\t++num[col];\n\t\t\t--top;\n\t\t}\n\t\tcl[cur] = col;\n\t\t++num[col];\n\t\t++col;\n\t}\n}\n\nint main() {\n\tmemset(head, -1, sizeof(head));\n\tint n, m, u, v, tms = 0, ans;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\taddedge(u, v);\n\t}\n\tfor(int i = 1; i <= n; ++i) if(!dfn[i]) \n\t\tdfs(i);\n\tfor(int i = 0; i < tot; ++i) {\n\t\tif(cl[my[i]] != cl[ver[i]]) {\n\t\t\t++outd[cl[my[i]]];\n\t\t}\n\t}\n\tfor(int i = 1; i < col; ++i)\n\t\tif(!outd[i]) {\n\t\t\t++tms;\n\t\t\tans = num[i];\n\t\t}\n\tif(tms == 1) {\n\t\tprintf(\"%d\\n\", ans);\n\t} else {\n\t\tprintf(\"0\\n\");\n\t}\n\treturn 0;\t\n}\n```",
        "postTime": 1573131350,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "[\u5f3a\u8fde\u901a\u5206\u91cf]\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b|\u3010\u6a21\u677f\u3011\u5f3a\u8fde\u901a\u5206\u91cf\u3011"
    },
    {
        "content": "## tarjan\u6a21\u677f\u9898\n\u8fd9\u9053tarjan\u6a21\u677f\u9898\uff0c\u7edf\u8ba1\u4e00\u4e0b\u5165\u5ea6\uff0c\u7f29\u70b9\u7edf\u8ba1\u4e00\u4e0b\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u542b\u70b9\u4e2a\u6570\uff0c\u7b54\u6848\u5c31\u5dee\u4e0d\u591a\u641e\u51fa\u6765\u4e86\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e4+5;\nconst int maxm=5e4+5;\nint to[maxm],nex[maxm],fir[maxn];\nint col,num,dfn[maxn],low[maxn],de[maxn],si[maxn];\nint tot=0,co[maxn],n,m;\nint top,st[maxn];\ninline void ins(int x,int y)//\u6dfb\u52a0\u4e00\u6761x->y\u7684\u8fb9\uff1b \n{\n\tto[++tot]=y;\n\tnex[tot]=fir[x];\n\tfir[x]=tot;\n }\n void tarjan(int u)//tarjan\u7f29\u70b9 \n {\n \tdfn[u]=low[u]=++num;\n \tst[++top]=u;\n \tfor(int i=fir[u];i;i=nex[i])\n \t{\n \t\tint v=to[i];\n \t\tif(!dfn[v])\n \t\t{\n \t\t\ttarjan(v);\n \t\t\tlow[u]=min(low[u],low[v]);\n\t\t }\n\t\t else\n\t\t if(!co[v])//\u6ce8\u610f\u5224\u65ad\u662f\u5426\u5728\u6808\u4e2d \n\t\t low[u]=min(low[u],dfn[v]);\n\t }\n\t if(low[u]==dfn[u])\n\t {\n\t \tco[u]=++col;\n\t \t++si[col];\n\t \twhile(st[top]!=u)\n\t \t{\n\t \t\t++si[col];\n\t \t\tco[st[top]]=col;\n\t \t\t--top;\n\t\t }\n\t\t --top;\n\t }\n }\n int main()\n {\n \tcin>>n>>m;\n \tfor(int i=1,x,y;i<=m;++i)\n \t{\n \t\tcin>>x>>y;\n \t\tins(y,x);//\u8fd9\u91cc\u76f4\u63a5 \u53cd\u5411\u5efa\u8fb9\uff0c\u9898\u89e3\u4e2d\u7684\u7edf\u8ba1\u51fa\u5ea6\u5c31\u53d8\u6210\u4e86\u7edf\u8ba1\u5165\u5ea6 \n\t }\n\t for(int i=1;i<=n;++i)\n\t if(!dfn[i])\n\t tarjan(i);\n\t for(int i=1;i<=n;++i)\n\t for(int j=fir[i];j;j=nex[j])//\u7edf\u8ba1\u5165\u5ea6 \n\t if(co[i]!=co[to[j]])\n\t de[co[to[j]]]++;\n\t int ans=0,u=0;\n\t for(int i=1;i<=col;++i)\n     if(!de[i])\n     ans=si[i],u++;\n     if(u==1)\n     cout<<ans<<endl;\n     else cout<<0;\n     return 0;\n }\n```\n\n\n------------\n\u5982\u679c\u5927\u4f6c\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u53ef\u4ee5\u7ed9\u6211\u63d0\u51fa\u70b9\u5efa\u8bae\u3002Thanks\u266a(\uff65\u03c9\uff65)\uff89\n",
        "postTime": 1571235189,
        "uid": 230323,
        "name": "\u10e6\ufe4f\ufeec\u5317\u2766\u6800",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b|\u3010\u6a21\u677f\u3011\u5f3a\u8fde\u901a\u5206\u91cf\u3011"
    },
    {
        "content": "## \u5316\u7b80\u9898\u76ee\uff1a\n## \u5f3a\u8054\u901a\u5757\u7684\u51fa\u5ea6\u4e3a0\u7684\u4e3a1\u5757\u65f6\uff0c\n## \u8f93\u51fa\u90a3\u5757\u7684\u8282\u70b9\u6570\n\n#### \u6254\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>//\uff08+\u7f29\u70b9\uff09 \n//\u5fd8\u4e86\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u4ec0\u4e48\u5c31\u5ea6\u5a18 \nusing namespace std;\nint n,m,x,y,cnt,tot,ans,num;\nint head[10001],dfn[10001],vis[10001],zhan[10001],low[10001],s[10001],du[10001];\n//tot:dfs\u7684\u6b21\u6570 \n//cnt,zhan[cnt]:\u6a21\u62df\u6808 \n//dfn[i]:i\u7684dfs\u7684\u6b21\u6570 \n//low[i]:i\u7684\u5b50\u6811\u4e2d\u4e0ei\u76f8\u8fde\u7684\u503cdfn[]\u6700\u5c0f\u7684 \n//s\u6570\u7ec4\u5b58\u8f93\u51fa \n//du[i]:i\u8fde\u901a\u5757\u7684\u51fa\u5ea6 \n//ans:\u8fde\u901a\u5757\u4e2a\u6570 \nstruct Edge{\n    int to,next;\n}a[50001];\nvoid addEdge(int from,int to){\n    num++;\n    a[num].to=to;\n    a[num].next=head[from];\n    head[from]=num;\n} \n//\u56fe\u8bba\u57fa\u7840 \uff0c\u5fd8\u4e86\u5c31\u590d\u5236\u4e00\u4e0b \nvoid tarjan(int x){\n    tot++;\n    cnt++;\n    dfn[x]=low[x]=tot;//\u521d\u59cb\u503c \n    zhan[cnt]=x;//\u8fdb\u6808 \n    for(int i=head[x];i;i=a[i].next){//\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9 \n        y=a[i].to; \n        if(dfn[y]==0){//\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7 \n            tarjan(y);\n            low[x]=min(low[x],low[y]);//\u4e0d\u597d\u89e3\u91ca\u89c1\u535a\u5ba2\u6a21\u62df \n            //\u56de\u6eaf\u65f6\u66f4\u65b0low[x]\uff0c\u53d6\u6700\u5c0f\u503c\n        }\n        else if(vis[y]==0){//\u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u4f46\u662f\u5728\u6808\u4e2d \n            low[x]=min(low[x],dfn[y]);\n        }\n    } \n    if(low[x]==dfn[x]){//\u6ca1\u6709\u88ab\u66f4\u65b0 \n    \tans++;\n    \tvis[x]=ans;\n    \ts[ans]++;//\u8f93\u51fa\u6807\u8bb0\uff0cans\u8fde\u901a\u5757\uff0c\u7528\u4e8e\u8f93\u51fa \n        while(x!=zhan[cnt]){//x\u4e4b\u540e\u7684\u5168\u90e8\u5220\u9664(\u51fa\u6808) \n            s[ans]++;\n            vis[zhan[cnt]]=ans; \n            cnt--; \n        } \n        cnt--;\n    } \n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y;\n        addEdge(y,x);//\u90bb\u63a5\u8868\u5b58\u56fe,\u53cd\u5411\u5efa\u8fb9 \n    }\n    //\u65e5\u5e38\u8f93\u5165 \n    for(int i=1;i<=n;i++){\n        if(dfn[i]==0)//\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u8bbf\u95ee \n            tarjan(i);\n    }\n    for(int i=1;i<=n;i++){\n    \tfor(int j=head[i];j;j=a[j].next){\n    \t\tint hh=vis[a[j].to];\n    \t\tif(vis[i]!=hh){\n    \t\t\tdu[hh]++; \n\t\t\t}\n\t\t}\n\t} \n\tcnt=0,tot=0;\n\t//tot\u5b58\u51fa\u5ea6\u4e2a\u6570 \n\t//cnt\u5b58\u8fde\u901a\u5757\u5185\u7684\u4e2a\u6570 \n\tfor(int i=1;i<=ans;i++){\n\t\tif(du[i]==0){\n\t\t\tcnt=s[i];\n\t\t\ttot++;\n\t\t}\n\t}\n\tif(tot==0)//\u5982\u679c\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u4e0d\u4e3a0 \n\t\tcout<<n;//\u6240\u6709\u725b\u90fd\u662f\u660e\u661f \n\telse if(tot==1)//\u7384\u5b66\u8bc1\u660e \n\t\tcout<<cnt;\n\t\telse\n\t\t\tcout<<0;\n\t//\u65e5\u5e38\u8f93\u51fa \n    return 0;\n}\n\n```\n\u5f53\u7136\uff0c\u4e3a\u4e86\u9632\u6b62\u6284\u9898\u89e3\uff0c\u4ee3\u7801\u662f\u4e0d\u53ef\u80fdA\u7684\uff08~~\u5176\u5b9e\u662f\u6211\u6ca1\u6539\u51fa\u6765~~\uff09\n\n#### \u5982\u679c\u771f\u7684\u7406\u89e3\uff0c\u5c31\u4e00\u5b9a\u80fd\u5bf9\u7684",
        "postTime": 1565254108,
        "uid": 120669,
        "name": "xlxl",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "## \u5f15\u5bfc\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u8bfb\u9898\u53ef\u4ee5\u53d1\u73b0\u5230\u4e00\u6761\u5f88\u91cd\u8981\u7684\u4fe1\u606f\uff1a**\u88ab\u6240\u6709\u5976\u725b\u559c\u6b22\u7684\u5976\u725b\u5c31\u662f\u4e00\u5934\u660e\u661f\u5976\u725b**\u5e76\u4e14**\u559c\u6b22\u662f\u53ef\u4ee5\u4f20\u9012\u7684**\u3002\u8fd9\u662f\u6211\u4eec\u89e3\u9898\u7684\u5173\u952e\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u529e\uff1f \u601d\u8003\uff01\n\n\n------------\n\n## \u601d\u8def\uff1a\n\n1. \u770b\u5230\u8fd9\u9053\u9898\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u8bf4\uff0c\u8fd9\u4e0d\u662f\u6784\u5efa\u56fe\u5417\uff1f\u7136\u540e\u53ea\u9700\u8981\u5c06\u6211\u4eec\u6784\u5efa\u7684\u56fe\u904d\u5386\u4e00\u904d\uff0c\u89c2\u5bdf\u6211\u4eec\u6784\u5efa\u7684\u56fe\uff0c\u53d1\u73b0\u559c\u6b22\u65e0\u975e\u5c31\u662f\u5c06\u4e24\u4e2a\u56fe\u8fde\u5728\u4e00\u8d77\uff0c\u8fd9\u4e0d\u5c31\u662f\u5f3a\u8054\u901a\u5206\u91cf\u5417\uff1f\n\n1. \u53ea\u6709\u90a3\u4e9b\u88ab\u6240\u6709\u5976\u725b\u559c\u6b22\u7684\u5f3a\u8054\u901a\u5757\u624d\u53ef\u80fd\u5f53\u660e\u661f\u3002\u7528Tarjan\u6c42\u5f3a\u8054\u901a\u5757\uff08\u53ca\u5c06\u4e24\u4e2a\u5206\u5f00\u7684\u96c6\u5408\u901a\u8fc7\u559c\u6b22\u76f8\u8fde\u6210\u4e00\u4e2a\u96c6\u5408\uff09\uff0c\u7f29\u70b9\uff0c\u4f55\u8c13\u7f29\u70b9\uff1f\u5c31\u662f\u5c06\u4e00\u4e2a\u5927\u96c6\u5408\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u91cc\u8be6\u89e3\u8bf7\u770b\u4ee3\u7801\uff0c\u6c42\u51fa\u5ea6\uff1f\u5f53\u51fa\u5ea6\u4e3a0\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u91cc\u7684\u6240\u6709\u5976\u725b\u90fd\u662f\u660e\u661f\u5976\u725b\uff08\u4e3a\u4ec0\u4e48\u5462\uff1f\u81ea\u5df1\u601d\u8003\u4e0b\u3002\u3002\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u7684\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\u3002\n\n1. \u8fd9\u9053\u9898\u6211\u662f\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u6765\u6784\u5efa\u56fe\u7684\uff0c\u5404\u4f4d\u53ef\u4ee5\u4f7f\u7528  **vector** \u6216\u8005 **\u9886\u63a5\u8868** \u6765\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e0d\u8fc7\u94fe\u5f0f\u524d\u5411\u661f\u7684\u901f\u5ea6\u56de\u5feb\u5f88\u591a\uff08[\u6211\u5728\u8fd9\u9053\u9898\u5403\u5230\u4e86\u82e6](https://www.luogu.org/problemnew/show/P3379)\uff09\u3002\n\n**\u795e\u5947\u7684\u4f20\u9001\u95e8\uff1a**\n\n[\u5173\u4e8eTrajan\u7b97\u6cd5](https://www.byvoid.com/zhs/blog/scc-tarjan)\n\n[\u5173\u4e8e\u94fe\u5f0f\u524d\u5411\u661f](https://blog.csdn.net/Courage_kn/article/details/77015183)\n\n------------\n\n## \u4e2a\u4eba\u5efa\u8bae\uff1a\n\u8fd9\u9053\u9898\u8bf7\u52ff\u76f4\u63a5COPY\u4ee3\u7801\uff0c\u901a\u8fc7\u81ea\u5df1\u753b\u56fe\uff0c\u597d\u597d\u5730\u8ddf\u7740\u81ea\u5df1\u7684\u601d\u7ef4\u8d70\u4e00\u904d\uff0c\u5e76\u4e14\u6df1\u523b\u7684\u7406\u89e3Trajan\u7684\u5965\u79d8\uff0c\u4f60\u4f1a\u53d1\u73b0\u56fe\u8bba\u7684\u9b45\u529b\u3002\n\n**\u8be6\u89e3\u89c1\u4ee3\u7801\uff1a**\n\n```c\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<stack>\nusing namespace std;\n//head\n//\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08N\uff09\nconst int MAXN=200005;\nint out[MAXN];\nint dfn[MAXN], low[MAXN], instk[MAXN], sz[MAXN], belong[MAXN];      //tarjan\u6a21\u677f\u4e2d\u5fc5\u5907\u7684\u51e0\u4e2a\u6570\u7ec4\nint p[MAXN], eid;                           //\u90bb\u63a5\u8868\u5b58\u50a8\u56fe\nstruct edge{\n    int v, next;\n}e[MAXN<<1];\nstack<int>stk;\nint n, m, x, ans, idx, scc;\nvoid init(){\n    memset(p, -1, sizeof p);\n    memset(dfn, 0, sizeof dfn);\n    memset(low, 0, sizeof low);\n    memset(instk, 0, sizeof instk);\n    while(stk.size()) stk.pop();\n    ans=MAXN;\n    eid=0;\n    idx=0;\n}\n//\u8fde\u8fb9\nvoid insert(int u, int v){\n    e[eid].v=v;\n    e[eid].next=p[u];\n    p[u]=eid++;\n}\n//tarjan\u6a21\u677f\nvoid tarjan(int u){\n    low[u] = dfn[u] = ++idx; //\u8bb0\u5f55\u65f6\u95f4\u6233\n    instk[u]=1;             //\u8bb0\u5f55\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u6808\u4e2d\n    stk.push(u);\n    for(int i=p[u]; i!=-1; i=e[i].next){\n        int v=e[i].v;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u], low[v]);\n        }else if(instk[v]) low[u]=min(low[u], dfn[v]);\n    }\n    //\u7f29\u70b9\u6a21\u677f \n    if(dfn[u]==low[u]){\n        int cnt=0, v;\n        ++scc;\n        do{\n            v=stk.top();\n            stk.pop();\n            instk[v]=0;\n            cnt++;\n            belong[v] = scc;            //\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\n        }while(u!=v);\n        sz[scc] = cnt;      //\u8bb0\u5f55\u8be5\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u4e2a\u6570\n    }\n    \n}\nint main(){\n    init();                     //\u521d\u59cb\u5316\n    scanf(\"%d%d\", &n, &m);\n    for(int i=1; i<=m; ++i){\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        insert(u, v);           //\u8fde\u8fb9\n    }\n    for(int i=1; i<=n; ++i){\n        if(!dfn[i]) tarjan(i);\n    }\n    for(int i = 1; i <= n; ++i){\n        for(int j = p[i]; ~j; j = e[j].next){ // ~j \u7684\u610f\u601d\u662f  j \uff01= -1 \n            int v = e[j].v;\n            if(belong[i] != belong[v]){\n                out[belong[i]]++;           //\u4e3a\u7f29\u70b9\u540e\u7684\u5f3a\u8054\u901a\u5206\u91cf\u8fde\u8fb9\uff0c\u8bb0\u5f55\u51fa\u5ea6\n            }\n        }\n    }\n    int ans = 0, num = 0;\n    for(int i = 1; i <= scc; ++i){\n        if(out[i] == 0){\n            ans = sz[i];            //\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8054\u901a\u5757\u4e2d\u7684\u5976\u725b\u90fd\u662f\u660e\u661f\n            num++;\n        }\n    }\n    printf(\"%d\\n\", num == 1 ? ans : 0);        //\u76f4\u63a5\u8f93\u51fa\u6700\u5c0f\u7684\u5f3a\u8054\u901a\u4e2d\u7684\u70b9\u7684\u6570\u91cf\n    return 0;\n}\n```",
        "postTime": 1541332237,
        "uid": 114633,
        "name": "\u8d1e\u767d\u5468\u9038\u6c11",
        "ccfLevel": 0,
        "title": "P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b"
    },
    {
        "content": "\u5927\u4f6c\u4eec\u90fd\u7528\u7684\u662ftarjan\uff0c\u6807\u7b7e\u4e5f\u662f\n\n\u5e76\u672a\u8bf4\u662fkosaraju\n\n#\u4f46\u849f\u84bb\u7528kosaraju\u4e5f\u5199\u51fa\u6765\u4e86\n\n\n\n------------\n\n# \u601d\u8def\uff1a\u6c42\u53d6\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7f29\u70b9\n\n\n\n\n------------\n\n\u5982\u4f55\u6c42\u5f3a\u8fde\u540c\u5206\u91cf\uff1f\n\n[\u5f3a\u8fde\u901a\u5206\u91cf \u2014Kosaraju | Tarjan | Gabow](https://juruo-oier.blog.luogu.org/qiang-lian-tong-fen-liang-kosaraju-tarjan-gabow)\n\n\n\n\n\n\u8fd8\u6709\uff0c\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u540e\u5982\u4f55\u5224\u65ad\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff1f\n\n\u5176\u5b9e\u53ef\u4ee5\u518d\u7b2c\u4e8c\u904ddfs\u65f6\uff0c\u7531\u4e8e\u662f\u9006\u56fe\uff0c\u6240\u4ee5\u8be5\u7684\u51fa\u5ea6\u5c31\u7b49\u4e8e\u5165\u8bfb\n\n\u5229\u7528\u8fd9\u4e00\u70b9\u53ef\u4ee5\u6253\u51fa\u4ee3\u7801\uff0c\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u770b\u4e0b\u65b9\n\n\n------------\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6\nusing namespace std;\n#define MAXV 10010\n#define MAXE 50010\n#define For(i,j,n) for(int i=(j);i<=(n);++i)\n//\u5b8f\u5b9a\u4e49\nint head[MAXV],n,m,top[MAXV],topsort,rhead[MAXV],ans[MAXV],cdans[MAXV];\nbool book[MAXV];\nstack<int>s;\nstruct E{int next,to;}e[MAXE],re[MAXE];\n//\u521d\u59cb\u5316\nvoid dfs(int i){\n\tif(book[i])return ;\n\tbook[i]=1;\n\tint k=head[i];\n\twhile(e[k].to){dfs(e[k].to);k=e[k].next;}\n\ts.push(i);\n}\n//kosrarju\u7b2c\u4e00\u904d\u6c42\u56fe\u7684\u9006\u540e\u7eed\u6392\u5217\nvoid rdfs(int i){\n\tif(book[i])return ;\n\tbook[i]=1;top[i]=topsort;ans[topsort]++;\n\tint k=rhead[i];\n\twhile(re[k].to){\n\t\tif(top[re[k].to]!=top[i]&&book[re[k].to])cdans[top[re[k].to]]++;\n\t\telse rdfs(re[k].to);\n\t\tk=re[k].next;\n\t}\n}\n//\u7b2c\u4e8c\u904d\u6c42\u5f3a\u8fde\u901a\u5206\u91cf+\u7f29\u70b9+\u6c42\u53d6\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u51fa\u5ea6\nint main(){\n\tcin>>n>>m;\n\tFor(i,1,m){\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\te[i].to=b;e[i].next=head[a];head[a]=i;\n\t\tre[i].to=a;re[i].next=rhead[b];rhead[b]=i;\n\t}\n\tFor(i,1,n)dfs(i);\n\tmemset(book,0,sizeof(book));\n\twhile(!s.empty()){\n\t\tif(!book[s.top()])topsort++;\n\t\trdfs(s.top());\n\t\ts.pop();\n\t}\n\tint ansl=0;\n\tFor(i,1,topsort)\n\t\tif(cdans[i]==0)\n\t\t\tif(ansl!=0){printf(\"0\");return 0;}\n            //\u5982\u679c\u67092\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\u5219\uff0c\u4e0d\u53ef\u80fd\n\t\t\telse ansl=i;\n    \n\tcout<<ans[ansl];\n\treturn 0;\n}\n```\n\n------------\n",
        "postTime": 1527392719,
        "uid": 42064,
        "name": "vivarock",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u9898\u76ee\u7684\u8981\u6c42\u662f\u6c42\u53d7\u6b22\u8fce\u7684\u725b\u7684\u6570\u91cf\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u9898\u76ee\u7ed9\u51fa\u7684\u56fe\u7ecf\u8fc7\u7f29\u70b9\u540e\u6c42\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u91cc\u9762\u70b9\u7684\u4e2a\u6570\uff0c\u5728\u8fd9\u6709\u4e00\u4e9b\u9700\u8981\u7279\u5224\u7684\u60c5\u51b5\uff0c\u5373\u5f53\u7ecf\u7f29\u70b9\u540e\u51fa\u5ea6\u4e3a0\u7684\u70b9\u7684\u4e2a\u6570\u5927\u4e8e1\u65f6\u662f\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\uff08\u56e0\u4e3a\u5982\u679c\u8fd9\u6837\u5c31\u4e0d\u662f\u5927\u5bb6\u90fd\u559c\u6b22\u7684\u725b\u4e86\uff09\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u8f93\u51fa0\u3002\u5176\u4ed6\u5730\u65b9\u5c31\u6ca1\u6709\u4ec0\u4e48\u8be5\u6ce8\u610f\u7684\u5730\u65b9\u4e86\u3002\n\n\n\u4e0b\u9762\u8d34\u51fa\u4ee3\u7801\uff0c\u91cd\u8981\u90e8\u5206\u5df2\u6ce8\u91ca\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u7ed9\u6211\u7559\u8a00\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N  10009\n#define M  50009\nusing namespace std;\nint en,en1,n;\nstruct edge{                            //\u524d\u5411\u661f\u5b58\u8fb9 \n    int e;\n    edge *next;\n}*v[N],*v1[N],ed[M],ed1[M];\nvoid add_edge(int s,int e){                //\u4e00\u5f00\u59cb\u7684\u56fe \n    en++;\n    ed[en].next = v[s],v[s] = ed+en,v[s]->e = e;\n}\nvoid add_edge1(int s,int e){            //\u7f29\u70b9\u540e\u7684\u56fe \n    en1++;\n    ed1[en1].next = v1[s],v1[s] = ed1+en1,v1[s]->e =e;\n}\nint t,cnt,low[N],dfn[N],belong[N],siz[N],out[N],sta[N],stop = 1;\nbool instack[N];\nvoid dfs(int now){                            //tarjan\u4e3b\u8fc7\u7a0b \n    t++;\n    low[now] = dfn[now] = t;\n    instack[now] = true;\n    sta[++stop] = now;\n    for(edge *e = v[now];e;e=e->next)\n      if(!dfn[e->e]){\n            dfs(e->e);\n            low[now] = min(low[now],low[e->e]);\n      }\n      else if(instack[e->e])low[now] = min(low[now],dfn[e->e]);\n    if(dfn[now] == low[now]){\n        cnt++;\n        int si = 0;\n        while(sta[stop] != now){\n            int j  = sta[stop];\n            belong[j] = cnt;\n            instack[j] = false;\n            stop--;\n            si++;\n        }\n        si++;\n        stop--;\n        instack[now] = false;\n        belong[now] = cnt;\n        siz[cnt] = si;\n    }\n}\nint  tarjan(){\n    for(int a = 1; a <= n; a++)\n       if(!dfn[a])dfs(a);\n    for(int a =  1; a <= n; a++)\n      for(edge *e = v[a];e;e=e->next)\n        if(belong[a] != belong[e->e])                //\u7f29\u70b9 \n           add_edge1(belong[a],belong[e->e]);\n    for(int a = 1; a <= cnt; a++)\n      for(edge *e =v1[a];e;e=e->next)                //\u7edf\u8ba1\u51fa\u5ea6 \n        out[a]++;\n    int ans = 0,b_hao = 0;\n    for(int a = 1; a<= cnt; a++)\n      if(out[a] == 0){\n            if(b_hao != 0){                        //\u5f53\u7f16\u53f7\u4e0d\u4e3a0\u65f6\u8bf4\u660e\u51fa\u5ea6\u4e3a0\u7684\u70b9\u4e2a\u6570\u662f\u5927\u4e8e1\u7684\uff0c\u5e94\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u5c06\u7b54\u6848\u8bbe\u7f6e\u4e3a0 \n                ans = 0;\n                break;\n            }\n            ans += siz[a];\n            b_hao = a;\n      }\n    return ans;\n}\nint read(){                                    //\u8bfb\u5165\u4f18\u5316 \n    int x = 0;\n    char ch  =getchar();\n    while(ch < '0' || ch > '9')ch = getchar();\n    while(ch >= '0' && ch <= '9'){\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\nint main(){\n    int m;\n    n = read(),m = read();\n    for(int a = 1;a <= m; a++){\n        int u = read(),v = read();\n        add_edge(u,v);                            //\u5b58\u56fe \n    }\n    int ans = tarjan();\n    printf(\"%d\\n\",ans);                          //\u8f93\u51fa \n    return 0;\n}\n```",
        "postTime": 1508243019,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u65b9\u6cd5\u548c\u524d\u9762\u5dee\u4e0d\u591a\uff0c\u5927\u540c\u5c0f\u5f02\u5427\uff0c\u4e0d\u8fc7\u65f6\u95f4\u6211\u662f 11ms(\u6216\u8bb8\u5f53\u65f6\u63d0\u4ea4\u7684\u4eba\u5c11\uff0c\u673a\u5b50\u8dd1\u5f97\u98de\u5feb)\uff0c\u611f\u89c9\u8fd8\u633a\u5feb\u7684\uff0c\u800c\u4e14\u505a\u9898\u8fc7\u7a0b\u4e2d\u4e5f\u603b\u7ed3\u51fa\u4e86\u51e0\u4e2a\u70b9\uff0c\u5206\u4eab\u4e00\u4e0b\u2014\u2014\n\n\n\\* \u9996\u5148\u5c31\u662f\u9898\u76ee\u4e2d\u6ca1\u6709\u201c\u660e\u661f\u725b\u201d\u7684\u60c5\u51b5\uff0c\u6211\u5f00\u59cb\u6ca1\u8003\u8651\uff0c\u4f46\u5728\u5176\u5b83\u5730\u65b9\u4ea4\u4e86\u6ca1\u9519\uff0c\u5728\u8fd9\u91cc\u4ea4\u4e86\u624d\u53d1\u73b0\u4e86\u95ee\u9898\u3002\u8bf4\u660e\u8981\u597d\u597d\u8bfb\u9898\n\n\\* \u8fd8\u6709\u6c42\u7f29\u5b8c\u70b9\u540e\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u662f\u76f4\u63a5\u628a\u6bcf\u6761\u5df2\u7ed9\u8fb9\u7684\u7aef\u70b9\u8f6c\u5316\u6210\u7f29\u5b8c\u7684\u70b9\uff0c\u5b8c\u4e86\u7528\u4e86\u4e2a `f` \u6765\u8bb0\u5f55\u51fa\u5f53\u524d\u70b9\u5916\u5176\u5b83\u70b9\u662f\u5426\u5f04\u8fc7\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21\u90fd\u8981\u5c06 `f` \u6e05\u7a7a\u3002\n\n\\* \u6700\u6162\u7684\uff0c\u4f60\u6bcf\u6b21 memset f\uff0c\u6211\u6ca1\u8bd5\u8fc7\uff0c\u4e0d\u8fc7\u5e94\u8be5\u4e5f\u80fd\u8fc7\u5427\u3002\n\n\\* \u5176\u6b21\uff0c\u6211\u6bcf\u6b21\u8dd1\u4e24\u904d\uff0c\u7b2c\u4e00\u904d\u7528\u6765\u7b97\u5f53\u524d\u70b9\u7684\u51fa\u5ea6 `chu[]`\uff0c\u7b2c\u4e8c\u904d\u628a `f` \u518d\u8d4b\u503c\u56de0\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u603b\u7684\u65f6\u95f4\u4e0d\u8d85\u8fc7\u8fb9\u6570\u7684\u4e24\u500d (2\\*m)\u3002\n\n\\* \u6700\u540e\uff0c\u6211\u624d\u60f3\u8d77\u6765\uff0c\u5176\u5b9e\u7b2c\u4e8c\u6b21\u90fd\u4e0d\u7528\u8dd1\uff0c `f[]` \u7684\u503c\u4e0d\u4e00\u5b9a\u53ea\u80fd\u4e3a\u201c1\u62160\u201d\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u6211\u7a0b\u5e8f\u4e2d\u90a3\u6837\u7684\u5199\u6cd5\u3002\u65f6\u95f4\u4e3a m\u3002\n\n\\* \u7684\u786e\uff0c\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5 23ms\uff0c\u6700\u540e\u90a3\u79cd11ms\uff0c\u5dee\u4e0d\u591a\u5c31\u662f\u4e00\u534a\u3002\n\n\\* \u8fd8\u6709\u4e00\u70b9\uff0c\u6211\u4e0d\u77e5\u9053\u5b83\u7684\u6b63\u786e\u6027\uff0c\u5c31\u662f\u6211\u53d1\u73b0\u6b63\u5e38\u7684 Tarjan \u6a21\u677f\u4e0a\u6bcf\u6b21\u904d\u5386\u540e\u90fd\u8981\u5206\u4e24\u7c7b\uff0c\u4e00\u4e2a\u662f `!dfn[o]`\uff0c\u66f4\u65b0low[x] \u7528\u7684\u662f `low[o]`\uff0c\u7b2c\u4e8c\u79cd\u8fd8\u8981\u5224\u65ad \u00b7o\u00b7 \u662f\u5426\u5728\u6808\u4e2d\uff0c\u7528 `dfn[o]` \u6765\u66f4\u65b0 `low[x]`\uff0c\uff08\u6211\u7684o\u662fx\u6240\u80fd\u5230\u8ddd\u79bb\u4e3a1\u7684\u70b9\uff09\u53ef\u662f\u6211\u4e00\u76f4\u5230\u73b0\u5728\uff0c\u8fd9\u79cd\u53ea\u662f\u5355\u7eaf\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u9898\uff0c\u6211\u90fd\u6ca1\u5206\u8fd9\u4e24\u7c7b\uff0c\u76f4\u63a5\u7528 `low[o]`  \u6765\u66f4\u65b0\uff0c\u4e5f\u6ca1\u6709\u5224\u65ad `o` \u662f\u5426\u5728\u6808\u4e2d\uff0c\u5374\u90fd\u6ca1\u6709\u51fa\u8fc7\u9519\u8bef\uff0c\u8bf7\u6559\u4e00\u4e0b\u5728\u5355\u7eaf\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\u8fd9\u6837\u505a\u6709\u6ca1\u6709\u9519\u5462\uff1f\n\n\n[\u6211\u7684\u535a\u5ba2](http://blog.csdn.net/jackypigpig/article/details/76218135)\uff08\u70b9\u51fb\u5373\u53ef\u8fdb\u5165\uff0c\u5356\u4e2a\u5e7f\u544a\uff09\n\n\n\u9644\u4e0a\u6211\u7684\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#define N 10000\n#define M 50000\n#define add(x,y) (to[++cnt]=head[x],head[x]=cnt,V[cnt]=y)\n#define For(x) for(int h=head[x],o=V[h]; h; o=V[h=to[h]])\nint head[N+5],to[M+5],V[M+5],u[M+5],v[M+5],cnt;\nint F,n,m,num,ans,dep,Top,s[N+5],low[N+5],dfn[N+5],f[N+5],t[N+5],q[N+5],ru[N+5],chu[N+5];\nint min(int x,int y){return x>y?y:x;}\n\nvoid Tarjan(int x){\n    low[x]=dfn[x]=++dep;\n    q[++Top]=x;\n    For(x){\n        if (!dfn[o]) Tarjan(o);\n        low[x]=min(low[x],low[o]);\n    }\n    if (dfn[x]==low[x])\n        for(num++; q[Top+1]!=x; Top--) t[q[Top]]=num,s[num]++;\n}\n\nvoid work(){\n    cnt=0;\n    for (int i=1; i<=num; i++) head[i]=0;\n    for (int i=1; i<=m; i++) if (t[u[i]]!=t[v[i]]) add(t[u[i]],t[v[i]]);\n    for (int i=1; i<=num; i++)\n        For(i) if (f[o]!=i) chu[i]++,f[o]=i; //\u8fd9\u5c31\u662f\u6211\u6240\u8bf4\u7684\u7b2c\u4e8c\u70b9\u4e2d\u7b2c\u4e09\u79cd\u65b9\u6cd5\n    for (int i=1,o=num-1; i<=num; i++)\n        if (chu[i]==0) ans+=s[i],F++;\n    if (F>1) ans=0;\n}\n\nint main(){\n    freopen(\"1.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1; i<=m; i++){\n        scanf(\"%d%d\",&u[i],&v[i]);\n        add(u[i],v[i]);\n    }\n    for (int i=1; i<=n; i++) if (!dfn[i]) dep=0,Tarjan(i);\n    work();\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1501162992,
        "uid": 13284,
        "name": "piggy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u9053\u6807\u51c6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u9898\uff0c\u8fd0\u7528\u7f29\u70b9\u7684\u65b9\u6cd5\u6765\u505a\u3002 ~~\u5176\u5b9e\u6211\u4e5f\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5f04\u61c2\u8fd9\u4e2a\u74dc\u76ae\u7b97\u6cd5~~\n\n\u5982\u679c**\u53ea\u6709\u4e00\u4e2a\u7f29\u70b9**\u7684\u51fa\u5ea6\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u8be5\u7f29\u70b9\u5185\u7684\u6240\u6709\u5976\u725b\u5747\u4e3a\u660e\u661f\u5976\u725b\n\n\u5982\u679c**\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7f29\u70b9**\u51fa\u5ea6\u4e3a0\uff0c\u90a3\u8bf4\u660e\u8fd9\u4e24\u4e2a\u7f29\u70b9\u4e92\u4e0d\u559c\u6b22\uff0c\u6240\u4ee5\u6ca1\u6709\u5976\u725b\u662f\u660e\u661f\u5976\u725b\n\n**\u6700\u540e\u5410\u69fd\u4e00\u53e5\uff0c\u56fe\u8bba\u7684\u9898\u76ee\u5b9a\u7ea7\u4e3a\u4f55\u8fd9\u4e48\u9ad8233**\n\n\u00b7\u00b7\u00b7cpp\n\n\n```cpp\n#include<cstdio>\n#include<stack>\nusing namespace std;\nstruct node{\n    int next;\n    int from,to;\n}edge[50010];//\u90bb\u63a5\u8868\u5b58\u50a8\u6709\u5411\u8fb9 \nint len=0;//len\u8868\u793a\u90bb\u63a5\u8868\u7684\u5927\u5c0f \nint n,m,sum=0;//sum\u662fdfn\u7684\u5927\u5c0f \nint head[10010],dfn[10010],low[10010],sin[10010],vis[10010];//head\u4e0e\u90bb\u63a5\u8868\u6709\u5173\uff0cdfn\u662f\u641c\u7d22\u7684\u987a\u5e8f\uff0clow\u662f\u641c\u7d22\u5230\u7684\u70b9\u987a\u5e8f\u7684\u6700\u5c0f\u503c\uff0csin[x]\u8868\u793ax\u662f\u5426\u5728\u6808\u5185\uff0cvis[x]\u8868\u793ax\u662f\u5426\u641c\u7d22\u8fc7 \nint colsize,scl[10010],col[10010],ind[10010];//colsize\u662f\u7f29\u70b9\u6570\u7ec4\u7684\u6570\u91cf\uff0cscl\u662f\u6bcf\u4e2a\u7f29\u70b9\u7684\u5927\u5c0f\uff0ccol[x]\u8868\u793ax\u5c5e\u4e8e\u54ea\u4e2a\u7f29\u70b9\uff0cind\u8bf4\u660ecol\u7684\u5165\u5ea6 \nstack <int> s;//\u6808 \nint rin(){//\u6807\u51c6\u8bfb\u5165\u4f18\u5316 \n    int sum=0;\n    char ch=getchar();\n    while (ch>'9'||ch<'0') ch=getchar();\n    while (ch<='9'&&ch>='0'){\n        sum=sum*10+ch-'0';\n        ch=getchar();\n    }\n    return sum;\n}\nint fmin(int a,int b){return a<b?a:b;}//min\u51fd\u6570 \nvoid add(int u,int v){//\u589e\u52a0\u6709\u5411\u8fb9 \n    edge[++len].from=u;\n    edge[len].to=v;\n    edge[len].next=head[u];\n    head[u]=len;\n}\nvoid tarjan(int u){//tarjan\u7b97\u6cd5 \n    dfn[u]=low[u]=++sum;\n    s.push(u);\n    sin[u]=vis[u]=1;\n    for (int i=head[u];i!=-1;i=edge[i].next){\n        int v=edge[i].to;\n        if (vis[v]==0){\n            tarjan(v);\n            low[u]=fmin(low[u],low[v]);\n        }\n        else if (sin[v]==1)\n            low[u]=fmin(low[u],dfn[v]);\n    }\n    if (dfn[u]==low[u]){\n        scl[col[u]=++colsize]=1; \n        while (s.top()!=u){\n            scl[col[s.top()]=colsize]++;\n            sin[s.top()]=0;\n            s.pop();\n        }\n        sin[u]=0;\n        s.pop();\n```\n}//\u6700\u540e\u5904\u7406\u5b8cscl\u662f\u8be5\u7f29\u70b9\u7684\u5927\u5c0f\uff0c\u7136\u540e\u6808\u5185\u5305\u62ecu\u7684\u7f29\u70b9\u7684\u70b9\u9000\u6808\uff0ccol\u5b58\u50a8\u7684\u662f\u70b9\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u7f29\u70b9\n\n\n```cpp\n    return;\n}\nvoid inpt(){//\u8f93\u5165\u5904\u7406 \n    n=rin();\n    m=rin();\n    for (int i=1;i<=n;i++) head[i]=-1; \n    for (int i=1;i<=m;i++){\n        int a=rin(),b=rin(); \n        add(b,a);//\u5c06\u6709\u5411\u8fb9\u52a0\u5165\u90bb\u63a5\u8868\uff0c\u4f46\u662f\u8fd9\u91cc\u8fb9\u662f\u53cd\u7684\u65b9\u4fbf\u5904\u7406\u51fa\u5ea6\u5c06\u51fa\u5ea6\u53d8\u4e3a\u5165\u5ea6 \n    }\n}\nvoid work(){//\u4e3b\u8981\u5904\u7406 \n    for (int i=1;i<=n;i++)\n        if (vis[i]==0) tarjan(i);//\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u8bbf\u95ee\u8fc7\u5c31tarjan \n    for (int i=1;i<=n;i++)\n        for (int j=head[i];j!=-1;j=edge[j].next)\n            if (col[i]!=col[edge[j].to]) ind[col[edge[j].to]]++;//\u5982\u679c\u8fd9\u4e2a\u7f29\u70b9\u6709\u5165\u8fb9\u5c31\u589e\u52a0\u8be5\u7f29\u70b9\u7684\u5165\u5ea6 \n}\nvoid outp(){//\u8f93\u51fa\u5904\u7406 \n    int ans=0;\n    for (int i=1;i<=colsize;i++){ \n        if (ind[i]==0&&ans==0) ans=scl[i];//\u5982\u679c\u8be5\u7f29\u70b9\u5165\u5ea6\uff08\u51fa\u5ea6\uff09\u7b49\u4e8e0\u5e76\u4e14\u53ea\u6709\u4e00\u79cd\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u4ee3\u8868\u8be5\u7f29\u70b9\u91cc\u90fd\u662f\u660e\u661f\u5976\u725b \n        else if(ind[i]==0) ans=-1;//\u5426\u5219\u5c31\u6ca1\u6709\u660e\u661f\u5976\u725b \n    }\n    printf(\"%d\\n\",ans==-1?0:ans);\n}\nint main(){\n    inpt();\n    work();\n    outp();\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1497098534,
        "uid": 37781,
        "name": "\u6211\u4e0d\u662f\u67f3\u6a59\u6c41",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u597d\u4e45\u4e0d\u5237luogu\u53d1\u9898\u89e3\u4e86\uff0c\u8fd9\u9898\u597d\u6c34\uff5e\u4e00\u4e2atarjan\u6a21\u677f\u3002\u3002\u3002\u8fd9\u79cd\u6c34\u9898\u5c31\u76f4\u63a5vector\u4e0a\u4e86\uff0c\u52ff\u55b7\uff01\n\n**\u8fd9\u9898\u8981\u7f29\u70b9\u7684\u601d\u8def\uff0c\u4f46\u4e0d\u9700\u8981\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7f29\u5708\u6210\u70b9\u3002**\n\n**\u5177\u4f53\u662f\u627e\u51faSCC\u5206\u89e3\u7f29\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u91cd\u6784\u7684\u56fe\uff0c\u51fa\u5ea6\u4e3a0\u7684\u70b9\u82e5\u4e0d\u662f\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u5c31\u8bf4\u660e\u6ca1\u6709\u6700\u53d7\u6b22\u8fce\u7684\u725b\uff0c\u53cd\u4e4b\u5c31\u662f\u6b64\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u8282\u70b9\u4e2a\u6570\u4e3aans\u3002\u81ea\u5df1\u4f53\u4f1a\u4e0b\u3002**\n\n\n  \n  \n      \n      \n  \n      \n      \n      \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<stack>\n#include<vector>\nusing namespace std;\nstruct node\n{\n    int num,par;\n}p[50005];\nint n,m,index=1,x,y,cnt,ans;\nvector<int>v[50005];\nbool vis[50005];\nint ind[50005];\nstack<int>s;\nbool in_stack[50005];\nint belong[50005],sum[50005],cntx[50005];\nvoid tarjan(int x)\n{\n    p[x].num=index;\n    p[x].par=p[x].num;\n    index++;\n    vis[x]=1;\n    in_stack[x]=1;\n    s.push(x);\n    for(int i=0;i<v[x].size();i++)\n    {\n        if(!vis[v[x][i]])\n        {\n            tarjan(v[x][i]);\n            p[x].par=min(p[x].par,p[v[x][i]].par);\n        }\n        else if(in_stack[v[x][i]])\n        {\n            p[x].par=min(p[x].par,p[v[x][i]].num);\n        }\n    }\n    if(p[x].num==p[x].par)\n    {\n        ++cnt;\n        int k;\n        do\n        {\n            k=s.top();\n            s.pop();\n            belong[k]=cnt;\n            cntx[cnt]++;\n            in_stack[k]=0;\n        }while(k!=x);\n    }\n}\nint main()\n{  \n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        v[x].push_back(y);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])tarjan(i);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=0;j<v[i].size();j++)\n        {\n            if(belong[v[i][j]]!=belong[i])\n            {\n                sum[belong[i]]++;\n            }\n        }\n    }\n    int kkk=0;\n    for(int i=1;i<=cnt;i++)\n    {\n        if(!sum[i])\n        {\n            kkk++;\n            ans=cntx[i];\n        }\n    }\n    if(kkk!=1)printf(\"%d\\n\",0); else printf(\"%d\\n\",ans);\n    return 0;\n}\n\u6eda\u53bb\u590d\u4e60\u6587\u5316\u8bfe\u671f\u4e2d\u8003\u8bd5\u4e86\u3002\u3002\u3002\n```",
        "postTime": 1492159393,
        "uid": 16817,
        "name": "winmt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u4ed6\u5bb6\u4ecb\u7ecd\u4e00\u79cd\u7384\u5b66\u7b97\u6cd5\uff0c\u8bf4\u662f\u7384\u5b66\u5176\u5b9e\u4e5f\u4e0d\u7b97\uff0c\u6709\u4f9d\u636e\u3002\n\n---\u4e0b\u9762\u662f\u9898\u610f\u7b80\u6790--------------------\n\n\u7ed9\u4f60\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8bf7\u4f60\u6c42\u51fa\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u7684\u4e2a\u6570\u3002\u6761\u4ef6\uff1a\u4ece\u9664\u81ea\u5df1\u5916\u4efb\u610f\u4e00\u70b9\u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\u81ea\u5df1\u3002\n\n---\u4e0b\u9762\u662f\u7b97\u6cd5\u5206\u6790--------------------\n\n\u9996\u5148\u6211\u4eec\u5bf9\u56fe\u7f29\u70b9\u5f97\u5230DAG\uff0c\u90a3\u4e48\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8fde\u901a\u5206\u91cf\u4e00\u5b9a\u662f\u5728DAG\u7684\u62d3\u6251\u5e8f\u7684\u672b\u7aef\u3002\u77e5\u9053\u8fd9\u4e00\u70b9\u6211\u4eec\u6211\u4eec\u53ea\u9700\u8981\u5c06DAG\u7684\u9006\u5411\u56fe\u4ece\u62d3\u6251\u5e8f\u672b\u7aef\u7684\u70b9\u5411\u8d77\u70b9\u505a\u4e00\u904ddfs\uff0c\u5982\u679c\u5b58\u5728\u65e0\u6cd5\u5230\u8fbe\u7684\u70b9\uff0c\u90a3\u4e48\u8f93\u51fa0\uff0c\u5426\u5219\u8f93\u51fa\u672b\u7aef\u8868\u793a\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u6570\u91cf\u3002\n\n--- **\u666e\u53ca\u5c0f\u7684\u6280\u5de7** ----------------------\n\n\u7528tarjan\u6216\u8005(dfs+rdfs)\u7b97\u6cd5\u5206\u89e3\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5f97\u5230\u5f3a\u8fde\u901a\u5206\u91cf\u5e8f\u53f7\uff0c\u662f\u6309\u7167\u62d3\u6251\u5e8f\u6216\u8005\u62d3\u6251\u7684\u5012\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u5728O(1)\u65f6\u95f4\u5185\u5f97\u5230\u4e86\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u672b\u7aef\u3002\n\n-----------------------------------------------------------------------------------------------------------------------------\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cstdlib>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int maxn=10000+20;\nvector<int>G[maxn];\nvector<int>graph[maxn];\nint n,m,in_degree[maxn];\nint dfn[maxn],low[maxn],cmp[maxn],ins[maxn],s[maxn],cnt=0,Index=0,top=0;\ninline void read(int &n){\n    n=0;int f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    do{\n        n=n*10+ch-'0';\n        ch=getchar();\n    }while(ch>='0' && ch<='9');\n    n=n*f;\n    return;\n}\ninline void write(int n){\n    if(n<0){\n        putchar('-');\n        n=0-n;\n    }\n    if(n>=10) write(n/10);\n    putchar((n % 10)+'0');\n    return;\n}\ninline void add_edge(int u,int v){\n    G[u].push_back(v);\n    return;\n}\nvoid init(){\n    read(n),read(m);\n    for(int i=0;i<m;i++){\n        int u,v;\n        read(u),read(v);\n        add_edge(u,v);\n    }\n    return;\n}\nvoid tarjan(int u){\n    ins[u]=1;\n    s[top++]=u;\n    dfn[u]=low[u]=++Index;\n    for(int i=0;i<G[u].size();i++){\n        int v=G[u][i];\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        else{\n            if(ins[v])\n                low[u]=min(low[u],dfn[v]);\n        }\n    }\n    if(low[u]==dfn[u]){\n        cnt++;\n        int i;\n        do{\n            i=s[--top];\n            ins[i]=0;\n            cmp[i]=cnt;\n        }while(i!=u);\n    }\n    return;\n}\nvoid scc(){\n    memset(dfn,0,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    memset(ins,0,sizeof(ins));\n    for(int i=1;i<=n;i++){\n        if(!dfn[i])\n            tarjan(i);\n    }\n    return;\n}\ninline void add_new_edge(int u,int v){\n    graph[u].push_back(v);\n    return;\n}\nvoid build_new_graph(){\n    for(int u=1;u<=n;u++){\n        for(int i=0;i<G[u].size();i++){\n            int v=G[u][i];\n            if(cmp[u]!=cmp[v]){\n                add_new_edge(cmp[v],cmp[u]);\n                //++in_degree[cmp[v]];\n            }\n        }\n    }\n    return;\n}\nvoid test(){\n    for(int i=1;i<=n;i++){\n        write(i);\n        putchar(':');\n        write(cmp[i]);\n        putchar('\\n');\n    }\n    return;\n}\nvoid dfs(int u){\n    ins[u]=1;\n    for(int i=0;i<graph[u].size();i++){\n        int v=graph[u][i];\n        if(!ins[v]){\n            dfs(v);\n        }\n    }\n    return;\n}\nvoid work(){\n    memset(ins,0,sizeof(ins));\n    dfs(1);\n    for(int i=1;i<=cnt;i++){\n        if(!ins[i]){\n            write(0);\n            return;\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n        if(cmp[i]==1) ++ans;\n    write(ans);\n    return;\n}\nvoid solve(){\n    scc();\n    build_new_graph();\n    //test();\n    work();\n    return;\n}\nint main(){\n    init();\n    solve();\n    return 0;\n}\n\n```",
        "postTime": 1472213161,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u5982\u679c\u6240\u6709\u7684\u70b9\u90fd\u80fd\u5230\u8fbe\u8fd9\u4e2a\u70b9\u5c31\u8ba1\u6570\u52a0\u4e00\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528tarjain\u7b97\u6cd5\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u7f29\u70b9\u4ee5\u540e\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\uff0c\u76f4\u63a5\u8fdb\u884c\u7edf\u8ba1\u3002\u5f53\u4e14\u4ec5\u5f53\u51fa\u5ea6\u552f0\u7684\u70b9\u6709\u4e00\u4e2a\u65f6\uff0c\u6709\u89e3\u3002\u6ca1\u6709\u89e3\u76f4\u63a5\u8f93\u51fa0\uff0c\u5982\u679c\u6709\u89e3\u6211\u4eec\u627e\u5230\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7136\u540e\u770b\u770b\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6709\u51e0\u4e2a\u70b9\u5c31\u597d\u4e86\u3002\n```c\n#include<stdio.h>\n#include<string.h>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#define MAXN 10005\n#define INF 0x3f3f3f3f\nusing namespace std;\n\nstruct Edge\n{\n    int from,to;\n    Edge(int from=0,int to=0):from(from),to(to){};\n};\nvector<Edge> edges;\nvector<int> G[MAXN];\n//vector<Edge> mmp;                //\u91cd\u65b0\u6784\u56fe\n//vector<int> Map[MAXN];     //\u91cd\u65b0\u5efa\u56fe\nstack<int> S;\nint pre[MAXN],sccno[MAXN],lowlink[MAXN],out[MAXN];\nint dfs_clock,scc_cnt;\nint n,m;\n\nvoid dfs(int u)\n{\n    S.push(u);\n    pre[u]=lowlink[u]=++dfs_clock;\n    for(int i=0;i<G[u].size();i++)\n    {\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])\n        {\n            dfs(v);\n            lowlink[u]=min(lowlink[u],lowlink[v]);\n        }\n        else if(!sccno[v])\n        {\n            lowlink[u]=min(lowlink[u],pre[v]);\n        }\n    }\n    if(pre[u]==lowlink[u])\n    {\n        ++scc_cnt;\n        for(;;)\n        {\n            int x=S.top();\n            S.pop();\n            sccno[x]=scc_cnt;\n            if(u==x)\n                break;\n        }\n    }\n}\n\nvoid Find_Scc(int n)\n{\n    scc_cnt=dfs_clock=0;\n    memset(sccno,0,sizeof(sccno));\n    memset(pre,0,sizeof(pre));\n    memset(out,0,sizeof(out));              //\u7528\u6765\u7edf\u8ba1\u7f29\u70b9\u540e\u7684\u51fa\u5ea6\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n           dfs(i);\n    }\n    for(int i=0;i<edges.size();i++)\n    {\n        int xx=edges[i].from;\n        int yy=edges[i].to;\n        if(sccno[xx]!=sccno[yy])\n        {\n            out[sccno[xx]]++;                          //\u51fa\u5ea6\u52a0\u4e00\n            //mmp.push_back({sccno[xx],sccno[yy]});\n            //printf(\"test:%d->%d %d\\n\",sccno[xx],sccno[yy],edges[i].dist);\n            //int mm=mmp.size();\n            //Map[sccno[xx]].push_back(mm-1);\n        }\n    }\n    int sum=0;\n    int pos;\n    for(int i=1;i<=scc_cnt;i++)\n        if(out[i]==0)\n        {\n            sum++;\n            pos=i;                         //\u5224\u5b9a\u662f\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n        }\n    if(sum==1)\n    {\n        int cnt=0;\n        for(int i=1;i<=n;i++)\n        {\n            if(sccno[i]==pos)     //\u662f\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u51fa\u5ea6\u4e3a0)\u5c31\u52a0\u4e00\n                cnt++;\n        }\n        printf(\"%d\\n\",cnt);\n    }\n    else\n    {\n        printf(\"%d\\n\",0);\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int u,v;\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%d %d\",&u,&v);\n        if(u==v)\n            continue;\n        edges.push_back({u,v});\n        int mm=edges.size();\n        G[u].push_back(mm-1);\n    }\n    Find_Scc(n);\n    return 0;\n}\n\n```\n",
        "postTime": 1570493475,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b|\u3010\u6a21\u677f\u3011\u5f3a\u8fde\u901a\u5206\u91cf\u3011"
    },
    {
        "content": " ###   _\u4e00\u4e2a\u633a\u88f8\u7684tarjan\u7f29\u70b9\u5440QAQ_ \n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u8003\u8651\u56fe\u4e2d\u8fd9\u4e9b\u70b9\u7684\u51fa\u5ea6\uff1a\u5982\u679c\u4e00\u4e2a\u70b9u\u51fa\u5ea6\u4e0d\u4e3a\u96f6\uff0c\u8bf4\u660e\u5b83\u81f3\u5c11\u8fde\u5411\u4e00\u4e2a\u70b9\uff0c\u800c\u5b83\u4e0e\u76f8\u8fde\u7684\u70b9v\u663e\u7136\u4e0d\u662f\u5f3a\u8054\u901a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u662f\u6240\u6709\u725b\u90fd\u559c\u6b22u\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa\u552f\u4e00\u7684\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\uff08\u5982\u679c\u6709\u591a\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5f53\u7136\u5c31\u6ca1\u6709\u660e\u661f\u5976\u725b\u5566\uff09\n\n~~\u7136\u540e\uff0c\uff0c\uff0c\u7136\u540e\u5c31AC\u4e86\u5440QAQ~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>          //vector\u5b58\u8fb9\nusing namespace std;\nvector <int> edge[10005];\nqueue <int> q;\nint n,m,u,v,step,top,cnt,stack[10005],vis[10005],dfn[10005],low[10005];\nint belong[10005],outde[10005],sum[10005],ans;\ninline int read()\n{\n\tint num=0;\n\tchar ch=getchar();\n\twhile (ch<'0' || ch>'9') ch=getchar();\n\twhile (ch>='0' && ch<='9')\n\t{\n\t\tnum=(num<<3)+(num<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn num;\n}\ninline void tarjan(int u)\n{\n\tdfn[u]=low[u]=++step;\n\tstack[++top]=u;\n\tfor (int i=0;i<edge[u].size();i++)\n\t{\n\t\tint v=edge[u][i];\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if (!vis[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (dfn[u]==low[u])\n\t{\n\t\tcnt++;\n\t\tfor (top;(v=stack[top])!=u;top--)\n\t\t{\n\t\t\tbelong[v]=cnt;\n\t\t\tvis[v]=1;\n\t\t\tsum[cnt]++;\n\t\t}\n\t\ttop--;\n\t\tbelong[u]=cnt;\n\t\tvis[u]=1;\n\t\tsum[cnt]++;\n\t}\n}\ninline void shrink()\n{\n\tfor (int i=1;i<=n;i++)\n\t    for (int j=0;j<edge[i].size();j++)\n\t    {\n\t    \tint v=edge[i][j];\n\t    \tif (belong[i]!=belong[v]) outde[belong[i]]++; \n\t    }\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tu=read();\n\t\tv=read();\n\t\tedge[u].push_back(v);\n\t}\n\tfor (int i=1;i<=n;i++)\n        if (!dfn[i]) tarjan(i);  //tarjan\u5927\u5bb6\u5e94\u8be5\u4f1a\u5427\uff0c\u51e0\u4f4d\u5927\u4f6c\u8bb2\u5f97\u633a\u8be6\u7ec6\u7684\n\tshrink();        //\u7f29\u70b9\n\tfor (int i=1;i<=cnt;i++)\n\t    if (!outde[i])\n\t    {\n\t    \tif (ans)\n\t    \t{\n\t    \t\tprintf(\"0\");\n\t    \t\treturn 0;\n\t    \t}\n\t    \tans=sum[i];\n\t    }\n\tprintf(\"%d\",ans);\n}\n```\n",
        "postTime": 1564566874,
        "uid": 26152,
        "name": "FC_Barcelona",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u4eca\u5929\u5b66\u4e86\u5f3a\u8fde\u901a\u5206\u91cf\u7684Tarjan\u7b97\u6cd5\uff0c\u505a\u4e86\u8fd9\u9053\u7c7b\u4f3c\u4e8e\u677f\u5b50\u9898\u7684\u9898\uff08\u5c3d\u7ba1\u6211\u8c03\u4e86\n\n1.5h\uff09\u3002\u4e3b\u8981\u7684\u601d\u8def\u662f\u7528Tarjan\u7f29\u70b9\u4e4b\u540e\uff0c\u6c42\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\uff08\u5b9e\u9645\u4e0a\u662f\u51fa\u5ea6\uff0c\n\n\u56e0\u4e3a\u6211\u662f\u53cd\u7740\u8fde\u8fb9\u7684\uff09\u3002\u5982\u679c\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u5927\u4e8e\u96f6\uff0c\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\n\n\u91cf\u91cc\u6709\u7684\u70b9\u7684\u4e2a\u6570\u5c31\u662f\u7b54\u6848\u3002\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\uff1a\n\n\n### \u6ce8\u91ca\u7248\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 10010\n#define maxm 50010\nusing namespace std;\nint dfn[maxn],low[maxn],st[maxn],inn[maxn],head[maxm];\nint de[maxn],si[maxn];\nint n,m,cnt,top,inl,num;\nstruct node\n{\n\tint u,v,nex;\n}edge[maxm];\ninline int read() \n{\n    int x=0;\n    bool f=1;\n    char c=getchar();\n    for(; !isdigit(c); c=getchar()) if(c=='-') f=0;\n    for(; isdigit(c); c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n    if(f) return x;\n    return 0-x;\n}\ninline void write(int x)\n{\n    if(x<0){putchar('-');x=-x;}\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\ninline void add(int x,int y)\n{\n\tcnt++;\n\tedge[cnt].u=x;\n\tedge[cnt].v=y;\n\tedge[cnt].nex=head[x];\n\thead[x]=cnt;\n}\ninline void Tarjan(int from)//\u7528Tarjan\u7f29\u70b9 \n{\n\tdfn[from]=low[from]=++num;\n\tst[++top]=from;\n\tfor(int i=head[from];i!=-1;i=edge[i].nex)\n\t{\n\t\tint to=edge[i].v;\n\t\tif(!dfn[to])\n\t\t{\n\t\t\tTarjan(to);\n\t\t\tlow[from]=min(low[from],low[to]);\n\t\t}\n\t\telse if(!inn[to])\n\t\t    low[from]=min(low[from],dfn[to]);\n\t}\n\tif(low[from]==dfn[from])\n\t{\n\t\tinn[from]=++inl;\n\t\t++si[inl];//\u8bb0\u5f55\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u6709\u591a\u5c11\u4e2a\u70b9 \n\t\twhile(st[top]!=from)\n\t\t{\n\t\t\t++si[inl];//\u540c\u4e0a \n\t\t\tinn[st[top]]=inl;\n\t\t\t--top;\n\t\t}\n\t\t--top;\n\t}\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tx=read();y=read();\n\t\tadd(y,x);//\u53cd\u7740\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u5165\u5ea6\u800c\u4e0d\u662f\u51fa\u5ea6\u4e86 \n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])\n\t\t    Tarjan(i);//\u7f29\u70b9 \n\tfor(int i=1;i<=n;i++)\n\t   for(int j=head[i];j!=-1;j=edge[j].nex)\n\t       if(inn[i]!=inn[edge[j].v]) de[inn[edge[j].v]]++;//\u66f4\u65b0\u5165\u5ea6 \n\tint ans=0,u=0;\n\tfor(int i=1;i<=inl;i++)\n\t{\n\t\tif(!de[i])//\u5982\u679c\u5165\u5ea6\u5927\u4e8e\u96f6 \n\t\t{\n\t\t\tans=si[i];//\u8d4b\u503c \n\t\t\tu++;//\u8bb0\u5f55\u6709\u51e0\u4e2a\u70b9\u7b26\u5408\u6761\u4ef6 \n\t\t}\n\t}\n\tif(u==1)//\u5224\u65ad\u662f\u5426\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5165\u5ea6\u5927\u4e8e\u96f6\u7684\u70b9 \n\t    write(ans);\n\telse \n\t    write(0);//\u5426\u5219\u8f93\u51fa\u65e0\u89e3 \n\treturn 0;\n}\n/*\n9 12\n1 2\n2 4\n4 5\n5 3\n3 2\n1 6\n6 9\n9 5\n6 8\n8 7\n8 9\n7 6\n*/\n//\u4e00\u7ec4\u5f88\u4e0d\u9519\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8bd5\u8bd5 \n```\n\n### \u6b63\u5e38\u7248\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 10010\n#define maxm 50010\nusing namespace std;\nint dfn[maxn],low[maxn],st[maxn],inn[maxn],head[maxm];\nint de[maxn],si[maxn];\nint n,m,cnt,top,inl,num;\nstruct node\n{\n    int u,v,nex;\n}edge[maxm];\ninline int read() \n{\n    int x=0;\n    bool f=1;\n    char c=getchar();\n    for(; !isdigit(c); c=getchar()) if(c=='-') f=0;\n    for(; isdigit(c); c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n    if(f) return x;\n    return 0-x;\n}\ninline void write(int x)\n{\n    if(x<0){putchar('-');x=-x;}\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\ninline void add(int x,int y)\n{\n    cnt++;\n    edge[cnt].u=x;\n    edge[cnt].v=y;\n    edge[cnt].nex=head[x];\n    head[x]=cnt;\n}\ninline void Tarjan(int from)\n{\n    dfn[from]=low[from]=++num;\n    st[++top]=from;\n    for(int i=head[from];i!=-1;i=edge[i].nex)\n    {\n        int to=edge[i].v;\n        if(!dfn[to])\n        {\n            Tarjan(to);\n            low[from]=min(low[from],low[to]);\n        }\n        else if(!inn[to])\n            low[from]=min(low[from],dfn[to]);\n    }\n    if(low[from]==dfn[from])\n    {\n        inn[from]=++inl;\n        ++si[inl];\n        while(st[top]!=from)\n        {\n            ++si[inl];\n            inn[st[top]]=inl;\n            --top;\n        }\n        --top;\n    }\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    n=read();m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        x=read();y=read();\n        add(y,x);\n    }\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])\n            Tarjan(i);\n    for(int i=1;i<=n;i++)\n       for(int j=head[i];j!=-1;j=edge[j].nex)\n           if(inn[i]!=inn[edge[j].v]) de[inn[edge[j].v]]++;\n    int ans=0,u=0;\n    for(int i=1;i<=inl;i++)\n    {\n        if(!de[i])\n        {\n            ans=si[i];\n            u++;\n        }\n    }\n    if(u==1)\n        write(ans);\n    else \n        write(0);\n    return 0;\n}\n```\n\n\u8bf7\u5404\u4f4d\u5927\u4f6c\u65a7\u6b63~~\uff08\u53cd\u6b63\u6211\u4e0d\u8ba4\u8bc6\u65a7\u6b63\u662f\u4ec0\u4e48\u610f\u601d\uff09~~",
        "postTime": 1563763192,
        "uid": 101230,
        "name": "handsome_zyc",
        "ccfLevel": 0,
        "title": "P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b \u9898\u89e3"
    },
    {
        "content": "\u840c\u65b0\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3 tarjan\u4f8b\u9898\n\n\u5982\u679c\u725bA\u559c\u6b22\u725bB\uff0c\u6211\u4eec\u5c31\u8fde\u4e00\u6761A\u5230B\u7684\u6709\u5411\u8fb9\n\u7136\u540e\u4f7f\u7528tarjan\u7f29\u70b9\uff0c\u5c06\u539f\u56fe\u53d8\u4e3aDAG\u3002**\uff08\u7136\u800c\u5e76\u4e0d\u7528\u5efa\u65b0\u56fe\uff09**\n\n\u663e\u800c\u6613\u89c1\u5f97\uff1a\u4e00\u5934\u725b\u88ab\u6240\u6709\u7684\u725b\u559c\u6b22\u65f6\uff0c\u90a3\u4e48\u5728\u65b0\u5efa\u7684DAG\u4e0a\uff0c\u6709\u4e14\u4ec5\u6709\u90a3\u5934\u725b\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7684\u51fa\u5ea6\u4e3a0\uff0c\u4e14\u6b64\u65f6\u90a3\u5934\u725b\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u90fd\u662f\u660e\u661f\u3002\n\n**\u6ce8\u610f\uff1a\u5982\u679cDAG\u4e0a\u5b58\u5728\u8d85\u8fc7\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u4e0a\u7684\u725b\u65e0\u6cd5\u5c06\u81ea\u5df1\u7684\u559c\u6b22\u4f20\u9012\u51fa\u53bb\uff0c\u7b54\u6848\u662f0\u3002**\n\n\n\u5269\u4e0b\u7684\u5c31\u662ftarjan\u677f\u5b50\u4e86...\n~~\u7136\u800c\u8fd8\u662f\u9519\u4e86\u4e24\u6b21~~\n\n## \u4e0a\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint n, m;\nconst int maxn = 10010;\nconst int maxm = 50010;\nstruct edge{\n\tint to, nt;\n\tinline void set(int n, int t){\n\t\tto = t, nt = n;\n\t}\n}e1[maxm], e2[maxm];//\u7136\u540e\u53d1\u73b0\u5e76\u4e0d\u7528\u8fde\u7f29\u70b9\u4e4b\u540e\u7684\u56fe\u3002\u3002\u3002\nint t1, t2, h1[maxn], h2[maxn];\nint adde1(int a, int b){\n\te1[++t1].set(h1[a], b);\n\th1[a] = t1;\n}\nint adde2(int a, int b){\n\te2[++t2].set(h2[a], b);\n\th2[a] = t2;\n}\n\nint vis[maxn], dfn[maxn], low[maxn], bel[maxn], num[maxn], stc[maxn], top, cnt, cc;\nvoid tarjan(int now, int pre){//\u6807\u51c6tarjan\u8fc7\u7a0b\n\tvis[now] = 1;\n\tdfn[now] = low[now] = ++cnt;\n\tstc[++top] = now;\n\tfor(int i = h1[now]; i; i = e1[i].nt){\n\t\tint nex = e1[i].to;\n\t\tif(!dfn[nex]){\n\t\t\ttarjan(nex, now);\n\t\t\tlow[now] = min(low[nex], low[now]);\n\t\t}\n\t\telse if(vis[nex]){\n\t\t\tlow[now] = min(low[nex], low[now]);\n\t\t}\n\t}\n\tif(dfn[now] == low[now]){\n\t\tint tmp;\n\t\t++cc;\n\t\tdo{\n\t\t\ttmp = stc[top--];\n\t\t\tvis[tmp] = 0;\n\t\t\tbel[tmp] = cc;\n\t\t\tnum[cc]++;\n\t\t}while(top > 0 && tmp != now);\n\t}\n\treturn ;\n}\nint du[maxn];\nvoid rebuild(){//\u67e5\u627e\u51fa\u5ea6\u4e3a0\u7684\u70b9\n\tfor(int i = 1; i <= n; ++i){\n\t\tfor(int j = h1[i]; j; j = e1[j].nt){\n\t\t\tint k = e1[j].to;\n\t\t\t//cout<<i<< \" \"<<k<<endl;\n\t\t\tint bi = bel[i], bj = bel[k];\n\t\t\t//cout<<bi<< \" \"<<bj<<endl;\n\t\t\tif(bi != bj){\n\t\t\t\t//adde2(bi, bj);\n\t\t\t\tdu[bi]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nvoid check(){\n\t/*for(int i = 1; i <= n; ++i){\n\t\tcout<<i<< \" \"<<bel[i]<<endl;\n\t}*/\n\tint ans = 0, flag = 0;\n\tfor(int i = 1; i <= cc; ++i){\n\t\t//cout<<du[i]<<endl;\n\t\tif(du[i] == 0)flag++, ans = num[i];\n\t}\n\tif(flag == 1)cout<<ans<<endl;\n\telse cout<<0<<endl;\n\treturn;\n}\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tint x, y;\n\tfor(int i = 1; i <= m; ++i){\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadde1(x, y);\n\t}\n\tfor(int i = 1; i <= n; ++i){\n\t\tif(!dfn[i])tarjan(i, 0);\n\t}\n\trebuild();\n\tcheck();\n\treturn 0;\n}\n```",
        "postTime": 1545726496,
        "uid": 112065,
        "name": "\u788e\u661f\u5c0f\u5de6\u8f6e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u627e\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e00\u9053\u6c34\u9898\u3002\u548cP3387\u6ca1\u6709\u591a\u5927\u7684\u533a\u522b\u3002\n\n\u4f46\u662f\u8fd9\u4e48\u6c34\u4e3a\u4ec0\u4e48\u8fd8\u662f\u63d0\u9ad8+/\u7701\u9009-\u5462\uff1f\uff1f\uff1f~~\u56e0\u4e3a\u90a3\u65f6\u5019\u7684\u9898\u90fd\u8fd9\u4e48\u5783\u573e~~\n\n\u597d\uff0c\u8fdb\u5165\u6b63\u9898\u3002\u9996\u5148\u6c42\u51fa\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5e76\u4e14\u7ef4\u62a4\u597d\u4ed6\u4eec\u7684\u4fe1\u606f\uff0c\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u3002\uff08\u4ee5\u4e0b\u6211\u628a\u5f3a\u8fde\u901a\u5206\u91cf\u6210\u4e3a\u7f29\u70b9\u540e\u7684\u201c\u5927\u70b9\u201d\uff0c\u6bd4\u8f83\u5f62\u8c61\uff09\n\n````cpp\nfor(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n```\n\n```cpp\nvoid tarjan(int u)\n{\n\tlow[u]=dfn[u]=++t;instack[u]=1;s.push(u);\n\tint v;\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tv=edge[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(instack[v])low[u]=min(low[u],low[v]);\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\tans++;//\u7f29\u70b9\u4e4b\u540e\u7684\u5927\u70b9\u6570\u91cf+1\n\t\tmember[ans]=0;\n\t\twhile(s.top()!=u)\n\t\t{\n\t\t\tid[s.top()]=ans;\n\t\t\tinstack[s.top()]=0;\n\t\t\tmember[ans]++;\n\t\t\ts.pop();\n\t\t}\n\t\tid[s.top()]=ans;\n\t\tinstack[s.top()]=0;\n\t\tmember[ans]++;\n\t\ts.pop();\n\t}\n}\n```\n\n\u53ef\u80fd\u6709\u4e9b\u670b\u53cb\u8981\u95ee\u4e86\uff1a\u91cc\u9762\u7684member\u6570\u7ec4\u62ff\u6765\u5e72\u561b\u554a\uff1f\u7b97\u6210\u5458\u6570\u554a\uff1f\u672c\u9898\u660e\u660e\u5c31\u662f\u6c42\u660e\u661f\u725b\u7684\u6570\u91cf\u554a\uff01\n\n\u597d\uff0c\u8fd9\u5c31\u662f\u672c\u9898\u7684\u96be\u70b9\u4e86\u2014\u2014\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5927\u70b9\u80fd\u5426\u5f53\u660e\u661f\u3002\n\n\u5927\u5bb6\u53ef\u4ee5\u5148\u628a\u6837\u4f8b\u753b\u6210\u4e00\u4e2a\u56fe\uff0c\u5c31\u5728\u8349\u7a3f\u7eb8\u4e0a\u3002\u7136\u540e\u4f1a\u53d1\u73b0\u2014\u20141\u7ed3\u70b9\u548c2\u7ed3\u70b9\u53ef\u4ee5\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u70b9\uff0c\u4e143\u53f7\u7ed3\u70b9\u81ea\u5df1\u5c31\u662f\u4e00\u4e2a\u5927\u70b9\u3002\u7136\u540e\u53c8\u4f1a\u53d1\u73b0\uff0c3\u53f7\u7ed3\u70b9\u6ca1\u6709\u7231\u6155\u7684\u7ed3\u70b9\u4e86\uff0c\u4e8e\u662f\u7edf\u8ba1\u4e00\u4e0b\uff0c\u8f93\u51fa1\u3002\n\n\u8fc7\u7a0b\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4eec\u63a8\u51fa\u4e86\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u7ed3\u8bba\u2014\u2014**\u6700\u540e\u90a3\u4e2a\u6ca1\u6709\u51fa\u5ea6\u7684\u5927\u70b9\u91cc\u7684\u6210\u5458\uff0c\u90fd\u662f\u660e\u661f\u725b\uff08\u56e0\u4e3a\u5176\u5b83\u7684\u725b\u90fd\u7231\u6155\u5b83\u4eec\uff0c\u800c\u5b83\u4eec\u4e0d\u7231\u6155\u4efb\u4f55\u725b\uff09\uff01\uff01\uff01**\n\n\u4f46\u662f\u53c8\u6709\u8001\u94c1\u8981\u95ee\u4e86~~\uff08\u6709\u90a3\u4e48\u591a\u8001\u94c1\u5417~~\uff09~~\uff1a\u5982\u679c\u6709\u4e00\u4e2a\u5927\u70b9\u4e0d\u559c\u6b22\u5176\u5b83\u4efb\u4f55\u7684\u70b9\uff0c\u4e14\u6ca1\u6709\u4e00\u4e2a\u5927\u70b9\u559c\u6b22\u5b83\u5462\uff1f\n\n\u6240\u4ee5\uff0c\u4e0d\u662f\u6240\u6709\u7684\u65e0\u51fa\u5ea6\u7684\u5927\u70b9\u90fd\u662f\u660e\u661f~~\uff08\u4e0d\u662f\u6240\u6709\u7684\u725b\u5976\u90fd\u53eb\u7279\u4ed1\u82cf\uff09~~\n\n\u5224\u65ad\u6761\u4ef6\u5462\uff0c\u54b3\u54b3~~\uff0c\u770b\u4ee3\u7801\u5427\u2014\u2014\n\n```\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<iostream>\n#include<algorithm>\n#define N 10000\n#define M 50000\nusing namespace std;\nstruct ed{//\u90bb\u63a5\u8868\u5b58\u50a8 \n\tint to,next;\n}edge[M+10];\nstruct bian{//\u5b58\u50a8\u6bcf\u4e00\u6761\u8fb9\u7684\u4fe1\u606f \n\tint u,v;\n}e[M+10];\nint n,m,head[N+10],k=0,dfn[N+10],low[N+10],t=0,ans=0,du[N+10],cnt=0;\n//\u5148\u4e0d\u8981\u7ba1\u8fd9\u4e9b\u53d8\u91cf\u8868\u793a\u4ec0\u4e48\uff0c\u4e5f\u4e0d\u8981\u7ba1\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u76f4\u63a5\u770b\u4e3b\u51fd\u6570\uff0c\u4f60\u5c31\u61c2\u4e86 \nbool instack[N+10];\nint member[N+10],id[N+10];//member\u8868\u793a\u5927\u70b9\u7684\u6210\u5458\u6570\u91cf\uff0cid\u8868\u793a\u8be5\u5c0f\u70b9\u5c5e\u4e8e\u7684\u5927\u70b9 \nstack<int>s;\nvoid add(int u,int v)\n{\n\tedge[++k].to=v;\n\tedge[k].next=head[u];\n\thead[u]=k;\n}\nvoid tarjan(int u)\n{\n\tlow[u]=dfn[u]=++t;instack[u]=1;s.push(u);//\u5165\u6808\uff0c\u8981\u6807\u8bb0\u4e00\u4e0b \n\tint v;\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tv=edge[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(instack[v])low[u]=min(low[u],low[v]);\n\t}//\u6807\u51c6tarjan \n\tif(low[u]==dfn[u])\n\t{\n\t\tans++;//\u7f29\u70b9\u4e4b\u540e\u7684\u5927\u70b9\u6570\u91cf+1\n\t\tmember[ans]=0;\n\t\twhile(s.top()!=u)\n\t\t{\n\t\t\tid[s.top()]=ans;\n\t\t\tinstack[s.top()]=0;\n\t\t\tmember[ans]++;//\u8fd9\u4e2a\u5927\u70b9\u91cc\u7684\u6210\u5458\u6570+1 \n\t\t\ts.pop();\n\t\t}\n\t\tid[s.top()]=ans;\n\t\tinstack[s.top()]=0;\n\t\tmember[ans]++;\n\t\ts.pop();\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint x,y;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\te[i].u=x;e[i].v=y;\n\t\tadd(x,y);\n\t}\n\tfor(int i=1;i<=n;i++)if(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=m;i++)\n\tif(id[e[i].u]!=id[e[i].v])du[id[e[i].u]]++;//\u8ba1\u7b97\u65b0\u7684\u5927\u70b9\u7684\u5ea6 \n\tint temp=0;\n\tfor(int i=1;i<=ans;i++)\n\t{\n\t\tif(du[i]==0)\n\t\t{\n\t\t\tif(temp==0)temp=i;\n\t\t\telse{printf(\"0\");return 0;}//\u5982\u679c\u65e0\u51fa\u5ea6\u7684\u5927\u70b9\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u65e0\u89e3 \n\t\t}\n\t}\n\tprintf(\"%d\",member[temp]);\n\treturn 0;\n}\n```",
        "postTime": 1538656268,
        "uid": 111990,
        "name": "\u849f\u84bb\u521d\u97f3\u30df\u30af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "~~\u6211\u8981\u75af\u4e86\n\nd\u4e86\u4e24\u4e2a\u5c0f\u65f6\uff0c\u7ed3\u679c\u56e0\u4e3av=e[j].next\u5199\u6210v=e[i].next\u53ea\u62ff\u4e03\u5341\u5206\uff08\u4e3a\u4ec0\u4e48\u6211\u8fd8\u80fd\u7384\u5b66\u822c\u5730\u62ff\u4e03\u5341\u5206\uff1f\uff1f\uff1f\uff1f\uff09~~\n\n\u770b\u5b8c\u9898\u4e4b\u540e\u80fd\u60f3\u5230tarjan\u7f29\u70b9\uff0c\u6211\u4eec\u6765\u8003\u8651\u8003\u8651\u7f29\u5b8c\u4e4b\u540e\u7684\u60c5\u51b5\n\n\u7f29\u70b9\u4e4b\u540e\uff0c\u6574\u4e2a\u56fe\u5c31\u662f\u4e00\u4e2aDAG\uff0c\u6211\u4eec\u8981\u627e\u80fd\u88ab\u6240\u6709\u5976\u725b\u559c\u6b22\u7684\u70b9\uff08\u4e00\u7fa4\u725b\uff09\uff0c\u5c31\u662f\u8981\u627e\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u8f93\u51fa\u5176\u4e2d\u725b\u7684\u6570\u91cf\u5373\u53ef\n\n\u4e3a\u4ec0\u4e48\u8981\u51fa\u5ea6\u4e3a0\uff1f\u53ef\u4ee5\u53cd\u8bc1\uff1a\u5982\u679c\u4e00\u4e2a\u70b9u\u51fa\u5ea6\u4e0d\u4e3a0\uff0c\u8bbe\u8fd9\u4e2a\u70b9\u5230v\u6709\u4e00\u6761\u8fb9\u3002\u56e0\u4e3a\u7f29\u70b9\u4e4b\u540e\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\uff0c\u6545\u4e0d\u5b58\u5728\u4ecev\u5230u\u7684\u8def\u5f84\uff0c\u5373u\u4e0d\u53ef\u80fd\u88abv\u559c\u6b22\n\n\u5982\u679c\u540c\u65f6\u6709\u4e24\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9a,b\uff0ca\u662f\u4e0d\u53ef\u80fd\u559c\u6b22b\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e5f\u65e0\u89e3\n\n\u7edf\u8ba1\u51fa\u5ea6\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u5efa\u8fb9\uff0c\u7edf\u8ba1\u5165\u5ea6**\n\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=1e5+5;\nstruct edge\n{\n\tint to,next;\n}e[5*maxn];\nbool instack[maxn];\nint fir[maxn],alloc;\nvoid adde(int u,int v)\n{\n\te[++alloc].next=fir[u];\n\tfir[u]=alloc;\n\te[alloc].to=v;\n}\nint st[maxn],id[maxn],dfn[maxn],low[maxn],in[maxn],num[maxn],tim=0,top=0,cnt=0;\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++tim;\n\tst[++top]=u;\n\tinstack[u]=1;\n\tfor(int i=fir[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(instack[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\t\tif(low[u]==dfn[u])\n\t\t{\n\t\t\tid[u]=++cnt;\n\t\t\tnum[cnt]++;\n\t\t\twhile(st[top]!=u)\n\t\t\t{\n\t\t\t\tid[st[top]]=cnt;\n\t\t\t\tinstack[st[top]]=0;\n\t\t\t\ttop--;\n\t\t\t\tnum[cnt]++;\n\t\t\t}\n\t\t\tinstack[u]=0;\n\t\t\ttop--;\n\t\t}\n}\nint n,m;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)   \n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadde(v,u);//\u53cd\u5411\u5efa\u8fb9\n\t} \n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=fir[i];j;j=e[j].next)\n\t\t{\n\t\t\tint v=e[j].to;\n\t\t\tif(id[i]!=id[v]) in[id[v]]++;\n\t\t}\n\tint ans=0,flag=0;\n\tfor(int i=1;i<=cnt;i++)\n\t\tif(!in[i]) { ans=num[i]; flag++;} \n\tif(flag==1) printf(\"%d\\n\",ans);\n\telse printf(\"0\");\n}\n\t\n\t\t\n\t\t\t\n```",
        "postTime": 1538138789,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u6700\u53d7\u6b22\u8fce\u7684\u725b\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint dfn[10010],low[10010],head[10010],ans[10010],instack[10010],cnt,L,S,n,m,aa,bb;\nint vis[10010],vis1[10010],vis2[10010],sum[10010],num[10010],tmp;\nstack<int> a;\nstruct Edge{\n    int to,next;\n}edge[50010];\nvoid add(int u,int v){\n    edge[++cnt]=(Edge){v,head[u]};\n    head[u]=cnt;\n}\nvoid tarjan(int u){\n    dfn[u]=low[u]=++L;\n    vis[u]=instack[u]=1,a.push(u);\n    for(int k=head[u];k;k=edge[k].next){\n        int v=edge[k].to;\n        if(!vis[v]) tarjan(v),low[u]=min(low[u],low[v]);\n        else if(instack[v]) low[u]=min(low[u],dfn[v]);\n    }\n    if(dfn[u]==low[u]) {\n        S++;\n        while(a.top()!=u) ans[a.top()]=S,sum[S]++,instack[a.top()]=0,a.pop();\n        ans[u]=S,sum[S]++,instack[u]=0,a.pop();\n    }\n}\nvoid go(int n,int m){\n    vis[n]=1;\n    if((ans[n]!=m)&&(!vis2[ans[n]])) num[ans[n]]++,vis2[ans[n]]=1;\n    for(int k=head[n];k;k=edge[k].next){\n        int v=edge[k].to;\n        if(!vis[v]) go(v,m);\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++) scanf(\"%d%d\",&aa,&bb),add(aa,bb);\n    for(int i=1;i<=n;i++) if(!vis[i]) tarjan(i);\n    for(int i=1;i<=n;i++) if(!vis1[ans[i]]){     \n        memset(vis,0,sizeof(vis));\n        memset(vis2,0,sizeof(vis2));\n        go(i,ans[i]);\n        vis1[ans[i]]=1;\n    }\n    for(int i=1;i<=n;i++) if(num[ans[i]]==S-1) {\n        printf(\"%d\",sum[ans[i]]);\n        return 0;\n    }\n    puts(\"0\");\n}\n```\n\u53ef\u7231\u725b\u725b\u4eec\u8c8c\u4f3c\u53c8\u4e0d\u5b89\u5206\u4e86\uff0c\u6447\u8eab\u4e00\u53d8\u53c8\u6765\u4f7f\u5584\u826f\u7684OIer\u4eecGG\u4e86\u3002\n\n\u6b63\u7ecf\u7684\u9898\u89e3\u4ece\u8fd9\u91cc\u5f00\u59cb\uff1a\n\n\n1.\u5efa\u56fe\uff1a\n\n\n\u4e00\u770b\u6570\u636e\uff0c\u5c31\u8981\u7528\u5230\u94fe\u5f0f\u524d\u9879\u661f\uff08\u867d\u7136\u672c\u4eba\u7279\u522b\u53cd\u611f\uff09\n\n\n2.\u6c42\u8fde\u901a\u5757\uff08\u4e13\u4e1a\u7684\u4eba\u8bf4\u662f\u5f3a\u8054\u901a\u5206\u91cf\uff09\n\n\n\u4e0d\u5c11\u4ebaGG\u5728\u5e94\u8be5\u4ee5\u54ea\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\n\n\n\u672c\u4eba\u679c\u65ad\u66b4\u529b\uff0c\u4ee5\u4efb\u610f\u8282\u70b9\u4e3a\u6839\uff0c\u505aTarjan\n\n\n\u7136\u540e\u7528ans[i]\u5b58\u50a8\u8054\u901a\u60c5\u51b5\uff0c\u5373\u7f16\u53f7\u4e3ai\uff08\u8fd9\u91cc\u7528dfs\u5e8f\u4f5c\u4e3a\u70b9\u7684\u7f16\u53f7\uff09\u7684\u70b9\u5c5e\u4e8e\u7b2cans[i]\u4e2a\u8fde\u901a\u5757\n\n\n\u540c\u65f6\u7528sum[j]\u8868\u793a\u7f16\u53f7\u4e3aj\u7684\u8fde\u901a\u5757\u5171\u5305\u542bsum[j]\u4e2a\u8282\u70b9\n\n\n3.\u7edf\u8ba1\u7b54\u6848\n\n\n\u5f88\u5bb9\u6613\u77e5\u9053\u7b54\u6848\u662f\u8054\u901a\u6240\u6709\u8fde\u901a\u5757\u7684\u8fde\u901a\u5757\uff08\u597d\u5427\u6709\u70b9\u7ed5\uff09\u6240\u5305\u542b\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u5bb9\u6613\u60f3\u5230\u518d\u505a\u4e00\u6b21dfs(\u5373go\u51fd\u6570\uff09\n\n\n\u5177\u4f53\u64cd\u4f5c\u662f\uff1a\n\n\n\u5b9a\u4e49num\u6570\u7ec4\uff0c\u7528num[r]\u8868\u793a\u7b2cr\u4e2a\u8fde\u901a\u5757\u53ef\u4ee5\u8fde\u901a\u7684\u5f02\u4e8e\u5b83\u672c\u8eab\u8fde\u901a\u5757\u7684\u6570\u91cf\n\n\n\u5148\u9501\u5b9a\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u901a\u5757\uff08v)\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u6240\u8054\u901a\u7684\u8282\u70b9\uff0c\u5982\u679c\u53d1\u73b0\u53ef\u4ee5\u5230\u8fbe\u53e6\u5916\u7684\u8fde\u901a\u5757\n\n\n\u6ce8\u610f\uff1a\n\nnum[\u65b0\u8282\u70b9\u7684\u8fde\u5757\u7f16\u53f7]++;\n\n\u4e0d\u662fnum[\u5df2\u9501\u5b9a\u8fde\u901a\u5757\u7f16\u53f7]++;\n\n\u5b8c\u6210\u8fd9\u4e00\u6b65\u4e4b\u540e\uff0c\u53ea\u9700\u904d\u5386\u6bcf\u4e2a\u8fde\u901a\u5757\u7684num\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2anum[i]==S(\u8fde\u901a\u5757\u603b\u6570\uff09-1\uff0c\u8f93\u51fasum[i]\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n\n\u7136\u540e\u8865\u4e00\u53e5\u8f93\u51fa0\uff0c\u5c31\u5b8c\u7f8e\u4e86\n",
        "postTime": 1512477178,
        "uid": 75968,
        "name": "yang23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "#\u5361\u4e86\u4e24\u4e2a\u534a\u5c0f\u65f6\uff0c\uff08floyd\u534a\u5c0f\u65f6+\u4e0d\u719f\u7684tarjan2\u5c0f\u65f6\uff09\n\n#\u4f60\u4eec\u662f\u4e0d\u662f\u4e0d\u592a\u7406\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u7528floyd\uff1f\u5176\u5b9e\u505a\u4e4b\u524d\u6211\u5148\u770b\u4e86\u770b\u6570\u636e\u8303\u56f4\uff0c\u663e\u7136\u5f17\u6d1b\u4f0a\u5fb740\u5206\u5de6\u53f3\uff0c\u4f46\u4eca\u5e74\u5c31\u8981\u9000\u5f79\u4e86\uff0c\u90e8\u5206\u5206\u8fd8\u662f\u8981\u62ff\u4e00\u62ff\u7684\uff0ctarjan\u4ee3\u7801\u697c\u4e0b\u5f88\u591a\uff0c\u52a0\u4e0a\u6211\u4e5f\u4e0d\u719f\uff0c\u5c31\u4e0d\u591a\u8bf4\uff0c\u5927\u5bb6\u4e3b\u8981\u8fd8\u662f\u770b\u4e00\u770b\u6211\u7684floyd\uff08\u5b66\u957f\u53bb\u5e74\u5e76\u67e5\u96c632\u5206\u4f60\u4eec\u4e5f\u770b\u4e00\u4e0b\u601d\u8def\uff09\n\n#\u6570\u636e\u8fd8\u662f\u6709\u70b9\u6c34\u7684\uff0c\u63d0\u4ea4\u4e86\u4e00\u904dtarjan41\u5206\uff0c\u53d1\u73b0\u5fd8\u8bb0\u8c03\u7528tarjan(v)\u4e86\uff0c\u8be6\u770b\u4ee3\u7801\n\n##floyd\u4ee3\u7801\uff0850\u5f53\u7136\u5982\u679c\u4f60\u4eec\u518d\u9002\u5f53\u63d0\u9ad8\u90a3\u4e48\u4e00\u70b9\u70b9maxn\u7684\u5927\u5c0f\uff0c\u518d\u8fc7\u4e00\u4e2a\u70b9\u4e5f\u8bf4\u4e0d\u5b9a\uff09\n\n###\u5faa\u73af\u4e00\u6b21\uff0c\u81ea\u5df1\u559c\u6b22\u81ea\u5df1\uff0c\u518d\u8f93\u5165\u66f4\u65b0\u559c\u6b22\u7684\uff0c\u4e00\u904d\u5f17\u6d1b\u4f0a\u5fb7\u66f4\u65b0\u9898\u610f\uff08A\u559c\u6b22B\uff0cB\u559c\u6b22C\uff0c\u90a3\u4e48A\u559c\u6b22C\uff09\uff0c\u7136\u540e\u679a\u4e3e\uff0c\u5982\u679c\u6709\u4e0d\u8fde\u901a\u7684\uff0c\u7b54\u6848\uff08\u521d\u59cb\u5316\u4e3an\uff09\u51cf\u4e00\uff0c\u679a\u4e3e\u5b8c\u8f93\u51fa\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define maxn 3000\nusing namespace std;\nint n,m,f[maxn][maxn],ans;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;ans=n;\n    for(int i=1;i<=m;++i)\n     {\n         int a,b;\n         cin>>a>>b;\n         f[a][b]=1;\n     }\n    for(int i=1;i<=n;++i)\n     f[i][i]=1;\n    for(int k=1;k<=n;++k)\n     for(int i=1;i<=n;++i)\n      for(int j=1;j<=n;++j)\n       if(f[i][k]&&f[k][j])\n        f[i][j]=1;\n    for(int i=1;i<=n;++i)\n     for(int j=1;j<=n;++j)\n      {\n          if(!f[j][i])\n           {\n           ans--;break;\n           }\n      }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n##tarjan\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define maxn 2000000\nusing namespace std;\nint stack[maxn],qr,rq,top,tot,dfn[maxn],low[maxn],ans[maxn];\nint n,m,head[maxn],vis[maxn],num,color[maxn],c[maxn],maxx;\nstruct EDGE\n{\n    int from;\n    int next;\n    int to;\n}edge[maxn*3];\nvoid add(int from,int to)\n{\n    edge[++qr].next=head[from];\n    edge[qr].from=from;\n    edge[qr].to=to;\n    head[from]=qr;\n}\nvoid tarjan(int x)\n{\n    low[x]=dfn[x]=++rq;\n    vis[x]=1;stack[++top]=x;\n    for(int i=head[x];i;i=edge[i].next)\n     {\n         int v=edge[i].to;\n         if(!dfn[v])\n          {\n              tarjan(v);\n              low[x]=min(low[x],low[v]);\n          }\n        else if(vis[v])\n         low[x]=min(low[x],dfn[v]);\n     }\n    if(dfn[x]==low[x])\n     {\n         vis[x]=0;\n         tot++;\n         color[x]=tot;\n         while(stack[top+1]!=x)\n          {\n              vis[stack[top]]=0;\n              color[stack[top]]=tot;\n              ans[tot]++;\n              top--;\n          }\n     }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=m;++i)\n     {\n         int a,b;\n         cin>>a>>b;\n         add(a,b);\n     }\n    for(int i=1;i<=n;++i)\n     if(!dfn[i]) tarjan(i);\n    for(int i=1;i<=qr;++i)\n     if(color[edge[i].from]!=color[edge[i].to])\n      c[color[edge[i].from]]++;\n    for(int i=1;i<=tot;++i)\n     if(!c[i])\n      num++,maxx=ans[i];\n    if(num==1)\n     {\n         printf(\"%d\",maxx);\n         return 0;\n     }\n    else printf(\"0\");\n    return 0;\n}\n```\n##\u5b66\u957f\u7684\u5e76\u67e5\u96c6\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint n,m,f[23333];\nint find(int x)\n{\n    if(f[x]==x) return x;\n    return f[x]=find(f[x]);\n}\nvoid merge(int x,int y)\n{\n    int a=find(x);\n    int b=find(y);\n    if(a!=b) f[x]=y;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int ans=0;\n    for(int i=1;i<=n;i++)\n     f[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        merge(x,y);\n    }\n    for(int i=1;i<=n;i++)\n    if(f[i]==i) ans++;\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1507884223,
        "uid": 49851,
        "name": "\u777f\u5c7f\u9752\u886b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "- \u4e00\u9053\u6bd4\u8f83\u88f8\u7684\u7f29\u70b9\n\n\n- \u5148\u8dd1\u4e00\u904dTarjan\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u7f29\u70b9\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\n\n\n- \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a $0$ \uff0c\u90a3\u56fe\u5927\u6982\u662f\u8fd9\u6837\u7684\n\n\n![qwq](http://images.cnblogs.com/cnblogs\\_com/NuclearSubmarines/1013327/o\\_radsasasd.png)\n\n\n- \u8fd9\u6837 $E$ \u8fd9\u4e2a\u70b9\u7684\u5976\u725b\u5c31\u88ab\u6240\u6709\u7684\u5976\u725b\u559c\u6b22\u5566\uff0c\u6240\u4ee5\u4ed6\u4eec\u4ed6\u4eec\u90fd\u662f\u660e\u661f\uff0c\u76f4\u63a5\u8f93\u51fa $E$ \u8fd9\u4e2a\u70b9\u5305\u542b\u591a\u5c11\u5976\u725b\n\n\n- \u5982\u679c\u4e0d\u6b62\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a $0$\uff0c\u90a3\u56fe\u5927\u6982\u662f\u8fd9\u6837\u7684\n\n\n![qwq](http://images.cnblogs.com/cnblogs\\_com/NuclearSubmarines/1013327/o\\_gsdfadsf.png)\n\n\n- \u8fd9\u6837\u6ca1\u6709\u5976\u725b\u88ab\u6240\u6709\u7684\u5976\u725b\u559c\u6b22\uff0c\u5e94\u8be5\u76f4\u63a5\u8f93\u51fa $0$\n\n\n----\n\n###code\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n\ntemplate<typename ____>\nvoid _____(____ &___) {//\u542c\u8bf4\u8fd9\u4e48\u5199\u8bfb\u5165\u4f18\u5316\u4f1a\u589e\u52a0\u4ee3\u7801\u6709bug\u7684\u51e0\u7387qwq\n    ___=0; ____ __=1;\n    register char _=getchar();\n    for(;_<'0'||_>'9';_=getchar())\n        if(_=='-') __=-1;\n    for(;_>='0'&&_<='9';_=getchar())\n        ___=___*10+_-'0';\n    ___*=__;\n    return;\n}\n\n#define MAXN 10010\n#define MAXM 50010\n\nstruct Edge {\n    int u,v,next;\n    Edge(int u=0,int v=0,int next=0):\n        u(u),v(v),next(next) {}\n};\n\nEdge edge[MAXM];\nint head[MAXN],cnt;\n\nvoid addedge(int u,int v) {\n    edge[++cnt]=Edge(u,v,head[u]);\n    head[u]=cnt;\n    return;\n}\n\nint dfn[MAXN],low[MAXN],timee;\nint st[MAXN],top;\nint col[MAXN],numcolor;\nbool vis[MAXN],ins[MAXN];\nint num[MAXN];\n\nvoid dfs(int now) {\n    dfn[now]=low[now]=++timee;\n    st[++top]=now;\n    vis[now]=ins[now]=true;\n    for(int i=head[now];i;i=edge[i].next) {\n        int v=edge[i].v;\n        if(ins[v]) low[now]=min(low[now],dfn[v]);\n        else if(!vis[v]) {\n            dfs(v);\n            low[now]=min(low[now],low[v]);\n        }\n    }\n    if(dfn[now]==low[now]) {\n        col[now]=++numcolor;\n        num[numcolor]++;\n        while(st[top]!=now) {\n            col[st[top]]=numcolor;\n            num[numcolor]++;\n            ins[st[top--]]=false;\n        }\n        ins[now]=false;\n        top--;\n    }\n    return;\n}\n\n\nint outdeg[MAXN];\n\nint main() {\n    int n,m;\n    _____(n),_____(m);\n    for(int i=1,A,B;i<=m;i++) {\n        _____(A),_____(B);\n        addedge(A,B);\n    }\n    for(int i=1;i<=n;i++)\n        if(!vis[i]) dfs(i);\n    for(int u=1;u<=n;u++)\n        for(int i=head[u];i;i=edge[i].next)\n            if(col[u]!=col[edge[i].v])\n                outdeg[col[u]]++;\n    int sum=0,color;\n    for(int i=1;i<=numcolor;i++)\n        if(outdeg[i]==0) sum++,color=i;\n    if(sum==1) printf(\"%d\\n\",num[color]);\n    else printf(\"0\");\n    return 0;\n}\n\n```\n\n\u770b\u5b8c\u9898\u89e3\u6765\u901b\u4e00\u4e0b[blog](http://blog.csdn.net/NuclearSubmarines/article/details/78207910)\u4e5f\u662f\u4e0d\u9519\u7684\u5462\n",
        "postTime": 1507725453,
        "uid": 37700,
        "name": "zzlzk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u677f\u9898\u5dee\u4e0d\u591a\n\n\n\u6211\u8981\u5199\u9898\u89e3\u554a\u554a\u554a\uff0c\uff0c\u697c\u4e0b\u5168\u90e8\u90fd\u662ftarjan\uff0c\u6ca1\u6709kosaraju\uff0c\u6211\u6765\u6c34\u4e00\u53d1\n\n\n\u53d1\u4e86\u90a3\u4e48\u591a\u9898\u89e3\u624d\u53d1\u73b0luogu\u7684markdown\u8d34\u4ee3\u7801\u4e0d\u80fd\u7528c++\u8981\u7528cpp\n\n\u6bcf\u6b21\u90fd\u662f\u6392\u7248\u4e0d\u6574\u9f50qaq\n\n\n```cpp\n//kosaraju\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#define maxn 200010\nusing namespace std;\nvector<int>G[maxn], rG[maxn];\nvector<int>vs, cmp[maxn];\nint vis[maxn], book[maxn], cnt, flag;\nvoid dfs(int u){\n    if(vis[u])return ;\n    vis[u] = 1;\n    for(int i = 0; i < G[u].size(); i++)dfs(G[u][i]);\n    vs.push_back(u);\n}\nvoid rdfs(int u){\n    if(book[u])return ;\n    book[u] = cnt;\n    if(!flag)cmp[cnt].push_back(u);\n    for(int i = 0; i < rG[u].size(); i++)rdfs(rG[u][i]);\n}\nint main(){\n    int n, m;   cin>>n>>m;\n    for(int i = 1; i <= m; i++){\n        int x, y;  cin>>x>>y;\n        G[x].push_back(y);\n        rG[y].push_back(x);\n    }\n    for(int i = 1; i <= n; i++)dfs(i);\n    for(int i = n-1; i >= 0; i--){\n        if(!book[vs[i]]){\n            ++cnt;\n            rdfs(vs[i]);\n        }\n    }\n    flag = 1;\n    memset(book, 0, sizeof book);\n    rdfs(cmp[cnt][0]);\n    for(int i = 1; i <= n; i++)\n        if(!book[i])cmp[cnt].resize(0);\n    cout<<cmp[cnt].size()<<\"\\n\";\n    return 0;\n}\n```\n",
        "postTime": 1505997367,
        "uid": 36023,
        "name": "gwj12345",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u6765\u81ea\u6211\u7684\u535a\u5ba2\uff1ahttp://www.cnblogs.com/z360/p/7044446.html\n\n\u8fd9\u9053\u9898\u548c\u523b\u5f55\u5149\u76d8\u7684\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u5148\u627e\u8fd9\u4e2a\u56fe\u4e2d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u7f29\u70b9\uff0c\u7136\u540e\u5224\u65ad\u51fa\u8bfb\u4e3a0\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a\u96f6\uff0c\u8fd9\u6837\u7684\u8bdd\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u4e00\u5b9a\u4e0d\u4f1a\u559c\u6b22\u522b\u7684\u725b\uff1f\uff01\n\n\u3010\u5728\u8fd9\u5f80\u540e\u63d0\u7684\u6bcf\u4e2a\u725b\u7684\u51fa\u5ea6\u5747\u4e3a\u7f29\u70b9\u540e\u7684\u51fa\u5ea6\u3011\n\n\u5982\u679c\u6709\u4e24\u4e2a\uff08\u53ca\u4e24\u4e2a\u4ee5\u4e0a\uff09\u7684\u725b\u90fd\u4e0d\u559c\u6b22\u522b\u7684\u725b\u7684\u8bdd\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u8bf4\u660e\u8fd9\u7fa4\u725b\u4e00\u5b9a\u4e0d\u4f1a\u6709\u6bcf\u4e2a\u725b\u90fd\u559c\u6b22\uff1f\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u7b26\u5408\u4e0a\u8ff0\u6761\u4ef6\u7684\u725b\uff0c\u90a3\u5c31\u8f93\u51fa0\n\n\u5982\u679c\u662f\u53ea\u6709\u4e00\u4e2a\u725b\u7684\u51fa\u5ea6\u4e3a\u96f6\uff0c\u662f\u4e0d\u662f\u5c31\u8bf4\u660e\u8fd9\u4e9b\u725b\u4e00\u5b9a\u6709\u88ab\u6240\u6709\u725b\u90fd\u559c\u6b22\u7684\u3002\n\n\u88ab\u6240\u6709\u725b\u90fd\u559c\u6b22\u7684\u725b\u7684\u4e2a\u6570\u4e3a\uff1a\u51fa\u5ea6\u4e3a\u96f6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u70b9\u7684\u4e2a\u6570\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define N 110000\nusing namespace std;\nbool vis[N];\nint n,s,m,x,y,ans,tot,tim,top,sum;\nint out[N],dfn[N],low[N],head[N],belong[N],stack[N],point[N];\nint read()\n{\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0'; ch=getchar();}\n    return x*f;\n}\nstruct Edge\n{\n    int to,next,from;\n}edge[N];\nint add(int x,int y)\n{\n    tot++;\n    edge[tot].to=y;\n    edge[tot].next=head[x];\n    head[x]=tot;\n}\nint tarjan(int now)\n{\n    dfn[now]=low[now]=++tim;\n    vis[now]=true;stack[++top]=now;\n    for(int i=head[now];i;i=edge[i].next)\n    {\n        int t=edge[i].to;\n        if(vis[t]) low[now]=min(low[now],dfn[t]);\n        else if(!dfn[t]) tarjan(t),low[now]=min(low[now],low[t]);\n    }\n    if(low[now]==dfn[now])\n    {\n        sum++;belong[now]=sum;point[sum]++;\n        for(;stack[top]!=now;top--)\n         vis[stack[top]]=false,belong[stack[top]]=sum,point[sum]++;\n        vis[now]=false; top--;\n    }\n}\nint shrink_point()\n{\n    for(int i=1;i<=n;i++)\n     for(int j=head[i];j;j=edge[j].next)\n         if(belong[i]!=belong[edge[j].to])\n          out[belong[i]]++;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n     x=read(),y=read(),add(x,y);\n    for(int i=1;i<=n;i++)\n     if(!dfn[i]) tarjan(i);\n    shrink_point();\n    for(int i=1;i<=sum;i++)\n     if(!out[i]) s++,ans=point[i];\n    if(s!=1) ans=0; \n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1505475016,
        "uid": 43615,
        "name": "QwQ_operator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u4e00\u4e0a\u6765\u53ea\u60f3\u51fa\u4e86\u66b4\u529b\u3002\u3002\u3002\n\n\u5199\u4ee3\u780140min,\u5f97\u4e8649\u5206\n\n\u7136\u540e\u5199\u6b63\u89e32h,\u5404\u79cd\u8fb9\u754c\u3001\u6570\u7ec4\u4e4b\u7c7b\u7684\u7ec6\u8282\u5904\u7406\u4e86\u597d\u4e45,\u7ec8\u4e8eA\u4e86\n\n\u6b63\u89e3\u5c31\u662fTarjan\u52a0\u7f29\u70b9\uff0c\u697c\u4e0bdalao\u5199\u5f97\u5f88\u597d\u4e86\n\n\u8fd9\u91cc\u91cd\u70b9\u8bb2\u66b4\u529b\n\n\u4e00\u4e2a\u4f18\u7f8e\u7684\u66b4\u529b\u80fd\u5e2e\u4f60\u9a97\u597d\u591a\u5206~~~\n\n\u66b4\u529b\u5176\u5b9e\u5f88\u597d\u60f3\n\n\u679a\u4e3e\u5404\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u88ab\u6240\u6709\u5976\u725b\u5d07\u62dc\uff0c\u90a3\u5c31\u8ba9ans++\uff0c\u6700\u540e\u8f93\u51faans\n\n\u600e\u6837\u77e5\u9053\u5b83\u88ab\u54ea\u5934\u5976\u725b\u5d07\u62dc\u5462\uff1f\n\n\u5982\u679ca\u5d07\u62dcb\uff0c\u7531b\u5411a\u6307\u4e00\u6761\u6709\u5411\u8fb9\n\n\u5982\u679c\u4ece\u67d0\u4e2a\u70b9\u53ef\u4ee5\u904d\u5386\u6574\u5f20\u56fe\uff0c\u90a3\u5b83\u5c31\u88ab\u6240\u6709\u5976\u725b\u5d07\u62dc\n\n\u6109\u5feb\u7684dfs\u597d\u4e86~~~\n\n\u8bdd\u8bf4\u67d0\u540c\u5b66\u5199\u4e86\u5f17\u6d1b\u4f0a\u5fb7\u7684\u66b4\u529b\u53ea\u670916\uff0c\u53ef\u89c1\u4f1a\u5199\u4f18\u7f8e\u7684\u66b4\u529b\u662f\u591a\u4e48\u91cd\u8981\n\n\u66b4\u529b\u4ee3\u7801\u5982\u4e0b\uff08\u4f1a\u6709\u6ce8\u91ca\uff09\n\n```cpp\n#include <cstdio>\nusing namespace std;\n\ninline long long read()\n{\n    long long n = 0,k = 1;\n    char ch = getchar();\n    while ((ch > '9' || ch < '0') && ch != '-')  ch = getchar();\n    if(ch == '-') k = -1, ch = getchar();\n    while (ch <= '9' && ch >= '0')\n      {\n          n = n * 10 + ch - '0';\n          ch = getchar();\n     }\n    return n * k;\n}\n\ninline void print(long long n)\n{\n    if(n < 0) {putchar('-'); n = -n;}\n    if(n > 9) print(n / 10);\n    putchar(n % 10 + '0');\n    return ;\n}//\u5feb\u8bfb\u5feb\u8f93\u4e0d\u89e3\u91ca \n\nint N, M, ans;\nstruct Edge\n{\n    int to, nxt;\n}edge[50050];\nint edge_head[10010], edge_num;//\u90bb\u63a5\u8868\u56fa\u5b9a\u5957\u8def \nint vis_num[10010];//i\u53ef\u4ee5\u904d\u5386\u51e0\u4e2a\u70b9 \nbool vis[10010];//i\u6709\u6ca1\u6709\u88ab\u904d\u5386 \n\nvoid add_edge(int a, int b)\n{\n    edge[++edge_num] = (Edge){b, edge_head[a]};\n    edge_head[a] = edge_num;\n    return ;\n}//\u5efa\u8fb9\uff0c\u90bb\u63a5\u8868\u56fa\u5b9a\u5957\u8def\n\nvoid dfs(int s, int root)//root\u8bb0\u5f55\u6700\u521d\u7684\u70b9 \n{\n    int p = edge_head[s];\n    while(p)\n    {\n        int v = edge[p].to;//\u904d\u5386s\u7684\u4e0b\u4e00\u4e2a\u70b9 \n        if(vis[v] == 0)//\u6ca1\u88ab\u904d\u5386 \n        {\n            vis[v] = 1;\n            vis_num[root]++;//\u5d07\u62dcroot\u7684\u70b9++ \n            dfs(v, root);//\u63a5\u7740dfs\u3002\u3002\u3002\u5b9e\u5728\u662f\u592a\u88f8\u7684dfs\u4e86\u3002\u3002\u3002 \n            vis[v] = 0;\n        }\n        p = edge[p].nxt;\n    }\n}\n\nbool OK(int s)//\u7b2cs\u4e2a\u70b9\u80fd\u904d\u5386\u591a\u5c11 \n{\n    for(register int i = 1; i <= N; i++)\n        vis[i] = 0;//\u8d4b\u521d\u503c \n    vis[s] = 1;\n    vis_num[s] = 1;//\u81ea\u5df1\u5d07\u62dc\u81ea\u5df1 \n    dfs(s, s);\n    if(vis_num[s] == N)//\u5982\u679cn\u4e2a\u90fd\u5d07\u62dcs\uff0cs\u5c31\u5408\u9898\u610f \n        return 1;\n    return 0;\n}\n\nint main()\n{\n    N = read();\n    M = read();\n    for(register int i = 1; i <= M; i++)\n    {\n        int a = read(), b = read();\n        add_edge(b, a);//\u53cd\u5411\u5efa\u56fe \n    }\n    for(register int i = 1; i <= N; i++)\n        if(OK(i))\n            ans++;\n    print(ans);\n    return 0;\n}\n``` \n\u6b63\u89e3\u5982\u4e0b\uff08dalao\u8bb2\u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u4e0d\u60f3\u7ec6\u8bb2\u4e86\uff0c\u8d34\u4e2a\u4ee3\u7801\u800c\u5df2\uff09\n\n```cpp \n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <set>\nusing namespace std;\n\ninline long long read()\n{\n    long long n = 0,k = 1;\n    char ch = getchar();\n    while ((ch > '9' || ch < '0') && ch != '-')  ch = getchar();\n    if(ch == '-') k = -1, ch = getchar();\n    while (ch <= '9' && ch >= '0')\n     {\n          n = n * 10 + ch - '0';\n          ch = getchar();\n    }\n    return n * k;\n}\n\ninline void print(long long n)\n{\n    if(n < 0) {putchar('-'); n = -n;}\n    if(n > 9) print(n / 10);\n    putchar(n % 10 + '0');\n    return ;\n}\n\nint N, M, ans, pos;\nvector <int> In[10010];\nvector <int> Out[10010];\nset <int> To[10010];\nint DFN[10010], LOW[10010];\nint Point, Time, Top;\nint Stack[10010], Belong[10010], Point_num[10010];\nbool instack[10010];\n\ninline void tarjan(int u)\n{\n    int v;\n    DFN[u] = LOW[u] = ++Time;\n    Stack[++Top] = u;\n    instack[u] = 1;\n    int Size = In[u].size();\n    for(register int i = 0; i < Size; i++)\n    {\n        v = In[u][i];\n        if(!DFN[v])\n        {\n            tarjan(v);\n            if(LOW[v] < LOW[u])\n                LOW[u] = LOW[v];\n        }\n        else if(instack[v] && DFN[v] < LOW[u])\n            LOW[u] = DFN[v];\n    }\n    if(DFN[u] == LOW[u])\n    {\n        Point++;\n        do\n        {\n            v = Stack[Top--];\n            instack[v] = 0;\n            Belong[v] = Point;\n            Point_num[Point]++;\n        }while(u != v);\n    }\n    return ;\n}\n\nint main()\n{\n    N = read();\n    M = read();\n    for(register int i = 1; i <= M; i++)\n    {\n        int a = read(), b = read();\n        Out[b].push_back(a);\n        In[a].push_back(b);\n    }\n    \n    for(register int i = 1; i <= N; i++)\n    {\n        if(In[i].empty() && Out[i].empty())\n        {\n            putchar('0');\n            return 0;\n        }    \n    }\n    \n    for(register int i = 1; i <= N; i++)\n        if(!DFN[i])\n            tarjan(i);\n    for(register int i = 1; i <= N; i++)//\u7f29\u5b8c\u70b9\u540e\u679a\u4e3e\u6240\u6709\u8fb9\uff0c\u82e5\u67d0\u8fb9\u7684\u4e24\u7aef\u5728\u4e0d\u540c\u7684\u8054\u901a\u5206\u91cf\u91cc\uff0c\u8fd9\u4e24\u4e2a\u5206\u91cf\u5c31\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u7528set\u5efa\u56fe\u9632\u91cd\u8fb9\n    {\n        int Size = In[i].size();\n        for(register int j = 0; j < Size; j++)\n        {\n            int v = In[i][j];\n            if(Belong[i] != Belong[v])\n            {\n                To[Belong[i]].insert(Belong[j]);\n            }\n        }\n    }\n    \n    for(register int i = 1; i <= Point; i++)\n        if(To[i].empty())\n            ans++, pos = i;\n    \n    if(ans == 1)\n        print(Point_num[pos]);\n    else\n        putchar('0');\n    return 0;\n}\n```\n\u8003\u8bd5\u65f6\u80fd\u8fc5\u901f\u7684\u5199\u4e00\u4e2a\u66b4\u529b\u624d\u662f\u738b\u9053~~~\n",
        "postTime": 1504927743,
        "uid": 19551,
        "name": "NishikinoMaki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "Tarjan \u597d\u9898\uff01\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5976\u725b\u4e2d\u7684\u5d07\u62dc\u5173\u7cfb\u662f\u4e00\u4e2a\u5355\u5411\u7684\u5173\u7cfb\uff0c\u800c\u4e14\u5982\u679c\u5d07\u62dc\u7684\u4f20\u9012\u5173\u7cfb\u6b63\u7b26\u5408\u8def\u5f84\u7684\u5ef6\u957f\u6027\u8d28\u3002\u6839\u636e\u8fd9\u4e2a\u5173\u7cfb\u5efa\u56fe\uff0c\u9898\u76ee\u8f6c\u5316\u4e3a\uff1a\u6c42\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u5176\u4ed6\u70b9\u90fd\u6709\u4e00\u6761\u5230\u5b83\u7684\u8def\u5f84\u3002\n\n\u6211\u4eec\u5bf9\u8fd9\u4e2a\u6709\u5411\u56fe\u4e0a\u7528 Tarjan \u8dd1\u4e00\u904d SCC \uff0c\u7f29\u70b9\u4e4b\u540e\u6574\u5f20\u56fe\u53d8\u6210\u4e00\u4e2a DAG\uff0c\u5c31\u975e\u5e38\u597d\u64cd\u4f5c\u4e86\u3002\n\n\n\u590d\u6742\u5ea6\u662f n + m \u7684\u3002\n\n\n**Code**\n\n\n\n\n\n\n\n\n\n    \n            \n            \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define REP(i,a,b) for (int i=(a);i<(b);i++)\n#define N 10005\nint src = 0, cnt = 0, p = -1, zero_degree = 0;\nint dfn[N],low[N],tag[N],out_degree[N],in_degree[N];\nbool in_stack[N],vis[N],ok[N];\nvector<vector<int> > v(N);\nvector<vector<int> > edges(N);\nvector<vector<int> > graph(N);\nstack<int> st;\nint n,m,fm,to,ans;\nvoid tarjan(int u){\n    dfn[u] = low[u] = src++;\n    st.push(u);\n    vis[u] = true;\n    in_stack[u] = true;\n    REP(i,0,v[u].size()){\n        if (!vis[v[u][i]]){\n            tarjan(v[u][i]);\n            low[u] = min(low[u],low[v[u][i]]);\n        }\n        else if (in_stack[v[u][i]]){\n            low[u] = min(low[u],dfn[v[u][i]]);\n        }\n    }\n    if (dfn[u] == low[u]){\n        int temp = st.top();\n        cnt++;\n        do{\n            temp = st.top();\n            tag[temp] = cnt;\n            st.pop();\n        }while(u != temp);\n    }\n}\nvoid dfs(int cur){\n    ok[cur] = true;\n    REP(i,0,graph[cur].size()){\n        if (!ok[graph[cur][i]]){\n            dfs(graph[cur][i]);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    REP(i,0,m){\n        scanf(\"%d%d\",&fm,&to);\n        v[fm].push_back(to);\n    }\n    REP(i,1,n+1) if (!tag[i]) tarjan(i);\n    REP(i,1,n+1){\n        REP(j,0,v[i].size()){\n            if (tag[i] != tag[v[i][j]]){\n                edges[tag[i]].push_back(tag[v[i][j]]);\n                graph[tag[v[i][j]]].push_back(tag[i]);\n                out_degree[tag[i]]++;\n                in_degree[tag[v[i][j]]]++;\n            }\n        }\n    }\n    REP(i,1,cnt+1)\n        if (out_degree[i] == 0){\n            zero_degree++;\n            p = i;\n        }\n    if (zero_degree >= 2){\n        printf(\"0\");\n        return 0;\n    }\n    else\n    {\n        dfs(p);\n        REP(i,1,cnt+1)\n            if (in_degree[i] == 0)\n                if (!ok[i]){\n                    printf(\"0\");\n                    return 0;\n                }\n        REP(i,1,n+1) if (tag[i] == p) ans++;\n        printf(\"%d\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1504786224,
        "uid": 35575,
        "name": "\u4f55\u5353\u7136",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5dee\u4e0d\u591a\u90fd\u662ftrajan\u5427\uff0c\u8fd9\u9053\u9898\u5957\u6a21\u677f\uff0c\u5c31\u53ef\u4ee5\u8fc7\uff0c\u4f46\u8fd8\u662fWA\u4e86\u51e0\u904d\uff0c\uff0c\u5199\u8fd9\u79cd\u9898\u4e00\u5b9a\u8981\u5c0f\u5fc3\u5c0f\u5fc3\u518d\u5c0f\u5fc3\uff0c\u5751\uff0c\u4e00\u4e2a\u5b57\u6bcd\u7684\u9519\uff0c\u5751\u4e86\u62115\u6b21\uff0c\n\n\u4e16\u754c\u4e0a\u6700\u9065\u8fdc\u7684\u8ddd\u79bb\u662f\uff0c\u660e\u660e\u4e24\u4e2a\u7a0b\u5e8f\u90a3\u4e48\u50cf\uff0c\u4e00\u4e2aA\u4e86\uff0c\u4e00\u4e2aWA\u4e86\n\n\n\n\n```cpp\n#include <cstdio>\n#include<iostream> \n#include <algorithm>\nusing namespace std;\nconst int maxn=10010,maxm=50050;\nstruct {\n    int s,e,next;//\u5efa\u7acb\u76ee\u5f55\uff0c\u5f00\u59cb\uff0c\u7ed3\u675f\u548c\u4e0a\u4e00\u4e2a\uff1b\n} v[maxm];//\u4f7fv\u8fd9\u4e2a\u6570\u7ec4\u80fd\u52a8\u7528\u8fd9\u4e2a\u76ee\u5f55\uff1b\nint n,m,ans,group,cnt,top,total;\nint belong[maxn],du[maxn],first[maxn],dfn[maxn],low[maxn],st[maxn];\ninline int Get() {\n    char c=getchar();\n    int res=0;\n    while ((c<'0')||('9'<c)) c=getchar();\n    while (('0'<=c)&&(c<='9')) res=res*10+(int)(c-'0'),c=getchar();\n    return res;\n}\nvoid Tarjan(int k) {\n    dfn[k]=++cnt; //\u6807\u53f7\u81ea\u52a0\uff1b \u7b2ci\u4e2a\u70b9\uff1b\n    low[k]=cnt; //\u628a\u6807\u53f7\u7ed9\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u6570 \uff1b\n    st[++top]=k;//i\u7684\u6807\u53f7\u7ed9st\u3010i\u3011\uff1b\n    int ttt=top;//\u6807\u53f7\u81ea\u52a0\uff1b\n    for (int p=first[k]; p; p=v[p].next)  //\u4e0d\u65ad\u53bb\u5bfb\u627e\u81ea\u5df1\u7684\u4e0a\u4e00\u4e2a\u76f4\u5230\u627e\u4e0d\u5230\u4e3a\u6b62\uff1b\n        if (!belong[v[p].e]) \n        { //\u5982\u679c\u6807\u53f7\u5f53\u4e2d\u7684\u67d0\u4e00\u70b9p\u7684\u7ed3\u675f\u70b9\u7684\u503c\u5728\u51fa\u5ea6\u7684\u6807\u53f7\u4e3a0\uff1b\n            if (!dfn[v[p].e]) Tarjan(v[p].e);//\u5982\u679cdfn\uff0cp\u7ed3\u675f\u70b9\u7684\u6807\u53f7\u4e3a0\uff1b\u5c31\u518d\u53bb\u4ee5\u8fd9\u4e2a\u70b9\u53bb\u5bfb\u627e\u53e6\u4e00\u4e2a\u70b9\uff1b\n            low[k]=min(low[k],low[v[p].e]);//\u628a\u8fd9\u4e2a\u9636\u6bb5\u7684\u503c\u5168\u90e8\u8d4b\u503c\u7ed9\u6700\u8fd1\u7684\u6807\u53f7\uff1b\n        }\n    if (dfn[k]==low[k]) {//\u5982\u679c\u6211\u7684\u6700\u8fd1\u7684\u6700\u524d\u9762\u7684\u6807\u53f7\u4e0e\u6211\u76ee\u524d\u7684\u70b9\u7684\u6807\u53f7\u76f8\u7b49\u5c31\u8bf4\u660e\u4e00\u5b9a\u662f\u6709\u81ea\u73af\u4e86\n        ++total;//\u6570\u91cf\u52a0\u4e00\uff1b\n        for (int i=ttt; i<=top; ++i) { //\u6570\u51fa\u5230\u5e95\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684low\u3010k\u3011\n            belong[st[i]]=total;\n        }\n        top=ttt-1;\n    }\n}\nint main() {\n    n=Get();//\u8f93\u5165\u725b\u7684\u4e2a\u6570\n    m=Get();//\u8f93\u5165\u8fb9\u7684\u4e2a\u6570\n    for (int i=1; i<=m; ++i) {\n        v[i].s=Get();//\u8f93\u5165\u5f00\u59cb\u70b9\n        v[i].e=Get();//\u8f93\u5165\u7ed3\u675f\u70b9\n        v[i].next=first[v[i].s];//\u628a\u4e0a\u4e00\u4e2a\u5f97\u503c\u6539\u53d8\u6210\u73b0\u5728\u8fd9\u4e2a\u7684\u503c\uff0c\u4f7f\u4ed6\u6210\u4e3a\u4e0b\u4e00\u4e2a\u7684\u4e0a\u4e00\u4e2a\uff1b\n        first[v[i].s]=i;//\u628a\u76ee\u524d\u7684\u6807\u53f7\u7ed9first\uff0c\u4ee3\u8868\u7684\u662f\u4e0a\u4e00\u4e2a\u7684\u7f16\u53f7\u662f\u591a\u5c11\uff1b\n    }\n    for (int i=1; i<=n; ++i)\n        if (!belong[i])  //\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e2a\u51fa\u5ea6\u662f\u4e0d\u662f\u4e3a0\uff0c\u4e0d\u4e3a0\u7684\u8bdd \u5c31\u5f00\u59cbtarjan\uff1b\u8fd9\u4e2a\u8fd8\u4e0d\u719f\u6089\uff1b \n            Tarjan(i);      //\u4ece\u6bcf\u4e00\u4e2a\u70b9\u5f00\u59cb\u904d\u5386\uff1b\n    for (int i=1; i<=m; ++i)// \u679a\u4e3e\u8fb9\uff1b\n        if (belong[v[i].s]!=belong[v[i].e])// \u5982\u679c\u6211\u7ed3\u675f\u70b9\u7684\u548c\u81ea\u5df1\u7684\u5f00\u59cb\u70b9\u76f8\u540c\u5c31\u8bf4\u660e\u8fd9\u662f\u4e2a\u81ea\u73af\n            ++du[belong[v[i].s]];//\u90a3\u4e48du\u7684\u8fd9\u4e2a\u6807\u53f7\u5c31\u5f97\u52a01\uff1b \n    for (int i=1; i<=total; ++i)\n        if (!du[i]) ++ans,group=i;//\u5982\u679cdu\u7684i\u4e3a0\uff0cans\u5c31\u52a0\u4e00\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u7f16\u53f7\uff0c \n    if (ans!=1) printf(\"0\\n\");//ans\u4e0d\u662f\u4e3a\u4e00\uff0c\u4e5f\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u6570\uff0c\u5c31\u8f93\u51fa0\u56e0\u4e3a\u4e00\u4e2a\u56fe\u91cc\u4e0d\u53ef\u80fd\u51fa\u73b0\u591a\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff1b \n    else {\n        ans=0; \n        for (int i=1; i<=n; ++i)\n            if (belong[i]==group) ++ans;\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1502503715,
        "uid": 21869,
        "name": "maple_tzc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u697c\u4e0bdalao\u4eec\u7528tarjan\u7684\u5f88\u591a\uff0c\u4f46\u597d\u50cf\u6ca1\u6709\u7528\u5e76\u67e5\u96c6+tarjan\u7684\uff0c\u90a3\u6211\u5c31\u8bb2\u8bb2\u6211\u7684\u601d\u8def\u5427\u3002\n\nTarjan\u7b97\u6cd5\u9884\u5904\u7406\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7f29\u70b9\u5904\u7406\uff0c\u7136\u540e\u5f97\u5230\u4e00\u5f20\u65b0\u56fe\uff0c\u4e14\u8fd9\u5f20\u56fe\u4e3a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u7136\u540e\u5229\u7528\u5e76\u67e5\u96c6\u67e5\u627e\u4ece\u4efb\u4f55\u8282\u70b9\u51fa\u53d1\u90fd\u53ef\u4ee5\u62b5\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u5373\u53ef\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u67e5\u8be2\u7236\u4eb2\u8282\u70b9\u4e3ai\u7684\u4e2a\u6570\uff0c\u4f46\u662f\u8981\u6ce8\u610funionn\u7684\u64cd\u4f5c\u65f6\uff0cfa[xx]=fy\uff0c\u800c\u4e0d\u662f\u539f\u6765\u7684\u6837\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u64cd\u4f5c\u7684\u662f\u8ba9\u8fb9\u4e0a\u4e00\u4e2a\u8282\u70b9\u4e0e\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u4f2aunionn\u64cd\u4f5c\u5427\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u4e2a\u7b26\u5408\u9898\u610f\u7684\u65b0\u56fe\u7684\u5927\u8282\u70b9\u4e2d\u5206\u522b\u53bb\u8ba1\u7b97\u5c0f\u8282\u70b9\u4e2a\u6570\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u9884\u5904\u7406\u76f4\u63a5\u5b9e\u73b0\uff09\uff0c\u6700\u540e\u8f93\u51fa\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u601d\u8def\u5e76\u4e0d\u662f\u5f88\u96be\u60f3\uff0c\u53ea\u662f\u7ec6\u8282\u8f83\u591a\uff08\u5927\u6982\u8fd9\u56db\u6b21\u6709\u6548\u8fc7\u9898\u5f97\u5206\u662f48,49,93\uff0cAC\uff09\u5206\u6570\u7684\u5206\u914d\u4e5f\u662f\u9189\u4e86\u3002\n\n\u63a8\u4ecb\u4e00\u6ce2\u535a\u5ba2<http://blog.csdn.net/Stockholm\\_Sun>\uff0c\u6b22\u8fce\u6765\u8e29\uff0c\u5982\u6709\u95ee\u9898\u8bf7\u8d50\u6559\uff01\n\n\n```cpp\n#include<iostream>\nusing namespace std;\nint i,j,n,m;\nbool b[100001];\nint color[100001],colorn;\nint stack[100001],top;//\u6570\u7ec4\u6a21\u62df\u6808 \nint s,e,temp,index,ans,bb[100001];\nint dfn[100001],low[100001];\nint head[100001],rd[100001],fa[100001];\nint gs[100001];\nstruct data\n{\n    int v,u;\n    data *nxt;\n}a[1000001];\n\nint r()\n{\n    char ch=getchar();\n    int ans=0;\n    while(ch<'0'||ch>'9')\n    {\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        ans*=10;\n        ans+=ch-'0';\n        ch=getchar();\n    }\n    return ans;\n}\n\nint ins(int ss,int ee)\n{\n    temp++;\n    a[temp].nxt=&a[head[ss]];\n    a[temp].u=ss;\n    head[ss]=temp;\n    a[temp].v=ee;\n}\n\nint findd(int xx)\n{\n    if(fa[xx]==xx) return fa[xx];\n    return fa[xx]=findd(fa[xx]);\n}\n\nvoid unionn(int xx,int yy)\n{\n    int fy=findd(yy);\n    fa[xx]=fy;\n}\n\nvoid tarjan(int x)\n{\n    dfn[x]=++index;\n    low[x]=index;\n    b[x]=1,bb[x]=1;\n    stack[++top]=x;\n    data *p=&a[head[x]];\n    while(p->v!=0)\n    {\n        int vv=p->v;\n        if(!dfn[vv])\n        {\n            tarjan(vv);\n            low[x]=min(low[x],low[vv]);\n        }\n        else if(b[vv])\n        {\n            low[x]=min(low[x],dfn[vv]);\n        }\n        p=p->nxt;\n    }\n    if(dfn[x]==low[x])\n    {\n    b[x]=0;\n    color[x]=++colorn;\n    while(stack[top]!=x)\n    {\n        color[stack[top]]=colorn;\n        b[stack[top--]]=0;\n    }\n    top--;\n    }\n}\n\nint main()\n{\n    n=r(),m=r();\n    for(i=1;i<=n;i++)\n    rd[i]=1;\n    for(i=1;i<=m;i++)\n    {\n        s=r(),e=r();\n        ins(s,e);\n    }\n    for(i=1;i<=n;i++)\n    if(!bb[i])\n    tarjan(i);\n    for(i=1;i<=colorn;i++)\n    fa[i]=i;\n    for(i=1;i<=m;i++)\n    {\n        if(color[a[i].v]!=color[a[i].u])\n        unionn(color[a[i].u],color[a[i].v]);\n    }\n    for(i=1;i<=colorn;i++)\n    findd(i);\n    for(j=1;j<=colorn;j++)\n    for(i=1;i<=colorn;i++)\n    if(fa[i]==j)\n    gs[j]++;\n    \n    for(i=1;i<=colorn;i++)\n    {\n        if(gs[i]==colorn)\n        for(j=1;j<=n;j++)\n        if(color[j]==i)\n        ans++;\n    }\n    cout<<ans;\n}\n```",
        "postTime": 1502432513,
        "uid": 17407,
        "name": "sunyt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "**\u6c34\u9898**tarjn\u7684\u7f29\u70b9\u6a21\u677f\u9898\u3002\n\n\u753b\u51e0\u4e2a\u56fe\uff0c\u6a21\u62df\u4e00\u4e0b\uff0c\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u89c4\u5f8b\uff1a\n\n**\u7f29\u5b8c\u70b9\u540e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\uff0c\u90a3\u5c31\u6ca1\u6709\u6700\u53d7\u6b22\u8fce\u7684\u599e\uff0c\u56e0\u4e3a\u90a3\u51e0\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u7f29\u70b9\u5185\u7684\u5404\u70b9\u4e0d\u53ef\u80fd\u8054\u901a\u3002**\n\n\u7531\u6b64\u53ef\u89c1\uff0c\u8fd9\u4e2a\u9898\u76ee\u7684\u601d\u8def\u5c31\u662f\uff1a\u627e\u51fa\u5ea6\u4e3a\u96f6\u7684\u7f29\u70b9\uff0c\u82e5\u6709\u4e00\u4e2a\uff0c\u5219\u8f93\u51fa\u8be5\u7f29\u70b9\u4e2d\u70b9\u7684\u4e2a\u6570\uff0c\u5426\u5219\u8f93\u51fa0\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 500000+15\nusing namespace std;\nstruct nond{\n    int x,y,next;\n    nond(int x=0,int y=0,int next=0):\n        x(x),y(y),next(next) {}\n}edge[maxn];\nint n,m,sumedge,head[maxn],x,y;\nint top,stack[maxn],dfn[maxn],low[maxn],tim;\nint vis[maxn],visstack[maxn],colur[maxn],sumcol;\nint num[maxn],bns[maxn];\nint add(int a,int b){\n    edge[++sumedge]=nond(a,b,head[x]);\n    return head[x]=sumedge;\n}\nint dfs(int now){\n    low[now]=dfn[now]=++tim;\n    stack[++top]=now;\n    vis[now]=1;\n    visstack[now]=1;\n    for(int u=head[now];u;u=edge[u].next)\n        if(visstack[edge[u].y])\n            low[now]=min(low[now],dfn[edge[u].y]);\n        else if(!vis[edge[u].y]){\n            dfs(edge[u].y);\n            low[now]=min(low[now],low[edge[u].y]);\n        }\n    if(low[now]==dfn[now]){\n        sumcol++;\n        colur[now]=sumcol;\n        while(stack[top]!=now){\n            colur[stack[top]]=sumcol;\n            visstack[stack[top]]=0;\n            top--;\n            bns[sumcol]++;\n        }\n        visstack[now]=0;\n        bns[sumcol]++;\n        top--;\n    }\n    return 0;\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y;\n        add(x,y);\n    }\n    for(int i=1;i<=n;i++)\n        if(!vis[i])    dfs(i);\n    for(int i=1;i<=m;i++)\n        if(colur[edge[i].x]!=colur[edge[i].y])\n            num[colur[edge[i].x]]++;\n    int chudu=0,ans=0;\n    for(int i=1;i<=sumcol;i++)\n        if(num[i]==0){\n            chudu++;\n            ans=i;\n        }\n    if(chudu!=1)    cout<<\"0\";\n    else    cout<<bns[ans];\n}\n```",
        "postTime": 1494250825,
        "uid": 21719,
        "name": "\u6ca7\u6f9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u6ca1\u4eba\u5199kosaraju\u7b97\u6cd5\u4e48\uff1f\u5176\u5b9e\u4e2a\u4eba\u89c9\u5f97kosaraju\u6613\u61c2\u4e00\u4e9b\uff08~~\u800c\u4e14\u540d\u79f0\u548c\u6211\u7684\u6635\u79f0\u6709\u51e0\u5206\u76f8\u4f3c~~\uff09\u3002\n\n\u601d\u8def\u7f51\u4e0a\u90fd\u6709\u5566\uff0c\u5c31\u662f\u7f29\u70b9\u540e\u627e\u51fa\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6709\u51e0\u4e2a\uff0c\u6709\u591a\u4e2a\u5219\u8f93\u51fa0\uff0c\u53ea\u6709\u4e00\u4e2a\u5219\u8f93\u51fa\u90a3\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u3002\n\nkosaraju\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,cnt,scc[10005],out[10005],siz[10005],ans;\nbool book[10005];\nvector<int> g[2][10005];\nstack<int> sta;\nvoid initdfs(int u)\n{\n    book[u]=1;\n    for(vector<int>::iterator i=g[0][u].begin();i!=g[0][u].end();i++)\n        if(!book[*i])initdfs(*i);\n    sta.push(u);\n}\nvoid dfs(int u)\n{\n    book[u]=1,scc[u]=cnt,siz[cnt]++;\n    for(vector<int>::iterator i=g[1][u].begin();i!=g[1][u].end();i++)\n        if(!book[*i])dfs(*i);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1,a,b;i<=m;i++)\n        scanf(\"%d%d\",&a,&b),g[0][a].push_back(b),g[1][b].push_back(a);\n    for(int i=1;i<=n;i++)if(!book[i])initdfs(i);\n    memset(book,0,sizeof(book));\n    while(!sta.empty())\n    {\n        int i=sta.top();sta.pop();\n        if(!book[i])cnt++,dfs(i);\n    }\n    for(int u=1;u<=n;u++)\n        for(vector<int>::iterator i=g[0][u].begin();i!=g[0][u].end();i++)\n            if(scc[u]!=scc[*i])out[scc[u]]++;\n    for(int i=1;i<=cnt;i++)\n        if(!out[i])\n        {\n            if(ans){printf(\"0\\n\");return 0;}\n            else ans=i;\n        }\n    printf(\"%d\\n\",siz[ans]);\n    return 0;\n}\n```",
        "postTime": 1491400511,
        "uid": 22388,
        "name": "XZYQvQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u601d\u8def\u662ftarjan\u6c42\u5f3a\u8054\u901a\u5206\u91cf\n\n\u9898\u610f\u4e3a\u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u627e\u51fa\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u5747\u80fd\u5230\u8fbe\u8be5\u70b9\uff0c\u6c42\u51fa\u8fd9\u4e9b\u70b9\u7684\u6570\u91cf\n\n\u9996\u5148\u6211\u4eec\u6c42\u51fa\u6240\u6709\u5f3a\u8054\u901a\u5206\u91cf\n\n\u663e\u7136\uff0c\u82e51\u80fd\u5230\u8fbe2\uff0c\uff082\uff0c3\uff0c4\uff09\u662f\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\n\n\u90a3\u4e481\u80af\u5b9a\u80fd\u5230\u8fbe2\uff0c3\uff0c4\u6240\u6709\u70b9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u9898\u7b80\u5316\u6210\uff1a\n\n\u627e\u51fa\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u4f7f\u5f97\u6240\u6709\u5f3a\u8054\u901a\u5206\u91cf\u5747\u80fd\u5230\u8fbe\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u6c42\u51fa\u6b64\u5f3a\u8054\u901a\u5206\u91cf\u7684\u5143\u7d20\u4e2a\u6570\n\n\u6613\u8bc1\u660e\u53ea\u6709\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u6ee1\u8db3\u8981\u6c42\n\n\u90a3\u4e48\u6ee1\u8db3\u6761\u4ef6\u7684\u5206\u91cf\u662f\u54ea\u4e2a\u5462\uff1f\u5176\u5b9e\u8fd9\u4e0d\u9700\u8981\u7528\u641c\u7d22\n\n\u53ea\u8981\u6ee1\u8db3\u5165\u5ea6\u4e3a0\u7684\u5f3a\u8054\u901a\u5206\u91cf\u4e0d\u8d85\u8fc71\uff0c\u90a3\u4e48tarjan\u6c42\u5f97\u6700\u8fdc\u7684\u5f3a\u8054\u901a\u5206\u91cf\u5c31\u662f\u6240\u6c42\u89e3\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a\n\n\n\n\n    \n\n        \n        \n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint i,j,k,m,n;\nint top=0,cnt=0,num=0;\nint First[100001],Next[100001],Last[100001],a[100001],pe[100001],pupuvovovovo[100001];\nbool b[100001],b2[100001];\nint q[100001],dfn[100001],low[100001],fa[100001];\nvoid add(int x,int y)\n{\n    k++;a[k]=y;\n    if(First[x]==0)First[x]=k;\n    else Next[Last[x]]=k;\n    Last[x]=k;\n}\nvoid tarjan(int x)\n{\n    top++;cnt++;\n    dfn[x]=low[x]=cnt;\n    q[top]=x;\n    b[x]=true;\n    int t=First[x];\n    while(t!=0)\n    {\n        int v=a[t];\n        if(dfn[v]==0)\n        {\n            tarjan(v);\n            if(low[v]<low[x])\n            low[x]=low[v];\n        }\n        else if(b[v]&&dfn[v]<low[x])\n        low[x]=dfn[v];\n        t=Next[t];\n    }\n    if(dfn[x]==low[x])\n    {\n        n++;\n        while(q[top+1]!=x)\n        {\n            pe[n]++;\n            fa[q[top]]=n;\n            b[q[top]]=false;\n            top--;\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int x,y;\n    k=0;\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        add(x,y);\n    }\n    int m=n+1;\n    for(i=1;i<=m-1;i++)\n    {\n        if(dfn[i]==0)\n        tarjan(i);\n    }\n    for(i=1;i<=m-1;i++)\n    {\n        for(int o=First[i];o;o=Next[o])\n        if(fa[i]!=fa[a[o]])\n        pupuvovovovo[fa[i]]++;\n    }\n    int pp=0;\n    for(i=m;i<=n;i++)\n    if(pupuvovovovo[i]==0)pp++;\n    if(pp==1)\n    cout<<pe[m];\n    else cout<<0;\n}\n```",
        "postTime": 1487745467,
        "uid": 6063,
        "name": "NephrenRuq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48\u62d3\u6251\u5e8f\u561bQwQ\n\n\u53ea\u9700\u8981\u627e\u51fa\u6240\u6709\u7f29\u70b9\u4ee5\u540e\u7684\u53cd\u56fe\u4e0a\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9 \u7136\u540e\u5728\u8fd9\u4e9b\u70b9\u4e0a\u8dd1bfs\u770b\u770b\u80fd\u4e0d\u80fd\u5230\u8fbe\u6240\u6709\u70b9\u5c31\u53ef\u4ee5\u4e86\n\n\u8bb0\u5f97tarjan\u7684\u65f6\u5019\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u55ef\n\n\u5f3a\u8fde\u901a\u5206\u91cf\u88f8\u9898 \u771f\u7684\u633a\u6c34\u7684 \u62111A\u4e86hhh\n\n[codec]\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N=10005,M=50005;\nint n=0,m=0;\nint head[N],to[M],next[M],edge=0;\nint dfn[N],inS[N],idx=1,low[N];\nint stk[N],top=0;\nint comp[N],n2=0,cnt[N];\nint in[N];\nint head2[N],to2[M],next2[M],edge2=0;\nint q[N*233],front=0,back=0,vis[N];\ninline void addEdge(int u,int v) {\n    to[edge]=v,next[edge]=head[u],head[u]=edge++;\n}\nvoid tarjan(int x) {\n    dfn[x]=low[x]=idx++;\n    stk[top++]=x;\n    inS[x]=1;\n    for (int e=head[x];~e;e=next[e]) {\n        int& v=to[e];\n        if (!dfn[v]) {\n            tarjan(v);\n            low[x]=min(low[x],low[v]);\n        } else if (inS[x]) \n            low[x]=min(low[x],dfn[v]);\n    }\n    if (dfn[x]==low[x]) {\n        ++n2;\n        int u=0;\n        do {\n            u=stk[--top];\n            comp[u]=n2;\n            inS[u]=0;\n            ++cnt[n2];\n        } while (u!=x);\n    }\n}\ninline void addEdge2(int u,int v) {\n    ++in[v];\n    to2[edge2]=v,next2[edge2]=head2[u],head2[u]=edge2++;\n}\ninline void build() {\n    for (int i=1;i<=n;++i)\n        for (int e=head[i];~e;e=next[e]) {\n            int &u=comp[i],&v=comp[to[e]];\n            if (u!=v)\n                addEdge2(v,u);\n        }\n}\ninline int bfs(int s) {\n    front=back=0;\n    memset(vis,0,sizeof(vis));\n    q[back++]=s;\n    vis[s]=1;\n    while (front<back) {\n        int x=q[front++];\n        for (int e=head2[x];~e;e=next2[e]) {\n            int& v=to2[e];\n            if (!vis[v]) {\n                q[back++]=v;\n                vis[v]=1;\n            }\n        }\n    }\n    for (int i=1;i<=n2;++i)\n        if (!vis[i])\n            return 0;\n    return 1;\n}\nint main(void) {\n    memset(head,-1,sizeof(head));\n    scanf(\"%d %d\",&n,&m);\n    while (m--) {\n        int u=0,v=0;\n        scanf(\"%d %d\",&u,&v);\n        addEdge(u,v);\n    }        \n    for (int i=1;i<=n;++i)\n        if (!dfn[i])\n            tarjan(i);\n    //\u5efa\u7f29\u70b9\u4ee5\u540e\u7684\u53cd\u56fe \u5c31\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9bfs\n     memset(head2,-1,sizeof(head2));\n     build();\n     int ans=0;\n     for (int i=1;i<=n2;++i)\n         if (!in[i])\n             if (bfs(i))\n                 ans+=cnt[i];\n    printf(\"%d\\n\",ans);\n    return 0;\n} \n[/codec]\n```",
        "postTime": 1478565133,
        "uid": 13433,
        "name": "QwQ2000",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2341 \u3010[HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b\u3011"
    },
    {
        "content": "## **\u9898\u76ee\u80cc\u666f**\n\n\u672c\u9898\u6d4b\u8bd5\u6570\u636e\u5df2\u4fee\u590d\u3002\n\n## **\u9898\u76ee\u63cf\u8ff0**\n\n\u6bcf\u5934\u5976\u725b\u90fd\u68a6\u60f3\u6210\u4e3a\u725b\u68da\u91cc\u7684\u660e\u661f\u3002\u88ab\u6240\u6709\u5976\u725b\u559c\u6b22\u7684\u5976\u725b\u5c31\u662f\u4e00\u5934\u660e\u661f\u5976\u725b\u3002\u6240\u6709\u5976\n\n\u725b\u90fd\u662f\u81ea\u604b\u72c2\uff0c\u6bcf\u5934\u5976\u725b\u603b\u662f\u559c\u6b22\u81ea\u5df1\u7684\u3002\u5976\u725b\u4e4b\u95f4\u7684\u201c\u559c\u6b22\u201d\u662f\u53ef\u4ee5\u4f20\u9012\u7684\u2014\u2014\u5982\u679cA\u559c\n\n\u6b22B\uff0cB\u559c\u6b22C\uff0c\u90a3\u4e48A\u4e5f\u559c\u6b22C\u3002\u725b\u680f\u91cc\u5171\u6709N \u5934\u5976\u725b\uff0c\u7ed9\u5b9a\u4e00\u4e9b\u5976\u725b\u4e4b\u95f4\u7684\u7231\u6155\u5173\u7cfb\uff0c\u8bf7\u4f60\n\n\u7b97\u51fa\u6709\u591a\u5c11\u5934\u5976\u725b\u53ef\u4ee5\u5f53\u660e\u661f\u3002\n\n**\u8f93\u5165\u683c\u5f0f\uff1a**\n\n\uf06c \u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6574\u6570\uff1aN\u548cM\n\n\uf06c \u7b2c\u4e8c\u884c\u5230\u7b2cM + 1\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6574\u6570\uff1aA\u548cB\uff0c\u8868\u793aA\u559c\u6b22B\n\n **\u8f93\u51fa\u683c\u5f0f\uff1a**\n\n\uf06c \u7b2c\u4e00\u884c\uff1a\u5355\u72ec\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u660e\u661f\u5976\u725b\u7684\u6570\u91cf\n\n**\u8f93\u5165\u6837\u4f8b**\n\n```\n3 3\n1 2\n2 1\n2 3\n```\n\n**\u8f93\u51fa\u6837\u4f8b**\n\n```\n1 \n```\n\n## **\u8bf4\u660e**\n\n\u53ea\u6709 3 \u53f7\u5976\u725b\u53ef\u4ee5\u505a\u660e\u661f\n\n**\u3010\u6570\u636e\u8303\u56f4\u3011**\n\n10%\u7684\u6570\u636eN<=20, M<=50\n\n30%\u7684\u6570\u636eN<=1000,M<=20000\n\n70%\u7684\u6570\u636eN<=5000,M<=50000\n\n100%\u7684\u6570\u636eN<=10000,M<=50000\n\n**\u9898\u89e3\uff1a**\n\n\u672c\u9898\u5229\u7528\u7ed3\u8bba\uff1a\u5728DAG\u4e2d\uff0c \u5982\u679c **\u6709\u4e14\u4ec5\u6709** \u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a0 \uff0c\u90a3\u4e48\u8be5\u70b9\u53ef\u4ee5\u88ab\u6240\u6709\u70b9\u904d\u5386\u5230\uff1b\u53cd\u4e4b\uff0c\u8be5\u56fe\u4e2d\u6ca1\u6709\u53ef\u4ee5\u88ab\u6240\u6709\u70b9\u904d\u5386\u5230\u7684\u70b9\u3002\n\n\u81f3\u4e8e\u8bc1\u660e\uff0c\u6211\u4e0d\u4f1a \u5229\u7528\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1b\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <stack>\nusing namespace std;\nconst int N = 1e4 + 5;\nint n, m, ans;\nstruct edge { int to, nxt; } e[50005];\nint cnt, head[N], chu[N], size[N];\nvoid add(int from, int to) {\n    e[++ cnt].to = to;\n    e[cnt].nxt = head[from];\n    head[from] = cnt;\n}\nstack <int> s;\nint dfn[N], low[N], tot, scc, tar[N];\nvoid tarjan(int x) {\n    dfn[x] = low[x] = ++ tot;\n    s.push(x);\n    for(int i = head[x]; i ;i = e[i].nxt) {\n        int to = e[i].to;\n        if(! dfn[to]) {\n            tarjan(to);\n            low[x] = min(low[x], low[to]);\n        }\n        else if(! tar[to])\n            low[x] = min(low[x], dfn[to]);\n    }\n    if(dfn[x] == low[x]) {\n        scc ++;\n        while(1) {\n            int y = s.top(); s.pop();\n            tar[y] = scc; size[scc] ++;\n            if(y == x) break;\n        };\n    }\n}\nint main() {\n    cin >> n >> m;\n    for(int i = 1, x, y;i <= m;i ++) cin >> x >> y, add(x, y);\n    for(int i = 1;i <= n;i ++) if(! low[i]) tarjan(i);\n     for(int x = 1;x <= n;x ++) {\n        for(int i = head[x]; i ;i = e[i].nxt) {\n            int y = e[i].to;\n            if(tar[x] == tar[y]) continue;\n            chu[tar[x]] ++;\n        }\n    }\n    for(int i = 1;i <= scc;i ++) {\n        if(chu[i] == 0) {\n            if(ans) { ans = 0; break; }\n            ans += size[i];\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1565571776,
        "uid": 151852,
        "name": "Paranoid\u4e36\u79bb\u6b87",
        "ccfLevel": 6,
        "title": "P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b Tarjan + \u7f29\u70b9"
    }
]