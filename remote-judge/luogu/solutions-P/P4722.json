[
    {
        "content": "## \u53c2\u8003\u6587\u732e\uff1a[http://kczno1.blog.uoj.ac/blog/3375](http://kczno1.blog.uoj.ac/blog/3375)\n\n\u4e24\u4e2a\u591a\u6708\u524d\u5c31AC\u6b64\u9898\u7684\u6211\u73b0\u5728(2018.10)\u624d\u6765\u53d1\u9898\u89e3\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u592a\u61d2\u4e86\u3002\u8bb0\u5f97\u5f53\u65f6\u6211\u7ffb\u904d\u4e86\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u5199\u7684Dinic\u3002\n\n**[\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/474D/)**\n\n\u9996\u5148\uff0c\u5bf9\u4e8eDinic\u6709\u4e00\u4e2a\u53ef\u80fd\u6ca1\u591a\u5c11\u4eba\u77e5\u9053\u7684**\u6539\u8fdb\u590d\u6742\u5ea6\u7684**\u4f18\u5316\uff08**\u4f38\u7f29\u64cd\u4f5c**\uff09\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u901f\u5230$O(nmlog{C})$\uff0c\u8fd9\u91cc\u7684C\u662f\u6700\u5927\u7684\u5bb9\u91cf\u3002\u5177\u4f53\u505a\u6cd5\u5f88\u7b80\u5355:\n\n1. \u5c06\u6240\u6709\u8fb9\u6309\u7167\u5176\u5bb9\u91cf\u4e8c\u8fdb\u5236\u4e0b\u7684\u4f4d\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f4d\u6570\u76f8\u540c\u7684\u5408\u5e76\u6210\u4e00\u6bb5\u3002\n2. \u987a\u5e8f\u679a\u4e3e\u6bcf\u4e00\u6bb5\uff0c\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u52a0\u5165\u8fd9\u4e00\u6bb5\u6240\u6709\u7684\u8fb9\uff0c\u8dd1\u4e00\u6b21(\u666e\u901a\u7684)Dinic\uff0c\u5c06\u65b0\u589e\u5e7f\u7684\u6d41\u91cf\u52a0\u5165\u7b54\u6848\n\n\u5177\u4f53\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462?\u53c2\u89c1\u7b97\u5bfc\u7684\u601d\u8003\u989826-5\uff0c\u548c\u90a3\u4e2a\u5dee\u4e0d\u591a\u3002\uff08~~\u5176\u5b9e\u6211\u4e5f\u4e0d\u4f1a\u8bc1\u3002~~\uff09\n\n\u4f46\u662f\u89c2\u5bdf\u8fd9\u4e00\u9898\u7684\u6570\u636e\u8303\u56f4\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u4ecd\u4e0d\u8db3\u4ee5\u901a\u8fc7\u3002\u6240\u4ee5\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u3002\u5145\u5206\u53d1\u6325Dinic\u7384\u5b66\u590d\u6742\u5ea6\u7684\u4f18\u52bf\uff0c\u6709\u4e00\u4e2a\u7384\u5b66\u7684\u65b9\u6cd5\uff1a\u5148\u4e0d\u52a0\u53cd\u5411\u8fb9\uff0c\u8dd1\u4e00\u6b21\u4e0a\u9762\u7684\u7b97\u6cd5\uff1b\u518d\u4e00\u6b21\u6027\u5730\u628a\u6240\u6709\u53cd\u5411\u8fb9\u52a0\u5165\u6b8b\u91cf\u7f51\u7edc\uff0c\u91cd\u8dd1\u4e00\u904d\u3002\u7a0b\u5e8f\u7684\u6548\u7387\u5f97\u5230\u4e86\u5927\u5e45\u63d0\u5347\u3002\n\n\u76ee\u524d\uff08\u537310\u67081\u65e5\uff09\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u5728\u672c\u7ad9\u548cLOJ\u4e0a\u90fd\u80fd\u901a\u8fc7\u3002\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define maxn 1300\n#define maxm 120010\nusing namespace std;\nstruct edge{\n\tint u,v,cap;\n}e[maxm];\nstruct Dinic{\n\tint tp,s,t,dis[maxn],cur[maxn],que[maxn];\n\tvector<edge>e;vector<int>v[maxn];\n\tvoid AddEdge(int x,int y,int flw){\n\t\te.push_back(edge{x,y,flw});\n\t\te.push_back(edge{y,x,0});\n\t\tv[x].push_back(e.size()-2);\n\t\t//v[y].push_back(e.size()-1);\n\t}\n\tint bfs(){\n\t\tmemset(dis,0x3f,sizeof dis);\n\t\tint l=1,r=1;que[1]=s;dis[s]=0;\n\t\twhile(l<=r){\n\t\t\tint p=que[l++],to;\n\t\t\tfor(int i:v[p])if(e[i].cap && dis[to=e[i].v]>1e9)\n\t\t\t\tdis[to]=dis[p]+1,que[++r]=to;\n\t\t}\n\t\treturn dis[t]<1e9;\n\t}\n\tint dfs(int p,int a){\n\t\tif(p==t || !a)return a;\n\t\tint sf=0,flw;\n\t\tfor(int &i=cur[p],to;i<(int)v[p].size();++i){\n\t\t\tedge &E=e[v[p][i]];\n\t\t\tif(dis[to=E.v]==dis[p]+1 && (flw=dfs(to,min(a,E.cap)))){\n\t\t\t\tE.cap-=flw;e[v[p][i]^1].cap+=flw;\n\t\t\t\ta-=flw;sf+=flw;\n\t\t\t\tif(!a)break;\n\t\t\t}\n\t\t}\n\t\treturn sf;\n\t}\n\tint dinic(int s,int t,int tp=1){\n\t\tthis->s=s;this->t=t;this->tp=tp;\n\t\tint flw=0;\n\t\twhile(bfs()){\n\t\t\tmemset(cur,0,sizeof cur);\n\t\t\tflw+=dfs(s,INT_MAX);\n\t\t}\n\t\treturn flw;\n\t}\n}sol;\nint n,m,i,s,t,ans;\nint main(){\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(i=0;i<m;i++)scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].cap);\n\tsort(e,e+m,[](edge a,edge b){return a.cap>b.cap;});\n\tfor(int tp:{0,1})for(int p=1<<30,i=0;p;p/=2){\n\t\twhile(i<m && e[i].cap>=p){\n\t\t\tif(tp)sol.v[e[i].v].push_back(i*2+1);\n\t\t\telse sol.AddEdge(e[i].u,e[i].v,e[i].cap);\n\t\t\ti++;\n\t\t}\n\t\tans+=sol.dinic(s,t,tp);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n\u6700\u540e\uff0c\u5e0c\u671b\u6bd2\u7624\u51fa\u9898\u4eba\u80fd\u591f\u8fdb\u4e00\u6b65\u7684\u52a0\u5f3a\u6570\u636e\u3002",
        "postTime": 1538398434,
        "uid": 30093,
        "name": "cosmicAC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4722 \u3010\u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u6233[\u8fd9\u91cc](https://www.cnblogs.com/Mr-Spade/p/9636935.html)\u3002\n\n## 0\u3001\u5199\u5728\u524d\u9762\n\n\u89e3\u51b3\u6700\u5927\u6d41\u95ee\u9898\uff0c\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u662f$Dinic$\u548c$ISAP$\uff0c\u4e24\u79cd\u7b97\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u90fd\u76f8\u5f53\u5feb\u901f\u3002\u4f46\u662f\u5c31\u7406\u8bba\u800c\u8a00\uff0c\u4e24\u79cd\u7b97\u6cd5\u90fd\u5c5e\u4e8e\u589e\u5e7f\u8def\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u4e0a\u754c\u90fd\u8fbe\u5230\u4e86$O(n^2 m)$\uff0c\u56e0\u6b64\u5728\u67d0\u4e9b\u9898\u76ee\u4e2d\u6216\u8bb8\u5b58\u5728~~\u6bd2\u7624~~\u51fa\u9898\u4eba\u6784\u9020\u6570\u636e\u5361\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u672c\u6587\u8bb2\u89e3\u4e00\u79cd\u590d\u6742\u5ea6\u4e0a\u754c\u5728\u5e38\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u4e2d\u6700\u4f18\u7684\u6700\u9ad8\u6807\u53f7\u9884\u7559\u63a8\u8fdb\u7b97\u6cd5\uff08\u53c8\u53eb$HLPP$\uff09\uff0c\u5176\u4e0a\u754c\u4e3a$O(n^2 \\sqrt m)$\uff0c**\u5e76\u4e14\u5728\u7ecf\u8fc7\u4f18\u5316\u540e\u8fd9\u79cd\u7b97\u6cd5\u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b\u901f\u5ea6\u4e5f\u4e0d\u4e9a\u4e8e\u4e0a\u8ff0\u4e24\u79cd\u589e\u5e7f\u8def\u7b97\u6cd5**\u3002\n\n================\u62b1\u6b49...\u6211\u5df2\u7ecf \u7edd\u5bf9\u4e0d\u53ef\u80fd\u518d\u83b7\u5f97\u5e78\u798f\u4e86================\n\n## 1\u3001\u9884\u6d41\u63a8\u8fdb\u7684\u601d\u60f3\n\n$HLPP$\u662f\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u4e2d\u7684\u4e00\u79cd\uff0c\u4ecb\u7ecd\u4e00\u4e0b\u9884\u7559\u63a8\u8fdb\u7b97\u6cd5\u7684\u601d\u60f3\uff1a\n\n\u6211\u4eec\u8fd8\u662f\u4ee5\u6c34\u6d41\u6765\u7c7b\u6bd4\u7f51\u7edc\u6d41\u3002\u6211\u4eec\u5c06\u6bcf\u4e2a\u70b9\u770b\u4f5c\u4e00\u4e2a\u6c34\u5e93\uff0c\u6bcf\u6761\u8fb9\u770b\u4f5c\u5355\u5411\u7684\u7ba1\u9053\u3002\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u7684\u601d\u60f3\u5c31\u662f\uff0c\u5141\u8bb8\u6c34\u5728\u975e\u6e90\u6c47\u70b9\u7684\u8282\u70b9\u4e2d\u6682\u65f6\u5b58\u50a8\uff08\u6211\u4eec\u5c06\u5b58\u50a8\u5728\u975e\u6e90\u6c47\u70b9\u4e2d\u7684\u6d41\u79f0\u4f5c\u8fd9\u4e2a\u70b9\u7684**\u8d85\u989d\u6d41**\uff09\uff0c\u540c\u65f6\u4f3a\u673a\u5c06\u81ea\u8eab\u7684\u8d85\u989d\u6d41\u901a\u8fc7\u7ba1\u9053**\u63a8\u9001**\u51fa\u53bb\u3002\u53ea\u8981\u4fdd\u8bc1\u5728\u7b97\u6cd5\u7ed3\u675f\u540e\u6240\u6709\u975e\u6e90\u6c47\u70b9\u7684\u8d85\u989d\u6d41\u90fd\u4e3a$0$\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6848\u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u53cd\u590d\u63a8\u9001\u800c\u51fa\u73b0\u6b7b\u5faa\u73af\u7684\u95ee\u9898\uff0c\u6211\u4eec\u518d\u7ed9\u6bcf\u4e2a\u8282\u70b9\u5f15\u5165**\u9ad8\u5ea6**\u7684\u6982\u5ff5\u3002\u540c\u5b9e\u9645\u4e2d\u4e00\u6837\uff0c\u6211\u4eec\u53ea\u5141\u8bb8\u9ad8\u5ea6\u8f83\u9ad8\u7684\u8282\u70b9\u5411\u9ad8\u5ea6\u8f83\u4f4e\u7684\u8282\u70b9\u8fdb\u884c\u63a8\u9001\uff08\u4e0d\u8fc7\u8fd8\u662f\u7565\u6709\u4e0d\u540c\uff0c\u5177\u4f53\u8bf7\u89c1\u4e0b\u6587\uff09\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u56e0\u4e3a\u53d7\u5230\u9ad8\u5ea6\u7684\u9650\u5236\u800c\u4e0d\u80fd\u63a8\u9001\u81ea\u8eab\u7684\u8d85\u989d\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u62ac\u9ad8\u8fd9\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u64cd\u4f5c\u53eb\u505a**\u91cd\u8d34\u6807\u7b7e**\u3002\n\n================\u56e0\u4e3a...\u6211\u53d1\u73b0...================\n\n## 2\u3001\u6700\u9ad8\u6807\u53f7\u9884\u7559\u63a8\u8fdb\u7684\u8fc7\u7a0b\n\n\u4e0b\u9762\u4ecb\u7ecd$HLPP$\u7684\u5177\u4f53\u6d41\u7a0b\uff0c\u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u7528$e_v$\u8868\u793a\u8282\u70b9$v$\u7684\u8d85\u989d\u6d41\uff0c\u7528$h_v$\u8868\u793a\u8282\u70b9$v$\u7684\u9ad8\u5ea6\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u9664\u4e86\u6e90\u70b9\u4ee5\u5916\u7684\u8282\u70b9\u7684\u9ad8\u5ea6\u90fd\u7f6e\u4e3a$0$\u3002\u7279\u522b\u5730\uff0c\u6211\u4eec\u5c06\u6e90\u70b9$s$\u7684\u9ad8\u5ea6\u7f6e\u4e3a$n$\uff0c\u5e76\u4e14\u5c06$s$\u7684\u6240\u6709\u8fb9\u90fd\u5145\u6ee1\u6d41\u91cf\u63a8\u9001\u51fa\u53bb\u3002\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u8ba9\u6d41\u53d8\u5f97\u592a\u591a\uff0c\u56e0\u4e3a\u591a\u4f59\u7684\u6d41\u91cf\u4f1a\u5728\u522b\u7684\u8282\u70b9\u9ad8\u5ea6\u62ac\u9ad8\u5230\u8d85\u8fc7$s$\u4ee5\u540e\u63a8\u9001\u56de\u53bb\u3002\u6211\u4eec\u8fd8\u5e94\u8be5\u5c06\u63a8\u9001\u8fc7\u540e\u8d85\u989d\u6d41\u4e0d\u4e3a$0$\u7684\u8282\u70b9\u52a0\u5165\u961f\u5217\u4e2d\u7b49\u5f85\u63a8\u9001\uff0c\u540c\u65f6\uff0c\u56e0\u4e3a$HLPP$\u4f1a\u8981\u6c42\u6211\u4eec\u6bcf\u6b21\u90fd\u63a8\u9001\u9ad8\u5ea6\u6700\u9ad8\u7684\u8282\u70b9\uff08\u6ce8\u610f\u662f\u5bf9\u4e8e\u8d85\u989d\u6d41\u4e0d\u4e3a$0$\u7684\u8282\u70b9\u800c\u8a00\u7684\uff09\uff0c\u56e0\u6b64\u8fd9\u5e94\u5f53\u662f\u4e00\u4e2a\u4ee5\u9ad8\u5ea6\u4e3a\u952e\u503c\u7684\u4f18\u5148\u961f\u5217\u3002\n\n\u5728\u8fdb\u884c\u5b8c\u4e0a\u8ff0\u64cd\u4f5c\u4ee5\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u5904\u7406\u4f18\u5148\u961f\u5217\u3002\u6211\u4eec\u6bcf\u6b21\u90fd\u53d6\u51fa\u961f\u9996$v$\u5e76\u5c1d\u8bd5\u63a8\u9001\uff0c\u63a8\u9001\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n\u9010\u4e00\u68c0\u67e5$v$\u7684\u51fa\u8fb9\uff0c\u5982\u679c\u53d1\u73b0\u67d0\u6761\u8fb9\u8fd8\u6709\u6d41\u91cf\u5e76\u4e14\u8fb9\u7684\u53e6\u4e00\u7aef$u$\u6ee1\u8db3$h_u+1=h_v$\uff0c\u5373$v$\u6b63\u597d\u6bd4$u$\u7684\u9ad8\u5ea6\u9ad8$1$\uff08\u6ce8\u610f\u5728\u521d\u59cb\u64cd\u4f5c\u4e2d\u5bf9$s$\u7684\u63a8\u9001\u5e76\u6ca1\u6709\u8fd9\u4e2a\u8981\u6c42\uff09\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u53ef\u4ee5\u63a8\u9001\u7684\u3002\u6211\u4eec\u63a8\u9001\u7684\u6d41\u91cf\u5e94\u5f53\u65e2\u4e0d\u53ef\u4ee5\u8d85\u8fc7\u8fd9\u6761\u8fb9\u7684\u6d41\u91cf\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u8d85\u8fc7$e_v$\u3002\u5728\u63a8\u9001\u5b8c\u6210\u540e\u8bb0\u5f97\u4fee\u6539$u$\u548c$v$\u7684\u8d85\u989d\u6d41\uff0c\u5e76\u4e14\u5982\u679c$u$\u8fd8\u4e0d\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u90a3\u4e48\u5e94\u5f53\u5c06$u$\u52a0\u5165\u4f18\u5148\u961f\u5217\u3002\n\n\u63a8\u9001\u8fc7\u7a0b\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0$e_v$\u4ecd\u7136\u4e0d\u7b49\u4e8e$0$\uff0c\u8bf4\u660e\u5f53\u524d\u7684\u9ad8\u5ea6$h_v$\u5e76\u4e0d\u591f\uff0c\u56e0\u6b64\u6211\u4eec\u5bf9$v$\u91cd\u8d34\u6807\u7b7e\u3002\u6211\u4eec\u627e\u5230\u6709\u6d41\u91cf\u800c\u4e14\u8fb9\u7684\u53e6\u4e00\u7aef$u$\u9ad8\u5ea6\u6700\u5c0f\u7684\u8fb9\uff0c\u5c06$h_v$\u8bbe\u7f6e\u4e3a$h_u+1$\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u4e0b\u6b21\u4e00\u5b9a\u53ef\u4ee5\u63a8\u9001\u3002\u4e8e\u662f\u6211\u4eec\u518d\u5c06\u91cd\u8d34\u6807\u7b7e\u540e\u7684$v$\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\u3002\n\n\u5982\u679c\u4f18\u5148\u961f\u5217\u4e3a\u7a7a\uff0c\u90a3\u4e48\u9664\u4e86\u6e90\u6c47\u70b9\u4ee5\u5916\u7684\u6240\u6709\u8282\u70b9\u8d85\u989d\u6d41\u90fd\u4e3a$0$\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6d41\uff0c\u5e76\u4e14\u4e5f\u662f\u6700\u5927\u6d41\u3002\n\n================\u5176\u5b9e\u6211...\u65e9\u5c31\u5df2\u7ecf\u88ab\u5e78\u798f\u5305\u56f4\u4e86================\n\n## 3\u3001\u4e00\u70b9\u4f18\u5316\n\n\u867d\u7136\u4e0a\u8ff0\u7684\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u5e76\u4e14\u590d\u6742\u5ea6\u662f$O(n^2 \\sqrt m)$\u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u7f3a\u5c11\u4e00\u4e9b\u4f18\u5316\uff0c\u4f7f\u5f97\u5176\u4e0a\u754c\u6bd4\u8f83\u7d27\uff0c\u56e0\u6b64\u5728\u968f\u673a\u6570\u636e\u4e0b\u53ef\u80fd\u4e0d\u5982\u589e\u5e7f\u8def\u7b97\u6cd5\u3002\u4e0b\u9762\u4ecb\u7ecd\u5bf9$HLPP$\u7684\u4f18\u5316\uff0c\u4f7f\u5f97\u5176\u5728\u968f\u673a\u6570\u636e\u4e0b\u7684\u901f\u5ea6\u53ef\u4ee5\u4e0e\u589e\u5e7f\u8def\u7b97\u6cd5\u5ab2\u7f8e\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5c06\u6240\u6709\u975e\u6e90\u70b9\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a$0$\u662f\u6709\u4e9b\u6d6a\u8d39\u7684\u3002\u6211\u4eec\u4e0d\u59a8\u901a\u8fc7\u4e00\u904d$bfs$\u5c06\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a\u5b83\u5230\u6c47\u70b9$t$\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd9\u6837\u5c31\u8282\u7701\u4e86\u5927\u91cf\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c\u3002\u5f53\u7136\uff0c\u6e90\u70b9$s$\u7684\u9ad8\u5ea6\u8fd8\u662f\u5e94\u8be5\u8bbe\u7f6e\u4e3a$n$\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u70b9$v$\u518d\u88ab\u91cd\u8d34\u6807\u7b7e\u4ee5\u540e\uff0c\u5982\u679c\u5b83\u539f\u6765\u7684\u9ad8\u5ea6\u5df2\u7ecf\u6ca1\u6709\u5176\u5b83\u70b9\uff0c\u90a3\u4e48\u9ad8\u4e8e\u5b83\u7684\u70b9\u4e00\u5b9a\u4e0d\u80fd\u5c06\u6d41\u91cf\u63a8\u9001\u5230$t$\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u9ad8\u5ea6\u5927\u4e8e$h_v$\u4e14\u5c0f\u4e8e$n+1$\u7684\u70b9\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a$n+1$\uff0c\u4ee5\u4fbf\u5c3d\u5feb\u5c06\u6d41\u91cf\u63a8\u9001\u7ed9$s$\u3002\u5bf9\u4e8e\u5982\u4f55\u5224\u65ad\u8fd9\u4e2a\u9ad8\u5ea6\u5df2\u7ecf\u6ca1\u6709\u5176\u5b83\u8282\u70b9\uff0c\u53ef\u4ee5\u548c$ISAP$\u4e00\u6837\u7528\u4e00\u4e2a$gap$\u6570\u7ec4\u6765\u8ba1\u6570\uff0c\u8fd9\u5c31\u662f$HLPP$\u7684$gap$\u4f18\u5316\u3002\n\n================\u2014\u2014\u73c2\u6735\u8389\u00b7\u8bfa\u5854\u00b7\u745f\u5c3c\u6b27\u91cc\u65af================\n\n## 4\u3001C++\u5b9e\u73b0\n\n\u56e0\u4e3a$HLPP$\u7684\u7ec6\u8282\u8fd8\u662f\u633a\u591a\u7684\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e0b\u6211\u7684\u4ee3\u7801\u5427\u3002$HLPP$\u7684\u7801\u91cf\u5176\u5b9e\u4e0d\u591a\uff0c\u6211\u8fd9\u6837\u7684\u5199\u6cd5\u4e5f\u53ea\u662f$100$\u884c\u51fa\u5934\u800c\u5df2\u3002\u6240\u4ee5\u5728\u7f51\u7edc\u6d41\u95ee\u9898\u4e2d\u4f7f\u7528$HLPP$\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing std::min;\nusing std::vector;\nusing std::queue;\nusing std::priority_queue;\nconst int N=2e4+5,M=2e5+5,inf=0x3f3f3f3f;\nint n,s,t,tot;\nint v[M<<1],w[M<<1],first[N],next[M<<1];\nint h[N],e[N],gap[N<<1],inq[N];//\u8282\u70b9\u9ad8\u5ea6\u662f\u53ef\u4ee5\u5230\u8fbe2n-1\u7684\nstruct cmp\n{\n\tinline bool operator()(int a,int b) const\n\t{\n\t\treturn h[a]<h[b];//\u56e0\u4e3a\u5728\u4f18\u5148\u961f\u5217\u4e2d\u7684\u8282\u70b9\u9ad8\u5ea6\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83\n\t}\n};\nqueue<int> Q;\npriority_queue<int,vector<int>,cmp> pQ;\ninline void add_edge(int from,int to,int flow)\n{\n\ttot+=2;\n\tv[tot+1]=from;v[tot]=to;w[tot]=flow;w[tot+1]=0;\n\tnext[tot]=first[from];first[from]=tot;\n\tnext[tot+1]=first[to];first[to]=tot+1;\n\treturn;\n}\ninline bool bfs()\n{\n\tint now;\n\tregister int go;\n\tmemset(h+1,0x3f,sizeof(int)*n);\n\th[t]=0;Q.push(t);\n\twhile(!Q.empty())\n\t{\n\t\tnow=Q.front();Q.pop();\n\t\tfor(go=first[now];go;go=next[go])\n\t\t\tif(w[go^1]&&h[v[go]]>h[now]+1)\n\t\t\t\th[v[go]]=h[now]+1,Q.push(v[go]);\n\t}\n\treturn h[s]!=inf;\n}\ninline void push(int now)//\u63a8\u9001\n{\n\tint d;\n\tregister int go;\n\tfor(go=first[now];go;go=next[go])\n\t\tif(w[go]&&h[v[go]]+1==h[now])\n\t\t{\n\t\t\td=min(e[now],w[go]);\n\t\t\tw[go]-=d;w[go^1]+=d;e[now]-=d;e[v[go]]+=d;\n\t\t\tif(v[go]!=s&&v[go]!=t&&!inq[v[go]])\n\t\t\t\tpQ.push(v[go]),inq[v[go]]=1;\n\t\t\tif(!e[now])//\u5df2\u7ecf\u63a8\u9001\u5b8c\u6bd5\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\n\t\t\t\tbreak;\n\t\t}\n\treturn;\n}\ninline void relabel(int now)//\u91cd\u8d34\u6807\u7b7e\n{\n\tregister int go;\n\th[now]=inf;\n\tfor(go=first[now];go;go=next[go])\n\t\tif(w[go]&&h[v[go]]+1<h[now])\n\t\t\th[now]=h[v[go]]+1;\n\treturn;\n}\ninline int hlpp()\n{\n\tint now,d;\n\tregister int i,go;\n\tif(!bfs())//s\u548ct\u4e0d\u8fde\u901a\n\t\treturn 0;\n\th[s]=n;\n\tmemset(gap,0,sizeof(int)*(n<<1));\n\tfor(i=1;i<=n;i++)\n\t\tif(h[i]<inf)\n\t\t\t++gap[h[i]];\n\tfor(go=first[s];go;go=next[go])\n\t\tif(d=w[go])\n\t\t{\n\t\t\tw[go]-=d;w[go^1]+=d;e[s]-=d;e[v[go]]+=d;\n\t\t\tif(v[go]!=s&&v[go]!=t&&!inq[v[go]])\n\t\t\t\tpQ.push(v[go]),inq[v[go]]=1;\n\t\t}\n\twhile(!pQ.empty())\n\t{\n\t\tinq[now=pQ.top()]=0;pQ.pop();push(now);\n\t\tif(e[now])\n\t\t{\n\t\t\tif(!--gap[h[now]])//gap\u4f18\u5316\uff0c\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u662f\u6700\u9ad8\u7684\u6240\u4ee5\u4fee\u6539\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u5728\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u4e0d\u5fc5\u62c5\u5fc3\u4fee\u6539\u5bf9\u4f18\u5148\u961f\u5217\u4f1a\u9020\u6210\u5f71\u54cd\n\t\t\t\tfor(i=1;i<=n;i++)\n\t\t\t\t\tif(i!=s&&i!=t&&h[i]>h[now]&&h[i]<n+1)\n\t\t\t\t\t\th[i]=n+1;\n\t\t\trelabel(now);++gap[h[now]];\n\t\t\tpQ.push(now);inq[now]=1;\n\t\t}\n\t}\n\treturn e[t];\n}\nint m;\nsigned main()\n{\n\tint u,v,w;\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd_edge(u,v,w);\n\t}\n\tprintf(\"%d\\n\",hlpp());\n\treturn 0;\n}\n```",
        "postTime": 1536715865,
        "uid": 7253,
        "name": "Mr_Spade",
        "ccfLevel": 10,
        "title": "\u7f51\u7edc\u6700\u5927\u6d41\u2014\u2014\u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb"
    },
    {
        "content": "------------\n##  ------------\u524d\u8a00------------     \n------------\n\n\u8fd9\u4e00\u9898\u6765\u53d1\u4e00\u4e2a\u9898\u89e3\uff0c\u6765\u4ecb\u7ecd\u4e24\u4e2a\u91cd\u70b9:\u8f83\u6162\u7684HLPP\u7684\u5199\u6cd5(\u4e5f\u662f\u7ecf\u5178\u5199\u6cd5\uff0c\u5b9e\u73b0\u8d77\u6765\u7b80\u5355)\uff0c\u4ee5\u53ca\u90a3\u4e9b\u6700\u4f18\u89e3\u4eec\u5bf9\u539f\u505a\u6cd5\u7684\u4f18\u5316\u3002      \n\n------------\n## ------------Part1.HLPP\u7ecf\u5178\u5199\u6cd5:------------     \n------------\n\n\u6211\u53c2\u7167\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u65b9\u6cd5\u5199\u51fa\u6765\u7684\u4ee3\u7801\u52c9\u5f3a\u80fd\u8d81\u7740luogu\u4e00\u4e2a\u8bc4\u6d4b\u673a\u6ce2\u52a8\u5361\u8fc7\u53bb\uff0c\u5728[P3376](https://www.luogu.org/problemnew/show/P3376)\u7f51\u7edc\u6700\u5927\u6d41\u7684\u539f\u9898\u4e0a\u5012\u662f\u8dd1\u5f97\u98de\u5feb\u3002\n![](https://i.loli.net/2018/12/07/5c0a6d8def577.png)        \n\u90a3\u4e48\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u7ecf\u5178\u5199\u6cd5\u7684\u539f\u7406\u3002      \nHLPP\uff0c\u5168\u79f0Highest Label Preflow Push\uff0c\u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u3002\u4e0e\u5e38\u89c1\u7684\u7f51\u7edc\u6d41\u7b97\u6cd5\uff08FF\uff0cEK\uff0cDinic\uff0cISAP\uff09\u4e0d\u540c\uff0c\u5b83\u662f\u4e00\u4e2a\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\uff0c\u5e76\u4e0d\u4f9d\u8d56\u589e\u5e7f\u8def\u5b9e\u73b0\u3002             \n**\u6ce8\u610f:\u867d\u7136\u8fd9\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u4e0e\u5e38\u89c1\u7f51\u7edc\u6d41\u7b97\u6cd5\u7684\u4e0d\u540c\uff0c\u4f46\u7406\u89e3\u5e38\u7528\u7684\u7f51\u7edc\u6d41\u7b97\u6cd5\u7684\u601d\u60f3\u4f1a\u5bf9\u7406\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u6709\u5e2e\u52a9\uff0c\u540e\u9762\u6211\u4f1a\u8fdb\u884c\u4e00\u4e9b\u6bd4\u55bb\u6765\u5e2e\u52a9\u4f60\u4eec\u52a0\u6df1\u5bf9\u8fd9\u4e2a\u7b97\u6cd5\u3002**         \n(\u6211\u4e5f\u4f1a\u5c3d\u529b\u8ba9\u4e0d\u61c2\u5176\u4ed6\u51e0\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u7684\u540c\u5b66\u4eec\u7406\u89e3\u7684)               \n\u4e0e\u4eba\u7c7b\u7684\u4eba\u8111\u6a21\u62df\u4e00\u4e2a\u7f51\u7edc\u6d41\u7684\u8fc7\u7a0b\u76f8\u540c\uff0c\u5b83\u901a\u8fc7\u5c06\u6bcf\u4e00\u4e2a\u70b9\u7684\u6d41\u91cf\"\u53d1\u9001\"\u7ed9\u4e0b\u4e00\u4e2a\u70b9\u6765\u6a21\u62df\u6d41\u52a8\u3002       \n\u4f8b:(\u5047\u8bbe\u4e0b\u56fe\u662f\u4ece1\u52304)\n![](https://i.loli.net/2018/12/07/5c0a73289c159.jpg)\n\u6ce8\u610f\u56fe\u4e2d\u7684\u9ec4\u6846\u548c\u7eff\u6846\u6807\u8bc6\u7684\u90e8\u5206:        \n\u9ec4\u6846\u4e2d\u7684\u6d41\u91cf\u603b\u662f\u4e0d\u53d8\u7684(\u5373**\u7f51\u7edc\u6e90**\u80fd**\u65e0\u9650\u5236**\u7684\u63a8\u9001\u6d41\u91cf)\u3002           \n\u5728\u6700\u540e\u4e00\u6b21\u7684\u63a8\u9001\u4e2d\uff0c\u6211\u4eec\u76842\u53f7\u8282\u70b9\u5c06\u5176\u63a8\u9001\u4e0d\u51fa\u7684\u6d41\u91cf\"\u8fd4\u8fd8\"\u7ed9\u4e86\u7f51\u7edc\u6e90\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u6d41\u91cf\u5e76\u672a\u8fd4\u8fd8\uff08\u5373**\u7f51\u7edc\u6c47**\u7684\u6d41\u91cf**\u4e0d\u4f1a\u56de\u6d41**\uff09\uff0c\u4e14**\u5f53\u6240\u6709\u7684\u63a8\u9001\u8fc7\u7a0b\u7ed3\u675f\u540e**\uff0c**\u6c47\u70b9**\u5b58\u50a8\u7684\u6d41\u91cf\u5c31\u662f\u7f51\u7edc\u6700\u5927\u6d41\u3002         \n\u4fe1\u606f\u91cf\u6709\u70b9\u5927\uff0c\u5efa\u8bae\u559d\u53e3\u8336\u4f11\u606f\u4e00\u4e0b\uff0c\u597d\u597d\u7684\u7422\u78e8\u4e00\u4e0b\u539f\u7406~~\uff0c\u514d\u5f97\u5934\u53d1\u6389\u5149\u4e86~~\u3002       \n\u5728\u4e86\u89e3\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u7684\u539f\u7406\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bd5\u7740\u53bb\u4e86\u89e3HLPP\u4e86\u3002       \n\u4e0d\u8fc7\uff0c\u5728\u4ecb\u7ecdHLPP\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5148\u4e86\u89e3\u51e0\u4e2a\u6982\u5ff5:     \n1.**\u8d85\u989d\u6d41**:\u6211\u4eec\u5c06\u5b58\u50a8\u5728**\u6e90\u70b9\u5916**\u7684\u8282\u70b9\u4e2d\u7684\u6d41\u91cf\u79f0\u4e3a\u8d85\u989d\u6d41\u3002      \n2.**\u63a8\u9001**:\u4e00\u4e2a\u8282\u70b9\u5c06\u5176\u5b58\u50a8\u7684**\u8d85\u989d\u6d41**\u4f20\u9012\u7ed9**\u4e0e\u5176\u76f4\u63a5\u76f8\u90bb**\u7684\u8282\u70b9\u7684\u8fc7\u7a0b\u88ab\u79f0\u4e3a\"\u63a8\u9001\"\u3002     \n3.**\u8282\u70b9\u9ad8\u5ea6**:\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5148\u524d\u8bbe\u8ba1\u7684\u63a8\u8fdb\u7b97\u6cd5\u6709\u4e00\u70b9**\u7f3a\u9677**:\u6211\u4eec\u7684\u8282\u70b9\u53ef\u80fd\u4f1a\"\u6253\u592a\u6781\"(\u4f60\u63a8\u9001\u7ed9\u6211\uff0c\u6211\u518d\u63a8\u9001\u7ed9\u4f60\uff0c\u4e00\u76f4\u63a8\u9001\u5230TLE)\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u4e27\u5c3d\u5929\u826f\u7684\u4e8b\u60c5\u53d1\u751f\uff0c\u6211\u4eec\u7ed9**\u6bcf\u4e00\u4e2a\u8282\u70b9**\u52a0\u4e0a**\u9ad8\u5ea6**\uff0c\u5e76\u89c4\u5b9a\u63a8\u8fdb**\u53ea\u80fd**\u4ece\u9ad8\u70b9\u5230\u4f4e\u70b9\u8fdb\u884c\u3002       \n4.**\u91cd\u8d34\u6807\u7b7e**:\u4e07\u4e00\u6211\u4eec\u7684**\u8282\u70b9**\"\u56db\u9762\u695a\u6b4c\"\uff0c**\u5904\u5728**\u4e00\u5806\u8282\u70b9\u4e2d\u7684**\u6700\u4f4e\u8c37**\uff0c\u5374\u53c8**\u643a\u5e26\u7740**\u8d35\u91cd\u7684**\u8d85\u989d\u6d41**\uff0c\u6211\u4eec\u53c8\u8be5\u5982\u4f55\u5316\u89e3\u50f5\u5c40\u5462?\u6211\u4eec\u5728\u8fd9\u65f6\u5c31\u8981\u62ac\u9ad8\u8fd9\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\uff0c\u8ba9\u5176\u80fd\u6d41\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e86\uff0c**\u62ac\u9ad8**\u8fd9\u4e2a**\u8282\u70b9**\u7684**\u9ad8\u5ea6**\u7684\u8fc7\u7a0b\uff0c\u88ab\u6211\u4eec\u79f0\u4f5c\"\u91cd\u8d34\u6807\u7b7e\"\u3002            \n\u6709\u4e86\u8fd9\u51e0\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06HLPP\u5206\u4e3a\u56db\u4e2a\u90e8\u5206\u4e86:       \n1.bfs\u9884\u5904\u7406\u8282\u70b9\u9ad8\u5ea6(\u6b64\u5904\u7c7b\u4f3cDinic\u7684\u5206\u5c42bfs)\u3002       \n2.push\u64cd\u4f5c\u8fdb\u884c\u63a8\u8fdb(\u6b64\u5904\u7c7b\u4f3c\u6c42\u589e\u5e7f\u8def\u5f84\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u7684\u63a8\u8fdb\u662f\u4ee5\u5c42\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u589e\u5e7f\u662f\u4ee5\u8def\u5f84\u4e3a\u5355\u4f4d\u7684)\u3002        \n3.relabel\u91cd\u8d34\u6807\u7b7e\u6539\u53d8\u8282\u70b9\u9ad8\u5ea6(\u6b64\u5904\u7c7b\u4f3cISAP\u5bf9\u589e\u5e7f\u8def\u5f84\u4e0a\u8282\u70b9\u7684\u5c42\u6570\u7684\u4fee\u6539\u64cd\u4f5c)\u3002            \n4.HLPP\u4e3b\u8fc7\u7a0b\u6c42\u6700\u5927\u6d41\u3002        \n<\u5f3a\u8c03>        \n\u51fa\u73b0\u5728\u8fd9\u91cc\u7684\u5185\u5bb9\u5728\u540e\u9762\u9010\u6b65\u5206\u6790\u7b97\u6cd5\u65f6\u8fd8\u4f1a\u51fa\u73b0(\u56e0\u4e3a\u5b9e\u5728\u662f\u592a\u91cd\u8981\u4e86)\u3002         \n1.HLPP\u7684bfs\u4e0eDinic\u7684\u6781\u5176\u7c7b\u4f3c\uff0c\u4f46\u5374\u662f**\u53cd\u5411\u7684**\uff0c\u5207\u8bb0\u4e0d\u80fd\u6df7\u6dc6\u3002      \n2.push\u64cd\u4f5c\u4e0e\u589e\u5e7f\u8def\u5f84\u7684\u4fa7\u91cd\u70b9\u4e0d\u540c\uff0c\u66f4\u4fa7\u91cd\u4e8e**\u5f53\u524d\u70b9\u7684\u6d41\u91cf\u4fee\u6539**(\u4e00\u6b21push\u64cd\u4f5c\u4f1a\u5c3d\u91cf\u5730\u6e05\u7a7a\u70b9\u7684\u8d85\u989d\u6d41)\u3002       \n3.relabel\u64cd\u4f5c\u4e0eISAP\u7684\u504f\u79fb\u5c42\u6570\u6709\u4e0d\u540c\u4e4b\u5904\uff0c\u5b83\u4e00\u6b21\u53ef\u4ee5\u62ac\u9ad8**\u4e0d\u6b62\u4e00\u4e2a\u5355\u4f4d\u9ad8\u5ea6**\uff0c\u4e14\u4e00\u822c\u62ac\u5230\u5176\u4e2d\u7684\u6d41\u91cf**\u6070\u597d\u80fd**\u6d41\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002       \n</\u5f3a\u8c03>             \n\u6211\u4eec\u6765\u5206\u6b65\u770b\u770b\u8fd9\u4e2a\u7b97\u6cd5\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002      \n1.bfs\u5206\u5c42\u3002       \n\u8fd9\u4e2a\u90e8\u5206\u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u8981\u6ce8\u610f\u6211\u4eec\u662f\u4ece\u6c47\u70b9\u5f00\u59cb\u641c\u7684\uff0c\u5e76\u4e14\u5b83\u662f\u4e00\u4e2abool\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u4ece\u6e90\u5230\u6c47\u7684\u53ef\u884c\u6d41\u3002       \n\u8fd9\u91cc\u89c4\u5b9a```h[i]```\u4e3a\u8282\u70b9i\u7684\u9ad8\u5ea6\u3002        \n\u521d\u59cb\u5316:         \n\u5728\u8fd9\u4e00\u6b65\u4e2d\u6211\u4eec\u5c06**\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\u62ac\u9ad8\u5230INF**(\u9ad8\u5ea6\u4e3aINF\u7684\u8282\u70b9\u4e0d\u5728\u7f51\u7edc\u4e2d)\uff0c\u5e76\u5c06\u7ec8\u70b9\u5165\u961f:\n```cpp\nil bool bfs()\n{\n    re int i;\n    memset(h+1,inf,sizeof(int)*n);\n    h[ed]=0;\n    q.push(ed);\n```\n\u63a5\u7740\uff0c\u6211\u4eec\u4f9d\u6b21\u5730\u53d6\u51fa\u961f\u5185\u5143\u7d20:\n```cpp\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(i=head[t];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n```\n\u66f4\u65b0\u6bcf\u4e00\u4e2a\u5728\u7f51\u7edc\u5185\u7684\u8282\u70b9\u7684\u9ad8\u5ea6:      \n\u6ce8\u610f\u4e86\uff0c\u8fd9\u91cc\u662f**\u53cd\u5411\u641c\u7d22**\uff0c\u6240\u4ee5\u5224\u65ad\u4e00\u6761\u8fb9\u662f\u5426\u4e3a\u53ef\u884c\u6d41\uff0c\u8981\u5224\u65ad\u4e0e**\u5176\u6210\u5bf9\u5efa\u7acb\u7684\u53cd\u8fb9**\u3002\n```cpp\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=inf;\n}\n```\nbfs\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:\n```cpp\nil bool bfs()\n{\n    re int i;\n    memset(h+1,inf,sizeof(int)*n);\n    h[ed]=0;\n    q.push(ed);\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(i=head[t];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=inf;\n}\n```\n\u63a5\u4e0b\u6765\u662fpush\u64cd\u4f5c\u3002        \n\u7531\u4e8e**\u4e0d\u662f\u6c42\u4e00\u6761\u8def\u5f84**\uff0c\u4ec5\u4ec5\u662f\u53d6\u4e00\u4e2a\u70b9\u548c\u6bd4\u5b83\u4f4e\u7684\u90bb\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u5f53\u524d\u70b9\u7684\u90bb\u70b9:\n```cpp\nil void push(int u)\n{\n    re int i;\n    for(i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n```\n\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u627e\u5230\u6bcf\u4e00\u4e2a\u5728\u7f51\u7edc\u5185\u7684\u6bd4\u5b83\u4f4e\u7684\u8282\u70b9,\u5e76\u5c06\u5b83\u7684\u8d85\u989d\u6d41\u4f20\u9012\u7ed9\u4e0b\u4e00\u4f4d\u3002  \npq\u662f\u4e00\u4e2a\u4ee5\u8282\u70b9\u9ad8\u5ea6\u4e3a\u5173\u952e\u5b57\u7684\u4f18\u5148\u961f\u5217:\n```cpp\nstruct cmp\n{\n    il bool operator ()(int xi,int yi)const\n    {\n        return h[xi]<h[yi];\n    }\n};\npriority_queue<int,vector<int>,cmp> pq;\n```\n\u800c```e[i]```\u5b58\u50a8\u7684\u662fi\u53f7\u8282\u70b9\u7684\u8d85\u989d\u6d41\u3002\n```cpp\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            int df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n            if(!e[u])break;\n        }\n    }\n}\n```\n\u8981\u6ce8\u610f\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5c06\u9664\u8d77\u70b9\u4e0e\u7ec8\u70b9\u5916\u7684\u70b9\u9001\u5165\u4f18\u5148\u961f\u5217\u3002       \npush\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:\n```cpp\nil void push(int u)\n{\n    re int i;\n    for(i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            int df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n            if(!e[u])break;\n        }\n    }\n}\n```\n\u7d27\u63a5\u7740push\u7684\uff0c\u662f\u4e0e\u5b83\u5b6a\u751f\u7684relabel\u64cd\u4f5c\u3002        \n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\u62ac\u9ad8\u5230**\u6070\u597d\u80fd**\u6d41\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002      \nrelabel\u64cd\u4f5c\u4ee3\u7801:\n```cpp\nil void relabel(int u)\n{\n    re int i;\n    h[u]=inf;\n    for(i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1<h[u]))h[u]=h[v]+1;\n    }\n}\n```\n\u6709\u4e86\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u505a\u57fa\u7840\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7528\u9884\u6d41\u63a8\u8fdb\u7684\u601d\u60f3\u6c42\u89e3\u6700\u5927\u6d41\u4e86\u3002      \n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u662fHLPP\u7684\u4e3b\u51fd\u6570\uff0c\u6bd4\u8d77\u5176\u4ed6\u7684\u6700\u5927\u6d41\u7b97\u6cd5\uff0c\u5b83\u7684\u4e3b\u51fd\u6570\u66f4\u4e3a\u590d\u6742\u3002       \n\u8fc7\u4e00\u904d\u7b97\u6cd5\u6d41\u7a0b:       \n1.\u521d\u59cb\u5316:\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6570\u7ec4:gap\u6570\u7ec4\u3002        \n\u4e0eDinic\u91cc\u7684gap\u4f18\u5316\u7c7b\u4f3c\uff0cHLPP\u91cc\u7684```gap[i]```\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u9ad8\u5ea6\u6709\u591a\u5c11\u7684\u70b9\u3002       \n```cpp\ninline int hlpp()\n{\n    re int i;\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n    for(i=1;i<=n;i++)if(h[i]!=inf)gap[h[i]]++;\n```\n1.\u7531\u4e8e\u6211\u4eec\u7684\u7f51\u7edc\u6e90\u7684\u6d41\u91cf\u662f\u65e0\u9650\u7684\uff0c\u4e3a\u4e86\u907f\u514d\u4e00\u6761\u8fb9\u7684\u7684\u6d41\u91cf\u662fINT_MAX\u8fd9\u79cd\u5f00\u73a9\u7b11\u7684\u6570\u5b57\uff0c\u5bfc\u81f4\u7f51\u7edc\u6e90\u76f4\u63a5\u5c06\u5176\u5bb9\u91cf\u6d41\u5e72(\u5c31\u662fINF\u5f00\u5c0f\u7684\u95ee\u9898)\uff0c\u6211\u4eec\u5c06\u6e90\u70b9\u53d1\u51fa\u7684\u8fb9\u5355\u72ec\u62ff\u51fa\u6765\u8fdb\u884c\u63a8\u6d41\u3002         \n```cpp\n    for(i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(int f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n```\n\u4f60\u53ef\u80fd\u4f1a\u95ee:\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5f00long long\u5462\uff1f\u8fd9\u6837\u7801\u91cf\u4f1a\u5c0f\u5f88\u591a\u554a\uff1f       \n\u4e3b\u8981\u8fd8\u662f\u8fd8\u662f\u6548\u7387\u95ee\u9898\uff0clong long\u592a\u6162\u4e86\u3002      \n2.\u6211\u4eec\u5c06\u5f53\u524d\u6700\u9ad8\u7684\u70b9\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\uff0c\u5e76\u5224\u65ad\u662f\u5426\u6709\u8d85\u989d\u6d41:       \n```cpp\n    while(!pq.empty())\n    {\n        int t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n```\n3.\u8fd9\u91cc\u7684gap\u4f18\u5316\u5c31\u8981\u8d77\u4f5c\u7528\u4e86\uff0c\u82e5\u6700\u9ad8\u70b9\u6240\u5904\u7684\u5c42\u6570\u53ea\u6709\u5b83\u4e00\u4e2a\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u9ad8\u5ea6\u6539\u4e3an+1\u5c42:\n```cpp\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n```\n\u8fd9\u6837\u5b83\u7684\u8d85\u989d\u6d41\u5c31\u53ef\u4ee5\u76f4\u63a5\u6d41\u56de\u6e90\u70b9\u3002            \n4.\u63a5\u4e0b\u6765\u5c31\u5c06\u5b83\u7684\u6807\u7b7e\u91cd\u8d34\uff0c\u5e76\u8fdb\u884c\u63a8\u6d41:\n```cpp\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n```\n5.\u6700\u540e\u8fd4\u56de\u6c47\u70b9\u7684\u8d85\u989d\u6d41,\u7b97\u6cd5\u7ed3\u675f:       \n```cpp\n    return e[ed];\n}\n```\nHLPP\u4e3b\u8fc7\u7a0b\u5b8c\u6574\u4ee3\u7801:\n```cpp\ninline int hlpp()\n{\n    re int i;\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n    for(i=1;i<=n;i++)if(h[i]!=inf)gap[h[i]]++;\n    for(i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(int f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n    while(!pq.empty())\n    {\n        int t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n    return e[ed];\n}\n```\nHLPP(\u7ecf\u5178\u5199\u6cd5)\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<climits>\n#include<ctime>\n#include<algorithm>\n#include<complex>\n#include<iostream>\n#include<map>\n#include<queue>\n#include<vector>\n#define ll long long\n#define INF (1ll<<49ll)+1ll\n#define inf 0x3f3f3f3f\n#define re register\n#define il inline\nusing namespace std;\nstruct edge\n{\n    int to,next;\n    int flow;\n}a[2000020];\nint head[10010];\nint gap[10010];\nint h[10010];\nint e[10010];\nint vis[10010];\nint cnt(0);\nint n,m,st,ed;\nstruct cmp\n{\n    il bool operator ()(int xi,int yi)const\n    {\n        return h[xi]<h[yi];\n    }\n};\npriority_queue<int,vector<int>,cmp> pq;\nqueue<int> q;\nil void addedge(int xi,int yi,int fi)\n{\n    a[cnt].to=yi;\n    a[cnt].next=head[xi];\n    a[cnt].flow=fi;\n    head[xi]=cnt++;\n}\nil bool bfs()\n{\n    re int i;\n    memset(h+1,inf,sizeof(int)*n);\n    h[ed]=0;\n    q.push(ed);\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(i=head[t];i!=-1;i=a[i].next)\n        {\n            int v=a[i].to;\n            if(a[i^1].flow&&h[v]>h[t]+1)\n            {\n                h[v]=h[t]+1;\n                q.push(v);\n            }\n        }\n    }\n    return h[st]!=inf;\n}\nil void push(int u)\n{\n    re int i;\n    for(i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1==h[u]))\n        {\n            int df=min(e[u],a[i].flow);\n            a[i].flow-=df;\n            a[i^1].flow+=df;\n            e[u]-=df;\n            e[v]+=df;\n            if((v!=st)&&(v!=ed)&&(!vis[v]))\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n            if(!e[u])break;\n        }\n    }\n}\nil void relabel(int u)\n{\n    re int i;\n    h[u]=inf;\n    for(i=head[u];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if((a[i].flow)&&(h[v]+1<h[u]))h[u]=h[v]+1;\n    }\n}\ninline int hlpp()\n{\n    re int i;\n    if(!bfs())return 0;\n    h[st]=n;\n    memset(gap,0,sizeof(int)*(n<<1));\n    for(i=1;i<=n;i++)if(h[i]!=inf)gap[h[i]]++;\n    for(i=head[st];i!=-1;i=a[i].next)\n    {\n        int v=a[i].to;\n        if(int f=a[i].flow)\n        {\n            a[i].flow-=f;a[i^1].flow+=f;\n            e[st]-=f;e[v]+=f;\n            if(v!=st&&v!=ed&&!vis[v])\n            {\n                pq.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n    while(!pq.empty())\n    {\n        int t=pq.top();pq.pop();\n        vis[t]=0;push(t);\n        if(e[t])\n        {\n            gap[h[t]]--;\n            if(!gap[h[t]])\n            {\n                for(re int v=1;v<=n;v++)\n                {\n                    if(v!=st&&v!=ed&&h[v]>h[t]&&h[v]<n+1)\n                    {\n                        h[v]=n+1;\n                    }\n                }\n            }\n            relabel(t);gap[h[t]]++;\n            pq.push(t);vis[t]=1;\n        }\n    }\n    return e[ed];\n}\nsigned main()\n{\n    re int i;\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d%d%d\",&n,&m,&st,&ed);\n    for(i=1;i<=m;i++)\n    {\n        int x,y;\n        ll f;\n        scanf(\"%d%d%lld\",&x,&y,&f);\n        addedge(x,y,f);\n        addedge(y,x,0);\n    }\n    ll maxf=hlpp();\n    printf(\"%lld\",maxf);\n    return 0;\n}\n```\n------------\n## ------------Part1\u7ed3\u675f------------\n------------\n## ------------Part2.\u6700\u4f18\u89e3\u7684\u4f18\u5316------------\n------------\nPart2\u5e76\u4e0d\u662f\u8fd9\u7bc7\u9898\u89e3\u7684\u91cd\u70b9\uff0c\u4e5f\u4e0d\u662f\u5b66\u4e60HLPP\u5fc5\u987b\u4e86\u89e3\u7684\u5185\u5bb9\uff0c\u4ec5\u4ec5\u662f\u5411\u5927\u5bb6\u4ecb\u7ecd\u6700\u4f18\u89e3\u6240\u505a\u7684\u4f18\u5316\u800c\u5df2\u3002      \n\u56e0\u4e3a\u6700\u4f18\u89e3\u5b9e\u5728\u6709\u4e9b\u590d\u6742\uff0c\u800c\u535a\u4e3b\u6240\u8bf4\u6bd5\u7adf\u53ea\u662f\u4e00\u5bb6\u4e4b\u8a00\uff0c\u65e0\u6cd5\u4ee3\u8868\u5e7f\u5927OIer\u4eec\u7684\u89c2\u70b9\uff0c\u4f60\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u770b\u4ed6\u4eec\u7684\u4ee3\u7801\u81ea\u5df1\u53c2\u900f\u4ed6\u4eec\u7684\u505a\u6cd5\u3002    \n\u867d\u8bf4**Part1\u4ecb\u7ecd\u7684\u65b9\u6cd5**\u5df2\u7ecf\u8db3\u591f\u5e94\u4ed8**\u5927\u591a\u6570**\u60c5\u51b5\u4e86\uff0c\u4f46\u662f\u8981\u8fc7\u8fd9\u9053\u9898\u7528\u524d\u9762\u7684\u4ee3\u7801**\u5373\u4f7f\u5f00\u4e86O2**\u8fd8\u662f\u5341\u5206\u7684\u52c9\u5f3a\u3002         \n![](https://i.loli.net/2018/12/08/5c0b5fc17c33c.jpg)\n\u7136\u800c\u90a3\u4e9b\u6700\u4f18\u89e3\u4e00\u4e2a\u4e2a\u8dd1\u5f97\u98de\u5feb\u3002(\u52a0\u5165\u516c\u5f00\u8ba1\u5212\u7684\u8bdd\u5c31\u53ef\u4ee5\u67e5\u770b\u4ed6\u4eec\u7684\u4ee3\u7801\u4e86\uff0c\u5efa\u8bae\u52a0\u5165\uff0c\u53ef\u4ee5\u4e92\u76f8\u5b66\u4e60\uff0c\u4e86\u89e3\u81ea\u5df1\u7684\u4e0d\u8db3)         \n\u6211\u4eec\u53cd\u89c2\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9?        \n\u5f53\u7136\u6709\u5f88\u591a\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u4e2a\u4e71\u641e\u4f18\u5316Part2\u3002       \n1.\u6211\u4eec\u4f7f\u7528\u7684\u524d\u5411\u661f\u5b58\u56fe\u6539\u6210Vector\u7684\u90bb\u63a5\u8868\u5b58\u56fe\u4f1a\u66f4\u5feb:        \n```cpp\nstruct edge \n{\n    int to,flow,next;\n    edge(int to,int flow,int next):to(to),flow(flow),next(next){}\n};\nstd::vector<edge>a[1203];\n```\n```cpp\ninline void addEdge(const int u,const int v,const int f)\n{\n    a[u].push_back(edge(v,f,a[v].size()));\n    a[v].push_back(edge(u,0,a[u].size()-1));\n}\n```\n2.\u6211\u4eec\u7684\u6570\u7ec4\u5c3d\u53ef\u80fd\u7684\u7528Vector\u4ee3\u66ff\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4f18\u79c0\u7684\u81ea\u5e26\u51fd\u6570\u3002      \n3.\u6211\u4eec\u4e0d\u52a0\u4e0ausing namespace std\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e00\u5b9a\u7a0b\u5ea6\u7684\u52a0\u901f\u3002       \n4.\u6211\u4eec\u4f7f\u7528c++\u4e2d\u7684list\u6765\u5b9e\u73b0\u5feb\u901f\u7684\u63d2\u5165\u548c\u5220\u9664\u3002    \n5.\u7531\u4e8e\u6211\u4eec\u4f1a\u9891\u7e41\u5730\u904d\u5386\uff0c\u6211\u4eec\u5b9a\u4e49\u597d\u8fed\u4ee3\u5668(\u8fd9\u4e00\u70b9\u53ea\u662f\u4e3a\u4e86\u5199\u4ee3\u7801\u65b9\u4fbf\uff0c\u800c\u4e0d\u662f\u4e3a\u4e86\u63d0\u9ad8\u901f\u5ea6)\u3002     \n```cpp\nstd::vector<edge>a[1203];\nstd::vector<int>list[1203],h,cnt,que,e;\ntypedef std::list<int> List;\nstd::vector<List::iterator>iter;\nList dlist[1203];\ntypedef std::vector<edge>::iterator Iterator;\n```\n6.\u7531\u4e8e\u4e00\u6b21bfs\u8bbe\u5b9a\u9ad8\u5ea6+\u91cd\u8d34\u6807\u7b7e\u6548\u7387\u8f83\u4f4e\uff0c\u6211\u4eec\u8fdb\u884c**\u5168\u5c40\u91cd\u8d34\u6807\u7b7e**\uff0c\u5373\u4e00\u6b21\u5b8c\u6210\u6240\u6709\u70b9\u7684\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c\u3002         \n\u5168\u5c40\u91cd\u8d34\u6807\u7b7e\u7684\u539f\u7406\u4e0e\u4e00\u822c\u7684\u91cd\u8d34\u6807\u7b7e\u7c7b\u4f3c\u3002\n```cpp\ninline void relabel(int n,int t)\n{\n    h.assign(n,n);h[t]=0;\n    cnt.assign(n,0);\n    que.clear();\n    que.resize(n+1);\n    int qh=0,qt=0;\n    for(que[qt++]=t;qh<qt;)\n    {\n        int u=que[qh++],het=h[u]+1;\n        for(Iterator p=a[u].begin();p!=a[u].end();++p)\n        {\n            if(h[p->to]==n&&a[p->to][p->next].flow>0)\n            {\n                cnt[h[p->to]=het]++;\n                que[qt++]=p->to;\n            }\n        }\n    }\n    for(register int i=0;i<=n;++i){list[i].clear();dlist[i].clear();}\n    for(register int u=0;u<n;++u)\n    {\n        if(h[u]<n)\n        {\n            iter[u]=dlist[h[u]].insert(dlist[h[u]].begin(),u);\n            if(e[u]>0)list[h[u]].push_back(u);\n        }\n    }\n    hst=(nowh=h[que[qt-1]]);\n}\n```\n7.\u8d4b\u503c\u64cd\u4f5c\u5927\u91cf\u7684\u4f7f\u7528\u4e86assign\u51fd\u6570\u3002      \n8.\u4f18\u5148\u961f\u5217\u4f7f\u7528\u4e86vector\u4ee3\u66ff\uff0c\u800c\u4e14\u7528\u4e00\u4e2a\u6570\u7ec4\u7684(1203\u4e2a)vector\u8868\u793a\u4e0d\u540c\u7684\u9ad8\u5ea6\u3002        \n9.push\u64cd\u4f5c\u505a\u4e86\u5927\u91cf\u7684\u66f4\u6539\uff0c\u65b0\u7684push\u8fc7\u7a0b\u6709\u4e24\u4e2a\u5185\u5bb9:\n\u57fa\u4e8e\u8fb9\u7684push(int u,edge &ed)\u4f5c\u4e3apush\u7684\u4e00\u4e2a\u5b50\u8fc7\u7a0b\u88ab\u8c03\u7528\uff0c\u4fa7\u91cd\u4e8e\u5f53\u524d\u8fb9\u7684\u4fee\u6539:                \n```cpp\ninline void push(int u,edge &ed)\n{\n    int v=ed.to;\n    int df=std::min(e[u],ed.flow);ed.flow-=df;\n    a[v][ed.next].flow+=df;\n    e[u]-=df;e[v]+=df;\n    if(0<e[v]&&e[v]<=df)list[h[v]].push_back(v);\n}\n```\n\u800chlpp\u4e3b\u8fc7\u7a0b\u7528\u4f1a\u8c03\u7528\u7684push(int n,int u)\u5219\u4fa7\u91cd\u4e8e\u540c\u9ad8\u5ea6\u7684\u70b9\u7684\u4f18\u5316\u3002        \n```cpp\ninline void push(int n,int u)\n{\n    int nh=n;\n    for(Iterator p=a[u].begin();p!=a[u].end();++p)\n    {\n        if(p->flow>0)\n        {\n            if(h[u]==h[p->to]+1){push(u,*p);if(e[u]==0)return;} \n            else nh=std::min(nh,h[p->to]+1);\n        }\n    }\n    int het=h[u];\n    if(cnt[het]==1)\n    {\n        for(register int i=het;i<=hst;++i)\n        {\n            for(List::iterator it=dlist[i].begin();it!=dlist[i].end();++it){cnt[h[*it]]--;h[*it]=n;}\n            dlist[i].clear();\n        }\n        hst=het-1;\n    }\n    else\n    {\n        cnt[het]--;\n        iter[u]=dlist[het].erase(iter[u]);\n        h[u]=nh;\n        if(nh==n)return;\n        cnt[nh]++;\n        iter[u]=dlist[nh].insert(dlist[nh].begin(),u);\n        hst=std::max(hst,nowh=nh);\n        list[nh].push_back(u);\n    }\n}\n```\n10.\u5feb\u8bfb\u662f\u4e00\u4e2a\u597d\u4e1c\u897f\uff0c\u8981\u8bb0\u5f97\u52a0\u4e0a:\n```cpp\ninline int read()\n{\n    int f=0,fu=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')fu=-1;c=getchar();}\n    while(c>='0'&&c<='9'){f=(f<<3)+(f<<1)+c-48;c=getchar();}\n    return f*fu;\n}\n```\n\u5269\u4f59\u5c31\u6ca1\u4ec0\u4e48\u503c\u5f97\u6ce8\u610f\u7684\uff0c\u4e5f\u5f88\u597d\u7406\u89e3\u3002       \n\u4e0d\u8fc7\u8fd8\u662f\u628aHLPP\u4e3b\u8fc7\u7a0b\u5355\u72ec\u62ce\u51fa\u6765\u7ed9\u4f60\u4eec\u770b\u770b:    \n```cpp\ninline int hlpp(int n,int s,int t)\n{\n    if(s==t)return 0;\n    nowh=0;hst=0;\n    h.assign(n,0);h[s]=n;\n    iter.resize(n);\n    for(register int i=0;i<n;++i)if(i!=s)iter[i]=dlist[h[i]].insert(dlist[h[i]].begin(),i);\n    cnt.assign(n,0);cnt[0]=n-1;\n    e.assign(n,0);e[s]=INF;e[t]=-INF;\n    for(register int i=0;i<(int)a[s].size();++i)push(s,a[s][i]);\n    relabel(n,t);\n    for(int u;nowh>=0;)\n    {\n        if(list[nowh].empty()){nowh--;continue;}\n        u=list[nowh].back();\n        list[nowh].pop_back();\n        push(n,u);\n    }\n    return e[t]+INF;\n}\n```\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6700\u540e\u4e00\u53e5\u7684```e[t]+INF```\u3002      \n\u8fd9\u4e00\u53e5\u4e0erelabel\u64cd\u4f5c\u4e2d\u7684```e[t]=-INF```\u76f8\u5bf9\u5e94\uff0c\u662f\u4e3a\u4e86\u9632\u6b62**\u8d85\u989d\u6d41**\u771f\u7684\"\u8d85\u989d\"(\u6ea2\u51fa)\u4e86\u3002            \nHLPP(\u6539\u8fdb\u5199\u6cd5)\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n#include<cctype>\n#include<cerrno>\n#include<cfloat>\n#include<ciso646>\n#include<climits>\n#include<clocale>\n#include<cmath>\n#include<csetjmp>\n#include<csignal>\n#include<cstdarg>\n#include<cstddef>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<ctime>\n#include<cassert>\n#include<cwchar>\n#include<cwctype>\n#include<algorithm>\n#include<bitset>\n#include<complex>\n#include<deque>\n#include<exception>\n#include<fstream>\n#include<functional>\n#include<iomanip>\n#include<ios>\n#include<iosfwd>\n#include<iostream>\n#include<istream>\n#include<iterator>\n#include<limits>\n#include<list>\n#include<locale>\n#include<map>\n#include<memory>\n#include<new>\n#include<numeric>\n#include<ostream>\n#include<queue>\n#include<set>\n#include<sstream>\n#include<stack>\n#include<stdexcept>\n#include<streambuf>\n#include<string>\n#include<typeinfo>\n#include<utility>\n#include<valarray>\n#include<vector>\nconst int INF(INT_MAX);\nstruct edge \n{\n    int to,flow,next;\n    edge(int to,int flow,int next):to(to),flow(flow),next(next){}\n};\nstd::vector<edge>a[1203];\nstd::vector<int>list[1203],h,cnt,que,e;\ntypedef std::list<int> List;\nstd::vector<List::iterator>iter;\nList dlist[1203];\ntypedef std::vector<edge>::iterator Iterator;\nint hst,nowh;\ninline void addEdge(const int u,const int v,const int f)\n{\n    a[u].push_back(edge(v,f,a[v].size()));\n    a[v].push_back(edge(u,0,a[u].size()-1));\n}\ninline void relabel(int n,int t)\n{\n    h.assign(n,n);h[t]=0;\n    cnt.assign(n,0);\n    que.clear();\n    que.resize(n+1);\n    int qh=0,qt=0;\n    for(que[qt++]=t;qh<qt;)\n    {\n        int u=que[qh++],het=h[u]+1;\n        for(Iterator p=a[u].begin();p!=a[u].end();++p)\n        {\n            if(h[p->to]==n&&a[p->to][p->next].flow>0)\n            {\n                cnt[h[p->to]=het]++;\n                que[qt++]=p->to;\n            }\n        }\n    }\n    for(register int i=0;i<=n;++i){list[i].clear();dlist[i].clear();}\n    for(register int u=0;u<n;++u)\n    {\n        if(h[u]<n)\n        {\n            iter[u]=dlist[h[u]].insert(dlist[h[u]].begin(),u);\n            if(e[u]>0)list[h[u]].push_back(u);\n        }\n    }\n    hst=(nowh=h[que[qt-1]]);\n}\ninline void push(int u,edge &ed)\n{\n    int v=ed.to;\n    int df=std::min(e[u],ed.flow);ed.flow-=df;\n    a[v][ed.next].flow+=df;\n    e[u]-=df;e[v]+=df;\n    if(0<e[v]&&e[v]<=df)list[h[v]].push_back(v);\n}\ninline void push(int n,int u)\n{\n    int nh=n;\n    for(Iterator p=a[u].begin();p!=a[u].end();++p)\n    {\n        if(p->flow>0)\n        {\n            if(h[u]==h[p->to]+1){push(u,*p);if(e[u]==0)return;} \n            else nh=std::min(nh,h[p->to]+1);\n        }\n    }\n    int het=h[u];\n    if(cnt[het]==1)\n    {\n        for(register int i=het;i<=hst;++i)\n        {\n            for(List::iterator it=dlist[i].begin();it!=dlist[i].end();++it){cnt[h[*it]]--;h[*it]=n;}\n            dlist[i].clear();\n        }\n        hst=het-1;\n    }\n    else\n    {\n        cnt[het]--;\n        iter[u]=dlist[het].erase(iter[u]);\n        h[u]=nh;\n        if(nh==n)return;\n        cnt[nh]++;\n        iter[u]=dlist[nh].insert(dlist[nh].begin(),u);\n        hst=std::max(hst,nowh=nh);\n        list[nh].push_back(u);\n    }\n}\ninline int hlpp(int n,int s,int t)\n{\n    if(s==t)return 0;\n    nowh=0;hst=0;\n    h.assign(n,0);h[s]=n;\n    iter.resize(n);\n    for(register int i=0;i<n;++i)if(i!=s)iter[i]=dlist[h[i]].insert(dlist[h[i]].begin(),i);\n    cnt.assign(n,0);cnt[0]=n-1;\n    e.assign(n,0);e[s]=INF;e[t]=-INF;\n    for(register int i=0;i<(int)a[s].size();++i)push(s,a[s][i]);\n    relabel(n,t);\n    for(int u;nowh>=0;)\n    {\n        if(list[nowh].empty()){nowh--;continue;}\n        u=list[nowh].back();\n        list[nowh].pop_back();\n        push(n,u);\n    }\n    return e[t]+INF;\n}\n\ninline int read()\n{\n    int f=0,fu=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')fu=-1;c=getchar();}\n    while(c>='0'&&c<='9'){f=(f<<3)+(f<<1)+c-48;c=getchar();}\n    return f*fu;\n}\nint n,m,s,t,u,v,f;\nsigned main()\n{\n    n=read(),m=read(),s=read(),t=read();\n    for(register int i=m;i>0;--i){u=read(),v=read(),f=read();addEdge(u,v,f);}\n    printf(\"%d\",hlpp(n+1,s,t));\n    return 0;\n}\n```",
        "postTime": 1544187300,
        "uid": 105496,
        "name": "KevinYu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4722 \u3010\u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u672c\u6587\u4ecb\u7ecd\u51e0\u4e2a\u6bd4\u8f83\u4f18\u79c0\u7684\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\uff0c\u5305\u62ec\u6734\u7d20\u7684ISAP\u7b97\u6cd5\uff0cHLPP\u7b97\u6cd5\u548c\u81ea\u5df1\u8111\u8865\u7684LCT\u7ef4\u62a4ISAP\u7684\u7b97\u6cd5\u3002\n### \u8b66\u544a\uff1a\u5404\u79cd\u7f51\u7edc\u6d41\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u53ca\u5176\u9000\u5316\u7684\u53ef\u80fd\u6027\nDinic\u7b97\u6cd5\u53ca\u6734\u7d20\u7684ISAP\u7b97\u6cd5\uff1a$O(n^2 m)$ \uff0c\u4e0d\u52a0\u5f53\u524d\u5f27\u4f18\u5316\uff1a$O(n m^2)$ \u3002\n\n\u961f\u5217\u7ef4\u62a4\u7684\u7684ISAP\u7b97\u6cd5\uff1a$O(n^3)$ \uff0c\u4e0d\u52a0\u5f53\u524d\u5f27\uff08\u6216\u8005\u53eb\u5141\u8bb8\u5f27\uff09\u4f18\u5316\uff1a$O(n^2 m)$ \u3002\n\nHLPP\u7b97\u6cd5\uff1a$ O(n^2 \\sqrt m) $ \uff0c\u4e0d\u52a0\u5f53\u524d\u5f27\uff08\u6216\u8005\u53eb\u5141\u8bb8\u5f27\uff09\u4f18\u5316\uff1a$O(n m \\sqrt m)$ \uff0c\u7528\u5806\u7ef4\u62a4\u4f18\u5148\u961f\u5217\uff1a$ O(n^2 \\sqrt m logn) $ \u3002\n\n\u5982\u679c\u4e24\u8005\u90fd\u662f\u90a3\u5c31\u662f$ O(nm \\sqrt m logn) $\u3002\u7136\u800c\u7f51\u4e0a\u51e0\u4e4e\u6240\u6709\u4ee3\u7801\u90fd\u6709\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5f88\u591a\u9884\u6d41\u63a8\u8fdb\u7684\u7a0b\u5e8f\u8dd1\u5f97\u8fd8\u6ca1Dinic\u5feb\u7684\u539f\u56e0\u3002\n\nLCT\u7ef4\u62a4\u7684ISAP\u7b97\u6cd5\uff1a $O(nm logn)$ \u4f46\u7531\u4e8e\u5e38\u6570\u592a\u5927\u76ee\u524d\u6ca1\u6709\u627e\u5230\u5f88\u597d\u7684\u7528\u9014\u3002\n##### \u524d\u7f6e\u6280\u80fd\uff1a\n\u7f51\u7edc\u6d41\u7684\u57fa\u672c\u5b9a\u4e49\uff0cDinic\u7b97\u6cd5\uff0cLCT\uff08\u5982\u679c\u8981\u770bLCT\u7ef4\u62a4ISAP\u7684\u7b97\u6cd5\u7684\u8bdd\uff09\u3002\n## \u6734\u7d20\u7684ISAP\u7b97\u6cd5\n\u6211\u4eec\u9996\u5148\u56de\u5fc6\u4e00\u4e0bDinic\u7b97\u6cd5\u7684\u505a\u6cd5\uff1a\u6bcf\u6b21\u4ece\u6e90\u70b9\u51fa\u53d1bfs\u51fa\u4e00\u4e2a\u5c42\u6b21\u56fe\uff0c\u7136\u540e\u53ea\u5728\u8fd9\u4e2a\u5c42\u6b21\u56fe\u4e0a\u8dd1\u6d41\u3002\n\n\u800cISAP\u6cbf\u7528\u4e86\u8fd9\u79cd\u601d\u60f3\uff0c\u4f46\u4e0d\u540c\u4e4b\u5904\u5c31\u662fISAP\u6539\u4e3a\u4ece\u6c47\u70b9\u51fa\u53d1bfs\u51fa\u5c42\u6b21\u56fe\uff0c\u63a5\u4e0b\u6765\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u5c42\u6b21\u56fe\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0cISAP\u9996\u5148bfs\u51fa\u6bcf\u4e00\u4e2a\u70b9\u548c\u6c47\u70b9\u7684\u8ddd\u79bb\uff0c\u5bfb\u627e\u589e\u5e7f\u8def\u65f6\u53ea\u6cbf\u7740\u6ee1\u8db3$d[u]=d[v]+1$ \u7684\u8fb9 $u\u2192v$\uff08\u8fd9\u6837\u7684\u8fb9\u79f0\u4e3a\u5141\u8bb8\u5f27\uff09\u8d70\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u8fb9\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u201c\u8fc7\u65f6\u4e86\u201d\uff0c\u9700\u8981\u91cd\u65b0\u627e\u4e00\u4e2a\u8ddd\u79bb\uff0c\u800c\u8fd9\u4e2a\u8ddd\u79bb\u663e\u7136\u662f\u5f53\u524d\u6b8b\u91cf\u7f51\u7edc\u4e2d\u4e0e\u70b9 $u$ \u76f8\u90bb\u7684\u70b9 $v$ \u4e2d\u6700\u5c0f\u7684 $d[v]+1$ \uff0c\u5373 $d[u]=min_{v,(u,v)\u2208E}d[v] +1$ \u3002\u800c\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u4e5f\u662f\u663e\u7136\u7684\uff08\u53ef\u4ee5\u53c2\u7167Dinic\u7b97\u6cd5\uff09\u3002\n#### \u590d\u6742\u5ea6\u8bc1\u660e\uff1a\n\u9996\u5148\uff0c\u6bcf\u4e00\u4e2a\u70b9\u6700\u591a\u88ab\u91cd\u6807\u53f7 $O(n)$ \uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u4e0e\u6c47\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $n$ \uff0c\u5bf9\u4e8e\u4e00\u6b21\u63a8\u6d41\uff0c\u6211\u4eec\u628a\u5b83\u5206\u4e3a\u201c\u5b8c\u5168\u63a8\u6d41\u201d\uff08\u4e00\u6b21\u6027\u6d41\u5b8c\u6574\u6761\u8fb9\u7684\u5bb9\u91cf\uff09\uff0c\u548c\u201c\u4e0d\u5b8c\u5168\u63a8\u6d41\u201d\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u201c\u5b8c\u5168\u63a8\u6d41\u201d\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8fd9\u6761\u8fb9 $(u,v)$ \uff08\u5305\u62ec\u5b83\u7684\u53cd\u5411\u8fb9\uff09\u53ef\u80fd\u518d\u88ab\u63a8\u6d41\u5f53\u4e14\u4ec5\u5f53\u70b9 $u$ \u6216\u70b9 $v$ \u88ab\u91cd\u6807\u53f7\u3002\u6240\u4ee5\u6bcf\u4e00\u6761\u8fb9\u81f3\u591a\u88ab\u201c\u5b8c\u5168\u63a8\u6d41\u201d $O(n)$ \u6b21\uff0c\u800c\u5b8c\u5168\u63a8\u6d41\u7684\u603b\u6570\u4e3a $O(nm)$ \u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u6b21\u589e\u5e7f\uff0c\u81f3\u5c11\u6709\u4e00\u6b21\u201c\u5b8c\u5168\u63a8\u6d41\u201d\uff0c\u6240\u4ee5\u589e\u5e7f\u7684\u6b21\u6570\u4e5f\u662f $O(nm)$ \u7684\uff0c\u800c\u4e00\u6b21\u589e\u5e7f\u6700\u591a\u6d41 $O(n)$ \u6b21\uff0c\u6240\u4ee5\u63a8\u6d41\u7684\u603b\u6570\u662f $O(n^2m)$ \u7684\u3002\uff08\u4f46\u4e0d\u5b58\u5141\u8bb8\u5f27\u7684\u8bdd\u5c31\u4f1a\u53d8\u6210 $O(nm^2)$ \uff09\n### ISAP\u7684\u51e0\u4e2a\u4f18\u5316\uff1a\n##### 1\u3001\u5f53\u524d\u5f27/\u5141\u8bb8\u5f27\u4f18\u5316\uff1a\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7528\u9886\u63a5\u8868\uff08\u5f00O2\u7684\u8bdd\u53ef\u4ee5\u7528vector\uff09\u5b58\u5b83\u7684\u5141\u8bb8\u5f27\uff0c\u8fd9\u6837\u4e0d\u7528\u591a\u4f59\u5730\u8bbf\u95ee\u4e0d\u5141\u8bb8\u63a8\u6d41\u7684\u8fb9\uff0c\u800c\u5141\u8bb8\u5f27\u6539\u53d8\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u70b9\u88ab\u91cd\u6807\u53f7\u4e86\uff0c\u6240\u4ee5\u6bcf\u6b21\u91cd\u6807\u53f7\u7684\u65f6\u5019\u4fee\u6539\u4e00\u4e0b\uff0c\u8fd9\u6837\u662f $O(nm)$ \u7684\uff0c\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u6574\u4f53\u6548\u7387\u3002\n##### 2\u3001GAP\u4f18\u5316\uff1a\n\u5f00\u4e00\u4e2a\u6876\u5b58\u6bcf\u4e00\u4e2a\u9ad8\u5ea6\u6709\u51e0\u4e2a\u70b9\uff0c\u91cd\u6807\u53f7\u7684\u65f6\u5019\u770b\u4e00\u4e0b\u8fd9\u4e2a\u9ad8\u5ea6\u662f\u5426\u5df2\u7ecf\u6ca1\u6709\u70b9\u4e86,\u5982\u679c\u662f\u7684\u8bdd\u5c31\u4e0d\u7528\u518d\u6d41\u4e86\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u56fe\u51fa\u73b0\u4e86\u65ad\u5c42\u3002\n### \u4ee3\u7801\uff1a\n\uff08\u6682\u65e0\uff0c\u5176\u5b9e\u5927\u5bb6\u6ca1\u5fc5\u8981\u53bb\u5199\u6734\u7d20\u7684ISAP\uff0c\u5feb\u6765\u5199\u4e0b\u9762\u7684HLPP\u5427\uff09\n## HLPP\u7b97\u6cd5\n\u65bd\u5de5\u4e2d\u3002\u3002\u3002\uff08\u7b49\u6211\u671f\u672b\u8003\u5b8c\u5427\uff09\n### \u4ee3\u7801\uff1a\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<map>\nusing namespace std;\n#define re register\n#define cmin(a,b) (a>(b)?a=(b):0)\n#define cmax(a,b) (a<(b)?a=(b):0)\n#define dmin(a,b) ((a)<(b)?(a):(b))\nconst int inf=1<<30,MaxN=10100,MaxM=121000;\nstruct edge{int to,v;edge*nx,*rec,*nx1;}e[MaxM<<1];edge*last[MaxN],*cur[MaxN],*cnt=e;\nint h[MaxN],gap[MaxN],q[MaxN],n,s,t,n1,g[MaxN],nd[MaxN];\nlong long w[MaxN];\ninline void addE(re int a,re int b,re int c)\n{\n\t*++cnt=(edge){b,c,last[a]};last[a]=cnt;cnt->rec=cnt+1;\n\t*++cnt=(edge){a,0,last[b]};last[b]=cnt;cnt->rec=cnt-1;\n}\ninline void addV(re int a,re int h){nd[a]=g[h];g[h]=a;}\nvoid bfs()\n{\n\tre int x,ta=2;q[1]=t;\n\tmemset(h,0,(n+1)<<2);h[t]=1;\n\tfor(re int i=1;i<ta;i++)\n\t{\n\t\tx=q[i];if(x==s)continue;\n\t\tfor(re edge*j=last[x];j;j=j->nx)if(!h[j->to])\n\t\t\th[j->to]=h[x]+1,q[ta++]=j->to;\n\t}\n}\nvoid hlpp()\n{\n\tbfs();h[s]=n+1;re int ta=0,x,d;memset(w,0,(n+1)<<2);\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tfor(re edge*j=last[i];j;j=j->nx)if(h[j->to]==h[i]-1)\n        j->nx1=cur[i],cur[i]=j;\n\t\tgap[h[i]]++;\n\t}\n\tfor(re edge*j=last[s];j;j=j->nx)if(j->v&&h[j->to])\n    addV(j->to,h[j->to]),cmax(ta,h[j->to]),\n    w[j->to]+=j->v,j->rec->v=j->v,j->v=0;\n\twhile(ta)\n\t{\n\t\tx=g[ta];g[ta]=nd[x];nd[x]=0;\n\t\tif(h[x]>n)continue;\n\t\tfor(re edge*&j=cur[x];j&&w[x];j=j->nx1)//\u63a8\u6d41\n\t\tif(j->v&&h[j->to]==h[x]-1){\n\t\t\td=dmin(j->v,w[x]);if(!w[j->to]&&j->to!=t)\n            addV(j->to,h[j->to]),cmax(ta,h[j->to]);\n\t\t\tj->v-=d,j->rec->v+=d;w[x]-=d;w[j->to]+=d;\n\t\t\tif(!w[x])break;\n\t\t}\n\t\tif(w[x])//\u91cd\u6807\u53f7\n\t\t{\n\t\t\tgap[h[x]]--;\n\t\t\tif(!gap[h[x]])//gap\u4f18\u5316\n\t\t\t{\n\t\t\t\tfor(re int i=1;i<=n;i++)if(h[i]>h[x])gap[h[i]]=0,h[i]=n+1;h[x]=n+1;\n\t\t\t\twhile(ta&&!g[ta])ta--;continue;\n\t\t\t}\n\t\t\th[x]=n+1;\n\t\t\tfor(re edge*j=last[x];j;j=j->nx)\n            if(j->v)cmin(h[x],h[j->to]+1);gap[h[x]]++;\n\t\t\tfor(re edge*j=last[x];j;j=j->nx)\n            if(j->v)if(j->v&&h[j->to]==h[x]-1)j->nx1=cur[x],cur[x]=j;\n\t\t\telse if(j->rec->v&&h[j->to]==h[x]+1)j->rec->nx1=cur[j->to],cur[j->to]=j->rec;\n\t\t\taddV(x,h[x]),cmax(ta,h[x]);\n\t\t}while(ta&&!g[ta])ta--;\n\t}\n}\nint main()\n{\n    re int m,x,y,c;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(re int i=1;i<=m;i++)scanf(\"%d%d%d\",&x,&y,&c),addE(x,y,c);\n    hlpp();\n    printf(\"%lld\\n\",w[t]);\n}\n```\n## LCT\u7ef4\u62a4ISAP\uff08\u53e3\u80e1\u8b66\u544a\uff01\uff01\uff09\n#### \u524d\u8a00\n\u53ef\u80fd\u56e0\u4e3a\u5e38\u6570\u592a\u5927\uff0c\u592a\u4e0d\u5b9e\u7528\u4e86\uff0c\u6211\u4ece\u6765\u5728\u7f51\u4e0a\u6ca1\u89c1\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u3002\u53ea\u6709\u7ef4\u57fa\u4e0a\u63d0\u4e86\u4e00\u4e0b\uff08\u53ea\u8bb2\u4e86\u590d\u6742\u5ea6\uff0c\u6ca1\u6709\u8bb2\u505a\u6cd5\uff09\uff0c\u4e8e\u662f\u6211\u82b1\u4e86\u51e0\u5929\u65f6\u95f4\u628a\u5b83\u7ed9\u8111\u8865\u51fa\u6765\uff0c\u4e5f\u6ca1\u6709\u81ea\u5df1\u5b9e\u73b0\u8fc7\u3002\u6240\u4ee5\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\uff0c\u6709\u95ee\u9898\u8bf7\u5e2e\u5fd9\u6307\u51fa\u4e00\u4e0b\u3002\n#### \u6b63\u6587\n\u8ba9\u6211\u4eec\u518d\u56de\u5fc6\u4e00\u4e0b\u5173\u4e8eISAP\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53d1\u73b0\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u5728\u589e\u5e7f\u4e0a\u9762\uff0c\u800c\u589e\u5e7f\u7684\u5b9e\u8d28\u662f\u5728\u627e\u5230\u4e00\u6761\u8def\u5f84\u7684\u6700\u5c0f\u8fb9\u6743 $v$ \uff0c $ans += v$ \uff0c\u7136\u540e\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u5168\u90e8\u51cf\u53bb $v$ \uff0c\u63a5\u7740\u8fdb\u884c\u91cd\u6807\u53f7\u3002\n\n\u8fd9\u6837\u66b4\u529b\u505a\u662f $O(n)$ \u7684\uff0c\u6d6a\u8d39\u4e86\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u60f3\u60f3\u6709\u6ca1\u6709\u80fd\u591f\u5feb\u901f\u7ef4\u62a4\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\n\n\u6709\uff01LCT\uff01\n\n\u6211\u4eec\u4ece\u6c47\u70b9\u4ee5\u5916\u6240\u6709\u70b9\u53d6\u51fa\u4e00\u6761\u5141\u8bb8\u5f27\u5efa\u6210\u4e00\u9897\u6811\uff08\u8fd9\u6837\u505a\u663e\u7136\u4f1a\u5efa\u6210\u6811\uff09\uff0c\u7136\u540e\u6211\u4eec\u7684\u64cd\u4f5c\u5c31\u53d8\u6210\u4e86\uff1a\n\n1\u3001\u627e\u5230\u6e90\u70b9 $s$ \u5230\u6c47\u70b9 $t$ \u7684\u94fe\u4e0a\u7684\u6700\u5c0f\u503c $v$ \uff0c $ans+=v$ \u3002\n\n2\u3001\u6e90\u70b9 $s$ \u5230\u6c47\u70b9 $t$ \u7684\u94fe\u4e0a\u7684\u6240\u6709\u8fb9\u8fb9\u6743 $-= v$ \u3002\n\n3\u3001\u5220\u9664\uff08cut\u6389\uff09\u6240\u6709\u94fe\u4e0a\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\n\n4\u3001\u5bf9\u4e8e\u6240\u6709\u201c\u88ab\u5220\u8fb9\u7684\u70b9\u201d\u627e\u5230\u4e0b\u4e00\u6761\u5141\u8bb8\u5f27link\u4e0a\u4e86\uff08\u8fd9\u6837\u64cd\u4f5c\u5b8c\u663e\u7136\u663e\u7136\u8fd8\u4f1a\u662f\u6811\uff09\u3002\n\n5\u3001\u82e5\u6709\u70b9\u627e\u4e0d\u5230\u201c\u5141\u8bb8\u5f27\u201d\uff0c\u5219\u91cd\u6807\u53f7\uff0ccut\u6389\u6240\u6709\u6307\u5411\u5b83\u7684\u8fb9\u5e76\u6267\u884c\u6b65\u9aa44\u3002\n\n\uff08\u4e8b\u5b9e\u4e0a3\u30014\u30015\u662f\u540c\u65f6\u6267\u884c\u7684\uff09\n\n6\u3001\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u627e\u4e0d\u5230\u201c\u5141\u8bb8\u5f27\u201d\uff0c\u76f4\u63a5\u5220\u9664\u8fd9\u4e2a\u7684\u5e76cut\u6389\u6240\u6709\u6307\u5411\u5b83\u7684\u8fb9\uff0c\u7136\u540e\u6267\u884c\u6b65\u9aa44\u3002\n\n7\u3001\u5f53\u56fe\u51fa\u73b0\u65ad\u5c42\u65f6\uff0c\u7ec8\u6b62\u64cd\u4f5c\u3002\n\n\u6839\u636e\u6211\u5728\u4e0a\u9762ISAP\u90e8\u5206\u7684\u8bc1\u660e\uff0clink\u548ccut\u7684\u6b21\u6570\u90fd\u662f $O(nm)$ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(nmlogn)$ \u7684\u3002\uff08\u7136\u800cLCT\u7684\u5e38\u6570\u554a\u3002\u3002\u3002\uff09\n\n##### \u5173\u4e8e\u53cd\u5411\u8fb9\u7684\u5904\u7406\uff1a\n\u663e\u7136\u5730\uff0c\u4e00\u6761\u8fb9\u548c\u5b83\u7684\u53cd\u5411\u8fb9\u4e0d\u53ef\u80fd\u540c\u65f6\u4e3a\u201c\u5141\u8bb8\u5f27\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728cut\u6389\u4e00\u6761\u8fb9\u7684\u65f6\u5019\u518d\u5904\u7406\u53cd\u5411\u8fb9\u5c31\u597d\u4e86\u3002\n### \u4ee3\u7801\uff1a\n\uff08\u6682\u65e0\uff0c\u53ef\u80fd\u5f97\u7b49\u633a\u4e45\u624d\u4f1a\u6765\u586b\u8fd9\u4e2a\u5751\u7684\u5427\u3002\u3002\u3002\uff09",
        "postTime": 1547963510,
        "uid": 22751,
        "name": "Lagoon",
        "ccfLevel": 0,
        "title": "\u9884\u6d41\u63a8\u8fdb\u7684\u51e0\u79cd\u7b97\u6cd5"
    },
    {
        "content": "## Part1-Improved Dinic\n\nID\uff08Improved Dinic) \u7b97\u6cd5\u662f\u4e00\u79cd\u6c42\u6700\u5927\u6d41\u7684\u9ad8\u6548\u7b97\u6cd5\uff0c\u5728\u968f\u673a\u56fe\u4e0a\u590d\u6742\u5ea6\u4e3a $O(km)$\uff0c\u5176\u4e2d $k$ \u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u5e38\u6570\uff0c\u4e00\u822c\u5728 $10$ \u5de6\u53f3\u3002\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u52a0\u8fb9\u79bb\u7ebf\uff0c\u590d\u6742\u5ea6\u4e0a\u9650\u672a\u77e5\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0a\u9650\u662f $O(kn^2m)$\uff0c\u4f46\u5361\u5230 $O(nm)$ \u90fd\u4e0d\u5bb9\u6613\u505a\u5230\uff09\u3002\n\nID \u7b97\u6cd5\u539f\u7406\u5c31\u662f\uff0c\u5bf9 Dinic \u7b97\u6cd5\u8fdb\u884c\u5f88\u591a\u4f18\u5316\uff0c\u6700\u540e\u4e0d\u4ec5\u4ee3\u7801\u8f83\u77ed\uff0c\u6548\u7387\u4e5f\u5f88\u9ad8\uff0c\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5373\u4f7f\u662f\u5c0f\u89c4\u6a21\u6570\u636e\uff0c\u4ed6\u4e5f\u80fd\u8dd1\u5f97\u6bd4\u4e00\u822c\u7b97\u6cd5\u5feb\u3002\n\n\u5177\u4f53\u4f18\u5316\u5982\u4e0b\uff1a\n\n1. \u5f53\u524d\u5f27\uff08\u5141\u8bb8\u5f27\uff09\u4f18\u5316\uff1b\n2. \u5206\u6bb5\u52a0\u8fb9\u4f18\u5316\uff1b\n3. \u5148\u6b63\u540e\u53cd\uff08\u8d2a\u5fc3\u521d\u59cb\u6d41\uff09\u4f18\u5316\uff1b\n4. gap \u4f18\u5316\u3002\n\n\u5f53\u524d\u5f27\uff08\u5141\u8bb8\u5f27\uff09\u4f18\u5316\u5927\u5bb6\u90fd\u61c2\uff0c\u5206\u6bb5\u52a0\u8fb9\u4f18\u5316\u662f\u4e3a\u4e86\u9632\u6b62\u8fb9\u6743\u5dee\u5f02\u8fc7\u5927\uff0c\u56e0\u4e3a Dinic \u7b97\u6cd5\u53ea\u6709\u5728\u8fb9\u6743\u5dee\u5f02\u5927\u65f6\u4f1a\u8dd1\u5f97\u8f83\u6162\u3002\n\n\u8d2a\u5fc3\u521d\u59cb\u6d41\u662f\u91c7\u7528\u4e86\u4e8c\u5206\u56fe\u589e\u5e7f\u8def\u7b97\u6cd5\u7684\u8d2a\u5fc3\u521d\u59cb\u5339\u914d\u601d\u60f3\uff0c\u5148\u4e0d\u8fde\u53cd\u8fb9\u662f\u4e3a\u4e86\u4e0d\u7136\u53cd\u8fb9\u5f71\u54cd\u521d\u59cb\u6548\u7387\uff0cgap \u4f18\u5316\u53ef\u4ee5\u53c2\u7167 ISAP\uff0c[AC \u8bb0\u5f55](https://uoj.ac/submission/590295)\u3002\n\n## Part2-LCT-Dinic\n\u8fd9\u662f\u4e00\u4e2a\u6700\u574f\u590d\u6742\u5ea6\u4e3a $O(nm\\log n)$ \u7684\u6700\u5927\u6d41\u7b97\u6cd5\u3002\n\n\u628a ID \u5361\u6162\u5f88\u7b80\u5355\uff0c$k$ \u53ef\u4ee5\u88ab\u5361\u5230 $\\frac n3$ \u5de6\u53f3\uff0c\u867d\u7136\u901a\u8fc7\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4\u7ef0\u7ef0\u6709\u4f59\u3002\n\n\u6211\u4eec\u9700\u8981\u5bf9 Dinic \u7684\u589e\u5e7f\u8fc7\u7a0b\u8fdb\u884c\u7814\u7a76\uff0c\u8003\u8651\u5176\u4e4b\u6240\u4ee5\u5355\u6b21\u589e\u5e7f\u6700\u574f\u4e3a $O(nm)$ \u662f\u56e0\u4e3a\u6bcf\u4e00\u6761\u589e\u5e7f\u8def\u6700\u591a\u6709 $n$ \u4e2a\u70b9\uff0c\u7531\u4e8e\u53ef\u80fd\u6bcf\u4e00\u6761\u8def\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8fb9\u6ee1\u6d41\uff0c\u6240\u4ee5\u6700\u591a\u4f1a\u589e\u5e7f $m$ \u6b21\u3002\n\n\u53d1\u73b0\u4e00\u6761\u8fb9\u5728\u4e00\u6761\u589e\u5e7f\u8def\u4e0a\u5982\u679c\u6ca1\u6709\u6ee1\u6d41\uff0c\u5c31\u8fd8\u4f1a\u7ee7\u7eed\u626b\u5230\uff0c\u8fd9\u6837\u5bf9\u6548\u7387\u7684\u5f71\u54cd\u6781\u5927\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u8fde\u8fb9\uff0c\u65ad\uff08\u96f6\uff09\u8fb9\uff0c\u94fe\u51cf\uff08\u5f97\u5230\u7684\u6d41\u91cf\uff09\uff0c\u4f7f\u7528\u53ef\u7231\u7684 LCT \u5341\u5206\u5408\u9002\uff0c\u4e8e\u662f\u5c31\u8fd9\u6837\u6109\u5feb\u5730\u51b3\u5b9a\u5566\uff01\n\n\u7531\u4e8e\u5355\u6b21\u589e\u5e7f\u6bcf\u4e00\u6761\u8fb9\u6700\u591a\u53ea\u4f1a\u52a0\u5165\u4e00\u6b21\uff0c\u51cf\u5c11\u4e00\u6b21\uff0c\u6bcf\u4e00\u6b21\u52a0\u5165\u51cf\u5c11\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5e73\u644a $O(\\log n)$ \u7684\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a $O(nm\\log n)$\u3002\n\n\u52a0\u4e0a ID \u7684\u4f18\u5316\u4e09\uff08\u8d2a\u5fc3\u521d\u59cb\u6d41\uff09\u5c31\u53ef\u4ee5\u901a\u8fc7 luogu \u6570\u636e\u4e86\uff0c\u5e76\u4e14\u901f\u5ea6\u6bd4 ID \u5feb\u4e00\u500d\u3002\n\n\u4f46\u662f\uff0c\u5728 UOJ \u4e0a\u4f1a [TLE](https://uoj.ac/submission/585700)\u3002\n\n## Part3-\u603b\u7ed3\n\u5176\u5b9e HLPP \u7684\u4f18\u52bf\u5c40\u9650\u4e8e\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\uff0c\u518d\u7a20\u5bc6\u70b9\u5e38\u6570\u6ca1\u6709 MPM \u5c0f\uff0c\u518d\u7a00\u758f\u70b9\u5c31\u4e0d\u5982 LCT-Dinic\u3002\n\n\u4ee5\u4e0a ID \u7684\u4ee3\u7801\u80fd\u901a\u8fc7 Luogu\u3001LOJ\u3001UOJ \u7684\u6570\u636e\uff0c\u4f46 LCT-Dinic \u5373\u4f7f\u5206\u6bb5\u8fde\u8fb9\u4e5f\u901a\u4e0d\u8fc7 UOJ \u7684\u7b2c\u4e09\u5341\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u800c\u8be5\u70b9 ID \u5374\u80fd\u5728 $1ms$ \u5185\u901a\u8fc7\uff0c\u6240\u4ee5\u7279\u6b8a\u6784\u56fe\u80fd\u5361 LCT-Dinic\uff0c\u6bd5\u7adf LCT \u5e38\u6570\u5927\uff0c\u4e14\u6bcf\u6b21\u90fd\u6709 $\\log$\uff0c\u5e76\u4e14\u5206\u6bb5\u8fde\u8fb9\u65f6\u7b54\u6848\u53d8\u5f97\u98de\u5feb\uff0c\u6839\u672c\u6ca1\u6709\u4e00\u6761\u4e00\u6761 $\\log$ \u589e\u5e7f\u7684\u65f6\u95f4\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u8fd8\u6ca1\u89c1\u8fc7\u6709\u4eba\u5728\u5efa\u6a21\u9898\u4e0a\u5361 Dinic\uff0c\u8fd9\u5c31\u5f53\u6574\u6d3b\u56fe\u4e00\u4e50\u4e86\u3002",
        "postTime": 1636429872,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u6700\u5927\u6d41\u52a0\u5f3a\u7248\uff0c\u4ece ID \u7b97\u6cd5\u5230 LCT"
    },
    {
        "content": "\u5176\u5b9e\u7c7b\u4f3c\u7684\u601d\u8def\u5df2\u7ecf\u6709\u5927\u4f6c\u63d0\u8fc7\u4e86\uff0c\u6211\u5728\u6b64\u518d\u8d58\u8ff0\u4e00\u7ffb\u7684\u539f\u56e0\u662f\u6211\u4e3b\u8981\u60f3\u8bb2\u4e00\u4e9b\u7b97\u6cd5\u7684\u7406\u89e3\u5411\u95ee\u9898\u3002\n\n\u6734\u7d20\u7684$HLPP$\u662f\u57fa\u4e8e$Gap + Heap$\u7684\uff0c\u662f\u4e00\u4e2a\u590d\u6742\u5ea6\u8f83\u4e3a\u4f18\u79c0\u3001\u4f46\u662f\u6709\u4e0d\u591f\u4f18\u79c0\u7684\u7b97\u6cd5\uff0c\u8be6\u60c5\u53ef\u4ee5\u89c1[$Link$](http://www.orchidany.cf/2019/01/11/HLPP)\u3002\n\n\u6211\u4eec\u76f4\u63a5\u4e0a\u4f18\u5316\n\n\u6211\u4eec\u9996\u5148\u601d\u8003\u601d\u8003\u666e\u901a\u7684HLPP\u5230\u5e95\u4f1a\u6162\u5728\u54ea\u91cc\uff1a\n\n* $STL$\u652f\u6301\u7684$heap$\uff08\u6bd4\u5982\u4f18\u5148\u961f\u5217\uff09\u5b9e\u5728\u662f\u592a\u592a\u592a\u2026\u592a\u6162\u4e86\uff01\n\n* \u6bcf\u6b21$Gap$\u4f18\u5316\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f**\u7d27\u786e**\u7684$\\Theta(n)$\u3002\u7684\u8fd9\u663e\u7136\u4e0d\u5408\u7b97\uff0c\u56e0\u4e3a\u5047\u8bbe\u6211\u5f53\u524d\u7684$\\bold{gap}$\uff08\u65ad\u5c42\uff09\u6b63\u597d\u4f4d\u4e8e\u5012\u6570\u7b2c\u4e00\u9ad8\u7684\u70b9\u548c\u5012\u6570\u7b2c\u4e8c\u9ad8\u7684\u70b9\uff0c\u90a3\u4e48\u4e5f\u5c31\u76f8\u5f53\u4e8e\u6211\u5355\u6b21\u4f1a**\u6d6a\u8d39$\\bold{\\Theta(n)}$\u7684\u65f6\u95f4**\u3002\n\n\u4e8b\u5b9e\u4e0a\u2026\u666e\u901a\u7684$HLPP$\u4ee3\u7801\u5e76\u4e0d\u957f\uff0c\u4e3b\u8981\u95ee\u9898\u5c31\u662f\u8fd9\u4e24\u4e2a\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u5982\u679c\u4e0d\u7528\u5806\u7684\u8bdd\u600e\u4e48\u505a\u5462\uff1f\n\n\u5443\u2026\u4e0d\u7528\u5806\u7684\u610f\u601d\u5e76\u4e0d\u662f\u6211\u4eec\u4e0d\u4ece\u9ad8\u5ea6\u6700\u5927\u7684\u70b9\u5f00\u59cb\u63a8\u9001\u3002\u8fd9\u4e2a\u5730\u65b9\u9700\u8981\u4e00\u4e2a$idea$\u2014\u2014\u5728$HLPP$\u4e2d\uff0c**\u9ad8\u5ea6\u51fd\u6570$\\bold{H(x)}$\u548c\u70b9\u6570\u96c6\u5927\u5c0f$\\bold{N(x)}$\u662f\u5e7f\u4e49\u540c\u9636\u7684\u3002** \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u9ad8\u5ea6\u5165\u624b\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u539f\u6765\u662f\u901a\u8fc7\u8282\u70b9\u7f16\u53f7\u8bbf\u95ee\u8282\u70b9\u4ee5\u53ca\u5176\u9ad8\u5ea6\uff0c\u73b0\u5728\u6211\u4eec\u5982\u679c\u4ece\u9ad8\u5ea6\u5165\u624b\uff0c\u518d\u53bb\u8bbf\u95ee\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u5230$\\bold{O(n)}$\u800c\u4e0d\u662f$\\bold{\\rm{O(nlogn)}}$ \u3002 \u90a3\u4e48\u7531\u4e8e\u540c\u4e00\u9ad8\u5ea6\u7684\u8282\u70b9\u6216\u8bb8\u6709\u5f88\u591a\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a$vector$\u3002\u5728\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u7528$vector$\u800c\u4e0d\u7528\u4e8c\u7ef4\u6570\u7ec4\u5efa\u7acb\u4e8c\u7ef4\u5173\u7cfb\u7684\u539f\u56e0\uff0c\u4e3b\u8981\u662f\u6211\u4eec\u521d\u59cb\u5316\u9ebb\u70e6\u5f97\u5f88\uff0c\u5982\u679c\u5957\u7528$memset$\u6216\u8005$fill$\u7684\u8bdd\uff0c\u5e38\u6570\u4e4b\u5927\u53ef\u60f3\u800c\u77e5\u3002\n\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u95ee\u9898\u5c31\u987a\u7406\u6210\u7ae0\u5730\u89e3\u51b3\u4e86\u3002\u4f46\u8fd9\u4e2a\u5730\u65b9\u8fd8\u6709\u4e00\u4e2a\u4f18\u5316\uff0c\u5c31\u662f\u867d\u7136$vector$\u548c$list$\u90fd\u662f\u7ebf\u6027\u5bb9\u5668\uff0c\u4f46\u662f$list$\u7684\u672c\u8d28\u662f\u53cc\u5411\u94fe\u8868\uff0c\u9891\u7e41\u5904\u7406\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u65f6\u4f1a\u5177\u6709\u66f4\u4f18\u79c0\u7684\u8868\u73b0\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u539f\u6765\u7684$Gap$\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528$list$\u505a\uff0c\u4ee5\u56fe\u66f4\u5c0f\u7684\u5e38\u6570\u3002\u90a3\u4e48\u8fd9\u65f6\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u867d\u7136\u672c\u8d28\u4e0a\u5220\u9664\u662f\u5bb9\u6613\u7684\uff0c\u4f46\u662f\u4f60\u600e\u4e48\u77e5\u9053\u8981\u5220\u540c\u4e00\u9ad8\u5ea6\u4e0b\u7684\u54ea\u4e2a\u5143\u7d20(=@__@=)\uff1f\u5c31\u7b97\u4f60\u77e5\u9053\uff0c$list$\u4e5f\u4e0d\u77e5\u9053\u554a2333\n\nhhh\u4e0d\u76ae\u4e86\uff0c\u5176\u5b9e\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b\u4f4d\u7f6e\u5c31\u597d\uff0c\u5373\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u5728$list$\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5355\u72ec\u5f00\u4e00\u4e2a$Iterator$\u7c7b\u578b\u7684$vector$\u8bb0\u5f55\u5373\u53ef\u3002\n\n\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u83b7\u5f97\u4e86$10$\u500d$+$\u7684\u5e38\u6570\u4f18\u52bfqwq\uff0c\u6492\u82b1\u82b1\u2026\n\n\u54e6\u5bf9\uff0c\u8fd8\u6709\u51e0\u70b9\u6211debug\u7684\u65f6\u5019\u88ab\u5751\u6b7b\u7684\u70b9\uff1a\n\n* \u90a3\u4e2a$Iterator$\u7c7b\u578b\u7684$vector$\u5bf9\u8c61\u662f\u70b9\u7684\u7f16\u53f7\u4e0d\u662f\u9ad8\u5ea6\uff01\n* \u6ce8\u610f\u4f60\u7684\u4e0b\u6807\uff01\u4e0b\u6807\uff01\u518d\u8bf4\u4e00\u904d\uff0c\u4e0b\u6807\uff01\u56e0\u4e3aSTL\u81ea\u5e26\u5de6\u95ed\u53f3\u5f00\u7684\u6027\u8d28~~wrnm~~\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u662f$[1,n]$\u9009\u624b\uff0c\u6ce8\u610f\u4f60\u7684$assign$\u51fd\u6570\uff01\n\n###  $\\color{red}{C}\\color{cyan}{o}\\color{gold}{d}\\color{green}{e}\u00b72$  (\u6211\u89c9\u5f97\u5199\u7684\u5f88\u96be\u770b\u4f46\u662f\u6709\u6ce8\u91caqaq)\uff1a\n\n```cpp\n//writter:Orchidany(pks)\n#include <bits/stdc++.h>\n#pragma GCC target(\"avx\")\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")//sb\u6bd2\u7624\u4f18\u5316\n\n#define MAXN 10030\n#define min my_min\n#define BG begin()\n#define gc getchar\n#define rr register \n#define Iter iterator\n#define INF 2147483647\n#define rep(i, a, x) for(i = a ; i <= x ; ++ i)\n\nusing namespace std ;\ntypedef list<int> List ; int step;\n\nstruct Edge{\n    int to, f, next ;\n    Edge(int to,int f,int next):to(to),f(f),next(next){}//\u6ca1\u6709\u4eba\u53d1\u73b0\u6b63\u4e0b\u65b9\u8fd9\u53e5\u6ce8\u91ca\u524d\u534a\u53e5\u548c\u540e\u534a\u53e5\u90fd\u662f\u4e09\u4e2a\u97f3\u8282\u7684\u5417qaq\n} ; vector <int> q, H, Extra, Set[MAXN], cnt ; List Gap[MAXN] ;//list\uff0c\u5c31\u662f\u5feb\uff08\n//q:\u961f\u5217\uff0cH:\u9ad8\u5ea6\uff0cExtra\uff1a\u6bcf\u4e2a\u70b9\u7684\u8d85\u989d\u6d41\uff0cSet:\u2026\u5c31\u662f\u90a3\u4e2a\u7ecf\u5178\u7248HLPP\u91cc\u7684\u5806\uff0c\u9ad8\u5ea6\u505a\u7b2c\u4e00\u7ef4\nint Ans, N, M, S, T, max_H, now_H ; vector <Edge> E[MAXN] ; /*vector\u5b58\u8fb9\uff08\u636e\u8bf4\u4f1a\u5feb\uff09*/vector<List::iterator> Era_pos ; //\u8f85\u52a9\u5b9a\u4f4d+\u5220\u9664\n\ninline void eggs() { ;}//for free~\ninline int my_min(int a, int b){return a & ((a - b) >> 31) | b & ( ~ (a - b) >> 31) ;}//\u9ed1\u79d1\u6280\ninline void Add(int f, int v, int u){ E[u].push_back(Edge(v, f, E[v].size())), E[v].push_back(Edge(u, 0, E[u].size() - 1)) ; }\ninline int qr(){ rr int k = 0 ; char c = gc() ; while (!isdigit(c)) c = gc() ;while (isdigit(c)) k = (k << 1) + (k << 3) + c - 48, c = gc() ; return k ; }\n\ninline void Init_label(){//\u7b49\u4ef7\u4e8e\u4e00\u5f00\u59cb\u7684\u90a3\u4e2aBFS\uff0c\u53ea\u6267\u884c\u4e00\u6b21\n    rr int i, h = 0, t = 0 ;q.clear(), q.resize(N) ; \n    H.assign(N + 1, N + 1) ; H[T] = 0 ; q[t ++] = T ;//\u4eceT\uff08\u9ad8\u5ea6\u5c0f\u7684\uff09\u5411\u524d\u6807\u53f7\n    while (h < t){//\u961f\u5217\u2026\u2026BFS\u2026\u2026\u771f\u719f\u6089\u554a\u2026\u2026\u55dd\u2026\u2026\n        rr int now = q[h] ; ++ h ;\n        for (vector <Edge> :: Iter k = E[now].begin() ; k != E[now].end() ; ++ k)\n            if (H[k->to] == N + 1 && E[k->to][k->next].f) H[k->to] = H[now] + 1, ++ cnt[H[k->to]], q[t ++] = k->to ;\n    }\n    rep(i, 0, N + 1) Set[i].clear(), Gap[i].clear() ;//\u8fd8\u662f\u6e05\u7a7a\u4e00\u4e0b\u6bd4\u8f83\u597d\u5427\n    rep(i, 0, N) \n        if (H[i]  <N + 1)  \n            Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i), //\u7591\u4f3cinsert\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6307\u9488qaq\n            (Extra[i]>0) ? Set[H[i]].push_back(i) : eggs() ;//\u8fd9\u4e2a\u5f69\u86cb\uff08eggs\uff09\u662f\u56e0\u4e3a\uff0c\u4e09\u76ee\u8fd0\u7b97\u7b26\":\"\u4e24\u8fb9\u7c7b\u578b\u9700\u8981\u5f62\u540c\u2026\n    max_H = now_H = H[q[-- t]] ; //\u66f4\u65b0\uff0cBFS\u7684\u6027\u8d28\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e00\u5b9a\u9ad8\u5ea6\u6700\u5927\uff08\u9664\u4e86\u6e90\u70b9\uff09\n}\ninline void Push(int x, Edge &e){//\u5355\u72ec\u5199\u51fa\u6765\u7684push\u51fd\u6570\uff0c\u597d\u50cf\u5f88\u65b9\u4fbf\uff1f\n    rr int now_flow = min(Extra[x], e.f) ;\n    Extra[x] -= now_flow, e.f -= now_flow, Extra[e.to] += now_flow, E[e.to][e.next].f += now_flow ;\n    if (Extra[e.to] > 0 && Extra[e.to] <= now_flow) Set[H[e.to]].push_back(e.to) ;  // push it into \"heap\"\n}\ninline void _Push(int x){\n    rr int i, x_h = N, t = H[x] ; \n    for (vector <Edge> :: Iter k = E[x].BG ; k != E[x].end() ; ++ k)\n        if (k->f > 0)//\u5982\u679c\u53ef\u4ee5\u6d41\n            if (H[k->to] == H[x] - 1) { Push(x, *k) ; if (!Extra[x]) return ;} else x_h = min(x_h, H[k->to] + 1) ;\n    if (cnt[H[x]] <= 1){//\u5982\u679c\u51fa\u73b0\u65ad\u5c42\u4e86\n        for(i = t ; i <= max_H ; Gap[i].clear(), ++ i)//\u8fd9\u4e2agap\u7684for\u80af\u5b9a\u6bd4O(n)\u4f18\u79c0\n            for(List::Iter k = Gap[i].BG ; k != Gap[i].end() ; ++ k) cnt[H[*k]] --, H[*k] = N ; \n        max_H = t - 1 ; /*\u65ad\u5c42\u4ee5\u4e0a\u7684\u9ad8\u5ea6\u90fd\u6ca1\u7528\u4e86*/return ;\n    }\n    -- cnt[t], Era_pos[x] = Gap[t].erase(Era_pos[x]) ; H[x] = x_h ; if (x_h == N) return ; //\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c\uff0c\u4e3a\u5f53\u524d\u70b9\u5220\u9664\u539f\u6765\u7684\u9ad8\u5ea6\n    ++ cnt[x_h], Era_pos[x] = Gap[x_h].insert(Gap[x_h].begin(), x), max_H = max(now_H = x_h, max_H), Set[x_h].push_back(x) ;//\u589e\u6dfb\u65b0\u7684\u9ad8\u5ea6\n}\ninline int HLPP(){\n    rr int i, now ; H.assign(N, 0) ; H[S] = N ; Era_pos.resize(N)  ;\n    rep(i, 0, N - 1) if (i != S) Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i) ; \n    cnt.assign(N, 0), cnt[0] = N - 1 ; Extra.assign(N, 0), Extra[S] = INF, Extra[T] =- INF ;\n    rep(i, 0, E[S].size() - 1) Push(S, E[S][i]) ;  //\u4e0b\u9762\u6e90\u70b9\u8981\u5355\u72ec\u62ff\u51fa\u6765\u63a8\u9001\uff0c\u56e0\u4e3a\u6e90\u70b9\u63a8\u9001\u65f6\u9ad8\u5ea6\u5dee\u4e0d\u9700\u8981=1.\n    Init_label() ; //\u521d\u59cb\u5316\uff08BFS\uff09\n    while (now_H >= 0) //\u6b63\u5f0f\u5f00\u59cbHLPP\uff08\u6cea\u76ee\uff09\n        if (Set[now_H].empty()) now_H -- ; //\u9ad8\u5ea6\u9012\u51cf\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5806\u7684\u6548\u679c\n        else now = Set[now_H].back(), Set[now_H].pop_back(), _Push(now) ;\n    return Extra[T] + INF ;\n}\nint main(){\n    N = qr(),; rr int i ;//\u4e0b\u9762\u7684++N\u662f\u4e3a\u4e86\u65e5\u540e\u597d\u64cd\u4f5cqaq\n    rep(i, 1, M) Add(qr(), qr(), qr()) ; ++ N, Ans = HLPP() ; cout << Ans << endl ; return 0 ; \n}\n```\n\n\u4e0b\u9762\u662f\u4e2a$fread$\u5361\u5e38\u7248\u672c$qaq$\n\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC target(\"avx\")\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n\n#define MAXN 1202\n#define min my_min\n#define BG begin()\n#define rr register\n#define swap my_swap \n#define Iter iterator\n#define INF 2147483647\n#define rep(i, a, x) for(i = a ; i <= x ; ++ i)\n\nusing namespace std ;\ntypedef list<int> List ; int step;\nconst int ch_top=4e7+3;\nchar ch[ch_top],*now_r=ch-1,*now_w=ch-1;\n\ninline int read(){\n    while(*++now_r<'0');\n    register int x=*now_r-'0';\n    while(*++now_r>='0')x=x*10+*now_r-'0';\n    return x;\n}\ninline void write(int x){\n    static char st[20];static int top;\n    while(st[++top]='0'+x%10,x/=10);\n    while(*++now_w=st[top],--top);\n    *++now_w='\\n';\n}\n\nstruct Edge{\n    int to, f, next ;\n    Edge(int to,int f,int next):to(to),f(f),next(next){}\n} ; vector <int> q, H, Extra, Set[MAXN], cnt ; List Gap[MAXN] ;\nint Ans, N, M, S, T, max_H, now_H ; vector <Edge> E[MAXN] ; vector<List::iterator> Era_pos ; \n\ninline void eggs() { ;}//for free~\ninline int my_min(int a, int b){return a & ((a - b) >> 31) | b & ( ~ (a - b) >> 31) ;}\ninline void Add(int f, int v, int u){ E[u].push_back(Edge(v, f, E[v].size())), E[v].push_back(Edge(u, 0, E[u].size() - 1)) ; }\n\ninline void Init_label(){\n    rr int i, h = 0, t = 0 ;q.clear(), q.resize(N) ; \n    rr int qaq = N + 1 ; H.assign(qaq, qaq) ; H[T] = 0 ; q[t ++] = T ;\n    while (h < t){\n        rr int now = q[h], qwq = H[now] + 1 ; ++ h ; \n        for (vector <Edge> :: Iter k = E[now].begin() ; k != E[now].end() ; ++ k)\n            if (H[k->to] == qaq && E[k->to][k->next].f) H[k->to] = qwq, ++ cnt[H[k->to]], q[t ++] = k->to ;\n    }\n    rep(i, 0, N - 1) Set[i].clear(), Gap[i].clear() ;\n    rep(i, 0, N - 1) if (H[i] < N)  Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i), (Extra[i] > 0) ? Set[H[i]].push_back(i) : eggs() ;\n    max_H = now_H = H[q[-- t]] ; \n}\ninline void Push(int x, Edge &e){\n    rr int now_flow = min(Extra[x], e.f) ;\n    Extra[x] -= now_flow, e.f -= now_flow, Extra[e.to] += now_flow, E[e.to][e.next].f += now_flow ;\n    if (Extra[e.to] > 0 && Extra[e.to] <= now_flow) Set[H[e.to]].push_back(e.to) ;  // push it into heap\n}\ninline void _Push(int x){\n    rr int i, x_h = N, t = H[x] ; \n    for (vector <Edge> :: Iter k = E[x].BG ; k != E[x].end() ; ++ k)\n        if (k->f > 0)\n            if (H[k->to] == H[x] - 1) { Push(x, *k) ; if (!Extra[x]) return ;} else x_h = min(x_h, H[k->to] + 1) ;\n    if (cnt[H[x]] <= 1){\n        for(i = t ; i <= max_H ; Gap[i].clear(), ++ i)\n            for(List::Iter k = Gap[i].BG ; k != Gap[i].end() ; ++ k) cnt[H[*k]] --, H[*k] = N ; max_H = t - 1 ; return ;\n    }\n    -- cnt[t], Era_pos[x] = Gap[t].erase(Era_pos[x]) ; H[x] = x_h ; if (x_h == N) return ; \n    ++ cnt[x_h], Era_pos[x] = Gap[x_h].insert(Gap[x_h].begin(), x), max_H = max(now_H = x_h, max_H), Set[x_h].push_back(x) ;\n}\nint HLPP(){\n    rr int i, now ; H.assign(N, 0) ; H[S] = N ; cnt.assign(N, 0) ; Era_pos.resize(N) ;\n    rep(i, 0, N - 1) if (i != S) Era_pos[i] = Gap[H[i]].insert(Gap[H[i]].BG, i) ; cnt[0] = N - 1 ;\n    Extra.assign(N, 0), Extra[S] = INF, Extra[T] = -INF ; rep(i, 0, E[S].size() - 1) Push(S, E[S][i]) ;  Init_label() ; \n    while (now_H >= 0) if (Set[now_H].empty()) now_H -- ; else now = Set[now_H].back(), Set[now_H].pop_back(), _Push(now) ;return Extra[T] + INF ;\n}\nint main(){\n    fread(ch,1,ch_top,stdin); N = read(), M = read(), S = read(), T = read() ; rr int i ;\n    rep(i, 1, M) Add(read(), read(), read()) ; ++ N, Ans = HLPP() ; write(Ans) ; fwrite(ch,1,now_w-ch,stdout) ;\n}\n\n```\n\n\n## $\\bold{\\mathfrak{writter:Orchidany(pks)}}$\n\n",
        "postTime": 1550085682,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4722 \u3010\u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb\u3011"
    },
    {
        "content": "\u8fd9\u7bc7\u9898\u89e3\u7684\u4ee3\u7801\u76ee\u524d\u662f\u8fd9\u9898\u6240\u6709ac\u4ee3\u7801\u91cc\u6700\u77ed\u7684\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u6b63\u786e\uff0c\u4ec5\u4ec5\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u79cd\u65b0\u505a\u6cd5\u3002\n\n\u6211\u4eec\u5e73\u5e38\u7f51\u7edc\u6d41\u95ee\u9898\u4e2d\u7684\u6700\u5927\u6d41\u901a\u5e38\u7528dinic\u89e3\u51b3\uff0c\u4f46\u662f\u5230\u4e86\u8fd9\u9898dinic\u53ea\u670916\u5206\uff0c\u597d\u50cf\u53ea\u80fd\u901a\u8fc7\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u3002\n\n\u6211\u4eec\u6709\u4e9b\u7384\u5b66\u4f18\u5316\uff0c\u53ef\u4ee5\u4f7fdinic\u8dd1\u7684\u98de\u5feb\u3002\n\n\u4f18\u53161\uff1a\u6211\u4eec\u8003\u8651\u8fb9\u6743\u975e\u5e38\u5927\uff0c\u4f46\u662f\u6709\u79cd\u4f18\u5316\u662f\u6211\u4eec\u628a\u8fb9\u6743\u6309\u71672\u8fdb\u5236\u4e2d\u7684\u4f4d\u6570\u5206\u6bb5\uff0c\u7136\u540e\u4e00\u6bb5\u5185\u7684\u5355\u72ec\u8dd1\u4e00\u6b21dinic\uff0c\u6700\u540e\u628a\u589e\u5e7f\u7684\u7d2f\u52a0\u3002\n\n\u4f18\u53162\uff1a\u6211\u4eec\u5148\u628a\u539f\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u505a\u5b8c\u4e0a\u8ff0\u7684\u5206\u6bb5\u64cd\u4f5c\u540e\uff0c\u518d\u628a\u53cd\u5411\u8fb9\u52a0\u5230\u56fe\u4e2d\uff0c\u518d\u505a\u4e00\u6b21\u4e0a\u8ff0\u5206\u6bb5\u64cd\u4f5c\u3002\n\n\u7136\u540e\u4ee5\u4e0a\u4e24\u4e2a\u5e94\u8be5\u662f\u6709\u70b9\u7406\u8bba\u4f9d\u636e\u7684\u4f18\u5316\uff0c\u6211\u4eec\u52a0\u5165\u540e\uff0c\u4f46\u662f\u53d1\u73b0\u597d\u50cf\u8fd8\u662f\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\uff0c\u5269\u4e0b\u7684\u6211\u4eec\u5c31\u53ea\u80fd\u7528\u4e00\u4e9b~~\u7279\u522b\u7384\u5b66~~\u4f18\u5316\n\n\u6211\u4eec\u8003\u8651\u8fd9\u9898n\u7684\u6570\u636e\u8303\u56f4\u8f83\u5927\uff0c\u6211\u4eec\u5728memset\uff0cmemcpy\u4ee5\u53cabfs\u5224\u65ad\u5c31\u82b1\u4e86\u8f83\u5927\u65f6\u95f4\uff0c\u6211\u4eec\u8003\u8651\u628a\u6bb5\u6570\u51cf\u5c11\uff0c\u7136\u540e\u628a\u6bb5\u5185\u7684\u5185\u5bb9\u589e\u52a0\u70b9\uff0c\u5176\u5b9e\u4e0d\u4f1a\u6709\u592a\u5927\u5f71\u54cd\uff0c\u5927\u81f4\u6bd4\u539f\u6765\u5feb\u4e00\u500d\uff0c\u8fd9\u91cc\u6211\u4eec\u4e8c\u8fdb\u523630\u4f4d\uff0c\u6211\u4eec\u5206\u5927\u69825~6\u6bb5\u662f\u6700\u4f18\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u7136\u540e\u4ee3\u7801\u6bd4\u9884\u6d41\u63a8\u8fdb\u77ed\u597d\u591a\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int N=1205,M=3e5+5,Inf=2147483647;\nstruct Graph{int u,v,f;}g[M];\nstruct Edge{int to,f,nxt;}e[M];\nint n,m,s,t,fst[N],nf[N],tote,lev[N],q[N],hd,tl,ans;\nvoid adde(int u,int v,int f){tote+=2;e[tote]=(Edge){v,f,fst[u]};fst[u]=tote;}\nvoid addnew(int u,int v){tote+=2;e[tote].to=v;e[tote].nxt=fst[u];fst[u]=tote;}\nbool bfs(){\n\tmemset(lev,-1,sizeof(lev));\n\tlev[s]=0;q[hd=tl=1]=s;\n\twhile(hd<=tl){\n\t\tint u=q[hd++];\n\t\tfor(int i=fst[u],v;~i;i=e[i].nxt)if(e[i].f>0&lev[v=e[i].to]<0)\n\t\t\tlev[v]=lev[u]+1,q[++tl]=v;\n\t}\n\treturn lev[t]>=0;\n}\nint dfs(int u,int lim){\n\tif(u==t)return lim;\n\tint res=0;\n\tfor(int i=nf[u],v,f;~i;i=e[i].nxt){\n\t\tv=e[i].to;f=e[i].f;\n\t\tif(lev[v]==lev[u]+1&&f){\n\t\t\tint tmp=dfs(v,min(lim,f));\n\t\t\te[i].f-=tmp;e[i^1].f+=tmp;lim-=tmp;res+=tmp;\n\t\t\tif(!lim){nf[u]=i;return res;}\n\t\t}\n\t}\n\tnf[u]=-1;return res;\n}\nbool cmp(Graph a,Graph b){return a.f>b.f;}\nint main(){\n\tmemset(fst,-1,sizeof(fst));\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%d\",&g[i].u,&g[i].v,&g[i].f);\n\tsort(g+1,g+m+1,cmp);\n\tfor(int t=0;t<2;t++){\n\t\tif(t)tote=1;\n\t\tfor(int k=5,p=1;~k;k--){\n\t\t\twhile(p<=m&&g[p].f>=(1<<(k*6))){\n\t\t\t\tif(!t)adde(g[p].u,g[p].v,g[p].f);else addnew(g[p].v,g[p].u);\n\t\t\t\tp++;\n\t\t\t}\n\t\t\twhile(bfs())memcpy(nf,fst,sizeof(nf)),ans+=dfs(s,Inf);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1601212963,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4722 \u3010\u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb\u3011"
    },
    {
        "content": "\u672c\u9898\u89e3\u4fa7\u91cd\u89e3\u91ca $\\text{HLPP}$ \u7ec6\u8282\u90e8\u5206\uff0c\u800c\u5bf9\u4e8e $\\text{HLPP}$ \u7684\u8be6\u7ec6\u601d\u8def\u7b49\u4e0d\u4f1a\u8fc7\u591a\u9610\u8ff0\u3002\n\n## UPDATE\n\n**2022.10.06**\uff1a\u611f\u8c22@[MiniLong](https://www.luogu.com.cn/user/573341)\u5927\u4f6c\u7684\u63d0\u70b9\u4e0e\u5b66\u672f\u652f\u6301\uff08[hack \u6570\u636e](https://www.luogu.com.cn/paste/3z20vpny)\uff09\uff0c\u5bf9 `hlpp()` \u51fd\u6570\u8fdb\u884c\u4e86\u66f4\u6539\u3002\n\n## $\\text{HLPP}$ \u601d\u8def\n\n\u6309\u7167\u4f17\u591a\u5927\u4f6c\u6240\u8bf4\u7684\u90a3\u6837\uff0c$\\text{HLPP}$ \u5c31\u662f\u5c06\u6c34\u6d41\u81ea\u6e90\u70b9\u4e00\u6b65\u4e00\u6b65\u5730\u63a8\u5230\u5176\u4ed6\u4e2d\u8f6c\u70b9\uff0c\u6700\u540e\u63a8\u5411\u6c47\u70b9\uff0c\u6c47\u70b9\u7d2f\u8ba1\u7684\u6d41\u91cf\u5c31\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u3002\n\n\u6ce8\u610f\uff0c\u5728\u6b64\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u56fe\u4e2d\u6240\u6709\u4e2d\u8f6c\u70b9\u6700\u540e\u5b58\u50a8\u7684\u6d41\u91cf\u4e3a 0\u3002\n\n\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u4e3a\u4e86\u9632\u6b62 $\\text{TLE}$\uff0c\u4e5f\u5c31\u662f\u907f\u514d\u4e24\u4e2a\u70b9\u4e92\u76f8\u4e0d\u505c\u5730\u5c06\u6c34\u6d41\u63a8\u6765\u63a8\u53bb\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u50cf\u6211\u4eec\u5728 $\\text{dinic}$ \u7b97\u6cd5\u4e2d\u6240\u505a\u7684\u90a3\u6837\uff0c\u6bcf\u6b21\u4fdd\u8bc1\u662f\u4ece\u5f53\u524d\u5c42\u63a8\u5411\u4e0b\u4e00\u5c42\u3002\u540c\u65f6\uff0c\u4e5f\u8981\u4fdd\u8bc1\u6bcf\u6b21\u4ece\u9ad8\u5ea6\u6700\u9ad8\u7684\u8282\u70b9\u5411\u4f4e\u5904\u8282\u70b9\u63a8\u6d41\uff0c\u8282\u7701\u65f6\u95f4\uff08\u8fd9\u4e5f\u662f\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u539f\u56e0\uff09\u3002\n\n\u90a3\u4e3a\u4ec0\u4e48\u5b83\u4f1a\u6bd4\u5176\u4ed6\u89e3\u51b3\u6700\u5927\u6d41\u95ee\u9898\u7684\u7b97\u6cd5\u5feb\u5462\uff1f\n\n\u9996\u5148\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u7528\u8fd0\u884c\u4e00\u6b21 $\\text{bfs}$\uff0c\u5728\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u521d\u59cb\u4e86\u4e00\u4e2a\u9ad8\u5ea6\u4e4b\u540e\uff0c\u540e\u9762\u5982\u679c\u5b83\u8fd9\u4e2a\u70b9\u50a8\u5b58\u7684\u6d41\u4f20\u4e0d\u51fa\u53bb\u4e86\uff0c\u4e5f\u53ea\u9700\u8981\u9488\u5bf9\u5b83\u5355\u72ec\u66f4\u6539\u5176\u9ad8\u5ea6\u5373\u53ef\u3002\n\n\u5176\u6b21\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u6b65\u4e00\u6b65\u5c06\u6d41\u5411\u4e0b\u63a8\uff0c\u6240\u4ee5\u4e0d\u7528\u591a\u6b21 $\\text{dfs}$ \u53bb\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u89e3\u91ca\n\n### $\\text{bfs}$ \u521d\u59cb\u9ad8\u5ea6\n\n\u76f8\u6bd4\u5148\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u521d\u59cb\u9ad8\u5ea6\u4e3a 0\uff0c\u7528 $\\text{dinic}$ \u4e2d\u7684\u624b\u6bb5\u7ed9\u6bcf\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\u521d\u59cb\u4e3a\u5b83\u8ddd\u79bb\u7ec8\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u660e\u663e\u4f1a\u5927\u5927\u5730\u51cf\u5c11\u540e\u671f\u66f4\u65b0\u5176\u9ad8\u5ea6\u7684\u6b21\u6570\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline bool bfs()\n{\n\trep(i, 1, n) h[i] = inf;\n\th[t] = 0, q.push(t);\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = hd[u], v; i; i = e[i].nxt)\n\t\t\tif(e[i ^ 1].f and h[v = e[i].to] > h[u] + 1)\n\t\t\t\th[v] = h[u] + 1, q.push(v);\n\t}\n\treturn h[s] == inf ? 0 : 1;\n}\n```\n\n1. \u4e3a\u4ec0\u4e48\u662f `if(e[i ^ 1].f)` \u800c\u4e0d\u662f `if(e[i].f)` \u5462\uff1f\n\n\t\u8981\u6ce8\u610f\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u7ec8\u70b9**\u53cd\u5411**\u53bb\u7ed9\u6bcf\u4e2a\u70b9\u521d\u59cb\u9ad8\u5ea6\u7684\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u8d70\u7684\u8fb9\u90fd\u662f\u53cd\u5411\u8fb9\u3002\u800c\u8fd9\u91cc\u662f\u5224\u65ad\u8be5\u4e24\u70b9\u4e4b\u95f4\u6b63\u5411\u8fb9\u7684\u6d41\u91cf\u662f\u5426\u4e3a 0\u3002\n    \n1. \u4e3a\u4ec0\u4e48\u662f `if(h[v] > h[u] + 1)` \u800c\u4e0d\u662f `if(h[v] > h[u] - 1)` \u5462\uff1f\n\n\t\u539f\u56e0\u540c\u4e0a\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8d70\u53cd\u5411\u8fb9\uff0c\u6b64\u65f6 $v$ \u66f4\u9760\u8fd1 $s$\uff0c\u9ad8\u5ea6\u66f4\u9ad8\u3002\n    \n### $\\text{HLPP}$ \u51fd\u6570\n\n```cpp\ninline int hlpp()\n{\n\tif(!bfs()) return 0;\n\th[s] = n;\n\tfor(int i = hd[s], v, d; i; i = e[i].nxt)\n\t{\n\t\tif(d = e[i].f)\n\t\t{\n\t\t\tp[v = e[i].to] += d, p[s] -= d;\n\t\t\te[i].f -= d, e[i ^ 1].f += d;\n\t\t\tif(v != s and v != t and !inq[v]) pq.push(v), inq[v] = 1;\n\t\t}\n\t}\n\trep(i, 1, n) if(h[i] != inf) gap[h[i]] += 1;\n\twhile(!pq.empty())\n\t{\n\t\tint u = pq.top();\n\t\tpq.pop(), inq[u] = 0, push(u);\n\t\tif(!p[u]) continue;\n\t\tif(h[u] != inf and !--gap[h[u]])\n\t\t{\n\t\t\trep(i, 1, n) \n\t\t\t\tif(i != s and i != t and h[i] > h[u] and h[i] < n + 1) \n\t\t\t\t\th[i] = n + 1;\n\t\t}\n\t\tupdt(u), gap[h[u]] += 1, pq.push(u), inq[u] = 1;\n\t}\n\treturn p[t];\n}\n```\n\n\u6ce8\uff1a$\\text{push}$ \u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06\u5f53\u524d\u70b9\u5b58\u50a8\u7684\u6d41\u5c3d\u53ef\u80fd\u5730\u63a8\u5230\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\u3002\n\n1. `if(!bfs()) return 0;` \u539f\u56e0\uff1f\n\n\t\u56de\u770b $\\text{bfs}$ \u51fd\u6570\u4ee3\u7801\uff0c\u82e5\u6700\u540e $s$ \u6ca1\u6709\u9ad8\u5ea6\uff0c\u5c31\u610f\u5473\u7740\u65e0\u6cd5\u4ece $t$ \u8d70\u5230 $s$\uff0c\u90a3\u4e48\u81ea\u7136\u4e5f\u5c31\u4e0d\u5b58\u5728\u6700\u5927\u6d41\u4e00\u8bf4\u4e86\u3002\u4e5f\u56e0\u6b64\u8981\u628a `h[s] = n;` \u653e\u5728\u5224\u65ad\u7684\u540e\u9762\u4e86\u3002\n    \n2. `h[s] = n;`\n\n\t\u56e0\u4e3a $s$ \u662f\u6e90\u70b9\uff0c\u5bf9\u4e8e\u5b83\u6765\u8bf4\u6709\u65e0\u5c3d\u7684\u6d41\uff0c\u76ee\u524d\u6682\u65f6\u4e0d\u5b58\u5728\u6709\u6d41\u8981\u56de\u5230 $s$\uff0c\u53ea\u6709\u81ea $s$ \u5c06\u6d41\u5f80\u4e0b\u63a8\u5230\u5176\u4ed6\u70b9\uff0c\u6240\u4ee5\u76ee\u524d\u5b83\u7684\u9ad8\u5ea6\u8981\u662f\u6700\u9ad8\u7684\u3002\n    \n3. \u4e3a\u4ec0\u4e48\u5728 $\\text{HLPP}$ \u4e2d\u8fd8\u9700\u8981 $gap[]$ \u6570\u7ec4\uff1f\n\n\t\u8fd9\u4e2a\u6570\u7ec4\u7528\u6765\u7edf\u8ba1\u6bcf\u4e00\u5c42\u5f53\u524d\u8282\u70b9\u6570\u91cf\u3002\u6b64\u65f6\u5b83\u7684\u4f5c\u7528\u662f\u5224\u65ad\u5f53\u6b64\u5c42\u4e3a\u7a7a\u65f6\u7684\u60c5\u51b5\u3002\u82e5\u6b64\u5c42\u4e3a\u7a7a\uff0c\u610f\u5473\u7740\u90a3\u4e9b\u5728\u8fd9\u5c42\u4ee5\u4e0a\u7684\u8282\u70b9\u65e0\u6cd5\u5c06\u6d41\u9001\u5230\u7ec8\u70b9\uff0c\u6240\u4ee5\u8981\u5c06\u8fd9\u4e9b\u6d41\u9001\u56de\u6e90\u70b9\u3002\n    \n    \u56e0\u4e3a\u6d41\u662f\u81ea\u9ad8\u5f80\u4f4e\u624d\u80fd\u6d41\uff0c\u6240\u4ee5\u8981\u5c06\u8fd9\u4e9b\u70b9\u7684\u9ad8\u5ea6\u8bbe\u5728\u6e90\u70b9\u9ad8\u5ea6\u4e4b\u4e0a\u3002\n    \n    \u76f8\u5bf9\u5e94\u7684\u5c31\u662f\u540e\u9762\u7684\u8fd9\u6bb5\u4ee3\u7801\u4e86\uff1a\n    \n    ```cpp\n\t\tif(!--gap[h[u]])\n\t\t{\n\t\t\trep(i, 1, n) \n\t\t\t\tif(i != s and i != t and h[i] > h[u] and h[i] < n + 1) \n\t\t\t\t\th[i] = n + 1;\n\t\t}\n\t```\n\n4. `updt(u), gap[h[u]] += 1, pq.push(u), inq[u] = 1;`\n\n\t\u5f53\u8282\u70b9 $u$ \u5b58\u50a8\u7684\u6d41\u5728\u5c3d\u53ef\u80fd\u63a8\u7ed9\u4e0b\u4e00\u5c42\u8282\u70b9\u4e4b\u540e\u8fd8\u6709\u6d41\u5269\u65f6\uff0c\u8981\u5411\u5c06\u6d41\u9001\u5b8c\uff0c\u53ea\u6709\u66f4\u6539\u8282\u70b9\u9ad8\u5ea6\uff0c\u624d\u53ef\u80fd\u5c06\u6240\u6709\u6d41\u63a8\u51fa\u53bb\u3002\u6240\u4ee5\u5c31\u6709\u4e86\u4ee5\u4e0a\u7684\u64cd\u4f5c\u3002\n    \n5. \u4e3a\u4ec0\u4e48\u662f `if(h[u] != inf and !--gap[h[u]])` \u800c\u4e0d\u662f `if(!--gap[h[u]])`\uff1f\n\t\n    \u56e0\u4e3a $h_u$ \u6709\u53ef\u80fd\u6ca1\u88ab\u66f4\u65b0\u5230\uff0c\u8fd8\u662f $inf$\u3002\n\n### $\\text{push}$ \u51fd\u6570\n\n```cpp\ninline void push(int nw)\n{\n\tfor(int i = hd[nw], v; i; i = e[i].nxt)\n\t{\n\t\tif(!p[nw]) return;\n\t\tif(h[v = e[i].to] + 1 != h[nw] or !e[i].f) continue;\n\t\tint d = min(p[nw], e[i].f);\n\t\tp[nw] -= d, p[v] += d, e[i].f -= d, e[i ^ 1].f += d;\n\t\tif(v != s and v != t and !inq[v]) \n\t\t\tpq.push(v), inq[v] = 1;\n\t}\n}\n```\n\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u5f53\u524d\u8282\u70b9\u7684\u6d41\u5c3d\u53ef\u80fd\u5730\u63a8\u5411\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\u3002\n\n1. `if(v != s and v != t and !inq[v]) pq.push(v), inq[v] = 1;`\n\n\t\u6ce8\u610f\u4f18\u5148\u961f\u5217\u91cc\uff0c\u5b58\u653e\u7684\u662f\u5b58\u50a8\u4e86\u82e5\u5e72\u6d41\u7684**\u4e2d\u8f6c\u70b9**\uff0c\u6240\u4ee5\u6bcf\u6b21\u63a8\u6d41\u4e4b\u540e\u90fd\u8981\u8ba9\u63a8\u5411\u7684\u90a3\u4e2a\u8282\u70b9\u5728\u6709\u9650\u961f\u5217\u91cc\u3002\n    \n### $\\text{updt}$ \u51fd\u6570\n\n```cpp\ninline void updt(int u)\n{\n\th[u] = inf;\n\tfor(int i = hd[u], v; i; i = e[i].nxt)\n\t{\n\t\tif(e[i].f and h[v = e[i].to] + 1 < h[u])\n\t\t\th[u] = h[v] + 1;\n\t}\n}\n```\n\u5b83\u7684\u4f5c\u7528\u662f\u66f4\u6539\u5f53\u524d\u8282\u70b9\u7684\u9ad8\u5ea6\u3002\n\n1. \u4e3a\u4ec0\u4e48\u8981\u53d6\u6700\u5c0f\u7684\u9ad8\u5ea6\uff1f\n\n\t\u6211\u4eec\u4e4b\u6240\u4ee5\u4f1a\u66f4\u6539\u5b83\u7684\u9ad8\u5ea6\uff0c\u662f\u56e0\u4e3a\u5b83\u6709\u5269\u4f59\u7684\u4e00\u4e9b\u6d41\u65e0\u6cd5\u63a8\u51fa\u53bb\u4e86\u3002\u6240\u4ee5\u5c06\u5b83\u7684\u9ad8\u5ea6\u8bbe\u4e3a\u6700\u4f4e\u53ef\u80fd\u7684\u9ad8\u5ea6\uff0c\u4ee5**\u4fdd\u8bc1**\u5b83\u8fd8\u80fd\u5c06\u5269\u4f59\u6d41\u63a8\u51fa\u53bb\u3002\n    \n## AC Code\n\n\u6574\u4f53\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing std::min;\nusing std::vector;\nusing std::queue;\nusing std::priority_queue;\n\n#define maxn 2005\n#define maxm 200005\n#define inf 2147483647\n#define rep(i, a, b) for(register int i = a; i <= b; ++i)\nint n, m, s, t;\nint cnt = 1, hd[maxn];\nstruct node{\n\tint to, nxt, f;\n}e[maxm << 1];\nint p[maxn], h[maxn], gap[maxm];\nbool inq[maxn];\nqueue <int> q;\nstruct cmp{\n\tinline bool operator () (int a, int b) const//\u91cd\u5199\u4eff\u51fd\u6570 \n\t{\n\t\treturn h[a] < h[b];\n\t}\n};\npriority_queue <int, vector<int>, cmp> pq;\nint u, v, w;\n\ninline int read()\n{\n\tint x = 1, s = 0;\n\tchar ch = getchar();\n\twhile(ch < '0' or ch > '9') {if(ch == '-') x = -1; ch = getchar();}\n\twhile(ch >= '0' and ch <= '9') s = s * 10 + ch - '0', ch = getchar();\n\treturn x * s;\n}\n\ninline void add(int u, int v, int w)\n{\n\te[++cnt] = (node){v, hd[u], w};\n\thd[u] = cnt;\n\te[++cnt] = (node){u, hd[v], 0};\n\thd[v] = cnt;\n}\n\ninline bool bfs()\n{\n\trep(i, 1, n) h[i] = inf;\n\th[t] = 0, q.push(t);\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = hd[u], v; i; i = e[i].nxt)\n\t\t\tif(e[i ^ 1].f and h[v = e[i].to] > h[u] + 1)\n\t\t\t\th[v] = h[u] + 1, q.push(v);\n\t}\n\treturn h[s] == inf ? 0 : 1;\n}\n\ninline void push(int nw)\n{\n\tfor(int i = hd[nw], v; i; i = e[i].nxt)\n\t{\n\t\tif(!p[nw]) return;\n\t\tif(h[v = e[i].to] + 1 != h[nw] or !e[i].f) continue;\n\t\tint d = min(p[nw], e[i].f);\n\t\tp[nw] -= d, p[v] += d, e[i].f -= d, e[i ^ 1].f += d;\n\t\tif(v != s and v != t and !inq[v]) \n\t\t\tpq.push(v), inq[v] = 1;\n\t}\n}\n\ninline void updt(int u)\n{\n\th[u] = inf;\n\tfor(int i = hd[u], v; i; i = e[i].nxt)\n\t{\n\t\tif(e[i].f and h[v = e[i].to] + 1 < h[u])\n\t\t\th[u] = h[v] + 1;\n\t}\n}\n\ninline int hlpp()\n{\n\tif(!bfs()) return 0;\n\th[s] = n;\n\tfor(int i = hd[s], v, d; i; i = e[i].nxt)\n\t{\n\t\tif(d = e[i].f)\n\t\t{\n\t\t\tp[v = e[i].to] += d, p[s] -= d;\n\t\t\te[i].f -= d, e[i ^ 1].f += d;\n\t\t\tif(v != s and v != t and !inq[v]) pq.push(v), inq[v] = 1;\n\t\t}\n\t}\n\trep(i, 1, n) if(h[i] != inf) gap[h[i]] += 1;\n\twhile(!pq.empty())\n\t{\n\t\tint u = pq.top();\n\t\tpq.pop(), inq[u] = 0, push(u);\n\t\tif(!p[u]) continue;\n\t\tif(h[u] != inf and !--gap[h[u]])\n\t\t{\n\t\t\trep(i, 1, n) \n\t\t\t\tif(i != s and i != t and h[i] > h[u] and h[i] < n + 1) \n\t\t\t\t\th[i] = n + 1;\n\t\t}\n\t\tupdt(u), gap[h[u]] += 1, pq.push(u), inq[u] = 1;\n\t}\n\treturn p[t];\n}\n\nint main()\n{\n\tn = read(), m = read(), s = read(), t = read();\n\trep(i, 1, m)\n\t\tu = read(), v = read(), w = read(), add(u, v, w);\n\tprintf(\"%d\\n\", hlpp());\n\treturn 0;\n}\n```\n\n\n------------\n\u611f\u8c22\u9605\u8bfb\u3002\n\n\u8f9b\u82e6\u7ba1\u7406\u5458\u5ba1\u6838\uff0c\u82e5\u6709\u95ee\u9898\u70e6\u8bf7\u6307\u51fa\u3002",
        "postTime": 1645242503,
        "uid": 469672,
        "name": "\u4f0d\u53c1\u58f9",
        "ccfLevel": 7,
        "title": "P4722 \u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u5982\u4f55\u628a\u9884\u6d41\u63a8\u8fdb\u4ece5.2s\u4f18\u5316\u5230300ms\u3002\n\n\u5b9e\u73b0\u4e86\u4e00\u53d1\u88f8\u7684\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u7684\u9884\u6d41\u63a8\u8fdb\uff0c\u8dd1\u4e865.2s\u3002\u6253\u5f00\u63d0\u4ea4\u8bb0\u5f55\u6392\u884c\u699c\uff0c\u699c\u4e00@tagyx \u8dd1\u5f97\u98de\u5feb\uff0c\u53ea\u6709150ms\uff0c\u6bd4\u6211\u5feb\u4e86\u4e09\u5341\u591a\u500d\u3002\u4e8e\u662f\u70b9\u5f00\u4ed6\u7684[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/40938924)\u5b66\u4e60\u4e86\u4e00\u4e0b\uff0c\u6210\u529f\u4f18\u5316\u5230300ms\u3002\uff08\u611f\u8c22\u8fd9\u4f4d\u5927\u4f6c\u52a0\u5165\u4ee3\u7801\u516c\u5f00\u8ba1\u5212\uff09\n\n\u4f18\u5316\u4e3b\u8981\u6709\u56db\u90e8\u5206\uff1a\n\n## 1. bfs&globalRelabel\n\n\u8fd9\u4e00\u70b9\u5176\u4ed6\u9898\u89e3\u63d0\u5230\u4e86\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5728\u521d\u59cb\u5316\u65f6\u628a\u6e90\u70b9\u4e4b\u5916\u7684\u6240\u6709\u7ed3\u70b9\u9ad8\u5ea6\u8bbe\u4e3a0\uff0c\u662f\u6d6a\u8d39\u65f6\u95f4\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u901a\u8fc7\u4e00\u6b21\u4ece\u6c47\u70b9t\u7684bfs\uff0c\u9884\u5148\u8bbe\u5b9a\u597d\u7ed3\u70b9\u7684\u9ad8\u5ea6\u3002\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u539f\u6765\u53ef\u4ee5\u5230\u8fbe\u6c47\u70b9t\u7684\u8def\u5f84\uff0c\u91cd\u8bbe\u9ad8\u5ea6\u540e\u4ecd\u7136\u53ef\u4ee5\u5230\u8fbe\u3002\n\n\u7136\u540e\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u8fd9\u4e2abfs\u4e0d\u4ec5\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u8fdb\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u7b97\u6cd5\u8fd0\u884c\u65f6\uff08\u5bf9\u6b8b\u4f59\u7f51\u7edc\uff09\u8fdb\u884c\uff0c\u4ecd\u7136\u4e0d\u6539\u53d8\u6b63\u786e\u6027\u3002\u7531\u6b64\u6211\u4eec\u53c8\u6709\u4e86\u4e00\u4e2a\u542f\u53d1\u5f0f\u7684\u60f3\u6cd5\uff1a\u6bcf\u8fc7\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u4ece\u6c47\u70b9t\u8fdb\u884c\u4e00\u6b21bfs\uff0c\u5bf9\u5168\u5c40\u91cd\u65b0\u8bbe\u5b9a\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f```globalRelabel```\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a```gloablRelabel```\u7684\u9891\u7387\u5982\u4f55\u8bbe\u5b9a\u5462\uff1fbfs\u7684\u590d\u6742\u5ea6\u662f$O(m)$\u7684\uff0c\u800cHLPP\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f$O(n^2\\sqrt m)$\uff0c\u56e0\u6b64\u7a0b\u5e8f\u8fdb\u884c$O(n^2/\\sqrt m)$\u6b21```globalRelabel```\u4e0d\u6539\u53d8\u590d\u6742\u5ea6\u3002\u4e0d\u59a8\u8003\u8651\u7a20\u5bc6\u56fe$m=O(n^2)$\uff0c\u5219```globalRelabel```\u53ef\u4ee5\u8fdb\u884c$O(n)$\u6b21\u3002\n\n\u7b97\u6cd5\u5bfc\u8bba\u4e2d\u6709\u8bc1\u660e\uff0c\u539f\u7b97\u6cd5```Relabel```\u64cd\u4f5c\uff08\u91cd\u65b0\u8bbe\u5b9a\u9ad8\u5ea6\uff09\u7684\u6b21\u6570\u4e0d\u8d85\u8fc7$O(n^2)$\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf$O(n)$\u6b21Relabel\u5c31\u8fdb\u884c\u4e00\u6b21```globalRelabel```\u53ef\u4ee5\u6ee1\u8db3\u590d\u6742\u5ea6\u3002\u8003\u8651\u5230\u7b97\u6cd5\u7684\u5e38\u6570\uff0c\u53ef\u4ee5\u6bcf$4n$\u6b21\u6216\u8005\u66f4\u591a\u6b21```Relabel```\u8fdb\u884c\u4e00\u6b21```globalRelabel```\u3002\u6ce8\u610f\u4e0d\u4ec5\u8981\u91cd\u65b0\u8bbe\u7f6e\u9ad8\u5ea6\uff0c\u5f88\u591a\u76f8\u5173\u6570\u7ec4\u4e5f\u8981```memset```\u91cd\u65b0\u641e\uff08\u6240\u4ee5\u6709\u4e00\u5b9a\u5e38\u6570\uff09\u3002\n\n## 2. \u4e0d\u7ef4\u62a4\u9ad8\u5ea6\u8d85\u8fc7n\u7684\u7ed3\u70b9\n\nHLPP\u7b97\u6cd5\u7684\u7ed3\u679c\u662f\u548c\u8c10\u5bf9\u79f0\u7684\uff0c\u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u6e90\u70b9\u7684\u6ea2\u51fa\u6d41\u4e3a-ans\uff0c\u6c47\u70b9\u7684\u6ea2\u51fa\u6d41\u4e3aans\uff0c\u5176\u4ed6\u7ed3\u70b9\u5747\u65e0\u6ea2\u51fa\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u67d0\u4e00\u7ed3\u70b9\u7684\u9ad8\u5ea6\u8d85\u8fc7$n$\uff0c\u90a3\u4e48\u5b83\u7684\u6ea2\u51fa\u6d41\u5c06\u518d\u4e5f\u6ca1\u6709\u63a8\u9001\u5230\u6c47\u70b9$t$\u7684\u673a\u4f1a\u3002\u56e0\u4e3a\u6ea2\u51fa\u6d41\u53ea\u80fd\u63a8\u9001\u5230\u9ad8\u5ea6\u6070\u597d\u6bd4\u5b83\u5c0f\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u9ad8\u5ea6\u4e3a$h_x$\u7684\u7ed3\u70b9\uff0c\u5b83\u7684\u6ea2\u51fa\u6d41\u9700\u8981\u6cbf\u7740\u4e00\u6761\u9ad8\u5ea6\u5206\u522b\u4e3a$h_x, h_x-1, ..., 0$\u7684\u7ed3\u70b9\u6784\u6210\u7684\u8def\u5f84\u63a8\u9001\u5230\u6c47\u70b9$t$\u3002\u5982\u679c$h_x \\geq n$\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u5b58\u5728\u8fd9\u6761\u8def\u5f84\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u8fd9\u4e48\u591a\u7ed3\u70b9\u3002\n\n\u90a3\u4e48\uff0c\u9ad8\u5ea6\u8d85\u8fc7$n$\u7684\u7ed3\u70b9\uff0c\u5b83\u7684\u6ea2\u51fa\u6d41\u53ea\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u56de\u5230\u6e90\u70b9$s$\u3002\u4f46\u6211\u4eec\u53ea\u8981\u5173\u5fc3\u6c47\u70b9$t$\u7684\u6ea2\u51fa\u6d41\u5373\u53ef\u3002\u56e0\u6b64\uff0c\u5f53\u4e00\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6\u8d85\u8fc7$n$\uff0c\u6211\u4eec\u6839\u672c\u5c31\u4e0d\u9700\u8981\u518d\u7ef4\u62a4\u5b83\uff0c\u518d\u53bb\u5bf9\u5b83```push/relabel```\u2014\u2014\u53cd\u6b63\u603b\u6709\u4e00\u5929\u5b83\u7684\u6ea2\u51fa\u6d41\u4f1a\u56de\u5230s\u7684\u3002\u800c\u4e14\uff0c\u5982\u679c\u540c\u65f6\u5e94\u7528```globalRelabel```\u4f18\u5316\uff0c\u8fd9\u4e9b\u7ed3\u70b9\u4e5f\u4e0d\u7528\u53c2\u52a0```globalRelabel```\uff0c\u76f8\u5f53\u4e8e\u88ab\u8e22\u51fa\u4e86\u7b97\u6cd5\u3002\n\n\u8fd9\u4e00\u6b65\u4f18\u5316\u5e94\u8be5\u975e\u5e38\u91cd\u8981\uff0c\u51cf\u5c11\u4e86\u5927\u91cf\u7684\u5de5\u4f5c\u91cf\u3002\u4ee3\u4ef7\u5c31\u662f\u7b97\u6cd5\u7ec8\u6b62\u65f6\uff0c\u4f1a\u6709\u4e00\u4e9b\u7ed3\u70b9\u7684\u6ea2\u51fa\u6d41\u4e0d\u4e3a\u96f6\uff0c\u5b83\u4eec\u662f\u672c\u8be5\u88ab\u63a8\u9001\u56de$s$\u5374\u6ca1\u6709\u63a8\u9001\u7684\u6ea2\u51fa\u6d41\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u4e0d\u80fd\u7528$s$\u5904\u7684\u6ea2\u51fa\u6d41\u8ba1\u7b97\u7b54\u6848\uff0c\u800c\u53ea\u80fd\u7528$t$\u7684\u6ea2\u51fa\u6d41\u3002\n\n## 3. gap\u4f18\u5316\n\n\u5f53\u4e0d\u5b58\u5728\u9ad8\u5ea6\u4e3a$h_0$\u7684\u7ed3\u70b9\u65f6\uff0c\u6240\u6709\u9ad8\u5ea6\u5927\u4e8e$h_0$\u7684\u7ed3\u70b9\uff0c\u5b83\u4eec\u7684\u6ea2\u51fa\u6d41\u90fd\u5c06\u65e0\u6cd5\u63a8\u9001\u5230\u6c47\u70b9\uff0c\u56e0\u6b64\u53ea\u8981\u628a\u5b83\u4eec\u7684\u9ad8\u5ea6\u8bbe\u4e3a$n$\uff0c\u4e0d\u518d\u7ef4\u62a4\u5373\u53ef\u3002\n\n## 4. \u5f53\u524d\u5f27\u4f18\u5316\n\n\u8bb0\u5f55\u5f53\u524d\u5f27\uff0c\u5728\u8fdb\u884c\u591a\u6b21\u4e0d\u9971\u548c\u63a8\u9001\u65f6\u6709\u6548\u3002\u8fd9\u4e2a\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5de6\u8f6cdinic\u3002\n\n## 5. \u4f17\u6240\u5468\u77e5\u56db\u5927\u5929\u738b\u6709\u4e94\u4e2a\uff08\u820d\u5f03\u4f18\u5148\u961f\u5217\uff09\n\n\u7528\u94fe\u8868\u7ef4\u62a4\u6ea2\u51fa\u7ed3\u70b9\u3002\u6bd4\u5982\uff0c```overList[h]```\u8868\u793a\u9ad8\u5ea6\u4e3ah\u7684\u6240\u6709\u6ea2\u51fa\u7ed3\u70b9\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u5927\u6982\u5c31\u662f\u8fd9\u6837\u3002\u7136\u540e\u4ece```maxHeight```\u5f00\u59cb\u904d\u5386```overList```\u6570\u7ec4\u5373\u53ef\u3002\n\n\u8fd9\u4e00\u70b9\u6211\u4e0d\u80fd\u786e\u5b9a\u662f\u4e0d\u662f\u4f18\u5316\u3002\u867d\u8bf4\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u9ad8\u5ea6\u6700\u5927\u7684\u7ed3\u70b9\u6709\u4e00\u4e2alog\uff0c\u4f46\u5982\u679c\u6539\u7528\u94fe\u8868\u7ef4\u62a4\u4e5f\u4e0d\u4e00\u5b9a\u662fO(1)\u7684\uff0c\u56e0\u4e3a\u6709\u4e00\u4e9b```overList```\u53ef\u80fd\u4e3a\u7a7a\u3002\u6216\u8bb8\u7528\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u53ef\u4ee5\u644a\u8fd8\u5230O(1)\uff1f\n\n\u4e0d\u8fc7\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u524d\u9762\u90a3\u4e9b\u4f18\u5316\uff0c\u4e5f\u53ea\u67092\u662f\u660e\u786e\u7684\u4f18\u5316\uff0c1\u548c3\u90fd\u662f\u6709\u70b9\u7384\u5b66\u7684\u3002\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u90fd\u662f\u7384\u5b66\u5bb6\u561b\uff0c\u8dd1\u5f97\u5feb\u5c31\u884c\uff08\u70b9\u5934\uff09\n\n\u53e6\u9644\u4e00\u4efd\u4ee3\u7801\uff1a\n\n``` cpp\nstruct HLPP {\n    /*\n     * set ANS_TYPE to int or long long\n     * nodes numbered by 1, 2, ..., n\n     */\n    typedef long long ANS_TYPE; // or int\n    struct Edge {\n        int to;\n        ANS_TYPE c;\n        int rev;\n        Edge(int to, ANS_TYPE c, int rev): to(to), c(c), rev(rev) {}\n    };\n    \n    int n, m, s, t;\n    int maxh, maxgaph, workcnt;\n    std::vector<std::vector<Edge>> vec; // graph\n    std::vector<ANS_TYPE> ov; // overflow of nodes\n    std::vector<int> h;  // height of nodes\n    std::vector<int> cur; // current arc\n    std::vector<int> ovList, ovNxt;\n    std::vector<int> gap, gapPrv, gapNxt;\n    \n    // n: nodes, m: edges, s: source node, t: sink node\n    HLPP(int n, int m, int s, int t): n(n), m(m), s(s), t(t), maxh(0), maxgaph(0), workcnt(0),\n                                      vec(n+1), ov(n+1), h(n+1), cur(n+1),\n                                      ovList((n+1), -1), ovNxt(n+1, -1),\n                                      gap((n+1), -1), gapPrv(n+1, -1), gapNxt(n+1, -1) {}\n\n    void addEdge(int u, int v, ANS_TYPE c) {\n        vec[u].push_back(Edge(v, c, vec[v].size()));\n        vec[v].push_back(Edge(u, 0, vec[u].size()-1));\n    }\n\n    ANS_TYPE getMaxFlow() {\n        globalRelabel();\n        for(auto &e: vec[s]) if(e.c) { pushFlow(s, e, e.c);  maxh = std::max(maxh, h[e.to]); }\n        for(; maxh >= 0; --maxh) {\n            while(~ovList[maxh]) {\n                int x = ovList[maxh];\n                ovList[maxh] = ovNxt[x];\n                discharge(x);\n                if(workcnt > (n<<2))  globalRelabel();\n            }\n        }\n        return ov[t];\n    }\nprivate:\n    void discharge(int x) {\n        int nh = n, sz = vec[x].size();\n        for(int i = cur[x]; i < sz; ++i) {\n            auto &e = vec[x][i];\n            if(e.c > 0) {\n                if(h[x] == h[e.to]+1) {\n                    pushFlow(x, e, std::min(ov[x], e.c));\n                    if(ov[x] == 0) { cur[x] = i;  return ; }\n                } else nh = std::min(nh, h[e.to]+1);\n            }\n        }\n        for(int i = 0; i < cur[x]; ++i) {\n            auto &e = vec[x][i];\n            if(e.c > 0) { nh = std::min(nh, h[e.to]+1); }\n        }\n        cur[x] = 0;\n        ++workcnt;\n        if(~gapNxt[gap[h[x]]])  setHeight(x, nh);\n        else {\n            int oldh = h[x];\n            for(int i = oldh; i <= maxgaph; ++i) {\n                for(int j = gap[i]; ~j; j = gapNxt[j])  h[j] = n;\n                gap[i] = -1;\n            }\n            maxgaph = oldh-1;\n        }\n    }\n    \n    void globalRelabel() {\n        workcnt = maxh = maxgaph = 0;\n        std::fill(h.begin(), h.end(), n);  h[t] = 0;\n        std::fill(gapPrv.begin(), gapPrv.end(), -1);\n        std::fill(gapNxt.begin(), gapNxt.end(), -1);\n        std::fill(gap.begin(), gap.end(), -1);\n        std::fill(ovList.begin(), ovList.end(), -1);\n        std::fill(ovNxt.begin(), ovNxt.end(), -1);\n        std::fill(cur.begin(), cur.end(), 0);\n        std::queue<int> que;  que.push(t);\n        int x;\n        while(!que.empty()) {\n            x = que.front();  que.pop();\n            for(auto &e: vec[x]) {\n                if(h[e.to] == n && e.to != s && vec[e.to][e.rev].c > 0) {\n                    setHeight(e.to, h[x]+1);\n                    que.push(e.to);\n                }\n            }\n        }\n    }\n\n    void setHeight(int x, int newh) {\n        if(~gapPrv[x]) {\n            if(gapPrv[x] == x) {\n                gapPrv[gapNxt[x]] = gapNxt[x];\n                gap[h[x]] = gapNxt[x];\n            } else {\n                gapNxt[gapPrv[x]] = gapNxt[x];\n                if(~gapNxt[x])  gapPrv[gapNxt[x]] = gapPrv[x];\n            }\n        }\n        if((h[x] = newh) >= n)  return ; // ignore the case of h >= n\n        maxgaph = std::max(maxgaph, h[x]);\n        if(ov[x] > 0) { maxh = std::max(maxh, h[x]);  ovNxt[x] = ovList[h[x]];  ovList[h[x]] = x; }\n        if(~(gapNxt[x] = gap[h[x]]))  gapPrv[gapNxt[x]] = x;\n        gap[h[x]] = gapPrv[x] = x;\n    }\n    \n    void pushFlow(int from, Edge &e, ANS_TYPE flow) {\n        if(!ov[e.to] && e.to != t) {\n            ovNxt[e.to] = ovList[h[e.to]];\n            ovList[h[e.to]] = e.to;\n        }\n        e.c -= flow;\n        vec[e.to][e.rev].c += flow;\n        ov[from] -= flow;\n        ov[e.to] += flow;\n    }\n};\n```",
        "postTime": 1608784536,
        "uid": 48658,
        "name": "silverxz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4722 \u3010\u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb\u3011"
    },
    {
        "content": "\u5f53\u5e74\u8fd8\u662f\u849f\u84bb\u7684\u6211\uff08\u73b0\u5728\u662f\u5946\u84bb\u4e86\uff09\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u53cd\u624b\u4e00\u4e2a ISAP \u5c31\u62cd\u4e86\u4e0a\u53bb\uff0c[\u7ed3\u679c](https://www.luogu.com.cn/record/69368987)\n\n\u4e8e\u662f\u5fcd\u75db\u5b66\u4e86 HLPP......\n\n## \u5148\u6765\u770b\u770b\u6734\u7d20\u9884\u6d41\u63a8\u8fdb\n\n\u5728\u5b66\u4e60\u589e\u5e7f\u8def\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u662f\u5728**\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5bfb\u627e\u4e00\u6761\u6216\u591a\u6761\u6700\u77ed\u7684\u589e\u5e7f\u8def\uff0c\u7136\u540e\u6cbf\u7740\u8fd9\u4e9b\u589e\u5e7f\u8def\u589e\u5e7f**\uff0c\u5f53\u65e0\u6cd5\u627e\u5230\u589e\u5e7f\u8def\u7684\u65f6\u5019\u7ed3\u675f\u7b97\u6cd5\u3002\u5982\u679c\u4f7f\u7528\u589e\u5e7f\u8def\u7b97\u6cd5\u4e2d\u6548\u7387\u8f83\u9ad8\u7684 Dinic \u6216 ISAP \u7b97\u6cd5\uff0c\u6bcf\u6b21\u6700\u574f\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u6700\u591a\u627e $n$ \u6b21\uff0c\u6240\u4ee5\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2m)$ \u7684\uff0c\u800c\u4e14\u65e0\u8bba\u6211\u4eec\u600e\u4e48\u6539\u8fdb\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650\u90fd\u662f\u65e0\u6cd5\u907f\u514d\u7684\u3002\u5bf9\u4e8e\u672c\u9898 $n \\le 1200,m \\le 120000$ \u7684\u6570\u636e\u6765\u770b\uff0c$O(n^2m)$ \u7b97\u6cd5\u663e\u7136\u6b7b\u5f97\u4e0d\u80fd\u518d\u6b7b\u4e86\u3002\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u94c1\u5b9a\u4e0d\u80fd\u7528\u589e\u5e7f\u8def\u7b97\u6cd5\u4e86\uff08\u5982\u679c\u4f7f\u7528 LCT \u6216\u4f38\u7f29\u64cd\u4f5c\u4f18\u5316\u5f53\u6211\u6ca1\u8bf4\uff09\u3002\n\n**\u60f3\u4e00\u60f3\u90a3\u4e2a\u7528\u4e0b\u6c34\u7ba1\u7f51\u7edc\u6bd4\u55bb\u7f51\u7edc\u6d41\u7684\u4f8b\u5b50\uff1f**\n\n\u5982\u679c\u76f4\u63a5\u6a21\u62df\u201c\u6c34\u201d\u7684\u6d41\u52a8\u4f1a\u600e\u4e48\u6837\u5462\uff1f\n\n**\u6211\u4eec\u5148\u5047\u8bbe\u8fd9\u6837\u4e00\u4e2a\u60c5\u666f\uff1a**\n\n\u6e90\u70b9\u6709 $\\infty$ \u4e2a\u5355\u4f4d\u7684\u6c34\uff0c\u7136\u540e\u8fd9\u4e9b\u6c34\u4ece\u6e90\u70b9\u5f00\u59cb\u5411\u5916\u9762\u8513\u5ef6\uff0c\u585e\u6ee1\u4e86\u6e90\u70b9\u5411\u5916\u7684\u6240\u6709\u901a\u9053\uff0c\u7136\u540e\u8fd9\u4e9b\u901a\u9053\u901a\u5411\u7684\u8282\u70b9\u4e5f\u6709\u4e86\u5f88\u591a\u7684\u6c34\uff0c\u8fd9\u4e9b\u6c34\u7ee7\u7eed\u5411\u5916\u8513\u5ef6......\u4e00\u76f4\u5230\u6c47\u70b9\uff0c\u7136\u540e\u6211\u4eec\u7edf\u8ba1\u4e00\u4e0b\u6c47\u70b9\u6709\u591a\u5c11\u5355\u4f4d\u7684\u6c34\uff0c\u6700\u5927\u6d41\u4e0d\u5c31\u6c42\u51fa\u6765\u4e86\u5417\uff1f\n\n\u770b\u8d77\u6765\u5f88\u7f8e\u597d\uff0c\u53ef\u60dc\u5b9e\u8df5\u4e2d\u4f1a\u53d1\u751f\u4e24\u4e2a\u8282\u70b9\u8f6e\u6d41\u76f8\u4e92\u63a8\u6c34\uff0c\u63a8\u5230 TLE \u7684\u60c5\u51b5\u3002\n\n\u4e8e\u662f**\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u52a0\u4e0a\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u90fd\u53ea\u5411\u6bd4\u8be5\u8282\u70b9\u9ad8\u5ea6\u4f4e\u7684\u8282\u70b9\u63a8\u6c34\uff0c\u521a\u5f00\u59cb\u6e90\u70b9\u7684\u9ad8\u5ea6\u4e3a $n$\uff0c\u7136\u540e\u6bcf\u6b21\u63a8\u6d41\u90fd\u7ef4\u62a4\u8fd9\u4e2a\u9ad8\u5ea6\u3002**\n\n\u4e8e\u662f\u5c31\u80fd\u6210\u529f\u8fd0\u884c\u4e86\uff01\n\n\u53ef\u60dc\u8fd9\u6837\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u53d8\u7684 $O(n^2m)$\n\n\u96be\u9053\u5c31\u65e0\u6cd5\u6539\u8fdb\u4e86\u5417\uff1f\n\n\u5148\u4eba\u7684\u667a\u6167\u53c8\u51fa\u73b0\u4e86\uff0c**\u6bcf\u6b21\u4ece\u9ad8\u5ea6\u6700\u9ad8\u7684\u8282\u70b9\u63a8\u6d41\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u6210\u4e3a $O(n^2\\sqrt m)$**\n\n\u53ef\u8fd8\u662f TLE \u600e\u4e48\u529e?\n\n\u90a3\u5c31\u7ee7\u7eed\u4f18\u5316\u554a\uff01\n\n\u7c7b\u4f3c\u4e8e ISAP\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5728**\u521a\u5f00\u59cb\u7684\u65f6\u5019\u4ece\u6c47\u70b9\u5f00\u59cb BFS\uff0c\u5bf9\u9014\u7ecf\u8282\u70b9\u5168\u90e8\u91cd\u6807\u53f7**\uff0c\u901f\u5ea6\u4f1a\u5feb\u5f88\u591a\u3002\n\n\u53ef\u662f\u4f9d\u7136 TLE......\n\n\u4e8e\u662f\u91cd\u5934\u620f\u6765\u4e86\uff01\n\n### gap\u4f18\u5316\n\n\u7c7b\u4f3c\u4e8e ISAP \u7684 gap \u4f18\u5316\uff0cHLPP\u4e5f\u6709\u4e00\u4e2a gap \u4f18\u5316\uff0c\u5f53 0 \u81f3 $n$ \u4e4b\u95f4\u6709\u6df1\u5ea6\u4e0d\u5b58\u5728\u65f6\uff0c\u5c06\u6b64\u6df1\u5ea6\u4ee5\u4e0a\u7684\u7ed3\u70b9\u7684\u6df1\u5ea6\u5168\u90e8\u8bbe\u4e3a $n+1$\uff0c\u597d\u8ba9\u8fd9\u4e9b\u7ed3\u70b9\u7684\u6d41\u63a8\u56de\u5230\u6e90\u70b9\u53bb\u3002\n\n\u679c\u7136\u5feb\u4e86\u8bb8\u591a\u3002\n\n\u53ef\u662f\uff0c[\u96be\u53d7T^T](https://www.luogu.com.cn/record/72929590)\n\n### \u61d2\u60f0 gap \u4f18\u5316\n\n\u6211\u4eec\u53d1\u73b0\u4e0d\u4e00\u5b9a\u8981\u8ba9\u6df1\u5ea6\u5927\u4e8e $n$ \u7684\u7ed3\u70b9\u7684\u6d41\u9000\u56de\u6765\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e9b\u7ed3\u70b9\u6807\u8bb0\u4e3a\u4e0d\u53ef\u5230\u8fbe\uff0c\u7136\u540e\u6bcf\u6b21\u63a8\u6d41\u548c\u66f4\u6539\u9ad8\u5ea6\u90fd\u4e0d\u8003\u8651\u8fd9\u4e9b\u7ed3\u70b9\u3002\n\n[\u61d2\u60f0 gap \u4f18\u5316](https://www.luogu.com.cn/record/72930689)\n\n\u7ec8\u4e8e\u628a\u8fd9\u9053\u6bd2\u7624\u9898 A \u4e86\uff01\n\n### \u63a5\u4e0b\u6765\u662f\u4ee3\u7801\u5b9e\u73b0\u90e8\u5206\n**\u57fa\u7840\u90e8\u5206\uff1a**\n```cpp\n#define inf 1000000000000000\n#define V 200010\n#define E 1000010\ntypedef long long int ll;\nstruct edge {\npublic:\n    int to, next;\n    ll capa;\n};\nint cnt = 0, head[V]; int n, m; edge node[E];\nbool vis[V];\ninline void add(int fir, int nxt, ll w) {\n    node[cnt].to = nxt;\n    node[cnt].capa = w;\n    node[cnt].next = head[fir];\n    head[fir] = cnt; ++cnt;\n}\nint s, t, dep[V], gap[V], cur2[V]; std::queue<int>que; ll sum = 0; ll cur[V];\nbool inque[V];\n```\n$cur$ \u4ee3\u8868\u7ed3\u70b9\u7684\u6d41\u91cf\uff0c$cur2$ \u7528\u4e8e\u5f53\u524d\u5f27\u4f18\u5316\u3002\n\n**BFS \u91cd\u6807\u53f7\uff1a**\n```cpp\ninline bool bfs() {\n    int fro, ito;\n    que.push(t); dep[t] = 0; ++gap[dep[t]];\n    while (!que.empty()) {\n        fro = que.front(); que.pop();\n        for (register int i = head[fro]; i != -1; i = node[i].next) {\n            ito = node[i].to;\n            if (dep[ito] == -1) {\n                dep[ito] = dep[fro] + 1;\n                que.push(ito);\n                ++gap[dep[ito]];\n            }\n        }\n    }\n    return (dep[s] != -1);\n}\n```\n**\u63a8\u6d41\uff1a**\n\n\u5411\u5468\u56f4\u7ed3\u70b9\u62fc\u547d\u704c\u6c34\u3002\n```cpp\ninline void push(int v) {\n    for (int i = cur2[v]; i != -1; i = node[i].next) {\n        cur2[i] = i;\n        if (!cur[v])return;\n        if (dep[v] == dep[node[i].to] + 1 && node[i].capa) {\n            ll ls = std::min(cur[v], node[i].capa);\n            cur[v] -= ls, cur[node[i].to] += ls;\n            node[i].capa -= ls, node[i ^ 1].capa += ls;\n            if (!inque[node[i].to] && node[i].to != s && node[i].to != t && !vis[node[i].to]) {\n                hlpp.push(node[i].to);\n                inque[node[i].to] = true;\n            }\n        }\n    }\n}\n```\n**\u91cd\u6807\u53f7\uff1a**\n\n\u5176\u5b9e\u5c31\u662f\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u9ad8\u5ea6\u6539\u4e3a\u9644\u8fd1\u9ad8\u5ea6\u6700\u4f4e\u7684\u7ed3\u70b9\u7684\u9ad8\u5ea6 + 1\u3002\n```cpp\ninline void relable(int v) {\n    dep[v] = n + 5;\n    for (register int i = head[v]; i != -1; i = node[i].next) {\n        if (node[i].capa && dep[v] > dep[node[i].to])\n            dep[v] = dep[node[i].to];\n    }\n    ++dep[v];\n}\n```\n**\u4e3b\u7a0b\u5e8f\uff1a**\n\n\u6709\u4e2a\u95ee\u9898\uff1a\u600e\u4e48\u624d\u80fd\u53d6\u51fa\u9ad8\u5ea6\u6700\u9ad8\u7684\u7ed3\u70b9\uff1f\n\n\u7528 ```std::priority_queue``` \u7ef4\u62a4\u5373\u53ef\u3002\n\n```cpp\ninline ll HLPP() {\n    cur[s] = inf; initing(); if (!bfs()) return 0;\n    int np; int v; ll w; ll ans = 0; dep[s] = n;\n    for (int i = head[s]; i != -1; i = node[i].next) {\n        v = node[i].to; w = node[i].capa;\n        cur[s] -= w; cur[v] += w;\n        node[i].capa -= w;\n        node[i ^ 1].capa += w;\n        if (v != s && v != t && !vis[v]) { hlpp.push(v); inque[v] = true; }\n    }\n    while (!hlpp.empty()) {\n        memcpy(cur2, head, (n + 1) * sizeof(int));\n        np = hlpp.top(); hlpp.pop();\n        inque[np] = false;\n        push(np);\n        if (cur[np]) {\n            if (--gap[dep[np]] == 0) {\n                for (int i = 1; i <= n; i++)\n                    if (i != s && i != t && dep[i] > dep[np] && dep[i] < n + 1)\n                        dep[i]=n+1, vis[i] = true;\n            }\n            relable(np);\n            ++gap[dep[np]];\n            hlpp.push(np);\n            inque[np] = true;\n        }\n    }\n    return cur[t];\n}\n```\n**AC \u4ee3\u7801\uff1a**\n\n```cpp\n#include <bits/stdc++.h>\n#define inf 1000000000000000\n#define V 200010\n#define E 1000010\ntypedef long long int ll;\nstruct edge {\npublic:\n    int to, next;\n    ll capa;\n};\nint cnt = 0, head[V]; int n, m; edge node[E];\nbool vis[V];\ninline void add(int fir, int nxt, ll w) {\n    node[cnt].to = nxt;\n    node[cnt].capa = w;\n    node[cnt].next = head[fir];\n    head[fir] = cnt; ++cnt;\n}\nint s, t, dep[V], gap[V], cur2[V]; std::queue<int>que; ll sum = 0; ll cur[V];\nbool inque[V];\ninline void initing() { memset(dep, -1, V * sizeof(int)); }\ninline bool bfs() {\n    int fro, ito;\n    que.push(t); dep[t] = 0; ++gap[dep[t]];\n    while (!que.empty()) {\n        fro = que.front(); que.pop();\n        for (register int i = head[fro]; i != -1; i = node[i].next) {\n            ito = node[i].to;\n            if (dep[ito] == -1) {\n                dep[ito] = dep[fro] + 1;\n                que.push(ito);\n                ++gap[dep[ito]];\n            }\n        }\n    }\n    return (dep[s] != -1);\n}\nstruct cmp {\npublic:\n    inline bool operator()(int a, int b) { return dep[a] < dep[b]; }\n};\nstd::priority_queue<int, std::vector<int>, cmp>hlpp;\ninline void push(int v) {\n    for (int i = cur2[v]; i != -1; i = node[i].next) {\n        cur2[i] = i;\n        if (!cur[v])return;\n        if (dep[v] == dep[node[i].to] + 1 && node[i].capa) {\n            ll ls = std::min(cur[v], node[i].capa);\n            cur[v] -= ls, cur[node[i].to] += ls;\n            node[i].capa -= ls, node[i ^ 1].capa += ls;\n            if (!inque[node[i].to] && node[i].to != s && node[i].to != t && !vis[node[i].to]) {\n                hlpp.push(node[i].to);\n                inque[node[i].to] = true;\n            }\n        }\n    }\n}\ninline void relable(int v) {\n    dep[v] = n + 5;\n    for (register int i = head[v]; i != -1; i = node[i].next) {\n        if (node[i].capa && dep[v] > dep[node[i].to])\n            dep[v] = dep[node[i].to];\n    }\n    ++dep[v];\n}\ninline ll HLPP() {\n    cur[s] = inf; initing(); if (!bfs()) return 0;\n    int np; int v; ll w; ll ans = 0; dep[s] = n;\n    for (int i = head[s]; i != -1; i = node[i].next) {\n        v = node[i].to; w = node[i].capa;\n        cur[s] -= w; cur[v] += w;\n        node[i].capa -= w;\n        node[i ^ 1].capa += w;\n        if (v != s && v != t && !vis[v]) { hlpp.push(v); inque[v] = true; }\n    }\n    while (!hlpp.empty()) {\n        memcpy(cur2, head, (n + 1) * sizeof(int));\n        np = hlpp.top(); hlpp.pop();\n        inque[np] = false;\n        push(np);\n        if (cur[np]) {\n            if (--gap[dep[np]] == 0) {\n                for (int i = 1; i <= n; i++)\n                    if (i != s && i != t && dep[i] > dep[np] && dep[i] < n + 1)\n                        dep[i]=n+1, vis[i] = true;\n            }\n            relable(np);\n            ++gap[dep[np]];\n            hlpp.push(np);\n            inque[np] = true;\n        }\n    }\n    return cur[t];\n}\nint main() {\n    std::ios::sync_with_stdio(0);\n    std::cin.tie(); std::cout.tie();\n    memset(head, -1, V * sizeof(int));\n    std::cin >> n >> m >> s >> t;\n    int f, l; ll w;\n    for (register int i = 0; i < m; i++) {\n        std::cin >> f >> l >> w;\n        add(f, l, w);\n        add(l, f, 0);\n    }\n    std::cout << HLPP();\n    return 0;\n}\n```\n\n",
        "postTime": 1648874715,
        "uid": 551861,
        "name": "wql_cai",
        "ccfLevel": 4,
        "title": "P4722 \u9898\u89e3"
    },
    {
        "content": "# \u601d\u8def\n## HLPP \u6c42\u7f51\u7edc\u6700\u5927\u6d41\n### \u6982\u5ff5\n\u5148\u7b80\u5355\u8bf4\u8bf4 HLPP \u8fd9\u4e2a\u795e\u4ed9\u822c\u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 $O(n^2\\sqrt m)$\u3002\n\nHLPP \u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\uff0c\u6211\u4eec\u5c06\u7f51\u7edc\u7406\u89e3\u6210\u7eb5\u6a2a\u4ea4\u7ec7\u7684\u6cb3\u9053\uff0c\u6e90\u70b9\u662f\u6c34\u5e93\uff0c\u6c47\u70b9\u662f\u8fd0\u8f93\u76ee\u6807\uff0c\u5176\u4f59\u7684\u8282\u70b9\u5c31\u662f\u8f6c\u6298\u533a\uff0c\u6709\u5411\u8fb9\u662f\u6cb3\u6d41\u3002\n\n\u90a3\u4e48\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f\u6211\u4eec**\u5141\u8bb8**\u7f51\u7edc\u5728\u975e\u6c47\u70b9\u3001\u6e90\u70b9\u7684\u8282\u70b9\u505c\u7559\uff08\u50a8\u5b58\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u4f1a\u62e5\u6709\u4e00\u4e2a**\u8d85\u989d\u6d41**\uff08\u6709\u7684\u4eba\u4e5f\u79f0\u4e3a\u4f59\u6d41\uff09\uff0c\u6211\u4eec\u7528 $ef_i$ \u8868\u793a\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u6ca1\u6bcf\u4e2a\u8282\u70b9\u90fd\u8981\u60f3\u529e\u6cd5\u5c06\u81ea\u5df1\u7684\u8d85\u989d\u6d41\uff0c\u63a8\u9001\u51fa\u53bb\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u5f97\u6211\u4eec\u7684\u7f51\u7edc\u80fd\u591f\u8fdb\u5165\u6c47\u70b9 $t$\u3002\u6240\u4ee5 $t$ \u6700\u540e\u5269\u4e0b\u7684\u8d85\u989d\u6d41\uff0c**\u5c31\u662f $s$ \u5230 $t$ \u7684\u7f51\u7edc\u6700\u5927\u6d41\u3002**\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u63a8\u9001\u4e0d\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u6211\u4eec\u5f15\u5165\u6bcf\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6 $highh_i$\u3002\u201c\u6c34\u5f80\u4f4e\u5904\u8d70\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5141\u8bb8\u4ece\u9ad8\u5904\u7684\u8282\u70b9\u5c06\u8d85\u989d\u6d41\u63a8\u9001\u7ed9\u8f83\u4f4e\u7684\u70b9\u3002\n### \u6d41\u7a0b\n\u4e86\u89e3\u5b8c\u6982\u5ff5\uff0c\u6211\u4eec\u6765\u8d70\u4e00\u904d\u6d41\u7a0b\u5427\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u4ee5\u9ad8\u5ea6\u4e3a\u4f18\u5148\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u63a8\u9001\u8fc7\u7a0b\u662f\u9700\u8981\u4ece\u9ad8\u5230\u4f4e\u7684\u3002\u539f\u672c\u6bcf\u4e2a\u8282\u70b9\u9ad8\u5ea6\u4e3a $0$,\u4f46\u662f $s$ \u7684\u9ad8\u5ea6\u4e3a\n $n$\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u6e90\u70b9\u80fd\u591f\u5c06\u81ea\u5df1\u7684\u4f59\u6d41\u63a8\u9001\u7ed9\u6240\u6709\u4e0e\u4ed6\u76f8\u63a5\u7684\u8282\u70b9\u3002\u8ba9\u540e\u5c06\u6240\u6709\u7684\u8282\u70b9\u7684\u4f59\u6d41\u8bbe\u4e3a $0$\uff0c\u4f46\u662f $s$ \u7684\u65e0\u9650\u5927\uff0c\u4e0d\u7528\u62c5\u5fc3\u7f51\u7edc\u53d8\u591a\uff0c\u8d70\u4e0d\u5230 $t$ \u7684\u6700\u7ec8\u7684\u9ad8\u5ea6\u5c06\u9ad8\u4e8e $s$ \uff0c\u76f4\u63a5\u6d41\u56de $s$\u3002\n \n \u4e0a\u9762\u662f\u524d\u7f6e\u64cd\u4f5c\uff0c\u4e0b\u9762\u4ecb\u7ecd\u6838\u5fc3\u90e8\u5206\uff1a\n \n\u6211\u4eec\u5f00\u59cb\u5904\u7406\u4f18\u5148\u961f\u5217\u4e2d\u7684\u8282\u70b9 $x$\uff0c\u5bf9\u4ed6\u4eec\u8fdb\u884c\u63a8\u9001\uff0c\u904d\u5386\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u82e5\u53d1\u73b0 $highh_x+1=highh_to$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u53ef\u4ee5\u8fdb\u884c\u63a8\u9001\uff0c\u63a8\u9001\u7684\u6d41\u91cf\u663e\u7136\u4e0d\u80fd\u8d85\u8fc7\u8d85\u989d\u6d41\u4e0e\u8fd9\u6761\u8fb9\u5269\u4e0b\u7684\u5bb9\u91cf\uff0c\u5219\u63a8\u9001\u6d41\u91cf $dist$ \u6709 $dist \\gets \\min(w_i,ef_x)$\u3002\u90a3\u4e48\u5982\u679c\u73b0\u5728\u7684\u5f53\u524d\u8282\u70b9\u8fd8\u6709\u8d85\u989d\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u5c31**\u91cd\u8d34\u6807\u7b7e**\uff0c\u8ba9\u5f53\u524d\u8282\u70b9\u7684\u9ad8\u5ea6\u6bd4\u4ed6\u80fd\u5230\u7684\u6240\u6709\u8282\u70b9\u7684\u6700\u4f4e\u8282\u70b9\u9ad8 $1$\uff0c\u4fdd\u8bc1\u4e0b\u6b21\u4e00\u5b9a\u80fd\u591f\u63a8\u9001\u3002\u8ba9\u540e\u518d\u6b21\u52a0\u5165\u4f18\u5148\u961f\u5217\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u63a8\u9001\u3002\n\n\u6ce8\uff1a\u5df2\u5728\u961f\u5217\u4e2d\u7684\u8282\u70b9\u4e0d\u8981\u91cd\u590d\u5165\u961f\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u4e00\u4e2a $vis$ \u6807\u8bb0\u6570\u7ec4\u3002\n\n### \u4f18\u5316\n\u76ee\u524d\u7684 HLPP \u8fd8\u4e0d\u662f\u7ec8\u6781\u7248\uff0c\u6709\u5f88\u591a\u5730\u65b9\u53ef\u4ee5\u6709\u8bdd\uff1a\n\n\u975e\u6e90\u70b9\u9ad8\u5ea6\u8bbe\u4e3a $0$ \u4f1a\u589e\u52a0\u5f88\u591a\u8fd0\u884c\u6b21\u6570\uff0c\u628a\u9ad8\u5ea6\u8bbe\u4e3a\u5230 $t$ \u7684\u8ddd\u79bb\u660e\u663e\u80fd\u5c11\u8dd1\u5f88\u591a\u3002bfs \u53cd\u5411\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u6211\u4eec\u7684 $gap$ \u6570\u7ec4\u4f18\u5316\u4e86\uff01\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u5b83\u6ca1\u6709\u522b\u7684\u8282\u70b9\u9ad8\uff0c\u5c31\u4e00\u5b9a\u65e0\u6cd5\u4f7f\u5f97\u6d41\u91cf\u5230\u8fbe $t$\u3002\u90a3\u628a\u5b83\u63d0\u5230 $s$ \u4e0a\u7aef\u4e0d\u5c31\u597d\u4e86\uff1f\u5b83\u5c06\u76f4\u63a5\u6d41\u5411 $s$\uff0c\u4e0d\u4f1a\u6d6a\u8d39\u64cd\u4f5c\u6b21\u6570\uff0c\u90a3\u5982\u4f55\u5224\u65ad\u5462\uff1f\u7528 $gap$ \u5b58\u50a8\u6bcf\u4e2a\u9ad8\u5ea6\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\uff01\n\n### Code\n\u4e0b\u9762\u9644\u4e0a AC \u4ee3\u7801\uff01\uff01\uff01\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,int>\n#define x first\n#define y second\n#define rep1(i,l,r) for(int i=l;i<=r;i++)\n#define rep2(i,l,r) for(int i=l;i>=r;i--)\nconst int N=1e6+10;\nusing namespace std;\nint n,s,m,t,e[N],h[N],ne[N],w[N],idx,highh[N],ef[N],gap[N],vis[N];\nstruct cmp{bool operator()(int a,int b)const{return highh[a]<highh[b];}};//\u624b\u52a8\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 \npriority_queue<int,vector<int>,cmp> q;\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return f*x;\n}\nvoid add(int x,int y,int z)\n{\n    idx+=2;//\u5efa\u7acb\u53cc\u5411\u8fb9 \n    e[idx]=y;\n    ne[idx]=h[x];\n    w[idx]=z;\n    h[x]=idx;\n    e[idx+1]=x;\n    ne[idx+1]=h[y];\n    w[idx+1]=0;//\u53cd\u76f8\u8fb9\u7684\u6743\u503c\u4e3a0\n    h[y]=idx+1;\n    return;\n}\nbool bfs()//bfs\u628a\u521d\u59cb\u7684\u9ad8\u5ea6\u5b9a\u4e49\u4e3a\u5230t\u7684\u8ddd\u79bb\uff0cs\u5219\u4e3an \n{\n    queue<int> q;\n    memset(highh,0x3f3f3f3f,sizeof highh);\n    highh[t]=0;//t\u7684\u9ad8\u5ea6\u4e3a0\uff0c\u8d77\u70b9 \n    q.push(t);//\u4ecet\u5f00\u59cb \n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        for(int i=h[x];~i;i=ne[i])\n        {\n            int to=e[i];\n            if(w[i^1]/*\u5269\u4f59\u5bb9\u91cf\u4e0d\u4e3a0*/&&highh[to]>highh[x]+1/*\u53ef\u4ee5\u6d41\u5411\u5f53\u524d\u76ee\u6807\u8282\u70b9*/)\n            {\n                highh[to]=highh[x]+1;//\u66f4\u65b0\u9ad8\u5ea6 \n                q.push(to);//\u8fdb\u961f \n            }\n        }\n    }\n    //\u5224\u65ad\u662f\u5426\u8fde\u901a \n    if(highh[s]!=0x3f3f3f3f) return 1;\n    return 0;\n}\nvoid push(int x)\n{\n    for(int i=h[x];~i;i=ne[i])\n    {\n        int to=e[i];\n        if(w[i]/*\u5269\u4f59\u5bb9\u91cf\u4e0d\u4e3a0*/&&highh[to]+1==highh[x]/*\u9ad8\u5ea6\u6ee1\u8db3*/)\n        {\n            int d=min(ef[x],w[i]);//\u63a8\u9001\u4f59\u7559\u4e0d\u5f97\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u4f59\u6d41\u548c\u5269\u4f59\u5bb9\u91cf \n            w[i]-=d;//\u5f53\u524d\u8fb9\u7684\u5bb9\u91cf\u51cf\u6389 \n            w[i^1]+=d;//\u65b9\u5411\u8fb9\u7684\u6d41\u91cf\u52a0\u4e0a \n            ef[x]-=d;//\u5f53\u524d\u8282\u70b9\u4f59\u7559\u51cf\u5c11 \n            ef[to]+=d;//\u589e\u52a0\u76ee\u6807\u4f59\u6d41 \n            if(to!=s/*\u4e0d\u4e3a\u6e90\u70b9*/&&to!=t/*\u4e0d\u4e3a\u6c47\u70b9*/&&!vis[to]/*\u4e0d\u5728\u4f18\u5148\u961f\u5217\u4e2d*/)\n            {\n                q.push(to);//\u52a0\u5165\u4f18\u5148\u961f\u5217\u7b49\u5f85\u63a8\u9001\n                vis[to]=1;//\u4ee5\u52a0\u5165\u4f18\u5148\u961f\u5217 \n            }\n            if(!ef[x]) break;//\u6ca1\u6709\u4f59\u6d41\u4e86 \n        }\n    }\n    return;\n}\nvoid relabel(int x)//\u91cd\u8d34\u6807\u7b7e \n{\n    highh[x]=0x3f3f3f3f;\n    for(int i=h[x];~i;i=ne[i]) \n    {\n        int to=e[i];\n        if(w[i]/*\u5269\u4f59\u5bb9\u91cf\u4e0d\u4e3a0*/&&highh[to]+1<highh[x]/*\u4fdd\u8bc1\u4e0b\u4e00\u6b21\u53ef\u4ee5\u63a8\u9001\u5373\u53ef\uff0c\u4e0d\u8981\u8fc7\u9ad8*/) highh[x]=highh[to]+1;\n    }\n    return;\n}\nint HLPP()//\u6838\u5fc3\u64cd\u4f5c \n{\n    if(!bfs()) return 0;\n    highh[s]=n;//\u6e90\u70b9\u7684\u9ad8\u5ea6\u4e3an \n    memset(gap,0,sizeof gap);\n    rep1(i,1,n) if(highh[i]<0x3f3f3f3f/*\u6ca1\u6cd5\u5230\u8fbe\u7684\u70b9\u5c31\u4e0d\u7528\u4e86*/) ++gap[highh[i]];//gap\u4f18\u5316 \n    //\u4e3a\u4e86\u9632\u6b62\u53d1\u751f\u4e00\u4e9b\u95ee\u9898\uff0c\u5355\u72ec\u8dd1\u4e00\u8fb9\u6e90\u70b9 \n    for(int i=h[s];~i;i=ne[i])\n    {\n        int to=e[i];\n        int dist=w[i];\n        if(dist)\n        {\n            w[i]-=dist;//\u5f53\u524d\u8fb9\u5bb9\u91cf\u51cf\u5c11 \n            w[i^1]+=dist;//\u53cd\u76f8\u8fb9\u6d41\u91cf\u589e\u52a0 \n            ef[s]-=dist;//\u5f53\u524d\u8282\u70b9\u4f59\u6d41\u63a8\u9001 \n            ef[to]+=dist;//\u88ab\u63a8\u9001\u8282\u70b9\u4f59\u6d41\u589e\u52a0 \n            if(to!=s/*\u4e0d\u4e3a\u6e90\u70b9*/&&to!=t/*\u4e0d\u4e3a\u6c47\u70b9*/&&!vis[to]/*\u4e0d\u5728\u4f18\u5148\u961f\u5217\u4e2d*/)\n            {\n                q.push(to);//\u7b49\u5f85\u63a8\u9001 \n                vis[to]=1;//\u5df2\u8fdb\u5165\u4f18\u5148\u961f\u5217 \n            }\n        }\n    }   \n    while(!q.empty())\n    {\n        int x=q.top();//\u5f53\u524d\u63a8\u9001\u8282\u70b9 \n        vis[x]=0;//\u53d6\u6d88\u6807\u8bb0 \n        q.pop();//\u51fa\u961f \n        push(x);//\u63a8\u9001 \n        if(ef[x])//\u8fd8\u6709\u4f59\u6d41 \n        {\n            if(!--gap[highh[x]]/*\u5982\u679c\u672c\u9ad8\u5ea6\u53ea\u6709\u5b83\u4e00\u4e2a*/) rep1(j,1,n) if(j!=s/*\u4e0d\u4e3a\u6e90\u70b9*/&&j!=t/*\u4e0d\u4e3a\u6c47\u70b9*/&&highh[j]>highh[x]/*\u4e0d\u53ef\u80fd\u88ab\u63a8\u9001\u5230\u6c47\u70b9*/&&highh[j]<n+1/*\u9ad8\u5ea6\u4e0d\u7b49\u4e8en+1*/) highh[j]=n+1;//\u628a\u4e0d\u53ef\u80fd\u5230\u8fbe\u6c47\u70b9\u7684\u6240\u6709\u70b9\u9ad8\u5ea6\u8c03\u4e3an+1\uff0c\u76f4\u63a5\u6d41\u5411\u6e90\u70b9 \n            relabel(x);//\u91cd\u8d34\u6807\u7b7e\uff0c\u4fdd\u8bc1\u4e0b\u6b21\u80fd\u591f\u63a8\u9001 \n            ++gap[highh[x]];//\u65b0\u7684\u9ad8\u5ea6 \n            q.push(x);//\u56e0\u4e3a\u8fd8\u6709\u4f59\u6d41\u6240\u4ee5\u8fdb\u961f \n            vis[x]=1;//\u6807\u8bb0 \n        }\n    }\n    return ef[t];//\u8fd4\u56de\u6c47\u70b9\u7684\u4f59\u6d41\uff0c\u8fd9\u5c31\u662f\u7f51\u7edc\u6700\u5927\u6d41 \n}\nsigned main()\n{\n    memset(h,-1,sizeof h);\n    n=read();\n    m=read();\n    s=read();//\u6e90\u70b9 \n    t=read();//\u6c47\u70b9 \n    rep1(i,1,m) \n    {\n        int u=read();\n        int v=read();\n        int w=read(); \n        add(u,v,w);//\u8fde\u8fb9 \n    }\n    cout<<HLPP()<<endl;//\u8f93\u51fa\uff01\uff01\uff01 \n    return 0;\n}",
        "postTime": 1672123456,
        "uid": 672793,
        "name": "Symbolize",
        "ccfLevel": 6,
        "title": "P4722 \u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4722)\n## HLPP\n\u5b83\u662f [Dinic](https://wdsa001.github.io/2021/12/04/dinic/) \u8fdb\u9636\u7684\u601d\u60f3\u3002\n\n\u56e0\u4e3a `Dinic` \u7684\u590d\u6742\u5ea6\u6ee1\u8db3\u4e0d\u4e86\u672c\u9898\u4e86\uff0c\u5c31\u9700\u8981\u66f4\u9ad8\u7ea7\u7684\u7b97\u6cd5\uff1a`HLPP` \u662f\u76ee\u524d\u7f51\u7edc\u6d41\u6700\u5927\u6d41\u7684**\u6700\u5148\u8fdb**\u7684\u7b97\u6cd5\u4e86\uff08\u8d77\u7801\u76ee\u524d\u662f\u7684\uff09\u3002\n\n### \u601d\u8def\n\u4ecd\u8981\u5c06\u6574\u4e2a\u56fe\u5206\u5c42\uff0c\u4f46\u8fd9\u6b21\u62bd\u8c61\u7684\u5206\u6210\u9ad8\u5ea6\u7684\u56fe\uff0c\u5c06\u6c47\u70b9\u5b9a\u4e49\u4e3a $0$ \u7684\u9ad8\u5ea6\uff0c\u6240\u6709\u80fd\u5230\u8fbe\u5b83\u7684\u70b9\u9ad8\u5ea6\u4e3a $1$\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5177\u4f53\u7684\u64cd\u4f5c\u662f\u5c06\u6240\u6709\u7684\u70b9\u7684\u9ad8\u5ea6\u7684\u521d\u503c\u4e3a\u6700\u5927\u503c\uff0c\u7136\u540e\u4e0d\u65ad\u53d6\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u8fbe\u5230\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002\u6700\u540e\u5c06\u6e90\u70b9\u63d0\u5347\u5230\u6700\u9ad8\u7684\u9ad8\u5ea6\uff08\u4f46**\u4e0d\u662f**\u6700\u5927\u503c\uff01\uff09\n\n\u6211\u4eec\u77e5\u9053\u7684\u662f\u9ad8\u5904\u7684\u6c34\u53ef\u4ee5\u6d41\u5411\u4f4e\u5904\uff08\u5e38\u8bc6\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5c06\u6e90\u70b9\u770b\u6210\u771f\u6b63\u7684\u201c\u6e90\u6cc9\u201d\uff0c\u6709\u65e0\u7a77\u7684\u6c34\u3002\u5f80\u4e0b\u6d41\uff08\u9650\u5236\u662f\u6bcf\u6761\u8def\u7684\u6700\u5927\u6d41\u91cf\uff09\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7528\u5b8c\u4e86\uff0c\u5c31\u662f\u8bf4\u6c34\u5230\u4e86\u4e4b\u540e\uff0c\u65e0\u8def\u53ef\u6d41\u4e86\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u70b9\u7684\u9ad8\u5ea6\u4ece\u65b0\u8d4b\u6210\u6700\u5927\u503c\uff0c\u8fd9\u6837\u539f\u6765\u80fd\u6d41\u5411\u5b83\u7684\u70b9\uff0c\u4e5f\u7531\u4e8e\u201c\u5730\u52bf\u201d\u7684\u53d8\u5316\uff0c\u6d41\u4e0d\u8fc7\u53bb\u3002\uff08\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6254\u6389\u4e86\u8fd9\u4e2a\u70b9\u3002\uff09\n\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u4ece\u9ad8\u5904\u6d41\u4e0b\u6765\u7684\u6c34\u53ef\u80fd\u7ee7\u7eed\u5411\u4e0b\u6d41\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u9ad8\u5904\u7684\u6c34\u80fd\u6d41\u7684\u5168\u90e8\u6d41\u5b8c\uff0c\u7136\u540e\u518d\u6d41\u4f4e\u5904\u7684\u6c34\uff0c\u8fd9\u6837\u6d41\u4f4e\u5904\u6c34\u7684\u65f6\u5019\uff0c\u201c\u987a\u5e26\u201d\u6d41\u8d70\u4e86\u9ad8\u51fa\u79ef\u7d2f\u4e0b\u6765\u7684\u6c34\u3002\u7136\u540e\u7531\u4e8e\u5730\u52bf\u7684\u63d0\u9ad8\uff08\u88ab\u63d0\u9ad8\u5730\u52bf\u7684\u8282\u70b9\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u76f4\u5230\u4e0d\u80fd\u6d41\u4e3a\u6b62\u3002\uff09\u6700\u540e\u4f1a\u8fd4\u56de\u6e90\u70b9\u3002\n\n\u800c\u6c47\u70b9\u80fd\u6d41\u8fc7\u6765\u7684\u91cf\u5c31\u662f\u201c\u6700\u5927\u6d41\u91cf\u201d\u3002\n\n\u4f18\u5316\uff1a\n\n\u7531\u4e8e\u6211\u4eec\u6839\u636e\u7684\u9ad8\u5ea6\u8fdb\u884c\u7684\u70b9\u7684\u5206\u5c42\uff0c\u6240\u4ee5\u4f1a\u51fa\u73b0\u4e00\u79cd\u60c5\u51b5\uff1a\u4e00\u5c42\uff08\u540c\u4e00\u9ad8\u5ea6\uff09\u53ea\u5269\u4e00\u4e2a\u70b9\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u65e0\u8def\u53ef\u6d41\u4e86\uff0c\u90a3\u4e48\u5b83\u88ab\u63d0\u9ad8\u7684\u540c\u65f6\u610f\u5473\u7740\uff0c**\u6bd4\u5b83\u9ad8\u7684\u6240\u6709\u7684\u70b9\u90fd\u5df2\u7ecf\u6ca1\u7528\u4e86**\u3002\n\n### \u4ee3\u7801\u601d\u8def\n- \u52a0\u8fb9\uff08\u53cc\u5411\u8fb9\uff09\n\n- \u5206\u5c42\uff08\u8282\u70b9\u8bbe\u7f6e\u9ad8\u5ea6\uff09\n\n- \u7edf\u8ba1\u540c\u4e00\u9ad8\u5ea6\u8282\u70b9\u6570\u91cf\uff08\u65b9\u4fbf\u5224\u65ad\u4e0a\u9762\u6240\u8bf4\u7684\u201c\u4f18\u5316\u201d\uff09\n\n- \u679a\u4e3e\u6e90\u70b9\u7684\u6d41\u7a0b\uff08\u6e90\u70b9\u7684\u6c34\u662f\u65e0\u5c3d\u7684\u6240\u4ee5\u7279\u6b8a\u5904\u7406\uff09\n\n- \u5904\u7406\u6240\u6709\u8282\u70b9\u6d41\u91cf\u60c5\u51b5\uff08\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u7136\u9ad8\u5ea6\u9ad8\u7684\u5148\u5904\u7406\uff09\n\n- \u5224\u65ad\u201c\u65ad\u5c42\u201d\u60c5\u51b5\uff08\u4e0a\u9762\u6240\u8bf4\u7684\u201c\u4f18\u5316\u201d\uff09\n\n- \u8f93\u51fa\u6700\u7ec8\u6d41\u5411\u6c47\u70b9\u7684\u201c\u91cf\u201d\n\n## \u4ee3\u7801\n**\u6ce8\uff1a\u672c\u7bc7\u4ee3\u7801\u672c\u7740\u201c\u539f\u6c41\u539f\u5473\u201d\uff0c\u6ca1\u6709\u522b\u7684\u9898\u89e3\u7684\u7384\u5b66\u4f18\u5316\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u5dee\u4e00\u4e9b\u3002**\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<cctype>\n#include<queue>\n#include<vector>\nusing namespace std;\nlong long r_r(){//\u5feb\u8bfb \n\tlong long x=0,f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\nconst int o_o=4e5+10;\nstruct po{\n\tint n_t;\n\tint v;//\u4e0b\u4e00\u4e2a\u8282\u70b9 \n\tlong long l;//\u6d41\u91cf \n}p_p[o_o];\nint h_d[o_o],x_p=1;\nint n=r_r(),m=r_r(),s=r_r(),t=r_r();\nvoid a_d(int u,int v,long long l){//\u5efa\u8fb9 \n\tp_p[++x_p].v=v;\n\tp_p[x_p].l=l;\n\tp_p[x_p].n_t=h_d[u];\n\th_d[u]=x_p;\n}\nint h_t[o_o];//\u8282\u70b9\u9ad8\u5ea6 \nqueue<int>q_q;\nlong long s_v[o_o];//\u8282\u70b9\u5269\u4f59\u7684\u201c\u91cf\u201d \nint b_b[o_o];//\u6807\u8bb0\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u904d\u5386\u8fc7\uff08\u9632\u6b62\u8dd1\u73af\uff09 \nint g_p[o_o];//\u5f53\u524d\u9ad8\u5ea6\u6709\u591a\u5c11\u8282\u70b9 \nstruct pp{\n\tbool operator()(int a,int b)const{\n\t\treturn h_t[a]<h_t[b];\n\t}\n};\npriority_queue<int,vector<int>,pp>p_q;\nbool b_f(){//\u5206\u5c42\u56fe\n\tmemset(h_t,0x3f,sizeof h_t);//\u521d\u59cb\u5316\u9ad8\u5ea6\u6570\u7ec4\n\th_t[t]=0;//\u4ece\u6c47\u70b9\u5f00\u59cb\u63d0\u9ad8\u5ea6 \n\tq_q.push(t);\n\twhile(!q_q.empty()){\n\t\tint k_k=q_q.front();\n\t\tq_q.pop();\n\t\tfor(int i=h_d[k_k];i;i=p_p[i].n_t){//\u679a\u4e3e\u51fa\u8fb9 \n\t\t\tint v=p_p[i].v;\n\t\t\tif(p_p[i^1].l&&h_t[v]>h_t[k_k]+1){//\u56e0\u4e3a\u662f\u5f80\u56de\u627e\uff0c\u6240\u4ee5\u5224\u65ad\u53cd\u5411\u5f27 \n\t\t\t\th_t[v]=h_t[k_k]+1;//\u66f4\u65b0\u9ad8\u5ea6\uff0c\u4f7f\u9ad8\u5ea6\u5c3d\u91cf\u5c0f \n\t\t\t\tq_q.push(v);//\u5165\u961f \n\t\t\t}\n\t\t}\n\t}\n\treturn h_t[s]!=h_t[0];//\u6e90\u70b9\u6c47\u70b9\u662f\u5426\u8054\u901a \n}\nvoid x_l(int k){//\u8282\u70b9\u201c\u91cf\u201d\u4e0b\u6d41 \n\tfor(int i=h_d[k];i;i=p_p[i].n_t){//\u679a\u4e3e\u51fa\u8fb9 \n\t\tint v=p_p[i].v;\n\t\tif(p_p[i].l&&h_t[v]+1==h_t[k]){//\u8fb9\u6709\u6d41\u91cf\u5e76\u4e14\u6df1\u5ea6\u662f\u987a\u7740\u4e0b\u4e00\u5c42 \n\t\t\tint a_s=min(s_v[k],p_p[i].l);\n\t\t\tp_p[i].l-=a_s;//\u66f4\u65b0\u8fb9\u6d41\u91cf \n\t\t\tp_p[i^1].l+=a_s;//\u66f4\u65b0\u53cd\u5411\u5f27\u6d41\u91cf \n\t\t\ts_v[k]-=a_s;//\u66f4\u65b0\u8282\u70b9\u5269\u4f59\u7684\u201c\u91cf\u201d \n\t\t\ts_v[v]+=a_s;//\u66f4\u65b0\u4e0b\u4e00\u8282\u70b9\u7684\u201c\u91cf\u201d \n\t\t\tif(v!=s&&v!=t&&!b_b[v]){//\u6d41\u5411\u7684\u4e0d\u662f\u6e90\u70b9\u4e0d\u662f\u6c47\u70b9\u5e76\u4e14\u6ca1\u904d\u5386\u8fc7 \n\t\t\t\tp_q.push(v);//\u5165\u961f \n\t\t\t\tb_b[v]=1;//\u6807\u8bb0 \n\t\t\t}\n\t\t\tif(!s_v[k])break;//\u6ca1\u6709\u6d41\u91cf\u4e86\uff0c\u9000\u51fa \n\t\t}\n\t} \n\treturn ;\n}\nvoid n_h(int k_k){\n\th_t[k_k]=h_t[0];//\u5c06\u8282\u70b9\u521d\u59cb\u5316\u4e3a\u201c\u4e0d\u53ef\u5230\u8fbe\u201d\u8282\u70b9 \n\tfor(int i=h_d[k_k];i;i=p_p[i].n_t){//\u679a\u4e3e\u51fa\u8fb9 \n\t\tint v=p_p[i].v;\n\t\tif(p_p[i].l&&h_t[v]+1<h_t[k_k])//\u6709\u53ef\u4ee5\u6d41\u7684\u8fb9 \n\t\t\th_t[k_k]=h_t[v]+1;//\u66f4\u65b0\u9ad8\u5ea6\uff0c\u5c3d\u53ef\u80fd\u7684\u5c0f \n\t}\n\treturn ;\n}\nint main(){\n\tfor(int i=1;i<=m;i++){\n\t\tint a=r_r(),b=r_r();\n\t\tlong long v=r_r();\n\t\ta_d(a,b,v);//\u5efa\u8fb9 \n\t\ta_d(b,a,0);//\u5efa\u53cd\u5411\u5f27 \n\t}\n\tif(!b_f()){//\u6e90\u70b9\u6c47\u70b9\u4e0d\u8fde\u901a\u76f4\u63a5\u8fd4\u56de \n\t\tputs(\"0\");\n\t\treturn 0; \n\t}\n\th_t[s]=n+1;//\u6e90\u70b9\u63d0\u5230\u6700\u9ad8\u7684\u4f4d\u7f6e \n\tmemset(g_p,0,sizeof g_p);//\u9ad8\u5ea6\u8282\u70b9\u6570\u521d\u59cb\u5316\u4e3a 0  \n\tfor(int i=1;i<=n;i++)if(h_t[i]!=h_t[0])g_p[h_t[i]]++;//\u5982\u679c\u8282\u70b9\u9ad8\u5ea6\u6ca1\u6709\u88ab\u6254\u6389\uff0c\u8bf4\u660e\u53ef\u4ee5\u6d41\u5230\uff0c\u5f53\u524d\u9ad8\u5ea6\u8282\u70b9\u6570\u91cf\u589e\u52a0 1 \n\t\n\t//\u5904\u7406\u6e90\u70b9\u7684\u6d41\u52a8 \n\tfor(int i=h_d[s];i;i=p_p[i].n_t){\n\t\tint a_s=p_p[i].l;\n\t\tint v=p_p[i].v;\n\t\tp_p[i].l-=a_s;//\u66f4\u65b0\u8fb9\u6d41\u91cf \n\t\tp_p[i^1].l+=a_s;//\u66f4\u65b0\u53cd\u5411\u5f27\u6d41\u91cf \n\t\ts_v[s]-=a_s;//\u66f4\u65b0\u8282\u70b9\u5269\u4f59\u7684\u201c\u91cf\u201d \n\t\ts_v[v]+=a_s;//\u66f4\u65b0\u4e0b\u4e00\u8282\u70b9\u7684\u201c\u91cf\u201d \n\t\tif(v!=s&&v!=t&&!b_b[v]){//\u6d41\u5411\u7684\u4e0d\u662f\u6e90\u70b9\u4e0d\u662f\u6c47\u70b9\u5e76\u4e14\u6ca1\u904d\u5386\u8fc7 \n\t\t\tp_q.push(v);//\u5165\u961f \n\t\t\tb_b[v]=1;//\u6807\u8bb0 \n\t\t}\n\t}\n\t\n\t//\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\n\twhile(!p_q.empty()){\n\t\tint k_k=p_q.top();\n\t\tp_q.pop();\n\t\tb_b[k_k]=0;//\u5220\u9664\u6807\u8bb0 \n\t\tx_l(k_k);//\u8282\u70b9\u4e0b\u6d41 \n\t\tif(s_v[k_k]){//\u5f53\u524d\u8282\u70b9\u4ecd\u6709\u6d41\u91cf \n\t\t\tif(!--g_p[h_t[k_k]])//\u5f53\u524d\u6df1\u5ea6\u6ca1\u6709\u522b\u7684\u8282\u70b9 \n\t\t\t\tfor(int i=1;i<=n;i++)//\u679a\u4e3e\u6240\u6709\u8282\u70b9 \n\t\t\t\t\tif(i!=s&&i!=t&&h_t[i]>h_t[k_k]&&h_t[i]<n+1)//\u4e0d\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\u5e76\u4e14\u6bd4\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\u5927\u4e14\u6ca1\u6709\u88ab\u6254\u6389 \n\t\t\t\t\t\th_t[i]=n+1;//\u5c06\u53ef\u4ee5\u5230\u8fbe\u5b83\u7684\u8282\u70b9\u6254\u6389 \n\t\t\tn_h(k_k);//\u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6 \n\t\t\t++g_p[h_t[k_k]];//\u5f53\u524d\u6df1\u5ea6\u7684\u8282\u70b9\u589e\u52a0 1 \n\t\t\tp_q.push(k_k);//\u5165\u961f \n\t\t\tb_b[k_k]=1;//\u6807\u8bb0 \n\t\t} \n\t} \n\tprintf(\"%d\\n\",s_v[t]);//\u8f93\u51fa\u6700\u7ec8\u6d41\u5411\u6c47\u70b9\u7684\u201c\u91cf\u201d\n\treturn 0;\n}\n```\n",
        "postTime": 1638598382,
        "uid": 120012,
        "name": "\u738b\u5927\u795e\u2014\u2014A001",
        "ccfLevel": 0,
        "title": "HLPP\uff08\u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb\uff09"
    }
]