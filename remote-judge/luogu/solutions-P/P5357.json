[
    {
        "content": "\u56e0\u4e3a\u662f\u4ec0\u4e48\u201c\u4e8c\u6b21\u52a0\u5f3a\u7248\u201d\uff0c\u6240\u4ee5\u5927\u5bb6\u5148\u53bb\u505a\u4e00\u4e0b\u201c\u52a0\u5f3a\u7248\u201d\u5427\uff0c\u505a\u6cd5\u5dee\u4e0d\u591a\u3002\n\n\u6ca1\u505a\u8fc7\u7684\u770b\u8fd9\u91cc:[\u9898\u89e3\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09](https://www.luogu.org/blog/juruohyfhaha/solution-p3796)\uff0c\u6709\u4e00\u4e0b\u53d8\u91cf\u540d\u53ef\u80fd\u4f1a\u5728\u521a\u624d\u90a3\u4e00\u7bc7blog\u51fa\u73b0\u8fc7\uff0c\u6240\u4ee5\u5efa\u8bae\u5927\u5bb6\u518d\u53bb\u8fc7\u4e00\u4e0b\u3002\n\n\u597d\u4e86\uff0c\u770b\u5230\u8fd9\u91cc\u5927\u5bb6\u90fd\u4e00\u5b9a\u505a\u8fc7\u201c\u52a0\u5f3a\u7248\u201d\u4e86\u5427\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u4e5f\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u6211\u4eec\u8fd9\u4e00\u6b21\u4e0d\u9700\u8981\u6c42\u51fa\u73b0\u6700\u591a\u7684\u5b57\u7b26\u4e32\u5566\uff0c\u76f4\u63a5\u5c06vis\u6570\u7ec4\u8f93\u51fa\u5c31\u597d\u4e86\uff01\uff08\u5e94\u8be5\u90fd\u77e5\u9053vis\u6570\u7ec4\u662f\u4ec0\u4e48\u5427\uff0c\u5c31\u662f\u7edf\u8ba1\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u51fa\u73b0\u591a\u5c11\u6b21\u7684\u6570\u7ec4\uff09\n\n\u4f46\u91cd\u590d\u7684\u5355\u8bcd\u6709\u6ca1\u6709\u5f71\u54cd\u554a\uff01\u6709\u554a\uff01\u5bf9\u4e8e\u201c\u52a0\u5f3a\u7248\u201d\uff0c\u8fd9\u4e00\u6b21\u91cd\u590d\u7684\u5355\u8bcd\u5c31\u4f1a\u6709\u5f71\u54cd\u5566\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u9053\u9898\u6709\u76f8\u540c\u5b57\u7b26\u4e32\u8981\u7edf\u8ba1\uff0c\u8bbe\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u7b2ci\u4e2a\uff0c\u6211\u4eec\u7528\u4e00\u4e2aMap[i]\u6570\u7ec4(\u4e0d\u662fSTL\u90a3\u4e2a)\u5b58((\u5f53\u524d\u5b57\u7b26\u4e32\u5728Trie\u4e2d\u7684\u90a3\u4e2a\u4f4d\u7f6e)\u7684flag)\uff0c\u6700\u540e\u628avis[Map[i]]\u8f93\u51fa\u5c31OK\u4e86\u3002\u53e6\u5916flag\u53ea\u5728\u7b2c\u4e00\u6b21\u8d4b\u503c\u65f6\u53d8\u5316\uff0c\u5176\u4ed6\u90fd\u4e0d\u53d8\u3002\n\n\u4ee3\u7801\u4e2d\u4fee\u6539\u7684\u5730\u65b9\uff1a\n\n\u63d2\u5165\u5b57\u7b26\u4e32\u65f6insert\uff1a\n\n```cpp\ninsert\u6700\u540e\u90a3\u4e2a\u5730\u65b9,num\u662f\u4e0a\u9762i\u7684\u610f\u601d\nif(!trie[u].flag)trie[u].flag=num;\t\t\t//\u5982\u679c\u662f\u7b2c1\u4e2a\u5c31\u8d4b\u503cflag\nMap[num]=trie[u].flag;\t\t\t\t\t\t\t\t\t//\u5b58Map\u6570\u7ec4\n```\n\n\u6700\u540e\u8f93\u51fa\uff1a\n\n```cpp\nfor(int i=1;i<=n;++i)printf(\"%d\\n\",vis[Map[i]]);\n```\n\n\u55ef\uff0c\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u4ea4\u4e86\uff01\n\n\uff1f\uff1f\uff1f\uff01\u600e\u4e48\u53ea\u670976\u5206\uff1fTLE\uff01\uff01\uff01 [\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.org/recordnew/show/18909224)\n\n# AC\u81ea\u52a8\u673a\u7684\u4f18\u5316\n\n## \u62d3\u6251\u5efa\u56fe\u4f18\u5316\n\n\u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u521a\u624d\u90a3\u4e2a\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7b97\u4e86\u4e0d\u5206\u6790\u4e86\uff0c\u76f4\u63a5\u544a\u8bc9\u4f60\u5427\uff0c\u8fd9\u6837\u66b4\u529b\u53bb\u8df3fail\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(\u6a21\u5f0f\u4e32\u957f\u5ea6 \u00b7 \u6587\u672c\u4e32\u957f\u5ea6)\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8df3fail\u6211\u4eec\u90fd\u53ea\u4f7f\u6df1\u5ea6\u51cf1\uff0c\u90a3\u6837\u6df1\u5ea6(\u6df1\u5ea6\u6700\u6df1\u662f\u6a21\u5f0f\u4e32\u957f\u5ea6)\u662f\u591a\u5c11\uff0c\u6bcf\u4e00\u6b21\u8df3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u591a\u5c11\u3002\u90a3\u4e48\u8fd8\u8981\u4e58\u4e0a\u6587\u672c\u4e32\u957f\u5ea6\uff0c\u5c31\u51e0\u4e4e\u662f O(\u6a21\u5f0f\u4e32\u957f\u5ea6 \u00b7 \u6587\u672c\u4e32\u957f\u5ea6)\u7684\u4e86\u3002\n\n\u90a3\u4e48\u6a21\u677f1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u5c31\u53ea\u6709O(\u6a21\u5f0f\u4e32\u603b\u957f)\u3002\u56e0\u4e3a\u6bcf\u4e00\u4e2aTrie\u4e0a\u7684\u70b9\u90fd\u53ea\u4f1a\u7ecf\u8fc7\u4e00\u6b21\uff08\u6253\u4e86\u6807\u8bb0\uff09\uff0c\u4f46\u521a\u624d\u90a3\u4e2a\u7a0b\u5e8f\u6bcf\u4e00\u4e2a\u70b9\u5c31\u4e0d\u6b62\u7ecf\u8fc7\u4e00\u6b21\u4e86\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7206\u70b8\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u8ba9\u521a\u624d\u90a3\u4e2a\u7a0b\u5e8f\u7684Trie\u4e0a\u6bcf\u4e2a\u70b9\u53ea\u7ecf\u8fc7\u4e00\u6b21\u5462\uff1f\u8ba9\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3O(\u6a21\u5f0f\u4e32\u603b\u957f)\u5462\uff1f\n\n\u55ef~\uff0c\u8fd8\u771f\u53ef\u4ee5\uff01\n\n\u9898\u76ee\u770b\u8fd9\u91cc\uff1a[**P5357** \u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09](https://www.luogu.org/problemnew/show/P5357)\n\n### \u505a\u6cd5\uff1a\u62d3\u6251\u6392\u5e8f\n\n\u8ba9\u6211\u4eec\u628aTrie\u4e0a\u7684fail\u90fd\u60f3\u8c61\u6210\u4e00\u6761\u6761\u6709\u5411\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u5728\u4e00\u4e2a\u70b9\u4f7f\u90a3\u4e2a\u70b9\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u90a3\u4e48\u6cbf\u7740\u8fd9\u4e2a\u70b9\u8fde\u51fa\u53bb\u7684\u70b9\u4e5f\u4f1a\u8fdb\u884c\u64cd\u4f5c\uff08\u5c31\u662f\u8df3fail\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u624d\u8981\u66b4\u529b\u8df3fail\u53bb\u66f4\u65b0\u4e4b\u540e\u7684\u70b9\u3002\n\n![AC\u81ea\u52a8\u673a](https://i.loli.net/2019/05/02/5ccaaa22cbf29.png)\n\n\u6211\u4eec\u7528\u4e0a\u9762\u7684\u56fe\uff0c\u6211\u4e3e\u4e2a\u4f8b\u5b50\u89e3\u91ca\u4e00\u4e0b\u6211\u521a\u624d\u7684\u610f\u601d\u3002\n\n\u6211\u4eec\u5148\u627e\u5230\u4e86\u7f16\u53f74\u8fd9\u4e2a\u70b9\uff0c\u7f16\u53f74\u7684fail\u8fde\u5411\u7f16\u53f77\u8fd9\u4e2a\u70b9\uff0c\u7f16\u53f77\u7684fail\u8fde\u5411\u7f16\u53f79\u8fd9\u4e2a\u70b9\u3002\u90a3\u4e48\u6211\u4eec\u8981\u66f4\u65b0\u7f16\u53f74\u8fd9\u4e2a\u70b9\u7684\u503c\uff0c\u540c\u65f6\u4e5f\u8981\u66f4\u65b0\u7f16\u53f77\u548c\u7f16\u53f79\uff0c\u8fd9\u5c31\u662f\u66b4\u529b\u8df3fail\u7684\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u4e0b\u4e00\u6b21\u627e\u5230\u7f16\u53f77\u8fd9\u4e2a\u70b9\uff0c\u8fd8\u8981\u518d\u6b21\u66f4\u65b0\u7f16\u53f79\uff0c\u7f16\u53f79\u70b9\u5c31\u88ab\u66f4\u65b0\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u5728\u8fd9\u91cc\u88ab\u6d6a\u8d39\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u5728\u627e\u5230\u7684\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u6700\u540e\u518d**\u4e00\u6b21\u6027**\u5c06\u6807\u8bb0\u5168\u90e8\u4e0a\u4f20 \u6765 \u66f4\u65b0\u5176\u4ed6\u70b9\u7684ans\u3002\u4f8b\u5982\u6211\u4eec\u627e\u5230\u7f16\u53f74\uff0c\u5728\u7f16\u53f74\u8fd9\u4e2a\u70b9\u6253\u4e00\u4e2aans\u6807\u8bb0\u4e3a1\uff0c\u4e0b\u4e00\u6b21\u627e\u5230\u4e86\u7f16\u53f77\uff0c\u53c8\u5728\u7f16\u53f77\u8fd9\u4e2a\u70b9\u6253\u4e00\u4e2aans\u6807\u8bb0\u4e3a1\uff0c\u90a3\u4e48\u6253\u597d\u5168\u90e8\u6807\u8bb0\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u4ece\u7f16\u53f74\u5f00\u59cb\u8df3fail\uff0c\u7136\u540e\u5c06\u6807\u8bb0ans\u4e0a\u4f20\uff0c**((\u70b9i\u7684fail)\u7684ans)\u52a0\u4e0a(\u70b9i\u7684ans)**\uff0c\u6700\u540e\u4f7f\u7f16\u53f74\u7684ans\u4e3a1\uff0c\u7f16\u53f77\u7684ans\u4e3a2\uff0c\u7f16\u53f79\u7684ans\u4e3a2\uff0c\u8fd9\u6837\u7684\u7b54\u6848\u548c\u66b4\u529b\u8df3fail\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u70b9\u53ea\u7ecf\u8fc7\u4e86**\u4e00\u6b21**\u3002\n\n\u6700\u540e\u6211\u4eec\u5c06\u6709flag\u6807\u8bb0\u7684ans\u4f20\u5230vis\u6570\u7ec4\u91cc\uff0c\u5c31\u6c42\u51fa\u4e86\u7b54\u6848\u3002\n\n\u4f46\u600e\u4e48\u786e\u5b9a\u66f4\u65b0\u987a\u5e8f\u5462\uff1f\u660e\u663e\u6211\u4eec\u6253\u4e86\u6807\u8bb0\u540e\u80af\u5b9a\u662f\u4ece\u6df1\u5ea6\u5927\u7684\u70b9\u5f00\u59cb\u66f4\u65b0\u4e0a\u53bb\u7684\u3002\u6240\u4ee5\u66f4\u65b0\u987a\u5e8f\u5c31\u662f\u4ece\u6df1\u5ea6\u5927\u7684\u5230\u6df1\u5ea6\u5c0f\u7684\u3002\n\n\u600e\u4e48\u5b9e\u73b0\u5462\uff1f**\u62d3\u6251\u6392\u5e8f\uff01**\n\n\u6211\u4eec\u4f7f\u6bcf\u4e00\u4e2a\u70b9\u5411\u5b83\u7684fail\u6307\u9488\u8fde\u4e00\u6761\u8fb9\uff0c\u660e\u663e\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e3a1\uff08fail\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u5165\u5ea6\u53ef\u80fd\u5f88\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u50cf\u62d3\u6251\u6392\u5e8f\u90a3\u6837\u5148\u5efa\u4e2a\u56fe\u4e86\uff0c\u76f4\u63a5\u5f80fail\u6307\u9488\u8df3\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u5165\u5ea6\u6570\u7ec4in\u8fd8\u662f\u8981\u5b58\u7684\u3002\n\n\u6700\u540e\u6211\u4eec\u6839\u636efail\u6307\u9488\u5efa\u597d\u56fe\u540e\uff08\u60f3\u8c61\u4e00\u4e0b\uff0c\u7a0b\u5e8f\u91cc\u4e0d\u7528\u5b9e\u73b0\u7684\uff09\uff0c\u4e00\u5b9a\u662f\u4e00\u4e2aDAG\uff0c\u5177\u4f53\u539f\u56e0\u4e0d\u89e3\u91ca\uff08\u5f88\u7b80\u5355\u7684\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u5728\u4e0a\u9762\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u66f4\u65b0ans\u5c31\u53ef\u4ee5\u4e86\u3002\n\n#### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\u9996\u5148\u662fgetfail\u8fd9\u91cc\uff0c\u8bb0\u5f97\u5c06fail\u7684\u5165\u5ea6\u66f4\u65b0\u3002\n\n```cpp\ntrie[v].fail=trie[Fail].son[i]; in[trie[v].fail]++;  \t//\u8bb0\u5f97\u52a0\u4e0a\u5165\u5ea6\n```\n\n\u7136\u540e\u662fquery\uff0c\u4e0d\u7528\u66b4\u529b\u8df3fail\u4e86\uff0c\u76f4\u63a5\u6253\u4e0a\u6807\u8bb0\u5c31\u884c\u4e86\uff0c\u5f88\u7b80\u5355\u5427\n\n```cpp\nvoid query(char* s){\n\tint u=1,len=strlen(s);\n\tfor(int i=0;i<len;++i)\n\tu=trie[u].son[s[i]-'a'],trie[u].ans++;\t\t\t\t\t\t\t//\u76f4\u63a5\u6253\u4e0a\u6807\u8bb0\n}\n```\n\n\u6700\u540e\u662f\u62d3\u6251\uff0c\u89e3\u91ca\u90fd\u5728\u6ce8\u91ca\u91cc\u4e86OwO!\n\n```cpp\nvoid topu(){\n\tfor(int i=1;i<=cnt;++i)\n\tif(in[i]==0)q.push(i);\t\t\t\t//\u5c06\u5165\u5ea6\u4e3a0\u7684\u70b9\u5168\u90e8\u538b\u5165\u961f\u5217\u91cc\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();vis[trie[u].flag]=trie[u].ans;\t//\u5982\u679c\u6709flag\u6807\u8bb0\u5c31\u66f4\u65b0vis\u6570\u7ec4\n\t\tint v=trie[u].fail;in[v]--;\t\t//\u5c06\u552f\u4e00\u8fde\u51fa\u53bb\u7684\u51fa\u8fb9fail\u7684\u5165\u5ea6\u51cf\u53bb\uff08\u62d3\u6251\u6392\u5e8f\u7684\u64cd\u4f5c\uff09\n\t\ttrie[v].ans+=trie[u].ans;\t\t//\u66f4\u65b0fail\u7684ans\u503c\n\t\tif(in[v]==0)q.push(v);\t\t\t//\u62d3\u6251\u6392\u5e8f\u5e38\u89c4\u64cd\u4f5c\n\t}\n}\n```\n\n\u5e94\u8be5\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\u5427\uff0c\u5b9e\u73b0\u8d77\u6765\u4e5f\u6ca1\u6709\u591a\u96be\u561b\uff01\n\n# \u603b\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 2000001\nusing namespace std;\nchar s[maxn],T[maxn];\nint n,cnt,vis[200051],ans,in[maxn],Map[maxn];\nstruct kkk{\n    int son[26],fail,flag,ans;\n    void clear(){memset(son,0,sizeof(son)),fail=flag=ans=0;}\n}trie[maxn];\nqueue<int>q;\nvoid insert(char* s,int num){\n    int u=1,len=strlen(s);\n    for(int i=0;i<len;i++){\n        int v=s[i]-'a';\n        if(!trie[u].son[v])trie[u].son[v]=++cnt;\n        u=trie[u].son[v];\n    }\n    if(!trie[u].flag)trie[u].flag=num;\n    Map[num]=trie[u].flag;\n}\nvoid getFail(){\n    for(int i=0;i<26;i++)trie[0].son[i]=1;\n    q.push(1);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        int Fail=trie[u].fail;\n        for(int i=0;i<26;i++){\n            int v=trie[u].son[i];\n            if(!v){trie[u].son[i]=trie[Fail].son[i];continue;}\n            trie[v].fail=trie[Fail].son[i]; in[trie[v].fail]++;\n            q.push(v);\n        }\n    }\n}\nvoid topu(){\n    for(int i=1;i<=cnt;i++)\n    if(in[i]==0)q.push(i);\n    while(!q.empty()){\n        int u=q.front();q.pop();vis[trie[u].flag]=trie[u].ans;\n        int v=trie[u].fail;in[v]--;\n        trie[v].ans+=trie[u].ans;\n        if(in[v]==0)q.push(v);\n    }\n}\nvoid query(char* s){\n    int u=1,len=strlen(s);\n    for(int i=0;i<len;i++)\n    u=trie[u].son[s[i]-'a'],trie[u].ans++;\n}\nint main(){\n    scanf(\"%d\",&n); cnt=1;\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",s);\n        insert(s,i);\n    }getFail();scanf(\"%s\",T);\n    query(T);topu();\n    for(int i=1;i<=n;i++)printf(\"%d\\n\",vis[Map[i]]);\n}\n```\n\n\u5982\u6709\u9700\u8981\uff0c\u8bf7\u770b\u4e2a\u4eba\u5b8c\u6574blog\uff1a[AC\u81ea\u52a8\u673a](https://www.luogu.org/blog/juruohyfhaha/ac-zi-dong-ji)",
        "postTime": 1557466929,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "> \u5f62\u5f0f\u4e0a\uff0cAC \u81ea\u52a8\u673a\u57fa\u4e8e\u7531\u82e5\u5e72\u6a21\u5f0f\u4e32\u6784\u6210\u7684 Trie \u6811\uff0c\u5e76\u5728\u6b64\u4e4b\u4e0a\u589e\u52a0\u4e86\u4e00\u4e9b fail \u8fb9\uff1b\u672c\u8d28\u4e0a\uff0c**AC \u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u5173\u4e8e\u82e5\u5e72\u6a21\u5f0f\u4e32\u7684 DFA\uff08\u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\uff0c\u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4ee5\u67d0\u4e00\u4e2a\u6a21\u5f0f\u4e32\u4f5c\u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u3002**\r\n>\r\n> \u5e76\u4e14\uff0c\u4e0e\u4e00\u822c\u81ea\u52a8\u673a\u4e0d\u540c\u7684\uff0cAC \u81ea\u52a8\u673a\u8fd8\u6709 **\u5173\u4e8e\u67d0\u4e2a\u6a21\u5f0f\u4e32\u7684\u63a5\u53d7\u72b6\u6001**\uff08\u6211\u81ea\u5df1\u8d77\u7684\u540d\u5b57..\uff09\uff0c\u4e5f\u5c31\u662f\u4e0e\u67d0\u4e2a\u6a21\u5f0f\u4e32\u5339\u914d\uff08\u4ee5\u67d0\u4e2a\u6a21\u5f0f\u4e32\u4e3a\u540e\u7f00\uff09\u7684\u90a3\u4e9b\u72b6\u6001\uff0c\u5373\u67d0\u4e2a\u6a21\u5f0f\u4e32\u5728 Trie \u6811\u4e0a\u7684\u7ec8\u6b62\u8282\u70b9\u5728 fail \u6811\u4e0a\u7684\u6574\u4e2a\u5b50\u6811\u3002\r\n\r\n\u8fd9\u6bb5\u8bdd\u6211\u5148\u653e\u4e0a\u6765\uff0c\u56e0\u4e3a\u6211\u76f8\u4fe1\u7edd\u5927\u90e8\u5206\u4eba\u5b66\u4e86 AC \u81ea\u52a8\u673a\u4e4b\u540e\u751a\u81f3\u4e0d\u77e5\u9053 AC \u81ea\u52a8\u673a\u662f\u4ec0\u4e48\uff0c\u800c\u53ea\u77e5\u9053\u5b83\u6709\u4ec0\u4e48\u7528\u3002\r\n\r\n\u8fd9\u7bc7\u9898\u89e3\u5047\u5b9a\u4f60\u4f1a AC \u81ea\u52a8\u673a\uff0c\u5982\u679c\u4e0d\u4f1a\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b[\u6211\u5199\u7684\u6559\u7a0b](https://ouuan.github.io/AC\u81ea\u52a8\u673a\u5b66\u4e60\u7b14\u8bb0)\u3002\r\n\r\n\u7136\u540e\u7684\u8bdd\uff0c\u5f88\u591a\u4eba\u7528 AC \u81ea\u52a8\u673a\u8fdb\u884c\u591a\u6a21\u5339\u914d\u65f6\u90fd\u4f1a\u66b4\u529b\u8df3 fail \u8fb9\uff0c\u4f46\u8fd9\u6837\u505a\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\uff0c\u53ef\u4ee5\u88ab\u7c7b\u4f3c\u4e8e `aaaaa\u2026\u2026aaaaa` \u8fd9\u6837\u7684\u4e32\u5361\u6389\u3002\r\n\r\n\u6b63\u786e\u7684\u505a\u6cd5\u662f\u5efa\u51fa fail \u6811\uff0c\u8bb0\u5f55\u81ea\u52a8\u673a\u4e0a\u7684\u6bcf\u4e2a\u72b6\u6001\u88ab\u5339\u914d\u4e86\u51e0\u6b21\uff0c\u6700\u540e\u6c42\u51fa\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728 Trie \u4e0a\u7684\u7ec8\u6b62\u8282\u70b9\u5728 fail \u6811\u4e0a\u7684\u5b50\u6811\u603b\u5339\u914d\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\r\n\r\n\u53c2\u8003\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <queue>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 200010;\r\nconst int T = 200010;\r\nconst int S = 2000010;\r\n\r\nvoid dfs(int u);\r\nvoid add(int u, int v);\r\n\r\nchar s[S];\r\nqueue<int> q;\r\nint head[T], nxt[T], to[T], cnt;\r\nint n, tr[T][26], fail[T], tot = 1, match[N], siz[T];\r\n\r\nint main()\r\n{\r\n    int i, j, u;\r\n\r\n    scanf(\"%d\", &n);\r\n\r\n    for (i = 1; i <= n; ++i)\r\n    {\r\n        scanf(\"%s\", s);\r\n        for (u = 1, j = 0; s[j]; ++j)\r\n        {\r\n            int c = s[j] - 'a';\r\n            if (!tr[u][c]) tr[u][c] = ++tot;\r\n            u = tr[u][c];\r\n        }\r\n        match[i] = u; // \u8bb0\u5f55\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728 Trie \u6811\u4e0a\u7684\u7ec8\u6b62\u8282\u70b9\r\n    }\r\n\r\n    for (i = 0; i < 26; ++i) tr[0][i] = 1; // \u4e00\u79cd\u6bd4\u8f83\u4e0e\u4f17\u4e0d\u540c\uff08\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u6b63\u786e\uff09\u7684 AC \u81ea\u52a8\u673a\u5efa\u6cd5\uff0c\u8be6\u89c1\u4e0a\u6587\u63d0\u5230\u7684\u6211\u5199\u7684\u535a\u5ba2\r\n\r\n    q.push(1);\r\n\r\n    while (!q.empty())\r\n    {\r\n        u = q.front();\r\n        q.pop();\r\n        for (i = 0; i < 26; ++i)\r\n        {\r\n            if (tr[u][i])\r\n            {\r\n                fail[tr[u][i]] = tr[fail[u]][i];\r\n                q.push(tr[u][i]);\r\n            }\r\n            else tr[u][i] = tr[fail[u]][i];\r\n        }\r\n    }\r\n\r\n    scanf(\"%s\", s);\r\n\r\n    for (u = 1, i = 0; s[i]; ++i)\r\n    {\r\n        u = tr[u][s[i] - 'a'];\r\n        ++siz[u]; // \u8bb0\u5f55\u5339\u914d\u6b21\u6570\r\n    }\r\n\r\n    for (i = 2; i <= tot; ++i) add(fail[i], i); // \u5efa fail \u6811\r\n\r\n    dfs(1); // \u7edf\u8ba1\u5b50\u6811\u548c\r\n\r\n    for (i = 1; i <= n; ++i) printf(\"%d\\n\", siz[match[i]]);\r\n\r\n    return 0;\r\n}\r\n\r\nvoid dfs(int u)\r\n{\r\n    int i, v;\r\n    for (i = head[u]; i; i = nxt[i])\r\n    {\r\n        v = to[i];\r\n        dfs(v);\r\n        siz[u] += siz[v];\r\n    }\r\n}\r\n\r\nvoid add(int u, int v)\r\n{\r\n    nxt[++cnt] = head[u];\r\n    head[u] = cnt;\r\n    to[cnt] = v;\r\n}\r\n```\r\n\r\n",
        "postTime": 1557223783,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1aAC\u81ea\u52a8\u673a\u7684\u6a21\u677f\u4e86\u3002\uff08\u5426\u5219\u8bf7\u53f3\u8f6c[\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u7b80\u5355\u7248\uff09](https://www.luogu.org/problemnew/show/P3808)\uff09\n\n\u6211\u4eec\u53d1\u73b0\u5bf9$S$\u8fdb\u884c\u5339\u914d\uff0c\u5339\u914d\u5230$i$\uff0c\u8d70\u5230$u$\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6211\u4eec\u5bf9$u$\u4e0d\u505c\u5730\u4ecefail\u6307\u9488\u5f80\u4e0a\u8df3\uff0c\u8c03\u5230\u7684\u6240\u6709\u8282\u70b9\u5982\u679c\u6709$T_i$\u7684\u7ed3\u5c3e\u5b57\u7b26\u5c31\u5bf9$T_i$\u5339\u914d\u6210\u529f\u4e00\u6b21\u3002\u6211\u4eec\u8bb0\u5f55\u4e00\u4e0b$T_i$\u7684\u7ed3\u5c3e\u5b57\u7b26\u7684\u8282\u70b9\uff0c\u7136\u540e\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5bf9$1-u$\u4e0a\u6240\u6709\u8282\u70b9+1\uff0c\u6700\u540e\u76f4\u63a5\u8f93\u51fa\u5c31\u53ef\u4ee5\u3002\n\n\u76f4\u63a5\u7528\u6811\u4e0a\u5dee\u5206\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5b50\u6811\u548c\u3002\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define Rint register int\nusing namespace std;\nconst int N = 200003, M = 2000003;\nint n, ch[N][26], fail[N], val[N], sum[N], tot;\nchar t[N], s[M];\nint q[N], front, rear;\ninline void insert(const char *s, int id){\n    int now = 0;\n    for(;*s;s ++){\n        int v = *s - 'a';\n        if(!ch[now][v]) ch[now][v] = ++ tot;\n        now = ch[now][v];\n    }\n    val[id] = now;\n}\ninline void getfail(){\n    for(Rint i = 0;i < 26;i ++)\t\n        if(ch[0][i]) q[rear ++] = ch[0][i];\n    while(front < rear){\n        int now = q[front ++];\n        for(Rint i = 0;i < 26;i ++)\n            if(ch[now][i]){\n                fail[ch[now][i]] = ch[fail[now]][i];\n                q[rear ++] = ch[now][i];\n            } else\n                ch[now][i] = ch[fail[now]][i];\n    }\n}\ninline void query(const char *s){\n    int now = 0;\n    for(;*s;s ++){\n        now = ch[now][*s - 'a'];\n        ++ sum[now];\n    }\n}\nint head[N], to[N], nxt[N];\ninline void add(int a, int b){\n    static int cnt = 0;\n    to[++ cnt] = b; nxt[cnt] = head[a]; head[a] = cnt;\n}\ninline void dfs(int x){\n    for(Rint i = head[x];i;i = nxt[i]){\n        dfs(to[i]);\n        sum[x] += sum[to[i]];\n    }\n}\nint main(){\n    scanf(\"%d\", &n);\n    for(Rint i = 1;i <= n;i ++){\n        scanf(\"%s\", t);\n        insert(t, i);\n    }\n    getfail();\n    scanf(\"%s\", s);\n    query(s);\n    for(Rint i = 1;i <= tot;i ++) add(fail[i], i);\n    dfs(0);\n    for(Rint i = 1;i <= n;i ++)\n        printf(\"%d\\n\", sum[val[i]]);\n}\n```",
        "postTime": 1557575235,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# ~~\u5de8\u6162\u7684~~SA\u89e3\u6cd5\n\n~~\u201c\u53ea\u6709SA\u53ef\u4ee5\u5417\uff1f\u201d~~  *(\u9996)*\n\n\u540e\u7f00\u6570\u7ec4\uff08SA\uff09\u662f\u4e00\u4e2a\u548cSAM\u5e76\u5217\u7684\u5f3a\u5927\u5b57\u7b26\u4e32\u7b97\u6cd5\uff0c\u5728\u5f88\u591a\u9898\u4e2d\u5b83\u4eec\u53ef\u4ee5\u4e92\u76f8\u66ff\u4ee3\u3002\u5982\u679c\u6ca1\u6709\u5b66\u8fc7\uff0c\u53ef\u4ee5\u53bb[SA\u6a21\u677f](https://www.luogu.com.cn/problem/P3809)\u5b66\u4e60\u4e00\u4e0b\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u5bf9\u6587\u672c\u4e32$S$\u5efa\u7acbSA\u3002\u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u4e32$T$\uff0c\u6211\u4eec\u53ef\u4ee5\u5728SA\u4e0a\u4e8c\u5206\uff0c\u7528$|T| \\log |S|$\u7684\u590d\u6742\u5ea6\u6c42\u51fa\u6bd4$T$\u5b57\u5178\u5e8f\u5c0f\u7684$S$\u7684\u540e\u7f00\u4e2a\u6570\u3002\u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5728$T$\u540e\u6dfb\u52a0\u4e00\u4e2a\u6781\u5927\u7684\u5b57\u7b26\uff0c\u4e8c\u5206\u51fa\u7b54\u6848$r$\uff0c\u518d\u628a$T$\u6700\u540e\u4e00\u4e2a\u5b57\u7b26$-1$\uff0c\u4e8c\u5206\u51fa\u7b54\u6848$l$\uff0c\u6c42\u51fa\u7684$r-l$\u5c31\u662f\u4ee5$T$\u4e3a\u524d\u7f00\u7684$S$\u7684\u540e\u7f00\u6570\uff0c\u4e5f\u5c31\u662f$T$\u5728$S$\u7684\u51fa\u73b0\u6b21\u6570\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define R register\n\nusing namespace std;\nconst int MAXN = 2e6 + 6;\n\nint n, slen, len[MAXN], sum[MAXN];\nchar S[MAXN], T[MAXN], str[MAXN];\n\nstruct SuffixArray{\n\tint n, m;\n\tint sa[MAXN], rk[MAXN], tx[MAXN], tp[MAXN];\t\n\t\n\tvoid Init(int a, int b, char *s) {\n\t\tn = a;\n\t\tm = b;\n\t\tfor (R int i = 1; i <= n; i++) {\n\t\t\trk[i] = s[i];\n\t\t\ttp[i] = i;\n\t\t}\n\t}\n\t\n\tvoid RSort() {\n\t\tfor (R int i = 0; i <= m; i++) tx[i] = 0;\n\t\tfor (R int i = 1; i <= n; i++) tx[rk[i]]++;\n\t\tfor (R int i = 1; i <= m; i++) tx[i] += tx[i - 1];\n\t\tfor (R int i = n; i >= 1; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n\t}\n\t\n\tvoid Build() {\n\t\tRSort();\n\t\tfor (R int w = 1, p = 1; p < n; w <<= 1, m = p) {\n\t\t\tp = 0;\n\t\t\tfor (int i = 1; i <= w; i++)\n\t\t\t\ttp[++p] = n - w + i;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (sa[i] > w)\n\t\t\t\t\ttp[++p] = sa[i] - w;\n\t\t\tRSort();\n\t\t\tswap(rk, tp);\n\t\t\trk[sa[1]] = p = 1;\n\t\t\tfor (int i = 2; i <= n; i++)\n\t\t\t\trk[sa[i]] = (tp[sa[i]] == tp[sa[i - 1]] && tp[sa[i] + w] == tp[sa[i - 1] + w]) ? p : ++p;\n\t\t}\n\t}\n}SA;\n\nint Comp(int p) {//str > S\n\tfor (int i = 1, j = p; str[i] && S[j]; i++, j++) {\n\t\tif (str[i] < S[j]) return 0;\n\t\tif (str[i] > S[j]) return 1;\n\t}\n\treturn 1;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tint p = 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%s\", T + p);\n\t\tlen[i] = strlen(T + p);\n\t\tsum[i] = sum[i - 1] + len[i];\n\t\tp = sum[i] + 1;\n\t}\n\tscanf(\"%s\", S + 1);\n\tslen = strlen(S + 1);\n\tmemcpy(str + 1, S + 1, slen);\n\tfor (int i = 1; i <= slen; i++) str[i] -= 'a' - 1;\n\tSA.Init(slen, 30, str);\n\tSA.Build();\n\tfor (R int i = 1; i <= n; i++) {\n\t\tmemcpy(str + 1, T + sum[i - 1] + 1, len[i]);\n\t\tstr[len[i] + 1] = 127;\n\t\tstr[len[i] + 2] = '\\0';\n\t\tint ans1 = 0;\n\t\tfor (R int j = 21; j >= 0; j--) {\n\t\t\tif (ans1 + (1 << j) > slen) continue;\n\t\t\tif (Comp(SA.sa[ans1 + (1 << j)]))\n\t\t\t\tans1 += (1 << j);\n\t\t}\n\t\tstr[len[i]]--;\n\t\tint ans2 = 0;\n\t\tfor (R int j = 21; j >= 0; j--) {\n\t\t\tif (ans2 + (1 << j) > slen) continue;\n\t\t\tif (Comp(SA.sa[ans2 + (1 << j)]))\n\t\t\t\tans2 += (1 << j);\n\t\t}\n\t\tprintf(\"%d\\n\", ans1 - ans2);\n\t}\n\treturn 0;\n}\n```\n\n\u867d\u7136\u6211\u5728\u8fd9\u7bc7\u4ee3\u7801\u5f53\u4e2d\u8fdb\u884c\u4e86\u5c11\u8bb8\u5361\u5e38\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u80fdAC\u8fd9\u9053\u9898\u3002\u5b9e\u9645\u4e0a\uff0c\u7528\u6211\u4eec\u5e38\u7528\u7684SA\u6765\u5b9e\u73b0\u6211\u524d\u9762\u8bb2\u7684\u601d\u8def\uff0c\u6839\u636e\u4f60\u4ee3\u7801\u7684\u5e38\u6570\u5927\u5c0f\u4e00\u822c\u4f1a\u83b7\u5f9772~84\u7684\u5206\u6570\u3002\u5f53\u7136\uff0c\u6211\u4e0d\u5426\u5b9a\u4e00\u4e9b\u5361\u5e38\u8fbe\u4eba\u53ef\u4ee5\u7528\u5e38\u7528\u7684SA\u901a\u8fc7\u7684\u53ef\u80fd\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u524d\u9762\u7684\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7684\u74f6\u9888\u5728\u4e8e\u6784\u9020$S$\u7684SA\u4f7f\u7528\u4e86$|S| \\log |S|$\u7684\u65f6\u95f4\uff0c\u800c\u8fd9\u4e2a\u590d\u6742\u5ea6\u60f3\u8981\u8dd1$2 \\times 10^6$\u4e5f\u53ea\u662f\u7406\u8bba\u53ef\u80fd\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5230SA\u7684\u6a21\u677f\u9898\uff0c\u590d\u5236\u4e00\u4e2a$O(n)$\u7684DC-3\u6216\u8005SA-IS\u751a\u81f3SAM\u6784\u9020SA\u6765\u66ff\u6362\u6211\u4ee3\u7801\u5f53\u4e2d\u7684`struct SuffixArray{}`\u3002\u8fd9\u6837\uff0c\u603b\u590d\u6742\u5ea6\u662f$O(|S| + \\sum |T| \\log |S|)$\uff0c\u53ef\u4ee5\u7a33\u5b9a\u8dd1\u8fc7\u6b64\u9898\u3002[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/31812250)\n\n~~\u4e8e\u662f\uff0c\u6211\u6210\u529f\u53d6\u4ee3\u4e86duyi\u5927\u4f6c\u7684SAM\u89e3\u6cd5\uff0c\u6210\u4e3a\u4e86\u5168\u7f51\u5012\u6570\u7b2c\u4e8c\u7684\u901a\u8fc7\u8bb0\u5f55~~",
        "postTime": 1584343151,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u6b64\u5904\u4ec5\u8bb2AC\u81ea\u52a8\u673a\u7684\u4f18\u5316,\u521a\u5f00\u59cb\u5b66\u7684\u8bf7\u53f3\u8f6c:\n\n[AC\u81ea\u52a8\u673a\u3010\u7b80\u5355\u7248\u3011](https://www.luogu.org/problem/P3808)\n\n[AC\u81ea\u52a8\u673a\u3010\u52a0\u5f3a\u7248\u3011](https://www.luogu.org/problem/P3796)\n\n\u987a\u5e26\u5ba3\u4f20\u4e0b[yyb\u5de8\u4f6c\u7684\u535a\u5ba2](https://www.cnblogs.com/cjyyb/p/7196308.html)(\u76f8\u5f53\u900f\u5f7b)\n\n---------------------------------------\n\n\u9996\u5148,\u65e2\u7136\u662f\u8f93\u51fa\u6bcf\u4e2a\u4e32(\u8fd8\u6709\u91cd\u590d),\u90a3\u4e48\u53ea\u9700\u4e00\u4e2avector[]\u5b58\u5c31\u597d\u4e86\n\n\u4f46\u65e2\u7136\u662f\u4e8c\u6b21\u52a0\u5f3a\u7248,\u90a3\u80af\u5b9a\u4f1a\u6709TLE\n\n\u4e8e\u662f\u5339\u914d\u65b9\u9762\u9a6c\u4e0a\u5c31\u80fd\u770b\u5230\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\n\n\u539f\u5339\u914d\n\n```cpp\nunsigned int p=0;\nregister char c=getchar();\nwhile('a'>c||c>'z') c=getchar();\nfor(;'a'<=c&&c<='z';c=getchar()){\n\tc-='a';\n\tp=all[p].next[c];\n   for(register int id=p;id!=0;id=all[id].nxt)\n\t\tall[id].count++;//\u6b64\u5904\u6211\u4eec\u7528\u4e00\u4e2a\u5faa\u73af\u6765\u8bb0\u5f55\n}\n```\n\n\u5f88\u660e\u663e,\u6b64\u5904\u7528\u5faa\u73af\u6548\u7387\u660e\u663e**\u592a\u4f4e\u4e86**!\n\n\u5982\u679c\u6a21\u5f0f\u4e32\u4e3arrrrrrr...(\u957f\u5ea6\u4e3an),\u5c06\u4f1a\u5faa\u73afn\u6b21\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u9000\u5316\u4e3a\u5355\u4e2aKMP\u7684 O(n*m)\n\n\u4e8e\u662f\u5c31\u80fd\u60f3\u5230\u53ea\u8bb0\u5f55AC\u81ea\u52a8\u673a\u626b\u63cf\u5230\u7684\u4f4d\u7f6e,\u4e4b\u540e\u7edf\u4e00\u9012\u5f52\u5904\u7406\n\n```cpp\nunsigned int p=0;\nregister char c=getchar();\nwhile('a'>c||c>'z') c=getchar();\nfor(;'a'<=c&&c<='z';c=getchar()){\n\tc-='a';\n\tp=all[p].next[c];\n\tall[p].count++;\n}\nfor(register int i=size;i>0;i--) //\u7edf\u4e00\u5904\u7406\n\tall[all[i].nxt].count+=all[i].count;\n```\n\n\u4f18\u5316\u7684\u5dee\u4e0d\u591a\u4e86,\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\u4e86\u7a33\u5b9a\u7684 **O(n+m)**\n\n\u4ece\u540e\u5f80\u524d\u9012\u5f52\uff0cfail\u6570\u5e94\u8be5\u7b26\u5408\u8fd9\u4e00\u89c4\u5f8b\n\n\u4ea4\u5427! [WA?!](https://www.luogu.org/record/21885090)\n\n--------------------------------------------\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591f\u4e86,\u4f46\u4e3a\u751a\u4e48\u7b54\u6848\u9519\u4e86?\n\n\u5982\u679c\u662f\u666e\u901aKMP,nxt\u53ea\u4f1a\u6307\u5411\u6a21\u5f0f\u4e32\u672c\u8eab\u7684\u524d\u7f00\n\n\u4f46AC\u81ea\u52a8\u673a\u7531\u4e8e\u662f\u5b57\u5178\u6811,\u6307\u5411\u7684\u4e0d\u4e00\u5b9a\u662f\u524d\u7f00\n\n\u56e0\u6b64**\u5b58\u50a8\u6574\u4e2afail\u6307\u9488\u6811,\u4f9d\u5e8fdfs**\u5c31\u771f\u7684\u5fc5\u8981\u4e86\n\n(\u539f\u4ee5\u4e3a\u53ef\u4ee5\u591a\u7701\u70b9\u7a7a\u95f4\u7684qwq)\n\n\u6c42nxt\u7684\u65f6\u5019,\u5b58\u513f\u5b50\u9996\u9009**\u90bb\u63a5\u8868**\n\n```cpp\nif(head[nextnxt]==0)\n\thead[nextnxt]=all[id].next[i];\nelse next[tail[nextnxt]]=all[id].next[i];\ntail[nextnxt]=all[id].next[i];\nnext[all[id].next[i]]=0;\n```\n\u7136\u540e\u7edf\u8ba1\u4fbf\u8fd9\u6837\u5199\n\n```cpp\ninline void dfs_count(int id){\n\tfor(register int i=head[id];i!=0;i=next[i]){\n\t\tdfs_count(i);\n\t\tall[id].count+=all[i].count;\n\t}\n}\n```\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5dee\u4e0d\u591a\u5c31\u5b8c\u6210\u4e86~\n\n**AC\u5b8c\u6574\u4ee3\u7801(\u4e0d\u5f00O2,1.40s,35.76MB)**\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\ninline int read(){\n    register char c=getchar(),w=1;\n    while('0'>c||c>'9'){\n        if(c=='-') w=-1;\n        c=getchar();\n    }\n    register int a=0;\n    while('0'<=c&&c<='9'){\n        a=a*10+c-'0'; \n        c=getchar();\n    }\n    return a*w;\n}//\u5feb\u8bfb(\u5c3d\u7ba1\u57fa\u672c\u6ca1\u7528) \ntemplate<unsigned int size>\nclass QUEUE{//\u6c42nxt\u7684\u961f\u5217 \n    private:\n\t\tunsigned int list[size+1];\n\t\tunsigned int head,tail;\n\tpublic:\n\t \tQUEUE(){\n\t \t\thead=tail=0;\n\t\t}\n\t \tinline void push(unsigned int in){\n\t \t\tlist[tail]=in;\n\t \t\tif(tail==size) tail=0;\n\t \t\telse tail++;\n\t \t}\n\t \tinline void pop(){\n\t \t\tif(head==size) head=0;\n\t \t\telse head++;\n\t \t}\n\t \tinline unsigned int top(){return list[head];}\n\t \tinline bool empty(){return head==tail;}\n};\nQUEUE<200000>q;\ntemplate<unsigned int length,unsigned int S_SIZE>\nclass Trie{\n    private:\n        struct point{\n        \tunsigned int next[26],nxt;\n        \tunsigned int count,floor,ans;\n\t\t}all[length+1];\n\t\tunsigned int size,s_size;\n\t\tunsigned int vector[S_SIZE+1],head[length+1],tail[length+1],next[length+1];\n    public:\n    \tTrie(){//\u5b57\u5178\u6811\u521d\u59cb\u5316 \n    \t\ts_size=size=0;\n\t\t}\n\t\tinline void read(){//\u8bfb\u5165 \n\t\t\tunsigned int p=0;\n\t\t\tregister char c=getchar();\n\t\t\twhile('a'>c||c>'z') c=getchar();\n\t\t\tfor(;'a'<=c&&c<='z';c=getchar()){\n\t\t\t\tc-='a';\n\t\t\t\tif(all[p].next[c]==0){\n\t\t\t\t\tsize++;\n\t\t\t\t\tall[p].next[c]=size;\n\t\t\t\t\tall[size].floor=all[p].floor+1;\n\t\t\t\t}\n\t\t\t\tp=all[p].next[c];\n\t\t\t}\n\t\t\ts_size++;//\u66f4\u65b0\u5411\u91cf \n\t\t\tvector[s_size]=p; \n\t\t}\n\t\tinline void getnxt(){//\u6c42nxt(\u6216fail\u6307\u9488) \n\t\t\tfor(register int i=0;i<26;i++){\n\t\t\t\tif(all[0].next[i]!=0){\n\t\t\t\t\tall[all[0].next[i]].nxt=0;\n\t\t\t\t\t \n\t\t\t\t\tif(head[0]==0) head[0]=all[0].next[i];\n\t\t\t\t\telse next[tail[0]]=all[0].next[i];\n\t\t\t\t\ttail[0]=all[0].next[i];\n\t\t\t\t\tnext[all[0].next[i]]=0;\n\t\t\t\t\t//\u90bb\u63a5\u8868\u5b58nxt\u6811\u513f\u5b50 \n\t\t\t\t\tq.push(all[0].next[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(register int id;!q.empty();){\n\t\t\t\tid=q.top();q.pop();\n\t\t\t\tfor(register int i=0,nextnxt;i<26;i++){\n\t\t\t\t\tnextnxt=all[all[id].nxt].next[i];\n\t\t\t\t\tif(all[id].next[i]==0){\n                        all[id].next[i]=nextnxt;\n                        continue;\n                        \n                    }\n\t\t\t\t\tall[all[id].next[i]].nxt=nextnxt;\n\t\t\t\t\t\t\n\t\t\t\t\tif(head[nextnxt]==0)\n\t\t\t\t\t\thead[nextnxt]=all[id].next[i];\n\t\t\t\t\telse next[tail[nextnxt]]=all[id].next[i];\n\t\t\t\t\ttail[nextnxt]=all[id].next[i];\n\t\t\t\t\tnext[all[id].next[i]]=0;\n\t\t\t\t\t//\u540c\u4e0a\t\n\t\t\t\t\tq.push(all[id].next[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinline void dfs_count(int id){\n\t\t\tfor(register int i=head[id];i!=0;i=next[i]){\n\t\t\t\tdfs_count(i);\n\t\t\t\tall[id].count+=all[i].count;\n\t\t\t}\n\t\t}//\u4f9d\u5e8f\u7edf\u8ba1 \n\t\tinline void AC_auto(){\n\t\t\tunsigned int p=0;\n\t\t\tregister char c=getchar();\n\t\t\twhile('a'>c||c>'z') c=getchar();\n\t\t\tfor(;'a'<=c&&c<='z';c=getchar()){\n\t\t\t\tc-='a';\n\t\t\t\tp=all[p].next[c];\n\t\t\t\tall[p].count++;\n\t\t\t}//\u5339\u914d \n\t\t\tdfs_count(0);\n\t\t\tfor(register unsigned int i=1;i<=s_size;i++){\n\t\t\t\tprintf(\"%d\\n\",all[vector[i]].count);\n\t\t\t}//\u8f93\u51fa \n\t\t}\n};\nTrie<200010,200010> tree;\nint main(){\n    const int n=read();\n\tfor(register int i=0;i<n;i++) tree.read();\n\ttree.getnxt();\n\ttree.AC_auto();\n    return 0; \n}\n```",
        "postTime": 1564713014,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "~~\u8d81\u8fd8\u6ca1\u6709\u4eba\u6765\u5077\u5077\u6c34\u4e00\u7bc7\u9898\u89e3~~\n\n\u9996\u5148\u65e2\u7136\u4f60\u5728\u505a\u8fd9\u9898\u60f3\u5fc5\u4f60\u5df2\u7ecf $AC$ \u4e86[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P3808)\u548c[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P3796)\uff0c\u6240\u4ee5 $AC$ \u81ea\u52a8\u673a\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u4e0d\u7528\u591a\u8bf4\u4e86\n\n\u90a3\u4e48\u9664\u4e86\u57fa\u672c\u64cd\u4f5c\u4ee5\u5916\u505a\u8fd9\u9898\u8fd8\u9700\u8981\u4ec0\u4e48\u5462\uff1f\n\n~~\u6ca1\u6709\u4e86~~\n\n\u8fd9\u9898\u8981\u6c42\u6211\u4eec\u6c42\u51fa\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff08~~\u6bd2\u7624\u7684~~\u9700\u8981\u6ce8\u610f\u7684\u662f\u4f1a\u6709\u91cd\u590d\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u62c9\u4e00\u4e2a\u94fe\u8868\uff09\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5c31\u662f\u5efa\u51fa $AC$ \u81ea\u52a8\u673a\u540e\u628a\u6587\u672c\u4e32\u5728\u4e0a\u9762\u8dd1\u4e00\u904d\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2a\u8282\u70b9\u5c31\u628a $fail$ \u6811\u4e0a\u8fd9\u4e2a\u8282\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u8ba1\u6570\u5668$+1$\n\n\u4e8e\u662f\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u5728 $fail$ \u6811\u4e0a\u7684\u6811\u4e0a\u5dee\u5206\n\n\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728 $build$ \u65f6\u7528\u7684\u961f\u5217\u91cc\u7684\u70b9\u5012\u5e8f\u4e00\u4e0b\u5c31\u662f\u5904\u7406\u5dee\u5206\u7684\u987a\u5e8f\uff0c\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\ntypedef struct node{\n    int son[26],fail;\n    int& operator [] (int x) {return son[x];}\n}node;\n\nnode t[200010];\nint n,tot,q[200010],head,tail,d[200010],ans[200010],hd[200010],nxt[200010];\nchar s[2000010];\n\nvoid insert(char *s,int id){\n    int cur=0,len=strlen(s);\n    for(int i=0;i<len;i++){\n        if(!t[cur][s[i]-'a']) t[cur][s[i]-'a']=++tot;\n        cur=t[cur][s[i]-'a'];\n    }\n    nxt[id]=hd[cur]; hd[cur]=id;\n}\n\nvoid build(){\n    head=1; tail=0;\n    for(int i=0;i<26;i++) if(t[0][i]) q[++tail]=t[0][i];\n    while(head<=tail){\n        int x=q[head++];\n        for(int i=0;i<26;i++){\n            if(t[x][i]) t[t[x][i]].fail=t[t[x].fail][i],q[++tail]=t[x][i];\n            else t[x][i]=t[t[x].fail][i];\n        }\n    }\n}\n\nvoid solve(){\n    scanf(\"%s\",s);\n    int cur=0,len=strlen(s);\n    for(int i=0;i<len;i++) {cur=t[cur][s[i]-'a']; d[cur]++;}\n    for(int i=tot;i>=1;i--){\n        for(int j=hd[q[i]];j;j=nxt[j]) ans[j]=d[q[i]];\n        d[t[q[i]].fail]+=d[q[i]];\n    }\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {scanf(\"%s\",s); insert(s,i);}\n    build(); solve();\n    for(int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1557238519,
        "uid": 100037,
        "name": "kkxhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u505a\u4e86\u5f88\u4e45\u3002\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u53e6\u4e00\u79cd\u7edf\u8ba1\u65b9\u6cd5\uff1a\uff08\u5176\u4f59\u5c31\u770b\u697c\u4e0a\u9898\u89e3\u5427\uff09\n\nbfs\u65f6\u628a\u6240\u6709trie\u6811\u4e0a\u8282\u70b9\u7528stack\u5b58\u8d77\u6765\uff0c\n\u7edf\u8ba1\u7b54\u6848\u65f6\u6309stack\u91cc\u7684\u987a\u5e8f\uff08\u9006\u5e8f\uff09\u8bbf\u95ee\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\uff0c\u4e0d\u9700\u8981dfs\uff08\u7136\u800c\u65f6\u95f4\u597d\u50cf\u5dee\u4e0d\u591a\u3002\u3002\uff09\n\n\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f\u9006\u5e8f\u4fdd\u8bc1\u4e86\u5728\u8bbf\u95ee\u8fd9\u4e2a\u8282\u70b9\u7684fail\u4e4b\u524d\u5b83\u4e00\u5b9a\u88ab\u8bbf\u95ee\u8fc7\u3002\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\u3002\u3002\n\n1728ms~~\u672c\u4eba\u81ea\u5e26\u5927\u5e38\u6570\uff0c\u52ff\u55b7~~\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<stack>\nusing namespace std;\nint read(){\n    int x=0,pos=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') pos=0;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n    return pos?x:-x;\n}\nint n;char s[200001],m[2000051];int pans[10000001],siz[10000051];\nint ans[200001];\nint l[200001],lnk[200001];\nstruct ac{\n    int son[30],fail,end;\n}tree[10000001];\nstruct node{\n    int v,nex;\n}edge[1000001];\nint tope=0,head[1000001];\nvoid add(int from,int to){\n    edge[++tope].v=to;\n    edge[tope].nex=head[from];\n    head[from]=tope;\n}\nint tot=0;\nvoid insert(int cnt){\n    int now=0;int len=l[cnt];\n    for(int i=0;i<len;i++){\n        if(!tree[now].son[s[i]-'a']){\n            tree[now].son[s[i]-'a']=++tot;\n            memset(tree[tot].son,0,sizeof(tree[tot].son));\n        }\n        now=tree[now].son[s[i]-'a'];\n    }\n    lnk[cnt]=now;\n    return;\n}\nstack<int>st;\nvoid bfs(){\n    queue<int>q;\n    for(int i=0;i<26;i++){\n        if(tree[0].son[i]) {\n            tree[tree[0].son[i]].fail=0; \n            q.push(tree[0].son[i]);\n        }\n    }\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=0;i<26;i++){\n            if(tree[now].son[i]){\n                int nex=tree[now].son[i];\n                tree[nex].fail=tree[tree[now].fail].son[i];\n                q.push(nex);\n            }else tree[now].son[i]=tree[tree[now].fail].son[i];\n        }\n        st.push(now);\n    }\n}\nvoid search(){\n    int now=0,len=strlen(m);\n    for(int i=0;i<len;i++){\n        now=tree[now].son[m[i]-'a'];\n        siz[now]++;\n    }\n    now=0;\n    while(!st.empty()){\n    \tnow=st.top();st.pop();\n    \tsiz[tree[now].fail]+=siz[now];\n    }\n    return;\n}\nint main(){\n    n=read(); \n    tot=0;\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",s);\n        int len=strlen(s);\n        l[i]=len;\n        insert(i);\n    }\n    scanf(\"%s\",m);\n    bfs();\n    search();\n    for(int i=1;i<=n;i++){\n    \tprintf(\"%d\\n\",siz[lnk[i]]);\n    }\n    return 0;\n} \n```\n",
        "postTime": 1557403901,
        "uid": 48744,
        "name": "TLE\u81ea\u52a8\u673a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u53c2\u8003\u4e86\u697c\u4e0a\u7528\u62d3\u6251\u6392\u5e8f\u4f18\u5316\u7684,\u7528\u6307\u9488\u5199\u7684,\u53e6\u5916\u7528\u4e86unordered_map\u4f18\u5316\u4e86\u8f93\u5165\u91cd\u590d\u4e32\u7684\u95ee\u9898,\u9047\u89c1\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u8bb0\u5f55\u4e4b\u524d\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u4f4d\u7f6e.\n```\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\ntypedef struct Trie Trie;\nvector<Trie*>arr;//\u5b58\u5165AC\u81ea\u52a8\u673a\u4e2d\u6240\u6709\u7684\u8282\u70b9\nstruct Trie {\n\tTrie* links[26];\n\tTrie* fail;\n\tbool flag;//\u8bb0\u5f55\u662f\u5426\u662f\u5b57\u7b26\u4e32\n\tint postion, in, ans;//postion \u8bb0\u5f55\u8be5\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e \u9ed8\u8ba4\u4e3a -1 , in \u4e3a\u8be5\u8282\u70b9\u7684\u5165\u5ea6 ans \u4e3a\u8ddd\u79bb\n\tTrie() {\n\t\tmemset(links, 0, sizeof links);\n\t\tflag = false; fail = 0, postion = -1, in = ans = 0;\n\t}\n};\nvoid Insert_string(string str, Trie* p, int postion) {\n\tfor (auto vi : str) {\n\t\tint ch = vi - 'a';\n\t\tif (p->links[ch] == nullptr)\n\t\t\tp->links[ch] = new Trie();\n\t\tp = p->links[ch];\n\t}\n\tp->flag = true, p->postion = postion;\n}\nvoid Build_fail(Trie* root) {\n\tqueue<struct Trie*>qu; qu.push(root);\n\twhile (!qu.empty()) {\n\t\tauto first = qu.front(); qu.pop();\n\t\tfor (int i = 0; i < 26; ++i) {\n\t\t\tif (first->links[i]) {\n\t\t\t\tarr.push_back(first->links[i]);\n\t\t\t\tqu.push(first->links[i]);\n\t\t\t\tif (first == root)\n\t\t\t\t\tfirst->links[i]->fail = root;\n\t\t\t\telse {\n\t\t\t\t\tauto father = first->fail;\n\t\t\t\t\twhile (father) {\n\t\t\t\t\t\tif (father->links[i]) {\n\t\t\t\t\t\t\tfirst->links[i]->fail = father->links[i];\n\t\t\t\t\t\t\t++first->links[i]->fail->in;//fail \u6307\u5411\u7684\u8282\u70b9\u5165\u5ea6 +1\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfather = father->fail;\n\t\t\t\t\t}\n\t\t\t\t\tif (father == nullptr)first->links[i]->fail = root;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid ac(string text, Trie* root) {\n\tauto p = root;\n\tfor (auto vi : text) {\n\t\tint ch = vi - 'a';\n\t\twhile (p && p->links[ch] == nullptr)p = p->fail;\n\t\tif (p == nullptr) { p = root; continue; }\n\t\tp = p->links[ch];\n\t\t++p->ans;\n\t}\n}\nint main(void) {\n\tios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n\tint n; cin >> n;\n\tTrie A;\n\tstring str, text;\n\tvector<int>postion(n + 1);\n\tunordered_map<string, int>mp;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> str;\n\t\tif (mp.count(str)) {\n\t\t\tpostion[i] = -mp[str]; continue;//\u5982\u679c\u8be5\u5b57\u7b26\u4e32\u4e4b\u524d\u63d2\u5165\u4e86,\u90a3\u4e48 vector<i> \u8bb0\u5f55\u4e4b\u524d\u8be5\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\n\t\t}\n\t\tmp.insert({ str,i });\n\t\tInsert_string(str, &A, i);\n\t}\n\tBuild_fail(&A);\n\tcin >> text;//\u6587\u672c\u4e32\n\tac(text, &A);\n\n\t//\u62d3\u6251\u6392\u5e8f\n\tqueue<Trie*>qu;\n\tfor (auto vi : arr)//\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\u5165\u961f\n\t\tif (!vi->in)qu.push(vi);\n\twhile (!qu.empty()) {\n\t\tauto tmp = qu.front(); qu.pop();\n\t\ttmp->fail->ans += tmp->ans;\n\t\t--tmp->fail->in;\n\t\tif (tmp->flag)\n\t\t\tpostion[tmp->postion] += tmp->ans;\n\t\tif (!tmp->fail->in)\n\t\t\tqu.push(tmp->fail);\n\t}\n\n\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (postion[i] < 0)//\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u5b57\u7b26\u4e32\u4e0e -postion[i] \u4f4d\u7f6e\u7684\u5b57\u7b26\u4e32\u76f8\u540c\n\t\t\tcout << postion[-postion[i]] << endl;\n\t\telse\n\t\t\tcout << postion[i] << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570688374,
        "uid": 262891,
        "name": "tq20191005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5357 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u4e8c\u6b21\u52a0\u5f3a\u7248\uff09\u3011"
    }
]