[
    {
        "content": "\u7b54\u6848\u4e2d\u7684\u7403\u6570\u6709\u901a\u9879\u516c\u5f0f\uff0c\u6253\u8868\u540e\u53d1\u73b0\u662f+2+4+4+6+6+8+\u2026\u2026\n\n\u5177\u4f53\u8bc1\u660e\u7b49\u5927\u4f6c\u6765\u8bc1\uff0c\u6211\u8fd9\u91cc\u7ed9\u4e2a\u901a\u9879\n\n(n\\*(n+2)+(n&1)-2)/2\n\n\u7ffb\u7ffb\u4ee5\u524d\u505a\u7684\u9898\uff0c\u770b\u5230\u5e95\u4e0b\u4e00\u5806\u7684\u7f51\u7edc\u6d41\uff0c\u628a\u8d2a\u5fc3\u7684\u9898\u89e3\u8865\u5b8c\u6574\n\n\u77e5\u9053\u67f1\u5b50\u4e2a\u6570\u540e\uff0c\u53ef\u4ee5\u8d2a\u5fc3\u5f97\u6c42\u5f97\u6bcf\u6839\u67f1\u5b50\u4e0a\u7684\u7403\uff0c\u76f4\u63a5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u7403\u770b\u80fd\u5426\u80fd\u5426\u653e\u5165\u5373\u53ef\uff0c\u6548\u7387O(n*m)\n```cpp\n#include<cstdio>\n#include<cmath>\nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\n#define go(a,b,c) for(int a=b;a>=c;a--)\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nint min(int a,int b){return a<b?a:b;}\nint max(int a,int b){return a>b?a:b;}\nint sqr(int a){return a*a;}\nint a[100][100];\nint main(){\n    int n=read(),m=(n*(n+2)+(n&1)-2)/2;\n    printf(\"%d\\n\",m);\n    fo(i,1,m)fo(j,1,n){\n    \tint x=a[j][a[j][0]];\n    \tif(!x||sqr(int(sqrt(x+i)))==x+i)\n    \t    {a[j][++a[j][0]]=i;break;}\n\t}\n    fo(i,1,n){\n    \tfo(j,1,a[i][0])\n\t\t    printf(\"%d \",a[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n    return 0;\n}\n```",
        "postTime": 1504438968,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": " **\u849f\u84bb\u505a\u7684\u7b2c\u4e00\u9053\u7f51\u7edc\u6d41\u6784\u9020\u9898\uff0c\u592a\u7ecf\u5178\u4e86\u6545\u5199\u9898\u89e3\u5df2\u8bb0\u4e4b\u3002**\n\n**20.3.4\u66f4\u65b0\uff1a\u4ee3\u7801\u6b63\u786e\u6027\u6709\u4fdd\u8bc1\uff0c\u6c42\u6c42\u5b81\u522b\u5728\u8bc4\u8bba\u533a\u5410\u69fd\u4e86\u3002**\n\n\u5927\u591a\u6570\u9898\u89e3\u90fd\u662f\u76f4\u63a5\u4ece\u7f51\u7edc\u6d41\u89d2\u5ea6\u6765\u8003\u8651\uff0c\u6211\u89c9\u5f97\u8fd9\u6837\u5e76\u4e0d\u5408\u9002\uff0c\u5982\u679c\u6bd4\u8d5b\u7684\u65f6\u5019\u6ca1\u6709TAG\u7ed9\u4f60\u70b9\uff0c\u50cf\u8fd9\u79cd\u7c7b\u578b\u7684\u95ee\u9898\u90fd\u5f88\u5bb9\u6613\u5f80\u627e\u89c4\u5f8b\u4e0a\u9760\uff08\u4f46\u6b64\u9898\u786e\u5b9e\u53ef\u4ee5\u627e\u89c4\u5f8b\uff09\u3002\n\n### \u4e8e\u662f\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u53eb\u201c\u9690\u5f0f\u56fe\u201d\u7684\u6982\u5ff5\u3002\n\n\u9690\u5f0f\u56fe\u987e\u540d\u601d\u4e49\uff0c\u5927\u767d\u8bdd\u6765\u8bb2\u5c31\u662f\u9898\u76ee\u770b\u7740\u4e0d\u50cf\u662f\u56fe\u8bba\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u9650\u5236\u6216\u5173\u8054\u8fdb\u884c\u5efa\u70b9\uff0c\u8fde\u8fb9\uff0c\u6700\u7ec8\u901a\u8fc7\u56fe\u8bba\u7684\u4e00\u4e9b\u7b97\u6cd5\u6765\u6c42\u89e3\u3002\n\n\u90a3\u4e48\u5c31\u6b64\u9898\u6765\u770b\uff0c~~\u7ecf\u601d\u8003\u4e00\u4f1a\u53ef~~\u53d1\u73b0\u8fd9\u9898\u7684\u67f1\u5b50\u5e76\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u7684\u4f5c\u7528\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u5173\u4e8e\u73e0\u5b50\u7684\u7f16\u53f7\u7684\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5**\u4ee5\u6bcf\u4e00\u4e2a\u73e0\u5b50\u4e3a\u70b9\uff0c\u82e5\u6ee1\u8db3\u6761\u4ef6\uff08\u7f16\u53f7\u76f8\u52a0\u4e3a\u5e73\u65b9\u6570\uff09\u5c31\u4e24\u4e24\u8fde\u8fb9**\uff0c\u90a3\u4e48\u5c31\u53ef\u5f97\u5230\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/54357.png)\n\n\u5177\u4f53\u600e\u4e48\u8fde\u653e\u4ee3\u7801\u91cc\u8bf4\u3002\n\n\u9898\u76ee\u8981\u4f60\u6c42 \u201c\u5bf9\u4e8e\u7ed9\u5b9a\u7684n\uff0c\u8ba1\u7b97\u5728n\u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u7403\u201d\uff0c\u8f6c\u5316\u6210\u56fe\u7684\u95ee\u9898\u5c31\u662f **\u201c\u5bf9\u4e8e\u7ed9\u5b9a\u7684n\uff0c\u8ba1\u7b97\u4e0d\u8d85\u8fc7n\u6761\u8def\u5f84\u6700\u591a\u53ef\u4ee5\u8986\u76d6\u591a\u5c11\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\u201d**\uff0c\u5982\u679c\u60a8\u5df2\u7ecf\u5b66\u4e86$DAG$\u7684\u4e00\u4e9b\u4e8c\u5206\u56fe\u76f8\u5173\u6027\u8d28\uff0c\u5e94\u8be5\u5c31\u77e5\u9053\u4e86\uff1a\t\n\n        \u6700\u5c0f\u8fb9\u8986\u76d6=\u70b9\u603b\u6570-\u6700\u5927\u5339\u914d\u3002 \n        \n\u6709\u8fd9\u4e48\u4e2a\u6027\u8d28\uff0c\u4e8e\u662f\u518d\u5c06\u6b64\u56fe\u8fdb\u884c**\u62c6\u70b9**\uff0c\u8f6c\u5316\u6210\u4e8c\u5206\u56fe\u7684\u5f62\u5f0f\uff0c\u6bcf\u52a0\u4e00\u4e2a\u70b9\u5c31\u5728\u4e0a\u9762\u8dd1\u5308\u7259\u5229/\u7f51\u7edc\u6d41\u5e76\u7edf\u8ba1\u603b\u5339\u914d\uff0c\u5982\u679c\u53d1\u73b0 `\u70b9\u603b\u6570-\u6700\u5927\u5339\u914d>\u6700\u5c0f\u8fb9\u8986\u76d6` \u90a3\u5c31\u9000\u51fa\u3002\n\n**\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c** \u6211\u4eec\u6bcf\u6b21\u91cd\u65b0\u8dd1\u7f51\u7edc\u6d41\u65f6\uff0c\u90fd\u662f\u5728\u8dd1**\u6b8b\u91cf\u7f51\u7edc**\uff0c\u610f\u601d\u5c31\u662f\u6211\u4eec\u6bcf\u6b21\u6240\u5f97\u7684\u6700\u5927\u6d41\u90fd\u662f**\u589e\u52a0\u7684\u5339\u914d\u6570**\uff0c\u6240\u4ee5\u5c31\u518d\u641e\u4e2a\u53d8\u91cf\u7d2f\u52a0\u5f97\u5230\u603b\u7684\u5339\u914d\u6570\u3002\n\n\n### \u4f46\u662f\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898\u662f\u6c42\u4ed6\u7684\u8def\u5f84\u3002\n\n\u5176\u5b9e\u628a\u7f51\u7edc\u6d41\u539f\u7406\u641e\u61c2\u4e86\u4e5f\u4e0d\u96be\uff0c\u4e8c\u5206\u56fe\u91cc\u7684\u7f51\u7edc\u6d41\u8def\u5f84\u7b49\u4ef7\u4e8e\u4ed6\u628a\u6d41\u91cf\u8dd1\u6ee1\u7684\u8def\u5f84\uff08\u6d41\u91cf\u5747\u4e3a1\uff09\uff0c\u4e8e\u662f\u6700\u540e\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u627e\u4e00\u904d\uff0c\u770b\u5230\u54ea\u4e2a\u70b9\u6ee1\u6d41\u4ed6\u7684\u4e0b\u4e00\u6b65\u5c31\u662f\u90a3\u4e2a\u70b9\uff0c\u50a8\u5b58\u4e00\u4e0b\u6700\u540e\u8f93\u51fa\u5373\u53ef\u3002\n\n**\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1a**\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#define N 10000\n#define NN 30000\n#define inf 2147483647\nusing namespace std;\n\nstruct ed{\n\tint u,next,w;\n}e[200000];\nint spr[10000],n,st=1,sum,c[50001],fir[50001],d[50100];\nqueue<int> q; bool v[50000];\nint to[10000],pd[10000]; \n\nvoid add(int x,int y,int w)\n{\n\te[++st].u=y; e[st].next=fir[x]; e[fir[x]=st].w=w;\n}\n\nbool bfs()\n{\n\tfor (int i=0;i<=50000;i++) d[i]=inf/2,v[i]=0,c[i]=fir[i];\n\tq.push(0); v[0]=1; d[0]=0;\n\twhile (!q.empty())\n\t{\n\t\tint k=q.front(); q.pop();\n\t\tfor (int i=fir[k];i;i=e[i].next)\n\t\t{\n\t\t\tint u=e[i].u,w=e[i].w;\n\t\t\tif (d[u]>d[k]+1&&w)\n\t\t\t{\n\t\t\t\td[u]=d[k]+1; if (!v[u]) v[u]=1,q.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn (d[NN]<inf/2);\n}\nint dfs(int p,int now)\n{\n\tif (p==NN) return now;\n\tint mw=0,used=0;\n\tfor (int i=c[p];i;i=e[i].next){\n\t\tc[p]=i; int u=e[i].u,w=e[i].w;\n\t\tif (d[u]==d[p]+1&&w)\n\t\tif (mw=dfs(u,min(w,now-used)))\n\t\t{\n\t\t\te[i].w-=mw; e[i^1].w+=mw; used+=mw;\n\t\t\t\n\t\t\tif (used==now) break;\n\t\t}\n\t}\n\treturn used;\n}\n\nint dinic()\n{\n\tint ans=0;\n\twhile (bfs()) ans+=dfs(0,inf);\n\treturn ans;\n}\n\nvoid check()\n{\n\tfor (int i=0;i<=n;i++) \n\tfor (int j=fir[i];j;j=e[j].next) cout<<i<<\" \"<<e[j].u<<\" \"<<e[j].w<<endl;\n\tfor (int i=10001;i<=10001+n;i++) \n\tfor (int j=fir[i];j;j=e[j].next) cout<<i<<\" \"<<e[j].u<<\" \"<<e[j].w<<endl;\n\n}\n\nint main()\n{\n\tcin>>n;\n\tfor (int i=1;i<=5000;i++) spr[i]=i*i;\n\tint num=1;\n\twhile (\"lyc qwq!\")  //\u819c\u540c\u5b66\u4fdd\u5e73\u5b89\n\t{\n\t\tint kk=lower_bound(spr+1,spr+1000,num)-spr;\n\t\tadd(0,num,1),add(num,0,0),add(num+N,NN,1),add(NN,num+N,0);\n        \t//\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6765\u786e\u7acb\u5f53\u524d\u7684\u6570\u6700\u5927\u53ef\u4ee5\u5339\u914d\u5230\u90a3\u4e2a\u5e73\u65b9\u6570\uff08\u6bcf\u6b21\u90fd\u53ea\u8fde\u6bd4\u4ed6\u5c0f\u7684\u8fb9\uff0c\u5c31\u907f\u514d\u4e86\u91cd\u590d\uff09\n\t\tfor (int j=2*kk;j>=1;j--)\n\t\t{\n\t\t\tint k=spr[j]-num;\n\t\t\tif (k<num&&k>0) add(k,N+num,1),add(N+num,k,0);\n\t\t\t//\u628a\u9690\u5f0f\u56fe\u76f4\u63a5\u8f6c\u4e3a\u4e8c\u5206\u56fe\n\t\t}\n\t\tint ans=dinic(); sum+=ans;\n\t\tif (num-sum>n) break;\n\t\tnum++;\t\n\t}  //\u5c31\u662f\u90a3\u4e2a\u516c\u5f0f\u7684\u4f53\u73b0\n\tcout<<num-1<<endl;\n\tfor (int k=1;k<num;k++)\n\t{\n\t\tfor (int i=fir[k];i;i=e[i].next) if (!e[i].w) {\n\t\t\t\tto[k]=e[i].u-N; break;\n\t\t\t}//\u7531\u4e8e\u5b58\u4e8c\u5206\u56fe\u7684\u65f6\u5019\u62c6\u70b9\u591a\u52a0\u4e86N\uff0c\u8fd9\u91cc\u51cf\u6389\n\t}\n\tfor (int i=1;i<num;i++)  //\u9012\u63a8\u6c42\u89e3\u3002\n\t{\n\t\tif (pd[i]) continue; \n\t\tfor(int k=i;k>0;k=to[k])\n\t\t{\n\t\t\tpd[k]=1;\n\t\t\tcout<<k<<\" \";\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1552834931,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2765  \u3010\u7f51\u7edc\u6d4124\u9898\u3011\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "\u9b54\u672f\u7403\u95ee\u9898\n\n\u4f5c\u4e3a\u53d8\u6362\u578b\u7684\u7b2c\u4e00\u9053\u7f51\u7edc\u6d41\u9898\uff0c\u6709\u5fc5\u8981\u597d\u597d\u5199\u4e00\u4e0b\u601d\u8def\u3002\n\n\u9996\u5148\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u7684\u9898\uff0c\u7f51\u7edc\u6d41dinic\u7b97\u6cd5\u7684\u6838\u5fc3\u662fdfs\uff0c\n\n\u5176\u4f5c\u7528\u662f\u5bf9\u5df2\u6709\u7684\u7f51\u7edc\u8fdb\u884c\u8c03\u6574\uff0c\u627e\u51fa\u4e00\u6761\u81f3\u5c11\u4e3a1\u53ef\u4ee5\u5230\u8fbe\u91cd\u70b9\u7684\u8def\u5f84\n\n\u5176\u4e2d\u8c03\u6574\u7684\u6838\u5fc3\u662f\u53cd\u5411\u8fb9\n\n\u89c2\u5bdf\u672c\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8fdb\u6765\u7684\u7f16\u53f7\u7684\u7403\uff0c\u4ed6\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\n\n1.\u653e\u5728\u67d0\u4e2a\u548c\u4ed6\u7ec4\u6210\u5e73\u65b9\u6570\u7684\u7403\u7684\u540e\u9762\n\n2.\u72ec\u7acb\u95e8\u6237\n\n\u6211\u4eec\u8981\u4f7f\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u5408\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u53d1\u6325\u7f51\u7edc\u6d41\u8c03\u6574\u7684\u4f18\u52bf\n\n\u5bf9\u4e8e\u4e24\u79cd\u60c5\u51b5\uff0c\u4e3a\u4e86\u4f7f\u7ed3\u679c\u5408\u6cd5\uff0c\u6211\u4eec\u59d1\u4e14\u5148\u5c06\u5b83\u548ct\u76f4\u63a5\u76f8\u8fde\n\n2\u60c5\u51b5\u663e\u7136\u8981\u548cs\u76f8\u8fde\uff0c1\u60c5\u51b5\u8981\u548c\u524d\u9762\u7684\u70b9\u76f8\u8fde\n\n\u53c8\u548cs\u76f8\u8fde\uff0c\u53c8\u548ct\u76f8\u8fde\uff0c\u8fd8\u8981\u548c\u522b\u7684\u70b9\u76f8\u8fde\uff0c\u663e\u7136\u4e00\u4e2a\u70b9\u662f\u4e0d\u591f\u7684\n\n\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u5206\u5f00\u6765\uff0c\u5206\u5f00\u6765\u7684\u4e24\u4e2a\u70b9\u4e0d\u80fd\u76f8\u8fde\uff0c\u5426\u5219\u6700\u5927\u6d41\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\n\n\u76f4\u63a5s-u-u'-t\u663e\u7136\u6ca1\u6709\u8c03\u6574\u7684\u4f5c\u7528\n\n\u90a3\u4e48\u6211\u4eec\u5c06u\u548cs\u76f8\u8fde\uff0cu\u2019\u548ct\u76f8\u8fde\uff0c\u4e3a\u4e86\u6ee1\u8db3\u7b2c\u4e00\u79cd\u6761\u4ef6\n\n\u6ee1\u8db3\u5173\u7cfb\u7684\u4e24\u4e2a\u70b9u\u3001v\uff0c\u5efa\u7acbv-u'\n\n\u90a3\u4e48\u5728\u56fe\u4e2d\u8dd1\u6700\u5927\u6d41\u7b97\u6cd5\u5373\u53ef\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<iomanip>\n    #include<algorithm>\n    #include<cmath>\n    #include<queue>\n    #define in(x) scanf(\"%d\",&x)\n    using namespace std;\n    const int maxn=1e5;\n    int n,all=0,num=0,nxt[maxn],to[maxn],head[maxn],d[maxn];\n    int w[maxn],cnt=1,s=0,t=50003,re[maxn],xia[maxn],vis[maxn];\n    queue<int>q;\n    void add(int x,int y,int we)\n    {\n        nxt[++cnt]=head[x];head[x]=cnt;to[cnt]=y;w[cnt]=we;\n        nxt[++cnt]=head[y];head[y]=cnt;to[cnt]=x;w[cnt]=0;\n    }\n    int bfs()\n    {\n        while(q.size()) q.pop();q.push(s);\n        memset(d,0,sizeof(d));d[s]=1;\n        while(q.size())\n        {\n            int x=q.front();q.pop();\n            for(int i=head[x];i;i=nxt[i])\n            {\n                int u=to[i];\n                if(d[u]||w[i]<=0) continue;\n                d[u]=d[x]+1;\n                q.push(u);\n            }\n        }\n        return d[t];\n    }\n    int dfs(int x,int flow)\n    {\n        if(x==t) return flow;\n        int k;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            int u=to[i];\n            if(d[u]!=d[x]+1||w[i]<=0) continue;\n            if(k=dfs(u,min(w[i],flow)))\n            {\n                w[i]-=k;w[i^1]+=k;\n                if(u!=t) xia[x>>1]=u>>1;\n                return k;\n            }\n        }\n        return 0;\n    }\n    int dinic()\n    {\n        int k=0;\n        while(bfs())\n        {\n            while(1)\n            {\n                int p=dfs(s,1e9);\n                if(!p) break;\n                k+=p;\n            }\n        }\n        return k;\n    }\n    int main()\n    {\n        in(n);\n        while(all<=n)\n        {\n            num++;add(s,num<<1,1);add((num<<1)|1,t,1);\n            for(int i=sqrt(num)+1;i*i<2*num;++i)\n            add((i*i-num)<<1,(num<<1)|1,1);\n            int k=dinic();\n            if(!k) re[++all]=num;\n        }\n        printf(\"%d\\n\",--num);\n        for(int i=1;i<=n;++i)\n        {\n            if(vis[re[i]]) continue;\n            int x=re[i];vis[x]=1;\n            while(x!=0)\n            {\n                printf(\"%d \",x);\n                x=xia[x];vis[x]=1;\n            }\n            printf(\"\\n\");\n        }\n        return 0;\n}\n```",
        "postTime": 1513997445,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "\u8fd9\u662f\u5bf9[mjtlyzbsy](https://www.luogu.org/space/show?uid=35775)\u540c\u5b66\u9898\u89e3\u7684\u4e00\u70b9\u8bf4\u660e\uff0c\u4ed6\u7684\u9898\u89e3\u53ef\u4ee5\u770b\u697c\u4e0b\u6216\u8005\u8fdb\u5165\u4ed6\u7684\u535a\u5ba2[\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011 - mjtlyzbsy \u7684\u535a\u5ba2 - \u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/user35775/solution-p2765)\u3002\n\n\u672c\u9898\u89e3\u540c\u65f6\u53d1\u5e03\u4e8e\u6211\u7684\u535a\u5ba2[\u7f51\u7edc\u6d4124\u9898\u9898\u89e3 | KSkun's Blog](https://ksmeow.moe/graph_flow_24prob_sol/)\uff0c\u6b22\u8fce\u6765\u901b\u3002\n\n2019/10/10 UPD\uff1a\u4fee\u590d\u4e86\u535a\u5ba2\u5730\u5740\uff0c\u5e76\u589e\u52a0\u4e00\u4e2a\u7ec6\u8282\u7684\u5c55\u5f00\u8ba8\u8bba\u3002\u611f\u8c22@\u6728\u5b88\u7403 \u540c\u5b66\u63d0\u51fa\u7684\u5f88\u597d\u7684\u95ee\u9898\u3002\n\n>\u6728\u5b88\u7403 2019-09-05 08:57\n\n>\u6562\u95ee\u5173\u4e8e\u60a8P2765\u7684\u9898\u89e3\u3002\u7f51\u7edc\u6d41dfs\u64a4\u9500\u539f\u6765\u7684\u8def\u5f84\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8bb0\u5f55\u8def\u5f84\u4f1a\u5bfc\u81f4\u90a3\u4e2a\u70b9\u8bb0\u5f55\u7684\u662f\u5f80\u56de\u8d70\u7684\u8def\u5f84\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\n\n>\u6728\u5b88\u7403 2019-09-05 08:57\n\n>\u6bd4\u5982 C\u53ef\u4ee5\u548cA,B\u5f62\u6210\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u4f46\u662fD\u53ea\u80fd\u548cA\u5f62\u6210\uff0c\u8f6e\u5230C\u7684\u65f6\u5019\u548c\u8d70S-A-C-T\uff0c\u7136\u540e\u8f6e\u5230D\u7684\u65f6\u5019\uff0cD\u5fc5\u987b\u548cA\u8fde\u63a5\uff0c\u6240\u4ee5\u8d70\u589e\u5e7f\u8def\uff0c S->B->C->A\uff08\u8fd9\u6761\u662f\u53cd\u6094\u7684\u8def\u5f84\uff0c\u8fd9\u65f6\u5019C\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u7684\u662fA\uff09->D->T\n\n>KSkun 2019-10-10 19:08\n\n>\u62b1\u6b49\u6211\u9000\u5f79\u5f88\u4e45\u4e86\uff0c\u5076\u5c14\u4e0a\u4e00\u6b21\u6d1b\u8c37\u624d\u770b\u5230\u4e86\u4f60\u7684\u7591\u95ee\uff0c\u5bfc\u81f4\u6ca1\u80fd\u53ca\u65f6\u56de\u590d\u3002 \u8fd9\u91cc\u7684\u589e\u5e7f\u8def\u786e\u5b9e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u64a4\u6d41\u95ee\u9898\uff0c\u4f46\u5f53\u64a4\u6d41\u5728\u67d0\u4e00\u4e2a\u70b9\u6539\u53d8\u65b9\u5411\u540e\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u5728\u539f\u6765\u90a3\u6761\u589e\u5e7f\u8def\u4e0a\u7684\u70b9\u7684pre\u503c\u4e00\u5b9a\u4f1a\u8bb0\u5f55\u4e0b\u64a4\u6d41\u7684\u7ec8\u70b9\uff0c\u5373\u539f\u589e\u5e7f\u8def\u5728\u65b0\u589e\u5e7f\u8def\u4e0a\u7684\u6700\u8fdc\u7684\u90a3\u4e2a\u70b9\uff0c\u56e0\u6b64\u53cd\u63a8\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u8df3\u8fc7\u64a4\u56de\u7684\u90e8\u5206\u3002 \u8fd9\u4e00\u7279\u6027\u786e\u4fdd\u4e86\u7b54\u6848\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u64a4\u6d41\u91cd\u590d\u3002\n\n\n## \u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5982\u4f55\u5efa\u56fe\uff0c\u5373\u8868\u8fbe\u76f8\u90bb\u7403\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7403\u62c6\u70b9\u4e3a$A_i$\u548c$B_i$\uff0c\u5148\u4ece\u6e90\u70b9$S$\u5411$A_i$\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u4ece$B_i$\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u3002\u5bf9\u4e8e\u80fd\u591f\u4e0e\u5b83\u7f16\u53f7\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u7403j\uff0c\u8fde\u63a5$A_j$\u548c$B_i$\u3002\u8fd9\u6837\u7684\u56fe\u6709\u4ec0\u4e48\u7279\u6027\uff0c\u5728\u5e95\u4e0b\u7684\u5206\u6790\u4e2d\u4f1a\u5c55\u73b0\u51fa\u6765\u3002\n\n\u679a\u4e3e\u7403\u6570\uff0c\u7403\u6570\u6bcf\u589e\u52a01\u5c31\u5efa\u7acb\u65b0\u52a0\u5165\u7684\u7403\u7684\u5173\u7cfb\uff0c\u5e76\u4e14\u91cd\u590d\u5730\u8dd1\u6700\u5927\u6d41\u3002\u67f1\u5b50\u6570\u5bf9\u4e8e\u7403\u6570\u5b58\u5728\u4e00\u79cd\u5355\u8c03\u9012\u589e\u7684\u76f8\u5173\u5173\u7cfb\uff0c\u6211\u4eec\u8fd9\u6837\u53ef\u4ee5\u6c42\u51fa\u67d0\u4e00\u67f1\u5b50\u6570\u4e0b\u6700\u591a\u80fd\u653e\u7f6e\u7684\u7403\u6570\uff0c\u56e0\u4e3a\u5f53\u65b0\u52a0\u5165\u7684\u7403\u80fd\u591f\u52a0\u5165\u67f1\u5b50\u65f6\uff0c\u91cd\u590d\u8dd1\u6700\u5927\u6d41\u662f\u80fd\u5f97\u5230\u65b0\u6d41\uff08\u5373\uff1a\u8be5\u7403\u53ef\u4e0e\u5176\u4ed6\u7403\u6784\u6210\u65b0\u7684\u76f8\u90bb\u5173\u7cfb\uff09\u7684\uff0c\u53ea\u8981\u4e00\u76f4\u80fd\u5f97\u5230\u65b0\u6d41\uff0c\u5c31\u8bf4\u660e\u67f1\u5b50\u4e0a\u8fd8\u53ef\u4ee5\u518d\u52a0\uff0c\u5f53\u6709\u4e00\u6b21\u5f97\u4e0d\u5230\u65b0\u6d41\uff0c\u5c31\u8bf4\u660e\u67f1\u5b50\u6ee1\u4e86\uff0c\u65b0\u52a0\u5165\u7684\u7403\u5e76\u6ca1\u80fd\u52a0\u5165\u5230\u4efb\u4f55\u4e00\u4e2a\u67f1\u5b50\u4e0a\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u52a0\u67f1\u5b50\u3002\u76f4\u5230\u67f1\u5b50\u52a0\u5230\u8d85\u8fc7n\uff0c\u6b64\u65f6\u7684\u7403\u6570-1\u5c31\u662f\u6700\u5927\u7403\u6570\uff08\u56e0\u4e3a\u6b64\u65f6\u5b9e\u9645\u4e0a\u67f1\u5b50\u52a0\u5230\u8d85\u8fc7n\u4e86\uff09\u3002\n\n\u81f3\u4e8e\u8f93\u51fa\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u7684\u7403\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u4e0b\u7b2c\u4e00\u4e2a\u52a0\u5165\u67f1\u5b50\u7684\u7403\u3002\u5728DFS\u5f97\u5230\u589e\u5e7f\u8def\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u662f\u8bb0\u4e0b\u8be5\u70b9\u8fde\u63a5\u7684\u4e0b\u4e00\u4e2a\u70b9\u7684\u7403\u7684\u7f16\u53f7\uff0c\u5f62\u6210\u7c7b\u4f3c\u94fe\u8868\u7684\u7ed3\u6784\u3002\u6700\u540e\u518d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u52a0\u5165\u67f1\u5b50\u7684\u7403\uff0c\u6765\u904d\u5386\u5b83\u6240\u5728\u7684\u90a3\u6761\u94fe\u3002\n\n\u6ce8\u91ca\u4e2d\u4e5f\u6709\u90e8\u5206\u8bf4\u660e\u3002\n\n\n## \u4ee3\u7801\n\n```cpp\n// Code by KSkun, 2018/1\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nconst int MAXN = 1000005;\nconst int INF = 1e9;\n\nstruct Edge {\n    int to, cap, rev;\n    Edge(int to, int cap, int rev): to(to), cap(cap), rev(rev) {}\n};\n\nstd::vector<Edge> vec[MAXN];\nstd::queue<int> que;\nint level[MAXN], pre[MAXN];\n\ninline void addedge(int u, int v, int cap) {\n    vec[u].push_back(Edge(v, cap, vec[v].size()));\n    vec[v].push_back(Edge(u, 0, vec[u].size() - 1));\n}\n\n// Dinic \n\ninline bool bfs(int s, int t) {\n    memset(level, -1, sizeof level);\n    level[s] = 0;\n    que.push(s);\n    while(!que.empty()) {\n        int u = que.front();\n        que.pop();\n        for(int i = 0; i < vec[u].size(); i++) {\n            int v = vec[u][i].to;\n            if(level[v] == -1 && vec[u][i].cap > 0) {\n                level[v] = level[u] + 1;\n                que.push(v);\n            }\n        }\n    }\n    return level[t] != -1;\n}\n\ninline int dfs(int u, int t, int left) {\n    if(u == t) return left;\n    for(int i = 0; i < vec[u].size(); i++) {\n        int v = vec[u][i].to;\n        if(vec[u][i].cap > 0 && level[v] == level[u] + 1) {\n            int d = dfs(v, t, std::min(left, vec[u][i].cap));\n            if(d > 0) {\n                vec[u][i].cap -= d;\n                vec[v][vec[u][i].rev].cap += d;\n                // u representes the ball number floor(u / 2), and so as v\n                pre[u >> 1] = v >> 1;\n                return d;\n            }\n        }\n    }\n    return 0;\n}\n\ninline int max_flow(int s, int t) {\n    int flow = 0;\n    while(bfs(s, t)) {\n        int f;\n        while((f = dfs(s, t, INF)) > 0) {\n            flow += f;\n        }\n    }\n    return flow;\n}\n\nint n, s = 1000001, t = 1000002, pillar = 0, now = 0, head[10005];\nbool vis[1000005];\n\nint main() {\n    scanf(\"%d\", &n);\n    // add more pillars if possible\n    while(pillar <= n) {\n        now++; // try to add one more ball\n        addedge(s, now << 1, 1);\n        addedge((now << 1) | 1, t, 1);\n        // find the ball which can connect to this\n        for(int i = sqrt(now) + 1; i * i < (now << 1); i++) {\n            addedge((i * i - now) << 1, (now << 1) | 1, 1);\n        }\n        int flow = max_flow(s, t);\n        if(!flow) {\n            // when it needs to add more pillars, record the first ball added to the next pillar\n            head[++pillar] = now;\n        }\n    }\n    printf(\"%d\\n\", now - 1);\n    for(int i = 1; i <= n; i++) {\n        if(!vis[head[i]]) {\n            for(int u = head[i]; u != 0 && u != (t >> 1); u = pre[u]) {\n                vis[u] = true;\n                printf(\"%d \", u);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1515171005,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u53d1\u73b0\u597d\u50cf\u6ca1\u4eba\u6765\u8bc1\u660e\u8d2a\u5fc3\u554a\u2026\u2026\u90a3\u6211\u6765\u5199\u4e00\u4e0b\u5b83\u7684\u8bc1\u660e\n\n\n\u6b32\u8bc1\u660e\uff1a\u653e\u4e00\u4e2a\u6570\u5728\u5df2\u6709\u7684\u67f1\u4e0a\uff08\u5982\u679c\u53ef\u4ee5\uff09\u603b\u662f\u6bd4\u65b0\u5f00\u4e00\u4e2a\u67f1\u66f4\u4f18\u7684\n\n\n\u5047\u5982\u5df2\u7ecf\u653e\u4e86`x1..x2....xu..xv..xw....`\n\n\u73b0\u5728\u6211\u8981\u653e`xx`\n\n\n\u6211\u6709\u4e24\u79cd\u7b56\u7565\n\n\n\u5728`xu`\uff08`xu`\u4ee3\u8868\u53ef\u4ee5\u4e0e`xx`\u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6570\uff09\u4e0a\u653e\uff0c\u6216\u8005\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\n\n\n\u5373\n`x1..x2....xx..xv..xw....`\n\nor\n`x1..x2....xu..xv..xw....xx`\n\n\n\u7136\u540e\u518d\u8003\u8651`xx+1`\n\n\n\u5bf9\u4e8e`x1..x2......xv..xw....`\uff0c\u4e0a\u4e0b\u4e24\u79cd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u4e0d\u8bf4\u4e86\n\n\n\u65e2\u7136`xu`\u53ef\u4ee5\u4e0e`xx`\u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219`xu+xx=a\\*a`\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c`xu+1+xx` **\u4e0d\u53ef\u4ee5\u653e\u5728xu\u4e0a\u9762**\uff0c\uff08\u4e3a\u4ec0\u4e48\u5462\uff1f\u5018\u82e5\u53ef\u4ee5\uff0c\u5373`xu+1+xx==b\\*b`\uff0c\u5373`1=b\\*b-a\\*a`\uff0c\u800c`b>a>=1\u2026\u2026`\uff09\n\n\u90a3\u4e48\uff0c`xx+1`\u8fd8\u4e0d\u5982\u653e\u5728`xx`\u4e0a\u54e9\u3002\n\n\n\u5982\u679c`xx+1`\u653e\u5728\u4e0d\u662f`xx`\u4e0a\u7684\u5730\u65b9\uff0c\u5219\u4e0a\u9762\u4e00\u79cd\u66f4\u4f18\u3002\u56e0\u4e3a\u5018\u82e5\u518d\u6765\u4e2a\u4ec0\u4e48`xa`\uff0c\u5b83\u5927\u53ef\u4ee5\u518d\u5f00\u4e00\u4e2a\u67f1\u5b50\u3002\uff08\u6709\u7684\u540c\u5b66\u53ef\u80fd\u53d1\u73b0\u8fd9\u91cc\u7684\u8bc1\u660e\u6709\u70b9\u4e0d\u5b8c\u6574\uff0c\u5927\u6982\u8bf4\u4e00\u4e0b\uff0c\u5c31\u662f\u8003\u8651`xa`\u653e\u5728`xu`\u4e0a\u7684\u6240\u6709\u67f1\u5b50\u7684\u5f62\u6001\u548c\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\u7684\u6240\u6709\u67f1\u5b50\u7684\u5f62\u6001\uff09\u3002\n\n\n\u4ee3\u7801\u5f88\u597d\u5199\u5566\u3002\uff08\u636e\u8bf4$n\\leq 60$\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\nusing namespace std;\nint n, cnt, ans=1, isa[3205];\nvector<int> d[62];\nint main(){\n    for(int i=1; i*i<=3205; i++)\n        isa[i*i] = true;\n    cin>>n;\n    while(1){\n        for(int i=1; i<=cnt; i++)\n            if(isa[d[i][d[i].size()-1]+ans]){\n                d[i].push_back(ans);\n                ans++;\n                i = 0;\n                continue;\n            }\n        if(cnt<n)\n            d[++cnt].push_back(ans++);\n        else break;\n    }\n    cout<<ans-1<<endl;\n    for(int i=1; i<=n; i++){\n        for(int j=0; j<d[i].size(); j++)\n            printf(\"%d \", d[i][j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1514448813,
        "uid": 44733,
        "name": "poorpool",
        "ccfLevel": 0,
        "title": "\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "###\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7f51\u7edc\u6d41\u9898\u76ee\n\n\u5f31\u5f31\u7684\u8bf4\u4e00\u53e5\u8fd9\u662f\u9053\u9898\u597d\u50cf\u662f\u7f51\u7edc\u6d41\u4e8c\u5341\u56db\u9898\u4e2d\u768404\n\n\u867d\u7136\u53ef\u4ee5\u7528\u8d2a\u5fc3\u6216\u8005\u4e00\u4e9b\u7384\u5b66\u7b97\u6cd5\u53ef\u4ee5\u5f88\u5feb\u7684\u8dd1\u8fc7\uff0c\u4f46\u5efa\u8bae\u8fd8\u662f\u7528\u7f51\u7edc\u6d41\n\n\u5e76\u4e14\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u771f\u7684\u5f88\u68d2\n\n**\u601d\u8def\uff1a**\n\n\u6211\u4eec\u5148\u679a\u4e3e\u7403\uff0c\u4e00\u4e2a\u4e2a\u52a0\u5230\u56fe\u91cc\n\n#\u5e76\u5728\u52a0\u8fb9\u7684\u8fc7\u7a0b\u662f\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n- \u5f53\u7136\u4e0d\u53ef\u7f3a\u5c11\u7684\u662f\u62c6\u70b9\u628a\u4e00\u4e2a\u7403x\u62c6\u6210x\u548cx'\n\n- \u4e0b\u4e00\u6b65x\u8fde\u6e90\u70b9\uff0cx'\u8fde\u6c47\u70b9\u90fd\u662f\u5bb9\u91cf\u4e3a\u4e00\u7684\u6709\u5411\u8fb9\n\n- \u7b2c\u4e09\u6b65\u662f\u627e\u8fd9\u4e2a\u6570\u53ef\u4ee5\u4e0e\u90a3\u4e2a\u6570\u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5047\u8bbe\u8fd9\u4e2a\u6570\u4e3ay\uff0c\u5219y\u5411x'\u8fde\u8fb9\n\n\u4e0b\u9762\u5c31\u662f\u8dd1\u6700\u5927\u6d41\u4e86\uff0c\u5728\u8dd1\u6700\u5927\u6d41\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5411\u90a3\u4e2a\u70b9\u6d41\u51fa\u6d41\u91cf\uff08\u8fd9\u5c31\u662f\u4ee3\u7801\u4e2d\u7684nex[]\uff09![]( ![](https://cdn.luogu.com.cn/upload/pic/8289.png) )\n\n**\\_\u6700\u540e\u5c31\u662f\u6700\u8ba9\u4eba\u671f\u5f85\u7684\u4e0a\u4ee3\u7801\u73af\u8282\u4e86 \u2517|\uff40O\u2032|\u251b \u55f7~~\\_**\n```cpp\n#include<cstdlib>\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<vector>\n#include<cmath>\nusing namespace std;\nconst int INF=(1<<30);\nconst int maxn=400000;\nint idx=0,e[maxn],f[maxn],ne[maxn],h[100000]; \nvoid add(int a,int b,int c){\n    e[idx]=b,ne[idx]=h[a],f[idx]=c,h[a]=idx++;\n    e[idx]=a,ne[idx]=h[b],f[idx]=0,h[b]=idx++;\n}\nint S,T,ch[maxn],q[maxn],nex[maxn];\nbool tell(){\n    memset(ch,-1,sizeof(ch));\n    int head=0,tail=0;\n    ch[q[0]=S]=0; \n    while(head<=tail){\n        int t=q[head++];\n        for(int i=h[t];i!=-1;i=ne[i]){\n            if(ch[e[i]]==-1&&f[i]){\n                ch[q[++tail]=e[i]]=ch[t]+1;\n            }\n        }\n    }\n    return ch[T]!=-1;\n}\nint zeng(int a,int b){\n    if(a==T)return b;\n    int r=0;\n     for(int i=h[a];i!=-1;i=ne[i]){\n        if(ch[a]+1==ch[e[i]]&&f[i]){\n            int t=zeng(e[i],min(b-r,f[i]));\n            if(t>0)nex[a>>1]=(e[i]>>1);\n            f[i]-=t;r+=t;f[i^1]+=t;\n        }\n    }\n    if(!r)ch[a]=-1;\n    return r;\n}\nint dinic(){\n    int r=0,t=0;\n    while(tell()){\n        while(t=zeng(S,INF)){\n            r+=t;\n        }\n    }\n    return r;\n}\nbool vis[maxn];\nint w[1000];\nint main(){        \n    int n;\n    S=0;T=10010;\n    memset(h,-1,sizeof(h)); \n    memset(nex,-1,sizeof(nex));\n    scanf(\"%d\",&n);\n    int now=0,num=0;\n    while(now<=n){\n        ++num;\n        add(S,num<<1,1);add((num<<1)|1,T,1);\n        for(int i=sqrt(num)+1;i*i<(num<<1);i++)add((i*i-num)<<1,(num<<1)|1,1);\n        int s=dinic();\n        if(s==0)w[++now]=num;\n    }\n    printf(\"%d\\n\",--num);\n    memset(vis,false,sizeof(vis));\n    int k;\n    for(int i=1;i<=n;i++){\n        if(!vis[w[i]]){\n            k=w[i];printf(\"%d \",k);vis[w[i]]=true;\n            while(nex[k]!=-1&&nex[k]!=(T)>>1&&nex[k]!=0){\n                k=nex[k];\n                vis[k]=true;\n                printf(\"%d \",k);\n            }\n            printf(\"\\n\");\n        }\n    }\n}\n```\n\u6b64\u9898\u4e5f\u53ef\u4ee5\u7528\u4e8c\u5206\u56fe\u505a\uff0c\u5e0c\u671b\u80fd\u6709dalao\u53d1\u4e00\u4e0b\u4e8c\u5206\u56fe\u7684\u505a\u6cd5\n",
        "postTime": 1506583482,
        "uid": 35775,
        "name": "mjtlyzbsy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "# \u53d1\u4e00\u7bc7\u4e8c\u5206\u56fe\u505a\u6cd5\u7684\n\u9996\u5148\uff0c\u6839\u636e\u9898\u76ee\uff0c\u7528\u67f1\u5b50\u6765\u7b97\u6700\u591a\u7684\u7403\u6570\u4e0d\u597d\u6c42\uff08~~\u53cd\u6b63\u6211\u4e0d\u4f1a\u6c42~~\uff09\uff0c\u90a3\u5c31\u7528\u7403\u6570\u6765\u7b97\u67f1\u5b50\uff0c\u8981\u4f7f\u67f1\u5b50\u4e0a\u7684\u7403\u6700\u591a\uff0c\u5c31\u8981\u7528\u6700\u5c11\u7684\u67f1\u5b50\u6765\u653e\u7403\uff0c\u548b\u6c42\u6700\u5c11\u7684\u67f1\u5b50\u6570\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u56fe\uff1a\u5f53\u4e24\u4e2a\u7403\u7684\u7f16\u53f7\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u65f6\u8fde\u4e00\u6761\u8fb9\uff0c\u663e\u7136\u8fd9\u662f\u4e00\u4e2aDAG\uff08**\u6709\u5411\u65e0\u73af\u56fe**\uff09,\u8fd9\u6837\uff0c\u6700\u5c11\u7684\u67f1\u5b50\u6570\u5c31\u8f6c\u6362\u6210\u4e86\u8fd9\u4e2aDAG\u4e2d\u7684**\u6700\u5c0f\u8def\u5f84\u8986\u76d6**\n\n\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u8fd9\u4e2aDAG\u7684\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9u\u548cv\uff0c\u7136\u540e\u539f\u672c\u6307\u5411\u8fd9\u4e2a\u70b9\u7684\u8fb9\u6539\u4e3a\u6307\u5411u,\u539f\u672c\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u7684\u8fb9\u53d8\u4e3a\u4ecev\u51fa\u53d1\uff0c\u7136\u540e\u8fd9\u4e2a\u56fe\u5c31\u53d8\u6210\u4e86\u4e8c\u5206\u56fe\uff0c\u6c42\u8fd9\u4e2a\u4e8c\u5206\u56fe\u7684**\u6700\u5927\u5339\u914d**,**\u539f\u56fe\u4e2d\u7684\u9876\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d**\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7b54\u6848\u4e86\n\n\u7136\u540e\u8c8c\u4f3c\u9898\u89e3\u533a\u7684\u5de8\u4f6c\u5168\u90fd\u9009\u62e9\u4e86Dinic,\u4f46\u6211\u5b9e\u5728\u4e0d\u60f3\u6253\uff0c\u5c31\u641e\u4e86\u4e2a\u7b80\u77ed\u7684\u4e8c\u5206\u56fe\u6a21\u677f\u8fc7\u6389\u4e86\n\n\u60ca\u609a\u7684\u662f\u5c45\u7136\u6709\u4f4d\u795e\u4eba\u8bf4\u5308\u7259\u5229\u7b97\u6cd5\u590d\u6742\u5ea6\u5927\u53ef\u80fdTLE\uff0c\u8981\u7528Dinic\u6765\u4f18\u5316\u6389\u4e00\u4e2a\u6839\u53f7\uff0c\u6211\u4e00\u4ea433ms\u2026\u2026\u8bdd\u8bf4\u8981\u662f\u5168\u6309\u7167\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u641e\u4f60\u8fde\u7f51\u7edc\u6d41\u6a21\u677f\u90fd\u8fc7\u4e0d\u6389(\u7406\u8bba\u4e0a\u6bd4Dinic\u66f4\u4f18\u7684ISAP\u4e5f\u662fO(n\u00b2m\u7684\uff09\n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\uff0827\u884c\uff09\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(3)\nusing namespace std;\nconst int N=1601,M=N<<4;\nint pn,to[M],c[N],nt[M],hd[N];\nint lk[N],n,m,mxp;bool v[N];\ninline bool dfs(int x){\n\tfor(int i=hd[x],u=to[i];i;i=nt[i],u=to[i])\n\t\tif(!v[u]&&(v[u]=1)&&(!lk[u]||dfs(lk[u])))\n\t\t\treturn (lk[u]=x)?1:1;\n\treturn false;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int o;m-mxp<=n;){\n\t\tm++,o=sqrt(m)+1;\n\t\tfor(int i=o,x,y;i*i<2*m;i++)\n\t\t\tx=m,y=i*i-m,pn++,to[pn]=y,\n\t\t\tnt[pn]=hd[x],hd[x]=pn;\n\t\tmxp+=dfs(m),memset(v,0,sizeof(v));\n\t}\n\tprintf(\"%d\",--m);\n\tfor(int i=1,j;i<=m;i++)if(!v[i])\n\t\tfor(puts(\"\"),j=i;j;j=lk[j])\n\t\t\tprintf(\"%d \",j),v[j]=1;\n\treturn 0;\n}\n```",
        "postTime": 1580975147,
        "uid": 109401,
        "name": "\u5b81_\u7f3a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "### \u8fd9\u662fGD\u521d\u4e8c\u849f\u84bb $lolte$ \u7684\u9898\u89e3\n\u4ecd\u7136\u5728\u5199\u7f51\u7edc\u6d4124\u9898\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u5b66\u6821\u7684SPJ\u771f\u662f\u5495\u5495\u4e86\uff0c\u5dee\u70b9\u8ba9\u6211\u6000\u7591\u4eba\u751f\u3002\n\n\u5728\u5b66\u7f51\u7edc\u6d41\u81ea\u7136\u5c31\u662f\u8981\u7528\u7684\uff0c\u56e0\u6b64\u672c\u9898\u6211\u4f7f\u7528\u7684\u662fdinic\u3002\n\n\u53c2\u8003\u4e86 @zhaoyifan \u7684\u9898\u89e3\u3002\n\n----\n\n\u672c\u9898\u4e2d\u6709\u67f1\u5b50\u548c\u7403\u4e24\u79cd\u7269\u54c1\uff0c\u4f46\u67f1\u5b50\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u6027\uff0c\u5e76\u4e0d\u9700\u8981\u8003\u8651\u3002\u6240\u4ee5\u8003\u8651\u6839\u636e\u7403\u5efa\u56fe\u3002\n\n\u7403\u53ea\u80fd\u653e\u5728\u6bcf\u6839\u67f1\u5b50\u7684\u6700\u4e0a\u9762\u4e14\u4e0e\u76f8\u90bb\u7684\u7403\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u548c\u3002\u7531\u4e8e\u4e00\u4e2a\u70b9\u96be\u4ee5\u517c\u987e\u5982\u6b64\u591a\u70b9\u8981\u6c42\uff0c\u4e0d\u96be\u60f3\u5230\u5c06\u7403\u62c6\u6210 $i*2$ \u548c $i*2+1$ \u4e24\u4e2a\u70b9\u3002\u5c06\u6bcf\u4e2a\u7403\u4f9d\u6b21\u653e\u5165\u67f1\u5b50\u4e0a\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u8ba9\u73b0\u5728\u7684\u7403\u4e0e\u4e4b\u524d\u7684\u7403\u5efa\u8fb9\u3002\u56e0\u4e3a\u53ea\u80fd\u4e0e\u7f16\u53f7\u66f4\u5c0f\u7684\u8fde\u8fb9\uff0c\u8003\u8651\u679a\u4e3e  $i$ \uff0c\u4f7f\u5f97 $now<i*i<2*now$ \u3002\u5219$now+(i*i-now)$ \u4e3a\u5b8c\u5168\u5e73\u65b9\u6570, $i*i-now<now$\u3002\u8ba9 $(i*i-now)*2$ \u5411 $now*2+1$\u8fde\u8fb9\u3002\u6b64\u65f6\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\uff0c\u82e5\u80fd\u6709\u6d41\uff0c\u5219\u8868\u660e\u5f53\u524d\u7403\u53ef\u653e\u5728\u4e4b\u524d\u7403\u3002\u5426\u5219\u65b0\u5f00\u4e00\u6839\u67f1\u5b50\u3002\n\n----\n\n\u95ee\u9898\u6765\u4e86\uff0c\u9898\u76ee\u4e0d\u662f\u8981\u6c42\u8981\u653e\u5728\u6700\u4e0a\u9762\u5417\uff1f\u4e0a\u9762\u6ca1\u8003\u8651\u554a\uff1f\u800c\u4e14\u4e0d\u4f1a\u628a\u4e4b\u524d\u70b9\u7684\u6d41\u91cf\u7b97\u8fdb\u53bb\u5417\uff1f\n\n\u4e0d\u7528\u62c5\u5fc3\uff0c\u56e0\u4e3a\u7f51\u7edc\u6d41\u7684\u7279\u6027\uff0c\u5728\u8ba1\u7b97\u5f53\u524d\u65f6\uff0c\u5df2\u7ecf\u628a\u53ef\u4ee5\u884c\u7684\u8dd1\u6ee1\u4e86\uff0c\u4e0d\u4f1a\u8003\u8651\u4e4b\u524d\u7684\u70b9\u3002\n\n\u90a3\u6211\u4eec\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u8f93\u51fa\u6bcf\u6839\u67f1\u5b50\u65f6\uff0c\u6839\u636e\u6b8b\u4f59\u6d41\u91cf\u8f93\u51fa\u5373\u53ef\uff08\u8fd8\u6709\u6d41\u91cf\u7684\u5c31\u4e0d\u662f\u5566\uff09\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=0;\n\tchar ch=getchar();\n\tfor (;ch<'0'||ch>'9';ch=getchar()) f^=(ch=='-');\n\tfor (;ch>='0'&&ch<='9';ch=getchar()) x=x*10+ch-'0';\n\treturn f ? -x : x; \n}\nconst int maxn=1600;\nint n,z=0,dep[maxn*2],head[maxn*2],cnt=1,cur[maxn*2],s=3198,t=3199,now=0;\nint qwq[60],maxflow=0,q[maxn*2],l,r;\nbool vis,inq[maxn*2];\nstruct node{\n\tint to,nxt,w;\n}e[10000004];\ninline void add(int u,int v,int w) {\n\te[++cnt].w=w;\n\te[cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nbool bfs(){\n\tmemset(inq,0,sizeof(inq));\n\tmemset(dep,0x3f,sizeof(dep));\n\tmemcpy(cur,head,sizeof(head));\n\tl=1;r=0;\n\tq[++r]=s;inq[s]=1;dep[s]=0;\n\twhile (l<=r) {\n\t\tint u=q[l++];\n\t\tinq[u]=0;\n\t\tfor (int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].to;\n\t\t\tif (dep[u]+1<dep[v]&&e[i].w) {\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tif (!inq[v]) {\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t\tq[++r]=v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]<100000;\n} \nint dfs(int u,int flow) {\n\tif (u==t) {\n\t\tmaxflow+=flow;\n\t\tvis=1;\n\t\treturn flow;\n\t}\n\tint goflow=0,used=0;\n\tfor (int &i=cur[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif (e[i].w&&dep[u]+1==dep[v]) {\n\t\t\tgoflow=dfs(v,min(e[i].w,flow-used));\n\t\t\tif (!goflow) continue;\n\t\t\tused+=goflow;\n\t\t\te[i].w-=goflow;\n\t\t\te[i^1].w+=goflow;\n\t\t\tif (used==flow) break;\n\t\t}\n\t}\n\treturn used;\n}\nvoid dinic(){\n\t//printf(\"dinic : %d\\n\",now);\n\tmaxflow=0;\n\twhile (bfs()) {\n\t\t//puts(\"qwq\");\n\t\tvis=1;\n\t\twhile (vis) {\n\t\t\tvis=0;\n\t\t\tdfs(s,2147483600);\n\t\t}\n\t} \n\t/*if (maxflow) {\n\t\tprintf(\"ok %d\\n\",now);\n\t}\n\telse printf(\"die %d\\n\",now);*/\n}\nvoid out(int u) {\n\tfor (int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif (v==t||v==s) continue;\n\t\tif (e[i].w) continue;\n\t\tprintf(\"%d \",v/2);\n\t\tint q=v/2;\n\t\tout(q*2);\n\t}\n}\nint main(){\n\tn=read();\n\twhile (z<=n) {\n\t\t++now;\n\t\tadd(s,now*2,1);add(now*2,s,0);\n\t\tadd(now*2+1,t,1);add(t,now*2+1,0);\n\t\tfor (int i=sqrt(now)+1;i*i<2*now;++i) {\n\t\t\tadd((i*i-now)*2,now*2+1,1);\n\t\t\tadd(now*2+1,(i*i-now)*2,0);\n\t\t}\n\t\tdinic();\n\t\tif (!maxflow) {\n\t\t\tqwq[++z]=now;\n\t\t}\n\t}\n\t--now;\n\tprintf(\"%d\\n\",now);\n\tfor (int i=1;i<=n;++i) {\n\t\tprintf(\"%d \",qwq[i]);\n\t\tout(qwq[i]*2);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1544162902,
        "uid": 78752,
        "name": "lolte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "&emsp;&emsp;\u5047\u8bbe\u4e00\u4e2a\u6709n\u4e2a\u70b9\u7684\u4e00\u4e2a\u56feG\uff0c\u5bf9\u6bcf\u4e00\u5bf9\u6570(i,j)\u6ee1\u8db3i+j=k^2 && i<j\uff0c\u4ecei\u5411j\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\u7531\u4e8e\u8fb9\u59cb\u7ec8\u4ece\u5c0f\u6307\u5411\u5927\uff0c\u56e0\u800c\u56fe\u4e2d\u65e0\u73af\uff0c\u56feG\u662f\u4e2aDAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u3002\u800c\u56feG\u4e2d\u6bcf\u6761\u8def\u5f84\u5747\u662f\u653e\u9b54\u529b\u7403\u7684\u4e00\u4e2a\u5408\u6cd5\u65b9\u6cd5\u3002\u95ee\u9898\u8f6c\u6362\u6210DAG\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u3002\n\n&emsp;&emsp;\u6bd4\u5982\u8fd9\u5c31\u662fn==20\u65f6\u7684\u56feG\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/45422.png)\n\n&emsp;&emsp;DAG\u7684\u6700\u5c0f\u9876\u70b9\u8986\u76d6\u95ee\u9898\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u95ee\u9898\u3002\u5bf9\u6bcf\u4e2a\u70b9\u62c6\u4e3a\u51fa\u70b9\u548c\u5165\u70b9\u3002\u8d85\u6e90\u8fde\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\uff0c\u51fa\u70b9\u8fde\u8d85\u6c47\u3002\u5982\u679cDAG\u91cci,j\u76f8\u8fde\u5219i\u7684\u5165\u70b9\u8fdej\u7684\u51fa\u70b9\uff0c\u8fd9\u6761\u8fb9\u5982\u679c\u5728\u6700\u5927\u5339\u914d\u4e2d\u5219\u4ee3\u8868\u4e86i\u548cj\u6240\u5728\u4e24\u6761\u8def\u5f84\u7684\u4e00\u6b21\u5408\u5e76\u3002\u6700\u7ec8\u6700\u5c0f\u8def\u5f84\u6570=\u9876\u70b9\u6570-\u6700\u5927\u5339\u914d\uff08\u6700\u5927\u6d41\uff09\u3002\n\n&emsp;&emsp;\u7531\u4e8e\u9898\u4e2d\u6240\u6c42\u662f\u7ed9\u5b9a\u67f1\u5b50\u6570\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u7403\u6570\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7403\u6570\u603b\u662f\u968f\u67f1\u5b50\u6570\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\u4e00\u79cd\u505a\u6cd5\u662f\u6bcf\u6b21\u4e0d\u65ad\u5c06\u65b0\u7f16\u53f7\u7684\u7403\u52a0\u5165\u56fe\u4e2d\uff0c\u5728\u6b8b\u4f59\u7f51\u7edc\u4e2d\u8dd1\u6700\u5927\u6d41\u76f4\u5230\u67f1\u5b50\u6570\u4e0d\u591f\u3002\u4ea6\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u7b54\u6848\u7684\u505a\u6cd5\u6c42\u89e3\u3002~~\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u7684\u3002~~\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <string.h>\n#include <iostream> \n#include <queue>\n#define MAXM 1000100\n#define MAXN 100100\nusing namespace std;\n\nconst int INF=2147483647;\n\nint n,m,s,t;\nint maxflow=0;\nint b;\nstruct EDGE\n{\n\tint from,to,weight,next;\n}edge[MAXM<<1];\n\nint nex[MAXN];\nbool visit[MAXN];\nint head[MAXN];\nint deep[MAXN];\nint cnt=0;\nint p;\n\ninline void add(int x,int y,int w)\n{\n\tedge[cnt].from=x;\n\tedge[cnt].to=y;\n\tedge[cnt].weight=w;\n\tedge[cnt].next=head[x];\n\thead[x]=cnt++;\n}\n\nvoid input(int num)\n{\n\tfor (int i=0;i<=2*n+1;i++)\n\t\thead[i]=-1;\n\tcnt=0;\n\tn=num;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tadd(0,i,1);\n\t\tadd(i,0,0);\n\t\tadd(i+n,2*n+1,1);\n\t\tadd(2*n+1,i+n,0);\n\t}\n\tb=cnt+1;\n\tfor (int i=2;i<2*n;i++)\n\t{\n\t\tfor (int j=max(1,i*i-n);j<i*i-j;j++)\n\t\t\tif (i*i-j<=n)\n\t\t\t{\n\t\t\t\tadd(j,i*i-j+n,1);\n\t\t\t\tadd(i*i-j+n,j,0);\n\t\t\t}\n\t}\n\ts=0;\n\tt=2*n+1;\n}\n\nbool bfs()\n{\n\tint cur;\n\tqueue <int> q;\n\tfor (int i=0;i<=2*n+1;i++)\n\t\tdeep[i]=-1;\n\tdeep[s]=0;\n\tq.push(s);\n\twhile (!q.empty())\n\t{\n\t\tcur=q.front();\n\t\tq.pop();\n\t\tfor (int i=head[cur];~i;i=edge[i].next)\n\t\t\tif (!~deep[edge[i].to] && edge[i].weight)\n\t\t\t{\n\t\t\t\tdeep[edge[i].to]=deep[cur]+1;\n\t\t\t\tq.push(edge[i].to);\n\t\t\t}\n\t}\n\tif (~deep[t])\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nint dfs(int cur,int limit)\n{\n\tif (!limit || cur==t)\n\t\treturn limit;\n\t\t\n\tint flow=0;\n\tint f;\n\t\n\tfor (int i=head[cur];~i;i=edge[i].next)\n\t{\n\t\tif (deep[edge[i].to]==deep[cur]+1 && (f=dfs(edge[i].to,min(limit,edge[i].weight))))\n\t\t{\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\tedge[i].weight-=f;\n\t\t\tedge[i^1].weight+=f;\n\t\t\tif (!limit) break;\n\t\t}\n\t}\n\tif (!flow) deep[cur]=-1;\n\treturn flow;\n}\n\nint dinic()\n{\n\twhile (bfs())\n\t\tmaxflow+=dfs(s,INF);\n\treturn maxflow;\n}\n\nbool check(int num)\n{\n\tmaxflow=0;\n\tinput(num);\n\tdinic();\n\treturn (num-maxflow<=p);\n\t\t\n}\n\nint main()\n{\n\tcin>>p;\n\tint l=1;\n\tint r=2000;\n\tint mid;\n\twhile (l<r)\n\t{\n\n\t\tmid=(l+r+1)/2;\n\t\tif (check(mid))\n\t\t\tl=mid;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\tcheck(mid=(l+r)/2);\n\tcout<<mid<<endl;\n\tfor (int i=4*n;i<cnt;i+=2)\n\t\tif (edge[i].weight==0)\n\t\t{\n\t\t\tnex[edge[i].from]=edge[i].to-n;\n\t\t\tvisit[edge[i].to-n]=true;\n\t\t}\n\tfor (int i=1;i<=mid;i++)\n\t\tif (!visit[i])\n\t\t{\n\t\t\tfor (int j=i;j;j=nex[j])\n\t\t\t\tcout<<j<<' ';\n\t\t\tcout<<endl;\n\t\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1544100344,
        "uid": 56267,
        "name": "Rhodoks",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": ">\u5efa\u56fe\u548c\u697c\u4e0a\u697c\u4e0b\u5927\u540c\u5c0f\u5f02\uff0c\u6211\u7684\u91cd\u70b9\u5728**\u5308\u7259\u5229\u7b97\u6cd5**\u3002\n\n\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\n\n\n\u7ed9\u5b9a\u4e86\u67f1\u5b50\u6570n\uff08\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570\uff09\u4ee5\u53ca\u653e\u7403\u6761\u4ef6\uff08\u5efa\u8fb9\u6761\u4ef6\uff09\uff0c\u6c42\u6700\u591a\u6709\u591a\u5c11\u4e2a\u7403\uff08\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e2a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570\uff09\u3002\n\n\n\u679a\u4e3e\u7403\u7684\u6570\u91cf\u3002\n\n\n\u6bcf\u6765\u4e00\u4e2a\u7403\uff08\u70b9\uff09m\uff0c\u679a\u4e3e1..m-1\u7684\u6bcf\u4e2a\u70b9i\uff0c\u82e5i+m\u6ee1\u8db3\u5efa\u8fb9\u6761\u4ef6\uff08\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff09\u5219\u6309\u4ee5\u4e0b\u65b9\u5f0f\u5efa\u8fb9\u2014\u2014\n\n\n\u5957\u8def\u62c6\u70b9\uff0c\u6bcf\u4e2a\u70b9i\u62c6\u6210Xi\u3001Yi\uff0c\u5bf9\u4e8e\u4e00\u7ec4i\u3001m\uff0c\u8fdeXi<->Y(m+5000)**\u53cc\u5411**\uff0c\u8dd1\u5308\u7259\u5229\u7b97\u51fa\u6700\u5927\u5339\u914d\u3002\n\n\n\u6839\u636e\u4e8c\u5206\u56fe\u76f8\u5173\u5b9a\u7406\uff1a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=\u70b9\u6570-\u6700\u5927\u5339\u914d\u6570\u3002\n\n\n\u7b97\u51fa\u5f53\u524d\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6k\uff0c\u4e0e\u7ed9\u5b9a\u67f1\u5b50\u6570\u6bd4\u8f83\u3002\n\n\n- k<n\uff0c\u7ee7\u7eed\u52a0\u7403\u3002\n\n- k=n\uff0c\u53ef\u80fd\u8fd8\u6709\u66f4\u5927\u7684\u7b54\u6848\uff0c\u7ee7\u7eed\u52a0\u7403\u3002\n\n- k>n\uff0cm-1\u5c31\u662f\u7b54\u6848\uff0c\u505c\u6b62\u52a0\u7403\u3002\n\n\n\u8f93\u51fa\u8def\u5f84\uff0c\u904d\u53861..m-1\u6bcf\u4e2aX\u90e8\u70b9\uff0c\u5411\u5176\u5339\u914d\u70b9\u8d70\uff0c\u76f4\u5230\u65e0\u8def\u53ef\u8d70\uff0c\u6cbf\u8def\u6807\u8bb0\u4e3a\u5df2\u904d\u5386\u3002\n\n\n\u5df2\u904d\u5386\u8fc7\u7684X\u90e8\u70b9\u4e0d\u518d\u904d\u5386\u3002\n\n\n\u89e3\u91ca\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981\u53cc\u5411\u8fb9\u3002\n\n\n\u5982\u56fe\uff08\u4e71\u753b\u7684\uff09\uff0c\u6765\u4e86\u4e00\u4e2am\u70b9\u540e\uff0c\u7d2b\u8272\u8fb9\u662f\u65b0\u52a0\u7684\u8fb9\u3002\n\n\n![](http://ww3.sinaimg.cn/large/0060lm7Tly1fn4txu7riyj305008cmwz.jpg)\n\n\n\u4e3a\u907f\u514dTLE\uff0c\u6211\u4eec\u4e0d\u662f\u6e05\u7a7a\u6574\u4e2a\u56fe\u7684\u5339\u914d\u4fe1\u606f\u91cd\u8dd1\u5308\u7259\u5229\uff0c\u800c\u662f\u5728\u539f\u5339\u914d\u7684\u57fa\u7840\u4e0a\u4ee5m\u4e3a\u8d77\u70b9\u8fdb\u884c\u589e\u5e7f\u3002\n\n\n\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u4eceY\u90e8\u7684\u70b9\u5f00\u59cb\u2014\u2014\u8fd9\u5c31\u662f\u5efa\u53cc\u5411\u8fb9\u7684\u539f\u56e0\u3002\n\n\n\u4e0d\u53ef\u4ee5\u76f4\u63a5\u8fdeY\u90e8->X\u90e8\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u4f60\u65e0\u6cd5\u6cbf\u5339\u914d\u70b9\u8f93\u51fa\u8def\u5f84\u3002\n\n\n\u7efc\u4e0a\u3002\n\n\n/\\*\u611f\u89c9\u5308\u7259\u5229\u6bd4Dinic\u7b80\u4fbf\u5f88\u591a\u554a\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u4eba\u7528\u5462\u2026\\*/\n\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\nconst int MAXN=10010,MAXM=200010,MAXP=5000;\nbool s_num[MAXN],vis[MAXN];\nint n,m,cnt,ans,head[MAXN],match[MAXN];\nstruct edge\n{\n    int nxt,to;\n}e[MAXM];\nvoid AddEdge(int u,int v)\n{\n    e[++cnt].nxt=head[u];\n    e[cnt].to=v;\n    head[u]=cnt;\n}\nvoid AddEdges(int u,int v)\n{\n    AddEdge(u,v);\n    AddEdge(v,u);\n}\nbool S_Num(int x)\n{\n    double t;\n    return s_num[x] ? s_num[x] : (t=sqrt(x))==int(t);\n}\nbool DFS(int u)\n{\n    for(int i=head[u],v;i;i=e[i].nxt)\n        if(!vis[v=e[i].to])\n        {\n            vis[v]=1;\n            if(!match[v] || DFS(match[v]))\n            {\n                match[u]=v,match[v]=u;\n                return 1;\n            }\n        }\n    return 0;\n}\nvoid Print(int x)\n{\n    x+=MAXP;\n    do\n        printf(\"%d \",x=x-MAXP);\n    while(vis[x]=1,x=match[x]);\n    printf(\"\\n\");\n}\nint main(int argc,char *argv[])\n{\n    scanf(\"%d\",&n);\n    do\n    {\n        int t=++m+MAXP;\n        for(int i=1;i<m;++i)\n            if(S_Num(i+m))\n                AddEdges(i,t);\n        memset(vis,0,sizeof vis);\n        ans+=DFS(t);\n    }\n    while(m-ans<=n);\n    printf(\"%d\\n\",--m);\n    memset(vis,0,sizeof vis);\n    for(int i=1;i<=m;++i)\n        if(!vis[i])\n            Print(i);\n    return 0;\n}\n```\n\n> \u8c22\u8c22\u9605\u8bfb\u3002\n",
        "postTime": 1515069187,
        "uid": 35851,
        "name": "Capella",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u5177\u4f53\u7684\u6570\u5b66\u5173\u7cfb\u8fd8\u662f\u4e0d\u4f1a\u8bc1\uff0c\u9664\u4e86\u80fd\u6253\u8868\u53d1\u73b0\u7403\u6570\u89c4\u5f8b\u5916\uff0c\u5185\u5728\u539f\u7406\u4e5f\u5f04\u4e0d\u6e05\u695a\u3002\n\n**\u7136\u540e\u6211\u7684\u7f51\u7edc\u6d41\u597d\u50cf\u662f\u5728\u7f51\u7edc\u6d41\u4e2d\u7b97\u5feb\u7684\uff0c100ms\u591a\u4e00\u70b9\u5c31\u8dd1\u4e86\uff0c1000ms\u5185\u53ef\u4ee5\u8dd1n=110\uff1b**\n## \u9898\u9762\n[\u6233](https://www.luogu.org/problemnew/show/P2765)\n## sol\n\u5f88\u96be\u60f3\u8c61\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u3002\u7b2c\u4e00\u611f\u662f\u6570\u5b66\u3002\n\n\u4f46\u662f\u770b\u5230\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u4f30\u8ba1\u53ef\u4ee5\u66b4\u529bdp\u3002\n\n\u53c8\u53d1\u73b0\uff0c\u72b6\u6001\u8f6c\u79fb\u6bd4\u8f83\u96be\uff0c\u72b6\u6001\u8c03\u6574\u6bd4\u8f83\u591a\uff0cdp\u4f30\u8ba1\u96be\u8bbe\uff0c\u53c8\u770b\u5230\u6570\u636e\u8303\u56f4\u53c8\u5c0f\u4e8edp\u901a\u5e38\u53ef\u505a\u8303\u56f4\uff0c\u6240\u4ee5\u7528\u540c\u6837\u4ee5\u89c4\u5212\u548c\u72b6\u6001\u8bbe\u8ba1\u4e3a\u5173\u952e\u5b57\u7684\uff0c\u72b6\u6001\u8c03\u6574\u80fd\u529b\u66f4\u5f3a\u7684\uff0c\u590d\u6742\u5ea6\u53ef\u80fd\u7565\u9ad8\u7684\u7f51\u7edc\u6d41\u6765\u505a\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u79cd\u9898\u8003\u70b9\u4e0d\u5728\u7f51\u7edc\u6d41\u7684\u7cbe\u6df1\u56fe\u8bba\uff0c\u800c\u5728\u4e8e\u7f51\u7edc\u6d41\u7684\u89c4\u5212\uff0c\u8ba1\u7b97\uff0c\u8c03\u6574\u80fd\u529b\uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u8bf4\u7684\u7684\u5efa\u6a21\u80fd\u529b\u3002\u53ea\u6709\u6700\u540e\u8f93\u51fa\u65b9\u6848\u9700\u8981\u4e00\u70b9\u56fe\u8bba\u77e5\u8bc6\u3002\n\n\u591a\u5570\u55e6\u4e00\u53e5\u7684\u662f\uff0c\u7f51\u7edc\u6d41\uff0c\u5efa\u72b6\u6001\u540c\u6837\u4e5f\u6709\u4f18\u5316\uff0c\u5c3d\u91cf\u5c11\u7684\u8fb9\u4e0e\u70b9\uff0c\u8fb9\u6743\u5c3d\u91cf\u66f4\u52a0\u96c6\u4e2d(\u5c11\u5efaINF\u8fb9)\u4f1a\u4f18\u5316\u901f\u5ea6.\n\n\u7136\u540e\u8fd9\u9053\u9898\u9996\u5148\uff0c\u6bcf\u4e2a\u70b9\u53ea\u80fd\u9009\u4e00\u6b21\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u5957\u8def\uff0c\u62b1\u4e00\u4e2a\u70b9\u62c6\u6210\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9\uff0c\u90a3\u4e48\u8be5\u8fb9\u5c31\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u4e86\u3002\n\n\u7136\u540e\u7b97\u8d21\u732e\u7684\u8bdd\uff0c\u5c31\u901a\u8fc7\u539f\u59cbdp\u6765\u8003\u8651\u3002\u6bd4\u5982\uff0c\u5199dp\u5c31\u4f1a\u76f4\u63a5\u8f6c\u79fb\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u52a0\u8d77\u6765\u4e3a\u5e73\u65b9\u548c\u7684\u70b9\uff0c\u90a3\u4e48\u7f51\u7edc\u6d41\u4e5f\u662f\u53ef\u4ee5\u6d41\u5411\u4e00\u6761\u4e0e\u81ea\u5df1\u52a0\u8d77\u6765\u4e3a\u5e73\u65b9\u548c\u7684\u70b9\uff0c\u7136\u540e\u6d41\u5165\u6210\u529f\u5c31\u7b97\u4e00\u6b21\u8d21\u732e\u3002\u7f51\u7edc\u6d41\u7b97\u8d21\u732e\u5c31\u662f\u5411\u6c47\u70b9T\u6d41\u51651\u7684\u6d41\u91cf\u3002\n\n\u663e\u7136dp\u8fd8\u662f\u53ef\u4ee5\u81ea\u5df1\u521b\u4e00\u7ec4\uff0c\u5c31\u662f\u6d41\u5411\u4e00\u4e2a\u67f1\u5b50\uff0c\u6ce8\u610f\u5230\u67f1\u5b50\u4e5f\u53ea\u80fd\u88ab\u6d41\u4e00\u6b21\uff0c\u6240\u4ee5\u5c31\u7528\u4e0a\u8ff0\u7684\u5957\u8def\uff0c\u8ddf\u6d41\u5411\u4e00\u4e2a\u70b9\u662f\u4e00\u6837\u7684\u3002\n\u7136\u540e\u6e90\u70b9\u80af\u5b9a\u662f\u76f8\u5f53\u4e8e\u53bb\u6fc0\u6d3b\u6bcf\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u88abS\u6fc0\u6d3b\uff0c\u6240\u4ee5\u641e\u4e00\u4e2aS\u6d41\u5411\u6bcf\u4e00\u4e2a\u70b9\u7684\u6d41\u91cf\u662f1\u7684\u8fb9\u3002\n\n**\u6709\u4eba\u8bf4\u8ddf\u6700\u5c0f\u70b9\u8986\u76d6\u5f88\u50cf\uff0c\u5176\u5b9e\u5c31\u662f\u7528\u5230\u4e86\u9501\u5b9a\u4e00\u4e2a\u70b9\u53ea\u80fd\u6d41\u4e00\u6b21\u8fd9\u4e2a\u5957\u8def\u3002**\n\n\u7136\u540e\u6ce8\u610f\u5230\uff0c\u8fd9\u4e2a\u9898\u8bf4\u4e86\u53ea\u80fd\u9009\u6ee11-m\u4e2a\u7403\uff0c\u6839\u636edp\u7684\u5957\u8def\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u8003\u8651\uff0c\u7136\u540e\u5927\u7684\u53ea\u80fd\u653e\u5411\u5c0f\u7684\uff0c\u6240\u4ee5\u5c31\u4ece\u5c0f\u7684\u5f80\u5927\u679a\u4e3e\u7684\u653e\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u5c0f\u7684\u653e\u4e0d\u8fdb\u5f53\u524d\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u5c31break\u3002\n\n\u7f51\u7edc\u6d41\u8fd8\u662f\u80dc\u5728\u81ea\u5df1\u7684\u8c03\u6574\u80fd\u529b\u3002\u5355\u7528\u70b9\u4e0e\u8fb9\u6765\u89c4\u5212\u5904\u6240\u6709\u7684\u60c5\u51b5\uff0c\u6a21\u62df\u6c34\u6d41\uff0c\u5c31\u4f1a\u6709\u7740\u8f83\u5f3a\u7684\u8c03\u6574\u80fd\u529b\uff0c\u8fd9\u5c31\u4f7f\u5f97\u4ed6\u53ea\u9700\u7528\u5f53\u524d\u8fd9\u5f20\u56fe\u6765\u8868\u793a\u5f53\u524d\u7684\u72b6\u6001\uff0c\u800c\u4e0d\u7528\u50cfdp\u90a3\u6837\u5b58\u50a8\u4e0b\u6bcf\u4e00\u79cd\u72b6\u6001\u3002dp\u7684\u8c03\u6574\u80fd\u529b\u4e5f\u4e0d\u5f3a\uff0c\u5f53\u4e00\u79cd\u60c5\u51b5\u7684\u52a0\u5165\u4f1a\u5927\u91cf\u6539\u53d8\u5df2\u6709\u72b6\u6001\u65f6\uff0cdp\u5c31\u4f1a\u663e\u7684\u5f88\u9ebb\u70e6\uff0c\u800c\u7f51\u7edc\u6d41\u5219\u4f1a\u81ea\u52a8\u7684\u8c03\u6574\u4e86\u5f53\u524d\u7684\u72b6\u6001\u3002\u76ee\u524d\u7684\u7f51\u7edc\u6d41\u53ea\u80fd\u901a\u8fc7\u6784\u5efa\u8fb9\u4e0e\u70b9\u7684\u5173\u7cfb\u6765\u6784\u9020\uff0c\u6240\u6709\u7684\u5957\u8def\u5f88\u5c11\uff0c\u4e5f\u53ea\u9650\u4e8e\u8fd9\u4e00\u4e2a\u70b9\u4e0e\u8fb9\u7684\u5708\u5b50\uff0c\u800cdp\u5374\u663e\u5f97\u66f4\u52a0\u4e30\u5bcc\u4e0e\u7efc\u5408\u3002\n## code\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline char gc(){\n    static char buf[1<<7],*p1=buf,*p2=buf;\n    return (p1==p2)&&(p2=(p1=buf)+fread(buf,1,1<<7,stdin),p1==p2)?EOF:*p1++;\n}\ntemplate <class T>\ninline void read(T&data){\n    data=0;\n    register char ch=0;\n    while(ch<'0'||ch>'9')ch=gc();\n    while(ch<='9'&&ch>='0'){\n        data=(data<<3)+(data<<1)+(ch^48);\n        ch=gc();\n    }\n    return;\n}\ntemplate <class R>\ninline void write(R data){\n    if(data>9)write(data/10);\n    putchar(data%10+'0');\n}\nconst int _ = 200001,__  = 4000;\nint n,to[_<<1],head[_],cur[_],S,T,nxt[_<<1],w[_<<1],cnt=-1,vnt,ball1[_],ball2[_],reball[_];\nbool vis[_];\ninline void add(register int a,register int b,register int c ){\n    to[++cnt]=b,nxt[cnt]=head[a],head[a]=cnt,w[cnt]=c;\n    to[++cnt]=a,nxt[cnt]=head[b],head[b]=cnt,w[cnt]=0;\n}\nint dfs(register int now,register int flow){\n    if(now==T)return flow;\n    vis[now]=1;\n    for(register int i=head[now];~i;i=nxt[i]){\n        if(w[i]==0)continue;\n        if(vis[to[i]])continue;\n        register int di=dfs(to[i],min(flow,w[i]));\n        if(di>0){\n            w[i]-=di,w[i^1]+=di;return di;\n        }\n    }\n    return 0;\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    read(n);//\u67f1\u5b50\u7684\u6807\u53f7\u5c31\u662f1\u5230n\u4e86\n    S=n+1,T=S+1;//\u8fd9\u4e24\u4e2a\u5c31\u8fd9\u6837\u5b9a\u4e86\u5427\u6ce8\u610f\u7403\u4ece\u4ec0\u4e48\u5f00\u59cb\u6807\u53f7\n    vnt=T+1;\n    for(register int i=1;i<=n;++i)\n        add(i,T,1);\n    register int ret=0,ans=0;\n    for(register int i=1;1;++i){\n        \n        ball1[i]=++vnt,ball2[i]=++vnt;\n        reball[vnt-1]=i;\n        add(ball2[i],T,1);\n        add(S,ball1[i],1);\n        for(register int j=1;j<=n;++j)add(ball1[i],j,1);\n        if(i!=1){\n            for(register int j=1;j*j<(i<<1);++j){\n                if(j*j<=i)continue;\n                add(ball1[i],ball2[j*j-i],1);\n            }\n        }\n        ret=dfs(S,1);\n        memset(vis,0,sizeof(vis));\t\t\n        if(ret==0){\n            ans=i-1;\n            break;\n        }\n    }\n    write(ans);puts(\"\");\n    for(register int i=1;i<=ans;++i){\n        if(vis[i])continue;\n        register int now = i;\n        do{\n            write(now);putchar(' ');vis[now]=1;\n            for(register int j=head[ball2[now]];~j;j=nxt[j]){\n                if(to[j]==T)continue;\n                if(w[j^1]==0){\n                    now=reball[to[j]];break;\n                }\n            }\n        }while(!vis[now]);\n        puts(\"\");\n    }\n}\n\n```",
        "postTime": 1534756221,
        "uid": 70313,
        "name": "\u5b66\u54e5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u5efa\u8bae\uff1a\u505a\u8fd9\u9053\u9898\u4e4b\u524d\u5148\u505aP2764\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n\n\u8fd9\u662f\u6211\u5199\u7684\u4e00\u7bc7\u9898\u89e3\uff1ahttps://www.luogu.org/blog/20020801wyc/zui-xiao-lu-jing-fu-gai\n\n\u679a\u4e3e\u7b54\u6848A\uff0c\u5728\u56fe\u4e2d\u5efa\u7acb\u8282\u70b91..A\u3002\n\n\u5982\u679c\u5bf9\u4e8ei<j\u6709i+j\u4e3a\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9(i,j)\u3002\n\n\u8be5\u56fe\u662f\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570\u5c31\u662f\u9700\u8981\u7684\u67f1\u5b50\u6570\u3002\n\n\u5982\u679c\u521a\u597d\u6ee1\u8db3\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570\u7b49\u4e8eN\uff0c\u90a3\u4e48A\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\uff0c\u5728\u6240\u6709\u53ef\u884c\u89e3\u4e2d\u627e\u5230\u6700\u5927\u7684A\uff0c\u5373\u4e3a\u6700\u4f18\u89e3\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u53ef\u4ee5\u987a\u5e8f\u679a\u4e3eA\u7684\u503c\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570\u521a\u597d\u5927\u4e8eN\u65f6\u7ec8\u6b62\uff0cA-1\u5c31\u662f\u6700\u4f18\u89e3\u3002\n\n\u4e5f\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\uff0c\u4f1a\u5feb~~\u4e00\u70b9~~(\u5f88\u591a)\u3002\n\n\u679a\u4e3eA\u7684\u65f6\u5019\u4e0d\u5fc5\u91cd\u65b0\u5efa\u56fe\uff0c\u76f4\u63a5\u5728\u539f\u56fe\u4e0a\u9762\u52a0\u8fb9\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u70b9\u8981\u4e48\u63a5\u5728\u67d0\u4e00\u4e2a\u67f1\u5b50\u7684\u540e\u9762\uff0c\u8981\u4e48\u653e\u5728\u65b0\u7684\u67f1\u5b50\u4e0a\uff0c\u4e0d\u4f1a\u5f71\u54cd\u539f\u56fe\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nconst int inf=1e9;\nint n,m,x,y,z,s,t,ans,d[10005],i,j,k;\nstruct node{\n\tint next,to,w;\n}a[500000];\nint cnt=1,head[10005],cur[10005],f[10000],vis[10000],mark[10000],to[10000];\nqueue <int> q;\nvoid add(int x,int y,int dis)\n{\n\ta[++cnt].next=head[x];\n\ta[cnt].to=y;\n\ta[cnt].w=dis;\n\thead[x]=cnt;\n}\nbool bfs(int s,int t)\n{\n\tmemset(d,0x7f,sizeof(d));\n\twhile(!q.empty()) q.pop();\n\tfor(int i=0;i<=t;i++) cur[i]=head[i];\n\td[s]=0;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(d[v]>inf&&a[i].w) \n\t\t\t{\n\t\t\t\td[v]=d[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif(d[t]<inf) return true;\n\telse return false;\n}\nint dfs(int now,int t,int limit)\n{\n\tif(!limit||now==t) return limit;\n\tint flow=0,f;\n\tfor(int i=cur[now];i;i=a[i].next)\n\t{\n\t\tcur[now]=i;\n\t\tint v=a[i].to;\n\t\tif(d[v]==d[now]+1&&(f=dfs(v,t,min(limit,a[i].w))))\n\t\t{\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\ta[i].w-=f;\n\t\t\ta[i^1].w+=f;\n\t\t\tif(!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tt=10000;\n\twhile(1)\n\t{\n        ans++;s++;  //s\u4e3a\u65b0\u52a0\u5165\u7684\u70b9\n        for(int i=1;i<s;i++)\n           if(sqrt(i+s)==(int)(sqrt(i+s)))\n              add(i,s+5000,1),add(s+5000,i,0); //i+s\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u8fde\u4e00\u6761\u8fb9\u3002 s+5000\u8868\u793as\u7684\u5165\u70b9\uff0c\u5177\u4f53\u770b\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n        add(0,s,1); //\u8d85\u7ea7\u6e90\u70b9\u5411s\u8fde\u8fb9\n        add(s,0,0); \n        add(s+5000,t,1); //s\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u8fb9\n        add(t,s+5000,0);\n        while(bfs(0,t)) ans-=dfs(0,t,inf); \n        if(ans>n)break; \n    }\n\tprintf(\"%d\\n\",s-1); \n\tfor(int i=1;i<s;i++) \n    {\n        int k=head[i];\n        while(k)\n        {\n            if(!a[k].w){ to[i]=a[k].to-5000;break;} \n            k=a[k].next;\n        }\n    }\n    for(int i=1;i<s;i++) //\u8f93\u51fa\u8def\u5f84\n    {\n        if(mark[i])continue;int t=i;\n        while(t!=-5000)\n        {\n            mark[t]=1;\n            printf(\"%d \",t);\n            t=to[t];\n        }\n        printf(\"\\n\");\n    }\n\treturn 0;\n}\n```",
        "postTime": 1531222271,
        "uid": 44438,
        "name": "\u671b\u773c\u6d6e\u4e91",
        "ccfLevel": 0,
        "title": "\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "#### \u4f5c\u8005\uff1a\u5cb8\u82b7\u6c40\u5170\n\n# \u4e00\u3001\u9898\u76ee\uff1a\n\n[\u6d1b\u8c37\u539f\u9898](https://www.luogu.com.cn/problem/P2765)\n\n# \u4e8c\u3001\u601d\u8def\uff1a\n\n\u5148\u63a8\u9500\u4e00\u6ce2[\u535a\u5ba2](https://www.cnblogs.com/little-aztl/p/12165755.html)\u3002\n\n\u65e2\u7136\u662f\u7f51\u7edc\u6d4124\u9898\u4e2d\u7684\u4e00\u9053\uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u7528\u5230\u7f51\u7edc\u6d41\u6a21\u578b\u3002\n\n\u5176\u5b9e\u5927\u591a\u6570OI\u9898\u90fd\u662f\u6a21\u578b\u7684\u8fd0\u7528\u548c\u8f6c\u5316\uff0c\u6b64\u9898\u4e5f\u4e0d\u4f8b\u5916\u3002\n\n\u5982\u679c\u6ca1\u6709\u505a\u8fc7[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P2764)\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u505a\u4e00\u4e0b\uff0c\u518d\u6765\u7406\u89e3\u672c\u9898\u53ef\u80fd\u4f1a\u5bb9\u6613\u4e00\u4e9b\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8fd9\u6837\u5efa\u56fe\uff1a\n\n$\\forall u < v$\u5982\u679c$u + v$\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4eceu\u5411v\u8fde\u4e00\u6761**\u6709\u5411\u8fb9**\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u56feG\u4e00\u5b9a\u662f\u4e2aDAG\u3002\n\n\u6bcf\u4e00\u6839\u67f1\u5b50\uff0c\u8bb0\u6700\u4e0b\u9762\u7684\u6570\u4e3a$x$,\u6700\u4e0a\u9762\u7684\u6570\u4e3a$y$\uff0c\u90a3\u4e48\u8fd9\u6839\u67f1\u5b50\u5c31\u5bf9\u5e94\u7740\u56feG\u4e2d\u7684\u4e00\u6761\u4ece$x$\u5230$y$\u7684\u8def\u5f84\u3002\n\n\u73b0\u5728\u628a\u539f\u9898\u6539\u4e00\u4e0b\uff0c\u6539\u4e3a\u7ed9\u4f60$m$\uff0c\u8ba9\u4f60\u6c42\uff1a\u8981\u60f3\u628a$1\\sim m$\u7684\u6570\u5b57\u6446\u5230\u67f1\u5b50\u4e0a\uff0c\u6700\u5c0f\u9700\u8981\u51e0\u4e2a\u67f1\u5b50\u3002\u90a3\u662f\u4e0d\u662f\u5c31\u5bf9\u5e94\u7740\u56feG\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\uff1f\n\n\u90a3\u4e48\u73b0\u5728\u518d\u6765\u8003\u8651\u672c\u9898\uff0c\u672c\u9898\u662f\u7ed9\u4f60$n$\u4e2a\u67f1\u5b50\uff0c\u8ba9\u4f60\u6c42\u6700\u5927\u7684$m$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u589e\u52a0$m$\uff0c\u68c0\u67e5\u5f53\u524d\u7684\u56feG\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e$n$\uff0c\u5982\u679c\u5927\u4e8e\u4e86$n$\uff0c\u5c31\u7acb\u5373\u8df3\u51fa\u3002\n\n\u81f3\u4e8e\u600e\u6837\u8f93\u51fa\u7b54\u6848\uff0c\u4e0e\u201c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u201d\u90a3\u9053\u9898\u7684\u8f93\u51fa\u65b9\u6cd5\u4e00\u6a21\u4e00\u6837\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002\n\n# \u4e09\u3001\u4ee3\u7801\uff1a\n\n```cpp\n//\u597d\u770b\u7684\u4ee3\u7801\u662f\u7406\u89e3OI\u9898\u7684\u57fa\u7840\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\n#define LL long long\n#define mem(s, v) memset(s, v, sizeof s)\n\ninline LL read(void) {\n    LL x = 0, f = 1; char ch = getchar();\n    while (ch < '0' || ch > '9') { if (ch == '-') f = -1; ch = getchar(); }\n    while (ch >= '0' && ch <= '9') { x = x * 10 + ch - '0'; ch = getchar(); }\n    return f * x;\n}\n\nconst int inf = 1e9 + 5;\nconst int maxn = 1e5 + 5;\n\nint to[maxn], nxt[maxn], head[30005], tot = 1;\nint cur[maxn];\n\nint n, s, t;\nint w[maxn];\n\ninline void add(int x, int y, int z) {\n    to[++tot] = y; nxt[tot] = head[x]; head[x] = tot; w[tot] = z;\n    to[++tot] = x; nxt[tot] = head[y]; head[y] = tot;\n}\n\ninline int id(int x, int y) { return x + y * 10000; }//\u62c6\u70b9\n\ninline void AddEdge(int x) {\n    for (register int i = 1; i < x; ++i) {\n        int tmp = i + x;\n        if ((int)sqrt(tmp) * (int)sqrt(tmp) == tmp) {\n            add(id(i, 0), id(x, 1), 1);\n        }\n    }\n    add(s, id(x, 0), 1); add(id(x, 1), t, 1);\n}//\u6bcf\u589e\u52a0\u4e00\u6b21m\uff0c\u66f4\u65b0\u4e00\u4e0b\u56feG\n\nint q[maxn], l, r, vis[maxn], h[maxn];\n\ninline bool bfs(void) {\n    for (register int i = 1; i <= t; ++i) h[i] = inf, cur[i] = head[i], vis[i] = 0;\n    h[s] = 0; l = r = 1; q[r++] = s;\n    while (r - l) {\n        int u = q[l++]; vis[u] = 0;\n        for (register int i = head[u]; i; i = nxt[i]) {\n            int v = to[i];\n            if (w[i] && h[v] > h[u] + 1) {\n                h[v] = h[u] + 1;\n                if (!vis[v]) q[r++] = v, vis[v] = 1;\n            }\n        }\n    }\n    return h[t] < inf;\n}\n\nint dfs(int u, int flow) {\n    if (u == t) { return flow; }\n    int tmp, used = 0;\n    for (register int i = cur[u]; i; i = nxt[i]) {\n        int v = to[i]; cur[u] = i;\n        if (w[i] && h[v] == h[u] + 1) {\n            if (tmp = dfs(v, min(flow - used, w[i]))) {\n                w[i] -= tmp; w[i ^ 1] += tmp;\n                used += tmp;\n                if (used == flow) break;\n            }\n        }\n    }\n    return used;\n}\n\nint maxflow;\n\ninline void dinic(void) {\n    while (bfs()) {\n        maxflow += dfs(s, inf);\n    }\n}\n\nint suc[maxn];\n\ninline void print(int x) {//\u8f93\u51fa\u201c\u8def\u5f84\u201d\n    while (x) {\n        printf(\"%d \", x);\n        vis[x] = 1; \n        x = suc[x];\n    }\n}\n\nint main() {\n    n = read(); s = id(10000, 1) + 1, t = s + 1;\n    int now = 0, cnt = 0;\n    while (now <= n) {\n        ++cnt; AddEdge(cnt);\n        dinic();\n        now = max(now, cnt - maxflow);\n    }\n    printf(\"%d\\n\", cnt - 1);\n    for (register int i = 1; i <= cnt - 1; ++i) {\n        for (register int j = head[i]; j; j = nxt[j]) {\n            int v = to[j];\n            if (v != s && v != t) {\n                if (w[j ^ 1]) {\n                    suc[i] = v - 10000;\n                    break;\n                }\n            }\n        }\n    }\n    mem(vis, 0);\n    for (register int i = 1; i <= cnt - 1; ++i) {\n        if (!vis[i]) print(i), puts(\"\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1578455057,
        "uid": 43513,
        "name": "\u5cb8\u82b7\u6c40\u5170",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u8003\u8651\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u7403\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u8bbe\u4e3a$i_x,i_y$\uff0c\u5176\u4e2d$i_x$\u8fde\u8d85\u6e90\uff0c$i_y$\u8fde\u8d85\u6c47\u3002   \n``` cpp\nadd(0,ans*2,1);\nadd(ans*2+1,t,1);\n```\n\u5efa\u56fe\uff1a\u5047\u8bbe\u6709\u4e24\u4e2a\u5c0f\u7403$i,j(i<j)$\uff0c\u6ee1\u8db3$a_i+a_j$\u662f\u5e73\u65b9\u6570\uff0c\u5373$j$\u53ef\u4ee5\u653e\u5728$i$\u540e\u9762\uff0c\u90a3\u4e48\u5c06$i_x$\u548c$j_y$\u76f8\u8fde\uff0c\u6d41\u91cf\u9650\u5236\u4e3a$1$\u3002   \n``` cpp\nfor(int i=1;i<ans;i++)\n{\n\tif(sqrt(i+ans)==(int)sqrt(i+ans))\n\t{\n\t\tadd(i*2,ans*2+1,1);\n\t}\n}\n```\n\u90a3\u4e48\u5047\u5982\u4e00\u4e2a\u65b0\u52a0\u5165\u7684\u7403\u7f16\u53f7\u4e3a$k$\uff0c\u4e0e\u524d\u9762\u7684\u70b9\u8fde\u8fb9\u4e4b\u540e\uff0c\u518d\u4ece\u8d85\u6e90\u5411\u8d85\u6c47\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u5982\u679c\u6709\u6d41\u91cf\u4e3a$1$\u7684\u589e\u5e7f\u8def\uff0c\u90a3\u4e48\u6ca1\u6709\u95ee\u9898\uff0c\u5176\u4e2d\u6d41\u5411$k_y$\u7684\u70b9\u5c31\u662f$k$\u7684\u524d\u9762\u90a3\u4e2a\u70b9\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u8981\u65b0\u5f00\u4e00\u5217\uff0c\u5e76\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u6709\u7528\u3002 \n``` cpp\nint k=dinic();\nif(k==0)\n{\n\tsum++;\n\tbeg[sum]=ans;\n}\n```\n\u6700\u540e\u6839\u636e\u6bcf\u4e2a\u70b9\u7684\u6765\u6e90\u8f93\u51fa\u7b54\u6848\n``` cpp\nfor(int i=1;i<=n;i++)\n{\n\tint x=beg[i];\n\twhile(x!=t/2&&x!=0)\n\t{\n\t\tprintf(\"%d \",x);\n\t\tx=from[x];\n\t}\n\tcout<<\"\\n\";\n}\n```\n   \n\u7136\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002  \n#### \u5728\u4ee3\u7801\u4e4b\u524d\uff0c\u795d\u5927\u5bb6NOIP2019 RP++\n\u4ee3\u7801\uff1a\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define INF 0x3fffffff\nint n;\nint ans;\nint s=0,t=5000;\nint beg[105];\nstruct Edge\n{\n\tint to;\n\tint nxt;\n\tint dis;\n};\nEdge edge[200005];\nint ss=-1;\nint fir[10005];\nint from[10005];\nvoid add(int u,int v,int w)\n{\n//\tprintf(\"%d %d %d\\n\",u,v,w);\n\tss++;\n\tedge[ss].to=v;\n\tedge[ss].dis=w;\n\tedge[ss].nxt=fir[u];\n\tfir[u]=ss;\n\tss++;\n\tedge[ss].to=u;\n\tedge[ss].dis=0;\n\tedge[ss].nxt=fir[v];\n\tfir[v]=ss;\n}\nint dep[10005];\nbool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int> q;\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tfor(int i=fir[t];i!=-1;i=edge[i].nxt)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif(edge[i].dis>0&&dep[to]==0)\n\t\t\t{\n\t\t\t\tdep[to]=dep[t]+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\tif(dep[t]==0)\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\nint dfs(int now,int flow)\n{\n\tif(now==t)\n\t{\n\t\treturn flow;\n\t}\n\tfor(int i=fir[now];i!=-1;i=edge[i].nxt)\n\t{\n\t\tint to=edge[i].to;\n\t\tif(dep[now]+1==dep[to]&&edge[i].dis>0)\n\t\t{\n\t\t\tint d=dfs(to,min(flow,edge[i].dis));\n\t\t\tif(d>0)\n\t\t\t{\n\t\t\t\tedge[i].dis-=d;\n\t\t\t\tedge[i^1].dis+=d;\n\t\t\t\tfrom[now/2]=to/2;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic()\n{\n\tint ans=0;\n\twhile(bfs()==true)\n\t{\n\t\tint tmp=dfs(s,INF);\n\t\tif(tmp>0)\n\t\t{\n\t\t\tans+=tmp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tmemset(fir,-1,sizeof(fir));\n\tcin>>n;\n\tint sum=0;\n\twhile(sum<=n)//\u5982\u679csum>n\uff0c\u90a3\u4e48\u5219\u4e0d\u80fd\u518d\u653e\u5c0f\u7403\u4e86\n\t{\n\t\tans++;\n\t\tadd(0,ans*2,1);\n\t\tfor(int i=1;i<ans;i++)\n\t\t{\n\t\t\tif(sqrt(i+ans)==(int)sqrt(i+ans))\n\t\t\t{\n\t\t\t\tadd(i*2,ans*2+1,1);\n\t\t\t}\n\t\t}\n\t\tadd(ans*2+1,t,1);\n\t\tint k=dinic();\n\t\tif(k==0)\n\t\t{\n\t\t\tsum++;\n\t\t\tbeg[sum]=ans;\n\t\t}\n\t}\n\tans--;\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=n;i++)//\u8f93\u51fa\u7ed3\u679c\n\t{\n\t\tint x=beg[i];\n\t\twhile(x!=t/2&&x!=0)\n\t\t{\n\t\t\tprintf(\"%d \",x);\n\t\t\tx=from[x];\n\t\t}\n\t\tcout<<\"\\n\";\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1546929648,
        "uid": 70780,
        "name": "wasa855",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u9b54\u672f\u7403\u95ee\u9898 \u7f51\u7edc\u6d41\u7684\u7ecf\u5178\u4f8b\u9898\n\n\u7136\u800c\u672c\u849f\u84bb\u5e76\u4e0d\u4f1a\u5199\u7f51\u7edc\u6d41\u505a\u6cd5\n\n\u6240\u4ee5\u4eca\u5929\u6211\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e00\u79cd\u8f83\u4e3a\u6734\u7d20\u7684\u505a\u6cd5\n\n### \u8d2a\u5fc3\n\n\u672c\u9898\u7684\u6570\u636e\u7ed9\u768455 \u6240\u4ee5\u6211\u4eec\u5c3d\u53ef\u4ee5\u5199O3 O4\u7b97\u6cd5\n\n\u4e8e\u662f\u6211\u4fbf\u6709\u4e86\u8d2a\u5fc3\u7684\u5ff5\u5934\n\n\u67e5\u770b\u672c\u9898\u9898\u610f\u4e0d\u96be\u53d1\u73b0 \u4e3a\u4e86\u4f7f\u67f1\u5b50\u5c3d\u53ef\u80fd\u586b\u6ee1\u4e14\u5c3d\u53ef\u80fd\u591a\u586b\u6570\n\n\u53ef\u4ee5\u628a\u672c\u9898\u5206\u4e3a\u4e24\u79cd\u64cd\u4f5c\n\n(1)\u5982\u679c\u5f53\u524d\u67f1\u5b50\u6709\u53ef\u4ee5\u653e\u7f6e\u4f7f\u524d\u540e\u6210\u4e3a\u5e73\u65b9\u6570\u7684\u4f4d\u7f6e \u5219\u653e\u7f6e\n\n(2)\u5982\u679c\u5f53\u524d\u6ca1\u6709\u53ef\u653e\u7f6e\u4f4d\u7f6e \u5f00\u4e00\u4e2a\u65b0\u67f1\u5b50 \u5c06\u8be5\u7403\u653e\u5230\u65b0\u67f1\u5b50\u7684\u7b2c\u4e00\u9879\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u8fa3~ \u4f46\u662f\u6211\u4eec\u6709\u51e0\u4e2a\u5730\u65b9\u9700\u8981\u6ce8\u610f\n\na\u8981\u6ce8\u610f\u8fb9\u754c\u662f\u67f1\u5b50\u5f00\u5230n\u4e2a \u5982\u679c\u4e0d\u5224\u8fb9\u754c\u4f1a\u4f7f\u7a0b\u5e8f\u8fdb\u5165\u6b7b\u5faa\u73af\n\nb\u7531\u4e8e\u7403\u53f7\u662f\u81ea\u589e\u7684 \u6240\u4ee5\u5728\u8f93\u51fa\u6700\u5927\u7403\u53f7\u662f\u8981\u8f93\u51fa\u6700\u540e\u5224\u65ad\u505c\u6b62\u7684\u7403\u53f7-1\n\nc\u5728\u5faa\u73af\u5224\u65ad\u653e\u7403\u7684\u65f6\u5019\u53ef\u4ee5\u627e\u5230\u4f4d\u7f6e\u7acb\u523bbreak \u8fd9\u6837\u53ef\u4ee5\u8fbe\u5230\u4e00\u4e2a\u526a\u679d\u7684\u6548\u679c\n\n\u597d\u8fa3 \u770b\u5230\u8fd9\u91cc\u6709\u6ca1\u6709\u89c9\u5f97\u5176\u5b9e\u8fd9\u4e2a\u9898\u5f88\u7b80\u5355\u5462\n\n\u6211\u5efa\u8bae\u4f60\u4eec\u81ea\u5df1\u5199\u5199 \u5982\u679c\u8fd8\u5199\u4e0d\u51fa\u6765\u7684\u8bdd\u518d\u770b\u4e0b\u9762\u7684\u5b8c\u6574\u4ee3\u7801\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\n\n```\n#include<cstdio>\n#include<cctype>\n#include<cmath>\n#define rg register  \nusing namespace std;\nconst int N =56;\nint f[N][10001],ball,book[N];//book\u6765\u5b58\u6bcf\u4e00\u4e2a\u67f1\u5b50\u6709\u51e0\u4e2a\u6570\nint n,cnt=1,spot;\ninline int read(){\n\trg int f=0,x=0;\n\trg char ch=getchar();\n\twhile(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch)) \tx=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\ninline bool jud(rg int x){//\u5224\u65ad\u662f\u5426\u4e3a\u5e73\u65b9\u6570\n    rg int i=(int)sqrt(x);\n    if(i*i==x)\treturn true;\n    else\treturn false;\n}\nsigned main(){\n    n=read();\n    while(cnt<=n){\n        ball++;\n        spot=0;\n        for(rg int i=1; i<=cnt; ++i){\n            if(jud(ball+f[i][book[i]])){//\u5982\u679c\u80fd\u627e\u5230\n                book[i]++;\n                f[i][book[i]]=ball;\n                break;\n            }\n            spot++;//\u6bcf\u627e\u4e00\u4e2a\u5faa\u73af\u90fd\u6807\u8bb0\u4e00\u4e0b\n        }\n        if(spot==cnt){//\u8d70\u5b8c\u6240\u6709\u5faa\u73af\u90fd\u6ca1\u627e\u5230\n            cnt++;\n            f[cnt][1]=ball;\n            book[cnt]=1;\n        }\n    }\n    printf(\"%d\\n\",ball-1);//\u4e00\u5b9a\u8981-1\uff01\uff01\n    for(rg int i=1; i<cnt; ++i){//i<cnt\u662f\u56e0\u4e3a\u73b0\u5728\u7684cnt\u662f\u591a\u51fa\u6765\u7684\u4e00\u4e2aball\n        for(rg int j=1; j<=book[i]; ++j)\n            printf(\"%d \",f[i][j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```\n\u540e\u8bdd\uff1a\n\n\u5f53\u7136\u7f51\u7edc\u6d41\u8fd8\u6709\u5176\u5b83\u7684\u9898\u53ef\u4ee5\u62ff\u8bf8\u5982\u6b64\u7c7b\u7684\u8d2a\u5fc3\u505a\n\n\u65e2\u7136\u5206\u5728\u4e86\u7f51\u7edc\u6d41\u5927\u5bb6\u6700\u597d\u8fd8\u662f\u8981\u5c1d\u8bd5\u4e00\u4e0b\u7f51\u7edc\u6d41\u7684\u505a\u6cd5\n\n\u4e0d\u8981\u6d6a\u8d39\u6bcf\u4e00\u9053\u597d\u9898",
        "postTime": 1522143162,
        "uid": 51744,
        "name": "Horrigue_\u8881\u56db\u7237",
        "ccfLevel": 0,
        "title": "P2765 \u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "//\u5176\u5b9e\u8fd9\u9053\u9898\u53ef\u80fd\u5f88\u591a\u4eba\u5982\u679c\u4e0d\u662f\u770b\u5230\u6709\u7f51\u7edc\u6d41\u8fd9\u4e2a\u6807\u7b7e\uff0c\u53ef\u80fd\u4e0d\u4f1a\u60f3\u5230\u7f51\u7edc\u6d41\uff1b\u4e00\u822c\u4eba\u4f1a\n\n//\u60f3\u5230\u8d2a\u5fc3\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6211\u4e0d\u4f1a\u8d2a\u5fc3\uff0c\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u662f\u7f51\u7edc\u6d4124\u9898\u4e4b\u4e00\uff0c\u4fbf\u9009\u62e9\u4e86\u7f51\u7edc\u6d41\uff1b\n\n//\u5176\u5b9e\u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u5efa\u56fe\uff0c\u4e0d\u4f1a\u5efa\u56fe\u5c31\u5b8c\u4e86\uff0c\u53ef\u4ee5\u4ece1\u679a\u4e3e\uff0c\u7136\u540e\u4e00\u4e00\u5224\u65ad\uff0c\u5982\u679c\u4e24\u4e2a\u7403\u7684\u548c\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u628a\u5b83\u4eec\u8fde\u5728\u4e00\u8d77\uff0c\u5b9a\u4e49ans\u4e3a\u67f1\u5b50\u6570\uff1b\u5982\u679c\u67f1\u5b50\u6570\n\n//\u5927\u4e8en\uff0c\u5219break\uff1bans\u6bcf\u6b21\u679a\u4e3e\u662f\u52a01\uff0c\u5982\u679c\u80fd\u627e\u5230\u4e00\u6761\u6700\u5927\u6d41\uff0c\u5219ans-1\uff1b\u56e0\u4e3a\u76f8\u5f53\u4e8e\u628a\u4e24\u4e2a\u67f1\u5b50\u5408\u5e76\u6210\u4e00\u4e2a\u67f1\u5b50\uff1b\n\n\n\n\n        \n```cpp\n//\u5177\u4f53\u89c1\u4ee3\u7801\uff1b.\n//\uff01\uff01\uff01\uff01\u679a\u4e3e\u7b54\u6848\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u7136\u540e\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u53ef\u4ee5\u8f6c\u5316\u6210\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u4ece\u800c\u7528\u6700\u5927\u6d41\u89e3\u51b3\u3002 \n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#define N 10010\nusing namespace std;\nstruct node\n{\n     int u,next,to,s;\n}Edge[N*20];\nconst int m=5000;//\u62c6\u70b9\u52a0\u7684\u6570\uff1b \nconst int T=10000;//\u5b9a\u4e49\u6c47\u70b9\uff1b \nint n,ans,s,tot=2;\nint head[N];\nint h[N],que[N];\nbool used[N];\nint to[N];\nint vis[N];\nvoid add(int x,int y,int z)//\u94fe\u8868 \uff0c\u5f88\u57fa\u7840\u4e86\uff1b \n{\n    Edge[tot].u=x;\n    Edge[tot].next=head[x];\n    Edge[tot].to=y;\n    Edge[tot].s=z;\n    head[x]=tot;\n    tot++;\n}\nvoid ins(int x,int y)\n{\n    add(x,y,1),add(y,x,0);\n}\nbool bfs()//\u6a21\u7248 \uff0c\u5176\u5b9e\u53ef\u4ee5\u5f00\u4e00\u4e2avis\u3010\u3011\u6570\u7ec4\uff0c\u53ea\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fc7\u4e0d\u4e86\uff1bqwq\uff1b \n{\n    queue<int>Q;\n    memset(h,-1,sizeof(h));\n    Q.push(0);\n    h[0]=1;\n    while(!Q.empty())\n    {\n        int now=Q.front();\n        Q.pop();\n        for(int i=head[now];i;i=Edge[i].next)\n        {\n            if(h[Edge[i].to]==-1&&Edge[i].s>0)\n            {\n                h[Edge[i].to]=h[now]+1;\n                Q.push(Edge[i].to);\n            }\n        }\n    }\n    if(h[T]==-1) return 0;\n   return 1;\n}\nint dfs(int u,int f)//\u6a21\u7248 \n{\n    if(u==T||f==0)return f;\n    int used=0;\n    for(int i=head[u];i;i=Edge[i].next)\n    {\n        if(Edge[i].s>0&&h[Edge[i].to]==h[u]+1)\n       {\n           int w=f-used;\n        w=dfs(Edge[i].to,min(w,Edge[i].s));\n        Edge[i].s-=w;\n        Edge[i^1].s+=w;\n        used+=w;\n        if(used==f)return f;\n       } \n    }\n    return used;\n}\nvoid getans()//\u8f93\u51fa\uff0c\u4e5f\u633a\u5173\u952e\u7684\uff1b \n{\n    for(int i=1;i<s;i++)\n    {\n        for(int j=head[i];j;j=Edge[j].next)\n        {\n            if(Edge[j].s)continue//\u6b8b\u91cf\u4e3a\u4e0d\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u8d70\uff0c\u8df3\u8fc7;\n            to[i]=Edge[j].to-m;//\u56e0\u4e3a\u539f\u6765\u52a0m\uff0c\u6240\u4ee5-\uff1b \n            break;\n        }\n    }\n    for(int i=1;i<s;i++)//\u81ea\u884c\u4f53\u4f1a \n    {\n        if(used[i])continue;\n        int t=i;\n        while(t!=-m)\n        {\n            printf(\"%d \",t);\n            used[t]=true;\n            t=to[t];\n        }\n        cout<<endl;\n    }\n}\nvoid dinic()\n{\n    while(bfs())\n        ans-=dfs(0,1E9);//\u4e00\u5b9a\u662f\u51cf\uff0c\u56e0\u4e3a\u5408\u5e76\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53c2\u770b\u6211\u7684\u7b2c\u4e00\u7bc7\u7f51\u7edc\u6d41\u9898\u89e3\uff1b \n}\nint main()\n{\n    cin>>n;\n   while(1)//\u8fd9\u91cc\u9762\u662f\u5173\u952e\uff0c\u5efa\u56fe\uff1b \n    {\n        ans++,s++;\n        for(int i=1;i<s;i++)\n            if(sqrt(i+s)==(int)sqrt(i+s))//\u5224\u65ad\u662f\u5426\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff1b \n                ins(i,s+m);\n        ins(0,s),ins(s+m,T);//\u62c6\u70b9\u8fde\u8fb9 \n        dinic();\n        if(ans>n)break;//\u8868\u793a\u5df2\u7ecf\u5927\u4e8en\u6839\u67f1\u5b50\u4e86\uff1b \n    }\n        printf(\"%d\\n\",s-1);\n        getans();\n    return 0;\n}\n```",
        "postTime": 1513418201,
        "uid": 49335,
        "name": "LoveHX",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u5308\u7259\u5229\u7b97\u6cd5AC\u672c\u9898\u76ee~~\u901f\u5ea6\u8fd8\u4e0d\u6162~~\n\n#### \u9898\u76ee\u89e3\u6cd5\n\n\u4ece\u4e00\u5f00\u59cb\u679a\u4e3e\u7b54\u6848$N$\uff0c\u5efa\u4e00\u4e2a$N$\u4e2a\u70b9\u7684\u56fe\uff0c\u5982\u679c$i<j$,\u5e76\u4e14$i+j=K^2$ \u90a3\u4e48\u7ed9$i$,$j$\u8fde\u8fb9\n\n\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5c31\u662f\u8be5\u7b54\u6848\u6240\u9700\u8981\u7684\u67f1\u5b50\u6570\n\n(\u5982\u679c\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u8bf7\u8f6c[\u6700\u5c0f\u8def\u5f84\u8986\u76d6](https://www.luogu.com.cn/problem/P2764)\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u7528\u5308\u7259\u5229AC)\n\n\u5f53\u67f1\u5b50\u6570\u5927\u4e8e\u9898\u76ee\u4e2d\u7ed9\u7684\u5c31\u9000\u51fa\uff0c\u8f93\u51fa\u7b54\u6848\n\n## \u5308\u7259\u5229\u4ee3\u7801\u5b9e\u73b0\uff08\u91cd\u70b9\uff09\n\n\u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u53ea\u8981\u6bcf\u6b21\u91cd\u65b0\u5efa\u56fe\u91cd\u65b0\u8dd1\u4e00\u8fb9\u5308\u7259\u5229\u5c31\u597d\u4e86\uff0c\u7ed3\u679cT\u98de\n\n\u4f18\u5316\uff1a\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u56fe\u7684\u5dee\u522b\uff0c\u6bcf\u6b64n\u81ea\u589e\u4e00\u6b21\uff0c\u90a3\u4e48\u53ea\u8981$O(n)$\u52a0\u5165\u4e00\u4e9b\u8fb9\u800c\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\n\n\u7136\u800c\u6bcf\u6b21\u90fd\u8dd1\u4e00\u8fb9\u5308\u7259\u5229\u65f6\u95f4\u4e5f\u662f\u4e0d\u591f\uff0c\u6211\u4eec\u8003\u8651\u4e0d\u5c06\u4e0a\u6b21\u5308\u7259\u5229\u7684\u7ed3\u679c\uff08\u50a8\u5b58\u5339\u914d\u7684\u6570\u7ec4\uff09\u6e05\u96f6\n\n\u5e76\u4e14\u5728\u8dd1\u5308\u7259\u5229\u65f6\uff0c\u5982\u679cx\u5df2\u7ecf\u6709\u5339\u914d\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u518d\u53bb\u627e\u8def\u5f84\u4e86\uff0c\u76f4\u63a5\u66f4\u65b0\u7ed3\u679c\n\n---\n\u8fd9\u6837\u4f18\u5316\u540e\u5c31\u53ef\u4ee5\u8f7b\u6613AC\u4e86\uff0c\u90e8\u5206\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Maxn=1e6+5;\nint First[Maxn],to[Maxn],Next[Maxn],cnt,K,n,m;\nint match_x[Maxn],match_y[Maxn];bool vis[Maxn];\nmap<int,bool>f;//\u8bb0\u5f55\u5e73\u65b9\u6570 \ninline void add(int z,int y)\n{\n\tNext[++cnt]=First[z];\n\tFirst[z]=cnt;\n\tto[cnt]=y;\n}\ninline int R()\n{\n    int res=0,sign=1;char ch;\n    while((ch=getchar())>'9'||ch<'0') if(ch=='-') sign=-1;\n    res+=ch-'0';\n    while((ch=getchar())<='9'&&ch>='0') res=res*10+ch-'0'; \n    return res*sign;\n}\nbool path(int x)\n{\n\tfor(int k=First[x];k;k=Next[k])\n\t{\n\t\tif(vis[to[k]]||to[k]>n)continue;//\u8981\u5224\u65ad\u8fb9\u754c\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21n--\u4e86 \n\t\tvis[to[k]]=1;\n\t\tif(!match_y[to[k]]||path(match_y[to[k]]))//\u5bf9\u65b9\u6ca1\u5339\u914d\u6216\u8005\u53ef\u4ee5\u589e\u5e7f\n\t\t{\n\t\t\tmatch_y[to[k]]=x;\n\t\t\tmatch_x[x]=to[k];\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\ninline void pre()\n{ \n\tfor(int i=1;i<n;i++)//\u52a0\u8fb9 \n\tif(f[i+n]) add(i,n);\n}\ninline int XYL()//\u5308\u7259\u5229\u7b97\u6cd5 \n{\n\tint res=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tres+=(match_x[i]||path(i));//\u5982\u679ci\u5728\u4e0a\u6b21\u5df2\u7ecf\u6709\u5339\u914d\u4e86\uff0c\u5c31\u76f4\u63a5\u66f4\u65b0\u7ed3\u679c \n\t\tmemset(vis,0,sizeof(bool)*(n+5));\n\t}\n\treturn n-res;\n}\nint main()\n{\n\tm=R();n=0;\n\tfor(int i=1;i<=2000;i++) f[i*i]=1;//\u5904\u7406\u5e73\u65b9\u6570 \n\twhile(++n)//\u679a\u4e3e\u7b54\u6848 \n\t{\n\t\tpre();\n\t\tif(XYL()==m+1)//\u5982\u679c\u67f1\u5b50\u6570\u591a\u4e86 \n\t\t{\n\t\t\t--n;\n\t\t\tprintf(\"%d\\n\",n);\n\t\t\tbreak;\n\t\t}\n\t}\n\tmemset(match_y,0,sizeof match_y);\n\tmemset(match_x,0,sizeof match_x);\n\tXYL();\n\tint x;//\u4e0b\u9762\u6839\u636e\u6211\u4eec\u5b58\u4e0b\u6765\u7684\u5339\u914d\u8f93\u51fa\u7b54\u6848 \n\tfor(int i=1;i<=n;i++)\n\tif(!vis[i])\n\t{\n\t\tx=i;\n\t\twhile(x&&!vis[x])\n\t\t{\n\t\t\tvis[x]=1;\n\t\t\tprintf(\"%d \",x);\n\t\t\tx=match_x[x];\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n```\n",
        "postTime": 1575078492,
        "uid": 220857,
        "name": "\u7d20\u8d28\u73a9\u5bb6\u5b591\u8d85",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "## [5].\u9b54\u672f\u7403\u95ee\u9898 \n\n\u9898\u76ee:[\u81ea\u5df1\u5eb7](https://www.luogu.org/problem/P2765)\n\n**\u5728\u505a\u8fd9\u4e00\u9898\u4e4b\u524d \u5efa\u8bae\u5148\u505a[4].\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898_(:\u0437\u309d\u2220)_**\n\n\u89e3\u6cd5:\n\u8fd9\u4e00\u9898\u5f88\u5751!!!            \n\u9996\u5148 \u8981\u77e5\u9053\u9898\u76ee\u4e2d\u7684\u4e09\u4e2a\u6027\u8d28(~~\u5751\u70b9~~           \n1.\u6240\u6709\u7403\u7684\u5e8f\u53f7\u662f\u8fde\u7eed\u7684       \n2.\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u53ef\u4ee5\u653e**\u4e00\u4e2a**\u4efb\u610f\u7684\u7403 \u6216 \u591a\u4e2a\u76f8\u90bb\u7f16\u53f7\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570  \n3.\u67f1\u5b50\u7684\u610f\u4e49:\u4f5c\u4e3a\u8fde\u63a5\u4e00\u6bb5\u5c0f\u7403\u7684\u7ef3\u5b50\n\n\u800c\u8fd9\u4e2a\u6a21\u578b \u5c31\u53ef\u4ee5\u8f6c\u53d8\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\n\u4e0a\u8ff0\u95ee\u9898\u662f\u7ed9\u5b9a**\u70b9**\u548c**\u8fb9**\u6765\u6c42\u5176\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\n\u800c\u672c\u9898 \u5219\u662f\u5728\u5df2\u77e5**\u56fe\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6**\u7684\u60c5\u51b5\u4e0b\u6765\u63a8\u51fa\u8be5\u56fe\u7684\u8282\u70b9\u6570\n\n\u5bf9\u4e8e\u672c\u9898 \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u679a\u4e3e\u6765\u5efa\u8fb9         \n\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053 \u8fd9\u9053\u9898\u6709\u591a\u5c11\u4e2a\u7ed3\u70b9 \u6240\u4ee5\u6211\u4eec\u5148\u5efa5000\u4e2a\u70b9   \n\u7136\u540e \u6211\u4eec\u8981\u627e\u51fa\u6bcf\u4e24\u4e2a\u70b9\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb \u6240\u4ee5\u6211\u4eec\u5e94\u628a\u8fd95000\u4e2a\u70b9\u62c6\u6210\u4e24\u90e8\u5206(\u8be6\u7ec6\u8bf4\u660e\u89c1\u4e0a\u7bc7[4]\u9898\u89e3)  \n\u7136\u540e \u5206\u522b\u5c06\u5b9e\u90e8\u4e0e\u6e90\u70b9\u76f8\u8fde \u865a\u90e8\u4e0e\u6c47\u70b9\u76f8\u8fde\u5373\u53ef           \n\u5728\u6bcf\u6b21\u6dfb\u52a0\u70b9\u540e \u6211\u4eec\u901a\u8fc7\u4e00\u6b21\u5faa\u73af \u5982\u679c$(i+num)$\u662f\u6574\u6570\u7684\u5e73\u65b9       \n\u5c31\u5728$i$\u548c$(num+k)$\u95f4\u5efa\u7acb\u4e00\u6761\u8fb9 ... \u4ee5\u6b64\u7c7b\u63a8          \n\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u6839\u636e$num=ans+n$\u6765\u5f97\u5230$num$\u7684\u7ed3\u679c(\u6700\u540e\u522b\u5fd8\u4e86\u51cf1)     \n\u8f93\u51fa\u7b54\u6848\u65f6 \u6211\u4eec\u904d\u5386\u6240\u6709\u7684\u5b9e\u70b9 \u5982\u679c\u5b83\u6ca1\u6709\u8d70\u8fc7 \u5c31\u4ece\u5b83\u5f00\u59cb\u8d70\u5373\u53ef  \n\u5982\u679c\u6211\u4eec\u53d1\u73b0 \u5f53\u524d\u70b9\u7684\u4e0b\u4e00\u4e2a\u70b9(\u865a\u70b9)\u5bf9\u5e94\u7684\u5b9e\u70b9\u6ca1\u6709\u8d70\u8fc7   \n\u90a3\u4e48\u6211\u4eec\u5c31\u4ece\u4ece\u8fd9\u4e2a\u5b9e\u70b9\u5f00\u59cb\u7ee7\u7eed\u8d70 \u76f4\u5230\u6240\u6709\u7684\u70b9\u90fd\u88ab\u904d\u5386\u5b8c\n\n(\u6ce8:\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6240\u8f93\u51fa\u7684\u6837\u4f8b\u6570\u636e\u4e3a: \n```\n11\n1 3 6 10 \n2 7 9 \n4 5 11 \n8 \n```\n\u5e76\u975e \u662f\u4ee3\u7801\u9519\u8bef\u539f\u56e0\n(~~\u5783\u573e\u7b14\u8005\u5728\u8fd9\u4e2a\u5730\u65b9\u5361\u4e86\u5f88\u957f\u65f6\u95f4~~)\n\n**\u4ee3\u7801\u9171 OVO\u2193**\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define N 300001\n#define k 5000\n#define v to[i]\n#define inf 0x7f7f7f7f\n\nint n,m,s,t;\nint num,ans;\nint dep[N],vis[N];\nint head[N],to[N],from[N],nex[N],w[N],ecnt;\n\nvoid ae(int x,int y,int z){\n    from[ecnt]=x;\n    to[ecnt]=y;\n    w[ecnt]=z;\n    nex[ecnt]=head[x];\n    head[x]=ecnt++;\n}\n\nbool bfs(){\n    memset(dep,-1,sizeof(dep));\n    queue<int> q;\n    dep[s]=1;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i!=-1;i=nex[i]){\n            if(dep[v]==-1 and w[i]>0){\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[t]!=-1;\n}\n\nint dfs(int u,int low){\n    if(u==t)\n        return low;\n    int ret=low;\n    for(int i=head[u];i!=-1;i=nex[i]){\n        if(dep[v]==dep[u]+1 and w[i]>0){\n            int flow=dfs(v,min(ret,w[i]));\n            if(flow>0){\n                w[i]-=flow;\n                w[i^1]+=flow;\n            }\n            ret-=flow;\n            if(!ret)\n                break;\n        }\n    }\n    return low-ret;\n}\n\nint dinic(){\n    int res=0;\n    while(bfs()){\n        res+=dfs(s,inf);\n    }\n    return res;\n}\n\nvoid work(int u){//\u5f53\u524d\u70b9\n    if(vis[u])//\u5982\u679c\u5f53\u524d\u70b9\u4ee5\u8bbf\u95ee\u8fc7 \u5c31\u8fd4\u56de\n        return;\n    printf(\"%d \",u);\n    vis[u]=1;\n    for(int i=head[u];i!=-1;i=nex[i]){\n        if(!w[i] and v!=s){\n            if(!vis[v-k])\n                work(v-k);\n        }\n    }\n} \n\nvoid pre(){\n    scanf(\"%d\",&n);\n    s=0,t=k*2+1;\n    for(int i=1;i<=k;i++){\n        ae(s,i,1);\n        ae(i,s,0);\n        ae(i+k,t,1);\n        ae(t,i+k,0);\n    }\n    int flag=0;\n    ans=0,num=0;\n    while(1){\n        ans++,num++;\n        for(int i=1;i<=num-1;i++){\n            if(sqrt(i+num)==(int)(sqrt(i+num))){//\u5224\u65adi+num\u662f\u5426\u662f\u6574\u6570\u7684\u5e73\u65b9 c++11\u4e2d\u5fc5\u987b\u8fd9\u4e48\u5199\n                ae(i,num+k,1);\n                ae(num+k,i,0);\n            }\n        }\n        ans+=dinic();//\u6bcf\u6b21\u6c42\u5f97\u7684\u6700\u5927\u5339\u914d\u6570\n        if(num-ans>n)//num=ans+n\u5982\u679c\u8d8a\u754c \u5c31\u9000\u51fa\n            break;\n    }\n}\n\nint main(){\n    memset(head,-1,sizeof(head)); \n    pre();\n    printf(\"%d\\n\",num-1);\n    for(int i=1;i<=num-1;i++){\n        if(!vis[i]){\n            work(i);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1572873634,
        "uid": 58751,
        "name": "VanillaYuzume",
        "ccfLevel": 0,
        "title": "\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "### **\u524d\u8bb0**\n\n\u4eca\u65e5\u6a21\u62df\u8d5b\u505a\u5230\u4e86\u8fd9\u9053\u9898\u7684\u7b2c\u4e00\u95ee\uff0c\u770b\u5230\u7684\u7b2c\u4e00\u773c\u611fjio\u597d\u50cf\u6c49\u8bfa\u5854\u6b38\uff0c\u7136\u540e\u5c31\u81ea\u5df1\u5f3a\u884c\u624b\u63a8\u89c4\u5f8b\uff0c~~\u7528\u534a\u5c0f\u65f6\u63a8\u51fa\u89c4\u5f8b\u540e\u628a\u8fd9\u9053\u9898\u79d2\u4e86~~\n\n\u7ed3\u675f\u540e\u540c\u673a\u623f\u5927\u4f6c\u8bf4\u8fd9\u9053\u9898\u539f\u9898\u662f\u7f51\u7edc\u6d41\uff0c\u6d1b\u8c37\u4e0a\u6709\u539f\u9898\uff0c\u53ef\u662f\u6211\u8fd8\u6ca1\u5b66\u5230\uff0c\u5c31\u60f3\u7740\u81ea\u5df1\u70b8\u4e86\u4f30\u8ba1\uff0c\u5c31\u4e0a\u6d1b\u8c37\u4ea4\u4e86\u4e00\u4efd\u4ee3\u7801\uff0c\u7ed3\u679c\u83ab\u540dAC\uff1f\n\n\n### \u6b63\u4f20\n\n\u8fd9\u9053\u9898\u7684\u89c4\u5f8b\u8fd8\u662f\u633a\u597d\u63a8\u7684\uff0c\u4f60\u53ea\u9700\u8981\u624b\u52a8\u6a21\u62df\u5230\u5927\u6982\u7b2c\u4e94\u6839\u67f1\u5b50\u7684\u65f6\u5019\u5c31\u80fd\u5f97\u51fa\u4e86\uff0c\u4f5c\u4e3a\u4e00\u7bc7\u9898\u89e3\uff0c\u6211\u8fd8\u662f\u8981\u5728\u8fd9\u91cc\u8fd8\u539f\u4e00\u7bc7\u6211\u624b\u63a8\u7684\u8fc7\u7a0b\u7684qaq\n\n\u9996\u5148\u6211\u4eec\u6765\u770b\u53ea\u6709\u4e00\u6839\u67f1\u5b50\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u5f80\u4e0a\u9762\u653e1\u53f7\u9b54\u672f\u7403\uff0c\u6b64\u65f6\u53ea\u80fd\u653e1\u4e2a\u9b54\u672f\u7403\u3002\n\n\u7136\u540e\u662f\u4e24\u6839\u67f1\u5b50\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u6839\u4e0a\u653e1\uff0c3\u5e76\u5728\u7b2c\u4e8c\u6839\u4e0a\u653e2\uff0c\u6b64\u65f6\u53ef\u4ee5\u653e3\u4e2a\u9b54\u672f\u7403\n\n\u7136\u540e\u662f\u4e09\u6839\u67f1\u5b50\u65f6....\n\n\u6162\u6162\u7684\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u4f60\u6709n\u6839\u67f1\u5b50\u65f6\uff0c\u4f60\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u9b54\u672f\u7403\u6570\u91cf\u4e0d\u4f1a\u5927\u4e8e(n+1)^2/2,\u56e0\u4e3a\u4f60\u4e00\u65e6\u5927\u4e8e\u8fd9\u4e2a\u6570\u65f6\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e00\u76f4\u52a0\u5230(n+1)^2,~~\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u7ee7\u7eed\u52a0\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u6839\u67f1\u5b50\u4e0a\u6302\u65e0\u6570\u9897\u9b54\u672f\u7403(\u6ed1\u7a3d)~~\n\n\u6240\u4ee5\u5f53\u6211\u4eec\u62e5\u6709n\u6839\u67f1\u5b50\u65f6\uff0c\u6211\u4eec\u6240\u80fd\u653e\u7684\u9b54\u672f\u7403\u7684\u6570\u91cf\u7edd\u5bf9\u4f1a\u5c0f\u4e8e(n+1)^2/2\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u51fa\u6765\u901a\u9879\u516c\u5f0f\u5c31\u662f(n+1)^2/2-1\n\n\u6709\u4e86\u8fd9\u4e2a\u89c4\u5f8b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u6c42\u7b2c\u4e8c\u95ee\uff0c\u5148\u7528\u8fd9\u4e2a\u6c42\u51fa\u5f53\u670955\u6839\u67f1\u5b50\u65f6\uff0c\u6211\u4eec\u80fd\u5f97\u5230\u7684\u6700\u5927\u9b54\u672f\u7403\u7684\u4e2a\u6570\uff0c\u901a\u8fc7\u6211\u7684\u7a0b\u5e8f\u5f97\u51fa\u7684\u6570\u5b57\u6ca1\u6709\u5927\u4e8e2000\uff0c\u6240\u4ee5\u7b2c\u4e8c\u95ee\u6211\u5c31\u6781\u5176\u6109\u5feb\u5f97\u6253\u8d77\u4e86\u66b4\u529b....\n\n\u4e0b\u9762\u8d34\u51fa\u6211\u7684\u4ee3\u7801\uff08\u91cd\u70b9\u5728solve\u51fd\u6570\uff0c\u4e00\u822c\u53ea\u8981\u80fd\u5f97\u51fa\u7b2c\u4e00\u95ee\u7684\u7ed3\u8bba\u540e\uff0c\u7b2c\u4e8c\u95ee\u5f97\u66b4\u529b\u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u5427qaq\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ri register int\n\nconst int N = 2010;\nusing namespace std;\n\ninline int read () {\n\tint x = 0, f = 1; int ch = getchar ();\n\twhile (!isdigit (ch)) {\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar ();\n\t}\n\twhile (isdigit (ch)) {\n\t\tx = (x<<1) + (x<<3) + ch - '0';\n\t\tch = getchar ();\n\t}\n\treturn x * f;\n}\n\nint n, cnt[N];\nint ans; \nint a[N][N];\n\nint solve (int x) {\n\tint res = (x+1) * (x+1);\n\tres >>= 1;\n\tres--;\n\treturn res;\n}\n\nint main () {\n\tn = read ();\n\tans = solve (n);\n\tcout << ans << endl;\n\tfor (int i = 1; i <= ans; i++) {\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (!cnt[j]) {\n\t\t\t\ta[j][++cnt[j]] = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint sum = a[j][cnt[j]] + i;\n\t\t\tint s = (int)sqrt (sum);\n\t\t\tif (s*s == sum) {\n\t\t\t\ta[j][++cnt[j]] = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= cnt[i]; j++) {\n\t\t\tcout << a[i][j] << \" \"; \n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1572507409,
        "uid": 125869,
        "name": "Jason_Lee",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "## \u9b54\u672f\u7403\u95ee\u9898\n\u901a\u8fc7\u89c2\u5bdf\u9898\u9762\uff0c\u6211\u4eec\u53d1\u73b0\u67f1\u5b50\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u4e8e\u662f\u8003\u8651\u679a\u4e3e\u7403\n\n\u6bcf\u6b21\u5411\u6b8b\u91cf\u7f51\u7edc\u4e2d\u52a0\u5165\u4ee3\u8868\u7403\u7684\u70b9\u548c\u8fb9\uff0c\u5982\u679c\u6709\u589e\u91cf\uff0c\u8bf4\u660e\u8fd9\u4e2a\u7403\u5229\u7528\u4e86\u73b0\u6709\u7684\u67f1\u5b50\uff0c\u5426\u5219\u5c31\u8981\u591a\u52a0\u4e00\u4e2a\u67f1\u5b50\n\n\u7531\u4e8e\u5e76\u4e0d\u9884\u5148\u77e5\u9053\u7403\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u7b54\u6848\uff0c\u6240\u4ee5\u8bf4 $t$ \u8981\u5f00\u5927\u4e00\u70b9\n\n\u7136\u540e\u5728\u6211\u4eec\u900f\u5f7b\u7f51\u7edc\u6d41\u65f6\uff0c$Dinic$\u7b97\u6cd5\u4e2d\u7684 $dfs$ \u662f\u5904\u7406\u7684\u6bcf\u4e00\u6b21 $bfs$ \u6240\u53d1\u73b0\u7684\u589e\u91cf\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u65ad\u5411\u56fe\u4e2d\u52a0\u8fb9\u3001\u52a0\u70b9\uff0c\u76f4\u5230\u67f1\u5b50\u4e0d\u591f\u7528\n\n\u6b64\u65f6 $--num$ \u4fbf\u662f\u7b54\u6848\n\n\u5728\u52a0\u8fb9\u65f6\uff0c\n\n\u56e0\u4e3a\u4e00\u4e2a\u7403\u53ea\u80fd\u653e\u4e00\u6b21 , $s\\xrightarrow{1}i\\ ,\\ i'\\xrightarrow{1}t$\n\n\u5bf9\u4e8e $j<i$ \u4e14 $i+j$ \u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\n\u8fde\u8fb9$i\\xrightarrow{1}j'$\n\n\u82e5\u589e\u91cf\u4e3a0\uff0c\u5219\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\n\n$\\mathcal{Code}:$\n```cpp\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define N 50030\n#define int long long\n#define debug cout<<__LINE__<<\" \"<<__FUNCTION__<<\"\\n\"\ninline int read(){\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x*y;\n}\nint n,m,s,t,dep[N];\nint head[N],tot=1,front,used[N];\nint ans;\nint table[N],vis[N],after[N];\nstruct Node{\n    int nxt,to,dis;\n}edge[N<<2];\ninline void add(int x,int y,int z){\n    edge[++tot].nxt=head[x];\n    edge[tot].to=y;\n    edge[tot].dis=z;\n    head[x]=tot;\n}\nqueue<int> q;\ninline int bfs(){\n\tregister int i;\n\tfor(i=0;i<=N-10;i++) dep[i]=-1, used[i]=head[i];\n\tdep[s]=0;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tfront=q.front();q.pop();\n//\t\tcout<<front<<\" \";debug;\n\t\tfor(i=head[front];i;i=edge[i].nxt){\n\t\t\tif(edge[i].dis&&dep[edge[i].to]==-1){\n\t\t\t\tdep[edge[i].to]=dep[front]+1;q.push(edge[i].to);\n\t\t\t}\n\t\t}\n\t}\n//\tdebug;\n\treturn dep[t]!=-1;\n}\nint dfs(int now,int limit){\n\tif(!limit||now==t) return limit;\n\tint flow=0;\n\tfor(int &i=used[now],pro;i;i=edge[i].nxt){\n\t\tif(dep[edge[i].to]==dep[now]+1&&edge[i].dis){\n\t\t\tpro=dfs(edge[i].to,min(limit,edge[i].dis));\n\t\t\tif(!pro) continue;\n\t\t\tedge[i].dis-=pro;\n\t\t\tedge[i^1].dis+=pro;\n\t\t\tflow+=pro;\n\t\t\tlimit-=pro;\n//\t\t\tcout<<now<<\" \"<<edge[i].to<<\"\\n\";\n\t\t\tif(edge[i].to!=t) after[now>>1]=edge[i].to>>1;\n\t\t\tif(!limit) return flow;\n\t\t}\n\t}\n//\tcout<<flow<<\" \";debug;\n//\tsystem(\"pause\");\n\treturn flow;\n}\ninline void Dinic(){\n\twhile(bfs()){ans+=(dfs(s,10000000001LL));}\n}\nsigned main(){\n//\tfreopen(\"a.in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tn=read();\n\ts=0;t=50001;\n\tint now=0,num=0;\n\twhile(now<=n){\n\t\t++num;\n\t\tadd(s,num<<1,1);add(num<<1,s,0);\n\t\tadd(num<<1|1,t,1);add(t,num<<1|1,0);\n        for(int i=sqrt(num)+1;i*i<(num<<1);i++) add((i*i-num)<<1,num<<1|1,1),add(num<<1|1,(i*i-num)<<1,0);\n        ans=0;Dinic();\n        if(ans==0) table[++now]=num;\n//        cout<<num<<\" \"<<now<<\"\\n\";\n\t}\n\tcout<<--num<<\"\\n\";\n\tfor(int i=1,k;i<=n;i++){\n\t\tif(!vis[table[i]]){\n\t\t\tcout<<(k=table[i]);vis[k]=1;\n\t\t\twhile(after[k]>0&&after[k]!=t>>1){\n\t\t\t\tcout<<\" \"<<(k=after[k]);\n\t\t\t\tvis[k]=1;\n\t\t\t}\n\t\t\tcout<<\"\\n\";\n\t\t}\n\t}\n//\tfclose(stdin);\n//\tfclose(stdout);\n\treturn 0;\n}\n```",
        "postTime": 1568864743,
        "uid": 123081,
        "name": "zh_dou",
        "ccfLevel": 7,
        "title": "[\u9898\u89e3]P2765 |\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "\u679a\u4e3e\u7b54\u6848\uff0c\u5bf9\u4e8e$(i,j)(i<j)$,\u82e5$i<j$\u4e14$i+j$\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u4ece$i$\u5411$j$\u8fde\u4e00\u6761\u8fb9\n\n\u7136\u540e\u8dd1\u6700\u5c0f\u8def\u5f84\u8986\u76d6(\u53ef\u4ee5\u53c2\u7167[P2764](https://www.luogu.org/problemnew/show/P2764))\n\n\u65b9\u6848\u8f93\u51fa\u4e5f\u7c7b\u4f3c\u90a3\u4e00\u9898\n\n```cpp \n#include <bits/stdc++.h>\n\n#define R register\n#define ll long long\n#define cmax(a, b) ((a < b) ? b : a)\n#define cmin(a, b) ((a < b) ? a : b)\n#define sum(a, b, mod) ((a + b) % mod)\n\nconst int MaxN = 2e4 + 10;\nconst int MaxM = 5e5 + 10;\nconst int inf = (1 << 30);\n\nstruct edge\n{\n    int to, next, cap;\n};\n\nedge e[MaxM];\nint n, m, s = 20000, t = 20001, cnt = 1, ans, tmp;\nint head[MaxN], dep[MaxN], cur[MaxN], a[MaxN], vis[MaxN], to[MaxN];\n\ninline void add(int u, int v, int c)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    e[cnt].cap = c;\n    head[u] = cnt;\n}\n\ninline void add_edge(int u, int v, int c) { add(u, v, c), add(v, u, 0); }\n\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\n\ninline int bfs()\n{\n    memset(dep, 0, sizeof(dep));\n    memcpy(cur, head, sizeof(head));\n    std::queue<int> q;\n    dep[s] = 1;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for (int i = head[u]; i; i = e[i].next)\n        {\n            int v = e[i].to, c = e[i].cap;\n            if (dep[v] || !c)\n                continue;\n            dep[v] = dep[u] + 1;\n            q.push(v);\n        }\n    }\n    return dep[t];\n}\n\ninline int dinic(int u, int flow)\n{\n    if (u == t)\n        return flow;\n    int rest = flow;\n    for (int i = cur[u]; i && (flow - rest < flow); i = e[i].next)\n    {\n        int v = e[i].to, c = e[i].cap;\n        if (dep[v] != dep[u] + 1 || !c)\n            continue;\n        int k = dinic(v, cmin(rest, c));\n        if (!k)\n            dep[v] = dep[u] + 1;\n        else\n        {\n            e[i].cap -= k;\n            e[i ^ 1].cap += k;\n            rest -= k;\n            if (e[i].to > 5000)\n                vis[e[i].to - 5000] = 1;\n            to[u] = e[i].to;\n        }\n    }\n    if (flow - rest < flow)\n        dep[u] = -1;\n    return flow - rest;\n}\n\ninline void solve()\n{\n    int now = 0;\n    while (bfs())\n        while ((now = dinic(s, inf)))\n            ans -= now;\n}\n\nint main()\n{\n    n = read();\n    while (1)\n    {\n        ans++, tmp++;\n        for (int i = 1; i < tmp; i++)\n        {\n            int x = sqrt(i + tmp);\n            if (x * x == (i + tmp))\n                add_edge(i, tmp + 5000, 1);\n        }\n        add_edge(s, tmp, 1), add_edge(tmp + 5000, t, 1);\n        solve();\n        if (ans > n)\n            break;\n    }\n    --tmp;\n    printf(\"%d\\n\", tmp);\n    for (int i = 1; i <= tmp; i++)\n    {\n        if (vis[i])\n            continue;\n        printf(\"%d \", i);\n        int t = i;\n        while (to[t])\n        {\n            printf(\"%d \", to[t] - 5000);\n            t = to[t] - 5000;\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1560076223,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u535a\u5927\u7cbe\u6df1\u7684\u7f51\u7edc\u6d41\u3002\u3002\u3002\n\n# [\u7f51\u7edc\u6d4124\u9898-\u9b54\u672f\u7403\u95ee\u9898](https://www.luogu.org/problemnew/show/P2765)\n\n\u505a\u4e86\u51e0\u9053\u7f51\u7edc\u6d41\u7684\u9898\n\n\u60f3\u90fd\u6ca1\u60f3\u5c31\u628a\u70b9\u62c6\u5f00\uff08\u8fd9\u91cc\u662f\u7403\uff09\n\n\u7136\u540e\u5728\u6e90\u6c47-\u4e8c\u5206\u56fe\u4e0a\u8fde\u8fb9\uff08\u5199\u7684\u51e0\u9053\u8f83\u7b80\u5355\u7684\u7f51\u7edc\u6d41\u90fd\u662f\u8fd9\u6837\uff0c\u65e0\u975e\u8fde\u8fb9\u65b9\u5f0f\u4e0d\u540c\u7f62\u4e86\uff09\n\n\u7136\u540e\u5c31\u8499\u4e86\uff0c\u641e\u4e0d\u61c2\u610f\u4e49\u5728\u54ea\n\n\u7531\u4e8e\u4e00\u4e2a\u7403\u53ef\u80fd\u548c\u4e24\u4e2a\u7403\u76f8\u63a5\u89e6\uff0c\n\n\u6211\u751a\u81f3\u60f3\u628a\u4ece\u6e90\u51fa\u7684\u8fb9\u3001\u5165\u6c47\u7684\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a2\uff0c\n\n\u8fd9\u6837\u5de6\u53f3\u90e8\u96c6\u90fd\u53ef\u80fd\u4f1a\u4e0e\u4e24\u4e2a\u76f8\u5339\u914d\n\n\u53ef\u662f\u8fd9\u6837\u5c31\u6ca1\u6cd5\u4fdd\u8bc1\u7403\u7684\u8fde\u7eed\u76f8\u90bb\n\n\u90a3\u5c31\u89c4\u89c4\u77e9\u77e9\u5730\u5c06\u548c\u4e3a\u5e73\u65b9\u7684\u8fde\u8d77\u6765\uff1f\n\n\u60f3\u5230\u4e86\u8fd9\u91cc\u5374\u56f0\u4e8e\u65e0\u6cd5\u7406\u89e3\u8fd9\u8ddf\u7b54\u6848\u7684\u5173\u8054\n\n\u7136\u540e\u770b\u5230\u4e86[\u67d0\u7bc7\u9898\u89e3](https://kskun.blog.luogu.org/solution-p2765)\n\no~~\n\n---\n\n**\u679a\u4e3e\u7403\u6570\uff0c\u7403\u6570\u6bcf\u589e\u52a01\u5c31\u5efa\u7acb\u65b0\u52a0\u5165\u7684\u7403\u7684\u5173\u7cfb\uff0c\u5e76\u4e14\u91cd\u590d\u5730\u8dd1\u6700\u5927\u6d41\u3002**...\u5f53\u65b0\u52a0\u5165\u7684\u7403\u80fd\u591f\u52a0\u5165\u67f1\u5b50\u65f6\uff0c\u91cd\u590d\u8dd1\u6700\u5927\u6d41\u662f\u80fd\u5f97\u5230\u65b0\u6d41\uff08\u5373\uff1a\u8be5\u7403\u53ef\u4e0e\u5176\u4ed6\u7403\u6784\u6210\u65b0\u7684\u76f8\u90bb\u5173\u7cfb\uff09\u7684\uff0c**\u53ea\u8981\u4e00\u76f4\u80fd\u5f97\u5230\u65b0\u6d41\uff0c\u5c31\u8bf4\u660e\u67f1\u5b50\u4e0a\u8fd8\u53ef\u4ee5\u518d\u52a0\uff0c\u5f53\u6709\u4e00\u6b21\u5f97\u4e0d\u5230\u65b0\u6d41\uff0c\u5c31\u8bf4\u660e\u67f1\u5b50\u6ee1\u4e86**\uff0c\u65b0\u52a0\u5165\u7684\u7403\u5e76\u6ca1\u80fd\u52a0\u5165\u5230\u4efb\u4f55\u4e00\u4e2a\u67f1\u5b50\u4e0a\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u52a0\u67f1\u5b50\u3002\u76f4\u5230\u67f1\u5b50\u52a0\u5230\u8d85\u8fc7n\uff0c\u6b64\u65f6\u7684\u7403\u6570-1\u5c31\u662f\u6700\u5927\u7403\u6570\uff08\u56e0\u4e3a\u6b64\u65f6\u5b9e\u9645\u4e0a\u67f1\u5b50\u52a0\u5230\u8d85\u8fc7n\u4e86\uff09\u3002\n\n---\n\n\u6b63\u786e\u6027\u5f88\u597d\u7406\u89e3\uff0c\u53ef\u662f\u4ece\u4f55\u800c\u6765\u5462\uff1f\n\n\u6211\u4eec\u60f3\u60f3\u4e00\u4e2a\u7403\u521a\u6765\uff0c\u6b63\u51c6\u5907\u653e\u5165\u67d0\u4e2a\u67f1\u9876\n\n\u8fd9\u65f6\u5b83\u53ea\u4f1a\u9009\u62e9\u4e00\u4e2a\u7403\u5339\u914d\uff08\u76f8\u90bb\uff09\n\n\u6216\u8005\u4e0d\u5339\u914d\uff08\u72ec\u7acb\uff09\n\n\u6240\u4ee5\u8d70\u4e00\u904d\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u770b\u5339\u914d\u6570\u662f\u5426\u589e\u52a0\u5c31\u884c\u4e86\n\n### \u65b9\u6848\u8f93\u51fa\n\n\u65b9\u6848\u8f93\u51fa\u5c31\u4ec1\u8005\u89c1\u4ec1\u667a\u8005\u89c1\u667a\u4e86\n\n\u8fd9\u91cc\u53c8\u80fd\u5bf9\u4f60\u81ea\u5df1\u5efa\u7684\u56fe\u6709\u4e00\u4e2a\u66f4\u6df1\u7684\u7406\u89e3\n\n\u6bd4\u5982\uff1a**\u4ece\u5de6\u90e8\u96c6\u5230\u53f3\u90e8\u96c6\u7684\u6d41\u4ee3\u8868\u4ec0\u4e48\uff1f\u5bf9\u6211\u4eec\u6709\u4ec0\u4e48\u7528\uff1f**\n\n\u8fd8\u662f\u60f3\u60f3\u7403\u521a\u8fdb\u6765\u7684\u65f6\u5019\uff08\u7528\u7279\u6b8a\u60c5\u51b5\u6765\u89e3\u91ca\u666e\u904d\u60c5\u51b5\uff09\n\n\u82e5\u6ca1\u6709\u65b0\u6d41\n\n\u5219\u65b0\u8282\u70b9\u72ec\u7acb\uff08\u81ea\u6210\u4e00\u67f1\uff09->\n\n\u5219\u65b0\u7403\u5728\u67f1\u4e0a\u6ca1\u6709\u5728\u5176\u4e0b\u7684\u7403\n\n\u2234\u5de6\u5230\u53f3\u7684\u8fb9\u4ee3\u8868\u4ece\u4e0a\u5f80\u4e0b\u7684\u5173\u7cfb\n\n\u800c\u82e5\u8981\u8f93\u51fa\u65b9\u6848\n\n\u6211\u4eec\u662f\u8981\u6cbf\u7740\u67f1\u5b50\u4ece\u4e0b\u5230\u4e0a\u7684\u5173\u7cfb\u904d\u5386\u5e76\u8f93\u51fa\u7684\uff08\u53ef\u4ee5\u5728\u67f1\u5b50\u589e\u591a\u7684\u65f6\u5019\u8bb0\u5f55\u65b0\u589e\u7684\u7403\uff0c\u5373**\u6bcf\u6839\u67f1\u5e95\u7684\u7403\u5df2\u77e5**\uff09\n\n\u90a3\u5c31\u4fdd\u8bc1\u8f93\u51fa\u65f6\u8d70\u7684\u8fb9\u90fd\u662f\u4ece\u53f3\u5f80\u5de6\u5373\u53ef\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int N=2000;\nconst int inf=0x7fffffff;\nint hea[(N<<1)+5],dep[(N<<1)+5],s,t,to[(N*100)<<1],val[(N*100)<<1],nex[(N*100)<<1],tot=1,k,n,sta[60],top;\ntemplate<class T>inline void read(T &num){\n\tchar ch;\n\twhile(!isdigit(ch=getchar()));\n\tnum=ch-'0';\n\twhile(isdigit(ch=getchar()))num=num*10+ch-'0';\n}\ninline void add_edge(const int x,const int y,const int w){\n//printf(\"%d --> %d ( %d ) \\n\",x,y,w);\n\tto[++tot]=y,nex[tot]=hea[x],hea[x]=tot,val[tot]=w;\n}\n\nqueue<int> que;\nbool bfs(){\n\tmemset(dep,0,sizeof(dep));\n\tdep[s]=1;\n\tque.push(s);\n\tint x;\n\twhile(que.size()){\n\t\tx=que.front();que.pop();\n\t\tfor(int i=hea[x];i;i=nex[i]){\n\t\t\tint y=to[i];\n\t\t\tif(val[i]&&!dep[y]){\n\t\t\t\tdep[y]=dep[x]+1;\n\t\t\t\tif(y==t)return true;\n\t\t\t\tque.push(y);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint dfs(const int x,const int flow){\n\tif(x==t)return flow;\n\tint rest=flow,k;\n\tfor(int i=hea[x];i&&rest;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(val[i]&&dep[y]==dep[x]+1){\n\t\t\tk=dfs(y,min(rest,val[i]));\n\t\t\tif(k){\n\t\t\t\tval[i]-=k;\n\t\t\t\tval[i^1]+=k;\n\t\t\t\trest-=k;\n\t\t\t}\n\t\t\telse dep[y]=0;\n\t\t}\n\t}\n\treturn flow-rest;\n}\n\nint dinic(){\n\tint maxflow=0,flow;\n\twhile(bfs())while(flow=dfs(s,inf))maxflow+=flow;\n\treturn maxflow;\n}\n\nvoid dfs2(int x){\n\tprintf(\"%d \",x-N); \n//printf(\"hea[%d]=%d\\n\",x,hea[x]);\n\tfor(int i=hea[x];i;i=nex[i]){\n\t\tint y=to[i];\n//printf(\"y=%d\\n\",y);\n\t\tif(y!=s&&y!=t&&val[i]==1){\n\t\t\tdfs2(y+N);\n\t\t}\n\t}\n}\n\nint main(){\n\tread(n);\n\ts=(N<<1)+1;\n\tt=s+1;\n\tfor(k=1;;++k){\n\t\tfor(int i=2;i*i-k<k;++i){\n\t\t\tadd_edge(k,i*i-k+N,1);\n\t\t\tadd_edge(i*i-k+N,k,0);\n\t\t}\n\t\tadd_edge(s,k,1);\n\t\tadd_edge(k,s,0);\n\t\tadd_edge(k+N,t,1);\n\t\tadd_edge(t,k+N,0);\n\t\tif(!dinic()){\n\t\t\tn--;\n\t\t\tsta[++top]=k;\n\t\t\tif(n<0){\n\t\t\t\tprintf(\"%d\\n\",k-1);\n\t\t\t\tfor(int i=1;i<top;++i){\n\t\t\t\t\tdfs2(sta[i]+N);\n\t\t\t\t\tputchar('\\n');\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\t\n\t\n```",
        "postTime": 1548924596,
        "uid": 106642,
        "name": "Ajsoabk",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d4124\u9898-\u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "\u8865\u4e00\u7bc7\u4e8c\u5206\u56fe\u9898\u89e3\n\n----\n\u6839\u636e\u8d2a\u5fc3\u53ef\u4ee5\u8bc1\u660e\uff1a$ans$=($n$*($n$+2)+($n$%2))/2-1  \n\u697c\u4e0b\u6709\u5927\u4f6c\u5df2\u7ecf\u8bc1\u660e\u4e86\u8d2a\u5fc3\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff08\u53cd\u6b63\u91cd\u70b9\u4e0d\u518d\u8d2a\u5fc3\uff09  \n\n\n\u77e5\u9053\u4e86\u80fd\u653e\u7684\u7403\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6c42\u51fa\u65b9\u6848  \n\u56e0\u4e3a\u662f\u6309\u71671,2,3,4\u2026\u2026\u7684\u987a\u5e8f\u9010\u4e00\u7801\u653e\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5efa\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u5171$ans$\u4e2a\u8282\u70b9\uff0c\u5982\u679c$a<b(a \\in \\left[1,ans\\right]b \\in \\left[1,ans\\right])$\uff0c\u4e14$(a+b)$\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4ece\u70b9$a$\u5411\u70b9$b$\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\u56e0\u4e3a\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u53ef\u4ee5\u653e\u5230\u540c\u4e00\u6839\u67f1\u5b50\u4e0a\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u8f6c\u5316\u6210\u6c42$DAG$\u4e0a\u7684**\u6700\u5c0f\u8def\u5f84\u8986\u76d6**  \n\n\n\u65e2\u7136\u662f\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u5fc5\u7136\u5c11\u4e0d\u4e86\u4e8c\u5206\u56fe\uff0c\u5c06\u6bcf\u4e2a\u8282\u70b9$i$\u62c6\u6210$i$\u4e0e$i'$,\u539f\u6709\u8fb9$i\\longrightarrow j$\uff0c\u6211\u4eec\u5219\u5c06\u4e8c\u5206\u56fe\u4e2d\u7684$i$\u4e0e$j'$\u8fde\u8fb9\uff0c\u7136\u540e\u6c42\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5219\u4e3a($DAG$\u4e0a\u8282\u70b9\u6570$-$\u6700\u5927\u5339\u914d)  \n\n\n\u5bf9\u4e8e\u7b54\u6848\u7684\u8f93\u51fa\u6709\u4e9b\u5c0f\u6280\u5de7\u89c1\u6211\u7684\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint to,next;\n}e[1000000];\nint h[10000],n,ans,pop=0,f[100000];\nint match[10000],vis[10000],st[10000];\nvoid add(int x,int y){\n\tpop++;\n\te[pop].to=y;e[pop].next=h[x];\n\th[x]=pop;\n}\nbool find(int p){\n\tfor(int i=h[p];i;i=e[i].next){\n\t\tif(vis[e[i].to])continue;\n\t\tvis[e[i].to]=1;\n\t\tif(!match[e[i].to]||find(match[e[i].to])){\n\t\t\tmatch[e[i].to]=p;\n\t\t\tst[p]=e[i].to;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tans=(n*(n+2)+(n%2))/2-1;\n\tmemset(f,0,sizeof(f));\n\tfor(int i=1;i<=300;i++)\n\t  f[i*i]=1;\n\tfor(int i=1;i<=ans;i++)\n\t  for(int j=1;j<i;j++)\n\t    if(f[i+j])\n\t      add(j,i);\n\tint sum=0; \n\tmemset(st,0,sizeof(st));\n\tfor(int i=1;i<=ans;i++){\n\t\tmemset(vis,0,sizeof(vis));\n\t\tif(find(i))sum++;\n\t}\n\tprintf(\"%d\\n\",ans);\n\tint v[60000],top=0;\n\tmemset(v,0,sizeof(v));\n\tfor(int i=1;i<=ans;i++){\n\t\tif(!v[i]){\n\t\t    printf(\"%d \",i);\n\t\t    int k=st[i];v[i]=1;\n\t\t    while(k){\n\t\t\t    v[k]=1;\n\t\t    \tprintf(\"%d \",k);\n\t\t    \tk=st[k];\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546837996,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "## **\u505a\u6cd5**\n\n- \u9996\u5148\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u5982\u679c\u53ef\u4ee5\u5957\u5728\u5176\u4ed6\u5c0f\u7403\u4e0a\uff0c\u5219\u5957\u5728\u5176\u4ed6\u5c0f\u7403\u4e0a\uff0c\u53cd\u4e4b\uff0c\u5957\u5728\u67f1\u5b50\u4e0a\uff0c\u76f4\u5230\u6ca1\u6709\u591a\u4f59\u67f1\u5b50\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u5bf9\u7684\uff0c\u4f46\u6211\u89c9\u5f97\u8fd8\u662f\u7f51\u7edc\u6d41\u7684\u505a\u6cd5\u6bd4\u8f83\u91cd\u8981\u3002\n\n- \u56e0\u4e3a\u8981\u4f9d\u6b21\u53d6\u5c0f\u7403\uff0c\u90a3\u4e48\u5f53\u7b54\u6848\u4e3aans\u65f6\uff0c\u7f16\u53f7\u4e3a1-ans\u7684\u5c0f\u7403\u90fd\u88ab\u53d6\u8d70\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u6d1b\u8c37 P1251 \u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u7684\u505a\u6cd5\u6765\u62c6\u70b9\u5efa\u56fe\u3002 \n\n- \u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210a\uff0cb\u4e24\u70b9\uff0c\u56e0\u4e3a\u653e\u73af\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4eces\u8fde\u4e00\u6761\u8fb9\u5230a\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8868\u793a\u76f4\u63a5\u5c06\u5c0f\u7403\u653e\u5728\u67f1\u5b50\u5e95\u90e8\uff0ca\u518d\u5411t\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u4fdd\u8bc1\u8be5\u5c0f\u7403\u5df2\u7ecf\u7528\u8fc7\u4e86\uff0cS\u5411b\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u56e0\u4e3a\u8be5\u5c0f\u7403\u5e76\u4e0d\u4f1a\u968f\u7740\u5b83\u6d41\u5230\u6c47\u70b9\u800c\u6d88\u5931\uff0cb\u5411\u7f16\u53f7\u5927\u4e8e\u5b83\u7684\u4e14\u6ee1\u8db3\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u70b9\u7684a\u8fde\u8fb9\uff0c\u8868\u793a\u5728\u8fd9\u4e2a\u5c0f\u7403\u4e0a\u653e\u5c0f\u7403\u3002\u6700\u540eS\u5411s\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u67f1\u5b50\u6570\u7684\u8fb9\uff0c\u7528\u4e8e\u9650\u5236\u67f1\u5b50\u6570\u3002 \n\n- \u5728\u5b9e\u9645\u64cd\u4f5c\u65f6\uff0c\u56e0\u4e3a\u5e76\u4e0d\u77e5\u9053\u7b54\u6848\u4e3a\u591a\u5c11\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5b83\u80fd\u4f9d\u6b21\u88ab\u53d6\u8d70\uff0c\u6545\u8981\u679a\u4e3e\u5c0f\u7403\u4e2a\u6570\uff0c\u4e0d\u65ad\u7684\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u52a0\u5165\u6709\u5173\u7b2ci\u4e2a\u5c0f\u7403\u7684\u8fb9\uff0c\u5e76\u5728\u53c2\u4e0e\u7f51\u7edc\u7684\u57fa\u7840\u4e0a\u6c42\u6700\u5927\u6d41\uff0c\u82e5\u6700\u5927\u6d41\u4e0d\u7b49\u4e8ei\uff0c\u8bf4\u660ei-1\u4e3a\u6700\u4f18\u89e3\u3002\u56e0\u4e3a\u9664\u4e86S->s\u7684\u8fb9\u5916\uff0c\u8fb9\u6743\u5747\u4e3a\u4e00\uff0c\u56e0\u800c\u53ef\u4ee5\u679a\u4e3e\u8fb9\u6765\u8ba1\u7b97\u6d41\u91cf\u3002 \n\n- \u53e6\u5916\u6b64\u9898\u4e0d\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u6765\u505a\uff0c\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u5c0f\u7403\u4e2a\u6570\u65f6\u53ef\u4ee5\u5229\u7528\u6b8b\u4f59\u7f51\u7edc\u52a0\u901f\uff0c\u800c\u4e8c\u5206\u5219\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u5efa\u56fe\uff0c\u53cd\u800c\u66f4\u52a3\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define INF 0x3f3f3f3f\n#define N 4100\nusing namespace std;\nint n,m,bb,first[N],deep[N],tmp,s,t,sum,ans,cur[N];\nbool out[N];\nstruct Bn\n{\n    int next,to,quan;\n} bn[200100];\nqueue<int>que;\ninline void add(int u,int v,int w)\n{\n    bn[bb].to=v;\n    bn[bb].quan=w;\n    bn[bb].next=first[u];\n    first[u]=bb;\n    bb++;\n}\ninline void ad(int u,int v,int w)\n{\n    add(u,v,w);\n    add(v,u,0);\n}\ninline bool bfs()\n{\n    int p,q;\n    for(;!que.empty();que.pop());\n    memset(deep,0,sizeof(deep));\n    deep[s]=1;\n    que.push(s);\n    for(; !que.empty();)\n    {\n        q=que.front();\n        que.pop();\n        for(p=first[q]; p!=-1&&!deep[t]; p=bn[p].next)\n        {\n            if(deep[bn[p].to]||!bn[p].quan) continue;\n            deep[bn[p].to]=deep[q]+1;\n            que.push(bn[p].to);\n        }\n    }\n    return deep[t];\n}\nint dfs(int now,int mn)\n{\n    if(now==t)\n    {\n        return mn;\n    }\n    int res;\n    for(int &p=cur[now]; p!=-1; p=bn[p].next)\n    {\n        if(deep[bn[p].to]!=deep[now]+1||!bn[p].quan) continue;\n        res=dfs(bn[p].to,min(bn[p].quan,mn));\n        if(res)\n        {\n            bn[p].quan-=res;\n            bn[p^1].quan+=res;\n            return res;\n        }\n    }\n    return 0;\n}\nint main()\n{\n    memset(first,-1,sizeof(first));\n    int i,j,p,q,o,z;\n    cin>>n;\n    s=4001,t=4002;\n    for(i=1; i*i<=4000; i++)\n    {\n        for(j=1; j<=i*i/2; j++)\n        {\n            if(i*i-j<=2000&&j<i*i-j)\n                ad(j+2000,i*i-j,1);\n        }\n    }\n    ad(s,0,n);\n    for(i=1; i<=2000; i++)\n    {\n        ad(0,i,1);\n        ad(s,i+2000,1);\n        ad(i,t,1);\n        for(; bfs();)\n        {\n            for(j=0; j<=t; j++) cur[j]=first[j];\n            for(p=dfs(s,INF); p; ans+=p,p=dfs(s,INF));\n        }\n        if(ans!=i) break;\n    }\n    cout<<i-1<<endl;\n    for(j=1;j<i;j++)\n    {\n        if(out[j]) continue;\n        printf(\"%d \",j);\n        for(q=j;;)\n        {\n            for(p=first[q+2000];p!=-1;p=bn[p].next)\n            {\n                if(!bn[p].quan&&bn[p].to>=1&&bn[p].to<=2000)\n                {\n                    q=bn[p].to;\n                    out[q]=1;\n                    printf(\"%d \",q);\n                    break;\n                }\n            }\n            if(p==-1) break;\n        }\n        puts(\"\");\n    }\n}\n```",
        "postTime": 1541597292,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u7528\u8d39\u7528\u6d41\u505a\uff0c\u800c\u4e14\u8f93\u51fa\u65b9\u6848\u65f6\u6bd4\u6700\u5927\u6d41\u65b9\u4fbf\uff0cdfs\u4e00\u904d\u5373\u53ef\u3002\n\n\u7403\u6570\u53ef\u4ee5\u548c\u6700\u5927\u6d41\u4e00\u6837\u6c42~~\uff08\u6211\u5077\u61d2\u7528\u4e86\u901a\u9879\uff09~~\n\n![](https://cdn.luogu.com.cn/upload/pic/15944.png)\n\n\u4ee5\u4e0a\u662f\u5efa\u6a21\uff0c\u6e90\u70b9\u540c\u526f\u6e90\u8fde\u4e00\u6761\u6743n\u8d390\u7684\u8fb9\uff0c\u526f\u6e90\u540c\u6bcf\u4e2a\u5de6\u70b9\u8fde\u4e00\u6761\u67431\u8d391\u7684\u8fb9\uff0c\u6bcf\u4e2a\u70b9\u540c\u4e0e\u5176\u76f8\u52a0\u5f97\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u53f3\u70b9\u8fde\u4e00\u6761\u67431\u8d391\u7684\u8fb9\uff0c\u6bcf\u4e2a\u53f3\u70b9\u5411\u5de6\u70b9\u8fde\u67431\u8d390\u7684\u8fb9\uff0c\u5411\u6c47\u70b9\u8fde\u67431\u8d390\u7684\u8fb9\uff0c\u8dd1\u6700\u5927\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u4e0a\u4ee3\u7801\u2193\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int INF=2e9;\n\nint n,s1,s,t,maxn,np=1,mfl,mct;\nint h[3505],ln[3505],q[59805];\nbool vis[3505];\nstruct rpg{\n\tint li,nx,ln,ct;\n}a[59805];\n\nvoid add(int ls,int nx,int ln,int ct){\n\ta[++np]=(rpg){h[ls],nx,ln,ct};\n\th[ls]=np;\n\ta[++np]=(rpg){h[nx],ls,0,-ct};\n\th[nx]=np;\n}\n\nbool spfa(){\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=0;i<=t;++i) ln[i]=INF;\n\tint hd=1,tl=1;\n\tq[hd]=t;\n\tln[t]=0;\n\tvis[t]=1;\n\twhile(hd<=tl){\n\t\tint nw=q[hd++];\n\t\tvis[nw]=0;\n\t\tfor(int i=h[nw];i;i=a[i].li){\n\t\t\tif(a[i^1].ln&&ln[a[i].nx]>ln[nw]-a[i].ct){\n\t\t\t\tln[a[i].nx]=ln[nw]-a[i].ct;\n\t\t\t\tif(!vis[a[i].nx]){\n\t\t\t\t\tvis[a[i].nx]=1;\n\t\t\t\t\tq[++tl]=a[i].nx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}return ln[s]<INF;\n}\n\nint dfs(int u,int maxn){\n\tif(u==t||!maxn) return maxn;\n\tvis[u]=1;\n\tint sum=0;\n\tfor(int i=h[u];i;i=a[i].li){\n\t\tif(a[i].ln&&!vis[a[i].nx]&&ln[a[i].nx]==ln[u]-a[i].ct){\n\t\t\tint f=dfs(a[i].nx,min(maxn,a[i].ln));\n\t\t\tif(f){\n\t\t\t\tmaxn-=f;\n\t\t\t\tsum+=f;\n\t\t\t\ta[i].ln-=f;\n\t\t\t\ta[i^1].ln+=f;\n\t\t\t\tif(!maxn) break;\n\t\t\t}\n\t\t}\n\t}return sum;\n}\n\nvoid dnc(){\n\twhile(spfa()){\n\t\tvis[t]=1;\n\t\twhile(vis[t]){\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tint d=dfs(s,INF);\n\t\t\tmfl+=d;\n\t\t\tmct+=d*ln[s];\n\t\t}\n\t}\n}\n\nvoid dfs2(int x){\n\tvis[x]=1;\n\tprintf(\"%d \",x);\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tif(!a[i].ln&&!vis[a[i].nx-maxn]&&a[i].nx-maxn<=maxn){\n\t\t\tdfs2(a[i].nx-maxn);\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tmaxn=((n+1)*(n+1)>>1)-1;\n\tprintf(\"%d\\n\",maxn);\n\ts1=(maxn<<1)+1;\n\tt=(maxn<<1)+2;\n\tadd(s,s1,n,0);\n\tfor(int i=1;i<=maxn;++i){\n\t\tadd(s1,i,1,-1);\n\t\tadd(i+maxn,i,1,0);\n\t}\n\tfor(int i=1;i<maxn;++i){\n\t\tfor(int j=maxn;j*j>i<<1;--j){\n\t\t\tif(j*j-i>maxn) continue;\n\t\t\tadd(i,j*j-i+maxn,1,-1);\n\t\t}\n\t}for(int i=1;i<=maxn;++i){\n\t\tadd(i+maxn,t,1,0);\n\t}dnc();\n\tfor(int i=1;i<=maxn;++i){\n\t\tif(!vis[i]){\n\t\t\tdfs2(i);\n\t\t\tputs(\"\");\n\t\t}\n\t}return 0;\n}\n```",
        "postTime": 1521595220,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "## \u76f4\u63a5\u8d2a\u5fc3\u5c31\u8fc7\u4e86\n\u65b9\u6cd5\u5f88\u66b4\u529b\uff0c\u4e00\u4e2a\u4e00\u4e2a\u586b\u5165\uff0c\u586b\u4e0d\u4e86\u5c31\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\u3002\u6211\u7a0d\u5fae\u63a8\u7406\u4e86\u4e00\u4e0b\uff0c\u5f53\u8981\u586b[n^2+(n&1)]/2\u65f6\uff0c\u597d\u50cf\u4e0d\u5f97\u4e0d\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint n,a[60][1000],top[60],tmp,yes=1,v;\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(v=1;yes;v++){\n\t\tyes=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ttmp=a[i][top[i]]+v;\n\t\t\tif((int)sqrt(tmp)*(int)sqrt(tmp)==tmp || v==tmp){\n\t\t\t\ta[i][++top[i]]=v,yes=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tv-=2;printf(\"%d\\n\",v);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=top[i];j++)\n\t\t    printf(\"%d \",a[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1521361407,
        "uid": 62267,
        "name": "BJpers2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\n> \u4f20\u9001\u95e8 [$\\looparrowright$](https://www.luogu.com.cn/problem/P2765)  \n\n## \u9898\u76ee\u63cf\u8ff0  \n&emsp;&emsp;\u5047\u8bbe\u6709 $n$ \u6839\u67f1\u5b50\uff0c\u73b0\u8981\u6309\u4e0b\u8ff0\u89c4\u5219\u5728\u8fd9 $n$ \u6839\u67f1\u5b50\u4e2d\u4f9d\u6b21\u653e\u5165\u7f16\u53f7\u4e3a $1,2,3\\cdots$ \u7684\u7403\u3002\n&emsp;&emsp;\u6bcf\u6b21\u53ea\u80fd\u5728\u67d0\u6839\u67f1\u5b50\u7684\u6700\u4e0a\u9762\u653e\u7403\u3002\u540c\u4e00\u6839\u67f1\u5b50\u4e2d\uff0c\u4efb\u4f55 $2$ \u4e2a\u76f8\u90bb\u7403\u7684\u7f16\u53f7\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u3002  \n&emsp;&emsp;\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u5728 $n$ \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u7403\u3002\u4f8b\u5982\uff0c\u5728 $4$ \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u53ef\u653e $11$ \u4e2a\u7403\u3002  \n&emsp;&emsp;\u5bf9\u4e8e\u7ed9\u5b9a\u7684 $n$\uff0c\u8ba1\u7b97\u5728 $n$ \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u7403\u3002  \n## \u8f93\u5165\u683c\u5f0f  \n\u53ea\u6709\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $n$\uff0c\u4ee3\u8868\u67f1\u5b50\u6570\u3002  \n## \u8f93\u51fa\u683c\u5f0f  \n&emsp;&emsp;\u672c\u9898\u5b58\u5728 **Special Judge**\u3002   \n&emsp;&emsp;\u8bf7\u5c06 $n$ \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u7684\u7403\u6570\u4ee5\u53ca\u76f8\u5e94\u7684\u653e\u7f6e\u65b9\u6848\u8f93\u51fa\u3002  \n&emsp;&emsp;\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u662f\u7403\u6570\u3002  \n&emsp;&emsp;\u63a5\u4e0b\u6765\u7684 $n$ \u884c\uff0c\u6bcf\u884c\u82e5\u5e72\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4e00\u6839\u67f1\u5b50\u4e0a\u7684\u7403\u7684\u7f16\u53f7\uff0c\u6570\u5b57\u95f4\u7528\u5355\u4e2a\u7a7a\u683c\u9694\u5f00\u3002  \n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b  \n### \u8f93\u5165 \\#1  \n> 4  \n\n### \u8f93\u51fa \\#1  \n> 11  \n> 1 8  \n> 2 7 9  \n> 3 6 10  \n> 4 5 11  \n\n## \u8bf4\u660e/\u63d0\u793a  \n&emsp;&emsp;\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 $1 \\leqslant n \\leqslant 55$\u3002  \n## \u5206\u6790  \n&emsp;&emsp;\u8bbe\u5f53\u524d\u6709 $x$ \u4e2a\u7403\uff0c\u5c06 $x$ \u4e2a\u7403\u5168\u90e8\u6309\u8981\u6c42\u653e\u5165\u67f1\u5b50\uff0c\u9700\u8981\u7684\u6700\u5c11\u67f1\u5b50\u6570\u91cf\u4e3a $f(x)$\uff0c$f(x)=n$ \u7684\u6700\u5927\u89e3\u5373\u4e3a\u6700\u591a\u80fd\u653e\u5165\u7684\u7403\u7684\u4e2a\u6570\u3002\u663e\u7136\uff0c$f(x)$ \u5173\u4e8e $x$ \u5355\u8c03\u589e\u52a0\uff0c\u4e0d\u59a8\u4e8c\u5206\u83b7\u5f97 $f(x)=n$ \u7684\u6700\u5927\u89e3\u3002\u8bbe\u4e8c\u5206\u7684\u5de6\u8fb9\u754c\u4e3a $l$\uff0c\u8fb9\u53f3\u754c\u4e3a $r$\u3002  \n&emsp;&emsp;\u63a5\u4e0b\u6765\u8ba8\u8bba\uff0c\u5f53\u6709 $x$ \u4e2a\u7403\uff0c\u7f16\u53f7\u4e3a $1\\sim x$\uff0c\u6700\u5c11\u9700\u8981\u591a\u5c11\u6839\u67f1\u5b50\u4f7f\u5f97 $x$ \u4e2a\u7403\u5168\u90e8\u6309\u8981\u6c42\u6446\u653e\u5728\u67f1\u5b50\u4e0a\u3002  \n&emsp;&emsp;\u6b64\u95ee\u9898\u867d\u7136\u4e0d\u662f\u8d64\u88f8\u88f8\u7684\u56fe\u8bba\u95ee\u9898\uff0c\u4f46\u662f\u6839\u636e\u6570\u5b57\u4e4b\u95f4\u7684\u5173\u8054\u548c\u9650\u5236\uff0c\u5c31\u80fd\u5728\u4e0d\u540c\u6570\u5b57\u4e4b\u95f4\u5efa\u8fb9\uff0c\u8f6c\u5316\u4e3a\u56fe\u8bba\u95ee\u9898\u3002  \n&emsp;&emsp;\u5efa\u8fb9\u8981\u9075\u5faa\u95ee\u9898\u7684\u8981\u6c42\u548c\u9650\u5236\uff0c\u82e5 $i+j$ \u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u4e14 $i<j$\uff0c\u90a3\u4e48\u5c31\u4ece $i$ \u5411 $j$ \u8fde\u8fb9\u3002\u8fd9\u5c31\u9075\u5faa\u4e86\u5c06\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u653e\u5165\u67f1\u5b50\u4e14\u76f8\u90bb\u6570\u5b57\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u539f\u5219\u3002  \n&emsp;&emsp;\u5f53 $m=20$ \u65f6\uff0c\u5efa\u7acb\u7684 $\\text{DAG}$ \u5982\u56fe\u3002\u53ef\u4ee5\u8bbe\u60f3\uff0c\u6700\u5c11\u9700\u8981\u7684\u67f1\u5b50\u6570\u91cf\u4e3a $\\text{DAG}$ \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\uff08\u6b64\u56fe\u501f\u7528\u6d1b\u8c37\u7528\u6237[Rhodoks](https://www.luogu.com.cn/user/56267)\u7684[\u535a\u6587](https://www.luogu.com.cn/blog/Rhodoks/solution-p2765)\uff09\n \n![](https://ftp.bmp.ovh/imgs/2020/07/85ee3c26e89b1d3d.png)   \n\n&emsp;&emsp;\u4e8c\u5206\u5f97\u5230\u4e00\u4e2a\u89e3 $x$\uff0c\u5bf9 $1\\sim x$ \u7684\u6240\u6709\u6574\u6570\u5efa\u7acb\u4e0a\u8ff0\u7684 $\\text{DAG}$\uff0c\u5e76\u8f6c\u5316\u4e3a\u62c6\u70b9\u4e8c\u5206\u56fe\uff0c\u8dd1\u4e00\u6b21\u5308\u7259\u5229\u7b97\u6cd5\u5373\u53ef\u5f97\u5230\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002\u82e5\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u4ecd\u7136\u672a\u8d85\u8fc7 $n$\uff0c\u5219\u5de6\u8fb9\u754c\u53ef\u7ee7\u7eed\u589e\u5927\uff0c\u5426\u5219\u53f3\u8fb9\u754c\u51cf\u5c0f\u3002    \n&emsp;&emsp;\u83b7\u5f97\u6700\u591a\u80fd\u653e\u5165\u7684\u7403\u7684\u4e2a\u6570\u7684\u6700\u5927\u503c $m$ \u540e\uff0c\u518d\u8dd1\u4e00\u6b21\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u7528 $\\text{match}$ \u6570\u7ec4\u8f93\u51fa\u5339\u914d\u4fe1\u606f\u3002  \n## \u4ee3\u7801  \n```cpp\n/******************************************************************\nCopyright: 11D_Beyonder All Rights Reserved\nAuthor: 11D_Beyonder\nProblem ID: \u6d1b\u8c37 P2764\nDate: 7/26/2020 \nDescription: Hungarian Alogrithm\n*******************************************************************/\n#include<iostream>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int N=10003;\nconst int base=5000;\nconst int M=15003;\nstruct E\n{\n\tint to;\n\tint Next=-1;\n}edge[M<<2];\nint head[N<<2],tot;\nint n,m;\nbool vis[N<<2];\nint match[N<<2];\ninline void init();\ninline void add_edge(int,int);\ninline bool perfect_square(int);\nbool dfs(int);\nbool check(int);\nint Hungarian(int);\nvoid Hungarian();\nint main()\n{\n\tcin>>n;\n\tint i,j;\n\tint l=1,r=base;\n\twhile(r-l>=3)//\u4e8c\u5206\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)) l=mid;\n\t\telse r=mid;\n\t}\n\twhile(l<=r)\n\t{\n\t\tif(check(l)) \n\t\t{\n\t\t\tm=l;\n\t\t\tl++;\n\t\t}\n\t\telse break;\n\t}\n\tcout<<m<<endl;\n\tinit();\n\t//\u6700\u540e\u4e00\u6b21\u5308\u7259\u5229\u8f93\u51fa\u5339\u914d\u4fe1\u606f\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tfor(j=i+1;j<=m;j++)\n\t\t{\n\t\t\tif(perfect_square(i+j))\n\t\t\t{\n\t\t\t\tadd_edge(i,j+base);\n\t\t\t}\n\t\t}\n\t}\n\tHungarian();\n\treturn 0;\n}\ninline void init()\n{\n\tmemset(head,-1,sizeof(head));\n\ttot=0;\n\tmemset(match,-1,sizeof(match));\n}\ninline void add_edge(int u,int v)\n{\n\ttot++;\n\tedge[tot].to=v;\n\tedge[tot].Next=head[u];\n\thead[u]=tot;\n}\ninline bool perfect_square(int x) {return pow((int)sqrt(x),2)==x;}\nbool dfs(int x)\n{\n\tfor(register int i=head[x];~i;i=edge[i].Next)\n\t{\n\t\tint y=edge[i].to;\n\t\tif(!vis[y])\n\t\t{\n\t\t\tvis[y]=1;\n\t\t\tif(match[y]==-1||dfs(match[y]))\n\t\t\t{\n\t\t\t\tmatch[y]=x;\n\t\t\t\tmatch[x]=y;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nbool check(int x)//\u7403\u4e3ax\u65f6\u7684\u9700\u8981\u7684\u6700\u5c11\u67f1\u5b50\n{\n\tint i,j;\n\tinit();\n\t//\u5efa\u7acb\u62c6\u70b9\u4e8c\u5206\u56fe\n\tfor(i=1;i<=x;i++)\n\t{\n\t\tfor(j=i+1;j<=x;j++)\n\t\t{\n\t\t\tif(perfect_square(i+j))\n\t\t\t{\n\t\t\t\tadd_edge(i,j+base);\n\t\t\t}\n\t\t}\n\t}\n\treturn x-Hungarian(x)<=n;\n}\nint Hungarian(int x)\n{\n\tint ans=0;\n\tfor(register int i=1;i<=x;i++) \n\t{\n\t\tmemset(vis,0,sizeof(vis));\n\t\tans+=dfs(i);\n\t}\n\treturn ans;\n}\nvoid Hungarian()\n{\n\tint temp=Hungarian(m);\n\tmemset(vis,0,sizeof(vis));\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tint x=base+i;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tx-=base;\n\t\t\t\tcout<<x<<' ';\n\t\t\t\tvis[x]=1;\n\t\t\t\tx=match[x];\n\t\t\t}while(~x);\n\t\t\tcout<<endl;\n\t\t}\n\t}\n}\n```\n## \u540e\u8bb0  \n&emsp;&emsp;\u68c0\u9a8c\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u8981\u5199\u6210 ```return pow((int)sqrt(x),2)==x```\uff0c\u6ce8\u610f\u51fd\u6570\u5f00\u5e73\u65b9\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002  \n![](https://i.niupic.com/images/2020/07/27/8su9.png)  ",
        "postTime": 1595841336,
        "uid": 253240,
        "name": "11D_Beyonder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "# \u672c\u9898\u7edd\u5bf9\u662f\u5308\u7259\u5229\u4e8c\u5206\u5339\u914d\u597d\u9898\n## \u5b8c\u5168\u6a21\u62df\u51fa\u4e86\u5308\u7259\u5229\u4e8c\u5206\u7684\u5168\u8fc7\u7a0b\n### \u6bcf\u4e00\u6b21\u52a0\u70b9\uff1a\u627e\u70b9\uff0c\u52a0\u8fb9\uff0c\u5339\u914d\n\u6a21\u578b\u5efa\u7acb\uff1a\u4ece1\u5f00\u59cb\u904d\u5386,\u5bf9\u4e8e\u6bcf\u4e00\u4e2ai\uff0c\u4ece1\u904d\u5386i-1\u5230\uff0c\u627e\u5230i\u4e4b\u524d\u80fd\u4e0e\u8fd9\u4e2a\u6570\u76f8\u52a0\u80fd\u6210\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u70b9,\u7136\u540e\u52a0\u4e00\u6761\u4ecei\u8fde\u5230\u8fd9\u4e2a\u70b9\u7684\u5355\u5411\u8fb9\uff0c\u52a0\u5b8c\u8fb9\u540e\u8dd1\u4e00\u904d\u5308\u7259\u5229DFS\uff0c\u770b\u80fd\u5426\u6dfb\u52a0\u65b0\u7684\u5339\u914d\uff0c\u82e5\u80fd\u6dfb\u52a0\u65b0\u7684\u5339\u914d\u5219\u5339\u914d\u6570++\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6=i\uff08\u70b9\u6570\uff09-\u5339\u914d\u6570\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5c31\u662f\u9898\u76ee\u4e2d\u6240\u8981\u6c42\u7684\u591a\u5c11\u4e2a\u67f1\u5b50\u80fd\u653e\u7403\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u5927\u4e8en\u65f6\uff0ci-1\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u80fd\u653e\u8fdbn\u4e2a\u67f1\u5b50\u7684\u6700\u591a\u7403\uff0c\u4f46\u6b64\u65f6\u7b2ci\u6b21\u5df2\u7ecf\u6539\u53d8\u4e86\u5339\u914d\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5220\u53bb\u7b2ci\u6b21\u52a0\u7684\u70b9\uff0c\u8fd8\u539f\u7b2ci-1\u6b21\u5339\u914d\u60c5\u51b5\uff0c\u800c\u7b2ci-1\u6b21\u5339\u914d\u60c5\u51b5\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#define ms(x,y) memset(x,y,sizeof(x))\nusing namespace std;\nconst int maxn =1e5;\nconst int maxm =1e6;\nstruct Edge{\n\tint to,next;\n}edge[maxm];\nint head[maxn],tot;\nint linker[maxn],flag[maxn];\nvoid addedge(int u,int v){\n\tedge[tot].to=v;\n\tedge[tot].next=head[u];\n\thead[u]=tot++;\n}\nint sq[5005];\nvoid init(){\n\tms(head,-1);\n\ttot=0;\n\tfor(int i=1;i<=5000;i++)sq[i]=i*i;\n}\nbool used[maxn];\nbool dfs(int u){//\u5308\u7259\u5229\u4e8c\u5206\u5339\u914d\u4e4bDFS\u90e8\u5206\n\tfor(int i=head[u];i!=-1;i=edge[i].next){\n\t\tint v=edge[i].to;\n\t\tif(used[v])continue;\n\t\tused[v]=true;\n\t\tif(linker[v]==-1||dfs(linker[v])){\n\t\t\tlinker[v]=u;\n\t\t\tflag[u]=v;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nvoid outAns(int u){\n\tprintf(\"%d\",u);\n\tif(flag[u])printf(\" \"),outAns(flag[u]);\n\telse printf(\"\\n\");\n}\nint main()\n{\n\tinit();\n\tint n;\n\tscanf(\"%d\",&n);\n\tint res=0;\n\tms(linker,-1);\n\tint ans;\n\tint addEdgeNum;\n\tfor(int i=1;;i++){//\u52a0\u70b9\n\t\tms(used,false);\n\t\taddEdgeNum=0;;\n\t\tint j=upper_bound(sq+1,sq+5001,i)-sq;//\u4e8c\u5206\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4i\u5927\u7684\u4e8c\u5206\u5339\u914d\u6570\n\t\twhile(sq[j]<=2*i){//\u6bcf\u4e2a\u4e8c\u5206\u5339\u914d\u6570\u53ea\u80fd\u7ed9i\u8fde\u4e00\u6761\u8fb9\n\t\t\tint v=sq[j]-i;\n\t\t\tif(v>=i)break;\n\t\t\taddedge(i,v);\n\t\t\taddEdgeNum++;\n\t\t\tj++;\n\t\t}\n\t\tif(dfs(i))res++;//\u5339\u914d\n\t\tif(i-res>n){ans=i-1;break;}\n\t}\n\ttot-=addEdgeNum;//\u7528\u9664\u53bbans+1\u6b21\u6784\u56fe\u7684\u8fb9\u91cd\u8dd1\u4e00\u904d\u56fe\n\tprintf(\"%d\\n\",ans);\n\tms(linker,-1);\n\tms(flag,0);\n\tfor(int i=1;i<=ans;i++)ms(used,false),dfs(i);\n\tfor(int i=1;i<=ans;i++)if(linker[i]==-1)outAns(i);\n}\n```\n",
        "postTime": 1569683047,
        "uid": 65212,
        "name": "s15172528531",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": " [\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2](https://www.cnblogs.com/cold-cold/p/10213588.html)\n\n\u8fd9\u9053\u9898\u76ee\uff0c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u5e76\u4e0d\u80fd\u7528\u7f51\u7edc\u6d41\u505a\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210x\u548cx'\n\n\u7136\u540ex\u8fde\u6e90\u70b9\uff0cx'\u8fde\u6c47\u70b9 \u90fd\u7528\u5bb9\u91cf\u4e3a\u4e00\u7684\u8fb9\n\n\u518d\u7136\u540e\u662f\u627e\u8fd9\u4e2a\u6570\u53ef\u4ee5\u4e0e\u90a3\u4e2a\u6570\u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570i\u4e0ex'\u8fde\u8fb9\n\n\u6bcf\u52a0\u5165\u4e00\u4e2a\u70b9\u5c31\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\n\n\u90a3\u4e48\u5982\u679c\u53ef\u4ee5\u585e\u8fdb\u539f\u67f1\uff0c\u90a3\u4e48\u6700\u5927\u6d41\u5c31\u5f97\u52301\u5426\u5219\u4e3a0\n\n\u90a3\u4e48\u6211\u4eec\u5728\u5f97\u52300\u7684\u65f6\u5019\u65b0\u5efa\u67f1\u5b50\u5373\u53ef\n\n\u53e6\u5916\uff0c\u6211\u4eec\u8981\u6ce8\u610f\n\n\u5728\u5224\u65ad\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u65f6\u5019\n```cpp\nsqrt(ge+i)*sqrt(ge+i)==ge+i\n```\n\n\u8fd9\u6837\u5224\u65ad\u5728Windows\u4e0b\u662f\u6b63\u786e\u7684\n\n\u4f46\u5728Linux\u4e0b\u8981\u5199\u6210\n```cpp\n(int)sqrt(ge+i)*sqrt(ge+i)==ge+i\n```\n\n\u603b\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\ntypedef long long ll;\ninline ll read()\n{\n    register ll p(1),a(0);register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') p=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') a=a*10+ch-48,ch=getchar();\n    return a*p;\n}\nconst int N=100100;\nqueue<int> Q;\nint src=0,n,num,st=50014,d[N],head[N],pre[N],cnt=1,ge,jl[N],book[N];\nstruct EDGE{int nxt,val,to;}e[N];\nvoid add(int u,int v,int w){e[++cnt]=(EDGE){head[u],w,v};head[u]=cnt;}\nint BFS()\n{\n    while(!Q.empty()) Q.pop();Q.push(src);\n    memset(d,-1,sizeof(d));d[src]=0;int u;\n    while(!Q.empty())\n    {\n        u=Q.front();Q.pop();\n        for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to) if(e[i].val&&d[v]==-1)\n        {\n            d[v]=d[u]+1;\n            if(v==st) return 1;\n            Q.push(v);\n        }\n    }\n    return 0;\n}\nint DFS(int u,int flow)\n{\n    if(u==st||flow==0) return flow;\n    int res=flow,tt;\n    for(int i=head[u],v=e[i].to;i&&res;i=e[i].nxt,v=e[i].to) if(e[i].val&&d[v]==d[u]+1)\n    {\n        tt=DFS(v,min(res,e[i].val));\n        if(!tt) d[v]=-1;\n        if(tt&&v!=st) pre[u>>1]=v>>1;\n        e[i].val-=tt;e[i^1].val+=tt;\n        res-=tt;\n    }\n    return flow-res;\n}\nint Dinic()\n{\n    int all=0;\n    while(BFS()) all+=DFS(src,0x3f3f3f3f);\n    return all;\n}\nint main()\n{\n    // freopen(\"input\",\"r\",stdin);\n    // freopen(\"output\",\"w\",stdout);\n    n=read();\n    while(num<=n)\n    {\n        ++ge;\n        add(src,ge<<1,1);add(ge<<1,src,0);\n        add(ge<<1|1,st,1);add(st,ge<<1|1,0);\n        for(int i=1;i<ge;++i) if((int)sqrt(ge+i)*sqrt(ge+i)==ge+i) \n        {\n            add(i<<1,ge<<1|1,1);\n            add(ge<<1|1,i<<1,0);\n        }\n        if(!Dinic()) jl[++num]=ge;\n    }\n    printf(\"%d\\n\",--ge);\n    for(int i=1;i<=n;i++)\n    {\n        if(book[jl[i]]) continue;\n        int tt=jl[i];book[tt]=1;\n        while(tt) printf(\"%d \",tt),book[tt=pre[tt]]=1;\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1546490580,
        "uid": 48934,
        "name": "cold_cold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2765)\n\n\u8fd9\u9053\u9898\u5f88\u50cf[\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898](https://www.luogu.org/blog/PopulusEuphratica/luogup2764-zui-xiao-lu-jing-fu-gai-wen-ti)\n\n\u8fd9\u4e2a\u95ee\u9898\u4e4d\u4e00\u770b\u5f88\u96be\u505a\uff0c\u4f46\u662f\u8003\u8651\u8f6c\u5316\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff1a\u5f53\u6709\u786e\u5b9a\u4e2a\u6570\u7684\u7403\u65f6\uff0c\u6700\u5c11\u9700\u8981\u51e0\u4e2a\u67f1\u5b50\uff1f\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\uff0c\u4e14\u6613\u8bc1\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u6bcf\u6b21\u52a0\u4e00\u4e2a\u7403\uff0c\u8ba1\u7b97\u6700\u5c11\u9700\u8981\u67f1\u5b50\u6570\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e8c\u5206\uff0c\u4f46\u662f\u9012\u63a8\u590d\u6742\u5ea6\u4e5f\u591f\u4e86\uff09\u3002\n\n\u4f46\u662f\u8fd9\u6837\u6bcf\u6b21\u5efa\u56fe\u590d\u6742\u5ea6\u8fd8\u662f\u4f1a\u7206\uff0c\u518d\u8003\u8651\u4e00\u4e0b\uff0c\u5176\u5b9e\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u7403\u4e0d\u9700\u8981\u518d\u6b21\u5efa\u56fe\uff0c\u53ea\u9700\u8981\u628a\u8be5\u52a0\u7684\u8fb9\u52a0\u8fdb\u53bb\uff0c\u5bf9\u6b8b\u4f59\u91cf\u518d\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define min(X,Y) ((X)<(Y)?(X):(Y))\n\nint head[60001],nxt[6000001],b[6000001],v[6000001],k=1,S,T,answer;\nint dis[60001],p[60001],q[60001],h,t,n,ans[60001],net[60001];\nbool vis[60001];\nvoid push(int s,int t,int val){\n\tnxt[++k]=head[s];\n\thead[s]=k;\n\tb[k]=t;\n\tv[k]=val;\n}\nvoid link(int s,int t,int val){\n\tpush(s,t,val);\n\tpush(t,s,0);\n}\nbool bfs(){\n\tmemset(dis,0,sizeof dis);\n\th=t=0;\n\tq[++t]=S;\n\tdis[S]=1;\n\twhile(h<t){\n\t\t++h;\n\t\tfor(int i=head[q[h]];i;i=nxt[i])\n\t\t\tif(v[i]&&!dis[b[i]]){\n\t\t\t\tdis[b[i]]=dis[q[h]]+1;\n\t\t\t\tq[++t]=b[i];\n\t\t\t\tif(b[i]==T)return 1;\n\t\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow){\n\tif(x==T||!flow)return flow;\n\tint used=0;\n\tfor(int i=p[x];i;i=nxt[i])\n\t\tif(v[i]&&dis[b[i]]==dis[x]+1){\n\t\t\tint w=dfs(b[i],min(flow-used,v[i]));\n\t\t\tv[i]-=w;\n\t\t\tv[i^1]+=w;\n\t\t\tused+=w;\n\t\t\tif(w)p[x]=i,net[x]=b[i]>>1;\n\t\t\tif(flow==used)return flow;\n\t\t}\n\tif(!used)dis[x]=0;\n\treturn used;\n}\nvoid print(int i){\n\tprintf(\"%d \",i);\n\tvis[i]=1;\n\tif(ans[i<<1])print(ans[i<<1]); \n}\nint main(){\n\tscanf(\"%d\",&n);\n\tS=0,T=30000;\n\tint cnt;\n\tfor(cnt=1;;cnt++){\n\t\tlink(S,cnt<<1,1),link(cnt*2+1,T,1);\n\t\tint i;\n\t\tfor(i=1;i*i<=cnt;i++);\n\t\tfor(;i*i<(cnt<<1);i++)link((i*i-cnt)<<1,cnt<<1|1,1);\n\t\twhile(bfs()){\n\t\t\tmemcpy(p,head,sizeof p);\n\t\t\tanswer+=dfs(S,2);\n\t\t}\n\t\tif(cnt-answer>n)break;\n\t\tmemcpy(ans,net,sizeof ans);\n\t}\n\tcnt--;\n\tprintf(\"%d\\n\",cnt);\n\tfor(int i=1;i<=cnt;i++)if(!vis[i])print(i),putchar('\\n');\n}\n```",
        "postTime": 1534044445,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2765 \u9b54\u672f\u7403\u95ee\u9898"
    },
    {
        "content": "```cpp\n//\u66b4\u641c\u5c45\u7136\u53ef\u4ee5\u8fc7\uff0c\u4e0d\u53ef\u601d\u8bae~~~~~\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\nconst int o=512,oo=100024;\nint n,ans;\nint jud[o+5],vis[oo];\nvector<int> a[60];\nbool check(int x)//\u68c0\u67e5\u5f53\u524d\u6570\u662f\u5426\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\n{\n\tfor(int i=1;i<=o;i++)\n\t{\n\t\tif(jud[i]>x) return false;//\u8d85\u8fc7\u4e86\u8fd8\u9700\u679a\u4e3e\u5417\uff1f\u7b54\u6848\u5f53\u7136\u4e0d\u7528\n\t\tif(jud[i]==x) return true;\n\t}\n\treturn false;//\u6ca1\u6709\u627e\u5230\n}\nvoid dfs(int res)\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif((a[i].size()==0||check(a[i][a[i].size()-1]+res))&&vis[res]==0)\n        //\u7b2ci\u6839\u67f1\u5b50\u4e3a\u7a7a\u67f1\u6216\u8005\u653e\u5230\u8fd9\u4e2a\u67f1\u5b50\u4e0a\u9762\u53ef\u884c\n\t\t//\u4f46\u662f\u5f53\u524d\u6570\u5fc5\u987b\u6ca1\u6709\u627e\u8fc7\n        {\n\t\t\tvis[res]=1;//\u5df2\u7ecf\u627e\u8fc7\n\t\t\tans=max(ans,res);//\u7edf\u8ba1\u7b54\u6848\n\t\t\ta[i].push_back(res);//\u653e\u5165\n\t\t\tdfs(res+1);//\u7ee7\u7eed\u5411\u4e0b\u627e\n\t\t}\n\t}\n}\nvoid print()//\u8fa3\u773c\u775b\u7684\u8f93\u51fa\n{\n\tprintf(\"%d\\n\",ans);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<a[i].size();j++)\n\t\t\tprintf(\"%d \",a[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn ;\n}\n/*\u601d\u8def\uff1a\u6ca1\u6709\u4ec0\u4e48\u601d\u8def\uff0c\u76f4\u63a5\u641c\u5c31\u597d\u4e86\uff0c\n\u89e3\u91ca\u5728\u4ee3\u7801\u4e2d\u4e86......\n\u81ea\u5df1\u7f16\u8bd1\u7a0b\u5e8f\u540e\u770b\u770b\uff0c\u7136\u540e\u53d1\u73b0\u5f88\u795e\u5947\u7684\u4e1c\u897f*/\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=o;i++) jud[i]=i*i;\n\ta[1].push_back(1);//\u5148\u628a1\u88c5\u8fdb\u53bb\uff0c\u968f\u4fbf\u653e\u54ea\u90fd\u4e00\u6837\n\tdfs(2);\n\tprint();\n\treturn 0;\n}\n```",
        "postTime": 1532271239,
        "uid": 70862,
        "name": "\u98ce\u706b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u5c45\u7136\u6ca1\u6709\u8d39\u7528\u6d41\u9898\u89e3\uff1f\n\n\u9996\u5148\u6253\u8868\u5f97\u6700\u591a\u53ef\u653e\u7403\u6570\u4e3a $\\frac{n^2+2n+(n\\text{ mod }2)}{2}-1$\n\n\u7136\u540e\u8d39\u7528\u6d41\u5c31\u53d8\u6210\u4e86\u6211\u4eec\u6c42\u89e3\u653e\u7f6e\u65b9\u6848\u7684\u65b9\u6cd5\n\n\u8981\u6c42\u653e $n$ \u6839\u67f1\u5b50\uff0c\u8fd9\u610f\u5473\u7740\u6ee1\u6d41\u4e3a $n$\n\n\u653e\u6bcf\u4e2a\u7403\u53ef\u4ee5\u83b7\u5f97 $1$ \u7684\u6536\u76ca\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u6761\u8fb9\u8d39\u7528\u4e3a $-1$\n\n\u6bcf\u4e2a\u7403\u53ea\u80fd\u591f\u88ab\u653e $1$ \u6b21\uff0c\u56e0\u6b64\u62c6\u70b9\n\n\u5177\u4f53\u7684\u770b\u4ee3\u7801\u7684\u8fde\u8fb9\u65b9\u6cd5\u5427\uff0c\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <queue>\n#include <utility>\n#define N 3200\nusing namespace std;\n\nclass Edge\n{\npublic:\n    int v;\n    int w;\n    int c;\n};\n\nvector<Edge> d;\nvector<int> e[N];\nint p[N], f[N];\nbool u[N];\nvector<int> o[N];\n\nint AugmentKarp(int s, int t)\n{\n    int x, o;\n\n    for(x = t, o = N;x != s;x = d.at(p[x] ^ 1).v)\n        o = min(o, d.at(p[x]).w);\n    for(x = t;x != s;x = d.at(p[x] ^ 1).v)\n    {\n        d.at(p[x]    ).w -= o;\n        d.at(p[x] ^ 1).w += o;\n    }\n\n    return o;\n}\n\nbool AdvanceKarp(int s, int t)\n{\n    int i, j;\n    queue<int> q;\n\n    q.push(s);\n    for(i = 0;i < N;i ++)\n        f[i] = N;\n    f[s] = 0;\n    u[s] = true;\n\n    for(;!q.empty();q.pop())\n    {\n        s = q.front();\n        //cout<<s<<' '<<f[s]<<endl;\n        for(i = 0;i < (signed)e[s].size();i ++)\n        {\n            j = e[s].at(i);\n            if(f[d.at(j).v] > f[s] + d.at(j).c && d.at(j).w)\n            {\n                f[d.at(j).v] = f[s] + d.at(j).c;\n                p[d.at(j).v] = j;\n                if(!u[d.at(j).v])\n                {\n                    u[d.at(j).v] = true;\n                    q.push(d.at(j).v);\n                }\n            }\n        }\n        u[s] = false;\n    }\n\n    return f[t] != N;\n}\n\npair<int, int> Karp(int s, int t)\n{\n    pair<int, int> o;\n    int k;\n\n    for(o = make_pair(0, 0);AdvanceKarp(s, t);)\n    {\n        k = AugmentKarp(s, t);\n        o = make_pair(o.first + k, o.second + k * f[t]);\n    }\n\n    return o;\n}\n\nvoid AddEdge(int u, int v, int w, int c)\n{\n    e[u].push_back(d.size());\n    d.push_back((Edge){v, w, c});\n    e[v].push_back(d.size());\n    d.push_back((Edge){u, 0, -c});\n\n    return;\n}\n\nbool Square(int x)\n{\n    int s;\n\n    s = sqrt(x);\n\n    return x == s * s;\n}\n\nvoid Output(int m)\n{\n    int i, j, t, p;\n\n    for(i = j = 0;i < (signed)e[0].size();i ++)\n        if(!d.at(e[0].at(i)).w)\n        {\n            p = d.at(e[0].at(i)).v;\n            while(p != m * 2 + 1)\n            {\n                if(p & 1)\n                    o[j].push_back((p + 1) >> 1);\n                for(t = 0;t < (signed)e[p].size();t ++)\n                    if(d.at(e[p].at(t)).v > p && !d.at(e[p].at(t)).w)\n                    {\n                        p = d.at(e[p].at(t)).v;\n                        break;\n                    }\n            }\n            j ++;\n        }\n\n    return;\n}\n\nint main(void)\n{\n    int n, m;\n    int i, j;\n\n    cin >> n;\n    m = (n * (n + 2) + (n & 1) - 2) >> 1;\n    for(i = 1;i <= m;i ++)\n    {\n        AddEdge(i * 2 - 1, i * 2, 1, 0);\n        AddEdge(0, i * 2 - 1, 1, -1);\n        AddEdge(i * 2, m * 2 + 1, 1, 0);\n        for(j = i + 1;j <= m;j ++)\n            if(Square(i + j))\n                AddEdge(i * 2, j * 2 - 1, 1, -1);\n    }\n    AddEdge(m * 2 + 1, m * 2 + 2, n, 0);\n    Karp(0, m * 2 + 2);\n\n    cout << m << endl;\n    Output(m);\n    for(i = 0;i < n;i ++)\n    {\n        for(j = 0;j < (signed)o[i].size();j ++)\n            cout << o[i].at(j) << ' ';\n        cout << endl;\n    }\n\n    return 0;\n}\n```",
        "postTime": 1524645644,
        "uid": 34354,
        "name": "gorokokoro",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u6211\u53ea\u662f\u6765\u53d1\u4e00\u4e2a\u4e8c\u5206\u56fe\u9898\u89e3:\n\u56e0\u4e3a\u4e0b\u9762\u6709dalao\u94a6\u70b9\u4e86:\n```cpp\n#pragma GCC optimize(2)\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#define MAXN 10050\n#define N 2050\n#define INF 0x3f3f3f3f\n#define P pair<int,int>\nusing namespace std;\n\nint T, max_num, n, m, e, sum, x, y, cnt, belong[N << 1], stand[N << 1];\nbool vis[N << 1];\nstd::vector<int> G[N];\n\ninline int read()\n{\n    int x = 0;\n    char c = getchar();\n    bool flag = 0;\n    while(c < '0' || c > '9'){if(c == '-')flag = 1;c = getchar();}\n    while(c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n    return flag ? -x : x;\n}\ninline bool found(int x)\n{\n    for(int i = 0; i < (int) G[x].size(); i++)\n    {\n        int v = G[x][i];\n        if(vis[v]) continue;\n        vis[v] = true;\n        if(!belong[v] || found(belong[v]))\n        {\n            belong[v] = x;\n            return true;\n        }\n    }\n    return false;\n}\nvoid solve()\n{\n    for(register int i = 1;i <= max_num; ++i)\n    {\n        memset(vis , 0 ,sizeof vis);\n        if(found(i)) sum ++;\n    }\n    memset(G, 0, sizeof G);\n    for(register int i = 1;i <= max_num; ++i)\n    {\n        if(!belong[i]) \n        {\n            // cout<<cnt<<endl;\n            stand[i] = ++cnt, G[cnt].push_back(i);\n        }\n        else \n        {\n            G[stand[belong[i]]].push_back(i), stand[i] = stand[belong[i]];\n        }\n        // cout<<\"i=\"<<i<<\" stand=\"<<stand[i]<<endl;\n    }\n}\nint main(int argc, char const *argv[])\n{\n    n = read();\n    max_num = (n * (n + 2) + (n & 1) - 2) >> 1;\n    for(register int i = 1; i <= max_num; ++i)\n        for(register int j = i + 1; j <= max_num; ++j)\n        {\n            int now = sqrt(i + j);\n            if(now * now != i + j) continue;\n            G[i].push_back(j);\n        }\n    solve();\n    printf(\"%d\\n\",max_num);\n    for(register int i = 1; i <= cnt; ++i)\n    {\n        for(register int j = 0; j < (int)G[i].size(); ++j)\n            printf(\"%d \",G[i][j]);\n        puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1522068047,
        "uid": 50047,
        "name": "Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u662f\u53ef\u4ee5\u4e8c\u5206\u68c0\u9a8c\u7684\n\n\u6bcf\u6b21\u4e8c\u5206\u5230\u4e00\u4e2a\u503c\uff0c\u5c31\u5efa\u7acb\u4e8c\u90e8\u56fe\u5339\u914d\u6c42\u51fa\u9700\u8981\u7684\u6700\u5c11\u7684\u67f1\u5b50\u6570\n\n\u4f46\u6bcf\u6b21\u5220\u8fb9\u91cd\u5efa\u7684\u8bdd\u6548\u7387\u5176\u5b9e\u662f\u4e0d\u5982\u679a\u4e3e\u7684\u3001\u3001\u3001\n\n\n\u4ee3\u7801\uff1a\n\n\n\n     \n   \n     \n     \n     \n  \n\n\n\n\n      \n    \n    \n\n    \n    \n   \n     \n            \n     \n     \n     \n     \n\n\n    \n    \n    \n    \n    \n\n\n    \n  \n\n\n      \n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n#include<cstring> \n#include<queue>\n#define N 3000000\n#define inf 10000009\nint zhong[N],xia[N],zhen1,zhen2,hou[N],yuan[N],tot=-1,zhi[N],dis[N],dianshu,i,j,s,t,n,mid,uuu[3000],daan;\nbool you[4005];\nint q[N];\nvoid jia(int x,int y,int z)\n{\n zhong[++tot]=y,hou[tot]=yuan[x],yuan[x]=tot,zhi[tot]=z;    \n}\nvoid jian(int x,int y,int z)\n{\njia(x,y,z);\njia(y,x,0);    \n}\nbool bfs(int s,int t)\n{\n     int i;\n     memset(dis,0x7f,sizeof(dis));\n     for(i=0;i<=dianshu;i++)\n     xia[i]=yuan[i];\n    // cout<<dianshu;\n     zhen1=0;\n     zhen2=1;\n     q[1]=s;\n     dis[s]=0;\n     while(zhen1!=zhen2)\n     {\n     int st=q[++zhen1];//cout<<st<<\"\u3000\";\n     for(i=xia[st];i!=-1;i=hou[i])\n     {int nd=zhong[i];//cout<<nd<<\"  \";\n     if(dis[nd]>inf&&zhi[i])dis[nd]=dis[st]+1,q[++zhen2]=nd;                             \n     }                 \n     }\n     return dis[t]<inf;    \n}\nint dfs(int now,int t,int limit)\n{\n if(now==t||!limit){return limit;}\n int f,i,flow=0;\n   for(i=xia[now];i!=-1;i=hou[i])\n   {xia[now]=i;\n   int nd=zhong[i];\n    if((dis[nd]==dis[now]+1)&&(f=dfs(nd,t,min(limit,zhi[i]))))\n    {\n    zhi[i]-=f;\n    zhi[i^1]+=f;\n    limit-=f;\n    flow+=f;\n    if(!limit)break;                          \n    }                                                            \n   }\n    return flow;\n}    \nint dinic(int s,int t)\n{ \n    int ans=0;\nwhile(bfs(s,t))\n{//cout<<\"p\";\n               ans+=dfs(s,t,inf);\n}\nreturn ans;\n}\nint erfen()\n{\n     int l=1,r=1600,hehe;\n     while(l<r)\n     {\n      mid=(l+r)>>1;\n     //\n     tot=-1;dianshu=2*mid+10000;\n      memset(yuan,-1,sizeof(yuan));\n    s=2*mid+999,t=2*mid+1000;\n    for(i=1;i<=mid;i++)\n    jian(s,i,1),jian(i+mid,t,1);\n    for(i=2;i<=mid;i++)\n    for(j=1;j<i;j++)\n    if(you[j+i])jian(i,mid+j,1);//cout<<zhong[yuan[s]]; \n     hehe=dinic(s,t);//cout<<hehe<<endl;\n     if(mid-hehe>n)r=mid;     \n     else {l=mid+1;\n       for(i=xia[s];i!=-1;i=hou[i])\n    {\n        int nd=zhong[i];\n        for(j=xia[nd];j!=-1;j=hou[j])\n        {\n            int rd=zhong[j];\n            if(!zhi[j])\n            {\n                uuu[rd-mid]=nd;\n            }\n        }       \n    }\n     daan=mid;\n     }\n     }\n     mid=daan;\n     return daan;    \n}\nint main()\n{\n    for(i=1;i*i<=4000;i++)\n      you[i*i]=1;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",erfen());\nmemset(you,0,sizeof(you));\n       for(i=1;i<=mid;i++)\n     {\n         if(you[i])continue;\n         printf(\"%d\",i);\n         you[i]=1;\n         int lin=i;\n         while(uuu[lin])printf(\" %d\",uuu[lin]),you[uuu[lin]]=1,lin=uuu[lin];\n           printf(\"\\n\");\n     }\n}\n```",
        "postTime": 1491394011,
        "uid": 20220,
        "name": "_HLLY_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    },
    {
        "content": "\u6069\uff0c\u4e00\u770b\u6807\u7b7e\u7f51\u7edc\u6d41\u3002\n\n\u518d\u770b\u9898\u76ee\uff0c\u54ce\uff1f\u8d2a\u5fc3\uff1f\uff01\n\n\u8d2a\u5fc3\u7b56\u7565\uff1a\u7528\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u67f1\u5b50\u4e0a\u7684\u5143\u7d20\uff0c\u6309\u987a\u5e8f\u679a\u4e3e\uff0c\u5c06\u65b0\u5143\u7d20\u4e0e\u6bcf\u4e2a\u67f1\u9876\u5143\u7d20\u6bd4\u8f83\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u5408\u6cd5\u5c31\u52a0\u5165\u8be5\u67f1\u5b50\uff0c\u5426\u5219\u65b0\u5f00\u4e00\u4e2a\u67f1\u5b50\uff0c\u82e5\u5f53\u524d\u67f1\u5b50\u6570\u8d85\u8fc7\u9898\u76ee\u8981\u6c42\uff0c\u5219\u9000\u51fa\uff0c\u8f93\u51fa\u7b54\u6848\uff0c\u7136\u540e\u5c06\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u7684\u7b54\u6848\u8f93\u51fa\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nint a[2005][2005];\nint n,flag,x,i,j,cnt;\nint main()\n{\n    scanf(\"%d\",&n);\n    x=1;\n    cnt=1;\n    a[1][0]=1;\n        a[1][1]=1;\n    while (1)\n    {\n        flag=0;x++;\n        for (i=1;i<=cnt;i++)\n        {\n            if ((int)sqrt(x+a[i][a[i][0]])==sqrt(x+a[i][a[i][0]])) {a[i][++a[i][0]]=x;flag=1;}\n            if (flag==1) break;\n        }\n        if (flag==1) continue;\n        cnt++;\n        if (cnt>n) break;\n        a[cnt][0]=1;\n        a[cnt][1]=x;\n        \n    }\n    printf(\"%d\\n\",x-1);\n    for (i=1;i<=cnt;i++)\n    {\n        for (j=1;j<=a[i][0];j++)\n             printf(\"%d \",a[i][j]);\n        printf(\"\\n\");\n    }\n\n}\n```",
        "postTime": 1489969575,
        "uid": 2995,
        "name": "zhhe0101",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2765 \u3010\u9b54\u672f\u7403\u95ee\u9898\u3011"
    }
]