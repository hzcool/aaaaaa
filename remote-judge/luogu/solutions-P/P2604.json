[
    {
        "content": "\u8bdd\u8bf4\u5176\u5b9e\u4e0d\u7528\u65b0\u5efa\u56fe\u7684\u2026\u2026\u6211\u770b\u5230\u697c\u4e0b\u51e0\u4f4d\u5927\u4f6c\u7684\u505a\u6cd5\u90fd\u662f0.5\u500d\u7ecf\u9a8c+\u7801\u91cf\u5de8\u5927\u7684\u2026\u2026\n\n\u5b9e\u9645\u4e0a\u53ea\u8981\u76f4\u63a5\u8dd1\u4e00\u4e2a\u8d39\u7528\u6d41\u5c31\u884c\u4e86\u3002\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u6211\u4eec\u76f4\u63a5\u8fde\u8fb9\uff0c\u7136\u540e\u4ee4\u8d39\u7528\u4e3a$0$\uff0c\u8dd1\u4e00\u904d\uff0c\u8f93\u51fa\u6700\u5927\u6d41\u5373\u53ef\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u53ea\u8981\u5728\u539f\u6765\u7684\u6bcf\u6761\u8fb9\u4e0a\u518d\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9$inf$\u8d39\u4e3a\u6269\u8fb9\u8d39\u7528\uff0c\u7136\u540e$k$\u7684\u9650\u5236\u53ea\u8981\u518d\u5efa\u4e00\u4e2a\u6e90\u70b9\u5f80$1$\u8fde\u5bb9$k$\u8d39$0$\u7684\u8fb9\u3002\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u518d\u8dd1\u4e00\u904d\uff0c\u8f93\u51fa\u6700\u5c0f\u8d39\u7528\u5373\u53ef\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u662f\u5bf9\u7684\u3002\u56e0\u4e3a\u8981\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u800c\u539f\u56fe\u662f\u65e0\u82b1\u8d39\u7684\u6700\u5927\u6d41\uff0c\u90a3\u4e48\u53ea\u8981\u5728\u6b64\u6b8b\u91cf\u7f51\u7edc\u4e0a\u7ee7\u7eed\u589e\u5e7f\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8dd1\u51fa\u6700\u5c0f\u8d39\u7528\u4e86\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define inf 0x3f3f3f3f\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nconst int N=1005,M=50005;\nstruct node{\n\tint u,v,f,e;\n\tnode(){}\n\tnode(int u,int v,int f,int e):u(u),v(v),f(f),e(e){}\n}E[M];\nint ver[M],Next[M],head[N],edge[M],flow[M],tot=1;\nint dis[N],disf[N],vis[N],Pre[N],last[N];\nint n,m,k,s,t,maxflow,mincost;\nqueue<int> q;\ninline void add(int u,int v,int f,int e){\n\tver[++tot]=v,Next[tot]=head[u],head[u]=tot,flow[tot]=f,edge[tot]=e;\n\tver[++tot]=u,Next[tot]=head[v],head[v]=tot,flow[tot]=0,edge[tot]=-e;\n}\nbool spfa(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tq.push(s),dis[s]=0,disf[s]=inf,Pre[t]=-1;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=Next[i]){\n\t\t\tint v=ver[i];\n\t\t\tif(flow[i]&&dis[v]>dis[u]+edge[i]){\n\t\t\t\tdis[v]=dis[u]+edge[i],Pre[v]=u,last[v]=i;\n\t\t\t\tdisf[v]=min(disf[u],flow[i]);\n\t\t\t\tif(!vis[v]) vis[v]=1,q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn ~Pre[t];\n}\nvoid dinic(){\n\twhile(spfa()){\n\t\tint u=t;maxflow+=disf[t],mincost+=disf[t]*dis[t];\n\t\twhile(u!=s){\n\t\t\tflow[last[u]]-=disf[t];\n\t\t\tflow[last[u]^1]+=disf[t];\n\t\t\tu=Pre[u];\n\t\t}\n\t}\n}\nint main(){\n\tn=read(),m=read(),k=read();\n\ts=1,t=n;\n\tfor(int i=1;i<=m;++i){\n\t\tint u=read(),v=read(),f=read(),e=read();\n\t\tE[i]=node(u,v,f,e);\n\t\tadd(u,v,f,0);\n\t}\n\tdinic();\n\tprintf(\"%d \",maxflow);\n\tfor(int i=1;i<=m;++i){\n\t\tint u=E[i].u,v=E[i].v,e=E[i].e;\n\t\tadd(u,v,inf,e);\n\t}\n\ts=0;\n\tadd(s,1,k,0);\n\tdinic();\n\tprintf(\"%d\\n\",mincost);\n\treturn 0;\n}\n```",
        "postTime": 1534833133,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u7684blog](http://www.cnblogs.com/dedicatus545/p/8732901.html)\n\n# \u6b63\u6587\n\n\u7b2c\u4e00\u95ee\uff1a\u65e0\u8111\u7f51\u7edc\u6d41\u8dd1\u4e00\u6ce2\n\n\u7b2c\u4e8c\u95ee\uff1a\n\n\u5148\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u7684\u7ed3\u8bba\uff1a\u6269\u5bb9\u51fa\u6765\u7684\u6269\u5bb9\u6d41\u91cf\u4e00\u5b9a\u8981\u8dd1\u6ee1\n\n\u8bc1\u660e\u663e\u7136\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u6269\u5bb9\u8d39\u7528\u53ef\u4ee5\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u53d8\u6210\u589e\u52a0\u4e00\u70b9\u6d41\u91cf\uff0c\u82b1\u8d39W\u7684\u8d39\u7528\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6700\u5c0f\u8d39\u7528\u6d41\u7684\u6a21\u578b\n\n\u53ea\u8981\u5728\u539f\u56fe\u57fa\u7840\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u539f\u56fe\u8fb9\uff0c\u52a0\u4e00\u6761\u8d39\u7528\u4e3aW\uff0c\u65e0\u9650\u5bb9\u91cf\u7684\u8fb9\uff0c\u800c\u539f\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\u8d39\u7528\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u539f\u9898\u9700\u8981\u7684\u60c5\u51b5\u4e86\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6d41\u91cf\u589e\u52a0\u9650\u5236K\u600e\u4e48\u5904\u7406\uff1f\n\n\u6211\u4eec\u867d\u7136\u53ef\u4ee5\u7528spfa\u7684\u8d39\u7528\u6d41\uff0c\u4e00\u6b21\u4e00\u6b21\u589e\u52a0\uff0c\u76f4\u5230K\uff0c\u4f46\u662f\u8fd9\u6837\u4e5f\u592a\u6162chou\u4e86\u5427\uff1f\n\n\u4e0d\u6015\uff0c\u6211\u4eec\u52a0\u4e00\u4e2an+1\u53f7\u70b9\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u95ee\u7684\u8d39\u7528\u6d41\u6c47\u70b9\uff0c\u5728n\u5230n+1\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u6d41\u91cf\u4e3a\u7b2c\u4e00\u95ee\u7684\u6700\u5927\u6d41\u6d41\u91cf\u52a0\u4e0aK\n\n\u6ce8\u610f\uff1a\u4e0a\u8ff0\u7b97\u6cd5\u662f\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\u5efa\u4e00\u4e2a\u65b0\u56fe\u6765\u8dd1\u7684\uff0c\u5bf9\u4e8e\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u778e\u641e\u7684\u65b9\u6cd5\uff0c\u7531\u4e8e\u672c\u4eba\u6c34\u5e73\u6709\u9650\uff0c\u5e76\u65e0\u6cd5\u5f88\u597d\u5730\u8bc1\u660e\u6b63\u786e\u6027\n\n\u6211\u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u4f1a\u591a\u4e00\u4e2a$O\\left(m\\right)$\uff0c\u518d\u52a0\u4e0a\u4e00\u70b9\u5e38\u6570\n\n\u540c\u65f6\u56e0\u4e3a\u6211\u662fzkw\u8d39\u7528\u6d41\u5b9e\u73b0\u7684\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u5927\u6982\u7a0d\u6162....?\n\n\u5176\u5b9e\u5e94\u8be5\u662f\u4e00\u6837\u7684\u5427\uff01\n\nCode\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 1e9\nusing namespace std;\ninline int read(){\n    int re=0,flag=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') flag=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n    return re*flag;\n}\nint n,m,cnt=-1,ans,K,first[1010],dis[1010],vis[1010];\nstruct edge{\n    int to,next,w,cap;\n}a[25010];\ninline void add(int u,int v,int w,int cap){\n    a[++cnt]=(edge){v,first[u],w,cap};first[u]=cnt;\n    a[++cnt]=(edge){u,first[v],-w,0};first[v]=cnt;\n}\nbool spfa(int s,int t){\n    int q[5010],head=0,tail=1,u,v,w,i;\n    memset(dis,-1,sizeof(dis));memset(vis,0,sizeof(vis));\n    q[0]=t;dis[t]=0;vis[t]=1;\n    while(head<tail){\n        u=q[head++];vis[u]=0;\n        for(i=first[u];~i;i=a[i].next){\n            v=a[i].to;w=a[i].w;\n            if(a[i^1].cap&&((dis[v]==-1)||(dis[v]>dis[u]-w))){\n                dis[v]=dis[u]-w;\n                if(!vis[v]) q[tail++]=v,vis[v]=1;\n            }\n        }\n    }\n    return ~dis[s];\n}\nint dfs(int u,int t,int limit){\n    if(u==t){vis[t]=1;return limit;}\n    if(!limit){vis[u]=1;return 0;}\n    int i,v,f,flow=0,w;vis[u]=1;\n    for(i=first[u];~i;i=a[i].next){\n        v=a[i].to;w=a[i].w;\n        if((dis[v]==dis[u]-w)&&(!vis[v])&&a[i].cap){\n            f=dfs(v,t,min(limit,a[i].cap));if(!f) continue;\n            a[i].cap-=f;a[i^1].cap+=f;\n            flow+=f;limit-=f;ans+=a[i].w*f;\n            if(!limit) return flow;\n        }\n    }\n    return flow;\n}\nint zkw(int s,int t){//zkw\u8d39\u7528\u6d41\n    int re=0;\n    while(spfa(s,t)){\n        vis[t]=1;\n        while(vis[t]){\n            memset(vis,0,sizeof(vis));\n            re+=dfs(s,t,inf);\n            //cout<<\"cur re=\"<<re<<\"\\n\";\n        }\n    }\n    return re;\n}\nint cost[5010],u[5010],v[5010],cap[5010];\nint main(){\n    memset(first,-1,sizeof(first));\n    int i,maxflow;\n    n=read();m=read();K=read();\n    for(i=1;i<=m;i++){\n        u[i]=read();v[i]=read();cap[i]=read();cost[i]=read();\n        add(u[i],v[i],0,cap[i]);\n    }\n    printf(\"%d \",maxflow=zkw(1,n));//maxflow\u8981\u8bb0\u5f55\u4e0b\u6765\uff0c\u540e\u9762\u6709\u7528\n    memset(first,-1,sizeof(first));memset(a,0,sizeof(a));cnt=-1;//\u6e05\u7406\u539f\u56fe\uff0c\u91cd\u65b0\u5efa\u56fe\n    for(i=1;i<=m;i++){\n        add(u[i],v[i],0,cap[i]);\n        add(u[i],v[i],cost[i],inf);\n    }\n    add(n,n+1,0,maxflow+K);\n    zkw(1,n+1);\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1523074441,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "# \u6211\u7684[\u535a\u5ba2](https://www.cnblogs.com/ezoihy/p/9417308.html)\u554a\u554a\u554a\u554a\n### \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u4f60\u4e00\u5e45n\u4e2a\u70b9\u7684\u7f51\u7edc\uff0c\u5148\u6c42\u51fa\u51761\u5230n\u7684\u6700\u5927\u6d41\uff0c\u6bcf\u6761\u5f27\u8fd8\u4f1a\u6709\u4e2a\u5c5e\u6027$cost_i$\uff0c\u8868\u793a\u6ca1\u6269\u5bb9\u4e00\u4e2a\u5355\u4f4d\u7684\u8d39\u7528\uff0c\u73b0\u5728\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6269\u5bb9K\u4e2a\u5355\u4f4d\u7684\u6700\u5c0f\u8d39\u7528\n### \u601d\u8def\uff1a\n\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684\u7f51\u7edc\u6d41\uff0c\u7b2c\u4e00\u95ee\u76f4\u63a5dinic\u5c31\u662f\u4e86\uff0c\u91cd\u70b9\u5c31\u5728\u4e8e\u7b2c\u4e8c\u95ee\u3002\u6211\u4eec\u628a\u7b2c\u4e00\u95ee\u7684\u6b8b\u91cf\u7f51\u7edc\u7ee7\u7eed\u5229\u7528\uff0c\u5176\u4e2d\u7684\u6bcf\u6761\u5f27\u7684\u8d39\u7528\u90fd\u662f0\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u5728\u7b2c$i$\u6761\u5f27\u7684\u4e24\u7aef\u4e4b\u95f4\u5728\u5efa\u4e00\u6761\u5f27\uff0c\u5f27\u7684\u5bb9\u91cf\u662f$INF$\uff0c\u8d39\u7528\u5c31\u662f$cost_i$\u3002\u8fd9\u6837\u6211\u4eec\u56fa\u7136\u53ef\u4ee5\u4fdd\u8bc1\u8d39\u7528\u6b63\u786e\uff0c\u53ef\u662f\u6211\u4eec\u4fdd\u8bc1\u4e0d\u4e86\u6269\u5bb9\u4e86K\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u8fde\u54111\u53f7\u70b9\uff0c\u5bb9\u91cf\u4e3aK\uff0c\u8d39\u7528\u4e3a0\u3002\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u6700\u5927\u6d41\u4e00\u5b9a\u662f\u6ee1\u6d41\uff0c\u4e5f\u5c31\u662fK\u554a\uff0c\u6b64\u65f6\u7684\u6700\u5c0f\u8d39\u7528\u5c31\u662f\u6211\u4eec\u6240\u8981\u6c42\u7684\u3002\n### \u5177\u4f53\u5b9e\u73b0\uff1a\n\u8fd9\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u4e00\u904d$dinic$\uff0c\u518d\u4e00\u904d$MCMF$\u6211\u4eec\u5c31\u53ef\u4ee5\u4e86\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n \nusing namespace std;\n \nconst int maxn=10001,maxm=50001,inf=0x7f7f7f7f;\nint n,m,k,tot,next[maxm<<1],beg[maxm<<1],head[maxn],flow[maxm<<1],fflow[maxm<<1],last[maxn],pre[maxn],fl[maxn],nxt[maxm<<1],to[maxm<<1],ccost[maxm<<1],cost[maxm<<1],d[maxn],dep[maxn];\nbool vis[maxn];\n \nvoid addedge(int x,int y,int z,int co,int type){\n    nxt[++tot]=head[x];\n    head[x]=tot;\n    to[tot]=y;\n    beg[tot]=x;\n    flow[tot]=z;\n    fflow[tot]=type?z:0;\n    cost[tot]=type?co:0;\n    ccost[tot]=co;\n}\n \nbool bfs(){\n    memset(dep,0,sizeof(dep));\n    queue<int> q;\n    q.push(1);\n    dep[1]=1;\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=head[x];i;i=nxt[i]){\n            int u=flow[i],v=to[i];\n            if(u>0 and !dep[v]){\n                dep[v]=dep[x]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[n];\n}\n \nint dfs(int x,int mini){\n    if(x==n)return mini;\n    for(int i=head[x];i;i=nxt[i]){\n        int u=flow[i],v=to[i];\n        if(u>0 and dep[v]==dep[x]+1){\n            int dd=dfs(v,min(mini,u));\n            if(dd>0){\n                flow[i]-=dd;\n                flow[i^1]+=dd;\n                return dd;\n            }\n        }\n    }\n    return 0;\n}\n         \nint dinic(){\n    int ret=0;\n    while(bfs()){\n        int tmp=dfs(1,inf);\n        while(tmp){\n            ret+=tmp;\n            tmp=dfs(1,inf);\n        }\n    }\n    return ret;\n}\n \nbool spfa() {\n    memset(d,0x7f,sizeof(d));\n    memset(fl,0x7f,sizeof(fl));\n    memset(vis,0,sizeof(vis));\n    queue<int> q;\n    q.push(n+1);\n    vis[n+1]=1;\n    d[n+1]=0;\n    pre[n]=-1;\n    while(!q.empty()) {\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=nxt[i]){\n            int v=to[i];\n            if(fflow[i]>0 and d[v]>d[now]+cost[i]){ \n                d[v]=d[now]+cost[i];\n                pre[v]=now;\n                last[v]=i;\n                fl[v]=min(fl[now],fflow[i]);\n                if(!vis[v]){\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n        vis[now]=0;\n    }\n    return pre[n]!=-1;\n}\n \nint mcmf(){\n    int ret=0;\n    while (spfa()){\n        int now=n;ret+=fl[n]*d[n];\n        while (now!=n+1){\n            fflow[last[now]]-=fl[n]; \n            fflow[last[now]^1]+=fl[n];\n            now=pre[now];\n        }\n    }\n    return ret;\n}\n \nvoid rebuild(){\n\tint cnt=tot;\n\tfor(int i=2;i<=cnt;i+=2){\n\t\tfflow[i]=flow[i];\n\t\tfflow[i+1]=flow[i+1];\n\t\taddedge(beg[i],to[i],inf,ccost[i],1);\n\t\taddedge(to[i],beg[i],0,-ccost[i],1);\n\t}\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    addedge(n+1,1,k,0,1);\n    for(int i=1;i<=m;i++){\n        int a,b,c,d;\n        scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n        addedge(a,b,c,d,0);\n        addedge(b,a,0,-d,0);\n    }\n    int ans1=dinic();\n    rebuild();\n    int ans2=mcmf();\n    printf(\"%d %d\\n\",ans1,ans2);\n    return 0;\n}\n```",
        "postTime": 1533343739,
        "uid": 48146,
        "name": "ezoiHY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u8bf4\u4e00\u4e0b\u5927\u81f4\u601d\u8def\u3002\n\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u5f88\u7b80\u5355\u5c31\u662f\u6c42\u4e2a\u6700\u5927\u6d41F\u3002\u4f46\u662f\u7b2c\u4e8c\u95ee\u5462\uff1f\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u7b2c\u4e00\u95ee\u5efa\u7684\u8fb9\u76f8\u5f53\u4e8e\u662f\u82b1\u8d39\u4e3a0\uff0c\uff08\u6d41\u91cf\u8be5\u662f\u591a\u5c11\u5c31\u662f\u591a\u5c11\uff09\u7684\u8fb9\n\u5bf9\u4e8e\u6709\u6269\u5bb9\u8d39\u7528\u7684\u8fb9\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u82b1\u8d39\u4e3a\u6269\u5bb9\u8d39\u7528\uff0c\u6d41\u91cf\u4e3a\uff1f\u7684\u8fb9\u3002\n\u9898\u76ee\u4e2d\u8981\u6c42\u5c061-n\u7684\u6d41\u91cf\u589e\u52a0k,\u5373\u9650\u52361-n\u7684\u6700\u5927\u6d41\u4e3aF+k\u3002\n\u90a3\u4e48\u6211\u4eec\u5c31\u60f3\u529e\u6cd5\u627e\u4e00\u6761\u8fb9\u6765\u9650\u5236F+k\u8fd9\u4e2a\u6d41\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u4ed6\u7684\u8fb9\u4e0d\u80fd\u591f\u6210\u4e3a\u9650\u5236\u3002\n\u6211\u4ee4S=1,T=n+1,\u4ecen\u5230T\u5efa\u4e00\u6761\u82b1\u8d39\u4e3a0,\u6d41\u91cf\u4e3aF+k\u7684\u8fb9\u3002\n\u4e0a\u6587\u4e2d\u7684\uff1f\u5c31\u76f8\u5f53\u4e8einf.\n\u90a3\u4e48\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u5c31\u662f\u65b0\u5efa\u56fe\u7684\u6700\u5927\u6d41\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u8d39\u7528\n\u4ee3\u7801\u89c1blog(\u6211\u7684\u6700\u5927\u6d41\u5957\u7684\u8d39\u7528\u6d41\u677f\u5b50\uff0c\u672c\u8d28\u4e00\u6837\uff0c\u6240\u4ee5\u4e0d\u8981\u4ecb\u610f\u7684\u5566\uff09\n[\u5b89\u7136\u6d41\u9999](http://www.cnblogs.com/adelalove/p/8488370.html)",
        "postTime": 1519911422,
        "uid": 36397,
        "name": "\u6c89\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u6211\u7528\u4e24\u79cd\u65b9\u6cd5\u505a\u4e86\u8fd9\u4e2a\u9898\uff0c\u6070\u5de7\u90fd\u662f\u9898\u89e3\u91cc\u51fa\u73b0\u8fc7\u7684\u65b9\u6cd5\u2026\u2026\n\n\n\u7b2c\u4e00\u95ee\u9700\u8981\u4f60\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\n\t\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u9898\u76ee\u8fd8\u662f\u4e00\u9053\u8d39\u7528\u6d41\u9898\u76ee\u3002\n    \u663e\u7136\u8fd9\u662f\u4e00\u9053\u8d39\u7528\u6d41\u9898\u76ee\uff0c\u56e0\u4e3a\u5b83\u7b2c\u4e00\u95ee\u662f\u88f8\u7684\u6700\u5927\u6d41\u3002\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u8dd1\u8d39\u7528\u6d41\uff0c\u7b2c\u4e8c\u95ee\u7684\u56fe\u8fd8\u6bd4\u7b2c\u4e00\u95ee\u591a\u4e00\u500d\u7684\u8fb9\u3002\n    \u55ef\u2026\u2026\n    \u6240\u4ee5\u672c\u7740O\uff08cn\uff09==O\uff08n\uff09\u7684\u539f\u5219\uff0c\u62ffw==0\u7684EK\u8dd1\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u2026\u2026\n    \u66f4\u4f55\u51b5\u7b2c\u4e8c\u95ee\u7684\u56fe\u6bd4\u7b2c\u4e00\u95ee\u590d\u6742\uff0cc\u53ef\u80fd\u662f\u5c0f\u4e8e\u7b49\u4e8e2\u7684\u2026\u2026\n    \u518d\u5199\u4e00\u904dDinic\u7684\u90fd\u662f\u8001\u5b9e\u4eba\u3002\n    \n\u7b2c\u4e8c\u95ee\u3002\u3002\u3002\n\t\u4f5c\u4e3a\u8d39\u7528\u6d41\u9898\u76ee\uff0c\u6700\u91cd\u8981\u7684\u5f53\u7136\u662f\u5efa\u56fe\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u9898\u5efa\u56fe\u601d\u8def\u975e\u5e38\u663e\u7136\uff0c\u672c\u849f\u84bb\u90fd\u80fd\u77ac\u95f4\u60f3\u5230\u3002\u3002\u3002\u3002\n\t\u4e24\u4e2a\u663e\u7136\u7684\u601d\u8def\uff1a\n    \u2460\u589e\u52a0\u6e90\u6d41\n    \u2461\u9650\u5236\u6c47\u6d41\n    \u3002\u3002\u3002\u3002\u3002\u3002\u3002\n    \u5927\u6982\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u8981\u7ed9\u81ea\u5df1\u5bb6\u7684\u6c34\u6d41\u6269\u6d41\u4e00\u4e2a\u51c6\u786e\u7684\u503ck\uff0c\u6700\u66b4\u529b\u7684\u65b9\u6cd5\u5c31\u662f\u628a\u6240\u6709\u7684\u7ba1\u5b50\u90fd\u52a0\u7c97\u5230\u65e0\u9650\u7c97\uff0c\u4fdd\u8bc1\u6c34\u90fd\u80fd\u6d41\u8fc7\u6765\uff0c\u7136\u540e\u4e24\u4e2a\u9014\u5f84\uff0c\u4e00\u662f\u8ba9\u81ea\u6765\u6c34\u5382\u7ed9\u81ea\u5df1maxf+k\u7684\u6c34\uff08\u628a\u5b83\u770b\u6210\u662f\u65b0\u7684\u4e00\u4e2a\u6c34\u6d41\uff09\uff0c\u8fd9\u6837\u9876\u591a\u4e5f\u5c31maxf+k\u7684\u6c34\u3002\u4f46\u7ba1\u5b50\u9664\u4e86k\u7ba1\u513f\uff0c\u5176\u5b83\u7ba1\u5b50\u53c8\u662f\u65e0\u9650\u7c97\u7684\uff0c\u6240\u4ee5\u5e26\u8d39\u7528\u7684\u6700\u5927\u6d41\u53c8\u81f3\u5c11\u662fmaxf+k\uff0c\u56e0\u6b64\u6700\u5927\u6d41\u5c31\u662f\u51c6\u786e\u7684maxf+k\u4e86\u3002\u4e8c\u662f\u88c5\u4e00\u4e2amaxf\uff08\u6269\u6d41\u524d\u7684\u6700\u5927\u6d41\uff09+k\u5927\u7684\u6c34\u9f99\u5934\uff0c\u8fd9\u6837\u5c31\u521a\u597d\u80fd\u6269k\u7684\u6c34\u4e86\u3002\n    \u53ef\u80fd\u6709\u70b9\u7455\u75b5\uff0c\u5927\u4f53\u610f\u601d\u5dee\u4e0d\u591a\u3002\u3002\u3002\n    \n    \u6240\u4ee5\u7ecf\u8fc7\u601d\u8003\u540e\uff0c\u4ea4\u4e0a\u7a0b\u5e8f\u6210\u529fWA\u6389\u3002\u3002\u3002\n    \u540e\u6765\u60f3\u4e86\u60f3\uff0c\u662f\u56e0\u4e3a\u6ca1\u6709\u91cd\u7f6e\u6bcf\u4e00\u4e2a\u6d41\u7684\u5bb9\u91cf\u3002\n    \u56e0\u4e3a\u4e0d\u91cd\u7f6e\u5bb9\u91cf\u7684\u8bdd\uff0c\u5c31\u662f\u5df2\u7ecf\u6d41\u8fc7maxf\u3002\u518d\u6d41maxf\uff0c\u5b83\u76f8\u5f53\u4e8e\u6d41\u4e862maxf+k\u7684\u6d41\u3002\n    \u6240\u4ee5\u8fd9\u91cc\u5c31\u6709\u4e24\u4e2a\u529e\u6cd5\u4e86\uff0c\u4e00\u662f\u590d\u5236\u4e00\u4efd\u65b0\u56fe\uff0c\u4e00\u4efd\u62ff\u6765\u505a\u6700\u5927\u6d41\uff0c\u4e00\u4efd\u62ff\u6765\u505a\u6700\u5c0f\u8d39\u7528\u6d41\u3002\u4e0b\u9762\u7684\u795e\u7287\u53ef\u80fd\u662f\u7528\u8fd9\u79cd\u65b9\u6cd5\u505a\u7684\uff0c\u6240\u4ee5\u7528\u4e86maxf+k\u3002\u4e8c\u662f\u5e72\u8106\u628a\u6240\u6709\u7684maxf+k\u90fd\u5f53\u6210k\u3002\u3002\u3002\u3002\n    \u867d\u7136\u4e0d\u600e\u4e48\u4f1a\u8bc1\u660e\uff0c\u4f46\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u6269\u5bb9\u524d\u548c\u6269\u5bb9\u540e\u7684\u6d41\u7684\u72b6\u6001f(x)\u662f\u53ef\u51cf\u7684\u2026\u90a3\u4e48\u6700\u4f18\u7684\u514d\u8d39\u6d41\u7684\u72b6\u6001\u662f\u4e0d\u4f1a\u56e0\u6269\u5bb9\u800c\u5f71\u54cd\u5230\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2amaxf\u5728\u6269\u5bb9\u524d\u548c\u6269\u5bb9\u540e\u90fd\u662f\u514d\u8d39\u7684\uff0c\u800ck\u5219\u90fd\u4e00\u5b9a\u4f1a\u88ab\u6536\u8d39\u3002\u90a3\u4e48\u521a\u521a\u8dd1\u5b8c\u7684\u6700\u5927\u6d41\uff0c\u5728\u65b0\u56fe\u91cc\u514d\u8d39\u6d41\u91cf\u7684\u72b6\u6001\u662f\u5b8c\u5168\u91cd\u5408\u7684\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7528\u539f\u6765\u7684\u56fe\uff0c\u5047\u88c5\u81ea\u5df1\u5df2\u7ecf\u8dd1\u8fc7maxf\u4e86\uff0c\u7136\u540e\u76f4\u63a5\u52a0\u4e2ak\u5c31\u53ef\u4ee5\u4e86\u3002\n    \n    \u5b9e\u73b0\uff1a\n    \u5b9e\u73b0\u5c31\u7b80\u5355\u70b8\u4e86\u2026\u2026\n    \u2460\u7684\u5b9e\u73b0\u5c31\u662f\u8ba90\u52301\u8fde\u4e00\u4e2a\u9876\u591a\u6d41k\u7684\u6d41\u3002\n    \u2461\u5c31\u662f\u8ba9n\u5230n+1\u8fde\u4e00\u4e2a\u6d41k\u7684\u6d41\u3002\u3002\u3002\u3002\n    \n    \u4ee3\u7801\uff1a\n    \u2460\n  ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf = 123599857;\nstruct node{\n    int to;\n    int cap;\n    int cost;\n    int coc;\n    bool type;\n};\nvector<node>data[1005];\nint pre1[1005],pre2[1005],dx[1005],incf[1005],costed[1005][1005],n,m,k,maxf,ans,s;\nbool inq[1005];\ninline void add(int u,int v,int w,int f){\n    data[u].push_back((node){v,w,f,data[v].size(),1});\n    data[v].push_back((node){u,0,-f,data[v].size()-1,0});\n}\ninline bool spfa(){\n    fill(dx+1,dx+n+1,inf);\n    queue<int>q;\n    memset(inq,0,sizeof(inq));\n    q.push(s);\n    inq[s]=1;\n    dx[s]=0;\n    incf[s]=inf;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        inq[now]=0;\n        for(int j=0;j<data[now].size();j++){\n            node &tmp=data[now][j];\n            if(tmp.cap>0&&dx[tmp.to]>dx[now]+tmp.cost){\n                dx[tmp.to]=dx[now]+tmp.cost;\n                pre1[tmp.to]=now;\n                pre2[tmp.to]=j;\n                incf[tmp.to]=min(tmp.cap,incf[now]);\n                if(!inq[tmp.to]){\n                    q.push(tmp.to);\t\t\t\n                    inq[tmp.to]=1;\n                }\n            }\n        }\n    }\n\treturn dx[n]!=inf;\n}\ninline void updata(){\n    int x=n;\n    while(x!=s){\n        int y=pre1[x],i=pre2[x];\n        node &tmp=data[y][i];\n        tmp.cap-=incf[n];\n        data[tmp.to][tmp.coc].cap+=incf[n];\n        x=y;\n    }\n    maxf+=incf[n],ans+=dx[n]*incf[n];\n}\nvoid solve(){while(spfa())updata();}\nint main(){\n    cin>>n>>m>>k;\n    s=1;\n    for(int i=1;i<=m;i++){\n        int u,v,c,w;\n        cin>>u>>v>>c>>w;\n        costed[u][v]=w;\n        add(u,v,c,0);\n    }\n    solve();\n    cout<<maxf<<\" \";\n    for(int i=1;i<=n;i++){\n    \tint coc=data[i].size();\n    \tfor(int j=0;j<coc;j++){\n            if(data[i][j].type)add(i,data[i][j].to,100000000,costed[i][data[i][j].to]);\n    \t}\n    }\n    s=0;\n    add(0,1,k,0);\n    solve();\n    cout<<ans;\n}\n```\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \u2461\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  \n  ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf = 123599857;\nstruct node{\n    int to;\n    int cap;\n    int cost;\n    int coc;\n    bool type;\n};\nvector<node>data[1005];\nint pre1[1005],pre2[1005],dx[1005],incf[1005],costed[1005][1005],n,m,k,t,maxf,ans;\nbool inq[1005];\ninline void add(int u,int v,int w,int f){\n    data[u].push_back((node){v,w,f,data[v].size(),1});\n    data[v].push_back((node){u,0,-f,data[v].size()-1,0});\n}\ninline bool spfa(){\n    fill(dx+1,dx+n+1,inf);\n    queue<int>q;\n    memset(inq,0,sizeof(inq));\n    q.push(1);\n    inq[1]=1;\n    dx[1]=0;\n    incf[1]=inf;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        inq[now]=0;\n        for(int j=0;j<data[now].size();j++){\n            node &tmp=data[now][j];\n            if(tmp.cap>0&&dx[tmp.to]>dx[now]+tmp.cost){\n                dx[tmp.to]=dx[now]+tmp.cost;\n                pre1[tmp.to]=now;\n                pre2[tmp.to]=j;\n                incf[tmp.to]=min(tmp.cap,incf[now]);\n                if(!inq[tmp.to]){\n                    q.push(tmp.to);\t\t\t\n                    inq[tmp.to]=1;\n                }\n            }\n        }\n    }\n    return dx[n]!=inf;\n}\ninline void updata(){\n    int x=n;\n    while(x!=1){\n        int y=pre1[x],i=pre2[x];\n        node &tmp=data[y][i];\n        tmp.cap-=incf[n];\n        data[tmp.to][tmp.coc].cap+=incf[n];\n        x=y;\n    }\n    maxf+=incf[n],ans+=dx[n]*incf[n];\n}\nvoid solve(){while(spfa())updata();}\nint main(){\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;i++){\n        int u,v,c,w;\n        cin>>u>>v>>c>>w;\n        costed[u][v]=w;\n        add(u,v,c,0);\n    }\n    t=0;\n    solve();\n    cout<<maxf<<\" \";\n    for(int i=1;i<=n;i++){\n    \tint coc=data[i].size();\n    \tfor(int j=0;j<coc;j++){\n            if(data[i][j].type)add(i,data[i][j].to,k,costed[i][data[i][j].to]);\n    \t}\n    }\n    n++;\n    add(n-1,n,k,0);\n    solve();\n    cout<<ans;\n}\n```\n    \n    \n    ",
        "postTime": 1522747321,
        "uid": 38055,
        "name": "Npse_D",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u7ed3\u5408\u4e86\u6700\u5927\u6d41\u548c\u8d39\u7528\u6d41\u7684\u597d\u9898\u76ee\u3002\\\n\u7b2c\u4e00\u95ee\u5c31\u662f\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u7b2c2\u95ee\u6709\u4e9b\u65b0\u9896\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5bf9\u8d39\u7528\u6d41\u7684\u7406\u89e3\u7684\u4e00\u79cd\u8003\u5bdf\u5427,\u5047\u5982\u6ca1\u6709\u7b2c\u4e00\u95ee\u5c31\u662f\u4ece\u6e90\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u518d\u8dd1\u4e00\u904dspfa\u5c31\u53ef\u4ee5\u627e\u51fa\u6700\u5927\u6d41\u4e86\uff0c\u90a3\u7ed3\u5408\u7b2c\u4e00\u95ee\uff0c\u7b2c\u4e00\u95ee\u5bf9\u7b2c2\u95ee\u6709\u4ec0\u4e48\u5f71\u54cd\u5462\uff0c\u6ca1\u6709\u7b2c\u4e00\u95ee\u5c31\u662f\uff0c\u539f\u6765\u6b63\u5411\u8fb9\u7684\u5bb9\u91cf\u4e0a\u9650\u662fw\uff0c\u53cd\u5411\u8fb9\u5bb9\u91cf\u4e0a\u9650\u662f0\uff0c\u8d39\u7528\u662ff\u548c-f\uff0c\u7ed3\u5408\u7b2c2\u95ee\u5c31\u662f \u5bb9\u91cf\u65e0\u9650\uff0c\u4e0d\u8fc7\u5728\u67d0\u4e9b\u8303\u56f4\u5185\u662f\u8d39\u7528\u201c\u514d\u8d39\u7684\u201d\uff0c\u67d0\u4e9b\u662f\u4e3af\u7684\uff0c\u56e0\u4e3a\u662f\u589e\u52a0\u4e86\uff0c\u624d\u9700\u8981\u6536\u8d39\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u539f\u6765\u662f\u65e0\u7a77\u7684\uff0c\u8d85\u8fc7\u4e86\u539f\u6765\u7684\u6b8b\u4f59\u7f51\u7edc\uff0c\u624d\u9700\u8981\u6536\u8d39\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u505a\u5b8c\u4e86\uff1b\n\n\u56e0\u4e3a\u7f51\u7edc\u6d41\u7684\u9898\u76ee\u96be\u70b9\u5728\u5efa\u56fe\uff0c\u6240\u4ee5\u7ed9\u51fa\u5efa\u56fe\u601d\u8def\uff0c\u5173\u4e8edinic\u7b97\u6cd5\u6c42\u6700\u5927\u6d41\u548cspfa\u6c42\u6700\u5c0f\u8d39\u5c31\u53bb\u6a21\u677f\u9898\u54ea\u91cc\u770b\u5427\uff0c\u6709\u5f88\u591a\u5f88\u597d\u7684\u9898\u89e3\uff0c\u672c\u7bc7\u7ed9\u51fa\u8fd9\u9898\u7684\u5efa\u56fe\u601d\u8def\uff1b\n\n\u4ee5\u4e0b\u7ed9\u51faac\u4ee3\u7801\uff1b\n```\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\nconst int maxn=2010,maxm=3e4+7,inf=0x3f3f3f3f;\nint h[maxn],e[maxm],ne[maxm],w[maxm],f[maxm],idx;\nint dep[maxn];\nint pre[maxn],last[maxn],flow[maxn],dis[maxn];\nbool vis[maxn];\nint n,m,s,t,dk;\nint x[maxm],y[maxm],z[maxm],r[maxm];\nint min_cost;\n\nvoid add(int a,int b,int c,int d){\n    e[idx]=b,w[idx]=c,f[idx]=d,ne[idx]=h[a],h[a]=idx++;\n}\nbool bfs(int s,int t){\n    memset(dep,0,sizeof dep);\n    queue<int>q;q.push(s);dep[s]=1;\n    while(q.size()){\n        int x=q.front();q.pop();\n        for(int i=h[x];~i;i=ne[i]){\n            int j=e[i];\n            if(!dep[j]&&w[i])q.push(j),dep[j]=dep[x]+1;\n        }\n    }\n    return dep[t];\n}\nint dfs(int x,int v){\n    if(x==t||v==0)return v;\n    int res=0,f;\n    for(int i=h[x];~i;i=ne[i]){\n        int j=e[i];\n        if(dep[j]==dep[x]+1&&w[i]){\n            f=dfs(j,min(v,w[i]));\n            w[i]-=f,w[i^1]+=f,res+=f,v-=f;\n            if(v==0)break;\n        }\n    }\n    return res;\n}\nbool spfa(int s,int t){\n    memset(dis,0x3f,sizeof dis);dis[s]=0;\n    memset(vis,0,sizeof vis);\n    memset(flow,0x3f,sizeof flow);pre[t]=-1;\n    queue<int>q;q.push(s);vis[s]=1;\n    while(q.size()){\n        int x=q.front();q.pop();vis[x]=0;\n        for(int i=h[x];~i;i=ne[i]){\n            int j=e[i];\n            if(dis[j]>dis[x]+f[i]&&w[i]){\n                dis[j]=dis[x]+f[i],flow[j]=min(flow[x],w[i]);\n                pre[j]=x,last[j]=i;\n                if(!vis[j])q.push(j),vis[j]=1;\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\nvoid mcmf(){\n    while(spfa(s,t)){\n        min_cost+=dis[t]*flow[t];\n        int p=t;\n        while(p!=s){\n            w[last[p]]-=flow[t];\n            w[last[p]^1]+=flow[t];\n            p=pre[p];\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&dk);\n    memset(h,-1,sizeof h);s=1,t=n;\n    for(int i=1;i<=m;i++)scanf(\"%d%d%d%d\",&x[i],&y[i],&z[i],&r[i]),add(x[i],y[i],z[i],0),add(y[i],x[i],0,0);\n    int ans=0;\n    while(bfs(s,t))ans+=dfs(s,inf);\n    s=0;add(s,1,dk,0),add(1,s,0,0);\n    for(int i=1;i<=m;i++)add(x[i],y[i],1000000,r[i]),add(y[i],x[i],0,-r[i]);\n    mcmf();\n    printf(\"%d %d\\n\",ans,min_cost);\n    return 0;\n}\n\n```",
        "postTime": 1564153489,
        "uid": 210065,
        "name": "\u4e3d\u5c14\u5df4\u8328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "```c++\n\u5efa\u56fe\uff1a\u6bcf\u4e00\u6761\u8fb9\u8f93\u5165\u56db\u4e2a\u6570a,b,c,d\u3002\n\u518d\u5efa\u56db\u6761\u8fb9\uff1a\na\u5230b,\u5bb9\u91cf\u4e3ac,\u8d39\u7528\u4e3a0\u3002\nb\u5230a,\u5bb9\u91cf\u4e3a0,\u8d39\u7528\u4e3a0\u3002\na\u5230b,\u5bb9\u91cf\u4e3a\u65e0\u9650,\u8d39\u7528\u4e3ad\u3002\nb\u5230a,\u5bb9\u91cf\u4e3a0,\u8d39\u7528\u4e3a-d\u3002\n\u601d\u8def\uff1a\u5148\u6839\u636e0\u8d39\u7528\u7684\u8fb9\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u518d\u7528\u5168\u56fe\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u3002\n\u6700\u540e\u8d34\u4e00\u4e0b\u849f\u84bb\u7684\u4ee3\u7801\uff1a\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct data{\n\tint a,b,c,cost;\n\tdata(int a=0,int b=0,int c=0,int cost=0){\n\t\tthis->a=a;\n\t\tthis->b=b;\n\t\tthis->c=c;\n\t\tthis->cost=cost;\n\t}\n};\nvector<data> v;\nvector<int> u[1002];\nint n,m,f[1002],x,y,z,w,s,ans1,ans2,fa[1002][2],co[1002];\nbool r[1002];\nvoid add(int a,int b,int c,int d){\n\tv.push_back(data(a,b,c,0));\n\tu[a].push_back(v.size()-1);\n\tv.push_back(data(b,a,0,0));\n\tu[b].push_back(v.size()-1);\n\tv.push_back(data(a,b,10000000,d));\n\tu[a].push_back(v.size()-1);\n\tv.push_back(data(b,a,0,-d));\n\tu[b].push_back(v.size()-1);\n}\nvoid bfs(){\n\tqueue<int> q;\n\twhile(1){\n\t\tfor(int i=0;i<=1001;i++)f[i]=0;\n\t\tf[1]=1000000;\n\t    q.push(1);\n\t\twhile(!q.empty()){\n\t\t\tx=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=0;i<u[x].size();i++){\n\t\t\t\ty=u[x][i];\n\t\t\t\tdata da=v[y];\n\t\t\t\tif(f[da.b]==0&&da.c>0&&da.cost==0){\n\t\t\t\t\tf[da.b]=min(da.c,f[x]);\n\t\t\t\t\tq.push(da.b);\n\t\t\t\t\tfa[da.b][0]=x;\n\t\t\t\t\tfa[da.b][1]=y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f[n]==0)break;\n\t\tfor(int i=n;i!=1;i=fa[i][0]){\n\t\t\tv[fa[i][1]].c-=f[n];\n\t\t\tv[fa[i][1]^1].c+=f[n];\n\t\t}\n\t\tans1+=f[n];\n\t}\n}\nvoid spfa(){\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tx=q.front();\n\t\tq.pop();\n\t\tr[x]=false;\n\t\tfor(int i=0;i<u[x].size();i++){\n\t\t\ty=u[x][i];\n\t\t\tdata da=v[y];\n\t\t\tif(co[da.b]>co[x]+da.cost&&da.c){\n\t\t\t\tf[da.b]=min(da.c,f[x]);\n\t\t\t\tco[da.b]=co[x]+da.cost;\n\t\t\t\tfa[da.b][0]=x;\n\t\t\t\tfa[da.b][1]=y;\n\t\t\t\tif(!r[da.b]){\n\t\t\t\t\tr[da.b]=true;\n\t\t\t\t\tq.push(da.b);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(){\n\twhile(1){\n\t\tfor(int i=0;i<=1001;i++){\n\t\t\tf[i]=0;\n\t\t\tr[i]=false;\t\n\t\t\tco[i]=10000000;\n\t\t}\n\t\tf[1]=10000000;\n\t\tco[1]=0;\n\t\tspfa();\n\t\tif(f[n+1]==0)break;\n\t\tfor(int i=n+1;i!=1;i=fa[i][0]){\n\t\t\tv[fa[i][1]].c-=f[n+1];\n\t\t\tv[fa[i][1]^1].c+=f[n+1];\n\t\t}\n\t\tans2=ans2+f[n+1]*co[n+1];\n\t}\n}\nint main(){\n\tscanf(\"%d %d %d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d %d %d %d\",&x,&y,&z,&w);\n\t\tadd(x,y,z,w);\n\t}\n\tbfs();\n\tv.push_back(data(n,n+1,s,0));\n\tu[n].push_back(v.size()-1);\n\tv.push_back(data(n+1,n,0,0));\n\tu[n+1].push_back(v.size()-1);\n\tdfs();\n\tprintf(\"%d %d\",ans1,ans2);\n}\n```",
        "postTime": 1542345273,
        "uid": 114149,
        "name": "suyiheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u7f51\u8def\u6d41\u7684\u5efa\u6a21\u9898\uff0c\u5927\u81f4\u601d\u60f3\u5c31\u662f\u901a\u8fc7\u62c6\u70b9\uff0c\u589e\u8bbe\u865a\u70b9\u548c\u9644\u52a0\u8fb9\u6765\u5c06\u9898\u76ee\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u8f6c\u6362\u4e3a\u6d41\u91cf\u5e73\u8861\u3002\n\n\u7b2c\u4e00\u95ee\u65e0\u8111\u6700\u5927\u6d41\uff0c\u4e0d\u52a0\u8d58\u8ff0\u3002\n\n\u7b2c\u4e8c\u95ee\u4e2d\u63d0\u5230\u4e86\u8d39\u7528\uff0c\u4e0d\u96be\u60f3\u5230\u8d39\u7528\u6d41\uff0c\u8003\u8651\u6269\u5bb9\u53ef\u4ee5\u589e\u8bbe\u9644\u52a0\u8fb9\u6765\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u539f\u56fe\u4e2d\u7684\u8fb9\u590d\u5236\u4e00\u904d\uff0c\u5bb9\u91cf\u4e3a$INF$\uff0c\u8d39\u7528\u4e3a$w_i$\uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u9700\u6ee1\u8db3\u6700\u7ec8\u6d41\u91cf\u4e3a$last+k$\u8fd9\u4e00\u9650\u5236\uff0c\u56e0\u6b64\u8003\u8651\u589e\u8bbe\u8d85\u7ea7\u6e90\u70b9$s$\uff0c\u5411\u4e00\u53f7\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$last+k$\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a$0$\uff0c\u8fd9\u6837\u6211\u4eec\u76f4\u63a5\u5957\u7528$MCMF$\u5373\u53ef\u3002\n\n\u7ed9\u51fa\u4e3b\u51fd\u6570\u4ee3\u7801\uff1a\n\n```cpp\nint main()\n{\n    fio();\n    gi(n),gi(m),gi(k);\n    for(int i=1;i<=m;++i)\n    {\n        gi(x[i]),gi(y[i]),gi(w[i]),gi(c[i]);\n        link(x[i],y[i],w[i],0);\n    }\n    s=1,t=n;\n    int res=EK();\n    print(res),putchar(' ');\n    ms(head);\n    s=0,cnt=1,link(s,1,res+k,0);\n    for(int i=1;i<=m;++i) link(x[i],y[i],w[i],0),link(x[i],y[i],INF,c[i]);\n    MCMF(),print(cost);\n    end();\n}\n```",
        "postTime": 1580307962,
        "uid": 208081,
        "name": "MikukuOvO",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u6c42\u4e00\u4e2a\u7f51\u7edc\u7684\u6700\u5927\u6d41\n\n\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u6269\u5bb9\u8d39\u7528 $W$ \uff0c\u8868\u793a\u5c06\u8fd9\u6761\u8fb9\u6269\u5927 $1$ \u5bb9\u91cf\u7684\u8d39\u7528\n\n\u6c42\u539f\u56fe\u6700\u5927\u6d41 $+k$ \u6240\u9700\u7684\u6269\u5bb9\u8d39\u7528\n\n$k\\le 10!!!$\n\n## \u5206\u6790\n\n\u9996\u5148\u5f53\u7136\u662f\u6c42\u51fa\u6700\u5927\u6d41\n\n\u663e\u7136\u6269\u5bb9\u540e\u7684\u6700\u5927\u6d41\u662f\u5728\u539f\u56fe\u6700\u5927\u6d41\u57fa\u7840\u4e0a\u7684\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8003\u8651\u6269\u5bb9\n\n\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0 $k$ \u7684\u8303\u56f4\u6781\u5c0f\n\n\u6240\u4ee5\u6211\u8003\u8651\u4e00\u6b21\u589e\u52a0 $1$ \u7684\u6700\u5927\u6d41\n\n\u8003\u8651\u54ea\u4e9b\u8fb9\u8981\u6269\u5bb9\n\n\u663e\u7136\u53ea\u589e\u52a0 $1$ \u7684\u6700\u5927\u6d41\u65f6\uff0c\u6b8b\u91cf\u7f51\u7edc\u4e2d\u4ecd\u6709\u5bb9\u91cf\u7684\u8fb9\u662f\u4e0d\u7528\u6269\u5bb9\u7684\n\n\u90a3\u4e48\u53ea\u5269\u4e0b\u5bb9\u91cf\u4e3a $0$ \u7684\u8fb9\u4e86\n\n\u6240\u4ee5\u6211\u5c06\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5bb9\u91cf\u4e3a $0$ \u7684\u8fb9\u5bb9\u91cf\u52a0 $1$ \uff0c\u8d39\u7528\u8bbe\u4e3a\u8be5\u8fb9\u7684 $W$\n\n\u4f46\u8fd9\u6837\u6ca1\u6cd5\u9650\u5b9a\u53ea\u589e\u52a0 $1$ \u7684\u6d41\u91cf\u554a\n\n\u53ef\u80fd\u8dd1\u8d39\u7528\u6d41\u65f6\u4f1a\u8dd1\u51fa\u591a\u6761\u589e\u6d41\u8def\u5f84\n\n\u5176\u5b9e\u6211\u4eec\u7684\u8d39\u7528\u6d41\u6839\u672c\u4e0d\u7528\u8dd1\u5b8c\uff0c\u53ea\u9700\u8981\u4e00\u6b21spfa+\u589e\u6d41\u5c31\u597d\u4e86\uff0c\u4e5f\u5c31\u662f\u9650\u5b9a\u53ea\u589e\u6d41\u4e00\u6761\u8def\u5f84\n\n\u589e\u6d41\u4e86 $1$ \u4e4b\u540e\uff0c\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u589e\u6d41 $k$ \u6b21\u5373\u53ef\n\n\u5177\u4f53\u6d41\u7a0b\uff1a\n\n1. \u6700\u5927\u6d41\n2. \u6b8b\u91cf\u7f51\u7edc\u4e2d\u5bb9\u91cf\u4e3a $0$ \u7684\u8fb9\u5bb9\u91cf $++$ \uff0c\u8d39\u7528\u8bbe\u4e3a\u8be5\u8fb9 $W$\n3. \u627e\u5230\u8d39\u7528\u6700\u5c0f\u7684\u4e00\u6761\u589e\u6d41\u8def\u5f84\u8fdb\u884c\u589e\u6d41\n4. \u91cd\u590d $2,3$ \u64cd\u4f5c $k$ \u6b21\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN=5007,MAXM=100007;\nint n,m,s=MAXN-3,t=MAXN-2;\n\nstruct side {\n\tint siz,val,from,to,nex;\n\tside(){nex=0;}\n}ed[MAXM];\nint cntn=0,cntm=1;\nint head[MAXN]={0};\n\nvoid link(int from,int to,int siz,int val)\n{\n\ted[++cntm].from=from;ed[cntm].to=to;\n\ted[cntm].siz=siz;ed[cntm].val=val;\n\ted[cntm].nex=head[from];head[from]=cntm;\n\ted[++cntm].from=to;ed[cntm].to=from;\n\ted[cntm].siz=0;ed[cntm].val=-val;\n\ted[cntm].nex=head[to];head[to]=cntm;\n}\nint ss=0,vs=0;\nint dis[MAXN],now,fa[MAXN];\nbool inq[MAXN]={0};\ndeque<int> qu;\nbool spfa()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(inq,0,sizeof(inq));\n\tqu.push_back(s);\n\tdis[s]=1;\n\twhile(qu.size())\n\t{\n\t\tnow=qu.front();qu.pop_front();\n\t\tinq[now]=0;\n\t\tfor(int i=head[now];i;i=ed[i].nex)\n\t\t\tif(ed[i].siz&&dis[ed[i].to]>ed[i].val+dis[now])\n\t\t\t{\n\t\t\t\tdis[ed[i].to]=ed[i].val+dis[now];\n\t\t\t\tfa[ed[i].to]=i;\n\t\t\t\tif(!inq[ed[i].to]) qu.push_back(ed[i].to);\n\t\t\t\tinq[ed[i].to]=1;\n\t\t\t}\n\t}\n\treturn dis[t]!=0x3f3f3f3f;\n}\nvoid add()\n{\n\tint minn=1e9;\n\tfor(int i=t;i!=s;i=ed[fa[i]].from)\n\t\tminn=min(minn,ed[fa[i]].siz);\n\tfor(int i=t;i!=s;i=ed[fa[i]].from)\n\t{\n\t\ted[fa[i]].siz-=minn;\n\t\ted[fa[i]^1].siz+=minn;\n\t\tvs+=ed[fa[i]].val*minn;\n\t}\n\tss+=minn;\n}\nvoid MCMF()\n{\n\tvs=0;ss=0;\n\twhile(spfa()) add();\n}\n\nint k;\n\nint U[MAXM],V[MAXM],C[MAXN],W[MAXM];\nint main()\n{\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>U[i]>>V[i]>>C[i]>>W[i];\n\tfor(int i=1;i<=m;i++) link(U[i],V[i],C[i],0);\n\tlink(s,1,1e9,0);\n\tlink(n,t,1e9,0);\n\tMCMF();\n\tcout<<ss<<\" \";\n\tint cost=0;\n\tfor(int i=0;i<k;i)\n\t{\n\t\tss=vs=0;\n\t\tfor(int i=1,i2;i<=m;i++)\n\t\t{\n\t\t\ti2=i*2;\n\t\t\tif(ed[i2].siz==0)\n\t\t\t{\n\t\t\t\ted[i2].siz++;\n\t\t\t\ted[i2].val=W[i];\n\t\t\t}\n\t\t}\n\t\tspfa();add();\n\t\ti+=ss;\n\t\tcost+=vs;\n\t}\n\tcout<<cost;\n}\n```",
        "postTime": 1563248857,
        "uid": 34323,
        "name": "mohei0",
        "ccfLevel": 7,
        "title": "[ZJOI2010]\u7f51\u7edc\u6269\u5bb9 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "# \u5514\u59c6\n\u8fd9\u4e2a\u9898\u53ef\u80fd\u662f\u6211\u89c1\u8fc7\u7684\u6700\u6bd2\u7624\u7684\u7f51\u7edc\u6d41\uff0c\u4e4d\u4e00\u770b\u4ee5\u4e3a\u662f\u9053\u677f\u5b50\uff0c\u5b9e\u9645\u4e0a\u662f\u4e24\u4e2a\u677f\u5b50\u62fc\u8d77\u6765233333\n\n\n------------\n# \u9898\u89e3\n- \u7b2c\u4e00\u95ee\uff0c\u5927\u5bb6\u76f4\u63a5\u7f51\u7edc\u6d41\u6a21\u677f\u5c31\u597d\u4e86[P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41](https://www.luogu.org/problemnew/show/P3376)~~\u653e\u4e2a\u94fe\u63a5\u65b9\u4fbf\u5927\u5bb6\u76f4\u63a5\u56de\u53bb\u770b~~\n- \u7b2c\u4e8c\u95ee\uff0c\u8bb8\u591a\u5927\u4f6c\u4e00\u773c\u5c31\u770b\u51fa\u6765\u4e86\u8fd9\u5c31\u662f\u4e2a\u8d39\u7528\u6d41~~\u9898\u76ee\u91cc\u90fd\u660e\u793a\u4e86~~\uff0c\u4f46\u662f\u5177\u4f53\u600e\u4e48\u8bbe\u8d39\u7528\u548c\u6d41\u91cf\u5462\uff1f\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5230\u4e4b\u524d\u6c42\u6700\u5927\u6d41\u7684\u6b8b\u4f59\u7f51\u7edc\u3002\u5982\u679c\u6211\u4eec\u8981\u6269\u5145k\u4e2a\u6d41\u91cf\uff0c\u90a3\u6211\u4eec\u80af\u5b9a\u5c3d\u91cf\u5229\u7528\u4e4b\u524d\u5269\u4e0b\u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6d41\u91cf\u4e0d\u8017\u94b1(~~\u5565\uff1f\u6d41\u91cf\u4e0d\u8981\u94b1\uff1f\uff1f~~)\u3002\u6240\u4ee5\u5728\u7b2c\u4e00\u95ee\u662f\u6211\u4eec\u5728\u8fde\u8fb9\u65f6\u5c31\u5e94\u8be5\u628a\u539f\u6709\u8fb9\u7684\u8d39\u7528\u7f6e\u4e3a0\u3001\n- \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728\u6240\u4ee5\u539f\u6709\u8fb9\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff08\u5176\u5b9e\u7528k\u4e5f\u6ca1\u6bdb\u75c5\uff09\u8d39\u7528\u4e3aw[i]\u7684\u8fb9\uff0c\u7528\u4e8e\u6269\u5145\u3002\n- \u6700\u540e\uff0c\u522b\u5fd8\u4e86\u8bbe\u4e2a\u8d85\u6e90\uff0c\u54111\u53f7\u70b9\u8fde\u4e2a\u5bb9\u91cf\u4e3ak\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u7528\u4e8e\u9650\u5236\u6269\u5145\u6570\u91cf\u3002\n\n\u6700\u540e\u4e0a\u4ee3\u7801\u54af\uff01~~\u6211\u771f\u7684\u662f\u628a\u4e24\u4e2a\u6a21\u677f\u62fc\u8d77\u6765\u7684\uff0c\u6240\u4ee5\u4ee3\u7801\u5de8\u4e11~~\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#define MAXN 10005\n#define MAXM 15000\nusing namespace std;\nint head[MAXN],next[MAXM*2],to[MAXM*2],w[MAXM*2],cost[MAXM*2],cur[MAXN];\nint n,m,S,T,K;\nint cnt=-1;\nint deep[MAXN];\nint pre1[MAXN],pre2[MAXN],low[MAXN],dis[MAXN],ansc=0;\nvoid link(int a,int b,int c,int d){\n     cnt++;\n     next[cnt]=head[a];\n     w[cnt]=c;\n     cost[cnt]=d;\n     to[cnt]=b;\n     head[a]=cnt;\n     cnt++;\n     next[cnt]=head[b];\n     w[cnt]=0;\n     cost[cnt]=-d;\n     to[cnt]=a;\n     head[b]=cnt;\n}\nbool bfs(){\n     memset(deep,0,sizeof(deep));\n     queue<int> q;\n     while(!q.empty())q.pop();\n     q.push(S);\n     deep[S]=1;\n     while(!q.empty()){\n                       int now=q.front();\n                       q.pop();\n                       for(int i=head[now];i!=-1;i=next[i]){\n                               if (w[i]&&!deep[to[i]]){\n                                                       deep[to[i]]=deep[now]+1;\n                                                       q.push(to[i]);\n                               }\n                       }\n     }\n     if (deep[T])return 1;else return 0;\n}\nint dinic(int now,int last){\n    if (now==T||!last)return last;\n    int ret=0;\n    for(int i=cur[now];i!=-1;i=next[i]){\n            if(deep[to[i]]-1==deep[now]&&w[i]){\n                                               int zgl=dinic(to[i],min(w[i],last-ret));\n                                               if (zgl){\n                                                        w[i]-=zgl;\n                                                        w[i^1]+=zgl;     \n                                                        ret+=zgl;\n                                               }\n            }\n            cur[now]=i;\n    }\n    return ret;\n}\nbool spfa(){\n     queue<int>q;\n     fill(dis,dis+MAXN-1,66666666);\n     int vis[MAXN];\n     memset(vis,0,sizeof(vis));\n     q.push(S);\n     dis[S]=0;\n     vis[S]=1;\n     low[S]=66666666;\n     while(!q.empty()){\n                       int now=q.front();\n                       vis[now]=0;\n                       q.pop();\n                       for(int i=head[now];i!=-1;i=next[i]){\n                               if (w[i]>0&&cost[i]+dis[now]<dis[to[i]]){\n                                                                        dis[to[i]]=dis[now]+cost[i];\n                                                                        low[to[i]]=min(low[now],w[i]);\n                                                                        pre1[to[i]]=now;\n                                                                        pre2[to[i]]=i;\n                                                                        if (!vis[to[i]]){\n                                                                                         vis[to[i]]=1;\n                                                                                         q.push(to[i]);\n                                                                        }\n                               }\n                       }\n     }\n     return dis[T]!=66666666;\n}\nvoid work(){\n     while(spfa()){\n                   int now=T;\n                   while(now!=S){\n                                 int y=pre2[now];\n                                 w[y]-=low[T];\n                                 w[y^1]+=low[T];\n                                 now=pre1[now];\n                   }\n                   ansc+=low[T]*dis[T];\n     }\n}\nint main(){\n    cin>>n>>m>>K;\n    S=1;T=n;\n    memset(head,-1,sizeof(head));\n    int a[MAXM],b[MAXM],c[MAXM],d[MAXM];\n    for(int i=1;i<=m;i++){\n            scanf(\"%d%d%d%d\",&a[i],&b[i],&c[i],&d[i]);\n            link(a[i],b[i],c[i],0);\n    }\n    int ans=0;\n    while(bfs()){\n                 memcpy(cur,head,sizeof(cur));\n                 ans+=dinic(S,9999999);\n    }\n    cout<<ans<<\" \";\n    for(int i=1;i<=m;i++){\n            link(a[i],b[i],K,d[i]);\n    }\n    S=0;link(S,1,K,0);\n    work();\n    cout<<ansc;\n    return 0;\n}\n\n```",
        "postTime": 1548840970,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u5b9e\u8bdd\u8bf4:\n\n\u8fd9\u9898\u662f $ZJOI$ \u7684\u5f88\u4e0d\u6b63\u5e38\n\n\n\u6b64\u9898\u662f\u8d3c\u5bb9\u6613\u60f3\u7684,\u7b2c\u4e00\u95ee\u65e0\u8111\u7684\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u6216\u8005\u8d39\u7528\u6d41,\u968f\u4fbf\u4f60\u3002\u7b2c\u4e8c\u95ee\u8981\u6c42\u6211\u4eec\u628a\u6d41\u91cf\u53d8\u4e3a $k+\\max flow$ (\u5176\u4e2d $\\max flow$ \u4e3a\u4e0a\u4e00\u6b21\u7684\u6700\u5927\u6d41)\u3002\u6211\u4eec\u53ef\u4ee5\u641e\u4e00\u4e2a\u8fd9\u6837\u7684\u673a\u5236:\n\n- \u6211\u539f\u672c\u6709\u6d41\u91cf $flow[i]$,\u8fd9\u4e9b\u6d41\u91cf\u662f\u4e0d\u7528\u94b1\u7684\n- \u6211\u73b0\u5728\u8981\u6269\u5145\u4e00\u4e9b,\u6700\u591a\u6269\u5145\u5230 $\\max longint$,\u8fd9\u4e9b\u6d41\u91cf\u6bcf\u4e00\u4e2a\u6d41\u9700\u8981 $cost[i]$\n\n\u8fde\u4e24\u6b21\u8fb9\u5c31\u597d\u5566...\n\n- $add(l[i],r[i],f[i],0);$\n- $add(l[i],r[i],maxlongint,c[i]);$\n\n\u6700\u540e\u4f60\u5efa\u7acb\u4e00\u4e2a\u7b2c\u4e8c\u6c47\u70b9,\u8ba9\u6c47\u70b9\u8fde\u7b2c\u4e8c\u6c47\u70b9,\u6d41\u91cf\u4e3a $k+\\max flow$ \u5c31\u597d\u5566\u3002\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    from,reach,next,value,cost:array[-1..50010] of longint;\n    dis,pre,last,flow:array[-1..50010] of int64;\n    queue:array[-1..50010] of longint;\n    cnt:array[-1..8100] of longint;\n    vis:array[-1..8100] of boolean;\n    l,r,c,f:array[-1..51000] of longint;\n    n,m,i,j,k,tot,now,sink,source:longint;\n    maxflow,mincost:int64;\n\nprocedure add(x,y,sum_1,sum_2:longint);\nbegin\n    inc(tot); from[tot]:=x; reach[tot]:=y; value[tot]:=sum_1; cost[tot]:= sum_2; next[tot]:=cnt[x]; cnt[x]:=tot;\n    inc(tot); from[tot]:=y; reach[tot]:=x; value[tot]:=0    ; cost[tot]:=-sum_2; next[tot]:=cnt[y]; cnt[y]:=tot;\nend;\n\nfunction spfa:boolean;\nvar head,tail,now,i:longint;\nbegin\n    filldword(dis,sizeof(dis) div 4,maxlongint);\n    filldword(flow,sizeof(flow) div 4,maxlongint);\n    filldword(vis,sizeof(vis) div 4,0);\n    head:=1; tail:=1; queue[1]:=source; vis[source]:=True; dis[source]:=0; pre[sink]:=-1;\n    while head<=tail do\n    begin\n        now:=queue[head]; vis[now]:=False; inc(head);\n        i:=cnt[now];\n        while i<>-1 do\n        begin\n            if (value[i]>0)and(dis[reach[i]]>dis[now]+cost[i]) then\n            begin\n                dis[reach[i]]:=dis[now]+cost[i];\n                pre[reach[i]]:=now;\n                last[reach[i]]:=i;\n                flow[reach[i]]:=min(flow[now],value[i]);\n                if vis[reach[i]]=False then\n                begin\n                    vis[reach[i]]:=True;\n                    inc(tail); queue[tail]:=reach[i];\n                end;\n            end;\n            i:=next[i];\n        end;\n    end;\n    if pre[sink]=-1 then exit(False); exit(True);\nend;\n\nprocedure MincostMaxflow;\nbegin\n    maxflow:=0; mincost:=0; now:=0;\n    while (spfa) do\n    begin\n        now:=sink;\n        inc(maxflow,flow[sink]);\n        inc(mincost,flow[sink]*dis[sink]);\n        while now<>source do\n        begin\n            dec(value[last[now]],flow[sink]);\n            inc(value[last[now] xor 1],flow[sink]);\n            now:=pre[now];\n        end;\n    end;\nend;\n\nprocedure Construction_I;\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(cost,sizeof(cost),0);\n    fillchar(next,sizeof(next),0);\n    read(n,m,k); source:=1; sink:=n;\n    for i:=1 to m do begin read(l[i],r[i],f[i],c[i]); add(l[i],r[i],f[i],0); end;\n    MincostMaxflow; write(maxflow,' ');\n\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(cost,sizeof(cost),0);\n    fillchar(next,sizeof(next),0);\n   \tfor i:=1 to m do\n    begin\n    \tadd(l[i],r[i],f[i],0);\n        add(l[i],r[i],maxlongint,c[i]);\n    end;\n   \tinc(sink); add(sink-1,sink,maxflow+k,0);\n   \tMincostMaxflow; write(mincost);\nend;\n\n\nbegin\n    Construction_I;\nend.\n```",
        "postTime": 1541824776,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u597d\u4e45\u6ca1\u5199\u9898\u89e3\u4e86\uff0c\u521a\u597d\u5728\u672c\u9898\u53d1\u660e\u4e86\u4e00\u4e2a\u6b6a\u95e8\u90aa\u9053\u7684\u8e69\u811a\u89e3\u6cd5\uff0c\u5c31\u6765\u53d1\u4e00\u4e2a\u3002  \n\u6211\u7684\u601d\u8def\uff1a\u9996\u5148\u6309\u8f93\u5165\u5efa\u56fe\uff0c\u6c42\u6700\u5927\u6d41F\u3002\u63a5\u7740\u63a8\u5012\u91cd\u5efa\uff0c\u628a\u539f\u56fe\u7684\u6bcf\u4e00\u6761\u8fb9\u5efa\u4e3a\u4e24\u6761\uff0c\u5206\u522b\u662f{u,v,c,0}\u548c{u,v,INF,w}\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4eces\u5230t\u7684\u6700\u5927\u6d41\u4f1a\u53d8\u4e3aINF\u3002\u7136\u540e\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6bcf\u6b21\u6cbf\u7740\u6700\u77ed\u8def\u589e\u5e7f\u4e00\u6761\u8fb9\u3002\u53ea\u8981\u628a\u8be5\u51fd\u6570\u8fd0\u884c\uff08F+K\uff09\u6b21\uff0c\u8d39\u7528\u4e4b\u548c\u5373\u4e3a\u7b2c\u4e8c\u95ee\u7b54\u6848\u3002  \n\u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u8fd9\u4e2a\u529e\u6cd5\u65e2\u8822\u4e14\u6162\uff0c\u4e0e\u5176\u4ed6\u9898\u89e3\u7684\u529e\u6cd5\u4e0d\u5728\u4e00\u4e2a\u6863\u6b21\u4e0a\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6570\u636e\u6bd4\u8f83\u6c34\uff0c\u8fd8\u662f\u53ef\u4ee5\u975e\u5e38\u5b89\u5168\u7684\u901a\u8fc7\u672c\u9898\u3002  \n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u540c\u6837\u662f\u56db\u4e0d\u50cf\u7684\u8e69\u811a\u8d27\u8272\uff1aspfa\u5bfb\u8def\u7684EK\uff0c\u6df7\u4e71\u7684\u5efa\u56fe\u7b49\u7b49\uff0c\u60e8\u4e0d\u5fcd\u7779\u3002\n```\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n#include <utility>\n\n#pragma warning(disable:4996)\n#define INF 2000000005//2 * 10^9\n#define lowbit(a) ((a)&-(a))\ninline long long max(long long a, long long b)\n{\n\treturn a>b ? a : b;\n}\ninline long long min(long long a, long long b)\n{\n\treturn a<b ? a : b;\n}\n\nconst int MAXN = 1005;\n\nstruct node {\n\tint to;\n\tint cp;\n\tint w;\n\tnode *next;\n};\n\nint c[100000], bak[100000], cs;\n\nvoid add(node *&head, int to, int C, int w)\n{\n\tnode *p = new(node);\n\tp->to = to;\n\tp->cp = cs;\n\tc[cs++] = C;\n\tp->w = w;\n\tp->next = head;\n\thead = p;\n}\n\nnode *edge[MAXN];\nint d[MAXN], f[MAXN];\nnode *path[MAXN];\n\nvoid addedge(int u, int v, int c, int w)\n{\n\tadd(edge[u], v, c, w);\n\tadd(edge[v], u, 0, -w);\n}\n\nbool relax(int v, node *p)\n{\n\tif (c[p->cp] && d[p->to] > d[v] + p->w)\n\t{\n\t\td[p->to] = d[v] + p->w;\n\t\tf[p->to] = v;\n\t\tpath[p->to] = p;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nint q[100000], k;\nbool inq[MAXN];\n\nvoid prepare(int s)\n{\n\tk = 0;\n\tfor (int i = 0; i < MAXN; i++)\n\t\td[i] = INF;\n\tmemset(inq, 0, sizeof(inq));\n\td[s] = 0;\n\tq[k++] = s;\n\tinq[s] = true;\n}\n\nvoid spfa(int s)\n{\n\tint i;\n\n\tprepare(s);\n\tfor (i = 0; i < k; i++)\n\t{\n\t\tint v = q[i];\n\t\tinq[v] = false;\n\t\tfor (node *p = edge[v]; p; p = p->next)\n\t\t\tif (relax(v, p) && !inq[p->to])\n\t\t\t{\n\t\t\t\tq[k++] = p->to;\n\t\t\t\tinq[p->to] = true;\n\t\t\t}\n\t}\n}\n\nint flow(int s, int v, int lim)\n{\n\tif (s == v)\n\t\treturn lim;\n\tint t = flow(s, f[v], min(lim, c[path[v]->cp]));\n\tc[path[v]->cp] -= t;\n\tc[path[v]->cp ^ 1] += t;\n\treturn t;\n}\n\nint max_flow(int s, int t)//\u53e4\u602a\u7684EK\n{\n\tint ans = 0;\n\twhile (1)\n\t{\n\t\tspfa(s);\n\t\tif (d[t] == INF)\n\t\t\tbreak;\n\t\tans += flow(s, t, INF);\n\t}\n\treturn ans;\n}\n\nint get_cost(int s, int v)\n{\n\tif (v == s)\n\t\treturn 0;\n\tc[path[v]->cp] -= 1;\n\tc[path[v]->cp ^ 1] += 1;\n\treturn get_cost(s, f[v]) + path[v]->w;\n}\n\nint expand(int s, int t)//\u5897\u5e7f\u4e00\u5355\u4f4d\u7684\u8def\u5f84\n{\n\tspfa(s);\n\treturn get_cost(s, t);\n}\n\nint M, N, K;\nnode *edge2[MAXN];\n\nint main()\n{\n\tint i, j, u, v, C, w;\n\n\tscanf(\"%d %d %d\", &N, &M, &K);\n\n\tfor (i = 0; i < M; i++)\n\t{\n\t\tscanf(\"%d %d %d %d\", &u, &v, &C, &w);\n\t\taddedge(u, v, C, w);\n\t}\n\tmemcpy(bak, c, sizeof(bak));\n\n\tint cost = 0;\n\tint fl = max_flow(1, N);//\u7b2c\u4e00\u95ee\n\tmemcpy(c, bak, sizeof(c));\n\n\tfor (i = 1; i <= N; i++)\n\t\tfor (node *p = edge[i]; p; p = p->next)\n\t\t\tif (p->w > 0)\n\t\t\t{\n\t\t\t\taddedge(i, p->to, INF, p->w);\n\t\t\t\taddedge(i, p->to, c[p->cp], 0);\n\t\t\t}\n\n\tfor (i = 0; i < fl + K; i++)\n\t\tcost += expand(1, N);//\u7b2c\u4e8c\u95ee\n\n\tprintf(\"%d %d\", fl, cost);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```",
        "postTime": 1522249704,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u9898\u76ee\n=\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2604)\n\n\u9898\u89e3\n=\n\n\u7b2c\u4e00\u95ee\u6700\u5927\u6d41\uff0c\u5728\u5efa\u56fe\u7684\u8fc7\u7a0b\u4e2d\u628a\u8d39\u7528\u8bbe\u4e3a0\n\u7b2c\u4e8c\u95ee\u628a\u8fb9\u91cd\u65b0\u518d\u539f\u56fe\u4e0a\u8fde\u4e00\u904d\uff0c\u5bb9\u91cf\u4e3ainf\uff08\u5b9e\u9645\u4e0a\u4e3ak\u5c31\u53ef\u4ee5\uff09\uff0c\u8d39\u7528\u4e3a\u8f93\u5165\uff0c\u8bbe\u7f6e\u65b0\u7684\u6e90\u70b9\u5411\u539f\u6765\u7684\u6e90\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ak\u3001\u8d39\u7528\u4e3a0\uff1b\u8fd9\u6837\u518d\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u65f6\u5019\u5c31\u4f1a\u4f18\u5148\u7ecf\u8fc7\u6b8b\u7559\u7f51\u7edc\u7684\u8fb9\uff08\u56e0\u4e3a\u5176\u8d39\u7528\u4e3a0\uff09\u56e0\u6b64\u6c42\u51fa\u6765\u7684\u5c31\u662f\u6700\u5c0f\u6269\u5bb9\u8d39\u7528\u3002\n\n\u4ee3\u7801\n=\n\n\u70b9[\u8fd9\u91cc](http://blog.csdn.net/A_Comme_Amour/article/details/79642929)\n\n\u603b\u7ed3\n=\n\n\u6ce8\u610f\u9006\u5411\u601d\u7ef4\uff1b\n\u603b\u7ed3\u6b8b\u4f59\u7f51\u7edc\u7684\u5e94\u7528\uff0c\u53ef\u4ee5\u641e\u4e00\u4e9b\u4e8b\u60c5\u2014\u2014\u8f93\u51fa\u65b9\u6848\uff0c\u5728\u539f\u56fe\u4e2d\u52a0\u8fb9\u3001\u6c42\u6700\u5c0f\u6269\u5bb9\u8d39\u7528\u7b49",
        "postTime": 1521623889,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u52a0\u8d39\u7528\u6d41\uff0c\u697c\u4e0b\u795e\u7287\u9898\u89e3\uff08SAP\uff09\u8bf4\u660e\u5f88\u6e05\u695a\u3002\n\n\u8865\u5145\u4e24\u70b9\uff1a\u65b0\u8fb9\u5bb9\u91cf\u4e0d\u7528INF\uff0cK\u5c31\u591f\u4e86\uff1b\u5176\u5b9e\u4e0d\u9700\u8981\u628aABCW\u5b58\u4e0b\u6765\uff0c\u53ea\u5b58W\u5c31\u591f\u4e86\uff0c\u5177\u4f53\u5efa\u56fe\u89c1\u4ee3\u7801main\u51fd\u6570\u3002\n\n\u4ee3\u7801\u4e2d\u4f7f\u7528Dinic\u548cSPFAMCMF\uff0c\u5404\u81ea\u4e09\u4e2a\u51fd\u6570\u3002\n\n\n\u54e6\uff0c\u5b9e\u6d4b\uff0c**\u70b9\u6570\u662f5000\u800c\u4e0d\u662f1000\uff01\u70b9\u6570\u662f5000\uff01\uff01\uff01**\n\n\n\n\n\n\n\n\n\n    \n\n\n        \n\n\n\n        \n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 5000\n#define MAXM 80000\n#define MEMINF 0x3f\n#define INF 0x3f3f3f3f \nstruct Edge\n{\n    int to,nex,c,w;\n    Edge(){}\n    Edge(int _to, int _nex, int _c, int _w):to(_to),nex(_nex),c(_c),w(_w){}    \n};\nEdge e[MAXM+5];\nint first[MAXN+5], q[MAXN+5], dis[MAXN+5], pre[MAXN+5], level[MAXN+5], cur[MAXN+5], W[MAXN+5], tot, S, T, N, M, K, ANSF, ANSC;\nbool book[MAXN+5];\ninline void Add(int a, int b, int c, int w)\n{\n    e[tot] = Edge(b,first[a],c,w);\n    first[a] = tot++;\n    e[tot] = Edge(a,first[b],0,-w);\n    first[b] = tot++;\n    return; \n}\n// Dinic\ninline bool BFS()\n{\n    memset(level,0,sizeof(level));\n    q[0] = S, level[S] = 1;\n    for(register int head = 0, tail = 1, t, u; head != tail; )\n        for(t = q[head++], head %= MAXN, u = first[t]; u+1; u = e[u].nex)\n            if(e[u].c > 0 && !level[e[u].to])\n            {\n                level[e[u].to] = level[t] + 1;\n                q[tail++] = e[u].to, tail %= MAXN;\n                if(e[u].to == T)\n                    return true;\n            }\n    return false;\n}\nint DFS(int p, int f)\n{\n    if(p == T)\n        return f;\n    int tag = 0;\n    for(int &u = cur[p], del; u+1; u = e[u].nex)\n        if(e[u].c > 0 && level[e[u].to] == level[p]+1)\n        {\n            del = DFS(e[u].to,min(e[u].c,f-tag));\n            e[u].c -= del, e[u^1].c += del, tag += del;\n            if(tag == f)\n                return tag; \n        }\n    return tag;\n}\nvoid Dinic()\n{\n    for(register int i; BFS(); ANSF += DFS(S,INF))\n        for(i = 0; i <= N; i++)\n            cur[i] = first[i];\n    return;\n}\n// MCMF\ninline bool SPFA()\n{\n    memset(dis,MEMINF,sizeof(dis));    \n    q[0] = S, dis[S] = 0, book[S] = true;\n    for(register int head = 0, tail = 1, t, u; head != tail; book[t] = false)\n        for(t = q[head++], head %= MAXN, u = first[t]; u+1; u = e[u].nex)\n            if(e[u].c > 0 && dis[e[u].to] > dis[t] + e[u].w)\n            {\n                dis[e[u].to] = dis[t] + e[u].w, pre[e[u].to] = u;\n                if(!book[e[u].to])\n                    book[e[u].to] = true, q[tail++] = e[u].to, tail %= MAXN; \n            }\n    return dis[T] != INF;\n}\ninline void CALC()\n{\n    int del = INF, cost = 0;\n    for(register int p = T, u = pre[p]; p != S; p = e[u^1].to, u = pre[p])\n        del = min(del,e[u].c);\n    for(register int p = T, u = pre[p]; p != S; p = e[u^1].to, u = pre[p])\n        e[u].c -= del, e[u^1].c += del, cost += del*e[u].w;\n    ANSC += cost;\n    return;\n}\ninline void MCMF()\n{\n    for(; SPFA(); CALC());\n    return;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&N,&M,&K), S = 1, T = N, memset(first,-1,sizeof(first));\n    for(int i = 1, a, b, c; i <= M; i++)\n        scanf(\"%d%d%d%d\",&a,&b,&c,W+i), Add(a,b,c,0);\n    Dinic(), printf(\"%d \",ANSF);\n    for(register int i = 0, j = 1; j <= M; i += 2, j++)\n        Add(e[i^1].to,e[i].to,K,W[j]);\n    S = 0, Add(0,1,K,0), MCMF(), printf(\"%d\\n\",ANSC);\n     return 0;\n}\n```",
        "postTime": 1485262654,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    },
    {
        "content": "\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n\n\u6211\u7528\u7684\u662fdinic + MCMF\n\nISAP\u5feb\u4e00\u4e9b\uff0c\u4f46\u4e00\u822cdinic\u5c31\u8db3\u591f\u4e86\n\n\u4e0b\u9762\u770bc++\u4ee3\u7801\uff1a\n\n/*************************************************************************\n\n    > Author: wzw-cnyali\n    > Created Time: 2017/2/11 14:44:28\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define mem(a, b) memset((a), b, sizeof(a))\nconst int Size = 100010;\nconst int inf = 0x3f3f3f3f;\nint read()\n{\n    int sum = 0, fg = 1; char c = getchar();\n    while(c < '0' || c > '9') { if (c == '-') fg = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return sum * fg;\n}\nint to[Size], be[Size], nxt[Size], c[Size], w[Size], e;\nstruct node{\n    int x, y, c, w;\n}edge[Size];\nvoid add(int x, int y, int z, int v)\n{\n    to[e] = y;\n    nxt[e] = be[x];\n    be[x] = e;\n    c[e] = z;\n    w[e] = v;\n    e++;\n}\nint dis[Size];\nint Start, End;\nint bfs()\n{\n    queue <int> q;\n    mem(dis, -1);\n    dis[End] = 0;\n    q.push(End);\n    while(!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for(int i = be[u]; ~i; i = nxt[i])\n        {\n            int v = to[i];\n            if(dis[v] == -1 && c[i ^ 1])\n            {\n                dis[v] = dis[u] + 1;\n                q.push(v);\n            }\n        }\n    }\n    return ~dis[Start];\n}\nint find_max_flow(int x, int low)\n{\n    if(x == End) return low;\n    int k;\n    for(int i = be[x]; ~i; i = nxt[i])\n    {\n        int y = to[i];\n        if(dis[y] == dis[x] - 1 && c[i] && (k = find_max_flow(y, min(low, c[i]))))\n        {\n            c[i] -= k;\n            c[i ^ 1] += k;\n            return k;\n        }\n    }\n    return 0;\n}\nint dinic()\n{\n    int k, ans = 0;\n    while(bfs())\n    {\n        while((k = find_max_flow(Start, inf)))\n        {\n            ans += k;\n        }\n    }\n    return ans;\n}\nint pre[Size];\nint vis[Size], num[Size];\nint spfa()\n{\n    queue <int> q;\n    mem(dis, inf);\n    mem(pre, -1);\n    mem(vis, 0);\n    q.push(Start);\n    vis[Start] = 1;\n    dis[Start] = 0;\n    while(!q.empty())\n    {\n        int x = q.front();\n        vis[x] = 0;\n        q.pop();\n        for(int i = be[x]; ~i; i = nxt[i])\n        {\n            int y = to[i];\n            if(c[i])\n            {\n                if(dis[y] > dis[x] + w[i])\n                {\n                    dis[y] = dis[x] + w[i];\n                    pre[y] = x;\n                    num[y] = i;\n                    if(!vis[y])\n                    {\n                        q.push(y);\n                        vis[y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    return dis[End] < inf;\n}\nint calc(int k)\n{\n    int sum = 0, flow = k;\n    for(int i = End; ~pre[i]; i = pre[i])\n    {\n        flow = min(flow, c[num[i]]);\n    }\n    for(int i = End; ~pre[i]; i = pre[i])\n    {\n        sum += w[num[i]] * flow;\n        c[num[i]] -= flow;\n        c[num[i] ^ 1] += flow;\n    }\n    return sum;\n}\nint min_flow(int k)\n{\n    int ans = 0;\n    while(spfa())\n    {\n        ans += calc(k);\n    }\n    return ans;\n}\nvoid init()\n{\n    mem(be, -1);\n    e = 0;\n}\nint main()\n{\n    init();\n    int n = read(), m = read(), k = read();\n    Start = 1, End = n;\n    REP(i, 1, m)\n    {\n        edge[i].x = read(), edge[i].y = read(), edge[i].c = read(), edge[i].w = read();\n        add(edge[i].x, edge[i].y, edge[i].c, 0);\n        add(edge[i].y, edge[i].x, 0, 0);\n    }\n    printf(\"%d \", dinic());\n    REP(i, 1, m)\n    {\n        add(edge[i].x, edge[i].y, inf, edge[i].w);\n        add(edge[i].y, edge[i].x, 0, -edge[i].w);\n    }\n    Start = n + 1;\n    add(Start, 1, k, 0);\n    printf(\"%d\\n\", min_flow(k));\n    return 0;\n}\n\n```",
        "postTime": 1488686544,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2604 \u3010[ZJOI2010]\u7f51\u7edc\u6269\u5bb9\u3011"
    }
]