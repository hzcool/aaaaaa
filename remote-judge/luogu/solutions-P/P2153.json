[
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/)\n\n---\n\n## Description\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 2153](https://www.luogu.org/problemnew/show/P2153)\n\nElaxia \u6700\u8fd1\u8ff7\u604b\u4e0a\u4e86\u7a7a\u624b\u9053\uff0c\u4ed6\u4e3a\u81ea\u5df1\u8bbe\u5b9a\u4e86\u4e00\u5957\u5065\u8eab\u8ba1\u5212\uff0c\u6bd4\u5982\u4fef\u5367\u6491\u3001\u4ef0\u5367\u8d77\u5750\u7b49 \u7b49\uff0c\u4e0d\u8fc7\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4ed6\u575a\u6301\u4e0b\u6765\u7684\u53ea\u6709\u6668\u8dd1\u3002\u73b0\u5728\u7ed9\u51fa\u4e00\u5f20\u5b66\u6821\u9644\u8fd1\u7684\u5730\u56fe\uff0c\u8fd9\u5f20\u5730\u56fe\u4e2d\u5305\u542b $n$ \u4e2a\u5341\u5b57\u8def\u53e3\u548c $m$ \u6761\u8857\u9053\uff0cElaxia \u53ea\u80fd\u4ece\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u8dd1\u5411\u53e6\u5916\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u8857\u9053\u4e4b\u95f4\u53ea\u5728\u5341\u5b57\u8def\u53e3\u5904\u76f8\u4ea4\u3002Elaxia \u6bcf\u5929\u4ece\u5bdd\u5ba4\u51fa\u53d1\u8dd1\u5230\u5b66\u6821\uff0c\u4fdd\u8bc1\u5bdd\u5ba4\u7f16\u53f7\u4e3a $1$\uff0c\u5b66\u6821\u7f16\u53f7\u4e3a $n$\u3002Elaxia \u7684\u6668\u8dd1\u8ba1\u5212\u662f\u6309\u5468\u671f\uff08\u5305\u542b\u82e5\u5e72\u5929\uff09\u8fdb\u884c\u7684\uff0c\u7531\u4e8e\u4ed6\u4e0d\u559c\u6b22\u8d70\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u6240\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6bcf\u5929\u7684\u6668\u8dd1\u8def\u7ebf\u90fd\u4e0d\u4f1a\u76f8\u4ea4\uff08\u5728\u5341\u5b57\u8def\u53e3\u5904\uff09\uff0c\u5bdd\u5ba4\u548c\u5b66\u6821\u4e0d\u7b97\u5341\u5b57\u8def\u53e3\u3002Elaxia \u8010\u529b\u4e0d\u592a\u597d\uff0c\u4ed6\u5e0c\u671b\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8dd1\u7684\u8def\u7a0b\u5c3d\u91cf\u77ed\uff0c\u4f46\u662f\u53c8\u5e0c\u671b\u8bad\u7ec3\u5468\u671f\u5305\u542b\u7684\u5929\u6570\u5c3d\u91cf\u957f\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 200$\uff0c$1\\le m\\le 2\\times 10^4$\n\n------\n\n## Solution\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u9700\u8981\u6c42**\u8def\u7a0b\u6700\u77ed\uff0c\u5929\u6570\u5c3d\u91cf\u957f**\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651**\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41**\uff0c\u5176\u4e2d\u8def\u7a0b\u4e3a\u8d39\u7528\uff0c\u5929\u6570\u4e3a\u6d41\u91cf\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u53ea\u80fd\u88ab\u8bbf\u95ee $1$ \u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u8fdb\u884c\u62c6\u70b9\uff0c\u5c06 $i$ \u62c6\u6210 $i_1$ \u548c $i_2$\uff0c\u5176\u4e2d $i_1$ \u548c $i_2$ \u4e4b\u95f4\u8fde\u8fb9 $(i_1,i_2,1,0)$\uff08\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\uff09\uff0c\u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u6bcf\u6761\u8fb9 $(u,v,w)$ \u8fde\u8fb9 $(u_2,v_1,1,w)$ \u548c\u5176\u53cd\u5411\u8fb9 $(v_1,u_2,0,-w)$\u3002\n\n\u53c8\u56e0\u4e3a $1$ \u548c $n$ \u53ef\u4ee5\u591a\u6b21\u7ecf\u8fc7\uff0c\u90a3\u4e48\u6e90\u70b9\u548c\u6c47\u70b9\u5206\u522b\u4e3a $s_2$ \u548c $t_1$\uff0c\u7136\u540e\u76f4\u63a5\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(nmf)$\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nconst int N=4e2+5,M=1e5+5;\nconst int INF=0x3f3f3f3f;\nint n,m,tot=1,lnk[N],cnr[N],ter[M],nxt[M],cap[M],cost[M],dis[N],ret;\nbool vis[N];\n\nvoid add(int u,int v,int w,int c) {\n    ter[++tot]=v,nxt[tot]=lnk[u],lnk[u]=tot,cap[tot]=w,cost[tot]=c;\n}\nvoid addedge(int u,int v,int w,int c) {\n    add(u,v,w,c),add(v,u,0,-c);\n}\nint spfa(int s,int t) {\n    memset(dis,0x3f,sizeof(dis));\n    memcpy(cnr,lnk,sizeof(lnk));\n    std::queue<int> q;\n    q.push(s),dis[s]=0,vis[s]=1;\n    while(!q.empty()) {\n        int u=q.front(); q.pop(),vis[u]=0;\n        for(int i=lnk[u];i;i=nxt[i]) {\n            int v=ter[i];\n            if(cap[i]&&dis[v]>dis[u]+cost[i]) {\n                dis[v]=dis[u]+cost[i];\n                if(!vis[v]) q.push(v),vis[v]=1;\n            }\n        }\n    }\n    return dis[t]!=INF;\n}\nint dfs(int u,int t,int flow) {\n    if(u==t) return flow;\n    vis[u]=1;\n    int ans=0;\n    for(int i=cnr[u];i;i=nxt[i]) {\n        cnr[u]=i;\n        int v=ter[i];\n        if(!vis[v]&&cap[i]&&dis[v]==dis[u]+cost[i]) {\n            int x=dfs(v,t,std::min(cap[i],flow-ans));\n            if(x) ret+=x*cost[i],cap[i]-=x,cap[i^1]+=x,ans+=x;\n        }\n    }\n    vis[u]=0;\n    return ans;\n}\nint mcmf(int s,int t) {\n    int ans=0;\n    while(spfa(s,t)) {\n        int x;\n        while((x=dfs(s,t,INF))) ans+=x;\n    }\n    return ans;\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    while(m--) {\n        int u,v,c;\n        scanf(\"%d%d%d\",&u,&v,&c);\n        addedge(u+n,v,1,c);\n    }\n    for(int i=1;i<=n;++i) addedge(i,i+n,1,0);\n    int s=1+n,t=n;\n    int ans=mcmf(s,t);\n    printf(\"%d %d\\n\",ans,ret);\n    return 0;\n}\n```",
        "postTime": 1545924360,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u7ea2\u679c\u679c\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\n\n\u4ecex\u5230y\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff08\u56e0\u4e3a\u8def\u53ea\u80fd\u8d70\u4e00\u904d\uff09\uff0c\u6743\u503c\u4e3ak\u3002\n\n\u4f46\u662f\u8981\u6ce8\u610f\u4e00\u70b9\u5c31\u662f\u4e0d\u80fd\u8d70\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u6240\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6bcf\u5929\u7684\u6668\u8dd1\u8def\u7ebf\u90fd\u4e0d\u4f1a\u76f8\u4ea4\uff08\u5728\u5341\u5b57\u8def\u53e3\u5904\uff09\n\n\u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u6743\u503c\u4e3a0\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u8bbf\u95ee\u4e00\u904d\u5566233\n\n\u5bf9\u4e8e\u8d77\u70b9\u4e3a1\u6216\u8005\u662f\u7ec8\u70b9\u4e3an\u7684\u8def\u8981\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5b66\u6821\u548c\u5bbf\u820d\u4e0d\u89c6\u4e3a\u5341\u5b57\u8def\u53e3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>  \n#include <queue>  \n#include <string.h>  \n#include <cstdio>\nusing namespace std;  \nint maxData = 0x7fffffff; \nqueue<int> dl;\nint head[5001],cost[100001],net[100001],to[100001],cap[100001];\nint cnt=1;\nint tot=0; \nvoid add(int x,int y,int c,int z)\n{\n    to[++cnt]=y;\n    cost[cnt]=z;\n    cap[cnt]=c;\n    net[cnt]=head[x];\n    head[x]=cnt;\n}\nint flow[5001];\nint pre[5001];\nint xb[5001];\nint mflow=0;\nint mcost=0;\nint dis[5001];\nint f[5001];\nint n,m;\nvoid make_map(int from,int ds,int cost1)\n{\n    if(from==1)//\u5f53\u8d77\u70b9\u4e3a1\u65f6\uff0c\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u5165\u70b9\u8fde\u4e00\u6761\u8fb9\n    {\n        add(1,ds,1,cost1);\n        add(ds,1,0,-cost1);\n        return;\n    }\n    if(ds==n)//\u5f53\u7ec8\u70b9\u4e3an\u65f6\uff0c\u4ece\u8d77\u70b9\u7684\u51fa\u70b9\u5230n\u8fde\u4e00\u6761\u8fb9\n    {\n        add(from+n,n,1,cost1);\n        add(n,from+n,0,-cost1);\n        return;\n    }\n    add(from+n,ds,1,cost1);//\u8d77\u70b9\u4e0d\u662f1\uff0c\u7ec8\u70b9\u4e0d\u662fn\uff0c\u4ece\u8d77\u70b9\u7684\u51fa\u70b9\u5230\u7ec8\u70b9\u7684\u5165\u70b9\u8fde\u4e00\u6761\u8fb9\n    add(ds,from+n,0,-cost1);\n    return;\n}\nint BFS(int s,int t)\n{\n    memset(dis,127,sizeof(dis));\n    memset(f,0,sizeof(f));\n    int INF=dis[0];\n    while(!dl.empty())\n     dl.pop();\n    for(int i=1;i<=n;i++)\n     pre[i]=-1;\n    f[s]=1;\n    dis[s]=0;\n    pre[s]=0;\n    flow[s]=maxData;\n    dl.push(s);\n    while(!dl.empty())\n    {\n        int dd=dl.front();\n        dl.pop();\n        f[dd]=0;\n        for(int i=head[dd];i;i=net[i])\n        {\n            int tmp=to[i];\n            if(cap[i]>0&&dis[tmp]>dis[dd]+cost[i])\n           {\n              dis[tmp]=dis[dd]+cost[i];\n              pre[tmp]=dd;\n              xb[tmp]=i;\n              flow[tmp]=min(flow[dd],cap[i]);\n              if(!f[tmp]) f[tmp]=1,dl.push(tmp);\n           }\n        }\n    }\n    if(dis[t]>=INF) return 0;\n    return 1;\n}\nvoid max_flow(int s,int t)\n{\n    while(BFS(s,t))\n    {\n        int k=t;\n        while(k!=s)\n         {\n             cap[xb[k]]-=flow[t];\n             cap[xb[k]^1]+=flow[t];\n             k=pre[k];\n         } \n        mflow+=flow[t];\n        mcost+=flow[t]*dis[t];\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=2;i<n;i++)\n     add(i,i+n,1,0),add(i+n,i,0,0);//\u9884\u5904\u7406\u51fa\u5165\u70b9\u4e0e\u51fa\u70b9\u4e4b\u95f4\u7684\u8def\uff0c\u6a21\u62df\u8def\u5f84\u4e0d\u80fd\u4ea4\u53c9\u7684\u8fc7\u7a0b\n    for(int i=1;i<=m;i++)\n     {\n         int x,y,c,d;\n         scanf(\"%d%d%d\",&x,&y,&d);\n         make_map(x,y,d); //\u6dfb\u52a0\u8fb9\n     }\n    max_flow(1,n);\n    printf(\"%d %d\",mflow,mcost);//\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1493449942,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "[$\\texttt{my blog}$](https://www.cnblogs.com/Isaunoya/p/11997189.html)\n\n[[SDOI2009]\u6668\u8dd1](https://www.luogu.com.cn/problem/P2153)\n\n\n\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u677f\u5b50\u9898\u5427\n\n\u4ee4 $i'=i+n$\n$i -> i'$ \u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\u8d39\u7528\u4e3a0\u7684\u8fb9\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\n\u5176\u6b21\u662f\u5bf9 $m$ \u6761\u8fb9\u5efa $u'->v$ \u6d41\u91cf\u4e3a1\u8d39\u7528\u4e3acost\u53cd\u5411\u4e3a0\u8d39\u7528\u4e3a-cost \uff08\u5355\u5411\u8fb9\uff0c\u4e0d\u7ba1\n\n\u8fd9\u6837\u5efa\u56fe\u5c31\u6709\u4ece\u5fc5\u987b\u4ee4 $1'$\u4e3a\u6e90\u70b9 $n$ \u4e3a\u6c47\u70b9\n\u7136\u540e\u6bcf\u6761\u6d41\u7684\u8def\u7ebf\u90fd\u662f $1' -> u_1 -> u_1' -> u_2 -> u_2' -> ... -> n$\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u76f4\u63a5MCMF\u677f\u5b50\u2026\u2026\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nusing ll = long long ;\nusing pii = pair < int , int > ;\nvoid read(int & x) {\n  char c = x = 0 ; bool f = 1 ;\n  while(c < '0' || c > '9') { if(c == '-') f = 0 ; c = getchar() ; }\n  while(c >= '0' && c <= '9') { x = (x << 1) + (x << 3) + (c & 15) ; c = getchar() ; }\n  x = f ? x : -x ;\n}\nint n , m , s , t ;\nconst int N = 5e3 + 10 ;\nconst int M = 5e4 + 10 ;\nnamespace MCMF {\n  void cmax(int & x , int y) { if(x < y) x = y ; }\n  void cmin(int & x , int y) { if(x > y) x = y ; }\n  struct Edge { int v , nxt , f , c ; } e[M << 1] ;\n  int cnt = 1 , head[N] , pre[N] , dis[N] , vis[N] ;\n  void add(int u , int v , int flow , int cost) {\n    e[++ cnt] = { v , head[u] , flow , cost } ; head[u] = cnt ;\n    e[++ cnt] = { u , head[v] , 0 , -cost } ; head[v] = cnt ;\n  }\n  bool spfa(int s) {\n    memset(dis , 0x3f , sizeof(dis)) ;\n    queue < int > q ; dis[s] = 0 ; q.push(s) ;\n    while(q.size()) {\n      int u = q.front() ; q.pop() ; vis[u] = 0 ;\n      for(int i = head[u] ; i ; i = e[i].nxt) {\n        int v = e[i].v ;\n        if(dis[v] > dis[u] + e[i].c && e[i].f) {\n          dis[v] = dis[u] + e[i].c ; pre[v] = i ;\n          if(! vis[v]) { vis[v] = 1 ; q.push(v) ; }\n        }\n      }\n    }\n    return (dis[t] ^ dis[0]) ;\n  }\n  int upd(int & maxflow) {\n    int p = 0 , mn = 1e9 , cost = 0 ;\n    for(int u = t ; u ^ s ; u = e[p ^ 1].v) cmin(mn , e[p = pre[u]].f) ;\n    for(int u = t ; u ^ s ; u = e[p ^ 1].v) { e[p = pre[u]].f -= mn ; e[p ^ 1].f += mn ; cost += e[p].c * mn ; }\n    return maxflow += mn , cost ;\n  }\n  void EK(int & maxflow , int & mincost) { while(spfa(s)) mincost += upd(maxflow) ; }\n}\nusing namespace MCMF ;\nsigned main() {\n  read(n) ; read(m) ; s = n + 1 ; t = n ;\n  for(int i = 1 ; i <= m ; i ++) { int u , v , flow = 1 , cost ; read(u) ; read(v) ; read(cost) ; add(u + n , v , flow , cost) ; }\n  for(int i = 1 ; i <= n ; i ++) { add(i , i + n , 1 , 0) ; }\n  int maxflow = 0 , mincost = 0 ;\n  EK(maxflow , mincost) ;\n  printf(\"%d %d\\n\" , maxflow , mincost) ;\n  return 0 ;\n}\n```",
        "postTime": 1575689588,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u6211\u8fd9\u4e2a\u666e\u53ca\u90fd\u6ca1\u4e0a\u7684\u5c0f\u849f\u84bb\u6765\u5237\u7d2b\u9898\u4e86\n\n### \u9898\u610f\n\u8fd9\u4e2a\u4eba\u554a\uff0c\u5c31\u662f\u60f3\u8981\u8dd1\u6b65\uff0c\u53c8\u60f3\u8dd1\u7684\u65f6\u95f4\u77ed\uff0c\u53c8\u60f3\u5929\u6570\u957f\uff08~~\u771f\u662f\u4e2a\u61d2\u4eba~~\uff09\n\n\u6839\u636e\u8fd9\u4e00\u79cd\u7279\u6027\uff0c\u5c31\u5e94\u8be5\u77e5\u9053\u662f\u7f51\u7edc\u6d41\u4e86\uff0c\u5982\u679c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u8fd8\u6ca1\u6709\u770b\u8fc7\u7684\uff0c\u5de6\u8f6c\u6a21\u677f\u533a\u3002\n\n### \u505a\u6cd5\n\u6211\u4eec\u628a\u8def\u7a0b\u770b\u505a\u662f\u8d39\u7528\uff0c\u628a\u5929\u6570\u770b\u505a\u662f\u6d41\u91cf\u3002\n\n\u7136\u540e\u6309\u7167\u9898\u610f\u5f00\u59cb\u4e71\u8fde\u8fb9\uff0c\u6ca1\u9519\uff0c\u8ba9\u7a0b\u5e8f\u8dd1\u53bb\u5427\n\n#### \u4f46\u662f\uff0cWAWAWAWA\n\n\u4f60\u4f1a\u60ca\u8bb6\u7684\u53d1\u73b0\uff0c\u4f60\u7adf\u7136\u4f1a\u6709\u7b54\u6848\u9519\u8bef\uff0c\u53ef\u80fd\uff0c\u4f60\u6709\u4e9b\u4e1c\u897f\uff0c\u6ca1\u8003\u8651\u5230\u3001\n\u90a3\u5c31\u662f\u2014\u2014\u62c6\u70b9\n\n\u8fd9\u662f\u4e3a\u751a\u4e48\uff0c\u8bf7\u770b\u4e0b\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/56387.png)\n\n\u4f60\u8dd1\u51fa\u6765\u7684\u4e1c\u897f\u4e00\u5b9a\u4f1a\u662f2\n\n#### \u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f\n\n#### \u539f\u56e0\uff1a\u4e2d\u95f4\u70b9\u88ab\u8dd1\u4e86\u4e24\u904d\uff01\uff01\uff01\n\n#### \u65b9\u6cd5\u3000\u5728\u8fd9\u5c31\u8981\u5f15\u5165\u62c6\u70b9\u4e86\uff01\uff01\uff01\n\n### \u62c6\u70b9\n\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u4e00\u4e2a\u56fe\u7ed9\u51fa\u4e86\u70b9\u6743\u800c\u4e0d\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u5728\u8fde\u63a5\u8fb9\u7684\u65f6\u5019\u5c31\u663e\u5f97\u5341\u5206\u4e0d\u597d\u64cd\u4f5c\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5f80\u5f80\u5c31\u4f1a\u6709\u8fd9\u6837\u4e00\u79cd\u64cd\u4f5c\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\n\n\u9898\u76ee\u7ed9\u51fa\u7684\u8fde\u8fb9\u5747\u7531\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u5411\u5165\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u70b9\u6743\u7684\u9650\u5236\u4e86\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u5c31\u5f88\u5bb9\u6613\u89e3\u4e86\n\n\u8fd9\u6837\uff0c\u7b54\u6848\u5c31\u5bf9\u4e86\uff0c\u5982\u4e0b\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/56389.png)\n\n\n\u73b0\u5728\u7ed9\u51fa\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nbool vis[100010];\nint n,m,s,t,x,y,z,f,dis[100010],pre[100010],nxt[100010],flow[100010],maxflow,mincost,st[100010],tot=1; \nstruct Edge\n{\n    int to,nxt,flow,dis;\n}edge[100010];\nvoid add(int from,int to,int flow,int dis)\n{\n    edge[++tot].nxt=st[from];\n    edge[tot].to=to;\n    edge[tot].flow=flow;\n    edge[tot].dis=dis;\n    st[from]=tot;\n}\nbool spfa(int s,int t)\n{\n    queue <int> q;\n    memset(dis,0x7f,sizeof dis);\n    memset(flow,0x7f,sizeof flow);\n    memset(vis,0,sizeof vis);\n    q.push(s); \n    vis[s]=1;dis[s]=0;pre[t]=-1;\n    while (!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        vis[now]=0;\n        for (int i=st[now];i!=-1;i=edge[i].nxt)\n        {\n            if (edge[i].flow>0 && dis[edge[i].to]>dis[now]+edge[i].dis) \n            {\n                dis[edge[i].to]=dis[now]+edge[i].dis;\n                pre[edge[i].to]=now;\n                nxt[edge[i].to]=i;\n                flow[edge[i].to]=min(flow[now],edge[i].flow);\n                if (!vis[edge[i].to])\n                {\n                    vis[edge[i].to]=1;\n                    q.push(edge[i].to);\n                }\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\nvoid MCMF()\n{\n    while (spfa(s,t))\n    {\n        int now=t;\n        maxflow+=flow[t];\n        mincost+=flow[t]*dis[t];\n        while (now!=s)\n        {\n            edge[nxt[now]].flow-=flow[t];\n            edge[nxt[now]^1].flow+=flow[t];\n            now=pre[now];\n        }\n    }\n}\nint main()\n{\n    memset(st,-1,sizeof st); \n    scanf(\"%d%d\",&n,&m);\n    s=1+n,t=n;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&f);\n        add(x+n,y,1,f); \n        add(y,x+n,0,-f);\n    }\n    for (int i=1;i<=n;i++)\n    {\n    \tadd(i,i+n,1,0);\n    \tadd(i+n,i,0,0);\n    }\n    MCMF();\n    printf(\"%d %d\",maxflow,mincost);\n}\n```\n",
        "postTime": 1556428215,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u3010\u53c2\u8003\u8d44\u6599\u3011\n\nliusu201601\u7684\u535a\u5ba2 - bzoj1877: [SDOI2009]\u6668\u8dd1\uff08\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41+\u6a21\u677f\uff09\uff1ahttps://blog.csdn.net/liusu201601/article/details/79443323 \u3002\n\n\u534a\u4ed9\u80e1\u5c0f\u6843\u7684\u535a\u5ba2 - \u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011\uff1ahttps://hentai008.blog.luogu.org/solution-p2153 \u3002\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\nElaxia\u6700\u8fd1\u8ff7\u604b\u4e0a\u4e86\u7a7a\u624b\u9053\uff0c\u4ed6\u4e3a\u81ea\u5df1\u8bbe\u5b9a\u4e86\u4e00\u5957\u5065\u8eab\u8ba1\u5212\uff0c\u6bd4\u5982\u4fef\u5367\u6491\u3001\u4ef0\u5367\u8d77\u5750\u7b49\u7b49\uff0c\u4e0d\u8fc7\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4ed6\u575a\u6301\u4e0b\u6765\u7684\u53ea\u6709\u6668\u8dd1\u3002\u73b0\u5728\u7ed9\u51fa\u4e00\u5f20\u5b66\u6821\u9644\u8fd1\u7684\u5730\u56fe\uff0c\u8fd9\u5f20\u5730\u56fe\u4e2d\u5305\u542b$n$\u4e2a\u5341\u5b57\u8def\u53e3\u548c$m$\u6761\u8857\u9053\uff0cElaxia\u53ea\u80fd\u4ece \u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u8dd1\u5411\u53e6\u5916\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u8857\u9053\u4e4b\u95f4\u53ea\u5728\u5341\u5b57\u8def\u53e3\u5904\u76f8\u4ea4\u3002Elaxia\u6bcf\u5929\u4ece\u5bdd\u5ba4\u51fa\u53d1 \u8dd1\u5230\u5b66\u6821\uff0c\u4fdd\u8bc1\u5bdd\u5ba4\u7f16\u53f7\u4e3a$1$\uff0c\u5b66\u6821\u7f16\u53f7\u4e3a$n$\u3002 Elaxia\u7684\u6668\u8dd1\u8ba1\u5212\u662f\u6309\u5468\u671f\uff08\u5305\u542b\u82e5\u5e72\u5929\uff09\u8fdb\u884c\u7684\uff0c\u7531\u4e8e\u4ed6\u4e0d\u559c\u6b22\u8d70\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u6240\u4ee5 \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6bcf\u5929\u7684\u6668\u8dd1\u8def\u7ebf\u90fd\u4e0d\u4f1a\u76f8\u4ea4\uff08\u5728\u5341\u5b57\u8def\u53e3\u5904\uff09\uff0c\u5bdd\u5ba4\u548c\u5b66\u6821\u4e0d\u7b97\u5341\u5b57\u8def \u53e3\u3002Elaxia\u8010\u529b\u4e0d\u592a\u597d\uff0c\u4ed6\u5e0c\u671b\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8dd1\u7684\u8def\u7a0b\u5c3d\u91cf\u77ed\uff0c\u4f46\u662f\u53c8\u5e0c\u671b\u8bad\u7ec3\u5468\u671f\u5305\u542b\u7684\u5929 \u6570\u5c3d\u91cf\u957f\u3002 \u9664\u4e86\u7ec3\u7a7a\u624b\u9053\uff0cElaxia\u5176\u4ed6\u65f6\u95f4\u90fd\u82b1\u5728\u4e86\u5b66\u4e60\u548c\u627eMM\u4e0a\u9762\uff0c\u6240\u6709\u4ed6\u60f3\u8bf7\u4f60\u5e2e\u5fd9\u4e3a\u4ed6\u8bbe\u8ba1 \u4e00\u5957\u6ee1\u8db3\u4ed6\u8981\u6c42\u7684\u6668\u8dd1\u8ba1\u5212\u3002\n\n\u5b58\u5728$1->n$\u7684\u8fb9\u5b58\u5728\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6761\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u3011\n\n- \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u6570$n,m$\u3002\u8868\u793a\u5341\u5b57\u8def\u53e3\u6570\u548c\u8857\u9053\u6570\u3002 \u63a5\u4e0b\u6765$m$\u884c\uff0c\u6bcf\u884c$3$\u4e2a\u6570$a,b,c$\uff0c\u8868\u793a\u8def\u53e3$a$\u548c\u8def\u53e3$b$\u4e4b\u95f4\u6709\u6761\u957f\u5ea6\u4e3a$c$\u7684\u8857\u9053\uff08\u5355\u5411\uff09\u3002\n\n- \u8f93\u51fa\u683c\u5f0f\n\u4e24\u4e2a\u6570\uff0c\u7b2c\u4e00\u4e2a\u6570\u4e3a\u6700\u957f\u5468\u671f\u7684\u5929\u6570\uff0c\u7b2c\u4e8c\u4e2a\u6570\u4e3a\u6ee1\u8db3\u6700\u957f\u5929\u6570\u7684\u6761\u4ef6\u4e0b\u6700\u77ed\u7684\u8def\u7a0b\u957f\u5ea6\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u3011\n\n- \u8f93\u5165\u6837\u4f8b\n```\n7 10\n1 2 1\n1 3 1\n2 4 1\n3 4 1\n4 5 1\n4 6 1\n2 5 5\n3 6 6\n5 7 1\n6 7 1\n```\n- \u8f93\u51fa\u6837\u4f8b\n```\n2 11\n```\n\n\u3010\u6570\u636e\u8303\u56f4\u3011\n\n\u5bf9\u4e8e$30\\%$\u7684\u6570\u636e\uff0c$n \\leq 20,m \\leq 120$\u3002\n\n\u5bf9\u4e8e$100\\%$\u7684\u6570\u636e\uff0c$n \\leq 200,m \\leq 20000$\u3002\n\n\u3010\u9898\u89e3\u3011\n\n\u56e0\u4e3a\u4e0d\u80fd\u8d70\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u6240\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6bcf\u5929\u7684\u6668\u8dd1\u8def\u7ebf\u90fd\u4e0d\u4f1a\u76f8\u4ea4\uff08\u5728\u5341\u5b57\u8def\u53e3\u5904\uff09\u3002\n\n\u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5bb9\u91cf\u4e3a$1$\uff0c\u6743\u503c\u4e3a$0$\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u8bbf\u95ee\u4e00\u904d\u5566233\u3002\n\n\u5efa\u8fb9\u65b9\u6cd5\uff1a\n\n\u5148$ins(st,n+1,inf,0),ins(n,ed,inf,0)$\uff0c\u518d$ins(i,i+n,1,0)(2 \\leq n \\leq n-1)$\uff0c\u63a5\u7740$ins(a+n,b,1,c)$\u5c31\u53ef\u4ee5\u4e86~\n\n\u4e0b\u9762\u4e0aAC\u4ee3\u7801~\n```\n#include <cstdio>\n#include <cstring>\n#define inf 999999999\nint len=0,tou=0,wei=0,st=0,ed=0,n=0,m=0;\nstruct nodea{ int d,v,f; } a[1001];\nstruct nodeb{ int x,y,c,d,f,gg; } b[1000001];\nint la[1001],l[1001];\nvoid ins(int x,int y,int c,int d)\n{\n\tlen++;\n\tb[len].x=x;\n\tb[len].y=y;\n\tb[len].c=c;\n\tb[len].d=d;\n\tb[len].gg=la[x];\n\tla[x]=len;\n\t\n\tlen++;\n\tb[len].x=y;\n\tb[len].y=x;\n\tb[len].c=0;\n\tb[len].d=-d;\n\tb[len].gg=la[y];\n\tla[y]=len;\n\t\n\tb[len-1].f=len;\n\tb[len].f=len-1;\n}\nbool spfa()\n{\n\tfor(int i=1;i<=ed;i++)\n\t{\n\t\ta[i].v=0;\n\t\ta[i].d=inf;\n\t}\n\ta[st].d=0,a[st].v=1,l[1]=st;\n\ttou=1,wei=2;\n\twhile(tou!=wei)\n\t{\n\t\tint x=l[tou];\n\t\tfor(int i=la[x];i>0;i=b[i].gg)\n\t\t{\n\t\t\tint y=b[i].y;\n\t\t\tif(a[y].d>a[x].d+b[i].d && b[i].c>0)\n\t\t\t{\n\t\t\t\ta[y].f=i;\n\t\t\t\ta[y].d=a[x].d+b[i].d;\n\t\t\t\tif(a[y].v==0)\n\t\t\t\t{\n\t\t\t\t\ta[y].v=1;\n\t\t\t\t\tl[wei++]=y;\n\t\t\t\t\tif(wei>ed)\n\t\t\t\t\t{\n\t\t\t\t\t\twei=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta[x].v=0;\n\t\ttou++;\n\t\tif(tou>ed)\n\t\t{\n\t\t\ttou=1;\n\t\t}\n\t}\n\tint x=ed;\n\twhile(x!=st)\n\t{\n\t\tint i=a[x].f;\n\t\tb[i].c--;\n\t\tb[b[i].f].c++;\n\t\tx=b[i].x;\n\t}\n\tif(a[ed].d==inf)\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\n{\n\tint ans=0,su=0;\n\tscanf(\"%d %d\",&n,&m);\n\tmemset(la,0,sizeof(la));\n\tst=1,ed=n*2;\n\tins(1,n+1,inf,0),ins(n,n*2,inf,0);\n\tfor(int i=2;i<=n-1;i++)\n\t{\n\t\tins(i,i+n,1,0);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=0,y=0,c=0;\n\t\tscanf(\"%d %d %d\",&x,&y,&c);\n\t\tins(x+n,y,1,c);\n\t}\n\twhile(spfa()==true)\n\t{\n\t\tans++;\n\t\tsu+=a[ed].d;\n\t}\n\tprintf(\"%d %d\",ans,su);\n\treturn 0;\n}\n```",
        "postTime": 1525097709,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u5982\u679c\u4e0d\u7b97\u8def\u7684\u957f\u5ea6\u7684\u8bdd,\u5c31\u662f\u6700\u5927\u6d41.\n\n\u4e3a\u4ec0\u4e48?\n\n\u6700\u957f\u7684\u5468\u671f,\u6bcf\u4e2a\u8def\u53e3\u90fd\u53ea\u80fd\u4e00\u6b21,\u5c31\u662f\u8bf4\u4e0d\u91cd\u590d\u9009\u53d6\u95ee\u9898\u554a.\n\n\u7f51\u7edc\u6d4124\u9898\u4e0a\u7684\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u95ee\u9898\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u6a21\u578b.\n\n\u8003\u8651\u8def\u957f,\u53c8\u8981\u6c42\u6700\u5c0f,\u81ea\u7136\u5c31\u80fd\u60f3\u5230\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u554a.\n\n## \u6a21\u578b\u5efa\u7acb\n\n\u6bcf\u4e2a\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\t--->\t\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9,\u4e2d\u95f4\u8fde\u4e3a\u6700\u5927\u6d41\u4e3a1,\u8d39\u7528\u4e3a0\u7684\u8fb9.\n\n1\u53f7\u70b9\u548cn\u53f7\u70b9\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\t--->\t\u4e00\u53f7\u70b9\u4e2d\u95f4\u7684\u8fb9\u6700\u5927\u6d41\u4e3ainf,n\u53f7\u70b9\u4e2d\u95f4\u7684\u8fb9\u6700\u5927\u6d41\u4e3ainf.\n\n\u6709\u4e00\u7fa4\u6709\u5411\u8def\u5f84\t--->\t\u6709\u5411\u8def,\u4ece\u8d77\u70b9\u7684\u7b2c\u4e8c\u4e2a\u70b9\u8fde\u5411\u7ec8\u70b9\u7684\u7b2c\u4e00\u4e2a\u70b9,\u8d39\u7528\u4e3a\u8def\u957f.\n\n\u6bcf\u4e2a\u8def\u53ef\u4ee5\u7ecf\u8fc7\u597d\u591a\u6b21\t--->\t\u2191\u8fd9\u79cd\u8fb9\u7684\u6d41\u91cf\u5c31\u662finf\u554a.\n\n**\u6e90\u70b9\u548c\u6c47\u70b9\u4e0d\u80fd\u76f4\u63a5\u76f8\u8fde**\t--->\t\u7279\u5224\u6709\u5411\u8fb9\u8d77\u70b9\u4e3a1,\u91cd\u70b9\u4e3an\u7684,\u6700\u5927\u6d41\u6539\u62101.\n\n## \u5bf9\u62cdCode\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Smax =   50000;\nconst int Pmax = \t 500;\nconst int inf = 20010509;\nint n,m,s,t,p1,p2,p3,to[Smax<<1],net[Smax<<1],mf[Smax<<1],mo[Smax<<1],tails=1,fr[Pmax];\nvoid add(int froms,int tos,int mfs,int money){\n\tto[++tails]=tos;\n\tnet[tails]=fr[froms];\n\tmf[tails]=mfs;\n\tmo[tails]=money;\n\tfr[froms]=tails;\n}\nvoid auto_add(int froms,int tos,int mfs,int mo){\n\tadd(froms,tos,mfs,mo);\n\tadd(tos,froms,0,-mo);\n}\nint lastp[Pmax],useds[Pmax],flown[Pmax],dis[Pmax],ndo,p4;\nbool inqu[Pmax];\nqueue<int>ready;\nbool SPFA(){\n\tmemset(inqu,0,sizeof(inqu));\n\tmemset(dis,20010509,sizeof(dis));\n\tmemset(flown,20010509,sizeof(flown));\n\twhile(!ready.empty())ready.pop();ready.push(s);\n\tdis[s]=0;inqu[s]=1;flown[s]=20010509;lastp[t]=0;\n\twhile(!ready.empty()){\n\t\tndo=ready.front();\n\t\tready.pop();inqu[ndo]=0;\n\t\tfor(int lzh=fr[ndo];lzh;lzh=net[lzh]){\n\t\t\tif(dis[to[lzh]]>dis[ndo]+mo[lzh] && mf[lzh]){\n\t\t\t\tdis[to[lzh]]=dis[ndo]+mo[lzh];\n\t\t\t\tflown[to[lzh]]=min(mf[lzh],flown[ndo]);\n\t\t\t\tuseds[to[lzh]]=lzh;\n\t\t\t\tlastp[to[lzh]]=ndo;\n\t\t\t\tif(!inqu[to[lzh]]){\n\t\t\t\t\tinqu[to[lzh]]=1;\n\t\t\t\t\tready.push(to[lzh]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn lastp[t]!=0;\n}\nint maxflow=0,mincost=0,ppo;\nvoid Dinic(){\n\twhile(SPFA()){\n\t\tmaxflow+=flown[t];ppo=t;\n\t\tmincost+=flown[t]*dis[t];\n\t\twhile(ppo!=s){\n\t\t\tmf[useds[ppo]]-=flown[t];\n\t\t\tmf[useds[ppo]^1]+=flown[t];\n\t\t\tppo=lastp[ppo];\n\t\t}\n\t}\n}\nint gnum(int x,int p){return (x<<1)-1+p;}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\ts=497;t=498;\n\tauto_add(gnum(1,0),gnum(1,1),inf,0);\n\tfor(int i=2;i<n;++i)\n\t\tauto_add(gnum(i,0),gnum(i,1),1,0);\n\tauto_add(gnum(n,0),gnum(n,1),inf,0);\n\tauto_add(s,gnum(1,0),inf,0);\n\tauto_add(gnum(n,1),t,inf,0);\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&p1,&p2,&p3);\n\t\tif(p1==1&&p2==n)\n\t\t\tauto_add(gnum(1,1),gnum(n,0),1,p3);\n\t\telse\n\t\t\tauto_add(gnum(p1,1),gnum(p2,0),inf,p3);\n\t}\n\tDinic();\n\tprintf(\"%d %d\",maxflow,mincost);\n\treturn 0;\n}\n```",
        "postTime": 1521680941,
        "uid": 43931,
        "name": "SofanHe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u8001\u662f\u8fd9\u79cd\u5957\u8def\u5c31\u6ca1\u610f\u601d\u4e86\u3002\n\u5177\u4f53\u53ef\u89c1\uff1a\n- [P1402 \u9152\u5e97\u4e4b\u738b](https://www.luogu.org/problemnew/show/P1402)\n- [P1231 \u6559\u8f85\u7684\u7ec4\u6210](https://www.luogu.org/problemnew/show/P1231)\n\n\u90fd\u662f\u4e00\u6837\u7684\u5957\u8def\u3002\u53ea\u4e0d\u8fc7\u8fd9\u9898\u6362\u6210\u4e86\u8d39\u7528\u6d41\u3002\n# \u9898\u76ee\u94fe\u63a5\n\n[P2153 [SDOI2009]\u6668\u8dd1](<https://www.luogu.org/problemnew/show/P2153>)\n\n# \u9898\u610f\u7b80\u8ff0\n\n\u6c42\u7ed9\u5b9a\u7f51\u7edc\u7684\u6700\u5927\u6d41\u4e0e\u6700\u5c0f\u8d39\u7528\uff0c\u5176\u4e2d\u6bcf\u4e2a\u70b9\u4ec5\u5141\u8bb8\u7ecf\u8fc7\u4e00\u6b21\u3002\n\n<!--more-->\n\n# \u89e3\u9898\u601d\u60f3\n\n\u770b\u5230\u5bf9\u70b9\u7684\u9650\u5236\uff0c\u8003\u8651\u62c6\u70b9\u4e3a\u8fb9\u3002\n\n\u4e0d\u59a8\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210$i$\u548c$i + n$\u4e24\u4e2a\u70b9\uff0c\u5728\u4e2d\u95f4\u8fde\u63a5\u4e00\u6761**\u6d41\u91cf\u4e3a1**\u7684\u8fb9\uff0c\u5e76\u4e14\u70b9$i$\u51fa\u5ea6\u4e3a1\uff0c\u70b9$i + n$\u5165\u5ea6\u4e3a1.\n\n\u8fd9\u6837\u53ef\u4ee5\u9650\u5236\u6bcf\u4e2a\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\u4e00\u5b9a\u4e3a1\u3002\n\n\u7136\u540e\u5728\u65b0\u56fe\u4e2d\u4ee5$1 + n$\u4e3a\u539f\u70b9\uff0c$n$\u4e3a\u6c47\u70b9\u8dd1**EK+SPFA**\u5c31\u884c\u4e86\u3002\n\n# \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n\nnamespace FastIO {\n    inline int read() {\n        char ch = getchar(); int r = 0, w = 1;\n        while(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();}\n        while(isdigit(ch)) r = r * 10 + ch - '0' , ch = getchar();\n        return r * w;\n    }\n    void _write(int x) {\n        if(x < 0) putchar('-'), x = -x;\n        if(x > 9) _write(x / 10);\n        putchar(x % 10 + '0');\n    }\n    inline void write(int x) {\n        _write(x);\n        putchar(' ');\n    }\n}\n\nusing namespace FastIO;\n\nconst int N = 10006;\nconst int M = 2000006;\nconst int INF = 0x3f3f3f3f;\n\ntemplate <typename T> T min(T a, T b) {return a < b ? a : b;}\n\ntemplate <typename T>\nclass queue {\n    private:\n        int head, tail;\n        T q[N << 1];\n    public:\n        queue() {head = tail = 0;}\n        inline bool empty() {return head >= tail;}\n        inline void push(T x) {q[++tail] = x;}\n        inline void pop() {if(!empty()) head++;}\n        inline T front() {return q[head + 1];}\n};\n\nint head[N], ver[M], edge[M], cost[M], nxt[M], pre[N], incf[N], d[N];\nint cnt = 1, n, m, s, t, maxflow, mincost;\nbool v[N];\n\ninline void add(int x, int y, int z, int w) {\n    ver[++cnt] = y, edge[cnt] = z, cost[cnt] =  w, nxt[cnt] = head[x], head[x] = cnt;\n    ver[++cnt] = x, edge[cnt] = 0, cost[cnt] = -w, nxt[cnt] = head[y], head[y] = cnt;\n}\n\ninline bool spfa() {\n    for(register int i = 1; i <= n << 1; i++) v[i] = 0, d[i] = INF;\n    queue <int> q;\n    q.push(s);\n    d[s] = 0;\n    v[s] = 1;\n    incf[s] = INF;\n    while(!q.empty()) {\n        int x = q.front();\n        q.pop();\n        v[x] = 0;\n        for(register int i = head[x]; i; i = nxt[i]) {\n            int y = ver[i], z = edge[i], w = cost[i];\n            if(!z) continue;\n            if(d[y] > d[x] + w) {\n                d[y] = d[x] + w;\n                incf[y] = min(incf[x], z);\n                pre[y] = i;\n                if(!v[y]) {\n                    v[y] = 1;\n                    q.push(y);\n                }\n            }\n        }\n    }\n    return d[t] != INF;\n}\n\ninline void upd() {\n    maxflow += incf[t];\n    mincost += incf[t] * d[t];\n    int x = t;\n    while(x != s) {\n        int i = pre[x];\n        edge[i] -= incf[t];\n        edge[i ^ 1] += incf[t];\n        x = ver[i ^ 1];\n    }\n}\n \nint main() {\n    n = read(), m = read();\n    for(register int i = 1; i <= m; i++) {\n        int x = read(), y = read(), z = read();\n        add(x + n, y, 1, z);\n    }\n    for(register int i = 1; i <= n; i++) {\n        add(i, i + n, 1, 0);\n    }\n    s = 1 + n, t = n;\n    while(spfa()) upd();\n    write(maxflow);\n    write(mincost);\n    return 0;\n}\n```\n\n~~\u4e3a\u4ec0\u4e48\u6211\u7684\u6570\u7ec4\u603b\u662f\u5f00\u5c0f\u554aQAQ~~\n\n",
        "postTime": 1556590798,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 [SDOI2009]\u6668\u8dd1"
    },
    {
        "content": "## \u849f\u84bb\u7b2c\u4e00\u6b21\u5b66\u8d39\u7528\u6d41\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5fc3\u5f97\n\n\u9996\u5148\uff0c\u8981\u4e86\u89e3\u4e00\u4e2a\u6982\u5ff5\uff1a\u53ef\u884c\u6d41\u4e0e\u6700\u5927\u6d41\u3002\n\n\u53ef\u884c\u6d41\uff1a\u6bcf\u6761\u5f27 ( u, v )\u4e0a \u7ed9\u5b9a\u4e00\u4e2a\u5b9e\u6570f(u,v),\u6ee1\u8db3\uff1a\n\n\u6709 0 <= f ( u, v ) <= c( u, v ),\u5219f(u,v)\u79f0\u4e3a\u5f27( u, v )\u4e0a\u7684\u6d41\u91cf\u3002\n\n\u5982\u679c\u6709\u4e00\u7ec4\u6d41\u91cf\u6ee1\u8db3\u6761\u4ef6\uff1a\n\n          \u6e90\u70b9s\uff1a\u6d41\u51fa\u91cf = \u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf\n          \u6c47\u70b9t\uff1a\u6d41\u5165\u91cf =\u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf\n          \u4e2d\u95f4\u70b9\uff1a\u603b\u6d41\u5165\u91cf = \u603b\u6d41\u51fa\u91cf\n          \n\u90a3\u4e48\u6574\u4e2a\u7f51\u7edc\u4e2d\u7684\u6d41\u91cf\u6210\u4e3a\u4e00\u4e2a\u53ef\u884c\u6d41\u3002\n\n\u800c\u5728\u6240\u6709\u53ef\u884c\u6d41\u4e2d\uff0c\u6700\u5927\u6d41\u91cf\u7684\u4e00\u4e2a\u6d41\u7684\u6d41\u91cf\u79f0\u4e3a\u6700\u5927\u6d41\u3002\n\n\u6700\u5927\u6d41\u7684\u57fa\u672c\u7b97\u6cd5\uff1aEK\u548cDINIC\uff0c\u8fd9\u91cc\u4e0d\u505a\u8d58\u8ff0\u3002\uff08\u9700\u8981\u8005\u53ef\u5148\u53bb\u5b66\u4e60EK\u7b97\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\u8d39\u7528\u6d41\uff09\n\n\u90a3\u4e48\u4f55\u8c13\u8d39\u7528\u6d41\uff1f\n\n### \u201c\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u7684\u8fb9\u4e0d\u4ec5\u6709\u5bb9\u91cf\uff0c\u8fd8\u6709\u5355\u4f4d\u6d41\u91cf\u8d39\u7528\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u81ea\u7136\u60f3\u5728\u6c42\u5f97\u6700\u5927\u6d41\u7684\u540c\u65f6\uff0c\u4f7f\u603b\u8d39\u7528\u66f4\u4f4e\u3002\u201d\n\n\u8fd9\u5c31\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u540c\u6837\u7684\u8fd8\u6709\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u7b49\u7b49\uff0c\u90fd\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u8fd9\u9053\u9898\u9898\u9762\u5f88\u660e\u663e\u662f\u4e00\u9053\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u677f\u5b50\uff0c\u4e0d\u8fc7\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u7ecf\u8fc7\u4e00\u6b21\uff0c\u800c\u6211\u4eec\u5728\u7f51\u7edc\u6d41\u4e2d\u5bb9\u91cf\u662f\u8d4b\u4e88\u7ed9\u8fb9\u7684\uff0c\u8fd9\u8be5\u5982\u4f55\u5904\u7406\uff1f\n\n### Easy\uff0c\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u4e00\u4e2a\u4e3a\u5165\u70b9\uff0c\u4e00\u4e2a\u4e3a\u51fa\u70b9\uff0c\u518d\u5728\u5165\u70b9\u548c\u51fa\u70b9\u4e2d\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u5373\u53ef\u3002\n\n\u7136\u540e\u5c31\u662f\u6109\u5feb\u7684\u8dd1\u8d39\u7528\u6d41\u65f6\u95f4\u4e86\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u7c7b\u4f3cEK\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ea\u8981\u4e00\u76f4\u8dd1SPFA\uff08BFS\uff09\u76f4\u5230\u8dd1\u4e0d\u4e86\u4e3a\u6b62\uff0c\u7136\u540e\u5728\u6bcf\u6b21\u8dd1\u5b8c\u540e\u90fd\u5c06\u65b0\u7684\u6d41\u91cf\u548c\u8d39\u7528\u52a0\u5230maxflow\u548cmincost\u4e2d\uff0c\u518d\u4ece\u6c47\u70b9\u56de\u6eaf\uff0c\u5c06\u6b63\u5411\u8fb9\u6d41\u91cf\u51cf\u53bb\uff0c\u53cd\u5411\u8fb9\u6d41\u91cf\u52a0\u4e0a\u5373\u53ef\uff0c\u4e0d\u660e\u767d\u8fd9\u4e2a\u64cd\u4f5c\u7684\u540c\u6837\u5148\u53bb\u5b66\u6700\u5927\u6d41\u3002\n\n\u8d39\u7528\u6d41\u521d\u59cb\u5c06\u53cd\u5411\u8fb9\u8d39\u7528\u8bbe\u4e3a-c\uff0c\u539f\u7406\u548c\u6700\u5927\u6d41\u4e2d\u53cd\u5411\u8fb9\u5bb9\u91cf\u8bbe\u4e3a0\u7c7b\u4f3c\uff0c\u56e0\u4e3amincost\u7684\u8ba1\u7b97\u662f\u4e24\u8005\u76f8\u4e58\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u65f6\u95f4\uff1a\n\n```\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m;\nint cnt=1;\nint ver[80050];\nint nxt[80050];\nint head[405];\nint flow[80050];\nint dis[80050];\nint s,t;\nint mincost;\nint maxflow;\nbool bj[405];\nint low[405];\nint lastd[405];\nint lastb[405];\nint d[405];\ninline void add(int x,int y,int flo,int d)\n{\n\tcnt++;\n\tver[cnt]=y;\n\tnxt[cnt]=head[x];\n\tflow[cnt]=flo;\n\tdis[cnt]=d;\n\thead[x]=cnt;\n}\ninline bool spfa()\n{\n\tmemset(lastd,0,sizeof(lastd));\n\tmemset(lastb,0,sizeof(lastb));\n\tmemset(low,63,sizeof(low));\n\tmemset(bj,0,sizeof(bj));\n\tmemset(d,63,sizeof(d));\n\tqueue<int> q;\n\tq.push(s);\n\tbj[s]=1;\n\td[s]=0;\n\tlastb[t]=-1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tbj[x]=0;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tif(flow[i]>0&&d[ver[i]]>d[x]+dis[i])\n\t\t\t{\n\t\t\t\td[ver[i]]=d[x]+dis[i];\n\t\t\t\tlow[ver[i]]=min(low[x],flow[i]);\n\t\t\t\tlastb[ver[i]]=i;\n\t\t\t\tlastd[ver[i]]=x;\n\t\t\t\tif(!bj[ver[i]])\n\t\t\t\t{\n\t\t\t\t\tbj[ver[i]]=1;\n\t\t\t\t\tq.push(ver[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn lastb[t]!=-1;\n}\ninline void MCMF()\n{\n\twhile(spfa())\n\t{\n\t\tmaxflow+=low[t];\n\t\tmincost+=low[t]*d[t];\n\t\tint x=t;\n\t\twhile(x!=s)\n\t\t{\n\t\t\tflow[lastb[x]]-=low[t];\n\t\t\tflow[lastb[x]^1]+=low[t];\n\t\t\tx=lastd[x];\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\ts=1;t=n+n;\n\tadd(1,n+1,10000000,0);\n\tadd(n+1,1,-10000000,0);\n\tadd(n,n+n,10000000,0);\n\tadd(n+n,n,-10000000,0);\n\tfor(int i=2;i<=n-1;i++)\n\t{\n\t\tadd(i,i+n,1,0);\n\t\tadd(i+n,i,0,0);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a+n,b,1,c);\n\t\tadd(b,a+n,0,-c);\n\t}\n\tMCMF();\n\tcout<<maxflow<<\" \"<<mincost<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1572235010,
        "uid": 182738,
        "name": "ZBHRuaRua",
        "ccfLevel": 6,
        "title": "[\u8d39\u7528\u6d41\u6a21\u677f]SDOI2009 \u6668\u8dd1"
    },
    {
        "content": "\u867d\u7136\u8fd9\u9898\u5f88\u6c34\uff0c\u4f46\u662f\u6211\u8fd8\u662fWA\u4e8610\u6b21(\u5927\u6982\u90fd\u662f1->n\u7684\u8fb9\u7684\u9505\uff09\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u9053\u9898\u5e94\u8be5\u8dd1\u4e00\u8fb9\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u8d39\u7528\u6d41\u6700\u91cd\u8981\u7684\u662f\u5982\u4f55\u5efa\u8fb9\uff0c\u53cd\u5411\u8fb9\u4e4b\u7c7b\u7684\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\n\u8fd9\u9898\u8981\u6c42\u4e00\u4e2a\u70b9\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u6240\u4ee5\u628a\u4e00\u4e2a\u70b9\u62c6\u62102 * i\uff0c\u548c2 * i + 1\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u662f\u5165\u70b9\u548c\u51fa\u70b9\u3002\uff08\u70b91\u70b9n\u4e0d\u8981\u8fd9\u6837\u8fde\uff09\u5165\u70b9\u5230\u51fa\u70b9\u8fde\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8fd9\u6837\u4e00\u4e2a\u70b9\u5c31\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\u3002\u5176\u4ed6\u8fb9\u5c31\u51fa\u70b9\u8fde\u5165\u70b9\uff0c\u8fde\u8d39\u7528\u4e3ac\uff0c\u6d41\u91cfinf\u7684\u8fb9\uff081->n\u7684\u8fb9\u6d41\u91cf1\uff09\n\n\u5982\u679c\u628a1\u7684\u51fa\u70b9\u4f5c\u4e3a\u539f\u70b9\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6709\u4e00\u4e9b\u8fde\u52301\u7684\u8fb9\u800c\u6302\u6389\uff0c\u6240\u4ee5\u75281\u505a\u539f\u70b9\uff0cn * 2\u4f5c\u4e3a\u6c47\u70b9\u30021\u7684\u5165\u70b9\u51fa\u70b9\u8fde\u6d41\u91cfinf\uff0c\u8d39\u75280\u7684\u8fb9\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u8bbf\u95ee\u591a\u6b21\uff0cn\u7684\u5165\u70b9\u51fa\u70b9\u5c31\u4e0d\u7528\u8fde\u4e86\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u62ff\u6a21\u677f\u6539\u7684\uff0c\u5176\u5b9eflow\u6570\u7ec4\u4e0d\u662f1\u5c31\u662f0\uff0c\u6839\u672c\u4e0d\u7528\u5b58\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define inf 0x3f3f3f3f\nusing namespace std;\nint n,m,cnt;\nint head[1005],flow[1005],vis[1005],dist[1005],pre[1005],from[1005];\n\nstruct node{\n\tint to,flow,dis,next;\n}edge[100005];\n\nvoid make(int u,int v,int flow,int cost){\n\tedge[++cnt].to = v;\n\tedge[cnt].flow = flow;\n\tedge[cnt].dis = cost;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nvoid spfa(){\n\tqueue <int> que;\n\tque.push(1);\n\tvis[1] = 1;\n\tdist[1] = 0;\n\tflow[1] = inf;\n\twhile(!que.empty()){\n\t\tint now = que.front();\n\t\tque.pop();\n\t\tvis[now] = 0;\n\t\tfor(int i = head[now];i != -1;i = edge[i].next){\n\t\t\tif(dist[edge[i].to] > dist[now] + edge[i].dis && edge[i].flow > 0){\n\t\t\t\tdist[edge[i].to] = dist[now] + edge[i].dis;\n\t\t\t\tflow[edge[i].to] = min(flow[now],edge[i].flow);\n\t\t\t\tpre[edge[i].to] = now;\n\t\t\t\tfrom[edge[i].to] = i;\n\t\t\t\tif(!vis[edge[i].to]){\n\t\t\t\t\tvis[edge[i].to] = 1;\n\t\t\t\t\tque.push(edge[i].to);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n}\n\nint rev(int i){\n    if(i % 2 == 0){\n    \treturn i - 1;\n    }\t\n    return i + 1;\n}\n\nvoid work(){\n\tint ans1 = 0,ans2 = 0;\n\twhile(true){\n\t\tfor(int i = 1;i <= n * 2 + 1;i++){\n\t\t\tvis[i] = flow[i] = 0;\n\t\t\tdist[i] = inf;\n\t\t}\n\t\tspfa();\n\t\tif(flow[n * 2] == 0){\n\t\t\tprintf(\"%d %d\\n\",ans1,ans2);\n\t\t\treturn;\n\t\t}\n\t\tans1 += flow[n * 2];\n\t\tans2 += flow[n * 2] * dist[n * 2];\n\t\tint i = n * 2;\n\t\twhile(i != 1){\n\t\t\tedge[from[i]].flow -= flow[n * 2];\n\t\t\tedge[rev(from[i])].flow += flow[n * 2];//\u56e0\u4e3a\u53cd\u5411\u8fb9\u7684cnt\u80af\u5b9a\u548c\u539f\u8fb9\u76f8\u90bb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u5199\n\t\t\ti = pre[i];\n\t\t}\n\t}\n}\n\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i <= m;i++){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tif(a == 1 && b == n){\n\t\t\tmake(a * 2 + 1,b * 2,1,c);\n\t\t\tmake(b * 2,a * 2 + 1,0,0);\n\t\t}else{\n\t\t\tmake(a * 2 + 1,b * 2,inf,c);\n\t    \tmake(b * 2,a * 2 + 1,0,-c);\n\t\t}\n\t}\n\tfor(int i = 2;i < n;i++){\n\t\tmake(i * 2,i * 2 + 1,1,0);\n\t\tmake(i * 2 + 1,i * 2,0,0);\n\t}\n\tmake(2,3,inf,0);\n\tmake(1,2,inf,0);\n\twork();\n\treturn 0;\n} \n```\n",
        "postTime": 1565083156,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684,\u611f\u89c9\u9898\u76ee\u63cf\u8ff0\u5c31\u5df2\u7ecf\u544a\u8bc9\u6211\u4eec\u8981\u600e\u4e48\u641e\u4e86,\u4e0b\u9762\u662f\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879 : \n\n- \u6bcf\u4e00\u4e2a\u70b9\u662f\u9650\u5236\u81ea\u5df1\u7684\u6240\u4ee5\u8981\u62c6\u70b9\n- $1$ \u548c $n$ \u7684\u51fa\u5165\u70b9\u76f8\u8fde\u7684\u6d41\u91cf\u4e3a $inf$ (\u56e0\u4e3a\u53ef\u4ee5\u8d70\u5f88\u591a\u6b21\u561b)\n- \u5b58\u5728 $1 \\rightarrow n$ \u7684\u8fb9\u5b58\u5728\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b,\u8fd9\u6761\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\u3002\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    from,reach,next,value,cost:array[-1..51000] of longint;\n    dis,pre,last,flow:array[-1..51000] of int64;\n    queue:array[-1..51000] of longint;\n    time,money:array[1..2] of longint;\n    id:array[-1..510,1..2] of longint;\n    cnt:array[-1..510] of longint;\n    vis:array[-1..510] of boolean;\n    n,m,l,r,i,k,tot,now,sink,source:longint;\n    maxflow,mincost:int64;\n\nprocedure add(x,y,sum_1,sum_2:longint);\nbegin\n    inc(tot); from[tot]:=x; reach[tot]:=y; value[tot]:=sum_1; cost[tot]:= sum_2; next[tot]:=cnt[x]; cnt[x]:=tot;\n    inc(tot); from[tot]:=y; reach[tot]:=x; value[tot]:=0    ; cost[tot]:=-sum_2; next[tot]:=cnt[y]; cnt[y]:=tot;\nend;\n\nfunction SPFA:boolean;\nvar head,tail,now,i:longint;\nbegin\n    filldword(dis,sizeof(dis) div 4,maxlongint);\n    filldword(flow,sizeof(flow) div 4,maxlongint);\n    filldword(vis,sizeof(vis) div 4,0);\n    head:=1; tail:=1;  queue[1]:=source; vis[source]:=True; dis[source]:=0; pre[sink]:=-1;\n\n    while head<=tail do\n    begin\n        now:=queue[head]; vis[now]:=False; inc(head);\n        i:=cnt[now];\n        while i<>-1 do\n        begin\n            if (value[i]>0)and(dis[reach[i]]>dis[now]+cost[i]) then\n            begin\n                dis[reach[i]]:=dis[now]+cost[i];\n                pre[reach[i]]:=now;\n                last[reach[i]]:=i;\n                flow[reach[i]]:=min(flow[now],value[i]);\n                if vis[reach[i]]=False then\n                begin\n                    vis[reach[i]]:=True;\n                    inc(tail); queue[tail]:=reach[i];\n                end;\n            end;\n            i:=next[i];\n        end;\n    end;\n    if pre[sink]=-1 then exit(False); exit(True);\nend;\n\nprocedure MincostMaxflow;\nbegin\n    maxflow:=0; mincost:=0; now:=0;\n    while (SPFA) do\n    begin\n        now:=sink;\n        inc(maxflow,flow[sink]);\n        inc(mincost,flow[sink]*dis[sink]);\n        while now<>source do\n        begin\n            dec(value[last[now]],flow[sink]);\n            inc(value[last[now] xor 1],flow[sink]);\n            now:=pre[now];\n        end;\n    end;\nend;\n\nprocedure Construction_I;\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(cost,sizeof(cost),0);\n    fillchar(next,sizeof(next),0);\n    read(n,m); source:=1; sink:=(n+1) << 1;\n    for i:=1 to n do begin id[i,1]:=i << 1; id[i,2]:=i << 1+1; end;\n    for i:=2 to n-1 do add(id[i,1],id[i,2],1,0);\n    add(id[1,1],id[1,2],maxlongint,0); add(id[n,1],id[n,2],maxlongint,0);\n    for i:=1 to m do\n    begin\n        read(l,r,k);\n        if (l=1)and(r=n) then\n        begin\n            add(id[1,2],id[n,1],1,k);\n            continue;\n        end;\n        add(id[l,2],id[r,1],maxlongint,k);\n    end;\n    add(source,id[1,1],maxlongint,0); add(id[n,2],sink,maxlongint,0);\nend;\n\nbegin\n    Construction_I; MincostMaxflow; writeln(maxflow,' ',mincost);\nend.\n\n\n```",
        "postTime": 1541742209,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "### \u8fd9\u5c31\u662f\u4e00\u9053\u5178\u578b\u7684\u5229\u7528\u62c6\u70b9\u8fdb\u884c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u9898\u76ee\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u628a\u5341\u5b57\u8def\u53e3\u8bbe\u4e3a\u7f51\u7edc\u6d41\u4e2d\u7684\u7ed3\u70b9\uff0c\u9053\u8def\u8bbe\u4e3a\u8fb9\u3002\u53ef\u662f\u8fd9\u6837\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\uff1a**\u5982\u4f55\u5c06\u9898\u76ee\u4e2d\u7684*\u201c\u7531\u4e8e\u4ed6\u4e0d\u559c\u6b22\u8d70\u91cd\u590d\u7684\u8def\u7ebf\uff0c\u6240\u4ee5 \u5728\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6bcf\u5929\u7684\u6668\u8dd1\u8def\u7ebf\u90fd\u4e0d\u4f1a\u76f8\u4ea4\uff08\u5728\u5341\u5b57\u8def\u53e3\u5904\uff09\u201d*\u5b9e\u73b0\uff1f**\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u7528\u5230\u7f51\u7edc\u6d41\u4e2d\u4e00\u4e2a\u5e38\u7528\u7684\u6280\u5de7\uff1a**\u62c6\u70b9\u3002**\n\n**\u4e5f\u5c31\u662f\u628a\u70b9$u$\u62c6\u6210\u70b9$(u1,u2)$,\u5206\u522b\u8868\u793a\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u4e24\u70b9\u95f4\u7684\u5bb9\u91cf\u4e3a1\uff08\u4e3a\u4e86\u9650\u5236\u7ecf\u8fc7\u6b64\u70b9\u7684\u6d41\u91cf\uff08\u8def\u5f84\uff09\u53ea\u67091\uff09\uff0c\u8d39\u7528\u4e3a0\uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e\u8fb9$(u,v)$\uff0c\u6211\u4eec\u5c31\u5c06\u5176\u6539\u6210\u8fb9$(u2,v1)$\u3002**\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u5efa\u8bae\u7528\u90bb\u63a5\u8868\u5b58\u56fe\uff0c\u53ef\u80fd\u8fd9\u9898\u4e0d\u4f1a\u70b8\uff0c\u4f46\u4ee5\u540e\u8fd8\u662f\u6709\u53ef\u80fd\u7684\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n  \n#define N 405\n#define M 50005\n#define INF 2139062143\n#define M127 2139062143\n  \nusing namespace std;\n  \nint n,m,ai,bi,ci,head[N],c[M],d[M],to[M],nxt[M],f[N],into[N],out[N],pre[N],s,t,minn,ans1,ans2,cnt;\n//c\u4e3a\u6d41\u91cf\uff0cd\u4e3a\u8d39\u7528\u3002\nbool vis[N];\n  \nqueue<int>q;\n  \nvoid adde(int u,int v,int a,int b){\n    cnt++;\n    to[cnt]=v;\n    c[cnt]=a;\n    d[cnt]=b;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n//\u5efa\u6b63\u5411\u8fb9     \n    cnt++;\n    to[cnt]=u;\n    c[cnt]=0;\n    d[cnt]=-b;\n    nxt[cnt]=head[v];\n    head[v]=cnt;\n//\u5efa\u53cd\u5411\u8fb9\n}\n \nbool SPFA(){//\u8dd1\u6700\u77ed\u8def\n    memset(f,127,sizeof(f));\n    q.push(s);\n    f[s]=0;\n    vis[s]=true;\n    int now;\n    while(!q.empty()){\n        now=q.front();\n        q.pop();\n        vis[now]=false;\n        for(int i=head[now];i;i=nxt[i]){\n            if(c[i]&&f[now]+d[i]<f[to[i]]){\n                f[to[i]]=f[now]+d[i];\n                pre[to[i]]=i;\n                if(!vis[to[i]]){\n                    q.push(to[i]);\n                    vis[to[i]]=true;\n                }\n            }\n        }\n    }\n    if(f[t]==M127){\n        return false;\n    }else{\n        return true;\n    }\n}\n  \nvoid EK(){//\u5957\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\n    s=1;\n    t=n*2;\n    while(SPFA()){\n        minn=INF;\n        for(int i=t;i!=s;i=to[pre[i]^1]){\n            minn=min(minn,c[pre[i]]);\n        }\n        for(int i=t;i!=s;i=to[pre[i]^1]){\n            c[pre[i]]-=minn;\n            c[pre[i]^1]+=minn;\n            ans2+=minn*d[pre[i]];//\u603b\u8d39\u7528\n        }\n        ans1++;//\u589e\u5e7f\u8def\u8def\u5f84\u6570\n    }\n}\n  \nint main(){\n    cnt=1;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){//\u6211\u7684\u5b58\u56fe\u65b9\u6cd5\u53ef\u80fd\u6709\u70b9\u5947\u602a\uff0c\u7406\u89e3\u601d\u8def\u5373\u53ef\u3002\n        if(i==1){\n            into[i]=cnt;\n            out[i]=cnt+1;\n            adde(into[i],out[i],INF,0);\n            continue;\n        }\n        if(i==n){\n            into[i]=cnt;\n            out[i]=cnt+1;\n            adde(into[i],out[i],INF,0);\n            continue;\n        }\n        into[i]=cnt;\n        out[i]=cnt+1;\n        adde(into[i],out[i],1,0);\n    }\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&ai,&bi,&ci);\n        adde(out[ai],into[bi],1,ci);\n    }\n    EK();\n    printf(\"%d %d\\n\",ans1,ans2);\n    return 0;\n}\n```\n\u66f4\u591a\u5173\u4e8e\u62c6\u70b9\u7684\u8be6\u89e3\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b[\u6211\u7684\u53e6\u4e00\u7bc7\u9898\u89e3\uff1a\u5403\u996dDining](https://www.luogu.org/blog/lc-2018-Canton/solution-p2891)\uff0c\u8fd9\u662f\u4e00\u9053\u5f88\u597d\u7684\u4f8b\u9898\u3002",
        "postTime": 1533379232,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "### \u3010\u9898\u76ee\u3011\n![\u9898\u76ee](https://cdn.luogu.com.cn/upload/pic/26082.png)\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n- \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u88f8\u9898\u3002\n- \u56e0\u4e3a\u6709\u5bf9\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u7684\u9650\u5236\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u62c6\u70b9\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u70b91\u548c\u70b92\u3002\n- \u628a\u6bcf\u4e2a\u70b9\u7684\u70b91\u548c\u70b92\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff1b\n\t- \u7279\u6b8a\u7684\uff0c\u7531\u4e8e\u5bbf\u820d\u548c\u5b66\u6821\u53ef\u4ee5\u65e0\u9650\u6b21\u8bbf\u95ee\uff0c\u6240\u4ee5\u5bbf\u820d\u548c\u5b66\u6821\u7684\u70b91\u548c\u70b92\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u7a77\u5927\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n- \u628a\u70b9a\u7684\u70b92\u4e0e\u70b9b\u7684\u70b91\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u957f\u5ea6\u7684\u8fb9\uff1b\n- \u628a\u6e90\u70b9\u5411\u5bbf\u820d\u70b91\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u65e0\u7a77\u5927\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff1b\n- \u628a\u5b66\u6821\u70b92\u5411\u6c47\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u65e0\u7a77\u5927\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff1b\n- \u7136\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\u5373\u53ef\u3002\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\n#define INF 0x3f3f3f3f\nint cur=1,n,m,s,t,mcost,mflow;\nint head[5005],dis[5005],flow[5005],pre[5005];\nstruct EDGE{\n    int t,next,w,f;\n}e[100005];\nvoid add(int a,int b,int w,int f)\n{\n    cur++;e[cur].t=b;e[cur].next=head[a];e[cur].w=w;e[cur].f=f;head[a]=cur;\n    cur++;e[cur].t=a;e[cur].next=head[b];e[cur].w=0;e[cur].f=-f;head[b]=cur;\n}\n\nqueue < int > q;\nbool vis[5005];\nbool SPFA(int s,int t)\n{\n    memset(dis,INF,sizeof dis);\n    memset(vis,0,sizeof vis);\n    dis[s]=0;\n    vis[s]=1;\n    flow[s]=INF;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int h=head[u];h!=-1;h=e[h].next)\n        {\n            int v=e[h].t,f=e[h].f;\n            if (e[h].w&&dis[u]+f<dis[v])//????????????\n            {\n                dis[v]=dis[u]+f;//??????\n                flow[v]=min(flow[u],e[h].w);//??????\n                pre[v]=h;//????\n                if (!vis[v])\n                {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    return dis[t]!=INF;\n}\n\nvoid Update(int s,int t)\n{\n    int x=t;\n    while (x!=s)\n    {\n        int i=pre[x];\n        e[i].w-=flow[t];\n        e[i^1].w+=flow[t];\n        x=e[i^1].t;\n    }//??????????????\n    mflow+=flow[t];\n    mcost+=flow[t]*dis[t];//????\n}\nvoid E_K(int s,int t)\n{\n    while (SPFA(s,t))//????????\n        Update(s,t);\n}\n\n#define nxt(x) (x+n)\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    s=0;t=2*n+1;\n    memset(head,-1,sizeof head);\n    for (int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(nxt(a),b,1,c);\n    }\n    add(s,1,INF,0);\n    add(nxt(n),t,INF,0);\n    add(1,nxt(1),INF,0);\n    add(n,nxt(n),INF,0);\n    for (int i=2;i<n;i++)\n    {\n    \tadd(i,nxt(i),1,0);\n    }\n    E_K(s,t);\n    printf(\"%d %d\\n\",mflow,mcost);\n    return 0;\n} \n```",
        "postTime": 1533039243,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u62ff\u5230\u624b\uff0c\u770b\u5230\u201c\u4ed6\u5e0c\u671b\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8dd1\u7684\u8def\u7a0b\u5c3d\u91cf\u77ed\uff0c\u4f46\u662f\u53c8\u5e0c\u671b\u8bad\u7ec3\u5468\u671f\u5305\u542b\u7684\u5929\u6570\u5c3d\u91cf\u957f\u3002\u201d\u8fd9\u53e5\u8bdd\u4e4b\u540e\uff0c\u5f88\u5feb\u60f3\u5230\u4e86\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\uff08~~\u597d\u5427\u5176\u5b9e\u662f\u770b\u4e86\u6807\u7b7e~~\uff09\u770b\u5230\u9898\u76ee\u91cc\u7ed9\u7684\u90a3\u5f20\u56fe\uff0c\u5fc3\u60f3\u8fd8\u6709\u8fd9\u4e48\u826f\u5fc3\u7684\u9898\u76ee\uff0c\u4e8e\u662f\u7167\u7740\u5efa\u5b8c\u56fe\u540e\u8dd1spfa\u8d39\u7528\u6d41\uff0c\u8dd1\u51fa\u6765\u4e2a2 8\u2026\u2026\u9047\u5230\u4e86\u4ec0\u4e48\u95ee\u9898\u5462\uff1f\n\u73b0\u5728\u770b\u770b\u8fd9\u5f20\u56fe![](https://cdn.luogu.com.cn/upload/pic/23729.png )\n\n\u5982\u679c\u4e0d\u52a0\u9650\u5236\uff0c4\u8fd9\u4e2a\u70b9\u662f\u53ef\u4ee5\u91cd\u590d\u8dd1\u7684\u3002\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ecf\u5178\u7684\u65b9\u6cd5\u6765\u9650\u5236\u7ecf\u8fc7\u7684\u6b21\u6570\u2014\u2014\u62c6\u70b9![](https://cdn.luogu.com.cn/upload/pic/23736.png )\n\n\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u4e2d\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fd9\u6837\u5728\u6d41\u8fc7\u4e00\u6b21\u4ee5\u540e\u6d41\u91cf\u53d8\u4e3a0\uff0c\u8fd9\u4e2a\u70b9\u5c31\u53ea\u80fd\u7528\u4e00\u6b21\u4e86\u3002\n\n\u73b0\u5728\u653e\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nstruct edge\n{\n\tint u,v,x,f,s;\n}ed[1000010];\nint head[1000010];\nint dis[1000010];\nint vis[1000010];\nint que[1000010];\nint fro[1000010];\nint n,m,s,e,h,t=1,cnt,ans,flow;\nvoid add(int x,int y,int z,int w)\n{\n\ted[cnt].u=head[x];\n\ted[cnt].v=y;\n\ted[cnt].x=x;\n\ted[cnt].f=z;\n\ted[cnt].s=w;\n\thead[x]=cnt++;\n}\nbool spfa()\n{\n\tfor(int i=1;i<=n*n;i++)\n\t\tdis[i]=2147483647;\n\tmemset(vis,0,sizeof(vis));\n\tdis[s]=0,vis[s]=1,que[t]=s;\n\th=0,t=1;\n\twhile(h!=t)\n\t{\n\t\tint temp=que[++h];\n\t\tfor(int i=head[temp];i!=-1;i=ed[i].u)\n\t\t{\n\t\t\tif(dis[ed[i].v]>dis[ed[i].x]+ed[i].s&&ed[i].f!=0)\n\t\t\t{\n\t\t\t\tdis[ed[i].v]=dis[ed[i].x]+ed[i].s;\n\t\t\t\tfro[ed[i].v]=i;\n\t\t\t\tif(vis[ed[i].v]==0)\n\t\t\t\t{\n\t\t\t\t\tvis[ed[i].v]=1;\n\t\t\t\t\tque[++t]=ed[i].v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[temp]=0;\n\t}\n\tif(dis[e]!=2147483647)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\nvoid f()\n{\n\tint minn=2147483647;\n\tfor(int i=e;i!=s;i=ed[fro[i]].x)\n\t\tminn=min(minn,ed[fro[i]].f);\n\tfor(int i=e;i!=s;i=ed[fro[i]].x)\n\t{\n\t\ted[fro[i]].f-=minn;\n\t\ted[fro[i]^1].f+=minn;\n\t\tans+=minn*ed[fro[i]].s;\n\t}\n\tflow+=minn;\n}\nint main()\n{\n\tcin>>n>>m;\n\ts=1+n,e=n;\n\tmemset(head,-1,sizeof(head));\n\tfor(int i=2;i<n;i++)\n\t{\n\t\tadd(i,i+n,1,0);\n\t\tadd(i+n,i,0,0);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x+n,y,1,z);\n\t\tadd(y,x+n,0,-z);\n\t}\n\twhile(spfa())\n\t\tf();\n\tcout<<flow<<\" \"<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1531726648,
        "uid": 39862,
        "name": "qwqqqq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](http://blog.csdn.net/a_comme_amour/article/details/79632771)\n\n\u9898\u76ee\n-\n\n[\u4f20\u9001\u95e8](http://www.lydsy.com/JudgeOnline/problem.php?id=1877)\n\n\u9898\u89e3\n-\n\n\u6211\u83dc\u5230\u6ca1\u6709\u770b\u51fa\u8fd9\u662f\u4e00\u9053\u8d39\u7528\u6d41\u7684\u677f\u5b50\u9898\uff1b\n\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u53ef\u4ee5\u60f3\u5230\u62c6\u70b9\u7684\u601d\u60f3\uff1b\n\u5bf9\u4e8e\u9664\u4e86S\u548cT\u7684\u70b9\uff0c\u62c6\u70b9\u7684\u8fde\u8fb9\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b\n\u5176\u4ed6\u7684\u8fb9\u7684\u5bb9\u91cf\u5b9a\u4e3a1\uff0c\u8d39\u7528\u4e3a\u8def\u5f84\u957f\u5ea6\uff0c\u8dd1\u51fa\u6700\u5927\u6d41\u5373\u4e3a\u6700\u5927\u5929\u6570\uff0c\u6700\u5c0f\u8d39\u7528\u548c\u4e3a\u6700\u77ed\u8def\u5f84\uff1b\n\n\u4ee3\u7801\n-\n\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int maxn=100001;\nconst int inf=1e9;\n\nint n,m,s,t,maxflow,mincost;\nstruct Edge{\n\tint next,to,dis,flow;\n}edge[maxn<<1];\nint num_edge=-1,head[maxn],pre[maxn],dis[maxn],flow[maxn],last[maxn];\n\nvoid add_edge(int from,int to,int flow,int dis)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].dis=dis;\n\tedge[num_edge].flow=flow;\n\tedge[num_edge].to=to;\n\thead[from]=num_edge;\n}\nvoid add(int x,int y,int z,int f) {add_edge(x,y,z,f); add_edge(y,x,0,-f);}\nbool vis[maxn];\nqueue <int> q;\nbool spfa(int s,int t)\n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(s); vis[s]=1; pre[t]=-1; dis[s]=0;\n\t\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop();\n\t\tvis[now]=0;\n\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tif (edge[i].flow>0 && dis[edge[i].to]>dis[now]+edge[i].dis)//\u6b63\u8fb9 \n\t\t\t{\n\t\t\t\tdis[edge[i].to]=dis[now]+edge[i].dis;\n\t\t\t\tflow[edge[i].to]=min(flow[now],edge[i].flow);\n\t\t\t\tpre[edge[i].to]=now;\n\t\t\t\tlast[edge[i].to]=i;\n\t\t\t\tif (!vis[edge[i].to])\n\t\t\t\t{\n\t\t\t\t\tvis[edge[i].to]=1;\n\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn pre[t]!=-1;\n}\n\nvoid MCMF(int s,int t)\n{\n\twhile (spfa(s,t))\n\t{\n\t\tint now=t;\n\t\tmaxflow+=flow[t];\n\t\tmincost+=flow[t]*dis[t];\n\t\twhile (now!=s)\n\t\t{\n\t\t\tedge[last[now]].flow-=flow[t];\n\t\t\tedge[last[now]^1].flow+=flow[t];\n\t\t\tnow=pre[now];\n\t\t}\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&n,&m);\n\tint S=1,T=n;\n\tfor (int i=2; i<=n-1; i++) add(i,i+n,1,0);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint x,y,z; scanf(\"%d%d%d\",&x,&y,&z);\n\t\tif (x==1) add(S,y,1,z);\n\t\telse if (y==n) add(x+n,T,1,z);\n\t\telse add(x+n,y,1,z);\n\t}\n//\tfor (int i=0; i<=num_edge; i++) printf(\"%d: %d %d %d %d\\n\",i,edge[i^1].to,edge[i].to,edge[i].flow,edge[i].dis);\n\tMCMF(S,T);\n\tprintf(\"%d %d\",maxflow,mincost);\n\treturn 0;\n}\n```\n",
        "postTime": 1521627094,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    },
    {
        "content": "\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u4e0d\u80fd\u91cd\u590d\u7ecf\u8fc7\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u56e0\u6b64\u5f88\u81ea\u7136\u7684\u60f3\u5230\u5c06\u5341\u5b57\u8def\u53e3\u62c6\u5206\u4e3a\u4e00\u4e2a\u5165\u70b9\u548c\u4e00\u4e2a\u51fa\u70b9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u82b1\u8d39\u4e3a0\u3002\u4f46\u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u4e00\u5b9a\u4f1a\u91cd\u590d\u7ecf\u8fc7\u7684\uff0c\u56e0\u6b64\u5c06\u8fd9\u4e24\u4e2a\u70b9\u62c6\u5206\u65f6\uff0c\u5e94\u5728\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e0a\u5bb9\u91cf\u4e3aMAX\uff0c\u82b1\u8d39\u4e3a0\u7684\u8fb9\u3002\n\n\u5c06\u6bcf\u6761\u8def\u89c6\u4e3a\u5bb9\u91cf\u4e3a1\uff0c\u82b1\u8d39\u4e3a\u8def\u5f84\u957f\u5ea6\u7684\u8fb9\uff0c\u5efa\u56fe\u3002\n\n\u4e4b\u540e\u53ea\u9700\u8981\u8dd1\u4e00\u8fb9\u6a21\u677f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define MAX 1e8\nusing namespace std;\n\nint map[405][405],dis[405],pre[405],f[405],fl[405],cost[405][405],n,m,flow,discost;\nqueue<int>q;\n\nint bfs(int s,int t)\n{\n    int i; \n    \n    memset(dis,127,sizeof(dis));\n    memset(f,0,sizeof(f));\n    memset(pre,-1,sizeof(pre)); \n    \n    while(!q.empty())\n        q.pop();\n    \n    dis[s]=0;\n    f[s]=1;\n    q.push(s);\n    pre[s]=0;\n    fl[s]=MAX;\n    \n    while(!q.empty())\n    {\n        int p=q.front();\n        f[p]=0;\n        q.pop();\n        \n        for(i=1;i<=2*n;i++)\n            if(map[p][i]&&dis[i]>dis[p]+cost[p][i])\n            {\n                dis[i]=dis[p]+cost[p][i];\n                fl[i]=min(fl[p],map[p][i]);\n                pre[i]=p;\n                \n                if(!f[i]) \n                {\n                    f[i]=1;\n                    q.push(i);    \n                }\n            }\n    }\n    \n    if(pre[t]==-1) return 0;\n    return fl[t];\n}\n\nvoid maxflow(int s,int t)\n{\n    int k,last;\n    \n    while(bfs(s,t))\n    {\n        k=t;\n        \n        while(k!=s)\n        {\n            last=pre[k];            \n            \n            map[last][k]-=fl[t];\n            map[k][last]+=fl[t];\n                \n            k=last;\n        }\n        \n        flow+=fl[t];\n        discost+=dis[t];\n    }\n}\n\nint main()\n{\n    int i,a,b,c,j;\n    \n    scanf(\"%d%d\",&n,&m);\n    \n    map[1][n+1]=MAX;\n    map[n][n+n]=MAX;\n    \n    for(i=2;i<n;i++)\n        map[i][i+n]=1;\n    \n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        cost[a+n][b]=c;\n        cost[b][a+n]=-c;\n        map[a+n][b]=1;\n    }\n    \n    maxflow(1,n);\n    \n    printf(\"%d %d\",flow,discost);\n    \n    return 0;\n}\n```",
        "postTime": 1493967341,
        "uid": 18810,
        "name": "Tirpitz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2153 \u3010[SDOI2009]\u6668\u8dd1\u3011"
    }
]