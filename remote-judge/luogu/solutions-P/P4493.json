[
    {
        "content": "\u5b89\u5229\u535a\u5ba2:http://phantasmdragon.leanote.com/post/%5B%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%5D%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%5B%E5%80%8D%E5%A2%9E%5D%5B%E4%B9%B1%E6%90%9E%5D%E3%80%8CHAOI2018%E3%80%8D%E5%AD%97%E4%B8%B2%E8%A6%86%E7%9B%96\n\n\u7f8e\u5999\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u4e71shen\u641exian\u9898\n\u9996\u5148\u5c31\u662f\u660e\u663e\u7684\u8d2a\u5fc3, \u6bcf\u6b21\u80af\u5b9a\u9009\u62e9\u5728 $A$ \u4e2d\u6700\u5de6\u8fb9\u7684\u4e32\u8fdb\u884c\u5220\u9664, \u76f4\u5230\u6536\u76ca $\\leq 0$ \u65f6\u505c\u6b62.\n\n\u6ce8\u610f\u5230\u975e\u5e38\u5947\u602a\u6570\u636e\u8303\u56f4, \u6bd2\u7624\u51fa\u9898\u4eba\u5728\u6697\u793a\u6211\u4eec\u4ec0\u4e48\u5462?\n\n~~\u4e0d\u96be\u770b\u51fa~~\u8fd9\u9053\u9898\u9700\u8981\u5199\u4e24\u4e2a\u505a\u6cd5\u62fc\u5728\u4e00\u8d77.\n\n\u5bf9\u4e8e $r-l \\geq 2000$, \u6211\u4eec\u5bf9 $A$  \u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a+\u7ebf\u6bb5\u6811\u5408\u5e76\u6c42\u51fa\u6bcf\u4e2a\u81ea\u52a8\u673a\u8282\u70b9\u7684 $endpos$ \u96c6\u5408, \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee,\u901a\u8fc7\u500d\u589e\u8df3\u540e\u7f00\u94fe\u63a5\u627e\u5230\u8be2\u95ee\u533a\u95f4\u5b57\u7b26\u4e32 $B_l \\dots B_r$  \u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9,\u7136\u540e\u5728\u8be5\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u6328\u4e2a\u627e\u6700\u5de6\u8fb9\u7684 $endpos$, \u6ce8\u610f\u4e00\u4e0b\u9009\u51fa\u7684 $endpos$ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e0d\u80fd\u76f8\u4ea4\u5373\u53ef.\n\n\u8fd9\u6837\u56e0\u4e3a $r-l \\geq 2000$, \u6211\u4eec\u6700\u591a\u4e0d\u4f1a\u8df3\u8d85\u8fc7 $\\frac{n}{2000}$ \u6b21,\u6240\u4ee5\u4e0d\u4f1a\u6302.\n\n\u5bf9\u4e8e $r-l\\leq 51$, \u6211\u4eec\u5904\u7406\u4e00\u4e2a\u500d\u589e\u6570\u7ec4 $nxt_{len,i,j}$ \u8868\u793a:\n\n\u957f\u5ea6\u4e3a $len$, \u5728 $A$ \u4e2d\u5de6\u7aef\u70b9\u4e3a $i$ \u7684\u5b57\u7b26\u4e32 $s$, \u540e $2^j$ \u4e2a\u4e0e $s$ \u76f8\u540c\u7684\u5b57\u7b26\u4e32\u7684\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e. \n\n\u987a\u5e26\u518d\u8bb0\u4e00\u4e2a $sum_{len,i,j}$, \u8868\u793a\u4ece $i$ \u5f00\u59cb,\u540e\u9762\u5305\u62ec\u81ea\u5df1\u4e0e $A_i \\dots A_{i+len-1}$ \u76f8\u540c\u7684 $2^j$ \u4e2a\u5b57\u7b26\u4e32\u7684\u6743\u503c\u4e4b\u548c\u662f\u591a\u5c11.\n\n\u5728\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e2d,\u8fd9\u7684 $2^j$ \u4e2a\u5b57\u7b26\u4e32\u90fd\u4e0d\u80fd\u76f8\u4ea4.\n\n\u8fd9\u4e24\u4e2a\u6570\u7ec4\u53ef\u4ee5\u7528\u54c8\u5e0c\u6765\u5904\u7406, \u5f97\u5230\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e4b\u540e\u5c31\u53ef\u4ee5\u500d\u589e $O(\\log n)$\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u4e86.\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u540c\u7684 $len$ \u6211\u4eec\u90fd\u8981\u91cd\u65b0\u5904\u7406\u4e00\u4e0b\u8fd9\u4e2a\u88ab\u6574\u6570\u7ec4,\u800c $r-l \\leq 51$ \u6240\u4ee5 $len$ \u7684\u53d6\u503c\u4e0d\u4f1a\u8d85\u8fc7 $51$ \u4e2a,\u6240\u4ee5\u79bb\u7ebf\u4e00\u4e0b, \u5bf9\u4e8e $len$ \u76f8\u540c\u7684\u8be2\u95ee\u4e0d\u8981\u91cd\u590d\u5904\u7406\u5c31\u884c\u4e86, \u987a\u4fbf\u53ef\u4ee5\u7701\u6389\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4.\n\n\u7136\u540e\u5bf9\u4e8e $51 \\leq r-l \\leq 2000$ \u7684, \u4fdd\u8bc1\u968f\u673a\u5206\u5e03, \u800c\u4e14\u4e2a\u6570\u4e0d\u4f1a\u592a\u591a, \u6240\u4ee5\u7528 $r-l \\geq 2000$ \u7684\u65b9\u6cd5\u5904\u7406\u5c31\u884c\u4e86.\n\n----------\n\n\u8d34\u4e0a\u4ee3\u7801:\n```\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<unordered_map>\n#define maxn 300005\n#define ll long long\nusing namespace std;\nstruct node{int l1,r1,l2,r2,id;}Q[maxn];\nbool operator <(node a,node b){return a.r2-a.l2<b.r2-b.l2;}\nint n,K;\nchar A[maxn],B[maxn];\nnamespace SGT\n{\n\tint ls[maxn*60],rs[maxn*60],rt[maxn*60],rpos[maxn*60],tot;\n\tvoid ins(int &p,int l,int r,int x)\n\t{\n\t\tif(!p) p=++tot;\n\t\tif(l==r) {rpos[p]=x;return;}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) ins(ls[p],l,mid,x);\n\t\telse ins(rs[p],mid+1,r,x);\n\t\trpos[p]=max(rpos[ls[p]],rpos[rs[p]]);\n\t}\n\tint Merge(int u,int v,int l,int r)\n\t{\n\t\tif((!u)||(!v)) return (u?u:v);\n\t\telse if(l==r)\n\t\t{\n\t\t\trpos[++tot]=l;\n\t\t\treturn tot;\n\t\t}\n\t\tint New=++tot,mid=(l+r)>>1;\n\t\tls[New]=Merge(ls[u],ls[v],l,mid);\n\t\trs[New]=Merge(rs[u],rs[v],mid+1,r);\n\t\trpos[New]=max(rpos[ls[New]],rpos[rs[New]]);\n\t\treturn New;\n\t}\n\tint Query(int p,int l,int r,int x)\n\t{\n\t\tif(l==r) return l;\n\t\tint mid=(l+r)>>1;\n\t\tif(rpos[ls[p]]>=x) return Query(ls[p],l,mid,x);\n\t\telse return Query(rs[p],mid+1,r,x); \n\t}\n}\nnamespace SAM\n{\n\tint mx[maxn],par[maxn],rt=1,tot=1,last=rt;\n\tint son[maxn][26],pos[maxn],buc[maxn],td[maxn],id[maxn];\n    int Jump[22][maxn],enpos[maxn],enlen[maxn];\n\tint push(int x)\n\t{\n\t    mx[++tot]=x;\n\t    return tot;\n\t}\n\tvoid extend(int t)\n\t{\n\t    int np,nq,p,q;\n\t    np=push(mx[last]+1);\n\t    for(p=last;p&&!son[p][t];p=par[p]) son[p][t]=np;\n\t    if(!p) par[np]=rt;\n\t    else\n\t    {\n\t        q=son[p][t];\n\t        if(mx[q]==mx[p]+1) par[np]=q;\n\t        else\n\t        {\n\t            nq=push(mx[p]+1),id[nq]=id[np];\n\t            memcpy(son[nq],son[q],sizeof(son[q]));\n\t            par[nq]=par[q],par[q]=par[np]=nq;\n\t            for(;son[p][t]==q;p=par[p]) son[p][t]=nq;\n\t        }\n\t    }\n\t    last=np;\n\t}\n\tvoid TopSort()\n\t{\n\t\tfor(int i=1;i<=tot;i++) buc[mx[i]]++;\n\t\tfor(int i=1;i<=n;i++) buc[i]+=buc[i-1];\n\t\tfor(int i=1;i<=tot;i++) td[buc[mx[i]]--]=i;\n\t}\n\tvoid GetSegTree()\n\t{\n\t\tTopSort();\n\t\tfor(int i=2;i<=tot;i++) SGT::ins(SGT::rt[i],1,n,id[i]);\n\t\tfor(int i=tot;i>1;i--)\n\t\t{\n\t\t\tint t=td[i];\n\t\t\tif(par[t]!=1)\n\t\t\t\tSGT::rt[par[t]]=SGT::Merge(SGT::rt[par[t]],SGT::rt[t],1,n);\n\t\t}\n\t}\n\tint Run(int pos,int len)\n\t{\n\t\tint now=enpos[pos];\n        if(enlen[pos]<len) return 0;\n        for(int i=20;i>=0;i--)\n            if(Jump[i][now]&&mx[Jump[i][now]]>=len)\n                now=Jump[i][now];\n        return now;\n\t}\n    void GetJump()\n    {\n        for(int i=1;i<=tot;i++)\n            Jump[0][i]=par[i];\n        for(int i=1;i<=20;i++)\n            for(int j=1;j<=tot;j++)\n                Jump[i][j]=Jump[i-1][Jump[i-1][j]];\n        for(int i=1,now=1,nowlen=0;i<=n;i++)\n        {\n            if(son[now][B[i]-'a'])\n                nowlen++,now=son[now][B[i]-'a'];\n            else\n            {\n                while(now&&!son[now][B[i]-'a']) now=par[now];\n                if(!now) nowlen=0,now=rt;\n                else nowlen=mx[now]+1,now=son[now][B[i]-'a'];\n            }\n            enpos[i]=now,enlen[i]=nowlen;\n        }\n    }\n\tll Solve(int l1,int r1,int l2,int r2)\n\t{\n\t\tint len=r2-l2+1;\n\t\tr1=min(r1,K+len-1);\n\t\tint p=Run(l2+len-1,len);\n\t\tif(!p) return 0;\n\t\tif(SGT::rpos[SGT::rt[p]]<l1+len-1) return 0;\n\t\tint st=SGT::Query(SGT::rt[p],1,n,l1+len-1),en=r1;\n\t\tif(st>en) return 0;\n\t\tll ans=0;\n\t\twhile(st<=en)\n\t\t{\n\t\t\tif(st-len+1>=K) break;\n\t\t\tans+=K-(st-len+1);\n\t\t\tif(SGT::rpos[SGT::rt[p]]<st+len) break;\n\t\t\tst=SGT::Query(SGT::rt[p],1,n,st+len); \n\t\t}\n\t\treturn ans;\n\t}\n}\nnamespace MI\n{\n\tconst int P=1000000007ll;\n\tint nxt[21][100005]; ll sum[21][maxn];\n\tll Ha[maxn],pw[maxn];\n\tvoid GetHash()\n\t{\n\t\tpw[0]=1;\n\t\tfor(int i=1;i<maxn;i++) pw[i]=pw[i-1]*P; \n\t\tfor(int i=1;i<=n;i++) Ha[i]=Ha[i-1]+A[i]*pw[i];\n\t}\n\tvoid GetNxt(int len)\n\t{\n\t\tunordered_map<ll,deque<int>> pre;\n\t\tmemset(nxt,0,sizeof(nxt));\n\t\tfor(int i=1;i<=n-len+1;i++)\n\t\t{\n\t\t\tll now=Ha[i+len-1]-Ha[i-1];\n\t\t\tnow*=pw[n-len-i+1];\n\t\t\twhile(pre[now].front()<=i-len&&pre[now].size())\n\t\t\t\tnxt[0][pre[now].front()]=i,pre[now].pop_front();\n\t\t\tpre[now].push_back(i); \n\t\t\tsum[0][i]=K-i;\n\t\t}\n\t\tfor(int j=1;j<=20;j++)\n\t\t\tfor(int i=1;i<=n-len+1;i++)\n\t\t\t\tnxt[j][i]=nxt[j-1][nxt[j-1][i]],sum[j][i]=sum[j-1][i]+sum[j-1][nxt[j-1][i]];\n\t}\n\tll Solve(int l1,int r1,int l2,int r2)\n\t{\n\t\tint len=r2-l2+1;\n\t\tr1=min(r1,K+len-1);\n\t\tint p=SAM::Run(l2+len-1,len);\n\t\tif(!p) return 0;\n\t\tif(SGT::rpos[SGT::rt[p]]<l1+len-1) return 0;\n\t\tint st=SGT::Query(SGT::rt[p],1,n,l1+len-1)-len+1,en=r1-len+1;\n\t\tif(st>en) return 0;\n\t\tll ans=0;\n\t\tfor(int i=20;i>=0;i--)\n\t\t\tif(nxt[i][st]&&nxt[i][st]<=en)\n\t\t\t\tans+=sum[i][st],st=nxt[i][st];\n\t\tans+=sum[0][st];\n\t\treturn ans;\n\t}\n}\nll ans[maxn];\nint main()\n{\n\tscanf(\"%d%d\",&n,&K);\n\tscanf(\"%s%s\",A+1,B+1);\n\tfor(int i=1;i<=n;i++)\n\t\tSAM::id[SAM::tot+1]=i,SAM::extend(A[i]-'a');\n\tSAM::GetSegTree(),SAM::GetJump();\n\tMI::GetHash();\n\tint T; scanf(\"%d\",&T);\n\tfor(int i=1;i<=T;i++)\n\t\tscanf(\"%d%d%d%d\",&Q[i].l1,&Q[i].r1,&Q[i].l2,&Q[i].r2),Q[i].id=i;\n\tsort(Q+1,Q+T+1);\n\tfor(int i=1;i<=T;i++)\n\t{\n\t\tif(Q[i].r2-Q[i].l2+1<=51)\n\t\t{\n\t\t\tif(Q[i].r2-Q[i].l2!=Q[i-1].r2-Q[i-1].l2||i==1)\n\t\t\t\tMI::GetNxt(Q[i].r2-Q[i].l2+1);\n\t\t\tans[Q[i].id]=MI::Solve(Q[i].l1,Q[i].r1,Q[i].l2,Q[i].r2);\n\t\t}\n\t\telse ans[Q[i].id]=SAM::Solve(Q[i].l1,Q[i].r1,Q[i].l2,Q[i].r2);\n\t}\n\tfor(int i=1;i<=T;i++) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1552905336,
        "uid": 20815,
        "name": "PhantasmDragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4493 \u3010[HAOI2018]\u5b57\u4e32\u8986\u76d6\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u7279\u6b8a\u6027\u8d28\u660e\u793a\u6b63\u89e3\u2026\u2026\n\n### \u601d\u8def\n\n\u8bbe $X=50,Y=2000$\u3002\n\n\u8003\u8651\u5bf9 $P$ \u7684\u4e32\u957f\u6839\u53f7\u5206\u6cbb\u3002\n\n\u7136\u540e\u8fdb\u884c\u4e00\u4e2a\u526a\u82b1\u5e03\u6761\u7684\u8d2a\u5fc3\uff1a\u6bcf\u6b21\u628a\u80fd\u8986\u76d6\u7684\u6700\u5c0f\u4f4d\u7f6e\u8986\u76d6\u6389\u3002\n\n\u5f53 $|P|>Y$ \u65f6\uff0c\u8003\u8651\u66b4\u529b\u627e\u5230\u6bcf\u6b21\u80fd\u5339\u914d\u7684\u6700\u5c0f\u4f4d\u7f6e\uff0c\u5c31\u662f SA \u4e0a\u533a\u95f4\u67e5\u8be2\u5927\u4e8e\u7b49\u4e8e\u67d0\u4e2a\u6570\u7684\u6700\u5c0f\u6570\uff0c\u76f4\u63a5\u4e3b\u5e2d\u6811\u5373\u53ef\u7ef4\u62a4\uff1b\u7531\u4e8e\u5339\u914d\u6b21\u6570\u4e0d\u8d85\u8fc7 $\\frac nY$\uff0c\u5176\u5355\u6b21\u8be2\u95ee\u590d\u6742\u5ea6\u5373\u4e3a $O(\\frac nY\\log n)$\u3002\n\n\u5f53 $|P|\\le X$ \u65f6\uff0c\u6ce8\u610f\u5230\u539f\u4e32\u4e2d\u6bcf\u4e00\u4e2a\u957f\u5ea6\u5bf9\u5e94\u7684\u4e32\u5747\u4e0d\u8d85\u8fc7 $O(n)$ \u4e2a\uff0c\u5bf9\u90a3\u4e9b\u4e32\u53ef\u4ee5\u9884\u5904\u7406\u7b54\u6848\uff0c\u5176\u4f59\u5747\u65e0\u89e3\u3002\n\n\u6216\u8005\u8bf4\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u4e32\u7684\u201c\u4e0b\u4e00\u4e2a\u5339\u914d\u4f4d\u201d\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5219\u8be5\u7ed3\u6784\u6784\u6210\u68ee\u6797\uff0c\u76f4\u63a5\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765 dfs \u4e00\u904d\u68ee\u6797\uff0c\u540c\u65f6\u6811\u4e0a\u5dee\u5206\uff0c\u5bf9\u672b\u4f4d\u4e8c\u5206\u5373\u53ef\u5f97\u89e3\uff08\u4e0d\u77e5\u9053\u4e3a\u5565\u5927\u5bb6\u90fd\u5199\u7684\u500d\u589e\uff0c\u660e\u660e\u79bb\u7ebf\u4e0b\u6765\u591a\u597d\u5199\uff09\u3002\n\n\u6784\u5efa\u6811\u7684\u8fc7\u7a0b\u53ef\u4ee5\u505a\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u54c8\u5e0c\u8868\u7ef4\u62a4\u627e\u7236\u4eb2\uff0c\u9884\u5904\u7406\u590d\u6742\u5ea6 $O(nX)$\uff0c\u5355\u7ec4\u8be2\u95ee $O(\\log n)$\u3002\n\n\u5bf9 $X<|P|\\le Y$\uff0c\u7531\u4e8e\u8be2\u95ee\u4fdd\u8bc1\u5747\u5300\u968f\u673a\uff0c\u8003\u8651\u7528\u7b2c\u4e00\u79cd\u7b97\u6cd5\uff0c\u5355\u6b21\u671f\u671b\u590d\u6742\u5ea6\u4e3a\n\n$$\nO(\\frac{\\log n}{Y-X}\\int_X^Y\\frac nx\\operatorname{d}x)=O(\\frac{\\ln Y-\\ln X}{Y-X}n\\log n)\n$$\n\n\u5fae\u8c03\u4e00\u4e0b\u9608\u503c\uff0c\u603b\u590d\u6742\u5ea6\u8f83\u96be\u63cf\u8ff0\uff0c\u79f0\u4e3a $O(\\text{\u80fd\u8fc7})$ \u597d\u4e86\u3002\n\n\u5982\u679c\u672c\u9898\u4e0d\u4fdd\u8bc1\u7279\u6b8a\u6027\u8d28\uff0c\u8be5\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u5373\u4e3a $O(n\\sqrt{q\\log n})$\u3002\n\n### Code\n\n\u4ee5\u4e0b\u4e3a\u6838\u5fc3\u4ee3\u7801\uff0c\u8dd1\u5f97\u5f88\u5feb\u3002\n\n```cpp\nstruct Seg{\n    Seg*L,*R;uint len,v;\n    Seg(){}\n    Seg(uint n):L(NULL),R(NULL),len(n),v(-1u){\n        if(n>1)L=new Seg(n>>1),R=new Seg(n-(n>>1));\n    }\n    uint find(uint l,uint r){\n        if(l>=r)return-1;\n        if(!l&&r==len)return v;\n        if(l<(len>>1))\n            if(r<=(len>>1))return L->find(l,r);\n            else return std::min(L->find(l,len>>1),R->find(0,r-(len>>1)));\n        else return R->find(l-(len>>1),r-(len>>1));\n    }\n    Seg*chg(uint p,uint v){\n        Seg*ans=new Seg();*ans=*this;if(len==1){ans->v=v;return ans;}\n        if(p<(len>>1))ans->L=L->chg(p,v);else ans->R=R->chg(p-(len>>1),v);\n        ans->v=std::min(ans->L->v,ans->R->v);\n        return ans;\n    }\n};\nstruct Seg2{\n    Seg2*L,*R;uint len,v;\n    Seg2(uint*A,uint n):L(NULL),R(NULL),len(n),v(*A){\n        if(n>1)L=new Seg2(A,n>>1),R=new Seg2(A+(n>>1),n-(n>>1)),v=std::min(L->v,R->v);\n    }\n    uint findl(uint r,uint w){\n        if(!r||v>=w)return-1;\n        if(len==1)return 0;\n        if(r<=(len>>1))return L->findl(r,w);\n        uint ans=R->findl(r-(len>>1),w);if(~ans)return ans+(len>>1);\n        return L->findl(len>>1,w);\n    }\n    uint findr(uint l,uint w){\n        if(l==len||v>=w)return len;\n        if(len==1)return 0;\n        if(l>=(len>>1))return R->findr(l-(len>>1),w)+(len>>1);\n        uint ans=L->findr(l,w);if(ans!=(len>>1))return ans;\n        return R->findr(0,w)+(len>>1);\n    }\n};\nchr C[200005];uint SA[200005],Rank[200005],H[200005];\nvoi build(uint n){\n    for(uint i=0;i<n;i++)SA[i]=i;\n    std::sort(SA,SA+n,[&](uint a,uint b){return C[a]<C[b];});\n    for(uint i=0;i<n;i++)Rank[SA[i]]=i&&C[SA[i]]==C[SA[i-1]]?Rank[SA[i-1]]:i;\n    for(uint len=1;len<n;len<<=1){\n        static uint Cnt[200005],A[200005];\n        Cnt[0]=len;\n        for(uint i=1;i<n;i++)Cnt[i]=0;\n        for(uint i=len;i<n;i++)Cnt[Rank[i]]++;\n        for(uint i=1;i<n;i++)Cnt[i]+=Cnt[i-1];\n        for(uint i=len;i<n;i++)A[--Cnt[Rank[i]]]=i-len;\n        for(uint i=0;i<len;i++)A[i]=n-len+i;\n        for(uint i=0;i<n;i++)Cnt[i]=0;\n        for(uint i=0;i<n;i++)Cnt[Rank[i]]++;\n        for(uint i=1;i<n;i++)Cnt[i]+=Cnt[i-1];\n        for(uint i=n-1;~i;i--)SA[--Cnt[Rank[A[i]]]]=A[i];\n        for(uint i=0;i<n;i++)\n            A[SA[i]]=i&&Rank[SA[i]]==Rank[SA[i-1]]&&(SA[i]+len<n?Rank[SA[i]+len]:-1u)==\n                        (SA[i-1]+len<n?Rank[SA[i-1]+len]:-1u)?A[SA[i-1]]:i;\n        for(uint i=0;i<n;i++)Rank[i]=A[i];\n    }\n    for(uint i=0;i<n;i++)SA[Rank[i]]=i;\n    for(uint i=0,j=0;i<n;i++){\n        if(j)j--;\n        if(Rank[i])while(C[i+j]==C[SA[Rank[i]-1]+j])j++;\n        H[Rank[i]]=j;\n    }\n}\nconst uint B=50;\nuint L[100005],R[100005],S[100005],T[100005],tp;\nullt Ans[100005],Val[100005];\nstd::vector<uint>Q[B+5],Get[100005],Son[100005];\nSeg*Sg[100005];\nconst ullt Mod=1004535809,g=3,ginv=334845270;\nullt Hash[255],PreSum[100005],Pow[100005],W[100005];\nvoi dfs(uint p){\n    T[tp++]=p,W[tp]=W[tp-1]+Val[p];\n    for(auto q:Get[p]){\n        uint l=0,r=tp;\n        while(l<r){\n            uint mid=(l+r)>>1;\n            if(T[mid]<R[q])r=mid;else l=mid+1;\n        }\n        Ans[q]=W[tp]-W[l];\n    }\n    for(auto s:Son[p])dfs(s);\n    tp--;\n}\nint main()\n{\n#ifdef MYEE\n    freopen(\"QAQ.in\",\"r\",stdin);\n    // freopen(\"QAQ.out\",\"w\",stdout);\n#endif\n    uint n,q;scanf(\"%u%u\",&n,&q);for(uint i=0;i<n;i++)Val[i]=q-i-1;\n    scanf(\"%s%s\",C,C+n+1),C[n]='$',build(n<<1|1),scanf(\"%u\",&q);\n    // puts(C);\n    // for(uint i=0;i<=n*2;i++)printf(\"%2u%c\",SA[i]+1,\" \\n\"[i==n*2]);\n    // for(uint i=0;i<=n*2;i++)printf(\"%2u%c\",Rank[i]+1,\" \\n\"[i==n*2]);\n    // for(uint i=0;i<=n*2;i++)printf(\"%2u%c\",H[i],\" \\n\"[i==n*2]);\n    H[n<<1|1]=0;Seg2 Sg2(H,(n+1)<<1);Sg[n]=new Seg(n<<1|1);\n    for(uint i=n-1;~i;i--)Sg[i]=Sg[i+1]->chg(Rank[i],i);\n    for(uint i=0;i<q;i++){\n        scanf(\"%u%u%u%u\",L+i,R+i,S+i,T+i),L[i]--,T[i]-=--S[i];\n        uint l=Sg2.findl(Rank[S[i]+n+1]+1,T[i]),r=Sg2.findr(Rank[S[i]+n+1]+1,T[i]);\n        R[i]=R[i]-L[i]>=T[i]?R[i]-T[i]+1:L[i];\n        L[i]=Sg[L[i]]->find(l,r);\n        if(L[i]>=R[i])continue;\n        if(T[i]<=B)Q[T[i]].push_back(i);\n        else while(L[i]<R[i])\n            Ans[i]+=Val[L[i]],L[i]=L[i]+T[i]<=n?Sg[L[i]+T[i]]->find(l,r):R[i];\n    }\n    std::mt19937_64 rng(114514);for(uint i='a';i<='z';i++)Hash[i]=rng()%Mod;\n    Pow[0]=1;\n    for(uint i=0;i<n;i++)Pow[i+1]=Pow[i]*g%Mod;\n    for(uint i=0;i<n;i++)PreSum[i+1]=(PreSum[i]+Pow[i+1]*Hash[(uint)C[i]])%Mod;\n    for(uint i=0;i<n;i++)Pow[i+1]=Pow[i]*ginv%Mod;\n    for(uint i=1;i<=B;i++)if(Q[i].size()){\n        for(uint j=0;i+j<=n;j++)W[j]=(PreSum[i+j]+Mod-PreSum[j])*Pow[j]%Mod;\n        std::unordered_map<ullt,uint>M;\n        for(uint j=n-i;~j;j--){\n            if(i+j<=n-i)M[W[i+j]]=i+j;\n            Get[j].clear(),Son[j].clear();\n            if(~(S[j]=M.count(W[j])?M[W[j]]:-1u))Son[S[j]].push_back(j);\n        }\n        for(auto q:Q[i])Get[L[q]].push_back(q);\n        for(uint j=n-i;~j;j--)if(!~S[j])dfs(j);\n    }\n    for(uint i=0;i<q;i++)printf(\"%llu\\n\",Ans[i]);\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1676011561,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "4493"
    },
    {
        "content": "\u76ee\u524d\u7684\u4e09\u7bc7\u9898\u89e3\uff0c\u4e24\u7bc7 SAM\uff0c[\u4e00\u7bc7](https://www.luogu.com.cn/blog/dsidsi/solution-p4493)\u4ea4\u9519[\u9898](https://www.luogu.com.cn/problem/P4494)\u4e86\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd SA \u7684\u505a\u6cd5\u3002~~\u4e5f\u662f\u4e3a\u4e86\u8bc1\u660e\u7edd\u5927\u591a\u6570\u65f6\u5019 SA \u548c SAM \u53ef\u4ee5\u4e92\u66ff\u3002~~\n\n## \u6574\u4f53\u5206\u6790\n\u9996\u5148\u8d2a\u5fc3\u7684\u60f3\uff0c\u6bcf\u6b21\u80af\u5b9a\u662f\u5220\u6389\u6700\u5de6\u7684\u53ef\u884c\u4e32\u3002\u611f\u6027\u7406\u89e3\uff0c\u5982\u679c\u6211\u4eec\u5220\u6389\u4e00\u4e2a\u9760\u53f3\u7684\u4e32\uff0c\u90a3\u4e48\u6700\u5de6\u4e32\u8981\u4e48\u5220\u4e0d\u4e86\uff0c\u8981\u4e48\u4ecd\u80fd\u5220\u3002\u4ecd\u80fd\u5220\u90a3\u5c31\u4e00\u5b9a\u4f1a\u5220\u6700\u5de6\u4e32\u3002\u5220\u4e0d\u4e86\u7684\u8bdd\uff0c\u9996\u5148\u6211\u4eec\u4e00\u5b9a\u4f1a\u635f\u5931\u4e00\u5b9a\u7684\u6536\u76ca\uff0c\u800c\u4e14\u5220\u9760\u53f3\u7684\u4e00\u5b9a\u4e0d\u4f1a\u8ba9\u5de6\u8fb9\u4ea7\u751f\u65b0\u7684\u53ef\u5220\u4e32\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u5360\u6389\u53f3\u8fb9\u7684\u53ef\u5220\u4e32\u3002\u6240\u4ee5**\u6bcf\u6b21\u5220\u6700\u5de6\u7684\u53ef\u884c\u4e32\uff0c\u76f4\u5230\u5220\u4e0d\u4e86\u4e3a\u6b62**\u3002\n\n\u628a\u4e24\u4e2a\u957f\u4e32\u63a5\u5728\u4e00\u8d77\u5e76\u5206\u5272\uff0c\u6784\u9020\u51fa $SA,rank,height$ \u6570\u7ec4\uff0c\u6211\u4eec\u8003\u8651\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u6570\u636e\u7ed3\u6784\u95ee\u9898\u3002\n\n- \u4ee5\u4e0b\u8bb0\u9898\u76ee\u4e2d\u7684 $T$ \u4e32\u4e3a\u6587\u672c\u4e32\uff0c$P$ \u4e32\u4e3a\u5339\u914d\u4e32\u3002$l,r$ \u4e3a\u6587\u672c\u4e32\u5de6\u53f3\u7aef\u70b9\uff0c$len$ \u4e3a\u5339\u914d\u4e32\u957f\u5ea6\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5229\u7528 $ST$ \u8868\u548c\u4e8c\u5206\uff0c$O(n\\log n)$ \u5904\u7406\u51fa\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u53ef\u884c\u533a\u95f4\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5728\u53ef\u884c\u533a\u95f4\u91cc\u9009\u51fa\u4e00\u4e9b\u4e32\uff0c\u4f7f\u5f97\n\n1. \u4e32\u7684\u5f00\u5934\u90fd\u5728\u6587\u672c\u4e32\u4e2d\u3002\n2. \u9009\u7684\u4e32\u5c3d\u91cf\u591a\u3002\n3. \u4efb\u610f\u4e24\u4e2a\u4e32\u5f00\u5934\u81f3\u5c11\u76f8\u5dee $len$\uff0c\u5176\u4e2d $len$ \u662f\u5339\u914d\u4e32\u7684\u957f\u5ea6\u3002\n4. \u6700\u5c0f\u5316\u4e0b\u6807\u4e4b\u548c\u3002\n\n\u5bf9\u4e8e\u8981\u6c42 2\u30014\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u6bcf\u6b21\u9009\u6700\u5de6\u7684\u4e32\u3002\u8003\u8651 $SA$ \u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u9009\u6700\u5de6\u7684\u4e32\u7b49\u6548\u4e8e\u9009\u53d6\u6700\u5c0f\u4e14\u5408\u6cd5\u7684 $SA$\u3002\n\n\u89c2\u5bdf\u5e76\u4e0d\u5bfb\u5e38\u7684\u6570\u636e\u8303\u56f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6210\u4e09\u7c7b\u3002\n\n- $len\\ge 2001$\u3002\n- $len\\ge 52$\uff0c\u6570\u636e\u968f\u673a\u4e14\u5f88\u5c0f\u3002\n- $len\\le 51$\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\uff0c\u6700\u591a\u80fd\u9009\u51fa $\\frac n {len}\\le 50$ \u4e2a\u4e32\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\uff0c\u56e0\u4e3a\u6570\u636e\u5747\u5300\u968f\u673a\uff0c\u6240\u4ee5\u66b4\u529b\u4e5f\u53ef\u4ee5\u8fc7\u3002\u8fd9\u4e24\u7c7b\u6211\u4eec\u7edf\u4e00\u5904\u7406\u3002\n\n## \u66b4\u529b\u90e8\u5206\n\n\u8003\u8651\u6211\u4eec\u66b4\u529b\u8981\u505a\u7684\u5de5\u4f5c\u3002\u9996\u5148\u662f\u627e\u5230\u67e5\u8be2\u533a\u95f4\uff0c\u7136\u540e\u6bcf\u6b21\u9009\u51fa\u6570\u503c\u5728\u4e00\u6bb5\u533a\u95f4\u91cc\u7684\u6700\u5c0f\u7684 $SA$\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u53ef\u4ee5\u76f4\u63a5 $ST$ \u8868\u4e8c\u5206\u89e3\u51b3\uff1b\u7b2c\u4e8c\u90e8\u5206\u7b49\u4ef7\u4e8e\u67e5\u8be2\u533a\u95f4\u540e\u7ee7\uff0c\u7b2c\u4e09\u90e8\u5206\u53ef\u4ee5 $O(1)$ \u5b8c\u6210\u3002\u67e5\u8be2\u533a\u95f4\u540e\u7ee7\u53ef\u4ee5\u76f4\u63a5\u6811\u5957\u6811\u89e3\u51b3\uff0c\u51fa\u4e8e\u65f6\u7a7a\u8003\u8651\uff0c\u6211\u4eec\u9009\u7528\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u5b8c\u6210\uff0c\u590d\u6742\u5ea6 $O(50m\\log^2n)$\u3002\u7531\u4e8e\u5e73\u8861\u6811\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u4e0e\u5176\u5143\u7d20\u6570\u6709\u5173\uff0c\u5e76\u4e14\u6211\u4eec\u57fa\u672c\u505a\u4e0d\u5230\u9009\u51fa $50$ \u4e2a\u4e32\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u5f88\u677e\u7684\u4e0a\u754c\u3002\n\n\u6574\u4f53\u601d\u8def\u5c31\u662f\u5916\u5c42\u7ebf\u6bb5\u6811\u8bb0\u5f55\u4f4d\u7f6e\uff0c\u5185\u5c42\u5e73\u8861\u6811\u8bb0\u5f55 $sa$ \u6570\u7ec4\u3002\u6211\u4eec\u8bb0\u5f55\u521d\u59cb\u7684\u503c $p=l-1$\uff0c\u6bcf\u6b21\u627e\u5230 $p$ \u7684\u540e\u7ee7 $next$ \u540e\u66f4\u65b0\u7b54\u6848\uff0c\u7136\u540e\u5c06 $p$ \u53d8\u4e3a $next+len-1$\u3002\u5982\u6b64\u5faa\u73af\u76f4\u5230\u627e\u4e0d\u5230\u540e\u7ee7\u6216\u8005\u540e\u7ee7\u4f4d\u7f6e\u8d85\u51fa $r$\u3002\n\n\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\u5927\u533a\u95f4\u76f8\u540c\u65f6\uff0c\u7ebf\u6bb5\u6811\u62c6\u5206\u51fa\u7684\u5c0f\u533a\u95f4\u4e5f\u4e00\u5b9a\u76f8\u540c\u3002\u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5728\u7ebf\u6bb5\u6811\u4e0a\u62c6\u5206\u540e\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u76f4\u63a5\u8c03\u7528\u8fd9\u4e9b\u4f4d\u7f6e\u6c42\u540e\u7ee7\u5373\u53ef\uff0c\u53ef\u4ee5\u8fdb\u884c\u5e38\u6570\u7ea7\u522b\u7684\u4f18\u5316\u3002\n\n\u9884\u5904\u7406\u590d\u6742\u5ea6 $O(n\\log^2n)$\uff0c\u5355\u6b21\u67e5\u8be2 $O(\\log^2n)$\u3002\n\n> yy\u4e00\u79cd\u4f18\u5316\uff0c\u4e0d\u4e00\u5b9a\u5bf9\u3002\u5c06\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\uff0c\u4f7f\u7528\u83ab\u961f\u914d\u5408\u5e73\u8861\u6811\u5904\u7406\u8fd9\u4e9b\u533a\u95f4\u3002\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u533a\u95f4\u540e\u76f4\u63a5\u5904\u7406\u51fa\u8fd9\u4e9b\u533a\u95f4\u7684\u7b54\u6848\uff0c\u590d\u6742\u5ea6 $O(n\\sqrt n\\log n+50m\\log n)$\u3002\u7406\u8bba\u4e0a\u53ef\u4ee5\u5229\u7528[\u4e8c\u6b21\u79bb\u7ebf](https://www.luogu.com.cn/problem/P4887)\u505a\u5230 $O(n\\sqrt n+50m\\log n)$\u3002\n\n\u5c06 $n=10^5$ \u4e14 $len\\le 51$ \u7684\u5168\u90e8 $skip$ \u540e\u53d1\u73b0 60pts\uff0c\u56db\u4e2a WA \u70b9\u5747 $\\le 300ms$\u3002\u56e0\u6b64\u8fd9\u4e00\u90e8\u5206\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u4f53\u65f6\u95f4\u3002\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n1. \u5f97\u5230\u6240\u6709\u8be2\u95ee\u533a\u95f4\u3002\n2. \u5229\u7528\u6811\u5957\u6811\u6216\u83ab\u961f\u4e8c\u6b21\u79bb\u7ebf\uff0c\u5feb\u901f\u63d0\u53d6\u51fa\u4e00\u6bb5\u533a\u95f4\u7684\u5e73\u8861\u6811\u3002\n3. \u4e0d\u65ad\u67e5\u8be2\u540e\u7ee7\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n\n## \u82e6\u96be\u90e8\u5206\n\n\uff08\u82e6\u96be\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u91cc\u5361\u5e38\u88ab\u5361\u4e86\u4e00\u4e0a\u5348\uff0c\u7a0d\u5fae\u6539\u4ebf\u6539\u53c8\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\u3002\uff09\n\n$len\\le 51$ \u65f6\uff0c\u6211\u4eec\u4e00\u6b21\u80fd\u9009\u51fa\u7684\u4e32\u975e\u5e38\u591a\uff0c\u4f46\u4e0d\u540c\u7684\u957f\u5ea6\u975e\u5e38\u5c11\u3002\u8fd9\u63d0\u793a\u6211\u4eec\u57fa\u4e8e $len$ \u5165\u624b\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u9009\u51fa\u7684\u8fd9\u4e9b\u4e32\uff0c\u5176 $lcp\\ge len$\uff0c\u800c\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u4e00\u4e2a\u786e\u5b9a\u7684 $len$\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u80fd\u5361\u6389\u66b4\u529b\u505a\u6cd5\uff0c**\u76f8\u540c\u7684\u4e32\u5fc5\u5b9a\u5f88\u591a**\u3002\u90a3\u4e48\u5982\u4f55\u5feb\u901f\u7edf\u8ba1\u51fa\u4e00\u6bb5\u533a\u95f4\u5185\u9009\u67d0\u4e2a\u4e32\u7684\u4e0b\u6807\u548c\u5462\uff1f\n\n\u7b54\u6848\u662f\u500d\u589e\u3002\n\n\u5047\u8bbe\u5f53\u524d\u5339\u914d\u4e32\u7684\u957f\u5ea6\u4e3a $len$\uff0c\u6211\u4eec\u8bb0 $next_{i,j}$ \u8868\u793a\u4ece $i$ \u5f00\u59cb\uff08\u4e0d\u8ba1\u7b97 $i$\uff09\uff0c**\u5408\u6cd5\u4e14\u6700\u4f18\u5730**\u9009\u51fa $2^j$ \u4e2a\u4e0e $i$ \u7684 $lcp\\ge len$ \u7684\u540e\u7f00\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u8c01\u3002\u540c\u65f6\u8bb0\u5f55 $sum_{i,j}$ \u8868\u793a\u5bf9\u4e8e $next_{i,j}$ \u6240\u9009\u51fa\u7684 $2^j$ \u4e2a\u540e\u7f00\u7684\u4e0b\u6807\u4e4b\u548c\u3002\u6709\u4e86\u8fd9\u4e24\u9879\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u5230\u5df2\u77e5\u8d77\u59cb\u4f4d\u7f6e\u65f6 $O(\\log n)$ \u7edf\u8ba1\u7b54\u6848\u3002\n\n$next$ \u7684\u9012\u63a8\u5f0f\u4e0e\u500d\u589e\u6c42 $lca$ \u7684\u500d\u589e\u8868\u7c7b\u4f3c\uff0c$sum$ \u7684\u9012\u63a8\u5f0f\u5c31\u662f\u4e24\u90e8\u5206\u52a0\u8d77\u6765\uff0c\u8003\u8651\u6c42\u521d\u503c\u3002\n\n### \u5bc4\u5de7\n\n\u663e\u7136\uff0c\u6bcf\u4e2a\u540e\u7f00\u7684\u521d\u503c\u5e94\u5f53\u662f\u6309 $height$ \u5206\u7ec4\u540e\uff0c\u5b83\u6240\u5728\u7684\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5176\u7684\u540e\u7f00\u3002\u6240\u4ee5\u770b\u5230\u8fd9\u4e2a\u4f60\u5c31\u53ef\u4ee5\u6cbf\u7528\u66b4\u529b\u90e8\u5206\u7684\u6811\u5957\u6811\u6c42\u540e\u7ee7\u6c42\u89e3\u4e86\u3002\u914d\u5408\u5361\u5e38\u53ef\u4ee5\u505a\u5230\u4e0d Tle\u3002\n\n\u5361\u5e38\u4e5f\u5f88\u7b80\u5355\uff0c\u9664\u53bb\u66b4\u529b\u90e8\u5206\u63d0\u53ca\u7684\u62c6\u5206\u70b9\u9884\u5904\u7406\u5916\uff0c\u6211\u4eec\u4ea4\u6362\u500d\u589e\u8868\u7684\u4e24\u7ef4\uff08\u5373 $next_{i,j}$ \u8868\u793a\u4ece $j$ \u5f00\u59cb\u9009 $2^i$ \u4e2a\u4e32 $\\ldots$\uff09\uff0c\u5408\u6210\u4e00\u4e2a\u4e32\u540e\u63a5\u4e0a\u6765\u7684\u90a3\u4e2a\u4e32\u4e0d\u5904\u7406\uff0c\u518d\u52a0\u5165\u5feb\u8bfb\u5feb\u5199\u548c $inline$ \u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(50m\\log^2n)$\u3002\n\n### \u6b63\u89e3\n\n\u4f46\u6211\u4eec\u8981\u8003\u8651\u66f4\u4f18\u7684\u89e3\u6cd5\u3002\u91cd\u65b0\u770b $next_{i,0}$ \u7684\u5b9a\u4e49\uff1a\u4ece $i$ \u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u4e0e\u5176 $lcp\\ge len$ \u7684\u5408\u6cd5\u540e\u7f00\u3002\n\n\u6211\u4eec\u53d1\u73b0 $len\\le 51$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bd4\u8f83\u90e8\u5206\u5f88\u5c11\uff0c\u751a\u81f3\u53ef\u4ee5\u66b4\u529b\u3002\u56e0\u6b64\u6211\u4eec\u5bf9\u6bcf\u4e2a\u540e\u7f00 $i$ \u5f00\u59cb\uff0c\u6c42\u51fa\u8fd9\u4e2a\u957f\u4e32\u54c8\u5e0c\u503c $h_i=Hash(i\\ldots i+len-1)$\u3002\u90a3\u4e48 $next_{i,0}$ \u7b49\u4ef7\u4e8e\u4ece $i$ \u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u4e0e\u5176 $h$ \u76f8\u7b49\u7684\u5408\u6cd5\u4f4d\u7f6e\u3002\u56e0\u4e3a\u8981\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u5012\u5e8f\u679a\u4e3e\uff0c\u79bb\u6563\u5316+\u5355\u8c03\u961f\u5217\u5904\u7406\u5373\u53ef\u3002\u4ee3\u7801\u91cc\u7565\u6709\u4e0d\u540c\uff0c\u4f7f\u7528\u7684\u662f\u79bb\u6563\u5316+\u4e8c\u5206\u6876\u3002\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u500d\u589e\u8868\uff0c\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u77e5\u7684\u533a\u95f4\u5982\u4f55\u6c42\u89e3\uff0c\u663e\u7136\u76f4\u63a5\u500d\u589e\u5373\u53ef\u3002\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\u627e\u5230\u6700\u5c0f\u7684\u5408\u6cd5\u540e\u7f00\u3002~~\u76f4\u63a5\u6811\u5957\u6811\u6c42\u4e00\u4e2a\u540e\u7f00\u5c31\u884c\u3002~~\n\n\u8001\u60e6\u8bb0\u4f60\u90a3\u6811\u5957\u6811\u5e72\u561b\uff0c$O(\\log^2n)$ \u590d\u6742\u5ea6\u76f4\u63a5\u5426\u51b3\u3002\n\n\u6211\u4eec\u627e\u5230\u533a\u95f4\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u5148\u5c06\u5176\u500d\u589e\u5230\u5c0f\u4e8e $l$ \u4e14\u6700\u5927\u7684\u4f4d\u7f6e\u3002\u5176\u4e2d $l$ \u662f\u6587\u672c\u4e32\u5de6\u7aef\u70b9\u3002\u7136\u540e\u82e5\u5176\u5c0f\u4e8e $l$\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u5176\u518d\u8fdb\u4e00\u6b65\uff0c\u5f97\u5230\u4f4d\u7f6e $pos$\u3002\u7136\u540e\u770b $pos+len-1$ \u662f\u5426\u5927\u4e8e\u53f3\u7aef\u70b9\uff0c\u5927\u4e8e\u5219\u65e0\u89e3\uff0c\u5c0f\u4e8e\u5219\u5f00\u59cb\u500d\u589e\u3002\n\n\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5c31\u662f\u500d\u589e\u7684\u521d\u59cb\u4f4d\u7f6e\u7684\u8d21\u732e\u5e76\u6ca1\u6709\u7edf\u8ba1\u8fdb\u6765\uff0c\u6240\u4ee5\u9700\u8981\u989d\u5916\u52a0\u4e0a\u3002\n\n\u4f46\u4ecd\u7136\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u8986\u76d6\u504f\u79fb\u3002\u6211\u4eec\u627e\u8d77\u59cb\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u5982\u679c\u4ece\u5916\u9762\u8df3\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u628a\u66f4\u9760\u524d\u7684\u5408\u6cd5\u4f4d\u7f6e\u5360\u4e86\uff0c\u90a3\u4e48\u4f1a\u5bfc\u81f4\u7b54\u6848\u9505\u6389\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5f88\u597d\u5904\u7406\u3002\n\n\u6211\u4eec\u4ece $l$ \u5230 $\\min\\{l+len-1,pos,r\\}$ \u66b4\u529b\u679a\u4e3e\uff0c\u770b\u8fd9\u4e2a\u4f4d\u7f6e\u7684 $rank$ \u662f\u5426\u5728\u76ee\u6807\u533a\u95f4\u4e2d\uff0c\u5728\u7684\u8bdd\u76f4\u63a5\u5c06 $pos$ \u6539\u4e3a\u5f53\u524d\u4f4d\u7f6e\uff0c\u7136\u540e\u7ed3\u675f\u679a\u4e3e\u3002\n\n\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002\u6211\u4eec\u7684\u8986\u76d6\u4e0d\u53ef\u80fd\u8d85\u51fa $l+len-1$\uff0c\u6240\u4ee5\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u8bf4\u660e\u771f\u6ca1\u6709\u3002\u5982\u679c\u627e\u5230\u4e86\uff0c\u6700\u65e9\u627e\u5230\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c$len$ \u76f8\u540c\u7684\u7edf\u4e00\u5904\u7406\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(51m\\log n)$\uff0c\u5e38\u6570\u7565\u5927\u3002\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n\n1. \u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u5339\u914d\u4e32\u957f\u5ea6\u6392\u5e8f\u3002\u5bf9\u6bcf\u79cd\u65b0\u7684\u957f\u5ea6\u91cd\u6784\u500d\u589e\u8868\u3002\n2. \u54c8\u5e0c+\u5355\u8c03\u961f\u5217\u5904\u7406\u51fa\u500d\u589e\u8868\u521d\u503c\uff0c\u500d\u589e\u8868\u5feb\u901f\u5f97\u5230\u533a\u95f4\u7b54\u6848\u548c\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\n3. $ST$ \u8868\u4e8c\u5206\u5f97\u5230\u8be2\u95ee\u533a\u95f4\u3002\n4. \u533a\u95f4\u6700\u5c0f\u5f00\u59cb\u627e\u8be2\u95ee\u8d77\u70b9\uff0c\u6ce8\u610f\u7279\u6b8a\u7684\u8fb9\u754c\u60c5\u51b5\u3002\n5. \u4ece\u8d77\u70b9\u5f00\u59cb\u500d\u589e\uff0c\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a\u53d6\u51b3\u4e8e\u66b4\u529b\u90e8\u5206\uff0c\u4e8c\u6b21\u79bb\u7ebf $O(50m\\log n+n\\sqrt n)$\uff0c\u6811\u5957\u6811 $O(50m\\log^2n)$\u3002\n\n\u5410\u69fd\uff1a\u5f88\u79bb\u8c31\uff0c\u6211\u7b2c\u4e8c\u90e8\u5206\u5199\u7684\u5361\u5e38\u6811\u5957\u6811\u6bd4\u5361\u5e38\u7684\u54c8\u5e0c\u8fd8\u5feb\u3002\u660e\u660e\u5e38\u6570\u4f18\u5316\u90fd\u52a0\u7684\u4e00\u6837\u7684\uff0c\u4f46\u6811\u5957\u6811\u5c31\u662f\u5feb\u4e86\u4e00\u622a\u3002\n\n\u5b8c\u6574\u4ee3\u7801 6.2kb\uff0c\u5df2\u6dfb\u52a0\u6ce8\u91ca\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<vector>\n#include<algorithm>\nconst int mod=1000000007;\nusing namespace std;\nchar s[200002];\nlong long val;\nint n,m,sa[300001],rk[300001],height[300001];\nint tsa[300001],trk[600001],cnt[300001];\nint st[19][200002],lg[200002],size;\nint qrlr[101],top,root[1600002];\nint nxt[20][250002];\nlong long sum[20][250002],hh[250002],tmp[250002];\nint min(int x,int y){\n\treturn x<y?x:y;\n}\nint qr(int l,int r){\n\tint d=lg[r-l+1];\n\treturn min(st[d][l],st[d][r-(1<<d)+1]);\n}\nstruct queries{\n\tint l1,r1,l2,r2,id,len;\n\tlong long ans;\n}q[100001];\nbool operator<(queries a,queries b){\n\treturn a.len<b.len;\n}\nbool cmp(queries a,queries b){\n\treturn a.id<b.id;\n}\nstruct treap{\n\tint son[2],val,key;\n}tre[4000001];\nvoid rotate(int &k,int fx){\n\tint x=tre[k].son[fx^1];\n\ttre[k].son[fx^1]=tre[x].son[fx];\n\ttre[x].son[fx]=k;\n\tk=x;\n}\nvoid insert(int &k,int val){\n\tif(!k){\n\t\tk=++size;\n\t\ttre[k].key=rand();\n\t\ttre[k].val=val;\n\t\treturn;\n\t}\n\tif(tre[k].val>val){\n\t\tinsert(tre[k].son[0],val);\n\t\tif(tre[k].key<tre[tre[k].son[0]].key)rotate(k,1);\n\t}\n\telse{\n\t\tinsert(tre[k].son[1],val);\n\t\tif(tre[k].key<tre[tre[k].son[1]].key)rotate(k,0);\n\t}\n}\nint qlas(int k,int val){\n\tint x=root[k],res=n+1;\n\twhile(x){\n\t\tif(tre[x].val<=val)x=tre[x].son[1];\n\t\telse res=tre[x].val,x=tre[x].son[0];\n\t}\n\treturn res;\n}\nvoid out_insert(int k,int l,int r,int x,int val){\n\tinsert(root[k],val);\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tif(x<=mid)out_insert(k<<1,l,mid,x,val);\n\telse out_insert(k<<1|1,mid+1,r,x,val);\n}\nvoid sbuild(){\n\t//\u5904\u7406\u540e\u7f00\u6570\u7ec4\u3001st\u8868\n\tint i,j;\n\tn=n*2+1;\n\tfor(i=1;i<=n;i++)rk[i]=s[i]-'a'+1,cnt[rk[i]]++;\n\tfor(i=1;i<=27;i++)cnt[i]+=cnt[i-1];\n\tfor(i=n;i;i--)sa[cnt[rk[i]]--]=i;\n\tfor(i=1;i<=n;i++){\n\t\tif(s[sa[i]]==s[sa[i-1]])rk[sa[i]]=rk[sa[i-1]];\n\t\telse rk[sa[i]]=rk[sa[i-1]]+1;\n\t}\n\tfor(j=1;j<n;j*=2){\n\t\tmemcpy(tsa,sa,sizeof(sa));\n\t\tmemcpy(trk,rk,sizeof(rk));\n\t\tint tot=0;\n\t\tfor(i=n;i>n-j;i--)sa[++tot]=i;\n\t\tfor(i=1;i<=n;i++)if(tsa[i]>j)sa[++tot]=tsa[i]-j;\n\t\tfor(i=1;i<=n;i++)rk[i]=trk[sa[i]];\n\t\tmemset(cnt,0,sizeof(cnt));\n\t\tfor(i=1;i<=n;i++)cnt[rk[i]]++;\n\t\tfor(i=1;i<=n;i++)cnt[i]+=cnt[i-1];\n\t\tfor(i=n;i;i--)tsa[cnt[rk[i]]--]=sa[i];\n\t\tmemcpy(sa,tsa,sizeof(sa));\n\t\tfor(i=1;i<=n;i++){\n\t\t\tif(trk[sa[i]]==trk[sa[i-1]]&&trk[sa[i]+j]==trk[sa[i-1]+j])rk[sa[i]]=rk[sa[i-1]];\n\t\t\telse rk[sa[i]]=rk[sa[i-1]]+1;\n\t\t}\n\t\tif(rk[sa[n]]==n){\n\t\t\tfor(i=1;i<=n;i++)sa[rk[i]]=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tint len=0;\n\tfor(i=1;i<=n;i++){\n\t\tif(len)len--;\n\t\twhile(s[i+len]==s[sa[rk[i]-1]+len])len++;\n\t\theight[rk[i]]=len;\n\t}\n\tfor(i=1;i<=n;i++)st[0][i]=height[i];\n\tfor(i=2;i<=n;i++)lg[i]=lg[i/2]+1;\n\tfor(i=1;i<=lg[n];i++)for(j=1;j+(1<<i)-1<=n;j++)st[i][j]=min(st[i-1][j],st[i-1][j+(1<<i-1)]);;\n\tfor(i=1;i<=n;i++)out_insert(1,1,n,i,sa[i]);\n}\nvoid out_query(int k,int l,int r,int x,int y){\n\tif(l>=x&&r<=y){\n\t\tqrlr[++top]=k;\n\t\t//\u63d0\u53d6\u533a\u95f4\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid)out_query(k<<1,l,mid,x,y);\n\tif(mid<y)out_query(k<<1|1,mid+1,r,x,y);\n}\nint out_qlas(int val){\n\t//\u6839\u636e\u63d0\u53d6\u7684\u533a\u95f4\u67e5\u8be2\u540e\u7ee7\n\tint res=n+1,i;\n\tfor(i=1;i<=top;i++)res=min(res,qlas(qrlr[i],val));\n\treturn res;\n}\nlong long solve1(int l1,int r1,int l2,int r2){\n\t//\u66b4\u529b\u90e8\u5206\uff0c\u6811\u5957\u6811\u5199\u6cd5\n\tint pos=rk[l2],len=r2-l2+1;\n\tr1=r1-len+1;\n\tif(r1<l1)return 0;\n\tlong long ans=0;\n\tint l=1,r=pos-1,tl=pos,tr=pos;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(qr(mid+1,pos)>=len)r=mid-1,tl=mid;\n\t\telse l=mid+1;\n\t}\n\tl=pos+1,r=n;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(qr(pos+1,mid)>=len)l=mid+1,tr=mid;\n\t\telse r=mid-1;\n\t}\n\ttop=0;\n\tout_query(1,1,n,tl,tr);\n\tint bg=l1-1;\n\twhile(bg<r1){\n\t\tint nxt=out_qlas(bg);\n\t\tif(nxt>r1)break;\n\t\tans+=val-nxt;\n\t\tbg=nxt+len-1;\n\t}\n\treturn ans;\n}\nvoid buildst(int len){\n\t//\u6784\u9020\u500d\u589e\u8868\n\tmemset(hh,0,sizeof(hh));\n\tmemset(nxt,0,sizeof(nxt));\n\tmemset(sum,0,sizeof(sum));\n\t//\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u5199\u6811\u5957\u6811\uff0c\u552f\u4e00\u8981\u6ce8\u610f\u5c31\u662f\u500d\u589e\u8868\u4e24\u7ef4\u987a\u5e8f\u8981\u53cd\u8fc7\u6765\u3002\n\t//\u4ee3\u7801\u4e2d\u662f\u54c8\u5e0c\u5199\u6cd5\n\tint i,j;\n\tfor(i=1;i<=n/2;i++){\n\t\tfor(j=i;j<=i+len-1;j++)hh[i]=(hh[i]*28%mod+s[j]-'a'+1)%mod;\n\t\ttmp[i]=hh[i];\n\t}\n\tsort(tmp+1,tmp+n/2+1);\n\tint sz=unique(tmp+1,tmp+n/2+1)-tmp-1;\n\tfor(i=1;i<=n/2;i++)hh[i]=lower_bound(tmp+1,tmp+sz+1,hh[i])-tmp;\n\tvector<int>g[100001];\n\t//\u4e8c\u5206\u6876\u53ef\u4ee5\u66ff\u6362\u4e3a\u5355\u8c03\u961f\u5217\uff0c\u7801\u91cf\u66f4\u4f4e\n\tfor(i=n/2;i;i--){\n\t//\u540e\u9762\u7684\u4e32\u672c\u5c31\u4e0d\u51fa\u73b0\u5728\u6587\u672c\u4e32\uff0c\u6ca1\u5fc5\u8981\u5904\u7406\u500d\u589e\u8868\n\t\tint l=0,r=g[hh[i]].size()-1,res=-1;\n\t\twhile(l<=r){\n\t\t\tint mid=l+r>>1;\n\t\t\tif(g[hh[i]][mid]>=i+len)l=mid+1,res=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tif(res==-1)nxt[0][i]=n+1;//\u4e0d\u5b58\u5728\u8d4b\u4e2a\u6781\u5927\u503c\n\t\telse nxt[0][i]=g[hh[i]][res],sum[0][i]=nxt[0][i];\n\t\tg[hh[i]].push_back(i);\n\t}\n\tfor(i=1;i<=lg[n/2];i++){\n\t\tfor(j=1;j<=n/2;j++){\n\t\t\tnxt[i][j]=nxt[i-1][nxt[i-1][j]];\n\t\t\tsum[i][j]=sum[i-1][j]+sum[i-1][nxt[i-1][j]];\n\t\t}\n\t}\n}\nint tree[2000000];\n//\u5904\u7406\u533a\u95f4 sa \u6700\u5c0f\u503c\u3002\u4e0d\u60f3\u518d\u5199\u4e2a st \u8868\u6240\u4ee5\u5c31\u5199\u4e86\u4e2a\u7ebf\u6bb5\u6811\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\ttree[k]=sa[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\ttree[k]=min(tree[k<<1],tree[k<<1|1]);\n}\nint qmin(int k,int l,int r,int x,int y){\n\tif(l>=x&&r<=y)return tree[k];\n\tint mid=l+r>>1,res=2147483647;\n\tif(x<=mid)res=min(res,qmin(k<<1,l,mid,x,y));\n\tif(mid<y)res=min(res,qmin(k<<1|1,mid+1,r,x,y));\n\treturn res;\n}\nlong long solve2(int l1,int r1,int l2,int r2){\n\t//\u82e6\u96be\u90e8\u5206\u3002\n\tint pos=rk[l2],len=r2-l2+1;\n\tr1=r1-len+1;\n\t//\u780d\u6389\u957f\u5ea6\u4e0d\u8db3\u7684\u540e\u7f00\n\tif(r1<l1)return 0;\n\tlong long ans=0;\n\tint l=1,r=pos-1,tl=pos,tr=pos;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(qr(mid+1,pos)>=len)r=mid-1,tl=mid;\n\t\telse l=mid+1;\n\t}\n\tl=pos+1,r=n;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(qr(pos+1,mid)>=len)l=mid+1,tr=mid;\n\t\telse r=mid-1;\n\t}\n\tint i,j;\n\tint minpos=qmin(1,1,n,tl,tr);\n\tfor(i=lg[n];i>=0;i--){\n\t\tint x=nxt[i][minpos];\n\t\tif(!x||x>=l1)continue;\n\t\tminpos=x;\n\t}\n\tif(minpos<l1)minpos=nxt[0][minpos];\n\tpos=minpos;\n\tfor(i=l1;i<=pos&&i<=l1+len-1;i++){\n\t\tif(rk[i]>=tl&&rk[i]<=tr){\n\t\t\tminpos=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t//\u8986\u76d6\u4fee\u6b63\n\tif(minpos>r1)return 0;\n\tans+=val-minpos;\n\tfor(i=lg[n];i>=0;i--){\n\t\tint x=nxt[i][minpos];\n\t\tif(!x||x>r1)continue;\n\t\tans+=val*(1<<i)-sum[i][minpos];\n\t\tminpos=x;\n\t}\n\treturn ans;\n}\nint main(){\n\tint i,j;\n\tscanf(\"%d%lld\",&n,&val);\n\tscanf(\"%s\",s+1);\n\ts[n+1]='{';\n\tscanf(\"%s\",s+n+2);\n\tsbuild();\n\tbuild(1,1,n);\n\tscanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++){\n\t\tint l1,r1,l2,r2;\n\t\tscanf(\"%d%d%d%d\",&l1,&r1,&l2,&r2);\n\t\tq[i].l1=l1;q[i].l2=l2;q[i].r1=r1;q[i].r2=r2;\n\t\tq[i].id=i;q[i].len=r2-l2+1;\n\t\tif(r2-l2>=51)q[i].ans=solve1(l1,r1,l2+n/2+1,r2+n/2+1);\n\t}\n\tsort(q+1,q+m+1);\n\tfor(i=1;i<=m;i++){\n\t\tif(q[i].len>51)break;\n\t\tif(q[i].len!=q[i-1].len)buildst(q[i].len);\n\t\tq[i].ans=solve2(q[i].l1,q[i].r1,q[i].l2+n/2+1,q[i].r2+n/2+1);\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tfor(i=1;i<=m;i++)printf(\"%lld\\n\",q[i].ans);\n}\n```",
        "postTime": 1655200942,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "P4493 \u5b57\u4e32\u8986\u76d6\u9898\u89e3"
    },
    {
        "content": "### [HAOI2018]\u5b57\u4e32\u8986\u76d6\n#### Solution\n\u9996\u5148\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\u662f\u6211\u4eec\u9009\u5c3d\u91cf\u524d\u9762\u7684\u5339\u914d\uff0c\u5339\u914d\u8fc7\u540e\u518d\u5bfb\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u4f9d\u6b21\u627e\u4e0b\u53bb\u3002\n\n\u7136\u540e\u770b\u5230\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u96be\u60f3\u5230\u8fdb\u884c\u6570\u636e\u5206\u6cbb\uff0c\u8bb0$len=r-l+1$\uff0c\u5bf9\u4e8e $len\\geq 2000$ \u548c $len \\leq 50$ \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u505a\u6cd5\u3002\n\n+ \u505a\u6cd5$1$\uff1a\u5f53$len\\geq 2000$\u65f6\uff0c\u5bf9$S$\u548c$T$\u5efa\u5e7f\u4e49 SAM\uff0c\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684 endpos \u96c6\u5408\u3002\u67e5\u8be2\u7684\u65f6\u5019\u5148\u500d\u589e\u627e\u5230\u5e7f\u4e49 SAM \u4e2d$B[l...r]$\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u627e\u5230$A(s+len,t]$\u4e2d\u7b2c\u4e00\u4e2a\u4e0e$B[l,r]$\u5339\u914d\u7684\u70b9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5b9e\u73b0\uff0c\u7136\u540e\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u5373\u53ef\u3002\u663e\u7136\u6700\u591a\u53ea\u4f1a\u5339\u914d$\\frac{(t-s+1)}{2000}$\u6b21\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f$\\mathcal O(\\frac{n\\log n}{2000})$\n\n+ \u505a\u6cd5$2$\uff1a\u5f53$len\\leq 50$\u65f6\uff0c\u7531\u4e8e\u53ef\u80fd\u7684\u5339\u914d\u6b21\u6570\u5f88\u591a\uff0c\u8003\u8651\u500d\u589e\u9884\u5904\u7406\u3002\u5bf9\u6bcf\u4e00\u4e2a\u957f\u5ea6\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u672b\u5c3e\u4f4d\u7f6e\u7684\u540e$2^j$\u4e2a\u5339\u914d\u4e32\u7684\u4f4d\u7f6e\u53ca\u8d21\u732e\uff0c\u4f46\u662f\u7531\u4e8e\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u5bf9\u8be2\u95ee\u79bb\u7ebf\u7136\u540e\u6309\u957f\u5ea6\u9012\u589e\u5904\u7406\u5373\u53ef\u3002\u8be2\u95ee\u65f6\u901a\u8fc7\u7ebf\u6bb5\u6811\u627e\u5230\u7b2c\u4e00\u4e2a\u51fa\u73b0\u4f4d\u7f6e\u7136\u540e\u5229\u7528\u9884\u5904\u7406\u7684\u500d\u589e\u8868\u5411\u540e\u8df3\u5373\u53ef\uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u662f$\\mathcal O(50n\\log n)$\uff0c\u5355\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3a$\\mathcal O(\\log n)$\u3002\n\n\u800c\u5bf9\u4e8e$50< len< 2000$\u7684\u8be2\u95ee\uff0c\u7531\u4e8e\u6700\u591a\u53ea\u6709$11000$\u4e2a\u4e14\u968f\u673a\u5206\u5e03\uff0c\u6240\u4ee5\u4f7f\u7528\u505a\u6cd5$1$\u5373\u53ef\u3002\n\n#### Code\n```cpp\nconst int INF = 0x3f3f3f3f;\nconst ll llINF = 1e18;\nconst int MAXN = 2e5 + 5;\nconst int S = 50;\n\nint n,K,Q;\n\nstruct SegmentTree{\n    static constexpr int MAXM = MAXN * 40;\n    int tot;\n    int ls[MAXM],rs[MAXM],sum[MAXM];\n\n    void modify(int &k,int l,int r,int x){\n        if(!k) k = ++tot; sum[k] += 1;\n        if(l == r) return;\n        int mid = (l + r) >> 1;\n        if(x <= mid) modify(ls[k],l,mid,x);\n        else modify(rs[k],mid + 1,r,x);\n    }\n\n    int query(int k,int l,int r,int ql,int qr){\n        if(!k) return 0; if(l == r) return l;\n        int mid = (l + r) >> 1, x = 0;\n        if(ql <= mid) x = query(ls[k],l,mid,ql,qr); if(x) return x;\n        if(qr > mid) x = query(rs[k],mid + 1,r,ql,qr); return x;\n    }\n\n    int merge(int x,int y,int l,int r){\n        if(!x || !y) return x | y;\n        int k = ++tot, mid = (l + r) >> 1;\n        ls[k] = merge(ls[x],ls[y],l,mid);\n        rs[k] = merge(rs[x],rs[y],mid + 1,r);\n        sum[k] = sum[ls[k]] + sum[rs[k]]; return k;\n    }\n} sgt;\n\nstruct SAM{\n    static constexpr int MAXM = MAXN << 1;\n    int tot,last,n,m;\n    int fa[MAXM],len[MAXM],son[MAXM][26],f[MAXM][20],dep[MAXM],pos[MAXM];\n    int lg[MAXM],rt[MAXM],sta[MAXN][20],stb[MAXN][20];\n    vector<int> G[MAXM];\n\n    SAM() {last = tot = 1;}\n\n    void extend(int c){\n        static int p,q,np,nq; p = last; \n        if(son[p][c]){\n            q = son[p][c];\n            if(len[q] == len[p] + 1) {last = q; return;}\n            nq = ++tot; len[nq] = len[p] + 1;\n            memcpy(son[nq],son[q],sizeof(son[nq]));\n            fa[nq] = fa[q]; fa[q] = nq;\n            for(;p && son[p][c] == q;p = fa[p]) son[p][c] = nq;\n            last = nq; return;\n        }\n        np = last = ++tot; len[np] = len[p] + 1;\n        for(;p && !son[p][c];p = fa[p]) son[p][c] = np;\n        if(!p) {fa[np] = 1; return;}\n        q = son[p][c];\n        if(len[q] == len[p] + 1) {fa[np] = q; return;}\n        nq = ++tot; memcpy(son[nq],son[q],sizeof(son[nq]));\n        len[nq] = len[p] + 1; fa[nq] = fa[q]; fa[q] = fa[np] = nq;\n        for(;p && son[p][c] == q;p = fa[p]) son[p][c] = nq;\n    }\n\n    void dfs(int u){\n        dep[u] = dep[fa[u]] + 1; f[u][0] = fa[u];\n        for(int i = 1;i <= lg[dep[u]];i++)\n            f[u][i] = f[f[u][i - 1]][i - 1];\n        for(int v : G[u])\n            dfs(v), rt[u] = sgt.merge(rt[u],rt[v],1,m);\n    }\n\n    void build(char *s,char *t){\n        n = strlen(s + 1); m = n << 1;\n        for(int i = 1;i <= n;i++) extend(s[i] - 'a'), pos[i] = last; last = 1;\n        for(int i = 1;i <= n;i++) extend(t[i] - 'a'), pos[i + n] = last;\n        for(int i = 1, p = 1;i <= n;i++)\n            p = son[p][s[i] - 'a'], sgt.modify(rt[p],1,m,i);\n        for(int i = 1, p = 1;i <= n;i++)\n            p = son[p][t[i] - 'a'], sgt.modify(rt[p],1,m,i + n);\n        for(int i = 2;i <= tot;i++) lg[i] = lg[i >> 1] + 1;\n        for(int i = 2;i <= tot;i++) G[fa[i]].push_back(i); dfs(1);\n    }\n\n    int jump(int l,int r){\n        int u = pos[r];\n        for(int i = lg[dep[u]];i >= 0;i--)\n            if(len[f[u][i]] >= r - l + 1) u = f[u][i];\n        return u;\n    }\n\n    void initquery(int L){\n        memset(sta,0,sizeof(sta)); memset(stb,0,sizeof(stb));\n        for(int i = L;i <= n;i++){\n            int p = jump(i - L + 1,i);\n            if(i + L <= n) sta[i][0] = sgt.query(rt[p],1,m,i + L,n);\n            stb[i][0] = i - L + 1;\n        }\n        for(int i = n;i >= L;i--){\n        \tfor(int j = 1;sta[i][j - 1];j++){\n                sta[i][j] = sta[sta[i][j - 1]][j - 1];\n                stb[i][j] = stb[i][j - 1] + stb[sta[i][j - 1]][j - 1];\n            }\n        }\n    }\n\n    ll query1(int s,int t,int l,int r){\n        int L = r - l + 1;\n        if(s + L - 1 > t) return 0;\n        int p = sgt.query(rt[jump(l,r)],1,m,s + L - 1,t);\n        if(!p || p - L + 1 >= K) return 0;\n        int cnt = 1; ll sum = 0;\n        for(int i = lg[(n - p + 1) / L];i >= 0;i--)\n            if(sta[p][i] && sta[p][i] <= t && (sta[p][i] - L + 1) <= K)\n                sum += stb[p][i], p = sta[p][i], cnt += (1 << i);\n        return (ll)cnt * K - (sum + p - L + 1);\n    }\n\n    ll query2(int s,int t,int l,int r){\n        int p = jump(l,r), L = r - l + 1;\n        int x = s + L - 1; ll sum = 0;\n        while(x <= t && (x = sgt.query(rt[p],1,m,x,t))){\n            int d = K - (x - L + 1);\n            if(d < 0) break;\n            x += L; sum += d;\n        }\n        return sum;\n    }\n} sam;\n\nchar s[MAXN],t[MAXN];\nll ans[MAXN];\n\nstruct Query{\n    int s,t,l,r,id;\n};\n\nvector<Query> qry,vec[55];\n\nint main(){\n    scanf(\"%d%d%s%s%d\",&n,&K,s + 1,t + 1,&Q); sam.build(s,t);\n    for(int i = 1,s,t,l,r;i <= Q;i++){\n        scanf(\"%d%d%d%d\",&s,&t,&l,&r);\n        if(r - l + 1 <= S) vec[r - l + 1].push_back((Query){s,t,l + n,r + n,i});\n        else qry.push_back((Query){s,t,l + n,r + n,i});\n\t}\n    sort(qry.begin(),qry.end(),[&](const Query &x,const Query &y) {return x.r - x.l < y.r - y.l;});\n    for(int i = 1;i <= S;i++){\n        if(!(int)vec[i].size()) continue;\n        sam.initquery(i);\n        for(auto p : vec[i])\n            ans[p.id] = sam.query1(p.s,p.t,p.l,p.r);\n    }\n    for(auto p : qry) ans[p.id] = sam.query2(p.s,p.t,p.l,p.r);\n    for(int i = 1;i <= Q;i++) printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1612182184,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4493 \u3010[HAOI2018]\u5b57\u4e32\u8986\u76d6\u3011"
    }
]