[
    {
        "content": "\u5173\u4e8eLCT\u7684\u5176\u5b83\u95ee\u9898\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b[\u6211\u7684\u535a\u5ba2](http://www.cnblogs.com/flashhu/p/8324551.html)\n\n\n\u4e00\u9053LCT\u5f88\u597d\u7684\u7ec3\u4e60\u653e\u61d2\u6807\u8bb0\u6280\u5de7\u7684\u9898\u76ee\u3002\n\n\n\u4e00\u5f00\u59cb\u770b\u5230\u53c8\u505a\u52a0\u6cd5\u53c8\u505a\u4e58\u6cd5\u7684\u65f6\u5019\u6211\u662f\u6709\u70b9mengbi\u7684\u3002\n\n\n\u7136\u540e\u6211\u60f3\u8d77\u4e86\u6a21\u677f\u7ebf\u6bb5\u68112\u3002\u3002\u3002\u3002\u3002\u3002\uff08\u76f8\u4fe1\u5404\u4f4dDalao\u4e00\u5b9a\u505a\u8fc7\u8fd9\u9053\u9898\uff09\n\n\n\u8fd9\u91cc\u7684\u7ef4\u62a4\u61d2\u6807\u8bb0\u65b9\u6cd5\u5f88\u50cf\u3002\u9664\u4e86\u7ffb\u8f6c\u6807\u8bb0\u4ee5\u5916\u8fd8\u8981\u7ef4\u62a4\u4e58\u6cd5\u6807\u8bb0\u548c\u52a0\u6cd5\u6807\u8bb0\u3002\n\n\n\u6839\u636e\u8fd0\u7b97\u4f18\u5148\u7ea7\uff0c\u4e58\u6cd5\u662f\u8981\u5148\u7b97\u7684\uff0c\u6240\u4ee5\u5148\u653e\uff0c\u653e\u7684\u65f6\u5019\u5b50\u6811\u7684$sum$,\u4e58\u6cd5\u6807\u8bb0\uff0c\u52a0\u6cd5\u6807\u8bb0\uff0c\u513f\u5b50\u7684$val$\u7edf\u7edf\u90fd\u8981\u4e58\u4e00\u904d\u3002\n\n\n\u653e\u52a0\u6cd5\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u60f3\u5230\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u5927\u5c0f\u662f\u7a33\u5b9a\u7684\uff0c\u800cSplay\u5e76\u4e0d\u662f\uff0c\u6240\u4ee5\u8fd8\u8981\u7ef4\u62a4$size$\uff0c\u4e8e\u662f\u5b50\u6811\u7684$sum$\u8981\u52a0\u4e0a\u5b50\u6811\u7684$size$\u518d\u4e58\u4e0a\u6807\u8bb0\uff0c\u800c\u513f\u5b50\u7684$val$\u548c\u52a0\u6cd5\u6807\u8bb0\u76f4\u63a5\u52a0\u4e0a\u8be5\u6807\u8bb0\u7684\u503c\u3002\n\n\n\u518d\u6ce8\u610f\u4e00\u4e2a\u5c0f\u7ec6\u8282\u3002\n\n\n~~\u6709\u6ca1\u6709\u89c9\u5f9751061\u8fd9\u4e2a\u6570\u597d\u5c0f\u554a\u3002\u3002\u3002~~\u6211\u770b\u5230\u7684\u65f6\u5019\u7279\u9ad8\u5174\uff0c\u4e0d\u7528\u62c5\u5fc3longlong\u7684\u95ee\u9898\u4e86\u3002\u7136\u800c\u3002\u3002\u3002\n\n\n$51061^2=2607225721>2147483647$\n\n\n\u6240\u4ee5\u8981\u5f00unsigned int\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#define R register unsigned int\n#define I inline\n#define YL 51061\n#define lc c[x][0]\n#define rc c[x][1]\n#define mul(x) x*=c;x%=YL\n#define add(x,c) x+=c;x%=YL\n#define G ch=getchar()\n#define gc G;while(ch<'*')G\n#define in(z) gc;z=ch&15;G;while(ch>'*')z*=10,z+=ch&15,G;\nconst int N=100009;\nunsigned int n,f[N],c[N][2],v[N],s[N],sz[N],lm[N],la[N],st[N];\nbool r[N];\nI bool nroot(R x){//\u597d\u50cfDalao\u90fd\u5199\u7684\u662fisroot\n    return c[f[x]][0]==x||c[f[x]][1]==x;\n}\nI void pushup(R x){\n    s[x]=(s[lc]+s[rc]+v[x])%YL;\n    sz[x]=sz[lc]+sz[rc]+1;\n}\nI void pushr(R x){//\u7ffb\u8f6c\n    R t=lc;lc=rc;rc=t;r[x]^=1;\n}\nI void pushm(R x,R c){//\u4e58\n    mul(s[x]);mul(v[x]);mul(lm[x]);mul(la[x]);\n}\nI void pusha(R x,R c){//\u52a0\n    add(s[x],c*sz[x]);add(v[x],c);add(la[x],c);\n}\nI void pushdown(R x){\n    if(lm[x]!=1)pushm(lc,lm[x]),pushm(rc,lm[x]),lm[x]=1;\n    if(la[x])   pusha(lc,la[x]),pusha(rc,la[x]),la[x]=0;\n    if(r[x])   {if(lc)pushr(lc);if(rc)pushr(rc);r[x]=0;}\n}\nI void rotate(R x){\n    R y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n    if(nroot(y))c[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;//\u6ce8\u610fif(nroot(y))\uff0c\u672c\u849f\u84bb\u7ecf\u5e38\u5fd8\u5199\n    if(w)f[w]=y;f[y]=x;f[x]=z;\n    pushup(y);\n}\nI void splay(R x){\n    R y=x,z=0;\n    st[++z]=y;//\u624b\u52a8\u653e\u4e2a\u6808\n    while(nroot(y))st[++z]=y=f[y];\n    while(z)pushdown(st[z--]);\n    while(nroot(x)){\n        y=f[x];z=f[y];\n        if(nroot(y))\n            rotate((c[y][0]==x)^(c[z][0]==y)?x:y);\n        rotate(x);\n    }\n    pushup(x);\n}\nI void access(R x){\n    for(R y=0;x;x=f[y=x])\n        splay(x),rc=y,pushup(x);\n}\nI void makeroot(R x){\n    access(x);\n    splay(x);\n    pushr(x);\n}\nI void split(R x,R y){\n    makeroot(x);\n    access(y);\n    splay(y);\n}\nI void link(R x,R y){\n    makeroot(x);f[x]=y;\n}\nI void cut(R x,R y){\n    split(x,y);f[x]=c[y][0]=0;\n}\nint main()\n{\n    register char ch;\n    R q,i,a,b,k;\n    in(n);in(q);\n    for(i=1;i<=n;++i)v[i]=sz[i]=lm[i]=1;//\u6ce8\u610f\u4e58\u6cd5\u6807\u8bb0\u7684\u521d\u503c\u4e3a1\n    for(i=1;i<n;++i){\n        in(a);in(b);\n        link(a,b);\n    }\n    while(q--){\n        gc;\n        switch(ch){\n        case '+':\n            in(a);in(b);in(k);\n            split(a,b);pusha(b,k);\n            break;\n        case '-':\n            in(a);in(b);cut(a,b);\n            in(a);in(b);link(a,b);\n            break;\n        case '*':\n            in(a);in(b);in(k);\n            split(a,b);pushm(b,k);\n            break;\n        case '/':\n            in(a);in(b);\n            split(a,b);\n            printf(\"%d\\n\",s[b]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1516799472,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "\u6ce8\u610f\u4e0b\u4f20\u6807\u8bb0\u7684$LCT$\n\n\u4e0b\u4f20\u65b9\u6cd5\u4e0e\u7ebf\u6bb5\u68112\u5f02\u65a7\u540c\u5de5\uff0c\u4e58\u6cd5\u4f18\u5148\uff0c\u52a0\u6cd5\u5176\u6b21\u3002\n\n\u6bcf\u6b21\u4e0b\u4f20\u65f6\uff0c\u6ce8\u610f\u5230\u4e00\u9897$Splay$\u7ef4\u62a4\u4e86\u4e00\u6761\u94fe\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u53ea\u9700\u8981$split(x,y)$\n\n\u628a$x-y$\u8fd9\u4e00\u6761\u94fe\u62c9\u51fa\u6765\uff0c\u7136\u540e\u5c31\u518d\u5728\u9876\u90e8$(y)$\u5904\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u5176\u4ed6\u5904\u7406\u90fd\u7c7b\u4f3c\u7684\u9700\u8981$split$\n\n\u6bd4\u5982\uff1a\n\n\u8be2\u95ee$x-y$\u7684\u7b54\u6848\uff0c\u8003\u8651\u5148$split(x,y)$\uff0c\u7136\u540e$y$\u662f$Splay$\u7684\u6839\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8f93\u51fa$t[y].val(val$ \u8868\u793a\u8fd9\u9897\u5b50\u6811\u7684\u548c$)$\n\n\u64cd\u4f5c$2$\u662f\u76f4\u63a5\uff1a$cut\\quad\\&\\quad link$\n\n\u4e58\u6cd5\u548c\u52a0\u6cd5\u4e00\u6837\uff0c\u5148$split$\uff0c\u7136\u540e\u5728$Splay$\u7684\u6839\u90e8\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u6ce8\u610f\u7ec6\u8282\uff0c\u4e0e\u7ebf\u6bb5\u68112\u8f83\u4e3a\u76f8\u4f3c\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define int unsigned int\nil int read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define mod 51061\nconst int N = 3e5 + 5;\nchar s[5];\nstruct LCT{\n\tint son[2], val, add, mul, fa, size;\n\tbool mark;\n}t[N];\nint w[N], n, q;\nvoid push1( int x, int c ) {\n\tt[x].val = ( t[x].size * c % mod + t[x].val ) % mod;\n\tw[x] += c, t[x].add += c, t[x].add %= mod;\n\tw[x] %= mod;\n}\nvoid push2( int x, int c ) {\n\tt[x].val *= c, w[x] *= c, t[x].mul *= c, t[x].add *= c; //\u8981\u7ed9add\u4e5f\u4e58\u4e0ac \n\tt[x].val %= mod, w[x] %= mod, t[x].mul %= mod, t[x].add %= mod;\n}\nvoid pushmark( int x ) { //pushmark\u7684\u90e8\u5206\u4e0e\u7ebf\u6bb5\u68112\u76f8\u540cQWQ... \n\tif( t[x].mul != 1 )  push2( ls(x), t[x].mul ), push2( rs(x), t[x].mul ), t[x].mul = 1;\n\tif( t[x].add )  push1( ls(x), t[x].add ), push1( rs(x), t[x].add ), t[x].add = 0;\n\tif( t[x].mark ) {\n\t\tt[x].mark = 0, t[ls(x)].mark ^= 1, t[rs(x)].mark ^= 1;\n\t\tswap( ls(x), rs(x) );\n\t}\n\tt[x].val %= mod, w[x] %= mod; //\u6ce8\u610f\u53d6\u6a21 \n}\nvoid pushup( int x ) { \n\tt[x].val = ( w[x] + t[ls(x)].val + t[rs(x)].val ) % mod, \n\tt[x].size = t[ls(x)].size + t[rs(x)].size + 1;\n\tt[x].val %= mod;\n}\nbool isroot( int x ) {\n\treturn ( rs(t[x].fa) != x ) && ( ls(t[x].fa) != x );\n}\nvoid rotate( int x ) {\n\tint f = t[x].fa, ff = t[f].fa, qwq = ( rs(f) == x );\n\tt[x].fa = ff;\n\tif( !isroot(f) ) t[ff].son[(rs(ff) == f)] = x; //\u5982\u679c\u7236\u4eb2\u4e0d\u4e3a\u6839\u624d\u6539\u7237\u7237 \n\tt[t[x].son[qwq ^ 1]].fa = f, t[f].son[qwq] = t[x].son[qwq ^ 1],\n\tt[f].fa = x, t[x].son[qwq ^ 1] = f;\n\tpushup(f), pushup(x);\n} \nint st[N];\nvoid Splay( int x ) {\n\tint top = 0, now = x;\n\tst[++top] = x;\n\twhile( !isroot(now) ) st[++top] = ( now = t[now].fa );\n\twhile( top ) pushmark( st[top--] );\n\twhile( !isroot(x) ) {\n\t\tint f = t[x].fa, ff = t[f].fa;\n\t\tif( !isroot(f) ) ( ( rs(f) == x ) ^ ( rs(ff) == f ) ) ? rotate(x) : rotate(f);\n\t\trotate(x);\n\t}\n}\nvoid access( int x ) {\n\tfor( int y = 0; x; y = x, x = t[y].fa )\n\t\tSplay( x ), t[x].son[1] = y, pushup( x );\n}\nvoid makeroot( int x ) {\n\taccess( x ), Splay( x ), t[x].mark ^= 1, pushmark( x );\n}\nint findroot( int x ) {\n\taccess( x ), Splay( x ), pushmark( x );\n\twhile( ls(x) ) pushmark( x = ls(x) );\n\treturn x;\n}\nvoid split( int x, int y ) { //split \n\tmakeroot( x ), access( y ), Splay( y );\n}\nvoid link( int x, int y ) {\n\tmakeroot( x );\n\tif( findroot( y ) != x ) t[x].fa = y; //\u8fd8\u662f\u8981\u5224\u65ad....... \n}\nvoid cut( int x, int y ) { //\u660e\u660e\u6570\u636e\u4fdd\u8bc1\u4e86\u5408\u6cd5\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd8\u662f\u8981\u5224\u65ad...... \n\tmakeroot( x );\n\tif( findroot(y) == x && t[x].fa == y && ls(y) == x && !rs(x) )\n\t\tt[x].fa = t[y].son[0] = 0, pushup( y );\n}\nsigned main()\n{\n\tn = read(), q = read();  int x, y, u1, u2, v1, v2, c;\n\trep( i, 1, n - 1 ) x = read(), y = read(), link( x, y ), t[i].mul = w[i] = 1; //\u8fd9\u91cc\u8981\u6ce8\u610f\u521d\u59cb\u5316\u3002 \n\tt[n].mul = w[n] = 1;\n\trep( i, 1, q ) {\n\t\tscanf(\"%s\", s);\n\t\tif( s[0] == '+' ) u1 = read(), v1 = read(), c = read() % mod, split( u1, v1 ), push1( v1, c );\n\n\t\tif( s[0] == '-' ) u1 = read(), v1 = read(), u2 = read(), v2 = read(), cut( u1, v1 ), link( u2, v2 );\n\t\t\n\t\tif( s[0] == '/' ) u1 = read(), v1 = read(), split( u1, v1 ), printf(\"%d\\n\", t[v1].val % mod);\n\t\t\t\n\t\tif( s[0] == '*')  u1 = read(), v1 = read(), c = read() % mod, split( u1, v1 ), push2( v1, c );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1553144445,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "lct\u3002       \n\u6839\u636e\u9898\u9762\u7684\u5220\u8fb9\uff0c\u52a0\u8fb9\u7b49\u5404\u79cd\u64cd\u4f5c\u57fa\u672c\u4e0a\u5341\u5206\u660e\u663e\u7684\u63d0\u793a\u4e86\u4f60\u8fd9\u9898\u5e94\u8be5\u4f7f\u7528lct\u3002      \n\u552f\u4e00\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u61d2\u6807\u8bb0\uff08\u611f\u89c9\u8fd9\u9898\u548c\u7ebf\u6bb5\u68112\u5dee\u4e0d\u591a\uff1f\uff09  \n\u56e0\u4e3a\u4e58\u6cd5\u7684\u4f18\u5148\u7ea7\u6bd4\u52a0\u6cd5\u9ad8\uff0c\u6240\u4ee5\u5e94\u8be5\u4f18\u5148\u8003\u8651\u4e58\u6cd5\u3002   \n\u4e00\u4e2a\u70b9\u7684\u771f\u5b9e\u503c\u5e94\u8be5\u662f\u539f\u6709\u7684\u503c\u52a0\u4e0a\u52a0\u6cd5\u61d2\u6807\u8bb0\u6240\u6807\u8bb0\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62ec\u5728\u4e00\u4e2a\u62ec\u53f7\u91cc\u7136\u540e\u7528\u4e58\u6cd5\u62c6\u6389\u3002   \n\u4e0d\u96be\u53d1\u73b0$\\text{val,tagadd,tagmul,sum}$\u90fd\u8981\u8fdb\u884c\u6539\u53d8\u3002         \n\u63a5\u7740\u518d\u8003\u8651\u52a0\u6cd5              \n\u56e0\u4e3a\u67d0\u4e00\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\u5e76\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b$\\text{size}$\u3002        \n\u5176\u4ed6\u7684\u5c31\u6ca1\u4ec0\u4e48\u4e86\u3002     \n\u6ce8\u610f$\\text{pushup}$\u7684\u65f6\u5019\u53ea\u80fd\u591f$\\text{pushup}$\u5f53\u524d\u7684\u70b9\u548c\u539f\u6765\u7684\u7236\u4eb2\uff0c\u4e0d\u80fd\u5bf9\u7956\u7236\u8fdb\u884c\u64cd\u4f5c\uff0c\u5426\u5219\u4f1a\u5bf9$\\text{size}$\u4ea7\u751f\u5f71\u54cd\u3002         \n### My Code\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define il inline\nconst int maxn = 1e5 + 10;\nconst int P = 51061;\nusing namespace std;\nnamespace Fast_Input {\n    template<class T> il void read(T& res) {\n        res = 0;  char ch;  bool sign = 0;  \n        do ch = getchar(),sign |= ch == '-'; while(!isdigit(ch));   \n        while(isdigit(ch)) res = (res << 1) + (res << 3) + (ch & 15),ch = getchar();\n        (sign) && (res = -res);\n    }\n}\nusing Fast_Input::read;       \nint n,m,i,j,k,Task;     \nil void _swap(int& x,int& y) {\n    x ^= y ^= x ^= y;  return;\n}\nstruct Link_Cut_Tree {\n    int size[maxn],ch[maxn][2],sum[maxn],fa[maxn],val[maxn],sta[maxn];  int tmul[maxn],tadd[maxn];\n    bool trev[maxn];        \n    il void pre() {\n        for(int i = 1;i <= n;i++) size[i] = val[i] = tmul[i] = 1;  \n        return;\n    }\n    il void push_up(int o) {\n        size[o] = size[ch[o][0]] + size[ch[o][1]] + 1;         \n        sum[o] = (sum[ch[o][0]] + sum[ch[o][1]] + val[o]) % P;\n        return;\n    }\n    il void dmul(int o,int m) {\n        tmul[o] = (1ll * tmul[o] * m) % P;  sum[o] = (1ll * sum[o] * m) % P;        \n        val[o] = (1ll * val[o] * m) % P;  tadd[o] = (1ll * tadd[o] * m) % P; \n        return;\n    }\n    il void dadd(int o,int a) {\n        sum[o] = (sum[o] + a * size[o]) % P;  tadd[o] += a;  val[o] += a;  return;\n    }\n    il void push_down(int o) {\n        if(tmul[o] != 1) dmul(ch[o][0],tmul[o]),dmul(ch[o][1],tmul[o]),tmul[o] = 1;\n        if(tadd[o]) dadd(ch[o][0],tadd[o]),dadd(ch[o][1],tadd[o]),tadd[o] = 0;   \n        if(trev[o]) {\n            trev[o] = 0;  \n            trev[ch[o][0]] ^= 1; \n            trev[ch[o][1]] ^= 1;\n            _swap(ch[o][0],ch[o][1]);\n        }\n        return;\n    }\n    il bool IsRoot(int o) {\n        return ch[fa[o]][0] != o && ch[fa[o]][1] != o;\n    }\n    il int Ident(int o) {\n        return ch[fa[o]][1] == o;\n    }\n    il void rotate(int u) {\n        int oldf = fa[u],oldgf = fa[oldf];  bool whi = Ident(u);\n        if(!IsRoot(oldf)) ch[oldgf][Ident(oldf)] = u;              \n        ch[oldf][whi] = ch[u][whi ^ 1];   \n        fa[ch[u][whi ^ 1]] = oldf;       \n        ch[u][whi ^ 1] = oldf;\n        fa[oldf] = u;  fa[u] = oldgf;    \n        push_up(oldf);  push_up(u);  \n    }\n    il void splay(int u) {\n        sta[0] = 0;  sta[++sta[0]] = u;    \n        for(int i = u;!IsRoot(i);i = fa[i]) sta[++sta[0]] = fa[i];     \n        while(sta[0]) push_down(sta[sta[0]--]);       \n        for(int f = fa[u];!IsRoot(u);rotate(u),f = fa[u]) {\n            if(!IsRoot(f)) rotate(Ident(f) == Ident(u) ? f : u);\n        }\n        push_up(u);\n        return;\n    }\n    il void access(int x) {\n        for(int y = 0;x;x = fa[y = x]) {\n            splay(x);  \n            ch[x][1] = y; \n            push_up(x);\n        }\n        return;\n    }\n    il void make_root(int u) {\n        access(u);  splay(u);  trev[u] ^= 1;   return;\n    }\n    il void split(int x,int y) {\n        make_root(x);  access(y);  splay(y);  return;\n    }\n    il void link(int x,int y) {\n        make_root(x);  fa[x] = y;  return;\n    }\n    il void cut(int x,int y) {\n        split(x,y);           \n        fa[x] = ch[y][0] = 0;   \n        return;\n    }               \n} lct;\nint main() {\n    read(n);  read(Task);  \n    lct.pre();\n    for(int i = 1,u,v;i < n;i++) {\n        read(u);  read(v);  \n        lct.link(u,v);\n    }  \n    for(int u,v,ru,rv,ov;Task;--Task) {\n        char op[3];  scanf(\"%s\",op);          \n        if(op[0] == '+') {\n            read(u);  read(v);  read(ov);     \n            lct.split(u,v);  lct.dadd(v,ov);\n        } else if(op[0] == '-') {\n            read(u);  read(v);  read(ru);  read(rv);        \n            lct.cut(u,v);  lct.link(ru,rv);  \t\t\n        } else if(op[0] == '*') {\n            read(u);  read(v);  read(ov);\n            lct.split(u,v);  lct.dmul(v,ov);\n        } else {\n            read(u);  read(v);    \n            lct.split(u,v);  printf(\"%d\\n\",lct.sum[v]);\n        }    \n    //\tfor(int i = 1;i <= n;i++) printf(\"%d %d %d %d %d\\n\",lct.sum[i],lct.tadd[i],lct.tmul[i],lct.val[i],lct.size[i]);  puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1554804456,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "\u9898\u76ee\u5728\u8fd9\uff1a[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1501)\u3002\n\n\u4e00\u9053\u4e0d\u9519\u7684 LCT \u7ec3\u624b\u9898\u3002\n\n\u5199\u8fd9\u4e00\u9898\u4e4b\u524d\u53ef\u4ee5\u5148\u770b\u770b[\u7ebf\u6bb5\u68112](https://www.luogu.com.cn/problem/P3373)\uff0c\u56e0\u4e3a\u8fd9\u9898\u6709\u5b83\u7684\u61d2\u6807\u8bb0\u601d\u60f3\u3002\n\n\u8fd9\u9898\u540c\u6837\u6709\u52a0\u6cd5\u64cd\u4f5c\u548c\u4e58\u6cd5\u64cd\u4f5c\u3002\u6240\u4ee5\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u6709\u4e09\u4e2a\uff1a1.\u5904\u7406\u533a\u95f4\u53cd\u8f6c\u7684 rev \u6807\u8bb0\uff0c2.\u5bf9\u5b50\u6811\u6574\u4f53\u52a0\u7684 add \u6807\u8bb0\uff0c3.\u5bf9\u5b50\u6811\u6574\u4f53\u4e58\u7684 mul \u6807\u8bb0\u3002\n\n\u6211\u4eec\u7528 sum \u8868\u793a\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u3002\n\n+ \\+\uff1a\u5c31\u662f split \u51fa u \u5230 v \u7684\u8def\u5f84\uff0c\u5728 v \u5904\u6253\u4e0a add \u6807\u8bb0\u3002\n\n+ \\-\uff1a\u5c31\u662f\u628a $u_1$ \u5230 $v_1$ \u7684\u8def\u5f84 cut \u6389\uff0c\u518d\u628a $u_2$ \u5230 $v_2$ \u7684\u8def\u5f84 link \u4e0a\u3002\n\n+ \\*\uff1a\u5c31\u662f split \u51fa u \u5230 v \u7684\u8def\u5f84\uff0c\u5728 v \u5904\u6253\u4e0a mul \u6807\u8bb0\u3002\n\n+ \\\uff1a\u5c31\u662f split \u51fa u \u5230 v \u7684\u8def\u5f84\uff0c\u8f93\u51fa v \u51fa\u5b58\u50a8\u7684 sum \u503c\u3002\n\n\u5f53\u7136\u4e0d\u8981\u5fd8\u8bb0\u5f00 long long \u54e6\u3002\n\n\u653e\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\nusing namespace std;\n#define int long long\nconst int N=1e5+10,mod=51061;\nstruct splay{\n\tint add,mul,rev;\n\tint fa,son[2];\n\tint val,sum;\n\tint size;\n};\nsplay spl[N];\ninline bool check_root(int pos){\n\treturn spl[spl[pos].fa].son[0]!=pos&&spl[spl[pos].fa].son[1]!=pos;\n}\ninline void connect(int pos,int fa,int son){\n\tspl[fa].son[son]=pos;\n\tspl[pos].fa=fa;\n}\ninline int relation(int pos,int fa){\n\treturn spl[fa].son[1]==pos;\n}\ninline void pushup(int pos){\n\tint lson=spl[pos].son[0],rson=spl[pos].son[1];\n\tspl[pos].size=spl[lson].size+spl[rson].size+1;\n\tspl[pos].sum=(spl[lson].sum+spl[rson].sum+spl[pos].val)%mod;\n}\ninline void pushdown(int pos){\n\tif(spl[pos].rev){\n\t\tswap(spl[pos].son[0],spl[pos].son[1]);\n\t\tspl[spl[pos].son[0]].rev^=1;\n\t\tspl[spl[pos].son[1]].rev^=1;\n\t\tspl[pos].rev=0;\n\t}\n\tint lson=spl[pos].son[0],rson=spl[pos].son[1];\n\tint lsize=spl[lson].size,rsize=spl[rson].size;\n\tspl[lson].sum=(spl[lson].sum*spl[pos].mul%mod+spl[pos].add*lsize%mod)%mod;\n\tspl[rson].sum=(spl[rson].sum*spl[pos].mul%mod+spl[pos].add*rsize%mod)%mod;\n\tspl[lson].val=(spl[lson].val*spl[pos].mul%mod+spl[pos].add%mod)%mod;\n\tspl[rson].val=(spl[rson].val*spl[pos].mul%mod+spl[pos].add%mod)%mod;\n\tspl[lson].add=(spl[lson].add*spl[pos].mul%mod+spl[pos].add%mod)%mod;\n\tspl[rson].add=(spl[rson].add*spl[pos].mul%mod+spl[pos].add%mod)%mod;\n\tspl[lson].mul=spl[lson].mul*spl[pos].mul%mod;\n\tspl[rson].mul=spl[rson].mul*spl[pos].mul%mod;\n\tspl[pos].mul=1;\n\tspl[pos].add=0;\n}//\u53ef\u4ee5\u53c2\u8003\u7ebf\u6bb5\u68112\ninline void pushall(int pos){\n\tif(!check_root(pos))\n\t\tpushall(spl[pos].fa);\n\tpushdown(pos);\n}\nvoid rotate(int pos){\n\tint fa=spl[pos].fa,gf=spl[fa].fa;\n\tint t1=relation(pos,fa),t2=relation(fa,gf);\n\tconnect(spl[pos].son[t1^1],fa,t1);\n\tconnect(fa,pos,t1^1);\n\tif(spl[gf].son[t2]==fa)\n\t\tconnect(pos,gf,t2);\n\telse\n\t\tspl[pos].fa=gf;\n\tpushup(fa);\n\tpushup(pos);\n}\nvoid splaying(int pos){\n\tpushall(pos);\n\twhile(!check_root(pos)){\n\t\tint fa=spl[pos].fa,gf=spl[fa].fa;\n\t\tif(!check_root(fa))\n\t\t\trelation(pos,fa)^relation(fa,gf)?rotate(pos):rotate(fa);\n\t\trotate(pos);\n\t}\n}\nvoid access(int pos){\n\tint son=0;\n\twhile(pos){\n\t\tsplaying(pos);\n\t\tspl[pos].son[1]=son;\n\t\tpushup(pos);\n\t\tson=pos;\n\t\tpos=spl[pos].fa;\n\t}\n}\nvoid make_root(int pos){\n\taccess(pos);\n\tsplaying(pos);\n\tspl[pos].rev^=1;\n}\nint find_root(int pos){\n\taccess(pos);\n\tsplaying(pos);\n\twhile(spl[pos].son[0]){\n\t\tpos=spl[pos].son[0];\n\t\tpushdown(pos);\n\t}\n\tsplaying(pos);\n\treturn pos;\n}\nvoid link(int x,int y){\n\tmake_root(x);\n\taccess(y);\n\tsplaying(y);\n\tspl[x].fa=y;\n}\nvoid cut(int x,int y){\n\tmake_root(x);\n\taccess(y);\n\tsplaying(y);\n\tspl[y].son[0]=0;\n\tspl[x].fa=0;\n}\nvoid split(int x,int y){\n\tmake_root(x);\n\taccess(y);\n\tsplaying(y);\n}\nsigned main(){\n\tint n,m;\n\tcin>>n>>m;\n\tint x,y;\n\tfor(int i=1;i<=n;i++)\n\t\tspl[i].mul=spl[i].val=spl[i].sum=1;\n\tfor(int i=1;i<=n-1;i++){\n\t\tcin>>x>>y;\n\t\tlink(x,y);\n\t}\n\tchar opt;\n\tint u,v,val;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>opt;\n\t\tswitch(opt){\n\t\t\tcase '+':\n\t\t\t\tcin>>x>>y>>val;\n\t\t\t\tsplit(x,y);\n\t\t\t\tspl[y].add=(spl[y].add%mod+val%mod)%mod;\n\t\t\t\tspl[y].val=(spl[y].val%mod+val%mod)%mod;\n\t\t\t\tspl[y].sum=(spl[y].sum%mod+val*spl[y].size%mod)%mod;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tcin>>x>>y>>u>>v;\n\t\t\t\tcut(x,y);\n\t\t\t\tlink(u,v);\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tcin>>x>>y>>val;\n\t\t\t\tsplit(x,y);\n\t\t\t\tspl[y].val=spl[y].val*val%mod;\n\t\t\t\tspl[y].mul=spl[y].mul*val%mod;\n\t\t\t\tspl[y].add=spl[y].add*val%mod;\n\t\t\t\tspl[y].sum=spl[y].sum*val%mod;\n\t\t\t\t//\u540c\u6837\u53ef\u4ee5\u53c2\u8003\u7ebf\u6bb5\u68112\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\tcin>>x>>y;\n\t\t\t\tsplit(x,y);\n\t\t\t\tcout<<spl[y].sum<<'\\n';\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```",
        "postTime": 1608294242,
        "uid": 204705,
        "name": "KiDDOwithTopTree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5c31\u662f\u4e00\u9053$LCT$\u6a21\u677f\u9898\u3002\n\n\u5bf9\u4e8e\u653e\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u6211\u5199\u4e86\u4e00\u4e2a$pushtag$\u6765\u6253\u6807\u8bb0\uff0c\u53ef\u80fd\u4f1a\u65b9\u4fbf\u4e00\u70b9\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u677f\u5b50\u4e86\u3002\u4e0d\u8fc7\u8fd9\u9053\u9898\u4e0d\u80fd\u7528int\uff0c\u5426\u5219\u4f1a\u7206\u70b8\u3002\n\n\u849f\u84bb\u4e0d\u4f1a\u538b\u884c\uff0c\u53ef\u80fd\u5199\u5f97\u6709\u70b9\u957f\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u8fd9\u91cc\u7684\u65ad\u8fb9\u662f\u9700\u8981\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u65ad\u7684\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u8bf7\u5927\u4f6c\u6307\u5bfc\uff09\uff0c\u5426\u5219\u5c31\u4f1aRE\u3002\n```cpp\n#include<cstdio>\n#define Rint register int\nusing namespace std;\ntypedef long long LL;\nconst int N = 100003, mod = 51061;\nint sta[N], top;\nnamespace LCT {\n    void swap(int &a, int &b){a ^= b ^= a ^= b;}\n    struct Node {\n        int v, fa, siz, ch[2], sum, add, mul;\n        bool rev;\n    } e[N];\n    void pushup(int x){\n        e[x].sum = (e[e[x].ch[0]].sum + e[e[x].ch[1]].sum + e[x].v) % mod;\n        e[x].siz = e[e[x].ch[0]].siz + e[e[x].ch[1]].siz + 1;\n    }\n    void pushrev(int x){\n        e[x].rev ^= 1;\n        swap(e[x].ch[0], e[x].ch[1]);\n    }\n    void pushtag(int x, int add, int mul){\n        if(!x) return;\n        e[x].sum = ((LL) e[x].sum * mul + (LL) add * e[x].siz) % mod;\n        e[x].add = ((LL) e[x].add * mul + add) % mod;\n        e[x].v = ((LL) e[x].v * mul + add) % mod;\n        e[x].mul = (LL) e[x].mul * mul % mod;\n    }\n    void pushdown(int x){\n        if(e[x].rev){\n            e[x].rev = false;\n            if(e[x].ch[0]) pushrev(e[x].ch[0]);\n            if(e[x].ch[1]) pushrev(e[x].ch[1]);\n        }\n        pushtag(e[x].ch[0], e[x].add, e[x].mul);\n        pushtag(e[x].ch[1], e[x].add, e[x].mul);\n        e[x].add = 0; e[x].mul = 1;\n    }\n    bool nroot(int x){\n        return e[e[x].fa].ch[0] == x || e[e[x].fa].ch[1] == x;\n    }\n    void rotate(int x){\n        int y = e[x].fa, z = e[y].fa, zson = e[z].ch[1] == y, yson = e[y].ch[1] == x, B = e[x].ch[yson ^ 1];\n        if(nroot(y)) e[z].ch[zson] = x;\n        e[x].ch[yson ^ 1] = y;\n        e[y].ch[yson] = B;\n        if(B) e[B].fa = y;\n        e[y].fa = x;\n        e[x].fa = z;\n        pushup(y);\n    }\n    void splay(int x){\n        int now = x;\n        sta[++ top] = x;\n        while(nroot(now)) sta[++ top] = now = e[now].fa;\n        while(top) pushdown(sta[top --]);\n        while(nroot(x)){\n            int y = e[x].fa, z = e[y].fa;\n            if(nroot(y))\n                rotate((e[z].ch[1] == y) ^ (e[y].ch[1] == x) ? x : y);\n            rotate(x);\n        }\n        pushup(x);\n    }\n    void access(int x){\n        for(Rint y = 0;x;y = x, x = e[x].fa){\n            splay(x); e[x].ch[1] = y; pushup(x);\n        }\n    }\n    void makeroot(int x){\n        access(x); splay(x); pushrev(x);\n    }\n    int findroot(int x){\n        access(x); splay(x);\n        while(e[x].ch[0]) {pushdown(x); x = e[x].ch[0];}\n        return x;\n    }\n    void split(int x, int y){\n        makeroot(x); access(y); splay(y);\n    }\n    void link(int x, int y){\n        makeroot(x);\n        e[x].fa = y;\n    }\n    void cut(int x, int y){\n        makeroot(x);\n        if(findroot(y) == x && e[x].fa == y && !e[x].ch[1]){\n            e[x].fa = e[y].ch[0] = 0;\n            pushup(y);\n        }\n    }\n}\nusing namespace LCT;\nint n, q;\nint main(){\n    scanf(\"%d%d\", &n, &q);\n    for(Rint i = 1;i <= n;i ++)\n        e[i].v = e[i].sum = e[i].mul = 1;\n    for(Rint i = 1;i < n;i ++){\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        link(a, b);\n    }\n    while(q --){\n        char opt[5];\n        scanf(\"%s\", opt);\n        int a, b, c, d;\n        switch(opt[0]){\n            case '+':\n                scanf(\"%d%d%d\", &a, &b, &c);\n                split(a, b);\n                pushtag(b, c, 1);\n                break;\n            case '-':\n                scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n                cut(a, b); link(c, d);\n                break;\n            case '*':\n                scanf(\"%d%d%d\", &a, &b, &c);\n                split(a, b);\n                pushtag(b, 0, c);\n                break;\n            case '/':\n                scanf(\"%d%d\", &a, &b);\n                split(a, b);\n                printf(\"%d\\n\", e[b].sum);\n        }\n    }\n}\n```",
        "postTime": 1544609693,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u60f3\u5230\u4f7f\u7528 LCT \u7ef4\u62a4\u6811\u4e0a\u4fe1\u606f\uff0c\u8fd8\u4e0d\u4f1a LCT \u7684\u540c\u5b66\u5efa\u8bae\u5148\u53bb\u5b8c\u6210\u6a21\u677f\u3002\n\n\u6b64\u5916\u672c\u9898\u9700\u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\u6709\u52a0\u6cd5\u4e0e\u4e58\u6cd5\uff0c\u4f7f\u7528 Splay \u4e0d\u719f\u7ec3\u7684\u540c\u5b66\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Splay \u5b8c\u6210\u7ebf\u6bb5\u6811\u7684\u524d\u4e24\u4e2a\u6a21\u677f\u3002\n\n\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u5206\u6790\u6bcf\u4e2a\u64cd\u4f5c\u5982\u4f55\u5b8c\u6210\u3002\n\n1.  \u5c06\u67d0\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u5168\u90e8\u589e\u52a0\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5148\u901a\u8fc7 LCT \u7684 $ split $ \u51fd\u6570\u5c06\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u5355\u72ec\u653e\u5728\u4e00\u9897 Splay \u4e0a\uff0c\u7136\u540e\u5bf9 Splay \u7684\u6839\u8282\u70b9\u7684\u52a0\u6cd5\u6807\u8bb0\u8fdb\u884c\u66f4\u6539\u5373\u53ef\u3002\n\n2.  \u5220\u9664\u4e00\u6761\u8fb9\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u76f4\u63a5\u4f7f\u7528 LCT \u7684 $ cut $ \u51fd\u6570\u4e0e $ link $ \u51fd\u6570\u5373\u53ef\u89e3\u51b3\u95ee\u9898\u3002\n\n3.  \u5c06\u67d0\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u5168\u90e8\u4e58\u4e00\u4e2a\u6570\uff0c\u4e0e\u64cd\u4f5c\u4e00\u7c7b\u4f3c\uff0c\u53ea\u9700\u8981\u66f4\u6539\u4e58\u6cd5\u6807\u8bb0\u5373\u53ef\u3002\n\n4.  \u8be2\u95ee\u67d0\u6761\u8def\u5f84\u4e0a\u70b9\u6743\u548c\uff0c\u4e0e\u64cd\u4f5c\u4e00\u548c\u64cd\u4f5c\u4e09\u7c7b\u4f3c\uff0c\u8bbf\u95ee Splay \u6839\u8282\u70b9\u7684\u503c\u5373\u53ef\u3002\n\n\u8bfb\u5165\u65f6\u53ea\u9700\u8981\u6839\u636e\u8bfb\u5165\u7684\u8fb9\u4e0d\u65ad\u8fdb\u884c $ link $ \u64cd\u4f5c\u5373\u53ef\u5efa\u6210\u4e00\u68f5 LCT\u3002\n\n\u4e0b\u9762\u662f\u5bf9 Splay \u6807\u8bb0\u4e0b\u653e\u7684\u4e00\u4e9b\u7ec6\u8282\u7684\u8bf4\u660e\uff1a\n\n\u9996\u5148\u4e58\u6cd5\u6807\u8bb0\u6bd4\u52a0\u6cd5\u6807\u8bb0\u4f18\u5148\u7ea7\u9ad8\uff0c\u8fd9\u4e00\u70b9\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u3002\n\n\u61d2\u6807\u8bb0\u7684\u6253\u6cd5\u6211\u77e5\u9053\u7684\u5171\u6709\u4ee5\u4e0b\u4e24\u79cd\uff0c\u65b9\u6cd5\u4e0d\u592a\u4e00\u6837\u3002\n\n1.  \u6253\u6807\u8bb0\u65f6\u540c\u65f6\u66f4\u65b0\u8fd9\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u4e0b\u4f20\u65f6\u66f4\u65b0\u513f\u5b50\u8282\u70b9\u6807\u8bb0\u7684\u540c\u65f6\u66f4\u65b0\u513f\u5b50\u7684\u6743\u503c\u4e0e\u5176\u5b50\u6811\u6743\u503c\u3002\n\n2.  \u6253\u6807\u8bb0\u65f6\u4e0d\u66f4\u65b0\u5176\u4ed6\u4fe1\u606f\uff0c\u4e0b\u4f20\u65f6\u66f4\u65b0\u513f\u5b50\u8282\u70b9\u6807\u8bb0\u7684\u540c\u65f6\u66f4\u65b0\u672c\u8eab\u7684\u6743\u503c\u4e0e\u5b50\u6811\u6743\u503c\u3002\n\n\u4e24\u79cd\u65b9\u6cd5\u90fd\u5dee\u4e0d\u591a\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff1a\u5728\u66f4\u65b0\u67d0\u4e2a\u70b9\u5b50\u6811\u6743\u503c\u65f6\u4e00\u5b9a\u8981\u8bb0\u5f97\u61d2\u6807\u8bb0\uff01\n\n\u5176\u6b21\uff0c\u56e0\u4e3a\u6709\u52a0\u6cd5\u6807\u8bb0\u7684\u51fa\u73b0\uff0c\u6240\u4ee5 Splay \u8fd8\u5f97\u540c\u65f6\u7edf\u8ba1\u5b50\u6811\u5185\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u6700\u540e\uff0c\u53ea\u9700\u8981\u5728\u8282\u70b9\u4e4b\u95f4\u5173\u7cfb\u6709\u53d8\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u6807\u8bb0\u4e0b\u4f20\u4e0e\u6743\u503c\u7684\u66f4\u65b0\u5373\u53ef\u3002\n\n\u5c0f\u5751\u70b9\uff1a\u672c\u9898\u4e2d\u6a21\u6570\u7684\u5e73\u65b9\u6bd4 $ 2^{31}-1 $ \u5927\uff0c\u6240\u4ee5\u4f7f\u7528 int \u4f1a\u70b8\u3002\n\n\u8bb2\u771f\u7684\uff0c\u8fd9\u9898\u770b\u4e0a\u53bb\u5c31\u6bd4\u8f83\u677f\uff0c\u65b0\u5b66 LCT \u7684\u540c\u5b66~~\u4f8b\u5982\u6211~~\u6765\u505a\u8fd8\u662f\u975e\u5e38\u4e0d\u9519\u7684\uff0c\u8fd9\u79cd\u9898\u7ec6\u8282\u4e5f\u6bd4\u8f83\u591a\uff0c\u7528\u4e8e\u63d0\u5347\u7801\u529b\u4e5f\u662f\u5f88\u4e0d\u9519\u7684\u3002\n\n\u4ee3\u7801\uff08\u7801\u98ce\u7565\u4e11\u52ff\u55b7\uff09\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace lct\n{\n\tinline int read()\n\t{\n\t\tint s=0;\n\t\tchar ch;\n\t\twhile((ch=getchar())>'9'||ch<'0');\n\t\twhile(ch>='0'&&ch<='9')\n\t\t{\n\t\t\ts=s*10+ch-'0';\n\t\t\tch=getchar();\n\t\t}\n\t\treturn s;\n\t}\n\tvoid write(int s,char ch=0)\n\t{\n\t\tif(s>9)\n\t\t\twrite(s/10);\n\t\tputchar(s-s/10*10+'0');\n\t\tif(ch)\n\t\t\tputchar(ch);\n\t}\n\tconst int mod=51061;\n\tint sta[100001],top;\n\tint son[100001][2];\n\tint tagc[100001];\n\tint tagj[100001];\n\tint size[100001];\n\tbool rev[100001];\n\tint num[100001];\n\tint val[100001];\n\tint fa[100001];\n\tint n,q;\n\tinline void swap(int &a,int &b)\n\t{\n\t\tint t=a;\n\t\ta=b,b=t;\n\t}\n\tvoid push_up(int x)\n\t{\n\t\tsize[x]=size[son[x][0]]+size[son[x][1]]+1;\n\t\tval[x]=(((long long)tagc[son[x][0]]*val[son[x][0]]+(long long)tagj[son[x][0]]*size[son[x][0]]+(long long)tagc[son[x][1]]*val[son[x][1]]+(long long)tagj[son[x][1]]*size[son[x][1]]+num[x])*tagc[x]+(long long)tagj[x]*size[x])%mod;\n\t}\n\tvoid push_down(int x)\n\t{\n\t\tif(rev[x])\n\t\t{\n\t\t\tswap(son[x][0],son[x][1]);\n\t\t\trev[x]^=1;\n\t\t\trev[son[x][0]]^=1;\n\t\t\trev[son[x][1]]^=1;\n\t\t}\n\t\tif(son[x][0])\n\t\t{\n\t\t\ttagj[son[x][0]]=((long long)tagj[son[x][0]]*tagc[x]+tagj[x])%mod;\n\t\t\ttagc[son[x][0]]=((long long)tagc[son[x][0]]*tagc[x])%mod;\n\t\t}\n\t\tif(son[x][1])\n\t\t{\n\t\t\ttagj[son[x][1]]=((long long)tagj[son[x][1]]*tagc[x]+tagj[x])%mod;\n\t\t\ttagc[son[x][1]]=((long long)tagc[son[x][1]]*tagc[x])%mod;\n\t\t}\n\t\tval[x]=((long long)val[x]*tagc[x]+(long long)size[x]*tagj[x])%mod;\n\t\tnum[x]=((long long)num[x]*tagc[x]+tagj[x])%mod;\n\t\ttagj[x]=0;\n\t\ttagc[x]=1;\n\t}\n\tvoid debug()\n\t{\n\t\t/*for(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d : fa=%d ls=%d rs=%d size=%d val=%d num=%d tagj=%d tagc=%d rev=%d\\n\",i,fa[i],son[i][0],son[i][1],size[i],val[i],num[i],tagj[i],tagc[i],rev[i]);\n\t\tprintf(\"\\n\");*/\n\t}\n\tvoid rotate(int x)\n\t{\n\t\t//printf(\"->rotate %d\\n\",x);\n\t\tint y=fa[x];\n\t\tint z=fa[y];\n\t\tint c=son[y][1]==x;\n\t\tson[y][c]=son[x][!c];\n\t\tif(son[x][!c])\n\t\t\tfa[son[x][!c]]=y;\n\t\tson[x][!c]=y;\n\t\tfa[y]=x;\n\t\tfa[x]=z;\n\t\tif(son[z][0]==y||son[z][1]==y)\n\t\t\tson[z][son[z][1]==y]=x;\n\t\t//printf(\"rotate->\\n\");\n\t\tdebug();\n\t\tpush_up(y);\n\t\tpush_up(x);\n\t\tdebug();\n\t}\n\tbool isroot(int x)\n\t{\n\t\treturn son[fa[x]][0]!=x&&son[fa[x]][1]!=x;\n\t}\n\tvoid Splay(int x)\n\t{\n\t\t//printf(\"->Splay %d\\n\",x);\n\t\tsta[top=1]=x;\n\t\tfor(int i=x;!isroot(i);i=fa[i])\n\t\t\tsta[++top]=fa[i];\n\t\twhile(top)\n\t\t\tpush_down(sta[top--]);\n\t\twhile(!isroot(x))\n\t\t{\n\t\t\tint y=fa[x];\n\t\t\tint z=fa[y];\n\t\t\tif(!isroot(y))\n\t\t\t\t(son[z][1]==y)^(son[y][1]==x)?rotate(x):rotate(y);\n\t\t\trotate(x);\n\t\t}\n\t\t//printf(\"Splay->\\n\");\n\t\tdebug();\n\t}\n\tvoid access(int x)\n\t{\n\t\t//printf(\"->access %d\\n\",x);\n\t\tfor(int y=0;x;)\n\t\t{\n\t\t\tSplay(x);\n\t\t\tson[x][1]=y;\n\t\t\tif(y)\n\t\t\t\tfa[y]=x;\n\t\t\tpush_up(x);\n\t\t\ty=x;\n\t\t\tx=fa[x];\n\t\t}\n\t\t//printf(\"access->\\n\");\n\t\tdebug();\n\t}\n\tvoid makeroot(int x)\n\t{\n\t\t//printf(\"->makeroot %d\\n\",x);\n\t\taccess(x);\n\t\tSplay(x);\n\t\trev[x]^=1;\n\t\t//printf(\"makeroot->\\n\");\n\t\tdebug();\n\t}\n\tvoid link(int x,int y)\n\t{\n\t\t//printf(\"->link %d,%d\\n\",x,y);\n\t\tmakeroot(x);\n\t\tfa[x]=y;\n\t\t//printf(\"link->\\n\");\n\t\tdebug();\n\t}\n\tvoid split(int x,int y)\n\t{\n\t\t//printf(\"->split %d,%d\\n\",x,y);\n\t\tmakeroot(x);\n\t\taccess(y);\n\t\tSplay(y);\n\t\t//printf(\"split->\\n\");\n\t\tdebug();\n\t}\n\tvoid add(int u,int v,int c)\n\t{\n\t\t//printf(\"->add %d,%d,%d\\n\",u,v,c);\n\t\tsplit(u,v);\n\t\ttagj[v]=(tagj[v]+c)%mod;\n\t\t//printf(\"add->\\n\");\n\t\tdebug();\n\t}\n\tvoid times(int u,int v,int c)\n\t{\n\t\t//printf(\"->times %d,%d,%d\\n\",u,v,c);\n\t\tsplit(u,v);\n\t\ttagc[v]=((long long)tagc[v]*c)%mod;\n\t\t//printf(\"times->\\n\");\n\t\tdebug();\n\t}\n\tvoid cut(int x,int y)\n\t{\n\t\t//printf(\"->cut %d,%d\\n\",x,y);\n\t\tsplit(x,y);\n\t\tpush_down(y);\n\t\tson[y][0]=fa[x]=0;\n\t\tpush_up(y);\n\t\t//printf(\"cut->\\n\");\n\t\tdebug();\n\t}\n\tint ask(int u,int v)\n\t{\n\t\t//printf(\"ask(%d,%d)\\n\",u,v);\n\t\tsplit(u,v);\n\t\tpush_down(v);\n\t\t//printf(\"%d\\n\",val[v]);\n\t\treturn val[v];\n\t}\n\tvoid init()\n\t{\n\t\tn=read(),q=read();\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\ttagc[i]=1;\n\t\t\tsize[i]=1;\n\t\t\tval[i]=num[i]=1;\n\t\t}\n\t\tdebug();\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint a=read(),b=read();\n\t\t\tlink(a,b);\n\t\t}\n\t}\n\tvoid run()\n\t{\n\t\tinit();\n\t\tfor(int i=1;i<=q;i++)\n\t\t{\n\t\t\tchar op[2];\n\t\t\tscanf(\"%s\",op);\n\t\t\tif(op[0]=='+')\n\t\t\t{\n\t\t\t\tint u=read(),v=read(),c=read();\n\t\t\t\tadd(u,v,c);\n\t\t\t}\n\t\t\telse if(op[0]=='-')\n\t\t\t{\n\t\t\t\tint u=read(),v=read();\n\t\t\t\tcut(u,v);\n\t\t\t\tu=read(),v=read();\n\t\t\t\tlink(u,v);\n\t\t\t}\n\t\t\telse if(op[0]=='*')\n\t\t\t{\n\t\t\t\tint u=read(),v=read(),c=read();\n\t\t\t\ttimes(u,v,c);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint u=read(),v=read();\n\t\t\t\twrite(ask(u,v),'\\n');\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tlct::run();\n\treturn 0;\n}\n```\n\n\u611f\u8c22\u89c2\u770b\uff01",
        "postTime": 1629210369,
        "uid": 400201,
        "name": "Wuyanru",
        "ccfLevel": 7,
        "title": "P1501 [\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II"
    },
    {
        "content": "\u7ec3\u4e60 LCT \u7684\u597d\u9898\uff0c\u6709\u5229\u4e8e\u5728\u901a\u8fc7\u6a21\u677f\u540e\u6574\u987f\u4e00\u4e0b\u51cc\u4e71\u7684\u7801\u98ce  \n~~\u770b\u7684\u65f6\u5019\u5c31\u5f53\u5361\u5e38\u6280\u5de7\u5f97\u4e86~~  \n\u9996\u5148\uff0c\u5df2\u77e5 $2^{15}<51061<2^{16}$\uff0c\u6240\u4ee5\u7528 `unsigned short` \u5b58\u50a8\uff0c`unsigned int` \u8ba1\u7b97\u662f\u6700\u4f18\u7684\u3002  \n\u5176\u6b21\uff0c\u7531\u4e8e\u65e2\u8981\u7ef4\u62a4\u4e58\u6cd5\u53c8\u8981\u7ef4\u62a4\u52a0\u6cd5\uff0c\u6613\u60f3\u5230 [P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2](https://www.luogu.com.cn/problem/P3373)  \uff0c\u4e8e\u662f\u4f18\u5148\u7ea7\u4e3a\u5148\u4e58\u540e\u52a0\u3002  \n\u6ce8\u610f\u6b64\u5904\u52a0\u6cd5\u8fd8\u8981\u7ef4\u62a4 $\\text{size}$\uff0cLCT \u8fd8\u8981\u5b9e\u73b0\u533a\u95f4\u7ffb\u8f6c\u3002  \n\u5f88\u5bb9\u6613\u5c31\u5b9e\u73b0\u4e86\u6807\u8bb0\u7684\u4e0b\u4f20\u548c\u66f4\u65b0\uff0c\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002  \n```cpp\ntypedef unsigned int\tword;\ntypedef unsigned short hword;\ntypedef unsigned char\tbyte;\nconst hword mod=51061;\nstruct splay{\n\tsplay *l,*r,*fa;\n\thword sum,size;\n\thword plustag,multag;\n\tbyte tag;\n\tinline splay(){sum=size=multag=1;}\n\tinline void operator +=(register word num){\n\t\tsum=(num*size+sum)%mod;\n\t\tif((num+=plustag)>=mod) num-=mod;\n\t\tplustag=num;\n\t}//\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\n\tinline void operator *=(register word num){\n\t\tplustag=num*plustag\t%mod;\n\t\tmultag=\tnum*multag\t%mod;\n\t\tsum=\tnum*sum\t\t%mod;\n\t}//\u6253\u4e0a\u4e58\u6cd5\u6807\u8bb0\n\tinline void operator +=(register splay* p){\n\t\tregister word num=p->sum;\n\t\tif((num+=sum)>=mod) num-=mod;\n\t\tsum=num,num=p->size;\n\t\tif((num+=size)>=mod) num-=mod;\n\t\tsize=num;\n\t}//\u52a0\u5165\u513f\u5b50\u65f6\u66f4\u65b0size\u4e0e\u548c\n\tinline void operator -=(register splay* p){\n\t\tregister word num=mod-p->sum;\n\t\tif((num+=sum)>=mod) num-=mod;\n\t\tsum=num,num=mod-p->size;\n\t\tif((num+=size)>=mod) num-=mod;\n\t\tsize=num;\n\t}//\u5220\u9664\u513f\u5b50\u65f6\u66f4\u65b0size\u4e0e\u548c\n\tinline void pushdown(){\n\t\tif(tag){\n\t\t\tif(l) l->tag^=1;\n\t\t\tif(r) r->tag^=1;\n\t\t\tregister splay* swap=l;\n\t\t\tl=r,r=swap,tag=0;\n\t\t}\n\t\tif(multag!=1){\n\t\t\tif(l) *l*=multag;\n\t\t\tif(r) *r*=multag;\n\t\t\tmultag=1;\n\t\t}\n\t\tif(plustag){\n\t\t\tif(l) *l+=plustag;\n\t\t\tif(r) *r+=plustag;\n\t\t\tplustag=0;\n\t\t}\n\t}//\u4e09\u79cd\u6807\u8bb0\u4e0b\u4f20\n\tinline void linepush(){\n\t\tif(fa) fa->linepush();\n\t\tpushdown();\n\t}//\u4f38\u5c55\u524d\u7684\u6807\u8bb0\u4e0b\u4f20\n}p[100010];\n```\n\u63a5\u4e0b\u6765\u5b9e\u73b0\u65cb\u8f6c\uff0c\u4ece\u800c\u5b9e\u73b0\u4f38\u5c55\u64cd\u4f5c\u3002\n```cpp\n#define cycle(root,l,r)\tdo{\t\t\t\\\n\tregister splay* rt=root;\t\t\\\n\tregister splay* l=rt->l;\t\t\\\n\tregister splay* l##r=l->r;\t\t\\\n\tl->fa=rt->fa,(root)=l;\t\t\t\\\n\tl->r=rt,rt->fa=l; \t\t\t\t\\\n\t*rt-=l,*l+=rt,rt->l=l##r;\t\t\\\n\tif(l##r) *rt+=l##r,l##r->fa=rt;\t\\\n}while(0)\n//\u65cb\u8f6c\u64cd\u4f5c\uff08\u4f20\u7531\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6811\u6839\uff09\n#define lcycle(root) cycle(root,l,r)\n#define rcycle(root) cycle(root,r,l)\n#define lsp(root)\t\t\t\t\t\t\t\\\n\tif(rff->l==root->fa){\t\t\t\t\t\\\n\t\tif(root->fa->l==root) lcycle(rff);\t\\\n\t\telse rcycle(rff->l);\t\t\t\t\\\n\t\tlcycle(rff);\t\t\t\t\t\t\\\n\t}else{\t\t\t\t\t\t\t\t\t\\\n\t\tif(root->fa->r==root) rcycle(rff);\t\\\n\t\telse lcycle(rff->r);\t\t\t\t\\\n\t\trcycle(rff);\t\t\t\t\t\t\\\n\t}\n//\u5bf9\u4e8e\u4e09\u4e2a\u8282\u70b9\u7684\u94fe\u7684\u4f38\u5c55\uff0c\u6ce8\u610f\u65cb\u8f6c\u65f6\u4f20\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n#define pos(p) ((p)->fa->l==(p)? (p)->fa->l:(p)->fa->r)\n//\u7531\u539f\u6307\u9488\u83b7\u53d6\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\ninline void Splay(register splay* root){\n\troot->linepush();//\u5b8c\u6210\u4f38\u5c55\u8def\u5f84\u4e0a\u7684\u6807\u8bb0\u4e0b\u4f20\n\twhile(root->fa)\n\t\tif(root->fa->fa)\n\t\t\tif(root->fa->fa->fa){\n\t\t\t\tregister splay*&rff=pos(root->fa->fa);\n\t\t\t\tlsp(root);\n\t\t\t}else{//\u5982\u679c\u65cb\u8f6c\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5c31\u4e00\u5b9a\u8981\u6539\u6210\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n\t\t\t\tregister splay* rff=root->fa->fa;\n\t\t\t\tlsp(root);\n\t\t\t}//\u5426\u5219\u7684\u8bdd\u76f4\u63a5\u4f20\u6307\u9488\u5c31\u662f\u4e86\n\t\telse if(root->fa->l==root){\n\t\t\troot=root->fa;lcycle(root);\n\t\t}else{root=root->fa;rcycle(root);}\n         //\u5bf9\u4e8e\u6700\u540e\u4e24\u4e2a\u8282\u70b9\u7684\u94fe\uff0c\u7279\u5224\n}\n```\n\u5b9e\u73b0\u4e86\u4f38\u5c55\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6253\u901a\u5b9e\u94fe\u7684\u64cd\u4f5c\u4e86\n```cpp\ntypedef unsigned int word;\nword fa[100010];\ninline void makeline(word id){\n\tregister splay *root=p+id,*top;\n\tSplay(root),root->pushdown();\n\tif(top=root->r){\n\t\twhile(top->pushdown(),top->l) top=top->l;\n\t\tfa[top-p]=root-p,root->r->fa=0;\n\t\t*root-=root->r,root->r=0;\n\t}//\u9996\u5148\u5c06\u5f85\u6253\u901a\u8282\u70b9\u540e\u7684\u5b9e\u94fe\u622a\u65ad\uff0c\u6362\u4e3a\u865a\u8fb9\n\tfor(top=root;top->l;top=top->l,top->pushdown());\n\twhile(fa[top-p]){//\u6bcf\u6b21\u8df3\u4e00\u6761\u865a\u8fb9\n\t\tregister splay* next=p+fa[top-p];\n\t\tSplay(next),next->pushdown();\n\t\tif(top=next->r){\n\t\t\twhile(top->pushdown(),top->l) top=top->l;\n\t\t\tfa[top-p]=next-p,next->r->fa=0;\n\t\t\t*next-=next->r;\n\t\t}//\u5c06\u7236\u4eb2\u539f\u6709\u7684\u5b9e\u94fe\u622a\u65ad\uff0c\u6362\u4e3a\u865a\u8fb9\n\t\tnext->r=root,root->fa=next,*next+=root;\n      \t\t//\u7136\u540e\u63a5\u4e0a\u6240\u9700\u7684\u94fe\n\t\tfor(top=root=next;top->l;top=top->l,top->pushdown());\n\t}\n}\ninline void makeroot(word id){\n\tmakeline(id),Splay(p+id);\n\tp[id].tag^=1,fa[id]=0;\n   \t//\u6253\u901a\u5b9e\u94fe\u540e\u533a\u95f4\u7ffb\u8f6c\u5373\u53ef\u6362\u6839\uff0c\u6ce8\u610f\u6839\u8282\u70b9\u7236\u4eb2\u8bbe\u4e3a0\n}\n```\n\u5b8c\u6210 LCT \u57fa\u672c\u64cd\u4f5c\u7684\u6784\u5efa\u540e\uff0c\u8ba9\u6211\u4eec\u5206\u6790\u5404\u4e2a\u64cd\u4f5c\n\n- \u8fde\u8fb9\uff1a$u$ \u7f6e\u4e3a\u6839\u540e\uff0c \u5c06 LCT \u4e0a\u7684\u7236\u4eb2\u7f6e\u4e3a $v$\u3002\n- `+` \u6253\u901a\u94fe\u4e4b\u540e\u7ed9\u94fe\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\u3002\n- `*` \u540c\u4e0a\u3002\n- `-` $u_1$ \u7f6e\u4e3a\u6839\uff0c\u82e5 $u_1,v_1$ \u4e4b\u95f4\u4e3a\u5b9e\u8fb9\uff0c\u65ad\u5f00\uff1b  \n$v_1$ \u7236\u4eb2\u8bbe\u4e3a $0$\uff0c\u7136\u540e\u8fde\u4e0a $u_2,v_2$\u3002\n- `/` \u6253\u901a\u94fe\u4e4b\u540e\u8f93\u51fa\u7ed3\u679c\u5c31\u662f\u4e86\u3002\n\n\u6700\u540e\u5f00\u59cb\u5361\u5e38\uff1a\n\n- \u6ce8\u610f\u5230\u53ea\u8f93\u5165\u975e\u8d1f\u6574\u6570\uff0c\u4e8e\u662f `fread` \u8bfb\u5165\u5b9e\u73b0\u5feb\u8bfb\u3002\n- \u800c\u4e14\u6bcf\u6b21\u8be2\u95ee\u8f93\u5165\u7684\u6570\u636e\u91cf\u603b\u5927\u4e8e\u7b49\u4e8e\u8f93\u51fa  \n\uff08\u4e00\u6b21 `/ u v` \u64cd\u4f5c\u8f93\u5165\u6700\u5c11 $6$ \u5b57\u8282\uff08\u5305\u542b\u7a7a\u683c\u548c\u56de\u8f66\uff09\uff0c\u8f93\u51fa\u6700\u591a $6$ \u5b57\u8282\uff08\u5305\u542b\u56de\u8f66\uff09\uff09  \n\u4e8e\u662f `fwrite` \u5b9e\u73b0\u5feb\u8f93\uff0c\u5e76\u4e0e\u5feb\u8bfb\u5171\u4eab\u4e00\u4e2a\u6570\u7ec4\n- \u5e38\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u6253\u4e0a `register`\uff08\u524d\u6587\u5df2\u6253\u4e0a\uff09\n- \u6240\u6709\u51fd\u6570\u6253\u4e0a `inline`\uff08\u524d\u6587\u5df2\u6253\u4e0a\uff09\n\n\u6700\u540e\u7684\u5feb\u8bfb\u548c\u4e3b\u51fd\u6570\uff1a\n```cpp\ntypedef unsigned int word;\ntypedef unsigned short hword;\ntypedef unsigned char byte;\nchar pool[3<<20];\nstruct READ{//\u5feb\u8bfb\u548c\u5feb\u8f93\n\tchar *top,*outtop;//\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u6307\u9488\n\tinline READ(){fread(outtop=top=pool,3<<20,1,stdin);}\n\tinline ~READ(){fwrite(pool,outtop-pool,1,stdout);}\n    //fread\u4e00\u6b21\u6027\u8bfb\u5165\uff0cfwrite\u4e00\u6b21\u6027\u8f93\u51fa\n\ttemplate<typename type>\n\tinline READ& operator >>(register type& num){\n\t\twhile('0'>*top||*top>'9') ++top;\n\t\tfor(num=0;'0'<=*top&&*top<='9';)\n\t\t\tnum=num*10+(*(top++)-'0');\n\t\treturn *this;\n\t}//\u8bfb\u5165\uff08\u4ec5\u65e0\u7b26\u53f7\u6574\u6570\uff09\n\tinline void outnum(hword num){//\u8f93\u51fa\uff08\u4ec5 unsigned short\uff09\n\t\tif(num) outnum(num/10),*(outtop++)='0'+num%10;}\n\ttemplate<typename type>\n\tinline READ& operator <<(register type& num){\n\t\tnum? outnum(num):void(*(outtop++)='0');\n\t\treturn *(outtop++)='\\n',*this;\n\t}//\u5bf9\u4e8e0\u7279\u5224\uff0c\u8f93\u51fa\u56de\u8f66\n};\nint main(){\n\tregister READ cin;//\u6b64cin\u975e\u5f7ccin\uff0c\u5b9e\u73b0\u5982\u4e0a\n\tword n,q;\n\tcin>>n>>q;\n\tfor(register word u,v;n>1;--n)\n\t\tcin>>u>>v,makeroot(u),fa[u]=v;\n\tfor(register word u,v;q;--q){\n\t\twhile(*cin.top==' '||*cin.top=='\\n') ++cin.top;\n\t\tregister byte opt=*cin.top;//\u83b7\u53d6\u64cd\u4f5c\u7c7b\u522b\n\t\tif(cin>>u>>v,opt=='/'){//\u8f93\u51fa\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin<<p[v].sum;\n\t\t}else if(opt=='-'){//\u65ad\u8fb9\n\t\t\tmakeroot(u),Splay(p+v);\n\t\t\tif(p[v].pushdown(),p[v].l==p+u)\n\t\t\t\tp[v]-=p+u,p[u].fa=0,p[v].l=0;\n\t\t\tfa[v]=0,cin>>u>>v;\n\t\t\tmakeroot(u),fa[u]=v;\n\t\t}else if(opt=='+'){//\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin>>u,p[v]+=u;\n\t\t}else if(opt=='*'){//\u6253\u4e0a\u4e58\u6cd5\u6807\u8bb0\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin>>u,p[v]*=u;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u6700\u7ec8\u4ee3\u7801\uff08\u4e0d\u5f00 O2 4.10s\uff0c\u5f00 O2 2.20s \u5de6\u53f3\uff0c\u76f8\u5f53\u5feb\uff09\n```cpp\n#include<stdio.h>\ntypedef unsigned int\tword;\ntypedef unsigned short hword;\ntypedef unsigned char\tbyte;\nconst hword mod=51061;\nstruct splay{\n\tsplay *l,*r,*fa;\n\thword sum,size;\n\thword plustag,multag;\n\tbyte tag;\n\tinline splay(){sum=size=multag=1;}\n\tinline void operator +=(register word num){\n\t\tsum=(num*size+sum)%mod;\n\t\tif((num+=plustag)>=mod) num-=mod;\n\t\tplustag=num;\n\t}//\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\n\tinline void operator *=(register word num){\n\t\tplustag=num*plustag\t%mod;\n\t\tmultag=\tnum*multag\t%mod;\n\t\tsum=\tnum*sum\t\t%mod;\n\t}//\u6253\u4e0a\u4e58\u6cd5\u6807\u8bb0\n\tinline void operator +=(register splay* p){\n\t\tregister word num=p->sum;\n\t\tif((num+=sum)>=mod) num-=mod;\n\t\tsum=num,num=p->size;\n\t\tif((num+=size)>=mod) num-=mod;\n\t\tsize=num;\n\t}//\u52a0\u5165\u513f\u5b50\u65f6\u66f4\u65b0size\u4e0e\u548c\n\tinline void operator -=(register splay* p){\n\t\tregister word num=mod-p->sum;\n\t\tif((num+=sum)>=mod) num-=mod;\n\t\tsum=num,num=mod-p->size;\n\t\tif((num+=size)>=mod) num-=mod;\n\t\tsize=num;\n\t}//\u5220\u9664\u513f\u5b50\u65f6\u66f4\u65b0size\u4e0e\u548c\n\tinline void pushdown(){\n\t\tif(tag){\n\t\t\tif(l) l->tag^=1;\n\t\t\tif(r) r->tag^=1;\n\t\t\tregister splay* swap=l;\n\t\t\tl=r,r=swap,tag=0;\n\t\t}\n\t\tif(multag!=1){\n\t\t\tif(l) *l*=multag;\n\t\t\tif(r) *r*=multag;\n\t\t\tmultag=1;\n\t\t}\n\t\tif(plustag){\n\t\t\tif(l) *l+=plustag;\n\t\t\tif(r) *r+=plustag;\n\t\t\tplustag=0;\n\t\t}\n\t}//\u4e09\u79cd\u6807\u8bb0\u4e0b\u4f20 \n\tinline void linepush(){\n\t\tif(fa) fa->linepush();\n\t\tpushdown();\n\t}//\u4f38\u5c55\u524d\u7684\u6807\u8bb0\u4e0b\u4f20 \n}p[100010];\n#define cycle(root,l,r)\tdo{\t\t\t\\\n\tregister splay* rt=root;\t\t\\\n\tregister splay* l=rt->l;\t\t\\\n\tregister splay* l##r=l->r;\t\t\\\n\tl->fa=rt->fa,(root)=l;\t\t\t\\\n\tl->r=rt,rt->fa=l; \t\t\t\t\\\n\t*rt-=l,*l+=rt,rt->l=l##r;\t\t\\\n\tif(l##r) *rt+=l##r,l##r->fa=rt;\t\\\n}while(0)\n//\u65cb\u8f6c\u64cd\u4f5c\uff08\u4f20\u7531\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6811\u6839\uff09\n#define lcycle(root) cycle(root,l,r)\n#define rcycle(root) cycle(root,r,l)\n#define lsp(root)\t\t\t\t\t\t\t\\\n\tif(rff->l==root->fa){\t\t\t\t\t\\\n\t\tif(root->fa->l==root) lcycle(rff);\t\\\n\t\telse rcycle(rff->l);\t\t\t\t\\\n\t\tlcycle(rff);\t\t\t\t\t\t\\\n\t}else{\t\t\t\t\t\t\t\t\t\\\n\t\tif(root->fa->r==root) rcycle(rff);\t\\\n\t\telse lcycle(rff->r);\t\t\t\t\\\n\t\trcycle(rff);\t\t\t\t\t\t\\\n\t}\n//\u5bf9\u4e8e\u4e09\u4e2a\u8282\u70b9\u7684\u94fe\u7684\u4f38\u5c55\uff0c\u6ce8\u610f\u65cb\u8f6c\u65f6\u4f20\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n#define pos(p) ((p)->fa->l==(p)? (p)->fa->l:(p)->fa->r)\n//\u7531\u539f\u6307\u9488\u83b7\u53d6\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\ninline void Splay(register splay* root){\n\troot->linepush();//\u5b8c\u6210\u4f38\u5c55\u8def\u5f84\u4e0a\u7684\u6807\u8bb0\u4e0b\u4f20\n\twhile(root->fa)\n\t\tif(root->fa->fa)\n\t\t\tif(root->fa->fa->fa){\n\t\t\t\tregister splay*&rff=pos(root->fa->fa);\n\t\t\t\tlsp(root);\n\t\t\t}else{//\u5982\u679c\u65cb\u8f6c\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5c31\u4e00\u5b9a\u8981\u6539\u6210\u7236\u4eb2\u6307\u5411\u513f\u5b50\u7684\u6307\u9488\n\t\t\t\tregister splay* rff=root->fa->fa;\n\t\t\t\tlsp(root);\n\t\t\t}//\u5426\u5219\u7684\u8bdd\u76f4\u63a5\u4f20\u6307\u9488\u5c31\u662f\u4e86\n\t\telse if(root->fa->l==root){\n\t\t\troot=root->fa;lcycle(root);\n\t\t}else{root=root->fa;rcycle(root);}\n         //\u5bf9\u4e8e\u6700\u540e\u4e24\u4e2a\u8282\u70b9\u7684\u94fe\uff0c\u7279\u5224\n}\nword fa[100010];\ninline void makeline(word id){\n\tregister splay *root=p+id,*top;\n\tSplay(root),root->pushdown();\n\tif(top=root->r){\n\t\twhile(top->pushdown(),top->l) top=top->l;\n\t\tfa[top-p]=root-p,root->r->fa=0;\n\t\t*root-=root->r,root->r=0;\n\t}//\u9996\u5148\u5c06\u5f85\u6253\u901a\u8282\u70b9\u540e\u7684\u5b9e\u94fe\u622a\u65ad\uff0c\u6362\u4e3a\u865a\u8fb9\n\tfor(top=root;top->l;top=top->l,top->pushdown());\n\twhile(fa[top-p]){//\u6bcf\u6b21\u8df3\u4e00\u6761\u865a\u8fb9\n\t\tregister splay* next=p+fa[top-p];\n\t\tSplay(next),next->pushdown();\n\t\tif(top=next->r){\n\t\t\twhile(top->pushdown(),top->l) top=top->l;\n\t\t\tfa[top-p]=next-p,next->r->fa=0;\n\t\t\t*next-=next->r;\n\t\t}//\u5c06\u7236\u4eb2\u539f\u6709\u7684\u5b9e\u94fe\u622a\u65ad\uff0c\u6362\u4e3a\u865a\u8fb9\n\t\tnext->r=root,root->fa=next,*next+=root;\n      \t\t//\u7136\u540e\u63a5\u4e0a\u6240\u9700\u7684\u94fe\n\t\tfor(top=root=next;top->l;top=top->l,top->pushdown());\n\t}\n}\ninline void makeroot(word id){\n\tmakeline(id),Splay(p+id);\n\tp[id].tag^=1,fa[id]=0;\n   \t//\u6253\u901a\u5b9e\u94fe\u540e\u533a\u95f4\u7ffb\u8f6c\u5373\u53ef\u6362\u6839\uff0c\u6ce8\u610f\u6839\u8282\u70b9\u7236\u4eb2\u8bbe\u4e3a0\n}\nchar pool[3<<20];\nstruct READ{//\u5feb\u8bfb\u548c\u5feb\u8f93\n\tchar *top,*outtop;//\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u6307\u9488\n\tinline READ(){fread(outtop=top=pool,3<<20,1,stdin);}\n\tinline ~READ(){fwrite(pool,outtop-pool,1,stdout);}\n    //fread\u4e00\u6b21\u6027\u8bfb\u5165\uff0cfwrite\u4e00\u6b21\u6027\u8f93\u51fa\n\ttemplate<typename type>\n\tinline READ& operator >>(register type& num){\n\t\twhile('0'>*top||*top>'9') ++top;\n\t\tfor(num=0;'0'<=*top&&*top<='9';)\n\t\t\tnum=num*10+(*(top++)-'0');\n\t\treturn *this;\n\t}//\u8bfb\u5165\uff08\u4ec5\u65e0\u7b26\u53f7\u6574\u6570\uff09\n\tinline void outnum(hword num){//\u8f93\u51fa\uff08\u4ec5 unsigned short\uff09\n\t\tif(num) outnum(num/10),*(outtop++)='0'+num%10;}\n\ttemplate<typename type>\n\tinline READ& operator <<(register type& num){\n\t\tnum? outnum(num):void(*(outtop++)='0');\n\t\treturn *(outtop++)='\\n',*this;\n\t}//\u5bf9\u4e8e0\u7279\u5224\uff0c\u8f93\u51fa\u56de\u8f66\n};\nint main(){\n\tregister READ cin;//\u6b64cin\u975e\u5f7ccin\uff0c\u5b9e\u73b0\u5982\u4e0a\n\tword n,q;\n\tcin>>n>>q;\n\tfor(register word u,v;n>1;--n)\n\t\tcin>>u>>v,makeroot(u),fa[u]=v;\n\tfor(register word u,v;q;--q){\n\t\twhile(*cin.top==' '||*cin.top=='\\n') ++cin.top;\n\t\tregister byte opt=*cin.top;//\u83b7\u53d6\u64cd\u4f5c\u7c7b\u522b\n\t\tif(cin>>u>>v,opt=='/'){//\u8f93\u51fa\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin<<p[v].sum;\n\t\t}else if(opt=='-'){//\u65ad\u8fb9\n\t\t\tmakeroot(u),Splay(p+v);\n\t\t\tif(p[v].pushdown(),p[v].l==p+u)\n\t\t\t\tp[v]-=p+u,p[u].fa=0,p[v].l=0;\n\t\t\tfa[v]=0,cin>>u>>v;\n\t\t\tmakeroot(u),fa[u]=v;\n\t\t}else if(opt=='+'){//\u6253\u4e0a\u52a0\u6cd5\u6807\u8bb0\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin>>u,p[v]+=u;\n\t\t}else if(opt=='*'){//\u6253\u4e0a\u4e58\u6cd5\u6807\u8bb0\n\t\t\tmakeroot(u),makeline(v);\n\t\t\tSplay(p+v),cin>>u,p[v]*=u;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1603719338,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "# Link-Cut-Tree \u5c0f\u7ed3  \n\n## \u652f\u6301\u7684\u64cd\u4f5c\n+ \u8fde\u8fb9\uff0c\u65ad\u8fb9\n+ \u6362\u6839\n+ \u67e5\u8be2\u94fe\u4e0a\u4fe1\u606f\n+ \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f ~~\uff08\u6211\u4e0d\u4f1a~~\n\n## \u4e3b\u8981\u601d\u60f3/\u6027\u8d28\n\u628a\u4e00\u68f5\u6811\u5206\u6210\u5f88\u591a\u6761\u94fe\uff08\u521d\u59cb\u7684\u65f6\u5019\u90fd\u662f\u70b9\uff09\uff0c\u6bcf\u4e00\u6761\u94fe\u90fd\u662f\u4e00\u4e2aSplay\uff0c\u7136\u540e\u6765\u8fdb\u884c\u7ef4\u62a4\u3002  \n+ \u6bcf\u4e2aSplay\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u70b9\u7684\u6df1\u5ea6\u5fc5\u5b9a\u662f\u4e25\u683c\u9012\u589e\u7684\uff0c\u5b83\u7ef4\u62a4\u7684\u662f\u4ece\u4e0a\u5230\u4e0b\u6df1\u5ea6\u4e25\u683c\u9012\u589e\u7684\u4e00\u6392\u70b9\u3002\n+ \u6bcf\u4e2a\u70b9\u90fd\u6070\u597d\u88ab\u4e00\u4e2aSplay\u5305\u542b\n+ \u5728\u4e00\u4e2aSplay\u5185\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u662f\u5b9e\u8fb9\uff0c\u4e0d\u5728\u7684\u4e3a\u865a\u8fb9\u3002\n+ \u5728\u539f\u6765\u7684\u6811\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u53ea\u80fd\u5411\u4e00\u4e2a\u513f\u5b50\u8fde\u4e00\u6761\u5b9e\u8fb9\uff08\u56e0\u4e3a\u6027\u8d28\u4e8c\uff09\u3002\u5728\u6211\u4eec\u9700\u8981\u4fee\u6539\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u8fd9\u4e00\u70b9\u3002\n \n## \u64cd\u4f5c\n### $access(x)$\n**\u8fd9\u4e2a\u64cd\u4f5c\u8ba9\u6211\u4eec\u6253\u901a\u4ece\u6839\u8282\u70b9\uff0c\u5230$x$\u8fd9\u4e2a\u70b9\u7684\u4e00\u6761\u5b9e\u8def\u5f84\uff0c\u4e14\u8ba9$x$\u6210\u4e3a\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6700\u6df1\u7684\u70b9\uff08\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u5728$x$\u4e0b\u9762\u7684\u4e86\uff09**  \n\n(\u501f\u4e00\u4e0b\u56fe\uff09  \n\n![avatar](https://images2017.cnblogs.com/blog/1309909/201801/1309909-20180123095924037-1618037447.png)  \n\n\u5047\u8bbe\u4e00\u5f00\u59cb\u7684\u5212\u5206\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\u6211\u4eec\u60f3\u8981\u6253\u901a\u4e00\u6761\u4ece\u6839\u8282\u70b9$A$\u5230$N$\u7684\u8def\u5f84\u3002\u90a3\u4e48\uff0c\u6bcf\u4e2a\u70b9\u5230\u8fd9\u6761\u8def\u4ee5\u5916\u7684\u5b9e\u8fb9\u8981\u53d8\u6210\u865a\u8fb9\uff0c\u8fd9\u6761\u8def\u4e0a\u7684\u865a\u8fb9\u8981\u53d8\u6210\u5b9e\u8fb9\u3002  \n\u6240\u4ee5\u5148\u628a$N$\u8f6c\u5230\u6240\u5728Splay\u7684\u6839\uff0c\u7136\u540e\u4e22\u4e0b\u53f3\u8fb9\u7684\u5b50\u6811\uff0c\u4e5f\u5c31\u662f\u8fd9\u91cc\u7684O\u70b9\uff0c\u56e0\u4e3a\u90a3\u4e9b\u662f\u4e0d\u5728$A->N$\u8fd9\u6761\u8def\u4e0a\u7684\uff0c\u540c\u65f6\u7531\u4e8e\u513f\u5b50\u53d1\u751f\u53d8\u5316\uff0c\u8981\u66f4\u65b0\u8fd9\u91ccSplay\u7684\u4fe1\u606f\u3002\u7136\u540e\u53bb\u5bf9$N$\u7684\u7236\u4eb2\u505a\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u628a\u4ed6\u7684\u7236\u4eb2\u7684\u53f3\u8fb9\u7684\u5b50\u6811\u7f6e\u4e3a$x$\u56e0\u4e3a\u6bd4\u5b83\u6df1\u7684\u5b9e\u94fe\u4e0a\u7684\u70b9\u5c31\u662f$x$\u4e3a\u6839\u7684\u8fd9\u9897\u5b50\u6811\u4e0a\u7684\u5b9e\u94fe\u3002  \n**\u6b65\u9aa4**\uff1a  \n+ \u65cb\u8f6c\u5230\u6839\n+ \u7f6e\u6362\u53f3\u513f\u5b50\n+ \u66f4\u65b0\u4fe1\u606f\n+ \u8bb0\u5f55\u5f53\u524d\u70b9\uff0c\u5f53\u524d\u70b9\u7f6e\u6362\u4e3a\u7236\u8282\u70b9\n\n``` cpp\ninline void access(int x)\n{\n\tfor(R int y=0;x;x=fa[y=x])\n\t\tsplay(x),rs(x)=y,pushup(x);\n}\n``` \n\u6309\u7167\u4e0a\u56fe\u7684\u8fc7\u7a0b\u6a21\u62df\u5c31\u76f4\u63a5see\u4e00\u4e0b[FlashHu\u5de8\u4f6c\u7684\u535a\u5ba2](https://www.cnblogs.com/flashhu/p/8324551.html)\u3002 \n  \n### $makeroot(x)$\n\u7531\u4e8eSplay\u53ea\u80fd\u7ef4\u62a4\u4ece\u4e0a\u5230\u4e0b\u6df1\u5ea6\u9012\u589e\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u53ea\u6709$access$\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u8981\u8bbf\u95ee\u5982\u4e0a\u56fe$E->G$\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u8fd8\u8981\u6362\u6839\u3002\u7531\u4e8e$access(x)$\u540ex\u4f1a\u662f\u8fd9\u6761\u94fe\u4e0a\u6700\u6df1\u7684\u70b9\uff0c\u90a3\u4e48\u7ffb\u8f6c\u7684\u8bdd\u5c31\u4f1a\u53d8\u6210\u6700\u6d45\u7684\u70b9\uff0c\u7531\u4e8e\u539f\u672c\u6700\u6d45\u7684\u70b9\u662f\u539f\u6765\u7684\u6811\u7684\u6839\uff08\u6ce8\u610f\u6211\u8bf4\u7684\u4e0d\u662fSplay\uff09\uff0c\u6240\u4ee5\u7ffb\u8f6c\u4e4b\u540e\uff0c\u539f\u6765\u7684\u6811\u7684\u6839\u5c31\u4f1a\u53d8\u6210$x$\u3002\n``` cpp\ninline void makeroot(int x)\n{\n\taccess(x);splay(x);\n\tpushr(x);\n}\n```\n~~\u597d\u77ed\u554a~~\n\n### $findroot(x)$\n\u6253\u901a\u5230$x$\u7684\u8def\uff0c\u7136\u540e\u6c42\u8fd9\u6761\u5b9e\u94fe\u4e0a\u6df1\u5ea6\u6700\u6d45\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u5728Splay\u4e0a\u5f80\u5de6\u513f\u5b50\u8d70\u5c31\u884c\u4e86\u3002\u8bb0\u5f97\u627e\u5230\u4e86\u4e4b\u540e\u8981$splay(x)$\u6765\u8fd8\u539f\u6839\uff0c\u4e00\u822c\u9519\u5f97\u5c31\u5c11\u3002\n\n``` cpp\ninline int findroot(int x)\n{\n\taccess(x);splay(x);\n\twhile(ls(x)) pushdown(x),x=ls(x);\n\tsplay(x);\n\treturn x;\n}\n```\n\n### $split(x,y)$\n\u63d0\u53d6\u4ece$x$\u5230$y$\u7684\u8def\u5f84\u3002\u76f4\u63a5\u628a$x$\u641e\u6210\u6839\uff0c\u7136\u540e\u6253\u901a\u5230y\u5c31\u884c\u4e86\u3002\u540c\u65f6$splay(y)$\u8ba9\u8fd9\u6761\u94fe\u4e0a\u7684\u4fe1\u606f\u5168\u90e8\u5b58\u50a8\u5230y\u4e0a\u3002\n\n``` cpp\ninline void split(int x,int y)\n{\n\tmakeroot(x);\n\taccess(y);splay(y);\n}\n```\n\n### $link(x,y)$\n``` cpp\ninline void link(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)!=x) fa[x]=y;\n}\n```\n\n### $cut(x,y)$\n\u5148\u628a$x$\u7f6e\u4e3a\u6839\uff0c\u7136\u540e\u770b$y$\u662f\u5426\u548c$x$\u5728\u4e00\u68f5\u6811\u91cc\uff0c\u7136\u540e\u5b83\u7684\u7236\u8282\u70b9\u662f\u4e0d\u662f$x$,\u8fd8\u6709\u5b83\u662f\u5426\u6709\u5de6\u5b50\u8282\u70b9\u3002\u56e0\u4e3a\u5982\u679c\u5b83\u6709\u5de6\u5b50\u8282\u70b9\uff0c\u5b83\u5c31\u4f1a\u548c$x$\u4e4b\u95f4\u4e0d\u76f4\u63a5\u8fde\u8fb9\uff0c\u4ece\u800c\u4e5f\u4e0d\u53ef\u4ee5\u65ad\u5f00\u3002\n\n``` cpp\ninline void cut(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)==x&&fa[y]==x&&ls(y)==0)\n\t{\n\t\tfa[y]=ch[x][1]=0;\n\t\tpushup(x);\n\t}\n}\n```\n\n## luogu1501\u6a21\u677f\u9898\u4ee3\u7801\n``` cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n#define R register\n#define int unsigned int\nconst int MAXN=1e5+10;\nconst int mod=51061;\n\n#define ls(x) ch[x][0]\n#define rs(x) ch[x][1]\n\nint rev[MAXN],siz[MAXN],fa[MAXN],ch[MAXN][2];\nint sum[MAXN],plu[MAXN],rid[MAXN],val[MAXN];\n\ninline void pushup(int x)\n{\n\tsiz[x]=siz[ls(x)]+siz[rs(x)]+1;\n\tsum[x]=(sum[ls(x)]+sum[rs(x)]+val[x])%mod;\n}\n\ninline void pushr(int x)\n{\n\tswap(ls(x),rs(x));\n\trev[x]^=1;\n}\n\ninline void add(int &x,int y)\n{\n\tx+=y;x%=mod;\n}\n\ninline void mul(int &x,int y)\n{\n\tx*=y;x%=mod;\n}\n\ninline void pushp(int x,int c)\n{\n\tadd(sum[x],c*siz[x]);\n\tadd(val[x],c);\n\tadd(plu[x],c);\n}\n\ninline void pushm(int x,int c)\n{\n\tmul(sum[x],c);\n\tmul(val[x],c);\n\tmul(rid[x],c);\n\tmul(plu[x],c);\n}\n\ninline void pushdown(int x)\n{\n\tif(rid[x]!=1)\n\t\tpushm(ls(x),rid[x]),pushm(rs(x),rid[x]),rid[x]=1;\n\tif(plu[x])\n\t\tpushp(ls(x),plu[x]),pushp(rs(x),plu[x]),plu[x]=0;\n\tif(rev[x])\n\t{\n\t\tif(ls(x)) pushr(ls(x));\n\t\tif(rs(x)) pushr(rs(x));\n\t\trev[x]=0;\n\t}\t\n}\n\ninline int nroot(int x)\n{\n\treturn ch[fa[x]][0]==x||ch[fa[x]][1]==x;\n}\n\ninline void rotate(int x)\n{\n\tint y=fa[x],z=fa[y];\n\tint k=ch[y][1]==x;\n\tint w=ch[x][!k];\n\tif(nroot(y))\n\t\tch[z][ch[z][1]==y]=x;\n\tch[x][!k]=y;ch[y][k]=w;\n\tif(w) fa[w]=y;\n\tfa[y]=x;fa[x]=z;\n\tpushup(y);\n}\n\ninline void pushall(int x)\n{\n\tif(nroot(x)) pushall(fa[x]);\n\tpushdown(x);\n}\n\ninline void splay(int x)\n{\n\tint y=x,z=0;\n\tpushall(x);\n\twhile(nroot(x))\n\t{\n\t\ty=fa[x],z=fa[y];\n\t\tif(nroot(y))\n\t\t\trotate((ch[y][0]==x)^(ch[z][0]==y)?x:y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\n\ninline void access(int x)\n{\n\tfor(R int y=0;x;x=fa[y=x])\n\t\tsplay(x),rs(x)=y,pushup(x);\n}\n\ninline void makeroot(int x)\n{\n\taccess(x);splay(x);\n\tpushr(x);\n}\n\ninline int findroot(int x)\n{\n\taccess(x);splay(x);\n\twhile(ls(x)) pushdown(x),x=ls(x);\n\tsplay(x);\n\treturn x;\n}\n\ninline void split(int x,int y)\n{\n\tmakeroot(x);\n\taccess(y);splay(y);\n}\n\ninline void link(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)!=x) fa[x]=y;\n}\n\ninline void cut(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)==x&&fa[y]==x&&ls(y)==0)\n\t{\n\t\tfa[y]=ch[x][1]=0;\n\t\tpushup(x);\n\t}\n}\n\ninline void Add(int x,int y,int c)\n{\n\tsplit(x,y);\n\tpushp(y,c);\n}\n\ninline void Mul(int x,int y,int c)\n{\n\tsplit(x,y);\n\tpushm(y,c);\n}\n\ninline void Ask(int x,int y)\n{\n\tsplit(x,y);\n\tprintf(\"%d\\n\",sum[y]);\n}\n\nsigned main()\n{\n\tint n,q;\n\tscanf(\"%d%d\",&n,&q);\n\tfor(R int i=1;i<=n;i++)\n\t\tsiz[i]=rid[i]=val[i]=1;\n\tfor(R int i=1;i<n;i++)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tlink(a,b);\n\t}\n\twhile(q--)\n\t{\n\t\tchar op[2];\n\t\tscanf(\"%s\",op);\n\t\tif(op[0]=='+')\n\t\t{\n\t\t\tint u,v,c;\n\t\t\tscanf(\"%d%d%d\",&u,&v,&c);\n\t\t\tAdd(u,v,c);\n\t\t}\n\t\tif(op[0]=='-')\n\t\t{\n\t\t\tint a,b,c,d;\n\t\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\t\tcut(a,b);\n\t\t\tlink(c,d);\n\t\t}\n\t\tif(op[0]=='*')\n\t\t{\n\t\t\tint u,v,c;\n\t\t\tscanf(\"%d%d%d\",&u,&v,&c);\n\t\t\tMul(u,v,c);\n\t\t}\n\t\tif(op[0]=='/')\n\t\t{\n\t\t\tint u,v;\n\t\t\tscanf(\"%d%d\",&u,&v);\n\t\t\tAsk(u,v);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1585892877,
        "uid": 139012,
        "name": "______OvO______",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    },
    {
        "content": "[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\n\n\u5176\u5b9e\u770b\u5f97\u51fa\u6765\uff0cLCT\u677f\u677f\uff0c\u4f46\u8fd9\u548c\u522b\u7684\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u533a\u522b\uff0c\u6bcf\u6b21\u4fee\u6539\uff0c\n\n\u67e5\u8be2\uff0c\u90fd\u5148Split(x , y) \u8ba9\u4e4b\u524d\u7684\u6807\u8bb0\u5f80\u4e0b\u4f20\uff0c\u5e76\u62c9\u51fa\u4e00\u6761\u94fe\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u7684\n\n\u662f\uff0c\u6bcf\u4e00\u6b21\u5fc5\u987b\u628aadd \uff0cmul\uff0c\u548c sum \u4e00\u8d77\u6539\u6389\u3002\u5f53\u65f6\u6211\u4e00\u76f4\u6ca1\u6709\u641e\u61c2\u4e3a\u4ec0\u4e48\n\nsum\u6807\u8bb0\u4e5f\u8981\u4e00\u8d77\u6539\uff08\u592a\u83dc\u4e86\uff09\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u6bcf\u6b21pushup\u90fd\u4f1a\u5bf9sum\u8fdb\u884c\u4fee\u6539\n\n\uff08\u66f4\u83dc\u4e86\uff09 \n\n\u597d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\n\n![](https://i.loli.net/2019/03/24/5c96d34edd1fd.png)\n\n(\u849f\u84bb\u624b\u7ed8\uff0c\u4e0d\u8981\u592a\u5efa\u8bae)\n\n\u4e0a\u56fe\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u7f8e\u5999\u7684\u4e00\u68f5splay\uff0c\u5982\u679c\u6211\u4eec\u5047\u8bbe3\u6c42\u51fa\u4e86sum\uff0c\u63a5\u7740\uff0c\n\n\u6211\u4eec\u6253\u7b97 splay 4 \uff0c\u5982\u679c\u4f60\u4e0d\u7ed93\u6253\u4e00\u4e2asum\u6807\u8bb0\uff0c\u5f53\u66f4\u65b02\u7684\u503c\u65f6\n\n\uff08pushup 2\uff09\u5c31\u4f1a\u51fa\u9519\u4e86\n\n\u53ef\u80fd\u849f\u84bb\u5206\u6790\u7684\u4e0d\u592a\u5bf9\uff0c\u5982\u8fd8\u6709\u95ee\u9898\uff0c\u53ef\u4ee5\u79c1\u4fe1Mital\u5de8\u4f6c\uff0c\u6216\u8005\u79c1\u4fe1\u83dc\u83dc\n\nSkounputer\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std ;\n#define ls ch[x][0]\n#define rs ch[x][1]\n#define N 100007\n#define Mod 51061\n#define int long long\nint lazy[N] , turn[N] , ch[N][2] , sum[N] , df[N] , mul[N] , fa[N] , st[N] , siz[N] ;\nint n , q ;\ninline int read()\n{\n    int x = 0, f = 1; char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\nvoid pushr(int x)\n{\n    swap( ls , rs ) ;\n    turn[x] ^= 1 ; return ;\n}\nvoid pushup(int x)\n{\n    siz[x] = 1 ;\n    sum[x] = df[x] ;\n    if( ls ) ( sum[x] += sum[ls] ) %= Mod , siz[x] += siz[ls] ;\n    if( rs ) ( sum[x] += sum[rs] ) %= Mod , siz[x] += siz[rs] ;\n}\nvoid push(int x) {swap(ch[x][0], ch[x][1]), turn[x] ^= 1;}\nvoid push1(int u, int v)\n{\n    sum[u] = (sum[u] + v * siz[u] % Mod) % Mod;\n    lazy[u] = ( lazy[u] + v ) % Mod, df[u] = ( df[u] + v ) % Mod;\n}\nvoid push2(int u, int v)\n{\n    sum[u] = sum[u] * v % Mod;\n    df[u] = df[u] * v % Mod;\n    lazy[u] = lazy[u] * v % Mod, mul[u] = mul[u] * v % Mod;\n}\nvoid pushdown(int x)\n{\n    if( mul[x] != 1 ) push2( ch[x][0] ,  mul[x] ) , push2( ch[x][1] ,  mul[x] ), mul[x] = 1 ;\n    if( lazy[x] ) push1( ch[x][0] , lazy[x] ), push1( ch[x][1] , lazy[x] ) , lazy[x] = 0 ;\n    if( turn[x] ) push( ch[x][0] ) , push( ch[x][1] ), turn[x] = 0 ;\n}\nint nroot(int x)\n{\n    return ch[fa[x]][1] == x || ch[fa[x]][0] == x ;\n}\nint Get(int x)\n{\n    return ch[fa[x]][1] == x ;\n}\nvoid rotate(int x)\n{\n    int boss = fa[x] , gradboss = fa[boss] , w = Get(x) ;\n    if( nroot(boss) ) ch[gradboss][ch[gradboss][1] == boss] = x ;\n    ch[boss][w] = ch[x][w^1] ;\n    if( ch[x][w^1] ) fa[ch[x][w^1]] = boss ;\n    ch[x][w^1] = boss ; fa[boss] = x ;\n    fa[x] = gradboss ;\n    pushup(boss) ;\n}\nvoid splay(int x)\n{\n    int y = x , top = 0 ;\n    st[++top] = y ;\n    while( nroot(y) ) st[++top] = y = fa[y] ;\n    while( top ) pushdown( st[top--] ) ;\n    while( nroot(x) ){\n        y=fa[x];int z=fa[y];\n        if(nroot(y))\n            if( Get(x) == Get(y) ) rotate(y) ;\n            else rotate(x) ; \n        rotate(x);\n    }\n    pushup(x) ;\n}\nvoid access(int x){\n    for(int y = 0 ; x ; x = fa[y=x] )\n        splay(x) , rs = y , pushup(x) ;\n}\nvoid makeroot(int x){\n    access(x) ; splay(x) ;\n    pushr(x) ;\n}\nint findroot(int x)\n{\n    access(x) ; splay(x) ;\n    while( ls ) pushdown(x) , x = ls ;\n    splay(x) ;\n    return x ;\n}\nvoid split(int x , int y)\n{\n    makeroot(x) ;\n    access(y) ; splay(y) ;\n}\nvoid link(int x , int y ){\n    makeroot(x) ;\n    if( findroot(y) !=x ) fa[x] = y ;\n}\nvoid cut(int x , int y){\n    makeroot(x) ;\n    if( findroot(y) == x && fa[y] == x && !ch[y][0] ){\n        fa[y] = ch[x][1] = 0 ;\n        pushup(x) ;\n    }\n}\nsigned main()\n{\n    //freopen(\"output.out\",\"r\" , stdin ) ;\n    scanf(\"%lld%lld\" , &n , &q ) ;\n    for(int i = 1 ; i <= n ; i++ ) mul[i] = df[i] =  1 ; \n    for(int i = 1 ; i <= n - 1 ; i++ ){\n        int u = read() , v = read() ;\n        link( u , v ) ;\n    }\n   // cout<<\"ok\"<<endl;\n    while( q-- )\n    {\n       // cout<<\"ok1\"<<endl;\n        char s[5] ;\n        scanf(\"%s\" , s ) ;\n        int x , y , z ;\n        if( s[0] == '+' ){\n            x = read() ; y = read() ; z = read() ;\n            split( x , y ) ;\n            push1( y , z ) ;\n        }\n        else\n        if( s[0] == '-' ){\n            int u , v ;\n            x = read() ; y = read() ; u = read() ; v = read() ;\n            cut( x , y ) ; link( u , v ) ;\n        }\n        else\n        if( s[0] == '/' ){\n            x = read() ; y = read() ;\n            split( x , y ) ;\n            printf(\"%lld\\n\" , sum[y] ) ;\n        }\n        else{\n            x = read() ; y = read() ; z = read() ;\n            split( x , y ) ; \n            push2( y , z ) ;\n        }\n        /*for(int i = 1 ; i <= n ; i++ ){\n                printf(\"df[%d] = %d\\n\" , i , df[i] ) ;\n        }\n        for(int i = 1 ; i <= n ; i++ ){\n                printf(\"mul[%d] = %d\\n\" , i , mul[i] ) ;\n        }*/\n    }\n    return 0 ;\n}\n```\n\n\n",
        "postTime": 1553389389,
        "uid": 119610,
        "name": "Regimes",
        "ccfLevel": 7,
        "title": "[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II \u9898\u89e3"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p1501-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9Ftree-ii/)\n\n---\n# Solution\n\u8fd9\u662f\u4e00\u9053\u80a5\u80a0\u8003\u9a8cLCT\u57fa\u672c\u529f\u7684\u4e00\u9053\u9898\u3002\n\n\u53e3\u80e1\u8d77\u6765\u662f\u5f88\u5bb9\u6613\u7684\uff1a**\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u52a0/\u4e58\u64cd\u4f5c\uff0c\u6211\u4eec\u628a\u5bf9\u5e94\u7684\u94fesplit\u51fa\u6765\uff0c\u7136\u540e\u6253\u6807\u8bb0\u5373\u53ef\uff1bLink/Cut\u662f\u57fa\u672c\u64cd\u4f5c\uff1b\u67e5\u8be2\u7684\u8bdd\u6211\u4eec\u4e5f\u662f\u628a\u5bf9\u5e94\u7684\u94fesplit\u51fa\u6765\uff0c\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u6839\u7684sum\u5373\u53ef**\u3002\n\u8fd9\u91cc\u7684\u6253\u6807\u8bb0\u548c\u7ebf\u6bb5\u6811II\u90a3\u9053\u9898\u975e\u5e38\u50cf\uff0c~~\u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u53bb\u505a\u7ebf\u6bb5\u6811II~~\u3002 ~~\u90fd\u5728\u5199LCT\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u6ca1\u6253\u8fc7\u7ebf\u6bb5\u6811II~~\u3002\u6211\u4eec\u53ea\u9700\u8981\u50cf\u7ebf\u6bb5\u6811II\u90a3\u6837pushdown\u5e76\u5904\u7406sum\u5373\u53ef\u3002\n\n\n**\u53e3\u80e1\u662f\u53e3\u80e1\uff0c\u6253\u8d77\u6765\u5c31\u662f\u53e6\u5916\u4e00\u7801\u4e8b\u4e86**\n\n\u8fd9\u91cc\u5217\u51fa\u6211\u5199\u51fa\u7684\u9505\uff0c\u5927\u5bb6\u5199\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a\n1. $(5w*5w)$\u4f1a\u7206int\u7684\uff0c\u8bf7\u5f00longlong \u3002\n2. \u6211\u4eec\u5728$pushdown$\u7b97\u5404\u79cd\u6807\u8bb0\u3001sum\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6ce8\u610f\u819c$p$\uff0c\u5c0f\u5fc3\u7206longlong\u3002\n3. LCT\u7684rotate\u548c\u6b63\u5e38\u7684splay\u7684rotate\u4e0d\u4e00\u6837\uff0c\u6211\u4eec\u8981\u7279\u5224\u4e00\u4e0bz\u662f\u5426\u662f\u53e6\u5916\u4e00\u9897splay\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u65e0\u8111rotate\u3002~~\u5f53\u7136\uff0c\u8fd9\u79cd\u9505\u4e5f\u53ea\u6709\u6211\u8fd9\u79cd\u849f\u84bb\u624d\u4f1a\u9519~~\n4. \u5148cut\u518dlink\uff0c\u907f\u514d\u8fde\u51fa\u73af\u6765\u3002\n5. ~~\u6ca1\u4e86~~\n\n---\n# Code\n### \u6570\u636e\u751f\u6210\u5668\n[\u5728\u8fd9\u91cc](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p1501-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9Ftree-ii/)\n### \u6b63\u89e3\n```cpp\n//Luogu P1501 [\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II \n//Mar,10th,2019\n//LCT+\u7ebf\u6bb5\u6811II\n#include<iostream>\n#include<cstdio>\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nusing namespace std;\nconst int N=100000+1000;\nconst long long poi=51061;\nstruct LCT\n{\n\tlong long son[N][2],fa[N],w[N],sum[N],plus[N],take[N],lazy[N],size[N];\n\tinline void Mirror(int x)\n\t{\n\t\tlazy[x]=!lazy[x];\n\t\tswap(son[x][0],son[x][1]);\n\t}\n\tinline void pushdown(int x)\n\t{\n\t\tif(lazy[x]==true)\n\t\t{\n\t\t\tMirror(son[x][0]);\n\t\t\tMirror(son[x][1]);\n\t\t\tlazy[x]=false;\n\t\t}\n\t\tif(son[x][0]!=0)\n\t\t{\n\t\t\tw[son[x][0]]=(w[son[x][0]]*take[x]+plus[x])%poi;\n\t\t\ttake[son[x][0]]=take[son[x][0]]*take[x]%poi;\n\t\t\tplus[son[x][0]]=(plus[son[x][0]]*take[x]+plus[x])%poi;\n\t\t\tsum[son[x][0]]=(sum[son[x][0]]*take[x]+size[son[x][0]]*plus[x])%poi;\n\t\t}\n\t\tif(son[x][1]!=0)\n\t\t{\n\t\t\tw[son[x][1]]=(w[son[x][1]]*take[x]+plus[x])%poi;\n\t\t\ttake[son[x][1]]=(take[son[x][1]]*take[x])%poi;\n\t\t\tplus[son[x][1]]=(plus[son[x][1]]*take[x]+plus[x])%poi;\n\t\t\tsum[son[x][1]]=(sum[son[x][1]]*take[x]+size[son[x][1]]*plus[x])%poi;\n\t\t}\n\t\tplus[x]=0,take[x]=1;\n\t}\n\tinline void update(int x)\n\t{\n\t\tsize[0]=sum[0]=0;\n\t\tsum[x]=(sum[son[x][0]]+sum[son[x][1]]+w[x])%poi;\n\t\tsize[x]=(size[son[x][0]]+size[son[x][1]]+1);\n\t}\n\tinline void rotate(int x,int type)\n\t{\n\t\tint y=fa[x],z=fa[y];\n\t\tfa[x]=z;\n\t\tif(IsRoot(y)==false)\n\t\t\tson[z][y==son[z][1]]=x;\n\t\tfa[son[x][type]]=y,son[y][!type]=son[x][type];\n\t\tfa[y]=x,son[x][type]=y;\n\t\tupdate(y),update(x);\n\t}\n\tbool IsRoot(int x)\n\t{\n\t\treturn (x!=son[fa[x]][0] and x!=son[fa[x]][1]);\n\t}\n\tint mstack[N],top;\n\tvoid splay(int x)\n\t{\n\t\tmstack[top=1]=x;\n\t\tfor(int now=x;IsRoot(now)==false;now=fa[now])\n\t\t\tmstack[++top]=fa[now];\n\t\tfor(;top>0;top--)\n\t\t\tpushdown(mstack[top]);\n\t\twhile(IsRoot(x)==false)\n\t\t{\n\t\t\tif(IsRoot(fa[x])==false and x==son[fa[x]][fa[x]==son[fa[fa[x]]][1]])\n\t\t\t\trotate(fa[x],x==son[fa[x]][0]),\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t\telse\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t}\n\t}\n\tvoid Access(int x)\n\t{\n\t\tfor(int t=0;x!=0;t=x,x=fa[x])\n\t\t\tsplay(x),son[x][1]=t,fa[t]=x,update(x);\n\t}\n\tint GetRoot(int x)\n\t{\n\t\tAccess(x),splay(x);\n\t\twhile(son[x][0]!=0)\n            pushdown(x),x=son[x][0];\n\t\tsplay(x);\n        return x;\n\t}\n\tvoid MakeRoot(int x)\n\t{\n\t\tAccess(x);\n\t\tsplay(x);\n\t\tMirror(x);\n\t}\n\tvoid Link(int x,int y)\n\t{\n\t\tif(GetRoot(x)==GetRoot(y)) return;\n\t\tMakeRoot(x);\n\t\tfa[x]=y;\n\t}\n\tvoid Split(int x,int y)\n\t{\n\t\tMakeRoot(y);\n\t\tAccess(x),splay(x);\n\t}\n\tvoid Cut(int x,int y)\n\t{\n\t\tSplit(x,y);\n\t\tif(y!=son[x][0] or fa[y]!=x) return;\n\t\tson[x][0]=0,fa[y]=0;\n\t\tupdate(x);\n\t}\n\tvoid Add(int x,int y,long long num)\n\t{\n\t\tSplit(x,y);\n\t\tplus[x]=num%poi,w[x]=(w[x]+num)%poi,sum[x]=(sum[x]+size[x]*num)%poi;\n\t}\n\tvoid Take(int x,int y,long long num)\n\t{\n\t\tSplit(x,y);\n\t\ttake[x]=num%poi,w[x]=(w[x]*num)%poi,sum[x]=sum[x]*num%poi;\n\t}\n\tlong long Query(int x,int y)\n\t{\n\t\tSplit(x,y);\n\t\treturn sum[x]%poi;\n\t}\n}lct;\nint n,q;\nint main()\n{\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;i++)\n\t\tlct.take[i]=lct.w[i]=lct.sum[i]=lct.size[i]=1;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint s=read(),t=read();\n\t\tlct.Link(s,t);\n\t}\n\t\n\tchar OP[5];\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%s\",OP+1);\n\t\tif(OP[1]=='+')\n\t\t{\n\t\t\tlong long u=read(),v=read(),x=read()%poi;\n\t\t\tlct.Add(u,v,x);\n\t\t}\n\t\telse if(OP[1]=='-')\n\t\t{\n\t\t\tlong long u1=read(),v1=read(),u2=read(),v2=read();\n\t\t\tlct.Cut(u1,v1);\n\t\t\tlct.Link(u2,v2);\n\t\t}\n\t\telse if(OP[1]=='*')\n\t\t{\n\t\t\tlong long u=read(),v=read(),x=read()%poi;\n\t\t\tlct.Take(u,v,x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong long u=read(),v=read();\n\t\t\tprintf(\"%lld\\n\",lct.Query(u,v));\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1552278080,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1501 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]Tree II\u3011"
    }
]