[
    {
        "content": "### \u9898\u89e3\n\n\u53ef\u4ee5\u8fdb\u884c\u884c\u5faa\u73af\u79fb\u4f4d\u548c\u5217\u5faa\u73af\u79fb\u4f4d\uff0c\u56e0\u6b64\u53ea\u9700\u786e\u5b9a\u5de6\u4e0a\u89d2\u7684\u683c\u5b50\u662f\u539f\u6765\u7684\u54ea\u4e2a\u683c\u5b50\uff0c\u5373\u53ef\u786e\u5b9a\u5bf9\u5e94\u56fe\u5f62\u3002\u5f88\u81ea\u7136\u60f3\u5230\u5c06\u539f\u77e9\u9635\u590d\u5236\u6210\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u56db\u4efd\uff0c\u4ee5\u65b9\u4fbf\u6c42\u89e3\u7b54\u6848\u3002\n\n\u4e8c\u7ef4 Hash \u53ef\u4ee5\u5224\u65ad\u4e24\u4e2a\u5b50\u77e9\u9635\u76f8\u4e0d\u76f8\u7b49\uff0c\u5916\u5c42\u5957\u4e2a\u4e8c\u5206\u786e\u5b9a\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u5b57\u5178\u5e8f\u5927\u5c0f\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm(\\log{n}+\\log{m}))$\u3002\n\n### \u4ee3\u7801\n\nPS\uff1a\u4e8c\u7ef4 Hash \u53ef\u4ee5\u5c06 $(i,j)$ \u7684\u6743\u503c\u8d4b\u4e3a $p^{(i-1)*m+(j-1)}$\uff08\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u5bf9\u683c\u5b50\u8fdb\u884c\u7f16\u53f7\uff09\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u8d4b\u4e3a $p^{i}q^{j}$\uff08\u884c\u5217\u5206\u522b\u7f16\u53f7\uff09\uff0c\u5176\u4e2d $p,q$ \u4e3a\u4e92\u4e0d\u76f8\u540c\u7684\u8d28\u6570\u3002\u7b14\u8005\u4f7f\u7528\u7684\u662f\u524d\u8005\uff0c\u5b98\u65b9\u9898\u89e3\u4f7f\u7528\u7684\u662f\u540e\u8005\uff0c\u6545\u90fd\u8d34\u4e00\u4e0b\u4ee3\u7801\u3002\n\n**\u7b14\u8005\u4ee3\u7801**\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mod=1e9+7;\nconst int inv2=5e8+4;\ninline int get_sum(int a,int b)\n{\n\treturn a+b-(a+b>=mod?mod:0);\n}\ninline int get_power(int a,int n)\n{\n\tint res=1;\n\twhile(n>0)\n\t{\n\t\tres=n&1?1ll*res*a%mod:res;\n\t\ta=1ll*a*a%mod;\n\t\tn>>=1;\n\t}\n\treturn res;\n}\nint n,m;\ninline int id(int x,int y)\n{\n\treturn (x-1)*(m<<1)+(y-1);\n}\nconst int max_n=1e3+5;\nconst int max_m=1e3+5;\nchar str[max_m];\nint Map[max_n<<1][max_m<<1];\nconst int max_tot=4e6+5;\nint pow2[max_tot],pow_inv2[max_tot],Hash[max_n<<1][max_m<<1];\ninline int get_Hash(int a,int b,int c,int d) // calculate the hash value of the matrix that the upper left corner is (a,b) and the lower right corner is (c,d)\n{\n\treturn (1ll*Hash[c][d]-Hash[a-1][d]-Hash[c][b-1]+Hash[a-1][b-1]+2*mod)*pow_inv2[id(a,b)]%mod;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%s\",str+1);\n\t\tfor(int j=1;j<=m;++j)\n\t\t\tMap[i][j]=Map[i+n][j]=Map[i][j+m]=Map[i+n][j+m]=(str[j]=='.');\n\t}\n\tpow2[0]=1;\n\tfor(int i=1;i<=(n*m<<2);++i)\n\t\tpow2[i]=get_sum(pow2[i-1],pow2[i-1]);\n\tpow_inv2[n*m<<2]=get_power(pow2[n*m<<2],mod-2);\n\tfor(int i=(n*m<<2)-1;i>=0;--i)\n\t\tpow_inv2[i]=get_sum(pow_inv2[i+1],pow_inv2[i+1]); \n\tfor(int i=1;i<=(n<<1);++i)\t\n\t\tfor(int j=1;j<=(m<<1);++j)\n\t\t\tHash[i][j]=(1ll*Map[i][j]*pow2[id(i,j)]+Hash[i-1][j]+Hash[i][j-1]-Hash[i-1][j-1]+mod)%mod;\n\tint ans_x=1,ans_y=1;\n\tfor(int i=1;i<=n;++i)\n\t\tfor(int j=1;j<=m;++j)\n\t\t{\n\t\t\tint L=1,R=n,res_x=n+1,res_y=m+1;\n\t\t\twhile(L<=R)\n\t\t\t{\n\t\t\t\tint mid=(L+R)>>1;\n\t\t\t\tif(get_Hash(i,j,i+mid-1,j+m-1)!=get_Hash(ans_x,ans_y,ans_x+mid-1,ans_y+m-1))\n\t\t\t\t\tres_x=mid,R=mid-1;\n\t\t\t\telse\n\t\t\t\t\tL=mid+1;\n\t\t\t}\n\t\t\tif(res_x==n+1)\n\t\t\t\tcontinue;\n\t\t\tL=1,R=m;\n\t\t\twhile(L<=R)\n\t\t\t{\n\t\t\t\tint mid=(L+R)>>1;\n\t\t\t\tif(get_Hash(i+res_x-1,j,i+res_x-1,j+mid-1)!=get_Hash(ans_x+res_x-1,ans_y,ans_x+res_x-1,ans_y+mid-1))\n\t\t\t\t\tres_y=mid,R=mid-1;\n\t\t\t\telse\n\t\t\t\t\tL=mid+1;\n\t\t\t}\n\t\t\tif(!Map[i+res_x-1][j+res_y-1])\n\t\t\t\tans_x=i,ans_y=j;\n\t\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(int j=1;j<=m;++j)\n\t\t\tputchar(Map[ans_x+i-1][ans_y+j-1]?'.':'*');\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n**\u5b98\u65b9 std**\n\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define TRACE(x) cerr << #x << \" = \" << x << endl\n#define _ << \" _ \" <<\n\n#define fi first\n#define se second\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\nconst int MAXN = 1010, MOD = 1e9 + 7, P = 2, Q = 3;\n\nint pq_pow[2 * MAXN][2 * MAXN];\nint h[2 * MAXN][2 * MAXN];\n\nint add(int a, int b) {\n    int res = a + b;\n    if (res >= MOD) res -= MOD;\n    return res;\n}\nint sub(int a, int b) { return add(a, MOD - b); }\nint mul(int a, int b) { return (ll)a * b % MOD; }\n\nvoid precalc(const vector<string>& a) {\n    for (int i = 0; i < 2 * MAXN; i++) {\n        for (int j = 0; j < 2 * MAXN; j++) {\n            if (i == 0 && j == 0) pq_pow[i][j] = 1;\n            else if (i == 0) pq_pow[i][j] = mul(pq_pow[i][j - 1], Q);\n            else pq_pow[i][j] = mul(pq_pow[i - 1][j], P);\n        }\n    }\n\n    int n = a.size(), m = a[0].size();\n    for (int i = 0; i < 2 * n; i++) {\n        for (int j = 0; j < 2 * m; j++) {\n            int val = mul(a[i % n][j % m] == '.', pq_pow[i][j]);\n            h[i + 1][j + 1] = sub(add(val,\n                        add(h[i + 1][j], h[i][j + 1])),\n                    h[i][j]);\n        }\n    }\n}\n\nint get_h(int x, int y, int dx, int dy) {\n    return sub(add(h[x + dx][y + dy], h[x][y]),\n            add(h[x][y + dy], h[x + dx][y]));\n}\n\nbool is_equal(int x1, int y1, int x2, int y2, int dx, int dy) {\n    int val1 = mul(get_h(x1, y1, dx, dy), pq_pow[x2][y2]);\n    int val2 = mul(get_h(x2, y2, dx, dy), pq_pow[x1][y1]);\n    return val1 == val2;\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    int n, m;\n    cin >> n >> m;\n\n    vector<string> a(n);\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    precalc(a);\n\n    int sol_x = 0, sol_y = 0;\n    for (int x = 0; x < n; x++) {\n        for (int y = 0; y < m; y++) {\n            int lo_dx = 0, hi_dx = n;\n            while (lo_dx + 1 < hi_dx) {\n                int dx = (lo_dx + hi_dx) / 2;\n                if (is_equal(sol_x, sol_y, x, y, dx, m)) lo_dx = dx;\n                else hi_dx = dx;\n            }\n            int dx = lo_dx;\n\n            int lo_dy = 0, hi_dy = m;\n            while (lo_dy + 1 < hi_dy) {\n                int dy = (lo_dy + hi_dy) / 2;\n                if (is_equal(sol_x + dx, sol_y, x + dx, y, 1, dy)) lo_dy = dy;\n                else hi_dy = dy;\n            }\n            int dy = lo_dy;\n\n\n            if (a[(x + dx) % n][(y + dy) % m] <\n                a[(sol_x + dx) % n][(sol_y + dy) % m]) {\n                sol_x = x;\n                sol_y = y;\n            }\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++)\n            cout << a[(sol_x + i) % n][(sol_y + j) % m];\n        cout << '\\n';\n    }\n\n    return 0;\n}\n```",
        "postTime": 1617596551,
        "uid": 145355,
        "name": "wsyhb",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011\u6d1b\u8c37 P7170 [COCI2020-2021#3] Sateliti"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0:\n\n\u4e00\u4e2a\u79d1\u5b66\u56e2\u961f\u6b63\u5728\u4f7f\u7528\u79d1\u5b66\u671b\u8fdc\u955c\u89c2\u6d4b\u571f\u661f\u7684\u536b\u661f\u3002\u4e3a\u6b64\uff0c\u79d1\u5b66\u5bb6\u4eec\u5fc5\u987b\u5bf9\u4e0d\u540c\u536b\u661f\u7684\u7167\u7247\u8fdb\u884c\u5206\u7c7b\u3002\u8fd9\u4e2a\u4efb\u52a1\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u4ece\u4e0d\u540c\u89d2\u5ea6\u4e0a\u770b\u8fc7\u53bb\uff0c\u536b\u661f\u7684\u9762\u8c8c\u662f\u4e0d\u4e00\u6837\u7684\u3002 \n\n\u536b\u661f\u56fe\u7247\u53ef\u4ee5\u88ab\u770b\u6210\u662f\u4e00\u4e2a $n\\times m$ \u7684\u5b57\u7b26\u77e9\u9635\uff0c\u77e9\u9635\u4e0a\u7531\u4e24\u79cd\u5b57\u7b26 `*` \u548c `.` \u6784\u6210\u3002\u6211\u4eec\u8bf4\u4e24\u4e2a\u56fe\u7247\u8868\u793a\u7684\u662f\u540c\u4e00\u4e2a\u536b\u661f\uff0c\u8868\u793a\u901a\u8fc7\u4e00\u4e9b**\u884c\u5217\u5e73\u79fb**\uff0c\u4e24\u5f20\u56fe\u7247\u4f1a\u53d8\u5f97\u5b8c\u5168\u76f8\u540c\u3002 \n\n\u4e3a\u4e86\u533a\u5206\u4e0d\u540c\u7684\u536b\u661f\uff0c\u79d1\u5b66\u5bb6\u6bcf\u9700\u8981\u627e\u5230\u6bcf\u4e00\u4e2a\u536b\u661f\u7684**\u5b57\u5178\u5e8f\u6700\u5c0f**\u7684\u5b57\u7b26\u77e9\u9635\u3002\u6ce8\u610f\uff0c\u5f53\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u77e9\u9635\u7684\u5b57\u5178\u5e8f\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u77e9\u9635**\u6309\u884c\u62fc\u63a5**\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u3002\u4f60\u7684\u4efb\u52a1\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u77e9\u9635\uff0c\u627e\u51fa\u5b83\u7ecf\u8fc7\u884c\u5217\u5e73\u79fb\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5f62\u5f0f\u3002\n\n### \u8f93\u5165\u63cf\u8ff0:\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $n,m(q\\leq n,m\\leq 1000)$\u3002\u8868\u793a\u5b57\u7b26\u77e9\u9635\u7684\u5927\u5c0f\u3002\n\n\u63a5\u4e0b\u6765\u7684 $n$ \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u957f\u5ea6\u4e3a $m$ \u7684\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4ec5\u7531 `*` \u548c `.`\u6784\u6210\u3002\n\n### \u8f93\u51fa\u63cf\u8ff0:\n\n\u8f93\u51fa $n$ \u884c\uff0c\u6bcf\u884c $m$ \u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u6211\u4eec\u9700\u8981\u627e\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u77e9\u9635\u3002\n\n### \u5206\u6790:\n\n\u7531\u4e8e\u6d89\u53ca\u5230\u6bd4\u8f83\u5b57\u5178\u5e8f\uff0c\u8003\u8651\u4f7f\u7528\u4e8c\u7ef4\u54c8\u5e0c\u7b97\u6cd5\u3002\n\n\u8bbe $hash(c_{i,j})=p^i\\times q^j\\times c_{i,j}$\uff0c\u5219\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\u7684\u54c8\u5e0c\u503c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u54c8\u5e0c\u503c\u4e4b\u548c\u6765\u8868\u793a\u3002\u81f3\u4e8e\u5982\u4f55\u6c42\u51fa\u67d0\u4e00\u77e9\u9635\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u54c8\u5e0c\u503c\u4e4b\u548c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u3002\u8bbe $sum_{i,j}$ \u4e3a\u4ee5 $(1,1)$ \u4e3a\u8d77\u59cb\u70b9\u7684\u957f\u4e3a $i$\uff0c\u5bbd\u4e3a $j$ \u7684\u77e9\u9635\u4e2d\u6240\u6709\u5b57\u7b26\u7684\u54c8\u5e0c\u503c\u4e4b\u548c\u3002\u5219\u4e00\u4e2a\u8d77\u70b9\u4e3a $(x,y)$ \u4e14\u957f\u4e3a $l$\uff0c\u5bbd\u4e3a $w$ \u7684\u77e9\u9635\u54c8\u5e0c\u4e3a $sum_{x+l-1,y+j-1}-sum_{x-1,y+j-1}-sum_{x+i-1,y-1}+sum_{x-1,y-1}$\u3002\n\n\u63a5\u4e0b\u6765\u4e24\u4e2a\u4e8c\u5206\u67e5\u627e\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e24\u4e2a\u77e9\u9635\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\u5148\u5c06\u4e24\u4e2a\u77e9\u9635\u79fb\u52a8\u5230\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u5c06\u6574\u4e2a\u77e9\u9635\u4e58\u4e0a $p^i\\times q^j$ \u5373\u53ef\u3002\u518d\u6bd4\u8f83\u4e24\u4e2a\u77e9\u9635\u6700\u591a\u6709\u591a\u5c11\u884c\u662f\u76f8\u7b49\u7684\uff0c\u6700\u540e\u6bd4\u8f83\u4e24\u4e2a\u77e9\u9635\u7684\u4e0b\u4e00\u884c\u6709\u591a\u4e0a\u4e2a\u5b57\u7b26\u662f\u76f8\u7b49\u7684\u3002\n\n\u6267\u884c\u5b8c\u4ee5\u4e0a\u64cd\u4f5c\u4e4b\u540e\uff0c\u6bd4\u8f83\u4e0b\u4e00\u4f4d\u7684\u5b57\u7b26\uff0c\u66f4\u5c0f\u7684\u4ee3\u8868\u8be5\u77e9\u9635\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2\\log_2 n)$\u3002\n\n### \u4ee3\u7801:\n\n```C++\n#include<bits/stdc++.h>\n#define van long long\n#define N 3010\n#define ywhin cin\n#define ywhout cout\nusing namespace std;\nconst van p=131,q=133;\nchar ch[N][N];\nvan n,m,sx=1,sy=1;\nunsigned van hash[N][N],sum[N][N];\nunsigned van power(van a,van b) {\n\tunsigned van ans=1,base=a;\n\twhile (b>0){\n\t\tif (b%2==1) ans*=base;\n\t\tbase*=base,b>>=1; \n\t}\n\treturn ans;\n}//\u8ba1\u7b97\u4e58\u65b9\nunsigned van HashCalc(van i,van j) {\n\treturn power(p,i)*power(q,j)*ch[i][j];\n}//\u8ba1\u7b97\u5355\u70b9\u54c8\u5e0c\nvoid init() {\n\tfor (int i=1;i<=n*2;i++) {\n\t\tfor (int j=1;j<=m*2;j++) {\n\t\t\tsum[i][j]=sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+hash[i][j];\n\t\t}\n\t}\n}//\u8ba1\u7b97\u4e8c\u7ef4\u524d\u7f00\u548c\nunsigned van Calc_Matrix(van sx,van sy,van height,van width) {\n\tvan ex=sx+height-1,ey=sy+width-1;sx--,sy--;\n\treturn sum[ex][ey]-sum[sx][ey]-sum[ex][sy]+sum[sx][sy];\n}//\u67e5\u8be2\u77e9\u9635\u54c8\u5e0c\n//ifstream ywhin(\"sateliti.in\");\n//ofstream ywhout(\"sateliti.out\");\nint main() {\n\tywhin>>n>>m;\n\tfor (int i=1;i<=n;i++) {\n\t\tfor (int j=1;j<=m;j++) {\n\t\t\tywhin>>ch[i][j];\n\t\t\tch[i][j+m]=ch[i+n][j]=ch[i+n][j+m]=ch[i][j];\n\t\t}\n\t}//\u5f00\u4e2a\u56db\u500d\u6570\u7ec4\n\tfor (int i=1;i<=n*2;i++) {\n\t\tfor (int j=1;j<=m*2;j++) {\n//\t\t\tcout<<power(2,2)<<endl;\n\t\t\thash[i][j]=HashCalc(i,j);\n\t\t}\n\t}//\u8ba1\u7b97\u5355\u70b9\u54c8\u5e0c\n\tinit();\n\tfor (int i=1;i<=n;i++) {\n\t\tfor (int j=1;j<=m;j++) {\n\t\t\tif (i!=1||j!=1) {\n\t\t\t\tunsigned van base1=power(p,sx-i)*power(q,sy-j),\n\t\t\t\t\t\t\t base2=power(p,i-sx)*power(q,j-sy);//\u79fb\u4f4d\n\t\t\t\tvan l=1,r=n,tmp=0;\n\t\t\t\twhile(l<=r) {\n\t\t\t\t\tvan mid=l+r>>1;\n\t\t\t\t\tunsigned van matrix1=Calc_Matrix(i,j,mid,m)*base1,\n\t\t\t\t\t\t\t\t matrix2=Calc_Matrix(sx,sy,mid,m)*base2;\n\t\t\t\t\tif (matrix1==matrix2) {\n\t\t\t\t\t\ttmp=mid;l=mid+1;\n\t\t\t\t\t}\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}//\u8ba1\u7b97\u6700\u591a\u6709\u591a\u5c11\u884c\u662f\u76f8\u7b49\u7684\n//\t\t\t\tcout<<i<<\" \"<<j<<\" \"<<sx<<\" \"<<sy<<\" \"<<tmp<<endl;\n\t\t\t\tl=1,r=m;van tmp2=0;\n\t\t\t\twhile (l<=r) {\n\t\t\t\t\tvan mid=l+r>>1;\n\t\t\t\t\tunsigned van matrix1=Calc_Matrix(i+tmp,j,1,mid)*base1,\n\t\t\t\t\t\t\t\t matrix2=Calc_Matrix(sx+tmp,sy,1,mid)*base2;\n\t\t\t\t\tif (matrix1==matrix2) {\n\t\t\t\t\t\ttmp2=mid,l=mid+1;\n\t\t\t\t\t}\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}//\u8ba1\u7b97\u4e0b\u4e00\u884c\u6709\u591a\u5c11\u4e2a\u76f8\u7b49\u7684\u8fde\u7eed\u7684\u5b57\u7b26\n\t\t\t\tif (ch[i+tmp][j+tmp2]<ch[sx+tmp][sy+tmp2]) sx=i,sy=j;//\u6bd4\u8f83\u4e0a\u8ff0\u7ed3\u679c\u7684\u4e0b\u4e00\u4f4d\u7684\u5b57\u7b26\n//\t\t\t\tcout<<i<<\" \"<<j<<\" \"<<sx<<\" \"<<sy<<endl;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tfor (int j=1;j<=m;j++) {\n\t\t\tywhout<<ch[i+sx-1][j+sy-1];\n\t\t}\n\t\tywhout<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1630056719,
        "uid": 185758,
        "name": "LittleYang0531",
        "ccfLevel": 7,
        "title": "[COCI2020-2021#3] Sateliti \u9898\u89e3"
    }
]