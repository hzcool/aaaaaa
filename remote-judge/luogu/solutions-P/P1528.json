[
    {
        "content": "\n\n**\u6b64\u9898\u7b97\u6cd5Tag**\uff1a\u4e8c\u5206\u67e5\u627e\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8d2a\u5fc3\u3001~~\u526a\u679d~~\n\n### \u5206\u6790\n- \u8d2a\u5fc3\uff1a\u5bf9\u4e8e\u540c\u6837\u7684\u86cb\u7cd5\uff0c\u76f8\u6bd4\u4e8e\u7ed9\u5634\u5927\u7684\u4eba\u5403\uff0c\u7ed9\u5634\u5c0f\u7684\u4eba\u5403\u53ef\u4ee5\u6ee1\u8db3\u66f4\u591a\u4eba\u3002\u4f18\u5148\u5c06\u86cb\u7cd5\u5582\u7ed9\u5634\u5c0f\u7684\u4eba\u53ef\u4ee5\u83b7\u5f97**\u5c40\u90e8**\u6700\u4f18\u89e3\u3002\n- \u5224\u65ad\uff1a\u5224\u65ad\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\u662f\u4e0d\u662f\u6574\u4f53\u6700\u4f18\u89e3\uff0c\u53ea\u80fd\u901a\u8fc7~~\u66b4\u529b\u7684~~\u641c\u7d22\u7684\u65b9\u5f0f\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u4f1a\u6d88\u8017\u5f88\u591a\u7684\u65f6\u95f4\u3002\n- \u4e8c\u5206\uff1a\u6b64\u9898\u7b54\u6848\u53ef\u884c\u57df\u8fde\u7eed\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u786e\u5b9a\u7b54\u6848\uff0c\u518d\u7531\u641c\u7d22\u9a8c\u8bc1\u7b54\u6848\u662f\u5426\u5408\u7406\u4ee5\u7f29\u5c0f\u533a\u95f4\u76f4\u5230\u53ef\u4ee5\u786e\u5b9a\u6700\u4f18\u89e3\u3002\n- \u526a\u679d\uff1a\u4e3a\u4e86\u907f\u514dTLE\uff0c\u8fd8\u5e94\u5bf9\u4e00\u4e9b\u7ec6\u8282\u8fdb\u884c\u4e00\u4e9b\u4f18\u5316\u3002\u6bd4\u5982\uff1a\u5634\u6bd4\u6700\u5927\u7684\u86cb\u7cd5\u5927\u7684\u4eba\u662f\u4e0d\u53ef\u80fd\u6ee1\u8db3\u7684\uff0c\u5e94\u5f53\u76f4\u63a5\u5254\u9664\u3002\n\n### \u641c\u7d22\n+ \u641c\u7d22\u4e4b\u524d\uff0c\u6839\u636e\u5206\u6790\uff0c\u5c06\u6240\u6709\u7684\u4eba\u6839\u636e\u5634\u7684\u5927\u5c0f\u8fdb\u884c\u5347\u5e8f\u6392\u5217\u3002\u5982\u679c\u6709n\u4e2a\u4eba\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0c\u90a3\u4e48\u8fd9n\u4e2a\u4eba\u4e00\u5b9a\u662f\u6570\u7ec4\u7684\u524dn\u4e2a\u5143\u7d20\u3002\n+ \u5bf9\u5f85\u68c0\u9a8c\u503c\u8fdb\u884cDFS\u641c\u7d22\u3002\u5982\u679c\u6ee1\u8db3\u4e86\u5b83\u7684\u9700\u6c42\uff0c\u5c31\u9012\u5f52\u641c\u7d22\u5b83\u7684\u524d\u4e00\u4e2a\u4eba\u662f\u5426\u53ef\u4ee5\u88ab\u5269\u4e0b\u6765\u7684\u86cb\u7cd5\u6ee1\u8db3\u3002\n+ \u5982\u679c\u5634\u6700\u5c0f\u7684\u4eba\u7684\u9700\u6c42\u4e5f\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0c\u90a3\u4e48\u9012\u5f52\u4e2d\u6b62\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff1b\u5982\u679c\u4e2d\u9014\u51fa\u73b0\u67d0\u4eba\u7684\u9700\u6c42\u4e0d\u80fd\u88ab\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u56de\u6eaf\u5230\u4e0a\u4e00\u7ea7\u9012\u5f52\u3002\n+ \u5982\u679c\u627e\u5230\u4e86\u6ee1\u8db3\u6d4b\u8bd5\u503c\u4eba\u6570\u7684\u86cb\u7cd5\u5206\u914d\u65b9\u5f0f\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u67e5\u627e\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u6027\u80fd\u6d6a\u8d39\u3002\n\n### \u4f18\u5316\n- **\u6c42\u503c\u5907\u7528**\uff1a\u6392\u5217\u5634\u5927\u5c0f\u4e4b\u540e\u8981\u8ba1\u7b97\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u65b9\u4fbf\u540e\u7eed\u7684\u4f7f\u7528\uff1b\u8bfb\u5165\u86cb\u7cd5\u7684\u65f6\u5019\u9700\u8981\u8ba1\u7b97\u6700\u5927\u7684\u86cb\u7cd5\u548c\u86cb\u7cd5\u603b\u503c\u4ee5\u5907\u4f7f\u7528\u3002~~\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u5b58\u50a8\u86cb\u7cd5~~\u3002\n- **\u7f29\u5c0f\u533a\u95f4**\uff1a\u5982\u679c\u67d0\u4eba\u7684\u5634\u6bd4\u6700\u5927\u7684\u86cb\u7cd5\u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u6839\u636e\u9898\u610f\uff0c\u4ed6\u7684\u9700\u6c42\u5c06\u6c38\u8fdc\u65e0\u6cd5\u5f97\u5230\u6ee1\u8db3\u3002\u6b64\u65f6\u53ef\u4ee5\u6536\u7d27\u4e8c\u5206\u67e5\u627e\u533a\u95f4\u4ee5\u51cf\u5c11\u67e5\u627e\u6b21\u6570\u3002\n- **\u6d6a\u8d39\u86cb\u7cd5**\uff1a\u5982\u679c\u67d0\u5757\u86cb\u7cd5\uff08\u6216\u8005\u88ab\u5543\u8fc7\u7684\u86cb\u7cd5\uff09\u5c0f\u4e8e\u5f53\u524d\u5634\u6700\u5c0f\u7684\u4eba\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u6b64\u86cb\u7cd5\u5c06\u65e0\u6cd5\u518d\u53d1\u6325\u4efb\u4f55\u4f5c\u7528\u4e86\uff0c\u53ef\u4ee5\u5b58\u50a8\u8d77\u6765\u3002\n- **\u7b49\u5927\u9700\u6c42**\uff1a\u56e0\u4e3a\u5bf9\u5634\u7684\u5927\u5c0f\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u786e\u4fdd\u4e86\u5148\u67e5\u627e\u7684\u5634\u4e0d\u5c0f\u4e8e\u540e\u67e5\u627e\u7684\u5634\u3002\u82e5\u76f8\u90bb\u4e24\u5634\u5927\u5c0f\u76f8\u7b49\uff0c\u540e\u8005\u5df2\u7ecf\u904d\u5386\u4e86\u90e8\u5206\u86cb\u7cd5\u6570\u7ec4\u624d\u6c42\u51fa\u7ed3\u679c\uff0c\u7b49\u4e8e\u8bf4\u662f\u5df2\u904d\u5386\u90e8\u5206\u7684\u86cb\u7cd5\u4e00\u5b9a\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\u4e3a\u4e86\u51cf\u5c11\u904d\u5386\uff0c\u53ef\u4ee5\u5c06\u6b64\u65f6\u7684\u6570\u7ec4\u5750\u6807\u4f20\u7ed9\u4e0b\u4e00\u7ea7\u9012\u5f52\uff0c\u5728\u9700\u6c42\u76f8\u7b49\u7684\u4e0b\u4e00\u7ea7\u9012\u5f52\u4e2d\u8df3\u8fc7\u8fd9\u4e9b\u4e0d\u53ef\u80fd\u7684\u90e8\u5206\uff0c\u4ee5\u8282\u7ea6\u65f6\u95f4\u3002\n\n### \u8bf4\u660e\n+ \u8bbe\u7f6e\u975e\u904d\u5386\u7ec8\u70b9\u7684\u8fd4\u56de\u70b9\u65f6\uff0c\u5e94\u786e\u4fdd\u56de\u6eaf\u4ee3\u7801\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u3002\u4e0d\u89c4\u8303\u7684\u5199\u6cd5\u53ef\u80fd\u5bfc\u81f4\u90e8\u5206\u8bed\u53e5\u6839\u672c\u4e0a\u662f`Unreachable`\u7684\uff0c\u65e0\u6cd5\u6267\u884c\u5230\u3002\n+ \u6bcf\u4e00\u4e2a\u9012\u5f52\u5c42\u5e94\u5f53\u90fd\u6709\u72ec\u7acb\u7684`wasted`\u6807\u5fd7\u3002\u56e0\u4e3a\u5b83\u4f1a\u6839\u636e\u6bcf\u4e00\u5c42\u9012\u5f52\u904d\u5386\u5230\u7684\u86cb\u7cd5\u60c5\u51b5\u800c\u88ab\u4fee\u6539\u3002\n+ *~~\u4ee3\u7801\u4e0d\u89c4\u8303\uff0c\u8c03\u8bd5\u4e24\u884c\u6cea~~*\n+ *~~\u5176\u5b9e\u8fd9\u90fd\u662f\u672c\u4eba\u505a\u9898\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\u6216\u624b\u6296\u72af\u4e0b\u7684\u9519\u8bef~~*\n\n### \u4ee3\u7801\n```c++\n#include <iostream>\n#include <algorithm>\n\n#define max(a,b) (a>b?a:b)\n#define MIN_NEED mouth[1]\n\nusing namespace std;\n\nint n,m;\nint cake[55],mouth[1050];\n\nint prefixSum[1050];                // \u6392\u5e8f\u540e\u5634\u5927\u5c0f\u7684\u524d\u7f00\u548c\nint maxCake,allCake;                // \u6700\u5927\u86cb\u7cd5\u548c\u6240\u6709\u86cb\u7cd5\u603b\u548c\nint totalCake,needCake;             // \u641c\u7d22\uff1a\u5f53\u524d\u5168\u90e8\u53ef\u7528\u86cb\u7cd5\u548c\u8fd8\u9700\u8981\u7684\u86cb\u7cd5\nint wasteCake;                      // \u4f18\u5316\uff1a\u6d6a\u8d39\u7684\u86cb\u7cd5\u6e23\n\nbool sub_DFS(int toTest, int origin)            // origin\uff1a\u904d\u5386\u86cb\u7cd5\u6570\u7ec4\u7684\u8d77\u70b9\n{\n    /* \u7ed3\u675f\u9012\u5f52 */\n    if(toTest<1)\n        return true;                            // \u5df2\u7ecf\u5b8c\u62101~toTest\u7684\u4eba\u7684\u5582\u98df\uff0c\u6d4b\u8bd5\u901a\u8fc7\n    if(totalCake-wasteCake<needCake)\n        return false;                           // \u603b\u86cb\u7cd5\u5c0f\u4e8e\u603b\u9700\u6c42\uff0c\u5fc5\u7136\u5931\u8d25\uff0c\u505c\u6b62\u641c\u7d22\n    \n    /* \u641c\u7d22 */\n    bool flag = false;\n    for(int i=origin;i<=n;++i)                  // \u904d\u5386\u86cb\u7cd5\uff0c\u5c1d\u8bd5\u5c06\u86cb\u7cd5\u5582\u7ed9\u7b2ctoTest\u53f7\u4eba\n    {\n        if(cake[i]>=mouth[toTest])              \n        {\n            needCake-=mouth[toTest];            // \u5582\u98df\uff1a\u6d88\u8017\u86cb\u7cd5\uff0c\u6ee1\u8db3\u9700\u6c42                 \n            totalCake-=mouth[toTest];\n            cake[i]-=mouth[toTest];\n            \n            bool wasted = false;                // \u56de\u6eaf\uff1a\u662f\u5426\u4f7f\u7528\u4e86\u86cb\u7cd5\u6e23\u4f18\u5316\n            if(cake[i]<MIN_NEED)                // \u4f18\u5316\uff1a\u86cb\u7cd5\u6e23\u4e0d\u80fd\u6ee1\u8db3\u6700\u4f4e\u9700\u6c42\uff0c\u4e0d\u53ef\u7528\n            {\n                wasteCake+=cake[i];             // \u6b64\u86cb\u7cd5\u6e23\u5c06\u88ab\u6d6a\u8d39\uff0c\u8bbe\u7f6e\u4f18\u5316\u542f\u52a8\u7684\u6807\u5fd7\n                wasted = true;\n            }\n            if(mouth[toTest]==mouth[toTest-1])  // \u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u5bf9\u8c61\u7684\u5634\u548c\u5f53\u524d\u7684\u5634\u4e00\u6837\u5927\n            { \n                if(sub_DFS(toTest-1,i))         // \u4f18\u5316\uff1a\u4ece\u5f53\u524d\u7684\u4f4d\u7f6e\u7ee7\u7eed\u904d\u5386\u86cb\u7cd5\u5217\u8868\n                flag = true;                    // \u4f18\u5316\uff1a\u627e\u5230\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u4e0d\u518d\u7ee7\u7eed\u641c\u7d22\n            }\n            else if(sub_DFS(toTest-1,1))        // \u65e0\u6cd5\u4f18\u5316\uff0c\u76f4\u63a5\u9012\u5f52\u3002\n                flag = true;                    // \u4f18\u5316\uff1a\u540c\u4e0a\u5206\u652f\n\n            /* \u56de\u6eaf */\n            if(wasted)                          // \u82e5\u505a\u4e86\u4f18\u5316\uff0c\u5219\u64a4\u56de         \n                wasteCake-=cake[i];                \n            cake[i]+=mouth[toTest];             // \u64a4\u56de\u5168\u90e8\u53d8\u5316\n            totalCake+=mouth[toTest];\n            needCake+=mouth[toTest];\n\n            if(flag) return true;\n        }\n    }\n\n    /* \u7ed3\u675f\u9012\u5f52 */\n    return false;                               // \u65e0\u6cd5\u627e\u5230\u5408\u9002\u7684\u86cb\u7cd5\uff0c\u6d4b\u8bd5\u5931\u8d25\n}\n\ninline bool DFS(int toTest)                     // DFS\uff1a\u68c0\u67e5\u7b54\u6848toTest\u662f\u5426\u53ef\u884c\n{\n    /* \u51c6\u5907\u53d8\u91cf */\n    totalCake = allCake;                          \n    needCake = prefixSum[toTest];\n    wasteCake = 0;\n\n    /* \u542f\u52a8\u9012\u5f52 */\n    return sub_DFS(toTest,1);\n}\n\nint main()\n{\n    /* \u4f18\u5316\u8bfb\u5199 */\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    /* \u521d\u59cb\u5316 */\n    cake[0] = mouth[0] = 0;\n    prefixSum[0] = 0;\n    maxCake = allCake = 0;\n\n    /* \u8bfb\u5165 */\n    cin>>n;\n    for(int i=1;i<=n;++i)\n    {\n        cin>>cake[i];\n        maxCake=max(maxCake,cake[i]);           // \u627e\u5230\u6700\u5927\u86cb\u7cd5\u5e76\u8ba1\u7b97\u603b\u503c\n        allCake+=cake[i];\n    }\n    cin>>m;\n    for(int i=1;i<=m;++i)\n        cin>>mouth[i];\n\n    /* \u9884\u5904\u7406 */\n    sort(mouth+1,mouth+1+m);                    // \u8d2a\u5fc3\uff1a\u5148\u6ee1\u8db3\u5c0f\u5634\uff0c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n    for(int i=1;i<=m;++i)\n        prefixSum[i]=prefixSum[i-1]+mouth[i];   // \u8ba1\u7b97\u524d\u7f00\u548c    \n\n    /* \u4e8c\u5206\u67e5\u627e */\n    int l=1,r=m;\n    while(mouth[r]>maxCake)--r;                 // \u4f18\u5316\uff1a\u7f29\u5c0f\u4e8c\u5206\u67e5\u627e\u8303\u56f4\n    int mid;\n    while(l<=r)\n    {\n        mid = ((l+r)>>1);\n        if(DFS(mid))l=mid+1;                 \n        else r=mid-1;                       \n    }\n    cout<<r;                               \n\n    return 0;\n}\n```\n\u6ce8\u91ca\u5199\u7684\u8fd8\u7b97\u8be6\u7ec6\u5427\u2026\u2026\u5c31\u7b97\u6587\u5b57\u8bf4\u660e\u7684\u5f88\u5c51\u5e94\u8be5\u4e5f\u80fd\u770b\u61c2\u4ee3\u7801\u5427==\n\n2019-11-09-5:55-A.M> \u72d7\u547d\u8981\u7d27\uff0c\u6d17\u6d17\u7761\u7f62\uff08\uff09\n\n## ~~\u6b64\u9898\u8fd8\u53ef\u4ee5\u4f7f\u7528\u795e\u79d8\u7684\u968f\u673a\u5316\u7b97\u6cd5~~",
        "postTime": 1573250313,
        "uid": 193889,
        "name": "shiroha",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "###\u8d2a\u5fc3\u601d\u60f3+\u4e8c\u5206\u7b54\u6848+dfs\u5224\u65ad\n\n- \u8d2a\u5fc3\u5730\u60f3\uff0c\u5982\u679c\u4e00\u5757\u86cb\u7cd5\u80fd\u6ee1\u8db3\u53e3\u8f83\u5927\u7684\u4eba\uff0c\u90a3\u4e48\u53e3\u8f83\u5c0f\u7684\u4eba\u4e00\u5b9a\u80fd\u6ee1\u8db3\uff0c\u5e76\u4e14\u80fd\u6ee1\u8db3\u7684\u4eba\u53ef\u80fd\u4f1a\u66f4\u591a\uff0c\u6240\u4ee5\u5148\u6ee1\u8db3\u53e3\u8f83\u5c0f\u7684\u4eba\n\n- \u4e8c\u5206\u53ef\u4ee5\u6ee1\u8db3\u7684\u6700\u591a\u7684\u4eba\u6709\u591a\u5c11\n\n- dfs\u5224\u65ad\u662f\u5426\u524dmid\u4eba\u662f\u5426\u53ef\u884c\n\n\u4f46\u662f\uff0c\u9ebb\u70e6\u6765\u4e86\uff0cTLE\u600e\u4e48\u529e\uff1f\n\n###\u526a\u679d\n\n\u526a\u679d\n1. \u628a\u4eba\u6309\u53e3\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u5e76\u8bb0\u5f55\u524d\u7f00\u548c\u4e0e\u86cb\u7cd5\u603b\u6570\uff0c\u663e\u7136\uff0c\u524d\u7f00\u548c\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f29\u5c0f\u4e8c\u5206\u8303\u56f4\u6765\u8fbe\u5230\u52a0\u901f\u7684\u76ee\u7684\u3002\u82e5\u6240\u6709\u7684\u86cb\u7cd5\u90fd\u4e0d\u80fd\u6ee1\u8db3\u67d0\u4e00\u4e2a\u4eba\u7684\u53e3\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u5176\u5220\u53bb\n\n2. waste\u6d6a\u8d39\uff0c\u5bf9\u4e8e\u4e00\u5757\u86cb\u7cd5\uff0c\u5c06\u5176\u5206\u51fa\u53bb\u4e00\u90e8\u5206\u6ee1\u8db3\u4e00\u4e9b\u4eba\u540e\uff0c\u5018\u82e5\u5269\u4f59\u90e8\u5206\u8fde\u53e3\u6700\u5c0f\u7684\u4eba\u90fd\u65e0\u6cd5\u6ee1\u8db3\uff0c\u90a3\u4e48\u5269\u4f59\u90e8\u5206\u4e00\u5b9a\u4e0d\u80fd\u6ee1\u8db3\u4efb\u4f55\u4eba\uff0c\u5c31\u5c5e\u4e8e\u6d6a\u8d39\u7684\u90e8\u5206\u3002\u82e5\u86cb\u7cd5\u6709\u7528\u7684\u90e8\u5206\uff08\u603b\u6570-\u6d6a\u8d39\uff09\u4e0d\u80fd\u6ee1\u8db3\u524dmid\u4e2a\u4eba\uff0c\u90a3\u4e48\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\u4e0d\u53ef\u884c\n\n3. \u7531\u4e8e\u53e3\u662f\u9012\u589e\u7684\uff0c\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u4e48\u4e00\u79cd\u60c5\u51b5\uff0c\u7b2ci\u4e2a\u4eba\u4e0e\u7b2ci-1\u4e2a\u4eba\u7684\u53e3\u76f8\u540c\uff0c\u90a3\u4e48\u8003\u8651\uff0c\u82e5\u4e0d\u80fd\u6ee1\u8db3\u7b2ci-1\u4e2a\u4eba\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u80fd\u6ee1\u8db3\u7b2ci\u4e2a\u4eba\uff0c\u8fdb\u884c\u526a\u679d\n\n###AC\u4ee3\u7801\n\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define R register\n#define ll long long\n#define inf 707406378\ninline void in(int &x){\n    static int ch;static bool flag;\n    for(flag=0,ch=getchar(); ch<'0'||ch>'9'; ch=getchar())flag|= ch=='-';\n    for(x=0; isdigit(ch); ch=getchar())x=(x<<1)+(x<<3)+ch-48;\n    x=flag?-x:x;\n}\ninline void write(int x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+48);\n}\nint n,m;\nint l,r,mid;\nint sum,waste;\nint all[1050],mouth[1050];\nint cake[55],t[55];\ninline bool dfs(int person,int part){\n    if(!person)return 1;\n    if(sum-waste<all[mid])return 0;//\u526a\u679d\n    for(int i=part;i<=n;++i)\n        if(t[i]>=mouth[person]){\n            t[i]-=mouth[person];\n            if(t[i]<mouth[1])waste+=t[i];\n            if(mouth[person]==mouth[person-1]){//\u526a\u679d\n                if(dfs(person-1,i))return 1;\n            }\n            else if(dfs(person-1,1))return 1;\n            if(t[i]<mouth[1])waste-=t[i];\n            t[i]+=mouth[person];\n        }\n    return 0;\n}\ninline int dy(){\n    in(n);\n    for(int i=1;i<=n;++i)\n        in(cake[i]),sum+=cake[i];\n    in(m);\n    for(int i=1;i<=m;++i)in(mouth[i]);\n    sort(mouth+1,mouth+1+m);\n    while(sum<mouth[m])m--;//\u7f29\u5c0f\u4e8c\u5206\u8303\u56f4\n    for(int i=1;i<=m;++i)all[i]=all[i-1]+mouth[i];\n    r=m;\n    while(l<=r){\n        waste=0;\n        for(int i=1;i<=n;++i)t[i]=cake[i];\n        mid=(r-l)/2+l;\n        if(dfs(mid,1))l=mid+1;\n        else r=mid-1; \n    }\n    write(r);\n}\nint QAQ = dy();\nint main(){;}\n```",
        "postTime": 1506389044,
        "uid": 36080,
        "name": "\u51cc\u5e7d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "\u65e9\u5c31\u60f3\u51fa\u4e86\u4e8c\u5206\u7b54\u6848\uff0c\u4f46\u662f\u82e6\u4e8e\u4e0d\u77e5\u9053\u600e\u4e48\u9a8c\u8bc1\u89e3\u7684\u53ef\u884c\u6027\u3002\u770b\u4e86\u4e0b\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\u624d\u77e5\u9053\u8981\u7528dfs\u9a8c\u8bc1\uff0c\u5acc\u9ebb\u70e6\uff06\u4e0d\u7518\u5fc3\uff0c\u4e8e\u662f\u6211\u51b3\u5b9a\u2014\u2014\u2014\u2014\u968f\u673a\u5316\u8d2a\u5fc3\u3002\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint c[51],p[1100],n,m,b[51];\npriority_queue<int> tmp;\nbool cmp(int x,int y){\n\treturn x>y;\n}\nbool check(int N){\n\tint i,j,time=1000;\n\twhile(time--){//\u65e2\u7136\u62fcRP\uff0c\u5f53\u7136\u8981\u591arand\u51e0\u904d \n\t\tfor(i=1;i<=n;i++)\n\t\t\tb[i]=c[i];//\u590d\u5236\u4e00\u4efd\u86cb\u7cd5\u526f\u672c \n\t\trandom_shuffle(b+1,b+n+1);//\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u628a\u4e00\u6bb5\u533a\u95f4\u968f\u673a\u6253\u4e71 \n\t\tint flag;\n\t\tfor(i=N;i>=1;i--){//\u8fd9\u91cc\u5bf9\u8981\u6ee1\u8db3\u7684\u4eba\u4ece\u5927\u5230\u5c0f\u679a\u4e3e \n\t\t\tflag=0;\n\t\t\tfor(j=1;j<=n;j++){//n\u6bd4\u8f83\u5c0f\uff0c\u66b4\u529b\u679a\u4e3e\u86cb\u7cd5 \n\t\t\t\tif(b[j]>=p[i]){\n\t\t\t\t\tflag=1;\n\t\t\t\t\tb[j]-=p[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag) break;//\u5982\u679c\u627e\u4e0d\u5230\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u4e2a\u53e3\u7684\u86cb\u7cd5\uff0c\u8bf4\u660e\u4e0d\u884c \n\t\t}\n\t\tif(flag) return true;\n\t}\n\treturn false;\n}\nint main(){\n\tint i,j,l,r,mid,ans=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%d\",&c[i]);\n\tscanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++)\n\t\tscanf(\"%d\",&p[i]);\n\tsort(p+1,p+m+1);//\u8d2a\u5fc3\uff0c\u53e3\u5c0f\u7684\u4eba\u4f18\u5148\u53d6 \n\tl=0;r=m;\n\twhile(l<=r){//\u4e8c\u5206 \n\t\tmid=l+r>>1;\n\t\tif(mid>=0&&check(mid)){\n\t\t\tans=mid;\n\t\t\tl=mid+1;\n\t\t}\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1541402339,
        "uid": 49118,
        "name": "\u6587\u827a\u5e73\u8861\u6811",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "\u968f\u673a\u5316\u7b97\u6cd5\uff0cyyds\uff01  \n\u95f2\u8bdd\u5c11\u8bf4\uff0c\u5207\u5165\u6b63\u9898\u2014\u2014  \n\n---\n\u7531\u4e8e\u5c0f SX \u7684\u641c\u7d22\u5f88\u5dee\uff0c\u4ed6\u5e76\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u597d\u7684\u526a\u679d\u65b9\u6cd5\uff0c\u53ea\u60f3\u5230\u4e86\u4e8c\u5206\u7684\u6846\u67b6\u548c\u8d2a\u5fc3\u7684\u601d\u8def\uff0c\u6240\u4ee5\u4ed6\u51b3\u5b9a\u7528**\u968f\u673a\u5316\u7b97\u6cd5**\u3002  \n\u9996\u5148\u8d2a\u5fc3\u7684\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5634\u5df4\u5927\u5c0f $mth$ \u964d\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u4e8c\u5206\u5230\u4e86 $mid$ \u5f20\u5634\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u5168\u90e8\u7528\u5230 $mth_{1} \\sim mth_{mid}$\uff0c\u8bc1\u660e~~\u8fc7\u4e8e\u5f31\u667a~~\u7565\u3002  \n\u6240\u4ee5\u8bf4\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5224\u5b9a $mid$ \u4e2a\u4eba\u80fd\u5403\u6389\u3002  \n\n---\n\u6211\u4eec\u53ef\u4ee5\u4ece $mth_{mid}$ \u8bd5\u5230 $mth_{1}$\uff0c\u7136\u540e\u770b\u770b $n$ \u4e2a\u86cb\u7cd5\u662f\u5426\u80fd\u5403\u9971\u3002  \n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4eba\u679a\u4e3e\u7684\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f\u6bcf\u4e2a\u4eba\u5403\u7684\u86cb\u7cd5\u5c31\u5f88\u7384\u5b66\u3002  \n\u5927\u90e8\u5206\u4eba\u7528\u7684\u662f\u641c\u7d22\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u968f\u673a\u5316\u6bd4\u641c\u7d22\u66f4\u7b80\u6d01\uff08bao\uff09\u4f18\u7f8e\uff08li\uff09\u3002  \n\u5982\u679c\u6211\u4eec\u53ea\u662f\u78b0\u5230\u4e86\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u5403\u7684\u86cb\u7cd5\u5c31\u5403\uff0c\u90a3\u4e48\u6ca1\u51c6\u5c31\u4e0d\u662f\u6700\u4f18\u89e3\u4e86\uff0c\u8fd9\u662f\u663e\u7136\u7684\u3002  \n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u4e00\u70b9\u70b9\u9b54\u5e7b\u7684\u64cd\u4f5c\u4e86\u2014\u2014```random_shuffle```\uff0c\u968f\u673a\u6253\u4e71\u4e00\u4e2a\u6570\u7ec4\u3002    \n\u6211\u4eec\u5bf9\u4e8e\u86cb\u7cd5\u591a ```random_shuffle``` \u51e0\u904d\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\u6765\u8ba1\u7b97\uff0c\u7b97\u80fd\u4e0d\u80fd\u8ba9 $mid$ \u4e2a\u4eba\u5403\u6389\uff0c\u5c31\u80fd\u5224\u5b9a\u5566~  \n```random_shuffle``` \u4fdd\u9669\u4e00\u70b9\u53ef\u4ee5\u641e $3000$ \u6b21\uff0c\u4f46\u5bf9\u4e8e\u8fd9\u9053\u9898 $900$ \u5c31\u591f\u4e86\u3002  \n\n---\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <algorithm>\n#define MAXN 100000\n#define QWQ cout << \"QWQ\" << endl;\nusing namespace std;\nint n, m, cke[MAXN + 10], mth[MAXN + 10], qz[MAXN + 10], cp[MAXN + 10], sum = 0; \nbool flag = 0;\nbool check(int mid) {\n\tfor(int p = 1; p <= 1500; p++) {\n\t\tfor(int i = 1; i <= n; i++) cp[i] = cke[i];\n\t\trandom_shuffle(cp + 1, cp + n + 1);\n\t\tbool eye = 0;//\u8868\u793a\u8fd9\u6837\u7684\u86cb\u7cd5\u6392\u5217\u884c\u4e0d\u884c\n\t\tfor(int i = mid; i >= 1; i--) {//\u679a\u4e3e\u6bcf\u4e2a\u5634\n\t\t\tbool flag = 0;\n\t\t\tfor(int j = 1; j <= n; j++) {//\u679a\u4e3e\u6bcf\u4e2a\u86cb\u7cd5\n\t\t\t\tif(cp[j] >= mth[i]) {//\u80fd\u5403\uff0c\u5403\n\t\t\t\t\tcp[j] -= mth[i];\n\t\t\t\t\tflag = 1; break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag) {//\u5982\u679c\u4e0d\u884c\uff0c\u6807\u8bb0\n\t\t\t\teye = 1;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t\tif(!eye) return 1;//\u5982\u679c\u90fd\u884c\uff0c\u76f4\u63a5\u8fd4\u56de\n\t}\n\treturn 0;//mid \u4eba\u4e0d\u884c\n}\nint main() {\n\tcin >> n; for(int p = 1; p <= n; p++) cin >> cke[p];\n\tcin >> m; for(int p = 1; p <= m; p++) cin >> mth[p];  \n\tsort(mth + 1, mth + m + 1);\n\tint l = 1, r = m;\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid)) l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\tcout << r << endl;\n}\n```",
        "postTime": 1626143086,
        "uid": 298549,
        "name": "SIXIANG32",
        "ccfLevel": 5,
        "title": "\u9898\u89e3\u3010P1528 \u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "\u7ed9\u5b9am\u4e2a\u4eba\u548cn\u5757\u86cb\u7cd5\n\n\n\u9996\u5148\u662f\u9700\u8981\u5148sort\u4e00\u904d\u628a\u4eba\u7684\u5634\u7684\u5927\u5c0f\u62cd\u4e00\u904d\u5e8f\uff0c\u5982\u679c\u662f\u6211\uff0c\u7684\u8bdd\uff0c\u7528\u6709\u9650\u7684\u86cb\u7cd5\uff0c\u6ee1\u8db3\u7684\u66f4\u591a\u7684\u4eba\uff0c\u6211\u4f1a\u9009\u62e9\u6ee1\u8db3\n\u5634\u5df4\u5c0f\u7684\u4eba\n\u6240\u4ee5\u5148sort\u4e00\u904d\uff0c\u628a\u6240\u6709\u7684\u4eba\u7684\u5634\u5df4\u6392\u5e8f\u4e00\u904d\uff0c\u4e8c\u5206\u7b54\u6848\nWDC\uff1a\u4e8c\u5206\u7684\u4f5c\u7528\u662f\u5148\u5047\u5b9a\u6211\u53ef\u4ee5\u6ee1\u8db3x\u4e2a\u4eba\u7684\u5634\u5df4\uff0c\u6bcf\u4e00\u6b21\u4e8c\u5206\u51fa\u4e00\u4e2a\u7b54\u6848\u540e\uff0c\u90fd\u8981\u5bf9\u7b54\u6848\u8fdb\u884c\u9a8c\u8bc1\n\u800cDFS\u3001\u6df1\u641c\u7684\u76ee\u7684\u5c31\u662f\u9a8c\u8bc1\u4e8c\u5206\u7684\u533a\u57df\u5bf9\u4e0d\u5bf9\n\u6839\u636e\u4e8c\u5206\u7b54\u6848\u7684\u5927\uff0c\u5c0f\u6765\u4e0d\u65ad\u66f4\u65b0\u53f3\u8fb9\u754c\uff0c\u5de6\u8fb9\u754c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u786e\u5207\u7684\u503c\n\n\u5bf9\u4e8eDfs\uff0c\noperate\uff1a\n\n1.\u5148\u8981\u7ef4\u62a4\u4e00\u4e0b\u76ee\u524d\u7684\u86cb\u7cd5\u7684\u6570\u91cf\u603b\u5171\u7684\u5927\u5c0f\n2.\u5728\u7ef4\u62a4\u76ee\u524d\u7684\u4eba\u7684\u5634\u7684\u603b\u9700\u6c42\uff0c\n3.\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u5757\u86cb\u7cd5\u88ab\u5543\u540e\u7684\u5927\u5c0f\n\n\u5bf9\u4e8eoperate1 \n\u5982\u679c\u73b0\u5728\u7684\u86cb\u7cd5\u76ee\u524d\u7684\u6570\u91cf\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u6240\u6709\u4eba\u7684\u5634\u7684\u603b\u6570\uff0c\u76f4\u63a5return\u5c31ok\uff0c\u4e0d\u53ef\u80fd\u6ee1\u8db3\u4e86\uff08\u8fd9\u65f6\u5019\nflag\u662ffalse\uff0c\u6839\u636eflag\u6765\u8c03\u6574\u53ef\u4ee5\u6ee1\u8db3\u7684\u4eba\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u8c03\u5c0f\u533a\u95f4\u5c31ok\uff0c\uff09\u53cd\u4e4b\uff0c\u5982\u679cflag\u662ftrue\u7684\u8bdd\uff0c\u5c31\u8bf4\u660e \uff0c\u86cb\u7cd5\u6570\u91cf\n\u8fd8\u4e0d\u5c11\u554a\uff0c\u5c31\u53ef\u4ee5\u8c03\u5927\u4e86\u533a\u95f4\u7684\u5927\u5c0f\uff0c\n\uff08operate1\u8fd9\u4e00\u6b65\u4e3b\u8981\u662f\u7528\u6765\u8c03\u4e00\u4e0b\u53bb\u533a\u95f4\u7684\u5927\u5c0f\uff09\n\n\u5bf9\u4e8eoperate2\n \n\u65f6\u523b\u8bb0\u5f55\u4e00\u4e0b\u8fd8\u9700\u8981\u7684\u86cb\u7cd5\u6570\u91cf \uff08\u4e0eoperate1\u7ed3\u5408\u5206\u6790\uff09\uff0c\u6bcf\u6b21\u6ee1\u8db3\u4e00\u4e2a\u4eba\uff0c\u5c31\u628a\u4ed6\u7684\u5634\u5220\u53bb\n\n\n\n\u5bf9\u4e8eoperate3\n\n\u5982\u679c\u8fd9\u4e2a\u86cb\u7cd5\u88ab\u597d\u591a\u4e2a\u4eba\u5543\u4e86\uff0c\u53ea\u5269\u4e0b\u4e86\u4e00\u4e22\u4e22\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e00\u4e22\u4e22\u7684\u86cb\u7cd5\u6e23\u6e23\u5c31\u8fde\u7b2c\u4e00\u4e2a\u4eba\u90fd\u4e0d\u80fd\u6ee1\u8db3\u7684\u8bdd\uff0c\u90a3\u4e48\n\u4ed6\u5c31\u5931\u53bb\u4e86\u5b58\u5728\u7684\u610f\u4e49\uff08\u6709\u4ed6\u6ca1\u4ed6\u90fd\u4e00\u6837\uff09\uff0c\u90a3\u4e48operate1\u4e2d\u7ef4\u62a4\u7684\u86cb\u7cd5\u5269\u4f59\u603b\u6570\u5c31\u8981\u51cf\u53bb\u73b0\u5728\u7684\u86cb\u7cd5\u7684\u5927\u5c0f\n.\n.\n.\n.\n\uff08\u4f18\u5316\uff09\n\u526a\u679d\uff0c\u53bb\u6389\u4e00\u4e9b\u663e\u7136\u6ca1\u6709\u7528\u7684\u6b65\u9aa4\uff0c\u8d77\u5230\u4f18\u5316\u7684\u76ee\u7684\n\u7701\u65f6\u95f4\uff0c\u7a7a\u95f4\n\n\n\n\u5bf9\u4e8e\u5047\u5b9a\u7684\u4eba\u6570\uff0c\uff08\u5c31\u50cf\u662f\u7528\u77f3\u5b50\uff0c\u6c99\u5b50\uff0c\u6c34\u586b\u6ee1\u6c34\u74f6\u4e00\u6837\uff0c\u5148\u586b\u4f53\u79ef\u5927\u7684\uff09\ndfs\uff08x\uff0cj\uff09\n\u7b2cx\u5757\u86cb\u7cd5\uff0c\u7b2cj\u4e2a\u4eba\uff0c\n\u5bf9\u4e8ex-1\u4e2a\u4eba\u7684\u5634\u7684\u5927\u5c0f\u4e00\u5b9a\u662f<=\u7b2cx\u4e2a\u4eba\u7684\u5634\u7684\u5927\u5c0f\n\n\n\n\u6bcf\u4e00\u6b65\u90fd\u8981\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u7684\u86cb\u7cd5\u6570\u91cf\u548c\uff0c\u4eba\u7684\u9700\u6c42\u7684\u4e4b\u95f4\u7684\u6bd4\u8f83\n\n\n\n\u6839\u636e\u5c0f\u4e8e\u548c\u7b49\u4e8e\u8fdb\u884c\u526a\u679d\uff0c\n\u5982\u679c\u662f\u5c0f\u4e8e\uff0c\u5c31\u8981\u4ece\u7b2c\u4e00\u5757\u86cb\u7cd5\u5f00\u59cb\u626b\nfor\u5faa\u73af\u5957\u8d77\u6765\uff08j  1---n\uff09\ndfs(x-1,j)\n\n\n\u5982\u679cx-1\u7684\u5634\u7684\u5927\u5c0f\u548cx\u7684\u5634\u7684\u5927\u5c0f\u662f\u4e00\u6837\u7684\u8bdd\n\u56e0\u4e3a\u7b2cx\u4e2a\u5634\u5df2\u7ecf\u662f\u4ece\u7b2c1\u4e2a\u626b\u5230\u4e86\u7b2cj\u4e2a\u8fd9\u65f6\u5019\u53d1\u73b0\u7b2cj\u4e2a\u53ef\u4ee5\u6ee1\u8db3x\u7684\u5634\n\u90a3\u4e48\u5c31\u8bf4\u660e\u7b2cx-1\u5f20\u5634\uff08\u548c\u7b2cx\u5f20\u5634\u662f\u4e00\u6837\u7684\uff0c\uff09\u5c31\u6ca1\u6709\u5fc5\u8981\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u626b\u4e86\n\u4ece\u7b2cj\u4e2a\u5f00\u59cb\uff08\u7b2cj\u4e2a\u6709\u53ef\u80fd\u8fd8\u80fd\u6ee1\u8db3x-1\u7684\u5634\uff0c\u5982\u679cj\u8fd9\u5757\u86cb\u7cd5\u8db3\u591f\u5927\u7684\u8bdd\uff09\n.\n.\n.\n.\n\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\n.\n.\n.\n.\n.\n.\n.\n.\n\u56de\u6eaf\uff0c\u600e\u4e48\u64cd\u4f5c\u7684\u600e\u4e48\u9000\u56de\u53bb\uff08\u628a\u86cb\u7cd5\u8865\u56de\u6765\uff0c\u5403\u7684\u86cb\u7cd5\u90fd\u5410\u51fa\u6765\uff09\n\u8fd9\u4e2a\u6df1\u641c\uff0c\u662f\u5bf9\u5047\u8c61\u7684\u68c0\u9a8c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u7684\u8fd9\u4e2a\u5047\u8c61\u4e0d\u4e00\u5b9a\u662f\u6b63\u786e\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5047\u8c61\uff0c\u90fd\u8981\u505a\u597d\n\u5047\u8c61\u662f\u9519\u8bef\u7684\u56de\u6eaf\u8fc7\u7a0b\n\n\u6df1\u641c\u8fdb\u884c\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u57fa\u4e8e\u4e0a\u4e00\u6b65\u662f\u6b63\u786e\u7684\u8fd9\u4e2a\u6761\u4ef6\u4e0b\uff0c\u4ece2\u53f7\u52305\u53f7\uff0c\u53d1\u73b05\u53f7\u4ee5\u540e\u8d70\u4e0d\u52a8\u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5bf9\u4ece2--5\u7684\n\u64cd\u4f5c\u8fdb\u884c\u590d\u539f\uff0c\u600e\u4e48\u6765\u7684\u600e\u4e48\u56de\u53bb\uff0c\u5728\u8fdb\u884c\u6362\u4e00\u6761\u8def\u7684\u641c\u7d22\uff0c\u76f4\u5230\u7ed3\u675f\uff0c\u8fd4\u56de\u4e00\u5b9a\u7684\u503c\uff08flag\uff09\n\u4ed6\u4e5f\u4f1a\u4e00\u76f4\u8fd4\u56de\uff0c\u8fdb\u884c\u5b8c\u6240\u6709\u7684\u641c\u7d22\uff0c\uff08\u52a0\u5165\u641c\u7d22\u6210\u529f\u4e86\u5979\u4f1a\u8fd4\u56detrue\u7136\u540e\uff0c\u5728\u8fd4\u56de\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e00\u5b9a\u503c\nfalse\u7136\u540e\u5728\u56de\u6eaf\uff0c\u603b\u4e4b\u4e00\u5b9a\u662f\u4f1a\u56de\u6eaf\u7684\uff0c\u53ea\u4e0d\u8fc7\u662f\u65f6\u95f4\u4e0d\u4e00\u6837\uff0c\u4ece\u4e00\u6761\u8def\u6362\u5230\u53e6\u4e00\u6761\u8def\u662f\u662f\u5728\u8fd9\u4e00\u5c0f\u6b65\u4e0a\u76f4\u63a5\u56de\u6eaf\n\u641c\u5230\u7684\u6700\u540e\uff0c\u662f\u5168\u90e8\u4ece\u5e95\u90e8\u4e00\u6b65\u4e00\u6b65\u7684\u5411\u4e0a\u56de\u6eaf\n\uff09\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<stdio.h>\n#include<algorithm>\n#include<cmath>/*2\u5206\uff0c\u641c\u7d22*/\nusing namespace std;\nint n,m;\nint tot=0;//\u7528tot\u8fd9\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u8fd9\u4e2a\u6570\u7ec4\u7684\u86cb\u7cd5\u603b\u6570 \nint size_cake[55],num_peo[2000];\nint sum[2025];//sum\u8fd9\u4e2a\u6570\u7ec4\u7528\u6765\u8bb0\u524d\u7f00\u548c \nint l,r;bool flag; \nint chi;\nint ck;\n//\u526a\u679d\u8fc7\u7a0b\u66f4\u591a\u7684\u662f\u5728dfs\u7684\u5224\u65ad\u4e2d\uff0c \nvoid dfs(int x,int y)\n{\n\tif(x<1)\n\t//\u5206\u86cb\u7cd5\u7684\u8fc7\u7a0b\u5c31\u50cf\u662f\u4e4c\u9e26\u7528\u77f3\u5b50\uff0c\u6c99\u5b50\uff0c\u6c34\u53bb\u586b\u6ee1\u4e00\u4e2a\u74f6\u5b50\uff0c\u806a\u660e\u7684\u4e4c\u9e26\u4e00\u5b9a\u662f\u5148\u53bb\u7528\u5927\u7684\u4f53\u79ef\u7684\u4e1c\u897f\u53bb\u586b\uff0c\u7136\u540e\u662f\u5c0f\u7684\n\t//\u4e00\u65e6\u662f\u786e\u5b9a\uff08\u5047\u5b9a\uff09 \u4e86\u53ef\u4ee5\u5582\u9971\u7684\u4eba\uff0c\u5c31\u662f\u8981\u6c42\u5230\u8fd9\u5f80\u524d\u4ece\u540e\u5f80\u524d\u5582\u540c\u5b66\u4eec\uff0c\u5982\u679c\u5206\u5230\u4e86\u4e00\u4e2a\u4eba\uff0c\u8fd9\u4e2a\u4eba\u7684\u5e8f\u53f7\u6bd41\u8fd8\u8981\u5c0f\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u660e\u5582\u5b8c\u4e86\u6240\u6709\u4eba\n//\u8fd4\u56detrue\u5c31ok\t \n\t{\n\t\tflag=true;\n\t\treturn;\n\t}\n\tfor(int i=y;i<=n;i++)//\u662f\u4ece\u7b2cy\u5757\u86cb\u7cd5\u5f00\u59cb\u5206 \n\t{\n\t\tif(tot<chi)return;//\u5982\u679c\u6211\u7684 \u86cb\u7cd5\u7684\u603b\u6570\u6bd4\u4eba\u7684\u9700\u6c42\u603b\u91cf\u8fd8\u8981\u5c11\uff0c\u90a3\u4e48\u4e0d\u7ba1\u6211\u600e\u4e48\u53bb\u5206\u86cb\u7cd5\uff0c\u6211\u7684\u7ed3\u679c\u90fd\u662ffalse\uff0c\u8fd9\u65f6\u5019\u5c31\u6ca1\u5fc5\u8981\u4e86\u76f4\u63a5\u8fd4\u56de\n\t\tif(flag)return;\n\t\tif(x<1)\n\t\t{\n\t\t\tflag=true;\n\t\t\treturn;\n\t\t } \n\t\t if(size_cake[i]>=num_peo[x])\n\t\t {\n\t\t\tsize_cake[i]-=num_peo[x];\n\t\t\ttot-=num_peo[x];\n\t\t\tchi-=num_peo[x];\n\t\t\tif(tot<num_peo[1]&&x!=1)return;\n\t\t\tif(size_cake[i]<num_peo[1])tot-=size_cake[i];\n\t\t\tif(num_peo[x]==num_peo[x-1])dfs(x-1,i);\n\t\t\telse dfs(x-1,1);\t\n\t\t\tif(size_cake[i]<num_peo[1])tot+=size_cake[i];\n\t\t\tsize_cake[i]+=num_peo[x];\n\t\t\ttot+=num_peo[x];\n\t\t\tchi+=num_peo[x]; \n\t\t }//\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u8fc7\u53ea\u662f\u81ea\u5df1\u5047\u8c61\u7684\uff0c\u6240\u4ee5\u5c31\u50cf\u662f\u628a\u7687\u540e\u4e00\u6837\uff0c\u4e00\u5b9a\u8981\u56de\u6eaf\uff0c\u6700\u540e\u7684\u65f6\u5019\u86cb\u7cd5\u4e00\u70b9\u90fd\u4f1a\u5c11\uff0c\u4eba\u4eec\u5403\u7684\u86cb\u7cd5\u90fd\u4f1a\u5410\u51fa\u6765\u7684 \n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&size_cake[i]);\n\t\ttot+=size_cake[i];\n\t} \n\tscanf(\"%d\",&m);\n\tfor(int j=1;j<=m;j++)scanf(\"%d\",&num_peo[j]);\n\tsort(num_peo+1,num_peo+1+m);\n\tfor(int i=1;i<=m;i++) sum[i]=sum[i-1]+num_peo[i];//\u524d\u7f00\u548c\u662f\u4e0a\u4e00\u4e2a\u4eba\u7684\u524d\u7f00\u548c+\u672c\u4eba\u7684\u5634\u7684\u5927\u5c0f \n    //\u5148\u8981\u8fdb\u884c\u7b2c\u4e00\u4e2a\u4f18\u5316\uff0c\u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u5728\u4e8c\u5206\u7b54\u6848\u4e4b\u524d\u9996\u5148\u8981\u7b5b\u6389\u4e00\u4e9b\u6ca1\u6709\u7528\u7684\uff0c\u5c31\u662f\u5982\u679c\u524d\u7f00\u548c\u5927\u4e8etot\uff0c\u524d\u7f00\u548c\u5c31\u8981\u5411\u524d\u79fb\u52a8\n    int oo=m;\n\twhile(sum[oo]>tot)oo--;//\u901a\u8fc7\u524d\u7f00\u548c\u997f\u8fdb\u884c\u4f18\u5316 \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u4e9b\u526a\u679d\u6765 \u51cf\u53bb\u6ca1\u6709\u5fc5\u8981\u7684\u4e8c\u5206\u533a\u95f4\n\tl=1,r=oo;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\t\tflag=false;\n\t\tchi=sum[mid];\n\t\tdfs(mid,1);//mid\u662f\u5f53\u524d\u5f00\u59cb\u7684\u4eba\u4eec\u6240\u9700\u8981\u7684\u86cb\u7cd5\u6570\u76ee\u7684\u603b\u548c\uff0c1\u662f\u6307\u4ece\u7b2c\u4e00\u5757\u86cb\u7cd5\u5f00\u59cb\u641c\u7d22\n\t\t//\u5176\u5b9e\uff0c\u86cb\u7cd5\u6392\u5e8f\u4e0e\u5426\u5e76\u4e0d\u91cd\u8981\uff0c\u90fd\u65e0\u6240\u8c13\uff0c\u4e0d\u6015\u6d6a\u8d39\u65f6\u95f4\u53bbsort\u4e00\u884c\u5c31\u81ea\u5df1\u5199\u5457\n\t\t//dfs\u5c31\u662f\u4f9d\u636e\u60c5\u51b5\u800c\u5b9a\u7684check\u51fd\u6570\uff0c\u4e0d\u7ba1\u600e\u4e48\u6837\uff0ccheck\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u6839\u636e\u8fd9\u4e2a\u503c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\n\t\tif(flag)//\u60c5\u51b5\u65f6\u53ef\u884c\u7684\n\t\t{\n\t\t\tl=mid+1;\t\n\t\t } \n\t\t else{\n\t\t \tr=mid-1;\n\t\t }\n\t\t\t\n\t}\n\tcout<<l-1<<endl;\n}\n```\n(https://cdn.luogu.com.cn/upload/image_hosting/gtk7qf75.png))\n\n\n\n\u83dc\u9e21\u5192\u6ce1",
        "postTime": 1570186339,
        "uid": 184355,
        "name": "lsm123",
        "ccfLevel": 0,
        "title": "\u5207\u86cb\u7cd5"
    },
    {
        "content": "#### \u524d\u8a00\n\u849f\u5f31\u672c\u6765\u662f\u5728~~\u4ebf\u4e07\u5e74\u524d~~\u505a\u4e8c\u5206\u7b54\u6848\u4e13\u9898[\u6805\u680f](https://www.luogu.com.cn/problem/P2329)\u7684\uff0c\u7531\u4e8e\u6570\u636e\u6c34\u6240\u4ee5\u8fc7\u6389\u4e86\uff0c\u540e\u6765\u53d1\u73b0\u6709\u4e00\u4e2a\u6570\u636e\u52a0\u5f3a\u7248\uff0c\u4e5f\u5c31\u662f[\u672c\u9898](https://www.luogu.com.cn/problem/P1528)\uff0c\u4e8e\u662f\u7206T\u4e86...\u8fc7\u4e86\u6709\u4e2a\u4e94\u516d\u4e2a\u6708\u56de\u6765\u586b\u5751\u4e86...\u73b0\u5728\u5f00O2\u662f\u5728\u6700\u4f18\u89e3\u7b2c\u4e00\u4e2a\uff08\u81ea\u8c6aing\n#### \u9898\u76ee\u63cf\u8ff0\n\u6709 $n$ \u5757 \u5927\u5c0f\u5206\u522b\u4e3a $a_i$ \u7684\u86cb\u7cd5\uff0c\u5206\u7ed9 $m$ \u4e2a\u5634\u5927\u5c0f\u5206\u522b\u4e3a $b_i$ \u7684\u4eba\uff0c\u4f46\u662f\u86cb\u7cd5\u53ea\u80fd\u4ee5\u6574\u5757\u7684\u5f62\u5f0f\u7ed9\u4eba\uff0c\u6c42\u6700\u591a\u7ed9\u591a\u5c11\u4eba\u3002\n#### \u601d\u8def\n\u5f88\u660e\u663e\uff0c\u7b54\u6848\u5728\u6392\u5e8f\u4e4b\u540e\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u80fd\u591f\u5206\u7ed9\u591a\u5c11\u4eba\uff0c\u4f46\u4e8c\u5206\u5e76\u6ca1\u6709\u4e00\u4e2a\u660e\u786e\u7684\u5957\u8def\u5207\u86cb\u7cd5\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u6df1\u641c\uff1b\n\n\u4e8e\u662f\u6765\u8003\u8651\u6700\u4f18\u8d2a\u5fc3\u7b56\u7565\uff1a\n\n1. \u9996\u5148\u5c06\u6240\u6709\u86cb\u7cd5\u548c\u5634\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u4f18\u5148\u5582\u5634\u5c0f\u7684\u4eba\uff1b\n\n\u5bf9\u5e94\u7740\u8fd9\u4e24\u884c\uff1a\n```\nn=read();F(i,1,n)a[i]=read(),tot+=a[i];std::sort(a+1,a+n+1);\nm=read();F(i,1,m)b[i]=read();std::sort(b+1,b+m+1);\n```\n2. \u6392\u5b8c\u5e8f\u540e\uff0c\u8003\u8651\u7f29\u5c0f\u4e8c\u5206\u8303\u56f4\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u6c42\u5f97\u5634\u5927\u5c0f\u7684\u524d\u7f00\u548c\uff0c\u5982\u679c\u5230\u7b2c $i$ \u4e2a\u4eba\u7684\u5634\u5927\u5c0f\u603b\u548c $pre_i$ \u8d85\u8fc7\u4e86\u4e0a\u9762\u6c42\u51fa\u7684\u86cb\u7cd5\u5927\u5c0f\u603b\u548c $tot$\uff0c\u6216\u8005 $b_i>a[n]$\uff0c\u90a3\u4e48\u5230\u8fd9\u91cc\u65e0\u8bba\u5982\u4f55\u5207\u90fd\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e8c\u5206\u7684\u6700\u5927\u8fb9\u754c\u5c31\u662f $i-1$ \u4e86\u3002\u53e6\u5916\uff0c\u5982\u679c\u86cb\u7cd5\u603b\u548c\u90fd\u6bd4\u6700\u5c0f\u7684\u5634\u5c0f\uff0c\u90a3\u4e48\u4e00\u4e2a\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u3002\n\n\u5bf9\u5e94\u7740\u8fd9\u4e09\u884c\uff1a\n```\nif(tot<b[1]){pi(0);return 0;}\nF(i,1,m){pre[i]=pre[i-1]+b[i];if(pre[i]>tot||b[i]>a[n]){cnt=i-1;break;}}\nif(!cnt)cnt=m;\n```\n\u6211\u4eec\u5f00\u59cb\u4e8c\u5206+\u6df1\u641c\uff1a\n\n1. \u5728\u6df1\u641c\u8fc7\u7a0b\u4e2d\uff0c\u679a\u4e3e\u80fd\u591f\u5207\u4e0b\u591f\u8fd9\u53e3\u5634\u5403\u7684\u86cb\u7cd5\uff0c\u5207\u6389\u540e\u86cb\u7cd5\u603b\u5927\u5c0f\u8981\u51cf\u53bb\u5634\u7684\u5927\u5c0f\u3002\u5982\u679c\u8fd9\u5757\u86cb\u7cd5\u5207\u5269\u4e0b\u7684\u4e0d\u591f\u6700\u5c0f\u5634\u7684\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u8fd9\u5757\u86cb\u7cd5\u6ca1\u6709\u7528\u4e86\uff0c\u86cb\u7cd5\u603b\u5927\u5c0f\u8981\u518d\u51cf\u53bb\u6ca1\u6709\u7528\u7684\u8fd9\u90e8\u5206\u3002\n\n\u4e5f\u5c31\u662f\u8fd9\u6837\uff1a\n```\nif(a[i]>=b[x]){\n\t\ta[i]-=b[x];tot-=b[x];\n\t\tif(a[i]<b[1])tot-=a[i];\n}\n```\n2. \u663e\u7136\uff0c\u5f53\u5269\u4e0b\u51e0\u5f20\u5634\u7684\u603b\u5927\u5c0f\u6bd4\u5269\u4e0b\u51e0\u5757\u86cb\u7cd5\u7684\u603b\u5927\u5c0f\u8fd8\u8981\u5927\u65f6\uff0c\u65b9\u6848\u662f\u4e0d\u7b26\u5408\u7684\u3002\n\n\u4e5f\u5c31\u662f\u8fd9\u53e5\uff1a\n```\nif(pre[x]>tot)return 0;\n```\n3. \u5f53\u5f53\u524d\u641c\u7d22\u5230\u7684\u8fd9\u53e3\u5634\u4e0e\u4e0b\u4e00\u4e2a\u8981\u641c\u7d22\u7684\u5634\u5927\u5c0f\u76f8\u540c\u65f6\uff0c\u65e2\u7136\u5df2\u7ecf\u679a\u4e3e\u5230\u4e86\u7b2c $i$ \u5757\u86cb\u7cd5\uff0c\u8bf4\u660e\u7b2c $i$ \u5757\u86cb\u7cd5\u4e4b\u524d\u7684\u86cb\u7cd5\u5bf9\u4e8e\u8fd9\u4e2a\u5927\u5c0f\u7684\u5634\u90fd\u662f\u6ca1\u6709\u6b63\u786e\u65b9\u6848\u7684\uff0c\u4e8e\u662f\u641c\u7d22\u4e0b\u4e00\u53e3\u5634\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u7b2c $i$ \u5757\u86cb\u7cd5\u679a\u4e3e\u3002\n\n\u8fd9\u53e5\u8bdd\u7684\u5b9e\u73b0\u957f\u8fd9\u6837\uff1a\n```\nif(b[x]==b[x-1])fl=check(x-1,i);else fl=check(x-1,1);\n```\n\n\u6700\u540e\u65e0\u8bba\u6709\u6ca1\u6709\u6b63\u786e\u65b9\u6848\u90fd\u8981\u8bb0\u5f97\u56de\u6eaf\u554a\uff01\n```\nif(a[i]<b[1])tot+=a[i];\na[i]+=b[x];tot+=b[x];\n```\n\u5230\u6700\u540e\u5982\u679c\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u86cb\u7cd5\u90fd\u6ca1\u6709\u6b63\u786e\u65b9\u6848\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5 $return\\ 0$ \u4e86\u3002\n\n\u4e8e\u662f\u672c\u9898\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u7ed3\u675f\u4e86\uff5e\n## CODE\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\nnamespace EMT{\n\t#define pf printf\n\t#define F(i,a,b) for(register int i=a;i<=b;i++)\n\t#define D(i,a,b) for(register int i=a;i>=b;i--)\n\tinline int read(){int x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();return x*f;}\n\tinline void pi(int x){pf(\"%d\",x);}inline void pn(){pf(\"\\n\");}inline void ps(int a[],int size){F(i,1,size)pi(a[i]);pn();}\n\tint n,m,a[55],b[1100],ans,cnt,ws,tot,pre[1100];\n\tinline bool check(int x,int st){\n\t\tif(!x)return 1;\n\t\tif(pre[x]>tot)return 0;\n\t\tbool fl=0;\n\t\tF(i,st,n){\n\t\t\tif(a[i]>=b[x]){\n\t\t\t\ta[i]-=b[x];tot-=b[x];\n\t\t\t\tif(a[i]<b[1])tot-=a[i];\n\t\t\t\tif(b[x]==b[x-1])fl=check(x-1,i);else fl=check(x-1,1);\n\t\t\t\tif(a[i]<b[1])tot+=a[i];\n\t\t\t\ta[i]+=b[x];tot+=b[x];\n\t\t\t\tif(fl)return 1;\n\t\t\t}\n\t\t}return 0;\n\t}\n\tinline short main(){\n\t\tn=read();F(i,1,n)a[i]=read(),tot+=a[i];std::sort(a+1,a+n+1);\n\t\tm=read();F(i,1,m)b[i]=read();std::sort(b+1,b+m+1);;;;;;\n\t\tif(tot<b[1]){pi(0);return 0;}\n\t\tF(i,1,m){pre[i]=pre[i-1]+b[i];if(pre[i]>tot||b[i]>a[n]){cnt=i-1;break;}}\n\t\tif(!cnt)cnt=m;\n\t\tint l=1,r=cnt,ans=0;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(check(mid,1))l=mid+1,ans=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tpi(ans);\n\t\treturn 0;\n\t}\n}\nsigned main(){return EMT::main();}\n```\n",
        "postTime": 1625819320,
        "uid": 451066,
        "name": "letitdown",
        "ccfLevel": 9,
        "title": "P1528 \u5207\u86cb\u7cd5"
    },
    {
        "content": "# P1528 \u9898\u89e3\n\u8d2a\u5fc3\u662f\u80af\u5b9a\u7684\uff0c\u4e8c\u5206\u7b54\u6848+$dfs$\u5c31\u4e0d\u662f\u90a3\u4e48\u591a\u4eba\u60f3\u5230\u4e86\uff0c\u4f30\u8ba1\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u84dd\u7684\u539f\u56e0\u5427\n## \u9898\u610f\n\u5207\u86cb\u7cd5\u6ee1\u8db3\u6700\u591a\u7684\u4eba\n## \u89e3\u7b54\n\u8d2a\u5fc3\u601d\u60f3\u5f88\u5bb9\u6613\u60f3\u5230\uff0c~~\u4e0d\u8bb2\u4e86~~\u3002\u4f46\u6709\u4e00\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u95ee\u9898\u5c31\u662fcheck\u3002\n\n\u6211\u4eec\u5148\u5047\u8bbecheck\u7684\u51fd\u6570\u5df2\u7ecf\u5199\u597d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u89e3\u51fa\u6700\u4f18\u7b54\u6848\u5462\uff1f\u60f3\u5fc5\u5404\u4f4d\u5df2\u7ecf\u60f3\u5230\u4e86\uff0c$\\large{\u4e8c\u5206\u7b54\u6848}$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5148\u6253\u4e00\u904d\u677f\u5b50\uff1a\n```cpp\n\tvoid binary_search(){\n\t\tint leftbound=0,rightbound=n,ans=0;\n\t\twhile(leftbound<=rightbound){\n\t\t\tint mid=leftbound+(rightbound-leftbound)/2;\n\t\t\tif(valid_next_status(mid)) leftbound=mid+1,ans=mid;\n\t\t\telse rightbound=mid-1;\n\t\t}\n\t}\n```\n\n\u597d\u7684\u90a3\u4e48\u6211\u4eec\u6765~~\u786c\u6de6~~\u5199check\u51fd\u6570\uff0c\u4e0d\u96be\u770b\u51fa\u4e00\u5b9a\u662f$dfs$\u5224\u65ad\u7684\u5427\u3002\uff08\u4f60\u81ea\u5df1\u6a21\u62df\u51e0\u4e0b\u627e\u627e\u611f\u89c9\u4e0d\u5c31\u884c\u4e86\n\n\u597d\u7684\uff0c\u4e00\u4e2a$dfs$\u5199\u597d\u4e86\uff0c\u7136\u540e\u5feb\u4e50\u5730\u4ea4\u4e0a\u53bb\uff0c\u53d1\u73b0$\\huge{\\text{TLE}}$\n![](https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2986019800,1056897466&fm=26&gp=0.jpg)\n\n\u7136\u540e\u907f\u514d\u4e0d\u4e86\u7684\u4f18\u5316\u6765\u4e86\u3002\u3002\u3002  \n1. \u6392\u5e8f\u662f\u80af\u5b9a\u7684\n2. \u524d\u7f00\u548c\u662f\u80af\u5b9a\u7684\n3. **\u6211\u4eec\u8981\u7f29\u5c0f\u4e8c\u5206\u7b54\u6848\u7684\u8303\u56f4**  \n\u5982\u679c\u6240\u6709\u7684\u86cb\u7cd5\u603b\u91cd\u91cf\u52a0\u8d77\u6765\u90fd\u6ca1\u6709\u6240\u6709\u7684\u4eba\u80fd\u5403\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u7528\u82e6\u82e6\u679a\u4e3e\u6240\u6709\u7684\u60c5\u51b5\u4e86\uff0c\u76f4\u63a5\u7f29\u5c0f\u8303\u56f4\uff0c\u4ee3\u7801\u5c31\u662f:\n```cpp\nwhile(prefix[n]>tot)--n;\n```\n4. $dfs$\u526a\u679d\u663e\u7136  \n\u6211\u4eec\u8bbe\u60f3\uff1a\u5982\u679c\u7b2c$i$\u4e2a\u4eba\u548c$i-1$\u4e2a\u4eba\u7684\u5634\u5df4\u4e00\u6837\u5927\uff0c\u90a3\u4e48\u4e0d\u80fd\u6ee1\u8db3$i-1$\u5f53\u7136\u4e5f\u4e0d\u80fd\u6ee1\u8db3$i$\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u526a\u6389\u4e00\u5927\u90e8\u5206\u8ba1\u7b97\uff0c\u4ee5\u81f3\u4e8e$\\huge{\\color{lightgreen}AC}$\n\n\n\u603b\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace cut_cake{\n\tconst int N=2009;\n\tint m,n,a[N],b[N],c[N],prefix[N],rest,tot;\n\tbool judge_valid(int d,int last){\n\t\tif(d<=0) return 1;\n\t\tif(rest+prefix[d]>tot) return 0;\n\t\tfor(int i=last;i<=m;++i)\n\t\t    if(c[i]>=b[d]){\n\t\t    \tc[i]-=b[d];\n\t\t    \tif(c[i]<b[1]) rest+=c[i];\n\t\t    \tif(judge_valid(d-1,b[d]==b[d-1]?i:1)) return 1;\n\t\t    \tif(c[i]<b[1]) rest-=c[i];\n\t\t    \tc[i]+=b[d];\n\t\t\t}\n\t\treturn 0;\n\t}\n\tbool valid_next_status(int mid){\n\t\tfor(int i=1;i<=n;++i) c[i]=a[i];\n\t\trest=0;\n\t\treturn judge_valid(mid,1);\n\t}\n\tvoid binary_search(){\n\t\tint leftbound=0,rightbound=n,ans=0;\n\t\twhile(leftbound<=rightbound){\n\t\t\tint mid=leftbound+(rightbound-leftbound)/2;\n\t\t\tif(valid_next_status(mid)) leftbound=mid+1,ans=mid;\n\t\t\telse rightbound=mid-1;\n\t\t}\n\t}\n\tvoid init_all(){\n\t\tcin>>m;\n\t\tfor(int i=1;i<=m;i++)cin>>a[i],tot+=a[i];\n\t\tcin>>n;\n\t\tfor(int i=1;i<=n;i++)cin>>b[i];\n\t}\n\tvoid sort_ab(){\n\t\tsort(a+1,a+1+m);\n\t\tsort(b+1,b+1+n);\n\t}\n\tvoid solve_first(){\n\t\tfor(int i=1;i<=n;++i)prefix[i]=prefix[i-1]+b[i];\n\t\twhile(prefix[n]>tot)--n;\n\t}\n\tvoid solve_second(){\n\t\tbinary_search();\n\t\tcout<<ans<<endl;\n\t}\n\tint _main(){\n\t\tinit_all();\n\t\tsort_ab();\n\t\tsolve_first();\n\t\tsolve_second();\n\t\treturn 0;\n\t}\n}\nint main(){cut_cake::_main();}\n```",
        "postTime": 1594123682,
        "uid": 291706,
        "name": "GspTools",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "\u9274\u4e8e\u6253\u4e86\u592a\u591a\u6ce8\u91ca\uff0c\u8fd9\u91cc\u8fd9\u7b80\u5355\u8bf4\u4e00\u4e0b\u505a\u6cd5\uff0c\u5982\u679c\u5355\u7eafDFS\u7684\u8bdd\u6837\u4f8b\u6216\u9700\u8981\u75285s\uff0c\u4e00\u90e8\u5206\u4f18\u5316\u53ef\u80fd\u8fc750%\u523070%\uff0c\u53c8\u5bb9\u6613\u63a8\u5f97\u8d2a\u5fc3\uff0cDP\u4e00\u5b9a\u4e0d\u662f\u6b63\u786e\u7684\u505a\u6cd5\uff08\u53cd\u4f8b\u597d\u627e\u7684SO EASY\uff09\u3002AC\u7684\u505a\u6cd5\u53ef\u4ee5\u662f\u4e8c\u5206\u4eba\u6570\uff0c\u4e0d\u65ad\u5730DFS\uff0c\u7136\u540e\u628a\u6240\u6709\u80fd\u60f3\u5230\u7684\u526a\u679d\uff0c\u4ec0\u4e48\u53ef\u884c\u6027\uff0c\u6700\u4f18\u6027\u7b80\u76f4\u90fd\u653e\u4e0a\uff0c\u5361\u5361\u5c31\u80fd\u8fc7\u4e86\u3002\u56e0\u4e3a\u4ee3\u7801\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u597d\u7b97\u4e86\uff0c\u53cd\u6b63\u4e1c\u5361\u897f\u5361\u8fc7\u4e86\u3002\n\n\n\u590d\u5236\u4ee3\u7801\n\n\n\n\n\n```cpp\ntype sz=array[0..2000] of longint;\nvar a,b,sum:sz;\n    n,i,x,y,st,lst,mid,m,summ,ans:longint;\n    flag:boolean;\nprocedure qsort(r,l:longint;var a:sz);\nvar\n     i,j,k:longint;\nbegin\n     i:=r;\n     j:=l;\n     k:=a[(i+j) shr 1];\n     repeat\n          while a[i]<k do inc(i);\n          while a[j]>k do dec(j);\n          if i<=j then begin\n              a[0]:=a[i];\n              a[i]:=a[j];\n              a[j]:=a[0];\n              inc(i);\n              dec(j);\n          end;\n     until i>j;\n     if i<l then qsort(i,l,a);\n     if r<j then qsort(r,j,a);\nend;\n//\u901a\u7528\u5feb\u6392\uff0c\u7531\u5c0f\u5230\u5927\u7684\u987a\u5e8f\nprocedure dfs(beg,k:longint);\n//b\u6570\u7ec4\u662f\u6392\u597d\u5e8f\u7684\uff0cbeg\u8868\u793a\u5f53\u524d\u662f\u4ece\u7b2c\u51e0\u4e2a\u86cb\u7cd5\u5f00\u59cb\u7684\nvar\n     i:longint;\nbegin\n     if k=0 then \n        begin\n            flag:=true;\n            exit;\n        end;\n     if summ+sum[mid]>ans then exit;\n     //\u4f18\u5316\uff0c\u5982\u679c\u5f53\u524d\u5408\u6cd5\u7684\u86cb\u7cd5\u6ca1\u6709\u7684\u503c\u52a0\u4e0a\u6b64\u523b\u5904\u7406\u4eba\u7684\u86cb\u7cd5\u6743\u503c\u8981\u6bd4\u603b\u6743\u503c\u8981\u5927\uff0c\u5219\u9000\u51fa\u3002\n     for i:=beg to n do \n        if a[i]>=b[k] then \n            begin\n                a[i]:=a[i]-b[k];\n                if a[i]<b[1] then inc(summ,a[i]);\n                //summ\u8868\u793a\u6ca1\u6709\u7528\u7684\u86cb\u7cd5\u6570\u91cf\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u4eba\u90fd\u65e0\u6cd5\u6ee1\u8db3\u90a3\u4e48\u86cb\u7cd5a[i]\u7b49\u4e8e\u6ca1\u7528\n                if b[k]=b[k-1] then dfs(i,k-1) else dfs(st,k-1);\n                //\u5982\u679cb[k]=b[k+1],\u90a3\u4e48\u53ea\u6709i\u5230n\u8fd9\u4e9b\u86cb\u7cd5\u53ef\u53d6(\u60f3\u60f3\u8fd9\u662f\u4e3a\u4ec0\u4e48)\n                if a[i]<b[1] then dec(summ,a[i]);\n                a[i]:=a[i]+b[k];\n                //\u4e24\u884c\u56de\u6eaf\n                if flag then exit;\n            end;\nend;\nbegin\n     readln(n);\n     for i:=1 to n do readln(a[i]);\n     readln(m);\n     for i:=1 to m do readln(b[i]);\n     qsort(1,n,a);\n     qsort(1,m,b);\n     st:=1;\n     while (a[st]<b[1]) and (st<n) do inc(st);    \n     //\u628a\u6ca1\u7528\u7684\u86cb\u7cd5\u53bb\u6389\uff0c\u5904\u7406\u540esum\u662f\u80fd\u7528\u7684\u86cb\u7cd5\n     for i:=st to n do inc(ans,a[i]);\n     lst:=m;\n     while (b[lst]>a[n]) and (lst>1) do dec(lst); \n     //\u628a\u4e0d\u80fd\u6ee1\u8db3\u7684\u4eba\u53bb\u6389\uff0c\u73b0\u5728\u53ea\u9700\u8981\u6ee1\u8db3ss\u4e2a\u4eba\u5c31\u884c\u4e86\n     for lst:=1 to lst+1 do \n        begin\n            sum[lst]:=sum[lst-1]+b[lst];\n            //sum[i]\u8868\u793a\u5230i\u86cb\u7cd5\u65f6\u6240\u6709\u86cb\u7cd5\u7684\u603b\u6743\u503c\uff0c\u6240\u6709\u86cb\u7cd5\u52a0\u8d77\u6765\u90fd\u65e0\u6cd5\u6ee1\u8db3\u53ef\u4ee5\u7684\u4eba\u90a3\u4e48\u9000\u51fa\n            if sum[lst]>ans then break;\n        end;\n     dec(lst);//\u4ece\u4e0a\u5c42\u5faa\u73af\u7684\u5f71\u50cf\u4e2d\u9000\u51fa\u6765\n     x:=0;\n     y:=lst;\n     while x<y do \n     //\u9700\u8981\u6ee1\u8db3\u7684\u4eba\u6570\u5c0f\u4e8e\u6240\u6709\u7684\u4eba\u6570\n        begin\n            mid:=(x+y+1) shr 1;\n            //\u4e8c\u5206\u67e5\u627e\u7684\u662f\u4eba\uff0c\u4f4d\u8fd0\u7b97:shr 1==>div 2;\n            flag:=false;\n            summ:=0;\n            dfs(st,mid);\n            if flag then x:=mid else y:=mid-1;\n        end;\n     writeln(x);\nend.\n```",
        "postTime": 1439372105,
        "uid": 6906,
        "name": "gryql",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    },
    {
        "content": "[P1528](https://www.luogu.org/problemnew/show/P1528)\n\n~~\uff08\u600e\u4e48\u8bf4\u5462\uff0c\u8fd9\u9898\u7684\u6b63\u89e3\u6211\u4e0d\u4f1a\u8bf6\uff09~~\n\n\u7ed9\u60f3\u4e0d\u5230\u4e8c\u5206\u7684\u540c\u5fd7\u63d0\u4f9b\u4e00\u4e2a\u601d\u8def\uff0c\u5c31\u662fdfs\u66b4\u641c\uff0c\u5e76\u4e14\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n- \u5c06\u4eba\u53e3\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5224\u65ad\u5982\u679c\u5f53\u524d\u8fd9\u5757\u86cb\u7cd5\u4e0d\u80fd\u6ee1\u8db3\u5f53\u524d\u7684\u4eba\u53e3\u5927\u5c0f\uff0c\u5219\u540e\u9762\u7684\u4eba\u53e3\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u4e0d\u4e86\uff0c\u5c31\u8df3\u5230\u4e0b\u4e00\u5757\u86cb\u7cd5\n\n- \u5982\u679c\u5f53\u524d\u5df2\u7ecf\u5f97\u5230\u6b63\u89e3\uff0c\u5219\u540e\u9762\u7684\u641c\u7d22\u5c31\u662f\u591a\u4f59\u7684\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u675f\u7a0b\u5e8f\uff0c\uff08\u597d\u5427\u5c31\u662f\u5361\u65f6\uff09\uff0c\u4e0d\u8fc7\u5f97\u5230\u6b63\u89e3\u662f\u6211\u4eec\u63a8\u6d4b\u51fa\u6765\u7684\uff0c\u56e0\u6b64\u5f53\u8f93\u51fa\u7684\u65f6\u5019\u53ef\u80fd\u662f\u6b63\u89e3\u4e5f\u53ef\u80fd\u4e0d\u662f\uff0c\u6240\u4ee5\u4f1a\u6709\u51e0\u4e2a\u70b9WA\n\n\u7ecf\u8fc7\u4e0a\u9762\u7684\u64cd\u4f5c\u52a0\u4e0adfs\u662f\u80fd\u8fc79\u4e2a\u70b9\u7684\u3002[\u4f20\u9001\u95e8](https://www.luogu.org/record/show?rid=8569037)",
        "postTime": 1534385707,
        "uid": 51308,
        "name": "Jith_2004",
        "ccfLevel": 7,
        "title": "20180816"
    },
    {
        "content": "\u5c06\u5634\u6392\u5e8f\u548c\u86cb\u7cd5\u6392\u5e8f\n\n\u4ece\u5c0f\u5230\u5927\u770b\u86cb\u7cd5\u80fd\u88c5\u7684\u6700\u591a\u5634\u7684\u6570\u5b57(\u5728\u4fdd\u8bc1\u6700\u7684\u6570\u91cf\u6700\u591a\u540c\u65f6\u4e5f\u4fdd\u8bc1\u5634\u7684\u5927\u5c0f\u603b\u548c\u6700\u5927)\n\n\u4e8c\u5206\u7b54\u6848\u6ce8\u610f\u4e0a\u4e0b\u754c\n\n\n\n\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define maxn 2005\nusing namespace std;\nint mid;\nint n,m;\nint mouth[maxn],cake[maxn];\nint tot=0,space;\nint sum[maxn],fcake[maxn];\nint cmp(const void *a, const void *b)\n{\n    return(*(int *)a-*(int *)b);\n}\nbool dfs(int deep,int pos)\n{\n    if(deep<=0)return 1;\n    if(tot-space<sum[mid])return 0;//\u00bc\u00f4\u00d6\u00a6\n    //dfs\u00ca\u00b1\u00bc\u00c7\u00c2\u00bc\u00b5\u00b1\u00c7\u00b0\u00c0\u00cb\u00b7\u00d1\u00b5\u00c4\u00b5\u00b0\u00b8\u00e2\u00ba\u00cd\n    //\u00d7\u00dc\u00b5\u00b0\u00b8\u00e2\u00c1\u00bf-\u00b5\u00b1\u00c7\u00b0\u00c0\u00cb\u00b7\u00d1\u00b5\u00c4\u00b5\u00b0\u00b8\u00e2\u00ba\u00cd<\u00b5\u00b1\u00c7\u00b0\u00b6\u00fe\u00b7\u00d6\u00b5\u00c4\u00d2\u00aa\u00c2\u00fa\u00d7\u00e3\u00b5\u00c4\u00d7\u00ec\u00b4\u00f3\u00d0\u00a1\u00ba\u00cd\n    //\u00be\u00cd\u00cb\u00b5\u00c3\u00f7\u00ce\u00de\u00b7\u00a8\u00c2\u00fa\u00d7\u00e3\u00a3\u00ac\u00d4\u00f2\u00cd\u00cb\u00b3\u00f6\u00a1\u00a3\n    for(int i=pos;i<=n;++i)\n    {\n        if(fcake[i]>=mouth[deep])\n        {\n            fcake[i]-=mouth[deep];\n            if(fcake[i]<mouth[1]) space+=fcake[i];\n            if(mouth[deep]==mouth[deep-1]) //\u00bc\u00f4\u00d6\u00a6\n            //dfs\u00ca\u00b1\u00c8\u00f4\u00b5\u00b1\u00c7\u00b0\u00d7\u00ec\u00b0\u00cd\u00b4\u00f3\u00d0\u00a1\u00d3\u00eb\u00cf\u00c2\u00d2\u00bb\u00b8\u00f6\u00cf\u00e0\u00cd\u00ac\u00a3\u00ac\u00d4\u00f2\u00cf\u00c2\u00d2\u00bb\u00b8\u00f6\u00ce\u00de\u00d0\u00e8\u00b4\u00d3\u00b5\u00b0\u00b8\u00e21\u00bf\u00aa\u00ca\u00bc\u00c3\u00b6\u00be\u00d9\n            //\u00d6\u00b1\u00bd\u00d3\u00b4\u00d3\u00b5\u00b1\u00c7\u00b0\u00d7\u00ec\u00b0\u00cd\u00c3\u00b6\u00be\u00d9\u00b5\u00c4\u00b5\u00b0\u00b8\u00e2i\u00bf\u00aa\u00ca\u00bc\n               {\n                  if(dfs(deep-1,i)) return 1;\n               }\n               else if(dfs(deep-1,1)) return 1;\n               if(fcake[i]<mouth[1]) space-=fcake[i];\n               fcake[i]+=mouth[deep];\n        }\n    }\n    return 0;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&cake[i]);\n        tot+=cake[i];    \n    }\n    cin>>m;\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d\",&mouth[i]);\n    }\n     qsort(cake+1,n,sizeof(int),cmp);\n    qsort(mouth+1,m,sizeof(int),cmp);\n    sum[0]=0;\n    for(int i=1;i<=m;++i)sum[i]=sum[i-1]+mouth[i];\n    while(sum[m]>tot)--m;//\u00bc\u00f4\u00d6\u00a6\n    //\u00d2\u00d4\u00d7\u00ee\u00d0\u00a1\u00b5\u00c4\u00d7\u00ec\u00c0\u00db\u00bc\u00d3\u00a3\u00ac\u00d3\u00eb\u00b5\u00b0\u00b8\u00e2\u00d7\u00dc\u00ba\u00cd\u00b1\u00c8\u00bd\u00cf\u00a3\u00ac\u00d5\u00d2\u00b5\u00bd\u00d7\u00ee\u00b6\u00e0\u00c4\u00dc\u00c2\u00fa\u00d7\u00e3\u00b5\u00c4\u00d7\u00ec\u00ca\u00fd\u00a3\u00ac\u00be\u00cd\u00ca\u00c7\u00b6\u00fe\u00b7\u00d6\u00c9\u00cf\u00b1\u00df\u00bd\u00e7\n    int l=0,r=m;\n    while(l<=r)\n    {\n        mid=l+r>>1;    \n        for(int i=1;i<=n;++i)fcake[i]=cake[i];\n        space=0;\n        if(dfs(mid,1))l=mid+1;\n        else r=mid-1;        \n    }\n    cout<<l-1;\n    puts(\"\");\n    return 0;\n}\n```",
        "postTime": 1479180318,
        "uid": 7522,
        "name": "Daisy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1528 \u3010\u5207\u86cb\u7cd5\u3011"
    }
]