[
    {
        "content": "### \u5206\u6790\uff1a\n\n\u524d\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u533a\u95f4\u52a0 \n2. \u533a\u95f4\u4e58 \n3. \u533a\u95f4\u6c42\u548c\n\n\u8fd9\u5f88\u660e\u663e\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u4e0d\u4f1a\u4ee5\u4e0a\u64cd\u4f5c\u7684\u8bf7\u5148\u5b8c\u6210 [\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2](https://www.luogu.com.cn/problem/P3373)\u3002\n\u7136\u540e\u6765\u5206\u6790\u64cd\u4f5c \n\n4. A \u6570\u5217\u56de\u6eaf\u5230\u4e0a\u4e00\u6b21 4 \u64cd\u4f5c\u524d\uff08\u5982\u679c\u4e0d\u5b58\u5728\u4e0a\u4e00\u6b21\u5219\u56de\u6eaf\u5230\u521d\u59cb\u72b6\u6001\uff09\uff0c\u540c\u65f6\u5012\u5e8f\u6267\u884c\u4e0a\u4e00\u6b21\u56de\u6eaf\u540e\u5230\u56de\u6eaf\u524d\u7684\u6240\u6709 1 \u64cd\u4f5c\u548c 2 \u64cd\u4f5c\u3002\n\n\u8fd9\u65f6\u5019\u660e\u663e\u9700\u8981\u7ef4\u62a4\u591a\u4e2a\u7ebf\u6bb5\u6811\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff1f\uff0cNO!\u3002\u8fd9\u9053\u9898\u53ea\u9700\u8981\u7528\u5230\u4e0a\u4e00\u6b21 4 \u64cd\u4f5c\u524d\u7684\u7248\u672c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\u4ea4\u66ff\u4f7f\u7528\u5c31\u8db3\u591f\u4e86\uff0c\u6bcf\u6b21\u9047\u5230 4 \u64cd\u4f5c\uff0c\u4ea4\u6362\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5bf9\u65b0\u6362\u6765\u7684\u7ebf\u6bb5\u6811\u53cd\u5411\u6267\u884c\u524d\u9762\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5728\u7528\u8fd9\u68f5\u6811\u7ee7\u7eed\u6b63\u5e8f\u6267\u884c\u540e\u9762\u7684\u64cd\u4f5c\uff0c\u4e00\u76f4\u4ea4\u66ff\u5373\u53ef\u3002\n\n \u7136\u800c\uff0c\u4f60\u4ee5\u4e3a\u8fd9\u9053\u9898\u5c31\u8fd9\u6837\u8f7b\u677e\u7684 AC \u4e86\u5417\uff0c\u4e0d\uff0c\u717d\u51c9\u7684\u51fa\u9898\u4eba\u628a\u540e 50% \u7684\u7a7a\u95f4\u5f00\u6210\u4e86 **45MB**\uff0c\u8fd9\u53ef\u662f\u8981\u5f00 4 \u500d\u7a7a\u95f4\u7684\u7ebf\u6bb5\u6811\u554a\uff0c\u559c\u6b22\u5b58\u5de6\u53f3\u7aef\u70b9\u7684\u670b\u53cb\u4eec\u6ce8\u610f\u4e86\uff0c\u8fd9\u9898**\u4e0d\u80fd\u5b58\u5de6\u53f3\u7aef\u70b9**\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u6765\u8282\u7701\u7a7a\u95f4\u3002\u5e76\u4e14\u8fd9\u9053\u9898\u9700\u8981\u5f00 **long long**\uff0c\u4f46\u662f\u5fc5\u987b\u5728\u8fd0\u7b97\u65f6\u5f3a\u5236\u8f6c\u6362\uff0c\u4e0d\u7136\u8fd8\u4f1a MLE\u3002\u4e00\u5b9a\u8981\u52a0\u4e0a\u5feb\u8bfb\uff0c\u80fd\u8282\u7701\u5f88\u591a\u65f6\u95f4\uff0c\u8fd8\u6709\u5c31\u662f\u53d6\u6a21\u8fd0\u7b97\u4e0d\u8981\u592a\u591a\uff0c\u5426\u5219\u4f1a\u5f88\u6162\u3002\n\n### AC Code:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+1;\nstruct a2\n{\n\tint a,l,r,x;\n}o[N];\nstruct a1\n{\n\tint a,j,c;\n}x[2][N<<2];\nint d[N],p1=0,tree=0,mod=19260817;\ninline void build(int l,int r,int p,int q)//\u5efa\u6811\n{\n\tx[q][p].c=1;x[q][p].j=0;\n\tx[q^1][p].c=1;x[q^1][p].j=0;\n\tif(l==r)\n\t{\n\t\tx[q][p].a=d[l];\n\t\tx[q^1][p].a=d[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,p<<1,q);\n\tbuild(mid+1,r,p<<1|1,q);\n\tx[q][p].a=(x[q][p<<1].a+x[q][p<<1|1].a);\n\tx[q^1][p].a=(x[q^1][p<<1].a+x[q^1][p<<1|1].a);\n}\ninline void pushdown(int p,int q,int s,int t)//\u61d2\u6807\u8bb0\u4e0b\u4f20\uff0c\u6ce8\u610f\u7ec6\u8282\u548c\u5148\u540e\u987a\u5e8f\n{\n\tif(x[q][p].c!=1)\n\t{\n\t\tx[q][p<<1].c=1ll*(x[q][p].c*1ll*x[q][p<<1].c)%mod;\n\t\tx[q][p<<1|1].c=1ll*(x[q][p].c*1ll*x[q][p<<1|1].c)%mod;\n\t\tx[q][p<<1].j=1ll*(x[q][p].c*1ll*x[q][p<<1].j)%mod;\n\t\tx[q][p<<1|1].j=1ll*(x[q][p].c*1ll*x[q][p<<1|1].j)%mod;\n\t\tx[q][p<<1].a=1ll*(x[q][p].c*1ll*x[q][p<<1].a)%mod;\n\t\tx[q][p<<1|1].a=1ll*(x[q][p].c*1ll*x[q][p<<1|1].a)%mod;\n\t\tx[q][p].c=1;\n\t}\n\tif(x[q][p].j!=0)\n\t{\n\t\tint mid=(s+t)>>1;\n\t\tx[q][p<<1].j=1ll*(x[q][p].j+1ll*x[q][p<<1].j);\n\t\tx[q][p<<1|1].j=1ll*(x[q][p].j+1ll*x[q][p<<1|1].j);\n\t\tx[q][p<<1].a=1ll*((mid-s+1)*1ll*x[q][p].j+x[q][p<<1].a)%mod;\n\t\tx[q][p<<1|1].a=1ll*((t-mid)*1ll*x[q][p].j+x[q][p<<1|1].a)%mod;\n\t\tx[q][p].j=0;\n\t}\n}\ninline void chen(int s,int t,int l,int r,int p,int q,int k)//\u533a\u95f4\u4e58\n{\n\tif(s>=l&&t<=r)\n\t{\n\t   x[q][p].a=1ll*(k*1ll*x[q][p].a)%mod;\n\t   x[q][p].j=1ll*(k*1ll*x[q][p].j)%mod;\n\t   x[q][p].c=1ll*(k*1ll*x[q][p].c)%mod;\n\t   return ;\n\t}\n\tpushdown(p,q,s,t);\n\tint mid=(s+t)>>1;\n\tif(mid>=l)chen(s,mid,l,r,p<<1,q,k);\n\tif(mid<r)chen(mid+1,t,l,r,p<<1|1,q,k);\n\tx[q][p].a=1ll*(x[q][p<<1].a+x[q][p<<1|1].a);\n}\ninline void jia(int s,int t,int l,int r,int p,int q,int k)//\u533a\u95f4\u52a0\n{\n\tif(s>=l&&t<=r)\n\t{\n\t   x[q][p].a=(1ll*(t-s+1)*k+x[q][p].a)%mod;\n\t   x[q][p].j=(1ll*k+x[q][p].j);\n\t   return ;\n\t}\n\tpushdown(p,q,s,t);\n\tint mid=(s+t)>>1;\n\tif(mid>=l)jia(s,mid,l,r,p<<1,q,k);\n\tif(mid<r)jia(mid+1,t,l,r,p<<1|1,q,k);\n\tx[q][p].a=1ll*(x[q][p<<1].a+x[q][p<<1|1].a);\n}\ninline int getsum(int s,int t,int l,int r,int p,int q)//\u533a\u95f4\u6c42\u548c\n{\n\tif(s>=l&&t<=r)\n\t{\n\t   return x[q][p].a;\n\t}\n\tpushdown(p,q,s,t);\n\tint ans=0;\n\tint mid=(s+t)>>1;\n\tif(mid>=l)ans=1ll*(ans+getsum(s,mid,l,r,p<<1,q))%mod;\n\tif(mid<r)ans=1ll*(ans+getsum(mid+1,t,l,r,p<<1|1,q))%mod;\n\treturn ans;\n}\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=getchar();}\n\twhile (ch>='0'&&ch<='9'){x=(x << 3) + (x << 1) +ch-48;ch=getchar();}//\u4e8c\u8fdb\u5236\u4f18\u5316\u5feb\u8bfb\n\treturn x*f;\n\t\n}\nint main()\n{\n\tint n,m,mod;\n\tn=read();m=read();\n\tfor(register int q=1;q<=n;q++)\n\t{\n\t\td[q]=read();\n\t}\n\tbuild(1,n,1,0);\n\tfor(register int q=1;q<=m;q++)\n\t{\n\t\tint a,l,r,x;\n\t\ta=read();\n\t\tif(a==1)\n\t\t{\n\t\t\tl=read();r=read();x=read();\n\t\t\to[++p1].a=a;\n\t\t\to[p1].l=l;\n\t\t\to[p1].r=r;\n\t\t\to[p1].x=x;\n\t\t\tjia(1,n,l,r,1,tree,x);\n\t\t}\n\t\telse if(a==2)\n\t\t{\n\t\t\tl=read();r=read();x=read();\n\t\t\to[++p1].a=a;\n\t\t\to[p1].l=l;\n\t\t\to[p1].r=r;\n\t\t\to[p1].x=x;\n\t\t\tchen(1,n,l,r,1,tree,x);\n\t\t}\n\t\telse if(a==3)\n\t\t{\n\t\t\tl=read();r=read();\n\t\t\tprintf(\"%d\\n\",getsum(1,n,l,r,1,tree));\n\t\t}\n\t\telse //\u9047\u52304\u64cd\u4f5c\u4ea4\u6362\u4e24\u68f5\u6811\uff0c\u540c\u65f6\u5012\u5e8f\u6267\u884c\n\t\t{\n\t\t\ttree=tree^1;\n\t\t\tfor(register int i=p1;i>=1;i--)\n\t\t\t{\n\t\t\t\tint l=o[i].l,r=o[i].r,x=o[i].x;\n\t\t\t\tif(o[i].a==1)\n\t\t\t\t{\n\t\t\t\t\tjia(1,n,l,r,1,tree,x);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tchen(1,n,l,r,1,tree,x);\n\t\t\t\t}\n\t\t\t}\n\t\t\tp1=0;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1665741148,
        "uid": 649108,
        "name": "Shanganze",
        "ccfLevel": 5,
        "title": "P8310"
    },
    {
        "content": "# P8310 \u3008 TREE\u306eOI 2022 Spring \u3009Essential Operations\u9898\u89e3\n\n## \u524d\u8a00\uff1a\n\n\u7ebf\u6bb5\u6811\u7684\u5c0f\u5c0f\u53d8\u901a\u9898\uff0c\u4ee5\u53ca\u5361\u70b9\u7a7a\u95f4\u3002\n\n## \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u5e8f\u5217\u548c\u4e00\u5b9a\u64cd\u4f5c\uff0c\u5206\u522b\u4e3a\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u4e58\uff0c\u67e5\u8be2\u533a\u95f4\u548c\uff0c\u4ee5\u53ca\u56de\u6eaf\u64cd\u4f5c\u3002\n\n\u5565\u610f\u601d\uff0c\u5c31\u662f\u8bf4\u4ece\u5f53\u524d\u7684 4 \u4e0e\u4e0a\u6b21\u7684 4\uff0c\u7528\u4e0a\u6b21\u7684 4 \u7684\u5e8f\u5217\uff0c\u4ece\u5f53\u524d\u7684 4 \u5f00\u59cb\uff0c\u5012\u7740\u6267\u884c\u64cd\u4f5c\u76f4\u9053\u9047\u5230\u4e0a\u6b21\u7684 4 \u64cd\u4f5c\u3002\n\n## \u601d\u8def\uff1a\n\n\u524d\u9762\u4e09\u4e2a\u64cd\u4f5c\u5c31\u4e0d\u8bf4\u4e86\uff0c\u4e0d\u4f1a\u7684\u53c2\u8003[\u7ebf\u6bb5\u68112](https://www.luogu.com.cn/problem/P3373)\u3002\n\n\u8bb2\u8bb2\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u4e4b\u524d\u7684\u5e8f\u5217\uff0c\u4e00\u5171\u6709\u4e24\u79cd\u601d\u8def\uff1a\n\n1.\u8fdb\u884c\u53cd\u64cd\u4f5c\uff0c\u5c31\u662f\u5c06\u4e4b\u524d\u6240\u6267\u884c\u7684\u64cd\u4f5c\u5168\u90e8\u53cd\u5411\u6267\u884c\u4e00\u904d\u53d8\u6210\u539f\u5148\u7684\u5e8f\u5217\u3002\n\n2.\u91cd\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u660e\u663e\u6cd5 1 \u7e41\u7410\u590d\u6742\uff0c\u5e76\u4e14\u5e38\u6570\u4f1a\u6781\u5927\u3002\n\n\u6cd5 2 \u73b0\u5b9e\u70b9\u5e76\u4e14\u597d\u5b9e\u73b0\u3002\n\n\u5177\u4f53\u5c31\u662f\u50cf\u8d70\u811a\u5370\u4e00\u6837\uff0c\u5148\u628a\u4e24\u68f5\u6811\u8d4b\u4e88\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5f53\u6211\u4eec\u6ca1\u9047\u5230 4 \u64cd\u4f5c\u65f6\u5c31\u5bf9\u5176\u4e2d\u4e00\u4e2a\u6811\u8fdb\u884c\u6b63\u5e38\u52a0\u51cf\uff0c\u9047\u5230 4 \u7684\u65f6\u5019\uff0c\u5c31\u8c03\u7528\u53e6\u4e00\u68f5\u6811\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u8fd9\u68f5\u6811\u8fd8\u662f\u5728\u4e0a\u4e00\u4e2a 4 \u64cd\u4f5c\u524d\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5012\u5e8f\u8c03\u7528\u4e00\u756a\u64cd\u4f5c\u8fdb\u884c\u4fee\u6539\uff0c\u5728\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c\u4e0b\u4e00\u6b21\u64cd\u4f5c\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a 4\u3002\n\n\u5f53\u7136\u65e2\u7136\u8981\u53cd\u590d\u8c03\u7528\u64cd\u4f5c\uff0c\u90a3\u4e48\u660e\u663e\u7684\u64cd\u4f5c\u9700\u8981\u79bb\u7ebf\u4e00\u624b\u3002\n\n\u5927\u4f53\u601d\u8def\u662f\u8fd9\u6837\uff0c\u5b9e\u73b0\u5176\u5b9e\u4e5f\u4e0d\u96be\u3002\n\n## \u7ec6\u8282\uff1a\n\n\u53ef\u4ee5\u8bf4\u5361\u7a7a\u95f4\u5c31\u633a\u6076\u52a3\u3002\n\n\u5f53\u7136\u53ef\u80fd\u662f\u6211\u7684\u7ebf\u6bb5\u6811\u592a\u8fc7\u4e8e\u6076\u81ed\u6216\u8005\u8bf4 rp \u4e0d\u591f\u3002\n\n\u5982\u679c\u7528\u7ed3\u6784\u4f53\u5199\u7ebf\u6bb5\u6811\uff0c\u5343\u4e07\u4e0d\u8981\u628a\u5de6\u53f3\u7aef\u70b9\u4e5f\u8bb0\u5f55\u5230\u7ed3\u6784\u4f53\u4e2d\u3002\n\n\u82e5\u662f\u5f00 ll \u7684\u4eba\uff0c\u5343\u4e07\u4e0d\u8981\u7528 ll \u5b9a\u4e49\u53d8\u91cf\uff0c\u4e00\u5b9a\u8981\u5728\u64cd\u4f5c\u65f6\u5f3a\u884c\u8f6c\u6210 ll\u3002\n\n\u8fd9\u8fb9\u6211\u8fde\u5f3a\u8f6c ll \u90fd\u641e\u4e0d\u6e05\u695a\uff0c\u8fd8\u662f [flysnow](https://www.luogu.com.cn/user/238445) \u5927\u4f6c\u5e2e\u5fd9\u7684\uff0c\u5728\u6b64\u819c\u62dc\u548c\u611f\u8c22\u4e00\u624b\u3002\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n\nconst int N = 5e5 + 7;\nconst int M = 1e5 + 7;\nconst int mod = 19260817;\n\nusing namespace std;\n\nint n, m;\n\nint pos[N];\n\nstruct node {\n\tint op, l, r;\n\tint x;\n} a[M];\n\nstruct SegmentTree {\n\tint mul, add;\n\tint sum;\n} tree[N << 2 | 1][2];\n\nstruct SeTr {\n\tinline void push_up(int dep, int i) {\n\t\ttree[dep][i].sum = 1ll * (tree[dep << 1][i].sum + tree[dep << 1 | 1][i].sum) % mod;\n\t}\n\t\n\tinline void push_down(int dep, int i, int l, int r) {\n\t\tint mid = l + r >> 1;\n\t\t\n\t\tif (tree[dep][i].mul != 1) {\n\t\t\ttree[dep << 1][i].mul = (1ll * tree[dep << 1][i].mul * 1ll * tree[dep][i].mul) % mod;\n\t\t\ttree[dep << 1][i].add = (1ll * tree[dep << 1][i].add * 1ll * tree[dep][i].mul) % mod;\n\t\t\ttree[dep << 1][i].sum = (1ll * tree[dep << 1][i].sum * 1ll * tree[dep][i].mul) % mod;\n\t\t\t\n\t\t\ttree[dep << 1 | 1][i].mul = (1ll * tree[dep << 1 | 1][i].mul * 1ll * tree[dep][i].mul) % mod;\n\t\t\ttree[dep << 1 | 1][i].add = (1ll * tree[dep << 1 | 1][i].add * 1ll * tree[dep][i].mul) % mod;\n\t\t\ttree[dep << 1 | 1][i].sum = (1ll * tree[dep << 1 | 1][i].sum * 1ll * tree[dep][i].mul) % mod;\n\t\t\t\n\t\t\ttree[dep][i].mul = 1; \n\t\t}\n\t\t\n\t\tif (tree[dep][i].add) {\n\t\t\ttree[dep << 1][i].add = (1ll * (1ll * tree[dep << 1][i].add + 1ll * tree[dep][i].add)) % mod;\n\t\t\ttree[dep << 1][i].sum = (1ll * (1ll * tree[dep << 1][i].sum + 1ll * tree[dep][i].add * 1ll * (mid - l + 1))) % mod;\n\t\t\t\n\t\t\ttree[dep << 1 | 1][i].add = (1ll * (1ll * tree[dep << 1 | 1][i].add + 1ll * tree[dep][i].add)) % mod;\n\t\t\ttree[dep << 1 | 1][i].sum = (1ll * (1ll * tree[dep << 1 | 1][i].sum + 1ll * tree[dep][i].add * 1ll * (r - mid))) % mod;\n\t\t\t\n\t\t\ttree[dep][i].add = 0;\n\t\t}\n\t\t\n\t\treturn ;\n\t}\n\t\n\tvoid build(int dep, int l, int r, int i) {\n\t\ttree[dep][i].mul = 1;\n\t\t\n\t\tif (l == r) {\n\t\t\ttree[dep][i].sum = (1ll * pos[l]) % mod;\n\t\t\treturn ;\n\t\t}\n\t\t\n\t\tint mid = l + r >> 1;\n\t\t\n\t\tbuild(dep << 1, l, mid, i);\n\t\tbuild(dep << 1 | 1, mid + 1, r, i);\n\t\t\n\t\tpush_up(dep, i);\n\t}\n\t\n\tvoid update_add(int dep, int x, int y, int val, int i, int l, int r) {\n\t\tif (x <= l && y >= r) {\n\t\t\ttree[dep][i].add = (1ll * (1ll * tree[dep][i].add + 1ll * val)) % mod;\n\t\t\ttree[dep][i].sum = (1ll * (1ll * tree[dep][i].sum + 1ll * (r - l + 1) * 1ll * val)) % mod;\n\t\t\t\n\t\t\treturn ;\n\t\t}\n\t\t\n\t\tpush_down(dep, i, l, r);\n\t\t\n\t\tint mid = l + r >> 1;\n\t\t\n\t\tif (x <= mid) update_add(dep << 1, x, y, val, i, l, mid);\n\t\tif (y > mid) update_add(dep << 1 | 1, x, y, val, i, mid + 1 ,r);\n\t\t\n\t\tpush_up(dep, i);\n\t}\n\t\n\tvoid update_mul(int dep, int x, int y, int val, int i, int l, int r) {\n\t\tif (x <= l && y >= r) {\n\t\t\ttree[dep][i].mul = (1ll * tree[dep][i].mul * 1ll * val) % mod;\n\t\t\ttree[dep][i].sum = (1ll * tree[dep][i].sum * 1ll * val) % mod;\n\t\t\ttree[dep][i].add = (1ll * tree[dep][i].add * 1ll * val) % mod;\n\t\t\t\n\t\t\treturn ;\n\t\t} \n\t\t\n\t\tpush_down(dep, i, l, r);\n\t\t\n\t\tint mid = l + r >> 1;\n\t\t\n\t\tif (x <= mid) update_mul(dep << 1, x, y, val, i, l, mid);\n\t\tif (y > mid) update_mul(dep << 1 | 1, x, y, val, i, mid + 1, r);\n\t\t\n\t\tpush_up(dep, i);\n\t}\n\t\n\tint query(int dep, int x, int y, int i, int l, int r) {\n\t\tint res = 0;\n\t\t\n\t\tif (x <= l && y >= r)\n\t\t\treturn (1ll * tree[dep][i].sum) % mod;\n\t\t\n\t\tpush_down(dep, i, l, r);\n\t\t\n\t\tint mid = l + r >> 1;\n\t\t\n\t\tif (x <= mid) res = (1ll * (1ll * res + 1ll * query(dep << 1, x, y, i, l, mid))) % mod;\n\t\tif (y > mid) res = (1ll * (1ll * res + 1ll * query(dep << 1 | 1, x, y, i, mid + 1, r))) % mod;\n\t\t\n\t\treturn res;\n\t}\n} segment;\n\n\ninline void work(int i, int cur) {\n\tif (a[i].op == 1)\n\t\tsegment.update_add(1, a[i].l, a[i].r, a[i].x, cur, 1, n);\n\tif (a[i].op == 2)\n\t\tsegment.update_mul(1, a[i].l, a[i].r, a[i].x, cur, 1, n);\n\tif (a[i].op == 3)\n\t\tprintf(\"%lld\\n\", (1ll * segment.query(1, a[i].l, a[i].r, cur, 1, n))); \n}\n\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\t\n\tfor (int i = 1; i <= n; i ++)\n\t\tscanf(\"%d\", &pos[i]);\n\t\n\tsegment.build(1, 1, n, 0);\n\tsegment.build(1, 1, n, 1);\n\t\n\tfor (int i = 1; i <= m; i ++) {\n\t\tscanf(\"%d\", &a[i].op);\n\t\t\n\t\tif (a[i].op == 1 || a[i].op == 2)\n\t\t\tscanf(\"%d %d %d\", &a[i].l, &a[i].r, &a[i].x);\n\t\telse if (a[i].op == 3)\n\t\t\tscanf(\"%d %d\", &a[i].l, &a[i].r);\n\t\telse continue;\n\t}\n\t\n\tint cur = 0;\n\t\n\tfor (int i = 1; i <= m; i ++) {\n\t\tif (a[i].op == 4) {\n\t\t\tcur ^= 1;\n\t\t\t\n\t\t\tfor (int j = i - 1; j >= 1; j --) {\n\t\t\t\tif (a[j].op == 4) break;\n\t\t\t\tif (a[j].op == 3) continue;\n\t\t\t\t\n\t\t\t\twork(j, cur); \n\t\t\t}\n\t\t} else work(i, cur);\n\t}\n\t\n\treturn 0;\n}\n```\n\n$Atlantis.$",
        "postTime": 1653796132,
        "uid": 328170,
        "name": "Kalium",
        "ccfLevel": 0,
        "title": "P8310 \u3008 TREE\u306eOI 2022 Spring \u3009Essential Operations\u9898\u89e3"
    },
    {
        "content": "\u9898\u76ee\u4f20\u9001\u95e8\uff1a[\u3008TREE \u306e OI\u00b7R1\u3009Essential Operations](https://www.luogu.com.cn/problem/P8310)\n\n[\u5728 d0j1a_1701 \u7684\u535a\u5ba2\u4e0a\u67e5\u770b](https://www.d0j1a1701.cc/p/477c80cd/)\n\n# 10 pts\n\n\u66b4\u529b\u6a21\u62df\u5373\u53ef\u3002\n\n# 30 pts\n\n\u66b4\u529b\u6a21\u62df\u5373\u53ef\u3002\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\nusing namespace std;\nstruct Oper {\n\tint op, l, r, x;\n};\nconst int mod = 19260817;\nint n, m, lst = -1, arr[500010], mem[500010], tmp[500010];\nvector<Oper> oper;\ninline void process(int op, int l, int r, int x) {\n\tx %= mod;\n\tif(op == 1)\n\t\tfor(int i = l; i <= r; i++)   arr[i] = ((long long)arr[i] + x) % mod;\n\tif(op == 2)\n\t\tfor(int i = l; i <= r; i++)   arr[i] = ((long long)arr[i] * x) % mod;\n\tif(op == 3) {\n\t\tint sum = 0;\n\t\tfor(int i = l; i <= r; i++)   sum = ((long long)sum + arr[i]) % mod;\n\t\tcout << sum << endl;\n\t}\n}\ninline void print() {\n\tfor(int i = 1; i <= n; i++)   cout << arr[i] << ' ';\n\tcout << endl;\n}\nint main() {\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i++)   cin >> arr[i];\n\tcopy(arr + 1, arr + 1 + n, mem + 1);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint op, l, r, x;\n\t\tcin >> op;\n\t\tif(op == 1 || op == 2)   cin >> l >> r >> x;\n\t\tif(op == 3)   cin >> l >> r;\n\t\toper.push_back({op, l, r, x});\n\t}\n\tfor(int i = 0; i < m; i++) {\n\t\t//cout << \"Process:\" << oper[i].op << ' ' << oper[i].l << ' ' << oper[i].r << ' ' << oper[i].x << endl;\n\t\tif(oper[i].op != 4)    process(oper[i].op, oper[i].l, oper[i].r, oper[i].x);\n\t\telse {\n\t\t\tcopy(arr + 1, arr + 1 + n, tmp + 1);\n\t\t\tcopy(mem + 1, mem + 1 + n, arr + 1);\n\t\t\tcopy(tmp + 1, tmp + 1 + n, mem + 1);\n\t\t\tfor(int j = i - 1; j >= lst + 1; j--)\n\t\t\t\tif(oper[j].op != 3) process(oper[j].op, oper[j].l, oper[j].r, oper[j].x);\n\t\t\tlst = i;\n\t\t}\n\t\t//print();\n\t}\n\t//system(\"pause\");\n\treturn 0;\n}\n```\n\n# 50 pts\n\n\u4f7f\u7528`\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811`\u4f18\u5316\u66b4\u529b\u3002\n\n# 100 pts\n\n\u6ce8\u610f\u8fd9\u53e5\u8bdd\uff1a\n\n> \u56de\u6eaf\u5230**\u4e0a\u4e00\u6b21`4`\u64cd\u4f5c\u524d**\uff08\u5982\u679c\u4e0d\u5b58\u5728\u4e0a\u4e00\u6b21\u5219\u56de\u6eaf\u5230\u521d\u59cb\u72b6\u6001\uff09\uff0c\u5012\u5e8f\u6267\u884c\u4e0a\u4e00\u6b21\u56de\u6eaf\u540e\u5230\u56de\u6eaf\u524d\u7684\u6240\u6709`1`\u64cd\u4f5c\u548c`2`\u64cd\u4f5c\n\n\u4e3a\u4ec0\u4e48\u662f**\u4e0a\u4e00\u6b21`4`\u64cd\u4f5c\u524d**\uff1f\u6309\u7167\u6b63\u5e38\u7684\u903b\u8f91\u4e0d\u5e94\u8be5\u662f\u4e0a\u4e00\u6b21`4`\u64cd\u4f5c\u540e\u5417\uff1f\n\n\u8fd9\u53e5\u8bdd\u5c31\u662f\u4e00\u4e2a\u7a81\u7834\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u6267\u884c\uff0c\u5efa\u7acb\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u68f5\u6b63\u5e8f\u6267\u884c\u5e76\u8f93\u51fa\u7ed3\u679c\uff0c\u4e00\u68f5\u4ece\u4e0b\u4e00\u4e2a`4`\u64cd\u4f5c\u5f00\u59cb\u9006\u5e8f\u6267\u884c\u6240\u6709\u64cd\u4f5c\u3002\n\n\u6bcf\u5f53\u9047\u5230`4`\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u4ea4\u6362\u4e00\u4e0b\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u7528\u539f\u672c\u5012\u5e8f\u7684\u7ebf\u6bb5\u6811\u6b63\u5e8f\u6267\u884c\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\uff0c\u5373\u53ef $O(1)$ \u5b9e\u73b0`4`\u64cd\u4f5c\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int p = 19260817;\nint n, m, arr[500010];\nnamespace smt {\nint tree[2][4000010], add[2][4000010], mul[2][4000010];\ninline void pushup(int rt,int id) {\n\ttree[rt][id] = (tree[rt][id<<1] + tree[rt][id<<1|1]) % p;\n}\ninline void pushdown(int rt, int id, int l, int r) {\n\tint mid = l + r >> 1;\n\ttree[rt][id<<1] = ((long long)tree[rt][id<<1] * mul[rt][id] + (long long)add[rt][id] * (mid - l + 1) % p) % p;\n\ttree[rt][id<<1|1] = ((long long)tree[rt][id<<1|1] * mul[rt][id] + (long long)add[rt][id] * (r - mid) % p) % p;\n\tmul[rt][id<<1] = ((long long)mul[rt][id<<1] * mul[rt][id]) % p;\n\tmul[rt][id<<1|1] = ((long long)mul[rt][id<<1|1] * mul[rt][id]) % p;\n\tadd[rt][id<<1] = ((long long)add[rt][id<<1] * mul[rt][id] + add[rt][id]) % p;\n\tadd[rt][id<<1|1] = ((long long)add[rt][id<<1|1] * mul[rt][id] + add[rt][id]) % p;\n\tmul[rt][id] = 1, add[rt][id] = 0;\n}\nvoid build(int rt, int id, int l, int r) {\n\tmul[rt][id] = 1;\n\tif(l == r) {\n\t\ttree[rt][id] = arr[l] % p;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(rt, id<<1, l, mid);\n\tbuild(rt, id<<1|1, mid + 1, r);\n\tpushup(rt, id);\n}\nvoid adjust1(int rt, int id, int x, int y, int k, int l, int r) {\n\tif(!id)\treturn;\n\tif(x <= l && r <= y) {\n\t\tadd[rt][id] = (long long)(add[rt][id] + k) % p;\n\t\ttree[rt][id] = (tree[rt][id] + (long long)(r - l + 1) * k) % p;\n\t\treturn;\n\t}\n\tpushdown(rt, id, l, r);\n\tint mid = l + r >> 1;\n\tif(x <= mid)  adjust1(rt, id<<1, x, y, k, l, mid);\n\tif(mid < y)   adjust1(rt, id<<1|1, x, y, k, mid + 1, r);\n\tpushup(rt, id);\n}\nvoid adjust2(int rt, int id, int x, int y, int k, int l, int r) {\n\tif(!id)\treturn;\n\tif(x <= l && r <= y) {\n\t\ttree[rt][id] = ((long long)tree[rt][id] * k) % p;\n\t\tmul[rt][id] = ((long long)mul[rt][id] * k) % p;\n\t\tadd[rt][id] = ((long long)add[rt][id] * k) % p;\n\t\treturn;\n\t}\n\tpushdown(rt, id, l, r);\n\tint mid = l + r >> 1;\n\tif(x <= mid)  adjust2(rt, id<<1, x, y, k, l, mid);\n\tif(mid < y)   adjust2(rt, id<<1|1, x, y, k, mid + 1, r);\n\tpushup(rt, id);\n}\nint query(int rt, int id, int x, int y, int l, int r) {\n\tif(!id)\treturn 0;\n\tif(x <= l && r <= y) return tree[rt][id] % p;\n\tpushdown(rt, id, l, r);\n\tint mid = l + r >> 1, res = 0;\n\tif(x <= mid)  res = query(rt, id<<1, x, y, l, mid) % p;\n\tif(mid < y)   res = (res + query(rt, id<<1|1, x, y, mid + 1, r)) % p;\n\treturn res;\n}\n}\nstruct Oper {\n\tint op, l, r, x;\n} oper[100010];\nint op_4[100010], cnt, cur;\ninline void process(int i, int rt, bool prt) {\n\tif(i <= 0)\treturn;\n\tOper op = oper[i];\n\tif(op.op == 1)\tsmt::adjust1(rt, 1, op.l, op.r, op.x, 1, n);\n\telse if(op.op == 2)\tsmt::adjust2(rt, 1, op.l, op.r, op.x, 1, n);\n\telse if(op.op == 3 && prt)\tcout << smt::query(rt, 1, op.l, op.r, 1, n) << endl;\n}\ninline void init() {\n\tsmt::build(0, 1, 1, n);\n\tsmt::build(1, 1, 1, n);\n}\nint main() {\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i++)\tcin >> arr[i];\n\tfor(int i = 1; i <= m; i++) {\n\t\tcin >> oper[i].op;\n\t\tif(oper[i].op < 4)\tcin >> oper[i].l >> oper[i].r;\n\t\tif(oper[i].op < 3)\tcin >> oper[i].x;\n\t\tif(oper[i].op == 4)\top_4[++cnt] = i;\n\t}\n\tinit();\n\tint cur_op_4 = 0;\n\tfor(int i = 1; i <= m; i++) {\n\t\tint rev = op_4[cur_op_4] + op_4[cur_op_4 + 1] - i;\n\t\tif(oper[i].op == 4) {\n\t\t\tcur_op_4++;\n\t\t\tcur ^= 1;\n\t\t} else process(i, cur, true), process(rev, cur^1, false);\n\t}\n\t//system(\"pause\");\n\treturn 0;\n}\n```",
        "postTime": 1648293659,
        "uid": 248302,
        "name": "d0j1a_1701",
        "ccfLevel": 6,
        "title": "\u3008TREE\u306eOI\u00b7R1\u3009Essential Operations"
    }
]