[
    {
        "content": "\u4e0d\u5f97\u4e0d\u627f\u8ba4\uff0c\u53bb\u5e74\u63d0\u9ad8\u7ec4 D2T3 \u5bf9\u52a8\u6001 DP \u8d77\u5230\u4e86\u826f\u597d\u7684\u666e\u53ca\u6548\u679c\u3002\n\n\u52a8\u6001 DP \u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u4e00\u7c7b\u95ee\u9898\u3002\u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u539f\u672c\u90fd\u662f\u8f83\u4e3a\u7b80\u5355\u7684\u6811\u4e0a DP \u95ee\u9898\uff0c\u4f46\u662f\u88ab\u5957\u4e0a\u4e86~~\u4e27\u5fc3\u75c5\u72c2\u7684~~\u4fee\u6539\u70b9\u6743\u7684\u64cd\u4f5c\u3002\u5c31\u6bd4\u5982\u8bf4\u8fd9\u9053\u9898\uff1a\n\n[\u3010\u6a21\u677f\u3011\u52a8\u6001 DP](https://www.luogu.org/problemnew/show/P4719)\n\n> \u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\u3002$i$ \u53f7\u70b9\u7684\u70b9\u6743\u4e3a $a_i$\u3002\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7ed9\u5b9a $u, w$\uff0c\u8868\u793a\u4fee\u6539\u70b9 $u$ \u7684\u6743\u503c\u4e3a $w$\u3002\u4f60\u9700\u8981\u5728\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u6c42\u51fa\u8fd9\u68f5\u6811\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u6743\u503c\u5927\u5c0f\u3002\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u6ca1\u6709\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u600e\u4e48\u505a\u3002\u9996\u5148\u5148\u9009\u53d6 $1$ \u53f7\u70b9\u4f5c\u4e3a\u5168\u6811\u7684\u6839\u3002\u7136\u540e\u6211\u4eec\u8bbe $f_{i, 0}$ \u8868\u793a\u4e0d\u9009\u62e9 $i$ \u53f7\u70b9\u65f6\uff0c\u4ee5 $i$ \u53f7\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff1b$f_{i, 1}$ \u8868\u793a\u9009\u62e9 $i$ \u53f7\u70b9\u65f6\uff0c\u4ee5 $i$ \u53f7\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5199\u51fa\u5982\u4e0b\u7684\u65b9\u7a0b\uff1a\n\n$$ f_{i, 0} = \\sum_{j} \\max(f_{j, 0}, f_{j, 1})$$\n$$f_{i, 1} = \\sum_{j} f_{j, 0} + a_i $$\n\n\u8fd9\u91cc $j$ \u8868\u793a $i$ \u53f7\u70b9\u7684\u6240\u6709\u513f\u5b50\u3002\u7279\u6b8a\u5730\uff0c\u82e5\u70b9 $i$ \u4e3a\u53f6\u5b50\u8282\u70b9\uff0c$f_{i, 0} = 0, f_{i, 1} = a_i$\u3002\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f $\\max(f_{1, 0}, f_{1, 1})$\u3002\n\n---\n\n\u63a5\u4e0b\u6765\u5e26\u4e0a\u4fee\u6539\u3002\n\n\u9996\u5148\u6839\u636e\u52a8\u6001\u89c4\u5212\u7684\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u4fee\u6539\u4e86\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u53ea\u4f1a\u66f4\u6539\u4ece\u8fd9\u4e2a\u70b9\u5230\u6839\u8fd9\u6761\u8def\u5f84\u4e0a\u8282\u70b9\u7684 DP \u503c\uff0c\u5176\u4ed6\u503c\u662f\u4e0d\u4f1a\u53d1\u751f\u66f4\u6539\u7684\u3002\u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u8981\u5bf9\u6574\u68f5\u6811\u91cd\u65b0\u6c42\u4e00\u904d\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff0c\u672a\u514d\u592a\u8fc7\u6d6a\u8d39\u3002\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u66f4\u6539\u8fd9\u6761\u94fe\u4e0a\u7684 DP \u503c\u3002\n\n\u7531\u4e8e\u6811\u53ef\u80fd\u4f1a\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u6bcf\u6b21\u66f4\u65b0\u5c31\u662f $\\mathcal{O(n)}$ \u7684\uff0c\u663e\u7136\u4e0d\u53ef\u63a5\u53d7\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u6761\u94fe\u53ea\u66f4\u65b0 $\\log n$ \u6b21\u2026\u2026\n\n~~\u70b9\u5206\u6cbb\uff01~~\u62b1\u6b49\u535a\u4e3b\u592a\u5f31\u4e86\uff0c\u4e0d\u4f1a\u90a3\u4e2a\u88ab\u79f0\u4f5c\u201c\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u201d\u7684\u5389\u5bb3\u505a\u6cd5\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u8bf7\u51fa\u89e3\u51b3\u6811\u4e0a\u95ee\u9898\u7684\u795e\u5668\u2014\u2014\u91cd\u94fe\u5256\u5206\u3002\n\n\u91cd\u94fe\u5256\u5206\u6709\u4e00\u4e9b\u6027\u8d28\uff0c\u8fd9\u4e9b\u6027\u8d28\u6b63\u662f\u5b83\u5728\u52a8\u6001 DP \u4e2d\u80fd\u591f\u53d1\u6325\u4f5c\u7528\u7684\u91cd\u8981\u4fdd\u969c\u3002\n\n1. \u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff0c\u6700\u591a\u7ecf\u8fc7 $\\log n$ \u6761\u8f7b\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u91cd\u94fe\u7684\u6761\u6570\u6700\u591a\u4e5f\u53ea\u6709 $\\log n$ \u6761\u3002\u8fd9\u4e3a\u52a8\u6001 DP \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u505a\u4e86\u4fdd\u969c\u3002\n2. \u6bcf\u6761\u91cd\u94fe\u7684\u94fe\u5c3e\u90fd\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e14\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u6ca1\u6709\u91cd\u513f\u5b50\u3002\u8fd9\u4e3a\u52a8\u6001\u89c4\u5212\u7684\u521d\u59cb\u72b6\u6001\u548c\u8f6c\u79fb\u65b9\u5f0f\u505a\u4e86\u4fdd\u969c\u3002\n3. \u91cd\u94fe\u5256\u5206\u4e2d\uff0c\u4e00\u6761\u91cd\u94fe\u6240\u5728\u7684\u533a\u95f4\u5728\u5256\u51fa\u7684 DFS \u5e8f\u4e0a\uff0c\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4\u3002\u8fd9\u4e3a\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u8fbe\u5230\u5feb\u901f\u8f6c\u79fb\u505a\u4e86\u4fdd\u969c\u3002\n\n\u90a3\u4e48\u5728\u5b8f\u89c2\u4e0a\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u5728\u66f4\u65b0\u65f6\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u91cd\u94fe\u66b4\u529b\u5730\u4e92\u76f8\u8f6c\u79fb\u66f4\u65b0\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u4e00\u4e9b\u5fae\u89c2\u95ee\u9898\uff1a\u5728\u4e00\u6761\u94fe\u91cc\uff0c\u600e\u4e48\u652f\u6301\u5feb\u901f\u4fee\u6539\u548c\u67e5\u8be2\u8fd9\u6761\u94fe\u7684 DP \u503c\u3002\n\n\u6211\u4eec\u4fdd\u6301 $f$ \u6570\u7ec4\u7684\u5b9a\u4e49\u4e0d\u53d8\u3002\u4e3a\u4e86\u8fce\u5408\u91cd\u94fe\u5256\u5206\u5212\u5206\u51fa\u4e86\u8f7b\u91cd\u513f\u5b50\uff0c\u6211\u4eec\u5f62\u5f0f\u5316\u5730\u5b9a\u4e49 $g$ \u6570\u7ec4\uff1a$g_{i, 1}$ \u8868\u793a $i$ \u53f7\u70b9\u7684\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u90fd\u4e0d\u53d6\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\uff1b$g_{i, 0}$ \u8868\u793a $i$ \u53f7\u70b9\u7684\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u53ef\u53d6\u53ef\u4e0d\u53d6\u5f62\u6210\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e0a\u8ff0\u7684 DP \u5f0f\u5b50\u5927\u5927\u7b80\u5316\u4e86\uff08\u81f3\u5c11\u6ca1\u6709\u4e86\u90a3\u4e2a $\\Sigma$\uff09\u3002\n\n$$f_{i, 0} = g_{i, 0} + \\max(f_{j, 0}, f_{j, 1})$$\n$$f_{i, 1} = g_{i, 1} + a_i + f_{j, 0}$$\n\n\u8fd9\u91cc\u7684 $j$ \u8868\u793a $i$ \u53f7\u70b9\u7684\u91cd\u513f\u5b50\u3002\u7279\u6b8a\u5730\uff0c\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c$g_{i, 0} = g_{i, 1} = 0$\u3002\n\n\u4f46\u662f\u611f\u89c9\u8fd9\u73a9\u610f\u513f\u597d\u50cf\u4e0d\u5927\u4f18\u7f8e\uff1f\u7b2c\u4e8c\u4e2a\u8f6c\u79fb\u5f0f\u5b50\u4e2d\uff0c$g_{i, 1}$ \u548c $a_i$ \u90fd\u53ea\u548c $i$ \u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u628a\u5b83\u4eec\u5408\u5e76\u8d77\u6765\u3002\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49 $g_{i, 1}$\uff1a\u8868\u793a $i$ \u53f7\u70b9\u53ea\u8003\u8651\u8f7b\u513f\u5b50\u7684\u53d6\u81ea\u5df1\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u90a3\u4e48\u8fd9\u65f6\u5019\uff0c\u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u5c31\u53ef\u4ee5\u53d8\u4e3a $f_{i, 1} = g_{i, 1} + f_{j, 0}$\u3002\n\n\u4f46\u662f\u8fd9\u73a9\u610f\u513f\u548b\u533a\u95f4\u7ef4\u62a4\u561e\uff1f\u56de\u60f3\u4e00\u4e0b\u5f53\u521d\u5b66\u4e60\u6590\u6ce2\u90a3\u5951\u7684\u65f6\u5019\uff0c\u6211\u4eec\u78b0\u5230\u8fc7\u8fd9\u6837\u7684 DP \u65b9\u7a0b\uff1a\n\n$$f_i = f_{i - 1} + f_{i - 2}$$\n\n\u8fd9\u4e2a\u65b9\u7a0b\u6d89\u53ca\u4e0a\u4e00\u6b65\u7684\u8d21\u732e\uff0c\u6ca1\u6cd5\u6ee1\u8db3\u7ed3\u5408\u7387\uff0c\u4e0d\u592a\u8212\u670d\u3002\u4e8e\u662f\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u77e9\u9635\uff0c\u5316\u52a0\u4e3a\u4e58\uff0c\u4e8e\u662f\u6211\u4eec\u6109\u5feb\u5730\u7528\u5feb\u901f\u5e42 AC \u4e86\u3002\n\n\u8fd9\u9053\u9898\u6211\u4eec\u4e5f\u7ed9\u5b83\u5957\u4e2a\u77e9\u9635\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u90fd\u8868\u793a\u4e00\u4e2a\u72b6\u6001\uff0c\u8fd9\u4e2a\u72b6\u6001\u5171\u6709\u4e24\u4e2a\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a $1 \\times 2$ \u7684\u77e9\u9635\u3002\n\n$$ \\begin{vmatrix} f_{i, 0} & f_{i, 1} \\end{vmatrix} $$\n\n\u73b0\u5728\u6211\u4eec\u8981\u4ece\u4e00\u4e2a\u70b9\u7684\u91cd\u513f\u5b50 $j$ \u8f6c\u79fb\u5230 $i$ \u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\u4f7f\u5f97 $\\begin{vmatrix} f_{j, 0} & f_{j, 1} \\end{vmatrix}$ \u80fd\u591f\u8f6c\u79fb\u5230 $\\begin{vmatrix} f_{i, 0} & f_{i, 1} \\end{vmatrix}$\u3002\u4f46\u662f\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff08\u5df2\u66f4\u6539 $g_{i, 1}$ \u7684\u5b9a\u4e49\uff09\uff1a\n\n$$f_{i, 0} = g_{i, 0} + \\max(f_{j, 0}, f_{j, 1})$$\n$$f_{i, 1} = g_{i, 1} + f_{j, 0}$$\n\n\n\u5b83\u4e00\u70b9\u4e5f\u4e0d\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u554a\uff01\n\n\u522b\u614c\u2026\u2026\u6211\u4eec\u5927\u80c6\u5730\u91cd\u5b9a\u4e49\u77e9\u9635\u4e58\u6cd5\uff01\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u8fd0\u7b97\u7b26 $*$\uff0c\u5bf9\u4e8e\u77e9\u9635 $\\mathrm{A}, \\mathrm{B}$\uff0c\u5b9a\u4e49 $\\mathrm{A} * \\mathrm{B}$ \u7684\u7ed3\u679c $\\mathrm{C}$\uff0c\u6ee1\u8db3\uff1a\n\n$$\\mathrm{C}_{i, j} = \\max_{k}(\\mathrm{A}_{i, k} + \\mathrm{B}_{k, j})$$\n\n\u5b9e\u73b0\u5230\u4ee3\u7801\u4e0a\uff0c\u5c31\u662f\n\n```cpp\nstruct Matrix {\n  int mat[MaxN][MaxN];\n}\n\ninline Matrix operator * (Matrix a, Matrix b) {\n  Matrix c;\n\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < n; ++j)\n      for (int k = 0; k < n; ++k)\n        c.mat[i][j] = max(c.mat[i][j], a.mat[i][k] + b.mat[k][j]);\n\n  return c;\n}\n```\n\n\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e3a\u4ec0\u4e48\u5177\u6709\u7ed3\u5408\u7387\u5462\uff1f\n\n- \u4e00\u79cd\u611f\u6027\u7684\u7406\u89e3\uff1a\u7531\u4e8e $\\max$ \u64cd\u4f5c\u548c\u52a0\u6cd5\u64cd\u4f5c\u90fd\u662f\u6ee1\u8db3\u7ed3\u5408\u7387\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8fd0\u7b97\u6ee1\u8db3\u7ed3\u5408\u7387\u3002\n- \u4e00\u79cd\u7406\u6027\u4f46\u4e0d\u592a\u4e25\u8c28\u7684\u8bc1\u660e\uff1a\u8bfb\u8005\u4e0d\u59a8\u62ff\u51fa\u4e4b\u7b14\uff0c\u8ba1\u7b97\u51e0\u7ec4 $(\\mathrm{A} * \\mathrm{B}) * \\mathrm{C}$ \u548c $\\mathrm{A} * (\\mathrm{B} * \\mathrm{C})$ \u7684\u503c\uff08\u5982\u679c\u60a8\u8ba1\u7b97\u6bd4\u8f83\u5389\u5bb3\uff0c\u5e26\u4e0a\u53c2\u6570\u7b97\u5f53\u7136\u66f4\u597d\uff09\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bc1\u660e\u4e86\u4e09\u4e2a\u6ee1\u8db3\u6761\u4ef6\uff0c\u5bf9\u4e8e\u6240\u6709\u60c5\u51b5\u90fd\u662f\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53e3\u80e1\u5b8c\u4e86\u7ed3\u5408\u7387\u7684\u8bc1\u660e\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff0c\u8fd9\u4e2a\u662f\u76f8\u5bf9\u96be\u7684\u4e00\u4e2a\u5185\u5bb9\u3002\u6211\u5c31\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4e2a\u4eba\u6784\u9020\u8f6c\u79fb\u77e9\u9635\u7684\u62d9\u52a3\u65b9\u6cd5\u5427\u3002\n\n\u5728\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u60f3\u529e\u6cd5\u628a\u8fd9\u73a9\u610f\u513f\u53d8\u5f62\uff0c\u53d8\u5f97\u548c\u8fd0\u7b97 $*$ \u5dee\u4e0d\u591a\u3002\n\n$$f_{i, 0} = \\max(f_{j, 0} + g_{i, 0}, f_{j, 1} + g_{i, 0})$$\n$$f_{i, 1} = \\max(g_{i, 1} + f_{j, 0}, -\\infty)$$\n\n\u63a5\u7740\u6211\u4eec\u628a\u5df2\u77e5\u7684\u72b6\u6001\u548c\u8981\u8f6c\u79fb\u5230\u7684\u72b6\u6001\u5199\u5728\u4e00\u8d77\uff0c\u628a\u672a\u77e5\u7684\u8f6c\u79fb\u77e9\u9635\u7528 $\\mathrm{U}$ \u8868\u793a\u3002\n\n$$\\begin{vmatrix} f_{j, 0} & f_{j, 1} \\end{vmatrix} * \\mathrm{U} = \\begin{vmatrix} f_{i, 0} & f_{i, 1} \\end{vmatrix}$$\n\n\u6211\u4eec\u539f\u6765\u662f\u4e00\u4e2a $1 \\times 2$ \u7684\u77e9\u9635\uff0c\u8981\u5f62\u6210\u4e00\u4e2a $1 \\times 2$ \u7684\u77e9\u9635\uff0c\u90a3\u4e48 $\\mathrm{U}$ \u5e94\u5f53\u662f\u4e00\u4e2a $2 \\times 2$ \u7684\u77e9\u9635\u3002\u90a3\u4e48\u6211\u4eec\u8bbe\u77e9\u9635\u5de6\u4e0a\u3001\u53f3\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u56db\u4e2a\u4f4d\u7f6e\u5206\u522b\u4e3a $u_1, u_2, u_3, u_4$\u3002\u63a5\u4e0b\u6765\u628a\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u4e0a\u53bb\u3002\n\n$f_{i, 0}$ \u7684\u503c\u5e94\u8be5\u4e3a $\\max(f_{j, 0} + u_1, f_{j, 1} + u_3)$\u3002\u5bf9\u5e94\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0 $u_1$ \u5e94\u8be5\u5c31\u662f $g_{i, 0}$\uff0c$u_3$ \u4e5f\u662f $g_{i, 0}$\u3002\u540c\u6837\u7684\uff0c$f_{i, 1}$ \u7684\u503c\u5e94\u8be5\u4e3a $\\max(f_{j, 0} + u_2, f_{j, 1} + u_4)$\u3002\u5bf9\u5e94\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0 $u_2$ \u5e94\u8be5\u662f $g_{i, 1}$\uff0c\u800c\u4e0d\u5b58\u5728 $f_{j, 1}$ \u9879\uff0c\u5c31\u5c06 $u_4$ \u8d4b\u4e3a $-\\infty$\u3002\u6700\u540e\u5199\u51fa\u6765\uff0c\u68c0\u67e5\u4e00\u904d\uff1a\n\n$$\\begin{vmatrix} f_{j, 0} & f_{j, 1} \\end{vmatrix} * \\begin{vmatrix} g_{i, 0} & g_{i, 1} \\\\ g_{i, 0} & -\\infty \\end{vmatrix} = \\begin{vmatrix} f_{i, 0} & f_{i, 1} \\end{vmatrix}$$\n\n\u55ef\u2026\u2026\u597d\u50cf\u6ca1\u95ee\u9898\uff1f\n\n\u8fd9\u6837\u5b50\uff0c\u6211\u4eec\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u6211\u4eec\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u5b58\u50a8\u4e86\u6700\u521d\u59cb\u7684\u503c\uff0c\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u77e9\u9635\u548c\u91cd\u94fe\u4fe1\u606f\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u4e14\u56e0\u4e3a\u8fd9\u4e2a\u77e9\u9635\u6ee1\u8db3\u7ed3\u5408\u7387\uff0c\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4e4b\u95f4\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef\uff08\u6216\u8005\u53eb\u2026\u2026\u201c$*$ \u79ef\u201d\uff1f\uff09\u3002\u7136\u540e\u5230\u4e86\u4e00\u6761\u91cd\u94fe\u94fe\u5934\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u662f\u5b83\u7236\u4eb2\u7684\u8f7b\u513f\u5b50\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u5b83\u7236\u4eb2\u8282\u70b9\u6240\u5728\u7684\u70b9\u7684\u8f6c\u79fb\u77e9\u9635\u3002\u8fd9\u6837\u5b50\u4e00\u76f4\u8df3\u5230\u6839\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u8c8c\u4f3c\u2026\u2026\u5927\u529f\u544a\u6210\uff1f\n\n\u91cd\u94fe\u5256\u5206\u5256\u51fa\u7684 DFS \u5e8f\uff0c\u7531\u4e8e\u5148\u8bbf\u95ee\u4e86\u94fe\u5934\uff0c\u6240\u4ee5\u8fd9\u4e2a\u533a\u95f4\u4e2d\uff0c\u94fe\u5934\u5728\u533a\u95f4\u5de6\u7aef\uff0c\u94fe\u5c3e\u5728\u533a\u95f4\u53f3\u7aef\u3002\u6211\u4eec\u5b58\u50a8\u7684\u521d\u59cb\u4fe1\u606f\u5728\u53f6\u5b50\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u94fe\u5c3e\uff09\u4e0a\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u77e9\u9635 $*$ \u6cd5\u5e94\u5f53\u662f\u8f6c\u79fb\u77e9\u9635\u5728\u524d\uff0c\u8981\u7ef4\u62a4\u7684\u503c\u77e9\u9635\u5728\u540e\u3002\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u77e9\u9635\u524d\u540e\u6362\u4e2a\u987a\u5e8f\uff0c\u518d\u8f6c\u4e2a\u4e2a\u513f\uff0c\u52a0\u4e0a\u4e00\u4e9b\u63a8\u7b97\uff0c\u53ef\u4ee5\u53d8\u5f62\u6210\uff1a\n\n$$\\begin{vmatrix} g_{i, 0} & g_{i, 0} \\\\ g_{i, 1} & -\\infty \\end{vmatrix} * \\begin{vmatrix} f_{j, 0} \\\\ f_{j, 1} \\end{vmatrix} = \\begin{vmatrix} f_{i, 0} \\\\ f_{i, 1} \\end{vmatrix}$$\n\n\u8fd9\u6837\u5c31\u771f\u7684\u505a\u5b8c\u4e86\u3002\u6700\u540e\u6211\u5199\u4e00\u4e9b\u5173\u4e8e\u4ee3\u7801\u5b9e\u73b0\u7684\u5c0f\u7ec6\u8282\uff1a\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u67e5\u5176 dp \u503c\uff0c\u9700\u8981\u4ece\u8fd9\u4e2a\u70b9\u4e00\u76f4\u67e5\u5230\u533a\u95f4\u94fe\u5c3e\u3002\u56e0\u6b64\uff0c\u6811\u5256\u65f6\u6211\u4eec\u9700\u8981\u591a\u7ef4\u62a4\u4e00\u4e2a $\\texttt{End[i]}$\uff08\u8fd9\u91cc\u7684 $i$ \u662f\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u5934\uff09\uff0c\u8868\u793a\u4ee5 $i$ \u4e3a\u94fe\u5934\u7684\u8fd9\u6761\u94fe\uff0c\u94fe\u5c3e\uff08\u53f6\u5b50\uff09\u8282\u70b9\u5728 DFS \u5e8f\u4e0a\u7684\u4f4d\u7f6e\u3002\n2. \u66f4\u65b0\u7ebf\u6bb5\u6811\u4e0a\u67d0\u4e2a\u70b9\u7684\u8f6c\u79fb\u77e9\u9635\u65f6\uff0c\u4f20\u5165\u7684\u5982\u679c\u662f\u77e9\u9635\uff0c\u9012\u5f52\u4e0b\u53bb\u5e38\u6570\u592a\u5927\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u5728\u7ebf\u6bb5\u6811\u5916\uff0c\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\u7ec4 $\\texttt{Val[i]}$\uff0c\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u8f6c\u79fb\u77e9\u9635\u3002\u8fd9\u6837\u5728\u7ebf\u6bb5\u6811\u66f4\u65b0\u627e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u65f6\uff0c\u76f4\u63a5\u8d4b\u503c\u8fdb\u6765\u5373\u53ef\u3002\n\n\u6700\u540e\u8d34\u4e0a\u4ee3\u7801\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\u53d8\u91cf\u540d\uff1a\n\n$\\texttt{Id[i]}$ \u8868\u793a $i$ \u53f7\u70b9\u5728 DFS \u5e8f\u4e2d\u7684\u4f4d\u7f6e\uff0c$\\texttt{Dfn[i]}$ \u8868\u793a\u5728 DFS \u5e8f\u4e2d\u4e0b\u6807 $i$ \u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u662f\u4ec0\u4e48\u70b9\uff08\u4e0e $\\texttt{Id[i]}$ \u76f8\u53cd\uff09\uff0c$\\texttt{Fa[i]}$ \u662f\u7236\u4eb2\u8282\u70b9\uff0c$\\texttt{Siz[i]}$ \u662f\u5b50\u6811\u5927\u5c0f\uff0c$\\texttt{Dep[i]}$ \u662f\u8be5\u8282\u70b9\u6df1\u5ea6\uff08\u597d\u50cf\u6ca1\u4ec0\u4e48\u7528\uff09\uff0c$\\texttt{Wson[i]}$ \u662f $i$ \u53f7\u8282\u70b9\u7684\u91cd\u513f\u5b50\uff0c$\\texttt{Top[i]}$ \u8868\u793a $i$ \u53f7\u70b9\u6240\u5728\u91cd\u94fe\u94fe\u9876\u7f16\u53f7\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int MaxN = 100000 + 5, MaxM = 200000 + 5;\nconst int MaxV = 400000 + 5;\nconst int INF = 0x7F7F7F7F;\n\nstruct Matrix {\n  int mat[2][2];\n\n  Matrix() {\n    memset(mat, -0x3F, sizeof mat);\n  }\n\n  inline Matrix operator * (Matrix b) {\n    Matrix c;\n\n    for (int i = 0; i < 2; ++i)\n      for (int j = 0; j < 2; ++j)\n        for (int k = 0; k < 2; ++k)\n          c.mat[i][j] = max(c.mat[i][j], mat[i][k] + b.mat[k][j]);\n\n    return c;\n  }\n};\n\nint N, M; int cntv, cnte;\nint A[MaxN];\nint Fa[MaxN], Siz[MaxN], Dep[MaxN], Wson[MaxN];\nint Top[MaxN], Id[MaxN], Dfn[MaxN], End[MaxN];\nint F[MaxN][2];\nint Head[MaxN], To[MaxM], Next[MaxM];\nMatrix Val[MaxN];\n\nstruct SegTree {\n  int L[MaxV], R[MaxV];\n  Matrix M[MaxV];\n\n  inline void Push_up(int i) {\n    M[i] = M[i << 1] * M[i << 1 | 1];\n  }\n\n  void Build_Tree(int left, int right, int i) {\n    L[i] = left, R[i] = right;\n    if (L[i] == R[i]) {\n      M[i] = Val[Dfn[L[i]]];\n      return;\n    }\n\n    int mid = (L[i] + R[i]) >> 1;\n    Build_Tree(L[i], mid, i << 1);\n    Build_Tree(mid + 1, R[i], i << 1 | 1);\n    Push_up(i);\n  }\n\n  void Update_Tree(int x, int i) {\n    if (L[i] == R[i]) {\n      // \u76f4\u63a5\u8d4b\u503c\uff0c\u51cf\u5c0f\u5e38\u6570\n      M[i] = Val[Dfn[x]];\n      return;\n    }\n\n    int mid = (L[i] + R[i]) >> 1;\n    if (x <= mid) Update_Tree(x, i << 1);\n    else Update_Tree(x, i << 1 | 1);\n    Push_up(i);\n  }\n\n  // \u67e5\u8be2\u4e00\u4e2a\u70b9\u7684 DP \u503c\uff0c\u76f8\u5f53\u4e8e\u67e5\u8be2\u8fd9\u6761\u91cd\u94fe\u4e0a\u94fe\u5c3e\u77e9\u9635\u548c\u94fe\u4e2d\u8f6c\u79fb\u77e9\u9635\u7684 '*' \u79ef\n  Matrix Query_Tree(int left, int right, int i) {\n    if (L[i] == left && R[i] == right) return M[i];\n\n    int mid = (L[i] + R[i]) >> 1;\n    if (right <= mid)\n      return Query_Tree(left, right, i << 1);\n    else if (left > mid)\n      return Query_Tree(left, right, i << 1 | 1);\n    else\n      return Query_Tree(left, mid, i << 1) * Query_Tree(mid + 1, right, i << 1 | 1);\n  }\n} T;\n\ninline void add_edge(int from, int to) {\n  cnte++; To[cnte] = to;\n  Next[cnte] = Head[from]; Head[from] = cnte;\n}\n\nvoid readin() {\n  scanf(\"%d %d\", &N, &M);\n  for (int i = 1; i <= N; ++i)\n    scanf(\"%d\", &A[i]);\n  for (int i = 1; i < N; ++i) {\n    int u, v;\n    scanf(\"%d %d\", &u, &v);\n    add_edge(u, v); add_edge(v, u);\n  }\n}\n\nvoid dfs1(int u) {\n  Siz[u] = 1;\n\n  for (int i = Head[u]; i; i = Next[i]) {\n    int v = To[i];\n    if (v == Fa[u]) continue;\n\n    Fa[v] = u; Dep[v] = Dep[u] + 1;\n    dfs1(v);\n\n    Siz[u] += Siz[v];\n    if (Siz[v] > Siz[Wson[u]]) Wson[u] = v;\n  }\n}\n\nvoid dfs2(int u, int chain) {\n  cntv++;\n  Id[u] = cntv; Dfn[cntv] = u;\n  Top[u] = chain;\n  End[chain] = max(End[chain], cntv);\n\n  // \u7b2c\u4e8c\u6b21\u6811\u5256\u65f6\u76f4\u63a5\u66f4\u65b0 F, G \u6570\u7ec4\uff08\u8fd9\u91cc\u76f4\u63a5\u5c06 G \u653e\u5165\u77e9\u9635\u66f4\u65b0\uff09\n  F[u][0] = 0, F[u][1] = A[u];\n  Val[u].mat[0][0] = Val[u].mat[0][1] = 0;\n  Val[u].mat[1][0] = A[u];\n  if (Wson[u] != 0) {\n    dfs2(Wson[u], chain);\n    // \u4f9d\u7167\u5b9a\u4e49\uff0c\u91cd\u513f\u5b50\u4e0d\u5e94\u8ba1\u5165 G \u6570\u7ec4\n    F[u][0] += max(F[Wson[u]][0], F[Wson[u]][1]);\n    F[u][1] += F[Wson[u]][0];\n  }\n\n  for (int i = Head[u]; i; i = Next[i]) {\n    int v = To[i];\n    if (v == Fa[u] || v == Wson[u]) continue;\n    dfs2(v, v);\n\n    F[u][0] += max(F[v][0], F[v][1]);\n    F[u][1] += F[v][0];\n    Val[u].mat[0][0] += max(F[v][0], F[v][1]);\n    Val[u].mat[0][1] = Val[u].mat[0][0];\n    Val[u].mat[1][0] += F[v][0];\n  }\n}\n\nvoid init() {\n  readin();\n  dfs1(1); dfs2(1, 1);\n}\n\nvoid update_path(int u, int w) {\n  Val[u].mat[1][0] += w - A[u];\n  A[u] = w;\n\n  Matrix bef, aft;\n  while (u != 0) {\n    // \u8ba1\u7b97\u8d21\u732e\u65f6\uff0c\u5e94\u5f53\u7528\u4e00\u4e2a bef \u77e9\u9635\u8fd8\u539f\u51fa\u5c11\u6389\u8fd9\u4e2a\u8f7b\u513f\u5b50\u7684\u60c5\u51b5\uff0c\u518d\u5c06 aft \u52a0\u5165\u66f4\u65b0\n    bef = T.Query_Tree(Id[Top[u]], End[Top[u]], 1);\n    T.Update_Tree(Id[u], 1);\n    aft = T.Query_Tree(Id[Top[u]], End[Top[u]], 1);\n    u = Fa[Top[u]];\n\n    Val[u].mat[0][0] += max(aft.mat[0][0], aft.mat[1][0]) - max(bef.mat[0][0], bef.mat[1][0]);\n    Val[u].mat[0][1] = Val[u].mat[0][0];\n    Val[u].mat[1][0] += aft.mat[0][0] - bef.mat[0][0];\n  }\n}\n\nvoid solve() {\n  T.Build_Tree(1, N, 1);\n\n  for (int i = 1; i <= M; ++i) {\n    int u, w;\n    scanf(\"%d %d\", &u, &w);\n    update_path(u, w);\n    Matrix Ans = T.Query_Tree(Id[1], End[1], 1);\n    printf(\"%d\\n\", max(Ans.mat[0][0], Ans.mat[1][0]));\n  }\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```\n\n\u9644\uff1a\u672c\u6587\u540c\u65f6\u53d1\u5e03\u4e8e\u672c\u849f\u84bb\u7684[\u535a\u5ba2](https://www.cnblogs.com/tweetuzki/p/10274788.html)\u3002",
        "postTime": 1547565381,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4719 \u3010\u6a21\u677f\u3011\u52a8\u6001dp"
    },
    {
        "content": "\u5728\u4e0a\u53e4\u8bba\u6587\u4e2d\u53d1\u73b0\u4e86\u4e00\u79cd\u795e\u5947\u7684\u505a\u6cd5\u2026\u2026\n\n$O(nlogn)$\u628a\u6811\u5256\u540a\u8d77\u6765\u6253\u2026\u2026\n\n\u4e8e\u662f\u8f7b\u677e\u62ff\u5230\u4e86\u672c\u9898\u7684rk1(\u4f46\u662f\u8fd9\u4efd\u4ee3\u7801\u5c01\u88c5\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u5e94\u8be5\u8fd8\u6709\u5f88\u591a\u5361\u5e38\u7a7a\u95f4)\n\n_____________________\n\n## \u672c\u9898\u9898\u89e3\n\n### \u4ec0\u4e48\u662f\u52a8\u6001dp\n\n\u6240\u8c13\u52a8\u6001dp\u5c31\u662f\u4e00\u79cd\u9ed1\u79d1\u6280\u5141\u8bb8\u4f60\u5bf9\u4e8e\u4e00\u4e2adp\u95ee\u9898\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\n\n\u5148\u7ed9\u4f60\u4e00\u4e2a\u6b63\u5e38\u7684dp\u95ee\u9898\uff0c\u6bd4\u5982\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\n\n\u7136\u540e\u6211\u4eec\u8981\u4e0d\u505c\u7684\u4fee\u6539\u53c2\u6570\u6b64\u65f6\u95ee\u9898\u7684\u96be\u5ea6\u5c31\u7531\u9ec4\u724c\u9aa4\u589e\u81f3\u9ed1\u724c\u4e86\n\n\u7136\u540e\u4f20\u7edf\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u6811\u94fe\u5256\u5206(\u94fe\u5206\u6cbb)\n\n\u6211\u4eec\u5148\u5bf9\u6574\u9897\u6811\u505a\u4e00\u4e2a\u6811\u5256\uff0c\u7136\u540e\u4e00\u6761\u91cd\u94fe\u4e00\u6761\u91cd\u94fe\u7684\u8fdb\u884cdp\n\n\u5148\u6765\u770b\u666e\u901a\u7684dp\u65b9\u7a0b\uff0c\u8bbe$Dp_{i,0}$\u4e3a\u8fd9\u4e2a\u70b9\u4e0d\u5728\u72ec\u7acb\u65f6\u7684\u6700\u5927\u6536\u76ca\uff0c$Dp_{i,1}$\u4e3a\u5728\u7684\u65f6\u5019\u7684\u6700\u5927\u6536\u76ca\n\n## $Dp_{u,0}=\\sum_{v \\in u.son}max(Dp_{v,0},Dp_{v,1})$\n\n## $Dp_{u,1}=\\sum_{v \\in u.son}Dp_{v,0}$\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u4f3c\u4e4e\u53ef\u4ee5\u53d8\u6362\u4e00\u4e0b\u987a\u5e8f\u4e5f\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u6761\u91cd\u94fe\u4e00\u6761\u91cd\u94fe\u7684dp\n\n\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u91c7\u53d6\u4e00\u79cddfs\u548cbfs\u6df7\u5408\u7684\u65b9\u5f0f\u904d\u5386\u8fd9\u9897\u6811\uff0c\u6bcf\u6b21\u5230\u8fbe\u4e00\u4e2a\u91cd\u94fe\u7684\u9876\u90e8\u7684\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u5c06\u8fd9\u4e2a\u91cd\u94fe\u5168\u90e8\u585e\u5230\u961f\u5217\u91cc\uff0c\u7136\u540e\u6211\u4eec\u9012\u5f52\u4e0b\u53bb\u904d\u5386\u548c\u91cd\u94fe\u76f8\u8fde\u7684\u6240\u6709\u91cd\u94fe\uff0c\u6700\u540e\u5904\u7406\u8fd9\u4e2a\u91cd\u94fe\uff0c\u5f53\u5904\u7406\u5b8c\u8fd9\u4e2a\u91cd\u94fe\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u8fd9\u4e2a\u91cd\u94fe\u9876\u6240\u5728\u7684\u5b50\u6811\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u91cd\u94fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5148\u6839\u636e\u8f7b\u513f\u5b50\u7684dp\u503c(\u56e0\u4e3a\u8f7b\u513f\u5b50\u4e00\u5b9a\u662f\u5176\u4ed6\u91cd\u94fe\u7684\u9876\u90e8\u6240\u4ee5dp\u503c\u5fc5\u5b9a\u5df2\u7ecf\u8ba1\u7b97\u597d)\uff0c\u8ba1\u7b97\u51fa\u4e00\u4e2a$ldp_{i,0/1}$\n\n## $ldp_{u,0}=\\sum_{v \\in u.lightson}max(Dp_{v,0},Dp_{v,1})$\n\n## $ldp_{u,1}=\\sum_{v \\in u.lightson}Dp_{v,0}$\n\n\u6b64\u65f6\u6211\u4eec\u6839\u636e\u8fd9\u4e2aldp\u503c\u5728\u91cd\u94fe\u4e0a\u8dd1\u4e00\u4e2a\u5e8f\u5217\u7684dp\n\n## $Dp_{u,0}=ldp_{u,0}+max(Dp_{u.heavyson,0},Dp_{u.heavyson,1})$\n\n## $Dp_{u,1}=ldp_{u,1}+Dp_{u.heavyson,0}$\n\n\u6b64\u65f6\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u8fd9\u6709\u4ec0\u4e48\u7528\u2026\u2026\u8fd8\u4e0d\u662f$O(n)$\u7684dp\u800c\u4e14\u8fd8\u591a\u4e86\u4e00\u5806\u5e38\u6570\n\n\u4f46\u662f\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6210\u529f\u7684\u5c06\u6811\u4e0a\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5e8f\u5217\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u91cd\u94fe\u4e0a\u7684dp\u503c\uff0c\u4ece\u800c\u53ef\u4ee5\u652f\u6301\u5feb\u901f\u4fee\u6539\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u5f53\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u503c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u5bf9\u5e94\u7684\u91cd\u94fe\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\uff0c\u6b64\u65f6\u4f1a\u6539\u53d8\u91cd\u94fe\u9876\u90e8\u7684dp\u503c\uff0c\u7136\u540e\u4f1a\u6539\u53d8\u91cd\u94fe\u9876\u7684father\u7684ldp\u503c\uff0c\u7136\u540e\u53c8\u5bf9\u5e94\u4e86\u7ebf\u6bb5\u6811\u4e0a\u7684\u5355\u70b9\u4fee\u6539\uff0c\u6b64\u65f6\u53c8\u4f1a\u6539\u53d8\u53e6\u4e00\u4e2a\u91cd\u94fe\u9876\u7684dp\u503c\uff0c\n\n\u8fd9\u6837\u53cd\u590d\u51e0\u6b21\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728$O(log^2n)$\u65f6\u95f4\u5185\u5b8c\u6210\u5355\u70b9\u4fee\u6539\n\n\u95ee\u9898\u6765\u4e86\u600e\u4e48\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4dp\u503c\u554a\n\n\u5f88\u7b80\u5355\uff0c\u5229\u7528immortalICO\u795e\u4ed9\u7ed9\u51fa\u7684\u9ed1\u79d1\u6280\uff0c\u6211\u4eec\u5c06\u8f6c\u79fb\u5199\u6210Floyd\u77e9\u4e58\u7684\u5f62\u5f0f\n\n\u6211\u4eec\u5c06\u5e73\u5e38\u7684\u77e9\u9635\u4e58\u6cd5\u6362\u6210\u8fd9\u6837\u7684\u5f62\u5f0f\n\n## $C_{i,j}=\\max_{k}(A_{i,k}+B_{k,j})$\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u91cd\u5b9a\u4e49\u4e4b\u540e\u7684\u77e9\u4e58\u4ecd\u7136\u5177\u6709\u7ed3\u5408\u5f8b\n\n\u5355\u4f4d\u77e9\u9635\u662f\u4e2d\u95f4\u4e00\u884c0\u5269\u4f59\u7684\u5730\u65b9\u5168\u90e8\u662f$- \\infty$\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u4e8b\u5b9e\u4e0a\u91cd\u94fe\u4e0a\u7684\u8f6c\u79fb\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\u7684\u77e9\u4e58\n\n$$\\begin{bmatrix} dp_{i-1,0} \\\\ dp_{i-1,1} \\end{bmatrix} \u00d7 \\begin{bmatrix} ldp_{i,0} & ldp_{i,0} \\\\ ldp_{i,1} & -\\infty \\end{bmatrix}$$\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u6109\u5feb\u7684\u7ef4\u62a4\u77e9\u9635\u8fde\u4e58\u79ef\u5566\uff0c\u901a\u8fc7\u7ef4\u62a4\u77e9\u9635\u8fde\u4e58\u79ef\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0$O(8log^2n)$\u7684\u4fee\u6539\u64cd\u4f5c\u4e86\n\n~~\u611a\u8822\u7684$O(nlog^2n)$\u505a\u6cd5\u5230\u6b64\u7ed3\u675f\uff0c\u6211\u4eec\u5f00\u59cb\u8bb2\u89e3\u4e0a\u53e4\u9b54\u6cd5~~\n_______________\n\n### \u4e0a\u53e4\u79d1\u6280\uff1a\u201c\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\"\n\n\u53ef\u4ee5\u53bb\u7ffb07\u5e74\u7684\u8bba\u6587\u201dQTREE \u89e3\u6cd5\u7684\u4e00\u4e9b\u7814\u7a76\"\uff0c~~(\u201c\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\"\u8fd9\u4e2a\u4e2d\u4e8c\u7684\u540d\u5b57\u662f\u8bba\u6587\u91cc\u8bf4\u7684)~~\n\n\u4f17\u6240\u5468\u77e5\u628a\u521a\u624d\u7684\u6811\u5256\u6362\u6210lct\u5c31\u53ef\u4ee5\u505a\u5230\u4e00\u4e2alog\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0lct\u5b9e\u5728\u662f\u5e38\u6570\u592a!\u5927!\u4e86\uff01\u7edd\u5bf9\u662f\u8dd1\u4e0d\u8fc7\u5b9e\u73b0\u7684\u4f18\u79c0\u7684\u4e00\u70b9\u7684\u6811\u5256\u7684\n\n\u4f46\u662f\u6211\u4eec\u5bf9\u4e8elct\u7684\u590d\u6742\u5ea6\u8bc1\u660e\u5374\u5f88\u611f\u5174\u8da3\uff0c\u4e3a\u5565\u540c\u6837\u662f\u64cd\u4f5c\u4e86logn\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u628a\u7ebf\u6bb5\u6811\u6362\u6210\u5e38\u6570\u66f4\u5927\u7684splay\u590d\u6742\u5ea6\u53cd\u800c\u5c11\u4e86\u4e00\u4e2alog\u5462\uff1f(\u521a\u624d\u8fd9\u53e5\u8bdd\u4e25\u683c\u6765\u8bb2\u662f\u75c5\u53e5\uff0c\u5e38\u6570\u548c\u590d\u6742\u5ea6\u6ca1\u6709\u4efb\u4f55\u5173\u8054)\n\n\u5177\u4f53\u8bc1\u660e\u9700\u8981\u7528\u5230\u52bf\u80fd\u5206\u6790\uff0c\u4f46\u662f\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u662f\u5982\u679c\u6211\u4eec\u628alct\u4e0a\u7684\u865a\u8fb9\u4e5f\u770b\u6210splay\u7684\u8fb9\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u6574\u68f5lct\u53d8\u6210\u4e86\u4e00\u68f5\u5927splay\uff0c\u53ea\u662f\u6709\u4e9b\u70b9\u5ea6\u6570\u4e0d\u662f2\u4e86\n\n\u4f46\u662f\u8fd9\u4e9b\u70b9\u5ea6\u4e0d\u662f2\u7684\u70b9\u5e76\u672a\u7834\u574fsplay\u7684\u52bf\u80fd\u5206\u6790\u6362\u53e5\u8bdd\u8bf4\u52bf\u80fd\u5206\u6790\u5bf9\u6574\u9897\u5927splay\u4ecd\u7136\u751f\u6548,\u6240\u4ee5\u4f60\u7684$log$\u6b21splay\u5728\u6574\u4e2a\u5927splay\u4e0a\u53ea\u662f\u4e00\u6b21splay\u800c\u5df2\n\n\u590d\u6742\u5ea6\u81ea\u7136\u662f\u5747\u644a$O(logn)$\u4e86\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u9897\u9759\u6001\u6811\uff0c\u4f7f\u7528splay\u5b9e\u5728\u662f\u5927(\u5e38)\u6750(\u6570)\u5c0f(\u8fc7)\u7528(\u5927)\u4e86\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5c06lct\u5f3a\u884c\u9759\u6001\u5316\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5efa\u4e00\u4e2a\u50cfsplay\u4e00\u6837\u7684\u5168\u5c40\u5e73\u8861\u7684\u6811\n\n\u89c2\u5bdf\u5230\u7ebf\u6bb5\u6811\u53ea\u662f\u5c40\u90e8\u5e73\u8861\u7684\uff0c\u5728\u78b0\u5230\u4e13\u4e1a\u5361\u94fe\u5256\u7684\u6570\u636e--\u94fe\u5f0f\u5806(\u6839\u53f7n\u4e2a\u957f\u5ea6\u4e3a\u6839\u53f7n\u7684\u94fe\u8fde\u6210\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5f62\u72b6)\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u7b97\u4e0a\u865a\u8fb9\u4e4b\u540e\u7684\u6574\u9897\u6811\u5de6\u503e\u6216\u8005\u53f3\u503e\n\n\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5728\u5efa\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u505a\u70b9\u624b\u811a\uff0c\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u6362\u6210\u4e8c\u53c9\u67e5\u627e\u6811bst\uff0c\u5e76\u4e14\u8fd9\u4e2abst\u4e0d\u662f\u4e25\u683c\u5e73\u8861\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u66f4\u52a0\u4f18\u79c0\u7684\u590d\u6742\u5ea6\uff0c\u4f7f\u5f97\u7b97\u4e0a\u865a\u8fb9\u4e4b\u540e\u7684\u6811\u6811\u9ad8\u8fbe\u5230$O(logn)$\u7ea7\u522b\n\n\u6211\u4eec\u8fd8\u662f\u5728\u6811\u4e0adfs\uff0c\u4f46\u662f\u5bf9\u4e8e\u91cd\u94fe\u5efabst\u7684\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u5efa\u4e00\u4e2a\u5b8c\u7f8e\u7684bst\uff0c\u800c\u662f\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u9644\u4e0a\u4e00\u4e2a\u6743\u503c\uff0c\u6743\u503c\u4e3a\u5b83\u6240\u6709\u8f7b\u513f\u5b50\u7684siz\u4e4b\u548c+1\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u627e\u8fd9\u4e2a\u94fe\u7684\u5e26\u6743\u91cd\u5fc3\uff0c\u628a\u4ed6\u4f5c\u4e3a\u8fd9\u4e00\u7ea7\u7684\u7236\u4eb2\uff0c\u7136\u540e\u9012\u5f52\u4e24\u8fb9\u8fdb\u884c\u5efabst\n\n\u5f53\u7136\u6211\u4eec\u53d1\u73b0\u6700\u574f\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u4e25\u91cd\u5de6\u503e\u6216\u8005\u53f3\u503e\u7684bst\n\n\u4f46\u662f\uff0c\u6211\u4eec\u8003\u8651\u7b97\u4e0a\u865a\u8fb9\u7684\u6574\u9897\u6811\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u795e\u5947\u7684\u6027\u8d28\uff0c\u65e0\u8bba\u662f\u7ecf\u8fc7\u4e00\u6761\u91cd\u7684\u4e8c\u53c9\u6811\u8fb9\u8fd8\u662f\u865a\u8fb9\uff0c\u6240\u5728\u5b50\u6811\u7684siz\u81f3\u5c11\u7ffb\u4e00\u500d\uff0c\u800c\u8fd9\u4e2a\u6027\u8d28\u5728\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u4e0a\u662f\u6ca1\u6709\u7684\n\n\u6240\u4ee5\u8fd9\u4e2a\u5927bst\u7684\u9ad8\u5ea6\u662f$O(logn)$\u7684\n\n\u5f53\u7136\uff0c\u8fd9\u4e2abst\u65e2\u4e0d\u80fd\u65cb\u8f6c\u4e5f\u4e0d\u80fdsplay\uff0c\u6240\u4ee5\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u4f1a\u6bd4\u8f83\u5403\u529b\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u5462\uff1f\u8fd9\u662f\u52a8\u6001dp\u554a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8fd9\u6574\u4e2a\u91cd\u94fe\u7684\u77e9\u9635\u8fde\u4e58\u79ef\u5c31\u884c\u4e86\u2026\u2026\uff0c\u6240\u4ee5\u7ef4\u62a4\u6574\u4e2a\u91cd\u94fe\u7684\u8fde\u4e58\u79ef\u8fd8\u662f\u53ef\u4ee5\u505a\u5230\u7684\n\n\u53e6\u5916\u8fd9\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u542c\u7384\u5b66\u5176\u5b9e\u6bd4\u6811\u5256\u8fd8\u597d\u5199\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=1e5+10;\nint n;int m;int v[2*N];int x[2*N];int ct;int al[N];int siz[N];int h[N];int we[N];\ninline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\ninline int dfs1(int u)//\u8fd9\u91cc\u7684\u6811\u5256\u53ea\u9700\u8981\u4e00\u8d9fdfs\u6c42\u91cd\u513f\u5b50 \n{\n    siz[u]=1;int mx=0;\n    for(int i=al[u];i;i=x[i])\n        if(siz[v[i]]==0){siz[u]+=dfs1(v[i]);if(mx<siz[v[i]])mx=siz[v[i]],h[u]=v[i];}\n    return siz[u];\n}\nstruct mar//\u77e9\u9635\u7c7b \n{\n    int mp[2][2];\n    mar(){mp[0][0]=mp[0][1]=mp[1][0]=mp[1][1]=-0x3f3f3f3f;}\n    mar(int x){mp[0][0]=mp[1][1]=0;mp[1][0]=mp[0][1]=-0x3f3f3f3f;}\n    friend mar operator *(mar a,mar b)\n    {\n        mar c;for(int i=0;i<2;++i)\n            for(int k=0;k<2;++k)\n                for(int j=0;j<2;++j)c.mp[i][j]=max(c.mp[i][j],a.mp[i][k]+b.mp[k][j]);\n        return c;\n    }\n    inline int gmx(){return max(max(mp[0][0],mp[0][1]),max(mp[1][0],mp[1][1]));}\n    inline int* operator [](const int& x){return mp[x];}\n};\nstruct bst\n{\n    int s[N][2];int fa[N];int st[N];int tp;int lsiz[N];bool book[N];int root;\n    mar mul[N];mar w[N];bst(){w[0]=mul[0]=mar(1);}\n    inline void ud(const int& x){mul[x]=mul[s[x][0]]*w[x]*mul[s[x][1]];}\n    inline void gtw(const int& x,const int& v)\n    {w[x][1][0]+=mul[v].gmx();w[x][0][0]=w[x][1][0];w[x][0][1]+=max(mul[v][0][0],mul[v][1][0]);fa[v]=x;}\n    inline void ih(){for(int i=1;i<=n;i++)w[i][0][1]=we[i],w[i][0][0]=w[i][1][0]=0;}\n    inline bool isr(const int& p){return (s[fa[p]][1]!=p)&&(s[fa[p]][0]!=p);}\n    inline int sbuild(const int& l,const int& r)//\u5bf9\u5e8f\u5217\u5efabst \n    {\n        if(l>r)return 0;int tot=0;for(int i=l;i<=r;i++)tot+=lsiz[st[i]];\n        for(int i=l,ns=lsiz[st[i]];i<=r;i++,ns+=lsiz[st[i]])\n            if(2*ns>=tot)\n            {\n                int rs=sbuild(l,i-1);int ls=sbuild(i+1,r);s[st[i]][0]=ls;s[st[i]][1]=rs;\n                fa[ls]=st[i];fa[rs]=st[i];ud(st[i]);return st[i];//\u627e\u91cd\u5fc3\u9012\u5f52\u5efa\u6811 \n            }\n    }\n    inline int build(int p)//\u94fe\u5206\u6cbb\uff0c\u6bcf\u6b21\u5904\u7406\u4e00\u6761\u94fe \n    {\n        for(int t=p;t;t=h[t])book[t]=true;\n        for(int t=p;t;t=h[t])\n            for(int i=al[t];i;i=x[i])if(!book[v[i]])gtw(t,build(v[i]));\n        tp=0;for(int t=p;t;t=h[t])st[++tp]=t;\n        for(int t=p;t;t=h[t])lsiz[t]=siz[t]-siz[h[t]];return sbuild(1,tp);\n    }\n    inline void modify(int p,int W)//\u4fee\u6539\uff0c\u76f4\u63a5\u65e0\u8111\u4fee\u6539\u4e0a\u53bb\u5c31\u884c\u4e86 \n    {\n    \tw[p][0][1]+=W-we[p];we[p]=W;\n        for(int t=p;t;t=fa[t])\n        \tif(isr(t)&&fa[t])//\u5982\u679c\u662f\u8f7b\u8fb9 \n\t\t\t{\n\t\t\t\tw[fa[t]][0][0]-=mul[t].gmx();w[fa[t]][1][0]=w[fa[t]][0][0];\n\t\t\t\tw[fa[t]][0][1]-=max(mul[t][0][0],mul[t][1][0]);ud(t);\n\t\t\t\tw[fa[t]][0][0]+=mul[t].gmx();w[fa[t]][1][0]=w[fa[t]][0][0];\n\t\t\t\tw[fa[t]][0][1]+=max(mul[t][0][0],mul[t][1][0]);\n\t\t\t}else ud(t);\n    }\n}bst;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&we[i]);\n\tfor(int i=1,u,v;i<n;i++){scanf(\"%d%d\",&u,&v);add(u,v);add(v,u);}\n\tdfs1(1);bst.ih();bst.root=bst.build(1);\n\tfor(int i=1,p,w;i<=m;i++)\n\t{scanf(\"%d%d\",&p,&w);bst.modify(p,w);printf(\"%d\\n\",bst.mul[bst.root].gmx());}\n\treturn 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n\n",
        "postTime": 1531015520,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4643 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "> \u672c\u9898\u89e3\u540c\u6b65\u53d1\u5e03\u4e8e[\u80e1\u5c0f\u5154\u7684\u535a\u5ba2](https://www.cnblogs.com/RabbitHu/p/9112811.html)\uff0c\u6b22\u8fce\u6765\u8bbf\u4ea4\u6d41 >v<\n\n\u732b\u951f\u5728WC2018\u8bb2\u7684\u9ed1\u79d1\u6280\u2014\u2014\u52a8\u6001DP\uff0c\u5c31\u662f\u4e00\u4e2a\u753b\u98ce\u6b63\u5e38\u7684DP\u95ee\u9898\u518d\u52a0\u4e0a\u4e00\u4e2a\u52a8\u6001\u4fee\u6539\u64cd\u4f5c\uff0c\u5c31\u50cf\u8fd9\u9053\u9898\u4e00\u6837\u3002\uff08\u8fd9\u9053\u9898\u4e5f\u662fPPT\u4e2d\u7684\u4f8b\u9898\uff09\n\n\u52a8\u6001DP\u7684\u4e00\u4e2a\u5957\u8def\u662f\u628aDP\u8f6c\u79fb\u65b9\u7a0b\u5199\u6210\u77e9\u9635\u4e58\u6cd5\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\uff08\u6811\u4e0a\u7684\u8bdd\u5c31\u662f\u6811\u5256\uff09\u7ef4\u62a4\u77e9\u9635\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u4fee\u6539\u4e86\u3002\n\n\u6ce8\u610f\u8fd9\u4e2a\u201c\u77e9\u9635\u4e58\u6cd5\u201d\u4e0d\u4e00\u5b9a\u662f\u6211\u4eec\u5e38\u89c1\u7684\u90a3\u79cd\u4e58\u6cd5\u548c\u52a0\u6cd5\u7ec4\u6210\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u8bbe$A * B = C$\uff0c\u5e38\u89c1\u7684\u90a3\u79cd\u77e9\u9635\u4e58\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n$$C_{i, j} = \\sum_{k = 1}^{n} A_{i, k} * B_{k, j}$$\n\n\u800c\u8fd9\u9053\u9898\u4e2d\u7684\u77e9\u9635\u4e58\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n$$C_{i, j} = \\max_{k = 1}^{n} (A_{i, k} + B_{k, j})$$\n\n\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5e38\u89c1\u77e9\u9635\u4e58\u6cd5\u4e2d\u7684\u52a0\u6cd5\u53d8\u6210\u4e86max\uff0c\u4e58\u6cd5\u53d8\u6210\u4e86\u52a0\u6cd5\u3002\u7c7b\u4f3c\u4e8e\u4e58\u6cd5\u548c\u52a0\u6cd5\u7684\u4e94\u79cd\u8fd0\u7b97\u5f8b\uff0c\u8fd9\u4e24\u79cd\u53d8\u5316\u4e5f\u6ee1\u8db3\u201c\u52a0\u6cd5\u4ea4\u6362\u5f8b\u201d\u3001\u201c\u52a0\u6cd5\u7ed3\u5408\u5f8b\u201d\u3001\u201cmax\u4ea4\u6362\u5f8b\u201d\u3001\u201cmax\u7ed3\u5408\u5f8b\u201d\u548c\u201c\u52a0\u6cd5\u5206\u914d\u5f8b\u201c\u3002\u90a3\u4e48\u8fd9\u79cd\u77e9\u9635\u4e58\u6cd5\u663e\u7136\u4e5f\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u5c31\u50cf\u6b63\u5e38\u7684\u77e9\u9635\u4e58\u6cd5\u4e00\u6837\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u6784\u9020\u77e9\u9635\u3002\u9996\u5148\u7814\u7a76DP\u65b9\u7a0b\u3002\n\n\u5c31\u50cf\u201c\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u201d\u4e00\u6837\uff0c$f_{i, 0}$\u8868\u793a\u5b50\u6811$i$\u4e2d\u4e0d\u9009$i$\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u5927\u5c0f\uff0c$f_{i, 1}$\u8868\u793a\u5b50\u6811$i$\u4e2d\u9009$i$\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u5927\u5c0f\u3002\n\n\u4f46\u8fd9\u662f\u52a8\u6001DP\uff0c\u6211\u4eec\u9700\u8981\u6811\u94fe\u5256\u5206\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6811\u94fe\u5256\u5206\uff0c\u5256\u51fa\u6765\u7684\u67d0\u6761\u91cd\u94fe\u770b\u8d77\u6765\u5c31\u50cf\u8fd9\u6837\uff0c\u53f3\u8fb9\u7684\u662f\u5728\u6811\u4e0a\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/20275.png)\n\n\u6b64\u65f6\uff0c\u6bd4\u8fd9\u6761\u91cd\u94fe\u7684top\u6df1\u5ea6\u5927\u4e14\u4e0d\u5728\u8fd9\u6761\u91cd\u94fe\u4e0a\u7684\u70b9\u7684DP\u503c\u90fd\u662f\u5df2\u7ecf\u6c42\u51fa\u6765\u7684\uff08\u8fd9\u53ef\u4ee5\u505a\u5230\uff09\u3002\u6211\u4eec\u628a\u5b83\u4eec\u7684\u8d21\u732e\uff0c\u90fd\u7edf\u4e00\u4e8e\u5b83\u4eec\u5728\u8fd9\u6761\u91cd\u94fe\u4e0a\u5bf9\u5e94\u7684\u90a3\u4e2a\u7956\u5148\u4e0a\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u8bbe$g_{i, 0}$\u8868\u793a\u4e0d\u9009$i$\u65f6\uff0c$i$\u4e0d\u5728\u94fe\u4e0a\u7684\u5b50\u5b59\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u5927\u5c0f\uff0c$g_{i, 1}$\u8868\u793a\u9009$i$\u65f6\uff0c$i$\u4e0d\u5728\u94fe\u4e0a\u7684\u5b50\u5b59\u518d\u52a0\u4e0a$i$\u81ea\u5df1\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u5927\u5c0f\u3002\n\n\u5047\u5982$i$\u53f3\u9762\u7684\u70b9\u662f$i + 1$, \u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\uff1a\n\n$$f_{i, 0} = g_{i, 0} + \\max(f_{i + 1, 0}, f_{i + 1, 1})$$\n\n$$f_{i, 1} = g_{i, 1} + f_{i + 1, 0}$$\n\n\u77e9\u9635\u4e5f\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6765\u4e86\uff1a\n\n$$\\begin{bmatrix}g_{i, 0} & g_{i, 0} \\\\g_{i, 1} & 0\\end{bmatrix} * \\begin{bmatrix}f_{i + 1, 0} \\\\ f_{i + 1, 1}\\end{bmatrix} = \\begin{bmatrix}f_{i, 0} \\\\ f_{i, 1}\\end{bmatrix}$$\n\n\u8bfb\u8005\u53ef\u4ee5\u52a8\u7b14\u9a8c\u8bc1\u4e00\u4e0b\u3002\uff08\u6ce8\u610f\u6211\u4eec\u5728\u8fd9\u91cc\u7528\u7684\u201c\u65b0\u77e9\u9635\u4e58\u6cd5\u201d\u7684\u89c4\u5219\uff1a\u539f\u6765\u7684\u4e58\u53d8\u6210\u52a0\uff0c\u52a0\u53d8\u6210\u53d6max\u3002\uff09\n\n\u90a3\u4e48\u57fa\u672c\u601d\u8def\u5c31\u5f88\u6e05\u695a\u4e86\uff1a\u6811\u5256\uff0c\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u79ef\u3002\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u88ab\u4fee\u6539\u8282\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u91cd\u94fe\uff08\u7531\u4e0b\u5230\u4e0a\uff09\uff0c\u5148\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u7136\u540e\u6c42\u51fa\u8fd9\u6761\u91cd\u94fe\u7684$top$\u5728\u4fee\u6539\u4e4b\u540e\u7684$f$\u503c\uff0c\u7136\u540e\u7ee7\u7eed\u4fee\u6539top\u6240\u5728\u91cd\u94fe\u3002\n\n\u6bcf\u6b21\u7b54\u6848\u5c31\u662f\u8282\u70b9$1$\u7684$f$\u503c\u3002\n\n## \u4ee3\u7801\n\n\u4ee3\u7801\u7565\u4e11\uff0c\u89c1\u8c05\u2026\u2026\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <queue>\n#define space putchar(' ')\n#define enter putchar('\\n')\nusing namespace std;\ntypedef long long ll;\ntemplate <class T>\nvoid read(T &x){\n    char c;\n    bool op = 0;\n    while(c = getchar(), c < '0' || c > '9')\n\tif(c == '-') op = 1;\n    x = c - '0';\n    while(c = getchar(), c >= '0' && c <= '9')\n\tx = x * 10 + c - '0';\n    if(op) x = -x;\n}\ntemplate <class T>\nvoid write(T x){\n    if(x < 0) putchar('-'), x = -x;\n    if(x >= 10) write(x / 10);\n    putchar('0' + x % 10);\n}\n\nconst int N = 100005;\nint n, m, a[N];\nint ecnt, adj[N], nxt[2*N], go[2*N];\nint fa[N], son[N], sze[N], top[N], idx[N], pos[N], tot, ed[N];\nll f[N][2];\n\nstruct matrix {\n    ll g[2][2];\n    matrix(){\n\tmemset(g, 0, sizeof(g));\n    }\n    matrix operator * (const matrix &b) const {\n\tmatrix c;\n\tfor(int i = 0; i < 2; i++)\n\t    for(int j = 0; j < 2; j++)\n\t\tfor(int k = 0; k < 2; k++)\n\t\t    c.g[i][j] = max(c.g[i][j], g[i][k] + b.g[k][j]);\n\treturn c;\n    }\n} val[N], data[4*N];\n\nvoid add(int u, int v){\n    go[++ecnt] = v;\n    nxt[ecnt] = adj[u];\n    adj[u] = ecnt;\n}\n\nvoid init(){\n    static int que[N];\n    que[1] = 1;\n    for(int ql = 1, qr = 1; ql <= qr; ql++)\n\tfor(int u = que[ql], e = adj[u], v; e; e = nxt[e])\n\t    if((v = go[e]) != fa[u])\n\t\tfa[v] = u, que[++qr] = v;\n    for(int qr = n, u; qr; qr--){\n\tsze[u = que[qr]]++;\n\tsze[fa[u]] += sze[u];\n\tif(sze[u] > sze[son[fa[u]]])\n\t    son[fa[u]] = u;\n    }\n    for(int ql = 1, u; ql <= n; ql++)\n\tif(!top[u = que[ql]]){\n\t    for(int v = u; v; v = son[v])\n\t\ttop[v] = u, idx[pos[v] = ++tot] = v;\n\t    ed[u] = tot;\n\t}\n    for(int qr = n, u; qr; qr--){\n\tu = que[qr];\n\tf[u][1] = max(0, a[u]);\n\tfor(int e = adj[u], v; e; e = nxt[e])\n\t    if(v = go[e], v != fa[u]){\n\t\tf[u][0] += max(f[v][0], f[v][1]);\n\t\tf[u][1] += f[v][0];\n\t    }\n    }\n}\n\nvoid build(int k, int l, int r){\n    if(l == r){\n\tll g0 = 0, g1 = a[idx[l]];\n\tfor(int u = idx[l], e = adj[u], v; e; e = nxt[e])\n\t    if((v = go[e]) != fa[u] && v != son[u])\n\t\tg0 += max(f[v][0], f[v][1]), g1 += f[v][0];\n\tdata[k].g[0][0] = data[k].g[0][1] = g0;\n\tdata[k].g[1][0] = g1;\n\tval[l] = data[k];\n\treturn;\n    }\n    int mid = (l + r) >> 1;\n    build(k << 1, l, mid);\n    build(k << 1 | 1, mid + 1, r);\n    data[k] = data[k << 1] * data[k << 1 | 1];\n}\nvoid change(int k, int l, int r, int p){\n    if(l == r){\n\tdata[k] = val[l];\n\treturn;\n    }\n    int mid = (l + r) >> 1;\n    if(p <= mid) change(k << 1, l, mid, p);\n    else change(k << 1 | 1, mid + 1, r, p);\n    data[k] = data[k << 1] * data[k << 1 | 1];\n}\nmatrix query(int k, int l, int r, int ql, int qr){\n    if(ql <= l && qr >= r) return data[k];\n    int mid = (l + r) >> 1;\n    if(qr <= mid) return query(k << 1, l, mid, ql, qr);\n    if(ql > mid) return query(k << 1 | 1, mid + 1, r, ql, qr);\n    return query(k << 1, l, mid, ql, qr) * query(k << 1 | 1, mid + 1, r, ql, qr);\n}\nmatrix ask(int u){\n    return query(1, 1, n, pos[top[u]], ed[top[u]]);\n}\nvoid path_change(int u, int x){\n    val[pos[u]].g[1][0] += x - a[u];\n    a[u] = x;\n    matrix od, nw;\n    while(u){\n\tod = ask(top[u]);\n\tchange(1, 1, n, pos[u]);\n\tnw = ask(top[u]);\n\tu = fa[top[u]];\n\tval[pos[u]].g[0][0] += max(nw.g[0][0], nw.g[1][0]) - max(od.g[0][0], od.g[1][0]);\n\tval[pos[u]].g[0][1] = val[pos[u]].g[0][0];\n\tval[pos[u]].g[1][0] += nw.g[0][0] - od.g[0][0];\n    }\n}\n\nint main(){\n\n    read(n);\n    read(m);\n    for(int i = 1; i <= n; i++) read(a[i]);\n    for(int i = 1, u, v; i < n; i++)\n\tread(u), read(v), add(u, v), add(v, u);\n    init();\n    build(1, 1, n);\n    int u, x;\n    matrix t;\n    while(m--){\n\tread(u), read(x);\n\tpath_change(u, x);\n\tt = ask(1);\n\twrite(max(t.g[0][0], t.g[1][0])), enter;\n    }\n\n    return 0;\n}\n\n```",
        "postTime": 1527678847,
        "uid": 8947,
        "name": "RabbitHu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4643 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "# P4719\n\n\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u5e26\u70b9\u6743\u3002\n\n\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7ed9\u5b9a $x,y$\uff0c\u8868\u793a\u4fee\u6539\u70b9xx\u7684\u6743\u503c\u4e3a $y$\u3002\n\n\u4f60\u9700\u8981\u5728\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u6c42\u51fa\u8fd9\u68f5\u6811\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u6743\u503c\u5927\u5c0f\u3002\n\n$1 \\leq n,m \\leq 10^5$\n\n\n\n------\n\n\n\n\u72ec\u7acb\u96c6 : \u65e0\u5411\u56fe\u4e2d\u4e92\u4e0d\u76f8\u90bb\u7684\u70b9\u7ec4\u6210\u7684\u96c6\u5408  \n\n\u6700\u5927\u6743\u72ec\u7acb\u96c6 : \u65e0\u5411\u56fe\u4e2d\u6743\u503c\u548c\u6700\u5927\u7684\u72ec\u7acb\u96c6  \n\n\n\n------\n\n\n\n### \u66b4\u529b\n\n\u5148\u770b\u770b\u95ee\u9898\u7684\u5f31\u5316\u7248 : \u6ca1\u6709\u4fee\u6539\u64cd\u4f5c , $1 \\leq n \\leq 10^5$  \n\n\u8003\u8651\u6811\u5f62dp  \n\n\u7528 $f[i][0]$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d(\u5305\u62ec $i$ ) , \u4e0d\u9009\u62e9 $i$ \u80fd\u5f97\u5230\u7684\u6700\u5927\u6743\u503c\u548c  \n\n\u7528 $f[i][1]$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d(\u5305\u62ec $i$ ) , \u9009\u62e9 $i$ \u80fd\u5f97\u5230\u7684\u6700\u5927\u6743\u503c\u548c  \n\n~~\u663e\u7136~~ $f[i][0]=\\displaystyle\\sum_{u \\in i.son} max(f[u][0],f[u][1])$  \n\n$f[i][1]=value[i]+\\displaystyle\\sum_{u \\in i.son} f[u][0]$  \n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\n\n\u4f46\u5982\u679c\u6bcf\u6b21\u4fee\u6539\u540e\u90fd\u5bf9\u6574\u68f5\u6811dp\u4e00\u6b21\u5c31\u53d8\u6210$O(nm)$ \u80af\u5b9a\u4f1aT\n\n\n\n------\n\n\n\n### \u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u66f4\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u540e , \u5176\u5b9e\u53ea\u6709\u4ece\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684dp\u503c\u9700\u8981\u53d8\u5316  \n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u6539\u8fd9\u6761\u94fe\u4e0a\u7684dp\u503c\u5c31\u884c\u4e86 , \u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f $O(\\displaystyle\\sum Len)$\n\n\u5f53\u6570\u636e\u662f\u4e00\u6761\u94fe\u65f6 , \u5c31\u548c\u4e0a\u4e00\u4e2a\u66b4\u529b\u4e00\u6837\u4e86\n\n\n\n------\n\n\n\n\u518d\u8003\u8651\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898 : \u6709\u4e00\u4e2a\u5e8f\u5217 $a_1 , a_2 ... a_n$  , \u8981\u6c42\u9009\u51fa\u82e5\u5e72\u4e2a\u6570 \n\n\u5728\u4fdd\u8bc1\u9009\u51fa\u7684\u6570\u4e24\u4e24\u4e0d\u76f8\u90bb\u7684\u60c5\u51b5\u4e0b , \u6570\u5b57\u548c\u6700\u5927 \n\n\u6709 $m$ \u6b21\u4fee\u6539\u6743\u503c , $1 \\leq n,m \\leq 10^5$\n\n\n\n\u8fd9\u5c31\u8981\u7528\u5230\u52a8\u6001dp\u4e86\n\n\u6734\u7d20\u7684\u65b9\u6cd5:\n\n> $f[i][0]$ \u8868\u793a\u4ece\u5934\u5230 $i$ \u4e14 $i$ \u4e0d\u9009\u5f97\u5230\u7684\u6700\u5927\u6743\u503c\u548c\n>\n> $f[i][1]$ \u8868\u793a\u4ece\u5934\u5230 $i$ \u4e14 $i$ \u9009\u5f97\u5230\u7684\u6700\u5927\u6743\u503c\u548c\n>\n> $f[i][0]=max(f[i-1][0],f[i-1][1])$  \n>\n> $f[i][1]=value[i]+f[i-1][0]$\n\n\u63a5\u7740\u6211\u4eec\u628a\u8f6c\u79fb\u5199\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f   \n\n\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5 :   $A*B=C$          \n$ C_{i,j}=max(a_{i,k}+b_{k,j} )$\n\n```cpp\nmatrix operator + (const matrix &A, const matrix &B)\n{\n    matrix C;\n    memset(C.data,-63,sizeof(C.data));\n    for (int k=0;k<2;++k)\n        for (int i=0;i<2;++i)\n            for (int j=0;j<2;++j)\n                C.data[i][j]=max(C.data[i][j],\n                                 A.data[i][k]+B.data[k][j]);\n    return C;\n}\n```\n\n\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u79cd\u77e9\u9635\u4e58\u6cd5\u4ecd\u5177\u6709\u7ed3\u5408\u5f8b\n\n\n\n\u63a5\u7740\u5c1d\u8bd5\u628a\u8f6c\u79fb\u5199\u6210\u4e58\u6cd5  \n\n$$ \\begin{bmatrix}0 & 0 \\\\v[i] & -\\infty\\end{bmatrix} \\times \\begin{bmatrix}f[i-1][0] \\\\f[i-1][1]\\end{bmatrix}=\\begin{bmatrix}f[i][0] \\\\f[i][1]\\end{bmatrix} $$  \n\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684\u6570\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u77e9\u9635\n\n\n$$ \\begin{bmatrix}0 & 0 \\\\v[i] & -\\infty\\end{bmatrix} $$  \n\n\u5f53\u6211\u4eec\u8981\u67e5\u8be2 $[l,r]$ \u7684\u7b54\u6848\u65f6 , \u5c06 $[l,r]$ \u4e2d\u7684\u6240\u6709\u77e9\u9635\u4e58\u8d77\u6765\u5c31\u597d\u4e86\n\n\u4e8e\u662f\u60f3\u5230\u4e86\u7ebf\u6bb5\u6811\n\n\u4fee\u6539\u4e5f\u5f88\u7b80\u5355 , \u5728\u7ebf\u6bb5\u6811\u4e0a\u4e00\u8def\u8d70\u4e0b\u53bb , \u5230\u53f6\u5b50\u8282\u70b9\u65f6\u5019 , \u76f4\u63a5\u6539\u5c31\u884c\u4e86 , \u56de\u6eaf\u65f6PushUp\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(mlogn)$\n\n\n\n------\n\n\n\n\u8fd9\u9898\u628a\u95ee\u9898\u51fa\u5230\u4e86\u6811\u4e0a , \u90a3\u518d\u5957\u4e2a LCT \u6216\u6811\u5256\u5c31\u597d\u4e86\n\n\u53ef\u4ee5\u7528$g[i][0/1]$ \u8868\u793a \u5728\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d , \u8f7b\u513f\u5b50\u53ca\u5176\u5b50\u6811\u7684dp\u503c  \n\n$g[i][0]=\\displaystyle\\sum _{u \\in i.lightson}max(f[u][0],f[u][1]) $\n\n$g[i][1]=value[i]+\\displaystyle\\sum _{u \\in i.lightson} f[u][0]$  \n\n\u90a3\u4e48\n\n$f[i][0]=g[i][0]+max(f[i.heavyson][0],f[i.heavyson][1])$\n\n$f[i][1]=g[i][1]+f[i.heavyson][0]$\n\n\u7136\u540e\u628a\u8f6c\u79fb\u6539\u5199\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f  \n\n$$ \\begin{bmatrix}g[x][0] & g[x][0] \\\\g[x][1] & -\\infty\\end{bmatrix}\\times\\begin{bmatrix}f[son[i]][0] \\\\f[son[i]][1]\\end{bmatrix}=\\begin{bmatrix}f[i][0] \\\\f[i][1]\\end{bmatrix} $$\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 LCT \u53bb\u7ef4\u62a4\u4e86\n\n\u6211\u4eec\u5728 $access$ \u65f6\u7ef4\u62a4 $g$ \u6570\u7ec4 , \u5728 $PushUp$ \u65f6\u7ef4\u62a4 $f$ \u6570\u7ec4  \n\n\u4fee\u6539\u65f6\u5148 $access$ \u518d$Splay$ , \u8fd9\u65f6\u4fee\u6539 , \u5bf9\u5176\u4ed6\u8282\u70b9\u6ca1\u6709\u5f71\u54cd , \u76f4\u63a5\u6539\u4e0a\u53bb\u5c31\u597d\u4e86\n\n\u8be2\u95ee\u65f6\u628a1\u53f7\u8282\u70b9 $Splay$ \u5230\u6839 , \u8f93\u51fa $max(f[x][0],f[x][1])$ \u5c31\u597d\u4e86\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7 , \u521d\u59cb\u5316\u65f6\u5148\u628a\u6240\u6709\u513f\u5b50\u5f53\u505a\u8f7b\u513f\u5b50 , \u7528dp\u503c\u521d\u59cb\u5316 $f$ \u548c $g$ \u5c31\u597d\u4e86\n\n\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u5427\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define Finline __inline__ __attribute__ ((always_inline))\nconst int BUFSIZE=1<<26;\nchar ibuf[BUFSIZE],*p1=ibuf,*p2=ibuf+fread(ibuf,1,BUFSIZE,stdin);\nchar obuf[BUFSIZE],buf[13],*t=obuf;\nFinline void read(int &x)\n{\n    char c=*p1++;\n    bool f=0;\n    while(c<48||c>57)\n    {\n        f|=c=='-';\n        c=*p1++;\n    }\n    x=c&15;\n    c=*p1++;\n    while(c>=48&&c<=57) x=(x<<3)+(x<<1)+(c&15),c=*p1++;\n    x=f?-x:x;\n}\nFinline void print(int u)\n{\n    static char *q=buf;\n    if(!u) *t++=48;\n    else\n    {\n    \tif(u<0) *t++='-',u=-u;\n        while(u) *q++=u%10+48,u/=10;\n        while(q!=buf) *t++=*--q;\n    }\n    *t++='\\n';\n}\nconst int inf=0x3f3f3f3f,N=1000005;\nFinline int max(const int &a,const int &b){return a>b?a:b;}\nstruct matrix{\n    int a[2][2];\n    Finline void New(const int &A,const int &B){a[0][0]=a[0][1]=A,a[1][0]=B,a[1][1]=-inf;}\n    Finline int Max(){return max(a[0][0],a[1][0]);}\n    Finline matrix operator * (const matrix &B)const\n    {\n        matrix c;\n        for(int i=0;i<2;++i)\n        {\n            for(int j=0;j<2;++j)\n            {\n                c.a[i][j]=max(a[i][0]+B.a[0][j],a[i][1]+B.a[1][j]);\n            }\n        }\n        return c;\n    }\n};\nstruct node{\n    int fa,ch[2],f[2];\n    matrix x;\n}f[N];\nstruct edge{\n    int v,nxt;\n}c[N<<1];\nint front[N],cnt,v[N];\nFinline void add(const int &u,const int &v){c[++cnt]=(edge){v,front[u]},front[u]=cnt;}\nFinline bool isroot(const int &x){return f[f[x].fa].ch[0]!=x&&f[f[x].fa].ch[1]!=x;}\nFinline bool Identify(const int &x){return f[f[x].fa].ch[1]==x;}\nFinline void PushUp(const int &x)\n{\n    f[x].x.New(f[x].f[0],f[x].f[1]);\n    if(f[x].ch[0]) f[x].x=f[f[x].ch[0]].x*f[x].x;\n    if(f[x].ch[1]) f[x].x=f[x].x*f[f[x].ch[1]].x;\n}\nFinline void rotate(const int &x)\n{\n    int y=f[x].fa,z=f[y].fa,k=Identify(x),w=f[x].ch[k^1];\n    if(!isroot(y)) f[z].ch[Identify(y)]=x;\n    f[y].ch[k]=w,f[x].ch[k^1]=y;\n    if(w) f[w].fa=y;\n    f[x].fa=z,f[y].fa=x;\n    PushUp(y),PushUp(x);\n}\nFinline void Splay(const int &x)\n{\n    int y;\n    while(!isroot(x))\n    {\n        y=f[x].fa;\n        if(!isroot(y)) rotate(Identify(x)==Identify(y)?y:x);\n        rotate(x);\n    }\n    PushUp(x);\n}\nFinline void Access(int x)\n{\n    for(int y=0;x;x=f[y=x].fa)\n    {\n        Splay(x);\n        if(f[x].ch[1])\n        {\n            f[x].f[0]+=f[f[x].ch[1]].x.Max();\n            f[x].f[1]+=f[f[x].ch[1]].x.a[0][0];\n        }\n        if(y)\n        {\n            f[x].f[0]-=f[y].x.Max();\n            f[x].f[1]-=f[y].x.a[0][0];\n        }\n        f[x].ch[1]=y;\n        PushUp(x);\n    }\n}\nvoid dfs(const int &x,const int &fa)\n{\n    f[x].f[1]=v[x];\n    for(int i=front[x];i;i=c[i].nxt)\n    {\n        if(c[i].v!=fa)\n        {\n            f[c[i].v].fa=x;\n            dfs(c[i].v,x);\n            f[x].f[0]+=max(f[c[i].v].f[0],f[c[i].v].f[1]);\n            f[x].f[1]+=f[c[i].v].f[0];\n        }\n    }\n    f[x].x.New(f[x].f[0],f[x].f[1]);\n}\nint main()\n{\n    int n,m,x,y;\n    read(n),read(m);\n    for(int i=1;i<=n;i++) read(v[i]);\n    for(int i=1;i<n;i++)\n    {\n        read(x),read(y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs(1,0);\n    while(m--)\n    {\n        read(x),read(y);\n        Access(x),Splay(x);\n        f[x].f[1]+=y-v[x],v[x]=y;\n        PushUp(x);\n        Splay(1);\n        print(f[1].x.Max());\n    }\n    return fwrite(obuf,1,t-obuf,stdout),0;\n}\n```\n\n",
        "postTime": 1548333959,
        "uid": 81844,
        "name": "xyr2005",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "\u4e4b\u524d\u770b\u9898\u89e3\u770b\u4e0d\u61c2\uff0c\u4e0d\u4f1a\u90a3\u4e9b\u795e\u4ed9\u5199\u7684\u9012\u5f52\u5efa\u6811\u4ec0\u4e48\u7684$.......$\uff0c\u66f4\u522b\u8bf4\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u4e86\uff0c\u867d\u7136\u8c8c\u4f3c\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u6811\u5256\u5361\u8fc7\u53bb\uff0c\u6240\u4ee5\u8fd8\u662f\u5199\u4e2a\u6811\u5256\u7684\u9898\u89e3\uff1f\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u6734\u7d20\u7684\u66b4\u529b$dp$\uff0c\u663e\u7136\u8981\u8bb0\u4e24\u7ef4$dp_{x,0}$\u8868\u793a\u4e0d\u9009\uff0c$dp_{x,1}$\u8868\u793a\u9009\n\n\u90a3\u4e48\u6bd4\u8f83\u6734\u7d20\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\n\n$dp_{x,1} = \\sum_{v}dp_{v,0} + val[x]$\n\n$dp_{x,0} = \\sum_{v} max(dp_{v,0}, dp_{v,1})$\n\n\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u653e\u5728\u6811\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u76f4\u63a5\u8f6c\u79fb\uff0c\u662f\u8981\u5bf9\u5176\u513f\u5b50\u8fdb\u884c\u7edf\u8ba1\uff0c\u8f6c\u79fb\u76f8\u5bf9\u8f83\u4e3a\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u5bf9\u6811\u8fdb\u884c\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u7136\u540e:\n\n\u8003\u8651\u8bb0$ldp_{x,0}$\u8868\u793a\u53ea\u8003\u8651$x$\u7684\u8f7b\u513f\u5b50\u4e14x\u4e0d\u9009\u7684$dp$\u503c\uff0c$ldp_{x,1}$\u8868\u793a\u53ea\u8003\u8651$x$\u7684\u8f7b\u513f\u5b50\u4e14x\u9009\u7684$dp$\u503c\n\n\u7136\u540e$dp_{x,0}$\u548c$dp_{x,1}$\u4e0e\u4e4b\u524d\u4ecd\u7136\u76f8\u540c\n\n\u8fd9\u6837\u5f04\u7684\u8bdd\u6709\u4ec0\u4e48\u597d\u5904\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u70b9$x$\uff0c\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u5176\u91cd\u513f\u5b50\u7684$dp$\u52a0\u4e0a\u5176\u8f7b\u513f\u5b50$ldp$\u7684\u503c\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u5b9a\u4e49\u8fd0\u7b97\uff0c\u8868\u793a\u65b0\u77e9\u9635\u4e58\u6cd5\u3002\n\n\n$\\begin{bmatrix}a& b\\\\c&d\\end{bmatrix}*\\begin{bmatrix}k1&k2\\\\k3&k4\\end{bmatrix}=\\begin{bmatrix}max(a+k1,c+k2)&max(b+k1,d+k2)\\\\max(a+k3,c+k4)&max(b+k3,d+k4)\\end{bmatrix}$\n\n\u7136\u540e\u8fd9\u4e1c\u4e1c\u4ecd\u7136\u6709\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u3002\u3002\n\n\u8003\u8651\u8fd9\u9053\u9898\u7684\u8f6c\u79fb\u7528\u77e9\u9635\u4f18\u5316\n\n\u7136\u540e\u6211\u4eec\u5199\u4e00\u4e0b\u8fd9\u4e2a\u4e1c\u897f\u7684\u8f6c\u79fb\u77e9\u9635\uff1a\n\n$\\begin{bmatrix}dp_{son,0}\\\\dp_{son,1}\\end{bmatrix} * \\begin{bmatrix}ldp_{x,0}&ldp_{x,0}\\\\ldp_{x,1}&-inf\\end{bmatrix} =\\begin{bmatrix}dp_{x,0}\\\\dp_{son,1}\\end{bmatrix} $ \n\n\u7136\u540e\u8fd9\u4e2a\u8f6c\u79fb\u77e9\u9635\u53ea\u548c$ldp$\u503c\u6709\u5173\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848-$dp$\u503c\u5373\u4e3a\u51e0\u4e2a\u70b9\u7684$ldp$\u77e9\u9635\u7684**\u4e58\u79ef**\n\n\u4e4b\u524d\u8c8c\u4f3c\u8bf4\u4e86\u4e00\u53e5\uff1a\n\n```cpp\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u70b9x\uff0c\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u5176\u91cd\u513f\u5b50\u7684dp\u52a0\u4e0a\u5176\u8f7b\u513f\u5b50ldp\u7684\u503c\n```\n\n\u6240\u4ee5\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u4e0d\u96be\u60f3\u5230\u70b9$X$\u7684\u7b54\u6848\u5373\u4e3a\u4ee5\u5176\u4e3a$top$\u7684\u91cd\u94fe\u7684\u77e9\u9635\u4e58\u79ef\u3002\u3002\u3002\n\n\u73b0\u5728\u601d\u8def\u5c31\u6bd4\u8f83\u660e\u6717\u4e86\u3002\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u6211\u4eec\u5c31\u76f4\u63a5\u4fee\u6539\u8fd9\u4e2a\u8f6c\u79fb\u77e9\u9635\u7684$ldp$\u503c\u3002\n\n\u7136\u540e\u6bcf\u6b21\u5f80\u4e0a\u8df3\uff0c\u8df3\u5230\u5176\u6240\u5728\u91cd\u94fe\u9876\u90e8\uff0c\u8ba1\u7b97\u4e00\u6b21\u65b0\u7684$dp$\u503c\uff0c\u7136\u540e\u7528\u65b0\u7684$dp$\u503c\u53bb\u66f4\u65b0$top$\u7684\u7236\u4eb2\u7684\u77e9\u9635\u3002\u3002\u3002\n\n\u66f4\u65b0\u90e8\u5206\u53ef\u4ee5\u597d\u597d\u770b\u770b\uff1f\u53ef\u4ee5\u60f3\u60f3\u6211\u4eec\u600e\u4e48\u5f97\u5230$dp$\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u600e\u4e48\u8fd8\u539f\u56de\u53bb\u3002\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n    char cc = getchar(); int cn = 0, flus = 1;\n    while(cc < '0' || cc > '9'){  if(cc == '-') flus = -flus; cc = getchar();  }\n    while(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n    return cn * flus;\n}\n\nconst int N = 1e5 + 5;\n\n#define ls node * 2\n#define rs node * 2 + 1\n#define inf 999999999\n\nstruct Mat {\n    int m[3][3];\n    void init() {\n        for( int i = 0; i <= 1; ++ i )\n            for( int j = 0; j <= 1; ++ j )\n                m[i][j] = -inf;\n    }\n}tr[N * 4], Val[N];\n\nstruct E {\n    int to, next;\n}e[N * 2];\nstruct Tree {\n    int size, id, fa, top, son, dep, end;\n}t[N * 2];\n\nint n, m, cnt, ldp[N][2], dp[N][2], head[N], a[N], b[N], ctt;\n\nvoid add( int x, int y ) {\n    e[++cnt] = (E){ y, head[x] }, head[x] = cnt;\n    e[++cnt] = (E){ x, head[y] }, head[y] = cnt;\n}\n\n//\u6811\u94fe\u5256\u5206\n\nint dfs1( int x, int fa ) {\n    t[x].dep = t[fa].dep + 1, t[x].size = 1; t[x].fa = fa;\n    int tot, maxson = 0;\n    for( int i = head[x]; i; i = e[i].next ) {\n        int v = e[i].to;\n        if( v == fa ) continue;\n        t[x].size += (tot = dfs1(v, x));\n        if( tot > maxson ) maxson = tot, t[x].son = v;\n    }\n    return t[x].size;\n}\n\nvoid dfs2( int x, int high ) {\n    t[x].id = ++ ctt, b[ctt] = x;\n    t[high].end = ctt, t[x].top = high; \n    if( !t[x].son ) {  return ;  }\n    dfs2( t[x].son, high );\n    for( int i = head[x]; i; i = e[i].next ) {\n        int v = e[i].to;\n        if( v == t[x].fa || v == t[x].son ) continue;\n        dfs2(v, v);\n    }\n}\n\n//\u9884\u5904\u7406\u51fa\u521d\u59cb\u7684dp\u503c\u548cldp\u503c\n\nvoid dfs3( int x ) {\n    ldp[x][1] = a[x];\n    for( int i = head[x]; i; i = e[i].next ) {\n        int v = e[i].to;\n        if( v == t[x].fa || v == t[x].son ) continue;\n        dfs3( v ); ldp[x][0] += max( dp[v][1], dp[v][0] ), ldp[x][1] += dp[v][0];\n    }\n    dp[x][0] += ldp[x][0], dp[x][1] += ldp[x][1];\n    if( !t[x].son ) return ;\n    dfs3( t[x].son );\n    dp[x][0] += max(dp[t[x].son][1], dp[t[x].son][0]);\n    dp[x][1] += dp[t[x].son][0];\n} \n\n//\u65b0\u5b9a\u4e49\u77e9\u9635\u4e58\u6cd5\n\nMat Mul( Mat a, Mat b ) {\n    Mat ans; ans.init();\n    for( int i = 0; i < 2; ++ i )  for( int j = 0; j < 2; ++ j )\n    for( int k = 0; k < 2; ++ k )  ans.m[i][j] = max( ans.m[i][j], a.m[i][k] + b.m[k][j] );\n    return ans;\n}\n\n//seg_Tree \n\n//\u8fd9\u91cc\u7684b[x]\u8868\u793ax\u8fd9\u4e2a\u70b9\uff08\u7ebf\u6bb5\u6811\u533a\u95f4\u4e0a\u7684\u70b9\uff09\u6240\u5bf9\u5e94\u7684\u6811\u4e0a\u7f16\u53f7\uff0c\u90a3\u4e48\u521d\u59cb\u5316\u65f6\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2aVal[x]\u8868\u793a\u5728\u6811\u4e0a\u7f16\u53f7\u4e3ax\u7684\u70b9\u6240\u5bf9\u5e94\u7684\u77e9\u9635\uff0c\u8fd9\u6837\u5199\u4f1a\u65b9\u4fbf\u70b9\u3002\nvoid build( int node, int l, int r ) {\n    if( l == r ) {\n        Val[b[l]].m[0][0] = ldp[b[l]][0], Val[b[l]].m[1][0] = ldp[b[l]][1];\n        Val[b[l]].m[0][1] = ldp[b[l]][0], Val[b[l]].m[1][1] = -inf;\n        tr[node] = Val[b[l]];\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    build( ls, l, mid ); build( rs, mid + 1, r );\n    tr[node] = Mul( tr[ls], tr[rs] );\n}\n\n//ddp\u4e2d\u8be2\u95ee\u6709\u70b9\u4e0d\u4e00\u6837\uff08\u8ddf\u6211\u4ee5\u524d\u5199\u7ebf\u6bb5\u6811\u4e0d\u592a\u4e00\u6837\uff09\uff0c\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u4e3b\u8981\u662f\u8d8a\u754c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a...\u51680/-inf\u77e9\u9635\uff08\u867d\u7136\u5176\u5b9e\u4e5f\u53ef\u4ee5\u6784\u9020\u5355\u4f4d\u77e9\u9635\uff1f\uff09\n\nMat query( int node, int l, int r, int ql, int qr ) {\n    if( l >= ql && r <= qr ) return tr[node];\n    int mid = ( l + r ) >> 1;\n    if( mid >= qr ) return query( ls, l, mid, ql, qr );\n    if( mid < ql ) return query( rs, mid + 1, r, ql, qr );\n    return Mul( query( ls, l, mid, ql, qr ), query( rs, mid + 1, r, ql, qr ) );\n}\n//\u6811\u5256\u7684\u8df3\nvoid update( int node, int l, int r, int wh ) {\n    if( l == r && l == wh ) {\n        tr[node] = Val[b[wh]];\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if( mid >= wh ) update( ls, l, mid, wh );\n    else update( rs, mid + 1, r, wh );\n    tr[node] = Mul( tr[ls], tr[rs] );\n} \n// \u6811\u5256\n\nMat last, newm, k_ans;\n\nvoid Change(int u, int w) {\n    Val[u].m[1][0] += w - a[u];\n    a[u] = w;\n    while (u != 0) {\n        int now = t[u].top;\n        last = query(1, 1, n, t[now].id, t[now].end );\n        update(1, 1, n, t[u].id);\n        newm = query(1, 1, n, t[now].id, t[now].end );\n        u = t[now].fa;\n        Val[u].m[0][0] += max( newm.m[0][0], newm.m[1][0] ) - max( last.m[0][0], last.m[1][0] );\n        Val[u].m[0][1] = Val[u].m[0][0];\n        Val[u].m[1][0] += newm.m[0][0] - last.m[0][0];\n  }\n}\nsigned main()\n{\n    n = read(), m = read(); int x, y, z;\n    for( int i = 1; i <= n; ++ i ) a[i] = read();\n    for( int i = 1; i < n; ++ i ) x = read(), y = read(), add( x, y );\n    dfs1(1, 0), dfs2(1, 1), dfs3(1), build( 1, 1, n );\n    \n    for( int i = 1; i <= m; ++ i ) {\n        x = read(), y = read();\n        Change( x, y ); \n        k_ans = query( 1, 1, n, t[1].id, t[1].end );\n        printf(\"%d\\n\", max( k_ans.m[0][0], k_ans.m[1][0] ));\n    }\n    return 0;\n}\n```",
        "postTime": 1552310955,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "\u867d\u7136\u6b63\u89e3\u662f\u52a8\u6001dp\uff0c\u8fd9\u6280\u672f\u4e5f\u662f\u5f88\u795e\u4ed9\u4e86\u3002\u8fd9\u9898\u5176\u5b9e\u5f88\u7b80\u5355\u4e00\u4e2a\u589e\u91cf\u5f0f\u5c31\u80fd\u8fc7\u4e86\uff08\u6216\u8005\u8bf4\u6570\u636e\u6c34\uff1f\uff09\n\n\u9996\u5148\u5355\u6b21\u67e5\u8be2\u7684\u6811\u5f62DP\u4e0d\u7528\u7ec6\u8bf4\u4e86\n\u72b6\u6001\uff1a\n\tf[u][0]=\u9876\u70b9u\u7684\u5b50\u6811\uff0cu\u4e0d\u9009\uff0c\u6700\u5927\u6536\u76ca\n\tf[u][1]=\u9876\u70b9u\u7684\u5b50\u6811\uff0cu\u9009\uff0c\u6700\u5927\u6536\u76ca\n\u8f6c\u79fb\u65b9\u7a0b\uff08v\u662fu\u7684\u5b50\u8282\u70b9\uff09\uff1a\n\tf[u][0]=sum{max(f[v][0],f[v][1])}+V[u]\n\tf[u][1]=sum{f[v,0]}\n\n\u4e00\u6b21\u70b9\u66f4\u65b0\u53ea\u4f1a\u5f71\u54cd\u5230x\u53ca\u5176\u7956\u5148\u8282\u70b9\u7684\u72b6\u6001\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u66f4\u65b0\u8fd9\u4e9b\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5c31\u66b4\u529b\u91cd\u7b97\u8f6c\u79fb\u65b9\u7a0b\u5c31\u884c\u4e86\u3002\u7406\u8bba\u4e0a\u6700\u574f\u60c5\u51b5\u5e94\u8be5\u662fO(nm)\uff0c\u4f46\u662f\u5bf9\u968f\u673a\u6570\u636e\uff0c\u5b9e\u9645\u88ab\u91cd\u7b97\u7684\u8282\u70b9\u548c\u91cd\u7b97\u91cf\u8fdc\u5c0f\u4e8en\uff08\u672c\u4eba\u8bd5\u4e86\u751f\u6210\u6811\u9ad8\u5ea6\u4e3an/2\u7684\u968f\u673a\u6570\u636e\uff0c\u7167\u6837\u79d2\u8fc7\uff09\n\n\u771f\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u9009\u62e9\u52a8\u6001dp\u5417\uff1f\u663e\u7136\u4e0d\u4f1a\u5bf9\u4e0d\u5bf9\u5475\u5475\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100009;\nstruct E { int t,nxt; } es[N<<1];\n\n// f\u662f\u7236\u8282\u70b9\nint n,m,cnt,dp[N][2],hd[N],a[N],f[N];\n\nvoid add(int x,int y) {\n    es[++cnt]=(E){y,hd[x]},hd[x]=cnt;\n    es[++cnt]=(E){x,hd[y]},hd[y]=cnt;\n}\n\nvoid dfs(int x,int fa) {\n    dp[x][1]=a[x],dp[x][0]=0,f[x]=fa;\n    for (int i=hd[x];i;i=es[i].nxt) {\n        if (es[i].t==fa) continue;\n        dfs(es[i].t,x);\n        dp[x][0]+=max(dp[es[i].t][1],dp[es[i].t][0]);\n        dp[x][1]+=dp[es[i].t][0];\n    }\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i) scanf(\"%d\",a+i);\n    for (int i=1,x,y;i<n;++i) scanf(\"%d%d\",&x,&y),add(x,y);\n    dfs(1,0);\n    for (int i=1,x,y;i<=m;++i) {\n        scanf(\"%d%d\",&x,&y);\n        for (a[x]=y;x;x=f[x]){ // \u91cd\u7b97\u6240\u6709\u7956\u5148\n            dp[x][1]=a[x],dp[x][0]=0;\n            for (int j=hd[x];j;j=es[j].nxt) {\n                if (es[j].t==f[x]) continue;\n                dp[x][0]+=max(dp[es[j].t][1],dp[es[j].t][0]);\n                dp[x][1]+=dp[es[j].t][0];\n            }\n        }\n        printf(\"%d\\n\",max(dp[1][0],dp[1][1]));\n    }\n    return 0;\n}\n```\n\n\u5b9e\u6d4b\u7531\u4e8e\u52a8\u6001dp\u5de8\u5927\u7684\u5e38\u6570\uff0c\u8fd9\u4e2a\u4ee3\u7801\u6bd4\u6b63\u89e3\u8fd8\u8981\u5feb3\u500d\u5de6\u53f3\n\n",
        "postTime": 1555659811,
        "uid": 43145,
        "name": "distantlight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001 DP\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u7528$LCT$\u7684\u5927\u4f6c\uff0c \u849f\u84bb\u5c31\u63d0\u4f9b\u4e00\u7bc7$LCT$\u7684\u9898\u89e3\u3002\n\n\u5b9e\u9645\u4e0a$LCT$\u548c\u6811\u5256\u7684\u7ef4\u62a4\u65b9\u6cd5\u662f\u5dee\u4e0d\u591a\u7684\uff0c \u53ea\u662f\u6bcf\u4e2a\u70b9\u90fd\u9700\u8981\u989d\u5916\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u7684$g(i,0/1)$\u3002 $pushup$\u7684\u65f6\u5019\u5148\u7528$g(i,0/1)$\u521d\u59cb\u5316\u81ea\u5df1\u7684\u77e9\u9635\uff0c \u7136\u540e\u7528\u5de6\u513f\u5b50\u4e58\u81ea\u5df1\u7684\u77e9\u9635\uff0c \u518d\u7528\u81ea\u5df1\u4e58\u53f3\u513f\u5b50\u7684\u77e9\u9635\u5c31\u597d\u4e86\u3002\n\n\u4e3a\u4e86\u597d\u5199\uff0c \u53ef\u4ee5\u5148\u628a\u6240\u6709\u513f\u5b50\u8bbe\u4e3a\u865a\u513f\u5b50\uff0c \u7136\u540e\u76f4\u63a5\u7528$dp[i][0/1]$\u521d\u59cb\u5316$g(i,0/1)$\u5373\u53ef\u3002\n\n$access$\u7684\u65f6\u5019\u548c\u6811\u5256\u4e00\u6837\u5411\u4e0a\u66f4\u65b0\u5bf9\u5e94\u70b9\u7684$g$\u503c\u5373\u53ef\u3002\n\n~~\u8fd9\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u51e0\u9053LCT\u8dd1\u7684\u6bd4\u6811\u5256\u5feb\u7684\u9898\u76ee\u4e86~~\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#define R register\n#define IN inline\n#define W while\n#define gc getchar()\n#define MX 100500\n#define INF 1000000000\n#define ll long long\nbool neg;\ntemplate <class T>\nIN void in(T &x)\n{\n\tx = 0; R char c = gc;\n\tfor (; !isdigit(c); c = gc)\n\tif (c == '-') neg = true;\n\tfor (;  isdigit(c); c = gc)\n\tx = (x << 1) + (x << 3) + c - 48;\n\tif (neg) neg = false, x = -x;\n}\ntemplate <class T> IN T max(T a, T b) {return a > b ? a : b;}\ntemplate <class T> IN T min(T a, T b) {return a < b ? a : b;}\n\nint head[MX], val[MX], fat[MX], sta[MX];\nll dp[MX][2];\nint dot, q, cnt, top;\nstruct Edge {int to, nex;} edge[MX << 1];\nIN void add(R int from, R int to) {edge[++cnt] = {to, head[from]}, head[from] = cnt;}\nstruct Matrix\n{\n\tll mat[2][2];\n\tMatrix(){mat[0][0] = mat[0][1] = mat[1][0] = mat[1][1] = -INF;}\n\tIN void ini(ll a, ll b) {mat[0][0] = mat[0][1] = a, mat[1][0] = b, mat[1][1] = -INF;}\n};\nIN Matrix operator * (const Matrix &x, const Matrix &y)\n{\n\tMatrix ret;\n\tret.mat[0][0] = max(x.mat[0][0] + y.mat[0][0], x.mat[0][1] + y.mat[1][0]);\n\tret.mat[0][1] = max(x.mat[0][0] + y.mat[0][1], x.mat[0][1] + y.mat[1][1]);\n\tret.mat[1][0] = max(x.mat[1][0] + y.mat[0][0], x.mat[1][1] + y.mat[1][0]);\n\tret.mat[1][1] = max(x.mat[1][0] + y.mat[0][1], x.mat[1][1] + y.mat[1][1]);\n\treturn ret;\n}\nstruct Node {int son[2], fat; ll f[2]; Matrix dp; bool rev;} tree[MX];\nnamespace LCT\n{\n\t#define ls tree[now].son[0]\n\t#define rs tree[now].son[1]\n\t#define dad tree[now].fat\n\tIN bool get(R int now) {return tree[dad].son[1] == now;}\n\tIN bool nroot(R int now) {return tree[dad].son[0] == now || tree[dad].son[1] == now;}\n\tIN void pushup(R int now)\n\t{\n\t\ttree[now].dp.ini(tree[now].f[0], tree[now].f[1]);\n\t\tif (ls) tree[now].dp = tree[ls].dp * tree[now].dp;\n\t\tif (rs) tree[now].dp = tree[now].dp * tree[rs].dp;\n\t}\n\tIN void pushrev(R int now) {std::swap(ls, rs), tree[now].rev ^= 1;}\n\tIN void pushdown(R int now) {if (tree[now].rev) pushrev(ls), pushrev(rs), tree[now].rev = false;}\n\tIN void rotate(R int now)\n\t{\n\t\tR int fa = dad, grand = tree[fa].fat;\n\t\tR bool dir = get(now);\n\t\ttree[fa].son[dir] = tree[now].son[dir ^ 1];\n\t\ttree[tree[now].son[dir ^ 1]].fat = fa;\n\t\ttree[now].fat = grand;\n\t\tif (nroot(fa)) tree[grand].son[get(fa)] = now;\n\t\ttree[fa].fat = now;\n\t\ttree[now].son[dir ^ 1] = fa;\n\t\tpushup(fa); pushup(now);\n\t}\n\tIN void splay(R int now)\n\t{\n\t\tR int tmp = now, fa;\n\t\tsta[top = 1] = now;\n\t\tW (nroot(now)) sta[++top] = now = dad;\n\t\tW (top) pushdown(sta[top--]);\n\t\tnow = tmp;\n\t\tW (nroot(now))\n\t\t{\n\t\t\tfa = dad;\n\t\t\tif (nroot(fa)) rotate(get(now) == get(fa) ? fa : now);\n\t\t\trotate(now);\n\t\t}\n\t\tpushup(now);\n\t}\n\tIN void access(R int now)\n\t{\n\t\tfor (R int x = 0; now; x = now, now = dad)\n\t\t{\n\t\t\tsplay(now);\n\t\t\tif (rs)\n\t\t\t{\n\t\t\t\ttree[now].f[0] += max(tree[rs].dp.mat[0][0], tree[rs].dp.mat[1][0]);\n\t\t\t\ttree[now].f[1] += tree[rs].dp.mat[0][0];\n\t\t\t}\n\t\t\tif (x)\n\t\t\t{\n\t\t\t\ttree[now].f[0] -= max(tree[x].dp.mat[0][0], tree[x].dp.mat[1][0]);\n\t\t\t\ttree[now].f[1] -= tree[x].dp.mat[0][0];\n\t\t\t}\n\t\t\trs = x; pushup(now);\n\t\t}\n\t}\n\tIN void makeroot(R int now) {access(now), splay(now), pushrev(now);}\n\t#undef ls\n\t#undef rs\n\t#undef dad\n}\nvoid DFS(R int now, R int fa)\n{\n\tdp[now][1] = val[now];\n\tfor (R int i = head[now]; i; i = edge[i].nex)\n\t{\n\t\tif (edge[i].to == fa) continue;\n\t\ttree[edge[i].to].fat = now;\n\t\tDFS(edge[i].to, now);\n\t\tdp[now][1] += dp[edge[i].to][0];\n\t\tdp[now][0] += max(dp[edge[i].to][0], dp[edge[i].to][1]);\n\t}\n\ttree[now].dp.ini(dp[now][0], dp[now][1]);\n\ttree[now].f[0] = dp[now][0], tree[now].f[1] = dp[now][1];\n}\nint main(void)\n{\n\tint a, b, tar;\n\tll buf;\n\tin(dot), in(q);\n\tfor (R int i = 1; i <= dot; ++i) in(val[i]);\n\tfor (R int i = 1; i < dot; ++i) in(a), in(b), add(a, b), add(b, a);\n\tDFS(1, 0);\n\tW (q--)\n\t{\n\t\tin(tar), in(buf);\n\t\tLCT::access(tar), LCT::splay(tar);\n\t\ttree[tar].f[1] += buf - val[tar]; val[tar] = buf;\n\t\tLCT::pushup(tar);\n\t\tLCT::splay(1);\n\t\tprintf(\"%lld\\n\", max(tree[1].dp.mat[0][0], tree[1].dp.mat[1][0]));\n\t}\n}\n```",
        "postTime": 1542338854,
        "uid": 67492,
        "name": "LPA20020220",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P4719)\n\u60f3\u90fd\u4e0d\u7528\u60f3,\u8bb0$f[x][0]$\u4e3a\u4e0d\u9009x\u8282\u70b9\u7684x\u5b50\u6811\u6700\u5927\u6743\u503c\u548c,$f[x][1]$\u4e3a\u9009x\u8282\u70b9\u7684x\u5b50\u6811\u6700\u5927\u6743\u503c\u548c\n\n\u5219\u6709\n#### $f[x][0]=\\sum {max(f[u][0],f[u][1])}(u\\in son[x])$\n#### $f[x][1]=v[x]+\\sum{f[u][0]}(u\\in son[x])$\n\n\u4f46\u662f\u5982\u679c\u8981\u53d8\u5f97\u53ef\u7ef4\u62a4\uff0c\u90a3\u4e48\u5c31\u4e0d\u5e94\u8be5\u5b58\u5728$\\sum$\u5bf9\u5427\uff0c\u90a3\u6211\u4eec\u8ba4\u4e3a\u5c06\u6574\u68f5\u6811\u8fdb\u884c\u8f7b\u865a\u5b9e\u8fb9\u5256\u5206\uff08\u8fd9\u91cc\u7528\u7684\u662f$link-cut-tree$\uff0c\u590d\u6742\u5ea6\u6bd4\u6811\u5256\u5c11\u4e00\u4e2alog\uff09\uff0c\n\u5256\u5206\u4e4b\u540e\u53d1\u73b0\u53ea\u7528\u7ef4\u62a4\u5b9e\u8fb9\u4e0a\u4fe1\u606f\u5c31\u597d\u4e86\uff0c\u6bcf\u4e2a\u8282\u70b9\u8fde\u7684\u865a\u8fb9\u5f88\u597d\u7ef4\u62a4\uff0caccess\n\u65f6\u4fee\u6539\u865a\u5b9e\u8fb9\u65f6\u4fee\u6539\u5373\u53ef\n\n#### $g[x][0]=\\sum{max(f[u][0],f[u][1])}(u\\in son[x])$\uff08\u4e0d\u5305\u62ec\u91cd\u513f\u5b50\u5373\u5b9e\u8fb9\u76f8\u8fde\u7684\u513f\u5b50\uff09\n#### $g[x][1]=v[x]+\\sum{f[u][0]}$\uff08\u4e0d\u5305\u62ec\u91cd\u513f\u5b50\u5373\u5b9e\u8fb9\u76f8\u8fde\u7684\u513f\u5b50\uff09\n\n\u5219\u6709\n\n$f[x][0]=g[x][0]+max(f[u][0],f[u][1])$\uff08u\u4e3a\u91cd\u513f\u5b50\uff09\n\n$f[x][1]=g[x][1]+f[u][0]$(u\u4e3a\u91cd\u513f\u5b50)\n\n\u90a3\u4e48\u6784\u9020\u77e9\u9635\u6765\u7ef4\u62a4\u5c31\u597d\u4e86\n\n$\\begin{bmatrix}g[x][0]&g[x][0]\\\\g[x][1]&-\\infty\\end{bmatrix}\\times\\begin{bmatrix}f[u][0]\\\\f[u][1]\\end{bmatrix}=\\begin{bmatrix}f[x][0]\\\\f[x][1]\\end{bmatrix}$\n\n\u56e0\u4e3a\u6ee1\u8db3\u77e9\u9635\u7ed3\u5408\u5f8b,\u90a3\u4e48\u7ef4\u62a4lct\u4e0a\u4e00\u4e2a\u8282\u70b9\u77e9\u9635$prd[x]=prd[lc]*val[x]*prd[rc]$($val:$\u5355\u4f4d\u77e9\u9635\uff0c$prd:$\u4ee5\u542bx\u7684\u94fe\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u7684\u6240\u6709$val$\u7684\u4e58\u79ef)\u5c31\u884c\u4e86\n\naccess\u7684\u65f6\u5019\u4f1a\u6539\u53d8\u53f3\u513f\u5b50\uff08\u6709\u7684\u8bdd\uff09,\u53f3\u513f\u5b50\u4ece\u91cd\u53d8\u8f7b,\u76f8\u5e94\u7684$g[x]$\u8981\u52a0\u4e0a\u5bf9\u5e94\u7684\u503c,\u540c\u6837 \u4ee4$ch[x][1]=y$\uff0c\u4ece\u8f7b\u53d8\u91cd,$g[x]$\u8981\u51cf\u53bb\u5bf9\u5e94\u7684\u503c\n\n\u8fd9\u6837\u5c31\u6109\u5feb\u7684A\u4e86\u8fd9\u9898\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define max_(a,b) (a>b?a:b)\nusing namespace std;\n//f[x][0]=sigma(f[son[x]][0],f[son[x]][1])(\u6240\u6709\u513f\u5b50)\n//f[x][1]=v[x]+sigma(f[son[x]][0])(\u6240\u6709\u513f\u5b50)\n//\u4ee4g[x][0]=sigma(f[son[x]][0],f[son[x]][1])(\u8f7b\u513f\u5b50) \n//g[x][1]=sigma(f[son[x]][0])+v[x](\u8f7b\u513f\u5b50)\n//\u5219\u6709f[x][0]=g[x][0]+max(f[u][0],f[u][1])\n//f[x][1]=g[x][1]+f[u][0] \n//\u90a3\u4e48\u6784\u9020\u77e9\u9635\u7ef4\u62a4\u5373\u53ef \nconst int inf=(1<<30);\nstruct Matrix{int a[2][2];Matrix(){a[0][0]=a[0][1]=a[1][0]=a[1][1]=-inf;}};\ninline Matrix operator *(Matrix A,Matrix B){\n\tMatrix C;\n\tfor(int i=0;i<2;++i)\n\t\tfor(int j=0;j<2;++j)\n\t\t\tfor(int k=0;k<2;++k)\n\t\t\t\tC.a[i][j]=max_(C.a[i][j],A.a[i][k]+B.a[k][j]);\n\treturn C;\n}\nconst int N=100010;\nint a[N],dp[N][2],d[N],nxt[N<<1],to[N<<1],tot;\ninline void ins(int a,int b){to[++tot]=b;nxt[tot]=d[a];d[a]=tot;}\nstruct link_cut_tree{\n\tMatrix val[N],prd[N];\n\tint ch[N][2],fa[N];\n\t#define lc ch[x][0]\n\t#define rc ch[x][1]\n\tinline void pushup(int x){prd[x]=val[x];if(lc)prd[x]=prd[lc]*prd[x];if(rc)prd[x]=prd[x]*prd[rc];}\n\tinline bool root(int x){int y=fa[x];return !((ch[y][0]==x)||(ch[y][1]==x));}\n\tinline void rotate(int x){\n\t\tint y=fa[x],z=fa[y],k=ch[y][1]==x;\n\t\tif(!root(y))ch[z][ch[z][1]==y]=x;\n\t\tfa[x]=z;ch[y][k]=ch[x][k^1];if(ch[x][k^1])fa[ch[x][k^1]]=y;\n\t\tch[x][k^1]=y;fa[y]=x;pushup(y);pushup(x);\n\t}inline void splay(int x){\n\t\tint y,z;\n\t\twhile(!root(x)){\n\t\t\ty=fa[x],z=fa[y];\n\t\t\tif(!root(y)){(ch[y][1]==x)^(ch[z][1]==y)?rotate(x):rotate(y);}\n\t\t\trotate(x);\n\t\t}\n\t}\n\tinline void access(int x){\n\t\tfor(int y=0;x;x=fa[y=x]){\n\t\t\tsplay(x);\n\t\t\tif(rc){\n\t\t\t\tval[x].a[0][0]+=max_(prd[rc].a[0][0],prd[rc].a[1][0]);\n\t\t\t\tval[x].a[1][0]+=prd[rc].a[0][0];\n\t\t\t}\n\t\t\tif(y){\n\t\t\t\tval[x].a[0][0]-=max_(prd[y].a[0][0],prd[y].a[1][0]);\n\t\t\t\tval[x].a[1][0]-=prd[y].a[0][0];\n\t\t\t}val[x].a[0][1]=val[x].a[0][0];\n\t\t\trc=y;pushup(x);\n\t\t}\n\t}\n\tinline void modify(int x,int y){\n\t\taccess(x);splay(x);\n\t\tval[x].a[1][0]-=a[x]-y;\n\t\tpushup(x);a[x]=y;\n\t}\n\tinline void dfs(int x){\n\t\tdp[x][1]=a[x];\n\t\tfor(int i=d[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(u!=fa[x]){\n\t\t\t\tfa[u]=x;\n\t\t\t\tdfs(u);\n\t\t\t\tdp[x][0]+=max_(dp[u][0],dp[u][1]);\n\t\t\t\tdp[x][1]+=dp[u][0];\n\t\t\t}\n\t\t}\n\t\tval[x].a[0][0]=val[x].a[0][1]=dp[x][0];\n\t\tval[x].a[1][0]=dp[x][1];\n\t\tprd[x]=val[x];\n\t}\n}my;\nint n,m;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&a[i]);\n\tint a,b;\n\tfor(int i=1;i<n;++i){scanf(\"%d%d\",&a,&b);ins(a,b);ins(b,a);}\n\tmy.dfs(1);\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tmy.modify(a,b);\n\t\tmy.splay(1);\n\t\tprintf(\"%d\\n\",max_(my.prd[1].a[0][0],my.prd[1].a[1][0]));\n\t} \n\treturn 0;\n}\n```\nUpdate:\ng\u7ef4\u62a4\u7684\u6211\u60f3\u8bf4\u7684\u662f\u4e0d\u5305\u62ec\u91cd\u513f\u5b50\uff0c\u5373\u5b9e\u8fb9\u76f8\u8fde\u7684\u513f\u5b50\uff0c\u9017\u53f7\u540e\u9762\u5185\u5bb9\u662f\u505a\u8865\u5145\u8bf4\u660e\uff0c\u73b0\u8fdb\u884c\u4fee\u6539\u3002  \n\u9632\u6284\u7684\u8bdd\u5176\u5b9e\u6211\u4e5f\u662f\u5f53\u65f6\u770b\u5230\u5f88\u591a\u7684\u9898\u89e3\u559c\u6b22\u8fd9\u4e48\u505a\u5c31\u8ddf\u7740\u641e\u4e86\u4e00\u4e2a\uff0c\u671b\u8c05\u89e3\u3002",
        "postTime": 1551076359,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "\u52a8\u6001\u89c4\u5212\u5165\u95e8---P4719 \u52a8\u6001dp\u3010\u6a21\u677f\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u52a8\u6001DP \uff08\u6811\u94fe\u5256\u5206 + \u77e9\u9635\uff09\n\u524d\u51e0\u5929\u8003\u4e86\u4e00\u9053DDP\uff0c\u4eca\u5929\u5c31\u6765\u505a\u4e00\u4e0b\u8fd9\u9053DDP\u6a21\u677f\u9898\u3002\n\n\u6ca1\u60f3\u5230\u6309\u7167\u90a3\u9053\u9898\u7684\u601d\u8def\uff0c\u8fd9\u9053\u9898\u5f88\u795e\u5947\u7684\u5c31\u8fc7\u4e86\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1a[\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a ](https://www.luogu.org/problem/P1352)\n\n\u8fd9\u9053\u9898\u5c31\u662f\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u7684\u52a8\u6001\u7248\uff08\u5e26\u4fee\u6539\uff09\u3002\n\n\u9996\u5148DDP\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e00\u822c\u5f88\u597d\u63a8\u3002\u6bd4\u5982\u8fd9\u9053\u9898\u3002\n\n\u8bbe$f[x][0]$\u8868\u793a$x$\u7684\u5b50\u6811\u5185\u4e0d\u9009$x$\u8fd9\u4e2a\u8282\u70b9\u7684\u8d21\u732e\uff0c$f[x][1]$\u8868\u793a$x$\u7684\u5b50\u6811\u5185\u9009$x$\u8fd9\u4e2a\u8282\u70b9\u7684\u8d21\u732e\u3002\n\n$$f[x][0] = \\sum_{son}max(f[son][0],f[son][1])$$\n$$f[x][1] = val[x] + \\sum_{son}f[son][0]$$\n\n\u4f46\u662f\u597d\u50cf\u4e0d\u592a\u597d\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\u5bf9\u4e8eDDP\uff0c\u800c\u4e14\u662f\u7528\u6811\u94fe\u5256\u5206\u6765\u7ef4\u62a4\u7684\u3002\u6211\u4eec\u9009\u62e9\u628a\u91cd\u513f\u5b50\u5355\u72ec\u62ff\u51fa\u6765\u3002\n\u5e76\u4e14\u5f15\u5165$g[x][0]$\u8868\u793a$x$\u7684\u5b50\u6811\u5185\u4e0d\u9009$x$\u8fd9\u4e2a\u8282\u70b9$+$\u6240\u6709\u8f7b\u513f\u5b50\u7684\u8d21\u732e\u3002\n$g[x][1]$\u8868\u793a$x$\u7684\u5b50\u6811\u5185\u9009$x$\u8fd9\u4e2a\u8282\u70b9$+$\u6240\u6709\u8f7b\u513f\u5b50\u7684\u8d21\u732e\u3002\u3002\u3002\u5219\u6709\n\n(\u6211\u4eec\u7528$v$\u6765\u4ee3\u8868\u91cd\u513f\u5b50)\n$$g[x][0] = \\sum_{u~\\in~lightson}max(f[u][0],f[u][1])$$\n$$g[x][1] = \\sum_{u~\\in~lightson}f[u][0]$$\n$$f[x][0] = g[x][0] + max(f[v][0],f[v][1])$$\n$$f[x][1] = g[x][1] + val[x] + f[v][0]$$\n\n\u90a3\u4e48\u6784\u9020\u77e9\u9635\n\n$$\\begin{bmatrix}f[v][0] & f[v][1]\\end{bmatrix} * \\begin{bmatrix}g[x][0]& g[x][1] + val[x]\\\\g[x][0] & -\\infty\\end{bmatrix} = \\begin{bmatrix}f[x][0]&f[x][1]\\end{bmatrix}$$\n\n\u8fd9\u91cc\u7684\u77e9\u9635\u662f\u8981\u91cd\u5b9a\u4e49\u7684\uff0c\u539f\u6765\u77e9\u9635\u4e58\u6cd5\u7684\u4e58\u6cd5\u53d8\u6210\u52a0\u6cd5\uff0c\u52a0\u6cd5\u53d8\u53d6$max$\u3002\uff08\u53ef\u4ee5\u81ea\u5df1\u624b\u73a9\u4e00\u4e0b\uff0c\u4e25\u8c28\u7684\u8bc1\u660e\u4e0d\u662f\u5f88\u4f1a\uff0c\u53ea\u662f\u77e5\u9053\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff09\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u77e9\u9635\u91cc\u6ca1\u6709$f$\u8fd9\u4e2a\u503c\u5462\u3002\u53ef\u662f\u6211\u4eec\u7528\u7684\u5c31\u662f$f$\u7684\u503c\u554a\n\n\u66f4\u795e\u5947\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u91cd\u94fe\u7684\u672b\u7aef\u8282\u70b9\uff0c\u4ed6\u7684$2*2$\u7684\u77e9\u9635\u5c31\u662f\u5de6\u8fb9\u7684$1*2$\u7684\u77e9\u9635\uff0c\u4e5f\u5c31\u662f\u8bf4\u91cd\u94fe\u7684\u672b\u7aef\u8282\u70b9\u4fdd\u5b58\u4e86$f$\u7684\u51c6\u786e\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e00\u4e2a\u77e9\u9635\u6765\u63a8\u51fa\u6211\u4eec\u60f3\u8981\u7684\u503c\uff08\u8df3$fa$\u4e58\u77e9\u9635\uff0c\u7136\u540e\u5faa\u73af\uff09\u3002\n\n\u90a3\u4e48\u518d\u4e0e\u6811\u94fe\u5256\u5206\u7ed3\u5408\uff0c\u6211\u4eec\u51b3\u5b9a\u628a\u8fd9\u4e2a$2*2$\u77e9\u9635\u653e\u5230\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u7ef4\u62a4\u3002\n\u7701\u53bb\u4e86\u4e00\u76f4\u8df3$fa$\u7684\u8fc7\u7a0b\u3002\n\n\u4e00\u76f4\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u4e86\u4e00\u4e2a\u8282\u70b9\u7684$f$\u7684\u503c\u53ef\u4ee5\u7531\u6240\u5728\u91cd\u94fe\u7684\u672b\u7aef\u8282\u70b9\u901a\u8fc7$O(logn)$\u7684\u65f6\u95f4\u6765\u6c42\u51fa\uff08\u8fd9\u4e5f\u662f\u6211\u4e3a\u4ec0\u4e48\u7ef4\u62a4\u4e00\u4e2a$bot$\u8868\u793a\u4e00\u4e2a\u91cd\u94fe\u7684\u672b\u7aef\u8282\u70b9\uff09\u3002\n\n\u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u7684\u65f6\u5019\u8981\u53f3\u4e58\u5750\uff0c\u56e0\u4e3a\u8981\u6a21\u62df\u8df3$fa$\u7684\u8fc7\u7a0b\uff0c\u662f\u4ece$dfs$\u5e8f\u5927\u7684\u5411$dfs$\u5e8f\u5c0f\u7684\u5730\u65b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u5c31\u662f\u4ece\u53f3\u5411\u5de6\u3002\n\n\u4f46\u662f\u4fee\u6539\u600e\u4e48\u529e\u5462\u3002\n\n\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u505a\u597d\u4e86\u94fa\u57ab\uff08\u6211\u4eec\u628a\u91cd\u513f\u5b50\u4e0e\u8f7b\u513f\u5b50\u62c6\u5f00\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u7684\u4fee\u6539\u8fc7\u7a0b\uff09\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u8fd9\u4e2a\u77e9\u9635\uff0c\u6211\u4eec\u7684\u77e9\u9635\u7ef4\u62a4\u7684\u5168\u90e8\u662f$g$\u6570\u7ec4\u7684\u503c\uff08\u8fd8\u6709\u4e00\u4e2a$g[x][1] + val[x]$\uff09\uff0c\u800c$g$\u6570\u7ec4\u672c\u8d28\u4e0a\u7ef4\u62a4\u7684\u662f\u8f7b\u513f\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4fee\u6539\u8fd9\u4e2a\u8282\u70b9\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u6240\u5728\u91cd\u94fe\u7684\u5176\u4ed6\u8282\u70b9\u7684\u77e9\u9635\uff0c\u6211\u4eec\u76f4\u63a5\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\u4f46\u662f\u6211\u4eec\u518d\u770b\uff0c\u6211\u4eec\u7684$val[x]$\u7684\u66f4\u65b0\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4$top[x]$\u7684$f$\u503c\u7684\u66f4\u65b0\uff0c\u90a3\u4e48$top[x]$\u4f5c\u4e3a$fa[top[x]]$\u7684\u8f7b\u513f\u5b50\u7684\u8d21\u732e\u5c31\u9700\u8981\u66f4\u65b0\uff0c\u6211\u4eec\u518d\u66f4\u65b0\uff0c\u81f3\u6b64\u5faa\u73af\u5f80\u590d\uff0c\u4e00\u6761\u8df3\u5230$1$\u6240\u5728\u7684\u90a3\u6761\u91cd\u94fe\u7ed3\u675f\u3002\n\n\u8fd9\u91cc\u6ce8\u610f\uff1a\u6211\u4eec\u4fee\u6539\u7684\u503c\u8981\u63d0\u524d\u8bb0\u5f55\u597d\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u7684\u662f\u6700\u5f00\u59cb\u7684\u503c\uff0c\u4fee\u6539\u4e4b\u540e\u518d\u7b97\u8d21\u732e\u53ef\u80fd\u4e0d\u5bf9\u3002\n\n\u5c31\u662f\u8fd9\u91cc\n```cpp\ninline void sec_chenge(int x)\n{\n\tmartix res;\n\twhile(top[x] != 1)\n\t{\n\t\tres = query(root,dfn[top[x]],dfn[bot[x]]);\n\t\tg[fa[top[x]]][0] -= max(res.f[0][0],res.f[0][1]);\n\t\tg[fa[top[x]]][1] -= res.f[0][0];\n\t\tchenge(root,dfn[x]);\n\t\tres = query(root,dfn[top[x]],dfn[bot[x]]);\n\t\tg[fa[top[x]]][0] += max(res.f[0][0],res.f[0][1]);\n\t\tg[fa[top[x]]][1] += res.f[0][0];\n\t\tx = fa[top[x]];\n\t}\n\tchenge(root,dfn[x]);\n}\n```\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#define wfx CF.LOL();\n#define AK return\n#define IOI 0;\nusing namespace std;\nconst int N = 1e5+5 , inf = 1e9;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , cnt , ans;\nint a[N] , top[N] , fa[N] , dfn[N] , id[N] , size[N] , bot[N] , dep[N] , f[N][2] , g[N][2] , hs[N];\nstruct martix\n{\n\tint f[2][2];\n\tmartix() {f[0][0] = f[0][1] = f[1][0] = f[1][1] = 0;}\n\tinline void init() {f[0][1] = f[1][0] = -inf;}\n\tinline void MIN() {f[0][0] = f[0][1] = f[1][0] = f[1][1] = -inf;}\n};\nmartix operator * (const martix &a,const martix &b)\n{\n\tmartix res; res.MIN();\n\tfor(int k = 0;k < 2;k ++) for(int i = 0;i < 2;i ++) for(int j = 0;j < 2;j ++) res.f[i][j] = max(res.f[i][j],a.f[i][k] + b.f[k][j]);\n\treturn res;\n}\nstruct Tree_Div\n{\n\tstruct Edge\n\t{\n\t\tint to; Edge *nxt;\n\t\tEdge(int to,Edge *nxt) : to(to) , nxt(nxt) {}\n\t}*head[N];\n\tinline void add(int u,int v) {head[u] = new Edge(v,head[u]);}\n\tvoid get_tree(int x)\n\t{\n\t\tsize[x] = 1;\n\t\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(dep[to]) continue;\n\t\t\tdep[to] = dep[x] + 1;\n\t\t\tfa[to] = x;\n\t\t\tget_tree(to);\n\t\t\tsize[x] += size[to];\n\t\t\tif(size[to] > size[hs[x]]) hs[x] = to;\n\t\t}\n\t}\n\tvoid dfs(int x,int topfa)\n\t{\n\t\ttop[x] = topfa;\n\t\tdfn[x] = ++cnt;\n\t\tid[cnt] = x;\n\t\tf[x][1] = a[x];\n\t\tif(hs[x]) dfs(hs[x],topfa) , bot[x] = bot[hs[x]] , f[x][0] = max(f[hs[x]][0],f[hs[x]][1]) , f[x][1] += f[hs[x]][0];\n\t\telse bot[x] = x;\n\t\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(to == hs[x] || to == fa[x]) continue;\n\t\t\tdfs(to,to);\n\t\t\tg[x][0] += max(f[to][0],f[to][1]);\n\t\t\tg[x][1] += f[to][0];\n\t\t}\n\t\tf[x][1] += g[x][1];\n\t\tf[x][0] += g[x][0];\n\t}\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r; martix x;\n\t\tnode(int l,int r) : l(l) , r(r) {ls = rs = NULL;}\n\t\tinline void up() {x = rs -> x * ls -> x;}\n\t}*root;\n\tTree_Div() {root = NULL;}\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new node(l,r);\n\t\tif(l == r) return (void)(p -> x.f[0][0] = g[id[l]][0] , p -> x.f[0][1] = g[id[l]][1] + a[id[l]] , p -> x.f[1][0] = g[id[l]][0] , p -> x.f[1][1] = -inf);\n\t\tbuild(p -> ls,l,mid); build(p -> rs,mid+1,r); p -> up();\n\t}\n\tvoid chenge(node *p,int x)\n\t{\n\t\tif(p -> l == p -> r) return (void)(p -> x.f[0][0] = g[id[x]][0], p -> x.f[0][1] = g[id[x]][1] + a[id[x]] , p -> x.f[1][0] = g[id[x]][0]);\n\t\tchenge(x <= mid ? p -> ls : p -> rs , x); p -> up();\n\t}\n\tmartix query(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y) return p -> x; martix res; res.init();\n\t\tif(y > mid) res = res * query(p -> rs,x,y);\n\t\tif(x <= mid) res = res * query(p -> ls,x,y);\n\t\treturn res;\n\t}\n\tinline void sec_chenge(int x)\n\t{\n\t\tmartix res;\n\t\twhile(top[x] != 1)\n\t\t{\n\t\t\tres = query(root,dfn[top[x]],dfn[bot[x]]);\n\t\t\tg[fa[top[x]]][0] -= max(res.f[0][0],res.f[0][1]);\n\t\t\tg[fa[top[x]]][1] -= res.f[0][0];\n\t\t\tchenge(root,dfn[x]);\n\t\t\tres = query(root,dfn[top[x]],dfn[bot[x]]);\n\t\t\tg[fa[top[x]]][0] += max(res.f[0][0],res.f[0][1]);\n\t\t\tg[fa[top[x]]][1] += res.f[0][0];\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tchenge(root,dfn[x]);\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1;i <= n;i ++) a[i] = read();\n\t\tfor(int i = 1 , u , v;i < n;i ++) \n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tadd(u,v); add(v,u);\n\t\t}\n\t\tdep[1] = 1; get_tree(1);\n\t\tdfs(1,1);\n\t\tbuild(root,1,n);\n\t\tfor(int i = 1 , x , y;i <= m;i ++)\n\t\t{\n\t\t\tx = read(); y = read();\n\t\t\ta[x] = y; sec_chenge(x);\n\t\t\tmartix res = query(root,dfn[1],dfn[bot[1]]);\n\t\t\tprintf(\"%d\\n\",max(res.f[0][0],res.f[0][1]));\n\t\t}\n\t}\n}CF;\nint main() {wfx AK IOI}\n```\n",
        "postTime": 1570369832,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001 DP\u3011"
    },
    {
        "content": "\u849f\u84bb\u975e\u5e38\u7684\u83dc\uff0c\u53ea\u4f1a\u6811\u5256\u6c42\u89e3\u52a8\u6001dp\u3002\n\n\u8fd9\u9053\u9898\uff0c\u5c31\u662f\u9700\u8981\u6211\u4eec\u6c42\u4e00\u68f5\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u5e76\u4e14\u8fd9\u73a9\u610f\u8fd8\u662f\u5f85\u4fee\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651\u4e0d\u8981\u4fee\u6539\u7684\u3002\u90a3\u4e48\u8fd9\u5176\u5b9e\u5c31\u662f \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\n\n\u5bf9\u4e8e$dp[x][0/1]$\u6211\u4eec\u7528$0$\u8868\u793a \u4e0d \u9009\u62e9\u8fd9\u4e2a\u70b9\uff0c$1$\u8868\u793a\u9009\u62e9\u8fd9\u4e2a\u70b9\u3002\n\n\u90a3\u4e48\uff1a\n\n$$dp[x][1]=w[x]+\\sum_{v\\epsilon son}dp[v][0]$$\n\n$$dp[x][0]=\\sum_{v\\epsilon son}max(dp[v][1] , dp[v][0])$$\n\n\u90a3\u4e48\u7c7b\u4f3c\u4e8e\u6811\u5256\uff0c\u6811\u5256\u7684\u52a0\u901f\u5728\u4e8e\u5bf9\u4e8e\u4e00\u6761\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u8f7b\u8fb9\u7684\u4e2a\u6570\u548c\u91cd\u94fe\n\n\u7684\u6761\u6570\u90fd\u662f$log_{2}n$\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5c06\u8f7b\u91cd\u513f\u5b50\u5206\u5f00\u3002\n\n\u8bbe$ldp[x][0/1]$\u8868\u793a$x$\u70b9\u7684\u8f7b\u513f\u5b50\u5728\u7236\u4eb2$x$\u4e5f\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\u90a3\u4e48\u8fd9\n\n\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u6682\u4e14\u4e0d\u8981\u8003\u8651\u91cd\u513f\u5b50\u3002\n\n\u540c\u6837\uff1a\n\n$$ldp[x][1]=\\sum_{v\\epsilon lightson}dp[v][0]$$\n\n$$ldp[x][0]=\\sum_{v\\epsilon lightson}max(dp[v][1],dp[v][0])$$\n\n\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528\u77e9\u9635\u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u4e0b\uff1a\n\n\u65b0\u5b9a\u4e49\u4e00\u4e0b\u8fd9\u4e2a\u77e9\u9635\uff1a\n\n$\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}$\n$\\begin{pmatrix} k1 & k2 \\\\ k3 & k4 \\end{pmatrix}=$\n\n$\\begin{pmatrix} max(a+k1,c+k2) & max(b+k1,d+k2) \\\\ max(a+k3,c+k4) & max(b+k3,d+k4)  \\end{pmatrix}$\n\n\u7136\u540e\u53ef\u4ee5\u8111\u8865\u4e00\u4e0b\uff0c\u8fd9\u662f\u6ee1\u8db3\u5206\u914d\u5f8b\u548c\u7ed3\u5408\u5f8b\u7684\u3002\n\n$son$\u8868\u793a\u7684\u662f$x$\u7684\u91cd\u513f\u5b50\n\n$\\begin{pmatrix} dp[son][0] \\\\ dp[son][1] \\end{pmatrix} $\n$\\begin{pmatrix} ldp[x][0] & ldp[x][0] \\\\ ldp[x][1] & -inf \\end{pmatrix}=$\n$\\begin{pmatrix} dp[x][0] \\\\ dp[x][1] \\end{pmatrix}$\n\n\u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9$dp[son][0]==0$,$dp[son][1]==0$\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u53ea\u5173\u5fc3\u4e00\u4e2a\u70b9\u7684\u8f7b\u513f\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u513f\u5b50\u5411\u7236\u4eb2$dp$\u503c\u7684\u4e00\n\n\u4e2a\u9012\u63a8\u3002\n\n\u9996\u5148$O(n)$\u7684\u8fdb\u884c\u9884\u5904\u7406\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5b83\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5373\u53ef\u3002\n\n\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u4fee\u6539\uff0c\u5176\u5b9e\u4f1a\u88ab\u5f71\u54cd\u5230\u7684\u4e5f\u53ea\u6709\u8fd9\u4e2a\u70b9\u548c\u94fe\u4e0a\u8f7b\u8fb9\u7236\u4eb2\u7684\u4fe1\u606f\n\n\u9700\u8981\u88ab\u66f4\u6539\uff08\u56e0\u4e3a\u5b83\u6240\u5728\u91cd\u94fe\u4e0a\u7684\u70b9\u4e5f\u53ea\u5173\u5fc3\u5176\u8f7b\u513f\u5b50\uff09\u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u8f7b\u513f\u5b50\u4fe1\u606f\uff0c\u5176\u5b9e\u5c31\u5c31\u662f\u4fee\u6539\u7684\u90a3\u4e2a\u8f7b\u513f\u5b50\u6240\u5728\u94fe\u7684\u77e9\u9635\u4e58\n\n\u79ef\u3002\u8fd9\u4e2a\u7528\u7ebf\u6bb5\u6811\u53ef\u505a\u3002\n\n\u590d\u6742\u5ea6$O(nlog_2^2n)$\n\n\u7136\u540e\u5e26\u77e9\u9635\u7684\u4f18\u79c0\u5e38\u6570\n\n\u8d34\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 300007\n#define ls (x<<1)\n#define rs (x<<1|1)\n#define inf 199999999\nint n , m , tot , cnt ;\nint son[N] , dep[N] , siz[N] , fa[N] , num[N] , bel[2*N] , top[N] , ed[N] , w[N] ;\nint dp[N][2] , ldp[N][2] ;\nint fire[N] , to[2*N] , nex[2*N] ;\nstruct node{\n    int m[5][5] ;\n    void init(){\n        for(int i = 0 ; i <= 2 ; i++){\n            for(int j = 0 ; j <= 2 ; j++ ) m[i][j] = -inf ;\n        }\n    }\n}fox[N*4] , val[N] ;\nstruct OFN{\n    int l ;\n    int r ;\n}tree[N*4] ;\nvoid add(int u , int v){\n    nex[++tot] = fire[u] ;\n    fire[u] = tot ;\n    to[tot] = v ;\n    return ;\n}\nvoid dfs1(int x , int fr){\n    fa[x] = fr ; dep[x] = dep[fr] + 1 ; siz[x] = 1 ;\n    int Max = 0 ;\n    for(int i = fire[x] ; i ; i = nex[i] ){\n        int v = to[i] ;\n        if( v == fr) continue ;\n        dfs1( v , x ) ;\n        siz[x] += siz[v] ;\n        if( siz[v] > Max ) Max = siz[v] , son[x] = v ;\n    }\n    return ;\n}\nvoid dfs2(int x , int fr){\n    top[x] = fr ;\n    num[x] = ++cnt ;\n    bel[cnt] = x ; ed[fr] = x ;\n    if( son[x] ) dfs2( son[x] , fr ) ;\n    for(int i = fire[x] ; i ; i = nex[i] ){\n        int v = to[i] ;\n        if( v == fa[x] || v == son[x] ) continue ;\n        dfs2( v , v ) ;\n    }\n    ed[x] = ed[fr] ;\n}\nvoid dfs3(int x){\n    ldp[x][1] = w[x] ;\n    for(int i = fire[x] ; i ; i = nex[i] ){\n        int v = to[i] ;\n        if( v == son[x] || v == fa[x] ) continue ;\n        dfs3( v ) ;\n        ldp[x][0] += max( dp[v][0] , dp[v][1] ) ;\n        ldp[x][1] += dp[v][0] ;\n    }\n    dp[x][0] += ldp[x][0] ; dp[x][1] += ldp[x][1] ;\n    if( son[x] ){\n        dfs3( son[x] ) ;\n        dp[x][0] += max( dp[son[x]][1] , dp[son[x]][0] ) ;\n        dp[x][1] += dp[son[x]][0] ;\n    }\n}\nnode mul(node x , node y){\n    node res ;\n    res.init() ;\n    for(int i = 0 ; i <= 1 ; i++ ){\n        for(int j = 0 ; j <= 1 ; j++ ){\n            for(int k = 0 ; k <= 1 ; k++ ){\n                res.m[i][j] = max( res.m[i][j] , x.m[i][k] + y.m[k][j] ) ;\n            }\n        }\n    }\n    return res ;\n}\nvoid build(int x , int l , int r ){\n    tree[x].l = l ; tree[x].r = r ;\n    if( l == r ){\n        val[bel[l]].m[0][0] = ldp[bel[l]][0] ; val[bel[l]].m[1][0] = ldp[bel[l]][1] ;\n        val[bel[l]].m[0][1] = ldp[bel[l]][0] ; val[bel[l]].m[1][1] = -inf ;\n        fox[x] = val[bel[l]] ;\n        return ;\n    }\n    int mid = ( l + r ) >> 1 ;\n    build( ls , l , mid ) ; build( rs , mid + 1 , r ) ;\n    fox[x] = mul( fox[ls] , fox[rs] ) ; return ;\n}\nnode query(int x , int l , int r ){\n    if( l <= tree[x].l && tree[x].r <= r ) return fox[x] ;\n    int mid = ( tree[x].l + tree[x].r ) >> 1 ;\n    if( mid >= r ) return query( ls , l , r ) ;\n    if( mid < l ) return query( rs , l , r ) ;\n    return mul( query( ls , l , r ) , query( rs , l ,  r) ) ;\n}\nvoid update(int x , int pos ){\n    if( tree[x].l == tree[x].r && tree[x].l == pos ){\n        fox[x] = val[bel[pos]] ;\n        return ;\n    }\n    int mid = ( tree[x].l + tree[x].r ) >> 1 ;\n    if( mid >= pos ) update( ls , pos ) ;\n    else update( rs , pos ) ;\n    fox[x] = mul( fox[ls] , fox[rs] ) ;\n}\nvoid change(int x , int fr ){\n    val[x].m[1][0] += fr - w[x] ;\n    w[x] = fr ;\n    while( x != 0 ){\n        int v = top[x] ;\n        node last = query( 1 , num[v] , num[ed[v]] ) ;\n        update( 1 , num[x] ) ;\n        node now = query( 1 , num[v] , num[ed[v]] ) ;\n        x = fa[v] ;\n        val[x].m[0][0] += max( now.m[0][0] , now.m[1][0] ) - max( last.m[0][0] , last.m[1][0] ) ;\n        val[x].m[0][1] = val[x].m[0][0] ;\n        val[x].m[1][0] += now.m[0][0] - last.m[0][0] ;\n    }\n}\nint main()\n{\n    scanf(\"%d%d\" , &n , &m ) ;\n    for(int i = 1 ; i <= n ; i++ ) scanf(\"%d\" , &w[i] ) ;\n    for(int i = 1 ; i <= n - 1 ; i++ ){\n        int u , v ;\n        scanf(\"%d%d\" , &u , &v ) ;\n        add( u , v ) ; add( v , u ) ; \n    }\n    dfs1( 1 , 0 ) ; dfs2(1 , 1) ; \n    dfs3( 1 ) ; build( 1 , 1 , n ) ;\n    while( m-- ){\n        int u , x ;\n        scanf(\"%d%d\" , &u , &x ) ;\n        change( u , x ) ;\n        node res = query( 1 , num[1] , num[ed[1]] ) ;\n        printf(\"%d\\n\" , max( res.m[0][0] , res.m[1][0] ) ) ;\n    }\n    return 0 ;\n}\n```\n\n",
        "postTime": 1556892023,
        "uid": 119610,
        "name": "Regimes",
        "ccfLevel": 7,
        "title": "\u52a8\u6001dp"
    },
    {
        "content": "# \u52a8\u6001 dp\n\n2020.9.5 update \u66f4\u6539\u4e86\u9519\u8bef\u7684\u8f6c\u79fb\u77e9\u9635\n\n\u52a8\u6001 $dp$ \u662f\u7531\u732b\u5764\u5927\u4f6c\u5728 WC 2018 \u63d0\u51fa\u6765\u7684\u9ed1\u79d1\u6280\u3002\n\n\u4ed6\u4e3b\u8981\u89e3\u51b3\u5f97\u662f\u5e26\u4fee\u6539\u7684 $dp$ \u95ee\u9898,\u4e3b\u8981\u601d\u8def\u662f\u7531\u77e9\u9635\u4e58\u6cd5\u6765\u7ef4\u62a4 $dp$ \u8f6c\u79fb\n\n\u6211\u4eec\u5148\u6765\u770b\u4e00\u9053\u6a21\u677f\u9898 [\u52a8\u6001dp](https://www.luogu.com.cn/problem/P3235)\n\n\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e0d\u5e26\u4fee\u6539\u7684\u60c5\u51b5\uff0c\n\n\u8f6c\u79fb\u548c\u72b6\u6001\u5f88\u5bb9\u6613\u5c31\u80fd\u5217\u51fa\u6765\n\n\u8bbe $f[i][0/1]$ \u8868\u793a \u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u4e14\u9009 (\u4e0d\u9009)  $i$ \u8fd9\u4e2a\u70b9\u7684\u6700\u5927\u6743\u503c\u548c\n\n\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u5199\u6210\uff1a\n\n$f[i][0] = \\displaystyle \\sum_{to \\in son[i]} max (f[to][0],f[to][1])$\n\n$f[i][1] = \\displaystyle \\sum_{to \\in son[x]} f[to][0]\\ + w[x]$\n\n\u5f53\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u90a3\u4e48\u4ece\u4ed6\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684 $dp$ \u503c\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53ea\u4fee\u6539\u8fd9\u4e00\u6761\u94fe\u4e0a\u7684\u4fe1\u606f\uff08\u7528\u6811\u94fe\u5256\u5206\u6765\u7ef4\u62a4\uff09\u3002\n\n\u52a8\u6001 $dp$ \u7684\u601d\u60f3\u5c31\u662f\u5c06 \u91cd\u513f\u5b50\u548c\u8f7b\u513f\u5b50\u7684\u8d21\u732e\u5206\u5f00\u6765\u8003\u8651\u3002\n\n\u8bbe $g[i][0] = \\displaystyle \\sum _{to \\in \u8f7b\u513f\u5b50} max(f[to][0],f[to][1])$, $g[i][1] = \\displaystyle \\sum_{to \\in \u8f7b\u513f\u5b50} f[to][0]\\ +w[i] $.\n\n\u89e3\u91ca\u4e00\u4e0b $g[i][0]$ \u8868\u793a \u9009 \u6216\u4e0d\u9009 $i$ \u7684\u8f7b\u513f\u5b50\u7684\u6700\u5927\u8d21\u732e\u548c\uff0c $g[i][1]$ \u8868\u793a\u4e0d\u9009\u4ed6\u8f7b\u513f\u5b50\u7684\u4ef7\u503c\u548c\u52a0\u4e0a\u4ed6\u672c\u8eab\u7684\u6743\u503c.\n\n\u8fd9\u4e24\u4e2a\u53ef\u4ee5\u5728\u6c42 $f[x][0/1]$ \u7684\u65f6\u5019\u987a\u4fbf\u7ef4\u62a4\u51fa\u6765\n\n\u90a3\u4e48\uff0c\u4e0a\u9762\u7684\u65b9\u7a0b\u5c31\u53ef\u4ee5\u5199\u6210\u3002\n\n$f[i][0] = g[i][0] + max(f[son[i]][0],f[son][i][1])$\n\n$f[i][1] = g[i][1] + f[son[i]][0]$ ($son[x]$  \u8868\u793a $x$ \u7684\u91cd\u513f\u5b50)\n\n\u5b9a\u4e49\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\uff1a\n\n\u77e9\u9635 $c$ \u4e3a \u77e9\u9635 A \u548c\u77e9\u9635 B \u7684\u4e58\u79ef \n\n\u90a3\u4e48\uff0c$c[i][j] = max( a[i][k] + b[k][j])$\n\n\u8fd9\u4e2a\u5176\u5b9e\u5c31\u662f\u628a\u666e\u901a\u7684\u77e9\u9635\u4e58\u6cd5\u7684\u4e58\u53f7\u6539\u4e3a\u52a0\u53f7\uff0c\u52a0\u53f7\u6539\u4e3a\u53d6 $max$\n\n\u8fd9\u79cd\u77e9\u9635\u4e58\u6cd5\u4e5f\u6ee1\u8db3\u666e\u901a\u77e9\u9635\u4e58\u6cd5\u7684\u6027\u8d28\uff0c\u4e0d\u76f8\u4fe1\u7684\u53ef\u4ee5\u8dd1\u51e0\u7ec4\u6570\u636e\u8bd5\u8bd5\n\n\u4ee3\u7801\u5b9e\u73b0\u957f\u8fd9\u6837:\n\n```cpp\nnode operator *(node x,node y)\n{\n    node ans;\n    for(int i = 0; i <= n; i++)\n        for(int j = 0; j <= n; j++)\n            for(int k = 0; k <= n; k++)\n                ans.a[i][j] = max(ans.a[i][j],x.a[i][k] + y.a[k][j]);\n    return ans;\n}\n```\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\u6784\u9020\u4e00\u4e2a\u77e9\u9635\uff0c\u5373\uff0c\n$$\n\\left[\n\\begin{matrix}\nf[to] [0] \\\\\nf[to] [1] \\\\\n\\end{matrix}     \n\\right]\n\\tag{2} \\times\n\\left[\n\\begin{matrix}\n\\cdots \\\\\n\\cdots \\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\ f[i][0] \\\\\n\\ f[i][1] \\\\\n\\end{matrix}\n\\right]\n$$\n\u5176\u4e2d \u7b2c\u4e8c\u4e2a\u77e9\u9635\u662f\u6211\u4eec\u8981 \u786e\u5b9a\u7684\u8f6c\u79fb\u77e9\u9635\u3002\n\n\u7b2c\u4e8c\u4e2a\u77e9\u9635\u6784\u9020\u51fa\u6765\u957f\u8fd9\u6837\uff1a\n$$\n\\left[\n\\begin{matrix}\nf[to] [0] \\\\\nf[to] [1] \\\\\n\\end{matrix}     \n\\right]\n\\tag{2} \\times\n\\left[\n\\begin{matrix}\n\\ g[i][0] & g[i][1] \\\\\n\\ g[i][0] & -\\infin \\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\ f[i][0] \\\\\n\\ f[i][1] \\\\\n\\end{matrix}\n\\right]\n$$\n\n\n\u4f46\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u77e9\u9635\u4e2d\u6ca1\u6709\u8fd9\u4e2a $f$ \u503c\uff0c\u8fd9\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u77e9\u9635\u5c31\u6ca1\u6cd5\u8f6c\u79fb\u554a\u3002\n\n\u5176\u5b9e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u91cd\u94fe\u7684\u672b\u5c3e\u8282\u70b9\uff0c\u4ed6\u7684\u8f6c\u79fb\u77e9\u9635\u5c31\u662f\u4ed6\u7684 $f$ \u503c\uff0c\n\n> \u4e5f\u5c31\u662f\u8bf4\u91cd\u94fe\u7684\u672b\u7aef\u8282\u70b9\u4fdd\u5b58\u4e86 f\u7684\u51c6\u786e\u503c  -by treaker \n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7531\u8fd9\u4e2a\u77e9\u9635\u6765\u63a8\u51fa\u8fd9\u4e00\u6761\u91cd\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u3002\n\n\u6211\u4eec\u7684\u66b4\u529b\u505a\u6cd5\u5c31\u662f\u4e00\u76f4\u8df3\u4ed6\u7684\u7236\u4eb2\u5c31\u662f\u4e00\u76f4\u8df3\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u518d\u628a\u77e9\u9635\u4e58\u8d77\u6765\u3002\n\n\u4f46\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u80fd\u63a5\u53d7\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u77e9\u9635\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u6765\u7ef4\u62a4\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u5b58\u8fd9\u4e2a\u70b9\u7684\u8f6c\u79fb\u77e9\u9635\uff0c\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u5de6\u53f3\u513f\u5b50\u77e9\u9635\u7684\u4e58\u79ef\uff0c\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 O(log n) \u7684\u65f6\u95f4\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002\n\n\u5728\u7ed3\u5408\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u5c31\u80fd\u505a\u5230\u7ef4\u62a4\u8fd9\u68f5\u6811\u7684\u4fe1\u606f\u3002\n\n\u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u6cd5\u8981\u53f3\u4e58\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4ece dfn\u5e8f\u5927\u7684\u5730\u65b9\u8df3\u5230 dfn\u5e8f\u5c0f\u7684\u5730\u65b9\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u7684\u662f\u4ece\u53f3\u5f80\u5de6\u3002\n\n\u6211\u4eec\u4e0a\u9762\u7684\u8f6c\u79fb\u77e9\u9635\u5c31\u9700\u8981\u91cd\u6784\u4e00\u4e0b\uff0c\u53d8\u6210\n$$\n\\left[\n\\begin{matrix}\n\\ g[i][0] & g[i][0] \\\\\n\\ g[i][1] &  - \\infin \\\\\n\\end{matrix}     \n\\right]\n\\tag{2} \\times\n\\left[\n\\begin{matrix}\nf[son[x]][0]\\\\\nf[son[x]][1]\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\ f[i][0] \\\\\n\\ f[i][1] \\\\\n\\end{matrix}\n\\right]\n$$\n \u4fee\u6539\u64cd\u4f5c\uff0c\u4e0a\u6587\u6211\u4eec\u63d0\u5230\u4e86 \u2018\u5f53\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u90a3\u4e48\u4ece\u4ed6\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u7684 $dp$ \u503c\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u2019\u3002\n\n\u6211\u4eec\u4fee\u6539\u7684\u5c31\u662f\u4ece\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u77e9\u9635\uff0c\u6211\u4eec\u628a\u8fd9\u6761\u94fe\u741b\u51fa\u6765\uff0c\u53d1\u73b0\u4ed6\u662f\u91cd\u94fe\u548c\u8f7b\u8fb9\u4ea4\u66ff\u5728\u4e00\u8d77\u7684\u3002\n\n\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\u6211\u4eec\u6784\u9020\u7684\u77e9\u9635\uff0c\u53d1\u73b0\u91cc\u9762\u7ef4\u62a4\u7684\u662f\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u91cd\u513f\u5b50\u3002  \n\n\u5bf9\u4e8e\u91cd\u94fe\uff0c\u6211\u4eec\u4e0d\u7528\u4fee\u6539\uff0c\u4f46\u5bf9\u4e8e\u91cd\u94fe\u94fe\u9876 $top[x] $\u548c\u8f7b\u8fb9 $fa[top[x]] $\u4ea4\u66ff\u7684\u5730\u65b9\uff0c\u6211\u4eec\u9700\u8981\u5355\u70b9\u4fee\u6539\u3002\n\n\u56e0\u4e3a\u6b64\u65f6\u94fe\u9876 $top[x]$ \u5c5e\u4e8e $fa[top[x]] $\u8f7b\u513f\u5b50\uff0c\u4ed6\u7684\u4fee\u6539\u4f1a\u5bf9\u4ed6\u7236\u4eb2\u7684\u8f6c\u79fb\u77e9\u9635\u9020\u6210\u5f71\u54cd\u3002\n\n\u6211\u4eec\u5173\u952e\u8981\u7b97\u51fa\u4ed6\u6539\u53d8\u4e4b\u540e\u5bf9\u4ed6\u7236\u4eb2\u8f6c\u79fb\u77e9\u9635\u7684\u5f71\u54cd\u3002\n\n\u4ed6\u7684 $f$ \u503c\u6211\u4eec\u53ef\u4ee5\u7531\u4e0b\u9762\u7684\u63a8\u51fa\u6765\uff0c\u7136\u540e\u53ef\u4ee5\u6839\u636e $g$ \u6570\u7ec4\u7684\u5b9a\u4e49\u7b97\u51fa\u4ed6\u6539\u53d8\u4e4b\u540e\u5bf9\u4ed6\u7236\u4eb2\u7684\u5f71\u54cd\u3002\n\n\u5c31\u8fd9\u6837\u5728\u66f4\u65b0\uff0c\u6bcf\u6b21\u8df3\u91cd\u94fe\uff0c\u76f4\u5230\u8df3\u5230\u6839\u8282\u70b9\uff0c\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u5c31\u5927\u5de5\u544a\u6210\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff0c\u6211\u4eec\u4e0d\u80fd\u4fee\u6539\u4e4b\u540e\u5728\u7edf\u8ba1\u4ed6\u7684 \u8f7b\u513f\u5b50\u7684\u503c\uff0c\u90a3\u6837\u53ef\u80fd\u4e0d\u5bf9\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u901a\u8fc7\u589e\u91cf\u6cd5\u6765\u4fee\u6539\u3002\n\n\u8bb0\u5f55\u4e00\u4e0b\u539f\u6765\u72b6\u6001\u7684\u77e9\u9635\uff0c\u5728\u8bb0\u5f55\u4fee\u6539\u4e4b\u540e\u7684\u77e9\u9635\uff0c\u4e24\u8005\u4e4b\u5dee\u5c31\u662f\u5bf9\u4ed6\u7236\u4eb2\u8f6c\u79fb\u77e9\u9635\u7684\u8d21\u732e\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O($log^2 n$)\n\n\u5177\u4f53\u4ee3\u7801\u957f\u8fd9\u6837\n\n```cpp\nvoid modify(int x,int val)\n{\n    base[dfn[x]].a[1][0] += val - w[x];//\u589e\u91cf\u6cd5\u7edf\u8ba1\u4ed6\u4fee\u6539\u7684\u8d21\u732e\n    w[x] = val;\n    while(x)\n    {\n        node Old = get_node(top[x]);//\u8bb0\u5f55\u4e00\u4e0b\u94fe\u9876\u4fee\u6539\u4e4b\u524d\u7684\u77e9\u9635\n        chenge(1,1,n,dfn[x]);//\u4fee\u6539\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u7684\u8f6c\u79fb\u77e9\u9635\n        node New = get_node(top[x]);//\u5f97\u5230\u94fe\u9876\u4fee\u6539\u4e4b\u540e\u7684\u8f6c\u79fb\u77e9\u9635\n        int fx = dfn[fa[top[x]]];\n        base[fx].a[0][0] += max(New.a[0][0],New.a[1][0]) - max(Old.a[0][0],Old.a[1][0]);//\u7b97\u4ed6\u4fee\u6539\u5bf9\u4ed6\u7236\u4eb2\u8f6c\u79fb\u77e9\u9635\u7684\u5f71\u54cd\n        base[fx].a[0][1] += max(New.a[0][0],New.a[1][0]) - max(Old.a[0][0],Old.a[1][0]);\n        base[fx].a[1][0] += New.a[0][0] - Old.a[0][0];\n        x = fa[top[x]];//\u8df3\u94fe\u4fee\u6539\n    }\n}\n```\n\n\u603b\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int inf = 233333333;\nconst int N = 1e5+10;\nint n,m,tot,x,y,num,val,u,v;\nint head[N],top[N],dep[N],siz[N],fa[N],son[N],ord[N],end[N],f[N][2],g[N][2],dfn[N],w[N];\nstruct bian\n{\n    int to,net;\n}e[N<<1];\nstruct node\n{\n    int a[2][2];\n    node() {memset(a,-127/3,sizeof(a));}\n}tr[N<<2],base[N];\ninline int read()\n{\n    int s = 0,w = 1; char ch = getchar();\n    while(ch < '0' || ch > '9'){if(ch == '-') w = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9'){s =s * 10+ch - '0'; ch = getchar();}\n    return s * w;\n}\nnode operator *(node x,node y)//\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5\n{\n    node ans;\n    for(int i = 0; i <= 1; i++)\n    {\n        for(int j = 0; j <= 1; j++)\n        {\n            for(int k = 0; k <= 1; k++)\n            {\n                ans.a[i][j] = max(ans.a[i][j],x.a[i][k] + y.a[k][j]);\n            }\n        }\n    }\n    return ans;\n}\nvoid add(int x,int y)\n{\n    e[++tot].to = y;\n    e[tot].net = head[x];\n    head[x] = tot;\n}\nvoid get_tree(int x)//\u6811\u5256\u9884\u5904\u7406\n{\n    dep[x] = dep[fa[x]] + 1; siz[x] = 1;\n    for(int i = head[x]; i; i = e[i].net)\n    {\n        int to = e[i].to;\n        if(to == fa[x]) continue;\n        fa[to] = x;\n        get_tree(to);\n        siz[x] += siz[to];\n        if(siz[son[x]] < siz[to] || son[x] == -1) son[x] = to;\n    }\n}\nvoid dfs(int x,int topp)\n{\n    top[x] = topp; dfn[x] = ++num; ord[num] = x;//END \u8bb0\u5f55\u8fd9\u6761\u91cd\u94fe\u7684\u94fe\u5c3e\uff0cord\u8bb0\u5f55\u5f53\u524d \u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u7684\u6811\u4e0a\u7f16\u53f7\n    if(son[x] == -1)\n    {\n        end[topp] = num;\n        return;\n    }\n    dfs(son[x],topp);\n    for(int i = head[x]; i; i = e[i].net)\n    {\n        int to = e[i].to;\n        if(to == fa[x] || to == son[x]) continue;\n        dfs(to,to);\n    }\n}\nvoid dp(int x,int fa)//\u9884\u5904\u7406\u4e3a\u6ca1\u4fee\u6539\u4e4b\u524d\u7684 f \u503c\u4e0e g \u503c\n{\n    g[x][1] = f[x][1] = w[x];\n    for(int i = head[x]; i; i = e[i].net)\n    {\n        int to = e[i].to;\n        if(to == fa) continue;\n        dp(to,x);\n        f[x][0] += max(f[to][0], f[to][1]);\n        f[x][1] += f[to][0];\n        if(to != son[x])\n        {\n            g[x][0] += max(f[to][0], f[to][1]);\n            g[x][1] += f[to][0];\n        }\n    }\n}\nvoid up(int o)\n{\n    tr[o] = tr[o<<1] * tr[o<<1|1];\n}\nvoid build(int o,int L,int R)//\u7ebf\u6bb5\u6811\u5efa\u6811\n{\n    if(L == R)\n    {\n    \tint tmp = ord[L];\n        tr[o].a[0][0] = tr[o].a[0][1] = g[tmp][0];//\u6784\u9020\u8f6c\u79fb\u77e9\u9635\n        tr[o].a[1][0] = g[tmp][1]; \n        base[L] = tr[o];\n        return;\n    }\n    int mid = (L + R)>>1;\n    build(o<<1,L,mid);\n    build(o<<1|1,mid+1,R);\n    up(o);\n}\nvoid chenge(int o,int l,int r,int x)//\u5355\u70b9\u4fee\u6539\n{\n    if(l == r)\n    {\n        tr[o] = base[l];\n        return;\n    }\n    int mid = (l + r)>>1;\n    if(x <= mid) chenge(o<<1,l,mid,x);\n    if(x > mid) chenge(o<<1|1,mid+1,r,x);\n    up(o);\n}\nnode query(int o,int l,int r,int L,int R)//\u533a\u95f4\u67e5\u8be2\n{\n    if(L <= l && R >= r) return tr[o];\n    int mid = (l + r)>>1;\n    if(R <= mid) return query(o<<1,l,mid,L,R);\n    if(L > mid) return query(o<<1|1,mid+1,r,L,R);\n    return query(o<<1,l,mid,L,R) * query(o<<1|1,mid+1,r,L,R);\n}\nnode get_node(int x)//\u5f97\u5230\u94fe\u9876\u7684 f \u503c\n{\n    return query(1,1,n,dfn[x],end[top[x]]);\n}\nvoid modify(int x,int val)\n{\n    base[dfn[x]].a[1][0] += val - w[x];//\u589e\u91cf\u6cd5\u7edf\u8ba1\u4ed6\u4fee\u6539\u7684\u8d21\u732e\n    w[x] = val;\n    while(x)\n    {\n        node Old = get_node(top[x]);//\u8bb0\u5f55\u4e00\u4e0b\u94fe\u9876\u4fee\u6539\u4e4b\u524d\u7684\u77e9\u9635\n        chenge(1,1,n,dfn[x]);//\u4fee\u6539\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u7684\u8f6c\u79fb\u77e9\u9635\n        node New = get_node(top[x]);//\u5f97\u5230\u94fe\u9876\u4fee\u6539\u4e4b\u540e\u7684\u8f6c\u79fb\u77e9\u9635\n        int fx = dfn[fa[top[x]]];\n        base[fx].a[0][0] += max(New.a[0][0],New.a[1][0]) - max(Old.a[0][0],Old.a[1][0]);//\u7b97\u4ed6\u4fee\u6539\u5bf9\u4ed6\u7236\u4eb2\u8f6c\u79fb\u77e9\u9635\u7684\u5f71\u54cd\n        base[fx].a[0][1] += max(New.a[0][0],New.a[1][0]) - max(Old.a[0][0],Old.a[1][0]);\n        base[fx].a[1][0] += New.a[0][0] - Old.a[0][0];\n        x = fa[top[x]];//\u8df3\u94fe\u4fee\u6539\n    }\n}\nint main()\n{\n    n = read(); m = read();\n    for(int i = 1; i <= n; i++)\n    {\n        w[i] = read();\n        son[i] = -1;\n    }\n    for(int i = 1; i <= n-1; i++)\n    {\n    \tu = read(); v = read();\n    \tadd(u,v); add(v,u);\n    }\n    get_tree(1); dfs(1,1); dp(1,0); build(1,1,n);//\u9884\u5904\u7406\n    for(int i = 1; i <= m; i++)\n    {\n        x = read(); val = read();\n        modify(x,val);//\u4fee\u6539\u64cd\u4f5c\n        node ans = get_node(1);//\u5f97\u5230\u65b0\u7b54\u6848\n        printf(\"%d\\n\",max(ans.a[0][0],ans.a[1][0]));\n    }\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1599140163,
        "uid": 248896,
        "name": "genshy",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\"\u52a8\u6001 DP\"&\u52a8\u6001\u6811\u5206\u6cbb\u3011"
    },
    {
        "content": "\u52a8\u6001\u52a8\u6001\u89c4\u5212\u3002\n\n\u5047\u5982\u6ca1\u6709\u4fee\u6539\uff0c\u5219\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6811\u5f62DP\uff1a\n\n\u8bbe$f_{i,0}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8282\u70b9$i$\u4e0d\u9009\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n$f_{i,1}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8282\u70b9$i$\u9009\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u5219$f_{i,0}=\\sum_{s\\in son_{i}}\\max(f_{s,0},f_{s,1})$\u3002\n\n$f_{i,1}=\\sum_{s\\in son_{i}}f_{s,0}$\u3002\n\n~~\u7136\u540e\u5b83\u5c31\u968f\u624b\u7ed9\u4e86\u4f60\u4e00\u4e2a\u4fee\u6539~~\n\n\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e1c\u897f\u6765\u5feb\u901f\u7ef4\u62a4\u8f6c\u79fb\u3002\n\n\u8003\u8651\u7528\u4e00\u4e2a\u884c\u5411\u91cf\u6765\u5b9a\u4e49$i$\u8282\u70b9\u7684\u72b6\u6001$\\left[ \\begin{matrix} f_{i,0} & f_{i,1}\\end{matrix}\\right]$\u3002\n\n\u7136\u540e\uff0c\u5982\u679c\u80fd\u6709\u4e00\u4e2a\u77e9\u9635\u6765\u8fdb\u884c\u5feb\u901f\u8f6c\u79fb\u72b6\u6001\uff0c\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4e00\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u4e86\u3002\n\n\u8003\u8651\u65b0\u5b9a\u4e49\u4e00\u79cd\u77e9\u9635\u8fd0\u7b97$A\\oplus B=C$\uff0c\u5176\u4e2d$C_{i,j}=\\max_{k}\\{a_{i,k}+b_{k,j}\\}$\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u4e2a\u8fd0\u7b97\u4e5f\u662f\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3001\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u5f53\u77e9\u9635\u4e58\u6cd5\u7528\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u5bf9\u6811\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u91cd\u5b9a\u4e49\u4e00\u4e0b\u72b6\u6001\uff1a\n\n$f_{i,0}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8282\u70b9$i$\u4e0d\u9009\uff0c\u4e14\u4e0d\u8003\u8651\u5176\u91cd\u513f\u5b50\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n$f_{i,1}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8282\u70b9$i$\u9009\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u8003\u8651\u5f53\u524d\u72b6\u6001\u52a0\u4e0a\u91cd\u513f\u5b50$p$\u7684\u72b6\u6001\u4f1a\u53d8\u6210\u4ec0\u4e48\u3002\n\n\u8bbe$g$\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u5b9e\u9645DP\u503c\uff08\u52a0\u4e0a\u91cd\u513f\u5b50\u540e\uff09\uff0c\u5219\uff1a\n\n$g_{i,0}=f_{i,0}+\\max(g_{p,0},g_{p,1})$\uff0c$g_{i,1}=f_{i,1}+g_{p,0}$\u3002\n\n\u7528\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u6765\u5199\u7684\u8bdd\uff0c\u5c31\u662f\uff1a\n\n$$\\left[\\begin{matrix}  g_{i,0} & g_{i,1}  \\end{matrix}\\right]= \\left[\\begin{matrix} f_{i,0}& f_{i,1} \\end{matrix}\\right]\\oplus\\left[\\begin{matrix}  g_{p,0}& g_{p,1} \\\\ g_{p,0} & -\\infty   \\end{matrix}\\right]$$\n\n\u8fd8\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n$$\\left[\\begin{matrix}  g_{p,0}& g_{p,1} \\\\ g_{p,0} & g_{p,1}   \\end{matrix}\\right]\\oplus\\left[\\begin{matrix}  f_{i,0}& f_{i,1} \\\\ f_{i,0} & -\\infty   \\end{matrix}\\right] =\\left[\\begin{matrix}\\max(g_{p,0}+f_{i,0},g_{p,1}+f_{i,0})&\\max(g_{p,0}+f_{i,1},g_{p,1}-\\infty)\\\\ \\max(g_{p,0}+f_{i,0},g_{p,1} + f_{i,0}) & \\max(g_{p,0}+f_{i,1},g_{p,1}-\\infty)        \\end{matrix}\\right]=\\left[\\begin{matrix}  g_{i,0} & g_{i,1}\\\\g_{i,0} & g_{i,1}  \\end{matrix}\\right]$$\n\n\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u5de6\u8fb9\u90a3\u4e2a\u77e9\u9635\u7684\u7b2c\u4e00\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e8c\u884c\u662f\u7528\u6765\u5360\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0b\u9762\u6784\u9020\u7684\u65f6\u5019\uff0c\u53f3\u4e0b\u89d2\u5143\u7d20\u8d4b\u503c\u6210\\\\(-\\infty\\\\)\u4e5f\u6ca1\u95ee\u9898\u3002\n\n\n\u800c\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\u94fe\u5c3e\u7684\u8282\u70b9\uff0c\u5176$f_i=g_i$\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c$g_p$\u7684\u72b6\u6001\u4e5f\u662f\u901a\u8fc7$f_p$\u7684\u72b6\u6001\u4e58\u4e0a\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\u5f97\u6765\u7684\uff08\u94fe\u5c3e\u9664\u5916\uff09\u3002\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u77e9\u9635\u4e58\u6cd5\uff08\u521a\u521a\u5b9a\u4e49\u7684$\\oplus$\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9$i$\uff0c\u9996\u5148\u628a\u5b83\u7684$f$\u5904\u7406\u51fa\u6765\uff08\u6b64\u65f6$i$\u7684\u8f7b\u513f\u5b50\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\uff0c\u53c8\u56e0\u4e3a\u8fd9\u4e2a\u8f7b\u513f\u5b50\u4e00\u5b9a\u662f\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u9996\uff0c\u6240\u4ee5\u5176DP\u503c\u53ef\u4ee5\u4e00\u904d\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u5f97\u51fa\uff09\uff0c\u7136\u540e\uff0c\u6784\u5efa\u8f6c\u79fb\u77e9\u9635\uff1a\n\n$$\\left[\\begin{matrix}  f_{i,0}& f_{i,1} \\\\ f_{i,0} & -\\infty   \\end{matrix}\\right]$$\n\n\u6254\u8fdb\u7ebf\u6bb5\u6811\u91cc\u3002\n\n\u4e4b\u540e\uff0c\u6bcf\u6761\u91cd\u94fe\u7684\u94fe\u9996\u7684DP\u503c\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u8be5\u91cd\u94fe\u7684\u4e58\u79ef\u5f97\u5230\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u9996\u5148\u628a\u8fd9\u4e2a\u8282\u70b9\u5bf9\u4e8e\u7684\u77e9\u9635\u7684\u503c\u4fee\u6539\u3002\u8fd9\u6837\uff0c\u8fd9\u6761\u91cd\u94fe\u7684\u503c\u5c31\u4f1a\u88ab\u4fee\u6539\uff0c\u5219\u4e0a\u9762\u7684\u91cd\u94fe\u7684\u503c\u4e5f\u4f1a\u76f8\u5e94\u4fee\u6539\u3002\n\n\u6cbf\u7740\u91cd\u94fe\u5f80\u4e0a\u8df3\uff0c\u7136\u540e\u6bcf\u6b21\u4fee\u6539\u94fe\u9996\u5143\u7d20\u7684\u7236\u8282\u70b9\u7684\u77e9\u9635\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6700\u591a\u8df3$\\log$\u6761\u91cd\u94fe\uff0c\u6240\u4ee5\u5355\u6b21\u4fee\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6$O(8\\log^2 n)$\u3002\n\n\u67e5\u8be2\u7684\u8bdd\uff0c\u76f4\u63a5\u67e5\u6839\u8282\u70b9\u7684\u8fd9\u6761\u91cd\u94fe\u5373\u53ef\u3002\u5355\u6b21\u67e5\u8be2$O(8\\log n)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(8m\\log^2n)$\u3002\n\n\u6ce8\u610f\u77e9\u9635\u4e58\u6cd5**\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b**\uff0c\u800c\u6211\u7684\u505a\u6cd5\u662f\u81ea\u4e0b\u5411\u4e0a\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u65f6\u5019\u8981\u7528\u53f3\u8fb9\u533a\u95f4\u7684\u77e9\u9635\u4e58\u4e0a\u5de6\u8fb9\u533a\u95f4\u7684\u77e9\u9635\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#include<stack>\n#define N 100005\n#define inf 1000000000\nstruct istream{\n\tint c;\n\ttemplate<typename T>\n\tinline istream&operator>>(T&d){\n\t\tint b=0;\n\t\twhile(!isdigit(c=getchar()))b=c=='-';\n\t\tfor(d=0;isdigit(c);c=getchar())\n\t\td=(d<<3)+(d<<1)+(c^'0');\n\t\tif(b)d=-d;\n\t\treturn*this;\n\t}\n}cin;\nint n,m,V[N],head[N],cnt=0,dep[N],top[N],fa[N],sz[N],son[N],dfn[N],idx=0,idfn[N],tail[N];\nstruct edge{\n\tint to,nxt;\n}e[N<<1];\nstruct trans{\n\tint a[2][2],r,c;\n\tinline trans(){memset(a,0,sizeof a);}\n\tinline trans operator*(const trans&b)const{\n\t\ttrans c;\n\t\tc.r=r,c.c=b.c;\n\t\tfor(int i=0;i<r;++i)\n\t\tfor(int j=0;j<c.c;++j)\n\t\tfor(int k=0;k<b.r;++k){\n\t\t\tc.a[i][j]=std::max(c.a[i][j],a[i][k]+b.a[k][j]);\n\t\t}\n\t\treturn c;\n\t}\n}d[N<<2],s[N];\ntrans query(int l,int r,int o,const int&L,const int&R){\n\tif(L<=l&&r<=R)return d[o];\n\tconst int mid=l+r>>1;\n\tif(L<=mid&&mid<R)return query(mid+1,r,o<<1|1,L,R)*query(l,mid,o<<1,L,R);else\n\tif(mid<R)return query(mid+1,r,o<<1|1,L,R);else\n\tif(L<=mid)return query(l,mid,o<<1,L,R);\n}\nvoid modify(int l,int r,int o,const int&pos,const trans&to){\n\tif(l==r)d[o]=to;else{\n\t\tconst int mid=l+r>>1;\n\t\tif(pos<=mid)modify(l,mid,o<<1,pos,to);else\n\t\tmodify(mid+1,r,o<<1|1,pos,to);\n\t\td[o]=d[o<<1|1]*d[o<<1];\n\t}\n}\nvoid dfs(int now){\n\tsz[now]=1,son[now]=0;\n\tfor(int i=head[now];i;i=e[i].nxt)\n\tif(!dep[e[i].to]){\n\t\tdep[e[i].to]=dep[now]+1;\n\t\tfa[e[i].to]=now;\n\t\tdfs(e[i].to);\n\t\tsz[now]+=sz[e[i].to];\n\t\tif(!son[now]||sz[son[now]]<sz[e[i].to])son[now]=e[i].to;\n\t}\n}\nvoid dfs2(int now){\n\tidfn[dfn[now]=++idx]=now;\n\tif(son[now])top[son[now]]=top[now],dfs2(son[now]);\n\tfor(int i=head[now];i;i=e[i].nxt)\n\tif(e[i].to!=son[now]&&dep[e[i].to]>dep[now])dfs2(top[e[i].to]=e[i].to);\n\ttail[now]=(son[now])?tail[son[now]]:now;\n}\nvoid calc(int now){\n\tstd::stack<int>q;\n\tfor(int i=now;i;i=son[i])q.push(i);\n\twhile(!q.empty()){\n\t\tint u=q.top();\n\t\tq.pop();\n\t\tint x=0,y=V[u];\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\tif(dep[e[i].to]>dep[u]&&e[i].to!=son[u]){\n\t\t\tcalc(e[i].to);\n\t\t\ttrans q=s[e[i].to];\n\t\t\tx+=std::max(q.a[0][0],q.a[0][1]);\n\t\t\ty+=q.a[0][0];\n\t\t}\n\t\ttrans q;\n\t\tq.r=q.c=2;\n\t\tq.a[0][0]=q.a[1][0]=x;\n\t\tq.a[0][1]=y;\n\t\tq.a[1][1]=-inf;\n\t\tmodify(1,n,1,dfn[u],q);\n\t}\n\ts[now]=query(1,n,1,dfn[now],dfn[tail[now]]);\n}\nvoid modify(int u,int val){\n\ttrans p=query(1,n,1,dfn[u],dfn[u]);\n\tp.a[0][1]+=val-V[u];\n\tmodify(1,n,1,dfn[u],p);\n\tV[u]=val;\n\tfor(int now=top[u];now!=1;now=top[now]){\n\t\tint f=fa[now];\n\t\tp=query(1,n,1,dfn[f],dfn[f]);\n\t\ttrans q=query(1,n,1,dfn[now],dfn[tail[now]]);\n\t\tp.a[0][0]+=std::max(q.a[0][0],q.a[0][1])-std::max(s[now].a[0][0],s[now].a[0][1]);\n\t\tp.a[0][1]+=q.a[0][0]-s[now].a[0][0];\n\t\tp.a[1][0]=p.a[0][0];\n\t\tmodify(1,n,1,dfn[f],p);\n\t\ts[now]=q;\n\t\tnow=f;\n\t}\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;++i)cin>>V[i];\n\tfor(int i=1;i<n;++i){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\te[++cnt]=(edge){v,head[u]};head[u]=cnt;\n\t\te[++cnt]=(edge){u,head[v]};head[v]=cnt;\n\t}\n\tdfs(dep[1]=1);dfs2(top[1]=1);\n\tcalc(1);\n\twhile(m--){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tmodify(x,y);\n\t\ttrans p=query(1,n,1,1,dfn[tail[1]]);\n\t\tprintf(\"%d\\n\",std::max(p.a[0][0],p.a[0][1]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543996766,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001dp\u3011"
    },
    {
        "content": "\u66b4\u529b\u7adf\u7136\u8fdb\u4e86\u7b2c\u4e00\u9875\uff01\uff01\uff01\n\n\u8fd8\u662f\u4e00\u9053\u7d2b\u9898\uff01\uff01\uff01\n\n\u6211\u4e5f\u6ca1\u61c2\uff0c\u6211\u8fd9$O(mh)$\u7684\u7b97\u6cd5\u7adf\u7136\u80fd\u8fc7\uff01\uff01\uff01\n\n\u601d\u8def\uff1a\n\n$dp[i][0]$\u8bb0\u5f55\u6ca1\u9009\u6b64\u70b9\u7684\u6700\u5927\u503c\n\n$dp[i][1]$\u8bb0\u5f55\u9009\u6b64\u70b9\u7684\u6700\u5927\u503c\n\n\u5148\u6811\u5f62$dp$(\u6811\u5f62$dp$\u5e94\u8be5\u90fd\u4f1a\u5427\uff0c\u90fd\u6765\u505a\u7d2b\u9898\u4e86)\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4fee\u6539\u90fd\u91cd\u65b0\u6811\u5f62$dp$\uff0c\u4f46\u662f\u53ea\u9700\u8981\u4fee\u6539\u4ed6\u7684\u7956\u5148\u3002~~\u5982\u679c\u51fa\u9898\u6bd2\u7624\uff0c\u90a3\u5c31\u4f1a\u53d8\u6210~~$O(nm)$\n\n\u91cd\u65b0\u8ba1\u7b97\u4ed6\u7684\u7956\u5148\u65f6\uff0c\u4e0d\u7528\u628a\u6bcf\u4e2a\u513f\u5b50\u90fd\u7b97\u4e00\u904d\uff0c\u53ea\u9700\u8981\u7b97\u8fd9\u4e2a\u70b9\u6709\u4fee\u6539\u8fc7\u7684\u513f\u5b50\u524d\u540e\u4e24\u6b21\u7684\u5dee\u503c\u3002\n\ncode time\uff1a\n```cpp\n /*      \u897f\u6c5f\u6708\u00b7\u8bc1\u660e\n\t\u5373\u5f97\u6613\u89c1\u5e73\u51e1\uff0c\u4eff\u7167\u4e0a\u4f8b\u663e\u7136\u3002\n   \u7559\u4f5c\u4e60\u9898\u7b54\u6848\u7565\uff0c \u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be\u3002 \n\n\t\u53cd\u4e4b\u4ea6\u7136\u540c\u7406\uff0c\u63a8\u8bba\u81ea\u7136\u6210\u7acb\u3002 \n\t\u7565\u53bb\u8fc7\u7a0bQED\uff0c\u7531\u4e0a\u53ef\u77e5\u8bc1\u6bd5\u3002*/\n#include<set>\n#include<map>\n#define mod 10\n#include<list>\n#include<cmath>\n#include<queue>\n#include<ctime>\n#include<stack>\n#include<ctime>\n#include<bitset>\n#include<memory>\n#include<cstdio>\n#include<string>\n#include<sstream>\n#include<utility>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define rg register\n#define bll __int128 \n#define ll long long\n#define inf 214232409\n#define ull unsigned long long\n#define debug() cout<<\"SOSOSOSOSOSOSOS!!!!!!!!!\"\n#define C(i,j) dp[i+1][j+1]\nusing namespace std;\nint read(){\n\tint ans=0,f=1;char a=getchar();while(a>'9'||a<'0'){if(a=='-')f=(-1);a=getchar();}\n\twhile(a>='0'&&a<='9')ans=(ans<<3)+(ans<<1)+a-'0',a=getchar();return ans*f;\n}//\u4e00\u6761long long\u7684\u9ec4\u91d1\u5206\u5272\u7ebf---------------------------------------------------------------------------------------------\nint n,m,v[100005],first[100005],cnt,fa[100005],root=1,dp[100005][2],x,y,z,now,now_val;\nstruct edge{\n\tint to,nxt;\n}e[200005];\nvoid add(int x,int y){\n\te[++cnt].nxt=first[x];\n\te[cnt].to=y;\n\tfirst[x]=cnt;\n}\nvoid dfs(int now,int f){\n\tfa[now]=f;dp[now][1]=v[now];\n\tfor(int i=first[now],v;i;i=e[i].nxt){\n\t\tv=e[i].to;\n\t\tif(v==f)continue;\n\t\tdfs(v,now);\n\t\tdp[now][0]+=max(dp[v][0],dp[v][1]);\n\t\tdp[now][1]+=dp[v][0];\n\t}\n}//\u6811\u5f62dp \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5148\u53bb\u5b66\u4e60\u4e00\u4e0b\u3002 \nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)v[i]=read();\n\tfor(int i=1;i<n;i++)add(read(),read());\n\tdfs(root,-1);\n\tfor(int i=1;i<=m;i++){\n\t\tx=read();y=read();\n\t\tint fx=dp[x][0],fy=dp[x][1];\n\t\tdp[x][1]=dp[x][1]-v[x]+y;\n\t\tint now=fa[x],son=x,ldp0=fx,ldp1=fy;\n\t\twhile(now+1){\n\t\t\tint fx=dp[now][0],fy=dp[now][1];\n\t\t\tdp[now][0]-=max(ldp0,ldp1)-max(dp[son][0],dp[son][1]);//\u6839\u636e\u4e0a\u9762dfs\u7684\u6811\u5f62dp\u9012\u63a8\u516c\u5f0f\u7edf\u8ba1\u5dee\u503c \n\t\t\tdp[now][1]-=ldp0-dp[son][0];//\u540c\u7406\n\t\t\tson=now,now=fa[now],ldp0=fx,ldp1=fy;//\u8bb0\u5f55\u5f53\u524d\u70b9\uff0c\u56e0\u4e3a\u65e0\u6cd5\u77e5\u9053\u4e0b\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u8bb0\u5f55\u5f53\u4e0b\u4e00\u4e2a\u70b9\n\t\t\t//\u8fd8\u8bb0\u5f55\u539f\u6765dp\u7684\u503c\uff0c\u8ba1\u7b97\u5dee\u503c \n\t\t}\n\t\tv[x]=y;\n\t\tprintf(\"%d\\n\",max(dp[root][0],dp[root][1]));//\u8f93\u51fadp\u7ed3\u679c \n\t}\n\treturn 0;\n}\n/*\n * \u250c\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n * \u2502Esc\u2502   \u2502 F1\u2502 F2\u2502 F3\u2502 F4\u2502 \u2502 F5\u2502 F6\u2502 F7\u2502 F8\u2502 \u2502 F9\u2502F10\u2502F11\u2502F12\u2502 \u2502P/S\u2502S L\u2502P/B\u2502  \u250c\u2510    \u250c\u2510    \u250c\u2510\n * \u2514\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518  \u2514\u2518    \u2514\u2518    \u2514\u2518\n * \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n * \u2502~ `\u2502! 1\u2502@ 2\u2502# 3\u2502$ 4\u2502% 5\u2502^ 6\u2502& 7\u2502* 8\u2502( 9\u2502) 0\u2502_ -\u2502+ =\u2502 BacSp \u2502 \u2502Ins\u2502Hom\u2502PUp\u2502 \u2502Num\u2502 / \u2502 * \u2502 - \u2502\n * \u251c\u2500\u2500\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n * \u2502 Tab \u2502 Q \u2502 W \u2502 E \u2502 R \u2502 T \u2502 Y \u2502 U \u2502 I \u2502 O \u2502 P \u2502{ [\u2502} ]\u2502 | \\ \u2502 \u2502Del\u2502End\u2502PDn\u2502 \u2502 7 \u2502 8 \u2502 9 \u2502   \u2502\n * \u251c\u2500\u2500\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u252c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 + \u2502\n * \u2502 Caps \u2502 A \u2502 S \u2502 D \u2502 F \u2502 G \u2502 H \u2502 J \u2502 K \u2502 L \u2502: ;\u2502\" '\u2502 Enter  \u2502               \u2502 4 \u2502 5 \u2502 6 \u2502   \u2502\n * \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \u250c\u2500\u2500\u2500\u2510     \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n * \u2502 Shift  \u2502 Z \u2502 X \u2502 C \u2502 V \u2502 B \u2502 N \u2502 M \u2502< ,\u2502> .\u2502? /\u2502  Shift   \u2502     \u2502 \u2191 \u2502     \u2502 1 \u2502 2 \u2502 3 \u2502   \u2502\n * \u251c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2534\u2500\u252c\u2500\u2534\u2500\u2500\u252c\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2534\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2534\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2524 \u250c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2510 \u251c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 E\u2502\u2502\n * \u2502 Ctrl\u2502 Win\u2502 Alt\u2502         Space         \u2502 Alt\u2502 Win\u2502Menu\u2502Ctrl\u2502 \u2502 \u2190 \u2502 \u2193 \u2502 \u2192 \u2502 \u2502   0   \u2502 . \u2502\u2190\u2500\u2518\u2502\n * \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n */\n```\n",
        "postTime": 1586309240,
        "uid": 261018,
        "name": "\u5362\u672c\u4f1f\uff01\uff01",
        "ccfLevel": 0,
        "title": "4719 \u3010\u6a21\u677f\u3011\"\u52a8\u6001 DP\"&\u52a8\u6001\u6811\u5206\u6cbb \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u8fd9\u79cd $O(n\\log^2n)$ \u8fd8\u5e38\u6570\u5927\u7684\u53ef\u4ee5\u66b4\u529b dp \u8fc7\u6389\u3002\r\n\r\n\u9996\u5148\u8bbe $dp(i,j)$ \u8868\u793a\u8003\u8651\u7b2c $i$ \u4e2a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u4e14\u8981\u6c42\u8fd9\u4e2a\u8282\u70b9\u72b6\u6001\u4e3a $j$ \u65f6\u7684\u7b54\u6848\u3002\r\n\r\n\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a\r\n$$dp(i,0)=\\sum_{u\\in i.son}\\max(dp(u,0),dp(u,1))$$\r\n$$dp(i,1)=v_i+\\sum_{u\\in i.son}dp(u,0)$$\r\n\r\n\u5f53\u7136\u4e86\uff0c\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u6bcf\u6b21\u66f4\u65b0\u91cd\u65b0 dp\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5316\u3002\r\n\r\n\u53ef\u4ee5\u53d1\u73b0\u4fee\u6539$u$\u8282\u70b9\u7684\u65f6\u5019\u53ea\u4f1a\u6539\u53d8 $1-u$ \u8fd9\u4e00\u6761\u94fe\u7684 dp \u6570\u7ec4\u3002\r\n\r\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u81ea\u5e95\u5411\u4e0a\u4fee\u6539\u8fd9\u4e00\u6761\u94fe\u4e0a\u7684 dp \u6570\u7ec4\uff0c\u6bcf\u6b21\u66b4\u529b\u91cd\u7b97\u5373\u53ef\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6\u671f\u671b\u662f $O(h_ud)$\uff0c$h_u$ \u662f $u$ \u7684\u9ad8\u5ea6\uff0c$d$ \u662f\u5e73\u5747\u5ea6\u6570\u3002\r\n\r\n\u6ce8\u610f\u5230\u6bcf\u6761\u8fb9\u4f1a\u5bf9\u5ea6\u6570\u603b\u548c\u8d21\u732e $1$\uff0c\u56e0\u6b64 $d=\\frac{n-1}{n}=O(1)$\u3002\r\n\r\n\u4ee3\u7801\uff1a\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define N 100005\r\nusing namespace std;\r\nint n,m,p[N],tot,hd[N],f[N],dp[N][2];\r\nstruct edge{int t,nxt;}es[N<<1];\r\nvoid add(int u,int v){es[++tot]=(edge){v,hd[u]},hd[u]=tot;}\r\nvoid dfs(int x,int fa){\r\n\tdp[x][1]=p[x],dp[x][0]=0,f[x]=fa;\r\n\tfor(int i=hd[x];i;i=es[i].nxt){\r\n\t\tif(es[i].t==fa)continue;\r\n\t\tdfs(es[i].t,x);\r\n\t\tdp[x][0]+=max(dp[es[i].t][1],dp[es[i].t][0]);\r\n\t\tdp[x][1]+=dp[es[i].t][0];\r\n\t}\r\n}\r\nint main(){\r\n    scanf(\"%d%d\",&n,&m);\r\n    for(int i=1;i<=n;i++)scanf(\"%d\",&p[i]);\r\n    for(int i=1,u,v;i<n;i++)scanf(\"%d%d\",&u,&v),add(u,v),add(v,u),f[v]=u;\r\n    dfs(1,0);\r\n    for(int i=1,x,y;i<=m;i++){\r\n    \tscanf(\"%d%d\",&x,&y);\r\n    \tfor(p[x]=y;x;x=f[x]){\r\n    \t\tdp[x][1]=p[x],dp[x][0]=0;\r\n    \t\tfor(int j=hd[x];j;j=es[j].nxt){\r\n    \t\t\tif(es[j].t==f[x])continue;\r\n    \t\t\tdp[x][0]+=max(dp[es[j].t][1],dp[es[j].t][0]);\r\n\t\t\t\tdp[x][1]+=dp[es[j].t][0];\r\n\t\t\t}\r\n\t\t}\r\n\t\tprintf(\"%d\\n\",max(dp[1][0],dp[1][1]));\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\u7531\u4e8e\u8fd9\u9053\u9898\u7684\u6570\u636e\u662f\u968f\u673a\u751f\u6210\u7684\uff0c\u56e0\u6b64\u6811\u7684\u671f\u671b\u9ad8\u5ea6\u4e3a $O(\\log n)$\uff0c\u5219\u603b\u590d\u6742\u5ea6\u671f\u671b\u4e3a $O(n\\log n)$\uff0c\u4e0d\u9700\u8981\u5361\u5e38\u5c31\u53ef\u4ee5\u8fc7\u3002\r\n\r\n\u5f53\u7136\uff0c\u8fd9\u79cd\u66b4\u529b\u9047\u5230[\u8fd9\u79cd\u9898\u76ee](https://www.luogu.com.cn/problem/P4751)\uff0c\u90a3\u80af\u5b9a\u5c31\u6b7b\u4e86\uff0c\u8981\u7528\u5176\u4ed6\u65b9\u6cd5\u3002\r\n\r\n~~\u7136\u800c\u6211\u4e0d\u4f1ashadowice1984\u7684\u4e0a\u53e4\u79d1\u6280\uff0c\u6240\u4ee5\u8fd9\u7bc7\u6587\u7ae0\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u4e86\u3002~~",
        "postTime": 1583726456,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\"\u52a8\u6001 DP\"&\u52a8\u6001\u6811\u5206\u6cbb\u3011"
    },
    {
        "content": "\u5927\u4f6c\u4eec\u90fd\u5199\u6b63\u89e3\uff0c\u592a\u5de8\u4e86\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u5199\u4e86\u4e00\u4e2a\u66b4\u529b\n\u6ca1\u60f3\u5230\u6570\u636e~~\u8fc7\u6c34~~\uff08~~\u5176\u5b9e\u8bf7\u6c42\u52a0\u5f3a\u6570\u636e\u662f\u5199\u8fd9\u7bc7\u9898\u89e3\u7684\u76ee\u7684~~\uff09\uff0c\u8dd1\u4e86\u5927\u7ea6240ms...\n\n#### \u5927\u81f4\u601d\u8def\uff1a\n\u6811\u5f62dp\u7ef4\u62a4\u9009\u8fd9\u4e2a\u70b9\u6216\u4e0d\u9009\u7684\u6700\u5927\u503c\n\n\u5148\u60f3\u8c61\u6210\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\n\nf[i][0] \u8868\u793a\u4e0d\u9009i\u70b9\u7684\u6700\u5927\u503c\n\nf[i][1] \u8868\u793a\u9009i\u70b9\u7684\u6700\u5927\u503c\n\n\u56e0\u4e3a\u662f\u6811\u5f62dp\uff0c\u5c31\u53d8\u6210\u7ef4\u62a4\u5173\u4e8e\u5b83\u548c\u5b83\u5b50\u6811\u7684\u503c\n\n\u6bcf\u6b21\u4fee\u6539\u65f6\u66b4\u529b\u7ef4\u62a4\u4e00\u904d\u663e\u7136\u4f1a\u8d85\u65f6\uff0c60\u5206\n\n\u4f18\u5316\u4e00\uff1a\n\n\u6bcf\u6b21\u7ef4\u62a4\u4fee\u6539\u7684\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8fd9\u6761\u94fe\n\n\u4f18\u5316\u4e8c\uff1a\n\n\u4fee\u6539\u8fd9\u6761\u94fe\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u4fee\u6539\u524d\u540e\u4fe1\u606f\u4e0d\u53d8\uff0c\u5219\u505c\u6b62\u4fee\u6539\uff0c\u8f93\u51fa\u539f\u6765\u7684\u7b54\u6848\u5373\u53ef\n\n\u6709\u4e86\u8fd9\u4e24\u4e2a\u4f18\u5316\uff0c\u5c31\u53ef\u4ee5AC\u4e86\n\n### Code:\n\n```cpp\n//Code by : Y-k-y \n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define ll long long\nconst int N=200001;\nusing namespace std;\nnamespace YKY{\n\tinline int rnd(){//rnd\u7248\u5feb\u8bfb\uff0cread\u597d\u50cf\u5728linux\u4e0b\u662f\u5173\u952e\u5b57 \n\tint res=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){res=res*10+ch-'0';ch=getchar();}\n\treturn res*f;\n\t}\n\tinline void wr(int x){\n\tif(x<0){putchar('-');x=-x;}if(x>9) wr(x/10);putchar(x%10+'0');\n\t}\n\tint f[N][2],val[N],head[N],ff[N];\n\tint n,m,tot;\n\tvector<int>vec[N];\n\tstruct pp{\n\t\tint v,nxt;\n\t}edge[N];\n\tinline void add(int u,int v){\n\t\tedge[++tot].nxt=head[u],head[u]=tot;\n\t\tedge[tot].v=v;\n\t}\n\tinline void dfs(int u,int fa){\n\t\tf[u][1]=val[u];\n\t\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].v;\n\t\t\tif(v==fa)continue;\n\t\t\tvec[u].push_back(v); //\u4e3a\u4e86\u65b9\u4fbf\u4fee\u6539\u65f6\u7684\u64cd\u4f5c\uff0c\u7528vector\u5b58\u4e0b\u6765\uff08\u5f53\u7136\uff0c\u90bb\u63a5\u8868\u4e5f\u53ef\u4ee5\uff0c\u4f46\u672c\u9898\u5728O2\u73af\u5883\u4e0b vector\u66f4\u5feb\uff09 \n\t\t\tff[v]=u;//\u8bb0\u5f55father,\u65b9\u4fbf\u4f18\u5316\u65f6\u4f7f\u7528 \n\t\t\tdfs(v,u);\n\t\t\tf[u][0]+=max(f[v][0],f[v][1]);\n\t\t\tf[u][1]+=f[v][0];\n\t\t}\n\t}\n\tinline int work(int u){\n\t\tint ans=0;//\u4ece\u5f53\u524d\u70b9\u4e00\u76f4\u7ef4\u62a4\u5230\u4fee\u6539\u524d\u540e\u4e0d\u53d8\u503c\u7684\u90a3\u4e2a\u70b9 \n\t\twhile(233){\n\t\t\tint x1=f[u][1],x2=f[u][0];//\u8bb0\u5f55 \n\t\t\tf[u][1]=val[u];f[u][0]=0;\n\t\t\tfor(int i=0;i<(int)vec[u].size();i++){//\u73b0\u5728\uff0cvector\u4e2d\u53ea\u6709ta\u7684\u513f\u5b50 \n\t\t\t\tint v=vec[u][i];\n\t\t\t\tf[u][0]+=max(f[v][0],f[v][1]);\n\t\t\t\tf[u][1]+=f[v][0];\n\t\t\t}\n\t\t\tif(x1==f[u][1]&&x2==f[u][0])break;//\u9000\u51fa \n\t\t\tif(u==1)break;\n\t\t\tu=ff[u];\n\t\t}\n\t\tans=max(f[1][0],f[1][1]);\n\t\treturn ans;\n\t}\n\tint Main(){\n\t\tn=rnd();m=rnd();int x,y;\n\t\tfor(int i=1;i<=n;i++)val[i]=rnd();\n\t\tfor(int i=1;i<n;i++){\n\t\t\tx=rnd();y=rnd();\n\t\t\tadd(x,y);add(y,x);\n\t\t}\n\t\tdfs(1,0);//\u9884\u5904\u7406\u51fa\u7b54\u6848 \n\t\twhile(m--){\n\t\t\tx=rnd();y=rnd();\n\t\t\tval[x]=y;\n\t\t\twr(work(x));puts(\"\");\n\t\t}\n\t\treturn 0;\t\n\t}\n}\nint main(){\n\treturn YKY :: Main();//\u62dc\u62dc \n}\n```\n\n\n\n\n\n\n",
        "postTime": 1565307701,
        "uid": 71844,
        "name": "\u6768\u94e0\u8fdc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001 DP\u3011"
    },
    {
        "content": "### \u4e00\u9053\u9a97\u5206\u597d\u9898\n\n\u5efa\u6811\u65f6\u4ee51\u4e3a\u6839\u8282\u70b9\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u8dd1\u6811\u5f62dp\u3002\n\n\u4fee\u6539\u65f6\u4ece\u4fee\u6539\u7684\u70b9\u5f00\u59cb\uff0c\u5f80\u4e0a\u66f4\u6539\uff0c\u76f4\u5230\u8dd1\u5230\u6839\u8282\u70b9\u6216\u6ca1\u6709\u5f71\u54cd\u7684\u70b9\u4e3a\u6b62\n\n\u4ec0\u4e48\u53eb\u6ca1\u6709\u5f71\u54cd\u7684\u70b9\uff1f\n\n\u5c31\u662f\u6bcf\u4e00\u4e2a\u70b9\u5f80\u6839\u8282\u70b9\u8dd1\uff0c\u76f4\u5230\u5bf9\u4e8e\u6709\u4e00\u4e2a\u70b9\uff0c\u5b83dp\u7684\u503c\u6ca1\u6709\u6539\u53d8\n\n\u8fd9\u6837\u7684\u8bdd\u4e4b\u540edp\u7684\u503c\u4e5f\u662f\u4e00\u6837\uff0c\u6ca1\u5fc5\u8981\u66f4\u65b0\u3002\n\n\u8bdd\u8bf4\u5982\u679c\u4e0d\u7b97\u540e\u9762\u52a0\u5f3a\u7684\u6570\u636e\u7684\u8bdd\uff0c\u6211\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5\u8dd1\u5230\u5168\u7ad9\u7b2c\u4e00\uff0c\u7ba1\u7406\u80fd\u4e0d\u80fd\u52a0\u5f3a\u4e00\u4e0b\u6570\u636e\u554a\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nll n,m,a[100010],father[100010],f[100010][2];\nll ver[200010],Next[200010],head[100010],tot;\n//father\u662f\u7236\u8282\u70b9\n//f[x][0]\u8868\u793a\u70b9x\u4e0d\u9009\u65f6\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u6743\u503c\u5927\u5c0f\n//f[x][1]\u8868\u793a\u70b9x\u9009\u65f6\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u6743\u503c\u5927\u5c0f\n\ninline ll read(){//\u8f93\u5165\u4f18\u5316\n    ll x=0,tmp=1;\n    char ch=getchar();\n    while(!isdigit(ch)){\n    \tif(ch=='-') tmp=-1;\n    \tch=getchar();\n    }\n    while(isdigit(ch)){\n    \tx=(x<<3)+(x<<1)+(ch^48);\n        ch=getchar();\n    }\n    return tmp*x;\n}\n\ninline void write(ll x){//\u8f93\u51fa\u4f18\u5316\n    if(x<0){\n        putchar('-');\n        x=-x;\n    }\n    ll y=10,len=1;\n    while(y<=x){\n        y=(y<<3)+(y<<1);\n        len++;\n    }\n    while(len--){\n        y/=10;\n        putchar(x/y+48);\n        x%=y;\n    }\n}\n\ninline void addEdge(ll x,ll y){//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\n\nvoid dfs(ll x,ll before){//\u6811\u5f62dp\n\tfather[x]=before; f[x][1]=a[x];\n\tfor(ll i=head[x]; i; i=Next[i]){\n\t\tll y=ver[i];\n\t\tif(y==before) continue;\n\t\tdfs(y,x);\n\t\tf[x][0]+=max(f[y][0],f[y][1]);\n\t\tf[x][1]+=f[y][0];\n\t}\n}\n\nvoid update(ll k){\n\tif(k==1) return;\n\tll x=father[k],t1=0,t2=a[x];\n\tfor(ll i=head[x]; i; i=Next[i]){\n\t\tll y=ver[i];\n\t\tif(y==father[x]) continue;\n\t\tt1+=max(f[y][0],f[y][1]);\n\t\tt2+=f[y][0];\n\t}\n\tif(t1==f[x][0]&&t2==f[x][1]) return;//\u5982\u679c\u6ca1\u6709\u5f71\u54cd\uff0c\u76f4\u63a5\u7ed3\u675f\n\tf[x][0]=t1; f[x][1]=t2;\n\tupdate(x);//\u7ee7\u7eed\u66f4\u65b0\n}\n\nint main(){\n\tn=read(); m=read();\n\tfor(ll i=1; i<=n; i++) a[i]=read();\n\tfor(ll i=1; i<n; i++){\n\t\tll x=read(),y=read();\n\t\taddEdge(x,y);\n\t\taddEdge(y,x);\n\t}\n\tdfs(1,0);\n\twhile(m--){\n\t\tll x=read(),val=read();\n\t\tf[x][1]=f[x][1]-a[x]+val;\n\t\ta[x]=val;\n\t\tupdate(x);\n\t\twrite(max(f[1][0],f[1][1])); putchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1563447841,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4719 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001 DP\u3011"
    }
]