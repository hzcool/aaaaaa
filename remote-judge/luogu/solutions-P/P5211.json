[
    {
        "content": "**Upd 2020/06/15\uff1a\u4f18\u5316\u4e86 `\\overline` \u592a\u4e11\u7684\u95ee\u9898\uff0c\u6dfb\u4e0a\u4ee3\u7801\u3002**\n\n# ZJOI2017 \u5b57\u7b26\u4e32\n\n\u524d\u7f6e\u829d\u58eb\uff1aLyndon \u5206\u89e3\uff0cSignificant Suffixes\uff0c\u7ebf\u6bb5\u6811\uff0c\u5b57\u7b26\u4e32\u54c8\u5e0c\uff0c\u5206\u5757\u3002\n\n\u5982\u679c\u4f60\u4f1a Significant Suffixes \u76f8\u5173\u77e5\u8bc6\uff0c\u8bf7\u9605\u8bfb **[0 Marks & Facts]** \u540e\u76f4\u63a5\u8df3\u5230\u540e\u9762\u7684 **\u8fdb\u5165\u6b63\u9898**\u3002\n\n## 0 Marks & Facts\n\n1. \u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u5b57\u7b26\u4e32 $a$ \u548c $b$\uff0c\u5982\u679c $a$ \u7684\u5b57\u5178\u5e8f $<b$\uff0c\u5219\u6211\u4eec\u79f0 $a < b$\u3002\n2. \u5982\u679c $a$ \u662f $b$ \u7684\u524d\u7f00\u4e14 $a \\ne b$\uff0c\u5219\u6211\u4eec\u79f0 $a \\sqsubset b$\u3002\n3. \u5982\u679c $a$ \u662f $b$ \u7684\u524d\u7f00\uff0c\u5219\u6211\u4eec\u79f0 $a \\sqsubseteq b$\u3002\n4. \u5982\u679c $a < b$ \u4e14 $a$ \u4e0d\u662f $b$ \u7684\u524d\u7f00\uff0c\u5219\u6211\u4eec\u79f0 $a \\triangleleft b$\u3002\u5373 $a \\triangleleft b \\Longleftrightarrow (a < b) \\wedge (a \\not\\sqsubseteq b)$\u3002\n5. ${abc}$ \u8868\u793a\u62fc\u63a5 $a, b, c$ \u4e09\u4e2a\u5b57\u7b26\u4e32\u3002\n6. $a^n$ \u8868\u793a $n$ \u4e2a $a$ \u62fc\u63a5\u5728\u4e00\u8d77\u3002e.g. ${a^2b} = {aab}$\n7. $\\epsilon$ \u8868\u793a\u7a7a\u4e32\u3002\n8. \u6211\u4eec\u5b9a\u4e49\u5b57\u7b26\u96c6\u4e3a $\\Sigma$\uff0c\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e3a $\\Sigma^*$\uff0c$\\Sigma^+ = \\Sigma^* \\setminus \\{\\epsilon\\}$\n9. $\\operatorname{pref}(a)$ \u8868\u793a\u6240\u6709 $a$ \u7684\u524d\u7f00\u7684\u96c6\u5408\uff0c$\\operatorname{suf}(a)$ \u8868\u793a\u6240\u6709 $a$ \u7684\u540e\u7f00\u7684\u96c6\u5408\uff08\u5305\u542b $a$ \u548c $\\epsilon$\uff09\n10. $\\operatorname{pref}^+(a) = \\operatorname{pref}(a) \\setminus \\{a,\\epsilon\\},\\ \\operatorname{suf}^+(a) = \\operatorname{suf}^+(a) \\setminus \\{a, \\epsilon\\}$\n\n\u4e00\u4e9b\u975e\u5e38\u663e\u7136\u7684 Fact:\n\n1. \u5982\u679c $a \\triangleleft b$\uff0c\u5219 ${au} < {bv}$\u3002\n\n## 1 Lyndon Words\n\n### 1.1 Definition\n\n**Lyndon Word**\uff1a\u4e00\u4e2a\u4e32\u662f\u4e00\u4e2a **Lyndon Word** \u5f53\u4e14\u4ec5\u5f53 $\\forall a$ \u7684\u540e\u7f00 $b$\uff0c\u6709 $a < b$\u3002\n\n$\\mathcal L$ \u8868\u793a Lyndon Word \u7684\u96c6\u5408\u3002\n\n### 1.2 Chan-Fox-Lyndon Factorization\n\n\u53c8\u79f0 Lyndon Decomposition\u3002\n\n\u6211\u4eec\u5b9a\u4e49 $\\operatorname{CFL}(s)$ \u662f\u4e00\u4e2a\u5bf9\u4e8e $s$ \u4e32\u7684\u5212\u5206\uff0c\u5373\u5212\u5206\u6210\u4e86 ${w_1w_2\\cdots w_k} = s$\uff0c\u4f7f\u5f97\u6240\u6709 $w_i$ \u662f Lyndon Word\uff0c\u5e76\u4e14 $w_1 \\ge w_2 \\ge \\cdots \\ge w_n$\u3002\n\n#### Theory 1.2.1 Lyndon Concatanation\n\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u7ed3\u8bba\u3002\n\n> \u5982\u679c $a, b \\in \\mathcal L$\uff0c\u4e14 $a < b$\uff0c\u5219 $\\overline {ab} \\in \\mathcal L$\u3002\n\n\u7531\u4e8e $a < b$\uff0c\u6211\u4eec\u6709 ${ab} < b$\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\n\ni) $a \\not \\sqsubseteq b$\uff1a\u6839\u636e $a < b$\uff0c\u6211\u4eec\u6709 $a \\triangleleft b$\u3002\u6240\u4ee5 ${ab} \\triangleleft b \\implies {ab} < b$\u3002\n\nii) $a \\sqsubseteq b$\uff1a\u4ee4 $b={ac}$\uff0c\u5219 ${ab} = {a^2c}$\u3002\u56e0\u4e3a $b \\in \\mathcal L$\uff0c\u6240\u4ee5 ${ab} < b \\implies {a^2c} < {ac} \\implies {ac} < c$\uff0c\u6240\u4ee5 $b < c$\u3002\n\n\u6240\u4ee5\uff0c$\\forall d \\in \\operatorname{suf}^+(b), \\ {ab} < b < d \\implies \\forall c \\in \\operatorname{suf}^+(a),\\ a \\triangleleft e \\implies {ab} \\triangleleft {eb}$\u3002$\\blacksquare$\n\n#### Theory 1.2.2 Existence of CFL\n\n\u8fd9\u4e2a\u7ed3\u8bba\u548c **[Theory 1.2.3] Uniqueness of CFL** \u662f\u4e24\u4e2a\u5f88\u6709\u8da3\u7684\u7ed3\u8bba\u3002\n\n> \u5bf9\u4e8e\u4efb\u610f\u7684\u4e32 $s$\uff0c$\\operatorname{CFL}(s)$ \u4e00\u5b9a\u5b58\u5728\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u5355\u4e2a\u7684\u5b57\u6bcd\u4e00\u5b9a\u662f Lyndon Word\u3002\n\n\u6839\u636e **[Theory 1.2.1 Lyndon Concatanation]**\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b57\u5178\u5e8f\u5c0f\u7684\u4e24\u4e2a Lyndon Word \u5e76\u8d77\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u7684\u5b57\u5178\u5e8f\u5355\u589e\u7684\u5e8f\u5217\u90fd\u5e76\u8d77\u6765\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684 CFL\u3002$\\blacksquare$\n\n#### Theory 1.2.3 Uniqueness of CFL\n\n> \u5bf9\u4e8e\u4efb\u610f\u7684\u4e32 $s$\uff0c$\\operatorname{CFL}(s)$ \u4e00\u5b9a\u552f\u4e00\u3002\n\n\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u6709\u4e24\u79cd\u65b9\u6848\u3002\u6211\u4eec\u53d6\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f97\u5230\u77db\u76fe\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u548c CFL \u7684\u5b9a\u4e49\u77db\u76fe\u4e86\u3002$\\blacksquare$\n\nQ: \u4e3a\u4ec0\u4e48\u4e0d\u5199\u8be6\u7ec6\u70b9\u5462\u2026\u2026 A\uff1b~~\u56e0\u4e3a\u6211\u61d2\uff01\uff01\uff01~~\n\n\u7136\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e86 **CFL \u5b58\u5728\u4e14\u552f\u4e00**\u3002\u7531\u6b64\u6709\u4e24\u4e2a\u63a8\u8bba\uff1a\n\n#### Theory 1.2.4 Lyndon Suffixes and Lyndon Prefixes\n\n\u597d\u73a9\u4e14\u663e\u7136\u7684 Fact\u3002\n\n> $w_1$ \u662f\u6700\u957f\u7684 Lyndon \u524d\u7f00\u4e14 $w_k$ \u662f\u6700\u957f\u7684 Lyndon \u540e\u7f00\u3002\n\n\u53cd\u8bc1\u6cd5\uff0c\u56e0\u4e3a\u5982\u679c $w_1$ \u4e0d\u662f\u6700\u957f\uff0c\u90a3\u4e48\u8fd8\u80fd\u518d\u62fc\uff0c\u4ea7\u751f\u4e86\u4e24\u4e2a\u5408\u6cd5\u7684 CFL\uff0c\u548c **[Theory 1.2.3 Uniqueness of CFL]** \u77db\u76fe\u3002\u6240\u4ee5 $w_1$ \u662f\u6700\u957f\u7684 Lyndon \u524d\u7f00\u3002\n\n$w_k$ \u540c\u7406\u3002$\\blacksquare$\n\n#### Theory 1.2.5 Theory of Minsuf\n\n\u5176\u5b9e\u8fd9\u662f\u4e00\u9053\u9898\uff0c\u8981\u6c42 $O(n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u3002\n\n> \u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u7684\u6700\u5c0f\u540e\u7f00\u662f $w_k$\u3002\n\n\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u6700\u5c0f\u540e\u7f00\u662f ${xw_{i+1}w_{i+2}\\cdots w_{k}}$ \u800c\u4e0d\u662f $w_k$ \u4e14 $|x| < |w_i|$\u3002\n\n\u6211\u4eec\u6709 ${x w_{i + 1} \\dots w_k} \\geq x > w_i \\ge w_k$\uff0c\u77db\u76fe\u3002$\\blacksquare$\n\n### 1.3 Duval's Algorithm\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(1)$ \u7684\u7b97\u6cd5\uff0c\u4e0d\u4f1a\u53ef\u4ee5\u53bb\u770b\u4f60\u8c37\u7684\u3010\u6a21\u677f\u3011Lyndon \u5206\u89e3\u3002\n\n## 2 Significant Suffixes\n\n### 2.1 Definition\n\n\u6211\u4eec\u4ee4 $\\operatorname{minsuf}(u)$ \u4e3a $u$ \u7684\u6700\u5c0f\u540e\u7f00\uff0c\u4e14 $\\operatorname{minsuf}(u, v) = \\min _{w \\in \\operatorname{suf}(u)} wv$\u3002\n\n**Significant Suffixes**\uff1a$\\Lambda(u) = \\arg\\min_{w\\in \\operatorname{suf}(u)} wv$\u3002 \n\n$\\operatorname{minsuf}(s)$ \u8868\u793a S \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u4e14\n\n\u7531 $\\operatorname{minsuf}$ \u7684\u6027\u8d28\u53ef\u77e5\uff0c$\\operatorname{minsuf}(u, \\epsilon) = \\operatorname{minsuf}(u)$\u3002$\\implies \\operatorname{minsuf}(u) \\in \\Lambda(u)$\u3002\n\n\u6240\u4ee5\uff0c\u663e\u7136 $\\forall u \\in \\Lambda(u),\\ \\operatorname{minsuf}(u) \\sqsubseteq u$\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u4e2a CFL \u5206\u89e3\u4e2d\u7684 Lyndon Words \u662f\u5b58\u5728\u4e00\u5b9a\u7684\u5faa\u73af\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u4e00\u4e2a CFL \u4e3a\u6b21\u65b9\u7684\u5f62\u5f0f\u3002\n$$\n\\operatorname{CFL}(u) = \\overline {{w_1}^{k_1}{w_2}^{k_2}\\cdots {w_n}^{k_n}}\n$$\n\u6211\u4eec\u8bb0 $s_i$ \u4e3a\u4e00\u4e2a\u540e\u7f00\uff0c\u5373 $s_i = \\overline {{w_i}^{k_i}{w_{i+1}}^{k_{i+1}}\\cdots{w_n}^{k_n}}$\u3002\u8fb9\u754c\uff1a$s_{n+1} = \\epsilon$\u3002\n\n### 2.2 Significant Theory\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5f15\u7406\u3002\n\n#### Theory 2.2.1 Infinite Theory\n\n\u4e00\u4e2a\u5341\u5206\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u548c\u663e\u7136\u4eca\u5929\u4e0b\u5927\u96e8\u4e00\u6837\u663e\u7136\u3002\n\n\u5728 **[Theory 2.2.2 Significant Suffixes Theory]** \u91cc\u9762\u4f1a\u7528\u5230\uff0c\u5efa\u8bae\u5148\u98df\u7528\u4e0b\u4e00\u4e2a Theory\u3002\n\n> \u5982\u679c $u^\\infty < v$\uff0c\u5219 $v > {uv} > {u^2v} > \\cdots$\u3002\n\n$u^\\infty < v \\implies u^\\infty < {uv}$\u3002\n\n\u4ee4 $u = {xay}$\uff0c$v = {(xay)^k xbh}$\uff0c\u5176\u4e2d $x,y,h\\in\\Sigma^*$\uff0c$a,b\\in\\Sigma$\uff0c$a<b$\u3002\n\n\u6211\u4eec\u6709 $v \\succ uv \\Longleftrightarrow (xay)^{k - 1} xbh \\succ (xay)^k xbh \\Longleftrightarrow xbh \\succ (xay) xbh$\u3002\n\n$v>{uv} \\implies {u^iv} > u^{i+1} \\implies \\blacksquare$\n\n\u540c\u7406\u5982\u679c $u^\\infty > v$\uff0c\u5219 $v < {uv} < {u^2v} < \\cdots$\u3002\n\n#### Theory 2.2.2 Significant Suffixes Theory\n\n> $$\n> \\Lambda(u)\\subseteq \\{s_i | i \\in [1,n]\\}\n> $$\n\n\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c\u8fd9\u4e2a\u547d\u9898\u4e0d\u6210\u7acb\uff0c\u5219\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\n\n**i)** \u5047\u8bbe\u6709\u4e00\u4e2a\u4e32 $v = \\overline {b{w_i}^ks_{i+1}} \\in \\Lambda(u)$\uff0c$|b| < |w_i|,\\ 0 \\le k < k_i$\u3002\n\n$w_i \\in \\mathcal L \\implies w_i \\triangleleft b \\implies s_i = {w_is_{i+1}} < {bs_{i+1}}$\uff0c\u77db\u76fe\u3002\n\n**ii)** \u5047\u8bbe\u6709\u4e00\u4e2a\u4e32 $v = {{w_i}^ks_{i+1}} \\in \\Lambda(u)$\uff0c$1 < k < k_i$\u3002\n\n\u6839\u636e **[Theory 2.2.1 Infinite Theory]**\uff0c\u5982\u679c ${w_i}^\\infty < s_{i+1}$\uff0c\u5219 ${{w_i}^{k_i}s_{i+1}} < {{w_i}^{k_i - 1}s_{i+1}}<\\cdots<s_{i+1}$\uff0c\u5426\u5219 ${{w_i}^{k_i}s_{i+1}} > {{w_i}^{k_i-1}s_{i+1}} > \\cdots > s_{i+1}$\u3002\n\n\u6211\u4eec\u4ee4 $\\lambda = \\min \\{i : s_{i+1} \\sqsubset s_i\\}$\u3002$\\forall i \\ge \\lambda, \\ w_i = {s_{i+1}y_i},\\ x_i = {y_is_{i+1}}$\u3002$\\implies s_i = {{w_i}^{k_i}s_{i+1}}= {(s_{i+1}y_i)^{k_i}s_{i+1}} = {s_{i+1}{x_i}^{k_i}}$\u3002\n\n\u6839\u636e CFL \u7684\u6027\u8d28\uff0c$s_{\\lambda} \\triangleleft w_{\\lambda - 1}$\u3002\u6240\u4ee5 $\\Lambda(u)\\subseteq \\{s_i | i \\in [1,n]\\}$\u3002$\\blacksquare$\n\n### 2.3 Other Theories\n\n#### Theory 2.3.1 Lambda Subset Theory\n\n> \u5982\u679c\u6709 $2$ \u4e2a\u4e32 $u$ \u548c $v$\uff0c\u6ee1\u8db3 $|u| \\le |v|$\uff0c\u5219\u6211\u4eec\u6709\n> $$\n> \\begin{aligned}\\Lambda(uv) &\\subseteq \\Lambda(v) \\cup \\{\\operatorname{maxsuf}^R(u, v)\\} \\\\&= \\Lambda(u) \\cup{\\max _{s \\in \\Lambda(u)}}^R \\{sv\\}\\end{aligned}\n> $$\n\n\u7406\u7531\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a $\\{\\operatorname{maxsuf}^R(u, v)\\}$ \u4e5f\u662f\u4e00\u4e2a Significant Suffix\uff0c\u968f\u610f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5c55\u6210\u7b2c\u4e8c\u884c\u7684\u5f0f\u5b50\u7684\u5f62\u5f0f\u3002$\\blacksquare$\n\n#### Theory 2.3.2 Significant Suffixes Log Theory\n\n> \u4e00\u4e2a\u5b57\u7b26\u4e32 $S$ \u7684 Significant Suffixes \u81f3\u591a\u6709 $\\log n$ \u4e2a\u3002\n\n\u539f\u547d\u9898\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u5316\u4e3a\uff1a\uff08\u611f\u8c22 yhx \u7684\u8bc1\u660e\uff09\n\n> \u5982\u679c\u4e24\u4e2a Significant Suffixes $u$\uff0c$v$ \u6ee1\u8db3 $|u| < |v|$\uff0c\u90a3\u4e48 $2|u| < |v|$\u3002\n\n\u53cd\u8bc1\u6cd5\u3002\u8bbe\u5b58\u5728 $|u| < |v| < 2|u|$\u3002\u56e0\u4e3a $u, v \\in \\operatorname{suf}^+(u)$\uff0c\u6240\u4ee5 $u \\in \\operatorname{suf}^+(v)$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u77e5\u9053\uff0c$u \\triangleleft v$\u3002$\\implies v$ \u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $|v| - |u| < \\frac {|v|} 2$ \u7684\u5468\u671f\uff0c\u8bb0\u4e3a $T$\u3002\n\n\u6240\u4ee5\uff0c$u = {Tw}, v = {T^2w}$\u3002\n\n\u7531\u4e8e $u$ \u662f\u4e00\u4e2a Significant Suffix\uff0c\u56e0\u6b64\u5b58\u5728\u4e32 $t$\uff0c\u6ee1\u8db3 $vt>ut$\uff0c\u5373 ${T^2wt} > {Twt} \\implies {Twt} > {wt}$\u3002\n\n\u800c $w \\in \\operatorname{suf}^+(s)$\uff0c\u6240\u4ee5\u4e0e $u$ \u662f Significant Suffix \u77db\u76fe\u3002$\\blacksquare$\n\n### 2.4 Facts\n\n\u6211\u4eec\u77e5\u9053 $\\Lambda(S)$ \u4e2d\u6709\u5f88\u591a\u4e32\uff0c\u5176\u4e2d\u6700\u77ed\u7684\u662f $\\operatorname{minsuf}(S)$\uff0c\u800c\u6700\u957f\u7684\u662f $\\operatorname{maxsuf}^R(S)$\u3002\u8fd9\u91cc\u7684 $^R$ \u4ee3\u8868 reverse\u3002\n\n- $\\Lambda(u) = \\{s_{\\lambda}, \\cdots, s_{n+1}\\}$\n- $\\operatorname{minsuf}(u) = s_n$\n- $\\operatorname{maxsuf}^R(u) = s_\\lambda$\n- ${x_\\lambda}^\\infty > \\cdots > {x_m}^\\infty$\n- \u6211\u4eec\u6709\u4e00\u4e2a\u4e32 $v$\uff0c${x_i}^\\infty > v > {x_{i+1}}^\\infty$\u3002\u5219 ${s_\\lambda v} > \\cdots > {s_{i+1}v} < \\cdots < {s_kv}$\u3002\n- \u5bf9\u4e8e\u4e24\u4e2a\u4e32 $u$ \u548c $v$\uff0c\u6709 $|u|<|v|$\uff0c$\\Lambda({uv}) \\subseteq \\{\\operatorname{maxsuf}^R(u, v)\\} \\cup \\Lambda(v) = \\{\\min_{w \\in \\Lambda(u)}{wv}\\} \\cup \\Lambda(v)$\u3002\n\n\u8fd9\u91cc\u7684 Proof \u5148\u5495\u7740\u5427\u3002\u8d34\u4e2a Reference\uff1a\n\n1. Tomohiro, I., Nakashima, Y., Inenaga, S., Bannai, H., & Takeda, M. (2016). Faster Lyndon factorization algorithms for SLP and LZ78 compressed text. Theor. Comput. Sci., 656, 215-224.\n2. Kociumaka, T. (2016). Minimal Suffix and Rotation of a Substring in Optimal Time. ArXiv, abs/1601.08051\n\n## \u8fdb\u5165\u6b63\u9898\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u4e0d\u5e26\u4fee\u7684\u60c5\u51b5\u3002\n\n\u7531 **[Theory 2.3.1 Lambda Subset Theory]**\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u60f3\u5230\u8003\u8651\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4 Significant Suffixes\u3002\n\n\u7ec6\u8282\uff1a\u5982\u679c\u7ebf\u6bb5\u6811\u7684 `mid = l + r >> 1`\uff0c\u5219\u5de6\u8fb9\u7684\u533a\u95f4\u6bd4\u53f3\u8fb9\u957f\u4e00\u4e9b\u3002\u4f46\u662f\u4e0a\u9762\u7684\u8fd9\u4e2a\u7ed3\u8bba\u5bf9\u4e8e $|u| \\le |v|$ \u6709\u6548\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8c03\u6574\u4e00\u4e0b\uff0c\u4f7f\u5f97\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u8981\u957f\u4e00\u4e9b\uff08\u5373\uff1a`mid = l + r + 1 >> 1`\uff0c\u4f7f\u5f97\u5de6\u513f\u5b50\u603b\u4e0d\u6bd4\u53f3\u513f\u5b50\u77ed\uff09\n\n\u53ef\u4ee5\u5b58\u4e00\u4e0b\u5f53\u524d\u4ee3\u8868\u7684\u4e32\u7684\u6240\u6709 Significant Suffixes\uff0c\u7136\u540e\u76f4\u63a5\u8003\u8651\u5408\u5e76\uff08\u628a\u53f3\u8fb9\u7684\u6240\u6709\u7684\u76f4\u63a5\u52a0\u8fdb\u6765\uff0c\u5de6\u8fb9\u7684\u90fd\u5faa\u73af\u4e00\u904d\uff0c\u5b57\u5178\u5e8f\u6700\u957f\u7684\u52a0\u8fdb\u53bb\uff09\u5f97\u5230\u7236\u8282\u70b9\u7684 Significant Suffixes \u5373\u53ef\u3002\uff08\u770b\u4e0d\u61c2\u7684\u770b\u4ee3\u7801\uff09\n\n\u7531 **[Theory 2.3.2 Lambda Log Theory]** \u53ef\u77e5\uff0c\u6bcf\u4e00\u4e2a\u96c6\u5408\u90fd\u662f $O(\\log n)$ \u5927\u5c0f\u7684\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u6c42\u51fa\u4e86\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u7684 Significant Suffixes\u3002\u7136\u540e\u67e5\u8be2\u5c31\u5728\u8fd9 $O(\\log n)$ \u4e2a\u533a\u95f4\u5185\u6c42 Significant Suffixes \u7684\u5e76\uff0c\u66b4\u529b\u6bd4\u8f83\u5373\u53ef\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a $O(1)$ \u6bd4\u8f83\u4e24\u4e2a\u4e32\u7684\u65b9\u6cd5\uff08\u5426\u5219\u590d\u6742\u5ea6\u5c31\u6302\u4e86\uff09\u3002\u6240\u4ee5\u5982\u679c\u4e0d\u5e26\u4fee\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u8003\u8651 SA\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5e26\u4fee\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u9700\u8981\u5feb\u901f\u5730\u6c42\u4e24\u4e2a\u4e32\u7684 LCP\uff0c\u53c8\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e00\u4e2a\u7ebf\u6bb5\u6811+\u5b57\u7b26\u4e32\u54c8\u5e0c+\u4e8c\u5206LCP\u7684\u7b97\u6cd5\u3002\u590d\u6742\u5ea6 $O(q \\log^4 n)$\uff0c\u6162\u4e86\u70b9\uff0c\u6211\u8fd9\u79cd\u4eba\u50bb\u5e38\u6570\u5927\u7684\u5c31\u4e0d\u7528\u60f3\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u5206\u5757\u7ef4\u62a4\u4e00\u4e9b\u54c8\u5e0c\uff0c\u5206 $\\sqrt n$ \u7684\u5757\u3002\u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5230\u5757\u7684\u672b\u7aef\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u5757\u5230\u4e32\u7684\u672b\u5c3e\u7684\u54c8\u5e0c\u503c\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8bb0\u4e00\u4e2a\u5757\u7684\u5168\u5c40\u7684\u504f\u79fb\u91cf\uff0c\u5c31\u53ef\u4ee5\u7b97\u4e86\u3002\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5 $2$ \u6b21\u5373\u53ef\uff0c$O(1)$ \u67e5\u627e\u3002\u6700\u7ec8\u662f $O(q \\log ^3 n + q\\sqrt n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n**Q: \u9053\u7406\u6211\u90fd\u61c2\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6211\u6302\u4e86\uff1f** A: \u4f60\u662f\u7528\u4e86\u81ea\u7136\u6ea2\u51fa\u54c8\u5e0c\u5427\uff0c\u6362\u4e2a\u53cc\u54c8\u5e0c\u8bd5\u8bd5\u3002\n\n### code\n\n```cpp\nconst int N = 200000;\nconst int B = 450;\n\nconst int base1 = 233;\nconst int base2 = 5e8;\nconst int mod = 1e9 + 9;\n\nint n, q, c[N];\nstd::vector<int> tree[N << 2];\n\nnamespace Block {\nint bs, bdelta[B], power[N + 1], psum[B + 1], intrah[B][B], interh[B];\n  \ninline int getc(int i) { return c[i] + bdelta[i / bs]; }\n\ninline int geth(int i) {\n  if (i == -1)\n    return 0;\n  const int bid = i / bs;\n  i = i % bs;\n  return ((ll)interh[bid] * power[i + 1] + intrah[bid][i] + (ll)bdelta[bid] * psum[i + 1]) % mod;\n}\n\nvoid init() { // \u521d\u59cb\u5316\u5206\u5757\u548c\u54c8\u5e0c\n  bs = ceil(sqrt(1.0 * n));\n  power[0] = 1, psum[0] = 0;\n  for (int i = 1; i <= n; ++i)\n    power[i] = (ll)power[i - 1] * base1 % mod;\n  for (int i = 1; i <= bs; ++i)\n    psum[i] = (psum[i - 1] + power[i - 1]) % mod;\n  for (int bid = 0, s = 0; s < n; ++bid, s += bs) {\n    interh[bid] = geth(s - 1);\n    int h = 0;\n    for (int r = 0; r < bs && s + r < n; ++r) {\n      h = ((ull)h * base1 + (c[s + r] + base2)) % mod;\n      intrah[bid][r] = h;\n    }\n  }\n}\n\nvoid hadd(int a, int b, int d) { // \u5bf9\u54c8\u5e0c\u4fee\u6539\n  for (int bid = 0, s = 0; s < n; ++bid, s += bs) {\n    interh[bid] = geth(s - 1);\n    if (a <= s && s + bs <= b)\n      bdelta[bid] += d;\n    else if (s < b && a < s + bs) {\n      int h = 0;\n      for (int r = 0; r < bs && s + r < n; ++r) {\n        c[s + r] += bdelta[bid] + (a <= s + r && s + r < b ? d : 0);\n        h = ((ull)h * base1 + (c[s + r] + base2)) % mod;\n        intrah[bid][r] = h;\n      }\n      bdelta[bid] = 0;\n    }\n  }\n}\n\ntemplate <bool flag = 1> bool cmp(int i, int j, int r) { // \u6bd4\u8f83\u4e24\u4e2a\u4e32\n  int hi = geth(i - 1), hj = geth(j - 1);\n  int low = 0, high = r - j + 1;\n  while (low < high) {\n    int middle = low + high + 1 >> 1;\n    if (((ull)(hi + mod - hj) * power[middle] + geth(j + middle - 1) + mod - geth(i + middle - 1)) % mod == 0)\n      low = middle;\n    else\n      high = middle - 1;\n  }\n  return j + low - 1 == r ? flag : getc(i + low) < getc(j + low);\n}\n} // namespace Block\n\nnamespace Sgt {\ninline void pushup(int k, int l, int r) { // \u5408\u5e76\u5b50\u8282\u70b9\u4fe1\u606f\n  auto &sigsuf = tree[k] = tree[k * 2 + 1]; // \u53f3\u5b50\u8282\u70b9\u76f4\u63a5\u52a0\u8fdb\u6765\n  int best = -1;\n  for (int i : tree[k * 2]) // \u5de6\u5b50\u8282\u70b9\u904d\u5386\u4e00\u904d\n    if (best == -1 || Block::cmp(i, best, r)) best = i; // \u6700\u201c\u91cd\u8981\u201d\u7684\u4e00\u4e2a\u52a0\u8fdb\u6765\n  sigsuf.push_back(best);\n}\n\nvoid build(int k, int l, int r) {\n  if (l == r) return (void)(tree[k] = {l});\n  int mid = (l + r + 1) / 2; // \u5de6\u8fb9\u6bd4\u53f3\u8fb9\u5927\n  build(k * 2, l, mid - 1);\n  build(k * 2 + 1, mid, r);\n  pushup(k, l, r);\n}\n\nvoid modify(int k, int l, int r, int a, int b) {\n  if (b < l || r < a || (a <= l && r <= b)) return;\n  int mid = (l + r + 1) / 2;\n  if (a < mid) modify(k * 2, l, mid - 1, a, b);\n  if (b >= mid) modify(k * 2 + 1, mid, r, a, b);\n  pushup(k, l, r);\n}\n\nvoid query(int k, int l, int r, int a, int b, int &best) {\n  if (b < l || r < a) return;\n  if (a <= l && r <= b) {\n    for (int v : tree[k])\n      if (best == -1 || Block::cmp<0>(v, best, b))\n        best = v;\n    return;\n  }\n  int mid = (l + r + 1) / 2;\n  if (b >= mid) query(k * 2 + 1, mid, r, a, b, best);\n  if (a < mid) query(k * 2, l, mid - 1, a, b, best);\n}\n} // namespace Sgt\n```\n\n\u4e3b\u7a0b\u5e8f\u968f\u4fbf\u5199\uff0c\u6ce8\u610f\u6211\u7684\u4e0b\u6807\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002",
        "postTime": 1586735280,
        "uid": 302509,
        "name": "zghtyarecrenj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5211 \u3010[ZJOI2017]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u7206\u809d\u597d\u9898\u554a\u2026\u2026\n\n\u6211\u7ed9\u4f60\u8bb2\uff0c\u8fd9\u9898\u7092\u9e21\u4f11\u95f2\u7684\uff0c\u6211\u4e5f\u5c31\u5199\u4e867.7\u4e2ak\u2026\u2026\n\n~~\u600e\u4e48zjoi\u7684\u9898\u90fd\u662f\u601d\u7ef4\u96be\u5ea6\u9ad8\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u5927\u7684duliu\u9898\u554a~~\n\n______________\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u7ebf\u6bb5\u6811\n\n\u86e4\uff1f\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u6562\u6765\u6de6zjoi\uff1f\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u5b57\u7b26\u4e32\u54c8\u5e0c\n\n~~\u4e0d\u4f1a\u86e4\u5e0c\u7684\u53ef\u4ee5\u51fa\u95e8\u5de6\u8f6c\u4f60\u7ad9\u6a21\u677f\u533a\u5305\u6559\u5305\u4f1a~~\n\n_______________\n\n# \u672c\u9898\u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u80a5\u80a0\u52b2\u7206\u7684\u64cd\u4f5c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u652f\u6301**\u533a\u95f4\u52a0**\n\n\u8fd9\u5c31\u5341\u5206\u51fa\u4e4e\u6211\u4eec\u7684\u610f\u6599\u4e86\uff0c\u6211\u4eec\u901a\u5e38\u5b66\u7684\u4e32\u4e32\u90fd\u662f\u7ed9\u5b9a\u4e00\u4e2a\u9759\u6001\u5b57\u7b26\u4e32\u7136\u540e\u8be2\u95ee\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e0d\u4ec5\u8be2\u95ee\u4e86\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u540e\u7f00\u8fd9\u79cd\u795e\u5947\u7684\u4e1c\u897f\u8fd8\u8981\u8d44\u74f7\u4e00\u4e2a\u975e\u5e38\u6709\u6bd2\u7684\u533a\u95f4\u52a0\u64cd\u4f5c\u2026\u2026\n\n\u90a3\u4e48\u8ba9\u6211\u4eec\u5148\u4ece\u4e00\u4e2anaive\u7684\u9759\u6001\u505a\u6cd5\u5f00\u59cb\u2026\u2026(\u548c\u6b63\u89e3\u7684\u8054\u7cfb\u4e0d\u662f\u5f88\u5927\uff0c\u53ef\u4ee5\u9009\u62e9\u6027\u9605\u8bfb)\n\n## \u9759\u6001\u505a\u6cd5\n\n\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u9759\u6001\u4e32\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u6570\u7ec4\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u81f3\u5c11\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u540e\u7f00\u5728\u5168\u5c40\u7684\u6392\u540d\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u9700\u8981\u6c42\u51fa$(l,r]$\u8fd9\u6bb5\u533a\u95f4\u5185\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4ee5$r$\u7ed3\u5c3e\u7684\u540e\u7f00\u4e86\n\n\u6211\u4eec\u4e0d\u59a8\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5206\u6210\u4e24\u6bb5\u6765\u770b\uff0c\u5148\u6c42\u51fa$(l,mid]$\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u7136\u540e\u6c42\u51fa$(mid,r]$\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\n\n\u7136\u540e\u63a5\u4e0b\u6765\u6211\u4eec\u7684\u7b97\u6cd5\u7b80\u6613\u7684\u4ee4\u4eba\u5403\u9cb8\uff0c\u53ea\u8981\u6211\u4eec\u4fdd\u8bc1\u5de6\u4fa7\u533a\u95f4\u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u4fa7\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa$(l,mid]$\u4e2d**\u5168\u5c40**\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\u7136\u540e\u548c\u53f3\u4fa7\u533a\u95f4\u7684\u7ed3\u679c\u53d6\u4e2amin\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u4e86\n\n**\u6ce8\u610f\uff1a\u521a\u624d\u7684\u63cf\u8ff0\u6df7\u7528\u4e86\u5b50\u4e32\u548c\u540e\u7f00\u7684\u6982\u5ff5\uff0c\u4ee5r\u7ed3\u5c3e\u7684\u540e\u7f00\u5176\u5b9e\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u6211\u4eec\u521a\u624d\u7684\u7b97\u6cd5\u6d41\u7a0b\u5176\u5b9e\u662f\u5c06$(pos,r)$\u548c\u53f3\u4fa7\u533a\u95f4\u5206\u6cbb\u4e4b\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u53d6\u4e86\u4e00\u4e2amin\uff0c\u5176\u4e2d$(pos,n)$\u662f\u5de6\u7aef\u70b9\u5728$(l,mid]$\u5f53\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00**\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u770b\u8d77\u6765\u5047\u7684\u6355\u661f\u7684\u7b97\u6cd5\u5176\u5b9e\u662f\u6b63\u786e\u7684\u5462\uff1f\n\n\u6211\u4eec\u7684\u7b97\u6cd5\u552f\u4e00\u5047\u7684\u5730\u65b9\u5c31\u662f\u7528$(pos,r)$\u66ff\u6362\u4e86\u4ee5r\u7ed3\u5c3e\u7684\uff0c\u5de6\u7aef\u70b9\u5728$(l,pos]$\u5f53\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\n\n\u90a3\u4e48\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5f53$(pos,r)$\u662f\u5047\u540e\u7f00\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\u72b6\u51b5\n\n\u6362\u53e5\u8bdd\u8bb2\u5c31\u662f$(pos,r)$\u5e76\u4e0d\u662f\u5de6\u4fa7\u533a\u95f4\u5f53\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u5b58\u5728\u4e00\u4e2a\u6bd4\u4ed6\u66f4\u5c0f\u7684\u4e32S\n\n\u90a3\u4e48\u6211\u4eec\u77e5\u9053$(pos,n)$\u662f\u5168\u5c40\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u6362\u53e5\u8bdd\u8bb2\u80af\u5b9a\u662f\u4e24\u4e2a\u5b50\u4e32\u5206\u51fa\u5927\u5c0f\u7684\u4f4d\u7f6e\u5728$r$\u4e4b\u540e\u5bfc\u81f4\u53e6\u5916\u4e00\u4e2a\u5b50\u4e32\u7531\u4e8e\u957f\u5ea6\u8f83\u77ed\uff0c\u5bfc\u81f4\u5728\u4ee5$r$\u7ed3\u5c3e\u65f6\u5b57\u5178\u5e8f\u8f83\u5c0f\u7684\u4e32\u4e0d\u662f$(pos,r)$\u4e86\n\n\u8fd9\u53ea\u80fd\u8bf4\u660e\u4e00\u4ef6\u4e8b\uff0cS\u65e2\u662f$(pos,r)$\u7684\u524d\u7f00\u8fd8\u662f$(pos,r)$\u7684\u540e\u7f00\uff0c\u5e76\u4e14S\u8fd8\u662f\u4e00\u4e2a\u957f\u5ea6\u8fc7\u534a\u7684\u516c\u5171\u524d\u540e\u7f00\uff0c\u56e0\u4e3a\u6211\u4eec\u53f3\u4fa7\u533a\u95f4\u7684\u957f\u5ea6\u6bd4\u5de6\u4fa7\u533a\u95f4\u957f\u5ea6\u5927\n\n\u90a3\u4e48$(pos,r)$\u5c31\u662f\u4e00\u4e2a\u6709\u5468\u671f\u7684\u4e32\u4e86\uff0c\u6240\u4ee5\u4e0d\u597d\u610f\u601d$(pos,r)$\u548cS\u90fd\u4e0d\u662f$(l,r)$\u5f53\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\u5728\u53f3\u4fa7\u533a\u95f4\uff0c\u800c\u6211\u4eec\u6c42\u51fa\u6765\u7684\u5047\u540e\u7f00\u5219\u4f1a\u88ab\u53d6min\u7ed9\u53d6\u6389\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a$O(logn)$\u7684\u4f18\u79c0\u9759\u6001\u505a\u6cd5(\u5982\u679c\u4f7f\u7528st\u8868\u53ef\u4ee5\u505a\u5230$O(1)$\u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee)\n\n## \u52a8\u6001\u505a\u6cd5\n\n\u5f53\u7136\u4f60\u4e5f\u770b\u5230\u4e86\u8fd9\u4e2a\u9759\u6001\u505a\u6cd5\u6ca1\u6709\u4efb\u4f55\u62a2\u6551\u7684\u7a7a\u95f4\u4e86\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6c42\u51fa\u5168\u5c40\u6700\u5c0f\u7684\u540e\u7f00\u624d\u884c\uff0c\u4f46\u662f\u73b0\u5728\u6709\u52a8\u6001\u4fee\u6539\u6211\u4eec\u4e0d\u80fd\u7528\u540e\u7f00\u6570\u7ec4\u4e86\u2026\u2026\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u628a\u521a\u624d\u7684\u505a\u6cd5\u53cd\u8fc7\u6765\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\uff0c\u81ea\u5e95\u5411\u4e0b\u7684\u6c42\u51fa\u7b54\u6848\n\n\u4f46\u662f\u9996\u5148\u6211\u4eec\u9700\u8981\u5408\u5e76\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\n\n\u91c7\u7528\u5de6\u5f00\u53f3\u95ed\u7684\u5efa\u6811\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u5de6\u5b69\u5b50\u7684\u957f\u5ea6\u6c38\u8fdc\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u5b69\u5b50\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u4eff\u7167\u9759\u6001\u505a\u6cd5\uff0c\u5c1d\u8bd5\u7528\u957f\u5ea6\u8fc7\u534a\u7684\u524d\u540e\u7f00\u4e0e\u5468\u671f\u4e32\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u641e\u4e8b\u60c5\u2026\u2026\n\n\u90a3\u4e48\u6211\u4eec\u91c7\u7528\u8fd9\u6837\u4e00\u4e2a\u7b56\u7565\uff0c\u5728\u6bcf\u4e2a\u533a\u95f4\u4e0a\u7ef4\u62a4\u5c06\u6765\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u5b57\u5178\u5e8f\u540e\u7f00\u7684\u4f4d\u7f6e\uff0c\u6362\u53e5\u8bdd\u8bf4\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2avector\u5b58\u50a8\u6240\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u5b57\u5178\u540e\u7f00\u7684\u4f4d\u7f6e\n\n\u90a3\u4e48\u5047\u5982\u6211\u4eec\u77e5\u9053\u4e86\u5de6\u513f\u5b50\u7684vector\u548c\u53f3\u513f\u5b50\u7684vector,\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u5f97\u5230\u8fd9\u4e2a\u8282\u70b9\u7684vector\n\n\u9996\u5148\u8fd9\u4e2a\u8282\u70b9\u5e94\u8be5\u7ee7\u627f\u53f3\u5b69\u5b50\u7684vector\uff0c\u56e0\u4e3a\u53f3\u5b69\u5b50\u5b58\u50a8\u7684\u5b50\u4e32\u540e\u9762\u5e76\u6ca1\u6709\u6dfb\u52a0\u4e1c\u897f\uff0c\u6240\u4ee5\u8fd9\u4e9b\u540e\u7f00\u4f9d\u7136\u6709\u6f5c\u529b\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5904\u7406\u5de6\u5b69\u5b50\u7684vector\uff0c\u6211\u4eec\u628a\u5de6\u5b69\u5b50\u4e2d\u7684\u4e32\u90fd\u62c9\u51fa\u6765\u5e76\u4e14\u5728\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u540e\u9762\u603c\u4e0a\u4e00\u4e2a\u53f3\u5b69\u5b50\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u6bd4\u8f83\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u5927\u5c0f\uff0c\u5982\u679c\u4e24\u4e2a\u4e32u,v(\u8fd9\u91cc\u8ba4\u4e3au\u6bd4v\u957f)\u6ee1\u8db3v\u4e0d\u662fu\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u8bc1\u660e\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u5df2\u7ecf\u6bd4\u51fa\u5b57\u5178\u5e8f\u5927\u5c0f\u4e86\uff0c\u6211\u4eec\u7559\u4e0b\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u90a3\u4e2a\u5c31\u53ef\u4ee5\u4e86\n\n\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u6bd4\u8f83\u6709\u8da3\u7684\u60c5\u51b5\uff0c\u5982\u679cv\u662fu\u7684\u524d\u7f00\uff0c\u6211\u4eec\u5e94\u8be5\u7559\u4e0bu\u800c\u4e0d\u662fv\uff0c\u5c3d\u7ba1\u770b\u8d77\u6765\u6b64\u65f6v\u7684\u5b57\u5178\u5e8f\u66f4\u5c0f\n\n\u4e3a\u5565\u5462\uff1f\u6211\u4eec\u53d1\u73b0u\u6709\u8fc7\u534a\u7684\u516c\u5171\u524d\u540e\u7f00\uff0c\u6240\u4ee5u\u662f\u4e2a\u5468\u671f\u4e32\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0v\u73b0\u5728\u5c31\u4e0d\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e32\uff0c\u81f3\u5c11\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e00\u4e2a\u66f4\u77ed\u7684\u5468\u671fz\u5c31\u6bd4\u4ed6\u5c0f\uff0c\u90a3\u4e48\u5728\u6574\u4e2a\u5b57\u7b26\u4e32\u540e\u603c\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e4b\u540ev\u6709\u6ca1\u6709\u6f5c\u529b\u6210\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u540e\u7f00\u5462\uff1f\n\n\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u5982\u679c\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e4b\u540ev\u4ecd\u7136\u662f\u5468\u671f\u4e32\u90a3\u4e48v\u8fd8\u662f\u51c9\u7684\uff0c\u5982\u679c\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e4b\u540e\u6574\u4e2a\u4e32\u4e0d\u518d\u662f\u5468\u671f\u4e32\uff0c\u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u8fd9\u4e2a\u5b57\u7b26\u662f\u6bd4\u5e94\u8be5\u586b\u7684\u5b57\u7b26\u5927\u8fd8\u662f\u5c0f\uff0c\u5982\u679c\u5927\u7684\u8bddu\u7684\u5b57\u5178\u5e8f\u6bd4v\u5c0f\u5982\u679c\u5c0f\u7684\u8bddz\u7684\u5b57\u5178\u5e8f\u6bd4v\u5c0f,\u65e0\u8bba\u5982\u4f55v\u90fd\u662f\u51c9\u7684\n\n\u90a3\u4e48\u5982\u6b64\u8fd9\u822c\u6211\u4eec\u53d1\u73b0\u5de6\u5b69\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u52a0\u5165\u5230\u7236\u4eb2\u8282\u70b9\u7684vector\u91cc\uff0c\u90a3\u4e48\u8fd9\u6837\u770b\u6765\u6bcf\u4e2a\u8282\u70b9\u7684vector\u7684size\u5c31\u662flog\u7ea7\u522b\u7684\n\n\u90a3\u4e48\u73b0\u5728\u8be2\u95ee\u5c31\u975e\u5e38\u7684\u597d\u5904\u7406\u4e86\uff0c\u53cd\u6b63$m$\u53ea\u67093w\uff0c\u6211\u4eec3\u4e2alog\u4e71\u641e\u5b8c\u5168\u80fd\u8fc7\uff0c\u6211\u4eec\u628a\u8be2\u95ee\u7684\u533a\u95f4\u5728\u7ebf\u6bb5\u6811\u4e0a\u62c6\u5206\u6210log\u4e2a\u533a\u95f4\u7136\u540e\u5927\u529b\u53d6min\u5c31\u505a\u5b8c\u4e86\n\n\u4fee\u6539\u4e5f\u975e\u5e38\u7684\u597d\u5904\u7406\uff0c\u5bb9\u6613\u770b\u51fa\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u88ab\u6574\u4f53\u52a0\u4e0a\u4e00\u4e2a\u503c\u4e4b\u540e\u6709\u6f5c\u529b\u6210\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u540e\u7f00\u7684\u4e32\u662f\u6ca1\u6709\u53d8\u5316\u7684\uff0c\u90a3\u4e48\u5728\u4e00\u6b21\u533a\u95f4\u52a0\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539$O(logn)$\u4e2a\u8282\u70b9\u7684vector,\u66b4\u529b\u5408\u5e76\u5de6\u53f3\u5b69\u5b50\u5c31\u884c\u4e86\n\n\u597d\u4e86\u770b\u8d77\u6765\u6211\u4eec\u9700\u8981\u8d44\u74f7\u7684\u64cd\u4f5c\u5c31\u662f\u533a\u95f4\u52a0\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u533a\u95f4\u52a0\u6c42\u4e24\u4e2a\u540e\u7f00\u7684lcp\n\n\u540e\u7f00\u6570\u7ec4\u548csam\u90fd\u51c9\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u4e8c\u5206\u54c8\u5e0c\u6c42lcp\u5427\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5206\u5757\u6765\u7ef4\u62a4hash\u503c\uff0c\u8fd9\u6837\u6211\u4eec\u4e00\u6b21\u4fee\u6539\u662f$O(\\sqrt{N})$\u7684\u800c\u67e5\u8be2\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u662f$O(1)$\u7684~~\u5176\u5b9e\u5e38\u6570\u5f88\u5927~~\n\n\u8fd9\u91cc\u6709\u4e00\u4e2atrick\u5c31\u662f\u6211\u4eec\u9700\u8981\u5728\u6574\u4e2a\u5b57\u7b26\u4e32\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a\u6570\u5b57\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u5f97\u77e5hash\u503c\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u628abas\u5f00\u52303e8\u7684\u7ea7\u522b\uff0c\u7136\u540e\u76f4\u63a5\u628a\u539f\u6765\u7684hash\u503c\u52a0\u4e0a\u6216\u8005\u51cf\u53bbaaaaaaaa\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u7684hash\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e3a\u4e86\u907f\u514d\u51cf\u51fa\u8d1f\u6570\u6765\u6211\u4eec\u8fd8\u9700\u8981\u628a\u6bcf\u4e2a\u6570\u5b57\u52a0\u4e0a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u4ee5\u907f\u514d\u8d1f\u6570\n\n\u5982\u6b64\u8fd9\u822c\u5b9e\u73b0\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u5c31\u4ee5\u4e22\u4eba\u7684$O(nlog^2n+m(log^3n+\\sqrt{N}))$\u5b8c\u6210\u4e86\u8fd9\u9898\u2026\u2026\n\n\u554a\uff0cuoj\u524d\u9762\u90a3\u4e9b\u4eba\u600e\u4e48\u90a3\u4e48\u5757\u554a\uff1f\n\n\u628ahash\u6362\u6210\u66b4\u529blcp\u5373\u53ef\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u7531\u4e8e\u6570\u636e\u6c34\u8fd8\u4e0d\u4f1a\u88ab\u5361\n\n\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u81ea\u7136\u6ea2\u51fahash\uff0c\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u5f88\u8822\u7684\u7528\u53cchash\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=2*1e5+10;const int B=450;typedef long long ll;\nconst ll bas=3*1e8+19;const int shif=bas/2;int n;int mde[N];int m;int rk[N<<1];\nconst ll mod1=998244353;const ll mod2=1e9+7;int TP;\ninline ll po(ll a,ll p,ll mod){ll r=1;for(;p;p>>=1,a=a*a%mod)if(p&1)r=r*a%mod;return r;}\nnamespace hsa//\u5206\u5757\u7ef4\u62a4hash\u503c \n{\n\tint bi[N];int bj[N];ll mi1[N];ll imi1[N];ll mi2[N];\n\tll imi2[N];ll pre1[N];ll pre2[N];ll sf1[N];ll sf2[N];\n\tstruct blk\n\t{\n\t\tint ch[B+3];ll pr1[B+3];ll pr2[B+3];ll sp1[B+3];ll sp2[B+3];int ad;int siz;\n\t\tinline int& operator [](const int& x){return ch[x];}\n\t\tinline void calh()\n\t\t{\n\t\t\tfor(int i=1;i<=siz;i++)pr1[i]=(pr1[i-1]+mi1[i-1]*ch[i])%mod1;\n\t\t\tfor(int i=1;i<=siz;i++)pr2[i]=(pr2[i-1]+mi2[i-1]*ch[i])%mod2;\n\t\t}inline void ih()\n\t\t{\n\t\t\tfor(int i=1;i<=siz;i++)sp1[i]=(sp1[i-1]+mi1[i-1])%mod1;\n\t\t\tfor(int i=1;i<=siz;i++)sp2[i]=(sp2[i-1]+mi2[i-1])%mod2;calh();\n\t\t}inline void badd(int l,int r,int del)\n\t\t{for(int i=1;i<=siz;i++)ch[i]+=ad;for(int i=l;i<=r;i++)ch[i]+=del;ad=0;calh();}\n\t\tinline ll gh1(int x){return (pr1[x]+sp1[x]*(mod1+ad))%mod1;}\n\t\tinline ll gh2(int x){return (pr2[x]+sp2[x]*(mod2+ad))%mod2;}\n\t}bl[N/B+3];\n\tinline void calp(int st)\n\t{\n\t\tfor(int i=st;i<=bi[n];i++)pre1[i]=(pre1[i-1]+bl[i].gh1(bl[i].siz)*sf1[i-1])%mod1;\n\t\tfor(int i=st;i<=bi[n];i++)pre2[i]=(pre2[i-1]+bl[i].gh2(bl[i].siz)*sf2[i-1])%mod2;\n\t}\n\tinline void ih(int* mde)\n\t{\n\t\tfor(int i=1;i<=n;i++)bi[i]=(i-1)/B+1;for(int i=1;i<=n;i++)bj[i]=(i-1)%B+1;\n\t\tmi1[0]=1;for(int i=1;i<=n;i++)mi1[i]=mi1[i-1]*bas%mod1;\n\t\tmi2[0]=1;for(int i=1;i<=n;i++)mi2[i]=mi2[i-1]*bas%mod2;\n\t\timi1[0]=1;ll iv=po(bas,mod1-2,mod1);for(int i=1;i<=n;i++)imi1[i]=imi1[i-1]*iv%mod1;\n\t\timi2[0]=1;iv=po(bas,mod2-2,mod2);for(int i=1;i<=n;i++)imi2[i]=imi2[i-1]*iv%mod2;\n\t\tfor(int i=1;i<=n;i++)bl[bi[i]][bj[i]]=mde[i];\n\t\tfor(int i=1;i<bi[n];i++)bl[i].siz=B;bl[bi[n]].siz=(n%B)?n%B:B;\n\t\tfor(int i=1;i<=bi[n];i++)bl[i].ih();\n\t\tsf1[0]=1;for(int i=1;i<=bi[n];i++)sf1[i]=sf1[i-1]*mi1[bl[i].siz]%mod1;\n\t\tsf2[0]=1;for(int i=1;i<=bi[n];i++)sf2[i]=sf2[i-1]*mi2[bl[i].siz]%mod2;calp(1);\n\t}\n\tinline ll gh1(int p){int t=bi[p]-1;return (pre1[t]+bl[t+1].gh1(bj[p])*sf1[t])%mod1;}\n\tinline ll gh2(int p){int t=bi[p]-1;return (pre2[t]+bl[t+1].gh2(bj[p])*sf2[t])%mod2;}\n\tinline void modify(int l,int r,int del)\n\t{\n\t\tint p1=bi[l];int p2=bi[r];if(p1==p2){bl[p1].badd(bj[l],bj[r],del);goto ed;}\n\t\tbl[p1].badd(bj[l],bl[p1].siz,del);bl[p2].badd(1,bj[r],del);\n\t\tfor(int i=p1+1;i<p2;i++)bl[i].ad+=del;ed:calp(p1);\n\t}\n\tinline bool ck(int p1,int p2,int len)\n\t{\n\t\tll v1=(gh1(p1+len-1)+mod1-gh1(p1-1))*imi1[p1-1]%mod1;\n\t\tll v2=(gh1(p2+len-1)+mod1-gh1(p2-1))*imi1[p2-1]%mod1;\n\t\tif(v1!=v2)return false;\n\t\tv1=(gh2(p1+len-1)+mod2-gh2(p1-1))*imi2[p1-1]%mod2;\n\t\tv2=(gh2(p2+len-1)+mod2-gh2(p2-1))*imi2[p2-1]%mod2;return v1==v2;\n\t}\n\tinline int gt(int x){return bl[bi[x]][bj[x]]+bl[bi[x]].ad;}\n}\nstruct str//\u5b57\u7b26\u4e32\u7c7b \n{\n\tint st;int len;\n\tfriend bool operator <(str a,str b)\n\t{\n\t\tint c1=hsa::gt(a.st);int c2=hsa::gt(b.st);if(c1!=c2)return c1<c2;\n\t\tint l=0;int r=min(a.len,b.len);\n\t\tif(hsa::ck(a.st,b.st,r))return (a.len>b.len)^TP;r--;\n\t\twhile(l!=r)\n\t\t{int mid=(l+r+1)>>1;if(hsa::ck(a.st,b.st,mid))l=mid;else r=mid-1;}\n\t\treturn hsa::gt(a.st+l)<hsa::gt(b.st+l);\n\t}friend str operator +(str a,int b){return (str){a.st,a.len+b};}\n};\nstruct linetree//\u7ebf\u6bb5\u6811 \n{\n\tstr v[N<<2][20];int cnt[N<<2];str ans;\n\tinline void mg(int p,int p1,int p2,int len)//\u5408\u5e76\u4e24\u4e2a\u8282\u70b9 \n\t{\n\t\tcnt[p]=cnt[p2];for(int i=1;i<=cnt[p2];i++)v[p][i]=v[p2][i];\n\t\tstr mi=v[p1][1]+len;for(int i=2;i<=cnt[p1];i++)mi=min(mi,v[p1][i]+len);\n\t\tv[p][++cnt[p]]=mi;\n\t}\t\n\tinline void build(int p,int l,int r)\n\t{\n\t\tif(r-l==1){v[p][++cnt[p]]=(str){r,1};return;}int mid=(l+r)>>1;\n\t\tbuild(p<<1,l,mid);build(p<<1|1,mid,r);mg(p,p<<1,p<<1|1,r-mid);\n\t}\n\tinline void modify(int p,int l,int r,int dl,int dr)\n\t{\n\t\tif(dl==l&&r==dr){return;}int mid=(l+r)>>1;\n\t\tif(dl<mid)modify(p<<1,l,mid,dl,min(dr,mid));\n\t\tif(mid<dr)modify(p<<1|1,mid,r,max(dl,mid),dr);mg(p,p<<1,p<<1|1,r-mid);\n\t}\n\tinline void qry(int p,int l,int r,int dl,int dr,int pos)\n\t{\n\t\tif(dl==l&&dr==r)\n\t\t{\n\t\t\tint i=1;if(ans.st==-1)ans=(str){v[p][1].st,pos-v[p][1].st+1},i=2;\n\t\t\tfor(;i<=cnt[p];i++)ans=min(ans,(str){v[p][i].st,pos-v[p][i].st+1});return;\n\t\t}int mid=(l+r)>>1;\n\t\tif(dl<mid)qry(p<<1,l,mid,dl,min(dr,mid),pos);\n\t\tif(mid<dr)qry(p<<1|1,mid,r,max(dl,mid),dr,pos);\n\t}\n\tinline int cqry(int l,int r){ans=(str){-1,0};qry(1,0,n,l-1,r,r);return ans.st;}\n}lt;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);for(int i=1;i<=n;i++)scanf(\"%d\",&mde[i]);\n\tfor(int i=1;i<=n;i++)mde[i]+=shif;hsa::ih(mde);lt.build(1,0,n);\n\tfor(int i=1,tp,l,r,d;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&tp,&l,&r);\n\t\tif(tp==1)\n\t\t{\n\t\t\tscanf(\"%d\",&d),TP=0;for(int i=l;i<=r;i++)mde[i]+=d;\n\t\t\thsa::modify(l,r,d),lt.modify(1,0,n,l-1,r);\n\t\t}\n\t\telse {TP=1;printf(\"%d\\n\",lt.cqry(l,r));}\n\t}return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1547879991,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "uoj296/P5211:zjoi2017 \u5b57\u7b26\u4e32"
    }
]