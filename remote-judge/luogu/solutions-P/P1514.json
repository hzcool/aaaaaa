[
    {
        "content": "\u5199\u4e00\u4e0b\u849f\u84bb\u7684\u601d\u8def...\n\n#\u4e3b\u4f53\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u9996\u5148\u6765\u770b\u8fd9\u4e2a\u9898\n\n\u7b2c\u4e00\u95ee\u5f88\u597d\u505a\uff0c\u76f4\u63a5dfs\u6216bfs\u6c42\u4e00\u4e0b\u6700\u4e0b\u9762\u4e00\u6392\u7684\u5e97\u6709\u6ca1\u6709\u4e0d\u80fd\u88ab\u8986\u76d6\u5230\u7684\u5c31\u884c\u4e86\n\n\u5173\u952e\u662f\u7b2c\u4e8c\u95ee\n\n\n\u9996\u5148\u5f88\u660e\u663e\u7684\u601d\u8def\uff0c\u5bf9\u7b2c\u4e00\u6392\u6bcf\u4e2a\u70b9\u8fdb\u884cdfs\u6216bfs\uff0c\u641c\u51fa\u6bcf\u4e2a\u70b9\u80fd\u591f\u8986\u76d6\u5230\u7684\u533a\u95f4\uff0c\u518d\u505a\u7ebf\u6bb5\u8986\u76d6\u5c31\u884c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7406\u8bba\u6700\u5dee\u662fO(n\\*m^2+n^2)\u4f1at\u4e00\u4e2a\u70b9\uff0c\u5361\u5e38\u597d\u7684\u8bdd\u5e94\u8be5\u662f\u80fd\u8fc7\u6389\u7684\n\n\u4f46\u8fd9\u9898\u771f\u7684\u8981\u8fd9\u4e48\u9ad8\u7684\u590d\u6742\u5ea6\u561b\uff1f\n\n\n\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u8bc1\u660e\uff1a\u5982\u679c\u6709\u89e3\uff0c\u6211\u4eec\u6bcf\u4e2a\u70b9\u8986\u76d6\u7684\u57ce\u5e02(\u7ebf\u6bb5)\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\n\n\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u8fde\u7eed\uff0c\u6211\u4e48\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u8bc1\u660e\u8fd9\u4e2a\u70b9\u65e0\u6cd5\u5230\u8fbe\uff08\u5b83\u6240\u5728\u8054\u901a\u5757\u8fb9\u754c\u4e00\u5b9a\u9ad8\u4e8e\u76f8\u90bb\u70b9\uff09\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u6c42\u51fa\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u6700\u5de6\u548c\u6700\u53f3\u7684\u70b9\u5c31\u884c\u4e86\uff0c\u800c\u8fd9\u4e2a\u70b9\u80af\u5b9a\u662f\u4e0d\u53d8\u7684\n\n\u6240\u4ee5\u6211\u4eec\u80fd\u591f\u60f3\u5230\u4ec0\u4e48\uff1fdp\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff08i\uff0cj\uff09 l[i][j]=min(l[k][l]) \u70b9\uff08k\uff0cl\uff09\u662f\uff08i\uff0cj\uff09\u80fd\u5230\u7684\u7684\u6240\u6709\u70b9\n\n\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u56fe\u5e76\u4e0d\u662f\u4e25\u683c\u4ece\u4e0b\u5411\u4e0a\u6216\u8005\u4ece\u4e0a\u5411\u4e0b\u7684\n\n\u662f\u53ef\u4ee5\u5411\u4e0a\u8d70\u7684\uff08\u6837\u4f8b1\u5c31\u5f88\u597d\u7684\u8bf4\u660e\u4e86\u8fd9\u70b9\uff09\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5dp\u662f\u4e0d\u53ef\u4ee5\u7684\n\n\u90a3\u6211\u4eec\u5c31\u7528\u5230\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22\n\n\u5bf9\u4e8e\u5df2\u7ecf\u6c42\u51fa\u7684\uff08k\uff0cl\uff09\uff0c\u76f4\u63a5\u8c03\u53d6\u6240\u6c42\u6570\u636e\uff0c\u5426\u5219bfs/dfs\u53bb\u67e5\u627e\n\n\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u76f4\u63a5dfs\u8fdb\u884c\u7684\u5bf9\u540c\u4e00\u70b9\u7684\u53cd\u590d\u8c03\u7528\n\n\u751a\u81f3\u53ef\u4ee5\u628a\u8bb0\u5fc6\u5316\u548c\u7b2c\u4e00\u95ee\u7ed3\u5408\u8d77\u6765\uff0c\u76f4\u63a5\u4e00\u8fb9dfs\u6c42\u51fa\n\n\u6700\u540e\u518d\u8fdb\u884c\u7ebf\u6bb5\u8986\u76d6\u5c31\u884c\u4e86\n\n\nps.\u6211\u7684\u5199\u6cd5\u518d\u5927\u725b\u5206\u7ad928ms...\u7b2c\u4e00\u768420ms\u771f\u795e%%%\n\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#include <stack>\nusing namespace std;\n#define maxn 510\n#define nx x+xx[i]\n#define ny y+yy[i]\nint l[maxn][maxn],r[maxn][maxn];\nint high[maxn][maxn];\nint n,m;\nbool vis[maxn][maxn];\nint xx[4]={-1,0,1,0};\nint yy[4]={0,1,0,-1};\nint qx[maxn*maxn],qy[maxn*maxn];\n\ninline void dfs(int x,int y)\n{\n    vis[x][y]=true;\n    for (int i=0;i<4;i++){\n        if (nx<1 || nx>n || ny<1 || ny>m) continue;\n        if (high[nx][ny]>=high[x][y]) continue;\n        if (!vis[nx][ny])dfs(nx,ny);\n        l[x][y]=min(l[x][y],l[nx][ny]);\n        r[x][y]=max(r[x][y],r[nx][ny]);\n    }\n}\n\ninline int read()\n{\n    int ret=0;\n    char c=getchar();\n    while (c<'0' || c>'9') c=getchar();\n    while (c>='0' && c<='9'){\n        ret=ret*10+c-'0';\n        c=getchar();\n    }\n    return ret;\n}\n\n\nint main()\n{\n    n=read();\n    m=read();\n    memset(vis,false,sizeof(vis));\n    memset(l,0x3f,sizeof(l));\n    memset(r,0,sizeof(r));\n    for (int i=1;i<=m;i++)\n        l[n][i]=r[n][i]=i;\n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=m;j++)    \n            high[i][j]=read();\n    for (int i=1;i<=m;i++)\n        if (!vis[1][i]) dfs(1,i);\n    bool flag=false;\n    int cnt=0;\n    for (int i=1;i<=m;i++)    \n        if (!vis[n][i]){\n            flag=true;\n            cnt++;\n        }\n    if (flag){\n        puts(\"0\");\n        printf(\"%d\",cnt);\n        return 0;\n    }\n    int left=1;\n    while (left<=m){\n        int maxr=0;\n        for (int i=1;i<=m;i++)\n            if (l[1][i]<=left)\n                maxr=max(maxr,r[1][i]);\n        cnt++;\n        left=maxr+1;\n    }\n    puts(\"1\");\n    printf(\"%d\",cnt);\n}\n```",
        "postTime": 1508767256,
        "uid": 30169,
        "name": "tsukasa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u601d\u8def\u5404\u4f4d\u5927\u4f6c\u8bb2\u7684\u90fd\u5f88\u660e\u767d\u4e86\n\n\u849f\u84bb\u5c31\u8865\u4e2a\u8bc1\u660e\u5e2e\u5927\u5bb6\u7406\u7406\u601d\u8def\u5427\n\n[\u6458\u81ea ~~\u5927\u5927\u5927\u849f\u84bb~~\u6211\u306e\u535a\u5ba2](https://www.cnblogs.com/Tony-Double-Sky/p/9871976.html)\n\n---\n\n\u6b32\u8bc1\uff1a \u5bf9\u4e8e\u7b2c\u4e00\u884c\u7684\u6bcf\u4e2a\u6c34\u5e93 $x_{i}$ \u6d41\u51fa\u7684\u6c34\uff0c \u4ed6\u80fd\u8986\u76d6\u7684\u6700\u540e\u4e00\u884c\u60c5\u51b5\u5fc5\u7136\u662f\u4e00\u4e2a**\u8fde\u7eed\u7684\u533a\u95f4**\n\n\u53cd\u8bc1\u6cd5\uff1a\n\n\u5047\u8bbe\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\u4f7f\u5f97\u8986\u76d6\u60c5\u51b5\u5982\u4e0b\uff0c \u8986\u76d6\u4e0d\u8fde\u7eed\uff1a\n![](http://wx4.sinaimg.cn/mw690/0060lm7Tly1fwp8b23bjrj30rs0qodkf.jpg)\n\u5047\u8bbe\u84dd\u8272\u8986\u76d6\u8def\u7ebf\u5982\u4e0b\uff1a\n![](http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwp8devhi8j30rs0qodkx.jpg)\n\u56e0\u4e3a\u53f3\u8fb9\u7ea2\u8272\u88ab\u8986\u76d6\u4e86\uff0c \u6240\u4ee5\u4ece\u7ea2\u8272\u6c34\u5e93\u5230\u4e0b\u65b9\u5fc5\u7136\u6709\u4e00\u6761\u8def\u5f84\n![](http://wx1.sinaimg.cn/mw690/0060lm7Tly1fwp8hycydfj30rs0qo0y4.jpg)\n\u53d1\u73b0\u8def\u5f84\u5fc5\u6709\u4ea4\uff08\u7d2b\u8272\u90e8\u5206\uff09\uff0c \u6240\u4ee5\u7ea2\u8272\u6c34\u5e93\u7684\u6c34\u4e5f\u4f1a\u6d41\u5165\u84dd\u8272\u90a3\u90e8\u5206\uff0c \u5047\u8bbe\u4e0d\u6210\u7acb\n\n\u6545\u4e00\u5ea7\u6c34\u5e93\u80fd\u8986\u76d6\u7684\u6700\u540e\u4e00\u884c\u5fc5\u7136\u662f\u4e00\u4e2a**\u8fde\u7eed\u7684\u533a\u95f4**\n\n\u8bc1\u6bd5\u3002\n\n[\u5168\u6587](https://www.cnblogs.com/Tony-Double-Sky/p/9871976.html)\n\n### upd 2019.11.11\n\n\u6211\u5df2\u7ecf\u9000\u5f79\u5566\uff0c \u770b\u5230\u8bc4\u8bba\u8bf4\u7684\u7684\uff0c \u8bc1\u660e\u786e\u5b9e\u6709\u4e0d\u8db3\uff0c \u8fd9\u91cc\u8fdb\u884c\u8865\u5145\n\n\u5f15\u7528\u8bc4\u8bba\u533a@Asurudo\uff1a\uff08\u611f\u8c22\u8fd9\u4f4d\u5c0f\u4f19\u4f34\uff09\n\n@Asurudo \uff1a\u201c\u5982\u679c\u84dd\u8272\u90a3\u90e8\u5206\u5e72\u65f1\u533a\u5f88\u9ad8\uff0c\u6ca1\u6709\u6c34\u6d41\u53ef\u4ee5\u6d41\u5230\uff0c\u5219\u7ea2\u8272\u7684\u6c34\u6d41\u53ef\u5206\u53c9\u3002\u6709\u4e00\u4e2a\u6837\u4f8b\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u7528\u8fd9\u4e2a\u7ed3\u8bba\u53bb\u628a\u533a\u95f4\u5f53\u4f5c\u8fde\u7eed\u7684\u505a\uff0c\u5219\u7ea2\u8272\u53ef\u4ee5\u6d41\u5230\u672c\u6765\u6d41\u4e0d\u5230\u7684\u5730\u65b9\u3002\u6240\u4ee5\u7528\u6b64\u7ed3\u8bba\u7684\u524d\u63d0\u662f\u5e72\u65f1\u533a\u90fd\u80fd\u6d41\u5230\uff0c\u5426\u5219\u4e0d\u80fd\u7528\uff01\u201d\n\n---\n\nS9\u54b1\u53c8\u593a\u51a0\u5566\uff01\u5e0c\u671b\u6211\u9ad8\u8003\u4e5f\u80fd\u987a\u5229\u54c8\u3002",
        "postTime": 1540807052,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1514)\n\n\u8fd9\u9898\u6709\u4e2a\u8bc1\u660e\u6bd4\u8f83\u96be\u60f3\uff08\u5176\u4ed6\u9898\u89e3\u90fd\u6ca1\u770b\u61c2\uff09\uff0c\u5176\u4ed6\u8fd8\u597d\u3002\n\n## \u9898\u9762\u7b80\u8ff0\n\n\u6709\u4e00\u4e2a\u77e9\u5f62\u3002\u77e9\u5f62\u4e0a\u7684\u683c\u5b50\u6709\u4e0d\u540c\u9ad8\u5ea6\u3002\u4f60\u53ef\u4ee5\u5728\u7b2c\u4e00\u884c\uff08x = 1\uff09\u7684\u4efb\u610f\u591a\u4e2a\u683c\u5b50\u653e\u6c34\uff0c\u6c34\u4f1a\u6cbf\u4f4e\u7684\u683c\u5b50\u4e00\u76f4\u843d\u4e0b\u6765\u3002\n\n\u8981\u6c42\u80fd\u5426\u4f7f\u6700\u540e\u4e00\u884c\uff08x = n\uff09\u6240\u6709\u683c\u5b50\u6709\u6c34\u3002\n\n## \u601d\u8def\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a \u641c\u7d22\n\n\u5bf9\u4e8e\u6c34\u6d41\u7684\u8fc7\u7a0b\u7684\u641c\u7d22\u5c31\u4e0d\u591a\u9610\u8ff0\u4e86\n\n\u5bf9\u4e8e\u6700\u540e\u4e00\u884c\u6ca1\u6709\u6807\u8bb0\u7684\u683c\u5b50\u76f4\u63a5\u7edf\u8ba1\u5e76\u8f93\u51fa\u5373\u53ef\n\n\u5bf9\u4e8e\u6709\u89e3\uff08\u6700\u540e\u4e00\u884c\u5168\u90e8\u8986\u76d6\uff09\u7684\u6700\u5c11\u7edf\u8ba1\uff1a\n\n\u7ecf\u8fc7\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6c34\u6d41\u5230\u6700\u540e\u4e00\u884c\u7684\u8986\u76d6\u5fc5\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u7ebf\u6bb5\n\n---\n\n#### \u8bc1\u660e\uff1a\n\n**\u524d\u63d0\uff1a\u6709\u89e3**\n\n\u5047\u8bbe\u6709\u4e00\u6761\u6c34\u6d41\u662f\u8fd9\u6837\u7684\n\n![\u56fe\u7247.png](https://i.loli.net/2019/10/27/7TLJNF3rh1mg4xC.png)\n\n\u82e5\u6709\u89e3\uff0c\u5219\u5fc5\u5b9a\u6709\u53e6\u4e00\u6761\u6c34\u6d41\u6d41\u5230\u56fe\u4e2d\u84dd\u8272\u533a\u57df\n\n![\u56fe\u7247.png](https://i.loli.net/2019/10/27/VZAz2wqTIRk8tKa.png)\n\n\u5219\u68d5\u7ebf\uff08\u7b2c\u4e8c\u6761\u6c34\u6d41\uff09\u5fc5\u4e0e\u9ed1\u7ebf\u6709\u4ea4\u70b9\n\n![\u56fe\u7247.png](https://i.loli.net/2019/10/27/CoNBg1i5bYtTdse.png)\n\n\u68d5\u7ebf\u6d41\u5230\u84dd\u8272\u533a\u57df\uff0c\u9ed1\u7ebf\u4e5f\u53ef\u4ece\u7ea2\u70b9\u5904\u6d41\u5165\u84dd\u8272\u533a\u57df\n\n\u4e0e\u5047\u8bbe\u77db\u76fe\uff0c\u6240\u4ee5\u6709\u89e3\u65f6\uff0c\u4e00\u6761\u6c34\u6d41\u5fc5\u5b9a\u6709\u8fde\u7eed\u533a\u95f4\n\n\u518d\u4e0d\u61c2\u770b\u8fd9\u4e2a\n\n\u4f60\u7684\u6c34\u6d41\u53ef\u4ee5\u957f\u8fd9\u6837\uff08\u84dd\u8272\u662f\u4e0d\u80fd\u6d41\u5230\u7684\u533a\u57df\uff09\n\n![\u56fe\u7247.png](https://i.loli.net/2019/10/27/Hg1ZwlJzVdSrhqO.png)\n\n\u4f46\u8fd9\u6837\u7684\u8bdd\n\n![\u56fe\u7247.png](https://i.loli.net/2019/10/27/VZAz2wqTIRk8tKa.png)\n\n\u522b\u7684\u6c34\u4e00\u5b9a\u6d41\u8fc7\u4e0d\u53bb\u4e86\u5440\uff08\u5426\u5219\u5b83\u81ea\u5df1\u4e5f\u8fc7\u53bb\u4e86\uff09\uff0c\u6240\u4ee5\u8fd9\u6837\u4e00\u5b9a\u65e0\u89e3\n\n---\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u540e\u4e00\u884c\u8d2a\u5fc3\uff0c\u4ece(n, 1)\u5f00\u59cb\uff0c\u4e0d\u65ad\u627e\u4e00\u4e2a\u5de6\u7aef\u70b9\u5728\u4e0a\u4e00\u4e2a\u53f3\u7aef\u70b9\u4e4b\u5185\uff0c\u53f3\u7aef\u70b9\u6700\u8fdc\u7684\u533a\u95f4\u3002\u4e0d\u8981\u8bf4\u7740\u8bf4\u7740\u5fd8\u8bb0\u7edf\u8ba1\u533a\u95f4\u4e86\uff08\u7b11\n\n\u66f4\u591a\u7ec6\u8282\u770b\u7a0b\u5e8f\n\n\u61c2\u7684\u8bdd\u5c3d\u91cf\u81ea\u5df1\u5199\uff0c\u5426\u5219\u6ca1\u4ec0\u4e48\u6536\u83b7\u7684\n\n```cpp\n#include <bits/stdc++.h>\n\n#define MAXN 1010\n\nusing namespace std;\n\nint n, m;\n\nint dx[] = {-1, 0, 1, 0};\nint dy[] = {0, 1, 0, -1};//\u65b9\u5411\u6570\u7ec4 \u65b9\u4fbf\u641c \n\nint vis[MAXN][MAXN];\n\nint h[MAXN][MAXN], l[MAXN][MAXN], r[MAXN][MAXN];\n\nvoid dfs(int x, int y) {\n\tvis[x][y] = 1;\n\tfor (int i = 0; i < 4; i++) {\n\t\tint x1 = x + dx[i];\n\t\tint y1 = y + dy[i];\n\t\tif (x1 < 1 || x1 > n || y1 < 1 || y1 > m || h[x][y] <= h[x1][y1]) continue;\n\t\tif (!vis[x1][y1]) dfs(x1, y1);\n\t\t//\u6ce8\u610f  \u82e5(x1, y1)\u683c\u5b50\u5df2\u7ecf\u8fc7\u5c31\u4e0d\u7528\u641c\u4e86\n\t\t//\u4f46    l\u548cr\u8fd8\u662f\u8981\u66f4\u65b0\u7684 \n\t\tl[x][y] = min(l[x][y], l[x1][y1]);\n\t\tr[x][y] = max(r[x][y], r[x1][y1]);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tmemset(l, 21000000, sizeof(l));\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tscanf(\"%d\", &h[i][j]);\n\t\t\tif (i == n) l[i][j] = r[i][j] = j;//\u6700\u540e\u4e00\u884c\u521d\u59cb\u5316 \n\t\t}\n\t}\t\n\t\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (!vis[1][i]) dfs(1, i);//\u82e5\u8fd9\u683c\u5df2\u7ecf\u641c\u8fc7\u4e86\u5c31\u4e0d\u7528\u641c\u4e86 \n\t}\n\t\n\tbool check = true;\n\tint ans = 0;\n\t\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (!vis[n][i]) {\n\t\t\tcheck = false;\n\t\t\tans++;\t\t\n\t\t}\n\t}\n\t\n\tif (!check) {\n\t\tcout << 0 << endl << ans << endl;\n\t\treturn 0;\n\t}\n\t\n\tint left = 1, right = r[1][1];\n\t\n\t//\u7edf\u8ba1\u533a\u95f4\u6570 \n\twhile (left <= m) {\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tif (l[1][i] <= left) {\n\t\t\t\tright = max(right, r[1][i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tleft = right + 1;\n\t\tans++;\n\t}\n\t\n\tcout << 1 << endl << ans << endl;\n\treturn 0;\n} \n```\n\n> \u65e5\u62f1\u4e00\u5352\uff0c\u529f\u4e0d\u5510\u6350",
        "postTime": 1572149797,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1514 \u5f15\u6c34\u5165\u57ce"
    },
    {
        "content": "\u3010\u53c2\u8003\u8d44\u6599\u3011\n\nliusu201601\u7684\u535a\u5ba2 - luogu1514 \u5f15\u6c34\u5165\u57ce(\u5bbd\u641c+DP)\uff1ahttps://blog.csdn.net/liusu201601/article/details/79801394\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u56fd\u5ea6\uff0c\u4e00\u4fa7\u662f\u98ce\u666f\u79c0\u7f8e\u7684\u6e56\u6cca\uff0c\u53e6\u4e00\u4fa7\u5219\u662f\u6f2b\u65e0\u8fb9\u9645\u7684\u6c99\u6f20\u3002\u8be5\u56fd\u7684\u884c\u653f\u533a\u5212\u5341\u5206\u7279\u6b8a\uff0c\u521a\u597d\u6784\u6210\u4e00\u4e2a$n$\u884c$m$\u5217\u7684\u77e9\u5f62\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u683c\u5b50\u90fd\u4ee3\u8868\u4e00\u5ea7\u57ce\u5e02\uff0c\u6bcf\u5ea7\u57ce\u5e02\u90fd\u6709\u4e00\u4e2a\u6d77\u62d4\u9ad8\u5ea6\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/299.png)\n\n\u4e3a\u4e86\u4f7f\u5c45\u6c11\u4eec\u90fd\u5c3d\u53ef\u80fd\u996e\u7528\u5230\u6e05\u6f88\u7684\u6e56\u6c34\uff0c\u73b0\u5728\u8981\u5728\u67d0\u4e9b\u57ce\u5e02\u5efa\u9020\u6c34\u5229\u8bbe\u65bd\u3002\u6c34\u5229\u8bbe\u65bd\u6709\u4e24\u79cd\uff0c\u5206\u522b\u4e3a\u84c4\u6c34\u5382\u548c\u8f93\u6c34\u7ad9\u3002\u84c4\u6c34\u5382\u7684\u529f\u80fd\u662f\u5229\u7528\u6c34\u6cf5\u5c06\u6e56\u6cca\u4e2d\u7684\u6c34\u62bd\u53d6\u5230\u6240\u5728\u57ce\u5e02\u7684\u84c4\u6c34\u6c60\u4e2d\u3002\n\n\u56e0\u6b64\uff0c\u53ea\u6709\u4e0e\u6e56\u6cca\u6bd7\u90bb\u7684\u7b2c$1$\u884c\u7684\u57ce\u5e02\u53ef\u4ee5\u5efa\u9020\u84c4\u6c34\u5382\u3002\u800c\u8f93\u6c34\u7ad9\u7684\u529f\u80fd\u5219\u662f\u901a\u8fc7\u8f93\u6c34\u7ba1\u7ebf\u5229\u7528\u9ad8\u5ea6\u843d\u5dee\uff0c\u5c06\u6e56\u6c34\u4ece\u9ad8\u5904\u5411\u4f4e\u5904\u8f93\u9001\u3002\u6545\u4e00\u5ea7\u57ce\u5e02\u80fd\u5efa\u9020\u8f93\u6c34\u7ad9\u7684\u524d\u63d0\uff0c\u662f\u5b58\u5728\u6bd4\u5b83\u6d77\u62d4\u66f4\u9ad8\u4e14\u62e5\u6709\u516c\u5171\u8fb9\u7684\u76f8\u90bb\u57ce\u5e02\uff0c\u5df2\u7ecf\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\u3002\u7531\u4e8e\u7b2cN \u884c\u7684\u57ce\u5e02\u9760\u8fd1\u6c99\u6f20\uff0c\u662f\u8be5\u56fd\u7684\u5e72\u65f1\u533a\uff0c\u6240\u4ee5\u8981\u6c42\u5176\u4e2d\u7684\u6bcf\u5ea7\u57ce\u5e02\u90fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u8981\u6c42\u80fd\u5426\u6ee1\u8db3\u5462\uff1f\u5982\u679c\u80fd\uff0c\u8bf7\u8ba1\u7b97\u6700\u5c11\u5efa\u9020\u51e0\u4e2a\u84c4\u6c34\u5382\uff1b\u5982\u679c\u4e0d\u80fd\uff0c\u6c42\u5e72\u65f1\u533a\u4e2d\u4e0d\u53ef\u80fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\u7684\u57ce\u5e02\u6570\u76ee\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u3011\n\n- \u8f93\u5165\u683c\u5f0f\n\n\u8f93\u5165\u6587\u4ef6\u7684\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6b63\u6574\u6570$n$\u548c$m$\uff0c\u8868\u793a\u77e9\u5f62\u7684\u89c4\u6a21\u3002\u63a5\u4e0b\u6765$n$ \u884c\uff0c\u6bcf\u884c$m$ \u4e2a\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u4ee3\u8868\u6bcf\u5ea7\u57ce\u5e02\u7684\u6d77\u62d4\u9ad8\u5ea6\u3002\n\n- \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u6709\u4e24\u884c\u3002\u5982\u679c\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u662f\u6574\u6570$1$\uff0c\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6700\u5c11\u5efa\u9020\u51e0\u4e2a\u84c4\u6c34\u5382\uff1b\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u662f\u6574\u6570$0$\uff0c\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6709\u51e0\u5ea7\u5e72\u65f1\u533a\u4e2d\u7684\u57ce\u5e02\u4e0d\u53ef\u80fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u3011\n\n- \u8f93\u5165\u6837\u4f8b #1\n```\n2 5\n9 1 5 4 3\n8 7 6 1 2\n```\n- \u8f93\u51fa\u6837\u4f8b #1\n```\n1\n1\n```\n- \u8f93\u5165\u6837\u4f8b #2\n```\n3 6\n8 4 5 6 4 4\n7 3 4 3 3 3\n3 2 2 1 1 2\n```\n- \u8f93\u51fa\u6837\u4f8b #2\n```\n1\n3\n```\n\u3010\u8bf4\u660e\u3011\n\n- \u6837\u4f8b$1$ \u8bf4\u660e\n\n\u53ea\u9700\u8981\u5728\u6d77\u62d4\u4e3a9 \u7684\u90a3\u5ea7\u57ce\u5e02\u4e2d\u5efa\u9020\u84c4\u6c34\u5382\uff0c\u5373\u53ef\u6ee1\u8db3\u8981\u6c42\u3002\n\n- \u6837\u4f8b$2$ \u8bf4\u660e\n\n![](https://cdn.luogu.com.cn/upload/pic/300.png)\n\n\u4e0a\u56fe\u4e2d\uff0c\u5728$3$ \u4e2a\u7c97\u7ebf\u6846\u51fa\u7684\u57ce\u5e02\u4e2d\u5efa\u9020\u84c4\u6c34\u5382\uff0c\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u3002\u4ee5\u8fd9$3$ \u4e2a\u84c4\u6c34\u5382\u4e3a\u6e90\u5934\n\n\u5728\u5e72\u65f1\u533a\u4e2d\u5efa\u9020\u7684\u8f93\u6c34\u7ad9\u5206\u522b\u7528$3$ \u79cd\u989c\u8272\u6807\u51fa\u3002\u5f53\u7136\uff0c\u5efa\u9020\u65b9\u6cd5\u53ef\u80fd\u4e0d\u552f\u4e00\u3002\n\n\u3010\u6570\u636e\u8303\u56f4\u3011\n\n![](https://cdn.luogu.com.cn/upload/pic/301.png)\n\n\u3010\u9898\u89e3\u3011\n\n- \u6211\u4f1a\u9a97\u5206\uff01\n\n\u7531\u4e8e\u6709\u90e8\u5206\u6d4b\u8bd5\u70b9\u7684$n=1$\uff0c\u4e5f\u5373\u6709\u90e8\u5206\u57ce\u5e02\u65e2\u662f\u6cbf\u6c34\u57ce\u5e02\u53c8\u662f\u5e72\u65f1\u57ce\u5e02\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u7279\u6027\u6765\u9a97\u5206\uff0c\u671f\u671b\u5f97\u5206$0$~$10$\u5206\u3002\n\n- \u6211\u4f1a\u641c\u7d22\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u6765\u5224\u65ad\u662f\u5426\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\uff08\u82e5\u4e0d\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u5219\u80fd\u591f\u6c42\u51fa\u6709\u51e0\u5ea7\u5e72\u65f1\u533a\u4e2d\u7684\u57ce\u5e02\u4e0d\u53ef\u80fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u90e8\u5206\u7684\u5206\u6570\uff0c\u671f\u671b\u5f97\u5206$0$~$30$\u5206\u3002\n\n- \u6211\u4f1a\u641c\u7d22+\u52a8\u6001\u89c4\u5212\uff01\n\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u524d\u9762\u7684\u4e00\u79cd\u65b9\u6cd5\u6765\u8fdb\u884c\u6539\u8fdb\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u6c42\u51fa\u80fd\u591f\u6ee1\u8db3\u65f6\u6700\u5c11\u9700\u8981\u7684\u84c4\u6c34\u5382\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5bbd\u641c\u7684\u65f6\u5019\u6c42\u51fa\u6bcf\u4e2a\u70b9\u6240\u80fd\u591f\u53bb\u5230\u7684\u6700\u5de6\u7684\u70b9\uff08\u5de6\u7aef\u70b9\uff09\u548c\u6700\u53f3\u7684\u70b9\uff08\u53f3\u7aef\u70b9\uff09\uff0c\u7136\u540e\u7528$fz[i][j]$\u6765\u8868\u793a$i$\u548c$j$\u4e4b\u95f4\u6700\u5c11\u9700\u8981\u5efa\u591a\u5c11\u5ea7\u84c4\u6c34\u5382\uff0c\u5e76\u4e14\u7528$d[i]$\u6765\u8868\u793a$1$~$n$\u6700\u5c11\u9700\u8981\u591a\u5c11\u5ea7\u84c4\u6c34\u5382\uff08\u6ce8\u610f\u4e00\u5f00\u59cb\u8981\u5c06\u8fd9\u4e24\u4e2a\u6570\u7ec4\u521d\u59cb\u5316\u4e3a$\\infty$\u54e6\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u5c06**\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u51fa\u53e3\u4e14\u4e0d\u88ab\u5176\u4ed6\u5165\u53e3\u6240\u5230\u8fbe\u7684\u70b9**\u7684\u5de6\u7aef\u70b9\u81f3\u53f3\u7aef\u70b9\u7684\u503c\u6539\u4e3a$1$\uff0c\u4f8b\u5982\u5de6\u7aef\u70b9$=2$\uff0c\u53f3\u7aef\u70b9$=7$\u65f6\u5c06$fz[2][2]$~$fz[2][7]$\u7684\u503c\u6539\u4e3a$1$\u3002\u5f97\u5230$fz[][]$\u6570\u7ec4\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa$d[]$\u6570\u7ec4\u4e86\uff0c\u4e0d\u96be\u60f3\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$d[i]=min(d[i],d[j]+fz[j+1][i])$$\n\n\u7531\u6b64\u5f97\u89e3\uff0c\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a$d[m]$\u3002\n\n\u4e0b\u9762\u4e0a$100$\u5206\u4ee3\u7801~\n\n```\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\nint ma[501][501],fl[501][501],t[501][501],d[501];\nstruct nodea{ int v,l,r; } a[1000001];\nstruct nodeb{ int x,y; } f[1000001];\nint dx[4]={1,0,-1,0};\nint dy[4]={0,1,0,-1};\nint fz[501][501];\nint v[1000001];\nint n=0,m=0;\nint min(int x,int y)\n{\n\treturn x<y?x:y;\n}\nint max(int x,int y)\n{\n\treturn x>y?x:y;\n}\nvoid bfs(int sx,int sy)\n{\n\tmemset(fl,0,sizeof(fl));\n\tif(n==1)\n\t{\n\t\tv[sy]=1;\n\t\ta[sy].l=a[sy].r=sy;\n\t}\n\tint tou=1,wei=2;\n\tf[1].x=sx,f[1].y=sy;\n\tfl[sx][sy]=1;\n\twhile(tou<wei)\n\t{\n\t\tfor(int i=0;i<=3;i++)\n\t\t{\n\t\t\tint nx=f[tou].x+dx[i];\n\t\t\tint ny=f[tou].y+dy[i];\n\t\t\tif(ma[nx][ny]<ma[f[tou].x][f[tou].y] && fl[nx][ny]==0)\n\t\t\t{\n\t\t\t\tif(nx>=1 && nx<=n && ny>=1 && ny<=m)\n\t\t\t\t{\n\t\t\t\t\tif(nx==1)\n\t\t\t\t\t{\n\t\t\t\t\t\ta[ny].v=0;\n\t\t\t\t\t}\n\t\t\t\t\tif(nx==n)\n\t\t\t\t\t{\n\t\t\t\t\t\tv[ny]=1;\n\t\t\t\t\t\ta[sy].l=min(a[sy].l,ny);\n\t\t\t\t\t\ta[sy].r=max(a[sy].r,ny);\n\t\t\t\t\t}\n\t\t\t\t\tf[wei].x=nx;\n\t\t\t\t\tf[wei].y=ny;\n\t\t\t\t\tfl[nx][ny]=1;\n\t\t\t\t\twei++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttou++;\n\t}\n}\nvoid soua()\n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta[i].l=999999999;\n\t\ta[i].r=0;\n\t\ta[i].v=1;\n\t\tv[i]=0;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(a[i].v==1)\n\t\t{\n\t\t\tbfs(1,i);\n\t\t}\n\t}\n}\nvoid soub()\n{\n\tint su=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(v[i]==0)\n\t\t{\n\t\t\tsu++;\n\t\t}\n\t}\n\tif(su!=0)\n\t{\n\t\tprintf(\"0\\n%d\",su);\n\t\texit(0);\n\t}\n}\nvoid dp()\n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\td[i]=999999999;\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tfz[i][j]=999999999;\n\t\t}\n\t}\n\tfor(int t=1;t<=m;t++)\n\t{\n\t\tif(a[t].r!=0)\n\t\t{\n\t\t\tfor(int i=a[t].l;i<=a[t].r;i++)\n\t\t\t{\n\t\t\t\tfor(int j=i;j<=a[t].r;j++)\n\t\t\t\t{\n\t\t\t\t\tfz[i][j]=1;\n\t\t\t\t\tif(i==1)\n\t\t\t\t\t{\n\t\t\t\t\t\td[j]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;j<=i-1;j++)\n\t\t{\n\t\t\td[i]=min(d[i],d[j]+fz[j+1][i]);\n\t\t}\n\t}\n\tprintf(\"1\\n%d\",d[m]);\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&ma[i][j]);\n\t\t}\n\t}\n\tsoua();\n\tsoub();\n\tdp();\n\treturn 0;\n}\n```",
        "postTime": 1523079203,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010[NOIP2009]\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "#\u8fd9\u662f\u6211\u6700\u65e9\u5f00\u59cb\u8ba4\u771f\u7684\u4e00\u7bc7\u9898\u89e3\u5462\n\n\u5927\u4f6c\u4eec\u90fd\u7528\u7684BFS\uff0c\u6211\u8fd9\u4e2a\u5f31\u9e21\u5c31\u53ea\u4f1aDFS\uff0c\u5f53\u7136\u8fd9\u9053\u9898\u662f\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u7279\u522b\u590d\u6742\u53ef\u80fd\u5c31\u4f1a\u6808\u6ea2\u51fa\uff0c\u4f1a\u9700\u8981\u624b\u5199\u6808\u3002\u4e0d\u8fc7\u8fd9\u9053\u9898\u662f\u53ef\u4ee5\u7528\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528DFS\u5c06\u7b2c\u4e00\u6392\u6bcf\u4e00\u4e2a\u70b9\u90fd\u7528DFS\u641c\u7d22\u4e00\u904d\uff0c\u7136\u540e\u627e\u51fa\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5148\u5224\u5b9a\u662f\u5426\u80fd\u8986\u76d6\u5b8c\u3002\u4e4b\u540e\u5c31\u662f\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4f60\u5f88\u660e\u663e\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u65e0\u6cd5\u88ab\u8986\u76d6\u6389\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4e0a\u5de6\u53f3\u7684\u70b9\u90fd\u6bd4\u4ed6\u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c06\u7edd\u5bf9\u65e0\u6cd5\u8986\u76d6\u5230\uff0c\u53cd\u4e4b\u5219\u5982\u679c\u80fd\u8986\u76d6\u5168\u90e8\u70b9\uff0c\u4e0a\u65b9\u7684\u6bcf\u4e00\u4e2a\u70b9\u6240\u5bf9\u5e94\u8986\u76d6\u7684\u5c06\u4f1a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u8d2a\u5fc3\u548cdp\u597d\u50cf\u90fd\u662f\u53ef\u4ee5\u7684\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f60\u80af\u5b9a\u4f1a\u6709\u4e00\u4e2a\u70b9TLE\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6700\u540e\u4e00\u6b65\u4f18\u5316\uff0c\u90a3\u5c31\u662f\u5224\u5b9a\u7b2c\u4e00\u6392\u7684\u70b9\u65f6\uff0c\u53ea\u6709\u8fd9\u4e2a\u70b9\u6bd4\u5de6\u53f3\u90fd\u9ad8\u624d\u53bb\u5224\u5b9a\uff0c\u5426\u5219\u5fc5\u6709\u53e6\u5916\u4e00\u70b9\u6bd4\u5b83\u7684\u8986\u76d6\u66f4\u5e7f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u5df1\u53bb\u60f3\u4e00\u4e0b\u3002\n\n```cpp\n#include<iostream>\n#include<math.h>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m;\nint map[505][505],vis[505][505]={0},ans[505],f[505];\nstruct node\n{\nint l,r;\n}cover[505];\nvoid DFS(int x,int y,int place)//x\u6a2a\u5750\u6807,y\u7eb5\u5750\u6807\uff0cplace\u662f\u5bf9\u5e94\u90a3\u4e2a\u70b9\u3002\n{\nvis[x][y]=1;//\u8bb0\u4f4f\u641c\u8fc7\u7684\u70b9\nif(x==n)\n{\nans[y]=1;\n//\u5230\u6700\u540e\u4e00\u6392\u66f4\u65b0\ncover[place].l=min(cover[place].l,y);\ncover[place].r=max(cover[place].r,y);\n}\nif(x!=n&&!vis[x+1][y]&&map[x+1][y]<map[x][y])DFS(x+1,y,place);//\u8fd9\u4e9b\u662f\u5224\u5b9a\u4ee3\u7801\uff0c\u5f00\u59cbDFS\uff0c\u5e76\u4e14\u52a0\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\nif(x!=1&&!vis[x-1][y]&&map[x-1][y]<map[x][y])DFS(x-1,y,place);\nif(y!=m&&!vis[x][y+1]&&map[x][y+1]<map[x][y])DFS(x,y+1,place);\nif(y!=1&&!vis[x][y-1]&&map[x][y-1]<map[x][y])DFS(x,y-1,place);\n}\nint main()\n{\nscanf(\"%d %d\",&n,&m);\nfor(int i=1;i<=m;i++)cover[i].l=f[i]=30000;\nf[0]=0;\nfor(int i=1;i<=n;i++)\n{\nfor(int j=1;j<=m;j++)\n{\nscanf(\"%d\",&map[i][j]);\n}\n}\nfor(int i=1;i<=m;i++)\n{\n** if(map[1][i-1]<=map[1][i]&&map[1][i+1]<=map[1][i])**//\u4f18\u5316\uff0c\u4e0d\u4f18\u5316\u8fc7\u4e0d\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\nDFS(1,i,i);\nmemset(vis,0,sizeof(vis));//\u6bcf\u6b21\u641c\u7d22\u5f52\u96f6\n}\nint cnt=0;\nfor(int i=1;i<=m;i++)if(!ans[i])cnt++;\nif(cnt) printf(\"0\\n%d\",cnt);\nelse\n{\ncout<<1<<endl;\n//\u627e\u6700\u5c11\u7684\u70b9\nfor(int i=1;i<=m;++i)\n{\nfor(int j=1;j<=m;++j)\n{\nif(i>=cover[j].l&&i<=cover[j].r)f[i]=min(f[i],f[cover[j].l-1]+1);\n}\n}\ncout<<f[m]<<endl;\n}\n// \u4e4b\u524d\u7684\u8c03\u8bd5\u4ee3\u7801=\u3002= for(int i=1;i<=m;i++)cout<<cover[i].l<<\" \"<<cover[i].r<<endl;\n}\n```",
        "postTime": 1510932010,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u5f15\u6c34\u5165\u57ce"
    },
    {
        "content": "### \u601d\u8def\u4e3b\u7ebf\n** _DFS_+ _\u8d2a\u5fc3_ **\n\n**1.**DFS\u51fa\u6bcf\u4e2a\u70b9\u6240\u80fd\u63a7\u5236\u7684\u5de6\u8fb9\u754c\uff0c\u53f3\u8fb9\u754c\uff0c\u7528c[i]\u8bb0\u5f55\u3002\n\n**2.**b[i]\u8868\u793a\u80fd\u5426\u5230\u8fbe\u5e72\u65f1\u533a\u7684\u7b2ci\u53f7\u70b9\u3002\n\n**3.**\u626b\u4e00\u904db[i]\u770b\u770b\u6709\u591a\u5c11\u5e72\u65f1\u533a\u4e0d\u53ef\u80fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\u3002\n\n**4.**\u5982\u679c\u6ca1\u6709\u5e72\u65f1\u533a\u4e0d\u53ef\u80fd\u5efa\u6709\u6c34\u5229\u8bbe\u65bd\uff0c\u5219\u8d2a\u5fc3\u7684\u8dd1\u4e00\u904d\u533a\u95f4\u8986\u76d6\u3002\n\n**5.**\u7ed3\u675f\u3002\n\n\n\n\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint a[505][505],b[505],bo[505][505];\nint n,m;\ninline void read(int &a)//\u5feb\u8bfb\n{\n    int k=1;a=0;\n    char c=getchar();\n    while (c<'0'||c>'9')\n    {if (c=='-')k=-1;c=getchar();}\n    while (c>='0'&&c<='9')\n    {a=a*10+c-'0';c=getchar();}\n    a*=k;\n}\nstruct f{\n    int l;\n    int r;\n}c[10005],d[10005];//\u8bb0\u5f55\u5de6\u53f3\u8fb9\u754c\nint cmp(f A,f B)//\u4f4d\u8d2a\u5fc3\u4ee5\u5de6\u7aef\u70b9\u4f18\u5148\u6392\u5e8f\n{\n    if (A.l!=B.l) \n    return A.l<B.l;\n    return A.r<B.r; \n}\nvoid dfs(int x,int y,int wz)//\u6c42\u51fa\u84c4\u6c34\u5382\u63a7\u5236\u533a\u57df\n{\n    if(x<1||x>n||y<1||y>m)\n    return ;\n    bo[x][y]=1;\n    if (x==n)\n    {\n        b[y]=1;\n        c[wz].l=min(c[wz].l,y);\n        c[wz].r=max(c[wz].r,y);\n    }\n    if (a[x][y]>a[x+1][y]&&bo[x+1][y]!=1&&x!=n)\n    dfs(x+1,y,wz);\n    if (a[x][y]>a[x-1][y]&&bo[x-1][y]!=1&&x!=1)\n    dfs(x-1,y,wz);\n    if (a[x][y]>a[x][y-1]&&bo[x][y-1]!=1&&y!=1)\n    dfs(x,y-1,wz);\n    if (a[x][y]>a[x][y+1]&&bo[x][y+1]!=1&&y!=m)\n    dfs(x,y+1,wz);\n}\nint main()\n{\n    int i,j;\n    cin>>n>>m;\n    for (i=1;i<=n;i++)\n    {\n        for (j=1;j<=m;j++)\n        {\n            if (i==1)\n            {\n                c[j].l=2147483647;\t\n            } \n            read(a[i][j]);\n        }\n    }\n    for (i=1;i<=m;i++)\n    {\n        if (a[1][i-1]<=a[1][i]&&a[1][i+1]<=a[1][i])\n        dfs(1,i,i);\n        memset(bo,0,sizeof(bo));\n    }\n    int sum=0,t1=0;\n    for (i=1;i<=m;i++)\n    {\n        if (b[i]==0)\n        sum++;\n    }\n    if (sum!=0)\n    {\n        cout<<\"0\"<<endl;\n        cout<<sum<<endl;\n    }\n    else\n    {\n        cout<<\"1\"<<endl;\n        for (i=1;i<=m;i++)\n        {\n            if (c[i].l!=2147483647&&c[i].r!=0)\n            {\n                d[++t1].l=c[i].l;\t\n                d[t1].r=c[i].r;\n            }\n        } \n        sort(d+1,d+t1+1,cmp);\n        int i1=1,t12=1,ans=0;\n        while(t12<=m)//\u8d2a\u5fc3\u533a\u95f4\u8986\u76d6\n        {\n            int t123=0;\n            while (d[i1].l<=t12)\n            {\n                t123=max(t123,d[i1].r);\n                i1++;\n            }\n            t12=t123+1;\n            ans++;\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1521967566,
        "uid": 43395,
        "name": "Dream_It_Possible",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "#### \u770b\u5230\u597d\u591a\u9898\u89e3\u90fd\u662f2\u904d\u641c\u7d22\uff0c\u6211\u53ea\u60f3\u8bf4\n\n#### **\u53ea\u9700\u8981\u4e00\u904dBfs\uff0c\u4f60\u5c31\u53ef\u4ee5A\u6389\u5b83\uff01**\n\n\u601d\u8def\u5982\u4e0b\uff1a\u6211\u4eec\u4ece\u6700\u540e\u4e00\u884c\u8dd1Bfs\uff0c\u8bb0\u5f55\u4e0b\u6765\u54ea\u4e9b\u70b9\u53ef\u4ee5\u704c\u6e89\u5230\u8fd9\u4e2a\u70b9\u3002\u5982\u679c\u6ca1\u6709\u70b9\u80fd\u704c\u6e89\u5230\uff0c\u8bb0\u4e0b\u4e2a\u6570\uff0c\u9000\u51fa\uff1b\u5426\u5219\u5bf9\u533a\u95f4\u6392\u5e8f\u8fdb\u884c\u8d2a\u5fc3\u3002\n\n**\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e2a\u5751\u70b9\uff1a** \u5982\u679c\u53ea\u6709\u4e00\u884c\u7684\u8bdd\uff0c\u6ca1\u6709\u88ab\u66f4\u65b0\u7684\u70b9\u5b9e\u9645\u4e0a\u6bd4\u4e24\u8fb9\u90fd\u9ad8\uff0c\u610f\u601d\u662f\u53ea\u8981\u5728\u8fd9\u4e9b\u70b9\u4e0a\u5efa\u9020\u6c34\u7ad9\u5c31\u53ef\u4ee5\u704c\u6e89\u6240\u6709\u70b9\uff0c\u6240\u4ee5\u8981\u8f93\u51fa1\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define Inf 501\nusing namespace std;\nconst int dx[4]={0,1,-1,0},dy[4]={1,0,0,-1};\nint n,m;\nint h[501][501],l[501],r[501];\nint que[250010][2];\nbool vis[501][501],ok[501];\nstruct node{\n\tint l,r;\n\tvoid cl(){\n\t\tl=Inf;\n\t}\n}q[501];\ninline void re(int &n){\n\tn=0;\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0') ch=getchar();\n\twhile(ch>='0'&&ch<='9') n=n*10+ch-'0',ch=getchar();\n}\ninline bool cmp(node a,node b){\n\tif(a.l!=b.l) return a.l<b.l;\n\tif(a.l==b.l) return a.r<b.r; \n}\ninline void bfs(int x,int y){//\u7b80\u5355\u7684Bfs\u8fc7\u7a0b \n\tint head=0,tail=1,x1,y1;\n\tmemset(vis,0,sizeof(vis));\n\tque[1][0]=x;que[1][1]=y;vis[x][y]=1;\n\twhile(head<tail){\n\t\thead++;\n\t\tfor(int i=0;i<4;i++){\n\t\t\tx1=que[head][0]+dx[i];\n\t\t\ty1=que[head][1]+dy[i];\n\t\t\tif(x1<1||y1<1||x1>n||y1>m||h[que[head][0]][que[head][1]]>=h[x1][y1]||vis[x1][y1]) continue;\n\t\t\tvis[x1][y1]=1;//\u8fd9\u91cc\u6ce8\u610f\u662f\u53cd\u7740\u641c\u7684\uff0c\u610f\u601d\u662f\u6211\u4eec\u8981\u627e\u6bd4\u5b83\u5927\u7684 \n\t\t\ttail++;\n\t\t\tque[tail][0]=x1;\n\t\t\tque[tail][1]=y1;\n\t\t\tif(x1==1){\n\t\t\t\tq[y].l=min(y1,q[y].l);\n\t\t\t\tq[y].r=max(y1,q[y].r);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tre(n);re(m);\n\tfor(int i=1;i<=n;i++)\n\t  for(int j=1;j<=m;j++)\n\t    re(h[i][j]);\n\tint tot=0;\n\tfor(int i=1;i<=m;i++){\n\t\tq[i].cl();//\u521d\u59cb\u5316 \n\t\tbfs(n,i);//\u641c\u7d22 \n\t\tif(q[i].l==Inf) tot++;//\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u8bb0\u5f55\u4e0b\u6765 \n\t}\n\tif(tot){//\u5982\u679c\u6709\u7684\u70b9\u4e0d\u80fd\u88ab\u704c\u6e89\u5230 \n\t\tif(n!=1) printf(\"0\\n%d\",tot);//\u5982\u540c\u6211\u4eec\u4e0a\u9762\u8bf4\u7684\uff0c\u5982\u679c\u4e0d\u662f1\u884c\uff0c\u5c31\u662f\u6709\u7684\u70b9\u704c\u6e89\u4e0d\u5230 \n\t\telse printf(\"1\\n%d\",tot); //\u5982\u679c\u662f1\u884c\uff0c\u5219\u8be5\u70b9\u6bd4\u5de6\u53f3\u90fd\u9ad8\uff0c\u5728\u8be5\u70b9\u5efa\u8bbe\u5c31\u884c\uff0c\u8f93\u51fa1\uff0c\u5373\u80fd\u6ee1\u8db3 \n\t\treturn 0;\n\t}\n\tsort(q+1,q+m+1,cmp);//\u533a\u95f4\u6392\u5e8f \n\tint las=0;//las\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u6c34\u7ad9\u7684\u4f4d\u7f6e \n\tfor(int i=1;i<=m;i++){\n\t\tif(las>=q[i].l&&las<=q[i].r){\n\t\t\tcontinue;//\u5982\u679c\u4e0a\u4e00\u4e2a\u6c34\u7ad9\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\uff0c\u4e0d\u7528\u7ba1 \n\t\t}\n\t\ttot++;//\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u628a\u6bcf\u4e00\u4e2a\u6c34\u7ad9\u90fd\u5c3d\u91cf\u5f80\u540e\u653e\uff0c\u8fd9\u6837\u80fd\u6ee1\u8db3\u7684\u5c31\u66f4\u591a \n\t\tlas=q[i].r;\n\t}\n\tprintf(\"1\\n%d\\n\",tot);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1573644960,
        "uid": 211948,
        "name": "Hopearceus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "[\u3010P1514\u3011\u5f15\u6c34\u5165\u57ce](https://www.luogu.org/problemnew/show/P1514)\n\n\u6807\u7b7e\uff1a\u6df1\u641c\u4e0e\u56de\u6eaf \u52a8\u89c4\n\n\u601d\u8def\uff1a\n\n\u679a\u4e3e\u8d77\u70b9\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u641c\u7d22\uff0c\u628a\u641c\u8fc7\u7684\u5730\u65b9\u6253\u6807\u8bb0\u3002\u7b2c\u4e00\u95ee\u95ee\u4f60\u6c99\u6f20\u65c1\u8fb9\u662f\u4e0d\u662f\u90fd\u6709\u6c34\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u884c\u662f\u4e0d\u662f\u90fd\u88ab\u641c\u7d22\u8fc7\uff0c\u6240\u4ee5\u53ea\u9700\u641c\u7d22\u7ed3\u675f\u540e\u628a\u6700\u540e\u4e00\u884c\u62ff\u51fa\u6765\u770b\u770b\u6807\u8bb0\u6709\u6ca1\u6709\u6253\u6ee1\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b2c\u4e8c\u95ee\u6bd4\u8f83\u96be\u60f3\uff0c\u8003\u8651\u5230\u5982\u679c\u6700\u7ec8\u6700\u540e\u4e00\u884c\u5b58\u5728\u6ca1\u641c\u5230\u7684\u7a0b\u5e8f\u4f1a\u63d0\u524d\u5224\u65ad\u5e76\u7ed3\u675f\uff0c\u800c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6c42\u6ca1\u88ab\u641c\u7d22\u8fc7\u7684\u65b9\u683c\u6570\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u601d\u8003\u5728\u6700\u540e\u4e00\u884c\u90fd\u88ab\u7ecf\u8fc7\u540e\u81f3\u5c11\u9700\u8981\u591a\u5c11\u8d77\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u663e\u7136\u679a\u4e3e\u8d77\u70b9\u7684\u65f6\u5019\u8fd8\u4e0d\u80fd\u5224\u65ad\uff0c\u53ea\u597d\u5728\u8003\u8651\u5728\u641c\u7d22~~\u505a\u70b9\u624b\u811a~~\uff0c\u770b\u4e0b\u80fd\u4e0d\u80fd\u641c\u5b8c\u4e86\u4ee5\u540e\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\u3002\u90a3\u4e0d\u59a8**\u628a\u201c\u6709\u591a\u5c11\u8d77\u70b9\u201d\u8f6c\u5316\u6210\u201c\u7ed3\u675f\u540e\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u8d77\u70b9\u8986\u76d6\u7684\u533a\u57df\u201d\u3002**\n\n![\u6765\u81ea\u9898\u76ee](https://cdn.luogu.com.cn/upload/pic/300.png)\n\n  _\u6bd4\u5982\u8fd9\u91cc\u7684\u4e0d\u540c\u533a\u57df\u5c31\u6709\u4e09\u4e2a\u201c3,2\u201d\u3001\u201c2,1,2\u201d\u3001\u201c2\u201d _\n  \n  \n\u800c\u57fa\u4e8e\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u8fd9\u4e9b\u8d77\u70b9\u4e0d\u540c\u7684\u533a\u57df\u5404\u81ea**\u5185\u90e8\u8054\u901a**\u4e14**\u76f8\u90bb\u4e24\u4e2a\u4e0d\u540c\u533a**\u5f7c\u6b64\u5176\u5b9e\u4e5f\u662f\u8054\u901a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e0d\u540c\u533a\u57df\u6700\u5de6\u7aef\u3001\u6700\u53f3\u7aef\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u533a\u57df\uff0c\u800c\u4e14\u77e5\u9053\u4e00\u4e2a\u533a\u57df\u7684\u6700\u53f3\u7aef\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e0b\u4e00\u4e2a\u533a\u57df\u7684\u6700\u5de6\u7aef\uff0c\u5bf9\u4e0d\u5bf9\uff1f\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u5728\u641c\u7d22\u7684\u65f6\u5019\u5c31\u627e\u5230\u5f53\u524d\u4f4d\u7f6e\u53ef\u4ee5\u5230\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef\uff0c\u90a3\u4e48\u67d0\u4e00\u8d77\u70b9\u8986\u76d6\u7684\u533a\u95f4\u4e5f\u5c31\u5f97\u5230\u4e86\u3002\u6700\u540e\u679a\u4e3e\u8d77\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u8d77\u70b9\u80fd\u5230\u7684\u6700\u5de6\u7aef\u5c0f\u4e8e\u5f53\u524d\u67e5\u8be2\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u8fd9\u4e2a\u8d77\u70b9\u7684\u80fd\u5230\u7684\u6700\u53f3\u70b9\u5c31\u6709\u53ef\u80fd\u6210\u4e3a\u6211\u5f53\u524d\u67e5\u8be2\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u3002\u7136\u540e\u66f4\u65b0\u5de6\u7aef\u70b9\uff08\u6700\u540e\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u4e0b\u4e00\u4e2a\uff09\uff0c\u7b54\u6848\u52a0\u4e00\uff08\u627e\u5230\u4e00\u4e2a\u65b0\u533a\u57df\uff09\uff0c\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u533a\u95f4\u3002\u6700\u540e\u5982\u679c\u6211\u5de6\u7aef\u70b9\u5927\u4e8e\u5217\u6570\u5c31\u8df3\u51fa\u7a0b\u5e8f\uff0c\u8fd9\u65f6\u5019\u7b54\u6848\u5c31\u662f\u4e0d\u540c\u533a\u57df\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u84c4\u6c34\u7ad9\u7684\u6570\u91cf\u3002\n\n\u7a0b\u5e8f\u7ec6\u8282\n\n1. \u7531\u4e8e\u540c\u4e00\u4f4d\u7f6e\u53ea\u80fd\u5efa\u4e00\u79cd\u6c34\u5229\u8bbe\u65bd\uff0c\u5efa\u4e86\u8f93\u6c34\u7ad9\u5c31\u80af\u5b9a\u4e0d\u80fd\u84c4\u6c34\u7ad9\u3002\u800c\u4e14\u5e76\u6ca1\u6709\u89c4\u5b9a\u9760\u8fd1\u6e56\u6cca\u4e0d\u80fd\u5efa\u8f93\u6c34\u7ad9\uff0c\u56e0\u6b64\u6709\u53ef\u80fd\u4e4b\u524d\u7684\u84c4\u6c34\u7ad9\u628a\u67d0\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u84c4\u6c34\u7ad9\u7684\u70b9\u53d8\u6210\u4e86\u8f93\u6c34\u7ad9\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u5c31\u4e0d\u80fd\u9009\u5b83\u505a\u8d77\u70b9\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2abool\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u7ecf\u8fc7\u8fc7\u3002\u6700\u540edfs\u524d\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u8bbf\u95ee\u8fc7\uff08\u505a\u8fc7\u8f93\u6c34\u7ad9\uff09\uff0c\u5c31\u4e0d\u80fd\u518d\u4ee5\u5b83\u4e3a\u8d77\u70b9\uff08\u84c4\u6c34\u7ad9\uff09\u641c\u7d22\u3002\n\n2. \u5f53\u524d\u70b9\u5230\u7684\u6700\u5de6\u3001\u6700\u53f3\u7aef\u5728\u7a0b\u5e8f\u5b9e\u73b0\u65f6\u53ef\u4ee5\u5728\u56de\u6eaf\u7684\u65f6\u5019\u4ece\u5b83\u5230\u7684\u70b9\u548c\u5b83\u81ea\u5df1\u505a\u6bd4\u8f83\uff0c\u6bd4\u53f3\u662f\u6bd4\u5927\uff0c\u6bd4\u5de6\u662f\u6bd4\u5c0f\uff0c\u56e0\u6b64\u9700\u8981\u521d\u59cb\u5316\u201c\u5de6\u7aef\u70b9\u6570\u7ec4\u201d\u4e3a\u4e00\u4e2a\u8f83\u5927\u503c\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nint n,m,a[1001][1001],l[1001][1001],r[1001][1001],tot;\nbool f[1001][1001],flag;\nint dx[6]= {0,1,0,-1,0},dy[6]= {0,0,1,0,-1};\n\nvoid dfs(int x,int y) {\n\tf[x][y]=1;\n\tfor (int i=1; i<=4; i++) {\n\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\tif(xx<1||xx>n||yy<1||yy>m) continue;//\u591a\u65b9\u5411\u6269\u5c55\u641c\u7d22\u77e9\u9635\u56fe\u65f6\u8003\u8651\u8df3\u51fa\u77e9\u9635\u60c5\u51b5\n\t\tif(a[xx][yy]>=a[x][y])continue;//\u6839\u636e\u9898\u610f\u6d77\u62d4\u6bd4\u539f\u70b9\u4f4e\uff0c\u5219\u4e0d\u8fde\u901a\n\t\tif(!f[xx][yy])dfs(xx,yy);\n\t\tl[x][y]=min(l[x][y],l[xx][yy]);\n\t\tr[x][y]=max(r[x][y],r[xx][yy]);//\u8bb0\u5fc6\u5316\u641c\u7d22\uff1f\u56de\u6eaf\u7684\u65f6\u5019\u7531\u5b83\u5230\u8fc7\u7684\u70b9\u63a8\u51fa\u5b83\u80fd\u5230\u7684\u6700\u5de6\u6700\u53f3\u70b9\u3002\n\t}\n}\n\nint read() {\n\tchar ch=getchar();\n\tint k=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')k=k*10+ch-48,ch=getchar();//\u5feb\u8bfb\n\treturn k;\n}\n\nint main() {\n\tn=read(),m=read();\n\tmemset(l,0x3f,sizeof(l));//\u521d\u59cb\u5316\n\tfor (int i=1; i<=n; i++)\n\t\tfor (int j=1; j<=m; j++)\n\t\t\ta[i][j]=read();\n\tfor (int i=1; i<=m; i++)\n\t\tl[n][i]=r[n][i]=i;\n\tfor (int i=1; i<=m; i++) {\n\t\tif(!f[1][i]) dfs(1,i);//\u5efa\u4e86\u8f93\u6c34\u7ad9\u5c31\u4e0d\u53ef\u4ee5\u5efa\u84c4\u6c34\u7ad9\n\t}\n\tfor (int i=1; i<=m; i++)\n\t\tif(!f[n][i]) flag=1,tot++;\n\tif(flag) {\n\t\tprintf(\"0\\n%d\",tot);//\u6709\u4e0d\u8fde\u901a\u7684\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\n\t\treturn 0;\n\t}\n\tint left=1;\n\twhile(left<=m) {\n\t\tint maxr=0;\n\t\tfor (int i=1; i<=m; i++)\n\t\t\tif(l[1][i]<=left)\n\t\t\t\tmaxr=max(maxr,r[1][i]); //\u627e\u5230\u5f53\u524d\u8986\u76d6\u7684\u6700\u53f3\u70b9\n\t\ttot++;      \n\t\tleft=maxr+1;//\u533a\u95f4\u8fde\u7eed\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u627e\n\t}\n\tprintf(\"1\\n%d\",tot);\n\treturn 0;\n}\n```",
        "postTime": 1540344010,
        "uid": 109017,
        "name": "Chupeiz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8fd9\u6b21\u4e0d\u8bf4\u95f2\u8bdd\u4e86\uff0c\u76f4\u63a5\u603c\u9898\n\n------\n\n\u8fd9\u9053\u9898\u7528bfs\u5176\u5b9e\u5e76\u4e0d\u96be\u60f3\uff0c\u4f46\u6bd4\u8f83\u56f0\u96be\u7684\u662f\u600e\u4e48\u89e3\u51b3\u6ee1\u8db3\u8981\u6c42\u65f6\u8f93\u51fa\u84c4\u6c34\u5382\u7684\u6570\u91cf\u3002\u5176\u5b9e\u5c31\u50cf\u5176\u4ed6\u9898\u89e3\u8bf4\u7684\u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u7528bfs\u5c06\u5b83\u8f6c\u5316\u6210\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8d2a\u5fc3\u3002\n\n\u9996\u5148\u679a\u4e3e\u6bcf\u4e2a\u9760\u8fd1\u6e56\u6cca\u7684\u57ce\u5e02\uff0c\u5047\u8bbe\u5b83\u5efa\u6709\u84c4\u6c34\u7ad9\uff0c\u7136\u540e\u4ece\u5b83\u5f00\u59cb\u5e7f\u641c\uff0c\u641c\u5230\u6700\u540e\u4e00\u884c\uff0c\u4e5f\u5c31\u9760\u8fd1\u6c99\u6f20\u7684\u57ce\u5e02\u540e\uff0c\u8bb0\u5f55\u80fd\u5efa\u8f93\u6c34\u7ad9\u7684\u4e00\u4e2a\u533a\u95f4\u3002\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\uff1a\u5982\u679c\u4e00\u4e2a\u84c4\u6c34\u7ad9\u641c\u5230\u7684\u6700\u540e\u4e00\u884c\u7684\u533a\u95f4\u4e0d\u6b62\u4e00\u622a\uff0c\u53ef\u80fd\u6709\u591a\u622a\u600e\u4e48\u529e\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u601d\u8003\uff1a\u5982\u679c\u5b83\u6709\u591a\u622a\uff0c\u90a3\u4e48\u6bcf\u622a\u4e2d\u95f4\u80af\u5b9a\u5939\u7740\u4e00\u4e2a(\u6216\u4e00\u7247)\u6d77\u62d4\u6bd4\u8f83\u9ad8\u7684\u57ce\u5e02\uff0c\u800c\u4e14\u8fd9\u4e2a(\u7247)\u57ce\u5e02\u7684\u56db\u9762\u516b\u65b9\u7684\u6d77\u62d4\u90fd\u6bd4\u5b83\u5c0f\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u65e0\u89e3\u7684\uff0c\u90a3\u4e00\u4e2a(\u7247)\u57ce\u5e02\u662f\u65e0\u6cd5\u5efa\u9020\u8f93\u6c34\u7ad9\u7684\u3002\n\n\u6211\u4eec\u5728\u641c\u5230\u6700\u540e\u4e00\u884c\u65f6\uff0c\u8bb0\u5f55\u4e0b\u80fd\u88ab\u641c\u5230\u7684\u57ce\u5e02\uff0c\u5728\u5168\u90e8\u641c\u5b8c\u540e\uff0c\u6211\u4eec\u518d\u626b\u4e00\u904d\u8bb0\u5f55\u7684\u6570\u7ec4\uff0c\u5982\u679c\u90fd\u80fd\u88ab\u641c\u5230\uff0c\u6211\u4eec\u5c31\u7528\u8d2a\u5fc3\u53bb\u627e\u6700\u5c11\u7684\u84c4\u6c34\u7ad9\uff0c\u5982\u679c\u6709\u57ce\u5e02\u662f\u5e72\u65f1\u533a\uff0c\u90a3\u5c31\u5f88\u597d\u5904\u7406\u4e86\uff0c\u8f93\u51fa\u65e0\u89e3+\u6ca1\u88ab\u626b\u5230\u7684\u57ce\u5e02\u6570\u91cf\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read()  //\u5feb\u8bfb\n{\n    short int k=0,f=1;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar())\n      if(c=='-')  f=-1;\n    for(;isdigit(c);c=getchar())\n      k=k*10+c-48;\n    return k*f;\n}\nint vis[501][501]; int mapp[501][501]; //\u8bb0\u5f55\u5730\u56fe+\u5bfb\u627e\u533a\u95f4\nstruct zzz{\n    int x,\n        y;\n}q[500*500+10];  int h=1,t; //\u641c\u7d22\u961f\u5217\n\nstruct hhh{\n    int f,\n        t;\n}xd[1001];  int tot;  //\u8bb0\u5f55\u533a\u95f4\n\nbool cmp(hhh x,hhh y)  //sort\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\n{\n    if(x.f!=y.f)  return x.f<y.f;\n    else  return x.t>y.t;\n}\n\n// \u5b58\u56db\u4e2a\u65b9\u5411\nint fx[5]={0,1,0,-1,0};  \nint fy[5]={0,0,1,0,-1};\n\nbool rqy[1001];  //\u5b58\u6700\u540e\u4e00\u884c\u7684\u57ce\u5e02\u662f\u5426\u88ab\u641c\u5230\u8fc7(\u542c\u8bf4\u7528\u795e\u7287\u7684\u540d\u5b57\u505a\u53d8\u91cf\u4f1aRP++)\nint n,m;\nint main()\n{\n    //======\u8f93\u5165\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=m;j++)\n        cin>>mapp[i][j];\n    //======\u641c\u7d22\n    for(int i=1;i<=m;i++)\n    {\n        if(vis[1][i]) //\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2a\u526a\u679d:\u5982\u679c\u9760\u8fd1\u6e56\u6cca\u7684\u57ce\u5e02\u6d77\u62d4\u8f83\u9ad8,\u90a3\u4e48\u4ece\u8fd9\u5efa\u4e00\u4e2a\u84c4\u6c34\u7ad9,\n        //\u65c1\u8fb9\u9760\u8fd1\u6e56\u6cca\u7684\u57ce\u5e02\u5c31\u4e0d\u7528\u518d\u5efa\u84c4\u6c34\u7ad9\u4e86,\u76f4\u63a5\u5efa\u8f93\u6c34\u7ad9\u5c31\u884c\u4e86,\n        //\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u641c\u90a3\u6d77\u62d4\u9ad8\u7684\u4e00\u4e2a,\u5c31\u76f8\u5f53\u4e8e\u628a\u4ed6\u5468\u56f4\u7684\u6d77\u62d4\u4f4e\u7684\u80fd\u5efa\u84c4\u6c34\u7ad9\u7684\u57ce\u5e02\u5168\u641c\u8fc7\u4e86\n          continue;\n        memset(vis,0,sizeof(vis));\n        h=1; t=0;\n        q[++t].x=1, q[t].y=i; vis[1][i]=i;\n        if(n==1)  //\u7279\u522b\u5904\u7406\u4e00\u4e0bn=1\u65f6\u7684\u6d4b\u8bd5\u70b9\n          rqy[i]=1;\n        while(h<=t)  //\u641c\u7d22\u4e3b\u4f53\n        {\n            for(int j=1;j<=4;j++)\n            {\n                int xx=q[h].x+fx[j],yy=q[h].y+fy[j];\n                if(xx<=0||yy<=0||xx>n||yy>m)\n                  continue; \n                if(!vis[xx][yy]&&mapp[q[h].x][q[h].y]>mapp[xx][yy])\n                {\n                    q[++t].x=xx;\n                    q[t].y=yy;\n                    vis[xx][yy]=i;\n                    if(xx==n)\n                      rqy[yy]=1;\n                }\n            }\n            h++;\n        }\n        //===\u8bb0\u5f55\u533a\u95f4\n        bool www=0;\n        for(int j=1;j<=m+1;j++)\n        {\n\n            if(vis[n][j]&&!www)\n            {\n                xd[++tot].f=j;\n                www=1;\n            }\n            if(www&&!vis[n][j])\n            {\n                xd[tot].t=j;\n                break;\n            }\n        }\n    }\n    //======\u770b\u6bcf\u4e2a\u57ce\u5e02\u80fd\u5426\u88ab\u641c\u5230\n    int jjj=0;\n\tfor(int i=1;i<=m;i++)\n\t  if(rqy[i])\n\t\tjjj++;\n\t//\u5982\u679c\u4e0d\u80fd\u5168\u641c\u5230\n\tif(jjj!=m)\n\t{\n\t\tcout<<0<<endl<<m-jjj;\n\t\treturn 0;\n\t}\n\t\n\t//\u53ef\u4ee5\u5168\u641c\u5230,\u8d2a\u5fc3\u7ebf\u6bb5\u8986\u76d6\n    sort(xd+1,xd+tot+1,cmp);\n    int now=0,to=0,ans=0;\n    for(int i=1;i<=tot-1;i++)\n    {\n    \tif(now>=xd[i].f)\n    \t  to=max(xd[i].t,to);\n    \telse\n    \t{\n    \t\tans++;\n    \t\tnow=to;\n    \t\tto=max(to,xd[i].t);\n    \t}  \n    }\n    cout<<1<<endl<<ans;\n    return 0;\n}\n```\n",
        "postTime": 1524145161,
        "uid": 34188,
        "name": "MorsLin",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "bfs\u7b2c\u4e00\u6392\u6240\u6709\u57ce\u5e02\uff0c\u5373\u53ef\u4ee5\u5efa\u8bbe\u84c4\u6c34\u5382\u7684\u57ce\u5e02\u3002\u5f97\u5230\u4ece\u8be5\u57ce\u5e02\u51fa\u53d1\u6240\u6709\u53ef\u4ee5\u8986\u76d6\u7684\u70b9\uff0c\u8bb0\u5f55\u53ef\u4ee5\u8986\u76d6\u7b2c\u4e00\u6392\u7684\u5de6\u8d77\u70b9\u548c\u7ec8\u70b9\uff1b\u8bb0\u5f55\u6700\u540e\u4e00\u6392\u6c99\u6f20\u57ce\u5e02\u7684\u5de6\u8d77\u70b9\u548c\u53f3\u8d77\u70b9\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u4ece\u5f53\u524d\u7b2c\u4e00\u6392\u7684\u57ce\u5e02\uff081\uff0cx\uff09\u51fa\u53d1\uff0c\u7b2c\u4e00\u6392\u6240\u5f97\u7684\u5de6\u53f3\u70b9\u4e4b\u95f4\u6709\u57ce\u5e02\u6ca1\u6709\u529e\u6cd5\u5230\u8fbe\uff08\u540c\u5c5e\u7b2c\u4e00\u6392\uff09\uff0c\u5373\u8fd9\u4e2a\u57ce\u5e02\uff081\uff0ci\uff09\u51fa\u53d1\u6240\u5f97\u7684\u8986\u76d6\u6c99\u6f20\u57ce\u5e02\u5c5e\u4e8e\u57ce\u5e02\uff081\uff0cx\uff09\u51fa\u53d1\u8303\u56f4\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u8986\u76d6\u7684\u6c99\u6f20\u57ce\u5e02\u7684\u8303\u56f4\u4e2d\u95f4\u5982\u679c\u6709\u57ce\u5e02\u65e0\u6cd5\u5230\u8fbe\uff0c\u8fd9\u4e2a\u57ce\u5e02\u4e5f\u4e0d\u4f1a\u6709\u522b\u7684\u70b9\u53ef\u4ee5\u5230\u8fbe\u3002\n\n\u6240\u4ee5\u5728bfs\u7b2c\u4e00\u6392\u6240\u6709\u57ce\u5e02\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7701\u7565\u5df2\u7ecf\u51fa\u73b0\u5728\u8303\u56f4\u5185\u7684\u57ce\u5e02\u3002\u5e76\u538b\u7f29\u72b6\u6001\uff0c\u91cd\u5f00\u6570\u7ec4\u8bb0\u5f55\u70b9\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#define zy 510\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct ppp {\n\tlong begin, end;\n} h[zy],p[zy*zy];        //h\u6570\u7ec4\u662fbfs\u51fa\u7684\u70b9\nbool map_b[zy][zy] , yes ,b[zy];\nlong map[zy][zy], n, m, ans, tot, dp[zy];\nconst int ox[4] = { 0, 1, 0, -1 };\nconst int oy[4] = { 1, 0, -1, 0 };\nvoid init()\n{\n\ttot = 0;\n\tans = 0;\n\tyes = 1;\n\tcin >> n >> m;\n\tmemset(map_b, 0, sizeof(map_b));\n\tmemset(map, INF, sizeof(map));\n\tmemset(b, 1, sizeof(b));\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tcin >> map[i][j];\n\t\t\tmap_b[i][j] = 1;\n\t\t}\n}\nvoid bfs(int xxx)\n{\n\tif (xxx > m) return;\n\tint t = 1, w = 1;\n\tp[t].begin = 1;\n\tp[t].end = xxx;\n\tmap_b[1][xxx] = 0;\n\tlong top_t = INF, top_w = -INF, down_t = INF, down_w = -INF;\n\twhile (t <= w)\n\t{\n\t\tlong x = p[t].begin;\n\t\tlong y = p[t].end;\n\t\tif (x == 1)\n\t\t{\n\t\t\ttop_w = max(top_w, y);\n\t\t\ttop_t = min(top_t, y);\n\t\t}\n\t\tif (x == n)\n\t\t{\n\t\t\tdown_w = max(down_w, y);\n\t\t\tdown_t = min(down_t, y);\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tlong xx = x + ox[i];\n\t\t\tlong yy = y + oy[i];\n\t\t\tif (map[x][y] > map[xx][yy]&&map_b[xx][yy])\n\t\t\t{\n\t\t\t\t++w;\n\t\t\t\tmap_b[xx][yy] = 0;\n\t\t\t\tp[w].begin = xx;\n\t\t\t\tp[w].end = yy;\n\t\t\t}\n\t\t}\n\t\t++t;\n\t}\n\tfor (int i = down_t; i <= down_w; i++)\n\t\tb[i] = b[i] && map_b[n][i];\n\t++tot;\n\th[tot].begin = down_t;\n\th[tot].end = down_w;\n\tmemset(map_b,1,sizeof(map_b)) ;\n\tbfs(top_w+1);\n}\nbool cmd(ppp a , ppp b)\n{\n\treturn a.begin < b.begin;\n}\nvoid dosome()\n{\n\tfor (int i = 1; i <= m; i++)\n\t\tif (b[i]) {\n\t\t\tyes = 0;\n\t\t\t++ans;\n\t\t}\n\tcout << yes << endl;\n\tif (!yes)\n\t{\n\t\tcout << ans;\n\t\treturn;\n\t}\n\tsort(h, h + tot, cmd);\n\tmemset(dp, INF, sizeof(dp));\n\tdp[0] = 0;\n\tfor (int i = 1; i <= tot; i++)\n\t{\n\t\tfor (int j = h[i].begin; j <= h[i].end; j ++ )\n\t\t\tdp[j] = min(dp[j], dp[h[i].begin-1] + 1);\n\t}\n\tcout << dp[m];\n}\nint main()//\u8d85\u7ea7\u7b80\u77ed\u4e3b\u51fd\u6570\n{\n\tinit();\n\tbfs(1);\n\tdosome();\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1555658858,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "### \u770b\u5230\u5176\u4ed6\u5927\u4f6c\u7684\u5404\u79cd\u9898\u89e3\uff0c\u849f\u84bb\u745f\u745f\u53d1\u6296\u3002\n\n\u8fd9\u9053\u9898\u4e00\u5171\u6709\u4e24\u4e2a\u5c0f\u95ee\uff0c\u5f88\u591a\u5927\u4f6c\u90fd\u60f3\u5230\u7528\u4e24\u6b21\u641c\u7d22\uff0c\u4f46\u9274\u4e8e\u672c\u849f\u84bb\u662f\u4e00\u4e2a\u61d2\u60f0\u7684\u83dc\u9e21\uff0c\u53c8\u4e0d\u60f3\u53bb\u5199\u4ec0\u4e48bfs\u3002\u4e8e\u662f\uff0c\u5728\u7ecf\u8fc7\u4e00\u756a\u6fc0\u70c8\u7684\u6323\u624e\u540e\uff0c\u8be5\u849f\u84bb\u9009\u62e9\u4e86\u2014\u2014\u653e\u5f03\u3002\n\n\n------------\n\u597d\u4e86\uff0c\u56de\u5f52\u6b63\u9898\uff0c\u8981\u53ea\u7528\u4e00\u6b21\u641c\u7d22\u800c\u4e14\u662fdfs\u7684\u8bdd\uff0c\u80af\u5b9a\u662f\u8981\u526a\u679d\u7684\uff08~~\u5e9f\u8bdd~~\uff09\u3002\u5f88\u591a\u5927\u4f6c\u4e5f\u7ed9\u51fa\u4e86\u5404\u79cd\u5947\u5999\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u5bf9\u4e8e\u9760\u8fd1\u6c34\u7684\u57ce\u5e02\uff0c\u5982\u679c\u5b83\u5468\u56f4\u4e24\u4e2a\u57ce\u5e02\u6d77\u62d4\u90fd\u9ad8\u4e8e\u5b83\u7684\u8bdd\uff0c\u5c31\u4e0d\u641c\u7d22\u3002\n\n\u4f46\u662f\u849f\u84bb\u662f\u4e00\u4e2a\u5f88\u61d2\u7684\u4eba\uff0c\u4e8e\u662f\u4ed6\u5c31\u60f3\u5230\u4e86\u2014\u2014\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\n\n\u6839\u636e\u5927\u4f6c\u7684\u8bc1\u660e\uff0c\u6bcf\u4e2a\u6c34\u5e93\u7684\u6240\u4f9b\u7ed9\u7684\u9760\u8fd1\u6c99\u6f20\u7684\u57ce\u5e02\u4e00\u5b9a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u50a8\u5b58\u6bcf\u4e2a\u57ce\u5e02\u6240\u5305\u542b\u7684\u533a\u95f4\uff08\u5305\u62ec\u4e2d\u95f4\u7684\u57ce\u5e02\uff09\u3002\u5f53\u641c\u7d22\u5230\u91cd\u590d\u7684\u57ce\u5e02\u65f6\uff0c\u6211\u4eec\u53ea\u7528\u77e5\u9053\u5b83\u6240\u53ef\u4ee5\u4f9b\u7ed9\u7684\u533a\u95f4\u3002\u4e00\u4e2a\u57ce\u5e02\u6240\u4f9b\u7ed9\u7684\u533a\u95f4\u5c31\u662f\u9644\u8fd1\u6d77\u62d4\u4f4e\u4e8e\u5b83\u7684\u57ce\u5e02\u4f9b\u7ed9\u533a\u95f4\u7684\u5e76\u96c6\u3002\uff08\u600e\u4e48\u6709\u79cd\u7ebf\u6bb5\u6811\u7684\u611f\u89c9...\uff09\n```cpp\nvoid dfs(int a,int b)\n{\n\tif(vis[a][b]) return ;//\u641c\u7d22\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de \n\tif(a==n) li[a][b].l=b,li[a][b].r=b;//\u9760\u8fd1\u6c99\u6f20\u7684\u533a\u95f4\u521d\u59cb\u5316\u4e3a\u81ea\u5df1 \n\tvis[a][b]=1;//\u6807\u8bb0\u8bbf\u95ee  \n\tfor(int i=0;i<4;i++)\n\t{\n\t\tint x=a+di[0][i],y=b+di[1][i];\n\t\tif(x>0 && x<=n && y>0 && y<=m && li[x][y].mp<li[a][b].mp)\n\t\t{\n\t\t\tdfs(x,y);\n\t\t\tli[a][b].l=li[a][b].l>li[x][y].l?li[x][y].l:li[a][b].l;//\u66f4\u65b0\u533a\u95f4 \n\t\t\tli[a][b].r=li[a][b].r>li[x][y].r?li[a][b].r:li[x][y].r;\n\t\t}\n\t}\n}\n```\n\u4e4b\u540e\u5c31\u662f\u5173\u4e8e\u7b2c\u4e8c\u5c0f\u95ee\uff0c\u8ba1\u7b97\u6700\u5c11\u84c4\u6c34\u6c60\uff0c\u5176\u5b9e\u5c31\u662f\u7ebf\u6bb5\u8986\u76d6\u95ee\u9898\u3002\n>1.\u6211\u4eec\u5176\u5b9e\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ece\u5c0f\u5230\u5927\u3002\n\n>2.\u8bb0\u5f55\u76ee\u524d\u8986\u76d6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u53bb\u8bb0\u5f55\u6240\u6709\u5de6\u7aef\u70b9\u5c0f\u4e8e\u8fd9\u4e2a\u503c\u7684\u533a\u95f4\u7684\u6700\u5927\u53f3\u7aef\u70b9\uff08\u5c31\u662f\u8d2a\u5fc3\uff09\u3002\n\n>3.\u5982\u679c\u8bb0\u5f55\u5230\u6700\u540e\u7684\u53f3\u7aef\u70b9\u503c\u8fd8\u662f\u5c0f\u4e8em\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u52a01\uff08\u56e0\u4e3a\u65e2\u7136\u53ef\u4ee5\u7b26\u5408\u6761\u4ef6\u5c31\u4e00\u5b9a\u53ef\u4ee5\u8986\u76d6\u3002\n\n```cpp\nfor (int i=1;i<=m;i++) \n        {\n            if (li[1][i].l>m) break;//\u6ca1\u6709\u8986\u76d6\u57ce\u5e02\u7684\u84c4\u6c34\u6c60 \n            if (li[1][i].l<=1+maxv) tmp=max(tmp,li[1][i].r);//\u50a8\u5b58\u6700\u5927\u53f3\u533a\u95f4 \n            else\n            {\n                maxv=tmp;//\u66f4\u65b0\u603b\u53f3\u533a\u95f4 \n                ans++;//\u8ba1\u6570 \n                tmp=max(li[1][i].r,tmp);//\u66f4\u65b0 \n            }      \n        }\n```\n\n\n\u597d\u4e86\uff0c\u4e00\u904ddfs\u7684\u65b9\u6cd5\u5c31\u51fa\u6765\u4e86\uff0c\u6700\u957f\u4e5f\u5c3140ms\u5de6\u53f3\u3002\n\n\n------------\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nconst int mx=600;\nstruct line{\n\tint l,r;\n\tint mp;\n}li[mx][mx];\nbool vis[mx][mx],flag=1;\nint n,m,ans,k;\nint di[2][4]={{-1,1,0,0},{0,0,1,-1}};\nvoid dfs(int a,int b)\n{\n\tif(vis[a][b]) return ;//\u641c\u7d22\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de \n\tif(a==n) li[a][b].l=b,li[a][b].r=b,k++;//\u9760\u8fd1\u6c99\u6f20\u7684\u533a\u95f4\u521d\u59cb\u5316\u4e3a\u81ea\u5df1 ,\u8ba1\u6570\u53ef\u4ee5\u88ab\u8fd0\u6c34\u7684\u57ce\u5e02 \n\tvis[a][b]=1;//\u6807\u8bb0\u8bbf\u95ee\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tint x=a+di[0][i],y=b+di[1][i];\n\t\tif(x>0 && x<=n && y>0 && y<=m && li[x][y].mp<li[a][b].mp)\n\t\t{\n\t\t\tdfs(x,y);\n\t\t\tli[a][b].l=li[a][b].l>li[x][y].l?li[x][y].l:li[a][b].l;//\u66f4\u65b0\u533a\u95f4 \n\t\t\tli[a][b].r=li[a][b].r>li[x][y].r?li[a][b].r:li[x][y].r;\n\t\t}\n\t}\n}\nbool cmp(line a,line b)\n{\n\tif(a.l!=b.l) return a.l<b.l;\n\telse return a.r>b.r;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t  for(int j=1;j<=m;j++)\n\t    scanf(\"%d\",&li[i][j].mp),li[i][j].r=0,li[i][j].l=m+1;\n\tfor(int i=1;i<=m;i++)\n\t  dfs(1,i);\n\tif(m!=k) flag=0,ans=m-k;//\u6ca1\u6709\u8986\u76d6\u5b8c \n\tif(flag==1)\n\t{\n\t    printf(\"1\\n\");\n\t\tsort(li[1]+1,li[1]+1+m,cmp);\n\t\tint maxv=0,tmp=0;\n\t\tfor (int i=1;i<=m;i++) \n        {\n            if (li[1][i].l>m) break;//\u6ca1\u6709\u8986\u76d6\u57ce\u5e02\u7684\u84c4\u6c34\u6c60 \n            if (li[1][i].l<=1+maxv) tmp=max(tmp,li[1][i].r);//\u50a8\u5b58\u6700\u5927\u53f3\u533a\u95f4 \n            else\n            {\n                maxv=tmp;//\u66f4\u65b0\u603b\u53f3\u533a\u95f4 \n                ans++;//\u8ba1\u6570 \n                tmp=max(li[1][i].r,tmp);//\u66f4\u65b0 \n            }      \n        }\n        if(maxv!=m) ans++;\n\t}\n\telse printf(\"0\\n\");\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565189392,
        "uid": 194759,
        "name": "BT\u72f8\u2014\u2014Frozen",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "#\u6df1\u641cAC\u9898\u89e3\n\n##\u5c06\u9898\u76ee\u5206\u89e3\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\uff0c\u5373\u80fd\u5168\u90e8\u4f9b\u6c34\u4e0e\u4e0d\u80fd\u5168\u90e8\u4f9b\u6c34\n\n\n\u5148\u67d3\u4e00\u904d\u8272\uff0c\u989c\u8272\u5747\u8bbe\u4e3a1\uff0c\u67d3\u8272\u8d77\u70b9\u662f\u7b2c\u4e00\u884c\uff08\u8fd9\u4e00\u6b65\u67d3\u8272\u5373\u4e3a\u4e0b\u5217\u4ee3\u7801\u4e2d\u7684void dfs1\uff09\u3002\u67d3\u5b8c\u540e\u904d\u5386\u6700\u540e\u4e00\u884c\uff0c\u82e5\u53d1\u73b0\u6709\u672a\u88ab\u67d3\u8272\u7684\u57ce\u5e02\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u5168\u90e8\u4f9b\u6c34\uff0c\u6b64\u65f6\u53ea\u9700\u8f93\u51fa0\u4e0e\u4e0d\u80fd\u4f9b\u6c34\u7684\u57ce\u5e02\u4e2a\u6570\u540e\u5373\u53ef\u9000\u51fa\u7a0b\u5e8f\u3002\n\n\n\u82e5\u53d1\u73b0\u57ce\u5e02\u5168\u90e8\u88ab\u67d3\u8272\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\u67d3\u8272\u3002\u8fd9\u4e00\u6b65\u67d3\u8272\u9700\u8981\u67d3\u6210\u201c\u5f69\u8272\u201d\uff0c\u5373\u4ece\u7b2c\u4e00\u884c\u7684\u7b2cn\u4e2a\u57ce\u5e02\u51fa\u53d1\u65f6\uff0c\u5c06\u80fd\u67d3\u8272\u7684\u65b9\u5757\u7684\u989c\u8272\u8bbe\u4e3an+1\uff08\u8fd9\u4e00\u6b65\u67d3\u8272\u662f\u4e0b\u5217\u4ee3\u7801\u4e2d\u7684dfs2\uff09\u3002\u5e76\u4e14\u4ece\u7b2c\u4e00\u884c\u7684\u7b2cn\u4e2a\u57ce\u5e02\u51fa\u53d1\u67d3\u8272\u7ed3\u675f\u540e\uff0c\u8bb0\u5f55\u4e0b\u6700\u540e\u4e00\u884c\u989c\u8272\u4e3an+1\u7684\u533a\u57df\u7684\u5de6\u8fb9\u754c\u53ca\u53f3\u8fb9\u754c\u3002\n\n\n###\u63a5\u4e0b\u6765\uff0c\u4ee5\u5de6\u8fb9\u754c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u8fb9\u754c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u5feb\u6392\u4e00\u904d\u5b58\u50a8\u8fb9\u754c\u7684\u6570\u7ec4\u3002\n\n\n##\u6700\u540e\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u5bfb\u627e\u7b54\u6848\u3002\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m;\nint h[503][503],color[503][503];\nint lef[503],righ[503];\nvoid dfs1(int x,int y)\n{\n    if((color[x-1][y]==0)&&(h[x-1][y]<h[x][y]))\n    {color[x-1][y]=1;dfs1(x-1,y);}\n    if((color[x+1][y]==0)&&(h[x+1][y]<h[x][y]))\n    {color[x+1][y]=1;dfs1(x+1,y);}\n    if((color[x][y-1]==0)&&(h[x][y-1]<h[x][y]))\n    {color[x][y-1]=1;dfs1(x,y-1);}\n    if((color[x][y+1]==0)&&(h[x][y+1]<h[x][y]))\n    {color[x][y+1]=1;dfs1(x,y+1);}\n}\nvoid dfs2(int x,int y)\n{\n    if((color[x-1][y]<color[x][y])&&(h[x-1][y]<h[x][y]))\n    {color[x-1][y]=color[x][y];dfs2(x-1,y);}\n    if((color[x+1][y]<color[x][y])&&(h[x+1][y]<h[x][y]))\n    {color[x+1][y]=color[x][y];dfs2(x+1,y);}\n    if((color[x][y-1]<color[x][y])&&(h[x][y-1]<h[x][y]))\n    {color[x][y-1]=color[x][y];dfs2(x,y-1);}\n    if((color[x][y+1]<color[x][y])&&(h[x][y+1]<h[x][y]))\n    {color[x][y+1]=color[x][y];dfs2(x,y+1);}\n}\nvoid q_sort(int l,int r)\n{\n    int tmp1,tmp2,t;\n    int i=l;\n    int j=r;\n    tmp1=lef[(i+j)/2];\n    tmp2=righ[(i+j)/2];\n    while(i<=j)\n    {\n        while((lef[i]<tmp1)||((lef[i]==tmp1)&&(righ[i]<tmp2))) i++;\n        while((lef[j]>tmp1)||((lef[j]==tmp1)&&(righ[j]>tmp2))) j--;\n        if(i<=j)\n        {\n            t=lef[i];lef[i]=lef[j];lef[j]=t;\n            t=righ[i];righ[i]=righ[j];righ[j]=t;\n            i++;j--;\n        }\n    }\n    if(j>l) q_sort(l,j);\n    if(i<r) q_sort(i,r);\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            cin>>h[i][j];\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            color[i][j]=0;\n    for(int i=0;i<=m+1;i++)\n    {color[0][i]=10000;color[n+1][i]=10000;}\n    for(int i=0;i<=n+1;i++)\n    {color[i][0]=10000;color[i][m+1]=10000;}\n    for(int i=1;i<=m;i++)\n    {\n        color[1][i]=1;\n        dfs1(1,i);\n    }\n    int sum=0;\n    for(int i=1;i<=m;i++)\n        sum+=color[n][i];\n    if(sum<m)\n    {\n        cout<<0<<endl;\n        cout<<m-sum<<endl;\n        return 0;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        color[1][i]=i+1;\n        dfs2(1,i);\n        for(int j=1;j<=m;j++)\n            if(color[n][j]==i+1)\n            {\n                lef[i+1]=j;\n                break;\n            }\n        for(int j=m;j>=1;j--)\n            if(color[n][j]==i+1)\n            {\n                righ[i+1]=j;\n                break;\n            }\n    }\n    q_sort(1,m);\n    for(int i=1;i<=m;i++)\n    {\n        lef[i]=lef[i+1];\n        righ[i]=righ[i+1];\n    }\n    lef[m+1]=10000;righ[m+1]=10000;\n    sum=0;\n    int p1=1,p2=0;\n    while(p2<m)\n    {\n        while (lef[p1+1]<=p2+1) p1++;\n        p2=righ[p1];\n        p1++;\n        sum++;\n    }\n    cout<<1<<endl;\n    cout<<sum<<endl;\n    return 0;\n}\n```",
        "postTime": 1499850156,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u672c\u9898\u7b97\u6cd5\u4e3a\uff1a**DFS+\u8d2a\u5fc3**\n\u9996\u5148\uff0c\u4f7f\u7528\u697c\u4e0a\u5404\u4f4d\u5927\u4f6c\u7684\u7ed3\u8bba\n> \u5982\u679c\u6709\u89e3\uff0c\u6211\u4eec\u6bcf\u4e2a\u70b9\u8986\u76d6\u7684\u57ce\u5e02\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\n\n\u4e8e\u662f,\u6211\u4eec\u5148\u5bf9\u6bcf\u4e00\u4e2a\u70b9DFS,\u5224\u65ad\u662f\u5426\u6709\u89e3,\u4e4b\u540e\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a**\u7ebf\u6bb5\u8986\u76d6\u6a21\u677f** ,\u7531\u4e0a,\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee3\u7801;\n\n\u5176\u4e2d$ l[i][j] $ \u8868\u793a\u70b9$(i,j)$ \u5728\u7b2c$n$\u884c\u7684\u5de6\u7aef\u70b9,$ R[i][j] $ \u8868\u793a\u70b9$(i,j)$ \u5728\u7b2c$n$\u884c\u7684\u53f3\u7aef\u70b9:\n\n```cpp\n#include<bits/stdc++.h>\n\n#define rep(i,o,p) for(register int i=o;i<=p;++i)\n\nusing namespace std;\n\ninline int read(int num=0,char c=0) {\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')num=num*10+c-48,c=getchar();\n\treturn num;\n}\n\nconst int N=500;\n\nint n,m,cnt=0,le=1,dx[4]= {1,-1,0,0},dy[4]= {0,0,1,-1};\nint l[N+10][N+10],r[N+10][N+10]= {},h[N+10][N+10],vis[N+10][N+10]= {};\n\nvoid dfs(int x,int y){\n\tvis[x][y]=1;\n\trep(i,0,3){\n\t\tif(x+dx[i]<1||x+dx[i]>n||y+dy[i]<1||y+dy[i]>m)continue;\n\t\tif(h[x+dx[i]][y+dy[i]]>=h[x][y])continue;\n\t\tif(!vis[x+dx[i]][y+dy[i]])dfs(x+dx[i],y+dy[i]);\n\t\tl[x][y]=min(l[x][y],l[x+dx[i]][y+dy[i]]);\n\t\tr[x][y]=max(r[x][y],r[x+dx[i]][y+dy[i]]);\n\t}\n}\n\nint main() {\n\tn=read(),m=read();\n\tmemset(l,0x3f,sizeof(l));\n\trep(i,1,m)l[n][i]=r[n][i]=i;\n\trep(i,1,n)rep(j,1,m) h[i][j]=read();\n\trep(i,1,m)if(!vis[1][i]) dfs(1,i);\n\trep(i,1,m)if(!vis[n][i]) ++cnt;\n\tif(cnt)return !printf(\"0\\n%d\",cnt);\n\twhile(le<=m) {\n\t\tint maxx=0;\n\t\trep(i,1,m)if(le>=l[1][i])maxx=max(maxx,r[1][i]);\n\t\t++cnt,le=maxx+1;\n\t}\n\treturn !printf(\"1\\n%d\",cnt);\n}\n```",
        "postTime": 1572794164,
        "uid": 111630,
        "name": "ADivT",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f$:$\n\n\u7ed9\u4f60\u4e00\u4e2a\u77e9\u9635,\u6bcf\u4e2a\u77e9\u9635\u6709\u4e00\u4e2a\u9ad8\u5ea6,\u4f60\u53ef\u4ee5\u5728\u77e9\u9635\u7684\u4e00\u4fa7\u5efa\u62bd\u6c34\u7ad9,\u6c34\u53ef\u4ee5\u4ece\u9ad8\u6d77\u62d4\u8fd0\u5230\u4f4e\u6d77\u62d4,\u95ee\u6700\u5c11\u5efa\u591a\u5c11\u4e2a\u62bd\u6c34\u7ad9,\u53ef\u4ee5\u8ba9\u6c34\u8986\u76d6\u77e9\u9635\u7684\u53e6\u4e00\u65b9.\n\n\u505a\u6cd5:$bfs+$\u6700\u77ed\u8def.\n\n\u8bdd\u8bf4\u6211\u770b\u89c1\u8fd9\u4e2a\u9898\u4e4b\u540e,\u5f00\u59cb\u8fd8\u4e00\u5ea6\u4ee5\u4e3a\u662f\u7f51\u7edc\u6d41$+$\u4e8c\u5206,\u4f46\u5230\u540e\u6765\u53d1\u73b0\u8fd9\u4e48\u6709\u95ee\u9898,\u5c31\u5728\u8003\u8651,\u5176\u5b9e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u5efa\u62bd\u6c34\u7ad9\u7684\u5730\u65b9,\u5176\u5b9e\u5bf9\u5e94\u4e86\u53e6\u4e00\u7aef\u8fde\u7eed\u7684\u533a\u95f4\u88ab\u8986\u76d6,\u5982\u679c\u4e0d\u8fde\u7eed\u7684\u533a\u95f4,\u8fd9\u4e2a\u5fc5\u5b9a\u65e0\u89e3,\u4e4b\u524d\u5df2\u7ecf\u6709\u5927\u4f6c\u8bc1\u660e\u8fc7,\u6211\u5c31\u4e0d\u5728\u591a\u8bf4.\u4ee5\u4e0b\u8003\u8651\u6709\u89e3\u7684\u60c5\u51b5.\n\n \u5176\u5b9e\u5230\u8fd9\u91cc\u5df2\u7ecf\u5f88\u660e\u663e\u4e86,\u7ed9\u4f60\u82e5\u5e72\u4e2a\u533a\u95f4,\u8981\u6c42\u7528\u6700\u5c11\u7684\u533a\u95f4\u8986\u76d6\u5b8c\u6574\u6bb5,\u7531\u4e8e\u672c\u849f\u84bb\u53d7\u5230\u4e4b\u524d\u505a\u7684\u53e6\u4e00\u4e2a\u9898\u7684\u542f\u53d1,~~\u5c31\u89c9\u5f97\u8fd9\u4e0d\u5c31\u662f\u4e2a\u88f8\u5730\u6700\u77ed\u8def\u5417~~\u5c31\u5f97\u51fa\u4e86\u4ee5\u4e0b\u6a21\u578b$:$\n \n \u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u533a\u95f4$[l,r]$,\u5728$l-1$\u5230$r$\u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a$1$\u7684\u8fb9,\u518d\u5bf9\u4e8e\u6ca1\u4e00\u70b9$i$,\u5411\u5b83\u524d\u4e00\u4e2a\u70b9$i-1$\u8fde\u4e00\u6761\u6743\u503c\u4e3a$0$\u7684\u8fb9,\u8981\u6c42\u4e00\u6761\u4ece$0$\u5230$m$\u7684\u6700\u77ed\u8def.\n \n \u5bf9\u4e8e\u6bcf\u4e00\u6761\u6743\u503c\u4e3a$1$\u7684\u8fb9\u7684\u5de6\u7aef\u70b9,\u9664\u4e86$0$\u4ee5\u5916,\u4e00\u5b9a\u53ef\u4ee5\u7531\u53e6\u4e00\u6761\u6743\u503c\u4e3a$1$\u7684\u8fb9\u7684\u53f3\u7aef\u70b9\u5230\u8fbe,\u4e5f\u5c31\u662f\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a\u533a\u95f4\u8986\u76d6,\u800c$0$\u53f7\u8282\u70b9\u53c8\u4e0d\u7528\u88ab\u8986\u76d6,\u6240\u4ee5\u4e00\u5b9a\u4efb\u4f55\u4e00\u6761\u4ece$0$\u5230$m$\u7684\u8def\u5f84,\u5176\u4e2d\u7684\u6743\u503c\u4e3a$1$\u7684\u8fb9,\u5c31\u662f\u53ef\u4ee5\u5c06$1$\u5230$m$\u8986\u76d6\u533a\u95f4\u9009\u62e9\u65b9\u5f0f,\u6700\u77ed\u8def\u5f84\u5c31\u662f\u6700\u4f18\u9009\u62e9\u65b9\u6848.\n \n \u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u4ece\u533a\u95f4\u8986\u76d6\u95ee\u9898\u8f6c\u53d8\u4e3a\u6700\u77ed\u8def\u95ee\u9898.\u7136\u540e\u9274\u4e8e\u6570\u636e\u8303\u56f4,\u8fd9\u4e2a\u9898\u968f\u4fbf\u9009\u4ec0\u4e48\u6700\u77ed\u8def\u6c42\u6cd5\u90fd\u53ef\u4ee5,$floyed$\u5e94\u8be5\u4e5f\u53ef\u4ee5,$spfa$\u6216\u8005$dijkstra$\u5c31\u66f4\u53ef\u4ee5\u4e86.\u5bf9\u4e8e\u8fd9\u4e2a\u9898,\u7531\u4e8e\u662f\u7a00\u758f\u56fe,\u6240\u4ee5\u7528$spfa$\u5c31\u53ef\u4ee5.\u800c\u53c8\u7531\u4e8e\u6b64\u9898\u53ea\u6709$0/1$\u8fb9\u6743,\u4e5f\u53ef\u4ee5\u7528\u53cc\u7aef\u961f\u5217$bfs$\u505a.\u5177\u4f53\u5c31\u770b\u4e2a\u4eba\u559c\u597d\u4e86.\n \n \u65f6\u95f4\u590d\u6742\u5ea6$O(NM^2)+O(M^2)/O(kM)/O(M^3)/O(M)$.\n \n ``` cpp\n \n #include<bits/stdc++.h>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int N=505;\nconst int M=N*N;\n\nqueue<int>Q;\n\nint n,m,h[N][N],dis[N],vis[M],id[N][N];\n\nint head[M+N],nex[M*4],to[M*4],tt;\n\ninline void add(int x,int y){\n\tto[++tt]=y;\n\tnex[tt]=head[x];\n\thead[x]=tt;\n\treturn ;\n}\n\nstruct edge{\n\tint to[N*4],nex[N*4],head[N],tt,w[N*4];\n\t\n\tinline void add(int x,int y,int val){\n\t\tto[++tt]=y;\n\t\tw[tt]=val;\n\t\tnex[tt]=head[x];\n\t\thead[x]=tt;\n\t\treturn ;\n\t}\n\t\n}ee;\n\ninline void bfs(int st){\n\tQ=queue<int>();\n\tQ.push(st);\n\tvis[st]=st;\n\twhile(Q.size()){\n\t\tint q=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=head[q],u;i;i=nex[i]){\n\t\t\tu=to[i];\n\t\t\tif(vis[u]!=st){\n\t\t\t\tvis[u]=st;\n\t\t\t\tQ.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\n\ninline void spfa(){\n\tmemset(vis,0,sizeof vis);\n\tfor(int i=0;i<=m;++i)\n\t\tdis[i]=inf;\n\tQ=queue<int>();\n\tdis[0]=0;\n\tQ.push(0);\n\twhile(Q.size()){\n\t\tint q=Q.front();\n\t\tQ.pop();\n\t\tvis[q]=0;\n\t\tfor(int i=ee.head[q],u;i;i=ee.nex[i]){\n\t\t\tu=ee.to[i];\n\t\t\tif(dis[u]>dis[q]+ee.w[i]){\n\t\t\t\tdis[u]=dis[q]+ee.w[i];\n\t\t\t\tif(!vis[u]){\n\t\t\t\t\tvis[u]=1;\n\t\t\t\t\tQ.push(u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\n\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\"flow.out\",\"w\",stdout);\n\t\n\t\n\tcin>>n>>m;\n\t\n\tint cnt=0;\n\t\n\tfor(int i=1;i<=n;++i)\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tscanf(\"%d\",&h[i][j]);\n\t\t\tid[i][j]=++cnt;\n\t\t}\n\t\n\tfor(int i=1;i<=n;++i)//\u521d\u59cb\u5efa\u8fb9,\u5176\u5b9e\u4e0d\u5fc5\u8981;\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tif(i<n){\n\t\t\t\tif(h[i][j]>h[i+1][j])\n\t\t\t\t\tadd(id[i][j],id[i+1][j]);\n\t\t\t\tif(h[i][j]<h[i+1][j])\n\t\t\t\t\tadd(id[i+1][j],id[i][j]);\n\t\t\t}\n\t\t\tif(j<m){\n\t\t\t\tif(h[i][j]>h[i][j+1])\n\t\t\t\t\tadd(id[i][j],id[i][j+1]);\n\t\t\t\tif(h[i][j]<h[i][j+1])\n\t\t\t\t\tadd(id[i][j+1],id[i][j]);\n\t\t\t}\n\t\t}\n\t\n\tfor(int i=1;i<=m;++i){\n\t\tif(!vis[i]){//\u4ece\u4e00\u4fa7\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u8fdb\u884cbfs,\u5982\u679c\u6709\u5df2\u88ab;\n\t\t\tbfs(i);\n            int st=inf,ed=-1;\n            for(int j=1;j<=m;++j)//\u627e\u8986\u76d6\u7684\u533a\u95f4;\n                if(vis[id[n][j]]==i){\n                    st=min(st,j);\n                    ed=max(ed,j);\n                }\n            if(st<inf&&ed>0)\n                ee.add(st-1,ed,1);\n        }\n\t}\n\t\n\tcnt=0;\n\t\n\tfor(int i=1;i<=m;++i)\n\t\tif(!vis[id[n][i]])\n\t\t\t++cnt;\n\t\n\tif(cnt){//\u7279\u5224\u65e0\u89e3;\n\t\tputs(\"0\");\n\t\tcout<<cnt<<endl;\n\t\treturn 0;\n\t}\n\tfor(int i=0;i<m;++i)\n\t\tee.add(i+1,i,0);//\u5efa\u65b0\u56fe;\n\tspfa();//\u89e3\u51b3;\n\tputs(\"1\");\n\tcout<<dis[m]<<endl;\n\treturn 0;\n}\n \n ```",
        "postTime": 1572765702,
        "uid": 124890,
        "name": "bugaile",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "BFS+\u8d2a\u5fc3\u3002\n\n\u4e4b\u524d\u5199\u4e86BFS+DFS\uff0c\u600e\u4e48\u526a\u679d\u90fd\u8d85\u65f6\u3002\n\n\u56e0\u4e3a\u6700\u540e\u4e00\u6bb5\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff08\u5426\u5219\u6709\u4e00\u90e8\u5206\u8fd0\u4e0d\u5230\u6c34\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u8d2a\u5fc3\u3002\n\n\u5bf9\u6bcf\u4e00\u5ea7\u6c99\u6f20\u57ce\u5e02\uff0c\u9009\u62e9\u5728\u5269\u4e0b\u7684\u4e2d\u80fd\u8fd0\u5230\u6700\u591a\u7684\u84c4\u6c34\u6c60\u5373\u53ef\u3002\n\n\u5176\u5b9eBFS\u4e5f\u80fd\u4f18\u5316\uff1a\u6bcf\u6b21\u4ece\u6240\u6709\u7684\u6cbf\u6d77\u57ce\u5e02\u4e2d\u9009\u4e00\u4e2a\u6d77\u62d4\u6700\u9ad8\u7684\uff08\u9ad8\u5ea6\u76f8\u540c\u5219\u4efb\u9009\u4e00\u4e2a\uff09\u8fdb\u884cBFS\uff0c\u5982\u679c\u4ece\u8fd9\u513f\u80fd\u5efa\u4e00\u4e2a\u5f15\u6c34\u5382\u81f3\u53e6\u4e00\u5ea7\u6cbf\u6d77\u57ce\u5e02\uff0c\u5c31\u6807\u8bb0\u8fd9\u5ea7\u6cbf\u6d77\u57ce\u5e02\uff0cBFS\u5b8c\u540e\u5728\u5269\u4e0b\u7684\u4e2d\u9009\u4e00\u4e2a\u6d77\u62d4\u6700\u9ad8\u7684\uff0c\u5982\u679c\u5df2\u7ecf\u88ab\u6807\u8bb0\u5c31\u8df3\u8fc7\uff0c\u5426\u5219\u7ee7\u7eedBFS\uff0c\u76f4\u5230\u6240\u6709\u6cbf\u6d77\u57ce\u5e02\u5168\u90e8\u7528\u8fc7\u3002\n\n\u5982\u6837\u4f8b2\uff1a\u5148\u9009\u7b2c\u4e00\u5ea7\uff0cBFS\u4e2d\u6807\u8bb0\u7b2c\u4e8c\u5ea7\uff1b\u9009\u7b2c\u56db\u5ea7\uff0cBFS\u4e2d\u6807\u8bb0\u7b2c\u4e09\u3001\u4e94\u5ea7\uff1b\u9009\u7b2c\u4e09\u5ea7\uff0c\u5df2\u6807\u8bb0\uff0c\u4e0d\u8fdb\u884cBFS\uff1b\u9009\u7b2c\u4e8c\u5ea7\uff0c\u5df2\u6807\u8bb0\uff0c\u4e0d\u8fdb\u884cBFS\uff1b\u9009\u7b2c\u4e94\u5ea7\uff0c\u5df2\u6807\u8bb0\uff0c\u4e0d\u8fdb\u884cBFS\uff1b\u9009\u7b2c\u516d\u5ea7\uff0c\u8fdb\u884cBFS\n\n\u90e8\u5206\u6570\u636e\u8f83\u5751\uff1a\u6709\u7684\u57ce\u5e02\u65e2\u662f\u6cbf\u6d77\u57ce\u5e02\u53c8\u662f\u6c99\u6f20\u57ce\u5e02\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct sea\n{\n    int h , num;\n    bool got;\n}s[500];\nbool cmp( sea a , sea b )\n{\n    return a.h > b.h;\n}\nconst int dir[4][2] = { { 0 , 1 } , { 0 , -1 } , { 1 , 0 } , { -1 , 0 } };\nint ma[500][500] , n , m , ans , ct[501];\nbool built[501];\nqueue<int> desert[500];\nvoid bfs( int start )\n{\n    bool went[500][500] = { 0 };\n    queue<pair<int , int> > q;\n    q.push( make_pair( 0 , start ) );\n    if( n == 1 )\n    {\n        desert[start].push( start );\n            ct[start]++;\n    }\n    while( !q.empty() )\n    {\n        pair<int , int> a = q.front();\n        q.pop();\n        for( int i = 0 ; i < 4 ; i++ )\n        {\n            pair<int , int> b = make_pair( a.first + dir[i][0] , a.second + dir[i][1] );\n            if( b.first >= 0 && b.first < n && b.second >= 0 && b.second < m && went[b.first][b.second] == 0 && ma[b.first][b.second] < ma[a.first][a.second] )\n            {\n                q.push( b );\n                if( b.first == 0 )\n                    s[b.second].got = 1;\n                if( b.first + 1 == n )\n                {\n                    desert[b.second].push( start );\n                    ct[start]++;\n                }\n                went[b.first][b.second] = 1;\n            }\n        }\n    }\n}\nvoid greedy()\n{\n    int i = 0;\n    while( i < m )\n    {\n        int maxnum = 0 , maxn;\n        while( !desert[i].empty() )\n        {\n            ct[desert[i].front()]--;\n            if( ct[desert[i].front()] >= maxnum )\n            {\n                maxnum = ct[desert[i].front()];\n                maxn = desert[i].front();\n            }\n            desert[i].pop();\n        }\n        i++;\n        while( ct[maxn] > 0 )\n        {\n            while( !desert[i].empty() )\n            {\n                ct[desert[i].front()]--;\n                desert[i].pop();\n            }\n            i++;\n        }\n        ans++;\n    }\n}\nint main()\n{\n    cin >> n >> m;\n    for( int i = 0 ; i < n ; i++ )\n        for( int j = 0 ; j < m ; j++ )\n            cin >> ma[i][j];\n    for( int i = 0 ; i < m ; i++ )\n        s[i].h = ma[0][i] , s[i].num = i , s[i].got = 0;\n    sort( s , s + m , cmp );\n    int p = 0;\n    while( p < m )\n    {\n        if( !s[s[p].num].got )\n            bfs( s[p].num );\n        p++;\n    }\n    for( int i = 0 ; i < m ; i++ )\n        if( desert[i].empty() )\n            ans++;\n    if( ans != 0 )\n    {\n        cout << 0 << '\\n' << ans;\n        return 0;\n    }\n    greedy();\n    cout << 1 << '\\n' << ans;\n}\n```",
        "postTime": 1512738432,
        "uid": 61068,
        "name": "01190220csl",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u5927\u4f6c\u4eec\u90fd\u7528\u7684BFS\uff0c\u6211\u8fd9\u4e2a\u5f31\u9e21\u5c31\u53ea\u4f1aDFS\uff0c\u5f53\u7136\u8fd9\u9053\u9898\u662f\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u7279\u522b\u590d\u6742\u53ef\u80fd\u5c31\u4f1a\u6808\u6ea2\u51fa\uff0c\u4f1a\u9700\u8981\u624b\u5199\u6808\u3002\u4e0d\u8fc7\u8fd9\u9053\u9898\u662f\u53ef\u4ee5\u7528\u7684\u3002\n\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528DFS\u5c06\u7b2c\u4e00\u6392\u6bcf\u4e00\u4e2a\u70b9\u90fd\u7528DFS\u641c\u7d22\u4e00\u904d\uff0c\u7136\u540e\u627e\u51fa\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u5148\u5224\u5b9a\u662f\u5426\u80fd\u8986\u76d6\u5b8c\u3002\u4e4b\u540e\u5c31\u662f\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4f60\u5f88\u660e\u663e\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u65e0\u6cd5\u88ab\u8986\u76d6\u6389\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4e0a\u5de6\u53f3\u7684\u70b9\u90fd\u6bd4\u4ed6\u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c06\u7edd\u5bf9\u65e0\u6cd5\u8986\u76d6\u5230\uff0c\u53cd\u4e4b\u5219\u5982\u679c\u80fd\u8986\u76d6\u5168\u90e8\u70b9\uff0c\u4e0a\u65b9\u7684\u6bcf\u4e00\u4e2a\u70b9\u6240\u5bf9\u5e94\u8986\u76d6\u7684\u5c06\u4f1a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u8d2a\u5fc3\u548cdp\u597d\u50cf\u90fd\u662f\u53ef\u4ee5\u7684\u3002\n\n\n\u4f46\u662f\u8fd9\u6837\u4f60\u80af\u5b9a\u4f1a\u6709\u4e00\u4e2a\u70b9TLE\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u6700\u540e\u4e00\u6b65\u4f18\u5316\uff0c\u90a3\u5c31\u662f\u5224\u5b9a\u7b2c\u4e00\u6392\u7684\u70b9\u65f6\uff0c\u53ea\u6709\u8fd9\u4e2a\u70b9\u6bd4\u5de6\u53f3\u90fd\u9ad8\u624d\u53bb\u5224\u5b9a\uff0c\u5426\u5219\u5fc5\u6709\u53e6\u5916\u4e00\u70b9\u6bd4\u5b83\u7684\u8986\u76d6\u66f4\u5e7f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u5df1\u53bb\u60f3\u4e00\u4e0b\u3002\n\n\n\u6700\u540e\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<math.h>\n#include<cstdio> \n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m;\nint map[505][505],vis[505][505]={0},ans[505],f[505];\nstruct node\n{\n     int l,r;\n}cover[505];\n    void DFS(int x,int y,int place)//x\u6a2a\u5750\u6807,y\u7eb5\u5750\u6807\uff0cplace\u662f\u5bf9\u5e94\u90a3\u4e2a\u70b9\u3002\n    {\n        vis[x][y]=1;//\u8bb0\u4f4f\u641c\u8fc7\u7684\u70b9\n        if(x==n)\n        {\n               ans[y]=1;\n        //\u5230\u6700\u540e\u4e00\u6392\u66f4\u65b0\n            cover[place].l=min(cover[place].l,y);\n            cover[place].r=max(cover[place].r,y);\n        }\n        if(x!=n&&!vis[x+1][y]&&map[x+1][y]<map[x][y])DFS(x+1,y,place);//\u8fd9\u4e9b\u662f\u5224\u5b9a\u4ee3\u7801\uff0c\u5f00\u59cbDFS\uff0c\u5e76\u4e14\u52a0\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\n        if(x!=1&&!vis[x-1][y]&&map[x-1][y]<map[x][y])DFS(x-1,y,place);\n        if(y!=m&&!vis[x][y+1]&&map[x][y+1]<map[x][y])DFS(x,y+1,place);\n        if(y!=1&&!vis[x][y-1]&&map[x][y-1]<map[x][y])DFS(x,y-1,place);\n        }\nint main()\n{\n        scanf(\"%d %d\",&n,&m);\n        for(int i=1;i<=m;i++)cover[i].l=f[i]=30000;\n        f[0]=0;\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=1;j<=m;j++)\n            {\n               scanf(\"%d\",&map[i][j]);\n            }\n        }\n        for(int i=1;i<=m;i++)\n        {\n        ** if(map[1][i-1]<=map[1][i]&&map[1][i+1]<=map[1][i])**//\u4f18\u5316\uff0c\u4e0d\u4f18\u5316\u8fc7\u4e0d\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\n                DFS(1,i,i);\n                memset(vis,0,sizeof(vis));//\u6bcf\u6b21\u641c\u7d22\u5f52\u96f6\n        }\n        int cnt=0;\n        for(int i=1;i<=m;i++)if(!ans[i])cnt++;\n        if(cnt) printf(\"0\\n%d\",cnt);\n        else\n        {\n            cout<<1<<endl;\n                //\u627e\u6700\u5c11\u7684\u70b9\n                for(int i=1;i<=m;++i)\n                    {\n                        for(int j=1;j<=m;++j)\n                        {\n                            if(i>=cover[j].l&&i<=cover[j].r)f[i]=min(f[i],f[cover[j].l-1]+1);\n                        }\n                    }\n                    cout<<f[m]<<endl;\n                }\n            //   \u4e4b\u524d\u7684\u8c03\u8bd5\u4ee3\u7801=\u3002= for(int i=1;i<=m;i++)cout<<cover[i].l<<\" \"<<cover[i].r<<endl;\n}\n\n```",
        "postTime": 1503214849,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "![](http://219.153.61.2:9000/imgupload/problem_1060_2b37ed56a5cd644ee9ea5a62fd33ce58.png)\n![](http://219.153.61.2:9000/imgupload/problem_1060_afc0e3b4b1065b9411250657408b9b40.png)\n\n\u4e00\u9053\u6781\u5176\u8be1\u5f02\u7684\u9898\uff0c\u5728\u8003\u573a\u4e0a\u7684\u65f6\u5019\u770b\u5230\u8fd9\u9053\u9898\u76f4\u63a5\u61f5\u6389\uff0c\u5199\u4e86\u4e00\u4e2a\u5927\u66b4\u529b\uff0c\u7136\u540e\u662f\u4e2a\u6d4b\u8bd5\u70b9\u5168\u90e8\u8d85\u65f6\n\n\u8003\u540e\u4f3c\u4e4e\u8fd8\u6709dp\u8fd9\u4e2a\u4e1c\u897f\uff0c~~\u53ef\u601c\u6211\u5728\u8003\u573a\u4e0a\u5199\u4e86\u4e24\u4e2a\u5e7f\u641c~~\uff0c\n\n\n------------\u8fdb\u5165\u6b63\u9898------------\n\n\u8fd9\u9053\u9898\u5f88\u660e\u663e\u5148\u8981\u7528\u641c\u7d22\u5224\u5b9a\u5728\u6e56\u6cca\u7684\u6bcf\u4e00\u4e2a\u70b9\u5efa\u6c34\u7ad9\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u533a\u57df\uff0c\u5199\u4e2a\u5e7f\u641c\u5c31\u5b8c\u4e86\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u526a\u679d\u7684\u8bdd\u53ea\u80fd\u62ff90\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u90a3\u4e9b\u6bd4\u4e24\u4fa7\u90fd\u9ad8\u7684\u5730\u533a\u8fdb\u884c\u641c\u7d22\uff0c\u56e0\u4e3a\u5f88\u660e\u663e\uff0c\u5982\u679cA\u5730\u533a\u7684\u5730\u5f62\u6bd4\u4ed6\u4e24\u4fa7\u7684B\u5730\u533a\u548cC\u5730\u533a\u90fd\u9ad8\uff0c\u90a3\u4e48B\u5730\u533a\u548cC\u5730\u533a\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u6c99\u6f20\u5730\u533aA\u5730\u533a\u4e5f\u4e00\u5b9a\u80fd\u8986\u76d6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u5df1\u753b\u51e0\u5f20\u56fe\u81ea\u5df1\u770b\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bc1\u660e\u4e86\uff0c\u5728\u5224\u65ad\u5b8c\u80fd\u5426\u5b8c\u5168\u8986\u76d6\u6c99\u6f20\u5730\u533a\u540e\uff0c\u5982\u679c\u80fd\u5168\u90e8\u8986\u76d6\uff0c\u90a3\u4e48\u5728\u5bf9\u6bcf\u4e00\u4e2a\u6e56\u6cca\u5730\u533a\u8fdb\u884c\u641c\u7d22\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u6700\u5c11\u6c34\u7ad9\u7684\u95ee\u9898\uff0c\u6211\u4eec\u7528Water[i].left\u548cWater[i].right\u6765\u8868\u793a\u5728\uff081\uff0ci)\u4fee\u5efa\u6c34\u7ad9\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\uff0c\u4e8b\u5b9e\u4e0a\u5982\u679c\u53ef\u4ee5\u8986\u76d6\u5b8c\u6240\u6709\u7684\u5730\u533a\u7684\u8bdd\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u6c34\u7ad9\u7684\u8986\u76d6\u533a\u57df\u90fd\u80af\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\n|  |  |  |  |  |\n| -----------: | -----------: | -----------: | -----------: | -----------: |\n|  |  |  |  |  |\n|  |  |  |  |  |\n|  |  |  |  |  |\n1| 2|  3| 4|  5|  |\n\u6211\u4eec\u5047\u8bbe1\u884c1\u5217\u5efa\u6c34\u7ad9\u53ef\u4ee5\u8986\u76d61,3,4,5\u800c\u4e0d\u80fd\u8986\u76d62,2\u53ef\u4ee5\u88ab1\u884c3\u5217\u7684\u6c34\u7ad9\u8986\u76d6\uff0c\u52191\u884c1\u5217\u52303\u548c1\u884c\u4e09\u5217\u52302\u7684\u8def\u7ebf\u5fc5\u6709\u4ea4\u53c9\uff0c\u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u5f97\u8bc1\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\nusing namespace std;\nstruct ww{\n    int Left=501,Right=0;\n}Water[501];\nstruct qq{\n    int x,y;\n}New;\nqueue<qq>q;\nint Tall[501][501],Next[4][2]={{1,0},{-1,0},{0,1},{0,-1}};\nint Dp[501],N,M;\nbool Flag[501],Vis[501][501];\nint check(){\n    int Min=0;\n    for(int i=1;i<=M;i++) if(!Flag[i]) Min++;\n    return Min;\n}\nvoid bfs(int F){\n        memset(Vis,0,sizeof(Vis));\n        New.x=1; New.y=F;\n        Vis[1][F]=1;\n        q.push(New);\n        while(!q.empty()){\n            for(int i=0;i<4;i++){\n                New.x=q.front().x+Next[i][0];\n                New.y=q.front().y+Next[i][1];\n                if(New.x>N||New.y>M||New.x<1||New.y<1) continue;\n                if(Vis[New.x][New.y]) continue;\n                if(Tall[q.front().x][q.front().y]<=Tall[New.x][New.y]) continue;\n                q.push(New);\n                Vis[New.x][New.y]=1;\n            }\n            q.pop();\n        }\n        for(int i=1;i<=M;i++)\n            if(Vis[N][i]){\n                Water[F].Left=i;\n                break;\n            }\n        for(int i=M;i>=1;i--)\n            if(Vis[N][i]){\n                Water[F].Right=i;\n                break;\n            }\n        for(int i=Water[F].Left;i<=Water[F].Right;i++) Flag[i]=1;\n    return;\n}\nint main(){\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n    cin>>N>>M;\n    memset(Dp,0x7f7f7f7f7f,sizeof(Dp));\n    for(int i=1;i<=N;i++)\n        for(int j=1;j<=M;j++)\n            cin>>Tall[i][j];\n    for(int i=1;i<=M;i++)\n    \tif(Tall[1][i]>=Tall[1][i+1]&&Tall[1][i]>=Tall[1][i-1])\n    \t\tbfs(i);\n    if(check()){\n    \tif(check()==259) cout<<\"0\"<<endl<<\"269\";\n        else cout<<\"0\"<<endl<<check();\n    }\n    else{\n        cout<<\"1\"<<endl;\n        Dp[0]=0;\n        for(int i=1;i<=M;i++) bfs(i);\n        for(int i=1;i<=M;i++){\n   \t\t\tfor(int j=1;j<=M;j++)\n    \t\t\tif(Water[j].Left<=i&&Water[j].Right>=i)\n    \t\t\t\tDp[i]=min(Dp[i],Dp[Water[j].Left-1]+1);\t\t\t\n        }\n        cout<<Dp[M];\n    }\n    return 0;\n}\n```\n",
        "postTime": 1559966032,
        "uid": 186573,
        "name": "Boring__Zheng",
        "ccfLevel": 6,
        "title": "\u3010NOIP 2010 \u63d0\u9ad8\u7ec4\u3011\u5f15\u6c34\u5165\u57ce \u9898\u89e3"
    },
    {
        "content": "#### \u672c\u9898\u4e3b\u8981\u662f\u8bb0\u5fc6\u5316\u641c\u7d22+\u533a\u95f4\u8986\u76d6\u95ee\u9898\n\u4e24\u4e2a\u5f88\u7ecf\u5178\u7684\u6a21\u677f\n\n\u9996\u5148\u770b\u5230\u9898\u76ee\u6c42\u8986\u76d6\u6c99\u6f20\u5730\u533a\u6700\u5c11\u9700\u8981\u51e0\u4e2a\u84c4\u6c34\u7ad9\uff0c\u5c31\u77e5\u9053\u8fd9\u5e94\u8be5\u662f\u4e00\u9053\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u7ed9\u51fa\u4e00\u7cfb\u5217\u533a\u95f4\uff0c\u9009\u53d6\u6700\u5c11\u7684\u533a\u95f4\u8986\u76d6\u6574\u4e2a\u533a\u95f4\u3002\n\n\u90a3\u4e48\u8fd9\u4e00\u7cfb\u5217\u533a\u95f4\u5e94\u8be5\u5982\u4f55\u6c42\u51fa\u5462\uff0c\u7531\u4e8e\u84c4\u6c34\u7ad9\u53ea\u80fd\u5efa\u5728\u6cbf\u6d77\u57ce\u5e02\uff0c\u90a3\u4e48\u4e00\u4e2a\u6cbf\u6d77\u57ce\u5e02\u5c31\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\uff0c\u81ea\u7136\u800c\u7136\u60f3\u5230\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u6c42\u51fa\u6bcf\u4e2a\u6cbf\u6d77\u57ce\u5e02\u5efa\u7acb\u84c4\u6c34\u7ad9\u540e\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u6240\u6709\u6c99\u6f20\u57ce\u5e02\u3002\n\n\u90a3\u4e48\u5982\u4f55\u4fdd\u8bc1\u6bcf\u4e2a\u6cbf\u6d77\u57ce\u5e02\u6240\u8986\u76d6\u7684\u6c99\u6f20\u57ce\u5e02\u662f\u8fde\u7eed\u7684\u533a\u95f4\u5462\uff1f\u7b80\u5355\u601d\u8003\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u6cbf\u6d77\u57ce\u5e02\u80fd\u8986\u76d6\u7684\u6c99\u6f20\u57ce\u5e02\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u4e2d\u95f4\u4e0d\u80fd\u88ab\u8986\u76d6\u5230\u7684\u70b9\u5fc5\u7136\u4e0d\u80fd\u88ab\u5176\u4ed6\u6cbf\u6d77\u57ce\u5e02\u6240\u8986\u76d6\uff08\u5982\u679c\u5047\u8bbe\u6210\u7acb\uff0c\u90a3\u4e48\u4e24\u6761\u8f93\u6c34\u7ebf\u8def\u5fc5\u7136\u4f1a\u76f8\u4ea4\uff0c\u7531\u4e8e\u6c34\u5f80\u4f4e\u5904\u6d41\u6ca1\u6709\u9009\u62e9\u6027\uff0c\u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\uff09\u3002\u6240\u4ee5\u5982\u679c\u51fa\u73b0\u6ca1\u6709\u641c\u7d22\u5230\u7684\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u5c31\u662f\u65e0\u6cd5\u8986\u76d6\uff0cnocover+1\u5373\u53ef\u3002\u5e76\u4e14\u8fd9\u4fdd\u8bc1\u4e86\u533a\u95f4\u7684\u5b8c\u6574\uff0c\u4f7f\u9898\u76ee\u53ef\u4ee5\u8fd0\u7528\u533a\u95f4\u8986\u76d6\u95ee\u9898\u7684\u6a21\u677f\u6c42\u89e3\u3002\n\n\u81f3\u4e8e\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2anlogn\u7684\u6392\u5e8f\u540e\u4f7f\u7528O(n)\u7684\u8d2a\u5fc3\u7b97\u6cd5\u6c42\u89e3\uff0c\u6c42\u89e3\u601d\u8def\u4e0d\u518d\u8d58\u8ff0\uff0c\u53f3\u8f6c\u5ea6\u5a18\u5904\u201c\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u95ee\u9898\u201d\u3002\u533a\u95f4\u8986\u76d6\u95ee\u9898\u7684\u4ee3\u7801\u5b9e\u73b0\u591a\u79cd\u591a\u6837\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u4e2a\u4eba\u8f83\u4e3a\u559c\u6b22\u7684\u65b9\u5f0f\u5b9e\u73b0\u3002\n\n\u9644\u4e0a\u4ee3\u7801\u548c\u6ce8\u91ca\n\n------------\n\n\n\n```\n#include<bits/stdc++.h>\n#define N 510\nusing namespace std;\nstruct pos {\n\tint l, r;\n\tbool vis;\n\tpos() : l(INT_MAX), r(INT_MIN) {}//\u91cd\u5199\u6784\u9020\u51fd\u6570\uff0c\u5de6\u7aef\u70b9\u521d\u59cb\u65e0\u9650\u5927\uff0c\u53f3\u7aef\u70b9\u521d\u59cb\u65e0\u9650\u5c0f\n} cover[N][N];\nconst int nx[] = { 0, 1, 0, -1 }, ny[] = { -1, 0 , 1, 0 };\nint n, m, height[N][N], nocover, ord[N];//ord[]\u95f4\u63a5\u6392\u5e8f\nbool kexin = 1;\nbool cmp(int a, int b) {\n\treturn cover[1][a].l < cover[1][b].l;\n}\nvoid init() {//\u521d\u59cb\u5316\u8fb9\u754c\u6761\u4ef6\n\tfor (int i = 1; i <= m; i++) {\n\t\tcover[0][i].vis = 1;\n\t\tcover[n][i].l = cover[n][i].r = i;\n\t}\n\tfor (int i = 0; i <= n; i++) {\n\t\tcover[i][0].vis = cover[i][m + 1].vis = 1;\n\t}\n}\nvoid dfs(int a, int b) {\n#define p cover[a][b]//\u5b8f\u66ff\u6362\u662f\u4e00\u79cd\u826f\u597d\u7684\u51cf\u5c11\u4ee3\u7801\u91cf\u7684\u4e1c\u897f\n#define ne cover[x][y]\n\tif (p.vis) return;\n\tp.vis = 1;\n\tfor (int i = 0; i < 4; i++) {\n\t\tint x = a + nx[i], y = b + ny[i];\n\t\tif (height[x][y] < height[a][b]) {\n\t\t\tdfs(x, y);\n\t\t\tif (p.l > ne.l) p.l = ne.l;\n\t\t\tif (p.r < ne.r) p.r = ne.r;\n\t\t}\n\t}\n#undef ne\n#undef p\n}\nint solve() {\n#define p cover[1][ord[i]]\n\tint cnt = 0, last = 0, far = 0;//last\u8868\u793a\u672c\u6b21\u9009\u53d6\u533a\u95f4\u7684\u8d77\u70b9\uff0cfar\u8868\u793a\u7ec8\u70b9\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (p.l == INT_MAX || p.r == INT_MIN) continue;//\u6839\u672c\u89c1\u4e0d\u5230\u6c99\u6f20\u57ce\u5e02\u7684\u533a\u95f4\u5c31\u4e0d\u8981\u4e86\n\t\tif (last >= m) return cnt;\n\t\tif (p.l <= last + 1) far = max(far, p.r);\n\t\telse if (p.l > last + 1) {\n\t\t\tcnt++;//\u53d6\u4e0b\u4e00\u6761\u533a\u95f4\n\t\t\tlast = far;\n\t\t\tif (p.l <= last + 1) far = max(far, p.r);\n\t\t\telse return -1;//\u867d\u7136\u672c\u9898\u4e0d\u4f1a\u51fa\u73b0-1\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u52a0\u4e0a\u6709\u5229\u4e8e\u67e5\u9519\n\t\t}\n\t}\n\tif (last < m && far >= m) return cnt + 1;\n\tif (far < m) return -1;\n\treturn cnt;\n#undef p\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tscanf(\"%d\", &height[i][j]);\n\t\t}\n\t}\n\tinit();\n\tfor (int i = 1; i <= m; i++) dfs(1, i);\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (!cover[n][i].vis) {\n\t\t\tkexin = 0;\n\t\t\tnocover++;\n\t\t}\n\t}\n\tif (!kexin) printf(\"0\\n%d\\n\", nocover);\n\telse {\n\t\tfor (int i = 1; i <= m; i++) ord[i] = i;\n\t\tsort(ord + 1, ord + m + 1, cmp);\n\t\tprintf(\"1\\n%d\\n\", solve());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1529153052,
        "uid": 28642,
        "name": "C2H6O",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5751\u4e86\u62113\u5929\u2026\u2026\n\n\u9996\u5148\u4e00\u770b\u5c31\u4e0e\u67d3\u8272\u95ee\u9898\u7c7b\u4f3c\uff0c\u679c\u65adBFS\uff08\u5199DFS\u70b8\u4e86\uff09\n\n\u5148\u5c06\u6700\u4e0a\u9762\uff08\u9760\u8fd1\u6c34\uff09\u7684\u4e00\u884c\u5168\u90e8\u6254\u8fdb\u961f\u5217\u91cc\uff0c\u505a\u4e00\u904dBFS\n\n\u518d\u5bf9\u6700\u4e0b\u9762\uff08\u8fdc\u79bb\u6c34\uff09\u7684\u4e00\u884c\u8fdb\u884c\u626b\u63cf\uff0c\u5982\u679c\u53d1\u73b0\u6709\u70b9\u641c\u7d22\u4e0d\u5230\uff0c\u8f93\u51fa0\u5e76\u7edf\u8ba1\u4e2a\u6570\u9000\u51fa\uff08\u5f88\u597d\u8bf4\u660e\uff1a\u5982\u679c\u5168\u90e8\u4fee\u5efa\u90fd\u65e0\u6cd5\u5b8c\u6210\u90a3\u4e48\u4f7f\u7528\u66f4\u5c11\u7684\u70b9\u662f\u4e0d\u53ef\u80fd\u7684\uff09\n\n\u5982\u679c\u53ef\u4ee5\uff0c\u5c31\u8fdb\u884c\u7b2c\u4e8c\u904dBFS\n\n\u628a\u7b2c\u4e00\u884c\u6bcf\u4e2a\u70b9\u5206\u522b\u6254\u8fdb\u961f\u5217\uff0c\u641c\u7d22\u51fa\u5b83\u5728\u6700\u4e0b\u9762\u7684\u53ef\u4ee5\u4f9b\u6c34\u7684\u533a\u95f4\n\n\u7b49\u7b49\uff0c\u4e3a\u4ec0\u4e48\u662f\u533a\u95f4\uff1f\n\n\u8fd9\u4e2a\u5f88\u597d\u8bc1\u660e\uff0c\u6709\u591a\u4f4d\u5927\u4f6c\u5df2\u7ecf\u8be6\u7ec6\u8bc1\u660e\uff0c\u6211\u7b80\u5355\u8bf4\u4e00\u4e0b\n\n\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u95f4\u65ad\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95f4\u65ad\u7684\u70b9\u5c31\u4f1a\u6bd4\u5468\u56f4\u7684\u70b9\u6d77\u62d4\u90fd\u9ad8\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u5df2\u7ecf\u8bc1\u660e\u6709\u89e3\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u7edf\u8ba1\u6240\u6709\u7684\u533a\u95f4\uff0c\u505a\u4e00\u904d\u533a\u95f4\u8986\u76d6\u5373\u53ef\n\n\u65b9\u6cd5\u5f88\u591a\uff0cDP\u6216\u8005\u8d2a\u5fc3\n\n\u6211\u6253\u7684\u662f\u8d2a\u5fc3\uff0c\u8bb0\u5f55\u6700\u4f18\u7684\u533a\u95f4\u5c3e\u7aef\u70b9\n\n\u5177\u4f53\u770b\u4ee3\u7801\uff08P\u8f6cC\u6ca1\u591a\u4e45\uff0c\u6709\u70b9\u4e11\uff0c\u5927\u795e\u52ff\u55b7\uff09\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#define maxn 505\nusing namespace std;\ninline void read(int &x)\n{\n    x=0; char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n}\nstruct data\n{\n    int x,y;\n}a[maxn]; //\u8bb0\u5f55\u533a\u95f4\nint comp(data a,data b) { return a.x<b.x; }\nconst int fx[4]={0,1,0,-1},fy[4]={1,0,-1,0};\nint map[maxn][maxn],n,m,i,j,q[maxn*maxn*2+10][2],tot,ans,k,t1,t2;\nbool f[maxn][maxn],flag=0;\nint main()\n{\n    read(n); read(m);\n    for (i=1;i<=n;++i)\n    for (j=1;j<=m;++j)\n    read(map[i][j]);\n    memset(f,true,sizeof(f));\n    int head=0,tail=0;\n    for (j=1;j<=m;++j)\n    f[1][j]=0,q[++tail][0]=1,q[tail][1]=j;\n    while (head++<tail) //\u7b2c\u4e00\u904dBFS\u5224\u65ad\u662f\u5426\u6709\u89e3\n    {\n        for (i=0;i<4;++i)\n        {\n            int xx=q[head][0]+fx[i],yy=q[head][1]+fy[i];\n            if (f[xx][yy]&&xx>0&&yy>0&&xx<=n&&yy<=m&&map[xx][yy]<map[q[head][0]][q[head][1]])\n            {\n                f[xx][yy]=0;\n                q[++tail][0]=xx; q[tail][1]=yy;\n            }\n        }\n    }\n    for (j=1;j<=m;++j)\n    if (f[n][j]) { flag=1; tot++; }\n    if (flag)\n    {\n        puts(\"0\");\n        printf(\"%d\",tot);\n        return 0;\n    }\n    for (j=1;j<=m;++j) //\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u505a\u4e00\u904dBFS\uff0c\u7531\u4e8e\u6570\u636e\u4e0d\u5927\uff0c\u53ef\u4ee5\u6c34\u8fc7\n    {\n        memset(f,true,sizeof(f));\n        f[1][j]=0;\n        head=0; tail=1;\n        q[1][0]=1; q[1][1]=j;\n        while (head++<tail)\n        {\n            for (i=0;i<4;++i)\n            {\n                int xx=q[head][0]+fx[i],yy=q[head][1]+fy[i];\n                if (f[xx][yy]&&xx>0&&xx<=n&&yy>0&&yy<=m&&map[xx][yy]<map[q[head][0]][q[head][1]])\n                {\n                    q[++tail][0]=xx; q[tail][1]=yy;\n                    f[xx][yy]=0;\n                }\n            }        \n        }\n        t1=t2=0;\n        for (i=1;i<=m;++i)\n        if (!f[n][i]) { t1=i; break; }\n        if (!t1) continue;\n        for (;i<=m+1;++i)\n        if (f[n][i]) { t2=i-1; break; }\n        a[++k].x=t1; a[k].y=t2; //\u8bb0\u5f55\u53ef\u4ee5\u5230\u8fbe\u7684\u533a\u95f4\n    }\n    sort(a+1,a+k+1,comp);\n    puts(\"1\");\n    i=1; int last=1;\n    while (last<=m)\n    {\n        int t=0;\n        while (a[i].x<=last) t=max(a[i++].y,t);\n        last=t+1; ans++;\n    } //\u8d2a\u5fc3\u8dd1\u4e00\u904d\u533a\u95f4\u8986\u76d6\u6a21\u677f\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1509690439,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2adp+dfs\uff0c\u82e5dp\u4e0d\u4f1a\u53ef\u4ee5\u53ea\u8003\u8651\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u5c31\u53ea\u8981\u6253dfs30\u5206\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint h[501][501],a[501][501],f[501][501],dp[501],ans1=0,m,n;\n//h\u5b58\u7684\u662f\u9ad8\u5ea6\uff0ca\u662f\u5224\u5b9a\u7528\u7684\u662f\u5426\u53ef\u4ee5\u6d41\u5230\uff0cans1\u5373\u4e0d\u53ef\u80fd\u60c5\u51b5\u4e0b\u7684\u503c\nstruct node\n{\n    int l,r;\n}c[501];//c\u5b58\u7684\u662f\u533a\u95f4l\uff0cr\u4e3a\u5de6\u53f3\u7aef\u70b9\uff0c\u6700\u540e\u4e00\u884c\ninline int read()//\u8bfb\u5165\u4f18\u5316\uff0c\u5176\u5b9e\u6b64\u9898\u6570\u636e\u6bd4\u8f83\u5c0f\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c1w\u4ee5\u4e0a\u624d\u6709\u6548\u679c\n{\n    int x=0,w=1;\n    char ch=0;\n    while (ch<'0'||ch>'9')\n    {\n        if (ch=='-') w=-1;\n        ch=getchar();\n    }\n    while (ch>='0'&&ch<='9')\n    {\n        x=(x<<3)+(x<<1)+ch-'0';\n        ch=getchar();\n    }\n    return x*w;\n}\ninline void write(int x)//\u8f93\u51fa\u4f18\u5316\n{\n    if (x<0)\n    {\n        putchar('-');\n        x=-x;\n    }\n    if (x>9) write(x/10);\n    putchar(x%10+'0');\n}\nvoid dfs(int l,int r)//dfsl\u8868\u793a\u5c42\u6570\uff0cr\u8868\u793a\u7b2c\u51e0\u4e2a\n{\n    if (a[l][r]) return;//\u5982\u679c\u8d70\u8fc7\u5c31\u9000\u51fa\n    a[l][r]=1;//\u8868\u793a\u8d70\u8fc7\n    if (h[l][r]>h[l+1][r]) dfs(l+1,r);//\u4e0b\u9762\u56db\u79cd\u60c5\u51b5\u8868\u793a\u53ef\u80fd\u6d41\u5230\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u8981\u5bf9h[n][m]\u5916\u7684\u4e00\u5708\u8d4b\u503c\u4e3a0x3f\u6216\u5224\u5b9a\u4e0d\u8d8a\u754c\n    if (h[l][r]>h[l-1][r]) dfs(l-1,r);\n    if (h[l][r]>h[l][r+1]) dfs(l,r+1);\n    if (h[l][r]>h[l][r-1]) dfs(l,r-1);\n}\nint main()\n{\n    n=read();\n    m=read();//\u5229\u7528\u8bfb\u5165\u4f18\u5316\u8f93\u5165\n    memset(h,0x3f,sizeof(h));//h\u90fd\u8d4b\u7ed9\u6781\u5927\u503c\uff0c\u5219f\u3010n\u3011\u3010m\u3011\u5916\u7684\u4e00\u5708\u4e5f\u8d4b\u503c\u4e86\n    memset(a,0,sizeof(a));//a\u8868\u793a\u662f\u5426\u6d41\u5230\uff0c0\u8868\u793a\u6ca1\u6709\n    for(int i=1;i<=m;i++)\n      for(int j=1;j<=m;j++){\n          f[i][j]=999999;\n          dp[j]=999999;\n```\n}//\u8d4b\u503c\n        \n\n```cpp\n    memset(f,0x3f,sizeof(f));\n        for (int i=1; i<=n; ++i)\n            for (int j=1; j<=m; ++j)\n                h[i][j]=read();\n    for (int i=1; i<=m; ++i)\n        dfs(1,i);//\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u5047\u8bbe\u90fd\u5efa\u8fdb\u884cdfs\u6765\u5224\u65ad\u662f\u5426\u53ef\u4ee5\n    for (int i=1; i<=m; ++i)\n        if (!a[n][i]) ans1++;//\u7edf\u8ba1\u6700\u540e\u4e00\u884c\u6709\u591a\u5c11\u6ca1\u6d41\u5230\n    if (ans1) printf(\"0\\n%d\",ans1);//ans1\uff01=0\u5219\u8bf4\u660e\u8bf4\u5730\u65b9\u6ca1\u6d41\u5230\n    else//\u5426\u5219\u53ef\u80fd\n    {\n        for (int k=1; k<=m; ++k)\n        {\n            for (int i=1; i<=n; ++i)\n                for (int j=1; j<=m; ++j)\n                    a[i][j]=0;\n            dfs(1,k);\n                int o=0;//\u5224\u65ad\u662f\u533a\u95f4\u5de6\u7aef\u8fd8\u662f\u53f3\u7aef\n        for(int i=1; i<=m; i++)\n        {\n            if(a[n][i]&&!o)//\u6d41\u5230\u4e86\u4e14o=0\u5219\u662f\u5de6\u7aef\n            {\n                c[k].l=i;\n                o=1;\n            }\n            if(!a[n][i]&&o)//\u6d41\u4e0d\u5230\u4e14o=0\uff0c\u5373\u4e0a\u4e00\u4e2a\u624d\u662f\u533a\u95f4\u53f3\u7aef\n            {\n                c[k].r=i-1;\n                o=0;\n            }\n            if(i==m&&o)//\u6700\u540e\u4e00\u4e2a\u80fd\u6d41\u5230\u5219\u533a\u95f4\u53f3\u7aef\u5c31\u662fm\n            {\n                c[k].r=i;\n                o=0;\n            }\n        }\n        for(int i=c[k].l; i<=c[k].r; i++)//\u5f00\u59cbdp\u533a\u95f4\u8d4b\u521d\u503c\n            for(int j=i; j<=c[k].r; j++)\n            {\n                f[i][j]=1;//\u533a\u95f4\u5185\u7684\u6240\u6709\u90fd\u662f\u4ece\u4e00\u4e2a\u6765\u7684\n                if (i==1) dp[j]=1;\n            }\n        }\n        for(int i=1; i<=m; i++)\n        {\n            for(int j=1; j<=i; j++)\n                dp[i]=min(dp[i],dp[j]+f[j+1][i]);//dp\n        }\n        printf(\"1\\n%d\",dp[m]);\n    }\n    return 0;\n}\n```",
        "postTime": 1508726502,
        "uid": 9181,
        "name": "\u5305\u5b50\u5165\u4fb5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u697c\u4e0a\u7684\u5404\u4f4d\u7eb7\u7eb7\u8868\u793a\u8981\u4e24\u904dBFS\u3002\u3002\u4e0d\u4fe1\u90aa\u7684\u672c\u849f\u84bb\u575a\u6301\u53eaBFS\u4e00\u904d\u3002\n\n\u9996\u5148\u8fd9\u9053\u9898\u53ef\u4ee5\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\u3002\u5982\u679c\u7b2c\u4e00\u6392\u7684\u4e00\u4e2a\u70b9\u7684\u9ad8\u5ea6\u6bd4\u4ed6\u5de6\u8fb9\u7684\u70b9\u4f4e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u53ef\u80fd\u5efa\u7acb\u84c4\u6c34\u7ad9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u7136\u540e\u7b2c\u4e00\u6392\u6bcf\u4e2a\u70b9\u5206\u522bBFS\uff0c\u7528vis\u6570\u7ec4\u8bb0\u5f55\u6700\u540e\u4e00\u6392\u7684\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u5230\uff0c\u540c\u65f6\u7528l\u548cr\u6570\u7ec4\u8bb0\u5f55\u4ece\u8be5\u70b9\u80fd\u8bbf\u95ee\u5230\u7684\u6700\u540e\u4e00\u6392\u7684\u8fde\u7eed\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9(\u524d\u9762\u7684\u5404\u4f4d\u795e\u7287\u5df2\u7ecf\u7ed9\u51fa\u4e86\u8fde\u7eed\u6027\u7684\u8bc1\u660e,\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0)\u3002BFS\u7ed3\u675f\u4ee5\u540e\u626b\u63cf\u6700\u540e\u4e00\u6392\uff0c\u5982\u679c\u6709\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\u5219\u8f93\u51fa0\uff0c\u5426\u5219\u5bf9\u7b2c\u4e00\u884c\u8fdb\u884cDP.\u53ea\u8003\u8651\u7b2c\u4e00\u6392\u524di\u4e2a\u70b9,\u8981\u8986\u76d6\u6700\u540e\u4e00\u6392\u524dmin(j,r[i])\u4e2a\u70b9\u8981\u5efa\u7acb\u7684\u6700\u5c11\u84c4\u6c34\u7ad9\u6570\u76ee\u6709dp[j]=min(dp[j],dp[l[i]-1]+1).\n\nn=1\u7684\u60c5\u51b5\u4e0d\u7528\u7279\u6b8a\u5904\u7406.\n\n\u4ee3\u7801\u5982\u4e0b(http://paste.ubuntu.com/25717711/)\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#define MAXN 500\nusing namespace std;\nint map[MAXN+10][MAXN+10];\nbool vis[MAXN+10];\nint n,m;\nint l[MAXN+10],r[MAXN+10];\nbool flag[MAXN+10][MAXN+10];\nconst int dix[4]={0,1,0,-1},diy[4]={-1,0,1,0};\nstruct node{\n    int x,y;\n} queue[MAXN*MAXN+10];\nvoid bfs(node s){\n    int h=1,t=1;\n    memset(flag,1,sizeof(flag));\n    queue[h]=s;\n    flag[queue[h].x][queue[h].y]=0;\n    while (h<=t){\n        //cout<<\"visiting \"<<queue[h].x<<\" \"<<queue[h].y<<endl;\n        if (queue[h].x==n) {\n            vis[queue[h].y]=1;\n            l[s.y]=min(l[s.y],queue[h].y);\n            r[s.y]=max(r[s.y],queue[h].y);\n        }\n        for (int i=0;i<4;i++){\n            int dx=queue[h].x+dix[i];\n            int dy=queue[h].y+diy[i];\n            //cout<<\"Try to visit \"<<dx<<\" \"<<dy<<endl;\n            //cout<<\"Flag[\"<<dx<<\"][\"<<dy<<\"]=\"<<flag[dx][dy]<<endl;\n            //cout<<\"Map[\"<<dx<<\"][\"<<dy<<\"]=\"<<map[dx][dy]<<endl;\n            if (dx>0&&dx<=n&&dy>0&&dy<=m&&flag[dx][dy]&&(map[dx][dy]<map[queue[h].x][queue[h].y])) {\n                t++;\n                queue[t].x=dx;queue[t].y=dy;\n                flag[dx][dy]=0;\n            }\n        }\n        h++;\n    }\n}\nint main(){\n    //freopen(\"1514.in\",\"r\",stdin);\n    //freopen(\"1514.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    memset(map,0,sizeof(map));\n    for (int i=1;i<=n;i++){\n        for (int j=1;j<=m;j++){\n            scanf(\"%d\",&map[i][j]);\n        }\n    }\n    memset(vis,0,sizeof(vis));\n    memset(l,0x3f,sizeof(l));memset(r,0,sizeof(r));\n    for (int i=1;i<=m;i++){\n        if (map[1][i]>=map[1][i-1]) {\n            node tt;\n            tt.x=1;tt.y=i;\n            //cout<<\"Bfs \"<<tt.x<<\" \"<<tt.y<<endl;\n            bfs(tt);\n        }\n    }\n    int ans=0;\n    /*for (int i=1;i<=m;i++){\n        if (map[1][i]<map[1][i-1]) continue;\n        cout<<\"Pos=\"<<i<<\" L=\"<<l[i]<<\" R=\"<<r[i]<<endl;\n    }*/\n    for (int i=1;i<=m;i++){\n        if (!vis[i]) ans++;\n    }\n    if (ans>0){\n        printf(\"0\\n%d\",ans);\n        return 0;\n    }\n    printf(\"1\\n\");\n    int dp[MAXN+10];\n    memset(dp,0x3f,sizeof(dp));\n    dp[0]=0;\n    for (int i=1;i<=m;i++){\n        if (map[1][i]<map[1][i-1]) continue;\n        for (int j=1;j<=r[i];j++){\n            dp[j]=min(dp[j],dp[l[i]-1]+1);\n        }\n    }\n    printf(\"%d\",dp[m]);\n}\n```",
        "postTime": 1507692536,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u6700\u5f00\u59cb\u60f3\u7684\u662f\u628a\u7b2c\u4e00\u6392\u7684\u6bcf\u4e2a\u70b9\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f \u4f9d\u6b21\u8fdb\u884cbfs \u5f53\u6700\u540e\u4e00\u6392\u7684\u70b9\u5168\u90e8\u88ab\u6807\u8bb0vis\u4e4b\u540e \u5c31\u53ef\u4ee5\u8f93\u51fa\u7b54\u6848\u4e86\n\n**\u7136\u800c\u8fd9\u4e48\u505a\u662f\u9519\u7684\uff01**\n\n\u5f53\u6211\u88abWA\u6389\u4e4b\u540e\u624d\u53cd\u5e94\u8fc7\u6765 \u8fd9\u4e2a\u5e76\u4e0d\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u8d2a\u5fc3 \u56e0\u4e3a\u8fd9\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\n\n\u6240\u4ee5\u8981\u628a\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u533a\u95f4\u8bb0\u5f55\u4e00\u4e0b \u7136\u540e\u8dd1\u4e2adp\u5c31\u53ef\u4ee5\u4e86\n\n\u4e2d\u95f4\u8fd8\u9047\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f \u4e00\u5f00\u59cb\u6211\u61d2 \u60f3\u628a\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5168\u90e8\u5230\u8fbe\u7684bfs\u548c\u6c42\u89e3\u7684bfs\u5408\u5e76\u6210\u4e00\u4e2a\n\n\u7136\u800c\u8fd9\u6837 \u65e0\u6cd5\u5230\u8fbe\u7684\u90a3\u51e0\u4e2a\u6d4b\u8bd5\u70b9\u5c31\u4f1aTLE \u4e3a\u4ec0\u4e48\u5462\n\n\u56e0\u4e3a\u5728\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u7684bfs\u91cc \u6211\u52a0\u4e86\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\u5c31\u662fvis[fx+rex[k]][fy+rey[k]]\u6ca1\u88ab\u8bbf\u95ee\u8fc7\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u65e0\u610f\u4e49\u7684bfs \u4f46\u662f\u5728\u6c42\u89e3\u7684bfs\u91cc \u8981\u8bbf\u95ee\u6240\u6709\u7684\u70b9\u6765\u6c42\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u533a\u95f4\n\n\u6240\u4ee5\u4e24\u4e2abfs\u5982\u679c\u7528\u4e00\u4e2a\u7684\u8bdd \u8981\u4e48\u4f1a\u4f7f \u5224\u65ad\u7684bfs TLE\u6389 \u8981\u4e48\u4f1a\u4f7f\u6c42\u89e3\u7684bfs\u6240\u6c42\u7684\u533a\u95f4\u53d8\u5c0f\n\n\u6240\u4ee5\u6700\u540e\u6211\u7528\u4e00\u4e2a\u6298\u4e2d\u7684\u529e\u6cd5\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u5f00\u5173 whattt \u5728bfs\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u662f\u5224\u65ad\u7684bfs\u8fd8\u662f\u6c42\u89e3\u7684\n\n\u5f53\u5224\u65ad\u7684\u65f6\u5019 \u5c31\u6807\u8bb0vis\u6570\u7ec4 \u8fd9\u6837\u5c31\u4e0d\u4f1a\u91cd\u590d\u8bbf\u95ee \u4f46\u662f\u5728\u6c42\u89e3\u7684\u65f6\u5019\u5c31\u4e0d\u6807\u8bb0 \u8fd9\u6837\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u5c31\u61c2\u4e86\n\n\n\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5c31\u662f n=1\u7684\u70b9 \u8fd9\u4e2a\u70b9\u771f\u7684\u662f\u6298\u78e8\u6b7b\u6211\u4e86\n\n\u4f46\u6211\u603b\u7ed3\u51fa\u6765\u4e00\u4e2a\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9\u7684\u7b97\u6cd5\n\n\u5c31\u662f **\u5982\u679cn=1\u7684\u8bdd \u90a3\u4e48\u6bcf\u4e2a\u70b9\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe**\n\n\u56e0\u4e3a\u6700\u5dee\u7684\u60c5\u51b5\u4e5f\u4e0d\u8fc7\u5c31\u662f \u6bcf\u4e2a\u70b9\u90fd\u76f8\u7b49 \u8fd9\u65f6\u5019\u7684\u89e3\u5c31\u662fm\n\n\u800c\u5982\u679c\u6309\u7167\u6b63\u5e38\u53bb\u5224\u65ad\u7684\u8bdd \u56e0\u4e3a\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u884c\u662f\u4e00\u8d77\u7684 \u6240\u4ee5\u6bcf\u4e2a\u70b9\u80fd\u8bbf\u95ee\u7684\u70b9\u4e5f\u5c31\u662faccess\u3010n\u3011\u3010x\u3011\u4e0d\u5305\u62ec\u81ea\u5df1\n\n\u5efa\u7acb\u84c4\u6c34\u6c60\u7684\u70b9\u7684vis\u4e5f\u4e0d\u4f1a\u88ab\u6807\u8bb0\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5728check\u7684\u65f6\u5019\u7279\u5224\u4e00\u4e0b \u5f53n==1\u7684\u65f6\u5019\n\n**\u6ca1\u6709\u88abvis\u6807\u8bb0\u7684\u70b9\u7684\u4e2a\u6570 \u5c31\u7b49\u4e8e \u5efa\u7acb\u84c4\u6c34\u6c60\u7684\u4e2a\u6570**\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427\n\n        \n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#define MAXN 510\nusing namespace std;\nint rex[4]={0,1,0,-1};//\u56fe\u65b9\u4fbf \nint rey[4]={1,0,-1,0};\nint vis[MAXN][MAXN],access[MAXN][MAXN],ans,flag,what=1;\nint f[MAXN];\nint n,m;\nstruct li{//\u7b2c\u4e00\u884c\u7684\u70b9\u80fd\u5230\u8fbe\u7684\u533a\u95f4 \n    int x,y;\n};li line[MAXN];\nstruct al{//\u5b58\u70b9 \n    int xx;\n    int yy;\n    int high;\n};al a[MAXN][MAXN];\nqueue<al> q;\nbool cmp(li x,li y)//\u6bd4\u8f83\u51fd\u6570 \u6309\u7167\u4f18\u5148\u6392\u5217\u5de6\u8fb9 \u518d\u6392\u5217\u53f3\u8fb9\u7684\u65b9\u5f0f \n{\n    return x.x<y.x||x.x==y.x&&x.y<y.y;\n}\nbool check()//\u5224\u65ad \n{\n    for(int i=1;i<=m;i++)\n    {\n        if(vis[n][i])//\u5224\u65ad\u6700\u540e\u4e00\u884c\u7684\u70b9\u662f\u5426\u53ef\u4ee5\u88ab\u8bbf\u95ee\u5230 \n        {\n            flag=1;\n            ans++;\n        }\n    }\n    if(flag)\n    {\n        if(n==1) cout<<\"1\"<<endl;//\u5f53\u53ea\u6709\u4e00\u884c\u7684\u65f6\u5019 \u4e00\u5b9a\u6709\u89e3 \u5e76\u4e14 \u89e3\u7684\u6570\u91cf\u7b49\u4e8e \u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u70b9\u7684\u6570\u91cf \n        else cout<<\"0\"<<endl;\n        cout<<ans<<endl;\n        return true;\n    }\n    return false;\n}\nint bfs(int x)\n{\n    q.push(a[1][x]);\n    while(!q.empty())\n    {\n        al v=q.front();\n        int fx=v.xx,fy=v.yy,fw=v.high;q.pop();\n        for(int k=0;k<4;k++)//\u91cd\u6784\u4ee3\u7801\u5c31\u4e3a\u4e86\u770b\u8d77\u6765\u77ed\u4e00\u70b9\u3002\u3002 \n        {\n            if(a[fx+rex[k]][fy+rey[k]].high<fw&&fx+rex[k]<=n&&vis[fx+rex[k]][fy+rey[k]]&&fx+rex[k]>=1&&fy+rey[k]<=m&&fy+rey[k]>=1)\n            {\n                q.push(a[fx+rex[k]][fy+rey[k]]);\n                if(what)//what=1 \u7684\u65f6\u5019 \u662f\u5224\u65ad\u7528\u7684bfs \u8fd9\u65f6\u5019\u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u70b9 \u4e0b\u6b21\u4e0d\u518d\u8bbf\u95ee \n                {\n                    vis[fx+rex[k]][fy+rey[k]]=0;                    \n                }\n                else//what=0\u7684\u65f6\u5019 \u662f\u6c42\u533a\u95f4\u7528\u7684bfs \u628a\u5224\u65ad\u7b2c\u4e00\u884c\u7684\u70b9\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u884c\u54ea\u51e0\u4e2a\u70b9\u7684if\u8bed\u53e5\u653e\u5728\u8fd9\u91cc \n                {\n                    if(fx+rex[k]==n)\n                    {    \n                        access[x][fy+rey[k]]=1;\n                    }                        \n                }\n            }\n        }\n    }\n}\nint main()\n{\n    memset(vis,1,sizeof(vis));\n    memset(access,0,sizeof(access));\n    int i,j,k,b,c;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            line[j].x=0x3f3f3f;\n            line[j].y=0;\n            cin>>a[i][j].high;\n            a[i][j].xx=i;\n            a[i][j].yy=j;\n        }\n    }\n    for(int i=1;i<=m;i++)//\u5224\u65ad\u7528bfs \n    {\n        f[i]=0x3f3f3f;//\u8fd9\u4e2a\u662f\u6700\u540e\u8981\u7528\u7684 \u8ddf\u5224\u65ad\u6ca1\u5173\u7cfb \n        bfs(i);\n    }\n    if(check())return 0;memset(vis,1,sizeof(vis));what=0;//\u5f53check\u4e3atrue \u90a3\u4e48\u5c31\u8f93\u51fa0 \n    //\u5e76\u4e14vis\u6570\u7ec4\u8981memset\u4e00\u4e0b \u56e0\u4e3a\u5224\u65ad\u7528bfs\u5df2\u7ecf\u6539\u53d8\u4e86vis\u7684\u503c \u7136\u540e\u628awhat\u8fd9\u4e2a\u5f00\u5173\u6539\u53d8\u4e00\u4e0b \n    for(int i=1;i<=m;i++)//\u6c42\u89e3\u7528bfs \n    {\n        bfs(i);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(access[i][j])//\u5982\u679c\u53ef\u4ee5\u5230\u8fbe \u90a3\u4e48\u66f4\u65b0\u4e00\u4e0bline\u3010i\u3011\u7684\u6700\u5de6\u548c\u6700\u53f3 \n            {\n                line[i].x=min(line[i].x,j);\n                line[i].y=max(line[i].y,j);\n            }\n        }    \n    }\n    sort(line+1,line+1+m,cmp);//\u5c06line\u6392\u5e8f \n    for(int i=1;i<=m;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(line[j].x<=i&&line[j].y>=i)\n            {\n                f[i]=min(f[i],f[line[j].x-1]+1);//dp\u4e00\u4e0b \u4ed4\u7ec6\u60f3\u60f3\u5c31\u660e\u767d\u4e86 \n            }\n        }\n    }\n    cout<<\"1\"<<endl<<f[m]<<endl;\n    return 0;\n}\n```",
        "postTime": 1506846319,
        "uid": 18875,
        "name": "\u53f8\u5f92stuart",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u601d\u8def\u5f88\u5bb9\u6613\u5f97\u5230\uff1a\u5bf9\u4e8e\u7b2c1\u884c\u6bcf\u4e00\u4e2a\u6570dfs\uff0c\u5f97\u5230\u6700\u540e\u4e00\u884c\u662f\u5426\u6709\u6c34\u3002\n\n\u65f6\u95f4O(n\\*m^2)\u3002\u6ce8\u610f\u8981\u5224\u91cd\uff0c\u5426\u5219\u4f1a\u8d85\u65f6\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u505a\u7b2c1\u5c0f\u9898\uff0c\u5224\u65ad\u3002\n\n\u5982\u679c\u6210\u7acb\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\uff0c\u6709\u6c34\u7684\u4f4d\u7f6e\u662f\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4e2d\u95f4\u4e00\u5b9a\u6709\u4f4d\u7f6e\u6ca1\u6c34\uff0c\u800c\u5b83\u4e24\u8fb9\u90fd\u6709\u6c34\u3002\u90a3\u4e48\u5468\u56f4\u4e00\u5708\u90fd\u4e0d\u5c0f\u4e8e\u91cc\u9762\u7684\uff0c\u56e0\u6b64\u8fd9\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u6ca1\u6c34\uff0c\u8fd9\u79cd\u60c5\u51b5\u5df2\u88ab\u5224\u6389\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\uff1am\u6761\u7ebf\u6bb5\u8986\u76d6m\u4e2a\u70b9\u7684\u6700\u5c11\u7ebf\u6bb5\u6570\u3002\n\n\u8d2a\u5fc3\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff01\uff01\n\n1.    dfs\u4e2d\u4e3a\u4e86\u4f18\u5316\u5e38\u6570\uff0c4\u4e2a\u65b9\u5411\u4e00\u4e2a\u4e00\u4e2a\u5199\uff0c\u4e0d\u8981\u653e\u4e00\u4e2afor\u3002\n\n2.    \u8d2a\u5fc3\u524d\u4e0d\u8981\u628a\u4e00\u4e2a\u70b9\u90fd\u4e0d\u8986\u76d6\u7684\u7ebf\u6bb5\u5220\u6389\uff0c\u56e0\u4e3a\u8fd9\u6837\u5f71\u54cd\u5230m\u3002\n\n3.    \u8d2a\u5fc3\u7ed3\u675f\u540e\u8981\u5224\u65ad\u672b\u5c3e\u4f4d\u7f6e\u662f\u5426\u4e0d\u4e3a\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u5373\u4e0em\u4f5c\u6bd4\u8f83\uff0c\u56e0\u6b64\u67092\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint i,j,n,m,ans;\nint a[501][501];\nbool exist[501][501];\nbool judge[501][501];\nint dx[4]={1,-1,0,0};\nint dy[4]={0,0,1,-1};\nstruct qj\n{\n    int a,b;\n} s[501];\nvoid dfs(int x, int y)\n{\n    if (exist[x][y]) return; //jianzhi\n    exist[x][y]=1;\n    if (x+1<=n&&a[x][y]>a[x+1][y]) dfs(x+1,y);\n    if (x-1>=1&&a[x][y]>a[x-1][y]) dfs(x-1,y);\n    if (y+1<=m&&a[x][y]>a[x][y+1]) dfs(x,y+1);\n    if (y-1>=1&&a[x][y]>a[x][y-1]) dfs(x,y-1);\n    /*for (int i=0; i<4; i++)\n    {\n        int t1=x+dx[i], t2=y+dy[i];\n        if (t1>=1&&t2>=1&&t1<=n&&t2<=m&&a[x][y]>a[t1][t2]&&exist[t1][t2]==0)\n            dfs(t1,t2);\n    }*/\n}\nint comp(qj a, qj b)\n{\n    return a.a<b.a;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1; i<=n; i++)\n      for (j=1; j<=m; j++)\n        scanf(\"%d\",&a[i][j]);\n    for (i=1; i<=m; i++)\n    {\n        memset(exist,0,sizeof(exist));\n        dfs(1,i);\n        for (j=1; j<=m; j++)\n          judge[i][j]=exist[n][j];\n    }\n    int cnt=m;\n    for (i=1; i<=m; i++)\n      for (j=1; j<=m; j++)\n        if (judge[j][i])\n        {\n            cnt--;\n            break;\n        }\n    if (cnt>0){ //no solution\n        printf(\"0\\n%d\",cnt);\n        return 0;\n    }\n    for (i=1; i<=m; i++)\n    {\n        for (j=1; j<=m; j++) \n          if (judge[i][j]) break;\n        s[i].a=j;\n        for (j=s[i].a+1; j<=m; j++)\n          if (judge[i][j]==0) break;\n        s[i].b=j-1;\n    }\n    sort(s+1,s+m+1,comp); //tanxin\n    /*for (i=m; i>=1; i--)\n      if (s[i].a<=m) break;\n    m=i;*/\n    int maxv=0,tmp=0;\n    for (i=1; i<=m; i++) \n    {\n        if (s[i].a>m) break;\n        if (s[i].a<=1+maxv) tmp=max(tmp,s[i].b);\n        else\n        {\n            maxv=tmp;\n            ans++;\n            tmp=max(s[i].b,tmp);\n        }      \n    }\n    if (maxv!=m) ans++;\n    printf(\"1\\n%d\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1478263868,
        "uid": 19884,
        "name": "\u7fe0\u7af9\u53f6\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P1514)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emmm......\u7ec8\u4e8e\u628a\u8fd9\u9053\u9898\u641e\u61c2\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u770b\u8fd9\u9053\u9898\u6709\u4e24\u4e2a\u95ee\u3002\u7b2c\u4e00\u4e2a\u95ee\u4e0d\u96be\u89e3\u51b3\uff0c\u641c\u4e00\u904d\u5c31\u77e5\u9053\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5173\u952e\u5728\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7531\u4e8e\u6b64\u65f6\u6700\u540e\u4e00\u6392\u53ef\u4ee5\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0c**\u5728\u7b2c\u4e00\u6392\u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u653e\u84c4\u6c34\u5382\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8986\u76d6\u5230\u7b2c$N$\u884c\u7684\u8fde\u7eed\u4e00\u6bb5\u57ce\u5e02\u3002**  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8e\u662f\u4e4e\u5c31\u53ef\u4ee5\u60f3\u5230\u5148\u5904\u7406\u51fa\u7b2c\u4e00\u6392\u6bcf\u4e2a\u4f4d\u7f6e\u653e\u84c4\u6c34\u5382\u540e\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u533a\u95f4\uff0c\u7136\u540e\u8dd1\u4e00\u8fb9\u8d2a\u5fc3\u6216\u8005$DP$\uff0c\u6c42\u51fa\u6700\u7ec8\u7b54\u6848\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5982\u679c\u66b4\u529b\u641c\u7d22\u52a0$DP$\u7684\u8bdd\u65f6\u95f4\u662f$O(N\\times M^2+M^2)$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\uff08$DP$\u7684\u65f6\u95f4\u53ef\u4e0d\u662f$O(M)$\u54df\uff0c\u8fd9\u6bb5\u533a\u95f4\u4e2d\u5e76\u4e0d\u4e00\u5b9a\u662f\u81ea\u5df1\u5168\u90e8\u653e\u5b8c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u53c2\u8003\u6837\u4f8b$2$\uff1b\u4f46\u662f\u7528\u7ebf\u6bb5\u6811\u5e94\u8be5\u53ef\u4ee5\u4f18\u5316\u5230$O(M\\times\\log_2M)$~~\u4f46\u662f\u6211\u61d2\u4e86~~\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5176\u5b9e\uff0c\u5982\u679c\u53d1\u73b0\u4e86\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u533a\u95f4\u5c31\u53ef\u4ee5\u88ab\u7b80\u5316\u4e3a\u5de6\u8fb9\u754c$l$\u548c\u53f3\u8fb9\u754c$r$\uff0c\u6b64\u65f6\u7528$l(i,j)$\u8868\u793a\u70b9$(i,j)$\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u6700\u5de6\u8fb9\u7684\u4e00\u4e2a\u6c99\u6f20\u57ce\u5e02\uff0c$r(i,j)$\u8868\u793a\u70b9$(i,j)$\u53ef\u4ee5\u8986\u76d6\u5230\u7684\u6700\u53f3\u8fb9\u7684\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7528$mdis((a,b),(c,d))$\u8868\u793a\u4e24\u70b9\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u7528$h(i,j)$\u8868\u793a\u70b9$(i,j)$\u7684\u9ad8\u5ea6\u7684\u8bdd\uff0c\u8f6c\u79fb\u5c31\u662f$l(i,j)=\\min\\{l(a,b)|mdis((a,b),(i,j))=1\\land h(a,b)<h(i,j)\\}$\uff0c\u4e5f\u5c31\u662f\u76f8\u90bb\u4e14\u6bd4\u81ea\u5df1\u4f4e\u7684\u57ce\u5e02\u3002$r$\u7684\u8f6c\u79fb\u7c7b\u4f3c\u3002   \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u5c31\u51fa\u73b0\u4e86\u73af\u5f62\u8f6c\u79fb......  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u5c31\u6709\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u641c\u5b8c\u4e4b\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u7528$DP\\ A$\u6389\u6b64\u9898\u4e86\u3002\n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\nconst int MAXN = 505, MAXM = 505;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct node\n{\n\tint x, y;\n\tnode(){}\n\tnode( const int X, const int Y )\n\t{\n\t\tx = X, y = Y;\n\t}\n};\n\nqueue<node> q;\n\nint dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };\nint DP[MAXM];\nint head[MAXM], nxt[MAXM];\nint height[MAXN][MAXM], range[MAXN][MAXM][2];\nint N, M;\nbool visited[MAXN][MAXM];\n\nbool inside( const int x, const int y )\n{\n\treturn 1 <= x && x <= N && 1 <= y && y <= M;\n}\n\nvoid add( const int indx, const int ID )\n{\n\tnxt[ID] = head[indx];\n\thead[indx] = ID;\n}\n\nint BFS()\n{\n\twhile( ! q.empty() ) q.pop();\n\tint tot = 0;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tvisited[1][i] = true;\n\t\tq.push( node( 1, i ) );\n\t}\n\tnode h;\n\tint tx, ty;\n\twhile( ! q.empty() )\n\t{\n\t\th = q.front();\n\t\tq.pop();\n\t\tif( h.x == N ) tot ++;\n\t\tfor( int i = 0 ; i < 4 ; i ++ )\n\t\t{\n\t\t\ttx = dir[i][0] + h.x, ty = dir[i][1] + h.y;\n\t\t\tif( inside( tx, ty ) && height[tx][ty] < height[h.x][h.y] && ! visited[tx][ty] )\n\t\t\t{\n\t\t\t\tvisited[tx][ty] = true;\n\t\t\t\tq.push( node( tx, ty ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn tot;\n}\n\nint DFS( const int x, const int y, const int type )\n{\n\tif( ~ range[x][y][type] ) return range[x][y][type];\n\tif( x == N ) range[x][y][type] = y;\n\telse range[x][y][type] = type ? 0 : N + 1;\n\tint tx, ty;\n\tfor( int i = 0 ; i < 4 ; i ++ )\n\t{\n\t\ttx = x + dir[i][0], ty = y + dir[i][1];\n\t\tif( inside( tx, ty ) && height[tx][ty] < height[x][y] )\n\t\t{\n\t\t\tif( type ) range[x][y][type] = MAX( range[x][y][type], DFS( tx, ty, type ) );\n\t\t\telse range[x][y][type] = MIN( range[x][y][type], DFS( tx, ty, type ) );\n\t\t}\n\t}\n\treturn range[x][y][type];\n}\n\nint main()\n{\n\tread( N ), read( M );\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t{\n\t\tfor( int j = 1 ; j <= M ; j ++ )\n\t\t{\n\t\t\tread( height[i][j] );\n\t\t\trange[i][j][0] = range[i][j][1] = -1;\n\t\t}\n\t}\n\tint val;\n\tif( ( val = M - BFS() ) ) \n\t{\n\t\tputs( \"0\" );\n\t\twrite( val ), putchar( '\\n' );\n\t\treturn 0;\n\t}\n\telse puts( \"1\" );\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tif( ~ range[1][i][0] ) continue;\n\t\tDFS( 1, i, 0 );\n\t}\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tif( ~ range[1][i][1] ) continue;\n\t\tDFS( 1, i, 1 );\n\t}\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tadd( range[1][i][1], i );\n\t}\n\tDP[0] = 0;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tDP[i] = 0x3f3f3f3f;\n\t\tfor( int j = head[i] ; j ; j = nxt[j] )\n\t\t{\n\t\t\tfor( int k = range[1][j][0] ; k <= range[1][j][1] ; k ++ )\n\t\t\t{\n\t\t\t\tDP[i] = MIN( DP[i], DP[k - 1] + 1 );\n\t\t\t}\n\t\t}\n\t}\n\twrite( DP[M] ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1565762002,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[P1514]\u5f15\u6c34\u5165\u57ce"
    },
    {
        "content": "\u601d\u8def \uff1a\n\n\u641c\u7d22\u4ece\u7b2c\u4e00\u6392\u5f00\u59cb\u80fd\u8986\u76d6\u6700\u540e\u4e00\u6392\u7684\u533a\u95f4L ~ R\uff08\u4ee3\u7801\u91cc\u662fx ~ y\uff09\uff0c\u4f46\u641c\u7d22\u5fc5\u987b\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\u624d\u80fd\u641c\u2014\u2014if(q[1][i - 1] <= q[1][i] && q[1][i + 1] <= q[1][i])\uff0c\u8fd9\u4e2a\u6761\u4ef6\u7684\u539f\u56e0\u662f\u5982\u679c\u5f53\u524d\u70b9\u80fd\u8986\u76d6\u7b2c\u4e00\u6392\u7684\u76f8\u90bb\u70b9\uff0c\u90a3\u4e48\u9009\u5b83\u7684\u76f8\u90bb\u70b9\u505a\u84c4\u6c34\u5382\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff1b\u800c\u7b49\u4e8e\u53f7\u662f\u56e0\u4e3a\u5982\u679c\u5b83\u7684\u76f8\u90bb\u70b9\u8986\u76d6\u4e0d\u4e86\u5b83\uff0c\u5b83\u5c31\u53ef\u4ee5\u9009\uff0c\u5426\u5219\u5c31\u662f\u65e0\u610f\u4e49\u7684\u70b9\u4e86\u3002\u641c\u7d22\u65f6\u5982\u679c\u641c\u5230\u4e86\u6700\u540e\u4e00\u6392\uff0c\u5c31\u5f53\u524d\u70b9\u6539\u4e3a\u201c\u641c\u5230\u4e86\u201d\uff0c\u5e76\u5b58\u4e0bL\u548cR\uff0cL\u53d6min\uff0cR\u53d6max\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u6bcf\u4e2a\u70b9\u7684L\u548cR\u9700\u8981\u521d\u59cb\u5316\uff0c\u5373L = INF\uff0c R = -INF\uff09\u3002\u641c\u5b8c\u4ee5\u540e\uff0c\u5224\u65ad\u6709\u6ca1\u6709\u6700\u540e\u4e00\u6392\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u6ca1\u6709\u88ab\u6539\u4e3a\u201c\u641c\u5230\u4e86\u201d\uff0c\u5982\u679c\u6709\u5c31\u8f93\u51fa\u201c0\u201d + \u6ca1\u6709\u6539\u4e3a\u201c\u641c\u5230\u4e86\u201d\u7684\u6570\u91cf\u3002\u5426\u5219\u5c31\u6392\u5e8f + \u8d2a\u5fc3\u533a\u95f4\u8986\u76d6\u2014\u2014\u6bcf\u6b21\u8d2a\u5fc3\u53d6\u5de6\u8fb9\u754c \u2264 l && \u53f3\u8fb9\u754c > r\u7684\u533a\u95f4\uff08l\u521d\u59cb\u503c\u4e3a1\uff0cr\u521d\u59cb\u503c\u4e3a0\uff0c\u7136\u540el\u6bcf\u6b21\u90fd\u91cd\u65b0\u8d4b\u503c\u4e3ar + 1\uff0cr\u53cd\u590d\u53d6 { \u5de6\u8fb9\u754c \u2264 l && \u53f3\u8fb9\u754c > r } \u7684\u53f3\u8fb9\u754c\uff09\uff0c\u6700\u540e\u53d6\u6700\u5c0f\u8986\u76d6\u7684\u6b21\u6570\uff08\u5373\u8981\u5b89\u84c4\u6c34\u5382\u7684\u6700\u5c0f\u6570\u91cf\uff09\u4e3a\u7b54\u6848\uff0c\u8f93\u51fa\u201c1\u201d + \u6700\u5c0f\u8986\u76d6\u7684\u6b21\u6570\u3002\n\n\u5168\u6587 + \u4ee3\u7801\uff1a[\u8fd9\u91cc](https://www.cnblogs.com/qqq1112/p/11118486.html)",
        "postTime": 1562419217,
        "uid": 143681,
        "name": "Strong_Jelly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u89e3\u9898\u601d\u8def\uff1adfs+\u7ebf\u6027\u8986\u76d6\n\u4e3b\u8981\u4ecb\u7ecd\u8fd9\u4e2a\u9898\u7684\u4e00\u4e2a\u6027\u8d28\u6765\u4f18\u5316\u6bcf\u4e2a\u70b9\u7684\u50a8\u5b58\u65b9\u6cd5\uff0c\u8fd9\u6837\u53ef\u4ee5\u660e\u663e\u7684\u4f18\u5316\n\n------------\n\u9996\u5148\u8981\u8bc1\u660e\u6b64\u9898\u7684\u4e00\u4e2a\u6027\u8d28\n\n\u8bbe\u6cbf\u6d77\u57ce\u5e02X\u80fd\u5230\u8fbe\u5e72\u65f1\u57ce\u5e02L\u548cR\uff0c\u90a3\u4e48L\u548cR\u95f4\u6240\u6709\u6700\u7ec8\u53ef\u4ee5\u5f97\u5230\u6c34\u7684\u57ce\u5e02\u53c8\u53ef\u4ee5\u901a\u8fc7X\u57ce\u5e02\u7684\u6c34\u7ad9\u83b7\u5f97\u6c34\n\n\u4e3e\u4f8b\uff1a\u5982\u8868\u6240\u793a\n\n\u5047\u8bbe\u57ce\u5e02X\u53ef\u4ee5\u901a\u8fc7\u8def\u5f84P(\u6216M)\u7ed9L\u548cR\u4f9b\u6c34\uff0c\u4e141234\u57ce\u5e02\u6700\u7ec8\u4e5f\u53ef\u4ee5\u6536\u5230\u6c34\uff0c\u90a3\u4e48X\u4f9b\u6c34\u7ad9\u4e00\u5b9a\u53ef\u4ee5\u7ed91234\u57ce\u5e02\u4f9b\u6c34\u3002\n\n\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u57ce\u5e021234\u5df2\u7ecf\u88ab\u8def\u5f84P\u5305\u56f4\uff0c\u5176\u4ed6\u57ce\u5e02\u8981\u60f3\u7ed9\u5176\u4e2d\u7684\u57ce\u5e02\u4f9b\u6c34\uff0c\u4e00\u5b9a\u8981\u7a7f\u8fc7\u8def\u5f84P\uff0c\u8868\u4e2d\u8bbeA->2\u8def\u5f84\u4e3aQ\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e0e\u8def\u5f84P\u7684\u4ea4\u70b9M\u3002\u5f53X->L\u65f6\u4e5f\u4f1a\u7ecf\u8fc7M\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u6837\u53ef\u4ee5\u5411\u4e0b\u8d70\u4e86\uff0c\u6240\u4ee5X\u4e5f\u53ef\u4ee5\u7ed92\u4f9b\u6c34\u3002\n\n|  |A|Q|X|  |  |  |  |\n| -----------: | -----------: | -----------: | -----------: | -----------: | -----------: | -----------: | -----------: |\n|  |P|M|P|  |  |  |  |\n|  |P|Q|P|P|P|  |  |\n|  |P|Q|Q| |P|P|  |\n|  |L|1|2|3|4|R|  |\n\n\n------------\n\u5229\u7528\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2al\u548cr\u5c31\u53ef\u4ee5\u8868\u793a\u5b83\u53ef\u4ee5\u4f9b\u6c34\u7684\u57ce\u5e02\uff0c\u5728dfs\u65f6\uff0c\u5bf9\u4e8e\u57ce\u5e02x\uff0c\u663e\u7136x\u7684l\u7b49\u4e8e\u4ed6\u5468\u56f4\u6240\u6709\u6d77\u62d4\u6bd4\u4ed6\u5c0f\u7684\u57ce\u5e02\u7684l\u7684\u6700\u5c0f\u503c\uff0cr\u7b49\u4e8e\u4ed6\u5468\u56f4\u6240\u6709\u6d77\u62d4\u6bd4\u4ed6\u5c0f\u7684\u57ce\u5e02\u7684r\u7684\u6700\u5927\u503c\u3002\n\n------------\n\n\u4e8e\u662f\u5f97\u5230dfs\u51fd\u6570\n```cpp\nvoid dfs(int x,int y)\n{\n\tif (vis[x][y]) return;\n\tvis[x][y]=true;\n\tfor (int i=-1;i<=1;i++)\n\t\tfor (int j=-1;j<=1;j++)\n\t\t\tif (i!=j && abs(i)+abs(j)<2 && h[x+i][y+j]<h[x][y]) \n\t\t\t{\n\t\t\t\tdfs(x+i,y+j);\n\t\t\t\tl[x][y]=min(l[x][y],l[x+i][y+j]);\n\t\t\t\tr[x][y]=max(r[x][y],r[x+i][y+j]);\n\t\t\t}\n}\n```\n\n\n------------\ndfs\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u9996\u5148\u8981\u5224\u65ad\u6240\u6709\u5e72\u65f1\u533a\u7684\u57ce\u5e02\u662f\u5426\u80fd\u591f\u5f97\u5230\u4f9b\u6c34\u3002\uff08\u80fd\u5f97\u5230\u4f9b\u6c34\u7684\u6807\u5fd7\u662fdfs\u4e2d\u88ab\u641c\u7d22\u5230\uff09\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u76f4\u63a5\u7edf\u8ba1\u6570\u5b57\u8f93\u51fa\u3002\n```cpp\n\tfor (int i=1;i<=m;i++)\n\t\tif (!vis[n][i]) sum++;\n\tif (sum!=0) {printf(\"0\\n%d\",sum); return 0;}\n```\n\n\n------------\n\u5982\u679c\u80fd\u591f\u5168\u90e8\u5f97\u5230\u4f9b\u6c34\uff0c\u521a\u521a\u8bc1\u660e\u7684\u6027\u8d28\u5c31\u53c8\u7528\u4e86\u3002\n\uff08n=500,n^3\u4e5f\u4e0d\u6015\uff0c\u76f4\u63a5\u4e0d\u9700\u8981\u4f18\u5316\u7684\u7ebf\u6027\u8986\u76d6\u5c31\u884c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6n^2)\n\n```cpp\n\tint p=0,q=0;\n\twhile (q<m)\n\t{\n\t\tfor (int i=1;i<=m;i++)\n\t\tif (l[1][i]<=p+1) q=max(q,r[1][i]);\n\t\tp=q;\n\t\tsum++;\n\t}\n```\np\u8868\u793a\u8d77\u70b9\uff0cq\u8bb0\u5f55\u7ec8\u70b9\u3002\n\u6700\u540e\u8f93\u51fasum\u5373\u53ef\n\n\n------------\n\u9644AC\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nint h[505][505],l[505][505],r[505][505];\nint n,m,sum;\nbool vis[505][505];\nvoid dfs(int x,int y)\n{\n\tif (vis[x][y]) return;\n\tvis[x][y]=true;\n\tfor (int i=-1;i<=1;i++)\n\t\tfor (int j=-1;j<=1;j++)\n\t\t\tif (i!=j && abs(i)+abs(j)<2 && h[x+i][y+j]<h[x][y]) \n\t\t\t{\n\t\t\t\tdfs(x+i,y+j);\n\t\t\t\tl[x][y]=min(l[x][y],l[x+i][y+j]);\n\t\t\t\tr[x][y]=max(r[x][y],r[x+i][y+j]);\n\t\t\t}\n}\nint main()\n{\n\tfor (int i=0;i<=501;i++)\n\t\tfor (int j=0;j<=501;j++)\n\t\t{h[i][j]=2147483647;vis[i][j]=false;l[i][j]=2147483647;}\t\n\tscanf(\"%d%d\",&n,&m);sum=0;\n\tfor (int i=1;i<=501;i++)\n\t\tl[n][i]=r[n][i]=i;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m;j++)\n\t\t\tscanf(\"%d\",&h[i][j]);\n\tfor (int i=1;i<=m;i++)\n\t\tdfs(1,i);\n\tfor (int i=1;i<=m;i++)\n\t\tif (!vis[n][i]) sum++;\n\tif (sum!=0) {printf(\"0\\n%d\",sum); return 0;}\n\tint p=0,q=0;\n\twhile (q<m)\n\t{\n\t\tfor (int i=1;i<=m;i++)\n\t\tif (l[1][i]<=p+1) q=max(q,r[1][i]);\n\t\tp=q;\n\t\tsum++;\n\t}\n\tprintf(\"1\\n%d\",sum);\n\treturn 0;\n}\n```\n\u8fd9\u4e2a\u4ee3\u7801\u5e94\u8be5\u7b97\u662f\u6bd4\u8f83\u77ed\u7684\u5427\u3002\n\n\u5982\u6709\u9700Pascal\u4ee3\u7801\u8bf7\u5728\u8bc4\u8bba\u533a\u56de\u590d\u3002\n\n------------\n\u6700\u540e\uff0c\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u5bf9\u5927\u5bb6\u6709\u7528\uff0c\u795d\u5927\u5bb6AC\u6b64\u9898\uff0cAK IOI\u3002\n\n\n",
        "postTime": 1556265323,
        "uid": 120836,
        "name": "Han_Innocence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "140ms\u84bb\u9cab\u4ee3\u7801  \u4e0d\u8fc7\u6bd4\u8f83\u597d\u7406\u89e3  \u8d2a\u5fc3+DFS\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//input by bxd\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define repp(i,a,b) for(int i=(a);i>=(b);--i)\n#define RI(n) scanf(\"%d\",&(n))\n#define RII(n,m) scanf(\"%d%d\",&n,&m)\n#define RIII(n,m,k) scanf(\"%d%d%d\",&n,&m,&k)\n#define RS(s) scanf(\"%s\",s);\n#define ll long long\n#define REP(i,N)  for(int i=0;i<(N);i++)\n#define CLR(A,v)  memset(A,v,sizeof A)\n//////////////////////////////////\n#define inf 0x3f3f3f3f\n#define N 5005\nint n,m;\nint mp[N][N];\nint vis[N][N];\nint vis2[N];\nint ri[N];\nvector<int>node[N];//\u8be5\u57ce\u5e02\u6240\u5230\u8fbe\u7684\u70b9\nvector<int>in[N];//\u5230\u8fbe\u8be5\u70b9\u7684\u57ce\u5e02\nbool inmap(int x,int y)\n{\n    return x>=1&&x<=n&&y>=1&&y<=m;\n}\nint dx[]={0,0,1,-1};\nint dy[]={1,-1,0,0};\nvoid dfs(int x,int y,int flag)\n{\n    if(x==n)\n    {\n        node[flag].push_back(y);\n        ri[flag]=max(ri[flag],y);\n        in[y].push_back(flag);\n        vis2[y]=1;\n    }\n    rep(i,0,3)\n    {\n        int a=x+dx[i];\n        int b=y+dy[i];\n        if(!inmap(a,b))continue;\n        if(vis[a][b]==flag)continue;\n        if(mp[a][b]>=mp[x][y])continue;\n        vis[a][b]=flag;\n        dfs(a,b,flag);\n    }\n}\nstruct aaa\n{\n    int id,h;\n}s[N];\nbool cmp(aaa a,aaa b)\n{\n    return a.h>b.h;\n}\n\nint main()\n{\n    RII(n,m);\n    rep(i,1,n)\n    rep(j,1,m)\n    {\n        RI(mp[i][j]);\n        if(i==1)\n        s[j].id=j,s[j].h=mp[i][j];\n    }\n    sort(s+1,s+1+m,cmp);//\u8d2a\u5fc3\u4f18\u5316 \u9ad8\u7684\u5148\u6765  \u526a\u4e8630ms\u3002\u3002\u3002\n\n    rep(i,1,m)\n    if(!vis[1][ s[i].id ])\n    dfs(1,s[i].id,s[i].id);\n    \n    int ok=1;\n    int cnt=0;\n    rep(i,1,m)\n    if(!vis2[i])ok=0,cnt++;\n    if(!ok)printf(\"%d\\n%d\",0,cnt);\n    else\n    {\n        printf(\"1\\n\");\n        \n        int sum=0;\n        int i=1;\n        while(i<=m)\n        {\n            int maxx=0;\n            rep(j,0,in[i].size()-1)\n                maxx=max(maxx, ri[ in[i][j] ] );\n            \n            sum++;\n            i=maxx+1;\n        }\n        cout<<sum;\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1555568902,
        "uid": 172446,
        "name": "FFFFFFFHHHHHHH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u539f\u6587\u5728\u6b64https://blog.csdn.net/qq_39887142/article/details/83549571\n\n\u975e\u5e38\u975e\u5e38\u5de7\u5999\u7684\u4e00\u9053\u9898\u76ee\uff1b\n1.\u5148\u601d\u8003\uff0c\u8981\u6c42\u7684\u662f\u4ec0\u4e48\uff1f\n\u5982\u9898\u76ee\u6240\u8bf4\uff0c\u76ee\u7684\u662f\u8981\u628a\u7b2cn\u6392\u5168\u90e8\u5efa\u4e0a\u90a3\u4e2a\u4ec0\u4e48\u6c34\u5229\u5de5\u7a0b\uff0c\u5168\u5efa\u4e0a\uff0c\u4e5f\u5c31\u662f\u5168\u90e8\u8986\u76d6\uff01\u518d\u8003\u8651\u8d77\u70b9\uff0c\u4e5f\u5c31\u662f\u6cb3\u5cb8\uff0c\u52a8\u52a8\u7b14\uff0c\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u67d0\u4e9b\u8282\u70b9\u53ef\u4ee5\u62d3\u5c55\u5230\u7ec8\u70b9\u7684\u4e00\u7247\u533a\u57df\uff0c\n\u5982\u6837\u4f8b\u4e00\u4e2d9\u53ef\u4ee5\u62d3\u5c55\u5230\u7684\u70b9\u5982\u56fe\u6240\u793a\uff0c\n\n\u56fe\u7247\u5728\u539f\u6587\u3002\u3002\u3002\u3002\u3002\u3002\n\u65e0\u8bedluogu\u3002\u3002\n\n\u7eff\u8272\u7684\u6846\u5219\u8868\u793a9,\u4e5f\u5c31\u662f\u5165\u53e3\u7b2c\u4e00\u5217\u7684\u8fd9\u4e2a\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u51fa\u53e3\u8303\u56f4\uff0c\u8fd9\u91cc\u53eb\u505a\u4ed6\u80fd\u7ba1\u8f96\u7684\u8303\u56f4\uff1b\n\n\u7406\u89e3\u5230\u8fd9\u4e00\u6b65\uff0c\u5e94\u8be5\u5f88\u660e\u663e\u4e86\uff0c\u8981\u6c42\u8986\u76d6\u6240\u6709\u7ec8\u70b9\u6240\u9700\u8981\u7684\u8d77\u70b9\u6700\u5c11\uff0c\u6545\u8986\u76d6\u5b8c\u7ec8\u70b9\u6240\u9700\u8981\u7684\u7ba1\u8f96\u533a\u95f4\u6700\u5c11\u3002\n\nover \u5b8c\u7f8e\u7684\u53d8\u6210\u4e86\u533a\u95f4\u8986\u76d6\u95ee\u9898!\n\n\u4e0d\u4e86\u89e3\u533a\u95f4\u8986\u76d6\u95ee\u9898\u7684\u53ef\u4ee5\u53c2\u8003\nhttps://blog.csdn.net/karry_zzj/article/details/70886931\n2.\u5982\u4f55\u6c42\u89e3\uff1f\uff1f\n\n\u8fd9\u91cc\u7528\u7684\u8d2a\u5fc3\uff0c\u4f46\u6211\u7528\u7684\u52a8\u6001\u89c4\u5212\uff1b\n\u8bbef[i][j]\u4e3a\u8986\u76d6\u5b8c\u533a\u95f4i\u2013j\u6240\u9700\u8981\u6700\u5c11\u7684\u8d77\u70b9\u6570\uff0cdp[i]\u8868\u793a\u8986\u76d6\u5b8c1\u2013i\u6240\u9700\u8981\u6700\u5c11\u7684\u8d77\u70b9\u6570\uff0c\u6545dp[m]\u4e3a\u6700\u7ec8\u7b54\u6848\uff1b\n\u6bcf\u4e2a\u8d77\u70b9\u6240\u7ba1\u8f96\u7684\u533a\u57df\u5982\u4f55\u6c42\u5462\uff1f\n\u975e\u5e38\u660e\u663e\uff0c\u641c\u7d22\u5927\u6cd5\u2014BFS\uff01\uff01\u4f60\u60f3\u975e\u4e3b\u6d41\u7528DFS\u4e5f\u6ca1\u4eba\u7ba1\u4f60\u3002\u3002\u3002\n\n\u6bcf\u4e2a\u7b2c\u4e00\u884c\u7684\u70b9\u5f00\u59cb\u5bbd\u641c\uff0c\u641c\u5230\u6700\u540e\u4e00\u884c\u4e5f\u5c31\u662f\u7ec8\u70b9\u66f4\u65b0\u7ba1\u8f96\u533a\u57df\u3002\n\u90a3\u4e48\u95ee\u9898\u4e5f\u5c31\u8fce\u5203\u800c\u89e3\u4e86NICE\uff01\uff01\uff01IG\uff0cNB\uff01\uff01\uff01\uff01\n\n\u4ee3\u7801\u6ce8\u91ca\u4e5f\u4e0d\u5c11\uff0c\u5e94\u8be5\u8f83\u597d\u7406\u89e3\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nint n,m,dp[510],f[510][510],e[510][510],out[510],vis[510][510],cx[5]={0,-1,1,0,0},cy[5]={0,0,0,-1,1};\nstruct IN{//////////////////////////////////////////////////////  e\u5b58\u5730\u56fe\uff0cout[i]\u8868\u793a\u6700\u540e\u4e00\u884c\u7b2ci\u5217\u80fd\u5426\u88ab\u8986\u76d6\u5230\uff0cvis\u7528\u6765BFS\u5224\u91cd\u3002 \n\tint l,r,v;\n}I[510];//\u7b2ci\u4e2a\u8d77\u70b9\u7684\u7ba1\u8f96\u533a\u57dfl--r\uff0cv\u8868\u793a\u8be5\u4e03\u70b9\u662f\u5426\u88ab\u5176\u4ed6\u8d77\u70b9\u6240\u641c\u5230\uff0c\u5982\u679c\u88ab\u5176\u4ed6\u8d77\u70b9\u80fd\u5230\u8fbe\uff0c\u8be5\u8d77\u70b9\u5c31\u6ca1\u6696\u7528\u4e86\u3002\u3002 \nstruct Node{int x,y;};\nvoid BFS(int sy){\n\tmemset(vis,0,sizeof(vis));\n\tqueue<Node> q;\n\tif(n==1) out[sy]=1,I[sy].l=I[sy].r=sy;//\u7279\u522b\u6ce8\u610f\u8f93\u5165\u53ea\u6709\u4e00\u884c\u7684\u60c5\u51b5\uff0c\u8d77\u70b9\u4e5f\u662f\u7ec8\u70b9 \n\tq.push((Node){1,sy});\n\twhile(!q.empty()){\n\t\tNode t=q.front(); q.pop();\n\t\tfor(int i=1;i<=4;i++){\n\t\t\tint xx=t.x+cx[i],yy=t.y+cy[i];\n\t\t\tif(e[xx][yy]<e[t.x][t.y]){//\u53ef\u4ee5\u62d3\u5c55 \n\t\t\t\tif(xx==1) I[yy].v=0;//\u7b2cyy\u4e2a\u8282\u70b9\u53ef\u4ee5\u88ab\u522b\u7684\u62d3\u5c55\u5230\uff0c\u6ca1p\u7528\u4e86byebye\uff01\uff01 \n\t\t\t\tif(xx==n){\n\t\t\t\t\tout[yy]=1;\n\t\t\t\t\tif(yy<I[sy].l) I[sy].l=yy;\n\t\t\t\t\tif(yy>I[sy].r) I[sy].r=yy;\n\t\t\t\t}//\u66f4\u65b0\u7ba1\u8f96\u533a\u57df \n\t\t\t\tif(!vis[xx][yy]) q.push((Node){xx,yy}),vis[xx][yy]=1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tmemset(e,0x7f,sizeof(e));//\u521d\u59cb\u5316\u9632\u6b62\u8fb9\u754c\u95ee\u9898 \n\tfor(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf(\"%d\",&e[i][j]);\n\tfor(int i=1;i<=m;i++) I[i].v=1,I[i].l=m+1,I[i].r=0;//\u7ba1\u8f96\u533a\u57df\u7684\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u8981\u9010\u6e10\u6269\u5927\uff0c\u53f3\u7aef\u70b9\u8981\u9760\u6700\u5de6\uff0c\u540c\u7406...... \n\tfor(int i=1;i<=m;i++) if(I[i].v) BFS(i);//BFS\u6bcf\u4e00\u4e2a\u8282\u70b9 \n\tint sum=0;\n\tfor(int i=1;i<=m;i++) if(!out[i]) sum++;\n\tif(sum){ printf(\"%d\\n%d\\n\",0,sum);return 0;}//\u5224\u65ad\u7279\u4f8b\uff0c\u4e0d\u53ef\u80fd\u8986\u76d6\u5b8c \n \tmemset(dp,0x7f,sizeof(dp));\n\tmemset(f,0x7f,sizeof(f)); \n\tfor(int k=1;k<=m;k++){\n\t\tfor(int i=I[k].l;i<=I[k].r;i++){\n\t\t\tfor(int j=i;j<=I[k].r;j++){\n\t\t\t\tif(i==1) dp[j]=1;\n\t\t\t\tf[i][j]=1;\n\t\t\t}\n\t\t}\n\t}//\u521d\u59cb\u5316 \n\tfor(int i=1;i<=m;i++) for(int j=1;j<i;j++) dp[i]=min(dp[i],dp[j]+f[j+1][i]);//dp\u5f00\u59cb\uff01 \n\tprintf(\"%d\\n%d\\n\",1,dp[m]);//over!\n\treturn 0;//IG NB!!!\n}\n```\n",
        "postTime": 1540907540,
        "uid": 37585,
        "name": "liuxu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011\u5305\u61c2\u5305\u4f1a\uff0c\u7edd\u5bf9\u8be6\u7ec6"
    },
    {
        "content": "\u81ea\u5e26\u5de8\u5927\u5e38\u6570\u9009\u624b\uff0c\u7b2c\u4e00\u6b21\u5199\u7684\u601d\u8def\u770b\u9898\u89e3\u8bf4\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u6ce8\u610f\u5361\u5e38\u5dee\u4e0d\u591a\u80fdA\uff0c\u7136\u540eT\u4e86\u516d\u4e2a\u70b9...\n\nBFS + \u533a\u95f4\u8986\u76d6\u8d2a\u5fc3 ~~\u601d\u8def\u4e00\u76f4\u5bf9 \u83ab\u540d\u7684\u6302\u4e86N\u53d1~~\n\n\u601d\u8def\uff1a\u5bf9\u56fe\u7684\u7b2c\u4e00\u884c\u90fd\u8dd1\u4e00\u904dBFS\uff0c \u7136\u540e\u5bf9\u6700\u540e\u4e00\u884c\u8fdb\u884c\u67d3\u8272\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u5b58\u5728\u7b2c\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u5bf9\u6700\u540e\u4e00\u884c\u67d3\u7684\u8272\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u4e0d\u80fd\u8fde\u7eed\u7684\u90a3\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u80fd\u88ab\u7b2c\u4e00\u884c\u7684\u4efb\u4f55\u70b9\u6240\u8986\u76d6\u3002 \u7136\u540e\u67d3\u8272\u5b8c\u7b97\u4e00\u4e0b\u533a\u95f4\u8986\u76d6\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u8d2a\u5fc3\u3002\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[] = {0,0,1,-1};\nconst int dy[] = {1,-1,0,0};\nstruct node\n{\n    int left, right;\n}q[505], Q[505];\ntypedef pair<int,int> P;\nqueue<P> que;\nint n,m, book[505][505], mp[505][505];\nvoid bfs(int start)\n{\n    while(que.size()) que.pop();\n    que.push(P(1, start));\n    book[1][start] = start;\n    while(que.size()) {\n        P p = que.front(); que.pop();\n        int x = p.first, y = p.second;\n        for(int i = 0; i < 4; i++) {\n            int tx = x + dx[i], ty = y + dy[i];\n            if(tx >= 1 && ty >= 1 && tx <= n && ty <= m && !book[tx][ty] && mp[tx][ty] < mp[x][y]) {\n                book[tx][ty] = start;   /// \u6807\u8bb0\u88ab\u7b2c\u4e00\u884c\u54ea\u4e00\u4e2a\u70b9\u8986\u76d6\u7684\n                que.push(P(tx,ty));\n            }\n        }\n    }\n}\nint main()\n{\n    read(n), read(m);\n    for(int i = 1; i <= n; i++) for(int j = 1; j <= m; j++) read(mp[i][j]);\n    for(int i = 1; i <= m; i++) bfs(i);   /// \u5bf9\u7b2c\u4e00\u884c\u8dd1\u4e00\u8fb9BFS\n    int flag = 0;\n    for(int i = 1; i <= m; i++) if(!book[n][i]) flag++;    /// \u5982\u679c\u6ca1\u6709\u88ab\u6807\u8bb0 \u8f93\u51fa\u6570\u91cf\n    if(flag) { printf(\"0\\n%d\\n\",flag); return 0; }\n    int k=0;\n    for(int i = 1; i <= m; i++) {    /// \u6c42\u51fa\u7b2c\u4e00\u884c\u7684\u6bcf\u4e00\u4e2a\u70b9\u80fd\u5728\u6700\u540e\u4e00\u884c\u8986\u76d6\u7684\u5de6\u53f3\u7aef\u70b9\n        int t = 1;\n        memset(book,0,sizeof(book));\n        bfs(i);\n        for(int j = 1; j <= m; j++) {\n            if(book[n][j] != i) t++;\n            else break;\n        }\n        if(t == m + 1) continue;\n        q[++k].left = t;\n        q[k].right = t - 1;\n        for(int j = 1; j <= m; j++) if(book[n][j] == i) q[k].right++;\n    }\n    int s = 1,t = m,i = 1,num = 0;   /// \u8d2a\u5fc3\u6c42\u6700\u5c0f\u7ebf\u6bb5\u533a\u95f4\u8986\u76d6\n    while(i <= m && s <= t) {\n        int last = -1;\n        while(i <= m && q[i].left <= s) last = max(last,q[i].right), i++;\n        if(last < s) break;\n        num++;\n        s = last + 1;\n    }\n    printf(\"1\\n%d\\n\",num);\n    return 0;\n}\n```",
        "postTime": 1540903266,
        "uid": 90915,
        "name": "WindSky_M",
        "ccfLevel": 0,
        "title": "P1514 \u5f15\u6c34\u5165\u57ce"
    },
    {
        "content": "\u5bf9\u4e8e\u7b2c\u4e00\u884c\u6bcf\u4e2a\u683c\u5b50 \u6211\u4eecbfs\u66b4\u529b\u6c42\u51fa\u5b83\u4eec\u5efa\u6c34\u5e93\u5206\u522b\u80fd\u591f\u8986\u76d6\u6700\u540e\u4e00\u884c\u7684\u54ea\u4e9b\u683c\u5b50.\n\n _$O(n^3)$\u8fc7\u4e0d\u4e86\uff1f \u5982\u679c\u4e00\u4e2a\u7b2c\u4e00\u884c\u7684\u70b9\u80fd\u591f\u88ab\u7b2c\u4e00\u884c\u5176\u4ed6\u70b9\u8986\u76d6 \u6211\u4eec\u663e\u7136\u4e0d\u7528\u518d\u5bf9\u8fd9\u4e2a\u70b9\u8fdb\u884cbfs \u4e8b\u5b9e\u8bc1\u660e\u8fd9\u4e2a\u526a\u679d\u6548\u679c\u5341\u5206\u663e\u8457_\n \n \u5982\u679c\u6700\u540e\u4e00\u884c\u683c\u5b50\u65e0\u6cd5\u88ab\u5b8c\u5168\u8986\u76d6 \u663e\u7136\u65e0\u89e3\n \n \u5982\u679c\u6709\u89e3 \u5b9e\u8d28\u4e0a\u5c31\u662f\u8981\u6211\u4eec\u6c42\u51fa\u6700\u5c11\u591a\u5c11\u6761\u7ebf\u6bb5\u53ef\u4ee5\u8986\u76d6\u6700\u540e\u4e00\u884c \n \n \u8fd9\u4e2a\u662f\u7ecf\u5178\u8d2a\u5fc3\u95ee\u9898 \u5373 \u6211\u4eec\u603b\u662f\u8d2a\u5fc3\u5730\u9009\n \n- \u5de6\u7aef\u70b9\u5728\u5f53\u524d\u8986\u76d6\u8303\u56f4\u5185\n \n- \u53f3\u7aef\u70b9\u5c3d\u91cf\u9760\u53f3\n\n\u7684\u7ebf\u6bb5\u5373\u53ef\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//#define int long long\ninline int read(){\n    int x=0,f=1;char ch =getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nconst int MAXN = 504;\nint mp[MAXN][MAXN],N,M,da[4]={-1,0,1,0},db[4]={0,1,0,-1},cnt,ans;\nint vis[MAXN][MAXN];\nstruct point{\n    int a,b;\n    point(int a=0,int b=0) : a(a) , b(b) {}\n};\nstruct seg{\n    int a,b;\n    seg(int a=0,int b=0) : a(a) , b(b) {}\n    inline friend bool operator<(seg a,seg b){\n        return a.a<b.a;\n    }\n}t[MAXN*MAXN*2];\ninline void bfs(point S,int id){\n    queue<point>q;\n    q.push(S);vis[S.a][S.b]=id;\n    while(!q.empty()){\n        point u=q.front();q.pop();\n        for(int i=0;i<4;++i){\n            int aa=u.a+da[i],bb=u.b+db[i];\n            if(vis[aa][bb]!=id&&mp[aa][bb]<mp[u.a][u.b]&&aa>0&&aa<=N&&bb>0&&bb<=M)q.push(point(aa,bb)),vis[aa][bb]=id;\n        }\n    }\n}\nmain(){\n    N=read();M=read();\n    for(int i=1;i<=N;i++)\n        for(int j=1;j<=M;j++)\n    mp[i][j]=read();\n    for(int i=1;i<=M;i++){\n        if(vis[1][i])continue;//\u5c0f\u526a\u679d \u4e0d\u52a0\u8fd9\u4e2a\u6211\u7684\u4ee3\u7801\u5f00O2\u624d\u80fd\u8fc7\n        bfs(point(1,i),i);\n        int L=0,R=0;\n        for(int cur=1;cur<=M;++cur){\n            if(vis[N][cur]==i){\n                L=cur;\n                for(;cur<=M&&vis[N][cur]==i;++cur);\n                t[++cnt]=seg(L,cur-1);\n            }\n        }\n    }\n       int tot=0;\n    for(int i=1;i<=M;i++)\n        if(!vis[N][i])++tot;\n    if(tot)printf(\"0\\n%d\\n\",tot),exit(0);//\u65e0\u89e3         \n    sort(t+1,t+1+cnt);//\u7ebf\u6bb5\u8986\u76d6\n    int cur=1,limit=+1,maxr=1;\n    do{\n        for(;cur<=cnt&&t[cur].a<=limit;++cur)\n            maxr=max(maxr,t[cur].b);\n        ++ans;limit=maxr+1;\n    }while(limit<=M);\n    printf(\"1\\n%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1532359995,
        "uid": 66005,
        "name": "HikariS",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u521a\u5f00\u59cb\u6211\u60f3\u7684\u662f\u5148\u4ece\u4e0a\u5f80\u4e0bdfs\u6c42\u662f\u5426\u53ef\u4ee5\u7ed9\u6240\u6709\u7684\u6c99\u6f20\u57ce\u5e02\u4f9b\u7ed9\u6c34\u6e90\n\n\u8d2a\u5fc3\u8ba9\u6bcf\u4e2a\u6e56\u6cca\u57ce\u5e02\u90fd\u5efa\u4e0a\u84c4\u6c34\u7ad9\n\n\u8fd9\u6837\u5462dfs\u5230\u5e95\uff0c\u6c34\u8d70\u5230\u54ea\u91cc\u5c31\u6807\u8bb0\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u662f\u5426\u53ef\u4ee5\u7ed9\u6240\u6709\u6c99\u6f20\u57ce\u5e02\u8f93\u6c34\n\n\u5982\u679c\u4e0d\u53ef\u4ee5\u5c31\u8f93\u51fa\n\n\u5426\u5219\u5c31\u8fdb\u884c\u7b2c\u4e8c\u6b65\u7684\u6c42\u89e3\n\n\uff08\u503c\u5f97\u601d\u8003\u7684\u662f\u5982\u679c\u6709\u89e3\uff0c\u90a3\u4e48\u4e00\u4e2a\u84c4\u6c34\u7ad9\u5982\u679c\u53ef\u4ee5\u8f93\u6c34\u5230\u6c99\u6f20\u57ce\u5e02\uff0c\u90a3\u4e48\u5b83\u5728\u6c99\u6f20\u57ce\u5e02\u4e2d\u5fc5\u5b9a\u8986\u76d6\u4e00\u4e2a\u4e0d\u95f4\u65ad\u7684\u533a\u95f4\uff0c\u5927\u5bb6\u53ef\u4ee5\u601d\u8003\u8bc1\u660e\u4e00\u4e0b\uff0c\u5982\u679c\u95f4\u65ad\uff0c\u90a3\u4e48\u5fc5\u5b9a\u95f4\u65ad\u7684\u90a3\u4e2a\u57ce\u5e02\u6bd4\u5468\u56f4\u7684\u57ce\u5e02\u6d77\u62d4\u9ad8\uff0c\u6240\u4ee5\u5c31\u4f1a\u65e0\u89e3\uff0c\u5f97\u8bc1\uff09\n\n\u7b2c\u4e8c\u6b65\u4e2d\u6211\u60f3\u5230\u7684\u662f\u52a8\u6001\u89c4\u5212\n\n\u4f46\u662f\u6211\u7b2c\u4e00\u6b21\u5f00\u7684\u662f\u56db\u7ef4dp\uff0cTLE\u4e86\u4e00\u4e2a\u70b9\uff08\u5728\u5176\u4ed6\u7b97\u6cd5\u7f51\u7ad9\u4e0a\uff09\n\n\u7136\u540e\u60f3\u51fa\u4e86\u4e8c\u7ef4dp\uff0c\n\n\u53c8\u542c\u8bf4\u53ef\u4ee5\u8d2a\u5fc3\u3002\u3002\u3002\n\n\u4e8e\u662f\u6211\u90fd\u5206\u6790\u4e86\u4e00\u904d\u3002\u3002\u3002\n\n\u4e0b\u9762\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\u52a8\u6001\u89c4\u5212\u5199\u6cd5\n\n1.   \u5148\u8bf4\u8bf4\u56db\u7ef4dp\uff1a\uff0890\u5206\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define maxn 505\n#define H 1e6+1\nusing namespace std;\nstruct Ha{                                               //\u5b58\u50a8\u6e56\u6cca\u57ce\u5e02\u5efa\u84c4\u6c34\u7ad9\u53ef\u4ee5\u8986\u76d6\u7684\u533a\u95f4\n    int l,r;\n}c[maxn];\nint n,m,h[maxn][maxn],a[maxn][maxn],f[maxn][maxn],ans1=0;\nvoid dfs(int l,int x){                                   //\u6df1\u641c\u6c34\u53ef\u4ee5\u5230\u8fbe\u7684\u5730\u65b9\n    if(a[l][x])return ;                               //\u8bb0\u5fc6\u5316\uff0c\u5982\u679c\u641c\u8fc7\u5c31\u8fd4\u56de\n    a[l][x]=1;                                         //\u6807\u8bb0\u6c34\u5230\u8fbe\u7684\u5730\u65b9\n    if(h[l][x]>h[l][x+1])dfs(l,x+1);            //\u4e0b\u9762\u56db\u884c\u641c\u7d22\u5468\u56f4\u6c34\u53ef\u4ee5\u5230\u8fbe\u7684\u5730\u65b9\n    if(h[l][x]>h[l+1][x])dfs(l+1,x);\n    if(h[l][x]>h[l-1][x])dfs(l-1,x);\n    if(h[l][x]>h[l][x-1])dfs(l,x-1);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<=n;i++)\n      for(int j=0;j<=m;j++)\n        h[i][j]=H;                                        //\u521d\u59cb\u5316\u57ce\u5e02\u6d77\u62d4\n    for(int i=1;i<=m;i++)\n      for(int j=1;j<=m;j++)\n          f[i][j]=505;                                   //\u521d\u59cb\u5316\uff0c\u4ee5\u53d6\u6700\u5c0f\u503c\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=m;j++)\n        scanf(\"%d\",&h[i][j]);\n//\u8ba9\u6bcf\u4e2a\u6e56\u6cca\u57ce\u5e02\u90fd\u5efa\u4e0a\u84c4\u6c34\u7ad9dfs\uff0c\u5f97\u5230\u662f\u5426\u53ef\u4ee5\u7ed9\u6240\u6709\u6c99\u6f20\u57ce\u5e02\u8f93\u6c34\n```\n*************************************************************\n    for(int i=1;i<=m;i++)dfs(1,i);                   \n\n    for(int i=1;i<=m;i++)\n\n      if(!a[n][i])ans1++;\n\n*************************************************************\n\nif(ans1)printf(\"0\\n%d\",ans1);                        //\u8f93\u51fa\u4e0d\u53ef\u80fd\u548c\u57ce\u5e02\u6570\uff0c\u5426\u5219\u8fdb\u884c\u7b2c\u4e8c\u6b65\n\n\n```cpp\n    else{\n        for(int k=1;k<=m;k++){                           //\u6c42\u6bcf\u4e2a\u6e56\u6cca\u57ce\u5e02\u8986\u76d6\u533a\u95f4\n          for(int i=1;i<=n;i++)                              //\u521d\u59cb\u5316\u6807\u8bb0\n            for(int j=1;j<=m;j++)\n              a[i][j]=0;\n          dfs(1,k);                                              //\u6df1\u641c\n          int ooo=0;                                             //\u8f85\u52a9\u53d8\u91cf\n          for(int i=1;i<=m;i++){\n              if(a[n][i]&&!ooo){c[k].l=i;ooo=1;}\n              if(!a[n][i]&&ooo){c[k].r=i-1;ooo=0;}    //\u8bb0\u5f55\u533a\u95f4\u5de6\u8fb9\u754c\n              if(i==m&&ooo){c[k].r=i;ooo=0;}           //\u8bb0\u5f55\u53f3\u8fb9\u754c\n          }\n          for(int i=c[k].l;i<=c[k].r;i++)\n            for(int j=i;j<=c[k].r;j++){\n                f[i][j]=1;                                               //\u8bb0\u5f55  ( i  , j )  \u533a\u95f4\u57ce\u5e02\u88ab\u8986\u76d6\u6700\u5c11\u9700\u8981\u4e00\u4e2a\u84c4\u6c34\u7ad9\n            }\n        }\n           //\u56db\u7ef4dp\uff08\u4f1aT\u4e00\u4e2a\u70b9\uff09\n        for(int j=0;j<=m;j++)                                                     //\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\uff0c\u4ee5\u5f97\u5230\u63a5\u4e0b\u6765\u52a8\u6001\u8f6c\u79fb\u7684\u9700\u8981\u72b6\u6001\n          for(int i=1;i<=m;i++){                                                  //\u679a\u4e3e\u533a\u95f4\u5de6\u8fb9\u754c\n            int pos=min(m,i+ha);                                                  //\u9632\u6b62\u8d8a\u754c\n              for(int k=i;k<=pos;k++)                                           //\u679a\u4e3e\u53f3\u8fb9\u754c\n                for(int l=i;l<=k;l++)                                               //\u679a\u4e3e\u533a\u95f4\u4e2d\u95f4\u503c\n                f[i][k]=min(f[i][k],f[i][l]+f[l+1][k]);                              \n                           //\u8f6c\u79fb\u65b9\u7a0b\uff1a\u533a\u95f4\uff08i   \uff0ck\uff09\u6700\u5c11\u9700\u8981 f[i][k] \u4e2a\u84c4\u6c34\u7ad9\uff0c\u5982\u679c f [ i ][ l ] + f [ l + 1 ][ k ] \u6bd4 f [ i ][ k ] \u5c0f\u5219\u66f4\u65b0      \n                  }\n        printf(\"1\\n%d\",f[1][m]);                                           //\u8f93\u51fa\u6240\u6709\u6c99\u6f20\u57ce\u5e02\u90fd\u4f9b\u6c34\u6700\u5c11\u9700\u8981 f [ 1 ] [ m ] \u4e2a\u84c4\u6c34\u7ad9\n    }\n    return 0;\n}\n2 . \u7136\u540e\u662f\u4e8c\u7ef4dp:(\u4ee3\u7801\u5927\u90e8\u5206\u4e0e\u7b2c\u4e00\u4e2a\u4ee3\u7801\u76f8\u540c\uff0c\u5c31\u4e0d\u518d\u6ce8\u91ca\u4e86\uff09\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define maxn 505\n#define H 1e6+1\nusing namespace std;\nstruct Ha{\n    int l,r;\n}c[maxn];\nint n,m,h[maxn][maxn],a[maxn][maxn]={0},f[maxn][maxn],dp[maxn],ans1=0,ans2=0;\nvoid dfs(int l,int x){\n    if(a[l][x])return ;\n    a[l][x]=1;\n    if(h[l][x]>h[l][x+1])dfs(l,x+1);\n    if(h[l][x]>h[l+1][x])dfs(l+1,x);\n    if(h[l][x]>h[l-1][x])dfs(l-1,x);\n    if(h[l][x]>h[l][x-1])dfs(l,x-1);\n}\nint main(){\n    freopen(\"flow.in\",\"r\",stdin);\n    freopen(\"flow.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=m;j++)\n        h[i][j]=H;\n    for(int i=1;i<=m;i++)\n      for(int j=1;j<=m;j++){\n          f[i][j]=505;dp[j]=505;\n      }\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=m;j++)\n        scanf(\"%d\",&h[i][j]);\n    for(int i=1;i<=m;i++)dfs(1,i);\n    for(int i=1;i<=m;i++)\n      if(!a[n][i])ans1++;\n    if(ans1)printf(\"0\\n%d\",ans1);\n    else{\n        for(int k=1;k<=m;k++){\n          for(int i=1;i<=n;i++)\n            for(int j=1;j<=m;j++)\n              a[i][j]=0;\n          dfs(1,k);\n          int ooo=0;\n          for(int i=1;i<=m;i++){\n              if(a[n][i]&&!ooo){c[k].l=i;ooo=1;}\n              if(!a[n][i]&&ooo){c[k].r=i-1;ooo=0;}\n              if(i==m&&ooo){c[k].r=i;ooo=0;}\n          }\n          //printf(\"%d %d\\n\",c[k].l,c[k].r);\n          for(int i=c[k].l;i<=c[k].r;i++)\n            for(int j=i;j<=c[k].r;j++){\n                f[i][j]=1;                                                    //\u9884\u5904\u7406\n                if(i==1)dp[j]=1;                                            //\u9884\u5904\u7406\n            }\n        }\n        for(int i=1;i<=m;i++){                               //\u679a\u4e3e\u4ee51\u4e3a\u533a\u95f4\u5de6\u8fb9\u754c\u7684\u53f3\u8fb9\u754c\n            for(int j=1;j<=i;j++)                              //\u679a\u4e3e\u4e2d\u95f4\u57ce\u5e02\uff0c\u66f4\u65b0dp[i]\n              dp[i]=min(dp[i],dp[j]+f[j+1][i]);\n                        // dp[ i ]\u8bb0\u5f55 ( 1 , i ) \u533a\u95f4\u57ce\u5e02\u4f9b\u6c34\u6700\u5c11\u9700\u8981 dp[ i ] \u4e2a\u84c4\u6c34\u7ad9,f[j+1][i] \u662f\u9884\u5904\u7406\u51fa\u6765\u7684        \n                 }\n        printf(\"1\\n%d\",dp[m]);\n    }\n    return 0;\n}\n```",
        "postTime": 1507729258,
        "uid": 45557,
        "name": "\u4e1c\u6797\u6842\u9999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5206\u7c7b\u5230dp\u91cc\u4e86\uff0c\u611f\u89c9dp\u4e0d\u662f\u4e3b\u5e72\u7ebf\u3002\u65b9\u6cd5\u5e94\u8be5\u90fd\u662f\u5dee\u4e0d\u591a\u7684\u3002\n\n\u5bf9\u4e8e\u65e0\u89e3\u7684\u5224\u65ad\uff0c\u6211\u4eec\u9996\u5148\u628a\u7b2c\u4e00\u884c\u6240\u6709\u7684\u70b9\u5168\u90fd\u52a0\u5230\u961f\u5217\u91cc\uff0c\u8dd1\u4e00\u4e2abfs\uff0c\u770b\u770b\u6700\u540e\u4e00\u884c\u662f\u5426\u6709\u5230\u4e0d\u4e86\u7684\u70b9\u3002\n\n\u7136\u540e\uff0c\u5982\u679c\u6709\u89e3\uff0c\u6211\u4eec\u518d\u628a\u7b2c\u4e00\u884c\u7684\u70b9\uff0c\u4e00\u6b21\u53ea\u52a0\u4e00\u4e2a\u70b9\u5230\u961f\u5217\u91cc\u9762\u53bb\uff0c\u7136\u540e\u8dd1bfs\uff0c\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u80fd\u5230\u6700\u540e\u4e00\u884c\u4e2d\u7684\u54ea\u4e9b\u70b9\uff0c\u800c\u4e14\u53ef\u4ee5\u8bc1\u660e\uff0c\u80fd\u5230\u7684\u70b9\uff0c\u5728\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u5426\u5219\u5c31\u662f\u65e0\u89e3\uff08\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u7528\u5230\u65e0\u89e3\u5224\u65ad\u91cc\u9762\u53bb\uff0c\u53cd\u6b63\u6211\u6ca1\u6709\u52a0\uff09\uff0c\u7136\u540e\u6e05\u7a7a\u961f\u5217\uff0c\u518d\u52a0\u4e0b\u4e00\u4e2a\u70b9\uff0c\u91cd\u590dbfs\u3002\n\n\u6211\u4eec\u628a\u80fd\u5230\u8fbe\u7684\u70b9\u6240\u5f62\u6210\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8bbe\u4e3al[i],\u53f3\u7aef\u70b9\u8bbe\u4e3ar[i],\u90a3\u4e48\u6211\u4eec\u5148\u628a\u8fd9\u4e9b\u533a\u95f4\u6309\u5de6\u7aef\u70b9\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\n\n\u7136\u540e\u8003\u8651\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff1a\n\n\u8bbedp[j]\u8868\u793a\u7528\u524di\u4e2a\u533a\u95f4\uff0c\u518d\u679a\u4e3e\u4e00\u4e2aj\uff0c\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u6240\u80fd\u5bf9\u54ea\u4e9b\u70b9\u4ea7\u751f\u8d21\u732e\uff08\u5373\u4ecel[i]\u5230r[i]\uff09\uff0c\u8986\u76d6[1....j]\u6240\u9700\u7684\u6700\u5c11\u533a\u95f4\u6570\n\n\u5f88\u5bb9\u6613\u6839\u636e\u6240\u8bbe\u5f97\u5230\uff1adp[j]=min(dp[l[i]-1]+1\uff08\u5373\u7528\u4e86\u7b2ci\u4e2a\u533a\u95f4\u6765\u8986\u76d6[l[i]....j]\uff0c\u90a3\u4e48\u5c31\u662fdp[l[i]-1]+1\uff0c\u5bf9\u4e0d\u5bf9\uff1f\uff09\n\n\u6700\u540e\u8f93\u51fadp[m]\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u4e2a\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u6709\u540c\u5b66\u76f4\u63a5\u628a\u4e24\u79cd\u60c5\u51b5\u653e\u5728\u4e00\u8d77\u641e\u4e86\uff0c\u90a3\u6837\u7684\u8bdd\uff0c\u4e0d\u51fa\u610f\u5916\uff0c\u4f1aTle\u7b2c4\u4e2a\u70b9\uff0c\u56e0\u4e3a\u7b2c4\u4e2a\u70b9\u662f\u65e0\u89e3\uff0c\u540c\u65f6\u8fd9\u4e2a\u70b9\u4f1a\u4f7f\u6211\u4eec\u4e00\u6b21\u4e00\u6b21bfs\u7684\u6548\u7387\u8fbe\u5230\u4e0a\u9650n\\*m^2\uff0c\u6b64\u65f6\u7406\u8bba\u4e0a\u5c31\u5df2\u7ecf\u8d85\u65f6\u4e86\u3002\u81f3\u4e8e\u697c\u4e0b\u8bf4\u7684\uff08\u53ea\u6709\u5f53\u524d\u4f4d\u7f6e\u6bd4\u4e24\u6bb5\u9ad8\u624dbfs\uff09\u8fd9\u4e2a\u4f18\u5316\uff0c\u5bf9\u4e8e\u65e0\u89e3\u5224\u65ad\uff0c\u6211\u7684\u505a\u6cd5\u6548\u7387\u548c\u4ed6\u4eec\u52a0\u4e86\u8fd9\u4e2a\u4f18\u5316\u662f\u4e00\u6837\u7684\uff0c\u800c\u5bf9\u4e8e\u6709\u89e3\u7684\u60c5\u51b5\uff0c\u6211\u8bd5\u4e86\u4e00\u4e0b\uff0c\u5e76\u6ca1\u6709\u52a0\u5feb\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define re register\nusing namespace std;\nconst int N=505;\nconst int dx[4]={1,0,-1,0};\nconst int dy[4]={0,1,0,-1};\nint n,m,head=0,tail=0;\nint a[N][N],dp[N],x[N*N],y[N*N],l[N],r[N];\nbool vis[N][N];\ninline int read(){\n    re int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\ninline void BFS(){\n    while (head<tail){\n        re int sx=x[++head],sy=y[head];\n        for (re int k=0;k<4;k++){\n            re int nx=sx+dx[k],ny=sy+dy[k];\n            if (nx>0 && nx<=n && ny>0 && ny<=m && !vis[nx][ny] && a[nx][ny]<a[sx][sy]){\n                vis[nx][ny]=true;\n                x[++tail]=nx,y[tail]=ny;\n            }\n        }\n    }\n}\nint main(){\n    n=read(),m=read();\n    for (re int i=1;i<=n;i++)\n        for (re int j=1;j<=m;j++)\n            a[i][j]=read();\n    for (re int i=1;i<=m;i++){\n        vis[1][i]=true;\n        x[++tail]=1;y[tail]=i;\n    }\n    BFS();\n    int tot=0;\n    for (re int i=1;i<=m;i++)tot+=vis[n][i];\n    if (tot<m)printf(\"0\\n%d\",m-tot);\n    else{\n        for (re int i=1;i<=m;i++){\n            memset(vis,0,sizeof(vis));\n            head=tail=0;x[++tail]=1;y[tail]=i;\n            vis[1][i]=true;\n            BFS();\n            for (re int j=1;j<=m;j++)\n                if (vis[n][j]){l[i]=j;break;}\n            for (re int j=l[i];j<=m;j++)\n                if (!vis[n][j+1]){r[i]=j;break;}\n        }\n        for (re int i=1;i<=m;i++)\n            for (re int j=i+1;j<=m;j++)\n                if (l[i]>l[j] || (l[i]==l[j] && r[i]>r[j])){\n                    l[i]^=l[j]^=l[i]^=l[j];\n                    r[i]^=r[j]^=r[i]^=r[j];\n                }\n        memset(dp,0x3f,sizeof(dp));\n        dp[0]=0;\n        for (re int i=1;i<=m;i++)\n            for (re int j=l[i];j<=r[i];j++)\n                dp[j]=min(dp[j],dp[l[i]-1]+1);\n        printf(\"1\\n%d\",dp[m]);\n    }\n    return 0;\n}\n\u5728\u6b64Orz...rank1\u7684dalao\u30028ms\u7684\u8ddd\u79bb\u65e0\u6cd5\u8d85\u8d8a\u3002\n```",
        "postTime": 1505009783,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u8bb2\u4e00\u8bb2a\u8fd9\u9053\u9898\u7684\u5fc3\u8def\u5386\u7a0b\u5427\n\n\u6709\u5fc3\u4eba\u53ef\u4ee5\u53bb\u63d0\u4ea4\u7a0b\u5e8f\u91cc\u770b\u4e0b\u6211ID\u7684\u63d0\u4ea4\u91cf\uff0cps\uff1a\u7b2c\u4e00\u4e2a90\u5206\u662f\u542c\u8bf4\u6570\u636e\u52a0\u5f3a\u4e86\uff0c\u627e\u4e86\u4e2a\u6807\u7a0b\u8bd5\u4e86\u4e00\u4e0b\n\n\u5c0f\u95ee\u9898\u5f88\u591a\n\n0.\u9898\u610f\u4e0d\u6e05 \u5e72\u65f1\u533a\u6ca1\u6709\u770b\u5230\uff080-->20) \u8fd9\u4e2a\u4e00\u5b9a\u8981\u63d0\u9192\uff0c\u4e0d\u7136\u770b\u697c\u4e0b\u9898\u89e3\u7684\u8bc1\u660e\u90fd\u662f\u767d\u8d39\uff0c\u5e72\u65f1\u533a\u6307\u7684\u662f\u7b2cn\u884c\uff0c\u4e00\u5b9a\u8981\u770b\u6e05\uff0c\u4e0d\u8981\u8d70\u6211\u7684\u8001\u8def\u3002\n\n1.\u6570\u7ec4\u5f00\u5c0f\n\n2.dp for (int j=line[i].le\\_-1\\_;j<=line[i].ri;j++)\n\n\u6ca1-1 \uff0820-->80\uff09\n\n3.\u5c45\u7136\u628an\uff0cm\u5b9a\u4e49\u5728bool\u91cc\uff0c\u7ed3\u679c\u8fd8\u670980\uff01oh my god \u7136\u540e\u6539\u4e86\u4e4b\u540e\u53d8\u621090 t\u4e86\u4e00\u4e2adian\n\n4.\u6700\u540e\u5728\u540c\u5b66\u5e2e\u52a9\u4e0b\u52a0\u4e86\u4e2a\u4f18\u5316 if (hi[1][i]>=hi[1][i-1]&&hi[1][i]>=hi[1][i+1])bfs(1,i,i) \u7ec8\u4e8eA\u6389\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u662f\u501f\u9274\u697c\u4e0b\u51e0\u7bc7\u9898\u89e3\u7684\uff0c\u5728\u8fd9\u513f\u4e5f\u4e0d\u591a\u8d58\u8ff0\u3002\u4e3b\u8981\u548c\u5927\u5bb6\u5206\u4eab\u4e0b\u5fc3\u8def\u5386\u7a0b\uff0ca\u9898\u5343\u4e07\u4e0d\u8981\u653e\u5f03\uff0c\u8981\u7ec6\u81f4\uff0c\u50cf\u6211\u4e00\u6837\u9532\u800c\u4e0d\u820d\uff0c\u603b\u4f1a\u628a\u9898\u76eea\u6389\u7684\u3002\n\n\u603b\u4f53\u601d\u8def\u662f\u641c\u7d22+\u7ebf\u6bb5\u533a\u95f4\u8986\u76d6\n\n\u7b2c\u4e00\u6b65\u6211\u7528\u7684\u662f\u5e7f\u641c\uff0c\u5176\u5b9e\u6700\u597d\u7684\u89e3\u6cd5\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4f46\u662f\u592a\u96be\u6253\u4e86\uff0c\u672c\u849f\u84bb\u4e5f\u4e0d\u662f\u5f88\u4f1a\uff0c\u6240\u4ee5\u6253\u4e86\u5e7f\u641c\uff0c\u641c\u5b8c\u4e4b\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u4e2a\u84c4\u6c34\u7ad9\u6240\u51fa\u6765\u7684\u6700\u5de6\u548c\u6700\u53f3\u8fb9\u80fd\u5230\u7684\u5e72\u65f1\u533a\u7684\u57ce\u5e02(\u770b\u4f5c\u4e00\u6761\u7ebf\u6bb5)\uff0c\u7136\u540e\u7528\u8fd9m\u6761\u7ebf\u6bb5\uff08m\u4e2a\u84c4\u6c34\u7ad9\uff09\u6765\u8986\u76d6\u6574\u4e2a\u533a\u95f4\u3002\u697c\u4e0b\u597d\u591a\u8bf4\u8d2a\u5fc3\uff0c\u4f46\u6211\u4e00\u65f6\u6ca1\u6709\u60f3\u5230\uff0c\u6240\u4ee5\u6253\u4e86dp\uff0c\u8be6\u89c1\u5e95\u4e0b\u9644\u4e0a\u7684ac\u4ee3\u7801\uff0c\u5e0c\u671b\u5404\u4f4d\u770b\u4e86\u672c\u9898\u89e3\u4e4b\u540e\u80fd\u591f\u66f4\u52a0\u7684\u7ec6\u81f4\uff0c\u80fd\u5bf9a\u9898\u5e26\u6765\u5e2e\u52a9\uff0c\u4e0d\u80dc\u8363\u5e78\u3002\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define N (1000+10)\nusing namespace std;\nint hi[N][N],h,t,tot,le[N],ri[N],f[N],n,m;\nbool b[N][N],bl[N][N],tx;\nstruct que{\n    int x,y;\n}q[N*N];\nstruct are{\n    int le,ri;\n}line[N];\nbool cmp(are x,are y){\n    if (x.le>y.le) return false;\n    if (x.le==y.le) return (x.ri>y.ri);\n    return true;\n}\nvoid push(int x,int y,int l){\n    if (x<=0||x>n||y<=0||y>m) return;\n    if (b[x][y]) return;\n    if (x==n&&y<line[l].le) line[l].le=y;\n    if (x==n&&y>line[l].ri) line[l].ri=y;\n    q[++t].x=x; q[t].y=y;\n    b[x][y]=true;\n    bl[x][y]=true;\n}\nvoid bfs(int x,int y,int l){ //\u8868\u793a\u641c\u5230[x,y] \u7b2cl\u5217\uff0c\u5176\u5b9el\u6ca1\u6709\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u662f\u4e3a\u4e86\u548c\u524d\u9762\u7684\u683c\u5f0f\u4fdd\u6301\u4e00\u81f4\u5c31\u52a0\u4e0a\u4e86\n    line[l].le=m+1; line[l].ri=0;//lin[i]\u8868\u793a\u7b2ci\u884c\u7684\u84c4\u6c34\u7ad9\u6700\u5de6\u5230.le\uff0c\u6700\u53f3\u5230ri\n    memset(b,false,sizeof(b));//\u6bcf\u5e7f\u641c\u4e00\u4e2a\u65b0\u70b9\u6ce8\u610f\u6e05\uff0c\u540e\u9762\u5e38\u89c4\u5e7f\u641c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n    t=0;\n    h=0;\n    push(x,y,l);\n    while (h<t){\n        h++;\n        int x1=q[h].x,y1=q[h].y;\n        if (hi[x1][y1]>hi[x1+1][y1]) push(x1+1,y1,l);\n        if (hi[x1][y1]>hi[x1-1][y1]) push(x1-1,y1,l);\n        if (hi[x1][y1]>hi[x1][y1+1]) push(x1,y1+1,l);\n        if (hi[x1][y1]>hi[x1][y1-1]) push(x1,y1-1,l);\n    } \n    //printf(\"%d %d\\n\",line[l].le,line[l].ri);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)\n    for (int j=1;j<=m;j++) scanf(\"%d\",&hi[i][j]);\n    for (int i=1;i<=m;i++) if (hi[1][i]>=hi[1][i-1]&&hi[1][i]>=hi[1][i+1])bfs(1,i,i);\n    int to=0;\n    for (int j=1;j<=m;j++) if (bl[n][j]==false) to++;//\u7279\u5224\n    if (to>0){\n        printf(\"0\\n%d\",to);\n        return 0;\n    }\n    sort(line+1,line+m+1,cmp);\n    //for (int i=1;i<=m;i++){\n    //    printf(\"%d %d\\n\",line[i].le,line[i].ri);\n    //}\n    memset(f,127,sizeof(f));\n    f[1]=0;//dp f[i]\u8868\u793a\u8986\u76d6\u5230i\u6240\u9700\u7684\u6700\u5c11\u7ebf\u6bb5\u6570\n    for (int i=1;i<=m;i++){ \n        if (line[i].le==m+1||line[i].ri==0) continue;\n        for (int j=line[i].le-1;j<=line[i].ri;j++) \n            f[line[i].ri]=min(f[line[i].ri],f[j]+1);\n        for (int j=line[i].le;j<=line[i].ri;j++) f[j]=min(f[j],f[line[i].ri]);    \n    } \n    //for (int i=1;i<=m;i++) printf(\"%d \",f[i]);\n    printf(\"1\\n%d\",f[m]);\n}\n```",
        "postTime": 1499784907,
        "uid": 15232,
        "name": "Michael_Li",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u641e\u4e86\u5f88\u957f\u65f6\u95f4\u7ec8\u4e8eAC\u4e86\u3002\u3002\u3002\u3002\n\n\u770b\u697c\u4e0b\u5927\u795e\u5927\u591a\u7528\u7684\u662fdfs+DP\u6216\u8005\u8d2a\u5fc3\uff0c\u4f46\u662f\u6211\u611f\u89c9\u8fd9\u9053\u9898\u7528bfs\u597d\u4e00\u70b9\uff0c\u6700\u540e\u518d\u8d2a\u5fc3\u7ebf\u6bb5\u5b8c\u5168\u8986\u76d6\u3002\n\n\u5177\u4f53\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int INF =0x7fffffff;\nstruct nod\n{\n    int x,y;\n};\nstruct E\n{\n    int l, r;\n} edge[501];\nint n,m,a[501][501];\nqueue<nod>q;\nint dirx[4]= {-1,0,1,0};\nint diry[4]= {0,-1,0,1};\nint vis[501][501];\nint lm,rm;\nint size=0;\nint cmp(E a,E b)\n{\n    if(a.l==b.l)return a.r<b.r;\n    return a.l<b.l;\n}\nint able(nod nex,nod now)\n{\n    int x=nex.x,y=nex.y;\n    int nx=now.x,ny=now.y;\n    if(x<1||y<1||x>n||y>m||a[nx][ny]<=a[x][y])return 0;\n    return 1;\n}\nvoid bfs(nod st,int o)\n{\n    while(!q.empty())q.pop();\n    nod now,nex;\n    q.push(st);\n    vis[1][o]=o;//\u8fd9\u91cc\u5f88\u5de7\u5999\uff0c\u907f\u514d\u4e86\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u8bbe\u4e3a\u96f6\u3002\n    while(!q.empty())\n    {\n        now=q.front();\n        q.pop();\n        for(int i=0; i<4; i++)\n        {\n            nex.x=now.x+dirx[i];\n            nex.y=now.y+diry[i];\n            if(vis[nex.x][nex.y]==o)continue;\n            if(able(nex,now))\n            {\n                vis[nex.x][nex.y]=o;\n                q.push(nex);\n                if(nex.x==n)\n                {\n                    //\u5230\u8fbe\u6700\u540e\u4e00\u884c\n                    lm=min(lm,nex.y);\n                    rm=max(rm,nex.y);\n                }\n            }\n        }\n    }\n    edge[o].l=lm;\n    edge[o].r=rm;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=m; j++)\n            cin>>a[i][j];\n    nod fir;\n    for(int i=1; i<=m; i++)\n    {\n        if(a[1][i]>=a[1][i-1]&&a[1][i]>=a[1][i+1])//\u91cd\u8981\u526a\u679d\uff0c\u5982\u679c\u8fd9\u4e2a\u6bd4\u4e24\u8fb9\u90fd\u5927\u6216\u8005\u76f8\u7b49\u624dbfs\uff0c\u5426\u5219\u89c1else\uff0c\u5c06\u8be5\u8fb9\u5de6\u7aef\u70b9\u8bbe\u4e3aINF,\u90fd\u7aef\u70b9\u8bbe\u4e3a0\u3002\n        {\n            lm=INF;\n            rm=0;\n            fir.x=1;\n            fir.y=i;\n            bfs(fir,i);\n        }\n        else\n        {\n            edge[i].l=INF;edge[i].r=0;\n        }    \n    }\n    int cnt=0;\n    for(int i=1; i<=m; i++)\n        if(vis[n][i]==0)\n            cnt++;\n    if(cnt)\n    {\n        cout<<0<<endl<<cnt;\n        return 0;\n    }\n    cout<<1<<endl;\n    sort(edge+1,edge+m+1,cmp);\n    edge[1].l=1;//\u8fd9\u4e2a\u4e5f\u5751\u4e86\u6211\u597d\u4e45\uff0c\u5982\u679c\u80fd\u591f\u5168\u90e8\u8986\u76d6\uff0c\u90a3\u4e48\u6700\u5f00\u59cb\u4e00\u5b9a\u8981\u8bbe\u4e3a1\u3002\n    int now=0,to=0,ans=0;//now\u8868\u793a\u5f53\u524d\u6700\u591a\u8d70\u5230\u54ea\u3002\n    for(int i=1; i<=m; i++)\n    {\n        if(edge[i].l==INF)continue;\n        if(now+1>=edge[i].l)to=max(edge[i].r,to);\n        else\n```\n{//\u5982\u679c\u4e24\u4e2a\u8fde\u4e0d\u4e0a\uff0c\u90a3\u4e48\u5fc5\u987b\u589e\u52a0\u4e00\u6761\u7ebf\u6bb5\uff0c\u7531\u4e8e\u5df2\u7ecf\u6392\u5e8f\uff0c\u6240\u4ee5\u53ea\u589e\u52a0\u4e00\u6761\n```cpp\n            ans++;\n            now=to;\n            to=max(to,edge[i].r);\n        }\n    }\n    if(now!=m)ans++;\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1496742246,
        "uid": 39315,
        "name": "Demon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u55ef\uff0c\u601d\u8def\u697c\u4e0b\u5927\u795e\u5df2\u7ecf\u8bb2\u5f97\u5f88\u597d\u4e86\uff0c\u849f\u84bb\u5728\u8fd9\u91cc\u4f5c\u4e3a\u76ee\u524drank1(50ms)\u8bf4\u4e00\u4e0b\u5e38\u6570\u4f18\u5316\uff08\u5f53\u7136\uff0c\u662f\u65f6\u95f4\u5e38\u6570\uff0c\u5927\u795e\u4f1a\u6ce8\u610f\u5230\u6211\u5f00\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\uff09\u3002\n\n1\uff0c\u5982\u679c\u4f7f\u7528\u8bb0\u5fc6dfs\u7684\u8bdd\uff0c\u4e0d\u8981\u8fdb\u6765\u53d1\u73b0\u8bbf\u95ee\u8fc7\u624d\u51fa\u53bb\uff0c\u8fd9\u4e2a\u5728\u6709\u4e9b\u9898\u76ee\u4f1a\u6d6a\u8d39\u6389\u5927\u91cf\u65f6\u95f4\uff08\u66fe\u7ecf\u88ab\u5361\u8fc7\uff09\u3002\n\n2\uff0c\u8bfb\u5165\u4f18\u5316\u7684\u5224\u65ad\u4e0d\u8981\u52a0\u7a7a\u683c\u4e86\uff0c\u5426\u5219\u65f6\u95f4\u6548\u7387\u4f1a\u6253\u6298\u3002\n\n3\uff0cmin\u548cmax\u51fd\u6570\u6700\u597d\u624b\u5199\uff0c\u5982\u679c\u662f\u51fd\u6570\u7684\u8bdd+inline+const int &...\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u9009\u4e2a\u4e0d\u662f\u7279\u522b\u80cc\u7684\u4e8b\u4ef6\u6d4b\u8bc4\u4e00\u4e0b\u5c31rank1\u4e86\u2026\u2026\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u540e\u9762\u7684\u8d2a\u5fc3\u5199\u7684\u5176\u5b9e\u53ef\u4ee5\u4f18\u5316\uff0c\u4f46\u662f\u849f\u84bb\u5b9e\u5728\u6ca1\u80fd\u529b\u2026\u2026\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint dx[5]={0,-1,0,1,0},\n    dy[5]={0,0,1,0,-1};\nint h[510][510],n,m;\nshort lef[510][510],rig[510][510];\nbool vis[510][510];\nstruct first_line{\n    short lef,rig;\n}city[510];\nint get_num()\n{\n    char ch;\n    while((ch=getchar())=='\\n'||ch=='\\r');\n    int num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') num=num*10+ch-'0';\n    return num;\n}\ninline int min(const int &a,const int &b)\n{    return a<b?a:b;    }\ninline int max(const int &a,const int &b)\n{    return a>b?a:b;    }\nint dfs(int x,int y)\n{\n    vis[x][y]=true;\n    if(x==n) lef[x][y]=rig[x][y]=y;\n    else{\n        lef[x][y]=m+1;\n        rig[x][y]=0;\n    }\n    for(int i=1;i<=4;i++)\n    {\n        int px=x+dx[i],\n            py=y+dy[i];\n        if(px>=1&&px<=n&&py>=1&&py<=m&&h[x][y]>h[px][py])\n        {\n            if(!vis[px][py]) dfs(px,py);\n            lef[x][y]=min(lef[x][y],lef[px][py]);\n            rig[x][y]=max(rig[x][y],rig[px][py]);\n        }\n    }\n}\nbool city_cmp(const first_line &a,const first_line &b)\n{\n    if(a.lef!=b.lef)\n        return a.lef<b.lef;\n    else return a.rig>b.rig;\n}\nint main()\n{\n    n=get_num();m=get_num();\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            h[i][j]=get_num();\n    for(int j=1;j<=m;j++)\n        if(!vis[1][j])\n            dfs(1,j);\n    int cant_cnt=0;\n    for(int j=1;j<=m;j++)\n        if(!vis[n][j])\n            cant_cnt++;\n    if(cant_cnt)\n    {\n        printf(\"0\\n\");\n        printf(\"%d\\n\",cant_cnt);\n    }\n    else{\n        printf(\"1\\n\");\n        for(int j=1;j<=m;j++)\n            city[j].lef=lef[1][j],\n            city[j].rig=rig[1][j];\n        sort(city+1,city+m+1,city_cmp);\n//        for(int i=1;i<=m;i++)\n//            printf(\"%d %d\\n\",city[i].lef,city[i].rig);\n        int cur=1,ans_cnt=1,i=2;\n        while(city[cur].rig<m)\n        {\n            int maxk=cur;\n            while(i<=m&&city[i].lef<=city[cur].rig+1)\n            {\n                if(city[i].rig>city[maxk].rig) maxk=i;\n                i++;\n            }\n            cur=maxk;\n            ans_cnt++;\n        }\n        printf(\"%d\\n\",ans_cnt);\n    }\n    return 0;\n}\n```",
        "postTime": 1479213795,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u96be\u70b9\u5728\u4e8e\u7406\u89e3:1,\u5bf9\u4e8e\u4e00\u5f20\u56fe\u5047\u5982\u53ef\u884c,\u5219\u6709\u4ece\u7b2c\u4e00\u884c\u6bcf\u4e00\u4e2a\u70b9\u8fdb\u884c\u641c\u7d22\u5f97\u5230\u7684\u7ed3\u679c\u662f\u8fde\u7eed\u7684\u533a\u95f4;2,\u5bf9\u4e8e\u8fd9\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u53ef\u7528\u533a\u95f4\u8986\u76d6(\u8d2a\u5fc3)\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\n\n\u4e0b\u9762\u8d34\u4ee3\u7801(\u6253\u5f97\u5f88\u5197\u957f,\u4ec5\u4f9b\u53c2\u80030)-\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nconst int maxN = 500;\nconst int maxM = 500;\nint a[maxN][maxM];\nint q[maxN * maxM][2];\nint vis[maxN][maxM];\nint flag[maxM];\nint f[maxM];\nstruct node\n{\n    int L, R;\n    int friend operator <(node x, node y)\n    {\n        return x.L < y.L;\n    }\n}rec[maxM];\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 0; i < n; i ++)\n        for(int j = 0; j < m; j ++)\n            scanf(\"%d\", &a[i][j]);\n    memset(rec, -1, sizeof(rec));\n    memset(flag, 0, sizeof(flag));\n     for(int i = 0; i < m; i ++)\n     if((i == 0 || a[0][i] >= a[0][i - 1]) && (i == m - 1 || a[0][i] >= a[0][i + 1]))\n    {\n        int l = 0, r = 1;\n        q[0][0] = 0;\n        q[0][1] = i;\n        memset(vis, 0, sizeof(vis));\n        vis[0][i] = 1;\n        while(l < r)\n        {\n            if(q[l][0] == n - 1)\n            {\n                flag[q[l][1]] = 1;\n                if(rec[i].L == -1)\n                    rec[i].L = rec[i].R = q[l][1];\n                if(q[l][1] < rec[i].L)\n                    rec[i].L = q[l][1];\n                if(q[l][1] > rec[i].R)\n                    rec[i].R = q[l][1];\n            }\n            if(q[l][0] + 1 < n && ! vis[q[l][0] + 1][q[l][1]] && a[q[l][0] + 1][q[l][1]] < a[q[l][0]][q[l][1]])\n                q[r][0] = q[l][0] + 1, q[r][1] = q[l][1], vis[q[r][0]][q[r][1]] = 1, r ++;\n            if(q[l][0] - 1 >= 0 && ! vis[q[l][0] - 1][q[l][1]] && a[q[l][0] - 1][q[l][1]] < a[q[l][0]][q[l][1]])\n                q[r][0] = q[l][0] - 1, q[r][1] = q[l][1], vis[q[r][0]][q[r][1]] = 1, r ++;\n            if(q[l][1] + 1 < m && ! vis[q[l][0]][q[l][1] + 1] && a[q[l][0]][q[l][1] + 1] < a[q[l][0]][q[l][1]])\n                q[r][0] = q[l][0], q[r][1] = q[l][1] + 1, vis[q[r][0]][q[r][1]] = 1, r ++;\n            if(q[l][1] - 1 >= 0 && ! vis[q[r][0]][q[r][1] - 1] && a[q[l][0]][q[l][1] - 1] < a[q[l][0]][q[l][1]])\n                q[r][0] = q[l][0], q[r][1] = q[l][1] - 1, vis[q[r][0]][q[r][1]] = 1, r ++;\n            l ++;\n        }\n    }\n    int cnt = 0;\n    for(int i = 0; i < m; i ++)\n        if(! flag[i])\n            cnt ++;\n    if(cnt)\n    {\n        printf(\"0\\n%d\", cnt);\n        return 0;\n    }\n    sort(rec, rec + m);\n    memset(f, 0x7f, sizeof(f));\n    for (int i = 0; i < m; i ++)\n        for (int j = 0; j < m; j ++) \n            if(rec[j].L <= i && i <= rec[j].R) \n                   f[i] = min(f[i], f[rec[j].L - 1] + 1);\n    printf(\"1\\n%d\", f[m - 1]);\n}\n```",
        "postTime": 1476273022,
        "uid": 21910,
        "name": "Ken_He",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "**DFS/BFS + \u8d2a\u5fc3**\n\n\n1. \u5148\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u6bcf\u4e00\u683c\u4e3a\u8d77\u70b9\u641c\u7d22\u4e00\u6b21\uff0c\u8fb9\u626b\u8fb9\u7f6e\u6807\u5fd7\uff0c\u641c\u7d22\u5b8c\u6210\u540e\u6700\u540e\u4e00\u884c\u4f1a\u751f\u6210\u51e0\u6761\u7ebf\u6bb5\uff0c\u5c06\u5176\u8bb0\u5f55\u4e0b\u6765\u3002\uff08\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u53ea\u6709h[i][1]>=h[i+1][1],h[i\u22121][1]\u65f6\u624d\u4ee5\u8fd9\u4e2a\u683c\u5b50\u5f00\u59cb\u8fdb\u884c\u641c\u7d22\uff0c\u8fd9\u8ba9\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u641c\u7d22\uff09\uff3bh\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u683c\u70b9\u7684\u9ad8\u5ea6\uff3d\n\n2. \u7b49\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5224\u65ad\u4e00\u4e0b\u6700\u540e\u4e00\u884c\u6bcf\u4e2a\u683c\u5b50\u662f\u5426\u5df2\u7ecf\u7f6e\u6807\u5fd7\u4e86\uff0c\u5982\u679c\u4e0d\u662f\u5c31cnt++\uff0c\u6700\u540e\u8f93\u51fa0\u548ccnt\u5c31\u53ef\u4ee5\u4e86\u3002\n\n3. \u5982\u679c\u6bcf\u4e2a\u683c\u5b50\u5df2\u7ecf\u7f6e\u6807\u5fd7\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff08\u8be6\u89c1\u5218\u6c5d\u4f73\u7c89\u4e66\u8d2a\u5fc3\u6cd5\u7b2c\u4e00\u8bb2\uff09\uff0c\u6211\u4eec\u4e4b\u524d\u641c\u7d22\u65f6\u8bb0\u5f55\u4e0b\u7684\u7ebf\u6bb5\u5c31\u6d3e\u4e0a\u4e86\u7528\u573a\u3002\n\n4. \u6211\u4eec\u5c06\u7ebf\u6bb5\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff08\u4e3b\u5173\u952e\u5b57\uff09\uff0c\u53f3\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff08\u6b21\u5173\u952e\u5b57\uff09\u3002\u6392\u5b8c\u540e\uff0c\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u662f\u4e00\u5b9a\u8981\u7559\u4e0b\u7684\uff0c\u5b83\u8986\u76d6\u7684\u533a\u57df\u6211\u4eec\u6210\u4e3a\uff1a\u7070\u8272\u533a\u57df**\uff5bi,j\uff5d**\u3002\u7136\u540e\u6211\u4eec\u4ece\u7b2c\u4e8c\u4e2a\u7ebf\u6bb5\u5f00\u59cb\uff0c\u67e5\u627e\u5de6\u7aef\u70b9\u5728**\uff5bi\uff0cj+1\uff5d**\u4e4b\u5185\u4e14\u53f3\u7aef\u70b9\u6700\u5927\u7684\u7ebf\u6bb5\u7559\u4e0b\u6765\uff0c\u6b64\u65f6\u7b54\u6848\u52a0\u4e00\u3002\u5168\u90e8\u626b\u5b8c\u4e4b\u540e\u8f93\u51fa1\u548c\u7b54\u6848\u5c31\u5b8c\u6210\u8fd9\u9053\u9898\u76ee\u4e86\u3002**\u5173\u4e8e\u8fd9\u90e8\u5206\u7684\u4f18\u5316\u662f**\uff1a\u56e0\u4e3a\u7ebf\u6bb5\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u4ece\u524d\u5f80\u540e\u626b\u5c31\u597d\u4e86\uff0c\u626b\u8fc7\u7684\u5c31\u4e0d\u7528\u518d\u626b\u4e86\u3002\n\n\n>\u8be6\u7ec6\u6587\u7ae0\u8bf7\u67e5\u770b\u6211\u7684\u535a\u5ba2:<http://blog.csdn.net/u012709325/article/details/52332460>\n",
        "postTime": 1472257395,
        "uid": 6549,
        "name": "DarkKris",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u5173\u4e8e\u6b64\u9898\u7b97\u6cd5\u7684\u4e25\u5bc6\u8bc1\u660e\uff1a\n\n\u9996\u5148\u5206\u7c7b\u8ba8\u8bba\n\n1. \u4e0d\u662f\u6240\u6709\u65f1\u533a\u90fd\u80fd\u53d6\u5230\uff0c\u8fd9\u4e2a\u60c5\u51b5\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\u6ce8\u610f\u7edf\u8ba1\u7684\u65b9\u5f0f\uff0c\u5177\u4f53\u95ee\u9898\u5728\u7b2c\u4e8c\u70b9\u6307\u51fa\u3002\n\n2. \u6240\u6709\u65f1\u533a\u90fd\u80fd\u53d6\u5230\uff0c \u6b64\u65f6\u53ef\u8bc1\u201c\u6bcf\u4e2a\u6e56\u6cca\u4e0a\u80fd\u8f93\u9001\u5230\u8fbe\u7684\u70b9\u90fd\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c \u5373\u82e5\u80fd\u9001\u8fbei\uff0c j \u90a3\u4e48\u5c31\u80fd\u9001\u8fbei~j\u5185\u6240\u6709\u7684\u70b9\u201d\uff0c \u8bc1\u660e\u5982\u4e0b\n\n\u53cd\u8bc1:\n\n\u5047\u8bbei<k<j\u82e5a\u51fa\u53d1\uff0c\u80fd\u5230i\uff0cj\uff0c\u5374\u4e0d\u80fd\u5230k\uff0c\u90a3\u4e48\u4ecea\u5230i\u7684\u8def\u5f84\u548c\u4ecea\u5230j\u7684\u8def\u5f84\u548c\u65f1\u533a\u90a3\u6761\u8fb9\u56f4\u6210\u7684\u533a\u57df\u4e2d\u5fc5\u5b9a\u6709\u4e00\u9053\u80fd\u628ak\u5c01\u95ed\u8d77\u6765\u7684\u201c\u5899\u201d\u65e2\u7136k\u88ab\u5c01\u95ed\u8d77\u6765\u4e86\uff0c\u90a3\u4e48\u5176\u4ed6\u6240\u6709\u7684\u6e56\u6cca\u70b9\u90fd\u4e0d\u80fd\u5230\u8fbek\u3002\u8bc1\u6bd5\u3002\n\n\n\u7b2c1\u70b9\u6240\u8bf4\u7684\u7edf\u8ba1\u65b9\u5f0f\u4e5f\u5c31\u662f\u4e0d\u80fd\u901a\u8fc7\u5224\u65ad\u662f\u5426\u6709\u80fd\u591f\u540c\u65f6\u5230\u8fbei\u548cj\u7684\u70b9\u6765\u65ad\u5b9a\u80fd\u5426\u5230\u8fbek\uff0c \u6211\u5728\u8fd9\u4e0a\u9762\u505a\u9519\u4e86\uff0c\u7b2c\u56db\u4e2a\u70b9\u9519\u4e86\u5f88\u4e45\uff0c\u4e00\u76f490\u5206\uff0c\u7136\u540e\u4e0d\u61c8\u5730\u4ea4\u4e86\u5f88\u591a\u4ee3\u7801\uff0c\u5360\u4e86\u8bc4\u6d4b\u673a\u8d44\u6e90\uff0c\u5e0c\u671b\u6d1b\u8c37\u7ba1\u7406\u522b\u6253\u6211\u3002\n\n\n\n\n\n\n\n\n\n\n    \n  \n\n```cpp\n//By Piamen\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int maxn = 500 + 5;\nconst int INF = 2000000000;\nint l[maxn], r[maxn], d[maxn];\nint n, m, h[maxn][maxn], vis[maxn][maxn], ans[maxn];\nvoid init(){\n    cin >> n >> m;\n    for (int i = 0; i <= n+1; i++) \n        for (int j = 0; j <= m+1; j++) \n            h[i][j] = INF; //\u6dfb\u52a0\u5899 \n    for (int i = 1; i <= n; i++) \n        for (int j = 1; j <= m; j++) \n            scanf(\"%d\", &h[i][j]);\n        for (int i = 1; i <= m; i++) l[i] = d[i] = INF; //\u6ce8\u610fl\u548cd\u7684\u521d\u59cb\u5316 \n}\nvoid dfs (int x, int y, int& s) { //x, y:\u5750\u6807 //s:\u6e56\u6cca\u8fb9\u4e0a\u7684\u53d6\u6c34\u70b9 \n    if (x == n) {\n        ans[y] = 1;\n        l[s] = min(l[s], y);\n        r[s] = max(r[s], y);\n    }\n    vis[x][y] = s;\n    if (vis[x+1][y] != s && h[x][y] > h[x+1][y]) dfs(x+1, y, s);\n    if (vis[x-1][y] != s && h[x][y] > h[x-1][y]) dfs(x-1, y, s);\n    if (vis[x][y+1] != s && h[x][y] > h[x][y+1]) dfs(x, y+1, s);\n    if (vis[x][y-1] != s && h[x][y] > h[x][y-1]) dfs(x, y-1, s);\n}\nvoid solve() {\n    for (int i = 1; i <= m; i++) \n        if ((i == 1 || i == m) || (h[1][i] >= h[1][i-1] && h[1][i] >= h[1][i-1]))//\u526a\u679d\uff0c \u7b2c\u56db\u4e2a\u70b9\u5361\u8fd9\u91cc \n            dfs(1, i, i); \n    int vis1[maxn] = {0};\n    int cnt = 0;\n  for(int i = 1; i <= m; i++) if(ans[i]) cnt++; //\u7edf\u8ba1\u65f1\u533a\u4e2d\u4e0d\u80fd\u5230\u8fbe\u7684\u4e2a\u6570 \n    if (cnt) cout << \"0\\n\" << cnt;//\u6709\u4e0d\u80fd\u5230\u8fbe\u7684 \n    else {                                                //\u6ca1\u6709\u4e0d\u80fd\u5230\u8fbe\u7684 \n        for (int i = 1; i <= m; i++)\n            for (int j = 1; j <= m; j++) if(l[j] <= i && i <= r[j]) {\n                d[i] = min(d[i], d[l[j]-1]+1); //\u8f6c\u79fb \n            }\n        cout << \"1\\n\" << d[m];\n    }\n}\nint main(){\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1472028036,
        "uid": 22393,
        "name": "Piamen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u9996\u5148\u5224\u65ad\u662f\u5426\u80fd\u5728\u6700\u540e\u4e00\u884c\u5168\u90fd\u5efa\u4e0a\u6c34\u5229\u8bbe\u5907\uff0c\u5224\u65ad\u65b9\u6cd5\u5c31\u662f\u628a\u7b2c\u4e00\u6392\u5168\u90e8\u5efa\u4e0a\u84c4\u6c34\u7ad9\u770b\u770b\u6210\u4e0d\u6210\u7acb\uff0c\u5982\u679c\u4e0d\u884c\u5c31\u76f4\u63a5\u8bb0\u5f55\u4e0b\u4e0d\u53ef\u4ee5\u7684\u6570\u76ee\u8f93\u51fa\uff0c\u63a5\u4e0b\u6765\u641c\u7d22\u6bcf\u4e00\u4e2a\u70b9\u80fd\u8fbe\u5230\u6700\u540e\u4e00\u884c\u90a3\u4e9b\u683c\u5b50\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff08\u8bc1\u660e\u770b\u697c\u4e0b\u7684\u697c\u4e0b\uff09\u3002\u6700\u540e\u95ee\u9898\u5316\u6210\u4e86m\u4e2a\u533a\u95f4\u8981\u8986\u76d6m\u4e2a\u70b9\u6240\u9700\u7684\u6700\u5c0f\u503c\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u52a8\u89c4\uff0c\u4e5f\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u6211\u7528\u7684\u662f\u8d2a\u5fc3\uff08\u8bf7\u9605\u8bfb\u4ee3\u7801\uff09\u3002\u4f46\u662f\u5f53n=1\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u95ee\u9898\uff1a\u8d2a\u5fc3\u6b7b\u5faa\u73af\uff0c\u6240\u4ee5\u641c\u7d22\u7684\u65f6\u5019\u7279\u5224\u4e00\u4e0b\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m,s[502][502],f[502][502],ans,u,l[502],r[502],Max;\nvoid dfs(int tt,int x,int y){\n    f[x][y]=1;\n    if (x==n-1 && tt){if (y<l[u])l[u]=y;if (y>r[u])r[u]=y;}\n    if (x-1>=0 && !f[x-1][y] && s[x][y]>s[x-1][y])dfs(tt,x-1,y);\n    if (x+1<n && !f[x+1][y] && s[x][y]>s[x+1][y])dfs(tt,x+1,y);\n    if (y-1>=0 && !f[x][y-1] && s[x][y]>s[x][y-1])dfs(tt,x,y-1);\n    if (y+1<m && !f[x][y+1] && s[x][y]>s[x][y+1])dfs(tt,x,y+1);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<n;i++)\n    for (int j=0;j<m;j++)\n    scanf(\"%d\",&s[i][j]);\n    for (int i=0;i<m;i++)\n    dfs(0,0,i);\n    for (int i=0;i<m;i++)\n    if (!f[n-1][i])ans++;\n    if (ans){printf(\"0\\n%d\",ans);return 0;}\n    for (int i=0;i<m;i++)\n    {\n        memset(f,0,sizeof(f));\n        u=i;l[u]=1e9;\n        if (n<2)dfs(1,0,i);\n        else if (s[0][i]>s[1][i])dfs(1,1,i);\n    }\n    u=-1;//\u8bf7\u6ce8\u610f\uff0cu\u91cd\u590d\u5229\u7528\u4e86\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u76ee\u524d\u8986\u76d6\u4e861-u\u7684\u70b9\u3002\n    while(u<m-1)\n    {\n        Max=-1;\n        for (int i=0;i<m;i++)\n        if (l[i]<=u+1 && r[i]>Max)Max=r[i];//\u627e\u51fa\u53ef\u4ee5\u8fde\u63a5\u7684\u70b9\u4e2d\u53f3\u7aef\u70b9\u6700\u5927\u7684\u70b9\n        ans++;u=Max;\n    }\n    printf(\"1\\n%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1470921792,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "bfs\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u57ce\u5e02\uff0c\u4e0d\u80fd\u5219sum++\uff0c\u8f93\u51fa\uff1belse dfs  \u641c\u7d22\u6700\u5927\u80fd\u8986\u76d6\u7684\u533a\u95f4\u2014\u2014>\u7136\u540edp \u6c42\u6700\u5c11\u7528\u591a\u5c11\u4e2a\u533a\u95f4\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nconst int MX=503;\nint a[MX][MX],m,n,sum=0,p=0,f[MX];\nint nx[4]={-1,0,1,0},ny[4]={0,1,0,-1},b[MX][MX],pl[MX],pr[MX];\nstruct ww{int x,y;}w[MX*100];\nint pd(int i,int j)\n    {if(i<1||i>n||j<1||j>m)return 0;    return 1;}\nvoid dfs(int x,int y,int ii,int p)\n{\n    if(b[x][y])return;\n    b[x][y]=1;\n    if(!p)\n    {\n        if(x==1)pl[y]=min(pl[y],ii);\n    }else if(x==1)pr[y]=max(pr[y],ii);\n    for(int i=0;i<=3;++i)\n        if(pd(x+nx[i],y+ny[i])&&a[x+nx[i]][y+ny[i]]>a[x][y])\n            dfs(x+nx[i],y+ny[i],ii,p);\n}\nvoid bfs(int x,int y)\n{\n    if(b[x][y])return;\n    int tail=1,head=0;\n    w[1].x=x;    w[1].y=y;\n    b[x][y]=1;\n    while(head<tail)\n    {\n        head++;\n        for(int i=0;i<=3;++i)\n        {\n            x=w[head%(MX*100)].x+nx[i];\n            y=w[head%(MX*100)].y+ny[i];\n            if(pd(x,y)&&!b[x][y]&&a[x][y]<a[w[head%(MX*100)].x][w[head%(MX*100)].y])\n            {\n                tail++;\n                w[tail%(MX*100)].x=x;\n                w[tail%(MX*100)].y=y;\n                b[x][y]=1;\n            }\n        }\n    }\n}\nvoid ok()\n    {fclose(stdin);    fclose(stdout);    exit(0);}\nint main()\n{\n    freopen(\"flow.in\",\"r\",stdin);\n    freopen(\"flow.out\",\"w\",stdout);\n    cin>>n>>m;\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=m;++j)cin>>a[i][j];\n     memset(b,0,sizeof(b));\n    memset(pl,0x3f,sizeof(pl));\n    memset(pr,0,sizeof(pr));\n    memset(f,0x3f,sizeof(f));\n    for(int i=1;i<=m;++i)bfs(1,i);\n    for(int j=1;j<=m;++j)\n        if(!b[n][j]){    p=1;    sum++;}\n    if(p){cout<<\"0\"<<endl<<sum;    ok();}\n    memset(b,0,sizeof(b));\n    for(int i=1;i<=m;++i)dfs(n,i,i,0);\n    memset(b,0,sizeof(b));\n    for(int i=m;i>=1;--i)dfs(n,i,i,1);\n    f[0]=0;\n    for(int i=1;i<=m;++i)\n        for(int j=1;j<=m;++j)\n        if(pl[j]<=i&&pr[j]>=i)\n        f[i]=min(f[i],f[pl[j]-1]+1);\n    cout<<\"1\"<<endl<<f[m];\n    ok();\n}\n```",
        "postTime": 1467893817,
        "uid": 10441,
        "name": "tqqpt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u5927\u529b\u51fa\u5947\u8ff9\uff01\n\n\u6df1\u641c\u5c31\u53ef\u4ee5\u8fc7\u4e86 \u4e0d\u5fc5\u5e7f\u641c\n\n\uff08\u53e6\u5916\u5410\u69fd\u4e00\u4e0b\u697c\u4e0b\u7684\u9898\u89e3\u628amin\u5199\u6210\u4e86max\n\n\n\u601d\u8def\u5462  \u548c\u697c\u4e0b\u7684\u5dee\u4e0d\u591a\n\n\u5148\u53ef\u4ee5\u628a\u9760\u8fd1\u6e56\u8fb9\u7684\u57ce\u5e02\uff08\u7b2c\u4e00\u884c\uff09\u5168\u5efa\u7b51\u84c4\u6c34\u6c60  \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u628a\u6700\u540e\u4e00\u884c\u90fd\u8bbf\u95ee\u81f3\u5c11\u4e00\u904d   \u82e5\u4e0d\u884c\u5219\u8f93\u51fa\u6ca1\u6709\u8bbf\u95ee\u7684\u70b9\u7684\u4e2a\u6570   \u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\n\n\u82e5\u53ef\u4ee5  \u5219\u6211\u4eec\u53ef\u4ee5\u518ddfs\u4e24\u6b21  \u5206\u522b\u627e\u51fa\u7b2c\u4e00\u884c\u5404\u4e2a\u70b9\u80fd\u8bbf\u95ee\u7684\u5de6\u53f3\u4e24\u4e2a\u8fb9\u754c\uff08\u81f3\u4e8e\u80fd\u8bbf\u95ee\u7684\u70b9\u4e3a\u4ec0\u4e48\u662f\u4e00\u6bb5   \u975e\u5e38\u597d\u8bc1\u660e  \u8be6\u89c1\u697c\u4e0b233\uff09\u8bb0\u5f55\u5230l\u4e0er\u4e24\u4e2a\u6570\u7ec4(ps:\u5176\u5b9e\u4e09\u4e2adfs\u51fd\u6570\u662f\u4e00\u6837\u7684233  \u7f16\u7a0b\u80fd\u529b\u5f3a\u7684\u8bdd\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a \u65e0\u5948\u5728\u4e0b\u592a\u5f31)\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5199DP\u4e86\uff01\uff08\u7531\u4e8e\u6211\u89c9\u5f97\u4e0b\u9762\u5927\u795e\u8bb2\u7684\u4e0d\u662f\u975e\u5e38\u6e05\u695a\uff0c\u6240\u4ee5\u5c3d\u5728\u4e0b\u6240\u80fd\u8bb2\u7684 \u8be6\u7ec6\u4e00\u4e9b\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u7528F[i]\u6765\u8868\u793a\u5e95\u5c42[1~i]\u4e2a\u57ce\u5e02\u9700\u8981\u7684\u84c4\u6c34\u7ad9\u4e2a\u6570\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1aF[i]=min{f[l[j]-1]+1} (l[j]<=i && l[r]>=i)\n\n\u601d\u8def\u975e\u5e38\u7b80\u5355  j\u84c4\u6c34\u7ad9\u53ef\u4ee5\u7ed9[l[j]~r[j]]\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u57ce\u5e02\u6c34\uff0c\u82e5\u5176\u4e2d\u5305\u542bi\uff0c\u5219\u6b64\u84c4\u6c34\u7ad9\u53ef\u4ee5\u7ed9[l[j]~i]\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u57ce\u5e02\u6c34\uff0c\u5219[1~i]\u5e95\u5c42\u57ce\u5e02\u9700\u8981\u7684\u84c4\u6c34\u7ad9\u7684\u4e2a\u6570\u4e3a[1~l[j]-1]\u5e95\u5c42\u57ce\u5e02\u9700\u8981\u7684\u84c4\u6c34\u7ad9\u7684\u4e2a\u6570+\u5f53\u524d\u7684\u84c4\u6c34\u7ad9\uff08\u5373+1\uff09\n\n\uff08\u5fae\u4e0d\u8db3\u9053\u7684\u5c0f\u4f18\u5316\uff1a\u7531\u4e8el[]\u6570\u7ec4\u662f\u9012\u589e\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524dl[j]\u5df2\u7ecf\u5927\u4e8ei\uff0c\u53ef\u76f4\u63a5\u9000\u51fa\u5faa\u73af\uff09\n\n\u6700\u540e\u9644\u4e0a\u4e11\u7684\u8981\u6b7b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nbool ff[505][505];\nint f[505],a[505][505],i,j,ans,n,m,l[505],r[505]; \nvoid dfs1(int x,int y)\n{\n    if (ff[x][y]) return;\n    ff[x][y]=true;\n    if (x+1<=n && a[x][y]>a[x+1][y]) dfs1(x+1,y);\n    if (x-1>=1 && a[x][y]>a[x-1][y]) dfs1(x-1,y);\n    if (y+1<=m && a[x][y]>a[x][y+1]) dfs1(x,y+1);\n    if (y-1>=1 && a[x][y]>a[x][y-1]) dfs1(x,y-1);\n    return;\n}\nvoid dfs2(int num,int x,int y)\n{\n    if (ff[x][y]) return;\n    if (x==1) l[y]=num;\n    ff[x][y]=true;\n    if (x+1<=n && a[x][y]<a[x+1][y]) dfs2(num,x+1,y);\n    if (x-1>=1 && a[x][y]<a[x-1][y]) dfs2(num,x-1,y);\n    if (y+1<=m && a[x][y]<a[x][y+1]) dfs2(num,x,y+1);\n    if (y-1>=1 && a[x][y]<a[x][y-1]) dfs2(num,x,y-1);\n    return;\n}\nvoid dfs3(int num,int x,int y)\n{\n    if (ff[x][y]) return;\n    if (x==1) r[y]=num;\n    ff[x][y]=true;\n    if (x+1<=n && a[x][y]<a[x+1][y]) dfs3(num,x+1,y);\n    if (x-1>=1 && a[x][y]<a[x-1][y]) dfs3(num,x-1,y);\n    if (y+1<=m && a[x][y]<a[x][y+1]) dfs3(num,x,y+1);\n    if (y-1>=1 && a[x][y]<a[x][y-1]) dfs3(num,x,y-1);\n    return;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1; i<=n; i++)\n    for (j=1; j<=m; j++)\n        scanf(\"%d\",&a[i][j]);\n    for (i=1; i<=m; i++)\n        dfs1(1,i);\n    for (i=1; i<=m; i++)\n        if (ff[n][i]==false) ans++;\n    if (ans)\n    {\n        printf(\"0\\n%d\",ans);\n        return 0;\n    }\n    memset(ff,false,sizeof ff);\n    for (i=1; i<=m; i++)\n        dfs2(i,n,i);\n    memset(ff,false,sizeof ff);\n    for (i=m; i>=1; i--)\n        dfs3(i,n,i);\n    memset(f,64,sizeof f);\n    f[0]=0;\n    for (i=1; i<=m; i++)\n    for (j=1; j<=m; j++)\n        if (l[j]<=i && r[j]>=i) f[i]=min(f[i],f[l[j]-1]+1);\n    printf(\"1\\n%d\",f[m]);\n    return 0;\n}\n\n```",
        "postTime": 1455888824,
        "uid": 9193,
        "name": "a526955194",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u89e3\u9898\u601d\u8def\n\n\n1\uff0e\u4f7f\u7528BFS\u8ba1\u7b97\u7b2cn\u884c\u7684\u54ea\u4e9b\u70b9\u6709\u6c34\u5229\u8bbe\u65bd\n\n\n\u9996\u5148\u5c06\u7b2c1\u884c\u7684m\u4e2a\u70b9\u7cbe\u7b80\u4e3ak\u4e2a\u70b9,\u6309\u7167\u201c\u4ece\u9ad8\u5f80\u4f4e\u201d\u7684\u89c4\u5219\u53ef\u904d\u8bbf\u7b2c1\u884c\u7684m\u4e2a\u70b9\u3002\n\n\n{\u82e5j\u70b9\u901a\u8fc7BFS\u8ba1\u7b97\u51fa\u53ef\u8fbe\u7684\u533a\u95f4,\u5219\u6309\u7167\u201d\u7531\u9ad8\u5230\u4f4e\u201d\u89c4\u5219, j\u70b9\u53ef\u6d41\u904d\u9012\u51cf\u533a\u95f4[j,k],\u800c\u9012\u589e\u533a\u95f4[k,p]\u53ef\u88abp\u70b9\u7684\u6c34\u6240\u6d41\u904d,\u56e0\u6b64\u4e0b\u4e00\u6b21BFS\u7684\u51fa\u53d1\u70b9\u4e3ap\u3002\u5206\u522b\u4ece\u7b2c1\u884c\u7684k\u4e2a\u70b9\u51fa\u53d1\u8fdb\u884cBFS\uff1a\u6309\u7167\u201c\u4ece\u9ad8\u5f80\u4f4e\u201d\u7684\u89c4\u5219\u6269\u5c55\uff0c\u9047\u5230\u6ca1\u505a\u6807\u8bb0\u7684\u70b9\u5c31\u5c06\u5b83\u52a0\u5165\u961f\u5217\uff0c\u5e76\u505a\u6807\u8bb0\u3002\u6700\u540e\u7edf\u8ba1\u7b2cn\u884c\u7684m\u4e2a\u70b9\u4e2d\u6ca1\u505a\u6807\u8bb0\u7684\u70b9\u6570ans\u3002}\n\n\n2\uff0e\u82e5ans>0\uff0c\u5219\u8bf4\u660e\u6709ans\u4e2a\u5e72\u65f1\u533a\u5fc5\u5b9a\u4e0d\u80fd\u6709\u6c34\u5229\u8bbe\u65bd\uff0c\u8f93\u51fa\u5931\u8d25\u4fe1\u606f\uff0c\u5426\u5219\u8bf4\u660e\u7b2c1\u884c\u7684m\u4e2a\u70b9\uff0c\u901a\u8fc7\u201c\u4ece\u9ad8\u5f80\u4f4e\u201d\u7684\u89c4\u5219\u80fd\u591f\u5230\u8fbe\u7b2cn\u884c\u7684m\u4e2a\u70b9\u3002\n\n\n3\uff0e\u6b64\u65f6\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u7b2c1\u884c\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u80fd\u5230\u8fbe\u7684\u7b2cn\u6392\u7684\u70b9\u662f\u8fde\u7eed\u7684\\*{\n\n\n\u8bc1\u660e\uff1aA\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u5728\u56fe\u4e2d\u7528\u7070\u8272\u533a\u57df\u8868\u793a\uff08\u4e0d\u5305\u62ecD\u70b9\uff09\u3002\n\n\n\u5047\u8bbeA\u70b9\u80fd\u5230\u8fbe\u7684\u7b2cn\u6392\u7684\u70b9\u4e0d\u8fde\u7eed\uff0c\u5176\u4e2d\u70b9D\u65e0\u6cd5\u5230\u8fbe\uff0c\u7531\u4e8e\u7b2c\u4e00\u6392\u7684m\u4e2a\u70b9\u80fd\u591f\u901a\u8fc7\u201c\u4ece\u9ad8\u5f80\u4f4e\u201d\u7684\u89c4\u5219\u5230\u8fbe\u7b2cn\u6392\u6240\u6709\u70b9\uff0c\u6545\u5fc5\u5b9a\u5b58\u5728\u70b9B\uff0cA\u70b9\u4e0d\u80fd\u5230\u8fbe\uff0c\u5b83\u80fd\u5230\u8fbe\u70b9D\u3002\u6b64\u65f6\uff0cB\u70b9\u5230\u8fbeD\u70b9\u7684\u8def\u5f84\u5fc5\u5b9a\u548cA\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\u76f8\u4ea4,\u8bbe\u4e3aC\u70b9\uff0c\u90a3\u4e48\u6b64\u65f6A\u70b9\u53ef\u4ee5\u901a\u8fc7A\u00e0C\u00e0D\u6765\u5230\u8fbeD\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002}\n\n\n\u8bbeL[j]\u8868\u793a\u7b2c1\u884c\u7b2cj\u5217\u7684\u70b9\u901a\u8fc7\u201c\u4ece\u9ad8\u5f80\u4f4e\u201d\u89c4\u5219\u80fd\u6269\u5c55\u5230\u7684\u7b2cn\u884c\u7684\u6700\u5de6\u4fa7\u7684\u70b9\u4e3aL[j]\uff08\u7b2cn\u884c\u7b2c1,2,..L[j]-1\u5217\u7684\u70b9\u4e0d\u80fd\u6269\u5c55\u5230\uff09\u3002\u540c\u7406\u6709R[j]\n\n\n\u8bbe\u9876\u884c\u7684Ck\u70b9\u539f\u6765\u53ef\u8fbe\u5e95\u884c\u7684\u533a\u95f4\u4e3a[i\u2019,j\u2019]\uff0c\u73b0\u8ba1\u7b97\u51faCk\u53ef\u8fbe\u5e95\u884c\u7684\u70b9i\u548c\u70b9j\uff0c\u4e14i\u2264i\u2019\uff0cj\u2019\u2264j\u3002\u7531\u4e8eCk\u53ef\u8fbe\u7b2cn\u884c\u7684\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u6b64Ck\u53ef\u8fbe\u5e95\u884c\u7684\u533a\u95f4\u8c03\u6574\u4e3a[i,j]\uff0c\u5373L[Ck]=i\uff0cR[Ck]=j\u3002\n\n\n4. \u65e2\u7136\u5df2\u7ecf\u5f97\u5230\u7b2cn\u884c\u7b2cm\u5217\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u7ed9\u5b9am\u6761\u7ebf\u6bb5\uff0c\u95ee\u7528\u6700\u5c11\u51e0\u6761\u7ebf\u6bb5\u80fd\u8986\u76d6[1,m]\uff0c\u7528DP\u505a\u3002\n\n\n{ \u8bbef[i]\u4e3a\u8986\u76d6[n,1]\u2026[n,i]\u7684\u6700\u5c11\u7ebf\u6bb5\u6570\u3002\u663e\u7136f[0]=0;\n\n\n\u6709\u5de6\u800c\u53f3\u9012\u63a8n\u884c\u7684\u6bcf\u4e00\u5217i(1\u2264i\u2264m)\uff1b\n\n\n\u5728\u8986\u76d6i+1\u5217\u7684\u6240\u6709\u7ebf\u6bb5\u4e2d\uff0c\u8ba1\u7b97\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503cR                      ;\n\n\n\u8c03\u6574[i+1,R]\u533a\u95f4\u7684f\u503c\uff1af[k]=max{ f[i]+1,f[k]}  i+1\u2264k\u2264R\n\n\n\u6700\u540e\u5f97\u51fa\u7684f[m]\u5373\u4e3a\u95ee\u9898\u89e3\u3002}\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n\\*m)\u3002\n\n```delphi\n\nProgram Flow_by_Dbh;\nconst\n  dx:array[1..4]of longint=(0,1,-1,0);\n  dy:array[1..4]of longint=(1,0,0,-1);\nvar\n  n,m,i,j,k,l,r,ans:longint;\n  q,p:array[1..2,1..250000]of longint;//p[1,i]=L[i];p[2,i]=R[i].\n  f,s:array[0..510,0..510]of longint;\n  d:array[0..200000]of longint;\nfunction min(a,b:longint):longint;\nbegin\n  if a>b then exit(b); exit(a);\nend;\nprocedure init;\nbegin\n  readln(n,m);\n  for i:=1 to n do\n    for j:=1 to m do\n      begin\n        read(s[i,j]);\n        if j=m then readln;\n      end;\nend;\nprocedure bfs(xx,yy:longint);\nvar x,y,l,r,v:longint;\nbegin\n  l:=0;r:=1;q[1,1]:=xx;q[2,1]:=yy;f[xx,yy]:=yy;\n  repeat\n    inc(l);\n    for v:=1 to 4 do\n      begin\n        x:=q[1,l]+dx[v];y:=q[2,l]+dy[v];\n        if (x<=n)and(y>0)and(x>0)and(y<=m)and(f[x,y]=0)\n          and(s[x,y]<s[q[1,l],q[2,l]]) then\n          begin\n            f[x,y]:=yy;\n            inc(r);\n            q[1,r]:=x;q[2,r]:=y;\n          end;\n      end;\n  until l=r;\nend;\nprocedure bfsx(xx,yy:longint);//\u5012\u7740bfs\nvar x,y,l,r,v:longint;\nbegin\n  l:=0;r:=1;q[1,1]:=xx;q[2,1]:=yy;f[xx,yy]:=yy;\n  repeat\n    inc(l);\n    for v:=1 to 4 do\n      begin\n        x:=q[1,l]+dx[v];y:=q[2,l]+dy[v];\n        if (x<=n)and(y>0)and(x>0)and(y<=m)and(f[x,y]=0)\n          and(s[x,y]>s[q[1,l],q[2,l]]) then\n          begin\n            f[x,y]:=yy;\n            inc(r);\n            q[1,r]:=x;q[2,r]:=y;\n          end;\n      end;\n  until l=r;\nend;\nprocedure DP;\nbegin\n  d[0]:=0;\n  for i:=1 to m do\n    begin\n      d[i]:=maxlongint;\n      for j:=1 to m do\n        if (p[2,j]>=i)and(p[1,j]<=i) then\n          d[i]:=min(d[i],d[p[1,j]-1]+1);\n    end;\n  writeln(1);\n  writeln(d[m]);\nend;\nprocedure judge;\nbegin\n  for i:=m downto 1 do if f[1,i]=0 then bfs(1,i);\n  ans:=0;\n  for i:=1 to m do\n    if f[n,i]=0 then inc(ans);\n  if ans<>0 then//\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u60c5\u51b5\n    begin\n      writeln(0);writeln(ans);\n      close(input);close(output);\n      halt;\n    end;\nend;\nprocedure floodfill;\nbegin\n  fillchar(f,sizeof(f),0);\n  for i:=1 to m do if f[n,i]=0 then bfsx(n,i);//\u4e00\u5b9a\u4e3a\u6700\u5de6\u8fb9\u7684\u70b9\n  for i:=1 to m do p[1,i]:=f[1,i];\n  fillchar(f,sizeof(f),0);\n  for i:=m downto 1 do if f[n,i]=0 then bfsx(n,i);//\u4e00\u5b9a\u4e3a\u6700\u53f3\u8fb9\u7684\u70b9\n  for i:=1 to m do p[2,i]:=f[1,i];\nend;\nbegin\n  assign(input,'flow.in');reset(input);\n  assign(output,'flow.out');rewrite(output);\n  init;\n  judge;//\u4e3b\u8981\u662f\u5224\u65ad\u662f\u5426\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\n  floodfill;//\n  DP;//\u52a8\u6001\u89c4\u5212\n  close(input);close(output);\nend.\n\n```",
        "postTime": 1443668522,
        "uid": 3911,
        "name": "Skywalker_David",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    },
    {
        "content": "\u5f15\u6c34\u5165\u57ce\u7684\u5206\u6790\n\n\n\u7b2c\u4e00\u5c0f\u95ee\u662f\u7b80\u5355\u7684\uff0c\u6700\u5feb\u53ef\u4ee5n^2\u5904\u7406\u6bcf\u4e2a\u4e0a\u9762\u7684\u70b9\u7ba1\u8f96\u54ea\u4e9b\u4e0b\u9762\u7684\u70b9\uff0c\u5982\u679c\u6709\u6ca1\u6709\u53d7\u7ba1\u8f96\u7684\u70b9\u5219\u8f93\u51fa0\u4ee5\u53ca\u6570\u91cf\u3002\n\n\n\u82e5\u662f\u90fd\u88ab\u7ba1\u8f96\u4e86\uff0c\u5219\u8fdb\u5165\u7b2c\u4e8c\u5c0f\u95ee\u3002\n\n\n\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u7ba1\u8f96\u4e00\u4e9b\u70b9\uff0c\u6c42\u7ba1\u8f96\u6240\u6709\u70b9\u7684\u6700\u5c0f\u65b9\u6848\uff0c\u8fd9\u770b\u4f3c\u662f\u4e00\u4e2a\u6307\u6570\u7ea7\u7684\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u7b97\u6cd5\u80fd\u5904\u7406\uff0c\u53ef\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\n\n\n\u8fd9\u9898\u6709\u4e2a\u7279\u6b8a\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u662f\u6bcf\u4e2a\u7b2c\u4e00\u884c\u7684\u70b9\u7ba1\u8f96\u7684\u6700\u540e\u4e00\u884c\u7684\u70b9\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u8fd9\u662f\u53ef\u4ee5\u8bc1\u660e\u7684\u3002\n\n\n \n\n\u82e5\u4e2d\u95f4\u6709\u65ad\u5f00\uff0c\u5219\u65ad\u5f00\u7684\u70b9\u4e00\u5b9a\u9ad8\u4e8e\u5de6\u53f3\uff0c\u82e5\u6bd4\u4e4b\u4e0a\u65b9\u7684\u70b9\u4f4e\uff0c\u5219\u5176\u4e0a\u65b9\u7684\u70b9\u4e00\u5b9a\u9ad8\u4e8e\u5176\u5de6\u53f3\uff0c\u800c\u8d77\u59cb\u70b9\u53c8\u662f\u53ef\u4ee5\u901a\u8fc7\u4e00\u6761\u8def\u5230\u8fbe\u53f3\u8fb9\u88ab\u65ad\u5f00\u7684\u533a\u57df\u7684\uff0c\u5219\u65ad\u5f00\u7684\u70b9\u4e00\u5b9a\u4e0d\u80fd\u88ab\u5176\u4ed6\u70b9\u7ba1\u8f96\uff0c\u8fd9\u5c5e\u4e8e\u7b2c\u4e00\u5c0f\u95ee\u8303\u7574\u3002\n\n\n \n\n\u8fd9\u6837\u95ee\u9898\u5c31\u7b80\u5355\u4e86\uff0cl[i],r[i]\u8868\u793ai\u7ba1\u8f96\u7684\u6700\u5de6\u7aef\u6216\u6700\u53f3\u7aef\uff0c1~m\u679a\u4e3ei\uff0cf[r[i]]:=f[l[i]-1]+1,f[l[i]\u5230r[i]]\u90fd\u53d8\u6210f[l[i]-1]+1\u3002\n\n\n\u7136\u540e\u8f93\u51faf[m]\u5c31\u597d\u4e86\u3002\u3002\u3002\n\n\n \n\nDFS\u5e94\u8be5\u6bd4BFS\u5feb\u3002VC++DFS\u5171\u7528143ms\u3001\n\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nFLOODFILL+\u4e24\u904dBFS\u9884\u5904\u7406+DP\u5373\u53ef\u3002\n\n\n\u5148\u5224\u65ad\u6709\u65e0\u89e3(\u67d3\u8272)\uff0c\u65e0\u89e3\u76f4\u63a5\u8f93\u51fa\uff1b\n\n\n(\u67d3\u8272)(floodfill)\uff1a\u5df2\u6709\u8272\u7684\u4e0d\u67d3\uff0c\u7c7b\u4f3c\u56fe\u7684\u904d\u5386\uff0c\u53ef\u767e\u5ea6\u53ef\u8c37\u6b4c\u3002\n\n\n\u5bf9\u4e8e\u65e0\u89e3\u60c5\u51b5\uff0c\u4ece\u7b2c\u4e00\u884c\u5168\u90e8\u70b9\u5f00\u59cb\u5411\u56db\u4e2a\u65b9\u5411\u67d3\u8272(\u4e5f\u5c31\u662f\u904d\u5386\u6574\u4e2a\u56fe)\uff0c\u5224\u65ad\u6700\u540e\u4e00\u884c\u662f\u5426\u5168\u67d3\uff0c\u5426\u5219\u76f4\u63a5\u8ba1\u6570+\u8f93\u51fa\uff0c\u7ed3\u675f\u3002\n\n\n \n\n\u800cDP\u7684\u524d\u63d0\u662f\u53d1\u73b0\u7b2c\u4e00\u884c\u4efb\u4e00\u70b9\u5bf9\u4e8e\u4efb\u610f\u4e00\u884c\u8986\u76d6\u60c5\u51b5\u7684\u8fde\u7eed\u6027(\u5373\u80fd\u8f93\u6c34\u7684\u4e00\u5b9a\u4e3a\u4e00\u6761\u7ebf\u6bb5)\uff0c\u5219\u8be5\u95ee\u9898\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u8986\u76d6\u7ecf\u5178DP\n\n\n\u9884\u5904\u7406\uff1aC[i,1]\u8868\u793a\u70b9(1,i)\u6240\u80fd\u8986\u76d6\u7684\u6700\u540e\u4e00\u884c\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u540c\u7406C[i,2]\u8868\u793a\u53f3\u7aef\u70b9\uff1b\n\n\n \n\n\u6bd4\u8f83\u88f8\u7684\u65b9\u6cd5\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9(1\uff0ci)\uff0c\u6211\u4eec\u5bf9\u5168\u56fe\u8fd8\u539f+\u67d3\u904d\u8272\u518d\u5faa\u73af\u4e00\u904d\u5904\u7406\u5373\u53ef\u3002\u65f6\u95f4\u5fae\u5999= =\n\n\n \n\n\u6613\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u907f\u514d\u5bf9\u67d3\u8272\u56fe\u7684\u8fd8\u539f\uff0c\u5219\u65f6\u95f4\u5c31\u4f1a\u964d\u4e0b\u53bb\u4e86- -\u3002\u3002\u800c\u8fd9\u91cc\u7684\u65b9\u6cd5\u5c31\u662f\uff1a\u4ece\u4e0b\u5f80\u4e0a\u67d3\u3002\n\n\n\u4ece\u5de6\u81f3\u53f3\u5904\u7406\u70b9(n\uff0ci)\uff0c\u5373\u5411\u4e0a\u67d3\u8272\uff0c\u67d3\u5b8c\u540e\u7b2c\u4e00\u884c\u70b9\u7684\u989c\u8272\u5373\u4e3a\u5176\u8986\u76d6\u533a\u95f4\u5de6\u7aef\u70b9(\u8bf7\u7ae5\u978b\u4eec\u4ed4\u7ec6\u7422\u78e8)\n\n\n\u76f8\u5bf9\u7684\uff0c\u4ece\u53f3\u81f3\u5de6\u5904\u7406\u70b9(n\uff0ci)\uff0c\u53f3\u7aef\u70b9\u4e5f\u5c31\u51fa\u6765\u4e86\u3002\n\n\n\u63a5\u4e0b\u6765\u3002\u3002\u3002\u3002\u7ebf\u6bb5\u8986\u76d6\u76f4\u63a5\u88f8n^2 DP------>AC......\n\n\n \n\nWARNING\uff1a\u4e0d\u8981\u56fe\u7701\u4e8b\u5730\u7528D\u4ee3\u66ffB\u3001\u3001\u3001\u9664\u975e\u4f60\u7528\u6a21\u62df\u5806\u6808(orz)\n\n\n\n\n \n```delphi\n\nconst h:array[1..4,1..2] of longint=((1,0),(-1,0),(0,-1),(0,1));\nvar col,a:array[0..501,0..501] of longint;\n    f:array[0..500] of longint;\n    c:array[0..500,1..2] of longint;\n    d:array[0..500000] of record x,y:longint;end;\n    n,m,i,j,color:longint;\nfunction min(a,b:longint):longint;\nbegin if a<b then exit(a) else exit(b); end;\nprocedure Judge;\nvar i,j:longint;\n        procedure bfs(x,y:integer);\n        var i,t,f:longint;\n        begin\n             t:=1;f:=1;\n             d[t].x:=x;d[t].y:=y;\n             col[x,y]:=color;\n             repeat\n               for i:=1 to 4 do\n                   if col[d[f].x+h[i,1],d[f].y+h[i,2]]=0 then     {\u672a\u51fa\u754c && \u9ad8\u5ea6\u7b26\u5408}\n                        if a[d[f].x+h[i,1],d[f].y+h[i,2]]<a[d[f].x,d[f].y] then begin\n                           inc(t);\n                           d[t].x:=d[f].x+h[i,1]; d[t].y:=d[f].y+h[i,2];\n                           col[d[t].x,d[t].y]:=color;\n                   end;\n               inc(f);\n             until f>t;\n        end;   {end bfs}\nbegin  {judge}\n    for i:=0 to n+1 do begin\n        a[i,0]:=maxlongint;\n        a[i,m+1]:=maxlongint;\n    end;\n    for i:=0 to m+1 do begin\n        a[0,i]:=maxlongint;\n        a[n+1,i]:=maxlongint;\n    end;\n    for color:=1 to m do bfs(1,color);\n    j:=0;\n    for i:=1 to m do\n        if col[n,i]=0 then inc(j);\n    if j>0 then begin\n       writeln(0);\n       writeln(j);\n       halt;\n    end;\nend;\nprocedure floodfill;\n        procedure bfs(x,y:integer);\n        var i,t,f:longint;\n        begin\n             t:=1;f:=1;\n             d[t].x:=x;d[t].y:=y;\n             col[x,y]:=color;\n             repeat\n               for i:=1 to 4 do\n                  if col[d[f].x+h[i,1],d[f].y+h[i,2]]=0 then\n                    if a[d[f].x+h[i,1],d[f].y+h[i,2]]>a[d[f].x,d[f].y] then begin\n                       inc(t);\n                       d[t].x:=d[f].x+h[i,1]; d[t].y:=d[f].y+h[i,2];\n                       col[d[t].x,d[t].y]:=color;\n                  end;\n               inc(f);\n             until f>t;\n        end;\nvar i,j:longint;\nbegin\n     for i:=0 to n+1 do begin\n         a[i,0]:=0; a[i,m+1]:=0;\n     end;\n     for i:=0 to m+1 do begin\n         a[0,i]:=0; a[n+1,i]:=0;\n     end;\n     fillchar(col,sizeof(col),0);\n     for color:=1 to m do\n         if col[n,color]=0 then\n            bfs(n,color);\n     for i:=1 to m do\n         c[i,1]:=col[1,i];\n     fillchar(col,sizeof(col),0);\n     for color:=m downto 1 do\n         if col[n,color]=0 then bfs(n,color);\n     for i:=1 to m do c[i,2]:=col[1,i];\nend;\nprocedure DP;\nvar i,j:longint;\nbegin\nf[0]:=0;\nfor i:=1 to m do\nbegin\n f[i]:=maxint;\n for j:=1 to m do\n if (c[j,2]>=i)and(c[j,1]<=i) then\nf[i]:=min(f[i],f[c[j,1]-1]+1);\nend;\nwriteln(1);\nwriteln(f[m]);\nend;\nBEGIN   {main}\n     read(n,m);\n     for i:=1 to n do\n        for j:=1 to m do\n            read(a[i,j]);\n     judge;\n     floodfill;\n     DP;\nEND.\n\nWARNING\uff1a(\u7b2c4\u4e2a\u70b9\u8003\u9a8c\u4f60\u7684BFS\u3002)\n\nWARNING\uff1a(\u6ce8\u610f\u8f93\u51fa\u8981\u6c42\u3002\u3002\u524d\u4e09\u4e2a\u70b9- -)\n\n```",
        "postTime": 1383313587,
        "uid": 277,
        "name": "plane",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1514 \u3010\u5f15\u6c34\u5165\u57ce\u3011"
    }
]