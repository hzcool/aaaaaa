[
    {
        "content": "\u672c\u9898\u89e3\u4f7f\u7528std::map\u3002\n\n\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u8981\u628a\u6240\u6709\u9ad8\u7ea7\u8bcd\u6c47\u548c\u5b83\u7684\u542b\u91d1\u91cf\u5b58\u5728map\u91cc\uff0c\u8f93\u5165\u6587\u7ae0\u7684\u65f6\u5019\u8ba1\u7b97\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\u5c31OK\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8f93\u5165\u7684\u5904\u7406\u3002\n\n\u6b63\u89e3\u5e94\u8be5\u662f\u5e73\u8861\u6811\u5427\uff0c\u6211\u4e5f\u4e0d\u6e05\u695a\uff0c\u770btag\u77e5\u9053\u7684\u3002\u4f46map\u5185\u7f6e\u7ea2\u9ed1\u6811\uff0c\u6240\u4ee5\u6548\u7387\u4e0d\u4f1a\u4f4e\u5f88\u591a\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<map>\n#include<string>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\ntypedef long long ll;\nll n,p;\nmap<string,ll>a;\nll ans;\nint main()\n{\n    scanf(\"%lld%lld\",&n,&p);\n    for(int i=1;i<=n;i++)\n    {\n        string word;\n        ll value;\n        cin>>word>>value;\n        a[word]=value;\n        //word\u5373\u9ad8\u7ea7\u8bcd\u6c47\uff0cvalue\u5373\u5176\u542b\u91d1\u91cf\n    }\n    string t=\"\";\n    char c;\n    //t\u5b58\u50a8\u8bcd\u6c47\n    //c\u662f\u7528\u4e8e\u8f93\u5165\u7684\u4e34\u65f6\u53d8\u91cf\n    while(scanf(\"%c\",&c)!=EOF)\n    {\n        if(!(isdigit(c)||isalpha(c)))\n        {\n            //\u4e0d\u662f\u6570\u5b57\uff0c\u4e5f\u4e0d\u662f\u5b57\u6bcd\uff0c\u90a3\u5c31\u662f\u5206\u9694\u7b26\u6216\u8005\u7a7a\u683c\u56de\u8f66\u4e4b\u7c7b\u7684\n            ans=((ans%p)+(a[t]%p))%p;\n            //\u90a3\u4e48\u5c31\u66f4\u65b0\u7b54\u6848\uff0c\u628a\u4e0a\u4e00\u4e2a\u8bcd\u7684\u542b\u91d1\u91cf\u52a0\u4e0a\n            //\u5982\u679c\u4e0a\u4e00\u4e2a\u8bcd\u4e0d\u662f\u9ad8\u7ea7\u8bcd\u6c47\uff0c\u90a3\u4e48\u5728map\u91cc\u5bf9\u5e94\u7684\u542b\u91d1\u91cf\u5c31\u662f0\n            //\u76f8\u5f53\u4e8e\u6ca1\u6709\u53d8\u5316\n            //\u4e3a\u4e86\u7b54\u6848\u4e0d\u6ea2\u51fa\uff0c\u968f\u65f6\u53d6\u6a21\n            t=\"\";\n            //\u8fd8\u539f\uff0c\u4ee5\u4fbf\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u8bcd\n        }\n        else t+=c;\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1586149535,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u89e3\u6cd5\uff1a**\u54c8\u5e0c\uff08hash\uff09** + **\u4e8c\u5206\u67e5\u627e\uff08binary search\uff09**\n\n\u672c\u6765\u7684\u505a\u6cd5\u662f \u54c8\u5e0c + \u66b4\u529b\u67e5\u627e\uff0c\u7136\u540e\u6211\u5149\u8363\u5730 TLE \u4e86\u4e94\u4e2a\u70b9\u3002~~\u5e9f\u8bdd\uff0c\u66b4\u529b\u4e0d TLE \u8c01 TLE\u3002~~\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u201c\u9ad8\u7ea7\u8bcd\u6c47\u201d\uff0c\u83b7\u53d6\u5b83\u4eec\u7684**\u54c8\u5e0c\u503c**\uff0c\u7136\u540e\u5c06\u54c8\u5e0c\u503c**\u6392\u5e8f**\uff08\u7528**\u7ed3\u6784\u4f53**\u5b8c\u6210\u201c\u542b\u91d1\u91cf\u201d\u4e0e\u201c\u9ad8\u7ea7\u8bcd\u6c47\u201d\u7684\u54c8\u5e0c\u503c\u7684\u5bf9\u5e94\uff09\u3002 \n\n\u5bf9\u4e8e\u6587\u672c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd\uff0c\u53d6\u5b83\u7684\u54c8\u5e0c\u503c\uff0c\u5e76\u5728\u7ed3\u6784\u4f53\u5185\u8fdb\u884c**\u4e8c\u5206\u67e5\u627e**\uff0c\u5e76\u5728**\u67e5\u627e\u65f6\u5b8c\u6210\u7b54\u6848\u7684\u66f4\u65b0**\u3002\n\n\u4f46\u662f\u54c8\u5e0c\u6709\u4e2a\u4ee4\u4eba\u5934\u75bc\u6709\u4e0d\u5f97\u4e0d\u9762\u5bf9\u7684\u95ee\u9898\u2014\u2014**\u54c8\u5e0c\u51b2\u7a81**\u3002   \n\u6240\u4ee5\u4e3a\u4e86**\u89e3\u51b3\u51b2\u7a81**\uff0c~~\u53ea\u4f1a\u5199\u7b80\u5355\u54c8\u5e0c\u7684~~\u6211\u4f7f\u7528\u4e86**\u4e24\u6b21\u5f02\u6216\u8fd0\u7b97**\u3002   \n\u56e0\u6b64\u6211\u7684\u54c8\u5e0c\u957f\u8fd9\u6837\uff1a\n\n```cpp\n// typedef unsigned long long ulint ; \nulint base = 8394824858985499411; \nulint seed_1 = 5005454853518058551; \nulint seed_2 = 3602030550927995261;\ninline ulint hashit(string s)\n{\n\tint l = s.size();\n\tulint val = 0;\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tval = s[i] * base + (val ^ seed_1);\n\t\tval ^= seed_2;\n\t}\n\treturn val;\n}\n```\n\nAC \u4ee3\u7801\uff1a   \n\uff08\u8be5\u4ee3\u7801**\u5927\u62ec\u53f7\u6362\u884c**\uff09\n\n\n```cpp\n/**\n * codeby: \\Delta\n * stamp: 20200424\n * note: hash with binary search\n**/\n\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double ntrl;\ntypedef unsigned long long ulint;\n\n// global\n#define MAXN 100010\nulint MOD;\nint n, m;\nstruct great\n{\n\tulint hsh, val; // 'hsh' is the hash value, and 'val' is the gold content\n} word[MAXN]; // The words\nlint ans; // The answer of this problem\n\n// funtion\ninline bool isltr(char x) { return (('a' <= x && x <= 'z') || ('A' <= x && x <= 'Z')); }\n// (up) Tell me the 'x' is a letter or not.\ninline bool cmp(great x, great y)\n{\n\treturn x.hsh < y.hsh;\n}\n\n// fastread\ninline bool isnum(char x) { return ('0' <= x && x <= '9'); }\ninline lint readlint()\n{\n\tint sign = 1, val = 0;\n\tchar tmp = getchar();\n\twhile (!isnum(tmp))\n\t{\n\t\tif (tmp == '-')\n\t\t{\n\t\t\tsign = -sign;\n\t\t}\n\t\ttmp = getchar();\n\t}\n\twhile (isnum(tmp))\n\t{\n\t\tval = val * 10 + tmp - 48;\n\t\ttmp = getchar();\n\t}\n\treturn val * sign;\n}\n\n// hash\nulint base = 8394824858985499411, seed_1 = 5005454853518058551, seed_2 = 3602030550927995261;\ninline ulint hashit(string s)\n{\n\tint l = s.size();\n\tulint val = 0;\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tval = s[i] * base + (val ^ seed_1);\n\t\tval ^= seed_2;\n\t}\n\treturn val;\n}\n\n// binary search\ninline int bnrysrch(int l, int r, ulint key)\n{\n\tint ret = -1;\n\tint mid;\n\twhile (l <= r)\n\t{\n\t\tmid = l + ((r - l) >> 1);\n\t\tif (word[mid].hsh < key)\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (word[mid].hsh > key)\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret = mid;\n\t\t\tans += word[ret].val;\n\t\t\tans %= MOD;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ret;\n}\n\nint main()\n{\n\tn = readlint();\n\tMOD = readlint();\n\n\tstring s;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> s;\n\t\tword[i].hsh = hashit(s);\n\t\tword[i].val = readlint();\n\t}\n\n\tsort(word, word + n, cmp);\n\n\tulint hashval = 0;\n\tchar tmpc;\n\tbool endword = false;\n\ts.clear();\n\twhile (scanf(\"%c\", &tmpc) != EOF) // Get the letter\n\t{\n\t\tif (!isltr(tmpc) && !isnum(tmpc) && !s.empty())\n\t\t{\n\t\t\tendword = true; // I have found a word\n\t\t}\n\t\tif (endword)\n\t\t{\n\t\t\thashval = hashit(s);\n\t\t\tbnrysrch(0, n - 1, hashval);\n\t\t\t// debug\n\t\t\tcout << endl << s;\n\t\t\tprintf(\" , ans=%lld\", ans);\n\t\t\t// end of debug\n\t\t\ts.clear();\n\t\t\tendword = false;\n\t\t}\n\t\telse if (isltr(tmpc) || isnum(tmpc))\n\t\t{\n\t\t\ts.append(1, tmpc); // Make the word\n\t\t}\n\t}\n\n\tprintf(\"%lld\\n\", ans);\n\n\treturn 0;\n}\n\n```",
        "postTime": 1587738650,
        "uid": 339895,
        "name": "BackSlashDelta",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "//map\u771f\u662f\u4e2a\u597d\u4e1c\u897f\uff0c\u7528\u5b83\u5b58\u50a8\u53ef\u4ee5\u628a\u4ee3\u7801\u53d8\u5f97\u5f88\u7b80\u5355\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<map>\nusing namespace std;\nint n,p,ans;\nstring a;\nchar t;\nmap<string,int>s;\nint main()\n{\n    scanf(\"%d%d\",&n,&p);\n    for (int i=0;i<n;i++)\n    {cin>>a;scanf(\"%d\",&s[a]);}getchar();a=\"\";\n    while(scanf(\"%c\",&t)==1)\n    {\n        if (!(t>='a' && t<='z' || t>='A' && t<='Z' || t>='0' && t<='9'))\n        {ans=(ans+s[a])%p;a=\"\";}\n        else a+=t;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1468838263,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u6b63\u5982[little_gift\u5927\u4f6c\u7684\u9898\u89e3](https://stars.blog.luogu.org/solution-p2786)\u4e2d\u6240\u8bf4\uff0c\n\n _\u201c\u672c\u9898\u4ece\u7406\u8bba\u4e0a\u6765\u8bf4\u5e94\u8be5\u662f\u4e00\u9053trie\u6216\u7c7b\u4f3c\u6570\u636e\u7ed3\u6784\u7684\u9898,\u5f53\u7136,\u5927\u90e8\u5206\u4eba\u90fd\u4f7f\u7528\u4e86map/hash.\u867d\u7136\u76f8\u5bf9\u65e0\u8111,\u4e0d\u8fc7\u4e5f\u662f\u89e3\u6cd5.\u201d_ \n \n \u6211\u4e00\u76f4\u611f\u5230\u5f88\u5947\u602a\uff0c\u8fd9\u9053\u9898\u770b\u8d77\u6765\u5c31\u50cf\u4e00\u9053trie\u7684\u9898\uff0c\u4e3a\u4ec0\u4e48\u9898\u89e3\u4e2d\u4f7f\u7528\u7684\u5168\u662fhash/map/\u4e8c\u5206\u5462\uff1f\n \n \u76f4\u5230\u6211\u7528trie\u505a\u4e86\u8fd9\u9053\u9898\uff0c\u7136\u540e\u2026\u2026\u5149\u8363\u7684MLE 5\u4e2a\u70b9\u3002\n \n \u679c\u7136Trie\u662f _\u201c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u201d_ \u7684\u7b97\u6cd5\u2026\u2026\n \n \u4e8e\u662f\u6211\u5bf9\u57fa\u7840\u7684Trie\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n \n \u4ecb\u7ecd\u4e00\u79cd\u50a8\u5b58\u7684\u65b9\u6cd5\u2014\u2014\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u3002\n \n \u867d\u7136\u4f18\u5316\u4ee5\u540e\u8fd8\u662f\u6709\u4e00\u4e2a\u70b9MLE\u53ea\u670990\u5206\uff0c\u4f46\u662f\u6bd450\u5206\u7684\u5df2\u7ecf\u597d\u5f88\u591a\u4e86\u3002\n \n \u4e00\u822c\u7684Trie\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u5176\u6240\u6709\u5b58\u5728\u7684\u5b57\u7b26\u7684\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u800c\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684Trie\u4e2d\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e24\u4e2a\u5b58\u50a8\u8282\u70b9\uff1anex\u548cright.\n \n nex\u4ee3\u8868\u5b83\u7684\u513f\u5b50\uff0cright\u4ee3\u8868\u5b83\u7684\u5144\u5f1f\u3002\n \n\u6709\u6ca1\u6709\u8054\u60f3\u5230\u4e00\u79cd\u5b58\u56fe\u65b9\u5f0f\u2014\u2014\u524d\u5411\u661f\uff1f\n\n\u53cd\u6b63\u5177\u4f53\u770b\u4ee3\u7801\u6ce8\u91ca\u5427\u2026\u2026.\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n\nstruct Node\n{\n    Node* nex;//\u5b58\u50a8\u6700\u540e\u4e00\u4e2a\u513f\u5b50\n    Node* right;//\u5b58\u50a8\u5144\u5f1f\n    char ch;//\u5b58\u50a8\u8be5\u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26\n    int b;//\u542b\u91d1\u91cf\n    Node()\n    {\n        b = ch = 0;\n        nex = right = NULL;\n    }\n}*r, *h, *v;\nchar s[51], st[51];\n\nbool get_word()//\u8fd9\u662f\u4e13\u95e8\u4e3a\u7b2c\u4e8c\u90e8\u5206\u6240\u5199\u7684\u8bfb\u5165\u5355\u8bcd\u7528\u7684\u51fd\u6570\n{\n    char ch;\n    int l = 0;\n    memset(st, 0, sizeof st);\n    for (ch = getchar(); !isalpha(ch) && !isdigit(ch) && ch != EOF; ch = getchar()) ;\n    if (ch == EOF) return 0;\n    for ( ; isalpha(ch) || isdigit(ch); st[l++] = ch, ch = getchar()) ;\n    st[l] = '\\0';\n    return 1;\n}\n\nint main()\n{   \n    int n, p;\n    scanf(\"%d%d\", &n, &p);\n    h = new Node;\n    for (register int i = 1; i <= n; i++)\n    {\n        r = h;\n        scanf(\"%s\", s);\n        int x;\n        scanf(\"%d\", &x);\n        for (register int j = 0; s[j]; j++)\n        {\n            bool f = 0;\n            for (v = r -> nex; v; v = v -> right)//\u904d\u5386r\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u4e0e\u5f53\u524d\u5b57\u7b26\u76f8\u7b49\u7684\u5c31\u65b0\u5efa\u4e00\u4e2a\n                if (v -> ch == s[j])\n                {\n                    f = 1;\n                    break;\n                }\n            if (!f)//\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n            {\n                v = new Node;\n                v -> right = r -> nex;\n                v -> ch = s[j];\n                v -> nex = NULL;\n                v -> b = 0;\n                r -> nex = v;\n            }\n            r = v;\n        }\n        r -> b = x;\n    }\n    long long ans = 0;\n    while (get_word())\n    {\n        r = h;\n        bool flag = 1;\n        for (register int j = 0; st[j]; j++)\n        {\n            bool f = 0;\n            for (v = r -> nex; v; v = v -> right)//\u904d\u5386r\u7684\u6240\u6709\u5b50\u8282\u70b9\n                if (v -> ch == st[j]) \n                {\n                    r = v;\n                    f = 1;\n                    break;\n                }\n            if (!f) //\u6ca1\u627e\u5230\n            {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag)\n        {\n            ans = (ans + r -> b) % p;\n        }\n    }\n    printf(\"%lld\\n\", ans % p);\n\n    return 0;\n}\n```\n\u867d\u7136\u53ea\u670990\u5206\uff0c\u4f46\u662f\u4f5c\u4e3a\u8be5\u9898\u7684\u53e6\u4e00\u79cd\u89e3\u6cd5\uff0c\u4e0d\u59a8\u4e00\u8bd5\u3002",
        "postTime": 1520567013,
        "uid": 22075,
        "name": "\u6237\u5c71\u9999\u6f84",
        "ccfLevel": 0,
        "title": "Trie\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u5e94\u7528\uff08\u6d1b\u8c37P2786 90\u5206\u7b97\u6cd5\uff09"
    },
    {
        "content": "\u5b57\u7b26\u4e32\u4e00\u76f4\u662f\u849f\u84bb\u7684\u5f31\u9879\u554a\n\n\u4e00\u76f4\u4e0d\u4f1a\u7528map\u2026\u2026\n\n\u6070\u5de7\u6700\u8fd1\u521a\u521a\u5b66\u4f1a\u66ff\u7f6a\u7f8a\u6811\u8fd9\u79cd **\u201c\u66b4\u529b\u5373\u4f18\u7f8e\u201d** \u7684\u6570\u636e\u7ed3\u6784\n\n\u4e8e\u662f\u5c31\u60f3\u6765\u8bd5\u4e00\u8bd5\uff0c~~\u7ed3\u679c\u4e00\u904d\u8fc7\uff0c\u849f\u84bb\u81ea\u5df1\u90fd\u4e0d\u6562\u76f8\u4fe1~~\n\n\u73b0\u5728\u4e3a\u5927\u5bb6\u732e\u4e0a\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5~\n\n```cpp\nstruct node{\n\tint l,r,size,fact,val2;\n\tstring val;\n\tbool exist;\n}tzy[100005];\n\n//l\u548cr\u5206\u522b\u8868\u793a\u5de6\u53f3\u8282\u70b9\n//size\u548cfact\u662f\u66ff\u7f6a\u7f8a\u6811\u7684\u5b50\u6811\u5927\u5c0f\u548c\u5b50\u6811\u771f\u5b9e\u5927\u5c0f\n//val2\u5c31\u662f\u542b\u91d1\u91cf\n//val\u6765\u5b58\u5355\u8bcd\n//exist\u8868\u793a\u8be5\u8282\u70b9\u662f\u5426\u5b58\u5728\n```\n\u6709\u4e86\u7ed3\u6784\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u5b9e\u73b0\u66ff\u7f6a\u7f8a\u6811\u4e86\u3002\n\n\u548c\u6807\u51c6\u66ff\u7f6a\u7f8a\u6811\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\n\n\u591a\u5199\u4e00\u4e2a`findval2()`\u51fd\u6570\u5c31\u597d\n\n```cpp\nint findval2(string val){\n\tint now = root;\n\twhile(now){\n\t\tif(tzy[now].val==val)break;\n\t\tif(val>tzy[now].val)//\u76f4\u63a5\u5229\u7528string\u7684\u6bd4\u8f83\n\t\t\tnow = tzy[now].r;\n\t\telse\n\t\t\tnow = tzy[now].l;\n\t}\n\treturn tzy[now].val2;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u592a\u957f\uff0c\u592a\u5360\u7248\u9762\u4e86\n\n\u9644\u4e0a\u94fe\u63a5 [\u5b8c\u6574\u4ee3\u7801](https://www.cnblogs.com/Histone/p/12599958.html)\n\n\u611f\u8c22\u89c2\u770b\uff0c\u5b8c\u7ed3\u6492\u82b1~",
        "postTime": 1585561090,
        "uid": 208090,
        "name": "Histone",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u4e3b\u8981\u662f\u6015TLE\uff0c\u4e0d\u7528hash\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0cmap\u5c31\u8f7b\u677e\u641e\u5b9a\uff0c\u4f46\u7ec6\u8282\u503c\u5f97\u7559\u610f\n\n\u9996\u5148\u5148\u5206\u6790\u4e00\u4e0b\u7b97\u6cd5\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u662f\u95f4\u9694\u7b26\u5c31\u628aans\u52a0\u5230\u524d\u9762\u8fd9\u4e2a\u5355\u8bcd\u4e0a\uff0c\u5426\u5219\u6211\u4eec\u521b\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u53bb\u7d2f\u52a0\u8fd9\u4e2a\u5355\u8bcd\n\n\uff08\u5f88\u591a\u7ec6\u8282\u5bfc\u81f4WA\uff09\n\n\u5e95\u4e0bAC\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <map>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nmap <string, int> mp;\n\nchar v;\n\nstring f = \"\", name;\n\nint main()\n{\n    long long n, p, ans = 0, x;\n    cin >> n >> p;\n    for(int i = 1; i <= n; i++)\n    {\n        cin >> name >> x;\n        mp[name] = x;\n    }\n    scanf(\"\\n\");//\u6ce8\u610f\uff0c\u8fd9\u53e5\u8bdd\u7684\u7528\u5904\u5728\u4e8e\u9ad8\u7ea7\u8bcd\u6c47\u548c\u6587\u7ae0\u4e4b\u95f4\u7684\u6362\u884c\u8bfb\u5165\uff0c\u56e0\u4e3a\u8bfb\u5b8c\u9ad8\u7ea7\u8bcd\u6c47\u5c31\u76f4\u63a5\u8fdb\u5165while\u4e86\u3002\u4e0d\u52a0\u4e0d\u4f1aWA\uff0c\u4f46\u6837\u4f8b\u8fc7\u4e0d\u53bb\uff08\u8fd9\u2026\u2026\uff09\n    while(scanf(\"%c\", &v) != EOF)\n    {\n        if(v == ' ' || v == ',' || v == '.' || v == '!' || v == '?')\n        {\n            ans = (mp[f] + ans) % p;//\u6bcf\u6b21\u76f4\u63a5\u53d6\u6a21\uff0c\u4ee5\u9632\u6ea2\u51fa\n            f = \"\";//\u6ce8\u610f\u5f520\n        }\n        else\n        {\n            f += v;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n\u5f53\u7136\uff0c\u5982\u679c\u4f60\u559c\u6b2230\u5206\uff0c\u4f60\u4e5f\u53ef\u4ee5\u770b\u8fd9\u4e2a\u66b4\u529b\uff1a\n\n```\n#include <cstdio>\n#include <iostream>\n#include <cstdio>\n#include <unordered_map>\nusing namespace std;\n\nunordered_map <string, int> mp;\n\nchar name[55];\n\nstring v;\n\nint x;\n\nint main()\n{\n    int n, p, ans = 0;\n    scanf(\"%d %d\", &n, &p);\n    for(int i = 1; i <= n; i++)\n    {\n        scanf(\"%s %d\", name , &x);\n        mp[name] = x;\n    }\n    while(cin >> v)\n    {\n        for(unordered_map <string, int>::iterator it = mp.begin(); it != mp.end(); ++it)\n        {\n            if(v.find(it -> first) != string::npos)\n            {\n                ans += it -> second;\n            }\n        }\n    }\n    printf(\"%d\\n\", ans % p);\n    return 0;\n}\n\n```\n\u6211\u7684\u66b4\u529b\u6cd5\u5b50\u4e4b\u524d\u5199\u7684\uff0c\u6709\u5f88\u591a\u6ca1\u8003\u8651\u5230\uff0c\u8bf7\u5927\u5bb6\u5305\u5bb9\n\n\u8fdestl\u7684hash\u5bb9\u5668unordered\u90fd\u8fc7\u4e0d\u53bb\uff0c\u770b\u6765\u5927\u8d5b\u4ee5\u53ca\u65e5\u5e38\u5237\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\u65f6\u9650\u3001\u6570\u636e\u4ee5\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u6c42\u4e2a\u8d5e\n",
        "postTime": 1602939456,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "**\u672c\u9898\u4ece\u7406\u8bba\u4e0a\u6765\u8bf4\u5e94\u8be5\u662f\u4e00\u9053trie\u6216\u7c7b\u4f3c\u6570\u636e\u7ed3\u6784\u7684\u9898,\u5f53\u7136,\u5927\u90e8\u5206\u4eba\u90fd\u4f7f\u7528\u4e86map/hash.\u867d\u7136\u76f8\u5bf9\u65e0\u8111,\u4e0d\u8fc7\u4e5f\u662f\u89e3\u6cd5.\u8fd9\u91cc\u5c31\u732e\u4e0a\u4e00\u4efd\u7528fread+pbds\u5199\u7684\u76ee\u524d\u6700\u4f18\u89e3**\n\n\u601d\u8def\u662f\u7528**map(__gnu_pbds::tree)**\u5c06\u6240\u6709\u7684**\"\u9ad8\u7ea7\u8bcd\u6c47\"**\u6620\u5c04\u5230\u5b83\u7684**\"\u542b\u91d1\u91cf\"**,\u7136\u540e\u4f9d\u6b21\u8bfb\u53d6\u5355\u8bcd\u5e76\u5224\u65ad\u662f\u5426\u662f**\"\u9ad8\u7ea7\u8bcd\u6c47\"**,\u82e5\u662f\u5219\u7d2f\u52a0**\"\u542b\u91d1\u91cf\"**\n\n**\u5177\u4f53\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca**\n```cpp\n#include <string>\n#include <cstdio>\n#include <cctype>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nconst int ri_top = 1e7; //fread\u7f13\u5b58\u533a,\u82e5\u9898\u76ee\u6570\u636e\u8f83\u5927\u5219\u9700\u6309\u9700\u589e\u5927\nchar ri[ri_top], *rich = ri;\nvoid read_int(int &x)\n{\n\twhile (!isdigit(*rich)) ++rich;\n\tfor (x = *rich - '0'; isdigit(*++rich); x = x * 10 + *rich - '0');\n} //\u5728\u5df2\u8bfb\u5165\u7684\u7f13\u5b58\u533a\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u6574\u6570,\u76f8\u5f53\u4e8esscanf(rich, \"%d\", &x); + \u66f4\u65b0rich\n//emm...\u6211\u4f3c\u4e4e\u6ca1\u6709\u60f3\u5230fread\u53ef\u4ee5\u914d\u5408sscanf\u4f7f\u7528.\u4e0d\u8fc7sscanf\u540e\u8981\u66f4\u65b0rich.\nvoid read_st(char st[])\n{\n\twhile (isspace(*rich)) ++rich;\n\tfor (*st = *rich; !isspace(*++rich); *(++st) = *rich);\n\t*(++st) = '\\0';\n} //\u539f\u672c\u4f7f\u7528\u7684\u662fstring\u7c7b\u578b,\u4f7f\u7528\u4e86+=,\u4f46\u662f\u7ed3\u679c\u6bd4\u4e0d\u7528fread\u8fd8\u6162.\u6240\u4ee5\u6539\u6210\u4e86\u5947\u602a\u7684char[],\u5177\u4f53\u601d\u8def\u5c31\u662f\u628ast\u5f53\u6210\u6307\u9488(\u4e8b\u5b9e\u4e0a\u4f20\u5165\u7684\u53d8\u91cf\u4e5f\u662f\u6307\u9488,\u8fd9\u91cc\u7684\u53c2\u6570\u53ef\u80fd\u6539\u4e3achar *st\u66f4\u597d\u4e00\u4e9b)\nint n, p, m, x, s;\nchar ch;\nchar st[51], *st1; //\u56e0\u4e3ast\u4e0d\u80fd\u968f\u610f\u66f4\u6539,\u6240\u4ee5\u4f7f\u7528\u4e86st1\u5e76\u4f7f\u5176\u6307\u5411st[0].\n//\u5176\u5b9e\u8fd9\u91cc\u7684\u601d\u8def\u548c\u4e0a\u9762\u7684ri,rich\u662f\u5dee\u4e0d\u591a\u7684.\n__gnu_pbds::tree < string, int > mm; //pbds\u7684map\n__gnu_pbds::tree < string, int > :: iterator it; //pbds\u7684\u8fed\u4ee3\u5668\nint main()\n{\n\tfread(ri, 1, ri_top, stdin); //fread\u8c03\u7528,\u628a\u8f93\u5165\u8bfb\u53d6\u5230ri\u4e2d.\n\tread_int(n);\n\tread_int(p);\n\tfor (register int i = n + 1; --i; )\n\t{\n\t\tread_st(st);\n\t\tread_int(x);\n\t\tmm[st] = x; //\u7528__gnu_pbds::tree\u5c06\"\u9ad8\u7ea7\u8bcd\u6c47\"\u6620\u5c04\u5230\"\u542b\u91d1\u91cf\"\n\t}\n\twhile (*rich)\n\t{\n\t\twhile (*rich && (ch = *(rich++), !isalpha(ch) && !isdigit(ch)));\n\t\tif (!*rich) break;\n\t\tst1 = st;\n\t\tfor (*st1 = ch; ch = *(rich++), isalpha(ch) || isdigit(ch); *(++st1) += ch);\n\t\t*(++st1) = '\\0'; //\u6b64\u5904\u975e\u5e38\u63a5\u8fd1\u4e8e\u4e0a\u9762\u7684read_st(),\u53ea\u662f\u66f4\u6539\u4e86\u5224\u65ad\u4e0d\u7b26\u5408\u6761\u4ef6\u7684char\u7684\u4f9d\u636e,\u5e76\u589e\u52a0\u4e86\u82e5\u5df2\u7ecf\u8bfb\u5b8c\u5219\u9000\u51fa\u7684\u4ee3\u7801\n\t\tit = mm.find(st); //\u7528find\u4e0d\u7528operator[](),\u5c31\u4e0d\u4f1a\u51fa\u73b0\u7a7a\u9879(\u56e0\u4e3aoperator[]()\u4f1a\u5728map\u4e2d\u63d2\u5165,\u4ee5\u81f4\u589e\u52a0\u65f6\u95f4\u590d\u6742\u5ea6)(\u81f3\u5c11\u6211\u662f\u8fd9\u4e48\u8ba4\u4e3a\u7684)\n\t\tif (it != mm.end()) //\u82e5\u662f\"\u9ad8\u7ea7\u8bcd\u6c47\"\n\t\t\ts = (s + it -> second % p) % p; //\u589e\u52a0\"\u542b\u91d1\u91cf\"\n\t}\n\tprintf(\"%d\\n\", s);\n}\n```",
        "postTime": 1520053201,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u7528 Hash \u7684\u529e\u6cd5\u505a...\n\n\u81f3\u4e8e\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u5f0f\uff0cvector \u5176\u5b9e\u591f\u7528\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u9ad8\u7ea7\u8bcd\u6c47\u548c\u542b\u91d1\u91cf\u7528\u4e00\u4e2a pair \u4e00\u5e76\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u91cc\u9762\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u90a3\u7bc7\u4f5c\u6587\u91cc\u9762\u7684\u5355\u8bcd\uff0c\u6211\u4eec\u5728\u54c8\u5e0c\u8868\u91cc\u9762\u6328\u4e2a\u67e5\u627e\uff0c\u770b\u770b\u6709\u6ca1\u6709\u76f8\u540c\u7684\u5c31\u884c\u4e86\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd9\u9053\u9898\u7531\u4e8e\u6709\u5206\u9694\u7b26\u7684\u5b58\u5728\uff0c\u4f5c\u6587\u7684\u8f93\u5165\u65b9\u5f0f\u53ef\u80fd\u6709\u70b9\u6076\u5fc3\uff0c\u9700\u8981\u624b\u52a8\u7279\u5224\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<vector>\n#include<string>\n#define Maxn int(1e5)\nusing namespace std;\ntypedef pair<string,int> Pair;\n\nvector<Pair> v[23334];\n\ninline int Hash(string s)//\u83b7\u53d6\u54c8\u5e0c\u503c \n{\n\tlong long h=0;\n\tfor(register int i=0;i<(int)s.size();++i)\n\t{\n\t\th*=233;\n\t\th+=(s[i]-'0');\n\t\th%=23333;\n\t}\n\treturn int(h);\n}\n\nint n,m,ans;\n\ninline void Run(string s)//\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd\u5728\u54c8\u5e0c\u8868\u91cc\u67e5\u627e \n{\n\tint nowhash=Hash(s);\n\tfor(register int i=0;i<(int)v[nowhash].size();++i)\n\t\tif(v[nowhash][i].first==s)\n\t\t{\n\t\t\tans=(ans+v[nowhash][i].second)%m;\n\t\t\tbreak;\n\t\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tstring a;\n\t\tint b;\n\t\tcin>>a;\n\t\tscanf(\"%d\",&b);\n\t\tv[Hash(a)].push_back(make_pair(a,b%m));\n\t}\n\t\n\tstring now;\n\twhile(getline(cin,now))//\u5355\u72ec\u8f93\u5165\u4e00\u884c \n\t{\n\t\tstring s;\n\t\tfor(register int l=0;l<(int)now.size();++l)//\u5224\u65ad\u5355\u8bcd \n\t\t{\n\t\t\tchar ch=now[l];\n\t\t\tif(ch==' ' || ch=='!' || ch=='?' || ch==',' || ch=='.')\n\t\t\t{\n\t\t\t\tRun(s);\n\t\t\t\ts.clear();\n\t\t\t}\n\t\t\telse s=s+ch;\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1589028470,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u5b57\u7b26\u4e32\u7684\u6392\u5e8f+\u4e8c\u5206\u67e5\u627e\n\n\n\u4e00\u5b9a\u8981\u6ce8\u610f\u6570\u7ec4\u548c\u53d8\u91cf\u8303\u56f4\n\n\u4e00\u4e2aansistring\u5f15\u53d1\u7684\u8840\u6848\n\n\npascal\u4ee3\u7801\u89c1\u4e0b\n\n```pascal\nvar a:array[1..100000] of string; b:array[1..100000] of longint;\n    n,i,j,t,l,r,m,x,p,ans:longint; s,s1:ansistring; biaodian:set of char;\nprocedure qsort(l,r:longint);\nvar i,j,z:longint; x,y:string;\nbegin\n  i:=l; j:=r; x:=a[(l+r) div 2];\n  repeat\n    while a[i]<x do inc(i);\n    while x<a[j] do dec(j);\n    if not(i>j) then\n    begin\n      y:=a[i]; a[i]:=a[j]; a[j]:=y;\n      z:=b[i]; b[i]:=b[j]; b[j]:=z;\n      inc(i); dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nbegin\n  biaodian:=[' ',',','.','!','?'];\n  read(n,p); readln;\n  for i:=1 to n do\n  begin\n    readln(a[i]);\n    x:=pos(' ',a[i]);\n    val(copy(a[i],x,100),b[i]);\n    delete(a[i],x,100);\n  end;\n  qsort(1,n);\n\n  while not eof do\n  begin\n    readln(s);\n    for i:=1 to length(s) do\n      if s[i] in biaodian then s[i]:=' ';  //\u5904\u7406\u6807\u70b9\u7b26\u53f7\uff0c\u540e\u9762\u627e\u5355\u8bcd\u6bd4\u8f83\u65b9\u4fbf\n    while (length(s)>0) and (s[1]=' ') do delete(s,1,1);//\u53ef\u80fd\u4e4b\u524d\u6709\u591a\u4f59\u7a7a\u683c\uff0c\u53bb\u6389\n    while length(s)>0 do\n    begin\n      j:=1; s1:='';\n      while s[j]<>' ' do begin s1:=s1+s[j]; inc(j); end;//\u627e\u5355\u8bcd\n      l:=1; r:=n;\n      while l<r do                                  //\u4e8c\u5206\u67e5\u627e\n      begin\n        m:=(l+r) div 2;\n        if a[m]>s1 then r:=m;\n        if a[m]<s1 then l:=m+1;\n        if a[m]=s1 then begin l:=m; break; end;\n      end;\n      if a[l]=s1 then ans:=(ans+b[l] mod p) mod p;\n      delete(s,1,j);                                                                 //\u5220\u9664\u5df2\u7528\u5355\u8bcd\n      while (length(s)>0) and (s[1]=' ') do delete(s,1,1);      //\u5220\u9664\u591a\u4f59\u7a7a\u683c\n    end;\n  end;\n\n  writeln(ans);\nend.\n```",
        "postTime": 1478951656,
        "uid": 13417,
        "name": "CalvinJin",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u54c8\u5e0c+map...\n\n\u88ab\u5361\u7684\u98de\u8d77\u6765\n\n\u5982\u679c\u662f\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u6570\u5b57\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5f88\u6162\u5427\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cctype>\n#include <map>\nusing namespace std;\ntypedef unsigned long long ll;\nll p,ans=0,base=10007;//\u53d6\u592a\u5c0f\u4f1a\u88ab\u5361\uff1f\uff1f \nchar tmp[80];\nmap<ll,ll> mp;\nint get(){\n    memset(tmp,0,sizeof(tmp));\n    char c;int l=0;\n    for(c=getchar();isalpha(c)==0&&isdigit(c)==0&&c!=EOF;c=getchar());\n    if(c==EOF)return -1;\n    for(;isalpha(c)||isdigit(c);c=getchar())\n        tmp[l++]=c;\n    return l;\n```\n}//\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\n```cpp\nint main(){\n    int i,j,l,n;ll h,b;\n    scanf(\"%d%llu\",&n,&p);\n    for(i=0;i<n;i++){\n        scanf(\"%s%llu\",tmp,&b);\n        l=strlen(tmp);\n        for(h=0,j=0;j<l;j++)\n            h=h*base+tmp[j];\n        mp[h]=b;\n    }\n    while((l=get())!=-1){\n        for(h=0,j=0;j<l;j++)\n            h=h*base+tmp[j];\n        if(mp.count(h))ans+=mp[h];\n    }\n    printf(\"%llu\\n\",ans%p);\n    return 0;\n}\n```",
        "postTime": 1475770498,
        "uid": 11765,
        "name": "zqy1018",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u9898\u89e3\u6709\u7528pbds\u7ea2\u9ed1\u6811\u7684\u5462\n\n\u4f46\u8fd8\u662f\u6bd4\u4e0d\u8fc7\u6211C++11[unordered_map](https://en.cppreference.com/w/cpp/container/unordered_map)\u9ed1\u79d1\u6280\uff01\u81ea\u5e26\u54c8\u5e0c\u7684\u6620\u5c04\u8868\uff01\u8dd1\u5f97\u6bd4\u7ea2\u9ed1\u6811\u8fd8\u5feb\uff01\u662f\u76ee\u524d\u6700\u5feb\u4e86\u3002\uff08\u5f00\u4e86O2\uff0c\u6ca1\u7528fread\uff09\n```cpp\n/*\nDOCUMENT NAME \"20180720-luogu2786.cpp\"\nCREATION DATE 2018-07-20\nSIGNATURE CODE_20180720_LUOGU2786\nCOMMENT \u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\n*/\n\n#include <cstdlib>\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint n, p;\n\nint read() {\n    int ans = 0;\n    char c;\n    while (!isdigit(c = getchar()));\n    do {\n        ans = (ans << 1) + (ans << 3) + c - '0';\n    } while (isdigit(c = getchar()));\n    return ans;\n}\n\nvoid read(int& val) { val = read(); }\n\nbool isstr(int c) {\n    return c != ' '&&c != ','&&c != '.'&&c != '!'&&c != '?'&&c != '\\n'&&c != '\\r';\n}\n\nchar buf[30001];\nvoid readstr(string& str) {\n    str.clear();\n    int c = 0;\n    while (!isstr(c = getchar()) && c != EOF);\n    if (c == EOF)\n        return;\n    do {\n        str.push_back((char)c);\n    } while (isstr(c = getchar()) && c != EOF);\n}\n\nstring str;\nunordered_map<string, int> m;\n\nint main(int argc, char* argv[]) {\n\n    m.rehash(200000);\n    read(n); read(p);\n    for (int i = 1; i <= n; i++) {\n        readstr(str);\n        m[str] = read();\n    }\n\n\n    readstr(str);\n    int sum = 0;\n    do {\n        unordered_map<string, int>::iterator i = m.find(str);\n        if (i != m.end())\n            sum = (sum + i->second) % p;\n        readstr(str);\n    } while (str != \"\");\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}\n```",
        "postTime": 1532085534,
        "uid": 53151,
        "name": "\u6d29\u77e2\u8bf9\u8bbf\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u89c9\u5f97\uff1astring\u8bfb\u5165\uff0c\u679a\u4e3e\u66b4\u529b\n\n\u5199\u4e86\u5927\u698210\u5206\u949f\u540e\uff0c\u53d1\u73b0\uff1a\u6bd4\u8f83\u65e0\u6bd4\u7684\u9ebb\u70e6\uff0c\u4e8e\u662f\u6211\u679c\u65ad\u653e\u5f03\u4e86\u679a\u4e3e\u66b4\u529b\n\n\u5f00\u59cb\u7528\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u5199\uff1amap\n\nmap\u7b80\u76f4\u5c31\u662f\u5199\u8fd9\u9053\u9898\u7684\u795e\u5668\uff01\uff01\uff01\n\n\u597d\u4e86\uff0c\u8a00\u5f52\u6b63\u4f20\n\n\u5230\u5e95\u8981\u600e\u4e48\u53bb\u5199\u8fd9\u9053\u9898\u5462\uff1f\uff1f\n\n\u5f88\u7b80\u5355\uff0c\n\n\u5f00\u4e00\u4e2amap\uff0c\u628a\u8981\u6bd4\u8f83\u7684\u91cd\u70b9\u8bcd\u6c47\u538b\u8fdb\u53bb\uff0c\u7136\u540e\u4e00\u884c\u4e00\u884c\u8bfb\u5165\u4f5c\u6587\uff0c\u4e00\u4e2a\u4e2a\u6bd4\u8f83\uff0c\u5c31OK\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u91cd\u70b9\u5728\u4ee3\u7801\u533a\uff09\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <map>\n#include <cstdlib>\n#include <cmath>\n#include <iostream>\nusing namespace std;\n\n#define ll long long\n#define mx(x,y) x>y?x:y\n#define mn(x,y) x<y?x:y\n#define _e putchar(' ')\n#define _v putchar('\\n')\n#define BF_N 1<<17\n\nchar buf[BF_N],sl,sr;\nFILE *fin;\n\nchar gc() {\n\treturn sl==sr&&(sr=(sl=0)+fread(buf,1,BF_N,stdin),sl==sr)?EOF:buf[sl++];\n}\n\nint Read() {\n\tint ans=0,k=1;\n\tchar c=gc();\n\twhile(!isdigit(c)) {\n\t\tif(c=='-')k=-1;\n\t\tc=gc();\n\t}\n\twhile(isdigit(c)) {\n\t\tans=ans*10+c-'0';\n\t\tc=gc();\n\t}\n\treturn k*ans;\n}\n//\u4e0a\u8fb9\u662f\u5feb\u901f\u8bfb\u5165\uff0c\u975e\u5e38\u5feb\uff0c\u652f\u6301int\uff08\u5176\u4ed6\u7684\u7c7b\u578b\u4f60\u81ea\u5df1\u6539\uff09\nmap<string,int> find_importance;//map\u4f7f\u7528\nstring b;\t\t\t\t\t\t\n//\u4e00\u884c\u4e00\u884c\u7684\u4f5c\u6587\uff0c\nstring sentence,a,sd;\t\t\t\nint m,n,mod,ans=0,k=0;\n//a---\u91cd\u70b9\u8bcd\u6c47\uff0cn---\u5206\u6570\n\nvoid init() {\t\t//\u8bfb\u5165\n\tcin>>m>>mod;\t\t//\u91cd\u70b9\u8bcd\u6c47\u6570\u76ee\u548c\n\tfor(int i=1; i<=m; ++i) {\n\t\tcin>>a>>n;\n\t\tfind_importance[a]=n;\n\t}\n\tgetline(cin,sd);\n}\n\nvoid work() {\t//\u5f00\u59cb\u4e3b\u8981\u7a0b\u5e8f\n\twhile(getline(cin,b)) {//\u4e00\u884c\u4e00\u884c\u8bfb\u5165\n\t\tfor(int i=0; i<b.length(); ++i) {\n        //\u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\u5206\u9694\n\t\t\tif(b[i]==' '||b[i]==','||b[i]=='.'||b[i]=='!'||b[i]=='?') {\n\t\t\t\tif(find_importance[sentence]>=1) {\n\t\t\t\t\tans+=find_importance[sentence];\n\t\t\t\t\tans=ans%mod;\n                    \n//\u5982\u679c\u5339\u914d\u6210\u529f\uff0cans+=\u91cd\u70b9\u5355\u8bcd\u5f97\u5206\uff0c%\u4e00\u6b21\uff0c\u9632\u6b62\u6ea2\u51fa\u3002\n\t\t\t\t}\n\t\t\t\tsentence=\"\";//\u6e05\u7a7a\n\t\t\t} else {\n\t\t\t\tsentence.push_back(b[i]);\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans%mod;  \t\t\t\n    //\u9632\u6b62\u6ea2\u51fa\uff0c\u518d%\u4e00\u6b21\n}\n\nint main() {\n\tinit();\n\twork();\n\treturn 0;\n}\n```\n\n\u5f88\u7b80\u5355\uff0c\u4e0d\u8fc7\uff0c\u80fd\u4e0d\u80fd\u60f3\u5230\u7528map\uff0c\u5c31\u662f\u4e2a\u95ee\u9898\u4e86\u3002",
        "postTime": 1544280149,
        "uid": 52670,
        "name": "fallingdust",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2786 \u3010\u82f1\u8bed1\uff08eng1\uff09- \u82f1\u8bed\u4f5c\u6587\u3011"
    }
]