[
    {
        "content": "\u5bf9\u65b9\u5e76\u4e0d\u60f3\u548c\u4f60\u8bf4\u8bdd\u5e76\u5411\u4f60\u6254\u4e86\u4e00\u4e2a\u8d39\u7528\u6d41233\n\n\n\u53d8\u91cf\u540d\uff1a$tim_i$\u5230\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4 $Mx_i$\u4e00\u4e2a\u70b9\u4e58\u5ba2\u6700\u665a\u5230\u8fbe\u65f6\u95f4 $down_i$\u4e00\u4e2a\u70b9\u4e0b\u8f66\u4eba\u6570\n\n\u9996\u5148\u6784\u5efa\u6a21\u578b\n\n\u4e0d\u96be\u53d1\u73b0\u5728\u4e00\u4e2a\u70b9\u4f7f\u7528\u52a0\u901f\u5668\u9020\u6210\u7684\u6548\u679c\u662f\u9636\u6bb5\u6027\u7684\n\n\u5373\u5728\u4e00\u4e2a\u9636\u6bb5\u540e\u533a\u95f4\u4f1a\u88ab\u5288\u5f00\n\n\u8003\u8651\u8fd9\u4e2a\u5288\u5f00\u7684\u6761\u4ef6\n\n\u5f53\u524d\u9762\u4f7f\u7528\u7684\u52a0\u901f\u5668\u8d85\u8fc7$max(tim_i-Mx_i,0)$\u65f6\u5c31\u4e0d\u80fd\u5bf9\u540e\u9762\u7684\u4ea7\u751f\u5f71\u54cd\u4e86\n\n\u628a\u4f7f\u7528\u52a0\u901f\u5668\u4e2a\u6570\u4f5c\u4e3a\u6d41\u91cf\n\n\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u88ab\u5206\u914d\u5230\u81f3\u591a$D_i$\u7684\u52a0\u901f\u5668\n\n\n\u5efa\u7acb$S$\u3001$S'$\u3001$T$\u4e09\u4e2a\u70b9\n\n\u8fde\u8fb9$S\\rightarrow S'$ \u5bb9\u91cf\u4e3a$K$ \u8d39\u7528\u4e3a$0$ \u8d77\u5230\u9650\u5236\u603b\u4e2a\u6570\u7684\u4f5c\u7528\n\n\u628a\u6240\u6709\u70b9$i$\u5206\u4e3a$i'$\u548c$i''$\n\n\u8fde\u8fb9$i'\\rightarrow i''$ \u5bb9\u91cf\u4e3a$max(tim_i-Mx_i,0)$ \u8d39\u7528\u4e3a$0$ \u9650\u5236\u524d\u9762\u4f7f\u7528\u7684\u52a0\u901f\u5668\u5bf9\u540e\u9762\u7684\u5f71\u54cd\n\n\u8fde\u8fb9$S'\\rightarrow i''$ \u5bb9\u91cf\u4e3a$D_i$ \u8d39\u7528\u4e3a$0$ \u5206\u914d\u52a0\u901f\u5668\n\n\u8fde\u8fb9$i''\\rightarrow (i+1)'$ \u5bb9\u91cf\u4e3a$INF$ \u8d39\u7528\u4e3a$-down_{i+1}$ \u7d2f\u8ba1\u8d39\u7528\u4ee5\u53ca\u4f20\u9012\u5f71\u54cd\n\n\u8fde\u8fb9$i'\\rightarrow T$ \u5bb9\u91cf\u4e3a$INF$ \u8d39\u7528\u4e3a$0$\n\n\u663e\u7136$1'$\u548c$n''$\u662f\u6ca1\u6709\u7528\u7684 \u53ef\u4ee5\u5728\u5efa\u56fe\u65f6\u820d\u53bb\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5957\u6a21\u677f\u4e86\n\n\u6700\u574f\u590d\u6742\u5ea6$O(k*n*log(n))$(Dijkstra)\u6216$O(k*n^2)$(SPFA)\n\n\u6bd4\u8d2a\u5fc3\u6162= =\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 1010\n#define M 10010\n#define INF (0x3f3f3f3f)\nstruct peo{\n    int t,l,r;\n}a[M];\nstruct edge{\n    int nxt,to,cap,cost;\n}e[N<<3];\nint head[N<<1],edge_cnt;\nvoid add_edge(int x,int y,int z,int w){\n    e[edge_cnt]=(edge){head[x],y,z,w};\n    head[x]=edge_cnt++;\n    e[edge_cnt]=(edge){head[y],x,0,-w};\n    head[y]=edge_cnt++;\n}\nint D[N],Mx[N],down[N],tim[N],S,T;\nstruct MinCostMaxFlow{\n    int d[N<<1],fa[N<<1],Mn[N<<1];\n    bool vis[N<<1];\n    queue<int>Q;\n    int calc(){\n        int i,res=0;\n        while (1){\n            memset(d,63,sizeof(d));\n            d[S]=0;\n            Q.push(S);\n            Mn[S]=INF;\n            while (!Q.empty()){\n                int x=Q.front(); Q.pop();\n                vis[x]=0;\n                for (i=head[x];~i;i=e[i].nxt){\n                    int To=e[i].to;\n                    if (!e[i].cap || d[To]<=d[x]+e[i].cost) continue;\n                    d[To]=d[x]+e[i].cost;\n                    fa[To]=i;\n                    Mn[To]=min(Mn[x],e[i].cap);\n                    if (!vis[To]){\n                        vis[To]=1;\n                        Q.push(To);\n                    }\n                }\n            }\n            if (d[T]==INF) return res;\n            res+=Mn[T]*d[T];\n            int p=T;\n            while (p!=S){\n                e[fa[p]].cap-=Mn[T];\n                e[fa[p]^1].cap+=Mn[T];\n                p=e[fa[p]^1].to;\n            }\n        }\n    }\n}MCMF;\nint main(){\n    memset(head,-1,sizeof(head));\n    int n,m,K,i,ans=0;\n    scanf(\"%d%d%d\",&n,&m,&K);\n    for (i=1;i<n;i++) scanf(\"%d\",&D[i]);\n    for (i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&a[i].t,&a[i].l,&a[i].r);\n        down[a[i].r]++;\n        Mx[a[i].l]=max(Mx[a[i].l],a[i].t);\n    }\n    for (i=1;i<n;i++) tim[i+1]=max(tim[i],Mx[i])+D[i];\n    for (i=1;i<=m;i++) ans+=tim[a[i].r]-a[i].t;\n    \n    S=n*2+1; T=n*2+3;\n    int S1=n*2+2;\n    add_edge(S,S1,K,0);\n    for (i=1;i<n;i++){\n        add_edge(i,i+n,max(tim[i]-Mx[i],0),0);\n        add_edge(i+n,i+1,INF,-down[i+1]);\n        add_edge(S1,i+n,D[i],0);\n        add_edge(i+1,T,INF,0);\n    }\n    printf(\"%d\\n\",ans+MCMF.calc());\n    return 0;\n}\n```\n",
        "postTime": 1508310617,
        "uid": 13417,
        "name": "CalvinJin",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u8d21\u732e\u4e00\u4e2a0ms\u505a\u6cd5...(\u6570\u636e\u6c34...)\n\n\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u4e00\u4e0b...\n\n\u53d6\u51fa\u52a0\u901f\u5668\u6536\u76ca\u6700\u5927\u7684\u5de6\u7aef\u70b9,\u518d\u52a0\u5165\u88ab\u5288\u5f00\u7684\u82e5\u5e72\u90e8\u5206...\n\n\u590d\u6742\u5ea6\u5206\u6790:\n\n\u9996\u5148\u8003\u8651\u8fdb\u5165\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570,\u89c2\u5bdfdoit(),\u53ea\u4f1a\u62c6\u533a\u95f4\u6216\u8352\u5e9f\u5de6\u7aef\u70b9,n\u7ea7\u522b\u7684\u5143\u7d20\u4e2a\u6570...\n\n\u6bcf\u4e2a\u5143\u7d20\u9700\u8981\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2,\u66b4\u529bO(n)...(\u5199\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u53d8log..,)\n\n\u6700\u574fn^2...\n\n\n\n\n\n\n\n    \n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\nusing namespace std;\nvoid read(int &x){\n    x=0; int fff=0; char c=getchar();\n    for ( ;!(c>='0'&&c<='9');c=getchar()) if (c=='-') fff=1;\n    for ( ; (c>='0'&&c<='9');c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n    if (fff) x=-x;\n}\nint n,m,k,a[1010],d[1010],b[1010],v[1010],t,x,y,ans;\nstruct Node{\n    int l,r,tim,val;\n}tmp;\nstruct cmp{\n    bool operator ()(Node nd1,Node nd2){\n        return nd1.val < nd2.val;\n    }\n};\npriority_queue<Node,vector<Node>,cmp>q;\nvoid doit(int l,int r){\n    if (l>=r) return;\n    if (d[l]==0){ doit(l+1,r); return; }\n    for (int i=l+1;i<r;i++) if (a[i]>=b[i]){\n        doit(l,i); doit(i,r); return;\n    }\n    int mn=d[l],val=v[r];\n    for (int i=l+1;i<r;i++) mn=min(mn,b[i]-a[i]), val+=v[i];\n    d[l]-=mn; for (int i=l+1;i<r;i++) b[i]-=mn;\n    q.push((Node){l,r,mn,val});\n}\nint main(){\n    read(n); read(m); read(k);\n    for (int i=1;i<n;i++) read(d[i]);\n    for (;m--;){\n        read(t), read(x), read(y);\n        a[x]=max(a[x],t), ans-=t;\n        v[y]++;\n    }\n    for (int i=1;i<n;i++) b[i+1]=max(b[i],a[i])+d[i];\n    for (int i=2;i<=n;i++) ans+=v[i]*b[i];\n    for (doit(1,n);!q.empty()&&k;){\n        tmp=q.top(); q.pop();\n        ans-=tmp.val*min(tmp.tim,k);\n        k-=min(tmp.tim,k);\n        if (k) doit(tmp.l,tmp.r);\n    }\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1510146111,
        "uid": 13750,
        "name": "zhang2333",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "  # \u8d2a\u5fc3\u505a\u6cd5\uff0c\u7b49\u4f60\u6765\u5361 #\n     \u5bf9\u4e8e\u6bcf\u4e00\u6bb5\uff0c\u5982\u679c\u7528\u52a0\u901f\u5668\uff0c\u90a3\u4e48\u53d7\u5f71\u54cd\u7684\u6709\u4ece\u8fd9\u4e00\u6bb5\u5230\u8fbe\u7684\u7ad9\u5230\u540e\u9762\u7684\u67d0\u4e2a\u7ad9\uff08\u8bbe\u4e3arang[i]\uff08\u907f\u514drange\u91cd\u540d\u5c34\u5c2c\uff09\uff09\uff0c\u90a3\u4e48\u4ecei\u5230rang[i]\uff0c\u6bcf\u4e00\u6bb5\u90fd\u662f\u4eba\u5728\u7b49\u8f66\uff08last[i]<time[i]\uff09,\u5230\u8fd9\u4e9b\u7ad9\u7684\u65f6\u95f4\u53ef\u4ee5\u90fd\u51cf\u4e00\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0b\u8f66\u7684\u4eba\u7528\u7684\u65f6\u95f4\u90fd\u4f1a\u51cf\u4e00\uff0c\u6bcf\u6b21\u627e\u6700\u4f18\u7684\u5730\u65b9\u75281\u4e2a\u52a0\u901f\u5668\uff0c\u7136\u540e\u66f4\u65b0time[i]\uff0c\u590d\u6742\u5ea6,,\u5927\u6982O(kn).\n```cpp\n#include <bits/stdc++.h>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n#include <vector>\n#define ll long long \n#define\tre register\n#define MAXN 10005\n#define mod 10007\n#define inf 0x3f3f3f3f\n#define ls (k<<1)\n#define rs (k<<1|1)\n#define mid (l+r>>1)\n#define inl inline\n//#pragma GCC optimize (2)\n//#pragma G++ optimize (2)\n//#pragma comment(linker, \"/STACK:1024000000,1024000000\")\n//\u4e0d\u8981\u5728\u610f\u90a3\u4e48\u591a\u5934\u6587\u4ef6\nusing namespace std;\ninline ll read() {\n    re ll x = 0; re int f = 1;\n    char ch = getchar();\n    while(ch<'0'||ch>'9') { if(ch=='-') f = -1; ch = getchar(); }\n    while(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n    return x * f;\n}\ninline void write(ll x){\n    if(x>=10)write(x/10);\n    putchar(x%10+'0');\n}\ninline void writeln(ll x){\n    write(x); puts(\"\");\n}//\u8bfb\u4f18+\u8f93\u51fa\u4f18\u5316\nll last[MAXN],In[MAXN],Out[MAXN];\nstruct Node{\n    ll t,b,e;\n}e[MAXN];\nll ssw[MAXN],d[MAXN],sum[MAXN];\nll tim[MAXN],rang[MAXN],n,m,k;\nint main(){\n    n=read(),m=read(),k=read();\n    re ll ans=0;\n    for(re ll i=1;i<n;i++) {\n        d[i]=read();\n    }\n    for(re ll i=1;i<=m;i++) {\n        e[i].t=read(),e[i].b=read(),e[i].e=read();\n        last[e[i].b]=max(e[i].t,last[e[i].b]);\n        In[e[i].b]+=1;//\u53ef\u4ee5\u5ffd\u7565\n        Out[e[i].e]+=1;//\u5212\u91cd\u70b9\uff0c\u4e0b\u8f66\u7684\u4eba\u6570\n    }\n    last[n]=inf;\n    for(re ll i=1;i<n;i++){\n        tim[i+1]=max(tim[i],last[i])+d[i];\n        ssw[i]=ssw[i-1]+In[i]-Out[i];//\u5b8c\u5168\u6ca1\u7528\uff0c\u6253\u7740\u73a9\u7684\uff0c\uff0c\n    }\n    for(re ll i=1;i<=n;i++) sum[i]=sum[i-1]+Out[i];//\u5212\u91cd\u70b9\uff0c\u524d\u7f00\u548c\n    for(re ll i=1;i<=m;i++){ans+=tim[e[i].e]-e[i].t;}\n    while(k--){//\u6bcf\u6b21\u7528\u4e00\u4e2a\uff0c\u7f8e\u6ecb\u6ecb\n    \tll maxn=0,flag;rang[n-1]=n;\n        for(re ll i=n-2;i;i--){\n            if(tim[i+1]>last[i+1]) rang[i]=rang[i+1];\n            else rang[i]=i+1;\n        }//\u6c42rang[i](\u5982\u679c\u5728i\u7ad9\u7b49\u4eba\uff0c\u90a3\u4e48\u53ea\u5f71\u54cd\u4e0b\u4e00\u7ad9\u4e0b\u7684\uff0c\u53cd\u4e4b\u4f1a\u5f71\u54cd\u5230rang[i+1](\u53cd\u6b63\u5230rang[i+1]\u90fd\u662f\u4eba\u7b49\u8f66)\n        for (re ll i=1;i<n;i++){\n            if (sum[rang[i]]-sum[i]>maxn&&d[i]){\n            \tmaxn=sum[rang[i]]-sum[i],flag=i;\n            }//\u627e\u6700\u4f18\u7684\u4e00\u6bb5\n        }\n        if(!maxn) break;\n        ans-=maxn;\n        d[flag]-=1;//\u66f4\u65b0d\n        tim[1]=0;\n        for(re ll i=1;i<n;i++){tim[i+1]=max(tim[i],last[i])+d[i];}//\u66f4\u65b0tim[i]\n    }\n    writeln(ans);//\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1529162557,
        "uid": 70280,
        "name": "Eziotao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "## \u8bdd\u8bf4\uff0c\u6211\u7ec8\u4e8eAC\u4e86\u8fd9\u4e2a\u9898\n\n\u8fd9\u662f\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u8bf4\u5b9e\u8bdd\u5f00\u59cb\u505a\u7684\u65f6\u5019......~~\u5b8c\u5168\u6ca1\u770b\u51fa\u6765QAQ\u3002\u3002~~\n\n### \u53ef\u80fd\u6709\u4eba\u8bf4\u8fd9\u662f\u4e2adp,\u4f46\u8fd9\u771f\u4e0d\u662f(dalao\u8bf7\u65e0\u89c6)\n# \u8fd9\u771f\u7684\u53ea\u662f\u4e2a\u8d2a\u5fc3\u3002\u3002\u3002\u3002\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f53\u7136\u662f\u80fd\u8d70\u5c31\u8d70\uff0c\n\u4e0d\u80fd\u8d70\u5c31\u7b49\u5f85\uff0c\u8fd9\u662f\u65e0\u6cd5\u63a7\u5236\u7684\u3002  \n\u6240\u4ee5\u53ea\u8003\u8651\u6c2e\u6c14\u52a0\u901f\u5668\u52a0\u5728\u54ea\u91cc\u53ef\u4ee5\u4f7f\u65f6\u95f4\u603b\u548c\u5c3d\u91cf\u5c11\u3002\n### \u6240\u4ee5\n\n\u5982\u679c\u9009\u62e9\u52a0\u901f\uff0c\u53ef\u80fd\u4f1a\u4f7f\u540e\u9762\u7b49\u5f85\u7684\u65f6\u95f4\u66f4\u957f\uff0c\u6216\u8005\u66f4\u77ed\uff0c\u5bf9\u540e\u9762\u90fd\u4f1a\u6709\u5f71\u54cd\u3002\n\n\u4f46\u662f\u6cbf\u7740\u4e00\u6761\u8fb9\u52a0\u901f\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u6240\u6709\u8fb9\u4e48\uff1f  \n#### \u8fd9\u53ef\u4e0d\u4e00\u5b9a \n\u6765\u6765\u6765\uff0c\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a  \n1.\u5230\u4e0b\u4e00\u4e2a\u70b9\u8fd8\u9700\u8981\u7b49\u5f85\uff1a\u4ee5\u540e\u7684\u65f6\u95f4\u5c31\u4e0d\u518d\u5f71\u54cd\u4e86  \n2.\u5230\u4e0b\u4e00\u4e2a\u70b9\u4e0d\u9700\u8981\u7b49\u5f85\uff1a\u5bf9\u4ee5\u540e\u7684\u65f6\u95f4\u8fd8\u4f1a\u52a0\u901f\u76f4\u5230\u2026\u2026\u51fa\u73b0\u60c5\u51b51\uff08\u6216\u8005\u5230\u6700\u540e\u4e00\u4e2a\u70b9\uff09\uff01\uff01\n\n\u5373\u6bcf\u6b21\u7528\u52a0\u901f\u5668\u90fd\u4f1a\u5bf9\u540e\u9762\u7684\u4eba\u6709\u5f71\u54cd\uff0c\n\n\u7528sum[i]\u8bb0\u5f55\u5230i\u7684\u4eba\u6570\uff0c\u524d\u7f00\u548c\u5904\u7406\uff0cg[i]\u4ee3\u8868\u6bcf\u4e2a\u70b9\u6240\u80fd\u5f71\u54cd\u5230\u7684\u6700\u8fdc\u70b9\uff0c\n\n\u90a3\u4e48sum[i + g[i]] - sum[i] \u5373\u662f\u80fd\u5f71\u54cd\u5230\u7684\u4eba\u6570\n\n\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u9009\u62e9\u5f71\u54cd\u5c3d\u91cf\u5927\u7684\u70b9\u51cf\u6389\uff08\u5728\u8fd9\u91cc\u8d2a\u5fc3\uff09\u3002\n\n## CODE:\n```cpp\n/*last[ i ] : \u6700\u540e\u4e00\u4e2a\u4eba\u5230\u8fbei\u7ad9\u70b9\u7684\u65f6\u95f4\u3002\nsum[ i ] : \u5230i\u7ad9\u70b9\u7684\u603b\u4eba\u6570\u3002\nenter[ i ] : \u516c\u4ea4\u8f66\u5230i\u7ad9\u70b9\u7684\u6700\u5c11\u65f6\u95f4\u3002\ng[ i ] : \u6bcf\u4e2a\u7ad9\u70b9\u6240\u80fd\u5f71\u54cd\u5230\u7684\u6700\u8fdc\u7ad9\u70b9\uff0c\u5373\u8981\u6c42\u7684\u5f71\u54cd\u3002*/\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n\n#define N 30001\n\nusing namespace std;\n\nint n,m,k;\nint dis[N],last[N],g[N],enter[N];\nint ans,sum[N],maxx = -1;\n\nstruct node{\n    int time,start,end;\n}a[N];\n\ninline void bus(int x){\n    while(x){\n        --x;\n        g[n] = g[n - 1] = n;\n        int tar;\n        maxx = -1;\n        for(int i = n - 2;i >= 1;-- i){\n            if(enter[i + 1] <= last[i + 1])//\u4e0b\u4e00\u4e2a\u70b9\u5982\u679c\u7b49\u5f85 \n                g[i] = i + 1;//\u6700\u591a\u5f71\u54cd\u5230\u4e0b\u4e00\u4e2a\n            else //\u4e0d\u7b49\u5f85 \n                g[i] = g[i + 1];//\u7ee7\u7eed\u51cf\u5c11\u540e\u9762\u7684\u65f6\u95f4 \n        }\n        for(int i = 1;i < n;++ i){//for\u8fb9\u6570 \n            int tmp = sum[g[i]] - sum[i];//\u6700\u591a\u5f71\u54cd\u7684\u4eba\u6570 \n            if(tmp > maxx && dis[i] > 0){\n                maxx = tmp;\n                tar = i;//\u6807\u8bb0\u6700\u4f18\u60c5\u51b5\u51cf\u7684\u70b9 \n            }\n        }\n        ans -= maxx;//\u66f4\u65b0ans \n        dis[tar] --;//\u51cf\u6389dis \n        for(int i = 2;i <= n;++ i){\n            enter[i] = max(enter[i - 1],last[i - 1]) + dis[i - 1];//\u91cd\u65b0\u66f4\u65b0enter \n        }\n    }\n    return;\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i = 1;i < n;++ i)\n        scanf(\"%d\",&dis[i]);\n    for(int i = 1;i <= m;++ i)\n        scanf(\"%d%d%d\",&a[i].time,&a[i].start,&a[i].end);\n    for(int i = 1;i <= m;++ i){\n        last[a[i].start] = max(last[a[i].start],a[i].time);//\u6700\u540e\u4e00\u4e2a\u4eba\u5230a[i].start\u7ad9\u70b9\u7684\u65f6\u95f4 \u548c\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4\u53d6max \n        sum[a[i].end] ++;\n    }\n    enter[1] = last[1];\n    for(int i = 1;i <= n;++ i)\n        sum[i] += sum[i - 1];//\u5230i\u7ad9\u70b9\u7684\u603b\u4eba\u6570 \u524d\u7f00\u548c\u5904\u7406 \n    \n    for(int i = 2;i <= n;++ i)\n        enter[i] = max(enter[i - 1],last[i - 1]) + dis[i - 1];//\u516c\u8f66\u5230i\u7ad9\u70b9\u7684\u6700\u5c11\u65f6\u95f4 \u548c\u6700\u540e\u5230\u7684\u65f6\u95f4\u53d6max \n    for(int i = 1;i <= m;++ i)\n        ans += enter[a[i].end] - a[i].time;//\u5904\u7406\u51fa\u4e0d\u52a0\u52a0\u901f\u5668\u7684answer,\u540e\u9762\u5c31\u53ef\u4ee5\u76f4\u63a5\u51cf\u5566~\n    bus(k);\n    printf(\"%d \\n\",ans);\n    return 0;\n}\n```\n\n~~\u771f\u7684\u662f\u8003\u9a8c\u667a\u5546QAQ...~~",
        "postTime": 1524362829,
        "uid": 54879,
        "name": "Law_Aias",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u4e0d\u96be\u7684\u8d2a\u5fc3\u9898\uff0c\u52a0\u4e00\u70b9\u9012\u63a8\u5c31\u53ef\u4ee5\u8fc7\uff0c\u524d\u9762\u7684\u5927\u4f6c\u90fd\u7528\u7f51\u7edc\u6d41\u8d39\u7528\u6d41\u4ec0\u4e48\u7684\n**~~\u6211\u662f\u771f\u7684\u4e0d\u4f1a~~**\n\n\u6211\u53c2\u8003\u7684\u535a\u5ba2\n\u7f51\u5740\uff1ahttps://blog.csdn.net/SSLGZ_yyc/article/details/86546543\n\n# ****\u5206\u6790**** \n\n\u9996\u5148\uff0c\u6211\u4eec\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u7ad9\u4e0b\u8f66\u7684\u4eba\u6570\uff0c\u53ea\u8981\u679a\u4e3e\u6bcf\u4e00\u4e2a\u52a0\u901f\u5668\u5c31\u884c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4e58\u5ba2\u7684\u65c5\u884c\u65f6\u95f4\u53ea\u548c\u4ed6\u5230\u8fbe\u65f6\u95f4\u548c\u4e0b\u8f66\u65f6\u95f4\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u679a\u4e3e\u6bcf\u4e00\u4e2a\u52a0\u901f\u5668\u7684\u65f6\u5019\uff08\u8fd9\u91cc\u6570\u636e\u5f88\u5c0f\uff0c\u5b8c\u5168\u53ef\u4ee5\u679a\u4e3e\uff0c\u65f6\u95f4\u8fd8\u7ef0\u7ef0\u6709\u4f59\uff09\uff0c\u7136\u540e\u5c31\u662f\u8d2a\u5fc3\u7684\u8fc7\u7a0b\uff1a\u627e\u5230\u4eba\u6700\u591a\u7684\u4e00\u6bb5\u8def\u52a0\u901f\u8fd9\u4e00\u6bb5\u8def\u5373\u53ef\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e00\u6bb5\u8def\u7684\u4eba\u6570\n\n\u6211\u4eec\u6682\u5b9a\u6bcf\u4e2a\u666f\u70b9\u7684\u51fa\u53d1\u65f6\u95f4\u4e3a\u9700\u8981\u4ece\u8be5\u666f\u70b9\u4e0a\u8f66\u7684\u6700\u665a\u5230\u8fbe\u7684\u4e58\u5ba2\uff0c\u90a3\u4e48\u5230\u8fbe\u65f6\u95f4\u5373\u4e3a\u4e0a\u4e00\u4e2a\u666f\u70b9\u7684\u51fa\u53d1\u65f6\u95f4\u6216\u5230\u8fbe\u65f6\u95f4\u66f4\u5927\u7684\u4e00\u4e2a\u503c\u52a0\u4e0a\u4ece\u4e0a\u4e00\u4e2a\u666f\u70b9\u5230\u8be5\u666f\u70b9\u6240\u9700\u8981\u7684\u65f6\u95f4\u3002\u5982\u679c\u67d0\u4e2a\u666f\u70b9\u7684\u51fa\u53d1\u65f6\u95f4\u5c0f\u4e8e\u5230\u8fbe\u65f6\u95f4\uff0c\u90a3\u4e48\u8bf4\u660e\u82e5\u5728\u8fd9\u6bb5\u65c5\u7a0b\u4e2d\u4f7f\u7528\u52a0\u901f\u5668\uff0c\u80fd\u591f\u9020\u798f\u5230\u4e0b\u4e00\u4e2a\u666f\u70b9\u4e0b\u8f66\u7684\u4eba\u3002\u901a\u8fc7\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u4e86\uff0c\u7136\u540e\u6bcf\u6b21\u8d2a\u5fc3\u5b8c\u4e4b\u540e\u90fd\u66f4\u65b0\u5230\u8fbe\u666f\u70b9\u7684\u65f6\u95f4\u5373\u53ef\u3002\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6211\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u628a\u6240\u6709\u4eba\u7684\u5230\u8fbe\u666f\u70b9\u7684\u65f6\u95f4\u90fd\u51cf\u53bb\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6700\u540e\u518d\u51cf\u4e86\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u9700\u8981\u5728\u6bcf\u4e2a\u666f\u70b9\u4e0b\u8f66\u7684\u4eba\u6570*\u5230\u8fbe\u8be5\u666f\u70b9\u7684\u65f6\u95f4\u7684\u548c\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\n\u4e0a\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,k;\n#define N 1002\n#define M 10002\nint d[N],num[N],last[N],time1[N],date[N];\nint ans=0;\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=2;i<=n;i++)\n\tscanf(\"%d\",&d[i]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tans-=a;\n\t\tnum[c]++;\n\t\tlast[b]=max(a,last[b]);//\u666f\u70b9\u7684\u51fa\u53d1\u65f6\u95f4\u4e3a\u9700\u8981\u4ece\u8be5\u666f\u70b9\u4e0a\u8f66\u7684\u6700\u665a\u5230\u8fbe\u7684\u4e58\u5ba2 \n\t}\n\tfor(int i=2;i<=n;i++)\n\ttime1[i]=max(time1[i-1],last[i-1])+d[i];//\u9012\u63a8\u51fa\u5728\u672a\u4f7f\u7528\u52a0\u901f\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u5230\u6bcf\u4e2a\u7ad9\u7684\u65f6\u95f4 \n\tint bz=0;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tfor(int j=n;j>=2;j--)\n\t\t{\n\t\t\tdate[j]=num[j]; \n\t\t\tif(last[j]<time1[j])date[j]+=date[j+1];\n\t\t}\n\t\tint maxn=0;\n\t\tfor(int j=2;j<=n;j++)\n\t\t{\n\t\t\tif(date[j]>maxn&&d[j]>0)\n\t\t\t{\n\t\t\t\tmaxn=date[j];\n\t\t\t\tbz=j;\n\t\t\t}\n\t\t}\n\t\td[bz]--;\n\t\tfor(int j=bz;j<=n;j++)time1[j]=max(time1[j-1],last[j-1])+d[j];//\u66f4\u65b0 \n\t} \n\tfor(int i=2;i<=n;i++)\n\tans+=num[i]*time1[i];\n\tprintf(\"%d\",ans);\n\treturn 0; \n}\n```\n\u5b8c\u7ed3\u6492\u82b1\uff0c\u4e00\u9053\u597d\u9898\n",
        "postTime": 1561968433,
        "uid": 111294,
        "name": "xcyy",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\u3002\u3002\u3002\n\n\u6a21\u62df\u3002\u3002\u3002\n\n\u4e71\u641e\u3002\u3002\u3002\n\n\u60f3\u901a\u4e86\u5c31\u4e0d\u96be\u4e86\u3002\n\n\n\u9996\u5148\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u8981\u6240\u6709\u65c5\u5ba2\u7684\u65c5\u884c\u65f6\u95f4\u6700\u5c0f\uff0c\u90a3\u4e48\u5728\u52a0\u52a0\u901f\u5668\u7684\u65f6\u5019\uff0c\u80af\u5b9a\u8981\u9009\u62e9\u4e00\u6761\u65c5\u5ba2\u7ecf\u8fc7\u7684\u6570\u91cf\u6700\u591a\u7684\u90a3\u6761\u8def\uff08\u5f88\u663e\u7136\uff09\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5927\u81f4\u7684\u601d\u8def\u5c31\u6709\u4e86\uff1a\u5982\u679c\u8fd8\u6709\u52a0\u901f\u5668\u5269\u4f59\uff0c\u6211\u4eec\u5c31\u9009\u62e9\u65c5\u5ba2\u7ecf\u8fc7\u7684\u6570\u91cf\u6700\u591a\u7684\u90a3\u6761\u8def\u51cf\u4e00\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u7531\u4e8e\u67d0\u4e9b\u4e58\u5ba2\u7279\u522b\u6ca1\u6709\u65f6\u95f4\u89c2\u5ff5\uff0c\u603b\u662f\u5f88\u8fdf\u5230\u8fbe\u4e00\u4e2a\u7ad9\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u4e58\u5ba2\u5b9e\u5728\u5230\u8fbe\u5f97\u592a\u8fdf\uff0c\u6bd4\u516c\u4ea4\u8f66\u5230\u8fbe\u8fd9\u4e2a\u7ad9\u70b9\u7684\u65f6\u95f4\u66f4\u8fdf\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u7528\u5728\u8fd9\u6761\u8fb9\u4e0a\u52a0\u52a0\u901f\u5668\u4e86\uff0c\u56e0\u4e3a\u5373\u4f7f\u52a0\u4e86\u4f60\u4e5f\u8981\u7b49\u5230\u4e58\u5ba2\u6765\u4e86\u624d\u80fd\u8d70\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u6700\u4f18\u89e3\u3002\n\n\n\u641e\u61c2\u4e0a\u9762\u4e00\u4e9b\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6765\u505a\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\n\n\u4e00\u4e9b\u6570\u7ec4\uff1aa[i].s a[i].e a[i].t\u5206\u522b\u8868\u793a\u7b2ci\u4e2a\u4e58\u5ba2\u7684\u8d77\u59cb\u70b9\u3001\u7ec8\u70b9\u3001\u5230\u8fbe\u65f6\u95f4   d[i]\uff1ai - i+1\u8fd9\u6761\u8fb9\u7684\u957f   latest[i]\uff1a\u6700\u665a\u5230\u8fbei\u70b9\u7684\u4eba\u7684\u5230\u8fbe\u65f6\u95f4   getto[i]\uff1a\u516c\u4ea4\u8f66\u5230\u8fbei\u70b9\u7684\u65f6\u95f4   getoff[i]\uff1a\u5728i\u70b9\u4e0b\u8f66\u7684\u4eba\u6570   f[i]\uff1ai - i+1\u8fd9\u6761\u8fb9\u6700\u591a\u80fd\u51cf\u5c11\u591a\u5c11\u65f6\u95f4\n\n\u6bcf\u4e00\u6b21k --\uff0c\u7528\u6389\u4e00\u4e2a\u52a0\u901f\u5668\uff0c\u5148\u5bf9\u6bcf\u6761\u8def\u6c42\u5b83\u7684f[i]\uff0c\u7136\u540e\u627e\u5230\u6700\u5927\u7684f[i]\u7684\u4f4d\u7f6e\uff0c\u5c06\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u51cf\u4e00\u3002\u505a\u5b8c\u4ee5\u540e\u8981\u66f4\u65b0getto[i]\uff0c\u56e0\u4e3a\u4e00\u6761\u8fb9\u7f29\u77ed\u4e86\u957f\u5ea6\u3002\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u627e\u4e0d\u5230\u53ef\u4ee5\u51cf\u5c11\u65f6\u95f4\u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\u4e86\u3002\n\n\u6700\u540e\u7b54\u6848\u5c31\u662fsum{getto[a[i].e] - a[i].t}\u3002\n\n\n\u4ee3\u7801~\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u957f\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cctype>\nusing namespace std;\n\nconst int N = 1010;\nconst int M = 10010;\nint d[N], getto[N], getoff[N], latest[N], f[N];\n//d[i]\uff1ai - i+1\u8fd9\u6761\u8fb9\u7684\u957f\n//latest[i]\uff1a\u6700\u665a\u5230\u8fbei\u70b9\u7684\u4eba\u7684\u5230\u8fbe\u65f6\u95f4\n//getto[i]\uff1a\u516c\u4ea4\u8f66\u5230\u8fbei\u70b9\u7684\u65f6\u95f4\n//getoff[i]\uff1a\u5728i\u70b9\u4e0b\u8f66\u7684\u4eba\u6570\n//f[i]\uff1ai - i+1\u8fd9\u6761\u8fb9\u6700\u591a\u80fd\u51cf\u5c11\u591a\u5c11\u65f6\u95f4\n\nstruct Passenger{\n    int t, s, e;\n}a[M];\n\ninline int read()\n{\n    char ch = getchar(); int x = 0;\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)){\n        x = x * 10 + ch - '0'; ch = getchar();\n    }\n    return x;\n}\n\nint main()\n{\n    int n, m, k;\n    n = read(); m = read(); k = read();\n    for (int i = 1; i < n; i ++) d[i] = read();\n    for (int i = 1; i <= m; i ++){\n        a[i].t = read(), a[i].s = read(), a[i].e = read();\n        latest[a[i].s] = max(latest[a[i].s], a[i].t);\n        getoff[a[i].e] ++;\n    }\n    for (int i = 1; i <= n; i ++)\n        getto[i] = max(getto[i - 1], latest[i - 1]) + d[i - 1];\n    while (k --){\n        for (int i = n; i >= 2; i --)\n            if (!d[i - 1]) f[i - 1] = 0;\n            else{\n                f[i - 1] = getoff[i];\n                if (getto[i] > latest[i]) f[i - 1] = f[i - 1] + f[i];\n            }\n        int maxtime = 0, pos = 0;\n        for (int i = 1; i < n; i ++)\n            if (f[i] > maxtime){\n                maxtime = f[i]; pos = i;\n            }\n        if (pos == 0) break;\n        d[pos] --;\n        for (int i = pos + 1; i <= n; i ++) getto[i] = max(getto[i - 1], latest[i - 1]) + d[i - 1];\n    }\n    int tot = 0;\n    for (int i = 1; i <= m; i ++)\n        tot += getto[a[i].e] - a[i].t;\n    printf(\"%d\\n\", tot);\n    return 0;\n}\n```\nPS.\u5176\u5b9e\u89c9\u5f97\u5e94\u8be5\u6dfb\u52a0\u4e00\u4e2a\u53eb\u4e71\u641e\u7684\u6807\u7b7e= =\n",
        "postTime": 1502983392,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "> $O(nlog(n))$\u7684\u505a\u6cd5\u771f\u662f\u6e05\u5947\u65e0\u6bd4\uff0c~~\u76ee\u524d\u5df2\u82b18h+\u7684\u65f6\u95f4\u3002\u3002\u3002~~ 9h\u6210\u529fAC\n\n\u4e3b\u8981\u662f\u5199\u5fc3\u5f97\uff0c\u800c\u4e14\u53ef\u80fd\u662f\u6211\u5728luogu\u7684\u7b2c\u4e00\u7bc7&\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u4e86\n\n\u52a0\u5f3a\u7248\u53ef\u4ee5\u5728LOJ\u4e0a\u627e\u5230\n\n\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c$n,m\\le 10^5$\uff0c$k\\le5\\times10^6$\uff0c$D_i\\le 1000$\u3002 \n\n-----------------\n# \u5f00\u9898\n\n\u62ff\u5230\u9898\u540e\u6709\u4e00\u4e2a\u201c\u663e\u800c\u6613\u89c1\u201d\u7684\u8d2a\u5fc3\uff1a\u4e00\u6761\u9053\u8def\u4e0d\u80fd\u52a0\u901f\u6b21\u6570\u8fc7\u591a\u800c\u5bfc\u81f4\u8f66\u7b49\u4eba\uff0c\u6240\u4ee5\u52a0\u901f\u6709\u4e00\u4e2a\u8303\u56f4\uff0c\u540c\u65f6\u6bcf\u6b21\u52a0\u901f\u9009\u62e9\u4e00\u6761\u4eba\u6570\u6700\u591a\u7684\u8def\uff08\u6211\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\u9519\u7684\u5f88\u51f6\uff09\n\n\u6240\u4ee5\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff0c\u540c\u65f6\u628a\u8fc7\u77ed\u7684\u8fb9\u8d4b\u4e3a$- \\infty$\n\n\u590d\u6742\u5ea6$O(klog(n))$\u3002~~\u7f8e\u6ecb\u6ecb~~\n\n\u7136\u540e\u6211\u5c31\u6302\u4e86\n\n## \u9519\u56e0\u4e00\uff1a\n\n**\u4e0d\u8003\u8651\u4e00\u6761\u8fb9\u4f1a\u5bf9\u540e\u9762\u8fde\u7eed\u7684\u4e00\u4e9b\u8fb9\u4ea7\u751f\u5f71\u54cd**\n\n\u4e5f\u5c31\u662f\u8bf4\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\u4e0d\u662f\u6700\u4f18\u7684\u51b3\u7b56\u4e86\n\n\u4e5f\u5c31\u662f\u8bf4\u8981\u5f00\u59cb\u63a8\u516c\u5f0f\u4e86\n\n\u5206\u6790\u540e\u53ef\u5f97\n\n$$ans=\\sum_{i=2}^nTim_i*cnt_i-\\sum T_i$$\n\n\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u91cd\u8981\u4e5f\u5f88\u6709\u7528\uff01\n\n\u5176\u4e2d$Tim_i$\u8868\u793a\u516c\u4ea4\u8f66\u5230\u8fbe\u7b2c$i$\u53f7\u666f\u70b9\u7684\u65f6\u95f4\uff0c$cnt_i$\u8868\u793a\u5728$i$\u666f\u70b9\u4e0b\u8f66\u7684\u4eba\u6570\n\n\u663e\u7136\u7684\uff0c\u5982\u679c\u6211\u4eec\u8bbe$Begin_i$\u4e3a\u4ece$i$\u53f7\u666f\u70b9\u53d1\u8f66\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u6709\n\n$$Tim_i=Begin_{i-1}+D_{i-1}$$\n\n\u6240\u4ee5\u5206\u6790\u4e00\u6ce2$Begin$\u7684\u5f0f\u5b50\n\n\u9996\u5148\u6211\u4eec\u8bbe$i$\u53f7\u666f\u70b9\u6700\u665a\u5230\u7684\u65c5\u5ba2\u7684\u65f6\u95f4\u4e3a$Maxn_i$\n$$Begin_i=max\\left(Maxn_i,Begin_{i-1}+D_{i-1} \\right)$$\n\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u9012\u63a8\u5f0f\uff0c\u5c1d\u8bd5\u628a\u5b83\u62c6\u5f00\n\n$$\nBegin_i=max\\left(Maxn_i,max(Maxn_{i-1}+D_{i-1},Begin_{i-2}+D_{i-2}+D_{i-1})\\right)\n$$\n\n\u50cf\u8fd9\u6837\u4e00\u76f4\u62c6\u4e0b\u53bb\uff0c\u5c31\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u5947\u5999\u7684\u5f0f\u5b50\n\n$$\nBegin_i=max\\left(Maxn_i,\\underset{1\\le j<i}{max}\\begin{Bmatrix}Maxn_j+D_{j\\to i}\\end{Bmatrix}\\right)\n$$\n\n\u628a$D_{j\\to i}$\u62c6\u6210\u524d\u7f00\u548c\u5f62\u5f0f$pre_i-pre_j$,\u518d\u7a0d\u7a0d\u53d8\u4e00\u4e0b\u5f62\uff0c\u5c31\u6709\uff1a\n\n$$\nBegin_i=max\\left(Maxn_i,\\underset{1\\le j<i}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}+pre_i\\right)\n$$\n$$\n=max\\left(Maxn_i-pre_i,\\underset{1\\le j<i}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}\\right)+pre_i\n$$\n\n\u5408\u5e76\u540e\u5b8c\u6210\u53d8\u5f62\uff1a\n\n$$\nBegin_i=\\underset{1\\le j\\le i}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}+pre_i\n$$\n\n\u8fd9\u65f6\u518d\u56de\u8fc7\u5934\u6765\u770b\u7b54\u6848\uff0c\u53ef\u4ee5\u63a8\u4e00\u6ce2\n\n$$\n\\sum_{i=2}^nTim_i* cnt_i-\\sum T_i\n$$\n\n$$\n=\\sum_{i=2}^n(Begin_{i-1}+D_{i-1})* cnt_i-\\sum T_i\n$$\n\n$$\n=\\sum_{i=2}^n\\left(\\underset{1\\le j\\le i-1}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}+pre_{i-1}+D_{i-1}\\right)* cnt_i-\\sum T_i\n$$\n\n$pre_{i-1}+D_{i-1}$\u5c31\u662f$pre_i$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7ef4\u62a4\u4e00\u4e0b${max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}$\u5c31\u597d\u4e86\uff0c\u7ebf\u6bb5\u6811\u89e3\u51b3\n\n\u81f3\u6b64\u8111\u5b50\u70e7\u7cca\uff0c\u60f3\u4e0d\u51fa\u600e\u4e48\u8d2a\u5fc3\u4e86\n\n\u4e8e\u662f\u53bb\u779f\u4e86\u7f51\u4e0a\u552f\u4e00\u4e00\u4efd\u9898\u89e3\uff0c\u53d7\u4e86\u5f88\u5927\u7684\u542f\u53d1\n\n\u8bbe$S_i$\u8868\u793a\u666f\u70b9$i$\u516c\u4ea4\u5230\u8fbe\u65f6\u95f4\u548c\u6e38\u5ba2\u6700\u665a\u65f6\u95f4\u4e4b\u5dee\uff0c\u663e\u7136\u5982\u679c$S_i>0$\u5c31\u6709\u63d0\u901f\u7684\u4f59\u5730\n\u4e8e\u662f\u63a8\u4e00\u6ce2\u8fd9\u4e2a\u4e1c\u897f\n\n$$\nS_i=Tim_i-Maxn_i\n$$\n\n$$\n=Begin_{i-1}+D_{i-1}-Maxn_i\n$$\n\n$$\n=\\underset{1\\le j\\le i-1}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}+pre_{i-1}+D_{i-1}-Maxn_i\n$$\n\n$$\n=\\underset{1\\le j\\le i-1}{max}\\begin{Bmatrix}Maxn_j-pre_j\\end{Bmatrix}-(Maxn_i-pre_i)\n$$\n\n\u901a\u4fd7\u70b9\u8bb2\uff0c\u5982\u679c$i$\u53f7\u70b9\u524d\u9762\u6709\u6bd4\u5b83\u5927\u7684\u70b9\uff0c\u90a3\u4e48\u90a3\u4e2a\u70b9\u53ef\u4ee5\u5bf9$i$\u53f7\u70b9\u4ea7\u751f\u5f71\u54cd\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u5f88\u6e05\u695a\u4e86\uff1a\u4e00\u4e2a\u70b9\u80fd\u5f71\u54cd\u540e\u9762\u8fde\u7eed\u4e00\u6bb5\u6bd4\u5b83\u5c0f\u7684\u70b9\uff0c\u628a\u8fd9\u4e2a\u70b9\u7684\u7ba1\u8f96\u8303\u56f4\u6846\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u4e00\u4e2a\u70b9\u662f\u5426\u4f18\u79c0\u53d6\u51b3\u4e8e\u5b83\u533a\u95f4\u5185\u9664\u5b83\u4ee5\u5916\u7684\u70b9\u7684$cnt$\u603b\u548c\uff08\u56e0\u4e3a\u51cf\u5c0f$1$\u7684$D_i$\u6743\u503c\u5c31\u51cf\u5c0f\u4e86$\\sum\\limits_{i=l+1}^rcnt_i$\u7684\u7b54\u6848\uff09\n\u6240\u4ee5\u628a\u6240\u6709\u533a\u95f4\u4e22\u8fdb\u5806\u91cc\uff0c\u6743\u503c\u4e3a$\\sum cnt$\n\n\u73b0\u5728\u8003\u8651\u4fee\u6539\u7b54\u6848\uff08\u6211\u8981\u5410\u4e86md\uff09\n\n\u5982\u679c\u6211\u4eec\u4fee\u6539$D_i$\uff0c\u5b83\u4f1a\u8ba9\u5b83\u540e\u9762\u6240\u6709\u7684$pre$\u51cf\u5c0f\uff0c\u4e5f\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u52a0\u64cd\u4f5c\uff0c\u540c\u65f6\u5728$k>0$\u4e0d\u65ad\u52a0\u901f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u4f1a\u6709\u4e00\u4e2a\u70b9\u4e0e\u5de6\u7aef\u70b9\u4e00\u6837\u5927\uff0c\u90a3\u4e48\u5c31\u4ece\u8fd9\u4e2a\u70b9\u5206\u5272\u533a\u95f4\uff0c\u7531\u4e8e\u6700\u591a\u64cd\u4f5c$2n$\u4e2a\u533a\u95f4\uff0c\u603b\u590d\u6742\u5ea6$O(nlog(n))$\u3002~~\u7f8e\u6ecb\u6ecb~~\n\n\u7136\u540e\u6211\u53c8\u6302\u4e86\n\n## \u9519\u56e0\u4e8c\uff1a\n\n**\u6ca1\u6709\u8003\u8651$D_i$\u51cf\u6210\u8d1f\u6570\u7684\u60c5\u51b5**\n\n\u6b64\u65f6$D_i=0$\uff0c\u533a\u95f4\u53d8\u6210$l+1\\to r$\n\n\u8279\n\n\u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5cLOJ 60\u5206\uff08\u9ed1\u7ebf\uff09\n\n## \u9519\u56e0\u4e09\uff1a\n**\u6ca1\u6709\u8003\u8651$cnt_{r+1}$\u5bf9\u533a\u95f4l~r\u7684\u8d21\u732e**\n\u7528\u4eba\u8bdd\u5c31\u662f\uff1a\u5982\u679c\u516c\u4ea4\u53ef\u80fd\u63d0\u524d\u5230\u7ad9\uff0c\u4ecd\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u56e0\u4e3a\u4f1a\u6709\u4eba\u5728\u8fd9\u4e00\u7ad9\u4e0b\u8f66\uff0c\u6240\u4ee5\u8bf4\u533a\u95f4\u6700\u5c0f\u957f\u5ea6\u4e3a1\n\n\u53ef\u662f\u600e\u4e48\u8fd8\u662f60\u5206\uff1f\n\n## \u9519\u56e0\u56db\uff1a\n**\u5904\u7406$D_i\\to 0$\u7684\u8fc7\u7a0b\u6709\u9505**\n\n\u4e0d\u77e5\u9053\u8bfb\u8005\u53d1\u73b0\u6ca1\u6709\n\n\u56e0\u4e3a\u6211\u4eec\u9ed8\u8ba4\u533a\u5728\u95f4\u5185\u5de6\u7aef\u70b9\u6700\u5927\uff0c\u800c\u4e0a\u9762\u7684\u8fc7\u7a0b\u663e\u7136\u6ca1\u6709\u4fdd\u8bc1\u3002\n\u4e0d\u614c\uff0c\u5206\u6790\u4e00\u4e0b$S_i$\u7684\u5f0f\u5b50\uff0c\u53ef\u4ee5\u77e5\u9053\u9700\u8981\u5b58\u4e00\u4e2a\u65e7\u533a\u95f4\u7684\u201c\u5de6\u7aef\u70b9\u201d\u503c\uff0c\u4e0e\u5f53\u524d\u5de6\u7aef\u70b9\u503c\u53d6$max$\uff08\u76f8\u5f53\u4e8e\u65e7\u5de6\u7aef\u70b9\u4ecd\u7136\u7ba1\u8f96\uff0c\u53ea\u662f\u4e0d\u80fd\u76f4\u63a5\u51cf\u5c0f$D_i$\u4e86\uff09\n\n\u8fd8\u662f60\u5206\uff0c\u5fc3\u6001\u6709\u70b9\u5c0f\u5d29\n\n## \u9519\u56e0\u4e94\nwtcl\n\n\u4e0d\u80fd\u76f4\u63a5\u5b58\u65e7\u5de6\u7aef\u70b9\u503c\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fd9\u4e2a\u503c\u4f1a\u88ab\u4fee\u6539\u3002\u6240\u4ee5\u6211\u4eec\u5b58\u65e7\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u53d6$max$\u65f6\u67e5\u8be2\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u81f3\u6b64\u6536\u83b7$\\color{green}{Accepted}$\n\n\u9644\u4e0a\u6700\u7ec8\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline char nc(){\n\tstatic char buf[100000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n//#define nc getchar\ninline int read(){\n\tint x=0,f=1;\n\tchar ch=nc();\n\tfor(;!isdigit(ch);ch=nc())if(ch=='-')f=-1;\n\twhile(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=nc();}\n\treturn x*f;\n}\ntypedef long long ll;\nconst int N=1e5+3;\nstruct tree{\n\tint l,r;\n\tlong long maxn,maxpos,lazy;\n\tinline tree friend operator +(tree l,tree r){\n\t\ttree ret={0,0,0,0,0};ret.l=l.l;ret.r=r.r;\n\t\tif(l.maxn>=r.maxn)ret.maxpos=l.maxpos;\n\t\telse ret.maxpos=r.maxpos;\n\t\tret.maxn=max(l.maxn,r.maxn);return ret;\n\t}\n}t[N<<2];\nint cnt[N],maxn[N],sum[N],pre[N],d[N];\n//#define lim(i) (maxn[i+1]-maxn[i])\nstruct tour{\n\tint tim,l,r;\n}p[N*10];\ninline bool cmp(tour a,tour b){\n\tif(a.l==b.l)return a.tim<b.tim;\n\treturn a.l<b.l;\n}\nint n,m,k;ll T;\n#define lc (p<<1)\n#define rc ((p<<1)|1)\ninline void pushup(int p){\n\tif(t[lc].maxn>=t[rc].maxn)t[p].maxpos=t[lc].maxpos;\n\telse t[p].maxpos=t[rc].maxpos;\n\tt[p].maxn=max(t[lc].maxn,t[rc].maxn);\n}\ninline void pushnow(int p,int w){\n\tt[p].maxn+=w;t[p].lazy+=w;\n}\ninline void pushdown(int p){\n\tif(t[p].lazy!=0){\n\t\tpushnow(lc,t[p].lazy);pushnow(rc,t[p].lazy);t[p].lazy=0;\n\t}\n}\nvoid build(int p,int l,int r){\n\tt[p].l=l;t[p].r=r;t[p].lazy=0;\n\tif(l==r){t[p].maxn=maxn[l]-pre[l],t[p].maxpos=l;return;}\n\tint mid=(l+r)>>1;\n\tbuild(lc,l,mid);build(rc,mid+1,r);\n\tpushup(p);\n}\nvoid lmy(int p,int pl,int pr,int w){\n\tint l=t[p].l,r=t[p].r;\n\tif(pl<=l&&r<=pr){pushnow(p,w);return;}\n\tint mid=(l+r)>>1;pushdown(p);\n\tif(pl<=mid)lmy(lc,pl,pr,w);\n\tif(pr>mid)lmy(rc,pl,pr,w);\n\tpushup(p);\n}\ntree glf(int p,int pl,int pr){\n\tint l=t[p].l,r=t[p].r;\n\tif(pl<=l&&r<=pr){return t[p];}\n\tpushdown(p);int mid=(l+r)>>1;\n\tif(pl<=mid&&pr>mid)return glf(lc,pl,pr)+glf(rc,pl,pr);\n\telse if(pl<=mid)return glf(lc,pl,pr);\n\telse return glf(rc,pl,pr);\n}\nstruct segment{\n\tint l,r;ll sum, vis;\n\tsegment(int _l=0,int _r=0,ll _sum=0,ll _vis=0):l(_l),r(_r),sum(_sum),vis(_vis){}\n\tconst bool operator <(const segment &b)const{\n\t\treturn sum<b.sum;\n\t}\n};\npriority_queue<segment>q;\n\nint main(){\n\tn=read();m=read();k=read();\n\tfor(int i=1;i<n;i++)d[i]=read(),pre[i+1]=pre[i]+d[i];\n\tfor(int i=1;i<=m;i++){\n\t\tp[i].tim=read();p[i].l=read();p[i].r=read();T+=p[i].tim;\n\t\tmaxn[p[i].l]=max(maxn[p[i].l],p[i].tim);cnt[p[i].r]++;\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n+1;i++)sum[i]=sum[i-1]+cnt[i];\n\tfor(int i=2,last=1,lastval=maxn[1]-pre[1];i<=n;i++){\n\t\tif(maxn[i]-pre[i]>=lastval)q.push(segment(last,i-1,sum[i]-sum[last],last)),last=i,lastval=maxn[i]-pre[i];\n\t\tif(i==n&&last!=n)q.push(segment(last,i,sum[i]-sum[last],last));\n\t}\n\twhile(k&&!q.empty()){\n\t\tsegment now=q.top();q.pop();\n\t\tif(now.l==now.r){\n\t\t\tif(k<=d[now.l])lmy(1,now.l+1,n,k),d[now.l]-=k,k=0;\n\t\t\telse k-=d[now.l],lmy(1,now.l+1,n,d[now.l]),d[now.l]=0;\n\t\t\tcontinue;\n\t\t}\n\t\tint x=glf(1,now.l+1,now.r).maxn,lmaxn=max(glf(1,now.l,now.l).maxn,glf(1,now.vis,now.vis).maxn);\n\t\tif(k<=min(d[now.l],lmaxn-x)){lmy(1,now.l+1,n,k);d[now.l]-=k;k=0;}\n\t\telse{\n\t\t\tif(lmaxn-x>=d[now.l]){\n\t\t\t\tlmy(1,now.l+1,n,d[now.l]);k-=d[now.l];d[now.l]=0;\n\t\t\t\tif(now.l+1>now.r)continue;\n\t\t\t\tif(now.l+1<=now.r)q.push(segment(now.l+1,now.r,sum[now.r+1]-sum[now.l+1],now.vis));\n\t\t\t}else{\n\t\t\t\tlmy(1,now.l+1,n,lmaxn-x);k-=lmaxn-x;d[now.l]-=lmaxn-x;\n\t\t\t\tif(now.l+1>now.r)continue;\n\t\t\t\tint pos=0;\n\t\t\t\tpos=glf(1,now.l+1,now.r).maxpos;\n\t\t\t\tif(now.l<=pos-1)q.push(segment(now.l,pos-1,sum[pos]-sum[now.l],now.vis));\n\t\t\t\tif(pos<=now.r)q.push(segment(pos,now.r,sum[now.r+1]-sum[pos],pos));\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\tfor(int i=1;i<n;i++)pre[i+1]=pre[i]+d[i];\n\tll ans=-T;\n\tfor(int i=2;i<=n;i++)ans+=cnt[i]*(glf(1,1,i-1).maxn+pre[i]);\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\n$\\color{orange}{FIN}$\n\n",
        "postTime": 1573363186,
        "uid": 138561,
        "name": "lucario",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011O(nlog(n))"
    },
    {
        "content": "AC\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int MAXN=10000;\nint dis[MAXN],down[MAXN],latest[MAXN],now[MAXN],f[MAXN],n,m,k,maxn,key,ans;\n//dis[i]:\u8bb0\u5f55\u516c\u4ea4\u8f66\u4ece\u7b2ci-1\u7ad9~\u7b2ci\u7ad9\u6240\u82b1\u7684\u65f6\u95f4 \n//down[i]:\u8bb0\u5f55\u5728\u7b2ci\u7ad9\u4e0b\u8f66\u7684\u603b\u4eba\u6570 \n//latest[i]:\u8bb0\u5f55\u5728\u6240\u6709\u4ee5\u7b2ci\u7ad9\u4e3a\u521d\u59cb\u7ad9\u7684\u4eba\u4e2d\u6700\u665a\u5230\u8fbe\u7684\u4eba\u6240\u7528\u7684\u65f6\u95f4 \n//now[i]:\u8bb0\u5f55\u516c\u4ea4\u8f66\u5230\u8fbe\u7b2ci\u7ad9\u65f6\u603b\u5171\u7528\u4e86\u591a\u957f\u65f6\u95f4 \n//f[i]:\u8bb0\u5f55\u516c\u4ea4\u8f66\u8d70\u7b2ci-1\u5230\u7b2ci\u7ad9\u8fd9\u6bb5\u8def\u52a0\u4e00\u4e2a\u52a0\u901f\u5668\u53ef\u4ee5\u201c\u9020\u798f\u201d\u7684\u4eba\u6570 \nstruct node\n{\n    int time,s,l;\n}a[MAXN];\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=2;i<=n;i++)\t\n        scanf(\"%d\",&dis[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a[i].time,&a[i].s,&a[i].l);\n        latest[a[i].s]=max(latest[a[i].s],a[i].time);\n        down[a[i].l]++;//\u8fb9\u5b58\u8fb9\u7d2f\u52a0\u5728\u7b2ca[i].l\u7ad9\u4e0b\u8f66\u7684\u603b\u4eba\u6570 \n    }\n    \n   \tfor(int i=2;i<=n;i++)//\u9884\u5904\u7406\u4e0d\u52a0\u52a0\u901f\u5668\u65f6\u516c\u4ea4\u8f66\u5230\u6bcf\u4e00\u4e2a\u7ad9\u6240\u82b1\u7684\u6700\u5c11\u65f6\u95f4 \n        now[i]=max(now[i-1],latest[i-1])+dis[i];\n   \n    while(k>0)//\u8fd9\u624d\u662f\u8d2a\u5fc3\u7684\u5730\u65b9 \n    {\n    \tfor(int i=n;i>=2;i--)//\u5012\u7740\u63a8\uff08\u6b63\u7740\u63a8for\u4e24\u5c42\u663e\u7136\u4f1a\u70b8\uff09\uff08\u53ef\u4ee5\u7406\u89e3\u6b64\u5904\u4e3a\u9012\u63a8\uff09 \n\t\t{\n\t\t\tif(dis[i]==0)\tf[i]=0;//1.\u663e\u7136\u5230i\u70b9\u7684\u8ddd\u79bb\u90fd\u6210\u96f6\u4e86\uff0c\u518d\u52a0\u52a0\u901f\u5668\u4e5f\u6ca1\u7528\u5904\u4e86\n\t\t\t\t\t\t\t\t   //2.\u56e0\u4e3a\u5230\u7b2ci\u7ad9\u7684\u4eba\u90fd\u5df2\u7ecf\u201c\u9020\u798f\u201d\u5b8c\u4e86\uff08dis[i]\u90fd=0\u4e86\uff09\uff0c\u6545\u5c06\u52a0\u901f\u5668\u8bbe\u5728i\u524d\u65f6\u4e0d\u8003\u8651\u9020\u798f\u8fd9\u90e8\u5206\u4eba\uff0c\u4e0d\u9700\u7d2f\u52a0down[i]\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(latest[i]<now[i]) \tf[i]=f[i+1]+down[i];\n\t\t\t\t//\u5982\u679clatest[i]<=now[i]\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u901a\u8fc7\u5728dis[i]\u52a0\u52a0\u901f\u5668\u6765\u4f7f\u5728\u7b2ci\u7ad9\u53ca\u5728\u540e\u9762\u4e0b\u8f66\u7684\u6240\u6709\u4eba\u65e9\u4e0b\u8f661s \n\t\t\t\tif(latest[i]>=now[i]) \tf[i]=down[i];\n\t\t\t\t//\u5982\u679clatest[i]>=now[i]\uff0c\u90a3\u4e48\u5c31\u7b97\u52a0\u4e86\u52a0\u901f\u5668\u6211\u8fd8\u5f97\u7b49\u6765\u5230i\u7ad9\u65f6\u95f4\u4e3alatest[i]\u65f3\u4eba\uff0c\u6545\u5728\u6b64\u5904\u4fee\u6539\u53ea\u80fd\u5f71\u54cd\u5728\u6b64\u7ad9\u4e0b\u8f66\u7684\u4eba\t\t\t\n\t\t\t} \n\t\t} \n\t\t\n\t\tmaxn=0,key=0;\n\t\tfor(int i=1;i<=n;i++)//\u627e\u5728\u54ea\u4e2a\u8fb9\u52a0\u52a0\u901f\u5668\u53ef\u4ee5\u9020\u798f\u6700\u591a\u7684\u4eba \n\t\t{\n\t\t\tif(f[i]>maxn)\n\t\t\t{\n\t\t\t\tkey=i;//\u6807\u8bb0\u51cf\u54ea\u4e00\u6bb5dis \n\t\t\t\tmaxn=f[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(key==0)\tbreak;//\u8fd9\u65f6\u8bf4\u660edis\u90fd\u88ab\u52a0\u4e86\u52a0\u901f\u5668=0\uff0c\u627e\u4e0d\u5230\u53ef\u4ee5\u51cf\u5c11\u65f6\u95f4\u7684\u8fb9 \n\t\tk--;//\u52a0\u901f\u5668\u5c11\u4e00\u4e2a \n\t\tdis[key]--;//\u8d70\u8fd9\u4e00\u6bb5\u8def\u7528\u7684\u65f6\u95f4-1 \n\t\t\n\t\tfor(int i=key;i<=n;i++)//\u7531\u4e8e\u6539\u53d8\u4e86\u7b2ckey-1\u7ad9\u5230key\u7ad9\u7684\u8ddd\u79bb\uff0c\u6545\u4ecekey\u5f80\u540e\u90fd\u9700\u8981\u66f4\u65b0 \n        \tnow[i]=max(now[i-1],latest[i-1])+dis[i];\n    }\n    \n\tfor(int i=1;i<=m;i++)\n        ans+=now[a[i].l]-a[i].time;//\u6839\u636e\u9898\u610f\uff0c\u6bcf\u4e2a\u4eba\u5728\u8def\u9014\u4e0a\u82b1\u8d39\u7684\u65f6\u95f4=\u516c\u8f66\u5230\u8fbe\u8be5\u4eba\u7ec8\u70b9\u7ad9\u7684\u65f6\u523b-\u8be5\u4eba\u5230\u51fa\u53d1\u7ad9\u7684\u65f6\u95f4 \n\t      \n\n\tprintf(\"%d\",ans);\n    \n    return 0;\n}\n```",
        "postTime": 1522496730,
        "uid": 53774,
        "name": "\u5403\u74dc\u7fa4\u4f17syc",
        "ccfLevel": 0,
        "title": "P1315 \u89c2\u5149\u516c\u4ea4"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u5230\u697c\u4e0a\u7684dalao\u4eec\u57fa\u672c\u90fd\u7528\u7684\u6a21\u62df\uff08\u6216\u8005\u66b4\u529b\uff09\uff0c\u4eca\u5929\u6211\u5c31\u5199\u4e00\u4e2a\u201c\u6807\u51c6\u201d\u7684\u8d2a\u5fc3\u53d1\u7ed9\u5927\u5bb6\u3002\uff08\u6211\u8fd9\u6bb5\u4ee3\u7801\u5dee\u70b9\u8d85\u65f6\u00b7\u00b7\u00b7\u4e5f\u5dee\u70b9\u8d85\u5185\u5b58\u00b7\u00b7\u00b7\uff09\n\n\u4e3b\u8981\u601d\u8def\uff1a\u901a\u8fc7\u8d2a\u5fc3\u6c42\u5f97\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u628a\u52a0\u901f\u5668\u7528\u5230\u4e58\u5ba2\u6700\u591a\u7684\u4e24\u4e2a\u7ad9\uff08\u6216\u8005\uff0c\u5982\u679c\u6709\u8bb8\u591a\u6bb5\u8def\u7a0b\u4e58\u5ba2\u6570\u90fd\u662f\u6700\u591a\uff0c\u76f4\u63a5\u4efb\u9009K\u6bb5\u4f7f\u7528\u52a0\u901f\u5668\uff09\n\n\u4ee3\u7801\u8d34\u4e0a\uff0c\u5927\u795e\u52ff\u55b7\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n\tint n,m,k,d[100005],car[100005],g[100005],t[100005],sum[100005],tim[100005],st[100005],ed[100005];\n\tint ans,maxnn,fast;\n\tscanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=n-1;i++)\n\t{\n\t\tscanf(\"%d\",&d[i]);\n\t}\n    for(int i=1;i<=m;i++)\n\t{\n        scanf(\"%d%d%d\",&tim[i],&st[i],&ed[i]);\n        t[st[i]]=max(t[st[i]],tim[i]);\n        sum[ed[i]]++;\n    } \n    for(int i=2;i<=n;i++)\n\t{\n\t\tsum[i]=sum[i]+sum[i-1];\n\t}\n    car[1]=t[1];\n    for(int i=2;i<=n;i++)\n\t{\n\t\tcar[i]=max(car[i-1],t[i-1]);\n\t\tcar[i]=car[i]+d[i-1];\n\t}\n    for(int i=1;i<=m;i++)\n\t{\n\t\tans=ans+car[ed[i]]-tim[i];\n\t}\n    while(k--)\n\t{\n        g[n]=g[n-1]=n;\n\t\tmaxnn=0;\n        for(int i=n-2;i>=1;i--)\n\t\t{\n\t\t\tif(car[i+1]<=t[i+1])\n\t\t\t{\n\t\t\t\tg[i]=i+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg[i]=g[i+1];\n\t\t\t}\n\t\t}\n        for(int i=1;i<n;i++)\n\t\t{\n\t\t\tif(sum[g[i]]-sum[i]>maxnn && d[i]!=0)\n\t\t\t{\n\t\t\t\tmaxnn=sum[g[i]]-sum[i];\n\t\t\t\tfast=i;\n\t\t\t}\n\t\t}\n        ans=ans-maxnn;\n\t\td[fast]--;\n        for(int i=2;i<=n;i++)\n\t\t{\n\t\t\tcar[i]=max(car[i-1],t[i-1]);\n\t\t\tcar[i]=car[i]+d[i-1];\n\t\t}\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```\n\u5982\u679c\u5927\u5bb6\u770b\u5b8c\u6709\u4ec0\u4e48\u610f\u89c1\uff0c\u70b9\u8bc4\u5427\uff01\n\n\u5982\u679c\u5927\u5bb6\u89c9\u5f97\u6211\u7684\u9898\u89e3\u4e0d\u9519\uff0c\u70b9\u8d5e\u5427\uff01",
        "postTime": 1518601958,
        "uid": 61096,
        "name": "\u6838\u5f39\u5934AC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "# \u66b4\u529b\u679a\u4e3e\u4e0e\u526a\u679d\n\n\u8fd9\u4e2a\u9898\u5e76\u6ca1\u6709\u60f3\u5230\u8d39\u7528\u6d41\u505a\u6cd5\uff0c\u9898\u89e3\u91cc\u201c\u5728\u8fd9\u4e2a\u70b9\u7528\u52a0\u901f\u5668\u5f71\u54cd\u7684\u8303\u56f4\u201d\u770b\u7740\u4e5f\u6bd4\u8f83\u61f5\uff0c\u5c31\u66b4\u529b\u52a0\u4f18\u5316A\u4e86\u8fd9\u9898\n\n\u9996\u5148**_\u8d2a\u5fc3_**\u5730\u4f7f\u7528\u52a0\u901f\u5668\uff0c\u6bcf\u6b21\u7ed9\u80fd\u51cf\u5c11\u8017\u65f6\u6700\u591a\u7684\u4e00\u6bb5\u8def\u4f7f\u7528\u3002\u8ba1\u7b97\u8017\u65f6\u7684\u65b9\u6cd5\u662f\u6c42\u51fa\u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u548c\u79bb\u5f00\u7684\u65f6\u95f4\uff0c\u5bf9\u6bcf\u4e2a\u4eba\u6c42**\u5230\u8fbe\u65f6\u95f4-\u51fa\u73b0\u65f6\u95f4**\u6c42\u548c\u5373\u53ef\u3002\u8d2a\u5fc3\u65f6**\u679a\u4e3e\u6bcf\u4e2a\u533a\u95f4**\uff0c\u6c42\u51fa\u4f7f\u7528\u4e00\u4e2a\u52a0\u901f\u5668\u80fd\u51cf\u5c11\u6700\u591a\u65f6\u95f4\u7684\u533a\u95f4\uff0c\u7136\u540e\u5bf9\u5b83\u4f7f\u7528\u4e00\u4e2a\u52a0\u901f\u5668\u3002\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u7528\u5b8c\u4e3a\u6b62\u3002\n\n\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff1ak\u4e2a\u52a0\u901f\u5668\uff0c\u6bcf\u4e2a\u52a0\u901f\u5668\u8981\u679a\u4e3en\u4e2a\u533a\u95f4\uff0c\u8ba1\u7b97\u8017\u65f6\u590d\u6742\u5ea6$O(m)$\uff0c\u603b\u590d\u6742\u5ea6$O(nmk)$T\u98de\u4e86\n\n------------\n\n\u5148\u8003\u8651\u4f18\u5316**\u8ba1\u7b97\u8017\u65f6**\n\n\u8ba1\u7b97\u8017\u65f6\u65f6\u4ee3\u7801\u5927\u6982\u957f\u8fd9\u4e2a\u6837\uff1a\n```cpp\nlong long x=1,ret=0;\nfor(long long i=1;i<=n;i++)\n{\n    arr[i]=leave[i-1]+t[i-1];//arr[i]\u5230\u8fbe\u65f6\u95f4\n    leave[i]=arr[i];//leave[i]\u79bb\u5f00\u65f6\u95f4\n    while(h[x].a<i&&x<=m)\n      x++;\n    while(h[x].a==i&&x<=m)\n      leave[i]=max(leave[i],h[x].t),x++;\n}\nfor(long long i=1;i<=m;i++)\n  ret+=arr[h[i].b]-h[i].t;//h[i].t\u8fd9\u4e2a\u4eba\u51fa\u73b0\u7684\u65f6\u95f4\nreturn ret;\n```\n\u9996\u5148\u53d1\u73b0$leave[i]$\u6bcf\u6b21\u90fd\u662f\u5bf9\u76f8\u540c\u7684\u6570\u53d6max\uff0c\u6240\u4ee5\u628a\u8fd9\u4e9b\u6570\u7684max\u9884\u5904\u7406\u51fa\u6765\uff0c\u5b58\u5728\u53e6\u4e00\u4e2a\u6570\u5b57$lea[i]$\u91cc\uff0c\u4ee3\u7801\u5c31\u53d8\u6210\u4e86\n```cpp\nfor(long long i=1;i<=n;i++)\n  arr[i]=leave[i-1]+t[i-1],leave[i]=max(arr[i],lea[i]);\n```\n\n------------\n\n\n\u4f46\u662f\u73b0\u5728\u4e0b\u9762\u8fd8\u6709\u4e00\u4e2a$O(m)$\u7684\u5faa\u73af\uff0c\u603b\u590d\u6742\u5ea6\u8fd8\u662f$O(m)$\n\n\u518d\u89c2\u5bdf\u4e0b\u9762\u7684\u5faa\u73af\n\n$h[i].t$\u4e5f\u662f\u4e0d\u53d8\u7684\uff0c\u540c\u6837\u9884\u5904\u7406\u51fa\u6765\uff0c\u6bcf\u6b21\u76f4\u63a5\u51cf\u53bb\u5373\u53ef\uff1b$h[i].b$\u4e5f\u4e0d\u53d8\uff0c\u90a3\u5c31\u9884\u5904\u7406\u4e00\u4e2asum\u6570\u7ec4\uff0c\u8bb0\u5f55arr\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u88ab\u52a0\u4e86\u51e0\u6b21\uff0c\u6700\u540e$O(n)$\u679a\u4e3e\u533a\u95f4\uff0c\u7b97$\\sum arr[i]\\times arr[i]$\u5373\u53ef\n\n------------\n\n\u9884\u5904\u7406\u4ee3\u7801\uff08\u5305\u62ec\u4e0a\u9762\u7684lea\uff09\u957f\u8fd9\u6837\n```cpp\nfor(long long i=1;i<=m;i++)\n      d+=h[i].t,sum[h[i].b]++,lea[h[i].a]=max(lea[h[i].a],h[i].t);\n```\n\n\u9884\u5904\u7406\u5b8c\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u628a\u8ba1\u7b97\u8017\u65f6\u4f18\u5316\u6210$O(n)$\u4e86\n```cpp\nlong long ret=0;\n    for(long long i=1;i<=n;i++)\n    \tarr[i]=leave[i-1]+t[i-1],leave[i]=max(arr[i],lea[i]);\n    for(long long i=1;i<=n;i++)\n      ret+=arr[i]*sum[i];\n    return ret-d;\n```\n\n------------\n\n\u73b0\u5728\u590d\u6742\u5ea6\u662f$O(n^2k)$\n\n~~\u597d\u50cf\u8fd8\u662fT\u98de\u554a~~\n\n------------\n\n\u56de\u60f3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8d2a\u5fc3\uff1a\u4f7f\u7528\u52a0\u901f\u5668\u7684\u6548\u679c\u968f\u52a0\u901f\u5668\u7684\u4f7f\u7528\u662f\u5355\u8c03\u4e0d\u589e\u7684\u3002\u53ef\u4ee5\u518d\u7528\u8fd9\u4e2a\u6027\u8d28\u4f18\u5316\u627e\u6700\u4f18\u533a\u95f4\u548c\u4f7f\u7528\u52a0\u901f\u5668\u7684\u8fc7\u7a0b\n\n### \u4f18\u53161\uff1a\n\n\u7531\u4e8e\u52a0\u901f\u5668\u6548\u679c\u4e0d\u589e\uff0c\u6240\u4ee5\u5982\u679c\u7528\u5b8c\u4e00\u4e2a\u52a0\u901f\u5668\u540e\uff0c\u518d\u5728\u540c\u4e00\u4e2a\u533a\u95f4\u4f7f\u7528\u52a0\u901f\u5668\u65f6\u6548\u679c\u6ca1\u6709\u964d\u4f4e\uff0c\u90a3\u8fd9\u4e2a\u533a\u95f4\u4ecd\u662f\u6700\u4f18\u7684\n\n\u600e\u4e48\u64cd\u4f5c\uff1a\u6bcf\u6b21\u627e\u51fa\u6700\u4f18\u533a\u95f4\u540e\uff0c**\u4e8c\u5206**\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u4f7f\u7528\u51e0\u4e2a\u52a0\u901f\u5668**\uff01\uff01\uff01\u6ce8\u610f\u4e8c\u5206\u4e0a\u754c\u662f$min(k,t[x])$\uff0c\u5373** $min($\u5269\u4f59\u52a0\u901f\u5668\u4e2a\u6570\uff0c\u8fd9\u4e2a\u533a\u95f4\u7528\u65f6$)$ **\u4ee5\u514d\u51cf\u6210\u8d1f\u6570\uff01\uff01\uff01**\uff0c\u5982\u679c\u6c42\u51fa\u4e00\u6b21\u4f7f\u7528\u591a\u4e2a\u52a0\u901f\u5668\u65f6\u7684\u51cf\u5c11\u91cf$=$\u7528\u4e00\u4e2a\u7684\u51cf\u5c11\u91cf$\\times$\u4f7f\u7528\u7684\u4e2a\u6570\uff0c\u90a3\u5f53\u524d\u6570\u91cf\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u6b21\u4f7f\u7528\u90fd\u662f\u6700\u4f18\u7684\uff0c\u6309\u8fd9\u4e2a\u4e8c\u5206\u5373\u53ef\n\n\u4ee3\u7801\n```cpp\nlong long L=1,R=min(k,t[p]),mid;\nx=count();//\u8ba1\u7b97\u8fd9\u6b21\u4f7f\u7528\u4e4b\u524d\u7684\u8017\u65f6\uff0ccount()\u4e3a\u8ba1\u7b97\u8017\u65f6\nwhile(L<R)\n{\n\tmid=(L+R+1)>>1;\n\tt[p]-=mid;\n\tif((x-count())==mid*(x-mn))//\u5373\u6bcf\u6b21\u4f7f\u7528\u6548\u679c\u90fd\u662f\u6700\u4f18\u6548\u679c\n\t  L=mid;\n\telse R=mid-1;\n\tt[p]+=mid;\n}\nt[p]-=L;k-=L;\n```\n\n\u52a0\u4e0a\u8fd9\u4e2a\u4f18\u5316\u4e4b\u540e\uff0c\u5f00O2\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u662f\u4e0d\u5f00\u8fd8\u662fT\u621080\n\n~~O2\u6c34\u8fc7\u53bb\u5c31\u53ef\u4ee5\u8dd1\u4e86~~\u7ee7\u7eed\u4f18\u5316\n\n------------\n\n### \u4f18\u53162\uff1a\n\n\u540c\u6837\u662f\u6839\u636e\u8d2a\u5fc3\u7684\u90a3\u4e2a\u6027\u8d28\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u662f\u4f18\u5316\u627e\u6700\u4f18\u533a\u95f4\u7684\u8fc7\u7a0b\n\n\u7b2c\u4e00\u6b21\u6c42\u6700\u4f18\u533a\u95f4\u65f6\uff0c\u628a\u6bcf\u4e2a\u70b9\u7684\u6548\u679c\u5b58\u4e0b\u6765\uff0c\u6c42\u5b8c\u4e4b\u540e\u6309\u6548\u679c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u6548\u679c\u6570\u7ec4\u7684\u7f16\u53f7\u987a\u5e8f\u66f4\u65b0\u6548\u679c**\uff01\uff01\uff01\u6ce8\u610f\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5df2\u7ecf\u88ab\u52a0\u901f\u5230\u7528\u65f60\uff0c\u5c31\u5e94\u8be5\u628a\u8fd9\u4e2a\u533a\u95f4\u7684\u6548\u679c\u8bbe\u4e3a0\uff01\uff01\uff01**\uff0c\u5982\u679c\u7b97\u5b8c\u4e00\u4e2a\u533a\u95f4\u7684\u6548\u679c\u540e\uff0c\u53d1\u73b0\u5b83\u7684\u6548\u679c\u6bd4\uff08\u6309\u6548\u679c\u6570\u7ec4\u4e2d \u70b9\u7684\u987a\u5e8f\uff09\u4e0b\u4e00\u4e2a\u6548\u679c\uff08\u8fd9\u4e2a\u8fd8\u6ca1\u6709\u66f4\u65b0\uff09\u4f18\u6216\u4e8c\u8005\u76f8\u7b49\uff0c\u5c31\u4e0d\u7528\u7ee7\u7eed\u8ba1\u7b97\u4e86\uff0c\u56e0\u4e3a\u6548\u679c\u5355\u8c03\u4e0d\u589e\uff0c\u540e\u9762\u7684\u70b9\u7684\u6548\u679c\u4e0d\u53ef\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u70b9\u7684\u6548\u679c\u3002\u6ce8\u610f\u8dd1\u5b8c\u4e4b\u540e\u8981\u518d\u628a\u6548\u679c\u6570\u7ec4\u6392\u5e8f\u4e00\u6b21\n\n\u52a0\u4e0a\u4e4b\u540e\u6700\u6162\u7684\u70b9\u4e0d\u8d85\u8fc7100ms\uff0c~~\u6bd4\u5176\u4ed6\u9898\u89e3\u6162\u4e86\u597d\u591a~~\uff0c\u5bf9\u4e00\u4e2a\u66b4\u529b\u505a\u6cd5\u6765\u8bf4\u4e0d\u9519\u4e86\n\n------------\n\u5b8c\u6574\u4ee3\u7801\uff08\u867d\u7136\u52a0\u4e86fread\uff0c\u4f46\u662f\u5b9e\u6d4b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0ccin\u90fd\u53ef\u4ee5\uff09\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nstruct node\n{\n    long long t,a,b;\n    bool operator <(const node&x)const\n    {\n        return a<x.a;\n    }\n};\nnode h[10005];\n\nstruct node2\n{\n    long long id,val;\n    bool operator <(const node2&x)const\n    {\n        return val>x.val;\n    }\n};\nnode2 a[1005];\nbool cmp(node2 a,node2 b)\n{\n    return a.id<b.id;\n}\n\nchar Getchar()\n{\n    static const int len=1000000;\n    static char space[len],*p=space,*t=space;\n    if(p==t)\n      t=space+fread(p=space,sizeof(char),len,stdin);\n    return *(p++);\n}\nchar rc;int flag;\nvoid read(long long &x)\n{\n    x=0;rc=Getchar();flag=1;\n    while(rc<'0'||rc>'9')\n      flag=(rc=='-'?-1:1),rc=Getchar();\n    while(rc>='0'&&rc<='9')\n      x=x*10+rc-'0',rc=Getchar();\n    x*=flag;\n}\n\nlong long sum[1005],t[1005],arr[1005],leave[1005],n,m,k,i,j,x,d,lea[1005],de[1005];\n\nlong long count()\n{\n    long long ret=0;\n    for(long long i=1;i<=n;i++)\n    \tarr[i]=leave[i-1]+t[i-1],leave[i]=max(arr[i],lea[i]);\n    for(long long i=1;i<=n;i++)\n      ret+=arr[i]*sum[i];\n    return ret-d;\n}\n\nint main()\n{\n    cin>>n>>m>>k;\n    for(i=1;i<n;i++)\n      read(t[i]),a[i].id=i;\n    for(i=1;i<=m;i++)\n      read(h[i].t),read(h[i].a),read(h[i].b);\n    sort(h+1,h+1+m);\n    for(long long i=1;i<=m;i++)\n      d+=h[i].t,sum[h[i].b]++,lea[h[i].a]=max(lea[h[i].a],h[i].t);\n    int fi=1;\n    while(k)\n    {\n        long long mn=0x7fffffff,p=-1,mx=count();\n        for(j=1;j<n;j++)\n          if(t[a[j].id]>=1)\n          {\n          \t  t[a[j].id]--;\n          \t  x=count();\n          \t  a[j].val=mx-x;\n          \t  if(x<mn)\n          \t    mn=x,p=a[j].id;\n          \t  t[a[j].id]++;\n          \t  if(a[j].val>=a[j+1].val&&!fi)\n          \t    break;\n          }\n          else a[j].val=0;\n        fi=0;\n        sort(a+1,a+n);\n        if(p==-1)\n          break;\n        long long L=1,R=min(k,t[p]),mid;\n        x=count();\n        while(L<R)\n        {\n            mid=(L+R+1)>>1;\n            t[p]-=mid;\n            if((x-count())==mid*(x-mn))\n              L=mid;\n            else R=mid-1;\n            t[p]+=mid;\n        }\n        t[p]-=L;k-=L;\n    }\n    cout<<count();\n    return 0;\n}\n```",
        "postTime": 1541036586,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u8bc1\u660e\u8d2a\u5fc3\u6b63\u786e\u6027~~\uff08\u8003\u573a\u4e0a\u8fd9\u4e0d\u662f\u91cd\u70b9\uff09~~\n\n\u5bf9\u5177\u4f53\u5b9e\u73b0\u4e0d\u591a\u505a\u89e3\u91ca\uff0c\u53ef\u4ee5\u53c2\u8003\u5176\u5b83\u9898\u89e3\n\n\u8d2a\u5fc3\u7b97\u6cd5\u5c31\u662f\u53d6\u51fa\u4f18\u5316\u6700\u591a\u7684\u70b9\u8fdb\u884c\u4f18\u5316\n\n\u8bc1\u660e\uff1a\u4ee4\u6bcf\u4e00\u6b65\u53ea\u7528\u4e00\u4e2a\uff0c\u8fd9\u6837\u65b9\u4fbf\u8bc1\u660e\n\n\u6309\u6bcf\u4e2a\u70b9\u65f6\u95f4\u9650\u5236\u548c\u5230\u8fbe\u65f6\u95f4\u753b\u56fe\uff0c\u5927\u6982\u662f\u8fd9\u6837\n\n![](https://cdn.luogu.com.cn/upload/pic/32186.png)\n\n\u9996\u5148\u5b9a\u4e49\u51e0\u4e2a\u7528\u5230\u7684\u6982\u5ff5\n\n\u65ad\u70b9\uff1a\u5230\u8fbe\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e\u65f6\u95f4\u9650\u5236\u7684\u70b9\uff0c\u5373\u56fe\u4e2d\u84dd\u8272\u70b9\n\n\u6709\u6548\u533a\u95f4\uff1a\u4e24\u4e2a\u65ad\u70b9\u4e4b\u95f4\u533a\u57df\n\n\u5148\u8bc1\u6700\u4f18\u51b3\u7b56\u6bcf\u4e00\u6b65\u90fd\u662f\u4f18\u5316\u65ad\u70b9\u540e\u9762\u7684\u4e00\u5c0f\u6bb5\n\n\u5982\u679c\u67d0\u4e00\u6b65\u4e0d\u9009\u8fd9\u4e00\u6bb5\uff0c\u5219\u9009\u7684\u8fd9\u4e00\u6bb5\u4e4b\u540e\u4e00\u76f4\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u4e4b\u95f4\u7684\u70b9\u90fd\u4f1a\u88ab\u4f18\u5316\n\n\u4f46\u9009\u8be5\u533a\u95f4\u65ad\u70b9\u540e\u9762\u7684\u4e00\u5c0f\u6bb5\u5219\u4f18\u5316\u66f4\u5927\u8303\u56f4\uff0c\u4e14\u91cd\u5408\u90e8\u5206\u6548\u679c\u76f8\u540c\n\n\u4e4b\u540e\u5bf9\u6bcf\u4e00\u6b65\u6548\u679c\u9020\u6210\u5f71\u54cd\u7684\u53ea\u80fd\u662f\u591a\u4f18\u5316\u7684\u8fd9\u4e00\u6bb5\n\n\u800c\u4e14\u4e0d\u4f1a\u5bfc\u81f4\u53d8\u5dee\n\n\u6240\u4ee5\u6700\u4f18\u51b3\u7b56\u6bcf\u4e00\u6b65\u90fd\u662f\u4f18\u5316\u65ad\u70b9\u540e\u9762\u7684\u4e00\u5c0f\u6bb5\n\n\u4e0b\u4e00\u6b65\u8003\u8651\u6bcf\u4e2a\u6709\u6548\u533a\u95f4\n\n\u4f7f\u7528\u540e\u53ef\u80fd\u5bfc\u81f4\u533a\u95f4\u5206\u88c2\n\n\u8fd9\u6837\u53ef\u4ee5\u5f62\u6210\u6811\uff0c\u6ee1\u8db3\u5b69\u5b50\u8282\u70b9\u6743\u503c\uff08\u4f18\u5316\u91cf\uff09\u7684\u548c\u4e0d\u5927\u4e8e\u7236\u8282\u70b9\n\n\u5927\u6982\u662f\u8fd9\u6837\uff08\u4e0e\u4e0a\u56fe\u65e0\u5173\uff09\n\n\uff08\u4e5f\u53ef\u80fd\u662f\u591a\u68f5\u6811\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/32187.png)\n\n\u8fd9\u65f6\u53ea\u8981\u6bcf\u6b65\u53d6\u6700\u5927\u7684\u5373\u53ef\n\n\u53d6\u5230\u7684\u6070\u597d\u65f6\u6700\u5927\u7684n\u4e2a\n\n\u56e0\u4e3a\u6bcf\u4e00\u6b65\u53d6\u6700\u5927\u7684\u70b9\u65f6\uff0c\u4e0d\u9700\u8981\u4fdd\u8bc1\u4efb\u4f55\u6bd4\u5b83\u5c0f\u7684\u70b9\u88ab\u53d6\n\n\u8bc1\u660e\u7b97\u6cd5\u6b63\u786e\u6027\n\n\u5047\u8bbe\u5b58\u5728\u67d0\u4e2a\u6700\u4f18\u51b3\u7b56\u5b58\u5728\u67d0\u4e2a\u70b9\u4e0d\u662f\u6700\u5927\u7684n\u4e2a\n\n\u8bbe\u672a\u53d6\u5230\u7684\u70b9\u4e2d\u6700\u5927\u7684\u662fa\uff0c\u53d6\u5230\u7684\u70b9\u4e2d\u6700\u5c0f\u7684\u662fb\n\n\u5219b\u662f\u5df2\u53d6\u90e8\u5206\u7684\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u5426\u5219\u4e0e\u8be5\u6811\u7684\u6027\u8d28\u77db\u76fe\n\na\u662f\u6839\u6216\u67d0\u4e2a\u5df2\u53d6\u70b9\u7684\u5b69\u5b50\uff0c\u4e14\u8fd9\u4e2a\u70b9\u4e0d\u662fb\n\n\u5f88\u660e\u663e\u5b83\u7684\u540e\u4ee3\u90fd\u672a\u53d6\n\n\u800c\u4e14\u5b83\u7684\u7236\u8282\u70b9\u5df2\u53d6\uff0c\u5426\u5219\u4e0e\u9009\u53d6a\u7684\u8fc7\u7a0b\u77db\u76fe\n\n\u8fd9\u65f6\u53ef\u4ee5\u628ab\u6362\u6210a\uff0c\u6743\u503c\u548c\u53ea\u53ef\u80fd\u589e\u5927\n\n\u6240\u4ee5\u4e0d\u5b58\u5728\u67d0\u4e2a\u6700\u4f18\u51b3\u7b56\u5b58\u5728\u67d0\u4e2a\u70b9\u4e0d\u662f\u6700\u5927\u7684n\u4e2a\n\n\u8bc1\u6bd5\n\n~~\uff08\u8bed\u8a00\u63cf\u8ff0\u4e5f\u8bb8\u96be\u61c2\uff0c\u8bf7\u8c05\u89e3\uff09~~\n\n\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u6216\u5176\u5b83\u9898\u89e3\u5427\n\n\u53e6\u5916\u5b9e\u73b0\u65f6\u4e0d\u9700\u8981\u6bcf\u6b21\u53d6\u4e00\u4e2a\uff0c\u6811\u4e0a\u4e00\u6761\u94fe\u53ef\u4ee5\u76f4\u63a5\u5168\u53d6\uff08\u5fc5\u987b\u6743\u503c\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u5bfc\u81f4\u5206\u88c2\uff09\n\n\u5c0f\u5fc3\u4e00\u4e9b\u7ec6\u8282\n\n~~\u53e6\u5916\u6b22\u8fcehack~~\n\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nstruct range{\n    int l,r,people;\n};\nbool operator<(range a,range b){\n    return a.people<b.people;\n}\npriority_queue<range> heap;\nint d[1024],maxt[1024],delay[1024],amt[1024];\nint t,a,b,n,m,k,ans;\nint main(){\n    cin>>n>>m>>k;\n    for(int i=2;i<=n;i++){\n        cin>>d[i];\n    }\n    for(;m;m--){\n        cin>>t>>a>>b;\n        ans-=t;\n        maxt[a]=max(maxt[a],t);\n        amt[b]++;\n    }\n    for(int i=2;i<=n;i++){\n        maxt[i]=max(maxt[i],maxt[i-1]);\n        ans+=maxt[i]*amt[i];\n    }\n    for(int i=2;i<=n;i++){\n        maxt[i]=max(maxt[i],maxt[i-1]);\n    } \n    maxt[n+1]=0x7fffffff; \n    amt[n+1]=0;\n    ;\n    for(int i=2,now=maxt[1];i<=n;i++){\n        now+=d[i];\n        delay[i]=now-maxt[i];\n        if(now<maxt[i]){\n            now=maxt[i];\n        }\n            \n        \n    }\n    range now;\n    now.l=1;now.r=n+1;\n    now.people=0;\n    for(int i=2;i<=n;i++){\n        now.people+=amt[i];\n    }\n    heap.push(now);\n    while(k&& !heap.empty()){\n        \n        now=heap.top();\n        heap.pop();\n        if(now.l==now.r) continue;\n        int mind=0x7fffffff,mindid=0;\n        for(int i=now.l;i<now.r;i++){\n            if(delay[i]<mind){\n                mind=delay[i];\n                mindid=i;\n            }\n        }\n        \n        mind=max(min(k,mind),0);\n        for(int i=now.l;i<=now.r;i++){\n            delay[i]-=mind;\n        }\n        k-=mind;\n        range a;\n        a.l=now.l;\n        a.r=mindid;\n        a.people=0;\n        for(int i=a.l;i<=a.r;i++){\n            a.people+=amt[i];\n        }\n        heap.push(a);\n        a.l=mindid+1;\n        a.r=now.r;\n        a.people=0;\n        for(int i=a.l;i<=a.r;i++){\n            a.people+=amt[i];\n        }\n        heap.push(a);\n    }\n    for(int i=2;i<=n;i++){\n        ans+=amt[i]*delay[i];\n    }\n    cout<<ans;\n}\n```\n\n\u590d\u6742\u5ea6\u662fO(n^2)\n\n~~\u8fd9\u9053\u9898\u6709\u4e00\u79cd2b\u5199\u6cd5\uff1a\u5e73\u8861\u6811\u5b9e\u73b0\u533a\u95f4\u51cf\u64cd\u4f5c\u548c\u5806~~\n\n~~\u77ac\u95f4O(n log n)~~",
        "postTime": 1536375278,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "- \u8d2a\u5fc3\u7684\u9898\u7279\u522b\u8981\u6c42\u601d\u7ef4\u7684\u654f\u6377\u5ea6\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5f00\u52a8\u8111\u7b4b\u554a\uff01\n\n# P1315 \u89c2\u5149\u516c\u4ea4\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1315)\n\n\u8fd9\u4e2a\u9898\u6ca1\u6709\u4ec0\u4e48\u96be\u7684\u7b97\u6cd5\uff0c\u5176\u96be\u70b9\u5c31\u5728\u4e8e\u628a\u95ee\u9898\u60f3\u660e\u767d\uff0c\u7528 \u8d2a\u5fc3+\u6a21\u62df \u628a\u5b83\u89e3\u51b3\uff01\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u6765\u5206\u6790\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n\u9898\u76ee\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\uff1a\u516c\u4ea4\u8f66\u6bcf\u5230\u8fbe\u4e00\u4e2a\u7ad9\u70b9\uff0c\u5982\u679c\u8981\u5750\u8f66\u7684\u4e58\u5ba2\u5df2\u7ecf\u5728\u7ad9\u70b9\u7b49\u5019\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u505c\u7559\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u8d70\uff1b\u5982\u679c\u4e58\u5ba2\u8fd8\u6ca1\u5230\uff0c\u9700\u8981\u7b49\u5230\u4e58\u5ba2\u6765\u5230\u7ad9\u70b9\u624d\u53ef\u4ee5\u5f00\u8d70\u3002\u73b0\u5728\u53ef\u4ee5\u7f29\u77ed\u516c\u4ea4\u8f66\u5728\u67d0\u4e24\u4e2a\u7ad9\u70b9\u95f4\u7684\u884c\u9a76\u65f6\u95f4\uff0c\u8981\u6c42\u7f29\u77ed\u540e\u4f7f\u4e58\u5ba2\u65c5\u884c\u65f6\u95f4\u603b\u548c\u6700\u5c0f\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u8d2a\u5fc3\uff1a\u6bcf\u6b21\u52a0\u901f\u90fd\u4f7f\u5c3d\u53ef\u80fd\u591a\u7684\u7684\u4e58\u5ba2\u7684\u65c5\u884c\u65f6\u95f4\u7f29\u77ed\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u6bcf\u6b21\u679a\u4e3e\u52a0\u901f\u7684\u533a\u95f4\uff0c\u6700\u540e\u53d6\u60e0\u53ca\u4e58\u5ba2\u6700\u591a\u7684\u6765\u52a0\u901f\u3002\n\n\u4e0b\u9762\u8fdb\u884c\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a\uff08\u4f1a\u6709\u8be6\u7ec6\u7684\u6ce8\u91ca\u54e6\uff09\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#define int long long\n#define maxn 1005\n#define maxm 10005 \nusing namespace std;\nstruct Node{\n\tint arrive, leave, people;\n}sta[maxn];//\u8868\u793a\u6bcf\u4e2a\u7ad9\u70b9\u7684\u76f8\u5173\u4fe1\u606f\uff1aarrive\u8868\u793a\u516c\u4ea4\u8f66\u5230\u8fbe\u8be5\u7ad9\u70b9\u7684\u65f6\u95f4\uff0cleave\u8868\u793a\u79bb\u5f00\u7ad9\u70b9\u7684\u65f6\u95f4\uff0cpeople\u8868\u793a\u5728\u6b64\u7ad9\u70b9\u4e0b\u8f66\u7684\u4eba\u6570\nstruct Infr{\n\tint st, ed;\n}p[maxm];//\u8868\u793a\u6bcf\u4e2a\u4e58\u5ba2\u7684\u76f8\u5173\u4fe1\u606f\uff0cst\u8868\u793a\u4e58\u5ba2\u5230\u8fbe\u7ad9\u70b9\u7684\u65f6\u95f4\uff0ced\u8868\u793a\u4e58\u5ba2\u7684\u76ee\u7684\u5730\nint n, m, k;\nint d[maxn];\nsigned main(){\n\tcin >> n >> m >> k;\n\tfor (int i = 1; i < n; i++) {\n\t\tcin >> d[i];\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tint a;//\u51fa\u53d1\u5730\n\t\tcin >> p[i].st >> a >> p[i].ed;\n\t\tsta[a].leave = max(sta[a].leave, p[i].st); //\u5982\u679c\u4eba\u5148\u5230\uff0c\u8f66\u4e0d\u7528\u7b49\uff0c\u5982\u679c\u8f66\u5148\u5230\uff0c\u8f66\u8981\u7b49\u4eba\u5230\u8f66\u7ad9\u624d\u80fd\u5f00\u8d70\n\t\tsta[p[i].ed].people++;//\u8bb0\u5f55\u4e0b\u8f66\u4eba\u6570\n\t}\n\tint time = 0;//\u66f4\u65b0sta[i].arrive\uff0ctime\u8bb0\u5f55\u603b\u65f6\u95f4\n\tfor (int i = 1; i <= n; i++) {\n\t\tsta[i].arrive = time;\n\t\ttime = max(time, sta[i].leave); //\u4eba\u7b49\u8f66/\u8f66\u7b49\u4eba\n\t\ttime += d[i]; //\u884c\u9a76\u65f6\u95f4\n\t}\n\twhile (k--) {\n\t\tint t = 0, maxx = 0, pos;\n\t\tfor (int i = 1; i < n; i++) { //\u5f00\u59cb\u8d2a\u5fc3\uff01\u679a\u4e3e\u52a0\u901f\u533a\u95f4\uff01\n\t\t\tif (d[i] <= 0) continue; //\u8fd9\u6bb5\u884c\u9a76\u65f6\u95f4\u4e0d\u80fd\u518d\u7f29\u77ed\u4e86\n\t\t\tt = 0; //\u7edf\u8ba1\u80fd\u60e0\u53ca\u5230\u7684\u4e58\u5ba2\u4eba\u6570\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tt += sta[j].people;\n\t\t\t\tif (sta[j].arrive <= sta[j].leave) break; //\u5df2\u7ecf\u51fa\u73b0\u4e86\u8f66\u7b49\u4eba\u7684\u60c5\u51b5\uff0c\u7f29\u77ed\u7684\u65f6\u95f4\u7684\u5f71\u54cd\u80fd\u529b\u5230\u6b64\u4e3a\u6b62\u4e86qwq\n\t\t\t}\n\t\t\tif (t > maxx) {//\u66f4\u65b0\uff0c\u8bb0\u5f55\u6700\u5927\u503c\n\t\t\t\tmaxx = t;\n\t\t\t\tpos = i;//\u8bb0\u5f55\u4f4d\u7f6e\n\t\t\t}\n\t\t}\n\t\td[pos]--;//\u884c\u9a76\u65f6\u95f4\u7f29\u77ed\n\t\tfor (int i = pos + 1; i <= n; i++) {\n\t\t\tsta[i].arrive--;//\u968f\u4e4b\uff0c\u516c\u4ea4\u8f66\u5230\u7ad9\u65f6\u95f4\u4e5f\u4f1a\u51cf\u5c11\n\t\t\tif (sta[i].arrive < sta[i].leave) break;//\u8f66\u7b49\u4eba\u4e86\uff0c\u548c\u4e0a\u8fb9\u4e00\u6837\n\t\t}\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= m; i++) { //\u7edf\u8ba1\u4e58\u5ba2\u7684\u65c5\u884c\u603b\u65f6\u95f4\n\t\tans += sta[p[i].ed].arrive - p[i].st;\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```\n\n\u597d\u5566\uff0c\u672c\u7247\u9898\u89e3\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u5566\uff01\n\n",
        "postTime": 1606751972,
        "uid": 160121,
        "name": "\u706b\u7bad\u5347\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\n## **\u9898\u9762\uff1a**\n\n\u6709n\u4e2a\u666f\u70b9\uff0c\u76f8\u90bb\u666f\u70b9\u9700\u8981\u82b1\u8d39$D_i$\u65f6\u95f4\uff0c\u4e00\u8f86\u5df4\u58eb$t=0$\u65f6\u505c\u5728\u4e00\u53f7\u4f4d\u7f6e\uff0c\u6709m\u4e2a\u4e58\u5ba2\u5728$t_i$\u65f6\u5019\u5230\u8fbe$a_i$\u666f\u70b9\u5e76\u524d\u5f80$b_i$\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u5019\u7f29\u77ed1\u79d2\uff0c\u53ef\u7528k\u6b21\u3002\u95ee\u4e58\u5ba2\u603b\u7b49\u5f85\u65f6\u95f4\uff1f\n\n## **\u9898\u89e3\uff1a**\n\n\u4e00\u9053\u8d2a\u5fc3\u9898\u6210\u529f\u88ab\u73a9\u6210\u4e86\u8d39\u7528\u6d41\uff0c\u771f\u7684\u96be\u4ee5\u7f6e\u4fe1\u3002\u3002\u611f\u89c9\u6211\u6240\u7f3a\u4e4f\u7684\u6b63\u662f\u5927\u4f6c\u7684\u8fd9\u79cd\u5f00\u62d3\u7684\u601d\u7ef4\uff0c\u53ea\u77e5\u9053\u4e00\u6627\u7684\u6284\u9898\u89e3\u662f\u6ca1\u6709\u597d\u4e0b\u573a\u7684\u3002\u3002\n\n\u56de\u5f52\u6b63\u9898\uff0c\u7531\u4e8e\u535a\u5ba2$TOP1$\u7684\u5927\u4f6c\u4ec5\u53d9\u8ff0\u4e86\u5982\u4f55\u5efa\u6a21\u800c\u6ca1\u63d0\u4ed6\u7684\u601d\u7ef4\u8fc7\u7a0b\u3002**\u8fd9\u7bc7\u9898\u89e3\u7684\u76ee\u7684\u5c31\u662f\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u5730\u7406\u89e3\u672c\u9898\u7684\u5efa\u6a21\u3002**\n\u5e0c\u671b\u5927\u5bb6\u770b\u5b8c\u9898\u89e3\u540e\u4f1a\u6709\u4e00\u79cd~~\u60f6\u7136~~\u604d\u7136\u5927\u609f\u4e4b\u611f\u3002\n\n---\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\u4e0d\u7528\u4efb\u4f55\u52a0\u901f\u5668\u5f97\u5230\u7684\u6700\u7ec8\u65f6\u95f4\u4e3a\u591a\u5c11\uff0c\u6613\u77e5\u8fd9\u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u4e14\u53ef\u7531\u4e00\u4e0b\u9012\u63a8\u5173\u7cfb\u5f97\u5230\uff1a\n\n$$T[i]=\\max(T[i-1],L[i-1])+d[i]$$\n\n$T[i]$\u5373\u4e3a\u6240\u5f97\uff0c\u5176\u4e2d$L[i]$\u4e3a\u5728\u7b2ci\u666f\u70b9\u6700\u665a\u7684\u4e0a\u8f66\u65f6\u95f4\uff0c\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\u3002\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\uff1a\u7ed9\u4f60k\u4e2a\u52a0\u901f\u5668\uff0c\u4f7f\u603b\u7b49\u5f85\u65f6\u95f4\u6700\u5927\u53ef\u4ee5\u7f29\u77ed\u591a\u5c11\uff1f\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5efa\u6a21\uff0c\u5bf9\u4e8e`\u52a0\u901f\u5668\u7684\u4e2a\u6570`\u8fd9\u4e00\u53d8\u91cf\u4f7f\u7528**\u8d39\u7528\u6d41**\u6c42\u89e3\u3002\n\u5176\u5b9e\uff0c\u4e0e\u5176\u8bf4\u662f\u8d39\u7528\uff0c\u6211\u66f4\u8ba4\u4e3a\u8fd9\u91cc\u5e94\u8be5\u53eb\u4f5c**\u8d21\u732e**\uff0c\u6211\u4eec\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5e94\u8be5\u56f4\u7ed5\u5f53\u524d\u6d41\u91cf\u7684\u52a0\u901f\u5668\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u591a\u5927\u7684\u8d21\u732e\u6765\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u5148\u5b9a\u4e49\u8d85\u6e90$S^{*},S$\uff0c\u8d85\u6c47$T$\u3002\n \n1. \u4e3a\u4e86\u9650\u5236\u6761\u4ef6`\u4ec5\u7531k\u4e2a\u52a0\u901f\u5668`\uff0c\u6211\u4eec\u5c06$S^{*}$\u8fde\u8fb9\u81f3$S$\uff0c\u5bb9\u91cf$k$\uff0c\u65e0\u8d39\u7528\n\n2. \u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7b2ci\u666f\u70b9\uff0c$L[i]$\u90fd\u662f\u4e00\u4e2a\u65e0\u6cd5\u52a0\u901f\u7684\u65f6\u95f4\u6bb5\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u52a0\u901f\u5668\u771f\u6b63\u6709\u8d21\u732e\u7684\u4ec5\u6709$L[i]-T[i]$\u8fd9\u4e00\u6bb5\u65f6\u95f4\u3002\u4e3a\u4e86\u9650\u5236\u8fd9\u4e00\u6761\u4ef6\uff0c\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u666f\u70b9\u8fdb\u884c**\u62c6\u70b9\u64cd\u4f5c**\uff0c\u5206\u4e3a$i,i+n$\u4e24\u4e2a\u70b9\uff0c\u4e2d\u95f4\u7528\u5bb9\u91cf\u4e3a$max(L[i]-T[i],0)$\u8fdb\u884c\u9650\u5236\uff0c\u65e0\u8d39\u7528\u3002\n\n\u7279\u6b8a\u5730\uff0c\u82e5\u5bb9\u91cf\u4e3a0\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7531\u4e8e\u4e3a\u4e86\u7b49\u5f85\u65b0\u7684\u4e58\u5ba2\u4e0a\u8f66\uff0c\u4e4b\u524d\u6240\u7528\u7684\u52a0\u901f\u5668\u4e5f\u62a5\u5e9f\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e9b\u52a0\u901f\u5668\u4e5f\u5931\u53bb\u4e86\u5bf9\u4e4b\u540e\u518d\u4ea7\u751f\u8d21\u732e\u7684\u673a\u4f1a\u3002\n\n3. \u5bf9\u4e8e\u4e4b\u524d\u62c6\u6210\u7684\u4e24\u70b9\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u6210\u201c\u5230\u8fbe\u666f\u70b9i\u201d\u4ee5\u53ca\u201c\u79bb\u5f00\u666f\u70b9i\u201d\u4e24\u4e2a\u4e8b\u4ef6\u53d1\u751f\u70b9\u3002\u82e5\u662f\u5982\u6b64\uff0c\u5bf9\u4e8e\u52a0\u901f\u5668\u4f7f\u7528\u90e8\u5206\u5f88\u663e\u7136\u5e94\u8be5\u7531$S$\u8fde\u5230$i+n$\u70b9\uff0c\u5bb9\u91cf\u5373\u4e3a$d[i]$\uff1b\u5bf9\u4e8e$i$\uff0c\u5e94\u6709\u8fde\u81f3$T$\u7684\u8fb9\uff0c\u5bb9\u91cf$inf$\uff0c\u65e0\u8d39\u7528\uff0c\u8868\u793a`\u5c06 \u4e0d\u518d\u6709\u8d21\u732e\u7684\u52a0\u901f\u5668 \u6254\u6389`\u8fd9\u4e48\u4e00\u4e2a\u4e8b\u4ef6\u3002\n\n4. \u6700\u540e\u4e5f\u662f\u6700\u91cd\u8981\u7684\uff0c\u5bf9\u4e8e`\u79bb\u5f00\u666f\u70b9i`\u4ee5\u53ca`\u5230\u8fbei+1`l\u4e24\u70b9\u4e5f\u5e94\u8be5\u8fde\u8fb9\uff0c\u5bb9\u91cf$inf$\u8868\u793a\u53ef\u4ee5\u6709\u82e5\u5e72\u4e2a\u52a0\u901f\u5668\u5bf9\u6b64\u8fc7\u7a0b\u4ecd\u6709\u8d21\u732e\uff08\u56e0\u4e3a\u52a0\u901f\u5668\u5c06\u4f1a\u76f4\u63a5\u8d21\u732e\u5230\u4e58\u5ba2\uff0c\u53ea\u8981\u4e58\u5ba2\u4e0d\u4e0b\u8f66\uff0c\u5c31\u8fd8\u4f1a\u5b58\u5728\u8d21\u732e\uff09\uff0c\u8d39\u7528\u5373\u4e3a$-dw[i]$\uff0c\u8868\u793a\u5728\u7b2ci\u666f\u70b9\u4e0b\u8f66\u7684\u4e58\u5ba2\uff0c\u6b64\u65f6\u7684\u8d21\u732e\u5373\u4e3a**\u4f5c\u7528\u5728\u8fd9\u51e0\u4f4d\u4e58\u5ba2\u8eab\u4e0a\u7684\u603b\u7f29\u77ed\u65f6\u95f4**\uff08\u7531\u4e8e\u4e58\u5ba2\u603b\u4f1a\u4e0b\u8f66\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u8d21\u732e\u90fd\u4f1a\u88ab\u8ba1\u7b97\u5230\uff09\uff0c\u800c\u8fd9\u8d21\u732e\u4e3b\u8981\u6765\u6e90\u4e8e\u65b0\u4f7f\u7528\u7684\u52a0\u901f\u5668(\u7b2c\u4e09\u64cd\u4f5c)\u4ee5\u53ca\u4e4b\u524d\u4ecd\u4ea7\u751f\u8d21\u732e\u7684\u52a0\u901f\u5668\uff08\u7b2c\u4e8c\u64cd\u4f5c\uff09\u3002\n\n\u7136\u540e\u5c31\u6ca1\u6709\u5566\uff0c\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801:\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\n#define inf 2147483647\nusing namespace std;\n\nconst int ax=30010,s0=20001,S=20002,T=20003;\nstruct ed{\n\tint u,nex,w,f;\n}e[4*ax];\nint n,m,k,dis[ax],t[ax],a[ax],b[ax];\nint tx[ax],mx[ax],dw[ax];\nint st=-1,ans,fir[ax],c[ax],d[ax],val; bool v[ax];\nqueue<int> q;\n\nvoid add(int x,int y,int w,int f)\n{\n\te[++st].u=y; e[st].nex=fir[x]; e[fir[x]=st].w=w; e[st].f=f;\n\te[++st].u=x; e[st].nex=fir[y]; e[fir[y]=st].w=0; e[st].f=-f;\n}\n\nbool spfa()\n{\n\tmemset(d,0x3f,sizeof(d)); memset(v,0,sizeof(v)); memcpy(c,fir,sizeof(fir));\n\tq.push(s0); v[s0]=1; d[s0]=0;\n\twhile (!q.empty())\n\t{\n\t\tint k=q.front(); q.pop(); v[k]=0;\n\t\tfor (int i=fir[k];i!=-1;i=e[i].nex)\n\t\t{\n\t\t\tint u=e[i].u,w=e[i].f;\n\t\t\tif (e[i].w&&d[u]>d[k]+w)\n\t\t\t{\n\t\t\t\td[u]=d[k]+w; if (!v[u]) v[u]=1,q.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn (d[T]<200000);\n}\n\nint dfs(int p,int now)\n{\n\tif (p==T) {\n\t\tv[T]=1; ans+=now; return now;\n\t}\n\tint mw=0,used=0; v[p]=1;\n\tfor (int i=c[p];i!=-1;i=e[i].nex)\n\t{\n\t\tc[p]=i; int u=e[i].u,w=e[i].f;\n\t\tif ((!v[u]||u==T)&&e[i].w&&d[u]==d[p]+w)\n\t\t{\n\t\t\tif (mw=dfs(u,min(e[i].w,now-used))){\n\t\t\t\tval+=w*mw; e[i].w-=mw; e[i^1].w+=mw;\n\t\t\t\tused+=mw; if (now==used) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\n\nvoid dinic()\n{\n\twhile (spfa())\n\t{ \n\t\tv[T]=1; while (v[T]){\n\t\t\tmemset(v,0,sizeof(v)); dfs(s0,inf/2);\n\t\t}\n\t\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m>>k; int ans0=0; memset(fir,-1,sizeof(fir));\n\tfor (int i=1;i<=n-1;i++) cin>>dis[i];\n\tfor (int i=1;i<=m;i++) {\n\t\tcin>>t[i]>>a[i]>>b[i];\n\t\tmx[a[i]]=max(mx[a[i]],t[i]);\n\t\tdw[b[i]]++;\n\t} tx[1]=0;\n\tfor (int i=2;i<=n;i++) \n\t\ttx[i]=max(tx[i-1],mx[i-1])+dis[i-1];\n\tfor (int i=1;i<=m;i++) ans0+=tx[b[i]]-t[i];\n//readin~~~~~\n\n\tadd(s0,S,k,0);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tif (i>1) add(i,i+n,max(tx[i]-mx[i],0),0),add(i,T,inf/2,0);\n//\t\twhen step.i , only (t-mx) can be valued\n\t\tif (i<n) add(S,i+n,dis[i],0),add(i+n,i+1,inf/2,-dw[i+1]);\n//\t\td[i] speed_ups can be used\n\t\t\n//\t\tif flow is limited , it turns to T\n\t} \n\tdinic(); \n\tcout<<ans0+val<<endl;\n}\n```",
        "postTime": 1569748614,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "### \u89c2\u5149\u516c\u4ea4\n#### Solution\n\u3000\u3000\u8fd9\u4e2a\u9898\u770b\u8d77\u6765\u53ef\u4ee5\u7528dp\u505a, \u4f46\u662f\u80fd\u4e0d\u80fd\u505a\u5c31\u662f\u53e6\u4e00\u56de\u4e8b\u4e86, \u4f46\u662f\u73b0\u5728\u77e5\u9053\u5b83\u53ef\u4ee5\u7528\u8d2a\u5fc3\u505a.\u5b83\u662f\u600e\u4e48\u505a\u7684\u5462?\u5b9e\u9645\u4e0a\u975e\u5e38\u597d\u8003\u8651.\n\n\u3000\u3000\u9996\u5148, \u6bcf\u4f7f\u7528\u4e00\u6b21\u6c2e\u6c14\u52a0\u901f\u65f6, \u76ee\u524d\u5728\u8f66\u4e0a\u7684\u6709\u4e9b\u4eba\u65c5\u884c\u65f6\u95f4\u4f1a\u53d8\u77ed, \u6709\u4e9b\u4eba\u4f1a\u4e0d\u53d8, \u56e0\u4e3a\u4e58\u5ba2\u4e0a\u8f66\u7684\u65f6\u95f4\u662f\u4e0d\u4f1a\u6539\u53d8\u7684, \u6240\u4ee5\u53ef\u80fd\u4f1a\u5728\u540e\u9762\u7684\u67d0\u4e00\u7ad9\u6574\u8f66\u4eba\u90fd\u9700\u8981\u7b49\u4e00\u4e2a\u4e58\u5ba2\u4e0a\u8f66[**\u5224\u65ad\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u4ece\u4e0a\u4e00\u4e2a\u70b9\u5230\u8fbe\u5b83\u7684\u65f6\u95f4, \u548c\u6700\u665a\u7684\u4e58\u5ba2\u5230\u8fbe\u5b83\u7684\u65f6\u95f4, \u901a\u8fc7\u9884\u5904\u7406\u5b8c\u6210\u8fd9\u4e9b\u64cd\u4f5c**], \u5728\u8fd9\u4e4b\u524d\u4e0b\u8f66\u7684\u4eba\u65c5\u884c\u65f6\u95f4\u4f1a\u53d8\u77ed.\u56e0\u6b64\u5b9e\u9645\u4e0a\u8fd9\u6b21**\u6c2e\u6c14\u52a0\u901f\u53ea\u5bf9\u4e0d\u4f1a\u53d7\u5230\u7b49\u4eba\u4e0a\u8f66\u5f71\u54cd\u7684\u4eba\u6709\u6548**, \u4e5f\u5c31\u662f\u5728\u5b83\u4eec**\u4e0a\u8f66\u4e4b\u540e\u76f4\u5230\u4e0b\u8f66\u90fd\u4e0d\u4f1a\u5728\u67d0\u4e2a\u7ad9\u7b49\u522b\u4eba\u4e0a\u8f66\u7684\u4eba\u662f\u6c2e\u6c14\u52a0\u901f\u7684\u53d7\u76ca\u8005**.\n\n\u3000\u3000\u56e0\u6b64\u60f3\u8981\u5feb\u901f\u5904\u7406\u8fd9\u4e9b\u95ee\u9898, \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ad9\u6700\u8fd1\u7684\u9700\u8981\u7b49\u4eba\u7684\u7ad9,\u4e00\u4e2a\u7ad9\u88ab\u5230\u8fbe\u7684\u65f6\u95f4\u548c\u5728\u8fd9\u4e2a\u7ad9\u63a5\u5b8c\u6240\u6709\u4e58\u5ba2\u7684\u65f6\u95f4, \u56e0\u4e3a\u4e00\u6b21\u52a0\u901f\u7684\u53d7\u76ca\u8005\u662f\u5728\u52a0\u901f\u540e\u548c\u5230\u8fbe\u9700\u8981\u7b49\u4eba\u7684\u7ad9\u4e4b\u95f4\u4e0b\u8f66\u7684\u4eba\u6570, \u90a3\u4e48\u8fd8\u9700\u8981\u901a\u8fc7**\u524d\u7f00\u548c**\u5feb\u901f\u6c42\u51fa**\u5728\u67d0\u6bb5\u65f6\u95f4\u4e0b\u8f66\u7684\u4eba\u6570**(\u5176\u5b9e\u5c31\u662f**\u5728\u7b49\u4eba\u7ad9\u4e0b\u8f66\u53ca\u5176\u4e4b\u524d\u4e0b\u8f66\u7684\u4eba\u6570\u51cf\u53bb\u52a0\u901f\u4e4b\u524d\u4e0b\u8f66\u7684\u4eba\u6570**).\u7136\u540e\u5728\u6bcf\u6b21\u52a0\u901f\u4e4b\u540e, \u4e24\u4e2a\u7ad9\u4e4b\u95f4\u7684\u884c\u9a76\u65f6\u95f4\u88ab\u6539\u53d8\u4e86, \u90a3\u4e48\u5176\u5b83\u7ad9\u88ab\u5230\u8fbe(\u5e76\u4e14\u63a5\u5230\u6240\u6709\u4e58\u5ba2)\u7684\u65f6\u95f4\u4e5f\u53ef\u80fd\u88ab\u6539\u53d8\u4e86, \u6240\u4ee5\u9700\u8981\u91cd\u65b0**\u66f4\u65b0\u4e00\u4e0b\u4e00\u4e2a\u7ad9\u88ab\u5230\u8fbe\u7684\u65f6\u95f4\u548c\u63a5\u5b8c\u4eba\u7684\u65f6\u95f4**.\n\n\u3000\u3000\u4e0d\u8fc7\u5e76\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u6837\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u6b63\u786e\u7684?\n#### Code\n```cpp\n#include<algorithm>\n#include<cstdio>\n#define N 10005\nusing std::max;\n \nint n,m,k,ans;\nint t[N],tm[N],l[N],r[N];\nint ww[N],ws[N],ti[N],g[N];\n \nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<n;i++)\n        scanf(\"%d\",&t[i]);\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&tm[i],&l[i],&r[i]);\n    for(int i=1;i<=m;i++)\n        ww[l[i]]=max(ww[l[i]],tm[i]),++ws[r[i]];\n    for(int i=1;i<=n;i++)\n        ws[i]=ws[i-1]+ws[i];\n    for(int i=2;i<=n;i++)\n        ti[i]=max(ww[i-1],ti[i-1])+t[i-1];\n    for(int i=1;i<=m;i++)\n        ans+=ti[r[i]]-tm[i];\n    if(!k){printf(\"%d\\n\",ans);return 0;}\n\twhile(k--){\n\t\tg[n]=n;g[n-1]=n;\n\t\tfor(int i=n-2;i>=1;i--)\n\t        if(ti[i+1]<=ww[i+1])g[i]=i+1;\n\t\t\telse g[i]=g[i+1];\n\t    int maxn=0,maxw=0;\n\t\tfor(int i=1;i<n;i++)\n\t\t\tif(ws[g[i]]-ws[i]>maxn&&t[i]>0)\n\t        maxn=ws[g[i]]-ws[i],maxw=i;\n\t\tt[maxw]--;ans-=maxn;\n\t\tfor(int i=1;i<=n;i++)\n\t        ti[i]=max(ww[i-1],ti[i-1])+t[i-1];\n\t}\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1521970881,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u6765\u6765\u6765\uff0c\u90fd\u4e0a\u8f66\u5427\n\n\u8fd9\u662f\u4e00\u9053\u5f00\u8f66\u9898\uff0c\u6ca1\u9519\uff0c\u5c31\u662f\u6a21\u62df\uff0c\u8d2a\u5fc3\uff0c\u7136\u540e\u66b4\u529b\u51fa\u7b54\u6848\u3002\u4f46\u662f\u600e\u4e48\u8d2a\u5fc3\u5462\uff1f\n\n\u5f88\u663e\u7136\u8d2a\u5fc3\u662f\u8981\u8ba9\u6bcf\u4e00\u4e2a\u52a0\u901f\u5668\u90fd\u66f4\u597d\u5730\u5229\u7528\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u8bb2\u8bb2\u6c2e\u6c14\u52a0\u901f\u7684\u539f\u7406\u3002\u3002\u3002\u54b3\u54b3\uff0c\u626f\u8fdc\u4e86\uff08[\u611f\u5174\u8da3\u7684\u6233\u8fd9\u91cc](https://baike.baidu.com/item/%E6%B0%AE%E6%B0%94%E5%8A%A0%E9%80%9F%E7%B3%BB%E7%BB%9F/904247?fr=aladdin)\uff09\n\n\u5982\u4f55\u8ba9\u6c2e\u6c14\u52a0\u901f\u5668\u5b8c\u7f8e\u5229\u7528\u5462\uff1f\n\n\u6211\u4e00\u5f00\u59cb\u53ea\u8003\u8651\u4e86\u6c2e\u6c14\u52a0\u901f\u5668\u5bf9\u5f53\u524d\u8def\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u6bcf\u6b21\u5c31\u627e\u5230\u4eba\u6570\u6700\u591a\u7684\u8def\u6765\u52a0\u901f\uff0c\u4f46\u662f\u9519\u4e86\u3002\n\n\u6240\u4ee5\u5230\u5e95\u600e\u4e48\u6700\u597d\u5229\u7528\u5462\uff1f\n\n\u597d\uff0c\u4e0d\u626f\u4e86\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6c2e\u6c14\u52a0\u901f\u7684\u5f71\u54cd\n1. \u5f53\u524d\u8def\u52a0\u901f\u540e\uff0c\u5728\u4e0b\u4e00\u7ad9\u4e0b\u8f66\u7684\u4eba\u90fd\u53ef\u4ee5\u51cf\u5c111\u7684\u65f6\u95f4\n\n1. \u5f53\u524d\u8def\u5f00\u5b8c\u540e\uff0c\u5982\u679c\u5230\u8fbe\u7ec8\u70b9\u65f6\u4e0d\u9700\u8981\u7b49\u4eba\uff08\u5373\u662f\u8fd9\u4e00\u7ad9\u7684\u4eba\u7b49\u8f66\uff09\u90a3\u4e48\u5c31\u53ef\u4ee5\u7acb\u5373\u51fa\u53d1\uff0c\u6240\u4ee5\u4e0b\u4e00\u6bb5\u8def\u7684\u65f6\u95f4\u4e5f\u76f8\u5f53\u4e8e\u5feb\u4e861\n\n\u6240\u4ee5\u8bf4\u6c2e\u6c14\u52a0\u901f\u7684\u7528\u5904\u4e0d\u6b62\u4e00\u6bb5\u8def\uff01\uff01\uff01\n\n\u7528passum[i]\u6765\u5b58\u5728\u5730i\u4e2a\u7ad9\u4e0b\u8f66\u7684\u4e58\u5ba2\u6570\u91cf\uff0c\u5982\u4f55\u628a\u4e0b\u4e00\u4e2a\u70b9\u7684\u4eba\u5bb6\u5230\u5f53\u524d\u70b9\u4e0a\u5462\uff1f\n\n\u4ece\u5f53\u524d\u70b9\u5411\u540e\u627e\uff0c\u5982\u679c\u4e0b\u4e00\u7ad9\u662f\u4eba\u7b49\u8f66\u90a3\u4e48\u5c31\u628a\u4e0b\u4e00\u6bb5\u8def\u7684\u7ec8\u70b9\u4e0b\u8f66\u7684\u4eba\u4e5f\u52a0\u4e0a\uff0c\u4e00\u76f4\u52a0\u5230\u67d0\u4e00\u4e2a\u7ad9\u662f\u8f66\u7b49\u4eba\uff08\u8f66\u5230\u4e86\u4eba\u8fd8\u6ca1\u5230\uff09\u3002\n\n\uff08\u8fd9\u65f6\u8fd8\u6ca1\u4e0b\u8f66\u7684\u4eba\u5728\u8fd9\u4e00\u7ad9\u7b49\u5f85\u7684\u65f6\u5019\u4f1a\u628a\u5148\u524d\u52a0\u901f\u51cf\u4e0b\u53bb\u7684\u65f6\u95f4\u52a0\u4e0a\u6765\uff09\n\n\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6240\u6709\u7684\u70b9\u80fd\u5f71\u54cd\u5230\u7684\u4e58\u5ba2\u7684\u6570\u91cf\uff0c\u5373\u53ef\u4ee5\u51cf\u53bb\u8fd9\u4e48\u591a\u7684\u65f6\u95f4\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u522b\u7684\u6570\u7ec4\u6765\u50a8\u5b58\u51e0\u4e2a\u4fe1\u606f\n1. arr[i]\u6765\u8868\u793a\u8f66\u5230\u8fbe\u5f53\u524d\u7b2ci\u8f66\u7ad9\u7684\u65f6\u95f4\n\n1. taofas[i]\u6765\u8868\u793a\u6700\u65e9\u80fd\u4ec0\u4e48\u65f6\u5019\u51fa\u53d1\uff0c\u5373\u4ec0\u4e48\u65f6\u5019\u4eba\u5230\u9f50\uff08take off fastest\uff09\n\n1. len[i]\u8868\u793a\u4ece\u7b2ci\u4e2a\u8f66\u7ad9\u5230\u7b2ci+1\u4e2a\u8f66\u7ad9\u9700\u8981\u7684\u65f6\u95f4\n\n\u4e0b\u9762\u662f\u5bfb\u627e\u6c2e\u6c14\u52a0\u901f\u7684\u70b9\u7684\u8fc7\u7a0b\n```cpp\nfor(int j=1;j<n;j++){\n\tif(len[j]==0) continue;\n\tint sumtt=0;\n\tfor(int l=j+1;l<=n;l++){\n\t\tsumtt+=passum[l];\n\t\tif(arr[l]<=taofas[l]) break;//\u5230\u8fd9\u4e00\u7ad9\u4e3a\u6b62\u4e4b\u540e\u7684\u7ad9\u5c31\u4e0d\u7528\u8003\u8651\u4e86\n\t}\n\tif(sumtt>maxn){\n\tmaxn=sumtt;\n\tpos=j;\n}\n}\n```\n\u603b\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m,k,a,b,c;\nint len[1010];\nint arr[1010],taofas[1010];\nint passum[1010];\nint maxn,pos;\nint sum=0;\nint lensum;\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d\",&len[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\ttaofas[b]=max(taofas[b],a);\n\t\tpassum[c]++;\n\t\tsum-=a;//\u4e3a\u4ec0\u4e48\u8fd9\u6837\u51cf\u89c1\u4e0b\u9762\n\t}\n\tarr[1]=passum[1];\n\tfor(int i=1;i<=k;i++){\n\t\tfor(int j=2;j<=n;j++){\n\t\t\tarr[j]=max(taofas[j-1]+len[j-1],arr[j-1]+len[j-1]);\n\t\t}\n\t\tpos=maxn=0;\n\t\tfor(int j=1;j<n;j++){\n\t\t\tif(len[j]==0) continue;\n\t\t\tint sumtt=0;\n\t\t\tfor(int l=j+1;l<=n;l++){\n\t\t\t\tsumtt+=passum[l];\n\t\t\t\tif(arr[l]<=taofas[l]) break;\n\t\t\t}\n\t\t\tif(sumtt>maxn){\n\t\t\t\tmaxn=sumtt;\n\t\t\t\tpos=j;\n\t\t\t}\n\t\t}\n\t\tif(!pos) break;\n\t\tlen[pos]--;\n\t}\n\tfor(int i=2;i<=n;i++){\n\t\tarr[i]=max(arr[i-1],taofas[i-1])+len[i-1];\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tsum+=arr[i]*passum[i];\n\t}\n\tcout<<sum;\n\treturn 0;\n}\n```\n\n\u8fd9\u91cc\u6709\u4e00\u70b9\u8981\u8bf4\u660e\uff0c\u5c31\u662f\u5173\u4e8esum\u7684\u64cd\u4f5c\u6700\u540e\u8fd9\u91ccsum\u662f\u628a\u6240\u6709\u5230\u8fbe\u5f53\u524d\u70b9\u7684\u4eba\u7684\u5f53\u524d\u65f6\u95f4\u51cf\u53bb\u603b\u7684\u5f00\u59cb\u65f6\u95f4\u7b97\u4e86\u8fdb\u53bb\uff0c\u91cd\u590d\u4e86\u8fd9\u4e9b\u4eba\u5230\u8f66\u7ad9\u4e4b\u524d\u7684\u65f6\u95f4\uff0c\u518d\u8f93\u5165\u7684\u65f6\u5019\u9884\u5148\u5c06\u5230\u8fbe\u7ad9\u70b9\u4e4b\u524d\u7684\u65f6\u95f4\u90fd\u51cf\u6389\uff0c\u5c31\u4f7f\u5f97\u7b97\u7684\u65f6\u95f4\u662f\u6bcf\u4e00\u4e2a\u4e58\u5ba2\u7b49\u5f85\u7684\u65f6\u95f4\u3002",
        "postTime": 1529303641,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u8d2a\u5fc3....\n\n\u8fb9\u52a0\u901f\u8fb9\u8ba1\u7b97\u7b54\u6848\u5f88\u9ebb\u70e6 \u6240\u4ee5\u6211\u4eec\u628a\u4e0d\u7528\u52a0\u901f\u5668\u7684\u7b54\u6848\u7b97\u51fa\u6765 \u518d\u51cf\u53bb\u52a0\u901f\u7684\u65f6\u95f4\u3002\n\n\u5173\u952e\u5c31\u662f\u5728\u54ea\u91cc\u7528\u52a0\u901f\u5668...\u6211\u4eec\u8981\u8ba9\u4e00\u4e2a\u52a0\u901f\u5668\u5c3d\u53ef\u80fd\u591a\u7684\u8d21\u732e\u51fa\u5b83\u7684\u4ef7\u503c\uff0c\u5c31\u8981\u8ba9\u4ed6\n\n\u9020\u798f\u66f4\u591a\u7684\u4eba\u3002\u5982\u679c\u8fd9\u6761\u8fb9\u4e0a\u7ecf\u8fc7\u7684\u4eba\u5f88\u591a\u7684\u8bdd\uff0c\u4f7f\u7528\u52a0\u901f\u5668\u4f1a\u66f4\u5212\u7b97\u3002\u7136\u540e\u6211\u6c34\u4e8610\u5206QAQ\n\n\u8c22\u8c22\u516c\u5f0f..car[i]=max(car[i-1],t[i-1])+d[i]. car[i]\u4e3a\u6c7d\u8f66\u5230\u8fbei\u70b9\u7684\u65f6\u95f4,t[i]\u4e3a\u5728\u7b2ci\u7ad9\u4e0a\u8f66\u6700\u540e\u4e00\u4e2a\n\n\u4eba\u7684\u65f6\u95f4\u3002\u7b54\u6848\u5462\u5c31\u662f ans=sigema(car[ed[i]]-tim[i]) \uff0c\u53d1\u73b0tim[i]\u662f\u4e0d\u53d8\u7684\uff0c\u5373\u6bcf\u4e2a\u4eba\u7684\u4e0a\u8f66\u65f6\u95f4\n\n\u6211\u4eec\u8ba9\u6bcf\u4e2a\u4eba\u5f97\u4e0b\u8f66\u65f6\u95f4\u5c3d\u53ef\u80fd\u7684\u65e9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u52a0\u5165\u6211\u4eec\u5728i--i+1\u7684\u8fd9\u6761\u8fb9\u4f7f\u7528\u4e86\u52a0\u901f\u5668\uff0c\u90a3\u4e48\u7ecf\u8fc7i--i+1\u7684\u4eba\u4e0b\u8f66\u65f6\u95f4\u90fd\u53ef\u4ee5-1\uff0c\u5982\u679c\u8f66\u884c\u9a76\u5230i+1,\n\n\u53d1\u73b0\u5728i+1\u4e0a\u8f66\u7684\u6700\u540e\u4e00\u4e2a\u4eba\u8fd8\u6ca1\u6709\u6765\uff0c\u90a3\u4e48\u5728i--i+1\u4e0a\u8fd9\u6761\u8fb9\u4f7f\u7528\u52a0\u901f\u5668\u53ea\u80fd\u4f5c\u7528\u5230i+1,\u4e5f\u5c31\u662f\u8bf4i+1\n\n\u5f80\u540e\u7684\u4eba\u4ed6\u4eec\u8be5\u4ec0\u4e48\u65f6\u5019\u4e0b\u8f66\u5c31\u4ec0\u4e48\u65f6\u5019\u4e0b\u8f66\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u5728i+1\u4e0a\u8f66\u7684\u6700\u540e\u4e00\u4e2a\u4eba\uff0c\u5728\u8f66\u8fd8\u6ca1\u6765\u4e4b\u524d\n\n\u5c31\u7b49\u7740\u4e86\uff0c\u90a3\u4e48\u5728i+1\u4e0a\u8f66\u7684\u4eba\u50cf\u505a\u4e86\u987a\u98ce\u8f66\u4e00\u6837\u65f6\u95f4\u4e5f\u90fd\u51cf\u5c111\uff0c\u6211\u4eec\u8981\u8fd9\u4e00\u6761\u8fd9\u6837\u8fb9\uff0c\u8ba9\u4ed6\u9020\u798f\u7684\u4eba\n\n\u6700\u591a\uff0c\u6548\u529b\u6301\u7eed\u6700\u5927\uff01\u6ce8\u610f\u6bcf\u6b21\u52a0\u901f\u4e4b\u540e\u66f4\u65b0car[]\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m,k,d[1002],tim[10002],st[10003],ed[10003],car[1002],g[1002],t[1002],sum[1002];\nint ans,fast,maxnn;\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);//jingdian \u4e58\u5ba2 \u6c2e\u6c14\n    for(int i=1;i<n;i++)scanf(\"%d\",&d[i]);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&tim[i],&st[i],&ed[i]);\n        t[st[i]]=max(t[st[i]],tim[i]);\n        sum[ed[i]]++;\n    } \n    for(int i=2;i<=n;i++)sum[i]+=sum[i-1];\n    car[1]=t[1];\n    for(int i=2;i<=n;i++){car[i]=max(car[i-1],t[i-1])+d[i-1];}\n    for(int i=1;i<=m;i++)ans+=(car[ed[i]]-tim[i]);\n    while(k--){\n        g[n]=g[n-1]=n;maxnn=0;\n        for(int i=n-2;i>=1;i--)\n        g[i]=car[i+1]<=t[i+1]?i+1:g[i+1];\n        for(int i=1;i<n;i++)\n        if(sum[g[i]]-sum[i]>maxnn&&d[i]){\n            maxnn=sum[g[i]]-sum[i];fast=i;\n        }\n        ans-=maxnn;d[fast]--;\n        for(int i=2;i<=n;i++)car[i]=max(car[i-1],t[i-1])+d[i-1];\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1504183519,
        "uid": 49431,
        "name": "xun\u85b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "## \u514d\u8d23\u58f0\u660e\uff0c\u6709\u501f\u9274\u6210\u5206\u4e0d\u559c\u52ff\u55b7\n\u8d39\u7528\u6d41\u597d\u9898\uff0c~~\u5176\u5b9e\u662f\u4e0d\u4f1a\u8d2a\u5fc3~~\u3002\n\n### \u9e23\u8c22\u4e00\u697cdalao\u7684nb\u8d39\u7528\u6d41\n\n\u6211\u4eec\u518d\u8bfb\u8fc7\u9898\u540e\u56e0\u8be5\u80fd\u53d1\u73b0\u6ca1\u52a0\u901f\u524d\u7684$ans$\u548c\u9053\u8fbe\u6bcf\u4e00\u7ad9\u7684\u65f6\u95f4\u662f\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u6c42\u51fa\u6765\u7684\u3002\n\u6211\u4eec\u8bbe$Mx_i$\u4e3a\u7b2c$i$\u4e2a\u666f\u70b9\u6700\u665a\u5230\u8fbe\u7684\u4eba\u7684\u65f6\u95f4\u3002$tim_i$\u4e3a\u5230\u8fbe\u6bcf\u4e2a\u666f\u70b9\u7684\u65f6\u95f4\u3002\n\n$tim_{i+1} = max(tim_i,Mx_i)+D_i$\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u8003\u8651\u5728\u7b2c$i$\u4e2a\u666f\u70b9\u4e4b\u524d\u6211\u4eec\u81f3\u591a\u4f7f\u7528$tim_i-Mx_i$\u53f0\u52a0\u901f\u5668\u540e\u5c31\u4e0d\u80fd\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u62c6\u70b9\u3002\n\n\u5c06$i$\u8fd9\u4e2a\u70b9\u62c6\u6210$i,i+n$,$i$\u5411$i+1$\u8fde\u4e0a\u4e00\u4e2a\u6d41\u91cf\u4e3a$tim_i-Mx_i$\u8d39\u7528\u4e3a0\u7684\u8fb9,\u9650\u5236\u4e4b\u524d\u52a0\u901f\u5668\u7684\u4f5c\u7528\uff1b\n\n\u4e4b\u540e\u8bbe\u4e00\u4e2a\u8d85\u6e90\u5411$i+n$\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$D_i$\u8d39\u7528\u4e3a0\u7684\u8fb9\u8865\u5145\u6d41\u91cf\uff1b\u3001\uff0c\u8868\u793a\u8fd9\u91cc\u81f3\u591a\u4f7f\u7528$D_i$\u6b21\u5e76\u4e14\u4e0d\u53d7\u81ea\u5df1\u7684\u9650\u5236\uff1b\n\n\u518d\u4ece$i$\u5411$T$\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\u8d39\u7528\u4e3a$0$\u7684\u8fb9\uff0c\u8868\u793a\u518d\u7b2c$i$\u4e2a\u666f\u70b9\u7684\u9650\u5236\u4e0b\u4e4b\u524d\u7684\u67d0\u4e9b\u52a0\u901f\u5668\u5df2\u7ecf\u4e0d\u518d\u80fd\u4ea7\u751f\u8d21\u732e\uff0c\u5c06\u5b83\u4eec\u7684\u6d41\u91cf\u5bfc\u8d70\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\u6027;\n\n\u6700\u540e\u4ece$i+n$\u5411$i+1$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\u8d39\u7528\u4e3a$down_{i+1}$\u7684\u8fb9\u7528\u4e8e\u8ba1\u7b97\u524d\u65b9\u52a0\u901f\u5668\u5bf9\u8fd9\u4e00\u6ce2\u4e58\u5ba2\u7684\u5f71\u54cd\u3002\n\n\u4ee5\u540e\u6109\u5feb\u7684\u7624\u8d77\u6765\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint read() {\n\tint w=1,x=0,ch=getchar();\n\tfor(; ch<'0'||ch>'9'; ch=getchar())if(ch=='-')w=-1;\n\tfor(; ch>='0'&&ch<='9'; ch=getchar())x=x*10+ch-'0';\n\treturn x*w;\n}\nconst int MAXN = (int)4e4+10;\nconst int INF = 0x3f3f3f3f;\nint FinAns,n,m,K,S,S0,T;\nstruct peo {\n\tint l,r,ti;\n} a[MAXN];\nint tim[MAXN],Mx[MAXN],D[MAXN];\nstruct Edge {\n\tint from,to,wi,fi,nxt;\n\tEdge(int a,int b,int c,int d,int e) {\n\t\tfrom = a,to = b,wi = c,fi = d,nxt = e;\n\t} Edge() {\n\t}\n} E[MAXN<<1];\nint head[MAXN],tot;\ninline void Add_Edge(int from,int to,int wi,int fi) {\n\tE[tot] = Edge(from,to,wi,fi,head[from]),head[from] = tot;\n\tE[tot^1] = Edge(to,from,0,-fi,head[to]),head[to] = tot^1;\n\ttot += 2;\n}\nint dist[MAXN],down[MAXN],vis[MAXN],q[MAXN],inque[MAXN],cur[MAXN],l,r,fi,flow;\nvoid Init() {\n\ttot = 2;\n\tn = read(),m = read(),K = read();\n\tfor(int i=1; i<n; i++)D[i] = read();\n\tfor(int i=1; i<=m; i++) {\n\t\ta[i].ti = read(),a[i].l = read(),a[i].r = read();\n\t\tdown[a[i].r]++;\n\t\tMx[a[i].l] = max(Mx[a[i].l],a[i].ti);\n\t}\n\tfor(int i=1; i<n; i++)tim[i+1] = max(tim[i],Mx[i])+D[i];\n\tfor(int i=1; i<=m; i++)FinAns += tim[a[i].r] - a[i].ti;\n\tS = 2*n+1,S0 = 2*n+2,T = 2*n+3;\n\tAdd_Edge(S,S0,K,0);\n\tfor(int i=1; i<n; i++) {\n    \t//\u8fd9\u91cc\u5199\u6210i<=n\u4f1a\u6b7b\u7684\u5f88\u60e8\u3002\n        //\u539f\u56e0\u662fn\u4f1a\u8fde\u8fb9\u8fde\u52301\u53f7\u70b9\u88c2\u70b9\u76841+n\n        //\u7136\u540eGG\n\t\tAdd_Edge(i,i+n,max(tim[i]-Mx[i],0),0);\n\t\tAdd_Edge(i+n,i+1,INF,-down[i+1]);\n\t\tAdd_Edge(S0,i+n,D[i],0);\n\t\tAdd_Edge(i+1,T,INF,0);\n\t}\n}int dfs(int x,int w){\n\tvis[x] = true;\n\tif(x==T){\n\t\tflow += w;\n\t\treturn w;\n\t}\n\tint us = 0;\n\tfor(int i=cur[x];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tcur[x] = i;\n\t\tif((!vis[to]||to==T)&&dist[to]==dist[x]+E[i].fi&&E[i].wi){\n\t\t\tint res = dfs(to,min(w-us,E[i].wi));\n\t\t\tif(res){\n\t\t\t\tE[i].wi -= res;\n\t\t\t\tE[i^1].wi += res;\n\t\t\t\tfi += res*E[i].fi;\n\t\t\t\tus += res;\n\t\t\t\tif(us == w)break;\n\t\t\t}\n\t\t}\n\t}\n\treturn us;\n}\nint fiflow() {\n\twhile(1) {\n\t\tfor(int i=1; i<=T; i++)vis[i] = false,cur[i] = head[i],dist[i] = INF;\n\t\tl = r = 0;\n\t\tdist[S] = 0;\n\t\tinque[S] = true;\n\t\tq[r++] = S;\n\t\twhile(l<r) {\n\t\t\tint x = q[l++];\n\t\t\tinque[x] = false; \t\n\t\t\tfor(int i=head[x]; i; i=E[i].nxt) {\n\t\t\t\tint to = E[i].to;\n\t\t\t\tif(dist[to]>dist[x]+E[i].fi&&E[i].wi) {\n\t\t\t\t\tdist[to] = dist[x] + E[i].fi;\n\t\t\t\t\tif(!inque[to]) {\n\t\t\t\t\t\tinque[to] = true;\n\t\t\t\t\t\tq[r++] = to;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(dist[T]==INF)break;\n\t\tdfs(S,INF);\n\t}\n\treturn fi;\n}\nint main() {\n\tInit();\n\tcout<<FinAns+fiflow();\n\treturn 0;\n}\n```\n***\u898b\u3066\u304f\u308c\u3066\u3042\u308a\u304c\u3068\u3046***",
        "postTime": 1569285993,
        "uid": 165030,
        "name": "Sweetie_Liu",
        "ccfLevel": 6,
        "title": "P1315 \u89c2\u5149\u516c\u4ea4"
    },
    {
        "content": "\u672c\u9898\u6211\u662f\u770b\u9898\u89e3\u5b66\u4e60\u4e4b\u540e\u5b8c\u6210\u7684\uff0c\u5199\u8fd9\u7bc7\u9898\u89e3\uff0c\u662f\u4e3a\u4e86\u953b\u70bc\u4e00\u4e0b\u8bed\u6587\u8868\u8fbe\u80fd\u529b\u3002\u4e4b\u524d\u7684\u9898\u89e3\u601d\u8def\u90fd\u5dee\u4e0d\u591a\uff0c\u4f46\u4e0d\u662f\u5f88\u5bb9\u6613\u770b\u61c2\uff0c\u770b\u6765\u628a\u8fd9\u9053\u9898\u8bf4\u6e05\u695a\uff0c\u8fd8\u662f\u5f88\u6709\u6311\u6218\u6027\u7684\u3002\n\n\u9996\u5148\uff0c\u5b9a\u4e49\u4e24\u4e2a\u7ed3\u6784\u4f53\u5982\u4e0b\uff1a\n```cpp\nstruct node       //\u7ad9\u70b9\n{\n\tint batime,   //\u5df4\u58eb\u5230\u8be5\u7ad9\u65f6\u95f4 \n\t\tlatime,   //\u6700\u8fdf\u4e58\u5ba2\u5230\u8be5\u7ad9\u65f6\u95f4 \n\t\truntime,  //\u4ece\u8be5\u7ad9\u5230\u4e0b\u4e00\u7ad9\u8fd0\u884c\u65f6\u95f4 \n\t\tgetoffs,  //\u4ece\u8be5\u7ad9\u4ee5\u524d\u7684\u7ad9\u70b9\uff08\u5305\u542b\u8be5\u7ad9\uff09\u4e0b\u8f66\u7684\u603b\u4eba\u6570 \n\t\tscope;    //\u8c03\u6574\u8be5\u7ad9\u8fd0\u884c\u65f6\u95f4\u7684\u5f71\u54cd\u8303\u56f4 \n};\n\nstruct person    //\u4e58\u5ba2\n{\n\tint atime,   //\u51fa\u53d1\u65f6\u95f4 \n\t\tsnode,   //\u4e0a\u8f66\u7ad9\u70b9\n\t\tenode;   //\u4e0b\u8f66\u7ad9\u70b9 \n};\n```\n\u7ad9\u70b9\u7ed3\u6784\u4f53\u4e2d\uff0c\n\n1\u3001latime\u4ee3\u8868\u6700\u8fdf\u4e58\u5ba2\u5230\u8be5\u7ad9\u65f6\u95f4\uff0c\u7b2ci\u4e2a\u7ad9\u70b9\u7684latime\u5c31\u662f\u6240\u6709\u4e58\u5ba2\u4e2d\u4e0a\u8f66\u7ad9\u70b9\u4e3ai\u7684\u5230\u7ad9\u65f6\u95f4\u6700\u5927\u7684\u4e00\u4e2a\u3002\n\n2\u3001batime\u4ee3\u8868\u5df4\u58eb\u5230\u8be5\u7ad9\u65f6\u95f4\uff0c\u7b2ci\u4e2a\u7ad9\u70b9\u7684batime\uff0c\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u7ad9\u7684batime\u548clatime\u4e2d\u8f83\u5927\u7684\u4e00\u4e2a\uff0c\u52a0\u4e0a\u4e0a\u4e00\u4e2a\u7ad9\u70b9\u7684runtime\u3002\n\n3\u3001runtime\u4ee3\u8868\u7b2ci\u4e2a\u7ad9\u70b9\u4e0e\u7b2ci+1\u4e2a\u7ad9\u70b9\u95f4\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u76f4\u63a5\u8bfb\u53d6\u3002\u4f7f\u7528\u6c2e\u6c14\u4ee5\u540e\uff0c\u8be5\u503c\u4f1a\u51cf\u5c0f\u3002\n\n4\u3001scope \u662f\u8c03\u6574\u8be5\u7ad9\u8fd0\u884c\u65f6\u95f4\uff08\u51cf\u5c111\uff09\u7684\u5f71\u54cd\u8303\u56f4\uff0c\u8fd9\u662f\u6bd4\u8f83\u5173\u952e\u7684\u4e00\u4e2a\u5c5e\u6027\u3002\u7b2ci\u7ad9\u7684\u8fd0\u884c\u65f6\u95f4\u51cf\u5c111\uff0c\u5bf9\u7b2ci+1\u7ad9\u4e0b\u8f66\u7684\u4e58\u5ba2\u6765\u8bf4\uff0c\u663e\u7136\u662f\u76f4\u63a5\u53d7\u76ca\u7684\u3002\u5982\u679c\u7b2ci+1\u7ad9\u6240\u6709\u4e58\u5ba2\u90fd\u6bd4\u5df4\u58eb\u5148\u5230\u7ad91\u4e2a\u65f6\u95f4\u5355\u4f4d\u4ee5\u4e0a\uff08\u5df4\u58eb\u5230i+1\u7ad9\u5373\u8d70\uff09\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u7ad9\u70b9\u4e0b\u8f66\u7684\u4e58\u5ba2\u4e5f\u4f1a\u53d7\u76ca\uff0c\u76f4\u5230\u67d0\u7ad9\u9700\u8981\u7b49\u5f85\u6216\u8005\u521a\u597d\u4eba\u9f50\uff08\u5982\u679c\u8f66\u548c\u4e58\u5ba2\u521a\u597d\u540c\u65f6\u5230\uff0c\u90a3\u4e48\u8f66\u52a0\u901f\u4e5f\u6ca1\u7528\uff09\uff0c\u5f71\u54cd\u5c31\u5230\u6b64\u4e3a\u6b62\u4e86\u3002\u5f71\u54cd\u8303\u56f4\u7684\u6982\u5ff5\u5c31\u662f\u770b\u5982\u679c\u7b2ci\u4e2a\u7ad9\u70b9\u8fd0\u884c\u65f6\u95f4\u51cf1\uff0c\u54ea\u4e2a\u7ad9\u70b9\u4e4b\u524d\u4e0b\u8f66\u7684\u4e58\u5ba2\u4f1a\u53d7\u76ca\u3002\n\n5\u3001getoffs\u662f\u5728\u8be5\u7ad9\u4e4b\u524d\u6240\u6709\u7ad9\u70b9\u4e0b\u8f66\u7684\u603b\u4eba\u6570\u3002\u7406\u89e3\u4e86scope\u7684\u542b\u4e49\uff0c\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e3a\u4ec0\u4e48getoffs\u8981\u5b9a\u4e49\u4e3a\u4e4b\u524d\u6240\u6709\u7ad9\u70b9\u4e0b\u8f66\u7684\u603b\u4eba\u6570\u4e86\u3002\u56e0\u4e3a\u5f71\u54cd\u8303\u56f4\u4e0d\u786e\u5b9a\uff0c\u800c\u6211\u4eec\u53c8\u5e0c\u671b\u4e00\u6b21\u5c31\u83b7\u5f97\u5f71\u54cd\u4eba\u6570\uff0c\u6240\u4ee5\u6700\u597d\u7684\u529e\u6cd5\u662f\u5148\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7ad9\u70b9\u7684\u7d2f\u52a0\u4e0b\u8f66\u4eba\u6570\u3002\u786e\u5b9a\u4e86\u5f71\u54cd\u8303\u56f4\u5230\u7b2cscope\u4e2a\u7ad9\u70b9\u4ee5\u540e\uff0c\u5728\u7528\u7b2cscope\u4e2a\u7ad9\u70b9\u7684\u7d2f\u52a0\u6570\u51cf\u53bb\u7b2ci\u4e2a\u7ad9\u70b9\u7684\u7d2f\u52a0\u6570\uff08stop[scope].getoffs-stop[i].getoffs\uff09\uff0c\u5c31\u662f\u7b2ci+1\u7ad9\u5230\u7b2cscope\u7ad9\u4e0b\u8f66\u7684\u603b\u4eba\u6570\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e00\u6b21\u4f7f\u7528\u6c2e\u6c14\u6240\u5f71\u54cd\u5230\u7684\u4e58\u5ba2\u4eba\u6570\u3002\n\n\u7406\u89e3\u4e86\u4e0a\u8ff0\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u542b\u4e49\u4ee5\u540e\uff0c\u7a0b\u5e8f\u5c31\u4e0d\u96be\u7406\u89e3\u4e86\u3002\u8bfb\u5165\u6bcf\u4e2a\u7ad9\u70b9\u548c\u4e58\u5ba2\u7684\u521d\u59cb\u6570\u636e\u4ee5\u540e\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u6c2e\u6c14\uff0c\u5c31\u67e5\u627e\u5f71\u54cd\u4eba\u6570\u6700\u5927\u7684\u7ad9\u70b9\uff0c\u7136\u540e\u5728\u8be5\u7ad9\u70b9\u4f7f\u7528\u6c2e\u6c14\uff0c\u8bb0\u5f55\u5f71\u54cd\u6548\u679c\uff0c\u91cd\u65b0\u8ba1\u7b97\u6bcf\u4e2a\u7ad9\u7684\u5230\u7ad9\u65f6\u95f4\u540e\uff0c\u518d\u91cd\u590d\u4e0b\u4e00\u4e2a\u6c2e\u6c14\u7684\u64cd\u4f5c\u3002\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nstruct node       //\u7ad9\u70b9 \n{\n\tint batime,   //\u5df4\u58eb\u5230\u8be5\u7ad9\u65f6\u95f4 \n\t\tlatime,   //\u6700\u8fdf\u4e58\u5ba2\u5230\u8be5\u7ad9\u65f6\u95f4 \n\t\truntime,  //\u4ece\u8be5\u7ad9\u5230\u4e0b\u4e00\u7ad9\u8fd0\u884c\u65f6\u95f4 \n\t\tgetoffs,  //\u4ece\u8be5\u7ad9\u4ee5\u524d\u7684\u7ad9\u70b9\u4e0b\u8f66\u7684\u4eba\u6570 \n\t\tscope;    //\u8c03\u6574\u8be5\u7ad9\u8fd0\u884c\u65f6\u95f4\u7684\u5f71\u54cd\u8303\u56f4 \n};\n\nstruct person     //\u4e58\u5ba2 \n{\n\tint atime,   //\u51fa\u53d1\u65f6\u95f4 \n\t\tsnode,   //\u4e0a\u8f66\u7ad9\u70b9\n\t\tenode;   //\u4e0b\u8f66\u7ad9\u70b9 \n};\nnode stop[1001];\nperson p[10001];\n\nint main()\n{\n\tint i,n,m,k,ans,pos,maxpersons;\n\tfreopen(\"1315.in\",\"r\",stdin);\n\tcin>>n>>m>>k;\n\tfor(i=1;i<n;i++)      //\u8bfb\u51651~n-1\u4e2a\u7ad9\u70b9\u7684\u8fd0\u884c\u65f6\u95f4 \n\t{\n\t\tcin>>stop[i].runtime;\n\t\tstop[i].latime=0;   \n\t\tstop[i].getoffs=0; \n\t}\n\tstop[n].latime=0;\n\tstop[n].getoffs=0;\n\t \n\tfor(i=1;i<=m;i++)   //\u8bfb\u5165m\u4e2a\u4e58\u5ba2\u7684\u6570\u636e \n\t{\n\t\tcin>>p[i].atime>>p[i].snode>>p[i].enode;   \n\t\tstop[p[i].enode].getoffs++;   //\u8be5\u4e58\u5ba2\u4e0b\u8f66\u7ad9\u70b9\u7684\u4e0b\u8f66\u4eba\u6570+1 \n\t\tif(stop[p[i].snode].latime<p[i].atime) \n\t\t\tstop[p[i].snode].latime=p[i].atime; //\u8bb0\u5f55\u8be5\u4e58\u5ba2\u51fa\u53d1\u7ad9\u70b9\u7684\u6700\u8fdf\u51fa\u53d1\u65f6\u95f4 \n\t}\n\tstop[1].batime=stop[1].latime;\n\tfor(i=2;i<=n;i++)\n\t{\n\t\tstop[i].batime=max(stop[i-1].batime,stop[i-1].latime)+stop[i-1].runtime; //\u5230\u7ad9\u65f6\u95f4=\u4e0a\u4e00\u7ad9\u7684\u51fa\u53d1\u65f6\u95f4+\u8fd0\u884c\u65f6\u95f4 \n\t\tstop[i].getoffs+=stop[i-1].getoffs;  //\u7d2f\u52a0\u5230\u7ad9\u4eba\u6570 \n\t}\n\tans=0;\n\tfor(i=1;i<=m;i++)\n\t\tans+=stop[p[i].enode].batime-p[i].atime; //\u7d2f\u52a0\u6bcf\u4f4d\u4e58\u5ba2\u7684\u5230\u7ad9\u65f6\u95f4-\u51fa\u53d1\u65f6\u95f4 \n\t\n\tstop[n].scope=stop[n-1].scope=n;\n\twhile(k>0)\n\t{\n\t\tfor(i=n-2;i>0;i--)    //\u4ece\u540e\u5411\u524d\u9012\u63a8\u6bcf\u4e2a\u7ad9\u70b9\u7684\u5f71\u54cd\u8303\u56f4 \n\t\t{\n\t\t\tif(stop[i+1].batime<=stop[i+1].latime)  //\u5982\u679c\u5df4\u58eb\u5230\u7ad9\u4ee5\u540e\u9700\u8981\u7b49\u5f85\u6216\u8005\u521a\u597d\u4eba\u9f50 \n\t\t\t\tstop[i].scope=i+1;                  //\u5f71\u54cd\u8303\u56f4\u5230\u7b2ci+1\u7ad9\u4e3a\u6b62 \n\t\t\telse\n\t\t\t\tstop[i].scope=stop[i+1].scope;      //\u5982\u679c\u8be5\u7ad9\u4e58\u5ba2\u90fd\u65e9\u52301\u4e2a\u65f6\u95f4\u5355\u4f4d\u4ee5\u4e0a\uff0c\u5f71\u54cd\u8303\u56f4\u5411\u540e\u5ef6\u4f38 \n\t\t}\n\t\tmaxpersons=0;\n\t\tfor(i=1;i<n;i++)   //\u67e5\u627e\u5f71\u54cd\u6700\u5927\u7684\u7ad9\u70b9\u548c\u5f71\u54cd\u4eba\u6570 \n\t\t{\n\t\t\tif(stop[stop[i].scope].getoffs-stop[i].getoffs>maxpersons && stop[i].runtime>0) \n\t\t\t{\n\t\t\t\tpos=i;  //\u8bb0\u5f55\u7ad9\u70b9\u53f7 \n\t\t\t\tmaxpersons=stop[stop[i].scope].getoffs-stop[i].getoffs; //\u8bb0\u5f55\u6700\u5927\u5f71\u54cd\u4eba\u6570 \n\t\t\t}\n\t\t}\n\t\tk--;                  //\u7528\u6389\u4e00\u4e2a\u6c2e\u6c14 \n\t\tstop[pos].runtime--;  //\u8fd0\u884c\u65f6\u95f4\u51cf1 \n\t\tans-=maxpersons;      //\u603b\u65f6\u95f4\u51cf\u53bb\u53d7\u76ca\u4eba\u6570\uff08\u6bcf\u4eba\u51cf\u5c111\uff09 \n\t\tfor(i=2;i<=n;i++)\n\t\t\tstop[i].batime=max(stop[i-1].batime,stop[i-1].latime)+stop[i-1].runtime;\n\t\t\t//\u91cd\u65b0\u8ba1\u7b97\u6bcf\u4e2a\u7ad9\u70b9\u7684\u5230\u7ad9\u65f6\u95f4 \n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1524577376,
        "uid": 91689,
        "name": "\u6768\u677e\u701a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u3010\u601d\u8def\u3011\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u7b80\u5355\u7684\u6a21\u62df\u9898\uff08\u4f17\uff1a\u662f\u5417\uff1f\uff09\uff0c\u6211\u5f00\u59cb\u4ee5\u4e3a\u8fd9\u4e48\u201c\u7b80\u5355\u201d\u7684\u9898\u76ee\u8981\u7528\u5230\u8bf8\u5982dp\u3001\u7ebf\u6bb5\u6811\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u7136\u540e\u53c2\u8003\u4e86\u5404\u79cd\u601d\u8def\u540e\u6211\u53d1\u73b0\u771f\u7684\u53ea\u8981\u6a21\u62df\u8036\uff08\u4f17\uff1a\u5e9f\u8bdd\uff01\uff09\u2026\u2026\n\n\u8fd9\u9053\u9898\u6211\u7684\u601d\u8def\u5c31\u662f\u5148\u628a\u4e0d\u7528\u52a0\u901f\u5668\u7684\u7528\u65f6\u8ba1\u7b97\u51fa\u6765\uff0c\u7136\u540e\u7528\u5404\u79cd\u529e\u6cd5\u4e00\u4e2a\u4e00\u4e2a\u8ba1\u7b97\u7528\u4e00\u4e2a\u52a0\u901f\u5668\u80fd\u8ba9\u603b\u65f6\u95f4\u51cf\u77ed\u591a\u5c11\uff0c\u7136\u540e\u5c31AC\u4e86\u3002\u5177\u4f53\u600e\u4e48\u7528\u5404\u79cd\u529e\u6cd5\u5462\uff1f\u8bf7\u542c\u4ee3\u7801\u5206\u89e3\u2026\u2026\n\n\u3010\u4ee3\u7801\u3011\n\n```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint n,m,k,d[10001],t[10001],a[10001],b[10001],ans=0;//ans=\u6700\u7ec8\u7b54\u6848 \nint ti[10001],tim[10001],yx[10001],z[10001];//\u5176\u4f59\u53d8\u91cf\u89e3\u91ca\u89c1\u4e0b\u65b9 \nint main()\n{\n    cin>>n>>m>>k; //n=\u8f66\u7ad9\u6570\u91cf m=\u4e58\u5ba2\u6570 k=\u52a0\u901f\u5668\u6570\u91cf \n    for(int i=1;i<n;i++)\n    cin>>d[i]; //\u8f93\u5165\u4ece\u7b2ci\u7ad9~\u7b2ci+1\u7ad9\u7684\u65f6\u95f4 \n    for(int i=1;i<=m;i++)\n    {\n        cin>>t[i]>>a[i]>>b[i]; //t=\u4e58\u5ba2\u5230\u8fbe\u7684\u65f6\u95f4 a=\u4e58\u5ba2\u7684\u8d77\u70b9 b=\u4e58\u5ba2\u7684\u7ec8\u70b9 \n        ti[a[i]]=max(ti[a[i]],t[i]);//ti\u4ee3\u8868\u6700\u665a\u5230\u8fbe\u7b2ci\u7ad9\u7684\u4e58\u5ba2\u5230\u8fbe\u7684\u65f6\u95f4 \n        z[b[i]]++;\n    }\n    for(int i=2;i<=n;i++)\n    z[i]+=z[i-1];\n    //\u539f\u672c\u662f\u7528\u6765\u5b58\u50a8\u6709\u591a\u5c11\u4e58\u5ba2\u5c06\u8fd9\u4e2a\u7ad9\u5f53\u4f5c\u7ec8\u70b9\u7684\uff0c\u7531\u4e8e\u8ba1\u7b97\u539f\u56e0\uff0c\u52a0\u4e0a\u524d\u9762\u7684  \n    tim[1]=0;//tim[i]\u8868\u793a\u89c2\u5149\u516c\u4ea4\u5230\u8fbe\u7b2ci\u4e2a\u666f\u70b9\u7684\u65f6\u95f4 \n    for(int i=2;i<=n;i++)\n    tim[i]=max(tim[i-1],ti[i-1])+d[i-1];\n    for(int i=1;i<=m;i++)\n    ans+=tim[b[i]]-t[i];//\u4e0d\u7528\u52a0\u901f\u5668\u7684\u7b54\u6848(\u8fd9\u6837\u53ef\u4ee5\u5f9710\u5206^_^) \n    for(int i=k;i>=1;i--)//\u6bcf\u4e2a\u52a0\u901f\u5668\u505a\u4e00\u904d \n    {\n        yx[n]=n;yx[n-1]=n;//\u7b2ci\u4e2a\u8f66\u7ad9\u80fd\u5f71\u54cd\u7684\u8303\u56f4(yx[i]~i) \n        for(int j=n-2;j>=1;j--)\n        if(tim[j+1]<=ti[j+1])yx[j]=j+1;\n        else yx[j]=yx[j+1];//\u6c42\u51fa(yx[i])\n        //\u5982\u679c\u8f66\u5230\u7ad9\u8fd8\u8981\u7b49\u4eba\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u52a0\u901f\u5668\u53ea\u80fd\u5f71\u54cd\u5230\u8fd9\u4e2a\u7ad9\uff0c\u5426\u5219\u8fd8\u53ef\u4ee5\u5f71\u54cd\u4e0b\u4e00\u4e2a\u7ad9 \n        int maxn=0,wz;\n        for(int j=1;j<=n;j++)\n        if(z[yx[j]]-z[j]>maxn&&d[j]>0)\n        maxn=z[yx[j]]-z[j],wz=j;//\u8fd9\u4e2a\u52a0\u901f\u5668\u80fd\u5f71\u54cd\u7684\u6700\u5927\u4e58\u5ba2\u6570(maxn) \n        d[wz]--;ans-=maxn;tim[1]=0;//\u5404\u79cd\u51cf \n        for(int j=2;j<=n;j++)\n        tim[j]=max(tim[j-1],ti[j-1])+d[j-1];//\u5404\u79cd\u91cd\u7f6e \n    }\n    cout<<ans<<endl;//\u8f93\u51fa\u7b54\u6848 \n}\n\n```",
        "postTime": 1492304515,
        "uid": 14559,
        "name": "AFOier",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "## \u5728@bestFy \u5927\u4f6c\u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u70b9\u5fae\u8c03\uff0c\u91cd\u70b9\u5728\u4e8e\u89e3\u91ca\u3002\n\u5728\u8bc4\u8bba\u533a\u4e2d\u6709\u4eba\u63d0\u5230\u53bb\u6389\n```cpp\nif (!d[i - 1]) f[i - 1] = 0;\n```\n\u4e00\u53e5\uff0c\u5373\u53efAC\u3002\n\n\u697c\u4e0b\u89e3\u91ca\u4e3a\u8fd9\u4e00\u53e5\u5bf9\u5e94\u7684\u662fHack\u7684\u5361\u70b9\u2014\u2014\u4e0d\u7b49\u4eba\u3002\u8054\u7cfb\u4e0a\u4e0b\u6587\u540e\u6211\u61f5\u4e86\uff1ad[i]\u8868\u793a\u7684\u662f\u4e24\u7ad9\u95f4\u8ddd\u79bb\uff0c**!d[i]\u7b49\u4ef7\u4e8ed[i]==0**\u3002\u663e\u7136**\u8ddd\u79bb\u4e3a0\u65f6\u4e0d\u80fd\u7528\u52a0\u901f\u5668**\uff08\u9898\u9762\u6709\u63d0\u5230\uff09\uff0c\u90a3\u8fd9\u4e2a\u5224\u65ad\u5b8c\u5168\u6b63\u786e\u554a\uff01\n\n\u6df1\uff08luan\uff09\u601d\uff08gao\uff09\u719f\uff08yi\uff09\u8651\uff08tong\uff09\u540e\u6211\u60f3\u5230\u4e86\u4ec0\u4e48\u3002\u4ed4\u7ec6\u770b\u4e0b\u6587\uff1a\n```cpp\nif (getto[i] > latest[i]) f[i - 1] = f[i - 1] + f[i];\n```\n\u8fd9\u4e00\u53e5\u7684\u610f\u601d\u662f\u4eba\u5148\u5230\u8f66\u6ca1\u5230\u5c31\u52a0\u901f\uff0c\u8be5\u51b3\u7b56\u4ea7\u751f\u7684\u7ed3\u679c**\u53ea\u8981\u4e2d\u9014\u4e0d\u53d1\u751f\u8f66\u7b49\u4eba\u5c31\u80fd\u901a\u8fc7\u8be5\u8bed\u53e5\u4e00\u76f4\u4f20\u9012**\u3002\u5373\u4f7f\u8fd9\u6761\u8def\u5df2\u7ecf~~\u706b\u529b~~\u6c2e\u6c14\u5168\u5f00\u4ee5\u65e0\u6d88\u8017\u7ecf\u8fc7\uff01\u6240\u4ee5\u5982\u679c\u6211\u6ca1\u60f3\u9519\u7684\u8bdd\uff0c@bestFy \u5927\u4f6c\u7684\u4ee3\u7801\u662f**\u6b7b\u5728\u8fd9\u4e00\u6761\u800c\u975e\u4e0d\u7b49\u4eba\u4e0a**\uff01\uff08Hack\u6570\u636e\u4e2d2->3\u4e3a0\uff09\n\n\u4e3a\u6b64\uff0c\u6211\u65e0\u8bba\u4e00\u6761\u8def\u957f\u662f\u5426\u4e3a\u96f6\uff0c\u5747\u66f4\u65b0f\u6570\u7ec4\uff08\u5373tmp\uff09\u5e76\u65b0\u8bbeillegal\u6570\u7ec4\u5224\u5b9a\uff0c\u9632\u6b62\u57280\u8fb9\u4e0a\u52a0\u901f\u9020\u6210\u4e0d\u5408\u6cd5\u60c5\u51b5\uff0c[\u5b9e\u6d4bAC](https://www.luogu.org/record/show?rid=11605926)\u3002\n\n### \u5f53\u7136\uff0c\u5982\u679c\u6709\u65b0\u7684Hack\uff0c\u671b\u544a\u77e5\u3002\n\nP.S\uff1a\u5982\u679c\u77e5\u9053\u6c2e\u6c14\u52a0\u901f\u539f\u7406\u7684\uff0c\u4e5f\u8bf7\u544a\u77e5\uff08\u9003\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,k,d[1010]={},t[10010]={},a[10010]={},b[10010]={},last[1010]={},down[1010]={},arrive[1010]={};\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while (c<'0'||c>'9')\n        c=getchar();\n    while (c>='0'&&c<='9')\n        x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    return x;\n}\nint main()\n{\n    n=read();m=read();k=read();\n    for (int i=1;i<n;++i)\n        d[i]=read();\n    for (int i=1;i<=m;++i)\n    {\n        t[i]=read();a[i]=read();b[i]=read();\n        last[a[i]]=max(last[a[i]],t[i]);\n        arrive[a[i]]=last[a[i]];\n        ++down[b[i]];\n    }\n    for (int i=1;i<n;++i)\n        arrive[i+1]=max(last[i],arrive[i])+d[i];\n    while (k)\n    {\n        int tmp[1010]={},best=0,pos=0;\n        bool illegal[1010]={};\n        for (int i=n-1;i>=1;--i)\n        {\n            if (!d[i])\n                illegal[i]=1;\n            tmp[i]=down[i+1];\n            if (arrive[i+1]>last[i+1])\n                tmp[i]+=tmp[i+1];\n        }\n        for (int i=1;i<n;++i)\n            if (!illegal[i])\n                if (best<tmp[i])\n                    best=tmp[i],pos=i;\n        if (!pos)\n            break;\n        --k;\n        --d[pos];\n        for (int i=pos;i<n;++i)\n            arrive[i+1]=max(last[i],arrive[i])+d[i];\n    }\n    int ans=0;\n    for (int i=1;i<=m;++i)\n        ans+=(arrive[b[i]]-t[i]);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1538838957,
        "uid": 17973,
        "name": "1517460958dyc",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "~~\u5927\u6982~~\u662f\u6211\u76ee\u524d\u505a\u7684\u6700\u4e45\u7684\u4e00\u9053\u9898\uff0c~~\u6342\u8138~~\u3002\n\n\u82e6\u4e8e\u9898\u89e3\u533a\u5927\u4f6c\u4eec\u7384\u5999\u53d8\u91cf\u65e0\u6cd5\u7406\u89e3\uff0c\u9042\u6c42\u63f4\u4e8e\u673a\u623f\u5927\u4f6c @52\u8d6b\u5179\u7684\u9cb8 \u3002\n\n\u7136\u867d\u5927\u4f6c\u51e0\u756a\u5c1d\u8bd5\uff0c\u6211...\u8fd8\u662f\u6ca1\u542c\u61c2\uff0c\u518d\u7ecf\u8fc7\u6781\u957f\u65f6\u95f4\u7684\u601d\u8003\u540e\uff0c\u624d\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u8bb2\u89e3\u90fd\u5728\u6ce8\u91ca\u91cc\uff0c\u9759\u4e0b\u5fc3\u4e00\u5b9a\u80fd\u770b\u61c2\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\nint n,m,k,ans;\nint pos;//n2\u7684\u91ca\u653e\u4f4d\u7f6e\nint max_cut_time;//\u4e00\u6b21\u6700\u591a\u51cf\u5c11\u7684\u65f6\u95f4\nint dis[1001];\nint Time[10001];//i\u53f7\u4e58\u5ba2\u5230\u8fbe\u4e0a\u8f66\u70b9\u65f6\u95f4\nint Start[10001];//\u8d77\u59cb\u5730\nint address[10001];//\u76ee\u7684\u5730\nint latest_arrive_time[1001];//\u6700\u540e\u4e00\u4e2a\u5230\u8fbei\u7ad9\u7684\u4e58\u5ba2\u7684\u65f6\u95f4\nint person_will_left[1001];//\u5230\u7b2ci\u7ad9\u7684\u4e0b\u8f66\u603b\u4eba\u6570\nint bus_arrive_time[1001];//\u5b9e\u9645\u5230\u8fbe\u65f6\u95f4\nint Scope_of_influence[1001];//\u5f71\u54cd\u8303\u56f4\uff08\u5b58\u7684\u662fi\u540e\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528n2\u7684\u5730\u70b9\uff09\nint main()\n{\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<n;i++)cin>>dis[i];\n\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>Time[i]>>Start[i]>>address[i];\n\t\tlatest_arrive_time[Start[i]]=max(latest_arrive_time[Start[i]],Time[i]);\n\t\tperson_will_left[address[i]]++;\n\t}//\u57fa\u7840\u8bfb\u5165\u548c\u64cd\u4f5c\uff0c\u610f\u4e49\u89c1\u53d8\u91cf\u5b9a\u4e49\n\n\tfor(int i=2;i<=n;i++)\n\tperson_will_left[i]+=person_will_left[i-1];\n    \n\tbus_arrive_time[1]=latest_arrive_time[1];\n    \n\tfor(int i=2;i<=n;i++)\n\tbus_arrive_time[i]=max(bus_arrive_time[i-1],latest_arrive_time[i-1])+dis[i-1];//\u6d45\u663e\u7684\u5f97\u5230\u5b9e\u9645\u5230\u8fbe\u65f6\u95f4\uff0c\u663e\u7136\u5982\u679c\u4f7f\u7528n2\uff0c\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\n\tfor(int i=1;i<=m;i++)\n\tans+=(bus_arrive_time[address[i]]-Time[i]);//\u53ef\u80fd\u4e00\u4e2an2\u90fd\u6ca1\u6709\uff0c\u5148\u7b97\u4e00\u4e2a\u7b54\u6848\u518d\u8bf4\n\n\twhile(k--)//\u6bcf\u4f7f\u7528\u4e00\u6b21N2\n\t{\n\t\tScope_of_influence[n]=n;//\u6700\u540e\u8fd9\u7ad9\u4f60\u8fd8\u8981\u5565\u81ea\u884c\u8f66\n\t\tScope_of_influence[n-1]=n;//\u5012\u6570\u7b2c\u4e8c\u7ad9\u9664\u4e86\u6700\u540e\u4e00\u7ad9\u4f60\u8fd8\u6709\u7684\u9009\u5417\uff1f\n\t\tmax_cut_time=0;\n\t\tfor(int i=n-2;i>0;i--)//\u5012\u63a8\n\t\t{\n\t\t\tif(bus_arrive_time[i+1]<=latest_arrive_time[i+1]){\n\t\t\t\t/*\u8f66\u5230\u8fbei+1\u7ad9\u7684\u65f6\u95f4<=\u6700\u540e\u5728i+1\u7ad9\u4e0a\u8f66\u7684\u4eba\u4e0a\u8f66\u7684\u65f6\u95f4,\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7b49\u5230\u6240\u6709\u4e58\u5ba2\u4e0a\u8f66\u624d\u80fd\u51fa\u53d1\uff08\u5bf9\u540e\u9762\u4e0b\u8f66\u7684\u4e58\u5ba2\u5f00\u59cb\u6ca1\u6709\u5f71\u54cd\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u8d2a\u5fc3\u7684\u5173\u952e\uff09*/\n\t\t\t\tScope_of_influence[i]=i+1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tScope_of_influence[i]=Scope_of_influence[i+1];//\u5f71\u54cd\u8303\u56f4\u4f38\u957f\n\t\t\t}\n\t\t}\n\t\t/*\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u6c42\u6700\u5927\u53ef\u4ee5\u51cf\u53bb\u7684\u65f6\u95f4*/\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tif(((person_will_left[Scope_of_influence[i]]-person_will_left[i])>max_cut_time)&&dis[i])//\u6bd4\u539f\u6700\u5927\u53ef\u5207\u53bb\u65f6\u95f4\u5927\u5e76\u4e14\u8fd9\u6761\u8def\u8fd8\u53ef\u4ee5\u5207\n\t\t\t{\n\t\t\t\tmax_cut_time=person_will_left[Scope_of_influence[i]]-person_will_left[i];\n\t\t\t\tpos=i;\n\t\t\t}\n\t\t}\n\t\tans-=max_cut_time;//\u5f97\u5230\u7684\u66f4\u4f73\u7b54\u6848\n\t\tdis[pos]--;//\u5728\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2an2\n\t\tfor(int i=2;i<=n;i++)bus_arrive_time[i]=max(bus_arrive_time[i-1],latest_arrive_time[i-1])+dis[i-1];//\u540c\u4e0a\u6240\u8a00\uff0c\u65e2\u7136\u4fee\u6539\u4e86dis\uff0c\u5219\u9700\u8981\u91cd\u7b97\u5230\u8fbe\u65f6\u95f4\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n\n```",
        "postTime": 1524473556,
        "uid": 48281,
        "name": "\u5403\u8461\u8404\u5410\u7cd6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7b2c\u4e00\u773c\u770b\u8fc7\u53bb\uff0c\u6beb\u65e0\u601d\u8def\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u90e8\u5206\u5206\u51fa\u6b63\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u63a8\u4e00\u4e2a\u67ff\u5b50\n\n$f_i$\u8868\u793a\u5230\u8fbe$i$\u7684\u65f6\u95f4\uff0c$g_i$\u8868\u793a\u79bb\u5f00$i$\u7684\u65f6\u95f4\u3002\n\n$mx_i$\u8868\u793a\u4ece$i$\u5f00\u59cb\u7684\u90a3\u4e2a\u6700\u540e\u4e0a\u8f66\u7684\u4e58\u5ba2\u7684\u65f6\u95f4\n\n$cnt_i$\u8868\u793a\u5230$i$\u7ed3\u675f\u7684\u4eba\u6570\n\n$ans=(\\sum_{i=2}^nf_i\\times cnt_i)-\\sum_{i=1}^mT_i$\n\n$f_i=g_{i-1}+d_{i-1}$\n\n$g_i=\\max\\{f_i,mx_i\\}$\n\n\u663e\u7136\u8fd9\u5c31\u662fk=0\u505a\u6cd5\u4e86\n\n\u8003\u8651k=1\u7684\u505a\u6cd5\uff1a\n\n- \u6cd51\uff0c\u679a\u4e3e\u5220\u8fb9\u7136\u540e\u91cd\u65b0\u7edf\u8ba1ans\u53d6max\uff0c\u590d\u6742\u5ea6O(n^2)\n\n- \u6cd52\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u7edf\u8ba1\u5176\u8d21\u732e\uff0c\u76f4\u63a5\u7edf\u8ba1\uff0cO(n)\n\n\u6211\u4eec\u8fd9\u91cc\u7740\u91cd\u8003\u8651\u7b2c\u4e8c\u79cd\u505a\u6cd5\u3002\n\n\u53d1\u73b0\uff0c\u5982\u679cd[i-1]--\uff0c\u90a3\u4e48\u610f\u5473\u7740f[i]--\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cans-=a[i]\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u51cfd[i-1]\u8fd9\u6761\u8fb9\u5b9e\u9645\u4e0a\u8d21\u732e\u4e86a[i]\uff08\u8d1f\uff09\u7684\u7b54\u6848\u3002\n\n\u6ca1\u5b8c\u5462\uff0c\u8003\u8651f[i]--\u7684\u8d21\u732e\uff0c\u53d1\u73b0\u5982\u679c\u539f\u6765\u7684f[i]>mx[i]\uff0c\u90a3\u4e48g[i]--\uff0cf[i+1]--\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cf[i]>mx[i]\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8d21\u732e\u53ef\u4ee5\u3010\u5ef6\u7eed\u4e0b\u53bb\u3011\n\n\u5982\u679cf[i]<=mx[i]\uff0c\u90a3\u4e48f[i]\u7684\u51cf\u5c11\u548cg[i]\u5c31\u6ca1\u4ec0\u4e48\u5173\u7cfb\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684\u662f\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u5f00\u59cb\u70b9\u7136\u540e\u8003\u8651\u628a\u5b83d[i]-1\u4e4b\u540e\u505a\u7684\u8d21\u732e\uff0c\u63a5\u4e0b\u6765\u5411\u4e0b\u679a\u4e3e\uff0c\u770b\u662f\u5426\u80fd\u5ef6\u7eed\uff0c\u5982\u679c\u80fd\u5ef6\u7eed\u90a3\u4e48\u5f53\u524d\u7684sum\uff08\u8d21\u732e\uff09+=cnt[i+1]\uff0c\u5426\u5219\u4ee5\u4ed6\u4e3a\u65b0\u8d77\u70b9\u3002\uff08\u6ce8\u610f\u8003\u8651d[i]=0\uff09\n\n\u5982\u679c\u4e0d\u770b\u7ec6\u8282\u7684\u8bdd\uff0c\u8fd9\u5c31\u662fO(n)\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0k<=100000\uff0c\u53ea\u9700\u8981k\u4e2aO(n)\u5c31\u53ef\u4ee5\u505a\u5230O(kn)\u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u56e0\u4e3a\u8fd9\u9898\u6570\u636e\u6c34\uff0c\u6240\u4ee5\u8fc7\u4e86\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u6b63\u786e\u7684\u590d\u6742\u5ea6\u662f\u4ec0\u4e48\u5462\uff1f\n\n\u5176\u5b9e\u8981\u6539\u7684\u8bdd\u5f88\u7b80\u5355\uff0c\u8003\u8651\u6bcf\u6b21\u51cf\u591a\u4e2ad[i]\u5c31\u597d\u4e86\u3002\n\n\u6211\u4eec\u627e\u5230\u90a3\u4e2a\u8d21\u732e\u6700\u5927\u7684d[i]\uff0c\u7528$mnn$\u8bb0\u5f55\u4ed6\u53ef\u4ee5\u88ab\u51cf\u591a\u5c11\u6b21\uff0c\u7136\u540e\u76f4\u63a5\u51cf\u3002\n\n\u770b\u4f3c\u53ea\u662f\u4e2a\u5e38\u6570\u4f18\u5316\uff0c\u7136\u800c\u590d\u6742\u5ea6\u53d8\u6210\u4e86O(n^2)\u3002\n\n\u4e3a\u5565\uff1f\n\n\u6211\u4eec\u628a\u3010\u5ef6\u7eed\u3011\u770b\u6210\u662f\u628a\u533a\u95f4\u5206\u6210\u4e86\u82e5\u5e72\u4e2a\u5757\uff0c\u90a3\u4e48\u4e00\u6b21\u51cf\u5b8c\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u5757\u518d\u6b21\u7ec6\u5206\u6210\u597d\u51e0\u4e2a\u5c0f\u5757\uff08\u56e0\u4e3a\u4e0d\u8fde\u7eed\u4e86)\n\n\u663e\u7136\uff0c\u5207\u5757\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u6700\u591aO(n)\u6b21\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662fO(n^2)\u7684\u3002\n\n\u5f53\u7136\uff0c\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u6216\u8005\u5947\u602a\u7684\u5806\u5361\u5e38\uff08\u7528\u5206\u6cbb\u5207\u5757+\u5806\uff09\u662f\u53ef\u4ee5\u505a\u5230nlogn\uff08\u540e\u8005\u662f\u63a5\u8fd1nlogn\uff09\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u8fd9\u4e2a\u9898\u7684\u3002\n\n\u4f46\u662f\u6211\u592a\u83dc\uff0c\u5c31\u4e0d\u4f1a\u4e86\u3002\n\n\u6700\u540e$CSP2020RP++$",
        "postTime": 1604711494,
        "uid": 96197,
        "name": "Minuses",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u9898\u610f\u5728\u8fd9\u91cc\u5c31\u4e0d\u518d\u590d\u8ff0\u4e86\uff0c\u81ea\u5df1[\u6233\u8fd9\u91cc](https://www.luogu.com.cn/problem/P1315)\u53bb\u770b\u770b\u5427       \n\u8003\u8651\u6700\u7b80\u5355\u7684\u8d2a\u5fc3\uff1a\u6bcf\u6b21\u9009\u53d6\u6c2e\u6c14\u52a0\u901f\u6536\u76ca\u6700\u5927\u7684\u65b9\u6848\u8fdb\u884c\u6c2e\u6c14\u52a0\u901f      \n\u95ee\u9898\u6765\u4e86\uff1a\u600e\u4e48\u8ba1\u7b97\u5728\u67d0\u4e2a\u70b9\u4f7f\u7528\u6c2e\u6c14\u52a0\u901f\u83b7\u5f97\u7684\u6536\u76ca     \n\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u8003\u8651\u9898\u76ee\u7684\u672c\u8d28\uff1a      \n*   \u6bcf\u4e2a\u6e38\u5ba2\u6240\u82b1\u65f6\u95f4\u662f\u7ec8\u70b9\u7684\u5230\u8fbe\u65f6\u95f4\u51cf\u6389\u6e38\u5ba2\u7684\u5230\u8fbe\u65f6\u95f4\n*   \u5230\u8fbe\u65f6\u95f4\u5df2\u7ecf\u56fa\u5b9a\uff0c\u6240\u4ee5\u8981\u60f3\u4ea7\u751f\u6536\u76ca\uff0c\u67d0\u4e2a\u6e38\u5ba2\u7684\u7ec8\u70b9\u7684\u5230\u8fbe\u65f6\u95f4\u5fc5\u987b\u63d0\u524d     \n\u8bbe$last_i$\u8868\u793a$i$\u70b9\u6700\u665a\u5230\u8fbe\u7684\u4e58\u5ba2\u5230\u8fbe\u7684\u65f6\u523b     \n\u8bbe$arrive_i$\u8868\u793a$i$\u70b9\u89c2\u5149\u8f66\u7684\u5230\u8fbe\u65f6\u523b    \n\u663e\u7136\uff0c\u5f53$last_i>arrive_i$\u65f6\uff0c\u5728$i-1$\u81f3$i$\u7684\u9053\u8def\u4e0a\u4f7f\u7528\u6c2e\u6c14\u52a0\u901f\u4f1a\u4f7f$arrive_{i+1}$\u51cf\u5c11    \n\u5982\u679c\u6b64\u65f6\u5728$i+1$\u6709\u4e0b\u8f66\u7684\u4e58\u5ba2\uff0c\u5c31\u4f1a\u4f7f\u8fd9\u4e2a\u4e58\u5ba2\u7684\u65f6\u95f4\u51cf\u6389$1$     \n\u6240\u4ee5\uff0c\u8ba1\u7b97\u6536\u76ca\u53ea\u9700\u8981\u5411\u540e\u679a\u4e3e$i$,\u5982\u679c$arrive_i \\leq last_i$\u65f6\u9000\u51fa    \n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <cstring>\nusing namespace std;\n#define int long long\nconst int NR=1e3+10;\nconst int MR=1e4+10;\nint dist[NR];\nint s[MR];\nint t[MR];\nint times[MR];\nint last[NR];\nint arrive[NR];\nint tot[NR];\nint n,m,k;\nsigned main(signed argc, char const *argv[])\n{\n      //freopen(\"1.in\",\"r\",stdin);\n      //freopen(\"1.out\",\"w\",stdout);\n      cin>>n>>m>>k;\n      for(int i=1;i<n;i++)cin>>dist[i];\n      for(int i=1;i<=m;i++)cin>>times[i]>>s[i]>>t[i];\n      for(int i=1;i<=m;i++)last[s[i]]=max(last[s[i]],times[i]);\n      int sum=0;\n      for(int i=1;i<=n;i++){\n          arrive[i]=sum;\n          if(last[i]>sum)sum=last[i];\n          sum+=dist[i];\n          //printf(\"%lld\\n\",arrive[i]);\n      }\n      for(int i=1;i<=m;i++)tot[t[i]]++;\n      while(k--){\n          int cnt=0,pos=NR;\n          for(int i=2;i<=n;i++){\n              if(dist[i-1]==0)continue;\n              //i-1~i \u6c2e\u6c14\u52a0\u901f\n              int lcy=0;\n              for(int j=i;j<=n;j++){\n                  lcy+=tot[j];\n                  if(arrive[j]<=last[j])break;\n              }\n              if(lcy>cnt){\n                  pos=i;\n                  cnt=lcy;\n              }\n          }\n          dist[pos-1]--;\n          for(int i=pos;i<=n;i++){\n              arrive[i]--;\n              if(arrive[i]<last[i])break;\n          }\n      }\n      int ans=0;\n      for(int i=1;i<=m;i++)ans+=arrive[t[i]]-times[i];\n      cout<<ans;\n      return 0;\n}\n\n\n\n\n\n\n\n\n```\n\n",
        "postTime": 1600505462,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1315)\n\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u8fd9\u9053\u9898$n$\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u8003\u8651$O(nk)$\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5165\u52a0\u901f\u5668\uff0c\u6bcf\u6b21\u90fd\u9009\u53d6\u6700\u4f18\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u66f4\u65b0\u4fe1\u606f\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u627e\u8fd9\u4e2a\u6700\u4f18\u7684\u4f4d\u7f6e\uff0c\u53d1\u73b0\u53ea\u8981\u662f\u4eba\u7b49\u8f66\u7684\u60c5\u51b5\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u52a0\u901f\u5668\uff0c\u6211\u4eec\u4ece\u7528\u52a0\u901f\u5668\u7684\u70b9\u5f00\u59cb\u627e\u4eba\u7b49\u8f66\u7684\u8fde\u7eed\u533a\u95f4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u9012\u63a8\u5b8c\u6210\u3002\u627e\u5230\u4e86\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u540e\uff0c\u53d1\u73b0\u8fd9\u6bb5\u533a\u95f4\u80fd\u8ba9\u7b54\u6848\u51cf\u5c11\u533a\u95f4\u5185\u4e58\u5ba2\u7684\u6570\u91cf\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u4e58\u5ba2\u6620\u5c04\u5230\u533a\u95f4\u4e2d\u6c42\u524d\u7f00\u548c\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a$O(nk)$\u7684\u8d2a\u5fc3\u505a\u6cd5\uff0c\u76ee\u6d4b\u80fd\u5361\u8fc7\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define int long long\nusing namespace std;\nconst int MAXN = 100005;\nint read()\n{\n    int num=0,flag=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')if(c=='-')flag=-1;\n    while(c>='0'&&c<='9')num=(num<<3)+(num<<1)+(c^48),c=getchar();\n    return num*flag;\n}\nint n,m,k,ans,d[MAXN],last[MAXN],rang[MAXN],tim[MAXN],cnt[MAXN];\nstruct node\n{\n    int t,b,e;\n}a[MAXN];\nsigned main()\n{\n    n=read();m=read();k=read();\n    for(int i=1;i<n;i++)\n        d[i]=read();\n    for(int i=1;i<=m;i++)\n    {\n        a[i].t=read(),a[i].b=read(),a[i].e=read();\n        last[a[i].b]=max(last[a[i].b],a[i].t);\n        cnt[a[i].e]++;\n    }\n    for(int i=1;i<=n;i++)\n        cnt[i]+=cnt[i-1];\n    for(int i=1;i<n;i++)\n        tim[i+1]=max(tim[i],last[i])+d[i];\n    for(int i=1;i<=m;i++)\n        ans+=tim[a[i].e]-a[i].t;\n    while(k--)\n    {\n        int Max=0,loc;rang[n-1]=n;\n        for(int i=n-2;i>=1;i--)\n            if(tim[i+1]>last[i+1]) rang[i]=rang[i+1];\n            else rang[i]=i+1;\n        for(int i=1;i<n;i++)\n            if(Max<cnt[rang[i]]-cnt[i] && d[i])\n                Max=cnt[rang[i]]-cnt[i],loc=i;\n        if(!Max) break;\n        d[loc]--;\n        ans-=Max;\n        tim[1]=0;\n        for(int i=1;i<n;i++)\n            tim[i+1]=max(tim[i],last[i])+d[i];\n    }\n    printf(\"%lld\\n\",ans);\n}\n\n```\n\n",
        "postTime": 1568363338,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u849f\u84bb\u6253\u51fa\u6765\u7684\u9898\u89e3\uff0c\u4e00\u773c\u770b\u51fa\u6765\u53ef\u4ee5\u8d2a\u5fc3\uff08\u770b\u4e86\u51e0\u4e2adalao\u624d\u77e5\u9053\u600e\u4e48\u8d2a\u5fc3\u6cd5\uff0c\u96be\u53d7\uff09\uff1b\u592a\u4e45\u6ca1\u6253\uff0c\u5199\u5f97\u4e0d\u8be6\u4e4b\u5904\u8fd8\u671b\u89c1\u8c05\n\n\u4e00\u5f00\u59cb\u5927\u5bb6\u53ef\u80fd\u90fd\u4f1a\u60f3\u5230\u7684\u662f\u3010\u627e\u54ea\u4e00\u6bb5\u7528\u4e86\u52a0\u901f\u5668\u4e4b\u540e\u53d7\u76ca\u7684\u4eba\u6700\u591a\uff0c\u5c31\u5728\u90a3\u4e00\u6bb5\u7528\u3011\uff0c\u5176\u5b9e\u4e0d\u7136\uff0c\u6709\u53ef\u80fd\u4f60\u8fd9\u4e00\u6bb5\u51e0\u4e2a\u4eba\u53d7\u76ca\uff0c\u4f46\u4e0b\u51e0\u4e2a\u7ad9\u90fd\u5b58\u5728\u516c\u4ea4\u8f66\u505c\u8f66\u7136\u540e\u5728\u90a3\u91cc\u7b49\u4eba\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5c31\u4e0d\u4e00\u5b9a\u6700\u4f18\u4e86\uff0c\u90a3\u4e48\u600e\u4e48\u8d2a\u5fc3\u6cd5\u5462\uff1f\n\n\u9898\u89e3\uff1a\u6211\u4eec\u53ef\u4ee5\u5148\u5904\u7406\u51fa\u6bcf\u4e2a\u7ad9\u7684\u5230\u7ad9\u4eba\u6700\u8fdf\u5230\u8fbe\u65f6\u95f4\uff0c\u5373\u8f66\u5b50\u4e0d\u4f1a\u6bd4\u8fd9\u65e9\u5230\uff0c\u5426\u5219\u5c31\u4f1a\u7b49\uff08\u601d\u8003\u4e00\u4e0b\uff09\uff0c\u7136\u540e\u6211\u4eec\u518d\u5904\u7406\u51fa\u6bcf\u4e2a\u7ad9\u6709\u591a\u5c11\u4e2a\u51fa\u7ad9\u4eba\uff0c\u4e8e\u662f\uff08\u6211\u7528\u4e86\u4e00\u4e2a\u8fc7\u7a0b\uff09\u6211\u4eec\u4fbf\u53ef\u4ee5\u7b80\u5355\u5730\u6bcf\u6b21\u5faa\u73af\u4e00\u904d\uff0c\u4ece\u800c\u5f97\u51fa\u6bcf\u6b21\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u591a\u5c11\u4e2a\u4eba\uff0cd[?]=d[?]-1\uff0ck\u4e5f\u51cf1\uff0c\u4e0b\u6b21\u7ee7\u7eed\u6267\u884c\u8be5\u6b65\u9aa4\u4e4b\u524d\uff0c\u53c8\u628abus\u5230\u7ad9\u7684\u65f6\u95f4\u66f4\u65b0\u4e00\u4e0b\uff0c~\uff0c\u76f4\u5230k\u4e3a0\uff0c\u8ba1\u7b97\u7b54\u6848\u4e0d\u5728\u8bdd\u4e0b\u3002\n\n\u591a\u4f59\u8bdd\u8bf7\u8bfb\u8005\u81ea\u52a8\u7701\u7565\uff0c\u4e0b\u9762\u8bf7\u6b23\u8d4f\u6211\u7684code:\uff08\u6709\u8bf4\u660e\uff09\n\n\n```cpp\nprogram bus;\nconst maxn=10001;\nvar\n    down,ans,late,t,a,b,p,d:array[0..maxn]of longint;\n//down\u8868\u793a\u8be5\u7ad9\u4e0b\u8f66\u7684\u4eba\u6570//ans\u8868\u793a\u5f53\u524d\u6700\u65b0\u7684\u6c7d\u8f66\u5230\u7ad9\u65f6\u95f4//late\u8868\u793a\u8be5\u7ad9\u6700\u8fdf\u6765\u7684\u4eba//t,a,b,d\u4e0d\u505a\u89e3\u91ca\uff0cp\u8868\u793a\u6bcf\u6b21\u6700\u591a\u80fd\u5f71\u54cd\u5230\u7684\u4eba\n    n,m,k,i,j,l,r,daan:longint;\nfunction max(x,y:longint):longint;\nbegin\n      if x>y then exit(x) else exit(y);\nend;\nprocedure reduce(l,r:longint);\nvar\n    i,j,s:longint;\nbegin\n      fillchar(p,sizeof(p),0);\n      for i:=l to r do\n      ans[i+1]:=max(ans[i],late[i])+d[i];\n      i:=1;s:=0;\n      while i<n do\n      begin\n           if d[i]>0 then\n           begin\n                j:=i;\n                p[j]:=down[i+1];//\u521d\u59cb\u8be5p[j]\u503c\n                while ans[i+1]>late[i+1] do//\u6ee1\u8db3\u4e0d\u4f1a\u8f66\u7b49\u4eba\n                begin\n                      inc(i);\n                      p[j]:=p[j]+down[i+1];//\u7d2f\u52a0\u4eba\u6570\n                end;\n                if p[j]>p[s] then s:=j;//s\u8bb0\u5f55\u8981\u7528\u52a0\u901f\u5668\u7684\u5730\u65b9\n           end;\n           inc(i);\n      end;\n      if p[s]=0 then begin k:=0; exit; end;\n      dec(d[s]);dec(k);\n      l:=s;r:=n-1;//\u522b\u5fd8\u4e86\u8fd9\u91cc\uff0cfaster\nend;\nbegin\n      //assign(input,'bus.in');reset(input);\n      read(n,m,k);\n      for i:=1 to n-1 do\n      read(d[i]);\n      for i:=1 to m do\n      begin\n            readln(t[i],a[i],b[i]);\n            inc(down[b[i]]);//\u4e0b\u8f66\u4eba\u6570\u52a01\n            late[a[i]]:=max(late[a[i]],t[i]);//\u627e\u5230\u6700\u8fdf\u65f6\u95f4\n      end;\n      l:=1;r:=n-1;\n      while k>0 do\n      reduce(l,r);//l,r\u4e3a\u9700\u8981\u53d8\u66f4\u7684\u533a\u95f4\uff0c\u7406\u89e3\u4e00\u4e0b\u5c31\u597d\n      for i:=1 to n-1 do\n      ans[i+1]:=max(ans[i],late[i])+d[i];//\u4ee5\u9632\u4e07\u4e00\u518d\u7b97\u4e00\u6b21\n      for i:=1 to m do\n      inc(daan,ans[b[i]]-t[i]);//\u51c6\u5907\u8f93\u51fa\uff01~\n      write(daan);//\u8f93\u51fa\uff01\uff01\uff01~\nend.\n\n```",
        "postTime": 1508243056,
        "uid": 38313,
        "name": "chenkaixing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u6211\u7adf\u7136\u4ee5\u4e3a\u662fdp\uff1f\uff1f\uff1f\n\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u53ef\u4ee5\u5355\u72ec\u5730\u770b\u52a0\u901f\u5668\u8be5\u653e\u5728\u54ea\u4e2a\u5730\u65b9\uff0c\u53d1\u6325\u6700\u5927\u7684\u4f5c\u7528\uff0c\u6240\u4ee5\u9996\u9009\u5c31\u662f\u8d2a\u5fc3\u4e86\u2026\u2026\n\n\u627e\u52a0\u901f\u5668\u653e\u7684\u4f4d\u7f6e\uff0c\u63a5\u7740\u518d\u66f4\u65b0\u5230\u8fbe\u7684\u65f6\u95f4\u5c31\u597d\u4e86\u2026\u2026\n\n2333333\u2026\u2026\n\n```cpp\n#include<cstdio>\n#define maxn 1010\n#define maxm 10010\nusing namespace std;\nint n,m,k,ans,maxp,wh,out,t,a,b,d[maxn],sd[maxn],up[maxn],down[maxn],f[maxn];\n```\n/\\*\nd\u5728\u9898\u76ee\u4e2d\u6709\u2026\u2026\n\nsd[i]\u8868\u793a\u8f66\u5230\u7b2ci\u4e2a\u7ad9\u7684\u65f6\u95f4\n\nup[i]\u8868\u793a\u7b2ci\u7ad9\u6700\u540e\u4e00\u4e2a\u4eba\u5230\u7684\u65f6\u95f4\n\ndown[i]\u8868\u793a\u7b2ci\u7ad9\u4e0b\u8f66\u7684\u4eba\u6570\n\nf[i]\u8868\u793a\u5728\u7b2ci\u6761\u8def\u4f7f\u7528\u52a0\u901f\u5668\u6700\u591a\u51cf\u5c11\u7684\u65f6\u95f4\n\n\\*/\n```cpp\nchar cc;\nint read()\n{\n    out=0,cc=getchar();\n    while(cc<48||cc>57){cc=getchar();}\n    while(cc>=48&&cc<=57)\n    {\n        out=out*10+cc-48,\n        cc=getchar();\n    }\n    return out;\n}\nint max(int a,int b)\n{\n    if(a>b){return a;}\n    else{return b;}\n}\nint main()\n{\n    n=read(),m=read(),k=read();\n    for(int i=1;i<=n-1;i++){d[i]=read();}\n    for(int i=1;i<=m;i++)\n    {\n        t=read(),a=read(),b=read(),\n        up[a]=max(up[a],t),down[b]++,\n        ans=ans-t;//\u51cf\u53bb\u6bcf\u4e2a\u4eba\u4e0a\u8f66\u7684\u65f6\u95f4\uff0c\u540e\u9762\u8ba1\u7b97\u7b80\u4fbf\u4e00\u70b9\n    }\n    for(int i=1;i<=n;i++){sd[i]=max(sd[i-1],up[i-1])+d[i-1];}//\u5904\u7406\u51fa\u7b2ci\u7ad9\u5230\u8fbe\u7684\u65f6\u95f4\n    while(k--)\n    {\n        for(int i=n;i>=2;i--)//\u8fd9\u91cc\u7528\u5012\u7740\u52a0\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u7701\u65f6\u95f4\u2026\u2026\n        {\n            if(d[i-1]==0){f[i-1]=0;}\n            else\n            {\n                f[i-1]=down[i];\n                if(sd[i]>up[i]){f[i-1]=f[i-1]+f[i];}\n            }\n        }\n        maxp=0,wh=0;\n        for(int i=1;i<=n-1;i++)\n        {\n            if(f[i]>maxp)\n            {\n                maxp=f[i],//\u627e\u51fa\u6700\u591a\u51cf\u5c11\u7684\u65f6\u95f4\n                wh=i;//\u627e\u51fa\u4f4d\u7f6e\n            }\n        }\n        if(maxp==0){break;}//\u5982\u679c\u6ca1\u6709\u52a0\u901f\u90a3\u5c31\u662f\u5df2\u7ecf\u4e0d\u7528\u52a0\u901f\u5668\u4e86\n        d[wh]--;\n        for(int i=wh+1;i<=n;i++){sd[i]=max(sd[i-1],up[i-1])+d[i-1];}//\u8fd8\u8981\u5904\u7406\u4e00\u904d\u7b2ci\u7ad9\u5230\u8fbe\u7684\u65f6\u95f4\n    }\n    for(int i=1;i<=n;i++){ans=ans+sd[i]*down[i];}//\u4e4b\u524d\u5df2\u7ecf\u51cf\u8fc7\u5230\u8fbe\u65f6\u95f4\u4e86\uff0c\u6240\u4ee5\u53ea\u8981\u5408\u5728\u4e00\u8d77\u8ba1\u7b97\u5c31\u597d\u4e86\u2026\u2026\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1492306643,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\n\n\n\n```cpp\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define LL long long\n#define MAXM 10037\n#define MAXN 1037\nusing namespace std;\nint n;\nint m;\nint t;\nint s;\nint e;\nint k;\nint ID;\nint ans;\nint val;\nint times;\nint up[MAXM];\nint num[MAXN];\nint dist[MAXN];\nint down[MAXM];\nint arrive[MAXN];\ninline void solve()\n{\n```\n/\\*\n\u5176\u5b9e\u6211\u89c9\u5f97\u4f60\u53ef\u4ee5\u5148\u628a\u8fd9\u4e2a\u9898\u62bd\u8c61\u4e00\u4e0b\n\n\u62bd\u8c61\u6210\u4ec0\u4e48\u5462\n\n|\n|*************************************************************\n\n|\n\u6709\u4e00\u8f86\u8f66 \u8981\u4ece\u8d77\u70b9\u5f00\u5230\u7ec8\u70b9 \u5bf9\u4e8e\u8fc7\u7a0b\u4e2d\u7684\u70b9 \u67d0\u4e9b\u70b9\u5b58\u5728\u4e00\u4e9b\u9650\u5236\uff0c\u8fd9\u4e9b\u9650\u5236\u662f\u4e0d\u80fd\u6539\u53d8\u7684\n\n\u90a3\u4e48\u662f\u90a3\u4e9b\u9650\u5236\u5462\n\n|\n|****************************************************************\n\n|\n\u5c31\u662f\u4f60\u4ece\u67d0\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u6700\u65e9\u65f6\u95f4\n\n\u8fd9\u4e2a\u6700\u65e9\u7684\u65f6\u95f4\u5c31\u662f\u5728\u8fd9\u4e2a\u70b9\u6700\u665a\u4e0a\u8f66\u7684\u4eba\u7684\u65f6\u95f4\n\n\u5bf9\u7684\u5bf9\u7684 \u5c31\u662f\u8fd9\u6837\n\n|\n|******************************************************************\n\n|\n\u73b0\u5728\u4f60\u6709\u4e00\u4e9b\u52a0\u901f\u5668 \u52a0\u901f\u5668\u7528\u5904\u5c31\u662f\u90a3\u6837\uff08\u5982\u9898\uff09\uff1b\n\n\u7136\u540e\u5c31\u6ca1\u4e86 \u8fd9\u6837\u662f\u4e0d\u662f\u66f4\u597d\u7406\u89e3\u4e00\u4e9b\u5462 \u5e94\u8be5\u662f\u5427 \u5bf9\u7684\u5bf9\u7684\n\n\\*/\n\n```cpp\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for (int i=1;i<n;i++)\n        scanf(\"%d\",&dist[i]); \n//   \u6bcf\u4e00\u6761\u8def\u7684\u7ecf\u8fc7\u65f6\u95f4 \n    for(int i=1;i<=m;i++) {\n        scanf(\"%d%d%d\",&t,&s,&e);\n        down[e]++; ans-=t; \n//       ans\u8bb0\u5f55\u6240\u6709\u4eba\u7684\u603b\u5171\u65c5\u884c\u65f6\u95f4\n//       \u73b0\u5728\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u51cf\u53bb\u6bcf\u4e00\u4e2a\u4eba\u4ece\u7ad9\u724c\u7684\u4e0a\u8f66\u65f6\u95f4\u6ca1\u5173\u7cfb\n//       \u7b49\u5230\u4e86\u6700\u540e\u5c31\u61c2\u4e86\u3002 \n///    down[i]=j \u8868\u793a\u5728i\u666f\u70b9\u4e0b\u8f66\u7684\u4eba\u7684\u6570\u91cf             \n        up[s]=max(up[s],t);\n///    up[i]=j \u8868\u793a\u5728i\u666f\u70b9\u4e0a\u8f66\u7684\u4eba\u7684\u6570\u91cf  \n    }\n    while(k--) {\n//      \u5b89\u6392\u628a\u6bcf\u4e00\u4e2a\u52a0\u901f\u5668\u653e\u5728\u54ea \u8fd9\u91cc\u4e0d\u7edf\u8ba1\u7b54\u6848\n//    \u53ea\u662f\u8003\u8651\u5e94\u8be5\u5c06\u54ea\u4e00\u6761\u8def\u7684\u65f6\u95f4\u51cf\u53bb1\u800c\u5df2 \n        memset(num,0,sizeof(num));  \n        for (int i=2;i<=n;i++)\n            arrive[i]=max(arrive[i-1],up[i-1])+dist[i-1];\n// arrive[i]=j \u8bb0\u5f55\u516c\u4ea4\u8f66\u5230\u8fbei\u666f\u70b9\u7684\u65f6\u95f4\u4e3aj\n//  \u5230\u8fbe\u8be5\u666f\u70b9\u7684\u65f6\u95f4\u7b49\u4e8e\u5230\u8fbe\u8be5\u666f\u70b9\u524d\u4e00\u4e2a\u666f\u70b9\u7684\u65f6\u95f4\u52a0\u4e0a\u5230\u8fbe\u8be5\u666f\u70b9\u7684\u8def\u7684\u65f6\u95f4\n//  \u6216\u8005\u662f\u5230\u8fbe\u8be5\u666f\u70b9\u7684\u524d\u4e00\u4e2a\u666f\u70b9\u7684\u6700\u665a\u4e0a\u8f66\u7684\u4eba\u7684\u65f6\u95f4\u52a0\u4e0a\u5230\u8fbe\u8be5\u666f\u70b9\u7684\u8def\u7684\u65f6\u95f4 \n        for (int i=n;i>1;i--) {\n            if(dist[i-1]) {\n//  \u56e0\u4e3a\u8981\u6c42\u518d\u67d0\u4e00\u6761\u8def\u4f7f\u7528\u52a0\u901f\u5668\u540e\u7ecf\u8fc7\u8be5\u8def\u7684\u65f6\u95f4>=0 so\u3002\u3002\u3002 \n                num[i-1]=down[i];\n// num[i]=j \u8bb0\u5f55\u5982\u679c\u5728i-1\u8fd9\u6761\u8def\u4e0a\u4f7f\u7528\u52a0\u901f\u5668\u7684\u8bdd \u6536\u76ca\u7684\u4eba\u7684\u6570\u91cf \n                if(arrive[i]>up[i])\n                    num[i-1]+=num[i];\n// \u6362\u53e5\u8bdd\u8bf4 \u5982\u679c\u5230\u8fbe\u8be5\u666f\u70b9\u7684\u65f6\u95f4\u5927\u4e8e\u5728\u8be5\u666f\u70b9\u4e0a\u8f66\u7684\u6700\u665a\u7684\u4eba\u65f6\u95f4\u7684\u8bdd\n// \u90a3\u4e48\u5728\u8be5\u666f\u70b9\u7684\u524d\u4e00\u6761\u9053\u8def\u4f7f\u7528\u52a0\u901f\u5668\u662f\u53ef\u4ee5\u7684 \n            } else num[i-1]=0;\n// \u4e0d\u7136\u7684\u8bdd\u4f7f\u7528\u7684\u6beb\u65e0\u610f\u4e49 \u56e0\u4e3a\u5c31\u7b97\u6c7d\u8f66\u5230\u4e86\u8be5\u666f\u70b9\uff0c\u5047\u8bbe\u6c7d\u8f66\u4f7f\u7528\u52a0\u901f\u5668\u540e\u7b2c4\u5206\u949f\n// \u5230\u8fbe\u8be5\u666f\u70b9  \u7136\u800c\u8be5\u666f\u70b9\u6700\u665a\u4e0a\u8f66\u7684\u4eba\u4e3a6\u5206  \u90a3\u4e48\u4f60\u4f7f\u7528\u52a0\u901f\u5668\u7b49\u4e8e\u767d\u8d39\n// \u56e0\u4e3a\u4f60\u5fc5\u987b\u7b49\u5f85\u6700\u540e\u5728\u8be5\u666f\u70b9\u4e0a\u8f66\u7684\u4eba\u4e0a\u8f66\u4ee5\u540e\u624d\u80fd\u51fa\u53d1 \n        }\n        val=0; times=0; ID=-1;\n// \u6bcf\u4e00\u6b21\u8981\u8d2a\u5fc3\u7684\u9009\u62e9\u80fd\u8ba9\u6700\u591a\u4eba\u6536\u76ca\u7684\u9053\u8def\u4f7f\u7528\u52a0\u901f\u5668 \n        for(int i=1;i<=n-1;i++)\n            if (val<num[i]) { val=num[i]; times=ID=i; }\n        if (ID==-1) break; else dist[ID]--;\n    }\n    for(int i=2;i<=n;i++)\n//  \u8fd9\u662f\u6700\u540e\u4f60\u628a\u52a0\u901f\u5668\u90fd\u7528\u5728\u4e86\u4fee\u6539dist\u540e\u51c6\u5907\u7edf\u8ba1\u7b54\u6848\u4e86 \n        arrive[i]=max(arrive[i-1],up[i-1])+dist[i-1];\n    for(int i=1;i<=n;i++)\n        ans+=arrive[i]*down[i];\n// \u7b54\u6848\u5c31\u662f\u8f66\u5230\u8fbe\u67d0\u4e00\u4e2a\u666f\u70b9\u7684\u65f6\u95f4\u4e58\u4ee5\u5728\u8be5\u70b9\u4e0b\u8f66\u7684\u4eba\u7684\u6570\u91cf\n// \u73b0\u5728\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cbans\u8981\u51cf\u53bb\u6bcf\u4e00\u4e2a\u4eba\u7684\u4e0a\u8f66\u65f6\u95f4\u4e86\u5427 \u563f\u563f \n    printf(\"%d\\n\",ans); return ;\n}\nint main()\n{\n    freopen(\"bus.in\",\"r\",stdin);\n    freopen(\"bus.ans\",\"w\",stdout);\n    solve();\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1478421398,
        "uid": 23563,
        "name": "Angel_wing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    },
    {
        "content": "\u597d\u7684\u8fd9\u9053\u9898\u7684\u601d\u8def\u662f\u5148\u6c42\u51fa\u6ca1\u6709\u52a0\u901f\u5668\u7684\u603b\u65f6\u95f4\uff0c\u7136\u540e\u4e0d\u505c\u5730\u53bb\u7528\u9012\u63a8\u627ebest\u603b\u65f6\u95f4\u4f18\u5316\uff0c\n\n\u76f4\u5230\u52a0\u901f\u5668\u7528\u5b8c\u6216\u8005\u518d\u4f7f\u7528\u52a0\u901f\u5668\u5e76\u6ca1\u6709\u4f5c\u7528\u4e86\uff0c\u5c31\u505c\u6b62\uff0c\u8f93\u51fa\u7b54\u6848\n\n\u6ce8\u610f\u4f18\u5316\uff0c\u4e0d\u7136\u53ef\u80fdTLE\uff1a\u6bd4\u5982\u4ee3\u7801\u4e2d\u7528\u4e86person\u6570\u7ec4\u4f5c\u524d\u7f00\u548c\n\n\n^-^  AC\u4ee3\u7801\uff1a\n\n\n\n\n\n\n    \n    \n        \n    \n\n    \n        \n    \n\n\n     \n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\n#define MAXN (1000+5)\n#define MAXM (10000+5)\n#define INF (1LL << 62)\nlong long n, m, k;\nlong long d[MAXN], t[MAXM], a[MAXM], b[MAXM];\nlong long person[MAXN], last_t[MAXN], arrive[MAXN], tail[MAXN];\nlong long ans;\nlong long best_no, best_k, best_to, best_person;\nvoid init(){    \n    scanf(\"%lld%lld%lld\", &n, &m, &k);\n    for(int i = 1; i < n; i++) scanf(\"%lld\", &d[i]);\n    for(int i = 1; i <= m; i++){\n        scanf(\"%lld%lld%lld\", &t[i], &a[i], &b[i]);\n        person[b[i]]++;\n        last_t[a[i]] = max(t[i], last_t[a[i]]);\n    }\n//    for(int i = 1; i <= m; i++) printf(\"last_t[%d] = %d\\n\", i, last_t[i]);\n    for(int i = 2; i <= n; i++)\n        arrive[i] = max(arrive[i-1], last_t[i-1]) + d[i-1];\n    for(int i = 1; i <= m; i++)\n        ans += arrive[b[i]] - t[i];\n    for(int i = 2; i <= n; i++)\n        person[i] += person[i-1];\n}\nint find_best(){\n    long long now_k = INF, now_to = n;\n    best_k = INF; best_person = 0;\n    for(int i = n - 1; i >= 1; i--){\n        if(arrive[i+1] > last_t[i+1]) now_k = min(now_k, arrive[i+1] - last_t[i+1]);\n        else{\n            now_k = arrive[i+1];\n            now_to = i+1;\n        }\n        if(d[i] && person[now_to] - person[i] > best_person){\n            best_person = person[now_to] - person[i];\n            best_no = i;\n            best_to = now_to;\n            best_k = min(k, min(d[i], now_k));\n        }\n    }\n    return best_k;    \n}\nvoid use_k(){\n    for(int i = best_no+1; i <= best_to; i++) arrive[i] -= best_k;\n    k -= best_k;\n    d[best_no] -= best_k;\n    ans -= best_person * best_k;    \n}\nint main(){\n    init();\n    while(find_best()) use_k();\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n\n```",
        "postTime": 1467964716,
        "uid": 8925,
        "name": "miaowey",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1315 \u3010\u89c2\u5149\u516c\u4ea4\u3011"
    }
]