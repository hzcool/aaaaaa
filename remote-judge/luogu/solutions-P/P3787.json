[
    {
        "content": "## [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3787)\n\n### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u68f5\u8282\u70b9\u4e3a $n$ \u7684\u6811\uff0c$m$ \u6b21\u64cd\u4f5c\uff0c\u5176\u4e2d\u8fb9\u6743\u4e3a $c$ \uff0c$c $ \u4e3a\u4ece $ u $\u70b9\u5230 $v$ \u70b9\u6240\u6539\u53d8\u503c\u5f97\u500d\u6570\u3002\n\n1. \u6539\u53d8 $x$ \u53ca\u5176\u5b50\u6811\u7684\u503c\u3002\n\n2. \u6c42 $x$ \u70b9\u7684\u503c\u3002\n\n\u9898\u5916\u8bdd: \u6570\u5b66\u8bfe\u7684\u7075\u611f\u7a81\u73b0\u3002$QwQ$\n\n---\n\n### \u5148\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff1a\n\n- \u5148\u8003\u8651\u8fd9\u6761\u6811\u662f\u4e00\u6761\u94fe:\n\n\u90a3\u5c31\u53d8\u6210\u4e86\u4e00\u6bb5\u5e8f\u5217\uff0c\u73b0\u5728\u4e0d\u5c31\u662f\u533a\u95f4\u66f4\u6539\u548c\u5355\u70b9\u67e5\u8be2\u561b\uff0c\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u561b\uff01\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u518d\u56de\u5230\u6811\u4e0a\uff0c**\u6309\u7167\u65f6\u95f4\u6233\u6765\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\uff0c\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002**\n\n\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u533a\u95f4\u66f4\u6539\u7684\u503c\u4e0d\u4e00\u6837\u3002\n\n- \u518d\u8003\u8651\u53ea\u5728\u6839\u8282\u70b9\u4e0a\u66f4\u6539:\n\n\u53ea\u9700\u8981\u5c06\u6bcf\u4e2a\u70b9\u52a0\u548c\u518d\u4e58\u4e0a\u524d\u7f00\u79ef\u3002\n\n\u90a3\u518d\u8003\u8651\u4e00\u822c\u60c5\u51b5\uff0c**\u6211\u4eec\u53ea\u9700\u8981\u5c06\u66f4\u6539\u7684\u503c\u9664\u4ee5\u8be5\u8282\u70b9\u7684\u524d\u7f00\u79ef\uff0c\u7136\u540e\u67e5\u8be2\u65f6\u518d\u4e58\u4ee5\u8be5\u8282\u70b9\u7684\u524d\u7f00\u79ef\u5c31\u597d\u3002**\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u533a\u95f4\u66f4\u6539\u7684\u503c\u4e0d\u4e00\u6837\u7684\u95ee\u9898\u3002\n\n------\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u5927\u81f4\u7684\u96cf\u5f62\u3002\n\n$Dfs$ \u5c06\u6811\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5e8f\u5217\uff0c\u627e\u5230\u6bcf\u6b21\u4fee\u6539\u7684\u533a\u95f4 $(dfn_x$ ~ $siz_x)$ \uff0c\u5e76\u6c42\u51fa $x$ \u7684\u524d\u7f00\u79ef\n\u3002\n\n\u7136\u540e\u53d1\u73b0...\u4ed6\u70b8\u4e86\u3002\n \n**\u5173\u4e8e\u780d\u6811\uff1a**\n\n\u6211\u4eec\u53d1\u73b0\u8fb9\u6743\u4e3a $0$ \u7684\u70b9\u4f1a\u5f71\u54cd\u4e0b\u9762\u7684\u8282\u70b9\u7684\u524d\u7f00\u79ef\u90fd\u4e3a $0$\uff0c\u66f4\u6539\u65f6\u4f1a\u51fa\u73b0\u9664\u4ee5 $0$ \u7684\u60c5\u51b5\u3002\n\n\u5982\u679c\u8fb9\u6743\u4e3a $0 $ \u7684\u8bdd\uff0c\u5c31\u4e0d\u4f1a\u5bf9\u4e0b\u9762\u7684\u8282\u70b9\u4ea7\u751f\u5f71\u54cd\uff0c\u53ef\u4ee5\u770b\u6210\u4e24\u68f5\u6811\u4e86\uff0c\u90a3\u4e48\u5c31\u780d\u6389\u8fd9\u4e2a\u8fb9\u3002\n\u00b7\n```cpp\nvoid dfs(int x,int fa,double Mul)\n{\n\tdfn[x]=siz[x]=++tim;\t\t\t\t//\u627e\u51fa\u4fee\u6539\u7684\u533a\u95f4\n\tmul[x]=Mul;\n\tv[x]=1;\n\tfor(int i=fir[x];i;i=nex[i]) {\n\t\tint p=poi[i];\n\t\tif(v[p]||p==fa)\tcontinue;\n\t\tif(!val[i]) {\n\t\t\trot[++rot[0]]=p;\t\t\t//\u780d\u6811\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(p,x,Mul*val[i]);\n\t\tsiz[x]=siz[p];\n\t}\n}\n```\n\n\u5269\u4e0b\u7684\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u90e8\u5206\u4e86\uff0c\u6ca1\u5565\u5b50\u597d\u8bf4\u7684\u3002\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define N 200010\nusing namespace std;\nint re() {\n\tint p=0; char i=getchar();\n\twhile(i<'0'||i>'9')\ti=getchar();\n\twhile(i>='0'&&i<='9')\tp=p*10+i-'0',i=getchar();\n\treturn p;\n}\nint n,m,sum,tim;\nint fir[N],nex[N],poi[N];\nint rot[N],dfn[N],siz[N];\ndouble val[N],mul[N];\nbool v[N];\nstruct zy {\n\tint l,r;\n\tdouble sum;\n\tdouble lazy;\n}e[N<<1];\nvoid ins(int x,int y,double z) {\n\tnex[++sum]=fir[x];\n\tpoi[sum]=y;\n\tval[sum]=z;\n\tfir[x]=sum;\n}\nvoid dfs(int x,int fa,double Mul)\n{\n\tdfn[x]=siz[x]=++tim;\n\tmul[x]=Mul; v[x]=1;\n\tfor(int i=fir[x];i;i=nex[i]) {\n\t\tint p=poi[i];\n\t\tif(v[p]||p==fa)\tcontinue;\n\t\tif(!val[i]) {\n\t\t\trot[++rot[0]]=p;\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(p,x,Mul*val[i]);\n\t\tsiz[x]=siz[p];\n\t}\n}\nvoid Build(int p,int l,int r) {\n\te[p].l=l; e[p].r=r;\n\tif(l==r)\treturn;\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid);\n\tBuild(p<<1|1,mid+1,r);\n}\nvoid Pushup(int p) {\n\te[p].sum=e[p<<1].sum+e[p<<1|1].sum;\n}\nvoid Pushdown(int p)\n{\n\tdouble\t Lazy=e[p].lazy;\n\te[p<<1].lazy+=Lazy;\n\te[p<<1|1].lazy+=Lazy;\n\te[p<<1].sum+=(e[p<<1].r-e[p<<1].l+1)*Lazy;\n\te[p<<1|1].sum+=(e[p<<1|1].r-e[p<<1|1].l+1)*Lazy;\n\te[p].lazy=0;\n}\nvoid Update(int p,int l,int r,double d) {\n\tif(l<=e[p].l&&r>=e[p].r) {\n\t\te[p].sum+=(e[p].r-e[p].l+1)*d;\n\t\te[p].lazy+=d;\n\t\treturn ;\n\t}\n\tif(e[p].lazy)\tPushdown(p);\n\tint mid=(e[p].l+e[p].r)>>1;\n\tif(l<=mid)\tUpdate(p<<1,l,r,d);\n\tif(r>mid)\tUpdate(p<<1|1,l,r,d);\n\tPushup(p);\n}\ndouble Query(int p,int pos)\n{\n\tif(e[p].l==e[p].r)\n\t\treturn e[p].sum;\n\tif(e[p].lazy)\tPushdown(p);\n\tint mid=(e[p].l+e[p].r)>>1;\n\tdouble ans=0;\n\tif(pos<=mid) ans=Query(p<<1,pos);\n\telse  ans=Query(p<<1|1,pos);\n\treturn ans;\n}\nint main()\n{\n\tn=re(); \n\tfor(int i=1;i<n;i++) {\n\t\tint a,b; double c;\n\t\ta=re(); b=re(); scanf(\"%lf\",&c);\n\t\tins(a,b,c); ins(b,a,c);\n\t}\n\trot[++rot[0]]=1;\n\tfor(int i=1;i<=rot[0];i++) \n\t\tdfs(rot[i],0,1);\n\tm=re();\n\tBuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint op=re();\n\t\tif(op==1) {\n\t\t\tint x=re();\n\t\t\tdouble k; scanf(\"%lf\",&k);\n\t\t\tUpdate(1,dfn[x],siz[x],k/mul[x]);\n\t\t}\n\t\telse {\n\t\t\tint x=re();\n\t\t\tprintf(\"%.8lf\\n\\n\",Query(1,dfn[x])*mul[x]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n**\u5982\u6709\u4e0d\u59a5\uff0c\u8bf7\u4e0d\u8981\u541d\u556c\u60a8\u7684\u8bc4\u8bba\uff01**\n\n**~~\u8bdd\u8bf4\uff0c\u56fe\u7247\u771f\u7684\u633a\u4e11\u7684\uff01~~**\n",
        "postTime": 1619527543,
        "uid": 233816,
        "name": "_zy_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3787)  \n### \u5947\u602a\u7684\u7ebf\u6bb5\u6811\u9898\uff1f  \n\u53cd\u6b63\u6211\u662f\u770b\u4e86\u4e00\u4e2a\u5c0f\u65f6\u7684\u9898\u89e3\u624d\u60f3\u660e\u767d\u600e\u4e48\u5199\uff08  \n  \n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u7684\u601d\u8def\uff1a\u533a\u95f4\u4fee\u6539\uff1f\u5355\u70b9\u67e5\u8be2\uff1f\u8fd9\u597d\u529e\u554a\uff01\u7ebf\u6bb5\u6811\u554a\uff01  \n  \n\u6253\u4e86\u5341\u5206\u949f\u4e4b\u540e\u7684\u60f3\u6cd5\uff1a\u54a6\uff1f\u4fee\u6539\u7684\u503c\u4e0d\u4e00\u6837\uff1f\u8fd9\u600e\u4e48\u5904\u7406\u5462\uff1f  \n\u82e6\u601d\u51a5\u60f3\u4e86\u4e09\u5341\u5206\u949f\u4e4b\u540e\uff0c\u6211\u51b3\u5b9a\u52a8\u7528\u4eba\u7c7b\u7684\u667a\u6167\u2014\u2014\u5b66\u4e60\uff01\uff08~~\u770b\u9898\u89e3~~\uff09    \n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\uff0c\u867d\u7136\u6bcf\u6b21\u4fee\u6539\u65f6\u6bcf\u4e2a\u70b9\u6539\u53d8\u7684\u503c\u90fd\u4e0d\u4e00\u6837\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u6539\u53d8\u65f6\uff0c\u6bcf\u4e2a\u70b9\u6539\u53d8\u7684\u503c\u662f\u5bf9\u4e8e\u6839\u8282\u70b9\u6539\u53d8\u7684\u503c\u4e58\u4e0a\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u4e58\u79ef\uff08\u6709\u70b9\u7ed5\uff0c\u6211\u5f53\u65f6\u6ca1\u770b\u660e\u767d\uff09\uff08\u6216\u8bb8\u6211\u73b0\u5728\u4e5f\u53ef\u80fd\u6ca1\u8bf4\u660e\u767d\uff09 \n  \n\u603b\u4e4b\u5462\uff0c\u6211\u4eec\u53ea\u8981\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u4e58\u79ef\uff0c\u7136\u540e\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\u662f\u540c\u4e00\u4e2a\u503c\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u4e58\u4e0a\u4e58\u79ef\u5c31\u53ef\u4ee5\u5566\uff01  \n\u90a3\u4e48\uff0c\u4fee\u6539\u7684\u65f6\u5019\u6211\u603b\u4e0d\u80fd\u53bb\u6311\u7740\u4fee\u6539\u67d0\u4e9b\u70b9\u5427\uff0c\u8fd9\u6837\u65f6\u95f4\u5c31\u70b8\u4e86\u5440  \n\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167dfs\u5e8f\u628a\u6811\u7684\u8282\u70b9\u6392\u5e8f\uff0c\u8ba9\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u90fd\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u662f\u591a\u5c11\u5230\u591a\u5c11\u5b58\u8d77\u6765\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\uff08\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u5566\uff09  \n\uff08\u5f31\u5f31\u7684\u5410\u69fd\u4e00\u53e5\uff0cvector\u5b58\u56fe\u771f\u7684\u90a3\u4e48\u597d\u7528\u5417\uff0c\u849f\u84bb\u4e0d\u4f1a\u7528\uff0c\u53ea\u4f1a\u524d\u5411\u661f\u7684\u5199\u6cd5\uff09  \n\u6c42dfs\u5e8f\u7684\u90e8\u5206\u662f  \n```cpp\nvoid dfs(int u,int fa)\n{\n\tdfn[u]=siz[u]=++cnt;\n\tvis[u]=1;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa||vis[v]) continue;\n\t\tif(!val[i])\n\t\t{\n\t\t\trt[++rt[0]]=v;//\u6709\u7684\u8fb9\u6743\u662f0\uff0c\u8fd9\u79cd\u8fb9\u5c31\u7b49\u4e8e\u6784\u6210\u4e86\u4e24\u68f5\u6811\uff1b\n            //\u8fd9\u91cc\u5c31\u662f\u628a\u4e24\u68f5\u6811\u5206\u5f00\u7528\u7684\n\t\t\tcontinue;\n\t\t}\n\t\tk[v]=k[u]*val[i];//k\u662f\u5230\u6839\u8282\u70b9\u7684\u4e58\u79ef\u5566\n\t\tdfs(v,u);\n\t\tsiz[u]=siz[v];\n\t}\n}\n```\n\u7136\u540e\u662f\u7ebf\u6bb5\u6811\u7684\u90e8\u5206  \n```cpp\nstruct Segmentree\n{\n\tint left,right;//\u5de6\u53f3\u513f\u5b50\u90fd\u662f\u8c01\uff08\u4e60\u60ef\u8fd9\u4e48\u5199\u4e86\uff0c\u4e0d\u592a\u4e60\u60ef\u9012\u5f52\u7684\u5199\u6cd5\uff09\n\tdouble sum;\n\tdouble tag;//\u61d2\u6807\u8bb0\u548c\u5b50\u6811\u548c\n};Segmentree tree[maxn<<2];\nvoid pushdown(int index)\n{\n\tif(tree[index].tag)\n\t{\n\t\ttree[index<<1].tag+=tree[index].tag;\n\t\ttree[index<<1].sum+=(tree[index<<1].right-tree[index<<1].left+1)*tree[index].tag;\n\t\ttree[index<<1|1].tag+=tree[index].tag;\n\t\ttree[index<<1|1].sum+=(tree[index<<1|1].right-tree[index<<1|1].left+1)*tree[index].tag;\n\t\ttree[index].tag=0;\n\t}\n}\nvoid Build(int index,int l,int r)\n{\n\ttree[index].left=l;tree[index].right=r;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tBuild(index<<1,l,mid);\n\tBuild(index<<1|1,mid+1,r);\n}\nvoid Modify(int index,int l,int r,double k)//\u533a\u95f4\u4fee\u6539\uff08\u7ebf\u6bb5\u6811\u677f\u5b50\u5566\uff09\n{\n\tif(l<=tree[index].left&&r>=tree[index].right)\n\t{\n\t\ttree[index].sum+=k;\n\t\ttree[index].tag+=k;\n\t\treturn;\n\t}\n\tpushdown(index);\n\tint mid=(tree[index].left+tree[index].right)>>1;\n\tif(l<=mid)\n\t\tModify(index<<1,l,r,k);\n\tif(r>mid)\n\t\tModify(index<<1|1,l,r,k);\n\ttree[index].sum=tree[index<<1].sum+tree[index<<1|1].sum;\n\treturn;\n}\ndouble Query(int index,int l)//\u5355\u70b9\u67e5\u8be2\uff08\u4e5f\u662f\u7ebf\u6bb5\u6811\u677f\u5b50\u5440\uff09\n{\n\tif(tree[index].left==tree[index].right)\n\t\treturn tree[index].sum;\n\tpushdown(index);\n\tint mid=tree[index].left+tree[index].right>>1;\n\tdouble ans;\n\tif(l<=mid)\n\t\tans=Query(index<<1,l);\n\telse\n\t\tans=Query(index<<1|1,l);\n\ttree[index].sum=tree[index<<1].sum+tree[index<<1|1].sum;\n\treturn ans;\n}\n```\n\u6700\u540e\u662f\u5168\u90e8\u7684\u4ee3\u7801  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+10;\nint n,m,sum,cnt;\nint head[maxn],siz[maxn],dfn[maxn],rt[maxn];\ndouble k[maxn];\nbool v[maxn],vis[maxn];\nstruct Segmentree\n{\n\tint left,right;\n\tdouble sum;\n\tdouble tag;\n};Segmentree tree[maxn<<2];\nvoid pushdown(int index)\n{\n\tif(tree[index].tag)\n\t{\n\t\ttree[index<<1].tag+=tree[index].tag;\n\t\ttree[index<<1].sum+=(tree[index<<1].right-tree[index<<1].left+1)*tree[index].tag;\n\t\ttree[index<<1|1].tag+=tree[index].tag;\n\t\ttree[index<<1|1].sum+=(tree[index<<1|1].right-tree[index<<1|1].left+1)*tree[index].tag;\n\t\ttree[index].tag=0;\n\t}\n}\nvoid Pushup(int index)\n{\n\ttree[index].sum=tree[index<<1].sum+tree[index<<1|1].sum;\n}\nvoid Build(int index,int l,int r)\n{\n\ttree[index].left=l;tree[index].right=r;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tBuild(index<<1,l,mid);\n\tBuild(index<<1|1,mid+1,r);\n}\nvoid Modify(int index,int l,int r,double k)\n{\n\tif(l<=tree[index].left&&r>=tree[index].right)\n\t{\n\t\ttree[index].sum+=k;\n\t\ttree[index].tag+=k;\n\t\treturn;\n\t}\n\tpushdown(index);\n\tint mid=(tree[index].left+tree[index].right)>>1;\n\tif(l<=mid)\n\t\tModify(index<<1,l,r,k);\n\tif(r>mid)\n\t\tModify(index<<1|1,l,r,k);\n\ttree[index].sum=tree[index<<1].sum+tree[index<<1|1].sum;\n\treturn;\n}\ndouble Query(int index,int l)\n{\n\tif(tree[index].left==tree[index].right)\n\t\treturn tree[index].sum;\n\tpushdown(index);\n\tint mid=tree[index].left+tree[index].right>>1;\n\tdouble ans;\n\tif(l<=mid)\n\t\tans=Query(index<<1,l);\n\telse\n\t\tans=Query(index<<1|1,l);\n\ttree[index].sum=tree[index<<1].sum+tree[index<<1|1].sum;\n\treturn ans;\n}\nstruct eg{\n\tint nxt;\n\tint to;\n\tdouble w;\n};eg edge[maxn<<1];\nint nxt[maxn<<1],to[maxn<<1];\ndouble val[maxn<<1];\nvoid add_edge(int x,int y,double w)//\u524d\u5411\u661f\u5b58\u56fe\uff08\u4e0d\u4f1avector\u554a\uff09\n{\n\tsum++;\n\tto[sum]=y;\n\tnxt[sum]=head[x];\n\thead[x]=sum;\n\tval[sum]=w;\n}\nvoid dfs(int u,int fa)\n{\n\tdfn[u]=siz[u]=++cnt;\n\tvis[u]=1;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa||vis[v]) continue;\n\t\tif(!val[i])\n\t\t{\n\t\t\trt[++rt[0]]=v;\n\t\t\tcontinue;\n\t\t}\n\t\tk[v]=k[u]*val[i];\n\t\tdfs(v,u);\n\t\tsiz[u]=siz[v];\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tBuild(1,1,n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint ui,vi;double wi;\n\t\tscanf(\"%d%d%lf\",&ui,&vi,&wi);\n\t\tadd_edge(ui,vi,wi);\n\t\tadd_edge(vi,ui,wi);\n\t}\n\trt[++rt[0]]=1;\n\tfor(int i=1;i<=rt[0];i++)\n\t{\n\t\tk[rt[i]]=1;\n\t\tdfs(rt[i],rt[i]);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint op,p;\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tdouble x;\n\t\t\tscanf(\"%d%lf\",&p,&x);\n\t\t\tModify(1,dfn[p],siz[p],x/k[p]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&p);\n\t\t\tprintf(\"%.8lf\\n\",Query(1,dfn[p])*k[p]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u7ed3\u675f\u5566\uff01\u611f\u8c22\u60a8\u7684\u9605\u8bfb",
        "postTime": 1604299622,
        "uid": 226805,
        "name": "VanHelsing",
        "ccfLevel": 8,
        "title": "P3787 \u51b0\u7cbe\u51bb\u897f\u74dc"
    },
    {
        "content": "\u7cbe\u5ea6\u5f00double\u5c31\u53ef\u4ee5\u8fc7\uff0clong double\u66f4\u4fdd\u9669\u3002\n\n\u5bf9\u4e8en,m\u8303\u56f4\u57281000\u4ee5\u5185\u7684\u5b50\u4efb\u52a1,\u6a21\u62df\u8fdb\u884c\u6240\u6709\u64cd\u4f5c\u5373\u53ef\n\n\u5bf9\u4e8e\u5177\u6709\u7279\u6b8a\u6027\u8d28\u7684\u5b50\u4efb\u52a1\uff0c\u53ef\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u6761\u94fe\uff0c\u505a\u6cd5\u540c\u4e0b\u9762\u7684\u6b63\u89e3\u3002\n\n\u5bf9\u4e8ewi\u4e0d\u80fd\u53d60\u7684\u5b50\u4efb\u52a1\uff0c\u53ef\u4ee5\u514d\u53bb\u4e0b\u9762\u6b63\u89e3\u4e2d\u5272\u8fb9\u7684\u6b65\u9aa4\uff0c\u76f4\u63a5\u5bf9\u8fd9\u68f5\u6811\u505adfs\u5e8f\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662f\u6b63\u89e3:\n\n\u9996\u5148\u4ece\u6839\u8282\u70b9\u5f00\u59cbdfs\uff0c\u7ef4\u62a4dfs\u5e8f\uff0c\u628a\u6240\u6709wi=0\u7684\u8fb9\u5272\u65ad\uff0c\u5c06wi=0\u7684\u8fb9\u6240\u8fde\u7684\u5b50\u6811\u6811\u6839\u7684\u7f16\u53f7\n\n\u5b58\u8d77\u6765\uff0c\u5bf9\u6240\u6709\u5206\u79bb\u51fa\u7684\u6811\u90fd\u6c42\u4e00\u904ddfs\u5e8f\u3002\u8bb0\u5f97\u8d70\u5b8c\u4e00\u68f5\u6811\u540e\u5e8f\u53f7\u4e0d\u8981\u6e05\u96f6\uff0c\u8981\u7ee7\u7eed\u5411\u4e0a\u7d2f\u52a0\u3002\n\n\u5728\u7ef4\u62a4dfs\u5e8f\u7684\u540c\u65f6\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u4ece\u5176\u6240\u5728\u6811\u7684\u6811\u6839\u5230\u5176\u672c\u8eab\uff0cwi\u53d8\u91cf\u7684\u4e58\u79efki\n\n\u7136\u540e\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6240\u6709\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u2460\uff0c\u53ef\u4ee5\u8fd9\u4e48\u60f3\uff0c\u5982\u679c\u6240\u6709\u51b7\u6c14\u90fd\u662f\u4ece\u6811\u6839\u91ca\u653e\u51fa\u6765\u7684\uff0c\n\n\u90a3\u4e48\u51b7\u51bb\u503c\u53ef\u4ee5\u76f4\u63a5\u7d2f\u52a0\u8d77\u6765\uff0c\u6700\u540e\u4e58\u4ee5ki\u5c31\u80fd\u5f97\u5230\u4efb\u610f\u5b50\u8282\u70b9\u7684\u51b7\u51bb\u503c\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u64cd\u4f5c\u2460\u770b\u505a\u4ece\u6811\u6839\u91ca\u653e\u7684\uff0c\u90a3\u4e48\u51b7\u51bb\u503c\u5c31\u662fx/ki\u3002\n\n\u6240\u4ee5\u53ea\u8981\u7ed9\u51b7\u6c14\u91ca\u653e\u7684\u8282\u70b9\u548c\u5176\u5b50\u6811\u90fd\u589e\u52a0x/ki\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6709\u7ebf\u6bb5\u6811\u7684\u652f\u6301\uff0c\u6240\u4ee5\u5355\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logn)\n\n\u5bf9\u4e8e\u64cd\u4f5c\u2468\uff0c\u53ea\u8981\u8f93\u51fa\u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u8282\u70b9\u7684\u503c\u4e58\u4ee5ki\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662fO(logn)\n\n\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6O(mlogn)\uff0c\u987a\u5229AC\u3002\n\n\u611f\u8c22oscar\u63d0\u4f9b\"\u780d\u6811\"\u7684\u601d\u8def\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cmath>\n#define ld long double\nusing namespace std;\nint n,m;\nconst ld eps=1e-8;\nvector<int>tab[100011];\nvector<ld>val[100011];\nld k[100011];\nld tree[100011];\nint ino[100011];\nint outo[100011];\nint fa[100011];\nint tot=0;\nqueue<int>q;\nvoid add(int x,ld t)\n{\n    for(x;x<=n;x+=x&-x)\n        tree[x]+=t;\n}\nld query(int x)\n{\n    ld res=0;\n    for(x;x>0;x-=x&-x)\n        res+=tree[x];\n    return res;\n}\nvoid dfs(int now,int father,long double ki)\n{\n    ino[now]=++tot;\n    fa[now]=father;\n    k[now]=ki;\n    int sz=tab[now].size();\n    for(int i=0;i<sz;++i)\n    {\n        int nex=tab[now][i];\n        if(nex==fa[now])continue;\n        if(fabs(val[now][i])<eps)\n        {\n            fa[nex]=now;\n            q.push(nex);\n            continue;\n        }\n        dfs(nex,now,ki*val[now][i]);\n    }\n    outo[now]=tot;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<n;++i)\n    {\n        int u,v;ld w;\n        scanf(\"%d%d%Lf\",&u,&v,&w);\n        tab[u].push_back(v);\n        tab[v].push_back(u);\n        val[u].push_back(w);\n        val[v].push_back(w); \n    }\n    q.push(1);\n    while(!q.empty())\n    {\n        dfs(q.front(),fa[q.front()],1.0);\n        q.pop();\n    }\n    scanf(\"%d\",&m);\n    while(m--)\n    {\n        int typ,i;\n        ld x;\n        scanf(\"%d\",&typ);\n        if(typ==1)\n        {\n            scanf(\"%d%Lf\",&i,&x);\n            ld ins=x/k[i];\n            add(ino[i],ins);\n            add(outo[i]+1,-ins);\n        }else{\n            scanf(\"%d\",&i);\n            printf(\"%.8Lf\\n\",query(ino[i])*k[i]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1495369548,
        "uid": 20322,
        "name": "orangebird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "\u9898\u76ee\u610f\u601d\u5f88\u660e\u663e\uff0c\u867d\u7136\u4e00\u5f00\u59cb\u4ee5\u4e3a\u76f4\u63a5\u66b4\u529b\uff0c\u540e\u6765\u53d1\u73b0\u4e0d\u884c\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u4e00\u68f5\u6811\u904d\u5386\u4e00\u4e0b,\u628a\u8fd9\u68f5\u6811\u53d8\u4e3a\u4e00\u6761\u94fe\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u51b7\u6c14\u53ea\u80fd\u5411\u53f6\u5b50\u8282\u70b9\u4f20\u8f93\uff0c\u6240\u4ee5\u8981\u628a\u8be5\u70b9\u6240\u7ba1\u8f96\u7684\u70b9\u4f5c\u4e3a\u6bcf\u6b21\u66f4\u65b0\u7684\u533a\u95f4\u3002\n\n\u56e0\u4e3a\u540c\u6837\u7684\u51b7\u6c14\u4f20\u5bfc\u4e0d\u540c\u7684\u897f\u74dc\u662f\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u51b7\u6c14\u90fd\u662f\u4ece\u6839\u4f20\u6765\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u591f\u6709\u4e00\u4e2a\u57fa\u51c6\u503c\uff0c\u628a\u6240\u6709\u7684\u8f93\u5165\u7684\u51b7\u6c14\u8f6c\u5316\u4e3a\u4ece\u8ddf\u6839\u6765\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u533a\u95f4\u66f4\u65b0\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e0e\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u4ece\u6839\u6765\u4f1a\u53d8\u5316\u591a\u5c11k\uff0c\u66f4\u65b0\u65f6\u5c06\u66f4\u65b0\u7684\u503c**\u9664\u4ee5**\u8be5\u8282\u70b9\u7684k\uff0c\u4f5c\u4e3a\u4ece\u6839\u8282\u70b9\u4f20\u6765\u7684\u51b7\u6c14\uff0c\u7136\u540e\u533a\u95f4\u66f4\u65b0\n\n\u67e5\u8be2\u65f6\u5c06\u8be5\u8282\u70b9\u50a8\u5b58\u7684\u503c**\u4e58\u4e0a**\u8be5\u8282\u70b9\u7684k\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5148\u628a\u6bcf\u4e00\u4e2a\u70b9\u76f8\u5bf9\u4e8e\u6839\u8282\u70b9\u6765\u8bf4\u7b49\u4ef7\u7684\u51b7\u6c14\u5b58\u4e0b\u6765\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u533a\u95f4\u66f4\u65b0\uff0c\u8be2\u95ee\u65f6\u518d\u4e58\u56de\u6765\uff0c\u5f97\u5230\u771f\u5b9e\u503c\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint t;\n\tdouble lt;\n};\nedge E[2000100];\nvector<int> g[1000100];\nint cnt,n,m,tail[1000100],pre[1000100],vi[1000100],num[1000100],root[1000100],cc,tt;\ndouble tree[4000100],tag[4000100],val[1000100];\n\nvoid dfs(int u,int fa,double vl){\n\tvi[u]=1;\n\tval[u]=vl;//\u4ece\u6839\u6765\u7684\u65f6\u5019\u53d8\u5316\u7684k\n\tnum[++cnt]=u;//\u5728\u94fe\u4e2d\u7684\u8282\u70b9\u5728\u4e66\u4e2d\u7684\u7f16\u53f7\n\tpre[u]=cnt;//\u8be5\u8282\u70b9\u5728\u94fe\u4e2d\u7684\u65b0\u7f16\u53f7\n\tfor(int i=0;i<g[u].size();i++){\n\t\tint v=E[g[u][i]].t;\n\t\tdouble ll=E[g[u][i]].lt;\n\t\tif(fa==v||vi[v]) continue;\n\t\tif(ll==0){//\u5982\u679c\u8be5\u8282\u70b9\u672a\u88ab\u8bbf\u95ee\u5e76\u4e14\u8fb9\u662f0\u5219\u65ad\u5f00\n\t\t\troot[++cc]=v;//\u628a\u65b0\u7684\u6839\u5b58\u4e0b\u6765\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(v,u,vl*ll);\n\t}\n\ttail[u]=cnt;//\u8be5\u70b9\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u7684\u7ed3\u5c3e\n}\n\nvoid build(int l,int r,int k){//\u7ebf\u6bb5\u6811\u5efa\u6811\n\tif(l==r){\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,k<<1);\n\tbuild(mid+1,r,k<<1|1);\n\treturn;\n}\n\nvoid pd(int k){\n\tif(tag[k]==0.0) return;\n\ttag[k<<1]+=tag[k];\n\ttag[k<<1|1]+=tag[k];\n\ttree[k<<1]+=tag[k];\n\ttree[k<<1|1]+=tag[k];\n\ttag[k]=0;\n}\n\nvoid add(int l,int r,int a,int b,double vl,int k){//\u533a\u95f4\u66f4\u65b0\n\tpd(k);\n\tif(l>=a&&r<=b){\n\t\ttree[k]+=vl;\n\t\ttag[k]+=vl;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=a) add(l,mid,a,b,vl,k<<1);\n\tif(mid<b) add(mid+1,r,a,b,vl,k<<1|1);\n}\n\ndouble search(int l,int r,int k,int tar){//\u5355\u70b9\u67e5\u8be2\n\tpd(k);\n\tif(l==r&&l==tar){\n\t\treturn tree[k]*val[num[tar]];//\u8bb0\u5f97\u4e58\u4e0aval\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid<tar) return search(mid+1,r,k<<1|1,tar);\n\telse return search(l,mid,k<<1,tar);\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tdouble l;\n\t\tscanf(\"%d%d%lf\",&x,&y,&l);\n\t\tif(l==0) tt++;\n\t\tE[++cnt]=(edge){y,l};//\u4e00\u5f00\u59cb\u5b58\u53cc\u5411\u8fb9\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u600e\u4e48\u8fde\n\t\tg[x].push_back(cnt);\n\t\tE[++cnt]=(edge){x,l};\n\t\tg[y].push_back(cnt);\n\t}\n\tcnt=0;\n\tdfs(1,1,1);\n\tfor(int i=1;i<=cc;i++){\n\t\tdfs(root[i],root[i],1);\n\t}\n\tbuild(1,cnt,1);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint k,x;\n\t\tdouble y;\n\t\tscanf(\"%d\",&k);\n\t\tif(k==9){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tprintf(\"%.8f\\n\",search(1,cnt,1,pre[x]));\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%lf\",&x,&y);\n\t\t\ty/=val[x];//\u5316\u4e3a\u76f8\u5bf9\u503c\n\t\t\tadd(1,cnt,pre[x],tail[x],y,1);\n\t\t}\n\t}\n}\n```",
        "postTime": 1532076404,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "#### \u770b\u5230\u5168\u662f~~(\u770b\u4e0d\u61c2\u7684)~~\u90aa\u6559vector\u5b58\u8fb9\u6c42dfs\u5e8f\n\n#### \u90a3\u4e48\u5c31\u6765\u53d1\u5e03\u4e00\u7bc7\u94fe\u5f0f\u524d\u5411\u661f\u6c42dfs\u5e8f\u7684\u9898\u89e3\u5427\uff01\u30fd(\uffe3\u25bd\uffe3)\uff89~~\u8c8c\u4f3c\u80fd\u6bd4vector\u5feb\u4e00\u4e22\u4e22~~\n\n**\u4e3b\u8981\u7b97\u6cd5\uff1adfs\u5e8f+\u5dee\u5206\u6811\u72b6\u6570\u7ec4**\n\n**\u5927\u4f53\u601d\u8def\uff1a**\n\n1. \u780d\u6389\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u5c06\u6743\u503c\u4e3a0\u7684\u8fb9\u6307\u5411\u7684\u70b9\u6362\u505a\u65b0\u6839\n\n2. \u5229\u7528k\u6570\u7ec4\u6c42\u51fa\u76f8\u5bf9\u4e8e\u6839\u7684\u5bd2\u6c14\u503c\u4e58\u79ef\uff0c\u8ba9\u4ed6\u4eec\u5355\u4f4d\u76f8\u540c\u4ee5\u4fbf\u6279\u91cf\u64cd\u4f5c\n\n3. \u7528dfs\u5e8f\u627e\u51fa\u67d0\u4e2a\u70b9\u7684\u65f6\u95f4\u6233&\u7ed3\u675f\u6233\u5728\u6811\u72b6\u6570\u7ec4\u7684\u76f8\u5e94\u4f4d\u7f6e\n\n4. \u5b9e\u65bd\u52a0\u6cd5\u64cd\u4f5c\u65f6\u53ea\u9700\u8981\u5728\u5dee\u5206\u6811\u72b6\u6570\u7ec4\u7684\u5bf9\u5e94\u65f6\u95f4\u6233\u52a0\u4e0a(\u5b9e\u9645\u503c/k[\u64cd\u4f5c\u8282\u70b9])\uff0c\u7ed3\u675f\u6233+1\u7684\u4f4d\u7f6e\u4e0a\u51cf\u53bb(\u5b9e\u9645\u503c/k[\u64cd\u4f5c\u8282\u70b9])\u5373\u53ef\n\n\n------------\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<queue>\nstd::queue<int>q;\t\t\t\t\t\t\t   //q\u961f\u5217\u7528\u4e8e\u50a8\u5b58\u6811\u6839\n#define N 500002\nint n,m,en,head[N],Index,dfn[N],nfd[N],cnt;long double k[N],tree[N],eps=1e-8;\t\t\t\t\t\t\t\t\t  //\u5404\u79cd\u5b9a\u4e49\nbool vis[N];\t\t\t\t\t\t\t\t\t//\u6c42dfs\u5e8f\u7528\u7684vis\u6807\u8bb0\nstruct edge\n{\n\tint to,next;\n\tlong double w;\n}ed[N];\ninline void addedge(int u,int v,long double w)\n{\n\ted[++en].to=v;\n\ted[en].next=head[u];\n\ted[en].w=w;\n\thead[u]=en;\n}\t\t\t\t\t\t\t\t\t\t\t\t//\u524d\u5411\u661f\nvoid dfs(int x,long double totw)\n{\n\tdfn[x]=++Index;\t\t\t\t\t\t\t  //tarjan\u7248\u65f6\u95f4\u6233\n\tvis[x]=true;\t\t\t\t\t\t\t\t //\u8be5\u8282\u70b9\u88ab\u8bbf\u95ee\u8fc7\n\tk[x]=totw;\t\t\t\t\t\t           //\u8bb0\u5f55\u76f8\u5bf9\u6839\u8bbf\u95ee\u8fc7\u6765\u7684\u4e58\u79ef\n\tfor(int i=head[x];i;i=ed[i].next)\t\t\t//\u6c42dfs\u5e8f\n\t{\n\t\tint to=ed[i].to;\n\t\tif(vis[to]==true)continue;\n\t\tif(ed[i].w<eps)\t\t\t\t\t\t  //\u5982\u679c\u6bd4\u9650\u5236\u7cbe\u5ea6\u8fd8\u5c0f\uff088\u4f4d\uff09\u5219\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e03\u4f4d\uff08\u5373\u628a\u5b83\u770b\u505a\u96f6\uff09\n\t\t{\n\t\t\tq.push(to);\t\t\t\t\t\t  //\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(to,totw*ed[i].w);\n\t}\n\tnfd[x]=Index;\t\t\t\t\t\t\t\t//\u672b\u5c3e\u6233\n}\nint lowbit(int x)\t\t\t\t\t\t\t\t//\u6811\u72b6\u6570\u7ec4\u90e8\u5206\n{\n\treturn x&(-x);\n}\ninline void add(int pos,long double val)\n{\n\twhile(pos<=n)\n\t{\n\t\ttree[pos]+=val;\n\t\tpos+=lowbit(pos);\n\t}\n}\nlong double query(int pos)\n{\n\tlong double ans=0;\n\twhile(pos)\n\t{\n\t\tans+=tree[pos];\n\t\tpos-=lowbit(pos);\n\t}\n\treturn ans;\n}\nint main()\n{\n\tint u,v;long double w;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tscanf(\"%d%d%Lf\",&u,&v,&w);\n\t\taddedge(u,v,w);\n\t\taddedge(v,u,w);\n\t}\n\tq.push(1);\t\t\t\t\t\t\t\t   //\u7b2c\u4e00\u4e2a\u6811\u6839\u4e3a1\uff0c\u5176\u4ed6\u7684\u5728dfs\u4e2d\u5bfb\u627e\t\t\n\twhile(!q.empty())\t\t\t\t\t\t\t//\u904d\u5386\u6240\u6709\u6811\u6839\n\t{\n\t\tdfs(q.front(),1);\t\t\t\t\t\t//\u53ef\u80fd\u627e\u5230\u65b0\u6839\n\t\tq.pop();\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d\",&u);\n\t\tif(u==1)\n\t\t{\n\t\t\tscanf(\"%d%Lf\",&v,&w);\n\t\t\tlong double var=w/k[v];\n\t\t\tadd(dfn[v],var);\n\t\t\tadd(nfd[v]+1,-var);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&v);\n\t\t\tprintf(\"%.8Lf\\n\",query(dfn[v])*k[v]); //\u8f93\u51fa\u7528\u76f8\u5bf9\u503c\u4e58\u771f\u5b9e\u6bd4\u4f8b\n\t\t}\n\t}\n}\n```\n\n\n------------\n~~\u742a\u9732\u8bfa\u5927\u6cd5\u597d\uff01~~\n",
        "postTime": 1550314367,
        "uid": 74559,
        "name": "\u7434\u4ed9\u4ed9\u10e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\u5c31\u662f\u5b50\u6811\u4fee\u6539\uff0c\u5355\u70b9\u6c42\u503c\u3002\u5176\u4e2d\u4fee\u6539\u7684\u503c\u4f1a\u6839\u636e\u8fb9\u6743\u53d8\u5316\u3002\n\n\u8003\u8651\u5230\u8fd9\u662f\u4e00\u68f5\u6709\u6839\u6811\uff0c\u8fb9\u6743\u90fd\u662f\u9759\u6001\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u6811\u4e0a\u5dee\u5206\uff0c\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u524d\u7f00\u79ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7b97\u51fa\u70b9\u4e4b\u95f4\u7684\u500d\u6570\u5dee\u8ddd\u3002\u5728\u4fee\u6539/\u67e5\u8be2\u7684\u65f6\u5019\u9664\u6389/\u4e58\u4e0a\u8fd9\u4e2a\u5dee\u8ddd\u5373\u53ef\u3002\n\n\u4f46\u662f\u6570\u636e\u8303\u56f4\u7ed9\u4e86\u63d0\u793a\uff1a**\u8fb9\u6743\u53ef\u80fd\u4e3a $0$**\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u8fd9\u4e4b\u540e\u7684\u524d\u7f00\u79ef\u5c06\u5168\u90e8\u53d8\u6210 $0$\u3002\u8fd9\u663e\u7136\u662f\u4e0d\u5bf9\u7684\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684\u8fb9\u8fd8\u662f\u4f1a\u6709\u8d21\u732e\u3002\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u662f $0$\uff0c\u4e24\u90e8\u5206\u4e4b\u95f4\u5c06\u4e0d\u4f1a\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u6761\u8fb9\u65ad\u5f00\uff0c\u5206\u6210\u4e24\u68f5\u6811\uff0c\u5c06\u4e0b\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u65b0\u6811\u7684\u6839\u8282\u70b9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u8ba9\u4fee\u6539\u7684\u503c\u56fa\u5b9a\u4e0b\u6765\u4e86\u3002\n\n\u4e4b\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u6210\uff1a\n\n- \u6709\u4e00\u68f5\u68ee\u6797\n- \u5bf9\u68ee\u6797\u8fdb\u884c\u5b50\u6811\u52a0\uff0c\u5355\u70b9\u67e5\u8be2\u3002\n\n\u5bf9\u539f\u68ee\u6797\u6c42\u51fa dfs \u5e8f\uff0c\u5b50\u6811\u7f16\u53f7\u5728\u5e8f\u5217\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u53d8\u6210\u5e8f\u5217\u7684**\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2**\u3002\n\n\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N = 4e5 + 5;\nint n, m;\nstruct Edge {\n    int to, nxt;\n    double weight;\n} e[N];\nint head[N], ecnt;\nvoid addedge(int from, int to, double w) {\n    e[++ecnt] = (Edge) { to, head[from], w };\n    head[from] = ecnt;\n}\ndouble sum[N];\nint rt[N], rcnt;\nint dfnL[N], dfnR[N], dfncnt;\nbool vis[N];\nvoid dfs(int x, int fa) {\n    dfnL[x] = ++dfncnt;\n    vis[x] = 1;\n    for (int i = head[x]; i; i = e[i].nxt) {\n        const int y = e[i].to;\n        if (y == fa ||vis[y]) continue;\n        if (e[i].weight == 0) {\n            rt[++rcnt] = y;\n            continue;\n        }\n        sum[y] = sum[x] * e[i].weight;\n        dfs(y, x);\n    }\n    dfnR[x] = dfncnt;\n}\ndouble t[N];\nint lowbit(int x) { return x & -x; }\nvoid upd(int p, double v) { for (; p < n * 2; p += lowbit(p)) t[p] += v; }\ndouble qry(int p) { double res = 0; for (; p; p -= lowbit(p)) res += t[p]; return res; }\nint main(void) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i < n; i++) {\n        int u, v; double w;\n        scanf(\"%d%d%lf\", &u, &v, &w);\n        addedge(u, v, w), addedge(v, u, w);\n    }\n    rt[++rcnt] = 1;\n    for (int i = 1; i <= rcnt; i++) {\n        sum[rt[i]] = 1;\n        dfs(rt[i], 0);\n    }\n    scanf(\"%d\", &m);\n    for (int op, p; m; m--) {\n        scanf(\"%d%d\", &op, &p);\n        if (op == 1) {\n            double x;\n            scanf(\"%lf\", &x);\n            upd(dfnL[p], x / sum[p]), upd(dfnR[p]+1, -x / sum[p]);\n        } else {\n            printf(\"%.8f\\n\", qry(dfnL[p]) * sum[p]);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1628397563,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3787"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3787)\n\n\u770b\u5230\u8fd9\u79cd\u9898\u5148\u5f80\u6570\u636e\u7ed3\u6784\u65b9\u9762\u60f3\uff0c\u4f46\u662f\u5f88\u5feb\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u548c\u666e\u901a\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u6bcf\u4e00\u6b21\u4fee\u6539\u65f6\u6bcf\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u7684\u503c\u4e0d\u4e00\u6837\uff0c\u8fd9\u5c31\u6ca1\u6709\u529e\u6cd5\u8fdb\u884c\u4e0b\u53bb\u4e86\u3002\n\u4f46\u662f\u53ef\u4ee5\u5148\u8003\u8651\u4e00\u79cd\u7b80\u5355\u7684\u60c5\u51b5\uff1a\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u5728**\u6839\u8282\u70b9**\u4e0a\u8fdb\u884c\uff0c\u800c\u4e14**\u8fb9\u6743\u4e0d\u4e3a\u96f6**\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u548c\u6c42\u51fa\u6765\uff0c\u8be2\u95ee\u65f6\u76f4\u63a5\u4e58\u4e0a\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684**\u524d\u7f00\u79ef**\u5373\u53ef\u3002\n\n\u8fd9\u5c31\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u601d\u8def\uff1a**\u9884\u5904\u7406\u5904\u7406\u524d\u7f00\u79ef**\u3002\n\n\u63a5\u7740\u7ee7\u7eed\u8003\u8651\uff0c\u5f53\u8282\u70b9\u64cd\u4f5c\u4e0d\u4e00\u5b9a\u662f**\u6839\u8282\u70b9**\u65f6\u4f46\u662f**\u8fb9\u6743\u6052\u4e0d\u4e3a\u96f6\u65f6**\u524d\u7f00\u79ef\u5904\u7406\u51fa\u6765\u6709\u4ec0\u4e48\u7528\u3002\u7531\u4e8e\u5728\u6839\u8282\u70b9\u4e0a\u7684\u64cd\u4f5c\u5f88\u5bb9\u6613\u5b9e\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u601d\u8def\u5c31\u5411\u6839\u8282\u70b9\u9760\u62e2\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5904\u7406\u51fa\u6765\u524d\u7f00\u79ef\u4e86\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u5bf9\u975e\u6839\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u628a\u5c06\u8981\u589e\u52a0\u7684\u503c\u9664\u4ee5\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u524d\u7f00\u79ef\uff0c\u5c31\u662f**\u7b49\u6548**\u7684\u4e86\uff0c\u4f46\u662f\u5f71\u54cd\u5230\u7684\u8282\u70b9\u53ea\u5728\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5185\uff0c\u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa\u6765\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684**\u65f6\u95f4\u6233**\uff0c\u8fd9\u6837\u6bcf\u4e00\u68f5\u5b50\u6811\u90fd\u662f**\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4**\uff0c**\u533a\u95f4\u52a0**\u64cd\u4f5c\u3002\u6bcf\u6b21\u67e5\u8be2\u5c31\u67e5\u8be2\u8fd9\u4e2a\u70b9\u7684\u503c\u7136\u540e\u4e58\u8be5\u70b9\u7684\u524d\u7f00\u79ef\u5373\u53ef\u3002\n\n\u6700\u540e\uff0c\u8003\u8651**\u8fb9\u6743\u4e3a\u96f6**\u65f6\uff0c\u53d1\u73b0\u5982\u679c\u8fb9\u6743\u4e3a\u96f6\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5c31\u4e0d\u518d\u4e92\u76f8\u5f80\u6765\u4e86\uff0c\u780d\u4e86\u5c31\u597d\uff0c\u4e8e\u662f\u5c31\u4f1a\u5f97\u5230\u82e5\u5e72\u68f5\u6811\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5728\u4e0a\u8ff0\u7b97\u6cd5\u57fa\u7840\u4e0a\u5904\u7406\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9898\u76ee\u4e2d\u8bf4\u4e86\u4ee5$1$\u4e3a\u6839\uff0c\u5e76\u4e14\u51b7\u6c14\u4f1a\u987a\u6839\u800c\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u780d\u6811\u65f6\u7684\u6839\u8282\u70b9\u4e5f\u5c31\u662f\u786e\u5b9a\u7684\u4e86\uff0c\u800c\u4e0d\u662f\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u3002~~\u8bba\u5077\u61d2\u7684\u5371\u5bb3~~\n\n### $Code$\n```cpp\n#include<cstdio>\n\n#define double long double\n\nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nint n,m,sum,cnt;\nint first[N],top[N],size[N],father[N],dfn[N],root[N];\ndouble k[N];\nbool v[N],path[N];\n\nstruct NO\n{\n\tint l;\n\tint r;\n\tdouble w;\n\tdouble lazy;\n};\n\nstruct SigmentT\n{\n\tNO t[N * 4];\n\t\n\tvoid Pushdown(int p)\n\t{\n\t\tt[p << 1].lazy += t[p].lazy;\n\t\tt[p << 1].w += (t[p << 1].r - t[p << 1].l + 1) * t[p].lazy;\n\t\tt[p << 1 | 1].lazy += t[p].lazy;\n\t\tt[p << 1 | 1].w += (t[p << 1 | 1].r - t[p << 1 | 1].l + 1) * t[p].lazy;\n\t\tt[p].lazy = 0;\n\t}\n\t\n\tvoid Pushup(int p)\n\t{t[p].w = t[p << 1].w + t[p << 1 | 1].w;}\n\t\n\tvoid Build(int p , int l , int r)\n\t{\n\t\tt[p].l = l; t[p].r = r;\n\t\tif(l == r) return;\n\t\tint mid = l + r >> 1;\n\t\tBuild(p << 1 , l , mid);\n\t\tBuild(p << 1 | 1, mid + 1 , r);\n\t}\n\t\n\tvoid Updata(int p , int l , int r , double w)\n\t{\n\t\tif(l <= t[p].l && r >= t[p].r)\n\t\t{t[p].w += w; t[p].lazy += w; return;}\n\t\tif(t[p].lazy) Pushdown(p);\n\t\tint mid = t[p].l + t[p].r >> 1;\n\t\tif(l <= mid) Updata(p << 1 , l , r , w);\n\t\tif(r > mid) Updata(p << 1 | 1 , l , r , w);\n\t\tPushup(p); return;\n\t}\n\t\n\tdouble Check(int p , int loc)\n\t{\n\t\tif(t[p].l == t[p].r) return t[p].w;\n\t\tif(t[p].lazy) Pushdown(p);\n\t\tint mid = t[p].l + t[p].r >> 1;\n\t\tdouble ans;\n\t\tif(loc <= mid) ans = Check(p << 1 , loc);\n\t\telse ans = Check(p << 1 | 1 , loc);\n\t\tPushup(p); return ans;\n\t}\n}tr;\n\nstruct E\n{\n\tint next;\n\tint to;\n\tdouble w;\n\tvoid add(int x , int y , double w_)\n\t{\n\t\tnext = first[x];\n\t\tto = y;\n\t\tw = w_;\n\t\tfirst[x] = sum;\n\t}\n}e[N * 2];\n\nint dfs(int x , int fa)\n{\n\tfather[x] = fa; dfn[x] = size[x] = ++cnt; top[x] = top[fa]; path[x] = 1;\n\tfor(int i = first[x]; i ; i = e[i].next)\n\t{\n\t\tint to = e[i].to;\n\t\tif(to == fa || path[to]) continue;\n\t\tif(!e[i].w) {root[++root[0]] = to;continue;}\n\t\tk[to] = k[x] * e[i].w; dfs(to , x); size[x] = size[to];\n\t}\n}\n\nint main()\n{\n//\tfreopen(\"aa.in\",\"r\",stdin);\n\tscanf(\"%d\",&n); tr.Build(1 , 1 , n);\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tint ui,vi; double wi;\n\t\tscanf(\"%d%d%Lf\",&ui,&vi,&wi);\n\t\t//if(!wi) continue;\n\t\te[++sum].add(ui , vi , wi);\n\t\te[++sum].add(vi , ui , wi);\n\t}\n\troot[++root[0]] = 1;\n\tfor(int i = 1; i <= root[0]; i++)\n\t\tk[root[i]] = 1 , top[root[i]] = root[i] , dfs(root[i] , root[i]) ;\n\tscanf(\"%d\",&m);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint op,loc; scanf(\"%d\",&op);\n\t\tswitch(op)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tdouble x;\n\t\t\t\tscanf(\"%d%Lf\",&loc,&x);\n\t\t\t\ttr.Updata(1 , dfn[loc] , size[loc] , x / k[loc]);\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tscanf(\"%d\",&loc);\n\t\t\t\tprintf(\"%.8Lf\\n\",tr.Check(1 , dfn[loc]) * k[loc]);\n\t\t\t\tbreak;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1603165421,
        "uid": 232191,
        "name": "NXYorz",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "## \u9898\u89e3\n\n\u89c2\u5bdf\u6570\u636e\u70b9\u53d1\u73b0\uff0c\u6570\u636e\u70b9\u5f53\u4e2d\u5b58\u5728 $w_i$ \u4e3a $0$ \u4e0e $w_i\\in[1-10^{-5},1+10^{-5}]$ \u4e24\u79cd\u60c5\u51b5\u3002\u663e\u7136\u7b2c\u4e00\u79cd\u60c5\u51b5\u53ea\u8981\u62c6\u6210\u82e5\u5e72\u68f5\u6811\u5c31\u53ef\u4ee5\u505a\u4e86\uff0c\u4f46\u4e3a\u4ec0\u4e48\u51fa\u9898\u4eba\u4f1a\u7ed9\u4e00\u4e2a\u4ec5\u6709 $w_i\\in[1-10^{-5},1+10^{-5}]$ \u7684\u7279\u6b8a\u90e8\u5206\u5206\u5462\uff1f\u663e\u7136\u8fd9\u4e2a\u90e8\u5206\u5206\u662f\u7ed9\u4e00\u4e2a\u53ea\u80fd\u5728\u8fb9\u6743\u90fd\u4e0d\u4e3a $0$ \u7684\u505a\u6cd5\u7528\u7684\u3002\n\n\u76f4\u63a5\u4ece\u6b63\u9762\u4e0b\u624b\uff0c\u628a $x$ \u5b50\u6811\u5185\u7684\u8282\u70b9\u5168\u90e8\u52a0\u4e0a\u5bf9\u5e94\u7684\u503c\u8c8c\u4f3c\u4e0d\u5927\u73b0\u5b9e\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4e24\u4e2a\u8282\u70b9\u5206\u522b\u5230\u5bf9\u5e94\u6811\u6839\u7684\u4e58\u79ef\u3002\u5047\u8bbe\u6839\u8282\u70b9\u5230\u70b9 $i$ \u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u4e4b\u79ef\u4e3a $T_i$\uff0c\u90a3\u4e48\u5728\u70b9 $i$ \u6267\u884c\u64cd\u4f5c $1$ \u91ca\u653e\u4e86\u5927\u5c0f\u4e3a $x$ \u7684\u5bd2\u6c14\u540e\uff0c\u70b9 $i$ \u5b50\u6811\u5185\u8282\u70b9 $j$ \u53d7\u5230\u7684\u5bd2\u6c14\u5c31\u662f $x\\div T_i\\times T_j$\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u5dee\u5206\u7684\u8fc7\u7a0b\uff09\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684 $i$\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u7684\u540e\u534a\u90e8\u5206\u7684 $T_j$ \u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u800c\u524d\u534a\u90e8\u5206 $T_i$ \u53ea\u4e0e $i$ \u6709\u5173\uff08\u5e9f\u8bdd\uff09\u3002\u90a3\u4e48\u5728\u6267\u884c\u64cd\u4f5c $1$ \u65f6\u7ed9\u70b9 $x$ \u7684**\u70b9\u6743**\u52a0\u4e0a $y\\div T_x$\uff1b\u6267\u884c\u64cd\u4f5c $9$ \u65f6\u8003\u8651\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u7684\u7236\u4eb2\u5bf9\u5b83\u7684\u8d21\u732e\u4e4b\u548c $S$\uff0c\u7136\u540e $S$ \u4e58\u4e0a $T_x$ \u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u4e86\u3002\n\n\u7136\u540e\u5c31\u80fd\u56de\u5230\u4e00\u5f00\u59cb\u7684\u95ee\u9898\u4e86\u3002\u5047\u5982 $1$ \u5230 $x$ \u7684\u8def\u5f84\u4e0a\u5b58\u5728\u4e00\u4e2a\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u90a3\u4e48 $T_x$ \u5c31\u672a\u5b9a\u4e49\u3002\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u5f97\u628a\u6574\u68f5\u6811\u6839\u636e $0$ \u6743\u8fb9\u5207\u5272\u4e3a\u6811\u6797\uff0c\u4f46\u8981\u8bb0\u5f97\u5904\u7406**\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\u662f\u4ec0\u4e48**\u3002\u6839\u8282\u70b9\u4e0d\u4e00\u5b9a\u90fd\u662f\u6811\u5185\u7684\u6700\u5c0f\u6807\u53f7\u7684\u8282\u70b9\uff08\u6bd4\u5982\u6709\u8fb9 $1\\xrightarrow{w_i=0} 3\\xrightarrow{w_i=1} 2$\uff0c\u90a3\u4e48\u5207\u5272\u6210\u7684\u4e24\u68f5\u6811\u7684\u6839\u5e94\u5f53\u5206\u522b\u4e3a $1,3$\uff09\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u4e3a\u4f60\u9700\u8981\u7edf\u8ba1\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u7236\u4eb2\u7684\u70b9\u6743\u4e4b\u548c\u3002\u76f4\u63a5\u4f7f\u7528\u6811\u5256\u4e0d\u5149\u4f1a\u589e\u5927\u7801\u91cf\uff0c\u8fd8\u4f1a\u4f7f\u590d\u6742\u5ea6\u53d8\u4e3a $\\mathcal O(n\\log^2n)$\uff0c\u4e0d\u5927\u597d\u770b\u3002\u56e0\u6b64\u8003\u8651\u5728\u6267\u884c\u64cd\u4f5c $1$ \u65f6\u5c31\u7ed9\u5b83\u7684\u6240\u6709\u513f\u5b50\u7684\u6743\u503c\u52a0\u4e0a $y\\div T_x$\u3002\u4f7f\u7528 $\\text{dfs}$ \u5e8f\uff0c\u7531\u4e8e\u4e00\u4e2a\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684 $\\text{dfs}$ \u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7ed9\u8fd9\u4e00\u6bb5\u533a\u95f4\u52a0\u4e0a $y\\div T_x$ \u5373\u53ef\u3002\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n)$\u3002\n\n\u867d\u7136\u6d6e\u70b9\u6570\u8bef\u5dee $\\mathrm{eps}$ \u4f1a\u56e0\u4e3a\u8fde\u7eed\u7684\u4e58\u6cd5\u88ab\u653e\u5927\u4e3a $(1+\\mathrm{eps})^{100000}-1$\uff0c\u4f46\u662f $\\text{double}$ \u7684\u7cbe\u5ea6\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define up(l,r,i) for(int i=l,END##i=r;i<=END##i;++i)\n#define dn(r,l,i) for(int i=r,END##i=l;i>=END##i;--i)\nusing namespace std;\ntypedef long long   i64;\ntypedef long double f80;\nconst int INF =2147483647;\nconst int MAXN=1e5+3;\nint H[MAXN],V[MAXN*2],N[MAXN*2],t; f80 W[MAXN*2];\nf80 S[MAXN]; int n,m,c,A[MAXN],B[MAXN],d,R[MAXN];\nvoid add(int u,int v,f80 w){\n    V[++t]=v,W[t]=w,N[t]=H[u],H[u]=t;\n}\nvoid dfs(int u,int f){\n    for(int i=H[u],v;i;i=N[i]) if((v=V[i])!=f){\n        if(fabs(W[i])<1e-9) R[++d]=v; dfs(v,u);\n    }\n}\nvoid dfs(int u,int f,f80 s){\n    S[u]=s,A[u]=++c;\n    for(int i=H[u],v;i;i=N[i]) if((v=V[i])!=f){\n        if(fabs(W[i])>1e-9) dfs(v,u,s*W[i]);\n    }\n    B[u]=c;\n}\nf80 D[MAXN];\nvoid inc(int x,f80 w){while(x<=n) D[x]+=w,x+=x&-x;}\nf80  gtw(int x){\n    f80 r=0; while(x) r+=D[x],x-=x&-x; return r;\n}\nint main(){ \n    scanf(\"%d\",&n); up(1,n-1,i){\n        int u,v; f80 w; scanf(\"%d%d%Lf\",&u,&v,&w);\n        add(u,v,w),add(v,u,w);\n    }\n    R[++d]=1,dfs(1,0); up(1,d,i) dfs(R[i],0,1.0);\n    scanf(\"%d\",&m); up(1,m,i){\n        int o; scanf(\"%d\",&o);\n        if(o==1){\n            int x; f80 y; scanf(\"%d%Lf\",&x,&y);\n            inc(A[x],y/S[x]),inc(B[x]+1,-y/S[x]);\n        } else {\n            int x; scanf(\"%d\",&x);\n            printf(\"%.20Lf\\n\",gtw(A[x])*S[x]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1631167655,
        "uid": 330759,
        "name": "\u56e7\u4ed9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "\u633a\u597d\u4e00\u9898\uff0c\u5c31\u5934\u56fe\u5c31\u2026\u2026  \n\u95f2\u8bdd\u5c11\u8bf4\uff0c\u5207\u5165\u6b63\u9898\u2014\u2014  \n\n---\n\u9898\u76ee\u5f88\u5570\u55e6\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u8f83\u6e05\u6670\u7684~~\u4e3b\u8981\u662f SX \u8bed\u6587\u4e0d\u597d\u6982\u62ec\u4e0d\u4e86~~\u3002  \n\u7531\u4e8e\u662f\u5b50\u6811\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55\u8fd9\u68f5\u6811\u7684 DFS \u5e8f\u7136\u540e\u5c06\u6811\u6620\u5c04\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c$[dfn_u, siz_u]$ \u5c31\u662f\u6bcf\u4e2a\u5b50\u6811\u7684\u533a\u95f4\uff08$dfn$ \u662f\u65f6\u95f4\u6233\uff09\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u5feb\u4e50\u7684\u7ef4\u62a4\u4e86\uff0c\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\uff0c\u4e00\u4e2a\u5355\u70b9\u67e5\u8be2\uff0c$\\log_2 n$ \u5355\u64cd\u4f5c\uff0c\u591a\u597d\u554a\u3002  \n\u53ef\u662f\u7531\u4e8e\u533a\u95f4\u4fee\u6539\u7684\u503c\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u80fd\u7b80\u5355\u7684\u533a\u95f4\u4fee\u6539\u3002  \n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u9664\u4ee5\u8be5\u8282\u70b9\u7684\u524d\u7f00\u79ef\uff0c\u67e5\u8be2\u65f6\u4e58\u4e0a\u5c31\u597d\u4e86\u3002  \n\n---\n\u4f46\u662f\u5728 DFS \u7b97\u524d\u7f00\u79ef\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u53d1\u73b0\u6709\u4e2a\u4e1c\u897f\uff0c\u5982\u679c\u6709\u4e2a\u8fb9\u6743\u4e3a $0$\uff0c\u90a3\u4e48\u5355\u7eaf\u7684\u628a $mul_v = mul_u \\times val$ \u4f1a\u5bfc\u81f4\u9519\u8bef\u3002  \n\u4f46\u662f\u8003\u8651\u5230\u5982\u679c\u6709\u4e2a\u8fb9\u6743\u662f $0$\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u662f\u4e0d\u4f1a\u5bf9\u4e0b\u9762\u7684\u524d\u7f00\u79ef\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u68f5\u6811\u7ed9\u5207\u5f00\uff0c\u5207\u6210\u82e5\u5e72\u68f5\u5c0f\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u6811\u8fdb\u884c\u8ba1\u7b97\u3002  \n\n---\n\u4ee3\u7801\uff1a  \n```cpp\n#include <cstdio>\n#include <vector>\n#define MAXN 100000\nusing namespace std;\ndouble f[MAXN * 9 + 10], lazy[MAXN * 9 + 10], a[MAXN + 10];\nint ls(int now) {return now << 1;}\nint rs(int now) {return now << 1 | 1;}\nvoid push_up(int now) {\n\tf[now] = f[ls(now)] + f[rs(now)];\n}\nvoid push_down(int now, int l, int r) {\n\tint mid = (l + r) >> 1;\n\tf[ls(now)] += (mid - l + 1) * lazy[now];\n\tf[rs(now)] += (r - mid) * lazy[now];\n\tlazy[ls(now)] += lazy[now];\n\tlazy[rs(now)] += lazy[now];\n\tlazy[now] = 0;\n}\nvoid updata(int l, int r, int s, int t, int now, double val) {\n\tif(s >= l && t <= r) {\n\t\tlazy[now] += val;\n\t\tf[now] += (t - s + 1) * val;\n\t\treturn ;\n\t}\n\tint mid = (s + t) >> 1;\n\tpush_down(now, s, t);\n\tif(l <= mid) updata(l, r, s, mid, ls(now), val);\n\tif(r > mid) updata(l, r, mid + 1, t, rs(now), val);\n\tpush_up(now);\n}\ndouble ask(int pos, int s, int t, int now) {\n\tif(s == t)\n\t\treturn f[now];\n\tpush_down(now, s, t);\n\tint mid = (s + t) >> 1;\n\tif(pos <= mid) return ask(pos, s, mid, ls(now));\n\telse return ask(pos, mid + 1, t, rs(now));\n}\n//Segments Tree\nint rt[MAXN + 10], dfn[MAXN + 10], siz[MAXN + 10], C = 0, rts = 0;\nstruct node {\n\tint to;\n\tdouble val;\n\tnode(int T, double V) {\n\t\tto = T, val = V;\n\t}\n};\nbool vis[MAXN + 10];\nvector <node> gra[MAXN + 10];\ndouble mul[MAXN + 10];\nvoid dfs(int u, int fa) {//\u904d\u5386\n\tdfn[u] = siz[u] = ++C, vis[u] = 1;\n\tfor(int p = 0; p < gra[u].size(); p++) {\n\t\tint v = gra[u][p].to;\n\t\tif(v == fa || vis[v]) continue;\n\t\tif(!gra[u][p].val) {//\u65b0\u7684\u6811\n\t\t\trt[++rts] = v;\n\t\t\tcontinue;\n\t\t}\n\t\tmul[v] = mul[u] * gra[u][p].val;\n\t\tdfs(v, u);\n\t\tsiz[u] = siz[v];\n\t}\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tint n, m;\n\tscanf(\"%d\", &n);\n\tdouble in;\n\tfor(int p = 1, x, y; p < n; p++) {\n\t\tscanf(\"%d%d%lf\", &x, &y, &in);\n\t\tgra[x].push_back(node(y, in));\n\t\tgra[y].push_back(node(x, in));\n\t}\n\trt[++rts] = 1;\n\tfor(int p = 1; p <= rts; p++) {//\u5f97\u5230\u65f6\u95f4\u6233\n\t\tmul[rt[p]] = 1;\n\t\tdfs(rt[p], rt[p]);\n\t}\n\tscanf(\"%d\", &m);\n\tfor(int p = 1; p <= m; p++) {\n\t\tint opt, u;\n\t\tscanf(\"%d\", &opt);\n\t\tif(opt == 1) {\n\t\t\tscanf(\"%d%lf\", &u, &in);\n\t\t\tupdata(dfn[u], siz[u], 1, n, 1, in / mul[u]);\n\t\t}\n\t\telse {\n\t\t\tscanf(\"%d\", &u);\n\t\t\tprintf(\"%.8lf\\n\", ask(dfn[u], 1, n, 1) * mul[u]);\n\t\t}\n\t}\n}\n  \n```",
        "postTime": 1622195602,
        "uid": 298549,
        "name": "SIXIANG32",
        "ccfLevel": 5,
        "title": "\u9898\u89e3\u3010P3787 \u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "#### \u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u68f5\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\uff0c\u7ed9\u5b9a\u8fb9\u6743\uff0c\u70b9\u6743\u521d\u59cb\u4e3a $0$\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- \u7ed9\u67d0\u4e2a\u70b9\u7684\u70b9\u6743\u52a0\u4e0a $x$\uff0c\u5e76\u5411\u513f\u5b50\u9012\u5f52\u5730\u4f20\u9012\uff0c\u671f\u95f4\u4e58\u4e0a\u81ea\u5df1\u548c\u513f\u5b50\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u518d\u7531\u513f\u5b50\u7ee7\u7eed\u5411\u4e0b\u4f20\n\n- \u67e5\u8be2\u67d0\u4e2a\u70b9\u7684\u70b9\u6743\n\n#### \u601d\u8def\uff1a\n\n\u5148\u8003\u8651\u8fb9\u6743\u4e2d\u6ca1\u6709 $0$ \u7684\u60c5\u51b5\uff08\u5373\u6539\u53d8\u4e00\u6574\u68f5\u5b50\u6811\uff09\uff1a\n\n\u9996\u5148\u56e0\u4e3a\u8fd9\u662f\u5728\u4e00\u68f5\u6811\u4e0a\u7684\u5b50\u6811\u4fee\u6539\uff0c\u90a3\u4e48\u9700\u8981\u5148\u628a\u8fd9\u68f5\u6811\u7684 dfs \u5e8f\u6c42\u51fa\uff0c\u7136\u540e\u6254\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u4fee\u6539\u7684\u503c\u662f\u4e0d\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8003\u8651\u901a\u8fc7\u9884\u5904\u7406\u8fd9\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8fb9\u6743\u524d\u7f00\u79ef\u6765\u5904\u7406\u8fd9\u4e2a\u9ebb\u70e6\u7684\u4e8b\u60c5\u3002\n\n\u8003\u8651\u628a\u6240\u6709\u7684\u4fee\u6539\u90fd\u5047\u5b9a\u5728\u6839\u4e0a\u8fdb\u884c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u4fee\u6539\u9700\u8981\u4fee\u6539\u7684\u90a3\u4e2a\u70b9\u7684\u5b50\u6811\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u4fee\u6539\u5bf9\u5e94\u7684\u6839\u4fee\u6539\u7684\u503c\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u90fd\u52a0\u4e0a\u5bf9\u5e94\u7684\u6570\uff0c\u67e5\u8be2\u65f6\u4e58\u4e0a\u76f8\u5e94\u70b9\u5230\u6811\u6839\u7684\u524d\u7f00\u79ef\u5373\u53ef\u3002\n\n\u8bbe\u70b9 $i$ \u5230\u6839\u7684\u8fb9\u6743\u524d\u7f00\u79ef\u4e3a $w_i$\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u51fa\u4e00\u4e2a\u503c\uff0c\u4f7f\u5f97\u5728\u6839\u4fee\u6539\u8fd9\u4e2a\u503c\u5230 $i$ \u7684\u65f6\u5019\u53d8\u6210\u4e86 $k$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u5c31\u662f $\\dfrac{k}{w_i}$\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u80af\u5b9a\u5728 $w_i=0$ \u7684\u65f6\u5019\u4f1a\u6302\u6389\uff0c\u5373\u6709\u8fb9\u7684\u6743\u503c\u4e3a $0$\uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u5355\u72ec\u8003\u8651\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5728\u6743\u503c\u4e3a $0$ \u7684\u8fb9\u4e0a\u7684\u8282\u70b9\u4fee\u6539\u662f\u4e0d\u4f1a\u5bf9\u6743\u503c\u4e3a $0$ \u7684\u8fb9\u4e0b\u7684\u8282\u70b9\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u4e0b\u9762\u7684\u8282\u70b9\u4fee\u6539\u5219\u4f1a\u6b63\u5e38\u5730\u5f71\u54cd\uff0c\u4e8e\u662f\u53d1\u73b0\u8fd9\u4e2a $0$ \u6743\u503c\u8fb9\u6ca1\u6709\u610f\u4e49\uff0c\u53ef\u4ee5\u5220\u9664\u5b83\uff0c\u8ba9\u6574\u68f5\u6811\u53d8\u6210\u4e24\u68f5\uff0c\u518d\u6309\u7167\u4e0a\u9762\u7684\u64cd\u4f5c\u8fdb\u884c\u5904\u7406\u3002\n\n\u90a3\u4e48\u6700\u540e\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u5f88\u591a\u68f5\u6811\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u5728\u641c\u5b8c\u4e00\u68f5\u6811\u540e\u76f4\u63a5\u63a5\u7740\u7b97 dfs \u5e8f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u5904\u7406\u4e86\u3002\n\n\u8fd8\u6709\u5c31\u662f\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u7684 dfs \u5e8f\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u65b9\u4fbf\u8fdb\u884c\u5b50\u6811\u4fee\u6539\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <queue>\n#include <map>\nusing namespace std;\ntypedef long long ll;\nint n,nxt[200005],hed[200005],to[200005],cnt;\ndouble ww[200005],sum[200005];//sum\u8bb0\u5f55\u524d\u7f00\u79ef\nint dfscnt=0,id[200005],idd[200005],f[200005];//id\u662fdfs\u5e8f\uff0cidd\u662f\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u7684dfs\u5e8f\u6700\u5927\u503c\nint m,rt[200005];//rt\u8bb0\u5f55\u6240\u6709\u6839\nbool vis[200005];\nvoid adde(int u,int v,double w)\n{\n\tcnt++;\n\tto[cnt]=v;\n\tnxt[cnt]=hed[u];\n\thed[u]=cnt;\n\tww[cnt]=w;\n}\nvoid dfs1(int u,int from)\n{\n\tf[u]=from;\n\tfor(int i=hed[u];i!=0;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v!=from) dfs1(v,u);\n\t}\n}//\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\nvoid dfs(int u,int root,int from)\n{\n\tif(vis[u]) return;\n\tif(u==root)\n\t{\n\t\tsum[u]=1;\n\t}\n\tdfscnt++;\n\tid[u]=dfscnt;\n    vis[u]=true;\n\tfor(int i=hed[u];i!=0;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v!=from&&!(ww[i]-0<=0.000000001))//\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\n\t\t{\n            sum[v]=sum[u]*ww[i];\n\t\t\tdfs(v,root,u);\n\t\t}\n\t\telse if(v!=from)\n\t\t{\n\t\t\trt[++rt[0]]=v;//\u627e\u5230\u4e86\u65b0\u7684\u6839\n\t\t}\n\t}\n\tidd[u]=dfscnt;\n}\ndouble c[100005];\nint lowbit(int x)\n{\n\treturn x&-x;\n}\nvoid upd(int x,double k)\n{\n\twhile(x<=n)\n\t{\n\t\tc[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\ndouble query(int x)\n{\n\tdouble res=0;\n\twhile(x>=1)\n\t{\n\t\tres+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tdouble w;\n\t\tcin>>u>>v>>w;\n\t\tadde(u,v,w);\n\t\tadde(v,u,w);\n\t}\n\tdfs1(1,0);\n\trt[1]=rt[0]=1;\n    for(int i=1;i<=rt[0];i++)\n    {\n    \tdfs(rt[i],rt[i],rt[f[i]]);\n\t}\n    cin>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt;\n\t\tcin>>opt;\n\t\tif(opt==1)\n\t\t{\n\t\t\tint x;\n\t\t\tdouble k;\n\t\t\tcin>>x>>k;\n\t\t\tupd(id[x],k/sum[x]);\n\t\t\tupd(idd[x]+1,-(k/sum[x]));//\u5b50\u6811\u4fee\u6539\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x;\n\t\t\tcin>>x;\n\t\t\tprintf(\"%.8lf\\n\",sum[x]*query(id[x]));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1611413847,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u9762\u4e0d\u7981\u8ba9\u6211\u8054\u60f3\u5230\u4e86\u6811\u5256~~\n\n#### \u601d\u8def\n\n\u663e\u7136\uff0c\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u6811\u5256~~\u6bd5\u7adf\u5b83\u53ea\u662f\u84dd\u9898~~\uff0c\u4e0d\u8fc7\uff0c\u5b83\u4e5f\u9700\u8981\u7528\u5230$DFS$\u5e8f\uff0c\u628a\u6811\u4e0a\u64cd\u4f5c\u8f6c\u5316\u6210\u5e8f\u5217\u64cd\u4f5c\uff08\u8fd9\u4e2a\u601d\u60f3\u53ef\u4ee5\u8bf4\u5f88\u5957\u8def\u4e86\uff09\uff0c\u4f46\u8fd9\u9898\u6709\u4e00\u4e2a\u9ebb\u70e6\u7684\u5730\u65b9\uff1a\u5728\u4fee\u6539\u5b50\u6811\u65f6\u6bcf\u4e00\u6761\u8fb9\u90fd\u4f1a\u5bf9\u4fee\u6539\u503c\u9020\u6210\u5f71\u54cd\uff0c\u800c\u8fd9\u7528\u7ebf\u6bb5\u6811\u662f\u96be\u4ee5\u7ef4\u62a4\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5c06\u8fb9\u4e0a\u7684\u5f71\u54cd\u5206\u79bb\u51fa\u6765\uff0c\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u4e00\u4e2a\u4ece\u5f53\u524d\u8282\u70b9\u5230\u6839\u7684\u524d\u7f00\u79ef\uff0c\u5728\u6bcf\u6b21\u5b50\u6811\u52a0\u65f6\u5c06\u52a0\u6570\u9664\u4ee5\u5f53\u524d\u8282\u70b9\u7684\u524d\u7f00\u79ef\uff0c\u67e5\u8be2\u65f6\u518d\u4e58\u4e0a\u67e5\u8be2\u8282\u70b9\u7684\u524d\u7f00\u79ef\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5c31\u5c06\u4fee\u6539\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u524d\u7f00\u79ef\u4e58\u56de\u6765\u4e86\u3002~~\u662f\u4e0d\u662f\u5f88\u5999~~\n\n#### But\n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff1a\u6570\u636e\u8303\u56f4\u4e2d\u7279\u610f\u5f3a\u8c03\u4e86$w_i$\u53ef\u80fd\u4e3a$0$\uff0c\u800c\u6211\u4eec\u77e5\u9053\uff0c\u5f53$w_i$\u4e3a0\u65f6\uff0c\u4fee\u6539\u5176\u4ed6\u8282\u70b9\uff08\u6307\u9664i\u53ca\u5176\u5b50\u6811\u4ee5\u5916\u7684\u8282\u70b9\uff09\u5c31\u5bf9i\u8282\u70b9\u53ca\u5176\u5b50\u6811\u6ca1\u6709\u5f71\u54cd\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u5730\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5de7\u5999\u5730\u5c06\u8fd9\u4e9b$w_i$\u4e3a$0$\u7684\u70b9\u4e5f\u8bbe\u4e3a\u6839\uff0c\u5c06\u539f\u6811\u62c6\u5206\u6210\u51e0\u68f5\u6811\u904d\u5386\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3$0$\u7684\u95ee\u9898\u4e14\u5b50\u6811\u7f16\u53f7\u4ecd\u7136\u8fde\u7eed\u4e86\u3002\u540c\u65f6\uff0c\u6211\u4eec\u6bcf\u4e00\u4e2a\u70b9\u4ecd\u7136\u53ea\u4f1a\u904d\u5386\u4e00\u6b21\uff08\u4e3a\u6839\u8282\u70b9\u4e24\u6b21\uff09\uff0c\u6240\u4ee5\u904d\u5386\u4ecd\u7136\u662f$O(n)$\u7ea7\u522b\u7684\u3002\n\n\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nconst int maxn = 2e5 + 10;  //\u4e24\u500d\u7a7a\u95f4\u5f00\u4e86\u5417\nint n,head[maxn],num,m;\nint rm[maxn],rt[maxn],top;\ndouble tim[maxn];\nstruct Edge{\n    int then,to;\n    double val;\n}e[maxn];\n\nvoid add(int u, int v, double val){e[++num] = (Edge){head[u], v, val}; head[u] = num;}\n\nint dfn[maxn],id[maxn],cnt,siz[maxn];\nvoid DFS(int u, int f){  \n    dfn[++cnt] = u, id[u] = cnt; siz[u] = 1;\n    for(int i = head[u]; i; i = e[i].then){\n        int v = e[i].to;\n        if(v != f && !rm[v] && !id[v]){\n            if(fabs(e[i].val - 0.0) <= 0.00000001) rm[v] = 1, rt[++top] = v, tim[v] = 1;  //\u6ce8\u610fdouble\u52240\u7684\u65f6\u5019\u5c3d\u91cf\u522b\u7528==\n            else tim[v] = tim[u] * e[i].val, DFS(v, u), siz[u] += siz[v];\n        }\n    }\n}\n\nstruct Seg_Tree{\n    #define lc(x) x << 1\n    #define rc(x) x << 1 | 1\n    double c[maxn << 2],tag[maxn << 2];\n    \n    void f(int l, int r, int p, double x){\n        c[p] += (r - l + 1) * x;\n        tag[p] += x;\n    }\n    \n    void downdate(int l, int r, int p){\n        if(fabs(tag[p] - 0.0) >= 0.00000001){\n            int mid = (l + r) >> 1;\n            f(l, mid, lc(p), tag[p]);\n            f(mid + 1, r, rc(p), tag[p]);\n            tag[p] = 0;\n        }\n    }\n    \n    void add(int L, int R, int l, int r, int p, double val){\n        if(L <= l && R >= r){\n            f(l, r, p, val);\n            return;\n        }\n        downdate(l, r, p);\n        int mid = (l + r) >> 1;\n        if(L <= mid) add(L, R, l, mid, lc(p), val);\n        if(mid < R) add(L, R, mid + 1, r, rc(p), val);\n        c[p] = c[lc(p)] + c[rc(p)];\n    }\n    \n    double query(int pos, int l, int r, int p){\n        if(l == r) return c[p];\n        downdate(l, r, p);\n        int mid = (l + r) >> 1; \n        if(mid >= pos) return query(pos, l, mid, lc(p));\n        else return query(pos, mid + 1, r, rc(p));\n    }\n}tree;\n\nvoid push(int u, double val){\n    val /= tim[u];\n    tree.add(id[u], id[u] + siz[u] - 1, 1, cnt, 1, val);\n}\n\ndouble get_ans(int u){\n    double ans = tree.query(id[u], 1, cnt, 1);\n    return ans * tim[u];\n}\n\nint main(){\n    scanf(\"%d\", &n);\n    for(int i = 1; i < n; ++ i){\n        int u,v; double val;\n        scanf(\"%d%d%lf\", &u, &v, &val);\n        add(u, v, val), add(v, u, val);\n    } tim[1] = 1, DFS(1, 0);\n    for(int i = 1; i <= top; ++ i) DFS(rt[i], 0);\n    scanf(\"%d\", &m);\n    while(m--){\n        int opt,Id; double x;\n        scanf(\"%d%d\", &opt, &Id);\n        if(opt == 1){\n            scanf(\"%lf\", &x);\n            push(Id, x);\n        }\n        else printf(\"%.8lf\\n\", get_ans(Id));\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1604405171,
        "uid": 120351,
        "name": "When",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3787 \u3010\u51b0\u7cbe\u51bb\u897f\u74dc\u3011"
    }
]