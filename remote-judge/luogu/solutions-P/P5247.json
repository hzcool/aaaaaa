[
    {
        "content": "## \u590d\u6742\u5ea6\u5747\u644a\u7684 Holm-de Lichtenberg-Thorup \u5206\u5c42\u56fe\u7b97\u6cd5\n- \u6211\u4eec\u7ed9\u5b9a\u6bcf\u6761\u8fb9\u4e00\u4e2a\u6743\u503c\u3002\u4fdd\u8bc1\u5b83\u7684\u4e0a\u754c\u5728 $\\log{n}$ \uff0c\u8fd9\u4e2a\u503c\u8d8a\u5927\uff0c\u5c31\u8bf4\u660e\u8fd9\u6761\u8fb9\u5728\u8d8a\u591a\u7684\u5224\u65ad\u4e2d\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\u3002\u6240\u6709\u8fb9\u4e00\u5f00\u59cb\u6743\u503c\u90fd\u4e3a $0$\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u5206\u5c42\u56fe\uff0c\u6240\u6709\u8fb9\u53ef\u4ee5\u5411\u4e0b\u5408\u5e76\u3002\u663e\u7136\uff0c\u8fde\u901a\u6027\u53ea\u9700\u8981\u4e00\u9897\u6811\u5c31\u53ef\u4ee5\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u7ef4\u62a4\u7684\u662f\u8fd9\u4e2a\u56fe\u7684\u751f\u6210\u6811\u68ee\u6797\u3002\n- \u5b9a\u4e49 $G_i$ \u8868\u793a\u6240\u6709\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e $i$ \u7684\u8fb9\u6784\u6210\u7684\u56fe\uff0c$F_i$ \u8868\u793a $G_i$ \u7684\u6700\u5927\u751f\u6210\u6811\u3002\n- \u90a3\u4e48\u6211\u4eec\u4e0d\u96be\u53d1\u73b0:\n\t- $G_{i+1}\\in G_{i}$\n\t- $G_{i}$ \u4e0e $F_{i}$ \u7684\u8fde\u901a\u6027\u76f8\u540c\u3002\n   - $F_{i}=G_{i}\\cap F_{0}$\uff0c$F_{i}$ \u4e00\u5b9a\u4e3a $G_{i}$ \u6700\u5927\u751f\u6210\u6811\u3002\n\n------------\n\u5728\u6709\u4e86\u4ee5\u4e0a\u7684\u6027\u8d28\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u5f0f\u5730\u5f00\u59cb\u4e86\u3002\n- \u663e\u7136\uff0c\u8fd9\u9898\u96be\u7684\u662f\u5220\u8fb9\uff0c\u52a0\u8fb9\u548c\u8be2\u95ee\u76f4\u63a5\u5728 $G_{0}$ \u64cd\u4f5c\u5c31\u884c\u3002\n- \u800c\u5220\u8fb9\uff0c\u5982\u679c\u5b83\u7834\u574f\u4e86\u539f\u6709\u56fe\u5f62\u751f\u6210\u6811\u7684\u8fde\u901a\u6027\uff0c\u6211\u4eec\u5c31\u5f97\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8fb9\uff0c\u6765\u770b\u5b83\u662f\u5426\u80fd\u591f\u91cd\u65b0\u201c\u4ee3\u66ff\u201d\u8fd9\u6761\u8fb9\u3002\n- \u800c\u53cd\u89c2 $F_{i}$ \u4e3a\u6700\u5927\u751f\u6210\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5982\u679c\u6709\u8fb9\u80fd\u591f\u201c\u4ee3\u66ff\u201d\u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u5b83\u7684\u6743\u503c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8fb9\uff0c\u5426\u5219\u5b83\u5e94\u8be5\u5728\u6700\u5927\u751f\u6210\u6811\u4e2d\u3002\n- \u5728\u627e\u8fb9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u8f83\u5c0f\u7684\u6811\u7684\u4e00\u8fb9\u7684\u8fb9\uff0c\u6211\u4eec\u67e5\u627e\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u80fd\u591f\u4ee3\u66ff\uff0c\u5c31\u5728 $F_{i}$ \u4e2d\u8fde\u4e0a\u8fd9\u6761\u8fb9\uff0c\u5426\u5219\u5c31\u5c06\u5b83\u7684\u6743\u503c\u52a0 1\u3002\n- \u4f9d\u6b21\u67e5\u627e $G_{i},G_{i-1}...G_{0}$ \u76f4\u5230\u627e\u51fa\u6765\u3002\n- \u5728\u67e5\u627e\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981 tag \u6765\u8868\u793a\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u6811\u662f\u5426\u6709\u53ef\u80fd\u66f4\u65b0\u7684\u8fb9\uff0c\u4e0d\u80fd\u76f4\u63a5\u904d\u5386\u5b50\u6811\uff0c\u5426\u5219\u590d\u6742\u5ea6\u5c31\u662f\u9519\u8bef\u7684\u3002\n\n------------\n- Q\uff1a\u542c\u8bf4\u8981\u7528 ETT\uff0c\u5982\u679c\u6211\u4e0d\u4f1a\u600e\u4e48\u529e\uff1f\n- A\uff1a~~\u4f60\u53ef\u4ee5\u5b66~~\u7ef4\u62a4\u5b50\u6811 LCT \u597d\u50cf\u4e5f\u884c\uff0c\u4f46\u6211\u6ca1\u6709\u5b9e\u73b0\u3002\n- Q\uff1a BFS \u4e0d\u9999\u5417\uff1f\n- A\uff1a\u9999\uff0c\u600e\u4e48\u4e0d\u9999\uff0c~~\u4f46\u8fd9\u6837\u600e\u4e48\u6da8\u793e\u533a\u7684\u5206\u5440~~\u3002\n\n------------\n\u4ee5\u4e0b\u662f\u66f4\u65b0\u5185\u5bb9\uff1a\n\n#### \u590d\u6742\u5ea6\u7684\u4e00\u4e9b\u5206\u6790\n-----\n- \u6211\u4eec\u5c06\u56fe\u4e0a\u7684\u6240\u6709\u7684\u975e\u6811\u8fb9\u53d6\u51fa\u6765\u3002\n- \u8bbe\u6211\u4eec\u5f53\u524d\u6b63\u5728\u5904\u7406\u7b2c i \u5c42\u8fb9\u3002\n- \u5728\u6bcf\u6b21\u65ad\u8fb9\u7684\u65f6\u5019\u6211\u4eec\u904d\u5386\u5c0f\u5b50\u6811\uff0c\u5c06\u5f53\u524d\u65e0\u7528\u8fb9\u7684\u6743\u503c\u52a0\u4e00\u3002\n- \u90a3\u4e48\u5728\u6743\u503c\u66f4\u5927\u7684\u4e00\u5c42\u56fe\u4e2d\uff0c\u4e24\u70b9\u6240\u5728\u7684 $F_{i+1}$ \u4e00\u5b9a\u8fde\u901a\u3002\n- \u53c8\u7531\u4e8e\u5f53\u524d\u8fd9\u6761\u8fb9\u5c5e\u4e8e $F_{i}$ \u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6240\u4ee5\u5728 $F_{i+1}$ \u7684\u8fde\u901a\u5757\u4e2d\uff0c\u5f53\u524d\u8fb9\u6240\u5728\u7684\u5757\u5927\u5c0f\u4e00\u5b9a\u5c0f\u4e8e $F_{i}$ \u6240\u5728\u5927\u5c0f\u7684\u4e00\u534a\u3002\u6bcf\u4e00\u5c42\u51cf\u5c11\u4e00\u534a\uff0c\u6545\u5206\u5c42\u56fe\u53ea\u9700 $\\log n$ \u5c42\uff0c\u6bcf\u6761\u8fb9\u4e5f\u505a\u591a\u4e0a\u5347 $\\log n$ \u6b21\u3002\n- \u5728\u4efb\u610f\u4e00\u4e2a\u68ee\u6797\u4e2d\u6211\u4eec\u8981\u627e\u5230\u4e00\u6761\u8fb9(\u7684\u4e00\u4e2a\u7aef\u70b9)\u7684\u590d\u6742\u5ea6\u5747\u644a\u662f $\\log n$\uff0c\u6bcf\u6761\u8fb9\u53ea\u4f1a\u88ab\u627e $\\log n$ \u6b21\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $O(\\log ^{2} n)$\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8981\u7528 tag \u8bb0\u5f55\u662f\u5426\u5b58\u5728\u8fb9\uff0c\u8fd9\u6837\u4e0a\u9762\u627e\u8fb9\u7684\u590d\u6742\u5ea6\u624d\u80fd\u644a\u4e0b\u6765\u3002\n- \u8bba\u6587\u4e0a\u7684\u590d\u6742\u5ea6\u662f $O(\\frac{\\log^{2} n}{\\log \\log n})$\uff0c\u67e5\u8be2\u5f88\u7b80\u5355 $O(\\log n)$\u3002\n\n#### \u7ef4\u62a4\u52a8\u6001\u6811\u7684\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e9b\u4e71\u626f\n-----\n- \u52a8\u6001\u6811\u4e00\u822c\u6307 LCT\uff0c\u4f46\u662f\u5728\u8fd9\u9053\u9898\u5f53\u4e2d\u5982\u679c\u4f7f\u7528 LCT\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u8981\u5728\u5bfb\u627e\u4e00\u4e2a\u5b50\u6811\u6216\u8005\u8bf4\u865a\u513f\u5b50\u5b50\u6811\u5185\u7684\u6807\u8bb0\u8282\u70b9\uff0c\u5e76\u4e14\u4ecd\u7136\u505a\u5230 $O(\\log n)$\uff0c\u8fd9\u5c31\u9700\u8981\u9009\u624b\u638c\u63e1\u8f83(\u81ea)\u4e3a(\u9002)\u9ad8(\u5e94)\u6df1(\u9876)\u7684(\u6811) LCT \u7ef4\u62a4\u6280\u5de7\u3002\n- \u8fd9\u9898\u5bf9\u52a8\u6001\u6811\u7684 link cut \u7075\u6d3b\u6027\u8981\u6c42\u6bd4\u8f83\u5f3a\uff0c\u4e0d\u662f\u7b80\u5355\u5730\u6362\u7236\u4eb2\uff0c\u800c\u62ec\u53f7\u5e8f\u548c\u6b27\u62c9\u5e8f\u90fd\u4f1a\u5728\u6362\u6839\u7684\u65f6\u5019\u6253\u4e71\u513f\u5b50\u7684\u987a\u5e8f\u8fd8\u6709\u81ea\u5df1\u8282\u70b9\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u3002\n- \u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u5feb\u901f\u7684\u52a8\u6001\u6811\uff0c\u6709\u5b50\u6811\u4fe1\u606f\u3002\n- \u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u5373\u5f53\u524d\u8282\u70b9\u5c04\u51fa\u53bb\u7684\u4e00\u6761\u65e0\u5411\u8fb9\u3002\u6240\u4ee5\u5b9e\u9645\u4e0a\u6765\u8bb2\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5b83\u5728 ETT \u6709\u4ec0\u4e48\u5165\u6216\u8005\u4ec0\u4e48\u51fa\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u8fd8\u6709\u8fd9\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u8fd9\u4e24\u4e2a\u4fe1\u606f\u5373\u53ef\u3002\n- \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u4e0d\u8bba\u7528\u6b27\u62c9\u5e8f\u6216\u8005\u62ec\u53f7\u5e8f\u6362\u6839\uff0c\u513f\u5b50\u987a\u5e8f\u88ab\u6253\u4e71\u8fd9\u5bf9\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002\u6211\u4eec\u6302\u8fb9\u7684\u65f6\u5019\u76f4\u63a5\u5728\u5b83\u6240\u6709\u51fa\u73b0\u7684\u8282\u70b9\u4e2d\u968f\u4fbf\u9009\u4e00\u4e2a\u8282\u70b9\u6302\u4e0a\u53bb\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u627e\u8fb9\u5747\u644a\u4ecd\u7136\u662f $O(\\log n)$ \u7684\uff0c\u6ca1\u6709\u5f71\u54cd\u6211\u4eec\u4e0a\u9762\u7684\u590d\u6742\u5ea6\u5206\u6790\u3002\n- \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528 ETT \u8fdb\u884c\u7ef4\u62a4\uff0c\u6362\u6839\u76f4\u63a5\u533a\u95f4\u5e73\u79fb\u5373\u53ef\u3002\n\nupd on 2021.7.23 : \u4fee\u6539\u4e86\u539f\u7b97\u6cd5\u7684\u4e00\u4e9b\u63cf\u8ff0\u4e0e\u589e\u52a0\u540e\u9762\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u8fd8\u6709 ETT\u3002\n\n### \u6700\u540e\u6765\u8bb2\u4e00\u4e9b\u5b9e\u73b0\u95ee\u9898\u3002\n\n\u6709\u4e0a\u9762\u7684\u7ed3\u8bba\u53ef\u4ee5\u7684\u5230 ETT \u548c LCT \u90fd\u53ef\u4ee5\uff0c\u73b0\u5728\u6211\u4eec\u6765\u5206\u522b\u8ba8\u8bba\u4e00\u4e0b\u3002\n\n#### Link - Cut - Tree\n- \u8003\u8651 LCT \u505a\u4e00\u4e2a\u5b50\u6811 search \u7684\u65f6\u5019\uff0c\u865a\u513f\u5b50\u7684\u4fe1\u606f\u6bd4\u8f83\u96be\u8fdb\u884c\u67e5\u627e\u3002\n- \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a set \u5b58\u50a8\u865a\u513f\u5b50\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6807\u8bb0\u70b9\uff0c\u7136\u540e\u4e0a\u4f20\uff0c\u4f46\u662f\u7531\u4e8e\u4e8c\u53c9\u6811\u5f62\u5206\u6cbb\u7ed3\u6784\u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u5f97\u4f7f\u513f\u5b50\u4e2d\u7ed3\u6784\u4e0d\u540c\u65f6\uff0c\u4f20\u4e0a\u6765\u7684\u5374\u662f\u540c\u4e00\u4e2a\u503c\u3002\n- \u6211\u8fd9\u91cc\u91c7\u7528\u7684\u662f\u4f20\u7684\u6700\u5c0f\u7684\u6807\u8bb0\u8282\u70b9\u3002\n- \u6bcf\u6b21\u505a search \u7684\u65f6\u5019\u5c31\u66b4\u529b access \u8fc7\u53bb\uff0c\u8fd9\u6837\u4e00\u5b9a\u4f1a\u6574\u4e2a\u8fde\u901a\u5757\u5f53\u4e2d\u7684\u6807\u8bb0\u70b9\u5168\u90e8\u626b\u8fc7\u3002\n- \u4f46\u662f\u6ce8\u610f\uff0cset \u65e0\u6cd5\u5747\u644a\u8fdb\u5165 LCT \u7684\u590d\u6742\u5ea6\u5f53\u4e2d\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log^{3}n)$\uff0c\u5982\u679c\u60f3\u8981\u4f18\u5316\u53ef\u4ee5\u8fd0\u7528 Top Tree \u7684\u6280\u5de7\u4f18\u5316\u5230 $\\mathcal O(n \\log^{2}n)$\u3002\n- \u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u4e00\u5b9a\u662f\u6700\u597d\u5199\u7684\uff0c\u6ca1\u6709\u7f16\u53f7\u7684\u6620\u5c04\uff0c\u6ca1\u6709\u6811\u5f62\u7ed3\u6784\u8f6c\u4e3a\u7ebf\u6027\u7684\u8f6c\u5316\u3002\n- [code:Link - Cut - Tree,Version](https://www.luogu.com.cn/paste/6pc21m9t)\n\n#### Euler - Tour - Tree  Splay\n- \u8003\u8651\u4f7f\u7528 splay \u5bf9 ETT \u8fdb\u884c\u7ef4\u62a4\u3002splay \u662f\u52a8\u6001\u6811\u7684\u597d\u822c\u914d\uff0c\u5e94\u8be5\u4f1a\u662f\u5927\u591a\u6570\u4eba\u7684\u7b2c\u4e00\u9009\u62e9\u3002\n- \u4f46\u662f\u8003\u8651\u8fd9\u9053\u9898\u4e0a\u9762\uff0c\u6211\u4eec\u5728\u505a search \u7684\u65f6\u5019\u540c\u65f6\u4f1a\u8fdb\u884c\u5bf9\u4fe1\u606f\u7684\u67e5\u8be2\uff0c\u4e5f\u5c31\u4f1a\u904d\u5386\u8def\u5f84\u3002\u5982\u679c\u8981\u505a\u5230\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u8bdd\u5c31\u4e00\u5b9a\u8981 **\u7cbe\u7ec6\u5b9e\u73b0** \uff0c\u4e5f\u5c31\u6bd2\u7624\u4e86\u4ebf\u70b9\u70b9\uff0c\u8fd9\u8fb9\u8fd8\u662f\u5efa\u8bae\u4f7f\u7528 FHQ\uff0csplay \u7684\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\u548c\u7cbe\u7ec6\u3002\n- [code:Euler - Tour - Tree,splay,Version](https://www.luogu.com.cn/paste/gao91hcu)\n\n#### Euler - Tour - Tree FHQ\n- \u8003\u8651 FHQ\uff0c\u5b83\u539f\u672c\u5c31\u6709\u590d\u6742\u5ea6\u5408\u6cd5\u7684\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u5728\u904d\u5386\u7684\u65f6\u5019\u67e5\u8be2\u4fe1\u606f\u4e5f\u80fd\u540c\u65f6\u66f4\u65b0\u3002\n- \u5728\u672c\u9898\u4e0a\u5b9e\u73b0\u8f83\u4e3a\u65b9\u4fbf\u3002\u4f46\u662f\u7531\u4e8e ETT \u81ea\u8eab\u7684\u590d\u6742\u6027\uff0c\u8fd8\u662f\u5199\u8d77\u6765\u6bd4 LCT \u9ebb\u70e6\u7684\u591a\u3002\n- [code:Euler - Tour - Tree,FHQ,Version](https://www.luogu.com.cn/paste/8oryigsf)\n\n\n\n\n## \u968f\u673a\u51fb\u4e2d\u5272\u8fb9\u96c6\u5408 cutset \u7ed3\u6784\u505a\u6cd5\n\n- \u8003\u8651\u6211\u4eec\u5f53\u524d\u6240\u9762\u4e34\u7684\u7684\u95ee\u9898\uff0c\u4ecd\u7136\u662f\u5982\u4f55\u627e\u5230\u4e00\u6761\u88ab\u5272\u6389\u7684\u8fb9\u7684\u4ee3\u66ff\u8fb9\u3002\n- \u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6a21\u578b\uff1a\n\n>  \u7ed9\u5b9a\u4e00\u4e2a\u56fe $G(V,E)$\uff0c\u548c\u56fe\u7684\u4e00\u4e2a\u8fde\u901a\u70b9\u96c6 $T \\subset V$\uff0c\u6211\u4eec\u79f0 $cutset(T)$ \u8868\u793a\u6709\u4e14\u4ec5\u6709\u4e00\u8fb9\u7aef\u70b9\u5728\u70b9\u96c6 $T$ \u4ee5\u5185\u7684\u8282\u70b9\u7684\u8fb9\u96c6\uff0c\u6211\u4eec\u628a\u8fb9\u96c6\u5185\u7684\u8fb9\u79f0\u4e3a\u201c\u5272\u8fb9\u201d\u3002\n>\n> \u90a3\u4e48\uff0c\u5982\u679c**\u6070\u597d**\u5b58\u5728**\u4e00\u6761**\u8fd9\u6837\u7684\u8fb9\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u6211\u4eec\u5c06\u8fb9\u8fdb\u884c\u7f16\u53f7\u540e\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u6240\u6709\u4e0e\u4ed6\u76f8\u8fde\u7684\u8fb9\u7684\u7f16\u53f7\u5f02\u6216\u548c\uff0c$xor(T)$ \u5c31\u662f\u90a3\u6761\u5272\u8fb9\u7684\u7f16\u53f7\u3002\n\n- \u8fd9\u4e2a\u65b9\u6cd5\u770b\u4e0a\u53bb\u6070\u597d\u51fb\u4e2d\u5272\u8fb9\u7684\u6982\u7387\u5b9e\u5728\u662f\u592a\u5c0f\u4e86\uff0c\u800c\u4e14\u53d7\u201c\u6070\u597d\u201d\u9650\u5236\u3002\n- \u9996\u5148\u6211\u4eec\u8003\u8651\u5982\u4f55\u5728\u6709\u591a\u6761\u5272\u8fb9\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u4e00\u6761\u5272\u8fb9\u3002\n- \u56e0\u4e3a $xor$ \u8fd0\u7b97\u5c31\u662f\u6570\u8bba\u6027\u8d28\u7684\u7834\u574f\u72c2\u9b54\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u80fd\u4ece\u201c\u89e3\u5bc6\u201d\u7684\u65b9\u9762\u4e0b\u624b\u3002\u90a3\u4e48\u5c31\u53ea\u6709\u4ece\u52a0\u5165\u8fb9\u7684\u5730\u65b9\u4e0b\u624b\u4e86\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e0d\u540c\u7684\u8fb9\u96c6\u4f7f\u5f97 $T$ \u4e0e\u5916\u754c\u53ea\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u820d\u5f03\u4e00\u4e9b\u8fb9\u7684\u4fe1\u606f\u3002\n- \u4f46\u662f\u53c8\u4e0d\u80fd\u771f\u7684\u820d\u5f03\uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u975e\u5747\u644a\u5206\u5c42\u56fe\u3002\u6bcf\u4e00\u5c42\u5f53\u4e2d\u7684\u8fb9\uff0c\u6709\u4e8c\u5206\u4e4b\u4e00\u7684\u6982\u7387\u4e0a\u5347\u5230\u66f4\u9ad8\u4e00\u7ea7\u7684\u56fe\u5c42\u3002\uff08\u6b64\u5904\u6211\u4eec\u5b9e\u73b0\u7684\u65f6\u5019\u624b\u64cd\u4e00\u4e0b $B$ \u5c42\uff0c$B$ \u4e0e $\\log n$ \u540c\u9636\uff09\n- \u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6b63\u786e\u6027\u6709\u5f85\u8bc1\u660e\u7684\u89e3\u6cd5\uff1a\n  - \u7ef4\u62a4\u5206\u5c42\u56fe\uff0c\u5176\u4e2d\u53ea\u7ef4\u62a4\u4e00\u9897\u751f\u6210\u6811\u7528\u4e8e\u8868\u793a\u6811\u8fb9\u548c\u8fde\u901a\u70b9\u96c6\uff0c\u90a3\u4e48\u663e\u7136\u975e\u6811\u5272\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u4ee3\u66ff\u8fb9\u3002\n  - \u6709\u8fb9\u52a0\u5165\u5c31\u968f\u4e00\u4e2a\u7f16\u53f7\uff0c\u7136\u540e\u5bf9\u4e8e\u4e24\u4e2a\u7aef\u70b9\u5f02\u6216\u4e0a\u53bb\uff0c\u5982\u679c\u4e24\u8fb9\u4e0d\u8fde\u901a\uff0c\u5219\u518d\u52a0\u5165\u6811\u8fb9\u3002\n  - \u6709\u8fb9\u5220\u9664\u5c31\u5bf9\u4e8e\u4e24\u4e2a\u7aef\u70b9\u5f02\u6216\u4e0a\u53bb\uff0c\u5982\u679c\u662f\u6811\u8fb9\u5c31\u65ad\u6389\u6811\u8fb9\u5e76\u6267\u884c\u4e00\u4e2a\u67e5\u627e\u4ee3\u66ff\u8fb9\u7684\u8fc7\u7a0b\uff08\u5c31\u662f\u7ef4\u62a4\u5b50\u6811\u5f02\u6216\u548c\uff0c\u4ee4\u5b50\u6811\u4e2d\u8fde\u901a\u70b9\u96c6\u4e3a $T$\uff09\u3002\n  - \u8003\u8651\u67e5\u627e\u4ee3\u66ff\u8fb9\uff1a\u6211\u4eec\u663e\u7136\u4f1a\u78b0\u5230\u4e0b\u9762\u4e09\u79cd\u60c5\u51b5\u3002\n    1. $xor(T)=0$\uff0c\u5927\u6982\u7387 $T$ \u5c31\u72ec\u7acb\u4e86\uff0c\u6ca1\u8fb9\u8fde\u51fa\u53bb\uff0c\u7ed3\u675f\u67e5\u8be2\u3002\n    2. $xor(T)=I$\uff0c\uff08$I$ \u6709\u8fb9\u7684\u7f16\u53f7\u6620\u5c04\uff09\uff0c\u5927\u6982\u7387 $I$ \u5c31\u662f\u4ee3\u66ff\u8fb9\uff0c\u9a8c\u8bc1\u540e\u7ed3\u675f\u67e5\u8be2\u3002\n    3. $xor(T)=I$\uff0c\uff08$I$ \u65e0\u8fb9\u7684\u7f16\u53f7\u6620\u5c04\uff09\uff0c\u90a3\u8bf4\u660e $T$ \u6709\u5f88\u591a\u6761\u8fde\u51fa\u53bb\u7684\u8fb9\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u786e\u5b9a\u4e00\u6761\u5b9e\u9645\u7684\u8fb9\u3002\u8fd9\u4e2a\u65f6\u5019\u5206\u5c42\u56fe\u5c31\u6709\u4f5c\u7528\u4e86\uff0c\u6211\u4eec\u8003\u8651\u5728\u5347\u9ad8\u4e00\u5c42\u7684\u56fe\u4e2d\u53bb\u67e5\u627e\u4ee3\u66ff\u8fb9\u3002\n- \u590d\u6742\u5ea6 $O(nB\\log n)$\uff0c\u7ef4\u62a4\u8fde\u901a\u5b50\u96c6\u9700\u8981\u4e00\u4e2a\u7ef4\u62a4\u52a8\u6001\u6811\u4e3a\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e $B$ \u5c42\u56fe\u6bcf\u5c42\u90fd\u9700\u8981\u7ef4\u62a4\u4fe1\u606f\u3002\u6b63\u786e\u6027\u7684\u6c42\u89e3\u8fc7\u7a0b\u7531\u4e8e\u7b14\u8005\u6c34\u5e73\u6709\u9650\uff0c\u5177\u4f53\u53c2\u8003 wikipedia\uff0c\u4e3a $(\\frac{8}{9})^{\\lg n}$\uff0c\u90a3\u4e48\u9009\u53d6\u4e00\u4e2a\u5408\u9002\u7684\u53c2\u6570 $C$ \u4f7f\u5f97 $(\\frac{8}{9})^{C\\lg n}$ \u8d8b\u8fd1\u4e8e $0$\uff0c\u5f97\u5230\u5408\u6cd5\u65b9\u6848\u3002\n- \u7b97\u6cd5\u7684\u5927\u81f4\u6d41\u7a0b\u5c31\u662f\u8fd9\u6837\u3002\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e00\u4e9b\u8f83\u597d\u7684\u968f\u673a\u65b9\u5f0f\u6765\u89e3\u51b3\u5404\u79cd\u968f\u673a\u6570\u7684\u51b2\u7a81\u4e0e\u5206\u5e03\u60c5\u51b5\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\uff0c\u5728\u6211\u7684\u5b9e\u73b0\u65b9\u6cd5\u4e2d\uff0c$C=12\uff0cB=12$ \u80fd\u591f\u901a\u8fc7 $luogu$ \u6570\u636e\uff0c$loj$  \u7531\u4e8e hack \u6570\u636e\u7684\u5b58\u5728\u5728\u53ea\u6539\u53d8 $B,C$  \u7684\u60c5\u51b5\u4e0b\u9057\u61be\u79bb\u573a\uff0chack \u6570\u636e \u6700\u5feb\u4e00\u6b21\u8dd1\u4e86 $22s$\u3002\n- \u672c\u7b97\u6cd5\u7684\u4f18\u70b9\u662f\u8131\u79bb\u4e86\u5747\u644a\u5206\u6790\uff0c\u5c06\u7ef4\u62a4\u5b50\u6811\u7684 LCT \u8f7d\u4f53\u6362\u4e3a\u53ef\u6301\u4e45\u5316 ETT \u5373\u53ef\u5b8c\u6210\u53ef\u6301\u4e45\u5316\u52a8\u6001\u56fe\u7684\u5b8c\u5168\u8fde\u901a\u6027\u3002\u7f3a\u70b9\u662f\u5e38\u6570\u5de8\u5927\uff0c\u7a7a\u95f4\u5360\u7528\u8f83\u5927\uff0c\u5bf9\u968f\u673a\u65b9\u5f0f\u8981\u6c42\u8f83\u9ad8\u3002\n- \u4f18\u5316\u65b9\u5411\uff1a\n  - \u968f\u673a\u4e0a\u7684\u4f18\u5316\uff0c\u8ba9\u7a0b\u5e8f\u7684\u201c\u968f\u673a\u201d\u53c2\u6570\u66f4\u8d34\u8fd1\u7406\u8bba\u5206\u6790\u3002\n  - \u7ed3\u6784\u4e0a\u7684\u4f18\u5316\uff0c\u8ba9 $cutset$ \u7ed3\u6784\u67e5\u627e\u5272\u8fb9\u6709\u66f4\u9ad8\u7684\u6548\u7387\u548c\u6b63\u786e\u3002\n- [code:Link - Cut - Tree,cutset structure](https://www.luogu.com.cn/paste/fkoeshxy)",
        "postTime": 1590054076,
        "uid": 27338,
        "name": "jerry3128",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5247 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001\u56fe\u5b8c\u5168\u8fde\u901a\u6027\u3011"
    },
    {
        "content": "### \u5982\u679c\u516c\u5f0f\u70b8\u4e86\u5c31\u8bf7\u53bb\u6d1b\u8c37\u535a\u5ba2\u770b\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\n## \u6765\u4e00\u7bc7\u6b63\u7ecf\u7684ETT\u9898\u89e3\u3002\n\n\u7a9d\u770b\u5230\u4ec5\u6709\u7684\u4e00\u7bc7\u66b4\u529b\u7684\u9898\u89e3\u5c31\u751f\u6c14\u2026\u2026\u8fd9\u4e2a\u66b4\u529b\u5f88\u8106\u5f31\uff0c\u968f\u4fbf\u5361\u5c31\u53ef\u4ee5\u5361\u6389\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1aETT\uff08\u5982\u679c\u4f60\u4e0d\u4f1a\uff0c\u8bf7\u81ea\u884c\u767e\u5ea6\uff0c\u4f5c\u8005\u4f1a\u65e5\u540e\u5199\u4e00\u4e2a\u5b66\u4e60\u7b14\u8bb0\u7684\uff0c\u5230\u65f6\u5019\u94fe\u63a5\u9644\u5728\u8fd9\u91cc\uff09\n\n## \u57fa\u672c\u601d\u60f3\n\n\u9996\u5148\u8003\u8651\u6211\u4eec\u7528\u4ec0\u4e48\u6765\u7ef4\u62a4\u4e00\u4e2a\u56fe\uff0c\u628a\u4e00\u4e2a\u56fe\u53d8\u6210\u4e00\u68f5\u6811\u3002\n\n\u90a3\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7ef4\u62a4\u751f\u6210\u6811\u3002\u7531\u4e8e\u53ef\u80fd\u4e0d\u592a\u8fde\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u751f\u6210\u6811\u7684\u68ee\u6797\u3002\n\n\u52a0\u8fb9\u64cd\u4f5c\u4e0d\u592a\u96be\uff0c\u76f4\u63a5\u5728 ETT \u91cc\u9762 link \u4e00\u4e0b\u5373\u53ef\u3002\u8be2\u95ee\u4e5f\u4e0d\u592a\u96be\uff0c\u5728 ETT \u91cc\u9762\u5199\u4e00\u4e2a findroot \u51fd\u6570\u5373\u53ef\u3002\n\n\u4f46\u662f\u9047\u5230\u5220\u8fb9\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5904\u7406\u662f\u4e0d\u53ef\u884c\u7684\u3002\u56e0\u4e3a\u5982\u679c\u5728\u751f\u6210\u6811\u4e2d\u5220\u6389\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u770b\u4e00\u4e0b\u662f\u5426\u53ef\u4ee5\u4f7f\u5f97\u5220\u8fb9\u4e4b\u540e\u4e0d\u8fde\u901a\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6302\u4e86\u3002\n\n\u5982\u4e0b\u56fe\uff0c\u5982\u679c\u5220\u53bb\u8fb9 $(2,7)$\uff0c\u5219\u4f60\u9700\u8981\u8003\u8651\u662f\u5426\u5b58\u5728 $(5,7)$ \u8fd9\u6837\u7684\u8fb9\u5b58\u5728\u4f7f\u5f97\u56fe\u4ecd\u65e7\u8fde\u901a\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uw72zhl2.png)\n\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u7c7b\u4f3c\u5206\u5c42\u56fe\u7684\u6a21\u578b\u3002\u6bcf\u6761\u8fb9\u7684\u5c42\u4e0d\u4f1a\u589e\u52a0\uff0c\u53ea\u4f1a\u51cf\u5c0f\u3002\n\n\u6211\u4eec\u8ba1\u6700\u9ad8\u5c42\u4e3a $\\log n$\uff0c\u6700\u5e95\u5c42\u4e3a $1$\u3002\u6bcf\u6761\u65b0\u52a0\u7684\u8fb9\u90fd\u5728 $\\log n$ \u5c42\u3002\n\n\u4ee4 $G_i$ \u4e3a\u5c42\u6570 $\\le i$ \u7684\u6240\u6709\u7684\u8fb9\u548c\u539f\u56fe\u4e2d\u6240\u6709\u70b9\u6784\u6210\u7684\u56fe\u3002\u663e\u7136\uff0c$G_{\\log n}$ \u5c31\u662f\u6574\u4e2a\u7684\u56fe\u3002\n\n\u7531\u5c42\u6570\u5355\u8c03\u9012\u51cf\u53ef\u77e5\n$$\nG_1 \\in G_2 \\in G_3 \\in \\cdots \\in G_{\\log n}\n$$\n\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u6027\u8d28\u4fdd\u8bc1\u4e86\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a $O(\\log ^2 n)$\u3002\n\n**\u3010\u6027\u8d281\u3011** $G_i$ \u4e2d\u6bcf\u4e2a\u8fde\u901a\u5757\u81f3\u591a\u6709 $2^i$ \u6761\u8fb9\u3002\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u96be\u8111\u8865\u5427\u2026\u2026\u8bd5\u7740\u60f3\u4e00\u60f3 $G_1$ \u548c $G_{\\log n}$\u3002\n\n**\u3010\u6027\u8d282\u3011**\u6211\u4eec\u4ee4 $F_i$ \u4e3a $G_i$ \u7684\u751f\u6210\u6811\uff08\u4e0d\u4e00\u5b9a\u6700\u5c0f\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ETT \u6765\u7ef4\u62a4 $F_i$\u3002\uff08\u663e\u7136\uff0c$F_{\\log n}$ \u4e3a\u7528\u4e8e\u8be2\u95ee\u7684 ETT\uff09\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u6709\u6027\u8d28\uff1a\n$$\nF_1 \\subseteq F_2 \\subseteq F_3 \\subseteq \\cdots \\subseteq F_{\\log n}\n$$\n\u6240\u4ee5\n$$\nF_i = F_{\\log n} \\cap G_i\n$$\n\u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u6709\u8da3\u7684\u7ed3\u8bba\uff1a$F_{\\log n}$ \u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u63a5\u4e0b\u6765\u770b\u64cd\u4f5c\n\n## insert( e = ( v, w )\u200b )\n\n\u8868\u793a $v$ \u5230 $w$ \u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\u4e0b\u6587\u4e2d\u7684 `Graph` \u8868\u793a $G_{\\log n}$\uff0c\u662f\u4e00\u4e2a `std::set` \u7684\u6570\u7ec4\uff0c\u4f5c\u7528\u7c7b\u4f3c\u90bb\u63a5\u8868\u3002\n\n`F[ i ]` \u8868\u793a $F_i$\uff0c \u662f\u4e00\u4e2a ETT \u7684\u68ee\u6797\uff08\u4f60\u6700\u597d\u5c01\u88c5\u4e00\u4e0b\uff0c\u5426\u5219\u4f60\u4f1a\u75af\u6389\u7684\uff09\u3002\n\n\u4e0a\u4ee3\u7801~\uff08\u60ca\u4e0d\u60ca\u559c\uff0c\u662f\u4f2a\u4ee3\u7801\uff01\uff09\n\n```c++\nGraph[ v ]. insert( e ), Graph[ w ]. insert( e )\ne. level = log n\nif ( ! F[ log n ]. query( e ) ) \n\tF[ log n ]. insert( e )\n```\n\n## query( v, w )\n\n\u4e0d\u7528\u89e3\u91ca\u3002\n\n```c++\nreturn F[ log n ]. findrt( v ) == F[ log n ]. findrt( w )\n```\n\n## delete( e = ( v, w ) )\n\n\u5b9e\u9645\u4e0a\u7684\u7a0b\u5e8f\u6bd4\u8fd9\u4e2a\u590d\u6742\u2026\u2026\n\n```c++\nGraph[ v ]. erase( e ), Graph[ w ]. erase( e )\nif ( e \\in F[ log n ] )\n\tfor i = e. level to log n do\n\t\tF[ i ]. delete( e )\n\tfor i = e. level to log n do\n\t\t\u4ee4 Tv = F[ i ] \u4e2d\u6709 v \u7684\u90a3\u68f5\u6811\uff0cTw = F[ i ] \u4e2d\u6709 w \u7684\u90a3\u68f5\u6811\n\t\tif ( Tv. size > Tw.size ) \n\t\t\tswap( Tv, Tw ) // \u4f60\u53ef\u4ee5\u7406\u89e3 Tv \u4e0e T_w \u4e3a\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ea4\u6362\u3002\n\t\tfor each \u7b2c i \u5c42\u4e2d\u7684\u8fb9 e' = ( x, y )\n\t\t\tif ( x \\in F[ v ] )\n\t\t\t\tif ( y \\in Tw )\n\t\t\t\t\tF[ i ]. insert( e' )\n\t\t\t\t\treturn\n\t\t\t\telse \n\t\t\t\tif (y \\in Tb )\n\t\t\t\t\te'. level = i - 1\n```\n\n\u6765\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4e2d\u95f4\u4e00\u4e9b\u4e1c\u897f\u662f\u5bf9\u7684\u3002\n\n\u56e0\u4e3a $|F_i| \\le 2^i$\uff0c$T_v, T_w \\in F_i$\n\n\u6240\u4ee5 $|T_v| + |T_w| \\le 2^i$\n\n\u56e0\u4e3a $|T_v| \\le |T_w|$\n\n\u6240\u4ee5 $|T_v| \\le 2^{i - 1}$\n\n\n\n\u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u662f $O(log ^2 n)$\uff0c\u662f delete \u7684\u4e00\u4e2a log \u548c ETT \u7684\u4e00\u4e2a log\u3002",
        "postTime": 1582872489,
        "uid": 302509,
        "name": "zghtyarecrenj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5247 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001\u56fe\u5b8c\u5168\u8fde\u901a\u6027\u3011"
    },
    {
        "content": "[jerry3128](https://www.luogu.com.cn/blog/user27338/solution-p5247) \u548c [zghtyarecrenj](https://www.luogu.com.cn/blog/zght/solution-p5247) \u5927\u4f6c\u90fd\u8bb2\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u6f0f\u4e86\u4e00\u4e9b\u7ec6\u8282\u3002\u8fd9\u91cc\u7b80\u5355\u8865\u5145\u4e00\u70b9\u3002\n\nHolm-de Lichtenberg-Thorup \u7b97\u6cd5\u7684\u539f\u59cb\u8bba\u6587\uff1a<https://u.cs.biu.ac.il/~rodittl/p723-holm.pdf>\n\n\u7b97\u6cd5\u7684\u7b80\u5316\u63cf\u8ff0\u5982\u4e0b\u3002\n\n\u7ed9\u8fb9\u5206\u5c42\uff0c\u6bcf\u6761\u8fb9\u4e00\u5f00\u59cb\u90fd\u5728\u7b2c 0 \u5c42\uff0c\u7136\u540e\u4e4b\u540e\u53ef\u4ee5\u79fb\u5230\u4e0a\u5c42\uff0c\u5b9a\u4e49 $l(e)$ \u4e3a\u8fb9 $e$ \u7684\u5c42\u53f7\u3002\u5b9a\u4e49 $G_i$ \u4e3a\u6240\u6709\u5c42\u53f7\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u8fb9\u6784\u6210\u7684\u56fe\u3002\u4ee4$F_0$ \u4e3a $G_0$ \u7684\u751f\u6210\u6811\u68ee\u6797\uff0c\u4ee4 $F_i$ \u4e3a $G_i \\cap F_0$\u3002\u4ee4 $T_i$\u4e3a $F_i$ \u4e2d\u5c42\u53f7\u521a\u597d\u4e3a $i$ \u7684\u8fb9\u7684\u96c6\u5408\uff0c\u5373\u5c42\u53f7\u521a\u597d\u4e3a $i$ \u7684\u6811\u8fb9\u7684\u96c6\u5408\u3002\u4ee4 $N_i$ \u4e3a $G_i-F_i$ \u4e2d\u5c42\u53f7\u521a\u597d\u4e3a $i$ \u7684\u8fb9\u7684\u96c6\u5408\uff0c\u5373\u5c42\u53f7\u4e3a $i$ \u7684\u975e\u6811\u8fb9\u7684\u96c6\u5408\u3002\u4e0b\u9762\u6211\u4eec\u53ea\u7ef4\u62a4 $F_i$\u3001$T_i$\u3001$N_i$\u3002\n\n\u6211\u4eec\u7ef4\u62a4\u8fd9\u51e0\u4e2a\u6027\u8d28\uff1a\n\n1. \u5bf9\u4efb\u4f55\u975e\u6811\u8fb9 $e=(x, y)$\uff0c$x$ \u548c $y$ \u90fd\u5728 $F_{l(e)}$\u4e2d\u8fde\u901a\u3002\n\n2. $F_i$ \u4e2d\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570\u6700\u591a\u4e3a $\\lfloor n/2^i \\rfloor$\uff0c\u8fd9\u6837\u6700\u5927\u7684\u5c42\u53f7 $l_{max}$\u5c31\u662f $\\lfloor log_2(n) \\rfloor$\u3002\n\n3. \u5bf9\u4efb\u4f55\u6811\u8fb9 $e=(x, y)$\uff0c\u5bf9\u4efb\u4f55 $i>l(e)$\uff0c$x$ \u548c $y$ \u5728 $F_i$\u4e2d\u90fd\u4e0d\u8fde\u901a\u3002\n\n- \u67e5\u8be2 $x$ \u548c $y$ \u662f\u5426\u8fde\u901a\n\n\u76f4\u63a5\u67e5\u8be2 $x$ \u548c $y$ \u5728 $F_0$ \u4e2d\u662f\u5426\u8fde\u901a\u5373\u53ef\u3002\n\n- \u63d2\u5165\u8fb9 $e = (x, y)$\n\n\u4ee4 $l(e)=0$\uff0c\u7136\u540e\u5224\u65ad $x$ \u548c $y$ \u662f\u4e0d\u662f\u8fde\u901a\u7684\uff0c\u5982\u679c\u8fde\u901a\u8bf4\u660e\u5b83\u662f\u975e\u6811\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\u5230 $N_0$ \u4e2d\u3002\u5982\u679c\u4e0d\u8fde\u901a\u8bf4\u660e\u5b83\u662f\u6811\u8fb9\uff0c\u52a0\u5165\u5230 $F_0$ \u548c $T_0$ \u4e2d\u3002\n\n- \u5220\u9664\u8fb9 $e = (x, y)$\n\n\u5148\u770b $x$ \u548c $y$ \u5728\u4e0d\u5728 $N_{l(e)}$ \u4e2d\uff0c\u5982\u679c\u5728\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece $N_{l(e)}$ \u4e2d\u5220\u6389\u5b83\uff0c\u4e0d\u5f71\u54cd\u8fde\u901a\u6027\u3002\n\n\u5982\u679c\u4e0d\u5728 $N_{l(e)}$ \u4e2d\uff0c\u90a3\u80af\u5b9a\u5728 $T_{l(e)}$\u4e2d\u3002\u5c06\u5176\u4ece $T_{l(e)}$\uff0c\u4ee5\u53ca $F_0, F_1, \\cdots, F_{l(e)}$ \u4e2d\u5220\u53bb\u3002\u7136\u540e\u6211\u4eec\u5c31\u8981\u5c1d\u8bd5\u627e\u4e00\u6761\u8fb9\u5c06 $x$ \u548c $y$ \u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u91cd\u65b0\u8fde\u63a5\u8d77\u6765\uff0c\u7531\u4e8e\u6027\u8d28 1 \u548c\u6027\u8d28 3\uff0c\u8fd9\u6837\u7684\u8fb9\u7684\u5c42\u53f7\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e $l(e)$\u3002\u6211\u4eec\u4ece $l(e)$ \u5c42\u5f00\u59cb\uff0c\u4e00\u76f4\u5c1d\u8bd5\u5230\u7b2c 0 \u5c42\uff0c\u5982\u679c\u5728\u67d0\u5c42\u627e\u5230\u4e86\uff0c\u5c31\u6210\u529f\uff0c\u5426\u5219\u5c31\u5931\u8d25\u3002\n\n- Reconnect($(x, y)$, $l$)\uff0c\u5728\u7b2c $l$ \u5c42\u5c1d\u8bd5\u91cd\u65b0\u8fde\u63a5 $x$ \u548c $y$ \u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\n\n\u5047\u8bbe $X$ \u4e3a $x$ \u6240\u5904\u7684\u8fde\u901a\u5206\u91cf\uff0c$Y$ \u4e3a $y$ \u6240\u5904\u7684\u8fde\u901a\u5206\u91cf\u3002\u4e0d\u5931\u4e00\u822c\u6027\uff0c\u5047\u8bbe $X$ \u7684\u8282\u70b9\u6570\u4e0d\u591a\u4e8e $Y$ \u7684\u8282\u70b9\u6570\u3002\u6211\u4eec\u641c\u7d22\u6240\u6709\u5728 $X$ \u4e2d\u7684\u975e\u6811\u8fb9 $e = (u, v)$\uff0c\u5982\u679c $v$ \u5728 $Y$ \u4e2d\u7684\u8bdd\uff0c\u5c31\u8bf4\u660e $e$ \u53ef\u4ee5\u8fde\u63a5\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5c06 $e$ \u4ece\u975e\u6811\u8fb9\u53d8\u6210\u6811\u8fb9\uff0c\u5373\u5c06 $e$ \u4ece $N_l$ \u4e2d\u5220\u9664\uff0c\u5e76\u628a $e$ \u52a0\u5165\u5230 $T_l$ \u4ee5\u53ca $F_0, F_1, \\cdots, F_l$ \u4e2d\u3002\n\n\u5982\u679c $v$ \u4e0d\u5728 $Y$ \u4e2d\uff0c\u90a3\u80af\u5b9a\u5728 $X$ \u4e2d\u3002\u6211\u4eec\u5c06 $e$ \u79fb\u52a8\u5230\u4e0a\u5c42\u53bb\uff0c\u5373\u4ee4 $l(e)$ \u81ea\u589e 1\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u7ef4\u62a4\u6027\u8d28 1\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4fdd\u8bc1 $u$ \u548c $v$ \u5728 $F_{l+1}$ \u4e2d\u8fde\u901a\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981\u6211\u4eec\u8ba9 $X$ \u7684\u751f\u6210\u6811\u7684\u6240\u6709\u8fb9\u90fd\u5728 $F_{l+1}$ \u5c42\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u5728\u5f00\u59cb\u641c\u7d22 $X$ \u7684\u975e\u6811\u8fb9\u524d\uff0c\u6211\u4eec\u5148\u5c06 $T_l$ \u4e2d\u5728 $X$ \u4e2d\u7684\u8fb9\u5168\u90e8\u79fb\u52a8\u5230 $T_{l+1}$ \u4e2d\uff0c\u5e76\u4e14\u5728 $F_{l+1}$\u4e2d\u4e5f\u52a0\u5165\u8fd9\u4e9b\u8fb9\u3002\n\n\u6211\u4eec\u5047\u8bbe\u6027\u8d28 2 \u5728\u7b2c $i$ \u5c42\u6210\u7acb\uff0c\u5373\u7b2c $i$ \u5c42\u4e2d\u6240\u6709\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570\u4e3a $\\lfloor n/2^i \\rfloor$\u3002\u7b2c $i+1$ \u5c42\u4e2d\u7684\u8fde\u901a\u5206\u91cf\u53ea\u5728\u5c06\u7b2c $i$ \u5c42\u7684\u6811\u8fb9\u79fb\u52a8\u5230\u7b2c $i+1$ \u5c42\u4e2d\u65f6\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u8bc1\u660e\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u53d8\u5316\u7684\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570\u6700\u591a\u4e3a $\\lfloor n/2^{i+1} \\rfloor$ \u5373\u53ef\u3002\u5c06\u7b2c $i$ \u5c42\u7684\u6811\u8fb9\u79fb\u52a8\u5230\u7b2c $i+1$ \u5c42\u65f6\uff0c\u76f8\u5f53\u4e8e\u5728\u7b2c $i+1$ \u5c42\u5c06\u4e00\u4e9b\u5c0f\u8fde\u901a\u5206\u91cf\u5408\u5e76\u6210\u4e00\u4e2a\u70b9\u96c6\u7b49\u4e8e $X$ \u4e2d\u7684\u70b9\u96c6\u7684\u8fde\u901a\u5206\u91cf\uff0c\u800c\u7531\u4e8e $X$ \u7684\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 $\\lfloor n/2^{i+1} \\rfloor$\uff0c\u6240\u4ee5\u7b2c $i+1$ \u5c42\u4e2d\u6240\u6709\u7684\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u6570\u90fd\u4e0d\u8d85\u8fc7 $\\lfloor n/2^{i+1} \\rfloor$\u3002\u6240\u4ee5\u6027\u8d28 2 \u6210\u7acb\u3002\n\n\u7531\u4e8e\u6700\u5927\u5c42\u6570\u4e3a $O(\\log n)$\uff0c\u800c\u4e14\u8fb9\u7684\u5c42\u53f7\u5355\u8c03\u9012\u589e\uff0c\u5c42\u53f7\u4e0d\u53d8\u65f6\uff0c\u8fb9\u53ea\u4f1a\u4ece\u975e\u6811\u8fb9\u53d8\u6210\u6811\u8fb9\u3002\u6240\u4ee5\u6bcf\u6761\u8fb9\u6211\u4eec\u90fd\u53ea\u4f1a\u64cd\u4f5c $O(\\log n)$ \u6b21\u3002\u5047\u5982\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u63a7\u5236\u5728 $O(\\log n)$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u63d2\u5165\u548c\u5220\u9664\u7684\u5747\u644a\u65f6\u95f4\u4e3a $O(\\log^2 n)$ \u7684\u7b97\u6cd5\u3002\n\n\u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e00\u6761\u8fb9\u65f6\u53ea\u6709\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a\n\n1. \u67e5\u8be2\u67d0\u70b9\u5728 $F_i$ \u91cc\u7684\u54ea\u68f5\u6811\u4e2d\u3002\n\n2. \u7528\u8fd9\u6761\u8fb9\u5c06\u4e24\u68f5\u6811\u8fde\u8d77\u6765\uff0c\u6216\u8005\u5c06\u8fd9\u6761\u8fb9\u5220\u6389\uff0c\u5f97\u5230\u4e24\u68f5\u6811\u3002\n\n3. \u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u5230 $N_i$ \u4e2d\uff0c\u6216\u8005\u4ece $N_i$ \u4e2d\u5220\u6389\u3002\n\n4. \u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u5230 $T_i$ \u4e2d\uff0c\u6216\u8005\u4ece $T_i$ \u4e2d\u5220\u6389\u3002\n\n5. \u904d\u5386\u4ee5 $F_i$ \u4e2d\u6307\u5b9a\u5b50\u6811\u91cc\u7684\u8282\u70b9\u4e3a\u7aef\u70b9\u7684 $N_i$ \u548c $T_i$ \u91cc\u7684\u6240\u6709\u8fb9\u3002\n\n\u5176\u4e2d\uff0c\u67e5\u8be2\u5728\u54ea\u68f5\u6811\u4e2d\uff0c\u4ee5\u53ca\u5728\u68ee\u6797\u91cc\u589e\u5220\u6811\u8fb9\u53ef\u4ee5\u901a\u8fc7\u7528 LCT \u6216\u8005 ETT \u6765\u7ef4\u62a4 $F_i$ \u5b9e\u73b0 $O(\\log n)$ \u7684\u5747\u644a\u590d\u6742\u5ea6\u3002\n\n\u904d\u5386\u4e0e\u6307\u5b9a\u5b50\u6811\u76f8\u8fde\u7684 $N_i$ \u548c $T_i$ \u4e2d\u7684\u8fb9\u65f6\uff0c\u663e\u7136\u4e0d\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u8fd9\u4e2a\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\uff0c\u8fd9\u6837\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u8fb9\u7684\u6700\u574f\u60c5\u51b5\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u5230\u5728 $O(\\log n)$ \u7684\u65f6\u95f4\u5185\u627e\u5230\u4e00\u6761\u8fb9\u5373\u53ef\u3002\u5047\u5982\u6211\u4eec\u8981\u904d\u5386\u4e0e\u6307\u5b9a\u5b50\u6811\u76f8\u8fde\u7684 $N_i$ \u91cc\u7684\u8fb9\uff0c\u5e76\u4e14\u6211\u4eec\u7528 LCT \u6765\u7ef4\u62a4 $F_i$\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5728 LCT \u4e2d\u7ef4\u62a4 auxiliary tree \u7684\u6bcf\u4e2a\u5b50\u6811\u5185\u7684\u4efb\u610f\u4e00\u4e2a\u5b58\u5728\u67d0\u6761 $N_i$ \u4e2d\u7684\u8fb9\u4e0e\u4e4b\u76f8\u8fde\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u5c06\u8fd9\u4e2a\u7f16\u53f7\u79f0\u4e3a tag\u3002\u8981\u627e\u4e00\u6761\u4e0e\u539f\u56fe\u4e2d\u7684\u6307\u5b9a\u5b50\u6811\u76f8\u8fde\u7684 $N_i$ \u4e2d\u7684\u8fb9\u65f6\uff0c\u53ea\u9700\u8981\u4ece auxiliary tree \u7684\u6839\u8282\u70b9\u4e2d\u62ff\u51fa tag\uff0c\u5047\u8bbe\u662f $u$\uff0c\u7136\u540e\u627e\u4ee5 $u$ \u4e3a\u7aef\u70b9\u7684 $N_i$ \u4e2d\u7684\u70b9\u5373\u53ef\u3002\n\nLCT \u7684\u8282\u70b9\u53ea\u6709\u6307\u5411 preferred child \u7684\u6307\u9488\uff0c\u6ca1\u6709\u6307\u5411 non-preferred children \u7684\u6307\u9488\uff0c\u4f46\u662f\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u9700\u8981\u4ece non-preferred children \u6240\u5728\u7684\u5b50\u6811\u7684\u4fe1\u606f\u3002\u901a\u5e38\u8fd9\u662f\u901a\u8fc7 Top Tree \u6765\u5b9e\u73b0\u7684\uff0c\u5373\u7528 splay \u6765\u5408\u5e76 non-preferred children \u6240\u5728\u7684\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u7136\u540e\u901a\u8fc7\u6839\u5c06\u5408\u5e76\u540e\u7684\u4fe1\u606f\u4f20\u7ed9\u8282\u70b9\uff08\u53c2\u8003\uff1a<https://www.cnblogs.com/Khada-Jhin/p/9743397.html>\uff09\u3002\u4f46\u662f\u8fd9\u6837\u4ee3\u7801\u91cf\u592a\u5927\u4e86\u3002\n\n\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5176\u5b9e\u4e0d\u9700\u8981\u5c06\u6240\u6709 non-preferred children \u6240\u5728\u7684\u5b50\u6811\u7684\u4fe1\u606f\u5408\u5e76\u8d77\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6709 tag \u7684\u5b50\u6811\u4e2d\u968f\u4fbf\u9009\u4e00\u4e2a\uff0c\u5c31\u53ef\u4ee5\u628a\u5b83\u7684 tag \u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684 tag \u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u7ef4\u62a4\u6240\u6709\u6709 tag \u7684 non-preferred children \u7684\u7f16\u53f7\uff0c\u66f4\u65b0\u8282\u70b9 $x$ \u7684 tag \u7684\u6d41\u7a0b\u5982\u4e0b\u3002\n\n```\nif (\u6709\u8fb9\u8fde\u7740\u81ea\u5df1) {\n\tx.tag = x\n} else if (x.left_child.tag != NIL) {\n\tx.tag = x.left_child.tag\n} else if (x.right_child != NIL) {\n\tx.tag = x.right_child.tag\n} else if (x.tagged_non_preferred_children is not empty) {\n\tc = x.tagged_non_preferred_children\u91cc\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\n\tx.tag = c.tag\n} else {\n\tx.tag = NIL\n}\n```\n\n\u5411 $N_i$ \u4e2d\u63d2\u5165\u8fb9\u65f6\uff0c\u5047\u5982\u67d0\u4e2a\u70b9 $u$ \u539f\u5148\u6ca1\u6709\u4e0e\u4e4b\u76f8\u8fde\u7684 $N_i$ \u4e2d\u7684\u8fb9\uff0c\u90a3\u5c31 access($u$)\uff0c\u518d\u5c06\u8fd9\u6761\u8fb9\u63d2\u5165\u5230 $N_i$ \u4e2d\uff0c\u4ece\u800c\u4fdd\u8bc1 tag \u90fd\u662f\u6709\u6548\u7684\u3002\u540c\u6837\uff0c\u5220\u9664\u65f6\uff0c\u5982\u679c\u67d0\u4e2a\u70b9 $u$ \u539f\u5148\u53ea\u6709\u4e00\u6761\u4e0e\u4e4b\u76f8\u8fde\u7684 $N_i$ \u4e2d\u7684\u8fb9\uff0c\u90a3\u5c31 access($u$)\uff0c\u518d\u5c06\u8fd9\u6761\u8fb9\u4ece $N_i$ \u4e2d\u5220\u6389\u3002\n\n\u7ed9\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\u6253\u4e2a\u5e7f\u544a\uff1a<https://seekstar.github.io/2021/11/20/%E6%B4%9B%E8%B0%B7p5247-%E5%8A%A8%E6%80%81%E5%9B%BE%E5%AE%8C%E5%85%A8%E8%BF%9E%E9%80%9A%E6%80%A7-lct%E8%A7%A3%E6%B3%95/>\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <unordered_set>\n#include <stack>\n#include <unordered_map>\n#include <cstring>\n\nusing namespace std;\n\n#define MAXN 5011\n#define MAX_LEVEL 15\n\nstruct LCT {\n\tint c[MAXN][2], fa[MAXN], sta[MAXN];\n\tbool r[MAXN];\n\t// subtree_size2 is the sum of the sizes of non-preferred children's subtrees\n\tint subtree_size[MAXN], subtree_size2[MAXN];\n\tstruct Tag {\n\t\t// Only stores edges of this level.\n\t\tunordered_set<int> edges;\n\t\tint tag;\n\t\tunordered_set<int> tagged_non_preferred_children;\n\t} tag_tree[MAXN], tag_non_tree[MAXN];\n\n\tvoid update_tag(Tag tags[], int x) {\n\t\tif (!tags[x].edges.empty()) {\n\t\t\ttags[x].tag = x;\n\t\t} else if (tags[ls(x)].tag) {\n\t\t\ttags[x].tag = tags[ls(x)].tag;\n\t\t} else if (tags[rs(x)].tag) {\n\t\t\ttags[x].tag = tags[rs(x)].tag;\n\t\t} else if (!tags[x].tagged_non_preferred_children.empty()) {\n\t\t\ttags[x].tag = tags[*tags[x].tagged_non_preferred_children.begin()].tag;\n\t\t} else {\n\t\t\ttags[x].tag = 0;\n\t\t}\n\t}\n\tvoid new_non_preferred_child(int x) {\n\t\tif (fa[x] == 0)\n\t\t\treturn;\n\t\tsubtree_size2[fa[x]] += subtree_size[x];\n\t\tif (tag_tree[x].tag)\n\t\t\ttag_tree[fa[x]].tagged_non_preferred_children.insert(x);\n\t\tif (tag_non_tree[x].tag)\n\t\t\ttag_non_tree[fa[x]].tagged_non_preferred_children.insert(x);\n\t}\n\tvoid delete_non_preferred_child(int x) {\n\t\tif (fa[x] == 0)\n\t\t\treturn;\n\t\tsubtree_size2[fa[x]] -= subtree_size[x];\n\t\tif (tag_tree[x].tag)\n\t\t\ttag_tree[fa[x]].tagged_non_preferred_children.erase(x);\n\t\tif (tag_non_tree[x].tag)\n\t\t\ttag_non_tree[fa[x]].tagged_non_preferred_children.erase(x);\n\t}\n\n\tinline int& ls(int rt) {\n\t\treturn c[rt][0];\n\t}\n\tinline int& rs(int rt) {\n\t\treturn c[rt][1];\n\t}\n\tinline bool not_splay_rt(int x) {\n\t\treturn ls(fa[x]) == x || rs(fa[x]) == x;\n\t}\n\tinline int side(int x) {\n\t\treturn x == rs(fa[x]);\n\t}\n\tvoid Init(int n) {\n\t\t// Initially every node is a tree by itself.\n\t\t// memset all to 0.\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tsubtree_size[i] = 1;\n\t\t}\n\t}\n\tinline void pushr(int x) {\n\t\tswap(ls(x), rs(x));\n\t\tr[x] ^= 1;\n\t}\n\tinline void pushdown(int x) {\n\t\tif (r[x]) {\n\t\t\tif (ls(x))\n\t\t\t\tpushr(ls(x));\n\t\t\tif (rs(x))\n\t\t\t\tpushr(rs(x));\n\t\t\tr[x] = false;\n\t\t}\n\t}\n\tinline void __pushup(int x) {\n\t\tupdate_tag(tag_tree, x);\n\t\tupdate_tag(tag_non_tree, x);\n\t\tsubtree_size[x] = subtree_size[ls(x)] + subtree_size[rs(x)] + 1 + subtree_size2[x];\n\t}\n\t// At first x is not in its tagged_non_preferred_children\n\tinline void __pushup_splay_rt(int x) {\n\t\t__pushup(x);\n\t\tnew_non_preferred_child(x);\n\t\t// No need to update tag[fa[x]], because if it was in this subtree, then it is still in this subtree.\n\t}\n\t// tag[x] is not updated.\n\tvoid __rotate_up(int x) {\n\t\tint y = fa[x], z = fa[y], side_x = side(x), w = c[x][side_x ^ 1];\n\t\tfa[x] = z;\n\t\tif (not_splay_rt(y))\n\t\t\tc[z][side(y)] = x;\n\t\tif (w)\n\t\t\tfa[w] = y;\n\t\tc[y][side_x] = w;\n\t\tfa[y] = x;\n\t\tc[x][side_x ^ 1] = y;\n\t\t__pushup(y);\n\t}\n\t// tag[x] is not updated.\n\t// The original splay root is removed from its father's tagged_non_preferred_children.\n\tvoid __splay(int x) {\n\t\tint y = x, top = 0;\n\t\twhile(1) {\n\t\t\tsta[++top] = y;\n\t\t\tif (!not_splay_rt(y))\n\t\t\t\tbreak;\n\t\t\ty = fa[y];\n\t\t}\n\t\tint to = fa[y];\n\t\tdelete_non_preferred_child(y);\n\t\twhile (top)\n\t\t\tpushdown(sta[top--]);\n\t\twhile (fa[x] != to) {\n\t\t\tint y = fa[x];\n\t\t\tif (fa[y] != to)\n\t\t\t\t__rotate_up(side(x) == side(y) ? y : x);\n\t\t\t__rotate_up(x);\n\t\t}\n\t}\n\tvoid splay(int x) {\n\t\t__splay(x);\n\t\t__pushup_splay_rt(x);\n\t}\n\tvoid access(int x) {\n\t\tint ori_x = x;\n\t\tfor (int w = 0; x; w = x, x = fa[x]) {\n\t\t\t__splay(x);\n\t\t\tdelete_non_preferred_child(w);\n\t\t\tnew_non_preferred_child(rs(x));\n\t\t\trs(x) = w;\n\t\t\t__pushup_splay_rt(x);\n\t\t}\n\t\t__splay(ori_x);\n\t\t__pushup(ori_x);\n\t}\n\tint find_root(int x) {\n\t\taccess(x);\n\t\tfor (; ls(x); x = ls(x))\n\t\t\tpushdown(x);\n\t\t__splay(x);\n\t\t__pushup(x);\n\t\treturn x;\n\t}\n\tinline void make_root(int x) {\n\t\taccess(x);\n\t\tpushr(x);\n\t}\n\tvoid __link(int x, int y) {\n\t\t// If simply fa[x] = y, the complexity might be wrong.\n\t\taccess(y);\n\t\tpushdown(x);\n\t\tfa[y] = x;\n\t\tls(x) = y;\n\t\t__pushup(x); // Might be unnecessary\n\t}\n\tinline void link_new(int x, int y) {\n\t\tmake_root(x);\n\t\t__link(x, y);\n\t}\n\tinline void link(int x, int y) {\n\t\tmake_root(x);\n\t\tif (find_root(y) == x)\n\t\t\treturn;\n\t\t__link(x, y);\n\t}\n\tinline void split(int x, int y) {\n\t\tmake_root(x);\n\t\taccess(y);\n\t}\n\tvoid cut_existing(int x, int y) {\n\t\tsplit(x, y);\n\t\tfa[x] = ls(y) = 0;\n\t\t__pushup(y); // Might be unnecessary\n\t}\n\tvoid cut(int x, int y) {\n\t\tsplit(x, y);\n\t\tif (ls(y) != x || rs(x) != 0)\n\t\t\treturn;\t// No such edge (x, y)\n\t\tfa[x] = ls(y) = 0;\n\t\t__pushup(y); // Might be unnecessary\n\t}\n\tstd::unordered_set<int> take_out_edges(Tag type[], int x) {\n\t\taccess(x);\n\t\tauto tmp = std::unordered_set<int>();\n\t\tswap(tmp, type[x].edges);\n\t\tupdate_tag(type, x);\n\t\treturn std::move(tmp);\n\t}\n\tvoid add_directed_edge(Tag type[], int x, int y) {\n\t\tif (type[x].edges.empty()) {\n\t\t\taccess(x);\n\t\t\ttype[x].edges.insert(y);\n\t\t\tupdate_tag(type, x);\n\t\t} else {\n\t\t\ttype[x].edges.insert(y);\n\t\t}\n\t}\n\tvoid delete_directed_edge(Tag type[], int x, int y) {\n\t\tif (type[x].edges.size() == 1) {\n\t\t\taccess(x);\n\t\t\ttype[x].edges.erase(y);\n\t\t\tupdate_tag(type, x);\n\t\t} else {\n\t\t\ttype[x].edges.erase(y);\n\t\t}\n\t}\n\tvoid new_tree_edge(int x, int y) {\n\t\tlink_new(x, y);\n\t\tadd_directed_edge(tag_tree, x, y);\n\t\tadd_directed_edge(tag_tree, y, x);\n\t}\n};\n\nstruct DynamicConnectivity {\n\tstruct LCT F[MAX_LEVEL];\n\tunordered_map<int, unordered_map<int, int> > level;\n\tvoid Init(int n) {\n\t\tfor (int i = 0; (1 << i) <= n; ++i)\n\t\t\tF[i].Init(n);\n\t}\n\t// Assume no duplicate edge\n\tvoid link_new(int x, int y) {\n\t\tlevel[x][y] = 0;\n\t\tlevel[y][x] = 0;\n\t\tif (F[0].find_root(x) == F[0].find_root(y)) {\n\t\t\tF[0].add_directed_edge(F[0].tag_non_tree, y, x);\n\t\t\tF[0].add_directed_edge(F[0].tag_non_tree, x, y);\n\t\t} else {\n\t\t\tF[0].new_tree_edge(x, y);\n\t\t}\n\t}\n\tbool reconnect(int x, int y, int l) {\n\t\tF[l].access(x);\n\t\tF[l].access(y);\n\t\tif (F[l].subtree_size[x] > F[l].subtree_size[y])\n\t\t\tswap(x, y);\n\t\twhile (1) {\n\t\t\tF[l].access(x);\n\t\t\tint u = F[l].tag_tree[x].tag;\n\t\t\tif (u == 0)\n\t\t\t\tbreak;\n\t\t\tauto tmp = F[l].take_out_edges(F[l].tag_tree, u);\n\t\t\tfor (int v : tmp) {\n\t\t\t\tF[l].delete_directed_edge(F[l].tag_tree, v, u);\n\t\t\t\tF[l+1].new_tree_edge(u, v);\n\t\t\t\t++level[u][v];\n\t\t\t\t++level[v][u];\n\t\t\t}\n\t\t}\n\n\t\ty = F[l].find_root(y);\n\t\twhile (1) {\n\t\t\tF[l].access(x);\n\t\t\tint u = F[l].tag_non_tree[x].tag;\n\t\t\tif (u == 0)\n\t\t\t\tbreak;\n\t\t\tauto tmp = F[l].take_out_edges(F[l].tag_non_tree, u);\n\t\t\tdo {\n\t\t\t\tauto it = tmp.begin();\n\t\t\t\tint v = *it;\n\t\t\t\ttmp.erase(it);\n\t\t\t\tF[l].delete_directed_edge(F[l].tag_non_tree, v, u);\n\t\t\t\tif (F[l].find_root(v) == y) {\n\t\t\t\t\tif (!tmp.empty()) {\n\t\t\t\t\t\tF[l].access(u);\n\t\t\t\t\t\tswap(tmp, F[l].tag_non_tree[u].edges);\n\t\t\t\t\t\tF[l].update_tag(F[l].tag_non_tree, u);\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < l; ++i)\n\t\t\t\t\t\tF[i].link_new(u, v);\n\t\t\t\t\tF[l].new_tree_edge(u, v);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tF[l+1].add_directed_edge(F[l+1].tag_non_tree, u, v);\n\t\t\t\t\tF[l+1].add_directed_edge(F[l+1].tag_non_tree, v, u);\n\t\t\t\t\t++level[u][v];\n\t\t\t\t\t++level[v][u];\n\t\t\t\t}\n\t\t\t} while (!tmp.empty());\n\t\t};\n\t\treturn false;\n\t}\n\tvoid cut_existing(int x, int y) {\n\t\tauto it1 = level[x].find(y);\n\t\tint l = it1->second;\n\t\tlevel[x].erase(it1);\n\t\tlevel[y].erase(x);\n\n\t\tauto& s = F[l].tag_non_tree[x].edges;\n\t\tif (s.find(y) != s.end()) {\n\t\t\tF[l].delete_directed_edge(F[l].tag_non_tree, x, y);\n\t\t\tF[l].delete_directed_edge(F[l].tag_non_tree, y, x);\n\t\t\treturn;\n\t\t}\n\t\tF[l].delete_directed_edge(F[l].tag_tree, x, y);\n\t\tF[l].delete_directed_edge(F[l].tag_tree, y, x);\n\t\tfor (int i = 0; i <= l; ++i)\n\t\t\tF[i].cut_existing(x, y);\n\t\twhile (1) {\n\t\t\tif (reconnect(x, y, l))\n\t\t\t\tbreak;\n\t\t\tif (l == 0)\n\t\t\t\tbreak;\n\t\t\t--l;\n\t\t}\n\t}\n\tbool is_connected(int x, int y) {\n\t\treturn F[0].find_root(x) == F[0].find_root(y);\n\t}\n};\n\nint main() {\n\tint n, m;\n\tstatic DynamicConnectivity dc;\n\n\tscanf(\"%d%d\", &n, &m);\n\tdc.Init(n);\n\tint last = 0;\n\twhile (m--) {\n\t\tint op, x, y;\n\t\tscanf(\"%d%d%d\", &op, &x, &y);\n\t\tx ^= last;\n\t\ty ^= last;\n\t\tswitch (op) {\n\t\tcase 0:\n\t\t\tdc.link_new(x, y);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdc.cut_existing(x, y);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif (dc.is_connected(x, y)) {\n\t\t\t\tputs(\"Y\");\n\t\t\t\tlast = x;\n\t\t\t} else {\n\t\t\t\tputs(\"N\");\n\t\t\t\tlast = y;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n",
        "postTime": 1637420760,
        "uid": 92652,
        "name": "searchstar",
        "ccfLevel": 0,
        "title": "P5247 \u52a8\u6001\u56fe\u5b8c\u5168\u8fde\u901a\u6027 LCT\u89e3\u6cd5"
    },
    {
        "content": "\u53cc\u5411\u5e7f\u641c\u53ef\u4ee5\u901a\u8fc7\uff0c\u4e0d\u8fc7\u9700\u8981\u4e00\u4e9b\u5e38\u6570\u4f18\u5316\u3002\n\n\u5b58\u8fb9\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u4e0d\u60f3\u624b\u5199\u53ef\u4f7f\u7528 set \u6216 map \u4f46\u5e38\u6570\u5e76\u4e0d\u5982\u610f\uff0c\u53ef\u4f7f\u7528 vector \u5b9e\u73b0\u7684\u5047\u7684\u5e73\u8861\u6811\uff0c\u4f46\u62e5\u6709\u5947\u5947\u602a\u602a\u7684\u5e38\u6570\uff0c\u4f7f\u5176\u53d8\u5f97\u5f88\u5feb\u3002\n\n\u53cc\u5411\u5bbd\u641c\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u5c55\u5f00\u53d8\u5f97\u5feb\u4e00\u4e9b\u3002\n\n\u5982\u679c\u8fd8\u4e0d\u591f\u5feb\uff0c\u90a3\u5c31\u52a0\u4e0a\u4e00\u4e2a\u5feb\u8bfb\u5feb\u5199\u5c31\u884c\u4e86\uff0c\u4f46\u5b9e\u6d4b\u4e0d\u52a0\u5feb\u8bfb\u53ef\u4ee5\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace fast_IO {\n#define FASTIO\n#define IOSIZE 100000\n\tchar ibuf[IOSIZE], obuf[IOSIZE];\n\tchar *p1 = ibuf, *p2 = ibuf, *p3 = obuf;\n#ifdef ONLINE_JUDGE\n#define getchar() ((p1==p2)and(p2=(p1=ibuf)+fread(ibuf,1,IOSIZE,stdin),p1==p2)?(EOF):(*p1++))\n#define putchar(x) ((p3==obuf+IOSIZE)&&(fwrite(obuf,p3-obuf,1,stdout),p3=obuf),*p3++=x)\n#endif//fread in OJ, stdio in local\n\t\n#define isdigit(ch) (ch>47&&ch<58)\n#define isspace(ch) (ch<33)\n\ttemplate<typename T> inline T read() {\n\t\tT s = 0;\n\t\tint w = 1;\n\t\tchar ch;\n\t\twhile (ch = getchar(), !isdigit(ch) and (ch != EOF)) if (ch == '-') w = -1;\n\t\tif (ch == EOF) return false;\n\t\twhile (isdigit(ch)) s = s * 10 + ch - 48, ch = getchar();\n\t\treturn s * w;\n\t}\n\ttemplate<typename T> inline bool read(T &s) {\n\t\ts = 0;\n\t\tint w = 1;\n\t\tchar ch;\n\t\twhile (ch = getchar(), !isdigit(ch) and (ch != EOF)) if (ch == '-') w = -1;\n\t\tif (ch == EOF) return false;\n\t\twhile (isdigit(ch)) s = s * 10 + ch - 48, ch = getchar();\n\t\treturn s *= w, true;\n\t}\n\tinline bool read(char &s) {\n\t\twhile (s = getchar(), isspace(s));\n\t\treturn true;\n\t}\n\tinline bool read(char *s) {\n\t\tchar ch;\n\t\twhile (ch = getchar(), isspace(ch));\n\t\tif (ch == EOF) return false;\n\t\twhile (!isspace(ch)) *s++ = ch, ch = getchar();\n\t\t*s = '\\000';\n\t\treturn true;\n\t}\n\ttemplate<typename T> inline void print(T x) {\n\t\tif (x < 0) putchar('-'), x = -x;\n\t\tif (x > 9) print(x / 10);\n\t\tputchar(x % 10 + 48);\n\t}\n\tinline void print(char x) {\n\t\tputchar(x);\n\t}\n\tinline void print(char *x) {\n\t\twhile (*x) putchar(*x++);\n\t}\n\tinline void print(const char *x) {\n\t\tfor (int i = 0; x[i]; i++) putchar(x[i]);\n\t}\n#ifdef _GLIBCXX_STRING\n\tinline bool read(std::string& s) {\n\t\ts = \"\";\n\t\tchar ch;\n\t\twhile (ch = getchar(), isspace(ch));\n\t\tif (ch == EOF) return false;\n\t\twhile (!isspace(ch)) s += ch, ch = getchar();\n\t\treturn true;\n\t}\n\tinline void print(std::string x) {\n\t\tfor (int i = 0, n = x.size(); i < n; i++)\n\t\t\tputchar(x[i]);\n\t}\n#endif//string\n\ttemplate<typename T, typename... T1> inline int read(T& a, T1&... other) {\n\t\treturn read(a) + read(other...);\n\t}\n\ttemplate<typename T, typename... T1> inline void print(T a, T1... other) {\n\t\tprint(a);\n\t\tprint(other...);\n\t}\n\t\n\tstruct Fast_IO {\n\t\t~Fast_IO() {\n\t\t\tfwrite(obuf, p3 - obuf, 1, stdout);\n\t\t}\n\t} io;\n\ttemplate<typename T> Fast_IO& operator >> (Fast_IO &io, T &b) {\n\t\treturn read(b), io;\n\t}\n\ttemplate<typename T> Fast_IO& operator << (Fast_IO &io, T b) {\n\t\treturn print(b), io;\n\t}\n#define cout io\n#define cin io\n#define endl '\\n'\n}\nusing namespace fast_IO;\nconst int N = 5000 + 5; \nint n, m;\nvector<int> a[N];\nint vis[N];\nint qx[N], qy[N];\nbool chk(int x, int y) {\n\tint l1, r1, l2, r2;\n\tl1 = r1 = l2 = r2 = 0;\n\tqx[r1++] = x, qy[r2++] = y;\n\tvis[x] = 1;\n\tvis[y] = 2;\n\tif (x == y) return true;\n\twhile (true) {\n\t\tif (l1 == r1) return false;\n\t\tint u = qx[l1++];\n\t\tfor (int i = 0; i < a[u].size(); ++i) {\n\t\t\tint v = a[u][i];\n\t\t\tif (vis[v] == 2) return 1;\n\t\t\tif (vis[v] == 0) {\n\t\t\t\tqx[r1++] = v;\n\t\t\t\tvis[v] = 1;\n\t\t\t}\n\t\t}\n\t\tif (l2 == r2) return false;\n\t\tu = qy[l2++];\n\t\tfor (int i = 0; i < a[u].size(); ++i) {\n\t\t\tint v = a[u][i];\n\t\t\tif (vis[v] == 1) return 1;\n\t\t\tif (vis[v] == 0) {\n\t\t\t\tqy[r2++] = v;\n\t\t\t\tvis[v] = 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\tcin >> n >> m;\n\tint lst = 0, op, x, y;\n\twhile (m--) {\n\t\tcin >> op >> x >> y;\n\t\tx ^= lst, y ^= lst;\n\t\tif (op == 0) {\n\t\t\ta[x].insert(lower_bound(a[x].begin(), a[x].end(), y), y);\n\t\t\ta[y].insert(lower_bound(a[y].begin(), a[y].end(), x), x);\n\t\t}\n\t\telse if (op == 1) {\n\t\t\ta[x].erase(lower_bound(a[x].begin(), a[x].end(), y));\n\t\t\ta[y].erase(lower_bound(a[y].begin(), a[y].end(), x));\n\t\t}\n\t\telse {\n\t\t\tmemset(vis, 0, sizeof(vis));\n\t\t\tif (chk(x, y)) {\n\t\t\t\tcout << \"Y\\n\";\n\t\t\t\tlst = x;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"N\\n\";\n\t\t\t\tlst = y;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1685160713,
        "uid": 533915,
        "name": "_sublimetext_",
        "ccfLevel": 0,
        "title": "P5247"
    },
    {
        "content": "\u7ec8\u4e8e\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\uff01\uff082020.4.6\uff09\n\nhttps://www.luogu.com.cn/record/32515941\n\n2.09s\uff08\u5f00 O2\uff09\n\n### 1 \u56fe\u7684\u5b58\u50a8\u65b9\u6cd5\n\n\u90bb\u63a5\u8868\uff0c\u6ca1\u8bdd\u8bf4\u7684\u3002\n\n\u90a3\u4e48\u90bb\u63a5\u8868\u7528\u4ec0\u4e48\u65b9\u5f0f\u5b9e\u73b0\u5462\uff1f\n\n\u4e0b\u9762\u662f\u6211\u5b9e\u6d4b\u6216\u63a8\u60f3\u51fa\u6765\u7684\u7ed3\u679c\uff0c\u901f\u5ea6\u8d8a\u5feb\u6392\u540d\u8d8a\u524d\uff1a\n\n\u94fe\u5f0f\u524d\u5411\u661f > \u7384\u5b66\u4f18\u5316\u7684 vector > list > unordered_set\uff08\u5c31\u662f STL \u7684\u54c8\u5e0c\u8868\uff09 > set \n\n\u4e3a\u5565\u8981\u8fd9\u4e48\u591a\u5947\u5947\u602a\u602a\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\n\n\u56e0\u4e3a\u8fd8\u6709\u5220\u9664\u64cd\u4f5c\u3002\n\n~~\u5982\u679c\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\u968f\u4fbf\u5199\u4e2a\u5e76\u67e5\u96c6\u4e0d\u5c31\u884c\u4e86\u5417~~\n\n\u8fd9\u4e2a\u7ed3\u679c\u8ba9\u6211\u5f88\u610f\u5916\uff0c\u56e0\u4e3a set/unordered_set \u7684\u5220\u9664\u5e94\u8be5\u662f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u53cd\u800c\u8ba9\u5176\u4ed6\u7ebf\u6027\u5220\u9664\u7684\u6570\u636e\u7ed3\u6784\u5360\u4e86\u4e0a\u98ce\u3002\n\n\u6211\u4f30\u8ba1\u662f\u56e0\u4e3a\uff0c\u6bcf\u4e2a\u70b9\u7684\u8fb9\u4e0d\u4f1a\u592a\u591a\uff0c\u800c set/unordered_set \u7684\u5e38\u6570\u592a\u5927\uff0c\u6240\u4ee5\u4e0d\u5982\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u6240\u8c13\u201c\u7384\u5b66\u4f18\u5316\u7684 vector\u201d\uff0c\u5176\u5b9e\u5c31\u662f vector \u5b9e\u73b0\u7684\u4f2a\u5e73\u8861\u6811\uff0c\u5e38\u6570\u6781\u5c0f\u3002\n\n### 2 \u5224\u65ad\u4e24\u70b9\u8054\u901a\n\n#### 2.1 DFS\n\n\u8fd9\u4e2a\u662f\u6700\u6162\u7684\u4e86\uff0c\u53ea\u80fd\u62ff $84\\;\\text{pts}$\u3002\n\nhttps://www.luogu.com.cn/record/29921684\n\n#### 2.2 BFS\n\n\u5feb\u4e86\u5f88\u591a\uff0c\u62ff\u4e86 $94\\;\\text{pts}$\u3002\n\n\u4f46\u662f\u5f53\u65f6\u6ee5\u7528 STL\uff0c\u800c\u4e14\u8fd8\u7528\u7684\u662f list\uff0c\u6162\u4e86\u5f88\u591a\u3002\n\nhttps://www.luogu.com.cn/record/29922114\n\n#### 2.3 \u53cc\u5411 BFS\n\n\u5f88\u5feb\u3002\n\n\u56e0\u4e3a\u5df2\u77e5\u8d77\u70b9\uff0c\u53c8\u5df2\u77e5\u7ec8\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u4e24\u7aef\u540c\u65f6\u5f00\u59cb\u641c\u7d22\u3002\n\n\u5148\u62d3\u5c55\u4e00\u8fb9\u7684\u72b6\u6001\uff0c\u518d\u62d3\u5c55\u53e6\u4e00\u8fb9\u2026\u2026\u8fd9\u6837\u53cd\u590d\u8fdb\u884c\uff0c\u4f1a\u6bd4\u53ea\u4ece\u4e00\u8fb9\u5f00\u59cb\u5feb\u5f88\u591a\u3002\n\nhttps://www.luogu.com.cn/record/29922620\n\n\u8fd9\u662f\u6211\u4e24\u4e2a\u6708\u524d\u5199\u7684\uff0c\u6700\u8fd1\u53c8\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\u3002\n\n### 3 \u4f18\u5316\n\n#### 3.1 \u5361\u5e38\n\n\u5feb\u8bfb\uff0c\u4f7f\u7528 putchar \u800c\u4e0d\u7528 printf\uff0cinline\uff0c\u8fd9\u4e9b\u90fd\u662f\u5fc5\u987b\u7684\u3002\n\n#### 3.2 \u5c11\u7528 STL\n\n\u628a\u53cc\u5411 BFS \u7684\u961f\u5217\u7528\u6570\u7ec4\u6a21\u62df\u3002\n\n\u56e0\u4e3a\u4e24\u4e2a\u961f\u5217\u9876\u591a\u53ea\u7528 $n$ \u7684\u7a7a\u95f4\uff08\u9876\u591a\u53ea\u6709 $n$ \u4e2a\u70b9\uff09\uff0c\u6240\u4ee5\u4e0d\u7528\u4ec0\u4e48\u5faa\u73af\u961f\u5217\uff0c\u76f4\u63a5\u7528\u4e24\u4e2a\u6307\u9488\u6a21\u62df\u3002\n\n#### 3.3 \u5584\u7528 STL\n\n~~\u60f3\u5fc5\u5927\u5bb6\u90fd\u7528 vector \u6c34\u8fc7\u5e73\u8861\u6811\u677f\u5b50\u5427~~\n\n~~\u53ef\u60dc mrsrz \u59d0\u59d0\u52a0\u5f3a\u7684\u677f\u5b50\u5361\u6389\u4e86 vector~~\n\nvector \u7684\u5220\u9664\u548c\u63d2\u5165\u64cd\u4f5c\u662f\u6781\u5feb\u7684\uff0c\u6240\u4ee5\u7528 vector \u6765\u5b9e\u73b0\u6548\u679c\u76f8\u5f53\u597d\u3002\n\n\u4e0b\u9762\u662f\u7ecf\u8fc7\u4e86\u4f18\u5316\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int> a[5005];\nint t[5005];\nint xd[5005],yd[5005];\ninline int read()\n{\n   int s=0;\n   char ch=getchar();\n   while(ch<'0'||ch>'9') ch=getchar();\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s;\n}\ninline int find(int x,int y)\n{\n\tregister int f,i,l1,r1,l2,r2;\n\tl1=r1=l2=r2=0;\n\txd[r1++]=x,yd[r2++]=y;\n\tt[x]=1;\n\tt[y]=2;\n\tif(x==y) return 1;\n\tfor(;;)\n\t{\n\t\tif(l1==r1) break;\n\t\tf=xd[l1++];\n\t\tfor(i=0;i<a[f].size();i++)\n\t\t{\n\t\t\tif(t[a[f][i]]==2) return 1;\n\t\t\tif(t[a[f][i]]==0)\n\t\t\t{\n\t\t\t\txd[r1++]=a[f][i];\n\t\t\t\tt[a[f][i]]=1;\n\t\t\t}\n\t\t}\t\n\t\tif(l2==r2) break;\n\t\tf=yd[l2++];\n\t\tfor(i=0;i<a[f].size();i++)\n\t\t{\n\t\t\tif(t[a[f][i]]==1) return 1;\n\t\t\tif(t[a[f][i]]==0)\n\t\t\t{\n\t\t\t\tyd[r2++]=a[f][i];\n\t\t\t\tt[a[f][i]]=2;\n\t\t\t}\n\t\t}\t\n\t}\n\treturn 0;\n}\nint main()\n{\n\tregister int last=0,o,x,y,n,m;\n\tscanf(\"%d%d\",&n,&m);\n\twhile(m--)\n\t{\n\t\to=read(),x=read(),y=read();\n\t\tx^=last,y^=last;\n\t\tif(o==0)\n\t\t{\n\t\t\ta[x].insert(lower_bound(a[x].begin(),a[x].end(),y),y);\n\t\t\ta[y].insert(lower_bound(a[y].begin(),a[y].end(),x),x);\n\t\t}\n\t\tif(o==1)\n\t\t{\n\t\t\ta[x].erase(lower_bound(a[x].begin(),a[x].end(),y));\n\t\t\ta[y].erase(lower_bound(a[y].begin(),a[y].end(),x));\n\t\t}\n\t\tif(o==2)\n\t\t{\n\t\t\tmemset(t,0,sizeof(t));\n\t\t\tif(find(x,y)) \n\t\t\t{\n\t\t\t\tputchar('Y'),putchar('\\n');\n\t\t\t\tlast=x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tputchar('N'),putchar('\\n');\n\t\t\t\tlast=y;\n\t\t\t}\n\t\t}\n\t}\n} \n```\n",
        "postTime": 1586136494,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5247 \u3010\u3010\u6a21\u677f\u3011\u52a8\u6001\u56fe\u5b8c\u5168\u8fde\u901a\u6027\u3011"
    },
    {
        "content": "\u5728\u5b66 Link-Cut-Tree \u65f6\u5237\u5230\u4e86[P5247](/problem/P5247)\uff0c\u53ea\u662f\u6b64\u9898\u5e76\u4e0d\u9700\u8981 LCT\uff0c\u800c\u662f\u5bf9\u5165\u95e8\u9009\u624b\u53cb\u597d\u7684\u53cc\u5411\u5e7f\u641c\u53ef\u4ee5\u901a\u8fc7\uff0c\u4e8e\u662f\u6211\u6765\u53d1\u4e00\u6ce2\u53cc\u5411\u5e7f\u641c\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\uff0c\u8fde\u8fb9\u53ef\u4ee5\u4f7f\u7528 vector\uff0c\u5177\u4f53\u5b9e\u73b0\u7528\u4e8c\u5206\u67e5\u627e\u5373\u53ef\uff0c\u6ee1\u6ee1 STL \u7684\u5473\u9053\uff1a\n```cpp\nvector<int>lk[N];\n#define lb(a,x) lower_bound(a.begin(),a.end(),x)\ncase 0:lk[x].insert(lb(lk[x],y),y);\nlk[y].insert(lb(lk[y],x),x);break;\ncase 1:lk[x].erase(lb(lk[x],y));\nlk[y].erase(lb(lk[y],x));break;\n```\n\u81f3\u4e8e\u53cc\u5411\u5e7f\u641c\uff0c\u5c06\u641c\u5230\u7684\u8282\u70b9\u8d4b\u4e88\u4e00\u4e2a type\uff0c\u5982\u679c\u9047\u5230\u4e0d\u540c\u7684 type \u5c31\u8fde\u901a\uff0c\u9047\u5230\u76f8\u540c\u7684 type \u5c31\u4e0d\u7ba1\uff0c\u5982\u679c\u6ca1\u6709 type \u5c31\u8d4b\u4e88\u4e00\u4e2a\u76f8\u540c\u7684 type\uff0c\u6700\u540e\u5c06\u6240\u6709 type \u6e05\u7a7a\u3002\n\n\u4ee3\u7801\u52a0\u5feb\u8bfb\u5feb\u5199\u53ea\u6709 40 \u884c\uff0c1.04KB\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5005;\nchar buf[N+5],*p1,*p2,c,ob[1000001];\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\ninline void read(int &x){\n\tx=0;while(!isdigit(c=gc));\n\tdo x=x*10+c-'0';while(isdigit(c=gc));\n}\nint n,m,q[N],t[N],l,r,las,ot;\nvector<int>lk[N];\n#define lb(a,x) lower_bound(a.begin(),a.end(),x)\ninline bool Fans(int x,int y){\n\tt[q[l=1]=x]=1,t[q[r=2]=y]=2;\n\twhile(l<=r){\n\t\tx=q[l++];\n\t\tfor(int d:lk[x]){\n\t\t\tif(t[d]){\n\t\t\t\tif(t[d]!=t[x]){while(r)t[q[r--]]=0;return 1;}\n\t\t\t}else t[q[++r]=d]=t[x];\n\t\t}\n\t}while(r)t[q[r--]]=0;return 0;\n}\nint main(){\n\tread(n),read(m);int i,op,x,y;\n\twhile(m--){\n\t\tread(op),read(x),read(y),x^=las,y^=las;\n\t\tswitch(op){\n\t\t\tcase 0:lk[x].insert(lb(lk[x],y),y);\n\t\t\tlk[y].insert(lb(lk[y],x),x);break;\n\t\t\tcase 1:lk[x].erase(lb(lk[x],y));\n\t\t\tlk[y].erase(lb(lk[y],x));break;\n\t\t\tcase 2:if(Fans(x,y))ob[ot++]='Y',las=x;\n\t\t\t\t\telse ob[ot++]='N',las=y;\n\t\t\tob[ot++]='\\n';default:break;\n\t\t}\n\t}\n\tfwrite(ob,1,ot,stdout);\n\treturn 0;\n}\n```",
        "postTime": 1643514523,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u53cc\u5411\u5e7f\u641c\u7565\u89e3"
    }
]