[
    {
        "content": "\u626b\u63cf\u7ebf\n\n\u6ce8\u91ca\u975e\u5e38\u8be6\u7ec6 \u8bf7\u770b\u770bovo\n\n\n```cpp\n#include<cstdio>\n#include<set>\n#include<algorithm>\nusing namespace std;\nint n,cnt,num;\nstruct build{\n    int h,l,r;//\u9ad8\uff0c\u5de6\uff0c\u53f3 \n}a[100010];\nstruct line{\n    int up,x,k;//\u9ad8\uff0cx\u8f74\uff0c\u51fa\u5165\u5c5e\u6027 \n}l[200020];//\u626b\u63cf\u7ebf \nstruct ANS{\n    int ax,ay;//\u5de6\u8fb9\uff0c\u53f3\u8fb9 \n}ans[400040];\nint read(){\n    char c=getchar();int num=0,flag=1;\n    while(c<'0'||c>'9'){if(c=='-')flag=-1;c=getchar();}\n    while(c>='0'&&c<='9'){num=num*10+c-'0';c=getchar();}\n    return num*flag;\n```\n}//\u8bfb\u5165\u4f18\u5316\n```cpp\nmultiset<int>s;//\u5b58\u9ad8\u5ea6\uff0c\u9ed8\u8ba4\u9012\u589e\uff0c\u53ef\u4ee5\u91cd\u590d \nint cmp(line i,line j){\n    if(i.x!=j.x)return i.x<j.x;//\u5982\u679c\u9760\u5de6\u7684\u6392\u5230\u524d\u9762 \n    if(i.k!=j.k)return i.k<j.k;//\u5165\u8fb9\u5728\u524d \n    if(i.k==1)return i.up>j.up;//\u5165\u8fb9\u8d8a\u9ad8\u8d8a\u5bb9\u6613\u6321\u4f4f \n    if(i.k==2)return i.up<j.up;//\u51fa\u8fb9\u8d8a\u77ee\u8d8a\u5bb9\u6613\u6321\u4f4f \n}\nint main(){\n    n=read();//\u8bfb\u8fb9\u6570 \n    for(int i=1;i<=n;i++){\n        a[i].h=read(),a[i].l=read(),a[i].r=read();//\u8bfb\u5165 \n        l[++cnt].up=a[i].h,l[cnt].x=a[i].l,l[cnt].k=1;//\u52a0\u5165\u8fb9 \n        l[++cnt].up=a[i].h,l[cnt].x=a[i].r,l[cnt].k=2;//\u52a0\u51fa\u8fb9 \n    }\n    sort(l+1,l+cnt+1,cmp);//\u4e3a\u626b\u63cf\u6392\u5e8f \n    s.insert(0);//\u521d\u59cb\u6700\u5927\u9ad8\u5ea6\u4e3a0 \n    for(int i=1;i<=cnt;i++){\n        int mx=*s.rbegin();//\u53d6\u6700\u9ad8\u7684\u9ad8\u5ea6 \n        if(l[i].k==1){//\u5982\u679c\u662f\u5165\u8fb9 \n            if(l[i].up<=mx) s.insert(l[i].up);//\u6bd4\u6700\u9ad8\u77ee\uff0c\u52a0\u5165\u5806 \n            else{\n                ++num;ans[num].ax=l[i].x;ans[num].ay=mx;//\u8bb0\u5f55\u4ea4\u53c9\u70b9 \n                ++num;ans[num].ax=l[i].x;ans[num].ay=l[i].up;//\u8bb0\u5f55\u4ea4\u53c9\u70b9\u4e0a\u9762\u7684\u70b9 \n                s.insert(l[i].up);//\u52a0\u9ad8 \n            }\n        }\n        if(l[i].k==2){//\u5982\u679c\u662f\u51fa\u8fb9 \n            if(l[i].up==mx&&s.count(mx)==1){//\u5982\u679c\u5f53\u524d\u7684\u5c31\u662f\u6700\u9ad8\u7684\u7ebf\uff0c\u800c\u4e14\uff0c\u6ca1\u6709\u8ddf\u5b83\u4e00\u6837\u9ad8\u7684 \n                s.erase(mx);//\u53d6\u51fa\u8fd9\u4e00\u6761 \n                ans[++num].ax=l[i].x; ans[num].ay=l[i].up;// \u8bb0\u5f55\u53f3\u4e0a\u9876\u70b9 \n                ans[++num].ax=l[i].x;ans[num].ay=*s.rbegin();//\u8bb0\u5f55\u4ea4\u53c9\u70b9 \n            }\n            else s.erase(s.find(l[i].up));//\u5220\u6389\u4e00\u6837\u9ad8\u7684\u8fb9 \n        }\n    }\n    printf(\"%d\\n\",num);//\u8f93\u51fa\u8282\u70b9\u4e2a\u6570 \n    for(int i=1;i<=num;i++)   printf(\"%d %d\\n\",ans[i].ax,ans[i].ay); //\u8f93\u51fa\u7ed3\u679c \n    return 0;\n}\n\n```",
        "postTime": 1508676997,
        "uid": 25390,
        "name": "shuri001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "P1382 \u89e3\u9898\u62a5\u544a By xiaolou\n\n# \u524d\u7f6e\u778eBB\n\n\u6700\u8fd1\u53c8\u5207\u4e86\u51e0\u9053\u7ebf\u6bb5\u6811~~\u6c34\u9898~~\uff0c\u4e8e\u662f\u518d\u53d1\u4e00\u7bc7\u89e3\u9898\u62a5\u544a~~\u9a97\u5495\u503c~~\uff0c\u7ffb\u4e86\u4e00\u4e0b\u7b2c\u4e00\u9875\u7684\u9898\u89e3\uff0c\u5168\u90fd\u770b\u4e0d\u61c2\uff0c\u5495\u8ba1\u5168tm\u662f\u795e\u4ed9\n\n\u7ed3\u679c\u53d1\u73b0\u6ca1\u51e0\u7bc7\u7ebf\u6bb5\u6811\u7684\uff0c\u5c31\u6765BB\u4e00\u53d1\n\n\u7ebf\u6bb5\u6811\u592a\u597d\u4f7f\u4e86~~\u867d\u7136\u6211\u597d\u50cf\u5728\u67d0\u7bc7\u5206\u5757\u9898\u89e3\u91cc\u8bf4\u8fc7\u7ebf\u6bb5\u6811\u5783\u573e~~\n\n# \u4e3b\u8981\u601d\u60f3\n\n\u5e94\u8be5\u90fd\u80fd\u770b\u51fa\u6765\u662f\u7ebf\u6bb5\u6811\u53ed\uff0c\u7ebf\u6bb5\u6811\u5982\u679c\u6ca1\u5b66\u8fc7\uff0c\u8bf7\u5148\u53bb\u5b66\uff08\u5927\u96fe\uff09\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n\u56e0\u4e3a\u51fa\u9898\u4eba\u975e\u5e38 disgusting\uff0c\u6240\u4ee5\u8981\u52a0\u4e00\u4e2asb\u7684\u79bb\u6563\u5316\uff0c\u7136\u540e\u6211\u5c31\u5a01\u80c1\u673a\u623f\u540c\u5b66\u4ea4\u4e86\u6211\u4e00\u4e0b\u79bb\u6563\u5316\n\n\u5176\u5b9e\u5c31\u662f\u7ebf\u6bb5\u6811\u76f4\u63a5\u641e\u4e00\u641e\uff0c\u7ef4\u62a4\u79bb\u6563\u5316\u540e\u6bcf\u4e2a\u5355\u4f4d\u4e0a\u7684\u9ad8\u5ea6\u6700\u5927\u503c\u5c31\u597d\u4e86\uff0c\u6700\u540e\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u7b54\u6848\uff0c\u6700\u540e\u4e00\u8d77\u8f93\u51fa\n\n\u8d34\u4e00\u4e0b\u5e38\u6570\u5927\uff0c\u53c8\u81ed\u53c8\u957f\u800c\u4e14\u6781\u5176\u4e11\u964b\u7684\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nstruct Node\n{\n\tint le,ri;\n\tint mx;\n}t[4000005];\nint a[4000005],x[4000005],y[4000005],h[4000005];\nvoid BuildT(int id,int l,int r)//\u5efa\u6811\uff0c\u6ca1\u4ec0\u4e48\u53ef\u8bb2\u7684\uff0c\u6ce8\u610f\u7ec6\u8282\n{\n\tt[id].le=l;\n\tt[id].ri=r;\n\tt[id].mx=0;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tBuildT(id*2,l,mid);\n\tBuildT(id*2+1,mid+1,r);\n}\nvoid Push(int id)\n{\n\tt[id*2].mx=max(t[id*2].mx,t[id].mx);\n\tt[id*2+1].mx=max(t[id*2+1].mx,t[id].mx);\t\t\n}\nvoid Change(int id,int l,int r,int c)//\u4fee\u6539\uff0c\u6ce8\u610f\u4fee\u6539\u533a\u95f4\u7684\n\u5224\u5b9a{\n    if(t[id].le==l&&t[id].ri==r)\n    {\n        t[id].mx=max(t[id].mx,c);\n        return;\n    }\n    Push(id);\n    if(r<=t[id*2].ri)\n    {\n        Change(id*2,l,r,c);\n    }\n    else if(l>=t[id*2+1].le)\n    {\n        Change(id*2+1,l,r,c);\n    }\n    else//\u6211\u5728\u8fd9\u91cc\u6b7b\u8fc7\n    {\n        Change(id*2,l,t[id*2].ri,c);\n        Change(id*2+1,t[id*2+1].le,r,c);\n    }\n}\nint Query(int id,int pos)//\u67e5\u8be2\n{\n\tif(t[id].le==t[id].ri)\n\t{\n\t\treturn t[id].mx;\n\t}\n\tPush(id);\n\tif(pos<=t[id*2].ri)\n\t{\n\t\treturn Query(id*2,pos);\n\t}\n\telse\n\t{\n\t\treturn Query(id*2+1,pos);\n\t}\n}\n\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&h[i],&x[i],&y[i]);\n\t\ta[i*2-1]=x[i];\n\t\ta[i*2]=y[i];\n\t}\n\tsort(a+1,a+2*n+1);\n\tint m=unique(a+1,a+2*n+1)-a-1;\n\tBuildT(1,1,m);\n\tfor(int i=1;i<=n;++i)//\u79bb\u6563\u5316\u90e8\u5206\uff0c\u5c31\u4e0d\u89e3\u91ca\u4e86\n\t{\n\t\tx[i]=lower_bound(a+1,a+m+1,x[i])-a;\n\t\ty[i]=lower_bound(a+1,a+m+1,y[i])-a;\n\t\tChange(1,x[i],y[i]-1,h[i]);\n\t}\n\tint cnt=0;\n\tint last=0;\n\tx[++cnt]=a[1];\n\ty[cnt]=0;\n\tfor(int i=1;i<m;++i)\n\t{\n\t\tint height=Query(1,i);\n\t\tif(height!=last)\n\t\t{\n\t\t\tx[++cnt]=a[i];\n\t\t\ty[cnt]=height;\n\t\t\tx[++cnt]=a[i+1];\n\t\t\ty[cnt]=height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx[cnt]=a[i+1];\n\t\t}\n\t\tlast=height;//\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u4f4d\uff0c\u6c42\u51fa\u9ad8\u5ea6\uff0c\u628a\u7ed3\u679c\u5b58\u8fdb\u6570\u7ec4\u91cc\n\t}\n\tprintf(\"%d\\n\",cnt+1);\n\tfor(int i=1;i<=cnt;++i)\n\t{\n\t\tprintf(\"%d %d\\n\",x[i],y[i]);\n\t}\n\tprintf(\"%d 0\",a[m]);\n\treturn 0;\n}\n```\n\u6700\u540e\u5b89\u5229\u4e00\u4e0b[\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/xiaolou/)\n\n\u70b9\u4e2a\u8d5e\u5427",
        "postTime": 1559565844,
        "uid": 68675,
        "name": "xiaolou",
        "ccfLevel": 0,
        "title": "P1382\u9898\u89e3"
    },
    {
        "content": "\u8865\u5145\u4e00\u4e2azkw\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u4e2a\u9898\u4e3a\u4ec0\u4e48\u9002\u5408\u7528zkw\u7ebf\u6bb5\u6811\u505a\u5462\uff0c\u539f\u56e0\u662f\uff0c\u867d\u7136\u9898\u76ee\u9700\u8981\u533a\u95f4\u66f4\u65b0\uff0c\u4f46\u662f\u5374\u53ea\u8981\u6c42\u6700\u540e\u4e00\u6b21\u8be2\u95ee\u8f93\u51fa\u7b54\u6848\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u6709\u5f88\u591a\u7ec6\u8282\u8981\u5904\u7406\u4e00\u4e0b\u3002\n\n\u9996\u5148\uff0c\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u7528\u79bb\u6563\u5316\u60f3\u5fc5\u662f\u4e0d\u884c\u7684\u3002\u5176\u6b21\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u5176\u5b9e\u53ea\u9700\u8981\u7ef4\u62a4\u9ad8\u5ea6\u6700\u5927\u503c\uff0c\u6839\u636ezkw\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0clazy\u6807\u8bb0\u53ef\u4ee5\u76f4\u63a5\u4ee3\u66ff\u8282\u70b9\u6240\u7ef4\u62a4\u51fa\u7684\u503c\uff0c\u4e8e\u662f\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u6211\u4eec\u53ea\u9700\u8981lazy\u6570\u7ec4\u5c31\u597d\u4e86\u3002\u6700\u540e\uff0c\u56e0\u4e3a\u9898\u4e2d\u6240\u7ed9\u7684\u5747\u4e3a\u4e00\u4e2a\u77e9\u5f62\uff0c\u90a3\u4e48\u4e24\u4e2a\u76f8\u90bb\u7684x\u5750\u6807\u4e4b\u95f4\u7684\u8f6e\u5ed3\u7ebf\u5fc5\u5b9a\u662f\u6c34\u5e73\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u59a8\u4fdd\u5b58\u4e00\u4e2a\u4e0a\u4e00\u4e2a\u76f8\u90bbx\u8282\u70b9\u6240\u7ef4\u62a4\u51fa\u6765\u7684\u9ad8\u5ea6\u4e3apre\uff0c\u5bf9\u4e8e\u8fd9\u4e2ax\u5750\u6807\u4e0a\u7684\u4e24\u4e2a\u62d0\u70b9\uff0c\u5176\u4e2d\u4e00\u4e2a\u9ad8\u5ea6\u7b49\u4e8epre\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fa\u6765\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u8f93\u51fa\u4e86\u3002\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4fdd\u5b58\u8282\u70b9\u6570\u7684\u6570\u7ec4\u5e94\u8be5\u8981\u5f00\u5230size\u7684\u56db\u500d\uff0c\u56e0\u4e3a\u5728\u6ca1\u6709\u4efb\u4f55\u4e24\u4e2a\u77e9\u5f62\u91cd\u5408\u7684\u60c5\u51b5\u4e0b\uff0c\u62d0\u70b9\u6570\u91cf\u4f1a\u8fbe\u5230size\u7684\u56db\u500d;\u8fd8\u6709lazy\u6807\u8bb0\u8981\u5f00\u5230size\u7684\u516b\u500d\u2026\u2026\u95ee\u4e86\u4e00\u4f4d\u795e\u7287\uff0c\u795e\u7287\u8bf4\u56e0\u4e3a\u5982\u679c\u5bf9\u53f6\u5b50\u8282\u70b9\u4e0b\u63a8\u6807\u8bb0\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4WA\u3002\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u4ee5\u524d\u6253pushdown\u7684\u65f6\u5019\uff0c\u8c8c\u4f3c\u4ece\u6765\u6ca1\u6709\u6ce8\u610f\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u917f\u6210\u4e86\u60e8\u5267\uff0c\u4ea4\u5230\u6211\u90fd\u5f00\u59cb\u6000\u7591\u81ea\u5df1\u662f\u6765\u5361\u8bc4\u6d4b\u7684\u2026\u2026\n\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int size=100010;\nint n,N,r=0,p=0,pre=0,z[size],y[size],h[size],rank[size<<1],lazy[size<<3];\nstruct data{\n    int x,y;\n}point[size<<2];\ntemplate <typename Tp> inline void read(Tp &x)\n{\n    x=0;\n    int f=1;\n    char ch=getchar();\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') f=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    x*=f;\n}\nvoid input()\n{\n    read(n);\n    for(int i=1;i<=n;i++)\n    {\n        read(h[i]);\n        read(z[i]);\n        rank[++r]=z[i];\n        read(y[i]);\n        rank[++r]=y[i];\n    }\n}\nint get(int x)\n{\n    int z=1,y=r,m;\n    while(z^y)\n    {\n        m=(z+y)>>1;\n        if(x==rank[m])\n          return m;\n        if(x>rank[m])\n          z=m+1;\n        else\n          y=m;\n    }\n    return z;\n}\nvoid pushdown(int rt)\n{\n    if(lazy[rt<<1]<lazy[rt])\n      lazy[rt<<1]=lazy[rt];\n    if(lazy[rt<<1|1]<lazy[rt])\n      lazy[rt<<1|1]=lazy[rt];\n    lazy[rt]=0;\n}\nvoid update(int l,int r,int val)\n{\n    for(l+=N-1,r+=N+1;l^r^1;l>>=1,r>>=1)\n    {\n        if(~l&1 &&lazy[l^1]<val)\n          lazy[l^1]=val;\n        if(r&1  &&lazy[r^1]<val)\n          lazy[r^1]=val;\n    }\n}\nint main()\n{\n    input();\n    sort(rank+1,rank+r+1);\n    r=unique(rank+1,rank+2*n+1)-rank-1;\n    for(N=1;N<r+2;N<<=1);\n    for(int i=1;i<=n;i++)\n      update(get(z[i]),get(y[i])-1,h[i]);\n    for(int i=1;i<N;i++)\n      if(lazy[i])\n        pushdown(i);\n    for(int i=1;i<=r;i++)\n      if(lazy[i+N]!=pre)\n      {\n          point[++p].x=rank[i],point[p].y=pre;\n          point[++p].x=rank[i],point[p].y=lazy[i+N];\n          pre=lazy[i+N];\n      }\n    printf(\"%d\\n\",p);\n    for(int i=1;i<=p;i++)\n      printf(\"%d %d\\n\",point[i].x,point[i].y);\n    return 0;\n}\n```",
        "postTime": 1507693501,
        "uid": 20602,
        "name": "Rayment",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u5927\u81f4\u601d\u8def\u662f\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811\n\n### \u79bb\u6563\u5316\n\u8fd9\u9898\u6709\u8d1f\u6570\uff0c\u6570\u636e\u8303\u56f4\u8fd8\u662f1e9\uff0c\u4e0d\u7528\u79bb\u6563\u5316\u80af\u5b9a\u4f1a\u70b8\u7a7a\u95f4\uff08\u9664\u975e\u4f60\u7528\u5176\u4ed6\u505a\u6cd5\uff09\n\n\u5148\u7528sort\u6392\u5e8f\uff0c\u518d\u7528unique\u51fd\u6570\u53bb\u91cd\uff0c\u67e5\u627e\u6240\u5728\u4f4d\u7f6e\u65f6\u7528lower_bound\u5373\u53ef\u3002\n\n#### \u4ee3\u7801\uff1a\n```cpp\nfor(int i=1;i<=n;i++){\n\tscanf(\"%d%d%d\",&h[i],&x[i],&y[i]);\n\ta[i*2-1]=x[i];\n\ta[i*2]=y[i];\n}\nsort(a+1,a+2*n+1);\nm=unique(a+1,a+2*n+1)-a-1;\nfor(int i=1;i<=n;i++){\n\tx[i]=lower_bound(a+1,a+m+1,x[i])-a;\n\ty[i]=lower_bound(a+1,a+m+1,y[i])-a;\n}\n```\n\u6ce8\u610f\u4e00\u4e0b\uff0clower_bound\u548cunique\u8fd4\u56de\u7684\u662f\u6307\u9488\uff0c\u8981-a\u3002\n\n### \u7ebf\u6bb5\u6811\n\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5566\u3002\n\n\u7ef4\u62a4\u6bcf\u4e00\u6bb5\uff08\u5373\u76f8\u90bb\u4e24\u70b9\u4e4b\u95f4\uff09\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u7528lazy\uff0c\u76f4\u63a5\u53d6\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n#### \u4ee3\u7801\uff1a\n```cpp\nvoid buildtree(int id,int l,int r){\n\tt[id].l=l;t[id].r=r;t[id].h=0;\n\tif(l==r){\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuildtree(id<<1,l,mid);\n\tbuildtree(id<<1|1,mid+1,r);\n}//\u5efa\u6811\n\nvoid pushdown(int id){\n\tt[id<<1].h=max(t[id<<1].h,t[id].h);\n\tt[id<<1|1].h=max(t[id<<1|1].h,t[id].h);\n}//\u4e0b\u79fb\n\nvoid change(int id,int l,int r,int c){\n\tif(t[id].l==l&&t[id].r==r){\n\t\tt[id].h=max(t[id].h,c);\n\t\treturn;\n\t}\n\tpushdown(id);\n\tif(t[id<<1].r>=r){\n\t\tchange(id<<1,l,r,c);\n\t}\n\telse if(t[id<<1|1].l<=l){\n\t\tchange(id<<1|1,l,r,c);\n\t}\n\telse{\n\t\tchange(id<<1,l,t[id<<1].r,c);\n\t\tchange(id<<1|1,t[id<<1|1].l,r,c);\n\t}\n}//\u4fee\u6539\n\nint query(int id,int k){\n\tif(t[id].l==t[id].r){\n\t\treturn t[id].h;\n\t}\n\tpushdown(id);\n\tif(k<=t[id<<1].r){\n\t\treturn query(id<<1,k);\n\t}\n\telse{\n\t\treturn query(id<<1|1,k);\n\t}\n}//\u67e5\u8be2\n```\n\n### \u8f93\u51fa\uff08\u5927\u96fe\uff09\n\u6211\u89c9\u5f97\u8fd9\u9053\u9898\u7684\u8f93\u51fa\u4e5f\u662f\u8fd9\u9053\u9898\u7684\u4e00\u5927\u96be\u70b9\uff0c\u6211\u5f00\u59cb\u7ef4\u62a4\u7684\u662f\u6bcf\u4e00\u70b9\u4e0a\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u7ed3\u679c\u53d1\u73b0\u4e0d\u597d\u8f93\u51fa\uff0c\u624d\u6539\u4e3a\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\uff0c\u8bb0\u5f55\u5de6\u4fa7\u7f16\u53f7\u548c\u53f3\u4fa7\u7f16\u53f7\u53ca\u5176\u9ad8\u5ea6\uff0c\u5982\u679c\u548c\u4e0a\u4e00\u6bb5\u9ad8\u5ea6\u4e00\u6837\uff0c\u5c31\u628a\u90a3\u6bb5\u53f3\u4fa7\u201c\u62c9\u957f\u201d\uff0c\u5373\u6539\u4e3a\u5f53\u524d\u4e00\u6bb5\u7684\u53f3\u4fa7\u7f16\u53f7\u3002\n\n#### \u4ee3\u7801\uff1a\n```cpp\nlast=0;\ncnt++;\nx[cnt]=a[1];y[cnt]=0;\nfor(int i=1;i<m;i++){\n\tint p=query(1,i);\n\tcout<<\"height = \"<<p<<endl;1021;\n\tif(p!=last){\n\t\tcnt++;\n\t\tx[cnt]=a[i];y[cnt]=p;\n\t\tcnt++;\n\t\tx[cnt]=a[i+1];y[cnt]=p;\n\t}\n\telse{\n\t\tx[cnt]=a[i+1];\n\t}\n\tlast=p;\n}\nprintf(\"%d\\n\",cnt+1);\nfor(int i=1;i<=cnt;i++){\n\tprintf(\"%d %d\\n\",x[i],y[i]);\n}\nprintf(\"%d 0\\n\",a[m]);\n```\n## \u7136\u540e\u628a\u4ee5\u4e0a\u6240\u6709\u90e8\u5206\u62fc\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u9644\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN=100005;\nstruct tree{\n\tint l,r,h;\n}t[MAXN<<2];\nint a[MAXN<<1],x[MAXN],y[MAXN],h[MAXN],n,m,last,cnt=0;\n\nvoid buildtree(int id,int l,int r){\n\tt[id].l=l;t[id].r=r;t[id].h=0;\n\tif(l==r){\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuildtree(id<<1,l,mid);\n\tbuildtree(id<<1|1,mid+1,r);\n}//\u5efa\u6811\n\nvoid pushdown(int id){\n\tt[id<<1].h=max(t[id<<1].h,t[id].h);\n\tt[id<<1|1].h=max(t[id<<1|1].h,t[id].h);\n}//\u4e0b\u79fb\n\nvoid change(int id,int l,int r,int c){\n\tif(t[id].l==l&&t[id].r==r){\n\t\tt[id].h=max(t[id].h,c);\n\t\treturn;\n\t}\n\tpushdown(id);\n\tif(t[id<<1].r>=r){\n\t\tchange(id<<1,l,r,c);\n\t}\n\telse if(t[id<<1|1].l<=l){\n\t\tchange(id<<1|1,l,r,c);\n\t}\n\telse{\n\t\tchange(id<<1,l,t[id<<1].r,c);\n\t\tchange(id<<1|1,t[id<<1|1].l,r,c);\n\t}\n}//\u4fee\u6539\n\nint query(int id,int k){\n\tif(t[id].l==t[id].r){\n\t\treturn t[id].h;\n\t}\n\tpushdown(id);\n\tif(k<=t[id<<1].r){\n\t\treturn query(id<<1,k);\n\t}\n\telse{\n\t\treturn query(id<<1|1,k);\n\t}\n}//\u67e5\u8be2\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d%d\",&h[i],&x[i],&y[i]);\n\t\ta[i*2-1]=x[i];\n\t\ta[i*2]=y[i];\n\t}\n\tsort(a+1,a+2*n+1);\n\tm=unique(a+1,a+2*n+1)-a-1;\n\tbuildtree(1,1,m);\n\tfor(int i=1;i<=n;i++){\n\t\tx[i]=lower_bound(a+1,a+m+1,x[i])-a;\n\t\ty[i]=lower_bound(a+1,a+m+1,y[i])-a;\n\t\tchange(1,x[i],y[i]-1,h[i]);\n\t}//\u79bb\u6563\u5316\n\tlast=0;\n\tcnt++;\n\tx[cnt]=a[1];y[cnt]=0;\n\tfor(int i=1;i<m;i++){\n\t\tint p=query(1,i);\n\t\tcout<<\"height = \"<<p<<endl;1021;\n\t\tif(p!=last){\n\t\t\tcnt++;\n\t\t\tx[cnt]=a[i];y[cnt]=p;\n\t\t\tcnt++;\n\t\t\tx[cnt]=a[i+1];y[cnt]=p;\n\t\t}\n\t\telse{\n\t\t\tx[cnt]=a[i+1];\n\t\t}\n\t\tlast=p;\n\t}\n\tprintf(\"%d\\n\",cnt+1);\n\tfor(int i=1;i<=cnt;i++){\n\t\tprintf(\"%d %d\\n\",x[i],y[i]);\n\t}\n\tprintf(\"%d 0\\n\",a[m]);//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1559565844,
        "uid": 89929,
        "name": "wanghanjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n#### \u6b64\u9898\u7b97\u6cd5\u6807\u7b7e\uff1a\u7ebf\u6bb5\u6811\u3001\u4e8c\u53c9\u5806\n### \u6211\u611f\u89c9\u7528\u4e8c\u53c9\u5806\u8981\u5feb\u5f97\u591a\n## \u601d\u8def\uff1a\n### 1.\u5efa\u4e00\u4e2a\u5806H\n###### ~~\u522b\u624b\u5199\u4e86\uff0c\u7528STL\u5feb\u5f97\u591a~~\n#### \u4ee3\u7801\u5982\u4e0b\n```cpp\nstruct Heap{\n    priority_queue<int> Q,D;\n    void push(int x){\n        Q.push(x);\n    } void del(int x){\n        D.push(x);\n    } int top(){\n        while(!D.empty()&&\n        Q.top()==D.top()){\n            Q.pop();\n            D.pop();\n        } if(Q.empty()) return -1;\n        return Q.top();\n    } void clear(){\n        while(!Q.empty()) Q.pop();\n        while(!D.empty()) D.pop();\n    } bool empty(){\n    \treturn Q.empty();\n\t}\n}H;\n```\n### 2.~~\u62c6\u697c~~\u5c06\u4e00\u4e2a\u697c\u623f\u770b\u6210\u5de6\u7ad6\u7ebf\u548c\u53f3\u7ad6\u7ebf\n##### \u597d\u65b9\u6cd5\uff1a\u5305\u88c5\u6210\u7ed3\u6784\u4f53\u6570\u7ec4T+\u6309x\u8f74\u6392\u5e8f\n#### \u6b64\u540e\u5373\u53ef\u7528\u4e8c\u53c9\u5806\u5904\u7406\u7ad6(fei)\u7ebf(xu)\n#### \u8fd9\u662f\u7ed3\u6784\u4f53\u4ee3\u7801\uff1a\n```cpp\nstruct SKY{\n\tint x,h;\n\tbool f;\n\tvoid make(int xl,\n\tint hl,bool fl){\n\t\tx=xl;\n\t\th=hl;\n\t\tf=fl;\n\t} bool operator ==(SKY rhs){\n\t\treturn (x==rhs.x&&\n\t\th==rhs.h&&f==rhs.f);\n\t}\n}in;\n```\n#### f=1 \u5de6\u7ad6\u7ebf\n#### f=0 \u53f3\u7ad6\u7ebf\n\n#### \u8fd9\u662f\u6392\u5e8f\u51fd\u6570\uff1a\n```cpp\nbool cmp(SKY p,SKY q){\n\tif(p.x!=q.x)\n\t\treturn p.x<q.x;\n\tif(p.f!=q.f)\n\t\treturn p.f>q.f;\n\tif(p.f) return p.h>q.h;\n\treturn p.h<q.h;\n}\n```\n#### \u6700\u540e\u4e24\u53e5\u662f\u4e0d\u662f\u5f88\u5947\u602a\uff1f\n#### \u4f46\u662f\u5982\u679c\u4f60\u4e0d\u8fd9\u4e48\u5199\uff0c\u4f60\u5c31\u53ea\u80fd\u8fc7\u8fd9\u9898\uff1a\n\n\n[P1904 \u3010\u5929\u9645\u7ebf\u3011](https://www.luogu.org/problem/P1904)\n#### \u56e0\u4e3a\u623f\u5c4b\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u53ef\u4ee5\u91cd\u5408\n#### \u8fd9\u4e48\u5199\u6070\u597d\u7ef4\u62a4\u4e86\u4e8c\u53c9\u5806\u7684\u5904\u7406\u987a\u5e8f\n#### ~~\u4e0d\u8fd9\u4e48\u519960\u5206~~\n### 3.\u8d70\u7ebf\n#### \uff081\uff09 \u5c06\u7ad6\u7ebf\u4eec\u6392\u5e8f\n```cpp\nsort(T.begin(),T.end(),cmp);\n```\n#### \uff082\uff09 \u904d\u5386\u7ad6\u7ebf\uff0c\u5c06\u7ad6\u7ebf\u7684\u9ad8\u5ea6\u538b\u8fdb\u4e8c\u53c9\u5806\n### \u5982\u679cf=1\uff0c\u5f53\u524d\u7ad6\u7ebf\u662f\u6700\u9ad8\u7684\uff0c\u5c06\u76f8\u5173\u4e24\u70b9\u653e\u8fdb\u6570\u7ec4ans\n```cpp\nif(T[i].f){\n\tif(T[i].h>H.top()){\n\t\ta.make(T[i].x,H.top());\n\t\tans.push_back(a);\n\t\ta.make(T[i].x,T[i].h);\n\t\tans.push_back(a);\n\t} H.push(T[i].h);\n}\n```\n### \u5982\u679cf=0\uff0c\u5e76\u4e14\u5bf9\u5e94\u7ad6\u7ebf\u662f\u6700\u9ad8\u7684\uff0c\u4e5f\u5c06\u76f8\u5173\u4e24\u70b9\u653e\u8fdb\u6570\u7ec4ans\n```cpp\nelse {\n\t\t\tif(T[i].h==H.top()){\n\t\t\t\tH.del(H.top());\n\t\t\t\tif(T[i].h!=H.top()){\n\t\t\t\t\ta.make(T[i].x,T[i].h);\n\t\t\t\t\tans.push_back(a);\n\t\t\t\t\ta.make(T[i].x,H.top());\n\t\t\t\t\tans.push_back(a);\n\t\t\t\t}\n\t\t\t} else H.del(T[i].h);\n\t\t}\n```\n#### * _\u5173\u952e\uff1a\u53ef\u80fd\u6709\u5e76\u5217\u6700\u9ad8\uff0c\u5982\u4e0a\u7279\u5224_ \n### \u6700\u540e\u8f93\u51fa\u6570\u7ec4ans\u5c31\u597d\u4e86\uff08ans\u662f\u70b9\u6570\u7ec4\uff09\n## \u5168\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct SKY{\n\tint x,h;\n\tbool f;\n\tvoid make(int xl,\n\tint hl,bool fl){\n\t\tx=xl;\n\t\th=hl;\n\t\tf=fl;\n\t} bool operator ==(SKY rhs){\n\t\treturn (x==rhs.x&&\n\t\th==rhs.h&&f==rhs.f);\n\t}\n}in;\nstruct point{\n\tint x,y;\n\tvoid make(int xl,int yl){\n\t\tx=xl; y=yl;\n\t}\n}a;\nint n,left,m;\nint L,Hi,R;\nvector<SKY> T;\nvector<point> ans;\nstruct Heap{\n    priority_queue<int> Q,D;\n    void push(int x){\n        Q.push(x);\n    } void del(int x){\n        D.push(x);\n    } int top(){\n        while(!D.empty()&&\n        Q.top()==D.top()){\n            Q.pop();\n            D.pop();\n        } if(Q.empty()) return -1;\n        return Q.top();\n    } void clear(){\n        while(!Q.empty()) Q.pop();\n        while(!D.empty()) D.pop();\n    } bool empty(){\n    \treturn Q.empty();\n\t}\n}H;\nbool cmp(SKY p,SKY q){\n\tif(p.x!=q.x)\n\t\treturn p.x<q.x;\n\tif(p.f!=q.f)\n\t\treturn p.f>q.f;\n\tif(p.f) return p.h>q.h;\n\treturn p.h<q.h;\n} int main(){\n\tscanf(\"%d\",&n);\n\tin.make(INT_MIN,0,1);\n\tT.push_back(in);\n\tH.push(0);\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>Hi>>L>>R;\n\t\tin.make(L,Hi,1);\n\t\tT.push_back(in);\n\t\tin.make(R,Hi,0);\n\t\tT.push_back(in);\n\t} sort(T.begin(),T.end(),cmp);\n\tfor(int i=1;i<=2*n;i++){\n\t\tif(T[i].f){\n\t\t\tif(T[i].h>H.top()){\n\t\t\t\ta.make(T[i].x,H.top());\n\t\t\t\tans.push_back(a);\n\t\t\t\ta.make(T[i].x,T[i].h);\n\t\t\t\tans.push_back(a);\n\t\t\t} H.push(T[i].h);\n\t\t} else {\n\t\t\tif(T[i].h==H.top()){\n\t\t\t\tH.del(H.top());\n\t\t\t\tif(T[i].h!=H.top()){\n\t\t\t\t\ta.make(T[i].x,T[i].h);\n\t\t\t\t\tans.push_back(a);\n\t\t\t\t\ta.make(T[i].x,H.top());\n\t\t\t\t\tans.push_back(a);\n\t\t\t\t}\n\t\t\t} else H.del(T[i].h);\n\t\t}\n\t} m=ans.size();\n\tcout<<m<<endl;\n\tfor(int i=1;i<=m;i++)\n\t\tcout<<ans[i-1].x<<\" \"\n\t\t<<ans[i-1].y<<endl;\n\treturn 0;\n}\n```\n## \u8c22\u8c22\u5927\u5bb6\uff01\uff01\n#### \u4f60\u8fc7\u4e86\u8fd9\u9898\u540e\uff0c\u53ef\u4ee5\u628a\u4e0a\u97621904\u8fc7\u4e86\n\n\n",
        "postTime": 1564112639,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u795e\u7287\u4eec\u90fd\u7528\u9ad8\u7aef\u7684\u65b9\u6cd5\uff0c\u770b\u4e0d\u61c2555crying\uff0c\n\n\n\u6211\u53ea\u597d\u7528\u4f4e\u7aef\u7684\u626b\u63cf\u7ebf\u548c\u5806\u3002\u3002\u3002\n\n\n\u00b7\u7b2c\u4e00\u6b65\uff0c\u79bb\u6563\u5316\uff1a\n\n\n \n```cpp\nstruct Road {\n   int x, y, num;\n   bool kind;\n} road[nn*2];    //\u697c\u623f\u5f53\u7136\u662f\u76d6\u5728\u8def\u4e0a\u5566~\n```\n\u5728\u8f93\u5165\u65f6\u628a\u4e00\u680b\u697c\u62c6\u6210\u4e24\u4e2a\u70b9\uff0ckind=1\u8bf4\u660e\u5b83\u662f\u697c\u7684\u7ec8\u70b9\uff0cnum\u662f\u7f16\u53f7\uff1a\n \n \n```cpp\nint s=0;\nfor (i=1;i<=n;i++){\n  scanf(\"%d%d%d\",&h,&l,&ri);\n  road[s].num=i;\n  road[s].y=h;\n  road[s++].x=l;\n  road[s].kind=1;\n  road[s].num=i;\n  road[s].y=h;\n  road[s++].x=ri;\n}\n```\n\u6309 x \u4ece\u5c0f\u5230\u5927sort\u3002\n\u00b7\u7b2c\u4e8c\u6b65\uff0c\u7528\u5806\u6c42\u89e3\uff1a\n\n\u5806\u4e2d\u5b58\u697c\u9ad8\u548c\u7f16\u53f7num(\u7528num\u4e0ebool\u6570\u7ec4\u6765\u5224\u65ad\u4e00\u680b\u697c\u662f\u5426\u5df2\u7ecf\u8fc7\u53bb\u4e86)\u3002\n\n\u5806\u7ef4\u62a4\u626b\u8fc7\u7684\u3001\u8fd8\u6ca1\u8fc7\u53bb\u7684\u697c\u4e2d\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u56e0\u4e3a\u5145\u5f53\u8f6e\u5ed3\u90fd\u662f\u5f53\u524d\u6700\u5927\u697c\u9ad8\u3002\n\nfor (i=0;i<s;i++) \u4e00\u904d\u5c31\u597d\u4e86\u3002\n\n\u7ec6\u8282\u6709\u597d\u591a\uff0c\u8bb2\u4e86\u5c31\u6ca1\u610f\u601d\u4e86\u3002\n\n\u00b7\u7b2c\u4e09\u6b65 \u8f93\u7b54\u6848\u3002\n\n\u590d\u6742\u5ea6\uff1a O\uff08nlogn\uff09\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define r register\n#define nn 100005\nusing namespace std;\nbool vis[nn];\nint Ans[nn*4][2];\nstruct Dui{\n    int y;\n    int num;\n}dui[nn*20];\nstruct Road{\n    int x,y,num;\n    bool kind;\n}road[nn*2];\ninline bool cmp(r Road a,r Road b){\n    return a.x<b.x;\n}\ninline bool cmp2(r Dui a,r Dui b){\n    return a.y<b.y;\n}\nint main(){\n    r int n,i,s=0,l,ri,h;\n    cin>>n;\n    for (i=1;i<=n;i++){\n        scanf(\"%d%d%d\",&h,&l,&ri);\n        road[s].num=i;\n        road[s].y=h;\n        road[s++].x=l;\n        road[s].kind=1;\n        road[s].num=i;\n        road[s].y=h;\n        road[s++].x=ri;\n    }\n    sort(road,road+s,cmp);\n    r int pre=0,last=0,a=0,tail=0,now;\n    for (i=0;i<s;i++){\n        now=road[i].x;\n        while (road[i].x==now){\n            if (road[i].kind){\n                vis[road[i].num]=1;\n                while (vis[dui[0].num]){\n                    pop_heap(dui,dui+tail+1,cmp2);\n                    tail--;\n                }\n            }\n            else {\n                dui[++tail].y=road[i].y;\n                dui[tail].num=road[i].num;\n                push_heap(dui,dui+tail+1,cmp2);\n            }\n            i++;\n        }\n        i--;\n        if (dui[0].y>pre||(vis[last]&&dui[0].y!=pre)){\n            Ans[++a][0]=road[i].x;\n            Ans[a][1]=pre;\n            Ans[++a][0]=road[i].x;\n            Ans[a][1]=dui[0].y;\n            pre=dui[0].y;\n            last=dui[0].num;\n        }\n    }\n    cout<<a<<endl;\n    for (i=1;i<=a;i++){\n        printf(\"%d %d\\n\",Ans[i][0],Ans[i][1]);\n    }\n    return 0;\n}\n```",
        "postTime": 1487849913,
        "uid": 20095,
        "name": "\u4e07\u67aa\u5148\u751f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\u8f6e\u5ed3\u7ebf\u4e0a\u7684\u70b9\u5750\u6807\u90fd\u5728\u8f6e\u5ed3\u9ad8\u5ea6\u53d1\u751f\u53d8\u5316\u7684\u4f4d\u7f6e\u4e0a\n\n\u800c\u8f6e\u5ed3\u7684\u9ad8\u5ea6\u5c31\u662f\u5f53\u524d\u7684\u6700\u5927\u9ad8\u5ea6\n\n\u626b\u63cf\u7ebf\u518d\u7ef4\u62a4\u5f53\u524d\u7684\u6700\u5927\u503c\n\n\u8fd9\u91cc\u7528Splay\n\n\u9700\u8981\u5bf9\u5750\u6807\u79bb\u6563\u5316\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u63d2\u5165\u548c\u5f39\u51fa\u7684\u65f6\u523b\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n=1,hst1=-1000000001,hst2,in,u=1,v=1,tt,cnt,root,tot,cot,tims[200010],ans[200010][2];\nstruct House\n{\n\tint x,y,h;\n}h[100010];\nstruct Popout\n{\n\tint y,h;\n}p[100010];\nstruct Splay\n{\n\tint son[2],fa,val,size,cnt;\n}t[100010];\nbool cmp(House a,House b)\n{\n\tif(a.x==b.x){return a.h>b.h;}\n\treturn a.x<b.x;\n}\nbool comp(Popout a,Popout b)\n{\n\treturn a.y<b.y;\n}\nint New(int x)\n{\n\tt[++tot].val=x,t[tot].cnt=1,t[tot].size=1;\n\treturn tot;\n}\nvoid Update(int p)\n{\n\tt[p].size=t[t[p].son[0]].size+t[t[p].son[1]].size+t[p].cnt;\n}\nint Relate(int p)\n{\n\treturn t[t[p].fa].son[1]==p; \n}\nvoid Connect(int p,int fa,bool which)\n{\n\tt[p].fa=fa;\n\tif(fa){t[fa].son[which]=p;}\n}\nvoid Rotate(int p)\n{\n\tint fa=t[p].fa;\n\tbool lr=Relate(p);\n\tConnect(p,t[fa].fa,Relate(fa));\n\tConnect(t[p].son[lr^1],fa,lr);\n\tConnect(fa,p,lr^1);\n\tUpdate(fa);Update(p);\n}\nvoid Splay(int p,int goal)\n{\n\tfor(int fa;(fa=t[p].fa)!=goal;Rotate(p))\n\t{\n\t\tif(t[fa].fa!=goal){Rotate(Relate(p)==Relate(fa)?fa:p);}\n\t}\n\tif(!goal){root=p;}\n}\nvoid Insert(int x)\n{\n\tif(!root){New(x);root=tot;return;}\n\tint now=root;\n\twhile(1)\n\t{\n\t\tif(x==t[now].val)\n\t\t{\n\t\t\t++t[now].cnt;\n\t\t\tUpdate(now);Update(t[now].fa);\n\t\t\tSplay(now,0);\n\t\t\treturn;\n\t\t}\n\t\tint fa=now;\n\t\tbool which=x>t[now].val;\n\t\tnow=t[fa].son[which];\n\t\tif(!now)\n\t\t{\n\t\t\tNew(x);\n\t\t\tConnect(tot,fa,which);\n\t\t\tUpdate(fa);\n\t\t\tSplay(tot,0);\n\t\t\treturn;\n\t\t}\n\t}\n}\nvoid Find(int x)\n{\n\tif(!root){return;}\n\tint now=root;\n\twhile(t[now].son[x>t[now].val]&&t[now].val!=x){now=t[now].son[x>t[now].val];}\n\tSplay(now,0);\n}\nint GP(int x)\n{\n\tFind(x);\n\tif(t[root].val<x){return root;}\n\tint now=t[root].son[0];\n\twhile(t[now].son[1]){now=t[now].son[1];}\n\treturn now;\n}\nint GN(int x)\n{\n\tFind(x);\n\tif(t[root].val>x){return root;}\n\tint now=t[root].son[1];\n\twhile(t[now].son[0]){now=t[now].son[0];}\n\treturn now;\n}\nvoid Delete(int x)\n{\n\tint pre=GP(x),nxt=GN(x);\n\tSplay(pre,0);\n\tSplay(nxt,pre);\n\tint del=t[nxt].son[0];\n\tif(t[del].cnt>1)\n\t{\n\t\tt[del].cnt--;\n\t\tSplay(del,0);\n\t}\n\telse{t[nxt].son[0]=0;}\n}\nint GVBR(int rank)\n{\n\tint now=root;\n\twhile(now)\n\t{\n\t\tif(t[now].son[0]&&rank<=t[t[now].son[0]].size)\n\t\t{\n\t\t\tnow=t[now].son[0];\n\t\t\tcontinue;\n\t\t}\n\t\trank-=t[t[now].son[0]].size+t[now].cnt;\n\t\tif(rank<=0){return t[now].val;}\n\t\tnow=t[now].son[1];\n\t}\n}\nint main()\n{\n\tInsert(-1000000001);Insert(1000000001);\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&h[i].h,&h[i].x,&h[i].y);\n\t\tp[i].y=h[i].y,p[i].h=h[i].h,\n\t\ttims[++cot]=h[i].x,tims[++cot]=h[i].y;//\u8fd9\u5c31\u662f\u79bb\u6563\u5316\n\t}\n\tsort(h+1,h+n+1,cmp);\n\tsort(p+1,p+n+1,comp);\n\tsort(tims+1,tims+cot+1);\n\tfor(int i=1;i<=cot;++i)\n\t{\n\t\ttt=tims[i],hst2=0;\n\t\twhile(h[u].x==tt)//\u63d2\u5165\n\t\t{\n\t\t\tInsert(h[u].h);\n\t\t\t++u,++in;\n\t\t}\n\t\twhile(p[v].y==tt)//\u5f39\u51fa\n\t\t{\n\t\t\tDelete(p[v].h);\n\t\t\t++v,--in;\n\t\t}\n\t\thst2=max(hst2,GVBR(in+1));//\u67e5\u8be2\u5f53\u524d\u7684\u9ad8\u5ea6\n\t\tif(hst1!=hst2){ans[++cnt][0]=tt,ans[cnt][1]=(hst1==-1000000001?0:hst1),ans[++cnt][0]=tt,ans[cnt][1]=(hst2==-1000000001?0:hst2);}//\u9ad8\u5ea6\u53d8\u5316\uff0c\u8bb0\u5f55\n\t\thst1=hst2;\n\t}\n\tprintf(\"%d\\n\",cnt);\n\tfor(int i=1;i<=cnt;++i){printf(\"%d %d\\n\",ans[i][0],ans[i][1]);}\n\treturn 0;\n}\n```",
        "postTime": 1566140518,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "### \u9996\u5148\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u7ebf\u6bb5\u6811\u53bb\u89e3\u51b3\uff0c\u5e94\u8be5\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\u4f46\u662f\u8fd9\u6837\u7ef4\u62a4\u611f\u89c9\u5f88\u4e0d\u723d\u3002\u4e8e\u662f\u6211\u4eec\u5c06\u6240\u6709\u7684\u77e9\u5f62\u4ece\u77ee\u5230\u9ad8\u6392\u5e8f\uff0c\u8fd9\u6837\u53ea\u7528\u66b4\u529b\u4fee\u6539\u6bcf\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u503c\u5373\u53ef\n### \u63a5\u7740\u60f3\u53bb\u4fee\u6539\u533a\u95f4\uff0c\u5c1d\u8bd5\u6784\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u800c\u5de6\u53f3\u7aef\u70b9\u8303\u56f4\u8fbe\u5230\u4e8610^9\uff0c\u56e0\u800c\u65e0\u6cd5\u76f4\u63a5\u7528\u77e9\u5f62\u7684\u8fb9\u754c\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u533a\u95f4\uff0c\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316\u3002\n### \u7136\u800c\u6211\u61d2\u5f97\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u60f3\u4e00\u60f3\u8fd9\u9898\u662f\u66b4\u529b\u4fee\u6539\u4e00\u6bb5\u533a\u95f4\u4e3a\u5b9a\u503c\uff0c\u81ea\u7136\u5730\u60f3\u5230\u4e86\u73c2\u6735\u8389\u6811\u3002\n### \u4e8e\u662f\u5c31\u7528\u73c2\u6735\u8389\u6811A\u4e86\u8fd9\u9053\u9898\uff0c\u6ce8\u610f\u6240\u6709\u4fee\u6539\u5b8c\u6bd5\u540e\uff0c\u4e00\u6bb5\u9ad8\u5ea6\u76f8\u540c\u7684\u533a\u95f4\u5728\u73c2\u6735\u8389\u6811\u4e2d\u53ef\u80fd\u5bf9\u5e94\u4e0d\u53ea\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u800c\u5c1d\u8bd5\u53bb\u5408\u5e76\u3002\n### AC\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <set>\n#define IT set<node>::iterator\nusing std::set;\nconst int MAXN = int(1e5 + 5); \nstruct node{\n    mutable int l, r;\n    mutable int v;\n    node(int L, int R = -1, int V = 0) : l(L), r(R), v(V){}\n    bool operator<(const node& o) const{\n        return l < o.l;\n    }\n};\nset<node> s;\nIT split(int pos){\n   IT it = s.lower_bound(pos);\n   if(it != s.end() && it->l == pos)return it;\n   --it;\n   int L = it->l, R = it->r, V = it->v;\n   s.erase(it);\n   s.insert(node(L, pos - 1, V));\n   return s.insert(node(pos, R, V)).first;\n}\nvoid assign(int L, int R, int V){\n    IT itr = split(R + 1), itl = split(L);\n    s.erase(itl, itr);\n    s.insert(node(L, R, V));\n}\nstruct rect{\n    int l, r, h;\n    bool used;\n} a[MAXN];\nbool cmp1(rect a, rect b){\n\treturn a.l < b.l;\n}\nbool cmp(rect a, rect b){\n    return a.h < b.h;\n} \nstruct ans_t{\n\tint x, y;\n\tans_t(){}\n\tans_t(int x, int y) : x(x), y(y){}\n} ans[MAXN * 4];\nint p;\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    s.insert(node(int(-1e9-5), int(1e9+5), 0));\n    for(int i = 1; i <= n; ++i)\n        scanf(\"%d%d%d\", &a[i].h, &a[i].l, &a[i].r); \n    std::sort(a + 1, a + 1 + n, cmp);\n    for(int i = 1; i <= n; ++i)\n        assign(a[i].l, a[i].r - 1, a[i].h);\n    //\u73c2\u6735\u8389\u6811\u4e0a\u7ef4\u62a4\u7684\u76f8\u540c\u9ad8\u5ea6\u76f8\u90bb\u7684\u533a\u95f4\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u8fdb\u884c\u5408\u5e76\n    for(IT i = s.begin(); i != s.end();){\n    \tIT nex = i;\n    \t++nex;\n    \tif(nex != s.end() && nex->v == i->v && nex->l == i->r + 1){\n    \t\ti->r = nex->r;\n    \t\ts.erase(nex);\n    \t}else ++i;\n    }\n    for(IT i = s.begin(); i != s.end(); ++i){\n        if(i->l == -1e9-5)ans[++p] = ans_t(i->r+1, 0);\n        else if(i->r == 1e9+5)ans[++p] = ans_t(i->l, 0);\n        else ans[++p] = ans_t(i->l, i->v), ans[++p] = ans_t(i->r+1,i->v);\n    }\n    printf(\"%d\\n\", p);\n    for(int i = 1; i <= p; ++i)\n    \tprintf(\"%d %d\\n\", ans[i].x, ans[i].y);\n    return 0;\n}\n\n```",
        "postTime": 1540482050,
        "uid": 61262,
        "name": "lyhokia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "### \u5e76\u67e5\u96c6\u89e3\u6cd5\n##### \u5f53\u524d\u6700\u4f18\u89e3 #1(2023/5/9)\n\n------------\n\u4f18\u70b9\uff1a\u597d\u60f3 & \u597d\u5199 & \u6548\u7387\u8f83\u9ad8\u3002\n\n\u7c7b\u4f3c[P2391 \u767d\u96ea\u7691\u7691](https://www.luogu.com.cn/problem/P2391)\u4e2d\u7684\u533a\u95f4\u67d3\u8272\uff0c\u540e\u88ab\u67d3\u8272\u7684\u533a\u95f4\u989c\u8272\u4f1a\u8986\u76d6\u4efb\u4f55\u5148\u524d\u88ab\u67d3\u8272\u7684\u533a\u95f4\u989c\u8272\uff0c\u533a\u95f4\u7684\u67d3\u8272\u5b58\u5728\u987a\u5e8f\uff0c\u4ece\u540e\u5230\u524d\u7684\u67d3\u8272\u987a\u5e8f\u53ef\u4ee5\u76f4\u63a5\u56fa\u5b9a\u533a\u95f4\u7684\u989c\u8272\uff0c\u4e0d\u63a5\u53d7\u4e4b\u540e\uff08\u5b9e\u9645\u64cd\u4f5c\u5e8f\u5217\u4e2d\u4e4b\u524d\uff09\u7684\u67d3\u8272\uff1b\u5728\u672c\u9898\u4e2d\u66f4\u9ad8\u7684\u697c\u623f\u4f1a\u8986\u76d6\u66f4\u4f4e\u7684\u697c\u623f\u7684\u5929\u9645\u7ebf\uff0c\u548c\u767d\u96ea\u7691\u7691\u7c7b\u4f3c\u3002\n\n\u7b14\u8005\u5c06\u8fd9\u79cd\u9898\u76ee\u7684\u6027\u8d28\u5927\u81f4\u603b\u7ed3\u5982\u4e0b\uff1a**\u5bf9\u4e8e\u5e8f\u5217\u7684\u64cd\u4f5c\u5b58\u5728\u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u64cd\u4f5c\u8986\u76d6\u4f18\u5148\u7ea7\u4f4e\u7684\u64cd\u4f5c**\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6309\u7167\u4f18\u5148\u7ea7\u8fdb\u884c\u64cd\u4f5c\uff0c\u914d\u5408\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e8e\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u7684 $O(1)$ \u64cd\u4f5c\u3002\n\n------------\n#### \u4ece\u66b4\u529b\u5f00\u59cb\u4f18\u5316\u590d\u6742\u5ea6\n\n\u66b4\u529b\u601d\u8def\uff1a\u4f7f\u7528\u6570\u7ec4 $c$ \u8bb0\u5f55\u533a\u95f4 $[-10^9,+10^9]$ \u4e0a\u6bcf\u4e2a\u6574\u6570\u70b9\u7684\u9ad8\u5ea6\uff0c\u5bf9\u4f4d\u7f6e $c_i$ \u53d6\u539f\u9ad8\u5ea6\u548c\u5f53\u524d\u697c\u623f\u9ad8\u5ea6 $\\max$\uff0c\u6240\u6709\u64cd\u4f5c\u7ed3\u675f\u540e\u904d\u5386 $c$\uff0c\u7edf\u8ba1\u62d0\u70b9\u6570\u5e76\u8bb0\u5f55\u5176\u4f4d\u7f6e\u8f93\u51fa\u3002\n\n\u65e0\u9700\u5206\u6790\uff0c\u672c\u9898\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u9650\u5236\u663e\u7136\u65e0\u6cd5\u63a5\u53d7\u6b64\u7b49\u505a\u6cd5\u7684\u82b1\u8d39\u3002\n\n\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4f18\u5316\uff1a\u7531\u4e8e\u7b54\u6848\u53ea\u8981\u6c42\u7edf\u8ba1\u5929\u9645\u7ebf\u62d0\u70b9\u4e2a\u6570\u548c\u5750\u6807\uff0c\u53ea\u8003\u8651\u53ef\u80fd\u5b58\u5728\u62d0\u70b9\u7684\u4f4d\u7f6e\uff0c\u5373\u6bcf\u680b\u697c\u623f\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef\u3002\u79bb\u6563\u540e\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u6700\u5927\u9ad8\u5ea6\uff0c\u6700\u7ec8\u626b\u63cf\u4e00\u904d\u79bb\u6563\u5e8f\u5217\uff0c\u7edf\u8ba1\u62d0\u70b9\u6570\u91cf\u5e76\u8bb0\u5f55\u4f4d\u7f6e\u3001\u8f93\u51fa\u3002\n\n\u7531\u4e8e\u6bcf\u680b\u697c\u623f\u79bb\u6563\u540e\u88ab\u5e8f\u5217\u4e2d\u7684\u4e24\u4e2a\u70b9\u4ee3\u66ff\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u74f6\u9888\u4e3a\u67d3\u8272\u64cd\u4f5c $O(n^2)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u73b0\u5728\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u697c\u623f\u7684\u9ad8\u5ea6\u5df2\u7ecf\u63d0\u524d\u5f97\u77e5\uff0c\u4ece\u9ad8\u5230\u4f4e\u5bf9\u697c\u623f\u6392\u5e8f\u540e\uff0c\u4f9d\u6b21\u66f4\u65b0\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u9ad8\u5ea6\uff0c\u5df2\u7ecf\u66f4\u65b0\u8fc7\u7684\u4f4d\u7f6e\u7528\u5e76\u67e5\u96c6\u8df3\u8fc7\u3002\u7531\u4e8e\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u81f3\u591a\u88ab\u67d3\u8272 $1$ \u6b21\uff0c\u67d3\u8272\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3\u5747\u644a $O(n\\log n)$\uff0c\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u81f3\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<utility>\n#include<vector>\nusing namespace std;\nstruct House{int h,l,r;}s[100001];\nint n,cnt,c[200001],f[200001],p[200001];//\u6570\u7ec4c\u8bb0\u5f55\u79bb\u6563\u540e\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\nvector<pair<int,int> > v;//\u8bb0\u5f55\u5929\u9645\u7ebf\u62d0\u70b9\u7684\u5750\u6807\nbool cmp(const House &x,const House &y){\n\treturn x.h>y.h;\n}\nint ask(const int &x){\n\tif(x==f[x]) return x;\n\treturn f[x]=ask(f[x]);\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);cout.tie(0);\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>s[i].h>>s[i].l>>s[i].r;\n\t\tp[i]=s[i].l,p[i+n]=s[i].r;\n\t}\n\tsort(s+1,s+n+1,cmp);//\u6392\u5e8f\u548c\u79bb\u6563\u5316\n\tsort(p+1,p+n*2+1);\n\tcnt=unique(p+1,p+n*2+1)-p-1;\n\tfor(int i=1;i<=cnt;i++) f[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tfor(int i=1;i<=n;i++){\n\t\ts[i].l=lower_bound(p+1,p+cnt+1,s[i].l)-p;\n\t\ts[i].r=lower_bound(p+1,p+cnt+1,s[i].r)-p;\n\t\tfor(int j=ask(s[i].r-1);j>=s[i].l;j=ask(j-1))\n\t\t\tc[j]=s[i].h,f[j]=f[j-1];//\u5e76\u67e5\u96c6\u66f4\u65b0\n\t}\n\tfor(int i=1;i<=cnt;i++) if(c[i]!=c[i-1]){\n\t\tv.push_back({p[i],c[i-1]});\n\t\tv.push_back({p[i],c[i]});\n\t}\n\tcout<<v.size()<<'\\n';\n\tfor(auto &i:v) cout<<i.first<<' '<<i.second<<'\\n';\n\treturn 0;\n}\n```\n\u62d0\u70b9\u7684\u51fa\u73b0\u662f\u56e0\u4e3a\u8be5\u4f4d\u7f6e\u5b58\u5728\u9ad8\u5ea6\u53d8\u5316\uff0c\u5176\u5fc5\u5b9a\u6210\u5bf9\u51fa\u73b0\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u6b21\u6bd4\u8f83\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u9ad8\u5ea6\u6765\u8bb0\u5f55\u7b54\u6848\u3002\u4e3a\u4e86\u9632\u6b62\u4e24\u680b\u697c\u623f\u4e4b\u95f4\u7684\u7f1d\u9699\u88ab\u9519\u8bef\u586b\u5145\uff0c\u5c06\u697c\u623f\u79bb\u6563\u540e\u7684\u53f3\u7aef\u70b9 $-1$\uff0c\u8fde\u5e26\u89e3\u51b3\u4e86\u6700\u540e\u4e00\u4e2a\u5929\u9645\u7ebf\u62d0\u70b9 $y$ \u5750\u6807\u5e94\u4e3a $0$ \u7684\u5904\u7406\uff0c\u4e0d\u9700\u8981\u989d\u5916\u64cd\u4f5c\u3002\n\n------------\n\u95f2\u8bdd\uff1a\u7b14\u8005\u7ec3\u4e60\u626b\u63cf\u7ebf\u65f6\u770b\u5230\u4e86\u6b64\u9898\uff0c\u8054\u60f3\u5230\u5e76\u67e5\u96c6\uff0c\u7ffb\u9605\u9898\u89e3\u533a\u5374\u6ca1\u627e\u5230\u4e00\u7bc7\u63d0\u53ca\u5e76\u67e5\u96c6\u7684\u9898\u89e3\uff0c\u6700\u7ec8\u62b1\u7740~~\u5077\u61d2~~\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\u5b9e\u73b0\u5e76\u901a\u8fc7\u4e86\uff0c\u51e0\u4e2a\u6708\u540e\u5fc3\u8840\u6765\u6f6e\u60f3\u8981\u5199\u4e00\u7bc7\u9898\u89e3\u3002",
        "postTime": 1674479938,
        "uid": 662295,
        "name": "Flanksy",
        "ccfLevel": 0,
        "title": "P1382 \u697c\u623f"
    },
    {
        "content": "\u524d\u7f6e\u7b97\u6cd5:\u79bb\u6563\u5316**\u6216**\u52a8\u6001\u5f00\u70b9\u3002 //\u5efa\u8bae\u5148\u5b66\u4e60\u5176\u4e2d\u4e4b\u4e00,\u4f46\u8fd9\u53ea\u662f\u4ee3\u7801\u5b9e\u73b0\u95ee\u9898,\u4e0d\u4f1a\u4e5f\u4e0d\u5f71\u54cd\u770b\u61c2\u9898\u89e3\u7684\u601d\u8def\u90e8\u5206\u3002\n\n\u8fd9\u9898\u76f4\u63a5\u7528\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002\u6ca1\u5b66\u8fc7\u626b\u63cf\u7ebf\u7684\u4e5f\u53ef\u4ee5\u770b\u6b64\u7bc7\u9898\u89e3\u3002\u5982\u679c\u5b66\u4e86\u626b\u63cf\u7ebf,\u57fa\u672c\u4e0a\u5c31\u662f\u6a21\u677f\u9898\u4e86\u3002\n\n\u9996\u5148\u628a\u6240\u6709\u5e73\u884c\u4e8ey\u8f74\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762**\u4ece\u5c0f\u5230\u5927**\u6392\u5e8f(\u653e\u5e73\u884c\u4e8ex\u8f74\u7684\u4e5f\u53ef\u4ee5),\u5982\u679c\u662f\u77e9\u5f62\u7684\u5de6\u7ebf\u6bb5\u6807\u8bb0\u4e3a1,\u53f3\u7ebf\u6bb5\u6807\u8bb0\u4e3a-1\u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u6807\u8bb0\u540e\u9762\u518d\u8bf4\u3002\n\n\u73b0\u5728\u60f3\u8981\u7ef4\u62a4\u4e00\u4e2a\u77e9\u5f62\u6784\u6210\u7684\u8f6e\u5ed3\u7ebf,\u90a3\u4e48\u6839\u636e\u4e4b\u524d\u6392\u597d\u5e8f\u7684\u7ebf\u6bb5\u9010\u4e00\u8fdb\u884c\u64cd\u4f5c,\u5982\u679c**\u5f53\u524d\u7ebf\u6bb5\u6709\u9876\u70b9**,\u6b64\u70b9\u7684x\u8f74\u8fd8\u662f\u539f\u6765\u7684x\u8f74,y\u8f74\u80af\u5b9a\u662f\u7531\u5f53\u524d\u7684y\u503c\u6700\u5927\u7684\u7ebf\u6bb5\u7684\u4e0a\u7aef\u9876\u70b9\u7684y\u503c\u548c\u5176\u4ed6\u7684\u4e00\u4e2a\u70b9\u3002\u8fd9\u4e2a\u5176\u4ed6\u7684\u70b9\u5176\u5b9e\u5c31\u662f\u4e0a\u4e00\u6b21\u7684\u6700\u5927\u503c\u3002\n\n\u5982\u679c\u6ca1\u6709\u9876\u70b9,\u90a3\u4e48\u5c31\u662f\u8be5\u7ebf\u6bb5\u4e0d\u662f\u5f53\u524d\u7684\u6700\u5927\u503c,\u6216\u8005\u4e0d\u662f\u552f\u4e00\u7684\u6700\u5927\u503c\u3002\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b2\u79cd\u60c5\u51b5\u3002\n```\n(v\u8868\u793a\u679a\u4e3e\u5230\u4e86\u8fd9\u6761\u8fb9)\n________         __v_____\n|   v___|__     |  |  |  |\n|   |   |  |    |  |  |  | (\u56fe2\u77e9\u5f621\u662f\u7b2c1,3\u6761\u8fb9)\n|___|___|__|    |__|__|__|\n     \u56fe1            \u56fe2\n```\n\u6240\u4ee5\u5728\u679a\u4e3e\u65f6\u8981\u7279\u5224,\u5982\u679cmax\u503c\u4e0d\u66f4\u65b0,\u90a3\u4e48\u4e00\u5b9a\u662f\u4ee5\u4e0a2\u4e2d\u60c5\u51b5\u4e4b\u4e00\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898:\u600e\u4e48\u6c42\u6700\u5927\u503c?\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u6807\u8bb0\u76841\u548c-1\u5c31\u6709\u7528\u4e86,\u6c42\u6700\u5927\u503c\u5f88\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\u7136\u540e\u5bf9\u4e8e\u6807\u8bb0\u4e3a1\u7684,\u5c31\u628a\u7ebf\u6bb5\u7684\u4e0a\u4e0b\u7aef\u70b9y\u503c\u4e4b\u95f4\u7684\u503c\u90fd+1,\u7136\u540e\u5728\u4fee\u6539\u7684\u65f6\u5019\u53ef\u4ee5\u8bb0\u5f55\u6700\u5927\u503c,\u8fd9\u5c31\u662f\u7ed3\u679c,\u4e0d\u7528\u5199\u67e5\u8be2\u51fd\u6570\u3002\n\n\u7ec6\u8282\u90e8\u5206: //\u8bb2\u4e00\u4e0b\u90e8\u5206\u6211\u9519\u8fc7\u7684\u5730\u65b9\u3002\n\n\u8003\u8651\u6e05\u695a\u52a0\u548c\u67e5\u8be2\u7684\u987a\u5e8f,~~\u987a\u5e8f\u4e0d\u505a\u63d0\u793a,\u81ea\u5df1\u53bb\u8c03\u5427\u3002~~\n\n\u8003\u8651\u7ebf\u6bb5\u91cd\u590d\u95ee\u9898,~~\u4e5f\u4e0d\u505a\u63d0\u793a~~\u3002\n\n\u4ee3\u7801: //\u6ce8\u91ca\u6bd4\u8f83\u5c11,\u5c06\u5c31\u7740\u5427\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct xyq{\n\tint x1,x2,y,sign;\n}a[1000005];\nstruct rule{\n\tbool operator()(const xyq &s1,const xyq &s2){\n\t\treturn s1.y<s2.y||s1.y==s2.y&&s1.x2<s2.x2;\n\t}\n};\nint x[1000005];\nint addsum[1000005],size[1000005];\nvoid change(long long id,long long nowl,long long nowr,long long ql,long long qr,long long add){\n\tif(nowr<ql||nowl>qr){\n\t\treturn;\n\t}\n\tif(nowl>=ql&&nowr<=qr){\n\t\taddsum[id]+=add;\n\t\tif(addsum[id]>0){\n\t\t\tsize[id]=x[nowr+1]-x[nowl]; //size\u53ef\u4ee5\u8868\u793a\u6700\u5927\u503c\u3002\n\t\t}else{\n\t\t\tsize[id]=0; //\u6ca1\u6709\u7ebf\u6bb5,\u5373\u4e3a0\u3002\n\t\t}\n\t\tif(addsum[id]<=0){\n\t\t\tif(nowl==nowr){\n\t\t\t\tsize[id]=0;\n\t\t\t}else{\n\t\t\t\tsize[id]=size[id<<1]+size[(id<<1)|1];\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tlong long mid=nowl+nowr>>1;\n\tchange(id<<1,nowl,mid,ql,qr,add);\n\tchange((id<<1)|1,mid+1,nowr,ql,qr,add);\n\tif(addsum[id]<=0){\n\t\tif(nowl==nowr){\n\t\t\tsize[id]=0;\n\t\t}else{\n\t\t\tsize[id]=size[id<<1]+size[(id<<1)|1];\n\t\t}\n\t}\n}\nint ansx[1000005],ansy[1000005],tot=0;\nint main(){\n\tlong long l,r,h,n,i,x1,y1,x2,y2,ykb,sum=0,t1,t2,last=0;\n\tcin>>n;\n\tfor(i=0;i<n;++i){\n\t\tcin>>h>>l>>r;\n\t\tx1=0;\n\t\tx2=h;\n\t\ty1=l;\n\t\ty2=r;\n\t\ta[i<<1].x1=x1;\n\t\ta[(i<<1)|1].x1=x1;\n\t\ta[i<<1].x2=x2;\n\t\ta[(i<<1)|1].x2=x2;\n\t\ta[i<<1].y=y1;\n\t\ta[(i<<1)|1].y=y2;\n\t\ta[i<<1].sign=1;\n\t\ta[(i<<1)|1].sign=-1;\n\t\tx[i<<1]=x1;\n\t\tx[(i<<1)|1]=x2;\n\t}\n\tsort(a,a+(n<<1),rule()); //\u79bb\u6563\u5316\u3002\n\tsort(x,x+(n<<1));\n\tykb=(n<<1);\n\tfor(i=0;i<ykb;++i){\n\t\tsum+=size[1]*(a[i].y-a[i-1].y);\n\t\tt1=lower_bound(x,x+ykb,a[i].x1)-x; //\u4e0e\u4e0b\u9762\u4e00\u884c\u90fd\u662f\u79bb\u6563\u5316\u3002\n\t\tt2=lower_bound(x,x+ykb,a[i].x2)-x;\n\t\tchange(1,0,ykb,t1,t2-1,a[i].sign);\n\t\tif(size[1]!=last&&a[i].y!=a[i+1].y&&(a[i].y!=a[i-1].y||a[i].sign==a[i-1].sign||a[i].x2!=a[i-1].x2)){\n\t\t\tansx[tot]=a[i].y;\n\t\t\tansx[tot+1]=a[i].y;\n\t\t\tansy[tot]=last;\n\t\t\tansy[tot+1]=size[1];\n\t\t\tlast=size[1];\n\t\t\ttot+=2;\n\t\t}\n\t}\n\tcout<<tot<<endl;\n\tfor(i=0;i<tot;i++){\n\t\tcout<<ansx[i]<<\" \"<<ansy[i]<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1598153711,
        "uid": 87799,
        "name": "xh39",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u6211\u5e76\u4e0d\u4f1a\u5927\u4f6c\u8bf4\u7684\u626b\u63cf\u7ebf\u4ec0\u4e48\u7684\u9a9a\u64cd\u4f5c\u3002\n\n\u6211\u53ea\u662f\u901a\u8fc7\u6bd4\u8f83\u7279\u6b8a\u7684\u63d2\u5165\u65b9\u5f0f\u548c\u7ebf\u6bb5\u6811\u5b8c\u6210\u4e86\u6b64\u9898\u3002\u5f53\u7136\uff0c\u770b\u6570\u636e\u8303\u56f4\uff0c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528\u79bb\u6563\u5316\u3002\u5728\u79bb\u6563\u5316\u65f6\uff0c\u4e00\u4e2a\u77e9\u5f62\u6211\u63d2\u5165\u4e86\u4e09\u4e2a\u70b9\uff0c\u5206\u522b\u662f\uff0cl,r-1,r,\u56e0\u4e3al\u4ee3\u8868\u5728\u8fd9\u4e2a\u5730\u65b9\u4f1a\u6709\u4e00\u4e2a\u53ef\u80fd\u4ea7\u751f\u7684\u9ad8\u70b9\uff0cr-1\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728[l,r-1]\u533a\u95f4\u91cc\uff0c\u90fd\u6709hi\u53c2\u4e0e\u6700\u5927\u503c\u8fd0\u7b97\u3002\u6700\u540e\u4e00\u4e2a\u70b9\u662fr\uff0c\u4e3a\u4e86\u4f7f\u5176\u80fd\u591f\u7ed9\u5176\u4ed6\u77e9\u5f62\u8ba9\u51fa\u4f4d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u7684\u5904\u7406\u6bd4\u8f83\u7279\u522b\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5f53h\u53d8\u5316\u65f6\uff0c\u5f53h\u53d8\u5927\uff0c\u80af\u5b9a\u6709\u4e00\u4e2a\u66f4\u9ad8\u7684\u77e9\u5f62\u4e0e\u8fd9\u4e00\u4e2a\u76f8\u4ea4\u6216\u76f8\u90bb\uff0c\u5f53h\u53d8\u5c0f\uff0c\u80af\u5b9a\u8fd9\u4e2a\u77e9\u5f62\u5230\u8fbe\u4e86\u5c3d\u5934\uff0c\u7136\u540e\u53ef\u80fd\u53d8\u4e3a\u96f6\u6216\u662f\u63a5\u4e0b\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927h\u3002\u6240\u4ee5\u5728\u6700\u540e\u7684r\u8fd9\u4e2a\u4f4d\u7f6e\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u5c06\u8fd9\u4e2a\u70b9\u7684\u9ad8\u4fee\u6539\u4e3ah\u800c\u662f\u4fee\u6539\u62100\u3002\u800c\u4e14\uff0c\u6211\u4eec\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53h\u53d8\u5316\u65f6\uff0c\u53d8\u5316\u7684\u4f4d\u7f6e\u4e00\u5b9a\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5b58\u50a8\u540e\u4e00\u6b21\u7684\u503c\uff0c\u7528\u7ebf\u6bb5\u6811\u8ba1\u7b97\u540e\u4e00\u6b21\u7684\u503c\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u63a8\u5bfc\u51fa\u4e0a\u4e00\u6b21\u7684\u5750\u6807\u503c\u3002\u8fd9\u6837\uff0c\u6240\u6709\u7684\u51fa\u73b0\u5728r\u4f4d\u7f6e\u7684\u77e9\u5f62\u53ef\u4ee5\u6b63\u5e38\u8ba1\u7b97\u3002\u7136\u540e\u6211\u4eec\u5bf9\u4e8e[l,r-1]\u533a\u95f4\u5c31\u662f\u6b63\u5e38\u7684\u4fee\u6539\u4e3ah\n\n\u6ce8\u610f\u51e0\u4e2a\u5c0f\u7ec6\u8282\n\n\u4e00\u662f\u5f00\u4e00\u4e2a\u53d8\u91cf\u8868\u793a\u4e4b\u524d\u7684h\uff0c\u4ee5\u4fbf\u89c2\u770bh\u662f\u5426\u53d8\u5316\uff0c\u82e5h\u6ca1\u6709\u53d8\u5316\u5219\u6839\u672c\u4e0d\u9700\u8981\u8f93\u51fa\u8fd9\u4e2a\u70b9\u3002\n\u4e8c\u662f\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5f00\u7ebf\u6bb5\u6811\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801  \u6211\u7684\u7ebf\u6bb5\u6570\u5e38\u6570\u5927\uff0c\u8dd1\u7684\u6162\uff08\u6211\u662f\u83dc\u9e21\u554a\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5 + 10;\nint n, h[maxn], l[maxn], r[maxn], loc[8 * maxn];\npriority_queue <int> A;\nint read() {\n    char x = getchar(); int t = 0, f = 1;\n    while (x<'0' || x>'9') {\n        if (x == '-') f = -1;\n        x = getchar();\n    }\n    while (x >= '0'&&x <= '9') {\n        t = t * 10 + x - '0';\n        x = getchar();\n    }\n    return t * f;\n}\nstruct line_tre {\n    int max, lazytag;\n}tre[12 * maxn];\nint upout = 0,ans[8*maxn][2],cnt;\nvoid query(int root, int tl, int tr) {\n    tre[root].max = max(tre[root].max, tre[root].lazytag);\n    if (tl == tr) {\n        if (tre[root].max != upout) {\n            ans[++cnt][0] = loc[tl];\n            ans[cnt][1] = upout;\n            ans[++cnt][0] = loc[tl];\n            ans[cnt][1] = tre[root].max;\n            upout = tre[root].max;\n        }\n        return;\n    }\n    tre[root * 2].lazytag = max(tre[root * 2].lazytag, tre[root].lazytag);\n    tre[root * 2 + 1].lazytag = max(tre[root * 2 + 1].lazytag, tre[root].lazytag);\n    tre[root].lazytag = 0;\n    query(root * 2, tl, (tl + tr) >> 1);\n    query(root * 2 + 1, ((tl + tr) >> 1) + 1, tr);\n    return;\n}\nvoid update(int root, int tl, int tr, int ql, int qr, int val) {\n    if (ql > tr || qr < tl) return;\n    if (tl >= ql && tr <= qr) {\n        tre[root].lazytag = max(tre[root].lazytag, val);\n        tre[root].max = max(tre[root].max, tre[root].lazytag);\n        return;\n    }\n    tre[root].max *= max(tre[root].max, tre[root].lazytag);\n    tre[root * 2].lazytag = max(tre[root * 2].lazytag, tre[root].lazytag);\n    tre[root * 2 + 1].lazytag = max(tre[root * 2 + 1].lazytag, tre[root].lazytag);\n    tre[root].lazytag = 0;\n    update(root * 2, tl, (tl + tr) >> 1, ql, qr, val);\n    update(root * 2 + 1, ((tl + tr) >> 1) + 1, tr, ql, qr, val);\n    return;\n}\nint erf(int x) {\n    int l = 1, r = loc[0], mid;\n    while (l < r) {\n        mid = (l + r) >> 1;\n        if (loc[mid] >= x) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        h[i] = read(), l[i] = read(), r[i] = read();\n        A.push(-l[i]); A.push(-r[i] + 1); A.push(-r[i]);\n    }\n    int up = -1e9-10;\n    for (int i = 1; i <= 3 * n; i++) {\n        if (A.top() != up) {\n            up = A.top();\n            loc[++loc[0]] = -A.top();\n        }\n        A.pop();\n    }\n    for (int i = 1; i <= n; i++) {\n        update(1, 1, loc[0], erf(l[i]), erf(r[i] - 1), h[i]);\n    }\n    query(1, 1, loc[0]);\n    cout << cnt << endl;\n    for (int i = 1; i <= cnt; i++) {\n        cout << ans[i][0] << ' ' << ans[i][1] << endl;\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1539243120,
        "uid": 21194,
        "name": "CURRENT_F",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u3002\u4f46\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u633a\u591a\u3002\u4f8b\u5982\u4e24\u6761\u7b49\u9ad8\u7ebf\u6bb5\u91cd\u53e0\u6216\u6070\u597d\u8854\u63a5\u7684\u60c5\u51b5\u3002\n\n\n1\u3001\u7528\u5806\u7ef4\u62a4\u5f53\u524d\u6700\u9ad8\u9ad8\u5ea6\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\n2\u3001\u7528\u7ebf\u6bb5\u6811\u76f4\u63a5\u8ba1\u7b97\u3002\n",
        "postTime": 1375680137,
        "uid": 277,
        "name": "plane",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u521a\u5b66\u4e60\u626b\u63cf\u7ebf\uff0c\u6240\u4ee5\u53d1\u4e00\u7bc7\u9898\u89e3\u52a0\u6df1\u4e00\u4e0b\u8bb0\u5fc6\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1a\u7ebf\u6bb5\u6811\uff0c\u8111\u5b50\u3002\n\n## Part1\u626b\u63cf\u7ebf\n\n\u626b\u63cf\u7ebf\u771f\u662f\u4e00\u79cd\u9ad8\u7ea7\u53c8\u7b80\u4fbf\u7684\u601d\u60f3\uff0c\u6211\u770b\u5927\u5bb6\u597d\u50cf\u90fd\u6ca1\u600e\u4e48\u4ed4\u7ec6\u8bb2\uff0c\u6211\u5c31\u5728\u8fd9\u91cc\u591a\u505a\u4e00\u4e9b\u8bb2\u89e3\uff0c\u9996\u5148\u770b\u626b\u63cf\u7ebf\u7684\u6a21\u677f\u9898\uff1a\n```\n\u6c42 n \u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u5e76\u3002\n```\n\u5176\u5b9e\u5bf9\u4e8e\u6211\u4eec\u4eba\u8111\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u4e5f\u662f\u7528\u626b\u63cf\u7ebf\u7684\u601d\u60f3\u7684\uff0c\u4ece\u5de6\u5230\u53f3\uff08\u4ece\u4e0a\u5230\u4e0b\u4e5f\u53ef\u4ee5\uff09\u770b\u7ad6\u76f4\u7ebf\u6bb5\u8986\u76d6\u7684\u9762\u79ef\u6bcf\u6b21\u9ad8\u5ea6\u53d8\u5316\u4ee5\u540e\u5c31\u628a\u4e4b\u524d\u7684\u7ad6\u76f4\u8986\u76d6\u7684\u9762\u79ef\u4e58\u4e0a\u8fd9\u4e24\u6761\u7ebf\u6bb5\u5728x\u8f74\u4e0a\u7684\u5dee\uff0c\u5c31\u80fd\u4e00\u6bb5\u4e00\u6bb5\u7684\u6c42\u51fa\u603b\u9762\u79ef\u4e86\u3002\n\n\u5177\u4f53\u505a\u6cd5\uff1a\u5148\u79bb\u6563\u5316\u51fa\u4e0d\u540c\u7684\u9ad8\u5ea6\uff0c\u7528seg\u6570\u7ec4\u5b58\u4e0b\u6765\u3002\u518d\u7528\u56db\u5143\u7ec4\u5b58\u4e0b\u6765\u6bcf\u4e2a\u77e9\u5f62\u7684\u5de6\u53f3\u4e24\u8fb9\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u8fd9\u6761\u7ebf\u6bb5\u7684x\u8f74\uff0c\u4e4b\u540e\u4e24\u4e2a\u5143\u7d20\u5b58\u8fd9\u6761\u7ebf\u6bb5\u7684\u4e0a\u4e0b\u754c\uff0c\u6700\u540e\u4e00\u4e2a\u5b58\u662f\u52a0\u4e00\u8fd8\u662f\u51cf\u4e00\uff0c\u5e76\u4ee5\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u6700\u540e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53ea\u8981\u662f\u5de6\u8fb9\uff0c\u5c31\u7ed9\u5b83\u7684\u8986\u76d6\u503c\u52a0\u4e00\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0ccnt\u7ef4\u62a4\u5bf9\u4e8e\u8fd9\u4e00\u6bb5\u52a0\u4e86\u591a\u5c11\u6b21\uff0clen\u7ef4\u62a4\u8fd9\u4e00\u6bb5\u88ab\u8986\u76d6\u6b21\u6570\u81f3\u5c11\u4e3a\u4e00\u7684\u6709\u591a\u5c11\u3002\u53e6\u5916\u8fd9\u91cc\u6709\u4e00\u4e2a\u6280\u5de7\uff0c\u4e0d\u7528\u61d2\u6807\u8bb0\uff0c\u53ea\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6574\u6bb5\u7684\u6765\u8bf4\uff0c\u53ea\u8981\u5b83\u7684cnt\u503c\u4e0d\u4e3a0\uff0c\u5c31\u7ed9len\u8d4b\u503c\u4e3a\u4ed6\u6240\u8986\u76d6\u7684\u957f\u5ea6\uff0c\u5426\u5219\u8d4b\u503c\u4e3a\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u7684len\u503c\u4e4b\u548c\u3002\n\n\u5982\u4e0b\u2193\n\n```cpp\nvoid update(int p,int l,int r,int L,int R,int z){//\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539 \n\tif(l>=L&&r<=R) t[p].cnt+=z;\n\telse {\n\t\tint mid=l+r>>1;\n\t\tif(mid>=L) update(ls,l,mid,L,R,z);\n\t\tif(mid<R) update(rs,mid+1,r,L,R,z);\n\t}\n\tif(t[p].cnt) t[p].len=(seg[r]-seg[l-1]);\n\telse t[p].len=t[ls].len+t[rs].len;\n}//\u53e6\u5916\u6ce8\u610f\u8fd9\u91cc\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u7684\u662f\u4e00\u6bb5\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u70b9\u3002\n```\n## Part2\u697c\u623f\n\u8bdd\u8bf4\u8fd9\u9053\u9898\u662f\u5751\u70b9\u771f\u591a\uff0c\u6211\u768460\u5206\u4ea4\u4e86\u4e00\u9875\u591a\u624d\u6539\u51fa\u6765\uff0c\u539f\u6765\u5b83\u7684\u5de6\u53f3\u8fb9\u754c\u90fd\u6709\u53ef\u80fd\u91cd\u5408\uff0c\u6240\u4ee5\u5728\u52a0\u65b0\u7684\u8fb9\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u770b\u4e00\u4e0b\u662f\u5426\u4e0e\u4e0b\u4e00\u6761\u8fb9\u6240\u5728\u7684x\u8f74\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\u5c31\u4e0d\u52a0\u4e86\u3002\n\n\u4e0a\u4ee3\u7801(/\u25bd\uff3c)~~(\u5f00\u6c27\u6c14\u540e\u76ee\u524d\u6392\u540d\u7b2c5\uff09~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint k=0;bool f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=0;ch=getchar();}\n\twhile(isdigit(ch)){k=(k<<1)+(k<<3)+(ch^48);ch=getchar();}\n\treturn f?k:-k;\n}\nvoid print(int x){if(x>9)print(x/10);putchar(x%10+48);}\ninline void Pt(int x,int y){\n\tif(x<0) putchar('-');\n\tprint(abs(x));putchar(' ');\n\tprint(y);putchar('\\n');\n}//\u5feb\u8bfb\u548c\u5feb\u8f93 \ntypedef pair<int,int> P;\nconst int N=1e5+2;\nstruct Read{\n\tint l,r,h;\n}a[N];\nstruct Seg{\n\tint l,h,k;\n\tbool operator < (const Seg &nxt){\n\t\treturn l<nxt.l;\n\t}\n}b[N<<1];\nstruct H{\n\tint id,h;\n\tbool operator < (const H &nxt){\n\t\treturn h<nxt.h;\n\t}\n}c[N];\nint n,tot,seg[N<<1],rev[N<<1];\ninline void Init(){//\u849f\u84bb\u4e0d\u592a\u4f1a\u5199\u79bb\u6563\u5316\uff0c\u6240\u4ee5\u778e\u5199\u7684 \n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i].h=read();\n\t\ta[i].l=read();\n\t\ta[i].r=read();\n\t\tc[i].id=i;\n\t\tc[i].h=a[i].h;\n\t}\n\tsort(c+1,c+n+1);\n\tfor(int i=1;i<=n;i++)\n\t{   \n\t    if(c[i].h!=c[i-1].h) seg[++tot]=c[i].h;\n\t\trev[c[i].id]=tot;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tb[i]=(Seg){\ta[i].l,rev[i],1 },\n\t\tb[i+n]=(Seg){ a[i].r,rev[i],-1};\n\t}\n\tsort(b+1,b+n*2+1);\n}\nstruct node{\n\tint cnt,len;\n}t[N<<3];\n#define ls p<<1\n#define rs p<<1|1\nvoid update(int p,int l,int r,int L,int R,int z){//\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539 \n\tif(l>=L&&r<=R) t[p].cnt+=z;\n\telse {\n\t\tint mid=l+r>>1;\n\t\tif(mid>=L) update(ls,l,mid,L,R,z);\n\t\tif(mid<R) update(rs,mid+1,r,L,R,z);\n\t}\n\tif(t[p].cnt) t[p].len=(seg[r]-seg[l-1]);\n\telse t[p].len=t[ls].len+t[rs].len;\n}\nint cnt;\nP ans[N<<2];\ninline void Segment(){\n\tP last;b[n*2+1]=INT_MAX;\n\tfor(int i=1;i<=n*2;i++)\n\t{\n\t\tupdate(1,1,tot,1,b[i].h,b[i].k);\n\t\tP now=P(b[i].l,t[1].len);\n\t\tif(last.second!=now.second&&b[i].l!=b[i+1].l){\n\t\t\tans[++cnt]=P(now.first,last.second);\n\t\t\tans[++cnt]=now;last=now;\n\t\t}\n\t}\n}\ninline void Ans_print(){\n\tprintf(\"%d\\n\",cnt);\n\tfor(int i=1;i<=cnt;i++){\n\t\tP p=ans[i];\n\t\tPt(p.first,p.second);\n\t}\n}\nint main(){\n\tInit();//\u79bb\u6563\u5316\uff0c\u9884\u5904\u7406 \n\tSegment();//\u7ebf\u6bb5\u6811\u7ef4\u62a4 \n\tAns_print();//\u7b54\u6848\u8f93\u51fa \n\treturn 0;\n}\n```\n\u770b\u6211\u7801\u4e86\u8fd9\u4e48\u591a\u5b57\uff0c\u8fd8\u4e0d\u5938\u5938 ~~\uff08\u55b7\u55b7\uff09~~ \u6211\uff01\n",
        "postTime": 1613357465,
        "uid": 290959,
        "name": "\u804a\u673a",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u77e9\u5f62\u5e95\u76f8\u540c\u7684\u626b\u63cf\u7ebf\u9898\u76ee\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 $ODT$ \u8fdb\u884c\u6c42\u89e3\u3002\n\n\u6ce8\u610f\u5230\u5927\u77e9\u5f62\u8986\u76d6\u5c0f\u77e9\u5f62\u7684\u672c\u8d28\u5c31\u662f\u533a\u95f4\u63a8\u5e73\uff0c\u4e0d\u96be\u60f3\u5230\u628a\u6240\u6709\u8bfb\u5165\u8fdb\u6765\u7684\u77e9\u5f62\u6309\u9ad8\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u533a\u95f4\u8fdb\u884c\u63a8\u5e73\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848\u3002\n\n\u9057\u61be\u7684\u662f\uff0c\u7531\u4e8e\u672c\u4eba\u7801\u98ce\u8fc7\u4e11\uff0c\u7a0b\u5e8f\u8dd1\u4e86 $640ms$ \uff0c\u5e76\u4e0d\u80fd\u8e29\u7206\u6807\u7b97\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T>\ninline void write(T x)\n{\n    if(x>9)\n    {\n        write(x/10);\n    }\n    putchar(x%10+'0');\n}\n\ninline char nc()\n{\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void read(int &sum)\n{\n    char ch=nc();\n    int tf=0;\n    sum=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=nc();\n    tf=((ch=='-')&&(ch=nc()));\n    while(ch>='0'&&ch<='9') sum=sum*10+(ch-48),ch=nc();\n    (tf)&&(sum=-sum);\n}\n\nstruct node\n{\n    int l,r,v;\n    node(){}\n    node(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n    inline bool operator <(const node &o) const\n    {\n        return l<o.l;\n    }\n};\n\nstruct house\n{\n    int l,r,h;\n    inline bool operator <(const house &o) const\n    {\n        return h<o.h;\n    }\n};\n\nset<node> s;\n\nint n;\nhouse a[100010];\nvector<pair<int,int> >ans;\n\ninline void merge(int l)\n{\n    set<node>::iterator it1,it2,it3;\n    it2=s.lower_bound(l);\n    if(it2==s.begin())\n        return;\n    it1=it2,it3=it2;\n    --it1,++it3;\n    bool pd3=(it3!=s.end());\n    if(pd3&&it1->v==it2->v&&it2->v==it3->v&&it1->v==it3->v)\n    {\n        int l=it1->l,r=it3->r,v=it2->v;\n        s.erase(it1,++it3);\n        s.insert(node(l,r,v));\n    }\n    else if(it1->v==it2->v)\n    {\n        int l=it1->l,r=it2->r,v=it2->v;\n        s.erase(it1,++it2);\n        s.insert(node(l,r,v));\n    }\n    else if(pd3&&it2->v==it3->v)\n    {\n        int l=it2->l,r=it3->r,v=it2->v;\n        s.erase(it2,++it3);\n        s.insert(node(l,r,v));\n    }\n}\n\ninline set<node>::iterator split(int pos)\n{\n    set<node>::iterator it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos) return it;\n    --it;\n    int L=it->l,R=it->r,V=it->v;\n    s.erase(it);\n    s.insert(node(L,pos-1,V));\n    return s.insert(node(pos,R,V)).first;\n}\n\ninline void assignval(int l,int r,int v)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,v));\n}\n\ninline void query()\n{\n    set<node>::iterator it=s.begin();\n    while(it!=s.end())\n    {\n        for(;it!=s.end();++it)\n        {\n            if(it->v!=0)\n                break;\n        }\n        if(it==s.end())\n            break;\n        ans.push_back(make_pair((it->l)/2,0));\n        ans.push_back(make_pair((it->l)/2,it->v));\n        for(;it!=s.end();++it)\n        {\n            if(it->v==0)\n                break;\n            int ccv1=it->v,ccpos1=it->r;\n            ++it;\n            int ccv2=it->v,ccpos2=it->l;\n            --it;\n            if(ccv2==ccv1)continue;\n            else if(ccv2>ccv1)\n            {\n                ans.push_back(make_pair(ccpos2/2,ccv1));\n                ans.push_back(make_pair(ccpos2/2,ccv2));\n            }\n            else\n            {\n                ans.push_back(make_pair(ccpos1/2,ccv1));\n                ans.push_back(make_pair(ccpos1/2,ccv2));\n            }\n        }\n    }\n}\n\nint main()\n{\n    read(n);\n    s.insert(node(-2e9-10,2e9+10));\n    for(register int i=1;i<=n;++i)\n    {\n        read(a[i].h),read(a[i].l),read(a[i].r);\n        a[i].l*=2;\n        a[i].r*=2;\n    }\n    sort(a+1,a+n+1);\n    for(register int i=1;i<=n;++i)\n    {\n        assignval(a[i].l,a[i].r,a[i].h);\n        merge(a[i].l);\n        merge(a[i].r);\n    }\n    query();\n    int sz=ans.size();\n    printf(\"%d\\n\",sz);\n    for(register int i=0;i<sz;++i)\n    {\n        printf(\"%d %d\\n\",ans[i].first,ans[i].second);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1570194566,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u611f\u89c9dalao\u4eec\u7684\u626b\u63cf\u7ebf\u7684\u59ff\u52bf\u4e0d\u592a\u6b63\u786e\n[P1904\u5929\u9645\u7ebf](https://www.luogu.org/problem/P1904)\n[UVA105 The Skyline Problem](https://www.luogu.org/problem/UVA105)[P5490 \u3010\u6a21\u677f\u3011\u626b\u63cf\u7ebf](https://www.luogu.org/problem/P5490)[P1856 [USACO5.5]\u77e9\u5f62\u5468\u957fPicture](https://www.luogu.org/problem/P1856)\n\u8fd9\u9898\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u6a21\u677f\u9898\uff0c\u540c\u6837\u662f\u7ef4\u62a4\u5f53\u524d\u7ebf\u6bb5\u7684\u957f\u5ea6\u5c31\u884c\u5566\uff08\u4e94\u500d\u7ecf\u9a8c\u3064\ufe4f\u2282\u9003     (lll\uffe2\u03c9\uffe2)\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define LOVE *\n#define ll int\n#define super inline\n#define _tp template\n#define _tpn typename\n#define pigs register ll\n#define loop(a, b, m) for (register ll a = b; a <= m; ++a)\n#define anti_loop(a, b, m) for (register ll a = b; a >= m; --a)\nsuper char kanna()\n{\n    static char buf[1 << 22], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << !2, stdin), p1 == p2) ? EOF : *p1++;\n}\nsuper ll read()\n{\n    pigs CLPig = 0, XZT = 1;\n    char qwq = kanna();\n    while (!isdigit(qwq))\n        XZT = qwq ^ 45 ? 1 : -1, qwq = kanna();\n    while (isdigit(qwq))\n        CLPig = CLPig * 10 + (qwq ^ 48), qwq = kanna();\n    return CLPig LOVE XZT;\n}\n#define MAXN 200005\nstruct Sugment\n{\n    int x, h, k;\n    Sugment() {}\n    Sugment(int a, int b, int c) : x(a), h(b), k(c) {}\n    bool operator<(const Sugment &a) const\n    {\n        return x < a.x;\n    }\n} line[MAXN];\nint Y[MAXN];\nstruct node\n{\n    int len, cnt;\n} st[MAXN << 2];\nvoid pushup(int o, int l, int r)\n{\n    if (st[o].cnt)\n        st[o].len = Y[r + 1] - Y[l];\n    else\n        st[o].len = l == r ? 0 : st[o << 1].len + st[o << 1 | 1].len;\n}\nvoid update(int o, int l, int r, int x, int y, int k)\n{\n    if (x <= l && r <= y)\n    {\n        st[o].cnt += k;\n        pushup(o, l, r);\n        return;\n    }\n    int mid = l + r >> 1;\n    if (x <= mid)\n        update(o << 1, l, mid, x, y, k);\n    if (mid < y)\n        update(o << 1 | 1, mid + 1, r, x, y, k);\n    pushup(o, l, r);\n}\nstruct ANS\n{\n    int a, b;\n    ANS() {}\n    ANS(int _a, int _b) : a(_a), b(_b) {}\n} ans[MAXN];\nint main()\n{\n    int tot = 1, pre = -2147483647, n = 0, x, y, z, gg = read(), top = 0;\n    loop(i, 1, gg)\n    {\n        scanf(\"%d%d%d\", &y, &x, &z);\n        line[++n] = Sugment(x, y, 1);\n        line[++n] = Sugment(z, y, -1);\n        Y[++tot] = y;\n    }\n    sort(Y + 1, Y + tot + 1);\n    sort(line + 1, line + n + 1);\n    tot = unique(Y + 1, Y + 1 + tot) - Y - 1;\n    loop(i, 1, n)\n        line[i].h = lower_bound(Y + 1, Y + tot + 1, line[i].h) - Y;\n    int kkk = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        while (line[i].x == line[i + 1].x && i < n)\n            update(1, 1, tot, 1, line[i].h - 1, line[i].k), i++;\n        update(1, 1, tot, 1, line[i].h - 1, line[i].k);\n        if (st[1].len != pre)\n        {\n            ans[++kkk] = ANS(line[i].x, pre == -2147483647 ? 0 : pre);\n            ans[++kkk] = ANS(line[i].x, st[1].len);\n            pre = st[1].len;\n        }\n    }\n    printf(\"%d\\n\", kkk);\n    loop(i, 1, kkk)\n    {\n        printf(\"%d %d\\n\", ans[i].a, ans[i].b);\n    }\n    return 0;\n}\n```",
        "postTime": 1567157029,
        "uid": 140659,
        "name": "\u6e3a\u5c0f\u7684Mastar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u8fd8\u6ca1\u6709pascal\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u8865\u4e00\u7bc7pascal\u7684\u5806+\u626b\u63cf\u7ebf\u9898\u89e3\u3002~~\uff08\u56e0\u4e3a\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff09~~\n\n```pas\nvar\n   p,lr,h,a,b:array[0..200005]of longint;\n   heap,will:array[0..400005]of longint;\n   n,x,y,z,i,t,tot,totwill,height,ans:longint;\n```\n\n\u4e24\u4e2a\u5927\u6839\u5806\uff0cheap\u50a8\u5b58\u5f53\u524d\u697c\u623f\u7684\u9ad8\u5ea6\uff0cwill\u50a8\u5b58\u5c06\u8981\u5220\u9664\u7684\u697c\u623f\u7684\u9ad8\u5ea6\u3002push(q)\u8868\u793a\u5c06q\u52a0\u5165heap\uff0cdel\u8868\u793a\u5220\u9664heap\u5806\u9876\u3002pushwill(q)\u8868\u793a\u5c06q\u52a0\u5165will\uff0cdelwill\u8868\u793a\u5220\u9664will\u5806\u9876\u3002\n\np[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u7684x\u5750\u6807\n\nlr[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u662f\u697c\u623f\u7684\u5de6\u4fa7\u8fb9\u8fd8\u662f\u53f3\u4fa7\u8fb9\uff0clr[i]=1\u5de6\u4fa7\u8fb9,lr[i]=2\u53f3\u4fa7\u8fb9\u3002\n\nh[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u7684\u9ad8\u5ea6\u3002\n\na[i]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u7684x\u5750\u6807,b[i]\u8868\u793a\u7b2ci\u4e2a\u8282\u70b9\u7684y\u5750\u6807\u3002\n\n#### \u8bfb\u5165\n\u5bf9\u4e8e\u6bcf\u4e2a\u697c\u623f\uff0c\u8981\u8bfb\u5165\u5de6\u4fa7\u8fb9\u548c\u53f3\u4fa7\u8fb9\u3002\n```pas\n  for i:=1 to n do begin\n    readln(z,x,y);\n    t:=2*i;\n    p[t-1]:=x;\n    h[t-1]:=z;\n    lr[t-1]:=1;\n    p[t]:=y;\n    h[t]:=z;\n    lr[t]:=2;\n  end;\n```\n\n#### \u9884\u5904\u7406\n\u5c06\u8fb9\u6309x\u5750\u6807\u4ece\u5c0f\u5230\u5927\uff08x\u5750\u6807\u76f8\u540c\u65f6\uff0c\u5148\u53f3\u4fa7\u8fb9\u540e\u5de6\u4fa7\u8fb9\uff09\u8fdb\u884c\u6392\u5e8f\u3002\n```pas\n  procedure qsort(l,r:longint);\n  var i,j,mid,t,cen:longint;\n  begin\n    i:=l;j:=r;\n    mid:=p[(i+j) div 2];\n    cen:=lr[(i+j) div 2];\n    repeat\n      while (p[i]<mid) or ((p[i]=mid) and (lr[i]>cen)) do  inc(i);\n      while (p[j]>mid) or ((p[j]=mid) and (lr[j]<cen)) do dec(j);\n      if i<=j then begin\n        t:=p[i];\n        p[i]:=p[j];\n        p[j]:=t;\n        t:=lr[i];\n        lr[i]:=lr[j];\n        lr[j]:=t;\n        t:=h[i];\n        h[i]:=h[j];\n        h[j]:=t;\n        inc(i);\n        dec(j);\n      end;\n    until i>j;\n    if l<j then qsort(l,j);\n    if i<r then qsort(i,r);\n  end;\n```\n\n#### \u626b\u63cf\u5904\u7406\n\nheight\u8bb0\u5f55\u5904\u7406\u524d\u697c\u623f\u7684\u6700\u9ad8\u9ad8\u5ea6\u3002\n\n\u5982\u679c\u8fd9\u6761\u8fb9\u662f\u5de6\u4fa7\u8fb9\uff0c\u5219\u5c06\u5176\u52a0\u5165heap\uff0c\u5982\u679c\u662f\u53f3\u4fa7\u8fb9\u5219\u52a0\u5165will\u3002\n\nx\u5750\u6807\u76f8\u540c\u7684\u6240\u6709\u8fb9\u52a0\u5165\u5b8c\u6210\u540e\uff0c\u6bd4\u8f83heap[1]\u548cwill[1],\u5982\u679c\u76f8\u540c\uff0c\u540c\u65f6\u5220\u53bb\u4e24\u4e2a\u5806\u9876\uff0c\u5e76\u7ee7\u7eed\u5224\u65ad\uff0c\u76f4\u5230\u5b83\u4eec\u4e0d\u76f8\u540c\uff0c\u5f97\u5230\u65b0\u7684heap\u3002\n\n\u8bb0\u5f55\u7b54\u6848\u3002\n```pas\n  while i<=t do begin\n    case lr[i] of\n    1:begin                                //\u8be5x\u5750\u6807\u4e0a\u53ea\u6709\u5de6\u4fa7\u8fb9\n        height:=heap[1];                   //height\u8bb0\u5f55\u5904\u7406\u524d\u7684\u6700\u5927\u697c\u9ad8\n        repeat\n          push(h[i]);\n          inc(i);\n        until (p[i]<>p[i-1]) or (i>t);\n        dec(i);\n        if heap[1]>height then begin       //\u65b0\u7684\u6700\u5927\u697c\u9ad8\u6bd4\u4e4b\u524d\u9ad8\u65f6\uff0c\u8f6e\u5ed3\u7ebf\u624d\u4f1a\u53d8\u5316 \n          inc(ans);\n          a[ans]:=p[i];b[ans]:=height;\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=heap[1];\n        end;\n      end;\n    2:begin                                //\u8be5x\u5750\u6807\u4e0a\u65e2\u6709\u5de6\u4fa7\u8fb9\uff0c\u53c8\u6709\u53f3\u4fa7\u8fb9\u3002\n        height:=heap[1];\n        repeat                             //\u5c06\u8be5x\u5750\u6807\u6240\u6709\u53f3\u4fa7\u8fb9\u52a0\u5165will\n          pushwill(h[i]);\n          inc(i);\n        until (p[i]<>p[i-1]) or (lr[i]=1) or (i>t);\n        if p[i]=p[i-1] then begin\n          repeat                           //\u5c06\u8be5x\u5750\u6807\u6240\u6709\u5de6\u4fa7\u8fb9\u52a0\u5165heap\n            push(h[i]);\n            inc(i);\n          until (p[i]<>p[i-1]) or (i>t);\n        end;\n        dec(i);\n        while totwill<>0 do                //\u5c06\u697c\u623f\u5220\u9664\uff0c\u66f4\u65b0heap \n          if will[1]=heap[1] then begin delwill;del; end\n            else break;\n        if heap[1]<>height then begin      //\u65b0\u7684\u6700\u5927\u697c\u9ad8\u548c\u4e4b\u524d\u4e0d\u540c\u65f6\uff0c\u8f6e\u5ed3\u7ebf\u624d\u4f1a\u53d8\u5316\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=height;\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=heap[1];\n        end;\n      end;\n    end;\n    inc(i);\n  end;\n```\n\n#### \u8f93\u51fa\n\u5148\u8f93\u51fa\u8282\u70b9\u4e2a\u6570ans\uff0c\u518d\u8f93\u51fa\u8282\u70b9\u5750\u6807\u3002\n```pas\n  writeln(ans);\n  for i:=1 to ans do writeln(a[i],' ',b[i]);\n```\n\n#### \u5b8c\u6574\u4ee3\u7801\n\u672c\u4eba\u849f\u84bb\uff0c\u82e5\u4ee3\u7801\u6709\u9519\u8bef\uff0c\u8bf7\u5927\u4f6c\u6307\u51fa\u3002\n```pas\nprogram project1;\nvar\n   p,lr,h,heap,will,a,b:array[0..400005]of longint;\n   n,x,y,z,i,t,tot,totwill,height,ans:longint;\nprocedure qsort(l,r:longint);\nvar i,j,mid,t,cen:longint;\nbegin\n  i:=l;j:=r;\n  mid:=p[(i+j) div 2];\n  cen:=lr[(i+j) div 2];\n  repeat\n    while (p[i]<mid) or ((p[i]=mid) and (lr[i]>cen)) do inc(i);\n    while (p[j]>mid) or ((p[j]=mid) and (lr[j]<cen)) do dec(j);\n    if i<=j then begin\n      t:=p[i];\n      p[i]:=p[j];\n      p[j]:=t;\n      t:=lr[i];\n      lr[i]:=lr[j];\n      lr[j]:=t;\n      t:=h[i];\n      h[i]:=h[j];\n      h[j]:=t;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\n\nprocedure push(q:longint);\nvar i,j,t:longint;\nbegin\n  inc(tot);\n  heap[tot]:=q;\n  i:=tot;\n  while (i shr 1)<>0 do begin\n    j:=i shr 1;\n    if heap[j]<heap[i] then begin\n      t:=heap[i];\n      heap[i]:=heap[j];\n      heap[j]:=t;\n    end else break;\n    i:=j;\n  end;\nend;\n\nprocedure del;\nvar i,j,t:longint;\nbegin\n  heap[1]:=heap[tot];\n  heap[tot]:=0;\n  dec(tot);\n  i:=1;\n  while (i shl 1)<=tot do begin\n    j:=i shl 1;\n    if (j+1<=tot) and (heap[j]<heap[j+1]) then inc(j);\n    if heap[i]<heap[j] then begin\n      t:=heap[i];\n      heap[i]:=heap[j];\n      heap[j]:=t;\n    end else break;\n    i:=j;\n  end;\nend;\n\nprocedure pushwill(q:longint);\nvar i,j,t:longint;\nbegin\n  inc(totwill);\n  will[totwill]:=q;\n  i:=totwill;\n  while (i shr 1)<>0 do begin\n    j:=i shr 1;\n    if will[j]<will[i] then begin\n      t:=will[i];\n      will[i]:=will[j];\n      will[j]:=t;\n    end else break;\n    i:=j;\n  end;\nend;\n\nprocedure delwill;\nvar i,j,t:longint;\nbegin\n  will[1]:=will[totwill];\n  will[totwill]:=0;\n  dec(totwill);\n  i:=1;\n  while (i shl 1)<=totwill do begin\n    j:=i shl 1;\n    if (j+1<=totwill) and (will[j]<will[j+1]) then inc(j);\n    if will[i]<will[j] then begin\n      t:=will[i];\n      will[i]:=will[j];\n      will[j]:=t;\n    end else break;\n    i:=j;\n  end;\nend;\n\nbegin\n  readln(n);\n  tot:=0;\n  totwill:=0;\n  ans:=0;\n  fillchar(p,sizeof(p),0);\n  fillchar(lr,sizeof(lr),0);\n  fillchar(h,sizeof(h),0);\n  fillchar(heap,sizeof(heap),0);\n  fillchar(will,sizeof(will),0);\n  for i:=1 to n do begin\n    readln(z,x,y);\n    t:=2*i;\n    p[t-1]:=x;\n    h[t-1]:=z;\n    lr[t-1]:=1;\n    p[t]:=y;\n    h[t]:=z;\n    lr[t]:=2;\n  end;\n  qsort(1,t);\n  i:=1;\n  while i<=t do begin\n    case lr[i] of\n    1:begin\n        height:=heap[1];\n        repeat\n          push(h[i]);\n          inc(i);\n        until (p[i]<>p[i-1]) or (i>t);\n        dec(i);\n        if heap[1]>height then begin\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=height;\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=heap[1];\n        end;\n      end;\n    2:begin\n        height:=heap[1];\n        repeat\n          pushwill(h[i]);\n          inc(i);\n        until (p[i]<>p[i-1]) or (lr[i]=1) or (i>t);\n        if p[i]=p[i-1] then begin\n          repeat\n            push(h[i]);\n            inc(i);\n          until (p[i]<>p[i-1]) or (lr[i]=2) or (i>t);\n        end;\n        dec(i);\n        while totwill<>0 do\n          if will[1]=heap[1] then begin delwill;del; end\n            else break;\n        if heap[1]<>height then begin\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=height;\n          inc(ans);\n          a[ans]:=p[i];b[ans]:=heap[1];\n        end;\n      end;\n    end;\n    inc(i);\n  end;\n  writeln(ans);\n  for i:=1 to ans do writeln(a[i],' ',b[i]);\nend.\n\n```",
        "postTime": 1539703825,
        "uid": 24425,
        "name": "fysbb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811\n\n\u6709\u7684\u795e\u7287\u8bf4\u626b\u63cf\u7ebf+\u5806\u66f4\u5feb\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002\u3002\n\n\u5199\u4e86\u4e00\u4e2a\u665a\u4e0a\n\n\u96be\u5728\u79bb\u6563\u5316\u548c\u628a\u7ebf\u6bb5\u653e\u7f6e\n\n\u7ebf\u6bb5\u653e\u7f6e\u8981\u8003\u8651\u86ee\u591a\u7684\u60c5\u51b5\n\n\u6bd4\u5982\n\u6070\u597d\u516c\u7528\u4e00\u4e2a\u7aef\u70b9\uff0c\u53ef\u662f\u4e0d\u91cd\u53e0\n\n\u5b8c\u5168\u91cd\u53e0\n\n\u7b49\u7b49\u7b49\u7b49\n\n\u79bb\u6563\u5316\uff0c\u7528map\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u7528\u8fed\u4ee3\u5668\u5168\u90e8\u5b58\u8d77\u6765\uff08stl\u5927\u6cd5\u597d\uff09\n\n\u7136\u540e\uff0c\u7528\u79bb\u6563\u5316\u597d\u7684\u70b9\u7684\u4e24\u70b9\u4e4b\u95f4\u7684\u95f4\u9699\u5efa\u7acb\u7ebf\u6bb5\u6811\n\n\u7136\u540e\u628a\u7ebf\u6bb5\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\n\n\u7136\u540e\u6109\u5feb\u7684\u88f8flag\u7ebf\u6bb5\u6811\n\n\u7136\u540e\uff0c\u50cf\u5efa\u6811\u4e00\u6837\uff0c\u4e00\u6b21\u4f18\u5316<nlogn\u7684check\n\n\u5982\u679c\u524d\u9762\u7684\u95f4\u9699\u7684dis\u4e0d\u7b49\u4e8e\u73b0\u5728\u7684\u95f4\u9699\u7684dis\u5c31\u8f93\u51fa\n\n\u8f7b\u677eac\uff08\u4e0d\u77e5\u9053wa\u4e86\u591a\u5c11\u6b21re\u591a\u5c11\u6b21\uff09\n\n\n\n\n\n\n```cpp\n#include <map>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nstruct node {\n    long long int l,r,dis;\n};\nstruct node edge[100001];\ninline void read_int(long long int &now_);\nclass T_tree {\n```\npublic:\n        \n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n        int l,r,mid;\n        long long int dis,flag;\n        void mid_()\n        {\n            mid=(l+r)>>1;\n        }\n        void flag_()\n        {\n            flag=0;\n        }\n        void dis_()\n        {\n            dis=0;\n        }\n};\nclass T_tree tree[100001*4*2];\nlong long int n,if_Z,num=0,before=0,before_=0;\nlong long int point[100001*2],ans=0,ans_now[100001*4],ans_dis[100001*4];\nchar Cget;\nbool if_fi=true;\nmap<long long int,long long int>if_;\ninline void read_int(long long int &now_)\n{\n    now_=0,if_Z=1,Cget=getchar();\n    while(Cget<'0'||Cget>'9')\n    {\n        if(Cget=='-') if_Z=-1;\n        Cget=getchar();\n    }\n    while(Cget<='9'&&Cget>='0')\n    {\n        now_=now_*10+Cget-'0';\n        Cget=getchar();\n    }\n    now_*=if_Z;\n}\ninline bool cmp(struct node some1,struct node some2)\n{\n    return some1.dis<some2.dis;\n}\nvoid tree_build(int now,int l,int r)\n{\n    tree[now].l=l,tree[now].r=r;\n    if(l==r)\n    {\n        tree[now].dis_();\n        return ;\n    }\n    tree[now].mid_();\n    tree_build(now<<1,l,tree[now].mid);\n    tree_build(now<<1|1,tree[now].mid+1,r);\n}\ninline void tree_down(int now)\n{\n    if(tree[now].l==tree[now].r) return ;\n    tree[now<<1].dis=tree[now].flag;\n    tree[now<<1].flag=tree[now].flag;\n    tree[now<<1|1].dis=tree[now].flag;\n    tree[now<<1|1].flag=tree[now].flag;\n    tree[now].flag_();\n}\nvoid tree_change(int now,int l,int r,long long int dis)\n{\n    if(tree[now].l==l&&tree[now].r==r)\n    {\n        tree[now].dis=dis;\n        tree[now].flag=dis;\n        tree_down(now);\n        return ;\n    }\n    if(tree[now].flag) tree_down(now);\n    if(l>tree[now].mid) tree_change(now<<1|1,l,r,dis);\n    else if(r<=tree[now].mid) tree_change(now<<1,l,r,dis);\n    else\n    {\n        tree_change(now<<1,l,tree[now].mid,dis);\n        tree_change(now<<1|1,tree[now].mid+1,r,dis);\n    }\n}\nint times=0;\nvoid tree_check(int now)\n{\n    if(tree[now].l==tree[now].r)\n    {\n        if(tree[now].dis!=before)\n        {\n            ans_now[++ans]=point[tree[now].l];\n            ans_dis[ans]=before;\n            ans_now[++ans]=point[tree[now].l];\n            ans_dis[ans]=tree[now].dis;\n            before=tree[now].dis;\n        }\n        return ;\n    }\n    if(tree[now].flag) tree_down(now);\n    tree_check(now<<1),tree_check(now<<1|1);\n}\nint main()\n{\n    read_int(n);\n    for(int i=1;i<=n;i++)\n    {\n        read_int(edge[i].dis),read_int(edge[i].l),read_int(edge[i].r);\n        if_[edge[i].l]=edge[i].l,if_[edge[i].r]=edge[i].r;\n    }\n    for(map<long long int,long long int>::iterator it=if_.begin();it!=if_.end();it++)\n    {\n        point[++num]=it->first;\n        it->second=num;\n    }\n    tree_build(1,1,num+1);\n    sort(edge+1,edge+n+1,cmp);\n    for(int i=1;i<=n;i++)\n    {\n        tree_change(1,if_[edge[i].l],if_[edge[i].r]-1,edge[i].dis);\n    }\n    tree_check(1);\n    printf(\"%lld\\n\",ans);\n    for(int i=1;i<=ans;i++) printf(\"%lld %lld\\n\",ans_now[i],ans_dis[i]);\n    return 0;\n}\n```",
        "postTime": 1483625150,
        "uid": 21042,
        "name": "OnlySky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u6a2a\u5750\u6807x\u5230x+1\u8fd9\u4e00\u6bb5\u533a\u95f4\uff0c\u82e5\u6b64\u533a\u95f4\u7684\u6700\u5927\u9ad8\u5ea6\u4e0d\u7b49\u4e8e\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u5219\u6709\u8f6e\u5ed3\u7ebf\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u6a2a\u5750\u6807\u4e3ax\uff0c\u7eb5\u5750\u6807\u5206\u522b\u4e3a\u4e24\u4e2a\u533a\u95f4\u7684\u9ad8\u5ea6\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\u5373\u53ef\u3002\u6ce8\u610f\u9700\u8981\u79bb\u6563\u5316\uff0c\u800c\u7531\u4e8e\u6700\u540e\u9ad8\u5ea6\u4e3a0\u7684\u5730\u65b9\u5728\u8f93\u5165\u4e2d\u6ca1\u6709\u4f53\u73b0\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u77e9\u5f62\u7684\u6700\u540e\u4e00\u6bb5\u533a\u95f4\u7684\u540e\u9762\u4e00\u6bb5\u533a\u95f4\u4e5f\u4e00\u540c\u7ef4\u62a4\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\nstruct Jv\n{\n    int h, l, r;\n}jv[MAXN];\nint a[MAXN<<2], b[MAXN<<2];\nstruct SegmentTree\n{\n    int l, r, maxx, lazy;\n    #define l(x) tree[x].l\n    #define r(x) tree[x].r\n    #define maxx(x) tree[x].maxx\n    #define lazy(x) tree[x].lazy\n}tree[MAXN<<3];\n\nvoid spread(int p)\n{\n    if(lazy(p))\n    {\n        maxx(p<<1) = max(maxx(p<<1), lazy(p));\n        maxx(p<<1|1) = max(maxx(p<<1|1), lazy(p));\n        lazy(p<<1) = max(lazy(p<<1), lazy(p));\n        lazy(p<<1|1) = max(lazy(p<<1|1), lazy(p));\n        lazy(p) = 0;\n    }\n}\n\nvoid buildTree(int p, int l, int r)\n{\n    l(p) = l, r(p) = r, maxx(p) = 0, lazy(p) = 0;\n    if(l == r)\n        return;\n    int mid = l(p) + r(p) >> 1;\n    buildTree(p<<1, l, mid);\n    buildTree(p<<1|1, mid+1, r);\n}\n\nvoid change(int p, int l, int r, int k)\n{\n    if(l <= l(p) && r(p) <= r)\n    {\n        maxx(p) = max(maxx(p), k);\n        lazy(p) = max(lazy(p), k);\n        return;\n    }\n    spread(p);\n    int mid = l(p) + r(p) >> 1;\n    if(l <= mid)\n        change(p<<1, l, r, k);\n    if(r > mid)\n        change(p<<1|1, l, r, k);\n    maxx(p) = max(maxx(p<<1), maxx(p<<1|1));\n}\n\nint ask(int p, int l, int r)\n{\n    if(l <= l(p) && r(p) <= r)\n    {\n        return maxx(p);\n    }\n    spread(p);\n    int res = 0;\n    int mid = l(p) + r(p) >> 1;\n    if(l <= mid)\n        res = ask(p<<1, l, r);\n    if(r > mid)\n        res = max(res, ask(p<<1|1, l, r));\n    return res;\n}\n\nstruct Out\n{\n    int x, y;\n}out[MAXN<<1];\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int u = 0, p = 0;\n    for(int i = 1; i <= n; ++i)\n    {\n        scanf(\"%d%d%d\", &jv[i].h, &jv[i].l, &jv[i].r);\n        jv[i].r--;\n        b[p++] = jv[i].l, b[p++] = jv[i].r, b[p++] = jv[i].r+1;\n    }\n    sort(b, b + p);\n    a[u++] = b[0];\n    for(int i = 1; i < p; ++i)\n        if(b[i] != b[i-1])\n            a[u++] = b[i];\n    a[u] = a[u-1]+1;\n    u++;\n    buildTree(1, 0, u);\n    for(int i = 1; i <= n; ++i)\n    {\n        int lx = lower_bound(a, a + u, jv[i].l)-a;\n        int rx = lower_bound(a, a + u, jv[i].r)-a;\n        change(1, lx, rx, jv[i].h);\n    }\n    int pre = 0, now, uu = 0;\n    for(int i = 0; i <= u; ++i)\n    {\n        now = ask(1, i, i);\n        if(now == pre)\n            continue;\n        out[uu].x = a[i], out[uu++].y = pre;\n        out[uu].x = a[i], out[uu++].y = now;\n        pre = now;\n    }\n    printf(\"%d\\n\", uu);\n    for(int i = 0; i < uu; ++i)\n        printf(\"%d %d\\n\", out[i].x, out[i].y);\n    return 0;\n}\n\n```\n",
        "postTime": 1569079834,
        "uid": 108408,
        "name": "GoldenFlash",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1382 \u3010\u697c\u623f\u3011"
    }
]