[
    {
        "content": "~~\u56e0\u4e3a\u4e0a\u6b21 T1 \u662f\"\u690d\u6811\"\uff0c\u6240\u4ee5\u8fd9\u6b21 T1 \u4e3a\"\u9020\u6797\"\u3002~~\n\n\u7531\u4e8e\u672c\u9898\u7684\u7b97\u6cd5\u771f\u5305\u542b\u4e86\u690d\u6811\u6240\u8981\u7528\u7684\u6c42\u6700\u5927\u5b50\u6811\u5927\u5c0f\u7684\u65b9\u6cd5\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5[\u5de6\u8f6c](https://www.luogu.com.cn/problem/P6591)\uff0c\u8fdb\u884c\u5b66\u4e60\u3002\n\n\u53ef\u80fd\u8fd9\u9053\u9898\u76ee\u76f8\u5bf9\u4e8e\u522b\u7684\u6bd4\u8d5b\u7684 T1 \u800c\u8a00\u7a0d\u5fae\u6709\u70b9\u96be\uff0c\u4f46\u597d\u50cf\u522b\u7684\u9898\u90fd\u6ca1\u8fd9\u9898\u53ef\u505a\u7684\u6837\u5b50\u3002\n\n\u83ca\u82b1\u56fe\u505a\u6cd5\uff1a\n\n\u5bb9\u6613\u53d1\u73b0\u53ea\u6709\u4e24\u79cd\u4e0d\u540c\u300c\u54c1\u79cd\u300d\u7684\u6811\u3002\n\n\u65b9\u6848\u6570\u5206\u522b\u4e3a 1 \u548c n-1\uff0c\u9700\u8981\u7279\u5224\u8fb9\u754c\u6761\u4ef6\u3002\n```\n\tn=read();\n\tif(n==2)\n\t{\n\t\tputs(\"1\\n2\");\n\t\treturn 0;\n\t}\n\twrite(2-(n==1));\n\tputs(\"\");\n\twrite(1);\n\tputs(\"\");\n\tif(n>1)write(n-1);\n```\n\n\n\u94fe\u505a\u6cd5\uff1a\n\n\u5bb9\u6613\u53d1\u73b0\u65b9\u6848\u6570\u4e3a (n+1)/2\uff0c\n\n\u5177\u4f53\u5404\u79cd\u65b9\u6848\u7684\u6570\u91cf\u4e5f\u8f83\u4e3a\u663e\u7136\u3002\n```\n\tn=read();\n\twrite((n+1)/2);puts(\"\");\n\tif(n&1)write(1),puts(\"\");\n\tfor(int i=1;i<=n/2;i++)\n\t\twrite(2),puts(\"\");\n```\n\n \n\n$n\\le 300$\uff1a\n\n \u66b4\u529b\u52a0\u53f6\u5b50\uff0c\u66b4\u529b\u5224\u65ad\u3002  \n \u6216 $n^2\\log_2n$ \u505a\u6cd5\uff0c\u5373 subtask 5 \u89e3\u6cd5\u5728\u6392\u5e8f\u65f6\u4f7f\u7528\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\n\n\u5b8c\u5168\u4e8c\u53c9\u6811\u505a\u6cd5\uff1a\n\n\u5bb9\u6613\u53d1\u73b0\u6811\u9ad8\u4e3a log\uff0c\u800c\u4e14\u5e38\u6570\u8f83\u5c0f\uff0c\u4f7f\u7528\u6b63\u89e3\u65b9\u6cd5\u4e0d\u7528 hash \u53ef\u901a\u8fc7\u3002\n\n\n\n$n\\le 5000$\uff1a\n\n\u679a\u4e3e\u53f6\u5b50\u4f4d\u7f6e\u8fde\u63a5\u7684\u4f4d\u7f6e\u66b4\u529b\u6811\u5f62 dp \uff0chash \u6c42\u65b9\u6848\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rg register\n#define il inline\n#define M1 998244353\n#define M2 950009857\n#define M 4999963\n#define MM 1000000007\n#define N 2000005\n\nint sz[N],mxsz[N],n,head[N],tot,cnt[N],ans[N];\nint t1=0,tt,lans,rt1,rt2,t2=0;\nint g1[M],g2[M],s[M];\nstruct ss{\n\tint node,nxt;\n}e[N<<1];\n\nil int read();\nil void write(int x);\nil void add(int u,int v);\nil int find(int x,int tx,int ty);\nil void addh(int x,int y);\nil void redo();\n\nvoid dfs(int x,int fa);\nvoid sol();\n\nint main()\n{\n\tfreopen(\"forest.in\",\"r\",stdin);\n\tfreopen(\"forest.out\",\"w\",stdout);\n\tn=read();\n\tfor(rg int i=1,u,v;i<n;i++)\n\t{\n\t\tu=read();v=read();\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tsol();\n\tfor(rg int i=0;i<M;i++)\n\t\tif(s[i])ans[s[i]]++,lans++;\n\twrite(lans);\n\tfor(rg int i=1;i<=n;i++)\n\t{\n\t\tif(!ans[i])continue;\n\t\twhile(ans[i]--)\n\t\t{\n\t\t\tputs(\"\");\n\t\t\twrite(i);\n\t\t}\n\t}\n\treturn 0;\n}\n\nil int read()\n{\n\tint re=0,k=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')k=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){re=re*10+ch-48;ch=getchar();}\n\treturn re*k;\n}\n\nil void write(int x)\n{\n\tif(x<0){putchar('-');write(-x);return;}\n\tif(x<10)return putchar(x+48),void();\n\treturn write(x/10),write(x%10),void();\n}\n\nvoid dfs(int x,int fa)\n{\n\tsz[x]=1;\n\t//if(x==n+1)cerr<<x<<\" \"<<fa<<endl;\n\tfor(rg int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].node;\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>mxsz[x])\n\t\t\tmxsz[x]=sz[y];\n\t}\n\tif(n+1-sz[x]>mxsz[x])\n\t\tmxsz[x]=n+1-sz[x];\n\treturn;\n}\n\nil void add(int u,int v)\n{\n\te[++tot].nxt=head[u];\n\te[tot].node=v;\n\thead[u]=tot;\n\treturn;\n}\n\nil void redo()\n{\n\ttot-=2;\n\thead[e[head[n+1]].node]=e[head[e[head[n+1]].node]].nxt;\n\thead[n+1]=0;\n}\n\nvoid sol()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(i,n+1);\n\t\tadd(n+1,i);\n\t\tfor(int j=1;j<=n+1;j++)\n\t\t\tans[j]=mxsz[j]=0;\n\t\t//cerr<<i;\n\t\tdfs(1,0);\n\t\t//cerr<<i<<endl;\n\t\tfor(int j=1;j<=n+1;j++)\n\t\t\tans[mxsz[j]]++;\n\t\tint h1=0,h2=0;\n\t\tfor(int j=1;j<=n+1;j++)\n\t\t{\n\t\t\twhile(ans[j])\n\t\t\t{\n\t\t\t\th1=(1ll*h1*M1+j)%M;\n\t\t\t\th2=(1ll*h2*M2+j)%MM;\n\t\t\t\tans[j]--;\n\t\t\t}\n\t\t}\n\t\taddh(h1,h2);\n\t\tredo();\n\t}\n}\n\nint find(int x,int tx,int ty)\n{\n\tif(!g1[x])return g1[x]=tx,g2[x]=ty,x;\n\tif(g1[x]==tx&&g2[x]==ty)return x;\n\treturn find((x+31)%M,tx,ty);\n}\n\nvoid addh(int x,int y)\n{\n\ts[find(x,x,y)]++;\n\treturn;\n}\n```\n\n\n$n\\le 5e4$\uff1a\n\n\u9632\u6b63\u89e3\u88ab\u5361\u5e38\u3002\n\n\n\n$n\\le 2e6$\uff1a\n\n\u5bb9\u6613\u53d1\u73b0\u6bcf\u589e\u52a0\u4e00\u4e2a\u53f6\u5b50\u4e0d\u4f1a\u6539\u53d8\u6700\u5927\u5b50\u6811\u5927\u5c0f\u7684\u53ea\u6709\u4e00\u6761\u94fe\u3002\n\n\u4f8b\u5982\u5982\u56fe\u6240\u793a\u7684\u6811\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/gp9bcm0v.png)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8282\u70b9 7 \u8fde\u63a5\u4e00\u4e2a\u53f6\u5b50\u65f6\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e0d\u4f1a\u6539\u53d8\u7684\u5927\u5b50\u6811\u5927\u5c0f\u4e0d\u4f1a\u6539\u53d8\u7684\u94fe\u53ea\u6709 10-1-7 \uff0c\u5373\u5728 7 \u53f7\u8282\u70b9\u63a5\u4e0a\u4e00\u4e2a\u53f6\u5b50\u540e\uff0c 10,1,7 \u4e09\u4e2a\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e0d\u53d8\uff0c\u5176\u5b83\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u52a0 1\u3002\n\n\u5728\u8282\u70b9 1 \u8fde\u63a5\u4e00\u4e2a\u53f6\u5b50\u65f6\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e0d\u4f1a\u6539\u53d8\u7684\u94fe\u53ea\u6709 10-1\n\n\u5728\u8282\u70b9 10 \u8fde\u63a5\u4e00\u4e2a\u53f6\u5b50\u65f6\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e0d\u4f1a\u6539\u53d8\u7684\u94fe\u53ea\u6709 10\n\n\u2026\u2026\n\n\n\n\u753b\u4e0b\u56fe\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u5728\u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u5185\uff0c\u90a3\u4e48\u4e0d\u4f1a\u6539\u53d8\u7684\u94fe\u4e3a\u91cd\u5fc3\u7684\u5b69\u5b50\u5230\u5b83\u7684\u4e00\u6761\u94fe\u3002\n\n\u5426\u5219\uff0c\u4e0d\u4f1a\u6539\u53d8\u7684\u94fe\u4e3a\u91cd\u5fc3\u5230\u5b83\u7684\u4e00\u6761\u94fe\u3002\n\n\n\n\u53d1\u73b0\u8fd9\u4e2a\u6027\u8d28\u4ee5\u540e\uff0c\u95ee\u9898\u5c31\u7b80\u5316\u4e86\u4e0d\u5c11\u3002\n\n\n\n\u8003\u8651\u5982\u679c\u7528\u6811\u5f62 dp \u6c42\u51fa\u6240\u6709\u7684\u8fd9\u6837\u7684\u94fe\uff0c\u8003\u8651\u4e24\u4e2a\u65b9\u6848\u4e00\u6837\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u6761\u94fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e00\u4e00\u5bf9\u5e94\u3002\n\n\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u5f53\u6210\u5b57\u7b26\uff0c\u9898\u76ee\u53d8\u4e3a\u5728\u7ed9\u5b9a\u6811\u4e0a\u95ee\u6709\u591a\u5c11\u6761\u4ece\u6839\u5230\u4e00\u4e2a\u70b9\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u5b57\u7b26\u6240\u6784\u6210\u7684\u5b57\u7b26\u4e32\u4e0d\u540c\uff0c\u4ee5\u53ca\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u6709\u591a\u5c11\u4e2a\u3002\u8fd9\u6837\u5c31\u80fd\u5b57\u7b26\u4e32 hash \u6c42\u89e3\u4e86\u3002  \n\u6839\u636e\u751f\u65e5\u6096\u8bba\uff0c\u5355 hash \u6709\u6781\u5927\u6982\u7387\u88ab\u5361\uff0c\u6545\u8981\u7528\u53cc hash\uff0c\u6216\u5176\u4ed6\u66f4\u597d\u7684hash \u65b9\u5f0f\u3002\n\n\n\u7528 hash \u8868\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n\u6392\u5e8f\u53ef\u4ee5\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u6216\u6876\u6392\u5e8f\u6765\u505a\u5230 $O(n)$\uff0c\u76f4\u63a5 sort \u4e5f\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rg register\n#define il inline\n#define M1 998244353\n#define M2 950009857\n#define M 4999963\n#define MM 1000000007\n#define N 2000005\n\nint sz[N],mxsz[N],n,head[N],tot,cnt[N],ans[N];\nint t1=0,tt,lans,rt,t2=0;\nint g1[M],g2[M],s[M];\nstruct ss{\n\tint node,nxt;\n}e[N<<1];\n\nil int read();\nil void write(int x);\nil int find(int x,int tx,int ty);\nil void addh(int x,int y);\nil void add(int u,int v);\n\nvoid dfs(int x,int fa);\nvoid redfs(int x,int fa,int rt);\n\nint main()\n{\n\tn=read();\n\tfor(int i=1,u,v;i<n;i++)\n\t{\n\t\tu=read();v=read();\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tmxsz[0]=0x3f3f3f3f;\n\tdfs(1,0);\n\tredfs(rt,0,rt);\n\tfor(int i=0;i<M;i++)\n\t\tif(s[i])ans[s[i]]++,lans++;\n\twrite(lans);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!ans[i])continue;\n\t\twhile(ans[i]--)\n\t\t{\n\t\t\tputs(\"\");\n\t\t\twrite(i);\n\t\t}\n\t}\n\treturn 0;\n}\n\nil int read()\n{\n\tint re=0,k=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')k=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){re=re*10+ch-48;ch=getchar();}\n\treturn re*k;\n}\n\nil void write(int x)\n{\n\tif(x<0){putchar('-');write(-x);return;}\n\tif(x<10)return putchar(x+48),void();\n\treturn write(x/10),write(x%10),void();\n}\n\nint find(int x,int tx,int ty)\n{\n\tif(!g1[x])return g1[x]=tx,g2[x]=ty,x;\n\tif(g1[x]==tx&&g2[x]==ty)return x;\n\treturn find((x+31)%M,tx,ty);\n}\n\nvoid addh(int x,int y)\n{\n\ts[find(x,x,y)]++;\n\treturn;\n}\n\nvoid dfs(int x,int fa)\n{\n\tsz[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].node;\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>mxsz[x])\n\t\t\tmxsz[x]=sz[y];\n\t}\n\tif(n-sz[x]>mxsz[x])\n\t\tmxsz[x]=n-sz[x];\n\tif(mxsz[x]<mxsz[rt])\n\t\trt=x;\n\treturn;\n}\n\nvoid redfs(int x,int fa,int rt)\n{\n\tint tt1=t1,tt2=t2;\n\tt1=(1ll*t1*M1+mxsz[x])%M;\n\tt2=(1ll*t2*M2+mxsz[x])%MM;\n\taddh(t1,t2);\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].node;\n\t\tif(y==fa)continue;\n\t\tif(n-mxsz[y]==mxsz[x]&&x==rt)\n\t\t\tt1=t2=0;\n\t\tredfs(y,x,rt);\n\t\tif(n-mxsz[y]==mxsz[x]&&x==rt)\n\t\t\tt1=t2=mxsz[x];\n\t}\n\tt1=tt1;t2=tt2;\n\treturn;\n}\n\nvoid add(int u,int v)\n{\n\te[++tot].nxt=head[u];\n\te[tot].node=v;\n\thead[u]=tot;\n\treturn;\n}\n```\n\n\u6700\u540e\u8bf4\u53e5\u9898\u5916\u8bdd\uff0c\u4e3a\u4ec0\u4e48\u4f60\u53e4\u7684\u8bc4\u6d4b\u673a\u8fd9\u4e48\u6162\u554a\uff0c\u6211\u672c\u5730\u7528 lemon \u6d4b 1s \u5185\u5c31\u53ef\u4ee5\u8dd1\u5b8c\u7684\u4ee3\u7801\u8fd9\u91cc\u8981\u8dd1 2s\u3002",
        "postTime": 1594893137,
        "uid": 55201,
        "name": "clamee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6653 \u3010[YsOI2020]\u9020\u6797\u3011"
    },
    {
        "content": "\u8003\u4e86\u5b66\u957f\u51fa\u7684\u8fd9\u4e00\u5957 YsOI\uff0c\u88ab\u5361\u54c8\u5e0c\u4e86\uff0c100 \u5206\u6012\u53d8 9 \u5206\u3002@_@\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6811\uff0c\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\u540e\u7684\u56fe\u4e2d\u6700\u5927\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\u5b9a\u4e49\u6811\u7684\u54c1\u79cd\u4e3a\u6240\u6709\u8282\u70b9\u6743\u503c\u6784\u6210\u7684\u53ef\u91cd\u96c6\uff0c\u4e24\u6811\u54c1\u79cd\u76f8\u540c\u5f53\u4e14\u4ec5\u5f53\u53ef\u91cd\u96c6\u76f8\u540c\u3002\n\n\u73b0\u5728\u8981\u7ed9\u8fd9\u4e2a\u6811\u52a0\u4e00\u4e2a\u53f6\u5b50\uff0c\u6c42\u80fd\u5f97\u5230\u591a\u5c11\u54c1\u79cd\u7684\u6811\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u54c1\u79cd\u6709\u591a\u5c11\u79cd\u6dfb\u52a0\u65b9\u6cd5\u5f97\u5230\u3002\n\n$n\\leq2\\times10^6$\uff0c\u65f6\u9650 4s\u3002\n\n## \u9898\u89e3\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u662f\u91cd\u5fc3\u7684\u8282\u70b9\uff0c\u5220\u6389\u8fd9\u4e2a\u70b9\u540e\u7684\u8fde\u901a\u5757\u91cc\u9762\uff0c\u6700\u5927\u7684\u8fde\u901a\u5757\u5c31\u662f\u5305\u542b\u91cd\u5fc3\u7684\u8fde\u901a\u5757\u3002\u56e0\u6b64\u5982\u679c\u53f6\u5b50\u6dfb\u52a0\u5728\u91cd\u5fc3\u5934\u4e0a\uff0c\u522b\u7684\u70b9\u6743\u503c\u90fd\u8981\u52a0\u4e00\uff0c\u91cd\u5fc3\u4e0d\u53d8\u3002\uff08\u5bf9\u4e8e\u4e24\u4e2a\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u5728\u4e00\u4e2a\u91cd\u5fc3\u4e0a\u52a0\u70b9\u65f6\uff0c\u663e\u7136\u53e6\u4e00\u4e2a\u91cd\u5fc3\u6743\u503c\u662f\u8981\u52a0\u4e00\u7684\u3002\uff09\n\n\u8003\u8651\u5982\u679c\u4e0d\u52a0\u5728\u91cd\u5fc3\u4e0a\u3002\u6ce8\u610f\u5230\u4e0a\u9762\u63d0\u5230\u7684\u6027\u8d28\uff0c\u54ea\u4e9b\u8282\u70b9\u7684\u6743\u503c\u4f1a\u6539\u53d8\uff08\u5982\u56fe 1\uff0c3 \u53f7\u8282\u70b9\u662f\u91cd\u5fc3\uff0c\u628a\u5b83\u5f53\u4f5c\u6839\uff09\uff1a\n\n![\u56fe 1](https://pic.imgdb.cn/item/62c4dec95be16ec74a9ed07b.png)\n\n\u5047\u8bbe\u6211\u4eec\u5411 9 \u53f7\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a\u53f6\u5b50\uff0c\u6765\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1. \u548c\u88ab\u6dfb\u52a0\u53f6\u5b50\u7684\u70b9\u4e0d\u5728\u540c\u4e00\u5b50\u6811\uff08\u5982 1,2,6,7 \u53f7\u70b9\uff09\uff0c\u663e\u7136\u6743\u503c\u90fd\u4f1a\u52a0\u4e00\u3002\n2. \u548c\u88ab\u6dfb\u52a0\u53f6\u5b50\u70b9\u5728\u540c\u4e00\u4fa7\uff0c\u4e0d\u5728\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff08\u5982 5,10 \u53f7\u70b9\uff09\uff0c\u8003\u8651\u5230\u5220\u6389\u540e\u5176\u6700\u5927\u8fde\u901a\u5757\u662f\u6839\u7684\u90a3\u4e00\u4fa7\uff0c\u56e0\u6b64\u6743\u503c\u4e5f\u4f1a\u52a0\u4e00\u3002\n3. \u91cd\u5fc3\uff08\u5982 3 \u53f7\u70b9\uff09\uff0c\u82e5\u88ab\u6dfb\u52a0\u53f6\u5b50\u70b9\u5728\u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u5185\uff0c\u5219\u91cd\u5fc3\u6743\u503c\u52a0\u4e00\uff1b\u5426\u5219\u4e0d\u53d8\u3002\n4. \u88ab\u6dfb\u52a0\u53f6\u5b50\u8282\u70b9\u672c\u8eab\uff08\u5982 9 \u53f7\u70b9\uff09\uff0c\u663e\u7136\u4e0d\u53d8\u3002\n5. \u91cd\u5fc3\u548c\u88ab\u6dfb\u52a0\u53f6\u5b50\u70b9\u8def\u5f84\u4e0a\u7684\u70b9\uff08\u5982 4 \u53f7\u70b9\uff09\uff0c\u56e0\u4e3a\u5220\u6389\u5b83\u540e\u65b0\u53f6\u5b50\u6ca1\u6709\u8fde\u901a\u5230\u6839\uff0c\u6240\u4ee5\u4e0d\u53d8\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5982\u679c\u65b0\u53f6\u5b50\u5728\u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u5185\uff0c\u4e0d\u4f1a\u6539\u53d8\u7684\u5c31\u662f\u91cd\u5fc3\u5230\u5b83\u7684\u94fe\uff08\u4e0d\u5305\u62ec\u4e24\u7aef\uff09\uff1b\u5426\u5219\uff0c\u4e0d\u4f1a\u6539\u53d8\u7684\u662f\u91cd\u5fc3\u5230\u5b83\u7684\u94fe\uff08\u5305\u62ec\u91cd\u5fc3\uff0c\u4e0d\u5305\u62ec\u88ab\u6dfb\u52a0\u8282\u70b9\uff09\u3002\n\n\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u662f\u6240\u6709\u70b9\u8d21\u732e\u7684\u96c6\u5408\uff0c\u8003\u8651\u4ece\u91cd\u5fc3\u51fa\u53d1\u6df1\u641c\u6574\u9897\u6811\uff0c\u5230\u8fbe\u4e00\u4e2a\u70b9\u65f6\uff0c\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u5373\u53ef\u3002\u53ef\u4ee5\u7528 Hash \u5b9e\u73b0\u3002\n\n\u6ce8\u610f\u5230\u96c6\u5408\u662f\u65e0\u5e8f\u7684\uff0c\u5982\u679c\u548c\u6211\u8003\u573a\u964d\u667a naive \u5730\u7528\u6bcf\u4e2a\u70b9\u6743\u503c\u7684 $k$ \u6b21\u65b9\u548c\uff08$k$ \u4e3a\u5e38\u91cf\uff09\u5f53 Hash \u51fd\u6570\uff0c\u6ce8\u610f\u5230 $a^k + b^k = c^k$ \u5728 $k\\leq\\log\\max(a,b,c)$ \u65f6\u5206\u5e03\u4e0d\u5c11\uff0c\u5f88\u5927\u6982\u7387\u88ab\u5361\u6389\u3002\u56e0\u6b64\u8003\u8651\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6743\u503c\u6784\u6210\u7684\u6876\uff0c\u5bf9\u8fd9\u4e2a\u6876\u8fdb\u884c\u5b57\u7b26\u4e32 Hash \u5373\u53ef\u3002\n\n\u5355 Hash \u4e5f\u88ab\u5361\u4e86\uff08\u6211\u8fd0\u6c14\u80cc\u8fd8\u662f\u51fa\u9898\u4eba\u6bd2\u7624\u8fd8\u662f\u751f\u65e5\u6096\u8bba\u518d\u73b0\u90fd\u6709\u53ef\u80fd\uff09\uff0c\u5efa\u8bae\u53cc Hash\uff0c\u6211\u7528\u7684\u53cc\u6a21 Hash + \u53cc\u5e95\u6570\u3002\n\n\u5269\u4e0b\u7684\u90fd\u662f\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u4f8b\u5982\u4e24\u4e2a\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8003\u8651\u65ad\u6389\u4e2d\u95f4\u7684\u8fb9\uff0c\u62c6\u6210\u4e24\u68f5\u6811\u8003\u8651\uff08\u5728\u4e00\u68f5\u6811\u4e0a\u65f6\u53cd\u6b63\u53e6\u4e00\u68f5\u6811\u70b9\u7684\u8d21\u732e\u90fd\u662f\u8981\u52a0\u4e00\u7684\uff09\uff0c\u7b49\u7b49\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nbool Begin;\nconst int max_n=2000006,mod1=1000000009,mod2=998244853;\ninline int read(){\n    int x=0;bool w=0;char c=getchar();\n    while(c<'0' || c>'9') w|=c=='-',c=getchar();\n    while(c>='0' && c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return w?-x:x;\n}\ninline void write(int x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10^48);\n}\nstruct graph{\n    int ct,hd[max_n],to[max_n<<1],nx[max_n<<1];\n    graph(){ct=1;}\n    inline void add(int u,int v){\n        nx[++ct]=hd[u],hd[u]=ct,to[ct]=v;\n    }\n}e;\ninline int MOD1(int x){\n    return (x>=mod1?x-mod1:x);\n}\ninline int MOD2(int x){\n    return (x>=mod2?x-mod2:x);\n}\nstruct Hashnum{\n    int x1,x2;\n    Hashnum(int A=0,int B=0):x1(A),x2(B){}\n    bool operator == (const Hashnum &b) const{\n        Hashnum a=*this;\n        return (a.x1==b.x1 && a.x2==b.x2);\n    }\n    bool operator < (const Hashnum &b) const{\n        Hashnum a=*this;\n        return (a.x1<b.x1 || (a.x1==b.x1 && a.x2<b.x2));\n    }\n    Hashnum operator * (const Hashnum &b) const{\n        Hashnum a=*this;\n        return Hashnum(a.x1*b.x1%mod1,a.x2*b.x2%mod2);\n    }\n    Hashnum operator + (const Hashnum &b) const{\n        Hashnum a=*this;\n        return Hashnum(MOD1(a.x1+b.x1),MOD2(a.x2+b.x2));\n    }\n    Hashnum operator - (const Hashnum &b) const{\n        Hashnum a=*this;\n        return Hashnum(MOD1(a.x1-b.x1+mod1),MOD2(a.x2-b.x2+mod2));\n    }\n    Hashnum operator * (const int &b) const{\n        Hashnum a=*this;\n        return a*Hashnum(b,b);\n    }\n    Hashnum operator + (const int &b) const{\n        Hashnum a=*this;\n        return a+Hashnum(b,b);\n    }\n    Hashnum operator - (const int &b) const{\n        Hashnum a=*this;\n        return a-Hashnum(b,b);\n    }\n}hs;\n\nint n,sz[max_n],mxs[max_n];\n\ninline void dfs1(int u,int fa){\n    sz[u]=1;\n    for(register int i=e.hd[u];i;i=e.nx[i]){\n        int v=e.to[i];\n        if(v==fa) continue;\n        dfs1(v,u);\n        sz[u]+=sz[v];\n        mxs[u]=max(mxs[u],sz[v]);\n    }\n    mxs[u]=max(mxs[u],n-sz[u]);\n}\nint zx,zx2;\ninline void dfs2(int u,int fa){\n    zx=u;\n    for(register int i=e.hd[u];i;i=e.nx[i]){\n        int v=e.to[i];\n        if(v==fa) continue;\n        if(sz[v]>n/2)\n            dfs2(v,u);\n    }\n}\n\nint ans[max_n],tong[max_n],pw1[max_n],pw2[max_n];\n\nint B1=114514,B2=11037;\n\nmap<Hashnum,int> mp;\ninline void dfs3(int u,int fa,Hashnum hs){\n    for(register int i=e.hd[u];i;i=e.nx[i]){\n        int v=e.to[i];\n        if(v==fa || v==zx || v==zx2) continue;\n        Hashnum t=hs-Hashnum(pw1[mxs[v]+1],pw2[mxs[v]+1])+Hashnum(pw1[mxs[v]],pw2[mxs[v]]);\n        ++mp[t];\n        dfs3(v,u,t);\n    }\n}\n\nbool End;\n#define File \"forest\"\nsigned main(){\n    // #ifndef ONLINE_JUDGE\n    // freopen(File \".in\",\"r\",stdin);\n    // freopen(File \".out\",\"w\",stdout);\n    // #endif\n    // cerr<<\"Memory : \"<<(&Begin-&End)/1024.0/1024<<\"\\n\";\n    n=read();\n    for(register int i=1;i<n;++i){\n        int u=read(),v=read();\n        e.add(u,v),e.add(v,u);\n    }\n    dfs1(1,-1);\n    dfs2(1,-1);\n    for(register int i=1;i<=n;++i)\n        ++tong[mxs[i]+1];\n    ++tong[n];\n    if(!(n&1)) for(register int i=1;i<=n;++i)\n        if(i!=zx && mxs[i]==mxs[zx]){\n            zx2=i;\n            break;\n        }\n    for(register int i=1;i<=n;++i){\n        hs.x1=(hs.x1*B1+tong[i]),\n        hs.x2=(hs.x2*B2+tong[i]);\n    }\n    pw1[n]=pw2[n]=1;\n    for(register int i=n-1;i;--i){\n        pw1[i]=pw1[i+1]*B1%mod1,\n        pw2[i]=pw2[i+1]*B2%mod2;\n    }\n    ++mp[hs-Hashnum(pw1[mxs[zx]+1],pw2[mxs[zx]+1])+Hashnum(pw1[mxs[zx]],pw2[mxs[zx]])];\n    if(zx2) ++mp[hs-Hashnum(pw1[mxs[zx2]+1],pw2[mxs[zx2]+1])+Hashnum(pw1[mxs[zx2]],pw2[mxs[zx2]])];\n    dfs3(zx,-1,hs);\n    if(zx2) dfs3(zx2,-1,hs);\n    int cnt=0;\n    for(auto i=mp.begin();i!=mp.end();++i)\n        ans[++cnt]=(*i).second;\n    sort(ans+1,ans+1+cnt);\n    write(cnt),putchar('\\n');\n    for(register int i=1;i<=cnt;++i)\n        write(ans[i]),putchar('\\n');\n    return 0;\n}\n```\n",
        "postTime": 1657070867,
        "uid": 181776,
        "name": "_Arahc_",
        "ccfLevel": 7,
        "title": "P6653 \u3010YsOI\u3011\u9020\u6797"
    },
    {
        "content": "## P6653 [YsOI2020]\u9020\u6797\n\n### \u9898\u89e3\n\n\u4e00\u4e2a\u70b9\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4f1a\u53d1\u751f\u6539\u53d8\u5f53\u4e14\u4ec5\u5f53\u5ac1\u63a5\u7684\u70b9\u5728\u5b83\u7684\u6700\u5927\u5b50\u6811\u4e2d\u3002\u8fd9\u6837\u5f71\u54cd\u5f53\u524d\u70b9\u6700\u5927\u5b50\u6811\u503c\u7684\u5ac1\u63a5\u70b9\u5c31\u4f1a\u5728\u4e00\u6bb5\u533a\u95f4\u4e2d\u3002\u53ef\u4ee5\u53d1\u73b0\u533a\u95f4\u603b\u6570\u662f $O(n)$ \u7684\u3002\n\n> \u8bc1\u660e\uff1a\u82e5\u5b58\u5728\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u5b58\u5728\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u5927\u5c0f\u76f8\u7b49\u7684\u5b50\u6811\uff0c\u5219\u5269\u4e0b\u7684\u6240\u6709\u70b9\u7684\u6700\u5927\u5b50\u6811\u53ea\u6709\u4e00\u4e2a\uff08\u4e3a\u5176\u7236\u4eb2\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u5728\u6bcf\u4e2a\u70b9\u5ac1\u63a5\u540e\u4f1a\u5f71\u54cd\u7684\u70b9\u7684\u60c5\u51b5\u3002\n\n\u53d1\u73b0\u6700\u540e\u54c1\u79cd\u76f8\u540c\u5f53\u4e14\u4ec5\u5f53\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u6700\u5927\u5b50\u6811\u503c\uff0c\u88ab\u5f71\u54cd\u7684\u70b9\u7684\u4e2a\u6570\u76f8\u540c\u3002\u76f4\u63a5 $hash$ \u5373\u53ef\u3002\n\n~~\u6bd4\u8d5b\u65f6\u667a\u969c\u5730\u5199\u4e86\u4e2a\u6811\u72b6\u6570\u7ec4T\u98de~~\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 2000010\n#define ll long long\n#define ull unsigned long long\n#define pll pair<ull,ull>\n#define mkp(a,b) make_pair(a,b)\ninline int read() {\n    int x=0;\n    char ch=getchar();\n    while (!isdigit(ch)) ch=getchar();\n    while (isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n    return x;\n}\null seed=13244074693642402ull;\ninline ull Rand() {\n    seed^=seed<<13,seed^=seed>>7,seed^=seed<<17;\n    return seed;\n}\null f[N],g[N],Map1[N],Map2[N];\npll val[N];\ninline void Add(int l,int r,int dat,int Dat) {\n    f[l]^=dat,f[r+1]^=dat,g[l]^=Dat,g[r+1]^=Dat;\n}\nint tot=1;\nint fir[N],nex[N<<1],got[N<<1];\ninline void AddEdge(int x,int y) {\n    nex[++tot]=fir[x],fir[x]=tot,got[tot]=y;\n    nex[++tot]=fir[y],fir[y]=tot,got[tot]=x;\n}\nint dfn[N],siz[N],Max[N],idx;\ninline void dfs(int x,int fa,int n) {\n    siz[x]=1,dfn[x]=++idx;\n    for (int i=fir[x];i;i=nex[i]) if (got[i]!=fa)\n        dfs(got[i],x,n),siz[x]+=siz[got[i]],Max[x]=max(Max[x],siz[got[i]]);\n    Max[x]=max(Max[x],n-siz[x]);\n    for (int i=fir[x];i;i=nex[i]) {\n        if (got[i]==fa || siz[got[i]]!=Max[x]) continue;\n        Add(dfn[got[i]],dfn[got[i]]+siz[got[i]]-1,Map1[Max[x]],Map2[Max[x]]);\n    }\n    if (n-siz[x]==Max[x]) {\n        Add(1,dfn[x]-1,Map1[Max[x]],Map2[Max[x]]);\n        Add(dfn[x]+siz[x],n,Map1[Max[x]],Map2[Max[x]]);\n    }\n}\nint main() {\n    int n=read();\n    for (int i=1;i<=n;i++) Map1[i]=Rand();\n    for (int i=1;i<=n;i++) Map2[i]=Rand();\n    for (int i=1;i<=n-1;i++) AddEdge(read(),read());\n    dfs(1,0,n);\n    for (int i=1;i<=n;i++) f[i]^=f[i-1],g[i]^=g[i-1];\n    for (int i=1;i<=n;i++) val[i]=mkp(f[i],g[i]);\n    sort(val+1,val+n+1);\n    vector<int> ans; int cnt=1; val[n+1]=mkp(-1,-1);\n    for (int i=2;i<=n+1;i++) {\n        if (val[i]!=val[i-1]) \n            ans.push_back(cnt),cnt=0;\n        cnt++;\n    }\n    printf(\"%d\\n\",ans.size());\n    sort(ans.begin(),ans.end());\n    for (auto tmp:ans) printf(\"%d\\n\",tmp);\n    return 0;\n}\n```\n",
        "postTime": 1595252186,
        "uid": 68387,
        "name": "lamboo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6653 \u3010[YsOI2020]\u9020\u6797\u3011"
    }
]