[
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u5176\u5b9e\u5b8c\u5168\u4e0d\u9700\u8981\u4f60\u53bb\u4f60\u7528\u4ec0\u4e48\u9ad8\u7ea7\u7b97\u6cd5\uff0c\u5176\u5b9e\u9700\u8981\u4f60\u7684\uff0c\u662f\u8010\u5fc3\u5730\u7206\u641c\uff0c\u50cf2015\u5e74\u6597\u5730\u4e3b\u4e00\u6837\u4e86\uff0c\u4f46\u6709\u4e00\u4e2a\u5751\uff0c\u6211\u6ca1\u6ce8\u610f\u5230\uff0c\u4e8e\u662f\u5f97\u4e8680\u5206\uff0c\u90a3\u5c31\u662f\uff1a\u56e0\u4e3a\u8fdb\u653b\u65b9\u662f\u9a91\u58eb\uff0c\u6240\u4ee5\u8fdb\u653b\u65b9\u662f\u4e0d\u53ef\u80fd\u5403\u5230\u9a91\u58eb\u7684\u3002\u5927\u4f53\u5462\u5c31\u662f\u5148\u628a\u5f00\u59cb\u70b9\u548c\u7ed3\u675f\u70b9\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5f00\u7ed3\u6784\u4f53\uff0c\u7ed3\u6784\u4f53\u91cc\u9762\u8981\u6709\u5b83\u5f53\u65f6\u68cb\u76d8\u7684\u72b6\u6001\u548c\u8fdb\u653b\u65b9\u6240\u5728\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u90a3\u4e9b\u654c\u65b9\u7684\u8bb0\u5f55\u4e0b\u6765\uff0c\u6bcf\u6b21\u5f808\u4e2a\u65b9\u5411\u679a\u4e3e\uff0c\u7b26\u5408\u6761\u4ef6(\u5c31\u662f\u6ca1\u8df3\u51fa\u68cb\u76d8\uff0c\u4e0d\u4f1a\u88ab\u5730\u65b9\u5403\u5230) \u3002\u56e0\u4e3a\u5bbd\u641c\u8981\u5feb\u4e00\u4e9b\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5bbd\u641c\uff0c\u8981\u5f00\u4e00\u4e2a\u961f\u5217\uff0c\u641c\u5230\u4e86\u7b2c\u4e00\u4e2a\u5403\u5230\u56fd\u738b\u7684\u5c31\u8df3\u51fa\u6765\uff0c\u8fd4\u56de\u6b65\u6570\u3002\u641c\u5b8c\u540e\u8fd8\u4e0d\u884c\uff0c\u5c31\u8fd4\u56de1.\n\n\u6ce8\u610f\uff1a\u5982\u679c\u8df3\u5230\u4e86\u654c\u65b9\u7684\u4e00\u4e2a\u68cb\u5b50\u4e0a\uff0c\u5c31\u8981\u628a\u90a3\u9897\u68cb\u5b50\u53bb\u6389\uff01\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nstruct wo{\n    char b[60][60];//\u68cb\u76d8\u72b6\u6001\n    int x,y;//\n};\nqueue<wo>p;\nchar a[60][60];\nint vis[60][60];//\u8bb0\u5f55\u6709\u591a\u5c11\u9897\u654c\u65b9\u68cb\u5b50\u80fd\u5403\u5230\u81ea\u5df1 \nint step[60][60];//\u8bb0\u5f55\u5230\u8fbe\u5f53\u524d\u70b9\u81f3\u5c11\u8981\u7528\u591a\u5c11\u6b65 \nint n;\nint dx[8]={1,1,-1,-1,2,2,-2,-2};//\u516b\u4e2a\u65b9\u5411 \nint dy[8]={2,-2,2,-2,1,-1,1,-1};//\u516b\u4e2a\u65b9\u5411 \nint startx,starty,endx,endy;//\u5f00\u59cb\u70b9\u548c\u7ed3\u675f\u70b9 \nint judge(int x,int y){\n    if(x<=0||x>n)return 0;\n    if(y<=0||y>n)return 0;\n    if(vis[x][y])return 0;\n    return 1;\n}\nvoid queen(int x,int y){//\u7687\u540e\u653b\u51fb\u8303\u56f4\u5185\u7684 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if((i==x)||(j==y)||((i+j)==(x+y))||((i-j)==(x-y)))//\u6a2a\u5750\u6807\u4e00\u6837\uff0c\u7ad6\u5750\u6807\u4e00\u6837\uff0c\u6216\u8005\u5728\u540c\u4e00\u6761\u659c\u7ebf\u4e0a \n            vis[i][j]++;//\u80fd\u653b\u51fb\u5230\u8fd9\u4e00\u70b9 \n        }\n    }\n    vis[x][y]--;//\u81ea\u5df1\u653b\u51fb\u4e0d\u4e86\u81ea\u5df1\uff01 \n}\nvoid castle(int x,int y){//\u57ce\u5821\u653b\u51fb\u8303\u56f4 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if((i==x)||(j==y))//\u6a2a\u5750\u6807\u4e00\u6837\u6216\u7ad6\u5750\u6807\u4e00\u6837 \n            vis[i][j]++;//\u80fd\u653b\u51fb\u5230\u8fd9\u4e00\u70b9 \n        }\n    }\n    vis[x][y]--;//\u81ea\u5df1\u653b\u51fb\u4e0d\u4e86\u81ea\u5df1\uff01 \n}\nvoid B(int x,int y){//\u4e3b\u6559\u653b\u51fb\u8303\u56f4 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if(((i+j)==(x+y))||((i-j)==(x-y)))//\u5728\u540c\u4e00\u6761\u659c\u7ebf\u4e0a \n            vis[i][j]++;//\u5c31\u5403\u5f97\u5230 \n        }\n    }\n    vis[x][y]--;//\u81ea\u5df1\u653b\u51fb\u4e0d\u4e86\u81ea\u5df1\uff01 \n}\nvoid knight(int x,int y){ \n    for(int i=0;i<8;i++){\n        if(judge(x+dx[i],y+dy[i])){//\u5728\u9a91\u58eb\u76848\u4e2a\u65b9\u5411\u4e0a\uff0c\u4e14\u5728\u68cb\u76d8\u4e0a \n            vis[x+dx[i]][y+dy[i]]++;//\u5c31\u5403\u5f97\u5230\n        }\n    }\n    //\u56e0\u4e3a\u653b\u51fb\u65b9\u4e5f\u662f\u9a91\u58eb\uff0c\u6240\u4ee5\u653b\u51fb\u65b9\u5403\u4e0d\u4e86 \n}\nvoid solider(int x,int y){\n    vis[x+1][y-1]++;vis[x+1][y+1]++;//\u58eb\u5175\u53ea\u80fd\u653b\u51fb\u5230\u4e24\u4e2a\u70b9 \n}\nvoid king(int x,int y){\n     for(int i=1;i<=n;i++){\n         for(int j=1;j<=n;j++){\n             if(abs(x-i)<=1&&abs(y-j)<=1)vis[i][j]++;//\u56fd\u738b\u76848\u4e2a\u65b9\u5411\u5185\u80fd\u88ab\u5403\u5230 \n         }\n     }\n     vis[x][y]=0; //\u81ea\u5df1\u653b\u51fb\u4e0d\u4e86\u81ea\u5df1\uff01    \n}\nvoid me(int x,int y){\n    startx=x,starty=y;//\u8bb0\u5f55\u5f00\u59cb\u5750\u6807 \n}\nint solve(){\n    while(p.size())p.pop();\n     wo help;\n     wo save;\n     help.x=startx;\n     help.y=starty;\n     step[startx][starty]=0;\n     memset(vis,0,sizeof(vis));\n     for(int i=1;i<=n;i++){\n          for(int j=1;j<=n;j++){\n              help.b[i][j]=a[i][j];\n         }\n     }\n    for(int i1=1;i1<=n;i1++){\n        for(int j1=1;j1<=n;j1++){//\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u654c\u65b9\u68cb\u5b50\uff0c\u654c\u65b9\u68cb\u5b50\u653b\u51fb\u8303\u56f4\u5185\u7684\u5c31\u4e0d\u80fd\u5230 \n            if(help.b[i1][j1]=='C')castle(i1,j1);\n            else if(help.b[i1][j1]=='K')knight(i1,j1);\n            else if(help.b[i1][j1]=='B')B(i1,j1);\n            else if(help.b[i1][j1]=='Q')queen(i1,j1);\n            else if(help.b[i1][j1]=='X')king(i1,j1);\n            else if(help.b[i1][j1]=='P')solider(i1,j1);\n        }\n    }vis[endx][endy]=0;//\u6bd5\u7adf\u5403\u5230\u56fd\u738b\u5c31\u8d62\u4e86\uff0c\u4e0d\u9700\u8003\u8651\u5176\u5b83 \n    if(judge(help.x,help.y)==0)return -1;\n     p.push(help);\n     while(p.size()){\n           help=p.front();p.pop();\n           if(step[endx][endy]!=inf){\n               return step[endx][endy];\n          }\n          for(int i=0;i<8;i++){\n                    memset(vis,0,sizeof(vis)); \n              for(int i1=1;i1<=n;i1++){\n                    for(int j1=1;j1<=n;j1++){//\u4e00\u4e2a\u4e00\u4e2a\u5730\u627e\u654c\u65b9\u68cb\u5b50\uff0c\u654c\u65b9\u68cb\u5b50\u653b\u51fb\u8303\u56f4\u5185\u7684\u5c31\u4e0d\u80fd\u5230 \n                    if(help.b[i1][j1]=='C')castle(i1,j1);\n                    else if(help.b[i1][j1]=='K')knight(i1,j1);\n                   else if(help.b[i1][j1]=='B')B(i1,j1);\n                  else if(help.b[i1][j1]=='Q')queen(i1,j1);\n                    else if(help.b[i1][j1]=='X')king(i1,j1);\n                  else if(help.b[i1][j1]=='P')solider(i1,j1);\n                 }\n             }vis[endx][endy]=0;\n                if(judge(help.x+dx[i],help.y+dy[i])){//\u91cd\u70b9\u5f00\u59cb \uff0c\u5982\u679c\u8df3\u5230\u4e86\u68cb\u76d8\u4e0a\u4e14\u4e0d\u4f1a\u88ab\u5403 \n                  if(step[help.x+dx[i]][help.y+dy[i]]>step[help.x][help.y]+1){//\u662f\u8d70\u5230\u5f53\u524d\u70b9\u6700\u4f18\u7b56\u7565\u624d\u884c \n                    step[help.x+dx[i]][help.y+dy[i]]=step[help.x][help.y]+1;\n                    save.x=help.x+dx[i];save.y=help.y+dy[i];\n                    for(int ii=1;ii<=n;ii++){\n                        for(int jj=1;jj<=n;jj++){\n                            save.b[ii][jj]=help.b[ii][jj];//\u7ee7\u627f\u72b6\u6001 \n                        }\n                    }\n                    save.b[save.x][save.y]='.';//\u628a\u88ab\u201c\u6211\u201d\u5403\u5230\u7684\u53d8\u6210\u70b9 \n                    p.push(save);\n```\n}//\u91cd\u70b9\u7ed3\u675f\n```cpp\n              }\n          } \n     }\n     return -1;\n}\nint main()\n{\n   while(scanf(\"%d\",&n)!=EOF){\n    memset(step,inf,sizeof(step));\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            cin>>a[i][j];\n            if(a[i][j]=='O')me(i,j);\n            if(a[i][j]=='X'){\n                endx=i,endy=j;//\u8bb0\u5f55\u56fd\u738b\u4f4d\u7f6e \n            }\n        }\n    }\n    printf(\"%d\\n\",solve());\n  }\nreturn 0;\n}\n```",
        "postTime": 1508651643,
        "uid": 50945,
        "name": "c201904",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u4e0b\u9664\u4e86\u6b63\u89e3DP\u4ee5\u5916\u53e6\u4e00\u79cdAC\u7684\u601d\u8def\u5427\uff08\u8003\u8bd5\u7684\u65f6\u5019\u6253\u4e86\u597d\u4e45\uff09\n\n\u6211\u7684\u505a\u6cd5\u662f\u72b6\u6001\u538b\u7f29+\u641c\u7d22\uff08BFS\uff09\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u4e00\u5b9a\u505a\u8fc7\u94a5\u5319\u7c7b\u7684\u641c\u7d22\u9898\u5427\uff08\u4f8b\u5982 \u62ef\u6551\u516c\u4e3b \u201c\u5927\u706b\u9898\u201d\uff09\n\n\u90a3\u4e48\u8fd9\u91cc\u4e5f\u662f\u4e00\u6837\u7684\u5566\u3002 \u89c2\u5bdf\u5230\u738b\u3001\u540e\u3001\u8f66......\u4e71\u4e03\u516b\u7cdf\u7684\u6700\u591a\u53ea\u670915\u4e2a\u65d7\u5b50\n\n\u7136\u540e\u4e00\u770b\u7a7a\u95f4\u8303\u56f4512MB.....\u8fd9..\u8fd9\u4e0d\u662f\u5b8c\u7f8e\u5417\u3002\u3002\u3002\n\n\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u7684\u4e00\u4e2a\u6570\u6765\u8868\u793a\u67d0\u4e2a\u68cb\u5b50\u662f\u5426\u5b58\u5728\u3002\u90a3\u4e48\u6bcf\u6b21BFS\u4ece\u961f\u9996\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u5efa\u4e00\u6b21\u56fe\u3002\n\n\u7136\u540e\u7528\u8fd9\u4e2a\u65b0\u5efa\u7684\u56fe\u50cf8\u4e2a\u65b9\u5411\u6269\u5c55\u65b0\u7684\u5143\u7d20\uff0c\u5982\u679c\u662f\u5403\u6389\u4e86\u67d0\u4e2a\u5b50\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6539\u53d8\u4e00\u4e0b\u72b6\u538b\u5185\u5bb9\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u6837\u641c\u7d22\uff0c\u770b\u8d77\u6765\u5f88\u6162\uff0c\u5176\u5b9e\u8dd1\u7684\u98de\u5feb\u7684\uff08\u56e0\u4e3a\u4f60\u5efa\u56fe\u66b4\u529b\u641e\u5176\u5b9e\u4e5f\u662f\u4e0d\u9700\u8981\u591a\u5c11\u65f6\u95f4\u7684\uff09\u3002\n\n\u8003\u8bd5\u7684\u65f6\u5019\uff0c\u6570\u7ec4\u5f00\u5c0f\u4e86\u4e00\u70b9\uff0c\u5c31\u76f4\u63a5\u4ece100\u8dcc\u5230\u4e8630\uff08n<=8\uff09\u5206\u4e86\uff08\u6cea\u5954\uff1aT\\_T T\\_TT\\_T\uff09\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u6cd5\u770b\u6211\u7684\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<set>\n#include<vector>\n#define ll long long\n#define IL inline\n#define RG register\nusing namespace std; \n\nIL int gi()\n{\n    RG int date = 0,m = 1; RG char ch = 0;\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch = getchar();\n    if(ch == '-'){m = -1; ch = getchar();}\n    while(ch>='0' && ch<='9'){\n        date = date*10+ch-'0';\n        ch = getchar();\n    }return date*m;\n}\nIL void write(int ac)\n{\n    if(ac<0){ac = -ac;putchar('-');}\n    if(ac>9)write(ac/10); putchar(ac%10+'0');\n}\n/* \nO\u8868\u793a\u767d\u9a91\u58eb\nC\u8868\u793a\u9ed1\u57ce\u5821(3,4)\nK\u8868\u793a\u9ed1\u9a91\u58eb(0,1)\nB\u8868\u793a\u9ed1\u4e3b\u6559(5,6)\nQ\u8868\u793a\u9ed2\u7687\u540e(2)\nX\u8868\u793a\u9ed1\u56fd\u738b(15)\nP\u8868\u793a\u9ed1\u58eb\u5175(7,8,9,10,11,12,13,14)\n*/\n\nint posx[100],posy[100],N,stx,sty;\nstruct Node{int x,y,key,step;}; bool vis[(1<<16)][63][63];\nqueue<Node>Q; int Mp[103][103],Dc[103][103];\nint mx[8] = {1,2,2,1,-1,-2,-2,-1},my[8] = {2,1,-1,-2,-2,-1,1,2};\nint Kx[8] = {0,1,1,1,0,-1,-1,-1},Ky[8] = {1,1,0,-1,-1,-1,0,1};\n/* \nvoid Portray(){\n    for(int i = 1; i <= N ; i ++){\n            for(int j = 1; j <= N ;j ++)cout<<Mp[i][j];cout<<endl;\n        }cout<<endl;\n}\n*/\n//\u5efa\u56fe\u5566\uff08\u60f3\u600e\u4e48\u66b4\u529b\u5c31\u600e\u4e48\u66b4\u529b\uff0c\u53cd\u6b63\u70b8\u4e0d\u4e86\uff09\nvoid Build_Map(int x,int y,int tr)\n{\n    for(int i = 1; i <= N ; i ++)\n       for(int j = 1; j <= N ; j++)Mp[i][j] = Dc[i][j] = 0;\n    for(int i = 0 ; i <= 15; i ++)\n      if((1<<i)&tr)Dc[posx[i]][posy[i]] = 1;\n    for(int i = 0; i <= 15; i ++)\n    {\n        int nw = 1<<i;\n        int ggx = posx[i],ggy = posy[i]; \n        if(!posx[i]||!posy[i])continue;\n        if(0<=i && i<=1 && (tr&nw))\n        {\n            for(int j = 0 ; j <= 7; j ++)\n            {\n                int xx = ggx+mx[j],yy = ggy+my[j];\n                if(xx<1 || yy<1 || xx>N || yy>N)continue;\n                Mp[xx][yy]++;\n            }\n        }\n        else if(i == 2 && tr&nw)\n        {\n            for(int i = 1; ;i++){if(ggx+i>N)break; Mp[ggx+i][ggy]++; if(Dc[ggx+i][ggy])break;}\n            for(int i = -1; ;i--){if(ggx+i<1)break; Mp[ggx+i][ggy]++; if(Dc[ggx+i][ggy])break;}\n            for(int i = 1; ;i++){if(ggy+i>N)break; Mp[ggx][ggy+i]++; if(Dc[ggx][ggy+i])break;}\n            for(int i = -1; ;i--){if(ggy+i<1)break; Mp[ggx][ggy+i]++;if(Dc[ggx][ggy+i])break;}\n            for(int i = 1,j = 1;;i++,j++){if(ggx+i>N||ggy+j>N)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = 1,j = -1;;i++,j--){if(ggx+i>N||ggy+j<1)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = -1,j = 1;;i--,j++){if(ggx+i<1||ggy+j>N)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = -1,j = -1;;i--,j--){if(ggx+i<1||ggy+j<1)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n        }\n        else if(3<=i && i<=4 && tr&nw)\n        {\n            for(int i = 1; ;i++){if(ggx+i>N)break; Mp[ggx+i][ggy]++; if(Dc[ggx+i][ggy])break;}\n            for(int i = -1; ;i--){if(ggx+i<1)break; Mp[ggx+i][ggy]++; if(Dc[ggx+i][ggy])break;}\n            for(int i = 1; ;i++){if(ggy+i>N)break; Mp[ggx][ggy+i]++; if(Dc[ggx][ggy+i])break;}\n            for(int i = -1; ;i--){if(ggy+i<1)break; Mp[ggx][ggy+i]++; if(Dc[ggx][ggy+i])break;}\n            //Portray();\n        }\n        else if(5<=i && i<=6 && tr&nw)\n        {\n            for(int i = 1,j = 1;;i++,j++){if(ggx+i>N||ggy+j>N)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = 1,j = -1;;i++,j--){if(ggx+i>N||ggy+j<1)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = -1,j = 1;;i--,j++){if(ggx+i<1||ggy+j>N)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            for(int i = -1,j = -1;;i--,j--){if(ggx+i<1||ggy+j<1)break; Mp[ggx+i][ggy+j]++;if(Dc[ggx+i][ggy+j])break;}\n            //Portray();\n        }\n        else if(7<=i && i<=14 && tr&nw){if(ggx+1>N)break; if(ggy+1<=N)Mp[ggx+1][ggy+1]++; if(ggy-1>=1)Mp[ggx+1][ggy-1]++;}\n        else if(i == 15)for(int i = 0; i <= 7; i ++){int xx=ggx+Kx[i],yy=ggy+Ky[i]; if(xx>0&&yy>0&&xx<=N&&yy<=N)Mp[xx][yy]++;}\n    }if(Mp[posx[15]][posy[15]])Mp[posx[15]][posy[15]] = 0;\n}\n//\u6b63\u7ecf\u7684BFS\u90e8\u5206\u3002\u3002\u3002\u3002\nint BFS()\n{\n    int PrKey = 0; memset(vis,false,sizeof(vis));\n    for(int i = 0 ; i <= 14; i ++)if(posx[i]!=0)PrKey = PrKey|(1<<i);\n    while(!Q.empty())Q.pop();\n    Q.push((Node){stx,sty,PrKey,0});vis[PrKey][stx][sty] = true;\n    while(!Q.empty())\n    {\n        Node tp = Q.front(); Q.pop();\n        int x = tp.x,y = tp.y,key = tp.key,St = tp.step;\n        Build_Map(x,y,key);\n        if(Mp[x][y])return -1;\n        for(int i = 0 ; i <= 7 ; i ++)\n        {\n            int xx = x+mx[i],yy = y+my[i],Nwkey,ps = -1;\n            if(xx<1 || yy<1 || xx>N || yy>N)continue;\n            if(Mp[xx][yy]!=0)continue;\n            if(xx == posx[15] && yy == posy[15])return St+1;\n            for(int i = 0; i <= 14;i ++)if(xx == posx[i]&&yy == posy[i]){ps = i;break;}\n            if(ps == -1)Nwkey = key;                        //\u672c\u8f6e\u6ca1\u6709\u5403\u5b50\n            else Nwkey = (key^(1<<ps));                  //\u5403\u4e86\u5b50\uff0c\u4fee\u6539\u72b6\u538b\u5185\u5bb9\n            if(vis[Nwkey][xx][yy])continue;//Lcout<<xx<<\" \"<<yy<<endl;\n            vis[Nwkey][xx][yy] = true; Q.push((Node){xx,yy,Nwkey,St+1});\n        }\n    }return -1;\n}\n\nint main()\n{\n    while(scanf(\"%d\",&N)!=EOF)\n    {\n        memset(posx,0,sizeof(posx));memset(posy,0,sizeof(posy));\n        for(int i = 1; i <= N ; i ++)\n           for(int j = 1; j <= N ; j ++)\n           {\n                  char ch = getchar();\n                  while(ch!='.'&&ch!='O'&&ch!='C'&&ch!='K'&&ch!='B'&&ch!='Q'&&ch!='X'&&ch!='P')ch = getchar();\n                  if(ch == '.')continue;\n                  if(ch == 'O'){stx = i;sty = j;continue;}\n                  if(ch == 'C'){int tt = 3;while(posx[tt]!=0)tt++; posx[tt] = i; posy[tt] = j;}\n                  if(ch == 'K'){int tt = 0;while(posx[tt]!=0)tt++; posx[tt] = i; posy[tt] = j;}\n                  if(ch == 'B'){int tt = 5;while(posx[tt]!=0)tt++; posx[tt] = i; posy[tt] = j;}\n                  if(ch == 'Q'){posx[2] = i; posy[2] = j;} \n                  if(ch == 'X'){posx[15] = i; posy[15] = j;}\n                  if(ch == 'P'){int tt = 7;while(posx[tt]!=0){tt++;} posx[tt] = i; posy[tt] = j;}\n           }//cout<<stx<<\" \"<<sty<<endl;\n           if(stx == posx[15] && sty == posy[15]){cout<<\"0\"<<endl;continue;} \n           int Ans = BFS(); write(Ans); putchar('\\n');\n    }return 0;\n}\n```\nT\\_T--T\\_T--T\\_T--T\\_T\n",
        "postTime": 1507557949,
        "uid": 47599,
        "name": "GuessYCB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u6d1b\u8c37\u4e0d\u80fd\u81ea\u52a8\u8bc6\u522b\u4ee3\u7801\u4e86\uff1f\n\n\u8fd9\u9053\u9898\u6211\u505a\u7684\u65f6\u5019\u62c5\u5fc3\u4f1awa\u6216\u8005t\u2014\u2014\u7ed3\u679cce\u4e86\u3002\n\n\u6700\u540e\u53d1\u73b0\u9898\u76ee\u6570\u636e\u7279\u522b\u6c34\uff0c\u52a0\u4e2a\u7279\u5224\u5c31\u80fdac\u30020ms\u3002\u4e2d\u95f4\u6709\u4e00\u4e9b\u5224\u65ad\u68cb\u5b50\u4f1a\u4e0d\u4f1a\u6b7b\u7684\u6280\u5de7\uff0c\u6240\u4ee5\u5feb\u4e00\u4e9b\u3002\n\n\u7136\u540e\u5410\u69fd\u4e0b\u6570\u636e\uff0c\u867d\u7136\u6570\u636e\u6c34\uff0c\u4f46\u4e5f\u4e0d\u80fd\u9020\u8c23\u554a\uff0c\u4e3a\u5565n\u51fa\u73b0\u4e8655\uff1f\u5e78\u4e8f\u6211\u4e00\u5f00\u59cb\u5c31\u5f00\u768460\u7684\u6570\u7ec4\u3002\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring> //\u4e00\u5f00\u59cb\u6ca1\u52a0\u4f46xcode\u7f16\u8bd1\u7684\u8fc7\uff0c\u7ed3\u679c\u4ea4\u4e0a\u53bb\u5c31ce\n#include <queue>\n\nusing namespace std;\n\nint n;\nint dx[8] = {1, 2, 2, 1, -1, -2, -2, -1};\nint dy[8] = {2, 1, -1, -2, 2, 1, -1, -2}; //\u9a91\u58eb\u5468\u56f4\u516b\u4e2a\u70b9\nint dx2[8] = {-1, -1, -1, 0, 0, 1, 1, 1};\nint dy2[8] = {-1, 0, 1, -1, 1, -1, 0, 1}; //\u56fd\u738b\u5468\u56f4\u516b\u4e2a\u70b9\nint qx, qy; //\u8d77\u70b9\u5750\u6807\nint board[60][60]; //\u5224\u65ad\u5355\u70b9\u662f\u5426\u6b7b\u4ea1\uff0c\u9002\u7528\u4e8e\u9a91\u58eb\u3001\u56fd\u738b\u3001\u58eb\u5175\u7684\u653b\u51fb\u8303\u56f4\nint vis[60][60]; //\u5224\u65ad\u662f\u5426\u8bbf\u95ee\nint r[60]; //\u5224\u65ad\u68cb\u5b50\u6240\u5728\u884c\u662f\u5426\u4f1a\u53d7\u5230\u653b\u51fb\uff0c\u9002\u7528\u4e8e\u7687\u540e\u3001\u57ce\u5821\u7684\u653b\u51fb\u8303\u56f4\nint c[60]; //\u8fd9\u4e2a\u662f\u5224\u65ad\u5217\uff0c\u548c\u884c\u57fa\u672c\u4e00\u6837\nint le[120];\nint ri[120]; //\u5224\u65ad\u4e24\u6761\u5bf9\u89d2\u7ebf\uff0c\u9002\u7528\u4e8e\u7687\u540e\u548c\u4e3b\u6559\n//\u4ee5\u4e0a\u5224\u65ad\u53d8\u91cf\u7684\u542b\u4e49\u662f\u8be5\u884c\u3001\u5217\u3001\u5bf9\u89d2\u7ebf\u3001\u5355\u70b9\u53d7\u5230\u5a01\u80c1\u7684\u6570\u91cf\uff0c\u6bd4\u5982\u4e24\u4e2a\u57ce\u5821\u540c\u65f6\u770b\u5b88\u7740\u7b2ci\u884c\uff0c\u90a3\u4e48r[i] = 2\nchar a[60][60]; //\u5b58\u50a8\u68cb\u76d8\n\nqueue <int> q1;\nqueue <int> q2;\nqueue <int> q3;\n\nbool able(int x, int y)\n{\n    if (r[x] || c[y] || le[x+y] || ri[x-y+n] || board[x][y]) return 0; //\u5224\u65ad\u68cb\u5b50\u6240\u5728\u4f4d\u7f6e\u662f\u5426\u5b89\u5168\uff0c\u5373\u884c\u3001\u5217\u7b49\u662f\u5426\u6709\u5a01\u80c1\u3002\n    return 1; //\u6ca1\u6709\u5a01\u80c1\u5c31\u662f\u5b89\u5168\n}\n\nvoid init()\n{\n    memset(a, 0, sizeof(a));\n    memset(r, 0, sizeof(r));\n    memset(c, 0, sizeof(c));\n    memset(le, 0, sizeof(le));\n    memset(ri, 0, sizeof(ri));\n    memset(vis, 0, sizeof(vis));\n    memset(board, 0, sizeof(board));\n    while (!q1.empty()) { q1.pop(); q2.pop(); q3.pop(); }\n} //\u5168\u6e05\u7a7a\n\nvoid bfs()\n{\n    q1.push(qx); //\u8d77\u70b9\u6a2a\u5750\u6807\n    q2.push(qy); //\u8d77\u70b9\u7eb5\u5750\u6807\n    q3.push(1); //\u5230\u8fbe\u8fd9\u4e2a\u70b9\u518d\u8d70\u4e00\u6b65\u6240\u9700\u7684\u6b65\u6570\uff0c\u521d\u59cb\u4e3a1\n    while (!q1.empty()) {\n        int x = q1.front();\n        int y = q2.front();\n        if (vis[x][y]) { //\u4e0d\u8d70\u56de\u5934\u8def\uff0c\u4f46\u8fd9\u6837\u7684\u8bdd\u5176\u5b9e\u53ef\u4ee5\u6709\u6570\u636e\u5361\u6389\n            q1.pop();\n            q2.pop();\n            q3.pop();\n            continue;\n        }\n        vis[x][y] = 1; //\u6807\u4e3a\u5df2\u8bbf\u95ee\n        for (int i = 0; i < 8; i++) { //\u5411\u5468\u56f48\u4e2a\u70b9\u6269\u5c55\n            int xx = x+dx[i];\n            int yy = y+dy[i];\n            if (xx > n || xx < 1 || yy > n || yy < 1) continue; //\u4e0d\u80fd\u8df3\u51fa\u68cb\u76d8\n            if (vis[xx][yy]) continue;\n            if (a[xx][yy] == 'C')\n                if (able(xx, yy)) { //\u5403\u6389\u4e4b\u540e\u4ecd\u7136\u4e0d\u53d7\u5a01\u80c1\u5c31\u5403\n                    r[xx]--;\n                    c[yy]--; //\u5a01\u80c1-1\n                    q1.push(xx);\n                    q2.push(yy);\n                    q3.push(q3.front()+1); //\u5165\u6808\uff0c\u6b65\u6570+1\n                    continue;\n                }\n            if (a[xx][yy] == 'K')\n                if (able(xx, yy)) {\n                    for (int k = 0; k < 8; k++) board[xx+dx[k]][yy+dy[k]]--;\n                    q1.push(xx);\n                    q2.push(yy);\n                    q3.push(q3.front()+1);\n                    continue;\n                } //\u9a91\u58eb\u540c\u7406\n            if (a[xx][yy] == 'B')\n                if (able(xx, yy)) {\n                    le[xx+yy]--;\n                    ri[xx-yy+n]--;\n                    q1.push(xx);\n                    q2.push(yy);\n                    q3.push(q3.front()+1);\n                    continue;\n                } //\u4e3b\u6559\u540c\u7406\n            if (a[xx][yy] == 'Q')\n                if (able(xx, yy)) {\n                    r[xx]--;\n                    c[yy]--;\n                    le[xx+yy]--;\n                    ri[xx-yy+n]--;\n                    q1.push(xx);\n                    q2.push(yy);\n                    q3.push(q3.front()+1);\n                    continue;\n                } //\u7687\u540e\u540c\u7406\uff0c\u53ea\u662f\u5a01\u80c1\u51cf\u5c11\u7684\u66f4\u591a\n            if (a[xx][yy] == 'X') {\n                cout << q3.front() << endl;\n                return;\n            } //\u5403\u6389\u56fd\u738b\u5c31\u8f93\u51fa\u6b65\u6570\u5e76\u9000\u51fa\n            if (a[xx][yy] == 'P')\n                if (able(xx, yy)) {\n                    board[xx+1][yy-1]--;\n                    board[xx+1][yy+1]--;\n                    q1.push(xx);\n                    q2.push(yy);\n                    q3.push(q3.front()+1);\n                    continue;\n                } //\u58eb\u5175\u540c\u7406\n            if (able(xx, yy)) { //\u5982\u679c\u8fd9\u4e2a\u683c\u5b50\u4ee5\u4e0a\u90fd\u4e0d\u662f\uff0c\u90a3\u5c31\u662f\u7a7a\u7684\u683c\u5b50\uff0c\u5224\u65ad\u4e00\u4e0b\u5c31\u80fd\u4e0d\u80fd\u8d70\u5c31\u597d\u4e86\n                q1.push(xx);\n                q2.push(yy);\n                q3.push(q3.front()+1);\n            }\n        }\n    }\n    cout << -1 << endl; //\u6700\u540e\u6ca1\u5403\u6389\u56fd\u738b\u5c31\u8f93\u51fa-1\n}\n\nint main(void)\n{\n    while (cin >> n) { //\u591a\u7ec4\u6570\u636e\n        init(); //\u521d\u59cb\u5316\n        for (int i = 1; i <= n; i++) {\n            scanf(\"%s\", a[i]+1); //\u8f93\u5165\u6280\u5de7\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8bfb\u5165\n            for (int j = 1; j <= n; j++) {\n                if (a[i][j] == 'O') { qx = i; qy = j; } //\u8d77\u70b9\n                if (a[i][j] == 'C' || a[i][j] == 'Q') { r[i]++; c[j]++; } //\u57ce\u5821\u3001\u7687\u540e\u6240\u5728\u884c\u5217\u5a01\u80c1+1\n                if (a[i][j] == 'K') for (int k = 0; k < 8; k++) board[i+dx[k]][j+dy[k]]++; //\u9a91\u58eb\u5468\u56f48\u4e2a\u70b9\u5a01\u80c1+1\n                if (a[i][j] == 'B' || a[i][j] == 'Q') { le[i+j]++; ri[i-j+n]++; } //\u4e3b\u6559\u3001\u7687\u540e\u6240\u5728\u5bf9\u89d2\u7ebf\u5a01\u80c1+1\n                if (a[i][j] == 'X') for (int k = 0; k < 8; k++) board[i+dx2[k]][j+dy2[k]]++; //\u56fd\u738b\u5468\u56f48\u4e2a\u70b9\u5a01\u80c1+1\n                if (a[i][j] == 'P') { board[i+1][j-1]++; board[i+1][j+1]++; } //\u58eb\u5175\u4e0b\u9762\u4e24\u4e2a\u70b9\u5a01\u80c1+1\n            }\n        }\n        if (!able(qx, qy)) { cout << -1 << endl; continue; } //\u5982\u679c\u4e00\u5f00\u59cb\u5c31\u53d7\u5230\u5a01\u80c1\uff0c\u5c31\u8981\u6b7b\u3002\u6211\u6539\u6389ce\u4e4b\u540e\u56e0\u4e3a\u5fd8\u52a0\u8fd9\u4e2a\u7279\u5224wa\u621080\u5206\n        bfs(); //\u5b9e\u9645\u4e0a\u5e94\u8be5\u6df1\u641c\u624d\u4e0d\u4f1a\u88ab\u5361\uff0c\u4f46\u4f1at\u3002\u6240\u4ee5\u5e7f\u641c\u2014\u2014\u6570\u636e\u597d\u4e00\u70b9\u5176\u5b9e\u53ef\u4ee5\u5361\u6389\u5e7f\u641c\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1518407376,
        "uid": 47421,
        "name": "star_city",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "# \u66b4\u529bbfs\u4e2d\u7684\u7ec6\u8282\n\u521a\u521a\u7ec3\u5b8c\u6b64\u9898\uff0c\u4ece30\u5206\u4e00\u76f4\u8d70\u5230AC\u7684\u849f\u84bb\u6df1\u77e5\u6b64\u9898\u7684~~\u7cbe\u9ad3~~\uff08\u7ec6\u8282\uff09\u6240\u5728\uff0c\u6240\u4ee5\u8fd9\u91cc\u8865\u5145\u51e0\u4e2a\u7ec6\u8282\u3002\n\n\n------------\n## bfs\u5927\u610f\uff1a\nn\u5982\u6b64\u5c0f\uff0c\u53ef\u4ee5\u770b\u51fa\u662f\u66b4\u641c\uff08\u8bc1\u660e\u65b9\u6cd5\uff1a\u663e\u7136\uff09\uff0c\u6240\u4ee5\u5148\u5927\u6982\u628abfs\u7684\u6846\u67b6\u597d\uff1a\n\n\u56e0\u4e3a\u53ef\u4ee5\u5403\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7ed3\u6784\u4f53\u4e2d\u5957\u6570\u7ec4\u7684\u65b9\u5f0f\u6765\u6a21\u62df\u68cb\u76d8\u4e0a\u54ea\u4e9b\u70b9\u4e0d\u80fd\u8d70\uff0c\u7136\u540e\u8d70\u5230\u90a3\u4e2a\u70b9\u4e0a\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u90a3\u4e2a\u70b9\u5bf9\u68cb\u76d8\u7684\u5f71\u54cd\u53d6\u6d88\u6389\u518d\u7528\u76f8\u5f53\u4e8ebfs\u6a21\u677f\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u3002\n\n~~\u95ee\u9898\u51fa\u5c31\u51fa\u5728\u7ed3\u6784\u4f53\u4e2d\u5957\u6570\u7ec4\u548c\u6dfb\u52a0\u53d6\u6d88\u5f71\u54cd\u8fd9\u91cc~~\n\n------------\n\n## bfs\u4e2d~~\u4e0d\u4e3a\u4eba\u77e5~~\u7684\u7ec6\u8282\n1. \u5bf9\u4e8e\u7ed3\u6784\u4f53\u961f\u5217\u7684\u63d2\u5165\uff0c\u672c\u849f\u84bb\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7528\u8fd9\u4e2a\u4e1c\u897f\uff1a\n\n\t\tq.push((ss){sx,sy,0,ks});\uff08ks\u8868\u793a\u4e0a\u9762\u8bf4\u7684\u90a3\u4e2a\u770b\u80fd\u4e0d\u80fd\u8d70\u7684\u68cb\u76d8\uff09\n\temmm\u6240\u4ee5\u6211\u5c31\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u628aks\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u590d\u5236\u7ed9\u5b83\uff0c\u7136\u540e\u518d\u63d2\u5165\u8fd9\u4e2a\u7ed3\u6784\u4f53\u3002\u633a\u9ebb\u70e6\u7684\uff0c~~\u4f46\u662f\u4e0d\u662f\u5f88\u8017\u65f6\u95f4~~\n1. \u7136\u540e\u5c31\u662f\u90a3\u51e0\u4e2a\u68cb\u5b50\u7684\u5904\u7406\u95ee\u9898\u3002\u9898\u4e0a\u8bf4\u53ea\u8981\u78b0\u5230\u68cb\u5b50\u5c31\u505c\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u7ec6\u8282\uff0c\u53d6\u6d88\u5f71\u54cd\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u53ea\u53d6\u6d88\u5230\u539f\u6765\u7684\u90a3\u4e2a\u68cb\u5b50\u4e0a\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6dfb\u52a0\u548c\u53d6\u6d88\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u5b8c\u6210\u3002\u7279\u522b\u5730\uff0c\u7687\u540e\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u770b\u6210\u8f66\u548c\u8c61\u51fd\u6570\u7684\u7ec4\u5408\u3002\n1. \u8e29\u5230\u738b\u76f4\u63a5\u8f93\u51fa\uff0c\u4e0d\u7ba1\u5b83\u5728\u4e0d\u5728\u653b\u51fb\u8303\u56f4\n1. \u5982\u679c\u5b83\u4e00\u5f00\u59cb\u5c31\u5728\u653b\u51fb\u8303\u56f4\uff0c\u5c31\u76f4\u63a5\u6b7b\u6389\uff0c\u8fd9\u70b9\u770b\u9898\u5c31\u884c\uff0c\u6ca1\u5224\u65ad\u7684\u8bdd80\u5206\uff08\u60e8\u75db\u7684\u9886\u609f\uff09\n1. \u4e0d\u8981\u4ee5\u4e3a\u738b\u4e0d\u9700\u8981\u6dfb\u52a0\u5f71\u54cd\uff08\u4e0d\u8fc7\u53ef\u80fd\u5c31\u6211\u4e00\u4e2a\u8fd9\u4e48\u4ee5\u4e3a\uff09\n\nemmm\uff0c\u8fd9\u6837\u5c31\u5dee\u4e0d\u591a\u4e86\uff08bushi\uff09\uff0c\u5177\u4f53\u7684\u53ef\u4ee5\u770b\u4ee3\u7801\u6ce8\u91ca\uff08\u7801\u98ce\u4e0d\u597d\u89c1\u8c05\uff09\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=70;\nint dx[9]={0,-1,-1,-2,-2,2,2,1,1};\nint dy[9]={0,2,-2,1,-1,1,-1,2,-2};\nint sx,sy,zx,zy,n;\nint  mp[N][N];\nbool chong[N][N];\nstruct ss{\n\tint x,y,st;\n\tbool zou[N][N];\n};\nint ks[N][N];\nvoid C(int x,int y,int k){ \n\tint xx=x,yy=y;\n\twhile(xx>0&&xx<=n&&mp[xx][yy]==0||xx==x)\n\t\t{xx-=k;ks[xx][yy]+=k;}xx=x;yy=y;\n\twhile(xx>0&&xx<=n&&mp[xx][yy]==0||xx==x)\n\t\t{xx+=k;ks[xx][yy]+=k;}xx=x;yy=y;\n\twhile(yy>0&&yy<=n&&mp[xx][yy]==0||yy==y)\n\t\t{yy-=k;ks[xx][yy]+=k;}xx=x;yy=y;\n\twhile(yy>0&&yy<=n&&mp[xx][yy]==0||yy==y)\n\t\t{yy+=k;ks[xx][yy]+=k;}xx=x;yy=y;\n} \nvoid K(int x,int y,int k){\n\tfor(int i=1;i<=8;i++) ks[x+dx[i]][y+dy[i]]+=k;\n}\nvoid X(int x,int y){\n\tks[x-1][y-1]++;ks[x-1][y]++;ks[x-1][y+1]++;ks[x][y-1]++;\n\tks[x][y+1]++;ks[x+1][y-1]++;ks[x+1][y]++;ks[x+1][y+1]++;\n}\nvoid B(int x,int y,int k){\n\tint xx=x,yy=y;\n\twhile(xx>0&&xx<=n&&yy>0&&yy<=n&&mp[xx][yy]==0||xx==x)\n\t\t{xx-=k;yy+=k;ks[xx][yy]+=k;}\n\txx=x;yy=y;\n\twhile(xx>0&&xx<=n&&yy>0&&yy<=n&&mp[xx][yy]==0||xx==x)\n\t\t{xx+=k;yy+=k;ks[xx][yy]+=k;}\n\txx=x;yy=y;\n\twhile(xx>0&&xx<=n&&yy>0&&yy<=n&&mp[xx][yy]==0||xx==x)\n\t\t{xx-=k;yy-=k;ks[xx][yy]+=k;}\n\txx=x;yy=y;\n\twhile(xx>0&&xx<=n&&yy>0&&yy<=n&&mp[xx][yy]==0||xx==x)\n\t\t{yy-=k;xx+=k;ks[xx][yy]+=k;}\n}\nvoid P(int x,int y,int k){ks[x+1][y-1]+=k;ks[x+1][y+1]+=k;}\nvoid bfs(){\n\tqueue <ss> q;\n\tss wcy;\n\twcy.x=sx;wcy.y=sy;wcy.st=0;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\twcy.zou[i][j]=ks[i][j];\n\t//\u6784\u5efa\u7ed3\u6784\u4f53\n\tq.push(wcy);\n\twhile(!q.empty()){\n\t\tss u=q.front();q.pop();ss t;\n\t\t//cout<<u.x<<\" \"<<u.y<<endl;\n\t\tfor(int i=1;i<=8;i++){\n\t\t\tt.x=u.x+dx[i],t.y=u.y+dy[i];t.st=u.st+1;\n\t\t\tif(t.x<=0||t.y<=0||t.x>n||t.y>n||chong[t.x][t.y])continue;\n\t\t\tif(t.x==zx&&t.y==zy) {cout<<t.st<<endl;return ;}\n\t\t\t//\u8e29\u5230\u738b\u76f4\u63a5\u8f93\u51fa\uff0c\u4e0d\u7ba1\u5b83\u5728\u4e0d\u5728\u653b\u51fb\u8303\u56f4\n\t\t\tint num=u.zou[t.x][t.y];\n\t\t\tif(num==0){\n\t\t\t  \tfor(int i=1;i<=n;i++)\n\t\t\t\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\t\t\t\tks[i][j]=u.zou[i][j];\n\t\t\t\tchong[t.x][t.y]=1;\n\t\t\t\tif(mp[t.x][t.y]<=0&&mp[t.x][t.y]!='O'){\n\t\t\t\t\tchar ch=mp[t.x][t.y];\n\t\t\t\t\tif(ch=='C') C(t.x,t.y,-1);\n\t\t\t\t\tif(ch=='K') K(t.x,t.y,-1);\n\t\t\t\t\tif(ch=='B') B(t.x,t.y,-1);\n\t\t\t\t\tif(ch=='Q') {C(t.x,t.y,-1),B(t.x,t.y,-1);}\n\t\t\t\t\tif(ch=='P') P(t.x,t.y,-1);\n\t\t\t\t\t//-1\u4ee3\u8868\u5f71\u54cd\u51cf\u4e00\uff08\u8fd9\u4e2a\u597d\u50cf\u90fd\u77e5\u9053\uff09\n\t\t\t\t}\n\t\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\t\t\tt.zou[i][j]=ks[i][j];\n\t\t\t\t\t}\n\t\t\t\t}//\u91cd\u65b0\u8d4b\u503c\uff0c\u4e0a\u9762\u6709\u8bb2\u8fc7\n\t\t\t\tq.push(t);\n\t\t\t}\n\t\t}\n\t}\n\tcout<<-1<<endl;\n\t//\u5230\u6700\u540e\u51fa\u4e0d\u6765\u5c31\u4e0d\u80fd\u51fa\u6765\u4e86\n}\nint main (){\n\twhile(cin>>n){\n\t\t//cout<<n<<endl;\n\t\tgetchar();\n\t\tmemset(ks,0,sizeof(ks));\n\t\tmemset(chong,0,sizeof(chong));\n\t\tmemset(mp,0,sizeof(mp));\n\t\t//\u521d\u59cb\u5316\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tchar ch;\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tch=getchar();\n\t\t\t\tif(ch!='.') mp[i][j]=ch;\n\t\t\t\tif(ch=='O') sx=i,sy=j;\n\t\t\t\tif(ch=='X') zx=i,zy=j,X(i,j);\n\t\t\t}getchar();\n\t\t}\n\t\t//getchar\u8bfb\u5165\u66f4\u5feb\uff08\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tchar ch=mp[i][j];\n\t\t\t\tif(ch=='C') C(i,j,1);\n\t\t\t\tif(ch=='K') K(i,j,1);\n\t\t\t\tif(ch=='B') B(i,j,1);\n\t\t\t\tif(ch=='Q') {C(i,j,1),B(i,j,1);}\n\t\t\t\tif(ch=='P') P(i,j,1);\n\t\t\t}\n\t\t}\n\t\tif(ks[sx][sy]) cout<<-1<<endl;\n\t\t//\u5982\u679c\u5b83\u4e00\u5f00\u59cb\u5c31\u5728\u653b\u51fb\u8303\u56f4\uff0c\u5c31\u76f4\u63a5\u6b7b\u6389\n\t\telse bfs();\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1602586410,
        "uid": 237806,
        "name": "wcyares",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u4e2a\u5b66`DFS`\u5b66\u50bb\u4e86\uff0c\u5fd8\u4e86\u5982\u4f55\u5199`BFS`\u7684\u849f\u84bb\u7684\u8bb0\u641c\u9898\u89e3\u3002\n\n\u770b\u5230\u6700\u5c0f\u6b65\u6570\uff0c\u8003\u8651`IDDFS`\u3002\n\n\u68cb\u5b50\u7684\u653b\u51fb\u8303\u56f4\u53ef\u4ee5\u76f4\u63a5\u8986\u76d6\u5e76\u53e0\u52a0\uff0c\u5728\u5403\u6389\u68cb\u5b50\u540e\u66b4\u529b\u6d88\u9664\u8986\u76d6\u5373\u53ef\u3002\n\n\u76f4\u63a5\u8bb0\u5f55\u5269\u4f59`i`\u6b65\u65f6\u5728$(x,y)$\u80fd\u5426\u6740\u738b\u4ee5\u5b9e\u73b0\u8bb0\u641c\uff0c\u7a7a\u95f4\u5f00\u9500\u4e0d\u5927\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u4ee3\u7801\u5f88\u957f\uff0c\u8bf7\u914c\u60c5\u9605\u8bfb\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#define reg register\n#define MAXN 60\nusing namespace std;\n\nconst int dx[8]={1,1,2,2,-1,-1,-2,-2};\nconst int dy[8]={2,-2,1,-1,2,-2,1,-1};\nint ban[MAXN][MAXN],dp[MAXN][MAXN][505];//dp\u8bb0\u641c\uff0cban\u8bb0\u5f55\u8986\u76d6\u60c5\u51b5\nchar map[MAXN][MAXN];\nint n,x,y,ex,ey;\n\ninline bool inmap(char ch)\n{return(ch=='.'||ch=='O'||ch=='C'||ch=='K'||ch=='B'||ch=='Q'||ch=='X'||ch=='P');}\n\ninline bool out(int x,int y)//\u8d8a\u754c\n{return(x<1||x>n||y<1||y>n);}\n\ninline int trans(char ch)\n{\n\tif(ch=='C')\n\t\treturn(1);\n\tif(ch=='K')\n\t\treturn(4);\n\tif(ch=='X')\n\t\treturn(5);\n\tif(ch=='B')\n\t\treturn(2);\n\tif(ch=='Q')\n\t\treturn(3);\n\tif(ch=='P')\n\t\treturn(6);\n\treturn(7);\n}\n\ninline void cover(int type,int px,int py,int val)\n{\n\tif(type>6)\n\t\treturn;\n\tif(type==6)//\u5175\n\t{\n\t\tif(!out(px+1,py-1))\n\t\t\tban[px+1][py-1]+=val;\n\t\tif(!out(px+1,py+1))\n\t\t\tban[px+1][py+1]+=val;\n\t\treturn;\n\t}\n\tif(type==5)//\u738b\n\t{\n\t\tif(!out(px+1,py-1))\n\t\t\tban[px+1][py-1]+=val;\n\t\tif(!out(px+1,py+1))\n\t\t\tban[px+1][py+1]+=val;\n\t\tif(!out(px+1,py))\n\t\t\tban[px+1][py]+=val;\n\t\tif(!out(px-1,py+1))\n\t\t\tban[px-1][py+1]+=val;\n\t\tif(!out(px-1,py-1))\n\t\t\tban[px-1][py-1]+=val;\n\t\tif(!out(px-1,py+1))\n\t\t\tban[px-1][py]+=val;\n\t\tif(!out(px,py-1))\n\t\t\tban[px][py-1]+=val;\n\t\tif(!out(px,py+1))\n\t\t\tban[px][py+1]+=val;\n\t\treturn;\n\t}\n\tif(type==4)//\u9a6c\n\t{\n\t\tif(!out(px-1,py-2))\n\t\t\tban[px-1][py-2]+=val;\n\t\tif(!out(px-1,py+2))\n\t\t\tban[px-1][py+2]+=val;\n\t\tif(!out(px+1,py-2))\n\t\t\tban[px+1][py-2]+=val;\n\t\tif(!out(px+1,py+2))\n\t\t\tban[px+1][py+2]+=val;\n\t\tif(!out(px-2,py-1))\n\t\t\tban[px-2][py-1]+=val;\n\t\tif(!out(px-2,py+1))\n\t\t\tban[px-2][py+1]+=val;\n\t\tif(!out(px+2,py-1))\n\t\t\tban[px+2][py-1]+=val;\n\t\tif(!out(px+2,py+1))\n\t\t\tban[px+2][py+1]+=val;\n\t}\n\tfor(reg int i=1;i<=n;i++)//\u8f66\u3001\u8c61\u548c\u540e\uff0c\u66b4\u529b\u8986\u76d6\n\t{\n\t\tif(type&1)\n\t\t{\n\t\t\tif(!out(px-i,py))\n\t\t\t\tban[px-i][py]+=val;\n\t\t\tif(!out(px+i,py))\n\t\t\t\tban[px+i][py]+=val;\n\t\t\tif(!out(px,py-i))\n\t\t\t\tban[px][py-i]+=val;\n\t\t\tif(!out(px,py+i))\n\t\t\t\tban[px][py+i]+=val;\n\t\t}\n\t\tif(type&2)\n\t\t{\n\t\t\tif(!out(px-i,py-i))\n\t\t\t\tban[px-i][py-i]+=val;\n\t\t\tif(!out(px+i,py+i))\n\t\t\t\tban[px+i][py+i]+=val;\n\t\t\tif(!out(px+i,py-i))\n\t\t\t\tban[px+i][py-i]+=val;\n\t\t\tif(!out(px-i,py+i))\n\t\t\t\tban[px-i][py+i]+=val;\n\t\t}\n\t}\n\treturn;\n}\n\nbool dfs(int rest,int px,int py)\n{\n\tif(rest==0)\n\t\treturn(px==ex&&py==ey);\n\tif(dp[px][py][rest])\n\t\treturn(dp[px][py][rest]==2);\n\tbool res=false;\n\tfor(reg int i=0;i<8;i++)\n\t{\n\t\tint qx=px+dx[i],qy=py+dy[i];\n\t\tif(out(qx,qy)||(ban[qx][qy]&&(qx!=ex||qy!=ey)))\n\t\t\tcontinue;\n\t\tchar tmp=map[qx][qy];\n\t\tif(tmp!='.')\n\t\t\tmap[qx][qy]='.';\n\t\tcover(trans(tmp),qx,qy,-1);\n\t\tres|=dfs(rest-1,qx,qy);\n\t\tcover(trans(tmp),qx,qy,1);\n\t\tmap[qx][qy]=tmp;\n\t\tif(res)\n\t\t\treturn(dp[px][py][rest]=2,true);\n\t}\n\treturn(dp[px][py][rest]=res?2:1,res);\n}\n\nint main()\n{\n\twhile(scanf(\"%d\",&n)!=EOF)//\u591a\u7ec4\u6570\u636e\n\t{\n\t\tmemset(ban,0,sizeof(ban));\n\t\tmemset(dp,0,sizeof(dp));\n\t\tfor(reg int i=1,j=0;i<=n;i++)\n\t\t{\n\t\t\tchar ch=getchar();\n\t\t\twhile(!inmap(ch))\n\t\t\t\tch=getchar();\n\t\t\tmap[i][++j]=ch;\n\t\t\tif(ch=='O')\n\t\t\t\tx=i,y=j;\n\t\t\tif(ch=='X')\n\t\t\t\tex=i,ey=j;\n\t\t\tcover(trans(ch),i,j,1);//\u8986\u76d6\n\t\t\tif(j!=n)\n\t\t\t\t--i;\n\t\t\telse\n\t\t\t\tj=0;//\u7ed3\u675f\u672c\u884c\u8bfb\u5165\n\t\t}\n\t\tif(ban[x][y])\n\t\t{\n\t\t\tputs(\"-1\");\n\t\t\tcontinue;\n\t\t}\n\t\treg int res=1;\n\t\tfor(;res<=500;++res)//IDDFS\n\t\t{\n\t\t\tif(dfs(res,x,y))\n\t\t\t\tbreak;\n\t\t}\n\t\tprintf(\"%d\\n\",res==500?-1:res);\n\t}\n\treturn(0);\n}\n```",
        "postTime": 1573394211,
        "uid": 14854,
        "name": "\u672a\u89c1\u5807\u5f00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "### \u7eaf\u66b4\u529b\u6a21\u62df+$BFS$,\u4e0d\u9700\u8981\u72b6\u538b$!!!$\n\n### $34ms$,\u8dd1\u8fdb\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u9875$!!!$\n\n### \u5206\u6790:\u76f4\u63a5\u6839\u636e\u9898\u610f,\u628a\u6bcf\u79cd\u68cb\u5b50\u80fd\u591f\u653b\u51fb\u5230\u7684\u70b9\u66b4\u529b\u8986\u76d6,\u8bb0\u4e3a$a[i][j]$,\u6ce8\u610f$a[i][j]$\u662f\u53ef\u4ee5\u53e0\u52a0\u7684,\u521d\u59cb\u5316\u4e3a$0$.(\u6ce8\u610f\u90a3\u4e9b\u6240\u8c13\u78b0\u5230\u7b2c\u4e00\u4e2a\u68cb\u5b50\u5c31\u88ab\u963b\u6321\u7684\u653b\u51fb\u7c7b\u68cb\u5b50,\u5b83\u4eec\u80fd\u591f\u653b\u51fb\u5230\u963b\u6321\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u68cb\u5b50)\n\n### \u540c\u65f6,\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u4e86\u653b\u51fb\u7c7b\u68cb\u5b50\u4e0d\u8d85\u8fc7$16$\u4e2a,\u53ef\u4ee5\u5f00$16$\u4e2a$queue$\u6216\u8005$vector$\u5b58\u4e0b\u6bcf\u4e00\u4e2a\u653b\u51fb\u68cb\u5b50\u80fd\u591f\u653b\u51fb\u5230\u54ea\u4e9b\u70b9(\u65b9\u4fbf\u4e4b\u540e\u64a4\u9500\u8986\u76d6).\n\n### \u7136\u540e\u5c31\u53ef\u4ee5\u628a\u8d77\u70b9\u4e22\u5165\u961f\u5217\u8dd1$BFS$\u4e86,\u8d70\u5230\u7ec8\u70b9\u76f4\u63a5\u8f93\u51fa\u5373\u53ef.(\u8bb0\u5f97\u7279\u5224\u4e00\u4e0b\u8d77\u70b9\u5c31\u5728\u88ab\u653b\u51fb\u8303\u56f4\u5185\u7684\u60c5\u51b5.)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\nusing namespace std;\nconst int N=60;\nint n;char s[N][N];\nint a[N][N],visit[N][N],dis[N][N],used[N][N];\nint dx[8]={-2,-1,-2,-1,1,1,2,2},\n\tdy[8]={-1,-2,1,2,-2,2,-1,1};\nint main(){\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tmemset(a,0,sizeof(a));memset(dis,0x3f,sizeof(dis));\n\t\tmemset(visit,0,sizeof(visit));memset(used,0,sizeof(used));\n\t\tqueue<pair<int,int> >q[20],Q;//\u591a\u7ec4\u6570\u636e\u521d\u59cb\u5316\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tfor(int j=1;j<=n;++j)cin>>s[i][j];\n\t\tint tot=0;//\u8bb0\u5f55\u6709\u591a\u5c11\u4e2a\u653b\u51fb\u68cb\u5b50\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tfor(int j=1;j<=n;++j){\n\t\t\t\tif(s[i][j]=='C'){//\u5224\u65ad\u662f\u54ea\u4e00\u79cd\u68cb\u5b50,\u66b4\u529b\u8986\u76d6\u80fd\u591f\u653b\u51fb\u5230\u7684\u70b9,\u6ce8\u610f\u9632\u6b62\u4e0b\u6807\u8d8a\u754c\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tfor(int k=i-1;k>=1;--k){\n\t\t\t\t\t\t++a[k][j];q[visit[i][j]].push(pair<int,int>(k,j));\n\t\t\t\t\t\tif(s[k][j]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=i+1;k<=n;++k){\n\t\t\t\t\t\t++a[k][j];q[visit[i][j]].push(pair<int,int>(k,j));\n\t\t\t\t\t\tif(s[k][j]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=j-1;k>=1;--k){\n\t\t\t\t\t\t++a[i][k];q[visit[i][j]].push(pair<int,int>(i,k));\n\t\t\t\t\t\tif(s[i][k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=j+1;k<=n;++k){\n\t\t\t\t\t\t++a[i][k];q[visit[i][j]].push(pair<int,int>(i,k));\n\t\t\t\t\t\tif(s[i][k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='K'){\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tif(i-2>=1&&j-1>=1)++a[i-2][j-1],q[visit[i][j]].push(pair<int,int>(i-2,j-1));\n\t\t\t\t\tif(i-1>=1&&j-2>=1)++a[i-1][j-2],q[visit[i][j]].push(pair<int,int>(i-1,j-2));\n\t\t\t\t\tif(i-2>=1&&j+1<=n)++a[i-2][j+1],q[visit[i][j]].push(pair<int,int>(i-2,j+1));\n\t\t\t\t\tif(i-1>=1&&j+2<=n)++a[i-1][j+2],q[visit[i][j]].push(pair<int,int>(i-1,j+2));\n\t\t\t\t\tif(i+1<=n&&j-2>=1)++a[i+1][j-2],q[visit[i][j]].push(pair<int,int>(i+1,j-2));\n\t\t\t\t\tif(i+2<=n&&j-1>=1)++a[i+2][j-1],q[visit[i][j]].push(pair<int,int>(i+2,j-1));\n\t\t\t\t\tif(i+1<=n&&j+2<=n)++a[i+1][j+2],q[visit[i][j]].push(pair<int,int>(i+1,j+2));\n\t\t\t\t\tif(i+2<=n&&j+1<=n)++a[i+2][j+1],q[visit[i][j]].push(pair<int,int>(i+2,j+1));\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='B'){\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i-k<1||j-k<1)break;\n\t\t\t\t\t\t++a[i-k][j-k];q[visit[i][j]].push(pair<int,int>(i-k,j-k));\n\t\t\t\t\t\tif(s[i-k][j-k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i+k>n||j+k>n)break;\n\t\t\t\t\t\t++a[i+k][j+k];q[visit[i][j]].push(pair<int,int>(i+k,j+k));\n\t\t\t\t\t\tif(s[i+k][j+k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i+k>n||j-k<1)break;\n\t\t\t\t\t\tif(s[i+k][j-k]!='.')break;\n\t\t\t\t\t\t++a[i+k][j-k];q[visit[i][j]].push(pair<int,int>(i+k,j-k));\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i-k<1||j+k>n)break;\n\t\t\t\t\t\t++a[i-k][j+k];q[visit[i][j]].push(pair<int,int>(i-k,j+k));\n\t\t\t\t\t\tif(s[i-k][j+k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='Q'){\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tfor(int k=i-1;k>=1;--k){\n\t\t\t\t\t\t++a[k][j];q[visit[i][j]].push(pair<int,int>(k,j));\n\t\t\t\t\t\tif(s[k][j]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=i+1;k<=n;++k){\n\t\t\t\t\t\t++a[k][j];q[visit[i][j]].push(pair<int,int>(k,j));\n\t\t\t\t\t\tif(s[k][j]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=j-1;k>=1;--k){\n\t\t\t\t\t\t++a[i][k];q[visit[i][j]].push(pair<int,int>(i,k));\n\t\t\t\t\t\tif(s[i][k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=j+1;k<=n;++k){\n\t\t\t\t\t\t++a[i][k];q[visit[i][j]].push(pair<int,int>(i,k));\n\t\t\t\t\t\tif(s[i][k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i-k<1||j-k<1)break;\n\t\t\t\t\t\t++a[i-k][j-k];q[visit[i][j]].push(pair<int,int>(i-k,j-k));\n\t\t\t\t\t\tif(s[i-k][j-k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i+k>n||j+k>n)break;\n\t\t\t\t\t\t++a[i+k][j+k];q[visit[i][j]].push(pair<int,int>(i+k,j+k));\n\t\t\t\t\t\tif(s[i+k][j+k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i+k>n||j-k<1)break;\n\t\t\t\t\t\t++a[i+k][j-k];q[visit[i][j]].push(pair<int,int>(i+k,j-k));\n\t\t\t\t\t\tif(s[i+k][j-k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k=1;k<=n;++k){\n\t\t\t\t\t\tif(i-k<1||j+k>n)break;\n\t\t\t\t\t\t//if(s[i-k][j+k]!='.')break;\n\t\t\t\t\t\t++a[i-k][j+k];q[visit[i][j]].push(pair<int,int>(i-k,j+k));\n\t\t\t\t\t\tif(s[i-k][j+k]!='.')break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='X'){\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tif(i-1>=1&&j-1>=1)++a[i-1][j-1],q[visit[i][j]].push(pair<int,int>(i-1,j-1));\n\t\t\t\t\tif(i-1>=1)++a[i-1][j],q[visit[i][j]].push(pair<int,int>(i-1,j));\n\t\t\t\t\tif(i-1>=1&&j+1<=n)++a[i-1][j+1],q[visit[i][j]].push(pair<int,int>(i-1,j+1));\n\t\t\t\t\tif(j-1>=1)++a[i][j-1],q[visit[i][j]].push(pair<int,int>(i,j-1));\n\t\t\t\t\tif(j+1<=n)++a[i][j+1],q[visit[i][j]].push(pair<int,int>(i,j+1));\n\t\t\t\t\tif(i+1<=n&&j-1>=1)++a[i+1][j-1],q[visit[i][j]].push(pair<int,int>(i+1,j-1));\n\t\t\t\t\tif(i+1<=n)++a[i+1][j],q[visit[i][j]].push(pair<int,int>(i+1,j));\n\t\t\t\t\tif(i+1<=n&&j+1<=n)++a[i+1][j+1],q[visit[i][j]].push(pair<int,int>(i+1,j+1));\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='P'){\n\t\t\t\t\tvisit[i][j]=++tot;\n\t\t\t\t\tif(i+1<=n&&j-1>=1)++a[i+1][j-1],q[visit[i][j]].push(pair<int,int>(i+1,j-1));\n\t\t\t\t\tif(i+1<=n&&j+1<=n)++a[i+1][j+1],q[visit[i][j]].push(pair<int,int>(i+1,j+1));\n\t\t\t\t}\n\t\t\t\tif(s[i][j]=='O'){\n\t\t\t\t\tQ.push(pair<int,int>(i,j));dis[i][j]=0;used[i][j]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint bj=0;\n\t\twhile(Q.size()){\n\t\t\tint x=Q.front().first,y=Q.front().second;Q.pop();\n\t\t\tif(a[x][y])break;//\u7279\u5224\u8d77\u70b9\u5c31\u5728\u88ab\u653b\u51fb\u8303\u56f4\u5185\u7684\u60c5\u51b5\n\t\t\tfor(int i=0;i<8;++i){\n\t\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\t\tif(xx<1||xx>n||yy<1||yy>n)continue;//\u4e0d\u80fd\u8d85\u51fa\u8303\u56f4\n\t\t\t\tif(s[xx][yy]=='X'){//\u8d70\u5230\u7ec8\u70b9\u76f4\u63a5\u8f93\u51fa\n\t\t\t\t\tprintf(\"%d\\n\",dis[x][y]+1);\n\t\t\t\t\tbj=1;break;\n\t\t\t\t}\n\t\t\t\tif(a[xx][yy]||used[xx][yy])continue;//\u8be5\u70b9\u4e0d\u5728\u88ab\u653b\u51fb\u8303\u56f4\u5185\u800c\u4e14\u4e4b\u524d\u6ca1\u8d70\u8fc7\n                used[xx][yy]=1;\n\t\t\t\tdis[xx][yy]=dis[x][y]+1;Q.push(pair<int,int>(xx,yy));//\u66f4\u65b0\u961f\u5217\n\t\t\t\tif(visit[xx][yy]){//\u5982\u679c\u8be5\u70b9\u662f\u4e2a\u653b\u51fb\u68cb\u5b50,\u64a4\u9500\u4e4b\u524d\u7684\u8986\u76d6\n\t\t\t\t\twhile(q[visit[xx][yy]].size()){\n\t\t\t\t\t\t--a[q[visit[xx][yy]].front().first][q[visit[xx][yy]].front().second];\n\t\t\t\t\t\tq[visit[xx][yy]].pop();\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bj)break;\n\t\t}\n\t\tif(!bj)puts(\"-1\");\n\t}\n    return 0;\n}\n\n```",
        "postTime": 1571922310,
        "uid": 112164,
        "name": "PPXppx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u4f20\u9001\u95e8\n\n\u8fd9\u9898\u771f\u7684\u8d39\u52b2\uff01\n\n\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u6765\u8868\u793a\u573a\u4e0a\u7684\u5269\u4e0b\u7684\u9ed1\u68cb\u5b50\u6709\u54ea\u4e9b\u3002\n\n\u7531\u4e8e\u9ed1\u9a91\u58eb\u6211\u4eec\u5403\u4e0d\u6389\uff0c\u56fd\u738b\u5403\u4e86\u5c31GG\u3002\n\n\u6240\u4ee5\u6700\u591a\u7684\u72b6\u6001\u662f\u67092^13\u4e2a\u3002\n\n\u7528s\u6765\u8868\u793a\u72b6\u6001\n\nmp[s][x][y]\u6765\u8868\u793as\u72b6\u6001\u4e0bx\uff0cy\u662f\u5426\u88ab\u653b\u51fb\u5230\u4e86\n\nvis[s][x][y]\u6765\u8868\u793as\u72b6\u6001\u4e0bx\uff0cy\u662f\u5426\u8d70\u8fc7\u4e86\u3002\n\n\u628a\u6240\u6709\u7684mp[s][x][y]\u9884\u5904\u7406\u51fa\u6765\uff08\u8981\u4e0d\u4f60\u5403\u4e86\u68cb\u5b50\u518d\u8fd8\u539f\u592a\u9ebb\u70e6\u4e86\u554a\uff09\n\n\u7136\u540e\u7528BFS\u8f6c\u79fb\u5c31\u884c\u5566\uff01\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int maxm=60;\nstruct node{\n    int x,y;\n};\nnode g[maxm],yx[maxm];\nstruct Node{\n    int s,x,y,step;\n};\nint n,map[maxm][maxm],b[maxm][maxm],cnt,tot,ans;\nbool vis[1<<14][maxm][maxm],mp[1<<14][maxm][maxm];\nchar s[maxm];\nint gx,gy,qx,qy;\nvoid hqs(int s,int x,int y)\n{\n    mp[s][x-1][y+2]=mp[s][x+1][y+2]=mp[s][x+2][y-1]=mp[s][x+2][y+1]=1;\n    if(x-2>0) mp[s][x-2][y-1]=mp[s][x-2][y+1]=1;\n    if(y-2>0) mp[s][x-1][y-2]=mp[s][x+1][y-2]=1;\n}\nvoid king(int s,int x,int y)\n{\n    mp[s][x-1][y-1]=mp[s][x-1][y]=mp[s][x-1][y+1]=1;\n    mp[s][x][y-1]=mp[s][x][y+1]=1;\n    mp[s][x+1][y-1]=mp[s][x+1][y]=mp[s][x+1][y+1]=1;\n}\nbool ok(int s,int x,int y)//\u5f53\u524d\u7684\u4f4d\u7f6e\u53ef\u4e0d\u53ef\u884c\n{\n    if(x<1||x>n||y<1||y>n) return 0;\n    if(map[x][y]<=1) return 1;\n    if(map[x][y]==2||map[x][y]==7) return 0;\n    if(s&(1<<b[x][y]-1)) return 0;\n}\nvoid cb(int s,int x,int y)\n{\n    for(int i=x-1;i>=1;i--)\n    {\n        mp[s][i][y]=1;\n        if(!ok(s,i,y)) break;\n    }\n    for(int i=x+1;i<=n;i--)\n    {\n        mp[s][i][y]=1;\n        if(!ok(s,i,y)) break;\n    }\n    for(int i=y-1;i>=1;i--)\n    {\n        mp[s][x][i]=1;\n        if(!ok(s,x,i)) break;\n    }\n    for(int i=y+1;i<=n;i--)\n    {\n        mp[s][x][i]=1;\n        if(!ok(s,x,i)) break;\n    }\n}\nvoid zj(int s,int x,int y)\n{\n    for(int i=1;i<min(x,y);i++)       if(ok(s,x-i,y-i)) mp[s][x-i][y-i]=1;else{mp[s][x-i][y-i]=1;break;}\n    for(int i=1;i<=min(n-x,n-y);i++)  if(ok(s,x+i,y+i)) mp[s][x+i][y+i]=1;else{mp[s][x+i][y+i]=1;break;}\n    for(int i=1;i<=min(x,n-y);i++)    if(ok(s,x-i,y+i)) mp[s][x-i][y+i]=1;else{mp[s][x-i][y+i]=1;break;}\n    for(int i=1;i<=min(n-x,y);i++)    if(ok(s,x+i,y-i)) mp[s][x+i][y-i]=1;else{mp[s][x+i][y-i]=1;break;}\n}\nvoid wh(int s,int x,int y)\n{\n    zj(s,x,y);\n    cb(s,x,y);\n}\nvoid sb(int s,int x,int y)\n{\n    mp[s][x+1][y-1]=mp[s][x+1][y+1]=1;\n}\nqueue <Node> dl;\nvoid tz(int s,int x,int y,int step)\n{\n    if(x<1||x>n||y<1||y>n) return;\n    if(mp[s][x][y]||vis[s][x][y]) return;\n    vis[s][x][y]=1;\n    if(map[x][y]==2)\n    {\n        ans=step;\n        return;\n    }\n    if(map[x][y]>=3&&map[x][y]<=6)\n     if(s&(1<<(b[x][y]-1)))\n       s^=(1<<(b[x][y]-1));//\u5403\u4e86\n    vis[s][x][y]=1;\n    dl.push((Node){s,x,y,step});\n}\nvoid get_ans()\n{\n    while(!dl.empty())\n     dl.pop();\n    dl.push((Node){(1<<tot)-1,qx,qy,0});\n    vis[(1<<tot)-1][qx][qy]=1;\n    while(!dl.empty())\n    {\n        Node d=dl.front();\n        dl.pop();\n        tz(d.s,d.x-2,d.y-1,d.step+1);tz(d.s,d.x-2,d.y+1,d.step+1);\n        tz(d.s,d.x-1,d.y-2,d.step+1);tz(d.s,d.x-1,d.y+2,d.step+1);\n        tz(d.s,d.x+1,d.y-2,d.step+1);tz(d.s,d.x+1,d.y+2,d.step+1);\n        tz(d.s,d.x+2,d.y-1,d.step+1);tz(d.s,d.x+2,d.y+1,d.step+1);\n        if(ans) break;\n    }\n    if(ans) printf(\"%d\\n\",ans);\n    else printf(\"-1\"); \n}\nint main()\n{\n    while(scanf(\"%d\",&n)==1)\n    {\n        memset(map,0,sizeof(map));\n        memset(vis,0,sizeof(vis));\n        memset(b,0,sizeof(b));\n        memset(mp,0,sizeof(mp));\n        cnt=0,tot=0;\n        ans=0;\n        for(int i=1;i<=n;i++)\n        {\n            scanf(\"%s\",(s+1));\n            for(int j=1;j<=n;j++)\n            {\n                if(s[j]=='K') cnt++,g[cnt].x=i,g[cnt].y=j,map[i][j]=7;//\u9ed1\u9a91\u58eb \n                if(s[j]=='X') cnt++,g[cnt].x=i,g[cnt].y=j,map[i][j]=2,gx=i,gy=j;//\u56fd\u738b\n                if(s[j]=='O') qx=i,qy=j;//\u767d\u9a91\u58eb\n                if(s[j]=='C') yx[tot].x=i,yx[tot].y=j,map[i][j]=3,b[i][j]=tot++;//\u57ce\u5821\n                if(s[j]=='B') yx[tot].x=i,yx[tot].y=j,map[i][j]=4,b[i][j]=tot++;//\u4e3b\u6559\n                if(s[j]=='Q') yx[tot].x=i,yx[tot].y=j,map[i][j]=5,b[i][j]=tot++;//\u738b\u540e\n                if(s[j]=='P') yx[tot].x=i,yx[tot].y=j,map[i][j]=6,b[i][j]=tot++;//\u67ff\u997c\n            }\n        }\n        for(int s=0;s<(1<<tot);s++)\n         {\n            for(int i=1;i<=cnt;i++)\n            if(map[g[i].x][g[i].y]==7)\n            hqs(s,g[i].x,g[i].y);\n            else\n            king(s,g[i].x,g[i].y); \n            for(int i=0;i<tot;i++)\n            if((1<<i)&s)\n            {\n                int x=yx[i].x;\n                int y=yx[i].y;\n                if(map[x][y]==3) cb(s,x,y);\n                if(map[x][y]==4) zj(s,x,y);\n                if(map[x][y]==5) wh(s,x,y);\n                if(map[x][y]==6) sb(s,x,y);\n            }\n            mp[s][gx][gy]=0;\n         }\n        if(mp[(1<<tot)-1][qx][qy])\n         printf(\"-1\\n\");//\u6211\u65b9\u76f4\u63a5GG\n        else\n         get_ans();\n    }\n}\n```",
        "postTime": 1508060062,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u6253\u4e2a\u6211\u535a\u5ba2\uff08\u8fd9\u4e2a\u9898\u89e3\uff09\u7684\u5e7f\u544a\uff1ahttps://renjikai.com/luogu-p3930/\n\n\u672c\u6765\u6ca1\u60f3\u7740\u8fd9\u9898\u80fd\u5f97\u5206\uff0c\u7ed3\u679c\u8fd9\u9898\u6708\u8d5b\u65f6\u7adf\u713680\u5206\uff0c\u540e\u6765\u51fa\u9898\u4eba\u8bf4\u6709\u4e24\u4e2a\u70b9\u9519\u4e86\uff0c\u91cd\u6d4b\u5c31100\u4e86\u3002\u3002\u3002/\u6342\u8138\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<queue>\n#include<map>\n#include<list>\n#include<cstring>\n#include<cassert>\n#include<cmath>\nusing namespace std;\nint n;\nchar arr[60][60]; //\u5b58\u653e\u68cb\u5b50\nbool attack[2][60][60]; //\u67d0\u70b9\u662f\u5426\u53ef\u4ee5\u88ab\u653b\u51fb\uff08\u7b2c\u4e00\u7ef4\u6ca1\u6709\u7528\u5904\uff0c\u53ea\u7528\u4e86\u7b2c\u4e00\u7ef4\u76841\uff09\nint dp[60][60];\nint O_x, O_y, X_x_pos, X_y_pos;\nint K_x[8] = {1,2,2,1,-1,-2,-2,-1};\nint K_y[8] = {2,1,-1,-2,-2,-1,1,2};\nint X_x[8] = {-1,0,1,-1,1,-1,0,1};\nint X_y[8] = {-1,-1,-1,0,0,1,1,1};\ninline void render(int x, int y, int no){ //\u9488\u5bf9\u5750\u6807\u4e3a(x,y)\u7684\u68cb\u5b50\u5728attack\u6570\u7ec4\u4e2d\u7ed8\u5236\u51fa\u653b\u51fb\u8303\u56f4\n    switch (arr[x][y]){\n    case 'C'://\u57ce\u5821\n        for (int i = x + 1; i <= n; i++){\n            if (arr[i][y] == '.')attack[no][i][y] = true;\n            else {\n                attack[no][i][y] = true;\n                break;\n            }\n        }\n        for (int i = x - 1; i >= 1; i--){\n            if (arr[i][y] == '.')attack[no][i][y] = true;\n            else {\n                attack[no][i][y] = true;\n                break;\n            }\n        }\n        for (int i = y + 1; i <= n; i++){\n            if (arr[x][i] == '.')attack[no][x][i] = true;\n            else {\n                attack[no][x][i] = true;\n                break;\n            }\n        }\n        for (int i = y - 1; i >= 1; i--){\n            if (arr[x][i] == '.')attack[no][x][i] = true;\n            else {\n                attack[no][x][i] = true;\n                break;\n            }\n        }\n        break;\n    case 'K'://\u9a91\u58eb\n        for (int i = 0; i < 8; i++){\n            if (x + K_x[i]>0 && x + K_x[i] <= n&&y + K_y[i] > 0 && y + K_y[i] <= n){\n                attack[no][x + K_x[i]][y + K_y[i]] = true;\n            }\n        }\n        break;\n    case 'B'://\u4e3b\u6559\n        for (int i = 1; y - i > 0 && x + i <= n; i++){//\u5411\u53f3\u4e0a\u89d2\u79fb\u52a8\n            if (arr[x + i][y - i] == '.')attack[no][x + i][y - i] = true;\n            else {\n                attack[no][x + i][y - i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y + i <= n && x + i <= n; i++){//\u5411\u53f3\u4e0b\u89d2\u79fb\u52a8\n            if (arr[x + i][y + i] == '.')attack[no][x + i][y + i] = true;\n            else{\n                attack[no][x + i][y + i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y + i <= n && x - i > 0; i++){//\u5411\u5de6\u4e0b\u89d2\u79fb\u52a8\n            if (arr[x - i][y + i] == '.')attack[no][x - i][y + i] = true;\n            else{\n                attack[no][x - i][y + i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y - i > 0 && x - i > 0; i++){//\u5411\u5de6\u4e0a\u89d2\u79fb\u52a8\n            if (arr[x - i][y - i] == '.')attack[no][x - i][y - i] = true;\n            else{\n                attack[no][x - i][y - i] = true;\n                break;\n            }\n        }\n        break;\n    case 'Q'://\u7687\u540e\n        //\u57ce\u5821\n        for (int i = x + 1; i <= n; i++){\n            if (arr[i][y] == '.')attack[no][i][y] = true;\n            else {\n                attack[no][i][y] = true;\n                break;\n            }\n        }\n        for (int i = x - 1; i >= 1; i--){\n            if (arr[i][y] == '.')attack[no][i][y] = true;\n            else {\n                attack[no][i][y] = true;\n                break;\n            }\n        }\n        for (int i = y + 1; i <= n; i++){\n            if (arr[x][i] == '.')attack[no][x][i] = true;\n            else {\n                attack[no][x][i] = true;\n                break;\n            }\n        }\n        for (int i = y - 1; i >= 1; i--){\n            if (arr[x][i] == '.')attack[no][x][i] = true;\n            else {\n                attack[no][x][i] = true;\n                break;\n            }\n        }\n        //\u4e3b\u6559\n        for (int i = 1; y - i > 0 && x + i <= n; i++){//\u5411\u53f3\u4e0a\u89d2\u79fb\u52a8\n            if (arr[x + i][y - i] == '.')attack[no][x + i][y - i] = true;\n            else {\n                attack[no][x + i][y - i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y + i <= n && x + i <= n; i++){//\u5411\u53f3\u4e0b\u89d2\u79fb\u52a8\n            if (arr[x + i][y + i] == '.')attack[no][x + i][y + i] = true;\n            else{\n                attack[no][x + i][y + i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y + i <= n && x - i > 0; i++){//\u5411\u5de6\u4e0b\u89d2\u79fb\u52a8\n            if (arr[x - i][y + i] == '.')attack[no][x - i][y + i] = true;\n            else{\n                attack[no][x - i][y + i] = true;\n                break;\n            }\n        }\n        for (int i = 1; y - i > 0 && x - i > 0; i++){//\u5411\u5de6\u4e0a\u89d2\u79fb\u52a8\n            if (arr[x - i][y - i] == '.')attack[no][x - i][y - i] = true;\n            else{\n                attack[no][x - i][y - i] = true;\n                break;\n            }\n        }\n        break;\n    case 'X'://\u56fd\u738b\n        for (int i = 0; i < 8; i++){\n            if (x + X_x[i]>0 && x + X_x[i] <= n&&y + X_y[i] > 0 && y + X_y[i] <= n){\n                attack[no][x + X_x[i]][y + X_y[i]] = true;\n            }\n        }\n        break;\n    case 'P'://\u666e\u901a\u58eb\u5175\n        if (x - 1 > 0 && x - 1 <= n&&y + 1 > 0 && y + 1 <= n){\n            attack[no][x - 1][y + 1] = true;\n        }\n        if (x + 1 > 0 && x + 1 <= n&&y + 1 > 0 && y + 1 <= n){\n            attack[no][x + 1][y + 1] = true;\n        }\n        break;\n    }\n}\ninline void render_all(){//\u5c06\u5730\u56fe\u4e0a\u7684\u6240\u6709\u70b9\u5168\u90e8\u91cd\u7ed8\n    memset(attack, false, sizeof(attack));\n    for (int i = 1; i <= n; i++){\n        for (int j = 1; j <= n; j++){\n            switch (arr[i][j]){\n            case 'O'://\u6807\u8bb0\u597d\u767d\u9a91\u58eb\u7684\u8d77\u59cb\u70b9\n                O_x = i;\n                O_y = j;\n                break;\n            case '.':\n            case '\\0':\n                break;\n            case 'X'://\u9ed1\u56fd\u738b\u7684\u7ec8\u6b62\u70b9\n                X_x_pos = i;\n                X_y_pos = j;\n            default:\n                render(i, j, 1);\n            }\n        }\n    }\n}\nvoid dfs(int x, int y,int step){//\u8bb0\u5fc6\u5316dfs\n    if (x <= 0 || y <= 0 || x > n || y > n)return; //\u8d85\u51fa\u8fb9\u754c\u7684\u60c5\u51b5\n    if (arr[x][y] == 'X'){ //dfs\u5230\u4e86\u9ed1\u56fd\u738b\n        if (step < dp[x][y])dp[x][y] = step;\n        return;\n    }\n    if (attack[1][x][y])return; //\u521a\u8df3\u5230\u5750\u6807x,y\u5c31\u88ab\u653b\u51fb\u4e86\n    if (step>=dp[x][y])return; //\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u91cd\u70b9\uff0c\u4e5f\u662f\u4e3a\u4ec0\u4e48DFS\u4e0d\u4f1a\u8d85\u65f6\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u6211\u5199\u7684\u8fd9\u4e2aDFS\u8bb0\u5fc6\u5316\u4e0d\u6ee1\u8db3\u65e0\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ea\u8981\u8d70\u5230\u4e00\u70b9\u540e\uff0c\u5f53\u524d\u6b65\u6570\u5927\u4e8e\u4e4b\u524d\u8d70\u5230\u8fc7\u8fd9\u91cc\u7684\u6700\u5c0f\u6b65\u6570\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\n    dp[x][y] = step;\n    if (arr[x][y] != '.'){ //\u8be5\u683c\u5b50\u4e0a\u6709\u68cb\u5b50\n        char ch = arr[x][y];\n        arr[x][y] = '.';\n        render_all(); //\u628a\u68cb\u5b50\u5403\u6389\u4ee5\u540e\u91cd\u65b0\u7ed8\u5236\u653b\u51fb\u60c5\u51b5\n        for (int i = 0; i < 8; i++){\n            if (x + K_x[i]>0 && x + K_x[i] <= n&&y + K_y[i] > 0 && y + K_y[i] <= n){\n                dfs(x + K_x[i], y + K_y[i], step + 1);\n            }\n        }\n        arr[x][y] = ch; //\u56de\u6eaf\n        render_all();\n    }\n    else{ //\u8be5\u683c\u5b50\u4e0a\u65e0\u68cb\u5b50\n        for (int i = 0; i < 8; i++){\n            if (x + K_x[i]>0 && x + K_x[i] <= n&&y + K_y[i] > 0 && y + K_y[i] <= n){\n                dfs(x + K_x[i], y + K_y[i], step + 1);\n            }\n        }\n    }\n}\nint main(){\n    ios::sync_with_stdio(false); //\u52a0\u5febcin\u901f\u5ea6\n    while (cin >> n){ //\u591a\u7ec4\u6570\u636e\n        memset(arr, 0, sizeof(arr));\n        memset(attack, false, sizeof(attack));\n        memset(dp, 0x7f, sizeof(dp));\n        for (int i = 1; i <= n; i++){\n            cin >> arr[i] + 1;\n        }\n        render_all(); //\u5148\u8fdb\u884c\u6574\u5e45\u5730\u56fe\u653b\u51fb\u60c5\u51b5\u7684\u7ed8\u5236\n        dfs(O_x, O_y, 0);\n        if (dp[X_x_pos][X_y_pos] == 0x7f7f7f7f){\n            cout << -1 << endl;\n        }\n        else{\n            cout << dp[X_x_pos][X_y_pos] << endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1507467941,
        "uid": 6135,
        "name": "bjrjk",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "# \u66b4\u529bBFS\n\n\u8fd9\u4e2a\u9898\u7684\u601d\u7ef4\u96be\u5ea6\u4e0d\u5927\uff0c**\u4f46\u662f\u5f88\u8003\u9a8c\u4ee3\u7801\u80fd\u529b**\n\n\u6211\u7684\u601d\u8def\u662f\u7528BFS\u8bb0\u5f55\u5230\uff08x\uff0cy\uff09\u7684\u6b65\u6570\u548c\u73b0\u5728\u68cb\u76d8\u7684\u72b6\u6001\uff08\u7528\u4e00\u4e2a1<<16\u4e8c\u8fdb\u5236\u8868\u793a\u68cb\u5b50\u73b0\u5728\u6b7b\u4e86\u6ca1\u6709\uff09\n\n\n\u5224\u65ad\u662f\u5426\u5230\u8fbe\u7684\u70b9\u5408\u6cd5\uff0c\u8fd9\u91cc\u91c7\u53d6\u66f4\u66b4\u529b\u7684\u601d\u60f3\uff0c\u5c31\u662f\u5224\u65ad\u5730\u56fe\u7684\u6240\u6709\u6ca1\u6b7b\u7684\u70b9\u80fd\u4e0d\u80fd\u5403\u6389\u5b83\uff0c\u4e00\u6b21\u5224\u65ad\u7684\u590d\u6742\u5ea6 O ( n\\*n+\u7384\u5b66 )\n\n\n\u5f00\u4e00\u4e2avis[60][60][1<<16]\u8bb0\u5f55bfs\u65f6\u8fd9\u4e2a\u70b9\u8d70\u8fc7\u6ca1\u6709\uff0c\u53cd\u6b63n\u5f88\u5c0f\uff0c\u6700\u591a16\u4e2a\u68cb\u5b50\uff0c\u968f\u4fbf\u4e71\u641e\u5c31\u884c\n\n\u8fd9\u6837bfs\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u4e3aO(n\\*n\\*(1<<16)\\*check), \u4f46\u662f\u80af\u5b9a\u4e0d\u4f1a\u628a\u6240\u6709\u72b6\u6001\u90fd\u641c\u4e00\u904d\u4e86\uff0c\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\uff0c\u65f6\u95f4\u7ed9\u4e863s\uff0c\u867d\u7136\u662f\u591a\u7ec4\u6570\u636e\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5A\u6389\u6b64\u9898\n\n**ps\uff1a50\u5206\u7684\u540c\u5b66\uff0c\u770b\u770b\u662f\u4e0d\u662f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u56de\u88ab\u5403\u6389**\n\n\u5982\u8fd9\u4e2a\u6570\u636e\uff0c\u53ef\u4ee5\u8bd5\u8bd5\n\n```cpp\n3\n.O.\n.P.\nX..\n```\n\u6211\u7684\u4ee3\u7801\u867d\u7136\u7279\u522b\u957f\uff0c250\u591a\u884c\uff0c\u4f46\u6709130+\u884c\u662f\u5224\u65ad\u68cb\u5b50\u7684\uff0c\u867d\u7136\u5f88\u957f\uff0c\u6709\u5173\u952e\u6ce8\u91ca\u7684\uff0c\u522b\u89c9\u5f97\u957f\u5c31\u4e0d\u770b\u4e86\uff0c\u5e94\u8be5\u662f\u6bd4\u8f83\u6e05\u6670\u7684\u5427\uff08\u96fe\n\n```cpp\n/*\n.\u8868\u793a\u7a7a 0\nO\u8868\u793a\u767d\u9a91\u58eb1\nC\u8868\u793a\u9ed1\u57ce\u58212\nK\u8868\u793a\u9ed1\u9a91\u58eb3\nB\u8868\u793a\u9ed1\u4e3b\u65594\nQ\u8868\u793a\u9ed2\u7687\u540e5\nX\u8868\u793a\u9ed1\u56fd\u738b6\nP\u8868\u793a\u9ed1\u58eb\u51757\n*/\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\nusing namespace std;\nchar s[60];int n;int sx,sy,ex,ey;\nint pre[60][60];bool CAN_GO[60][60][70000];\nint dx[]={0,1,1,-1,-1,2,2,-2,-2};\nint dy[]={0,2,-2,2,-2,1,-1,1,-1};\nint map[60][60];int Ctnum[60][60];int Ct=0;\nstruct node{\n    int x,y;\n    int type;\n    node(int _x=0,int _y=0,int _type=0){\n        x=_x;y=_y;type=_type;\n    }\n}chess[60];\nstruct Que{//BFS\u7528\u7684\u7ed3\u6784\u4f53 \n    int x,y,zt;int step;\n    Que(int _x,int _y,int _zt,int _s){\n        x=_x;y=_y;zt=_zt;step=_s;\n    }\n};\ninline int getint(char s){\n    if(s=='.') return 0;\n    if(s=='O') return 1;\n    if(s=='C') return 2;\n    if(s=='K') return 3;\n    if(s=='B') return 4;\n    if(s=='Q') return 5;\n    if(s=='X') return 6;\n    if(s=='P') return 7; \n    return 0;\n}\n#define mp make_pair\n\ninline bool no_GG(int zt,int num){//\u5224\u65adnum\u8fd9\u4e2a\u68cb\u5b50\u662f\u4e0d\u662f\u6ca1\u6b7b \n    if(zt&(1<<num)) return true;\n    else return false;    \n}\nnamespace CHESS{//\u4e0b\u9762\u7684\u662f\u5224\u65ad(x,y)\u4f4d\u5b50\u7684\u68cb\u5b50\u80fd\u4e0d\u80fd\u5403\u6389(a,b)\u4f4d\u5b50\u7684\u68cb\u5b50 \n    inline bool C(int x,int y,int a,int b,int zt){\n        if(a!=x&&b!=y) return true;\n        if(b==y){\n            for(int i=x-1;i>=1;i--){\n                if(i==a&&y==b) return false;\n                if(map[i][y]>1&&no_GG(zt,Ctnum[i][y])) break;    \n            } \n            for(int i=x+1;i<=n;i++){\n                if(i==a&&y==b) return false;\n                if(map[i][y]>1&&no_GG(zt,Ctnum[i][y])) break;\n            }    \n        }\n        else if(a==x){\n            for(int i=y-1;i>=1;i--){\n                if(a==x&&i==b) return false;\n                if(map[x][i]>1&&no_GG(zt,Ctnum[x][i])) break;\n            }\n            for(int i=y+1;i<=n;i++){    \n                if(a==x&&i==b) return false;\n                if(map[x][i]>1&&no_GG(zt,Ctnum[x][i])) break;\n            }\n        }\n        return true;\n    }\n    inline bool K(int x,int y,int a,int b,int zt){\n        for(int i=1;i<=8;i++){\n            if(a==x+dx[i]&&b==y+dy[i]) \n                return false;\n        }\n        return true;\n    }\n    inline bool B(int x,int y,int a,int b,int zt){\n        for(int i=x+1,j=y+1;i<=n&&j<=n;i++,j++){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x-1,j=y-1;i>=1&&j>=1;i--,j--){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x+1,j=y-1;i<=n&&j>=1;i++,j--){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x-1,j=y+1;i>=1&&j<=n;i--,j++){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        return true;\n        return true;\n    }\n    inline bool Q(int x,int y,int a,int b,int zt){\n        if(b==y){\n            for(int i=x-1;i>=1;i--){\n                if(i==a&&y==b) return false;\n                if(map[i][y]>1&&no_GG(zt,Ctnum[i][y])) break;    \n            } \n            for(int i=x+1;i<=n;i++){\n                if(i==a&&y==b) return false;\n                if(map[i][y]>1&&no_GG(zt,Ctnum[i][y])) break;\n            }    \n        }\n        else if(a==x){\n            for(int i=y-1;i>=1;i--){\n                if(a==x&&i==b) return false;\n                if(map[x][i]>1&&no_GG(zt,Ctnum[x][i])) break;\n            }\n            for(int i=y+1;i<=n;i++){    \n                if(a==x&&i==b) return false;\n                if(map[x][i]>1&&no_GG(zt,Ctnum[x][i])) break;\n            }\n        }\n        for(int i=x+1,j=y+1;i<=n&&j<=n;i++,j++){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x-1,j=y-1;i>=1&&j>=1;i--,j--){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x+1,j=y-1;i<=n&&j>=1;i++,j--){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        for(int i=x-1,j=y+1;i>=1&&j<=n;i--,j++){\n            if(i==a&&j==b) return false;\n            if(map[i][j]>1&&no_GG(zt,Ctnum[i][j])) break;\n        }\n        return true;\n    }\n    inline bool X(int x,int y,int a,int b,int zt){\n        for(int i=x-1;i<=x+1;i++)\n            for(int j=y-1;j<=y+1;j++)\n                if(i==a&&j==b) return false;\n        return true;\n    }\n    inline bool P(int x,int y,int a,int b,int zt){\n        if((a==x+1&&b==y+1)||(a==x+1&&b==y-1))\n            return false;\n        return true;\n    }\n    inline bool solve(int x,int y,int zt){//\u66b4\u529b\u5224\u65ad\u8fd9\u4e2a\u70b9\u5728\u8fd9\u4e2a\u72b6\u6001\u4e0b\u662f\u5426\u5408\u6cd5 \n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n        {\n            if(!Ctnum[i][j]) continue;\n            int num=Ctnum[i][j];\n            if(!no_GG(zt,num)) continue; \n            int type=chess[num].type;\n            if(type==2) \n                if(!C(i,j,x,y,zt)) return false;\n            if(type==3) \n                if(!K(i,j,x,y,zt)) return false;\n            if(type==4) {\n                if(!B(i,j,x,y,zt)) return false;\n            }\n            if(type==5) {\n                if(!Q(i,j,x,y,zt)) return false;\n            }\n            if(type==6) {\n                if(!X(i,j,x,y,zt)) return false;\n            }\n            if(type==7) {\n                if(!P(i,j,x,y,zt)) return false;\n             }\n        }\n        return true;\n    }\n}\nusing namespace CHESS;\nqueue<Que>q;\ninline bool in_map(int x,int y){//\u662f\u4e0d\u662f\u5728\u5730\u56fe\u5185 \n    return (x>=1&&x<=n&&y>=1&&y<=n);\n} \ninline void Work(){//\u4e3b\u4f53\u90e8\u5206 \n    int zt=(1<<(Ct+1))-1;\n    if(!solve(sx,sy,zt)) {printf(\"-1\\n\");return;}\n    Que fr = Que(sx,sy,zt,0);\n    q.push(fr);CAN_GO[sx][sy][zt]=1;\n//    printf(\"(%d,%d) %d\\n\",sx,sy,0);\n    while(!q.empty()){\n        Que fr=q.front();q.pop();\n        int x=fr.x;int y=fr.y;int zzt=fr.zt;int step=fr.step;\n    \n        for(int i=1;i<=8;i++){\n            int Dx=x+dx[i];int Dy=y+dy[i];\n            if(!in_map(Dx,Dy)) continue;\n        //    printf(\"(%d,%d) %d\\n\",Dx,Dy,step+1);\n            if(Ctnum[Dx][Dy]!=0){//\u8fd9\u4e2a\u4f4d\u5b50\u4ee5\u524d\u6709\u68cb\u5b50 \n                int num=Ctnum[Dx][Dy];\n                if(Dx==ex&&Dy==ey){//\u7ec8\u70b9 \n                            printf(\"%d\\n\",step+1);\n                            return;\n                        }\n                if(no_GG(zzt,num)){//\u6ca1\u6b7b \n                    int ppt=zzt^(1<<num);//\u628a\u8fd9\u4e2a\u5730\u65b9\u7684\u68cb\u5b50\u5403\u6389 \n                    if(solve(Dx,Dy,ppt)&&!CAN_GO[Dx][Dy][ppt]){        \n                        q.push(Que(Dx,Dy,ppt,step+1));\n                        CAN_GO[Dx][Dy][ppt]=1;\n                    }\n                }\n                else{//\u6b7b\u4e86 \n                    if(solve(Dx,Dy,zzt)&&!CAN_GO[Dx][Dy][zzt]){\n                    \n                        q.push(Que(Dx,Dy,zzt,step+1));\n                        CAN_GO[Dx][Dy][zzt]=1;\n                    }\n                }\n            }\n            else if(solve(Dx,Dy,zzt)&&!CAN_GO[Dx][Dy][zzt]){//\u6ca1\u6709\u5b50\uff0c\u540c\u6b7b\u4e86\u7684\u60c5\u51b5 \n                        q.push(Que(Dx,Dy,zzt,step+1));\n                        CAN_GO[Dx][Dy][zzt]=1;\n            }\n        } \n    }\n    printf(\"-1\\n\");return;\n}\ninline void Clear(){//\u591a\u7ec4\u6570\u636e \n    memset(CAN_GO,0,sizeof(CAN_GO));\n    Ct=0;\n    memset(Ctnum,0,sizeof(Ctnum));\n    ex=0;ey=0;sx=0;sy=0;\n    memset(map,0,sizeof(map));\n    while(q.size())q.pop();\n} \nint main(){\n    while(scanf(\"%d\",&n)!=EOF){\n        Clear();\n        for(int i=1;i<=n;i++)\n        {\n            scanf(\"%s\",s+1);\n            for(int j=1;j<=n;j++){ \n                map[i][j]=getint(s[j]);//\u8bfb\u5165\uff0c\u5982\u679c\u662f\u6709\u653b\u51fb\u6027\u7684\u68cb\u5b50\u5c31\u5b58\u4e0b\u6765 \n                if(map[i][j]==0) continue;\n                else if(map[i][j]==1){sx=i;sy=j;}\n                else if(map[i][j]==6){ex=i;ey=j;chess[++Ct]=node(i,j,map[i][j]);Ctnum[i][j]=Ct;}\n                else {chess[++Ct]=node(i,j,map[i][j]);Ctnum[i][j]=Ct;}\n            }\n        }    \n        Work();\n    }\n    return 0;\n}\n```",
        "postTime": 1507423918,
        "uid": 42857,
        "name": "Edgration",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    },
    {
        "content": "\u989d\u9898\u89e3\u8bf4\u662f\u72b6\u538bDP\uff0cstd\u7ed9\u7684\u662fhash+BFS...\n\n\u8fd9\u91cc\u7ed9\u51fa\u72b6\u538b+BFS\uff01\n\n\u662f\u76ee\u524d\u63d0\u4ea4\u7684\u91cc\u9762\u8dd1\u5f97\u6700\u5feb\u7684\u3002\uff08\u5f53\u7136\u4ece\u4e0b\u9762\u5c31\u80fd\u770b\u51fa\u81f3\u5c11\u6709\u4e24\u4e2a\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\uff0c\u61d2\u5f97\u5199\u4e86\u3002\uff09\n\n\n\u601d\u8def\u5927\u81f4\u5c31\u662f\u5bf916\u4e2a\u9ed1\u68cb\u662f\u5426\u88ab\u6253\u6389\u8fdb\u884c\u72b6\u6001\u538b\u7f29\uff0c\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u3002\n\n\u7136\u540e\u72b6\u6001\u6570\u7406\u8bba\u4e0a\u67092^16\\*n\\*n\uff0c\u4f46\u662f\u6839\u636e\u9898\u89e3\uff0c\u9ed1\u9a91\u58eb\u65e0\u6cd5\u88ab\u6253\u6389\uff08\u5982\u679c\u80fd\u6253\u6389\u9ed1\u9a91\u58eb\uff0c\u90a3\u4e48\u5728\u524d\u4e00\u4f4d\u7f6e\u5c31\u5df2\u7ecf\u88ab\u9ed1\u9a91\u58eb\u6253\u6389\uff09\uff0c\u6240\u4ee5\u72b6\u6001\u6570\u53d8\u6210\u4e862^14\\*n\\*n\uff0c\u8f6c\u79fb\u9700\u8981O(n)\u8fdb\u884ccheck\uff0c\u8fd9\u91cccheck\u9700\u8981\u7ed3\u5408\u72b6\u6001\u8fdb\u884c\u5224\u65ad\u3002\n\n\n\u4e00\u5f00\u59cb\u624b\u5199\u961f\u5217\u5f00\u5c0f\u4e86RE\u5f00\u5927\u4e86MLE\uff0c\u4e00\u6c14\u4e4b\u4e0b\u6539\u6210\u4e86STL\u7684queue\u3002\n\n\u7136\u540e\u5728\u53bb\u91cd\u7684\u65f6\u5019\uff0c\u7531\u4e8e2^16\u7684vis\u6570\u7ec4\u5f00\u4e0d\u4e0b\uff0c\u53c8\u4e0d\u60f3\u7f16\u53f7\u7684\u65f6\u5019\u628a\u9ed1\u9a91\u58eb\u7ed9\u5220\u6389\uff0c\u7528\u4e86C++11\u7684unordered\\_set(hash\u8868)\uff0c\u6539\u6210set\u4e5f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\n\u8fd8\u6709\u5c31\u662f\u8981\u6ce8\u610f\u4e00\u4e0b\u591a\u7ec4\u6570\u636e\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <unordered_set>\n#include <queue>\n\nusing namespace std;\n\nconst size_t    MaxN = 60;\nconst int    Dx[] = {1, 1, 2, 2, -1, -1, -2, -2}, Dy[] = {2, -2, 1, -1, 2, -2, 1, -1};\n\nstruct QueTp {\n    int    i, j, step, state;\n} ;\n\nqueue<QueTp>        Q;\nint            N, Si, Sj;\nchar            A[MaxN][MaxN];\nint            ID[MaxN][MaxN], Tot;\nunordered_set<int>    Vis[MaxN][MaxN];\n\nbool Check(const int& state, const int& i, const int& j)\n{\n    if(Vis[i][j].count(state))\n        return false;\n    for(int x = i + 1; x <= N; ++x)\n        if(A[x][j] != '.' && !((1 << ID[x][j]) & state)) {\n            if(A[x][j] == 'C' || A[x][j] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = i - 1; x > 0; --x)\n        if(A[x][j] != '.' && !((1 << ID[x][j]) & state)) {\n            if(A[x][j] == 'C' || A[x][j] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = j + 1; x <= N; ++x)\n        if(A[i][x] != '.' && !((1 << ID[i][x]) & state)) {\n            if(A[i][x] == 'C' || A[i][x] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = j - 1; x > 0; --x)\n        if(A[i][x] != '.' && !((1 << ID[i][x]) & state)) {\n            if(A[i][x] == 'C' || A[i][x] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = i - 1, y = j - 1; x > 0 && y > 0; --x, --y)\n        if(A[x][y] != '.' && !((1 << ID[x][y]) & state)) {\n            if(A[x][y] == 'B' || A[x][y] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = i - 1, y = j + 1; x > 0 && y <= N; --x, ++y)\n        if(A[x][y] != '.' && !((1 << ID[x][y]) & state)) {\n            if(A[x][y] == 'B' || A[x][y] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = i + 1, y = j - 1; x <= N && y > 0; ++x, --y)\n        if(A[x][y] != '.' && !((1 << ID[x][y]) & state)) {\n            if(A[x][y] == 'B' || A[x][y] == 'Q')\n                return false;\n            break;\n        }\n    for(int x = i + 1, y = j + 1; x <= N && y <= N; ++x, ++y)\n        if(A[x][y] != '.' && !((1 << ID[x][y]) & state)) {\n            if(A[x][y] == 'B' || A[x][y] == 'Q')\n                return false;\n            break;\n        }\n    for(int t = 0; t != 8; ++t) {\n        int    x = i + Dx[t], y = j + Dy[t];\n        if(x > 0 && y > 0 && x <= N && y <= N && A[x][y] == 'K')\n            return false;\n    }\n    if(i != 1 && ((j != N && A[i - 1][j + 1] == 'P' && !((1 << ID[i - 1][j + 1]) & state)) || (j != 1 && A[i - 1][j - 1] == 'P' && !((1 << ID[i - 1][j - 1]) & state))))\n        return false;\n    for(int x = i - 1; x <= i + 1; ++x) {\n        if(x < 1 || x > N)\n            continue;\n        for(int y = j - 1; y <= j + 1; ++y)\n            if(y > 0 && y <= N && A[x][y] == 'X')\n                return false;\n    }\n    return true;\n}\n```\n\n\n\n\n```cpp\nvoid Work()\n{\n    Q = queue<QueTp>(), Tot = 0;\n    memset(ID, -1, sizeof(ID));\n    memset(A, 0, sizeof(A));\n    for(int i = 1; i <= N; i++) {\n        scanf(\"%s\", A[i] + 1);\n        for(int j = 1; j <= N; j++) {\n            if(A[i][j] == 'O')\n                Si = i, Sj = j, A[i][j] = '.';\n            else if(A[i][j] == 'C' || A[i][j] == 'K' || A[i][j] == 'B' || A[i][j] == 'Q' || A[i][j] == 'X' || A[i][j] == 'P')\n                ID[i][j] = Tot++;\n            else\n                A[i][j] = '.';\n            Vis[i][j].clear();\n        }\n    }\n    if(!Check(0, Si, Sj)) {\n        puts(\"-1\");\n        return;\n    }\n    Vis[Si][Sj].insert(0);\n    Q.push((QueTp) {Si, Sj, 0, 0});\n    while(!Q.empty()) {\n        for(int i = 0; i != 8; ++i) {\n            int    x = Q.front().i + Dx[i], y = Q.front().j + Dy[i], state = Q.front().state;\n            if(x < 1 || x > N || y < 1 || y > N)\n                continue;\n            if(A[x][y] == 'X') {\n                printf(\"%d\\n\", Q.front().step + 1);\n                return;\n            }\n            if(A[x][y] != '.')\n                state |= 1 << ID[x][y];\n            if(Check(state, x, y))\n                Vis[x][y].insert(state), Q.push((QueTp) {x, y, Q.front().step + 1, state});\n        }\n        Q.pop();\n    }\n    puts(\"-1\");\n}\nint main()\n{\n    while(cin >> N)\n        Work();\n    return 0;\n}\n```\n```cpp",
        "postTime": 1507382602,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3930 \u3010SAC E#1 - \u4e00\u9053\u5927\u6c34\u9898 Knight\u3011"
    }
]