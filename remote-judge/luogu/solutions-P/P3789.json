[
    {
        "content": "### \u524d\u8a00\n\n\u597d\u5427\u5176\u5b9e\u8fd9\u9898\u65f6\u9650\u7565\u5927\uff0c\u6211\u66b4\u529b\u7ebf\u6027\u9012\u63a8\u90fd\u8dd1\u8fc7\u53bb\u4e86\u3002\n\n\u5927\u6982\u8bb2\u4e00\u4e0b\u505a\u6cd5\uff0c\u4ee3\u7801\u5c31\u53ea\u653e\u66b4\u529b\u7684\u4e86\u3002\n\n---\n### \u601d\u8def\n\n\u4f60\u8003\u8651\u4e00\u4e2a\u8003\u8651\uff1a\u5148\u641e\u9ed1\u767d\uff0c\u518d\u505a\u9ed1\u767d\u7070\u3002\n\n\u7528\u4e8c\u5143\u751f\u6210\u51fd\u6570\u8868\u793a\u72b6\u6001\u3002\n\n\u7b2c\u4e00\u7ef4\u8868\u793a\u5360\u4f4d\u6570\uff0c\u7b2c\u4e8c\u7ef4\u8868\u793a\u8d21\u732e\u3002\n\n\u5f88\u5bb9\u6613\u5199\u51fa\u5c31\u662f\uff1a\n\n$$\n1+2\\sum_kx^{k+1}y^{k}=1+{2x\\over1-xy}\n$$\n\n\u518d\u8003\u8651\u679a\u4e3e\u7070\u8272\u4e2a\u6570\uff0c\u5f97\u5230\uff1a\n\n$$\nf=\\sum_kx^k(1+{2x\\over1-xy})^{k+1}={1-x(y-2)\\over1-x(y+1)+x^2(y-2)}\n$$\n\n$[x^ny^0]f,[x^ny^1]f,[x^ny^2]f,\\dots,[x^ny^k]f$ \u5c31\u662f\u6211\u4eec\u7684\u7b54\u6848\u3002\n\n\u4e8e\u662f\u4ee5 $x$ \u4e3a\u4e3b\u5143\u6765\u641e\uff0c\u8003\u8651\u628a\u542b $y$ \u7684\u591a\u9879\u5f0f\u770b\u505a $x$ \u7684\u7cfb\u6570\uff0c\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u5bf9\u4e8e\u591a\u9879\u5f0f\u7684\u7ebf\u6027\u9012\u63a8\u5f62\u5f0f\u3002\n\n\u4f60\u5927\u529b\u5361\u5e38\uff0c\u8dd1\u8fc7\u53bb\u4e86\uff01\u590d\u6742\u5ea6 $O(k\\log k\\log n)$\u3002\n\n---\n\uff08\u4e0b\u9762\u90fd\u662f\u53e3\u80e1\uff0c\u6ca1\u6709\u5199\u4ee3\u7801\uff0c\u5e94\u8be5\u662f\u5bf9\u7684\uff09\n\n\u8003\u8651\u6b63\u89e3\u3002\n\n\u4e0a\u9762\u7684\u505a\u6cd5\u4f60\u653e\u8ba1\u7b97\u5668\u91cc\u5927\u529b\u8ba1\u7b97\u4e00\u4e0b\u524d $21$ \u9879\u53ef\u4ee5\u5f97\u5230[\u8fd9\u4e48\u4e2a\u9707\u64bc\u7684\u4e1c\u897f](https://www.luogu.com.cn/paste/o2sm79pd)\uff08\u672a\u6392\u7248\uff09\uff0c\u548c\u6837\u4f8b\u543b\u5408\uff0c\u6240\u4ee5\u601d\u8def\u5e94\u8be5\u6ca1\u9519\u3002\n\n\u8003\u8651\u4f7f\u7528**\u6709\u7406\u5206\u5f0f\u7684\u4e00\u822c\u5206\u89e3\u5b9a\u7406**\u505a\u3002\n\n\u5f85\u5b9a\u7cfb\u6570\uff0c\u8bbe\u4e00\u8bbe\uff0c\u53ef\u4ee5\u5206\u89e3\u6210\u8fd9\u79cd\u9b3c\u6837\uff1a\n\n\u8bb0 $\\Delta=y^2-2y+9$\n\n$$\nf={1\\over2\\sqrt\\Delta}\\Bigg({y-5-\\sqrt\\Delta\\over1-{y+1+\\sqrt\\Delta\\over2}x}+{y-5+\\sqrt\\Delta\\over1-{y+1-\\sqrt\\Delta\\over2}x}\\Bigg)\n$$\n\n\u4e8e\u662f $[x^n]f$ \u5c31\u662f\uff1a\n\n$${1\\over2\\sqrt\\Delta}\\Bigg(\\Big(y-5-\\sqrt\\Delta\\Big)\\Big({y+1+\\sqrt\\Delta\\over2}\\Big)^n+\\Big(y-5+\\sqrt\\Delta\\Big)\\Big({y+1-\\sqrt\\Delta\\over2}\\Big)^n\\Bigg)$$\n\n\u4f7f\u7528\u591a\u9879\u5f0f sqrt \u641e $\\sqrt\\Delta$\uff0c\u7528 ln/exp \u641e\u5feb\u901f\u5e42\u3002\n\n\u590d\u6742\u5ea6 $O(k\\log k)$\uff0c\uff08\u5e94\u8be5\uff09\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u3002\n\n\u7ec6\u8282\u6709\u70b9\u591a\uff0c\u53c8\u6ca1\u6709\u5199\u4ee3\u7801\uff0c\u5982\u679c\u7b97\u9519\u4e86\u8bf7\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u8c22\u8c22\uff01\n\n---\n### Code\n\n\u653e\u7b2c\u4e00\u79cd\u505a\u6cd5\u7684\u5361\u5e38\u7248\u672c\u3002\n\n```cpp\n// Problem: P3789 Azuki loves coloring\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3789\n// Memory Limit: 500 MB\n// Time Limit: 1000 ms\n\n#include <algorithm>\n#include <stdio.h>\n#include <vector>\ntypedef long long llt;\ntypedef unsigned uint;typedef unsigned long long ullt;\ntypedef bool bol;typedef char chr;typedef void voi;\ntypedef double dbl;\ntemplate<typename T>bol _max(T&a,T b){return(a<b)?a=b,true:false;}\ntemplate<typename T>bol _min(T&a,T b){return(b<a)?a=b,true:false;}\ntemplate<typename T>T power(T base,T index,T mod){return((index<=1)?(index?base:1):(power(base*base%mod,index>>1,mod)*power(base,index&1,mod)))%mod;}\ntemplate<typename T>T lowbit(T n){return n&-n;}\ntemplate<typename T>T gcd(T a,T b){return b?gcd(b,a%b):a;}\ntemplate<typename T>T lcm(T a,T b){return(a!=0||b!=0)?a/gcd(a,b)*b:(T)0;}\ntemplate<typename T>T exgcd(T a,T b,T&x,T&y){if(!b)return y=0,x=1,a;T ans=exgcd(b,a%b,y,x);y-=a/b*x;return ans;}\ntemplate<const ullt p=998244353>\nclass mod_ullt\n{\n    private:\n        ullt v;\n        ullt chg(ullt w){return(w<p)?w:w-p;}\n        mod_ullt _chg(ullt w){mod_ullt ans;ans.v=(w<p)?w:w-p;return ans;}\n        voi _print(ullt v){if(v>=10)_print(v/10);putchar('0'+v%10);}\n    public:\n        mod_ullt():v(0){}\n        mod_ullt(ullt v):v(v%p){}\n        bol empty(){return!v;}\n        ullt val(){return v;}\n        bol friend operator<(mod_ullt a,mod_ullt b){return a.v<b.v;}\n        bol friend operator>(mod_ullt a,mod_ullt b){return a.v>b.v;}\n        bol friend operator<=(mod_ullt a,mod_ullt b){return a.v<=b.v;}\n        bol friend operator>=(mod_ullt a,mod_ullt b){return a.v>=b.v;}\n        bol friend operator==(mod_ullt a,mod_ullt b){return a.v==b.v;}\n        bol friend operator!=(mod_ullt a,mod_ullt b){return a.v!=b.v;}\n        mod_ullt friend operator+(mod_ullt a,mod_ullt b){return a._chg(a.v+b.v);}\n        mod_ullt friend operator-(mod_ullt a,mod_ullt b){return a._chg(a.v+a.chg(p-b.v));}\n        mod_ullt friend operator*(mod_ullt a,mod_ullt b){return a.v*b.v;}\n        mod_ullt friend operator/(mod_ullt a,mod_ullt b){return b._power(p-2)*a.v;}\n        mod_ullt friend operator-(mod_ullt a){return a._chg(p-a.v);}\n        mod_ullt sqrt()\n        {\n            if(power(v,(p-1)>>1,p)!=1)return 0;\n            mod_ullt b=1;do b++;while(b._power((p-1)>>1)==1);\n            ullt t=p-1,s=0,k=1;while(!(t&1))s++,t>>=1;\n            mod_ullt x=_power((t+1)>>1),e=_power(t);\n            while(k<s)\n            {\n                if(e._power(1llu<<(s-k-1))!=1)x*=b._power((1llu<<(k-1))*t);\n                e=_power(p-2)*x*x,k++;\n            }\n            return _min(x,-x),x;\n        }\n        mod_ullt inv(){return _power(p-2);}\n        mod_ullt _power(ullt index){mod_ullt ans(1),w(v);while(index){if(index&1)ans*=w;w*=w,index>>=1;}return ans;}\n        voi read(){v=0;chr c;do c=getchar();while(c>'9'||c<'0');do v=(c-'0'+v*10)%p,c=getchar();while(c>='0'&&c<='9');v%=p;}\n        voi print(){_print(v);}\n        voi println(){_print(v),putchar('\\n');}\n        mod_ullt operator++(int){mod_ullt ans=*this;return v=chg(v+1),ans;}\n    public:\n        ullt&operator()(){return v;}\n        mod_ullt&operator+=(mod_ullt b){return*this=_chg(v+b.v);}\n        mod_ullt&operator-=(mod_ullt b){return*this=_chg(v+chg(p-b.v));}\n        mod_ullt&operator*=(mod_ullt b){return*this=v*b.v;}\n        mod_ullt&operator/=(mod_ullt b){return*this=b._power(p-2)*v;}\n        mod_ullt&operator++(){return v=chg(v+1),*this;}\n};\ntemplate<const ullt p=998244353,const ullt g=3>\nclass poly_NTT\n{\n    public:\n\t\ttypedef mod_ullt<p>modint;\n\tprivate:\n\t\tstd::vector<modint>V;\n\tpublic:\n\t\tclass NTT\n\t\t{\n\t\t\tprivate:\n\t\t\t\tstd::vector<uint>T;std::vector<modint>G;\n\t\t\tpublic:\n\t\t\t\tuint size(){return T.size();}\n\t\t\t\tvoi bzr(uint len)\n\t\t\t\t{\n\t\t\t\t\tuint n=1;while(n<len)n<<=1;\n                    modint w=power(g,(p-1)/n,p);T.resize(n),G.resize(n),T[0]=0,G[0]=1;\n\t\t\t\t\tfor(uint i=1;i<n;i++)T[i]=((i&1)?n|T[i>>1]:T[i>>1])>>1,G[i]=G[i-1]*w;\n\t\t\t\t}\n\t\t\t\tvoi ntt(std::vector<modint>&x,bol op)\n\t\t\t\t{\n\t\t\t\t\tuint n=size();if(x.size()<n)x.resize(n);\n                    for(uint i=0;i<n;i++)if(T[i]<i)std::swap(x[i],x[T[i]]);\n\t\t\t\t\tfor(uint i=1;i<n;i<<=1)for(uint j=0;j<n;j+=i<<1)for(uint k=0;k<i;k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodint t=x[i+j+k]*G[n/(2*i)*k];x[i+j+k]=x[j+k]-t,x[j+k]+=t;\n\t\t\t\t\t}\n\t\t\t\t\tif(op)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(uint i=1;i*2<n;i++)std::swap(x[i],x[n-i]);\n\t\t\t\t\t\tmodint t=modint(n).inv();for(uint i=0;i<n;i++)x[i]*=t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmodint Omega(uint n){return G[n];}\n\t\t};\n\tpublic:\n\t\tpoly_NTT(){}\n\t\tpoly_NTT(uint n){V.resize(n);}\n\t\tpoly_NTT(std::vector<modint>V):V(V){}\n\t\tvoi bzr(){V.clear();}\n\t\tvoi push(modint v){V.push_back(v);}\n\t\tvoi pop(){V.pop_back();}\n\t\tvoi cut_zero(){while(!V.empty()&&V.back().empty())V.pop_back();}\n\t\tvoi chg_siz(uint n){V.resize(n);}\n\t\tvoi chg_deg(uint n){V.resize(n+1);}\n\t\tbol empty(){return cut_zero(),V.empty();}\n\t\tuint size(){return V.size();}\n\t\tuint deg(){return V.size()-1;}\n\t\tmodint val(uint n){return(n<size())?V[n]:0;}\n        std::vector<modint>GET(){return V;}\n        poly_NTT reverse()\n        {\n            poly_NTT ans;for(uint i=size()-1;~i;i--)ans.push(V[i]);\n            return ans;\n        }\n\t\tfriend poly_NTT operator+(poly_NTT a,poly_NTT b)\n\t\t{\n\t\t\tif(a.size()<b.size())a.chg_siz(b.size());\n\t\t\tfor(uint i=0;i<b.size();i++)a[i]+=b[i];\n\t\t\ta.cut_zero();return a;\n\t\t}\n\t\tfriend poly_NTT operator+(poly_NTT a,modint v)\n\t\t{\n\t\t\tif(!a.size())a.chg_siz(1);\n\t\t\ta[0]+=v;return a;\n\t\t}\n\t\tfriend poly_NTT operator+(modint v,poly_NTT a)\n\t\t{\n\t\t\tif(!a.size())a.chg_siz(1);\n\t\t\ta[0]+=v;return a;\n\t\t}\n\t\tfriend poly_NTT operator-(poly_NTT a){return a*modint(p-1);}\n\t\tfriend poly_NTT operator-(poly_NTT a,poly_NTT b)\n\t\t{\n\t\t\tif(a.size()<b.size())a.chg_siz(b.size());\n\t\t\tfor(uint i=0;i<b.size();i++)a[i]-=b[i];\n\t\t\ta.cut_zero();return a;\n\t\t}\n\t\tfriend poly_NTT operator-(poly_NTT a,modint v)\n\t\t{\n\t\t\tif(!a.size())a.chg_siz(1);\n\t\t\ta[0]-=v;return a;\n\t\t}\n\t\tfriend poly_NTT operator-(modint v,poly_NTT a)\n\t\t{\n\t\t\tif(!a.size())a.chg_siz(1);\n\t\t\ta[0]-=v;return-a;\n\t\t}\n\t\tfriend poly_NTT operator*(poly_NTT a,poly_NTT b)\n\t\t{\n            std::vector<modint>&A=a.V,&B=b.V;NTT s;s.bzr(A.size()+B.size());\n            s.ntt(A,0),s.ntt(B,0);for(uint i=0;i<s.size();i++)A[i]*=B[i];\n            s.ntt(A,1),a.cut_zero();return a;\n\t\t}\n        friend poly_NTT operator*(poly_NTT A,modint b)\n        {\n            for(auto&s:A.V)s*=b;\n            return A;\n        }\n        friend poly_NTT operator*(modint b,poly_NTT A)\n        {\n            for(auto&s:A.V)s*=b;\n            return A;\n        }\n        friend poly_NTT operator<<(poly_NTT a,uint k)\n        {\n        \tpoly_NTT ans;ans.chg_siz(k);for(auto v:a.V)ans.push(v);\n        \treturn ans;\n        }\n        friend poly_NTT operator>>(poly_NTT a,uint k)\n        {\n        \tpoly_NTT ans;for(uint i=k;i<a.size();i++)ans.push(a[i]);\n        \treturn ans;\n        }\n        friend poly_NTT sub_mul(poly_NTT a,poly_NTT b)\n        {\n            uint len=(a=a.reverse()).size();\n            std::vector<modint>&A=a.V,&B=b.V;\n            NTT s;s.bzr(len+B.size());\n            s.ntt(A,0),s.ntt(B,0);for(uint i=0;i<s.size();i++)A[i]*=B[i];\n            s.ntt(A,1),a.chg_siz(len),a=a.reverse();return a;\n        }\n        poly_NTT inv(){return inv(size());}\n        poly_NTT inv(uint prec)\n        {\n            std::vector<modint>ans;NTT s;ans.push_back(V[0].inv());\n            for(uint tp=1;tp<=prec;tp<<=1)\n            {\n                std::vector<modint>f(tp<<1),t=ans;\n                for(uint i=0;i<(tp<<1);++i)f[i]=val(i);\n                s.bzr(tp<<1),s.ntt(f,0),s.ntt(t,0);\n                for(uint i=0;i<(tp<<1);++i)f[i]=1-f[i]*t[i];\n                s.ntt(f,1);\n                for(uint i=0;i<tp;++i)f[i]=f[i+tp],f[i+tp]=0;\n                s.ntt(f,0);\n                for(uint i=(tp<<1)-1;~i;--i)f[i]*=t[i];\n                s.ntt(f,1),ans.resize(tp<<1);\n            \tfor(uint i=0;i<tp;++i)ans[i+tp]=f[i];\n            }\n            ans.resize(prec);return ans;\n        }\n        poly_NTT diff()\n        {\n            poly_NTT ans;for(uint i=1;i<size();i++)ans.push(i*V[i]);\n            return ans;\n        }\n        poly_NTT inte()\n        {\n            if(!size())return*this;\n            poly_NTT ans(size()+1);ans[1]=1;\n            for(uint i=2;i<=size();i++)ans[i]=-ans[p%i]*(p/i);\n            for(uint i=1;i<=size();i++)ans[i]*=V[i-1];\n            return ans;\n        }\n        poly_NTT ln(){return ln(size());}\n        poly_NTT ln(uint prec)\n        {\n            poly_NTT a=this->diff()*this->inv(prec);a.chg_siz(prec),a=a.inte(),a.chg_siz(prec);return a;\n        }\n        poly_NTT exp(){return exp(size());}\n        poly_NTT exp(uint prec)\n        {\n            poly_NTT ans;std::vector<modint>Inv;ans.push(1),Inv.push_back(1);\n            for(uint tp=1;tp<=prec;tp<<=1)\n            {\n                std::vector<modint>f,ff=ans.diff().V;\n                for(uint i=0;i<(tp<<1);i++)f.push_back(val(i));\n                f[0]=1;NTT s;s.bzr(tp<<2);s.ntt(ans.V,0),s.ntt(Inv,0);\n                for(uint i=0;i<(tp<<2);i++)Inv[i]*=2-Inv[i]*ans[i];\n                s.ntt(Inv,1),Inv.resize(tp);s.ntt(Inv,0);\n                for(uint i=0;i<(tp<<2);i++)Inv[i]*=2-Inv[i]*ans[i];\n                s.ntt(Inv,1),Inv.resize(tp<<1);s.ntt(Inv,0);s.ntt(ff,0);\n                for(uint i=0;i<(tp<<2);i++)ff[i]*=Inv[i];\n                s.ntt(ff,1);f=(f-poly_NTT(ff).inte()).V;s.ntt(f,0);\n                for(uint i=0;i<(tp<<2);i++)ans[i]*=f[i];\n                s.ntt(Inv,1),s.ntt(ans.V,1),ans.chg_siz(tp<<1);\n            }\n            ans.chg_siz(prec);return ans;\n        }\n        friend poly_NTT operator/(poly_NTT a,poly_NTT b)\n        {\n            a.cut_zero(),b.cut_zero();if(a.size()<b.size())return poly_NTT();\n            poly_NTT ans=a.reverse()*b.reverse().inv(a.size()-b.size()+1);\n            ans.chg_siz(a.size()-b.size()+1);return ans.reverse();\n        }\n        friend poly_NTT operator%(poly_NTT a,poly_NTT b){return a-a/b*b;}\n\tpublic:\n\t\tmodint&operator[](uint n){return V[n];};\n        poly_NTT&operator+=(poly_NTT b)\n        {\n\t\t\tif(size()<b.size())chg_siz(b.size());\n\t\t\tfor(uint i=0;i<b.size();i++)V[i]+=b[i];\n\t\t\tcut_zero();return*this;\n        }\n        poly_NTT&operator+=(modint v)\n        {\n        \tif(!size())chg_siz(1);\n        \tV[0]+=v;return*this;\n        }\n        poly_NTT&operator-=(poly_NTT b)\n        {\n\t\t\tif(size()<b.size())chg_siz(b.size());\n\t\t\tfor(uint i=0;i<b.size();i++)V[i]-=b[i];\n\t\t\tcut_zero();return*this;\n        }\n        poly_NTT&operator-=(modint v)\n        {\n        \tif(!size())chg_siz(1);\n        \tV[0]-=v;return*this;\n        }\n        poly_NTT&operator*=(poly_NTT b)\n        {\n            std::vector<modint>&A=V,&B=b.V;\n            NTT s;s.bzr(A.size()+B.size());\n            s.ntt(A,0),s.ntt(B,0);\n            for(uint i=0;i<s.size();i++)A[i]*=B[i];\n            s.ntt(A,1),cut_zero();return*this;\n        }\n        poly_NTT&operator*=(modint v)\n        {\n        \tfor(auto&t:V)t*=v;\n\t\t\treturn*this;\n        }\n        poly_NTT&operator/=(poly_NTT b){return*this=*this/b;}\n        poly_NTT&operator%=(poly_NTT b){return*this=*this%b;}\n        poly_NTT&operator<<=(uint v){return*this=*this<<v;}\n        poly_NTT&operator>>=(uint v){return*this=*this>>v;}\n};\ntemplate<const ullt p=998244353,const ullt g=3>\nclass poly_eval\n{\n    public:\n\t\ttypedef mod_ullt<p>modint;typedef poly_NTT<p,g>poly;\n    private:\n        std::vector<poly>G,User;std::vector<modint>X;\n        voi mult_eval_dfs1(uint u,uint l,uint r)\n        {\n            if(l+1==r){G[u].push(1),G[u].push(-X[l]);return;}\n            uint mid=(l+r)/2;mult_eval_dfs1(u<<1,l,mid),mult_eval_dfs1(u<<1|1,mid,r),G[u]=G[u<<1]*G[u<<1|1];\n        }\n        voi mult_eval_dfs2(uint u,uint l,uint r)\n        {\n            User.back().chg_siz(r-l);\n            if(l+1==r){X[l]=User.back().val(0);return;}\n            uint mid=(l+r)/2;\n            User.push_back(sub_mul(User.back(),G[u<<1|1])),mult_eval_dfs2(u<<1,l,mid);\n            User.back()=sub_mul(User[User.size()-2],G[u<<1]),mult_eval_dfs2(u<<1|1,mid,r);\n            User.pop_back();\n        }\n    public:\n        voi mult_eval(poly P,std::vector<modint>&X)\n        {\n            if(X.empty())return;\n            G.resize(X.size()<<2),User.clear(),this->X=X;\n            mult_eval_dfs1(1,0,X.size());\n            User.push_back(sub_mul(P,G[1].inv(std::max<uint>(P.size(),X.size())+1)));\n            mult_eval_dfs2(1,0,X.size());\n            G.clear(),User.clear(),X=this->X,this->X.clear();\n        }\n};\ntemplate<const ullt p=998244353,const ullt g=3>\nclass poly_inter\n{\n    public:\n\t\ttypedef mod_ullt<p>modint;typedef poly_NTT<p,g>poly;typedef poly_eval<p,g>eval;\n    private:\n        std::vector<poly>Lim,F,G;eval E;std::vector<modint>X,H;\n        voi dfs(uint l,uint r)\n        {\n            if(l+1==r)\n            {\n                F.push_back(poly()),F.back().push(H[l]),G.push_back(poly()),G.back().push(-X[l]),G.back().push(1);return;\n            }\n            uint mid=(l+r)>>1;dfs(l,mid),dfs(mid,r);\n            F[F.size()-2]=F[F.size()-2]*G.back()+F.back()*G[G.size()-2],F.pop_back(),G[G.size()-2]*=G.back(),G.pop_back();\n        }\n    public:\n        poly fast_inter(std::vector<modint>X,std::vector<modint>Y)\n        {\n            uint n=std::min(X.size(),Y.size());if(!n)return poly();\n            X.resize(n),Y.resize(n),this->X=X;poly P;Lim.clear();\n            for(uint i=0;i<n;i++)\n            {\n                P.bzr(),P.push(-X[i]),P.push(1);\n                uint w=lowbit(i+1);while(w>>=1)P*=Lim.back(),Lim.pop_back();\n                Lim.push_back(P);\n            }\n            P=Lim.back(),Lim.pop_back();while(Lim.size())P*=Lim.back(),Lim.pop_back();\n            E.mult_eval(P.diff(),X),H.resize(n);for(uint i=0;i<n;i++)H[i]=Y[i]/X[i];\n            F.clear(),G.clear(),dfs(0,n);\n            poly ans=F.back();F.clear(),G.clear(),this->X.clear(),H.clear();return ans;\n        }\n};\nconst ullt Mod=998244353,g=3;\ntypedef mod_ullt<Mod>modint;\ntypedef poly_NTT<Mod,g>poly;\ntypedef poly_eval<Mod,g>eval;\ntypedef poly_inter<Mod,g>inter;\n// \u9ad8\u65af\u6d88\u5143\u6ca1\u6709\u7cbe\u795e\uff0c\u66b4\u529b\u7ef4\u62a4\u5206\u5f0f\u57fa\u624d\u662f\u4f60\u4eec\u7684 \u8001 \u5927 \u54e5\uff01  -- E.I.\n// \u725b\u903c\u9898\uff0c\u4f3c\u4e4e\u53ea\u6709\u4e8c\u5143\u751f\u6210\u51fd\u6570\u63a8\u8d77\u6765\u7b80\u5355\u70b9\u3002\n// But it's still A DIRTY WORK!\n// [x^ny^k](1+(2-y)x)/(1-x(y+1)+x^2(y-2))\n// \u82e6\u75db\u3002\u5f00\u59cb\u8fd8\u8bd5\u56fe\u66b4\u529b\u5c55\u5f00\u8fd9\u4e2a\u67ff\u5b50\u3002\n// \u7ed3\u679c\u524d 21 \u9879\uff1a\n// 1\n// +3*x\n// +(2*y+5)*x^2\n// +(2*y^2+4*y+11)*x^3\n// +(2*y^3+4*y^2+14*y+21)*x^4\n// +(2*y^4+4*y^3+18*y^2+32*y+43)*x^5\n// +(2*y^5+4*y^4+22*y^3+44*y^2+82*y+85)*x^6\n// +(2*y^6+4*y^5+26*y^4+56*y^3+130*y^2+188*y+171)*x^7\n// +(2*y^7+4*y^6+30*y^5+68*y^4+186*y^3+324*y^2+438*y+341)*x^8\n// +(2*y^8+4*y^7+34*y^6+80*y^5+250*y^4+492*y^3+834*y^2+984*y+683)*x^9\n// +(2*y^9+4*y^8+38*y^7+92*y^6+322*y^5+692*y^4+1374*y^3+2028*y^2+2202*y+1365)*x^10\n// +(2*y^10+4*y^9+42*y^8+104*y^7+402*y^6+924*y^5+2074*y^4+3552*y^3+4914*y^2+4852*y+2731)*x^11\n// +(2*y^11+4*y^10+46*y^9+116*y^8+490*y^7+1188*y^6+2950*y^5+5636*y^4+9186*y^3+11620*y^2+10622*y+5461)*x^12\n// +(2*y^12+4*y^11+50*y^10+128*y^9+586*y^8+1484*y^7+4018*y^6+8360*y^5+15418*y^4+22996*y^3+27218*y^2+23056*y+10923)*x^13\n// +(2*y^13+4*y^12+54*y^11+140*y^10+690*y^9+1812*y^8+5294*y^7+11804*y^6+24042*y^5+40500*y^4+56966*y^3+62892*y^2+49762*y+21845)*x^14\n// +(2*y^14+4*y^13+58*y^12+152*y^11+802*y^10+2172*y^9+6794*y^8+16048*y^7+35522*y^6+65844*y^5+105306*y^4+138632*y^3+144034*y^2+106796*y+43691)*x^15\n// +(2*y^15+4*y^14+62*y^13+164*y^12+922*y^11+2564*y^10+8534*y^9+21172*y^8+50354*y^7+100932*y^6+178734*y^5+267972*y^4+333706*y^3+326852*y^2+228166*y+87381)*x^16\n// +(2*y^16+4*y^15+66*y^14+176*y^13+1050*y^12+2988*y^11+10530*y^10+27256*y^9+69066*y^8+147860*y^7+284866*y^6+473088*y^5+673658*y^4+793788*y^3+736290*y^2+485448*y+174763)*x^17\n// +(2*y^17+4*y^16+70*y^15+188*y^14+1186*y^13+3444*y^12+12798*y^11+34380*y^10+92218*y^9+208916*y^8+432502*y^7+781084*y^6+1236242*y^5+1669684*y^4+1870638*y^3+1647276*y^2+1029162*y+349525)*x^18\n// +(2*y^18+4*y^17+74*y^16+200*y^15+1330*y^14+3932*y^13+15354*y^12+42624*y^11+120402*y^10+286580*y^9+631690*y^8+1224440*y^7+2113970*y^6+3178444*y^5+4093850*y^4+4369200*y^3+3663570*y^2+2174820*y+699051)*x^19\n// +(2*y^19+4*y^18+78*y^17+212*y^16+1482*y^15+4452*y^14+18214*y^13+52068*y^12+154242*y^11+383524*y^10+893790*y^9+1841460*y^8+3422330*y^7+5618340*y^6+8075094*y^5+9931780*y^4+10126770*y^3+8103780*y^2+4582670*y+1398101)*x^20\n// +...\n// <del>\u9a8c\u8bc1\u4e86\u6837\u4f8b\u3002</del>\n// /yun\n// \u6781\u5ea6\u4e0d\u53ef\u505a\u3002\n// \u4e8e\u662f\u9000\u800c\u6c42\u5176\u6b21\u3002\n// \u4ee5 x \u4e3a\u4e3b\u5143\u641e\u3002\n// \u89c2\u5bdf\u5230\u67ff\u5b50\u5f62\u5982\u5206\u5f0f\u3002\n// \u7cfb\u6570\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8 (\u5728 y \u7684\u4e00\u5143\u591a\u9879\u5f0f\u73af P(y) \u4e0a)\n// \u53ef\u4ee5\u4e0a \u5e38\u7cfb\u6570\u9f50\u6b21\u7ebf\u6027\u9012\u63a8 / \u77e9\u9635\u5feb\u901f\u5e42\u3002\nuint k;\nstd::vector<modint>base[2],ans[2]; // \u4e3b\u5143\u5f0f\u7684\u4e8c\u5143\u591a\u9879\u5f0f\nint main()\n{\n\tullt n;uint k;\n\tscanf(\"%llu%u\",&n,&k);\n\tbase[0].resize(k+1),base[1].resize(k+1);\n\tans[0].resize(k+1),ans[1].resize(k+1);\n\tans[0][0]=1,base[1][0]=1;\n\tpoly::NTT s;s.bzr((k+2)<<1);\n\twhile(n)\n\t{\n\t\ts.ntt(base[0],0);\n\t\ts.ntt(base[1],0);\n\t\tif(n&1)\n\t\t{\n\t\t\ts.ntt(ans[0],0);\n\t\t\ts.ntt(ans[1],0);\n\t\t\tfor(uint i=0;i<s.size();i++)\n\t\t\t{\n\t\t\t\tmodint v=ans[1][i]*base[1][i];\n\t\t\t\tans[1][i]=ans[1][i]*base[0][i]+ans[0][i]*base[1][i],\n\t\t\t\tans[0][i]*=base[0][i];\n\t\t\t\tans[1][i]+=v+v*s.Omega(i);\n\t\t\t\tans[0][i]+=v*2-v*s.Omega(i);\n\t\t\t}\n\t\t\ts.ntt(ans[0],1);\n\t\t\ts.ntt(ans[1],1);\n\t\t\tans[0].resize(k+1);\n\t\t\tans[1].resize(k+1);\n\t\t}\n\t\tfor(uint i=0;i<s.size();i++)\n\t\t{\n\t\t\tmodint v=base[1][i]*base[1][i];\n\t\t\tbase[1][i]*=2*base[0][i],\n\t\t\tbase[0][i]*=base[0][i];\n\t\t\tbase[1][i]+=v+v*s.Omega(i);\n\t\t\tbase[0][i]+=v*2-v*s.Omega(i);\n\t\t}\n\t\ts.ntt(base[0],1);\n\t\ts.ntt(base[1],1);\n\t\tbase[0].resize(k+1);\n\t\tbase[1].resize(k+1);\n\t\tn>>=1;\n\t}\n\tfor(uint i=0;i<=k;i++)(ans[0][i]+ans[1][i]*3).print(),putchar(\" \\n\"[i==k]);\n    return 0;\n}\n```\n\n",
        "postTime": 1644138885,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "3789"
    },
    {
        "content": "\u5bf9\u4e8e $50\\%$ \u7684\u6570\u636e\uff0c$n,k\\le5000$\u3002\u8fd9\u4e00\u90e8\u5206\u6d4b\u8bd5\u70b9\u53ef\u4ee5\u9012\u63a8\uff08DP\uff09\u89e3\u51b3\u3002\n\n\u9996\u5148\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u767d\u8272\u4e0e\u9ed1\u8272\u4e92\u6362\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u6743\u503c\u4e0e\u539f\u5e8f\u5217\u76f8\u540c\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u56e0\u6b64\u767d\u8272\u4e0e\u9ed1\u8272\u7684\u60c5\u51b5\u5b8c\u5168\u5bf9\u79f0\uff0c\u4e0d\u9700\u8981\u5355\u72ec\u4e3a\u5176\u8bbe\u8ba1\u72b6\u6001\u3002\n\n\u4ee4 $f_{n,i},g_{n,i}$ \u5206\u522b\u4e3a\u957f\u5ea6\u4e3a $n$\u3001\u6743\u503c\u4e3a $i$ \u4e14\u6700\u540e\u4e00\u4e2a\u683c\u5b50\u5206\u522b\u4e3a\u4e3a\u9ed1\u8272\u548c\u7070\u8272\u7684\u5408\u6cd5\u5e8f\u5217\u7684\u4e2a\u6570\uff0c\u5219\u6709\u5982\u4e0b\u9012\u63a8\u5f0f\uff1a\n\n$$ \\begin{aligned} f_{n,i}&=f_{n-1,i-1}+g_{n-1,i}\\\\g_{n,i}&=2f_{n-1,i}+g_{n-1,i}\\end{aligned} $$\n\n\u4f9d\u4ee5\u4e0a\u4e24\u5f0f\u53ef\u4ee5\u5728 $O(nk)$ \u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u7b54\u6848 $2f_{n,i}+g_{n,i}$\u3002\n\n\n\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c\u6211\u4eec\u8981\u8fdb\u4e00\u6b65\u601d\u8003\u3002\n\n\u9996\u5148\uff0c\u7531\u4ee5\u4e0a\u9012\u63a8\u5f0f\uff0c\u6709\n\n$$g_{n-1,i}-g_{n-2,i}=2f_{n-2,i}$$\n\n\u8003\u8651 $f_{n,i}-f_{n-1,i}$\uff0c\u6709\n\n$$\\begin{aligned} f_{n,i}-f_{n-1,i} &= f_{n-1,i-1}+g_{n-1,i}-f_{n-2,i-1}-g_{n-2,i}\\\\ &= f_{n-1,i-1}-f_{n-2,i-1}+2f_{n-2,i} \\end{aligned}$$\n\n\u5373\n$f_{n,i}=f_{n-1,i}+f_{n-1,i-1}-f_{n-2,i-1}+2f_{n-2,i}$\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a $f$ \u5173\u4e8e\u81ea\u8eab\u7684\u9012\u63a8\u5f0f\u3002\n\n\u4ee4 $F_n(x)=\\sum f_{n,i}x^i$\uff0c\u5219\u4e0a\u5f0f\u7b49\u4ef7\u4e8e\n\n$F_n(x)=(1+x)F_{n-1}(x)+(2-x)F_{n-2}(x)$\n\n\u5176\u4e2d\u8fb9\u754c\u6761\u4ef6\u4e3a $F_0(x)=0,F_1(x)=1$\u3002\n\n\u4eff\u7167\u4e8c\u9636\u7ebf\u6027\u9012\u63a8\u6570\u5217\u901a\u9879\u516c\u5f0f\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u731c\u60f3$F_n(x)$\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a\n\n$F_n(x)=C_0(x)\\Lambda_0(x)^n+C_1(x)\\Lambda_1(x)^n$\n\n\u5176\u4e2d $C_0(x),C_1(x)$ \u4e3a\u5f85\u5b9a\u5e42\u7ea7\u6570\uff0c\u800c $\\Lambda_0(x),\\Lambda_1(x)$ \u53ef\u7531\u4e0b\u5f0f\u786e\u5b9a\uff1a\n\n$$\\Lambda(x)^2=(1+x)\\Lambda(x)+(2-x)$$\n\n\u53ef\u4ee5\u5f97\u5230\n\n$$\\begin{aligned}\\Lambda_0(x)&=\\frac{1+x+\\sqrt{9-2x+x^2}}{2}\\\\ \\Lambda_1(x)&=\\frac{1+x-\\sqrt{9-2x+x^2}}{2}\\end{aligned}$$\n\n\u5e76\u5229\u7528\u521d\u59cb\u6761\u4ef6\u89e3\u51fa $C_0(x),C_1(x)$\uff0c\u6700\u7ec8\u53ef\u4ee5\u5f97\u5230\n\n$$F_n(x)=\\frac{\\left(\\frac{1+x+\\sqrt{9-2x+x^2}}{2}\\right)^n-\\left(\\frac{1+x-\\sqrt{9-2x+x^2}}{2}\\right)^n}{\\sqrt{9-2x+x^2}}$$\n\n\u53ef\u4ee5\u4f7f\u7528 NTT \u5728 $O(k\\log k)$ \u65f6\u95f4\u5185\u8ba1\u7b97 $F_n(x)$\u3002\n\n\u8981\u8ba1\u7b97 $g_{n,i}$\uff0c\u53ea\u9700\u6ce8\u610f\u5230\n\n$$g_{n,i}-f_{n,i}=2f_{n-1,i}-f_{n-1,i-1}$$\n\n\u5c31\u53ef\u4ee5\u5f97\u5230\n\n$$g_{n,i}=f_{n,i}+2f_{n-1,i}-f_{n-1,i-1}$$\n\n\u56e0\u6b64\u4e5f\u53ea\u9700\u8ba1\u7b97 $F_n(x)$ \u4e0e $F_{n-1}(x)$ \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa $g$\u3002\n\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5728 $O(k\\log k)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n",
        "postTime": 1496391524,
        "uid": 26691,
        "name": "11Dimensions",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3789 \u3010Azuki loves coloring\u3011"
    },
    {
        "content": "\u6765\u5199\u4e00\u4e2a $\\text{gf}$ \u63a8\u6cd5\u3002\n\n\u9996\u5148\u53d1\u73b0\u9ed1\u767d\u683c\u5b50\u4e0d\u80fd\u8fde\u7740\u4fe9\u4e00\u6837\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u5f62\u6210\u4e00\u6bb5\u9ed1\u767d\u94fe\u52a0\u4e00\u6bb5\u7070\u4ea4\u66ff\u51fa\u73b0\uff0c\u4e0d\u59a8\u5c06\u7070\u683c\u5b50\u548c\u9ed1\u767d\u94fe\u8fdb\u884c\u6346\u7ed1\uff0c\u8003\u8651\u7528 $x$ \u8bb0\u5f55\u5df2\u5f62\u6210\u5e8f\u5217\u7684\u957f\u5ea6\uff0c$y$ \u8bb0\u5f55\u5f53\u524d\u5e8f\u5217\u7684\u6743\u503c\uff0c\u8fd9\u6837\u7684\u8bdd\u53ef\u4ee5\u5217\u51fa\u5355\u4e2a\u6346\u7ed1\u5bf9\u8c61\u7684\u751f\u6210\u51fd\u6570\uff1a$\\frac{x}{1-x}*\\frac{2x}{1-xy}=\\frac{2x^2}{(1-x)(1-xy)}$\n\n\u73b0\u5728\u65e0\u975e\u662f\u60f3\u7528\u6346\u7ed1\u5bf9\u8c61\u6765\u751f\u6210\u5e8f\u5217\uff0c\u6240\u4ee5\u5148\u6574\u4e0a\u4e00\u4e2a $\\frac{1}{1-\\frac{2x^2}{(1-x)(1-xy)}}$\uff0c\u7136\u540e\u53d1\u73b0\u5728\u8fd9\u6837\u62fc\u63a5\u5b8c\u540e\u53ef\u4ee5\u5728\u5c3e\u90e8\u518d\u586b\u4e0a\u7070\u8272\u683c\u5b50\uff0c\u9042\u518d\u4e58\u4e0a $\\frac1{1-x}$\uff0c\u5373\u6c42 $[x^{n+1}]\\frac{1-xy}{(1-x)(1-xy)-2x^2}=[x^{n+1}]\\frac{1-xy}{1-x(y+1)-x^2(2-y)}$\n\n\u662f\u4e00\u4e2a\u7cfb\u6570\u4e3a $y$ \u591a\u9879\u5f0f\u7684\u7ebf\u6027\u9012\u63a8\uff0c\u53ef\u4ee5\u76f4\u63a5\u505a\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5927\u529b\u89e3\u4e8c\u6b21\u65b9\u7a0b\u505a\u5206\u5f0f\u5206\u89e3\u3002\n\n\u4ee3\u7801\u518d\u8bf4\u3002",
        "postTime": 1636008811,
        "uid": 47765,
        "name": "ldxcaicai",
        "ccfLevel": 0,
        "title": "[\u901f\u901a]P3789 Azuki loves coloring"
    },
    {
        "content": "\u5206\u522b\u8bbe $f_{n,k}$ \u548c $g_{n,k}$ \u4e3a \u957f\u5ea6\u4e3a $n$\u3001\u6743\u503c\u4e3a $k$\uff0c\u4e14\u6700\u540e\u4e00\u683c\u4e3a\u9ed1\u3001\u7070\u8272\u7684\u65b9\u6848\u6570\u3002\n\n\u56e0\u4e3a\u9ed1\u3001\u767d\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u8003\u8651\u5012\u6570\u7b2c\u4e8c\u683c\u662f\u5426\u4e3a\u7070\u8272\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u52a0\u8d77\u6765\u80fd\u5f97\u5230\n$$f_{n,k}=f_{n-1,k-1}+g_{n-1,k} \\quad(1)$$\n$$g_{n,k}=2f_{n-1,k}+g_{n-1,k} \\quad(2)$$\n\u7b54\u6848\u5c31\u662f\u5c06\u4e24\u90e8\u5206\u5408\u5e76\uff1a$2f_{n,k}+g_{n,k}$\n\n\u5c06 $(2)$ \u5f0f\u79fb\u9879\u53ef\u4ee5\u5f97\u5230 $f$ \u53ea\u5173\u4e8e $g$ \u7684\u5f0f\u5b50\uff0c\u5373\n$$2f_{n-1,k}=g_{n,k}-g_{n-1,k}$$\n\u5bf9 $f_n$ \u505a\u5dee\u5206\u53ef\u4ee5\u5f97\u5230\u76f4\u63a5\u8ba1\u7b97 $f$ \u7684\u5f0f\u5b50\n$$f_{n,k}-f_{n-1,k}=f_{n-1,k-1}-f_{n-2,k-1}+g_{n-1,k}-g_{n-2,k}$$\n$$f_{n,k}-f_{n-1,k}=f_{n-1,k-1}-f_{n-2,k-1}+2f_{n-2,k}$$\n\u8bbe $F_n(x)$ \u4e3a $\\{ f_{n,k} \\}_{k=0}^\\infty$ \u7684\u751f\u6210\u51fd\u6570\uff0c\u5f88\u5bb9\u6613\u5f97\u51fa\n$$F_n(x)=F_{n-1}(x)+xF_{n-1}(x)-xF_{x-2}(x)+2F_{n-2}(x)$$\n$$F_n(x)=(1+x)F_{n-1}(x)+(2-x)F_{n-2}(x)$$\n\u7531\u4e8e\u5b9e\u6570\u548c\u591a\u9879\u5f0f\u7684\u8fd0\u7b97\u662f\u7c7b\u4f3c\u7684\uff0c\u4efb\u610f\u5b9e\u6570\u7684\u7b49\u5f0f\uff0c\u66ff\u6362\u4e3a\u591a\u9879\u5f0f\u540e\u4f9d\u7136\u6210\u7acb\u3002\n\n\u6240\u4ee5\u5c31\u80fd\u7167\u642c \u5b9e\u6570\u7ebf\u6027\u9012\u63a8\u6c42\u901a\u9879\u516c\u5f0f \u7684\u529e\u6cd5\u6765\u505a\uff0c\u8bbe\n$$F_n(x)=c_1(x)z_1(x)^n+c_2(x)z_2(x)^n$$\n\u89e3\u7279\u5f81\u65b9\u7a0b\n$$z(x)^2-(1+x)z(x)-(2-x)=0$$\n$$z(x)=\\frac{1+x \\pm \\sqrt{x^2-2x+9}}{2}$$\n\u6839\u636e $F_0(x),F_1(x)$ \u5217\u65b9\u7a0b\u7ec4\u53ef\u4ee5\u6c42 $c_1(x),c_2(x)$  \n\uff08 $z_1(x)$ \u4e2d\u53d6\u52a0\u53f7 \uff09\n$$\\begin{cases} c_1(x)+c_2(x)=0 \\\\ c_1(x)z_1(x)+c_2(x)z_2(x)=1\\end{cases}$$\n\u89e3\u5f97\n$$F_n(x)=(x^2-2x+9)^{-1/2}(z_1(x)^n-z_2(x)^n)$$\n\u4f7f\u7528\u591a\u9879\u5f0f\u5f00\u6839\u3001\u5feb\u901f\u5e42\u6c42\u89e3\u5373\u53ef\u3002  \n\u56e0\u4e3a\u8fd8\u8981\u6c42 $G_{n}(x)$\uff0c\u628a $F_{n-1}(x)$ \u4e5f\u641e\u51fa\u6765\uff0c\u7528\u4e00\u5f00\u59cb\u7684\u5f0f\u5b50\u5c31\u80fd\u6c42\u51fa\u3002\n\n\u8ba1\u7b97\u65f6\u8981\u6ce8\u610f\u5e38\u6570\u9879\u522b\u7b97\u9519\u4e86\u3002\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#define N 262147\n#define ll long long\n#define reg register\n#define p 998244353\nusing namespace std;\n\ninline int add(const int& x,const int& y){ return x+y>=p?x+y-p:x+y; }\ninline int dec(const int& x,const int& y){ return x<y?x-y+p:x-y; }\n\ninline int power(int a,int t){\n    int res = 1;\n    while(t){\n        if(t&1) res = (ll)res*a%p;\n        a = (ll)a*a%p;\n        t >>= 1;\n    }\n    return res;\n}\n\ninline int getlen(int n){\n    return 1<<(32-__builtin_clz(n));\n}\n\nint rt[N],rev[N],inv[N];\nint siz;\n\nvoid init(int n){\n    int w,lim = 1;\n    while(lim<=n) lim <<= 1,++siz;\n    for(reg int i=1;i!=lim;++i) rev[i] = (rev[i>>1]>>1)|((i&1)<<(siz-1));\n    w = power(3,(p-1)>>siz);\n    rt[lim>>1] = inv[1] = 1;\n    for(reg int i=lim>>1|1;i!=lim;++i) rt[i] = (ll)rt[i-1]*w%p;\n    for(reg int i=(lim>>1)-1;i;--i) rt[i] = rt[i<<1];\n    for(reg int i=2;i<=n;++i) inv[i] = (ll)(p-p/i)*inv[p%i]%p;\n}\n\ninline void NTT(int *f,int type,int lim){\n    if(type==-1) reverse(f+1,f+lim);\n    static unsigned long long a[N];\n    reg int x,shift = siz-__builtin_ctz(lim);\n    for(reg int i=0;i!=lim;++i) a[rev[i]>>shift] = f[i];\n    for(reg int mid=1;mid!=lim;mid<<=1)\n    for(reg int j=0;j!=lim;j+=(mid<<1))\n    for(reg int k=0;k!=mid;++k){\n        x = a[j|k|mid]*rt[mid|k]%p;\n        a[j|k|mid] = a[j|k]+p-x;\n        a[j|k] += x;\n    }\n    for(reg int i=0;i!=lim;++i) f[i] = a[i]%p;\n    if(type==1) return;\n    x = p-(p-1)/lim;\n    for(reg int i=0;i!=lim;++i) f[i] = (ll)f[i]*x%p;\n}\n\ninline void inverse(const int *f,int n,int *R){\n    static int g[N],h[N],s[30];\n    memset(g,0,getlen(n<<1)<<2);\n    int lim = 1,top = 0;\n    while(n){\n        s[++top] = n;\n        n >>= 1;\n    }\n    g[0] = power(f[0],p-2);\n    while(top--){\n        n = s[top+1];\n        while(lim<=(n<<1)) lim <<= 1;\n        memcpy(h,f,(n+1)<<2);\n        memset(h+n+1,0,(lim-n)<<2);\n        NTT(g,1,lim),NTT(h,1,lim);\n        for(reg int i=0;i!=lim;++i) g[i] = g[i]*(2-(ll)g[i]*h[i]%p+p)%p;\n        NTT(g,-1,lim);\n        memset(g+n+1,0,(lim-n)<<2);\n    }\n    memcpy(R,g,(n+1)<<2);\n}\n\ninline void log(const int *F,int n,int *R){\n    static int f[N],g[N];\n    int lim = getlen(n<<1);\n    memcpy(f,F,(n+1)<<2);\n    memset(f+n+1,0,(lim-n)<<2);\n    inverse(f,n,g);\n    memset(g+n+1,0,(lim-n)<<2);\n    for(reg int i=0;i!=n;++i) f[i] = (ll)f[i+1]*(i+1)%p;\n    f[n] = 0;\n    NTT(f,1,lim),NTT(g,1,lim);\n    for(reg int i=0;i!=lim;++i) f[i] = (ll)f[i]*g[i]%p;\n    NTT(f,-1,lim);\n    for(reg int i=n;i;--i) f[i] = (ll)f[i-1]*inv[i]%p;\n    f[0] = 0;\n    memcpy(R,f,(n+1)<<2);\n}\n\ninline void exp(const int *f,int n,int *R){\n    static int g[N],h[N],s[30];\n    int lim = 1,top = 0;\n    memset(g,0,getlen(n<<1)<<2);\n    while(n){\n        s[++top] = n;\n        n >>= 1;\n    }\n    g[0] = 1;\n    while(top--){\n        n = s[top+1];\n        while(lim<=(n<<1)) lim <<= 1;\n        memcpy(h,g,(n+1)<<2);\n        memset(h+n+1,0,(lim-n)<<2);\n        log(g,n,g);\n        for(reg int i=0;i<=n;++i) g[i] = dec(f[i],g[i]);\n        g[0] = add(g[0],1);\n        NTT(g,1,lim),NTT(h,1,lim);\n        for(reg int i=0;i!=lim;++i) g[i] = (ll)g[i]*h[i]%p;\n        NTT(g,-1,lim);\n        memset(g+n+1,0,(lim-n)<<2);\n    }\n    memcpy(R,g,(n+1)<<2);\n}\n\ninline void power(const int *F,int n,ll k,int *R){\n    static int g[N];\n    memset(g,0,getlen(n<<1)<<2);\n    int x = power(F[0],p-2),y = power(F[0],k%(p-1));\n    k %= p;\n    memcpy(g,F,(n+1)<<2);\n    for(reg int i=0;i<=n;++i) g[i] = (ll)g[i]*x%p;\n    log(g,n,g);\n    for(reg int i=0;i<=n;++i) g[i] = (ll)g[i]*k%p;\n    exp(g,n,R);\n    for(reg int i=0;i<=n;++i) R[i] = (ll)R[i]*y%p;\n}\n\ninline void sqrt(const int *f,int n,int *R){\n    static int g[N],h[N];\n    memset(g,0,getlen(n<<1)<<2);\n    int lim = 1,top = 0;\n    int s[30];\n    while(n){\n        s[++top] = n;\n        n >>= 1;\n    }\n    g[0] = 3;\n    while(top--){\n        n = s[top+1];\n        while(lim<=(n<<1)) lim <<= 1;\n        memcpy(h,g,(n+1)<<2);\n        for(int i=0;i<=n;++i) h[i] = add(h[i],h[i]);\n        inverse(h,n,h);\n        NTT(g,1,lim);\n        for(reg int i=0;i!=lim;++i) g[i] = (ll)g[i]*g[i]%p;\n        NTT(g,-1,lim);\n        for(reg int i=0;i<=n;++i) g[i] = add(g[i],f[i]);\n        memset(g+n+1,0,(lim-n)<<2);\n        NTT(g,1,lim),NTT(h,1,lim);\n        for(reg int i=0;i!=lim;++i) g[i] = (ll)g[i]*h[i]%p;\n        NTT(g,-1,lim);\n        memset(g+n+1,0,(lim-n)<<2);\n    }\n    memcpy(R,g,(n+1)<<2);\n}\n\ninline void multiply(const int *f,const int *g,int n,int m,int *R,int len){\n    int lim = getlen(n+m);\n    static int A[N],B[N];\n    memcpy(A,f,(n+1)<<2),memcpy(B,g,(m+1)<<2);\n    memset(A+n+1,0,(lim-n)<<2),memset(B+m+1,0,(lim-m)<<2);\n    NTT(A,1,lim),NTT(B,1,lim);\n    for(reg int i=0;i!=lim;++i) R[i] = (ll)A[i]*B[i]%p;\n    NTT(R,-1,lim);\n    memset(R+len+1,0,(lim-len)<<2);\n}\n\nll n;\nint k;\nint f0[N],f1[N],g[N],c1[N],c2[N],sq[N],isq[N];\nint pw1[N],pw2[N];\n\nint main(){\n    scanf(\"%lld%d\",&n,&k);\n    init(200000);\n    sq[0] = 9,sq[1] = p-2,sq[2] = 1;\n    sqrt(sq,k,sq);\n    inverse(sq,k,isq);\n    memcpy(c1,sq,(k+1)<<2);\n    for(reg int i=0;i<=k;++i) c2[i] = p-sq[i];\n    ++c1[0],++c1[1],++c2[0],++c2[1];\n    for(reg int i=0;i<=k;++i){\n        c1[i] = 499122177ll*c1[i]%p;\n        c2[i] = 499122177ll*c2[i]%p;\n    }\n    power(c1,k,n-1,pw1),power(c2,k,n-1,pw2);\n    for(reg int i=0;i<=k;++i) f0[i] = dec(pw1[i],pw2[i]);\n    multiply(pw1,c1,k,k,pw1,k);\n    multiply(pw2,c2,k,k,pw2,k);\n    for(reg int i=0;i<=k;++i) f1[i] = dec(pw1[i],pw2[i]);\n    multiply(f0,isq,k,k,f0,k);\n    multiply(f1,isq,k,k,f1,k);\n    for(reg int i=0;i<=k;++i) g[i] = add(f1[i],add(f0[i],f0[i]));\n    for(reg int i=1;i<=k;++i) g[i] = dec(g[i],f0[i-1]);\n    for(reg int i=0;i<=k;++i) printf(\"%d \",add(g[i],add(f1[i],f1[i])));\n    return 0;   \n}\n```",
        "postTime": 1580664309,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3789 \u3010Azuki loves coloring\u3011"
    }
]