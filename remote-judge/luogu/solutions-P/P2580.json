[
    {
        "content": "# map\u7684\u7ec3\u624b\u9898\n## map\u8f7b\u677e\u641e\u5b9a~~\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7ed9\u5927\u5bb6\u7ec3\u7ec3STLmap\u7684\u7528\u6cd5\uff0c\u8ba9\u5927\u5bb6\u611f\u53d7STL\u7684\u65b9\u4fbfQAQ\n\n\u770b\u5230\u697c\u4e0b\u6ca1\u6709map\u7684\u597d\u9898\u89e3\uff08\u5c31\u662f\u7cbe\u7b80\u7684\uff09~~\uff08\u53ef\u80fd\u6211\u773c\u775b\u4e0d\u597d\uff09~~\n\n\u6bd4\u4ec0\u4e48\u5b57\u5178\u6811\u4e0d\u7b80\u5355\u591a\u4e86QAQ\n\n\u5148\u628a\u6240\u6709\u7684\u4eba\u540d\u5b57\u5b58\u8d77\u6765\uff0c\u4f7f\u7528map\uff0c\u8fd9\u6837\u53ef\u4ee5\u5efa\u7acb\u4ece\u540d\u5b57\u5230\u6570\u7684\u6620\u5c04\uff0c\u6807\u8bb0\u4e3a1\uff0c\u7136\u540e\u626b\u4e00\u904d\uff0c\u5982\u679c\u4e3a1\uff0c\u8f93\u51faOK\uff0c\u540c\u65f6\u5c061\u66f4\u65b0\u4e3a2\uff0c\u5982\u679c\u9047\u5230\u4e3a2\uff0c\u8f93\u51faREPEAT\uff0c\u5982\u679c\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u6709\uff0c\u8f93\u51faWRONG\uff0c\u4e0d\u5c31\u884c\u4e86\uff1f\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(n+m);\n\n\u5177\u4f53\u89e3\u91ca&&map\u7684\u4ecb\u7ecd\u89c1\u4ee3\u7801\uff1a\n\n```\n#include<map>\n#include<cmath>\n#include<stack>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nmap<string,int>a; //map\u5b9a\u4e49\uff0c\u76f8\u5f53\u4e8e\u6570\u7ec4\u7684\u5347\u7ea7\u7248\uff0c\u8868\u793astring\u5230int\u7684\u6620\u5c04\uff0c\u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u53ef\u4ee5\u7528a[\"OK\"]=1;\u8fdb\u884c\u8d4b\u503c\uff08\u8bf4\u767d\u4e86\u5c31\u662f\u62ec\u53f7\u91cc\u7684\u6570\u636e\u7c7b\u578b\u662fmap<>\u524d\u9762\u7684\uff0c=\u7684\u540e\u9762\u5c31\u662fmap<>\u540e\u9762\u7684\u6570\u636e\u7c7b\u578b\uff09\nstring s;//\u7528\u4e8e\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\nint n,m;\nint main(){\n    cin>>n;\n    while(n--){//\u56e0\u4e3a\u662fn+m\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5n--\uff0c--QWQ\n    \tcin>>s;\n    \ta[s]=1;//\u76f4\u63a5\u8fd9\u6837\u8d4b\u503c\n    }\n    cin>>m;\n    while(m--){\n    \tcin>>s;\n    \tif(a[s]==1){puts(\"OK\");a[s]=2;}//\u524d\u9762\u8bb2\u7684\u5f88\u6e05\u695a\uff0c\u4e0d\u8d58\u8ff0\u4e86\n    \telse if(a[s]==2)puts(\"REPEAT\");//\u8f93\u51fa\n    \telse puts(\"WRONG\");\n    }\n\treturn 0;//\u5b8c\u7f8e\u7684\u8fc7\u7a0b\uff0c\u4e0d\u662f\u5417\uff1f\n}\n```",
        "postTime": 1520227167,
        "uid": 56561,
        "name": "\u82b1\u5343\u6811",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "## $n^2$\u8fc7\u767e\u4e07\uff0c\u66b4\u529b\u78be\u6807\u7b97      \n#### \u2014\u2014chen_zhe\n**\u8fd9\u9053\u9898\uff0c\u4e3b\u8981\u5c31\u662f\u66b4\u529b\u641c\u7d22\u6bcf\u4e2a\u4eba\u540d\u5b58\u4e0d\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u7684\u5224\u65ad\u4e00\u4e0b\u6709\u6ca1\u6709\u88ab\u70b9\u5230\u8fc7\uff0c\u88ab\u70b9\u5230\u8fc7\uff0c\u5c31\u8f93\u51fa\u201cREPEAT\u201d\uff0c\u6ca1\u6709\u5c31\u8f93\u51fa\u201cOK\u201d**\n### \u66b4\u529b\uff0c\u4ea4\u4e0a\u53bb\uff1a[50\u5206](https://www.luogu.org/record/show?rid=12253938)\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct student{\n    string name;//\u8bb0\u5f55\u6bcf\u4e2a\u5b66\u751f\u7684\u540d\u5b57.\n    bool get;//\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5b66\u751f\u6709\u6ca1\u6709\u88ab\u70b9\u5230.\n};\nstudent ss[10005];\nint main(){\n    int n;\n    cin>>n;\n    for(int i=1;i<=n;i++){//\u521d\u59cb\u5316\n        cin>>ss[i].name;\n        ss[i].get=true;\n    }\n    int m;\n    cin>>m;\n    for(int i=1;i<=m;i++){//\u6bcf\u6b21\u70b9\u540d\u5224\u65ad\n        string nam;\n        bool judge=false;\n        cin>>nam;\n        for(int j=1;j<=n;j++){//\u4ece\u7b2c\u4e00\u4e2a\u5b66\u751f\u5f00\u59cb\u66b4\u529b\n            if(nam==ss[j].name&&ss[j].get==false){//\u70b9\u5230\u4e86,\u4f46\u662f\u4e4b\u524d\u70b9\u8fc7\n                cout<<\"REPEAT\"<<endl;\n                judge=true;//\u6709\u8fd9\u4e2a\u5b66\u751f\n            }\n            if(nam==ss[j].name&&ss[j].get==true){//\u70b9\u5230\u4e86,\u4e4b\u524d\u6ca1\u70b9\u8fc7\n                cout<<\"OK\"<<endl;\n                judge=true;\n                ss[j].get=false;//\u70b9\u8fc7\u4e86\n            }\n        }\n        if(judge==false){//\u6ca1\u6709\u8fd9\u4e2a\u5b66\u751f\n            cout<<\"WRONG\"<<endl;\n        }\n    }\n    return 0;\n}\n```\n#### \u4ee3\u7801\u5206\u6790\uff1a\n\u8f93\u51fa\u4ee5\u540e\u6ca1\u6709\u9a6c\u4e0a\u8df3\u51fa\u5faa\u73af\uff0c\u800c\u662f\u7ee7\u7eed\u7b49\u5230j\u5faa\u73af\u7ed3\u675f\u540e\u624d\u5f00\u59cb\u679a\u4e3e\u7b2c\u4e8c\u4e2a\u5b66\u751f.\n### \u6539\u8fdb,\u4ea4\u4e0a\u53bb,[90\u5206](https://www.luogu.org/record/show?rid=12253955)\n#### \u4ee3\u7801\u5206\u6790:\n1. \u8bfb\u5165\u6ca1\u6709\u4f18\u5316,\u52a0\u5165`ios:sync_with_stdio(false)`\u63d0\u9ad8`cin>>`\u7684\u8bfb\u5165\u901f\u5ea6;\n1. \u5f00$O_2$\u4f18\u5316;\n1. \u5c06`<<endl;`\u6362\u6210`'\\n';`(\u4e00\u822c\u540e\u8005\u8981\u6bd4\u524d\u8005\u5feb\u4e0a8.5\u500d)\n1. \u7384\u5b66\u4f18\u5316:\u5728\u5934\u6587\u4ef6\u524d\u52a0\u5165\u9884\u5904\u7406\u6307\u4ee4:\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n```\n### \u4ea4\u4e0a\u53bb,\u60ca\u4e0d\u60ca\u559c?[\u8fd8\u662f90\u5206!](https://www.luogu.org/record/show?rid=12266794)\n\u7b2c\u5341\u4e2a\u6d4b\u8bd5\u70b9\u6c38\u8fdc\u8d85\u65f6,\u8f93\u51fa\u4e0b\u8f7d\u4e0b\u6765\u4e00\u770b(\u8f93\u5165\u7531\u4e8e\u6587\u4ef6\u592a\u5927\u4e0d\u80fd\u4e0b\u8f7d):\n```\nWRONG\nWRONG\n......(\u4e0b\u976299998\u884c\u5747\u662fWRONG);\n```\n\u5982\u679c\u8fd9\u6837\u7528\u66b4\u529b\u641c\u7d22\u7edd\u5bf9\u8d85\u65f6!\n## \u8fd9\u4e0b\u4e0d\u884c\u4e86,\u522b\u7684\u4f18\u5316\u65b9\u6cd5\u5df2\u7ecf\u7528\u5230\u6781\u81f4\u4e86,\u518d\u7528\u5c31\u5f97\u4f18\u5316\u4ee3\u7801\u4e86.\n### \u4e8c\u5206\n#### \u9996\u5148\u628a\u6240\u6709\u7684\u5b66\u751f\u7684\u540d\u5b57\u6392\u5e8f,\u6bcf\u5f53\u70b9\u5230\u4e00\u4e2a\u540c\u5b66\u7684\u65f6\u5019\u4e8c\u5206\u67e5\u627e\u770b\u8fd9\u4e2a\u540c\u5b66\u7684\u540d\u5b57\u662f\u5426\u5408\u6cd5,\u4e0d\u5408\u6cd5\u76f4\u63a5\u8f93\u51fa\"WRONG\".\u5982\u679c\u5408\u6cd5\u5c31\u518d\u770b\u8fd9\u4e2a\u540c\u5b66\u7684\u540d\u5b57\u662f\u5426\u70b9\u5230\u8fc7\n### \u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct student {\n\tstring name;\n\tbool get;\n};\nstudent ss[10005];\nbool operator <(student a,student b) {//\u91cd\u8f7d\u8fd0\u7b97\u7b26,sort\u8981\u7528\n\treturn a.name<b.name;\n}\nint sea_rch(int l,int r,string a) {//\u4e8c\u5206\u641c\u7d22\n\tint mid=l+(r-l)/2;\n\tif(ss[mid].name==a)return mid;//\u627e\u5230,\u8fd4\u56de\u8be5\u5b66\u751f\u540d\u5b57\u4e0b\u6807\n\tif(l>r)return -1;\n\telse if(ss[mid].name>a)return sea_rch(l,mid-1,a);//\u9012\u5f52\u65b9\u5f0f\u5199\u4e8c\u5206,\u5927\u5bb6\u5e94\u8be5\u90fd\u80fd\u770b\u61c2\n\telse return sea_rch(mid+1,r,a);\n}\nint main() {\n\tios::sync_with_stdio(false);\n\tint n;\n\tcin>>n;\n\tfor(int i=1; i<=n; i++) {\n\t\tcin>>ss[i].name;\n\t\tss[i].get=true;\n\t}\n\tint m;\n\tcin>>m;\n\tsort(ss+1,ss+n+1);//\u6392\u5e8f,\u4e8c\u5206\u524d\u91cd\u8981\u7684\u4e00\u6b65\n\tfor(int i=1; i<=m; i++) {\n\t\tstring nam;\n\t\tcin>>nam;\n\t\tbool judge=false;\n\t\tint j=sea_rch(1,n,nam);//\u4e0b\u6807\n\t\tif(j==-1) {//\u6ca1\u627e\u5230\n\t\t\tcout<<\"WRONG\\n\";\n\t\t} else {\n\t\t\tif(ss[j].get==false) {//\u627e\u5230\u4f46\u662f\u70b9\u8fc7\n\t\t\t\tcout<<\"REPEAT\\n\";\n\t\t\t\tjudge=true;\n\t\t\t} else if(ss[j].get==true) {//\u627e\u5230\u800c\u4e14\u6ca1\u6709\u70b9\u8fc7\n\t\t\t\tcout<<\"OK\\n\";\n\t\t\t\tjudge=true;\n\t\t\t\tss[j].get=false;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### [\u6ee1\u5206](https://www.luogu.org/record/show?rid=12274839)\n### \u65f6\u95f4\u4e0b\u964d\u4e86\u4e09\u500d.\n## \u6700\u540e\u7528\u4e24\u53e5 dd\u5927\u725b \u7684\u8bdd\u6765\u7ed3\u675f\u6574\u7bc7\u9898\u89e3:\n### 1.\u201c\u601d\u8003\u201d\u662f\u4e00\u4e2aOIer\u6700\u91cd\u8981\u7684\u54c1\u8d28\u3002\u7b80\u5355\u7684\u95ee\u9898\uff0c\u6df1\u5165\u601d\u8003\u4ee5\u540e\uff0c\u4e5f\u80fd\u53d1\u73b0\u66f4\u591a\u3002\n### 2.\u5931\u8d25\u4e0d\u662f\u4ec0\u4e48\u4e22\u4eba\u7684\u4e8b\u60c5\uff0c\u4ece\u5931\u8d25\u4e2d\u5168\u65e0\u6536\u83b7\u624d\u662f\u3002",
        "postTime": 1540207204,
        "uid": 89800,
        "name": "\u4e00\u5ea7\u57ce\u00b7\u5b88\u4e00\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709c++\u7684\u975e\u6307\u9488trie\uff0c\u4ea4\u4e00\u4e2a\n\n(\u53cd\u6b63\u6307\u9488\u6211\u4e0d\u4f1a\u5199\uff08\u4e2a\u4eba\u8ba8\u538c\u6307\u9488\uff0811101001\uff09\uff09\uff09\n\n\n\u5173\u4e8etrie\u7684\u5b9e\u73b0\n\n\u697c\u4e0b\u7684\u697c\u4e0b\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\n\n\n\u5224\u65ad\u91cd\u590d\u5c31\u662f\u627e\u5230\u4e00\u6b21\u5b8c\u6574\u5355\u8bcd\u5c31\u4f7f\u8be5\u8282\u70b9\u7684cnt++\uff0c\u82e5\u679c\u8be5\u8282\u70b9cnt\u4e0d\u4e3a0\u7684\u8bdd\u8bf4\u660e\u70b9\u8fc7\u4e00\u6b21\u540d\uff0c\u90a3\u4e48\u8f93\u51fa  \"REPEAT\"\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m;\nstruct node{\n    int cnt;\n    int son[26];\n    bool have;\n    node(){\n        cnt=0;\n        memset(son,false,sizeof son);\n        have=false;\n    }\n}trie[800000];\nint num=0;\nvoid insert(char *s)\n{\n    int v,len=strlen(s);\n    int u=0;\n    for(int i=0;i<len;i++)\n    {\n        v=s[i]-'a';\n        if(!trie[u].son[v])\n            trie[u].son[v]=++num\n            ;\n        u=trie[u].son[v];\n    }\n    trie[u].have=1;\n}\nint find(char *s)\n{\n    int v,u=0,len=strlen(s);\n    for(int i=0;i<len;i++)\n    {\n        v=s[i]-'a';\n        if(!trie[u].son[v])return 3;\n        u=trie[u].son[v];\n    }\n    if(!trie[u].have)return 3;\n    if(!trie[u].cnt)\n    {\n        trie[u].cnt++;\n        return 1;\n    }\n    return 2;\n}\nint main()\n{\n    char name[100];\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%s\",name);\n        insert(name);\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%s\",name);\n        int p=find(name);\n        if(p==1)\n            puts(\"OK\");\n        else if(p==2)\n            puts(\"REPEAT\");\n        else if(p==3)\n            puts(\"WRONG\");\n    }\n    return 0;    \n}\n\n```",
        "postTime": 1499309439,
        "uid": 38871,
        "name": "Niko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "           Trie\u6811\uff08\u5b57\u5178\u6811\uff09\n\u5728[\u535a\u5ba2](https://47488.blog.luogu.org/qian-tan-trie-shu-zi-dian-shu-post)\u5185\u98df\u7528\u66f4\u4f73\n\n\u66f4\u65b0\uff1a\u52a0\u4e864\u526f\u56fe(\u4e4b\u524d\u624b\u6ed1\u5220\u4e86)\n\n\u4e00\u3001\u5f15\u5165\n\n\u5b57\u5178\u662f\u5e72\u5565\u7684\uff1f\u67e5\u627e\u5b57\u7684\u3002\n\n\u5b57\u5178\u6811\u81ea\u7136\u4e5f\u662f\u8d77\u67e5\u627e\u4f5c\u7528\u7684\u3002\u67e5\u627e\u7684\u662f\u5565\uff1f\u5355\u8bcd\u3002\n\n\u770b\u4ee5\u4e0b\u51e0\u4e2a\u9898\uff1a\n\n1\u3001\u7ed9\u51fan\u4e2a\u5355\u8bcd\u548cm\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u5355\u8bcd\uff0c\u56de\u7b54\u8fd9\u4e2a\u5355\u8bcd\u662f\u5426\u5728\u5355\u8bcd\u8868\u4e2d\u51fa\u73b0\u8fc7\u3002\n\n\u7b54\uff1a\u7b80\u5355\uff01map\uff0c\u77ed\u5c0f\u7cbe\u608d\u3002\n\n\u597d\u3002\u4e0b\u4e00\u4e2a\n\n2\u3001\u7ed9\u51fan\u4e2a\u5355\u8bcd\u548cm\u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u524d\u7f00\uff0c\u56de\u7b54\u8be2\u95ee\u662f\u591a\u5c11\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\u3002\n\n\u7b54\uff1amap\uff0c\u628a\u6bcf\u4e2a\u5355\u8bcd\u62c6\u5f00\u3002\n\njudge\uff1an<=200000\uff0cTLE\uff01\n\n\u8fd9\u5c31\u9700\u8981\u4e00\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u2014\u2014Trie\u6811\uff08\u5b57\u5178\u6811\uff09\n\n\u4e8c\u3001\u539f\u7406\n\n\u5728\u672c\u7bc7\u6587\u7ae0\u4e2d\uff0c\u5047\u8bbe\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\n\n\u5bf9cat\uff0ccash\uff0capp\uff0capple\uff0caply\uff0cok \u5efa\u4e00\u9897\u5b57\u5178\u6811\uff0c\u5efa\u6210\u4e4b\u540e\u5982\u4e0b\u56fe\u6240\u793a\n\n![](https://cdn.luogu.com.cn/upload/pic/72443.png)\n\n\n\u7531\u6b64\u53ef\u4ee5\u770b\u51fa\uff1a\n\n1\u3001\u5b57\u5178\u6811\u7528\u8fb9\u8868\u793a\u5b57\u6bcd\n\n2\u3001\u6709\u76f8\u540c\u524d\u7f00\u7684\u5355\u8bcd\u516c\u7528\u524d\u7f00\u8282\u70b9\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7684\u5f97\u51fa\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u670926\u4e2a\u5b50\u8282\u70b9\uff08\u5728\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u60c5\u51b5\u4e0b\uff09\n\n3\u3001\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\u662f\u7a7a\u7684\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u4fbf\u4e8e\u63d2\u5165\u548c\u67e5\u627e\uff0c\u8fd9\u5c06\u4f1a\u5728\u540e\u9762\u89e3\u91ca\u3002\n\n4\u3001\u6bcf\u4e2a\u5355\u8bcd\u7ed3\u675f\u7684\u65f6\u5019\u7528\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\u8868\u793a\uff0c\u56fe\u4e2d\u7528\u7684\u2018\u2032\uff0c\u90a3\u4e48\u4ece\u6839\u8282\u70b9\u5230\u4efb\u610f\u4e00\u4e2a\u2018\u2019\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u6240\u6709\u5b57\u6bcd\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u3002\n\n\u4e09\u3001\u57fa\u672c\u64cd\u4f5c\n\nA\u3001insert\uff0c\u63d2\u5165\u4e00\u4e2a\u5355\u8bcd\n\n1.\u601d\u8def\n\n  \u4ece\u56fe\u4e2d\u53ef\u4ee5\u76f4\u89c2\u770b\u51fa\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u8fd9\u4e2a\u5355\u8bcd\uff0c\u5982\u679c\u5b57\u6bcd\u5728\u76f8\u5e94\u6839\u8282\u70b9\u4e0b\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5c31\u63d2\u5165\u8fd9\u4e2a\u5b57\u6bcd\uff1b\u5426\u5219\u6cbf\u7740\u5b57\u5178\u6811\u5f80\u4e0b\u8d70\uff0c\u770b\u5355\u8bcd\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u3002\n\n  \u8fd9\u5c31\u4ea7\u751f\u4e00\u4e2a\u95ee\u9898\uff1a\u5f80\u54ea\u513f\u63d2\uff1f\u8ba1\u7b97\u673a\u4e0d\u4f1a\u81ea\u5df1\u9009\u62e9\u4f4d\u7f6e\u63d2\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u5b83\u6307\u5b9a\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u5c31\u9700\u8981\u7ed9\u6bcf\u4e2a\u5b57\u6bcd\u7f16\u53f7\u3002\n\n  \u6211\u4eec\u8bbe\u6570\u7ec4trie[i][j]=k\uff0c\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u7b2cj\u4e2a\u5b69\u5b50\u662f\u7f16\u53f7\u4e3ak\u7684\u8282\u70b9\u3002\n\n \u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n \u8fd9\u91cc\u67092\u79cd\u7f16\u53f7\uff0c\u4e00\u79cd\u662fi\uff0ck\u8868\u793a\u8282\u70b9\u7684\u4f4d\u7f6e\u7f16\u53f7\uff0c\u8fd9\u662f\u76f8\u5bf9\u6574\u68f5\u6811\u800c\u8a00\u7684\uff1b\u53e6\u4e00\u79cd\u662fj\uff0c\u8868\u793a\u8282\u70b9i\u7684\u7b2cj\u7684\u5b69\u5b50\uff0c\u8fd9\u662f\u76f8\u5bf9\u8282\u70b9i\u800c\u8a00\u7684\u3002\n\n \u4e0d\u7406\u89e3\uff1f\u770b\u56fe\n\n \u8fd8\u662f\u5355\u8bcdcat\uff0ccash\uff0capp\uff0capple\uff0caply\uff0cok \n\n\u6ce8\u610f\u8fd9\u91cc\u76f8\u540c\u5b57\u6bcd\u7684\u7f16\u53f7\u53ef\u80fd\u4e0d\u540c\n\n ![](https://cdn.luogu.com.cn/upload/pic/72444.png)\n\n \u6211\u4eec\u5c31\u6309\u8f93\u5165\u987a\u5e8f\u5bf9\u5176\u7f16\u7b2c\u4e00\u79cd\u53f7\uff0c\u7ea2\u8272\u8868\u793a\u7f16\u53f7\u7ed3\u679c\u3002\u56e0\u4e3a\u5148\u8f93\u5165\u7684cat\uff0c\u6240\u4ee5c\uff0ca\uff0ct\u5206\u522b\u662f1,2,3\uff0c\u7136\u540e\u8f93\u5165\u7684\u662fcash\uff0c\u56e0\u4e3ac\uff0ca\u662f\u516c\u5171\u524d\u7f00\uff0c\u6240\u4ee5\u4eces\u5f00\u59cb\u7f16\uff0cs\u662f4\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n \u7b2c\u4e8c\u79cd\u7f16\u53f7\uff0c\u76f8\u5bf9\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u7d2b\u8272\u8868\u793a\u7f16\u53f7\u7ed3\u679c\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u670926\u4e2a\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u4ed6\u4eec\u7684\u5b57\u5178\u5e8f\u4ece0\u2014\u201425\u7f16\u53f7\uff0c\u4e5f\u5c31\u662f\u4ed6\u4eec\u7684ASCLL\u7801-a\u7684ASCLL\u7801\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u76f8\u540c\u5b57\u6bcd\u7684\u7f16\u53f7\u76f8\u540c\n\n![](https://cdn.luogu.com.cn/upload/pic/72447.png)\n\n \u5b9e\u9645\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u90fd\u5e94\u8be5\u4ece0\u7f16\u5230\u2014\u201425\uff0c\u4f46\u8fd9\u6837\u4f1a\u53d1\u73b0\u8bb8\u591a\u4e8b\u6839\u672c\u7528\u4e0d\u5230\u7684\u3002\u6bd4\u5982\u4e0a\u56fe\u7684\u6839\u8282\u70b9\u5e94\u8be5\u5206\u51fa26\u4e2a\u53c9\u3002\u8282\u7ea6\u7a7a\u95f4\uff0c\u7528\u5230\u54ea\u4e2a\u5206\u54ea\u4e2a\u3002\n\n \u8fd9\u6837\u7f16\u53f7\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u56de\u5230\u6570\u7ec4trie[i][j]=k\u3002 \u6570\u7ec4trie[i][j]=k\uff0c\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u7b2cj\u4e2a\u5b69\u5b50\u662f\u7f16\u53f7\u4e3ak\u7684\u8282\u70b9\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u79cd\u7f16\u53f7\u5373\u4e3aj\uff0c\u7b2c\u4e00\u79cd\u7f16\u53f7\u5373\u4e3ai\uff0ck\n\n2\u3001\u4ee3\u7801\n\n```cpp\nvoid insert()//\u63d2\u5165\u5355\u8bcds\n{\n    len=strlen(s);//\u5355\u8bcds\u7684\u957f\u5ea6\n    root=0;//\u6839\u8282\u70b9\u7f16\u53f7\u4e3a0\n    for(int i=0;i<len;i++)\n    {\n        int id=s[i]-'a';//\u7b2c\u4e8c\u79cd\u7f16\u53f7\n        if(!trie[root][id])//\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u4eceroot\u5230id\u7684\u524d\u7f00 \n                    trie[root][id]=++tot;//\u63d2\u5165\uff0ctot\u5373\u4e3a\u7b2c\u4e00\u79cd\u7f16\u53f7\n        root=trie[root][id];//\u987a\u7740\u5b57\u5178\u6811\u5f80\u4e0b\u8d70\n    }\n}\n```\nB\u3001search\uff0c\u67e5\u627e\n\n\u67e5\u627e\u6709\u5f88\u591a\u79cd\uff0c\u53ef\u4ee5\u67e5\u627e\u67d0\u4e00\u4e2a\u524d\u7f00\uff0c\u4e5f\u53ef\u4ee5\u67e5\u627e\u6574\u4e2a\u5355\u8bcd\u3002\n\n\u518d\u6b21\u6211\u4eec\u4ee5\u67e5\u627e\u4e00\u4e2a\u524d\u7f00\u662f\u5426\u51fa\u73b0\u8fc7\u4e3a\u4f8b\u8bb2\u89e3\n\n1\u3001\u601d\u8def\n\n  \u4ece\u5de6\u5f80\u53f3\u4ee5\u6b64\u626b\u63cf\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u987a\u7740\u5b57\u5178\u6811\u5f80\u4e0b\u627e\uff0c\u80fd\u627e\u5230\u8fd9\u4e2a\u5b57\u6bcd\uff0c\u5f80\u4e0b\u8d70\uff0c\u5426\u5219\u7ed3\u675f\u67e5\u627e\uff0c\u5373\u6ca1\u6709\u8fd9\u4e2a\u524d\u7f00\uff1b\u524d\u7f00\u626b\u5b8c\u4e86\uff0c\u8868\u793a\u6709\u8fd9\u4e2a\u524d\u7f00\u3002\n\n2\u3001\u4ee3\u7801\n```cpp\nbool find()\n{\n    len=strlen(s);\n    root=0;//\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u627e\n    for(int i=0;s[i];i++)\n    {\n        int x=s[i]-'a';//\n        if(trie[root][x]==0)   return false;//\u4ee5root\u4e3a\u5934\u7ed3\u70b9\u7684x\u5b57\u6bcd\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0 \n        root=trie[root][x];//\u4e3a\u67e5\u8be2\u4e0b\u4e2a\u5b57\u6bcd\u505a\u51c6\u5907\uff0c\u5f80\u4e0b\u8d70 \n    }\n    return true;//\u627e\u5230\u4e86\n}\n```\n\n3\u3001\u5982\u679c\u662f\u67e5\u8be2\u67d0\u4e2a\u5355\u8bcd\u7684\u8bdd\uff0c\u6211\u4eec\u7528bool\u53d8\u91cf v[i]\u8868\u793a\u8282\u70b9i\u662f\u5426\u662f\u5355\u8bcd\u7ed3\u675f\u7684\u6807\u5fd7\u3002\n\n    \u90a3\u4e48\u6700\u540ereturn\u7684\u662fv[root],\u6240\u4ee5\u5728\u63d2\u5165\u64cd\u4f5c\u4e2d\u63d2\u5165\u5b8c\u6bcf\u4e2a\u5355\u8bcd\u662f\uff0c\u8981\u5bf9\u5355\u8bcd\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684v[i]\u7f6e\u4e3atrue\uff0c\u5176\u4ed6\u7684\u90fd\u662ffalse\n\n4\u3001\u5982\u679c\u662f\u67e5\u8be2\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570\u7684\u8bdd\uff0c\u90a3\u5c31\u5728\u5f00\u4e00\u4e2asum[]\uff0c\u8868\u793a\u4f4d\u7f6ei\u88ab\u8bbf\u95ee\u8fc7\u7684\u6b21\u6570\uff0c\n\n   \u90a3\u4e48\u6700\u540ereturn\u7684\u662fsum[root]\uff0c\u63d2\u5165\u64cd\u4f5c\u4e2d\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u8981\u8ba9\u4ed6\u7684sum++\n\n   \u8fd9\u91cc\u524d\u7f00\u7684\u6b21\u6570\u662f\u6807\u8bb0\u5728\u524d\u7f00\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u3002\n\n  \u6bd4\u5982:\u524d\u7f00abc\u51fa\u73b0\u7684\u6b21\u6570\u6807\u8bb0\u5728c\u6240\u5728\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\n\n ![](https://cdn.luogu.com.cn/upload/pic/72448.png)\n\n\u56db\u3001\u5b8c\u6574\u4ee3\u7801\n\n1\u3001\u67e5\u8be2\u662f\u5426\u51fa\u73b0\n\n\n\u590d\u5236\u4ee3\u7801\n/*\n  trie tree\u7684\u50a8\u5b58\u65b9\u5f0f\uff1a\u5c06\u5b57\u6bcd\u50a8\u5b58\u5728\u8fb9\u4e0a\uff0c\u8fb9\u7684\u8282\u70b9\u8fde\u63a5\u4e0e\u5b83\u76f8\u8fde\u7684\u5b57\u6bcd \n  trie[rt][x]=tot:rt\u662f\u4e0a\u4e2a\u8282\u70b9\u7f16\u53f7\uff0cx\u662f\u5b57\u6bcd\uff0ctot\u662f\u4e0b\u4e2a\u8282\u70b9\u7f16\u53f7 \n*/ \n```cpp\n/*\n  trie tree\u7684\u50a8\u5b58\u65b9\u5f0f\uff1a\u5c06\u5b57\u6bcd\u50a8\u5b58\u5728\u8fb9\u4e0a\uff0c\u8fb9\u7684\u8282\u70b9\u8fde\u63a5\u4e0e\u5b83\u76f8\u8fde\u7684\u5b57\u6bcd \n  trie[rt][x]=tot:rt\u662f\u4e0a\u4e2a\u8282\u70b9\u7f16\u53f7\uff0cx\u662f\u5b57\u6bcd\uff0ctot\u662f\u4e0b\u4e2a\u8282\u70b9\u7f16\u53f7 \n*/ \n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#define maxn 2000010\nusing namespace std;\nint tot=1,n;\nint trie[maxn][26];\n//bool isw[maxn];\u67e5\u8be2\u6574\u4e2a\u5355\u8bcd\u7528\nvoid insert(char *s,int rt)\n{\n    for(int i=0;s[i];i++)\n    {\n        int x=s[i]-'a';\n        if(trie[rt][x]==0)//\u73b0\u5728\u63d2\u5165\u7684\u5b57\u6bcd\u5728\u4e4b\u524d\u540c\u4e00\u8282\u70b9\u5904\u672a\u51fa\u73b0\u8fc7 \n        {\n            trie[rt][x]=++tot;//\u5b57\u6bcd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u4e0d\u505a\u5904\u7406 \n        }\n        rt=trie[rt][x];//\u4e3a\u4e0b\u4e2a\u5b57\u6bcd\u7684\u63d2\u5165\u505a\u51c6\u5907  \n    }\n    /*isw[rt]=true;\u6807\u5fd7\u8be5\u5355\u8bcd\u672b\u4f4d\u5b57\u6bcd\u7684\u5c3e\u7ed3\u70b9\uff0c\u5728\u67e5\u8be2\u6574\u4e2a\u5355\u8bcd\u65f6\u7528\u5230*/\n}\nbool find(char *s,int rt)\n{\n    for(int i=0;s[i];i++)\n    {\n        int x=s[i]-'a';\n        if(trie[rt][x]==0)return false;//\u4ee5rt\u4e3a\u5934\u7ed3\u70b9\u7684x\u5b57\u6bcd\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0 \n        rt=trie[rt][x];//\u4e3a\u67e5\u8be2\u4e0b\u4e2a\u5b57\u6bcd\u505a\u51c6\u5907 \n    }\n    return true;\n    //\u67e5\u8be2\u6574\u4e2a\u5355\u8bcd\u65f6\uff0c\u5e94\u8be5return isw[rt] \n}\nchar s[22];\nint main()\n{\n    tot=0;\n    int rt=1;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        cin>>s;\n        insert(s,rt);\n    }\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        cin>>s;\n        if(find(s,rt))printf(\"YES\\n\");\n        else printf(\"NO\\n\");\n    }\n    return 0;\n}\n\n\u6570\u7ec4\u6a21\u62df\n```\n2\u3001\u67e5\u8be2\u524d\u7f00\u51fa\u73b0\u6b21\u6570\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint trie[400001][26],len,root,tot,sum[400001];\nbool p;\nint n,m; \nchar s[11];\nvoid insert()\n{\n    len=strlen(s);\n    root=0;\n    for(int i=0;i<len;i++)\n    {\n        int id=s[i]-'a';\n        if(!trie[root][id]) trie[root][id]=++tot;\n        sum[trie[root][id]]++;//\u524d\u7f00\u4fdd\u5b58 \n        root=trie[root][id];\n    }\n}\nint search()\n{\n    root=0;\n    len=strlen(s);\n    for(int i=0;i<len;i++)\n    {\n        int id=s[i]-'a';\n        if(!trie[root][id]) return 0;\n        root=trie[root][id];\n    }//root\u7ecf\u8fc7\u6b64\u5faa\u73af\u540e\u53d8\u6210\u524d\u7f00\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\n    return sum[root];\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        cin>>s;\n        insert();\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        cin>>s;\n        printf(\"%d\\n\",search());\n    }\n}\n\n\u6570\u7ec4\u6a21\u62df\n```\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nchar s[11];\nint n,m;\nbool p;\nstruct node\n{\n    int count;\n    node * next[26];\n}*root;\nnode * build()\n{\n    node * k=new(node);\n    k->count=0;\n    memset(k->next,0,sizeof(k->next));\n    return k;\n}\nvoid insert()\n{\n    node * r=root;\n    char * word=s;\n     while(*word)\n    {\n        int id=*word-'a';\n        if(r->next[id]==NULL) r->next[id]=build();\n        r=r->next[id];\n        r->count++;\n        word++;\n    }\n}\nint search()\n{\n    node * r=root;\n    char * word=s;\n    while(*word)\n    {\n        int id=*word-'a';\n        r=r->next[id];\n        if(r==NULL) return 0;\n        word++;\n    }\n    return r->count;\n}\nint main()\n{\n    root=build();\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) \n    {\n            cin>>s;\n            insert();\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        cin>>s;\n        printf(\"%d\\n\",search());\n    }\n}\n```\n\n\u4e94\u3001\u6a21\u677f\u9898\n\nhdu 1251 \u7edf\u8ba1\u96be\u9898 http://acm.hdu.edu.cn/showproblem.php?pid=1251\n\ncodevs 4189 \u5b57\u5178 http://codevs.cn/problem/4189/\n\n\u4f5c\u8005\uff1axxy\n\u51fa\u5904\uff1ahttp://www.cnblogs.com/TheRoadToTheGold/\n\u672c\u6587\u7248\u6743\u5f52\u4f5c\u8005\u548c\u535a\u5ba2\u56ed\u5171\u6709\uff0c\u6b22\u8fce\u8f6c\u8f7d\uff0c\u4f46\u8f6c\u8f7d\u65f6\u8bf7\u4fdd\u7559\u6b64\u6bb5\u58f0\u660e\u3002",
        "postTime": 1549274202,
        "uid": 47488,
        "name": "ZJH365",
        "ccfLevel": 0,
        "title": "\u6d45\u8c08Trie\u6811\uff08\u5b57\u5178\u6811\uff09"
    },
    {
        "content": "### \u58f0\u660e:\n\u6b64\u9898\u89e3\u975e\u6b63\u5e38Trie,\u63a8\u8350\u5148\u5b66\u4e60\u6700\u666e\u901a\u7684Trie\u5e76\u4e86\u89e3\u6307\u9488\u7684\u4f7f\u7528\n### \u5e9f\u8bdd:\n\u5f88\u65e9\u4e4b\u524d\u5c31\u60f3\u5230\u4e86\u4e00\u79cd\u5b57\u5178\u6811,\u8282\u70b9\u5b58\u50a8\u5b57\u7b26\u4e32,\u4ee3\u8868Trie\u6811\u4e0a\u4ee5\u67d0\u5b57\u7b26\u5f00\u5934\u7684\u6240\u6709\u5b50\u6811\u6700\u957f\u516c\u5171\u524d\u7f00.\u597d\u50cf\u8bf4\u7684\u4e0d\u6e05\u695a,\u90a3\u5c31\u518d\u542c\u6211\u4ed4\u7ec6\u8bb2\u89e3\u5427    \n\u5199\u9898\u89e3\u7684\u4e0a\u5348\u6709\u4e86\u7075\u611f,\u7136\u540e\u6839\u636e\u601d\u8def\u6a21\u62df\u4e86\u4e00\u4e0b,\u53ef\u884c\u6027\u633a\u9ad8\u7684.  \n\u5199\u5b8c\u4ee3\u7801\u540e\u63d0\u4ea4AC,\u8dd1\u4e86\u6700\u4f18\u89e3\u7b2c\u56db,\u7136\u800c\u524d\u4e09\u7528\u7684hash\u7b97\u6cd5\u6ca1\u6cd5\u6bd4\u554a.   \n\u6211\u73b0\u6682\u4e14\u547d\u540d\u5b83\u4e3a~~Ciyang_Trie~~(Lumpy_Trie\u5757\u72b6\u5b57\u5178\u6811),\u6000\u7591\u5df2\u7ecf\u6709\u4eba\u53d1\u660e\u8fc7\u4e86.  \n\u4ee3\u7801\u6bd4\u666e\u901a\u7684\u590d\u6742\u4e00\u4e9b,\u6211\u4f7f\u7528\u4e86\u6307\u9488.    \n\u6309\u4efb\u610f\u987a\u5e8f\u63d2\u5165abcd,abcde,bcde,bcef\u56db\u4e2a\u5b57\u7b26\u4e32\u7684Trie\u6811\u957f\u8fd9\u6837:   \n![Trie01](https://cdn.luogu.com.cn/upload/pic/48086.png)   \n\u7ea2\u8272\u8282\u70b9\u4ee3\u8868\u6709\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u8282\u70b9.\n### \u8bc1\u660e:\n\u901a\u8fc7\u4e0e\u6bd4\u8f83\u666e\u901a\u6307\u9488\u7248\u548c\u975e\u6307\u9488\u7248Trie\u6765\u8bc1\u660e\u4e00\u4e0b\u53ef\u884c\u6027.   \n\u6307\u9488\u7248Trie\u53ef\u4f7f\u7528\u52a8\u6001\u5185\u5b58,\u7f3a\u70b9\u662f\u6bcf\u4e2a\u8282\u70b9\u53ea\u4fdd\u5b58\u4e00\u4e2a\u5b57\u7b26,\u800c\u540c\u65f6\u53c8\u8981\u4fdd\u5b5826\u4e2a\u5b50\u8282\u70b9\u7684\u6307\u9488,\u4f1a\u6709\u5927\u91cf\u7684\u7a7a\u6307\u9488\u6765\u5360\u7528\u989d\u5916\u7684\u5185\u5b58,\u4e14new\u8282\u70b9\u591a\u4e86,\u5185\u5b58\u5206\u914d\u5e38\u6570\u8f83\u5927.   \n\u4e3a\u4e86\u51cf\u5c11\u5e38\u6570,\u53ef\u4ee5\u81ea\u5df1\u5199new\u65b9\u6cd5\u6765\u5206\u914d,\u4f46\u65e0\u8bba\u662f\u4ec0\u4e48\u6570\u636e,\u53ea\u8981\u7a0d\u5e26\u968f\u673a\u6027,\u5c31\u4f1a\u6709\u5f88\u591a\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9,\u8fd9\u65e0\u7591\u670925\u4e2a\u7a7a\u6307\u9488\u6d6a\u8d39\u5185\u5b58.    \n\u975e\u6307\u9488\u7248\u5e38\u6570\u5c0f,\u4f46\u7a7a\u95f4\u5206\u914d\u4e5f\u662f\u5f88\u5927\u7684\u95ee\u9898.\n\u7136\u800c\u4ecd\u6709\u5f88\u591a\u4e00\u6761\u94fe\u7684\u6811,\u7a7a\u95f4\u6700\u5927\u6d6a\u8d39N\\*25\u554a...~~\u5148\u4e0d\u8bf4\u5f71\u54cd\u7f8e\u89c2~~\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u5f88\u9ad8,\u6bd5\u7adf\u67e5\u8be2\u4e5f\u662fO(N).       \nLumpy_Trie\u7684\u590d\u6742\u5ea6\u662f\u4f1a\u6539\u53d8\u7684,\u5c31\u662f\u5bf9\u4e00\u6761\u94fe\u60c5\u51b5\u7684\u4f18\u5316,\u7406\u8bba\u6700\u5927\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N)\u5e26\u6709\u4e00\u4e9b\u5e38\u6570.    \nLumpy_Trie\u7f3a\u70b9\u662f\u5199\u8d77\u6765\u6bd4\u666e\u901a\u7684\u66f4\u590d\u6742,\u4f18\u70b9\u662f\u7ecf\u5f97\u8d77\u5927\u6570\u636e\u8003\u91cf,\u800c\u4e14\u63d2\u5165\u6700\u5c0f\u662fO(1),\u7a7a\u95f4\u4e0a\u4e5f\u5c11\u4e86\u5f88\u591a\u7a7a\u6307\u9488. \nLumpy_Trie\u5de7\u5999\u5229\u7528\u5b57\u7b26\u4e32\u6307\u9488,\u8d4b\u503c\u3001\u7ee7\u627f\u7b49\u64cd\u4f5c\u53ea\u9700\u8981\u6307\u9488\u6216\u957f\u5ea6\u53d8\u5316\u5c31\u597d\u4e86.   \n#### \u592a\u591a\u8bc1\u660e\u4e0d\u5982\u4e00\u53e5\u4ee3\u7801,\u6211\u653e\u4e0a\u4ee3\u7801\u7ee7\u7eed\u5206\u6790.     \n### \u89e3\u6790:  \n\u8282\u70b9\u7684\u7ed3\u6784\u4f53,\u76f8\u6bd4\u666e\u901aTrie\u591a\u4e86length\u548c\u5b57\u7b26\u4e32\u6307\u9488:  \n```cpp\n#define clear(a) memset(a, 0, sizeof(a))\n#define copy(a, b) memcpy(a, b, sizeof(a))\n    struct Lumpy_Tnode {\n    \tconst char *pStr;\n        //\u6307\u5411\u5f53\u524d\u5b58\u50a8\u5b57\u7b26\u4e32\u9996\u5143\u7d20\n\t\tint length, isEnd;\n        //length\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 isEnd\u4ee3\u8868\u662f\u5426\u662f\u7ed3\u5c3e\u8282\u70b9\n\t\tLumpy_Tnode *children[26];\n        //26\u4e2a\u5b50\u8282\u70b9\n\t\tinline Lumpy_Tnode() {\n\t\t\tpStr= 0, length= isEnd= 0, clear(children);\n\t\t}\n\t\tinline Lumpy_Tnode(const char *str, int len, int end) {\n\t\t\tpStr= str, length= len, isEnd= end, clear(children);\n\t\t}\n        //\u6784\u9020\u51fd\u6570\n\t} mNode;\n```\n\n#### \u63d2\u5165\u64cd\u4f5c:    \n\u4f7f\u7528\u9012\u5f52\u548c\u5faa\u73af,\u5224\u65ad\u6bd4\u8f83\u591a,\u5148\u770b\u4ee3\u7801(\u770b\u8d77\u6765\u5e38\u6570\u5f88\u5927)      \n\n```cpp\n\tinline void insert(const char *str, int length, Lumpy_Tnode *bNode) {\n    //str\u662f\u6307\u9488,\u6307\u5411\u5f53\u524d\u63d2\u5165\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\t\tif(!length) {\n        //\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0\u4ee3\u8868\u7ed3\u5c3e\n        //\u5176\u5b9e\u662f\u4e3a\u4e86\u4f18\u5316\u4ee3\u7801\u7f8e\u89c2,\u5f53\u4f5c\u9012\u5f52\u8fb9\u754c\n\t\t\tbNode->isEnd= 1;\n\t\t\treturn;\n\t\t}\n\t\tint ch= str[0] - 'a';\n\t\tif(bNode->children[ch]) {\n        //\u5b50\u8282\u70b9\u5df2\u5b58\u5728\n\t\t\tbNode= bNode->children[ch];\n\t\t\tregister int sptr= 0;\n\t\t\twhile(sptr < length && sptr < bNode->length && bNode->pStr[sptr] == str[sptr]) ++sptr;\n            //\u5faa\u73af\u6765\u627e\u5f53\u524d\u5b57\u7b26\u4e32\u548c\u8282\u70b9\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u6700\u957f\u524d\u7f00\n\t\t\tif(sptr != bNode->length) {\n            //\u8282\u70b9\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u63d2\u5165\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\n\t\t\t\tLumpy_Tnode *nNode= new Lumpy_Tnode(bNode->pStr + sptr, bNode->length - sptr, bNode->isEnd);\n                //\u62c6\u6811,\u8fd0\u7528\u5b57\u7b26\u4e32\u6307\u9488\u8fde\u7eed\u5730\u5740\u7684\u7279\u6027\u6765\u64cd\u4f5c\n\t\t\t\tcopy(nNode->children, bNode->children), clear(bNode->children);\n                //\u7ee7\u627f\u539f\u6709\u5b50\u8282\u70b9\u7684\u5404\u79cd\u4fe1\u606f\n\t\t\t\tbNode->isEnd= 0, bNode->children[bNode->pStr[sptr] - 'a']= nNode;\n                //\u6e05\u7a7a\u539f\u6709\u8282\u70b9,\u91cd\u65b0\u521d\u59cb\u5316\n\t\t\t}\n\t\t\tbNode->length= sptr;\n            //\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u957f\u5ea6,\u4ece\u800c\u66f4\u6539\u5f53\u524d\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\n\t\t\tinsert(str + sptr, length - sptr, bNode);\n\t\t}\n\t\telse\n\t\t\tbNode->children[ch]= new Lumpy_Tnode(str, length, 1);\n            //\u4e0d\u5b58\u5728\u5f53\u524d\u9996\u5b57\u6bcd\u7684\u5b50\u8282\u70b9,\u76f4\u63a5new\u5e76\u4e14\u8d4b\u503c\n            //\u56e0\u4e3a\u662f\u6307\u9488\u64cd\u4f5c,\u6240\u4ee5\u4e0d\u9700\u8981O(n)\u590d\u5236\u5b57\u7b26\u4e32,\u7406\u8bba\u4e0a\u590d\u6742\u5ea6O(3)?\n\t\treturn;\n\t}\n    //\u8c03\u7528\u65b9\u5f0f:insert(\u63d2\u5165\u5b57\u7b26\u4e32, \u5b57\u7b26\u4e32\u957f\u5ea6, Trie\u6839\u8282\u70b9);\n```\n\n\u5982\u679c\u4ee3\u7801\u770b\u61c2\u4e86,\u7b2c\u4e00\u53cd\u5e94\u53ef\u80fd\u8ba4\u4e3a\u6307\u9488\u64cd\u4f5c\u6709\u95ee\u9898.   \n\u7684\u786e\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u5728\u63d2\u5165\u540e\u5c31\u4e0d\u80fd\u8fdb\u884c\u6539\u53d8\u4e86,\u6240\u4ee5\u5c31\u53ea\u8981\u5f00\u4e00\u4e2achar\\[N\\]\\[K\\]\u7684\u6570\u7ec4\u6765\u4fdd\u5b58\u8f93\u5165\u7684\u5b57\u7b26\u4e32,K\u4e3a\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6.  \n\u76f8\u6bd4\u8f83\u7a7a\u95f4\u590d\u6742\u5ea6\u603b\u4f53\u4ecd\u7136\u8f83\u5c0f,\u5176\u5b9e\u662f\u628a\u539f\u6765\u6bcf\u4e2a\u8282\u70b9\u5b58\u7684char\u653e\u5230\u4e86\u4e00\u8d77,\u6bcf\u4e2a\u8282\u70b9\u591a\u4e86\u4e00\u4e2a\u6307\u9488.(\u4e0d\u8fc7\u521b\u5efa\u7684\u8282\u70b9\u66f4\u5c11\u4e86,\u6240\u4ee5\u6d6a\u8d39\u7a7a\u95f4\u5c11)   \n\u8fd9\u5176\u4e2d\u5176\u5b9e\u6709\u4e2a\u5f88\u5de7\u5999\u7684\u4e8b,\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u53ef\u80fd\u6307\u5411\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684.\u4ed4\u7ec6\u60f3\u4e86\u60f3,\u5176\u5b9e\u4e5f\u6709\u7a7a\u95f4\u6d6a\u8d39,\u4e0d\u7ba1\u662f\u8282\u70b9\u4e0a\u8fd8\u662f\u6811\u4e0a\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u90fd\u53ea\u6307\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5176\u4ed6\u5b57\u7b26\u4e32\u4e2d\u76f8\u540c\u7684\u5b57\u7b26\u5360\u7528\u7684\u7a7a\u95f4\u5c31\u6c38\u8fdc\u6d6a\u8d39\u6389\u4e86,\u8fd9\u53e5\u8bdd\u4e0d\u61c2\u6ca1\u4e8b,\u56e0\u4e3a\u8fd9\u4e2a\u6d6a\u8d39\u9020\u6210\u7684\u5f71\u54cd\u5f88\u5c0f.    \n\u5982\u679c\u4ee3\u7801\u90fd\u6ca1\u770b\u61c2,\u8fd8\u6709\u56fe\u89e3:  \n\n1. \u5411\u7a7a\u6811\u63d2\u5165abc,\u518d\u63d2\u5165ab:      \n![Trie02](https://cdn.luogu.com.cn/upload/pic/48101.png)\n2. \u518d\u5411\u6b64\u6811\u63d2\u5165ac:     \n![Trie03](https://cdn.luogu.com.cn/upload/pic/48103.png) \n\n\u89e3\u91ca\u4e00\u4e0b\u56fe2:   \n\u6bd4\u8f83ab\u548cac,\u6700\u957f\u516c\u5171\u524d\u7f00\u4e3aa   \n\u65b0\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u9488\u6307\u5411ab\u4e2db\u7684\u8282\u70b9,\u957f\u5ea6\u4e3a1,\u7ee7\u627fab\u7684\u989c\u8272\u548cab\u7684\u5b50\u8282\u70b9.   \n\u6e05\u7a7aab\u7684\u5b50\u8282\u70b9,\u989c\u8272\u6539\u4e3a\u9ed1(\u9ed1\u8868\u793a\u4e0d\u4e3a\u7ed3\u5c3e\u8282\u70b9),ab\u7684\u9996\u5b57\u6bcdb\u5b50\u8282\u70b9\u6307\u5411b.  \n\u5728\u6211\u5b9e\u73b0\u65f6,\u5148\u66f4\u6539\u957f\u5ea6\u4f7fab\u53d8\u4e3aa,\u518d\u5411a\u4e2d\u63d2\u5165c.   \n\u56e0\u4e3a\u6ca1\u6709\u9996\u5b57\u6bcd\u4e3ac\u7684\u5b50\u8282\u70b9,\u76f4\u63a5new\u4e00\u4e2a\u65b0\u7684.  \n\n#### \u67e5\u627e\u64cd\u4f5c:\n\n```cpp\n\tinline int find(const char *str, int length, Lumpy_Tnode *bNode) {\n\t\tif(!length) {\n        //\u9012\u5f52\u5230\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0\n        //\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u7ed3\u5c3e,\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u67e5\u8be2\n\t\t\tif(bNode->isEnd == 1) return bNode->isEnd++;\n\t\t\treturn bNode->isEnd;\n\t\t}\n\t\tint ch= str[0] - 'a';\n\t\tif(bNode->children[ch]) {\n\t\t\tbNode= bNode->children[ch];\n\t\t\tif(length < bNode->length) return 0;\n            //\u81ea\u5e26\u526a\u679d,\u82e5\u5f53\u524d\u67e5\u627e\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e\u5f53\u524d\u516c\u5171\u524d\u7f00,\u90a3\u4e48\u5b57\u5178\u6811\u4e2d\u4e0d\u5b58\u5728\u5f53\u524d\u67e5\u627e\u7684\u5b57\u7b26\u4e32\n\t\t\tregister int sptr= 0;\n\t\t\twhile(sptr < bNode->length && bNode->pStr[sptr] == str[sptr]) ++sptr;\n\t\t\tif(sptr != bNode->length) return 0;\n            //\u6700\u957f\u516c\u5171\u524d\u7f00\u5fc5\u987b\u662f\u5f53\u524d\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\n\t\t\treturn find(str + sptr, length - sptr, bNode);\n\t\t}\n\t\treturn 0;\n        //\u6ca1\u6709\u5b50\u8282\u70b9,\u5b57\u5178\u6811\u4e2d\u4e0d\u5b58\u5728\u5f53\u524d\u67e5\u627e\u7684\u5b57\u7b26\u4e32\n\t}\n    //\u8c03\u7528\u65b9\u5f0f:find(\u67e5\u8be2\u5b57\u7b26\u4e32, \u5b57\u7b26\u4e32\u957f\u5ea6, Trie\u6839\u8282\u70b9);\n```\n\n\u6bd4\u63d2\u5165\u7684\u4ee3\u7801\u7b80\u5355\u591a\u4e86,\u5e76\u4e14\u81ea\u5e26\u526a\u679d,\u6240\u4ee5\u6bd4\u8f83\u5feb.\n### \u5b8c\u6574\u4ee3\u7801:\n#### (\u5f00\u542fO2)\u7528\u65f6: 127ms / \u5185\u5b58: 4248KB\n#### (\u5173\u95edO2)\u7528\u65f6: 144ms / \u5185\u5b58: 4128KB\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\nusing namespace std;\n#define clear(a) memset(a, 0, sizeof(a))\n#define copy(a, b) memcpy(a, b, sizeof(a))\nstruct Lumpy_Trie {\n\tstruct Lumpy_Tnode {\n\t\tconst char *pStr;\n\t\tint length, isEnd;\n\t\tLumpy_Tnode *children[26];\n\t\tinline Lumpy_Tnode() {\n\t\t\tpStr= 0, length= isEnd= 0, clear(children);\n\t\t}\n\t\tinline Lumpy_Tnode(const char *str, int len, int end) {\n\t\t\tpStr= str, length= len, isEnd= end, clear(children);\n\t\t}\n\t} mNode;\n\tinline void insert(const char *str, int length, Lumpy_Tnode *bNode) {\n\t\tif(!length) {\n\t\t\tbNode->isEnd= 1;\n\t\t\treturn;\n\t\t}\n\t\tint ch= str[0] - 'a';\n\t\tif(bNode->children[ch]) {\n\t\t\tbNode= bNode->children[ch];\n\t\t\tregister int sptr= 0;\n\t\t\twhile(sptr < length && sptr < bNode->length && bNode->pStr[sptr] == str[sptr]) ++sptr;\n\t\t\tif(sptr != bNode->length) {\n\t\t\t\tLumpy_Tnode *nNode= new Lumpy_Tnode(bNode->pStr + sptr, bNode->length - sptr, bNode->isEnd);\n\t\t\t\tcopy(nNode->children, bNode->children), clear(bNode->children);\n\t\t\t\tbNode->isEnd= 0, bNode->children[bNode->pStr[sptr] - 'a']= nNode;\n\t\t\t}\n\t\t\tbNode->length= sptr;\n\t\t\tinsert(str + sptr, length - sptr, bNode);\n\t\t}\n\t\telse\n\t\t\tbNode->children[ch]= new Lumpy_Tnode(str, length, 1);\n\t\treturn;\n\t}\n\tinline int find(const char *str, int length, Lumpy_Tnode *bNode) {\n\t\tif(length == 0) {\n\t\t\tif(bNode->isEnd == 1) return bNode->isEnd++;\n\t\t\treturn bNode->isEnd;\n\t\t}\n\t\tint ch= str[0] - 'a';\n\t\tif(bNode->children[ch]) {\n\t\t\tbNode= bNode->children[ch];\n\t\t\tif(length < bNode->length) return 0;\n\t\t\tregister int sptr= 0;\n\t\t\twhile(sptr < bNode->length && bNode->pStr[sptr] == str[sptr]) ++sptr;\n\t\t\tif(sptr != bNode->length) return 0;\n\t\t\treturn find(str + sptr, length - sptr, bNode);\n\t\t}\n\t\treturn 0;\n\t}\n} t;\nchar allstr[10001][51], tmp[51];\nint n;\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(register int i= 0; i < n; i++) {\n\t\tscanf(\"%s\", allstr[i]);\n\t\tt.insert(allstr[i], strlen(allstr[i]), &t.mNode);\n\t}\n\tscanf(\"%d\", &n);\n\tfor(register int i= 0, j; i < n; i++) {\n\t\tscanf(\"%s\", tmp);\n\t\tj= t.find(tmp, strlen(tmp), &t.mNode);\n\t\tswitch(j) {\n\t\t\tcase 0: printf(\"WRONG\\n\"); break;\n\t\t\tcase 1: printf(\"OK\\n\"); break;\n\t\t\tcase 2: printf(\"REPEAT\\n\"); break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u6700\u9700\u8981\u6ce8\u610f\u7684\u4e8b,\u8981\u7528\u6570\u7ec4\u4fdd\u5b58\u8f93\u5165\u7684\u5b57\u7b26\u4e32,\u4e0d\u80fd\u66f4\u6539!!!\n### \u540e\u7eed:\n\u6211\u5199\u7684\u5e38\u6570\u53ef\u80fd\u633a\u5927,\u5e0c\u671bdalao\u4eec\u8bd5\u8bd5\u5404\u79cd\u5361\u5e38\u4f18\u5316...  \n\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u641e\u4e2a\u5927\u4e8b\u60c5,~~\u8fd9\u4e2a\u5b57\u5178\u6811\u51fa\u540d\u4e86\u522b\u5fd8\u4e86Ciyang~~(\u51fa\u540d\u6211\u5c31\u5973\u88c5\u4e86)  \n\u53c8\u60f3\u4e86\u4e00\u4e0b,\u5e94\u8be5\u5f88\u5bb9\u6613\u6539\u6210\u53ef\u6301\u4e45\u5316Trie.   \n\u5982\u679c\u8fd9\u4e2a\u7b97\u6cd5\u65e9\u5c31\u6709\u4eba\u53d1\u660e\u4e86\u544a\u8bc9\u6211\u4e00\u4e0b.   \n\n\u5e0c\u671b\u9898\u89e3\u80fd\u8fc7!!!",
        "postTime": 1546728834,
        "uid": 109815,
        "name": "Ciyang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "---\n### \u524d\u8bb0\n---\n\n\u4ec5\u4ec5\u662f\u4e00\u4e9b ~~\u5e9f\u8bdd~~ \u6211\u4e2a\u4eba\u7684\u4f53\u4f1a\uff0cdalao\u4eec\u53ef\u4ee5\u7565\u8fc7\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8bf4\u660e\u672c\u849f\u84bb\u548c\u5927\u7287\u4e4b\u95f4\u7684\u8ddd\u79bb\u7f29\u77ed\u4e860.1E-10000000\u4e2aOI\u5355\u4f4d\uff0c\u4f46\u540c\u65f6\uff0c\u8fd90.1E-10000000\u4e5f\u8c61\u5f81\u4e86\u6211\u81ea\u8eab\u7684\u4e00\u4e9b\u8fdb\u6b65\u5427\n\n\u4ece\u5b66\u4e60\u9898\u89e3\u5230\u5c06\u81ea\u5df1\u7684\u601d\u8003\u5199\u51fa\u6765\u548c\u5927\u5bb6\u5206\u4eab\uff0c\u662f\u4e00\u4ef6\u5feb\u4e50\u800c\u6709\u610f\u4e49\u7684\u4e8b\u60c5\n\n---\n### \u63d0\u9192\n---\n\n\u9002\u5408\u6709\u4e00\u5b9aSTL\u5b66\u4e60\u57fa\u7840\u7684C++\u7a0b\u5e8f\u733f\u5b66\u4e60\n\n\u4f46\u7531\u4e8e\u672c\u849f\u84bb\u4e0d\u61c2\u9ad8\u6df1\u7684\u7b97\u6cd5\uff0c\u53ea\u80fd\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u7684\u7b80\u5355\u7b97\u6cd5\u4e86\n\n---\n### \u6b63\u6587\n---\n\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u611f\u89c9\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u9ad8\u6df1\u7684\u7b97\u6cd5\uff0c\u800c\u662f ~~\u4f4e\u4fd7\u7684~~ \u66b4\u529b\n\n\u4e8e\u662f\u62c9\u5230\u6570\u636e\u8303\u56f4\uff0c\u611f\u89c9\u6709\u70b9\u60ac\uff0c\u601d\u8003\u600e\u4e48\u4f18\u5316......\n\n**\u66b4\u529b\u7684\u60f3\u6cd5**\u662f\u5148\u50a8\u5b58\u5b66\u751f\u540d\u5b57\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u67e5\u627e\u70b9\u7684\u540d\u662f\u5426\u51fa\u73b0\u8fc7\u6216\u662f\u4e0d\u5b58\u5728\u3002\n\n\u5bb9\u6613\u770b\u51fa\uff0cn+m\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u90a3\u4e48\u662f\u5426\u6709\u4e00\u79cd\u7b97\u6cd5\u80fd\u591f\u5feb\u901f\u5730\u67e5\u627e\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7\u91cd\u590d\u5462\uff1f\n\n\u6807\u8bb0\u6570\u7ec4\u6709\u8fd9\u79cd\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u65e0\u6cd5\u6807\u8bb0string\u7c7b\u578b\uff0c\u800c\u4e14\u592a\u8017\u5185\u5b58\n\n\u4e8e\u662f\u60f3\u5230\u5229\u7528C++\u7684STL\u5e93**map**\u7684\u529f\u80fd\u6765\u5b9e\u73b0\n\n\n\u849f\u84bb\u7684\u4ee3\u7801\u5c31\u6b64\u8bde\u751f\uff1a\n\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nmap<string,int>mp;\nstring s;\nint n,m;\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {\n    \tcin>>s;\t\t//\u6ce8\u610fstring\u7c7b\u578b\u8f93\u5165\u4e0d\u80fd\u7528scanf \n        mp[s]++;\t\t//map\u7528\u6cd5\u540c\u6570\u7ec4\uff0c\u65b9\u4fbf\u5427~\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n        cin>>s;\n        if(mp[s]==1) {\t\t//\u5728\u540d\u5355\u4e2d\u4f46\u672a\u88ab\u70b9\u5230 \n\t\t\tprintf(\"OK\\n\");\n\t\t\tmp[s]++;\t\t\t//\u5df2\u70b9\u5230 \n\t\t}\n        else if(mp[s]==2) printf(\"REPEAT\\n\");\t//\u91cd\u590d\u4e86 \n        else printf(\"WRONG\\n\");\t\t//\u6ca1\u51fa\u73b0\u8fc7 \n    }\n    return 0;\n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1572854551,
        "uid": 81773,
        "name": "\u68ee\u90c1\u66ae\u6b4c_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u7528\u201cP2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u201d\u8fd9\u9053\u9898\uff0c\u6765\u8bf4\u4e00\u4e0btrie\u6811\u5427\u3002\n\ntrie\u6811\u4e5f\u79f0\u5b57\u5178\u6811\uff0c\u5c31\u662f\u4f60\u67e5\u5b57\u5178\u7684\u65b9\u6cd5\uff0c\u5148\u662f\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e09\u4e2a\u3002\u3002\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u628a\u5f88\u591a\u4e2a\u5b57\u7b26\u4e32\u5408\u5e76\u6210\u4e00\u68f5\u6811\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/15663.png)\n\u56fe\u4e0a\u7684\u5355\u8bcd\u6709\uff1a\n```\nBB\nBC\nC\nDDA\nDDC\n```\n\u73b0\u5728\u4f60\u4f1a\u53d1\u73b0\uff0c\u539f\u6765\u67e5\u627e\u4e00\u4e2a\u5355\u8bcd\u9700\u8981\u641c\u7d22n\u00d7s\uff08\u5355\u8bcd\u957f\u5ea6\uff09\u904d\uff0c\u800c\u73b0\u5728\u53ea\u7528\u67e5\u627es\u904d\u5c31\u53ef\u4ee5\u4e86\u3002\u7701\u53bb\u4e86\u5927\u91cf\u7684\u65f6\u95f4\u3002\n\u4f46\u662f\u4f1a\u5360\u4e00\u4e9b\u7a7a\u95f4\uff0c\u76f8\u5f53\u4e8e\u6bcf\u68f5\u6811\u4f1a\u670926\u4e2a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4f60\u9700\u8981\u5f0026\u500d\u7684\u7a7a\u95f4\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u5177\u4f53\u5b9e\u73b0\u4e00\u4e0btrie\u6811\u7684\u63d2\u5165\u4e0e\u67e5\u8be2\u8fc7\u7a0b\n\u9996\u5148\u6784\u9020\u7ed3\u6784\u4f53\uff1a\n```\nstruct node\n{\n    int cnt;//\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\n    bool done;//\u8fd9\u4e2a\u540d\u5b57\u662f\u5426\u53eb\u8fc7\n    bool isend;//\u8fd9\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\n    int next[26];//next[i]\u8868\u793a\u5f53\u524d\u8282\u70b9i\u5b57\u6bcd\uff080\u662fa\uff0c1\u662fb\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u5b57\u6bcd\u7684\u5b50\u8282\u70b9\u5c31\u662f0\n    node()//\u7ed3\u6784\u4f53\u4e2d\u8d4b\u503c\n    {\n        done=0;\n        isend=0;\n        memset(next,0,sizeof(next));\n    }\t\n}tree[MAXN];//\u6784\u5efa\u6570\u7ec4\uff0c\u6ce8\u610f\u591a\u500d\u6570\u5185\u5b58\n```\n\u8fd9\u4e2a\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u96be\u7684\uff0c\u7279\u522b\u8bf4\u4e00\u4e0bnext\u6570\u7ec4\uff0c\u4ee5\u521a\u624d\u7684\u56fe\u4e3a\u4f8b\uff0c\u5982\u679c\u6839\u8282\u70b9\u7f16\u53f7\u662f0\uff0c\u6700\u4e0a\u9762\u7684BCD\u5b50\u8282\u70b9\u7f16\u53f7\u5206\u522b\u662f1,2,3\uff0c\u90a3\u4e48tree[0].next[1]=1,tree[0].next[3]=3\n\u7136\u540e\u5c31\u662f\u63d2\u5165\u4e86\n\u73b0\u5728\uff0c\u5f00\u59cb\u662f\u4e00\u9897\u7a7a\u6811\uff0c\u53ea\u6709\u5b64\u96f6\u96f6\u7684\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u4e0a\u9762\u4ec0\u4e48\u4e5f\u6ca1\u6709\n![](https://cdn.luogu.com.cn/upload/pic/15667.png)\n\u6211\u4eec\u5148\u8bb0\u5f55\u4e00\u4e2atotal\uff0c\u4ee3\u8868\u8282\u70b9\u4e2a\u6570\uff0c\u8fd8\u6709\u4e00\u4e2alast\uff0c\u4ee3\u8868\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u5e8f\u53f7\n\u7136\u540e\uff0c\u4f60\u63d2\u5165AB\u8fd9\u4e2a\u5b57\u7b26\u4e32\n\u5f00\u59cb\u63d2\u5165A\uff0cA\u7684cnt\u662f++total\uff0c1,1\u7684last\u662f0\uff0ctree[0].next[0]=1.\n\u7136\u540e\u63d2\u5165B\uff0ccnt=++total=2,last=1\ntree[1].next[1]=2.\n\u56e0\u4e3aB\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u6807\u8bb0B\n![](https://cdn.luogu.com.cn/upload/pic/15674.png)\n\u7136\u540e\u63d2\u5165\u65b0\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1aACD\n\u5f00\u59cb\u662fA\uff0c\u53d1\u73b0tree[0].next[0]!=0\u4e86\uff0c\u8bf4\u660e\u5df2\u7ecf\u6784\u5efa\u8fc7\u8282\u70b9\u4e86\uff0c\u76f4\u63a5last=tree[0].next[0]=1\n\u7136\u540e\u662fC\uff0c\u53d1\u73b0tree[1].next[2]==0,\u6784\u9020\u65b0\u7684\u8282\u70b9\ncnt=++total=3,last=3.\n![](https://cdn.luogu.com.cn/upload/pic/15676.png)\n\u7136\u540e\u5982\u4e0a\u63d2\u5165D\uff0c\u540c\u6837\u6807\u8bb0D\n![](https://cdn.luogu.com.cn/upload/pic/15677.png)\n\u6784\u9020\u5c31\u5b8c\u6210\u4e86\uff0c\u53d8\u6210\u4ee3\u7801\u662f\u8fd9\u4e2a\u6837\u5b50\n```\nvoid insert(string s)\n{\n    int l=s.size();//\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\n    int last=0;\n    for(int i=0;i<l;i++)\n    {\n        if(tree[last].next[s[i]-'a']==0)//\u5982\u679c\u6ca1\u6709\u8282\u70b9\n        {\n            total++;\n            tree[total].cnt=total;//\u6784\u5efa\u8282\u70b9\n            tree[last].next[s[i]-'a']=total;\n            last=total;\n        }\n        else//\u6709\u8282\u70b9\u5c31\u76f4\u63a5\u5f80\u4e0b\n            last=tree[last].next[s[i]-'a'];\n        if(i==l-1)//\u6700\u540e\u4e00\u4e2a\u6807\u8bb0\u4e00\u4e0b\n            tree[last].isend=1;\n    }\n    return ;\n}\n```\n\u7136\u540e\u5c31\u662f\u67e5\u8be2\u4e86\n\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5728\u8fd9\u4e2a\u4e66\u4e0a\n1\u3001\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u7b26\u6ca1\u6709\u5728\u6811\u4e0a\u51fa\u73b0\uff0c\u5219\u662fwrong\n2\u3001\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0a\u6ca1\u6709\u7ed3\u675f\u6807\u8bb0\uff0c\u5219\u662fwrong\n3\u3001\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5df2\u7ecf\u88ab\u627e\u8fc7\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684done\u662f1\uff0c\u90a3\u4e48\u662frepeat\n4\u3001\u5269\u4e0b\u60c5\u51b5\u5c31\u662fOK\u4e86\n\u67e5\u8be2\u8fc7\u7a0b\u5c31\u662flast=tree[last].next[s[i]-'a'];\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n```\nint find(string s)\n{\n    int l=s.size();\n    int last=0;\n    for(int i=0;i<l;i++)\n    {\n        if(tree[last].next[s[i]-'a']==0)//\u5224\u5b9a1\n            return 0;\n        last=tree[last].next[s[i]-'a'];\n    }\n    if(!tree[last].isend)//\u5224\u5b9a2\n        return 0;\n    if(tree[last].done)//\u5224\u5b9a3\n        return 2;\n    tree[last].done=1;\n    return 1;//\u5224\u5b9a4\n}\n```\n\u597d\u4e86\uff0c\u5230\u4e86\u8fd9\u91cc\uff0c\u5982\u679c\u4f60\u662f\u8ba4\u8ba4\u771f\u771f\u770b\u9898\u89e3\uff0c\u5e76\u4e14\u8ba4\u8ba4\u771f\u771f\u601d\u8003\u8fc7\u7684\uff0c\u9a6c\u4e48\u4f60\u5e94\u8be5\u4f1a\u505a\u4e86\uff0c\u5982\u679c\u4f60\u5bf9\u81ea\u5df1\u6709\u8db3\u591f\u7684\u4fe1\u5fc3\uff0c\u90a3\u4e48\u5c31\u770b\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u628a\u81ea\u5df1\u7684\u7a0b\u5e8f\u5199\u51fa\u6765\uff0c\u81ea\u5df1\u8c03\u8bd5\uff0c\u5982\u679c\u4f60\u5b9e\u5728\u5199\u4e0d\u51fa\u6765\uff0c\u5c31\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u5427\uff01\n```\n#include <bits/stdc++.h>\n#define MAXN 1000010\nusing namespace std;\nint read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    for(;!isdigit(ch);ch=getchar())\n        if(ch=='-')\n            f=-1;\n    for(;isdigit(ch);ch=getchar())\n        x=x*10+ch-'0';\n    return x*f;\n}\nstruct node\n{\n    int cnt;\n    bool done;\n    bool isend;\n    int next[26];\n    node()\n    {\n        done=0;\n        isend=0;\n        memset(next,0,sizeof(next));\n    }\t\n}tree[MAXN];\nint total=0;\nvoid insert(string s)\n{\n    int l=s.size();\n    int last=0;\n    for(int i=0;i<l;i++)\n    {\n        if(tree[last].next[s[i]-'a']==0)\n        {\n            total++;\n            tree[total].cnt=total;\n            tree[last].next[s[i]-'a']=total;\n            last=total;\n        }\n        else\n            last=tree[last].next[s[i]-'a'];\n        if(i==l-1)\n            tree[last].isend=1;\n    }\n    return ;\n}\nint find(string s)\n{\n    int l=s.size();\n    int last=0;\n    for(int i=0;i<l;i++)\n    {\n        if(tree[last].next[s[i]-'a']==0)\n            return 0;\n        last=tree[last].next[s[i]-'a'];\n    }\n    if(!tree[last].isend)\n        return 0;\n    if(tree[last].done)\n        return 2;\n    tree[last].done=1;\n    return 1;\n}\nint main()\n{\n    int n,m;\n    string s;\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        cin>>s;\n        insert(s);\n    }\n    m=read();\n    for(int i=1;i<=m;i++)\n    {\n        cin>>s;\n        int p=find(s);\n        if(p==0)\n            cout<<\"WRONG\"<<endl;\n        if(p==1)\n            cout<<\"OK\"<<endl;\n        if(p==2)\n            cout<<\"REPEAT\"<<endl;\n    }\n    return 0;\n}\n\n```\ntrie\u6811\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u5b57\u7b26\u4e32\u7b97\u6cd5\uff0c\u540e\u9762\u8fd8\u6709\u66f4\u96be\u7684KMP\uff0cAC\u81ea\u52a8\u673a\uff0c\u80fd\u72ec\u7acb\u5199trie\u6811\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6280\u80fd\uff0c\u6240\u4ee5\u5927\u5bb6\u4e00\u5b9a\u4e0d\u8981\u7c98\u4ee3\u7801\uff0c\u4e00\u5b9a\u8981\u81ea\u5df1\u5207\u65ad\u7f51\u7ebf\u4ee5\u540e\u624b\u6253\u4e00\u904d\u3002\n\n~~\u613f\u516c\u5b59\u79bb\u4e0e\u4f60\u540c\u5728~~",
        "postTime": 1521206843,
        "uid": 39942,
        "name": "TJor",
        "ccfLevel": 0,
        "title": "trie\u6811"
    },
    {
        "content": "\u53d1\u4e00\u4e2a\u6570\u7ec4Trie\u6811\u7684\u9898\u89e3\uff0c\u8dd1\u4e86300ms\uff0c\u7a7a\u95f430.0MB\uff0c\u8bf7\u653e\u5fc3\u98df\u7528\u3002\n\n\u672c\u9898\u662f\u4e00\u4e2aTrie\u6811\u6a21\u677f\u9898\uff0c\u63d2\u5165\u64cd\u4f5c\u4e0d\u5fc5\u8bf4\uff0c\u53ea\u5728\u5b57\u7b26\u4e32\u7ed3\u5c3e\u52a0\u4e0a\u5b58\u5728\u6807\u8bb0\u5373\u53ef\uff1b\u67e5\u8be2\u64cd\u4f5c\u8fd4\u56de\u7684\u4e09\u79cd\u72b6\u6001\u5219\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\uff0c\u5224\u65ad\u662f\u5426\u5df2\u88ab\u67e5\u8be2\u8fc7\u3002\n\n\u591a\u8bf4\u65e0\u76ca\uff0c\u4e0b\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#define re register\nstruct Trie{\n    bool count; int next[26]; bool exist; //exist\u8868\u793a\u6b64\u5904\u662f\u5426\u4e3a\u4e00\u4e2a\u5355\u8bcd\uff1bcount\u8868\u793a\u6b64\u5355\u8bcd\u662f\u5426\u5df2\u88ab\u67e5\u8be2\u3002\n}a[500100]; int top(1);\nchar str[60]; int n, m;\nchar buf[10000], *p = buf, *end = buf; int lent; //\u4e0d\u8981\u5728\u610f\u8bfb\u5165\u4f18\u5316\uff0c\u4f7f\u7528scanf(\"%d\") \u4e0e scanf(\"%s\") \u5bf9\u5e94\u76f8\u5e94\u8bfb\u5165\u5373\u53ef\u3002\ninline char getChar() {\n    if(p == end) {\n        if(feof(stdin)) return '\\0';\n        p = buf, end = buf + fread(buf, 1, 10000, stdin);\n    }\n    return *(p++);\n}\ninline void getString(char* str) {\n    lent = 0; char _c;\n    while (!isalpha(_c = getChar()));\n    do str[lent++] = _c;\n    while (isalpha(_c = getChar()));\n    str[lent] = '\\0';\n    return ;\n}\ninline void getNum(int& x) {\n    x = 0; char c;\n    while(!isdigit(c = getChar()));\n    do x = x * 10 + (c - '0');\n    while(isdigit(c = getChar()));\n    return ;\n}\ninline void Trie_insert() {//\u666e\u901ainsert\u64cd\u4f5c\uff0c\u5c06\u5b57\u7b26\u4e32\u4e00\u4e00\u52a0\u5165\u5b57\u5178\u4e2d\n    int num(0), root = 1;\n    for (re int i = 0; str[i]; ++i) {\n        num = str[i] - 'a';\n        if(!a[root].next[num]) a[root].next[num] = ++top;\n        root = a[root].next[num];\n    }\n    a[root].exist = true;\n    return ;\n}\ninline int Trie_search() {//\u666e\u901asearch\u64cd\u4f5c\uff0c\u67e5\u8be2\u662f\u5426\u5b58\u5728\u8be5\u5b57\u7b26\u4e32\n    int num(0), root = 1;\n    for (re int i = 0; str[i]; ++i) {\n        num = str[i] - 'a';\n        if(!a[root].next[num]) return 0;  //\u82e5\u65e0\u6cd5\u67e5\u8be2\u5230\u540e\u7ee7\u7684\u5b57\u6bcd\uff0c\u76f4\u63a5\u9000\u51fa\n        root = a[root].next[num];\n    }\n    if(!a[root].exist) return 0;  //\u82e5\u6b64\u5904\u4e0d\u5b58\u5728\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u201cWRONG\u201d\n    else if(a[root].count) return 2;  //\u82e5\u6b64\u5904\u5b57\u7b26\u4e32\u5df2\u88ab\u67e5\u8be2\uff0c\u8fd4\u56de\u201cREPEAT\u201d\n    a[root].count = true;  //\u82e5\u4ee5\u4e0a\u5747\u4e0d\u6ee1\u8db3\uff0c\u8bf4\u660e\u5408\u6cd5\n    return 1;  //\u6b64\u5b57\u7b26\u4e32\u6807\u8bb0\u4e3a\u5df2\u67e5\u8be2\uff0c\u8fd4\u56de\u201cOK\u201d\n}\nint main() {\n    //freopen(\"Trie_Tree.in\", \"r\", stdin);\u672c\u5730\u6d4b\u8bd5\u7528\n    getNum(n);\n    for (re int i = 1; i <= n; ++i) {  //\u63d2\u5165\n        memset(str, 0, sizeof str);\n        getString(str);\n        Trie_insert();\n    }\n    getNum(m);\n    scanf(\"%d\", &m);\n    for (re int i = 1; i <= m; ++i) {  //\u67e5\u8be2\n        memset(str, 0, sizeof str);\n        getString(str);\n        int tmp = Trie_search();\n        if(tmp == 0) printf(\"WRONG\\n\");  //\u5206\u7c7b\u8ba8\u8bba\n        else if(tmp == 1) printf(\"OK\\n\");\n        else if(tmp == 2) printf(\"REPEAT\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1502871607,
        "uid": 17381,
        "name": "mzq667",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u6ca1\u4eba\u7528pbds??\n\n\u4ecb\u7ecd\u4e00\u4e0bpb\\_ds\u5e93\u4e2d\u7684hash\\_table\uff0c\u5f88\u591a\u65f6\u5019\u90fd\u6bd4map\u5feb\uff0c(\u867d\u7136\u5728\u6d1b\u8c37\u4e0a\u4e00\u70b9\u4e5f\u4e0d\u660e\u663e)\n\nhash\\_table\u6709cc\\_hash\\_table\u548cgp\\_hash\\_table2\u79cd\n\ngp\\_hash\\_table\u7a0d\u5feb\u4e00\u4e9b\uff0c\u4f46\u662fcc\\_hash\\_table\u6709\u53bb\u91cd\u529f\u80fd\uff0c\u8fd9\u91cc\u91c7\u7528gp\\_hash\\_table\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp> //\u8fd92\u884c\u662fpbds\u5934\u6587\u4ef6\n#include<cstring>\n#define For(i,j,k) for(int i=j;i<=k;i++)\nusing namespace std;\nusing namespace __gnu_pbds; //\u4e5f\u662f\u5934\u6587\u4ef6\nint read(){\n    int l=1,x=0; char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if (ch=='-') ch=getchar(),l=-1;\n    while(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return x*l;\n}\ngp_hash_table<string,int> pb;\nint main(){\n    int n=read(); char c[60];\n    For(i,1,n) scanf(\"%s\",c),pb[c]=1;\n    int m=read();\n    For(i,1,m) {\n        scanf(\"%s\",c);\n        if (pb[c]==1) pb[c]=2,printf(\"OK\\n\");\n        else if (pb[c]==2) printf(\"REPEAT\\n\");\n        else printf(\"WRONG\\n\"); //\u64cd\u4f5c\u90fd\u8ddfmap\u5dee\u4e0d\u591a\n    }\n    return 0;\n}\n```",
        "postTime": 1499241352,
        "uid": 20821,
        "name": "wjy666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "qwq\uff01\u4e3a\u4ec0\u4e48\uff01\u6728\u6709\u975e\u7ed3\u6784\u4f53\u975e\u6307\u9488\u7684\u9898\u89e3\u600e\u4e48\u9614\u4ee5\uff01\u6240\u4ee5\uff0c \u6211\u6765\u8fbd~\u54bb\u54bb\u54bb~\n[\u9898\u9762](https://www.luogu.org/problemnew/show/P2580)\n\u6765\u5206\u6790\uff0c \u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u4e00\u68f5\u6811\uff0c\u6765\u5b58\u50a8\u6574\u4e2a\u540d\u5355\uff0c \u7136\u540e\u518d\u5224\u65ad\n```cpp\nfor (int i = 1; i <= n; i++) {\n\t\troot = 0;\n\t\tcin >> ch;\n\t\tint len = strlen (ch);\n\t\tfor (int j = 0; j < len; j++) {\n\t\t\tint nu = ch[j] - 'a';\n\t\t\tif (!tr[root][nu]) tr[root][nu] = ++tot;\n\t\t\troot = tr[root][nu];\n\t\t}\n\t\tf[root] = 1;\n\t}\n```\n\u8fd9\u4e00\u6bb5\u4ee3\u7801\u662f\u5177\u4f53\u7684\u5b58\u50a8\u7684\u8fc7\u7a0b\uff0c f\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u6574\u4e2a\u5355\u8bcd\u88ab\u7528\u8fc7\u51e0\u6b21\u3002\u53ef\u4ee5\u81ea\u5df1\u5206\u6790\u54c1\u5473\u4e00\u54c8\uff0c \u8fd9\u4e2aroot\u53d8\u91cf\u5230\u6700\u540e\u5b58\u50a8\u7684\u5176\u5b9e\u5c31\u662f\u60a8\u76ee\u524d\u5b58\u50a8\u7684\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c \u4e5f\u5c31\u662f\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5355\u8bcd\u7684\u7ed3\u675f\uff0c \u6240\u4ee5\u76f4\u63a5\u7528root\u8fd9\u4e2a\u53d8\u91cf\u6765\u8868\u793a\u8fd9\u4e2a\u5355\u8bcd\u88ab\u7528\u8fc7\u51e0\u6b21\u5373\u53ef\u3002\n```cpp\nfor (int j = 0; j < len; j++) {\n\t\t\tint nu = ch[j] - 'a';\n\t\t\tif (!tr[root][nu]) {\n\t\t\t\tprintf (\"WRONG\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\troot = tr[root][nu];\n\t\t\tif (j == len - 1 && f[root] == 2) printf (\"REPEAT\\n\");\n\t\t\tif (j == len - 1 && f[root] == 1) f[root] = 2,printf (\"OK\\n\"); \n\t\t}\n```\n\u67e5\u8be2\uff0c \u6839\u636e\u9898\u76ee\u610f\u601d\uff0c \u6309\u8981\u6c42\u8f93\u51fa\uff0c \u5e76\u4e14\u8981\u6ce8\u610f\u6362\u884c\uff0c \u5927\u5199\u4e4b\u7c7b\u7684\u7ec6\u8282\u6027\u95ee\u9898\u3002\u8981\u6ce8\u610f\uff0c \u6bcf\u4e00\u6b21\u5224\u65ad\u5230\u6700\u540e\u7684\u65f6\u5019\uff0c \u5224\u65ad\u662f\u5426\u662f\u88ab\u7528\u8fc7\uff0c \u6ca1\u6709\u88ab\u7528\u8fc7\u7684\uff0c \u9700\u8981\u6807\u8bb0\u8868\u793a\u5e94\u7ecf\u7528\u8fc7\u4e86\n\n\u518d\u5c31\u662froot\u8fd9\u4e2a\u53d8\u91cf\u6bcf\u6b21\u90fd\u8981\u66f4\u65b0~~\uff08\u6211\u771f\u7684\u8c03\u4e86\u597d\u4e45\uff09~~\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nchar ch[800000];\nint n, m, tr[8000000][26], s, root, tot, f[8000000];\nint main () {\n\tscanf (\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) {\n\t\troot = 0;\n\t\tcin >> ch;\n\t\tint len = strlen (ch);\n\t\tfor (int j = 0; j < len; j++) {\n\t\t\tint nu = ch[j] - 'a';\n\t\t\tif (!tr[root][nu]) tr[root][nu] = ++tot;\n\t\t\troot = tr[root][nu];\n\t\t}\n\t\tf[root] = 1;\n\t}\n\tscanf (\"%d\", &m);\n\tfor (int i = 1; i <= m; i++) {\n\t\troot = 0;\n\t\tcin >> ch;\n\t\tint len = strlen (ch);\n\t\tfor (int j = 0; j < len; j++) {\n\t\t\tint nu = ch[j] - 'a';\n\t\t\tif (!tr[root][nu]) {\n\t\t\t\tprintf (\"WRONG\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\troot = tr[root][nu];\n\t\t\tif (j == len - 1 && f[root] == 2) printf (\"REPEAT\\n\");\n\t\t\tif (j == len - 1 && f[root] == 1) f[root] = 2,printf (\"OK\\n\"); \n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1563195342,
        "uid": 147646,
        "name": "lzpclxf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u83dc\u9e21\u6211\u4e5f\u5c31\u53d1\u4e00\u4e9b\u8fd9\u79cd\u7528STL\u8f7b\u677e\u89e3\u6389\u7684\u9898\n\n\n------------\n\u8a00\u5f52\u6b63\u4f20\uff0c\u770b\u5230\u8fd9\u9053\u9898\u601d\u8def\u975e\u5e38\u6e05\u6670\uff0c\u5f88\u663e\u7136\u5c31\u662f\u7528\u5230\u2014\u2014set\uff08\u5728<set>\u5e93\u4e2d\uff09\u3002\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u4e00\u4e2a\u540c\u5b66\u7684\u540d\u5b57\u5b58\u5230\u96c6\u5408\u91cc\uff0c\u7136\u540e\u5bf9\u4e8e\u8001\u5e08\u70b9\u5230\u7684\u6bcf\u4e00\u4e2a\u540d\u5b57\uff0c\u628a\u4ed6\u4ece\u539f\u96c6\u5408\u4e2d\u5220\u9664\u5e76\u52a0\u5165\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff08\u4e13\u95e8\u5b58\u50a8\u5df2\u7ecf\u70b9\u5230\u8fc7\u7684\u4eba\uff0c\u7136\u540e\u8fdb\u884c\u5faa\u73af\u641e\u5b9a\n  c++\u4ee3\u7801\u9644\u4e0a\n  ```cpp\n#include <set>\n#include <iostream>\n#include <string>\nusing namespace std;\nint n,m;\nstring temp;\nset<string> s1,s2;\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>temp;\n        s1.insert(temp);\n    }\n    cin>>m;\n    while(m--)\n    {\n        cin>>temp;\n        if(s1.count(temp)==1)\n        {\n            cout<<\"OK\"<<endl;\n            s2.insert(temp);\n            s1.erase(temp);\n        }\n        else if(s2.count(temp)==1) cout<<\"REPEAT\"<<endl;\n        else cout<<\"WRONG\"<<endl;\n    }\n    return 0;\n}\n\n```\n\u8fd9\u91cc\u7531\u4e8e\u6211\u662f\u7528\u82f9\u679c\u7535\u8111\u6240\u4ee5\u4e0d\u5927\u65b9\u4fbf\uff0c\u5934\u6587\u4ef6\u5176\u5b9e\u76f4\u63a5#include <bits/stdc++.h>\u5c31\u53ef\u4ee5\uff0c\u6bd4\u8f83\u7701\u4e8b\n  \n\n------------\n\u8fd9\u9053\u9898\u5c31\u8bf4\u5b8c\u4e86\n\u9488\u5bf9\u96c6\u5408\u6211\u6765\u666e\u53ca\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\uff1a                                 \n  1.\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\uff1aset<\u6570\u636e\u7c7b\u578b> \u540d\u79f0\uff1b\uff08\u540e\u6587\u5047\u8bbe\u540d\u79f0\u4e3as\uff09  \n  2.\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20\uff1as.insert(temp);  \n  3.\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff1as.erase(temp);   \n  4.\u67e5\u627e\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff08\u8fd4\u56de\u503c\u53ea\u80fd\u4e3a1\u62160\u6839\u636e\u6570\u5b66\u4e2d\u96c6\u5408\u7684\u6027\u8d28\uff09s.count(temp);  \n  5.\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u95ee\u9898\uff1a\u90fd\u662fO\uff08logn\uff09\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3RE\n  \n\n------------\n\u6700\u540e\u3002\u3002\u7b2c\u4e00\u7bc7\u9898\u89e3\u5e0c\u671b\u7ba1\u7406\u5458\u7ed9\u4e2a\u901a\u8fc7",
        "postTime": 1577802357,
        "uid": 257315,
        "name": "RPZXG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u54ce \u867d\u7136\u662f$Trie$\u6811\u7684\u677f\u5b50 \u4f46\u662f\u8fd8\u662f\u60f3\u62ff\u5b57\u7b26\u4e32\u54c8\u5e0c\u641e\u4e00\u641e\n\n\u4e00\u5f00\u59cb\u6a21\u4e86$1000000009$ \u7ed3\u679c\u53ea\u6709$60$\u5206 \u53ef\u80fd\u51fa\u9898\u4eba\u4e5f\u610f\u8bc6\u5230\u4e86\u968f\u4fbf\u7528\u54c8\u5e0c\u53ef\u4ee5\u8f7b\u677e\u6c34\u8fc7 \u5c31\u5361\u4e86\u4e00\u4e0b\n\n\u4f46\u8fd9\u53c8\u600e\u80fd\u963b\u6321\u6211\u7684\u811a\u6b65\uff1f\u4e8e\u662f\u540c\u65f6\u6a21\u4e86$1000000009$\u548c$1000000007$ \u8f7b\u677e\u6c34\u8fc7\uff08~~\u6570\u636e\u6709\u5f85\u52a0\u5f3a~~\n\n\u4ee3\u7801\u7cbe\u7b80 \u8f7b\u677e\u6613\u8bfb\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<cstdlib>\n#include<set>\ntemplate<typename _sp>\ninline void qread(_sp &_x){\n    char _ch=getchar(),_lst=' ';\n    while(_ch<'0'||_ch>'9') _lst=_ch,_ch=getchar();\n    while(_ch>='0'&&_ch<='9') _x=(_x<<3)+(_x<<1)+(_ch^48),_ch=getchar();\n    if(_lst=='-') _x=-_x;\n}\ntemplate<typename _sp>\ninline _sp mmax(_sp __a,_sp __b){\n    return __a>__b?__a:__b;\n}\ntemplate<typename _sp>\ninline _sp mmin(_sp __a,_sp __b){\n    return __a<__b?__a:__b;\n}\ntemplate<typename _sp>\ninline _sp mabs(_sp __x){\n    return __x>0?__x:(-__x);\n}\ntemplate<typename _sp>\ninline void mswap(_sp &__a,_sp &__b){\n    _sp __t=__a;__a=__b;__b=__t;\n}\ntemplate<typename _sp>\ninline _sp mlowbit(_sp __x){\n    return __x&(-__x);\n}\nconst long long LINF=0x3f3f3f3f3f3f3f3fll;\nconst int INF=0x3f3f3f3f;\nconst double eps=1e-8;\nconst int Mod1=10000009;\nconst int Mod2=10000007;\nint n,m;\nstd::string s[10005];\nstd::set<int>a1,b1,a2,b2;\ninline int hash1(std::string s){\n\tint base=131,len=s.length();\n\tlong long tmp=0;\n\tfor(register int i=0;i<len;i++) tmp=(1ll*tmp*base+s[i])%Mod1;\n\treturn tmp;\n}\ninline int hash2(std::string s){\n\tint base=131,len=s.length();\n\tlong long tmp=0;\n\tfor(register int i=0;i<len;i++) tmp=(1ll*tmp*base+s[i])%Mod2;\n\treturn tmp;\n}\nint main(){\n\tqread(n);\n\tfor(register int i=1;i<=n;i++) std::cin>>s[i];\n\tfor(register int i=1;i<=n;i++){\n\t\ta1.insert(hash1(s[i]));\n\t\ta2.insert(hash2(s[i]));\n\t}\n\tqread(m);\n\tfor(register int i=1;i<=m;i++){\n\t\tstd::string c;\n\t\tstd::cin>>c;\n\t\tint x1=hash1(c),x2=hash2(c);\n\t\tif(b1.count(x1)&&b2.count(x2)) puts(\"REPEAT\");\n\t\telse if(a1.count(x1)&&a2.count(x2)){\n\t\t\tputs(\"OK\");\n\t\t\tb1.insert(x1);\n\t\t\tb2.insert(x2);\n\t\t}\n\t\telse puts(\"WRONG\");\n\t}\n\treturn 0;\n}\n\n```\n\n\n\u7801\u98ce\u592a\u4e11\u4e0d\u559c\u52ff\u55b7\uff08",
        "postTime": 1573742829,
        "uid": 64500,
        "name": "Burnside",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "//\u8fd9\u9053\u9898\u53ef\u4ee5\u7528set\u6765\u89e3\u51b3\uff08\u7528map\u7684\u5927\u4f6c\u52ff\u55b7\uff09\uff0c\u5b9a\u4e49\u4e24\u4e2aset\uff0c\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u6240\u6709\u4eba\u540d\uff0c\u7528\u4e8e\u5224\u65ad\u4eba\u540d\u662f\u5426\u5b58\u5728\u3002\u53e6\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u88ab\u70b9\u5230\u7684\u4eba\u540d\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u91cd\u590d\n\n```cpp\n#include<iostream>\n#include<set>\nusing namespace std;\nint main(){\n    set<string> s1;//\u5b9a\u4e49set\n    set<string> s2;//\u5b9a\u4e49set\n    int a,b;\n    string x,y;\n    cin>>a;//\u8f93\u5165\u4eba\u6570\n    for(int i=0;i<a;i++)\n    {\n        cin>>x;//\u8f93\u5165\u4eba\u540d\n        s1.insert(x);\n    }\n    cin>>b;//\u8f93\u5165\u88ab\u70b9\u5230\u7684\u4eba\u6570\n    for(int i=0;i<b;i++)\n    {\n        cin>>y;//\u8f93\u5165\u4eba\u540d\n        if(s1.count(y)==1&&s2.count(y)==1)//\u5982\u679c\u6b64\u4eba\u540d\u5b58\u5728\u5e76\u4e14\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e86\n        {\n            cout<<\"REPEAT\"<<endl;//\u8f93\u51fa\n        }\n        else if(s1.count(y)==1){//\u5982\u679c\u6b64\u4eba\u540d\u5b58\u5728\n            s2.insert(y);\n            cout<<\"OK\"<<endl;//\u8f93\u51fa\n        }\n        else if(s1.count(y)==0){//\u5982\u679c\u6b64\u4eba\u540d\u4e0d\u5b58\u5728\n            cout<<\"WRONG\"<<endl;//\u8f93\u51fa\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1508243521,
        "uid": 54633,
        "name": "Allons\u2014y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u660e\u663ehash\uff0c\u8fd8\u662f\u6700\u57fa\u7840\u7684\u3002\u5373\u597d\u60f3\u53c8\u597d\u5b9e\u73b0\u3002\n\u4f46\u4e00\u4e2a\u663e\u7136\u4e0d\u591f\u3002            \n\u6240\u4ee5\u6211\u5c31\u5199\u4e86\u4e09\u4e2a\u3002\uff08q , r , t , ec , ed , ef ) \n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nshort q[10000007],r[10000009],t[10000011];\nint main(){\n\tregister int n,m,l,ec,ed,ef,i,j;//register\n\tregister char s[51];\n\tios::sync_with_stdio(false);//\u63d0\u901f\n\tcin>>n;\n\tfor(i=0;i<n;++i){\n\t\tcin>>s;\n\t\tl=strlen(s);\n\t\tec=0;\n\t\ted=0;\n\t\tef=0;\n\t\tfor(j=0;j<l;++j){\n\t\t\tec=(ec<<5)+(ec<<2)+ec;\n\t\t\ted=(ed<<6)+(ed<<1)+ed;\n\t\t\tef=(ef<<5)+(ef<<3)+ef;\n\t\t\ts[j]-='A';\n\t\t\tec+=s[j];\n\t\t\ted+=s[j];\n\t\t\tef+=s[j];\n\t\t\tec%=10000007;\n\t\t\ted%=10000009;\n\t\t\tef%=10000011;\n\t\t}\n\t\tq[ec]=1;\n\t\tr[ed]=1;\n\t\tt[ef]=1;\n\t}\n\tcin>>m;\n\tfor(i=0;i<m;++i){\n\t\tcin>>s;\n\t\tl=strlen(s);\n\t\tec=0;\n\t\ted=0;\n\t\tef=0;\n\t\tfor(j=0;j<l;++j){\n\t\t\tec=(ec<<5)+(ec<<2)+ec;\n\t\t\ted=(ed<<6)+(ed<<1)+ed;\n\t\t\tef=(ef<<5)+(ef<<3)+ef;\n\t\t\ts[j]-='A';\n\t\t\tec+=s[j];\n\t\t\ted+=s[j];\n\t\t\tef+=s[j];\n\t\t\tec%=10000007;\n\t\t\ted%=10000009;\n\t\t\tef%=10000011;\n\t\t}\n\t\tif(!q[ec]||!r[ed]||!t[ef]){\n\t\t\tputchar('W');\n\t\t\tputchar('R');\n\t\t\tputchar('O');\n\t\t\tputchar('N');\n\t\t\tputchar('G');\n\t\t}\n\t\telse if(q[ec]==1||r[ed]==1||t[ef]==1){\n\t\t\tputchar('O');\n\t\t\tputchar('K');\n\t\t\t++q[ec];\n\t\t\t++r[ed];\n\t\t\t++t[ef];\n\t\t}\n\t\telse{\n\t\t\tputchar('R');\n\t\t\tputchar('E');\n\t\t\tputchar('P');\n\t\t\tputchar('E');\n\t\t\tputchar('A');\n\t\t\tputchar('T');\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550422527,
        "uid": 126321,
        "name": "eexyz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "## \u8fd0\u7528\u5e7f\u6cdb\u7684\u5b58\u5b57\u7b26\u4e32\u7b97\u6cd5\uff1aTrie\u6811\n\ntrie\u6811\u662f\u672c\u849f\u84bb\u5b66\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784~~\u5982\u679c\u6570\u7ec4\u4e0d\u7b97\u7684\u8bdd~~\uff0c\u8fc7\u4e86\u633a\u4e45\u4e86\uff0c\u56de\u6765\u53d1\u7bc7\u9898\u89e3\u8bf4\u4e0btrie\u6811\u7684\u5fc3\u5f97\uff08\u5982\u679c\u8fd8\u6ca1\u5b66\u4e60trie\u6811\u57fa\u7840\u7684\u53ef\u4ee5\u5148\u5728\u7f51\u4e0a\u5b66\u5b66\uff09\u3002\n\ntrie\u6811\uff0c\u8fd0\u7528\u7684\u662f\u7528\u6811\u6765\u5b58\u5b57\u7b26\u4e32\uff0c\u800c\u5176\u6700\u5927\u7684\u64cd\u4f5c\u6027\u5c31\u662f\u6bcf\u4e00\u4e2acnt\u503c\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u5df2\u7ecf\u5efa\u7acb\u7684\u5b58\u5728\u7684\u8282\u70b9\u3002\u5bf9\u4e8e\u8fd9\u4e2acnt\u503c\u53ef\u4ee5\u5e72\u5f88\u591a\u4e8b\u60c5\uff0c\u53ef\u4ee5\u591a\u5f00\u4e00\u4e2a\u6570\u7ec4\u5229\u7528cnt\u5b58\u67d0\u4e2a\u4f60\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u6216\u8005\u662f\u505a\u4e2a\u8bb0\u53f7\u3002\u5177\u4f53\u53ef\u4ee5\u5230\u6211blog\u627e\u540d\u5b57\u53ebstring\u7684\u6587\u7ae0\uff0c\u90a3\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002\n\n\u5f53\u5e72\u5b8c\u8fd9\u9053\u6a21\u677f\u9898\uff0c\u5c31\u53ef\u4ee5\u505a\u505a\u201c\u9605\u8bfb\u7406\u89e3p3879\u201d\uff0c\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7ed3\u675ftrie\u7684\u57fa\u672c\u5b66\u4e60\u4e86\u3002\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\nchar s[100];\nint cnt = 1;\n\nstruct node\n{\n    int ch[26];\n    int word;\n    \n}trie[1000000];\n\nvoid build(char x[])\n{\n    int len = strlen(x);\n    int now = 1;\n    for(int i = 0; i < len; ++i)\n    {\n        if(!trie[now].ch[x[i]-'a'])\n            trie[now].ch[x[i]-'a'] = ++cnt;\n        now = trie[now].ch[x[i]-'a'];\n    }\n    trie[now].word = 1;\n}\n\nvoid check(char x[])\n{\n    int len = strlen(x);\n    int now = 1;\n    for(int i = 0; i < len; ++i)\n    {\n        if(!trie[now].ch[x[i]-'a']){printf(\"WRONG\\n\");return;}\n        now = trie[now].ch[x[i]-'a'];\n    }\n    if(trie[now].word == 1){printf(\"OK\\n\");++trie[now].word;return;}\n    else if(trie[now].word == 0){printf(\"WRONG\\n\");return;}\n    else {printf(\"REPEAT\\n\");return;}\n}\n\nint main()\n{\n    int n, m;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i)\n    {\n        scanf(\"%s\", s);\n        build(s);\n    }\n    scanf(\"%d\", &m);\n    for(int i = 1; i <= m; ++i)\n    {\n        scanf(\"%s\", s);\n        check(s);\n    }\n    return 0;\n}\n```",
        "postTime": 1543157990,
        "uid": 119118,
        "name": "\u665a\u5b89\u665a\u5b89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "## \u8fd9\u9898\u8981\u7528STL\u548cTrie\u6811\uff1f\n\u5e76\u4e0d\u7528\u3002\n                                   \n \u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u4f1a\u6709\u8fd9\u6837\u7684\u601d\u8def\uff1a  \n\n\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08string a\u4e0ebool b\uff0c\u4ee3\u8868\u5404\u4e2a\u5b66\u751f\u7684\u540d\u5b57\u4ee5\u53ca\u662f\u5426\u88ab\u70b9\u5230\u540d\uff09\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u540d\uff0c\u6211\u4eec\u53ea\u8981\u5728\u5b66\u751f\u59d3\u540d\u8868\u4e2dfor\u4e00\u904d\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u518d\u770b\u8fd9\u4e2a\u540d\u5b57\u662f\u5426\u5df2\u7ecf\u88ab\u70b9\u5230\u4e86\uff0c\u5982\u679c\u5df2\u7ecf\u70b9\u5230\uff0c\u5c31\u8f93\u51faREPART\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u6807\u8bb0\uff08\u6807\u8bb0\u4e3a\u5df2\u70b9\u8fc7\uff0c\u5373b=1\uff09,\u5e76\u8f93\u51faOK\u3002\u5982\u679c\u4e00\u8d9f\u6ca1\u6709\u627e\u5230\uff0c\u5c31\u8f93\u51faWRONG\u3002     \n\n\u8fd9\u79cd\u601d\u8def\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u628a\u8fd9\u4e2a\u7a0b\u5e8f\u5199\u4e86\u51fa\u6765\uff0c\u6210\u529f\u4e86\u4e00\u534a\uff0850\u5206\uff09\u3002~~\uff08\u5176\u4f59\u70b9\u5168\u90e8TLE\uff09~~      \n\u4ee5\u4e0b\u662f\u6211\u7b2c\u4e00\u6b21\u5199\u7684\u7a0b\u5e8f\uff1a~~(\u53ef\u76f4\u63a5\u8df3\u8fc7\uff09~~\n```\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct s\n{\n    string a;\n    bool b;\n}a[10233];//\u5b66\u751f\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i].a;\n        a[i].b=false;\n    }//\u8f93\u5165\u6570\u636e\uff0c\u5e76\u521d\u59cb\u5316a[i].b\u4e3a\u672a\u6807\u8bb0\n    int n1;//\u76f8\u5f53\u4e8e\u672c\u9898\u4e2d\u7684m\n    string b1;//\u672c\u9898\u4e2d\u8001\u5e08\u70b9\u5230\u7684\u540d\u5b57\n    cin>>n1;//\u8f93\u5165m\n    for(int i=0;i<n1;i++)//\u5bf9\u4e8e\u6bcf\u4e2a\u8001\u5e08\u70b9\u5230\u7684\u540d\u5b57\u8fdb\u884c\u64cd\u4f5c\n    {\n        bool pd=false;//\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u540d\u5b57\n        cin>>b1;//\u8f93\u5165\u540d\u5b57\n        for(int i=0;i<n;i++)//for\u4e00\u904d\n        {\n            if(a[i].a==b1)//\u5982\u679c\u627e\u5230\n            {\n                if(a[i].b==false)//\u518d\u5224\u65ad\u662f\u5426\u67e5\u627e\u8fc7\n                {\n                    cout<<\"OK\"<<endl;\n                    a[i].b=true;//\u6807\u8bb0\u4e3a\u5df2\u67e5\u627e\n                    pd=true;//\u6807\u8bb0\u4e3a\u6b64\u540d\u5b57\u5b58\u5728\n                }\n                else//\u8fd9\u4e2a\u540d\u5b57\u67e5\u627e\u8fc7\n                {\n                    cout<<\"REPEAT\"<<endl;\n                    pd=true;//\u6807\u8bb0\u4e3a\u6b64\u540d\u5b57\u5b58\u5728\n                }\n            }\n        }\n        if(pd==false)cout<<\"WRONG\"<<endl;//\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8f93\u51faWRONG\n    }\n    return 0;///////////////////////////\n}\n```\n\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u4f18\u5316\u8fd9\u4e2a\u7a0b\u5e8f\u5462\uff1f     \n\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2ab1\u90fdfor\u4e00\u904d\u6574\u4e2a\u5b66\u751f\u8868,\u5c31\u4f1a\u9020\u6210\u8f83\u9ad8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\uff0c\u4e3a\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2astring\u6570\u7ec4b\u6765\u5b58\u653e\u5df2\u70b9\u5230\u7684\u5b66\u751f\u540d\u5b57\uff08\u8fd9\u6837\u5c31\u4e5f\u4e0d\u9700\u8981\u7ed3\u6784\u4f53\u4e86\uff09\uff0c\u6bcf\u6b21\u5148\u67e5\u627e\u8fd9\u4e2ab\u6570\u7ec4\uff0c\u5982\u679c\u67e5\u627e\u5230\uff0c\u8f93\u51faREPART\uff1b\u6ca1\u6709\u5c31\u518d\u5728\u539f\u8868\u91cc\u627e\u3002\n\n\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f:\uff08\u591a\u62ff\u4e8610\u5206\uff0c\u5f53\u524d\uff1a60\u5206\uff09~~(\u53ca\u683c\u4e86\uff09~~\n```\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nstring a[10233];\nstring b[10233];//\u7528\u4e8e\u5b58\u653e\u5df2\u70b9\u5230\u7684\u5b66\u751f\u540d\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    int n1;\n    string b1;\n    int i1=0;//\u7528\u6765\u7ba1\u7406b\u6570\u7ec4\n    cin>>n1;\n    for(int i=0;i<n1;i++)\n    {\n        bool pd=false;\n        cin>>b1;\n        for(int i=0;i<=i1;i++)//\u4eceb\u6570\u7ec4\u91cc\u5f00\u59cb\u5dee\u627e\n        {\n            if(b[i]==b1)//\u5982\u679c\u5728b\u6570\u7ec4\u91cc\u627e\u5230\uff0c\u5373\u5df2\u70b9\u8fc7\n            {\n                pd=true;\n                cout<<\"REPEAT\"<<endl;\n                break;\n            }\n        }\n        if(pd==false){//\u5982\u679cb\u6570\u7ec4\u91cc\u6ca1\u6709\uff0c\u5373\u6ca1\u70b9\u8fc7\n        for(int i=0;i<=n;i++)\n        {\n            if(a[i]==b1)\n            {\n                cout<<\"OK\"<<endl;\n                pd=true;\n                i1++;\n                b[i1]=b1;//\u5c06b1\u5b58\u5165b\u6570\u7ec4\uff0c\u5373\u6807\u8bb0\u4e3a\u5df2\u627e\u8fc7\n                break;\n            }\n        }\n        if(pd==false)cout<<\"WRONG\"<<endl;\n       }\n    }\n    return 0;\n}\n```\n\n\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4f18\u5316\u3002  \n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5b66\u751f\u540d\u5b57\u7684\u6570\u91cf\u6709\u5f88\u591a\uff0c\u4f46\u540c\u4e00\u957f\u5ea6\u7684\u5b66\u751f\u540d\u5b57\u7684\u6570\u91cf\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u3002     \n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2ab1\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5b83\u7684\u957f\u5ea6\u5165\u624b\uff0c\u627e\u4e0e\u5b83\u957f\u5ea6\u76f8\u7b49\u7684\u4e00\u5c42\u540d\u5b57\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u518d\u6b21\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fbe\u5230\u6807\u51c6\uff01\n\n\u770b\uff0c\u4e0d\u9700\u8981\u4ec0\u4e48\u590d\u6742\u7684Trie\u6811\u548cSTL\u5427~    \n~~(\u867d\u7136\u6211\u627f\u8ba4\u7528map\u4f1a\u66f4\u5feb\u4e5f\u66f4\u65b9\u4fbf\u4e00\u4e9b\uff09~~     \n\u6211\u4eec\u4f7f\u7528sort+cmp\u6765\u5bf9a\u6570\u7ec4\u6392\u5e8f\u3002   \n  \n  \u6700\u7ec8AC\u4ee3\u7801\u5982\u4e0b\uff1a     \n  ```\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint m[233];//\u521b\u5efam\u6570\u7ec4\uff0c\u7528\u4e8e\u5206\u5c42\u3002m[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u540d\u5b57\u7684\u6700\u540e\u4f4d\u7f6e\u3002\u5982\uff0c\u4e00\u4e32\u540d\u5b57a,aa,aaa,aaa,abc,m[3]\u5b58\u50a8\u7684\u5c31\u662f4\u3002\nstring a[10233];\nstring b[10233];\nbool cmp(string a,string b)//cmpsort\uff0c\u4ee5\u957f\u5ea6\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n{\n    return a.size()<b.size();\n}\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    sort(a,a+n,cmp);//\u6392\u5e8f\n    for(int i=0;i<n;i++)//\u5206\u5c42\u3002\n    {\n        m[a[i].size()]=i;//\u4e0d\u65ad\u66f4\u65b0\u5f53\u524d\u5c42\u7684\u6700\u540e\u4f4d\u7f6e\uff0c\u6240\u5f97\u5373\u4e3a\u5f53\u524d\u5c42\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n    }\n    m[0]=-1;\n    int n1;\n    string b1;\n    int i1=0;\n    cin>>n1;\n    for(int i=0;i<n1;i++)\n    {\n        bool pd=false;\n        cin>>b1;\n        int len5=b1.size();//\u83b7\u53d6b1\u7684\u957f\u5ea6\n        for(int i=0;i<=i1;i++)\n        {\n            if(b[i]==b1)\n            {\n                pd=true;\n                cout<<\"REPEAT\"<<endl;\n                break;\n            }\n        }\n        if(pd==false){\n        for(int i=m[len5-1];i<=m[len5];i++)//\u4f7fi\u4ece\u4e0a\u4e00\u5c42\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u5230\u8fd9\u4e00\u5c42\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u7ed3\u675f\u3002i\u4e0d\u8bbe\u4e3am[len5-1]+1\u662f\u56e0\u4e3a\u4f1a\u51fa\u9519\u3002\uff08\u672a\u77e5\u539f\u56e0\uff09\n        {\n            if(a[i]==b1)\n            {\n                cout<<\"OK\"<<endl;\n                pd=true;\n                i1++;\n                b[i1]=b1;\n                break;\n            }\n        }\n        if(pd==false)cout<<\"WRONG\"<<endl;\n       \n    }\n    }\n    return 0;//\u534e\u4e3d\u7ed3\u675f\uff01\n}\n```\n\n",
        "postTime": 1541151211,
        "uid": 127925,
        "name": "Kio_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "**\u6765\u4e00\u53d1\u849fluo\u7684\u5b57\u5178\u6811**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1000001;\nint trie[maxn][26],tot=1,end[maxn],x;\nvoid insert(char* str)\n{\n\tint len=strlen(str),p=1;\n\tfor(int k=0;k<len;k++)\n\t{\n\t\tint ch=str[k]-'a';\n\t\tif(trie[p][ch]==0) trie[p][ch]= ++tot;\n\t\tp=trie[p][ch];\n\t}\n\tend[p]=1;\n}\nint search(char* str)\n{\n\tint len=strlen(str),p=1;\n\tfor(int k=0;k<len;k++)\n\t{\n\t\tp=trie[p][str[k]-'a'];\n\t\tif(p==0)\n\t\treturn 0;\n\t}\n\tx=p;\n\treturn end[p];\n}\nint n;\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar str[maxn];\n\t\tcin>>str;\n\t\tinsert(str);\n\t}\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar str[maxn];\n\t\tcin>>str;\n\t\tif(search(str)==1)\n\t\t{\n\t\t\tprintf(\"OK\\n\");\n\t\t\tend[x]++;\n\t\t}\n\t\telse\n\t\tif(search(str)>1)\n\t\tprintf(\"REPEAT\\n\");\n\t\telse\n\t\tprintf(\"WRONG\\n\");\n\t}\n\treturn 0;\n}\n```\n\u5728search\u7684\u90a3\u91cc\u628aOK\u7684\u5b57\u7b26\u7684end++\u5c31\u53ef\u4ee5\u4e86\n\n",
        "postTime": 1524361093,
        "uid": 69293,
        "name": "Punny",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "CCF\u5f00\u653eSTL\u771f\u662f\u597d\u3002\n\nSTL\u7684map\u662f\u6620\u5c04\uff0c\u6211\u4eec\u53ef\u4ee5\u7528map\u641e\u5b9a\u6b64\u9898\uff0c\u5176\u4f59\u89c1\u6ce8\u91ca\n\n---\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#include<string>\nusing namespace std;\nmap <string,bool> mp;\nint n,m;\nstring a;\nint main()\n{\n    cin>>n;\n    for(register int i=1;i<=n;i++)\n    {\n        cin>>a;\n        mp[a]=0;\n    }//\u5148\u8bfb\u5165\u540d\u5355\u5e76\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u4e00\u5f00\u59cb\u5168\u90e8\u6ca1\u6709\u70b9\u8fc7\n    cin>>m;\n    for(register int i=1;i<=m;i++)\n    {\n        cin>>a;\n        if(mp.count(a)==0)//\u5982\u679c\u5e76\u6ca1\u6709\u8fd9\u4e2a\u4eba\n            printf(\"WRONG\\n\");//\u8f93\u51fa\u9519\u8bef\n        else\n            if(mp[a]==0)//\u5982\u679c\u8fd9\u4e2a\u4eba\u6ca1\u88ab\u70b9\u8fc7\n                {printf(\"OK\\n\");mp[a]=1;}//\u8f93\u51fa\u6b63\u786e\u5e76\u8bbe\u5176\u4e3a\u70b9\u8fc7\n            else\n                printf(\"REPEAT\\n\");//\u5426\u5219\u8f93\u51fa\u91cd\u590d\n    }\n    return 0;\n}\n```",
        "postTime": 1509080659,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u53d1\u73b0\u5c45\u7136\u6ca1\u6709pascal\u7684hash\u9898\u89e3\u2026\u2026\n\n\u611f\u89c9\u672c\u9898\u6709\u6545\u610f\u5361hash\u7684\u5acc\u7591\n\n\u5982\u679chash\u6570\u7ec4\u8d34\u7740\u6570\u636e\u5c31\u5f88\u5bb9\u6613\u51b2\u7a81\n\n\u6240\u4ee5\u6211\u4eec\u8981\u597d\u4e0d\u541d\u556c\u7684\u5f00\u5927\u6570\u7ec4\n\n```cpp\nvar num:array[0..1000006]of longint;//hash\u6570\u7ec4\n    hash:array[0..1000006]of string;\n    s:string;\n    n,i,j,k,m:longint;\nbegin\n  readln(n);\n  for i:=1 to n do\n  begin\n    readln(s);\n    k:=0;\n    for j:=1 to length(s) do\n      k:=(k*97+ord(s[j]))mod 1000007;//hash\u51fd\u6570\u4e00\u70b9\u8981\u8bbe\u8ba1\u597d\n    while length(hash[k])<>0 do//\u89e3\u51b3\u51b2\u7a81\n      k:=(k+1) mod 1000007;\n    hash[k]:=s;\n  end;\n  readln(m);\n  for i:=1 to m do//\u67e5\u627e\u5224\u65ad\n  begin\n    readln(s);\n    k:=0;\n    for j:=1 to length(s) do\n      k:=(k*97+ord(s[j]))mod 1000007;\n    while (length(hash[k])<>0)and(hash[k]<>s) do\n      k:=(k+1)mod 1000007;\n    if length(hash[k])<>0 then\n    begin\n      inc(num[k]);\n      if num[k]>1 then writeln('REPEAT')\n                  else writeln('OK');\n    end\n    else writeln('WRONG');\n  end;\nend.\n\u672c\u9898\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u53ea\u8981\u6ce8\u610f\u4e00\u4e9b\u5751\u4eba\u7684\u7ec6\u8282\u5c31\u662f\u4e00\u9053\u5b57\u7b26\u4e32hash\u7684\u6a21\u677f\n```",
        "postTime": 1508155520,
        "uid": 29245,
        "name": "Henry_he",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6\uff0c\u76f4\u63a5\u7528\u4e8c\u5206\u52a0\u5feb\u6392\u5c31\u884c\u4e86\n```pascal\nvar n,m,i,x:longint;s:string;\nf:array[1..10000] of boolean;\na:array[1..10000] of string;\nprocedure sort(l,r:longint);//\u5feb\u6392\uff08pascal\u81ea\u5e26\u7684\uff09\n      var\n         i,j:longint;x,y:string;\n      begin\n         i:=l;//\u5934\u6307\u9488\n         j:=r;//\u5c3e\u6307\u9488\n         x:=a[(l+r) div 2];\n         repeat\n           while a[i]<x do\n            inc(i);\n           while x<a[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=a[i];\n                a[i]:=a[j];\n                a[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\nfunction find(s:string):longint;//\u4e8c\u5206\u51fd\u6570\nvar t,w,mid:longint;\nbegin\nt:=1;//\u5934\u6307\u9488\nw:=n;//\u5c3e\u6307\u9488\nwhile t<=w do\n  begin\n  mid:=(t+w) div 2;//\u4e2d\u95f4\u4e00\u4e2a\u6570\u7684\u4f4d\u7f6e\n  if a[mid]=s then exit(mid)//\u627e\u5230\u5219\u8fd4\u56de\u4f4d\u7f6e\n  else if a[mid]>s then w:=mid-1//\u5c3e\u6307\u9488\u5411\u524d\u632a\n  else t:=mid+1;//\u5934\u6307\u9488\u5411\u540e\u632a\n  end;\nexit(-1);\nend;\nbegin\nreadln(n);\nfor i:=1 to n do readln(a[i]);\nsort(1,n);//\u5bf9a\u6570\u7ec4\u8fdb\u884c\u5feb\u6392\nreadln(m);\nfor i:=1 to m do\n  begin\n  readln(s);//\u8bfb\u5165\u540d\u5b57\n  x:=find(s);//\u627e\u5230\u5f53\u524d\u8fd9\u4e2a\u540d\u5b57\u5728a\u6570\u7ec4\u4e2d\u662f\u7b2c\u51e0\u4e2a\n  if x>-1 then//-1\u8868\u793a\u627e\u4e0d\u5230\uff0c\u5927\u4e8e-1\u8868\u793a\u627e\u5f97\u5230\n    begin\n    if f[x] then writeln('REPEAT') else writeln('OK');//f\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u540d\u5b57\u662f\u5426\u70b9\u8fc7\n  f[x]:=true;//\u5c06\u5f53\u524d\u8fd9\u4e2a\u540d\u5b57\u6807\u4e3a\u5df2\u70b9\u8fc7\n    end\n  else writeln('WRONG');//\u627e\u4e0d\u5230\u5219\u8f93\u51faWRONG\n  end;\nend.\n\n\n```\n",
        "postTime": 1566279235,
        "uid": 219423,
        "name": "HyperLuXury",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u5206\u6790\u4e00\u4e0b\u9898\u610f\u53ef\u4ee5\u53d1\u73b0\uff0c\u70b9\u540d\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u70b9\u540d\u6b63\u786e\u4e14\u6ca1\u70b9\u8fc7\uff1b\n\n2. \u70b9\u540d\u6b63\u786e\u4f46\u70b9\u8fc7\u4e86\uff1b\n\n3. \u70b9\u540d\u9519\u8bef\uff1b\n\n\u601d\u8003\u4e00\u4e0b\u53ef\u5f97\uff1a\n\n\u53ef\u4ee5\u7528\u4e24\u4e2a\u80fd\u591f\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\uff0c\u4e00\u4e2a\u5b58\u73ed\u4e0a\u6240\u6709\u4eba\uff0c\u4e00\u4e2a\u5b58\u73ed\u4e0a\u672a\u70b9\u540d\u7684\u4eba\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u70b9\u540d\u53ef\u80fd\u91cd\u590d\uff0c\u5728\u90a3\u4e9b\u5185\u90e8\u5143\u7d20\u53ef\u80fd\u5177\u6709\u76f8\u7b49\u952e\u503c\u7684\u6570\u636e\u7ed3\u6784\u6765\u8bf4\u5904\u7406\u8f83\u9ebb\u70e6\uff0c\n\u90a3\u4e48\u6211\u4eec\u7406\u6240\u5f53\u7136\u5730\u5c31\u60f3\u5230\u4e86\uff1a\n\n**set**\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u8868\u9762\u4e0a\u662f $O(n+m)$ \uff0c\u4f46\u7b97\u4e0a $set$ \u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log n)$ \uff0c\u6240\u4ee5\u5e94\u662f $O(m\\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7ea6 $10^6$ \u8f7b\u677e\u8dd1\u8fc7\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<string>\n#include<set>\nusing namespace std;\nset<string>dm,rp;//dm\u4e3a\u5168\u73ed\u540d\u5b57\uff1brp\u662f\u672a\u70b9\u540d\u7684\nint n,m;\nint main()\n{\n\tcin>>n;\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tstring t;\n\t\tcin>>t;\n\t\tdm.insert(t);\n\t\trp.insert(t);\n\t}\n\tcin>>m;\n\tfor (int i=0;i<m;i++)\n\t{\n\t\tstring t;\n\t\tcin>>t;\n\t\tif (dm.find(t)!=dm.end())//\u6709\u8fd9\u4e2a\u4eba\n\t\t{\n\t\t\tif (rp.find(t)!=rp.end())\n\t\t\t{\n\t\t\t\trp.erase(rp.find(t));//\u4ece\u672a\u70b9\u540d\u540d\u5355\u4e2d\u53bb\u6389\n\t\t\t\tcout<<\"OK\\n\";\n\t\t\t}\n\t\t\telse cout<<\"REPEAT\\n\";//\u88ab\u6821\u957f\u62c9\u51fa\u53bb\u8bad\u8bdd\n\t\t}\n\t\telse cout<<\"WRONG\\n\";\n\t}\n}\n```\n\u662f\u4e0d\u662f\u7279\u522b\u77ed\uff1f",
        "postTime": 1564362057,
        "uid": 172069,
        "name": "whatismyname0",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "## trie\u5b57\u5178\u6811  P2580 \n#### \u53ea\u662f\u5199\u7684\u7a0d\u5fae\u8be6\u7ec6\u4e86\u4e00\u4e9b\u3002\u3002\u3002\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u7ed9\u901a\u8fc7\u3002\u3002\n\n#### \u5982\u679c\u6ca1\u6709\u901a\u8fc7\u7684\u8bdd\u5c31\u5f53\u6211\u81ea\u5df1\u603b\u7ed3\u4e86\u597d\u4e86qwq \n\n\u5b57\u5178\u6811\uff0c\u53c8\u79f0\u5355\u8bcd\u67e5\u627e\u6811\uff0cTrie\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\n\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e\u7edf\u8ba1\uff0c\n\u6392\u5e8f\u548c\u4fdd\u5b58\u5927\u91cf\u7684\u5b57\u7b26\u4e32\uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\n\u6240\u4ee5\u7ecf\u5e38\u88ab\u641c\u7d22\u5f15\u64ce\u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\n\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u51cf\u5c11\u67e5\u8be2\u65f6\u95f4\n\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u6811\u9ad8\u3002 \n//\u4ee5\u4e0a\u6765\u81ea\u4e8e\u767e\u5ea6\u767e\u79d1\n\n\u867d\u7136\u8bf4\u6709\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u8fd8\u662f\u6570\u7ec4\u6700\u65b9\u4fbf\u4e86\n\n\u4e5f\u5c31\u662f\u901a\u8fc7\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\u6765\u4fdd\u5b58\u5b57\u7b26\u4e32\uff08\u6bd4\u5982\u5982\u4e0b\u56fe\u7247\uff08\u53c8\u662f\u767e\u5ea6\u7684\u56fe\uff09\uff09\uff08\u9003\uff09\n![](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=27e168080fb30f242197e451a9fcba26/d62a6059252dd42a745cc2c2033b5bb5c9eab806.jpg)\n\n\u4e0b\u9762\u4ee5\u8fd9\u9053\u9898\u6765\u7b80\u5355\u5730\u89e3\u8bf4\u4e00\u4e0b\u8fd9\u79cdtrie\u6570\u636e\u7ed3\u6784\u5427\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#define MAXN 100100\nusing namespace std;\nint n,m;\nchar s[MAXN<<2],ss[MAXN<<2];\nint son[26][MAXN<<2],last[MAXN<<2],visit[MAXN<<2];\n//\u56e0\u4e3a\u662f\u6811\u7684\u6570\u7ec4\u7ed3\u6784......\u6240\u4ee5\u6570\u7ec4\u8981\u5f00\u7684\u5927\u4e00\u70b9 \nint main(){\n\tscanf(\"%d\",&n);\n\tint cur,cnt=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\t//\u8f93\u5165\u7684\u5b57\u7b26\u6570\u7ec4\u4ece1\u5f00\u59cb\uff08\u800c\u4e0d\u662f0\uff09 \n\t\tint len=strlen(s+1);\n\t\t//\u56e0\u4e3a\u662f\u4ece\u4e00\u5f00\u59cb\uff0c\u6240\u4ee5\u662f\u8981\u52a0\u4e00\u7684\uff080\u4e5f\u7b97\uff09 \n\t\tcur=1;\n\t\t//\u6ce8\u610f\u6bcf\u6b21\u90fd\u8981\u4ece\u6839\u8282\u70b9\uff08\u4e5f\u5c31\u662f1\uff09\u5f00\u59cb\u8d70 \n        //\u6839\u8282\u70b9\u662f\u6ca1\u6709\u5b57\u7b26\u50a8\u5b58\u7684\n\t\tfor(int j=1;j<=len;j++)\n\t\t{\n\t\t\tif(!son[s[j]-'a'][cur])\n\t\t\t   son[s[j]-'a'][cur]=++cnt;\n\t\t\t   //\u5982\u679c\u5f53\u524d\u8282\u70b9cur\u7684\u5b50\u8282\u70b9s[j-'a']\u8fd8\u6ca1\u6709\u88ab\u8d4b\u503c\uff0c\u5c31\u8d4b\u4e88\u5b83\u4e00\u4e2a\u65b0\u7684\u8282\u70b9num \n\t\t\t   //\u5982\u679c\u88ab\u8d4b\u4e88\u503c\u4e86\u5c31\u987a\u7740\u4ed6\u5f80\u4e0b\u8d70\n\t\t\tcur=son[s[j]-'a'][cur];\n\t\t\t//\u8fd9\u91cc\u4e0d\u80fd\u5199\u6210cnt\uff0c\u4f1aWA\u7684\uff0c\u56e0\u4e3a\u8d70\u5b8c\u4e86\u4e4b\u540e\u662f\u8fd8\u4f1a\u56de\u6765\u7684 \n\t\t } \n\t\t last[cur]=i;\n\t\t //\u8fd9\u91cc\u8868\u793a\u7684\u662fcur\u8282\u70b9\u4ee3\u8868\u7684\u662fi\u5b57\u7b26\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n         //\u65b9\u4fbf\u4e0b\u9762\u67e5\u627e\n\t}\n    //\u4ee5\u4e0a\u662f\u5efa\u6811\u64cd\u4f5c\n    //\u4e0b\u9762\u662f\u67e5\u8be2~~\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",ss+1);\n\t\tcur=1;\n\t\tint len=strlen(ss+1);\n        //\u540c\u4e0a\n\t\tfor(int j=1;j<=len;j++)\n\t\t   cur=son[ss[j]-'a'][cur];\n           //\u627e\u5230\u8fd9\u4e2a\u5b57\u7b26\u6570\u7ec4\u6700\u540e\u9762\u4e00\u4e2a\u5b57\u7b26\u6240\u5728\u7684\u8282\u70b9\u4f4d\u7f6e\n\t\t\tif(last[cur]){\n            //\u5982\u679clast\u6570\u7ec4\u5bf9\u5e94\u7684\u6709\u503c\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e2a\u8282\u70b9\u5728\u5efa\u6811\u7684\u65f6\u5019\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8be5\u540d\u5b57\u5408\u6cd5\n\t\t\t\tif(!visit[cur])  printf(\"OK\\n\");\n                //\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u8fd8\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n\t\t\t\telse   printf(\"REPEAT\\n\");\n                //\u5982\u679c\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\n\t\t\t\tvisit[cur]=1;\n\t\t\t}  else printf(\"WRONG\\n\");\n            //\u6ca1\u6709\u8d4b\u503c\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4f4d\u4e3acur\uff0c\u6240\u4ee5\u8be5\u540d\u5b57\u4e0d\u5408\u6cd5\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1531918486,
        "uid": 107488,
        "name": "\u98ce\u6d54\u51cc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u672c\u7bc7\u9898\u89e31452ms\uff08\u4e0d\u5f00O2\uff09/30.92MB\u8bf7\u653e\u5fc3~~\u6284\u88ad~~\u98df\u7528\n\nWow \u770b\u5230\u6ee1\u5c4f\u7684\u6307\u9488\uff0c\u5f53\u65f6\u6211\u5c31\u9707\u60ca\u4e86\u3002\n\n\u8c8c\u4f3c\u6ca1\u6709c++\u9012\u5f52\u5efatrie\u6811+map\u7684\u9898\u89e3\uff0c\u600e\u4e48\u529e\uff0c\u81ea\u5df1\u5199\u4e00\u7bc7\u5457\u3002\n\n------------\u4ee5\u4e0a\u662f\u5e9f\u8bdd\n\n\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u5148\u6765\u7b80\u5355\u7684\u4ecb\u7ecd\u4e00\u4e0bmap\u5427\u3002\n\nmap\u662f\u4e00\u79cd\u5bb9\u5668\u5f62\u4f3cmap<\u7c7b\u578bA,\u7c7b\u578bB>(map\u540d)\n\n\u4ed6\u53ef\u4ee5\u5728\u5185\u90e8\u63d0\u4f9b\u4e00\u4e2a\u4e00\u5bf9\u4e00\u7684\u901a\u9053\uff08\u7ea2\u9ed1\u6811\uff09\uff0c\u6765\u5206\u522b\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u503c\n\u5728\u672c\u7bc7\u9898\u89e3\u4e2d\u6211\u4eec\u6709map<string,int>kk;\u7528kk[s]\u6765\u8868\u793a\u5b57\u7b26\u4e32s\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7\u3002\n\n\u7136\u540e\u662f\u4ee5\u9012\u5f52\u4e3a\u6838\u5fc3\u7684trie\u6811\n\n\u540c\u6837\u6709\u4e24\u6bb5\u51fd\u6570\uff1a\u5efa\u6811\u4e0e\u67e5\u627e\n\n```cpp\nvoid build(int now,int i)//\u5efa\u6811\n{\n\tif(i>n-1)\n\t{\n\t\tnum[now]++;\n\t\treturn;\n\t}\n\tif(p[now][s[i]-'a']==0)\n\t   p[now][s[i]-'a']=++tot;\n\tbuild(p[now][s[i]-'a'],i+1);\n}\n\nint find(int now,int i)//\u67e5\u627e\n{\n\tif(i>n-1)  \n\t\treturn num[now];\n\tif(p[now][s[i]-'a'])  return find(p[now][s[i]-'a'],i+1);\n\telse return 0;\n}\n```\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2dtot\u8868\u793a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u7f16\u53f7\uff0cs\u662f\u6211\u4eec\u7684\u5b57\u7b26\u4e32\uff0cp\u6570\u7ec4\u5c31\u662f\u6211\u4eec\u7684trie\u6811\u4e86\uff0c\u5176\u4e2d\u7b2c\u4e00\u7ef4\u8868\u793a\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5f1f\u4e8c\u7ef4\n\u8868\u793a\u7684\u5219\u4e3a\u5b57\u7b26\u7684\u79cd\u7c7b\n\n\u7136\u540e\u662f\u4e3b\u51fd\u6570\n```cpp\nfor(int i=1;i<=np;i++)\n\t{\n\t\tcin>>s;\n\t\tn=s.size();\n\t\tbool k;\n\t\tint ol=find(0,0);\n\t\tif(ol==0) k=false;\n\t\telse k=true;\n\t\tif(!k)\n\t\t  printf(\"WRONG\\n\");\n\t\telse if(k&&kk[s]==0)//s\u6ca1\u6709\u51fa\u73b0\u8fc7 \n\t\t  {\n\t\t  printf(\"OK\\n\");\n\t\t  kk[s]=1;\n\t\t  }\n\t\telse if(k&&kk[s]==1)//s\u5df2\u7ecf\u51fa\u73b0\u8fc7\n\t\t  printf(\"REPEAT\\n\");\n\t}\n```\n\n\u901a\u8fc7\u67e5\u627e\u5bf9\u5e94\u7684\u503c\u662f\u5426\u4e3a0\u6765\u786e\u5b9a\u8be5\u540d\u5b57\u662f\u5426\u6709\u8fd9\u4e48\u4e00\u4e2a\u4eba\n\u5982\u679c\u6ca1\u6709\u76f4\u63a5\u8f93\u51faWRANG\n\n\u5982\u679c\u6709\u4e14\u6ca1\u6709\u88ab\u70b9\u8fc7\uff0c\u5c31\u8f93\u51faOK,\u5e76\u628a\u5176\u5728map\u4e2d\u7684\u72b6\u6001\u6539\u4e3a\u51fa\u73b0\u8fc7\u4e86\n\n\u5982\u679c\u6709\u4e14\u6ca1\u6709\u88ab\u70b9\u8fc7\uff0c\u5c31\u8f93\u51faREPEAT\u3002\n\n~~\u9644\uff1a\u7089\u77f3\u662f\u4e2a\u597d\u6e38\u620f(\u9003~~\n",
        "postTime": 1530858818,
        "uid": 103762,
        "name": "Wow_Goodjob",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u8fd9\u9898\u770b\u697c\u4e0b\u7684\u5927\u4f6c\u90fd\u662f\u7528\u7684trie\u6811\u4e4b\u7c7b\u7684\u4e1c\u4e1c\n\n\u5176\u5b9e\u53ef\u4ee5\u7528**STL\u7684map**\u6c34\u8fc7\u53bb\n\n\u5c31\u662f\u8bf4map < string,int > mm,\u7136\u540emm[\"\u540d\u5b57\"]\u7b49\u4e8e1\u5c31\u4ee3\u8868\u53ea\u70b9\u4e86\u4e00\u6b21,\u7b49\u4e8e2\u4ee3\u8868\u91cd\u590d\u4e86,\u7b49\u4e8e0\u4ee3\u8868\u6839\u672c\u6ca1\u8fd9\u4e2a\u4eba\n\n\u8d34\u4ee3\u7801:\n\n```cpp\n#include<iostream>\n#include<map>\n#include<string>\nusing namespace std;\nmap<string,int>mm;//\u5b9a\u4e49mm,\nint main()\n{\n\tint n,m;\n\tstring a;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a;\n\t\tmm[a]=1;//\u6709\u8fd9\u4e2a\u4eba\u5c31\u8d4b\u503c\u4e3a1\n\t}\n\tcin>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>a;\n\t\tif(mm[a]==1)//\u7b49\u4e8e1\u4ee3\u8868\u7b2c\u4e00\u6b21\u70b9\u540d\n\t\t{\n\t\t\tcout<<\"OK\"<<endl;\n\t\t\tmm[a]++;//mm[a]++\u5c31\u662f\u628a\u5b83\u53d8\u62102,\u4ee3\u8868\u70b9\u8fc7\u4e86\n\t\t}\n\t\telse if(mm[a]==2)//\u7b49\u4e8e2\u5c31\u4ee3\u8868\u91cd\u590d\u4e86\n\t\t{\n\t\t\tcout<<\"REPEAT\"<<endl;\n\t\t}\n\t\telse//\u5982\u679c\u4e0d\u91cd\u590d\u4e5f\u4e0d\u6b63\u786e,\u5c31\u4ee3\u8868\u6839\u672c\u6ca1\u8fd9\u4e2a\u4eba,\u56e0\u4e3a\u6ca1\u8fd9\u4e2a\u4eba,\u6240\u4ee5\u6211\u4eec\u6ca1\u7ed9\u5b83\u8d4b\u503c,\n\t\t{\n\t\t\tcout<<\"WRONG\"<<endl;\n\t\t}\n\t}\n}\n```\n---\n\n\u5f88\u4e45\u4e4b\u524d(2018/3/10),\u6211\u53d1\u4e86\u4e00\u7bc7map\u7684\u9898\u89e3,\n\n\u5f88\u4e45\u4e4b\u540e(2018/7/12),\u6211\u5b66\u4f1a\u4e86Trie\u6811(\u5b57\u5178\u6811)\n\n\u5b57\u5178\u6811\u8bb8\u591a\u5927\u4f6c\u90fd\u4f1a\u4e86 ~~\u6211\u4e0d\u662f\u5927\u4f6c~~ ,\u8fd9\u9898\u7684\u4e3b\u8981\u96be\u70b9\u5728\u4e8erepeat\u7684\u5224\u65ad,\u4e00\u822c\u7684\u5b57\u5178\u6811\u6bcf\u6b21\u5224\u65ad\u90fd\u662fyes/no,\u8fd9\u4e00\u9898\u9700\u8981\u5224\u91cd,\u6709\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u518d\u5f00\u4e00\u4e2abool\u6570\u7ec4\u3002\n\n\u697c\u4e0b\u5927\u4f6c\u7528\u4e86\u7ed3\u6784\u4f53,\u4f46\u662f\u6211\u628a\u7ed3\u6784\u4f53\u53bb\u6389\u4e86\u3002\n\n\u4eb2\u6d4b 128ms/29MB,\u53ef\u653e\u5fc3\u98df\u7528\u3002(\u5f53\u65f6map\u662f600\u591ams)\n\n\u5177\u4f53\u5206\u6790\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>//\u5404\u79cd\u5934\u6587\u4ef6\nusing namespace std;\nconst int MAXN=500010;\nconst int MAXZ=26;\nint ch[MAXN][MAXZ];//ch[u][i]\u4ee3\u8868\u6811\u4e0a\u7b2cu\u4e2a\u8282\u70b9\u7684\u7b2ci\u4e2a\u5b57\u7b26\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u3002\nbool b[MAXN]={0};//\u5224\u65ad\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u4e3a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff0c\u5982\u679c\u4e0d\u8981\u8fd9\u4e2a\u7684\u8bdd\uff0c\u4e00\u4e2a\u4e32\u662f\u53e6\u4e00\u4e2a\u7684\u524d\u7f00\u5c31\u4f1a\u8bef\u5224\u3002\nbool b2[MAXN]={0};//\u5224\u65ad\u4e00\u4e2a\u4e32\u662f\u5426\u88ab\u91cd\u590d\u8bbf\u95ee(\u91cd\u590d\u70b9\u540d)\nint tot=1;//\u8282\u70b9\u4e2a\u6570\u3002\nvoid insert(char *s)//\u63d2\u5165\n{\n\tint len=strlen(s);//\u4fdd\u5b58\u4e32\u7684\u957f\u5ea6,\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\n\tint u=1;//u\u4e3a\u6839\u8282\u70b9\u3002\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tint c=s[i]-'a';\n\t\tif(!ch[u][c])//\u5982\u679c\u5728\u6811\u4e0a\u627e\u4e0d\u5230\u5355\u8bcd\u7684\u4e00\u4e2a\u5b57\u6bcd,\n\t\t\tch[u][c]=++tot;//\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u5b58\u50a8\u8fdb\u53bb\u3002\n\t\tu=ch[u][c];\n\t}\n\tb[u]=true;//\u5b58\u50a8\u5b8c\u540e\u6807\u8bb0\u8fd9\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\u3002\n}\nint find(char *s)//\u67e5\u627e\n{\n\tint len=strlen(s);\n\tint u=1;\n\tfor(int i=0;i<len;i++)//\u67e5\u627e\u4e0e\u63d2\u5165\u5f88\u50cf\n\t{\n\t\tint c=s[i]-'a';\n\t\tif(!ch[u][c])//\u5982\u679c\u627e\u4e0d\u5230\u5b57\u6bcd\u5c31\u76f4\u63a5\u8fd4\u56de0\u4e86\u3002\n\t\t\treturn 0;\n\t\tu=ch[u][c];\n\t}\n\tif(b[u])//\u8981\u5224\u65ad\u662f\u5426\u4e3a\u7ed3\u5c3e\uff0c\u5982\u679c\u4e0d\u52a0\u7684\u8bdd\u90a3\u4e48abc\u548cab\u90fd\u4f1a\u8fd4\u56de1\u3002\n\t\tif(b2[u])//b2[u]\u4e3atrue\u8bf4\u660e\u70b9\u8fc7\u4e00\u6b21\u4e86\u3002\n\t\t\treturn 2;\n\t\telse\n\t\t{\n\t\t\tb2[u]=1;//\u5426\u5219\u5c31\u6807\u8bb0\u70b9\u8fc7\u540d\u3002\n\t\t\treturn 1;\n\t\t}\n\treturn 0;\n}\nint main()\n{\n\tint n;\n\tchar s[1024];//\u540d\u5b57\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tinsert(s);//\u8bfb\u5165and\u63d2\u5165\u3002\n\t}\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tint f=find(s);//\u7528\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u67e5\u8be2\u7ed3\u679c(\u4e0d\u5b58\u50a8\u4f1a\u51fa\u73b0\u7384\u5b66\u9519\u8bef)\n\t\tif(f==0)\n\t\t{\n\t\t\tprintf(\"WRONG\\n\");\n\t\t}\t\n\t\telse if(f==1)\n\t\t{\n\t\t\tprintf(\"OK\\n\");\t\n\t\t}\n\t\telse if(f==2)\n\t\t{\n\t\t\tprintf(\"REPEAT\\n\");\t//\u6839\u636e\u7ed3\u679c\u5224\u65ad\u70b9\u540d\u5bf9\u9519\u3002\n\t\t}\n\t}\n    return 0;//\u7ed3\u675f\u3002\n}\n```",
        "postTime": 1520656136,
        "uid": 56565,
        "name": "Stella_Yan",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u6b64\u9898\u53ef\u4ee5\u7528STL\u4e2d\u7684map\u505a\uff0c\u4f46\u662f\u4e86\u89e3\u4e00\u4e0bTrie\u6811\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u5fc5\u987b\u7684\u3002\n\nTrie\u6811\uff08\u53c8\u79f0\u5b57\u5178\u6811\uff09\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\n\n1. \u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u5b83\u4e4b\u5916\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5305\u542b**\u4e00\u4e2a**\u5b57\u7b26\u3002\n\n2. \u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u6240\u6709\u5b57\u7b26\u8fde\u8d77\u6765\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u5b57\u7b26\u4e32\n\n3. \u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5305\u542b\u5b57\u7b26\u4e0d\u540c\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5b57\u7b26\u662f\u53ef\u4ee5\u516c\u7528\u7684\n\n\n\u4e8e\u662f\u6211\u4eec\u7528\u8fd9\u6837\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a\u6bcf\u4e00\u4e2a\u8282\u70b9\uff1a\n\n\u5728\u672c\u9898\u4e2d\u53ef\u4ee5\u7528\u52a8\u6001\u6570\u7ec4vector\u8d2e\u5b58\u6bcf\u4e2a\u5b50\u8282\u70b9\n\n\n    \n```cpp\n             struct node{\n            char c;//\u8be5\u70b9\u5bf9\u5e94\u5b57\u7b26\n            vector<struct node*>s;//\u50a8\u5b58\u513f\u5b50\n            int tag;//\u6807\u8bb0\u662f\u5426\u4e3a\u67d0\u4e00\u5b57\u7b26\u4e32\u7ed3\u5c3e\n            int rep; //\u5e94\u9898\u76ee\u8981\u6c42\u5224\u65ad\u662f\u5426\u91cd\u590d\n           }*root=new struct node;\n```\n\u5f53\u7136\u5b57\u5178\u6811\u6709\u4e24\u4e2a\u51fd\u6570\u5fc5\u4e0d\u53ef\u5c11\uff0c\u5206\u522b\u662fadd(\u63d2\u5165)\u548cquery\uff08\u67e5\u8be2\uff09\u3002\n\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u8fd8\u770b\u4ee3\u7801\uff1a\n\n\n    \n    \n    \n    \n```cpp\n    #include <cstdio>\n    #include <iostream>\n    #include <cstdlib>\n    #include <vector>\n    #include <string>\n    using namespace std;\n    struct node{\n        char c;\n        vector<struct node*>s;\n        int tag;\n        int rep; \n    }*root=new struct node;\n    void add(string str)\n    {\n        struct node*p=root;\n        for(int i=0;i<str.length();i++)\n        {\n            int j;\n            for(j=0;j<p->s.size();j++)\n              if(p->s[j]->c==str[i])break;//\u5982\u679c\u627e\u5230\u5bf9\u5e94\u516c\u7528\u5b57\u7b26\n            if(j==p->s.size())//\u5982\u679c\u904d\u5386\u5b8c\u540e\u6ca1\u627e\u5230\u65b0\u5efa\u4e00\u4e2a\n            {\n                struct node *newnode =new struct node;\n                newnode->c=str[i];\n                newnode->s.clear();\n                newnode->tag=0;\n                newnode->rep=0; \n                p->s.push_back(newnode);\n                p=newnode;\n            }\n            else p=p->s[j];\n        } \n        p->tag=1;//\u6807\u5fd7\u6b64\u8282\u70b9\u4e3a\u4e00\u5b57\u7b26\u4e32\u7ed3\u5c3e\n    }\n    int query(string str)\n    {\n        struct node*p=root;\n        for(int i=0;i<str.length();i++)\n        {\n            int j;\n            for(j=0;j<p->s.size();j++)  \n                if(p->s[j]->c==str[i]) \n                     {break;}\n            if(j==p->s.size()) //\u5982\u679c\u904d\u5386\u5b8c\u540e\u6ca1\u627e\u5230\n               return 0;\n            p=p->s[j];\n        }\n        if(p->rep!=3)\n        {\n            p->rep=3;return p->tag;//\u627e\u5230\u7684\u5b57\u7b26\u53ef\u80fd\u53ea\u662f\u67d0\u4e00\u524d\u7f00\u800c\u975e\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2atag\u6807\u8bb0\n        }\n        else if(p->rep==3)return p->rep;\n    }\n    int main()\n    {\n        int n,m;\n        char tag[50];\n        cin>>n;\n        root->s.clear();\n        for(int i=1;i<=n;i++)\n        {\n            string str;\n            cin>>str;\n            add(str);\n        }\n        cin>>m;\n        for(int i=1;i<=m;i++)\n        {\n            string str;\n            cin>>str;\n            int flag=query(str);\n            if(flag==0)puts(\"WRONG\");\n            else if(flag==1)puts(\"OK\");\n            else if(flag==3)puts(\"REPEAT\");\n        }\n        return 0;\n}\n```",
        "postTime": 1514622304,
        "uid": 61382,
        "name": "Rye_Catcher",
        "ccfLevel": 6,
        "title": "Trie\u6811\uff08\u5b57\u5178\u6811\uff09-\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u6709\u8f7b\u5faebug\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u7531\u4e8e\u6d1b\u8c37\u7684\u6570\u636e\u6bd4\u8f83\u5f31\uff08\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u7684\u540d\u5b57\u51fa\u73b0\u8fc7\u4e24\u6b21\u4ee5\u4e0a\uff09\uff0c\u8be5\u7a0b\u5e8f\u53ef\u4ee5AC\u3002\u4e0d\u4fe1\uff0c\u8bd5\u4e00\u4e0b\u4e0b\u9762\u7684\u6570\u636e\uff1a\n\n1\na\n4\nb\nb\nb\nb\n\u8be5\u7a0b\u5e8f\u5c06\u4f1a\u8f93\u51faWRONG, WRONG, OK, REPEAT\u3002\u9519\u56e0\u548c\u4fee\u590d\u65b9\u6cd5\u89c1\u4e0b\u3002\n\n\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a\u7528map&lt;string, int&gt;\u6765\u5b58\u50a8\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u201c\u6b21\u6570\u201d\u3002\u6bcf\u4e00\u4e2a\u5728\u540d\u5b57\u8868\u91cc\u51fa\u73b0\u7684\u540d\u5b57\u7684\u201c\u6b21\u6570\u201d\u90fd\u4f1a\u88ab\u7f6e\u4e3a-2\uff0c\u539f\u56e0\u662f\u4e00\u65e6\u78b0\u5230\u672a\u51fa\u73b0\u7684\u540d\u5b57\uff0c\u5728map\u4e0a\u4f7f\u7528[]\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u5c06\u8fd9\u4e2a\u540d\u5b57\u7684\u201c\u6b21\u6570\u201d\u7f6e\u4e3a0\uff0c\u518d\u4f7f\u5f97\u51fa\u73b0\u6b21\u6570-1\uff08\u89c1\u4ee3\u7801\uff09\u65f6\u5c31\u6210\u4e3a\u4e86-1\u3002\n\n    \n    \n```cpp\n    #include<iostream>\n    #include<string>\n    #include<algorithm>\n    #include<map>\n    using namespace std;\n    map<string, int> ss; //\u5b58\u50a8\u201c\u6b21\u6570\u201d\n    int main() {\n        int w; cin >> w;\n        for (int i = 0; i < w; ++i) {\n            string k; cin >> k;\n            ss[k] = -2; //\u8bfb\u5165\uff0c\u201c\u6b21\u6570\u201d\u7f6e\u4e3a-2\n        }\n        int q; cin >> q;\n        for (int i = 0; i < q; ++i) {\n            string k; cin >> k;\n            if (--ss[k] != -3) { //\u6b63\u786e\u7684\u201c\u6b21\u6570\u201d\u4e3a-2\uff0c\u5219--\u4e4b\u540e\u5e94\u4e3a-3\n                //< -3\u662f\u51cf\u4e86\u591a\u6b21\uff0c\u5e94\u8f93\u51faREPEAT\uff1b > -3\u4e5f\u5c31\u662f-1\u7684\u60c5\u51b5\n                cout << (ss[k] < -3 ? \"REPEAT\\n\" : \"WRONG\\n\");\n            } else {\n                cout << \"OK\\n\";\n            }\n        }\n        return 0;\n    }\n```\n\u4f46\u662f\uff0c\u5f53WRONG\u7684\u540d\u5b57\u51fa\u73b0\u591a\u6b21\uff0c\u4ee5\u81f3\u4e8ess[k]\u5728\u81ea\u51cf\u7684\u8fc7\u7a0b\u4e2d\u8fbe\u5230-3\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u5f00\u59cb\u63d0\u5230\u7684\u95ee\u9898\u3002\u90a3\u4e48\u89e3\u51b3\u7684\u65b9\u6848\u4e5f\u662f\u6709\u7684\uff0c\u800c\u4e14\u6709\u4e24\u4e2a\uff1a\n1. \u4f7f\u7528map::count == 0\u6765\u5224\u65ad\u662f\u5426\u5728\u540d\u5b57\u8868\u4e2d\u3002\n\n\u539f\u6765\u672c\u4eba\u672a\u91c7\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u4ee5\u4e3acount\u662fO(N)\u7684\uff0c\u4f46\u662fC++ reference\u4e0a\u5199\u7740\uff08http://www.cplusplus.com/reference/map/map/count/\uff09:\n\n\"Complexity: Logarithmic in size.\" (\u65f6\u95f4\u590d\u6742\u5ea6O(log N))\n\n\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002\n\n2. \u5c06ss[k]\u7f6e\u4e3a-100000000\uff08\u6216\u8005\u5176\u4ed6\u5c0f\u503c\uff09\u3002\n\n\u6839\u636e\u6570\u636e\u8303\u56f4\uff0c\u5373\u4f7f\u9519\u8bef\u7b54\u6848\u91cd\u590d\u51fa\u73b0m\u6b21\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\n",
        "postTime": 1514382745,
        "uid": 64757,
        "name": "huang_yue",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "** \u770b\u5230\u67d0\u540c\u5b66\u5728\u62ff\u8fd9\u9898\u7ec3trie,\u7136\u540e\u770b\u4e86\u770b\u53ea\u6709pbds\u7684hash,\u4e8e\u662f\u6211\u5c31\u5199\u4e2apbds\u7684tree **\n\n** \u601d\u8def:\u6b63\u5e38\u601d\u8def(\u4e24\u4e2aset,\u5206\u522b\u4fdd\u5b58\u540d\u5b57\u548c\u70b9\u5230\u7684\u540d\u5b57) **\n\n\n```cpp\n#include <cstdio>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp> //\u4fe9\u5934\u6587\u4ef6\nusing namespace std;\nint n, m;\nchar st[50];\nstring st1;\n__gnu_pbds::tree < string, __gnu_pbds::null_type > m1, m2; //\u7528\u6cd5\u7c7b\u4f3c\u4e8emap,\u5982\u679c\u8981\u7528set\u628amap\u7684value\u8bbe\u7f6e\u4e3a__gnu_pbds::null_type\u5373\u53ef.\nint main()\n{\n    scanf(\"%d\", &n);    \n    for (register int i = n + 1; --i; ) //\u5947\u5f02\u7684\u5faa\u73af\n    {\n        scanf(\"%s\", st); //\u542c\u8bf4string\u8bfb\u5165\u5f88\u6162\n        m1.insert(st); //\u5b58\u5728\u7684\u540d\u5b57\n    }\n    scanf(\"%d\", &m);\n    for (register int i = m + 1; --i; )\n    {\n        scanf(\"%s\", st);\n        st1 = st;\n        if (m1.find(st1) == m1.end()) puts(\"WRONG\"); //\u5982\u679c\u5728m1\u4e2d\u65e0\u6cd5\u627e\u5230st,\u5219\u8868\u793a\u8be5\u540c\u5b66\u4e0d\u5b58\u5728.\n        else if (m2.find(st1) == m2.end()) puts(\"OK\"); //\u5982\u679c\u5728m1\u4e2d\u627e\u5230\u4e86\u4f46\u662fm2\u4e2d\u627e\u4e0d\u5230,\u8868\u793a\u70b9\u540d\u65e0\u8bef.\n        else puts(\"REPEAT\"); //\u5982\u679c\u90fd\u4e0d\u662f\u8868\u793a\u91cd\u590d.\n        m2.insert(st1); //\u4e8b\u5b9e\u4e0a\u5982\u679c\u8be5\u540c\u5b66\u4e0d\u5b58\u5728\u6216\u8005\u91cd\u590d\u662f\u4e0d\u7528insert\u7684,\u4e0d\u8fc7insert\u4e86\u4f3c\u4e4e\u4e5f\u4e0d\u4f1a\u6709\u8bef\n    }\n    return 0;\n}\n```",
        "postTime": 1509080836,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "/\\*\n\u7ed9\u4e00\u4e2a\u4e0d\u7528\u6307\u9488\uff0c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5199\u7684TRIE\uff0c\u5f53\u521d\u53ea\u4e3a\u7701\u7a7a\u95f4\n\n\\*/\n\n```cpp\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define Rep(i,a,b) for(register int i=a;i>=b;--i)\nconst int maxx=5000001;\nusing namespace std;\nint be[maxx],ne[maxx],to[maxx],e=0,cnt=0;    //cnt\u8868\u793a\u8282\u70b9\u7f16\u53f7\uff0ce\u8868\u793a\u8fb9\u7684\u7f16\u53f7\nvoid add(int x,int y){\n    to[++e]=y;\n    ne[e]=be[x];\n    be[x]=e;\n}\nstruct node{\n    char x;                    //x:\u5f53\u524d\u8282\u70b9\u6240\u5b58\u7684\u5b57\u7b26\n    bool vis,end;            //vis \u662f\u5426REPEAT  end\u662f\u5426\u4e3a\u540d\u5b57\u7ed3\u5c3e\n}trie[maxx];\nchar name[56];\nvoid insert(char *s){            //\u63d2\u5165\u64cd\u4f5c\n    int pos=0,len=strlen(s),i=0,flag;\n    For(i,0,len-1){    \n        flag=0;\n        for(int j=be[pos];j;j=ne[j]){\n            int go=to[j];\n            if(trie[go].x==s[i]){            //\u627e\u5230\u5df2\u6709\u76f8\u540c\u8282\u70b9\uff0c\u5c31\u628a\u4f4d\u7f6e\u8d4b\u7ed9pos\n                flag=1;\n                pos=go;\n                break;\n            }\n        }\n        if(!flag) {add(pos,++cnt); pos=cnt; trie[pos].x=s[i];}//\u6ca1\u6709\u627e\u5230\u5c31\u65b0\u5efa\u8282\u70b9\uff0c\u5355\u5411\u8fb9\uff01\n        if(i==len-1) trie[pos].end=1;        //\u6807\u8bb0\u7ed3\u675f\n    }\n}\nint query(char *s){\n    int pos=0,len=strlen(s),i=0,flag;\n    For(i,0,len-1){\n        flag=0;\n        for(int j=be[pos];j;j=ne[j]){\n            int go=to[j];\n            if(trie[go].x==s[i]){\n                pos=go;\n                flag=1;\n                break;\n            }\n        }\n        if(!flag) return 0;                //\u6ca1\u627e\u5230\u5c31\u8fd4\u56de0\n        if(i==len-1)\n            if(trie[pos].end){            //\u5224\u65ad\u662f\u5426REPERT\n                if(!trie[pos].vis) {trie[pos].vis=1; return 1;}        \n                else return 2;\n            }\n            else return 0;\n    }\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"output.out\", \"w\", stdout);\n#endif\n    int n,m,k;\n    scanf(\"%d\",&n);\n    For(i,1,n){\n        scanf(\"%s\",name);\n        insert(name);\n    }\n    scanf(\"%d\",&m);\n    For(i,1,m){\n        scanf(\"%s\",name);\n        k=query(name);\n        if(k==1) puts(\"OK\");\n        else if(!k) puts(\"WRONG\");\n        else puts(\"REPEAT\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1503238582,
        "uid": 19622,
        "name": "\u7f57\u65c5\u6d32",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "**STL~~**\n\n/\\*\u5728\u672c\u9898\u4e2d\uff0c\u53ef\u4ee5\u5f00\u4e24\u4e2a\u6620\u5c04\uff0c\u7b2c\u4e00\u4e2a\u5b58\u4e0b\u540d\u5b57\u662f\u5426\u6b63\u786e\u00b7\uff0c\u7b2c\u4e8c\u4e2a\u5b58\u540d\u5b57\u51fa\u73b0\u8fc7\u6ca1\u6709\\*/\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<map>\nusing namespace std;\nint n,m;\nstring z;\nmap<string,bool>a,b;//a\u5b58\u662f\u5426\u6b63\u786e\uff0cb\u5b58\u662f\u5426\u51fa\u73b0\u8fc7\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n       cin>>z;\n       a[z]=true;//\u5b58\u6240\u6709\u4eba\u7684\u540d\u5b57\n    }\n    cin>>m;\n    for(int i=1;i<=m;i++)\n    {\n       cin>>z;\n       if(!a.count(z)) cout<<\"WRONG\"<<endl;//\u5982\u679ca\u91cc\u9762\u6ca1\u6709z\u5c31\u662f\u9519\u8bef\uff08\u4e00\u5f00\u59cb\u5fd8\n       else{                                                         //\u4e86\u8f93\u51faendl\uff0c\u5168WA\u4e86\uff0c\u4e00\u76f4\u6ca1\u5f04\u660e\n           if(!b.count(z)){                                     //\u767d\u548b\u56de\u4e8b\uff0c\u5ffd\u7136\u53d1\u73b0\u662ftoo many \n                                                                         //or too few lines...\uff09\n               cout<<\"OK\"<<endl;//\u6ca1\u88ab\u70b9\u8fc7\uff0c\u5c31OK\uff0c\u5e76\u6253\u4e0a\u6807\u8bb0\n               b[z]=true;\n           }\n           else cout<<\"REPEAT\"<<endl;//\u88ab\u70b9\u8fc7\uff0c\u5c31REPEAT\n       }\n    }\n}\n```",
        "postTime": 1502981663,
        "uid": 40482,
        "name": "richardchen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "tire\u6811:\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u6307\u9488\u5efa\u6811(\u4f46\u8ddf\u697c\u4e0b\u7684\u4e0d\u4e00\u6837)\n\nSTL\u5361\u4e86\u6211\u534a\u5929:\n\n1.vector\u5b58\u5b50\u8282\u70b9\n\n2.string\u5b58\u5b57\u7b26\u4e32\n\n3.cin\u8bfb\u5165,cout\u8f93\u51fa\n\n\u7b2c\u4e00\u904d\u53bb\u6389string----TLE90\u5206\n\n\u7b2c\u4e8c\u904d\u53bb\u6389cin/out-----\u7ec8\u4e8e\u8fc7\u4e86\n\n(vector\u61d2\u5f97\u6362\u6389\u4e86)\n\n\u8be6\u60c5\u89c1\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\nusing namespace std;\nconst int N=100001;\nstruct trie //trie\u6811\u7684\u7ed3\u6784\n{\n    bool f1,f2; \n    //f1\u8868\u793a\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u4e3a\u540d\u5b57\u7684\u672b\u5c3e(\u5373\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u4e00\u4e2a\u51fa\u73b0\u8fc7\u7684\u540d\u5b57)\n    //f2\u8868\u793a\u5728\u70b9\u540d\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u540d\u5b57\u662f\u5426\u88ab\u70b9\u8fc7(\u5373\u5224\u65ad\u662f\u5426REPEAT) \n    char ch;int num; //ch\u662f\u8be5\u8282\u70b9\u4ee3\u8868\u7684\u5b57\u6bcd,num\u662f\u7f16\u53f7 \n    vector<trie*>son;  //\u7528vector\u5b58\u5b50\u8282\u70b9(\u88ab\u5361\u5f97\u5389\u5bb3) \n    trie(char cc,int numb)  //\u6784\u9020\u51fd\u6570 \n        {ch=cc;num=numb;f1=f2=0;}\n}*t[N*50]; \nint n,m,cnt;\nchar s[50];\nvoid add(int p,int k,char a[50])  //\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u6811\uff0ck\u662f\u5f53\u524d\u8981\u63d2\u5165\u7684\u5b57\u7b26\u7684\u4e0b\u6807\uff0c\u6240\u4ee5a[k]\u8868\u793a\u5f53\u524d\u8981\u63d2\u5165\u7684\u5b57\u7b26 \n{\n    if (k==strlen(a))  //\u5982\u679c\u5df2\u7ecf\u6dfb\u52a0\u5b8c\u6bd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u6807\u8bb0\u4e3a\u662f\u5355\u8bcd\u7684\u672b\u5c3e \n        {t[p]->f1=1;return;}\n    char x=a[k];\n    for (int i=0;i<t[p]->son.size();i++)  //\u627e\u51fa\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2d\u54ea\u4e2a\u662f\u8981\u63d2\u5165\u7684\n        if (t[p]->son[i]->ch==x)\n            {add(t[p]->son[i]->num,k+1,a);break;} //\u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\u4e3a\u8981\u63d2\u5165\u7684\u5b57\u6bcd\uff0c\u6240\u4ee5\u4e0d\u7528\u65b0\u5f00\u4e00\u4e2a\u70b9\u5b58\uff0c\u5c31\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c \n    //\u5982\u679c\u6ca1\u6709\u5b58\u5728\u5df2\u7ecf\u4e0e\u8981\u63d2\u5165\u7684\u5b57\u6bcd\u76f8\u540c\u7684\u8282\u70b9: \n    cnt++; //\u8868\u793a\u65b0\u6784\u5efa\u7684\u70b9\u7684\u7f16\u53f7 \n    t[cnt]=new trie(x,cnt);  //\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u8981\u63d2\u5165\u7684\u5b57\u6bcd\uff0c\u7f16\u53f7\u4e3acnt \n    t[p]->son.push_back(t[cnt]);   //\u628a\u8fd9\u4e2a\u70b9\u7eb3\u5165\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2d \n    add(cnt,k+1,a);  //\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c \n}\nchar* run(int p,int k,char a[50])  //\u8dd1\u4e00\u904d\u67e5\u8be2 \n{\n    if (k==strlen(a))  //\u5982\u679c\u8be5\u5b57\u7b26\u4e32\u5df2\u7ecf\u904d\u5386\u5b8c\u6bd5 \n        if (t[p]->f1)  //\u5982\u679c\u5230\u5f53\u524d\u6240\u5728\u7684\u8282\u70b9\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u662f\u63d0\u4f9b\u7684\u540d\u5b57 \n            if (t[p]->f2){return \"REPEAT\";}  //\u5982\u679c\u5df2\u7ecf\u88ab\u70b9\u5230\u4e86\u5c31\u8fd4\u56deREPEAT \n            else {t[p]->f2=1;return \"OK\";}  //\u5982\u679c\u8fd8\u672a\u88ab\u70b9\u5230\u5c31OK \n        else return \"WRONG\";  //\u867d\u7136\u8be5\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u6bcd\u90fd\u5728\u6811\u4e2d\uff0c\u4f46\u4e0d\u5728\u540d\u5355\u4e2d\uff0c\u5c31WRONG \n    for (int i=0;i<t[p]->son.size();i++)  //\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c \n        if (t[p]->son[i]->ch==a[k])\n            {return run(t[p]->son[i]->num,k+1,a);break;}\n    return \"WRONG\";\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    t[0]=new trie('.',0);  //\u5efa\u7acb\u8d85\u7ea7\u6839\u8282\u70b9\uff0c\u65e0\u610f\u4e49\uff0c\u7528\u4e8e\u8fde\u63a5 \n    while (n--)\n        scanf(\"%s\",s),add(0,0,s);  //\u4e00\u4e2a\u4e2a\u6dfb\u52a0\u8fdb\u6811 \n    scanf(\"%d\",&m);\n    while (m--)\n        scanf(\"%s\",s),printf(\"%s\\n\",run(0,0,s));  //\u67e5\u8be2 \n    return 0;\n}\n```",
        "postTime": 1499828707,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u8fd9\u65f6\u5019stl\u7684\u529f\u80fd\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\u3002\n\n\u6211\u7528\u7684stl\u662f set\uff08\u96c6\u5408\uff09\uff0c\u6bd4\u5927\u90e8\u5206\u9898\u89e3\u597d\u5199\u4e5f\u597d\u61c2\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nset<string> q,p;\nstring in;\nint n,m,num;\nint main()\n{\n    cin>>n;\n    for( int i=1; i<=n; i++ )\n    {\n        cin>>in;\n        q.insert(in);  //\u96c6\u5408\u4e00\u5b58\u50a8\u518c\u5b50\u4e0a\u7684\u4eba\u540d \n    }\n    cin>>m;\n    for( int i=1; i<=m; i++ )\n    {\n        num=p.size();           //\u8bb0\u5f55\u4e0b \u96c6\u5408\u4e8c\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 \n        cin>>in;\n        if( q.count(in) > 0 )  //\u5224\u65ad\u96c6\u5408\u4e00\u4e2d\u6709\u6ca1\u6709\u8fd9\u4e2a\u4eba \n        {\n            p.insert(in);      //\u5b58\u8fdb\u96c6\u5408\u4e8c \n            if(p.size() - num == 0)  //\u5982\u679c\u96c6\u5408\u4e8c \u6709\u8fd9\u4e2a\u4eba\u540d\uff0c\u5219\u96c6\u5408\u4e8c\u5143\u7d20\u4e2a\u6570\u4e0d\u53d8 \n                cout<<\"REPEAT\"<<endl;\n            else                    //\u5982\u679c\u96c6\u5408\u4e8c \u6ca1\u6709\u8fd9\u4e2a\u4eba\u540d\uff0c\u5219\u96c6\u5408\u4e8c\u5143\u7d20\u6570\u91cf\u4f1a\u53d1\u751f\u53d8\u52a8 \n                cout<<\"OK\"<<endl;\n        }\n        else\n            cout<<\"WRONG\"<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1492784909,
        "uid": 19215,
        "name": "OIer991215",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709c++\u7684trie\uff0c\u4ea4\u4e00\u4e2a\n\n\u9996\u5148\u5173\u4e8etrie\u7684\u5b9e\u73b0\uff0c\u662f\u975e\u5e38\u597d\u7406\u89e3\u7684\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u5462\uff0c\u6709\u597d\u591a\u597d\u591a\u513f\u5b50\uff0c\u6bcf\u4e2a\u513f\u5b50\u5c31\u5bf9\u5e94\u7740\u4e00\u4e2a\u5b57\u7b26\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u201cabc\u201d\u5427\uff0c\u5728trie\u6811\u4e2d\u7684\u641c\u7d22\u8fc7\u7a0b\u5c31\u662f\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\n\n\u5982\u679c\u6709\u4ee3\u8868\u2018a\u2019\u7684\u5b69\u5b50\uff0c\u4e14\u8be5\u5b69\u5b50\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u6211\u4eec\u5c31\u8d70\u5411\u90a3\u4e2a\u8282\u70b9\n\n\u63a5\u7740\u518d\u627e\u6709\u6ca1\u6709\u8868\u793a\u2018b\u2019 \u7684\u8282\u70b9 \u540c\u7406\u6709\u7ee7\u7eed\u8d70\uff0c\u6ca1\u6709\u8df3\u51fa\n\n...\n\u5173\u4e8e\u5224\u91cd\uff0c\u4e00\u5f00\u59cb\u6211\u60f3\u7ef4\u62a4\u4e24\u68f5trie\u7ed3\u679cmle\u4e86... \u4e8e\u662f\u8001\u8001\u5b9e\u5b9e\u5982\u679c\u5728trie\u4e0a\u627e\u5230\u4e86\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c31\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3ecnt+1\uff0c\u4e0b\u4e00\u6b21\u518d\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u53d1\u73b0cnt>1\uff0c\u90a3\u5c31\u662f\u6570\u91cd\u4e86\n\n\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nstruct trie{\n    char _data;\n    trie *_child[28];//trie\u7684\u5b69\u5b50 \n    int _cnt;//\u4ee5\u8be5\u70b9\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u4e2a\u6570 \n};\ntrie * create(){//\u52a8\u6001\u5206\u914d\u52a0\u521d\u59cb\u5316\u4e0d\u89e3\u91ca \n    trie *_ret = (trie *)malloc(sizeof(trie));\n    _ret->_data = 0;\n    for(int i = 0 ; i < 28 ; i++){\n        _ret->_child[i] = NULL;\n    }\n    _ret->_cnt = 0;\n    _ret->color = 0;\n    return _ret;\n}\nvoid insert(trie *_root,char *_in){//\u63d2\u5165 \n    trie *node = _root;\n    char *point = _in;\n    while(*point){\n        if( node->_child[ *point - 'a' ] == NULL){\n            node->_child[ *point - 'a' ] = create();\n        }\n        node = node->_child[ *point - 'a'];\n        point++;\n    }\n}\n\nint search(trie *_root,char *in){//\u67e5\u627e\uff0c\u7ef4\u62a4cnt \n    trie *node = _root;\n    char *point = in;\n    while(*point){\n        if(node->_child[ *point - 'a'] == NULL){\n            return 0;\n        }\n        else{\n            node = node->_child[ *point - 'a'];\n        }\n        point++;\n    }\n    node->_cnt++;\n    return node->_cnt;\n}\ntrie *rot;\nint main(){\n    rot = create();\n    int n,m;\n    char input[100];\n    scanf(\"%d\",&n);\n    for(int i = 0 ; i < n ; i++){\n        scanf(\"%s\",input);\n        insert(rot,input);\n    }\n    scanf(\"%d\",&m);\n    for(int j = 0 ; j < m ; j++){\n        scanf(\"%s\",input);\n        int _cnt = search(rot,input);\n        if(_cnt==0){\n            printf(\"WRONG\\n\");\n        }\n        else if(_cnt==1){\n            printf(\"OK\\n\");\n        }\n        else{\n            printf(\"REPEAT\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1483013681,
        "uid": 29449,
        "name": "__dper__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "map\u5927\u6cd5\u597d\uff01\n\nstl\u5927\u6cd5\u597d\uff01\uff01\n\n\u7528map\u6765\u50a8\u5b58\u5b57\u7b26\u4e32s\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u662f\u5426\u6b63\u786e\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<cstdio>\nusing namespace std;\nmap<string,int> a;\nint main(){\n    int n; scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++){\n        string s;\n        cin>>s;\n        a[s]=1;//\u8868\u793a\u5b57\u7b26\u4e32s\u662f\u6b63\u786e\u7684\n    }\n    int m; scanf(\"%d\",&m);\n    for (int i=1;i<=m;i++){\n        string s;\n        cin>>s;\n        if (a[s]==0) {//\u4e0d\u6b63\u786e\n            printf(\"WRONG\\n\");\n            continue;\n        }\n        if (a[s]==1){\n            printf(\"OK\\n\");\n            a[s]++;//\u51fa\u73b0\u4e00\u6b21\u4e86\n            continue;\n        }\n        if (a[s]>1) printf(\"REPEAT\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1478659500,
        "uid": 8629,
        "name": "ws_fuweidong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u7ef4\u62a4\u4e00\u4e2atrie\u6811\uff0c\u5728\u6bcf\u4e2a\u5355\u8bcd\u7684\u672b\u7aef\u8282\u70b9\u7528count\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u5f53\u524d\u7684\u72b6\u6001\u3002\u6548\u7387O(m\\*maxlength).\n\n```pascal\nVar\n    n,i,m,cnt,tt:longint;\n    t:ansistring;\n    trie:array[0..500010,'a'..'z'] of longint;\n    count:array[0..500010] of longint; //0\u4ee3\u8868\u4e0d\u662f\u7ec8\u70b9\uff0c1\u4ee3\u8868\u662f\u7ec8\u70b9\uff0c2\u4ee3\u8868\u5df2\u7ecf\u88ab\u70b9\u5230\u4e00\u6b21\nProcedure add(t:ansistring);\n    var\n        now,i:longint;\n    begin\n        now:=0;\n        for i:=1 to length(t) do begin\n            if trie[now,t[i]]<>0 then now:=trie[now,t[i]] else begin\n                inc(cnt);\n                trie[now,t[i]]:=cnt;\n                now:=cnt;\n            end;\n        end;\n        inc(count[now]);\n    end;\nFunction search(t:ansistring):longint;\n    var\n        now,i:longint;\n    begin\n        now:=0;\n        for i:=1 to length(t) do begin\n            if trie[now,t[i]]<>0 then now:=trie[now,t[i]] else exit(0);\n        end;\n        if count[now]=1 then begin\n            inc(count[now]);\n            exit(1);\n        end else exit(count[now]);\n    end;\nBegin\n    readln(n);\n    fillchar(count,sizeof(count),0);\n    for i:=1 to n do begin\n        readln(t);\n        add(t);\n    end;\n        readln(m);\n    for i:=1 to m do begin\n        readln(t);\n        tt:=search(t);\n        if tt=1 then writeln('OK');\n        if tt=2 then writeln('REPEAT');\n        if tt=0 then writeln('WRONG');\n    end;\nEnd.\n```",
        "postTime": 1478502969,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u6392\u5e8f\u4e4b\u540e\u4e8c\u5206\u67e5\u627e\u6bd4\u8f83\u5feb\u7684\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio> \nusing namespace std;\n#define GY 10005\nstruct node{\n    char s[61];\n    bool d;\n}a[GY];\nint cmp(const void *a,const void *b){\n    node p=*(node *)a,q=*(node *)b;\n    return strcmp(p.s,q.s);\n}\nint main(){\n    int n,i,j,m;\n    char x[61];\n    cin>>n;\n    for(i=0;i<n;i++)\n        scanf(\"%s\",a[i].s);\n    cin>>m;\n    qsort(a,n,sizeof(a[0]),cmp);\n    for(i=0;i<m;i++){\n        scanf(\"%s\",x);\n        int h=0,r=n;\n        while(h+1<r){\n            int mid=(h+r)/2;\n            if(strcmp(a[mid].s,x)==0){\n                h=mid;\n                break;\n            }\n            if(strcmp(a[mid].s,x)>0) r=mid;\n            else h=mid;\n        }\n        if(strcmp(a[h].s,x)==0)\n        if(a[h].d==false){\n            printf(\"OK\\n\");\n            a[h].d=true;\n        }else printf(\"REPEAT\\n\");\n        else printf(\"WRONG\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1477894469,
        "uid": 21809,
        "name": "\u795e\u59ec2016",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "# \u5173\u4e8eToo many or too few lines\u7684\u89e3\u51b3\u65b9\u6848\n\n\n\t\u5982\u679c\u4f60\u7684\u63d0\u4ea4\u51fa\u73b0WA\u7684\u539f\u56e0\u662fToo many or too few lines\uff0c\u90a3\u4e48\u6ce8\u610f\u4e00\u4e0b\u4f60\u662f\u5426\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\uff1a\n    1.\u8c03\u8bd5\u8f93\u51fa\u672a\u5220\u9664\n    2.\u662f\u4e0d\u662f\u52a0\u4e86\u6587\u4ef6\u5fd8\u8bb0\u5220\n    3.C++\u7684\u670b\u53cb\u4e0d\u8981\u7528getline\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u76f4\u63a5\u7528cin\n\n\u8bc4\u6d4b\u73af\u5883\u6bd4\u8f83\u7384\u5b66\uff0c\u6211\u5f00\u59cb\u5c31\u662f\u76f4\u63a5\u7528getline\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u672c\u5730\u548c\u6d1b\u8c37IDE\u4e0a\u8dd1\u7684\u7ed3\u679c\u90fd\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u4e00\u63d0\u4ea4\u5230OJ\u4e0a\u5c31\u5341\u4e2a\u70b9\u5168WA\uff0c\u539f\u56e0\u662fToo many or too few lines\u3002\u540e\u6765\u6211\u628agetline\u6362\u6210\u4e86cin\uff0c\u5c31\u76f4\u63a5AC\u4e86\u3002\n\n\n\n------------\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u5982\u679c\u4f60\u51fa\u73b0\u4e86Too many or too few lines\u7684\u60c5\u51b5\u53ef\u4ee5\u770b\u770b\u4f60\u662f\u4e0d\u662f\u7528\u4e86getline\u8fdb\u884c\u8bfb\u5165\u3002\n\n------------\n\n\n\n\u8fd9\u91cc\u662fWA\u7684\u4ee3\u7801\uff08\u90e8\u5206\uff09\n```cpp\nint main()\n{\n    int n=0,m=0;\n    trie t;\n    string str;\n    cin>>n;getchar();\n    for(int i=0;i<n;i++){\n        getline(cin,str);    //\u8fd9\u91cc\u7528\u4e86getline\uff0c\u4e8e\u662f\u5c31\u9ad8\u9ad8\u5174\u5174\u7684WA\u4e86\n        t.insert(str);\n        str.clear();\n    }\n    cin>>m;getchar();\n    for(int i=0;i<m;i++){\n        getline(cin,str);\n        int ans = t.find(str);\n        if(ans == 0)cout<<\"WRONG\";\n        else if(ans == 1)cout<<\"REPEAT\";\n        else if(ans == 2)cout<<\"OK\";\n        str.clear();\n        cout<<endl;\n    }\n\n    return 0;\n}\n```\n\n\u8fd9\u91cc\u662f\u5b8c\u6574AC\u4ee3\u7801\uff0c\u5b57\u5178\u6811\u6211\u662f\u7528\u52a8\u6001\u5185\u5b58\u5b9e\u73b0\u7684\u53ef\u80fd\u5199\u7684\u6bd4\u8f83\u5197\u957f\uff0c\u5c06\u5c31\u7740\u770b\u770b\u5427\n\n```\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<vector>\n#include<iterator>\nusing namespace std;\n\nstruct node\n{\n    char value;   //\u5143\u7d20\u7684\u503c\n    bool word;  //\u662f\u5426\u4e3a\u5355\u8bcd\u8282\u70b9\n    bool ifind;    //\u8282\u70b9\u662f\u5426\u88ab\u4f5c\u4e3a\u5355\u8bcd\u800c\u8bbf\u95ee\n    vector<node*>son;\n\n    node(){\n        value = 0;\n        word = false;\n        ifind = false;\n    }\n\n    ~node(){\n    \tvector<node*>::iterator it;\n    \tfor(it = son.begin();it!=son.end();it++){\n            delete *it;\n    \t}\n    }\n};\n\nclass trie\n{\npublic:\n    node root;\n\npublic:\n    int insert(string &str);\n    int find(string &str);\n};\n\nint trie::insert(string &str)\n{\n    string::iterator it;\n    node *p = &root;\n    for(it=str.begin();it!=str.end();it++){\n        bool k =false;  //\u5b50\u8282\u70b9\u4e2d\u662f\u5426\u542b\u6709\u4e0e\u5f85\u68c0\u6d4b\u5b57\u7b26\u5339\u914d\u7684\n        vector<node*>::iterator vit;\n        for(vit = p->son.begin();vit != p->son.end();vit++){\n            if(*it == (*vit)->value){\n                k = true;\n                p = (*vit);\n                break;\n            }\n        }\n        if(k == false){\n            p->son.push_back(new node);\n            p = *(p->son.end()-1);\n            p->value = *it;\n        }\n    }\n    p->word = true;\n    return 0;\n}\n\nint trie::find(string &str)\n{\n    string::iterator it;\n    node *p =&root;\n    for(it=str.begin();it!=str.end();it++){\n        bool k = false; // \u662f\u5426\u627e\u5230\u5339\u914d\u7684\u5b57\u7b26\n        vector<node*>::iterator vit;\n        for(vit = p->son.begin();vit != p->son.end();vit++){\n            if(*it == (*vit)->value){\n                 k =true;\n                 p = (*vit);\n                 break;\n            }\n        }\n        if(k == false)return 0;\n    }\n    if(p->word == false)return 0;\n    else if(p->ifind == true)return 1;\n    else {\n        p->ifind = true;\n        return 2;\n    }\n}\n\n\nint main()\n{\n    int n=0,m=0;\n    trie t;\n    string str;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>str;\n        t.insert(str);\n        str.clear();\n    }\n    cin>>m;\n    for(int i=0;i<m;i++){\n        cin>>str;\n        int ans = t.find(str);\n        if(ans == 0)cout<<\"WRONG\";\n        else if(ans == 1)cout<<\"REPEAT\";\n        else if(ans == 2)cout<<\"OK\";\n        str.clear();\n        cout<<endl;\n    }\n\n    return 0;\n}\n```\n",
        "postTime": 1533125849,
        "uid": 14084,
        "name": "\u5b87\u9053\u4eba",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u5c31\u6ca1\u6709\u6734\u7d20\u70b9\u7684trie\u5462\uff1f\u6574\u9762\u6574\u9762\u9738\u5c4f\u7684\u6307\u9488trie\u53ef\u662f\u4f1a\u8ba9\u5165\u95e8\u7684\u540c\u5b66\u5f88\u614c\u5f20\u7684\u554a\uff01\u4e8e\u662f\u53d1\u4e00\u4e2a0\u6307\u9488\u7684trie\u6a21\u677f\n\n\u9996\u5148\u5f53\u7136\u8fd8\u662f\u8981\u5148\u9644\u4e2atrie\u6811\u8be6\u89e3\uff1a\n\n[trie\u6811\u5165\u95e8\uff0c\u6709\u56fe\u6709\u6587](http://www.cnblogs.com/cherish_yimi/archive/2009/10/12/1581666.html)\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int M=5e5+100;\nstring s;\nint n,m,cnt;\nint t[M][26];\nint flag[M];\n//flag[i]\u8bb0\u5f55i\u53f7\u8282\u70b9\u53ef\u80fd\u7684\u4e09\u79cd\u72b6\u6001\uff1a\n// 0---\u4e0d\u5b58\u5728\u8be5\u4eba\n// 1---\u5b58\u5728\u8be5\u4eba\u4e14\u6ca1\u88ab\u70b9\u8fc7\u540d\n// 2---\u5b58\u5728\u8be5\u4eba\u4f46\u5df2\u88ab\u70b9\u8fc7\u540d\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n;\n\twhile(n--){\n\t\tcin>>s;\n\t\tint now=0,len=s.length();\n        //trie\u6811\u6784\u9020\n\t\tfor(int i=0;i<len;++i){\n\t\t\tint tmp=s[i]-'a';\n\t\t\tif(!t[now][tmp])\n\t\t\t\tt[now][tmp]=++cnt;\n\t\t\tnow=t[now][tmp];\n\t\t}\n\t\tflag[now]=1;\n\t}\n\tcin>>m;\n\twhile(m--){\n\t\tcin>>s;\n\t\tint now=0,len=s.length();\n\t\tbool rig=true;\n        //trie\u6811\u91cc\u627e\u4eba\uff0crig\u8868\u793atrie\u6811\u4e2d\u6709\u6ca1\u6709\u8be5\u5b57\u7b26\u4e32\u5f53\u524d\u7f00\n\t\tfor(int i=0;i<len;++i){\n\t\t\tint tmp=s[i]-'a';\n\t\t\tif(!t[now][tmp]){\n\t\t\t\trig=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnow=t[now][tmp];\n\t\t}\n\t\tif(rig && flag[now]){\n\t\t\tif(flag[now]==1){\n\t\t\t\t++flag[now]; //flag++\u8868\u793a\u5df2\u7ecf\u70b9\u8fc7\u540d\u4e86\n\t\t\t\tprintf(\"OK\\n\");\n\t\t\t}\n\t\t\telse{ //\u4e0d\u7136\u80af\u5b9a\u91cd\u590d\n\t\t\t\tprintf(\"REPEAT\\n\");\n\t\t\t}\n\t\t}\n\t\telse{ //\u67e5\u65e0\u6b64\u4eba\u8f93\u51fawrong\n\t\t\tprintf(\"WRONG\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n\n\u7136\u540e\u8fd9\u5c31\u5dee\u4e0d\u591a\u662f\u4e00\u9053trie\u6811\u7684\u6a21\u677f\u7a0b\u5e8f\u4e86\u5427\u3002",
        "postTime": 1525266391,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "# \u6765\u81ea**C++**\u7684\u5632\u8bbding\n\n### \u6211\u7528\u7684\u662f\u53e6\u4e00\u4e2aSTL~~~set\n\n\u770b\u5230\u5f88\u591a\u4eba\u7528map\uff0ctrie\u6811\uff0c\u8fd8\u6709\u9b3c\u755c\u7684\u4e8c\u5206\u5feb\u6392\n\n\u5f88\u660e\u663e\u662f _\uff08\u6211\uff09_ \u5783 _\uff08\u4e0d\uff09_ \u573e _\uff08\u4f1a\uff09_ \n\n\u7528\u4e24\u4e2aset\uff0c\u4e00\u4e2a\u5b58\u540d\u5355\uff0c\u4e00\u4e2a\u5b58\u70b9\u8fc7\u7684\u4eba\u3002\u7b2c\u4e8c\u6b21\u8bfb\u8fdb\u6765\u7684\u5b57\u7b26\u4e32find\u5206\u522b\u5728\u4e24\u4e2aset\u55d6\u4e00\u4e0b\u5c31\u8fc7\u4e86\u5462\n\n\u56e0\u4e3afind\u662f\u4ece\u5934\u5230\u5c3e\u4e00\u4e2a\u4e2a\u5224\u65ad\uff0c\u6240\u4ee5\u5982\u679c\u6ca1\u6709\u5c31\u662f\u8fd4\u56de\u6700\u540e\u7684\u8fed\u4ee3\u5668end\uff0c\u624b\u52a8\u5224\u4e00\u4e0b\u8fd4\u56de\u503c\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u4e86\n\n\u65f6\u95f4\u5f53\u7136\u662fO\uff08n+m\uff09~~[\u4e3a\u4e86\u663e\u6446\uff0cfind\u65f6\u95f4\u5c31\u4e0d\u7b97\u4e86QAQ]~~\n\nDo you want to know more\uff1f\uff08\u6211\u82f1\u8bed\u5e76\u4e0d\u597d\uff09\u770b\u4ee3\u7801\u5427\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n\n#include<cstdio>\n\n#include<set>\n\nstd::set< std::string>a,b;//\u597d\u50cf\u662f\u7ea2\u9ed1\u6811\uff0c\u53cd\u6b63\u5947\u5feb\u65e0\u6bd4\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\uff0c\u4ea6\u80fd\u8bb0\u5f55\u5b58\u5165\u6b21\u6570->\u8fd9\u513f\u6bd4\u8f83\u597d[set\u8be6\u89e3](https://www.cnblogs.com/caiyishuai/p/8646345.html)\n\nstd::string str;\n\nint n,m;\n\nint main()\n\n{\n \t\n       std::scanf(\"%d\",&n);\n    \n \t   for(register int i=1;i<=n;++i)\n    \n \t   {\n    \n \t\tstd::cin>>str;\n        \n \t\ta.insert(str); //\u540d\u5355\u7684set\n        \n       }\n       std::scanf(\"%d\",&m);\n    \n       for(register int i=1;i<=m;++i)\n   \n       {\n      \n             std::cin>>str;\n      \n             if(a.find(str)!=a.end()&&b.find(str)==b.end())//\u4e0a\u9762\u8bf4\u7684\u67e5+\u5224\n      \n             {\n       \t \n                 std::printf(\"OK\\n\");\n    \t   \n                 b.insert(str); //\u70b9\u8fc7set\n\t\t\n             }\n      \n\t         else   if(a.find(str)!=a.end()&&b.find(str)!=b.end()) std::printf(\"REPEAT\\n\");\n\t         if(a.find(str)==a.end()) std::printf(\"WRONG\\n\");\n\t    }\n}\n\n```\n",
        "postTime": 1576670710,
        "uid": 130146,
        "name": "\u8d56\u80e4\u65d70709",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053trie\u7684\u6a21\u677f\u9898\n\u4f46\u662f\u4e3a\u4f55\u8981\u968f\u6ce2\u9010\u6d41\n\u5475\u5475\u5475\u5475\n\u8fd9\u662fSET\u7684\u505a\u6cd5\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<set>\n\nusing namespace std;\n\nset<string> s,ss;\nint n,m;\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tstring sss;\n\t\tcin>>sss;\n\t\ts.insert(sss);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){\n\t\tstring sss;\n\t\tcin>>sss;\n\t\tif(s.count(sss)){\n\t\t\tif(ss.count(sss)){\n\t\t\t\tputs(\"REPEAT\");\n\t\t\t}else{\n\t\t\t\tss.insert(sss);\n\t\t\t\tputs(\"OK\");\n\t\t\t}\n\t\t}else{\n\t\t\tputs(\"WRONG\");\n\t\t}\n\t}\n}\n```",
        "postTime": 1524798006,
        "uid": 48146,
        "name": "ezoiHY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2580 \u3010\u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86\u3011"
    }
]