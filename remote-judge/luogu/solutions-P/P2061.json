[
    {
        "content": "\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u7ef4\u62a4\u4ecel\u5230r\u7684\u9ad8\u5ea6\n\n\u76f8\u6bd4\u5750\u6807\u7684le9\uff0cn\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u7528\u6570\u7ec4p\u79bb\u6563\u5316\uff0c\u4fee\u6539\u7684\u65f6\u5019\u4e8c\u5206\u4fee\u6539\u7684\u533a\u95f4\u5373\u53ef\n\n\u5c06\u4fee\u6539\u7684\u77e9\u5f62\u6309\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4fdd\u8bc1\u540e\u4fee\u6539\u7684\u9ad8\u5ea6\u4e00\u5b9a\u8986\u76d6\u4e4b\u524d\u7684\n\n- \u6ce8\u610f\u53f3\u533a\u95f4\u548c\u5de6\u533a\u95f4\u90fd\u5305\u62ecmid\n\n- \u4ee5\u53ca\u6811\u7684\u7a7a\u95f4\u8981\u5f00\u6ee12\\*4\\*40000\uff0c\u90e8\u5206\u53d8\u91cf\u8bb0\u5f97\u7528long long\u3010\u56e0\u4e3a\u8fd9\u4e00\u70b9\u8d21\u732e\u4e864\u4e2a\u63d0\u4ea4\u6b21\u6570\\_(\u2510\u300c\u03b5:)\\_\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\n\n\n    \n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n;\nlong long ans;\nint t;\nstruct node{\n    int left,right;\n    int c;\n}tree[4*40005*2];\nstruct edge{\n    int left,right,h;\n}a[40005];\nint p[2*40005];\nbool cmp(edge e1,edge e2)\n{\n    return e1.h<e2.h;\n}\nint erfen(int l,int r,int x)//\u4e8c\u5206\u67e5\u627e\u5f53\u524d\u6240\u8981\u4fee\u6539\u7684\u79bb\u6563\u5316\u533a\u95f4\uff0c\u5373\u5bf9\u5e94\u7684\u77e9\u5f62\u9876\u70b9\u7684\u533a\u95f4\uff0c\u3010\u6bd4\u5982\u6837\u4f8b\u91cc\uff0c\u5f53,\u5904\u7406\u7b2c\u4e00\u4e2a\u77e9\u5f62\u65f6\uff0c\u4fee\u6539\u7684\u533a\u95f4\u4e3a\uff081\uff0c2\uff09\uff0c\u5373\u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684\u4e24\u4e2a\u9876\u70b9\u5728p\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u4e3a1\u30012\uff1b\n{\n    while(l<=r)\n    {\n        int mid=(l+r)/2;\n        if(p[mid]==x) return mid;\n        else if(p[mid]>x) r=mid-1;\n        else l=mid+1;\n    }\n    return 0;\n}\nvoid change(int now,int l,int r,int x)//\u88f8\u7684\u533a\u95f4\u4fee\u6539\n{\n    if(tree[now].right<l||tree[now].left>r) return;\n    if(tree[now].left>=l&&tree[now].right<=r)\n    {\n        tree[now].c=x;\n        return;\n    }    \n    int mid=(tree[now].left+tree[now].right)/2;\n    if(tree[now].c) {\n        tree[now*2].c=tree[now].c;\n        tree[now*2+1].c=tree[now].c;\n        tree[now].c=0;\n    }\n    if(mid>=r)     change(now*2,l,r,x);\n    else if(mid<=l) change(now*2+1,l,r,x);\n    else {\n        change(now*2,l,r,x); change(now*2+1,l,r,x);\n    }\n}\nvoid built(int now,int l,int r)\n{\n    tree[now].left=l;\n    tree[now].right=r;\n    tree[now].c=0;\n    if(l==r-1) return;\n    built(now*2,l,(l+r)/2);\n    built(now*2+1,(l+r)/2,r);//*\u53f3\u754c\u8981\u5305\u62ecmid\uff0c\u56e0\u4e3a\u4e00\u4e2a\u77e9\u5f62\u6240\u5360\u7684\u4f4d\u7f6e\u80af\u5b9a\u5927\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4e0d\u5305\u62ecmid\uff0c\u4f1a\u6f0f\u6389\u4e00\u4e9b\u77e9\u5f62\uff1b \n}\nvoid quest(int now)\n{\n    if(tree[now].c) \n    {\n        ans+=(p[tree[now].right]-p[tree[now].left])*(long long)tree[now].c;\n        return;\n    }\n    if(tree[now].right==tree[now].left+1) return;\n    quest(now*2);\n    quest(now*2+1);\n}\nint main()\n{ \n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) \n    {\n    scanf(\"%d%d%d\",&a[i].left,&a[i].right,&a[i].h);\n    p[++t]=a[i].left;\n    p[++t]=a[i].right;    \n```\n}//\u79bb\u6563\u5316\u9876\u70b9\n\n```cpp\n    sort(p+1,p+1+2*n);\n    sort(a+1,a+n+1,cmp);\n    built(1,1,n*2);\n    for(int i=1;i<=n;i++)\n    {\n        int l=erfen(1,2*n,a[i].left);\n        int r=erfen(1,2*n,a[i].right);\n        change(1,l,r,a[i].h);\n    }\n    quest(1);\n    printf(\"%lld\",ans);\n}\n\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u6709\u70b9\u4e11\u4e11\u7684(\uff61\u30fb`\u03c9\u00b4\uff65)\uff0c\u53ef\u80fd\u8868\u8fbe\u6709\u70b9\u4e0d\u597d\uff0c\u770b\u4e0d\u592a\u660e\u767d\u7684\u540c\u5b66\u53ef\u4ee5\u95ee\u6211\n```",
        "postTime": 1478507150,
        "uid": 26547,
        "name": "Simon_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "**\u9898\u89e3\u91cc\u5c45\u7136\u90fd\u662f\u79bb\u6563\u5316\uff0c\u76f8\u6bd4\u8f83\u800c\u8a00\u6211\u89c9\u5f97\u52a8\u6001\u5f00\u70b9\u66f4\u52a0\u597d\u7406\u89e3\u3002**\n\n\u6211\u4eec\u5148\u628a\u6bcf\u6b21\u4fee\u6539\u6309\u7167\u9ad8\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e4b\u540e\u7684\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u88ab\u5f53\u524d\u4e3a\u6b62\u5176\u4ed6\u7684\u64cd\u4f5c\u8986\u76d6\u3002\n\n\u968f\u7740\u6bcf\u6b21\u4fee\u6539\u540e\u7684$pushdown$\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u4f1a\u88ab\u6807\u8bb0\uff0c\u8fd9\u4ee3\u8868\u7740\u6211\u4eec\u5df2\u7ecf\u628a\u9ad8\u697c\u5206\u6210\u4e86\u82e5\u5e72\u76f8\u7b49\u9ad8\u5ea6\u7684\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u7740\u4e00\u6bb5\u3002\n\n\u90a3\u4e48\u7edf\u8ba1\u7b54\u6848\u5c31\u53d8\u5f97\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u627e\u5230\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u7b54\u6848+=\u9ad8\u5ea6*$(r-l+1)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long \nusing namespace std;\ninline int read(){\n\tint res=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){res=(res<<3)+(res<<1)+ch-'0';ch=getchar();}\n\treturn res*f;\n}\nconst int N=40005;\nconst int inf=1e9;\nint n,tr[4000005],lc[4000005],rc[4000005],cnt,root,ans=0;\nstruct node{\n\tint l,r,h;\n}g[N];\ninline bool cmp(node x,node y){\n\treturn x.h<y.h;\n}\ninline void pushdown(int k,int l,int r){\n\tif(!tr[k]) return ;//\u5982\u679c\u6ca1\u6709\u6807\u8bb0\uff0c\u5c31\u9000\u51fa\n\tif(l==r) return ;//\u5982\u679cl==r\uff0c\u8bf4\u660e\u8fd9\u4e2a\u8282\u70b9\u4e0d\u53ef\u80fd\u4f1a\u6709\u53f6\u8282\u70b9\u4e86\n\tif(!lc[k]) lc[k]=++cnt;//\u5982\u679c\u5de6\u8282\u70b9\u6ca1\u88ab\u5f00\u521b\uff0c\u90a3\u5c31\u5f00\u521b\u5b83\uff0c\u65b9\u4fbf\u6807\u8bb0\u4e0b\u4f20\n\tif(!rc[k]) rc[k]=++cnt;//\u53f3\u8282\u70b9\u540c\u7406\n\ttr[lc[k]]=tr[k];\n\ttr[rc[k]]=tr[k];\n\ttr[k]=0;//\u6807\u8bb0\u6e05\u7a7a\n}\nvoid change(int &k,int l,int r,int x,int y,int val){\n\tif(!k) k=++cnt;//\u8fd9\u4e2a\u8282\u70b9\u8fd8\u6ca1\u88ab\u5f00\u521b\u8fc7\uff0c\u90a3\u5c31\u5f00\u521b\u5b83\n\tif(l==x&&r==y){\n\t\ttr[k]=val;return ;//\u627e\u5230\u533a\u95f4\uff0c\u6807\u8bb0\n\t}\n\tpushdown(k,l,r);//\u5411\u4e0b\u4f20\u9012\n\tint mid=(l+r)>>1;\n\tif(y<=mid) change(lc[k],l,mid,x,y,val);else\n\tif(x>mid) change(rc[k],mid+1,r,x,y,val);else{\n\t\tchange(lc[k],l,mid,x,mid,val);change(rc[k],mid+1,r,mid+1,y,val);\t\n\t}\t\n}\nvoid query(int k,int l,int r){\n\tif(tr[k]){//\u5982\u679c\u8fd9\u4e2a\u70b9\u6709\u6807\u8bb0\uff0c\u8bf4\u660e\u5b83\u662f\u53f6\u8282\u70b9\uff0c\u7edf\u8ba1\u7b54\u6848\u540e\u9000\u51fa\n\t\tans+=(r-l+1)*tr[k];\n\t\treturn ;\n\t}\t\n\tint mid=(l+r)>>1;\n\tif(lc[k]) query(lc[k],l,mid);//\u5982\u679c\u5b83\u6709\u5de6\u513f\u5b50\uff0c\u90a3\u5c31\u9012\u5f52\u5b83\u7684\u5de6\u513f\u5b50\n\tif(rc[k]) query(rc[k],mid+1,r);//\u53f3\u513f\u5b50\u540c\u7406\n}\nsigned main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tg[i].l=read();g[i].r=read();g[i].h=read();\n\t}\n\tsort(g+1,g+n+1,cmp);//\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n\tfor(int i=1;i<=n;i++){\n\t\tchange(root,1,inf,g[i].l,g[i].r-1,g[i].h);//\u4fee\u6539\uff0c\u6ce8\u610f\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\n\t}\n\tquery(root,1,inf);//\u7edf\u8ba1\u7b54\u6848\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1561515096,
        "uid": 20504,
        "name": "Rachel_in",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u54b3\u54b3\uff0c\u79bb\u6563\u5316\u7ebf\u6bb5\u6811\u2026\u2026\u2026\u2026\u5c31A\u4e86\u3002\u3010THE END\u3011\n\n\n\u597d\u5427\u8fd8\u662f\u8bb2\u4e00\u4e0b\n\n\u7136\u9e45\u6211\u5199\u7684\u4e0d\u662f\u626b\u63cf\u7ebf\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u5199\u8fc7\u626b\u63cf\u7ebf\u9898\u89e3\u4e86\uff08\u5927\u96fe\uff09\u3002\n\n\n\u9996\u5148\uff0c\u6613\u8bc1\u660e\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e\u7ed3\u679c\u65e0\u5173\uff0c\u90a3\u4e48\u5c31\u6392\u4e2a\u5e8f\uff0c\u628a\u6bd4\u8f83\u7684\u64cd\u4f5c\u5ffd\u7565\uff0c\u76f4\u63a5\u5199\u8986\u76d6\u64cd\u4f5c\uff0c\u8fa3\u4e48pushdown()\u5c31\u6709\u7740\u843d\u4e86\u3002\u7ebf\u6bb5\u6811\u7ef4\u62a4\u603b\u548c\u3002\n\n\n\u7531\u4e8e[ai,bi)\u6240\u4ee5\u6211\u987a\u624bbi-=1\uff0c\u7136\u540e\u653e\u4e00\u8d77\u6392\u5e8f+\u53bb\u91cd\uff0c\u7136\u540e\u5c31\u662f\u5947\u8469\u7684\u7cbe\u9ad3\n\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51fa\u73b0\u8fc7\u7684\u70b9\uff0c\u5355\u72ec\u5360\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u53f6\u8282\u70b9\uff0c\u4e24\u4e2a\u51fa\u73b0\u8fc7\u7684\u70b9\u4e4b\u95f4\u7684\u533a\u57df\u5171\u540c\u5360\u4e00\u4e2a\u7ebf\u6bb5\u6811\u53f6\u8282\u70b9\uff0c\u7136\u540e\u8bb0\u5f55\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u70b9\u7684\u8303\u56f4\uff0cmid=\u5de6\u8282\u70b9\u7684\u53f3\u8fb9\u754c\uff0c\u8fdb\u884c\u641e\u4e8b\uff08\u5927\u96fe\uff09\u3002\n\n\n\u5177\u4f53\u5b9e\u73b0\uff0c\u5c31\u662f\u53bb\u91cd\u4e4b\u540e\uff0c\u518d\u5199\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u4e8e\u539f\u6765\u6bcf\u4e00\u4f4d\uff0c\u52a0\u5165\u53e6\u4e00\u6570\u7ec4\uff0c\u5982\u679c\u4e0d\u7b49\u4e8e\u4e0b\u4e00\u4e2a\u6570-1\uff0c\u518d\u52a0\u5165\u5b83+1\uff0c\u751f\u6210\u6570\u7ec4\u8981\u5728\u672b\u5c3e\u8865\u4e00\u4e2a\u6700\u540e\u4e00\u4f4d+1\u7684\u6570\n\n\u751f\u6210\u6570\u7ec4\u7684[\u7b2ci\u4f4d,\u7b2ci+1\u4f4d)\u5c31\u662f\u7b2ci\u4e2a\u533a\u95f4\uff0c\u4e8e\u662fbuild(\u751f\u6210\u7684\u6570\u7ec4)\u3002\n\n#### \u6ce8\u610flong long\n\n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <stdio.h>\n    #include <math.h>\n    using namespace std;\n    typedef long long LL;\n    #define dd c=getchar()\n    inline int read(){int a=0,b=1;char dd;while(!isdigit(c)&&c!='-')dd;\n        if(c=='-'){b=-b;dd;}while(isdigit(c)){a=a*10+c-'0';dd;}return a*b;}\n    struct edge{int a,b,c;edge(){}edge(int x,int y,int z){a=x;b=y;c=z;}}a[40003];\n    bool operator<(edge a,edge b){return a.c<b.c;}\n    int tt=0,b[80003],c[160003],n,x,y,ll[640003],rr[640003];\n    LL tree[640003],lazy[640003];\n    #define ls nod<<1\n    #define rs nod<<1|1\n    void pushup(int nod){tree[nod]=tree[ls]+tree[rs];}\n    void pushdown(int nod){\n        if(lazy[nod]){\n            lazy[ls]=lazy[rs]=lazy[nod];\n            tree[ls]=lazy[nod]*(rr[ls]-ll[ls]+1);\n            tree[rs]=lazy[nod]*(rr[rs]-ll[rs]+1);\n            lazy[nod]=0;\n        }\n    }\n    void build(int nod,int l,int r){\n        if(l==r){\n            ll[nod]=c[l];\n            rr[nod]=c[l+1]-1;\n            tree[nod]=lazy[nod]=0;\n            return;\n        }\n        int mid=l+r>>1;\n        build(ls,l,mid);\n        build(rs,mid+1,r);\n        ll[nod]=ll[ls];\n        rr[nod]=rr[rs];\n        pushup(nod);\n        lazy[nod]=0;\n    }\n    void ins(int nod,int l,int r,int x,int y,int v){\n        if(l==x&&r==y){\n            lazy[nod]=v;\n            tree[nod]=(r-l+1)*(LL)v;\n            return;\n        }\n        pushdown(nod);\n        int mid=rr[ls];\n        if(x<=mid)ins(ls,l,mid,x,min(mid,y),v);\n        if(y>mid)ins(rs,mid+1,r,max(x,mid+1),y,v);\n        pushup(nod);\n    }\n    int main(){\n        n=read();\n        for(int i=1;i<=n;i++){\n            a[i].a=read();a[i].b=read()-1;a[i].c=read();\n            b[++tt]=a[i].a;b[++tt]=a[i].b;\n        }\n        sort(a+1,a+n+1);\n        sort(b+1,b+tt+1);\n        x=tt;tt=1;\n        for(int i=2;i<=x;i++)if(b[i]>b[i-1])b[++tt]=b[i];\n        x=tt;tt=0;\n        for(int i=1;i<=x;i++){\n            c[++tt]=b[i];\n            if(i<x&&b[i+1]-b[i]>1)c[++tt]=b[i]+1;\n        }\n        c[tt+1]=c[tt]+1;\n        build(1,1,tt);\n        for(int i=1;i<=n;i++){\n            ins(1,ll[1],rr[1],a[i].a,a[i].b,a[i].c);\n        }\n        printf(\"%lld\\n\",tree[1]);\n        return 0;\n}\n```",
        "postTime": 1515378846,
        "uid": 13925,
        "name": "yyhhenry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](https://blog.csdn.net/A_Comme_Amour/article/details/79671067)\n\n\u9898\u76ee\n-\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2061)\n\n\u7ea6\u7ff0\u5e26\u7740\u5976\u725b\u53bb\u90fd\u5e02\u89c2\u5149\u3002\u5728\u843d\u65e5\u7684\u4f59\u6656\u91cc\uff0c\u4ed6\u4eec\u770b\u5230\u4e86\u4e00\u5e62\u63a5\u4e00\u5e62\u7684\u6469\u5929\u9ad8\u697c\u7684\u8f6e\u5ed3\u5728\u5730\u5e73\u7ebf \u4e0a\u5f62\u6210\u7f8e\u4e3d\u7684\u56fe\u6848\u3002\u4ee5\u5730\u5e73\u7ebf\u4e3a X \u8f74\uff0c\u6bcf\u5e62\u9ad8\u697c\u7684\u8f6e\u5ed3\u662f\u4e00\u4e2a\u4f4d\u4e8e\u5730\u5e73\u7ebf\u4e0a\u7684\u77e9\u5f62\uff0c\u5f7c\u6b64\u95f4\u53ef\u80fd\u6709 \u91cd\u53e0\u7684\u90e8\u5206\u3002\u5976\u725b\u4e00\u5171\u770b\u5230\u4e86 N \u5e62\u9ad8\u697c\uff0c\u7b2c i \u5e62\u697c\u7684\u9ad8\u5ea6\u662f Hi\uff0c\u4e24\u6761\u8fb9\u754c\u8f6e\u5ed3\u5728\u5730\u5e73\u7ebf\u4e0a\u7684\u5750\u6807\u662f Ai \u5230 Bi\u3002\u8bf7\u5e2e\u52a9\u5976\u725b\u4eec\u8ba1\u7b97\u4e00\u4e0b\uff0c\u6240\u6709\u6469\u5929\u9ad8\u697c\u7684\u8f6e\u5ed3\u8986\u76d6\u7684\u603b\u9762\u79ef\u662f\u591a\u5c11\u3002\n\n\u53e6\u4e00\u79cd\u7406\u89e3\u65b9\u5f0f\uff1a\n\n\u6709\u4e00\u4e2a\u6570\u5217\uff0c\u521d\u59cb\u503c\u5747\u4e3a0\uff0c\u4ed6\u8fdb\u884cN\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u6570\u5217 [ai,bi) \u8fd9\u4e2a\u533a\u95f4\u4e2d\u6240\u6709\u6bd4Hi\u5c0f\u7684\u6570\u6539\u4e3aHi\uff0c\u4ed6\u60f3\u77e5\u9053N\u6b21\u64cd\u4f5c\u540e\u6570\u5217\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\u3002\n\n\u9898\u89e3\n-\n\n\u672c\u9898\u89e3\u63d0\u4f9b\u4e24\u79cd\u89e3\u6cd5\n\u7b2c\u4e00\u79cd\u5c31\u662f\u7b80\u5316\u7248\u77e9\u5f62\u9762\u79ef\u6c42\u4ea4\uff0c\u626b\u63cf\u7ebf\u7684\u7ecf\u5178\u9898\uff1b\u5177\u4f53\u8bb2\u89e3\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://blog.csdn.net/a_comme_amour/article/details/79402361)\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#define ll long long\nusing namespace std;\nconst int maxn=1000001;\n\nll n;\nll x1,x2,y1,y2;\nstruct Tree{\n    ll l,r,c;\n    ll cnt,fl,fr;//cnt \u5dee\u503c \n}tree[maxn<<2];\nstruct Line{\n    ll x,y1,y2;\n    ll f;//+-1:\u77e9\u5f62\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u7684\u8fb9 \n}line[maxn<<1];\nll y[maxn];\nbool cmp(Line a,Line b) {return a.x<b.x;}\n\nvoid build_tree(ll l,ll r,ll rt)\n{\n    tree[rt].l=l; tree[rt].r=r;\n    tree[rt].c=tree[rt].cnt=0;\n    tree[rt].fl=y[l];\n    tree[rt].fr=y[r];\n    if (l+1==r) return;//\u53f6\u5b50\u7ed3\u70b9 \n    ll mid=(l+r)>>1;\n    build_tree(l,mid,rt<<1);\n    build_tree(mid,r,rt<<1|1);\n}\n\nvoid calc(ll rt)\n{\n    if (tree[rt].c>0)\n    {\n        tree[rt].cnt=tree[rt].fr-tree[rt].fl;\n        return;\n    }\n    if (tree[rt].l+1==tree[rt].r) tree[rt].cnt=0;//\u53f6\u5b50\u8282\u70b9 \n    else tree[rt].cnt=tree[rt<<1].cnt+tree[rt<<1|1].cnt;\n}\n\nvoid update(ll rt,Line e)\n{\n\tif (e.y1==tree[rt].fl && e.y2==tree[rt].fr)\n\t{\n\t\ttree[rt].c+=e.f;\n\t\tcalc(rt); \n\t\treturn;\n\t}\n\tif (e.y2<=tree[rt<<1].fr) update(rt<<1,e);\n\telse if (e.y1>=tree[rt<<1|1].fl) update(rt<<1|1,e);\n\telse\n\t{\n\t\tLine tmp=e;\n\t\ttmp.y2=tree[rt<<1].fr;\n\t\tupdate(rt<<1,tmp);\n        tmp=e;\n        tmp.y1=tree[rt<<1|1].fl;\n        update(rt<<1|1,tmp);\n    }\n    calc(rt);\n}\n\nint main()\n{\n//\tfreopen(\"[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebf.in\",\"r\",stdin);\n\t\n    ll ans=0;\n    scanf(\"%lld\",&n);\n    ll tot=0;\n    for (ll i=1; i<=n; i++)\n    {\n    \ty1=0;\n        scanf(\"%lld%lld%lld\",&x1,&x2,&y2);\n        line[++tot].x=x1;\n        line[tot].y1=y1;\n        line[tot].y2=y2;\n        line[tot].f=1;\n        y[tot]=0;\n        line[++tot].x=x2;\n        line[tot].y1=y1;\n        line[tot].y2=y2;\n        line[tot].f=-1;\n        y[tot]=y2;\n\t}\n    sort(y+1,y+1+tot);\n    sort(line+1,line+1+tot,cmp);\n    build_tree(1,tot,1);\n// \t\tprintf(\"rt l r c h cnt\\n\");\n//      for (ll rt=1; rt<=(n<<1); rt++) printf(\"%lld: %lld %lld %lld %.0lf %.0lf\\n\",rt,tree[rt].l,tree[rt].r,tree[rt].c,tree[rt].fr,tree[rt].cnt);\n    update(1,line[1]);\n    ll res=0;\n    for (ll i=2; i<=tot; i++)\n    {\n        res+=tree[1].cnt*(line[i].x-line[i-1].x);\n        update(1,line[i]);\n    }\n    printf(\"%lld\",res);\n    return 0;\n}\n```\n\n\u7b2c\u4e8c\u79cd\u4e5f\u662f\u626b\u63cf\u7ebf\u7684\u601d\u60f3\uff0c\u5177\u4f53\u7528\u4f18\u5148\u961f\u5217\u5b9e\u73b0\uff0c\u53c2\u8003\u4e86\u697c\u4e0b\u7684\u4ee3\u7801\n\u4ee5\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a\u4f18\u5148\u7ea7\u5efa\u7acb\u4f18\u5148\u961f\u5217\uff1b\u4e0d\u5728\u8303\u56f4\u5185\u7684\u533a\u95f4\u5c31pop\u6389\uff1b\u65b0\u51fa\u73b0\u5efa\u7b51\u7269\u5982\u679c\u7b26\u5408\u8303\u56f4\u5c31\u5165\u961f \uff1b\n\u6700\u540e\u50cf\u626b\u63cf\u7ebf\u4e00\u6837\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e00\u5c0f\u6bb5\u8ba1\u7b97\u9762\u79ef\n\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <queue>\nusing namespace std;\nconst int maxn=100001;\n\nint n,m,p[maxn];\nstruct Node{\n\tint x,y,v;\n\tbool operator < (Node a) const {\n\treturn this -> v < a.v;}\n}a[maxn];\npriority_queue <Node> q;\n\nbool cmp(Node a,Node b) {return a.x<b.x;}\nbool cmp1(int a,int b) {return a<b;}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1; i<=n; i++)\n\t{\n\t\tint x,y,h; scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].v);\n\t\tp[i*2]=a[i].y;\n\t\tp[i*2-1]=a[i].x;\n\t}\n\tsort(a+1,a+1+n,cmp);\n\tsort(p+1,p+1+2*n,cmp1);\n\tint tot=0;//\u5df2\u7ecf\u653e\u7f6e\u7684\u5efa\u7b51\u7269 \n\tlong long ans=0;\n\tfor (int i=1; i<n*2; i++)\n\t{\n\t\twhile (!q.empty() && q.top().y<=p[i]) q.pop();//\u4e0d\u5728\u8303\u56f4\u5185pop \n\t\twhile (p[i]<=a[tot+1].x && a[tot+1].x<p[i+1])//\u65b0\u51fa\u73b0\u7684\u5728\u8303\u56f4\u5185\u7684\u5165\u961f \n\t\t\tq.push(a[++tot]);\n\t\tif (!q.empty())\n\t\t\tans+=(long long)(p[i+1]-p[i])*q.top().v;\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\u603b\u7ed3\n-\n\n\u6709\u8bb8\u591a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002long long\u4e4b\u7c7b\u7684\uff1b\n",
        "postTime": 1521800313,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "### \u76f8\u4fe1\u6211 \u770b\u76f4\u63a5\u7684\u9898\u76ee\u8981\u6c42\u5c31\u8f93\u4e86  \n\u770b\u4e00\u4e0b\u8fd9\u9898 \u597d\u773c\u719f  ~~\u73c2\u6735\u8389\u6811~~  \n\u53cc\u500d\u7ecf\u9a8c [\u5929\u9645\u7ebf](https://www.luogu.com.cn/problem/P1904)  \n\u8fd9\u9898\u4e0d\u5c31\u662f\u628a\u53d8\u5316\u7684\u6298\u70b9\u6362\u6210\u9762\u79ef\u4e86\u5417   \n\u6240\u4ee5\u8bf4\u5148\u6309\u7167\u9ad8\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u7136\u540e\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u63a8\u5e73 \u6700\u540e\u626b\u4e00\u8fb9 \u8ba1\u7b97\u4e00\u4e0b\u9762\u79ef\u5373\u53ef   \n~~\u600e\u4e48\u8ba1\u7b97\u5462~~  \n\u6211\u4eec\u53d1\u73b0\u73c2\u6735\u8389\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4fdd\u5b58\u7684\u4e09\u4e2a\u5143\u7d20 ${l,r,h}$ \u8868\u793a\u4ece $l$ \u5230 $r$ \u7684\u4e00\u6bb5\u9ad8\u5ea6\u90fd\u662f $h$ \u90a3\u4e48\u8fd9\u4e2a\u5355\u72ec\u7684\u4e00\u6bb5\u4e0d\u5c31\u662f\u4e00\u4e2a \u9ad8\u4e3a $h$ \u5bbd\u4e3a $l-r+1$ \u7684 \u6b63\u65b9\u5f62\u5417 \u76f4\u63a5\u5c0f\u5b66\u6570\u5b66\u516c\u5f0f $S=ab$ \u8ba1\u7b97\u5355\u4e2a\u533a\u95f4 \u7136\u540e $ans$ \u7d2f\u52a0\u4e00\u4fbf\u5c31\u5b8c\u4e86  \n\u5b8c\u4e86 $?$  ~~\u5b8c\u4e86~~   \n$$\\text{\u5341\u5e74OI\u4e00\u573a\u7a7a \u4e0d\u5f00long long \u89c1\u7956\u5b97}$$  \n \n\u9ad8\u6e05\u65e0\u7801\u7a0b\u5e8f \n\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<set>\n#include<cstdlib>\n#include<algorithm>\n#define IT set<node>::iterator  //\u5b8f\u5b9a\u4e49 \u61d2\u4eba\u5fc5\u5907 \nusing namespace std;\ntypedef long long ll;\nstruct node//\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9 \n{\n\tll l,r;\n\tmutable ll v;\n\tnode(ll L,ll R=-1,ll V=0):l(L),r(R),v(V){}\n\tbool operator < (const node &t)const{//\u4f7f\u7528set\u91cd\u8f7d\u5c0f\u4e8e\u53f7 \n\t\treturn l<t.l;\n\t} \n};\nset<node> s;//\u73c2\u6735\u8389\u6811 \nll n;\nstruct val//\u8bfb\u5165\u7684\u6570\u636e \u8981\u7ed3\u6784\u4f53\u6392\u5e8f \n{\n\tll l;\n\tll r;\n\tll h;\n}a[40005];\nll ans;//\u6700\u7ec8\u7684\u7b54\u6848 \ninline void read(ll &x)//\u5feb\u8bfb \n{\n\tll f;char c;\n\tfor (f=1,c=getchar();c<'0'||c>'9';c=getchar()) if(c=='-') f=-1;\n\tfor (x=0;c<='9'&&c>='0';c=getchar()) x=x*10+(c&15);x*=f;\n}\ninline bool cmp(val p,val q)//\u6309\u7167 h \u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n{\n\treturn p.h<q.h;\n}\ninline IT split(ll pos)//\u73c2\u6735\u8389\u6811\u7684split \n{\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos) return it;\n\t--it;\n\tll tl=it->l;\n\tll tr=it->r;\n\tll tv=it->v;\n\ts.erase(it);\n\ts.insert(node(tl,pos-1,tv));\n\treturn s.insert(node(pos,tr,tv)).first;\n} \ninline void assign_val(ll l,ll r,ll val)//\u73c2\u6735\u8389\u6811\u7684\u63a8\u5e73 \n{\n\tIT itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,val));\n}\nint main()\n{\n\tread(n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tread(a[i].l);\n\t\tread(a[i].r);\n\t\ta[i].r--;//\u6bd4\u8f83\u5751\u7684 [l,r) \u6240\u4ee5\u8bf4\u8981\u51cf\u4e00\u4e2a \u53d8\u6210 [l,r] \n\t\tread(a[i].h);\n\t}\n\tsort(a+1,a+n+1,cmp);//\u6392\u5e8f \n\ts.insert(node(1,a[n].r,0));//\u6807\u51c6\u5efa\u6811\u64cd\u4f5c \n\ts.insert(node(a[n].r+1,a[n].r+1,0));\n\tfor(int i=1;i<=n;i++)\n\t\tassign_val(a[i].l,a[i].r,a[i].h);//\u4e00\u4e2a\u4e00\u4e2a\u63a8\u5e73 \n\tfor(IT it=s.begin();it!=s.end();++it)//\u52a0\u4e00\u904d\u7b54\u6848 \n\t\tans+=1ll*(it->r-it->l+1)*it->v;\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n\n\n```\n",
        "postTime": 1584371119,
        "uid": 219198,
        "name": "Minecraft\u4e07\u5c81",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]City Horizon S\u3011"
    },
    {
        "content": "\u4e00\u9053\u68c0\u6d4b\u9009\u624b**\u6709\u6ca1\u6709\u5b66\u50bb**\u7684 USACO \u597d\u9898~\n\n~~\u6240\u4ee5\u5f3a\u70c8\u5efa\u8bae\u5c06\u6570\u636e\u8303\u56f4\u6539\u6210 N = 3e5 \uff0c A\u3001B = 1e17 \u5361\u6389\u7ebf\u6bb5\u6811~~\n\n\u63d0\u4f9b\u4e00\u79cd O(NlogN~~\u4e58\u4ee5STL\u5de8\u5927\u5e38\u6570~~) \u7684\u7b80\u5355\u505a\u6cd5\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u9ad8\u5ea6\uff0c\u663e\u7136\u53ea\u9700\u8981\u7ef4\u62a4\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\u5c31\u597d\u4e86\u3002\n\n\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u5c06\u64cd\u4f5c\u62c6\u6210 insert\uff08\u5de6\uff09 \u548c delete\uff08\u53f3\uff09\uff0c\u7136\u540e\u6309\u4e0b\u6807 sort \u4e00\u6ce2\u3002\n\n\u663e\u7136\u4e24\u4e2a\u76f8\u90bb\u88ab\u64cd\u4f5c\u7684\u4e0b\u6807\u4e4b\u95f4\u7684\u6570\u503c\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u5c31\u662f\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u5355\u70b9\u63d2\u5165\uff0c\u5355\u70b9\u5220\u9664\uff0c\u67e5\u8be2\u5168\u5c40\u6700\u503c\u3002\n\n~~\u4ec0\u4e48\uff1f\uff1f\uff1f\u7136\u540e\u4f60\u60f3\u5230\u7528\u5e73\u8861\u6811\uff1f\uff1f\uff1f~~\n\n\u5f53\u7136\u662f\u5199\u4e00\u4e2a\u53ef\u5220\u9664\u7684\u5806\u6765\u7ef4\u62a4\u554a\uff01\u53ea\u8981\u4e24\u4e2a STL \u4f18\u5148\u961f\u5217\uff08priority_queue\uff09\uff0c\u518d\u624b\u5199\u4e00\u884c**\u60f0\u6027\u5220\u9664**\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e86\uff01\n\n~~\u4ee3\u7801\u83ab\u540d\u5176\u5999\u53d1\u4e0d\u51fa\u6765\u3002\u3002\u3002\u5b9e\u5728\u6709\u9700\u8981\u8bf7\u79c1\u4fe1 fzszkl \uff1f~~\n\nupd\uff1a\u673a\u623f\u7f51\u7edc\u4fee\u597d\u4e86\uff08\uff1f\uff09\uff0c\u53cd\u6b63\u4ee3\u7801\u53ef\u4ee5\u53d1\u51fa\u6765\u4e86\uff0c\u8bf7\u7ba1\u7406\u5458\u901a\u8fc7\u4e00\u4e0b~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\ninline int Readin() {\n\tregister int K = 0 , F = 1 ; register char C = getchar() ;\n\twhile( C < '0' or C > '9' ) F = C == '-' ? -1 : 1 , C = getchar() ;\n\twhile( C <= '9' and C >= '0' ) K = ( K << 1 ) + ( K << 3 ) + C - '0' , C = getchar() ;\n\treturn F * K ;\n}\nstruct Queue {\n\tpriority_queue<int> Q , D ;\n\tQueue () {\n\t\twhile( not Q.empty() ) Q.pop() ;\n\t\twhile( not D.empty() ) D.pop() ;\n\t}\n\tinline void Delete( int X ) {\n\t\tD.push( X ) ;\n\t\twhile( D.top() == Q.top() ) D.pop() , Q.pop() ;\n\t}\n\tinline void Push( int X ) {\n\t\tQ.push( X ) ;\n\t}\n\tinline int Top() {\n\t\treturn Q.top() ;\n\t}\n} Q ;\nint N , M ;\nconst int MaxM = 80000 + 5 ;\nstruct Node {\n\tint A , Num ;\n} ;\nNode Nod[MaxM] ;\ninline bool Cmp( Node A , Node B ) {\n\treturn A.A < B.A ;\n}\nlong long Ans ;\nint main() {\n\tM = ( N = Readin() ) << 1 ;\n\tfor(register int i = 1 ; i <= N ; ++i ) {\n\t\tregister int A = Readin() , B = Readin() , H = Readin() ;\n\t\tNod[i].A = A ;\n\t\tNod[i].Num = H ;\n\t\tNod[i+N].A = B ;\n\t\tNod[i+N].Num = -H ;\n\t}\n\tsort( Nod + 1 , Nod + 1 + M , Cmp ) ;\n\tQ.Push( 0 ) ;\n\tfor(register int i = 1 ; i <= M ; ++i ) {\n\t\tAns += (long long)Q.Top() * (long long)( Nod[i].A - Nod[i-1].A ) ;\n\t\tif( Nod[i].Num > 0 ) Q.Push( Nod[i].Num ) ;\n\t\telse Q.Delete( -Nod[i].Num ) ;\n\t}\n\treturn not printf( \"%lld\\n\" , Ans ) ;\n}\n```",
        "postTime": 1543916217,
        "uid": 23323,
        "name": "\u7528\u6237\u5df2\u6ce8\u9500",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "#[http://blog.csdn.net/Fine\\_rose/article/details/78320569](http://blog.csdn.net/Fine\\_rose/article/details/78320569)\n\n\n\u89e3\u9898\u62a5\u544a\n\n\n\u9996\u5148\u6211\u4eec\u601d\u8003\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a\n\n\u5982\u679c\u5728\u4e00\u6bb5\u533a\u95f4\u4e4b\u5185\uff0c\u5efa\u7b51\u7684\u6700\u9ad8\u70b9\u662f\u4fdd\u6301\u4e0d\u53d8\u7684\u90a3\u4e48\u5728\u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u9762\u79ef\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e58\u6cd5\u7b80\u5355\u7684\u7b97\u51fa\u6765\n\n\n\u7531\u4e8e\u697c\u623f\u7684\u4e2a\u6570\u6709\u5f88\u591a\uff0c\u6240\u4ee5\u6574\u4e2a\u533a\u95f4\u88ab\u5206\u4e3a\u4e86\u5f88\u591a\u4e2a\u8fd9\u6837\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5206\u5272\u533a\u57df\u7684\u5173\u952e\u70b9\u6309\u7167\u627e\u51fa\u6765\u5373\u53ef\u3002\u663e\u800c\u6613\u89c1\u7684\u662f\u8fd9\u4e9b\u5173\u952e\u70b9\u4e00\u5b9a\u4f4d\u4e8e\u5efa\u7b51\u5728\u5750\u6807\u8f74\u4e0a\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u3002\n\n\n\u5f97\u5230\u4e86\u5173\u952e\u70b9\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u4e24\u4e2a\u5173\u952e\u70b9\u4e4b\u95f4\u6700\u9ad8\u7684\u5efa\u7b51\u7269\uff0c\u5e76\u6709\u8fd9\u4e2a\u6700\u9ad8\u7684\u5efa\u7b51\u7269\u66f4\u65b0\u7b54\u6848\u5373\u53ef\n\n\n\u6e90\u4ee3\u7801\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nlong long ans;\nint n;\nstruct Node {\n    int begin;\n    int end;\n    int value;\n    bool operator < (Node a) const {\n        return this -> value < a.value;\n    }\n} nodes[40005];\nint pos[80005];\npriority_queue <Node> que;\nbool cmp(Node a, Node b) {\n    return a.begin < b.begin;\n}\nbool _cmp(int a, int b) {\n    return a < b;\n}\nint main() {\n    freopen(\"in.txt\", \"r\", stdin);\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d%d%d\", &nodes[i].begin, &nodes[i].end, &nodes[i].value);\n        pos[i * 2] = nodes[i].end;\n        pos[i * 2 - 1] = nodes[i].begin;\n    }\n    sort(pos + 1, pos + 1 + n * 2, _cmp);//\u6309\u7167\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5e8f\u5173\u952e\u70b9\n    sort(nodes + 1, nodes + 1 + n, cmp);//\u6309\u7167\u5de6\u7aef\u70b9\u7684\u987a\u5e8f\u6392\u5e8f\u5efa\u7b51\u7269\n    int put = 0;//\u5df2\u7ecf\u653e\u7f6e\u7684\u5efa\u7b51\u7269\u7684\u4e2a\u6570\n    for (int i = 1; i < n * 2; i++) {\n        while (que.size() && que.top().end <= pos[i])//\u5224\u65ad\u5f53\u524d\u4f18\u5148\u961f\u5217\u4e2d\u6700\u9ad8\u7684\u5efa\u7b51\u7269\u662f\u5426\u5728\u8303\u56f4\u4e4b\u5185\n            que.pop();//\u82e5\u4e0d\u5728\u5219\u51fa\u961f\n        while (pos[i] <= nodes[put + 1].begin && nodes[put + 1].begin < pos[i + 1])//\u5c06\u65b0\u51fa\u73b0\u5728\u8303\u56f4\u4e4b\u5185\u7684\u5efa\u7b51\u7269\u5165\u961f\n            que.push(nodes[++put]);\n        if (que.size())//\u66f4\u65b0\u7b54\u6848\n            ans += (long long)(pos[i + 1] - pos[i]) * que.top().value;\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n```",
        "postTime": 1508748845,
        "uid": 25845,
        "name": "Snitro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u5f53\u6811\u72b6\u6570\u7ec4\u9047\u4e0a\u4e86\u590d\u6742\u7684\u533a\u95f4\u64cd\u4f5c\u8868\u793a\u65e0\u80fd\u4e3a\u529b\uff0c~~\u5f53\u4f60\u8fd8\u5728\u4e3a\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u592a\u5c0f\u800c\u82e6\u607c~~\uff0c\u4e0d\u8981\u72b9\u8c6b\uff0c\u4ee5\u7ebf\u6bb5\u6811\u4e3a\u6b66\u5668\u6218\u6597\u5427\uff01\uff01  \n\n## \u5bfc\u8bed\n\u76f8\u4fe1OIers\u5bf9[\u7ebf\u6bb5\u6811\uff08Segment Tree\uff09](https://baike.baidu.com/item/%E7%BA%BF%E6%AE%B5%E6%A0%91/10983506?fr=aladdin)\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u90fd\u4e0d\u964c\u751f\uff0c\u79c9\u627f\u7740\u201c\u5e38\u6570\u8d8a\u5927\u8d23\u4efb\u8d8a\u5927\u201d\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u7ebf\u6bb5\u6811\u88ab\u8d4b\u4e88\u4e86\u5f3a\u5927\u7684\u533a\u95f4\u64cd\u4f5c\u80fd\u529b\uff0c\u4ece _\u7b80\u5355\u7684\u533a\u95f4\u52a0\u51cf\u3001\u5230\u7a0d\u5fae\u590d\u6742\u7684\u533a\u95f4\u6700\u5927\u516c\u56e0\u6570\uff0c\u4ece\u5206\u6cbb\u3001Lazy\u6807\u8bb0\u5230\u7ef4\u62a4\u5dee\u5206_ ......\u4e00\u5768\u5768~~\u9ad8\u6df1\u83ab\u6d4b~~\u5e73\u6613\u8fd1\u4eba\u7684\u540d\u8bcd\u9010\u6e10\u6210\u4e3a\u5237\u9898\u8def\u4e0a\u7684\u5e38\u5ba2\uff0c\u5c1a\u672a\u9886\u7565 _\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c_ \u4e4b\u9b45\u529b\u7684\u540c\u5b66\u4e0d\u59a8\u5148\u5b66\u4e60\u4e00\u4e9b\u201c\u5165\u95e8\u77e5\u8bc6\u201d   \n\u3000\u3000**[\u8003\u53e4\u6d1b\u8c37\u65e5\u62a5](https://www.luogu.org/blog/pks-LOVING/senior-data-structure-qian-tan-xian-duan-shu-segment-tree)**  \n\u3000\u3000**[\u4ece\u5165\u95e8\u5230\u8fdb\u9636](https://www.cnblogs.com/jason2003/p/9676729.html)**  \n\u3000\u3000**[\u7ebf\u6bb5\u6811\u8be6\u89e3](https://blog.csdn.net/zearot/article/details/48299459)**  \n\n------------\n## \u6b63\u6587\n### \u751f\u52a8\u7b80\u660e\u7684\u601d\u8def\n**\u672c\u7bc7\u6587\u7ae0\u7740\u91cd\u4ecb\u7ecd\u4e00\u4e0b\u201c\u626b\u63cf\u7ebf\u201d\u7684\u5b9e\u6218\u5e94\u7528\u3002**  \n\u626b\u63cf\u7ebf\u662f\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u7528\u6765\u8ba1\u7b97\u5e73\u9762\u4e0a\u591a\u4e2a\u77e9\u5f62\u91cd\u53e0\u540e\u5f62\u6210\u7684\u201c\u7578\u5f62\u201d\u7684\u9762\u79ef\u3001\u5468\u957f\u4ec0\u4e48\u7684\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u56db\u4e2a\u77e9\u5f62\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/6kn10h1p.png)  \n\u4ed6\u4eec\u91cd\u53e0\u540e\u7684\u6548\u679c\u5982\u4e0b\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/rs35uwt4.png)  \n\u90a3\u4e48\u6211\u4ee5\u8ba1\u7b97\u9762\u79ef\u8ddd\u79bb\u626b\u63cf\u7ebf\u7684\u5b9e\u6218\u5e94\u7528\uff1a  \n**\u60f3\u8c61\u6709\u4e00\u6761\u7ebf\u4ece\u5de6\u5f80\u53f3\u626b\uff0c\u6bcf\u9047\u5230\u77e9\u5f62\u7684\u4e00\u6761\u5de6\u3001\u53f3\u8fb9\u5c31\u505c\u4e0b\u6765\uff0c\u90a3\u4e48\u663e\u800c\u6613\u89c1\u5730\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u77e9\u5f62\uff0c\u5148\u626b\u5230\u5176\u5de6\u8fb9\uff0c\u518d\u626b\u5230\u5176\u53f3\u8fb9\uff0c\u5373\u5de6\u5165\u53f3\u51fa\uff0c\u90a3\u4e48\u6548\u679c\u5982\u4e0b\uff1a\uff08\u7ea2\u8272\u4e3a\u5165\u8fb9\u3001\u84dd\u8272\u4e3a\u51fa\u8fb9\uff09**  \n![](https://cdn.luogu.com.cn/upload/image_hosting/sqy8w1nq.png)  \n**\u6bcf\u626b\u63cf\u5230\u4e00\u6761\u5165\u8fb9\u540e\u6295\u5f71\u5230\u603b\u533a\u95f4\u5185\uff0c\u626b\u63cf\u5230\u4e00\u6761\u51fa\u8fb9\u5219\u628a\u8fd9\u6761\u8fb9\u7684\u6295\u5f71\u53bb\u6389\uff0c\u7528\u603b\u533a\u95f4\u73b0\u5728\u88ab\u8986\u76d6\u7684\u603b\u957f\u5ea6 _\u4e58_ \u4e0b\u4e00\u6761\u8fb9\u4e0e\u5f53\u524d\u8fb9\u7684\u6a2a\u5750\u6807\u5dee\u6c42\u51fa\u4e00\u5757\u9762\u79ef\uff0c\u628a\u6bcf\u6b21\u6c42\u5f97\u7684\u9762\u79ef\u76f8\u52a0\u5c31\u80fd\u5f97\u5230\u6700\u540e\u7684\u9762\u79ef**  \nPS\uff1a\u8fd9\u4e2a\u8fc7\u7a0b\u5176\u5b9e\u4e00\u70b9\u90fd\u4e0d\u96be\uff0c\u53ea\u662f\u770b\u6587\u5b57\u8f83\u96be\u4f53\u4f1a\uff0c\u5efa\u8bae\u7eb8\u4e0a\u753b\u56fe\uff0c\u4e00\u753b\u5373\u53ef\u660e\u767d\uff0c\u4e0b\u9762\u732e\u4e0a\u4e00\u56fe\u5e0c\u671b\u6709\u5e2e\u52a9\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/0di0mike.png)  \n### \u5177\u4f53\u7e41\u7410\u7684\u5b9e\u73b0\n\u8fd8\u662f\u4ee5\u201c\u4ece\u5de6\u5f80\u53f3\u626b\u201d\u8fdb\u884c\u4e3e\u4f8b\uff0c\u5176\u5b9e\u4ece\u54ea\u4e2a\u65b9\u5411\u626b\u7684\u9053\u7406\u90fd\u4e00\u6837\u3002  \n**\u628a\u7ebf\u6bb5\u6811\u5efa\u8d77\u6765\uff0c\u7ef4\u62a4\u201c\u603b\u533a\u95f4\u201d\uff0c\u6ce8\u610f\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u4e0d\u662f\u70b9\uff0c\u5373\uff1a\u7528 y \u8868\u793a\u4ee5 y \u4e3a\u4e0b\u7aef\u70b9\u7684\u7eb5\u7ebf\u6bb5\uff0c\u7ef4\u62a4 [y,y] \u533a\u95f4\u6307\u7ef4\u62a4 [y,y+1] \u8fd9\u4e00\u7eb5\u7ebf\u6bb5\uff0c\u7136\u800c\u8f93\u5165\u7684\u662f\u4e24\u4e2a\u7aef\u70b9 l,r \uff0c\u5b9e\u9645\u4e0a\u53ea\u662f [l,r-1] \u8fd9\u4e00\u6bb5\u7eb5\u7ebf\u6bb5\uff0c\u6240\u4ee5\u8981\u51cf\u4e00\uff0c\u800c\u5728\u7528\u4e0a\u7aef\u70b9\u51cf\u4e0b\u7aef\u70b9\u8ba1\u7b97\u7ebf\u6bb5\u957f\u5ea6\u65f6\u5e94\u8ba1\u7b97 r+1-l \u56e0\u4e3a\u7aef\u70b9 r \u662f [r+1,\\infty] \u7684\u4e0b\u7aef\u70b9\uff08\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u8981\u597d\u597d\u7406\u89e3\uff09**  \n**\u5bf9\u4e8e\u7ef4\u62a4\u7eb5\u5750\u6807 [l,r] \u533a\u95f4\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u5b9a\u4e49 cnt,sum \u4e24\u4e2a\u53d8\u91cf\uff0ccnt \u8bb0\u5f55\u80fd\u591f\u8986\u76d6\u6574\u4e2a\u533a\u95f4\u7684\u5165\u8fb9\u6761\u6570\uff0csum \u8bb0\u5f55\u8fd9\u6bb5\u533a\u95f4\u88ab\u8986\u76d6\u7684\u957f\u5ea6\uff0c\u663e\u800c\u6613\u89c1\u5730\uff0c\u5f53\u5904\u7406\u5165\u8fb9\u65f6\uff0c\u5165\u8fb9\u8986\u76d6\u7684\u7eb5\u5750\u6807\u533a\u95f4 cnt+1 ,\u5904\u7406\u51fa\u8fb9\u65f6\uff0c\u51fa\u8fb9\u8986\u76d6\u7684\u7eb5\u5750\u6807\u533a\u95f4 cnt-1\uff0c\u7ef4\u62a4\u8d77\u6765\u4e0d\u96be\uff0c\u4f46\u662f\u4e00\u822c\u6570\u636e\u8f83\u5927\uff0c\u6240\u4ee5\u6700\u597d\u6253\u4e0a\u201c\u79bb\u6563\u5316+\u5feb\u8bfb\u201d\u3002**  \n**\u6b64\u5904\u4ee5[City Horizon](https://www.luogu.org/problem/P2061)\u4e3a\u4f8b\u9898\u653e\u4e0a\u4ee3\u7801\uff08\u56e0\u4e3a\u6709\u4e00\u6761\u8fb9\u4e00\u5b9a\u5728\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0c\u8fd9\u9898\u53ef\u4ee5\u7528\u7ebf\u6bb5\u5e76\u800c\u4e0d\u5fc5\u9762\u79ef\u5e76\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u5e94\u8be5\u8bd5\u8bd5\u626b\u63cf\u7ebf\uff0c\u81f3\u4e8e\u5b83\u7684\u7eb5\u5750\u6807\u533a\u95f4\u5c31\u8bbe\u4e3a [0,h] \u5373\u53ef\uff09**  \n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 40010\nusing namespace std;\ntypedef long long ll;\ninline ll read()\n{\n\tll x=0;bool f=false;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9') f|=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\n//\u7eb5\u626b\u63cf\u7ebf\u4ece\u5de6\u5f80\u53f3\u626b\u8fc7\u53bb \nstruct node{ll h,p;}e[N<<1];//\u8f93\u5165\ninline bool cmp1(node a,node b){return a.h<b.h;}\nll cnt,Y[N<<1],ys[N<<1];//\u79bb\u6563\u5316\u7eb5\u5750\u6807(\u53bb\u91cd),\u6620\u5c04\ninline ll findpos(ll l,ll r,ll val)//\u627e\u67d0\u4e2a\u672a\u79bb\u6563\u7eb5\u5750\u6807\u7684\u6392\u540d\n{\n\tll mid;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(ys[Y[mid]]>val) r=mid-1;\n\t\telse if(ys[Y[mid]]<val) l=mid+1;\n\t\telse break;\n\t}\n\treturn Y[mid];\n}\nstruct edge{ll x,h,l,flag;}a[N<<1];\n//x\u4e3a\u6a2a\u5750\u6807,h\u4e3a\u4e0a\u7aef\u70b9,l\u4e3a\u4e0b\u7aef\u70b9,flag\u6807\u8bb0\u6b64\u8fb9\u4e3a\u5165\u8fb9\u6216\u51fa\u8fb9\ninline bool cmp2(edge a,edge b){return a.x<b.x;}\nstruct segment\n{//\u7ebf\u6bb5\u6811[l,r]\u7ef4\u62a4\u6392\u540d[l,r]\u7684y\u5750\u6807\u7684\u533a\u95f4 \n\tll l,r,lc,rc,cnt,sum;\n\t//cnt\u8868\u793a\u8986\u76d6[l,r]\u6574\u6bb5\u7684\u5165\u8fb9\u6570-\u51fa\u8fb9\u6570\n\t//sum\u8868\u793a\u672c[l,r]\u5185\u88ab\u8986\u76d6\u7684\u957f\u5ea6 \n}tr[N<<2];ll trlen;\nvoid bt(ll l,ll r)\n{\n\tll now=++trlen;\n\ttr[now].l=l;tr[now].r=r;\n\tif(l==r) tr[now].lc=tr[now].rc=-1;\n\telse\n\t{\n\t\tll mid=(l+r)>>1;\n\t\ttr[now].lc=trlen+1;bt(l,mid);\n\t\ttr[now].rc=trlen+1;bt(mid+1,r);\n\t}\n\ttr[now].cnt=tr[now].sum=0;\n}\nvoid pushUp(ll now)\n{\n\tll lc=tr[now].lc,rc=tr[now].rc;\n    if(tr[now].cnt) tr[now].sum=ys[tr[now].r+1]-ys[tr[now].l];//\u6574\u6bb5\u8986\u76d6\n\telse\n\t{\n\t\tif(tr[now].l==tr[now].r) tr[now].sum=0;//\u53f6\u5b50\n    \telse tr[now].sum=tr[lc].sum+tr[rc].sum;//\u90e8\u5206\u8986\u76d6\n\t}\n}\nvoid update(ll now,ll l,ll r,ll val)\n{\n    if(l<=tr[now].l && tr[now].r<=r)\n    {\n        tr[now].cnt+=val;\n        pushUp(now);\n        return ;\n    }\n    ll mid=(tr[now].l+tr[now].r)>>1;\n    ll lc=tr[now].lc,rc=tr[now].rc;\n    if(l<=mid) update(lc,l,r,val);\n    if(r>mid) update(rc,l,r,val);\n    pushUp(now);//\u8ba1\u7b97\u8be5\u533a\u95f4\u88ab\u8986\u76d6\u7684\u603b\u957f\u5ea6\n}\nint main()\n{\n\tll n=read();\n\tfor(ll i=1;i<=n;i++)\n\t{\n\t\tll x1=read(),x2=read(),h=read();\n\t\ta[i*2-1].x=x1;a[i*2].x=x2;\n\t\te[i*2-1].h=0;e[i*2].h=h;\n\t\te[i*2-1].p=i*2-1;e[i*2].p=i*2;\n\t\ta[i*2-1].l=a[i*2].l=0;\n\t\ta[i*2-1].h=a[i*2].h=h;\n\t\ta[i*2-1].flag=1;a[i*2].flag=-1;\n\t}\n\tsort(e+1,e+n*2+1,cmp1);Y[cnt=1]=1;\n\tfor(ll i=2;i<=n*2;i++) if(e[i].h>e[i-1].h) cnt++,Y[cnt]=Y[cnt-1]+1,ys[Y[cnt]]=e[i].h;\n\tsort(a+1,a+n*2+1,cmp2);\n\tbt(1,Y[cnt]);\n\tll ans=0;\n\tfor(ll i=1;i<n*2;i++)\n\t{\n\t\tll l=findpos(1,cnt,a[i].l),r=findpos(1,cnt,a[i].h)-1;\n\t\tupdate(1,l,r,a[i].flag);\n\t\tans+=tr[1].sum*(a[i+1].x-a[i].x);//\u6c42\u9762\u79ef\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n------------\n**\u518d\u6765\u770b\u4e00\u9053 _\u8ba1\u7b97\u5468\u957f_ \u7684\u9898\u76ee\u5427**  \n**[picture\uff0cIOI1998](https://www.luogu.org/problem/P1856)**  \n\u53ea\u9700\u8981\u60f3\u5230\u4e24\u70b9\u5373\u53ef\uff1a  \n1\u3001\u6bcf\u4e2a\u8fde\u7eed\u7684\u7eb5\u5411\u7ebf\u6bb5\u7684\u4e24\u4fa7\u5fc5\u7136\u67092\u4e2a\u5bf9\u6a2a\u5411\u5468\u957f\u4ea7\u751f\u8d21\u732e\u7684\u7ebf\u6bb5\uff1b  \n2\u3001\u7eb5\u5411\u7ebf\u6bb5\u5bf9\u7eb5\u5411\u5468\u957f\u7684\u8d21\u732e\u5373\u4e3a\u8fd9\u4e00\u6761\u8fb9\u52a0\u5165\u540e\uff08\u4e0d\u7ba1\u51fa\u8fb9\u5165\u8fb9\uff09\u603b\u533a\u95f4\u88ab\u7ebf\u6bb5\u8986\u76d6\u7684\u957f\u5ea6\u7684\u53d8\u5316\u3002  \nPS:\u8981\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff1a\u7ef4\u62a4\u8fde\u7eed\u7684\u7eb5\u5411\u7ebf\u6bb5\u65f6\u8981\u770b\u5de6\u53f3\u5b69\u5b50\u80fd\u4e0d\u80fd\u62fc\u5728\u4e00\u8d77  \n```cpp//\u6bcf\u4e2a\u8fde\u7eed\u7684\u6a2a\u5411\u7ebf\u6bb5\u7684\u4e24\u4fa7\u5fc5\u7136\u67092\u4e2a\u5bf9\u7eb5\u5411\u5468\u957f\u4ea7\u751f\u8d21\u732e\u7684\u7ebf\u6bb5\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 5010\n#define Max 0x3f3f3f3f\nusing namespace std;\ninline int read()\n{\n\tint x=0;bool f=false;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9') f|=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nint cnt,Y[N<<1],ys[N<<1];\nstruct edge{int l,h,x,flag;}e[N<<1];\ninline bool cmp(edge a,edge b) {return a.x^b.x?a.x<b.x:a.flag>b.flag;}\ninline int findpos(int l,int r,int val)\n{\n\tint mid;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(ys[mid]<val) l=mid+1;\n\t\telse if(ys[mid]>val) r=mid-1;\n\t\telse break;\n\t}\n\treturn mid;\n}\nstruct segment{int l,r,lc,rc,cnt,sum,lin;bool lb,rb;}tr[N<<2];int trlen;\n//sum\u8868\u793a\u533a\u95f4\u5185\u8986\u76d6\u7684\u957f\u5ea6,lin\u8868\u793a\u8fde\u7eed\u7684\u7ebf\u6bb5\u6761\u6570,lmin&rmax\u8868\u793a\u6700\u5de6\u548c\u6700\u53f3\u7684\u7ebf\u6bb5\u7aef\u70b9\u662f\u5426\u5230\u8fbe\u8fb9\u754c \nvoid bt(int l,int r)\n{\n\tint now=++trlen;\n\ttr[now].l=l;tr[now].r=r;\n\ttr[now].cnt=tr[now].sum=tr[now].lin=0;\n\tif(l==r) tr[now].lc=tr[now].rc=-1;\n\telse\n\t{\n\t\tint mid=(l+r)>>1;\n\t\ttr[now].lc=trlen+1;bt(l,mid);\n\t\ttr[now].rc=trlen+1;bt(mid+1,r);\n\t}\n}\nvoid pushUP(int now)\n{\n\tint lc=tr[now].lc,rc=tr[now].rc;\n\tif(tr[now].cnt)\n\t{\n\t\ttr[now].sum=ys[tr[now].r+1]-ys[tr[now].l];\n\t\ttr[now].lin=1;tr[now].lb=tr[now].rb=true;\n\t}\n\telse if(tr[now].l==tr[now].r)\n\t{\n\t\ttr[now].sum=tr[now].lin=0;\n\t\ttr[now].lb=tr[now].rb=false;\n\t}\n\telse\n\t{\n\t\ttr[now].sum=tr[lc].sum+tr[rc].sum;\n\t\ttr[now].lin=tr[lc].lin+tr[rc].lin-(tr[lc].rb && tr[rc].lb);\n\t\ttr[now].lb=tr[lc].lb;tr[now].rb=tr[rc].rb;\n\t}\n}\nvoid update(int now,int l,int r,int val)\n{\n\tif(l<=tr[now].l && tr[now].r<=r)\n\t{\n\t\ttr[now].cnt+=val;\n\t\tpushUP(now);\n\t\treturn ;\n\t}\n\tint mid=(tr[now].l+tr[now].r)>>1;\n\tint lc=tr[now].lc,rc=tr[now].rc;\n\tif(l<=mid) update(lc,l,r,val);\n\tif(r>mid) update(rc,l,r,val);\n\tpushUP(now);\n}\nint main()\n{\n\tint n=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x1=read(),y1=read(),x2=read(),y2=read();\n\t\te[i*2-1].l=e[i*2].l=y1;\n\t\te[i*2-1].h=e[i*2].h=y2;\n\t\te[i*2-1].x=x1;e[i*2].x=x2;\n\t\te[i*2-1].flag=1;e[i*2].flag=-1;\n\t\tY[i]=y1;Y[i+n]=y2;\n\t}\n\tsort(Y+1,Y+n*2+1);ys[cnt=1]=Y[1];\n\tfor(int i=2;i<=n*2;i++) if(Y[i]>Y[i-1]) cnt++,ys[cnt]=Y[i];\n\tbt(1,cnt);\n\tsort(e+1,e+n*2+1,cmp);\n\tint ans=0,lastsum=0,lastlin=0;\n\tfor(int i=1;i<=n*2;i++)\n\t{\n\t\tint l=findpos(1,cnt,e[i].l),r=findpos(1,cnt,e[i].h)-1;\n\t\tupdate(1,l,r,e[i].flag);\n\t\tans+=abs(tr[1].sum-lastsum);\n\t\tans+=2*lastlin*(e[i].x-e[i-1].x);\n\t\tlastsum=tr[1].sum;\n\t\tlastlin=tr[1].lin;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1574472986,
        "uid": 113454,
        "name": "2018chenyu",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\u4e4b\u201c\u626b\u63cf\u7ebf\u201d"
    },
    {
        "content": "\u849f\u84bb\u9898\u89e3\uff0c\u6c34\u5e73\u4e0d\u9ad8\u3002\n\n\u7531\u4e8e\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u82e6\u601d\u51a5\u60f3\u60f3\u51fa\u4e86\u4e00\u4e2a\u975e\u7ebf\u6bb5\u6811\u4f5c\u6cd5\u3002\u597d\u50cf\u8dd1\u7684\u8fd8\u5feb\u4e86\u4e00\u70b9\u3002\n\n\u53ea\u8981\u628a\u603b\u533a\u95f4\u5206\u6210\u4e00\u4e2a\u4e2a\u5c0f\u533a\u95f4\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5c0f\u533a\u95f4\u7684\u6700\u5927\u503c\u5c31\u884c\u5566\uff01\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8981\u5bf9\u6bcf\u4e2a\u697c\u7684\u5de6\u3001\u53f3\u7aef\u70b9\u6253\u4e0a\u4e0d\u540c\u7684\u8bb0\u53f7\u3002\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\u3002\n```cpp\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nstruct KO{\n\tLL place,high,sign;\n};\nstruct node\n{\n    int x,y;\n    bool operator < (const node & a) const\n    {\n        return x<a.x;\n    }\n}k;\npriority_queue <node> q;\nbool cmp(KO a,KO b)\n{\n\treturn a.place<b.place;\n}\nint main(int n)\n{\n\tlong long ans=0;\n\tscanf(\"%d\",&n);\n\tbool u[n+1];\n\tn*=2;\n\tKO a[n+1];\n\tmemset(u,true,sizeof(u));\n\tfor(int i=1,j=1;i<=n;j++,i+=2){\n\t\tscanf(\"%lld%lld%lld\",&a[i].place,&a[i+1].place,&a[i].high);\n\t\ta[i].sign=j;a[i+1].sign=-1*j;a[i+1].high=a[i].high;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tk.x=a[1].high,k.y=a[1].sign;\n\tq.push(k);\n\tfor(int i=2;i<=n;i++){\n\t\tnode p;\n\t\twhile(q.empty()!=true){\n\t\t\tp=q.top();\n\t\t\tif(u[p.y]==false){\n\t\t\t\tq.pop();\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\tif(q.empty()==true){\n\t\t\tk.x=a[i].high,k.y=a[i].sign;\n\t\t\tq.push(k);\n\t\t\tcontinue;\n\t\t}\n\t\tans+=(a[i].place-a[i-1].place)*p.x;\n\t\tif(a[i].sign>0){\n\t\t\tk.x=a[i].high,k.y=a[i].sign;\n\t\t\tq.push(k);\n\t\t}\n\t\telse if(a[i].sign<0){\n\t\t\tu[a[i].sign*-1]=false;\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n} \n```",
        "postTime": 1544070840,
        "uid": 145240,
        "name": "wasked",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "### Multiset&\u79bb\u6563\u5316\n\n---\n\n### \u601d\u8def\uff1a\n\n\u628a\u5f00\u59cb\u548c\u7ed3\u675f\u8282\u70b9\u79bb\u6563\u5316\u5e76\u6392\u5e8f\uff0c\u626b\u5230\u4e00\u4e2a\u8282\u70b9\uff0cans\u52a0\u4e0a\u8fd9\u4e2a\u8282\u70b9\u548c\u4e0a\u4e00\u4e2a\u8282\u70b9\u4e4b\u95f4\u8ddd\u79bb\u548c\u76ee\u524d\u6240\u626b\u5230\u5efa\u7b51\u9ad8\u5ea6\u4e2d\u7684\u6700\u9ad8\u503c\u7684\u79ef\uff08\u4e5f\u5c31\u662fmultiset\u7684\u9996\u5143\u7d20\uff09\uff08\u7b2c\u4e00\u4e2a\u8282\u70b9\u9664\u5916\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f\u5f00\u59cb\u8282\u70b9\uff0c\u5219multiset\u52a0\u5165\u8282\u70b9\u5bf9\u5e94\u77e9\u5f62\u7684\u9ad8\uff0c\u5426\u5219multiset\u4e2d\u5220\u9664\u8282\u70b9\u5bf9\u5e94\u77e9\u5f62\u7684\u9ad8\u3002\u626b\u63cf\u4e00\u904d\u53ef\u5f97\u6b63\u89e3\u3002\n\n---\n\n### \u7a0b\u5e8f\uff1a\n\n```\n//#define CCF\n#define OLD\n\n#ifndef CCF\n    #pragma comment(linker, \"/STACK:102400000,102400000\")\n    #ifdef OLD\n        #pragma GCC diagnostic error \"-std=c++11\"\n    #endif\n    #pragma GCC optimize (\"O3\")\n    #pragma GCC -mcmodle=large\n#endif\n\n//---------------------\u5206\u5272\u7ebf\u4ee5\u4e0a\u65e0\u89c6---------------------\n\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nint n;\nLL ans;\n\nstruct node{\n    LL h,id;\n    char type;\n}a[80005];\n\nstruct set_cmd{\n    bool operator()(const int &x,const int &y){\n        return x>y;\n    }\n};\n\nmultiset<LL,set_cmd> s;\n\ninline bool sort_cmp(node x,node y){\n    return x.id<y.id;\n}\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    cin>>n;\n    for(register int i=1;i<=n;++i){\n        LL x,y,z;\n        cin>>x>>y>>z;\n        a[2*i-1].id=x,a[2*i-1].h=z,a[2*i-1].type='a';\n        a[2*i].id=y,a[2*i].h=z,a[2*i].type='b';\n        //cout<<a[2*i-1].h<<' '<<a[2*i].h<<'\\n';\n    }\n    sort(a+1,a+1+2*n,sort_cmp);\n    //cout<<*s.begin()<<'\\n';\n    for(register int i=1;i<=2*n;++i){\n        //if(s.empty()) goto P_TAG;\n        ans+=(LL)(*s.begin())*(LL)(a[i].id-a[i-1].id);\n        //P_TAG:\n            if(a[i].type=='a') s.insert(a[i].h);\n            else s.erase(s.find(a[i].h)); //multiset\u5220\u9664\u952e\u503c\u662f\u628a\u548c\u952e\u503c\u76f8\u540c\u7684\u6240\u6709\u5143\u7d20\u5220\u9664QAQ\uff0c\u5361\u4e86\u597d\u957f\u65f6\u95f4\n            //cout<<*s.begin()<<'\\n';\n    }\n    cout<<ans<<'\\n';\n    return 0;\n}\n```\n\n---\n\n###### ~~\u4ee5\u4e0b\u4e3a\u5e9f\u8bdd~~\n\n- ###### \u5410\u69fd\u7ffb\u8bd1\uff0c\u786c\u628a\u9898\u76ee\u7ffb\u6210\u7ebf\u6bb5\u6811\n\n- ###### \u597d\u591adalao\u7528\u7ebf\u6bb5\u6811\uff0c\u7136\u800c\u6253\u4e86\u597d\u4e45\u6ca1\u6253\u51fa\u6765",
        "postTime": 1520753914,
        "uid": 52476,
        "name": "Chthology",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "## [P2061](https://www.luogu.com.cn/problem/P2061)\r\n\r\n### \u89e3\u9898\u601d\u8def\uff1a\r\n\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u64cd\u4f5c $i,j$\uff0c\u6ee1\u8db3 $h_i<h_j$\uff0c\u90a3\u4e48\u4e24\u4e2a\u64cd\u4f5c\u533a\u95f4\u7684\u5e76\u96c6\u5c31\u53ea\u9700\u8981\u88ab $i$ \u64cd\u4f5c\u4fee\u6539\u5373\u53ef\u3002\r\n\r\n\u6211\u4eec\u5c06\u6240\u6709\u4fee\u6539\u64cd\u4f5c\u6309 $h$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u90a3\u4e48\u5df2\u7ecf\u88ab\u4fee\u6539\u540e\u7684\u4f4d\u7f6e\u5c31\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u4fee\u6539\u4e86\u3002\r\n\r\n\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u7ef4\u62a4\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\r\n\r\n\u6211\u4eec\u8bb0\u5f55 $nex_i$ \u8868\u793a\u4ece $i$ \u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\r\n\r\n\u5f53 $i$ \u88ab\u4fee\u6539\u540e\uff0c\u8ba9 $nex_i$ \u7b49\u4e8e $nex_{i+1}$\u3002\r\n\r\n\u5982\u679c\u76f4\u63a5\u8fd9\u6837\u505a\uff0c\u80af\u5b9a\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a $nex_{i+1}$ \u53ef\u80fd\u5728\u540e\u9762\u4f1a\u88ab\u4fee\u6539\uff0c$nex_{i+1}$ \u88ab\u4fee\u6539\u540e $nex_i$ \u4e5f\u8981\u968f\u4e4b\u4fee\u6539\u3002\r\n\r\n\u8003\u8651\u5c06\u601d\u8def\u8f6c\u5316\u3002\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u4e00\u5f20\u56fe\u3002\r\n\r\n\u521d\u59cb\u7684\uff0c$i$ \u548c\u81ea\u5df1\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u7b49\u4ef7\u4e8e $nex_i=i$\u3002\r\n\r\n\u5f53 $i$ \u88ab\u4fee\u6539\u540e\uff0c\u6211\u4eec\u5c31\u5728 $i$ \u548c $i+1$ \u4e4b\u95f4\u8fde\u8fb9\uff0c\u7b49\u4ef7\u4e8e $nex_i=nex_{i+1}$\u3002\r\n\r\n\u90a3\u4e48 $i$ \u540e\u9762\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u5c31\u662f $i$ \u6240\u5728\u8054\u901a\u5757\u4e2d\u7f16\u53f7\u6700\u5927\u7684\u8282\u70b9\u3002\r\n\r\n\u90a3\u4e48\u600e\u4e48\u7ef4\u62a4\u8054\u901a\u5757\u4e2d\u7f16\u53f7\u6700\u5927\u7684\u8282\u70b9\u5462\uff1f\r\n\r\n\u5e76\u67e5\u96c6\uff01\r\n\r\n\u6bcf\u6b21\u8fde $i$ \u5230 $i+1$ \u7684\u8fb9\u5c31\u76f8\u5f53\u4e8e\u5c06 $i$ \u548c $i+1$ \u6240\u5728\u96c6\u5408\u5408\u5e76\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236\u5408\u5e76\u7684\u65b9\u5411\uff0c\u6bcf\u6b21\u90fd\u662f\u5c06 $i$ \u6240\u5728\u96c6\u5408\u5408\u5e76\u5230 $i+1$ \u6240\u5728\u96c6\u5408\u4e0a\uff0c\u90a3\u4e48 $i$ \u6240\u5728\u96c6\u5408\u7684\u6839\u5c31\u662f $i$ \u6240\u5728\u8054\u901a\u5757\u7f16\u53f7\u6700\u5927\u7684\u8282\u70b9\u3002\r\n\r\n\u5177\u4f53\u6c42\u7b54\u6848\u8bf7\u770b\u4ee3\u7801\uff0c\u5f88\u597d\u7406\u89e3\u3002\r\n\r\n### \u4ee3\u7801\uff1a\r\n```cpp\r\nconst int N=4e4+10;\r\n\r\nstruct operate\r\n{\r\n\tint l,r,x;\r\n}op[N];\r\n\r\nbool comp(const operate &P,const operate &Q)\r\n{\r\n\treturn P.x>Q.x;\r\n}\r\n\r\nint lis[N<<1],fa[N<<1],val[N<<1],tot;\r\n\r\nint find(int x)\r\n{\r\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\r\n}\r\n\r\nint main()\r\n{\r\n\tint n;\r\n\tscanf(\"%d\",&n);\r\n\trep(i,1,n)\r\n\t{\r\n\t\tscanf(\"%d%d%d\",&op[i].l,&op[i].r,&op[i].x);\r\n\t\tlis[++tot]=op[i].l;\r\n\t\tlis[++tot]=op[i].r;\r\n\t}\r\n\tsort(op+1,op+1+n,comp);\r\n\tsort(lis+1,lis+1+tot);\r\n\ttot=unique(lis+1,lis+1+tot)-lis-1;\r\n\trep(i,1,tot+1) fa[i]=i;\r\n\tLL ans=0;\r\n\trep(i,1,n)\r\n\t{\r\n\t\tint u=lower_bound(lis+1,lis+1+tot,op[i].l)-lis,r=lower_bound(lis+1,lis+1+tot,op[i].r)-lis;\r\n\t\tu=find(u);\r\n\t\twhile(u<r)\r\n\t\t{\r\n\t\t\tval[u]=op[i].x;\r\n\t\t\tans+=1ll*val[u]*(lis[u+1]-lis[u]);\r\n\t\t\tfa[u]=find(u+1);\r\n\t\t\tu=fa[u];\r\n\t\t}\r\n\t}\r\n\tprintf(\"%lld\",ans);\r\n\treturn 0;\r\n}\r\n\r\n```\r\n",
        "postTime": 1670575431,
        "uid": 571634,
        "name": "hgzxwzf",
        "ccfLevel": 7,
        "title": "P2061 [USACO07OPEN]City Horizon S"
    },
    {
        "content": "\u9996\u5148\uff0c\u9898\u76ee\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6bcf\u6b21\u5c06\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u4e2d $<v$ \u7684\u6570\u53d8\u6210 $v$ \u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u533a\u95f4\u63a8\u5e73\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $ODT$ \u6765\u5feb\u901f\u5730\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\n\n\u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a $ODT$ \u5b83 $TLE$ \u4e86\u3002\n\n\u4ed4\u7ec6\u601d\u8003\uff0c\u53d1\u73b0\u6bcf\u6b21\u628a\u4e00\u6bb5\u533a\u95f4\u589e\u9ad8\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u533a\u95f4\u6570\u91cf\u4e0d\u4f1a\u589e\u52a0\u7684\u592a\u591a\u3002\u8003\u8651\u4f18\u5316\uff0c\u6ce8\u610f\u5230\u9898\u76ee\u53ea\u6709\u589e\u9ad8\u533a\u95f4\u8fd9\u4e00\u64cd\u4f5c\uff0c\u5e76\u4e14\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u589e\u9ad8\u7684\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002\u5f88\u81ea\u7136\u5730\u60f3\u5230\u5c06\u6240\u6709\u64cd\u4f5c\u5b58\u8d77\u6765\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u64cd\u4f5c\uff0c\u628a $[l,r]$ \u533a\u95f4\u63a8\u5e73\u4e3a $v$ \uff0c\u5f88\u5feb\u5c31\u80fd\u89e3\u51b3\u4e86\u3002\n\n\u9057\u61be\u7684\u662f\u56e0\u4e3a\u6211\u7684\u7801\u98ce\u592a\u4e11\u5e38\u6570\u592a\u5927\u7a0b\u5e8f\u53ea\u80fd\u8dd1 $76ms$ \u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T>\ninline void write(T x)\n{\n    if(x>9)\n    {\n        write(x/10);\n    }\n    putchar(x%10+'0');\n}\n\ninline char nc()\n{\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void read(int &sum)\n{\n    char ch=nc();\n    int tf=0;\n    sum=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=nc();\n    tf=((ch=='-')&&(ch=nc()));\n    while(ch>='0'&&ch<='9') sum=sum*10+(ch-48),ch=nc();\n    (tf)&&(sum=-sum);\n}\n\nstruct node\n{\n    int l,r;\n    mutable long long v;\n    node() {}\n    node(int L,int R=-1,int V=0):l(L),r(R),v(V) {}\n    inline bool operator <(const node &o) const\n    {\n        return l<o.l;\n    }\n};\n\nset<node> s;\n\ninline set<node>::iterator split(int pos)\n{\n    set<node>::iterator it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos) return it;\n    --it;\n    int L=it->l,R=it->r;\n    long long V=it->v;\n    s.erase(it);\n    s.insert(node(L,pos-1,V));\n    return s.insert(node(pos,R,V)).first;\n}\n\ninline void assignval(int l,int r,long long v)\n{\n    set<node>::iterator itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,v));\n}\n\ninline void query(int l,int r)\n{\n    long long ret=0;\n    for(set<node>::iterator it=s.begin();it!=s.end();++it)\n    {\n        ret+=it->v*(it->r-it->l+1);\n    }\n    write(ret);\n}\n\nstruct ask\n{\n    int l,r,v;\n    inline bool operator <(const ask &o) const\n    {\n        return v<o.v;\n    }\n};\n\nint n;\nask asks[100010];\n\nint main()\n{\n    s.insert(node(1,1000000000,0));\n    read(n);\n    for(register int i=1;i<=n;++i)\n    {\n        read(asks[i].l),read(asks[i].r),read(asks[i].v);\n        asks[i].r--;\n    }\n    sort(asks+1,asks+1+n);\n    for(register int i=1;i<=n;++i)\n    {\n        assignval(asks[i].l,asks[i].r,asks[i].v);\n    }\n    query(1,1000000000);\n    return 0;\n}\n```\n",
        "postTime": 1570180744,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "$update:$ \u4fee\u6539\u3001\u589e\u52a0\u4e86\u90e8\u5206\u5185\u5bb9\u3002\n\n\u7ed9\u51fa\u4e00\u79cd\u7ebf\u6bb5\u6811\u7684\u626b\u63cf\u7ebf\u5b9e\u73b0\u65b9\u6cd5\u3002\n\n## $Solution$\n\n\u672c\u9898\u8fd0\u7528\u4e86\u626b\u63cf\u7ebf\u7684\u601d\u60f3\u3002\n\n\u4ec0\u4e48\u662f\u626b\u63cf\u7ebf\uff1f\n\n\u770b\u4e00\u5e45\u56fe\uff1a\n\n![](https://s2.ax1x.com/2019/06/26/ZezIPI.png)\n\n\u5982\u679c\u6734\u7d20\u7684\u53bb\u505a\uff0c\u6211\u4eec\u53d1\u73b0\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7ebf\u90fd\u8986\u76d6\u4e00\u6b21\uff0c\u53d6\u6700\u7ec8\u7684\u8986\u76d6\u7ed3\u679c\u3002\n\n\u4f46\u5982\u679c\u4f7f\u7528\u626b\u63cf\u7ebf\uff0c\u4f60\u53ea\u9700\u8981\u5c06\u4e00\u6761\u4e00\u6761\u7ebf\u626b\u4e0b\u53bb\uff0c\u626b\u5230\u4e24\u6761\u7ebf\uff0c\u4e00\u6761\u505a\u8d77\u70b9\uff0c\u4e00\u6761\u505a\u7ec8\u70b9\uff0c\u5c06\u4e24\u6761\u7ebf\u4e4b\u95f4\u6784\u6210\u7684\u9762\u79ef\u7d2f\u52a0\u5373\u53ef\u3002\n\n\u6b63\u5982\u4e0a\u56fe\uff0c\u5c31\u662f\u6309\u7167\u6a2a\u5750\u6807\u6392\u5e8f\uff0c\u7136\u540e\u5f80\u540e\u626b\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5750\u6807 x \u7684\u4e0b\u4e00\u4e2a\u5750\u6807\u3002\u5148\u5c06 $A,\\ I$ \u653e\u5165\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u51fa $A \\to I$ \u7684\u957f\u5ea6\uff0c\u5373\u7ebf\u6bb5\u6811\u4e2d\u7684 $S_1$ \uff0c\u52a0\u4e0a\u56db\u8fb9\u5f62 $AIKO$ \u7684\u9762\u79ef\uff0c\u7136\u540e\u52a0\u5165\u70b9 $C,\\ O$ \uff0c\u7ee7\u7eed\u5f80\u540e\u626b\uff0c\u626b\u5230 $B,\\ J$ \uff0c\u8ba1\u7b97\u8d21\u732e\uff0c\u6ce8\u610f\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u6b64\u65f6\u7684 $S_1$ \u53d8\u4e3a $CO$ \u7684\u957f\u5ea6\u3002\u4e4b\u540e\u4e00\u76f4\u505a\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u957f\u5ea6\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u56fe\u5f62\u9762\u79ef\u9020\u6210\u7684\u8d21\u732e\u7684\u9ad8\u4f1a\u7528\u5230\u4e00\u4e2a\u8bfb\u5165\u7684\u56db\u8fb9\u5f62\u7684\u6700\u5148\u8bfb\u5165\u7684\u8fb9\uff0c\u6240\u4ee5\u8003\u8651\u591a\u7ef4\u62a4\u4e00\u4e2a $f$ \u6570\u7ec4\u8868\u793a\u4ed6\u662f\u5148\u8bfb\u5165\u7684\u8fb9\u8fd8\u662f\u540e\u8bfb\u5165\u7684\u8fb9\uff0c\u5982\u679c\u662f\u5148\u8bfb\u5165\u7684\u8fb9\u5c31\u662f $1$ \uff0c\u5426\u5219\u4e3a $-1$ \u3002\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5e76\u5728\u5176\u4e2d\u7ef4\u62a4\u4e00\u4e2a $T_i$ \u6570\u7ec4\u8868\u793a $i$ \u8fd9\u4e2a\u8282\u70b9\u6240\u62e5\u6709\u7684\u8fb9\u662f\u5148\u8bfb\u5165\u7684\u8fb9\u8fd8\u662f\u540e\u8bfb\u5165\u7684\u8fb9\uff0c\u5c31\u662f\u5728 $Update$ \u7684\u65f6\u5019\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u505a $f_i$ \u7684\u4fee\u6539\uff0c\u7136\u540e\u5728 $push\\ up$ \u7684\u65f6\u5019\u5224\u65ad\u4ed6\u662f\u5426\u662f\u5148\u8bfb\u5165\u7684\u8fb9\uff0c\u662f\u7684\u8bdd\u5c06 $S$ \u6570\u7ec4\u66f4\u65b0\u4e3a $r - l + 1$ \uff0c\u5426\u5219\u5224\u65ad\u662f\u5426\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u662f\u5c31\u7f6e\u4e3a $0$ \uff0c\u4e0d\u7136\u5c31\u6b63\u5e38 $push\\ up$ \u3002\n\n\u7531\u4e8e\u503c\u57df\u8303\u56f4\u8f83\u5927\uff0c\u6709 $1e9$ \uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u65f6\u5019\u91c7\u7528\u4e86\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\n\n## $Code:$\n\n```cpp\n#include <bits/stdc++.h>\n//#include\"Bignum/bignum.h\"\n//#define lll bignum\n#define lowbit(x) (x & -x)\n#define debug(x) (cout << \"#x = \" << (x) << endl)\n#define Set(x, i) memset (x, i, sizeof(x))\n#define R register\n#define For(i, j, k) for(R int i = (j), ED = (k); i <= ED; ++i)\n#define foR(i, j, k) for(R int i = (j), ED = (k); i >= ED; --i)\n#define Cross(i, j, k) for(R int i = (j); i; i = (k))\nusing namespace std;\ntypedef long long ll;\nconst ll N = 100011;\nconst ll INF = 5e16;\n\nnamespace IO {\n\n\tinline char gc() {\n\t\tstatic char buf[100000], *p1 = buf, *p2 = buf;\n\t\treturn (p1 == p2) && (p2 = (p1 = buf) +\n\t\t\tfread (buf, 1, 100000, stdin), p1 == p2)? EOF: *p1++;\n\t}\n\n\t#define dd ch = getchar()\n\tinline ll read() {\n\t\tll x = 0; bool f = 0; char dd;\n\t\tfor (; !isdigit (ch); dd) f ^= (ch == '-');\n\t\tfor (; isdigit (ch); dd)  x = x * 10 + (ch ^ 48);\n\t\treturn f? -x: x;\n\t}\n\t#undef dd\n\n\tinline void write( ll x ) {\n\t\tif (x < 0) putchar ('-'), x = -x;\n\t\tif (x > 9) write (x / 10); putchar (x % 10 | 48);\n\t}\n\n\tinline void wrn ( ll x ) { write (x); putchar (' '); }\n\n\tinline void wln ( ll x ) { write (x); putchar ('\\n'); }\n\n\tinline void wlnn ( ll x, ll y ) { wrn (x), wln (y); }\n\n}\n\nusing IO::wln;\nusing IO::read;\n\nnamespace Segment_Tree {\n\t\n\t#define mid ((l + r) >> 1)\n\t\n\tll root = 0;\n\tll cnt = 0, T[N << 5], S[N << 5], ls[N << 5], rs[N << 5];\n\t\n\tinline void pushUp ( ll p, ll l, ll r ) {\n\t\tif (T[p]) S[p] = r - l + 1;\n\t\telse if (l == r)  S[p] = 0;\n\t\telse S[p] = S[ls[p]] + S[rs[p]];\n\t}\n\t\n\tinline void Update ( ll &p, ll l, ll r, ll ul, ll ur, ll k ) {\n\t\tif (!p) p = ++cnt;\n\t\tif (l >= ul && r <= ur) \n\t\t\treturn (void) (T[p] += k, pushUp (p, l, r));\n\t\tif (mid >= ul) Update (ls[p], l, mid, ul, ur, k);\n\t\tif (mid < ur)  Update (rs[p], mid + 1, r, ul, ur, k); \n\t\tpushUp (p, l, r);\n\t}\n\t\n}\n\nusing Segment_Tree::S;\nusing Segment_Tree::root;\nusing Segment_Tree::Update;\n\nnamespace Cesare {\n\t\t\n\tll n, tot = 0, Ans = 0;\n\t\n\tstruct Line {\n\t\tll yl, yr, H, f;\n\t\tinline bool operator < ( const Line &b ) { return H < b.H; }\n\t} K[N];\n\t\n\tvoid main() {\n\t\tn = read();\n\t\tfor (R int i = 1, l, r, h; i <= n; ++i) {\n\t\t\tl = read(), r = read(), h = read();\n\t\t\tK[++tot] = (Line) { 1, h, l, 1 };\n\t\t\tK[++tot] = (Line) { 1, h, r, -1 };\n\t\t}\n\t\tsort (K + 1, K + tot + 1);\n\t\tUpdate (root, 1, 1e9, K[1].yl, K[1].yr, K[1].f);\n\t\tFor ( i, 2, tot ) {\n\t\t\tAns += (K[i].H - K[i - 1].H) * S[1];\n\t\t\tUpdate (root, 1, 1e9, K[i].yl, K[i].yr, K[i].f);\n\t\t} wln (Ans), exit (0);\n\t}\n\t\n} \n\nint main() \n{\n\treturn Cesare::main(), 0;\n}\n\n/*\n\n*/\n\n\n\n```",
        "postTime": 1561546591,
        "uid": 104379,
        "name": "Cesare",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u4e00\u9053\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811+\u79bb\u6563\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u79bb\u6563\u6210\u4e09\u4e2a\u70b9\uff1aa\uff0cb\uff0cb-1\uff08\u9898\u76ee\u91cc\u8981\u6c42\u6539\u53d8\u7684\u533a\u95f4\u4e3a[a_i,b_i)\u5373[a_i,b_i-1]\uff09\u3002\u7136\u540e\u6309\u7167\u5e38\u89c4\u7684\u79bb\u6563\u5316\u5c31\u53ef\u4ee5\u4e86\u3002b\u8fd9\u4e2a\u70b9\u662f\u5224\u65ad\u662f\u5426\u5728b\u8fd9\u4e2a\u70b9\u9ad8\u5ea6\u4e3a0\uff0c\u4ee5\u9632\u52a0\u591a\u4e86\u3002\u8be6\u7ec6\u7684\u5728\u4e0b\u9762\u4ee3\u7801\u5904\u89e3\u91ca\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define ls(x) x<<1\n#define rs(x) x<<1|1\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+1;\nll ans[N<<2],tag[N<<2],sum,last,pos;\nint m,n,t,size;\nstruct node{\n    int x,y,h;\n    bool operator<(const node b)const\n    {\n        return h<b.h;\n    }\n}e[N];int a[N<<1];\n\ntemplate<typename T>\ninline void re(T &N)\n{\n    char c; while((c=getchar())< '0'||c> '9');\n    N=c-'0';while((c=getchar())>='0'&&c<='9')N=N*10+c-'0';\n}\ninline void f(int p,int l,int r,int k)\n{\n    ans[p]=k;tag[p]=k;\n}\ninline void push_down(int p,int l,int r)\n{\n    if(tag[p])\n    {\n        int mid=(l+r)>>1;\n        f(ls(p),l,mid,tag[p]);\n        f(rs(p),mid+1,r,tag[p]);\n        tag[p]=0;\n    }\n}\nvoid update(int p,int l,int r,int x,int y,int k)\n{\n    if(x<=l&&r<=y){ans[p]=k;tag[p]=k;return;}\n    push_down(p,l,r);\n    int mid=(l+r)>>1;\n    if(x<=mid)update(ls(p),l,mid,x,y,k);\n    if(mid< y)update(rs(p),mid+1,r,x,y,k);\n}\nll  query(int p,int l,int r,int x,int y)\n{\n    ll s=0;\n    if(x<=l&&r<=y)return ans[p];\n    push_down(p,l,r);\n    int mid=(l+r)>>1;\n    if(x<=mid)s+=query(ls(p),l,mid,x,y);\n    if(mid <y)s+=query(rs(p),mid+1,r,x,y);\n    return s;\n}\nint main()\n{\n    //freopen(\"data.txt\",\"r\",stdin);\n    re(n);\n    for(int i=1;i<=n;i++)re(e[i].x),re(e[i].y),re(e[i].h),\n    a[++t]=e[i].x,a[++t]=e[i].y-1,a[++t]=e[i].y,e[i].y--;\n    sort(a+1,a+3*n+1);sort(e+1,e+n+1);//\u5bf9\u9ad8\u5ea6\u8fdb\u884csort\u65b9\u4fbf\u4ece\u5c0f\u5230\u5927\u66f4\u65b0\u533a\u95f4\n    size=unique(a+1,a+3*n+1)-a-1;//unique\u53bb\u91cd\u51fd\u6570\n    for(int i=1;i<=n;i++)\n    {\n        int x=lower_bound(a+1,a+size+1,e[i].x)-a;//lower_bound\u51fd\u6570\u627e\u5230\u503c\n        int y=lower_bound(a+1,a+size+1,e[i].y)-a;\n        update(1,1,size,x,y,e[i].h);\n    }\n    last=query(1,1,size,1,1);pos=1;\n    for(int i=2;i<=size;i++)\n    {\n        ll x=query(1,1,size,i,i);\n        if(x!=last)sum+=(a[i]-a[pos])*last,last=x,pos=i;//\u8fd9\u91cc\u91c7\u53d6\u8d2a\u5fc3\u505a\u6cd5\uff0c\u5982\u679c\u9047\u5230\u9ad8\u5ea6\u4e0d\u4e00\u6837\u7684\u518d\u66f4\u65b0\u7b54\u6848\n    }\n    printf(\"%lld\\n\",sum);\n    return 0;\n}\n```",
        "postTime": 1534256681,
        "uid": 89367,
        "name": "913887524gsd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\n\n\u56e0\u4e3a\u662f\u5c06\u6bd4x\u5c0f\u7684\u53d8\u6210x,\u6240\u4ee5\u76f8\u5f53\u4e8e\u5c06\u64cd\u4f5c\u4e2d\u7684x\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,\u7136\u540e\u6309\u6392\u597d\u7684\u987a\u5e8f\u5bf9\u533a\u95f4\u4fee\u6539\u6c42\u548c,\u7531\u4e8e\u533a\u95f4\u6bd4\u8f83\u5927,\u52a8\u6001\u5f00\u70b9\u5373\u53ef\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\n#define MAXM 40005\ntypedef long long ll;\n\nint WA;\n\nstruct TLE{\n\tint CE,RE,PE;\n\tbool operator <(const TLE OLE)const{\n\t\treturn PE<OLE.PE;\n\t}\n} MLE[MAXM];\n\nstruct SE{\n\tll TAG,SUM;\n\tSE *lc,*rc;\n\tSE(){ TAG=0,SUM=0,lc=NULL,rc=NULL; }\n};\nSE *ROOT;\n\ninline void Running(SE *&u){\n\tu->SUM=0;\n\tif (u->lc!=NULL) u->SUM+=u->lc->SUM;\n\tif (u->rc!=NULL) u->SUM+=u->rc->SUM;\n}\n\ninline void Compiling(SE *&u,int SIZE){\n\tif (u->TAG!=0){\n\t\tif (u->lc==NULL) u->lc=new SE();\n\t\tu->lc->TAG=u->TAG;\n\t\tu->lc->SUM=u->TAG*(SIZE-(SIZE>>1));\n\t\tif (u->rc==NULL) u->rc=new SE();\n\t\tu->rc->TAG=u->TAG;\n\t\tu->rc->SUM=u->TAG*(SIZE>>1);\n\t\tu->TAG=0;\n\t}\n}\n\ninline void Judging(int lx,int rx,ll x,SE *&u=ROOT,int l=1,int r=1000000000){\n\tif (u==NULL) u=new SE();\n\tif (l==lx && r==rx){\n\t\tu->TAG=x;\n\t\tu->SUM=x*(r-l+1);\n\t\treturn;\n\t}\n\tCompiling(u,r-l+1);\n\tint mid=(r-l>>1)+l;\n\tif (rx<=mid) Judging(lx,rx,x,u->lc,l,mid);\n\telse if (mid<lx) Judging(lx,rx,x,u->rc,mid+1,r);\n\telse Judging(lx,mid,x,u->lc,l,mid),Judging(mid+1,rx,x,u->rc,mid+1,r);\n\tRunning(u);\n}\n\nint main(){\n\tscanf(\"%d\",&WA);\n\tfor (int AC=1;AC<=WA;AC++){\n\t\tscanf(\"%d%d%d\",&MLE[AC].CE,&MLE[AC].RE,&MLE[AC].PE);\n\t}\n\tstd::sort(MLE+1,MLE+WA+1);\n\tfor (int AC=1;AC<=WA;AC++){\n\t\tJudging(MLE[AC].CE,MLE[AC].RE-1,MLE[AC].PE);\n//\t\tprintf(\"%d %d %d\\n\",MLE[AC].CE,MLE[AC].RE-1,MLE[AC].PE);\n\t}\n\tprintf(\"%lld\\n\",ROOT->SUM);\n\treturn 0;\n}\n```",
        "postTime": 1532429634,
        "uid": 26166,
        "name": "\u6309Ctrl\u52a0w\u4f1aAC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "#### Solution\n\u3000\u3000\u8fd9\u4e2a\u9898\u6211\u7528\u4e86\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u4f46\u662f\u975e\u5e38\u597d\u5199\u7684\u7ebf\u6bb5\u6811.\u6709\u591a\u66b4\u529b\u5462?\u6807\u8bb0\u6839\u672c\u4e0d\u4e0b\u653e, \u67e5\u8be2\u662f\u5355\u70b9\u67e5\u8be2, \u5e78\u597d\u8fd9\u9053\u9898\u53ea\u6709\u4e00\u6b21\u67e5\u8be2\u2026\u2026\n\n\u3000\u3000\u9996\u5148\u79bb\u6563\u5316\u662f\u5c11\u4e0d\u4e86\u7684, \u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\n```c++\nstruct Query{\n    int L,R,l,r,s;\n    void read(){scanf(\"%d%d%d\",&l,&r,&s);}\n}f[N];\n/*****************/\n\tfor(int i=1;i<=n;++i){\n\t\tf[i].read();\n        sor[++cnt]=f[i].l,sor[++cnt]=f[i].r;\n\t}\n    sort(sor+1,sor+cnt+1);\n    for(int i=1;i<=cnt;++i){\n        if(!m.count(sor[i]))\n            m[sor[i]]=++tot,Rnk[tot]=sor[i];\n    }\n```\n\u3000\u3000\u5efa\u7acb\u7ebf\u6bb5\u6811, \u4f46\u662f\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u5b9e\u9645\u4e0a\u662f\u4ee3\u8868\u8fd9\u79bb\u6563\u540e\u7684\u4e00\u4e2a\u6700\u5c0f\u7684\u533a\u95f4.\n\n\u3000\u3000\u7136\u540e\u4e00\u4e2a\u70b9\u7684\u6807\u8bb0\u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c.\u6240\u4ee5\u66f4\u65b0\u4e00\u4e2a\u533a\u95f4\u7684\u590d\u6742\u5ea6\u53ea\u6709$O(log_2 N)$.\n\n\u3000\u3000\u8fd9\u6837\u975e\u5e38\u597d\u5b9e\u73b0\u4f46\u662f\u574f\u5904\u662f\u65e0\u6cd5\u533a\u95f4\u67e5\u8be2, \u56e0\u4e3a\u67e5\u8be2\u4e00\u4e2a\u70b9\u7684\u503c\u65f6\u9700\u8981\u4ece\u6811\u6839\u67e5\u8be2\u5230\u53f6\u5b50\u8282\u70b9\u624d\u80fd\u786e\u5b9a\u8fd9\u4e2a\u70b9\u7684\u503c, \u56e0\u6b64\u6bcf\u6b21\u67e5\u8be2\u4e3a$O(log_2 N)$, \u6709n\u4e2a\u70b9, \u4e00\u6b21\u67e5\u8be2\u7684\u603b\u590d\u6742\u5ea6\u4e3a$O(Nlog_2 N)$.\u4f46\u662f\u53d1\u73b0N\u7684\u503c\u6700\u5927\u5230$80000$\uff08\u8003\u8651\u6bcf\u4e2a\u533a\u95f4\u4e92\u76f8\u4e0d\u76f8\u4ea4\uff09, \u56e0\u6b64\u4e5f\u53ef\u4ee5\u63a5\u53d7.\n#### Code\n```c++\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#include<map>\n#define N 200005\nusing namespace std;\n\n\nint sor[N],cnt,tot;\nint Rnk[N];\nmap<int,int>m;\n\n    struct Node{\n        int f;Node *ls,*rs;\n        Node(){ls=NULL,rs=NULL;}\n        void update(){f=ls->f+rs->f;}\n    }pool[N<<1];\n    Node* new_Node(){\n        static int cnt=0;\n        return &pool[cnt++];\n    }\n    void build(int l,int r,Node* now){\n        if(l==r)return ;\n        int mid=(l+r)>>1;\n        now->ls=new_Node();now->rs=new_Node();\n        build(l,mid,now->ls);\n        build(mid+1,r,now->rs);\n        now->update();\n    }\n  void modify(int l,int r,int L,int R,int s,Node* now){\n        int mid=(l+r)>>1;\n        if(L<=l&&r<=R){\n            now->f=max(now->f,s);return ;\n        }\n        if(L<=mid)\n            modify(l,mid,L,R,s,now->ls);\n        if(R>mid)\n            modify(mid+1,r,L,R,s,now->rs);\n    }\n    int query(int l,int r,int k,Node *now){\n        if(l==r)return now->f;\n        int mid=(l+r)>>1;\n        if(k<=mid)return max(now->f,query(l,mid,k,now->ls));\n        if(k>mid)return max(now->f,query(mid+1,r,k,now->rs));\n    } \n\nstruct Query{\n    int L,R,l,r,s;\n    void read(){scanf(\"%d%d%d\",&l,&r,&s);}\n}f[N];\n\nmain(){\n    int n,l,r,s;Node* root=new_Node();\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){f[i].read();sor[++cnt]=f[i].l,sor[++cnt]=f[i].r;}\n    sort(sor+1,sor+cnt+1);\n    for(int i=1;i<=cnt;++i){\n        if(!m.count(sor[i]))\n            m[sor[i]]=++tot,Rnk[tot]=sor[i];\n    }\n    build(1,tot-1,root);\n    map<int,int>::iterator it;\n    for(int i=1;i<=n;++i){\n        it=m.find(f[i].l),f[i].L=it->second,\n        it=m.find(f[i].r),f[i].R=it->second;\n    }\n    for(int i=1;i<=n;++i)\n        modify(1,tot-1,f[i].L,f[i].R-1,f[i].s,root);\n    long long ans=0,tm;\n    for(int i=1;i<tot;++i){\n        tm=(long long)query(1,tot-1,i,root)*(Rnk[i+1]-Rnk[i]);\n        ans+=tm;\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1529415752,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u6ca1\u6ce8\u610f\u5230\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4...\u5361\u4e86\u534a\u5929\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5f88\u597d\u7684\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u90a3\u4e48\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u5bf9\u4e8e\u533a\u95f4max\u5f88\u660e\u663e\u53ef\u4ee5\u968f\u4fbf\u7ef4\u62a4\u3002\n\n\u91cd\u70b9\u5728\u4e8e\u6570\u636e\u8303\u56f41e9\uff0c\u8003\u8651\u79bb\u6563\u5316\uff0c\n\n\u82e5\u4ee4tru[i]\u8868\u793a\u628a\u4e00\u4e2a\u6570\u79bb\u6563\u6210i\u8fd9\u4e2a\u6570\u4e0e\u4ed6\u4e0a\u4e00\u4e2a\u6570\u7684\u5dee\u503c\uff0c\n\n\u90a3\u4e48\u53ea\u7528\u5728\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u518d\u4e58\u4ee5\u8fd9\u4e2a\u503c\u5373\u53ef\u3002\n\n\u4f46\u662f\u7565\u5fae\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u4f1a\u628a\u5176\u5de6\u7aef\u70b9\u6240\u5728\u4f4d\u7f6e\u7b97\u9519\uff08\u56e0\u4e3a\u53ea\u6709\u5355\u4e00\u8282\u70b9\uff09\n\n\u89e3\u51b3\u4e5f\u5f88\u7b80\u5355\uff0c\u53ea\u7528\u628a\u5176\u5de6\u7aef\u70b9\u7684\u5de6\u8fb9\u4e00\u4e2a\u70b9\u62c9\u5165\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n\n    \n    \n        \n        \n        \n    \n        \n        \n    \n        \n        \n    \n    \n```cpp\n    #include<bits/stdc++.h>\n    #define eps 1e-9\n    #define rep(i,x,y) for(register int i = x ; i <= y; ++ i)\n    #define repd(i,x,y) for(register int i = x ; i >= y; -- i)\n    #define size(x) ((int)s[x].size())\n    #define lowbit(x) (x & - x)\n    using namespace std;\n    typedef long long ll; \n    template<typename T>inline void read(T&x)\n    {\n        x = 0;char c;int sign = 1;\n        do { c = getchar(); if(c == '-') sign = -1; }while(!isdigit(c));\n        do { x = x * 10 + c - '0'; c = getchar(); }while(isdigit(c));\n        x *= sign;\n    }\n    const int N = 4e4 + 500, M = 2e5+500; \n    int n,tot,cnt,t[M],id[M],tru[M];\n    struct Str { int l,r,w; }a[N];\n    map<int,int>mp;\n    struct Segment_tree\n    {\n        int tree[M << 2],val[M << 2];\n        inline void down(int id)\n        {\n            val[id << 1] = max(val[id << 1],val[id]);\n            val[id << 1|1] = max(val[id << 1|1],val[id]);\n        }\n        void update(int id,int L,int R,int l,int r,int w)\n        {\n            if( L == l && R == r) { val[id] = max(val[id],w);return; }\n            down(id);\n            int mid = L + R >> 1;\n            if(r <= mid) update(id << 1,L,mid,l,r,w);\n            else if(l > mid) update(id << 1|1,mid + 1,R,l,r,w);\n            else update(id<<1,L,mid,l,mid,w),update(id<<1|1,mid + 1,R,mid + 1,r,w);\n        }\n        ll cal(int id,int L,int R)\n        {\n            if(L == R) return (ll)val[id] *tru[L];\n            down(id);\n            int mid = L + R >> 1;\n            return cal(id<<1,L,mid) + cal(id<<1|1,mid + 1,R);\n        }\n    }seg;\n    int main()\n    {\n        read(n);\n        rep(i,1,n)\n        {\n            int l,r,w;\n            read(a[i].l);read(a[i].r);read(a[i].w); a[i].r--;\n            t[++tot] = a[i].l;t[++tot] = a[i].r;t[++tot] = a[i].l - 1;\n        }\n        sort(t + 1,t + 1 + tot);\n        rep(i,1,tot)\n            if(t[i - 1] != t[i]) \n            {\n                tru[++cnt] = t[i] - t[i - 1];\n                mp[t[i]] = cnt;\n            }\n        rep(i,1,n)\n            seg.update(1,1,cnt,mp[a[i].l],mp[a[i].r],a[i].w);\n        cout << seg.cal(1,1,cnt) << endl;\n        return 0;\n    }\n\n```",
        "postTime": 1516333130,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u8d34\u4e00\u4e2asplay\u7248\u9898\u89e3\uff0c\u601d\u8def\u8ddf\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u7528splay\u6765\u7ef4\u62a4\u6700\u5927\u503c\uff08\u7528\u7ebf\u6bb5\u6811\u7684\u8bdd\u5927\u591a\u6570\u65f6\u5019\u90fd\u8981\u8bbf\u95ee\u53f6\u5b50\u8282\u70b9\u6765\u4fee\u6539\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff09\uff0c\u9047\u5230\u4e00\u680b\u697c\u623f\u5c31\u628a\u5176\u9ad8\u5ea6\u52a0\u5230splay\u91cc\uff0c\u79bb\u5f00\u4e00\u680b\u697c\u623f\u5c31\u5220\u9664\u5176\u9ad8\u5ea6\uff0c\u6bcf\u5f53\u505a\u8fd9\u4e24\u6b21\u64cd\u4f5c\u65f6ans+=\u5f53\u524d\u6700\u5927\u9ad8\u5ea6\\*\uff08\u5f53\u524d\u4f4d\u7f6e-\u4e0a\u4e00\u6b21\u64cd\u4f5c\u4f4d\u7f6e\uff09\u3002\u6700\u540e\u8bb0\u5f97\u7528long long\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct data\n{\n    long long wz,key,hi;\n}f[100000];\nlong long i,j,k,t,m,n,p,ans,last;\nlong long fa[100000],ch[100000][2],key[100000],cnt[100000],siz[100000],sz,root;\nbool comp(data a,data b)\n{\n    return (a.wz<b.wz);\n}\nvoid clear(int x)\n{\n    ch[x][0]=ch[x][1]=fa[x]=cnt[x]=key[x]=siz[x]=0;\n}\nint getson(int x)\n{\n    return ch[fa[x]][1]==x;\n}\nvoid update(int x)\n{\n    siz[x]=cnt[x];\n    if (ch[x][0]) siz[x]+=siz[ch[x][0]];\n    if (ch[x][1]) siz[x]+=siz[ch[x][1]];\n}\nvoid create(int x)\n{\n    sz++;\n    ch[sz][0]=ch[sz][1]=fa[sz]=0;\n    key[sz]=x;\n    cnt[sz]=1;\n    siz[sz]=1;\n}\nvoid rotate(int x)\n{\n    int father=fa[x],fafa=fa[father],k=getson(x);\n    ch[father][k]=ch[x][k^1]; fa[ch[father][k]]=father;\n    ch[x][k^1]=father; fa[father]=x;\n    fa[x]=fafa;\n    if (fafa)\n        ch[fafa][ch[fafa][1]==father]=x;\n    update(father); update(x);\n}\nvoid splay(int x)\n{\n    for (int father;father=fa[x];rotate(x))\n        if (fa[father])\n            rotate(getson(x)==getson(father)?father:x);\n    root=x;\n}\nvoid insert(int x)\n{\n    if (!root) create(x),root=sz;\n    else\n    {\n        int now=root,father=0;\n        while (1)\n        {\n            if (key[now]==x)\n            {\n                cnt[now]++;\n                update(now); update(father);\n                splay(now);\n                break;\n            }\n            father=now;\n            now=ch[father][x>key[father]];\n            if (!now)\n            {\n                create(x);\n                fa[sz]=father;\n                ch[father][x>key[father]]=sz;\n                update(father);\n                splay(sz);\n                break;\n            }\n        }\n    }\n}\nint ma()\n{\n    int now=root;\n    while (ch[now][1]) now=ch[now][1];\n    return key[now];\n}\nint findpos(int x)\n{\n    int now=root,ans=0;\n    while (1)\n    {\n        if (x<key[now])\n            now=ch[now][0];\n        else\n        {\n            ans+=ch[now][0]?siz[ch[now][0]]:0;\n            if (x==key[now])\n            {\n                splay(now);\n                return ans+1;\n            }\n            ans+=cnt[now];\n            now=ch[now][1];\n        }\n    }\n}\nint pre()\n{\n    int now=ch[root][0];\n    while (ch[now][1])\n        now=ch[now][1];\n    return now;\n}\nvoid del(int x)\n{\n    int t=findpos(x);\n    if (cnt[root]>1)\n    {\n        cnt[root]--;\n        update(root);\n        return;\n    }\n    if (!ch[root][0] && !ch[root][1])\n    {\n        clear(root);\n        root=0;\n        return;\n    }\n    if (!ch[root][1])\n    {\n        int temp=root;\n        root=ch[root][0];\n        fa[root]=0;\n        clear(temp);\n        return;\n    }\n    else\n    if (!ch[root][0])\n    {\n        int temp=root;\n        root=ch[root][1];\n        fa[root]=0;\n        clear(temp);\n        return;\n    }\n    int prel=pre(),temp=root;\n    splay(prel);\n    fa[ch[temp][1]]=root;\n    ch[root][1]=ch[temp][1];\n    clear(temp);\n    update(root);\n}\nint main()\n{\n //   freopen(\"1.in\",\"r\",stdin);\n  //  freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%lld\",&n);\n    for (i=1;i<=n;i++) {scanf(\"%lld%lld%lld\",&f[2*i-1].wz,&f[2*i].wz,&f[2*i-1].hi); f[2*i-1].key=1; f[2*i].key=-1; f[2*i].hi=f[2*i-1].hi;}\n    sort(f+1,f+2*n+1,comp);\n    insert(f[1].hi);\n    for (i=2;i<=2*n;i++)\n    {\n        ans+=ma()*(f[i].wz-f[i-1].wz);\n        if (f[i].key==-1) del(f[i].hi); else insert(f[i].hi);\n    }\n    printf(\"%lld\",ans);\n  //  fclose(stdin);\n  //  fclose(stdout);\n    return 0;\n}\n```",
        "postTime": 1499321886,
        "uid": 19049,
        "name": "Mogician",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u672c\u5f31\u9e21\u8d21\u732e\u4e00\u4e2a\u6bd4\u8f83\u5783\u573e\u7684\u505a\u6cd5\u3002\n\n\u5176\u5b9e\u8fd9\u9898\u4e5f\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u6bd4\u8f83\u201d\u6807\u51c6\u201d\u7684\u505a\u6cd5\u662f\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf\u6c42\u77e9\u5f62\u9762\u79ef\u5e76\uff0c\u4f46\u8fd9\u9898\u662f\u7b80\u5316\u8fc7\u4e86\u7684\u3002\n\n\uff08\u5efa\u8bae\u5927\u5bb6\u5b66\u4e60\u4e0b\u7ebf\u6bb5\u6811\u626b\u63cf\u7ebf\uff0c\u767e\u5ea6\u5373\u53ef\uff0c\u7ecf\u5178\u4f8b\u9898HDU1542)\n\n\u7b80\u5316\u8fc7\u662f\u56e0\u4e3a\u5728\u7eb5\u5750\u6807\u4e0a\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u90a3\u4e48\u7ef4\u62a4\u4e00\u4e2a\u9ad8\u5ea6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u5c31\u53d1\u73b0\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5e94\u8be5\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u6c42\u6700\u5927\u503c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\u5230\u6811\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u603b\u4e4b\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u90fd\u662fO(log n)\u3002\n\n\u56e0\u4e3a\u6211\u6bd4\u8f83\u61d2\uff0c\u5c31\u76f4\u63a5\u7528\u4e86STL\u91cc\u9762\u7684multiset\u7ef4\u62a4\u9ad8\u5ea6\u3002\uff08\u8003\u8651\u5230\u53ef\u80fd\u6709\u91cd\u590d\u7684\u9ad8\u5ea6\uff09\n\n\u7136\u540e\u628a\u4e00\u4e2a\u77e9\u5f62\u62c6\u6210\u4e24\u6761\u7ebf\u6bb5\uff0c\u6309\u6a2a\u5750\u6807\u6392\u5e8f\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u4e00\u904d\uff0c\u9047\u5230\u5de6\u8fb9\u5c31\u628a\u8fd9\u4e2a\u9ad8\u5ea6\u63d2\u5165\u96c6\u5408\uff0c\u9047\u5230\u53f3\u8fb9\u5c31\u628a\u5b83\u8e22\u51fa\u53bb\uff0c\u7b54\u6848\u6bcf\u6b21\u52a0\u4e0a\u6700\u5927\u9ad8\u5ea6\u4e58\u4e0a\u4e24\u4e2a\u8282\u70b9\u95f4\u7684x\u8ddd\u79bb\u3002\n\n\u6ce8\u610f\u7b54\u6848\u8981\u5f00long long!!\u505a\u52a0\u6cd5\u7684\u65f6\u5019\u4e5f\u8981\u8f6c\u4e00\u4e0b\uff0c\u8981\u4e0d\u5c31\u662f\u871c\u6c4160\u5206\u4e86\u3002\n\n\u6ce8\u610f\u5f00\u8282\u70b9\u6570\u7ec4\u8981\u5f002n\u3002\n\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n\n\n\n\n    \n    \n\n    \n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <set>\nusing namespace std;\n#define maxn 80005\ntypedef multiset<int, greater<int> > msi;\ntypedef long long LL;\nstruct seg {\n    int x, h, d;\n    seg() {}\n    seg(int a, int b, int c) : x(a), h(b), d(c) {}\n    bool operator < (const seg& rhs) const\n    {\n        return x < rhs.x;\n    }\n} s[maxn];\nint main()\n{\n    int n, a, b, k, i, p = 0;\n    LL ans = 0;\n    msi h;\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; ++i) {\n        scanf(\"%d%d%d\", &a, &b, &k);\n        s[p++] = seg(a, k, 1);\n        s[p++] = seg(b, k, 0);\n    }\n    sort(s, s + p);\n    h.insert(0);\n    for (i = 0; i < p - 1; ++i) {\n        if (s[i].d)\n            h.insert(s[i].h);\n        else {\n            msi::iterator it = h.find(s[i].h);\n            h.erase(it);\n        }\n        ans += LL(*h.begin()) * (s[i + 1].x - s[i].x);\n    }\n    printf(\"%lld\\n\", ans);\n}\n```",
        "postTime": 1495946856,
        "uid": 35484,
        "name": "__hao__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u5176\u5b9e\u4e0d\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u8fd9\u4e48\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u53ef\u4ee5\u7528\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u5b58\u6bcf\u4e00\u4e2a\u77e9\u5f62\u7684\u8d77\u59cb\u70b9\uff0c\u4ece\u5de6\u5230\u53f3\u987a\u63a8\u8fc7\u53bb\uff08\u7a0b\u5e8f\u5f88\u77ed\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct line{\n    long long k,h,i;\n    bool operator >(line b)const{\n        return h>b.h;\n    }\n    bool operator <(line b)const{\n        return h<b.h;\n    }\n        //\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u65b9\u4fbf\u52a0\u8fdb\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n};\nint cmp(line a,line b){\n    return a.i<b.i;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    int n,i,j;\n    cin>>n;\n    line p[2*n+1];\n    for(i=1;i<=n;i++){\n        long long a,b,h;\n        cin>>a>>b>>h;\n        p[2*i-1].k=b;\n        p[2*i-1].h=h;\n        p[2*i-1].i=a;\n        p[2*i].k=0;\n        p[2*i].h=0;\n        p[2*i].i=b;\n    }\n//\u4ee5\u70b9\u4e3a\u5355\u4f4d\u5b58\u653e\u77e9\u5f62\uff0ci\uff0ck\u5206\u522b\u4ee3\u8868\u8d77\u59cb\u548c\u7ec8\u6b62\u4f4d\u7f6e\u3002h\u4ee3\u8868\u9ad8\u5ea6\u3002\n    sort(p+1,p+2*n+1,cmp);\n    priority_queue<line>l1;\n    l1.push(p[1]);\n    unsigned long long sum=0;\n    int c;\n    for(i=2;i<=2*n;i++){\n        while(!l1.empty()&&l1.top().k<p[i].i){\n            l1.pop();\n        }\n//\u628a\u4e0d\u5728\u8303\u56f4\u5185\u7684\u77e9\u5f62\u53bb\u9664\u3002\n        if(!l1.empty()){\n            c=p[i].i-p[i-1].i;\n            sum+=c*l1.top().h;\n        }\n        if(p[i].h!=0){\n            l1.push(p[i]);\n        }\n    }\n    cout<<sum;\n    return 0;\n}\n```",
        "postTime": 1491052443,
        "uid": 20337,
        "name": "Only_My_Whisper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    },
    {
        "content": "\u8ba9\u6211\u6765\u8d34\u4e00\u4e2a\u9898\u89e3~~~\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u6765\u60f3\u2014\u2014\u4ece1~2\uff0c2~3\uff0c3~4\u8fd9\u6837\u6bcf\u4e2a\u5355\u4f4d\u957f\u5ea6\u4e0a\u90fd\u6709\u6700\u9ad8\u9ad8\u5ea6\uff0c\u90a3\u4e48ans=minp\\*h[minp]+(minp+1)\\*h[minp+1]+\u2026\u2026+(maxp-1)\\*h[maxp-1]+maxp\\*h[maxp]\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0minp\u548cmaxp\u7684\u8de8\u5ea6\u592a\u5927\u4e86\uff0c\u9ad8\u8fbe10^9\uff0c\u5b8c\u5168\u627f\u53d7\u4e0d\u4f4f\u3002\u4f46\u662f\u6211\u4eec\u5148\u4e0d\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u600e\u4e48\u6765\u89e3\uff1f\u6bcf\u4e00\u6761\u7ebf\u6bb5\u90fd\u6709\u81ea\u5df1\u7684\u6700\u9ad8\u9ad8\u5ea6\uff0c\u4e5f\u5c31\u662f\u6743\u503c\u5457\u3002\u90a3\u4e48\u4e0d\u5c31\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684cover\u57df\u5417\uff01\u90a3\u4e48\u8fd9\u5c31\u597d\u529e\u4e86\uff1a\u9020\u4e00\u68f5minp~maxp\u7684\u7ebf\u6bb5\u6811\uff0cL\uff0cR\u57df\u5206\u522b\u8868\u793a\u5176\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0cc\u8868\u793a\u5f53\u524d\u7ebf\u6bb5\u4e0a\u7684\u6700\u9ad8\u9ad8\u5ea6\u662f\u591a\u5c11\u3002\u90a3\u4e48\u6211\u4eec\u63a5\u7740\u8003\u8651\u79bb\u6563\u3002\u5982\u4f55\u79bb\u6563\u5462\uff1f\u6211\u4eec\u8981\u60f3\u5230\uff0c\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u7684\u6027\u8d28\u5230\u6700\u540e\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u65e0\u975e\u5c31\u662f\u4e00\u4e2a\u4e2a\u5206\u754c\u70b9\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u62e5\u6709\u4e862\\*n\u4e2a\u5206\u754c\u70b9\u3002\u6211\u4eec\u628a\u8fd9\u4e9b\u5206\u89e3\u70b9\u6392\u4e00\u8d9f\u5e8f\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u79bb\u6563\u540e\u7684\u5e8f\u53f7\u4e86\uff08ST\u6570\u7ec4\u91cc\u9762\u7684L\uff0cR\u5c31\u662f\u7528\u5e8f\u53f7\u6765\u6807\u8bb0\u7684\uff09\u3002Build\u6ca1\u4ec0\u4e48\uff0cAlter\u5462\uff1fAlter\u4fee\u6539\u533a\u95f4\u3002\u5982\u679c(ST[num].L>=lft&&ST[num].R<=rgt)\u5373\u5f53\u524d\u7ebf\u6bb5\u88ab\u76ee\u6807\u7ebf\u6bb5\u8986\u76d6\uff0c\u5219ST[num].c=max(ST[num].c,hgt)\u3002\u7136\u540e\u6211\u4eec\u5c31\u8981\u5206\u60c5\u51b5\u4fee\u6539\u533a\u95f4\u3002Seek\u5462\uff1f\u4e5f\u662f\u67e5\u8be2\u533a\u95f4\u3002\u4e0d\u8fc7\u6211\u4eec\u8981\u8fd4\u56de\u8c01\u7684cover\u57df\u5462\uff1f\u5f53\u7136\u662f\u5355\u8c03\u7ebf\u6bb5\u4e86\uff0c\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u7ebf\u6bb5\u4e0a\u7684\u9ad8\u5ea6\u552f\u4e00\uff0c\u4e0d\u4f1a\u53c2\u5dee\u4e0d\u9f50\u3002\u90a3\u4e48\u8fd4\u56de\u7684\u5e94\u8be5\u662f\u8fd9\u6bb5\u7ebf\u6bb5\u7684\u5b9e\u9645\u957f\u5ea6\\*\u9ad8\u5ea6\uff0c\u5373(a[ST[num].R]-a[ST[num].L])\\*ST[num].c\u3002\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd8\u662f\u6709\u95ee\u9898\uff1a\u6700\u540e2\u4e2a\u70b9TLE\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u95ee\u9898\u4e3b\u8981\u51fa\u5728(ST[num].L>=lft&&ST[num].R<=rgt)\u8eab\u4e0a\u3002\u6211\u4eec\u9700\u8981\u8c03\u7684\u6b21\u6570\u5b9e\u5728\u592a\u591a\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u638c\u63e1\u4e00\u4e2a\u6280\u5de7\u53eb\u505a\u201c\u5ef6\u8fdf\u4fee\u6539\u201d\u3002\u6240\u8c13\u5ef6\u8fdf\u4fee\u6539\uff0c\u5c31\u662f\u5f53\u524d\u505a\u4e2a\u6807\u8bb0\uff0c\u5148\u4e0d\u5411\u4e0b\u4f20\u9012\uff0c\u800c\u662f\u5728\u8be2\u95ee\u65f6\u987a\u4fbf\u4f20\u9012\u4e0b\u53bb\u3002\u6807\u51c6\u7684\u662fpushdown\u548cpushup\u3002\u4f46\u662f\u5bf9\u4e8e\u8fd9\u9898\u6709\u4e2a\u66f4\u5feb\u7684\u65b9\u6cd5\uff0c\u601d\u8def\u786e\u5b9e\u4e00\u6837\u7684\u2014\u2014\u6211\u4eec\u5728Alter\u91cc\u9762\u7684\u90a3\u4e00\u53e5\u8bdd\u6539\u6210\u2014\u2014if (ST[num].L>=lft&&ST[num].R<=rgt){ST[num].H=max(ST[num].H,hgt);return;}\u6211\u4eec\u8fd9\u4e2areturn\u5f88\u597d\u7684\u52a0\u5feb\u4e86\u6548\u7387\uff0c\u5373\u6211\u4eec\u53ea\u5728\u6700\u4e0a\u5c42\u5373\u6700\u65e9\u4fee\u6539\u7684\u5730\u65b9\u505a\u4e2a\u6807\u8bb0\uff0c\u6682\u65f6\u4e0d\u8981\u5411\u4e0b\u4f20\u3002\u5728Seek\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u5230\u5e95\u5c42\uff0c\u90a3\u4e48\u518d\u5411\u4e0b\u4f20\u9012\u4fe1\u606f\uff0c\u5373\u2014\u2014ST[num\\*2].c=max(ST[num\\*2].c,ST[num].c); ST[num\\*2+1].c=max(ST[num\\*2+1].c,ST[num].c);\u8fd9\u5c31\u5177\u6709\u4e86pushdown\u7684\u529f\u80fd\u3002\u90a3\u4e48\u73b0\u5728\uff0c\u8fd9\u4e2a\u6548\u7387\u5c31\u53d8\u7684\u5f88\u9ad8\u4e86\u3002\u8fd8\u6709\u8981\u6ce8\u610f\u6570\u636e\u7c7b\u578b\u54e6\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=40005;\nint n,len0,len1;\nint a[maxn*2],x[maxn],y[maxn],z[maxn];\nstruct segT{\n    int L,R,c;\n}ST[maxn*4*2];\ninline int read(){\n    int x=0; char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nvoid Build(int num,int lft,int rgt){\n    ST[num].L=lft,ST[num].R=rgt;\n    if (lft+1==rgt) ST[num].c=0;\n    else{\n        int mid=(lft+rgt)>>1;\n        Build(num*2,lft,mid);\n        Build(num*2+1,mid,rgt);\n    }\n}\nvoid Alter(int num,int lft,int rgt,int hgt){\n    if (ST[num].L>=ST[num].R) return;\n    if (ST[num].L>=lft&&ST[num].R<=rgt){ST[num].c=max(ST[num].c,hgt); return;}\n    int mid=(ST[num].L+ST[num].R)>>1;\n    if (rgt<=mid) Alter(num*2,lft,rgt,hgt);\n    else if (lft>=mid) Alter(num*2+1,lft,rgt,hgt);\n    else {Alter(num*2,lft,mid,hgt); Alter(num*2+1,mid,rgt,hgt);}\n}\nlong long Seek(int num,int lft,int rgt){\n    if (ST[num].L+1==ST[num].R) return (long long)ST[num].c*(a[ST[num].R]-a[ST[num].L]);\n    ST[num*2].c=max(ST[num*2].c,ST[num].c); ST[num*2+1].c=max(ST[num*2+1].c,ST[num].c);\n    int mid=(ST[num].L+ST[num].R)>>1;\n    if (rgt<=mid) return Seek(num*2,lft,rgt);\n    else if (lft>=mid) return Seek(num*2+1,lft,rgt);\n    else return Seek(num*2,lft,mid)+Seek(num*2+1,mid,rgt);\n}\nint BinFind(int x){\n    int L=1,R=n<<1;\n    while (L<=R){\n        int mid=(L+R)>>1;\n        if (a[mid]==x) return mid;\n        if (a[mid]>x) R=mid-1; else if (a[mid]<x) L=mid+1;\n    }\n}\nint main(){\n    n=read(); Build(1,1,n<<1);\n    for (int i=1; i<=n; i++){\n        x[i]=read(),y[i]=read(),z[i]=read();\n        a[(i<<1)-1]=x[i],a[i<<1]=y[i];\n    }\n    sort(a+1,a+1+(n<<1));\n    for (int i=1; i<=n; i++) x[i]=BinFind(x[i]),y[i]=BinFind(y[i]);\n    for (int i=1; i<=n; i++) Alter(1,x[i],y[i],z[i]);\n    printf(\"%lld\",Seek(1,1,n<<1));\n    return 0;\n}\n```",
        "postTime": 1486300913,
        "uid": 21158,
        "name": "pinkex",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2061 \u3010[USACO07OPEN]\u57ce\u5e02\u7684\u5730\u5e73\u7ebfCity Horizon\u3011"
    }
]