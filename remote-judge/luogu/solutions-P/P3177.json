[
    {
        "content": "\u8fd9\u9053\u9898\u7684\u9898\u89e3\u5df2\u7ecf\u76f8\u5f53\u591a\u4e86\uff0c\u4f46\u662f\u6211\u8ba4\u4e3a\u90fd\u6ca1\u6709\u5bf9\u672c\u9053\u9898\u505a\u4e00\u4e2a\u8db3\u591f\u6e05\u6670\u7684\u5256\u6790\uff0c\u5c24\u5176\u662f\u5bf9\u4e8eDP\u7684\u90e8\u5206\u3002\u6240\u4ee5\u6211\u5e0c\u671b\u6211\u7684\u8fd9\u7bc7\u9898\u89e3\u80fd\u591f\u5728\u4ee5\u524d\u5404\u4f4d\u7684\u9898\u89e3\u7684\u57fa\u7840\u4e0a\u66f4\u8fdb\u4e00\u6b65\uff0c\u8ba9\u5927\u5bb6\u6709\u4e00\u4e2a\u66f4\u6e05\u6670\u7684\u7406\u89e3\u3002\n\n\u5148\u5f3a\u8c03\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u7684\u7ec6\u8282\u975e\u5e38\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\uff01\n\n----\n\n\u9898\u76ee\u8981\u6c42\u5c06k\u4e2a\u70b9\u67d3\u6210\u9ed1\u8272\uff0c\u6c42\u9ed1\u70b9\u4e24\u4e24\u8ddd\u79bb\u53ca\u767d\u70b9\u4e24\u4e24\u8ddd\u79bb\uff0c\u4f7f\u4ed6\u4eec\u4e4b\u548c\u6700\u5927\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u8ddd\u79bb\u8f6c\u5316\u4e3a\u8def\u5f84\uff0c\u7136\u540e\u518d\u5c06\u8def\u5f84\u8def\u5f84\u62c6\u5206\u6210\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u5f88\u7b80\u5355\u5bf9\u5427\uff1f\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8ddd\u79bb\u8f6c\u5316\u4e3a\u8def\u5f84\u597d\u7406\u89e3\uff0c\u8def\u5f84\u62c6\u4e3a\u8fb9\u4e5f\u597d\u8bf4\uff0c\u53ef\u662f\u6bcf\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\u600e\u4e48\u8ba1\u7b97\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u6211\u4eec\u4efb\u610f\u53d6\u4e24\u4e2a\u540c\u8272\u7684\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u82e5\u4e0d\u5728\u8fd9\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u81ea\u7136\u4e0d\u8003\u8651\uff0c\u82e5\u662f\u5728\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u7684\u8ba1\u6570\u52a0\u4e00\u3002\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u4e00\u4e0b\uff0c\u82e5\u662f\u4e24\u4e2a\u70b9\u5728\u8fb9\u7684\u4e00\u4fa7\uff0c\u5219\u4e0d\u5f71\u54cd\u8ba1\u6570\uff0c\u82e5\u5728\u8fb9\u7684\u4e24\u4fa7\uff0c\u5219\u8fb9\u7684\u8ba1\u6570\u52a0\u4e00\u3002\u90a3\u4e48\u6211\u4eec\u63a8\u5e7f\u4e00\u4e0b\uff0c\u4fbf\u53ef\u4ee5\u5f97\u51fa\uff0c\u4e00\u6761\u8fb9\u7684\u4e24\u4fa7\u6bcf\u6709\u4e00\u5bf9\u540c\u8272\u70b9\uff0c\u8fd9\u6761\u8fb9\u5c31\u8981\u88ab\u7ecf\u8fc7\u4e00\u6b21\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\u7b49\u4e8e\u8fb9\u7684\u4e24\u4fa7\u540c\u8272\u70b9\u4e2a\u6570\u7684\u4e58\u79ef\u3002\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u6c42\u51fa\u6bcf\u6761\u8fb9\u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\n\n### $tot=k*(m-k)+(sz[v]-k)*(n-m-sz[v]+k)$\n\n$m$\u8868\u793a\u9898\u76ee\u8981\u6c42\u9009\u7684\u9ed1\u70b9\u6570\uff0c$sz[v]$\u8868\u793a\u5f53\u524d\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0c$k$\u8868\u793a\u5f53\u524d\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u5df2\u9009\u62e9\u7684\u9ed1\u70b9\u6570\n\n\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5f97\u51faDP\u65b9\u7a0b\u4e86\u3002\n\n### $f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]+tot*e[i].w)$\n\n\u5c31\u662f\u5173\u4e8e\u8fd9\u4e2a\u65b9\u7a0b\u8ba9\u6211\u5728\u505a\u9898\u7684\u65f6\u5019\u7ea0\u7ed3\u4e86\u597d\u4e45\uff0c\u4e3a\u4ec0\u4e48$k$\u6b63\u5e8f\u6392\u5217\u5c31\u662f\u5bf9\u7684\uff0c\u5012\u5e8f\u6392\u5217\u5c31\u662f\u9519\u7684\uff1f\u5df2\u6709\u7684\u9898\u89e3\u4e5f\u6ca1\u6709\u505a\u51fa\u5f88\u597d\u7684\u89e3\u91ca\uff0c\u6211A\u4e86\u4e4b\u540e\u4e5f\u6ca1\u6709\u7ee7\u7eed\u7814\u7a76\u3002\u591a\u4e8f\u4e86\u5e2e\u540c\u5b66\u627e\u6811\u5f62DP\u5165\u95e8\u9898\u65f6\u6211\u91cd\u65b0\u6ce8\u610f\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u4f7f\u6211\u5bf9\u8fd9\u4e00\u5947\u602a\u7684\u73b0\u8c61\u4ea7\u751f\u4e86\u7591\u60d1\u3002\u5f97\u5230\u4e86**DDOSvoid**\u5927\u4f6c\u7684\u5e2e\u52a9\u5e76\u8fdb\u884c\u4e86\u591a\u6b21\u8bd5\u9a8c\u540e\uff0c\u6211\u7ec8\u4e8e\u660e\u767d\u4e86\u5176\u4e2d\u7684\u539f\u56e0\uff0c\u4e5f\u8ba9\u6211\u5bf9\u8fd9\u9053\u9898\u7684\u7406\u89e3\u52a0\u6df1\u4e86\u6570\u5c42\u3002\n\n\u8fd9\u9053\u9898$k$\u524d\u51e0\u7bc7\u9898\u89e3\u5fc5\u987b\u6b63\u5e8f\u679a\u4e3e\u7684\u539f\u56e0\u5e76\u4e0d\u662f\u4ec0\u4e48\u8981\u7528$j-k$\u66f4\u65b0\u7b54\u6848\uff0c\u800c\u662f\u56e0\u4e3a\u6b63\u5e8f\u679a\u4e3e$k$\u662f\u4ece$0$\u5f00\u59cb\u7684\uff0c\u800c\u8fd9\u9053\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u5fc5\u987b\u8981\u5148\u5c06$k=0$\u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\u624d\u80fd\u6210\u7acb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u53ea\u662f\u4e2a\u5de7\u5408\uff0c$j$\u7684\u679a\u4e3e\u8981\u5012\u5e8f\u6ca1\u9519\uff0c\u4f46$k$\u7684\u679a\u4e3e\u5fc5\u987b\u6b63\u5e8f\u7b80\u76f4\u5c31\u662f\u65e0\u7a3d\u4e4b\u8c08\u3002\u8981\u60f3\u907f\u514d\u8fd9\u4e00\u60c5\u51b5\uff0c\u53ea\u9700\u63d0\u524d\u8f6c\u79fb\u4e00\u4e0b$k=0$\u7684\u60c5\u51b5\u5373\u53ef\u3002\n\n\u4e0b\u9762\u653e\u4ee3\u7801\uff08\u5185\u6709\u6ce8\u89e3\uff09\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc getchar\n#define maxn 2005\nusing namespace std;\n\ninline ll read(){\n\tll a=0;int f=0;char p=gc();\n\twhile(!isdigit(p)){f|=p=='-';p=gc();}\n\twhile(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n\treturn f?-a:a;\n}\n\nstruct ahaha{\n\tint w,to,next;\n}e[maxn<<1];int tot,head[maxn];\ninline void add(int u,int v,int w){\n\te[tot].w=w,e[tot].to=v,e[tot].next=head[u];head[u]=tot++;\n}\n\nint n,m,sz[maxn];\nll f[maxn][maxn];\nvoid dfs(int u,int fa){\n\tsz[u]=1;f[u][0]=f[u][1]=0;\n\tfor(int i=head[u];~i;i=e[i].next){\n\t\tint v=e[i].to;if(v==fa)continue;\n\t\tdfs(v,u);sz[u]+=sz[v];\n\t\tfor(int j=min(m,sz[u]);j>=0;--j){   //\u6b64\u5904\u5012\u5e8f\u679a\u4e3e\u662f\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u9009\u53d6\n\t\t\tif(f[u][j]!=-1)    //\u5728DP\u524d\u5e94\u5148\u52a0\u4e0a\u5f53\u524d\u5b50\u8282\u70b9\u7684\u5b50\u6811\u7eaf\u767d\u8272\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u4e0b\u9762\u4e5f\u5012\u5e8f\u679a\u4e3e\u7684\u524d\u63d0\n\t\t\t\tf[u][j]+=f[v][0]+(ll)sz[v]*(n-m-sz[v])*e[i].w;\n\t\t\tfor(int k=min(j,sz[v]);k;--k){\n\t\t\t\tif(f[u][j-k]==-1)continue;\n\t\t\t\tll val=(ll)(k*(m-k)+(sz[v]-k)*(n-m-sz[v]+k))*e[i].w;   //\u5f53\u524d\u60c5\u51b5\u4e0b\u8fde\u63a5\u5b50\u8282\u70b9\u7684\u8fb9\u7684\u8d21\u732e\n\t\t\t\tf[u][j]=max(f[u][j],f[u][j-k]+f[v][k]+val);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){memset(head,-1,sizeof head);\n\tn=read();m=read();\n\tif(n-m<m)m=n-m;\n\tfor(int i=1;i<n;++i){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w);add(v,u,w);\n\t}memset(f,-1,sizeof f);\n\tdfs(1,-1);\n\tprintf(\"%lld\",f[1][m]);\n\treturn 0;\n}\n```\n\n\u4ee5\u4e0a\u5c31\u662f\u672c\u9053\u9898\u7684\u9898\u89e3\uff0c\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u770b\u61c2\u4e86\u5462\u3002\u5982\u6709\u4e0d\u660e\u767d\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u63d0\u95ee\u3002",
        "postTime": 1539603360,
        "uid": 34530,
        "name": "\u5b50\u8c26\u3002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "HAOI\u7684\u9898\uff0c\u5199\u7684\u4eba\u5c31\u662f\u5c11\uff0c\u4e0d\u8fc7\u8fd9\u786e\u5b9e\u662f\u9053\u597d\u9898\uff0c\u6765\u9876\u4e00\u53d1\n\n\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5230\uff0cdp\u662f\u53ef\u505a\u7684\n\n\u72b6\u6001\u5f88\u5bb9\u6613\u60f3\u5230\uff0cdp[u][i]\u8868\u793a\u4ee5u\u4e3a\u8ddf\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u62e9i\u4e2a\u9ed1\u8282\u70b9\uff0c\u7684\u6700\u5927\u503c\n\n\u7136\u540e\u6211\u5c31\u4e0d\u4f1a\u505a\u4e86\uff0c \u53bb\u7f51\u4e0a\u770b\u4e86wmdcstdio\u795e\u7287\u7684\u9898\u89e3\n\n\u53d1\u73b0\u6211\u8fd9\u4e2a\u72b6\u6001\u5b9a\u4e49\u662f\u9519\u8bef\u7684\uff0c\u6b63\u786e\u7684\u72b6\u6001\u5e94\u8be5\u662f\uff0cdp[u][i]\u8868\u793a\u4ee5u\u4e3a\u8ddf\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u62e9i\u4e2a\u9ed1\u8282\u70b9\uff0c\u5bf9\u7b54\u6848\u6709\u591a\u5c11\u8d21\u732e\n\n\u4e3a\u4ec0\u4e48\u662f\u8bf4\u201c\u5bf9\u7b54\u6848\u6709\u591a\u5c11\u8d21\u732e\u5462\u201d\uff1f\n\n\u4e3b\u8981\u662f\u60f3\u5230\u4e00\u70b9\uff0c\u5373\u5206\u522b\u8003\u8651\u6bcf\u6761\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n\n\u5373\uff0c\u8fb9\u4e00\u4fa7\u7684\u9ed1\u8282\u70b9\u6570\\*\u53e6\u4e00\u4fa7\u7684\u9ed1\u8282\u70b9\u6570\\*\u8fb9\u6743+\u4e00\u4fa7\u7684\u767d\u8282\u70b9\u6570\\*\u53e6\u4e00\u4fa7\u7684\u767d\u8282\u70b9\u6570\\*\u8fb9\u6743\n\n\u8fd9\u70b9\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u4f46\u662f\u4e0d\u5bb9\u6613\u60f3\u5230\uff08\u539f\u56e0\u662f\u6211\u592a\u5f31\u4e86\uff09\n\n\u7136\u540e\u60c5\u51b5\u5c31\u660e\u4e86\u4e86\uff0c\u6574\u4e2a\u95ee\u9898\u6210\u4e86\u4e00\u4e2a\u6811\u5f62\u80cc\u5305\uff0c\u8003\u8651\u6bcf\u4e2a\u5b50\u8282\u70b9\u5206\u914d\u591a\u5c11\u4e2a\u9ed1\u8272\u8282\u70b9\uff08\u4f53\u79ef\uff09\uff0c\u7136\u540e\u7b97\u51fa\u8fd9\u6761\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff08\u4ef7\u503c\uff09\n\n\u8fd9\u91cc\u518d\u4e00\u6b21\u5f3a\u8c03\u201c\u8d21\u732e\u201d\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u8d21\u732e\u4e0d\u53ea\u662f\u5728\u5f53\u524d\u5b50\u6811\u5185\uff0c\u800c\u662f\u5bf9\u4e8e\u6574\u68f5\u6811\u6765\u8bf4\u7684\n\n\u8f6c\u79fb\u65b9\u7a0b\u4e3adp[u][i] = max( dp[u][i], dp[u][i-j] + dp[v][j] + val )\n\n\u5176\u4e2dv\u4e3au\u7684\u5b50\u8282\u70b9\uff0cj\u4e3a\u5728\u8fd9\u4e2a\u5b50\u8282\u70b9\u4e2d\u9009\u62e9\u7684\u9ed1\u8272\u70b9\u7684\u4e2a\u6570\uff0cval\u4e3a\u8fd9\u6761\u8fb9\u7684\u8d21\u732e\n\nval = j\\*(k-j)\\*w + (sz[v]-j)\\*(n-k+j-sz[v])\\*w\n\n\u5176\u4e2dw\u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0cn\u4e3a\u603b\u7684\u8282\u70b9\u6570\uff0ck\u4e3a\u603b\u7684\u9700\u8981\u9009\u62e9\u7684\u9ed1\u8272\u8282\u70b9\u6570\uff0csz[v]\u4e3a\u4ee5v\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570\u91cf\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\nconst ll INFLL = 0x3f3f3f3f3f3f3f3f;\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 2010;\nint n,k;\nstruct Tree {\n    int head[MAXN], nxt[MAXN<<1], to[MAXN<<1], w[MAXN<<1], idx;\n    Tree() { idx = 0; memset( head, -1, sizeof(head) ); }\n    void addedge( int u, int v, int val ) {\n        to[idx] = v; nxt[idx] = head[u]; w[idx] = val; head[u] = idx; ++idx;\n        to[idx] = u; nxt[idx] = head[v]; w[idx] = val; head[v] = idx; ++idx;\n    }\n}tree;\nll dp[MAXN][MAXN]; int sz[MAXN];\nvoid dfs( int u, int fa ) {\n    sz[u] = 1; memset( dp[u], -1, sizeof(dp[u]) ); dp[u][0] = dp[u][1] = 0;\n    for( int e = tree.head[u]; ~e; e = tree.nxt[e] ) {\n        int v = tree.to[e]; if( v == fa ) continue; dfs(v,u); sz[u] += sz[v];\n    }\n    for( int e = tree.head[u]; ~e; e = tree.nxt[e] ) {\n        int v = tree.to[e]; if( v == fa ) continue; int w = tree.w[e];\n        for( int i = min(k,sz[u]); i >= 0; --i ) for( int j = 0; j <= min(i,sz[v]); ++j ) if( ~dp[u][i-j] ) {\n            ll val = (ll)j*(k-j)*w + (ll)(sz[v]-j)*(n-k+j-sz[v])*w;\n            dp[u][i] = max( dp[u][i], dp[u][i-j] + dp[v][j] + val );\n        }\n    }\n}\nint main() {\n    scanf( \"%d%d\", &n, &k );\n    for( int i = 0; i < n-1; ++i ) {\n        int u,v,w; scanf( \"%d%d%d\", &u, &v, &w ); tree.addedge(u,v,w);\n    } dfs(1,0); printf( \"%lld\\n\", dp[1][k] );\n    return 0;\n}\n\n```",
        "postTime": 1480667986,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "Update\uff1a2020.1.10 \u66f4\u65b0\u4e86\u5173\u4e8e\u8f6c\u79fb\u987a\u5e8f\u95ee\u9898\u7684\u8bb2\u89e3\uff0c\u611f\u8c22\n[popo](https://www.luogu.com.cn/user/157681#following)\u5bf9\u4e8e\u672c\u535a\u5ba2\u4e0d\u4e25\u8c28\u4e4b\u5904\u7684\u6307\u51fa\n\n\n\u4e00\u9053\u5f88\u597d\u7684\u6811\u5f62DP\u9898\u3002\n\n\u6211\u8fd9\u9053\u9898\u601d\u8003\u4e86\u534a\u4e2a\u591a\u5c0f\u65f6\uff0c\u6ca1\u6709\u60f3\u51fa\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u7684\u601d\u8def\uff0c\u4e8e\u662f\u5f00\u59cb\u770b\u9898\u89e3\uff0c\u7531\u4e8e\u6211\u5728\u6811\u5f62DP\u8fd9\u65b9\u9762\u6bd4\u8f83\u83dc\uff0c\u770b\u4e86\u597d\u51e0\u7bc7\u540e\u8fd8\u662f\u6709\u4e00\u4e9b\u5730\u65b9\u4e0d\u592a\u7406\u89e3\uff0c\u4f46\u529f\u592b\u4e0d\u8d1f\u6709\u5fc3\u4eba\uff0c\u5728\u52aa\u529b\u4e86\u4e00\u4e2a\u665a\u4e0a\u540e\uff0c\u6700\u540e\u7406\u89e3\u4e86\u4e4b\u524d\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u5e76A\u6389\u4e86\u8fd9\u9053\u9898\u3002\n\n\u4e0b\u9762\u5f00\u59cb\u8bb2\u89e3\uff1a\n\n**\u9898\u76ee\u5927\u610f**\uff1a\n\n\u7ed9\u60a8\u4e00\u68f5\u6709 n \u4e2a\u70b9\u7684\u6811\uff0c\u6811\u4e0a\u7684\u8fb9\u6709\u8fb9\u6743\uff0c\u8ba9\u4f60\u5728\u5176\u4e2d\u9009\u62e9\u51fak\u4e2a\u9ed1\u70b9\uff0c\u5176\u4f59\u7684\u4e3a\u767d\u70b9\uff0c\u4f7f\u5f97\u9ed1\u70b9\u4e0e\u9ed1\u70b9\u7684\u8ddd\u79bb\u603b\u548c\u4e0e\u767d\u70b9\u548c\u767d\u70b9\u7684\u8ddd\u79bb\u603b\u548c\u7684\u548c\u6700\u5927\uff0c\n\u8ba9\u60a8\u6c42\u51fa\u8fd9\u4e2a\u503c\u6700\u5927\u662f\u591a\u5c11\u3002\n\n**\u505a\u9898\u601d\u8def\u5256\u6790\uff1a**\n\n1.\u6709\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u60f3\u5230\u8d2a\u5fc3\u7684\u601d\u8def\uff0c\u4f46\u662f\u6811\u4e0a\u8def\u5f84\u7684\u8d2a\u5fc3\u4f1a\u5728\u513f\u5b50\u8282\u70b9\u8f83\u591a\u7684\u65f6\u5019\u60c5\u51b5\u975e\u5e38\u590d\u6742\uff0c\u5e76\u4e14\u767d\u8272\u8282\u70b9\u4e0e\u9ed1\u8272\u8282\u70b9\u5982\u4f55\u9009\u62e9\u4f4d\u7f6e\u53c8\u662f\u4e00\u4e2a\u597d\u50cf\u6ca1\u6709\u529e\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4ee3\u7801\u96be\u5ea6\u5927\uff0c\u6b63\u786e\u6027\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u4e0d\u8003\u8651\u8fd9\u79cd\u601d\u8def\n    \n2.\u6811\u5f62DP\uff0c\u5728\u521a\u521a\u60f3\u5230\u8fd9\u4e2a\u601d\u8def\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u72b6\u6001\u8f6c\u79fb\u6ca1\u6709\u60f3\u8c61\u4e2d\u7684\u5bb9\u6613\uff0c\u9996\u5148\uff0c\u5728\u8bbe\u8ba1\u72b6\u6001\u4e0a\uff0c\u6709\u53ef\u80fd\u4f1a\u60f3\u5230\u4ee5 i \u7684\u5b50\u6811\u4e2d\u9009\u62e9 j \u4e2a\u9ed1\u70b9\u5230 i \u70b9\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u5728 dfs \u8fc7\u7a0b\u4e2d\u76f4\u63a5\u8ba1\u7b97\u7b54\u6848\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u5b9e\u8d28\u8fd8\u662f\u4e00\u79cd\u8d2a\u5fc3\uff0c\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1\u9ed1\u70b9\u548c\u767d\u70b9\u7684\u8d21\u732e\u548c\u6700\u5927\u3002\n\n   \u6240\u4ee5\u6211\u4eec\u5728\u8003\u8651\u591a\u79cd\u72b6\u6001\u540e\u9009\u51fa\u4e00\u79cd\u5bb9\u6613\u8f6c\u79fb\u4e14\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u72b6\u6001\uff0c\u6211\u9009\u62e9\u7684\u662f f[x][j] \u8868\u793a\u4ee5 x \u7684\u5b50\u6811\u4e2d\u9009\u62e9 j \u4e2a\u9ed1\u70b9\u5bf9\u4e8e\u7b54\u6848\u7684\u6700\u5927\u8d21\u732e\uff0c\u90a3\u4e48\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\u4e00\u4e2a\u6811\u4e0a\u7684\u80cc\u5305\u95ee\u9898\uff0c\u5373\u5bf9\u4e8e\u8282\u70b9 x \u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 y \u7684\u5b50\u6811 \uff0c\u90fd\u53ef\u4ee5\u9009\u62e9\u82e5\u5e72\u4e2a\u9ed1\u70b9\uff08\u53ef\u4ee5\u4e00\u4e2a\u4e5f\u4e0d\u9009\u62e9\uff09\uff08\u5f53\u7136\uff0cx \u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u9ed1\u70b9\uff09\uff0c\u8fd9\u9053\u9898\u7684\u7b54\u9898\u601d\u8def\u5927\u4f53\u5982\u6b64\u3002\n  \n3.\u7edf\u8ba1\u7b54\u6848\uff0c**\u5c06\u9898\u76ee\u4e2d\u7684\u7edf\u8ba1\u7b54\u6848\u53d8\u5f62\uff0c\u53d8\u6210\u7edf\u8ba1\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u4e58\u4e0a\u4e24\u8fb9\u7684\u9ed1\u70b9\u6570\u91cf\u4e0e\u8fb9\u6743\u4e58\u4e0a\u4e24\u8fb9\u7684\u767d\u70b9\u6570\u91cf\u7684\u503c\u7684\u548c**\uff0c\u8fd9\u4e2a\u8f6c\u5316\u5f88\u597d\u60f3\uff0c\u4ed4\u7ec6\u601d\u8003\u4e0b\u3002\n\n**\u63a5\u4e0b\u6765\u662f\u91cd\u70b9\uff01\uff01\uff01**\n\n\uff08\u63a8\u8350\u628a\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u95ee\u9898\u770b\u5b8c\uff0c\u56e0\u4e3a\u5176\u4e2d\u6709\u4e00\u4e9b\u4e1c\u897f\u9700\u8981\u4f53\u4f1a\uff09\n\n**\u4e24\u4e2a\u95ee\u9898\uff1a\u8f6c\u79fb\u987a\u5e8f\u95ee\u9898 \u548c \u4e0d\u5408\u6cd5\u60c5\u51b5\u53bb\u9664\u95ee\u9898**\n\n\u4e00. \u8f6c\u79fb\u987a\u5e8f\u95ee\u9898\n\n\u6211\u4eec\u5728\u7b2c\u4e00\u5c42\u7684\u8f6c\u79fb\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u91cd\u590d\u8f6c\u79fb\uff08\u8ddf01\u80cc\u5305\u538b\u6389\u4e00\u7ef4\u540e\u7684\u5012\u5e8f\u8f6c\u79fb\u4e00\u6837\uff09\uff0c\u6211\u4eec\u5012\u5e8f\u8f6c\u79fb\u3002\n\n\u5728\u7b2c\u4e8c\u5c42\u7684\u8f6c\u79fb\u987a\u5e8f\u7684\u95ee\u9898\u4e0a\uff0c\u6211\u8ba4\u4e3a\uff1a\n\n1.\u6b63\u5e8f\u8f6c\u79fb\u548c\u5012\u5e8f\u8f6c\u79fb\u5728\u672c\u8d28\u4e0a\u5e76\u6ca1\u6709\u5dee\u522b\uff0c\u4f46\u662f\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u5bf9\u4e8e\u5f53\u524d\u679a\u4e3e\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\uff0c\u54ea\u6015\u4e00\u4e2a\u9ed1\u70b9\u4e5f\u6ca1\u6709\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u7b97\u4e0a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\uff0c\u5426\u5219\u5728\u63a5\u4e0b\u6765\u7684\u8f6c\u79fb\u4e2d\uff0c\u5c31\u4f1a\u5c11\u8ba1\u7b97\u672c\u6765\u5c31\u6709\u7684\u4ef7\u503c\uff0c\u4ece\u800c\u7b54\u6848\u9519\u8bef\u3002\n\n2.\u6b63\u5e8f\u679a\u4e3e\u7684\u597d\u5904\u5728\u4e8e\uff0c\u5b83\u4f1a\u5148\u679a\u4e3e\u5728\u5f53\u524d\u679a\u4e3e\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u4e00\u4e2a\u9ed1\u70b9\u4e5f\u6ca1\u6709\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u76f4\u63a5\u52a0\u4e0a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\uff08\u4e0d\u660e\u767d\u7684\u8bdd\u53ef\u4ee5\u5bf9\u7740\u4ee3\u7801\u6a21\u62df\u4e00\u4e0b\u5c31\u53ef\u4ee5\u660e\u767d\u4e86\uff09\uff0c\u8f6c\u79fb\u5c31\u53d8\u5f97\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n3.\u7b2c\u4e8c\u5c42\u6b63\u5e8f\u679a\u4e3e\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u91cd\u590d\u8f6c\u79fb\u7684\u95ee\u9898\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u7b2c\u4e8c\u5c42\u7684\u679a\u4e3e\u4e00\u76f4\u662f\u5728\u8f6c\u79fb\u540c\u4e00\u4e2a\u72b6\u6001\uff08\u5373\u6211\u7684\u4ee3\u7801\u4e2d\u7684 f[x][j] \uff09\uff0c\u6240\u4ee5\u6b63\u5e8f\u5e76\u4e0d\u4f1a\u7528\u88ab\u5f53\u524d\u679a\u4e3e\u7684\u5b50\u8282\u70b9\u66f4\u65b0\u8fc7\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u91cd\u590d\u8f6c\u79fb\u3002\n\n3.\u518d\u6765\u8bf4\u8bf4\u5012\u5e8f\uff0c\u9996\u5148\uff0c\u5012\u5e8f\u7684\u6b63\u786e\u6027\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\uff0c\u4f46\u662f\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ed1\u70b9\u4e5f\u4e0d\u9009\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u5b50\u6811\u7684\u5927\u5c0f\u6539\u53d8\uff0c\u4ef7\u503c\u5c31\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u679a\u4e3e\u5230\u4e00\u4e2a\u65b0\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5f53\u524d\u70b9\u7684\u5b50\u6811\u7684\u5927\u5c0f\u4f1a\u88ab\u8fd9\u4e2a\u65b0\u679a\u4e3e\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u7684\u5927\u5c0f\u6240\u66f4\u65b0\uff0c\u4f46\u6b64\u65f6\u5728\u6211\u4eec\u7684\u6570\u7ec4\u4e2d\uff0c\u4fdd\u5b58\u7684\u4ecd\u7136\u662f\u5b50\u6811\u5927\u5c0f\u6ca1\u6709\u88ab\u66f4\u65b0\u65f6\u7684\u4ef7\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4f18\u5148\u5c06\u5176\u66f4\u65b0\uff0c\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u53ef\u4ee5\u770b\u770b [\u5b50\u8c26\u3002](https://www.luogu.org/blog/ahaha254/solution-p3177)\u5199\u7684\u9898\u89e3\uff0c\u6211\u8ba4\u4e3a\u5199\u5f97\u6bd4\u8f83\u6e05\u6670\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5012\u5e8f\u679a\u4e3e\u4e5f\u662f\u4e1d\u6beb\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\u6211\u8ba4\u4e3a\u795e\u4ed9 popo \u6240\u8bf4\u7684\u66f4\u597d\u7406\u89e3\uff0c\u5f15\u7528\u4e00\u4e0b\uff1a\n\n\u795e\u4ed9popo\uff1a\u201c\u4f46\u662f\u8fd9\u9053\u9898\u6bd4\u8f83\u7279\u6b8a\uff0c\u5c31\u662f\u6211\u4eec\u7684\uff4b\u53ef\u4ee5\u7b49\u4e8e\uff10\uff0c\u8fd9\u5c31\u5bfc\u81f4\u5bf9\n\u4e8e\u6bcf\u4e00\u4e2a\uff4a\uff0c\u6700\u540e\u4e00\u4e2a\uff4b\u4e00\u5b9a\u4f1a\u8fdb\u884c\u4e00\u6b21\u975e\u6cd5\u8f6c\u79fb\u3002\u901a\u4fd7\u70b9\u8bb2\uff0c\n\u6700\u540e\u4e00\u4e2a\u8f6c\u79fb\u662f\uff1af[u][j]=max(f[u][j],f[u][j]+f[v][0]+val);\n\u8fd9\u8f6c\u79fb\u80af\u5b9a\u4f1a\u53d1\u751f\uff0c\u5e76\u4e14\u6211\u4eec\u7528\u7684\u6765\u6e90\u72b6\u6001f[u][j-k]\u7531\u4e8e\uff4b=0\u7684\n\u539f\u56e0\uff0c\u5df2\u7ecf\u4e0d\u6ee1\u8db3\u6211\u4eec\u539f\u672c\u8981\u6c42\u7684\u201c\u6211\u4eec\u9700\u8981\u7684\u539f\u72b6\u6001\u4e0d\u4f1a\u88ab\u5728\u8fd9\n\u4e4b\u524d\u66f4\u65b0\u201d\u4e86\uff0c\u56e0\u4e3af[u][j]\u5df2\u7ecf\u4e0d\u77e5\u9053\u88ab\u66f4\u65b0\u591a\u5c11\u6b21\u4e86\u3002\u201d\n\n\u201c\u5f53\u7136\u4e3a\u6b64\u6211\u4eec\u4e0b\u9762\u5c31\u4e0d\u80fd\u53bb\u8ba1\u7b97\uff4b=0\u7684\u8f6c\u79fb\u4e86\u3002\n\u201d\n\n\u4e8c. \u4e0d\u5408\u6cd5\u60c5\u51b5\u53bb\u9664\u95ee\u9898\n\n1.\u5728\u6211\u7684\u4ee3\u7801\u4e2d\uff08\u4e0b\u9762\u6709\uff09\uff0c\u6211\u5728\u521a\u5f00\u59cb\u7684\u65f6\u5019\u5427\u7b54\u6848\u6570\u7ec4\uff08\u5373 f \u6570\u7ec4\uff09\u5168\u90e8\u8d4b\u503c\u4e86-1\uff0c-1\u8868\u793a\u8fd9\u4e2a\u72b6\u6001\u4e0d\u5408\u6cd5\uff0c\u6211\u5728\u7a0b\u5e8f\u521a\u5f00\u59cb\u7684\u552e\u540e\u5e76\u4e0d\u77e5\u9053\u54ea\u4e9b\u72b6\u6001\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u5148\u90fd\u8d4b\u503c\u4e3a-1\uff0c\u5728DP\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5408\u6cd5\u7684\u72b6\u6001\u5728\u6539\u53d8\u5b83\u7684\u503c\u3002\n\n2.\u5728\u6211\u7684\u4ee3\u7801\u7684\u7b2c\u4e8c\u5c42\u5faa\u73af\u4e2d\uff0c\u6211\u7279\u5224\u4e86 f[x][j - k] \u7684\u503c\u4e3a-1\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u5728\u6211\u7684\u679a\u4e3e\u4e2d\uff0c\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u79cd\u4e4b\u524d\u7684\u6700\u591a\u9ed1\u70b9\u503c\u4e0d\u591f\u8f6c\u79fb\u7684\u60c5\u51b5\uff0c\u8bf7\u770b\u5982\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff1a\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u679a\u4e3e\u5728\u5f53\u524d\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6211\u4eec\u679a\u4e3e\u5b83\u91cc\u9762\u67091\u4e2a\u9ed1\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5728\u5176\u4ed6\u5b50\u6811\u4e2d\u9009\u4e86\u5171 j - 1 \u4e2a\u9ed1\u70b9\u7684\u72b6\u6001\uff0c\u4f46\u662f\u5982\u679c\u5176\u4ed6\u7684\u5b50\u6811\u7684\u5927\u5c0f\u603b\u548c\u8fd8\u4e0d\u5230 j - 1 \u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u663e\u7136\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53bb\u9664\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u6211\u4eec\u4ee5\u4e0a\u7684\u4f8b\u5b50\u6269\u5bbd\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7b56\u7565\uff1a\n\n\u6211\u4eec\u679a\u4e3e\u5728\u5f53\u524d\u7684\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u6211\u4eec\u679a\u4e3e\u5b83\u91cc\u9762\u6709k\u4e2a\u9ed1\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5728\u5176\u4ed6\u5b50\u6811\u4e2d\u9009\u4e86\u5171 j - k \u4e2a\u9ed1\u70b9\u7684\u72b6\u6001\uff0c\u4f46\u662f\u5982\u679c\u5176\u4ed6\u7684\u5b50\u6811\u7684\u5927\u5c0f\u603b\u548c\u8fd8\u4e0d\u5230 j - k \u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u663e\u7136\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53bb\u9664\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u81f3\u6b64\uff0c\u8fd9\u9053\u9898\u7684\u7b56\u7565\u8bb2\u89e3\u5c31\u7ed3\u675f\u4e86\uff0c\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u8fd8\u6709\u4e00\u4e9b\u89e3\u91ca\uff0c\u5982\u679c\u6ca1\u6709\u7406\u89e3\u7684\u8bdd\uff0c\u53ef\u4ee5\u518d\u770b\u770b\u3002\n\n\u8fd9\u662f\u6211\u7684\u4ee3\u7801\uff1a\n\n\uff08\u56e0\u4e3a\u6211\u5faa\u73af\u4e2d\u4e00\u822c\u7528k\uff0c\u6240\u4ee5\u9898\u76ee\u4e2d\u7684 k \u5728\u6211\u7684\u4ee3\u7801\u4e2d\u4e3a m\uff0c\u671b\u7406\u89e3\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\n\nconst int maxn = 2005;\n\nstruct Edge{\n\tint x, y, w, nxt;\n}e[maxn << 1 | 1];\n\nint n, m, cnt;\nint fr, to, haj;\n\nint head[maxn], siz[maxn];\n\nlong long f[maxn][maxn];\n\ninline int read(void)\n{\n\tint s = 0, w = 1;\n\tchar ch = getchar();\n\tfor(; ch < '0' || ch > '9'; ch = getchar()) if(ch == '-') w = -1;\n\tfor(; ch <= '9' && ch >= '0'; ch = getchar()) s = s * 10 + ch - '0';\n\treturn s * w;\n}\n\ninline void add(int x, int y, int w)\n{\n\te[++cnt].x = x;\n\te[cnt].y = y;\n\te[cnt].w = w;\n\te[cnt].nxt = head[x];\n\thead[x] = cnt;\t\n}\n\nvoid dfs(int x, int father)\n{\n\tsiz[x] = 1; // \u521d\u59cb\u5316\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6709\u672c\u8eab\u8fd9\u4e2a\u70b9\uff0c\u6240\u4ee5\u5927\u5c0f\u8d4b\u503c\u4e3a 1  \n\tf[x][0] = f[x][1] = 0; // \u65e0\u8bba\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9009\u548c\u53ea\u9009\u4e00\u4e2a\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e00\u5b9a\u5408\u6cd5\uff0c\u6240\u4ee5\u628a\u503c\u8d4b\u6210 0\uff0c\u5728\u4e0b\u9762\u66f4\u65b0 \n\tfor(register int i = head[x]; i != -1; i = e[i].nxt)\n\t{\n\t\tint y = e[i].y;\n\t\tif(y == father) continue; // \u52a0\u8fb9\u52a0\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u9632\u6b62\u51fa\u73b0\u56e0\u56de\u5230\u81ea\u5df1\u7684\u7236\u4eb2\u800c\u6b7b\u5faa\u73af\u6216\u8005\u9519\u8bef\u8f6c\u79fb\u7684\u60c5\u51b5 \n\t\tdfs(y, x); // \u9012\u5f52\u6c42\u89e3 \n\t\tsiz[x] += siz[y]; // \u66f4\u65b0\u5f53\u524d\u70b9\u5b50\u6811\u7684\u5927\u5c0f \n\t\tfor(register int j = min(m, siz[x]); j >= 0; j--) // \u6700\u5927\u53d6\u503c\u4e3a\u6700\u591a\u53d6\u7684\u9ed1\u70b9\u7684\u6570\u91cf\u7684\u5b50\u6811\u5927\u5c0f\u7684\u66f4\u5c0f\u503c\uff0c \u518d\u5927\u7684\u72b6\u6001\u610f\u4e49\u4e0d\u5408\u6cd5 \n\t\t{\n\t\t\tfor(register int k = 0; k <= min(j, siz[y]); k++) // \u540c\u4e0a\uff0c\u7531\u4e8e\u662f\u8981\u66f4\u65b0\u7684\u72b6\u6001\u7684\u9ed1\u70b9\u6570\u91cf\u4e3a j\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u679a\u4e3e\u4e2d\u7684\u4e0a\u9650\u8981\u548c j \u53d6\u66f4\u5c0f\u503c \n\t\t\t{\n\t\t\t\tif(f[x][j - k] == -1) continue; // \u7279\u5224\u6389\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5 \n\t\t\t\tlong long val = 1ll * e[i].w * k * (m - k) + 1ll * e[i].w * (siz[y] - k) * (n - m - siz[y] + k); // \u8fd9\u662f\u65b0\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u7531\u4e8e\u5f88\u957f\u7684\u7f18\u6545\uff0c\u5355\u72ec\u5199\u51fa\u6765 \n\t\t\t\tf[x][j] = max(f[x][j], f[x][j - k] + f[y][k] + val); // \u770b\u662f\u5426\u80fd\u591f\u66f4\u65b0\u7b54\u6848 \n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main()\n{\n\tmemset(head, -1, sizeof(head)); \n\tmemset(f, -1, sizeof(f)); // \u7b54\u6848\u6570\u7ec4\u7684\u9884\u5904\u7406 \n\tn = read(); m = read();\n\tfor(register int i = 1; i < n; i++) \n\t{\n\t\tfr = read(); to = read(); haj = read();\n\t\tadd(fr, to, haj); // \u52a0\u53cc\u5411\u8fb9 \n\t\tadd(to, fr, haj);\n\t}\n\tdfs(1, 0); // \u9012\u5f52\u6c42\u89e3 \n\tcout << f[1][m] << '\\n';\n\treturn 0;\n}\n```\n\n\u8fd9\u7bc7\u9898\u89e3\u5373\u6682\u65f6\u544a\u4e00\u6bb5\u843d\u4e86\uff0c\u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\u76f4\u63a5\u5728\u8ba8\u8bba\u533a\u95ee\u6216\u7740\u6d1b\u8c37\u79c1\u4fe1\u5747\u53ef\u3002\n\n\u8c22\u8c22\u9605\u8bfb\u3002",
        "postTime": 1568769323,
        "uid": 162864,
        "name": "\u5c0f\u5fc3\u6f02\u4eae\u5973\u4eba",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3177 [HAOI2015]\u6811\u4e0a\u67d3\u8272"
    },
    {
        "content": "----\u64cd\u4f5c\u53ef\u4ee5\u5f88\u6734\u7d20,\u4ee3\u7801\u53ef\u4ee5\u5f88\u7b80\u77ed,dp\u5c31\u662f\u8fd9\u6837\u77ed\u5c0f\u7cbe\u608d\u7684\u4e1c\u897f\n\n\n\u601d\u8def\u6734\u7d20,\u6811\u5f62dp\n\ndp\u96be\u5728\u8bbe\u72b6\u6001\u4ee5\u53ca\u601d\u8003\u72b6\u6001\u8f6c\u79fb(\u90fd\u662f\u5e9f\u8bdd).\n\n\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4ee4dp [ u ][ t ] \u8868\u793a u \u53f7\u8282\u70b9\u6240\u5904\u7684\u5b50\u6811\u4e2d\u6709 t \u4e2a\u70b9\u88ab\u67d3\u8272\u65f6\u7684\u6700\u5927\u8d21\u732e.\n\n\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u5c31\u662f:\n\n```\ndp[u][t] = max{ dp[v1][t1]+dp[v2][t2]+...+dp[vs][ts] + e1*t1*(k-t1)+e1*(siz[v1]-t1)*(n-k-(siz[v1]-t1))+e2*t2*(k-t2)+e2*(siz[v2]-t2)*(n-k-(siz[v2]-t2))+...+es*ts*(k-ts)+es*(siz[vs]-ts)*(n-k-(siz[vs]-ts)) } \n\n\u5176\u4e2d,v1~vs \u8868\u793a u \u7684\u5b50\u8282\u70b9\u7f16\u53f7,siz[i]\u8868\u793ai\u6240\u5904\u7684\u5b50\u6811\u5927\u5c0f, n,k \u4e0e\u9898\u76ee\u4e2d\u7684n\u548ck\n```\n\n\u4f46\u4ee3\u7801\u4e2d\u7684\u72b6\u6001\u8f6c\u79fb\u662f\u7565\u6709\u4e0d\u540c\u7684...\n\n```cpp\n//by Judge\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define rint register int\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\nconst int M=2100;\ninline ll read(){\n\tll x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\nint n,k,pat;\nint head[M];\nll siz[M],dp[M][M],tmp;\nstruct Edge{ int to,next; ll val; }e[M<<1];\ninline void add(rint u,rint v,rint c){ e[++pat]=(Edge){v,head[u],c}, head[u]=pat; }\nvoid dfs(rint u){ \n\tsiz[u]=1;\n\tfor(rint i=head[u];i;i=e[i].next){\n\t\trint v=e[i].to; if(siz[v]) continue;\n\t\tdfs(v); ll c=e[i].val; \n\t\tfor(rint a=siz[u];a>=0;--a)  //\u679a\u4e3e\u5f53\u524d\u70b9\u7684\u4ee5\u53ca\u5f53\u524d\u70b9\u7684\u5176\u4ed6\u5b50\u6811\u7684\u67d3\u8272\u70b9\u6570 (\u53cd\u5411\u679a\u4e3e,\u907f\u514d\u540e\u6548\u6027) \n\t\t\tfor(rint b=siz[v];b>=0;--b)  //\u679a\u4e3e\u76ee\u524d\u5904\u7406\u7684\u5b50\u6811\u7684\u67d3\u8272\u70b9\u6570 \n\t\t\t\ttmp=dp[u][a]+dp[v][b]+c*b*(k-b)+c*(n-k+b-siz[v])*(siz[v]-b),dp[u][a+b]=max(dp[u][a+b],tmp);\n\t\t\t\t// dp[u][a] \u5176\u4ed6\u5b50\u6811\u5185\u7684\u70b9\u5404\u81ea\u72ec\u7acb\u4e8e\u5f53\u524d\u5b50\u6811\u5185\u7684\u70b9\u7684\u8d21\u732e \n\t\t\t\t//dp[v][b] \u5f53\u524d\u5b50\u6811\u5185\u7684\u70b9\u5404\u81ea\u72ec\u7acb\u4e8e\u5176\u4ed6\u5b50\u6811\u5185\u7684\u70b9\u7684\u8d21\u732e \n\t\t\t\t//c*b*(k-b) \u5f53\u524d\u8fb9\u5bf9\u8fde\u63a5\u5f53\u524d\u5b50\u6811\u5185\u7684\u67d3\u8272\u70b9\u4e0e\u5b50\u6811\u5916\u7684\u67d3\u8272\u70b9\u7684\u8d21\u732e\n\t\t\t\t//c*(n-k+b-siz[v])*(siz[v]-b) \u5f53\u524d\u8fb9\u5bf9\u8fde\u63a5\u5f53\u524d\u5b50\u6811\u5185\u7684\u672a\u67d3\u8272\u70b9\u4e0e\u5b50\u6811\u5916\u7684\u672a\u67d3\u8272\u70b9\u7684\u8d21\u732e \n\t\tsiz[u]+=siz[v];\n\t}\n}\nint main(){   //\u4e3b\u51fd\u6570\u91cc\u5c3d\u662f\u6734\u7d20\u64cd\u4f5c\n\tn=read(),k=read();\n\tfor(rint i=1;i<n;++i){ \n\t\trint x=read(),y=read(); ll c=read();\n\t\tadd(x , y , c), add(y , x , c);\n\t}\n\tdfs(1), printf(\"%lld\\n\",dp[1][k]);\n\treturn 0;\n}\n```",
        "postTime": 1531550732,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u771f\u662f\u975e\u5e38\u795e\u4ed9\n\n\u7b2c\u4e00\u773c\u770b\u5230\u9898\u9762\u80af\u5b9a\u80fd\u60f3\u5230\u72b6\u6001\u662f$dp[i][j]$\u8868\u793a$i$\u8fd9\u68f5\u5b50\u6811\u91cc\u67d3\u4e86$j$\u4e2a\u9ed1\u70b9\u7684\u6700\u5927\u503c\n\n\u6700\u5927\u503c\uff1f\n\n\u4ec0\u4e48\u6700\u5927\u503c\uff0c\u4e4b\u540e\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6837\u5b50\u5b8c\u5168\u6ca1\u6709\u529e\u6cd5\u8f6c\u79fb\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u6700\u540e\u7684\u7b54\u6848\u957f\u4ec0\u4e48\u6837\u5b50\n\n\u7a81\u7136\u611f\u89c9\u6b63\u7740\u505a\u4e0d\u592a\u597d\u505a\uff0c\u90a3\u5c31\u5e72\u8106\u53cd\u7740\u505a\n\n\u5982\u679c\u6ca1\u6709\u5206\u51fa\u9ed1\u70b9\u548c\u767d\u70b9\uff0c\u90a3\u4e48\u539f\u6765\u7684\u7b54\u6848\uff0c\u4e5f\u5c31\u662f\u6811\u4e0a\u6240\u6709\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u80af\u5b9a\u662f\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u6765\u7684\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6362\u6839$dp$\u505a\u5230$O(n)$\n\n\u4e4b\u540e\u6211\u4eec\u5f3a\u884c\u5236\u9020\u5dee\u5f02\uff0c\u90a3\u4e9b\u6709\u4e86\u5dee\u5f02\u7684\u70b9\u80af\u5b9a\u5c31\u6ca1\u6709\u529e\u6cd5\u8ba1\u7b97\u8ddd\u79bb\u52a0\u8fdb\u6700\u540e\u7684\u7b54\u6848\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u90e8\u5206\u51cf\u6389\n\n\u4e8e\u662f\u7b54\u6848\u76f8\u6bd4\u521a\u624d\u7684\u51cf\u6389\u4e86\n\n$$\\sum_{i=1}^n\\sum_{j=1}^ndis(i,j)=\\sum_{i=1}^n\\sum_{j=1}^npre_i+pre_j-2*pre_{lca}\\ [col_i=1\\text{\u4e14}col_j=0]$$\n\n$pre$\u662f\u6839\u8def\u5f84\u524d\u7f00\u548c\uff0c\u540e\u9762\u90a3\u4e00\u5927\u5768\u4e1c\u897f\u5c31\u662f\u975e\u5e38\u719f\u6089\u7684\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c$col$\u662f\u67d3\u7684\u989c\u8272\uff0c$0$\u8868\u793a\u767d\u8272\uff0c$1$\u8868\u793a\u9ed1\u8272\uff0c$lca$\u5c31\u662f$lca(i,j)$\n\n\u9996\u5148\u660e\u786e\u4e00\u4e0b\u76ee\u6807\uff0c\u6211\u4eec\u8981\u6700\u5927\u5316\u4ef7\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8981**\u6700\u5c0f\u5316\u8fd9\u4e2a\u67ff\u5b50\u7684\u503c**\n\n\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u67ff\u5b50\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u5947\u5999\u7684\u89c4\u5f8b:\n\n**\u5982\u679c\u4e00\u4e2a\u70b9$i$\u6ee1\u8db3$col_i=1$\uff0c\u90a3\u4e48$pre_i$\u5c31\u4f1a\u5728\u4e0a\u9762\u90a3\u4e2a\u67ff\u5b50\u91cc\u88ab\u8ba1\u7b97$n-k$\u6b21\uff0c\u5426\u5219\u5c31\u4f1a\u88ab\u8ba1\u7b97$k$\u6b21\n**\n\n$k$\u5c31\u662f\u9ed1\u70b9\u7684\u603b\u4e2a\u6570\n\n\u8fd9\u4e2a\u81ea\u5df1\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u5c31\u662f$\\sum$\u7684\u4e00\u4e9b\u57fa\u672c\u6027\u8d28\n\n\u4e4b\u540e\u95ee\u9898\u53d8\u6210\u6c42\n\n$$-2*\\sum_{i=1}^n\\sum_{j=1}^npre_{lca}\\ [col_i=1\\text{\u4e14}col_j=0]$$\n\n\u597d\u50cf\u4e00\u8138\u4e0d\u53ef\u6c42\u7684\u6837\u5b50\uff0c\u4f46\u662f\u6839\u636e\u6211\u6570\u636e\u7ed3\u6784\u5237\u591a\u4e86\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u4e00\u4e2a\u7c7b\u4f3c\u5dee\u5206\u7684\u4e1c\u897f\n\n![\u56fe](https://cdn.luogu.com.cn/upload/pic/37883.png)\n\n\u6211\u4eec\u51d1\u5408\u770b\u4e00\u4e0b\uff0c\u5047\u8bbe\u5728$4$\u67d3\u4e86\u4e00\u4e2a\u9ed1\uff0c\u90a3\u4e48\u73b0\u5728\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5e94\u8be5\u600e\u4e48\u7b97\n\n\u6211\u4eec\u8bbe$s_i$\u8868\u793a$i$\u8fd9\u68f5\u5b50\u6811\u5185\u90e8\u6709\u591a\u5c11\u4e2a\u767d\u70b9\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9ed1\u70b9\u6765\u8bf4\u6240\u6709\u53ef\u80fd\u7684$lca$\u663e\u7136\u53ea\u80fd\u6765\u81ea\u4ece\u5b83\u5230\u6839\u7684\u8def\u5f84\u4e0a\n\n\u6839\u636e\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5dee\u5206\u601d\u60f3\n\n\u8fd9\u4e2a\u65f6\u5019\u7b54\u6848\u5c31\u662f\n\n$s_4*pre_4+(s_3-s_4)*pre_3+(s_2-s_3)*pre_2+(s_1-s_2)*pre_1$\n\n\u4e4b\u540e\u6109\u5feb\u7684\u62c6\u4e00\u4e0b\u518d\u5408\u4e00\u4e0b\uff0c\u53d8\u6210\u4e86\n\n$pre_1*s_1+s_2*(pre_2-pre_1)+s_3*(pre_3-pre_2)+s_4*(pre_4-pre_3)$\n\n\u5176\u4e2d$pre_1=0$\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\n\n$pre$\u662f\u4ec0\u4e48\u554a\uff0c\u6839\u8def\u5f84\u524d\u7f00\u548c\u554a\uff0c$pre_2-pre_1$\u662f\u4ec0\u4e48\u554a\uff0c\u4e0d\u5c31\u662f$2$\u5230$1$\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\u5417\n\n\u4e8e\u662f\u7b54\u6848\u5c31\u53d8\u6210\u4e86\u6709\u8da3\u7684$s_2*w_2+s_3*w_3+s_4*w_4$\uff0c$w_i$\u8868\u793a$i$\u70b9\u5230\u5176\u7236\u4eb2\u7684\u8fb9\u7684\u957f\u5ea6\n\n\u5982\u679c\u770b\u5230\u8fd9\u91cc\u80fd\u7406\u89e3\u8fd9\u4e2a\u5dee\u5206\u7684\u8bdd\uff0c\u90a3\u4e48\u6709\u4e00\u9053[\u6c34\u9898](https://www.luogu.org/problemnew/show/P4211)\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b\uff0c\u5c3d\u7ba1\u8fd9\u662f\u4e00\u9053\u6570\u636e\u7ed3\u6784\u9898\n\n\u6211\u4eec\u91cd\u65b0\u56de\u5230\u6700\u5f00\u59cb\u7684\u90a3\u4e2a\u67ff\u5b50\uff0c\u73b0\u5728\u7684\u95ee\u9898\u53d8\u6210\u4e86\u5982\u4f55\u5408\u7406\u5206\u914d\u9ed1\u70b9\u548c\u767d\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u67ff\u5b50\u7684\u503c\u6700\u5927\n\n\u6839\u636e\u6211\u4eec\u521a\u624d\u7684\u63a8\u5bfc\u6709\u8fd9\u6837\u51e0\u6761\u89c4\u5219\n\n1. \u4e00\u4e2a\u70b9$x$\u67d3\u6210\u9ed1\u8272\uff0c\u90a3\u4e48\u8d21\u732e\u662f$pre_x*(n-k)$\n\n1. \u4e00\u4e2a\u70b9$x$\u67d3\u6210\u767d\u8272\uff0c\u90a3\u4e48\u8d21\u732e\u662f$pre_x*k$\n\n1. \u5bf9\u4e8e\u6bcf\u6761\u8fb9\u8fd8\u5e94\u7edf\u8ba1\u8d21\u732e\uff0c\u8d21\u732e\u662f\u51cf\u6389\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4e58\u4ee5\u5176\u4e0b\u9762\u6709\u51e0\u4e2a\u767d\u70b9\uff0c\u540c\u65f6\u4e00\u6761\u8fb9\u53ef\u80fd\u4f1a\u88ab\u8fd9\u6837\u7684\u65b9\u5f0f\u8ba1\u7b97\u591a\u6b21\uff0c\u56e0\u4e3a\u8fd9\u6761\u8fb9\u4e0b\u65b9\u53ef\u80fd\u6709\u597d\u51e0\u4e2a\u9ed1\u70b9\uff08\u5176\u5b9e\u5c31\u662f\u4e0b\u9762\u6709\u591a\u5c11\u4e2a\u9ed1\u70b9\u7b97\u591a\u5c11\u6b21\uff09\n\n\u6709\u4e86\u8fd9\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u8bbe\u8ba1\u51fa\u72b6\u6001\u6765\uff0c\u7528$dp[i][j]$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u67d3$j$\u4e2a\u767d\u70b9\u7684\u6700\u5c0f\u8d21\u732e\u662f\u591a\u5c11\n\n\u8fd9\u6837\u7684\u8bdd\u76f4\u63a5\u6811\u5f62$dp$\u5c31\u597d\u4e86\uff0c\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5957\u8def\u7684\u6811\u4e0a\u80cc\u5305\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define re register\n#define maxn 2005\n#define LL long long\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nstruct E\n{\n\tint v,nxt,w;\n}e[maxn<<1];\nint n,num,K;\nint sum[maxn],head[maxn],deep[maxn];\nLL f[maxn],pre[maxn],dp[maxn][maxn],tf[maxn];\ninline void add_edge(int x,int y,int z)\n{\n\te[++num].v=y;\n\te[num].nxt=head[x];\n\te[num].w=z;\n\thead[x]=num;\n}\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')\n\t\tx=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\nvoid dfs(int x)\n{\n\tsum[x]=1;\n\tfor(re int i=head[x];i;i=e[i].nxt)\n\tif(!deep[e[i].v])\n\t{\n\t\tdeep[e[i].v]=deep[x]+1;\n\t\ttf[e[i].v]=e[i].w,pre[e[i].v]=pre[x]+e[i].w;\n\t\tdfs(e[i].v);\n\t\tsum[x]+=sum[e[i].v];\n\t\tf[x]+=f[e[i].v],f[x]+=sum[e[i].v]*e[i].w;\n\t}\n}\nvoid down(int x)\n{\n\tfor(re int i=head[x];i;i=e[i].nxt)\n\tif(deep[e[i].v]>deep[x])\n\t{\n\t\tf[e[i].v]+=f[x]-f[e[i].v]-sum[e[i].v]*e[i].w;\n\t\tf[e[i].v]+=(n-sum[e[i].v])*e[i].w;\n\t\tdown(e[i].v);\n\t}\n}\nvoid Redfs(int x)\n{\n\tdp[x][1]=-1*(LL)K*pre[x],dp[x][0]=-1*(LL)(n-K)*pre[x];\n\tfor(re int i=head[x];i;i=e[i].nxt)\n\tif(deep[e[i].v]>deep[x])\n\t{\n\t\tRedfs(e[i].v);\n\t\tfor(re int j=min(n-K,sum[x]);j>=0;j--)\n\t\t{\n\t\t\tLL mid=-9893849389343;\n\t\t\tfor(re int p=0;p<=j;p++)\n\t\t\t\tmid=max(mid,dp[x][j-p]+dp[e[i].v][p]);\n            //\u6811\u4e0a\u80cc\u5305\u5408\u5e76\uff0c\u8fd9\u91cc\u5c06\u8d21\u732e\u503c\u53d6\u53cd\u4e86\uff0c\u4e8e\u662f\u9700\u8981\u6c42\u6700\u5927\u503c\n\t\t\tdp[x][j]=mid;\n\t\t}\n\t}\n\tfor(re int j=0;j<=min(n-K,sum[x]);j++)\n\t\tdp[x][j]+=2*tf[x]*j*(sum[x]-j);\n}\nint main()\n{\n\tn=read(),K=read();\n\tint x,y,z;\n\tfor(re int i=1;i<n;i++) \n\t\tx=read(),y=read(),z=read(),add_edge(x,y,z),add_edge(y,x,z);\n\tdeep[1]=1,dfs(1),down(1);//\u5148\u6362\u6839dp\u6c42\u4e00\u4e0b\u603b\u7b54\u6848\n\tLL ans=0;\n\tfor(re int i=1;i<=n;i++)\n\t\tans+=f[i];//f[i]\u8868\u793a\u6240\u6709\u70b9\u5230\u70b9i\u7684\u8ddd\u79bb\u548c\n\tans>>=1ll;\n\tif(!K)\n\t{\n\t\tstd::cout<<ans;\n\t\treturn 0;\n\t}\n\tmemset(dp,-20,sizeof(dp));\n\tRedfs(1);\n\tans+=dp[1][n-K];\n\tstd::cout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1540302966,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709\u4e00\u68f5\u70b9\u6570\u4e3a N \u7684\u6811\uff0c\u6811\u8fb9\u6709\u8fb9\u6743\u3002\u7ed9\u4f60\u4e00\u4e2a\u5728 0~ N \u4e4b\u5185\u7684\u6b63\u6574\u6570 K \uff0c\u4f60\u8981\u5728\u8fd9\u68f5\u6811\u4e2d\u9009\u62e9 K\u4e2a\u70b9\uff0c\u5c06\u5176\u67d3\u6210\u9ed1\u8272\uff0c\u5e76\u5c06\u5176\u4ed6 \u7684N-K\u4e2a\u70b9\u67d3\u6210\u767d\u8272 \u3002 \u5c06\u6240\u6709\u70b9\u67d3\u8272\u540e\uff0c\u4f60\u4f1a\u83b7\u5f97\u9ed1\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\u52a0\u4e0a\u767d\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u548c\u7684\u53d7\u76ca\u3002\u95ee\u53d7\u76ca\u6700\u5927\u503c\u662f\u591a\u5c11\n\n## \u5b9e\u73b0\n\n**\u5982\u679c\u679a\u4e3e\u70b9\u5bf9\u6c42\u8d21\u732e\u4f1aT\u7684\u8bdd\uff0c\u4e0d\u59a8\u679a\u4e3e\u6bcf\u4e2a\u8fb9\u7684\u8d21\u732e**\n\n\u5b66\u5230\u4e86\uff0c\u679a\u4e3e\u8d21\u732e\uff1b\n\nDP\u72b6\u6001$dp[i][j]$\u8868\u793a\uff0c\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u9009\u51faj\u4e2a\u9ed1\u70b9\uff0c**\u5728\u8fd9\u8bfe\u5b50\u6811\u5185\u7684\u8fb9\u7684\u8d21\u732e\u548c**\uff1b\n\n\u6240\u4ee5\u6211\u4eec\u7684$dp[i][j]$\u771f\u7684\u662f\u4e00\u90e8\u5206\u7684\u95ee\u9898\uff0c\u4e0d\u4fdd\u5b58\u72b6\u6001\uff1b\n\n\u679a\u4e3e\u4e00\u4e2a\u8fb9\u7684\u8d21\u732e\uff0c\u5c31\u662f\u6bcf\u4e2a\u540c\u8272\u70b9\u5bf9\uff0c\n\n```\nint val = (k * (m - k) + (sz[v[i]] - k) * (n - sz[v[i]] - (m - k))) * w[i];\ndp[x][j] = max(dp[x][j], dp[x][j - k] + dp[v[i]][k] + val);\n```\n\u8bb0\u5f97\u521d\u59cb\u5316\uff1b\n\n\u5faa\u73af\u4e00\u5b9a\u8981j\u5012\u5e8f\uff0ck\u6b63\u5e8f\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7528j-k\u672a\u66f4\u65b0\u7684\u7b54\u6848\uff1b\n\n## \u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\n#define pb push_back\n#define gc getchar\ntemplate<class T>void in(T &x)\n{\n    x = 0; bool f = 0; char c = gc();\n    while (c < '0' || c > '9') {if (c == '-') f = 1; c = gc();}\n    while ('0' <= c && c <= '9') {x = (x << 3) + (x << 1) + (c ^ 48); c = gc();}\n    if (f) x = -x;\n}\n#undef gc\n#define N 2010\n#define M 4010\n#define int ll\nint n, m;\nint v[M], u[M], w[M], nx[M];\nint cnt, head[N];\nil void add(int uu, int vv, int ww) {\n    u[++cnt] = uu, v[cnt] = vv, w[cnt] = ww, nx[cnt] = head[uu];\n    head[uu] = cnt;\n}\nint dp[N][N], sz[N];\nint dfs(int x, int f) {\n    sz[x] = 1;\n    dp[x][0] = dp[x][1] = 0;\n    for (ri i = head[x]; i; i = nx[i]) {\n        if (v[i] == f) continue;\n        sz[x] += dfs(v[i], x);\n    }\n    for (ri i = head[x]; i; i = nx[i]) {\n        if (v[i] == f) continue;\n        for (ri j = min(sz[x], m); j >= 0; --j) {\n            for (ri k = 0; k <= min(sz[v[i]], j); ++k) {\n                if (dp[x][j - k] != -1) {\n                    int val = (k * (m - k) + (sz[v[i]] - k) * (n - sz[v[i]] - (m - k))) * w[i];\n                    dp[x][j] = max(dp[x][j], dp[x][j - k] + dp[v[i]][k] + val);\n                }\n            }\n        }\n    }\n    return sz[x];\n}\nsigned main() {\n    in(n), in(m);\n    if (n - m < m) m = n - m;\n    for (ri i = 1, a, b, c; i < n; ++i) {\n        in(a), in(b), in(c);\n        add(a, b, c);\n        add(b, a, c);\n    }\n    memset(dp, -1, sizeof(dp));\n    dfs(1, 0);\n    printf(\"%lld\", dp[1][m]);\n    return 0;\n}\n\n```",
        "postTime": 1531645390,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u597d\u9898-\u6811\u5f62DP-\u6811\u4e0a\u67d3\u8272-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u642c\u81ea[\u8fd9\u513f](https://blog.csdn.net/Diogenes_/article/details/81044483)\n\n### $Description$\n\n[\u4f20\u9001\u95e8](https://www.lydsy.com/JudgeOnline/problem.php?id=4033)\n\n\u6709\u4e00\u68f5\u70b9\u6570\u4e3a $N$ \u7684\u6811\uff0c\u6811\u8fb9\u6709\u8fb9\u6743\u3002\u7ed9\u4f60\u4e00\u4e2a\u5728 $0$ ~ $N$ \u4e4b\u5185\u7684\u6b63\u6574\u6570 $K$ \uff0c\u4f60\u8981\u5728\u8fd9\u68f5\u6811\u4e2d\u9009\u62e9 $K$ \u4e2a\u70b9\uff0c\u5c06\u5176\u67d3\u6210\u9ed1\u8272\uff0c\u5e76\u5c06\u5176\u4ed6\u7684 $N-K$ \u4e2a\u70b9\u67d3\u6210\u767d\u8272\u3002\u5c06\u6240\u6709\u70b9\u67d3\u8272\u540e\uff0c\u4f60\u4f1a\u83b7\u5f97\u9ed1\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\u52a0\u4e0a\u767d\u70b9\u4e24\u4e24\u4e4b\u95f4\u8ddd\u79bb\u7684\u548c\u7684\u6536\u76ca\u3002\n\n\u95ee\u6536\u76ca\u6700\u5927\u503c\u662f\u591a\u5c11\u3002\n\n### $Solution$\n\n\u6811\u5f62DP\u662f\u5f88\u597d\u770b\u51fa\u6765\u7684\u3002\n\n\u4f46\u662f\u786e\u5b9a\u72b6\u6001\u5e76\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u7684\u4e8b\u60c5\u4e86\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u5f62\u5982 $<u, v, w>$ \u7684\u8fb9\u80fd\u591f\u4ea7\u751f\u4ec0\u4e48\u8d21\u732e\u5427\u3002\n\n\u9898\u76ee\u4e2d\u63cf\u8ff0\uff0c\u4f60\u4f1a\u83b7\u5f97\u9ed1\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\u52a0\u4e0a\u767d\u70b9\u4e24\u4e24\u4e4b\u95f4\u8ddd\u79bb\u7684\u548c\u7684\u6536\u76ca\u3002\u90a3\u4e48\u5728 $u$ \u7684\u5de6\u4fa7\uff08\u5f88\u62bd\u8c61\u7684\u4e00\u4e2a\u8bf4\u6cd5\uff0c\u5c31\u7406\u89e3\u6210\u628a\u8fd9\u6761\u8fb9\u6446\u4e2d\u95f4\uff0c\u4e0e $u$ \u76f8\u8fde\u7684\u90a3\u4e00\u90e8\u5206\u90fd\u6446\u5728\u5de6\u8fb9\uff0c\u628a\u4e0e $v$ \u76f8\u8fde\u7684\u90fd\u6446\u5728\u53f3\u8fb9\uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e24\u4e2a\u90e8\u5206\u662f\u6ca1\u6709\u4ea4\u96c6\u7684\uff09\u7684\u9ed1\u70b9\uff08\u767d\u70b9\u540c\u7406\uff09\u548c $v$ \u7684\u53f3\u4fa7\u7684\u9ed1\u70b9\u4f1a\u4ea7\u751f\u4e24\u4e24\u914d\u5bf9\uff08\u6bcf\u4e2a\u90e8\u5206\u5185\u90e8\u7684\u5339\u914d\u4e0d\u5c5e\u4e8e\u8fd9\u6761\u8fb9\u6240\u4ea7\u751f\u7684\u8d21\u732e\uff09\uff0c\u7ed3\u679c\u4ea7\u751f\u7684\u6536\u76ca\u5c31\u662f $Black_u * Black_v * w$ \uff0c\u540c\u7406\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u6761\u8fb9\u80fd\u4ea7\u751f\u7684\u6536\u76ca\u53ef\u4ee5\u8868\u8ff0\u4e3a $(Black_u * Black_v + White_u * White_v) * w$ \u3002\n\n\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 $d(i, j)$ \u8868\u793a\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709 $j$ \u4e2a\u9ed1\u70b9\u80fd\u4ea7\u751f\u7684\u6700\u5927\u8d21\u732e\u3002\n\n\u6709\u4e86\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5c31\u989d\u5916\u8981\u9884\u5904\u7406\u51fa $size[]$ \u6570\u7ec4\u6765\u8bb0\u5f55\u4ee5\u67d0\u4e2a\u7ed3\u70b9\u4e3a\u6839\u65f6\u5b83\u7684\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u603b\u548c\u3002\n\n\u73b0\u5728\u601d\u8def\u5c31\u6e05\u6670\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7528 $dfs()$ \u8fb9\u9884\u5904\u7406\u8fb9\u8dd1DP\u3002\n\n$dfs()$ \u4e2d\u904d\u5386\u4e00\u6761\u8fb9 $<u, v>$ \u7ed3\u675f\u65f6\uff0c\u679a\u4e3e\u5de6\u53f3\u4e24\u8fb9\u7684\u9ed1\u70b9\u4e2a\u6570\uff0c\u8ba1\u7b97\u51fa\u5b83\u6240\u5e26\u6765\u7684\u8d21\u732e\uff0c\u5c06\u5176\u5e76\u5165\u7b54\u6848\u3002\u7136\u800c\u679a\u4e3e\u4e5f\u8981\u8bb2\u6c42\u7b56\u7565\uff0c\u6211\u4eec\u4ee4 $p$ \u662f\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u9ed1\u70b9\u6570\uff0c $q$ \u662f\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u9ed1\u70b9\u6570\u3002\n\n-  $Black_u = k - q$ \u5bb9\u65a5\u539f\u7406\n- $Black_v = q$ \u5df2\u77e5\u6761\u4ef6\n- $White_u = n - size[v] - (k - q)$ \u9996\u5148\u8ba1\u7b97\u51fa\u9664\u53bb\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u4e4b\u540e\u5168\u6811\u8fd8\u5269 $n - size[v]$ \u4e2a\u7ed3\u70b9\uff0c\u518d\u51cf\u53bb\u5176\u4e2d\u9ed1\u70b9\u7684\u6570\u76ee\u5373 $Black_u = k - q$ \u3002\n- $White_v = size[v] - q$ \u5bb9\u65a5\u539f\u7406\n\n\u8fd9\u6837\u6211\u4eec\u7684\u5f97\u51fa\u6765\u7684\u503c\u662f $d(v, q)$ \u800c\u4e0d\u662f $d(u, p)$ \u6211\u4eec\u9700\u8981\u7528 $d(u, p) = max(d(u, p), d(u, p - q) + d(v, q) + val)$ \u6765\u5c06\u5176\u5e76\u5165\u7b54\u6848\uff0c\u5176\u4e2d $val$  \u5c31\u662f\u8fd9\u6761\u8fb9\u7684\u8d21\u732e\uff0c $d(u, p - q)$ \u7684\u610f\u4e49\u662f $u$ \u7684\u5176\u4ed6\u513f\u5b50\u53ca\u5176\u5b50\u6811\u7684\u6700\u5927\u8d21\u732e\u3002\n\n\u6700\u540e\uff0c\u8fb9\u754c\u6761\u4ef6\u662f $d(u, 0) = d(u, 1) = 0$ \u800c\u5176\u4ed6\u90fd\u662f $-1$ \u8fd9\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u3002\n\n### $Code$\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define max(x, y) ((x) > (y) ? (x) : (y))\n#define min(x, y) ((x) < (y) ? (x) : (y))\n#define LL long long\n#define MAXN 2010\nstruct edgetype {\n\tint to, next, dist;\n}edge[MAXN << 1];\nint head[MAXN], cnt;\nint n, k, size[MAXN];\nLL d[MAXN][MAXN];\ninline void AddEdge(int from, int to, int dist) {\n\tedge[++cnt] = (edgetype){to, head[from], dist};\n\thead[from] = cnt;\n}\nvoid dfs(int u, int p) {\n\tsize[u] = 1;\n\td[u][0] = d[u][1] = 0;\n\tfor (int i = head[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to;\n\t\tif (v == p) continue;\n\t\tdfs(v, u);\n\t\tsize[u] += size[v];\n\t}\n\tfor (int i = head[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to, w = edge[i].dist;\n\t\tif (v == p) continue;\n\t\tfor (int p = min(size[u], k); p >= 0; p--) \n\t\t\tfor (int q = 0; q <= min(p, size[v]); q++) \n\t\t\t\tif (d[u][p - q] != -1) {\n\t\t\t\t\tLL val = 1ll * (q * (k - q) + (size[v] - q) * (n - k + q - size[v])) * w; \n\t\t\t\t\td[u][p] = max(d[u][p], d[u][p - q] + d[v][q] + val);\n\t\t\t\t}\n\t}\n}\nint main() {\n\tscanf(\"%d%d\", &n, &k);\t\t\n\tfor (int i = 1; i < n; i++) {\n\t\tint u, v, w;\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tAddEdge(u, v, w);\n\t\tAddEdge(v, u, w);\n\t}\n\tmemset(d, -1, sizeof d);\n\tdfs(1, 0);\n\tprintf(\"%lld\\n\", d[1][k]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1531555068,
        "uid": 12472,
        "name": "Nekroz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "\u548c\u5404\u4f4d\u5927\u4f6c\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u6211\u5e94\u8be5\u89e3\u91ca\u7684\u8be6\u7ec6\u4e00\u70b9\u3002\n\n\u524d\u7f6e\u58f0\u660e:   \n\u5982\u4f55\u5b9a\u4e49\"\u8d21\u732e\"?\n\n\u9898\u76ee\u8981\u6c42\u9ed1\u70b9\u4e24\u4e24\u8ddd\u79bb\u548c+\u767d\u70b9\u4e24\u4e24\u8ddd\u79bb\u548c,\u90a3\u4e48\u4e00\u5bf9\u9ed1\u70b9\u548c\u767d\u70b9\u7684\u8ddd\u79bb\u90fd\u4f1a\u88ab\u52a0\u5165\u5230\u7b54\u6848\u4e2d\u3002\u90a3\u4e48\uff0c\u8fd9\u4e00\u5bf9\u9ed1\u70b9\u548c\u767d\u70b9\u5bf9\u7b54\u6848\u5c31\u6709\u4e86\u8d21\u732e\u3002   \n\u6ce8\u610f:\u4e0d\u6b62\u4e00\u5bf9\u70b9\u53ef\u4ee5\u8d21\u732e\u7b54\u6848\uff0c\u4e00\u6761\u8fb9\uff0c\u4e00\u7ec4\u70b9\u7b49\u90fd\u53ef\u4ee5\u8d21\u732e\u7b54\u6848\u3002\n\n\u4e00\u6761\u8fb9\u7684\u8d21\u732e:    \n(\u5de6\u4fa7\u7684\u767d\u70b9\u4e2a\u6570$\\times$\u53f3\u4fa7\u7684\u767d\u70b9\u4e2a\u6570+\n\u5de6\u4fa7\u7684\u9ed1\u70b9\u4e2a\u6570$\\times$\u53f3\u4fa7\u7684\u9ed1\u70b9\u4e2a\u6570)$\\times$\u8fb9\u6743\n\n\u5982\u4f55\u5b9a\u4e49dp[i][j]?\n\ndp[i][j]\u8868\u793a\u4ee5i\u4e3a\u6839,\u4ee5\u4e0b\u9009j\u4e2a\u9ed1\u70b9\u5bf9\u7b54\u6848\u7684\u6700\u5927\u8d21\u732e\u3002\n\n\u6b63\u5f0f\u5f00\u59cb\u89e3\u9898:   \n\u5148\u9884\u5904\u7406\u597dsize[i],\u8868\u793a\u4ee5i\u4e3a\u6839(\u5305\u62eci)\u7684\u7ed3\u70b9\u4e2a\u6570.   \nsize[i]=1+size[\u6240\u6709i\u7684\u513f\u5b50]\n\n\u7136\u540e,\u7528cur\u8868\u793a\u5f53\u524d\u641c\u5230\u4e86\u54ea\u4e2a\u70b9,To\u8868\u793a\u5f53\u524d\u904d\u5386\u5230\u7684cur\u7684\u513f\u5b50,val\u8868\u793acur\u548cTo\u4e4b\u95f4\u8fde\u7684\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e,w\u8868\u793a\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6.\n\n\u679a\u4e3ei,j\uff0ci\u9009\u591a\u5c11\u9ed1\u70b9,j\u7528\u6765\u66f4\u65b0dp[cur][i] (j<i)\u3002\n\nval=w$\\times$   \n(j$\\times$(k-j))   \n//j\u662f\u8fb9\u4e0b\u9762\u7684\u9ed1\u70b9\u4e2a\u6570,k\u662f\u603b\u9ed1\u70b9\u4e2a\u6570,\u6240\u4ee5\u53e6\u4e00\u4fa7\u7684\u9ed1\u70b9\u6570\u5c31\u662fk-j   \n+((size[to]-j)$\\times$(n-k-(size[to]-j)))   \n//size[to]-j\u662f\u8fb9\u4e0b\u9762\u7684\u767d\u70b9\u4e2a\u6570(\u56e0\u4e3a\u8fb9\u4e0b\u9762\u7684\u603b\u70b9\u6570\u662fsize[to],\u9ed1\u70b9\u6570\u662fj,\u767d\u70b9\u6570\u5c31\u662fsize[to]-j),n-k\u662f\u603b\u767d\u70b9\u4e2a\u6570,\u6240\u4ee5\u53e6\u4e00\u4fa7\u7684\u767d\u70b9\u6570\u5c31\u662fn-k-(size[to]-j)\n\n\u53bb\u6389\u6ce8\u91ca:   \n$val=w\\times(j\\times(k-j))+((size[to]-j)\\times(n-k-(size[to]-j)))$  \n\n\u7136\u540e\u8fd9\u6837\u5b50\u8f6c\u79fb\u5c31\u53ef\u4ee5\u4e86.\u6ce8\u610f\u521d\u59cb\u72b6\u6001.Code:\n```cpp\n#include<bits/stdc++.h>\n#define Size 2010\n#define ll long long\nusing namespace std;\nll V,K;\n//V:n\n//K:k\nclass Graph//\u5b58\u56fe\u7c7b\n{\n    private:\n        ll head[Size];\n        ll EdgeCount=0;\n    public:\n        struct Edge\n        {\n            ll To;\n            ll Label;\n            ll Next=-1;\n            void SetValue(ll to,ll label,ll next)\n            {\n                To=to;\n                Label=label;\n                Next=next;\n            }\n        }Ed[Size<<1];\n        void clear()\n        {\n            EdgeCount=0;\n            memset(head,-1,sizeof(head));\n            memset(Ed,0,sizeof(Ed));\n            for(ll i=0;i<(Size<<1);i++)\n            {\n                Ed[i].Next=-1;\n            }\n        }\n        ll Head(ll Pos)\n        {\n            return head[Pos];\n        }\n        void AddEdge(ll From,ll To,ll Label)\n        {\n            EdgeCount++;\n            Ed[EdgeCount].SetValue(To,Label,head[From]);\n            head[From]=EdgeCount;\n        }\n}G;\n\nll size[2010];//\u6587\u4e2d\u63d0\u5230\u7684size\nll dp[2010][2010];//\u8fd9\u4e2a\u6587\u4e2d\u4e5f\u63d0\u5230\u4e86\nvoid dfs(ll cur,ll fath)\n{\n    size[cur]=1;\n    dp[cur][0]=dp[cur][1]=0;//\u521d\u59cb\u72b6\u6001\n    for(ll i=G.Head(cur);~i;i=G.Ed[i].Next)//\u904d\u5386\u6bcf\u6761\u8fb9\n    {\n        Graph::Edge Temp=G.Ed[i];//\u4e34\u65f6\u53d6\u51fa\u5f53\u524d\u8fb9\n        int To=Temp.To;//\u80fd\u5230\u7684\u70b9\n\n        if (To!=fath)//\u8fd9\u4e2a\u5f88\u91cd\u8981\uff0c\u9632\u6b62\u641c\u56de\u7236\u4eb2\n        {\n            dfs(To,cur);//\u7ee7\u7eed\u641c\u513f\u5b50\n            size[cur]+=size[To];//\u8bb0\u5f97\u66f4\u65b0\n        }\n    }\n    for(ll e=G.Head(cur);~e;e=G.Ed[e].Next)\n    {\n        Graph::Edge Temp=G.Ed[e];//\u4e34\u65f6\u53d6\u8fb9\n        ll To=Temp.To;//\u5373\u6587\u4e2d\u7684v\n        if (To!=fath)\n        {\n            ll w=Temp.Label;//\u8be5\u8fb9\u7684\u957f\u5ea6\n            for(ll i=min(K,size[cur]);i>=0;i--)//\u6ce8\u610f\u8303\u56f4\n            {\n                for(ll j=0;j<=min(i,size[To]);j++)\n                {\n                    if (~dp[cur][i-j])//\u8fd9\u4e2a\u4e00\u5b9a\u8981\u5224!!!\n                    {\n                        ll val=w*(j*(K-j)+(size[To]-j)*(V-K-(size[To]-j)));\n                        dp[cur][i]=max(dp[cur][i],dp[cur][i-j]+dp[To][j]+val);\n                        //\u90a3\u4e2a\u957f\u7684\u4e0d\u5f97\u4e86\u7684\u8f6c\u79fb\u65b9\u7a0b\n                    }\n                }\n            }\n        }\n    }\n}\nvoid Init()//\u521d\u59cb\u5316Initialise\n{\n    G.clear();\n    memset(dp,-1,sizeof(dp));\n}\nvoid Input()//\u8f93\u5165\u6570\u636e\n{\n    scanf(\"%d%d\",&V,&K);\n    for(ll i=1;i<V;i++)\n    {\n        ll a,b,w;\n        scanf(\"%lld%lld%lld\",&a,&b,&w);\n        G.AddEdge(a,b,w);\n        G.AddEdge(b,a,w);\n    }\n}\nint main()\n{\n    Init();\n    Input();\n    dfs(1,0);\n    printf(\"%lld\\n\",dp[1][K]);\n    return 0;//5\u884c\u4e3b\u51fd\u6570.....\n}\n\n```",
        "postTime": 1548755344,
        "uid": 106252,
        "name": "LightningUZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "### **\u6055\u6211\u76f4\u8a00\uff0c\u697c\u4e0b\u7684\u4ee3\u7801\u5230BZOJ\u4e0a\u90fd\u4f1aTLE\u5230\u98de\u8d77**\n\n\u5b9a\u4e49\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u65f6\u95f4\u590d\u6742\u5ea6\u7edd\u975e$O(N*N)$\u8fd9\u4e48\u7b80\u5355\n\n*\u867d\u7136\u6211\u592a\u5f31\uff0c\u8bc1\u4e0d\u51fa\u5177\u4f53\u590d\u6742\u5ea6\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\u590d\u6742\u5ea6\u4e3a#### $O(K*N*N)$,\u4e14K\u4e0d\u5c0f*\n\n\u4f46\u5b9e\u9a8c\u4e86\u4e00\u4e0b\uff0c\u53ea\u6709\u7528\u5f53\u524d\u89e3\u66f4\u65b0\u4e4b\u540e\u7684\u6700\u4f18\u89e3\u624d\u53ef\u4ee5\u52c9\u52c9\u5f3a\u5f3a\u5730\u5361\u8fc7\u53bb\uff08700ms+\uff09\n```c++\n#pragma GCC optimize(6)\n#include<cstdio>\n#include<cstring>\n#define LL long long \nusing namespace std;\nconst int maxn=2005;\nint n,k,S[maxn];LL f[maxn][maxn];\n\ntemplate<typename Tp>Tp Max(Tp x,Tp y){return x>y?x:y;}\ntemplate<typename Tp>Tp Min(Tp x,Tp y){return x<y?x:y;}\n\nint tot,lnk[maxn],nxt[maxn<<1],son[maxn<<1];LL w[maxn<<1];\nvoid add_e(int x,int y,int z){son[++tot]=y,w[tot]=z,nxt[tot]=lnk[x],lnk[x]=tot;} \n\nchar gt(){\n\tstatic char buf[100000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\nint read(){\n\tint ret=0;bool f=0;char ch=gt();\n\twhile(ch<'0'||ch>'9') f|=(ch=='-'),ch=gt();\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=gt();\n\treturn f?-ret:ret;\n}\n\nvoid DFS(int x,int fa){\n\tS[x]=1,f[x][0]=f[x][1]=0;\n\tfor(int j=lnk[x];j;j=nxt[j])if(son[j]!=fa){\n\t\tDFS(son[j],x);\n\t\tfor(int t=Min(S[x],k);t>=0;t--)\n\t\t  for(int i=Min(k-t,S[son[j]]);i>=0;i--) f[x][i+t]=Max(f[x][i+t],f[x][t]+f[son[j]][i]+w[j]*(i*(k-i)+(S[son[j]]-i)*(n-S[son[j]]-k+i)));\n\t\tS[x]+=S[son[j]];\n\t}\n}\n\nint main(){\n\tn=read(),k=read();memset(f,192,sizeof f);\n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd_e(x,y,z),add_e(y,x,z);\n\t}\n\tDFS(1,0);\n\tprintf(\"%lld\\n\",f[1][k]);\n\treturn 0;\n}\n```",
        "postTime": 1531553943,
        "uid": 36779,
        "name": "ff_666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "\u6211\u4eec\u7528\u8d21\u732e\u6cd5\u8003\u8651\u4e00\u6761\u8fb9\u4f1a\u88ab\u7b97\u591a\u5c11\u6b21 \n\n\u6211\u4eec\u53ef\u80fd\u4f1a\u8bbe\u4e3a$f_{i,j,k}$\u8868\u793a\u4ee5$i$\u4e3a\u6839\uff0c\u524d$j$\u4e2a\u513f\u5b50\uff0c\u9009$k$\u4e2a\u9ed1\u70b9\uff0c\u5bf9\u73b0\u5728\u524dj\u4e2a\u5b50\u6811\u6240\u5728\u96c6\u5408\u7684\u6700\u5927\u8d21\u732e \n\n\u4f46\u8fd9\u6837\u6211\u4eec\u5408\u5e76\u96c6\u5408\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6f0f\u8ba1\u7b97\u4e86\u539f\u5c0f\u96c6\u5408\u7684\u8fb9\u5230\u5927\u96c6\u5408\u7684\u8d21\u732e\uff0c\n\n\u56e0\u6b64\u8bbe\u4e3a\u4ee5$i$\u4e3a\u6839\u5b50\u6811\uff0c\u524d$j$\u4e2a\u513f\u5b50\uff0c\u9009$k$\u4e2a\u9ed1\u70b9\u5bf9\u6574\u68f5\u6811\u7684\u6700\u5927\u8d21\u732e\n\n\u8fd9\u6837\u4e00\u6761\u8fb9\u4f1a\u5728\u7b2c\u4e00\u6b21\u7528\u4ed6\u5408\u5e76\u65f6\u5c31\u8ba1\u7b97\u65f6\u5c31\u7b97\u51fa\u5b83\u5bf9\u6700\u7ec8\u7b54\u6848\u8d21\u732e \n\n\u6ce8\u610f\u4e00\u4e0b$size$\u5408\u5e76\u4f4d\u7f6e\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define INF 0x3f3f3f3f3f3f3f3f\n#define N 2005\nusing namespace std;\ntemplate<typename _ll>\ninline void read(re _ll& x){\n\tre char opt;re _ll flag=1,res=0;\n\twhile((opt=getchar())<'0'||opt>'9')if(opt=='-')flag=-1;\n\twhile(opt>='0'&&opt<='9'){res=(res<<3)+(res<<1)+opt-'0';opt=getchar();}\n\tx=res*flag;\n}\ntypedef long long ll; \nstruct Edge{\n\tll to,next,v;\n}e[N<<1];\nll dp[N][N],n,K,cnt,h[N],size[N];\ninline void AddEdge(re ll x,re ll y,re ll z){e[++cnt]=(Edge){y,h[x],z};h[x]=cnt;}\ninline void tree_pack(re ll x,re ll prt){\n\tre ll i,j,k,y;size[x]=1;\n\tdp[x][1]=*dp[x]=0;\n\tfor(i=h[x];i;i=e[i].next){\n\t\ty=e[i].to;if(y==prt)continue;\n\t\ttree_pack(y,x);\n\t\tsize[x]+=size[y];\n\t\tfor(j=min(size[x],K);j>=0;--j)\n\t\t\tfor(k=0;k<=min(j,size[y]);++k)\n\t\t\t\tdp[x][j]=max(dp[x][j],dp[y][k]+dp[x][j-k]+e[i].v*(k*(K-k)+(size[y]-k)*(n-size[y]-K+k)));\n\t}\n}\ninline void Read(void){\n\tre ll i,x,y,z;\n\tread(n);read(K);\n\tfor(i=1;i<n;++i){read(x);read(y);read(z);AddEdge(x,y,z);AddEdge(y,x,z);}\n}\nint main(void){\n//\tfreopen(\"income.in\",\"r\",stdin);\n//\tfreopen(\"income.out\",\"w\",stdout);\n\tmemset(dp,0xc0,sizeof dp);\n\tRead();\n\ttree_pack(1,0);\n\tprintf(\"%lld\\n\",dp[1][K]);\n\treturn 0;\n}\n/*\n3 1\n1 2 1\n1 3 2\n*/\n```",
        "postTime": 1566472924,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "\u9898\u76ee\uff1ahttps://www.luogu.org/problem/P3177\n#### 1-->\u5173\u4e8e\u7b2c\u4e8c\u7ef4\u5012\u5e8f\u95ee\u9898\n   \u7531\u8f6c\u79fb\u65b9\u7a0b\u53ef\u770b\u51faf[x][j]\u7531f[x][j-k]\u8f6c\u79fb\u800c\u6765\uff0c\u5982\u679c    \u6b63    \u5e8f\u679a\u4e3e\uff0cf[x][j-k]\u4f1a\u5148\u88ab\u66f4\u65b0\u3002\n   \n###    \u540e\u8bb0\n   \u540e\u8bb0\u52a0\u5728\u8fd9\u91cc\u7684\u786e\u5f88\u5947\u602a\n###    1\n     \u5927\u5bb6\u5e94\u8be5\u770b\u8fc7\u522b\u7684\u9898\u89e3\u5173\u4e8ek\u4e3a\u4ec0\u4e48\u6b63\u5e8f\u7684\u95ee\u9898\uff0c\u9996\u5148\u8981\u660e\u767df\u8bb0\n     \u5f55\u7684\u662f\u8d21\u732e\u503c\uff0cf[x][i]\u5e76\u4e0d\u4ee3\u8868\u5728x\u6811\u4e0a\u7684\u7b54\u6848\u3002f[x][y]\u7531\n     f[x][j-k]\u8f6c\u79fb\u800c\u6765\uff0c\u6240\u4ee5f[x][j-k]\u5fc5\u987b\u672a\u66f4\u65b0\u8fc7\uff0c\u6240\u4ee5\u7b2c\u4e8c\n     \u7ef4\u8981\u5148\u8ba1\u7b97\u8f83\u5927\u503c\u3002\n###      2\n```cpp\ninline void dfs(int x,int fa)\n{\n\tsize[x]=1;\n\tfor(int i=hea[x];i;i=nex[i]){\n\t\tint y=ver[i],z=edge[i];\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);\n\t\tfor(int i=min(k,size[x]);i>=0;i--){\n\t\t\tfor(int j=min(size[y],k-i);j>=0;j--){\n\t\t\t\tll val=(ll)j*(k-j)*z+(ll)(size[y]-j)*(n-size[y]-k+j)*z;\n\t\t\t\tf[x][i+j]=max(f[x][i+j],f[x][i]+f[y][j]+val);\n\t\t\t}\n\t\t}\n\t\tsize[x]+=size[y];\n\t}\n}\n\n```\n   \u8fd9\u79cd\u5199\u6cd5\u4e0d\u80fd\u591f\u6b63\u5e8f\uff0c\u539f\u56e0\u540c\u4e0a\u3002\n   \u53ea\u80fd\u6b63\u5e8f\u679a\u4e3e\u3002\n\n------------\n\n\n\n   \n   \n\u5173\u4e8e\u72b6\u6001\u8f6c\u79fb\u7684\u5f97\u6765\uff0c\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u5f88\u8be6\u7ec6\u4e86\u3002\n### 2-->```\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nconst int N=2e3+10;\nint n,m,k,tot;\nint ver[2*N],hea[N],nex[2*N],edge[2*N];\nint size[N];\nll f[N][N];\n\ntemplate <class T>\ninline void read(T &x)\n{\n\tx=0;bool v=0;char  ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')v=1;\n\t\tch=getchar();\n\t}\n\twhile(ch<='9'&&ch>='0'){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\tif(v)x=-x;\n}\n\ninline void add(int x,int y,int z)\n{\n\tver[++tot]=y;nex[tot]=hea[x];\n\thea[x]=tot,edge[tot]=z;\n}\n\ninline void dfs(int x,int fa)\n{\n\tsize[x]=1;\tf[x][0]=f[x][1]=0;\n\tfor(int p=hea[x];p;p=nex[p]){\n\t\tint y=ver[p],z=edge[p];\n\t\tif(y==fa)continue;\n\t\tdfs(y,x);size[x]+=size[y];\n\t\tfor(int i=min(k,size[x]);i>=0;i--){\n\t\t\tfor(int j=0;j<=min(i,size[y]);j++){\n\t\t\t\tif(f[x][i-j]==-1)continue;\n\t\t\t\tll val=(ll)j*(k-j)*z+(ll)(size[y]-j)*(n-size[y]-k+j)*z;\n\t\t\t\tf[x][i]=max(f[x][i],f[x][i-j]+f[y][j]+val);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tread(n);read(k);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y,z;\n\t\tread(x),read(y),read(z);\n\t\tadd(x,y,z);add(y,x,z);\n\t}\n\tmemset(f,-1,sizeof(f));\n\tdfs(1,0);\n\tprintf(\"%lld\",f[1][k]);\n\treturn 0;\n}\n```\n\n\u5173\u4e8e\u672c\u9898\uff1a\n#####   \u4e3a\u4ec0\u4e48f\u7f6e\u4e3a-1\uff0cf[x][i-j]==-1\u5c31\u4e0d\u66f4\u65b0\uff1a\n   f[x][0]=f[x][1]=0;\u5f53\u524d\u672a\u6269\u5c55\u5176\u4ed6\u5b50\u6811\uff0c\u65e0\u8bbax\u67d3\u767d\u8fd8    \u662f\u67d3\u9ed1\u90fd\u6ca1\u6709\u8d21\u732e\u3002\n   \u5f53\u6269\u5c55\u7684\u5b50\u6811\u53ef\u67d3\u9ed1\u7684\u8282\u70b9\u4e0d\u8db3j\u4e2a\u65f6\u4e0d\u8fdb\u884c\u8f6c\u79fb\uff08\u5373      f[x][i-j]==-1\uff09\u3002\n   \u6bd4\u5982\u5f53\u8ba1\u7b97x\u65f6\u7b2c\u4e00\u4e2a\u5b50\u6811\u5927\u5c0f\u4e3a5\uff0c\u5f53j==5\u65f6\u624d\u8fdb\u884c\u8f6c    \u79fb\uff0c\u4e3a\u4ec0\u4e48j==0\u65f6\u4e0d\u80fd\u8fdb\u884c\u8f6c\u79fb\u5462\uff1f\u56e0\u4e3a\u5f53j==0\u4ee3\u8868\u5b50    \u6811\u9009\u53d60\u4e2a\u9ed1\u70b9\uff0c\u4f46\u662fi==6\uff0c\u90a3\u4e48x\u4e00\u4e2a\u70b9\u4e0d\u53ef\u80fd\u9009\u51fa\u4e94    \u4e2a\u70b9\u6765\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u5f53f[x][i-j]==-1\u4e0d\u80fd\u8fdb\u884c\u8f6c\u79fb\u3002",
        "postTime": 1565859033,
        "uid": 169137,
        "name": "k\uff0c\u706b\u9b42",
        "ccfLevel": 0,
        "title": "P3177 [HAOI2015]\u6811\u4e0a\u67d3\u8272\uff08\u6811\u5f62\u80cc\u5305\uff09"
    },
    {
        "content": ")# \u9898\u610f\n\n\u4ece\u4e00\u9897\uff4e\u4e2a\u8282\u70b9\u7684\u6811\u4e2d\u9009\u51fa\uff4b\u4e2a\u70b9\u6d82\u6210\u9ed1\u8272\uff0c\u5176\u4f59\u70b9\u4e3a\u767d\u8272\uff0c\u8ba1\u7b97\u8fd9\u9897\u6811\u7684\u4ef7\u503c\u4e3a\u9ed1\u70b9\u4e0e\u9ed1\u70b9\uff0c\u767d\u70b9\u4e0e\u767d\u70b9\uff0c\u8ddd\u79bb\u603b\u548c\uff0c\u95ee\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\n\n# \u5206\u6790\n\n\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u67d0\u6761\u4ef7\u503c\u4e3a\uff43\u7684\u8fb9\uff0c\u5de6\u8fb9\u6709\uff581\u4e2a\u767d\u70b9\uff0c\uff59\uff11\u4e2a\u9ed1\u70b9\uff0c\u53f3\u8fb9\u6709\uff58\uff12\u4e2a\u767d\u70b9\uff0c\uff59\uff12\u4e2a\u9ed1\u70b9\uff0c\u53ef\u4ee5\u4ea7\u751f\u7684\u4ef7\u503c\u662f$(x_1 \\cdot x_2 + y_1 \\cdot y_2)\\cdot c$\n\n\u8bbedp\\[i\\]\\[j\\]\u8868\u793a\u4ee5\uff49\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u9009\u4e86\uff4a\u4e2a\u9ed1\u8272\u8282\u70b9\uff08\uff49\u2265\uff4a\uff09\uff0c\u5b50\u6811\u4e2d\u7684\u8fb9\u4ea7\u751f\u7684\u6700\u5927\u4ef7\u503c\u548c\n\n\u6240\u4ee5\u8003\u8651\u5f53\u524d\u8282\u70b9\uff55\uff0c\u5f53\u6211\u4eec\u66f4\u65b0dp\\[u\\]\\[i\\]\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5b83\u7684\u82e5\u5e72\u5b50\u6811\u4e2d\u5206\u522b\u9009\u62e9\u4e00\u4e9b\u70b9\uff0c\u8ba1\u7b97\u6bcf\u6761\u8fde\u5411\u5b50\u6811\u7684\u8fb9\u4ea7\u751f\u7684\u4ef7\u503c\n\n\u666e\u901a\u7684\u80cc\u5305\u95ee\u9898\uff0cdp\\[i\\]\\[j\\]\u89e3\u51b3\u9009\u5230\u7b2ci\u4e2a\u7269\u54c1\uff0c\u603b\u5bb9\u91cf\u4e3a\uff4a\u7684\u6700\u5927\u4ef7\u503c\uff0c\u5176\u4e2d\uff49\u53ef\u4ee5\u6eda\u52a8\u4f18\u5316\u6389\uff0c\u53ea\u4f7f\u7528\u7ebf\u6027\u7a7a\u95f4\u3002\n\n\u5728\u8fd9\u4e2a\u95ee\u9898\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5b50\u6811\u770b\u505a\u7269\u54c1\uff0c\u505a\u591a\u91cd\u80cc\u5305\u3002\n\n\u8003\u8651\u5f53\u524d\u5b50\u6811v\uff0c\u6211\u4eec\u4ece\u4e2d\u9009\u62e9j\u4e2a\u8282\u70b9\uff0c\u5bf9\u5b50\u6811u,\u9009\u62e9i\u4e2a\u8282\u70b9\u4ea7\u751f\u7684\u8d21\u732e\n$$\ndp[u][i] = max(dp[u][i],dp[u][i-j]+dp[v][j]+cal(j,num[v]-j,val)\n$$\nnum[v]\u8868\u793a\u5b50\u6811\u7684\u5927\u5c0f\uff0cval\u8868\u793au\u5230v\u8fb9\u7684\u957f\u5ea6\n$$\ncal(x1,y1,c) = (x_1 \\cdot (k-x_1) + y_1 \\cdot (n-k-y_2))\\cdot c\n$$\n\n\n# \u4ee3\u7801\n```\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 2005;\n\nint n,k;\n\nint head[N],cnt;\nstruct Edge {\n    int v,w,nex;\n    void add(int x,int y,int c) {\n        v = y;w = c;\n        nex = head[x];\n        head[x] = cnt;\n    }\n}edge[N<<1];\n\nll dp[N][N]; // \u4ee5i\u4e3a\u8282\u70b9\u7684\u5b50\u6811\uff0c\u6709j\u4e2a\u9ed1\u8272\u8282\u70b9\u7684\u5b50\u6811\u5185\u7684\u8fb9\u4ea7\u751f\u7684\u6700\u5927\u4ef7\u503c\nint num[N];\n\n inline ll cal (int x, int y, int val) {\n    int num = x*(k-x) + (y)*(n-k-y);\n    return (ll)num*val;\n}\n\nvoid dfs(int now, int pre) {\n//cout << now<<\" \"<<pre<<endl;\n    num [now] = 1;\n    for(int i = head[now]; i; i=edge[i].nex) {\n        Edge &it = edge[i];\n        if(it.v == pre) continue;\n\n        dfs(it.v, now);\n\n        num [now] += num[it.v];\n    }\n\n    for(int i=2;i<=num[now];i++) dp[now][i] = -1;\n    dp[now][0] = dp[now][1] = 0;\n    for(int _ = head[now]; _; _=edge[_].nex) {\n        Edge& it = edge[_];\n       // cout<<it.v<<\" \"<<it.w<<endl;\n\n        if(it.v == pre) continue;\n\n        for (int i = min(num[now],k);i>=0;i--) {\n            int en = min(i,num[it.v]);\n            for(int j = 0;j <= en;j++){\n                if(dp[now][i-j]==-1) continue;\n                dp[now][i] = max(dp[now][i], dp[now][i-j] + dp[it.v][j] + cal(j,num[it.v]-j, it.w));\n            }\n        }\n\n\n    }\n}\n\nint main() {\n    scanf (\"%d %d\",&n, &k);\n    int x,y,w;\n\n    for(int i = 1; i < n; i ++) {\n        scanf (\"%d %d %d\",&x, &y, &w);\n        edge[++cnt].add(x,y,w);\n        edge[++cnt].add(y,x,w);\n    }\n    dfs(1, 0);\n\n    printf(\"%lld\\n\",dp[1][k]);\n\n}\n\n```",
        "postTime": 1564108447,
        "uid": 24071,
        "name": "greenty",
        "ccfLevel": 0,
        "title": "\u3010[HAOI2015]\u3011\u6811\u4e0a\u67d3\u8272\uff08\u6811\u578b\u80cc\u5305\uff09"
    },
    {
        "content": "dp[u][j]\u8868\u793au\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u6709j\u4e2a\u9ed1\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u6ce8\u610f\u662f\u8d21\u732e\uff01\uff01\n\n\u7136\u540e\u7528\u8fb9\u8ba1\u7b97\u8d21\u732e\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define int long long\nusing namespace std;\nconst int N=2005;\nstruct edge{\n\tint link,next,val;\n}e[N<<1];\nint n,K,tot,head[N];\ninline void add_edge(int u,int v,int w){\n\te[++tot]=(edge){v,head[u],w}; head[u]=tot;\n}\ninline void insert(int u,int v,int w){\n\tadd_edge(u,v,w); add_edge(v,u,w);\n}\ninline void init(){\n\tscanf(\"%lld%lld\",&n,&K); \n\tfor (int i=1;i<n;i++){\n\t\tint u,v,w; scanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tinsert(u,v,w);\n\t}\n}\nint dp[N][N],size[N];\nvoid dfs(int u,int fa){\n\tsize[u]=1; dp[u][1]=0;\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=fa){\n\t\t\tdfs(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tfor (int j=min(size[u],K);j>=0;j--){\n\t\t\t\tfor (int k=0;k<=min(size[v],j);k++){\n\t\t\t\t\tdp[u][j]=max(dp[u][j],dp[u][j-k]+dp[v][k]+(k*(K-k)+(size[v]-k)*(n-K+k-size[v]))*e[i].val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nconst int inf=1e18;\nvoid solve(){\n\tfor (int i=1;i<=n;i++){\n\t\tfor (int j=1;j<=K;j++){\n\t\t\tdp[i][j]=-inf;\n\t\t}\n\t}\n\tdfs(1,0);\n\tprintf(\"%lld\\n\",dp[1][K]);\n}\nsigned main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1531546789,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    },
    {
        "content": "#### Solution\n\u8fd9\u4e2a\u9898\u76ee\u770b\u4e0a\u53bb\u5c31\u662f\u4e00\u4e2a\u6811\u5f62dp\u554a\u2026\u2026[\u6bd4\u8f83\u7b80\u5355\u7684\u6811\u5f62dp](https://www.luogu.org/problemnew/show/P2014)\n\n\u9996\u5148\u2026\u2026\u53d1\u73b0\u4e00\u6761\u8fb9\u5bf9\u7b54\u6848\u4ea7\u751f\u7684\u8d21\u732e\u53ea\u548c\u4e24\u4fa7\u7684\u9ed1\u70b9\u6570\u767d\u70b9\u6570\u6709\u5173\u800c\u548c\u70b9\u7684\u5177\u4f53\u5206\u5e03\u65e0\u5173.\u6240\u4ee5\u4e00\u6761\u8fb9\u53e6\u4e00\u4fa7\u5177\u4f53\u600e\u4e48\u653e\u9ed1\u70b9\u5bf9\u8fd9\u6761\u8fb9\u4ea7\u751f\u7684\u8d21\u732e\u65e0\u5173.\u56e0\u6b64\u53ea\u9700\u8981\u6c42\u51fa\u6bcf\u6761\u8fb9\u5bf9\u7b54\u6848\u8d21\u732e\u7684\u548c\u5373\u53ef.\n\n\u8bbe$f(i,j)$\u8868\u793a$i$\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e0a\u9009\u62e9$j$\u4e2a\u9ed1\u70b9\u7684\u6574\u4e2a\u5b50\u6811\u7684\u8d21\u732e.\u6839\u636e\u4e00\u822c\u6811\u5f62dp\u7684\u7ecf\u9a8c\u2026\u2026\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u679a\u4e3e\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u6765\u8ba1\u7b97$f(i,j)$.\u8bbe$i$\u7684\u5b50\u8282\u70b9\u4f9d\u6b21\u4e3a$s_1,s_2,\\cdots,s_k$,\u90a3\u4e48\n$$f(i,j)=\\max\\sum_{q=1}^{p-1}f(s_q,a_q)+f(s_p,j-\\sum_{q=1}^{p-1}a_q)+\\text{Value},p={1,2,\\cdots,k}$$\n\u8fd0\u7528\u6811\u5f62dp\u66f4\u65b0\u7684\u6280\u5de7, \u53ef\u4ee5\u5c06$\\sum\\limits_{q=1}^{p-1}f(s_q,a_q)$\u8868\u793a\u4e3a$f(i,\\sum_{q=1}^{p-1}a_q)$.\u5176\u5b9e\u5c31\u662f\u4e0b\u9762\u7684`f[u][ss-j]`\n```c++\nf[u][ss]=max(f[u][ss],f[u][ss-j]+f[e[i].v][j]+\n                (j*(k-j)+(son[e[i].v]-j)*(n-k+j-son[e[i].v]))*e[i].dis);\n```\n\n\u5176\u4e2d$Value$\u8868\u793a\u8fd9\u6761\u8fb9$(i,s_p)$\u5bf9\u7b54\u6848\u7684\u8d21\u732e.$\\text{Value}$\u7684\u503c$(W_l\\times W_r+B_l\\times B_r)\\times Val_{(i,s_p)}$,\u5176\u4e2d$W_l,B_l,W_r,B_r$\u5206\u522b\u8868\u793a\u8fb9\u4e00\u4fa7\u548c\u53e6\u4e00\u4fa7\u767d\u9ed1\u70b9\u7684\u6570\u91cf\u2026\u2026\n\n\u54e6, \u5bf9\u4e86\u6ce8\u610f\u4e00\u4e2a\u5c0f\u7ec6\u8282\u2026\u2026\u4e00\u5b9a\u8981\u5c06$f[][]$\u521d\u59cb\u5316\u4e3a\u6700\u5c0f\u503c, \u4e0d\u7136\u2026\u2026\u6211\u8bd5\u8fc7\u7684\u2026\u2026\n#### Code\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define N 2005\nusing namespace std;\n#define int long long\n\nstruct Edge{\n    int v,dis,nxt;\n}e[N<<1];\nint head[N],tot;\n\nvoid AddEdge(int u,int v,int d){\n    e[++tot]=(Edge){v,d,head[u]};head[u]=tot;\n    e[++tot]=(Edge){u,d,head[v]};head[v]=tot;\n}\nint son[N],f[N][N];\nint n,k;\n\nint find(int u,int fa){\n    son[u]=1;\n    for(int i=head[u];i;i=e[i].nxt){\n        if(e[i].v==fa)continue;\n        son[u]+=find(e[i].v,u);\n        for(int ss=min(son[u],k);ss>=0;--ss)\n            for(int j=0;j<=min(son[e[i].v],ss);++j){\n                f[u][ss]=max(f[u][ss],f[u][ss-j]+f[e[i].v][j]+\n                (j*(k-j)+(son[e[i].v]-j)*(n-k+j-son[e[i].v]))*e[i].dis);\n            }\n    }\n    return son[u];\n}\n\nmain(){\n    int u,v,d;\n    scanf(\"%lld%lld\",&n,&k);\n    for(int i=1;i<n;++i){\n        scanf(\"%lld%lld%lld\",&u,&v,&d);\n        AddEdge(u,v,d);\n    }\n    find(1,0);\n    printf(\"%lld\\n\",f[1][k]);\n    return 0;\n}\n```",
        "postTime": 1530188669,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3177 \u3010[HAOI2015]\u6811\u4e0a\u67d3\u8272\u3011"
    }
]