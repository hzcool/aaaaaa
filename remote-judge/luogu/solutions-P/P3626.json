[
    {
        "content": "# \u5199\u5728\u524d\u9762\n\n\u8fd9\u9053\u9898\u771f\u7684\u662f\u795e\u6bd2\u7624\u9898\u3002\u8d28\u91cf\u5f88\u597d\uff0c\u6bd2\u7624\u4e3b\u8981\u662f\u9898\u89e3\u5199\u7684\u90fd\u592a\u7b80\u7565\u4e86\uff0c\u5c31\u597d\u50cf\u7b2c\u4e00\u95ee\u9ed8\u8ba4\u5927\u5bb6\u90fd\u4f1a\u4e00\u6837\uff0c\u7136\u540e\u5404\u79cd\u505a\u6cd5\u5c42\u51fa\u4e0d\u7a77\uff0c\u4e5f\u4e0d\u8bb2\u4e00\u8bb2\u76f4\u63a5\u653e\u4ee3\u7801\u3002\u53cd\u6b63\u6211\u4f5c\u4e3a\u4e00\u4e2a\u9605\u8bfb\u8005\u4f53\u9a8c\u975e\u5e38\u4e0d\u597d\u3002\u8c03\u4e86\u4e00\u5929\u7ec8\u4e8e\u5f04\u61c2\u4e86\uff0c\u6765\u8865\u4e00\u7bc7\u6b63\u89e3\u7684\u8be6\u7ec6\u505a\u6cd5\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- \u500d\u589e\n- \u8d2a\u5fc3\n- STL\uff1a```set``` \u7528\u6cd5\n- \u79bb\u6563\u5316\n\n## \u9898\u76ee\u63cf\u8ff0\uff08\u6233\u8fd9\u91cc[\u67e5\u770b\u539f\u9898](https://www.luogu.com.cn/problem/P3626)\uff09\n\n- \u7ed9\u5b9a $n$ \u4e2a\u7ebf\u6bb5\uff0c\u7f16\u53f7 $1$ \u5230 $n$\u3002\n\n- \u6c42\u628a\u8fd9\u4e9b\u7ebf\u6bb5\u653e\u5728\u6570\u8f74\u4e0a\uff0c\u5728\u4e24\u4e24\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b**\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a**\uff0c\u8bb0\u4f5c $m$\u3002\n\n- \u5728\u6ee1\u8db3\u603b\u6570\u4e3a $m$ \u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u6570\u8f74\u4e0a\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\u7ec4\u6210\u7684\u96c6\u5408\uff08**\u6392\u5e8f\u540e**\uff09**\u5b57\u5178\u5e8f\u6700\u5c0f**\u3002\u8f93\u51fa\u6b64\u65f6\u7684\u96c6\u5408 $Ans$\u3002\n\n- $n \u2264 2\\times 10^5$\u3002\n\n# \u6b63\u6587\n\n\u628a\u521a\u624d\u7684\u5f62\u8c61\u5316\u9898\u610f\u518d\u5265\u79bb\u4e00\u4e0b\uff0c\u7b2c\u4e00\u95ee\u5c31\u662f\u6c42\u6700\u5927\u7ebf\u6bb5\u8986\u76d6\uff0c\u7b2c\u4e8c\u95ee\u5c31\u662f\u8ba9\u4f7f\u7528\u7684\u7ebf\u6bb5\u7f16\u53f7\u5c3d\u53ef\u80fd\u5c0f\u3002\n\n## \u5c1d\u8bd5\n\n\u7b2c\u4e00\u95ee\u7684\u6c42\u6cd5\u5f88\u591a\uff0c\u8d2a\u5fc3\u6216\u8005 DP \u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u6211\u4eec\u770b\u770b\u7b2c\u4e8c\u95ee\u66f4\u9002\u5408\u54ea\u79cd\u65b9\u6cd5\u5c31\u7528\u54ea\u79cd\u65b9\u6cd5\u3002\n\n\u4e00\u822c\u4e0e\u5b57\u5178\u5e8f\u6709\u5173\u7684\u9898\u76ee\uff0cDP \u662f\u9996\u9009\uff0c\u8d2a\u5fc3\u601d\u7ef4\u96be\u5ea6\u5219\u8981\u66f4\u5927\u4e00\u4e9b\u3002\u6240\u4ee5\u6211\u4eec**\u5148\u8003\u8651 DP**\u3002\n\n\u4f8b\u5982\uff0c\u6211\u4eec\u8bbe $f[i]$ \u8868\u793a\u4ee5\u7b2c $i$ \u4e2a\u7ebf\u6bb5\u4e3a\u9996\u540e\u80fd\u63d2\u5165\u7684\u6700\u591a\u7ebf\u6bb5\u6570\u3002\u6211\u4eec\u5c06\u8bfb\u5165\u7ebf\u6bb5\u6807\u8bb0\u7f16\u53f7\u540e\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u5b58\u5165\u7ed3\u6784\u4f53 $seg[i]$ \u4e2d\u3002\u90a3\u4e48\u5bf9\u4e8e $f[i]$ \u8f6c\u79fb\uff1a\n$$\nf[i] = \\max_{seg[j].l > seg[i].r}^{0\u2264j \u2264 n}{f[j]} +1\n$$\n\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u8f6c\u79fb\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u4f46\u662f\u522b\u5fd8\u4e86\u8fd8\u6709\u7b2c\u4e8c\u95ee\u3002\u6ce8\u610f\u6700\u540e\u7684\u96c6\u5408\u662f\u6392\u5b8c\u5e8f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u800c\u4e0d\u662f\u6309\u7ebf\u6bb5\u503c\u7684\u5927\u5c0f\u52a0\u5165\u7684\u987a\u5e8f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u6574\u4e2a\u7ebf\u6bb5\u96c6\u5408\u3002\u6211\u6ca1\u6709\u60f3\u5230\u4ec0\u4e48\u597d\u65b9\u6cd5\uff0c\u76f4\u63a5\u53d8\u6210\u4e86\u6811\u5957\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\u800c\u4e14\u7a7a\u95f4\u4e5f\u7206\u70b8\uff0c\u8fd9\u662f\u4e00\u4e2a[50\u5206 \u8bb0\u5f55](https://www.luogu.com.cn/record/85512930)\u3002\n\n\u56e0\u6b64\uff0c**DP \u4e0d\u662f\u4e00\u4e2a\u597d\u9009\u62e9**\u3002\n\n## \u5206\u6790\n\n\u90a3\u6211\u4eec\u518d\u8003\u8651\u8d2a\u5fc3\u3002\u901a\u8fc7\u521a\u624d\u7684\u601d\u8003\uff0c\u6211\u4eec\u53d1\u73b0\u7b2c\u4e8c\u95ee\u662f\u66f4\u6076\u5fc3\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u95ee\u5df2\u7ecf\u6c42\u5f97\u4e86\u6700\u5927\u7684 $m$\u3002\u7b2c\u4e8c\u95ee\u5982\u4f55\u6c42\u5462\uff1f\n\n\u53ef\u4ee5\u60f3\u5230\uff0c\u6309\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u786e\u5b9a\u63d2\u5165\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5219\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u63a5\u4e0b\u6765\u8003\u8651\u6761\u4ef6\u662f\u4ec0\u4e48\u3002\n\n\u6211\u4eec\u628a\u6ee1\u8db3\u6700\u4f18\u89e3\u7684\u7ebf\u6bb5\u96c6\u5408\u8bb0\u4f5c $S$\uff08\u4efb\u610f\u65f6\u523b\u6ee1\u8db3 $S\\subseteq Ans$ \u4e14 $S$ \u53ef\u4ee5\u4e3a $\\varnothing$\uff09\uff0c\u6211\u4eec\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5 $seg[i]$\u3002\u90a3\u4e48\uff0c\u9996\u5148\u8981\u6ee1\u8db3\u7684\u662f**\u63d2\u5165\u540e\u4e00\u5b9a\u6709\u529e\u6cd5\u4f7f\u6700\u540e\u96c6\u5408\u91cc\u7684\u7ebf\u6bb5\u603b\u6570\u4ecd\u7136\u662f $m$**\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u65e0\u8bba\u7f16\u53f7\u591a\u5c0f\u90fd\u4e0d\u80fd\u518d\u8d2a\u4e86\uff0c\u56e0\u4e3a\u4e0d\u6ee1\u8db3\u7b2c\u4e00\u95ee\u7684\u6761\u4ef6\u3002\n\n\u63d2\u5165\u8fd9\u4e2a\u7ebf\u6bb5\u540e\u53ef\u80fd\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u7684\u6700\u5927\u533a\u95f4\u5982\u4f55\u627e\uff1f\u5047\u8bbe\u6211\u4eec\u5728 $S$ \u4e2d\u627e\u5230 $seg[i]$ \u7684\u524d\u9a71 $seg[L]$ \u548c\u540e\u7ee7 $seg[R]$\u3002\u90a3\u4e48**\u5b83\u63d2\u5165\u540e\u5bf9\u5176\u524d\u9a71\u5373\u524d\u9a71\u4e4b\u524d\u7684\u533a\u95f4\u7684\u6700\u4f18\u653e\u7f6e\u65b9\u6848\u6ca1\u6709\u5f71\u54cd**\uff1b\u540c\u7406\uff0c\u5bf9\u4e8e\u540e\u7ee7\u5373\u540e\u7ee7\u4e4b\u540e\u7684\u533a\u95f4\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002\u6709\u5f71\u54cd\u7684\u662f**\u524d\u9a71\u548c\u540e\u7ee7\u4e4b\u95f4\u7684\u90a3\u6bb5\u533a\u95f4**\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6na3blx0.png)\n\n\u7528\u6570\u5b66\u65b9\u6cd5\u8868\u793a\uff0c\u6700\u591a\u53ef\u80fd\u6709\u5f71\u54cd\u7684\u533a\u95f4\u662f $[seg_L.r+1,seg_R.l - 1]$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6761\u4ef6\u5982\u4f55\u6ee1\u8db3\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u786e\u5b9a\u7684\u533a\u95f4\uff0c\u6211\u4eec\u6700\u591a\u80fd\u653e\u7f6e\u7684\u7ebf\u6bb5\u6570\u90fd\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u8bb0\u4f5c $f(l,r)$\u3002\u4e3a\u4e86\u4f7f\u6700\u540e\u6574\u4e2a\u6570\u8f74\u653e\u7684\u7ebf\u6bb5\u6700\u591a\uff0c\u8d2a\u5fc3\u7684\u601d\u8def\u5c31\u662f\u4f7f\u6bcf\u4e2a\u5b50\u533a\u95f4\u90fd\u8fbe\u5230\u6700\u4f18\u653e\u7f6e\u65b9\u6848\uff0c\u4e5f\u5c31\u662f**\u6bcf\u4e2a\u5b50\u533a\u95f4\u7684 $f$ \u548c\u5c31\u662f\u6700\u540e\u7684 $m$**\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u8d2a\u5fc3\u662f\u6b63\u786e\u7684\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u53ef\u80fd\u6709\u5f71\u54cd\u7684\u533a\u95f4\uff0c\u539f\u6765\u6700\u591a\u80fd\u653e\u7f6e\u7684\u7ebf\u6bb5\u6570\u8bb0\u4f5c $Pre = f(seg_L.r+1,seg_R.l - 1)$\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u786e\u5b9a\u4e86\u67d0\u4e2a\u7ebf\u6bb5\u540e\uff0c\u533a\u95f4\u518d\u6b21\u88ab\u5206\u6210 $3$ \u90e8\u5206\uff0c\u5373\u52a0\u5165\u7684\u7ebf\u6bb5\u5de6\u8fb9\uff0c\u52a0\u5165\u7684\u7ebf\u6bb5\u548c\u52a0\u5165\u7684\u7ebf\u6bb5\u53f3\u8fb9\uff08\u5bf9\u5e94 $[seg_L.r+1,seg_i.l-1]$\u3001$[seg_i.l,seg_i.r]$\u3001$[seg_i.r+1, seg_R.l-1]$\uff09\u3002\u800c\u4e14\u4e2d\u95f4\u7684 $f$ \u503c\u4e00\u5b9a\u662f $1$\uff08\u94a6\u5b9a**\u53ea\u653e\u52a0\u5165\u7684\u7ebf\u6bb5**\uff09\u3002\n\n\u5982\u679c\u6211\u4eec\u52a0\u5165\u8fd9\u6761\u65b0\u7684\u7ebf\u6bb5\u53ef\u4ee5\u4e0d\u4f7f\u7b54\u6848\u53d8\u5dee\uff0c\u4e5f\u5c31\u662f\u52a0\u5165\u540e\u5212\u5206\u51fa\u7684\u4e09\u4e2a\u5b50\u533a\u95f4\u6700\u591a\u80fd\u653e\u7684\u7ebf\u6bb5\u6570\u4e4b\u548c\u8fd8\u662f\u5927\u533a\u95f4\u539f\u6765\u6700\u591a\u80fd\u653e\u7684\u6570\u91cf\uff0c\u90a3\u4e48**\u52a0\u5165\u8fd9\u6761\u7ebf\u6bb5\u540e\u603b\u7684\u7b54\u6848\u4e0d\u4f1a\u53d8\u52a3**\uff0c\u8fd8\u662f $m$\uff1b\u53c8\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u7f16\u53f7\uff0c\u6b64\u65f6\u52a0\u5165\u8fd9\u6761\u7ebf\u6bb5\u4e00\u5b9a\u662f**\u6ee1\u8db3\u6761\u4ef6\u4e0b\u7f16\u53f7\u6700\u5c0f\u7684**\uff0c\u4e5f\u5c31\u6ee1\u8db3\u4e86\u6392\u5e8f\u540e\u7ebf\u6bb5\u96c6\u5408\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u8981\u6c42\uff0c**\u53ef\u4ee5\u4f5c\u4e3a\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848**\u3002\n\n\u6700\u7ec8\u6ee1\u8db3\u7684\u6761\u4ef6\u5f62\u8c61\u5316\u5199\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff1a\n$$\n\tPre=f(seg_L.r+1,seg_i.l-1)+f(seg_i.r+1, seg_R.l-1)+1\n$$\n\n## \u7ec6\u8282\u4e0e\u5b9e\u73b0\n\n\u5927\u81f4\u601d\u8def\u7406\u6e05\u4e86\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5177\u4f53\u600e\u4e48\u505a\uff0c\u6bd5\u7adf\u521a\u624d\u8df3\u8fc7\u4e86\u5f88\u591a\u3002\n\n1.  \u9996\u5148\u8003\u8651 $f$ \u5982\u4f55\u6c42\u3002\n   \n    \u6bcf\u4e2a\u7ebf\u6bb5\u5de6\u53f3\u7aef\u70b9\u503c\u7684\u5927\u5c0f\u6700\u5927\u53ef\u4ee5\u8fbe\u5230 $10^9$\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u5bf9\u6570\u636e**\u79bb\u6563\u5316**\uff0c\u8fd9\u6837\u5c31\u6700\u591a\u53ea\u6709 $n\\times2$ \u4e2a\u6709\u7528\u7684\u6570\u70b9\u3002\n\n    \u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u5904\u7406\u51fa\u6240\u6709 $f(l,r)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\u3002\u8003\u8651\u4f18\u5316\u3002\u8fd9\u4e9b\u6709\u7528\u7684\u6570\u70b9\u5bf9\u5e94\u7684\u7ebf\u6bb5\u90fd\u662f\u4e00\u5b9a\u7684\uff0c\u800c\u4e14\u6839\u636e\u8d2a\u5fc3\u6bcf\u4e2a\u7ebf\u6bb5\u4e4b\u540e\u8fde\u63a5\u7684\u6700\u4f18\u7ebf\u6bb5\u4e5f\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5**\u500d\u589e**\u3002$ne[i][k]$ \u8868\u793a\u6570\u70b9 $i$ \u5f80\u53f3\u9009 $2^k$ \u4e2a\u7ebf\u6bb5\u540e\u5230\u8fbe\u7684**\u6700\u5c0f\u53f3\u7aef\u70b9**\uff08\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86\u6bcf\u6b21\u90fd\u662f\u9009\u6700\u4f18\u7ebf\u6bb5\uff09\u3002\n   \n    \u4f46\u662f\u4e00\u4e2a\u6570\u70b9\u7684\u542b\u4e49\u53ef\u80fd\u5f88\u590d\u6742\uff0c\u6bd4\u5982\u8fd9\u4e2a\u70b9\u65e2\u662f\u67d0\u4e9b\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\uff0c\u4e5f\u662f\u67d0\u4e9b\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\uff0c\u56e0\u800c\u9700\u8981\u8003\u8651\u5f88\u591a\u60c5\u51b5\uff0c\u6bcf\u4e2a\u6570\u70b9\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u6700\u4f18\u7ebf\u6bb5\u7684\u9009\u62e9**\u4e0d\u597d\u5b9e\u73b0**\u3002 \n    \u8003\u8651\u5230\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u4e0b\u4e00\u4e2a\u7ebf\u6bb5\u662f\u53ef\u4ee5\u8d2a\u5fc3\u6c42\u51fa\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9 $ne$ \u7684\u5b9a\u4e49\u7565\u52a0\u4fee\u6539\u3002\u5b9a\u4e49 $ne[i][k]$ \u8868\u793a\u7ebf\u6bb5 $seg[i]$ \u5f80\u53f3\u518d\u9009 $2^k$ \u4e2a\u7ebf\u6bb5\u540e\u5230\u8fbe\u7684**\u4f7f\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7**\u3002\u540c\u6837\uff0c\u6211\u4eec\u5c06 $f(st,r)$ \u5b9a\u4e49\u4e3a\u4ece\u7ebf\u6bb5 $seg[st]$ \u5f80\u540e\u9009\u7ebf\u6bb5\uff0c\u4f7f\u6700\u540e\u4e00\u4e2a\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u4e0d\u8d85\u8fc7 $r$\uff0c\u6700\u591a\u9009\u591a\u5c11\u4e2a\u3002\n   \n    \u6ce8\u610f\u8fd9\u6837\u8c03\u7528 $f(st,r)$ \u51fd\u6570\u662f**\u4e0d\u5305\u62ec\u4e00\u5f00\u59cb\u7684\u7ebf\u6bb5 $seg[st]$ \u7684**\u3002\u5f53\u7136\u5305\u62ec\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4e0d\u5305\u62ec\u66f4\u65b9\u4fbf\u4e00\u4e9b\uff0c\u5c24\u5176\u5bf9\u4e8e\u4e4b\u540e\u7b2c\u4e8c\u95ee\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5206\u6210\u4e09\u6bb5\u540e\u524d\u540e\u4e24\u6bb5\u7684 $f$ \u503c\u5728\u6c42\u7684\u65f6\u5019\u4ee5**\u52a0\u5165\u7ebf\u6bb5\u7684\u524d\u9a71**\u548c**\u52a0\u5165\u7684\u7ebf\u6bb5**\u4f5c\u4e3a\u8d77\u70b9\u5373\u53ef\u3002\u800c\u5305\u62ec $seg[st]$ \u5219\u8fd8\u8981\u4ee5\u524d\u9a71\u540e\u7b2c\u4e00\u4e2a\u6700\u4f18\u7ebf\u6bb5\u4f5c\u4e3a\u524d\u6bb5\u7684\u8d77\u70b9\uff0c\u591a\u4e86\u4e00\u6b65\uff0c\u540e\u6bb5\u540c\u7406\u3002\n   \n    \u8fd9\u6837 $f(st,r)$ \u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u6c42\u51fa\uff1a\n    ```cpp\n    int f(int st, int r){\n        int res = 0;\n        for (int k = Log2; k >= 0; k --){\n            if (seg[ne[st][k]].r <= r){\n                res += (1 << k), st = ne[st][k];\n            }\n        }\n        return res;\n    }\n    ```\n2.  $ne[i][k]$ \u5982\u4f55\u6c42\uff1f\n\t\n\t\u6839\u636e\u4e00\u822c\u500d\u589e\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42 $ne[i][0]$\uff0c\u4e5f\u5c31\u662f\u6bcf\u6761\u7ebf\u6bb5\u4e0b\u4e00\u4e2a\u6700\u4f18\u7ebf\u6bb5\uff0c\u7136\u540e\u5faa\u73af $k$ \u66b4\u529b\u8df3\u9012\u63a8\u5373\u53ef\u3002\n    $$ne[i][k] = ne[ne[i][k-1]][k-1]$$\n    \u73b0\u5728\u8003\u8651\u5982\u4f55\u6c42 $ne[i][0]$\u3002\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\uff0c\u6211\u4eec\u8981\u627e\u5230\u5de6\u7aef\u70b9\u5927\u4e8e\u5f53\u524d\u7ebf\u6bb5\u53f3\u7aef\u70b9\u4e14\u53f3\u7aef\u70b9\u5c3d\u53ef\u80fd\u5c0f\u7684\u7ebf\u6bb5\u3002\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u7ebf\u6bb5\u6309\u5de6\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u5219\u6700\u540e\u53d8\u6210\u4e86\u4e00\u4e2a RMQ \u95ee\u9898\u3002\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u540e\u7f00\u6700\u5c0f\u503c\u5012\u63a8\u7684\u65b9\u6cd5\u3002\n    \n    \u56e0\u4e3a\u6709\u7528\u6570\u70b9\u603b\u6570\u662f $O(n)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u5b9a\u4e49 $Min[i]$ \u8868\u793a\u79bb\u6563\u5316\u540e\u6570\u70b9 $i$ \u53ca\u5176\u53f3\u4fa7\u7684\u6240\u6709\u5de6\u7aef\u70b9**\u4e0d\u5c0f\u4e8e** $i$ \u7684\u7ebf\u6bb5\u6700\u5c0f\u7684\u53f3\u7aef\u70b9\u3002$pos[i]$ \u5219\u8868\u793a\u4f7f\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u8fd9\u4e2a\u7ebf\u6bb5\u7684\u7f16\u53f7\u3002\n    \n    \u9012\u63a8\u65f6\u5148\u8d4b\u503c $\\forall Min[seg[i].l] = seg[i].r$\uff08\u8fd9\u91cc\u7684 $i$ \u662f\u904d\u5386\u6bcf\u4e2a\u7ebf\u6bb5\uff09\u3002\u7136\u540e\u5012\u63a8\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u70b9 $i$\uff0c\u5982\u679c $Min[i] > Min[i+1]$\uff0c\u5219\u7528 $i+1$ \u6765\u66f4\u65b0 $i$ \u7684 $Min$ \u548c $pos$ \u503c\u3002\n\n3.  \u518d\u6765\u8003\u8651\u6c42\u7b2c\u4e8c\u95ee\u65f6\u7684\u524d\u9a71\u540e\u7ee7\u5982\u4f55\u627e\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 STL \u4e2d\u7684 set \u7ef4\u62a4 $S$ \u4e2d\u7684\u6570\u70b9\uff08\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 set \u5185\u7f6e\u7684 ```upper_bound``` \u51fd\u6570\u6c42\u51fa\u524d\u9a71\u540e\u7ee7\u4e86\u3002\u5177\u4f53\u5730\uff0c\u5728\u8bb0\u5f55\u6570\u70b9\u65f6\u53ef\u4ee5\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u6570\u70b9\u5bf9\u5e94\u7684\u7ebf\u6bb5\uff08\u56e0\u4e3a\u96c6\u5408\u91cc\u7684\u7ebf\u6bb5\u4e0d\u53ef\u80fd\u91cd\u5408\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u7684\u542b\u4e49**\u6709\u4e14\u53ea\u6709\u4e00\u4e2a**\uff09\u3002\u5148\u7528 ```upper_bound``` \u51fd\u6570\u6c42\u51fa\u7b2c\u4e00\u4e2a\u5927\u4e8e\u65b0\u52a0\u5165\u7ebf\u6bb5\u53f3\u7aef\u70b9\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff0c\u6b64\u65f6\u8fed\u4ee3\u5668\u6307\u9488\u524d\u79fb $1$ \u5c31\u662f\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7ebf\u6bb5\u5de6\u7aef\u70b9\u7684\u7f16\u53f7\u3002\n\t\n    \u4f46\u8fd9\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u52a0\u5165\u7684\u7ebf\u6bb5\u4e0e\u96c6\u5408\u4e2d\u67d0\u4e2a\u7ebf\u6bb5\u91cd\u5408\u600e\u4e48\u529e\uff1f\u6839\u636e\u5b9a\u4e49\u4e0d\u80fd\u5305\u542b\u4e24\u8005\uff0c\u800c\u6839\u636e\u8d2a\u5fc3\u987a\u5e8f\u96c6\u5408\u91cc\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\u4e00\u5b9a\u6bd4\u65b0\u52a0\u5165\u7684\u7ebf\u6bb5\u7f16\u53f7\u5c0f\uff0c\u6545\u8fd9\u4e2a\u65b0\u7684\u7ebf\u6bb5\u4e0d\u8bba\u6ee1\u4e0d\u6ee1\u8db3\u6761\u4ef6**\u90fd\u8981\u820d\u5f03**\u3002\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u65b0\u52a0\u5165\u7684\u7ebf\u6bb5\u5de6\u53f3\u7aef\u70b9 ```upper_bound``` \u503c\u662f\u5426\u76f8\u7b49\u786e\u5b9a\u662f\u5426\u6709\u4e0e\u96c6\u5408\u5185\u7ebf\u6bb5\u91cd\u5408\u7684\u60c5\u51b5\u3002\n\n4.  \u4e0d\u7ba1\u662f\u7528 set \u7ef4\u62a4\u65f6\u524d\u4e24\u6b21\u52a0\u5165\u7ebf\u6bb5\u627e\u524d\u9a71\u540e\u7ee7\uff0c\u8fd8\u662f\u5728\u9012\u63a8 $ne$ \u500d\u589e\u6570\u7ec4\u8df3\u51fa\u6240\u6709\u7ebf\u6bb5\u540e\u5e94\u5230\u8fbe\u7684\u4f4d\u7f6e\uff0c\u90fd\u9700\u8981\u8fb9\u754c\u5904\u7406\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5**\u6784\u5efa\u4e24\u4e2a\u201c\u54e8\u5175\u7ebf\u6bb5\u201d**\u3002\u4e00\u4e2a\u7f16\u53f7\u4e3a $0$\uff0c\u5de6\u53f3\u7aef\u70b9\u90fd\u662f\u6781\u5c0f\u503c\uff1b\u4e00\u4e2a\u7f16\u53f7\u4e3a $n+1$\uff0c\u5de6\u53f3\u7aef\u70b9\u90fd\u662f\u6781\u5927\u503c\u3002\u8fd9\u6837\u7684\u8bdd $ne[n+1][0] = n+1$\uff0c\u518d\u6b21\u9012\u63a8\u65f6\u4e0d\u4f1a RE\uff1b\u5728\u6c42\u7b54\u6848\u524d\u5148\u52a0\u5165\u4e24\u4e2a\u54e8\u5175\u7ebf\u6bb5\uff0c\u8fd9\u6837\u65b0\u52a0\u5165\u7ebf\u6bb5\u65f6\u4e0d\u4f1a\u51fa\u73b0\u8fd4\u56de\u8fed\u4ee3\u5668\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u7801\u91cf\u51cf\u5c11\u4e86\u5f88\u591a\u3002\n\n5. \u8bdd\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u522b\u5fd8\u4e86 $m$ \u8fd8\u6ca1\u89e3\u51b3\u3002\u4f46\u6709\u4e86\u201c\u54e8\u5175\u7ebf\u6bb5\u201d\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6781\u5c0f\u54e8\u5175\u5f00\u59cb\uff0c\u53d6\u5230\u6781\u5927\u54e8\u5175\u7684\u5de6\u7aef\u70b9\uff08\u4e0d\u5305\u62ec\uff09\uff0c\u8fd9\u6837\u5c31\u662f\u6700\u5927\u533a\u95f4\u7684\u6700\u4f18\u60c5\u51b5\u3002\u5373 ```m = f(0, inf-1)```\u3002\n\n\n\n------------\n\n\n\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\u3002\u74f6\u9888\u5728\u4e8e\u500d\u589e\u548c set \u53ca\u5176\u5e38\u6570\u3002\n\n# \u4ee3\u7801\n\n\u53d8\u91cf\u540d\u4e0e\u6587\u7ae0\u4e2d\u7684\u6570\u7ec4\u65e0\u5f02\uff0c\u5fc5\u8981\u6ce8\u91ca\u5df2\u6dfb\u52a0\u3002\u4ee3\u7801\u7565\u957f\uff0c\u5efa\u8bae\u81ea\u5df1\u5199\u4e00\u904d\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <set>\n\nusing namespace std;\nconst int maxn = 200005;\nconst int inf = 1e9;\n\nstruct Segment{\n    int l, r, id;\n}seg[maxn];\nint Disc[maxn << 1], cnt; //\u79bb\u6563\u5316\nint n, Log2;\nint ne[maxn][18], Mn[maxn << 1], pos[maxn << 1];\nstruct Node{\n    int v, id;\n\n    bool operator < (const Node &b) const{\n        return v < b.v;\n    }\n};\nset<Node> s;\n\nbool cmp1(Segment a, Segment b){\n    return a.l < b.l;\n}\n\nbool cmp2(Segment a, Segment b){\n    return a.id < b.id;\n}\n\nint getMx(int st, int r){\n    int res = 0;\n    for (int k = Log2; k >= 0; k --){\n        if (seg[ne[st][k]].r <= r){\n            res += (1 << k), st = ne[st][k];\n        }\n    }\n    return res;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    \n    cin >> n;\n    while ((1 << Log2) <= n) Log2 ++; Log2 --; //floor(log_2{n})\n    for (int i = 1, l, r; i <= n; i ++){\n        cin >> l >> r;\n        Disc[++ cnt] = l, Disc[++ cnt] = r;\n        seg[i] = (Segment){l, r, i};\n    }\n\n    /* \u79bb\u6563\u5316 */\n    sort(Disc+1, Disc+cnt+1);\n    cnt = unique(Disc+1, Disc+cnt+1) - Disc - 1;\n    for (int i = 1; i <= n; i ++){\n        seg[i].l = lower_bound(Disc+1, Disc+cnt+1, seg[i].l) - Disc;\n        seg[i].r = lower_bound(Disc+1, Disc+cnt+1, seg[i].r) - Disc;\n    }\n\n    /* \u5904\u7406\u500d\u589e */\n    sort(seg+1, seg+n+1, cmp1);\n    seg[n+1] = (Segment){inf, inf, n+1}, seg[0] = (Segment){-inf, -inf, 0};\n    /* \u5148\u9012\u63a8\u540e\u7f00\u6700\u5c0f\u503c */\n    memset(Mn, 0x3f, sizeof Mn);\n    Mn[cnt+1] = cnt+1, pos[cnt+1] = n+1;\n    for (int i = n; i > 0; i --){\n        if (Mn[seg[i].l] > seg[i].r){\n            Mn[seg[i].l] = seg[i].r, pos[seg[i].l] = seg[i].id;\n        }\n    }\n    for (int i = cnt; i > 0; i --){\n        if (Mn[i] > Mn[i+1]){\n            Mn[i] = Mn[i+1], pos[i] = pos[i+1];\n        }\n    }\n    /* \u66f4\u65b0\u500d\u589e\u6570\u7ec4 */\n    ne[n+1][0] = n+1;\n    for (int i = 1; i <= n; i ++){\n        ne[seg[i].id][0] = pos[seg[i].r+1];\n    }\n    int st = n+1;\n    for (int i = 1; i <= n; i ++){\n        if (seg[i].r < seg[st].r) st = i;\n    }\n    ne[0][0] = seg[st].id;\n    for (int k = 1; k <= Log2; k ++){\n        for (int i = 0; i <= n + 1; i ++){\n            ne[i][k] = ne[ne[i][k-1]][k-1];\n        }\n    }\n\n    /* \u8ba1\u7b97M */\n    int M = getMx(0, inf-1);\n    cout << M << endl;\n    \n    /* \u8fd8\u539f\u5e76\u6dfb\u52a0\u201c\u54e8\u5175\u201d */\n    sort(seg+1, seg+n+1, cmp2);\n    s.insert((Node){-inf, 0}), s.insert((Node){inf, n+1});\n\n    /* \u8d2a\u5fc3\u6a21\u62df */\n    set<Node>::iterator it;\n    for (int i = 1; i <= n; i ++){\n        if (s.upper_bound((Node){seg[i].l, seg[i].id}) != s.upper_bound((Node){seg[i].r, seg[i].id})) continue; //\u6709\u91cd\u5408\n        it = s.upper_bound((Node){seg[i].r, seg[i].id});\n        Node L = *it;\n        it --;\n        Node R = *it;\n        if (getMx(R.id, seg[i].l-1) + getMx(i, L.v-1) + 1 != getMx(R.id, L.v-1)) continue;\n        cout << i << ' ';\n        s.insert((Node){seg[i].l, seg[i].id}), \n        s.insert((Node){seg[i].r, seg[i].id});\n    }\n    cout << endl;\n\n    return 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u8fd9\u9053\u9898\u786e\u5b9e\u8003\u70b9\u5f88\u591a\uff0c\u53e6\u5916\u6211\u89c9\u5f97\u8d2a\u5fc3\u771f\u7684\u5f88\u96be\u3002\n\n\u4e3b\u8981\u662f\u8fd9\u9053\u9898\u7684\u9898\u89e3\u533a\u592a\u4e71\u4e86\uff0c\u9ad8\u8d5e\u7684\u90fd\u662f\u56eb\u56f5\u541e\u67a3\u8bb2\u4e00\u5806\uff0c\u771f\u6b63\u6709\u70b9\u4ef7\u503c\u53c8\u88ab\u6392\u5230\u4e86\u540e\u9762\uff0c\u6240\u4ee5\u6211\u624d\u60f3\u5199\u4e00\u7bc7\u5b8c\u6574\u601d\u8def\uff0c\u4e0d\u8fc7\u7bc7\u5e45\u7565\u957f\u3002\n\n\u8c22\u8c22\u89c2\u770b\uff01\n\n\n\n",
        "postTime": 1661868173,
        "uid": 528114,
        "name": "jjsnam",
        "ccfLevel": 6,
        "title": "P3626\u9898\u89e3"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9574519.html)\n\n\n\n------------\n\n## Solution\n\n\u5982\u679c\u9898\u76ee\u53ea\u8981\u6c42\u6c42\u51fa\u7b2c\u4e00\u95ee\uff0c\u90a3\u8fd9\u9898\u663e\u7136\u5c31\u662f\u5927\u6c34\u9898\u3002\n\n\u4f46\u662f\u52a0\u4e0a\u7b2c\u4e8c\u95ee\u7684\u8bdd.......\u90a3\u8fd9\u9898\u5c31\u6210\u4e3a\u5927\uff08du\uff09\u706b\uff08liu\uff09\u9898\u4e86\u3002\n\n.\n\n\n\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff1a\u6c42\u4e00\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u7ebf\u6bb5\u603b\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5207\u6389\u3002\n\n\u600e\u4e48\u5904\u7406\u7b2c\u4e8c\u95ee\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u505a\uff1a\n\n**\u5bf9\u4e8e\u4e00\u6761\u7ebf\u6bb5\uff0c\u5982\u679c\u5b83\u5c5e\u4e8e\u7b54\u6848\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u4f1a\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n**\n\n**\u533a\u95f4\u2462\u7684\u6700\u5927\u7ebf\u6bb5\u6570 = \u533a\u95f4\u2460\u7684\u6700\u5927\u7ebf\u6bb5\u6570 + \u533a\u95f4\u2461\u7684\u6700\u5927\u7ebf\u6bb5\u6570 + 1\uff08\u5f53\u524d\u7ebf\u6bb5\uff09 \uff08\u533a\u95f4\u6700\u5927\u7ebf\u6bb5\u6570\u6307\u7528\u4f20\u7edf\u8d2a\u5fc3\u65b9\u6cd5\u6c42\u51fa\u7684\u4e00\u6bb5\u533a\u95f4\u7684\u53ef\u80fd\u7684\u6700\u591a\u7684\u7ebf\u6bb5\u7684\u6570\u91cf\uff09**\n\n![QAQ](https://cdn.luogu.com.cn/upload/pic/31927.png)\n\n.\n\n\u90a3\u600e\u4e48\u6c42\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5927\u7ebf\u6bb5\u6570\u5462\uff1f\n\n\u7b2c\u4e00\u60f3\u6cd5\u662f\u524d\u7f00\u548c\uff1f\u770b\u8d77\u6765\u5f88OK\uff1f\n\nnope\n\n\u56e0\u4e3a**\u4e0d\u540c\u533a\u95f4\u4e2d\uff0c\u91cc\u9762\u7684\u7684\u521d\u59cb\u7ebf\u6bb5\u4f1a\u4e0d\u540c**\uff0c\u4ee5\u4e0b\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u7b80\u5355\u8bf4\u660e\u8fd9\u79cd\u60c5\u51b5\n![QWQ](https://cdn.luogu.com.cn/upload/pic/31928.png)\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\n\n**\u6bcf\u6761\u7ebf\u6bb5\u7684\u4e0b\u4e00\u6761\u53ef\u884c\u7ebf\u6bb5\u662f\u56fa\u5b9a\u7684\n**\n\n\u6709\u4e86\u8fd9\u4e2a\u7279\u70b9\uff0c**\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u8def\u5f84\u505a\u500d\u589e**\uff0c\u5c31\u53ef\u4ee5\u5728log\u7684\u65f6\u95f4\u6c42\u51fa\u67d0\u4e00\u4e2a\u533a\u95f4\u7684\u7ebf\u6bb5\u6570\u3002\n\n .\n\n\u81f3\u4e8e\u6c42\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u7b2c\u4e00\u6761\u7ebf\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528set+lowbound\u7684\u65b9\u6cd5\u627e\u3002\n\n .\n\n\u8fd9\u6837\u5b50\uff0c\u4f60\u5c31\u53ef\u4ee5\u5634\u5df4AC\u8fd9\u9053\u9898\u5566\n\n~~\u5b9e\u9645\u4e0a\u4f60\u6709\u5927\u6982\u7387\u4f1a\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u6765\u8c03\u8fd9\u9053\u6bd2\u7624\u9898~~\n\n\n\n------------\n## Code\n\n~~\u6211\u5927\u91cf\u8c03\u7528\u4e86STL\u51fd\u6570\uff0c\u5bfc\u81f4\u5e38\u6570\u7206\u5927\uff0c\u9700\u8981O2\u624d\u80fd\u8fc7\uff0c\u5426\u5219\u4f1aT\u4e00\u4e2a\u70b9~~\n```cpp\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<stack>\n#include<cstring>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=200000+100;\nstruct line\n{\n    int l,r,no;\n    friend bool operator < (line A,line B)\n    {\n        return A.l<B.l;\n    }\n}l[N];\nbool cmp(line A,line B)\n{\n    if(A.l==B.l)\n    {\n        if(A.r!=B.r)\n            return A.r>B.r;\n        else\n            return A.no>B.no;\n    }\n    return A.l<B.l;\n}\nbool cmp2(line A,line B)\n{\n    return A.no<B.no;\n}\nint n,ans,root,fa[N][20+2];\nbool use[N],vis[N];\nstack <int> ms;\nset <line> mset;\nset <line> used;\nvector <int> e[N];\nvoid dfs(int now,int FA)\n{\n    vis[now]=true;\n    fa[now][0]=FA;\n    for(int i=1;i<=20;i++)\n        fa[now][i]=fa[fa[now][i-1]][i-1];\n    for(int i=0;i<int(e[now].size());i++)\n        if(vis[e[now][i]]==false)\n            dfs(e[now][i],now);\n}\nint POW[21];\nint Count(int L,int R)\n{\n    line temp; temp.l=L;\n    set<line>:: iterator t=mset.lower_bound(temp);\n    if((*t).r > R) return 0;\n    int now=(*t).no,ans=1;\n    for(int i=20;i>=0;i--)\n        if(l[fa[now][i]].r<=R and fa[now][i]!=0)\n            now=fa[now][i],ans+=POW[i];\n    return ans;\n}\nint main()\n{\n    //freopen(\"center.in\",\"r\",stdin);\n    //freopen(\"center.out\",\"w\",stdout);\n    \n    n=read();\n    for(int i=1;i<=n;i++)\n        l[i].l=read(),l[i].r=read(),l[i].no=i;\n    \n    sort(l+1,l+1+n,cmp);\n    memset(use,1,sizeof use);\n    for(int i=1;i<=n;i++)\n    {\n        while(ms.empty()==false and l[ms.top()].r>=l[i].r)\n        {\n            use[ms.top()]=false;\n            ms.pop();\n        }\n        ms.push(i);\n    }\n    int to=-1;\n    for(int i=1;i<=n;i++)\n        if(use[i]==true and l[i].l>to)\n        {\n            ans++;\n            to=l[i].r;\n        }\n    for(int i=1;i<=n;i++) e[i].reserve(4);\n    for(int i=1;i<=n;i++)\n        if(use[i]==true)\n        {\n            //cerr<<l[i].no<<\" \";\n            mset.insert(l[i]);\n            bool OK=false;\n            for(int j=i+1;j<=n;j++)\n                if(use[j]==true and l[j].l>l[i].r)\n                {\n                    e[l[j].no].push_back(l[i].no);\n                    OK=true;\n                    break;\n                }\n            if(OK==false)\n                e[0].push_back(l[i].no);\n        }\n    printf(\"%d\\n\",ans);    \n    \n    dfs(0,0);\n    sort(l+1,l+1+n,cmp2);\n    for(int i=0;i<=20;i++)\n        POW[i]=1<<i;\n    l[0].r=0x3f3f3f3f;\n    line tt;\n    tt.l=-1,tt.r=-1,tt.no=0; mset.insert(tt),used.insert(tt);\n    tt.l=0x3f3f3f3f,tt.r=0x3f3f3f3f;mset.insert(tt),used.insert(tt);\n    for(int i=1;i<=n;i++)\n    {\n        int L,R;\n        set<line>:: iterator t=used.lower_bound(l[i]);\n        if((*t).l<=l[i].r) continue;\n        R=(*t).l-1;\n        t--;\n        if((*t).r>=l[i].l) continue;\n        L=(*t).r+1;\n        if(Count(L,l[i].l-1)+Count(l[i].r+1,R)==Count(L,R)-1)\n        {\n            printf(\"%d \",i);\n            used.insert(l[i]);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1536052007,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3626 \u3010[APIO2009]\u4f1a\u8bae\u4e2d\u5fc3\u3011"
    },
    {
        "content": "\u6570\u7ec4\u82e5\u5e72+\u624b\u52a8\u4e8c\u5206\n\n====================\u5e9f\u8bdd\u5206\u5272\u7ebf======================\n\n\u6211\u6211\u6211\u6211\u6211\uff01\u4e00\u5b9a\u8981\u8bf4\u4e00\u4e0b\u6211\u7684\u5fc3\u8def\u5386\u7a0b\uff01\u6211\u53ea\u7528\u4e86\u51e0\u4e2a\u6570\u7ec4\u548c\u4e00\u4e2a\u624b\u52a8\u4e8c\u5206\uff01\u5728\u6d1b\u8c37\u548cbzoj\u90fd\u8fc7\u4e86\u6240\u4ee5\u5e94\u8be5\u662f\u5bf9\u7684\uff01\uff08\u8dd1\u7684\u633a\u5feb\u751a\u81f3\u548c\u5b66\u957f\u5408\u4e86\u5f71\n\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff0c\u6211\u9996\u5148\u5728\u6d1b\u8c37\u778e\u8d2a\u5fc3\u8d2a\u4e8655\uff0c\u7136\u540e\u8c03\u4e0d\u51fa\u6765\u53bb\u770b\u6b63\u89e3\uff0c\u53d1\u73b0\u597d\u9ebb\u70e6\u554a\uff0c\u540c\u65f6\u89c9\u5f97\u6211\u7684\u8d2a\u5fc3\u8fd8\u633a\u5bf9\u7684\uff0c\u4e8e\u662f\u641e\u4e86\u4e00\u4efd\u6807\u7a0b\u62cd\uff0c\u62cd\u7740\u62cd\u7740\u5c31\u62cd\u51fa\u9519\u4e86\uff0c\u53d1\u73b0\u5224\u65ad\u5b57\u5178\u5e8f\u4e0d\u592a\u5bf9\uff0c\u6211\u5fd8\u8bb0\u6392\u8fc7\u5e8f\u4e86\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u53d6\u5c3e\u90e8\uff0c\u4e8e\u662f\u987a\u7740pr\u5f80\u524d\u8df3\u53d6min\uff0c\u4e8e\u662fA\u4e86\uff01bzoj rank15\u6b38\uff01\u770b\u5230\u4e86\u4e24\u4e2a\u5b66\u957f\u6b38\uff01\u5361\u5361\u5e38\u5361\u5361\u5e38\uff0c\u4e8e\u662f\u5347\u5230rank8~~\u5e76\u4e14\u4e3a\u4e86\u5168\u573a\u6700\u77ed\u6539\u4e86\u4ee3\u7801\u98ce\u683c~~\n\n====================\u5e9f\u8bdd\u5206\u5272\u7ebf======================\n\n\u5148\u6253\u4e0aid\u987a\u5e8f\u6309r\u6392\u5e8f\uff0cf\u5b58\u5f53\u524d\u6700\u591a\u80fd\u63a5\u5f85\u7684\u516c\u53f8\uff0cs\u5b58\u524d\u7f00f\u6700\u5927\u503c\uff08\u503c\u76f8\u540c\u53d6\u5b57\u5178\u5e8f\u6700\u5c0f\uff09\uff0cp\u5b58s\u6700\u5927\u503c\u4f4d\u7f6e\uff0cpr\u5b58\u8fd9\u4e2a\u70b9\u662f\u4ece\u54ea\u4e2a\u70b9\u8f6c\u79fb\u8fc7\u6765\u7684\u3002\u7136\u540e\u5bf9\u7b2ci\u4e2al\uff0c\u4e8c\u5206\u627e\u51fa\u6700\u53f3\u7684r\u5c0f\u4e8e\u5f53\u524dl\uff0c\u8bbe\u4e3aw\uff0c\u7528s[w]\u66f4\u65b0\u5f53\u524d\u6570\u7ec4f[i]\uff0c\u8fde\u4e0a\u524d\u7f00pr[i]=p[w]\uff0c\u7136\u540e\u5206\u4e09\u79cd\u60c5\u51b5\u4fee\u6539s\u548cp\u6570\u7ec4\u3002\n\n1\u3001s[i-1]<f[i]\uff0c\u76f4\u63a5s[i]=s[i-1],p[i]=p[i-1]\u5373\u53ef\uff1b\n\n2\u3001s[i-1]>f[i]\uff0c\u5373\u5f53\u524d\u524d\u7f00\u548c\u6700\u5927\u503c\u4e3a\u5f53\u524di\u70b9\uff0c\u6240\u4ee5s[i]=f[i],p[i]=i;\n\n3\u3001\u5bf9\u4e8e\u76f8\u7b49\u7684\u60c5\u51b5\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u70b9i\u548cp[i-1]\uff0c\u6cbf\u7740pr\u5f80\u524d\u8df3\uff0c\u76f4\u5230pr\u76f8\u7b49\uff08\u56e0\u4e3apr\u76f8\u7b49\u4e4b\u540e\u4e24\u4e2a\u70b9\u7ecf\u8fc7\u7684\u70b9\u5c31\u76f8\u540c\u4e86\uff09\uff0c\u5bf9\u4e8e\u7ecf\u8fc7\u7684\u70b9\u7684id\u53d6min\uff0c\u4e8e\u662f\u8fd9\u4e24\u4e2amin\u5c31\u662f\u5347\u5e8f\u6392\u5e8f\u540e\u6700\u65e9\u4e0d\u540c\u7684\u65b9\u6848\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u6765\u51b3\u5b9a\u8f6c\u5230\u60c5\u51b51\u62162.\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\u662f\u4e0d\u662f\u8d85\u7b80\u5355\uff1f\n~~\u4f46\u662f\u8fd8\u662f\u53bb\u5b66\u4e00\u4e0b\u601d\u8def\u795e\u5947\u7684\u6b63\u89e3\u5427~~\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=200005;\nint n,s[N],p[N],q[N],top,pr[N];\nstruct qwe {\n    int l,r,id;\n} a[N];\nbool cmp(const qwe &a,const qwe &b) {\n    return a.r<b.r;\n}\nint read() {\n    int r=0,f=1;\n    char p=getchar();\n    while(p>'9'||p<'0') {\n        if(p=='-') f=-1;\n        p=getchar();\n    }\n    while(p>='0'&&p<='9') {\n        r=r*10+p-48;\n        p=getchar();\n    }\n    return r*f;\n}\nint main() {\n    n=read();\n    for(int i=1; i<=n; i++) a[i].l=read(),a[i].r=read(),a[i].id=i;\n    sort(a+1,a+1+n,cmp);\n    for(int i=1; i<=n; i++) {\n        int w=0,l=0,r=i-1,k=a[i].l;\n        while(l<=r) {\n            int mid=(l+r)>>1;\n            if(a[mid].r<k) w=mid,l=mid+1;\n            else r=mid-1;\n        }\n        int now=s[w]+1;\n        pr[i]=p[w];\n        if(s[i-1]>now) s[i]=s[i-1],p[i]=p[i-1];\n        else if(s[i-1]==now) {\n            int p1=p[i-1],p2=i,mn1=1e9,mn2=1e9;\n            while(pr[p1]!=pr[p2]) {\n                if(a[p1].id<mn1) mn1=a[p1].id;\n                if(a[p2].id<mn2) mn2=a[p2].id;\n                p1=pr[p1],p2=pr[p2];\n            }\n            if(a[p1].id<mn1) mn1=a[p1].id;\n            if(a[p2].id<mn2) mn2=a[p2].id;\n            if(mn1<mn2) s[i]=s[i-1],p[i]=p[i-1];\n            else s[i]=now,p[i]=i;\n        }\n        else s[i]=now,p[i]=i;\n    }\n    printf(\"%d\\n\",s[n]);\n    int now=p[n];\n    while(now)\n        q[++top]=a[now].id,now=pr[now];\n    sort(q+1,q+1+top);\n    for(int i=1; i<=top; i++) printf(\"%d \",q[i]);\n    return 0;\n}\n```",
        "postTime": 1523445355,
        "uid": 30587,
        "name": "lokiii",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3626 \u3010[APIO2009]\u4f1a\u8bae\u4e2d\u5fc3\u3011"
    },
    {
        "content": "### [$\u9898\u76ee\u4f20\u9001\u95e8$](https://www.luogu.com.cn/problem/P3626)\n\n\u63d0\u4f9b\u4e00\u79cd $O(n\\log^2(n))$ \u7684\u89e3\u6cd5\u3002\n\n\u7b2c\u4e00\u95ee\u662f\u7ecf\u5178\u7684\u6700\u5927\u4e0d\u4ea4\u7ebf\u6bb5\u96c6\u95ee\u9898\uff0c\u53ef\u4ee5\u7528 $O(n\\log(n))$ \u7684\u8d2a\u5fc3\u505a\u6cd5\u548c $O(n^2)$ \u7684 dp \u505a\u6cd5\u89e3\u51b3\uff0c\u4f46\u663e\u7136\u8d2a\u5fc3\u5904\u7406\u5b57\u5178\u5e8f\u975e\u5e38\u68d8\u624b\uff0c\u8fd9\u91cc\u8003\u8651 $O(n^2)$ \u7684 dp\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4f1a\u8bae\uff0c\u7ed3\u675f\u65f6\u95f4\u8d8a\u65e9\u8d8a\u597d\uff0c\u56e0\u6b64\u5c06\u6240\u6709\u4f1a\u8bae\u79bb\u6563\u5316\u540e\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u5347\u5e8f\u6392\u5e8f\uff0c\u8fd9\u65f6\u539f\u6765 $O(n)$ \u679a\u4e3e\u8f6c\u79fb\u53ef\u4ee5\u7528\u4e00\u68f5\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7ed3\u675f\u65f6\u95f4\u4e3a x \u7684\u6700\u5c0f\u7684 dp \u503c\u505a\u5230 $O(\\log(n))$ \uff0c\u4f46\u7ed3\u675f\u65f6\u95f4\u53ef\u80fd\u4f1a\u76f8\u540c\uff0c\u56e0\u6b64\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fd8\u8981\u7ef4\u62a4\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u3002\u4e00\u4e2a\u663e\u7136\u7684\u65b9\u6cd5\u662f\u4ee5  dp \u503c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u4f1a\u8bae\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u53d6\u6700\u4f18\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint n,tmp[N<<1],cnt;\nbool operator<(const pair<int,int>&x,const pair<int,int>&y){\n    return(x.first==y.first)?x.second<y.second:x.first>y.first;\n}\nnamespace SGT{\n    pair<int,int>Max[N<<2];\n    void pushup(int k){\n    \tMax[k]=(Max[k<<1]<Max[k<<1|1])?Max[k<<1]:Max[k<<1|1];\n    }\n    void modify(int k,int l,int r,int x,pair<int,int>pr){\n        if(l==r){\n            if(pr<Max[k])Max[k]=pr;\n            return;\n        }\n        int mid=(l+r)>>1;\n        if(x<=mid)modify(k<<1,l,mid,x,pr);\n        else modify(k<<1|1,mid+1,r,x,pr);\n        pushup(k);\n    }\n    pair<int,int>query(int k,int l,int r,int x,int y){\n\t\tif(r<x||l>y)return make_pair(0,0);\n    \tif(l>=x&&r<=y)return Max[k];\n        int mid=(l+r)>>1;\n        if(y<=mid)return query(k<<1,l,mid,x,y);\n        if(mid<x)return query(k<<1|1,mid+1,r,x,y);\n        if(query(k<<1,l,mid,x,y)<query(k<<1|1,mid+1,r,x,y))return query(k<<1,l,mid,x,y);\n        return query(k<<1|1,mid+1,r,x,y);\n    }\n}\nusing namespace SGT;\nnamespace Solve{\n    struct Node{int l,r,id;}meet[N];\n    int dp[N],pre[N],ans[N];\n    void print(){\n        int id=0,tot=0;\n        for(int i=1;i<=n;i++)\n            if(make_pair(dp[i],i)<make_pair(dp[id],id))id=i;\n\t\tprintf(\"%d\\n\",dp[id]);\n\t\twhile(id)ans[++tot]=id,id=pre[id];\n        sort(ans+1,ans+tot+1);\n        for(int i=1;i<=tot;i++)printf(\"%d \",ans[i]);\n    }\n    void DP(){\n        sort(meet+1,meet+n+1,[&](Node&x,Node&y){return x.r<y.r;});\n        for(int i=1;i<=n;i++){\n            pair<int,int>u=query(1,1,cnt,1,meet[i].l-1);\n            dp[meet[i].id]=dp[u.second]+1,pre[meet[i].id]=u.second;\n            modify(1,1,cnt,meet[i].r,make_pair(dp[meet[i].id],meet[i].id));\n        }\n        print();\n    }\n}\nusing namespace Solve;\nint main(){\n    n=read();\n    for(int i=1;i<=n;i++)meet[i].l=read(),meet[i].r=read(),meet[i].id=i;\n    for(int i=1;i<=n;i++){\n        tmp[++cnt]=meet[i].l;\n        tmp[++cnt]=meet[i].r;\n    }\n    sort(tmp+1,tmp+cnt+1);\n    cnt=unique(tmp+1,tmp+cnt+1)-tmp-1;\n    for(int i=1;i<=n;i++){\n        meet[i].l=lower_bound(tmp+1,tmp+cnt+1,meet[i].l)-tmp;\n        meet[i].r=lower_bound(tmp+1,tmp+cnt+1,meet[i].r)-tmp;\n    }\n    DP();\n    return 0;\n}\n```\n\n\u4f46\u8fd9\u6837\u7684\u505a\u6cd5\u6709\u95ee\u9898\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\uff1a\n\n\u8f93\u5165\uff1a\n```cpp\n6\n1 3\n5 7\n4 5\n6 10\n10 12\n13 15\n```\n\u8f93\u51fa\uff1a\n```cpp\n4\n1 2 5 6\n```\n\n\u4ee3\u7801\u8f93\u51fa\n```cpp\n4\n1 3 4 6\n```\n\u7a76\u5176\u539f\u56e0\u5728\u4e8e\u5f53\u524d\u7b56\u7565\u5728\u4e4b\u524d\u7684\u5b57\u5178\u5e8f\u4e2d\u4e0d\u4e00\u5b9a\u6700\u4f18\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u505a\u6cd5\u662f\u9519\u7684\u5417\uff1f\u6ce8\u610f\u5230 dp \u503c\u4e0e\u5176\u8f6c\u79fb\u6784\u6210\u4e00\u68f5\u68ee\u6797\uff0c\u800c\u76f8\u540c dp \u503c\u6bd4\u8f83\u5b57\u5178\u5e8f\u65f6\u5728\u6240\u5728\u6811\u4e2d\u7684\u6df1\u5ea6\u4e00\u5b9a\u76f8\u7b49\uff0c\u60f3\u5230\u6811\u4e0a\u500d\u589e\uff0c\u5177\u4f53\u5730\uff0c\u6bcf\u6b21 $dp_u$ \u8f6c\u79fb\u540e\u8bb0 $fa_{u,0}=pre_u$ \uff0c $Min_{u,0}=u$ \uff0c\u66f4\u65b0 u \u7684\u500d\u589e\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\u5185\u6bd4\u8f83\u65f6\u5728\u6811\u4e0a\u8df3\uff0c\u8df3\u5230\u8def\u5f84\u6700\u5c0f\u503c\u76f8\u7b49\u65f6\u505c\u6b62\uff0c\u6811\u4e0a\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u4e3a\u5b57\u5178\u5e8f\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define INF 0x3f3f3f3f\n#define N 400005\n#define ls k<<1\n#define rs k<<1|1\n#define mid ((l+r)>>1)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define pii pair<int,int>\n#define il inline\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\nil int read(){\n    int w=0,h=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')h=-h;ch=getchar();}\n    while(ch>='0'&&ch<='9'){w=w*10+ch-'0';ch=getchar();}\n    return w*h;\n}\nstruct Node{\n    int l,r,id;\n    bool operator<(const Node&p)const{\n        return r<p.r;\n    }\n}mt[N];\nint n,tot,tmp[N];\nint dp[N],from[N],ans[N];\nnamespace Jump{\n    int fa[N][25],Min[N][25];\n    void build(int u){\n        for(int i=1;i<=21;i++){\n            fa[u][i]=fa[fa[u][i-1]][i-1];\n            Min[u][i]=min(Min[u][i-1],Min[fa[u][i-1]][i-1]);\n        }\n    }\n    bool check(int u,int v){\n        int minx=INF,miny=INF;\n        for(int i=21;i>=0;i--)\n            if(Min[u][i]!=Min[v][i]){\n                minx=min(minx,Min[u][i]);\n                miny=min(miny,Min[v][i]);\n                u=fa[u][i];v=fa[v][i];\n            }\n        return minx>miny;\n    }\n}\nbool operator<(const pii&x,const pii&y){\n    return(x.fi==y.fi)?Jump::check(x.se,y.se):x.fi<y.fi;\n}\nnamespace SGT{\n    pii Max[N<<2];\n    pii pushup(pii l,pii r){return(l<r)?r:l;}\n    void modify(int k,int l,int r,int x,pii pa){\n        if(l==r){\n            if(Max[k]<pa)Max[k]=pa;\n            return;\n        }\n        if(x<=mid)modify(ls,l,mid,x,pa);\n        if(mid<x)modify(rs,mid+1,r,x,pa);\n        Max[k]=pushup(Max[ls],Max[rs]);\n    }\n    pii query(int k,int l,int r,int x,int y){\n        if(l>y||r<x)return mp(0,0);\n        if(l>=x&&r<=y)return Max[k];\n        if(y<=mid)return query(ls,l,mid,x,y);\n        if(mid<x)return query(rs,mid+1,r,x,y);\n        return pushup(query(ls,l,mid,x,y),query(rs,mid+1,r,x,y));\n    }\n}\nvoid out(int u){\n    if(u==0)return;\n    out(from[u]);\n    ans[++tot]=u;\n}\nvoid print(){\n    int id=0;\n    for(int i=1;i<=n;i++)\n        if(mp(dp[id],id)<mp(dp[i],i))id=i;\n    printf(\"%lld\\n\",dp[id]);\n    tot=0;\n    out(id);\n    sort(ans+1,ans+tot+1);\n    for(int i=1;i<=tot;i++)cout<<ans[i]<<' ';\n}\nsigned main(){\n    n=read();\n    for(int i=1;i<=n;i++){\n        mt[i].l=read();mt[i].r=read();mt[i].id=i;\n        tmp[++tot]=mt[i].l;\n        tmp[++tot]=mt[i].r;\n    }\n    sort(tmp+1,tmp+tot+1);\n    tot=unique(tmp+1,tmp+tot+1)-tmp-1;\n    for(int i=1;i<=n;i++){\n        mt[i].l=lower_bound(tmp+1,tmp+tot+1,mt[i].l)-tmp;   \n        mt[i].r=lower_bound(tmp+1,tmp+tot+1,mt[i].r)-tmp;\n    }\n    sort(mt+1,mt+n+1);\n    for(int i=1;i<=n;i++){\n        pii u=SGT::query(1,1,tot,1,mt[i].l-1);\n        int id=mt[i].id;\n        if(u.se==0)dp[id]=1,from[id]=0;\n        else dp[id]=dp[u.se]+1,from[id]=u.se;\n//      cout<<id<<' '<<dp[id]<<' '<<from[id]<<endl;\n        Jump::fa[id][0]=(u.se)?u.se:id;\n        Jump::Min[id][0]=id;\n        Jump::build(id);\n        SGT::modify(1,1,tot,mt[i].r,mp(dp[id],id));\n    }\n    print();\n    return 0;\n}\n```",
        "postTime": 1635777319,
        "uid": 191538,
        "name": "pidan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3626 [APIO2009]\u4f1a\u8bae\u4e2d\u5fc3"
    },
    {
        "content": "\u8fd9\u9898\u662f\u840c\u65b0\u4eca\u5929\u7684\u4f5c\u4e1a\uff0c\u672c\u840c\u65b0\u6765\u6c34\u4e00\u7bc7\u9898\u89e3\u52a0\u6df1\u5f71\u54cdqwq\n\n\u9996\u5148\u8d2a\u5fc3\u601d\u8def\u5e94\u8be5\u597d\u60f3\u5427\uff0c\u7531\u4e8e\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6240\u4ee5\u6309\u987a\u5e8f\u5f3a\u5236\u4f7f\u7528\u6bcf\u4e2a\u516c\u53f8\uff0c\u5982\u679c\u4f7f\u7528\u540e\u8fd8\u53ef\u4ee5\u8fbe\u5230\u6700\u4f18\u89e3\uff0c\u5c31\u4f7f\u7528\u3002\u56e0\u4e3a\u5982\u679c\u9009\u4e86\u8fd9\u4e2a\u4e0d\u5f71\u54cd\u6570\u91cf\uff0c\u90a3\u4e48\u9009\u4e86\u8fd9\u4e2a\u5b57\u5178\u5e8f\u80af\u5b9a\u6bd4\u4e0d\u9009\u5c0f\u3002\u5982\u679c\u60a8\u8fd8\u662f\u542c\u4e0d\u61c2\u7684\u8bdd\u2026\u2026\u5efa\u8bae\u5148\u81ea\u5b66\u5b57\u5178\u5e8f\u3002\n\n\u5173\u952e\u662f\u5982\u4f55\u5feb\u901f\u5730\u5f97\u51fa\u9009\u4e86\u8fd9\u4e2a\u516c\u53f8\u4e4b\u540e\u6700\u591a\u80fd\u9009\u7684\u516c\u53f8\uff1a\n\n\uff08\u4e0b\u5217\u5185\u5bb9\u5c06\u516c\u53f8\u62bd\u8c61\u6210\u4e86\u7ebf\u6bb5\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u601d\u8003\uff09\n\n\u9996\u5148\uff0c\u601d\u8003\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u662f\u4e2a\u8d2a\u5fc3\u9898\u3002\u8ba9\u9009\u53d6\u7684\u53f3\u7aef\u70b9\u5c3d\u91cf\u5c0f\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u90a3\u4e48\u60a8\u53ef\u4ee5\u6309\u5de6\u533a\u95f4\u6392\u5e8f\uff0c\u6bcf\u6b21\u9009\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u5c31\u884c\u4e86\u3002\u7136\u9e45\uff0c\u5b83\u662f $\\mathcal{O}(n)$ \u7684\uff0c\u60a8\u9700\u8981\u601d\u8003\u4f18\u5316\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u8d2a\u5fc3\u7b56\u7565\u5bf9\u4e8e\u4e0d\u540c\u7684\u533a\u95f4\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u60a8\u53ef\u4ee5\u7528 ST \u8868\uff08\u500d\u589e\uff09\u4f18\u5316\u5b83\u3002\n\n\u8bbe $f_{i,j}$ \u4e3a\u7b2c $i$ \u4e2a\u70b9\u5f00\u59cb\u9009 $2^j$ \u6761\u7ebf\u6bb5\u540e\u6700\u5c0f\u7684\u53f3\u7aef\u70b9\u3002\u90a3\u4e48\u6709\u8f6c\u79fb\u65b9\u7a0b\n\n$$f[i][j]=\\min\\{f[i][j],f[f[i][j-1]][j-1]\\}$$\n\n\u7136\u9e45\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u6ca1\u6709\u521d\u503c\uff0c\u6240\u4ee5\u9700\u8981\u8d4b\u4e00\u4e2a\u521d\u503c\u3002\u5bf9\u4e8e\u6bcf\u6761\u7ebf\u6bb5\uff0c\u5b83\u7684\u5de6\u7aef\u70b9\u90fd\u76f4\u63a5\u53ef\u4ee5\u901a\u8fc7\u5b83\u5230\u53f3\u7aef\u70b9\u3002\n\n$$\\forall_{i=1}^{n}f[L_i][0]=\\min\\{f[L_i][0],R_i\\}$$\n\n(\u4e0b\u6807\u592a\u7cca\u4e86\uff0c\u89c1\u8c05\u4e00\u4e0b\u54c8qwq)\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u500d\u589e $\\mathcal{O}(\\log n)$ \u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\u6700\u591a\u53ef\u4ee5\u653e\u51e0\u6761\u7ebf\u6bb5\u4e86\u3002\n\n```\nint query(int l, int r) {\n\tint res = 0;\n\tDown(i, 20, 0) \n            if (f[l][i] <= r + 1) \n                res += 1 << i, l = f[l][i]; \n\treturn res;\n}\n```\n\n\u4f46\u662f\uff0c\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u8fd8\u662f\u65e0\u6cd5\u5224\u65ad\u4e00\u6761\u7ebf\u6bb5\u7684\u533a\u95f4\u6709\u6ca1\u6709\u88ab\u5176\u4ed6\u7ebf\u6bb5\u8986\u76d6\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u8d4b\u503c+\u533a\u95f4\u4fee\u6539\uff1f\u4f46\u662f\u8fd9\u6837\u663e\u7136\u5f88\u9ebb\u70e6\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f\n\n\u6709\u3002\u56e0\u4e3a\u73c2\u6735\u8389\u975e\u5e38\u53ef\u7231\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u73c2\u6735\u8389\u6811\uff0c\u5c06\u533a\u95f4\u8f6c\u6362\u4e3a\u503c\uff0c\u4fdd\u5b58 $l,r$ \u653e\u8fdb ```set``` \u91cc\u3002\u4fee\u6539\u65f6\u627e\u5230\u5757\u5220\u9664+\u63d2\u5165\u65b0\u7684\u6563\u5757\u5c31\u884c\u4e86\u3002\n\n$l,r\\leq10^9$ \u8bb0\u5f97\u8dd1\u79bb\u6563\u5316\u3002\n\n\u7ec6\u8282\u8fd8\u633a\u591a\uff0c\u6ce8\u610f\u522b\u5199\u6302\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define Up(i, l, r) for (int i = (l); i <= (r); i ++)\n#define Down(i, l, r) for (int i = (l); i >= (r); i --)\nusing namespace std;\nconst int N = 2e6 + 5;\nstruct Seq { // \u4e00\u6761\u7ebf\u6bb5\n\tint l, r;\n\tbool operator < (const Seq& x) const { return r < x.l; }\n\tSeq(int _l, int _r) : l(_l), r(_r) {}\n};\nint f[N][25], L[N], R[N], t[N], cnt, n, k, sum;\nset<Seq> s; // \u73c2\u6735\u8389\u6811\nint query(int l, int r) {\n\tint res = 0;\n\tDown(i, 20, 0) if (f[l][i] <= r + 1) res += 1 << i, l = f[l][i]; \n\treturn res;\n} // \u8fd4\u56de[l,r]\u6700\u591a\u80fd\u591f\u6709\u51e0\u6761\u7ebf\u6bb5\nint main() {\n\tcin >> n;\n\tUp(i, 1, n) cin >> L[i] >> R[i], t[++ cnt] = L[i], t[++ cnt] = ++ R[i];\n\tsort(t + 1, t + 1 + cnt), cnt = unique(t + 1, t + 1 + cnt) - t;\n\tUp(i, 1, n) L[i] = lower_bound(t + 1, t + 1 + cnt, L[i]) - t, R[i] = lower_bound(t + 1, t + 1 + cnt, R[i]) - t; // \u79bb\u6563\u5316\n\tUp(i, 1, cnt + 5) Up(j, 0, 20) f[i][j] = cnt + 5; // \u8d4b\u503c\u6210INT_MAX\u4f1aRE\uff0c\u8d4b\u503c\u6210\u6bd4cnt\u5927\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\n\tUp(i, 1, n) f[L[i]][0] = min(f[L[i]][0], R[i]);\n\tDown(i, cnt, 1) {\n\t\tf[i][0] = min(f[i][0], f[i + 1][0]);\n\t\tUp(j, 1, 20) f[i][j] = min(f[i + 1][j], f[f[i][j - 1]][j - 1]);\n\t}\n\ts.insert(Seq(1, cnt)), k = sum = query(1, cnt), cout << k << '\\n'; // \u6700\u591a\u63a5\u7684\u7ebf\u6bb5\u5c31\u662fquery(1, cnt)\n\tUp(i, 1, n) {\n\t\tif (s.find(Seq(L[i], R[i] - 1)) == s.end()) continue; // \u5982\u679c\u6ca1\u6709\u8be5\u7ebf\u6bb5\n\t\tSeq now = *s.find(Seq(L[i], R[i] - 1)); // \u627e\u5230\u8be5\u7ebf\u6bb5\n\t\tif (L[i] >= now.l && R[i] - 1 <= now.r) { // \u5982\u679c\u53ef\u4ee5\u5b8c\u7f8e\u8986\u76d6\n\t\t\tint ns = query(now.l, L[i] - 1) + query(R[i], now.r) - query(now.l, now.r); // \u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u6761\u7ebf\u6bb5\u6700\u4f18\u89e3\u4e0d\u53d8\n\t\t\tif (sum + ns >= k - 1) {\n\t\t\t\tcout << i << ' ', s.erase(now), k --, sum += ns;\n\t\t\t\tif (now.l < L[i]) s.insert(Seq(now.l, L[i] - 1));\n\t\t\t\tif (now.r >= R[i]) s.insert(Seq(R[i], now.r)); // \u73c2\u6735\u8389\u6811\u7684\u88c2\u5757\n\t\t\t}\n\t\t}\n\t\tif (!k) break; // k\u6ca1\u4e86\uff0c\u76f4\u63a5\u7ed3\u675f\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1660045996,
        "uid": 560516,
        "name": "\u55b5\u4ed4\u725b\u5976",
        "ccfLevel": 0,
        "title": "P3626 [APIO2009] \u4f1a\u8bae\u4e2d\u5fc3 \u9898\u89e3"
    },
    {
        "content": "\u535a\u5ba2\u94fe\u63a5\uff1ahttp://phantasmdragon.leanote.com/post/20190724s1\n\n\n\n------------\n\n\u7b2c\u4e00\u95ee\u7684\u505a\u6cd5\u975e\u5e38\u591a\uff0c~~\u5982\u679c\u53ea\u6709\u7b2c\u4e00\u95ee\u6211\u5c31\u4f1a\u4e86~~\n\n\u8003\u8651\u5982\u4f55\u9009\u51fa\u6392\u5e8f\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002\n\n\u4e00\u4e2a\u660e\u663e\u7684\u8d2a\u5fc3\u5c31\u662f\u6bcf\u6b21\u9009\u7f16\u53f7\u6700\u5c0f\u7684\u7ebf\u6bb5\u52a0\u5165\uff0c\u5982\u679c\u52a0\u5165\u540e\u7b54\u6848\u4e0d\u4f1a\u53d8\u52a3\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u9009\u4e0a\u3002\n\n\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u6c42\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u4e4b\u540e\u7684\u6700\u5927\u7b54\u6848\u3002\n\u627e\u5230\u8fd9\u4e2a\u7ebf\u6bb5\u7684\u524d\u9a71\u70b9 $L$, \u540e\u7ee7\u70b9 $R$ ,\u6ce8\u610f\u5982\u679c\u5f53\u524d\u8ba8\u8bba\u7684\u7ebf\u6bb5\u4e0e\u5df2\u52a0\u5165\u7684\u4efb\u4f55\u4e00\u6761\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u8981\u820d\u5f03\u8fd9\u6761\u7ebf\u6bb5\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u5224\u65ad\u7b54\u6848\u662f\u5426\u53d8\u52a3. \u6211\u4eec\u8bbe $Ans(x,y)$ \u4e3a\u533a\u95f4 $[x,y]$ \u4e2d\u80fd\u585e\u4e0b\u7684\u6700\u5927\u7ebf\u6bb5\u6570\uff0c\u90a3\u4e48\u5982\u679c\u6ee1\u8db3 $Ans(L+1,l-1)+Ans(r+1,R-1)+1=Ans(L+1,R-1)$ ,\u8fd9\u6761\u7ebf\u6bb5\u5c31\u662f\u5408\u6cd5\u7684,\u53ef\u4ee5\u9009\u7528\u3002\n\n![oops](https://leanote.com/api/file/getImage?fileId=5d37cbc7ab64414d87005612)\n\n\u95ee\u9898\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a\u4e86\u5982\u4f55\u5feb\u901f\u6c42 $Ans(x,y)$. \n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5 $[l_i,r_i]$, \u6211\u4eec\u5904\u7406\u4e00\u4e2a\u500d\u589e\u8868 $jmp[i][j]$ \u8868\u793a\u4ece $[l_i,r_i]$ \u8fd9\u6761\u7ebf\u6bb5\u5411**\u5de6**\u8df3 $2^j$ \u4e2a\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\u5230\u8fbe\u7684\u7ebf\u6bb5 $[l_p,r_p]$\u7684\u7f16\u53f7 $p$, \u5e76\u4e14\u8981\u6c42 $l_p$ \u5c3d\u91cf\u9760\u53f3. \n\n\u6709\u4e86\u8fd9\u4e2a\u500d\u589e\u8868\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7ebf\u6bb5 $[l_i,r_i]$ \u548c\u4e00\u4e2a\u5de6\u7aef\u70b9 $L$, \u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa $[L,l_i]$ \u8fd9\u4e2a\u533a\u95f4\u6700\u591a\u80fd\u653e\u4e0b\u591a\u5c11\u6761\u7ebf\u6bb5\u4e86\u3002\n\n\u7ef4\u62a4\u6240\u6709\u653e\u5165\u7684\u7ebf\u6bb5\u53ef\u4ee5\u7528 STL::set,\u9700\u8981\u652f\u6301\u67e5\u627e\u524d\u9a71\u540e\u7ee7\u548c\u63d2\u5165\u64cd\u4f5c.\n\n\u5c0ftrick#1:\u5bf9\u4e8e\u6bcf\u4e2aset\u91cc\u7684\u5750\u6807\uff0c\u628a\u5b83\u548c\u5176\u5bf9\u5e94\u7ebf\u6bb5\u7f16\u53f7\u653e\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\uff0c\u65b9\u4fbf\u76f4\u63a5\u4f7f\u7528.\n\n\u5c0ftrick#2:\u4e00\u5f00\u59cb\u63d2\u5165\u4e24\u4e2a\u8fb9\u754c\u70b9\uff0c\u51cf\u5c11\u8fb9\u754c\u5224\u65ad\u3002\n\n\n------------\n----------\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<set>\n#define maxn 2000005\nusing namespace std;\nstruct node{int l,r,id;}d[maxn];\nstruct snode{int p,id;};\nbool operator <(snode a,snode b){return a.p<b.p;}\nset<snode> s;\nint cmp(node a,node b){return a.r<b.r;}\nint cmp1(node a,node b){return a.id<b.id;}\nint Ha[maxn],n,tot;\nint jmp[maxn][22],pre[maxn],id[maxn];\nint getans(int l,int from)\n{\n    int ret=0;\n    for(int i=20;i>=0;i--)\n        if(jmp[from][i]&&d[jmp[from][i]].l>l) ret+=(1<<i),from=jmp[from][i];\n    return ret;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d%d\",&d[i].l,&d[i].r),Ha[++tot]=d[i].l,Ha[++tot]=d[i].r,d[i].id=i;\n    sort(Ha+1,Ha+tot+1);\n    tot=unique(Ha+1,Ha+tot+1)-Ha-1;\n    for(int i=1;i<=n;i++)\n    {\n        d[i].l=lower_bound(Ha+1,Ha+tot+1,d[i].l)-Ha;\n        d[i].r=lower_bound(Ha+1,Ha+tot+1,d[i].r)-Ha;\n    }\n    sort(d+1,d+n+1,cmp);\n    for(int i=1;i<=n;i++)\n    {\n        if(pre[d[i].r]<d[i].l)\n            pre[d[i].r]=d[i].l,id[d[i].r]=d[i].id;\n    }\n    for(int i=1;i<=tot;i++)\n    {\n        if(pre[i]<pre[i-1])\n            pre[i]=pre[i-1],id[i]=id[i-1];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        jmp[d[i].id][0]=id[d[i].l-1];\n        for(int j=1;j<=20;j++)\n            jmp[d[i].id][j]=jmp[jmp[d[i].id][j-1]][j-1];\n    }\n    int tid=0,ans=0;\n    for(int i=1;i<=n;i++)\n        if(!tid||d[tid].l<d[i].l)tid=i;\n    tid=d[tid].id;\n    jmp[n+1][0]=tid;\n    for(int j=1;j<=20;j++)\n        jmp[n+1][j]=jmp[jmp[n+1][j-1]][j-1];\n    for(int i=20;i>=0;i--)\n        if(jmp[tid][i]) ans+=(1<<i),tid=jmp[tid][i];\n    printf(\"%d\\n\",ans+1);\n    sort(d+1,d+n+1,cmp1);\n    s.insert((snode){1e9,n+1});\n    s.insert((snode){0,0});\n    set<snode>::iterator it;\n    for(int i=1;i<=n;i++)\n    {\n        if(s.lower_bound((snode){d[i].r,0})!=s.lower_bound((snode){d[i].l,0})) continue;\n        it=s.lower_bound((snode){d[i].r,0});\n        snode t1=*it,t2=*(--it);\n        if(getans(t2.p,i)+getans(d[i].r,t1.id)+1!=getans(t2.p,t1.id)) continue;\n        printf(\"%d \",i);\n        s.insert((snode){d[i].l,i});\n        s.insert((snode){d[i].r,i});\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1563939051,
        "uid": 20815,
        "name": "PhantasmDragon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3626 \u3010[APIO2009]\u4f1a\u8bae\u4e2d\u5fc3\u3011"
    },
    {
        "content": "\u9996\u5148\u5c06\u7ebf\u6bb5\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\n\n\u5982\u679c\u80fd\u4fdd\u8bc1\u6700\u4f18\u5c31\u52a0\u5165\u3002\n\n\u9898\u76ee\u53d8\u6210\uff0c\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\uff0c\u67e5\u8be2\u524d\u9a71\u540e\u7ee7\uff0c\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u7ebf\u6bb5\u3002\n\n\u7b2c\u4e00\u95ee\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u7b2c\u4e8c\u95ee\u53ef\u4ee5\u500d\u589e\u51fa\u6bcf\u4e2a\u70b9\u5f80\u524d^i\u4e2a\u7ebf\u6bb5\u5230\u8fbe\u7684\u5de6\u7aef\u70b9\u3002\n\n\n\n\n\n    \n```cpp\n#include<bits/stdc++.h>\nusing std::sort;\n#define N 400100\nint n,l[N],r[N];\nint t,d,a[N*6]; \nint *q[N<<1],top;\nvoid chmax(int &x,int y)\n{\n    if(x<y)x=y;\n}\nbool xiao(int *x,int *y)\n{\n    return *x<*y;\n}\nint deep,right[N][20];\nint get_l(int r,int l)\n{\n    int ans=0;\n    for(int j=deep;j>=0;--j)\n    if(right[r][j]>l) \n    {\n        r=right[r][j]-1;\n        ans+=1<<j;\n    }\n    return ans;\n}\n#define cl (i<<1)\n#define cr (cl+1)\nint qiu_l(int i)\n{\n    if(a[i+=d])return i-d;\n    for(;i>1;i>>=1)\n    if((i&1)&&a[i^1])\n    {\n        for(i=i^1;i<=d;)\n        if(a[cr])i=cr;\n        else i=cl;\n        return i-d;\n    }\n    return 0;\n}\nint qiu_r(int i)\n{\n    if(a[i+=d])return i-d;\n    for(;i>1;i>>=1)\n    if(!(i&1)&&a[i^1])\n    {\n        for(i=i^1;i<=d;)\n        if(a[cl])i=cl;\n        else i=cr;\n        return i-d;\n    }\n    return t+1;\n}\nvoid add(int i,int x)\n{\n  a[i+=d]=x;\n  while(i>>=1)a[i]=a[cl]+a[cr]; \n} \nbool ok(int x)\n{\n    int le,ri;\n    if((ri=qiu_r(l[x]))<=r[x]||a[d+ri]==2)return 0;\n    le=qiu_l(l[x]);\n    int now=get_l(ri-1,le);\n    if(get_l(l[x]-1,le)+get_l(ri-1,r[x])+1<now)return 0;\n    add(r[x],2);\n    add(l[x],1);\n    return 1;\n}\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    int i,j;scanf(\"%d\",&n);\n    for(i=1;i<=n;++i)\n    {scanf(\"%d%d\",l+i,r+i);\n     q[++top]=l+i;q[++top]=r+i; \n    }\n    sort(q+1,q+top+1,xiao);\n    int now=*q[1];t=1;*q[1]=1;\n    for(i=2;i<=top;++i)\n    {\n        if(now<*q[i]){++t;now=*q[i];}\n        *q[i]=t;\n    }\n    for(d=1;d<=t;d<<=1);d-=1;\n    for(i=1;i<=n;++i) chmax(right[r[i]][0],l[i]);\n    for(i=2;i<=t;++i) chmax(right[i][0],right[i-1][0]);\n    for(j=1;right[t][j-1];++j) \n    for(i=t;right[i][j-1];--i) right[i][j]=right[right[i][j-1]-1][j-1];\n    deep=j-2;\n    now=get_l(t,0);\n    printf(\"%d\\n\",now);\n    i=1;\n    while(now--)\n    {\n        while(!ok(i))++i;\n        printf(\"%d \",i);++i;\n    }\n}\n```",
        "postTime": 1489678405,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3626 \u3010[APIO2009]\u4f1a\u8bae\u4e2d\u5fc3\u3011"
    },
    {
        "content": "\u5047\u8bbeget_ans\u51fd\u6570\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u533a\u95f4\u7684\u6700\u5927\u653e\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u5982\u679c\u6211\u60f3\u653e\u5165\u4e00\u4e2a[l0,r0]\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\n\n\nget_ans(l,r)=get_ans(l,l0-1)+get_ans(r0+1,r)+1\n\n\nl\u662f\u79bbl0\u6700\u8fd1\u7684\u4e0a\u6b21\u63d2\u5165\u7684\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0cr\u662f\u79bbr0\u6700\u8fd1\u7684\u4e0a\u6b21\u63d2\u5165\u7684\u5de6\u7aef\u70b9\u3002\n\n\n\u5f00\u59cb\u6211\u8fd8\u5728\u60f3\u600e\u4e48\u7ef4\u62a4\u9009\u62e9\u533a\u95f4\u4e4b\u540e\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684\u6570\u91cf\u53d8\u5316\u60c5\u51b5\uff0c\u4e8b\u5b9e\u4e0a\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u600e\u4e48\u53d8\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u5b83\u4e0d\u4f1a\u4f7f\u5f97\u6570\u91cf\u53d8\u5316\u5373\u53ef\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u53ea\u8981\u77e5\u9053\u6211\u80fd\u5f71\u54cd\u7684\u533a\u95f4\u600e\u4e48\u53d8\uff0c\u5916\u9762\u7684\u533a\u95f4\u56e0\u4e3a\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u80af\u5b9a\u4e5f\u4e0d\u4f1a\u53d8\u5316\uff0c\u6362\u800c\u8a00\u4e4b\u5f53\u524d\u5f71\u54cd\u533a\u95f4\u4e0d\u53d8\u5219\u6574\u4e2a\u533a\u95f4\u7684\u603b\u6570\u91cf\u5c31\u4e0d\u4f1a\u53d8\u3002\n\n\n\u5176\u5b9e\u6bcf\u4e2a\u7ebf\u6bb5\u7684\u4e0b\u7aef\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u500d\u589e......\n\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u4ec0\u4e48\u5462\uff1f\u9996\u5148\u6211\u4eec\u9700\u8981\u5728log n\u7684\u65f6\u95f4\u5185\u5b9e\u73b0\u5feb\u901f\u67e5\u8be2\u7ed9\u5b9a\u8303\u56f4\u6700\u5927\u53ef\u4ee5\u9009\u53d6\u7684\u533a\u95f4\u6570\u91cf\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u628a\u533a\u95f4\u91cd\u65b0\u6392\u5e8f\uff0c\u5e76\u4e14\u53bb\u6389\u4e92\u76f8\u5305\u542b\u7684\u533a\u95f4\u4e2d\u8f83\u5927\u7684\u90e8\u5206\uff08\u663e\u7136\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u53ef\u884c\u7684\uff09\uff0c\u8fd9\u53ef\u4ee5\u5148\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u518d\u7528\u4e00\u4e2a\u53f3\u7aef\u70b9\u5355\u8c03\u9012\u589e\u7684\u6808\u5b9e\u73b0\u3002\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4fdd\u7559\u4e0b\u6765\u7684\u533a\u95f4i\uff0c\u8003\u8651\u7528f[i][j]\u8868\u793a\u4ece\u7b2ci\u4e2a\u533a\u95f4\u5f00\u59cb\u5f80\u540e\u8fde\u7eed\u9009\u53d62^j\u4e2a\u533a\u95f4\u4e4b\u540e\u843d\u5728\u54ea\u4e2a\u533a\u95f4\u4e0a\u3002\n\n\n\u6211\u53ef\u4ee5\u627e\u5230[l,r]\u4e2d\u7684\u7b2c\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u500d\u589e\u7684\u627e\u533a\u95f4\uff0c\u4e0d\u65ad\u5730\u5f80\u540e\u8df3\u5e76\u7d2f\u52a0\u7b54\u6848\u3002\u901a\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\n\u53e6\u5916\uff0c\u6211\u4eec\u9009\u53d6\u4e86\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u53ef\u4ee5\u7528\u4e00\u4e2aset\u7ef4\u62a4\u4e00\u4e0b\u6211\u9009\u53d6\u7684\u533a\u95f4\u7684\u7aef\u70b9\u5750\u6807\uff0c\u65b9\u4fbf\u6211\u5feb\u901f\u67e5\u8be2\u6700\u8fd1\u7684\u5750\u6807\uff0c\u5373\u4e3alowbound+set\u5bfb\u627e\u6bcf\u4e2a\u533a\u95f4\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\n\n```cpp\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n\n#define vd void\n#define il inline\n\n#define re register\n#define FOR(i,a,b) for(re int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(re int i=(a);i>=(b);--i)\n#define REP(u) for(re int i=head[u];i;i=pan[i].next)\n\n//#define gc getchar()\n#define gc pa==pb&&(pb=(pa=buf)+fread(buf,1,1<<17,stdin),pa==pb)?EOF:*pa++\n\nusing namespace std;\n\nstatic char buf[1<<17],*pa(buf),*pb(buf);\n\ntypedef long long ll;\n\nconst int N(500007),INF(2147483647);\n\nset <int> S;\nint n,end,ans,cnt,len;\nint l[N],f[N][19],pd[N];\n\nstruct Node {\n    public:\n        int l,r;\n}a[N],b[N];\n\nil bool cmp(Node p,Node pp) {\n\treturn p.l==pp.l?p.r>pp.r:p.l<pp.l;\n}\n\nil int read() {\n    re int s=0,f=1;re char ch(gc);\n    while(ch<'0'||ch>'9') ch=='-'?f=-1,ch=gc:ch=gc;\n    while(ch>='0'&&ch<='9') s=s*10+ch-48,ch=gc;\n    return f*s;\n}\n\n// get_ans(l,r)=get_ans(l,l0-1)+get_ans(r0+1,r0)+1\n\nint get_ans(int L,int R) {\n    int head(lower_bound(l+1,l+cnt+1,L)-l),pd,ans(1);\n    if(L>R||L>end||head>cnt||b[head].r>R) return (0);\n    ROF(i,18,0) {\n        if(f[head][i]==cnt+1||!f[head][i]) continue;\n        pd=b[f[head][i]].r;\n        if(pd>R) continue;\n        head=f[head][i],ans+=(1<<i);\n    } return ans;\n}\n\nvd build() {\n    FOR(i,1,n) b[i]=a[i];\n    sort(b+1,b+n+1,cmp),cnt=0;\n    b[++cnt]=b[1];\n    FOR(i,2,n) {\n        while(b[i].r<b[cnt].r && cnt>0) --cnt;\n        b[++cnt]=b[i];\n    } len=0;int pass(0);\n    FOR(i,1,cnt) l[++len]=b[i].l;\n    l[++len]=INF;\n    FOR(i,0,18) f[cnt+1][i]=cnt+1;\n    FOR(i,1,cnt) pass=upper_bound(l+1,l+len+1,b[i].r)-l,f[i][0]=pass;\n    FOR(j,1,18) FOR(i,1,cnt) if(f[i][j-1] && f[f[i][j-1]][j-1]) f[i][j]=f[f[i][j-1]][j-1];\n}\n\nvd Main() {\n    n=read();\n    FOR(i,1,n)\n        a[i].l=read(),a[i].r=read(),l[++cnt]=a[i].l,l[++cnt]=a[i].r;\n    sort(l+1,l+cnt+1);\n    end=len=unique(l+1,l+1+cnt)-l-1;\n    FOR(i,1,n)\n        a[i].l=lower_bound(l+1,l+len+1,a[i].l)-l,a[i].r=lower_bound(l+1,l+len+1,a[i].r)-l;\n    build();int now,nowl,nowr;\n    ans=get_ans(1,end),printf(\"%d\\n\",ans);\n    S.insert(-INF),S.insert(INF);\n    FOR(i,1,n) {\n        now=*S.lower_bound(a[i].l);\n        if(now==INF||!pd[now]) {\n            if(now<=a[i].r) continue;\n            nowl=*--S.lower_bound(a[i].l),nowl++;\n            nowr=*S.lower_bound(a[i].r),nowr--;\n            now=get_ans(nowl,a[i].l-1)+get_ans(a[i].r+1,nowr)+1;\n            if(now<get_ans(nowl,nowr)) continue;\n            S.insert(a[i].l),S.insert(a[i].r);\n            if(a[i].l!=a[i].r) pd[a[i].r]=true;\n            printf(\"%d \",i);\n        }\n    }\n}\n\nint main() {\n    Main();\n    return (0);\n}\n\n```\n\n\n",
        "postTime": 1550927680,
        "uid": 124571,
        "name": "\u795e\u8ff9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3626 \u3010[APIO2009]\u4f1a\u8bae\u4e2d\u5fc3\u3011"
    }
]