[
    {
        "content": "\u9898\u76ee\u63cf\u8ff0-->[p2700 \u9010\u4e2a\u51fb\u7834](https://www.luogu.org/problemnew/show/P2700)\n\n## \u5e7f\u544a\uff1a [\u5b89\u5229blog](https://www.luogu.org/blog/RPdreamer/#)\n\n**\u9898\u610f\u6982\u62ec**\n\n\u82b1\u8d39\u6700\u5c0f\u7684\u4ee3\u4ef7,\u4f7f\u5f97\u4e00\u4e9b\u6709\u6807\u8bb0\u7684\u8282\u70b9**\u4e0d\u8fde\u901a**.\n\n## \u5206\u6790\n\n\u6211\u4eec\u9700\u8981\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\u4f7f\u5f97\u539f\u6765\u8fde\u901a\u7684\u56fe\u4e2d\u4e00\u4e9b\u8282\u70b9\u4e4b\u95f4\u4e0d\u76f8\u4e92\u8fde\u901a.\n\n\u8d2a\u5fc3\u663e\u7136\u662f\u53ef\u884c\u7684~~(\u4e00\u70b9\u4e5f\u4e0d\u663e\u7136~~\n\n\u770b\u5230\u5176\u4ed6\u4eba\u5199\u4e86dp,\u5199\u4e86\u8d2a\u5fc3.\n\n\u4f46\u6211\u611f\u89c9\u53ef\u4ee5**\u6392\u5e8f+\u5e76\u67e5\u96c6**\u505a\u554a.\n\n### \u6392\u5e8f\n\n\u8003\u8651\u6211\u4eec\u8981\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\u5220\u8fb9,\u4f46\u662f**\u5e76\u67e5\u96c6\u4e0d\u652f\u6301\u5220\u9664**\u64cd\u4f5c.\n\n~~(\u8c8c\u4f3c\u6709\u4e00\u79cd\u4e1c\u897f\u53eb\u5206\u6cbb\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u79cd\u64cd\u4f5c.~~\n\n\u56e0\u6b64,\u6211\u4eec\u6839\u636e**\u5bb9\u65a5\u539f\u7406**~~(\u8fd9\u73a9\u610f\u662f\u53eb\u5bb9\u65a5\u5427.~~\n\n\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\u5220\u8fb9,\u7b49\u4ef7\u4e8e\u82b1\u6700\u5927\u4ee3\u4ef7\u5efa\u8fb9,\u6700\u540e\u5269\u4e0b\u4e0d\u5efa\u7684\u8fb9,\u5c31\u662f\u6211\u4eec\u7684\u7b54\u6848.\n\n\u6240\u4ee5\u8bf4,\u6211\u4eec\u9700\u8981**\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u5efa\u56fe**\u3002**sort\uff01**\n\n\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u7684\u662f**\u4e24\u4e2a\u654c\u4eba\u8282\u70b9\u4e0d\u4e92\u76f8\u8fde\u901a**.\n\n\u8fd9\u5c31\u662f\u6211\u4eec**\u5e76\u67e5\u96c6**\u7684\u4f5c\u7528!\n\n### \u5e76\u67e5\u96c6\n\n**\u9996\u5148\u660e\u786e\uff1a** \n\n**\u5e76\u67e5\u96c6\u8981\u521d\u59cb\u5316,\u4e00\u5b9a\u8981\u521d\u59cb\u5316!**\n\n\u4e0b\u9762\u7684\u56fe\u4e2d,**\u7ea2\u8272\u4ee3\u8868\u654c\u4eba\u8282\u70b9,\u7eff\u8272\u4ee3\u8868\u6211\u65b9\u8282\u70b9.**\n\n\u5982\u679c\u67d0\u4e24\u4e2a\u8282\u70b9\u662f\u6211\u4eec\u7684\u654c\u4eba\u8282\u70b9,\u6211\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u53bb\u5efa\u8fb9.~~(\u4e3a\u864e\u4f5c\u4f25?~~ \u50cf\u8fd9\u6837\u2193.\n![](https://cdn.luogu.com.cn/upload/pic/32024.png)\n\u5982\u679c\u4f60\u8fde\u63a5,\u90a3\u4f60\u5c31\u8fdd\u80cc\u4e86\u9898\u76ee\u8981\u6c42,\u4f60\u4e5f\u4e0d\u662f\u4e00\u4e2a\n\n``\u79c9\u627f\u4f1f\u5927\u519b\u4e8b\u5bb6\u7684\u6218\u7565\u601d\u60f3\uff0c\u4e00\u4e2a\u6709\u667a\u6167\u7684\u519b\u957f\u4e86``\n\n\u8fd8\u6709,\u5982\u679c\u6211\u4eec\u5df2\u7ecf~~\u5c06\u654c\u4eba\u5305\u56f4~~\u5efa\u51fa\u4e0b\u9762\u8fd9\u6837\u7684\u56fe\u8fd9\u65f6,\u8fd8\u6709\u4e00\u4e2a\u654c\u4eba\u8282\u70b9.\u2193\n![](https://cdn.luogu.com.cn/upload/pic/32027.png )\n\n\u5982\u679c\u6211\u4eec\u8fde\u63a5\u67d0\u4e00\u4e2a\u6211\u65b9\u8282\u70b9,\u4e0d\u8fde\u63a5\u654c\u65b9\u8282\u70b9,\u90a3\u654c\u4eba\u4e5f\u4f1a\u4e92\u76f8\u8fde\u63a5~~(\u7ffb\u8fc7\u5c4b\u540e\u7684\u5c71~~\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u9700\u8981\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5.\n\n\u5982\u679c,\u6211\u65b9\u8282\u70b9\u5df2\u7ecf\u8fde\u63a5\u4e86\u654c\u65b9\u8282\u70b9,\u5219\u9700\u8981**\u6807\u8bb0\u6211\u65b9\u8282\u70b9,\u4f7f\u5f97\u654c\u65b9\u8282\u70b9\u65e0\u6cd5\u901a\u8fc7\u6211\u65b9\u8282\u70b9\u8fde\u63a5\u654c\u65b9\u8282\u70b9**.\n\n\u56e0\u6b64\u8bf4,\u6211\u4eec\u53ef\u4ee5**\u628a\u8fde\u63a5\u5230\u654c\u4eba\u8282\u70b9\u7684\u6211\u65b9\u8282\u70b9\u53d8\u6210\u654c\u4eba\u8282\u70b9.**\n\n\u4ece\u800c\u4f7f\u5f97\u5176\u4ed6\u654c\u4eba\u8282\u70b9\u4e0e\u5176\u65e0\u6cd5\u8fde\u63a5.\n\n\u90a3\u6211\u4eec\u4e0a\u9762\u7684\u56fe\u5c31\u53d8\u6210\u8fd9\u6837\u2193\n![](https://cdn.luogu.com.cn/upload/pic/32028.png )\n\n\u8fd9\u6837\u6211\u4eec\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u6240\u60f3\u4e86.\n\n\u6700\u540e\u6211\u4eec\u4f1a\u5c06\u8fb9\u6743\u5927\u7684\u8fb9\u52a0\u5165\u5230\u5e76\u67e5\u96c6\u4e2d.\n\n\u5219\u6700\u540e**\u6ca1\u6709\u52a0\u5165\u5230\u5e76\u67e5\u96c6\u4e2d\u7684\u70b9,\u5c31\u4f1a\u662f\u88ab\u5b64\u7acb\u7684\u654c\u65b9\u8282\u70b9.**\n\n\u6240\u4ee5\u6211\u4eec\u628a**\u603b\u8fb9\u6743\u51cf\u53bb\u6211\u4eec\u52a0\u5165\u5230\u56fe\u4e2d\u7684\u8fb9\u6743**\u5c31\u662f\u6211\u4eec\u7684ans\u5566\uff01\n\n## \u5173\u4e8e\u6837\u4f8b\n\n\u6837\u4f8b\u5efa\u7684\u539f\u56fe\u2193\n![](https://cdn.luogu.com.cn/upload/pic/32030.png)\n\n\u6700\u7ec8\u662f\u8fd9\u6837\u7684\u2193\n![](https://cdn.luogu.com.cn/upload/pic/32034.png )\n\n\u56e0\u6b64\u6211\u4eec\u5728\u6837\u4f8b\u7684\u7b54\u6848\u662f4.\n\n--------------------\u4ee3\u7801---------------------\n```cpp\n#include<bits/stdc++.h>\n#define IL inline\n#define RI register int\nIL void in(int &x)\n{\n\tint f=1;x=0;char s=getchar();\n\twhile(s>'9' or s<'0'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0' and s<='9'){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\nint n,k,f[100008],tot;\nbool init[1000008];\nlong long ans;\nstruct cod{int u,v,w;}edge[100008];\nIL int find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nIL bool ccp(const cod&a,const cod&b){return a.w>b.w;}\nint main(void)\n{\n\tin(n),in(k);\n\tfor(RI i=1;i<=n;i++)f[i]=i;//\u4e00\u5b9a\u8981\u521d\u59cb\u5316!\n\tfor(RI i=1,x;i<=k;i++)in(x),init[x]=true;\n\tfor(RI i=1;i<=n-1;i++)\n\t\tin(edge[i].u),in(edge[i].v),in(edge[i].w),ans+=edge[i].w;\n\tstd::sort(edge+1,edge+n,ccp);//\u4ece\u5927\u5230\u5c0fsort.\n\tfor(RI i=1;i<=n-1;i++)\n\t{\n\t\tint u=edge[i].u,v=edge[i].v,w=edge[i].w;\n\t\tint fu=find(u),fv=find(v);\n\t\tif(init[fu] and init[fv])continue;\n\t\tf[fu]=fv;\n\t\tans-=w;//\u51cf\u53bb\u8fb9\n\t\tif(init[fu])init[fv]=true;\n\t\telse if(init[fv])init[fu]=true;\n\t}\n\tprintf(\"%lld\",ans);\n}\n```",
        "postTime": 1536152472,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u5b8c\u5168\u6ca1\u60f3\u5230\u751f\u6210\u6811\uff0c\u5e76\u67e5\u96c6\u4ec0\u4e48\u7684\uff0c\u770b\u4e00\u773c\u5c31\u89c9\u5f97\u662f\u6811\u5f62dp\n\ndp[i][0]\u8868\u793a\u5230\u4e86i\u8fd9\u4e2a\u70b9\uff0c\u5b50\u6811\u5df2\u7ecf\u5408\u6cd5\uff0c\u5f53\u524d\u70b9\u6240\u5728\u96c6\u5408\u6ca1\u6709\u654c\u519b\u7684\u6700\u5c0f\u4ee3\u4ef7\n\ndp[i][1]\u8868\u793a\u5230\u4e86i\u8fd9\u4e2a\u70b9\uff0c\u5b50\u6811\u5df2\u7ecf\u5408\u6cd5\uff0c\u5f53\u524d\u70b9\u6240\u5728\u96c6\u5408\u6709\u654c\u519b\u7684\u6700\u5c0f\u4ee3\u4ef7\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5206\u60c5\u51b5\u8ba8\u8bba\u8f6c\u79fb\n\n1.i\u53f7\u70b9\u6ca1\u6709\u654c\u519b\uff0c\u90a3\u4e48dp[i][1]\u5c31\u610f\u5473\u7740\u8981\u4ece\u5b50\u6811\u4e2d\u9009\u4e00\u4e2a\u80fd\u4f7f\u82b1\u8d39\u6700\u5c0f\u7684dp[v][1]\uff0c\u5176\u4ed6\u5b50\u6811\u90fd\u5207\u65ad\u6216\u8005\u4ecedp[v][0]\u8f6c\u79fb\n\n\u8fd9\u65f6\u5019dp[i][0]+=min(dp[v][0], dp[v][1]+w[i])(v\u662f\u513f\u5b50\u8282\u70b9)\n\n2.i\u53f7\u70b9\u6709\u654c\u519b\uff0c\u90a3\u4e48dp[i][1]+=min(dp[v][0], dp[v][1]+w[i])\u53ea\u80fd\u548c\u6709\u654c\u519b\u7684\u513f\u5b50\u8282\u70b9\u65ad\u7edd\u8054\u7cfb\n\n\u6b64\u65f6dp[i][0]=\u65e0\u9650\u5927\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662fmin(dp[root][1], dp[root][0])\u4e86\n\n\u8be6\u7ec6\u7684\u8f6c\u79fb\u89c1\u4ee3\u7801 \u53ea\u898176ms\n\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 9999999999999\n#define ll long long\n#define mm(a,b) memset(a,b,sizeof(a))\nusing namespace std;\nint read(){\n    int sum = 0, fg = 1;\n    char c = getchar();\n    while(c < '0' || c > '9'){if(c == '-')fg = -1;c = getchar();}\n    while(c >='0' && c <='9')sum = (sum<<1) + (sum<<3) + c-'0', c = getchar();\n    return sum * fg;\n}\nconst int maxn = 200010;\nvoid file(){\n#ifndef ONLINE_JUDGE\n    freopen(\"ai.in\",\"r\",stdin);\n    freopen(\"ai.out\",\"w\",stdout);\n#endif\n}\nll dp[maxn][2];\nint n, k, vis[maxn], Begin[maxn], to[maxn], e, Next[maxn], w[maxn], is[maxn];\nvoid add(int x,int y,int z){\n    to[++e] = y;\n    Next[e] = Begin[x];\n    Begin[x] = e;\n    w[e] = z;\n}\nll minn(ll x,ll y){\n    return x < y ? x : y;\n}\nvoid dfs_calc(int h,int father){\n    dp[h][0] = dp[h][1] = 0; is[h] = vis[h];//is\u6570\u7ec4\u5224\u5b50\u6811\u5185\u6709\u6ca1\u6709\u654c\u519b\n    if(vis[h]) dp[h][0] = inf;//\u82e5\u5f53\u524d\u70b9\u6709\u654c\u519b\uff0cdp[h][0]\u65e0\u9650\u5927\n    ll tot = 0;\n    for(int i = Begin[h];i ;i = Next[i]){\n        int v = to[i];\n        if(v == father) continue;\n        dfs_calc(v, h); is[h] |= is[v];\n        tot += minn(dp[v][0], dp[v][1] + (ll)w[i]);//\u5148\u52a0\u4e0a\u6240\u6709\u4ee3\u4ef7\n    }\n    if(!vis[h]){\n        dp[h][1] = tot;\n        for(int i = Begin[h];i ;i = Next[i]){\n            int v = to[i];\n            if(v == father) continue;\n            if(!is[v]) continue;\n            dp[h][1] = minn(dp[h][1], tot - minn(dp[v][0], dp[v][1] + (ll)w[i]) + dp[v][1]);//\u6811\u5f62dp\u5e38\u7528\u5957\u8def\uff0c\u5728\u8fd9\u91cc\u9009\u62e9\u548c\u54ea\u4e00\u4e2a\u76f8\u8fde\n            if(vis[v])dp[h][0] += (ll)w[i] + dp[v][1];//\u518d\u5f80\u5e95\u4e0b\u5c31\u662f\u7b80\u5355\u7684\u5206\u7c7b\u8ba8\u8bba\u4e86\n            else dp[h][0] += minn(dp[v][0], dp[v][1] + (ll)w[i]);\n        }\n    }else{\n        for(int i = Begin[h];i ;i = Next[i]){\n            int v = to[i];\n            if(v == father) continue;\n            if(!is[v]) continue;\n            if(vis[v]) dp[h][1] += dp[v][1] + (ll)w[i];\n            else dp[h][1] += minn(dp[v][0], dp[v][1] + (ll)w[i]);\n        }\n    }\n}\nvoid Get(){\n    n = read(), k = read();\n    for(int i = 1;i <= k; ++i){\n        int x = read() + 1;\n        vis[x] = 1;\n    }\n    for(int i = 1;i < n; ++i){\n        int x = read() + 1, y = read() + 1, z = read();\n        add(x, y, z), add(y, x, z);\n    }\n    dfs_calc(1, -1);\n    printf(\"%lld\\n\", minn(dp[1][0], dp[1][1]));\n}\nint main(){\n    file();\n    Get();\n    return 0;\n}\n```",
        "postTime": 1510298905,
        "uid": 59812,
        "name": "\u8001\u6076\u5fc3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u5c31\u662f\u611f\u89c9\u751f\u6210\u6811\n\n\u6b63\u96be\u5219\u53cd\n\n\u6709\u5f15\u7528\u697c\u4e0b\u7ba1\u7406\u5458\u7684\u8bdd\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m,k;\nstruct point \n{\n    int x,y,dis;\n}e[100001];\nint fat[100001];\nint find(int x)\n{\n    if(fat[x]!=x)\n    fat[x]=find(fat[x]);\n    return fat[x];\n}\nint visit[100001];\nbool cmp(point const &a,const point &b)\n{\n    return a.dis>b.dis;\n}\nlong long sum;\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        fat[i]=i;\n    for(int i=1;i<=m;i++)\n    {int x;\n        cin>>x;\n    visit[x]=1;\n    }    \n    for(int i=1;i<=n-1;i++)\n    {cin>>e[i].x>>e[i].y>>e[i].dis;\n    sum+=e[i].dis;\n    }\n    sort(e+1,e+n,cmp);//\u5148\u4ee4\u6240\u6709\u9053\u8def\u6467\u6bc1\uff0c\u518d\u6309\u5927\u5230\u5c0f\u4fee\u5efa\u4e24\u4e2a\u4e0d\u90fd\u662f\u654c\u4eba\u7684\u8282\u70b9\n    for(int i=1;i<n;i++)\n    {\n        int r1=find(e[i].x),r2=find(e[i].y);\n        if(!(visit[r1]&&visit[r2]))//\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u5fc5\u987b //\u8981\u4e24\u4e2a\u96c6\u5408\u4e0d\u662f\u90fd\u6709\u654c\u4eba\u7684\u57ce\u5e02\n        {    fat[r2]=r1;\n        visit[r1]=(visit[r1]||visit[r2]);//\u5982\u679c\u4e00\u4e2a\u6b63\u5e38\u8282\u70b9\u8fde\u63a5\u4e0a\u4e86\u654c\u4eba\u8282\u70b9\uff0c\n                                                      //\u90a3\u4e48\u8fd9\u4e2a\u6b63\u5e38\u8282\u70b9\u4e5f\u53d8\u4e3a\u654c\u4eba\u8282\u70b9\n             //\u5982\u679c\u8fde\u63a5\u5230\u4e86\u88ab\u5360\u9886\u4e86\u7684,\u53e6\u5916\u4e00\u4e2a\u70b9\u8981\u88ab\"\u5047\u5360\u9886\"(\u56e0\u4e3a\u5408\u5e76\u4e86,\u6240\u53ea\u8981\u6539\u7236\u4eb2\u5360\u9886\u72b6\u6001\u5c31\u597d\u4e86)\n        //\u4e0d\u7136\u7684\u8bdd\u8981\u662f\u53e6\u5916\u4e00\u4e2a\u5360\u9886\u7684\u70b9\u8fde\u63a5\u5230\u4e86\u8fd9\u4e2a\u70b9\u90a3\u4e48\u5c31\u6709\u4e24\u4e2a\u88ab\u771f\u5360\u9886\u70b9\u8054\u901a\u4e86 \n        sum-=e[i].dis; \n        }\n    }\n    cout<<sum;\n    return 0;\n}\n\n```",
        "postTime": 1509025196,
        "uid": 35362,
        "name": "\u5584\u826f\u7684\u6b7b\u795e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u8003\u8651\u865a\u6811\u52a0DP\u3002\n\n\u5efa\u51fa\u865a\u6811\uff0c\u865a\u6811\u4e0a\u7684\u6bcf\u4e2a\u8fb9\u662f\u539f\u6811\u4e0a\u8be5\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n\n\u8bb0\u5f55dp[i][0/1]\u8868\u793a\u5b50\u6811\u4e2d\u4e0d\u5b58\u5728\u6216\u8005\u5b58\u5728\u654c\u519b\u70b9\u65f6\u65ad\u6389\u7684\u8fb9\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u90a3\u4e48\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.\u8be5\u865a\u6811\u70b9\u539f\u6765\u662f\u654c\u519b\u70b9\u3002\n\n\u90a3\u4e48dp[i][0]=INF,dp[i][1]\u4e3asum\uff08\u5b50\u8282\u70b9min(dp\u5b58\u5728\u654c\u519b\u70b9\u52a0\u4e0a\u65ad\u6389\u8fb9,dp\u4e0d\u5b58\u5728\u654c\u519b\u70b9)\uff09\u3002\n\n\n2.\u8be5\u865a\u6811\u70b9\u539f\u6765\u4e0d\u662f\u654c\u519b\u70b9\u3002\n\n\u90a3\u4e48dp[i][0]=sum\uff08\u5b50\u8282\u70b9min(dp\u5b58\u5728\u654c\u519b\u70b9\u52a0\u4e0a\u65ad\u6389\u8fb9,dp\u4e0d\u5b58\u5728\u654c\u519b\u70b9)\uff09,dp[i][1]\u4e3adp[i][0]\u51cf\u53bb\u4e00\u6761\u5b50\u6811\u7684\u8d21\u732e\u518d\u52a0\u4e0a\u8be5\u5b50\u6811\u7684\u5b58\u5728\u654c\u519b\u70b9\u7684\u4ee3\u4ef7\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\ninline int read(){\n    char ch=getchar();int i=0,f=1;\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){i=(i<<1)+(i<<3)+ch-'0';ch=getchar();}\n    return i*f;\n}\nconst int Maxn=1e5+50;\nint n,k,dfn[Maxn],mn[Maxn][20],fa[Maxn][20],dep[Maxn],sze[Maxn],ind;\nint tot,vir[Maxn],isvir[Maxn],virfa[Maxn],isori[Maxn],virrt;\nll dp[Maxn][2];\nconst ll INF=0x3f3f3f3f3f3f3f3f;\nvector< pair<int,int> >edge[Maxn],viredge[Maxn];\n\ninline bool cmpdfn(const int &a,const int &b){return dfn[a]<dfn[b];}\ninline void dfs(int now,int f,int dis){\n    fa[now][0]=f;mn[now][0]=dis;dep[now]=dep[f]+1;sze[now]=1;dfn[now]=++ind;\n    for(int i=1;i<=18;i++){\n        fa[now][i]=fa[fa[now][i-1]][i-1];\n        mn[now][i]=min(mn[now][i-1],mn[fa[now][i-1]][i-1]);\n    }\n    for(int e=edge[now].size()-1;e>=0;e--){\n        int v=edge[now][e].first,w=edge[now][e].second;\n        if(v==f)continue;\n        dfs(v,now,w);sze[now]+=sze[v];\n    }\n}\ninline int up(int x,int y){\n    for(int t=0;t<=18;++t)\n        if(y&(1<<t))x=fa[x][t];\n    return x;\n}\ninline int getlca(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);\n    if(dep[x]>dep[y])x=up(x,dep[x]-dep[y]);\n    if(x==y)return x;\n    for(int i=18;i>=0;i--)\n        if(fa[x][i]!=fa[y][i])\n        x=fa[x][i],y=fa[y][i];\n    return fa[x][0];\n}\ninline int getmn(int f,int x){\n    int res=0x3f3f3f3f;\n    for(int i=18;i>=0;i--){\n        if(dep[fa[x][i]]>=dep[f]){\n            res=min(res,mn[x][i]);\n            x=fa[x][i];\n        }\n    }\n    return res;\n}\ninline bool in(int x,int y){return dfn[y]>dfn[x]&&dfn[y]<dfn[x]+sze[x];}\ninline void buildvir(){\n    tot=k;sort(vir+1,vir+tot+1,cmpdfn);\n    for(int i=1;i<k;i++){\n        int lca=getlca(vir[i],vir[i+1]);\n        if(!isvir[lca])vir[++tot]=lca,isvir[lca]=1;\n    }\n    sort(vir+1,vir+tot+1,cmpdfn);\n    static int sta[Maxn],top;\n    virrt=vir[1];\n    for(int i=1;i<=tot;i++){\n        while(top&&!in(sta[top],vir[i]))--top;\n        if(i!=1)viredge[sta[top]].push_back(make_pair(vir[i],getmn(sta[top],vir[i])));\n        sta[++top]=vir[i];\n    }\n}\ninline void dfsvir(int now,int f){\n    ll sum=0;\n    for(int e=viredge[now].size()-1;e>=0;e--){\n        int v=viredge[now][e].first,w=viredge[now][e].second;\n        dfsvir(v,now);sum+=min(dp[v][0],dp[v][1]+w);\n    }\n    if(!isori[now]){\n        dp[now][0]=sum;\n        dp[now][1]=INF;\n        for(int e=viredge[now].size()-1;e>=0;e--){\n            int v=viredge[now][e].first,w=viredge[now][e].second;\n            dp[now][1]=min(dp[now][1],sum-min(dp[v][0],dp[v][1]+w)+dp[v][1]);\n        }\n    }else{\n        dp[now][1]=sum;\n        dp[now][0]=INF;\n    }\n}\nint main(){\n    n=read(),k=read();\n    for(int i=1;i<=k;i++)vir[i]=read()+1,isvir[vir[i]]=1,isori[vir[i]]=1;\n    for(int i=1;i<n;i++){\n        int x=read()+1,y=read()+1,w=read();\n        edge[x].push_back(make_pair(y,w));\n        edge[y].push_back(make_pair(x,w));\n    }\n    dfs(1,0,0);\n    buildvir();\n    dfsvir(virrt,0);\n    cout<<min(dp[virrt][0],dp[virrt][1])<<'\\n';\n}\n```",
        "postTime": 1509531613,
        "uid": 49483,
        "name": "DZYO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "## $P2700$ \u9010\u4e2a\u51fb\u7834\n---\n\n### \u524d\u7f6e\u77e5\u8bc6\n&ensp;&ensp;&ensp;&ensp;\u514b\u9c81\u65af\u5361\u5c14\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5 \u5e76\u67e5\u96c6 \u8d2a\u5fc3\u601d\u60f3\n   \n### \u9898\u76ee\u63cf\u8ff0\n&ensp;&ensp;&ensp;&ensp;\u7ed9\u51fa\u4e00\u9897\u5e26\u6743\u7684\u6811\uff0c\u5220\u9664\u4efb\u610f\u6761\u8fb9\uff0c\u6c42\u51fa\u4f7f\u5f97\u7ed9\u5b9a\u7684\u70b9\u4e0d\u8fde\u901a\u7684\u6700\u5c0f\u6743\u503c\u3002\n\n  \n### \u89e3\u9898\u601d\u8def\n\n![sample](https://cdn.luogu.com.cn/upload/image_hosting/lkmbt5lm.png)  \n&ensp;&ensp;&ensp;&ensp;\u6837\u4f8b\u8bf4\u660e\uff1a\u5220\u9664\u6743\u503c\u4e3a$1$\u548c$3$\u7684\u8fb9\uff0c\u4f7f\u5f97$1.2.4$\u4e09\u70b9\u4e0d\u8fde\u901a\uff0c\u7b54\u6848\u4e3a$1 + 3 = 4$\u3002\n\n\n&ensp;&ensp;&ensp;&ensp;\u4f7f\u5220\u9664\u7684\u8fb9\u603b\u6743\u503c\u6700\u5c0f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4f7f\u6dfb\u52a0\u7684\u8fb9\u603b\u6743\u503c\u6700\u5927\u3002  \n&ensp;&ensp;&ensp;&ensp;\u501f\u9274\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a\u8d2a\u5fc3\u5730\u9009\u53d6\u5f53\u524d\u672a\u88ab\u9009\u8fc7\u7684\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u5c06\u5176\u5efa\u5165\u56fe\u5185\uff0c\u76f4\u81f3\u6240\u6709\u7684\u975e\u6307\u5b9a\u70b9\u90fd\u88ab\u5e76\u5165\u56fe\u5185\u3002  \n&ensp;&ensp;&ensp;&ensp;\u7edf\u8ba1\u51fa\u52a0\u5165\u7684\u8fb9\u7684\u6743\u503c\uff0c\u7b54\u6848\u5373\u4e3a\u603b\u8fb9\u6743 - \u7edf\u8ba1\u51fa\u7684\u8fb9\u6743\u3002\n$$Ans = tot - cnt$$\n\n### \u6ce8\u610f\u4e8b\u9879\n&ensp;&ensp;&ensp;&ensp;1.\u6309\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002  \n&ensp;&ensp;&ensp;&ensp;2.\u6570\u636e\u8303\u56f4\u5927\uff0c\u7528 $long long$ \u5b58\u53d8\u91cf\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define re register\n#define il inline\n#define ll long long\n#define MAXN 100005\n#define MAXM 100005\n#define rep(i,a,b)  for(re int i = a;i <= b;++ i)\n#define Rep(i,a,b)  for(re int i = a;i < b;++ i)\n#define drep(i,a,b) for(re int i = a;i >= b;-- i)\n#define fin(a)  freopen(#a\".in\",\"r\",stdin)\n#define fout(a) freopen(#a\".out\",\"w\",stdout)\n\nusing namespace std;\n\nstruct edge{\n    int u,v,w;\n}e[MAXM];\nint n,k;\nint fa[MAXN];\nbool p[MAXN];\nll ans = 0;\n\nil bool cmp(edge a,edge b){\n    return a.w > b.w;\n}\n\nil int find(int x){\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\n}\n\nil void kruskal(){\n    Rep(i,1,n){\n        int u = e[i].u,v = e[i].v,w = e[i].w;\n        int fu = find(u),fv = find(v);\n        if(p[fu] && p[fv])\n            continue;\n        \n        fa[fu] = fv;\n        ans -= w;\n\n        if(p[fu])\n            p[fv] = 1;\n        else\n            if(p[fv])\n                p[fu] = 1;\n    }\n}\n\n\n\nint main(){\n    #ifndef ONLINE_JUDGE\n    fin(2700);\n    fout(2700);\n    #endif\n\n    scanf(\"%d%d\",&n,&k);\n    rep(i,1,n)\n        fa[i] = i;\n    rep(i,1,k){\n        int point;\n        scanf(\"%d\",&point);\n        p[point] = 1;\n    }\n\n    Rep(i,1,n){\n        scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n        ans += e[i].w;\n    }\n\n    sort(e + 1,e + n + 1,cmp);\n    kruskal();\n\n    printf(\"%lld\",ans);\n\n    return 0;\n}\n```\n",
        "postTime": 1604460283,
        "uid": 262074,
        "name": "LoverBoyInMacau",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "WA~~~\n\n\u89c1\u8bc4\u6d4b\u8bb0\u5f55\uff1a\n[NO.1](https://www.luogu.org/record/25268683)\n[NO.2](https://www.luogu.org/record/25268727)\n\n\u8fd8\u6709\u4e3a\u4ec0\u4e48\u6211\u5728\u4ea4\u7b2c\u4e8c\u904dAC\u540e\uff0c\u4f60\u8c37\u663e\u793a\u53ea\u670990\uff1f\uff01\uff1f\n\n\u5bb3\u5f97\u6211\u4ee5\u4e3along long\u6ca1\u7528\u2014\u2014~~\u4ea4\u4e86\u4e09\u904d~~\n### \u4f46\u662f\uff0c\u4e0d\u5f00long long \u7684\u786e**\u89c1\u7956\u5b97**\n\nQAQ\n\n------------\n\n\u7b97\u4e86\uff0c\u4e0d\u62b1\u6028\u4e86\uff0c\u5f00\u59cb\u8bb2\u9898\uff1b\n\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\uff08\u554a\uff0cn\u4e2a\u70b9n-1\u6761\u8fb9\u2014\u2014\u662f\u4e00\u68f5\u6811\u2014\u2014\u6240\u4ee5\u5c31\u53ea\u8981\u6811\u4e0a\u7684\u7b97\u6cd5\u5c31\u53ef\u4ee5\u4e86\uff01\uff08~~\u539f\u6765\u4ee5\u4e3a\u662f\u6700\u5927\u72ec\u7acb\u96c6~~\uff0c\u4e0d\u53ea\u662f\u6211\u8111\u62bd\u2026\u2026\uff09\uff09\n\n\u7136\u800c\uff0c\u53c8\u60f3\u4e86\u60f3\uff0c\u53d1\u73b0\u548c\u539f\u6765\u6a21\u62df\u8d5b\u505a\u7684\u9898\u6709\u70b9\u7c7b\u4f3c\u2026\u2026\u5c31\u60f3\u5230\u8981\u5e76\u67e5\u96c6\u2026\u2026\u53cd\u5411\u505a\uff0c\u5c31\u53ef\u4ee5\u5427\u5220\u8fb9\u53d8\u6210\u52a0\u8fb9\u4e86\u5440\uff01\uff01\uff01\n\ngreat\uff01\n\n\u7136\u540e\uff0c\u8fd8\u8981\u6ee1\u8db3\u5220\u7684\u8fb9\u6700\u4fbf\u5b9c\uff0c\u5c31\u53ea\u8981\u9009\u8d35\u7684\u52a0\u5c31\u662f\u4e86\u2026\u2026\n\n\u8fd8\u662f\u5f88\u6c34\u7684\u2026\u2026\u2026\u2026\u2026\u2026\n\n\n```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=1e7+1;\nstruct st{\n    int x,y,z;\n}a[N];\nint f[N],ans,n,k;\nbool l[N];\nbool cmp(st a,st b){\n    return a.z>b.z;\n}\nint find(int x){return (x==f[x])?x:find(f[x]);}\nsigned main(){\n    scanf(\"%lld%lld\",&n,&k);\n    for (int i=1;i<=n;i++) f[i]=i;\n    for (int x,i=1;i<=k;i++) scanf(\"%lld\",&x),l[x]=1;\n    for (int i=1;i<n;i++) scanf(\"%lld%lld%lld\",&a[i].x,&a[i].y,&a[i].z),ans+=a[i].z;\n    sort(a+1,a+1+n,cmp);\n    for (int i=1;i<n;i++){\n        int x=find(a[i].x),y=find(a[i].y);\n        if (l[x]&&l[y]) continue;\n        f[x]=y;\n        ans-=a[i].z;\n        l[x]=l[y]=l[x]|l[y];\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\u4e0d\uff0c\u592a\u6c34\u4e86\u2026\u2026",
        "postTime": 1571215804,
        "uid": 23170,
        "name": "\u56de\u9752\u7edd\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "## \u6765\u53d1\u4e00\u4e2a\u5e76\u67e5\u96c6\u9898\u89e3\n\n\u524d\u9762\u7684\u51e0\u4e2a\u9898\u89e3\u5176\u5b9e\u5df2\u7ecf\u633a\u6e05\u695a\u7684\u4e86\uff0c\u6211\u518d\u6765\u8bf4\u4e00\u4e0b\u5427\u3002\n\n\u8fd9\u4e2a\u9898\u662f\u6211\u505a\u7684\u7b2c\u4e00\u9053\u6709\u5173\u4e8e\u5220\u8fb9\u7684\u5e76\u67e5\u96c6\uff0c\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u5148\u628a\u8fb9\u5efa\u7acb\u8d77\u6765\uff0c\u518d\u6309\u7167\u8981\u6c42\u53bb\u5220\u6389\u3002\u4f46\u4e00\u60f3\uff0c\u8fd9\u6837\u64cd\u4f5c\u4f1a\u5f88\u9ebb\u70e6\uff0c\u800c\u4e14\u8bf4\u4e0d\u597d\u8fd8\u4f1aTLE OR MLE\u3002\n\n\u7136\u540e\u65c1\u8fb9\u7684\u5b66\u957f\u8bf4\uff0c\u8fd9\u79cd\u9898\u5e94\u8be5\u53cd\u8fc7\u6765\u505a\u3002\u55ef\uff0c\u90a3\u5c31\u53cd\u8fc7\u6765\u505a\u5427\u3002\n\n\u65e2\u7136\u6c42\u7684\u662f\u6700\u5c11\u9700\u8981\u8017\u8d39\u591a\u5c11\u82b1\u8d39\u591a\u5c11\u4ee3\u4ef7\u6765\u5220\u8fb9\uff0c\u800c\u53c8\u77e5\u9053\u4e86\u6240\u6709\u8fb9\u7684\u4ee3\u4ef7\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6c42\u5efa\u8fb9\u7684\u6700\u5927\u4ee3\u4ef7\uff0c\u518d\u7528\u6240\u6709\u7684\u4ee3\u4ef7\u51cf\u53bb\u5b83\uff0c\u5f97\u51fa\u6765\u7684\u4e0d\u5c31\u76f8\u5f53\u4e8e\u5220\u8fb9\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e86\u5417\u3002\n\n\u800c\u6211\u4eec\u5efa\u8fb9\u7684\u65f6\u5019\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9898\u76ee\u8981\u6c42\u6240\u6709\u654c\u4eba\u7684\u636e\u70b9\u4e0d\u80fd\u8fde\u901a\uff0c\u6240\u4ee5\u5408\u5e76\u7684\u65f6\u5019\u4e0d\u80fd\u8ba9\u4e24\u4e2a\u70b9\u5728\u5206\u522b\u90fd\u5c5e\u4e8e\u654c\u4eba\u636e\u70b9\u7684\u60c5\u51b5\u4e0b\u518d\u5408\u5e76\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e00\u4e2a\u654c\u4eba\u636e\u70b9\u52a0\u5165\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\u65f6\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\u6240\u6709\u7684\u636e\u70b9\u90fd\u4f1a\u53d8\u6210\u654c\u4eba\u636e\u70b9\u3002\n\n\u90a3\u4e48\uff0c\u5148\u6309\u7167\u9053\u8def\u7684\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f\uff0c\u518d\u5efa\u8fb9\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<string.h>\n#include<math.h>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nstruct kkk{\n    int father;\n    bool size;//true\u4ee3\u8868\u88ab\u5360\u9886 false\u4ee3\u8868\u672a\u88ab\u5360\u9886 \n}node[100010];\nint n,k,now;\nlong long ans,all,used;\nstruct www{\n    int to,length,from;\n}edge[200010];\nvoid add(int a,int b,int c)\n{\n    now++;\n    edge[now].length=c;\n    edge[now].from=a;\n    edge[now].to=b;\n}//\u5b58\u8fb9\u64cd\u4f5c\nbool cmp(www a,www b)\n{\n    return a.length>b.length;\n}\nbool judge(int a,int b)\n{\n    if ((node[a].size==true)&&(node[b].size==true)) return true;//\u5982\u679c\u4e24\u4e2a\u57ce\u5e02\u90fd\u662f\u654c\u4eba\u7684\u8fd4\u56detrue\n    else return false; //\u5426\u5219\u8fd4\u56defalse\n}\nint getfather(int x)//\u627e\u6839\u8282\u70b9\uff0c\u4ee5\u53ca\u538b\u7f29\u8def\u5f84\n{\n    if (node[x].father==x) return x;\n    node[x].father=getfather(node[x].father);\n    return node[x].father;\n}\nvoid merge(int u,int v)\n{\n    node[v].father=u;//\u628a\u7956\u5148\u6302\u4e0a\u53bb\n    if (node[v].size==true) node[u].size=true;\n    else if (node[u].size==true) node[v].size=true;//\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u6709\u4e00\u4e2a\u662f\u654c\u4eba\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u4e0e\u4e4b\u5408\u5e76\u7684\u53e6\u4e00\u4e2a\u4e5f\u8981\u6210\u4e3a\u654c\u4eba\u7684\u57ce\u5e02\n}\nint main()\n{\n    int i,a,b,c,u,v;\n    scanf(\"%d%d\",&n,&k);\n    for (i=0;i<=n;i++)\n    {\n        node[i].father=i;\n        node[i].size=false;\n    }//\u521d\u59cb\u5316\uff0c\u6ce8\u610f\uff0c\u57ce\u5e02\u662f\u4ece0\u5f00\u59cb\u7684\n    for (i=1;i<=k;i++)\n    {\n        scanf(\"%d\",&a);\n        node[a].size=true;\n    }//\u628a\u654c\u4eba\u57ce\u5e02\u6807\u8bb0\n    for (i=1;i<=n-1;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n        all=all+c;\n    }//\u8bfb\u5165\u8fb9\uff0c\u8fd8\u6709\u8ba1\u7b97\u6240\u6709\u8fb9\u7684\u603b\u4ee3\u4ef7\n    sort(edge+1,edge+n,cmp);//\u6309\u8fb9\u7684\u4ee3\u4ef7\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n    for (i=1;i<=n-1;i++) \n    {\n        u=getfather(edge[i].from);\n        v=getfather(edge[i].to);//\u5f97\u51fa\u8fb9\u7684\u4e24\u8fb9\u7684\u57ce\u5e02\u7684\u5e76\u67e5\u96c6\u7684\u6839\u8282\u70b9\n        if (judge(u,v)==false)//\u5224\u65ad\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u662f\u5168\u90fd\u662f\u654c\u4eba\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u5408\u5e76\n        {\n            merge(u,v);//\u5408\u5e76\n            used=used+edge[i].length;//\u5efa\u8fb9\u7684\u4ee3\u4ef7\u589e\u52a0\n        }    \n    }\n    ans=all-used;//\u90a3\u4e48\uff0c\u6700\u540e\u7684\u7b54\u6848\u4fbf\u662f\u603b\u4ee3\u4ef7\u51cf\u53bb\u5efa\u8fb9\u7684\u6700\u5927\u4ee3\u4ef7\u4e86\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\u54e6\u54e6\uff0c\u5bf9\u4e86\uff0c\u6709\u4e00\u4e2a\u70b9\u4f1a\u5361int\uff0c\u6240\u4ee5\u8bb0\u5f55\u7b54\u6848\u7684\u65f6\u5019\u8981\u7528long long\u3002\n\n\u8fd9\u5e94\u8be5\u662fluogu\u91cc\u9762\u6700\u7b80\u5355\u7684\u4e00\u9053\u5220\u8fb9\u7684\u5e76\u67e5\u96c6\u4e86\u5427\u3002\n",
        "postTime": 1509593762,
        "uid": 20611,
        "name": "\u738b\u5c0f\u5b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u5f88\u660e\u786e\uff0c\u7ed9\u4f60\u7ed9\u4e86\u4e00\u68f5\u6811\uff0c\u8ba9\u4f60\u5220\u53bb\u6743\u503c\u548c\u6700\u5c0f\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed9\u5b9a\u8282\u70b9\u4e4b\u95f4\u4e0d\u518d\u8fde\u901a\u3002\n\u601d\u8def\uff1a\u8fd9\u4e2a\u9898\u76ee\u4e00\u5b9a\u8981\u53d1\u4e2a\u9898\u89e3\uff0c\u5751\u6b7b\u6211\u4e86\u3002\u8bb0\u4f4f\u4e86\uff0c\u8ba1\u7b97\u548c\u4e00\u5b9a\u6765Long Long\uff0c\u4e0d\u7136\u7b2c\u4e09\u4e2a\u70b9\u4e00\u5b9a\u6b7b\u3002\u60f3\u6cd5\u548c\u4e0b\u9762\u7684\u5927\u4f6c\u4e00\u6837\uff0c\u65e2\u7136\u8981\u6c42\u5220\u9664\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u3002\u90a3\u4e48\u56fe\u4e2d\u4fdd\u7559\u7684\u5c31\u4e00\u5b9a\u662f\u6700\u5927\u7684\uff0c\u6216\u8005\u6211\u4eec\u5c3d\u53ef\u80fd\u7684\u53bb\u6dfb\u52a0\u8fb9\uff0c\u7136\u540e\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u4e0d\u6ee1\u8db3\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u542c\u4e0a\u53bb\u662f\u4e0d\u662f\u6709\u70b9\u50cf\u6700\u5c0f\u751f\u6210\u6811\u7684\u6837\u5b50\uff0c\u6ca1\u9519\uff0c\u8fd9\u4e2a\u5e94\u8be5\u662f\u6700\u5927\u751f\u6210\u6811\uff0c\u4e0d\u4e00\u6837\u5728\u5e76\u67e5\u96c6\u7684\u4f7f\u7528\uff0c\u8fd9\u91cc\u4e0d\u80fd\u968f\u610f\u7684\u6307\u5411\u7236\u8282\u70b9\uff0c\uff08\u6211\u7b2c\u4e00\u6b21\u5c31wrong\u5728\u8fd9\u4e2a\u654c\u65b9\uff09\u3002\u8981\u5c3d\u53ef\u80fd\u7684\u6307\u5411\u9898\u76ee\u7ed9\u51fa\u7684\u70b9\u3002\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u6211\u4eecint xx=Find(u),int yy=Find(v);\u5982\u679cu\u548cv\u90fd\u662f\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u8981\u6c42\u8282\u70b9\uff0c\u4e0d\u597d\u610f\u601d\uff0c\u8fd9\u6761\u8fb9\u6211\u4eec\u4e0d\u80fd\u52a0\u5165\u3002\u5982\u679cu\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u7684\uff0c\u800cv\u4e0d\u662f\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9v\u7684\u7236\u8282\u70b9\u4e3au\u3002\u540c\u7406\u5904\u7406\u53e6\u4e00\u79cd\u3002\u5982\u679cu\u548cv\u90fd\u4e0d\u662f\uff0c\u90a3\u5c31\u968f\u4fbf\u505a\u7236\u8282\u70b9\u3002\u603b\u548c\u51cf\u53bb\u52a0\u5165\u7684\u8fb9\u5c31\u662f\u7b54\u6848\u4e86\u3002\u4ee3\u7801\u5199\u7684\u5f88\u6e05\u695a\u81ea\u5df1\u770b\uff1a\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 100100\n#define maxnode 2000005\n#define sigma_size 26\n#define md 12345678\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long LL;\n\nint n,m;\nLL sum;\nset<int> P;\nint fa[MAXN];\nstruct Edge\n{\n    int from,to;\n    LL dist;\n    Edge(int from=0,int to=0,LL dist=0):from(from),to(to),dist(dist){};\n    bool operator < (const Edge& rah) const\n    {\n        return dist<rah.dist;\n    }\n};\n\nint Find(int x)\n{\n    return fa[x]==x?x:fa[x]=Find(fa[x]);\n}\n\nint main()\n{\n    sum=0;\n    scanf(\"%d %d\",&n,&m);\n    int tg;\n    for(int i=1;i<=m;i++)                                                   //\u4f7f\u7528\u4e00\u4e2aset\u6765\u67e5\u770b\u5b58\u4e0d\u5b58\u5728\u4e0d\u80fd\u8fde\u63a5\u7684\u70b9\n    {\n        scanf(\"%d\",&tg);\n        P.insert(tg);\n    }\n    priority_queue<Edge> Q;                                         //\u5806\u4f18\u5316\n    int u,v;\n    LL w;\n    for(int i=1;i<n;i++)                                                         //\u8bfb\u5165\u8fb9\n    {\n        scanf(\"%d %d %lld\",&u,&v,&w);\n        Q.push({u,v,w});\n        sum+=w;\n    }\n    for(int i=0;i<=n;i++)                                                       //\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n        fa[i]=i;\n    LL ans=0;\n    while(!Q.empty())\n    {\n        Edge e=Q.top();\n        Q.pop();\n        int xx=Find(e.from);\n        int yy=Find(e.to);\n        if(P.count(xx)&&P.count(yy))                               //\u53d1\u751f\u4e86\u77db\u76fe\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6761\u8fb9\u8ba9\u4e24\u4e2a\u672c\u4e0d\u8be5\u5728\u4e00\u8d77\u7684\u5728\u4e00\u8d77\u4e86\n            continue;\n        else if(P.count(xx)&&!P.count(yy))                    //\u6709\u4e00\u4e2a\u662f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6307\u5411\u8fd9\u4e2a\u7ed9\u51fa\u7684\n            fa[yy]=xx;\n        else if(!P.count(xx)&&P.count(yy))                    //\u6709\u4e00\u4e2a\u662f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6307\u5411\u8fd9\u4e2a\u7ed9\u51fa\u7684\n            fa[xx]=yy;\n        else if(!P.count(xx)&&!P.count(yy))                   //\u4e24\u4e2a\u90fd\u4e0d\u662f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u968f\u4fbf\u8fde\u63a5\uff0c\u968f\u4fbf\u5f53\u7236\u8282\u70b9\n            fa[xx]=yy;\n        ans+=e.dist;                                                                //\u5c06\u8fb9\u6743\u7d2f\u52a0\u8fdb\u53bb\n    }\n    printf(\"%lld\\n\",sum-ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1574682423,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u5207\u65ad$k$\u4e2a\u70b9\u7684\u8054\u7cfb\u53ea\u9700\u8981\u5207$k-1$\u6761\u8fb9\u5c31\u591f\u4e86\u3002\n\n\u6211\u8fd9$k-1$\u6761\u8fb9\u4e00\u5b9a\u662f\u5206\u5e03\u5728$k$\u4e2a\u70b9\u6784\u6210\u7684\u7c7b\u4f3c\u6811\u5f62\u7ed3\u6784\u7684\u4efb\u610f\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u3002\n\n\u8d2a\u5fc3\u7b56\u7565\uff0c\u6211\u65e2\u7136\u5207\u7684\u8fb9\u6570\u5df2\u7ecf\u786e\u5b9a\uff0c\u7136\u540e\u6211\u53ea\u9700\u8981\u77e5\u9053\u600e\u4e48\u6700\u5c11\u4ee3\u4ef7\u5730\u5207\u53bb$k-1$\u6761\u8fb9\uff0c\u5f62\u6210$k$\u4e2a\u8fde\u901a\u5757\u3002\n\n\u90a3\u4e48\u8bf4\u5230\u8054\u901a\u5757\uff0c\u5c31\u60f3\u5230\u5e76\u67e5\u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u7740\u628a\u5220\u8fb9\u770b\u505a\u662f\u6dfb\u52a0\u5269\u4f59\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7ed9\u8054\u901a\u5757\u8bb0\u5f55\u4e00\u4e0b\u91cc\u9762\u662f\u5426\u5b58\u5728\u654c\u519b\u7a9d\u70b9\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u52a0\u8fb9\uff0c\u82e5\u6b64\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8054\u901a\u5757\u90fd\u6709\u654c\u519b\uff0c\u6211\u4eec\u5c31\u4e0d\u52a0\u8fd9\u6761\u8fb9\uff08\u76f8\u5f53\u4e8e\u5220\u53bb\u8fd9\u6761\u8fb9\uff09\uff0c\u8fb9\u6743\u9700\u8981\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u56e0\u4e3a\u5220\u9664\u7684\u8fb9\u6570\u56fa\u5b9a\uff0c\u5e76\u4e14\u8981\u5220\u7684\u8fb9\u5747\u5300\u5206\u5e03\u5728\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\u5220\u53bb\u67d0\u6761\u7684\u8fb9\u4e0d\u4f1a\u5e72\u6270\u5220\u53bb\u5176\u4ed6\u4e24\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u6211\u4eec\u4e00\u5b9a\u662f\u4f7f\u5f97\u6dfb\u52a0\u7684\u8fb9\u7684\u548c\u6700\u5927\uff0c\u4e5f\u5c31\u662f\u5220\u53bb\u7684\u8fb9\u7684\u548c\u6700\u5c0f\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e5+10;\nint n,k;\nint pr[MAXN];\nstruct edge\n{\n    int u,e,v;\n}a[MAXN];\nlong long sum;\nbool vis[MAXN];\nbool cmp(const edge &aa,const edge &bb)\n{\n    return aa.v>bb.v;\n}\n\nint findfa(int x)\n{\n    if(x==pr[x])return x;\n    return pr[x]=findfa(pr[x]);\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<=n;i++)\n        pr[i]=i;\n    for(int i=1;i<=k;i++)\n    {\n        int x;scanf(\"%d\",&x);\n        vis[x]=1;\n    }\n    for(int i=1;i<n;i++)\n        scanf(\"%d%d%d\",&a[i].u,&a[i].e,&a[i].v),sum+=a[i].v;\n    sort(a+1,a+n,cmp);\n    for(int i=1;i<n;i++)\n    {\n        int fau=findfa(a[i].u);\n        int fae=findfa(a[i].e);\n        if(vis[fau]&&vis[fae])continue;\n        vis[fau]|=vis[fae];\n        vis[fae]|=vis[fau];\n        pr[fau]=fae;\n        sum-=a[i].v;\n    }\n    printf(\"%lld\\n\",sum);\n    return 0;\n}\n\n```\n",
        "postTime": 1567597988,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u76f4\u63a5\u8003\u8651\u539f\u95ee\u9898\u6bd4\u8f83\u56f0\u96be\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u60f3\uff1a\u5220\u53bb\u7684\u6700\u5c11=\u7559\u4e0b\u6765\u7684\u6700\u591a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u7528\u7c7b\u4f3c\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u601d\u60f3\u3002\u5728\u4f7f\u7528Kruskal\u7b97\u6cd5\u65f6\uff0c\u5e76\u67e5\u96c6\u8fd8\u8981\u4fdd\u5b58\u4e00\u4e2a\u662f\u5426\u5df2\u7ecf\u6709\u654c\u4eba\u7684\u57ce\u5e02\u3002\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u5fc5\u987b\u8981\u4e24\u4e2a\u96c6\u5408\u4e0d\u662f\u90fd\u6709\u654c\u4eba\u7684\u57ce\u5e02\uff08\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\u6709\u654c\u4eba\u7684\u57ce\u5e02\uff09\u624d\u53ef\u4ee5\u5408\u5e76\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n```cpp\n\n\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int Max_N(100050);\nconst int Max_M(100050);\n\nvoid Get_Val(int &Ret)\n{\n    Ret = 0;\n    char ch;\n    while ((ch = getchar()), (ch > '9' || ch < '0'))\n        ;\n    do\n    {\n        (Ret *= 10) += ch - '0';\n    }\n    while ((ch = getchar()), (ch >= '0' && ch <= '9'));\n}\n\nint N;\nbool Occupation[Max_N];\n\nstruct edge\n{\n    int u, v;\n    int w;\n};\n\ninline\nbool comp(const edge &a, const edge &b)\n{\n    return a.w > b.w;\n}\n\nedge Edges[Max_M];\n\nint Father[Max_N];\nbool Have[Max_N];\n\nlong long int Ans;\n\nvoid init()\n{\n    int K, Value;\n    Get_Val(N), Get_Val(K);\n    while (K--)\n        Get_Val(Value), Occupation[Value] = true;\n    for (int i = 0;i != N;++i)\n        Father[i] = i, Have[i] = Occupation[i];\n    for (int i = 1;i != N;++i)\n        Get_Val(Edges[i].u), Get_Val(Edges[i].v), Get_Val(Edges[i].w), Ans += Edges[i].w;\n}\n\nint Get_Father(const int &x)\n{\n    return Father[x] == x ? x : Father[x] = Get_Father(Father[x]);\n}\n\nvoid Kruskal()\n{\n    int x, y;\n    sort(Edges + 1, Edges + N, comp);\n    for (int i = 1;i != N;++i)\n    {\n        x = Get_Father(Edges[i].u), y = Get_Father(Edges[i].v);\n        if (x != y && (!(Have[x] && Have[y])))\n        {\n            Father[y] = x;\n            Have[x] = (Have[x] || Have[y]);\n            Ans -= Edges[i].w;\n        }\n    }\n    printf(\"%lld\", Ans);\n}\n\nint main()\n{\n    init();\n    Kruskal();\n    return 0;\n}\n\n```",
        "postTime": 1452518480,
        "uid": 3182,
        "name": "Created_equal1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "> [P2700 \u9010\u4e2a\u51fb\u7834](https://www.luogu.com.cn/problem/P2700)\n> \n> \u4e00\u68f5\u6811\u4e0a\u6709 $k$ \u4e2a\u5173\u952e\u70b9\uff0c\u8981\u6c42\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u628a\u8fd9\u4e9b\u70b9\u5212\u5206\u5230\u4e0d\u540c\u8fde\u901a\u5757\u4e2d\u3002\n> \n> $2 \\leq k \\leq n \\leq 10^5$\n\n## \u89e3\u9898\u601d\u8def\n\n\u5f88\u5de7\u5999\u7684\u601d\u7ef4\u9898\u3002\n\n\u9996\u5148\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u601d\u8def\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5173\u952e\u70b9\u6c42\u51fa\u4e0e\u5176\u4ed6\u5173\u952e\u70b9\u7684\u8def\u5f84\uff0c\u7136\u540e\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f $O(k^2 \\log n)$ \u7684\uff0c\u800c\u4e14\u975e\u5e38\u96be\u5199\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u9898\u9762\u4e2d\u89c2\u5bdf\u51fa\u4e00\u4e9b\u6027\u8d28\uff1a\n\n1. \u5bf9\u4e8e $k$ \u4e2a\u70b9\uff0c\u6700\u591a\u53ea\u9700\u8981 $k-1$ \u6761\u8fb9\u5c31\u53ef\u4ee5\u628a\u4ed6\u4eec\u5212\u5206\u5f00\u3002\n\n    \u8bc1\u660e\u5341\u5206\u663e\u7136\uff0c\u624b\u73a9\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u6765\u8bf4\uff0c\u5173\u952e\u70b9\u4e0e\u5176\u4ed6\u975e\u5173\u952e\u70b9\u7684\u8fde\u8fb9\u5e76\u4e0d\u5f71\u54cd\u7b54\u6848\n\n    \u56e0\u4e3a\u6bcf\u4e2a\u8fde\u901a\u5757\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u5173\u952e\u70b9\u4e0e\u5176\u4ed6\u5173\u952e\u70b9\u7684\u8fde\u8fb9\uff0c\u8fd9\u4e2a\u5173\u952e\u70b9\u4e0e\u975e\u5173\u952e\u70b9\u7684\u8fde\u8fb9\u5e76\u4e0d\u91cd\u8981\u3002\n\n\u8fd9\u4e9b\u6027\u8d28\u770b\u4e0a\u53bb\u6ca1\u4ec0\u4e48\u7528\uff0c\u4f3c\u4e4e\u6ca1\u529e\u6cd5\u4e86\uff1f\u6211\u4eec\u8fd8\u53ef\u4ee5\u53cd\u5411\u601d\u8003\u4e00\u4e0b\n\n\u5212\u5206\u5230\u4e0d\u540c\u8fde\u901a\u5757\uff0c\u5b9e\u9645\u4e0a\u76f8\u5f53\u4e8e**\u628a\u4e00\u4e2a\u5173\u952e\u70b9\u4e0e\u5176\u4ed6\u975e\u5173\u952e\u70b9\u8fde\u901a\uff0c\u5e76\u4e14\u4e0d\u4e0e\u5176\u4ed6\u5173\u952e\u70b9\u8054\u901a**\uff0c\u4e5f\u5c31\u628a\u5220\u8fb9\u8f6c\u5316\u4e3a\u4e86\u52a0\u8fb9\u3002\n\n\u7ed3\u5408\u6027\u8d28 2\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u6700\u5927\u7684\u5e76\u4e14\u4e0d\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u5173\u952e\u70b9\u8054\u901a\u7684\u8fb9\u52a0\u4e0a\u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u8054\u60f3\u5230\u4e86 Kruskal\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u7c7b\u4f3c Kruskal \u7684\u8fc7\u7a0b\uff1a\n\n\u9996\u5148\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5927\u5230\u5c0f\u52a0\u8fb9\uff0c\u6bcf\u6b21\u52a0\u8fb9\u7684\u65f6\u5019\u5224\u65ad\u662f\u5426\u52a0\u4e0a\u8fd9\u6761\u8fb9\u5c31\u4f1a\u6709\u4e24\u5173\u952e\u70b9\u8054\u901a\u3002\u5982\u679c\u53ef\u4ee5\u52a0\u4e0a\uff0c\u5c31\u4ece\u603b\u8fb9\u6743\u51cf\u53bb\u5f53\u524d\u8fb9\u7684\u8fb9\u6743\uff08\u56e0\u4e3a\u6211\u4eec\u7684\u76ee\u7684\u662f\u6c42\u8ba9\u8fde\u901a\u5757\u65ad\u5f00\u7684\u6700\u5c0f\u6743\u503c\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u7528\u5e76\u67e5\u96c6\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff0c\u74f6\u9888\u5728\u4e8e\u6392\u5e8f\u3002\n\n## \u4ee3\u7801\n\n```cpp\n\nll ans,k,p[N],n,f[N];\nbool vis[N];\n\nstruct edge {\n    int u,v,w;\n    friend inline bool operator < (const edge & a,const edge &b) {\n        return a.w > b.w;\n    }\n}edg[N];\n\nint find(int x) {return f[x] == x ? x : f[x] = find(f[x]);}\nbool merge(int x,int y) {\n    int fx = find(x),fy = find(y);\n    if (!vis[fx] || !vis[fy]) {//\u5408\u5e76\u7684\u65f6\u5019\u5224\u65ad\u4e24\u8fb9\u662f\u5426\u5168\u90e8\u90fd\u6709\u70b9\uff0c\u5982\u679c\u6709\u5c31\u4e0d\u8fde\u4e86\n        f[fx] = fy;\n        if (vis[fy] == 1) vis[fx] = 1;\n        else if (vis[fx] == 1) vis[fy] = 1;\n        //\u628a\u8fde\u901a\u5757\u4e2d\u5173\u7cfb\u7ee7\u627f\n        return 1;\n    }\n    return 0;\n}\n\nsigned main() {\n\tread(n,k);\n    for (int i = 1;i <= k;++i) {\n        int x;read(x);vis[x] = 1;\n    }\n    for (int i = 1;i <= n;++i) f[i] = i;\n    for (int i = 1;i < n;++i) {\n        read(edg[i].u,edg[i].v,edg[i].w);ans += edg[i].w;\n    }\n    sort(edg+1,edg+n);\n    for (int i = 1;i < n;++i) {\n        edge e = edg[i];\n        int u = e.u,v = e.v;\n        if (merge(u,v)) ans -= e.w;\n        //\u5982\u679c\u6709\u8fb9\u8fde\u5c31\u6263\u53bb\n    }\n    printf(\"%lld\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1599658345,
        "uid": 105230,
        "name": "Retired_Doubeecat",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "N\u4e2a\u70b9\uff0cN-1\u6761\u8fb9\u7684\u8fde\u901a\u56fe\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u5c31\u662f\u4e00\u68f5\u6811(~~\u4f46\u597d\u50cf\u9898\u76ee\u6ca1\u6709\u5199\u662f\u8fde\u901a\u56fe\u6765\u7740~~)\n\n\n------------------\n~~\u56e0\u4e3a\u6211\u6bd4\u8f83\u83dc~~\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u60f3\u5230\u751f\u6210\u6811\u548c\u6811\u5f62DP\u4e4b\u7c7b\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528\u4eba\u89c1\u4eba\u7231\u7684\u4e07\u80fd\u7b97\u6cd5\u2014\u2014DFS\u5462\uff01\n\n\u5927\u6982\u601d\u8def\u5c31\u662f\u4ece0\u53f7\u7ed3\u70b9\u5f00\u59cb\uff0c\u5f80\u4e0b\u8fdb\u884c\u5148\u5e8f\u904d\u5386\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5b50\u6811\u4e2d\u7b2c\u4e00\u4e2a\u904d\u5386\u5230\u7684enemy\u4ee5\u53ca\u5230\u8fd9\u4e2aenemy\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u8fb9\u3002\u5f53\u627e\u5230\u4e24\u4e2aenemy\u65f6\uff0c\u5c31cut\u6389\u66f4\u5c0f\u7684\u90a3\u4e00\u6761\u8def\u5f84\u3002\n\nemm\u5b9e\u5728\u4e0d\u884c\u5c31\u770b\u4ee3\u7801\u5427\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\n#define N 100005\n#define M 100005\n\nint n,m,k,i,j,l,r,x,cou;\nlong long ans;\nint first[N],next[2*M],a[2*M],c[2*M];\nint near1[N],near2[N],h[N];\n\nint dfs(int now,int last)\n{\n    int i,j;\n    int min1,min2,gg;\n    //\u521d\u59cb\u5316 \n    min1=10000000; min2=10000000;//\u6211\u53ea\u5b58\u4e86\u6700\u8fd1\u4e24\u4e2aenemy\u7684\u72b6\u6001 \n    near1[now]=0; near2[now]=0;\n \n    for (i=first[now]; i>0; i=next[i])\n    {\n        if (a[i]==last) continue;\n        \n        gg=dfs(a[i],now);\n        if (gg>c[i]) min2=c[i];\n        else min2=gg;\n        if (near1[now]==0) {\n            near1[now]=near2[now];\n            near2[now]=0;\n        }\n        //\u5b58\u50a8\u8fd4\u56de\u503c \n\t\tif ((min1==10000000)&&(near1[now])) min1=min2;\n\t\t\n        if ((near1[now]>0)&&(near2[now]>0)) //\u5982\u679c\u627e\u5230\u4e86\u4e24\u4e2a\u6807\u8bb0\u70b9\n        { \n            if (min1<=min2) {\n                ans=ans+(long long)min1; \n                near1[now]=near2[now];\n                near2[now]=0;\n                min1=min2;\n            }\n            else\n            {\n                ans=ans+(long long) min2;\n                near2[now]=0;\n            }\n        }\n    }\n    if (h[now]) {//\u6839\u7ed3\u70b9\u662fenemy\u7684\u65f6\u5019\u8981\u628a\u5e95\u4e0b\u7684enemy\u5168cut\u6389 \n        near2[last]=now;\n        if (near1[now]>0)\n        ans=ans+(long long)min1;\n        return 10000000;\n    }\n    if (near1[now]==0) return 10000000;\n    if (near1[now]>0) near2[last]=near1[now];\n    return min1;\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    for (i=1; i<=n; i++) h[i]=0;\n    for (i=1; i<=k; i++)\n    {\n        scanf(\"%d\",&x);\n        x++;//\u6211\u5acc\u9ebb\u70e6\u5c31\u628a\u7ed3\u70b9\u5e8f\u53f7\u5168\u52a0\u4e00\u4e86woc \n        h[x]=1;\n    }\n    cou=0;\n    for (i=1; i<=n-1; i++)\n    {\n        scanf(\"%d%d%d\",&l,&r,&x);\n        l++; r++;\n        cou++;\n        next[cou]=first[l];\n        a[cou]=r; c[cou]=x;\n        first[l]=cou;\n        cou++;\n        next[cou]=first[r];\n        a[cou]=l; c[cou]=x;\n        first[r]=cou;\n        //\u90bb\u63a5\u8868\u5e94\u8be5\u4f1a\u5427 \n    }\n    ans=0;\n    dfs(1,0);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1539782227,
        "uid": 29621,
        "name": "\u5723\u5149\u5929\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "/\\*\n**\u76ee\u6d4b\u66f4\u5feb\uff0864ms\uff09,\u6bd4\u697c\u4e0b\u5feb\u4e8620%**\n\n**\u505a\u6cd5**\n\n\u7528num[x]\u6570\u7ec4\u8868\u793ax\u7684\u5b50\u6811\u5185\u4e0ex\u8282\u70b9\u76f8\u90bb\u7684\u519b\u56e2\u6570\u91cf,\u6ce8\u610f\u662f\u5b50\u6811\u5185.\u521d\u59cb\u65f6\u628a\u6240\u6709\u519b\u56e2\u6240\u5728\u7684\u8282\u70b9num\u503c\u4e3a1.\u5728\u56de\u6eaf\u65f6,\u663e\u7136\u6709\n\nnum[x]+=num[son]\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u7684num\u503c\u8d85\u8fc71\u65f6,\u5c31\u5728\u6b64\u65f6\u5fc5\u987b\u5220\u6389\u4e00\u4e9b\u8fb9,\u56e0\u4e3a\u5728\u4e0a\u65b9\u5220\u8fb9\u4e0d\u4f1a\u518d\u5f71\u54cd\u7ed9\u70b9\u7684\u5b50\u6811.\n\n\u5982\u4f55\u5220\u8fb9?\u8d2a\u5fc3.\n\n\u7528len[x]\u8868\u793ax\u5f80\u4e0a\u8d70\u7684\u8def\u7a0b\u4e2d\u7684\u6700\u5c0f\u8fb9\u6743,\u6bcf\u6b21\u56de\u6eaf\u65f6\u66f4\u65b0.\n\nlen[x]=min(len[x],w[i])\n\n\u5f53\u4e00\u4e2a\u70b9\u7684num\u503c\u8d85\u8fc7\u4e861\u65f6,\u5982\u679c\u5f53\u524d\u70b9\u4e3a\u519b\u56e2,\u5220\u9664\u5b50\u6811\u5185\u6240\u6709\u519b\u56e2\u8fde\u8fb9,\u5426\u5219\u7559\u4e0b\u5b50\u6811len\u503c\u6700\u5927\u7684,\u518d\u5220\u6389\u5176\u4ed6\u8fb9,\u5b9e\u73b0\u89c1\u4ee3\u7801,\u590d\u6742\u5ea6O(n+m)\n\n\\*/\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define For(i,a,b) for(register int i=(a);i<=(b);++i)\n#define pb push_back\nconst int maxx=1e5+5;\nint read(){\n    char x=getchar(); int u=0;\n    while(!isdigit(x)) x=getchar();\n    while(isdigit(x)) u=(u<<3)+(u<<1)+(x^48), x=getchar();\n    return u;\n}\nint n,m,be[maxx],ne[maxx<<1],to[maxx<<1],w[maxx<<1],e=1;\nint flag,rt,num[maxx],len[maxx];\nlong long ans=0;\nbool gn[maxx];\nvoid add(int x,int y,int z){\n    to[++e]=y;\n    ne[e]=be[x];\n    be[x]=e;\n    w[e]=z;\n}\nvoid dfs(int id,int fa=0){\n    if(gn[id]) ++num[id];\n    long long sum=0; int mx=0;\n    for(int i=be[id];i!=-1;i=ne[i]){\n        if(to[i]==fa) continue;\n        dfs(to[i],id);\n        if(num[to[i]]){\n        len[to[i]]=min(len[to[i]],w[i]);\n        sum+=1ll*len[to[i]];\n        mx=max(len[to[i]],mx);\n        }\n    }\n    if(!sum) return ;\n    if(num[id])    ans+=sum;\n    else{\n        num[id]=1; len[id]=mx;\n        ans+=sum-1ll*mx;\n    }\n}\nint main(){\n    int u,v,k;\n    n=read(); m=read();\n    For(i,0,n-1) be[i]=-1;\n    For(i,1,m){    u=read(); gn[u]=1; }\n    For(i,1,n-1){\n        u=read(); v=read(); k=read();\n        add(u,v,k); add(v,u,k);\n    }\n    memset(len,63,sizeof(len));\n    dfs(0,0);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1510274108,
        "uid": 19622,
        "name": "\u7f57\u65c5\u6d32",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "**\u76ee\u6d4b\u6700\u5feb\uff0880ms\uff09**\n\n\u8003\u8651\u8d2a\u5fc3\uff2f(n+m)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\n\ntype1\uff1a\u5982\u679c\u5b83\u662f\u88ab\u5360\u9886\u7684\u8bdd\uff0c\u5c31\u8981\u628a\u4e0b\u9762\u76f8\u90bb\u7684\uff08\u7b2c\u4e00\u4e2a\uff09\u6240\u6709\u7684\u88ab\u5360\u9886\u7684\u57ce\u5e02\u4e0e\u5b83\u4e4b\u95f4\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u503c\u780d\u6389\u3002\n\ntype2\uff1a\u5426\u5219\uff0c\u53ef\u4ee5\u4fdd\u7559\u5f53\u524d\u6700\u5c0f\u503c\u6700\u5927\u7684\u4e00\u4e2a\u70b9\uff0c\u4f20\u5230\u4e0a\u9762\u7ee7\u7eed\u53d6min\uff0c\u628a\u5176\u5b83\u7684\u90fd\u780d\u6389\u3002\n\n\u5c31\u53ef\u4ee5\u4e86\u3002\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6709\u6ce8\u91ca\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 100001\n#define M 200001\n#define For(a, b, c) for(int a = b; a <= c; ++a)\nusing namespace std;\ntypedef long long LL;\nint e, be[N], to[M], ne[M], w[M];\ninline void Add(int u, int v, int s){\n    to[++e] = v, ne[e] = be[u], be[u] = e, w[e] = s;\n}\nLL ans;\nbool p[N];\ninline int Dfs(int x, int fa){\u3000\u3000\u3000\uff0f\uff0f\u6df1\u641cint\u578b\uff0c\u4f20\u5b50\u6811\u4e2d\u6700\u5c0f\u503c\u6700\u5927\u7684\u4e00\u6761\u8def\uff08\u5176\u4f59\u7684\u90fd\u88ab\u780d\u6389\u4e86\uff09\n    LL res = 0, mx = 0, u;\n    for(int i = be[x]; i; i = ne[i]){\n        int v = to[i];\n        if(v == fa) continue ;\n        u = min(Dfs(v, x), w[i]);\n        res += u, mx = max(mx, u);\u3000\u3000\uff0f\uff0f\u8bb0\u5f55\u603b\u548c\uff0c\u6700\u5927\u503c\n    }\n    ans += res;\n    if(p[x]) return 1e9;\u3000\u3000\u3000\uff0f\uff0f\uff54\uff59\uff50\uff45\uff11\n    ans -= mx; return mx;\u3000\uff0f\uff0f\uff54\uff59\uff50\uff45\uff12\n}\nint main (){\n#ifndef ONLINE_JUDGE\n    freopen(\"pro.in\", \"r\", stdin);\n    freopen(\"pro.out\",\"w\",stdout);\n#endif\n    int n, k;\n    scanf(\"%d%d\", &n, &k);\n    For(i, 1, k){\n        int v;\n        scanf(\"%d\", &v);\n        p[v] = 1;\n    }\n    For(i, 1, n - 1){\n        int u, v, s;\n        scanf(\"%d%d%d\", &u, &v, &s);\n        Add(u, v, s), Add(v, u, s);\n    }\n    Dfs(0, -1);\n    printf(\"%lld\", ans);\n    return 0;\n}\n```",
        "postTime": 1510225208,
        "uid": 59811,
        "name": "OvO_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u8003\u8651 Dp\n\n\u8bbe\u8ba1\u72b6\u6001:\n\nTre[i]\u8868\u793a\u4f7f\u5f97\u5b50\u6811i\u4e2d\u6709\u4e00\u4e2a(>1\u5fc5\u7136\u4e0d\u5408\u6cd5)\u5173\u952e\u70b9\u4e0ei\u8054\u901a\u7684\u6700\u5c0f\u8d39\u7528\n\nFal[i]\u8868\u793a\u4f7f\u5f97\u5b50\u6811i\u4e2d\u65e0\u5173\u952e\u70b9\u4e0ei\u8054\u901a\n\n\u82e5i\u4e3a\u5173\u952e\u70b9Fal[i]=INF\n\n\u72b6\u6001\u51fa\u6765\u4e86,\u65b9\u7a0b\u53ea\u8981\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u663e\u7136\u5982\u4e0b\n\nTre[i]=min(Tre[i]+Tre[son]+i->w,Tre[i]+Fal[son],Fal[i]+Tre[son])\n\nFal[i]=min(Fal[i]+Tre[son]+i->w,Fal[i]+Fal[son])\n\n\u4ee3\u7801\u81ea\u5df1\u7ffb\u63d0\u4ea4\u8bb0\u5f55\u5427\n",
        "postTime": 1509352017,
        "uid": 16975,
        "name": "tswdfop233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    },
    {
        "content": "\u4e00\u822c\u7684\u62c6\u8def\u8fde\u901a\u6027\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\n\n\n\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u53cd\u63a8\u5efa\u8fb9\n\n\n\u5148\u4ee4\u6240\u6709\u9053\u8def\u6467\u6bc1\uff0c\u518d\u6309\u5927\u5230\u5c0f\u4fee\u5efa\u4e24\u4e2a\u4e0d\u90fd\u662f\u654c\u4eba\u7684\u8282\u70b9\n\n\u6ce8\u610f\uff1a\u5982\u679c\u4e00\u4e2a\u6b63\u5e38\u8282\u70b9\u8fde\u63a5\u4e0a\u4e86\u654c\u4eba\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6b63\u5e38\u8282\u70b9\u4e5f\u53d8\u4e3a\u654c\u4eba\u8282\u70b9\n\n\n\u7edf\u8ba1\u6743\u503c\u6700\u540e\u7528\u603b\u6743\u503c\u51cf\u53bb\u8fde\u4e86\u7684\u6743\u503c\u5c31\u597d\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define LL long long int\nusing namespace std;\nconst int maxn=100005;\nbool evil[maxn];\nint pre[maxn];\nint find(int x)\n{\n    int root=x;\n    while(root!=pre[root]) root=pre[root];\n    int temp;\n    while(x!=pre[x])\n    {\n        temp=x;\n        x=pre[x];\n        pre[temp]=root;\n    }\n    return root;\n}\nint read()\n{\n    int out=0;\n    char c=getchar();\n    while(c<48||c>57) c=getchar();\n    while(c>=48&&c<=57)\n    {\n        out=out*10+c-48;\n        c=getchar();\n    }\n    return out;\n}\nint nedge=0;\n```\nclass EDGE\n{\npublic:\n\n\n\n```cpp\n        int a,b,w;\n        EDGE(int x,int y,int z): a(x),b(y),w(z) {}\n        EDGE() {}\n}edge[maxn];\ninline bool operator <(const EDGE& a,const EDGE& b)\n{\n    return a.w>b.w;\n}\nint main()\n{\n    fill(evil,evil+maxn,false);\n    int N=read(),K=read(),a,b,w;\n    LL ans=0,tot=0;\n    for(int i=0;i<N;i++) pre[i]=i;\n    while(K--) evil[read()]=true;\n    for(int i=1;i<N;i++)\n    {\n        a=read();\n        b=read();\n        tot+=w=read();\n        edge[nedge++]=EDGE(a,b,w);\n    }\n    sort(edge,edge+nedge);\n    int fa,fb;\n    for(int i=0;i<nedge;i++)\n    {\n        fa=find(edge[i].a);\n        fb=find(edge[i].b);\n        if(evil[fa]&&evil[fb]) continue;\n        pre[fa]=fb;\n        ans+=edge[i].w;\n        if(evil[fa]) evil[fb]=true;\n    }\n    cout<<tot-ans<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1494912842,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2700 \u3010\u9010\u4e2a\u51fb\u7834\u3011"
    }
]