[
    {
        "content": "## \u9898\u610f\n\u4e00\u5f00\u59cb\u5c06\u4e00\u5217\u4eba\u6309\u7f16\u53f7\u4ece$1$\u5f00\u59cb\u987a\u5e8f\u6392\u5217\uff0c\u7136\u540e\u8fdb\u884c$A$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u7f16\u53f7\u4e3a$A$\u7684\u4eba\u62ff\u51fa\uff0c\u653e\u5728\u7f16\u53f7\u4e3a $B$ \u7684\u4eba\u524d\u9762\uff0c\u6240\u6709\u64cd\u4f5c\u8fdb\u884c\u5b8c\u540e\u6709$Q$\u4e2a\u95ee\u9898\uff0c\u8be2\u95ee\u7f16\u53f7\u4e3a$X$\u7684\u4eba\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u8be2\u95ee\u5728$X$\u53f7\u4f4d\u7f6e\u4e0a\u7684\u4eba\u7684\u7f16\u53f7\u3002\n\n$2\u2264N\u226450000,1\u2264A,B\u226410^9$\n\n$1\u2264Q\u226450000,1\u2264X\u226410^9$\n## \u9898\u89e3\n\u5b9a\u4f4d\uff1a$\\rm ds$\u7b80\u5355\u9898~~\u5047\u88c5\u6211\u6ca1\u6709\u8c03\u4e24\u5929\u624d\u8c03\u51fa\u6765~~\n\n\u9996\u5148\u6211\u4eec\u4e0d\u53bb\u8003\u8651\u6570\u636e\u8303\u56f4\uff0c\u5047\u8bbe$\\max{a_i,b_i}\\le 1000000$\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u89c2\u5bdf\u64cd\u4f5c\uff1a\u62ff\u51fa\u4e00\u4e2a\u6570\uff0c\u5728\u63d2\u5230\u53e6\u4e00\u4e2a\u6570\u524d\u9762\uff0c\u53ef\u4ee5\u7528\u53cc\u5411\u94fe\u8868\u8f7b\u677e\u89e3\u51b3\u3002\n\n\u4e3a$x$\u8bb0\u5f55\u5176\u524d\u9a71$pre$\u4e0e\u540e\u7ee7$nxt$\uff0c\u90a3\u4e48\u8981\u6c42\u5220\u9664\u53ef\u4ee5\u770b\u505a\u628a\u4ed6\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\u8fde\u8d77\u6765\uff0c\u800c\u63d2\u5165\u5c31\u76f8\u5f53\u4e8e\u5728\u4e00\u4e2a\u6570\u548c\u4ed6\u7684\u524d\u9a71\u4e4b\u95f4\u52a0\u4e0a\u4e00\u4e2a\u6570\u3002\u5341\u5206\u7b80\u5355\uff0c\u8fd9\u91cc\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002\n\n\u6700\u540e\u53ea\u8981\u627e\u5230\u524d\u9a71\u4e3a$0$\u7684\u6570\u518d\u4e0d\u65ad\u5f80\u540e\u627e\u5c31\u53ef\u4ee5\u590d\u539f\u8fd9\u4e2a\u5e8f\u5217\u4e86\u3002\n\n~~\u7136\u800cCEOI\u6ca1\u6709\u8fd9\u4e2a\u90e8\u5206\u5206\u5dee\u8bc4~~\n\n\u518d\u8003\u8651\u4e0a\u8ff0\u7b97\u6cd5\u4e3a\u4ec0\u4e48\u6162\u00bf\u663e\u7136\u5bf9\u4e8e$1\\to 1000000000$\u5927\u90e8\u5206\u6570\u5b57\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u4ecd\u7136\u662f$x-1$\u4e0e$x+1$\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u6240\u6709\u7684\u6570\u5206\u6210\u4e24\u7c7b\uff1a\n1. \u524d\u9a71\u6216\u540e\u7ee7\u66f4\u6539\u8fc7\u7684\n1. \u524d\u9a71\u4e0e\u540e\u7ee7\u4e0d\u53d8\u7684\n\n\u663e\u7136\uff0c\u7b2c$1$\u7c7b\u7684\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7$3n$\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528$\\rm map$\u6765\u7ef4\u62a4\u7b2c$1$\u7c7b\u503c\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\uff0c\u518d\u628a\u6240\u6709\u524d\u9a71\u6216\u540e\u7ee7\u66f4\u6539\u8fc7\u7684\u6570\u5b57\u62ff\u51fa\u6765\u53d8\u6210\u82e5\u5e72\u5757\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ppsme0d8.png)\n\n\u663e\u7136\uff0c\u53ea\u6709\u7ea2\u6846\u91cc\u7684\u6570\u524d\u9a71\u4e0e\u540e\u7ee7\u53d1\u751f\u4e86\u53d8\u5316\u3002\u6211\u4eec\u9700\u8981\u4e00\u79cd\u4e1c\u897f\u6765\u627e\u5230\u5e76\u8bb0\u5f55\u7ea2\u6846\u3002\n\n\u5982\u679c\u6211\u4eec\u7528$\\rm map$\u6765\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u503c\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u7684\u5f00\u59cb\uff0c\u5176\u524d\u9a71\u5fc5\u7136\u4e0d\u5728$\\rm map$\u4e2d\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u70b9\u6027\u8d28\u627e\u5230\u6bcf\u4e00\u4e2a\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5e76\u628a\u6bcf\u4e00\u6bb5\u585e\u8fdb$\\rm vector$\u91cc\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5269\u4e0b\u7684\u6570\uff0c\u5176\u5fc5\u7136\u662f\u9012\u589e\u7684\uff0c\u4e14\u53ef\u4ee5\u770b\u505a\u662f$[1,100000000]$\u5220\u53bb\u7b2c$1$\u7c7b\u6570\u3002\n\n\u7531\u4e8e\u5e0c\u671b\u8fd9\u4e9b\u5757\u6309\u524d\u540e\u6392\u5e8f\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5757\u8bb0\u5f55\u6574\u4e2a\u5757\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\uff0c\u90a3\u4e48\u6309\u524d\u9a71\u6392\u5e8f\u5c31\u628a\u8fd9\u4e9b\u5757\u524d\u540e\u6392\u5e8f\u4e86\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5bb9\u6613\u5730\u7ef4\u62a4\u4ed6\u524d\u9762\u7684\u6570\u5b57\u603b\u6570\u3002\u4e24\u4e2a\u5757\u4e4b\u95f4\u7684\u6570\u5b57\u6570\u4e3a$pre_i-nxt_{i-1}+1$\u3002\u90a3\u4e48\u5bf9\u4e8e\u5757\u5185\u7684\u6570\uff0c\u5176\u4f4d\u7f6e\u4e0e\u5bf9\u76f8\u5e94\u4f4d\u7f6e\u7684\u503c\u4e5f\u547c\u4e4b\u6b32\u51fa\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u4e0d\u5728\u5757\u5185\u7684\u6570\uff1a\n\n### \u7ed9\u4f4d\u7f6e\u6c42\u7f16\u53f7\n\u6211\u4eec\u8bb0\u5f55\u6240\u6709\u5757\u7ed3\u675f\u65f6\u7684\u6570\u5b57\u603b\u6570\uff0c\u90a3\u4e48\u80af\u5b9a\u80fd\u627e\u5230\u7b2c\u4e00\u4e2a\u5757\uff0c\u4f7f\u5f97$sum_i\\le x$\uff0c\u4e8c\u5206\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u3002\n\n\u90a3\u4e48$x$\u4f4d\u7f6e\u4e0a\u7684\u503c\uff0c\u5c31\u662f\u7b2c $x-\\text{\u518d\u6b64\u4e4b\u524d\u76841\u7c7b\u4e2a\u6570}$ \u4e2a\u7b2c$2$\u7c7b\u503c\u3002\u5728\u6b64\u4e4b\u524d\u7684$1$\u7c7b\u4e2a\u6570\u53ef\u4ee5\u524d\u7f00\u548c\u7ef4\u62a4\u3002\n### \u7ed9\u7f16\u53f7\u6c42\u4f4d\u7f6e\n\u627e\u5230\u7b2c\u4e00\u4e2a\u5757\u4f7f\u5f97$nxt_i\\le x$\uff0c\u4e8c\u5206\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e$x$\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f$x\\text{\u5728\u7b2c\u4e8c\u7c7b\u4e2d\u7684\u7f16\u53f7}+\\text{\u518d\u6b64\u4e4b\u524d\u76841\u7c7b\u4e2a\u6570}$\u3002\u7ef4\u62a4\u65b9\u5f0f\u7c7b\u4f3c\u3002\n\n\n\n\u4e8e\u662f\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e2a\u95ee\u9898\uff1a\u7b2c$2$\u7c7b\u6570\u6700\u591a\u6709$1000000000$\u4e2a\uff0c\u5982\u4f55\u7ed9\u6570\u5b57\u6c42\u7f16\u53f7\u6216\u7ed9\u7f16\u53f7\u6c42\u6570\u5b57\u3002\u4e8b\u5b9e\u4e0a\uff0c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u53ef\u4ee5\u89e3\u51b3\u3002\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u5df2\u7ecf\u5220\u53bb\u4e86\u591a\u5c11\u4e2a\uff0c\u518d\u4e71\u641e\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n## \u4ee3\u7801\n\u8fb9\u754c\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u5176\u4ed6\u4e5f\u6ca1\u4ec0\u4e48\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nnamespace in{\n\tchar buf[1<<21],*p1=buf,*p2=buf;\n\tinline int getc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n\ttemplate <typename T>inline void read(T& t){\n\t\tt=0;int f=0;char ch=getc();while (!isdigit(ch)){if(ch=='-')f = 1;ch=getc();}\n\t    while(isdigit(ch)){t=t*10+ch-48;ch = getc();}if(f)t=-t;\n\t}\n\ttemplate <typename T,typename... Args> inline void read(T& t, Args&... args){read(t);read(args...);}\n}\nnamespace out{\n\tchar buffer[1<<21];int p1=-1;const int p2 = (1<<21)-1;\n\tinline void flush(){fwrite(buffer,1,p1+1,stdout),p1=-1;}\n\tinline void putc(const char &x) {if(p1==p2)flush();buffer[++p1]=x;}\n\ttemplate <typename T>void write(T x) {\n\t\tstatic char buf[15];static int len=-1;if(x>=0){do{buf[++len]=x%10+48,x/=10;}while (x);}else{putc('-');do {buf[++len]=-(x%10)+48,x/=10;}while(x);}\n\t\twhile (len>=0)putc(buf[len]),--len;\n\t}\n}\nusing namespace std;\nint n,q;\n//\u53cc\u5411\u94fe\u8868\u90e8\u5206\nstruct node{\n\tint pre,nxt;//\u8bb0\u5f55\u524d\u9a71\u4e0e\u540e\u7ee7 \n\tnode(){pre=nxt=0;}\n\tnode(int _pre,int _nxt){pre=_pre,nxt=_nxt;};\n}; \nmap<int,node>List;\nbool has(int x){\n\treturn List.find(x)!=List.end();\n}\nvoid chk(int x){\n\tif(!has(x))\n\t\tList[x]=node(x-1,x+1);\n}\nvoid connect(int x,int y){\n\tList[x].nxt=y;\n\tList[y].pre=x;\n}\n//\u7ef4\u62a4\u5757\nvector<int>num[100000+10];\nint cnt=0;\nstruct node2{\n\tint pre,nxt,id,sum,lensum;\n\tnode2(){id=cnt++;}\n\tbool operator<(const node2 b)const{\n\t\treturn pre<b.pre;\n\t}\n};\nvector<node2>block;\n//\u7ef4\u62a4\u5757\u5185\u6709\u5173\u4fe1\u606f\nmap<int,int>wei;//wei[x] \u8bb0\u5f55x\u7684\u4f4d\u7f6e\nmap<int,int>val;//val[x] \u8bb0\u5f55x\u4e0a\u7684\u503c\n//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u67e5\u8be2\nstruct t{\n\tint lc,rc;\n\tint sz;\n}T[100000*32];\nint root,tot;\n#define mid (l+r>>1)\nvoid upd(int &x,int l,int r,int pos){\n\t//\u628apos\u6539\u4e3a0\n\tif(!x)x=++tot,T[x].sz=0;\n\tif(l==r){T[x].sz=1;return;}\n\tif(pos<=mid)upd(T[x].lc,l,mid,pos);\n\telse upd(T[x].rc,mid+1,r,pos);\n\tT[x].sz=T[T[x].lc].sz+T[T[x].rc].sz;\n\t//printf(\"%d [%d,%d] %d\\n\",x,l,r,t[x].sz); \n}\nint qry1(int x,int l,int r,int pos){\n\t//printf(\"%d %d %d   sz:%d\\n\",x,l,r,T[x].sz);\n\t//\u67e5\u8be2\u5728\u5c0f\u4e8e\u7b49\u4e8epos\u7684\u548c\n\tif(!x)return pos-l+1;\n\tif(l==r)return 1-T[x].sz;\n\tif(pos<=mid)return qry1(T[x].lc,l,mid,pos);\n\treturn (mid-l+1-T[T[x].lc].sz)+qry1(T[x].rc,mid+1,r,pos);\n}\nint qry2(int x,int l,int r,int pos){\n\t//\u67e5\u8be2\u7b2c pos \u4e2a\u672a\u88ab\u5220\u9664\u7684\u503c\n\tif(!x){\n\t\t//\u8bf4\u660el-r\u90fd\u672a\u88ab\u5220\u9664\n\t\treturn l+pos-1; \n\t}\n\tint hasl=mid-l+1-T[T[x].lc].sz;\n\tif(hasl>=pos)return qry2(T[x].lc,l,mid,pos);\n\telse return qry2(T[x].rc,mid+1,r,pos-hasl);\n}\nsigned main(){\n    //freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tin::read(n);\n\tfor(int i=1,a,b;i<=n;i++){\n\t\tin::read(a,b);\n\t\tchk(a);chk(List[a].pre);chk(List[a].nxt);\n\t\tchk(b);chk(List[b].pre);\n\t\tconnect(List[a].pre,List[a].nxt);\n\t\tconnect(List[b].pre,a);\n\t\tconnect(a,b);\n\t}\n\tList.erase(0);\n\tfor(auto k:List){\n\t\t//printf(\"%d<- %d ->%d\\n\",k.second.pre,k.first,k.second.nxt); \n\t\tif(!has(k.second.pre)){\n\t\t\tblock.push_back(node2());\n\t\t\tblock.back().pre=k.second.pre;\n\t\t\tint now=k.first;\n\t\t\twhile(has(now)){\n\t\t\t\tnum[block.back().id].push_back(now);\n\t\t\t\tnow=List[now].nxt;\n\t\t\t}\n\t\t\tblock.back().nxt=now;\n\t\t}\n\t}\n\tblock.push_back(node2());\n\tblock.back().pre=-1000;\n\tblock.back().sum=0;\n\tblock.back().lensum=0;\n\t\n\tsort(block.begin(),block.end());\n\t//for(auto k:block){\n\t//\tprintf(\"%d %d\\n\",k.pre,k.nxt);\n\t//\tfor(auto nn:num[k.id])\n\t//\t\tprintf(\"%d \",nn);\n\t//\tprintf(\"\\n\");\n\t//}\n\t\n\tint lst=1,sum=0,lensum=0;//\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u5757\u7684\u540e\u7ee7 \uff0c\u5df2\u7ecf\u4e00\u5171\u6709\u7684\u6570\n\tfor(auto &k:block){\n\t\tif(k.pre<0)continue;\n\t\tsum+=k.pre-lst+1;\n\t\tlst=k.nxt;\n\t\tfor(auto nn:num[k.id])\n\t\t\tsum++,wei[nn]=sum,val[sum]=nn,\n\t\t\tupd(root,1,1000000000,nn);\n\t\tk.sum=sum;\n\t\tk.lensum=lensum+num[k.id].size();\n\t\tlensum=k.lensum;\n\t} \n\t//for(auto k:wei)\n\t//\tprintf(\"%d\u5728%d\\n\",k.first,k.second);\n\tin::read(q);\n\twhile(q--){\n\t\tchar op=in::getc();int x;\n\t\twhile(!isalpha(op))op=in::getc();\n\t\tin::read(x);\n\t\tif(op=='P'){\n\t\t\tif(wei[x])\n\t\t\t\tout::write(wei[x]);\n\t\t\telse{\n\t\t\t\tint l=0,r=block.size()-1;\n\t\t\t\tint ans=0;\n\t\t\t\twhile(l<=r){\n\t\t\t\t\tif(block[mid].nxt<=x)\n\t\t\t\t\t\tans=mid,l=mid+1;\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}\n\t\t\t\tout::write(block[ans].lensum+qry1(root,1,1000000000,x));\n\t\t\t}\n\t\t}else{\n\t\t\tif(val[x])\n\t\t\t\tout::write(val[x]);\n\t\t\telse{\n\t\t\t\tint l=0,r=block.size()-1;\n\t\t\t\tint ans; \n\t\t\t\twhile(l<=r){\n\t\t\t\t\tif(block[mid].sum<=x)\n\t\t\t\t\t\tans=mid,l=mid+1;\n\t\t\t\t\telse r=mid-1;\n\t\t\t\t}\n\t\t\t\tout::write(qry2(root,1,1000000000,x-block[ans].lensum));\n\t\t\t}\n\t\t}\n\t\tout::putc('\\n');\n\t\t\n\t}\n\tout::flush();\n\treturn 0;\n}\n```",
        "postTime": 1605180691,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6887 \u3010[CEOI2006]Queue\u3011"
    }
]