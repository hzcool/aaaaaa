[
    {
        "content": "### \u770b\u5927\u5bb6\u90fd\u662f\u500d\u589e\uff0c\u6211\u6362\u4e00\u4e2a\u7b80\u5355\u70b9\u7684\u65b9\u6cd5\u5427\n\n~~\u4e00\u5f00\u59cb\u8fd8\u4ee5\u4e3a\u662f\u6700\u5c0f\u5272\u7684\u6a21\u677f\u5462~~\n\n## 1.\u9898\u610f\n\n[\u9898\u76ee\u4f20\u9001\u95e8](http://luogu.org/problem/P4897)\n\n1. \u6bcf\u6b21\u8be2\u95ee$u$\u5230$v$\u7684\u6700\u5c0f\u5272\u3002\n1. \u6709$Q$\u4e2a\u8be2\u95ee\uff0c\u70b9\u6570\u3001\u8fb9\u6570\u5206\u522b\u4e3a$n$\u3001$m$\u3002\n1. $Q \\leq 10^5,n \\leq 500,m \\leq 1500$\u3002\n\n## 2.\u77e5\u8bc6\u50a8\u5907\n\u7f51\u7edc\u6d41 + \u6700\u5927\u6d41\n\n\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\n\n\u4e0d\u4f1a\u8bf7\u79fb\u6b65\n[\u6211\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/mydcwfy-342891/wang-lao-liu-chu-bu) \u6216\u8005\u767e\u5ea6\n\n## 3.\u6700\u5c0f\u5272\u6811\n\u5f88\u660e\u663e\uff0c\u4e0d\u53ef\u80fd\u6bcf\u6b21\u6c42\u6700\u5c0f\u5272\uff08\u590d\u6742\u5ea6\u4e3a $O(Qn^2m)$\uff09\u3002\n\n\u6211\u4eec\u5c06\u4e00\u4e2a\u7f51\u7edc\u6d41\u7684\u56fe\u8f6c\u5316\u4e3a\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u539f\u56fe $u$ \u5230 $v$ \u7684\u6700\u5c0f\u5272\u5373\u4e3a\u8f6c\u5316\u5230\u6811\u4e0a\u3002\n\n\u6811\u7684\u4e00\u4e2a\u6027\u8d28\u662f\uff1a\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u6811\u53d8\u5f97\u4e0d\u8fde\u901a\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u9009 2 \u4e2a\u70b9 $s$ \u4e0e $t$\uff0c\u8dd1\u6700\u5c0f\u5272\uff08\u5373\u6700\u5927\u6d41\uff09\uff0c\u7136\u540e\u518d\u8fde\u4e00\u6761\u4ece $s$ \u5230 $t$ \u7684\u8fb9\u3002\n\n\u53c8 Dinic \u7b97\u6cd5\u6700\u540e\u4e00\u6b21 bfs \u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u6700\u5c0f\u5272\uff0c\u539f\u56fe\u5c31\u88ab\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\u3002\n\n\u6700\u540e\u5206\u6cbb\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6\u4e3a $O(n^3m)$\uff08Dinic \u8dd1\u4e0d\u6ee1\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8d85\u65f6\uff09\u3002\n\n\u6309\u8fd9\u6837\u5efa\u51fa\u7684\u6811\uff0c\u5c31\u662f\u4e00\u68f5\u65e0\u6839\u6811\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u6027\u8d28\uff1a$u$ \u5230 $v$ \u7684\u6700\u5c0f\u5272\u5c31\u662f\u6811\u4e0a\u4ece $u$ \u5230 $v$ \u7684\u6240\u6709\u8def\u5f84\u957f\u7684\u6700\u5c0f\u503c\u3002\n\n\u53ef\u4ee5\u611f\u6027\u5730\u7406\u89e3\u4e00\u4e0b\uff08 ~~\u4e3b\u8981\u662f\u592a\u83dc\u4e0d\u4f1a\u8bc1~~ \uff09\uff1a\u6700\u5c0f\u5272\u5373\u4e3a\u6700\u5c0f\u7684\u8def\u5f84\u957f\uff0c\u628a $u$ \u5230 $v$ \u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u5207\u65ad\uff0c\u90fd\u662f\u5272\u3002\n\n#### \u6ce8\u610f\uff1a\n\u6bcf\u6b21\u8dd1 Dinic \u65f6\uff0c\u90fd\u8981\u5bf9\u5168\u56fe\u8fdb\u884c\uff0c\u5426\u5219\u5c31\u4e0d\u662f\u6700\u5927\u6d41\n\uff08$u$ \u5230 $v$ \u7684\u6700\u5927\u6d41\u5c31\u662f\u9488\u5bf9\u5168\u5c40\u7684\uff09\u3002\n\nCode\uff1a\n\n```cpp\nvoid work(int l,int r)\n{//node\u5b58\u653e\u8981\u5904\u7406\u7684\u8282\u70b9\uff0cl\u4e0er\u5206\u522b\u662f\u5de6\u53f3\u7aef\u70b9\n\tif (l==r) return ;\n\tS=node[l],T=node[l+1];\n\tint t=dinic();\n\tans[T][S]=ans[S][T]=t;//or add(S,T,t),add(T,S,t)\n\tint cnt1=0,cnt2=0;\n\tfor (int i=l;i<=r;++i)\n\t\tif (d[node[i]]) tmp1[++cnt1]=node[i];\n\t\telse tmp2[++cnt2]=node[i];\n\tfor (int i=1;i<=cnt1;++i) node[i+l-1]=tmp1[i];\n\tfor (int i=1;i<=cnt2;++i) node[cnt1+l+i-1]=tmp2[i];\n\twork(l,l+cnt1-1);\n\twork(l+cnt1,r);\n   \treturn;\n}\n```\n\n## 4.\u5904\u7406\u8be2\u95ee\n\u7531\u4e8e\u8be2\u95ee\u6570\u5f88\u591a\uff08 $Q \\leq 10^5$ \uff09\uff0c\u5f88\u591a dalao \u9009\u62e9\u4e86\u6811\u4e0a\u500d\u589e\u7684\u505a\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a $O(Q \\log n)$\u3002\n\n\u9274\u4e8e\u672c\u4eba\u5bf9\u500d\u589e\u4e0d\u592a\u719f\u7ec3\uff0c\u6211\u6362\u4e86\u4e00\u79cd\u65b9\u5f0f\u3002\n\n\u89c2\u5bdf\u9898\u76ee\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b0 $n$ \u8f83\u5c0f\uff0c\u800c $Q$ \u8f83\u5927\uff0c\u6240\u4ee5\u4f7f\u7528\u9884\u5904\u7406\u7684\u65b9\u5f0f\uff0c\u5148\u5c06\u7b54\u6848\u5904\u7406\u597d\u3002\n\n\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\n\n\u6211\u4eec\u751a\u81f3\u4e0d\u7528\u5efa\u6811\uff08\u5fc3\u4e2d\u6709\u201c\u6811\u201d\u5373\u53ef\uff09\uff0c\u5728\u6bcf\u4e00\u4e2a work(l,r) \u51fd\u6570\u4e2d\u76f4\u63a5\u7edf\u8ba1\u4ece $s$ \u6240\u5728\u96c6\u5408 $S$ \u5230 $t$ \u6240\u5728\u96c6\u5408 $T$ \u7684\u7b54\u6848\u3002\n\n\u5f53\u524d $S$ \u4e0e $T$ \u96c6\u5408\u7684\u8fde\u63a5\u53ea\u6709 $s$ \u4e0e $t$\uff08\u5176\u4ed6\u7684\u90fd\u5728\u96c6\u5408\u5185\u90e8\uff09\u3002\n\n\u5219 $\\forall u \\in S,v \\in T$\uff0c\u90fd\u6709\uff1a \n$$ans(u,v)=\\min (ans(u,s),ans(s,t),ans(t,v))$$\n\n\u540c\u65f6\uff0c\u7531\u4e8e\u6b63\u5411\u4e0e\u53cd\u5411\u90fd\u76f8\u540c\uff0c\u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0\u5904\u7406\u53cd\u5411\u3002\n\n\u6700\u540e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u6ce8\u610f\u4ee5\u4e0b\u51e0\u4e2a\u7ec6\u8282\uff1a\n\n1. \u6bcf\u4e00\u6b21\u6700\u5927\u6d41\u65f6\uff0c\u90fd\u8981\u5148\u6062\u590d\u5f00\u59cb\u7684\u7f51\u7edc\u6d41\uff08\u5373\u9000\u6d41\uff09\u3002\n\n1. \u63d2\u5165\u7f51\u7edc\u6d41\u7684\u8fb9\u65f6\uff0c\u8981\u53cc\u5411\u63d2\u5165\uff08\u9898\u76ee\u6ca1\u6709\u6307\u660e\u54ea\u4e2a\u662f\u8d77\u70b9\uff09\u3002\n1. \u4e0b\u6807\u4ece 0 \u5f00\u59cb\u5230 $n$\u3002\n1. \u6bcf\u4e00\u6b21\u6700\u5927\u6d41\u65f6\uff0c\u5148\u4fdd\u5b58\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u9632\u6b62\u88ab\u8986\u76d6\uff08\u5982\u679c $s$ \u4e0e $t$ \u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff09\uff08 ~~\u5361\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\u6211\u624d\u53d1\u73b0~~ \uff09\u3002\n\n\u5176\u4f59\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\nCode\uff1a\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int N=505,M=6005,INF=0x3f3f3f3f;\n//M\u8981\u5f004\u500d\uff0c\u56e0\u4e3a\u6b63\u53cd\u5404\u89812\u6761\u8fb9\n\nint h[N],e[M],ne[M],w[M],idx;\nint cur[N],q[N],d[N],S,T,n,m;\nint node[N],ans[N][N],tmp1[N],tmp2[N];\n\nvoid add(int a,int b,int c)\n{\n\te[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;\n\te[idx]=a,ne[idx]=h[b],w[idx]=0,h[b]=idx++;\n}\n\nbool bfs()\n{\n\tmemset(d,0,sizeof d);\n\tint hh=1,tt=1;\n\tq[1]=S;cur[S]=h[S];d[S]=1;\n\twhile (hh<=tt)\n\t{\n\t\tint x=q[hh++];\n\t\tfor (int i=h[x];~i;i=ne[i])\n\t\t\tif (!d[e[i]]&&w[i])\n\t\t\t{\n\t\t\t\td[e[i]]=d[x]+1;\n\t\t\t\tcur[e[i]]=h[e[i]];\n\t\t\t\tif (e[i]==T) return true;\n\t\t\t\tq[++tt]=e[i];\n\t\t\t}\n\t}\n\treturn false;\n}\n\nint findflow(int x,int limit)\n{\n\tif (x==T) return limit;\n\tint flow=0;\n\tfor (int i=cur[x];~i&&flow<limit;i=ne[i])\n\t{\n\t\tcur[x]=i;\n\t\tif (d[e[i]]==d[x]+1&&w[i])\n\t\t{\n\t\t\tint t=findflow(e[i],min(w[i],limit-flow));\n\t\t\tif (!t) d[e[i]]=-1;\n\t\t\tw[i]-=t,w[i^1]+=t,flow+=t;\n\t\t}\n\t}\n\treturn flow;\n}\n\nvoid init()\n{\n\tfor (int i=0;i<idx;i+=2)\n\t\tw[i]=(w[i]+w[i^1]),w[i^1]=0;\n\treturn;\n}//\u6ce8\u610f\u9000\u6d41\u7684\u65b9\u5f0f\n\nint dinic()\n{\n\tinit();\n\tint r=0,flow;\n\twhile (bfs()) while (flow=findflow(S,INF)) r+=flow;\n\treturn r;\n}//Dinic\u6a21\u677f\n\nvoid work(int l,int r)\n{\n\tif (l==r) return ;\n\tS=node[l],T=node[l+1];\n\tint t=dinic(),s=node[l],tt=node[l+1];//\u5c06\u6e90\u6c47\u70b9\u5b58\u4e0b\u6765\n\tans[T][S]=ans[S][T]=t;\n\tint cnt1=0,cnt2=0;\n\tfor (int i=l;i<=r;++i)\n\t\tif (d[node[i]]) tmp1[++cnt1]=node[i];\n\t\telse tmp2[++cnt2]=node[i];\n\tfor (int i=1;i<=cnt1;++i) node[i+l-1]=tmp1[i];\n\tfor (int i=1;i<=cnt2;++i) node[cnt1+l+i-1]=tmp2[i];\n\twork(l,l+cnt1-1);\n\twork(l+cnt1,r);//\u5206\u6cbb\n\tfor (int i=1;i<=cnt1;++i)\n\t\tfor (int j=1;j<=cnt2;++j)\n\t\t{\n\t\t\tint ii=node[i+l-1],jj=node[j+cnt1+l-1];\n\t\t\tans[jj][ii]=ans[ii][jj]=min(min(ans[ii][s],ans[s][tt]),ans[tt][jj]);\n\t\t}//\u6bcf\u4e2a\u70b9\u90fd\u8981\u5904\u7406\n\treturn;\n}\n\nint main()\n{\n\tmemset(h,-1,sizeof h);\n\tmemset(ans,0x3f,sizeof ans);\n\tcin>>n>>m;\n\tint x,y,z;\n\twhile (m--)\n\t{\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\tadd(x,y,z);add(y,x,z);//\u53cc\u5411\u8fb9\n\t}\n\tfor (int i=0;i<=n;++i) node[i]=i;\n\twork(0,n);//\u4e0b\u6807\u4ece0\u5f00\u59cb\n\tint que;cin>>que;\n\twhile (que--)\n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tprintf(\"%d\\n\",ans[x][y]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1617960470,
        "uid": 342891,
        "name": "mydcwfy",
        "ccfLevel": 9,
        "title": "P4897\u9898\u89e3"
    },
    {
        "content": "\u554a\u597d\u7684\uff0c\u5176\u5b9e\u8fd9\u4e2a\u4e0d\u662f\u4ec0\u4e48\u5f88\u96be\u7684\u7b97\u6cd5\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5b9a\u7406\uff0c\u5c31\u662f\u4e00\u4e2a$n$\u4e2a\u70b9\u7684\u56fe\u4e0a\uff0c\u4e24\u70b9\u4e4b\u95f4\u53ea\u6709$n$\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3002\u56e0\u6b64\u4e00\u5b9a\u5b58\u5728\u4e00\u68f5\u6811\uff0c\u6ee1\u8db3\u6811\u4e0a\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u7b49\u4e8e\u539f\u56fe\u4e0a\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u3002\u6211\u4eec\u628a\u8fd9\u6837\u7684\u6811\u79f0\u4e4b\u4e3a\u201c\u6700\u5c0f\u5272\u6811\u201d\u3002\u5efa\u7acb\u6700\u5c0f\u5272\u6811\u7684\u5e38\u7528\u7b97\u6cd5\u5c31\u662fGomory-Hu Tree\n\n\u7b97\u6cd5\u5927\u81f4\u601d\u8def\u662f\u5206\u6cbb\u3002\u5177\u4f53\u5730\uff0c\u5728\u6240\u6709\u70b9\u4e2d\u4efb\u53d6\u4e24\u4e2a\u4f5c\u4e3a\u6e90\u6c47\u70b9\uff0c\u8dd1\u4e00\u904dDinic/ISAP\u6c42\u51fa\u6700\u5c0f\u5272\uff0c\u6700\u5c0f\u5272\u5c06\u56fe\u5206\u6210\u4e86\u4e24\u4e2a\u4e92\u4e0d\u8fde\u901a\u7684\u5272\u96c6\u3002\u6211\u4eec\u4ece\u6e90\u70b9\u51fa\u53d1\u505a\u4e00\u904ddfs\u5f97\u5230\u6e90\u70b9\u5272\u96c6\uff0cdfs\u65f6\u4e0d\u5f97\u8d8a\u8fc7\u6ee1\u6d41\u8fb9\uff0c\u56e0\u4e3a\u90a3\u662f\u5272\u96c6\u5206\u754c\u7ebf\u3002\u7136\u540e\u5728\u6700\u5c0f\u5272\u6811\u4e2d\uff0c\u4e3a\u6211\u4eec\u9009\u5b9a\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u5c31\u662f\u6c42\u51fa\u7684\u6700\u5c0f\u5272\u3002\u7136\u540e\u9012\u5f52\u5bf9\u4e24\u4e2a\u5272\u96c6\u8fdb\u884c\u4e00\u6837\u7684\u64cd\u4f5c\n\n\u6ce8\u610f\u6bcf\u6b21\u8dd1Dinic/ISAP\u65f6\uff0c\u90fd\u8981\u628a\u6240\u6709\u8fb9\u6062\u590d\u521d\u59cb\u72b6\u6001\uff0c\u5e76\u4e14\u4e0d\u7ba1\u5728\u54ea\u4e2a\u5206\u6cbb\u73af\u8282\uff0cDinic/ISAP\u90fd\u5e94\u8be5\u662f\u9488\u5bf9\u6574\u4e2a\u56fe\u8dd1\u7684\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u8981\u5904\u7406\u7684\u8fd9\u4e2a\u5272\u96c6\n\n\u90a3\u4e48\u6700\u7ec8\u6211\u4eec\u5c31\u8fde\u597d\u4e86$n-1$\u6761\u8fb9\uff0c\u56fe\u4e0a\u7684\u6700\u5c0f\u5272\u8be2\u95ee\u5c31\u53ef\u4ee5\u8f6c\u5230\u6811\u4e0a\u4e86\u3002\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u6545\u6700\u5c0f\u5272\u5c31\u662f\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6811\u4e0a\u500d\u589e\u5c31\u53ef\u4ee5\u641e\u5b9a\u8be2\u95ee\u4e86\n\n\u4e0d\u8fc7\u770b\u5f88\u591a\u4eba\u4e5f\u662f\u7528\u7684Gomory-Hu Tree\u7b97\u6cd5\uff0c\u4f46\u6ca1\u628a\u6700\u5c0f\u5272\u6811\u771f\u6b63\u5730\u5efa\u51fa\u6765\uff0c\u4e5f\u6ca1\u505a\u500d\u589e\uff0c\u6211\u8868\u793a\u6bd4\u8f83\u597d\u5947\n\n\u7531\u4e8e\u6211\u4eec\u6bcf\u6b21\u6700\u5927\u6d41\u662f\u5bf9\u5168\u56fe\u8dd1\u7684\uff0c\u4e00\u5171\u8dd1\u4e86$n$\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f$O(n^3m)$\uff0c\u56e0\u4e3a\u7f51\u7edc\u6d41\u7684\u590d\u6742\u5ea6\u51e0\u4e4e\u4e0d\u53ef\u80fd\u5361\u6ee1\uff0c\u6240\u4ee5\u80fd\u8fc7\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x7fffffff\nusing namespace std;\n\nconst int N=510,M=14010;\nstruct Edge{int to,capa,next;} e[N<<1];\nint h[N],sum=0,n,m,now=0;\nint pdx[N],tdx[N],col[N];\nint fa[9][N],mn[9][N],dep[N];\n\nvoid add_edge(int u,int v,int w)\n{\n    e[++sum].to=v;\n    e[sum].capa=w;\n    e[sum].next=h[u];\n    h[u]=sum;\n}\n\nnamespace GHT\n{\n    struct Edge{int to,capa,flow,next;} e[M];\n    int h[N],sum=-1,s,t;\n    int d[N],cur[N];\n    bool vis[N];\n\n    void add_edge(int u,int v,int w)\n    {\n        e[++sum]={v,w,0,h[u]};h[u]=sum;\n        e[++sum]={u,w,0,h[v]};h[v]=sum;\n    }\n\n    bool BFS()\n    {\n        queue<int> q;q.push(s);\n        memset(vis,0,sizeof(vis));\n        vis[s]=1;d[s]=0;\n        while(!q.empty())\n        {\n            int u=q.front();q.pop();\n            for(int t=h[u];~t;t=e[t].next)\n            {\n                int v=e[t].to;\n                if(!vis[v]&&e[t].capa>e[t].flow)\n                {\n                    d[v]=d[u]+1;\n                    vis[v]=1;\n                    q.push(v);\n                }\n            }\n        }\n        return vis[t];\n    }\n\n    int DFS(int u,int a)\n    {\n        if(u==t||a==0) return a;\n        int res=0,flow;\n        for(int &t=cur[u];~t;t=e[t].next)\n        {\n            int v=e[t].to;\n            if(d[v]!=d[u]+1) continue;\n            flow=DFS(v,min(a,e[t].capa-e[t].flow));\n            if(!flow) continue;\n            e[t].flow+=flow;\n            e[t^1].flow-=flow;\n            res+=flow;a-=flow;\n            if(a==0) break;\n        }\n        return res;\n    }\n\n    int Dinic(int x,int y)\n    {\n        int flow=0;s=x;t=y;\n        for(int i=0;i<=sum;i++) e[i].flow=0;\n        while(BFS())\n        {\n            memcpy(cur,h,sizeof(h));\n            flow+=DFS(s,INF);\n        }\n        return flow;\n    }\n\n    void dfs(int u)\n    {\n        col[u]=now;\n        for(int t=h[u];~t;t=e[t].next)\n            if(e[t].capa>e[t].flow&&col[e[t].to]!=now)\n                dfs(e[t].to);\n    }\n\n    void build(int l,int r)\n    {\n        if(l>=r) return;\n        int x=pdx[l],y=pdx[l+1];\n        int cut=Dinic(x,y);\n        now++;dfs(x);int p=l,q=r;\n        for(int i=l;i<=r;i++)\n            if(col[pdx[i]]==now) tdx[p++]=pdx[i];\n            else tdx[q--]=pdx[i];\n        for(int i=l;i<=r;i++) pdx[i]=tdx[i];\n        ::add_edge(x,y,cut);\n        ::add_edge(y,x,cut);\n        build(l,p-1);build(q+1,r);\n    }\n}\n\nvoid dfs(int u,int la)\n{\n    for(int i=1;i<=8;i++)\n    {\n        fa[i][u]=fa[i-1][fa[i-1][u]];\n        mn[i][u]=min(mn[i-1][u],mn[i-1][fa[i-1][u]]);\n    }\n    for(int t=h[u];t;t=e[t].next)\n    {\n        int v=e[t].to;\n        if(v==la) continue;\n        dep[v]=dep[u]+1;\n        mn[0][v]=e[t].capa;\n        fa[0][v]=u;dfs(v,u);\n    }\n}\n\nint getcut(int x,int y)\n{\n    int res=INF;\n    if(dep[x]<dep[y]) swap(x,y);\n    for(int i=8;i>=0;i--)\n        if(dep[fa[i][x]]>=dep[y])\n        {\n            res=min(res,mn[i][x]);\n            x=fa[i][x];\n        }\n    if(x==y) return res;\n    for(int i=8;i>=0;i--)\n        if(fa[i][x]!=fa[i][y])\n        {\n            res=min(res,mn[i][x]);\n            res=min(res,mn[i][y]);\n            x=fa[i][x];y=fa[i][y];\n        }\n    res=min(res,min(mn[0][x],mn[0][y]));\n    return res;\n}\n\nint main()\n{\n    int u,v,w,q;\n    scanf(\"%d%d\",&n,&m);\n    memset(GHT::h,-1,sizeof(GHT::h));\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        GHT::add_edge(u,v,w);\n    }\n    for(int i=1;i<=n;i++) pdx[i]=i;\n    GHT::build(1,n);\n    dep[1]=1;dfs(1,0);\n    for(scanf(\"%d\",&q);q;q--)\n    {\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",getcut(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1538211811,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4897 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\u3011"
    },
    {
        "content": "##### \u7ec8\u4e8eAC\u8fd9\u4e00\u9898\u4e86\uff0c\u53d1\u4e2a\u9898\u89e3\u5e86\u795d\u4e00\u4e0b\u5427\uff01\uff01\uff01\n\u9996\u5148\uff0c\u5927\u5bb6\u8981\u5148\u7528Dinic\u6216ISAP\u505a\u5bf9[\u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41](https://www.luogu.org/problem/P3376)\uff08\u4e0d\u4f1a\u7f51\u7edc\u6700\u5927\u6d41\u7684\u53ef\u4ee5[\u70b9\u8fd9\u91cc](https://www.luogu.org/blog/user48036/solution-p3376)\uff09\uff0c\u6839\u636e\u63a8\u65ad\uff0c\u7f51\u7edc\u6700\u5927\u6d41=\u7f51\u7edc\u6700\u5c0f\u5272\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u77e5\u9053\u3002\u6309\u7167\u6b63\u5e38\u66b4\u529b\u7684\u7b97\u6cd5\uff0c\u8fd9\u4e00\u9898\u4f1a\u88abT\u98de\u7684\u3002\u4e3a\u4e86\u9632\u6b62TLE\u4e8b\u4ef6~~\u4e0d~~\u518d\u53d1\u751f\u3002\u6211\u4eec\u5c31\u8981\u91c7\u53d6\u76f8\u5e94\u7684\u4f18\u5316\u63aa\u65bd\u3002\n\n\u600e\u4e48\u5f04\uff1f\u5176\u5b9e\u4e5f\u4e0d\u96be\u3002\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u68f5**\u6700\u5c0f\u5272\u6811**\u3002\n\uff08\u6700\u5c0f\u5272\u6811\uff1f\u5565\uff1f\uff09\n\n\u6700\u5c0f\u5272\u6811=[\u5206\u6cbb](https://baike.baidu.com/item/%E5%88%86%E6%B2%BB/3029637?fr=aladdin)+[\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09](https://www.luogu.org/blog/user48036/solution-p3376)\n\n\u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n![](https://i.loli.net/2019/11/18/hczGRxQN1iTB2Z3.png)\n\n\u5148\u5efa\u7acb\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e2a\u56fe\u7684\u6574\u4f53\u770b\u505a\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u4efb\u610f\u9009\u62e9\u4e24\u4e2a\u70b9\uff08\u8bbe\u5b83\u4eec\u4e3a1\u548c5\uff09\uff0c\u5728**\u539f\u56fe\u4e0a**\u8dd1\u4e00\u8d9f\u6700\u5c0f\u5272\u3002\u5982\u56fe\uff1a\n\n![](https://i.loli.net/2019/11/18/MaPNilbR4ZOp3y8.png)\n\n\u7136\u540e\uff0c\u56e0\u4e3a1\u548c5\u5df2\u7ecf\u65e0\u6cd5\u8fde\u63a5\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a1\u548c5\u518d\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4e2d\u95f4\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u3002\u7136\u540e\uff0c\u6211\u4eec\u518d\u5bf9\u6bcf\u4e2a\u96c6\u5408\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff08\u6ce8\u610f\uff0c\u6700\u5c0f\u5272\u8981\u5728\u539f\u56fe\u4e0a\u8dd1\uff09\uff0c\u518d\u5206\u4e0b\u53bb\uff0c\u76f4\u5230\u96c6\u5408\u5185\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\u4e3a\u6b62\u3002\u5982\u56fe\uff1a\n\n![](https://i.loli.net/2019/11/18/oYBM6Ex5kmTySLR.png)\n\n![](https://i.loli.net/2019/11/18/SBfi2JngopbCq5M.png)\n\n![](https://i.loli.net/2019/11/26/If5UkNzqhvQX28E.png)\n\n![](https://i.loli.net/2019/11/26/UzjNTY7iwCEvA8a.png)\n\n\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u6700\u5c0f\u5272\u6811\u3002\n##### \u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u8dd1\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u8981\u5728\u539f\u56fe\u4e0a\u8dd1\uff01\uff01\uff01\n\u5927\u529f\u544a\u6210(\u3003'\u25bd'\u3003)\uff0c\u8fd9\u68f5\u6811\u4e2d\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u7b49\u4e8e\u539f\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5c0f\u5272\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u76f4\u63a5\u7528BFS\u6765\u67e5\u627e\u5c31\u884c\u4e86\uff0c\u67e5\u627e\u4e00\u4e2a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u8fd9\u6837\u6c42Q\u4e2a\u6700\u5c0f\u5272\u53ea\u9700\u8981\u7528O(Qn)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u67e5\u8be2\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nint findans()\n{\n\thead=0,tail=1;\n\td[head]=a;\n\tfor(register int i=0;i<=n;i++) dis[i]=0;\n\tdis[a]=0x7ffffff;\n\twhile(head<tail)\n\t{\n\t\tt=d[head];\n\t\thead++;\n\t\tfor(register int i=trf[t];i;i=tr[i].next)\n\t\t{\n\t\t\tif(dis[trar]==0)\n\t\t\t{\n\t\t\t\tdis[trar]=min(dis[t],tr[i].flow+1);\n\t\t\t\tif(trar==b) return dis[b]-1;\n\t\t\t\td[tail]=trar;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[b]-1;\n}\n```\n\u7136\u540e\u5c31\u662f\u5982\u4f55\u6784\u5efa\u8fd9\u4e00\u68f5\u6811\u3002\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u56e0\u4e3aDinic\u6216ISAP\u8dd1dfs\u65f6\u56fe\u4e2d\u6709\u4e00\u4e9b\u8fb9\u7684\u5bb9\u91cf\u4e3a0\uff0c\u5176\u5b9e\u5c31\u4ee3\u8868\u8981\u5272\u6389\u90a3\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7528\u641c\u7d22\u7684\u65b9\u5f0f\u6765\u5bfb\u627e\u4e24\u4e2a\u96c6\u5408\u4e2d\u5206\u522b\u5305\u542b\u90a3\u4e9b\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid build(int l,int r)\n{\n\tif(l>=r)return;\n\t//\u5728\u539f\u56fe\u4e0a\u8dd1\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\n\ta=v[l];\n\tb=v[l+1];\n\tdinic();\n\t//\u7ed9\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u52a0\u4e00\u6761\u65e0\u5411\u8fb9\n\tadtr(a,b,ans);\n\tadtr(b,a,ans);\n\t//\u5bfb\u627e\u4e24\u4e2a\u96c6\u5408\u7684\u5143\u7d20\n\tint tl1=0,tl2=0;\n\tfor(register int i=l;i<=r;i++)\n\t{\n\t\tif(dis[v[i]])\n\t\t{\n\t\t\ttl1++;\n\t\t\tt1[tl1]=v[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttl2++;\n\t\t\tt2[tl2]=v[i];\n\t\t}\n\t}\n\tfor(register int i=1;i<=tl1;i++) v[i+l-1]=t1[i];\n\tfor(register int i=1;i<=tl2;i++) v[l+tl1+i-1]=t2[i];\n\t//\u5206\u6cbb\u4e0b\u53bb\n\tbuild(l,tl1+l-1);\n\tbuild(l+tl1,r);\n}\n```\n\u597d\u4e86\uff0c\u6700\u540e\u6765\u4e00\u4efd\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#pragma GCC optimize(3)\n#include<cstdio>\n#define N 100010\n#define kar k[i].ar\n#define trar tr[i].ar\n#define min(a,b) (a<b?a:b)\nusing namespace std;\nint a,b,t,n,m,f[N],ans,trl;\nstruct node {\n\tint next,ar,flow;\n} k[N*20],tr[N*20];\nint trf[N],ss;\nint first[N],dis[N],len;\nint x[N],y[N],v[N],e[N];\nint t1[N],t2[N],tl1,tl2;\nvoid add(int a,int b,int t) {\n\tlen++;\n\tk[len].ar=b;\n\tk[len].next=first[a];\n\tfirst[a]=len;\n\tk[len].flow=t;\n}\nvoid adtr(int a,int b,int t) {\n\ttrl++;\n\ttr[trl].ar=b;\n\ttr[trl].next=trf[a];\n\ttrf[a]=trl;\n\ttr[trl].flow=t;\n}\nint head,tail,d[N];\nbool bfs() {\n\thead=0,tail=1;\n\td[0]=a;\n\tfor(register int i=0; i<=n; i++) dis[i]=0;\n\tdis[a]=1;\n\twhile(head<tail) {\n\t\tt=d[head];\n\t\thead++;\n\t\tfor(register int i=first[t]; i; i=k[i].next) {\n\t\t\tif(dis[kar]==0&&k[i].flow>0) {\n\t\t\t\tdis[kar]=dis[t]+1;\n\t\t\t\tif(kar==b) return true;\n\t\t\t\td[tail]=kar;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint dfs(int xx,int flow) {\n\tif(xx==b) return flow;\n\tif(flow==0) return 0;\n\tif(dis[xx]>=dis[b])return 0;\n\tint h,s=0;\n\tfor(register int i=first[xx]; i>1; i=k[i].next) {\n\t\tif(flow==0) {\n\t\t\tdis[xx]=0;\n\t\t\tbreak;\n\t\t}\n\t\tif(dis[kar]==dis[xx]+1&&k[i].flow>0) {\n\t\t\th=dfs(kar,min(flow,k[i].flow));\n\t\t\ts+=h;\n\t\t\tflow-=h;\n\t\t\tk[i].flow-=h;\n\t\t\tk[i^1].flow+=h;\n\t\t\tif(h==0) dis[kar]=0;\n\t\t}\n\t}\n\treturn s;\n}\nvoid dinic() {\n\tfor(register int i=0; i<=n; i++) {\n\t\tdis[i]=0;\n\t\tfirst[i]=0;\n\t}\n\tlen=1,ans=0;\n\tfor(register int i=1; i<=m; i++)\n\t\tadd(x[i],y[i],f[i]),add(y[i],x[i],f[i]);\n\twhile(bfs()) ans+=dfs(a,0x7ffffff);\n}\nvoid build(int l,int r) {\n\tif(l>=r)return;\n\ta=v[l];\n\tb=v[l+1];\n\tdinic();\n\tadtr(a,b,ans);\n\tadtr(b,a,ans);\n\tint tl1=0,tl2=0;\n\tfor(register int i=l; i<=r; i++) {\n\t\tif(dis[v[i]]) tl1++,t1[tl1]=v[i];\n\t\telse tl2++,t2[tl2]=v[i];\n\t}\n\tfor(register int i=1; i<=tl1; i++) v[i+l-1]=t1[i];\n\tfor(register int i=1; i<=tl2; i++) v[l+tl1+i-1]=t2[i];\n\tbuild(l,tl1+l-1);\n\tbuild(l+tl1,r);\n}\nint findans() {\n\thead=0,tail=1;\n\td[head]=a;\n\tfor(register int i=0; i<=n; i++) dis[i]=0;\n\tdis[a]=0x7ffffff;\n\twhile(head<tail) {\n\t\tt=d[head];\n\t\thead++;\n\t\tfor(register int i=trf[t]; i; i=tr[i].next) {\n\t\t\tif(dis[trar]==0) {\n\t\t\t\tdis[trar]=min(dis[t],tr[i].flow+1);\n\t\t\t\tif(trar==b) return dis[b]-1;\n\t\t\t\td[tail]=trar;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[b]-1;\n}\nint main() {\n\tint T;\n\tlen=1;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1; i<=m; i++) {\n\t\tscanf(\"%d%d%d\",&a,&b,&t);\n\t\tx[i]=a,y[i]=b,f[i]=t;\n\t}\n\tfor(register int i=0; i<=n; i++) v[i]=i;\n\tbuild(0,n);\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tprintf(\"%d\\n\",findans());\n\t}\n\treturn 0;\n}\n```\n\u597d\u4e86\uff0c\u5230\u6b64\u7ed3\u675f\u4e86\uff08\u9003\uff09\u3002",
        "postTime": 1573726901,
        "uid": 99506,
        "name": "_LHF_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4897 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\u3011"
    },
    {
        "content": "Upd on 2023.3.1\uff1a\u4e9b\u8bb8\u8865\u5145\u548c\u4fee\u590d\u3002\n\nUpd on 2023.5.2\uff1a\u4e3a\u4e86\u65b9\u4fbf\u68c0\u6d4b Gomory-Hu \u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u9020\u4e86\u4e00\u9053[\u677f\u5b50](/problem/U278541)\u3002\n\n\u524d\u8a00\uff1a\u5f88\u96be\u76f8\u4fe1 Gomory-Hu Tree \u7684\u677f\u5b50\u9898\u6ca1\u4eba\u5199 Gomory-Hu \u7b97\u6cd5\u7684\u9898\u89e3\u3002~~\u4e0d\u8fc7\u8bdd\u8bf4\u56de\u6765\u8fd9\u9898\u4e5f\u6ca1\u5fc5\u8981\u7528 Gomory-Hu Tree\u3002~~\n\n\u5199\u4e2a\u66f4\u6613\u61c2\uff08\u4e5f\u8bb8\uff1f\uff09\u7684 Gomory-Hu \u7b97\u6cd5\u7684\u7c97\u7565\u8bc1\u660e\u653e\u8fd9\u91cc\u3002\u4e0d\u592a\u6e05\u6670\uff08\u6bd5\u7adf\u672c\u4eba\u4e5f\u4e0d\u600e\u4e48\u61c2\uff09\uff0c\u82e5\u9700\u8981\u597d\u4e00\u70b9\u7684\u8bf7\u53c2\u89c1\u53c2\u8003\u6587\u732e[2]\u3002\n\n\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\uff0c\u6ee1\u8db3\u539f\u56fe\u4e0a\u7684\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u5272\u5927\u5c0f\u548c\u65b9\u6848\u6b63\u597d\u6709\u4e00\u79cd\u662f\u6811\u4e0a\u5bf9\u5e94\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u5272\u5927\u5c0f\u548c\u65b9\u6848\u3002\n\n\u4e0b\u9762\u5b9a\u4e49\uff1a\u56fe $G=(V,E)$\uff0c$V$ \u4e3a\u70b9\u96c6\uff0c$E$ \u4e3a\u8fb9\u96c6\uff0c$\\lambda(x,y)$ \u8868\u793a $x,y$ \u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u3002\n### Lemma 1\n\u4efb\u53d6\u4e09\u70b9 $a,b,c$\uff0c\u6709 $\\lambda(a,b)\\ge\\min(\\lambda(a,c),\\lambda(c,b))$\u3002\n>\u8bc1\u660e\uff1a\u8003\u8651 $a,b,c$ \u4e4b\u95f4\u7684\u5272\uff1a\u8bbe\u5207\u65ad $a\\leftrightarrow b$ \u548c $a\\leftrightarrow c$ \u7684\u6700\u5c0f\u7684\u5272\u6743\u503c\u662f $\\alpha$\uff0c\u5207\u65ad $a\\leftrightarrow b$ \u548c $b\\leftrightarrow c$ \u7684\u6700\u5c0f\u7684\u5272\u6743\u503c\u662f $\\beta$\uff0c\u5207\u65ad $a\\leftrightarrow c$ \u548c $b\\leftrightarrow c$ \u7684\u6700\u5c0f\u7684\u5272\u6743\u503c\u662f $\\gamma$\uff0c\u5219\u539f\u5f0f\u5316\u4e3a $\\min(\\alpha,\\beta)\\ge\\min(\\min(\\alpha,\\gamma),\\min(\\beta,\\gamma))$\uff0c\u5f97\u8bc1\u3002\n\n\u7531\u6b64\u53ef\u5f97 $\\lambda(a,b),\\lambda(a,c),\\lambda(b,c)$ \u4e09\u8005\u4e2d\u5fc5\u6709\u4e24\u8005\u76f8\u7b49\uff0c\u4e14\u53e6\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u76f8\u7b49\u7684\u4e24\u8005\u3002\n\n\u7136\u540e\u7acb\u5373\u5f97\u51fa\u4ee5\u4e0b\u63a8\u8bba\uff1a\n#### Corollary 1\n\u5bf9\u4e8e\u4efb\u610f\u4e92\u4e0d\u76f8\u540c\u7684 $k$ \u4e2a\u70b9 $s_1,s_2,\\cdots,s_k\\in V$\uff0c\u6709 $\\lambda(s_1,s_k)\\ge\\min(\\lambda(s_1,s_2),\\lambda(s_2,s_3),\\cdots,\\lambda(s_{k-1},s_k))$\u3002\n### Theorem 1\n\u82e5\u4e00\u68f5\u6811\u7684\u6bcf\u6761\u8fb9\u6ee1\u8db3\u8fb9\u6743\u4e3a\u6700\u5c0f\u5272\u4e14\u5272\u65ad\u6b64\u8fb9\u5206\u51fa\u7684\u70b9\u96c6\u4e0e\u6700\u5c0f\u5272\u5272\u51fa\u7684\u70b9\u96c6\u76f8\u540c\uff0c\u90a3\u4e48\u53d6\u4efb\u610f\u4e24\u70b9 $u,v$\uff0c\u4ee4 $s,t$ \u4e3a $u,v$ \u7684\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\uff0c\u5219 $\\lambda(u,v)=\\lambda(s,t)$\u3002\n>\u8bc1\u660e\uff1a\u6839\u636e\u5f15\u7406 1\uff0c$\\lambda(s,t)\\ge\\lambda(u,v)$\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u6839\u636e\u6b64\u6811\u7684\u5b9a\u4e49\uff0c\u5fc5\u7136 $u,v$ \u7684\u6700\u5c0f\u5272\u53ef\u4ee5\u6210\u4e3a $s,t$ \u7684\u5272\uff0c\u6709 $\\lambda(s,t)\\le\\lambda(u,v)$\u3002\u7efc\u4e0a\u5f97\u8bc1\u3002\n>\n>\u6ce8\uff1a\u6b64\u6811\u5373\u4e3a Gomory-Hu Tree\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u5272 $W$\uff08\u4e00\u8fb9\u7684\u70b9\u7684\u70b9\u96c6\uff09\u7684\u6743\u51fd\u6570 $\\delta(W)$ \u4e3a\u6240\u6709\u6ee1\u8db3\u4e00\u7aef\u70b9\u5728 $W$ \u800c\u53e6\u4e00\u7aef\u70b9\u4e0d\u5728 $W$ \u7684\u8fb9\u7684\u8fb9\u6743\u548c\u3002\n### Lemma 2.1\n$\\delta(W)$ \u662f\u5bf9\u79f0\u51fd\u6570\uff0c\u4ea6\u5373\uff0c$\\delta(W)=\\delta(V-W)$\u3002\n>\u8bc1\u660e\uff1a\u663e\u7136\u5272\u4e24\u4fa7\u70b9\u96c6\u7684\u6743\u76f8\u7b49\u3002\n\n### Lemma 2.2\n$\\delta(W)$ \u6ee1\u8db3 submodular\uff0c\u4ea6\u5373\uff0c$\\delta(A)+\\delta(B)\\ge\\delta(A\\cap B)+\\delta(A\\cup B)$\u3002\n>\u8bc1\u660e\uff1a\u753b\u51fa Venn \u56fe\u6613\u8bc1\u3002\n\n### Lemma 2.3\n$\\delta(W)$ \u6ee1\u8db3 posi-modular\uff0c\u4ea6\u5373\uff0c$\\delta(A)+\\delta(B)\\ge\\delta(A-B)+\\delta(B-A)$\u3002\n>\u8bc1\u660e\uff1a\u6839\u636e\u5f15\u7406 2.1 \u548c\u5f15\u7406 2.2\uff1a\n>$$\\begin{aligned}\\delta(A)+\\delta(B)&=\\delta(V-A)+\\delta(B)\\\\&\\ge\\delta((V-A)\\cap B)+\\delta((V-A)\\cup B)\\\\&=\\delta(B-A)+\\delta(V-(A-B))\\\\&=\\delta(B-A)+\\delta(A-B)\\end{aligned}$$\n\n### Key Lemma\n\u4ee4 $W$ \u4e3a $s,t$ \u4e4b\u95f4\u7684\u4e00\u4e2a\u6700\u5c0f\u5272\u4e00\u4fa7\u7684\u70b9\u96c6\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u70b9\u5bf9 $u,v\\in W,u\\ne v$\uff0c\u5b58\u5728 $u,v$ \u95f4\u7684\u4e00\u4e2a\u6700\u5c0f\u5272\u4e00\u4fa7\u7684\u70b9\u96c6 $X$ \u4f7f\u5f97 $X\\subseteq W$\u3002\n>\u8bc1\u660e\uff1a\u5047\u8bbe $s\\in W,s\\in X,u\\in X$\uff0c\u4e14 $X$ \u4e0d\u662f $W$ \u7684\u5b50\u96c6\u3002\n>\n>1. $t\\notin X$\u3002\u6839\u636e\u5f15\u7406 2.2 \u7684 submodular \u6027\u8d28\uff0c$\\delta(X)+\\delta(W)\\ge\\delta(X\\cap W)+\\delta(X\\cup W)$\u3002\u53e6\u4e00\u65b9\u9762\uff0c$X\\cap W$ \u662f\u4e00\u4e2a $u,v$ \u95f4\u7684\u5272\uff0c\u6240\u4ee5 $\\delta(X\\cap W)\\ge\\delta(X)$\uff1b\u540c\u7406 $\\delta(X\\cup W)\\ge\\delta(W)$\u3002\u7531\u6b64\u53ef\u5f97\u4ee5\u4e0a\u5747\u53d6\u7b49\u53f7\uff0c\u5219 $X\\cap W$ \u540c\u6837\u662f $u,v$ \u6700\u5c0f\u5272\u4e14\u6ee1\u8db3\u5176\u4e3a $W$ \u7684\u5b50\u96c6\u3002\n>1. $t\\in X$\u3002\u6839\u636e\u5f15\u7406 2.3 \u7684 posi-modular \u6027\u8d28\uff0c$\\delta(X)+\\delta(W)\\ge\\delta(X-W)+\\delta(W-X)$\uff0c\u540c\u4e0a\u53ef\u5f97 $W-X$ \u662f $u,v$ \u95f4\u7684\u6700\u5c0f\u5272\u4e14\u6ee1\u8db3\u5176\u4e3a $W$ \u7684\u5b50\u96c6\u3002\n\n\u7531 Key Lemma \u53ef\u4ee5\u53d1\u73b0\u6700\u5c0f\u5272\u53ef\u4ee5\u4e92\u4e0d\u4ea4\u53c9\uff0c\u8fd9\u662f Gomory-Hu Tree \u5b58\u5728\u7684\u57fa\u7840\u3002\n### Gomory-Hu \u7b97\u6cd5\n\u4ee5\u4e0b\u662f\u53c2\u8003\u6587\u732e[1]\u7ed9\u51fa\u7684\u5b9e\u73b0\uff1a\uff08\u4f20\u5165\u7684 $G$ \u662f\u56fe\uff0c$R$ \u662f\u70b9\u96c6\uff0c\u8fd4\u56de\u7684 $T$ \u662f\u6811\uff0c$C_r$ \u662f\u5212\u5206\uff09\n$$\n\\begin{aligned}\n&\\underline\\text{{\\bf function} GomoryHuAlg(G,R)\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad\\qquad}\\\\\n&\\textbf{if }|R|=1\\textbf{ then}\\\\\n&\\quad\\textbf{return }T=(R,\\varnothing),C_r=V\\\\\n&\\textbf{else}\\\\\n&\\quad\\text{\u4ee4 }r_1,r_2\\in R,r_1\\ne r_2,\\text{\u4e14\u4ee4 }W\\text{ \u4e3a }r_1,r_2\\text{ \u6700\u5c0f\u5272\u4e00\u4fa7\u7684\u70b9\u96c6},r_1\\in W\\\\\n\\\\\n&\\quad\\langle\\text{\u521b\u5efa\u4e24\u4e2a\u5b50\u95ee\u9898}\\rangle\\\\\n&\\quad G_1=G\\text{ \u628a }V-W\\text{ \u7f29\u6210\u4e00\u4e2a\u70b9 }v_1;R_1=R\\cap W\\\\\n&\\quad G_2=G\\text{ \u628a }W\\text{ \u7f29\u6210\u4e00\u4e2a\u70b9 }v_2;R_2=R-W\\\\\n\\\\\n&\\quad\\langle\\text{\u73b0\u5728\u9012\u5f52}\\rangle\\\\\n&\\quad T_1,(C^1_r|r\\in R_1)=\\operatorname{GomoryHuAlg}(G_1,R_1)\\\\\n&\\quad T_2,(C^2_r|r\\in R_2)=\\operatorname{GomoryHuAlg}(G_2,R_2)\\\\\n\\\\\n&\\quad\\langle\\text{\u6ce8\u610f }r',r''\\text{ {\\bf\u4e0d\u4e00\u5b9a}\u662f }r_1,r_2\\text{\uff01}\\rangle\\\\\n&\\quad\\text{\u4ee4 }r'\\text{ \u4e3a\u6ee1\u8db3 }v_1\\in C^1_{r'}\\text{ \u7684\u70b9}\\\\\n&\\quad\\text{\u4ee4 }r''\\text{ \u4e3a\u6ee1\u8db3 }v_2\\in C^2_{r''}\\text{ \u7684\u70b9}\\\\\n\\\\\n&\\quad\\langle\\text{\u73b0\u5728\u5408\u5e76\uff0c\u5e76\u628a }v_1,v_2\\text{ \u4ece\u5212\u5206\u4e2d\u53bb\u9664}\\rangle\\\\\n&\\quad T=(R_1\\cup R_2,E_{T_1}\\cup E_{T_2}\\cup\\{r'-r''\\})\\qquad\\text{\u6ce8\uff1a\u6b64\u5904\u7684 }R_1\\cup R_2\\text{ \u5c31\u662f }R\\\\\n&\\quad\\textbf{for }r\\in R_1,r\\ne r',C_r=C^1_r\\\\\n&\\quad\\textbf{for }r\\in R_2,r\\ne r'',C_r=C^2_r\\\\\n&\\quad C_{r'}=C_{r'}-\\{v_1\\}\\\\\n&\\quad C_{r''}=C_{r''}-\\{v_2\\}\\\\\n&\\quad\\textbf{return }T,C_r\\\\\n&\\textbf{end if}\n\\end{aligned}\n$$\n### Theorem 2\n\u4e0a\u8ff0\u7b97\u6cd5\u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u7684\u65e0\u5411\u975e\u8d1f\u6743\u56fe $G=(V,E)$\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u539f\u56fe\u7684 Gomory-Hu Tree\u3002\n>\u8bc1\u660e\uff1a\u4f7f\u7528\u5f52\u7eb3\u6cd5\uff0c\u9996\u5148\u5f53 $|V|=1$ \u65f6\u6811\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u4e00\u70b9\uff0c\u56e0\u6b64\u7b26\u5408\u8981\u6c42\uff0c\u63a5\u4e0b\u6765\u8003\u8651 $|V|>1$ \u7684\u60c5\u51b5\u3002\n>\n>\u9996\u5148\u5212\u5206\u7136\u540e\u9012\u5f52\uff0c\u9012\u5f52\u540e\u8fd4\u56de\u4e86\u4e24\u4e2a\u5b50\u56fe\u7684 Gomory-Hu Tree\uff0c\u6839\u636e Key Lemma\uff0c\u5176\u4ed6\u7684\u4e0d\u7528\u7ba1\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5f71\u54cd\uff0c\u4e8e\u662f\u8bc1\u660e\u52a0\u4e0a\u53bb\u7684\u90a3\u6761\u8fb9\u5408\u6cd5\u5373\u53ef\uff0c\u4e5f\u5c31\u662f $\\lambda(r_1,r_2)=\\lambda(r',r'')$\u3002\n>\n>\u53ef\u4ee5\u53d1\u73b0 $r_1,r_2$ \u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u4e00\u5b9a\u662f $r',r''$ \u4e4b\u95f4\u7684\u5272\uff0c\u6240\u4ee5\u6211\u4eec\u6709 $\\lambda(r_1,r_2)\\ge\\lambda(r',r'')$\u3002\u5206\u6790\u7f29\u4e86\u70b9\u7684\u56fe\uff0c\u53ef\u4ee5\u5f97\u5230 $\\lambda(r_1,r')\\ge\\lambda(r_1,r_2)$ \u4ee5\u53ca $\\lambda(r'',r_2)\\ge\\lambda(r_1,r_2)$\u3002\n>\n>\u6240\u4ee5\u6839\u636e\u5f15\u7406 1\uff0c$\\lambda(r',r'')\\ge\\min(\\lambda(r',r_1),\\lambda(r_1,r_2),\\lambda(r_2,r''))=\\lambda(r_1,r_2)$\uff0c\u800c\u524d\u9762\u5df2\u7ecf\u5f97\u5230 $\\lambda(r_1,r_2)\\ge\\lambda(r',r'')$\uff0c\u7efc\u4e0a\u8bc1\u6bd5\u3002\n\n\u6240\u4ee5\u5f88\u5feb\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u63a8\u8bba\uff1a\n#### Corollary 2\n\u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u7684\u65e0\u5411\u975e\u8d1f\u6743\u56fe $G=(V,E)$\uff0cGomory-Hu \u7b97\u6cd5\u4f1a\u6b63\u597d\u6267\u884c $|V|-1$ \u6b21\u6c42\u6700\u5c0f\u5272\u3002\n\n---\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u5177\u4f53\u5b9e\u73b0 Gomory-Hu \u7b97\u6cd5\u65f6\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5168\u5c40\u7684\u56fe\u548c\u4e00\u4e2a\u6620\u5c04\u6765\u6a21\u62df\u7f29\u70b9\uff0c\u4f20\u5165\u4e00\u4e2a\u8bb0\u5f55\u70b9\u96c6\u7684 `std::vector<int>`\uff0c\u7528\u5168\u5c40 `bool[][]` \u8bb0\u5f55\u5212\u5206\uff0c\u7528\u5168\u5c40\u7684 `std::vector<std::pair<std::pair<int,int>,int>>` \u8bb0\u5f55\u6811\u8fb9\u96c6\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u9898\u89e3\u7684 Gusfield \u7b97\u6cd5\u548c Gomory-Hu \u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u9664\u4e86\u8fde\u8fb9\u65f6\u76f4\u63a5\u5728\u6c42\u6700\u5c0f\u5272\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u800c\u4e14\u65e0\u9700\u7f29\u70b9\u3002\u540c\u6837\u53ef\u4ee5\u8bc1\u660e Gusfield \u7b97\u6cd5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7b49\u4ef7\u6d41\u6811\uff08equivalent flow tree\uff09\uff0c\u6ee1\u8db3\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5927\u6d41\u5373\u4e3a\u6811\u4e0a\u4e24\u70b9\u7684\u6700\u5927\u6d41\u3002\n\n\u6ce8 1\uff1a\u53c2\u8003\u6587\u732e[2]\u7ed9\u51fa\u4e86\u4e24\u79cd\u7b97\u6cd5\u7684\u975e\u9012\u5f52\u5f62\u5f0f\uff0c\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\u3002\u5927\u610f\u5c31\u662f\u53cd\u6b63\u662f\u62c6\u5206\u70b9\u96c6\uff0c\u53ef\u4ee5\u7528\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6ca1\u6709\u62c6\u5206\u5b8c\u5168\u7684\u70b9\u96c6\u8fdb\u884c\u62c6\u5206\u3002\u4ee3\u7801\u96be\u5ea6\u7565\u4f4e\u4e8e\u9012\u5f52\u5f62\u5f0f\u3002\n\n\u6ce8 2\uff1a\u663e\u7136 Gusfield \u6bd4 Gomory-Hu \u597d\u5199\u800c\u4e14\u8fd9\u9053\u9898\u4e0d\u8981\u6c42\u65b9\u6848\u3002~~\u4f46\u8fd9\u4e0d\u662f Gomory-Hu \u677f\u5b50\u6ca1\u4eba\u7528 Gomory-Hu \u5199\u7684\u7406\u7531\u3002~~\n\n\u4e0b\u9762\u662f Gomory-Hu \u7b97\u6cd5\u7684\u57fa\u4e8e SAP \u7684\u5b9e\u73b0\uff0c\u8bed\u8a00\u4e3a C++14\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2+n\\tau)$\uff0c\u5176\u4e2d $\\tau$ \u662f\u6c42\u4e00\u6b21\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4f7f\u7528\u4e86\u5f88\u591a `std::vector::emplace_back()` \u770b\u4f3c\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u5b9e\u9645\u4e0a\u56e0\u4e3a\u7f29\u70b9\u7684\u7f18\u6545\u901f\u5ea6\u548c Gusfield \u5dee\u4e0d\u591a\u5feb\uff0c\u751a\u81f3\u66f4\u5feb\u3002\n```cpp\n#include<assert.h>\n#include<stdio.h>\n#include<stdlib.h>\n#include<vector>\nconst int N=2001,M=100001;\nbool vis[N],C[N][N];\nint f,s,t,len,las[N],nex[M],en[M],vol[M],he,ta,q[N],dis[N],cnt[N],maxfl,sh[N],fa[N],ans[N][N];\n#define addedg(e,d,g) (nex[len]=las[e],las[e]=len,en[len]=d,vol[len++]=g)\n#define addfl(e,d,g) (addedg(e,d,g),addedg(d,e,g))\nstd::vector<int>rs[N];\nstd::vector<std::pair<std::pair<int,int>,int>>T;\nbool bfs()\n{\n\tint x;\n\tfor(int i=he=ta=0;i<f;i++)\n\t\tvis[sh[i]]=0,cnt[sh[i]]=dis[sh[i]]=0;\n\tvis[q[ta++]=sh[t]]=1,dis[sh[t]]=0;\n\twhile(he<ta)\n\t{\n\t\tcnt[dis[x=q[he++]]]++;\n\t\tfor(int _:rs[x])\n\t\t\tfor(int i=las[_];~i;i=nex[i])\n\t\t\t\tif(!vis[sh[en[i]]])\n\t\t\t\t\tvis[sh[en[i]]]=1,dis[sh[en[i]]]=dis[x]+1,q[ta++]=sh[en[i]];\n\t}\n\tassert(sh[s]!=sh[t]);\n\treturn vis[sh[s]];\n}\nint dfs(int x,int fl)\n{\n\tif(x==sh[t])\n\t\treturn maxfl+=fl,fl;\n\tint d=0;\n\tfor(int _:rs[x])\n\t\tfor(int i=las[_],j;~i;i=nex[i])\n\t\t\tif(vol[i]&&dis[sh[en[i]]]==dis[x]-1)\n\t\t\t{\n\t\t\t\td+=j=dfs(sh[en[i]],vol[i]<fl-d?vol[i]:fl-d),vol[i]-=j,vol[i^1]+=j;\n\t\t\t\tif(d==fl)\n\t\t\t\t\treturn d;\n\t\t\t}\n\tcnt[dis[x]]--;\n\tif(!cnt[dis[x]])\n\t\tdis[sh[s]]=f;\n\treturn cnt[++dis[x]]++,d;\n}\nvoid tag(int x)\n{\n\tvis[x]=1;\n\tfor(int _:rs[x])\n\t\tfor(int i=las[_];~i;i=nex[i])\n\t\t\tif(vol[i^1]&&!vis[sh[en[i]]])\n\t\t\t\ttag(sh[en[i]]);\n\treturn;\n}\nint mf(int S,int T)\n{\n\ts=S,t=T;\n\tfor(int i=maxfl=0;i<len;i+=2)\n\t\tvol[i]=vol[i^1]=vol[i]+vol[i^1]>>1;\n\tif(bfs())\n\t\twhile(dis[sh[s]]<f)\n\t\t\tdfs(sh[s],1000000000);\n\tfor(int i=0;i<f;i++)\n\t\tvis[sh[i]]=0;\n\treturn tag(sh[t]),maxfl;\n}\nvoid GomoryHu(const std::vector<int>&R)\n{\n\tif(R.size()==1)\n\t{\n\t\tfor(int i=0;i<f;i++)\n\t\t\tC[R[0]][sh[i]]=1;\n\t\treturn;\n\t}\n\tstd::vector<int>R1,R2;\n\tbool v[N];\n\tint r1=R[0],r2=R[1],d=mf(r1,r2),tmp[N],rp,rpp;\n\tfor(int i=0;i<f;i++)\n\t\ttmp[i]=-1,v[i]=vis[i];\n\tfor(int i:R)\n\t\tif(vis[sh[i]])\n\t\t\tR2.emplace_back(i);\n\t\telse\n\t\t\tR1.emplace_back(i);\n\tfor(int i=0,k;i<f;i++)\n\t\tif(v[k=sh[i]]&&k!=r2)\n\t\t\tfor(int j=rs[k].size()-1;~j;j--)\n\t\t\t\ttmp[rs[k][j]]=sh[rs[k][j]],sh[rs[k][j]]=r2;\n\tfor(int i=0;i<f;i++)\n\t\trs[i].clear();\n\tfor(int i=0;i<f;i++)\n\t\trs[sh[i]].emplace_back(i);\n\tGomoryHu(R1);\n\tfor(int i=0;i<f;i++)\n\t\tif(~tmp[i])\n\t\t\tsh[i]=tmp[i],tmp[i]=-1;\n\tfor(int i=0;i<f;i++)\n\t\trs[i].clear();\n\tfor(int i=0;i<f;i++)\n\t\trs[sh[i]].emplace_back(i);\n\tfor(int i=0,k;i<f;i++)\n\t\tif(!v[k=sh[i]]&&k!=r1)\n\t\t\tfor(int j=rs[k].size()-1;~j;j--)\n\t\t\t\ttmp[rs[k][j]]=sh[rs[k][j]],sh[rs[k][j]]=r1;\n\tfor(int i=0;i<f;i++)\n\t\trs[i].clear();\n\tfor(int i=0;i<f;i++)\n\t\trs[sh[i]].emplace_back(i);\n\tGomoryHu(R2);\n\tfor(int i=0;i<f;i++)\n\t\tif(~tmp[i])\n\t\t\tsh[i]=tmp[i];\n\tfor(int i=0;i<f;i++)\n\t\trs[i].clear();\n\tfor(int i=0;i<f;i++)\n\t\trs[sh[i]].emplace_back(i);\n\tfor(int i:R1)\n\t\tif(C[i][r2])\n\t\t{\n\t\t\trp=i,C[i][r2]=0;\n\t\t\tbreak;\n\t\t}\n\tfor(int i:R2)\n\t\tif(C[i][r1])\n\t\t{\n\t\t\trpp=i,C[i][r1]=0;\n\t\t\tbreak;\n\t\t}\n\tT.emplace_back(std::make_pair(rp,rpp),d);\n\treturn;\n}\nvoid getans(int x,int y)\n{\n\tfor(int i=las[y];~i;i=nex[i])\n\t\tif(en[i]!=fa[y])\n\t\t\tfa[en[i]]=y,ans[x][en[i]]=(ans[x][y]<vol[i]?ans[x][y]:vol[i]),getans(x,en[i]);\n\treturn;\n}\nint main()\n{\n\tint n,m,q,u,v,w;\n\tstd::vector<int>R;\n\tscanf(\"%d%d\",&n,&m),f=n+1;\n\tfor(int i=0;i<f;i++)\n\t\tlas[i]=-1,R.emplace_back(i),sh[i]=i,rs[i].emplace_back(i);\n\twhile(m--)\n\t\tscanf(\"%d%d%d\",&u,&v,&w),addfl(u,v,w);\n\tGomoryHu(R);\n\tfor(int i=len=0;i<f;i++)\n\t\tlas[i]=-1;\n\tfor(auto j:T)\n\t\taddfl(j.first.first,j.first.second,j.second);\n\tfor(int i=0;i<f;i++)\n\t\tfa[i]=-1,ans[i][i]=1e9,getans(i,i);\n\tscanf(\"%d\",&q);\n\twhile(q--)\n\t\tscanf(\"%d%d\",&u,&v),printf(\"%d\\n\",ans[u][v]);\n\treturn 0;\n}\n```\n### \u53c2\u8003\u6587\u732e\n1. <https://courses.engr.illinois.edu/cs598csc/sp2010/Lectures/Lecture6.pdf>\n1. \u300a\u6d45\u8c08\u65e0\u5411\u56fe\u6700\u5c0f\u5272\u95ee\u9898\u7684\u4e00\u4e9b\u7b97\u6cd5\u53ca\u5e94\u7528\u300b\uff08\u7ecd\u5174\u4e00\u4e2d\u738b\u6587\u6d9b\uff0c[2016 \u5e74\u56fd\u96c6\u8bba\u6587](https://github.com/OI-wiki/libs/blob/master/%E9%9B%86%E8%AE%AD%E9%98%9F%E5%8E%86%E5%B9%B4%E8%AE%BA%E6%96%87/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2016%E8%AE%BA%E6%96%87%E9%9B%86.pdf)\uff09",
        "postTime": 1675008412,
        "uid": 335096,
        "name": "Eznibuil",
        "ccfLevel": 7,
        "title": "\u9898\u89e3\uff1aP4897 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09"
    },
    {
        "content": "\u9996\u5148\u660e\u786e\u6700\u5c0f\u5272\u6811\u7684\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4efb\u610f\u6811\u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u5220\u9664\u56fe\u4e0a\u7684\u70b9 $u,v$\uff0c\u6811\u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u4e4b\u540e\uff0c\u56fe\u4f1a\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5728\u6811\u4e0a\u4e0e $u$ \u8fde\u901a\uff0c\u53e6\u4e00\u90e8\u5206\u5728\u6811\u4e0a\u4e0e $v$ \u8fde\u901a\uff0c\u6811\u4e0a\u8fb9 $(u,v)$ \u7684\u8fb9\u6743\u4e3a\u56fe\u4e0a $u,v$ \u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u3002\n\n\u540c\u65f6\uff0c\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u662f\u5b83\u4eec\u7684\u6811\u4e0a\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\u3002\n\n\u4e8e\u662f\uff0c\u53ea\u8981\u5c06\u6811\u5efa\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u67e5\u8be2\u6700\u5c0f\u5272\u5566\uff01\n\n\u95ee\u9898\u6765\u4e86\uff1a\u600e\u4e48\u5efa\u6811\uff1f\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6700\u5c0f\u5272\u6811\u7684\u6027\u8d28\u544a\u8bc9\u6211\u4eec\uff0c\u5176\u5b9e\u53ea\u8981\u4e0d\u65ad\u52a0\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u505a\u6cd5\u662f\uff1a\n\n1. \u5b9a\u4e49 $solve(l,r)$ \u4e3a\u5c06\u533a\u95f4 $[l,r]$\u7684\u8282\u70b9\u5efa\u6811\uff1b\n2. \u6c42\u51fa $MinCut(a_l,a_r)$\uff1b\n3. \u5224\u65ad $[l,r]$ \u4e2d\u90a3\u4e9b\u70b9\u4e0e $a_l$ \u8fde\u901a\uff0c\u90a3\u4e9b\u70b9\u4e0e $a_r$ \u8fde\u901a\uff0c\u5e76\u5c06\u5176\u5212\u5206\u4e3a $[l,lc],[rc,r]$\uff0c\u53ef\u4ee5\u7528\u6700\u540e\u4e00\u6b21\u5e7f\u641c\u8282\u70b9\u662f\u5426\u88ab\u641c\u5230\u4e3a\u6807\u51c6\u5224\u65ad\uff1b\n4. \u9012\u5f52\uff1a$solve(l,lc),solve(rc,r)$\uff1b\n5. $n$ \u904d\u6df1\u641c\u6c42\u51fa\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u7136\u540e\u67e5\u8be2\u5c31\u53ef\u4ee5\u5566\uff01\n\n## $~~~~~~~~~~~~~~~~ code$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=505,M=3005;\nchar buf[M+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n\tint an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n\tdo an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n}\nint a[N],b[N],d[N],n,m,s,t,Q,q[N],l,r;\nvector<int>lk[N];\nint w[M],ed[M],cnt,now[N];\nstruct Eg{int u,v,w;}g[N];\nint ans[N][N],*add;\ninline bool bfs(){\n\tint i,x,y;\n\tfor(i=1;i<=n;++i)now[i]=d[i]=0;\n\tq[l=r=d[s]=1]=s;\n\twhile(l<=r){\n\t\tx=q[l++];\n\t\tfor(int i:lk[x])\n\t\t\tif(w[i]&&!d[y=ed[i]]){\n\t\t\t\td[q[++r]=y]=d[x]+1;\n\t\t\t\tif(y==t)return 1;\n\t\t\t}\n\t}return 0;\n}\nint Dinic(int x,int flow){\n\tif(x==t)return flow;int i,y,k,rest=flow;\n\tfor(int &g=now[x],sz=lk[x].size();g<sz;++g)\n\t\tif(w[i=lk[x][g]]&&d[y=ed[i]]==d[x]+1)\n\t\t\tif(k=Dinic(y,min(w[i],rest))){\n\t\t\t\tw[i]-=k,w[i^1]+=k;\n\t\t\t\tif(!(rest-=k))return flow;\n\t\t\t}\n\td[x]=0;\n\treturn flow-rest;\n}\ninline void solve(int l,int r){\n\tif(l>=r)return;int i,lc=l-1,rc=r+1;\n\ts=a[l],t=a[r],g[++cnt]={a[l],a[r]};\n\twhile(bfs())g[cnt].w+=Dinic(s,INT_MAX);\n\tfor(i=l;i<=r;++i)\n\t\tif(d[a[i]])b[++lc]=a[i];\n\t\telse b[--rc]=a[i];\n\tfor(i=l;i<=r;++i)a[i]=b[i];\n\tfor(i=1;i<=m;++i){\n\t\tw[i+i]+=(w[i+i+1]-w[i+i])>>1;\n\t\tw[i+i+1]=w[i+i];\n\t}solve(l,lc),solve(rc,r);\n}\nvoid dfs(int x,int ad,int pr){\n\tadd[x]=ad;int y;\n\tfor(int i:lk[x])\n\t\tif((y=ed[i])!=pr)\n\t\t\tdfs(y,min(ad,w[i]),x);\n}\nint main(){\n\tn=read()+1,m=read();int i,x,y;\n\tfor(i=1;i<=m;++i){\n\t\tx=read()+1,y=read()+1;\n\t\tw[i+i]=w[i+i+1]=read();\n\t\ted[i+i]=x,lk[y].push_back(i+i);\n\t\ted[i+i+1]=y,lk[x].push_back(i+i+1);\n\t}\n\tfor(i=1;i<=n;++i)a[i]=i;\n\tsolve(1,n);\n\tfor(i=1;i<=n;++i)lk[i].clear();\n\tfor(i=1;i<=cnt;++i){\n\t\tw[i+i]=w[i+i+1]=g[i].w;\n\t\ted[i+i]=g[i].v,lk[g[i].u].push_back(i+i);\n\t\ted[i+i+1]=g[i].u,lk[g[i].v].push_back(i+i+1);\n\t}\n\tfor(x=1;x<=n;++x)\n\t\tadd=ans[x],dfs(x,INT_MAX,-1);\n\tQ=read();\n\twhile(Q--)printf(\"%d\\n\",ans[read()+1][read()+1]);\n\treturn 0;\n}\n```",
        "postTime": 1645677981,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u6d45\u8c08\u6700\u5c0f\u5272\u6811"
    },
    {
        "content": "\u627e\u4e2a\u9898\u89e3\u6284\u4e86\u6284 \u5206\u4eab\u4e0b\u601d\u8def\n\n\u524d\u6392\u63d0\u793a \u6211\u5199\u7684\u662f**ISPA+\u500d\u589e** \u5f00\u4e86O2 390ms ~~(\u5f53\u65f6\u8fd8\u662frk1)~~\n\n------------\n\u5173\u4e8e\u7b2c9\u4e2a\u70b9WA \u6211\u5f53\u65f6\u627e\u4e86\u5927\u534a\u5929BUG \u6ca1\u627e\u5230... \u540e\u6765\u628a\n\n```\nfor(register int i=1;i<=n;++i) cur[i]=head[i];\n\n```\n\u6539\u6210\n```\nfor(register int i=0;i<=n;++i) cur[i]=head[i];\n\n```\n\u5c31AC\u4e86 \u6240\u4ee5\u8bf4??? \u9ed1\u4eba\u95ee\u53f7.jpg\n\n------------\n\u6211\u4eec\u5148\u770b\u9898\u76ee \u77e5\u9053\u5b83\u8981\u6211\u4eec\u6c42\u7684\u662f\u7ed9\u5b9an\u4e2a\u70b9m\u6761\u8fb9\u7684\u65e0\u5411\u56fe \u95ee\u5bf9\u4e8e\u4e24\u4e2a\u70b9(u,v)\n\n\u5220\u6389\u56fe\u4e2d\u7684\u4e00\u4e9b\u5e26\u6743\u8fb9 \u6c42\u6700\u5c0f\u7684\u80fd\u8ba9\u4e24\u4e2a\u70b9\u4e0d\u8fde\u901a\u7684\u4ee3\u4ef7\n\n\u53ef\u80fd\u4e00\u5f00\u59cb\u770b\u6709\u70b9\u61f5 \u6ca1\u6709\u60f3\u6cd5(\u4e2a\u5c41 \u9898\u76ee\u90fd\u660e\u793a\u4e86)\n\n\u6211\u4eec\u5148\u770b\u7b80\u5316\u7248\u672c\n\n\u5bf9\u4e8e![1](https://cdn.luogu.com.cn/upload/pic/45210.png)\n\n(\u7528\u753b\u56fe\u753b\u7684 \u5c06\u5c31\u7740\u770b\u5427) \n\n\u6211\u4eec\u8981\u6c42(1,4)\u7684\u6700\u5c0f\u5272 \u53ef\u4ee5\u76f4\u63a5\u770b\u51fa\u662f5 \u5bf9\u5427 \u5c31\u662f\u65ad\u8fb9(2,3)\n\n\u90a3\u5bf9\u4e8e![2](https://cdn.luogu.com.cn/upload/pic/45213.png)\n\n\u6211\u4eec\u8981\u6c42(1,8)\u7684\u6700\u5c0f\u5272 \u4ece\u56fe\u4e2d\u770b\u51fa\u662f20+20+10=50 \u5bf9\u5427 \u56e0\u4e3a\u4e09\u6761\u8def\u5f84\u90fd\u8981\u65ad\u6389\u624d\u884c\n\n\u4e8e\u662f\u6211\u4eec\u901a\u8fc7\u4e24\u4e2a\u4f8b\u5b50\n\n\u53ef\u80fd\u5c31\u80fd\u770b\u51fa**\u4e24\u4e2a\u70b9\u7684\u6700\u5c0f\u5272\u5c31\u662f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u6d41**\u4e86\n\n(\u5199\u5230\u8fd9\u91cc\u6211\u624d\u53d1\u73b0\u6211\u5728\u5199\u5e9f\u8bdd)\n\n\u90a3\u6839\u636e\u9898\u610f \u6211\u4eec\u662f\u8981\u6c42Q\u6b21\u4e24\u4e2a\u70b9\u7684\u6700\u5927\u6d41? \u5176\u5b9e\u60f3\u4e00\u60f3\u611f\u89c9\u5c31\u7206\u70b8\u4e86\u662f\u4e0d\u662f\n\n\u90a3\u6211\u4eec\u7ee7\u7eed\u770b\u8fd9\u4e2a\u6817\u5b50 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0(\u795e\u4ed9\u7684\u7075\u5149\u4e00\u95ea)\n\n**\u5bf9\u4e8e(2,8)\u7684\u6700\u5c0f\u5272 \u5c31\u7b49\u4e8e(1,8)\u7684\u6700\u5c0f\u5272**\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3 \u5177\u4f53\u4e0d\u4f1a\u8bc1\u660e...\n\n\u5bf9\u4e8e1-2-3-8 \u5982\u679c\u6700\u5c0f\u5272\u7684\u8fb9\u4e3a(1,2) \u90a31\u548c2\u5c31\u4e0d\u8054\u901a\u4e86\n\n\u56e0\u4e3a\u8fb9(1,2)\u80fd\u901a\u8fc7\u7684\u6d41\u91cf\u51cf\u53bb\u6700\u5c0f\u5272\u540e\u4e3a0\n\n\u800c\u53ea\u8981\u80fd\u8054\u901a \u5c31\u8bf4\u660e\u5b83\u4fe9\u5230\u540c\u4e00\u70b98\u7684\u6700\u5c0f\u5272\u76f8\u7b49\n\n\u57fa\u4e8e\u8fd9\u79cd\u60f3\u6cd5 \u6211\u4eec\u53ef\u4ee5\u628a\u4e0a\u56fe\u8f6c\u5316\u6210\n\n![3](https://cdn.luogu.com.cn/upload/pic/45216.png)\n\n\u7ea2\u6846\u5185\u7684\u70b9\u5230\u84dd\u6846\u5185\u7684\u70b9\u7684\u6700\u5c0f\u5272\u90fd\u662f50\n\n\u90a3\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u540c\u989c\u8272\u7684\u6846\u5185\u7684\u4e24\u4e2a\u70b9\u7684\u6700\u5c0f\u5272\n\n\u5176\u5b9e\u8f6c\u6362\u4e00\u4e0b \u6211\u4eec\u53ea\u9700\u8981\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5**\u5206\u6cbb**\u505a\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e86\n\n\u6bd4\u59826\u52308\u7684\u6700\u5c0f\u5272\u662f30(\u6ce8\u610f\u5728\u56fe\u4e0a1\u548c6\u662f\u76f8\u8fde\u7684 \u5728\u4e0a\u9762\u7684\u56fe\u91cc\u53ea\u662f**\u7701\u7565**\u6389\u4e86)\n\n\u7136\u540e\u4e24\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9 \u4e00\u5171\u5c31\u6709**n-1**\u6761\u8fb9 \u7528\u500d\u589e\u7ef4\u62a4\u4e00\u4e0b\u6700\u5c0f\u503c\u5c31\u884c\n\n\u4e3a\u4ec0\u4e48\u8981\u7528\u500d\u589e\u7ef4\u62a4\u6700\u5c0f\u503c\u5462\n\n\u6bd4\u5982\u6c42(2,8)\u7684\u6700\u5c0f\u5272 \u6211\u4eec\u4ece\u4e0a\u9762\u7684\u56fe\u770b\u5f97\u51fa\u6765\u662f50 \u4f46\u6211\u4eec\u5b9e\u9645\u67e5\u8be2\u7684\u65f6\u5019\n\n**\u5e76\u4e0d\u77e5\u90531,2\u662f\u540c\u4e00\u4e2a\u8054\u901a\u5757 \u800c\u5176\u4ed6\u70b9\u662f\u53e6\u4e00\u4e2a\u8054\u901a\u5757 \u4e14\u4e24\u4e2a\u8054\u901a\u5757\u7684\u6700\u5c0f\u5272\u4e3a50**\n\n**\u6709\u53ef\u80fd1\u662f\u4e00\u4e2a\u8054\u901a\u5757\u800c\u5176\u4ed6\u70b9\u662f\u4e00\u4e2a\u8054\u901a\u5757 \u90a3\u4e48\u6700\u5c0f\u503c\u5c31\u4e0d\u662f(2,8)\u800c\u662f(1,2)\u4e86**\n\n\u6240\u4ee5\u9700\u8981\u6211\u4eec\u7ef4\u62a4\u6700\u5c0f\u503c\n\n------------\n\u90a3\u63a5\u4e0b\u6765\u8bb2\u4e00\u4e0b\u5177\u4f53\u4ee3\u7801\u7684\u5b9e\u73b0\n\n\u9996\u5148\u6211\u4eec\u6b63\u5e38\u5b58\u7f51\u7edc\u6d41\u7684\u56fe \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u591a\u6b21\u4e0d\u540c\u70b9\u95f4\u7684\u6700\u5927\u6d41\n\n\u6240\u4ee5\u6bcf\u6b21\u6c42\u6700\u5927\u6d41\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u5bb9\u91cf\u90fd\u8981**\u66f4\u65b0**\n\n\u6bd4\u5982![4](https://cdn.luogu.com.cn/upload/pic/45218.png)\n\n\u6211\u4eec\u5148\u6c42(1,3)\u7684\u6700\u5c0f\u5272 \u7136\u540e\u4e0d\u91cd\u7f6e \u5c31\u4f1a\u5f97\u5230(1,2)\u7684\u6700\u5c0f\u5272\u4e3a50 \u663e\u7136\u662f\u9519\u7684\n\n\u5bf9\u4e8e\u627e\u8054\u901a\u5757 \u6211\u4eec\u76f4\u63a5**\u66b4\u529bdfs \u6253\u6807\u8bb0**\u5373\u53ef\n\n\u8fd9\u91cc\u8fd8\u7528\u5230\u4e86**\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u6cd5**(\u539f\u6765\u6211\u4e0d\u4f1a\u8fd9\u662f\u5565)\n\n\u6bd4\u5982\u6570\u7ec4a[1,3]\u91cc\u7684\u70b9\u90fd\u662f\u5728\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u7684\n\n\u6211\u4eec\u6c42a[1],a[2]\u7684\u6700\u5c0f\u5272\u540e\u5f97\u5230a[1],a[3]\u5728\u4e00\u4e2a\u8054\u901a\u5757\n\n\u5c31\u7528\u4e00\u4e2atmp\u6570\u7ec4\u628a\u540c\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u7684\u6392\u5728\u5de6\u8fb9\u5c31\u884c\u4e86 \u7136\u540e\u590d\u5236\u56dea\u6570\u7ec4\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427 \u6211\u7684\u8bed\u6587\u592a\u5f31\u4e86\n\n```\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn=6e2;\nconst int maxm=2e3;\nconst int inf=2047483647;\n\nint n,m,q;\n\ninline int read() {\n    int a=0;char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') a=(a<<1)+(a<<3)+c-'0',c=getchar();\n    return a;\n}\n\n//\u5b58\u751f\u6210\u51fa\u6765\u7684\u6811 \nint edgeNum,head[maxn],to[maxm<<1],next[maxm<<1],w[maxm<<1]; \n    \ninline void add(int u,int v,int c) {\n    next[++edgeNum]=head[u];head[u]=edgeNum;\n    to[edgeNum]=v;w[edgeNum]=c;\n}\n\nint cnt,p[maxn],tmp[maxn],S[maxn];\n//cnt\u4ee3\u8868\u73b0\u5728\u662f\u7b2c\u51e0\u4e2a\u8054\u901a\u5757\n//p[i]\u4ee3\u8868\u7b2ci\u4e2a\u70b9\u4e0a\u7684\u70b9\u7684\u7f16\u53f7 \n//tmp\u6570\u7ec4\u7528\u4e8e\u590d\u5236\u6392\u5e8fp\u6570\u7ec4\n//S[u]\u8868\u793au\u5728\u7684\u8054\u901a\u5757\u7f16\u53f7 \n\nstruct GHT {\n    int s,t,maxFlow,cur[maxn];\n    \n    int edgeNum=-1,head[maxn],to[maxm<<1],next[maxm<<1];\n    int w[maxm<<1],f[maxm<<1];\n\t//w[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u53ef\u4ee5\u901a\u8fc7\u7684\u6700\u5927\u6d41\u91cf\n\t//f[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u76ee\u524d\u53ef\u4ee5\u901a\u8fc7\u7684\u6700\u5927\u6d41\u91cf \n    \n    GHT() {memset(head,-1,sizeof(head));}\n    \n    inline void add_edge(int u,int v,int c) {\n        next[++edgeNum]=head[u];head[u]=edgeNum;\n        to[edgeNum]=v;w[edgeNum]=c;\n    }\n    \n    int dep[maxn],gap[maxn];\n    \n    inline void bfs() {\n        memset(dep,0,sizeof(dep));memset(gap,0,sizeof(gap));\n        dep[t]=gap[1]=1;queue<int> Q;Q.push(t);\n        while(!Q.empty()) { int u=Q.front();Q.pop();\n            for(int i=head[u];i!=-1;i=next[i]) if(!dep[to[i]])\n                ++gap[dep[to[i]]=dep[u]+1],Q.push(to[i]);\n        }\n    }\n    \n    int dfs(int u,int lastFlow) {\n        int used=0,minFlow=0;\n        if(u==t) {maxFlow+=lastFlow;return lastFlow;}\n        for(int &i=cur[u];i!=-1;i=next[i]) \n            if(f[i]&&dep[to[i]]+1==dep[u])\n                if(minFlow=dfs(to[i],min(lastFlow-used,f[i])))\n                {\tf[i]-=minFlow;f[i^1]+=minFlow;\n                    if((used+=minFlow)==lastFlow) return used;\n                }\n        if(!(--gap[dep[u]++])) dep[s]=n+1;\n        ++gap[dep[u]];return used;\n    }\n    \n    inline int ISAP(int x,int y) {\n        for(register int i=0;i<=edgeNum;++i) f[i]=w[i];\n        maxFlow=0;s=x;t=y;bfs();while(dep[s]<=n) { //\u6bcf\u6b21ISAP\u90fd\u8981\u521d\u59cb\u5316 \n            for(register int i=0;i<=n;++i) cur[i]=head[i];\n            dfs(s,inf);\n        }return maxFlow;\n    }\n    \n    void dfs(int u) { S[u]=cnt;\n        for(int i=head[u];i!=-1;i=next[i])\n            if(f[i]&&S[to[i]]!=cnt) dfs(to[i]);\n            //\u53ef\u4ee5\u8054\u901a\u5230to[i]\u5e76\u4e14to[i]\u6ca1\u6709\u8bbf\u95ee\u8fc7 \n    }\n    \n    void build(int l,int r) {\n        if(l>=r) return ; //\u53ea\u6709\u4e00\u4e2a\u70b9\u5c31\u9000\u51fa \n        int x=p[l],y=p[l+1],cut=ISAP(x,y),L=l,R=r;\n        ++cnt;dfs(x);add(x,y,cut);add(y,x,cut);\n        //\u627e\u8054\u901a\u5757\u4e0e\u7ed9\u8981\u751f\u6210\u7684\u6811\u8fde\u8fb9 \n        for(register int i=l;i<=r;++i) tmp[S[p[i]]==cnt?L++:R--]=p[i];\n        //\u5728\u627e\u5230\u7684\u8054\u901a\u5757\u91cc\u7684\u70b9\u4ece\u5de6\u653e\u5230\u53f3\u8fb9 \n        //\u4e0d\u5728\u8054\u901a\u5757\u91cc\u7684\u70b9\u4ece\u53f3\u653e\u5230\u5de6\u8fb9\n        for(register int i=l;i<=r;++i) p[i]=tmp[i]; //\u590d\u5236\u56de\u6765\n        build(l,L-1);build(R+1,r);\n        //\u8fb9\u754c\u770b\u770b\u5c31\u61c2\u4e86 \n    }\n}T;\n\nint dep[maxn],fa[maxn][9],Min[maxn][9];\n\nvoid dfs(int u,int fat) {\n    for(register int i=1;i<=8;++i)\n        fa[u][i]=fa[fa[u][i-1]][i-1],\n        Min[u][i]=min(Min[u][i-1],Min[fa[u][i-1]][i-1]);\n    for(int i=head[u];i;i=next[i]) if(to[i]!=fat) {\n        Min[to[i]][0]=w[i];fa[to[i]][0]=u;\n        dep[to[i]]=dep[u]+1;dfs(to[i],u);\n    }\n}\n\ninline int getCut(int x,int y) {\n    int ans=inf;if(dep[x]<dep[y]) x^=y^=x^=y;\n    for(register int i=8;i>=0;--i)\n        if(dep[fa[x][i]]>=dep[y])\n            ans=min(ans,Min[x][i]),x=fa[x][i];\n    if(x!=y) {\n        for(register int i=8;i>=0;--i)\n            if(fa[x][i]!=fa[y][i])\n                ans=min(ans,min(Min[x][i],Min[y][i])),\n                x=fa[x][i],y=fa[y][i];\n        ans=min(ans,min(Min[x][0],Min[y][0]));\n    }return ans;\n}\n\nint main() {\n    n=read();m=read();\n    for(register int i=1;i<=n;++i) p[i]=i;\n    for(register int i=1;i<=m;++i) {\n        int u=read(),v=read(),c=read();\n        T.add_edge(u,v,c);T.add_edge(v,u,c);\n    }T.build(1,n);dep[1]=1;dfs(1,0);q=read();\n    for(register int i=1;i<=q;++i) {\n        int u=read(),v=read();\n        printf(\"%d\\n\",getCut(u,v));\n    }return 0;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1543838377,
        "uid": 64288,
        "name": "\u65cb\u8f6c\u5361\u58f3",
        "ccfLevel": 0,
        "title": "9"
    },
    {
        "content": "\u6709\u4f4d\u795e\u7287\u8bf4\u8fc7\uff1a\u554a\u597d\u7684\uff0c\u5176\u5b9e\u8fd9\u4e2a\u4e0d\u662f\u4ec0\u4e48\u5f88\u96be\u7684\u7b97\u6cd5\n\n\u5728\u56fe\u4e0a\u6bcf\u6b21\u62fd\u4e24\u4e2a\u70b9\uff08\u6e90\u70b9\uff0c\u6c47\u70b9\uff09\u51fa\u6765\uff0c\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\n\n\u8fd9\u65f6\u5019\u6d41\u91cf\u5df2\u7ecf\u8dd1\u6ee1\u7684\u8fb9\u5c06\u6574\u4e2a\u56fe\u5212\u5206\u4e3a\u4e24\u90e8\u5206\n\n\u5728\u65b0\u56fe\u4e0a\u5c06s\u548ct\u8fde\u8d77\u6765\uff0c\u8fb9\u6743\u4e3a\u6700\u5c0f\u5272\n\n\u9012\u5f52\u5904\u7406\u4e24\u90e8\u5206\u56fe\n\n\u67e5\u8be2\u65f6\u8f93\u51fa\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\n\n(\u81f3\u4e8e\u8bc1\u660e\uff0c\u597d\u5427\u8fd9\u5c31\u662fGomory-Hu Tree\u7b97\u6cd5\uff09\n\n\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u7528\u500d\u589e\u8f83\u597d\n\n## \u4f46LCT\u4e5f\u5c31\u4e00\u4e2alog!\n\n\u5177\u4f53\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801\n\n```cpp\n//Code by : Y-k-y\n//\u8fd9\u9053\u9898\u7684\u4e00\u4e2a\u5751\u70b9\u5c31\u662f\u7f51\u7edc\u6d41\u6bcf\u6b21\u8dd1\u4e4b\u524d\u8981\u5148\u9000\u6d41\uff08\u5c31\u662f\u8fd8\u539f\uff09\n//\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u5efa\u8fb9\u65f6\u6b63\u8fb9\u53cd\u8fb9\u90fd\u8981\u6709\u6d41\u91cf\n//\u81ea\u8ba4\u4e3adinic\u677f\u5b50\u6572\u5f97\u8fd8\u53ef\u4ee5 \u3002\u3002\u3002 \n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <set>\n#define ll long long\nconst int N=20010;\nconst int inf=1<<30;\nusing namespace std;\ninline int rnd(){\n\tint res=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){res=res*10+ch-'0';ch=getchar();}\n\treturn res*f;\n}\ninline void wr(int x){\n\tif(x<0){putchar('-');x=-x;}if(x>9) wr(x/10);putchar(x%10+'0');\n}\nint tot=1,s,t,n,m,col,num;\nstruct pp{\n\tint v,nxt,w,up;\n}edge[N];\nint head[N],d[N],a[N],co[N],b[N];\nint fa[N],ch[N][2],rev[N],sta[N],sum[N],val[N];\ninline void add(int u,int v,int w){//\u8bb0\u5f55\u6d41\u91cf \n\tedge[++tot].nxt=head[u],head[u]=tot;\n\tedge[tot].v=u,edge[tot].up=w;\n\tedge[++tot].nxt=head[v],head[v]=tot;\n\tedge[tot].v=u,edge[tot].up=w;\n}\nstruct L_C_T_{//lct\u90e8\u5206\uff1a\u7528\u62c6\u70b9\u6280\u5de7  \n\tinline int get(int x){\n\t\treturn x==ch[fa[x]][1]||x==ch[fa[x]][0];\n\t}\n\tinline int chk(int x){\n\t\treturn x==ch[fa[x]][1];\n\t}\n\tinline void pushup(int x){\n\t\tsum[x]=min(min(sum[ch[x][0]],sum[ch[x][1]]),val[x]);\n\t}\n\tinline void filp(int x){\n\t\tswap(ch[x][0],ch[x][1]);rev[x]^=1;\n\t}\n\tinline void pushdown(int x){\n\t\tif(!rev[x])return;\n\t\tif(ch[x][0])filp(ch[x][0]);\n\t\tif(ch[x][1])filp(ch[x][1]);\n\t\trev[x]=0;\n\t}\n\tinline void zhuan(int x){\n\t\tint y=fa[x],z=fa[y],k=chk(x),w=ch[x][k^1];\n\t\tif(get(y))ch[z][chk(y)]=x;ch[y][k]=w,ch[x][k^1]=y;\n\t\tif(w)fa[w]=y;fa[y]=x,fa[x]=z;\n\t\tpushup(y);pushup(x);\n\t}\n\tinline void splay(int x){\n\t\tint y=x,top=0;sta[++top]=y;\n\t\twhile(get(y))sta[++top]=y=fa[y];\n\t\twhile(top)pushdown(sta[top--]);\n\t\twhile(get(x)){\n\t\t\tint y=fa[x];\n\t\t\tif(get(y))\n\t\t\t\tzhuan(chk(x)==chk(y)?y:x);\n\t\t\tzhuan(x);\n\t\t}\n\t\tpushup(x);\n\t}\n\tinline void Access(int x){\n\t\tfor(int y=0;x;x=fa[y=x]){\n\t\t\tsplay(x);ch[x][1]=y,pushup(x);\n\t\t}\n\t}\n\tinline void makeroot(int x){\n\t\tAccess(x);splay(x);filp(x);\n\t}\n\tinline void split(int x,int y){\n\t\tmakeroot(x);Access(y);splay(y);\n\t}\n\tinline int findroot(int x){\n\t\tAccess(x);splay(x);\n\t\twhile(ch[x][0])pushdown(x),x=ch[x][0];\n\t\treturn x;\n\t}\n\tinline void link(int x,int y){\n\t\tmakeroot(x);if(findroot(y)!=x)fa[x]=y;\n\t}\n}LCT;//LCT\u4e00\u5b9a\u8981\u624b\u6572\uff0c\u4e0d\u8981\u7c98\u677f\u5b50\uff01\uff08\u597d\u5427\uff0c\u4e5f\u53ef\u4ee5\uff0c\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u8c03\u8bd5\u65f6\u5c06cout\u548c\u6b63\u6587\u4e00\u5757\u5220\u4e86\u5c31\u884c\ninline int bfs(){\n\tqueue<int>q;q.push(s);\n\tmemset(d,0,sizeof(d));\n\td[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].v;\n\t\t\tif((!d[v])&&edge[i].w){\n\t\t\t\td[v]=d[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t\tif(v==t)return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\ninline int dinic(int u,int flow){\n\tif(u==t)return flow;\n\tint rest=flow,k;\n\tfor(int i=head[u];i&&rest;i=edge[i].nxt){\n\t\tint v=edge[i].v;\n\t\tif(d[v]==d[u]+1&&edge[i].w){\n\t\tk=dinic(v,min(rest,edge[i].w));\n\t\tif(!k)d[v]=0;\n\t\tedge[i].w-=k;\n\t\tedge[i^1].w+=k;\n\t\trest-=k;\n\t\t}\n\t}\n\treturn flow-rest;\n}\ninline int work(int x,int y){\n\ts=x,t=y;//\u786e\u5b9a\u6e90\u70b9\u548c\u6c47\u70b9 \n\tfor(int i=2;i<=tot;i++)edge[i].w=edge[i].up;//\u8fd8\u539f \n\tint ans=0;\n\twhile(bfs())ans+=dinic(s,inf);\n\treturn ans;\n}\ninline void dfs(int u){\n\tco[u]=col;\n\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].v;\n\t\tif(co[v]!=col&&edge[i].w){\n\t\t\tdfs(v);\n\t\t}\n\t}\n}\ninline void build(int l,int r){\n\tif(l>=r)return;\n\tint x=a[l],y=a[l+1];\n\tint Val=work(x,y);\n\tint New=++num;//\u62c6\u70b9 num\u521d\u59cb\u6210n \n\tsum[New]=val[New]=Val;//\u5c06\u8fb9\u6743\u53d8\u4e3a\u70b9\u6743 \n\tLCT.link(x,New);LCT.link(New,y);\n\tcol++;dfs(x);//\u5272\u8fb9\u7ec4\u6210\u7684\u5272\u96c6\u5c06\u56fe\u5206\u6210\u4e24\u90e8\u5206 \u5c06\u548cs\u5728\u540c\u4e00\u90e8\u5206\u7684\u70b9\u67d3\u8272 \n\tint num1=l,num2=r;\n\tfor(int i=l;i<=r;i++){\n\t\tif(co[a[i]]==col){\n\t\t\tb[num1++]=a[i];\n\t\t}\n\t\telse{\n\t\t\tb[num2--]=a[i];\n\t\t}\n\t}\n\tfor(int i=l;i<=r;i++){\n\t\ta[i]=b[i];\n\t}\n\tbuild(l,num1-1);build(num2+1,r);//\u9012\u5f52\u5efa\u56fe \n}\nint main(){\n\tn=rnd();m=rnd();int x,y,z;num=n;\n\twhile(m--){\n\t\tx=rnd();y=rnd();z=rnd();\n\t\tadd(x,y,z);add(y,x,z);\n\t}\t\n\tfor(int i=1;i<=n;i++){//build\u7684\u8f85\u52a9\u6570\u7ec4 \n\t\ta[i]=i;\n\t}\n\tmemset(sum,0x3f,sizeof(sum));//LCT\u7ef4\u62a4\u6700\u5c0f\u503c\u4e00\u5b9a\u8981\u521d\u59cb\u5316 \n\tmemset(val,0x3f,sizeof(val));\n\tbuild(1,n);\n\tm=rnd();\n\twhile(m--){\n\t\tx=rnd();y=rnd();\n\t\tLCT.split(x,y);\n\t\twr(sum[y]);puts(\"\");\n\t}\n\treturn 0;\n}\u62dc\u62dc\uff01\n```\n",
        "postTime": 1566087893,
        "uid": 71844,
        "name": "\u6768\u94e0\u8fdc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4897 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\u3011"
    },
    {
        "content": "\n\n$\u9996\u5148\u6700\u5c0f\u5272\u6811\u662f\u4e00\u9897\u6811,\u6709\u7740\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28$\n\n$\u5bf9\u4e8e\u6811\u4e2d\u4efb\u610f\u4e24\u70b9$s$\u548c$t$,$s$\u548c$t$\u5728\u539f\u56fe\u7684\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5c0f\u5272\u6811\u4e0a$s$\u5230$t$\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9$\n\n\u6784\u9020\u5b8c\u6210\u4e4b\u540e,\u5c31\u53ef\u4ee5\u6811\u4e0a\u500d\u589e\u6c42\u4e24\u70b9\u95f4\u6700\u5c0f\u8fb9\u6743(\u5c31\u662flca\u7684\u6811\u4e0a\u500d\u589e)\n\n\u8003\u8651\u5982\u4f55\u6765\u6784\u9020\n\n$\u2160.\u9009\u62e9\u56fe\u4e2d\u4efb\u610f\u4e24\u70b9,\u6c42\u51fa\u6700\u5c0f\u5272,\u5728\u6700\u5c0f\u5272\u6811\u4e2d\u8fde\u63a5\u8fd9\u4e24\u70b9,\u8fb9\u6743\u4e3a\u6700\u5c0f\u5272$\n\n$\u2161.\u8fd9\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u628a\u56fe\u5212\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408,\u5728\u4e24\u4e2a\u96c6\u5408\u4e2d\u7ee7\u7eed\u5206\u6cbb,\u91cd\u590d\u6b65\u9aa4\u2160$\n\n**\u8fd9\u6837\u5206\u96c6\u5408\u6700\u540e\u4f1a\u5206\u5230\u96c6\u5408\u4e2d\u53ea\u67091\u4e2a\u70b9,\u7b97\u6cd5\u7ed3\u675f,\u6700\u5c0f\u5272\u6811\u6784\u9020\u5b8c\u6210**\n\n$\u81f3\u4e8e\u6700\u5c0f\u5272\u6811\u4e3a\u4ec0\u4e48\u6709\u8fd9\u6837\u7684\u5b9a\u7406,\u6211\u53ea\u6709\u81ea\u5df1\u7684\u611f\u6027\u7406\u89e3$\n\n$\u6240\u6709\u8bfb\u8005\u611f\u5174\u8da3\u81ea\u884c\u53bb\u4e86\u89e3\u5427,\u6211\u6bd4\u8f83\u83dc,\u8bb0\u4f4f\u5c31\u597d\u4e86\u3002$\n\n**\u9644\u4e0a\u6709\u6ce8\u91ca\u7684\u6a21\u677f,\u611f\u89c9\u6211\u7684\u4ee3\u7801\u633a\u6613\u61c2\u7684**\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int inf=1e9;\nconst int maxn=1e5+10;\nstruct edge{\n\tint to,nxt,flow;\n}d[maxn]; int head[maxn],cnt=1;\nvoid add(int u,int v,int flow){\n\td[++cnt]=(edge){ v,head[u],flow },head[u]=cnt;\n\td[++cnt]=(edge){ u,head[v],0 },head[v]=cnt;\n}\nint dis[maxn],n,m;\nbool bfs(int s,int t)//\u666e\u901a\u7684\u6700\u5927\u6d41\u627e\u589e\u5e7f\u8def \n{\n\tfor(int i=0;i<=n+1;i++)\tdis[i]=0;\n\tdis[s]=1;\n\tqueue<int>q; q.push( s );\n\twhile( !q.empty() )\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=head[u];i;i=d[i].nxt )\n\t\t{\n\t\t\tint v=d[i].to;\n\t\t\tif( dis[v]==0&&d[i].flow )\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tif( v==t )\treturn true;\n\t\t\t\tq.push( v );\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint dinic(int u,int t,int flow )//\u666e\u901a\u7684\u6700\u5927\u6d41 \n{\n\tif( u==t )\treturn flow;\n\tint res=flow;\n\tfor(int i=head[u];i;i=d[i].nxt )\n\t{\n\t\tint v=d[i].to;\n\t\tif( dis[v]==dis[u]+1&&d[i].flow )\n\t\t{\n\t\t\tint temp=dinic(v,t,min(res,d[i].flow) );\n\t\t\tres-=temp;\n\t\t\tif( temp==0 )\tdis[v]=0;\n\t\t\td[i].flow-=temp;\n\t\t\td[i^1].flow+=temp;\n\t\t}\n\t\tif( res==0 )\tbreak;\n\t}\n\treturn flow-res;\n}\nvoid init()\n{\n\tfor(int i=2;i<=cnt;i+=2)//\u64a4\u6d41\u64cd\u4f5c,\u56e0\u4e3a\u4e0a\u4e00\u6b21\u8dd1\u6700\u5927\u6d41\u6539\u53d8\u4e86\u56fe\u7684\u6d41\u91cf,\u6539\u56de\u6765 \n\t\td[i].flow=( d[i].flow+d[i^1].flow ),d[i^1].flow=0;\n}\nint maxflow(int s,int t)\n{\n\tinit();//\u9000\u6d41\n\tint ans=0;\n\twhile( bfs(s,t) )\tans+=dinic(s,t,inf);\n\treturn ans; \n}\nclass GHT\n{\n\tpublic:\n\t\tedge d[maxn];\n\t\tint head[maxn],cnt;\n\t\tint temp1[maxn],temp2[maxn],node[maxn];\n\t\tvoid add(int u,int v,int flow){\n\t\t\td[++cnt]=(edge){ v,head[u],flow },head[u]=cnt;\n\t\t\td[++cnt]=(edge){ u,head[v],flow},head[v]=cnt;\n\t\t}\n\t\tvoid build(int l,int r)\n\t\t{\n\t\t\tif( l>=r )\treturn;\n\t\t\tint x=node[l],y=node[l+1];\n\t\t\tint cut = maxflow(x,y);\n\t\t\tadd(x,y,cut );\n\t\t\tint top1=0,top2=0;\n\t\t\t//\u53bb\u6389x\u548cy,\u5206\u6210\u96c6\u5408temp1\u548ctemp2 \n\t\t\tfor(int i=l;i<=r;i++)\n\t\t\t{\n\t\t\t\t//\u6700\u540e\u4e00\u6b21bfs\u540e\u6709\u6df1\u5ea6,\u8bf4\u660e\u548cx\u76f8\u8fde\u63a5,\u653e\u5728\u5de6\u96c6\u5408temp1 \n\t\t\t\tif( dis[ node[i] ] )\ttemp1[++top1]=node[i];\n\t\t\t\telse\ttemp2[++top2]=node[i]; \n\t\t\t}\n\t\t\tfor(int i=l;i<=l+top1-1;i++)\tnode[i]=temp1[i-l+1];\n\t\t\tfor(int i=l+top1;i<=r;i++)\tnode[i]=temp2[i-top1-l+1];\n\t\t\tbuild(l,l+top1-1); build(l+top1,r);//\u4e24\u4e2a\u96c6\u5408\u5206\u522b\u5efa\u56fe \n\t\t}\n\t\tint deep[maxn],fa[maxn][23],ans[maxn][23],log2n;\n\t\tvoid dfs(int x,int father)\n\t\t{\n\t\t\tfa[x][0]=father;\n\t\t\tdeep[x]=deep[father]+1;\n\t\t\tfor(int i=1;i<=log2n;i++)\n\t\t\t{\n\t\t\t\tfa[x][i]=fa[ fa[x][i-1] ][i-1];\n\t\t\t\tans[x][i]=min( ans[x][i-1],ans[ fa[x][i-1] ][i-1]);\n\t\t\t}\n\t\t\tfor(int i=head[x];i;i=d[i].nxt )\n\t\t\t{\n\t\t\t\tint v=d[i].to;\n\t\t\t\tif( v!=father )\n\t\t\t\t{\n\t\t\t\t\tans[v][0]=d[i].flow;\n\t\t\t\t\tdfs(v,x);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\tint query(int x,int y)\n\t\t{\n\t\t\tint zhi=inf;\n\t\t\tif( deep[x]<deep[y] )\tswap(x,y);\n\t\t\tfor(int i=log2n;i>=0;i-- )\n\t\t\t\tif( deep[ fa[x][i] ]>=deep[y] )\n\t\t\t\t{\n\t\t\t\t\tzhi=min(zhi,ans[x][i] );\n\t\t\t\t\tx=fa[x][i];\n\t\t\t\t}\n\t\t\tif( x==y )\treturn zhi;\n\t\t\tfor(int i=log2n;i>=0;i-- )\n\t\t\t{\n\t\t\t\tif( fa[x][i]!=fa[y][i] )\n\t\t\t\t{\n\t\t\t\t\tzhi=min( zhi,min( ans[x][i],ans[y][i] ) );\n\t\t\t\t\tx=fa[x][i],y=fa[y][i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tzhi=min(zhi,min( ans[x][0],ans[y][0] ) );\n\t\t\treturn zhi;\n\t\t}\n}CUT;\nvoid CUT_init()\n{\n\tCUT.log2n=log2(n)+1;\n\tCUT.cnt=1;//\u662f\u94fe\u5f0f\u524d\u5411\u661f\u7684\u8fb9\u7f16\u53f7 \n\tfor(int i=1;i<=n;i++)\tCUT.node[i]=i;//\u8fd9\u662f\u50a8\u5b58\u8282\u70b9\u96c6\u5408\u7684\u4fe1\u606f \n\tCUT.build(1,n);//\u5efa\u6811 \n\tCUT.dfs(1,0);//\u500d\u589e \n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l,r,flow; scanf(\"%d%d%d\",&l,&r,&flow);\n\t\tadd( l,r,flow );\tadd(r,l,flow);//\u65e0\u5411\u56fe\u7f51\u7edc\u6d41\u5efa\u8fb9 \n\t}\n\tCUT_init();//\u521d\u59cb\u5316\u6700\u5c0f\u5272\u6811 \n\tint q; scanf(\"%d\",&q);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint s,t; scanf(\"%d%d\",&s,&t);\n\t\tint _= CUT.query(s,t);\n\t\tif( _==inf )\t_=-1;\n\t\tprintf(\"%d\\n\",_);\n\t}\n}\n```",
        "postTime": 1597754853,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4897 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\u3011"
    },
    {
        "content": "## \u9898\u610f\uff1a\n\u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\n\n## \u9898\u89e3\uff1a\n\u672c\u9898\u8981\u7528\u5230\u6700\u5c0f\u5272\u6811\u3002\n\n\u6700\u5c0f\u5272\u6811\u5176\u5b9e\u5c31\u662f\u628a\u6240\u6709\u7684\u70b9\u5206\u6210\u591a\u4e2a\u90e8\u5206\u7136\u540e\u5206\u6cbb\uff0c\u4f7f\u53ea\u7528\u8dd1\u5f88\u5c11\u6b21\u7f51\u7edc\u6d41\u5c31\u80fd\u89e3\u51b3\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n\u8fd9\u4e2a\u56fe\uff1a\n\n[![FNnJoT.png](https://s1.ax1x.com/2018/12/13/FNnJoT.png)](https://imgchr.com/i/FNnJoT)\n\n\u5f00\u59cb\u5148\u6c421\uff0c4\u70b9\u95f4\u7684\u6700\u5c0f\u5272\uff0c\u6613\u5f97\u4e3a3\u3002\n\n\u8dd1\u5b8c\u7f51\u7edc\u6d41\u4e4b\u540e\u7684\u56fe\u662f\u8fd9\u6837\u7684\u3002\n\n[![FNnBO1.png](https://s1.ax1x.com/2018/12/13/FNnBO1.png)](https://imgchr.com/i/FNnBO1)\n\n\u6211\u4eec\u53d1\u73b0\u56fe\u53d8\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u56fe\u80af\u5b9a\u4f1a\u53d8\u6210\u4e24\u90e8\u5206\u751a\u81f3\u66f4\u591a\uff0c\u56e0\u4e3a\u65e2\u7136\u662f\u4e00\u4e2a\u5272\uff0c\u5c31\u80af\u5b9a\u4f1a\u628a\u4e24\u4e2a\u70b9\u5206\u5230\u4e0d\u540c\u7684\u533a\u57df\u3002\n\n\u7136\u540e\u6613\u77e5\u4e24\u4e2a\u533a\u57df\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u81f3\u5c11\u4e3a\u5f53\u524d\u7684\u6700\u5c0f\u5272\u2014\u20143\u3002\n\n\u7136\u540e\u6211\u4eec\u628a\u56fe\u590d\u539f\n\n[![FNnJoT.png](https://s1.ax1x.com/2018/12/13/FNnJoT.png)](https://imgchr.com/i/FNnJoT)\n\n\u5728\u521a\u624d\u5212\u5206\u7684\u533a\u57df\u91cc\u7ee7\u7eed\u5212\u5206\n\n\u4f46\u6709(1)\u533a\u95f4\u53ea\u5269\u4e00\u4e2a\u70b9\u4e86\uff0c\u6240\u4ee5\u4e0d\u7ee7\u7eed\u5212\u5206\uff0c\u53d6\uff082\uff0c3\uff0c4\uff09\u4e2d\u76842\uff0c3\u4e24\u70b9\u505a\u6700\u5c0f\u5272(\u5176\u5b9e\u968f\u4fbf\u54ea\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9\u90fd\u53ef\u4ee5)\uff0c\u6613\u5f97\u6700\u5c0f\u5272\u4e3a4\u3002\n\n\u5269\u4e0b\u7684\u56fe\u4e3a\uff1a\n\n[![FNnOpQ.png](https://s1.ax1x.com/2018/12/13/FNnOpQ.png)](https://imgchr.com/i/FNnOpQ)\n\n\u7136\u540e\u6613\u77e5\u4e24\u4e2a\u533a\u57df\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u81f3\u5c11\u4e3a\u5f53\u524d\u7684\u6700\u5c0f\u5272\u2014\u20144\u3002\n\n\u7136\u540e\u66f4\u65b0\u7b54\u6848\uff0c\u8bb0\u4f4f\uff0c\u5c31\u7b97\u4e0d\u5728\u5f53\u524d\u533a\u95f4\u5185\u7684\u6570\u4e5f\u5fc5\u987b\u66f4\u65b0\u3002\n\n\u7ee7\u7eed\u590d\u539f\uff0c\u66f4\u65b0\uff0c\u7136\u540e\u5f97\u5230\u6700\u540e\u7684$ans$\uff1a\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6839\u636e\u8be2\u95ee\u8f93\u51fa\u4e86\u3002\n\n\u7528\u8fd9\u6837\u7684\u7b97\u6cd5\u53ea\u7528\u8dd1$n$\u904d\u7f51\u7edc\u6d41\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5fc5\u5b9a\u5206\u79bb\u4e24\u4e2a\u70b9\uff0c\u4e58\u4e0a\u7f51\u7edc\u6d41\u590d\u6742\u5ea6$O(n^2m)$(\u5176\u5b9e\u8dd1\u4e0d\u6ee1)\u590d\u6742\u5ea6\u662f$O(n^3m)$(\u4e5f\u8dd1\u4e0d\u6ee1)\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53eb\u6700\u5c0f\u5272\u6811\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u5b9e\u9645\u8fd0\u7b97\u7684\u65f6\u5019\u6bcf\u6b21\u90fd\u4f1a\u628a\u533a\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6240\u4ee5\u4f1a\u5206$n-1$\u6b21\uff0c\u7136\u540e\u6bcf\u6b21\u4f1a\u7b97\u51fa\u4e00\u4e2a\u6570\uff08\u6700\u5c0f\u5272\uff09\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u8fb9\u6743\uff0c\u7136\u540e\u5c31\u6210\u4e86\u4e00\u68f5\u6811\u3002\n\n\u542c\u8bf4\u5728\u8fd9\u68f5\u6811\u4e0a\u8dd1\u500d\u589e\u627e\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u4e5f\u53ef\u4ee5\u505a\u8fd9\u9053\u9898\u3002\n\n\u4e0b\u9762\u662f\u5e38\u6570\u6781\u5927\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define re register \nusing namespace std;\nconst int inf=1<<29,N=1010,M=20010;\nint n,m,a[N];\nint ans[N][N];\nint head[N],nxt[M],bian[M],zhi[M],tot;\nvoid init(){\n    tot=1;\n    memset(head,0,sizeof head);\n}\ninline void add(re int x,re int y,re int z){\n    tot++;bian[tot]=y;zhi[tot]=z;nxt[tot]=head[x];head[x]=tot;\n    tot++;bian[tot]=x;zhi[tot]=z;nxt[tot]=head[y];head[y]=tot;\n}\ninline void build(int m){\n    for(re int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n    }\n}\nvoid rebuild(){\n    for(re int i=1;i<=tot;i+=2){\n        zhi[i]=zhi[i^1]=(zhi[i]+zhi[i^1])>>1;\n    }\n}\nint v[N],d[N];\nvoid cut(int x){\n    v[x]=1;\n    for(int i=head[x];i;i=nxt[i]){\n        if(zhi[i]&&!v[bian[i]])cut(bian[i]);\n    }\n}\nqueue<int>q;\nbool bfs(int b,int e){\n    memset(d,0,sizeof(d));\n    while(!q.empty())q.pop();\n    q.push(b);d[b]=1;\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        for(int i=head[x];i;i=nxt[i]){\n            if(zhi[i] && !d[bian[i]]){\n                q.push(bian[i]);\n                d[bian[i]]=d[x]+1;\n                if(bian[i]==e)return 1;\n            }\n        }\n    }\n    return 0;\n}\nint dinic(int b,int e,int x,int flow){\n    if(x==e)return flow;\n    int rest=flow,k;\n    for(int i=head[x];i && rest;i=nxt[i]){\n        if(zhi[i] && d[bian[i]]==d[x]+1){\n            k=dinic(b,e,bian[i],min(rest,zhi[i]));\n            if(!k)d[bian[i]]=0;\n            zhi[i]-=k;\n            zhi[i^1]+=k;\n            rest-=k;\n        }\n    }\n    return flow-rest;\n}\ninline int maxflow(int b,int e){\n    int flow=0,maxflow=0;\n    while(bfs(b,e)){\n        while(flow=dinic(b,e,b,inf))maxflow+=flow;\n    }\n    return maxflow;\n}\nint b,e;\nvoid solve(int l,int r){\n    if(l==r)return;\n    rebuild();\n    b=a[l],e=a[r];\n    re int mincut=maxflow(b,e);\n    memset(v,0,sizeof v);\n    cut(b);\n    for(re int i=1;i<=n;++i){\n        if(!v[i])continue;\n        for(re int j=1;j<=n;++j){\n            if(v[j])continue;\n            ans[i][j]=ans[j][i]=min(ans[i][j],mincut);\n        }\n    }\n    re int cnt=l-1;\n    static int ls[N];\n    for(re int i=l;i<=r;++i){\n        if(v[a[i]]){\n            ls[++cnt]=a[i];\n        }\n    }\n    re int fj=cnt;\n    for(re int i=l;i<=r;++i){\n        if(!v[a[i]]){\n            ls[++cnt]=a[i];\n        }\n    }\n    for(re int i=l;i<=r;++i)a[i]=ls[i];\n    solve(l,fj);\n    solve(fj+1,r);\n}\nint main()\n{\n    int b,e,q;\n    memset(ans,0x3f,sizeof ans);\n    cin>>n>>m;\n    init();\n    build(m);\n    for(int i=1;i<=n;++i){\n    \ta[i]=i;\n    }\n    solve(1,n);\n    cin>>q;\n    while(q--){\n        scanf(\"%d%d\",&b,&e);\n        printf(\"%d\\n\",ans[b][e]);\n    }\n}\n```",
        "postTime": 1544699760,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4897 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09\u3011"
    },
    {
        "content": "\u5927\u6982\u662f\u5e74\u521d\u5b66\u7684\u7b97\u6cd5\u4e86\uff0c\u73b0\u5728\u8054\u8d5b\u524d\u590d\u4e60\u4e00\u4e0b\u3002\n\n### \u601d\u8def\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u9700\u8981\u591a\u6b21\u6c42\u5f97\u4e24\u70b9\u6700\u5c0f\u5272\u3002\n\n\u5982\u679c\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u90fd\u8fdb\u884c\u4e00\u6b21\u7f51\u7edc\u6d41\u6c42\u89e3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f\u9519\u8bef\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u7528\u6700\u5c0f\u5272\u6811\u3002\n\n\u6700\u5c0f\u5272\u6811\u7684\u5927\u81f4\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n1. \u627e\u5230\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e24\u70b9\uff0c\u521d\u59cb\u7684\u96c6\u5408\u5373\u4e3a\u5168\u56fe\u4e2d\u7684\u70b9\u3002\n\n2. \u5229\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u7b54\u6848\u3002\n\n3. \u5c06\u4e24\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6709\u6743\u503c\uff0c\u6743\u503c\u4e3a\u6c42\u89e3\u51fa\u7684\u7b54\u6848\u3002\n\n4. \u5c06\u4e24\u4e2a\u5272\u96c6\u5206\u5f00\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u8fd4\u56de $1$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6700\u5c0f\u5272\u6811\uff0c\u5b83\u6709\u4e00\u4e2a\u5341\u5206\u4f18\u7f8e\u7684\u6027\u8d28\u3002\n\n\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u4e3a\u4e24\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5 $n^2$ \u9884\u5904\u7406\u8fdb\u884c\u6c42\u89e3\u4e86\u3002\n\n\u81f3\u4e8e\u8fd9\u4e2a\u6027\u8d28\u7684\u8bc1\u660e\uff0c\u8fc7\u7a0b\u6bd4\u8f83\u7e41\u7410\uff0c\u672c\u4eba\u4e5f\u4e0d\u662f\u975e\u5e38\u7406\u89e3\uff0c\u53ef\u4ee5\u770b\u4e00\u773c\u7f51\u4e0a\u7684\u8bc1\u660e\u3002\n\n\u6709\u4e00\u4e2a\u611f\u6027\u7406\u89e3\uff0c\u5bf9\u4e8e\u8981\u6c42\u89e3\u6700\u5c0f\u5272\u7684\u4e24\u4e2a\u70b9\uff0c\u4ed6\u4eec\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u88ab\u5272\u6389\u4e4b\u540e\uff0c\u90fd\u4f1a\u4f7f\u4e24\u4e2a\u70b9\u88ab\u5206\u6210\u4e24\u4e2a\u5272\u96c6\u3002\n\n\u6ce8\u610f\u51e0\u70b9\u3002\n\n1. \u6700\u5927\u6d41\u540e\u8bb0\u5f97\u6e05\u7a7a\u3002\n\n2. \u521d\u59cb\u7684\u8fb9\u8fde\u53cc\u5411\u8fb9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3\\times m)$\u3002\n\n\u672c\u4eba\u4f7f\u7528 ISAP\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 600;\nconst int M = 10100;\nconst int inf = 1e9 + 10;\n\nint n , m , s , t , q , cnt = 1 , maxflow;\nint id[N] , tmp[N] , vis[N] , dep[N] , gap[N] , head[N];\n\nstruct edge\n{\n    int to , nxt , val , sum;\n}e[M];\n\ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n\ninline void add(int x , int y , int z)\n{\n    e[++cnt] = {y , head[x] , z , z} , head[x] = cnt;\n}\n\ninline void bfs()\n{\n    queue<int> q;\n    memset(dep , 0 , sizeof dep);\n    memset(gap , 0 , sizeof gap);\n    q.push(t) , gap[dep[t] = 1] = 1;\n    while(q.empty() == 0)\n    {\n        int x = q.front(); q.pop();\n        for(int i = head[x];i;i = e[i].nxt)\n        {\n            if(!dep[e[i].to])\n            {\n                dep[e[i].to] = dep[x] + 1;\n                gap[dep[e[i].to]]++;\n                q.push(e[i].to);\n            }\n        }\n    }\n}\n\ninline int dfs(int now , int flow)\n{\n    if(now == t)  return flow;\n    int used = 0;\n    for(int i = head[now];i;i = e[i].nxt)\n    {\n        int x = e[i].to;\n        if(e[i].val && dep[x] + 1 == dep[now])\n        {\n            int y = dfs(e[i].to , min(flow - used , e[i].val));\n            e[i].val -= y , e[i ^ 1].val += y , used += y;\n            if(used == flow) return used;\n        }\n    }\n    gap[dep[now]]--;\n    if(gap[dep[now]] == 0) dep[s] = n + 1;  \n    gap[++dep[now]]++;\n    return used;\n}\n\ninline void init()\n{\n    for(int i = 0;i <= cnt;i++) e[i].val = e[i].sum;\n}\n\ninline int isap(int S , int T)\n{\n    s = S , t = T , maxflow = 0;\n    init() , bfs();\n    while(dep[s] <= n) maxflow += dfs(s , inf);\n    return maxflow;\n}\n\nstruct GHT\n{\n    edge tr[M];\n    int tot , ans[N][N] , hed[N];\n        \n    inline void add_edge(int x , int y , int z)\n    {\n        tr[++tot] = {y , hed[x] , z} , hed[x] = tot;\n        tr[++tot] = {x , hed[y] , z} , hed[y] = tot;\n    }\n        \n    inline void find(int now)\n    {\n        vis[now] = 1;\n        for(int i = head[now];i;i = e[i].nxt)\n            if(!vis[e[i].to] && e[i].val) find(e[i].to);\n    }\n        \n    inline void build(int l , int r)\n    {\n        if(l >= r) return;\n        int x = id[l] , y = id[l + 1];\n        int sum = isap(x , y) , ls = l , rs = r;\n        add_edge(x , y , sum);\n        add_edge(y , x , sum);\n        memset(vis , 0 , sizeof vis) , find(x);\n        for(int i = l;i <= r;i++) \n            tmp[(vis[id[i]] ? ls++ : rs--)] = id[i];\n        for(int i = l;i <= r;i++) id[i] = tmp[i];\n        build(l , ls - 1) , build(rs + 1 , r);\n    }\n        \n    inline void get(int now , int fa , int gen , int dis)\n    {\n        ans[now][gen] = dis;\n        for(int i = hed[now];i;i = tr[i].nxt)\n            if(tr[i].to != fa) get(tr[i].to , now , gen , min(dis , tr[i].val));\n    }\n        \n    inline int ask(int x , int y)\n    {\n        return ans[x][y];\n    }\n        \n    inline void solve()\n    {\n        build(1 , n);\n        for(int i = 1;i <= n;i++) get(i , 0 , i , inf);\n    }\n        \n}tree;\n\nint main()\n{\n    n = read() + 1 , m = read();\n    for(int i = 1;i <= m;i++)\n    {\n        int x = read() + 1 , y = read() + 1 , z = read();\n        add(x , y , z);\n        add(y , x , 0);\n        add(x , y , 0);\n        add(y , x , z);\n    }\n    for(int i = 1;i <= n;i++) id[i] = i;\n    tree.solve();\n    q = read();\n    for(int i = 1;i <= q;i++)\n    {\n        int x = read() + 1 , y = read() + 1;\n        cout << tree.ask(x , y) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1668779876,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "P4897 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u5272\u6811\uff08Gomory-Hu Tree\uff09 \u9898\u89e3"
    }
]