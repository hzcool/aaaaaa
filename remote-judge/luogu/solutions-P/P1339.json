[
    {
        "content": "### Dijkstra + \u7ebf\u6bb5\u6811\u89e3\u6cd5\n\n\u6700\u8fd1\u96c6\u8bad\u4e00\u4f4d\u5927\u4f6c\u7ed9\u6211\u8bb2\u4e86\u4e00\u4e2a\u5947\u5999\u7684Dijkstra\u4f18\u5316\u65b9\u6cd5\uff0c\u4ed6\u544a\u8bc9\u6211\u7ebf\u6bb5\u6811\u53ef\u4ee5\u4ee3\u66ff\u4f18\u5148\u961f\u5217\u6765\u4f18\u5316Dijkstra\u3002\n\n**\u6211\u7b2c\u4e00\u4e2a\u611f\u89c9\u662f\u773c\u775b\u4e00\u4eae**\n\n\u4e8e\u662f\u6211\u8ba4\u771f\u7684\u542c\u5b8c\u4e86\u4ed6\u8bb2\u7684\u65b9\u6cd5\u3002\n\nDijkstra\u7b97\u6cd5\u5468\u56f4\u7684\u5927\u4f6c\u5df2\u7ecf\u8bb2\u7684\u5341\u5206\u7684\u6f02\u4eae\u4e86\uff0c\u6211\u89c9\u5f97\u6211\u518d\u63d2\u4e00\u5634\u5c31\u662f\u591a\u4f59\u3002\u6240\u4ee5\u6211\u5c31\u7740\u91cd\u8bb2\u4e00\u4e0b\u7528\u7ebf\u6bb5\u6811\u7684\u4f18\u5316\u3002\n\n\u9996\u5148\u8003\u8651\u6211\u4eec\u5f53\u65f6\u8981\u7528\u4f18\u5148\u961f\u5217\u505a\u4ec0\u4e48\u3002\n\n\u662f\u4e0d\u662f\u5c31\u662f\u7ef4\u62a4\u7684dis[]\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u5b83\u7684\u7ec8\u70b9\uff1f\n\n\u5177\u4f53\u64cd\u4f5c\uff1f\n\n\u4e0d\u5c31\u662f\u8981\u6211\u4eec\u5411\u4f18\u5148\u961f\u5217\u91cc\u653e\u5165\u4e00\u4e2adis\u548c\u7ec8\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u677e\u5f1b\u90fd\u51fa\u961f\u4e00\u7ec4\uff0c\u518d\u8fdb\u884c\u66f4\u65b0\uff1f\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5728\u8fd9\u91cc\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u95ee\u9898\u3002\uff08\u9003\n\n\u4e0d\u8fc7\u7ebf\u6bb5\u6811\u6709\u4e2a\u6027\u8d28\uff1a\u4e0d\u80fd\u5220\u70b9\u3002\u90a3\u8be5\u600e\u4e48\u8fdb\u884c\u90a3\u4e2a\u8981\u6c42\u6211\u4eec\u51fa\u961f\u7684\u64cd\u4f5c\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u5982\u679c\u6211\u4eec\u628a\u90a3\u4e2a\u8981\u51fa\u961f\u7684\u4e00\u7ec4\u6570\u4e2ddis\u4fee\u6539\u4e3aINF\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u7ebf\u6bb5\u6811\u91cc\u6709\u6570\uff0c\u5c31\u4e00\u5b9a\u53d6\u4e0d\u5230INF\uff0c\u5c31\u4e0d\u4f1a\u7528\u5230\u8fd9\u7ec4\u6570\u4e86\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u51fa\u961f\u4e86\u3002\u5982\u679c\u6211\u4eec\u5728\u6700\u5f00\u59cb\u521d\u59cb\u5316\uff08\u5efa\u6811\uff09\u65f6\u5c31\u53ea\u7559\u4e00\u4e2adis\u4e3a0\u7684s\uff08\u8d77\u70b9\u7f16\u53f7\uff09\uff0c\u5176\u4f59\u90fd\u53d8\u6210INF\uff0c\u90a3\u4e48\u6211\u4eec\u63d2\u5165\u4e00\u7ec4\u6570\u65f6\u76f4\u63a5\u5355\u70b9\u4fee\u6539\u4e0d\u5c31\u597d\u5566\uff1f\n\n\u5982\u4f55\u5224\u65ad\u961f\u5217\u4e3a\u7a7a\uff1f\u6211\u4eec\u5982\u679c\u961f\u5217\u4e2d\u53ea\u6709INF\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u771f\u5b9e\u8981\u7528\u7684\u6570\u636e\uff0c\u961f\u5217\u5c31\u662f\u7a7a\u7684\u4e86\u3002\n\n\u8fd9\u91cc\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u7684\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u597d\u5566\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define mm 200020\n#define inf 2147483647\n#define ll long long\n#define ld long double\n#define fi first\n#define se second\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\n#define bson l, r, rt\ninline int read(){\n    int f = 1, x = 0;char ch = getchar();\n    while (ch > '9' || ch < '0'){if (ch == '-')f = -f;ch = getchar();}\n    while (ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return x * f;\n}\ninline void write(int x){\n    if (x < 0)putchar('-'),x = -x;\n    if (x > 9)write(x / 10);\n    putchar(x % 10 + '0');\n}\n//This is AC head above...\nstruct node{\n    int v, nxt, w;\n} e[mm << 1];\nint h[mn], p;\ninline void add(int a,int b,int c){\n    e[++p].nxt = h[a];\n    h[a] = p;\n    e[p].v = b;\n    e[p].w = c;\n}\nint dis[mn];\nint n, m, s, t;\nstruct tree{\n    int minw, minv;\n};\nstruct SegmentTree{\n    tree z[mn << 2];\n    inline void update(int rt){\n        z[rt].minw = min(z[rt << 1].minw, z[rt << 1 | 1].minw);//\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\n        z[rt].minv = (z[rt << 1].minw < z[rt << 1 | 1].minw) ? z[rt << 1].minv : z[rt << 1 | 1].minv;//\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u4f4d\u7f6e\n    }\n    inline void build(int l,int r,int rt){//\u5efa\u6811\n        if(l==r){\n            z[rt].minw = l == s ? 0 : inf;//\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5efa\u6811\u65f6\u628as\u7684\u70b9\u8bbe\u7f6e\u4e3a0\n            z[rt].minv = l;//\u8bb0\u5f55\u6700\u5c0f\u503c\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u4fee\u6539\n            return;\n        }\n        int m = (l + r) >> 1;\n        build(lson);\n        build(rson);\n        update(rt);\n    }\n    inline void modify(int l,int r,int rt,int now,int v){//\u5355\u70b9\u4fee\u6539\n        if(l==r){\n            z[rt].minw = v;\n            return;\n        }\n        int m = (l + r) >> 1;\n        if(now<=m)\n            modify(lson, now, v);\n        else\n            modify(rson, now, v);\n        update(rt);\n    }\n} tr;\ninline void Dij(){//Dijkstra\u7684\u6838\u5fc3\u90e8\u5206\n    go(i,1,n,1){\n        dis[i] = inf;\n    }//\u521d\u59cb\u5316dis\n    dis[s] = 0;\n    while(tr.z[1].minw < inf){//\u8fd9\u91cc\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        int x = tr.z[1].minv;//\u53d6\u6574\u4e2a\u7ebf\u6bb5\u6811\u4e2d\u6700\u5c0f\u7684\u70b9\n        tr.modify(root, x, inf);//\u5355\u70b9\u4fee\u6539\u6700\u5c0f\u7684\u70b9\u4e3ainf\n        rep(i,x){\n            int v = e[i].v;\n            if(dis[v] > dis[x] + e[i].w){\n                dis[v] = dis[x] + e[i].w;\n                tr.modify(root, v, dis[x] + e[i].w);//\u8fd9\u91cc\u5c31\u662f\u7c7b\u4f3c\u5165\u961f\u64cd\u4f5c\n            }\n        }\n    }\n}\nint main(){\n    n = read(), m = read(), s = read(), t=read();\n    go(i,1,m,1){\n        int x = read(), y = read(), v = read();\n        add(x, y, v);\n        add(y, x, v);//\u8fd9\u4e2a\u4e00\u5b9a\u8bb0\u4f4f\uff0c\u65e0\u5411\u56fe\u8981\u6b63\u53cd\u4e24\u6761\u8fb9QAQ\n    }\n    tr.build(root);//\u5efa\u6811\n    Dij();//Dijkstra\n    cout << dis[t];\n    return 0;\n}\n\n```\n\n### \u8fd9\u6837\u4f3c\u4e4e\u8981\u6bd4priority_queue\u4f18\u5316\u5feb\u4e00\u4e9b\n\n#### \u7b2c\u5341\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u5e0c\u671b\u53ef\u4ee5\u7ed9\u60f3\u4f18\u5316Dijkstra\u7684\u540c\u5b66\u4e00\u4e2a\u65b0\u601d\u8def",
        "postTime": 1534531952,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011\u2014\u2014\u7ebf\u6bb5\u6811\u505a\u6cd5"
    },
    {
        "content": "## \u4e0d\u4f1aSPFA\u7684\u540c\u5b66\u4eec\u770b\u8fc7\u6765\n\n##### \u65e2\u7136dalao\u4eec\u90fd\u5728\u6253SPFA\uff0c~~\u6211\u4e5f\u4e0d\u4f1aSPFA~~\uff0c\u6240\u4ee5\u5199\u4e2aDijkstra\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u63d0\u9192\u90a3\u4e9b~~\u548c\u6211\u4e00\u6837~~\u611f\u89c9\u81ea\u5df1\u7684\u4ee3\u7801\u5bf9\uff0c\u521a\u4ece[P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09](https://www.luogu.org/problemnew/show/P3371)\u8fc7\u6765\u7684\u540c\u5b66\u3002\n\n## \u8fd9\u4e2a\u9898\u7684\u8fb9\u662f\u65e0\u5411\u56fe\uff01\uff01\uff01\n\n~~\u542c\u5230[\u5927\u4f6c](https://www.luogu.org/space/show?uid=50926)\u8bf4\u662f\u6a21\u677f\u9898\uff0c\u6211\u5c31\u4eceP3371\u76f4\u63a5\u8fc7\u6765\u4ea4\u4e0a\u4e86\uff0c\u7136\u540eWA\u63899\u4e2a\u70b9\uff0c\uff0c\uff0c\u6211\u6539\u4e86\u597d\u957f\u65f6\u95f4\uff0c\uff0c\uff0c\u624d\u53d1\u73b0QAQ~~\n\n\u8fd8\u6709\u5f88\u591a\u5927\u4f6c\u544a\u8bc9\u6211\u8fd9\u662f\u4e00\u9053\u7ec3SPFA\u7684\u597d\u9898\uff0c\u7684\u786e\uff0c\u6570\u636e\u8bf4\u5f97\u8fc7\uff0c\u4f3c\u4e4e\u4e5f\u6ca1\u4eba\u5361QAQ\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u90a3Dijkstra\u4f1a\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\n\n\u5176\u5b9e\u771f\u7684\u5c31\u662f\u9053\u6a21\u677f\u9898\n\n\u6211\u5728\u8fd9\u91cc\u7ec6\u8bb2\u4e00\u4e0bDijkstra\u505a\u6cd5\uff08\u5305\u62ec\u5806\u4f18\u5316\u65b9\u6cd5\uff09\n\n### 1.Dijkstra\u65e0\u4f18\u5316\u7248\n\n\u5b9e\u9645\u4e0aDijkstra\u7684\u601d\u60f3\u548cFloyd\u7684\u90e8\u5206\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u6709\u7528\u5230\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff1a\u677e\u5f1b\u64cd\u4f5c\n\n\t\tif(map[i][j]>map[i][k]+map[k][j])\n    \t\tmap[i][j]=map[i][k]+map[k][j];\n        \nQAQ\uff1f\uff1f\uff1f\u5b8c\u4e86\uff1f\uff1f\uff1f\n\n\u5b8c\u4e86\u3002\u8fd9\u5c31\u662fDijkstra\u4e0eFloyd\u7684\u6838\u5fc3\u601d\u60f3\uff0cDijkstra\u5c31\u662f\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\uff0c\u8303\u56f4\u7f29\u5c0f\u800c\u5df2\u3002\n\n\uff08\u76f8\u4fe1\u90fd\u5b66\u8fc7Dijkstra\uff09\n\n\u60f3\u5fc5\u5927\u5bb6\u4e5f\u90fd\u77e5\u9053\u6709\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5c31\u662f\u5bfb\u627e\u6700\u8fd1\u7684\u70b9\uff0c\u6211\u4eec\u5728\u5199\u7684\u65f6\u5019\u662fO(n)\u7684\u3002\u3002\u3002\n\n\u4e0d\u89c9\u5f97\u592a\u6162\u4e86\u5417\uff1f\uff1f\uff1f\n\n\u4e8e\u662f\u6211\u4eec\u6709\u4e86~~~~\n\n### 2.Dijkstra + \u5806\u4f18\u5316\n\n\u4e0d\u8981\u89c9\u5f97\u5806\u4f18\u5316\u5341\u5206\u9ad8\u5927\u4e0a\uff0c\u5b9e\u9645\u4e0a\u53ea\u4f18\u5316\u4e86\u4e00\u4e9b\u6700\u7b80\u5355\u800c\u53c8\u6700\u8d39\u65f6\u95f4\u7684\u64cd\u4f5c\u3002\n\n\u5927\u5bb6\u8fd8\u8bb0\u5f97\u4f18\u5148\u961f\u5217\u5417\uff1f\uff1f\uff1f\uff08\u5806\u4e5f\u884c\uff09\n\n\t\t#include<queue>\n    \tpriority_queue<int> que;\n    \n\u5c31\u662f\u8fd9\u4e2a\u4e1c\u897f\uff0c\u53ef\u4ee5O(logn)\u7684\u627e\u5230\u6700\u8fd1\u7684\u70b9\u4e86QAQ\n\n\u5177\u4f53\u64cd\u4f5c\u770b\u4ee3\u7801\u5427\uff01QAQ\n\n## \u4ee3\u7801\n\n### \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe(\u65e0\u4f18\u5316\u7684\u627e\u4e0d\u5230\u4e86\uff0c\u8fd9\u4e2a\u53ea\u6709\u5e26\u5806\u4f18\u5316\u7684QAQ\uff0c\u60f3\u770b\u65e0\u4f18\u5316\u7684\u5411\u4e0b\u7ffb)\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define inf 1 << 30\n#define ll long long\n#define ld long double\n#define fi first\n#define se second\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\ninline int read(){\n    int f = 1, x = 0;char ch = getchar();\n    while (ch > '9' || ch < '0'){if (ch == '-')f = -f;ch = getchar();}\n    while (ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return x * f;\n}\ninline void write(int x){\n    if (x < 0)putchar('-');x = -x;\n    if (x > 9)write(x / 10);\n    putchar(x % 10 + '0');\n}\n//This is AC head above...\nstruct edge{\n    int v, nxt, w;\n} e[mn<<1];\nint h[mn],p;\ninline void add(int a,int b,int c){\n    p++;\n    e[p].nxt = h[a];\n    h[a] = p;\n    e[p].v = b;\n    e[p].w = c;\n}\nstruct node{\n    int u,v;\n    bool operator <(const node &b) const{\n        return u > b.u;\n    }\n};\n/*\nbool operator <(const node &a,const node &b) {\n        return a.u > b.u;\n};\n*/\nint n, m, s, t;\nint dis[mn];\npriority_queue<node> q;\ninline void Dij(int s){\n    go(i, 0, n, 1)\n        dis[i] = inf;\n    dis[s] = 0;\n    node o;\n    o.u = 0;\n    o.v = s;\n    q.push(o);\n    while (q.size()){\n        int u = q.top().v;\n        int d = q.top().u;\n        q.pop();\n        if(d!=dis[u])\n            continue;\n        rep(i,u){\n            int v = e[i].v;\n            int w = e[i].w;\n            if (dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w;\n                node p;\n                p.u = dis[v], p.v = v;\n                q.push(p);\n            }\n        }\n    }\n}\nint main(){\n    n=read(),m=read(),s=read(),t=read();\n    go(i,1,m,1){\n        int u = read(), v = read(), w = read();\n        add(u, v, w);\n        add(v, u, w);\n    }\n    Dij(s);\n    cout << dis[t];\n    cout << \"\\n\";\n    return 0;\n}\n```\n\n### vector\u66b4\u529b\u5b58\u56fe\u6cd5\uff08\u548c\u94fe\u5f0f\u524d\u5411\u661f\u6ca1\u5565\u533a\u522b\uff0c\u8fd9\u4e2a\u5305\u62ec\u65e0\u4f18\u5316\u548c\u6709\u4f18\u5316\u7684\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\nusing namespace std;\n#define go(i,j,n,k) for(register int i=j;i<=n;i+=k)\n#define fo(i,j,n,k) for(register int i=j;i>=n;i-=k)\n#define mn 110\n#define inf 1<<30\n#define root 1,n,1\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\n#define ll long long\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n\nconst int kN = 100000+10;\nconst int INF = 2147483647;\n\nint s, n, m, k;\nint d[kN];\nvector<pair<int, int> > G[kN];\n\nbool vis[kN];\nvoid dijkstra_naive(int s) {\n    for (int i = 0; i <= n; i++) d[i] = INF;\n\n    d[s] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        // find min u, s.t. d[u] < d[i] for all i that vis[i] = false\n        int u = -1;\n        for (int j = 1; j <= n; j++) if (!vis[j]) {\n            if (u == -1 || d[j] < d[u]) {\n                u = j;\n            }\n        }\n\n        if (u == -1 || d[u] >= INF) break;\n        vis[u] = true;\n        for (int j = 0; j < G[u].size(); j++) {\n            int v = G[u][j].first;\n            int w = G[u][j].second;\n            if (d[v] > d[u] + w) {\n                d[v] = d[u] + w;\n            }\n        }\n    }\n}\n\nvoid dijkstra(int s) {\n    for (int i = 0; i <= n; i++) d[i] = INF;\n\n    d[s] = 0;\n    priority_queue<pair<int, int> > q;\n    q.push(make_pair(0, s));\n\n    while (q.size()) {\n        int u = q.top().second;\n        q.pop();\n\n        for (int i = 0; i < G[u].size(); i++) {\n            int v = G[u][i].first;\n            int w = G[u][i].second;\n            if (d[v] > d[u] + w) {\n                d[v] = d[u] + w;\n                q.push(make_pair(-d[v], v));\n            }\n        }\n    }\n}\n\nint main() {\n    n = read();\n    m = read();\n    s = read();\n    t = read();\n    go(i,1,m,1){\n        int u=read(), v=read(), w=read();\n        pair<int, int> p;   \n        p.first = v;    \n        p.second = w;\n        G[u].push_back(p) ;\n        p.first = u;    \n        p.second = w;\n        G[v].push_back(p) ;\n    }\n    dijkstra_naive(s);\n    //dijkstra(s);\n    cout << d[t];\n}\n```\n\n\u5982\u679c\u6709\u540c\u5b66\u60f3\u8981\u677f\u5b50\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u770b\u6211\u7684\u535a\u5ba2QAQ\uff0c\u6709\u90e8\u5206\u6a21\u677f\u4ee3\u7801QAQ\n\n[\u5c31\u662f\u8fd9\u91cc\u5566](https://yizimiyuanxin.blog.luogu.org/post-ji-ben-suan-zhi-ding-ge-tai-suan-fa-shuo-ju-jie-gou-mu-ban)\n\n#### \u7b2c\u516d\u6b21\u53d1\u9898\u89e3\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u90a3\u4e9b\u4e00\u76f410\u5206\u7684\u540c\u5b66",
        "postTime": 1533459584,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u521a\u5b66Ford\n\n\u7ffb\u4e86\u534a\u5929\u7684\u9898\u89e3\n\n\u7adf\u7136\u6ca1\u6709\u4e00\u4e2ac++\u7684Ford\n\n\u53ef\u80fddalao\u90fd\u53bb\u7528SPFA\u4e86\uff08\u597d\u50cf\u662f\u52a0\u4e86\u4e00\u4e2a\u961f\u5217\u4f18\u5316\u3002\u53cd\u6b63\u6211\u4e0d\u4f1aQAQ\n\n\u4e8e\u662f\u4e3a\u4e86\u5bf9\u4ee5\u540e\u50cf\u6211\u8fd9\u6837\u7684\u849f\u84bb\u6709\u597d\u4e00\u70b9\n\n\u6211\u6253\u7b97\u53d1\u4e00\u4e2aFord\u7684\u9898\u89e3\n\n\u5173\u4e8eFord\u7684\u601d\u60f3\u6211\u5c31\u7565\u5fae\u8bb2\u4e0b\u5427\n\n\u9996\u5148\n\u677e\u5f1b\u662f\u6700\u91cd\u8981\u7684\n\n\u90a3\u6211\u4eec\u5148\u8003\u8651\u4e00\u6761\u8fb9\n\n\u7528dis[i]\u5b58\u5230i\u7684\u6700\u77ed\u8ddd\u79bb\n\n\u521d\u59cb\u5316\u65f6\u5c06dis[i]\u5168\u90e8\u5b58\u4e3aINF\n\nu[i],v[i],w[i]\u4ee3\u8868u[i]\u5230v[i]\u7684\u8ddd\u79bb\u4e3aw[i]\n\n\u5219\u4f1a\u6709\u4e0b\u9762\u8fd9\u4e2a\u5f0f\u5b50\n\n    if(dis[v[i]]>dis[u[i]]+w[i])\n\n        dis[v[i]]=dis[u[i]]+w[i];\n\n\u800c\u8fd9\u662f\u5904\u7406\u6709\u5411\u56fe\u7684\n\n\u6240\u4ee5\u5bf9\u4e8e\u8fd9\u9053\u65e0\u5411\u56fe\u7684\u9898\n\n\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u6b21\u3002\n\n    if(dis[u[i]]>dis[v[i]]+w[i])\n\n        dis[u[i]]=dis[v[i]]+w[i];\n\n\u90a3\u4e48\u4e00\u5171\u6709n\u6761\u8fb9\u7684\u8bdd\n\n\u5c31\u8981\u5bf9n\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\n\n\u5982\u679c\u6211\u4eec\u628a\u4e0a\u8ff0\u8bb0\u4e3a\u4e00\u6b21\u677e\u5f1b\u7684\u8bdd\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u5171\u5c31\u8981\u8fdb\u884c\u603b\u70b9\u6570-1\u6b21\u677e\u5f1b\n\n\u56e0\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u6700\u591a\u5c31\u5305\u62ec\u603b\u70b9\u6570-1\u6761\u8fb9\n\n\u6069\n\u601d\u8def\u8bb2\u5b8c\u4e86\n\n\u90a3\u6211\u5c31\u8d34\u4ee3\u7801\u4e86\n\n\u6709\u4e00\u70b9\u70b9\u6ce8\u91ca\u3002\n\n\n```cpp\n    #include<iostream>\n    using namespace std;\n    const int MAXN=6200+5;\n    const int INF=2e9;\n    int u[MAXN],w[MAXN],v[MAXN],dis[2501],s,e,m,n;\n    bool check;//\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8ba9\u6211\u4eec\u8fdb\u884c\u7565\u5fae\u7684\u4f18\u5316\n    int main()\n    {\n        cin>>m>>n>>s>>e;//m\u4e2a\u70b9\uff0cn\u6761\u8fb9\n        for(int i=1;i<=n;i++)\n            cin>>u[i]>>v[i]>>w[i];\n        for(int i=1;i<=m;i++)\n            dis[i]=INF;\n        dis[s]=0;//\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u4e3a0\n        m--;//\u4e00\u5171\u8fdb\u884cm-1\u6b21\u677e\u5f1b\uff0c\u53ef\u4ee5\u4f18\u5316\u65f6\u95f4\n        for(int j=1;j<=m;j++)\n        {\n            check=true;//\u6bcf\u4e00\u6b21\u677e\u5f1b\u5c06\u8fd9\u4e2a\u53d8\u91cf\u90fd\u7ed9true\n            for(int i=1;i<=n;i++)\n            {\n                if(dis[v[i]]>dis[u[i]]+w[i])\n                {\n                    dis[v[i]]=dis[u[i]]+w[i];\n                    check=false;\n                }\n                if(dis[u[i]]>dis[v[i]]+w[i])\n                {\n                    dis[u[i]]=dis[v[i]]+w[i];\n                    check=false;\n```\n}//\u5982\u679cdis\u5728\u677e\u5f1b\u4e2d\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u76f4\u63a5\u7ed3\u675f\uff08\u56e0\u4e3a\u5df2\u7ecf\u6c42\u51fa\u4e86\u6700\u77ed\u8def\u5f84\u554a\uff09\n```cpp\n            }                \n            if(check)    break;\n        }    \n        cout<<dis[e];//\u8f93\u51fa\n}\n```",
        "postTime": 1516197066,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5427 \u5c31\u662f\u7b80\u5355\u7684\u6700\u77ed\u8def\uff08\u6b64\u7bc7\u9898\u89e3\u4ee5\u5806\u4f18\u5316\u7684Dijkstra\u4e3a\u89e3\u6cd5\uff09\n\n\u4e0d\u4e86\u89e3\u6700\u77ed\u8def\u5404\u79cd\u7b97\u6cd5\u7684\u540c\u5b66\u8bf7\u5de6\u8f6c[\u8fd9\u91cc](https://www.luogu.org/blog/20160614dbdaw/p3371-mu-ban-dan-yuan-zui-duan-lu-jing-ruo-hua-ban-ti-xie)\n\n\u597d\u4e86\u73b0\u5728\u8d34\u4ee3\u7801:\n```\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\nusing namespace std;\nint hea[620001],tot,d[600021],v[620001];\nint n,m,s,e;\npriority_queue< pair<int,int> > q;//\u4e00\u7ef4\u4e3a\u8ddd\u79bb\u76f8\u53cd\u6570\uff08\u53d8\uff01\u5c0f\u6839\u5806\uff09\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u8282\u70b9\u7f16\u53f7 \nstruct Edge{\n\tint next,to,dis;\n}edge[620001];//\u90bb\u63a5\u8868\u5b58\u56fe\nvoid add(int x,int y,int z)\n{\n\tedge[++tot].next=hea[x];\n\tedge[tot].to=y;\n\tedge[tot].dis=z;\n\thea[x]=tot;\n}//\u63d2\u5165\u4e00\u6761\u4ecex\u5230y\uff0c\u8fb9\u6743\u4e3az\u7684\u8fb9\nint main()\n{\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&e);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);//\u65e0\u5411\u56fe\u53cc\u5411\u5b58\u8fb9\n\t}\n\tmemset(d,0x3f,sizeof(d));//\u91cd\u7f6e\n\tmemset(v,0,sizeof(v));//\u91cd\u7f6e\n\td[s]=0;q.push(make_pair(0,s));//\u5165\u5806\n\twhile(!q.empty())//\n\t{\n\t\tint x=q.top().second;q.pop();//\u53d6\u51fa\u5806\u9876\n\t\tif(v[x]) continue;\n\t\tv[x]=1;\n\t\tfor(int i=hea[x];i;i=edge[i].next)//\u626b\u63cf\u51fa\u8fb9\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(d[y]>d[x]+edge[i].dis)\n\t\t\t{\n\t\t\t\td[y]=d[x]+edge[i].dis;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}//\u677e\u5f1b\u64cd\u4f5c\n\t\t}\n\t} \n\tprintf(\"%d\",d[e]); \n\treturn 0; \n}\n```\n\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u5b66\u4f1a\u6700\u77ed\u8def\u7684\u7b97\u6cd5\uff0c\u4e5f\u5e0c\u671b\u7ba1\u7406\u5927\u5927\u80fd\u901a\u8fc7\u8fd9\u7bc7\u9898\u89e3",
        "postTime": 1569765902,
        "uid": 118300,
        "name": "\u626c\u76932006",
        "ccfLevel": 0,
        "title": "P1339 [USACO09OCT]\u70ed\u6d6aHeat Wave \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053**\u6700\u77ed\u8def\u5f84**\u7684\u6a21\u677f\u9898\u3002\n\n\u4e0b\u9762\u63d0\u4f9b\u8fd9\u4e48\u51e0\u4e2a\u7b97\u6cd5\uff1a\n\n\n------------\n\nBellman:\n\n\u66b4\u529b\uff0c\u5982\u679c\u9876\u70b9\u6570\u4e3aV\uff0c\u90a3\u4e48\u6267\u884cv-1\u6b21\uff0c\u6bcf\u6b21\u904d\u5386\u6240\u6709\u8fb9\uff0c\u505a\u677e\u5f1b\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(VE)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define INF 1<<30;\nint n;\nint dis[2501],cnt;\nstruct edge\n{\n\tint x,y,w;\n}Edge[20005];\nvoid add(int x,int y,int z){\n\tEdge[cnt].x=x;\n\tEdge[cnt].y=y;\n\tEdge[cnt++].w=z;\n}\nvoid bellman(){\n\tint flag=1,i,j;\n\tfor(j=0;j<n-1&&flag;j++){//\u505an-1\u6b21\n\t\tflag=0;\n\t\tfor(i=0;i<cnt;i++) {\n\t\t\tint u=Edge[i].x,v=Edge[i].y,w=Edge[i].w;\n\t\t\tif(dis[u]+w<dis[v]) {//\u677e\u5f1b\n\t\t\t\tflag=1;\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tint c,s,e,x,y,z;\n\tcin>>n>>c>>s>>e;\n\tfor(int i=1;i<=n;i++)dis[i]=INF;\n\tcnt=dis[s]=0;\n\tfor(int i=1;i<=c;i++) {\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tbellman();\n\tprintf(\"%d\\n\",dis[e]);\n}\n```\n\n\n------------\nDijkstra+\u5806\u4f18\u5316\uff1a\n\t\n1. \u521d\u59cb\u5316\uff0c\u4e0e\u8d77\u70b9\u8ddd\u79bb\u5168\u90e8\u6539\u6210INF\uff0c\u8d77\u70b9\u8bbe\u4e3a0\n2. \u627e\u4e0e\u8fd9\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\uff08\u8fd9\u6b65\u53ef\u7528\u5806\u4f18\u5316\uff09\n3. \u7528\u627e\u5230\u7684\u70b9\u505a\u677e\u5f1b\n4. \u6807\u8bb0\u8fd9\u4e2a\u70b9\uff0c\u4e00\u76f4\u5faa\u73af\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2505;\n#define INF 1e9\nvector<pair<int,int> >e[maxn];\nint d[maxn];\nvoid dijkstra(int s){\n\tpriority_queue<pair<int,int> >q;//\u5927\u6839\u5806\n\td[s]=0;\n\tq.push(make_pair(-d[s],s));\n\twhile(!q.empty()){\n\t\tint now=q.top().second;\n\t\tq.pop();\n\t\tfor(int i=0;i<e[now].size();i++) {\n\t\t\tint v=e[now][i].first;\n\t\t\tif(d[v]>d[now]+e[now][i].second) {//\u677e\u5f1b\n\t\t\t\td[v]=d[now]+e[now][i].second;\n\t\t\t\tq.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tint n,m,s,t;\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(int i=0;i<maxn;i++)e[i].clear(),d[i]=INF;\n\tfor(int i=1;i<=m;i++) {//\u5efa\u56fe\n\t\tint u,v,d;\n\t\tscanf(\"%d%d%d\",&u,&v,&d);\n\t\te[u].push_back(make_pair(v,d));\n\t\te[v].push_back(make_pair(u,d));\n\t}\n\tdijkstra(s);\n\tprintf(\"%d\\n\",d[t]);\n\treturn 0;\n}\n```\n\n\n------------\n\u8fd8\u6709\u4e2aSPFA\uff0c\u662fBellman\u7684\u4f18\u5316\uff0c\u56e0\u4e3a\u4e0d\u7a33\u5b9a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\u3002\n\n\u6700\u540e\u8bb0\u5f97\u70b9\u8d5e\uff0c\u8c22\u8c22\uff01\n",
        "postTime": 1576899082,
        "uid": 57779,
        "name": "LRL65",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "### \u770b\u7740\u795e\u7287\u4eec\u90fd\u5728\u7528SPFA\u3001Ford\u3001Dijkstra\u7b49\u7b49\u9ad8\u96be\u5ea6\u7b97\u6cd5,\n### \u672c\u849f\u84bb\u4e5f\u53ea\u597d\u4e0a\u4f20\u4e00\u4e2aFloyd\u6765\u51d1\u6570.\n### \u4e0b\u9762\u662f\u4e00\u4e9b\u5173\u4e8eFloyd\u7684\u4ecb\u7ecd\uff1a\n------------\n\u901a\u8fc7Floyd\u8ba1\u7b97\u56feG=(V,E)\u4e2d\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u9700\u8981\u5f15\u5165\u4e24\u4e2a\u77e9\u9635\uff0c\u77e9\u9635S\u4e2d\u7684\u5143\u7d20a[i][j]\u8868\u793a\u9876\u70b9i(\u7b2ci\u4e2a\u9876\u70b9)\u5230\u9876\u70b9j(\u7b2cj\u4e2a\u9876\u70b9)\u7684\u8ddd\u79bb\u3002\u77e9\u9635P\u4e2d\u7684\u5143\u7d20b[i][j]\uff0c\u8868\u793a\u9876\u70b9i\u5230\u9876\u70b9j\u7ecf\u8fc7\u4e86b[i][j]\u8bb0\u5f55\u7684\u503c\u6240\u8868\u793a\u7684\u9876\u70b9\u3002\n\n\u5047\u8bbe\u56feG\u4e2d\u9876\u70b9\u4e2a\u6570\u4e3aN\uff0c\u5219\u9700\u8981\u5bf9\u77e9\u9635D\u548c\u77e9\u9635P\u8fdb\u884cN\u6b21\u66f4\u65b0\u3002\u521d\u59cb\u65f6\uff0c\u77e9\u9635D\u4e2d\u9876\u70b9a[i][j]\u7684\u8ddd\u79bb\u4e3a\u9876\u70b9i\u5230\u9876\u70b9j\u7684\u6743\u503c\uff1b\u5982\u679ci\u548cj\u4e0d\u76f8\u90bb\uff0c\u5219a[i][j]=\u221e\uff0c\u77e9\u9635P\u7684\u503c\u4e3a\u9876\u70b9b[i][j]\u7684j\u7684\u503c\u3002 \u63a5\u4e0b\u6765\u5f00\u59cb\uff0c\u5bf9\u77e9\u9635D\u8fdb\u884cN\u6b21\u66f4\u65b0\u3002\u7b2c1\u6b21\u66f4\u65b0\u65f6\uff0c\u5982\u679c\u201da[i][j]\u7684\u8ddd\u79bb\u201d > \u201ca[i][0]+a[0][j]\u201d(a[i][0]+a[0][j]\u8868\u793a\u201di\u4e0ej\u4e4b\u95f4\u7ecf\u8fc7\u7b2c1\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb\u201d)\uff0c\u5219\u66f4\u65b0a[i][j]\u4e3a\u201da[i][0]+a[0][j]\u201d,\u66f4\u65b0b[i][j]=b[i][0]\u3002 \u540c\u7406\uff0c\u7b2ck\u6b21\u66f4\u65b0\u65f6\uff0c\u5982\u679c\u201da[i][j]\u7684\u8ddd\u79bb\u201d > \u201ca[i][k-1]+a[k-1][j]\u201d\uff0c\u5219\u66f4\u65b0a[i][j]\u4e3a\u201da[i][k-1]+a[k-1][j]\u201d,b[i][j]=b[i][k-1]\u3002\u66f4\u65b0N\u6b21\u4e4b\u540e\uff0c\u5c31\u80fd\u6c42\u51fa\u6700\u77ed\u8def\u4e86\u5462\uff01\n\n------------\nFloyd\u4ecb\u7ecd\u7ed3\u675f.\u4e0b\u9762\u662f\u4ee3\u7801,\u4ee3\u7801\u91cc\u6709\u89e3\u91ca.\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nint c,t,ts,te,ti,dis[2501],f[2501][2501],fi,d;\nbool flag[2501]= {0};\nint main() {\n    cin>>t>>c>>ts>>te;\n    memset(f,9999999,sizeof(f));\t//\u5148\u628a\u6bcf\u4e2a\u8ddd\u79bb\u8bbe\u4e3a\u5047\u60f3\u65e0\u7a77\u5927\n    for(int i=1; i<=c; i++) {\n        cin>>fi>>ti>>d;\n        f[fi][ti]=f[ti][fi]=d;\t\t//\u7531\u4e8e\u8fd9\u662f\u65e0\u5411\u56fe,\u6240\u4ee5\u9700\u8981\u5bf9\u79f0\u4e00\u4e0b\n    }\n    for(int i=1; i<=t; i++) dis[i]=f[ts][i];\n    flag[ts]=true;\n    for(int i=1; i<t; i++) {\n        int minl=9999999,k=0;\n        for(int j=1; j<=t; j++)\n            if(!flag[j]&&dis[j]<minl)\t//Floyd\u6a21\u677f\u4ee3\u7801\n                minl=dis[j],k=j;\n        if(k==0) break;\n        flag[k]=true;\n        for(int j=1; j<=t; j++)\n            if(dis[k]+f[k][j]<dis[j])\t//\u8fd8\u662f\u4e2a\u6a21\u677f\n                dis[j]=dis[k]+f[k][j];\n    }\n    cout<<dis[te];\n}\n```\n _(\u7801\u5b57\u4e0d\u5bb9\u6613,\u6c42\u7ba1\u7406\u5458\u901a\u8fc7)_ ",
        "postTime": 1537250189,
        "uid": 84991,
        "name": "_\u81ea\u52a8AC\u673a_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\u5b9e\u9645\u4e0a\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u9898\u76ee\uff0c\u5f53\u7136\u8fd8\u662f\u6709\u5f88\u591a\u65b9\u6cd5\u7684\uff0c\u5c31\u6bd4\u5982SPFA,dijkstra(\u6807\u51c6\uff0c\u5806\u4f18\u5316)\u7b49\u7b49\uff0c\u7136\u800c\u5f53\u6211\u770b\u5230dalao\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u7684\u65f6\u5019\uff0c\u53ea\u5269\u4e0b\u4e86Orz\uff0c\u73b0\u5728\u5c31\u6765\u8bb2\u4e00\u4e0b\u6211\u7684\u601d\u8def\u5427\uff01\n\n---\n# \u601d\u8def\n\u8fd9\u6b21\u6211\u4f9d\u7136\u4e0d\u8d70\u5bfb\u5e38\u8def\uff0c\u7528\u7684\u662fdijkstra+zkw\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u8fd9\u4efd\u4ee3\u7801\u662f\u8fd9\u5468\u65e5\u5199\u7684\uff0c\u6240\u4ee5\u8bf4\u8fd8\u662f\u6bd4\u8f83\u795e\u5947\u7684,\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u7136\u800c\u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u5148\u5728\u53f6\u5b50\u8282\u70b9\u5904\u66f4\u65b0dis\u7684\u6700\u5c0f\u503c\u4ee5\u53cadis\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0c\u5177\u4f53\u53ef\u4ee5\u8868\u73b0\u5728![](https://cdn.luogu.com.cn/upload/pic/43528.png)\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f$O(n)$\u7684\uff0c\u7136\u540e\u5220\u9664\u8be5\u70b9\u7684\u65f6\u5019\u9700\u8981\u5355\u70b9\u4fee\u6539\uff0c\u5728\u677e\u5f1b\u64cd\u4f5c\u5b8c\u6210\u540e\u8fd8\u8981\u8fdb\u884c\u4fee\u6539\uff0c\u603b\u7684\u6765\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n+elogn)$\n\n---\n# \u4ee3\u7801(25ms\u4e0d\u52a0O2)(\u8fd8\u662f\u6bd4\u8f83\u6162\u7684)\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define rr register\nusing namespace std;\nconst int inf=707406378;\nstruct node{int y,w,next;}e[12501];\nint n,m,s,t,bas=1,k=1,ls[2511],w[8201],p[8201],dis[2511];\ninline signed iut(){\n    rr int ans=0; rr char c=getchar();\n    while (!isdigit(c)) c=getchar();\n    while (isdigit(c)) ans=(ans<<3)+(ans<<1)+c-48,c=getchar();\n    return ans;\n}\ninline void add(int x,int y,int w){e[++k]=(node){y,w,ls[x]}; ls[x]=k;}\ninline void update(int x){\n    w[x]=(w[x<<1]<w[x<<1|1])?w[x<<1]:w[x<<1|1];//\u53d6\u5de6\u5b50\u53f3\u5b50\u6700\u5c0f\u503c\n    p[x]=(w[x<<1]>w[x<<1|1])?p[x<<1|1]:p[x<<1];//\u5b9e\u65f6\u66f4\u65b0\u7f16\u53f7\n}\nsigned main(){\n    n=iut(); m=iut(); s=iut(); t=iut();\n    for (rr int i=1;i<=m;++i){\n        rr int x=iut(),y=iut(),w=iut();\n        add(x,y,w); add(y,x,w);\n    }\n    while ((bas<<=1)<n+2);//\u7531\u4e8e\u533a\u95f4\u4fee\u6539\u9700\u8981\u6269\u5f20\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u7a7a\u95f4\u8981\u591a1\u4f4d\uff0c\u603b\u4e4b\u5e94\u57282^x>n\u7684\u8303\u56f4\u5185\n    fill(w+1,w+2+(bas<<1),inf); fill(dis+1,dis+1+n,inf);//\u5168\u90e8\u521d\u59cb\u8bdd\u4f4d\u4e00\u4e2a\u5f88\u5927\u7684\u503c\n    fill(p+1,p+2+(bas<<1),inf); w[s+bas-1]=dis[s]=0;//\u90a3\u4e48\n    for (rr int i=0;i<n;++i) p[bas+i]=i+1;//\u8f93\u5165\u7f16\u53f7\n    for (rr int i=bas-1;i;--i) update(i);//\u8bb0\u4f4fbas\u8868\u793a\u7684\u662f\u5f53\u4e3a\u6ee1\u4e8c\u53c9\u6811\u65f6\u9664\u6700\u540e\u4e00\u5c42\u7684\u4e2a\u6570+1\uff0c\u6240\u4ee5\u8bf4\u8981\u51cf\u63891\n    while (w[1]<inf){//\u4e5f\u5c31\u662f\u8bf4\u90fd\u6ca1\u6709\u8bbf\u95ee\u8fc7\n        rr int x=p[1],y=p[1]+bas-1; w[y]=inf;\n        for (y>>=1;y;y>>=1) update(y);//\u5220\u9664\u73b0\u5728\u7684\u6700\u5c0f\u70b9\n        for (rr int i=ls[x];i;i=e[i].next)\n        if (dis[e[i].y]>dis[x]+e[i].w){//\u8fd9\u4e00\u6bb5\u957f\u7684\u633a\u50cfSPFA\u7684\n            dis[e[i].y]=dis[x]+e[i].w; rr int t=e[i].y+bas-1;\n            for (w[t]=dis[e[i].y],t>>=1;t;t>>=1) update(t);//\u677e\u5f1b\u64cd\u4f5c\u540e\u65b0\u5230\u8fbe\u7684\u8282\u70b9\u63d2\u5165zkw\u7ebf\u6bb5\u6811\u4e2d\n        }\n    }\n    return !printf(\"%d\",dis[t]);//\u8f93\u51fas\u5230t\u7684\u8ddd\u79bb\n}\n```",
        "postTime": 1542200372,
        "uid": 37782,
        "name": "lemondinosaur",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u91c7\u7528\u4e86\u4e24\u79cd\u7b97\u6cd5\uff1a\n\n1.\u5806\u4f18\u5316\u7684dijkstra\n\n[dij\u4f20\u9001\u95e8](https://baike.baidu.com/item/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/4049057?fromtitle=Dijkstra%E7%AE%97%E6%B3%95&fromid=215612&fr=aladdin)\n\n2.SPFA\n\n[SPFA\u4f20\u9001\u95e8](https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&fromid=11018124&fr=aladdin)\n\n\u4e24\u79cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5982\u4e0b\uff1a\n\n1.O((n+m)logn)\n\n2.O(me)\n\n\u8fd9\u662f\u4e00\u9053\u9002\u5408\u65b0\u4eba\u7684\u5355\u6e90\u6700\u77ed\u8def\u7684\u9898\u3002\n\n# Dijkstra\n\n```cpp\n//1339\n#include <cstdio>\n#include <iostream>\n#include <queue>\nusing namespace std;\nint const N=100001,INF=1e9;\nint tot,n,m,s,t,f[N],\ntarget[N],prev[N],last[N],v[N],vis[N];\nstruct node{\n    int id,dis;\n    bool operator < (const node &a) const{\n        return a.dis<dis;\n    }\n};\nvoid add(int a, int b, int c){\n    target[++tot]=b; \n    prev[tot]=last[a]; \n    v[tot]=c;          \n    last[a]=tot;       \n}\nint main(){\n    int a,b,c;\n    priority_queue<node> qu;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for (int i=1;i<=m;i++){ \n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n        add(b,a,c); \n    }\n    for (int i=1;i<=n;i++) f[i]=INF; \n    f[s]=0; \n    qu.push(node{s,f[s]});\n    while (!qu.empty()){\n        int x=qu.top().id,ptr=last[x];  \n        qu.pop();\n        if(x==t) break;\n        if(vis[x]) continue;\n        vis[x]=1;\n        while (ptr){ \n            int y=target[ptr]; \n            if (!vis[y]&&f[x]+v[ptr]<f[y]){ \n                f[y]=f[x]+v[ptr];\n                qu.push(node{y,f[y]});\n            }\n            ptr=prev[ptr]; \n        }\n    }\n    printf(\"%d\\n\",f[t]);\n    return 0;\n}\n```\n\n# SPFA\n\n```cpp\n//spfa\n#include <cstdio>\n#include <cstdio>\n#include <iostream>\n#include <queue>\nusing namespace std;\nint const N=100001,INF=1e9;\nint tot,n,m,s,t,f[N],\ntarget[N],prev[N],last[N],v[N];\nvoid add(int a, int b, int c){\n    target[++tot]=b; \n    prev[tot]=last[a]; \n    last[a]=tot;      \n    v[tot]=c;         \n}\nint main(){\n    int a,b,c;\n    queue<int> qu;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for (int i=1;i<=m;i++){ \n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n        add(b,a,c); \n    }\n    for (int i=1;i<=n;i++) f[i]=INF; \n    \n    f[s]=0; \n    qu.push(s);\n    while (qu.size()){\n        int x=qu.front(),ptr=last[x];  \n        qu.pop();\n        while (ptr){ \n            int y=target[ptr]; \n            if (f[x]+v[ptr]<f[y]){ \n                f[y]=f[x]+v[ptr];\n                qu.push(y); \n            }\n            ptr=prev[ptr]; \n        }\n    }\n    printf(\"%d\\n\",f[t]);\n    return 0;\n}\n```\n\n",
        "postTime": 1558862873,
        "uid": 165561,
        "name": "lian_sama",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "~~\u597d\u50cf\u6ca1\u4eba\u53d1Python\u9898\u89e3~~\n\n~~\u672c\u4eba\u56e0\u4e3aNOIP2018\u6ca1\u8fc7\u5df2AFO\uff0c\u95f2\u7740\u65e0\u804a\u5f00\u59cb\u5b66Python~~\n\n\u6838\u5fc3\u7b97\u6cd5\uff1aDijkstra\uff08\u88f8\u7684\u5b8c\u5168\u80fd\u8fc7\uff0c\u6bd5\u7adf\u662f\u6a21\u677f\u9898\uff09\n\n\u5f00\u59cb\u5047\u8bbe\u6240\u6709\u70b9\u5230\u8d77\u59cb\u70b9\u7684\u8ddd\u79bb\u90fd\u662finf\uff08dis[]=inf\uff09\uff0c\u7136\u540e\u904d\u5386\u4e0e\u8d77\u59cb\u70b9\u8fde\u63a5\u7684\u6240\u6709\u70b9\uff0c\u627e\u51fae[s][i]\u6700\u77ed\u7684\u7136\u540e\u8f6c\u79fb\u539f\u70b9\u5230\uff0c\u6765\u4e00\u6ce2\u677e\u5f1b\u3002\n\n\u6700\u540e\u8f93\u51fadis[t]\u5373\u53ef\u3002\n\n```python\nn,m,s,t=map(int,input().split())\nconn=[[99999999999 for i in range(n+2)]for i in range(n+2)]\ndis=[99999999999 for i in range(n+2)]\nvis=[0 for i in range(n+2)]\nfor i in range(m):\n    a,b,c=map(int,input().split())\n    conn[a][b]=conn[b][a]=c\ndis[s]=0\nfor i in range(1,n+1):\n    minv=99999999999\n    minn=0\n    for j in range(1,n+1):\n        if vis[j]==0 and dis[j]<=minv:\n            minn=j\n            minv=dis[j]\n    vis[minn]=1\n    for j in range(1,n+1):\n        if dis[j]>dis[minn]+conn[minn][j]:\n            dis[j]=dis[minn]+conn[minn][j]\nprint(dis[t])\n\n```\n\u6ce8\u610f\u662fPython3 ! ~~Python2\u7684\u73a9\u5bb6\u522b\u88ab\u5e26\u574f\u4e86\uff01~~",
        "postTime": 1539834544,
        "uid": 89185,
        "name": "ytfiqpl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6807\u51c6\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\n\n\u65e0\u5411\u56fe\uff01\u65e0\u5411\u56fe\uff01\u65e0\u5411\u56fe\uff01\n\n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff01\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;  \nint i,j,k,s,t,n,m,f[2501][2501],c[2501],x,y,z,minn,maxx=10e8;\nbool b[2501];\nint main()  \n{    \n    cin>>n>>m>>s>>t;\n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=n;j++)\n        {\n            f[i][j]=10e7;               //\u90bb\u63a5\u77e9\u9635\u521d\u59cb\u5316\u3002\n        }\n    }\n    for(i=1;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        f[x][y]=z;\n        f[y][x]=z;\n    }                                  //\u6570\u636e\u8bfb\u5165\u90bb\u63a5\u77e9\u9635\u3002\u6ce8\u610f\u65e0\u5411\u56fe\uff01\n      //\u7136\u540e\u5c31\u662f\u6807\u51c6\u7684Dijkstra\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u4e86\u2026\u2026\n    for(i=1;i<=n;i++)\n    {\n        c[i]=f[s][i];\n    }\n    memset(b,false,sizeof(b));\n    b[s]=true;\n    c[s]=0;\n    for(i=1;i<=n-1;i++)\n    {\n        minn=maxx;\n        k=0;\n        for(j=1;j<=n;j++)\n        {\n            if((!b[j])&&(c[j]<minn)){\n                minn=c[j];\n                k=j;\n            }\n        }\n        if(k==0) break;\n        b[k]=true;\n        for(j=1;j<=n;j++)\n        {\n            if(c[k]+f[k][j]<c[j]) c[j]=c[k]+f[k][j];\n        }\n    }\n    cout<<c[t];       //\u8f93\u51fa\u6700\u5c0f\u8d39\u7528\n    return 0;  \n}\n```",
        "postTime": 1470809922,
        "uid": 11864,
        "name": "_xcc_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7eaf\u5c5e\u662f\u4e00\u4e2a\u88f8\u7684SPFA\uff1b\n\n\u5efa\u8bae\u5148\u628a\u6a21\u677fAC\u4e4b\u540e\u518d\u505a\u3002\n\n[P3371](https://www.luogu.org/problemnew/show/P3371 \"P3371\")\n\n\u53ea\u9700\u8981\u505a\u4e00\u4e9b\u624b\u811a\uff0c\u5c31\u662f\u5728\u52a0\u8fb9\u7684\u65f6\u5019\u52a0\u4e00\u4e2a\u53cc\u5411\u8fb9\u5c31\u597d\u3002\n\n\u7136\u540e\u518d\u7b2c\u4e00\u6b21\u52a0\u70b9\u7684\u65f6\u5019\n\n[SPFA\u6a21\u677f](https://www.luogu.org/blog/suqingnian/dan-yuan-zui-duan-lu-spfa-suan-fa)\n\n\u770b\u4e0d\u61c2\u6a21\u677f\u7684\u51fa\u95e8\u5de6\u8f6c\u5ea6\u5a18\u3002\n\n\u63a8\u8350\u4e0b\u9762\u4e00\u7247\u8bb2\u89e3\uff1a\n\n[\u53cb\u94fe](http://www.360doc.com/content/13/1208/22/14357424\\_335569176.shtml)\n\n\u6240\u4ee5\u8bf4\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\nstruct data{\n    int v;int next;\n    int value;\n}edge[500010];//\u4e34\u754c\u94fe\u8868\u5b58\u53d8\nint cnt;\nint alist[10010];\nvoid add(int u,int v,int value)\n{\n    edge[++cnt].v=v;\n    edge[cnt].value=value;\n    edge[cnt].next=alist[u];\n    alist[u]=cnt;\n    return ;\n}//\u52a0\u8fb9\nqueue<int> q;\nbool ins[10010];\nint d[10010];\nvoid spfa(int x)//\u8dd1\u4e00\u8fb9SPFA\uff0c\u539f\u7406\u5728\u4e0a\u9762\n{\n    d[x]=0;\n    q.push(x);\n    ins[x]=true;\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();ins[now]=false;\n        int next=alist[now];\n        while(next)\n        {\n            int v=edge[next].v;\n            int value=edge[next].value;\n            if(d[v]>d[now]+value)\n            {\n                d[v]=d[now]+value;\n                if(!ins[v])\n                {\n                    q.push(v);\n                    ins[v]=true;\n                }\n            }\n            next=edge[next].next;\n        }\n    }\n    return ;\n}\nint m,n,s,e;\nint main()\n{\n    scanf(\"%d%d%d%d\",&m,&n,&s,&e);//\u8f93\u5165\n    for(int i=1;i<=n;i++)\n    {\n        int u,v,value;\n        scanf(\"%d%d%d\",&u,&v,&value);\n        add(u,v,value);//\u52a0\u8fb9\n        add(v,u,value);//\u53cd\u5411\u8fb9\n    }\n    for(int i=0;i<=m;i++)\n        d[i]=0x3f3f3f3f;//\u521d\u59cb\u5316\n    spfa(s);//\u8dd1SPFA\n    printf(\"%d\",d[e]);//\u8f93\u51fa\n    return 0;//\u7a0b\u5e8f\u62dc\u62dc\n}\n```",
        "postTime": 1516094843,
        "uid": 57699,
        "name": "Arcturus1350",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u5148\u819c\u62dc\u4e00\u4e0b\u5927\u4f6c\u4eec\n\n\uff08\u849f\u84bbBritainia\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\uff0c\u7ba1\u7406\u5458dalao\u4eec\u8bf7\u89c1\u8c05\n\n\u5bf9\u4e8e\u6211\u8fd9\u4e2a\u56fe\u8bba\u6e23\u6e23\uff0c\u4e5f\u5c31\u53ea\u80fd\u53d1\u4e00\u4e2aDijkstra+\u5806\u4f18\u5316\u7684\u9898\u89e3\u4e86w=0=w\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u4ee3\u7801\u7684\u6838\u5fc3\u90e8\u5206\n\n```cpp\nint v=e[i].v,w=e[i].w;\nif(d[u]+w<d[v]){\n     d[v]=d[u]+w;\n     q.push((node){v,d[v]});\n}\n```\n\u5176\u5b9e\u5c31\u662f\u4ece\u8d77\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def+\u8fd9\u4e2a\u70b9\u5230\u5176\u4e00\u4e2a\u76f8\u90bb\u7684\u70b9\u7684\u8ddd\u79bb\u5982\u679c\u5c0f\u4e8e\u8fd9\u4e2a\u70b9\u73b0\u5728\u7684\u6700\u77ed\u8def\u5219\u66f4\u65b0\uff0c\u5165\u961f\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define re register\nusing namespace std;\ninline int read(){\n    int X=0,w=1; char c=getchar();\n    while (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n    while (c>='0'&&c<='9') X=(X<<3)+(X<<1)+c-'0',c=getchar();\n    return X*w;\n}\nstruct Edge { int v,w,nxt;};Edge e[500010];int head[100010],cnt=0;\ninline void addEdge(int u,int v,int w) {\n    e[++cnt].v=v;e[cnt].w=w;\n    e[cnt].nxt=head[u];head[u]=cnt;\n}\nint n,m,s1,s2;int d[100010];\nstruct node {\n    int u,d;\n    bool operator <(const node& rhs) const {\n        return d>rhs.d;//\u56e0\u4e3a\u662f\u4f18\u5148\u961f\u5217\u6240\u4ee5\u8981\u91cd\u8f7d \n    }\n};\ninline void Dijkstra() {\n    for (re int i=1;i<=n;i++) d[i]=2147483647;\n    d[s1]=0;priority_queue<node> q;q.push((node){s1,0});//\u4f18\u5148\u961f\u5217 \n    while (!q.empty()) {\n        node fr=q.top(); q.pop();int u=fr.u,di=fr.d;if (di!=d[u]) continue;\n        for (re int i=head[u];i;i=e[i].nxt) {\n            int v=e[i].v,w=e[i].w;\n            if(d[u]+w<d[v]){\n                d[v]=d[u]+w;q.push((node){v,d[v]});\n            }\n        }\n    }\n}\n\nint main() {\n    n=read(),m=read(),s1=read(),s2=read();\n    for (re int i=1;i<=m;i++) {\n        int x=read(),y=read(),z=read();\n        addEdge(x,y,z);addEdge(y,x,z);//\u5b58\u8fb9 \n    }\n    Dijkstra();printf(\"%d\\n\",d[s2]);\n    return 0;\n}\n```\n\u597d\u5566\uff0c\u8fd9\u5c31\u662f\u6b63\u89e3\u5566\n\n\n------------\n\n\u4e0b\u9762\u6765\u4e00\u7bc7\u7eaf\u5c5e\u5a31\u4e50\u7684\u975e\u6b63\u89e3\u3002\n\n\u6700\u8fd1\u8d70\u5728\u8def\u4e0a\u7a81\u53d1\u5947\u60f3\u8bf4kruskal+dfs\u53ef\u4e0d\u53ef\u4ee5\u505a\u6700\u77ed\u8def\u3002\n\n\uff08\u51e0\u79d2\u4e4b\u5185\u5c31\u88ab\u5426\u51b3\u6389\u4e86\n\n\u5f53\u7136\u6211\u8fd8\u662f\u5199\u4e86\u8fd9\u6837\u4e00\u4e2a\u4ee3\u7801\uff0c\u7ed3\u679c\n\n# 60pts!!!\n\n\u8bc4\u6d4b\u8bb0\u5f55\uff1a\n\nhttps://www.luogu.org/recordnew/show/19190157\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Edge{int u,v,w;}edge[500005];bool f[10005];\nint n,m,s1,s2,fa[10005],cnt,d[10005];\nvector<pair<int,int> > g[10005];\nbool cmp(Edge x,Edge y){return x.w<y.w;}\nint find(int x){while(x!=fa[x]) x=fa[x]=fa[fa[x]];return x;}\nvoid dfs(int x,int d){\n\tf[x]=1;for(int i=0;i<g[x].size();i++){\n\t\tif(f[g[x][i].first]) continue;\n        f[g[x][i].first]=1;\n\t\td[g[x][i].first]=g[x][i].second+d;\n        dfs(g[x][i].first,g[x][i].second+d);\n\t}\n}\nint main( ){\n\tcin>>n>>m>>s1>>s2;for(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++) cin>>edge[i].u>>edge[i].v>>edge[i].w;\n\tsort(edge+1,edge+1+m,cmp);\n        int eu,ev;memset(f,0,sizeof(f)); \n\tfor(int i=1;i<=m;i++){\n\t\teu=find(edge[i].u);ev=find(edge[i].v);\n\t\tif(eu==ev) continue;fa[eu]=ev;cnt++;\n\t\tg[edge[i].u].push_back(make_pair(edge[i].v,edge[i].w));\n\t\tg[edge[i].v].push_back(make_pair(edge[i].u,edge[i].w));\n\t\tif(cnt==n-1) break;\n\t}\n\tdfs(s1,0);cout<<d[s2]<<endl;return 0;\n}\n```\n\n",
        "postTime": 1558256310,
        "uid": 95453,
        "name": "ExBritainia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u672c\u83dc\u9e1f\u53c2\u8003\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u300b\u4e0a\u7684\u7ecf\u5178\u4ee3\u7801\u5199\u7684\u6a21\u7248\uff0c\u5305\u62ecdijkstra\u3001bellmanFord\u3001spfa\u3002\u5b9e\u6d4b\u90fd\u572850MS\u4ee5\u5185\uff0c\u5206\u4eab\u7ed9\u5927\u5bb6\u3002\u795e\u725b\u52ff\u55b7\u3002\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int, int> P;\nconst int N = 2505;\nint head[N], cnt;\nstruct road{\n    int to, nxt, val;\n}e[12405];\nstruct edge{\n    int from, to, val;\n}edges[12405];\nvoid add(int a, int b, int v){\n    cnt++;\n    e[cnt].to = b;\n    e[cnt].nxt = head[a];\n    e[cnt].val = v;\n    head[a] = cnt;\n}\nint d[N], INF = 0x3f3f3f3f;\nint dijkstra(int a, int b)\n{\n    priority_queue<P, vector<P>, greater<P> > que;\n    memset(d, INF, sizeof(d));\n    d[a] = 0;\n    que.push(P(0, a));\n    while(!que.empty()){\n        P p = que.top();\n        que.pop();\n        if(d[p.second] < p.first) continue;\n        for(int i = head[p.second]; i != 0; i = e[i].nxt){\n            if(e[i].val + p.first < d[e[i].to])\n            {\n                d[e[i].to] = e[i].val + p.first;\n                que.push(P(d[e[i].to], e[i].to));\n            }\n        }\n    }\n    return d[b];\n}\nint C;\nint bellmanFord(int a, int b)\n{\n    memset(d, INF, sizeof(d));\n    d[a] = 0;\n    while(true){\n        bool update = false;\n        for(int i = 0; i < 2 * C; i++)\n        {\n            if(d[edges[i].from] + edges[i].val < d[edges[i].to])\n            {\n                d[edges[i].to] = d[edges[i].from] + edges[i].val;\n                update = true;\n            }\n        }\n        if(!update) break;\n    }\n    return d[b];\n}\nbool vis[N];\nint spfa(int a, int b)\n{\n    memset(d, INF, sizeof(d));\n    memset(vis, 0, sizeof(vis));\n    queue<int> que;\n    que.push(a);\n    d[a] = 0;\n    vis[a] = true;\n    while(!que.empty()){\n        int u = que.front();\n        que.pop();\n        vis[u] = false;\n        for(int i = head[u]; i != 0; i = e[i].nxt){\n            if(d[u] + e[i].val < d[e[i].to]){\n                d[e[i].to] = d[u] + e[i].val;\n                if(!vis[e[i].to]){\n                    vis[e[i].to] = true;\n                    que.push(e[i].to);\n                }\n            }\n        }\n    }\n    return d[b];\n}\nint main()\n{\n    int T, Ts, Te;\n    cin>>T>>C>>Ts>>Te;\n    for(int i = 0; i < C; i++){\n        int s, e, v;\n        cin>>s>>e>>v;\n        add(s, e, v);\n        add(e, s, v);\n        edges[2 * i].from = s;\n        edges[2 * i].to = e;\n        edges[2 * i].val = v;\n        edges[2 * i + 1].from = e;\n        edges[2 * i + 1].to = s;\n        edges[2 * i + 1].val = v;\n    }\n    //cout<<dijkstra(Ts, Te)<<endl;\n    //cout<<bellmanFord(Ts, Te)<<endl;\n    cout<<spfa(Ts, Te)<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1557663582,
        "uid": 207465,
        "name": "skyipeng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\uff01\u6700\u77ed\u8def\uff01\u6700\u77ed\u8def\uff01\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff01\n\n\u5148\u8bb2\u89e3\u4e00\u4e0b\u8f93\u5165\u6570\u636e\uff1a\n\n7 11 5 4 //t\u4e2a\u57ce\u9547, c\u6761\u9053\u8def, Ts\uff08\u8d77\u70b9\uff09, Te\uff08\u7ec8\u70b9\uff09\n\n2 4 2 //\u57ce\u9547rs\u5230\u57ce\u9547re\u8d39\u7528ci\u3002\n\n1 4 3\n7 2 2\n3 4 3\n5 7 5\n7 3 3\n6 1 1\n6 3 4\n2 4 3\n5 6 3\n7 2 1\n\u8f93\u51fa\u6570\u636e\uff1a\n\n7 //5->6->1->4 (3 + 1 + 3)\n\n\u89e3\u9898\u601d\u8def\u662f\uff1a\n\n\u9996\u5148\u8981\u521d\u59cb\u5b9a\u4e49\u6240\u6709\u6570\u7ec4&\u7ed3\u6784\u4f53\uff08\u7b80\u5355\u7684\u4e0d\u7528\u8bf4\u4e86\u5427\uff09\uff0c\n\n\u7136\u540e\u4ecets\u5f00\u59cbbfs\u4e00\u4e0b\uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u6700\u77ed\u7684\u8def\u6700\u540e\u8f93\u51fate\uff0c2333\u5c31AC\u5566\uff01\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n    #include<cstdio>\n    #include<cstring>\n    int a[6500],b[6500];\n    bool c[6500];\n    int u[20005],v[20005],w[20005],nst[20005];\n    int dl[10001];\n    int n,m,s,e,len=0;\n    int main()\n    {\n        int i,j;\n        scanf(\"%d%d%d%d\",&n,&m,&s,&e);\n        for(i=1;i<=m;i++)\n        {\n            len++;\n            scanf(\"%d%d%d\",&u[len],&v[len],&w[len]);\n            nst[len]=b[u[len]];\n            b[u[len]]=len;\n            len++;\n            u[len]=v[len-1],v[len]=u[len-1],w[len]=w[len-1];\n            nst[len]=b[u[len]];\n            b[u[len]]=len;\n        }\n        for(i=1;i<=n;i++) a[i]=999999999;\n        dl[1]=s; c[s]=1; a[s]=0;\n        int h=0,t=1;\n        while(h!=t)\n        {\n            h++;\n            if(h>10000) h=1;\n            for(int k=b[dl[h]];k;k=nst[k])\n            {\n                if(a[v[k]]>a[u[k]]+w[k])\n                {\n                    a[v[k]]=a[u[k]]+w[k];\n                    if(!c[v[k]])\n                    {\n                        t++;\n                        if(t>10000) t=1;\n                        dl[t]=v[k];\n                        c[v[k]]=1;\n                    }\n                }\n            }\n            c[dl[h]]=0;\n        }\n        printf(\"%d\\n\",a[e]);\n        return 0;\n}\n```",
        "postTime": 1513497121,
        "uid": 48662,
        "name": "cccly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "# \u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0cSPFA\uff0c\u5c31\u4e0d\u8be6\u7ec6\u8bb2\u89e3\u4e86\uff0c\u5e26\u6765\u666e\u901a\u4e0epb\\_ds\u4e24\u4e2a\u7248\u672c #\n\n**\u542c\u8bf4\u8fd9\u9898\u662f\u67d0\u4e9b\u4eba\u7684\u7ec3\u624b\u9898\uff0c\u6211\u5c31\u6765\u4e00\u53d1\u9898\u89e3(\u5176\u5b9e\u8fd9\u662f\u4ece\u67d0\u9898\u590d\u5236\u8fc7\u6765\u7684)**\n\n**\u4e0d\u8fc7\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u5413\u5230\u6211\u4e86...**\n\n\n\n## \u8fd9\u662f\u6b63\u5e38\u7248\u672c ##\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h> //\u4e07\u80fd\u5934\u6587\u4ef6 \nusing namespace std;\nstruct Edge\n{\n    int nxt, to, val;\n}a[3125000]; //\u5947\u602a\u7684struct \nint fir[5000], d[5000], b[5000];\nint n, m, u, v, w, cnt, s, e;\nqueue < int > q;\nint read_int() //\u5feb\u8bfb \n{\n    int x, f = 1;\n    char ch;\n    while (ch = getchar(), ch < 48 || ch > 57)\n        if (ch == '-') f = -f;\n    x = ch - 48;\n    while (ch = getchar(), ch >= 48 && ch <= 57)\n        x = x * 10 + ch - 48;\n    return x * f;\n}\nvoid write_int(int x) //\u5feb\u8f93(\u53cd\u6b63\u6211\u8fd9\u4e48\u53eb) \n{  \n    if (x == 0)\n    {\n        putchar('0');\n        return;\n    }\n    int num = 0;\n    char c[11];\n    while (x)\n        c[++num] = x % 10 + 48, x /= 10;\n    while (num)\n        putchar(c[num--]);\n}\nint add_edge(int u, int v, int w) //\u6dfb\u52a0\u4e00\u6761\u8fb9 \n{\n    a[++cnt].to = v;\n    a[cnt].val = w;\n    a[cnt].nxt = fir[u];\n    fir[u] = cnt;\n}\nint main()\n{\n    n = read_int();\n    m = read_int();\n    s = read_int();\n    e = read_int();\n    for (int i = 1; i <= m; ++i)\n    {\n        u = read_int();\n        v = read_int();\n        w = read_int();\n        add_edge(u, v, w);\n        add_edge(v, u, w); //\u65e0\u5411\u8fb9 \n    }\n    for (int i = 1; i <= n; ++i)\n        d[i] = 0x7fffffff; //maxlongint\u521d\u59cb\u5316 \n    q.push(s);\n    b[s] = 1; //\u5165\u961f \n    d[s] = 0; \n    while (!q.empty()) //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a \n    {\n        u = q.front();\n        q.pop(); //\u51fa\u961f\n        b[u] = 0; //\u539f\u6765\u6f0f\u4e86\u8fd9\u53e5\uff0c\u4e0d\u65ad80 \n        for (int i = fir[u]; i; i = a[i].nxt)\n            if (d[u] + a[i].val < d[a[i].to]) //relax\u6761\u4ef6\u5224\u65ad \n            {\n                d[a[i].to] = d[u] + a[i].val;\n                if (!b[a[i].to]) //\u5165\u961f \n                {\n                    q.push(a[i].to);\n                    b[a[i].to] = 1;\n                }\n            }\n    }\n    write_int(d[e]);\n}\n```\n## \u4e0b\u9762\u662fpb\\_ds\u7248\u672c(\u7528\u6cd5\u57fa\u672c\u4e00\u6837,\u76f8\u540c\u7684\u5c31\u4e0d\u5199\u4e86) ##\n\n\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/priority_queue.hpp> //pb_ds\u7684priority_queue\u5934\u6587\u4ef6 \nusing namespace std;\nstruct Edge\n{\n    int nxt, to, val;\n}a[3125000];\nint fir[5000], d[5000], b[5000];\nint n, m, u, v, w, cnt, s, e;\nstruct comp\n{\n    __inline__ __attribute((always_inline)) bool operator()(int a, int b)\n    {\n        return d[a] > d[b];\n    }\n}; //\u6bd4\u8f83\u5668,\u7528\u4e8epb_ds\u7684priority_queue \n__gnu_pbds::priority_queue < int, comp > q; //__gnu_pbds\u662fpb_ds\u7684\u547d\u540d\u7a7a\u95f4\nint read_int()\n{\n    int x, f = 1;\n    char ch;\n    while (ch = getchar(), ch < 48 || ch > 57)\n        if (ch == '-') f = -f;\n    x = ch - 48;\n    while (ch = getchar(), ch >= 48 && ch <= 57)\n        x = x * 10 + ch - 48;\n    return x * f;\n}\nvoid write_int(int x)  \n{  \n    if (x == 0)\n    {\n        putchar('0');\n        return;\n    }\n    int num = 0;\n    char c[11];\n    while (x)\n        c[++num] = x % 10 + 48, x /= 10;\n    while (num)\n        putchar(c[num--]);\n}\nint add_edge(int u, int v, int w)\n{\n    a[++cnt].to = v;\n    a[cnt].val = w;\n    a[cnt].nxt = fir[u];\n    fir[u] = cnt;\n}\nint main()\n{\n    n = read_int();\n    m = read_int();\n    s = read_int();\n    e = read_int();\n    for (int i = 1; i <= m; ++i)\n    {\n        u = read_int();\n        v = read_int();\n        w = read_int();\n        add_edge(u, v, w);\n        add_edge(v, u, w);\n    }\n    for (int i = 1; i <= n; ++i)\n        d[i] = 0x7fffffff;\n    q.push(s);\n    b[s] = 1;\n    d[s] = 0;\n    while (!q.empty())\n    {\n        u = q.top();\n        q.pop();\n        b[u] = 0;\n        for (int i = fir[u]; i; i = a[i].nxt)\n            if (d[u] + a[i].val < d[a[i].to])\n            {\n                d[a[i].to] = d[u] + a[i].val;\n                if (!b[a[i].to])\n                {\n                    q.push(a[i].to);\n                    b[a[i].to] = 1;\n                }\n            }\n    }\n    write_int(d[e]);\n}\n```",
        "postTime": 1493548415,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u597d\u4e45\u6ca1\u5199\u56fe\u8bba\u4e86\uff0c \u770b\u5230\u8fd9\u9898\u5410\u4e86\uff0c \u6ce8\u610f\u662f\u65e0\u5411\u56fe\u3002\u3002\u3002 \u770b\u5230\u8fd9\u6570\u636e\u518d\u5410\u4e86\u4e00\u904d\u3002\u3002\u3002\u8fd8\u662f\u8d34\u4e0a\u6211\u4e11\u964b\u7684spfa\u4ee3\u7801\u5427\u3002\u3002\u3002\n\n```cpp\n    #include <cstdio>  \n    #include <cstdlib>  \n    #include <queue>  \n    #include <vector>  \n    #include <iostream>  \n    #define MAXE 6210  \n    #define MAXN 2510  \n    const int INF = ~0U>>1;  \n    using namespace std;  \n    struct Edge{  \n        int w, to;  \n    };  \n    int d[MAXN],vis[MAXN];  \n    vector <Edge> E;  \n    vector <int> N[MAXN];  \n    void Add(int from, int to, int w){  \n        E.push_back((Edge){w, to});  \n        N[from].push_back(E.size()-1);  \n    }  \n    queue <int> q;  \n    int n;  \n    int spfa(int st, int en){  \n        for(int i=1; i<=n; i++) d[i] = (i == st) ? 0 : INF;  \n        vis[st] = 1;  \n        q.push(st);  \n        while(!q.empty()){  \n            int t = q.front();  \n            //cout << t << endl;  \n            q.pop();  \n            vis[t] = 0;  \n            for(int i=0; i<=N[t].size()-1; i++){  \n                if(d[E[N[t][i]].to] > d[t] + E[N[t][i]].w){  \n                    d[E[N[t][i]].to] = d[t] + E[N[t][i]].w;  \n                    if(!vis[E[N[t][i]].to]){  \n                        vis[E[N[t][i]].to] = 1;  \n                        q.push(E[N[t][i]].to);  \n                    }  \n                }  \n            }  \n        }  \n        return d[en];  \n    }  \n    int main(){  \n        int m, st, en;  \n        scanf(\"%d%d%d%d\", &n, &m, &st, &en);  \n        for(int i=1; i<=m; i++){  \n            int x, y, z;  \n            scanf(\"%d%d%d\", &x, &y, &z);  \n            Add(x, y, z);  \n            Add(y, x, z);  \n        }  \n        printf(\"%d\\n\", spfa(st, en));  \n        return 0;  \n}\n```",
        "postTime": 1453169004,
        "uid": 2834,
        "name": "qq924675986",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "## ~~Dijkstra~~DJ\u7b97\u6cd5+\u961f\u4f18\u5316\n\n\u6211\u662f\u5728\u5b66\u5b8cDJ\u7b97\u6cd5\u540e\u624d\u6765\u7684\uff1a[DJ\u5927\u6cd5\u597d\uff01](https://www.luogu.org/problem/P4779)\n\n### \u5982\u679c\u6ca1\u6709\u5b66\u8fc7DJ\u7684\u8bdd\uff0c\u53ef\u4ee5\u5927\u6982\u770b\u4e00\u4e0bDJ\uff08\u5806\u4f18\u5316\u7248\uff09\u7684\u8fc7\u7a0b\n1.**\u521d\u59cb\u5316**\uff1adis\u5168\u8bbe\u4e3a\u65e0\u7a77\u8fdc\uff0c\u4e4b\u540edis[ts]=0,vis\u5168\u4e3a0;\n\n2.**\u8f93\u5165**\uff1a\u4f7f\u7528\u90bb\u63a5\u8868\u8fdb\u884c\u5b58\u8fb9\u64cd\u4f5c\uff08\u5982\u679c\u4e0d\u61c2\u90bb\u63a5\u8868\u7684\u8bf7\u81ea\u884c\u767e\u5ea6\uff09\n\n3.**DJ**\uff1a\n\n   **3.1** \u53d6\u961f\u9996\uff1a\u7136\u540e\u4f9d\u6b21\u904d\u5386\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\uff0c\u7136\u540e\u677e\u5f1b\uff08\u5c06\u8fd9\u4e9b\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\u66f4\u65b0\uff09\uff0c\u5e76\u5c06\u672a\u66fevis\u7684\u70b9\u52a0\u5165\u961f\u4e2d\n   \n   **\u5faa\u73af\u64cd\u4f5c**\u76f4\u81f3\u961f\u5217\u7a7a\n\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u4e4b\u540e\uff0c\u7b2c\u4e00\u53cd\u5e94\uff1a\u8fd9\u5c31\u662f\u9053DJ\u7684\u6a21\u677f\u9898\u3002\u4f46\u662f\u5b9a\u775b\u4e00\u770b\uff0c\u8fd9\u4e2a\u56fe\u5b83\u662f**\u65e0\u5411\u56fe**\uff01\uff01\uff01\n\n\u5728\u6123\u4e861s\u540e\uff0c\u60f3\u5230\uff0c\u4e0d\u8fc7\u5c31\u662f\u628a\u5efa**\u8fb9\u8fc7\u7a0b\u518d\u6765\u4e00\u6b21\u5417**...\n\n\u7136\u540e\uff0c\u5c31\u6ca1\u6709\u7136\u540e\u4e86...\n\n\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010\n#define maxm 500010 //\u5f53\u4f60\u770b\u5230\u8fd9\u4e2a\u6700\u5927\u503c\u540e\u4f60\u5c31\u4f1a\u77e5\u9053\uff0c\u6211\u771f\u7684\u662f\u628a\u4ee3\u7801\u590d\u5236\u8fc7\u6765\u7684...\nusing namespace std;\ninline int read()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch>'9'||ch<'0') ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n\treturn x;\n}//\u5feb\u8bfb\u4fdd\u5e73\u5b89\n\nstruct Edge{\n\tint to,next,dis;\n}edge[maxm];//\u90bb\u63a5\u8868\u5b58\u8fb9\nstruct node{\n\tint dis,pos;\n\tbool operator < (const node &x)const\n\t{\n\t\treturn x.dis<dis;\n\t}\n};//\u5b58\u70b9\npriority_queue<node> q;//\u5806\u4f18\u5316\nint n,m,s,cnt=0,t;\nint dis[maxn],vis[maxn],head[maxn];\n\nvoid add_edge(int u,int v,int d)\n{\n\tedge[++cnt].to=v;\n\tedge[cnt].dis=d;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\nvoid dj()\n{\n\tdis[s]=0;\n\tq.push((node){0,s});\n\twhile(!q.empty())\n\t{\n\t\tnode tmp=q.top();\n\t\tq.pop();\n\t\tint x=tmp.pos,d=tmp.dis;\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=edge[i].next)\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[x]+edge[i].dis)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+edge[i].dis;\n\t\t\t\tif(!vis[y])\n\t\t\t\tq.push((node){dis[y],y});\n\t\t\t}\n\t\t}\n\t}\n}//DJ\u8fc7\u7a0b\uff0c\u5b8c \u5168 \u4e00 \u81f4\nint main ()\n{\n\tn=read();m=read();s=read();t=read();\n\tfor(int i=1;i<=n;i++) dis[i]=0x7fffffff;//\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u8fdc\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint frm=read(),to=read(),dis=read();\n\t\tadd_edge(frm,to,dis);\n\t\tadd_edge(to,frm,dis);//\u4e24\u6b21\u5efa\u8fb9\u5373\u53ef\n\t}\n\tdj();\n\tcout<<dis[t]<<endl;//\u8f93\u51fa\u6700\u7ec8\u8ddd\u79bb\n\treturn 0;\n}\n```\n",
        "postTime": 1571659611,
        "uid": 129782,
        "name": "Lee02",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "#### \u672c\u849f\u84bb\u597d\u4e0d\u5bb9\u6613\u5b66\u5230dijkstra\uff0c\u51fa\u6765\u5192\u5192\u6ce1\u3002\n\u8fd9\u4e2a\u9898\u76f8\u5bf9\u4e8e\u6700\u77ed\u8def\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a _\u677f\u5b50\u9898_\uff0c\u76f4\u63a5\u5957\u6a21\u677fA\u6389\u8fd9\u9898\uff0c\u7531\u4e8e\u8be5\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4e5f\u5c31\u4e0d\u518d\u8d58\u8ff0\uff0c\u4e0a**\u4ee3\u7801** \u3002\n```\n//\u672c\u6765\u5199\u7684\u662f\u539f\u7248\u7684dijkstra\uff0c\u4f46\u662f\u6709\u70b9\u624b\u75d2\uff0c\u7528\u4e0a\u4e86\u5806\u4f18\u5316\u3002 \n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s,e,dis[2510],vertex[2510][2510];//dis[i]\u8868\u793a\u539f\u70b9\u5230\u70b9i\u7684\u6700\u77ed\u8ddd\u79bb\uff0cvertex[i][j]\u8868\u793a\u4ecei\u5230j\u7684\u8ddd\u79bb \nvector<int> nb[2510];//\u90bb\u5c45\u6570\uff0c\u76f8\u5f53\u4e8e\u8c01\u4e0e\u8c01\u662f\u8fde\u901a\u7684 \nstruct node{\t// \u81ea\u5b9a\u4e49\u4f18\u5148\u961f\u5217 \n\tint id;\n\tint dirt;\n\tbool operator<(const node &next) const{\n\t\treturn dirt>next.dirt;\n\t}\n};\nvoid dijkstra(int start){\t//dijkstra\u4f18\u5316\u540e\u7b97\u6cd5 \n\tpriority_queue<node> pq;\n\tfor(int i=1;i<=n;i++){//\u521d\u59cb\u5316 \n\t\tdis[i]=1e9;\n\t}\n\tdis[start]=0;\n\tnode cur;\t//\u5c06\u521d\u59cb\u70b9\u5165\u961f \n\tcur.id=start;\n\tcur.dirt=dis[start];\n\tpq.push(cur);\n\twhile(!pq.empty()){\t//\u4effdijkstra\uff0c\u961f\u9996\u5c31\u662f\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684\u70b9 \n\t\tint u=pq.top().id;//\u53d6\u51fa\u961f\u9996 \n\t\tpq.pop();//\u5f39\u51fa \n\t\tfor(int i=0;i<=nb[u].size()-1;i++){\t\t//\u5faa\u73af\u4e0e\u81ea\u5df1\u76f8\u90bb\u7684\u70b9\uff0c\u677e\u5f1bdis\u6570\u7ec4 \n\t\t\tint v=nb[u][i];\n\t\t\tif(dis[u]+vertex[u][v]<dis[v]){\t//\u5c06\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u8fd1\u70b9\u7684\u70b9\u5165\u961f \n\t\t\t\tdis[v]=dis[u]+vertex[u][v];\n\t\t\t\tnode next;\n\t\t\t\tnext.id=v;\n\t\t\t\tnext.dirt=dis[v];\n\t\t\t\tpq.push(next);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m>>s>>e;//n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0cs\u4e3a\u8d77\u70b9\uff0ce\u4e3a\u7ec8\u70b9 \n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tvertex[a][b]=vertex[b][a]=c;\n\t\tnb[a].push_back(b);//\u8868\u793aa\u4e0eb\u8fde\u901a \n\t\tnb[b].push_back(a);\n\t}\n\tdijkstra(s);\n\tcout<<dis[e];//\u8f93\u51fa\u7ed3\u679c \n\treturn 0;\n}\n\n```\n\u671b\u5927\u5bb6\u90fd\u80fd\u660e\u767d\uff0c\u65e9\u70b9A\u6389\u8fd9\u9898",
        "postTime": 1567783145,
        "uid": 108540,
        "name": "\u4ece\u4e0d\u518d\u89c1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "~~\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662fSPFA\u7684\u677f\u5b50\uff0c\u6211\u8fd9\u79cd\u849f\u84bb\u4e3a\u4ec0\u4e48\u6d6a\u8d39\u5341\u51e0\u6b21\u7684\u63d0\u4ea4\u6b21\u6570\u5199\u5806\u4f18\u5316\u7684Dijkstra\u5462~~\n\n\u672c\u849f\u84bb\u770b\u697c\u4e0b\u7684\u5927\u4f6c\u4eec\u5199\u7684\u9898\u89e3\u6ca1\u6709\u51e0\u4e2a\u5806\u4f18\u5316\u7684Dijkstra\u7684\uff0c\u6709\u7684\u4e5f\u5168\u662f\u5bf9\u6211\u8fd9\u79cd\u849f\u84bb\u5341\u5206\u4e0d\u53cb\u597d\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d......\n\n\u90a3\u672c\u849f\u84bb\u5c31\u6765\u53d1\u4e2a\u6ca1\u6709\u8fd0\u7b97\u7b26\u91cd\u8f7d\u7684\u5806\u4f18\u5316Dijkstra\u5427\uff01\n\n(\u4ee3\u7801\u4e11\u964b\u8bf7\u89c1\u8c05)\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#define MAXN 10001\n#define MAXM 500001\n\nusing namespace std;\n\nint dis[MAXN], head[MAXN], edge[MAXM], ver[MAXM], next[MAXM], n, m, tot, s, e;\nbool vis[MAXN];//\u8bb0\u5f55\u8bbf\u95ee \npriority_queue<pair<int,int> > heap;\n//pair\u7684\u7b2c\u4e00\u7ef4\u5b58\u50a8dis\u7684\u76f8\u53cd\u6570(\u5229\u7528\u76f8\u53cd\u6570\u6765\u5b9e\u73b0\u5c0f\u6839\u5806\uff0c\u4ece\u800c\u907f\u514d\u4e86\u8fd0\u7b97\u7b26\u91cd\u8f7d)\uff0c\u7b2c\u4e8c\u7ef4\u5b58\u50a8\u8282\u70b9\u7f16\u53f7 \n \nvoid add_edge(int x, int y, int z) {//\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868 \n    ver[++tot] = y, edge[tot] = z, next[tot] = head[x], head[x] = tot;\n}\n\nvoid heap_dijkstra() {//\u6c42\u6700\u77ed\u8def \n\tmemset(dis,0x3f,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[s] = 0; heap.push(make_pair(0,s));//\u8d77\u59cb\u8282\u70b9\u6700\u77ed\u8def\u4e3a0\uff0c\u7f16\u53f7\u4e3as \n    while(heap.size()) {\n        int x = heap.top().second;/*\u53d6\u5806\u9876\u8282\u70b9\u7f16\u53f7*/ heap.pop();\n        if(vis[x]) continue;\n        vis[x] = 1;\n        for(int i = head[x]; i; i = next[i]) {//\u90bb\u63a5\u8868\u904d\u5386 \n            int y = ver[i], z = edge[i];\n            if(dis[y] > dis[x] + z) {//\u66f4\u65b0\u5f53\u524d\u6700\u77ed\u8def \n                dis[y] = dis[x] + z;\n                heap.push(make_pair(-dis[y],y));//\u5c06\u65b0\u7684\u4e8c\u5143\u7ec4\u63d2\u5165\u5806 \n            }\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin >> n >> m >> s >> e;\n    for(int i = 1; i <= m; i++) {//\u6784\u5efa\u90bb\u63a5\u8868 \n        int x, y, z;\n        cin >> x >> y >> z;\n        add_edge(x, y, z);\n        add_edge(y, x, z);//\u6ce8\u610f\u662f\u65e0\u5411\u56fe\uff0c\u63d2\u5165\u4e24\u6b21 \n    }\n    heap_dijkstra();\n    cout << dis[e];\n    return 0;\n}\n```",
        "postTime": 1526716137,
        "uid": 47996,
        "name": "Zenurik",
        "ccfLevel": 0,
        "title": "P1339 [USACO09OCT]\u70ed\u6d6aHeat Wave"
    },
    {
        "content": "```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define ll int\n#define mx 2501\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define fur(i,x,y) for(i=x;i<=y;i++)\n#define fdr(i,x,y) for(i=x;i>=y;i--)\n#define Fur(i,x,y) for(ll i=x;i<=y;i++)\n#define Fdr(x,y) for(ll i=x;i>=y;i--)\n#define in2(x,y) in(x);in(y)\n#define in3(x,y,z) in2(x,y);in(z)\n#define in4(a,b,c,d) in2(a,b);in2(c,d)\n#define clr(x,y) memset(x,y,sizeof(x))\nusing namespace std;\ninline void in(ll &x){x=0;char c;bool f=0;while((c=getchar())>'9'||c<'0')if(c=='-')f=!f;x=c-48;while((c=getchar())<='9'&&c>='0')x=x*10+c-48;if(f)x=-x;}\ninline void out(ll x){if(x<0){putchar('-');x=-x;}if(x>9)out(x/10);putchar(x%10+48);}\ninline void outn(ll x){out(x);printf(\"\\n\");}\nstruct edge{ll nxt,to,w;}e[12401];//\u6ce8\u610f\uff1a\u8981\u5b9a\u4e49\u8fb9\u6570\u7684\u4e24\u904d\uff0c\u56e0\u4e3a\u8fd9\u662f\u65e0\u5411\u56fe\uff0c\u4e00\u6761\u65e0\u5411\u8fb9\u76f8\u5f53\u4e8e\u4e24\u6761\u6709\u5411\u8fb9\nll n,m,s,end,cnt=1;\nll head[mx],d[mx],q[mx*2];//\u961f\u5217\u8981\u5b9a\u5927\u4e00\u70b9\uff0c\u8d1f\u8d23\u53ef\u80fdre\nbool v[mx];//\u8bb0\u5f55\u67d0\u4e2a\u70b9\u6709\u6ca1\u6709\u5728\u961f\u5217\u91cc\ninline void add(ll x,ll y,ll w){e[cnt].to=y;e[cnt].w=w;e[cnt].nxt=head[x];head[x]=cnt++;}//\u90bb\u63a5\u8868\ninline ll spfa(){//\u6838\u5fc3\n    ll h=0,t=1,x,y,i;\n    fur(i,1,n)d[i]=2333333;//\u521d\u59cb\u5316\n    q[h]=s;d[s]=0;v[s]=1;\n    while(h<t){\n        x=q[h++];v[x]=0;\n        for(i=head[x];i;i=e[i].nxt){\n            y=e[i].to;\n            if(d[x]+e[i].w<d[y]){\n                d[y]=d[x]+e[i].w;\n                if(!v[y]){q[t++]=y;v[y]=1;}\n            }\n        }\n    }\n    return d[end];\n}\nint main(){\n    in4(n,m,s,end);//\u8bfb\u5165\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u8d77\u70b9\uff0c\u7ec8\u70b9\n    ll x,y,w;\n    Fur(i,1,m){in3(x,y,w);add(x,y,w);add(y,x,w);}//\u6784\u56fe\n    outn(spfa());//spfa(\u6838\u5fc3)\n}\n```\n/\\*\n\n\\*/\n\n",
        "postTime": 1516330866,
        "uid": 36532,
        "name": "localhost",
        "ccfLevel": 0,
        "title": "spfa\u6a21\u677f"
    },
    {
        "content": "\u6700\u77ed\u8def\u5f84\u7684\u677f\u5b50\u9898\u3002\n\n\u4e4b\u524d\u90fd\u662f\u5199SPFA\uff0c\u6700\u8fd1\u542c\u8bf4\u88ab\u5361\u7684\u5f88\u5389\u5bb3\uff0c\u51b3\u5b9a\u5199\u5199dijkstra\u7684\u677f\u5b50\uff1b\n\n\u663e\u7136\u662f\u8981\u7528\u5806\u4f18\u5316\u7684\u3002\n\n\u4f46\u624b\u5199\u5806\u6bd4\u8f83\u9ebb\u70e6\uff0c\u800c\u4e14\u8003\u8651\u5230\u4eca\u5e74noip\u53ef\u80fd\u5f00O2\uff1b\n\n\u6240\u4ee5\u7528\u4f18\u5148\u961f\u5217\u6765\u4ee3\u66ff\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u52a0\u5165\u961f\u5217\u7684\u8282\u70b9\uff0c\u6211\u4eec\u8003\u8651\u7528pair\u6765\u5b58\u3002\n\n\u5f53\u7136\u5199\u7ed3\u6784\u4f53\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662fpair\u53ef\u4ee5\u66f4\u52a0\u7684\u65b9\u4fbf\u3002\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int ,int > pa;\nint tot=0,n,m,ts,te,fir[5000],dis[5000];\nstruct Edge{\n    int u,v,nxt,w;\n}e[100000];\nvoid addedge(int x,int y,int w)\n{\n    e[++tot].u=x;\n    e[tot].v=y;\n    e[tot].w=w;\n    e[tot].nxt=fir[x];\n    fir[x]=tot;\n}\nvoid dijkstra()\n{\n    priority_queue<pa,vector<pa >,greater<pa> >     q;\n    q.push(make_pair(ts,0));\n    for(int i=1;i<=n;i++)\n      dis[i]=100001938;\n    dis[ts]=0;  \n    while(!q.empty())\n    {\n        int now=q.top().first;\n        int val=q.top().second;\n        q.pop();\n        for(int i=fir[now];i;i=e[i].nxt)\n        {\n            int to=e[i].v;\n            if(dis[to]>val+e[i].w)\n            {\n                dis[to]=val+e[i].w;\n                q.push(make_pair(to,dis[to]));\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&ts,&te);\n    int x,y,w;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&w);\n        addedge(x,y,w);\n        addedge(y,x,w);\n    }\n    dijkstra();\n    printf(\"%d\",dis[te]);\n    return 0;\n}\n```",
        "postTime": 1509458236,
        "uid": 51019,
        "name": "Lohetion",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u8ffd\u6c42\u6781\u81f4\u6548\u7387\u7684\u4eba\uff0c\u53d1\u4e00\u4e2a\u6700\u957f\u7528\u65f68ms\u7684dijkstra\u4ee3\u7801\n\n\u6211\u7684\u8bf4\u660e\u4e0d\u662f\u600e\u4e48\u7528dijkstra\uff0c\u800c\u662f\u600e\u4e48\u4f18\u5316\uff0c\u4e0d\u77e5\u9053dijkstra\u4ec0\u4e48\u539f\u7406\u7684\u4e3b\u52a8\u697c\u4e0b\u5bfb\u627e\u6216\u8005\u95ee\u5ea6\u5a18\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u7528\u4e00\u4e2astruct\u5b58\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u8d77\u70b9\uff08\u8fd9\u4e2a\u5176\u5b9e\u53ef\u4ee5\u4e0d\u8981\uff09\uff0c\u7ec8\u70b9\u548c\u957f\u5ea6\uff0c\u518d\u7528\u4e00\u4e2avector[i]\u5b58\u4ee5\u7b2ci\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u641c\u7d22\u90bb\u63a5\u77e9\u9635\u7684\u65f6\u95f4\uff0c\u5bf9\u7a00\u758f\u56fe\u8fd8\u662f\u633a\u5b9e\u7528\u7684\uff1b\n\n\u5728\u7136\u540e\u7528pair\u5b58\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\uff08\u7528pair\u6bd4struct\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u81ea\u5e26\u6392\u5e8f\u65b9\u5f0f\uff0c\u4e0d\u7528\u81ea\u5df1\u5b9a\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u6254\u8fdb\u4f18\u5148\u961f\u5217\u91cc\uff09\uff0cpair[i].first\u5b58\u8ddd\u79bb\uff0c\u521d\u59cb\u4e3ainfinite\uff0cpair[i].second\u5b58\u70b9\u7684\u7f16\u53f7\uff0c\u5c31\u662fi\uff08\u54c8\uff1f\u518d\u5b58\u4e00\u904di\u6709\u4ec0\u4e48\u7528\uff1f\u8fd9\u81ea\u7136\u662f\u6709\u7528\u7684\u4e86\u3002\u8fd8\u6709\u4e00\u5b9a\u8981\u628a\u8ddd\u79bb\u5b58\u5728.first\u91cc\uff0c\u4e0d\u7136\u6392\u5e8f\u8981\u51fa\u62d0\uff09\uff0c\u8d77\u70b9\u521d\u59cb\u5316\u540e\u5c31\u5168\u90e8\u585e\u5230priority-queue\uff08\u8bb0\u5f97\u6539\u6392\u5e8f\u65b9\u5f0f\uff09\u91cc\uff1b\n\n\u627e\u5230\u4f18\u5148\u961f\u5217\u7684top\u5c31\u53ef\u4ee5\u901a\u8fc7.second\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\uff0c\u505a\u6807\u8bb0\u540e\u5f39\u6389\uff0c\u66f4\u65b0pair\u540e\u76f4\u63a5\u628a\u65b0pair\u538b\u8fdb\u4f18\u5148\u961f\u5217\u4e2d\uff0c\u4e0d\u7528\u7ba1\u4e4b\u524d\u540c\u4e00\u4e2a\u70b9\u5df2\u7ecf\u538b\u8fdb\u53bb\u7684\u8ddd\u79bb\uff08\u56e0\u4e3a\u4f18\u5148\u961f\u5217\u6ca1\u6709\u529e\u6cd5\u66f4\u65b0\u91cc\u9762\u7684\u6570\u636e\uff0c\u53cd\u6b63\u4e00\u4e2a\u70b9\u65b0\u538b\u8fdb\u53bb\u7684\u8ddd\u79bb\u80af\u5b9a\u6bd4\u65e7\u7684\u77ed\uff0c\u800c\u4e14\u56e0\u4e3a\u505a\u4e86\u6807\u8bb0\uff0c\u5728\u4f18\u5148\u961f\u5217\u961f\u9996\u627e\u5230\u5df2\u7ecf\u627e\u8fc7\u7684\u70b9\u76f4\u63a5\u5f39\u6389\u5c31\u597d\u4e86\uff09\uff0c\u627e\u5230\u7ec8\u70b9\u540e\u7ed3\u675f\u5c31\u884c\u4e86\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff08\u9898\u76ee\u6570\u636e\u8303\u56f4\u6709\u6bd2\uff0c\u5bb3\u6211Re\u4e86\u4e24\u6b21\uff09\n\n\u00b7\u00b7\u00b7\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<queue>\n#include<vector>\n#include<utility>\nusing namespace std;\nconst int infinite=1<<30;\nint t,c,s,e;\nint x,y,z,p,q;\nstruct edge\n{\n    int start,finish,lenth;\n}way[100000];\nbool a=true,b[100000];\npair<int,int> dis[100000];\nvector<int> point[100000];\npriority_queue<pair<int,int>,vector< pair<int,int> >,greater< pair<int,int> > > k;\nint main()\n{\n    cin>>t>>c>>s>>e;\n    for(int i=0;i<c;i++)\n    {\n        p=2*i,q=2*i+1;\n        cin>>way[p].start>>way[p].finish>>way[p].lenth;\n        way[q].start=way[p].finish;\n        way[q].finish=way[p].start;\n        way[q].lenth=way[p].lenth;\n        point[way[p].start].push_back(p);\n        point[way[q].start].push_back(q);\n    }\n    for(int i=1;i<=t;i++)\n    {\n        dis[i].first=infinite;\n        dis[i].second=i;\n        k.push(dis[i]);\n    }\n    dis[s].first=0;\n    k.push(dis[s]);\n    while(!b[e])\n    {\n        ///a=true;\n        while(/*a*/true)\n        {\n            x=k.top().second;\n            if(b[x])\n            {\n                k.pop();\n            }\n            else\n            {\n                k.pop();\n                b[x]=true;\n                /*a=false*/break;\n            }\n        }\n        for(int i=point[x].size()-1;i>=0;i--)\n        {\n            if(!b[way[point[x][i]].finish]&&dis[way[point[x][i]].finish].first>dis[x].first+way[point[x][i]].lenth)\n            {\n                dis[way[point[x][i]].finish].first=dis[x].first+way[point[x][i]].lenth;\n                k.push(dis[way[point[x][i]].finish]);\n            }\n        }\n    }\n    cout<<dis[e].first;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1508261502,
        "uid": 34360,
        "name": "R_a_v_e_n",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u6b64\u9898\u662fSPFA\u7b97\u6cd5\u7684\u6a21\u677f\u9898\uff0c\u6ce8\u610f\u65e0\u5411\u56fe\u8fb9\u8981\u5b582\u6b21\u3002\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5f00\u59cb\uff1a\n\n1.\u7528vector\u5b9e\u73b0\u90bb\u63a5\u8868\uff08\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u4f1aCE\u7684\uff09\n\n```cpp\n#include<cstdio>\n#include<vector>\n#define inf 0x7F\n#define max_point 10000\nusing namespace std;\nint dis[max_point],t,c,ts,te,rs,re,ci,cur;\nbool in_queue[max_point];\nstruct Paris{\n    int to,len;//\u5b9e\u73b0\u90bb\u63a5\u8868\u7684\u7ed3\u6784\u4f53 \n};\nvector<Paris>graph[max_point];//\u90bb\u63a5\u8868 \nqueue<int>q;\nvoid addedge(int start,int dest,int length)//\u52a0\u8fb9 \n{\n    graph[start].push_back((Paris){dest,length});\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&t,&c,&ts,&te);\n    for(int i=1;i<=c;i++)\n    {\n        scanf(\"%d%d%d\",&rs,&re,&ci);\n        addedge(rs,re,ci);//\u65e0\u5411\u56fe\u52a0\u4e24\u6b21\uff01\uff01\n        addedge(re,rs,ci);\n    }\n    memset(dis,inf,sizeof(dis));//\u521d\u59cb\u5316 \n    dis[ts]=0;\n    q.push(ts);//\u8d77\u70b9\u5165\u961f \n    in_queue[ts]=true;\n    while(!q.empty())\n    {\n        cur=q.front();\n        q.pop();\n        in_queue[cur]=false;\n        for(vector<Paris>::iterator i=graph[cur].begin();i!=graph[cur].end();i++)\n```\n/\\*\u53c8\u957f\u53c8\u4e11\u7684\u8fed\u4ee3\u5668\u904d\u5386\\*/\n```cpp\n        {\n            if(dis[cur]+i->len<dis[i->to])\n            {\n                dis[i->to]=dis[cur]+i->len;//relax \n                if(!in_queue[i->to])\n                {\n                    q.push(i->to);\n                    in_queue[i->to]=true;\n                } \n            }\n        }\n    }\n    printf(\"%d\",dis[te]);\n    return 0;\n}\n```\n2.\u94fe\u5f0f\u524d\u5411\u661f\uff08\u8fd9\u4e2a\u6211\u4e5f\u4e0d\u662f\u7279\u522b\u7406\u89e3\u3002\u3002\u3002\u5f53\u521d\u770b\u5230\u4e0d\u5c11dalao\u5199\n\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u6211\u4e5f\u51b3\u5b9a\u5b66\u4e00\u4e0b\uff0c\u7ed3\u679c\u61f5\u4e86\u3002\u3002\u3002\uff09\n\n```cpp\n#include<cstdio>\n#include<queue>\n#define M 5000\n#define Inf 0x3f\nusing namespace std;\nint t,c,ts,te,rs,re,cur,ci,cnt=0,dis[M],head[M];\nbool inq[M];\nstruct Tokyo{\n    int to,val,Next;//\u8fd9\u4e2anext\u548chead\u6211\u4e5f\u4e0d\u662f\u5f88\u7406\u89e3 \n}edge[3125000];\nqueue<int>q;\nvoid add_edge(int from,int dest,int len)//\u52a0\u8fb9 \n{\n    edge[++cnt].to=dest;\n    edge[cnt].val=len;\n    edge[cnt].Next=head[from];\n    head[from]=cnt;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&t,&c,&ts,&te);\n    for(int i=1;i<=c;i++)\n    {\n        scanf(\"%d%d%d\",&rs,&re,&ci);\n        add_edge(rs,re,ci);\n        add_edge(re,rs,ci);\n    }\n    for(int i=1;i<=t;i++)\n        dis[i]=0x7fffffff;//\u521d\u59cb\u5316 \n    q.push(ts);//\u8d77\u70b9\u5165\u961f \n    dis[ts]=0;\n    inq[ts]=true;\n    while(!q.empty())\n    {\n        cur=q.front();\n        q.pop();\n        inq[cur]=false;\n        for(int i=head[cur];i;i=edge[i].Next)\n        {\n            if(dis[cur]+edge[i].val<dis[edge[i].to])\n            {\n                dis[edge[i].to]=dis[cur]+edge[i].val;\n                if(!inq[edge[i].to]) q.push(edge[i].to),inq[edge[i].to]=true;\n            }\n        }\n    }\n    printf(\"%d\",dis[te]);\n    return 0;\n}\n```",
        "postTime": 1507122857,
        "uid": 40482,
        "name": "richardchen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9053\u56fe\u8bba\uff0c\u9996\u5148\u662f\u65e0\u5411\u56fe\uff0c\u6211\u7528\u4e86\u90bb\u63a5\u77e9\u9635\u5b58\u50a8\uff0c\u7136\u540e\u8fd8\u8981\u8003\u8651\u6743\u503c\u8986\u76d6\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u8f93\u5165\u7684\u65f6\u5019\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\u5916\u5730\u6bcf\u4e2a\u57ce\u9547\u7531\u4e24\u6761\u53cc\u5411\u9053\u8def\u8fde\u5411\u81f3\u5c11\u4e24\u4e2a\u5176\u5b83\u5730\u57ce\u9547\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u6743\u503c\u3002\u7136\u540e\u6211\u7528\u4e86dijkstra\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5c31ok\u4e86\u3002floyed\u4f1a\u8d85\u65f6\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,c,tc,te,x,y,z,a[2505][2505],d[2505];\nvoid dijkstra(int st)\n{\n    bool b[2505]={};\n    for (int i=1;i<=t;++i)\n    d[i]=a[st][i];\n    b[st]=true;\n    d[st]=0;\n    for (int i=1;i<=t-1;++i)\n    {\n        int min_=2000000000,k=0;\n        for (int j=1;j<=t;++j)\n        if ((!b[j])&&d[j]<min_)\n        {\n            min_=d[j];\n            k=j;\n        }\n        if (k==0) return;\n        b[k]=true;\n        for (int j=1;j<=t;++j)\n        if ((!b[j])&&d[k]+a[k][j]<d[j]) d[j]=d[k]+a[k][j];\n    }\n}//dijkstra\u7b97\u6cd5 \nint main()\n{\n    cin>>t>>c>>tc>>te;\n    memset(a,10,sizeof(a));//a\u6570\u7ec4\u521d\u59cb\u4e00\u4e2a\u5f88\u5927\u7684\u503c \n    for (int i=1;i<=c;++i)\n    {\n        cin>>x>>y>>z;\n        a[x][y]=min(a[x][y],z);\n        a[y][x]=min(a[y][x],z);//\u8fd9\u4e24\u53e5\u662f\u8981\u8003\u8651\u6743\u503c\u8986\u76d6\u7684\u95ee\u9898 \n    }\n    dijkstra(tc);//\u8d77\u70b9 \n    cout<<d[te];//\u7ec8\u70b9 \n    return 0;\n}\n```",
        "postTime": 1506490361,
        "uid": 49254,
        "name": "\u6653\u66e6315",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u7eaf\u88f8\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5  \u5c31\u662f\u8bfb\u5165\u5230\u65f6\u5019\u4f60\u8981\u5224\u65ad\u4e00\u4e0b\u5982\u679c\u91cd\u590d\u7684\u65f6\u5019\u8981\u4fdd\u7559\u4e0b\u90a3\u4e2a\u6700\u5c0f\u7684\n\n\u4e0d\u591a\u8bf4\u4e86  \u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a[2510][2510];\nint d[2510];\nbool f[2510];\nint t,c,ts,te;\nvoid dijkstra(int st)//\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5   \u7eaf\u88f8\u7684 \n{\n    for (int i=1;i<=t;i++)  d[i]=a[st][i];\n    memset(f,false,sizeof(f));\n    f[st]=true;d[st]=0;\n    for (int i=1;i<=t;i++)\n    {\n        int min=1000000000,k=0;\n        for (int j=1;j<=t;j++)\n        if ((!f[j])&&(d[j]<min)) \n        {min=d[j];k=j;}//\u627e\u5230\u76ee\u524d\u96c6\u54082\u7684\u6700\u77ed\u8ddd\u79bb \n        if (k==0)  return; // \u5df2\u7ecf\u627e\u4e0d\u5230\u4e86 \n        f[k]=true; //\u8f6c\u5230\u96c6\u5408\u4e00 \n        for (int j=1;j<=t;j++) //\u4e09\u89d2\u5f62\u8fed\u4ee3\u66f4\u65b0 \u6700\u77ed\u8ddd\u79bb \n           { if ((!f[j])&&(d[k]+a[k][j]<d[j]))   \n             d[j]=d[k]+a[k][j];     }\n    }\n}\nint main()\n{\n    cin>>t>>c>>ts>>te;\n    int x,y,z;\n    memset(a,10,sizeof(a));\n    for (int i=1;i<=c;i++)\n    {\n        cin>>x>>y>>z;\n        if (a[x][y]&&a[x][y]>z) {a[x][y]=z;a[y][x]=z;}//\u5224\u65ad\u91cd\u590d\u7684\u60c5\u51b5 \n        if (!a[x][y]) {a[x][y]=z;a[y][x]=z;}\n    }\ndijkstra(ts);//\u8d77\u70b9 \ncout<<d[te];//\u7ec8\u70b9 \n    return 0;\n}\n```",
        "postTime": 1505178240,
        "uid": 22670,
        "name": "\u8f6c\u8eab\u3001\u5df2\u964c\u8def",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u55ef\u3002\u3002\u3002\u53cd\u6b63\u5c31\u662f\u4e2adijkstra\u7684\u6a21\u677f\u9898\uff0c\u6211\u5c31\u5199\u4e2a\u5806\u4f18\u5316\u5427\uff08\u867d\u7136\u770b\u8fd9\u4e2a\u6837\u5b50\u4e0d\u4f18\u5316\u4e5f\u80fd\u8fc7\uff09\uff0c\u561b\uff0c\u4e5f\u5c31\u591a\u51e0\u884c\uff0c\u53c8\u5feb\u6709\u597d\u61c2\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5462\uff08STL\u543c\u554a\uff09\n\n\u76f4\u63a5\u770b\u5427233\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nlong long int dist[5010];\nint  T,C,Ts,Te;\nstruct stu\n{\n    int to;\n    int dis;\n    friend bool operator <(const stu& a,const stu& b)\n    {\n        return a.dis>b.dis;//\u4e00\u4e2a\u53cd\u5411\u7684\u4f18\u5148\u961f\u5217\uff08\u53eb\u5927\u2642\u6839\u5806\u8fd8\u662f\u5c0f\u6839\u5806\u6765\u7740\uff09\n    }\n};\npriority_queue <stu> q;//\u5199\u4f5c\uff08\u4f18\u5148\uff09\u961f\u5217\u5176\u540d\u4e3a\uff08\u5fd8\u5566\u4ec0\u561b\uff09\u5806\nvector <stu> v[5010];\nvoid add(int x,int y,int c)\n{\n    stu temp;\n    temp.to=y;\n    temp.dis=c;\n    v[x].push_back(temp);\n}\nbool vis[5010];\nvoid dijkstra()\n{\n    memset(vis,true,sizeof(vis));\n    dist[Ts]=0;\n    for(int i=0;i<v[Ts].size();i++)//\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u53ea\u653e\u4e00\u4e2aTs\u5230Ts\u8ddd\u79bb\u4e3a\u96f6\u7684\u3002\u3002\u3002\n    {\n        q.push(v[Ts][i]);\n    }\n    stu temp;\n    while(!q.empty())\n    {\n        temp=q.top();\n        q.pop();\n        if(vis[temp.to]==false) continue;\n        vis[temp.to]=false;\n        dist[temp.to]=temp.dis;//\u6700\u9876\u90e8\u7684\u4e00\u5b9a\u662f\u6700\u4f18\u89e3,\u770b\u4e0b\u9762\u4e00\u884c\u6ce8\u91ca\u5c31\u660e\u767d\u4e86\n        for(int i=0;i<v[temp.to].size();i++)\n        {\n            stu ex_temp=v[temp.to][i];\n            if(vis[ex_temp.to]==true)\n            {                                                                         \n                ex_temp.dis+=temp.dis;//\u6700\u4f18\u52a0\u5f53\u524d\u7b49\u4e8e\u7ecf\u8fc7\u6b64\u8def\u5f84\u7684\u6700\u4f18\u89e3\uff08\u5927\u6982\u5c31\u662f\u8fd9\u4e2a\u610f\u601d)\n                q.push(ex_temp);\n            }\n        }\n    }\n}\nint main()\n{\n    cin>>T>>C>>Ts>>Te;\n    int x,y,c;\n    for(int i=1;i<=C;i++)\n    {\n        cin>>x>>y>>c;\n        add(x,y,c);//\u6ce8\u610f\u8fd9\u91cc\u662f\u53cc\u5411\u8fb9\u54e6_ ;)\n        add(y,x,c);//\u6ce8\u610f\u8fd9\u91cc\u662f\u53cc\u5411\u8fb9\u54e6_ ;)\n    }\n    dijkstra();\n    cout<<dist[Te]<<endl;\n    return 0;\n}\npriority_queue <stu> q;\nvector <stu> v[5010];\nvoid add(int x,int y,int c)\n{\n    stu temp;\n    temp.to=y;\n    temp.dis=c;\n    v[x].push_back(temp);\n}\nbool vis[5010];\nvoid dijkstra()\n{\n    memset(vis,true,sizeof(vis));\n    dist[Ts]=0;\n    for(int i=0;i<v[Ts].size();i++)\n    {\n        q.push(v[Ts][i]);\n    }\n    stu temp;\n    while(!q.empty())\n    {\n        temp=q.top();\n        q.pop();\n        if(vis[temp.to]==false) continue;\n        vis[temp.to]=false;\n        dist[temp.to]=temp.dis;\n        for(int i=0;i<v[temp.to].size();i++)\n        {\n            stu ex_temp=v[temp.to][i];\n            if(vis[ex_temp.to]==true)\n            {\n                ex_temp.dis+=temp.dis;\n                q.push(ex_temp);\n            }\n        }\n    }\n}\nint main()\n{\n    cin>>T>>C>>Ts>>Te;\n    int x,y,c;\n    for(int i=1;i<=C;i++)\n    {\n        cin>>x>>y>>c;\n        add(x,y,c);\n        add(y,x,c);\n    }\n    dijkstra();\n    cout<<dist[Te]<<endl;\n    return 0;\n}\n```",
        "postTime": 1504708957,
        "uid": 13994,
        "name": "panzheng1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u5929\u7b11\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u5c31\u662f\u4e00\u4e2a\u6a21\u677f\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u9ad8\u5174\u7684\u7528Floyed\u6253\u4e86\u4e00\u904d\uff0c\u7ed3\u679c\u53d1\u73b0\u6570\u636e\u8fc7\u5927\uff0c\u4e00\u4e0b\u5c31\u7206\u4e86\u3002\u4e8e\u662f\u5929\u7b11\u5c31\u7528\u4e86**\u8fea\u6770\u65af\u79d1\u62c9**\uff0c\u867d\u7136\u7528\u8fd9\u4e2a\u7b97\u6cd5\u7684\u9898\u89e3\u5f88\u591a\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u5929\u7b11\u8981\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e2a\u975e\u5e38\u597d\u7528\u7684\u4e1c\u897f\uff0c\u7279\u522b\u662f\u8fd9\u79cd\u8f93\u5165\u6570\u636e\u7279\u522b\u591a\u7684\u9898\u76ee\uff0c\u5c31\u53ef\u4ee5\u7528\u5230\u8fd9\u4e2a**\u8bfb\u5165\u4f18\u5316**\uff0c\u5929\u7b11\u4eb2\u8eab\u8bd5\u9a8c\u8fc7\uff0c\u5b83\u7684\u7684\u6548\u7387\u6bd4**cin**\u548c**scanf**\u90fd\u8981\u5feb\uff0c\u539f\u7406\u5c31\u662f\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\uff0c\u5177\u4f53\u9644\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline int get() \n{ \n    int a=0; \n    char s=getchar(); \n    while(s<'0'||s>'9') \n        s=getchar(); \n    while(s>='0'&&s<='9') \n        a=(a<<3)+(a<<1)+(s^'0'),s=getchar(); \n    return a; \n}\n```\n\u63a5\u7740\u5c31\u56de\u5f52\u672c\u9898\u5427\uff0c\u8fd9\u9053\u9898\u56e0\u4e3a\u6570\u636e\u5f88\u5927\uff0c\u7528Floyed\u65f6\u95f4\u590d\u6742\u5ea6O\uff08N^3\uff09\u80af\u5b9a\u7206\u70b8\uff0c\u53c8\u56e0\u4e3a\u8fd9\u9053\u9898\u53ea\u9700\u8981\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4e8e\u662f\u4e4e\uff0c\u7528\u8fea\u6770\u65af\u79d1\u62c9\u6216bellman-ford\u6216SPFA\u90fd\u662f\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u4e8e\u662f\u6211\u9009\u62e9\u4e86\u8fea\u6770\u65af\u79d1\u62c9\uff0c\u9644\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream> \n#include<cstring> \nusing namespace std; \nint t,c,ts,te,f[2501][2501],a[2501],minn,rs,re,ci; \nbool b[2501]; \ninline int get()   //\u8bfb\u5165\u4f18\u5316\n{ \n    int a=0; \n    char s=getchar(); \n    while(s<'0'||s>'9') \n        s=getchar(); \n    while(s>='0'&&s<='9') \n        a=(a<<3)+(a<<1)+(s^'0'),s=getchar(); \n    return a; \n}\nint main() \n{ \n    t=get(),c=get(),ts=get(),te=get();\n    memset(f,0x7f,sizeof(f));   //memset \u6700\u5927\u53ea\u80fd\u8d4b\u52300x7f\uff0c\u4e5f\u5c31\u662f255\u8fd9\u4e2a\u6837\u5b50\uff0c\u518d\u5927\u7684\u8bdd\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u5de8\u5c0f\u7684\u6570\n    for(int i=1;i<=c;i++) \n    { \n            rs=get(),re=get();\n        f[rs][re]=f[re][rs]=get(); \n    } \n    for(int i=1;i<=t;i++) \n        a[i]=f[ts][i]; \n    memset(b,false,sizeof(b)); \n    b[ts]=true,a[ts]=0; \n    for(int i=1,k=0;i<t;i++) //\u8fea\u6770\u65af\u79d1\u62c9\n    {\n        minn=0x7f;\n        for(int j=1;j<=t;j++)\n            if(!b[j]&&a[j]<minn)\n            {\n                minn=a[j];\n                k=j;\n            }\n        if(k==0)\n            break;\n        b[k]=true; \n        for(int j=1;j<=t;j++) \n            if(a[k]+f[k][j]<a[j]) \n                a[j]=a[k]+f[k][j]; \n    } \n    cout<<a[te]<<endl; \n} \n```",
        "postTime": 1504320471,
        "uid": 38038,
        "name": "\u4e8c\u5143\u957f\u5929\u7b11",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u7a00\u7f55\u4ea7\u54c1\uff1a\\_STL\u90bb\u63a5\u8868\u7684SPFA\\_\u3002\n\n\u7a0b\u5e8f\u4e2dSPFA\u51fd\u6570\u6709\u8f83\u4e3a\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u53ef\u4ee5\u4e0e\u6570\u7ec4\u6a21\u62df\u94fe\u5f0f\u6bd4\u8f83\u3002\n\n\u6240\u6709\u70b9\u90fd\u662f**0ms**\u5b83\u6709\u529b\u5730\u8bc1\u660e\u4e86**vector\u5e76\u4e0d\u6162**\u3002\n\n\n\u8fd9\u9898\u672c\u8eab\uff1a\n\n\u53ef\u4ee5\u8bf4\u662f\u6ca1\u6709\u601d\u7ef4\u590d\u6742\u5ea6\uff0c\u6700\u77ed\u8ddd\u79bb\u6a21\u677f\u9898\u3002\n\n\u5b58\u56fe->\u6c42\u6700\u77ed\u8ddd\u79bb->\u8f93\u51fa\u5230\u6307\u5b9a\u70b9\u6700\u77ed\u8ddd\u79bb\n\n\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u3002\n\n\n\u9644\u4e0a\u5e26\u6ce8\u91ca\u7684c++\u4ee3\u7801\u3002\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\n#define MAXV 2505\n#define INF 0x3fffffff\nusing namespace std;\nstruct Node\n{\n    int v ,w;\n    Node() {}\n    Node(int _v ,int _w) : v(_v) ,w(_w) {}          //\u8fd9\u79cd\u50a8\u5b58\u65b9\u5f0f\u53ef\u4ee5\u7b80\u4fbf\u5730\u6dfb\u52a0\u4e00\u6761\u8fb9\n};\nvector<Node> G[MAXV];                            //STL\u7684\u90bb\u63a5\u8868\nint d[MAXV] ,num[MAXV] ,n ,m ,s ,e ,x ,y ,z;\nbool inq[MAXV];\nbool spfa(int s);\nint main()\n{\n    scanf(\"%d%d%d%d\" ,&n ,&m ,&s ,&e);\n    for(int i=1 ;i<=m ;i++) {\n        scanf(\"%d%d%d\" ,&x ,&y ,&z);\n        G[x].push_back(Node(y ,z));\n        G[y].push_back(Node(x ,z));                        //\u6784\u5efa\u65e0\u5411\u56fe\uff08\u53cc\u5411\u8def\u5f84\uff09\n    }\n    if(spfa(s)) printf(\"%d\\n\" ,d[e]);                        //\u8f93\u51fas->e\u6700\u77ed\u8ddd\u79bb\n    return 0;\n}\nbool spfa(int s)\n{\n    memset(inq ,false ,sizeof(inq));\n    memset(num ,0 ,sizeof(num));\n    fill(d ,d+MAXV ,INF);\n    queue<int> q;\n    q.push(s);  inq[s]=true;    num[s]++;                   //\u9996\u5148\u5c06\u6e90\u70b9\u5165\u961f\n    d[s]=0;                                             //\u6e90\u70b9\u8ddd\u79bb\u8bbe\u4e3a0\n    while(!q.empty()) {\n        int u=q.front();    q.pop();    inq[u]=false;             //\u53d6\u51fa\u961f\u5934\u9876\u70b9\u7b49\u5f85\u62d3\u5c55\n        for(int k=0 ;k<G[u].size() ;k++) {\n            int v=G[u][k].v ,w=G[u][k].w;\n            if(d[u]+w<d[v]) {\n                d[v]=d[u]+w;            //\u770b\u770bu->v\u8fd9\u6761\u8fb9\u662f\u5426\u53ef\u4ee5\u4f18\u5316\uff08\u79f0 \u677e\u5f1b\u64cd\u4f5c\uff09\n                if(!inq[v]) {\n                    q.push(v);  inq[v]=true;    num[v]++;   //v\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5219v\u5165\u961f\n                    if(num[v]>n-1)  return false;  //\u5224\u65ad\u662f\u5426\u6709\u6e90\u70b9\u53ef\u8fbe\u8d1f\u73af\u5b58\u5728\uff0c\u6709\uff0c\u5219\u8fd4\u56defalse\n                }\n            }\n        }\n    }\n    return true;                                          //\u6ca1\u6709\uff0c\u8fd4\u56detrue                           \n}\n```",
        "postTime": 1503910034,
        "uid": 36517,
        "name": "ForwarDer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u6211\u4e0d\u77e5\u9053\u4e3a\u4f55\u5927\u4f6c\u4eec\u603b\u8bf4**\u6734\u7d20Dijkstra**\u4f1a**TLE**,\u53cd\u6b63\u6211\u662f\u4e00\u904d\u8fc7\u4e86(\u6e9c)\n\nDijk\u6838\u5fc3\u8bed\u53e5:\n\n```cpp\nint Dijkstra()\n{\n    for (int i = 1; i <= n; i++) Dist[i] = e[S][i];//\u5c06\u521d\u59cb\u503c\u8d4b\u4e88Dist\n    Dist[S] = 0, Book[S] = true;//\u6807\u8bb0Dist[S]\u4e3a\u786e\u5b9a\u503c\n    int pos = 0, Temp = 1<<30, Kace = n - 1;\n    while (Kace--)//\u6700\u591a\u8fdb\u884cKace\u6b21\n    {\n        for (int i = 1; i <= n; i++)//\u627e\u5230\u6700\u5c0f\u7684\u4f30\u8ba1\u8ddd\u79bb\u503c\u7684\u4e0b\u6807\n            if (!Book[i] && Dist[i] < Temp)\n                Temp = Dist[i], pos = i;\n        if (!pos) break;//\u6ca1\u627e\u5230(\u6211\u89c9\u5f97\u8fd9\u53e5\u6ca1\u7528)\n        Book[pos] = true;//\u6807\u8bb0\u4e3a\u786e\u5b9a\u503c,\u56e0\u4e3aTa\u4e0d\u53ef\u80fd\u518d\u5c0f\u4e86\n        for (int j = 1; j <= n; j++)//\u6734\u7d20\u7684\u677e\u5f1b\u64cd\u4f5c\n            if (Dist[j] > Dist[pos] + e[pos][j])\n                Dist[j] = Dist[pos] + e[pos][j];\n        Temp = 1 << 30, pos = 0;\n    }\n    return Dist[T];\n}\n```\n\u57fa\u672c\u4e0a\u5c31\u6ca1\u6709\u5566,\u5168\u4ee3\u7801\u8bf7\u89c1 [?](http://www.cnblogs.com/InfoEoR/p/7353539.html)\n",
        "postTime": 1502607733,
        "uid": 34920,
        "name": "\u65e9\u53f3\u6615",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "SPFA\u6a21\u677f\u9898\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u628a\u6a21\u677f\u62ff\u8fc7\u6765\u6539\u4e00\u4e0b\u5b58\u50a8\u548c\u8f93\u51fa\u5c31\u80fd\u8fc7\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#define N 2505\n#define M 20005\n#define INF 0x7f7f7f7f\nusing namespace std;\nint dis[N],fst[N];\nbool inq[N];\nint u[M],v[M],w[M],nst[M];\nint dl[10001];\nint n,m,s,e,cnt=0;\n//fst\u3001nst\u4e3a\u90bb\u63a5\u8868\uff0cu\u3001v\u3001w\u5206\u522b\u662f\u6bcf\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u6743\u503c\uff0cinq\u6807\u8bb0\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d\nint main()\n{\n    int i,j;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&e);\n    for(i=1;i<=m;i++) //\u53cc\u5411\u5b58\u50a8\n    {\n        cnt++;\n        scanf(\"%d%d%d\",&u[cnt],&v[cnt],&w[cnt]);\n        nst[cnt]=fst[u[cnt]];\n        fst[u[cnt]]=cnt;\n        cnt++;\n        u[cnt]=v[cnt-1],v[cnt]=u[cnt-1],w[cnt]=w[cnt-1];\n        nst[cnt]=fst[u[cnt]];\n        fst[u[cnt]]=cnt;\n    }\n    for(i=1;i<=n;i++) dis[i]=INF;\n    dl[1]=s; inq[s]=1; dis[s]=0;\n    int h=0,t=1;\n    while(h!=t)//SPFA\n    {\n        h++;\n        if(h>10000) h=1;\n        for(int k=fst[dl[h]];k;k=nst[k])\n        {\n            if(dis[v[k]]>dis[u[k]]+w[k])\n            {\n                dis[v[k]]=dis[u[k]]+w[k];\n                if(!inq[v[k]])\n                {\n                    t++;\n                    if(t>10000) t=1;\n                    dl[t]=v[k];\n                    inq[v[k]]=1;\n                }\n            }\n        }\n        inq[dl[h]]=0;\n    }\n    printf(\"%d\\n\",dis[e]);\n    return 0;\n}\n```",
        "postTime": 1502599434,
        "uid": 22840,
        "name": "\u5218\u5907",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5199\u4e00\u4e2aheap\u592a\u6162\u4e86\uff0c\u6240\u4ee5\u7528\u4f18\u5148\u961f\u5217\u6765\u8dd1\u4e00\u4e2aDijkstra\uff0c\u6548\u7387\u7206\u70b8\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm> \nusing namespace std;\ntypedef pair<int,int> P;//pair\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u4e00\u4e2a\u662f.first,\u4e00\u4e2a\u662f.second\u53ef\u4ee5\u50a8\u5b58\u4e24\u4e2a\u5143\u7d20\uff0c\u8fd9\u91cc\u7528\u6765\u50a8\u5b58\u70b9\u7684\u6807\u53f7\u548c\u8def\u5f84\u957f\u5ea6\nint n,m,u[100000],v[100000],w[100000],f[250000],nnext[250000],d[120000]; \nvoid dijkstra(int s)\n{\n    priority_queue<P,vector<P>,greater<P> > q;\n    fill(d,d+n+1,0x3f3f3f3f);\n    d[s]=0;\n    q.push(P(0,s));\n    while(!q.empty())\n    {\n        P p=q.top(); q.pop();\n        int vv=p.second;\n        if(d[vv]<p.first) continue;//\u5982\u679c\u4f18\u5148\u961f\u5217\u8bb0\u5f55\u7684\u6bd4\u5f53\u524d\u7684\u5927\u90a3\u80af\u5b9a\u4e0d\u4f1a\u5f97\u5230\u66f4\u5c0f\u7684\u8def\u5f84\n        for(int i=f[vv];i!=0;i=nnext[i])\n        {\n            if(d[v[i]]>p.first+w[i])\n            {\n                d[v[i]]=p.first+w[i];\n                q.push(P(d[v[i]],v[i]));\n            }\n        }\n    }\n}\nint main()\n{\n    int k,b;\n    scanf(\"%d%d%d%d\",&n,&m,&k,&b);\n    fill(f,f+n+1,0);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u[i*2],&v[i*2],&w[i*2]);\n        u[i*2-1]=v[i*2];\n        v[i*2-1]=u[i*2];\n        w[i*2-1]=w[i*2];\n        nnext[i*2]=f[u[i*2]];\n        f[u[i*2]]=i*2;\n        nnext[i*2-1]=f[u[i*2-1]];\n        f[u[i*2-1]]=i*2-1;\n    }\n    dijkstra(k);\n    printf(\"%d\",d[b]);\n    return 0;\n}\n```",
        "postTime": 1502010539,
        "uid": 24205,
        "name": "jiaangk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5728\u7ec3\u4e60SPFA\uff0c\u8fd9\u9053\u9898\u76ee\u521a\u521a\u597d\u3002\n\n\u5148\u8bf4\u4e00\u4e0b\u6211\u88ab\u5751\u6389\u7684\u70b9\uff1a\n\n1. \u8fd9\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u90bb\u63a5\u8868\u8981\u5f00\u4e24\u500d\u3002\n\n2. \u8c8c\u4f3c\u6211\u5199\u5f97\u4e0d\u662f\u5f88\u597d\uff0c\u5728\u52a0\u4e0a\u8bfb\u5165\u4f18\u5316\u524d\u4f1a TLE \u6700\u540e\u4e00\u4e2a\u70b9\u3002\u6211\u4f30\u8ba1\u5982\u679c\u6211\u7684\u961f\u5217\u5b9e\u73b0\u7528\u6570\u7ec4\u5199\uff0c\u53cd\u800c\u4f1a\u5feb\u4e00\u70b9\uff08\u4e0a\u6b21\u4e00\u9053\u9898\u76ee\u7528\u4e86 map \u88ab\n\nTLE \u4e86\u4e24\u4e2a\u70b9\uff09\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u8bf7\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u3002\n\n\n```cpp\n#include <cstdio>\n#include <queue>\n#define INF 2147483647\nusing namespace std;\n\nconst int maxn = 6300;\n\nstruct edge{\n    int u, v, w;\n}a[maxn*2];\n\nint n, m, s, e, cnt = 0, head[maxn], dis[maxn], vis[maxn];\nqueue<int> q;\n\nvoid addEdge(int u, int v, int w){\n    a[++cnt].u = v;\n    a[cnt].v = head[u];\n    head[u] = cnt;\n    a[cnt].w = w;\n} //\u90bb\u63a5\u8868\n\nvoid readint(int& num){ //\u53ef\u803b\u7684\u8bfb\u5165\u4f18\u5316\n    char ch = getchar();\n    num = 0;\n    if(ch=='-'){\n        ch=getchar();\n        while(ch-'0'<10&&ch-'0'>=0){\n            num = (num<<1) + (num<<3) - ch + '0';\n            ch = getchar();\n        }\n        return;\n    }\n    while(ch-'0'<10&&ch-'0'>=0){\n        num = (num<<1) + (num<<3) + ch - '0';\n        ch = getchar();\n    }\n    return;\n}\n\nint main(){\n    readint(n); readint(m); readint(s); readint(e);\n    int u, v, w;\n    for(int i = 1; i <= m; i++){\n        readint(u); readint(v); readint(w);\n        addEdge(u, v, w);\n        addEdge(v, u, w);\n    }//\u5efa\u56fe\n    for(int i = 1; i <= n; i++) dis[i] = INF;\n    q.push(s); dis[s] = 0; vis[s] = 1;//SPFA\u521d\u59cb\u5316\n    while(!q.empty()){//SPFA\n        int u = q.front(); q.pop();\n        vis[u] = 0;\n        for(int i = head[u]; i; i = a[i].v)\n            if(dis[a[i].u] > dis[u] + a[i].w){\n                dis[a[i].u] = dis[u] + a[i].w;\n                if(!vis[a[i].u]){\n                    q.push(a[i].u);\n                    vis[a[i].u] = 1;\n                }\n            }\n    }\n    printf(\"%d\", dis[e]);\n    return 0;\n}\n```\n\u672c\u4eba\u662f\u849f\u84bb\uff0c\u5982\u679c\u4ee3\u7801\u6709\u5199\u5f97\u4e0d\u597d\u7684\u5730\u65b9\uff0c\u8fd8\u8bf7\u5404\u4f4d\u5927\u4f6c\u6307\u51fa\u3002\n",
        "postTime": 1500649409,
        "uid": 3398,
        "name": "DaCong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u7528SPFA\u2026\u2026\n\nFloyd\u81ea\u4ece\u6211\u770b\u5230\u6570\u636e\u8303\u56f4\u540e\u518d\u4e5f\u4e0d\u60f3\u7528\u4e86\u2026\u2026\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<vector>\n#include<cstring>\n#include<queue>\nusing namespace std;\ntypedef vector<int>vec;\nvec map[2509],val[2509];\nint n,m,s,t,dis[2509],flag[2509],a,b,v,tt,tmp;\nqueue<int>q;\nvoid init()//\u8f93\u5165\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&v);\n        map[a].push_back(b);\n        val[a].push_back(v);\n        map[b].push_back(a);\n        val[b].push_back(v);\n    }\n}\nvoid SPFA()//SPFA\u2026\u2026\n{\n    for(int i=1;i<=n;i++){dis[i]=23333333,flag[i]=0;}//\u521d\u59cb\u5316\n    dis[s]=0,flag[s]=1;\n    q.push(s);//\u7b2c\u4e00\u4e2a\u70b9\n    while(!q.empty())\n    {\n        tt=q.front();\n        q.pop();\n        flag[tt]=0;\n        for(int i=0;i<map[tt].size();i++)\n        {\n            tmp=dis[tt]+val[tt][i];\n            if(tmp<dis[map[tt][i]])\n            {\n                dis[map[tt][i]]=tmp;\n                if(!flag[map[tt][i]])\n                {\n                    q.push(map[tt][i]);\n                    flag[map[tt][i]]=1;\n                }\n            }\n        }\n    }\n    printf(\"%d\",dis[t]);//\u8f93\u51fa\n    return;\n}\nint main()\n{\n    init();\n    SPFA();\n    return 0;\n}\n```",
        "postTime": 1479285015,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "bellman-ford\u4ee3\u7801\n\n\u8d64\u679c\u679c\u7684\u6700\u77ed\u8def\u5f84=\\_=\u6ce8\u610f\u662f\u65e0\u5411\u56fe\u5c31\u884c\u4e86\n\n\n```delphi\nconst\n  inf=6500;\nvar\n  u,v,w:array[1..13000] of integer;\n  dis:array[1..2600] of integer;\n  t,c,ts,te,rs,re,ci,i:longint;\n  f:boolean;\nbegin\n  read(t,c,ts,te);\n  for i:=1 to c do\n    begin\n      read(rs,re,ci);\n      u[i]:=rs;v[i]:=re;w[i]:=ci;\n      u[i+c]:=re;v[i+c]:=rs;w[i+c]:=ci;\n    end;\n  \n  for i:=1 to t do dis[i]:=inf;\n  dis[ts]:=0;\n  f:=true;\n  while f do\n    begin\n      f:=false;\n      for i:=1 to c*2 do\n        if dis[u[i]]+w[i]<dis[v[i]] then\n          begin\n            f:=true;\n            dis[v[i]]:=dis[u[i]]+w[i];\n          end;\n    end;\n\n  writeln(dis[te]);\nend.\n```",
        "postTime": 1457232576,
        "uid": 5938,
        "name": "\u5c0f\u9ed1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "\u4e00\u9053\u6781\u597d\u7684\u7528\u6765\u7ec3\u6700\u77ed\u8def\u7684\u9898\uff0c\u7ed9\u51faSPFA\u7b97\u6cd5\u7684\u6807\u51c6\u7a0b\u5e8f\uff0c\u6ce8\u91ca\u8be6\u5c3d\n\n\n\n```delphi\n\nconst maxp=10000;//\u6700\u5927\u8282\u70b9\u6570\n\nvar p,c,s,t:longint;//p:\u8282\u70b9\u6570\uff1bc:\u8fb9\u6570\uff1bs\uff1a\u8d77\u70b9\uff1bt\uff1a\u7ec8\u70b9\n    a,b:array[1..maxp,0..maxp] of longint;\n    //a[x,y]\u8868\u793ax,y\u8fb9\u7684\u6743\uff1b\n    //b[x,c]\u8868\u793a\u4e0ex\u8fb9\u76f8\u8fde\u7684\u7b2cc\u6761\u8fb9\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\uff1b\n    //b[x,0]\u8868\u793a\u548c\u7ed3\u70b9x\u6709\u591a\u5c11\u6761\u8fb9\u76f8\u8fde\uff1b\n    d:array[1..maxp] of longint;//\u961f\u5217\n    v:array[1..maxp] of boolean;//\u662f\u5426\u5165\u961f\u6807\u8bb0\n    f:array[1..maxp] of longint;//\u7b2ci\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\n    head,tail:longint;//\u961f\u5c3e\u961f\u9996\u6307\u9488\n\nprocedure init;\nvar i,x,y,z:longint;\nbegin\n    read(p,c,s,t);\n    for i:=1 to c do\n        begin\n            readln(x,y,z);//x,y\u4e3a\u4e24\u4e2a\u70b9\uff0cz\u4e3a\u6743\u503c\n            inc(b[x,0]);\n            b[x,b[x,0]]:=y;\n            a[x,y]:=z;\n            inc(b[y,0]);\n            b[y,b[y,0]]:=x;\n            a[y,x]:=z;\n        end;\nend;\n\nprocedure spfa(s:longint);\nvar i,j,now,sum:longint;\nbegin\n    fillchar(d,sizeof(d),0);\n    fillchar(v,sizeof(v),false);\n    for i:=1 to p do f[i]:=maxint;\n    f[s]:=0;//\u4e0d\u8981\u5fd8\u4e86\u8fd9\u4e00\u53e5\uff1a\u8d77\u70b9\u5230\u8d77\u70b9\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a\u96f6\uff01\n    v[s]:=true;\n    d[1]:=s;\n    head:=1;\n    tail:=1;\n    while head<=tail do//\u961f\u5217\u4e0d\u7a7a\n        begin\n            now:=d[head];//\u53d6\u961f\u9996\u5143\u7d20\n            for i:=1 to b[now,0] do//\u628a\u548c\u5bf9\u9996\u76f8\u8fde\u7684\u8fb9\u5168\u90e8\u626b\u63cf\u4e00\u904d\n                if f[b[now,i]]>f[now]+a[now,b[now,i]] then\n//\u5982\u679c\u548cnow\u76f8\u8fde\u7684\u7b2ci\u4e2a\u70b9\uff08\u963f\u5c14\u6cd5\u70b9\uff09\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u8fd8\u8981\u5c0f\u4e8e\u5230now\u8282\u70b9\u7684\u6700\u77ed\u8def\u4e0e\u4ecenow\u7ed3\u70b9\u5230\u963f\u5c14\u6cd5\u70b9\u7684\u8ddd\u79bb\u5219\u66f4\u65b0\n                    begin\n                        f[b[now,i]]:=f[now]+a[now,b[now,i]];\n                        if not (v[b[now,i]]) then\n                            begin\n                                inc(tail);\n                                d[tail]:=b[now,i];\n                                v[b[now,i]]:=true;\n                            end;\n                    end;\n              v[now]:=false;//\u677e\u5f1b\u7ed3\u70b9\n              inc(head);//\u51fa\u961f\n        end;\nend;\n\nbegin\n    init;\n    spfa(s);\n    writeln(f[t]);\nend.\n\n```",
        "postTime": 1443783901,
        "uid": 6906,
        "name": "gryql",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    },
    {
        "content": "BELLMAN-FORD\u7b97\u6cd5\u5728\u8fd9\u91cc\u7ed9\u51fa\u3002dijkstra\u548cspfa\u88ab\u7528\u5f97\u8f83\u5e7f\u6cdb\uff0c\u5c31\u4e0d\u8d34\u4e86\u3002\n\n```delphi\n\nvar d:array[1..2500]of longint;\n  l:array[1..6200,1..3]of longint;\n  st,en,v,e,i,j:longint;\nbegin\n  readln(v,e,st,en);\n  for i:=1 to v do d[i]:=9999999;\n  d[st]:=0;\n  for i:=1 to e do\n      readln(l[i,1],l[i,2],l[i,3]);\n  for i:=1 to v-1 do\n    for j:=1 to e do\n      begin\n        if(d[l[j,1]]+l[j,3])<d[l[j,2]]then d[l[j,2]]:=d[l[j,1]]+l[j,3];\n        if(d[l[j,2]]+l[j,3])<d[l[j,1]]then d[l[j,1]]:=d[l[j,2]]+l[j,3];\n      end;//\u677e\u5f1b\u64cd\u4f5c\n  writeln(d[en]);\n  readln;\nend.\n\n```",
        "postTime": 1376111486,
        "uid": 408,
        "name": "jxpxcsh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1339 \u3010[USACO09OCT]\u70ed\u6d6aHeat Wave\u3011"
    }
]