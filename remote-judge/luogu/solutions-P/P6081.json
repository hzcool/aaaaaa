[
    {
        "content": "\u5199\u5728\u9898\u89e3\u4e4b\u524d\uff1a\u611f\u8c22 $\\text{rsc}$ \u5927\u4f6c\u7684\u601d\u8def\n\n---\n\n~~\u5c3d\u7ba1\u8fd9\u53ea\u662f\u4e2a\u8bb2\u66b4\u529b\u7684\u9898\u89e3~~\n\n\u6700\u4f4e\u6863\u7684\u66b4\u529b\u601d\u8def\u5f88\u7b80\u5355\uff0c$O(n^2)$ \u679a\u4e3e\u77e9\u5f62\uff0c\u5982\u679c\u4e24\u4e2a\u77e9\u5f62\u6709\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u8bb0\u5f55\u8fd9\u4e24\u4e2a\uff0c\u6700\u540e\u7edf\u8ba1\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u77e9\u5f62\u6ca1\u6709\u88ab\u8bb0\u5f55\uff0c\u6ca1\u6709\u88ab\u8bb0\u5f55\u7684\u77e9\u5f62\u4e2a\u6570\u5c31\u662f\u53ef\u4ee5\u6269\u5c55\u7684\u77e9\u5f62\u7684\u4e2a\u6570\uff1a\n\n```cpp\nfor(rint i=1;i<=n;++i)\n    for(rint j=1;j<i;++j)\n        if(check(i,j)) vis[i]=vis[j]=1;\nfor(rint i=1;i<=n;++i) if(!vis[i])ans++;\n```\n\n$\\operatorname{check}$ \u51fd\u6570\u7528\u6765\u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n\n---\n\n\u4e0b\u9762\u5c31\u662f\u4f18\u5316\u540e\u7684\u66b4\u529b\u4e86\u3002\n\n\u6211\u4eec\u5148\u628a\u4ed6\u6309\u7167\u4e0a\u8fb9\u754c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5de6\u8fb9\u754c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6392\u4e00\u904d\u5e8f\u3002\n\n\u5982\u679c\u5f53\u65f6\u77e9\u5f62 $j$ \u7684\u4e0a\u8fb9\u754c\u5927\u4e8e\u77e9\u5f62 $i$ \u7684\u4e0b\u8fb9\u754c\u7684\u8bdd\uff0c\u8bc1\u660e $j$ \u4ee5\u540e\u7684\u77e9\u5f62\u90fd\u4e0d\u4f1a\u4e0e\u77e9\u5f62 $i$ \u76f8\u4ea4\uff0c\u5373\u53ef\u4ee5\u9000\u51fa\u7b2c\u4e8c\u91cd\u5faa\u73af\uff0c\u8fd9\u6837\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c0f\u4e86\u590d\u6742\u5ea6\uff0c\u7136\u540e\u53eaT\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u6700\u540e\u5f00\u4e00\u4e0b O2 \u4f18\u5316\uff0c\u5c31\u53ef\u4ee5 AC \u4e86\u03b1\u03c9\u03b1\n\n---\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define rint register int \nusing namespace std;\ninline int read(){\n    int s=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=0;c=getchar();}\n    while(c>='0'&&c<='9')s=(s<<1)+(s<<3)+c-48,c=getchar();\n    return f?s:-s;\n}\nstruct hhd{\n    int lx,ly,rx,ry;\n    friend bool operator < (hhd a,hhd b){\n        return a.lx==b.lx?a.ly<b.ly:a.lx<b.lx;\n    }\n}a[25010];\nint n,ans,vis[25010];\nint main(){\n    n=read();\n    for(rint i=1;i<=n;++i){\n        a[i].lx=read(); a[i].ly=read();\n        a[i].rx=read(); a[i].ry=read();\n    }\n    sort(a+1,a+1+n);\n    for(rint i=1;i<=n;++i)\n        for(rint j=i+1;j<=n;++j){\n            if(a[j].lx>a[i].rx) break;\n            if(a[j].ly>a[i].ry) continue;\n            if(a[i].lx==a[j].rx||\n            (a[i].ry==a[j].ly&&a[j].lx<=a[i].rx&&a[j].rx>=a[i].lx)||\n            (a[i].ly==a[j].ry&&a[j].lx<=a[i].rx&&a[j].rx>=a[i].lx)||\n            (a[i].rx==a[j].lx&&a[j].ly<=a[i].ry&&a[j].ry>=a[i].ly)) vis[i]=vis[j]=1;\n    }\n    for(rint i=1;i<=n;++i)\n        if(!vis[i]) ++ans;\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n\u7801\u98ce\u6709\u70b9\u4e11\uff0c\u51d1\u5408\u7740\u770b\u5427/kk",
        "postTime": 1585715181,
        "uid": 187259,
        "name": "v\u679c\u5b9dv",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6081 \u3010[USACO05DEC]Barn Expansion G\u3011"
    },
    {
        "content": "# \u9898\u76ee\u89e3\u8bfb\n$\\qquad$\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709 $n(1 \\le n \\le 2.5 \u00d7 10^4)$ \u4e2a\u957f\u65b9\u5f62, \u8fd9\u4e9b\u957f\u65b9\u5f62\u53ef\u80fd\u76f8\u5207\uff0c\u4f46\u4e0d\u4f1a\u91cd\u53e0\u3002\u6c42\u6709\u591a\u5c11\u4e2a\u957f\u65b9\u5f62\u548c\u5176\u4ed6\u957f\u65b9\u5f62\u662f\u5206\u79bb\u7684\u3002\n\n# \u89e3\u9898\u601d\u8def\n$\\qquad$\u8bb0\u5f55\u6240\u6709\u7684\u70b9 $(x,y)$ \uff0c\u5148\u63cf\u5e73\u884c\u4e8e $y$ \u8f74\u7684\u8fb9\uff0c\u628a\u8fd9\u4e9b\u8fb9\u7684\u70b9\u6392\u5e8f\uff1b\u5bf9\u4e8e $x$ \u503c\u76f8\u540c\u7684\u70b9,\u6709\u53ef\u80fd\u51fa\u73b0\u957f\u65b9\u5f62\u76f8\u63a5\u3002\u70b9\u5206\u4e3a\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u5f53\u5904\u7406\u5230\u67d0\u4e2a\u8d77\u70b9\u65f6,\u4e4b\u524d\u6709\u67d0\u4e2a\u8fb9\u53ea\u6709\u8d77\u70b9,\u7ec8\u70b9\u8fd8\u6ca1\u51fa\u73b0,\u5219\u5f53\u524d\u957f\u65b9\u5f62\u80af\u5b9a\u4e0e\u524d\u9762\u67d0\u4e2a\u957f\u65b9\u5f62\u76f8\u5207\u3002 \n\n$\\qquad$\u7528\u53cc\u6307\u9488\u6cd5\uff1a \u7528\u53cc\u6307\u9488\u6cd5\u786e\u5b9a $x$ \u503c\u76f8\u540c\u7684\u70b9\u7684\u533a\u95f4,\u7136\u540e\u9488\u5bf9\u8fd9\u4e00\u6bb5\u7528BIT\u7edf\u8ba1\u3002\u8fd9\u6837\u53ea\u80fd\u6c42\u5f53\u524d\u70b9\u662f\u5426\u548c\u67d0\u4e00\u4e2a\u6b63\u65b9\u5f62\u76f8\u63a5,\u4f46\u662f\u4e0d\u77e5\u9053\u662f\u548c\u4e4b\u524d\u54ea\u4e2a\u76f8\u63a5\u3002 \u4e0d\u8fc7\u6ca1\u5173\u7cfb,\u6211\u4eec\u53ea\u662f\u8fd9\u6837\u7684\u60c5\u51b5\u6ca1\u6709\u7edf\u8ba1\u597d: \u67d0\u4e2a\u957f\u65b9\u5f62\u7684\u4e00\u6761\u8fb9\u5f88\u957f\uff0c\u5728\u8d77\u70b9\u524d\u5176\u4ed6\u957f\u65b9\u5f62\u5df2\u7ecf\u7ed3\u675f; \u8fd9\u4e2a\u957f\u8fb9\u5728\u5ef6\u4f38\u8fc7\u7a0b\u4e2d\uff0c\u5305\u88f9\u4e86\u53e6\u5916\u7684\u7ebf\u6bb5, \u6b64\u65f6\u8fd9\u4e2a\u957f\u8fb9\u6211\u4eec\u65e0\u6cd5\u7edf\u8ba1\u8fdb\u6765\u3002\u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u89e3\u51b3\uff0c \u7528\u5b57\u5178\u8bb0\u5f55\u8fd9\u4e2a\u957f\u8fb9\u7684\u8d77\u70b9\u5904\u7406\u65f6\u6211\u4eec\u8fdb\u8fc7\u4e86\u591a\u5c11\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u957f\u8fb9\u7684\u7ec8\u70b9\u5904\u7406\u65f6\u53c8\u7ecf\u8fc7\u4e86\u591a\u5c11\u4e2a\u70b9\uff0c \u5982\u679c\u4e24\u6b21\u70b9\u5dee\u503c\u4e3a $1$ \uff0c\u5219\u4e2d\u95f4\u6ca1\u6709\u522b\u7684\u70b9\uff0c\u5426\u5219\u4e2d\u95f4\u5305\u88f9\u4e86\u65b0\u7684\u70b9\u3002 \u540c\u7406,\u5bf9\u5e73\u884c\u4e8e $x$ \u8f74\u7684\u7ebf\u4e5f\u8fdb\u884c\u5982\u4e0a\u7684\u64cd\u4f5c\uff0c\u627e\u51fa\u4e0a\u4e0b\u8fb9\u76f8\u63a5\u7684\u60c5\u51b5\u3002\n\n\n# \u601d\u8003\n$\\qquad$\u5982\u679c\u6b63\u65b9\u5f62\u53ef\u4ee5\u76f8\u4e92\u91cd\u53e0, \u90a3\u5c31\u5fc5\u987b\u7528\u7ebf\u6bb5\u6811\u7edf\u8ba1\u3002\u5f53\u7136\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u505a\uff0c\u4ee3\u7801\u91cf\u5dee\u4e0d\u591a\u3002\u867d\u7136\u6709\u4e24\u767e\u6765\u884c\uff0c\u4f46\u662f\u8981\u505a\u4e24\u904d\uff0c\u5b9e\u9645\u4e0a\u5f88\u591a\u4ee3\u7801\u662f\u76f8\u4f3c\u7684\uff0c\u7279\u522b\u662f\u53cc\u6307\u9488\u6cd5\u5904\u7406\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\text{log}_2n)$ \uff0c\u5904\u7406\u6b21\u6570\u4e0d\u8d85\u8fc7 $10^5$ \u3002\n\n# \u4ee3\u7801\n```cpp\n#include<iostream>\n#include <cstring>\n#include <algorithm>\n#include <map>\n\nusing namespace std;\nconst int Nmax = 5e4+5; //\u5e73\u884c\u8fb9\u7684\u6570\u76ee \u662f\u725b\u68da\u76842\u500d\nconst int Pmax = 1e5+5; //\u4e00\u4e2a\u957f\u65b9\u5f62\u67094\u4e2a\u9876\u70b9\n\nint tou[Nmax];//\u67d0\u4e2a\u6b63\u65b9\u5f62\u662f\u5426\u76f8\u63a5\nint n;//\u957f\u65b9\u5f62\u4e2a\u6570\n\nstruct BIT{\n    int c[Nmax];\n    int n; //\u5b58\u50a81~n\u533a\u95f4\n\n    void init(int n){\n        memset(c, 0, sizeof(c));\n        this->n = n;\n    }\n\n    inline int lowBit(int x){\n        return x&(-x);\n    }\n\n    void add(int x, int v){//x\u8282\u70b9\u53ca\u5176\u7236\u8282\u70b9+v\n        while(x<=n){\n            c[x] += v;\n            x += lowBit(x);\n        }\n    }\n\n    int get(int x){ //\u8ba1\u7b971~x\u5355\u5143\u7684\u603b\u548c\n        int sum = 0;\n        while(x>=1){\n            sum += c[x];\n            x -= lowBit(x);\n        }\n        return sum;\n    }\n};\nBIT bTree;\n\nstruct Node{\n    int x,y,id,at; //id \u957f\u65b9\u5f62\u7f16\u53f7, at 0 \u8d77\u70b9, 1 \u7ec8\u70b9\n    Node(){};\n    Node(int x, int y, int id, int at){\n        this->x = x, this->y = y, this->id = id, this->at= at;\n    }\n};\nNode nArr[Pmax];\n\nstruct Data{\n    int x0,y0,x1,y1;\n    Data(){};\n    Data(int x0, int y0, int x1, int y1){\n        this->x0=x0, this->y0=y0, this->x1=x1, this->y1=y1;\n    }\n} dArr[Nmax];\n\n\nbool cmpXascYasc(Node a, Node b){//\u627e\u5e73\u884c\u4e8eY\u8f74\u7684\u7ebf, \u6309Y\u503c\u964d\u5e8f\n    if(a.x == b.x){//x\u76f8\u540c\n        if(a.y == b.y)//y\u76f8\u540c\n            return a.at<b.at; //0 \u8d77\u70b9, 1 \u7ec8\u70b9\uff1b x y\u90fd\u76f8\u540c, \u5148\u8d77\u70b9 \u540e\u7ec8\u70b9\n        else\n            return a.y<b.y; //x\u76f8\u540c\u65f6, y\u4ece\u5c0f\u5230\u5927\u6392\u5217\n    }\n    return a.x<b.x; //x\u4e0d\u540c \u6309x\u5347\u5e8f\u6392\u5217\n}\n\nbool cmpYascXasc(Node a, Node b){//\u627e\u5e73\u884c\u4e8ex\u8f74\u7684\u7ebf, \u6309x\u503c\u5347\u5e8f\n    if(a.y == b.y){//y\u76f8\u540c\n        if(a.x == b.x)//x\u76f8\u540c\n            return a.at<b.at; //0 \u8d77\u70b9, 1 \u7ec8\u70b9\uff1b x y\u90fd\u76f8\u540c, \u5148\u8d77\u70b9 \u540e\u7ec8\u70b9\n        else\n            return a.x<b.x; //y\u76f8\u540c\u65f6, x\u4ece\u5c0f\u5230\u5927\u6392\u5217\n    }\n    return a.y<b.y; //y\u4e0d\u540c \u6309y\u5347\u5e8f\u6392\u5217\n}\n\nvoid findYparTouch(int cntN) { //\u627e\u51fa\u4e0eY\u8f74\u5e73\u884c\u7684\u8fb9\u76f8\u63a5\u7684\u60c5\u51b5\n    //\u627e\u5230x\u503c\u76f8\u540c\u7684\u70b9\n    int front = 1, back = front;\n    while (front <= cntN || back <= cntN) {\n        while (front <= cntN && back <= cntN && nArr[front].x != nArr[back].x) {\n            front++;\n            back++;\n        }\n        while (front <= cntN && back <= cntN && nArr[front].x == nArr[back].x) {\n            back++;\n        }\n        back--;\n        if (front != back) { //\u6b64\u65f6front\u548cback\u4e2d\u95f4\u7684\u70b9\u5728\u4e00\u6761\u7ebf\u4e0a\n//            BIT bTree;\n//            bTree.init(n); //\u6807\u8bb0\u5c5e\u4e8e\u67d0\u4e2a\u957f\u65b9\u5f62\u7684\u8fb9\u662f\u5426\u7ed3\u675f 1\u6ca1\u7ed3\u675f, 0 \u7ed3\u675f\u4e86\n            map<int, int> mStCnt;//key=id, val=cnt, \u8bb0\u5f55\u67d0\u4e2a\u7ebf\u6bb5\u8d77\u70b9\u4f4d\u7f6e\u65f6 \u5728front->back\u533a\u95f4\u5df2\u7ecf\u5904\u7406\u7684\u70b9\u6570\n            map<int, int> mEnCnt;//\u8bb0\u5f55\u67d0\u4e2a\u7ebf\u6bb5\u7ec8\u70b9\u4f4d\u7f6e\u65f6 \u5728front->back\u533a\u95f4\u5df2\u7ecf\u5904\u7406\u7684\u70b9\u6570\n            for (int i = front; i <= back; i++) {\n                int idCur = nArr[i].id;\n                if (nArr[i].at == 0) {//\u8d77\u70b9\n                    mStCnt[idCur] = i - front + 1;\n                    if (bTree.get(n) > 0)\n                        tou[idCur] = 1; //\u6709\u672a\u7ed3\u675f\u7684\u8fb9, \u5f53\u524d\u70b9\u548c\u5176\u4ed6\u65b9\u5f62\u76f8\u63a5\n                    bTree.add(nArr[i].id, 1);//\u63d2\u5165\u8d77\u70b9\n                } else { //\u7ec8\u70b9\n                    mEnCnt[idCur] = i - front + 1;\n//                    if (bTree.get(n) > 1) //\u9664\u4e86\u81ea\u5df1\u7684\u8d77\u70b9\u5916,\u8fd8\u6709\u5176\u4ed6\u8d77\u70b9\n//                        tou[idCur] = 1; //\u6709\u672a\u7ed3\u675f\u7684\u8fb9, \u5f53\u524d\u70b9\u548c\u5176\u4ed6\u65b9\u5f62\u76f8\u63a5\n                    bTree.add(idCur, -1);//\u63d2\u5165\u7ec8\u70b9\n                }\n            }\n\n            for (auto iter: mStCnt) { //\u8d77\u70b9\u548c\u7ec8\u70b9\u4e2d\u5305\u542b\u5176\u4ed6\u70b9, \u5904\u7406\u957f\u533a\u95f4\u5b8c\u5168\u5305\u542b\u77ed\u533a\u95f4,\u957f\u533a\u95f4\u65e0\u6cd5\u88ab\u7edf\u8ba1\u7684\u60c5\u51b5\n                int idCur = iter.first;\n                if (mEnCnt[idCur] - mStCnt[idCur] > 1)\n                    tou[idCur] = 1;\n            }\n            front = back = back + 1;\n        }\n    }\n}\n\nvoid findXparTouch(int cntN){ //\u627e\u51fa\u4e0eX\u8f74\u5e73\u884c\u7684\u8fb9\u76f8\u63a5\u7684\u60c5\u51b5\n    //\u627e\u5230x\u503c\u76f8\u540c\u7684\u70b9\n    int front=1, back=front;\n    while(front<=cntN || back<=cntN){\n        while(front<=cntN && back<=cntN && nArr[front].y != nArr[back].y){\n            front++; back++;\n        }\n        while(front<=cntN && back<=cntN && nArr[front].y == nArr[back].y){\n            back++;\n        }\n        back--;\n        if(front != back){ //\u6b64\u65f6front\u548cback\u4e2d\u95f4\u7684\u70b9\u5728\u4e00\u6761\u7ebf\u4e0a\n            map<int, int> mStCnt;//key=id, val=cnt, \u8bb0\u5f55\u67d0\u4e2a\u7ebf\u6bb5\u8d77\u70b9\u4f4d\u7f6e\u65f6 \u5728front->back\u533a\u95f4\u5df2\u7ecf\u5904\u7406\u7684\u70b9\u6570\n            map<int, int> mEnCnt;//\u8bb0\u5f55\u67d0\u4e2a\u7ebf\u6bb5\u7ec8\u70b9\u4f4d\u7f6e\u65f6 \u5728front->back\u533a\u95f4\u5df2\u7ecf\u5904\u7406\u7684\u70b9\u6570\n            for(int i=front; i<=back; i++){\n                int idCur = nArr[i].id;\n                if(nArr[i].at == 0){//\u8d77\u70b9\n                    mStCnt[idCur] = i-front+1;\n                    if(bTree.get(n) > 0)\n                        tou[idCur] = 1; //\u6709\u672a\u7ed3\u675f\u7684\u8fb9, \u5f53\u524d\u70b9\u548c\u5176\u4ed6\u65b9\u5f62\u76f8\u63a5\n                    bTree.add(nArr[i].id, 1);//\u63d2\u5165\u8d77\u70b9\n                } else{ //\u7ec8\u70b9\n                    mEnCnt[idCur] = i-front+1;\n//                    if(bTree.get(n) > 1) //\u9664\u4e86\u81ea\u5df1\u7684\u8d77\u70b9\u5916,\u8fd8\u6709\u5176\u4ed6\u8d77\u70b9\n//                        tou[idCur] = 1; //\u6709\u672a\u7ed3\u675f\u7684\u8fb9, \u5f53\u524d\u70b9\u548c\u5176\u4ed6\u65b9\u5f62\u76f8\u63a5\n                    bTree.add(idCur, -1);//\u63d2\u5165\u7ec8\u70b9\n                }\n            }\n\n            for(auto iter: mStCnt){ //\u8d77\u70b9\u548c\u7ec8\u70b9\u4e2d\u5305\u542b\u5176\u4ed6\u70b9, \u5904\u7406\u957f\u533a\u95f4\u5b8c\u5168\u5305\u542b\u77ed\u533a\u95f4,\u957f\u533a\u95f4\u65e0\u6cd5\u88ab\u7edf\u8ba1\u7684\u60c5\u51b5\n                int idCur = iter.first;\n                if(mEnCnt[idCur]-mStCnt[idCur]>1)\n                    tou[idCur] = 1;\n            }\n            front = back = back + 1;\n        }\n    }\n}\n\nvoid checkYparXascYasc(){ //\u68c0\u67e5Y\u8f74\u5e73\u884c\u7684\u7ebf\n    memset(nArr, 0 ,sizeof(Node)*Pmax);\n    int cntN=0;\n    for(int i=1; i<=n; i++){\n        nArr[++cntN] = Node(dArr[i].x0, dArr[i].y0, i, 0);\n        nArr[++cntN] = Node(dArr[i].x0, dArr[i].y1, i, 1);\n        nArr[++cntN] = Node(dArr[i].x1, dArr[i].y0, i, 0);\n        nArr[++cntN] = Node(dArr[i].x1, dArr[i].y1, i, 1);\n    }\n\n    sort(nArr+1, nArr+cntN+1, cmpXascYasc);\n    findYparTouch(cntN);\n}\n\nvoid checkXparYascXasc(){//\u68c0\u67e5X\u8f74\u5e73\u884c\u7684\u7ebf\n    memset(nArr, 0 ,sizeof(Node)*Pmax);//\u4e00\u4e2a\u6b63\u65b9\u5f62 \u56db\u4e2a\u7aef\u70b9\n    int cntN=0;\n    for(int i=1; i<=n; i++){\n        nArr[++cntN] = Node(dArr[i].x0, dArr[i].y0, i, 0);\n        nArr[++cntN] = Node(dArr[i].x0, dArr[i].y1, i, 0);\n        nArr[++cntN] = Node(dArr[i].x1, dArr[i].y0, i, 1);\n        nArr[++cntN] = Node(dArr[i].x1, dArr[i].y1, i, 1);\n    }\n\n    sort(nArr+1, nArr+cntN+1, cmpYascXasc);\n    findXparTouch(cntN);\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n//    freopen(\"3.in\", \"r\", stdin);\n//    freopen(\"my.out\", \"w\", stdout);\n\n    cin >> n;\n    for(int i=1; i<=n; i++){\n        int x0,y0,x1,y1;\n        cin >> x0 >> y0 >> x1 >> y1;\n        dArr[i] = Data(x0,y0,x1,y1);\n    }\n\n    bTree.init(n); //\u6807\u8bb0\u5c5e\u4e8e\u67d0\u4e2a\u957f\u65b9\u5f62\u7684\u8fb9\u662f\u5426\u7ed3\u675f 1\u6ca1\u7ed3\u675f, 0 \u7ed3\u675f\u4e86  BIT bTree;\n    checkYparXascYasc();\n    checkXparYascXasc();\n\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        if(tou[i]>0) sum++;\n    }\n    cout << n - sum << endl;\n\n    return 0;\n}\n```\n",
        "postTime": 1603709000,
        "uid": 280960,
        "name": "Henry_C",
        "ccfLevel": 0,
        "title": "P6081 USACO05DEC Barn Expansion G"
    }
]