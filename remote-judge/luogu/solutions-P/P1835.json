[
    {
        "content": "# \u5de8\u7b80\u5355\u6613\u61c2\u7684\u9898\u89e3[~~\u8fde\u6211\u90fd\u770b\u5f97\u61c2\u8fd8\u6709\u8c01\u770b\u4e0d\u61c2~~]\n### \u9996\u5148\u6765\u770b\u4e0b\u6570\u636e\u8303\u56f4[L\uff0cR] (L\u2264R\u22642147483647,R-L\u22641000000)\n\u6781\u503c\u6700\u5927\u670920\u4ebf,\u56e0\u6b64O(N)\u7684\u66b4\u529b\u7b5b\u4f1a~~\u77ac\u95f4\u7206\u70b8~~\n\n### \u518d\u4ed4\u7ec6\u770b\u770b\u9898\n\u9898\u76ee\u8981\u6211\u4eec\u7b5b\u51faL-R\u8303\u56f4\u5185\u7684\u7d20\u6570,\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5c06\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u5408\u6570\u8e22\u51fa\u53bb\u4e0d\u5c31\u7ed3\u675f\u4e86\u5417w\n\n \u8bf4\u8d77\u5224\u65ad\u5408\u6570,\u6211\u5c31\u60f3\u5230\u4e86~~\u7f8e\u7334\u738b~~\u5408\u6570\u7684\u4e00\u4e2a\u6027\u8d28:\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u4e2a\u4e0d\u4e3a1\u4e14\u4e0d\u7b49\u4e8e\u672c\u8eab\u7684\u56e0\u5b50\u76f8\u4e58\n \u5373 n=a*b(n\u4e3a\u5408\u6570).\u4e0b\u8bc1\u4e4b:\n- \u8bbea<=b \u5219a * a<a*b\n- \u53c8\u56e0a* b=n,\u5219a* a<=n*n\n- \u5373a<=![](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Cfn_cm%20%5Clarge%20%5Csqrt%7Bn%7D)\n- \u56e0\u6b64,\u57281-![](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Cfn_cm%20%5Clarge%20%5Csqrt%7Bn%7D)\u7684\u8303\u56f4\u4e4b\u4e2d\u6211\u4eec\u5fc5\u80fd\u627e\u5230n\u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\n-  \u6240\u4ee5,\u6211\u4eec\u53ea\u9700\u8981\u57281-![](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Cfn_cm%20%5Clarge%20%5Csqrt%7BR%7D)\u8303\u56f4\u4e2d\u7b5b\u51fa\u6240\u6709\u7684\u8d28\u6570(\u5269\u4e0b\u7684\u5373\u4e3a\u5408\u6570),\u7136\u540e\u7528\u6211\u4eec\u5df2\u7ecf\u7b5b\u51fa\u6765\u7684\u56e0\u5b50\u53bb\u5728L-R\u7684\u8303\u56f4\u4e2d\u6c42\u51fa\u6240\u6709\u7684\u5408\u6570,\u5269\u4e0b\u6765\u7684\u5373\u4e3a\u6211\u4eec\u8981\u627e\u7684\u8d28\u6570,\u800cR\u7684\u6700\u5927\u503c\u5927\u7ea6\u4e3a20\u4ebf,\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u6c42![](https://latex.codecogs.com/png.latex?%5Cdpi%7B100%7D%20%5Cfn_cm%20%5Clarge%20%5Csqrt%7BR%7D)(1-50000\u4e2d\u7684\u8d28\u6570\u5c31\u53ef\u4ee5\u62ff\u4ed6\u4eec\u6765~~\u73a9\u800d~~\u4f7f\u7528\u4e86!)\n\n\n### \u6709\u4e86\u601d\u8def\u4e4b\u540e\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86,\u5927\u6982\u6d41\u7a0b\u5982\u4e0b\n1. \u7b5b\u51fa1-50000\u4e2d\u7684\u6240\u6709\u8d28\u6570,\u5e76\u4e14\u5bf9\u5408\u6570\u6253\u4e0a\u6807\u8bb0.\n2. \u5728L-R\u7684\u8303\u56f4\u5462\u7528\u6211\u4eec\u5df2\u6c42\u51fa\u7684\u8d28\u6570\u7b5b\u51fa\u5176\u4e2d\u7684\u5408\u6570(\u8bbep\u4e3a\u8d28\u6570,\u5219i*p\u4e00\u5b9a\u4e0d\u4e3a\u8d28\u6570),\u5e76\u5bf9\u5176\u6253\u4e0a\u6807\u8bb0\n3. \u904d\u5386L-R,\u6ca1\u6709\u6253\u6807\u8bb0\u7684\u5143\u7d20\u5373\u4e3a\u6211\u4eec\u6240\u6c42\u7684\u7d20\u6570\n\n# \u4ee3\u7801\u5982\u4e0b\n```cpp\n/*Coded By Lxhao*/\n/*Full Of Stars*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define re register\n#define ll long long\nconst int maxn=1e6+1;\nll l,r;\nint prime[maxn],cnt,ans;\nbool vis[maxn];\ninline void Gprime()//\u7ebf\u6027\u7b5b\u7d20\u6570,\u9884\u5904\u7406\u6839\u53f7R\u5185\u7684\u7d20\u6570,\u8fd9\u91cc\u4e0d\u8d58\u8ff0\u4e86,dalao\u4eec\u80af\u5b9a\u90fd\u4f1aqwq\n{\n    for(re int i=2;i<=50000;++i)\n    {\n        if(!vis[i])prime[++cnt]=i;\n        for(re int j=1;i*prime[j]<=50000;j++)\n        {\n            vis[i*prime[j]]=1;//\u6807\u8bb0\u5408\u6570\n            if(i%prime[j]==0) break;\n        }\n    }\n}//50000\u7684\u8303\u56f4\u5f88\u5c0f\u5373\u4f7f\u4e0d\u7528\u7ebf\u6027\u7b5b\u7528\u6839\u53f7N\u7684\u7b5b\u6cd5\u4e5f\u80fd\u8fc7\nint main()\n{\n    ios::sync_with_stdio(false);//\u8bfb\u5165\u52a0\u901f(\u5728freopen\u4e0b\u4e0d\u53ef\u7528!!!)\n    cin>>l>>r;\n    l=l==1?2:l;//\u7279\u5224L=1\u7684\u60c5\u51b5\n    Gprime();//\u7b5b\u51fa\u6839\u53f7R\u5185\u7684\u6240\u6709\u8d28\u6570\u4ee5\u53ca\u5269\u4e0b\u7684\u5408\u6570\n    memset(vis,0,sizeof(vis));//\u61d2\u5f97\u591a\u5f00\u4e00\u4e2a\u6570\u7ec4,\u6cbf\u7528\u51fd\u6570\u4e2d\u7684\u6570\u7ec4\u65f6\u8bb0\u5f97\u6e05\u7a7a\n    for(re int i=1;i<=cnt;++i)//\u679a\u4e3e\u5df2\u7ecf\u7b5b\u51fa\u6765\u7684\u8d28\u6570\n    {\n        ll p=prime[i],start=(l+p-1)/p*p>2*p?(l+p-1)/p*p:2*p;//\u6211\u4eec\u4ece\u5927\u4e8eL\u7684\u6700\u5c0f\u7684\u80fd\u88abp\u6574\u9664\u7684\u6570\u5f00\u59cb,(l+p-1)\u5c31\u7b49\u4e8eceil(l+p-1),\u56e0\u4e3a\u6709\u53ef\u80fd\u4f1a\u5728\u63a5\u4e0b\u6765\u7b5b\u7684\u8fc7\u7a0b\u4e2d\u628a\u81ea\u5df1\u4e5f\u4e00\u8d77\u7b5b\u6389,\u6240\u4ee5\u5728\u6b64\u7279\u5224\u4e00\u4e0b\n        for(re ll int j=start;j<=r;j+=p)vis[j-l+1]=1;//\u56e0\u4e3a\u5982\u679c\u4ecej\u5f00\u59cb\u6807\u8bb0\u7684\u8bdd\u53ef\u80fd\u4f1a\u7206vis\u7684\u7a7a\u95f4,\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u4ece1\u5f00\u59cb\u6807\u8bb0\u5408\u6570,\u539f\u7406\u5728\u4e0a\u9762\u5df2\u7ecf\u53d9\u8ff0\u8fc7\u4e86\n    }\n    for(re int i=1;i<=r-l+1;++i)if(!vis[i])ans++;//r-l+1\u5373\u4e3a\u533a\u95f4\u957f\u5ea6,\u904d\u5386\u533a\u95f4\u627e\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u5143\u7d20\u5e76\u7d2f\u52a0\u7b54\u6848\n    cout<<ans;\n}\n```\n### \u7b97\u6cd5\u7684\u901f\u5ea6\u8fd8\u662f\u6bd4\u8f83\u4f18\u79c0\u7684,\u4e0d\u5438\u6c27\u548c\u5438\u6c27~~\u7f8a~~\u90fd\u662f65ms\u7684\u6837\u5b50\n### \u8c22\u8c22\u89c2\u770bqwq",
        "postTime": 1564319280,
        "uid": 133977,
        "name": "Segmentree",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u6211\u653e\u4e00\u4e2a\u4ece\u67d0\u4f4d\u5927\u4f6c\u7684PPT\u4e0a\u5f04\u4e0b\u6765\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5728\u4f4e\u4e8e\u7ebf\u6027\u7684\u65f6\u95f4\u5185\u6c42\u51fa\u7d20\u6570\u4e2a\u6570\u3002  \n\u8fd9\u4e2a\u7b97\u6cd5\u540d\u5b57\u597d\u50cf\u53eb\u505a**the Meissel, Lehmer, Lagarias, Miller, Odlyzko method**\uff0c\u7f51\u4e0a\u7684\u8d44\u6599\u6bd4\u8f83\u5c11\u3002  \n\u9996\u5148\u653e\u51e0\u4e2a\u5b9a\u4e49\uff0c\u5b9a\u4e49\u6bd4\u8f83\u591a\u3002\u3002\u3002  \np[i]\u8868\u793a\u7b2ci\u4e2a\u7d20\u6570\uff0cpi[i]\u8868\u793ai\u4ee5\u5185\u7d20\u6570\u4e2a\u6570,f[n,m]\u8868\u793an\u4ee5\u5185\u4e0d\u7b49\u4e8e\u7b2ci\u81f3m\u4e2a\u7d20\u6570\u53ca\u5176\u500d\u6570\u7684\u6570\u7684\u4e2a\u6570\uff0cp2[n,m]\u8868\u793an\u4ee5\u5185\u53ea\u6709\u4e24\u4e2a\u7d20\u56e0\u6570\u4e14\u6700\u5c0f\u7684\u7d20\u56e0\u6570\u5927\u4e8ep[m]\u7684\u6570\u7684\u4e2a\u6570\uff0cp3[n,m]\u8868\u793an\u4ee5\u5185\u53ea\u6709\u4e09\u4e2a\u7d20\u56e0\u6570\u4e14\u6700\u5c0f\u7684\u7d20\u56e0\u6570\u5927\u4e8ep[m]\u7684\u6570\u7684\u4e2a\u6570\u3002  \n\u6ce8\u610f\uff0c\u63a5\u4e0b\u6765\u63d0\u5230\u7684\u9664\u6cd5\u90fd\u662f\u6307\u5411\u4e0b\u53d6\u6574\u3002  \nf~~\u660e\u663e~~\u53ef\u4ee5\u9012\u5f52\u8ba1\u7b97\uff0c\u8f6c\u79fb\u65b9\u7a0b\uff1af[n,m] = f[n,m-1] + f[n/p[m],m-1]\u3002~~\u8bc1\u660e\u7559\u4f5c\u7ec3\u4e60~~  \n\u6839\u636e\u5927\u4f6c\u7684PPT\uff0c\u8ba1\u7b97f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(mn^(1/2))\u3002~~\u4f46\u662f\u849f\u84bb\u6211\u6839\u672c\u4e0d\u4f1a\u8bc1\u660e\u3002\u3002~~  \n\u7136\u540e\u662fp2\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002p2[n,m] = \u03a3pi[n/k] - pi[k] + 1\uff0c\u5176\u4e2dk\u662f\u6240\u6709\u5927\u4e8ep[m]\u4e14\u5c0f\u4e8en^(1/2)\u7684\u7d20\u6570\u3002  \n\u63a5\u7740\u662fp3\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002p3[n,m] = \u03a3p2[n/k,pi[k]-1],\u5176\u4e2dk\u662f\u6240\u6709\u5927\u4e8ep[m]\u4e14\u5c0f\u4e8en^(1/3)\u7684\u7d20\u6570\u3002  \n\u5148\u4ecb\u7ecd\u7b2c\u4e00\u79cd\u8ba1\u7b97pi[n]\u7684\u65b9\u6cd5\u3002\u7ebf\u6027\u7b5b\u9884\u5904\u7406\u524dn^(1/2)\u7684p\u548cpi\u3002pi[n] = pi[n^(1/3)] + f[n,pi[n^(1/3)]] - 1 - p2[n,pi[n^(1/3)]]\u3002\u51cf\u4e00\u662f\u4e3a\u4e86\u6392\u9664\u63891\u3002  \n\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^(5/6) / log(n))\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5728f\u7684\u8ba1\u7b97\u4e0a\uff0c\u5176\u4e2dpi[n^(1/3)] \u2248 n^(1/3) / log n\u3002  \n\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u8981\u5c3d\u91cf\u51cf\u5c11f\u7684\u8ba1\u7b97\u3002\u4ee5\u4e0b\u662f\u7ecf\u8fc7\u6539\u8fdb\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002  \n\u8fd8\u662f\u7ebf\u6027\u7b5b\u9884\u5904\u7406\u524dn^(1/2)\u7684p\u548cpi\u3002pi[n] = pi[n^(1/4)] + f[n,pi[n^(1/4)]] - 1 - p2[n,pi[n^(1/4)]] - p3[n,pi[n^(1/4)]]\u3002\u8ba1\u7b97p3\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u4e0d\u5230O(n^(2/3))\uff0c\u6240\u4ee5\u74f6\u9888\u8fd8\u5728f\u4e0a\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^(3/4) / log n)\u3002  \n\u597d\u5566\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6109\u5feb\u7684\u8d34\u4ee3\u7801\u73af\u8282\u5566\uff01\u5bf9\u4e86\uff0c\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u60f3\u8981\u907f\u514d\u9012\u5f52\u8ba1\u7b97pi\uff0c\u6b27\u62c9\u7b5b\u9700\u8981\u9884\u5904\u7406\u524dn^(3/4)\u3002\u4e0d\u8fc7\u8fd9\u90fd\u662f\u5c0f\u7ec6\u8282\u5566\u3002\u3002  \n```cpp\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n\n#pragma warning(disable:4996)\n#define INF 2000000005//2 * 10^9\n#define lowbit(a) ((a)&-(a))\ninline long long max(long long a, long long b)\n{\n    return a > b ? a : b;\n}\ninline long long min(long long a, long long b)\n{\n    return a < b ? a : b;\n}\n\n#define FAIL -INF\n\nconst long long MAXN = 6893911;//10000000;\n\nlong long p[MAXN], cnt;\nbool mark[MAXN];\nint pi[MAXN];\n\nvoid init()\n{\n    long long i, j;\n    for (i = 2; i < MAXN; i++)\n    {\n        if (!mark[i])\n            p[cnt++] = i;\n        pi[i] = pi[i - 1] + !mark[i];\n        for (j = 0; p[j] * i < MAXN&&j < cnt; j++)\n        {\n            mark[p[j] * i] = true;\n            if (i%p[j] == 0)\n                break;\n        }\n    }\n}\n\nint f(long long n, int m)\n{\n    if (n == 0)\n        return 0;\n    if (m == 0)\n        return n - n / 2;\n    return f(n, m - 1) - f(n / p[m], m - 1);\n}\n\nint Pi(long long N);\n\nint p2(long long n, int m)\n{\n    int ans = 0;\n    for (int i = m + 1; (long long)p[i] * p[i] <= n; i++)\n        ans += Pi(n / p[i]) - Pi(p[i]) + 1;\n    return ans;\n}\n\nint p3(long long n, int m)\n{\n    int ans = 0;\n    for (int i = m + 1; (long long)p[i] * p[i] * p[i] <= n; i++)\n        ans += p2(n / p[i], i - 1);\n    return ans;\n}\n\nint Pi(long long N)\n{\n    if (N < MAXN)\n        return pi[N];\n\n    int lim = pow(N, 0.25) + 1;\n    int i;\n\n    for (i = 0; p[i] <= lim; i++);\n\n    int ans = i + f(N, i - 1) - 1 - p2(N, i - 1) - p3(N, i - 1);\n\n    return ans;\n}\n\nint main()\n{\n    long long L, R;\n\n    scanf(\"%lld %lld\", &L, &R);\n\n    init();\n\n    printf(\"%d\", Pi(R) - Pi(L-1));\n\n//\tsystem(\"pause\");\n    return 0;\n}\n//1 2000000000\n//2147483647\u4ee5\u5185\u7d20\u6570\u4e2a\u6570\uff1a105097565\n```",
        "postTime": 1534239573,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u8003\u9a8c\u57fa\u7840\n\n\u770b\u8d77\u6765\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u7b5b\u6cd5\uff0c\u4f46\u662f\u4e00\u770b\u6570\u636e\u8303\u56f4\u5c31\u4f1a\u51c9\u5fc3\n\n\u7a81\u7834\u53e3\u5c31\u5728\u4e8e\u6211\u4eec\u7684l\u548cr\u533a\u95f4\u5f88\u5c0f\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u7528\u7b5b\u6cd5\n\n\u53ef\u4ee5\u5148\u6253\u51fa\u4e00\u4e9b\u5c0f\u8d28\u6570\uff08\u5728\u8fd9\u4efd\u4ee3\u7801\u91cc\u9762\u53d6\u5f97\u662f\u524d5144\u4e2a\uff0c\u592a\u591a\u4f1a\u8fc7\u957f\uff0c\u592a\u5c0f\u4f1aWA\uff09\uff0c\u7136\u540e\u76f4\u63a5\u7528\u57c3\u6c0f\u7b5b\u5c31\u53ef\u4ee5\u4e86\n\n\n\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\u9762\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nbool isPrime[1000005];\nlong long primes[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,31981,31991,32003,32009,32027,32029,32051,32057,32059,32063,32069,32077,32083,32089,32099,32117,32119,32141,32143,32159,32173,32183,32189,32191,32203,32213,32233,32237,32251,32257,32261,32297,32299,32303,32309,32321,32323,32327,32341,32353,32359,32363,32369,32371,32377,32381,32401,32411,32413,32423,32429,32441,32443,32467,32479,32491,32497,32503,32507,32531,32533,32537,32561,32563,32569,32573,32579,32587,32603,32609,32611,32621,32633,32647,32653,32687,32693,32707,32713,32717,32719,32749,32771,32779,32783,32789,32797,32801,32803,32831,32833,32839,32843,32869,32887,32909,32911,32917,32933,32939,32941,32957,32969,32971,32983,32987,32993,32999,33013,33023,33029,33037,33049,33053,33071,33073,33083,33091,33107,33113,33119,33149,33151,33161,33179,33181,33191,33199,33203,33211,33223,33247,33287,33289,33301,33311,33317,33329,33331,33343,33347,33349,33353,33359,33377,33391,33403,33409,33413,33427,33457,33461,33469,33479,33487,33493,33503,33521,33529,33533,33547,33563,33569,33577,33581,33587,33589,33599,33601,33613,33617,33619,33623,33629,33637,33641,33647,33679,33703,33713,33721,33739,33749,33751,33757,33767,33769,33773,33791,33797,33809,33811,33827,33829,33851,33857,33863,33871,33889,33893,33911,33923,33931,33937,33941,33961,33967,33997,34019,34031,34033,34039,34057,34061,34123,34127,34129,34141,34147,34157,34159,34171,34183,34211,34213,34217,34231,34253,34259,34261,34267,34273,34283,34297,34301,34303,34313,34319,34327,34337,34351,34361,34367,34369,34381,34403,34421,34429,34439,34457,34469,34471,34483,34487,34499,34501,34511,34513,34519,34537,34543,34549,34583,34589,34591,34603,34607,34613,34631,34649,34651,34667,34673,34679,34687,34693,34703,34721,34729,34739,34747,34757,34759,34763,34781,34807,34819,34841,34843,34847,34849,34871,34877,34883,34897,34913,34919,34939,34949,34961,34963,34981,35023,35027,35051,35053,35059,35069,35081,35083,35089,35099,35107,35111,35117,35129,35141,35149,35153,35159,35171,35201,35221,35227,35251,35257,35267,35279,35281,35291,35311,35317,35323,35327,35339,35353,35363,35381,35393,35401,35407,35419,35423,35437,35447,35449,35461,35491,35507,35509,35521,35527,35531,35533,35537,35543,35569,35573,35591,35593,35597,35603,35617,35671,35677,35729,35731,35747,35753,35759,35771,35797,35801,35803,35809,35831,35837,35839,35851,35863,35869,35879,35897,35899,35911,35923,35933,35951,35963,35969,35977,35983,35993,35999,36007,36011,36013,36017,36037,36061,36067,36073,36083,36097,36107,36109,36131,36137,36151,36161,36187,36191,36209,36217,36229,36241,36251,36263,36269,36277,36293,36299,36307,36313,36319,36341,36343,36353,36373,36383,36389,36433,36451,36457,36467,36469,36473,36479,36493,36497,36523,36527,36529,36541,36551,36559,36563,36571,36583,36587,36599,36607,36629,36637,36643,36653,36671,36677,36683,36691,36697,36709,36713,36721,36739,36749,36761,36767,36779,36781,36787,36791,36793,36809,36821,36833,36847,36857,36871,36877,36887,36899,36901,36913,36919,36923,36929,36931,36943,36947,36973,36979,36997,37003,37013,37019,37021,37039,37049,37057,37061,37087,37097,37117,37123,37139,37159,37171,37181,37189,37199,37201,37217,37223,37243,37253,37273,37277,37307,37309,37313,37321,37337,37339,37357,37361,37363,37369,37379,37397,37409,37423,37441,37447,37463,37483,37489,37493,37501,37507,37511,37517,37529,37537,37547,37549,37561,37567,37571,37573,37579,37589,37591,37607,37619,37633,37643,37649,37657,37663,37691,37693,37699,37717,37747,37781,37783,37799,37811,37813,37831,37847,37853,37861,37871,37879,37889,37897,37907,37951,37957,37963,37967,37987,37991,37993,37997,38011,38039,38047,38053,38069,38083,38113,38119,38149,38153,38167,38177,38183,38189,38197,38201,38219,38231,38237,38239,38261,38273,38281,38287,38299,38303,38317,38321,38327,38329,38333,38351,38371,38377,38393,38431,38447,38449,38453,38459,38461,38501,38543,38557,38561,38567,38569,38593,38603,38609,38611,38629,38639,38651,38653,38669,38671,38677,38693,38699,38707,38711,38713,38723,38729,38737,38747,38749,38767,38783,38791,38803,38821,38833,38839,38851,38861,38867,38873,38891,38903,38917,38921,38923,38933,38953,38959,38971,38977,38993,39019,39023,39041,39043,39047,39079,39089,39097,39103,39107,39113,39119,39133,39139,39157,39161,39163,39181,39191,39199,39209,39217,39227,39229,39233,39239,39241,39251,39293,39301,39313,39317,39323,39341,39343,39359,39367,39371,39373,39383,39397,39409,39419,39439,39443,39451,39461,39499,39503,39509,39511,39521,39541,39551,39563,39569,39581,39607,39619,39623,39631,39659,39667,39671,39679,39703,39709,39719,39727,39733,39749,39761,39769,39779,39791,39799,39821,39827,39829,39839,39841,39847,39857,39863,39869,39877,39883,39887,39901,39929,39937,39953,39971,39979,39983,39989,40009,40013,40031,40037,40039,40063,40087,40093,40099,40111,40123,40127,40129,40151,40153,40163,40169,40177,40189,40193,40213,40231,40237,40241,40253,40277,40283,40289,40343,40351,40357,40361,40387,40423,40427,40429,40433,40459,40471,40483,40487,40493,40499,40507,40519,40529,40531,40543,40559,40577,40583,40591,40597,40609,40627,40637,40639,40693,40697,40699,40709,40739,40751,40759,40763,40771,40787,40801,40813,40819,40823,40829,40841,40847,40849,40853,40867,40879,40883,40897,40903,40927,40933,40939,40949,40961,40973,40993,41011,41017,41023,41039,41047,41051,41057,41077,41081,41113,41117,41131,41141,41143,41149,41161,41177,41179,41183,41189,41201,41203,41213,41221,41227,41231,41233,41243,41257,41263,41269,41281,41299,41333,41341,41351,41357,41381,41387,41389,41399,41411,41413,41443,41453,41467,41479,41491,41507,41513,41519,41521,41539,41543,41549,41579,41593,41597,41603,41609,41611,41617,41621,41627,41641,41647,41651,41659,41669,41681,41687,41719,41729,41737,41759,41761,41771,41777,41801,41809,41813,41843,41849,41851,41863,41879,41887,41893,41897,41903,41911,41927,41941,41947,41953,41957,41959,41969,41981,41983,41999,42013,42017,42019,42023,42043,42061,42071,42073,42083,42089,42101,42131,42139,42157,42169,42179,42181,42187,42193,42197,42209,42221,42223,42227,42239,42257,42281,42283,42293,42299,42307,42323,42331,42337,42349,42359,42373,42379,42391,42397,42403,42407,42409,42433,42437,42443,42451,42457,42461,42463,42467,42473,42487,42491,42499,42509,42533,42557,42569,42571,42577,42589,42611,42641,42643,42649,42667,42677,42683,42689,42697,42701,42703,42709,42719,42727,42737,42743,42751,42767,42773,42787,42793,42797,42821,42829,42839,42841,42853,42859,42863,42899,42901,42923,42929,42937,42943,42953,42961,42967,42979,42989,43003,43013,43019,43037,43049,43051,43063,43067,43093,43103,43117,43133,43151,43159,43177,43189,43201,43207,43223,43237,43261,43271,43283,43291,43313,43319,43321,43331,43391,43397,43399,43403,43411,43427,43441,43451,43457,43481,43487,43499,43517,43541,43543,43573,43577,43579,43591,43597,43607,43609,43613,43627,43633,43649,43651,43661,43669,43691,43711,43717,43721,43753,43759,43777,43781,43783,43787,43789,43793,43801,43853,43867,43889,43891,43913,43933,43943,43951,43961,43963,43969,43973,43987,43991,43997,44017,44021,44027,44029,44041,44053,44059,44071,44087,44089,44101,44111,44119,44123,44129,44131,44159,44171,44179,44189,44201,44203,44207,44221,44249,44257,44263,44267,44269,44273,44279,44281,44293,44351,44357,44371,44381,44383,44389,44417,44449,44453,44483,44491,44497,44501,44507,44519,44531,44533,44537,44543,44549,44563,44579,44587,44617,44621,44623,44633,44641,44647,44651,44657,44683,44687,44699,44701,44711,44729,44741,44753,44771,44773,44777,44789,44797,44809,44819,44839,44843,44851,44867,44879,44887,44893,44909,44917,44927,44939,44953,44959,44963,44971,44983,44987,45007,45013,45053,45061,45077,45083,45119,45121,45127,45131,45137,45139,45161,45179,45181,45191,45197,45233,45247,45259,45263,45281,45289,45293,45307,45317,45319,45329,45337,45341,45343,45361,45377,45389,45403,45413,45427,45433,45439,45481,45491,45497,45503,45523,45533,45541,45553,45557,45569,45587,45589,45599,45613,45631,45641,45659,45667,45673,45677,45691,45697,45707,45737,45751,45757,45763,45767,45779,45817,45821,45823,45827,45833,45841,45853,45863,45869,45887,45893,45943,45949,45953,45959,45971,45979,45989,46021,46027,46049,46051,46061,46073,46091,46093,46099,46103,46133,46141,46147,46153,46171,46181,46183,46187,46199,46219,46229,46237,46261,46271,46273,46279,46301,46307,46309,46327,46337,46349,46351,46381,46399,46411,46439,46441,46447,46451,46457,46471,46477,46489,46499,46507,46511,46523,46549,46559,46567,46573,46589,46591,46601,46619,46633,46639,46643,46649,46663,46679,46681,46687,46691,46703,46723,46727,46747,46751,46757,46769,46771,46807,46811,46817,46819,46829,46831,46853,46861,46867,46877,46889,46901,46919,46933,46957,46993,46997,47017,47041,47051,47057,47059,47087,47093,47111,47119,47123,47129,47137,47143,47147,47149,47161,47189,47207,47221,47237,47251,47269,47279,47287,47293,47297,47303,47309,47317,47339,47351,47353,47363,47381,47387,47389,47407,47417,47419,47431,47441,47459,47491,47497,47501,47507,47513,47521,47527,47533,47543,47563,47569,47581,47591,47599,47609,47623,47629,47639,47653,47657,47659,47681,47699,47701,47711,47713,47717,47737,47741,47743,47777,47779,47791,47797,47807,47809,47819,47837,47843,47857,47869,47881,47903,47911,47917,47933,47939,47947,47951,47963,47969,47977,47981,48017,48023,48029,48049,48073,48079,48091,48109,48119,48121,48131,48157,48163,48179,48187,48193,48197,48221,48239,48247,48259,48271,48281,48299,48311,48313,48337,48341,48353,48371,48383,48397,48407,48409,48413,48437,48449,48463,48473,48479,48481,48487,48491,48497,48523,48527,48533,48539,48541,48563,48571,48589,48593,48611,48619,48623,48647,48649,48661,48673,48677,48679,48731,48733,48751,48757,48761,48767,48779,48781,48787,48799,48809,48817,48821,48823,48847,48857,48859,48869,48871,48883,48889,48907,48947,48953,48973,48989,48991,49003,49009,49019,49031,49033,49037,49043,49057,49069,49081,49103,49109,49117,49121,49123,49139,49157,49169,49171,49177,49193,49199,49201,49207,49211,49223,49253,49261,49277,49279,49297,49307,49331,49333,49339,49363,49367,49369,49391,49393,49409,49411,49417,49429,49433,49451,49459,49463,49477,49481,49499,49523,49529,49531,49537,49547,49549,49559,49597,49603,49613,49627,49633,49639,49663,49667,49669,49681,49697,49711,49727,49739,49741,49747,49757,49783,49787,49789,49801,49807,49811,49823,49831,49843,49853,49871,49877,49891,49919,49921,49927,49937,49939,49943,49957,49991,49993,49999,50021,50023,50033,50047,50051,50053,50069,50077,50087,50093,50101,50111};//\u8d28\u6570\u8868\nint main(){\n\tlong long l,r;\n\tscanf(\"%lld %lld\",&l,&r);\n\tint tot=0;\n\tfor(long long i=0;primes[i]*primes[i]<r+1;++i)\n\t{\n\t\tlong long p=primes[i];//\u5148\u53d6\u51fa\u4e00\u4e2a\u5c0f\u8d28\u6570\uff0c\u7136\u540e\u76f4\u63a5\u57c3\u6c0f\u7b5b\u5224\u7d20\u6570\n\t\tfor(long long j=max(2*p,((long long)ceil(double(l)/double(p)))*p);j<r+1;j+=p)\n\t\t{\n\t\t\tisPrime[j-l]=true;//\u57c3\u6c0f\u7b5b\u3002\u56e0\u4e3a\u533a\u95f4\u5f88\u5c0f\u6240\u4ee5\u6211\u4eec\u5f00\u6570\u7ec4\u5224\u7d20\u6570\uff0c\u6ce8\u610f\u8981\u51cf\u53bbl \u4e0d\u7136\u5c31\u6ca1\u4e86\n\t\t}\n\t}\n\tfor(long long i=l;i<=r;++i)\tif(!isPrime[i-l])\t++tot;//\u7edf\u8ba1\n\tprintf(\"%d\",tot);\n\treturn 0;\n}\n```\n\n\u987a\u4fbf\u9644\u4e0a\u8d28\u6570\u7684generator\n\n```cpp\n#include<cstdio>\nint main(){\n\tfreopen(\"primes.txt\",\"w\",stdout);\n\tprintf(\"int primes[]={2\");\n\tint tot=1;\n\tfor(int i=3;tot<=5144;++i)\n\t{\n\t\tbool agf=true;\n\t\tfor(int j=2;j*j<=i;++j)\tif(i%j==0)\n\t\t{\n\t\t\tagf=false;\n\t\t\tbreak;\n\t\t}\n\t\tif(agf)\t++tot,printf(\",%d\",i);\n\t}\n\tputs(\"};\");\n}\n```",
        "postTime": 1565947237,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "# \u9519\u8bef\u4fee\u6539\uff1a\n\nupd 2021/3/23\uff1a[\u4fee\u8865 hack \u6570\u636e\u7684\u9505](https://www.luogu.com.cn/discuss/show/306029)\u4ee5\u53ca\u4f18\u5316\u4e86\u6392\u7248\u3002\n\n# \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u5b9a\u533a\u95f4 $[L,R]$\uff0c\u8ba1\u7b97\u51fa\u533a\u95f4\u4e2d\u7d20\u6570\u7684\u4e2a\u6570\u3002\n\n$1\\leq L\\leq R<2^{31}$\uff0c$R-L\\leq 10^6$\u3002\n\n# \u601d\u8def\uff1a\n\n## \u66b4\u529b\uff1a\n\n\u849f\u84bb\uff1a\u54e6\uff1f\u7eff\u9898\uff1f\u8fd9\u4e48\u6c34\uff1f\uff08\u4fbf\u6253\u51fa\u4e0b\u9762\u4ee3\u7801\uff09\n\n![](https://s2.ax1x.com/2019/10/22/K3rN8S.png)\n\n\u8fd9\u7edd\u5bf9\u662f\u6700\u5bb9\u6613\u60f3\u5230\u7684\uff01\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n})$\u3002\n\n\u6240\u4ee5\u671f\u671b\u5f97\u5206\u5dee\u4e0d\u591a\u4e3a\u96f6\uff01\n\n## \u6b63\u89e3\uff1a\n\n### \u601d\u8003\uff1a\n\n\u600e\u4e48\u6837\u7684\u6570\u662f\u7d20\u6570\uff1f\n\n### \u56de\u7b54\uff1a\n\n~~\uff08\u7531\u5c0f\u5b66\u77e5\u8bc6\u53ef\u5f97\uff09~~ \u7d20\u6570\u662f\u9664\u81ea\u5df1\u548c $1$ \u4ee5\u5916\uff0c\u6ca1\u6709\u5176\u4ed6\u7ea6\u6570\u7684\u6570\u3002\n\n### \u57c3\u6c0f\u7b5b\u6cd5\uff1a\n\n![](https://s2.ax1x.com/2019/10/22/K3svSU.png)\n\n\u57c3\u6c0f\u7b5b\u6cd5\u7684\u4f18\u5316\u662f\u5728\u4e8e\u5b83\u7528\u7d20\u6570\u7b5b\u6389\u5408\u6570\uff0c\u4e0d\u7528\u56e0\u5408\u6570\u8fd0\u7b97\u591a\u6b21\u3002\n\n\n---\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u4e5f\u662f\u8fd9\u6837\u7684\uff0c\u770b\u4e0a\u53bb $L$ \u548c $R$ \u5f88\u5927\uff0c\u4f46\u662f\u4f60\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u4e2a\u7d20\u6570\u7b5b\u6389\u5408\u6570\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a $R-L\\leq 10^6$\u3002\n\n### \u601d\u8003:\n\n\u90a3\u6211\u4eec\u53c8\u4e0d\u77e5\u9053 $[L,R]$ \u91cc\u7d20\u6570\u6709\u591a\u5c11\uff0c\u600e\u4e48\u7b5b\uff1f \n\n### \u56de\u7b54\uff1a\n\n\u5c31\u62ff $2^{31}-1$ \u7684\u6781\u9650\u6570\u636e\u6765\u8bf4\u5427\uff01\n\n\u7167\u66b4\u529b\u7a0b\u5e8f\u548c\u521a\u521a\u8bf4\u7684\u6765\u770b\uff0c\u4f60\u53ea\u7528\u628a $[2,\\sqrt{2^{31}-1}]$ \u91cc\u7684\u7d20\u6570\u53bb\u7b5b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n# \u4ee3\u7801\uff1a\n\n\n```cpp\nbool a[M], ans[M];\nll cnt = 0, pri[N];\nll L, R;\n\nbool prime(int n)\n{\n    for (int i = 2; i <= n; ++ i)\n        if (!a[i])\n        {\n        \tpri[++cnt] = i;\n            for (int j = i << 1; j <= n; j += i)\n                a[j] = 1;\n        }\n}\n\nint main()\n{\n\tprime(50000); // \u628a [2,\u221a2^31-1] \u7684\u7d20\u6570\u7b5b\u51fa\u6765\u3002\n\tscanf(\"%lld%lld\", &L, &R);\n\tL += (L == 1);   // \u7279\u5224 L = 1 \u7684\u60c5\u51b5\uff0c1 \u4e0d\u662f\u7d20\u6570\uff01\n\tif (L > R) \n\t{\n\t\tprintf (\"0\\n\");\n\t\treturn 0;\n\t}\n\tfor (register int i = 1; i <= cnt; i++)\n\t{\n\t\tfor (ll j = max(2 * 1ll, (L - 1) / pri[i] + 1) * pri[i]; j <= R; j += pri[i])       // \u7b5b\u51fa L~R \u4e2d\u7684\u7d20\u6570\u3002\n\t\t\tif(j - L >= 0) ans[j - L] = 1;\n\t}\n\tint tot = 0;\n\tfor(int i = 0 ; i <= R - L ; ++ i) if(!ans[i]) tot ++;\n    printf(\"%d\\n\" , tot);\n    return 0;\n} \n```",
        "postTime": 1571726143,
        "uid": 80695,
        "name": "Jayun",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "```txt\n\u4ed4\u7ec6\u89c2\u5bdf\u540e\u53d1\u73b0R-L\u53ea\u67091000000\u3002\u53c8R\u6700\u5927\u5230maxlongint,\n\u4e5f\u5c31\u662f\u8bf4L..R\u4e0a\u7684\u5408\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e0d\u4f1a\u5927\u4e8e50000\uff0c\n\u5426\u5219\u8fd9\u4e2a\u6570\u7684\u4e58\u65b9\u5c31\u4f1a\u6bd4maxlongint\u8fd8\u8981\u5927\u4e86\u3002\n\u7b97\u6cd5\n\u5148\u628a50000\u4ee5\u5185\u7684\u7d20\u6570\u6c42\u51fa\u6765\uff0c\n\u7136\u540e\u7528\u8fd9\u4e9b\u7d20\u6570\u5c06L\u5230R\u7684\u5408\u6570\u7b5b\u6389\u5373\u53ef\u3002\n\u590d\u6742\u5ea6\u662fO(50000log\uff0850000\uff09+prime*log(r-l))\u3002\n\u53ef\u4ee5\u5728\u65f6\u9650\u5185\u51fa\u89e3\n\u4e0b\u9762\u662f\u4ee3\u7801\n```\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<cstring>\nusing namespace std ;\nbool vis[1000005];\nint num[6000],tot=0;\nvoid read( void )\n{\n    for(int i=2;i<=800;i++)\n    if(!vis[i])\n    {\n         num[++tot]=i;\n         for(int j=i*i;j<=800;j+=i)\n         vis[j]=true;     \n    }\n    \n    for(int i=801;i<=50000;i++)\n    for(int j=1;j<=tot;j++)\n     if(i%num[j]==0)break;\n     else if(num[j]*num[j]>=i){num[++tot]=i;break;}\n\n}\nint main()\n{\n    //freopen(\"prime.in\",\"r\",stdin);\n    //freopen(\"prime.out\",\"w\",stdout);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    read( );\n    memset(vis,0,sizeof(vis));\n    for(int k=1;k<=tot&&num[k]<=sqrt(m);k++)     \n     {\n         int t=num[k]*num[k];          \n         if(t<n)t=n/num[k]*num[k];\n         if(t<n)\n         if(t<=m-num[k])t+=num[k];\n         else continue;\n         \n         for(;t<=m;)\n         {\n            vis[t-n]=true;   \n            if(t==num[k])vis[t-n]=false;        \n            if(t<=m-num[k])t+=num[k];\n            else break;           \n         }   \n     }\n    if(n==1)vis[0]=true;\n    int ans=0;\n    for(int i=0;i<=m-n;i++)\n    if(!vis[i])ans++;\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1521874296,
        "uid": 56836,
        "name": "math\u72c2\u70ed\u8005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570$l,r$\uff0c\u6c42\u95ed\u533a\u95f4 $[l,r]$ \u4e2d\u7684\u8d28\u6570\u4e2a\u6570\u3002\n\n$1\\le l,r\\le 2147483647\\ , \\ r-l\u22641000000$\n\n## \u601d\u8def\n\u521a\u62ff\u5230\u624b\u5c31\u60f3\u7528\u7b5b\u6cd5\u3002\n\n\u770b\u4e86\u773c\u6570\u636e\u8303\u56f4\uff0c\u5fc3\u51c9\u4e86\u534a\u622a\uff0c\u597d\u50cf\u7b5b\u6cd5\u7b5b\u4e0d\u52a8\u3002\n\n\u4f46\u662f$r-l$\u7684\u8303\u56f4\u975e\u5e38\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u65b9\u9762\u7a81\u7834\u3002\n\n\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u5b9a\u7406\uff0c\u4e00\u4e2a\u6570$n$\u4e00\u5b9a\u6709\u4e00\u4e2a\u8d28\u56e0\u5b50\u7684\u503c\u5c0f\u4e8e$\\sqrt n\\ $\n\n\u8bc1\u660e\u662f\u5f88\u597d\u8bc1\u660e\u7684\uff0c\u6211\u4eec\u5047\u8bbe\u4e00\u4e2a\u6570$n$\u6ca1\u6709\u5c0f\u4e8e\u7b49\u4e8e$\\sqrt n\\ $\u7684\u8d28\u56e0\u5b50\u3002\n\n\u90a3\u4e48\u53d6\u51fa\u4ed6\u7684\u4efb\u610f\u4e00\u5bf9\u8d28\u56e0\u5b50$p,q$\uff0c\u90fd\u6709$\\sqrt n\\ < p , q$\u3002\n\n\u90a3\u4e48$n < p *q$\uff0c\u5219\u539f\u547d\u9898\u4e0d\u6210\u7acb\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u7528\u7b5b\u6389$\\sqrt {2147483647} \\ $\u5185\u7684\u6240\u6709\u8d28\u6570\uff0c\u7136\u540e\u7528\u8fd9\u5176\u4e2d\u7684\u8d28\u6570\u7b5b\u533a\u95f4$[l,r]$\u7684\u8d28\u6570\u5373\u53ef\u3002\n\n$l,r$\u5f88\u5927\u600e\u4e48\u7b5b?\u8f6c\u5316\u5230\u533a\u95f4$[0,r-l]$\u5373\u53ef\u3002\n\n$Code:$\n\n```cpp#include <bits/stdc++.h>\n#define int long long\n\nusing namespace std;\n\nconst int maxn = 1000000;\nint l , r;\n\nint prime[maxn] , cnt , tot;\nbool vis[maxn];\nbool ans[maxn];\n\nvoid Euler() {\n\tfor(int i = 2 ; i <= 50000 ; ++ i) {\n\t\tif(!vis[i]) {\n\t\t\tprime[++cnt] = i;\n\t\t\tfor(int j = i + i ; j <= 50000 ; j += i) {\n\t\t\t\tvis[j] = 1;\n\t\t\t}\n\t\t} \n\t}\n}\n// [l , r] -> [0 , r - l]\nint _max(int a , int b) {\n\treturn a > b ?  a : b;\n}\n \nsigned main () {\n\tEuler();\n\tscanf(\"%d%d\" , & l ,& r);\n\tfor(int i = 1 ; i <= cnt ; ++ i) {\n\t\tfor(int j = _max( 2 , (l - 1)/prime[i] + 1) * prime[i] ; j <= r ; j += prime[i])\n            if(j - l >= 0) ans[j - l]=1;\n\t}\n\tfor(int i = 0 ; i <= r - l ; ++ i) if(!ans[i]) tot ++;\n\tprintf(\"%d\\n\" , tot);\n\treturn 0;\n} \n```",
        "postTime": 1569985663,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u770b\u8fd9\u91cc\uff0c\u6700\u7b80\u5355\u7684\u4ee3\u7801\uff01\uff01\uff01\u7528\u6700\u666e\u901a\u7684\u7b5b\u6cd5\uff08\u4ee3\u7801\u6709\u6ce8\u91ca\uff09\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<cstdlib>\nusing namespace std;\nint a,b,f[1000002],ans,y,c;\nint main()\n{\n    scanf(\"%d%d\",&a,&b);int u=sqrt(b);if (u<2)u=2;\n    for (int i=2;i<=u;i++)\n    {\n        c=b/i;//\u7b97\u51fa\u6700\u5927\u80fd\u4e58\u591a\u5c11\n        for (int j=c;j>=2;j--)\n        {y=j*i;if (y<a)break;else f[y-a]=1;}//\u5982\u679c\u53d1\u73b0\u63a5\u4e0b\u6765\u7b5b\u6389\u7684\u4e66\u6bd4a\u8981\u5c0f\u90a3\u5c31\u4e0d\u7528\u7b5b\u4e86\uff0c\u5426\u5219\u8ba9\u8fd9\u4e2a\u6570\u51cf\u53bba\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f0-1000000\u4e4b\u95f4\u7684\u6570\u5b57\n    }\n    for (long long i=a;i<=b;i++)//\u8bb0\u4f4f\uff0c\u4e00\u5b9a\u8981longlong\uff0c\u5426\u5219\u5f53b\u7b49\u4e8eint\u6700\u5927\u503c\u65f6\uff0ci\u518d\u52a0\u4e00\u5c31\u4f1a\u7206\u6389\uff08\u56e0\u4e3a\u8fd9\u4e2a\u6211\u9519\u4e86\u597d\u4e45\uff09\n    {if (!f[i-a])ans++;}\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1469854964,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "### \u52a0\u901f\u7248 ~~(\u7b80\u5316\u7248)~~ Miller_Rabin\n\n\u53ea\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406,\u5373\u5f53$p \\in prime$\u65f6,$\\ \\ \\ a^{p-1} \\equiv 1 (mod \\ p)$\n\n\u6240\u4ee5\u968f\u673a\u5728$[1,p-1]$\u9009\u4e00\u4e2a\u6b63\u6574\u6570\u8d4b\u7ed9a\n\n\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6d4b\u8bd5,\n\n\u5f53$p \\in prime$\u65f6,\u4e0a\u8ff0\u5f0f\u5b50\u4e00\u5b9a\u6210\u7acb\n\n\u5f53$p \\notin prime$\u65f6,\u4e0a\u8ff0\u5f0f\u5b50\u53ea\u6709 $25\\%$ \u7684\u53ef\u80fd\u6027\u6210\u7acb\n\n\u6240\u4ee5\u591a\u8bd5\u51e0\u6b21\u5c31\u597d\u4e86,\u8bd510\u6b21\u5c31\u8db3\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u4e86\n\n\u6d4b\u8bd5\u5931\u8d25\u7684\u6982\u7387\u5c0f\u5230$4^{-10}$\n\n\u5e76\u4e14\u7701\u53bb\u4e86\u5f88\u591a\u9aa4!\n\n\u5f88\u77ed--->\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\nusing namespace std;\ntypedef long long ll;\ninline int read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\nint l,r,ans;\nll qpow(ll a,ll b,ll mod){\n\tll ans=1;\n\twhile(b){\n\t\tif(b&1)ans=ans*a%mod;\n\t\ta=a*a%mod;\n\t\tb>>=1;\n\t}\n\treturn ans;\n}\nbool Miller(ll x){\n\tif(x==2)return true;\n\tif(x==1||!(x&1))return false; \n\tfor(int i=0;i<10;i++){\n\t\tll a=rand()%(x-1)+1;\n\t\tif(qpow(a,x-1,x)^1)return false;\n\t} \n\treturn true;\n}\nint main(){\n\tsrand(time(0));\n\tl=read(),r=read();\n\tfor(register ll i=l;i<=r;++i){\n\t\tif(Miller(i))++ans;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\n[*Froggy's blog*](https://www.luogu.org/blog/1445353309froggy/)\n\n#### \u5471!!\n",
        "postTime": 1572397874,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "# \u8bf4\u660e\uff1a\u5f00O2\u53ef\u4ee5\u8fc7\uff0c\u4e0d\u5f00O2\u80fd\u8fc79\u4e2a\u70b9\n### \u770b\u9898\u89e3\u4e2d\u5f88\u591adalao\u90fd\u7528\u4e0b\u6807\u538b\u7f29\u589e\u91cf\uff0c\u5176\u5b9e\u4e0d\u9700\u8981\u90a3\u6837\u505a\u7684\uff0c\u4ee3\u7801\u4e2d\u89e3\u91ca\u3002\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <stdlib.h>\n#include <memory.h>//\u6211\u624d\u4e0d\u7528\u4e07\u80fd\u5934\u6587\u4ef6\u5462\nusing namespace std;\ntypedef long long ll;\n#define re register int \nbool a[50000];//\u5982\u679cn\u662f\u7d20\u6570\uff0c\u5219!a[n]==1\nint prime[5000];//\u5b58\u7d20\u6570\n\ninline int sieve(re n)//\u8fd9\u662f\u6b27\u62c9\u7ebf\u7b5b\uff0c\u548c\u57c3\u6c0f\u7b5b\u4e0d\u540c\uff0c\u6ce8\u610f\u533a\u522b\n{\n\tint ans=0;\n\ta[0]=a[1]=1;\n\tre i,j;\n\tfor(i=2; i<=n; i++)\n\t{\n\t\tif(!a[i])\n\t\t\tprime[ans++]=i;//\u6dfb\u52a0\u5230prime\u4e2d\n\t\tfor(j=0; j<ans and i*prime[j]<=n; j++)\n\t\t{\n\t\t\ta[i*prime[j]]=1;//\u628a\u5408\u6570\u6807\u8bb0\u4e3a1\n\t\t\tif(i%prime[j]==0)//\u65f6\u95f4\u4e3a\u7ebf\u6027\u7684\u5173\u952e\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tre n=sieve(46341);//sqrt(2^31-1)\u224846341,\u5373\u628a\u8303\u56f4\u5185\u7d20\u6570\u56e0\u5b50\u5168\u90e8\u7b5b\u51fa\u6765\n\tre i,j;\n\tint l,r;\n\tcin>>l>>r;\n\tbool f=1;//\u6807\u8bb0\u4e00\u4e2a\u6570\u6709\u6ca1\u6709\u88ab\u7b5b\u8fc7\n\tll ans=0;//\u7edf\u8ba1\u4e2a\u6570\n\tfor(i=l; i<=r; i++)//\u679a\u4e3e\u533a\u95f4\u4e2d\u6bcf\u4e2a\u6570\n\t{\n\t\tf=1;//\u5047\u8bbe\u4e3a\u8d28\u6570\n\t\tfor(j=0; j<n and prime[j]*prime[j]<=i; j++)\n\t\t\tif(i%prime[j]==0 and i!=prime[j])\n\t\t\t{\n\t\t\t\tf=0;\n\t\t\t\tbreak;//\u662f\u5408\u6570\uff0c\u8df3\u51fa\u5faa\u73af\n\t\t\t}\n\t\tif(f)//\u5982\u679c\u5047\u8bbe\u4ecd\u7136\u6210\u7acb\uff0cans++\n\t\tans++;\t\t\n\t}\n\tcout<<ans;\n}\n\n\n```\n\u53ef\u4ee5\u770b\u51fa\u6211\u505a\u4e86\u8bb8\u591a\u5e38\u6570\u4f18\u5316QAQ\uff0c\u5982\u679c\u54ea\u4e2a\u5c0f\u4f19\u4f34\u53d1\u73b0\u80fd\u8ba9\u8fd9\u4e2a\u5361\u8fc7\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u8bf7\u8054\u7cfb\u6211\u3002",
        "postTime": 1538649406,
        "uid": 65550,
        "name": "\u767d\u9e70",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1835)\n\n\u56e0\u4e3a$R\\leq 2^{31}-1$\u6240\u4ee5\u76f4\u63a5\u5f00$O(R)$\u7684\u6570\u7ec4\u5c31\u7206\u70b8\u4e86  \n\n\u5bf9\u4e8e\u4e00\u4e2a**\u5408\u6570**$x$,\u5b83\u53ef\u4ee5\u88ab\u5c0f\u4e8e$\\sqrt{x}$\u7684\u8d28\u56e0\u5b50\u7b5b\u51fa\uff08\u5b83\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e00\u5b9a\u5c0f\u4e8e$\\sqrt{x}$\uff09\u3002  \n\u8bc1\u660e\uff1a\u5047\u8bbe$p>\\sqrt{x}$\uff0c\u4e14$p$\u4e3a$x$\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c  \n$\\because$ $p$\u5df2\u7ecf\u662f$x$\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c  \n$\\therefore$ $x$\u7684\u5176\u4ed6\u56e0\u5b50\u4e0d\u4f1a\u8d85\u8fc7$\\frac{x}{p}$\u3002  \n$\\because$ $\\sqrt{x}=x^{0.5}$\uff0c\u800c$p>\\sqrt{x}$\uff0c  \n$\\therefore$ $\\frac{x}{p}<\\frac{x^1}{x^{0.5}}=x^{0.5}$  \n$\\therefore$ $x$\u7684\u5176\u4ed6\u56e0\u5b50\u4e0d\u4f1a\u8d85\u8fc7$\\sqrt{x}$\u3002  \n$\\because$ \u5df2\u7ecf\u5047\u8bbe$p$\u4e3a$x$\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c \u800c$p>\\sqrt{x}$\uff0c$x$\u7684\u5176\u4ed6\u56e0\u5b50\u5374\u4e0d\u4f1a\u8d85\u8fc7$\\sqrt{x}$\uff0c  \n$\\therefore$ \u4e0e\u5047\u8bbe\u4ea7\u751f\u77db\u76fe\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u539f\u547d\u9898\u5f97\u8bc1\u3002\n\n\u6240\u4ee5\u7b5b\u6cd5\u7684\u65f6\u5019\u6211\u4eec\u53ea\u8981\u7b5b$[2,\\sqrt{R}]$\u5c31\u884c\u4e86  \n\u6ce8\u610f$1$\u4e0d\u662f\u8d28\u6570\uff08\u4e0d\u8fc7\u6570\u636e\u91cc\u597d\u50cf\u6ca1\u6709\uff09  \n\u5728\u5f97\u5230$[2,\\sqrt{R}]$\u4e2d\u7684\u8d28\u6570\u7684\u65f6\u5019\u987a\u4fbf\u5c06$[L,R]$\u4e2d\u7684\u6570\u7b5b\u53bb  \n\u79bb\u6563\u4e00\u4e0b\u5c31\u5b58\u7684\u4e0b\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(\\text{\u53cd\u6b63\u6781\u9650\u6570\u636e\u53ea\u89810.2s\u4e0d\u5230})$  \n\u7a7a\u95f4\uff1a$O(\\sqrt{R}+(R-L))\\approx O(1e6)$\n\ncode:\n```cpp\n#include<oistream>\n#include<ctsdio>\n#include<csrting>\n#include<cstldib>\n#include<cmaht>\n#include<cctyep>\n#include<algorihtm>\nusing namesapce sdt;\nint ok[100005],another[1000005];\nlong logn l,r,b;\nint mian()\n{\n    cin>>l>>r;b=sqrt(r)+1;\n    ok[1]=1;\n    for(nit i=2;i<=b;++i)\n    {\n        if(ok[i])continue;\n        for(int j=i<<1;j<=b;j+=i)ok[j]=1;\n        for(long long j=((l/i)*i)+(l%i?i:0);j<=r;j+=i)another[j-l+1]=1;\n        if(i>=l)another[i-l+1]=0;\n    }\n    long long ans=0;\n    if(l==1)++ans;\n    for(long long i=l;i<=r;++i)ans+=another[i-l+1];\n    cuot<<(r-l+1-ans);\n    retrun 0;\n}//\u7ecf\u8fc7\u7279\u522b\u5904\u7406\u540e\u8fd9\u4efd\u4ee3\u7801\u53ea\u4f1aCE\uff08\u9003\n```",
        "postTime": 1543723557,
        "uid": 44534,
        "name": "Kirisame_Marisa_",
        "ccfLevel": 6,
        "title": "Luogu P1835 \u3010\u8d28\u6570\u5bc6\u5ea6\u3011"
    },
    {
        "content": "\u6b64\u9898\u4e0d\u5c11\u4e66\u4e0a\u90fd\u6709, \u5c31\u662f\u8003\u7b5b\u6cd5\u7684\u5e94\u7528. \u9996\u5148\u7531\u4e8e $L, R <= MAXINT$ , \u6240\u4ee5\u7528\u7b5b\u6cd5, \u6700\u5927\u7684\u8d28\u6570\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt{MAXINT}$ , \u7528\u7ebf\u6027\u7b5b\u9884\u5904\u7406\u5373\u53ef.\n\n\u7136\u540e\u6211\u4eec\u7528\u57c3\u5f0f\u7b5b\u6cd5, \u4ece $[L, R]$ \u4e2d\u6700\u5c0f\u7684\u67d0\u8d28\u6570\u7684\u500d\u6570\u5f00\u59cb\u7b5b\u8d77, \u5177\u4f53\u5b9e\u73b0\u548c\u6734\u7d20\u7684\u57c3\u5f0f\u7b5b\u5dee\u4e0d\u591a.\n\n### \u7136\u800c\u2026\u2026\n\n\u6b64\u5904\u5728\u5faa\u73af\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6ce8\u610f! \u4e00\u5b9a\u8981\u6ce8\u610f! \u4e00\u5b9a\u8981\u6ce8\u610f! \u5982\u679c\u7528 $int$ \u7c7b\u578b, \u4f1a\u81ea\u7136\u6ea2\u51fa, \u7136\u540e\u5c31\u4f1a\u83ab\u540d\u5176\u5999\u5730 $RE$ (\u56e0\u4e3a\u4f1a\u4e0d\u505c\u5730\u5faa\u73af\u2026\u2026). ~~\u6211\u5728\u6b64\u5904\u8c03\u4e86\u4e00\u4e2a\u665a\u4e0a.~~ \u6240\u4ee5\u6211\u4eec\u6b64\u5904\u8981\u4e48\u7279\u5224\u4e00\u4e0b, \u8981\u4e48\u5c31\u6539\u7528 $long \\  long$ .\u5982\u679c\u7528 $long \\  long$ \u7684\u8bdd, \u8981\u6ce8\u610f\u6570\u7ec4\u4e0d\u8981\u5f00\u592a\u5927, \u591f\u7528\u5c31\u597d, \u4e0d\u7136\u4f1a $MLE$ ~~(\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684)~~.\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801: \n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\n\nll vis[1000007], notP[100007], prime[100007];\nint main(){\n    ll l, r;\n    cin >> l >> r;\n    memset(vis, 0ll, sizeof(vis));\n    memset(notP, 0ll, sizeof(notP));\n    ll cnt = 0ll;\n    for(ll i = 2ll; i <= sqrt(r); ++i){\n        if(!notP[i])\n            prime[++cnt] = i;\n        for(ll j = 1ll; j <= cnt; ++j){\n            if(i * prime[j] > sqrt(r))\n                break;\n            notP[prime[j] * i] = 1ll;\n            if(!i % prime[j])\n                break;\n        }\n    }\n    for(ll i = 1ll; i <= cnt; ++i){\n        ll j;\n        if(l % prime[i])\n            j = (l / prime[i] + 1ll) * prime[i];\n        else\n            j = l;\n        if(j == prime[i])\n            j += prime[i];\n        for(; j <= r; j += prime[i])\n            vis[j - l] = 1ll;\n    }\n    ll ans = 0ll;\n    for(ll i = l; i <= r; ++i)\n        if(!vis[i - l])\n            ++ans;\n    cout << ans << endl;\n    return 0;\n}\n\n```",
        "postTime": 1539918476,
        "uid": 85028,
        "name": "shs_ryf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.luogu.com.cn/blog/foreverlovezxy/solution-p1835)\n\n\n\n\u521a\u5f00\u59cb\u4f5c\u8005\u6709\u4e00\u79cd$naive$\u7684\u60f3\u6cd5\n\n# CODE:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nlong long l,r,ans=0;\nbool prime(long long n)\n{\n\tif(n==1)\n\treturn false;\n\tif(n==2)\n\treturn true;\n    for(int i=2;i<=sqrt(n);i++)\n    if(n%i==0)\n\treturn false;\n    return true;\n}\nint main()\n{\n\tcin>>l>>r;\n\tfor(int i=l;i<=r;i++)\n\tif(prime(i)==true)\n\tans++;\n\tcout<<ans;\n\treturn 0;\n}\n```\n\n[\u4eb2\u6d4b](https://www.luogu.com.cn/record/30109462)\n\n\u8fd9\u65f6\u4f5c\u8005\u610f\u8bc6\u5230\uff0cLG\u7684\u7eff\u9898\u662f\u6c34\u4e0d\u8fc7\u7684\u3002\n\n\u90a3\u4e48\u5c31\u6362\u4e2a\u65b9\u6cd5\u2014\u2014\u7d20\u6570\u7b5b\uff01\n\n\u6c42\u51fa2~50000\u7684\u6240\u6709\u7d20\u6570\uff0c$\\sqrt{2147483647}$ =46000+\n\n\u628a\u8fd9\u4e9b\u6570\u7684\u500d\u6570\u5220\u9664\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u7d20\u6570\u4e86\n\n\u8fd9\u9898\u7684\u7a7a\u95f4\u7ed9\u7684\u8fd8\u662f\u5f88\u8db3\u7684\uff0c\u5982\u679c\u662f32MB\u5c31\u8981\u5c0f\u5fc3\u6570\u7ec4\u5927\u5c0f\u60f9\n\nR-L<=1e6,\u6570\u7ec4\u5b8c\u5168\u53ef\u4ee5\u53ea\u5f001e5\n\n\u4e4b\u540e\u5bf9\u4e8e>1e5\u7684L\u548cR\uff0c\u5728\u5b58\u7d20\u6570\u65f6\u51cf\u53bbL\u5373\u53ef\n\n# \u6b63\u89e3CODE\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn=1e5,temp=1;\nlong long l,r,ans=temp-1,prime[maxn+5];\nbool visit[maxn+5],flag[maxn+5];//visit[i]==1,i\u4e0d\u662f\u7d20\u6570\uff0c\u53cd\u4e4b\u5219\u4ea6\u7136\n//\u53cd\u4f5c\u5f0a\uff1a\u8fd9\u91ccflag\u6570\u7ec4\u5f00\u5c0f\u4e8610\u500d\uff0c\u4f1aRE\u6ef4\nint main()\n{\n    \n    cin>>l>>r;\n    for(int i=temp+1;i<=sqrt(maxn);i++)\n    if(!visit[i])\n    for(int j=temp+1;j<=maxn/i;j++)\n    visit[i*j]=temp;\n    for(int i=temp+1;i<=maxn;i++)\n    if(!visit[i])\n    prime[++prime[temp-1]]=i;\n    for(int i=temp;i<=prime[temp-1];i++)\n    for(int j=max(l/prime[i],temp);j<=r/prime[i];j++)\n    {\n        if(j==temp)\n        continue;\n        if(j*prime[i]<l)\n        continue;\n        flag[prime[i]*j-l]=1;//\u5e73\u79fb\u6570\u7ec4\uff0c\u9632\u6b62\u7a7a\u95f4\u7206\u70b8\n    }\n    for(int i=temp-1;i<=r-l;i++)\n    if(!flag[i])\n    ans++;\n    cout<<ans;\n    return temp-1;\n}\n```\n\n[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.com.cn/record/30110288)",
        "postTime": 1580816331,
        "uid": 51231,
        "name": "Provider",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6\u3011"
    },
    {
        "content": "\u7d20\u6570\u5224\u65ad\uff0c\u8bb8\u591adalao\u5df2\u7ecf\u8bf4\u4e86\uff0c\u6211\u4eec\u9996\u5148\u5148\u662f\u7ebf\u6027\u7b5b\uff0c\u7b5b\u51fasqrt(r)\u5185\u7684\u6240\u6709\u7d20\u6570\uff0c\u7528\u8fd9\u4e9b\u7d20\u6570\u53c8\u6765\u7b5bl\u5230r\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u8bb0\u5f55l\u5230r\u533a\u95f4\u5185\u67d0\u4e2a\u6570\u662f\u5426\u4e3a\u6574\u6570\uff0c\u7528\u6570\u7ec4\u4e0d\u5f97\u884c\uff0c\u53ef\u4ee5\u7528map\u5b58\uff0c\u6211\u8fd9\u91cc\u662f\u91cd\u65b0\u5f00\u4e86\u4e2a\u6570\u7ec4\u628al\u5230r\u8fd9\u6bb5\u533a\u95f4\u91cd\u65b0\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u8fd9\u91cc\u7528\u4e86\u4e2aceil\u610f\u601d\u662f\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u503c\u5f97\u6700\u5c0f\u6574\u6570\uff0c\u4e5f\u5c31\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u7136\u540e\u5c31\u5206\u522b\u7528\u6bcf\u4e2a\u7d20\u6570\u53bb\u7b5b\u628a\uff01\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int maxn=10000000;\nconst int inf=10000000;\nlong long n,m,ans;\nlong long idx=1,prem[inf];\nbool fl[inf],ins[inf];\nint main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfl[1]=0;\n\tfor(int i=2;i<=50005;i++){\n\t\tif(fl[i]==0){\n\t\t\tprem[idx]=i;\n\t\t\tidx++;\n\t\t}\n\t\tfor(int j=1;j<idx&&prem[j]*i<=50005;j++){\n\t\t\tfl[i*prem[j]]=1;\n\t\t\tif(i%prem[j]==0) break;\n\t\t}\n\t}\n\tlong long p,q;\n    for(int i=1;i<=idx;i++){\n        if(prem[i]>m)break;\n        p=ceil(n*1.0/prem[i]),q=ceil(m*1.0/prem[i]);\n        if(p==1)p=2;\n        for(int j=p;j<=q&&prem[i]*j<=m;j++)\n            ins[prem[i]*j-n+1]=1;\n    }\n    int tot=0;\n    for(int i=1;i<=m-n+1;i++) if(!ins[i]) tot++;\n    cout<<tot;\n\treturn 0;\n}\n```",
        "postTime": 1537499239,
        "uid": 46743,
        "name": "loaky",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "~~**\u88f8\u7684\u7b5b\u6cd5\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a**~~**\u4f46\u662f\u88f8\u7684\u7b5b\u6cd5\u8c8c\u4f3c\u6ca1\u6cd5\u7528\u4e86\u600e\u4e48\u529e\u5462\uff1f**\n\u5176\u5b9e\u6709\u4e2a\u4e1c\u897f\u53ebMiller-Rabbin\uff0c\u8c8c\u4f3c\u662f\u4e00\u4e2a\u57fa\u4e8e\u6982\u7387\u7684\u7b97\u6cd5\uff0c\u53cd\u6b63\u80fd\u7528~~\u4e00\u4e9b\u795e\u5947\u7684\u64cd\u4f5c~~\u5224\u65ad\u51fa\u5f53\u524d\u8fd9\u4e2a\u6570\u662f\u4e0d\u662f\u8d28\u6570\uff0c\u662f\u4e0d\u662f\u611f\u89c9\u548c\u666e\u901a\u7b5b\u6cd5\u7684\u67d0\u4e00\u6b65\u6709\u70b9\u76f8\u4f3c\u2014\u2014\u5982\u679c\u8fd9\u4e2a\u6570\u662f\u8d28\u6570\u90a3\u4e48\u5c31\u7b5b\u53bb\u8fd9\u4e2a\u6570\u7684\u500d\u6570\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u6570\u6ca1\u88ab\u7b5b\u8fc7\u8fd8\u662f\u5f97\u7528\u795e\u5947\u7684Miller-Rabbin\u5224\u65ad\u4e00\u4e0b\u3002~~\u5173\u4e8e\u795e\u5947\u7684Miller-Rabbin\u8bf7\u67e5\u8be2\u767e\u5ea6~~\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint prime[3]={2,7,61};\nbool yes[1000003];\nlong long pow(long long a,long long b,long long mod)\n{ \n  long long cnt=1;\n  a=a%mod;\n  while (b)\n  {\n  \tif (b&1) cnt=cnt*a % mod;\n\tb>>=1;\n\ta=a*a%mod; \n  }\n  return cnt;\n}\nbool MR(long long x)\n{\n  long long r,q=0,cnt,tot;\n  if (x<2) return false;\n  for (int i=0;i<3;i++)\n   {\n    if (x==prime[i]) return true;\n    if (x%prime[i]==0) return false;\n   }\n  r=x-1;\n  while (!(r&1))\n  {\n  \tr>>=1;\n  \tq++;\n  }\n  for (int i=0;i<3;i++)\n   {\n   \ttot=q;\n   \tcnt=pow(prime[i],r,x);\n   \twhile (tot)\n   \t{\n\t  if (cnt*cnt%x==1 && cnt!=1 && cnt!=x-1) return false;\n\t  cnt=cnt*cnt%x;\n\t  tot--;\t\n    }\n    if (cnt%x!=1) return false;\n   }\n  return true;\n}\nlong long l,r,ans;\nint main()\n{\n  memset(yes,true,sizeof(yes));\n  scanf(\"%lld%lld\",&l,&r);\n  for (long long i=l;i<=r;i++)\n  {\n   if (!yes[i-l+1]) continue;\n   if (MR(i))\n   {\n   long long j=i+i;\n   while (j<=r)\n   {\n   \tyes[j-l+1]=false;\n   \tj=j+i;\n   }\n   ans++;\n   }\n  }\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n\n",
        "postTime": 1526109481,
        "uid": 23977,
        "name": "LuckyCloud",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u88f8\u7684\u533a\u95f4\u7d20\u6570\u7b5b\u3002\n\n\u4ee3\u7801\u4e2d\u6709\u8be6\u7ec6\u6ce8\u91ca\uff08\u5176\u4e2d\u533a\u95f4\u7d20\u6570\u7b5b\u51fd\u6570\u5927\u90e8\u5206\u501f\u7528\u4e86\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u300b\uff09\n\n\u4e0d\u8fc7\u662f\u539f\u6587\u4e2d\u4ee3\u7801\u662f\u7b5b\u9009[l,r)\uff0c\u6b64\u9898\u8981\u6c42\u95ed\u533a\u95f4\uff0c\u6240\u4ee5\u628a\u6240\u6709\u7684<\u90fd\u6539\u4e3a\u2264\u3002\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register\n#define il inline\n#define fp(i,a,b) for(re int i=a;i<=b;i++)\n#define fq(i,a,b) for(re int i=a;i>=b;i--)\nusing namespace std;\nbool is_prime[1000005];//\u504f\u79fb\u533a\u95f4\uff0c\u5927\u5c0f\u4e3al \nbool is_prime_small[1000005];//\u7528\u4e8e\u7b5b\u9009\u504f\u79fb\u533a\u95f4\u7684\u533a\u95f4\uff0c\u5927\u5c0f\u4e3a\u221ar  \n //\u5bf9\u533a\u95f4[l,r]\u5185\u7684\u6574\u6570\u6267\u884c\u7b5b\u6cd5\u3002is_prime[i-l] = true\u5219i\u662f\u7d20\u6570\n void segment_sieve(ll l,ll r)//\u533a\u95f4\u7b5b \n {\n     for(int i = 0;(ll) i * i <= r;i ++) \n         is_prime_small[i] = true;\n     //\u5904\u7406[0,\u221ar] \u5176\u4e2d\u221ar\u662f\u533a\u95f4[l,r]\u4e2d\u4efb\u610f\u6570\u7684\u6700\u5927\u56e0\u5b50 \n     for(int i = 0;i <= r - l;i ++)\n         is_prime[i] = true;//\u5c06\u533a\u95f4[l,r]\u5411\u5de6\u504f\u79fba\uff0c\u53d8\u4e3a[0,r-l] \n     //\u4ee5\u4e0a \u5c06\u533a\u95f4\u5185\u6240\u6709\u9700\u8981\u5904\u7406\u7684\u6570\u8868\u9884\u8bbe\u4e3atrue \n     for(int i = 2;(ll)i * i <= r;i ++)\n     {\n         if(is_prime_small[i])//\u82e5i\u662f\u7d20\u6570 \n         {\n             for(int j = 2*i; (ll) j*j <= r;j += i)//j\u662fi\u7684\u500d\u6570 \n                 is_prime_small[j] = false;//\u6839\u636ei\uff0c\u7b5b[2,\u221ar]\n             for(ll j = max(2LL,(l+i-1)/i)*i;j <= r;j += i)\n         //\u7ed9j\u8d4b\u503c\u7684\u8bed\u53e5\u76f8\u5f53\u4e8e \u3010ll j = l/i * i ; if(j < l) j + l;\u3011 \n                  is_prime[j-l] = false;//\u7b5b[l,r] ,\u504f\u79fb\u5b58\u50a8\n         }\n     }\n     //\u5982\u679c\u4e3b\u51fd\u6570\u4e2d\u8f93\u51fa\u7d20\u6570\u503c\uff0c\u53ea\u9700\u5c06\u4e0b\u6807+a\u5373\u53ef. \n} \nil int gi()\n{\n    re int x=0;\n    re int t=1;\n    re char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') t=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n    return x*t;\n} \nint main()\n{\n     int l,r;\n     int ans = 0;\n     l=gi();r=gi();\n     segment_sieve(l,r);\n     for(int i = 0;i <= r-l;i ++)\n     {\n         if(is_prime[i])\n             ans ++;\n     }\n     printf(\"%d\\n\",ans);\n     return 0;\n} \n\n```",
        "postTime": 1506867173,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u672c\u9898\u7684\u601d\u8def\u5e94\u8be5\u8bf4\u662f\u975e\u5e38\u6e05\u695a\u7684\uff0c\u9996\u5148\u7b5b\u9009\u51fasqrt(l)\u4ee5\u5185\u7684\u7d20\u6570\uff0c\u7136\u540e\u518d\u7528\u8fd9\u4e9b\u7d20\u6570\u7b5b\u9009r-l\u4e2d\u7684\u7d20\u6570\uff0c\u6ce8\u610f\u4fdd\u5b58\u65f6\u8981\u538b\u7f29\u3002\n\n```delphi\nvar  \n  f:array[0..1000000] of boolean;  \n  r,l,n,i,j:longint;  \n  c:array[0..50000] of longint;  \nbegin  \n  readln(r,l);  \n  n:=trunc(sqrt(l));  \n  fillchar(f,sizeof(f),true);  \n  for i:=2 to n do  \n    begin  \n      if f[i] then  \n        begin  \n          inc(c[0]);  \n          c[c[0]]:=i;  \n        end;  \n      for j:=1 to c[0] do  \n        begin  \n          if int64(i)*int64(c[j])>n then break;  //\u6ce8\u610f\u4e58\u6cd5\u53ef\u80fd\u4f1a\u8d8a\u754c\uff0c\u8981\u5957\u4e0aint64\n          f[i*c[j]]:=false;  \n          if i mod c[j]=0 then break;  \n        end;  \n    end;//\u7ebf\u6027\u7b5b\uff0c\u770b\u4e0d\u61c2\u6ca1\u4e8b\uff0c\u53ea\u8981\u77e5\u9053c\u6570\u7ec4\u662f\u4fdd\u5b58sqrt(l)\u4ee5\u5185\u7684\u7d20\u6570\u5c31\u53ef\u4ee5\u4e86  \n  fillchar(f,sizeof(f),true);  \n  for i:=1 to c[0] do  //\u679a\u4e3e\u8fd9\u51e0\u4e2a\u7d20\u6570\n    begin  \n      j:=r div c[i]*c[i];  \n      if j=r then j:=j-c[i];  \n      if j=0 then j:=c[i];  //\u4ece\u6bd4r\u5c0f\u7684\u6700\u5927\u7684c[i]\u7684\u500d\u6570\u5f00\u59cb\uff0c\u4f46\u4e0d\u8981\u5fd8\u4e86\u53ef\u80fdr\u4e3ac[i]\u5927\uff0c\u6240\u4ee5\u7279\u5224\u4e00\u4e0b\n      while int64(j)+int64(c[i])<=l do  //\u52a0\u6cd5\u53ef\u80fd\u4f1a\u8d8a\u754c\uff0c\u65b9\u6cd5\u540c\u4e0a\n        begin  \n          j:=j+c[i];  \n          f[j-r]:=false; //\u538b\u7f29\uff0c\u5173\u952e\u70b9\uff0c\u4fdd\u8bc1\u4e0d\u8d85\u51fa\u5185\u5b58 \n        end;  \n    end;  \n  j:=0;  \n  for i:=0 to l-r do  \n    if f[i] then inc(j); //\u7edf\u8ba1\u65f6\u4e0d\u8981\u5fd8\u4e86r\uff0c\u56e0\u4e3a\u538b\u7f29\u65f6r\u4e3a0\uff0c\u6240\u4ee5\u5faa\u73af\u4ece\u96f6\u5f00\u59cb \n  writeln(j);  \nend.\n```",
        "postTime": 1384678174,
        "uid": 734,
        "name": "lych",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    },
    {
        "content": "\u7528\u7d20\u6570\u7b5b\u9009\u6cd5\uff0c\u5148\u7528trunc(sqrt(sqrt(r)))\u7b5b\u9009\u51fasqrt(r)\u5185\u7684\u7d20\u6570\uff0c\u518d\u7528sqrt(r)\u7b5b\u9009\u51fal-r\u5185\u7684\u7d20\u6570\n\n```delphi\n\nvar f:array[1..5000000]of boolean; //false\u8868\u793a\u7d20\u6570\uff0ctrue\u8868\u793a\u5408\u6570\n    a:array[1..5000]of longint;\n    i,j,l,r,n:longint;flag:boolean;\nbegin              \n    readln(l,r);\n    n:=0;\n    for i:=2 to trunc(sqrt(sqrt(r))) do\n        if not f[i] then\n        begin\n            j:=i;inc(n);a[n]:=i;//\u5c06trunc(sqrt(sqrt(r)))\u5185\u7684\u6240\u6709\u7d20\u6570\u5b58\u5165a\u6570\u7ec4\n            while j<=sqrt(r) do//\u5c06\u7d20\u6570\u7684\u500d\u6570\u5168\u90e8\u8d4b\u503c\u4e3a\u5408\u6570\n            begin\n                inc(j,i);\n                f[j]:=true;\n            end;\n        end;\n    for i:=trunc(sqrt(sqrt(r)))+1 to trunc(sqrt(r)) do;//\u5c06trunc(sqrt(sqrt(r)))-trunc(sqrt(r))\u5185\u7684\u6240\u6709\u7d20\u6570\u5b58\u5165a\u6570\u7ec4\n        if f[i]=false then begin inc(n);a[n]:=i;end;\n    fillchar(f,sizeof(f),false);\n    for i:=1 to n do\n    begin\n        j:=r div a[i]*a[i];//\u627e\u5230\u6700\u5927\u7684\u500d\u6570\n        while (j>=l)and(j>a[i]) do\n        begin\n            f[j-l+1]:=true;//\u4e3a\u8282\u7701\u7a7a\u95f4 \u5c06l\u5b58\u5165f[1]\n            dec(j,a[i]);\n        end;\n    end;\n    n:=0;\n    for i:=l to r do\n        if not f[i-l+1] then inc(n);\n    writeln(n);\nend.\n\n```",
        "postTime": 1455698099,
        "uid": 8369,
        "name": "YZ\u4eae\u6676\u6676",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1835 \u3010\u7d20\u6570\u5bc6\u5ea6_NOI\u5bfc\u520a2011\u63d0\u9ad8\uff0804\uff09\u3011"
    }
]