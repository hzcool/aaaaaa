[
    {
        "content": "## \u6211\u4eec\u5728\u505a\u9898\u4e4b\u524d\uff0c\u5148\u8981\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u56fe\u8bba\u9898\n\n\u9898\u610f\u63cf\u8ff0\u6709\u4e9b\u7ed5\uff0c\u6211\u5728\u8fd9\u91cc\u518d\u9610\u8ff0\u4e00\u904d\uff1a\n\n- \u7ed9\u51fa\u4e00\u4e2a\u90e8\u5206\u672a\u77e5\u7684\u6570\u5217\u7684**\u957f**\uff0c\u4ee5\u53ca\u6570\u5217\u5df2\u77e5\u7684\u90e8\u5206\n- \u518d\u7ed9\u51fa\u4e00\u4e9b\u533a\u95f4\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u5728\u5b83\u7684\u5185\u90e8\u94a6\u5b9a\u4e00\u4e9b\u4f4d\u7f6e\uff0c\u5e76\u8981\u6c42\u8fd9\u4e9b\u4f4d\u7f6e\u4e0a\u7684\u6570\u6700\u540e\u7684\u503c\uff0c\u90fd\u4e25\u683c\u5927\u4e8e\u533a\u95f4\u5185\u5176\u4ed6**\u672a\u94a6\u5b9a**\u7684\u4f4d\u7f6e\u4e0a\u7684\u6570\u3002\n- \u8981\u6c42\u7ed9\u51fa\u4efb\u610f\u4e00\u79cd\u53ef\u884c\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5217\u3002\n\n\u5927\u4e8e\u5173\u7cfb\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u6761\u8fb9\uff0c\u7531\u8f83\u5927\u7684\u6570\u6307\u5411\u8f83\u5c0f\u7684\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u8003\u8651\u8ba9\u8fd9k\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u4e0e\u533a\u95f4\u5185\u5176\u4ed6\u7684\u4f4d\u7f6e\u4e24\u4e24\u8fde\u6709\u5411\u8fb9\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u5230\u56fe\u4e0a\u4e86\u3002\n\n\u9996\u5148\uff0c\u56fe\u4e0a\u82e5\u6709\u73af\u5219\u4e00\u5b9a\u65e0\u89e3\uff0c\u56e0\u4e3a\u5b83\u610f\u5473\u7740$x>x$\u3002\n\n\u90a3\u4e48\u95ee\u9898\u53d8\u4e3aDAG\u4e0a\u95ee\u9898\uff0c\u53ea\u8981\u6211\u4eec\u4ece\u5165\u8bfb\u4e3a0\u7684\u4f4d\u7f6e\u5f00\u59cbDP\u5373\u53ef\u3002\u8d2a\u5fc3\u7684\u60f3\uff0c\u6700\u5927\u7684\u6570\u8d8a\u5927\uff0c\u7559\u7ed9\u4e0b\u9762\u7684\u7a7a\u95f4\u5c31\u8d8a\u5927(\u6ce8\u610f\u6570\u5217\u4e2d\u7684\u6570\u5927\u4e8e0\uff01)\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u7684\u53ef\u80fd\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a1e9\u3002DP\u65f6\u5047\u5982\u9047\u5230\u4e86\u5df2\u7ecf\u786e\u5b9a\u7684\u6570\uff0c\u5374\u53d1\u73b0\u5b83\u6491\u6b7b\u4e86\u4e5f\u6253\u4e0d\u5230\u4ed6\u9884\u8bbe\u7684\u503c\uff08\u5426\u5219\u4e0e\u5176\u4ed6\u5355\u8c03\u5173\u7cfb\u77db\u76fe\uff09\uff0c\u90a3\u4e48\u95ee\u9898\u65e0\u89e3\u3002\n\n\u6700\u540e\u82e5\u6709\u89e3\uff0c\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u597d\u5b8c\u7f8e\u554a\uff0c\u5728\u4f60\u770b\u5230$\\sum k\\leq 300000$\u4e4b\u524d\u8fd8\u4ee5\u4e3a\u662f\u63d0\u9ad8\u7ec4\u6c34\u9898\u3002\n\n\u5047\u5982\u6309\u4e4b\u524d\u8bf4\u7684\u90a3\u6837\u5efa\u56fe\uff0c\u4e00\u6b21\u64cd\u4f5c\u5c31\u8981\u52a0\u5165$k(r-l+1-k)$\u6761\u8fb9\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u52a0\u5165\u7684\u8fb9\u6570\u5728$N^3$\u7ea7\u522b\uff0c\u7a7a\u95f4\u76f4\u63a5\u7206\u70b8\u3002\n\n\u4e5f\u8bb8\u4f60\u4f1a\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u201c\u7535\u8bdd\u4ea4\u6362\u673a\u201d\u7684\u5efa\u56fe\u601d\u60f3\uff0c\u4e0d\u518d\u4e24\u4e24\u8fde\u8fb9\n\u800c\u662f\u65b0\u62c9\u51fa\u4e00\u4e2a**\u8d85\u7ea7\u8282\u70b9**\uff0c\u7136\u540e\u53ea\u9700\u8981k\u4e2a\u70b9\u5411\u5b83\u8fde\u8fb9\uff0c\u5b83\u5411\u533a\u95f4\u5185\u5176\u4f59\u70b9\u8fde\u8fb9\u5373\u53ef\uff0c\u53ea\u8981$k+(r-l+1-k)=r-l+1$\u6761\u8fb9\u5373\u53ef\n\n\u7136\u800c\u8fd9\u8fd8\u662f\u4e0d\u884c\u3002\u56e0\u4e3a\u5982\u679c\u6bcf\u4e2a\u64cd\u4f5c\u533a\u95f4\u90fd\u662f\u4e0a\u5341\u4e07\u7684\u5927\u533a\u95f4\uff0c\u800ck\u6bcf\u6b21\u53ea\u67091\uff0c\u6700\u591a\u8fd8\u662f\u8981\u8fde$N\\sum k$\u6761\u8fb9,\u4ecd\u7136\u7206\u70b8\u3002\n\n\u6ce8\u610f\u5230\uff0c\u6bcf\u6b21\u6211\u4eec\u7684\u7a7a\u95f4\u6d6a\u8d39\u5728\uff0c\u6709\u5927\u91cf\u4f4d\u7f6e\u8fde\u7eed\u7684\u70b9\uff0c**\u8d85\u7ea7\u8282\u70b9**\u5374\u5411\u5b83\u4eec\u4e00\u4e00\u8fde\u4e86\u8fb9\u3002\u53d1\u6325\u60f3\u8c61\u529b\uff0c\u6709\u4ec0\u4e48\u4e1c\u897f\u80fd\u63d0\u9ad8\u533a\u95f4\u64cd\u4f5c\u7684\u6548\u7387\u5462\uff1f\n\n**\u7ebf\u6bb5\u6811\uff01\uff01\uff01**\n\n\u6ca1\u9519\uff0c\u6211\u4eec\u628a\u6570\u5217\u5efa\u6210\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u533a\u95f4\uff0c\u5b83\u4f1a\u88abk\u4e2a\u70b9\u5272\u6210\u6700\u591ak+1\u4e2a\u5b50\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u5316\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684\u6700\u591a$log(n)$\u4e2a\u5df2\u77e5\u533a\u95f4\uff0c\u5bf9\u4e8e\u8d85\u7ea7\u8282\u70b9\u8fde\u51fa\u7684\u8fb9\uff0c\u4e00\u6b21\u64cd\u4f5c\u8981\u52a0$klog(n)$\u6761\uff0c\u7b97\u4e0a\u8fde\u5411\u8d85\u7ea7\u8282\u70b9\u7684\uff0c\u603b\u5171\u662f$k+klog(n)$\u3002\u4e8e\u662f\u603b\u5171\u7684\u8fb9\u6570\u5728$(\\sum k)log(n)$\u7ea7\u522b\uff0c\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u8fd9\u6837\u8fde\u8fb9\u4ee5\u540e\uff0c\u8981\u6ce8\u610f\u7ebf\u6bb5\u6811\u81ea\u8eab\u7684\u8fb9\u53ea\u662f\u5f62\u5f0f\uff0c\u8981\u8d4b\u6743\u4e3a0\u3002\n\n\u4e4b\u540e\u6309\u7167\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u6309\u62d3\u6251\u5e8fDP\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define lson ls[u],l,md\n#define rson rs[u],md+1,r \n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define REP(u) for(int i=hd[u],v=e[i].v,w=e[i].w;i;i=e[i].n,v=e[i].v,w=e[i].w) \nusing namespace std;\nconst int N=100100,TO=600600,M=7007000,INF=1000000000;\nstruct edge{int n,v,w;}e[M];\nint n,s,m,p,v,u,x,k,l,r,pr,cnt,fl,ok,id[N],ins[TO];\nint hd[TO],vis[TO],in[TO],f[TO],ls[TO],rs[TO],o[TO];\nvoid add(int u,int v,int w){e[++fl]=(edge){hd[u],v,w};hd[u]=fl;in[v]++;}\nqueue<int>q; \nint read(){\n    char ch=getchar();int x=0,o=1;\n    for(;ch<'0' || '9'<ch;ch=getchar()) if(ch=='-') o=-1;\n    for(;'0'<=ch&&ch<='9';ch=getchar()) x=(x<<1)+(x<<3)+(ch^'0');\n    return x*o;\n}\nvoid prg(){\n    FOR(x,1,cnt){\n        cout<<x<<':';\n        REP(x) cout<<v<<'-'<<w<<' ';cout<<endl;\n    }\n}\nvoid bld(int u,int l,int r){\n    if(l==r) {id[l]=u;cnt=max(cnt,u);return;}\n    int md=l+r>>1;\n    ls[u]=++cnt,rs[u]=++cnt;\n    bld(lson),bld(rson);\n    add(u,ls[u],0),add(u,rs[u],0); \n}\nvoid adde(int u,int l,int r,int x,int y,int z){\n    if(x<=l && r<=y) {add(z,u,1);return;}\n    if( y<l || r<x ) return;\n    int md=l+r>>1;\n    adde(lson,x,y,z),adde(rson,x,y,z);\n}\nvoid dfs(int u){\n    vis[u]=1;ins[u]=1;\n    REP(u){\n        if(ins[v]) ok=0;\n        if(!vis[v]) dfs(v);\n    }\n    ins[u]=0;\n} \nint main(){\n    scanf(\"%d%d%d\",&n,&s,&m); \n    cnt=1,bld(1,1,n);\n    FOR(i,1,s) p=read(),f[id[p]]=read(),o[id[p]]=f[id[p]];\n    FOR(i,1,m){\n        l=read(),r=read(),k=read();\n        pr=l;++cnt;\n        FOR(j,1,k){\n            x=read();\n            add(id[x],cnt,0);\n            if(pr<=x-1) adde(1,1,n,pr,x-1,cnt);\n            pr=x+1; \n        }if(pr<=r) adde(1,1,n,pr,r,cnt);\n    } \n    FOR(i,1,cnt) if(!f[i]) f[i]=INF;\n    FOR(i,1,cnt) if(!vis[i]){\n        ok=1;dfs(i);\n        if(!ok){printf(\"NIE\");return 0;}\n    }\n    FOR(i,1,cnt) if(!in[i]) q.push(i);\n    while(!q.empty()){\n        u=q.front();q.pop();\n        REP(u){\n            in[v]--;\n            if(o[v]>f[u]-w){printf(\"NIE\");return 0;}\n            f[v]=min(f[v],f[u]-w);\n            if(!in[v]) q.push(v);\n            if(f[v]<1){printf(\"NIE\");return 0;}  \n        }\n    } \n    printf(\"TAK\\n\");\n    FOR(i,1,n) printf(\"%d \",f[id[i]]);\n}\n```\n",
        "postTime": 1533039902,
        "uid": 62267,
        "name": "BJpers2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3588 \u3010[POI2015]PUS\u3011"
    },
    {
        "content": "# \u3010POI2015\u3011Pustynia \u9898\u89e3\n\n\u9996\u5148\u6765\u770b\u4e00\u4e2a\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u6709\u4e00\u4e2a\u6570\u5217$A$\uff0c\u5b58\u5728\u82e5\u5e72\u5173\u7cfb\uff0c\u6bcf\u4e2a\u5173\u7cfb\u5f62\u5982$A_x<A_y$\uff0c\u5e8f\u5217\u4e2d\u6709\u4e00\u4e9b\u6570\u662f\u5df2\u77e5\u7684\uff0c\u6c42\u5e8f\u5217\u7684\u4e00\u79cd\u53ef\u80fd\u6784\u9020\n\n\u8fd9\u662f\u5dee\u5206\u7ea6\u675f\u7684\u7ecf\u5178\u95ee\u9898\uff0c\u89e3\u51b3\u8d77\u6765\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u5c06\u6bcf\u4e2a\u4f4d\u7f6e\u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u5c06\u4e00\u4e2a$A_x<A_y$\u7684\u5173\u7cfb\u770b\u505a\u4e00\u6761\u8fb9$(x,y)$\uff0c\u8fb9\u6743\u4e3a$1$\u3002\u5982\u679c\u8fd9\u6837\u5efa\u51fa\u6765\u7684\u56fe\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u95ee\u9898\u663e\u7136\u65e0\u89e3\u3002\u6240\u4ee5\u6709\u89e3\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2aDAG\u3002\u56e0\u6b64\u6211\u4eec\u6c42\u51fa\u591a\u6e90\u6700\u957f\u8def\uff0c\u6e90\u70b9\u5c31\u662f\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u6c42\u6700\u957f\u8def\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5728\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u3002\u67d0\u4e2a\u70b9\u7684\u6700\u957f\u8def\u8868\u793a\u7684\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u53ef\u80fd\u53d6\u503c\uff0c\u56e0\u6b64\u5047\u5982\u4e00\u4e2a\u5df2\u77e5\u70b9\u7684\u6700\u957f\u8def\u5927\u4e8e\u7ed9\u5b9a\u503c\uff0c\u90a3\u4e48\u95ee\u9898\u65e0\u89e3\n\n\u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u672c\u9898\u7684\u5f31\u5316\u7248\u672c\u3002\u800c\u672c\u9898\u662f\u8bf4\uff0c\u4e00\u4e2a\u533a\u95f4$[l,r]$\u4e2d\uff0c\u6709$k$\u4e2a\u4f4d\u7f6e\u6bd4\u5176\u5b83\u4f4d\u7f6e\u5927\u3002\u90a3\u4e48\u8981\u662f\u66b4\u529b\u89e3\u51b3\u7684\u8bdd\uff0c\u5c31\u6309\u5927\u5c0f\u5173\u7cfb\u76f4\u63a5\u8fde\u82e5\u5e72\u6761\u8fb9\u3002\u5177\u4f53\u5730\uff0c\u5c06\u533a\u95f4$[l,r]$\u4e2d\u7684\u4f4d\u7f6e\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff0c$S_1$\u662f\u7ed9\u5b9a\u7684$k$\u4e2a\u70b9\uff0c$S_2$\u5c31\u662f\u5176\u5b83\u70b9\uff0c\u7136\u540e\u96c6\u5408$S_2$\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u5411\u96c6\u5408$S_1$\u4e2d\u7684\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$1$\uff0c\u7136\u540e\u5c31\u548c\u4e0a\u9762\u90a3\u4e2a\u5f31\u5316\u7248\u95ee\u9898\u4e00\u6837\u4e86\u3002\n\n\u8fd9\u6837\u8fde\u51fa\u6765\u7684\u8fb9\u6709$|S_1|\\times|S_2|$\u6761\uff0c\u663e\u7136\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\u90a3\u4e48\u7a0d\u5fae\u806a\u660e\u4e00\u70b9\u5c31\u4f1a\u60f3\u5230\uff1a\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u70b9\uff0c$S_1$\u4e2d\u6240\u6709\u70b9\u5411\u865a\u62df\u70b9\u8fde\u8fb9\uff0c\u865a\u62df\u70b9\u518d\u5411$S_2$\u4e2d\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u4e24\u79cd\u8fb9\u7684\u8fb9\u6743\u5206\u522b\u4e3a$0$\u548c$1$\uff0c\u81f3\u4e8e\u54ea\u4e2a\u662f$0$\u54ea\u4e2a\u662f$1$\uff0c\u53ef\u4ee5\u51ed\u4e2a\u4eba\u559c\u597d\u51b3\u5b9a\uff0c\u8fd9\u6837\u8fde\u51fa\u6765\u7684\u8fb9\u5c31\u662f$|S_1|+|S_2|$\u6761\n\n\u4f46\u8fd9\u8fd8\u662f\u6211\u4eec\u4e0d\u80fd\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709$m$\u4e2a\u533a\u95f4\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u7684$k$\u4e2a\u70b9\u5c06\u533a\u95f4\u5206\u6210\u4e86\u82e5\u5e72\u6bb5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u865a\u62df\u70b9\u8fde\u5411\u7684\u70b9\uff0c\u662f\u6700\u591a$k+1$\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5411\u8fde\u7eed\u533a\u95f4\u8fde\u8fb9\uff0c\u5c31\u662f\u975e\u5e38\u5957\u8def\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\u4e86\u3002\u5411\u6bcf\u6bb5\u533a\u95f4\u81f3\u591a\u8fde$\\log\\;n$\u6761\u8fb9\uff0c\u533a\u95f4\u603b\u6570\u662f$\\sum k$\uff0c\u7ebf\u6bb5\u6811\u5185\u90e8\u9700\u8981$2n$\u6761\u8fb9\uff0c\u7ed9\u5b9a\u7684$k$\u4e2a\u70b9\u9700\u8981\u5411\u865a\u62df\u70b9\u8fde\u8fb9\uff0c\u56e0\u6b64\u8fb9\u7684\u603b\u6570\u662f$k+\\sum k\\;\\log\\;n+2n$\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u7684\u4e86\n\n\u53e6\u5916\uff0c\u5728\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u5e76\u4e0d\u9700\u8981\u5199\u591a\u4f59\u7684\u5224\u73af\u8fc7\u7a0b\uff0c\u53ea\u8981\u5728\u62d3\u6251\u6392\u5e8f\u65f6\u52a0\u4e0a$vis$\u6807\u8bb0\uff0c\u6700\u540e\u5982\u679c\u6709\u4efb\u610f\u4e00\u4e2a\u70b9\u6ca1\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u8bf4\u660e\u5b58\u5728\u73af\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace IO\n{\n\tconst int S=(1<<20)+5;\n\t//Input Correlation\n\tchar buf[S],*H,*T;\n\tinline char Get()\n\t{\n\t\tif(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n\t\tif(H==T) return -1;return *H++;\n\t}\n\tinline int read()\n\t{\n\t\tint x=0;char c=Get();\n\t\twhile(!isdigit(c)) c=Get();\n\t\twhile(isdigit(c)) x=x*10+c-'0',c=Get();\n\t\treturn x;\n\t}\n\t//Output Correlation\n\tchar obuf[S],*oS=obuf,*oT=oS+S-1,c,qu[55];int qr;\n\tinline void flush(){fwrite(obuf,1,oS-obuf,stdout);oS=obuf;}\n\tinline void putc(char x){*oS++ =x;if(oS==oT) flush();}\n\ttemplate <class I>inline void print(I x)\n\t{\n\t\tif(!x) putc('0');\n\t\tif(x<0) putc('-'),x=-x;\n\t\twhile(x) qu[++qr]=x%10+'0',x/=10;\n\t\twhile(qr) putc(qu[qr--]);\n\t\tputc(' ');\n\t}\n}\n\ninline void upmax(int &x,const int &y){if(y>x) x=y;}\n\nusing namespace IO;\nconst int N=500010,lim=(int)1e9;\nstruct Edge{int to,capa,next;} e[5000000];\nint h[N],sum=0,tot,n,m,s;\nint a[N],dis[N],deg[N];\nint pnt[N];\nbool vis[N];\n\nvoid add_edge(int u,int v,int w)\n{\n\te[++sum].to=v;\n\te[sum].capa=w;\n\te[sum].next=h[u];\n\th[u]=sum;\n\tdeg[v]++;\n}\n\nvoid Build(int o,int l,int r)\n{\n\tif(l==r){pnt[o]=l;return;}\n\tpnt[o]=++tot;\n\tint mid=(l+r)/2;\n\tBuild(o<<1,l,mid);\n\tBuild(o<<1|1,mid+1,r);\n\tadd_edge(pnt[o<<1],pnt[o],0);\n\tadd_edge(pnt[o<<1|1],pnt[o],0);\n}\n\nvoid link(int o,int l,int r,int nl,int nr,int x)\n{\n\tif(l>=nl&&r<=nr){add_edge(pnt[o],x,0);return;}\n\tint mid=(l+r)/2;\n\tif(nl<=mid) link(o<<1,l,mid,nl,nr,x);\n\tif(nr>mid) link(o<<1|1,mid+1,r,nl,nr,x);\n}\n\nvoid TopoSort()\n{\n\tqueue<int> q;\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tif(!dis[i]) dis[i]=1;\n\t\tif(!deg[i]) q.push(i);\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();vis[u]=1;\n\t\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\t{\n\t\t\tint v=e[tmp].to;\n\t\t\tupmax(dis[v],dis[u]+e[tmp].capa);\n\t\t\tif(a[v]&&dis[v]>a[v]) puts(\"NIE\"),exit(0);\n\t\t\tif(! --deg[v]) q.push(v);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint k,x,l,r,pre;\n\ttot=n=read();s=read();m=read();\n\tBuild(1,1,n);\n\tfor(int i=1;i<=s;i++)\n\t{\n\t\tk=read();x=read();\n\t\ta[k]=dis[k]=x;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tl=read();r=read();k=read();\n\t\tpre=l-1;tot++;\n\t\tfor(int j=1;j<=k;j++)\n\t\t{\n\t\t\tx=read();\n\t\t\tadd_edge(tot,x,1);\n\t\t\tif(x>pre+1) link(1,1,n,pre+1,x-1,tot);\n\t\t\tpre=x;\n\t\t}\n\t\tif(x<r) link(1,1,n,x+1,r,tot);\n\t}\n\tTopoSort();\n\tfor(int i=1;i<=tot;i++)\n\t\tif(!vis[i]||dis[i]>lim)\n\t\t{\n\t\t\tputs(\"NIE\");\n\t\t\treturn 0;\n\t\t}\n\tputs(\"TAK\");\n\tfor(int i=1;i<=n;i++) print(dis[i]);\n\tflush();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1535112872,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3588 \u3010[POI2015]PUS\u3011"
    },
    {
        "content": "# \u5dee\u5206\u7ea6\u675f+\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n### \u5dee\u5206\u7ea6\u675f\n\u8fd9\u79cd\u4e0d\u7b49\u5f0f\u5173\u7cfb\u6c42\u662f\u5426\u6709\u89e3 / \u6784\u9020\u4efb\u610f\u4e00\u7ec4\u89e3\u662f\u7ecf\u5178\u7684\u5dee\u5206\u7ea6\u675f\u95ee\u9898\u3002\n\n\u5982\u679c\u9700\u8981\u4fdd\u8bc1 $dist[u]>dist[v]$\uff0c\u5219\u4ece $u$ \u5411 $v$ \u8fde\u4e00\u6761\u8fb9\u6743\u662f $-1$ \u7684\u8fb9\uff0c\u518d\u8dd1\u6700\u6bb5\u8def\u3002\u6839\u636e\u6700\u6bb5\u8def\u66f4\u65b0 $dist$ \u7684\u6761\u4ef6\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8\u53ea\u8981\u6709\u89e3\u5c31\u4e00\u5b9a\u6ee1\u8db3 $dist[u]-1 \\ge dist[v]$ \u5373 $dist[u]>dist[v]$\u3002\u5982\u679c\u65e0\u89e3\u5c31\u4f1a\u51fa\u73b0\u73af\u6216\u8005\u548c\u539f\u672c\u7684\u5df2\u77e5\u6743\u503c\u77db\u76fe\u3002\u672c\u9898\u8fb9\u6743\u90fd\u662f $1$\uff0c\u53ef\u4ee5\u76f4\u63a5 bfs \u6c42\u6700\u77ed\u8def\u3002\u5224\u73af\u53ea\u9700\u8981\u770b\u662f\u5426\u6240\u6709\u70b9\u90fd\u5165\u8fc7\u961f\u65e2\u53ef\u3002\n\n### \u5efa\u7acb\u8d85\u7ea7\u8282\u70b9\u4f18\u5316\u5efa\u56fe\n\u672c\u9898\u4e2d\u6bcf\u6761\u8fb9\u90fd\u662f\u591a\u4e2a\u70b9\u5411\u591a\u4e2a\u70b9\u8fde\u8fb9\u7684\u60c5\u51b5\uff0c\u66b4\u529b\u5efa\u56fe\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u8fbe $O(n^3)$\uff0c\u53ef\u4ee5\u7528\u5e38\u89c1\u7684\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u6761\u9650\u5236\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u70b9\uff0c\u628a $x_1,x_2...x_{k_i}$ \u5411\u8d85\u7ea7\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $-1$\uff0c\u8d85\u7ea7\u70b9\u5411\u8fd9\u4e2a\u533a\u95f4\u5176\u5b83\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $0$\u3002\u4f46\u662f\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e0a\u9650\u662f $O(n^2)$ \u7684\uff0c\u8fd8\u662f\u4e0d\u53ef\u63a5\u53d7\u3002\n\u53d1\u73b0\u8d85\u7ea7\u70b9\u5bf9\u201c\u8be5\u533a\u95f4\u5185\u5176\u5b83\u6240\u6709\u70b9\u201d\u8fde\u8fb9\u5176\u5b9e\u5c31\u662f\u5bf9\u88ab $x_1,x_2...x_{k_i}$ \u5206\u5272\u7684\u82e5\u5e72\u4e2a\u5c0f\u533a\u95f4\u8fde\u8fb9\uff08\u5c0f\u533a\u95f4\u4e2a\u6570\u4e0d\u8d85\u8fc7 $3 \\times 10^5$\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n### \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u7279\u70b9\u5f88\u660e\u663e\uff0c\u5efa\u56fe\u8fc7\u7a0b\u5b58\u5728\u201c\u4e0e\u533a\u95f4\u8fde\u8fb9\u201d\u7684\u64cd\u4f5c\u3002\u5982\u679c\u66b4\u529b\u5efa\u8fb9\u5c31\u4f1a\u9ad8\u8fbe $O(n^2)$ \u7684\u590d\u6742\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u7528\u533a\u95f4\u95ee\u9898\u5e38\u7528\u7684\u201c\u7ebf\u6bb5\u6811\u201d\u6765\u8f85\u52a9\u5efa\u56fe\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u964d\u5230 $O(n \\log n)$\u3002\n\n\u5e38\u89c1\u7684\u662f\u7ef4\u62a4\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff08\u5165\u6811\u548c\u51fa\u6811\uff09\uff0c\u90a3\u4e48 $v$ \u5411\u533a\u95f4 $[l,r]$ \u8fde\u8fb9\u5c31\u53d8\u6210\u4e86\u51fa\u6811\u8868\u793a $v$ \u7684\u53f6\u5b50\u8282\u70b9\u5411\u5165\u6811\u7684 $[l,r]$ \u533a\u95f4\u8fde\u8fb9\uff08\u6bcf\u6b21\u6700\u591a\u4e0e $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u8fde\u8fb9\uff09\uff0c\u8fb9\u6743\u5373\u539f\u56fe\u7684\u8fb9\u6743\u3002\u533a\u95f4\u5411\u70b9\u8fde\u8fb9\u540c\u7406\u3002\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u5176\u5b9e\u4e5f\u662f\u70b9\u548c\u533a\u95f4/\u533a\u95f4\u548c\u70b9\u8fde\u8fb9\u7684\u7279\u6b8a\u60c5\u51b5\u4e86\u3002\n\n\u7531\u4e8e\u53f6\u5b50\u8282\u70b9\u90fd\u8868\u793a\u56fe\u4e2d\u7684\u5bf9\u5e94\u8282\u70b9\uff0c\u6240\u4ee5\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7f16\u53f7\u5411\u540c\u7684\u53f6\u5b50\u8282\u70b9\u5176\u5b9e\u662f\u4e00\u4e2a\u70b9\uff0c\u5728\u6bcf\u4e00\u5bf9\u4e4b\u95f4\u8fde\u4e0a\u8fb9\u6743\u662f $0$ \u7684\u8fb9\u3002\uff08\u6ce8\u610f\u8fd9\u4e24\u4e2a\u70b9\u662f\u540c\u4e00\u4e2a\u70b9\uff0c\u4e3a\u4e86\u5b8c\u5168\u7b49\u6548\u8981\u8fde\u53cc\u5411\u800c\u4e0d\u662f\u5355\u5411\uff09\u3002\n\u6240\u6709\u8282\u70b9\u8868\u793a\u56fe\u4e0a\u4ece\u8fd9\u4e2a\u533a\u95f4\u51fa\u53d1 / \u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u8fb9\u3002\n\u6839\u636e\u5b9e\u9645\u542b\u4e49\uff0c\u5bf9\u4e8e\u5165\u6811\uff08\u522b\u4eba\u5411\u5b83\u8fde\u8fb9\uff09\uff0c\u6240\u6709\u8282\u70b9\u5411\u5176\u5b50\u8282\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $0$ \n\u3002\u5bf9\u4e8e\u51fa\u6811\uff0c\u6240\u6709\u8282\u70b9\u5411\u5176\u7236\u8282\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662f $0$\u3002\n\n\u4f46\u672c\u9898\u53ea\u6709\u5355\u70b9\u5411\u533a\u95f4\u8fde\u8fb9\u7684\u60c5\u51b5\uff0c\u800c\u6ca1\u6709\u533a\u95f4\u5411\u5355\u70b9\u8fde\u8fb9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5**\u672c\u9898\u53ea\u9700\u8981\u4e00\u9897\u5165\u6811\u5c31\u53ef\u4ee5\u4e86\uff01** \u5165\u6811\u548c\u51fa\u6811\u4e4b\u95f4\u7684\u8fb9\u5c31\u4e0d\u9700\u8981\u4e86\uff0c\u5176\u5b83\u7684\u548c\u524d\u9762\u8bf4\u7684\u4e00\u6837\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=600010,M=6600010,up=1000000000;\nint n,s,m,tot,a[N];\nint id[N];//id[i]\u8868\u793a\uff1a\u8868\u793a\u533a\u95f4[i,i]\u7684\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u53f7\nint idx=1,e[M],ne[M],head[N],w[M];//!!! head[]\nint in[N];\ninline void add(int x,int y,int z)\n{\n    e[++idx]=y;\n    ne[idx]=head[x];\n    head[x]=idx;\n    w[idx]=z;\n    in[y]++;\n}\nvoid build(int u,int l,int r)\n{\n    tot=max(tot,u);\n    if(l==r) {id[l]=u; return;}\n    int mid=(l+r)>>1;\n    build(u<<1,l,mid); build(u<<1|1,mid+1,r);\n    add(u,u<<1,0); add(u,u<<1|1,0);//\u5165\u6811 \n}\nvoid Add(int u,int l,int r,int U,int al,int ar)\n{\n    if(al<=l&&r<=ar)\n    {\n        add(U,u,0); //u\u5411[l,r]\u8fde\u8fb9\uff0c\u8bf4\u660eu\u4ee3\u8868\u5165\u6811\u8282\u70b9\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(al<=mid) Add(u<<1,l,mid,U,al,ar);\n    if(ar>mid) Add(u<<1|1,mid+1,r,U,al,ar);\n}\nint dist[N];\nbool vis[N];\nvoid toposort()\n{\n    queue<int> q;\n    for(int i=1;i<=tot;i++)\n    {\n        if(!in[i]) q.push(i);\n        if(!dist[i]) dist[i]=up;\n    }\n    while(!q.empty())\n    {\n        int u=q.front(); q.pop(); vis[u]=1;\n        for(int i=head[u];i;i=ne[i])\n        {\n            int v=e[i];\n            dist[v]=min(dist[v],dist[u]+w[i]);\n            if(a[v]&&dist[v]<a[v]) //\u6309\u7167\u9650\u5236\u7684\u542b\u4e49\uff0cv\u6700\u540e\u7684\u6743\u503c\u5fc5\u987b<=dist[v]\uff0c\u800cv\u6743\u503c\u5df2\u77e5\u662fa[v]\uff0c\u90a3\u4e48\u65e0\u89e3\n            {\n                puts(\"NIE\");\n                exit(0);\n            }\n            if(!(--in[v])) q.push(v);\n        }\n    } \n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&s,&m);\n    build(1,1,n);\n    for(int i=1,p,d;i<=s;i++)\n        scanf(\"%d%d\",&p,&d),a[id[p]]=dist[id[p]]=d;\n    for(int t=1,l,r,k;t<=m;t++)\n    {\n        scanf(\"%d%d%d\",&l,&r,&k);\n        tot++;\n        for(int i=1,x;i<=k;i++)\n        {\n            scanf(\"%d\",&x);\n            add(id[x],tot,-1);\n            if(l<x) Add(1,1,n,tot,l,x-1);\n            l=x+1;\n        }\n        if(l<=r) Add(1,1,n,tot,l,r);\n    }\n    toposort();\n    for(int i=1;i<=tot;i++)\n        if(!vis[i]||dist[i]<1)\n        {\n            puts(\"NIE\");\n            return 0;\n        }\n    puts(\"TAK\");\n    for(int i=1;i<=n;i++) printf(\"%d \",dist[id[i]]);\n    return 0;\n}\n```",
        "postTime": 1668504845,
        "uid": 546246,
        "name": "E_huan",
        "ccfLevel": 8,
        "title": "P3588 PUS \u9898\u89e3"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P3588)\n## \u9898\u610f\n\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \u7684 $s$ \u9879\uff0c\u7ed9\u51fa $m$ \u6761\u9650\u5236\uff0c\u4e00\u6761\u9650\u5236\u4ee5 $l,r,k,x_1,x_2,\\cdot\\cdot\\cdot,x_k$ \u63cf\u8ff0\uff0c\u8868\u793a\u5728 $[l,r]$ \u533a\u95f4\u4e2d\uff0c$a_{x_1},a_{x_2},\\cdot\\cdot\\cdot,a_{x_k}$ \u90fd\u4e25\u683c\u5927\u4e8e\u6ca1\u88ab\u9009\u4e2d\u7684\u6570\u3002\n\n\u6c42\u4e00\u79cd\u6784\u9020\u65b9\u6848\u3002\n\n$1\\le s\\le n\\le10^5,1\\le m\\le 2\\times 10^5,\\sum k\\le 3\\times 10^5$\n## \u601d\u8def\n\u6a21\u62df\u8d5b $\\text C$ \u9898\uff0c\u8d5b\u65f6\u505a\u51fa\u6765\u4e86\uff01\uff011\n\n\u9996\u5148\u770b\u5230\u5927\u4e8e\uff0c\u53ef\u4ee5\u60f3\u5230\u5dee\u5206\u7ea6\u675f\uff0c\u4f46\u662f\u8981\u662f\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\u7684\u8bdd\u8fb9\u6570\u662f $O(\\sum k(r-l+1-k))=O(n^2m)$ \u7684\u3002\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u3002\n\n\u7a0d\u52a0\u601d\u8003\u53ef\u4ee5\u60f3\u5230\u5efa\u7acb\u4e24\u4e2a\u865a\u70b9\uff0c\u4e24\u8fb9\u5206\u522b\u5411\u865a\u70b9\u8fde\u8fb9\uff08\u6216\u88ab\u865a\u70b9\u8fde\u5411\uff09\uff0c\u8fb9\u6570\u662f $O(\\sum k+\\sum r-l+1-k)=O(nm)$ \u7684\u3002\u4ecd\u7136\u4e0d\u80fd\u901a\u8fc7\u3002\n\n\u8003\u8651\u5230\u7b2c\u4e8c\u90e8\u5206\u4e3a\u6574\u4e2a\u533a\u95f4\u88ab $k$ \u4e2a\u4f4d\u7f6e\u9694\u5f00\u7684\u82e5\u5e72\u4e2a\u5b50\u533a\u95f4\uff0c\u76f4\u63a5\u7531\u5b50\u533a\u95f4\u5411\u865a\u70b9\u8fde\u8fb9\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u8fb9\u6570\u4e3a $O(\\sum k+\\sum \\log (r-l+1-k))=O(\\sum k+m\\log n)$ \u7684\uff0c\u6b64\u65f6\u8fb9\u6570\u5df2\u5728\u5408\u7406\u8303\u56f4\u5185\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u89e3\u51b3\u539f\u95ee\u9898\u3002\u8003\u8651\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u540c\u65f6\u6c42\u51fa\u662f\u5426\u6709\u73af\u548c\u6700\u957f\u8def\uff0c\u6700\u5f00\u59cb\u9700\u8981\u5148\u628a\u7ed9\u51fa\u7684 $s$ \u9879\u7684\u6700\u957f\u8def\u8bbe\u5b9a\u4e3a\u7ed9\u51fa\u7684\uff0c\u5176\u4f59\u8bbe\u5b9a\u4e3a $1$\uff0c\u6b64\u65f6\u4fbf\u53ef\u4ee5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((\\sum k+m)\\log n)$\u3002\n\n\u6ce8\u610f\uff0c\u7ecf\u6211\u6d4b\u8bd5\uff0c\u6781\u9650\u6570\u636e\u4e0b\u8fb9\u6570\u4e0d\u5c11\u4e8e $5.5\\times 10^6$\uff0c\u70b9\u6570\u4e0d\u5c11\u4e8e $6\\times 10^5$\uff0c\u8bb8\u591a\u9898\u89e3\u4e5f\u56e0\u6b64\u88ab\u6211 hack \u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int N=6e5+10,E=6e6+10;\nint n,m,s,r[N],ind[N];\nint cnt,head[N]; \nstruct Edge{\n\tint to,nxt,w;\n}a[E];\ninline void add(int u,int v,int w){\n\tcnt++;\n\ta[cnt].w=w;\n\ta[cnt].to=v;\n\ta[cnt].nxt=head[u];\n\thead[u]=cnt;\n\tind[v]++;\n}\nint id;\nint num[N];\n#define ls (rt<<1)\n#define rs (rt<<1|1)\ninline void build(int rt,int l,int r){\n\tif(l==r){\n\t\tnum[rt]=l;\n\t\treturn ;\n\t}\n\tnum[rt]=++id;\n\tint mid=l+r>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r); \n\tadd(num[ls],num[rt],0);\n\tadd(num[rs],num[rt],0);\n}\ninline void add(int rt,int l,int r,int L,int R,int u){\n\tif(L<=l&&r<=R){\n\t\tadd(num[rt],u,0);\n\t\treturn ;\n\t}\n\tint mid=l+r>>1;\n\tif(L<=mid) add(ls,l,mid,L,R,u);\n\tif(R> mid) add(rs,mid+1,r,L,R,u);\n}\nint dis[N];\nbool vis[N];\ninline int topo(){\n\tqueue<int>q;\n\tfor(int i=1;i<=id;i++){\n\t\tdis[i]=max(dis[i],1);\n\t\tif(!ind[i]) q.push(i);\n\t}\n\twhile(!q.empty()){\n\t\tint cur=q.front();\n\t\tq.pop();\n\t\tvis[cur]=1;\n\t\tfor(int i=head[cur];i;i=a[i].nxt){\n\t\t\tint t=a[i].to; \n\t\t\tdis[t]=max(dis[t],dis[cur]+a[i].w);\n\t\t\tif(r[t]&&dis[t]>r[t]) return -1;\n\t\t\tif(--ind[t]==0)\n\t\t\t\tq.push(t);\n\t\t}\n\t}\n\tfor(int i=1;i<=id;i++)\n\t\tif(!vis[i]||dis[i]>1e9)\n\t\t\treturn -1;\n\treturn 1;\n}\nint main(){\n//\tfreopen(\"data_C2.in\",\"r\",stdin);\n//\tfreopen(\"data_C2.out\",\"w\",stdout); \n\tn=id=read(),s=read(),m=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=s;i++){\n\t\tint p=read();\n\t\tr[p]=dis[p]=read();\n\t} \n\twhile(m--){\n\t\tint l=read(),r=read(),k=read();\n\t\tid++;\n\t\tint cur=l-1;\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tint p=read();\n\t\t\tadd(id,p,1);\n\t\t\tif(p-1!=cur)\n\t\t\t\tadd(1,1,n,cur+1,p-1,id);\n\t\t\tif(i==k&&p<r)\n\t\t\t\tadd(1,1,n,p+1,r,id);\n\t\t\tcur=p;\n\t\t}\n\t}\n\tif(~topo()){\n//\t\tprintf(\"%d %d\\n\",cnt,id);\n\t\tputs(\"TAK\");\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",dis[i]);\n\t}else{\n\t\tputs(\"NIE\");\n\t}\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1628054804,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3588\u3010[POI2015] PUS\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u533a\u95f4\u5bf9\u533a\u95f4\u7684\u5efa\u8fb9\uff0c\u5f53\u7136\u8981\u7528\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u54af\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c06\u4e0d\u5728a\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u770b\u6210\u4e00\u4e2a\u96c6\u54081\uff0c\u5269\u4e0b\u7684\u770b\u6210\u4e00\u4e2a\u96c6\u54082\uff0c\u518d\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u8282\u70b9\u3002\n\n\u5229\u7528\u7ebf\u6bb5\u6811\u5c06\u96c6\u54081\u6240\u5904\u7684\u533a\u57df\u5411\u865a\u62df\u8282\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u540c\u65f6\u865a\u62df\u8282\u70b9\u5411\u96c6\u54082\u4e2d\u6240\u6709\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\u3002\n\n\u6700\u540e\u6211\u4eec\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u3002\n\n\u7b54\u6848\u4e0d\u5b58\u5728\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\n\n**\uff081\uff09\uff1a** \u8be5\u8282\u70b9\u503c\u5df2\u7ecf\u786e\u7acb\u4e14\u8be5\u8282\u70b9\u6240\u80fd\u53d6\u6700\u5c0f\u503c\u5927\u4e8e\u8be5\u503c\u3002\n\n**\uff082\uff09\uff1a** \u7ea6\u675f\u6761\u4ef6\u5b58\u5728\u73af\u3002\n\n**\uff083\uff09\uff1a** \u8be5\u8282\u70b9\u6240\u80fd\u53d6\u6700\u5c0f\u503c\u4e0d\u5728\u8303\u56f4\u5185\u3002\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<queue>\nusing namespace std;\nconst int size=5e5+10,inf=1e9;\nint n,m,s,cnt,tot,a[size],id[size],dis[size],vis[size],head[size],ver[size*10],edge[size*10],next[size*10],du[size];\nstruct node{\n\tint l,r;\n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n}tree[size];\nqueue<int> q;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\ninline void add(int x,int y,int z){ver[++tot]=y;edge[tot]=z;next[tot]=head[x];head[x]=tot;du[y]++;}\ninline void build(int p,int l,int r){\n\tl(p)=l;r(p)=r;\n\tif(l==r){id[p]=l;return;}\n\tid[p]=++cnt;\n\tint mid=(l(p)+r(p))>>1;\n\tbuild(p*2,l,mid);build(p*2+1,mid+1,r);\n\tadd(id[p*2],id[p],0);add(id[p*2+1],id[p],0);\n}\ninline void update(int p,int l,int r,int x){\n\tif(l<=l(p)&&r(p)<=r){add(id[p],x,0);return;}\n\tint mid=(l(p)+r(p))>>1;\n\tif(l<=mid) update(p*2,l,r,x);\n\tif(r>mid) update(p*2+1,l,r,x);\n}\ninline void topsort(){\n\tfor(int i=1;i<=cnt;i++){\n\t\tdis[i]=(dis[i])?dis[i]:1;\n\t\tif(!du[i]) q.push(i);\n\t}\n\twhile(q.size()){\n\t\tint x=q.front();q.pop();vis[x]=1;\n\t\tfor(int i=head[x];i;i=next[i]){\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tdis[y]=max(dis[y],dis[x]+z);\n\t\t\tif(a[y]&&dis[y]>a[y]){\n\t\t\t\tprintf(\"NIE\\n\");exit(0);\n\t\t\t}\n\t\t\tif(!(--du[y])) q.push(y);\n\t\t}\n\t}\n}\nint main(){\n\tn=cnt=read();s=read();m=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=s;i++){int p=read(),d=read();a[p]=dis[p]=d;}\n\tfor(int i=1;i<=m;i++){\n\t\tint l=read(),r=read(),k=read();\n\t\tint pre=l-1;cnt++;\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tint x=read();\n\t\t\tif(x>pre+1) update(1,pre+1,x-1,cnt);\n\t\t\tadd(cnt,x,1);pre=x;\n\t\t}\n\t\tif(pre<r) update(1,pre+1,r,cnt);\n\t}\n\ttopsort();\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]||dis[i]>inf){\n\t\t\tprintf(\"NIE\\n\");return 0;\n\t\t}\n\t}\n\tprintf(\"TAK\\n\");\n\tfor(int i=1;i<=n;i++){printf(\"%d \",dis[i]);}\n\treturn 0;\n}\n```\n",
        "postTime": 1543758755,
        "uid": 53032,
        "name": "\u5c0f\u5858\u7a7a\u660e",
        "ccfLevel": 0,
        "title": "P3588 [POI2015]PUS"
    },
    {
        "content": "> [P3588 [POI2015]PUS](https://www.luogu.com.cn/problem/P3588)\n>\n> [POI \u5408\u96c6](https://www.cnblogs.com/alex-wei/p/POI.html)\u3002\n\n\u88f8\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u677f\u5b50\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u88ab\u9009\u4e2d\u7684\u6570 $p_1,p_2,\\cdots,p_k$\uff0c\u5411\u533a\u95f4 $[l,p_1-1],[p_1+1,p_2-1],\\cdots,[p_k+1,r]$ \u8fde\u8fb9\u8868\u793a $p_i$ \u5927\u4e8e\u8fd9\u4e9b\u533a\u95f4\u4e2d\u7684\u4efb\u4f55\u6570\u3002\n\n\u82e5\u5e72\u4e2a\u70b9\u5411\u82e5\u5e72\u4e2a\u533a\u95f4\u4e24\u4e24\u8fde\u8fb9\u53ef\u4ee5\u5efa\u865a\u70b9\u4f18\u5316 + \u7ebf\u6bb5\u6811\u533a\u95f4\u8fde\u8fb9\u3002\u6ce8\u610f\u53ea\u6709\u5f53\u6307\u5411\u7684\u8282\u70b9\u4e3a\u53f6\u5b50\u7ed3\u70b9\u65f6\u6709\u6307\u5411\u7684\u70b9\u7684\u503c\u8981\u5c0f\u4e8e\u5f53\u524d\u70b9\u7684\u503c\uff0c\u5426\u5219\u53ea\u9700\u6ee1\u8db3\u4e0d\u5927\u4e8e\u3002\u6700\u540e\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\uff0c\u6ce8\u610f\u4e0d\u8981\u5f00\u5c0f\u6570\u7ec4\u4e86\u3002\n\n```cpp\nconst int N = 1e5 + 5;\nint n, s, m, mx, label[N], type[N * 6], d[N * 6], deg[N * 6], fix[N * 6];\nvint e[N * 6];\nvoid add(int u, int v) {e[u].pb(v), deg[v]++;}\nvoid build(int l, int r, int x) {\n\tif(l == r) return cmax(mx, label[l] = x), type[x] = l, void();\n\tint m = l + r >> 1;\n\tbuild(l, m, x << 1), build(m + 1, r, x << 1 | 1);\n}\n\nint ql, qr, from;\nvoid link(int l, int r, int x) {\n\tif(ql > qr) return;\n\tif(ql <= l && r <= qr) return add(from, x), void();\n\tint m = l + r >> 1;\n\tif(ql <= m) link(l, m, x << 1);\n\tif(m < qr) link(m + 1, r, x << 1 | 1);\n}\nvoid push(int l, int r, int x) {\n\tif(l == r) return; \n\tif(deg[x]) add(x, x << 1), add(x, x << 1 | 1);\n\tint m = l + r >> 1;\n\tpush(l, m, x << 1), push(m + 1, r, x << 1 | 1);\n}\n\nint main() {\n\tcin >> n >> s >> m, build(1, n, 1);\n\tfor(int i = 1, p; i <= s; i++) p = read(), d[label[p]] = read(), fix[label[p]] = 1;\n\tfor(int i = 1; i <= m; i++) {\n\t\tint l = read(), r = read(), k = read();\n\t\tstatic int p[N]; from = ++mx, p[0] = l - 1, p[k + 1] = r + 1;\n\t\tfor(int i = 1; i <= k; i++) p[i] = read(), add(label[p[i]], from);\n\t\tfor(int i = 1; i <= k + 1; i++)\n\t\t\tql = p[i - 1] + 1, qr = p[i] - 1, link(1, n, 1);\n\t} push(1, n, 1);\n\tqueue <int> q; int tot = 0;\n\tfor(int i = 1; i <= n; i++) if(!deg[label[i]])\n\t\tq.push(label[i]), d[label[i]] = !d[label[i]] ? 1e9 : d[label[i]];\n\twhile(!q.empty()) {\n\t\tint t = q.front(); q.pop(), tot += type[t] > 0;\n\t\tfor(int it : e[t]) {\n\t\t\tif(type[it] && fix[it] && d[it] >= d[t]) return puts(\"NIE\"), 0;\n\t\t\tif(!d[it]) d[it] = d[t] - (type[it] > 0);\n\t\t\telse cmin(d[it], d[t] - (type[it] > 0));\n\t\t\tif(d[it] < 1) return puts(\"NIE\"), 0; \n\t\t\tif(!--deg[it]) q.push(it);\n\t\t}\n\t}\n\tif(tot != n) return puts(\"NIE\"), 0;\n\tputs(\"TAK\");\n\tfor(int i = 1; i <= n; i++) cout << d[label[i]] << \" \";\n\tcout << endl; \n\treturn cerr << \"Time : \" << clock() << \" ms\" << endl, flush(), 0;\n}\n```",
        "postTime": 1639123753,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3588 [POI2015] PUS"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6b63\u6574\u6570\u5e8f\u5217 $a$\uff0c\u6bcf\u4e2a\u6570\u5728 $1$ \u5230 $10^9$ \u8303\u56f4\u5185\uff0c\u544a\u8bc9\u4f60\u5176\u4e2d $s$ \u4e2a\u6570\uff0c\u5e76\u7ed9\u51fa $m$ \u6761\u4fe1\u606f\uff0c\u6bcf\u6761\u4fe1\u606f\u5305\u542b\u4e09\u4e2a\u6570 $l$\uff0c$r$\uff0c$k$ \u4ee5\u53ca\u63a5\u4e0b\u6765 $k$ \u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a $a_l$ \u5230 $a_r$ \u91cc\u8fd9 $k$ \u4e2a\u6570\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u90fd\u6bd4\u4efb\u610f\u4e00\u4e2a\u5269\u4e0b\u7684 $r-l+1-k$ \u4e2a\u6570\u5927(\u4e25\u683c\u5927\u4e8e)\u3002\u8bf7\u6784\u9020\u51fa\u4e00\u7ec4\u6ee1\u8db3\u6761\u4ef6\u7684\u65b9\u6848\uff0c\u6216\u5224\u65ad\u65e0\u89e3\u3002\n\n### \u7b97\u6cd5\u5206\u6790\uff1a\n\n\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u601d\u8def\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5176\u5b83\u6570\u5411\u8fd9 $k$ \u4e2a\u6570\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a\u8fd9 $k$ \u4e2a\u6570\u8981\u6bd4\u5176\u5b83\u7684\u6570\u5927\uff0c\u7136\u540e\u8dd1\u4e00\u8fb9\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u6700\u957f\u8def\u3002\u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u65e0\u89e3\u3002\u5426\u5219\uff0c\u6709\u89e3\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u8981\u6c42\u6700\u957f\u8def\u3002\u8fd9\u91cc\u7684\u6700\u957f\u8def\u8868\u793a\u8be5\u70b9\u7684\u6700\u5c0f\u53d6\u503c\u3002\u5982\u679c\u6211\u4eec\u6c42\u51fa\u6765\u7684\u8fd9\u4e2a\u70b9\u7684 $dis_i$ \u5927\u4e8e\u7ed9\u5b9a\u6570\u8303\u56f4\u7684\u9650\u5236\uff0c\u6216\u8005\u5f53\u524d\u70b9\u662f\u7ed9\u5b9a\u7684\uff0c\u4f46\u6211\u4eec\u6c42\u51fa\u7684\u6700\u957f\u8def\u5927\u4e8e\u4ed6\u7ed9\u5b9a\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u65e0\u89e3\uff0c\u5426\u5219\u76f4\u63a5\u8f93\u51fa\u4ece $1$ \u5230 $n$ \u7684 $dis_i$ \u5373\u53ef\u3002\n\n\u4f46\u8fd9\u9053\u9898\u7684\u8fb9\u6570\u6709 $\\mid S1 \\mid \\times \\mid S2 \\mid$ \u6761\uff0c$S1$ \u662f\u7ed9\u5b9a\u7684 $k$ \u4e2a\u70b9\uff0c$S2$ \u662f\u5176\u4f59\u7684\u70b9\u3002\u663e\u7136\u70b8\u4e86\u3002\n\n\u8003\u8651\u7b2c\u4e00\u4e2a\u4f18\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u865a\u62df\u70b9 $node$\uff0c\u628a $node$ \u5411 $k$ \u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u7136\u540e\u628a\u5176\u5b83\u7684\u533a\u95f4\u5411\u865a\u62df\u70b9 $node$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8868\u793a\u4e0a\u8ff0\u6240\u8bf4\u7684\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u5176\u5b83\u6570\u5411\u8fd9 $k$ \u4e2a\u6570\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u4f46\u8fb9\u7684\u6761\u6570\u6211\u4eec\u8fd8\u662f\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u8003\u8651\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u3002\u6211\u4eec\u6709 $m$ \u4e2a\u533a\u95f4\uff0c\u6bcf\u4e00\u4e2a\u533a\u95f4\u6700\u591a\u6709 $k+1$ \u6bb5\u3002\u8ddf\u533a\u95f4\u6709\u5173\u7684\u8fde\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u5177\u4f53\u5c31\u662f\uff0c\u7ebf\u6bb5\u6811\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u5206\u522b\u5411\u7236\u8282\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u7136\u540e\u533a\u95f4\u5411\u865a\u62df\u70b9 $node$ \u8fde\u8fb9\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4\u5411\u865a\u62df\u70b9 $node$ \u8fde\u8fb9\u3002\u8fd9\u6837\u5411\u6bcf\u6bb5\u533a\u95f4\u6700\u591a\u6709 $\\log n$ \u6761\u8fb9\uff0c\u533a\u95f4\u7684\u603b\u6570\u662f $\\sum k$\uff0c\u7ebf\u6bb5\u6811\u5185\u90e8\u6709 $2n$ \u6761\u8fb9\uff0c\u7ed9\u5b9a\u7684 $k$ \u4e2a\u70b9\u9700\u8981\u8fde\u8fb9\uff0c\u8fd9\u6837\u8fb9\u7684\u603b\u6570\u662f $k + \\sum k \\log n + 2n$\uff0c\u53ef\u4ee5\u8fc7\u8fd9\u9053\u9898\u3002\n\n\u6700\u540e\u8bf4\u4e00\u4e0b\u5982\u4f55\u5224\u73af\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u62d3\u6251\u6392\u5e8f\u4e2d\uff0c\u628a\u6bcf\u4e00\u4e2a\u70b9 $i$ \u5982\u679c\u8bbf\u95ee\u5230\u5c31 $vis_i = 1$ \u6700\u540e\u770b\u662f\u5426\u6709\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u6709\u7684\u8bdd\u90a3\u5c31\u662f\u6709\u73af\uff0c\u6ca1\u6709\u7684\u8bdd\u76f4\u63a5\u5224\u6700\u957f\u8def\u5373\u53ef\u3002\n\n### \u603b\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#define re register\n#define rep(a,b,c)  for(re int a(b) ; a<=c ; ++a)\n#define drep(a,b,c) for(re int a(b) ; a>=c ; --a)\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch == '-') f=-1 ; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48) ; ch=getchar();}\n    return x*f;\n}\nconst int M = 5e5+10;\nconst int limit = 1e9;\nint a[M],dis[M],head[M],vis[M];\nint du[M],t[M];\nint n,s,m;\nint cnt,tot;\nstruct edge{\n    int to,nxt,w;\n}e[M*10]; //\u6ce8\u610f\u4e0d\u8981\u5f00\u5c0f\ninline void add(int u,int v,int w){ //\u52a0\u8fb9\n    e[++cnt].to = v;\n    e[cnt].w = w;\n    e[cnt].nxt = head[u];\n    head[u] = cnt;\n    du[v]++;\n}\ninline void build(int k,int l,int r){ //\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u5efa\u7acb\n    if(l == r){\n        t[k] = l; //\u53f6\u8282\u70b9\u7684\u7f16\u53f7\n        return;\n    }\n    t[k] = ++tot; //\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\n    int mid = (l+r)>>1;\n    build(k<<1,l,mid);\n    build(k<<1|1,mid+1,r);\n    add(t[k<<1],t[k],0),add(t[k<<1|1],t[k],0); //\u5de6\u53f3\u513f\u5b50\u5206\u522b\u5411\u7236\u4eb2\u8fde\u8fb9\n}\ninline void link(int k,int l,int r,int x,int y,int node){\n    if(x<=l && r<=y){\n        add(t[k],node,0); // \u8fd9\u4e2a\u533a\u95f4\u5411\u865a\u62df\u70b9node\u8fde\u8fb9\n        return;\n    }\n    int mid = (l+r)>>1;\n    if(x<=mid) link(k<<1,l,mid,x,y,node);\n    if(y>mid)  link(k<<1|1,mid+1,r,x,y,node); //\u6b63\u5e38\u64cd\u4f5c\n}\ninline void topo(){\n    queue<int> q;\n    for(re int i(1) ; i<=tot ; ++i){\n        if(!dis[i]) dis[i] = 1; //\u4ece1\u5f00\u59cb\n        if(du[i] == 0) q.push(i); //\u628a\u5165\u5ea6\u4e3a0\u7684\u70b9\u5148\u52a0\u8fdb\u961f\u5217\n    }\n    while(!q.empty()){\n        int u = q.front();\n        q.pop();\n        vis[u] = 1; //\u6807\u8bb0\u8fd9\u4e2a\u70b9\u8d70\u5230\u4e86\n        for(re int i(head[u]) ; i ; i=e[i].nxt){\n            int v = e[i].to,w = e[i].w;\n            if(dis[v] < dis[u] + w) dis[v] = dis[u] + w; //\u66f4\u65b0\u6700\u957f\u8def\n            if(a[v] && dis[v] > a[v]) printf(\"NIE\\n\"),exit(0); //\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\n            du[v]--;\n            if(!du[v]) q.push(v);\n        }\n    }\n}\nsigned main(){\n    n=read(),s=read(),m=read();\n    tot = n;\n    build(1,1,n);\n    rep(i,1,s){\n        int pos=read(),x=read();\n        a[pos] = dis[pos] = x;\n    }\n    rep(i,1,m){\n        int l=read(),r=read(),k=read();\n        tot++; //tot\u5c31\u662f\u865a\u62df\u70b9\n        int pre = l-1; //\u4e0a\u4e00\u6bb5\u533a\u95f4\u7684\u5de6\u7aef\u70b9\n        int x;\n        for(re int j(1) ; j<=k ; ++j){\n            x = read();\n            add(tot,x,1); //\u865a\u62df\u70b9\u5411x\u8fde\u8fb9\n            if(x > pre+1) link(1,1,n,pre+1,x-1,tot); //\u8fd9\u4e2a\u533a\u95f4\u6ca1\u6709\u88ab\u8fde\u8fb9\uff0c\u5c31\u8fde\u8fb9\n            pre = x; //\u66f4\u65b0pre\n        }\n        if(x < r) link(1,1,n,x+1,r,tot); //\u6700\u540e\u770b\u662f\u5426\u4f1a\u5269\u4e00\u6bb5\u533a\u95f4\u6ca1\u6709\u8fde\u8fb9\n    }\n    topo();\n    for(re int i(1) ; i<=tot ; ++i) if(!vis[i] || dis[i] > limit) { printf(\"NIE\\n\"); return 0; } //\u5224\u65e0\u89e3\n    printf(\"TAK\\n\");\n    rep(i,1,n) printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n",
        "postTime": 1660451176,
        "uid": 226367,
        "name": "glorious_dream",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3588 \u3010[POI2015]PUS\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u62d3\u6251\u6392\u5e8f + \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u8fd9\u9053\u9898\uff0c\u5148\u4e0d\u60f3\u6b63\u89e3\u7684\u8bdd\uff0c\u5199\u66b4\u529b\u7684\u65f6\u5019\u5e94\u8be5\u5f88\u5bb9\u6613\u53d1\u73b0\u6709\u7ea6\u675f\u5173\u7cfb~~\u5e9f\u8bdd~~\uff0c\u800c\u8fd9\u4e2a\u7ea6\u675f\u5173\u7cfb\u4f3c\u4e4e\u5dee\u5206\u7ea6\u675f\u5e76\u4e0d\u53ef\u505a\uff0c\u62d3\u6251\u6392\u5e8f\u8fd8\u60f3\u53ef\u4ee5\u8bd5\u8bd5\u3002\n\n\u90a3\u5c31\u62d3\u6251\u6392\u5e8f\u5efa\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u7ea6\u675f\u5173\u7cfb\uff0c\u90a3\u4e48\u4f60\u5f97\u5230\u4e86\u90e8\u5206\u7684\u5206\u3002\n\n\u90a3\u4e48\u5b83\u7684\u74f6\u9888\u5728\u54ea\u91cc\u5462\uff1f \n\n\u4f60\u53d1\u73b0\u5efa\u56fe\u662f$O(n^2)$\u7684\uff0c\u4e0d\u53ef\u63a5\u53d7\u3002\u3002\u3002\n\n\u80bf\u4e48\u529e\u5462\u3002\u3002\n\n\u6211\u4eec\u80fd\u4e0d\u80fd$O(n)$\u5efa\u56fe\u5462~~\u4f60\u5728\u60f3\u5c41\u5403~~\n\n$O(nlogn)$\u8fd8\u5dee\u4e0d\u591a\u3002\n\n\u60f3\u5230\u4e00\u4e2a\u4e1c\u897f\uff0c\u53eb\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c~~\u8fd9\u79cd\u9898\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u5c11\u89c1\u7684\u5427~~\u3002\n\n\u5c31\u662f\u6bcf\u6b21\u64cd\u4f5c\u6211\u4eec\u90fd\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5411\u8fd9\u4e2a\u65b0\u8282\u70b9\u8fde\u8fb9\uff0c\u8fd9\u6837\u5efa\u56fe\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002\n\n\u7136\u540e\u6ca1\u4e86\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#define mid ((p -> l + p -> r) >> 1)\nusing namespace std;\nconst int N = 1000005 , inf = 1e9;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , s , m , cnt;\nint mon[N] , in[N] , a[N];\nbool vis[N] , flag[N];\nstruct Edge\n{\n\tint to , dis; Edge *nxt;\n\tEdge(int to = 0,int dis = 0,Edge *nxt = NULL) : to(to) , dis(dis) , nxt(nxt) {}\n}*head[N];\ninline void add(int u,int v,int w) {head[u] = new Edge(v,w,head[u]);}\ninline bool toposort()\n{\n\tqueue<int> q;\n\tfor(int i = 1;i <= cnt;i ++) if(!in[i])\n\t{\n\t\tif(!flag[i] && i <= n) mon[i] = 1;\n\t\tq.push(i); if(mon[i] > inf || mon[i] < 1) return 0;\n\t}\n\twhile(q.size())\n\t{\n\t\tint now = q.front(); q.pop(); vis[now] = 1;\n\t\tfor(Edge *i = head[now];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tmon[to] = max(mon[to],mon[now] + i -> dis);\n\t\t\tif(a[to] && a[to] < mon[to]) return 0;\n\t\t\tif(mon[to] > inf || mon[to] < 1) return 0;\n\t\t\tif(--in[to] == 0) q.push(to);\n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i ++) if(!vis[i] || mon[i] > inf) return 0;\n\treturn 1;\n}\nstruct node\n{\n\tnode *ls , *rs;\n\tint l , r , id;\n\tnode(int l = 0,int r = 0) : l(l) , r(r) {id = 0;}\n}*root;\nvoid build(node *&p,int l,int r)\n{\n\tp = new node(l,r);\n\tif(l == r) return (void)(p -> id = l);\n\telse p -> id = ++cnt;\n\tbuild(p -> ls,l,mid); build(p -> rs,mid+1,r);\n\tadd(p -> ls -> id,p -> id,0), add(p -> rs -> id,p -> id,0); in[p -> id] += 2;\n}\nvoid chenge(node *p,int x,int y)\n{\n\tif(x <= p -> l && p -> r <= y) return (void)(add(p -> id,cnt,0) , in[cnt] ++);\n\tif(x <= mid) chenge(p -> ls,x,y);\n\tif(y > mid) chenge(p -> rs,x,y);\n}\nint main()\n{\n// \tfreopen(\"c.in\",\"r\",stdin);\n// \tfreopen(\"c.out\",\"w\",stdout);\n\tn = read(); s = read(); m = read(); cnt = n;\n\tbuild(root,1,n);\n\tfor(int i = 1 , x , y;i <= s;i ++) \n\t{\n\t\tx = read(); y = read();\n\t\ta[x] = mon[x] = y; flag[x] = 1;\n\t\tif(mon[x] > 1e9 || mon[x] < 1) return puts(\"NIE\") , 0;\n\t}\n\tfor(int _ = 1 , l , r , k , last;_ <= m;_ ++)\n\t{\n\t\tl = read(); r = read(); k = read(); last = l; cnt ++;\n\t\tfor(int i = 1 , x;i <= k;i ++)\n\t\t{\n\t\t\tx = read(); add(cnt,x,1); in[x] ++;\n\t\t\tif(last < x) chenge(root,last,x-1);\n\t\t\tlast = x + 1;\n\t\t}\n\t\tif(last <= r) chenge(root,last,r);\n\t}\n\tbool tmp = toposort();\n\tputs(tmp ? \"TAK\" : \"NIE\");\n\tif(tmp) for(int i = 1;i <= n;i ++) printf(\"%d \",mon[i]);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1570229427,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3588 \u3010[POI2015]PUS\u3011"
    },
    {
        "content": "# [P3588 \u3010[POI2015]PUS\u3011](https://www.luogu.com.cn/problem/P3588)  \n\u7ec8\u4e8e\u6709\u4e2a\u80fd\u8ba9\u6211\u4e00\u904d\u8fc7\u7684\u9898\u4e86\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b  \n\u7ed9\u5b9a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217\u548c\u5176\u4e2d\u90e8\u5206\u5df2\u77e5\u7684\u6570\uff0c\u8fd8\u6709m\u4e2a\u5927\u5c0f\u5173\u7cfb\uff1a\u533a\u95f4$[l,r]$\u4e2d\uff0c\u6709k\u4e2a\u7ed9\u5b9a\u7684\u6570\u6bd4\u5269\u4e0b\u7684$r-l+1-k$\u4e2a\u6570\u90fd\u5927  \n\u6c42\u662f\u5426\u6709\u89e3\uff0c\u6709\u89e3\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u65b9\u6848  \n\u6309\u5927\u5c0f\u5173\u7cfb\uff0c\u4ece\u5927\u7684\u6570\u5411\u5c0f\u7684\u6570\u8fde\u8fb9  \n\u76f4\u63a5\u5efa\u56fe\u80af\u5b9a\u4e0d\u884c\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u5982\u679c\u4f60\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\uff0c\u70b9[\u8fd9\u91cc](https://www.luogu.com.cn/blog/suxxsfe/xian-duan-shu-you-hua-jian-bian)  \n\u5bf9\u4e8e\u6bcf\u4e2a$[l,r]$\u7684\u533a\u95f4\uff0c\u8fd9k\u4e2a\u7ed9\u5b9a\u7684\u6570\u4f1a\u628a\u533a\u95f4\u5206\u6210$k+1$\u4e2a\u5c0f\u533a\u95f4  \n\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u8fd9k\u4e2a\u6570\u5206\u522b\u5411\u865a\u62df\u8282\u70b9\u8fde\u8fb9\uff0c\u8fd9\u4e2a\u865a\u62df\u8282\u70b9\u518d\u901a\u8fc7\u7ebf\u6bb5\u6811\u5411$k+1$\u4e2a\u5c0f\u533a\u95f4\u8fde\u8fb9  \n&nbsp;  \n\u6709\u73af\u4f1a\u51fa\u73b0\u81ea\u5df1\u5927\u4e8e\u81ea\u5df1\u7684\u60c5\u51b5\uff0c\u8981\u5148\u5224\u6389  \n\u518d\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u4e00\u79cd\u5e8f\u5217  \n\u5148\u628a\u672a\u7ed9\u51fa\u7684\u6570\u8d4b\u503c\u4e3a1e9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761u->v\u7684\u8fb9\uff0c```a[v]=min(a[v],a[u]-len[i])```\uff0c```len[i]```\u4e3a\u8fb9\u6743  \n\u7ebf\u6bb5\u6811\u4e2d\u7684\u8fb9\u662f\u865a\u6784\u7684\u53ea\u662f\u4e3a\u4e86\u8ba9\u5b83\u8054\u901a\u8d77\u6765\uff0c\u6240\u4ee5\u8fb9\u6743\u4e3a0\uff0c\u5b9e\u9645\u7684\u8fb9\u8fb9\u6743\u4e3a1\uff0c\u4e5f\u5c31\u662f```a[v]```\u81f3\u5c11\u6bd4```a[u]```\u5c111    \n\u5982\u679c\u51fa\u73b0```a[v]```\u4e3a\u7ed9\u5b9a\u7684\u6570\uff0c\u4e14```a[v]>a[u]-len[i]```\uff0c\u5219\u627e\u4e0d\u51fa\u5408\u6cd5\u65b9\u6848  \n\u5982\u679c\u51fa\u73b0\u4e86```a[v]<0```\u7684\u60c5\u51b5\uff0c\u8d85\u51fa\u9898\u76ee\u8981\u6c42\u7684\u503c\u57df\uff0c\u65e0\u89e3  \n\u5269\u4e0b\u7684\u5728\u6ce8\u91ca\u91cc  \n```cpp  \n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<queue>\n#include<iomanip>\n#include<cstring>\n#define R register\n#define EN std::puts(\"\")\n#define LL long long\ninline int read(){\n\tint x=0,y=1;\n\tchar c=std::getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') y=0;c=std::getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=std::getchar();}\n\treturn y?x:-x;\n}\nint n,s,m,nn;\nint a[2000006],should[2000006];//should[i]=1\uff0c\u8bf4\u660ei\u53f7\u6570\u5b57\u4e3a\u7ed9\u5b9a\u7684\u6570\u5b57 \nint in[2000006];\nstruct tr{\n\ttr *ls,*rs;\n\tint id;\n}dizhi[2000006],*root=&dizhi[0];\nint tot;\nint fir[2000006],to[2000006],nex[2000006],len[2000006];\nint etot;\nint vis[2000006],instack[2000006];//vis\u6807\u8bb0\u662f\u5426\u88ab\u8bbf\u95ee\uff0cinstack\u6807\u8bb0\u662f\u5426\u5728\u6808\u4e2d \nint huan;//\u8bb0\u5f55\u662f\u5426\u6709\u73af \nvoid dfs(int u){\n\tvis[u]=instack[u]=1;\n\tfor(R int i=fir[u];i;i=nex[i]){\n\t\tif(instack[to[i]]) huan=1;//\u9047\u5230\u5df2\u7ecf\u5728\u6808\u4e2d\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u73af \n\t\tif(!vis[to[i]]) dfs(to[i]);\n\t}\n\tinstack[u]=0;\n}\ninline void add(int u,int v,int x){\n\tto[++etot]=v;len[etot]=x;\n\tnex[etot]=fir[u];fir[u]=etot;\n}\nvoid build(tr *tree,int l,int r){\n\tif(l==r){tree->id=l;return;}\n\tint mid=(l+r)>>1;\n\ttree->ls=&dizhi[++tot];tree->rs=&dizhi[++tot];\n\tbuild(tree->ls,l,mid);build(tree->rs,mid+1,r);\n\ttree->id=++nn;\n//\t\tstd::printf(\"block %d %d   id:%d\\n\",l,r,tree->id);\n\tadd(tree->id,tree->ls->id,0);add(tree->id,tree->rs->id,0);\n\tin[tree->ls->id]++;in[tree->rs->id]++;\n}\nvoid addtree(tr *tree,int l,int r,int ql,int qr,int u){\n\tif(ql<=l&&r<=qr){add(u,tree->id,0);in[tree->id]++;return;}//\u5728\u7531k\u4e2a\u70b9\u5411\u865a\u62df\u8282\u70b9\u8fde\u8fb9\u65f6\u5efa\u7684\u8fb9\u8fb9\u6743\u4e3a1\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u5efa\u8fb9\u6743\u4e3a0\u7684\u8fb9\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) addtree(tree->ls,l,mid,ql,qr,u);\n\tif(qr>mid) addtree(tree->rs,mid+1,r,ql,qr,u);\n}\nstd::queue<int>q;\ninline void topo(){\n\tfor(R int i=1;i<=nn;i++) if(!a[i])a[i]=1e9;//\u5148\u628a\u4e3a\u7ed9\u5b9a\u7684\u6570\u8bbe\u4e3a\u6700\u5927 \n\tfor(R int i=1;i<=nn;i++) if(!in[i])q.push(i);\n\twhile(!q.empty()){\n\t\tR int u=q.front();q.pop();\n\t\tfor(R int i=fir[u];i;i=nex[i]){\n\t\t\tint v=to[i];\n\t\t\tif(should[v]){ \n\t\t\t\tif(a[v]>a[u]-len[i]){std::puts(\"NIE\");std::exit(0);}\n\t\t\t}\n\t\t\telse a[v]=std::min(a[v],a[u]-len[i]);\n\t\t\tif(a[v]<1){std::puts(\"NIE\");std::exit(0);}//\u8d85\u51fa\u503c\u57df \n\t\t\tif(!--in[v]) q.push(v);\n\t\t}\n\t}\n}\nint main(){\n\tnn=n=read();s=read();m=read();\n\tfor(R int i=1;i<=s;i++){\n\t\tint pos=read();\n\t\ta[pos]=read();should[pos]=1;\n\t}\n\tbuild(root,1,n);\n\twhile(m--){\n\t\tint l=read(),r=read(),k=read();nn++;\n\t\tR int last=l,x;\n\t\tfor(R int j=1;j<=k;j++){\n\t\t\tx=read();\n\t\t\tadd(x,nn,1);in[nn]++;\n\t\t\tif(x>last) addtree(root,1,n,last,x-1,nn);\n\t\t\tlast=x+1;\n\t\t}\n\t\tif(last<=r) addtree(root,1,n,last,r,nn);\n\t}\n\tfor(R int i=1;i<=n;i++)if(!vis[i]){\n\t\thuan=0;dfs(i);\n\t\tif(huan){std::puts(\"NIE\");std::exit(0);}\n\t}\n\ttopo();\n\tstd::puts(\"TAK\");\n\tfor(R int i=1;i<=n;i++) std::printf(\"%d \",a[i]);\n//\t\tEN;\n//\t\tfor(R int i=1;i<=nn;i++){\n//\t\t\tstd::printf(\"%d:\",i);\n//\t\t\tfor(R int j=fir[i];j;j=nex[j]){\n//\t\t\t\tstd::printf(\"(%d %d) \",to[j],len[j]);\n//\t\t\t}\n//\t\t\tEN;\n//\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1582289198,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3588 \u3010[POI2015]PUS\u3011\u2014\u2014\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9"
    }
]