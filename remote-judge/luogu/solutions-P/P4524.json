[
    {
        "content": "\u9898\u610f\uff1a\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u6743\u503c $a, b$\uff0c\u6c42\u5176\u4ed6\u70b9\u5230 $1$ \u53f7\u70b9\u7684\u6700\u77ed\u8def\u3002\u8fd9\u91cc\u6700\u77ed\u8def\u5b9a\u4e49\u4e3a $\\Sigma_{ai} * \\Sigma_{bi}$\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leq n, m\\leq 2000,1\\leq a_{i}\\leq b_{i} \\leq n$\u3002\n\n-----------\n\n\u770b\u5230\u8fd9\u4e48\u5c0f\u7684\u6570\u636e\u8303\u56f4\u5c31\u53ef\u4ee5\u8003\u8651\u4e71\u641e\u4e86\uff0c\u666e\u901a\u7684 Dijkstra \u601d\u60f3\u662f\u5f80\u5806\u91cc\u6254\u8fb9\uff0c\u7528\u6700\u5c0f\u7684\u6765\u66f4\u65b0\u5176\u4ed6\u7684\u3002\u6211\u4eec\u8fc1\u79fb\u4e00\u4e0b\uff0c\u65e2\u7136\u4ed6\u8981\u6c42\u4e24\u4e2a\u6743\u503c\u7684\u4e58\u79ef\uff0c\u6211\u4eec\u5c31\u628a\u4e24\u4e2a\u6743\u503c\u4e58\u79ef\u6254\u5230\u5806\u91cc\uff0csigma \u4e5f\u597d\u529e\uff0c\u53ea\u8981\u5728\u904d\u5386\u51fa\u8fb9\u7684\u65f6\u5019\u628a\u4e24\u4e2a\u503c\u5206\u522b\u52a0\u4e0a\u518d\u6254\u8fdb\u5806\u91cc\u5c31\u884c\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u4e48\u4fdd\u8bc1\u6bcf\u6b21\u62ff\u6765\u66f4\u65b0\u7684\u70b9\u662f **\u6709\u6548** \u7684\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u5f53\u524d\u79ef\u7d2f\u7684\u503c\u4e3a $a, b$\uff0c \u73b0\u5728\u8981\u67e5\u770b $c, d$ \u662f\u5426\u80fd\u4ea7\u751f\u6709\u6548\u66f4\u65b0\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\u3002\n\n1.$a > c$ && $b > d$. \n\n2.$a \\leq c$ && $b > d$. \n\n3.$a > c$ && $b \\leq d$.\n\n\u5373\u89c2\u5bdf\u5230\u53ea\u8981\u6709\u4e00\u8005\u5c0f\u90fd\u662f\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u6709\u5f88\u591a\u7ec4\u5408\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u7528 set \u628a\u4ed6\u4eec\u90fd\u8bb0\u4e0b\u6765\uff08\u8fd9\u91cc\u7684\u4f5c\u7528\u662f\u6765\u7528\u8fd9\u4e9b\u5224\u65ad\u4e4b\u540e\u7684\u70b9\u662f\u5426\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\uff09\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5230\u5bf9\u5e94\u7684 set \u91cc\u9762\u627e\u662f\u5426\u6709\u4e24\u8005\u90fd\u6bd4\u4ed6\u5c0f\u7684\uff0c\u4f46\u662f\u76f4\u63a5\u904d\u5386\u6240\u6709\u5143\u7d20\u4f1a TLE\uff0c\u53ea\u80fd\u62ff\u5230 30pts\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u4e0b\u5206\u6bb5\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5c06\u4e24\u4e2a\u5173\u952e\u5b57\u4ee5\u5176\u4e2d\u4e00\u4e2a\u5206\u6bb5\uff0c\u7136\u540e\u5f53\u65b0\u8fdb\u6765\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u503c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u627e\u5230\u5b83\u6240\u5904\u7684\u90a3\u4e00\u6bb5(\u5982\u679c\u5b83\u662f\u672c\u6bb5\u7b2c\u4e00\u4e2a\u5c31\u627e\u5230\u524d\u4e00\u6bb5\uff09\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528 lower_bound \u5b9e\u73b0\uff0c\u7136\u540e\u5411\u540e\u904d\u5386\u53bb\u5220\u9664\u7b2c\u4e8c\u5173\u952e\u5b57\u6bd4\u4ed6\u5927\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5df2\u7ecf\u4e0d\u53ef\u80fd\u5bf9\u5224\u65ad\u8d77\u6709\u6548\u4f5c\u7528\u4e86\u3002\n\n\u5728\u7ed3\u675f\u5b8c\u540e\uff0c\u770b\u5f53\u524d\u7684\u8fed\u4ee3\u5668\u7684\u503c\u662f\u5426\u6bd4\u5224\u65ad\u7684\u503c\u5927\uff0c\u5982\u679c\u5c0f\u8bf4\u660e\u8fdb\u6765\u5224\u65ad\u7684\u8fd9\u4e2a\u503c\u65e0\u7528\uff0c\u5426\u5219\u628a\u5b83\u6254\u8fdb\u53bb\uff0c\u7136\u540e\u9000\u51fa\u53bb\u66f4\u65b0\u3002\n\n\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u62ff\u5230 96pts\u3002\u5f00 O2 \u53ef\u4ee5AC\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u6ee1\u610f\u3002T \u4e00\u4e2a\u70b9\u7684\u539f\u56e0\u662f ans \u88ab\u8fdb\u884c\u91cd\u590d\u65e0\u6548\u66f4\u65b0\u3002\u8003\u8651\u5230\u5806\u7684\u6027\u8d28\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u4e0b **\u7b2c\u4e00\u6b21\u66f4\u65b0\u67d0\u4e2a ans** \u66f4\u65b0\u4e86\u51e0\u6b21\uff0c\u5224\u65ad\u7136\u540e\u9000\u51fa\u5373\u53ef\u3002\n\n\u90e8\u5206\u7ec6\u8282\u81ea\u5df1\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\n#define int long long\nusing namespace std;\n\ninline int read(){\n\tregister int x = 0, f = 1; register char ch = getchar();\n\tfor(; ch > '9' || ch < '0'; ch = getchar()) if(ch == '-') f = -1;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar()) x = (x << 1) + (x << 3) + (ch ^ '0');\n\treturn x * f;\n}\n\nconst int N = 2e3 + 10;\n\nint n, m;\nint rt;\nint cnt = 1;\n\nint head[N], e[N << 1], Next[N << 1], idx, val1[N << 1], val2[N << 1];\ninline void add(int a, int b, int c, int d){\n\te[++ idx] = b; Next[idx] = head[a]; head[a] = idx; val1[idx] = c; val2[idx] = d;\n}\n\nint fa[N];\n\nstruct node{\n\tlong long pos, t, c;\n\tinline bool operator < (const node &a) const {\n\t\treturn (a.t * a.c < t * c);\n\t}\n};\n\nstruct Node{\n\tlong long t, c;\n\tinline bool operator < (const Node &a) const {\n\t\treturn ((a.t == t) ? (a.c > c) : (a.t > t)); // \u6ce8\u610f\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 \n\t}\n};\n\nint find(int x){\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n}\n\npriority_queue<node> q;\nset<Node> st[N];\n\nbool check(int x, Node u){\n\tset<Node> :: iterator it;\n\tfor(it = st[x].lower_bound(u); it != st[x].end() && it -> c >= u.c; it ++ ){\n\t\tset<Node> :: iterator itt = it; // \u76f4\u63a5\u5220\u8fed\u4ee3\u5668\u4f1aRE \n\t\tit ++;\n\t\tst[x].erase(itt);\n\t}\n\tif(it != st[x].begin()){\n\t\t-- it;\n\t\tif(it -> c < u.c) return false;\n\t}\n\tst[x].insert(u); return true;\t\n}\n\nint vis[N];\nlong long ans[N], tcnt;\n\nvoid dij(){\n\tq.push((node){1, 0, 0});\n\twhile(!q.empty()){\n\t\tnode now = q.top(); q.pop();\n\t\tif(!check(now.pos, (Node){now.t, now.c})) continue; // \u5728\u8fd9\u91cc\u68c0\u67e5 \n\t\tif(!vis[now.pos]) vis[now.pos] = 1, ans[now.pos] = now.t * now.c, ++ tcnt;\n\t\tif(tcnt == cnt) return;\n\t\tfor(int i = head[now.pos]; i; i = Next[i]){\n\t\t\tint j = e[i];\n\t\t\tq.push((node){j, now.t + val1[i], now.c + val2[i]});\n\t\t}\n\t}\n}\n\nsigned main(){\n\tn = read();\n\tm = read();\n\tfor(int i = 1; i <= n; ++ i) fa[i] = i, ans[i] = -1;\n\tfor(int i = 1; i <= m; ++ i){\n\t\tint a = read(), b = read(), c = read(), d = read();\n\t\tadd(a, b, c, d); add(b, a, c, d);\n\t\tif(find(a) != find(b)) fa[fa[a]] = fa[b];\n\t}\n\trt = find(1);\n\tfor(int i = 2; i <= n; ++ i) if(find(i) == rt) ++ cnt; // \u56fe\u53ef\u80fd\u4e0d\u8fde\u901a \n\tdij();\n\tfor(int i = 2; i <= n; ++ i) printf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1666219438,
        "uid": 307940,
        "name": "aaaaaaaawsl",
        "ccfLevel": 4,
        "title": "P4524 [COCI2017-2018#4] Ceste \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e4b\u524d\u90a3\u7bc7\u9898\u89e3\u662f\u5047\u7684\uff0c\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u9632\u6b62\u90a3\u7bc7\u5047\u9898\u89e3\u8bef\u5bfc\u5927\u5bb6\u3002\u4e0b\u9762\u7684\u7b97\u6cd5\u6765\u81ea300iq\u3002\u6709\u4e00\u4e9b\u7ed3\u8bba\u6211\u4e5f\u4e0d\u4f1a\u8bc1\u660e\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u7237\u6765\u53d1\u9898\u89e3\u628a\u6211\u8fd9\u7bc7\u9898\u89e3\u7206\u8e29\u3002\n\n\u9996\u5148\uff0c\u4e00\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u60f3\u5230[P5540](https://www.luogu.org/problem/P5540)\u548c[P3236](https://www.luogu.org/problem/P3236)\u3002\u7136\u800c\u8fd9\u9898\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff1a\u4e00\u4e2a\u51b3\u7b56\u70b9\u5bf9\u5176\u4e2d\u4e00\u4e2a\u9876\u70b9\u597d\u5e76\u4e0d\u4ee3\u8868\u5b83\u5bf9\u53e6\u4e00\u4e2a\u9876\u70b9\u597d\uff0c\u4e8e\u662f\u4f3c\u4e4e\u5fc5\u987b\u8dd1$n-1$\u904d\u4e4b\u524d\u7684\u7b97\u6cd5\u3002\u53ef\u4ee5\u62ff\u523056\u5206\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\u8dd1\u4e86\u592a\u591a\u6b21\u6700\u77ed\u8def\uff08\u5728\u6d4b\u8bd5\u70b9\\#14\u6211\u7684\u4ee3\u7801\u8dd1\u4e861e5\u6b21\u2026\u2026\uff09\u3002\n\n\u91cd\u65b0\u8003\u8651\u4e00\u4e0b\u3002\n\n**\u3010\u7ed3\u8bba\u3011\uff1a**\u9996\u5148\uff0c\u5bf9\u4e8e\u9876\u70b9$v$\u6765\u8bf4\uff0c\u90a3\u6761\u4f7f\u5f97$\\sum t\\cdot \\sum c$\u6700\u5c0f\u7684\u8def\u5f84$g$\u80af\u5b9a\u6ee1\u8db3\uff1a\u5b58\u5728\u4e00\u4e2a\u5b9e\u6570$0\\le x\\le 1$\u4f7f\u5f97\uff0c\u5982\u679c\u628a\u8fb9\u6743\u8bbe\u4e3a$xt[i]+(1-x)c[i]$\u540e\uff0c\u8fd9\u6761\u8def\u5f84\u662f\u8fd9\u79cd\u8fb9\u6743\u4e0b\u7684\u6700\u77ed\u8def\u3002\n\n\u5982\u4f55\u8bc1\u660e\uff1f\u5728\u65b0\u8fb9\u6743\u4e0b\u7684\u6700\u77ed\u8def\u5c31\u662f$x\\sum t+(1-x)\\sum c$\u6700\u5c0f\u7684\u8def\u5f84\u3002\u53d6$x=\\dfrac{gc}{gt+gc}$\uff0c\u5982\u679c$g$\u5e76\u4e0d\u5728\u8fd9\u4e2a$x$\u4e0b\u6700\u77ed\uff0c\u5373\u5b58\u5728$h$\u6ee1\u8db3\n\n$$2\\dfrac{gt\\cdot gc}{gt+gc}>\\dfrac{ht\\cdot gc+hc\\cdot gt}{gt+gc}$$\n\n$$(ht-gt)(hc-gc)>ht\\cdot hc-gt\\cdot gc$$\n\n\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- \u5982\u679c$ht<gt,hc<gc$\u3002\u90a3\u4e48$h$\u663e\u7136\u6bd4$g$\u4f18\uff0c\u77db\u76fe\u3002\n\n- \u5982\u679c$ht>gt,hc>gc$\u3002\u90a3\u4e48$h$\u663e\u7136\u4e0d\u662f$x$\u4e0b\u7684\u6700\u77ed\u8def\uff0c\u77db\u76fe\u3002\n\n- \u5982\u679c\u90fd\u4e0d\u662f\uff0c\u90a3\u4e48\u6709$(ht-gt)(hc-gc)<0$\uff0c\u4e8e\u662f\u6839\u636e\u4e0a\u5f0f\u6709$ht\\cdot hc<gt\\cdot gc$\uff0c$h$\u6bd4$g$\u4f18\uff0c\u77db\u76fe\u3002\n\n\u4e8e\u662f\u539f\u547d\u9898\u6210\u7acb\u3002\u25a1\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u73b0\u5728\u7684\u76ee\u6807\u5c31\u662f\uff1a\u627e\u5230\u8fd9\u4e2a$x$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u521a\u624d\u7684\u8bc1\u660e\u548cP5540\uff0cP3236\u90a3\u4e2a\u51e0\u4f55\u65b9\u6cd5\u5f88\u50cf\uff0c\u5c24\u5176\u662f$\\frac{gc}{gt+gc}$\u5728P5540\uff0cP3236\u4e2d\u91cd\u8dd1\u6700\u5c0f\u751f\u6210\u6811/KM\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u4e5f\u6709\u7c7b\u4f3c\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u7136\u800c\u6211\u4eec\u53d1\u73b0\u4e4b\u524d\u7684\u90a3\u4e2a\u65b9\u6cd5\u4f1a\u8dd1\u592a\u591a\u6b21\u6700\u77ed\u8def\u4e8e\u662f\u6548\u7387\u5dee\u5f97\u5413\u4eba\uff0c\u4e8e\u662f\u63a5\u4e0b\u6765\u8003\u8651\u4e00\u4ef6\u4e8b\u60c5\uff1a\n\n**\u4ec0\u4e48\u662f\u201c\u6709\u7528\u201d\u7684$x$\uff1f**\n\n\u5982\u679c\u4e00\u4e2a\u65b0\u7684$x'$\uff0c\u751a\u81f3\u4e0d\u80fd\u4f7f\u4efb\u4f55\u4e00\u4e2a$u$\u7684\u7b54\u6848\u66f4\u65b0\uff0c\u90a3\u4e48\u5b83\u5b8c\u5b8c\u5168\u5168\u662f\u65e0\u7528\u7684\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u8ba4\u4e3a\uff1a\n\n\u4e00\u4e2a\u4f7f\u5f97$dis[u]+x't(u,v)+(1-x')c(u,v)<dis[v]$\u7684$x'$\u662f\u6709\u7528\u7684\u3002\uff08$dis[u],dis[v]$\u90fd\u662f\u5bf9\u4e8e\u4e0a\u4e00\u4e2a$x$\u800c\u8a00\u7684\uff09\n\n\uff08\u4e3a\u4ec0\u4e48\u7528$x$\u4e0b\u7684\u8ddd\u79bb$+x'$\u4e0b\u7684\u8fb9\u6743\uff1f\u6b22\u8fce\u6765\u8865\u5145\u89e3\u91ca\u3002\u636e\u8bf4\u662f\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4f46\u6211\u4e0d\u4f1aorz\uff09\n\n\u4e8e\u662f\u6211\u4eec\u4e0d\u65ad\u627e\u6bd4\u5f53\u524d$x$\u5927\u4e14\u6700\u5c0f\u7684$x'$\uff0c\u91cd\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662f\u4eba\u4e11\u5e38\u6570\u5927\uff0c\u5438\u4e86\u6c27\u624d\u8fc7\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define db double\nusing namespace std;\n\nint N,M;\n\nint lnk[2005];\nint pre[4005],tgt[4005],cnt;\nint T[2005],C[2005];\ndb val[4005];\nvoid add_E(int u,int v){pre[++cnt]=lnk[u],tgt[cnt]=v,lnk[u]=cnt;}\n\nint disT[2005],disC[2005];\nll ANS[2005];\ndb dis[2005];\nset<pair<int,db> > q;\nvoid Dijkstra(){\n\tfor(int i=2;i<=N;i++) dis[i]=1e20;\n\tdis[1]=0;q.insert(make_pair(1,0.0));\n\twhile(!q.empty()){\n\t\tint u=q.begin()->first;\n\t\tq.erase(q.begin());\n\t\tfor(int e=lnk[u];e;e=pre[e])\n\t\t\tif(dis[u]+val[e]<dis[tgt[e]]){\n\t\t\t\tq.erase(make_pair(tgt[e],dis[tgt[e]]));\n\t\t\t\tdis[tgt[e]]=dis[u]+val[e];\n\t\t\t\tdisT[tgt[e]]=disT[u]+T[(e+1)>>1];\n\t\t\t\tdisC[tgt[e]]=disC[u]+C[(e+1)>>1];\n\t\t\t\tq.insert(make_pair(tgt[e],dis[tgt[e]]));\n\t\t\t}\n\t}\n\tfor(int i=2;i<=N;i++) if(dis[i]<1e19)\n\t\tif(1LL*disT[i]*disC[i]<ANS[i]) ANS[i]=1LL*disT[i]*disC[i];\n}\n\nvoid init_G(db x){\n\tfor(int i=1;i<=M;i++) val[2*i-1]=val[2*i]=x*T[i]+(1-x)*C[i];\n}\n\nint main(){\n\tmemset(ANS,0x3f,sizeof(ANS));\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=1;i<=M;i++){\n\t\tint u,v;scanf(\"%d%d%d%d\",&u,&v,&T[i],&C[i]);\n\t\tadd_E(u,v);add_E(v,u);\n\t}\n\t\n\tdb x=0;\n\twhile(1){\n\t\tinit_G(x);Dijkstra();\n\t\tdb new_x=1;\n\t\tfor(int i=1;i<=M;i++){\n\t\t\tint v=tgt[2*i-1],u=tgt[2*i],t=T[i],c=C[i];\n\t\t\tif(ANS[v]!=ANS[0]){\n\t\t\t\tdb tmp_x=(db)(disC[v]-disC[u]-C[i])/(db)(disT[u]+T[i]-disC[u]-C[i]-disT[v]+disC[v]);\n\t\t\t\tif(x<tmp_x&&tmp_x<=new_x) new_x=tmp_x;\n\t\t\t}\n\t\t\tif(ANS[u]!=ANS[0]){\n\t\t\t\tdb tmp_x=(db)(disC[u]-disC[v]-C[i])/(db)(disT[v]+T[i]-disC[v]-C[i]-disT[u]+disC[u]);\n\t\t\t\tif(x<tmp_x&&tmp_x<=new_x) new_x=tmp_x;\n\t\t\t}\n\t\t}\n\t\tif(x==new_x) break;\n\t\tx=new_x;\n\t}\n\t\n\tfor(int i=2;i<=N;i++)\n\t\tif(ANS[i]==ANS[0]) printf(\"-1\\n\");\n\t\telse printf(\"%lld\\n\",ANS[i]);\n\t\n\treturn 0;\n}\n```\n\n~~\u8bdd\u8bf4\u4e4b\u524d\u4ee3\u7801\u653e\u7684\u662f300iq\u7684\u7ed3\u679c\u88ab\u62d2\u4e86\u2026\u2026\u9898\u89e3\u5ba1\u6838\u771f\u7684\u795e\u5947~~\n",
        "postTime": 1570492811,
        "uid": 58567,
        "name": "x\u4e49x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4524 \u3010[COCI2017-2018 Contest4] Ceste\u3011"
    },
    {
        "content": "### \u7b80\u5316\u9898\u610f\r\n\r\n\u7ed9\u5b9a\u4e00\u4e2a\u6709 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(a, b)$\uff0c\u6c42\u4ece $1$ \u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002\r\n\r\n\u5176\u4e2d $s$ \u5230 $t$ \u7684\u8def\u5f84\u6743\u503c\u8bb0\u4e3a $\\sum{a_i} \\times \\sum{b_i}$\u3002\r\n\r\n### \u9898\u76ee\u5206\u6790\r\n\r\n\u6700\u77ed\u8def\u3002\r\n\r\n\u8003\u8651\u5355\u6e90\u6700\u77ed\u8def\uff08\u8fd9\u91cc\u8bf4\u7684\u662f `dijkstra`\uff09\u7684\u6b65\u9aa4\uff1a\u627e\u5230\u4e00\u4e2a\u6709\u6548\u7684\u70b9 $a$\uff0c\u7136\u540e\u5bf9\u5b83\u5468\u56f4\u7684\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff08$d_a + w_i < d_b$\uff09\uff0c\u90a3\u4e48\u66f4\u65b0 $b$ \u4e14\u5165\u4f18\u5148\u961f\u5217\u3002\r\n\r\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u54ea\u4e9b\u70b9\u4f1a\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5f53\u524d\u8fd9\u4e2a\u70b9\u662f\u5426\u5e94\u8be5\u5165\u961f\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e0b\u9762\u7684\u6027\u8d28\uff1a\r\n\r\n > \u5bf9\u4e8e\u70b9 $a$\uff0c\u8bbe\u53ef\u4ee5\u5230\u8fbe $a$ \u7684\u8def\u5f84\u96c6\u5408\u4e3a $S$\uff0c\u5f53\u524d\u6709\u5230 $a$ \u7684\u8def\u5f84\u957f\u5ea6 $(d_a, d_b)$\u3002\r\n > \r\n > 1. $\\exists (S_a, S_b), S_a < d_a, S_b < d_b$\uff0c\u5219 $(d_a, d_b)$ \u4e00\u5b9a\u4e0d\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\u3002\r\n >\r\n > 2. $\\forall(S_a, S_b), S_a > d_b, S_b > d_b$\uff0c\u5219 $(d_a, d_b)$ \u4e00\u5b9a\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\u3002\r\n \r\n \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u70b9\u641e\u4e00\u4e2a `set`\uff0c\u5728\u91cc\u9762\u5b58\u4e0a\u6bcf\u4e2a\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u6743\u503c\u3002\u7136\u540e\u6bcf\u5f53\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u957f\u5ea6\uff0c\u5c31\u53bb\u91cc\u9762\u67e5\u4e00\u67e5\uff0c\u770b\u770b\u6ee1\u4e0d\u6ee1\u8db3\u5373\u53ef\u3002\r\n \r\n \u611f\u89c9\u590d\u6742\u5ea6\u6709\u70b9\u7384\u5b66\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6570\u636e\u592a\u5f31\u4e86\u3002\u5982\u679c\u6570\u636e\u52a0\u5f3a\u4e86\uff0c\u6211\u7acb\u5373\u5220\u9898\u89e3\u3002\r\n \r\n### \u53c2\u8003\u4ee3\u7801\r\n\r\n```\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <queue>\r\n#include <ctime>\r\n#include <set>\r\n#define itset set<PLL>::iterator\r\n\r\nusing namespace std;\r\n\r\nusing LL = long long;\r\nusing PII = pair<int, int>;\r\nusing PLL = pair<LL, LL>;\r\n\r\nconst int N = 2010, M = N << 1;\r\nconst LL INF = 1e12;\r\nLL dist[N]; int n, m;\r\nset<PLL> s[N];\r\nbool st[N];\r\n\r\nnamespace Edges {\r\n\tint h[N], e[M], ne[M], idx; PLL w[M];\r\n\tvoid add(int a, int b, LL w1, LL w2) {\r\n\t\te[ ++ idx] = b, ne[idx] = h[a], h[a] = idx;\r\n\t\tw[idx] = {w1, w2};\r\n\t}\r\n} using namespace Edges;\r\n\r\nstruct Node {\r\n\tint ver; LL a, b;\r\n\tbool operator < (const Node &tmp)const {\r\n\t\treturn tmp.a * tmp.b < a * b;\r\n\t}\r\n};\r\n\r\nbool check(int u, LL a, LL b) {\r\n\titset it = s[u].upper_bound({a, b});\r\n\tif (it != s[u].begin()) {\r\n\t\tit -- ;\r\n\t\tif (it -> second < b) return false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nvoid dij() {\r\n\tpriority_queue<Node, vector<Node>> q;\r\n\tfill(dist + 1, dist + n + 1, INF);\r\n\ts[1].insert({0, 0}); dist[1] = 0;\r\n\tq.push({1, 0, 0});\r\n\t\r\n\twhile (q.size()) {\r\n\t\tauto t = q.top(); q.pop();\r\n\t\tint ver = t.ver, a = t.a, b = t.b;\r\n\t\t\r\n\t\tfor (int i = h[ver]; i; i = ne[i]) {\r\n\t\t\tint j = e[i];\r\n\t\t\tif (!check(j, a + w[i].first, b + w[i].second)) continue;\r\n\t\t\ts[j].insert({a + w[i].first, b + w[i].second});\r\n\t\t\tdist[j] = min(dist[j], (a + w[i].first) * (b + w[i].second));\r\n\t\t\tq.push({j, a + w[i].first, b + w[i].second});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tscanf(\"%d%d\", &n, &m);\r\n\twhile (m -- ) {\r\n\t\tint a, b; LL w1, w2;\r\n\t\tscanf(\"%d%d%lld%lld\", &a, &b, &w1, &w2);\r\n\t\tadd(a, b, w1, w2), add(b, a, w1, w2);\r\n\t}\r\n\t\r\n\tdij();\r\n\t\r\n\tfor (int i = 2; i <= n; i ++ )\r\n\t\tprintf(\"%lld\\n\", dist[i] == INF ? -1 : dist[i]);\r\n\t\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1667570751,
        "uid": 519384,
        "name": "Link_Cut_Y",
        "ccfLevel": 0,
        "title": "P4524 [COCI2017-2018#4] Ceste \u9898\u89e3"
    }
]