[
    {
        "content": "\u5148\u8d34blog\uff1a[stone41123](http://blog.csdn.net/stone41123/article/details/78167288)\n\n\u6b64\u9898\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1.\u67e5\u8be2\u6811\u4e0a\u4e24\u70b9\u95f4\u6743\u503c\u7b2ck\u5c0f\n\n2.\u8fde\u63a5\u4e24\u68f5\u6811\n\n\u9650\u5236\u6761\u4ef6\uff1a\u5f3a\u5236\u5728\u7ebf\n\n\u770b\u5230\u7b2ck\u5c0f\u5927\u5bb6\u60f3\u5230\u7684\u80af\u5b9a\u662f\u4e3b\u5e2d\u6811\uff0c\u53ef\u662f\u8fde\u8fb9\u53c8\u8ba9\u5927\u5bb6\u60f3\u5230\u4e86LCT\n\n\u6211\u4eec\u9009\u62e9\u4f7f\u7528\u4e3b\u5e2d\u6811\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u6211\u4eec\u80af\u5b9a\u662f\u8981\u820d\u5f03\u4e24\u79cd\u64cd\u4f5c\u4e2d\u7684\u4e00\u79cd\uff0c\u8ba9\u5b83\u53d8\u6162\uff0c\u53e6\u4e00\u4e2a\u5c31\u5feb\u4e86\u3002\n\n\u7136\u800c\uff0c\u7b2ck\u5c0f\u663e\u7136\u6ca1\u6709\u4ec0\u4e48\u4f18\u5316\u7684\u4f59\u5730\uff0c\u53ef\u662f\u8fde\u63a5\u4e24\u68f5\u6811\u663e\u7136\u5c31\u662f\u5408\u5e76\u4e24\u68f5\u6811\n\n\u5408\u5e76\uff01\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u542f\u53d1\u5f0f\u5408\u5e76\uff01\u5b83\u53ef\u4ee5\u4f18\u5316\u5408\u5e76\u5230$O(logn)$\uff0c\u4e00\u4e2alog\u7684\u6d88\u8017\u8fd8\u662f\u53ef\u4ee5\u627f\u53d7\u7684\u3002\n\n\u4e8e\u662f\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u68f5\u6811\u7684\u5927\u5c0f\uff0c\u5408\u5e76\u7684\u65f6\u5019\u628a\u5c0f\u7684\u63a5\u5230\u5927\u7684\u4e0a\u9762\u53bb\uff0c\u5408\u5e76\u7684\u65f6\u5019\u6211\u4eecdfs\u66b4\u529b\u4fee\u6539\uff0c\u7528\u7236\u8282\u70b9\u91cd\u5efa\u6bcf\u4e2a\u8282\u70b9\u7684\u4e3b\u5e2d\u6811\uff0c\u5e76\u4e14\u66f4\u65b0\u6bcf\u4e2a\u8282\u70b9\u7684\u500d\u589e\u6570\u7ec4\uff08st\u8868\uff09\u3002\n\n\u66f4\u65b0\u500d\u589e\u6570\u7ec4\u8fd9\u91cc\u8fd8\u662f\u6709\u6280\u5de7\u7684\uff0c\u6211\u4eec\u4e0d\u9700\u8981dfs\u5b8c\u4e86\u624d\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8fb9dfs\u4e00\u8fb9\u6539\uff1a\n\n```cpp\nvoid dfs(int x,int father,int rt){\n    //\u8fd9\u4e00\u6bb5\n    st[x][0]=father;\n    for(int k=1;k<=16;k++){\n        st[x][k]=st[st[x][k-1]][k-1];\n    }\n    //\u4e0a\u9762\n    son[rt]++;\n    dep[x]=dep[father]+1;\n    fa[x]=father;\n    vis[x]=1;\n    insert(root[x],root[father],1,size,Hash(a[x]));\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(u==father)continue;\n        dfs(u,x,rt);\n    }\n}\n```\n\u8fd9\u5c31\u662f\u5982\u4f55\u5408\u5e76\u3002\n\n\u7136\u540e\u6211\u4eec\u6765\u8ba8\u8bba\u67e5\u8be2\u3002\n\n\u4e3b\u5e2d\u6811\u5927\u5bb6\u80af\u5b9a\u90fd\u5199\u8fc7\uff0c\u4f46\u662f\u5927\u90e8\u5206\u4eba\u5199\u7684\u90fd\u662f\u9488\u5bf9\u6570\u7ec4\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u5728\u6811\u4e0a\u5efa\u4e3b\u5e2d\u6811\u3002\n\n\u6bcf\u4e00\u9897\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u662f\u5b83\u5230\u6839\u8282\u70b9\u7684\u6570\u5b57\u4fe1\u606f\uff0c\u4e8e\u662f\u7c7b\u4f3c\u4e8e\u539f\u672c\u7684\u4e3b\u5e2d\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4e2a\u8282\u70b9\u548c\u5b83\u7684\u7236\u4eb2\u8282\u70b9\u7ef4\u62a4\u7684\u4e3b\u5e2d\u6811\u6ca1\u6709\u592a\u5927\u7684\u53d8\u5316\uff0c\u6700\u591a\u53ea\u4f1a\u53d8\u5316logn\u4e2a\u70b9\uff0c\u4e8e\u662f\u6211\u4eecdfs\u65f6\u53ef\u4ee5\u5229\u7528\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u7684\u4e3b\u5e2d\u6811\u6765\u5efa\u7acb\u5b83\u7684\u4e3b\u5e2d\u6811\u3002\n\n\u67e5\u8be2\u65f6\u600e\u4e48\u505a\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u56db\u4e2a\u53d8\u91cf\uff0c\u4ece\u56db\u4e2a\u8282\u70b9\u540c\u65f6\u67e5\u8be2\n\n\u5047\u8bbe\u67e5\u8be2\u8282\u70b9\u5206\u522b\u662f$x,y$\uff0c\u90a3\u5b83\u4eec\u5206\u522b\u5c31\u662f\uff1a$x,y,lca(x,y),father(lca(x,y))$\n\n\u6bcf\u6b21\u4e3b\u5e2d\u6811\u64cd\u4f5c\u65f6\uff0c\u5c31\u662f\u8fd9\u6837\uff1a\n\n```cpp\nint query(int x,int y,int pre1,int pre2,int l,int r,int k){\n    if(l==r)return b[l];\n    int lsize=t[t[x].ls].size+t[t[y].ls].size-t[t[pre1].ls].size-t[t[pre2].ls].size;\n    int mid=(l+r)>>1;\n    if(k<=lsize)return query(t[x].ls,t[y].ls,t[pre1].ls,t[pre2].ls,l,mid,k);\n    else return query(t[x].rs,t[y].rs,t[pre1].rs,t[pre2].rs,mid+1,r,k-lsize);\n}\n```\n\u5efa\u6811\u548c\u539f\u6765\u4e00\u6837\uff1a\n\n```cpp\nvoid insert(int &now,int pre,int l,int r,int x){\n    now=++cnt;\n    t[now]=t[pre];\n    t[now].size++;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    if(x<=mid)insert(t[now].ls,t[pre].ls,l,mid,x);\n    else insert(t[now].rs,t[pre].rs,mid+1,r,x);\n}\n```\n\u6bcf\u4e2a\u6839\u8282\u70b9\u8fd8\u8981\u5148build\u4e00\u4e0b\uff1a\n\n```cpp\nvoid build(int &now,int l,int r){\n    now=++cnt;\n    t[now].size=0;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    build(t[now].ls,l,mid);\n    build(t[now].rs,mid+1,r);\n}\n```\n\u5269\u4e0b\u7684\u500d\u589elca\u7684\u6211\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n\u8fd8\u6709\u5c31\u662f\u8fd9\u4e2a\u9898\u9700\u8981\u79bb\u6563\u5316\uff0c\u4e5f\u5f88\u6b63\u5e38\u3002\n\n\u8fd8\u6709\u5c31\u662f\u4e00\u4e2a\u5751\u70b9\uff0c\u90a3\u4e2atestcase\u662f\u7f16\u53f7\uff01\u4e0d\u662f\u7ec4\u6570\uff01\u6211\u88ab\u8fd9\u4e2a\u5751\u523010\u5206\u3002\u3002\u3002\n\n\u5269\u4e0b\u5c31\u662f\u5c3d\u91cf\u4f18\u5316\u4f18\u5316\u5e38\u6570\uff0c\u5e38\u6570\u4e0d\u8981\u592a\u5927\u3002\n\n\u8fd8\u8981\u5f00\u591f\u7a7a\u95f4\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0;char ch=' ';int f=1;\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nstruct edge{\n    int to,next;\n}e[320001];\nint T,n,m,q,tot;\nint a[80001];\nint fa[80001];\nint son[80001];\nint head[80001];\ninline void addedge(int x,int y){\n    e[++tot].to=y;e[tot].next=head[x];head[x]=tot;\n}\nstruct Node{\n    int size,ls,rs;\n}t[80001*600];\nint cnt;\nint root[80001];\nvoid build(int &now,int l,int r){\n    now=++cnt;\n    t[now].size=0;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    build(t[now].ls,l,mid);\n    build(t[now].rs,mid+1,r);\n}\nvoid insert(int &now,int pre,int l,int r,int x){\n    now=++cnt;\n    t[now]=t[pre];\n    t[now].size++;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    if(x<=mid)insert(t[now].ls,t[pre].ls,l,mid,x);\n    else insert(t[now].rs,t[pre].rs,mid+1,r,x);\n}\nint b[80001];\nint size;\nint query(int x,int y,int pre1,int pre2,int l,int r,int k){\n    if(l==r)return b[l];\n    int lsize=t[t[x].ls].size+t[t[y].ls].size-t[t[pre1].ls].size-t[t[pre2].ls].size;\n    int mid=(l+r)>>1;\n    if(k<=lsize)return query(t[x].ls,t[y].ls,t[pre1].ls,t[pre2].ls,l,mid,k);\n    else return query(t[x].rs,t[y].rs,t[pre1].rs,t[pre2].rs,mid+1,r,k-lsize);\n}\ninline int Hash(int x){\n    return lower_bound(b+1,b+size+1,x)-b;\n}\nint find(int x){\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nint st[80001][17];\nint dep[80001];\nint vis[80001];\nvoid dfs(int x,int father,int rt){\n    st[x][0]=father;\n    for(int k=1;k<=16;k++){\n        st[x][k]=st[st[x][k-1]][k-1];\n    }\n    son[rt]++;\n    dep[x]=dep[father]+1;\n    fa[x]=father;\n    vis[x]=1;\n    insert(root[x],root[father],1,size,Hash(a[x]));\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(u==father)continue;\n        dfs(u,x,rt);\n    }\n}\ninline int getlca(int x,int y){\n    if(x==y)return x;\n    if(dep[x]>dep[y])swap(x,y);\n    for(int k=16;k>=0;k--){\n        if(dep[st[y][k]]>=dep[x]){\n            y=st[y][k];\n        }\n    }\n    if(x==y)return x;\n    for(int k=16;k>=0;k--){\n        if(st[x][k]!=st[y][k]){\n            x=st[x][k];\n            y=st[y][k];\n        }\n    }\n    return st[x][0];\n}\nint main(){\n    T=read();\n    T=1;\n    while(T--){\n        memset(head,0,sizeof(head));\n        memset(dep,0,sizeof(dep));\n        memset(vis,0,sizeof(vis));\n        memset(st,0,sizeof(st));\n        memset(son,0,sizeof(son));\n        tot=0;\n        cnt=0;\n        n=read();m=read();q=read();\n        for(int i=1;i<=n;i++){\n            a[i]=read();\n            b[i]=a[i];\n            fa[i]=i;\n        }\n        sort(b+1,b+n+1);\n        size=unique(b+1,b+n+1)-b-1;\n        for(int i=1;i<=m;i++){\n            int x=read(),y=read();\n            addedge(x,y);addedge(y,x);\n        }\n        build(root[0],1,size);\n        for(int i=1;i<=n;i++){\n            if(!vis[i]){\n                dfs(i,0,i);\n                fa[i]=i;\n            }\n        }\n        int lastans=0;\n        for(int i=1;i<=q;i++){\n            char ch[3];\n            int x,y,k;\n            scanf(\"%s\",ch);\n            x=read()^lastans;\n            y=read()^lastans;\n            if(ch[0]=='Q'){\n                k=read()^lastans;\n                int lca=getlca(x,y);\n                lastans=query(root[x],root[y],root[lca],root[st[lca][0]],1,size,k);\n                printf(\"%d\\n\",lastans);\n            }\n            else{\n                addedge(x,y);\n                addedge(y,x);\n                int u=find(x);\n                int v=find(y);\n                if(son[u]<son[v]){\n                    swap(u,v);\n                    swap(x,y);\n                }\n                dfs(y,x,u);\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1507298087,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "### \u6811\u4e0a\u7684\u4e3b\u5e2d\u6811\uff08\u5229\u7528LCA\uff09+\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b\u7b80\u5316\u7248\uff08\u53bb\u6389\u8fde\u8fb9\u64cd\u4f5c\uff09\u9898\u76ee[P2633 Count on a tree](https://www.luogu.org/problemnew/show/P2633)\u3002~~\u83b7\u5f97\u53cc\u500d\u7ecf\u9a8c~~\u3002\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u6c42\u8def\u5f84 **\uff08u\uff0cv\uff09** \u4e0a\u7b2c**k**\u5c0f\u70b9\u3002\n\n2. \u5728\u70b9 **x,y** \u95f4\u8fde\u4e00\u6761\u65e0\u5411\u8fb9\u3002\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5f88\u660e\u663e\uff0c\u5728\u6811\u4e0a\u5efa\u7acb\u4e3b\u5e2d\u6811\uff0c\u4e3b\u5e2d\u6811 **i** \u7ef4\u62a4\u4ece\u6839\u8282\u70b9 **root** \u5230\u70b9 **i** \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u4fe1\u606f\u3002\n\n\u67e5\u8be2\u8def\u5f84 **\uff08u\uff0cv\uff09** \u4e0a\u7b2c**k**\u5c0f\u70b9\u4e5f\u5bb9\u6613\u60f3\u5230\uff0c\u9700\u8981\u7528\u5230 **LCA** \u3002\n\n\u6211\u4eec\u627e\u5230 **\uff08u\uff0cv\uff09** \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 **lca** \u548c **lca** \u7684\u7236\u8282\u70b9 **fa_lca** \u3002\u7ef4\u62a4\u8fd9\u56db\u4e2a\u70b9\u7684\u4fe1\u606f\u8fdb\u884c\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4f7f\u65f6\u95f4\u66f4\u4f18\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u3002~~\u542f\u53d1\u5f0f\u5408\u5e76\u542c\u4e0a\u53bb\u7384\u5999\u65e0\u6bd4\uff0c\u5176\u5b9e\u5f88\u666e\u901a~~\u3002\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u8bb0\u5f55\u6bcf\u68f5\u6811\u7684\u5927\u5c0f\uff0c\u8fde\u8fb9\u65f6\u628a\u5c0f\u6811\u8fde\u63a5\u5230\u5927\u6811\u4e0a\u53bb\uff0c\u91cd\u6784\u5c0f\u6811\u4e2d\u7684\u4e3b\u5e2d\u6811\u3001**LCA**\u76f8\u5173\u6570\u7ec4\u3002\n\n~~\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\u50cf\u79bb\u6563\u5316\u5927\u5bb6\u90fd\u4f1a\u5427\u3002~~\n\n### \u771f\u6b63\u7684\u91cd\u70b9\u2014\u5173\u4e8e\u8fd9\u9053\u9898\u7684\u7279\u6027\uff1a\n\n\u5728\u65e0\u6570\u6b21 **RE** \u7b2c**2,3,6**\u4e2a\u6d4b\u8bd5\u70b9\u540e\uff0c\u6211\u7ec8\u4e8e\u627e\u5230\u4e86\u5751\u70b9\uff1a\u95ee\u9898\u51fa\u5728 **LCA** \u4e0a\u3002\n\n\u4e0b\u9762\u662f\u9519\u8bef\u793a\u8303\uff1a\uff08**ans[i][j]** \u8868\u793a **i** \u7684 **2^j** \u7ea7\u7956\u5148\uff09\n\n```cpp\nvoid update_LCA(int u,int fa){\n    deep[u]=deep[fa]+1;ans[u][0]=fa;\n    for(int i=1;i<=lg[deep[u]];i++)//\u8fd9\u91cc\u7684\u4e0a\u754c\n        ans[u][i]=ans[ans[u][i-1]][i-1];\n    for(int i=head[u];i;i=nxt[i])\n        if(to[i]!=fa) update_LCA(to[i],u);\n    return;\n}\n```\n\u53ea\u9700\u8981\u8fd9\u91cc\u628a\u5faa\u73af\u7684\u4e0a\u754c\u4ece **lg[deep[u]]** \u6539\u4e3a **x** \uff0c\u4fdd\u8bc1 **2^x>=n** \u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982 **18,19**\u7b49\u7b49\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff0c**lg[deep[u]]** \u4e0d\u662f **LCA** \u7684\u901a\u7528\u5199\u6cd5\u5417\uff0c**LCA** \u7684\u6a21\u677f\u9898\u4e5f\u662f\u5199\u7684**lg[deep[u]]**\u3002\n\n\u6211\u7ffb\u8ba8\u8bba\u533a\uff0c\u53d1\u73b0\u4e5f\u6709\u4eba\u56f0\u60d1\u4e8e\u6b64\u3002~~\u7136\u800c\uff0c\u9898\u89e3\u90fd\u5de7\u5999\u5730\u56de\u907f\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u6ca1\u6709\u89e3\u7b54~~\u3002\n\n\u65e0\u5948\uff0c\u6211\u4e0b\u8f7d\u4e86\u7b2c**2**\u4e2a\u6d4b\u8bd5\u70b9\u7684\u6570\u636e\uff0c\u5f00\u59cb\u4e86\u6f2b\u957f\u7684\u63a2\u7d22\u4e4b\u8def\u3002\n\n\u7ec8\u4e8e\uff0c\u5728\u6570\u636e\u4e2d\u7b2c**16058**\u6b21\u64cd\u4f5c\uff08\u8be2\u95ee\u64cd\u4f5c\uff09\uff0c\u6211\u53d1\u73b0\u4e86\u95ee\u9898\u3002\n\n**lg[deep[u]]** \u7684\u786e\u662f **LCA** \u7684\u901a\u7528\u5199\u6cd5\uff0c\u6ca1\u6709\u95ee\u9898\uff0c\u8fd9\u9053\u9898\u4e0a\u884c\u4e0d\u901a\u662f\u8fd9\u9053\u9898\u7684 **\u7279\u6027** \uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u64cd\u4f5c\uff1a**\u8fde\u8fb9** \u3002\n\n\u6211\u4eec\u6765\u770b **get_LCA** \u64cd\u4f5c\uff1a\n```cpp\nint get_LCA(int u,int v){\n    if(deep[u]<deep[v]) swap(u,v);\n    while(deep[u]>deep[v])\n        u=ans[u][lg[deep[u]-deep[v]]];\n    if(u==v) return u;\n    for(int i=lg[deep[u]];i>=0;i--)\n        if(ans[u][i]!=ans[v][i])//\u91cd\u70b9\n        \tu=ans[u][i],v=ans[v][i];        \t\n    return ans[u][0]; \n}\n```\n\n\u5982\u679c\u6211\u4eec\u8fde\u8fb9\u91cd\u6784 **update_LCA** \u65f6\u91c7\u7528 **lg[deep[u]]** \uff0c\u53ef\u80fd\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff1a\u8fd9\u4e2a\u70b9 **i** \u539f\u672c\u7684 **ans[i][j]**\uff0c**j** \u6700\u5927\u5df2\u7ecf\u5927\u4e8e\u4e86   **lg[deep[u]]** \uff08\u5373\u539f\u6765\u6df1\u5ea6\u66f4\u6df1\uff09\uff0c\u4f46\u662f\u6211\u4eec\u66f4\u65b0\u53ea\u662f\u66f4\u65b0\u5230 **lg[deep[u]]** \uff0c\u5b83\u4e0a\u9762\u7684\u72b6\u6001\u6ca1\u6709\u6539\u53d8\u3002\u5728\u6267\u884c **get_LCA** \uff0c\u8fdb\u884c\u5224\u65ad\u65f6\uff1a\n\n```cpp\nif(ans[u][i]!=ans[v][i])//\u91cd\u70b9\n\tu=ans[u][i],v=ans[v][i];\n```\n\n\u672c\u6765\uff0c\u8fd9\u4e00\u6b21 **u,v** \u4e0d\u80fd\u88ab\u6539\u53d8\uff0c \u7531\u4e8e\u72b6\u6001\u6ca1\u6709\u5168\u90e8\u66f4\u65b0\uff0c**u,v** \u88ab\u6539\u53d8\u4e86\uff0c\u5bfc\u81f4**lca**\u627e\u9519\uff0c\u8fdb\u800c\u7b54\u6848\u9519\u8bef\uff0c\u4e0b\u4e00\u6b21\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\u65f6\u6570\u5b57\u53d8\u5f97\u5f88\u5927\uff0c\u6570\u7ec4\u8d8a\u754c\u76f4\u63a5\u5bfc\u81f4 **RE** \u3002\n\n\u4e3e\u4e2a\u6817\u5b50\u5927\u5bb6\u5c31\u77e5\u9053\u4e86\uff1a\n\n![](https://i.loli.net/2019/06/05/5cf73164c7b0042630.png)\n\n\u5047\u8bbe **ans[x]={root,6},ans[y]={root,7}**\u3002\n\n\u4ece **u,v** \u51fa\u53d1\uff0c\u6a21\u62df\u8d70\u4e00\u904d\u3002\n\n**i=2**\u65f6\uff0c**u**\u8df3\u5230\u4e86**x**\u3002**v**\u8df3\u5230\u4e86**y**\u3002\n\n**i=1**\u65f6\uff0c**x**\u8df3\u5230\u4e86**6**\uff0c**v**\u8df3\u5230\u4e86**7**\u3002\n\n\u597d\u4e86\uff0c\u5df2\u7ecf\u51fa\u9519\u4e86\u3002\n\n\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u7684\u7279\u6027\uff0c\u8fde\u8fb9\u91cd\u6784 **update_LCA** \u65f6\uff0c\u4e0a\u754c\u5f88\u91cd\u8981\u3002\n\n~~\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5176\u4ed6\u9898\u4e0a\u754c\u53ef\u4ee5\u662f **lg[deep[u]]** \uff0c\u5927\u5bb6\u81ea\u5df1\u60f3\u60f3\u5427\uff0c\u4e0d\u96be\u3002~~\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=8e4+5;\nint T,n,m,TT,last;\nint tot,row[N],s[N],size[N];\nint cnt,to[4*N],nxt[4*N],head[4*N];\nint from[N],lg[N],ans[N][35],deep[N];\nstruct Tree{\n    int ls,rs,si;\n}t[105*N];\nint root[N],top;\n\nint in(){\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){ if(ch=='-') f=-1; ch=getchar(); }\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    return x*f;\t\n}\n\nvoid adds(int x,int y){\n    to[++cnt]=y;nxt[cnt]=head[x];head[x]=cnt;\n    return;\n}\n\nvoid pre_work(){\n    int a,b;lg[0]=-1;\n    T=in();n=in();m=in();TT=in();\n    for(int i=1;i<=n;i++)\n        row[i]=s[i]=in(),lg[i]=lg[i>>1]+1,from[i]=i;\t\n    sort(row+1,row+1+n);\n    tot=unique(row+1,row+1+n)-(row+1);\n    for(int i=1;i<=n;i++)\n        s[i]=lower_bound(row+1,row+1+tot,s[i])-row;\t\n    for(int i=1;i<=m;i++)\n        a=in(),b=in(),adds(a,b),adds(b,a);\n    return;\n}\n\nvoid built(int &pos,int pre,int l,int r,int wi){\n    t[pos=++top]=t[pre];\n    t[pos].si++;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(wi<=mid) built(t[pos].ls,t[pre].ls,l,mid,wi);\n    else built(t[pos].rs,t[pre].rs,mid+1,r,wi);\n    return;\n}\n\nvoid dfs(int u,int fa,int rt){\n    built(root[u],root[fa],1,tot,s[u]);\n    deep[u]=deep[fa]+1;ans[u][0]=fa;\n    size[rt]++;from[u]=rt;\n    for(int i=1;i<=18;i++)\n        ans[u][i]=ans[ans[u][i-1]][i-1];\n    for(int i=head[u];i;i=nxt[i])\n        if(to[i]!=fa) dfs(to[i],u,rt);\n    return;\n}\n\nint get_LCA(int u,int v){\n    if(deep[u]<deep[v]) swap(u,v);\n    while(deep[u]>deep[v])\n        u=ans[u][lg[deep[u]-deep[v]]];\n    if(u==v) return u;\n    for(int i=lg[deep[u]];i>=0;i--)\n        if(ans[u][i]!=ans[v][i])\n            u=ans[u][i],v=ans[v][i];\n    return ans[u][0]; \n}\n\nint Answer(int u,int v,int og,int fg,int l,int r,int k){\n    if(l==r) return row[l];\n    int sum=t[t[u].ls].si+t[t[v].ls].si-t[t[og].ls].si-t[t[fg].ls].si;\n    int mid=(l+r)>>1;\n    if(k<=sum) return Answer(t[u].ls,t[v].ls,t[og].ls,t[fg].ls,l,mid,k);\n    return Answer(t[u].rs,t[v].rs,t[og].rs,t[fg].rs,mid+1,r,k-sum);\t\n}\n\nint main(){\n    pre_work();\n    for(int i=1;i<=n;i++)\n        if(from[i]==i) dfs(i,0,i);\n    char ch[5];int x,y,k;\n    for(int i=1;i<=TT;i++){\n        scanf(\"%s\",ch);x=in()^last;y=in()^last;\n        if(ch[0]=='Q'){\n            k=in()^last;\n            int og=get_LCA(x,y),fg=ans[og][0];\n            last=Answer(root[x],root[y],root[og],root[fg],1,tot,k);\n            printf(\"%d\\n\",last);\t\t\n        }\n        else{\n            adds(x,y);adds(y,x);\n            int fx=from[x],fy=from[y];\n            if(size[fy]<size[fx]) dfs(y,x,fx);\n            else dfs(x,y,fy);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1559704632,
        "uid": 123159,
        "name": "IC_QQQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "\u5148\u5b89\u5229\u4e00\u4e0b\u6211\u7684[\u535a\u5ba2](https://www.cnblogs.com/LJC00118/p/9597316.html)\n\n\u770b\u5230\u67e5\u8be2\u7b2c k \u5c0f\uff0c\u800c\u4e14\u662f\u4e00\u9897\u6811\uff0c\u53ef\u4ee5\u8054\u60f3\u5230\u5728\u6811\u4e0a\u7684\u4e3b\u5e2d\u6811\uff0ca \u548c b \u8def\u5f84\u4e2d\u7b2c k \u5c0f\u53ef\u4ee5\u901a\u8fc7\u5728 a, b, lca(a, b), fa[lca(a, b)] \u56db\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u4e0a\u4e8c\u5206\u5f97\u5230\n\n\u5b9e\u73b0\u4e3b\u5e2d\u6811\u662f\u5f88\u7b80\u5355\u7684\uff0c\u8fde\u63a5\u4e24\u4e2a\u70b9\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u662f\u8fde\u63a5\u4e24\u4e2a\u70b9\u540e\u8fd8\u8981\u9ad8\u6548\u7684\u6c42\u51fa LCA\uff0c\u4e00\u79cd\u505a\u6cd5\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\u91cd\u6784\u500d\u589e\u6570\u7ec4\uff0c\u4e5f\u6709\u4e00\u79cd\u7528 LCT \u7ef4\u62a4 LCA \u7684\u65b9\u6cd5\uff0c\u76f8\u5bf9\u7b80\u5355\u3002\u535a\u4e3b\u7684\u5b9e\u73b0\u662f\u540e\u8005\n\n\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u627e\u5230 fa[lca(a, b)] \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u6a21\u4eff LCT findroot \u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u5148 access(lca)\uff0c\u7136\u540e splay(lca)\uff0c\u627e\u5230\u6df1\u5ea6\u6b21\u5927\u7684\u70b9\u5373\u53ef\u3002link \u4e4b\u540e root \u4f1a\u53d8\uff0c\u8fdb\u884c\u65b0\u64cd\u4f5c\u7684\u65f6\u5019\u8981 makeroot\uff0c\u624d\u80fd\u6c42\u51fa\u6b63\u786e\u7684 LCA\n\n\u603b\u800c\u8a00\u4e4b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u5177\u4f53\u8fd8\u662f\u770b\u4ee3\u7801\u5b9e\u73b0\u5427\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\n\ntemplate <typename _T>\ninline void read(_T &f) {\n    f = 0; _T fu = 1; char c = getchar();\n    while(c < '0' || c > '9') {if(c == '-') fu = -1; c = getchar();}\n    while(c >= '0' && c <= '9') {f = (f << 3) + (f << 1) + (c & 15); c = getchar();}\n    f *= fu;\n}\n\nconst int N = 80000 + 10;\n\nint fa[N], ch[N][2], rev[N], st[N], len;\nint n, m, t;\n\nint isroot(int u) {return ch[fa[u]][0] != u && ch[fa[u]][1] != u;}\nint get(int u) {return ch[fa[u]][1] == u;}\n\nvoid pushdown(int u) {\n    if(rev[u]) {\n        swap(ch[u][0], ch[u][1]);\n        rev[ch[u][0]] ^= 1;\n        rev[ch[u][1]] ^= 1;\n        rev[u] ^= 1;\n    }\n}\n\nvoid rotate(int u) {\n    int old = fa[u], oldd = fa[old], k = get(u);\n    if(!isroot(old)) ch[oldd][get(old)] = u; fa[u] = oldd;\n    fa[ch[u][k ^ 1]] = old; ch[old][k] = ch[u][k ^ 1];\n    fa[old] = u; ch[u][k ^ 1] = old;\n}\n\nvoid splay(int u) {\n    st[len = 1] = u;\n    for(int i = u; !isroot(i); i = fa[i]) st[++len] = fa[i];\n    for(int i = len; i >= 1; i--) pushdown(st[i]);\n    for(; !isroot(u); rotate(u)) if(!isroot(fa[u])) rotate(get(u) == get(fa[u]) ? fa[u] : u);\n}\n\nint access(int u) {\n    int tmp;\n    for(int i = 0; u; i = u, u = fa[u]) {\n        splay(u);\n        ch[u][1] = i;\n        tmp = u;\n    }\n    return tmp;\n}\n\nvoid makeroot(int u) {\n    access(u);\n    splay(u);\n    rev[u] ^= 1;\n}\n\nvoid link(int x, int y) {\n    makeroot(x);\n    fa[x] = y;\n}\n\nint LCA(int x, int y) {\n    access(x);\n    return access(y);\n}\n\nint rt[N], val[N * 600], lc[N * 600], rc[N * 600], a[N], b[N];\nint tot = 0;\n\nvoid build(int &u, int l, int r) {\n    u = ++tot;\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    build(lc[u], l, mid);\n    build(rc[u], mid + 1, r);\n}\n\nvoid ins(int &u, int pre, int l, int r, int x) {\n    u = ++tot;\n    val[u] = val[pre] + 1, lc[u] = lc[pre], rc[u] = rc[pre];\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    if(mid >= x) ins(lc[u], lc[pre], l, mid, x);\n    else ins(rc[u], rc[pre], mid + 1, r, x);\n}\n\nint query(int a, int b, int c, int d, int l, int r, int k) {\n    if(l == r) return l;\n    int lsum = val[lc[a]] + val[lc[b]] - val[lc[c]] - val[lc[d]];\n    int rsum = val[rc[a]] + val[rc[b]] - val[rc[c]] - val[rc[d]];\n    int mid = (l + r) >> 1;\n    if(lsum >= k) return query(lc[a], lc[b], lc[c], lc[d], l, mid, k);\n    else return query(rc[a], rc[b], rc[c], rc[d], mid + 1, r, k - lsum);\n}\n\nint blen;\n\nvector <int> g[N];\nint siz[N], head[N];\n\nint f[N]; int find(int x) {return f[x] == x ? x : f[x] = find(f[x]);}\n\ninline void addedge(int u, int v) {\n    g[u].push_back(v);\n    g[v].push_back(u);\n}\n\nvoid dfs1(int u, int f) {\n    ins(rt[u], rt[f], 1, blen, a[u]);\n    for(vector <int> :: iterator it = g[u].begin(); it != g[u].end(); it++) {\n        int v = *it; if(v == f) continue; dfs1(v, u);\n    }\n}\n\nvoid Merge(int a, int b) {\n    int x = find(a), y = find(b);\n    if(siz[x] < siz[y]) swap(a, b), swap(x, y);\n    siz[x] += siz[y]; addedge(a, b); \n    link(a, b); f[y] = x;\n    dfs1(b, a);\n}\n\nint lastans = 0;\n\nint main() {\n    cin >> n;\n    cin >> n >> m >> t;\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i]);\n        b[i] = a[i];\n        f[i] = i; siz[i] = 1;\n    }\n    sort(b + 1, b + n + 1);\n    blen = unique(b + 1, b + n + 1) - b - 1;\n    for(int i = 1; i <= n; i++) a[i] = lower_bound(b + 1, b + blen + 1, a[i]) - b;\n    build(rt[0], 1, blen);\n    for(int i = 1; i <= n; i++) {\n        ins(rt[i], rt[0], 1, blen, a[i]);\n    }\n    for(int i = 1; i <= m; i++) {\n        int A, B;\n        scanf(\"%d %d\", &A, &B);\n        Merge(A, B);\n    }\n    for(int i = 1; i <= t; i++) {\n        char c = getchar();\n        while(c != 'Q' && c != 'L') c = getchar();\n        if(c == 'L') {\n            int A, B;\n            scanf(\"%d %d\", &A, &B);\n            A ^= lastans; B ^= lastans;\n            Merge(A, B);\n        } else {\n            int A, B, K;\n            scanf(\"%d %d %d\", &A, &B, &K);\n            A ^= lastans; B ^= lastans; K ^= lastans;\n            makeroot(find(A));\n            int lca = LCA(A, B), father;\n            if(find(A) == lca) father = 0;\n            else {\n                access(lca); splay(lca);\n                father = ch[lca][0];\n                while(ch[father][1]) {\n\t\t\t\t\tfather = ch[father][1];\n\t\t\t\t\tpushdown(father);\n\t\t\t\t}\n            }\n            printf(\"%d\\n\", lastans = b[query(rt[A], rt[B], rt[lca], rt[father], 1, blen, K)]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1536502773,
        "uid": 51815,
        "name": "LJC00118",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "# \u535a\u4e3b\u7684 BiBi \u65f6\u95f4\n\u7b80\u76f4\u4e0d\u6562\u76f8\u4fe1\u81ea\u5df1\u53bb\u5e74 $9$ \u6708\u5b66\u8fc7\u4e3b\u5e2d\u6811\u3002\u3002\u3002\u771f\u7684\u4e00\u70b9\u5370\u8c61\u90fd\u6ca1\u4e86\uff08~~\u771f\u7684\u592a\u83dc\u4e86~~\uff09\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9898\u6709\u4e2a\u5751\u70b9\uff1a**$testcase$ \u662f\u6570\u636e\u7f16\u53f7\uff0c\u4e0d\u662f\u6570\u636e\u7ec4\u6570\uff01**\n# Solution\n\u4e3b\u5e2d\u6811\u4e00\u822c\u662f\u5904\u7406\u533a\u95f4\u7b2c\u51e0\u5927/\u5c0f\u7684\u95ee\u9898\u3002\u7136\u800c\u8fd9\u6b21\u7684\u573a\u666f\u8f6c\u79fb\u5230\u4e86\u6811\u4e0a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8ba9 $rt[u]$ \u5728 $rt[fa[u]]$ \u7684\u57fa\u7840\u4e0a\u5efa\u6811\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 $sum[u]+sum[v]-sum[lca(u,v)]-sum[fa[lca(u,v)]]$ \u6765\u8868\u793a\u8fd9\u4e2a\u8def\u5f84\u7684\u67d0\u79cd\u6570\u503c\u7684\u4e2a\u6570\u3002\u8fd9\u91cc\u7684\u6570\u503c\u79bb\u6563\u5316\u5904\u7406\u5c31\u884c\u4e86\u3002\n\n\u52a0\u8fb9\u64cd\u4f5c\u6211\u4eec\u5c31\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u6bcf\u6b21\u9009\u62e9\u6811\u7684\u5927\u5c0f\u8f83\u5c0f\u7684\u91cd\u5efa\u3002\n\n\u8bc1\u660e\u4e00\u4e0b\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u590d\u6742\u5ea6\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8003\u8651\uff0c\u8003\u8651\u4e00\u76f4\u5408\u5e76\u4e0a\u53bb\u7684\u60c5\u51b5\uff08\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u662f\u66f4\u6539\u5927\u5c0f\u8f83\u5c0f\u7684\u90a3\u4e00\u5768\uff0c\u6240\u4ee5\u5b83\u7684\u590d\u6742\u5ea6\u662f\u53d6\u51b3\u4e8e\u5c0f\u5768\u7684\u5927\u5c0f\u800c\u4e0d\u662f\u5927\u5768\u7684\uff09\uff0c\u56e0\u4e3a\u662f\u5408\u5e76\u4e0a\u53bb\uff08\u8fd9\u662f\u5c0f\u5768\uff09\uff0c\u5408\u5e76\u4e4b\u540e\u6574\u4e2a\u5768\u7684\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e\u5c0f\u5768\u7684\u5927\u5c0f $*2$\u3002\u6240\u4ee5\u8fd9\u4e2a\u70b9\u603b\u5171\u6700\u591a\u5408\u5e76 $logn$ \u6b21\uff0c\u53c8\u56e0\u4e3a\u662f\u6bcf\u4e2a\u70b9\u8003\u8651\u7684\uff0c\u5176\u5b9e\u8fd9\u4e2a\u70b9\u7684\u5408\u5e76\u6b21\u6570\u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u6211\u4eec\u7d2f\u52a0\u5373\u53ef\uff1a$O(nlogn)$\u3002\n\n\u6211\u4eec\u7b97\u4e00\u4e0b\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u9996\u5148\u6211\u4eec\u521d\u59cb\u5efa\u6811\u662f\u6bcf\u4e2a\u70b9\u90fd\u4f1a\u5efa\u4e00\u68f5\u6811\uff0c\u6bcf\u68f5\u6811\u6700\u591a\u52a0 $logn$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $S(nlogn)$\u3002\n\n\u5173\u4e8e\u540e\u9762\u91cd\u5efa\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4e4b\u524d\u7684\u662f $nlogn$ \u7684\u91cd\u5efa\u6b21\u6570\uff08\u8bc1\u660e\u5728\u542f\u53d1\u5f0f\u5408\u5e76\u8bc1\u660e\uff09\uff0c\u6bcf\u6b21\u91cd\u5efa\u6700\u591a\u52a0 $logn$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6 $S(nlogn^2)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(nlogn^2)$\u3002\n\n\u535a\u4e3b\u849f\u84bb\uff0c\u5982\u6709\u9519\u8bef\u8bf7\u5728\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u6211\u4f1a\u5728\u7b2c\u4e00\u65f6\u95f4\u66f4\u6539\u3002\n# Code\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 8e4 + 5;\n\nint n, m, q, a[N], b[N], len, cnt, head[N], nxt[N << 2], to[N << 2], sz, lc[N * 276], rc[N * 276], sum[N * 276], rt[N], siz[N], dep[N], f[N][18], p[5], lastans, root[N];\nbool vis[N];\n\nint read() {\n    int x = 0, f = 1; char s;\n    while((s = getchar()) < '0' || s > '9') if(s == '-') f = -1;\n    while(s >= '0' && s <= '9') {x = (x << 1) + (x << 3) + (s ^ 48); s = getchar();}\n    return x * f;\n}\n\nvoid addEdge(const int u, const int v) {\n    nxt[++ cnt] = head[u], to[cnt] = v, head[u] = cnt;\n}\n\nvoid update(int &o, const int fa, const int l, const int r, const int p) {\n    if(l > p || r < p) return;\n    o = ++ sz; lc[o] = lc[fa], rc[o] = rc[fa], sum[o] = sum[fa] + 1;\n    if(l == r) return;\n    int mid = l + r >> 1;\n    update(lc[o], lc[fa], l, mid, p); update(rc[o], rc[fa], mid + 1, r, p);\n}\n\nvoid dfs(const int u, const int fa, const int Root) {\n    root[u] = Root; vis[u] = siz[u] = 1; f[u][0] = fa; dep[u] = dep[fa] + 1;\n    update(rt[u], rt[fa], 1, len, a[u]);\n    for(int i = 1; (1 << i) <= dep[u]; ++ i) f[u][i] = f[f[u][i - 1]][i - 1];\n    for(int i = head[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if(v == fa) continue;\n        dfs(v, u, Root);\n        siz[u] += siz[v];\n    }\n}\n\nint lca(int u, int v) {\n    if(dep[u] > dep[v]) swap(u, v);\n    int d = dep[v] - dep[u];\n    for(int i = 0; (1 << i) <= d; ++ i) if((1 << i) & d) v = f[v][i];\n    if(u == v) return u;\n    for(int i = 16; ~i; -- i)\n        if(f[u][i] != f[v][i] && (1 << i) <= dep[v]) u = f[u][i], v = f[v][i];\n    return f[u][0];\n}\n\nint query(const int l, const int r, const int k) {\n    if(l == r) return l;\n    int x = sum[lc[p[1]]] + sum[lc[p[2]]] - sum[lc[p[3]]] - sum[lc[p[4]]];\n    int mid = l + r >> 1;\n    if(x >= k) {\n        for(int i = 1; i <= 4; ++ i) p[i] = lc[p[i]];\n        return query(l, mid, k);\n    }\n    else {\n        for(int i = 1; i <= 4; ++ i) p[i] = rc[p[i]];\n        return query(mid + 1, r, k - x);\n    }\n}\n\nvoid init() {\n    sz = cnt = lastans = 0;\n    memset(vis, 0, sizeof vis);\n    memset(head, 0, sizeof head);\n}\n\nint main() {\n    int u, v, k, T = read(); char s[10];\n    T = 1;\n    for(; T; -- T) {\n        n = read(), m = read(), q = read(); init();\n        for(int i = 1; i <= n; ++ i) a[i] = b[i] = read();\n        sort(b + 1, b + n + 1);\n        len = unique(b + 1, b + n + 1) - b - 1;\n        for(int i = 1; i <= n; ++ i) a[i] = lower_bound(b + 1, b + len + 1, a[i]) - b;\n        for(int i = 1; i <= m; ++ i) {\n            u = read(), v = read();\n            addEdge(u, v), addEdge(v, u);\n        }\n        for(int i = 1; i <= n; ++ i) if(! vis[i]) dfs(i, 0, i);\n        while(q --) {\n            scanf(\"%s\", s);\n            if(s[0] == 'Q') {\n                u = read() ^ lastans, v = read() ^ lastans, k = read() ^ lastans;\n                int LCA = lca(u, v);\n                p[1] = rt[u], p[2] = rt[v], p[3] = rt[LCA], p[4] = rt[f[LCA][0]];\n                printf(\"%d\\n\", lastans = b[query(1, len, k)]);\n            }\n            else {\n                u = read() ^ lastans, v = read() ^ lastans;\n                if(siz[root[u]] < siz[root[v]]) swap(u, v);\n                siz[root[u]] += siz[root[v]];\n                addEdge(u, v), addEdge(v, u);\n                dfs(v, u, root[u]);\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1590896431,
        "uid": 154787,
        "name": "Oxide",
        "ccfLevel": 0,
        "title": "\u3010SDOI 2013\u3011\u68ee\u6797"
    },
    {
        "content": "\u4e3b\u5e2d\u6811+(\u5e76\u67e5\u96c6)\u542f\u53d1\u5f0f\u5408\u5e76\u597d\u9898\u3002\n\n## \u5410\u69fd\uff1a\n\u8fd9\u9053\u9898RE\u4e86\u591a\u6b21\u624dA\uff0c\u539f\u56e0\u7adf\u7136\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86\u3002\n\n## \u601d\u8def\uff1a\n- \u6211\u4eec\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u6240\u5c5e\u7684\u6811\u7684\u6839\uff0c\u6bcf\u4e2a\u70b9\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u81ea\u5df1\u5230\u6811\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u503c\u3002\u5728\u8be2\u95ee\u65f6\uff0c\u6211\u4eec\u5148\u7528\u500d\u589e\u6c42\u51faLCA\uff0c\u53caLCA\u7684\u7236\u4eb2\u3002\n\u90a3\u4e48x,y\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u70b9\u5c31\u662f\uff1ax\u5230\u6839\u7684\u70b9+y\u5230\u6839\u7684\u70b9-LCA\u5230\u6839\u7684\u70b9-LCA\u7236\u4eb2\u5230\u6839\u7684\u70b9**(\u9632\u6b62LCA\u51cf\u4e24\u6b21)**.\u7136\u540e\u5c31\u662f\u7528\u7c7b\u4f3c[\u6a21\u7248](https://www.luogu.org/problem/P3834)\n\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u7684\u3002\n- \u81f3\u4e8e\u52a0\u8fb9\uff0c\u6211\u4eec\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5c31\u662f\u628a\u8282\u70b9\u6570\u5c0f\u7684\u6811\u63a5\u5230\u53e6\u4e00\u68f5\u6811\u3002\u589e\u52a0\u7684\u4e3b\u5e2d\u6811\u8282\u70b9\u4e3a$sz$(\u8282\u70b9\u6570\u5c0f\u7684\u6811\u7684\u603b\u8282\u70b9\u6570)$*\\log  ~n$\u3002\n\n## \u6570\u636e\u8303\u56f4:\n\n _\u4e3b\u5e2d\u6811\u7684\u6570\u636e\u8303\u56f4\u662f\u4e00\u4e2a\u5f88\u8ff7\u7684\u95ee\u9898\uff0c\u5982\u679c\u5199\u9519\u4e86\uff0c\u671b\u89c1\u8c05\u5e76\u79c1\u4fe1\u6211\u3002_ \n\n\u9996\u5148\uff0c\u6743\u503c\u8fd9\u4e48\u5927\uff0c\u80af\u5b9a\u8981\u79bb\u6563\u5316\u7684\u2014\u2014\u6700\u591a\u6709n\u4e2a\u6743\u503c(\u90a3\u4e48\u4e3b\u5e2d\u6811\u6709n\u7c7b\u53f6\u5b50\u8282\u70b9,\u540c\u7c7b\u8868\u793a\u540c\u503c)\u3002\n\n\u6240\u4ee5\u521d\u59cb\u5316\u80af\u5b9a\u8981$O(n*\\log n)$\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5566\u3002\n\n\u81f3\u4e8e\u5408\u5e76\u4ea7\u751f\u7684\u6700\u5927(\u4e3b\u5e2d\u6811)\u8282\u70b9\u6570\u53c8\u8981\u600e\u4e48\u6c42\u5462\uff1f\n\n~~\u80af\u5b9a\u662f\u5199\u4e2a\u7a0b\u5e8f\u8dd1\u5566~~\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int N=8e4+10;\nint f[N],pos[N];\nint main()\n{\n\tint n=N-10;f[1]=0;f[2]=1;\n\tfor(int i=3;i<=n;i++)\n\t{\n\t\tfor(int j=(i>>1);j>=1;j--)\n\t\t\tif(f[i]<f[j]+f[i-j]+j)\n\t\t\t\tf[i]=f[j]+f[i-j]+j,pos[i]=j;\n\t\t//printf(\"f(%d)=f(%d)+f(%d)=%d\\n\",i,pos[i],i-pos[i],f[i]);\n\t\tif(pos[i]!=i>>1){printf(\"%d no\\n\",i);return 0;}//\u8fd9\u53e5\u8bdd\u6ca1\u6709\u7528\uff0c\u5e0c\u671b\u5f97\u5230\u5927\u4f6c\u7684\u4e25\u8c28\u8bc1\u660e \n\t}\n\tprintf(\"%d\\n\",f[n]);\n\treturn 0;\n}\n\n```\n\u6240\u4ee5\u6570\u636e\u8303\u56f4\u5927\u6982\u5c31\u662f310N\u5566\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#define g getchar()\nusing namespace std;\nconst int N=8e4+10;\nvoid qr(int &x)\n{\n\tchar c=g;x=0;\n\twhile(!isdigit(c))c=g;\n\twhile(isdigit(c))x=x*10+c-'0',c=g;\n}\nvoid write(int x)\n{\n\tif(x/10)write(x/10);\n\tputchar(x%10+'0');\n}\nint n,m,T,b[N],p[N],father[N][18],dep[N],fa[N],sz[N];//father\u7528\u500d\u589e\u5b58\u7956\u5b97\u3002fa,sz\u7528\u4e8e\u5e76\u67e5\u96c6\n//\u79bb\u6563\u5316 \nbool cmp(int x,int y){return b[x]<b[y];}\nvoid disc()\n{\n\tsort(p+1,p+n+1,cmp);\n\tint &l=p[0]=0;\n\tfor(int i=1,d=b[p[1]]-1;i<=n;i++)//\u4e0d\u7528\u4e8c\u5206\u7684\u79bb\u6563\u5316\n\t\tif(b[p[i]]!=d)d=b[p[i]],b[p[i]]=++l,p[l]=d;\n\t\telse b[p[i]]=l;\n\t//\u6700\u540e\uff0cb\u4e3a\u79bb\u6563\u5316\u540e\u7684\u503c\uff0cp\u88c5\u539f\u503c\n}\n//\u627e\u7956\u5148 \nint findfa(int x){return fa[x]==x?x:fa[x]=findfa(fa[x]);} \n//\u4e3b\u5e2d\u6811 \nstruct node{int l,r,s;}tr[N*310];int cnt,root[N];\nvoid update(int l,int r,int &x,int y,int pos)\n{\n\ttr[x=++cnt]=tr[y];tr[x].s++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)update(l,mid,tr[x].l,tr[y].l,pos);\n\telse \t  update(mid+1,r,tr[x].r,tr[y].r,pos);\n}\nint f,ff;\nvoid LCA(int x,int y)\n{\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=0,k=dep[x]-dep[y];k;i++)if(k>>i&1)k^=1<<i,x=father[x][i];//dep[x]-dep[y]\u4e3a\u9700\u8981\u5355\u8df3\u7684\u6b21\u6570\n\tif(x!=y){for(int i=16;i>=0;i--)if(father[x][i]!=father[y][i])x=father[x][i],y=father[y][i];   f=father[x][0];}\n\telse f=x;//\u7279\u522b\u6ce8\u610f\n\tff=father[f][0];f=root[f];ff=root[ff];\n}\nint ans;\nvoid query(int x,int y,int k) \n{\n\tLCA(x,y);x=root[x];y=root[y];\n\tint l=1,r=p[0],mid,s;\n\twhile(l<r) \n\t{\n\t\tmid=(l+r)>>1;\n\t\ts=tr[tr[x].l].s+tr[tr[y].l].s-tr[tr[f].l].s-tr[tr[ff].l].s;\n\t\tif(k<=s)\n\t\t{\n\t\t\tx=tr[x].l;  y=tr[y].l;\n\t\t\tf=tr[f].l;ff=tr[ff].l;\n\t\t\tr=mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=tr[x].r;  y=tr[y].r;\n\t\t\tf=tr[f].r;ff=tr[ff].r;\n\t\t\tl=mid+1;k-=s;\n\t\t}\n\t}\n\twrite(ans=p[l]);puts(\"\");\n}\n//\u9012\u5f52\nstruct edge{int y,next;}a[N<<1];int len,last[N];\nvoid ins(int x,int y){a[++len]=(edge){y,last[x]};last[x]=len;} \nvoid dfs(int x,int z)\n{\n\tupdate(1,p[0],root[x],root[father[x][0]],b[x]);\n\tfa[x]=z;sz[z]++;\n\tdep[x]=dep[father[x][0]]+1;\n\tfor(int i=1;i<=16;i++)father[x][i]=0;\n\tfor(int i=1;father[x][i-1];i++)father[x][i]=father[father[x][i-1]][i-1];\n\tfor(int k=last[x];k;k=a[k].next) \n\t{\n\t\tint y=a[k].y;if(y==father[x][0])continue;\n\t\tfather[y][0]=x;dfs(y,z);\n\t}\n}\nvoid link(int x,int y)\n{\n\tint tx=findfa(x),ty=findfa(y);\n\tif(sz[tx]>sz[ty])swap(tx,ty),swap(x,y);\n\tfather[x][0]=y;dfs(x,ty);ins(x,y);ins(y,x);\n}\nint main()\n{\n\tqr(n);qr(n);qr(m);qr(T);\n\tfor(int i=1;i<=n;i++)qr(b[i]),p[i]=i;\n\tdisc();\n\tfor(int i=1,x,y;i<=m;i++)qr(x),qr(y),ins(x,y),ins(y,x);\n\tfor(int i=1;i<=n;i++)if(!fa[i])dfs(i,i);\n\twhile(T--)\n\t{\n\t\tchar s[2];int x,y,k;\n\t\tscanf(\"%s\",s);qr(x);qr(y);x^=ans;y^=ans;\n\t\tif(s[0]=='Q')qr(k),query(x,y,k^ans);\n\t\telse link(x,y);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565873722,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "**\u9898\u610f**\n\n\u4f60\u6709\u4e00\u4e2a\u68ee\u6797\uff0c\u4f60\u9700\u8981\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\n\n- \u67e5\u8be2\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u4e0a\u6743\u503c\u7b2c$k$\u5c0f\n- \u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n\n\u5f3a\u5236\u5728\u7ebf\uff0c\u7ed3\u70b9\u6570$\\leq 8\\times 10^4$\n\n**\u9898\u89e3**\n\n\u5982\u679c\u53ef\u4ee5\u79bb\u7ebf\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e3b\u5e2d\u6811\u677f\u5b50\u9898\uff0c\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u4e3b\u5e2d\u6811\u8868\u793a\u6811\u4e0a\u7684\u524d\u7f00\u548c\u3002\u8be2\u95ee\u7684\u65f6\u5019\u62ff\u51fa\u6765$4$\u68f5\u4e3b\u5e2d\u6811\uff0c$x,y,lca(x,y)$\u548c$fa(lca(x,y))$\uff0c\u7136\u540e\u6bcf\u6b21\u7528$x,y$\u7684\u4fe1\u606f\u51cf\u53bb$lca(x,y),fa(lca(x,y))$\u7684\u4fe1\u606f\u5c31\u80fd\u5f97\u5230\u8fd9\u6761\u94fe\u7684\u4fe1\u606f\n\n\u8fd9\u91cc\u8981\u6c42\u5728\u7ebf\uff0c\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bd4\u5982\u8fde\u63a5$x,y$\uff0c\u82e5$y$\u8fde\u901a\u5757\u6bd4\u8f83\u5c0f\uff0c\u5c31\u628a$y$\u7684\u90a3\u4e2a\u8fde\u901a\u5757\u8fde\u505a$x$\u7684\u513f\u5b50\uff0c\u663e\u7136\u8fd9\u6837$y$\u7684\u8fde\u901a\u5757\u7236\u5b50\u5173\u7cfb\u4f1a\u6539\u53d8\uff0c\u9700\u8981\u91cd\u65b0dfs\u6c42\u500d\u589e\u6570\u7ec4\u548c\u4e3b\u5e2d\u6811\u3002\u542f\u53d1\u5f0f\u5408\u5e76$O(n \\log n)$\uff0c\u4e3b\u5e2d\u6811\u5e26\u4e00\u4e2a$\\log$\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u5c31\u662f$O(n \\log^2n)$\n\n\u6ce8\u610f\u4e00\u4e0b\u4e3b\u5e2d\u6811\u4e0d\u8981\u53cd\u590d\u65b0\u5efa\u7ed3\u70b9\uff0c\u4e00\u4e2a\u7ed3\u70b9\u5efa\u8fc7\u4e86\u7b2c\u4e8c\u6b21\u518d\u5efa\u76f4\u63a5\u628a\u5b83\u539f\u6765\u7684\u4fe1\u606f\u8986\u76d6\u4e86\u5c31\u884c\u3002\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(n\\log n)$\u4e86qwq\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int N = 8e4 + 10;\n\nint n, m, q, p, l;\nint a[N], b[N], f[N][20], sz[N], d[N];\nint id, T[N], ls[N * 20], rs[N * 20], s[N * 20];\nvector<int> G[N];\n\nvoid build(int &rt, int l, int r) {\n    rt = ++ id; s[rt] = 0;\n    if(l < r) {\n        int mid = (l + r) >> 1;\n        build(ls[rt], l, mid);\n        build(rs[rt], mid + 1, r);;\n    }\n}\n\nvoid update(int &rt, int pre, int l, int r, int x) {\n    if(!rt) rt = ++ id; s[rt] = s[pre] + 1;\n    if(l == r) return ;\n    int mid = (l + r) >> 1;\n    if(x <= mid) rs[rt] = rs[pre], update(ls[rt], ls[pre], l, mid, x);\n    else ls[rt] = ls[pre], update(rs[rt], rs[pre], mid + 1, r, x);\n}\n\nint query(int u, int v, int x, int y, int l, int r, int k) {\n    if(l == r) return l;\n    int sum = s[ls[u]] + s[ls[v]] - s[ls[x]] - s[ls[y]];\n    int mid = (l + r) >> 1;\n    if(k <= sum) return query(ls[u], ls[v], ls[x], ls[y], l, mid, k);\n    return query(rs[u], rs[v], rs[x], rs[y], mid + 1, r, k - sum);\n}\n\nvoid dfs(int u, int fa = 0) {\n    f[u][0] = fa; sz[u] = 1; d[u] = d[fa] + 1;\n    for(int i = 1; i <= l; i ++)\n        f[u][i] = f[f[u][i - 1]][i - 1];\n    update(T[u], T[fa], 1, p, a[u]);\n    for(int i = 0; i < G[u].size(); i ++) {\n        int v = G[u][i];\n        if(v != fa) {\n            dfs(v, u); sz[u] += sz[v];\n        }\n    }\n}\n\nint find(int u) {\n    for(int i = l; i >= 0; i --)\n        if(f[u][i]) u = f[u][i];\n    return u;\n}\n\nint lca(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    int x = d[u] - d[v];\n    for(int i = l; i >= 0; i --)\n        if(x >> i & 1) u = f[u][i];\n    if(u == v) return u;\n    for(int i = l; i >= 0; i --)\n        if(f[u][i] != f[v][i]) {\n            u = f[u][i]; v = f[v][i];\n        }\n    return f[u][0];\n}\n\nint main() {\n    scanf(\"%*d%d%d%d\", &n, &m, &q);\n    for(l = 1; (1 << l) <= n; l ++) ;\n    for(int i = 1; i <= n; i ++) {\n        scanf(\"%d\", a + i); b[i] = a[i];\n    }\n    sort(b + 1, b + n + 1);\n    p = unique(b + 1, b + n + 1) - b - 1;\n    for(int i = 1; i <= n; i ++)\n        a[i] = lower_bound(b + 1, b + p + 1, a[i]) - b;\n    int u, v, k;\n    for(int i = 1; i <= m; i ++) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    build(T[0], 1, p);\n    for(int i = 1; i <= n; i ++)\n        if(!sz[i]) dfs(i);\n    char op[4];\n    for(int la = 0, i = 1; i <= q; i ++) {\n        scanf(\"%s%d%d\", op, &u, &v);\n        u ^= la; v ^= la;\n        if(* op == 'Q') {\n            scanf(\"%d\", &k); k ^= la;\n            int t = lca(u, v);\n            k = query(T[u], T[v], T[t], T[f[t][0]], 1, p, k);\n            printf(\"%d\\n\", la = b[k]);\n        }\n        if(* op == 'L') {\n            G[u].push_back(v);\n            G[v].push_back(u);\n            int x = find(u), y = find(v);\n            if(sz[x] < sz[y]) {\n                swap(u, v); swap(x, y);\n            }\n            dfs(v, u); sz[x] += sz[v];\n        }\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1550125897,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "P3302\u300cSDOI 2013\u300d\u68ee\u6797\u300c\u542f\u53d1\u5f0f\u5408\u5e76\u300d"
    },
    {
        "content": "# Description\n\n\u5c0fZ\u6709\u4e00\u7247\u68ee\u6797\uff0c\u542b\u6709N\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u4f5c\u4e3a\u6743\u503c\u3002\u521d\u59cb\u7684\u65f6\u5019\uff0c\u68ee\u6797\u4e2d\u6709M\u6761\u8fb9\u3002\n\n\u5c0fZ\u5e0c\u671b\u6267\u884cT\u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4e24\u7c7b\uff1a\n\n1. `Q x y k`\u67e5\u8be2\u70b9x\u5230\u70b9y\u8def\u5f84\u4e0a\u6240\u6709\u7684\u6743\u503c\u4e2d\uff0c\u7b2ck\u5c0f\u7684\u6743\u503c\u662f\u591a\u5c11\u3002\u6b64\u64cd\u4f5c\u4fdd\u8bc1\u70b9x\u548c\u70b9y\u8fde\u901a\uff0c\u540c\u65f6\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u81f3\u5c11\u6709k\u4e2a\u70b9\u3002\n2. `L x y`\u5728\u70b9x\u548c\u70b9y\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002\u4fdd\u8bc1\u5b8c\u6210\u6b64\u64cd\u4f5c\u540e\uff0c\u4ecd\u7136\u662f\u4e00\u7247\u68ee\u6797\u3002\n\n\u4e3a\u4e86\u4f53\u73b0\u7a0b\u5e8f\u7684\u5728\u7ebf\u6027\uff0c\u6211\u4eec\u628a\u8f93\u5165\u6570\u636e\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u8bbelastans\u4e3a\u7a0b\u5e8f\u4e0a\u4e00\u6b21\u8f93\u51fa\u7684\u7ed3\u679c\uff0c\u521d\u59cb\u7684\u65f6\u5019lastans\u4e3a0\u3002\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u7684\u64cd\u4f5c`Q x y k`,\u5176\u771f\u5b9e\u64cd\u4f5c\u4e3a`Q x^lastans y^lastans k^lastans`\u3002\n- \u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u7684\u64cd\u4f5c`L x y`\uff0c\u5176\u771f\u5b9e\u64cd\u4f5c\u4e3a`L x^lastans y^lastans`\u3002\u5176\u4e2d^\u8fd0\u7b97\u7b26\u8868\u793a\u5f02\u6216\uff0c\u7b49\u4ef7\u4e8epascal\u4e2d\u7684xor\u8fd0\u7b97\u7b26\u3002\n\n\u8bf7\u5199\u4e00\u4e2a\u7a0b\u5e8f\u4f86\u5e2e\u52a9\u5c0fZ\u5b8c\u6210\u8fd9\u4e9b\u64cd\u4f5c\u3002\n\n# Solution\n\n\u67e5\u8be2\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u6765\u5b8c\u6210\uff0c\u7136\u800c\u8fde\u63a5\u6811\u7684\u64cd\u4f5c\u53c8\u8ba9\u6211\u4eec\u60f3\u5230\u4e86lct\u3002\u600e\u4e48\u529e\u5462\uff1f~~\u4e3b\u5e2d\u6811+LCT\uff1f~~(\u636e\u8bf4\u8fd8\u771f\u6709\u4eba\u8fd9\u4e48\u5e72)\n\n\u542f\u53d1\u5f0f\u5408\u5e76\uff01\n\n\u6ca1\u9519\uff0c\u6211\u4eec\u7528\u9009\u62e9\u7528\u4e3b\u5e2d\u6811\u6765\u5b8c\u6210\u8fd9\u9053\u9898\uff0c\u5408\u5e76\u65f6\u91c7\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6bcf\u6b21\u5408\u5e76\u65f6\u90fd\u7528\u5927\u5c0f\u8f83\u5c0f\u7684\u6811\u5f80\u5927\u7684\u5408\u5e76\uff0c\u7136\u540e\u66b4\u529b\u904d\u5386\u5927\u5c0f\u8f83\u5c0f\u7684\u6811\u66f4\u65b0\u500d\u589e\u6570\u7ec4\u548c\u4e3b\u5e2d\u6811\u5373\u53ef\n\n```cpp\n#pragma GCC diagnostic error \"-std=c++11\"\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#define _size_ (tr[tr[x].l].size + tr[tr[y].l].size - tr[tr[lca].l].size - tr[tr[fa_lca].l].size)\n#define pii pair < int , int >\n#define pll pair < LL, LL >\n#define mid ((l + r) >> 1)\n#define mp make_pair\n#define fir first\n#define sec second\n#define pub push_back\n#define pob pop_back\n\nusing namespace std;\ntypedef long long LL;\n\n#define io_e '\\0'\n#define io_s ' '\n#define io_l '\\n'\n#define _DEBUG_ 1 // debug toggle\nnamespace Fast_IO {\n\t#ifndef _DEBUG_\n\t\t#define gc() (iS == iT ? (iT = (iS = ibuff) + fread(ibuff, 1, SIZ, stdin), (iS == iT ? EOF : *iS++)) : *iS++)\n\t#else\n\t\t#define gc() getchar()\n\t#endif\n\tconst int SIZ = 1 << 21 | 1;\n\tchar *iS, *iT, ibuff[SIZ], obuff[SIZ], *oS = obuff, *oT = oS + SIZ - 1, fu[110], c;\n\tint fr;\n\tinline void ioout() {\n\t    fwrite(obuff, 1, oS - obuff, stdout);\n\t    oS = obuff;\n\t}\n\ttemplate <class Type>\n\tinline void read(Type& x) {\n\t    x = 0;\n\t    Type y = 1;\n\t    for (c = gc(); (c > '9' || c < '0') && c ^ '-'; c = gc())\n\t        ;\n\t    c == '-' ? y = -1 : x = (c & 15);\n\t    for (c = gc(); c >= '0' && c <= '9'; c = gc()) x = x * 10 + (c & 15);\n\t    x *= y;\n\t}\n\tinline bool blank(char ch) { return ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t'; }\n\tinline void read(char* s) {\n\t    register char ch = gc();\n\t    for (; blank(ch); ch = gc())\n\t        ;\n\t    for (; !blank(ch); ch = gc()) *s++ = ch;\n\t    *s = 0;\n\t}\n\tinline void read(char& c) {\n\t    for (c = gc(); blank(c); c = gc())\n\t        ;\n\t}\n\ttemplate <typename Type, typename... Args>\n\tinline void read(Type& t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <typename... Args>\n\tinline void read(char* t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <typename... Args>\n\tinline void read(char& t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <class Type>\n\tinline void write(char lastChar, Type x) {\n\t    if (x < 0)\n\t        *oS++ = '-', x = -x;\n\t    if (x == 0)\n\t        *oS++ = '0';\n\t    while (x) fu[++fr] = x % 10 + '0', x /= 10;\n\t    while (fr) *oS++ = fu[fr--];\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\tinline void write(char lastChar, char x[]) {\n\t    for (register int i = 0; x[i]; ++i) *oS++ = x[i];\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\tinline void write(char lastChar, char x) {\n\t    *oS++ = x;\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\ttemplate <typename Type, typename... Args>\n\tinline void write(char midChar, Type t, Args... args) {\n\t    write(midChar, t), write(midChar, args...);\n\t}\n}  // namespace Fast_IO\n\nusing Fast_IO::read;\nusing Fast_IO::write;\n\nconst int SIZE = 9e4 + 5;\nconst int LSIZE = SIZE << 7;\nconst int GSIZE = SIZE << 1;\nint n, m, q, waste;\nint tot, rt[LSIZE], b[SIZE];\nint pri_n, edge_tot, a[SIZE];\nint Head[GSIZE], Next[GSIZE];\nint Vertex[GSIZE], Weight[GSIZE];\nint f[SIZE][LSIZE / SIZE >> 2];\nint dp[SIZE], fa[SIZE], id[SIZE];\nint size[SIZE], vis[SIZE];\nstruct TreeNode {\n    int l, r;\n    int size;\n} tr[LSIZE];\n\nvoid add(int x, int y, int z = 1) {\n    Vertex[++edge_tot] = y, Weight[edge_tot] = z;\n    Next[edge_tot] = Head[x], Head[x] = edge_tot;\n}\n\nint find_set(int x) {\n    return x == fa[x] ? x : fa[x] = find_set(fa[x]);\n}\n\nint make(int l, int r) {\n    int u = ++tot;\n    if (l ^ r) return tr[u].l = make(l, mid), tr[u].r = make(mid + 1, r), u;\n    else return 0;\n}\n\nvoid modify(int &u, int pre, int l, int r, int x) {\n    u = ++tot;\n    tr[u] = TreeNode{tr[pre].l, tr[pre].r, tr[pre].size + 1};\n\tif (l ^ r)\n\t\tif (mid >= x) modify(tr[u].l, tr[pre].l, l, mid, x);\n\t\telse modify(tr[u].r, tr[pre].r, mid + 1, r, x);\n\telse return ;\n}\n\nint query(int x, int y, int lca, int fa_lca, int l, int r, int k) {\n\tif (l ^ r)\n\t\tif (_size_ >= k) return query(tr[x].l, tr[y].l, tr[lca].l, tr[fa_lca].l, l, mid, k);\n\t\telse return query(tr[x].r, tr[y].r, tr[lca].r, tr[fa_lca].r, mid + 1, r, k - _size_);\n\telse return l;\n}\n\nvoid dfs(int x, int _rt_) {\n\tfor (int i = 1; i < 17; ++i) f[x][i] = f[f[x][i - 1]][i - 1];\n\tmodify(rt[x], rt[f[x][0]], 1, pri_n, id[x]);\n#define y Vertex[i]\n\tfor (int i = Head[x]; i; i = Next[i]) if (y ^ fa[x]) f[y][0] = x, fa[y] = x, dp[y] = dp[x] + 1, vis[x] = true, size[_rt_]++, dfs(y, _rt_);\n#undef y\n}\n\nint get_lca(int x, int y) {\n\tif (dp[x] < dp[y]) x ^= y ^= x ^= y;\n\tfor (int i = 16; i >= 0; --i) if (f[x][i] && dp[f[x][i]] >= dp[y]) x = f[x][i];\n\tif (x == y) return x;\n\tfor (int i = 16; i >= 0; --i) if (f[x][i] ^ f[y][i]) x = f[x][i], y = f[y][i];\n\treturn f[x][0];\n}\n\nsigned main() {\n\tread(waste, n, m, q);\n\tfor (int i = 1; i <= n; ++i) read(a[i]), b[i] = a[i];\n\tsort(b + 1, b + 1 + n);\n\tpri_n = unique(b + 1, b + 1 + n) - b - 1;\n\tfor (int i = 1; i <= n; ++i) id[i] = lower_bound(b + 1, b + 1 + pri_n, a[i]) - b;\n\tfor (int i = 1, x, y; i <= m; ++i) read(x, y), add(x, y, 1), add(y, x, 1);\n\t*rt = make(1, pri_n);\n\tfor (int i = 1; i <= n; ++i) if (!vis[i]) dfs(i, i), fa[i] = i;\n\tint ans = 0, lastans = 0;\n\tfor (int enum_q = 0; enum_q < q; ++enum_q) {\n\t\tchar opt[5];\n\t\tint x, y, k, lca;\n\t\tread(opt), read(x, y);\n\t\tx ^= lastans, y ^= lastans;\n\t\tif (*opt == 'Q') read(k), k ^= lastans, lca = get_lca(x, y), write(io_l, lastans = ans = b[query(rt[x], rt[y], rt[lca], rt[f[lca][0]], 1, pri_n, k)]);\n\t\telse {\n\t\t\tadd(x, y, 1);\n\t\t\tadd(y, x, 1);\n\t\t\tint u = find_set(x);\n\t\t\tint v = find_set(y);\n\t\t\tif (size[u] < size[v]) x ^= y ^= x ^= y, u ^= v ^= u ^= v;\n\t\t\tf[y][0] = x;\n\t\t\tfa[y] = x;\n\t\t\tdp[y] = dp[x] + 1;\n\t\t\tvis[y] = true;\n\t\t\tsize[u]++;\n\t\t\tdfs(y, v);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1580363460,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "\u7efc\u5408\u6027\u6bd4\u8f83\u5f3a\u7684\u4e00\u9053\u9898\u3002\n\n\u636e\u8bf4\u6709$LCT$+\u4e3b\u5e2d\u6811\u7684\u6bd2\u7624\u505a\u6cd5\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u7fa4\u4eba\u7801\u8fd9\u4e2a\u4e1c\u897f\u7684\u4fe1\u5fc3\u4ece\u54ea\u6765 ~~\u4f46\u4eba\u5bb6\u5230\u5e95\u662f\u7801\u51fa\u6765\u4e86~~\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u6211\u4eec\u8003\u8651\u7528**\u4e3b\u5e2d\u6811**\u5b9e\u73b0\u3002\n\n\u5173\u952e\u662f\u600e\u4e48\u5efa\u624d\u80fd\u7ef4\u62a4\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u3002\n\n\u5bf9\u4e8e**\u539f\u6811**\u4e2d\u7684\u8282\u70b9$u$\uff0c\u6211\u4eec\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u7684\u662f\u4ece\u6839\u5230$u$\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u6211\u4eec\u5148\u8ba1\u7b97\u51fa$lca(u,v)$\u4ee5\u53ca$fa[lca]$\uff0c\u7136\u540e\u6211\u4eec\u5728\u8be2\u95ee\u65f6\u8fd9\u4e48\u8ba1\u7b97\uff1a\n\n```cpp\nint query(int u,int v,int lca,int falca,int l,int r,int k)\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1,minus=\n    t[t[u].ch[0]].size+t[t[v].ch[0]].size-t[t[lca].ch[0]].size-t[t[falca].ch[0]].size;\n    if(minus>=k) \n    \treturn query(t[u].ch[0],t[v].ch[0],t[lca].ch[0],t[falca].ch[0],l,mid,k);\n    else \n    \treturn query(t[u].ch[1],t[v].ch[1],t[lca].ch[1],t[falca].ch[1],mid+1,r,k-minus);\n}\n```\n\n$minus$\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u4e2a\u56fe\u770b\u4e00\u4e0b\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191228104834178.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u5176\u4e2d\u7ea2\u8272\u7684\u4e3a\u6211\u4eec\u52a0\u4e0a\u7684\u90e8\u5206\uff0c\u84dd\u8272\u7684\u4e3a\u6211\u4eec\u51cf\u53bb\u7684\u90e8\u5206\uff0c\u5269\u4e0b\u7684\u5c31\u662f$u\\rightarrow v$\u7684\u8def\u5f84\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u7b97\u7b2c$k$\u5927\u4e86\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\uff0c\u6211\u4eec\u8003\u8651\u7528**\u542f\u53d1\u5f0f\u5408\u5e76**\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u52a0\u8fb9\u628a$size$\u5c0f\u7684\u6811\u5f80$size$\u5927\u7684\u6811\u5408\u5e76\u3002\n\n\u7136\u540e\u66b4\u529b\u904d\u5386\u90a3\u68f5$size$\u5c0f\u7684\u6811\uff0c\u5e76\u66f4\u65b0\u6811\u4e2d\u70b9\u7684\u500d\u589e\u6570\u7ec4\u548c\u4e3b\u5e2d\u6811\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n \n#define LN 17\n#define N 80010\n#define lc t[u].ch[0]\n#define rc t[u].ch[1]\n \nusing namespace std;\n \nstruct Tree\n{\n    int ch[2],size;\n}t[N<<7];\n \nint testcase,n,m,q;\nint tot,root[N*LN];\nint nn,val[N],b[N];\nint cnt,head[N],nxt[N<<1],to[N<<1];\nint fa[N][LN],d[N],f[N],size[N];\nbool vis[N];\n \nvoid adde(int u,int v)\n{\n    to[++cnt]=v;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n}\n \nint find(int x)\n{\n    return x==f[x]?x:f[x]=find(f[x]);\n}\n \nvoid work()\n{\n    sort(b+1,b+n+1);\n    nn=unique(b+1,b+n+1)-b-1;\n    for(int i=1;i<=n;i++)\n        val[i]=lower_bound(b+1,b+nn+1,val[i])-b;\n}\n \nint build(int l,int r)\n{\n    int u=++tot;\n    if(l==r) return 0;\n    int mid=(l+r)>>1;\n    lc=build(l,mid);\n    rc=build(mid+1,r);\n    return u;\n}\n \nvoid insert(int &u,int last,int l,int r,int val)\n{\n    u=++tot;\n    t[u]=t[last],t[u].size++;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(val<=mid) insert(lc,t[last].ch[0],l,mid,val);\n    else insert(rc,t[last].ch[1],mid+1,r,val);\n}\n \nint query(int u,int v,int lca,int falca,int l,int r,int k)\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1,minus=t[t[u].ch[0]].size+t[t[v].ch[0]].size-t[t[lca].ch[0]].size-t[t[falca].ch[0]].size;//\u4e0a\u9762\u8bb2\u5230\u7684\u8ba1\u7b97\u65b9\u6cd5\n    if(minus>=k) return query(t[u].ch[0],t[v].ch[0],t[lca].ch[0],t[falca].ch[0],l,mid,k);\n    else return query(t[u].ch[1],t[v].ch[1],t[lca].ch[1],t[falca].ch[1],mid+1,r,k-minus);\n}\n \nvoid dfs(int u,int rt)\n{\n    vis[u]=true,size[rt]++;\n    for(int i=1;i<=16;i++)   \n        fa[u][i]=fa[fa[u][i-1]][i-1];//\u66f4\u6539\u500d\u589e\u6570\u7ec4\n    insert(root[u],root[fa[u][0]],1,nn,val[u]);//\u66f4\u65b0\u4e3b\u5e2d\u6811\n    for(int i=head[u];i;i=nxt[i])\n    {\n        int v=to[i];\n        if(v==f[u])continue;\n        fa[v][0]=u,f[v]=u;\n        d[v]=d[u]+1;\n        dfs(v,rt);\n    }\n}\n \nint LCA(int a,int b)\n{\n    if(d[a]<d[b]) swap(a,b);\n    for(int i=16;i>=0;i--)\n        if(fa[a][i]&&d[fa[a][i]]>=d[b])\n            a=fa[a][i];\n    if(a==b) return a;\n    for(int i=16;i>=0;i--)\n        if(fa[a][i]!=fa[b][i])\n            a=fa[a][i],b=fa[b][i];\n    return fa[a][0];\n}\n \nint main()\n{\n    scanf(\"%d%d%d%d\",&testcase,&n,&m,&q);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&val[i]),b[i]=val[i];\n    work();\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        adde(u,v),adde(v,u);\n    }\n    root[0]=build(1,nn);\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        {\n            dfs(i,i);\n            f[i]=i;\n        }\n    }\n    int ans=0;\n    while(q--)\n    {\n        char ch=getchar();\n        int u,v;\n        while(ch!='Q'&&ch!='L') ch=getchar();\n        scanf(\"%d%d\",&u,&v);\n        u^=ans,v^=ans;\n        if(ch=='Q')\n        {\n            int k;\n            scanf(\"%d\",&k);\n            k^=ans;\n            int lca=LCA(u,v);\n            printf(\"%d\\n\",ans=b[query(root[u],root[v],root[lca],root[fa[lca][0]],1,nn,k)]);\n        }\n        if(ch=='L')\n        {\n            adde(u,v),adde(v,u);\n            int a=find(u),b=find(v);\n            if(size[a]<size[b])\n            {\n                swap(a,b);\n                swap(u,v);\n            }\n            fa[v][0]=u,f[v]=u;\n            d[v]=d[u]+1;\n            dfs(v,a);//\u66b4\u529b\u904d\u5386\n        }\n    }\n}\n```",
        "postTime": 1577502089,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "\u9898\u610f\uff0c\u7ed9\u4e00\u4e2a\u68ee\u6797\uff0c\u652f\u6301\u8fde\u8fb9\u548c\u67e5\u8be2\u8def\u5f84\u7b2cK\u5c0f\uff0c\u5f3a\u5236\u5728\u7ebf\n\n\u5148\u8003\u8651\u672c\u9898\u7684\u5f31\u5316\u7248\uff0c\u4e0d\u5f3a\u5236\u5728\u7ebf  \n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u5148\u5c06\u6240\u6709\u64cd\u4f5c\u8bfb\u5165\u3002\u56e0\u4e3a\u6ca1\u6709\u5220\u8fb9\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u8fde\u8fb9\u64cd\u4f5c\u5168\u90e8\u7edf\u4e00\u6267\u884c\uff0c\u5f97\u5230\u6700\u7ec8\u68ee\u6797\u7684\u5f62\u6001\u3002\u7136\u540e\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u6839\u8282\u70b9\u8fde\u63a5\u6240\u6709\u68ee\u6797\u7684\u6839\u8282\u70b9\uff0c\u5f97\u5230\u4e00\u68f5\u6811\uff0c\u6700\u540e\u505a[**Coutn on a tree**](https://www.luogu.org/problemnew/show/P2633)\u8fd9\u9898\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(Nlog_2N)$\n\n\u73b0\u5728\u9898\u76ee\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7a0d\u5fae\u4fee\u6539[**Coutn on a tree**](https://www.luogu.org/problemnew/show/P2633)\u8fd9\u9898\u3002\n\n\n\u9996\u5148\u6211\u4eec\u521d\u59cb\u5316\u68ee\u6797\u7684\u5f62\u6001\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f  \n - $Dist_x$  \u8282\u70b9$x$\u5230\u6839\u7684\u8ddd\u79bb\n - $F_x[T]$\u6570\u7ec4 $F[x][i]$\u8868\u793a$x$\u8282\u70b9\u7684$2^i$\u500d\u7956\u5148\uff0c\u7528\u4e8e\u6c42$LCA$\n - $Root_x$  \u8282\u70b9$x$\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u6784\u6210\u7684\u6743\u503c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\n - $Size_x$  \u4ee5\u8282\u70b9$x$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570\n \n\u53ea\u7528\u4e00\u904dDFS\u5373\u53ef\n```cpp\nint u[N],b[N],size[N],F[N][26],d[N];\nvoid dfs(int x,int f){\n\troot[x]=insert(root[f],1,top,lower_bound(b+1,b+top+1,v[x])-b);\n\tsize[x]=0;fa[x]=f?get(f):x;d[x]=d[f]+1;F[x][0]=f;\n\tfor(int i=1;i<=24;i++)\n\t  F[x][i]=F[F[x][i-1]][i-1];\n\tfor(int i=h[x];i;i=e[i].next)\n\t  if(e[i].to!=f)\n\t    dfs(e[i].to,x),size[x]+=size[e[i].to];\n\tsize[x]++;\n}\n```\n\n\u4e3b\u5e2d\u6811\u548c\u5e76\u67e5\u96c6\n\n```cpp\nstruct node{\n\tint l,r;\n\tint sum;\n}a[N<<7];\nint tot=0;\nint build(int l,int r){\n\tint p=++tot;\n\ta[p].sum=0;\n\tif(l==r)return p;\n\tint mid=(l+r)>>1;\n\ta[p].l=build(l,mid);\n\ta[p].r=build(mid+1,r);\n\treturn p;\n}\nint insert(int now,int l,int r,int to){\n\tint p=++tot;\n\ta[p]=a[now];\n\tif(l==r){\n\t\ta[p].sum++;\n\t\treturn p;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=to)a[p].l=insert(a[now].l,l,mid,to);\n\telse a[p].r=insert(a[now].r,mid+1,r,to);\n\ta[p].sum=a[a[p].l].sum+a[a[p].r].sum;\n\treturn p;\n}\nint ask(int p,int q,int o,int h,int l,int r,int k){\n\tif(l==r)return l;\n\tint sum=(a[a[p].l].sum+a[a[q].l].sum-a[a[o].l].sum-a[a[h].l].sum);\n\tint mid=(l+r)>>1;\n\tif(sum>=k)return ask(a[p].l,a[q].l,a[o].l,a[h].l,l,mid,k);\n\telse return ask(a[p].r,a[q].r,a[o].r,a[h].r,mid+1,r,k-sum);\n}\nint fa[N],root[N],top=0;\nint get(int x){\n\treturn fa[x]==x?x:fa[x]=get(fa[x]);\n}\n```\n\n\u5bf9\u4e8e$L$\u64cd\u4f5c\uff0c\u6839\u636e\u542f\u53d1\u5f0f\u5408\u5e76\u539f\u7406\uff0c\u66b4\u529b\u66f4\u65b0\u8f83\u5c0f\u4e00\u68f5\u5b50\u6811\u7684\u6240\u6709\u6570\u636e\uff0c\u518d\u5728$x$\u4e0e$y$\u4e4b\u95f4\u8fde\u8fb9\n\n\u5bf9\u4e8e$Q$\u64cd\u4f5c\uff0c\u6839\u636e\u4e3b\u5e2d\u6811\u7684\u53ef\u52a0\u51cf\u6027\u8d28\uff0c$root_x+root_y-root_{lca(x,y)}-root_{lca(x,y).fa}$ \uff0c\u6700\u540e\u9012\u5f52\u51fa\u6700\u7ec8\u7b54\u6848\n\n\u8bb0\u5f97\u79bb\u6563\u5316\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(Nlog_2N)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(Nlog_2N)$\n\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 80005\nusing namespace std;\nstruct edge{\n\tint to;\n\tint next;\n}e[N<<1];\nint n,m,t,v[N],h[N],pop=0;\nvoid add(int x,int y){\n\te[++pop].to=y;\n\te[pop].next=h[x];\n\th[x]=pop;\n}\nstruct node{\n\tint l,r;\n\tint sum;\n}a[N<<7];\nint tot=0;\nint build(int l,int r){\n\tint p=++tot;\n\ta[p].sum=0;\n\tif(l==r)return p;\n\tint mid=(l+r)>>1;\n\ta[p].l=build(l,mid);\n\ta[p].r=build(mid+1,r);\n\treturn p;\n}\nint insert(int now,int l,int r,int to){\n\tint p=++tot;\n\ta[p]=a[now];\n\tif(l==r){\n\t\ta[p].sum++;\n\t\treturn p;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=to)a[p].l=insert(a[now].l,l,mid,to);\n\telse a[p].r=insert(a[now].r,mid+1,r,to);\n\ta[p].sum=a[a[p].l].sum+a[a[p].r].sum;\n\treturn p;\n}\nint ask(int p,int q,int o,int h,int l,int r,int k){\n\tif(l==r)return l;\n\tint sum=(a[a[p].l].sum+a[a[q].l].sum-a[a[o].l].sum-a[a[h].l].sum);\n\tint mid=(l+r)>>1;\n\tif(sum>=k)return ask(a[p].l,a[q].l,a[o].l,a[h].l,l,mid,k);\n\telse return ask(a[p].r,a[q].r,a[o].r,a[h].r,mid+1,r,k-sum);\n}\nint fa[N],root[N],top=0;\nint get(int x){\n\treturn fa[x]==x?x:fa[x]=get(fa[x]);\n}\nint u[N],b[N],size[N],F[N][26],d[N];\nvoid dfs(int x,int f){\n\troot[x]=insert(root[f],1,top,lower_bound(b+1,b+top+1,v[x])-b);\n\tsize[x]=0;fa[x]=f?get(f):x;d[x]=d[f]+1;F[x][0]=f;\n\tfor(int i=1;i<=24;i++)\n\t  F[x][i]=F[F[x][i-1]][i-1];\n\tfor(int i=h[x];i;i=e[i].next)\n\t  if(e[i].to!=f)\n\t    dfs(e[i].to,x),size[x]+=size[e[i].to];\n\tsize[x]++;\n}\nint lca(int x,int y){\n    if(d[x]>d[y])swap(x,y);\n    for(int i=24;i>=0;i--)\n      if(d[F[y][i]]>=d[x])y=F[y][i];\n    if(y==x)return x;\n    for(int i=24;i>=0;i--)\n      if(F[x][i]!=F[y][i])\n        x=F[x][i],y=F[y][i];\n    return F[x][0];\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tscanf(\"%d%d%d\",&n,&m,&t);\n\tfor(int i=1;i<=n;i++)\n\t  scanf(\"%d\",&v[i]),u[i]=v[i];\n\tsort(u+1,u+n+1);\n\tfor(int i=1;i<=n;i++)\n\t  if(u[i]!=u[i-1])\n\t    b[++top]=u[i];\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\troot[0]=build(1,top);\n\tfor(int i=1;i<=n;i++)\n\t  if(fa[i]==i)dfs(i,0);\n\tint lastans=0;\n\tfor(int i=1;i<=t;i++){\n\t\tchar opt[2];scanf(\"%s\",opt);\n\t\tint x,y,k;scanf(\"%d%d\",&x,&y);\n\t\tx^=lastans;y^=lastans;\n\t\tif(opt[0]=='L'){\n\t\t\tif(size[get(x)]>size[get(y)])swap(x,y);\n\t\t\tdfs(x,y);size[get(y)]+=size[x];\n\t\t\tadd(x,y);add(y,x);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&k);k^=lastans;\n\t\t\tprintf(\"%d\\n\",lastans=b[ask(root[x],root[y],root[lca(x,y)],root[F[lca(x,y)][0]],1,top,k)]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1558857074,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "# \u6b63\u9898\n\n       \u4e00\u770b\u5230\u9898\u76ee\uff0c\u5c31\u4ee4\u4eba\u7a92\u606f\u3002\u3002\u3002\u68ee\u6797\n\n      \u68ee\u6797\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u5f00\u59cb\u6709\u5f88\u591a\u68f5\u6811\u3002\u7136\u540e\u8981\u67e5\u627e\u8def\u5f84\u7b2ck\u5927\u3002\n\n      \u660e\u663e\u8981\u627elca\uff0c\u5c31\u60f3\u5230\u4e86\u6811\u94fe\u5256\u5206\u3002\u6bcf\u6b21\u5f80\u4e0a\u8df3\u628a\u5f53\u524d\u8fd9\u4e00\u6bb5\u8bb0\u5f55\u4e0b\u6765\uff0c\u5f88\u660e\u663e\u8981\u5f00n\u68f5\u524d\u7f00\u4e3b\u5e2d\u6811\u3002\n\n      \u7136\u540e\u518d\u8ba9\u627e\u51fa\u6765\u7684op\u4e2a\u533a\u95f4\u76f8\u51cf\uff08right-(left-1)\uff09\uff0c\u53d8\u6210op\u4e2a\u533a\u95f4\u548cop\u4e2a\u533a\u95f4\u76f8\u51cf\u3002\u6240\u4ee5\u5f80\u4e0b\u8df3\u5373\u53ef\u3002\n\n      \u95ee\u9898\u5c31\u662f\u52a0\u8fb9\u8981\u91cd\u5efa\uff0c\u800c\u4e14\u4f60\u4e0d\u77e5\u9053\u4f60\u4e4b\u524d\u7528\u8fc7\u54ea\u4e9b\u7f16\u53f7\u3002\u4f46\u662f\u83ab\u540d\u6c34\u523030emm\u3002\n\n      \u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u627f\u62c5\u4e0d\u8d77\u3002\n\n      \u60f3\u5230\u4e00\u79cd\u66f4\u4ee4\u4eba\u7a92\u606f\u7684\u505a\u6cd5\u3002\n\n      \u6253\u7834\u601d\u7ef4\u683c\u5c40\uff0c\u6bcf\u4e2a\u70b9\u7ee7\u627f\u4ed6\u7684\u7236\u4eb2\u7684\u539f\u6709\u5b50\u6811\uff0c\u5e76\u4fee\u6539\u5f53\u524d\u70b9\u6743\u503c\u6240\u5728\u7684\u94fe\u3002\u5c31\u662f\u8bf4\uff0c\u5f53\u524d\u4e3b\u5e2d\u4e66\u7ef4\u62a4\u7684\u662f\u6839\u5230i\u70b9\u7684\u4fe1\u606f\u3002\n\n      \u90a3\u4e48\u627e\u7b54\u6848\u4e5f\u662f\u5341\u5206\u8fc5\u6377\u7684\uff0cx\u5230y\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528x+y-lca(x,y)-fa(lca(x,y))\u56db\u68f5\u4e3b\u5e2d\u6811\u5f80\u4e0b\u8df3\u5373\u53ef\u3002\n\n      \u4e3a\u4ec0\u4e48?\n\n![](https://img-blog.csdn.net/20180528191707560)\n\n      \u50cf\u4e0a\u9762\u8fd9\u68f5\u4e11\u964b\u7684\u6811\u3002x\u70b9\u6240\u5728\u7684\u4e3b\u5e2d\u6811\u8bb0\u5f55\u7684\u662f\u84dd\u8272\u4e09\u89d2\u5f62\u7684\u4fe1\u606f\uff0cy\u70b9\u8bb0\u5f55\u7684\u662f\u7eff\u8272\u6240\u5728\u70b9\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u51cf\u53bblca\u6240\u8bb0\u5f55\u7684\u4fe1\u606f\u548clca\u7684\u7236\u4eb2\u6240\u5728\u70b9\u6240\u8bb0\u5f55\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u5f97\u51fa\u6765\u6a59\u8272\u7ebf\uff08\u8def\u5f84\uff09\u7684\u4fe1\u606f\u5566\uff01\n\n      \u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u628a\u8fd9\u4e2a\u70b9\uff08lca\uff09\u627e\u51fa\u6765\uff08\u500d\u589e\uff09\uff0c\u7136\u540e\u5728\u6c42\u89e3\u5373\u53ef\u3002\n\n      \u5bf9\u4e8e\u8fde\u8fb9\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u4f1a\u60f3\u5230\u4e00\u79cd\u795e\u5947\u7684\u52a0\u5feb\u5408\u5e76\u7684\u65b9\u6cd5\u2014\u2014\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u5b50\u6811\u7684\u5927\u5c0f\u5373\u53ef\uff0c\u91cd\u65b0\u6784\u56fe\uff08\u4e0d\u6015emm\uff09\u3002\n\n\u4ee3\u7801<\u6709\u4e24\u4efd\uff0c\u53e6\u5916\u4e00\u4efd\u592a\u4e11\u964b>\n\n```cpp\n#include<cstdio>  \n#include<cstdlib>  \n#include<cstring>  \n#include<iostream>  \n#include<queue>  \nusing namespace std;  \n  \nint n,m,t;  \nint d[160010];  \nint f[160010][20];  \nint dep[160010];  \nint spj[160010];  \nint root[2000010];  \nint ls[25000010],rs[25000010],c[25000010];  \nint we[25000010];  \nstruct edge{  \n    int y,next;  \n}s[320010];  \nint tot=0,v;  \nint op=0;  \nint first[80010];  \nint son[80010];  \nint fa[80010];  \nint len=0;  \nqueue<int> q;  \n  \nint read(){  \n    char ch;  \n    ch=getchar();  \n    int t=0;  \n    while(ch<'0' || ch>'9') ch=getchar();  \n    while(ch>='0' && ch<='9') t=t*10+ch-'0',ch=getchar();  \n    return t;  \n}  \n  \nint findpa(int x){  \n    if(fa[x]!=x) return fa[x]=findpa(fa[x]);  \n    return x;  \n}  \n  \nvoid ins(int x,int y){  \n    len++;  \n    s[len].y=y;s[len].next=first[x];first[x]=len;  \n}  \n  \nvoid update(int w,int &now,int x,int y,int num){  \n    if(q.empty()) now=++tot;  \n    else {  \n        now=q.front();  \n        q.pop();  \n    }  \n    ls[now]=ls[w];rs[now]=rs[w];c[now]=c[w];  \n    we[now]=num;  \n    c[now]++;  \n    if(x==y) return ;  \n    if(v<=(x+y)/2) update(ls[w],ls[now],x,(x+y)/2,num);  \n    else update(rs[w],rs[now],(x+y)/2+1,y,num);  \n}  \n  \nvoid recycle(int now,int x){  \n    if(now==0) return;  \n    if(we[ls[now]]==x) recycle(ls[now],x);  \n    if(we[rs[now]]==x) recycle(rs[now],x);  \n    q.push(now);  \n}  \n  \nvoid dfs(int x){  \n    son[x]=1;  \n    fa[x]=f[x][0];  \n    if(fa[x]==0) fa[x]=x;  \n    for(int i=1;i<=16;i++) f[x][i]=f[f[x][i-1]][i-1];  \n    v=d[x];  \n    recycle(root[spj[x]],x);  \n    update(root[spj[f[x][0]]],root[++op],0,1e9,x);  \n    spj[x]=op;  \n    for(int i=first[x];i!=0;i=s[i].next){  \n        int y=s[i].y;  \n        if(y!=f[x][0]){  \n            f[y][0]=x;  \n            dep[y]=dep[x]+1;  \n            dfs(y);  \n            son[x]+=son[y];  \n        }  \n    }  \n}  \n  \nint get_lca(int x,int y){  \n    if(dep[x]<dep[y]) swap(x,y);  \n    for(int i=16;i>=0;i--)  \n        if(dep[f[x][i]]>=dep[y]) x=f[x][i];  \n    if(x==y) return x;  \n    for(int i=16;i>=0;i--)  \n        if(f[x][i]!=f[y][i]){  \n            x=f[x][i];  \n            y=f[y][i];  \n        }  \n    return f[x][0];  \n}  \n  \nint solve(int x,int y,int z,int q,int l,int r,int k){  \n    if(l==r) return l;  \n    int temp=c[ls[x]]+c[ls[y]]-c[ls[z]]-c[ls[q]];  \n    if(k<=temp) return solve(ls[x],ls[y],ls[z],ls[q],l,(l+r)/2,k);  \n    else return solve(rs[x],rs[y],rs[z],rs[q],(l+r)/2+1,r,k-temp);  \n}  \n  \nint main(){  \n    n=read();  \n    n=read(),m=read(),t=read();  \n    for(int i=1;i<=n;i++) d[i]=read();  \n    for(int i=1;i<=m;i++){  \n        int x,y;  \n        x=read();y=read();  \n        ins(x,y);  \n        ins(y,x);  \n    }  \n    for(int i=1;i<=n;i++)  \n        if(dep[i]==0){  \n            f[i][0]=0;  \n            dep[i]=1;  \n            dfs(i);  \n        }  \n    char ch[2];  \n    int x,y,k;  \n    int last=0;  \n    while(t--){  \n        scanf(\"%s\",ch);  \n        if(ch[0]=='Q'){  \n            x=read();y=read();k=read();  \n            x^=last;y^=last;k^=last;  \n            int lca=get_lca(x,y);  \n            printf(\"%d\\n\",last=solve(root[spj[x]],root[spj[y]],root[spj[lca]],root[spj[f[lca][0]]],0,1e9,k));  \n        }  \n        else{  \n            x=read();y=read();  \n            x^=last;y^=last;  \n            int u=findpa(x),v=findpa(y);  \n            if(son[u]<son[v]){  \n                swap(x,y);  \n                swap(u,v);  \n            }  \n            ins(x,y);  \n            ins(y,x);  \n            f[y][0]=x;  \n            dep[y]=dep[x]+1;  \n            dfs(y);  \n            son[u]+=son[y];  \n        }  \n    }  \n}\n```",
        "postTime": 1527506698,
        "uid": 29093,
        "name": "Deep_Kevin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "\n\u9898\u76ee\u8981\u6c42\u7684\u662f\u5b9e\u73b0\u4e24\u4e2a\u64cd\u4f5c\uff1a\u67e5\u8be2\u533a\u95f4k\u5c0f\u503c\u548c\u8fde\u8fb9\u64cd\u4f5c\u3002\n\n\u67e5\u8be2\uff1a\u4e3b\u5e2d\u6811\n\n~~\u8fde\u8fb9\uff1aLCT~~\n\n~~\u4e3b\u5e2d\u6811+LCT~~\n\n\u9996\u5148\u7801\u91cf\u5c31\u6709\u4e00\u5b9a\u538b\u529b\u3001\u7a0b\u5e8f\u7684\u5b9e\u73b0\u6027\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u4e0d\u80fd\u505a\u3002\n\n\u90a3\u6709\u6ca1\u6709\u4e00\u4e9b\u66f4\u5bb9\u6613\u5b9e\u73b0\u7684\u65b9\u6cd5\u5462\uff1f\n\n\u770b\u8d77\u6765\u597d\u50cf\u533a\u95f4k\u5c0f\u503c\u5e94\u8be5\u662f\u4e3b\u5e2d\u6811\u8dd1\u4e0d\u6389\u4e86\uff0c\u90a3\u8fde\u8fb9\u64cd\u4f5c\u5462\uff1f\n\n\u597d\u50cf\u53ef\u4ee5\u5408\u5e76\u4e3b\u5e2d\u6811\u3002\n\n\u4f46\u53c8\u597d\u50cf\u76f4\u63a5\u65f6\u95f4\u4e0d\u592a\u884c\uff0c\u90a3\u600e\u4e48\u529e\uff1f\n\n~~\u7b54\uff1a\u4e3b\u5e2d\u6811+LCT~~ \n\n\u5176\u5b9e\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5bf9\u6bcf\u4e00\u68f5\u539f\u6811\u8bb0\u5f55\u5b83\u7684size\uff0c\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u5c31\u76f8\u5f53\u4e8e\u5c06\u4e00\u68f5\u6811\u5408\u5e76\u5230\u53e6\u4e00\u68f5\u6811\u4e0a\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06size\u5c0f\u7684\u5408\u5e76\u5230size\u5927\u7684\u4e0a\u9762\u53bb\uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\uff0c\u4fee\u6539\u65f6\u76f4\u63a5\u627e\u5230\u5e76\u67e5\u96c6\u9876\u7aef\u7684\u5143\u7d20\u5373\u53ef\u3002\n\n**\u9898\u76ee\u8981\u6c42\u7684\u662f\u6811\u4e0a\u7684\u533a\u95f4k\u5c0f\uff0c\u6240\u4ee5\u8981\u5bf9\u4e8e\u6811\u5efa\u4e3b\u5e2d\u6811\uff0c\u5176\u5b9e\u5c31\u662f\u513f\u5b50\u5728\u7238\u7238\u7684\u4e3b\u5e2d\u6811\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\uff0c\u8ddf\u666e\u901a\u7684\u4e3b\u5e2d\u6811\u6ca1\u6709\u592a\u5927\u7684\u533a\u522b\uff0c\u4ec5\u4ec5\u9700\u8981dfs\u5efa\u6811\u7f62\u4e86\u3002**\n\n\u5efa\u6811\uff1a\n\n```cpp\nvoid insert(int &hao,int last,int l,int r,int x)//\u63d2\u5165\u70b9\n{\n\thao=++cnt;\n\ttr[hao]=tr[last];\n\ttr[hao].size++;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)\n\t{\n\t\tinsert(tr[hao].lson,tr[last].lson,l,mid,x);\n\t}else{\n\t\tinsert(tr[hao].rson,tr[last].rson,mid+1,r,x);\n\t}\n}\nvoid dfs(int u,int root,int father)//\u5efa\u6811\uff08\u5728\u7238\u7238\u7684\u57fa\u7840\u4e0a\uff09\n{\n\tfa[u][0]=father;//\u8fd9\u91cc\u66f4\u65b0lca\uff0c\u67e5\u8be2\u8981\u7528\n\tfor(int i=1;i<=17;i++)\n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t}\n\tvis[u]=1;\n\tsize[root]++;\n\tdeep[u]=deep[father]+1;\n\tfas[u]=father;\n\tinsert(rt[u],rt[father],1,cnt1,lower_bound(b+1,b+cnt1+1,a[u])-b);\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v!=father)\n\t\t{\n\t\t\tdfs(v,root,u);\n\t\t}\n\t}\n}\n```\n\n\u67e5\u8be2\u65f6\u5c31\u662f\u50cf\u666e\u901a\u4e3b\u5e2d\u6811\u4e00\u6837\u3002\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2019122810395529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDE5NDY4,size_16,color_FFFFFF,t_70)\n\n\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e00\u6761\u8def\u5f84\uff0c\u6240\u4ee5\u9700\u8981\u56db\u4e2a\u5730\u65b9\u7684size\uff1alca\u7684\u7236\u4eb2\uff0clca,x,y\n\n**\u50cf\u56fe\u4e2d\u8fd9\u6837x\u5230\u6839\u7684\u8def\u5f84\uff0cy\u5230\u6839\u7684\u8def\u5f84\u51cf\u53bblca\u5230\u6839\u7684\u8def\u5f84\uff0clca\u7684\u7236\u4eb2\u5230\u6839\u7684\u8def\u5f84\uff0c\u5c31\u5f97\u5230\u4e86\u8981\u6c42\u7684\u8def\u5f84\u3002**\n\n\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6570\u5c31\u662f$x.size+y.size-lca.size-lca\u7684\u7236\u4eb2.size$,\u540c\u7406\uff0c\u5de6\u8fb9\u7684\u4e3b\u5e2d\u6811\u7684size\u4e5f\u53ef\u4ee5\u6c42\u7684\uff0c\u4ece\u800c\u786e\u5b9a\u662f\u5f80\u5de6\u627e\u8fd8\u662f\u5f80\u53f3\u627e\u3002\n\n\u67e5\u8be2\uff1a\n\n```cpp\nint query(int hao,int hao1,int lca,int falca,int l,int r,int k)\n{\n\tif(l==r)\n\t{\n\t\treturn b[l];\n\t}\n\tint mid=(l+r)/2\n\tint midsize=tr[tr[hao].lson].size+tr[tr[hao1].lson].size-tr[tr[lca].lson].size-tr[tr[falca].lson].size;//\u4e3b\u5e2d\u6811\u5de6\u8fb9\u7684size\n\tif(midsize>=k)//\u5f80\u5de6\u627e\u6216\u5f80\u53f3\u627e\n\t{\n\t\treturn query(tr[hao].lson,tr[hao1].lson,tr[lca].lson,tr[falca].lson,l,mid,k);\n\t}else{\n\t\treturn query(tr[hao].rson,tr[hao1].rson,tr[lca].rson,tr[falca].rson,mid+1,r,k-midsize);\n\t}\n}\n```\n\n\u7a0b\u5e8f\uff1a\n\n```cpp\n#pragma GCC optimize(3)\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#define N 80010\nusing namespace std;\nstruct data\n{\n\tint size,lson,rson;\n}tr[N*500];\nint to[N<<2],nxt[N<<2],nct,head[N],fas[N],fa[N][18],cnt,rt[N],cnt1,a[N],b[N],size[N],deep[N],n,m,k,x,y,t,lastans;\nchar s[3];\nbool vis[N];\nvoid adde(int x,int y)\n{\n\tto[++nct]=y;\n\tnxt[nct]=head[x];\n\thead[x]=nct;\n}\nint get_fa(int x)//\u5e76\u67e5\u96c6\u627e\u7238\u7238\n{\n\tif(fas[x]==x)\n\t{\n\t\treturn x;\n\t}\n\treturn fas[x]=get_fa(fas[x]);\n}\nvoid build(int &hao,int l,int r)//\u5efa\u4e00\u68f5\u7a7a\u7684\u6811\uff0c\u4fbf\u4e8e\u64cd\u4f5c\n{\n\thao=++cnt;\n\ttr[hao].size=0;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(tr[hao].lson,l,mid);\n\tbuild(tr[hao].rson,mid+1,r);\n}\nvoid insert(int &hao,int last,int l,int r,int x)//\u63d2\u5165\u70b9\n{\n\thao=++cnt;\n\ttr[hao]=tr[last];\n\ttr[hao].size++;\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)\n\t{\n\t\tinsert(tr[hao].lson,tr[last].lson,l,mid,x);\n\t}else{\n\t\tinsert(tr[hao].rson,tr[last].rson,mid+1,r,x);\n\t}\n}\nvoid dfs(int u,int root,int father)//\u5efa\u6811\uff08\u5728\u7238\u7238\u7684\u57fa\u7840\u4e0a\uff09\n{\n\tfa[u][0]=father;//\u8fd9\u91cc\u66f4\u65b0lca\uff0c\u67e5\u8be2\u8981\u7528\n\tfor(int i=1;i<=17;i++)\n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t}\n\tvis[u]=1;\n\tsize[root]++;\n\tdeep[u]=deep[father]+1;\n\tfas[u]=father;\n\tinsert(rt[u],rt[father],1,cnt1,lower_bound(b+1,b+cnt1+1,a[u])-b);\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v!=father)\n\t\t{\n\t\t\tdfs(v,root,u);\n\t\t}\n\t}\n}\nint get_lca(int x,int y)\n{\n\tif(deep[x]<deep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tfor(int i=17;i>=0;i--)\n\t{\n\t\tif(deep[fa[x][i]]>=deep[y])\n\t\t{\n\t\t\tx=fa[x][i];\n\t\t}\n\t}\n\tif(x==y)\n\t{\n\t\treturn x;\n\t}\n\tfor(int i=17;i>=0;i--)\n\t{\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t{\n\t\t\tx=fa[x][i];\n\t\t\ty=fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\nint query(int hao,int hao1,int lca,int falca,int l,int r,int k)\n{\n\tif(l==r)\n\t{\n\t\treturn b[l];\n\t}\n\tint mid=(l+r)/2,midsize=tr[tr[hao].lson].size+tr[tr[hao1].lson].size-tr[tr[lca].lson].size-tr[tr[falca].lson].size;//\u4e3b\u5e2d\u6811\u5de6\u8fb9\u7684size\n\tif(midsize>=k)//\u5f80\u5de6\u627e\u6216\u5f80\u53f3\u627e\n\t{\n\t\treturn query(tr[hao].lson,tr[hao1].lson,tr[lca].lson,tr[falca].lson,l,mid,k);\n\t}else{\n\t\treturn query(tr[hao].rson,tr[hao1].rson,tr[lca].rson,tr[falca].rson,mid+1,r,k-midsize);\n\t}\n}\nint main()\n{\n//\tfreopen(\"1.txt\",\"r\",stdin);\n\tscanf(\"%d\",&n);\n\tscanf(\"%d%d%d\",&n,&m,&t);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tb[i]=a[i];\n\t\tfas[i]=i;\n\t}\n\tsort(b+1,b+n+1);//\u79bb\u6563\u5316\n\tcnt1=unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadde(x,y);\n\t\tadde(y,x);\n\t}\n\tbuild(rt[0],1,cnt1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!vis[i])\n\t\t{\n\t\t\tdfs(i,i,0);\n\t\t\tfas[i]=i;//\u91cd\u65b0\u786e\u5b9a\u5e76\u67e5\u96c6\u9876\u7aef\u5143\u7d20\uff0c\u4e0d\u7136\u4f1aTLE\n\t\t}\n\t}\n\twhile(t--)//\u64cd\u4f5c\n\t{\n\t\tscanf(\"%s%d%d\",s,&x,&y);\n\t\tx^=lastans;\n\t\ty^=lastans;\n\t\tif(s[0]=='Q')\n\t\t{\n\t\t\tscanf(\"%d\",&k);\n\t\t\tk^=lastans;\n\t\t\tint lca=get_lca(x,y);\n\t\t\tprintf(\"%d\\n\",lastans=query(rt[x],rt[y],rt[lca],rt[fa[lca][0]],1,cnt1,k));\n\t\t}else{\n\t\t\tadde(x,y);\n\t\t\tadde(y,x);\n\t\t\tint xx=get_fa(x),yy=get_fa(y);\n\t\t\tif(size[xx]<size[yy])\n\t\t\t{\n\t\t\t\tswap(xx,yy);\n\t\t\t\tswap(x,y);\n\t\t\t}\n\t\t\tdfs(y,xx,x);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1577501633,
        "uid": 103334,
        "name": "Honor\u8a89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u4e24\u4e2a\u64cd\u4f5c\uff0c\u6811\u4e0a\u8def\u5f84 $k$ \u5c0f\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\uff0c\u4f46\u662f\u8fde\u8fb9\u64cd\u4f5c\u8981\u600e\u4e48\u5904\u7406\u5462\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u6bcf\u6b21\u5408\u5e76\u4e24\u4e2a\u4e24\u68f5\u6811\u65f6\uff0c\u66b4\u529b\u4fee\u6539\u6bcf\u4e2a\u8282\u70b9\u7684\u4e3b\u5e2d\u6811\uff0c\u53ef\u4ee5\u8bc1\u660e\u603b\u7684\u4fee\u6539\u6b21\u6570\u662f $O(nlogn)$ \u7684\uff0c\u8fd9\u663e\u7136\u5728\u6211\u4eec\u7684\u53ef\u627f\u53d7\u8303\u56f4\u5185\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u53d1\u73b0\u5728\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u7528\u5230\u4e24\u70b9\u7684 $lca$\uff0c\u4e8e\u662f\u6211\u4eec\u8fd8\u5f97\u9ad8\u6548\u5408\u5e76 $lca$ \u7684\u4fe1\u606f\uff0c\u663e\u7136\u500d\u589e\u6c42 $lca$ \u7b26\u5408\u6211\u4eec\u7684\u9700\u6c42\uff0c\u5728\u5408\u5e76\u65f6\u76f4\u63a5\u7ef4\u62a4\u5373\u53ef\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef struct node{\n    int ls,rs,sum;\n}node;\n\ntypedef struct edge{\n    int next,to;\n}edge;\n\nedge e[160010];\nnode t[10000010];\nint n,m,q,v[80010],siz,tot,fa[18][80010],a[80010],dep[80010],root[80010],sz[80010],sf[80010],head[80010],et,lasans;\n\ninline int read(){\n    int num=0,k=1; char c=getchar();\n    while(c>'9' || c<'0') k=(c=='-')?0:k,c=getchar();\n    while(c>='0' && c<='9') num=num*10+c-'0',c=getchar();\n    return k?num:-num;\n}\n\ninline int readopt(){\n    char c=getchar();\n    while(c!='Q' && c!='L') c=getchar();\n    return c=='Q';\n}\n\nvoid addegde(int u,int v){\n    e[++et].to=v; e[et].next=head[u]; head[u]=et;\n    e[++et].to=u; e[et].next=head[v]; head[v]=et;\n}\n\nvoid update(int x) {t[x].sum=t[t[x].ls].sum+t[t[x].rs].sum;}\n\nint build(int l,int r){\n    if(l==r) return ++tot;\n    int cur=++tot,mid=(l+r)>>1;\n    t[cur].ls=build(l,mid); t[cur].rs=build(mid+1,r);\n    update(cur);\n    return cur;\n}\n\nint modify(int o,int l,int r,int q){\n    if(l==r) {t[++tot].sum=t[o].sum+1; return tot;}\n    int mid=(l+r)>>1,cur=++tot;\n    if(q<=mid) t[cur].ls=modify(t[o].ls,l,mid,q),t[cur].rs=t[o].rs;\n    else t[cur].ls=t[o].ls,t[cur].rs=modify(t[o].rs,mid+1,r,q);\n    update(cur);\n    return cur;\n}\n\nint find(int x){\n    int l=0,r=siz+1,mid;\n    while(l+1<r){\n        mid=(l+r)>>1;\n        if(v[mid]<x) l=mid;\n        else r=mid;\n    }\n    return r;\n}\n\nint lca(int x,int y){\n    if(dep[x]<dep[y]) swap(x,y);\n    int dp=dep[x]-dep[y];\n    for(int i=17;i>=0;i--) if(dp>=(1<<i)) x=fa[i][x],dp-=(1<<i);\n    if(x==y) return x;\n    for(int i=17;i>=0;i--){\n        if(!fa[i][x] || fa[i][x]==fa[i][y]) continue;\n        x=fa[i][x]; y=fa[i][y];\n    }\n    return fa[0][x];\n}\n\nint sfind(int x){\n    if(sf[x]!=x) return sf[x]=sfind(sf[x]);\n    return x; \n}\n\nvoid dfs(int x,int f){\n    dep[x]=dep[f]+1; fa[0][x]=f; root[x]=modify(root[f],1,siz,a[x]);\n    for(int i=1;i<=17;i++) fa[i][x]=fa[i-1][fa[i-1][x]];\n    for(int i=head[x];i;i=e[i].next) if(e[i].to!=f) dfs(e[i].to,x);\n}\n\nvoid link(int x,int y){\n    if(sz[sfind(y)]>sz[sfind(x)]) swap(x,y);\n    sz[sfind(x)]+=sz[sfind(y)]; sf[sfind(y)]=sfind(x);\n    dfs(y,x); addegde(x,y);\n}\n\nint query(int x,int y,int k,int l,int r){\n    int cur[4],ll=lca(x,y),lw,mid;\n    cur[0]=root[x]; cur[1]=root[y]; cur[2]=root[ll]; cur[3]=root[fa[0][ll]];\n    while(l!=r){\n        mid=(l+r)>>1;\n        lw=t[t[cur[0]].ls].sum+t[t[cur[1]].ls].sum-t[t[cur[2]].ls].sum-t[t[cur[3]].ls].sum;\n        if(k<=lw){\n            r=mid;\n            for(int i=0;i<4;i++) cur[i]=t[cur[i]].ls;\n        }\n        else{\n            l=mid+1; k-=lw;\n            for(int i=0;i<4;i++) cur[i]=t[cur[i]].rs;\n        }\n    }\n    return v[l];\n}\n\nint main(){\n    read(); n=read(); m=read(); q=read();\n    for(int i=1;i<=n;i++) v[++siz]=a[i]=read(),sz[i]=1,sf[i]=i,dep[i]=1;\n    sort(v+1,v+1+siz);\n    siz=unique(v+1,v+1+siz)-1-v;\n    for(int i=1;i<=n;i++) a[i]=find(a[i]);\n    root[0]=build(1,siz);\n    for(int i=1;i<=m;i++){\n        int x=read(),y=read();\n        if(sz[sfind(y)]>sz[sfind(x)]) swap(x,y);\n        sz[sfind(x)]+=sz[sfind(y)]; sf[sfind(y)]=sfind(x);\n        addegde(x,y);\n    }\n    for(int i=1;i<=n;i++) if(!root[i]) dfs(i,0);\n    while(q--){\n        if(readopt()){\n            int x=read()^lasans,y=read()^lasans,k=read()^lasans;\n            printf(\"%d\\n\",lasans=query(x,y,k,1,siz));\n        }\n        else{\n            int x=read()^lasans,y=read()^lasans;\n            link(x,y);\n        }\n    }\n}\n\n```",
        "postTime": 1554133009,
        "uid": 100037,
        "name": "kkxhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p3302-sdoi2013%E6%A3%AE%E6%9E%97/)\n\n---\n# Solution\n\u62ff\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u60f3\u4e00\u4e0b\u9759\u6001\u7684\u6811\u4e0aK\u5927\u600e\u4e48\u641e\u3002\n\u9759\u6001\u6811\u4e0aK\u5927\u6709\u4e24\u79cd\u529e\u6cd5\uff0c\u4e00\u662f\u6811\u94fe\u5256\u5206+\u5e73\u8861\u6811\uff0c\u4e8c\u662f\u4e3b\u5e2d\u6811\u505a\u94fe\u524d\u7f00\u548c\u3002\u524d\u8005\u7684\u590d\u6742\u5ea6\u662f$O(log^2n)$\u7684\uff0c\u800c\u540e\u8005\u53ea\u6709$O(logn)$\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u6570\u5b57\u5168\u90e8\u79bb\u6563\u5316\uff0c\u7136\u540e\u5f00\u6743\u503c\u4e3b\u5e2d\u6811\uff0c\u6bcf\u9897\u4e3b\u5e2d\u6811\u8bb0\u5f55\u4ece\u5b83\u51fa\u53d1\u5230\u6839\u7684\u8def\u4e0a\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230LCA\u3002\u56e0\u4e3a\u6570\u5b57\u51fa\u73b0\u4e2a\u6570\u6ee1\u8db3\u53ef\u51cf\u6027\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u201c\u6263\u201d\u51fa\u4ece\u8fd9\u4e2a\u70b9\u5230LCA\u7684\u8def\u5f84\u7684\uff0c\u6211\u4eec\u628a\u4e24\u6761\u8def\u5f84\u5408\u5e76\u5230\u4e00\u9897\u4e3b\u5e2d\u6811\u4e0a\uff0c\u505a\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5904\u7406\u8fb9\u5408\u5e76\u7684\u95ee\u9898\u3002\u8003\u8651\u542f\u53d1\u5f0f\u66b4\u529b\u5408\u5e76\u3002\u6211\u4eec\u628a\u5c0f\u7684\u90a3\u68f5\u6811\u5408\u5e76\u5230\u5927\u7684\u90a3\u68f5\u6811\u4e0a\uff0c\u66b4\u529b\u91cd\u6784\u5c0f\u7684\u90a3\u68f5\u6811\u7684\u6bcf\u4e2a\u70b9\u7684\u4e3b\u5e2d\u6811\uff0c\u4e5f\u66b4\u529b\u91cd\u6784\u6bcf\u4e2a\u70b9\u7684depth\uff0cfa\u6765\u8ba1\u7b97LCA\u5373\u53ef\u3002\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u91cd\u6784\u6b21\u6570\u671f\u671b\u4e3a$logn$\u6b21\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u603b\u590d\u6742\u5ea6\u4e3a$O(nlog^2n)$\n\n\u5c31\u9171\uff0c\u8fd9\u9898\u6211\u4eec\u5c31\u5207\u6389\u5566(\uff5e\uffe3\u25bd\uffe3)\uff5e \n\n---\n# Code\n**\u7ec6\u8282\u7e41\u591a\uff0c\u8bf7\u5404\u4f4ddalao\u5c0f\u5fc3**\n```cpp\n//Luogu P3302 [SDOI2013]\u68ee\u6797\n//Mar,6th,2019\n//\u4e3b\u5e2d\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u52a8\u6001\u6811\u6811\u94feK\u5927\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=80000+2000;\nstruct SegmentTree\n{\n\t#define mid ((now_l+now_r)>>1)\n\tstatic const int M=400*N;\n\tint son[M][2],size[M],to;\n\tinline void update(int now)\n\t{\n\t\tsize[now]+=size[son[now][0]]+size[son[now][1]];\n\t}\n\tinline void Add(int now,int pre,int x,int now_l,int now_r)\n\t{\n\t\tif(now_l==now_r)\n\t\t{\n\t\t\tsize[now]=size[pre]+1;\n\t\t\treturn;\n\t\t}\n\t\tif(x<=mid) \n\t\t{\n\t\t\tAdd(son[now][0]=++to,son[pre][0],x,now_l,mid);\n\t\t\tson[now][1]=son[pre][1];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tAdd(son[now][1]=++to,son[pre][1],x,mid+1,now_r);\n\t\t\tson[now][0]=son[pre][0];\n\t\t}\n\t\tupdate(now);\n\t}\n\tint Query(int now1,int now2,int pre1,int pre2,int x,int now_l,int now_r)\n\t{\n\t\tif(now_l==now_r) return now_l;\n\t\tif(x<=size[son[now1][0]]-size[son[pre1][0]]+size[son[now2][0]]-size[son[pre2][0]])\n\t\t\treturn Query(son[now1][0],son[now2][0],son[pre1][0],son[pre2][0],x,now_l,mid);\n\t\telse\n\t\t\treturn Query(son[now1][1],son[now2][1],son[pre1][1],son[pre2][1],x-(size[son[now1][0]]-size[son[pre1][0]]+size[son[now2][0]]-size[son[pre2][0]]),mid+1,now_r);\n\t}\n\tvoid Print(int now,int now_l,int now_r)\n\t{\n\t\tcerr<<\"no.\"<<now<<\" l&r:\"<<now_l<<\" \"<<now_r<<\" sonl&r:\"<<son[now][0]<<\" \"<<son[now][1]<<\" size:\"<<size[now]<<endl;\n\t\tif(now_l!=now_r)\n\t\t\tPrint(son[now][0],now_l,mid),\n\t\t\tPrint(son[now][1],mid+1,now_r);\n\t}\n\t#undef mid\n}sgt;\nvector <int> e[N];\nint n,m,q,w[N],mmap[N];//mmap:\u79bb\u6563\u503c->\u771f\u5b9e\u503c\nint fa[N][21],size[N],depth[N],root[N];\nbool vis[N];\nvoid dfs(int now)\n{\n\tfor(int i=1;i<=20;i++)\n\t\tfa[now][i]=fa[fa[now][i-1]][i-1];\n\tvis[now]=true;\n\tfor(int i=0;i<int(e[now].size());i++)\n\t\tif(vis[e[now][i]]==false)\n\t\t{\n\t\t\tdepth[e[now][i]]=depth[now]+1;\n\t\t\tfa[e[now][i]][0]=now;\n\t\t\troot[e[now][i]]=++sgt.to;\n\t\t\tsgt.Add(root[e[now][i]],root[now],w[e[now][i]],1,m);\n\t\t\t//sgt.Print(root[e[now][i]],1,m);\n\t\t\t//cerr<<endl;\n\t\t\tdfs(e[now][i]);\n\t\t}\n\tvis[now]=false;\n}\nvoid Merge(int x,int y)\n{\n\tif(size[fa[x][20]]>size[fa[y][20]]) swap(x,y);\n\tsize[fa[y][20]]+=size[fa[x][20]];\n\tdepth[x]=depth[y]+1;\n\tfa[x][0]=y;\n\troot[x]=++sgt.to;\n\tsgt.Add(root[x],root[y],w[x],1,m);\n\t//sgt.Print(root[x],1,m);\n\t//cerr<<endl;\n\tdfs(x);\n\te[x].push_back(y);\n\te[y].push_back(x);\n}\nint LCA(int x,int y)\n{\n\tif(depth[x]<depth[y]) swap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(depth[fa[x][i]]>=depth[y])\n\t\t\tx=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nint Query(int x,int y,int K)\n{\n\tif(depth[x]<depth[y]) swap(x,y);\n\tint lca=LCA(x,y);\n\tif(lca==y)\n\t\treturn mmap[sgt.Query(root[x],0,(fa[lca][0]==lca?0:root[fa[lca][0]]),0,K,1,m)];\n\telse\n\t\treturn mmap[sgt.Query(root[x],root[y],root[lca],(fa[lca][0]==lca?0:root[fa[lca][0]]),K,1,m)];\n}\nvoid Init()\n{\n\tfor(int i=0;i<=n;i++)\n\t\te[i].reserve(4);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\troot[i]=++sgt.to;\n\t\tsgt.Add(root[i],0,w[i],1,m);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tsize[i]=1,depth[i]=1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<=21;j++)\n\t\t\tfa[i][j]=i;\n}\nint m2;\nint main()\n{\n\tstatic int tmp[N];\n\tn=read(),n=read(),m2=read(),q=read();\n\tfor(int i=1;i<=n;i++)\n\t\ttmp[i]=w[i]=read();\n\t\n\tsort(tmp+1,tmp+1+n);\n\tm=unique(tmp+1,tmp+1+n)-tmp-1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint temp=lower_bound(tmp+1,tmp+1+m,w[i])-tmp;\n\t\tmmap[temp]=w[i];\n\t\tw[i]=temp;\n\t}\n\tInit();\n\t\t\n\tfor(int i=1;i<=m2;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tMerge(x,y);\n\t}\n\t\n\tint ans=0;\n\tchar OP[5];\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%s\",OP+1);\n\t\tif(OP[1]=='Q')\n\t\t{\n\t\t\tint x=read()^ans,y=read()^ans,K=read()^ans;\n\t\t\tprintf(\"%d\\n\",ans=Query(x,y,K));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=read()^ans,y=read()^ans;\n\t\t\tMerge(x,y);\n\t\t}\n\t\t//ans=0;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n",
        "postTime": 1551929753,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$QwQ$](https://ctz45562.github.io/2019/03/01/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P3302-%E3%80%90-SDOI2013-%E6%A3%AE%E6%9E%97%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3302)\n\n\u5f3a\u5236\u5728\u7ebf\u8d44\u74f7\u8fde\u8fb9\u7684\u6811\u4e0a$K$\u5927\uff08\u5c0f\uff09\u503c\u3002\n\n\u9759\u6001\u6811\u4e0a$K$\u5927\u503c\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\uff0c\u7ed3\u5408$LCA$\u52a0\u52a0\u51cf\u51cf\u5c31\u884c\u3002\n\n\u8981\u6c42\u8fde\u8fb9\uff0c\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\u4e3b\u5e2d\u6811\u3002\u5176\u5b9e\u4e5f\u53ef\u4ee5\u8bf4\u91cd\u6784\u4e3b\u5e2d\u6811\u3002\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u6811\u7684$size$\uff0c\u8fde\u63a5\u4e24\u70b9\uff0c\u9009\u62e9$size$\u8f83\u5c0f\u7684\u8fde\u5230\u8f83\u5927\u7684\u4e0a\u53bb\uff0c\u5373\u91cd\u65b0$dfs$\u4e00\u904d\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u5408\u5e76\u4e00\u6b21\u540e$size$\u81f3\u5c11\u7ffb\u500d\uff0c\u6240\u4ee5\u6700\u591a\u88ab\u5408\u5e76$logn$\u6b21\u3002\u91cd\u6784\u4e00\u4e2a\u70b9\u4e3b\u5e2d\u6811\u590d\u6742\u5ea6\u4e3a$O(logn)$\uff0c\u603b\u590d\u6742\u5ea6$O(nlog^2n)$\u3002\n\n\u7ef4\u62a4$size$\u73c2\u4ee5\u7528\u5e76\u67e5\u96c6\u3002\u56e0\u4e3a\u8981\u6539\u53d8\u6811\u7684\u5f62\u6001\uff0c\u6811\u5256$LCA$\u4e0d\u80fd\u7528\u4e86\uff0c\u73c2\u4ee5\u7528\u500d\u589e$LCA$\u6216\u8005$LCT$\u6c42$LCA$\u3002\uff08\u849f\u84bb\u4ee5\u524d\u4e00\u76f4\u7528\u7684\u6811\u5256$LCA$\uff0c\u7ed3\u679c\u500d\u589e\u5199\u5047\u4e86\u8c03\u4e86\u4e24\u5929$QAQ$\uff09\n\n\u7a7a\u95f4\u4e0a\u53ef\u4ee5\u91cd\u590d\u5229\u7528\u4e4b\u524d\u7684\u70b9\uff0c\u4e0d\u8fc7\u849f\u84bb~~\u61d2\u5f97\u5199~~\u60f3\u7701\u65f6\u95f4\u6240\u4ee5\u6ca1\u6709\uff0c\u6240\u4ee5\u5355\u70b9\u91cd\u6784\u4e3b\u5e2d\u6811\u8981\u5f00$O(logn)$\u4e2a\u8282\u70b9\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\u3002\n\n\u7ec6\u8282\uff1a\u503c\u57df\u5f88\u5927\uff0c\u9700\u8981\u79bb\u6563\u5316\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 80005\n#define inf 0x3f3f3f3f\n#define pn putchar('\\n')\n#define px(x) putchar(x)\n#define ps putchar(' ')\n#define pd puts(\"======================\")\n#define pj puts(\"++++++++++++++++++++++\")\n\nusing namespace std;\n\ninline int read(){\n    int x=0,y=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n    T x=0;\n    int y=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return y?-x:x;\n}\nint h[maxn],num,F[maxn],siz[maxn];\n//F\u662f\u5e76\u67e5\u96c6\nstruct edge{\n    int pre,to;\n}e[maxn<<1];\ninline void add(int from,int to){\n    e[++num].pre=h[from],h[from]=num,e[num].to=to;\n}\nint find(int x){\n    if(F[x]==x)return x;\n    return F[x]=find(F[x]);\n}\nint n,len,dis[maxn],a[maxn],root[maxn],fa[maxn][32],lg[maxn],deep[maxn];\n//dis\u662f\u79bb\u6563\u5316\u6570\u7ec4\nstruct Chairman_Tree{\n    int dat[maxn*400],ls[maxn*400],rs[maxn*400],cnt;\n#define ls(x) ls[x]\n#define rs(x) rs[x]\n    void build(int poi,int ne,int ol){\n        int l=1,r=len;\n        while(l<r){\n            dat[ne]=dat[ol]+1;\n            int mid=l+r>>1;\n            if(poi<=mid)rs(ne)=rs(ol),ol=ls(ol),ne=ls(ne)=++cnt,r=mid;\t\n            else ls(ne)=ls(ol),ol=rs(ol),ne=rs(ne)=++cnt,l=mid+1;\n        }\n        dat[ne]=dat[ol]+1;\n    }//\u4e3b\u5e2d\u6811\u91cd\u6784\n    int ask(int x,int y,int lc,int fl,int k){\n        //lc\u662flca\uff0cfl\u4e3alca\u7684\u7236\u4eb2\n        int l=1,r=len;\n        while(l<r){\n            int mid=l+r>>1,sum=dat[ls(x)]+dat[ls(y)]-dat[ls(lc)]-dat[ls(fl)];\n            if(sum>=k)x=ls(x),y=ls(y),lc=ls(lc),fl=ls(fl),r=mid;\n            else x=rs(x),y=rs(y),lc=rs(lc),fl=rs(fl),l=mid+1,k-=sum;\n        }\n        return dis[l];\n    }//\u67e5\u8be2\n}ct;\nint lca(int x,int y){\n    if(deep[x]<deep[y])swap(x,y);\n    while(deep[x]>deep[y])x=fa[x][lg[deep[x]-deep[y]]-1];\n    if(x==y)return x;\n    for(register int i=lg[deep[x]];i>=0;--i)\n        if(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i],y=fa[y][i];\n    return fa[x][0];\n}//\u500d\u589elca\nvoid dfs(int node,int f){\n    deep[node]=deep[f]+1;\n    root[node]=++ct.cnt;\n    ct.build(a[node],root[node],root[f]);\n    fa[node][0]=f;\n    int top=lg[deep[node]];\n    for(register int i=1;i<=top;++i)\n        fa[node][i]=fa[fa[node][i-1]][i-1];\n    for(register int i=h[node];i;i=e[i].pre){\n        int x=e[i].to;\n        if(x!=f)siz[node]+=siz[x],dfs(x,node);\n    }\t\n}\nvoid merge(int x,int y){\n    add(x,y),add(y,x);\n    int u=find(x),v=find(y);\n    if(siz[u]>siz[v])swap(x,y),swap(u,v);\n    siz[v]+=siz[u];\n    dfs(x,y);\n}\nint spget(){\n\tchar ch=getchar();\n\twhile(ch!='Q'&&ch!='L')ch=getchar();\n\treturn ch=='Q';\n}//\u83b7\u53d6\u5b57\u7b26\u7684\nKafuu Chino(){\n//\tfreopen(\"file.in\",\"r\",stdin);\n//\tfreopen(\"juruo.out\",\"w\",stdout);\n    read();\n    n=read();\n    int m=read(),t=read();\n    for(register int i=1;i<=n;++i)\n        F[i]=i,a[i]=dis[i]=read(),lg[i]=lg[i-1]+(1<<lg[i-1]==i);\n    sort(dis+1,dis+1+n);\n    len=unique(dis+1,dis+1+n)-dis-1;\n    for(register int i=1;i<=n;++i)\n        a[i]=lower_bound(dis+1,dis+1+len,a[i])-dis;\n    //\u79bb\u6563\u5316\n    for(register int i=1;i<=m;++i){\n        int a=read(),b=read();\n        add(a,b),add(b,a);\n    }\n    for(register int i=1;i<=n;++i)\n        if(!deep[i])dfs(i,0);\n\tfor(register int i=1;i<=n;++i)\n\t\tif(fa[i][0])F[i]=fa[i][0];\n    //\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\tfor(register int i=1;i<=n;++i)\n\t\t++siz[find(i)];\n    //\u521d\u59cb\u5316size\n    int ans=0;\n    for(register int i=1;i<=t;++i){\n        int s=spget(),x=read()^ans,y=read()^ans;\n        if(s){\n            int k=read()^ans,l=lca(x,y);\n            printf(\"%d\\n\",ans=ct.ask(root[x],root[y],root[l],root[fa[l][0]],k));\n        }\n        else merge(x,y);\n    }\n}\n```\n\n\n\n\n\n",
        "postTime": 1551594453,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    },
    {
        "content": "### [SDOI2013]\u68ee\u6797\n>\u8be2\u95ee\u4e00\u4e2a\u68ee\u6797\u4e2d\u4e24\u70b9\u95f4\u8def\u5f84\u7ecf\u8fc7\u70b9\u7684\u7b2ck\u5c0f\uff0c\u52a8\u6001\u8fde\u8fb9\u3002\u4fdd\u8bc1\u662f\u4e00\u4e2a\u68ee\u6797\u3002\u5f3a\u5236\u5728\u7ebf\u3002   \n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5728\u6811\u4e0a\u5efa\u4e3b\u5e2d\u6811\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5efa\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ee7\u627f\u4ed6\u7236\u4eb2\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u3002  \n\u7136\u540e\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$sum[x]+sum[y]-sum[lca]-sum[fa[lca]]$\u6765\u8868\u793a$x,y$\u8def\u5f84\u4e0a\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u7136\u540e\u6211\u4eec\u5728\u8fd94\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u6811\u4e0a\u4e8c\u5206\u5c31\u884c\u4e86\u3002\n\u7136\u540e\u6211\u4eec\u5982\u4f55\u5904\u7406\uff0c\u52a8\u6001\u8fde\u8fb9\u5462\u3002\u6211\u4eec\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\uff0c\u628a\u5c0f\u7684\u6811\u63a5\u5728\u5927\u7684\u6811\u4e0a\u9762\uff0c\u7136\u540e\u5728\u5c0f\u6811\u91cc$dfs$\u91cd\u6784\u5c31\u884c\u4e86\u3002  \n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int N=101000;\nint cnt,head[N],f[N],fa[N][23],dep[N],root[N],a[N],size[N],b[N],tot;\nint sum[N*600],ch[N*600][2],num,n,m,q,ans;\nstruct edge{\n    int to,nxt;\n}e[N*2];\nvoid add_edge(int u,int v){\n    cnt++;\n    e[cnt].nxt=head[u];\n    e[cnt].to=v;\n    head[u]=cnt;\n    cnt++;\n    e[cnt].nxt=head[v];\n    e[cnt].to=u;\n    head[v]=cnt;\n}\nint find(int x){\n    if(f[x]==x)return x;\n    else return f[x]=find(f[x]);\n}\nvoid merge(int x,int y){\n    int fx=find(x),fy=find(y);\n    f[fy]=fx;size[fx]+=size[fy];\n}\nint getlca(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);\n    for(int i=20;i>=0;i--)\n        if(dep[fa[x][i]]>=dep[y])x=fa[x][i];\n    if(x==y)return x;\n    for(int i=20;i>=0;i--)\n        if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n    return fa[x][0];\n}\nvoid build(int l,int r,int &now){\n    now=++num;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    build(l,mid,ch[now][0]);\n    build(mid+1,r,ch[now][1]);\n}\nvoid add(int l,int r,int x,int pre,int &now){\n    now=++num;\n    sum[now]=sum[pre]+1;\n    if(l==r)return;\n    ch[now][0]=ch[pre][0];\n    ch[now][1]=ch[pre][1];\n    int mid=(l+r)>>1;\n    if(x>mid)add(mid+1,r,x,ch[pre][1],ch[now][1]);\n    else add(l,mid,x,ch[pre][0],ch[now][0]);\n}\nvoid dfs(int u,int f){\n    fa[u][0]=f;\n    for(int i=1;i<=20;i++)fa[u][i]=fa[fa[u][i-1]][i-1];\n    dep[u]=dep[f]+1;\n    add(1,tot,a[u],root[f],root[u]);\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v==f)continue;\n        dfs(v,u);\n    }\n}\nint check(int x,int y,int lca,int flca,int l,int r,int k){\n    while(l<r){\n        int mid=(l+r)>>1;\n        int tmp=sum[ch[x][0]]+sum[ch[y][0]]-sum[ch[lca][0]]-sum[ch[flca][0]];\n        if(tmp>=k)x=ch[x][0],y=ch[y][0],lca=ch[lca][0],flca=ch[flca][0],r=mid;\n        else k-=tmp,x=ch[x][1],y=ch[y][1],lca=ch[lca][1],flca=ch[flca][1],l=mid+1;\n    }\n    return b[l];\n}\nint read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nint main(){\n    int hhh=read();\n    n=read(),m=read(),q=read();\n    for(int i=1;i<=n;i++)f[i]=i,size[i]=1,a[i]=read(),b[i]=a[i];\n    sort(b+1,b+1+n);\n    tot=unique(b+1,b+1+n)-b-1;\n    for(int i=1;i<=n;i++)a[i]=lower_bound(b+1,b+1+tot,a[i])-b;\n    build(1,tot,root[0]);\n    for(int i=1;i<=m;i++){\n        int u=read(),v=read();\n        add_edge(u,v);merge(u,v);\n    }\n    for(int i=1;i<=n;i++)\n        if(f[i]==i)dfs(i,0);\n    char s[3];\n    while(q--){\n        scanf(\"%s\",s);\n        if(s[0]=='Q'){\n            int x=read(),y=read(),k=read();\n            x^=ans;y^=ans;k^=ans;\n            int lca=getlca(x,y);\n            ans=check(root[x],root[y],root[lca],root[fa[lca][0]],1,tot,k);\n            printf(\"%d\\n\",ans);\n        }\n        else{\n            int x=read()^ans,y=read()^ans;\n            if(size[x]>size[y])swap(x,y);\n            add_edge(x,y);merge(x,y);dfs(y,x);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1546215745,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3302 \u3010[SDOI2013]\u68ee\u6797\u3011"
    }
]