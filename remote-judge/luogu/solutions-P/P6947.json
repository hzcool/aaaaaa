[
    {
        "content": "\u9996\u5148\u8981\u628a\u95ee\u9898\u8f6c\u5316\u4e00\u4e0b\uff1a\u6211\u4eec\u4e0d\u6c42 **\u80fd\u8986\u76d6\u6240\u6709\u70b9\u7684\u6700\u5c0f\u534a\u5f84**\uff0c\u800c\u6c42 **\u8986\u76d6\u6bcf\u4e2a\u70b9\u6240\u9700\u6700\u5c0f\u534a\u5f84\u7684\u6700\u5927\u503c**\u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u95ee\u9898\u662f\u7b49\u4ef7\u7684\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8986\u76d6\u4e00\u4e2a\u70b9\u6240\u9700\u6700\u5c0f\u534a\u5f84\uff0c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5230\u67d0\u4e2a\u9876\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230 Voronoi \u56fe\uff1a\u5173\u4e8e\u67d0\u4e2a\u70b9\u96c6 $\\mathbb S$ \u7684 V \u56fe\u5c06\u5e73\u9762\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u662f\u4e00\u4e2a\uff08\u53ef\u80fd\u9762\u79ef\u65e0\u9650\u7684\uff09\u51f8\u58f3\uff0c\u6240\u6709\u70b9\u5230 $\\mathbb S$ \u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5747\u76f8\u540c\u3002\u66f4\u591a\u77e5\u8bc6\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002**\u6ce8\u610f\u672c\u9898\u4e0d\u9700\u8981 V \u56fe\u7684\u9ad8\u6548\u6784\u5efa\u65b9\u6cd5**\u3002\n\n\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u6240\u6709\u51f8\u58f3\u3002\u6ce8\u610f\u4efb\u4f55\u4e00\u4e2a **\u9762\u79ef\u6709\u9650** \u7684 **\u4e0d\u4e00\u5b9a\u7b80\u5355\u7684**\uff08\u5373\uff0c\u5176\u53ef\u4ee5\u6709\u82e5\u5e72\u76f8\u79bb\u90e8\u5206\uff09**\u591a\u8fb9\u5f62** \u5230\u67d0\u4e00\u5173\u952e\u70b9\u7684\u6700\u8fdc\u70b9\u5fc5\u7136\u4f4d\u4e8e\u8fb9\u754c\uff08\u53ef\u80fd\u662f\u5176\u4e2d\u67d0\u4e2a\u90e8\u5206\u7684\u8fb9\u754c\uff09\u4e0a\uff08\u53ef\u4ee5\u8c03\u6574\uff0c\u56e0\u4e3a\u5411\u8fb9\u754c\u79fb\u52a8\u5fc5\u7136\u4e0d\u66f4\u52a3\uff09\uff0c\u8fdb\u800c\u5fc5\u7136\u4f4d\u4e8e\u9876\u70b9\uff08\u53ef\u80fd\u662f\u67d0\u4e2a\u90e8\u5206\u7684\u9876\u70b9\uff09\u5904\uff08\u56e0\u4e3a\u5411\u5de6\u5411\u53f3\u4e24\u4e2a\u65b9\u5411\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u4e0d\u66f4\u52a3\uff09\u3002\u6545\u53ea\u8981\u9876\u70b9\u6570\u53ef\u627f\u53d7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u5c1d\u8bd5\u4e86\u3002\n\n\u6ce8\u610f\u5230\u5e76\u975e\u51f8\u58f3\u4e2d\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u88ab\u9009\uff1a\u5176\u5fc5\u987b\u540c\u65f6\u8fd8\u662f\u9898\u9762\u4e2d\u7ed9\u5b9a\u7684\u7b80\u5355\u591a\u8fb9\u5f62\u5185\u90e8\u7684\u70b9\u3002\u8fd9\u610f\u5473\u7740\u53ef\u9009\u70b9\u96c6\u4e8b\u5b9e\u4e0a\u662f\u51f8\u58f3\u4e0e\u7ed9\u5b9a\u591a\u8fb9\u5f62\u7684\u4ea4\u96c6\u3002\u8fd9\u5fc5\u7136\u662f\u9762\u79ef\u6709\u9650\u4f46\u4e0d\u4e00\u5b9a\u7b80\u5355\u7684\u591a\u8fb9\u5f62\u3002\n\n\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4ea4\u96c6\uff0c\u5219\u53ea\u9700\u679a\u4e3e\u4ea4\u96c6\u7684\u6240\u6709\u9876\u70b9\uff0c\u6c42\u51fa\u5176\u5230\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u8003\u8651\u4ea4\u96c6\u7684\u9876\u70b9\u53ef\u80fd\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u51f8\u58f3\u4e2d\u7684\u9876\u70b9\uff1b\u7ed9\u5b9a\u591a\u8fb9\u5f62\u7684\u9876\u70b9\uff1b\u51f8\u58f3\u4e2d\u8fb9\u4e0e\u7ed9\u5b9a\u591a\u8fb9\u5f62\u4e2d\u8fb9\u7684\u4ea4\u70b9\u3002\n\n\u7b2c\u4e00\u7c7b\u53ef\u4ee5\u679a\u4e3e\u9876\u70b9\u7136\u540e\u7528\u5c04\u7ebf\u6cd5\u5224\u5b9a\u662f\u5426\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u89e3\u51b3\u3002\n\n> \u5c04\u7ebf\u6cd5\uff1a\u81ea\u4e00\u4e2a\u5728\u7b80\u5355\u591a\u8fb9\u5f62\u5185\u90e8\u7684\u9876\u70b9\u5411\u5916\u5f15\u51fa\u4e00\u6761\u5c04\u7ebf\uff0c\u5176\u5fc5\u7136\u4e0e\u8be5\u591a\u8fb9\u5f62\u7684\u8fb9\u754c\u76f8\u4ea4\u5947\u6570\u6b21\uff0c\u800c\u5728\u5916\u90e8\u7684\u9876\u70b9\u5f15\u51fa\u7684\u5c04\u7ebf\u5fc5\u7136\u76f8\u4ea4\u5076\u6570\u6b21\u3002\n\n\u7b2c\u4e8c\u7c7b\u4e0d\u9700\u8981\u5904\u7406\uff0c\u56e0\u4e3a\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u6240\u9700\u7684\u6700\u5c0f\u534a\u5f84\u5fc5\u7136\u662f\u96f6\uff08\u5176\u81ea\u8eab\u5c31\u662f\u96c6\u5408 $\\mathbb S$ \u4e2d\u5143\u7d20\uff09\u3002\n\n\u7b2c\u4e09\u7c7b\u53ef\u4ee5\u679a\u4e3e\u7b80\u5355\u591a\u8fb9\u5f62\u7684\u8fb9\uff0c\u7528\u4e00\u4e9b\u65b9\u6cd5\uff08\u6bd4\u5982\u8bf4\uff0c\u4e8c\u5206/\u4e09\u5206\uff09\u5728\u51f8\u58f3\u4e0a\u627e\u51fa\u4ea4\u70b9\uff0c\u7136\u540e\u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\u3002\n\n\u8003\u8651\u5206\u6790\u590d\u6742\u5ea6\u3002\u8ba1\u7b97\u7b2c\u4e00\u7c7b\u9876\u70b9\u9700\u8981\u7684\u590d\u6742\u5ea6\u4e3a $O(\\text{\u9876\u70b9\u6570}\\times\\text{\u5c04\u7ebf\u6cd5\u590d\u6742\u5ea6})$\u3002\u4e0d\u9700\u8ba1\u7b97\u7b2c\u4e8c\u7c7b\u9876\u70b9\u3002\u8ba1\u7b97\u7b2c\u4e09\u7c7b\u9876\u70b9\u9700\u8981\u7684\u590d\u6742\u5ea6\u662f $O(\\text{\u7b80\u5355\u591a\u8fb9\u5f62\u8fb9\u6570}\\times\\text{\u5355\u6b21\u6c42\u4ea4\u590d\u6742\u5ea6})$\u3002\n\n\u4f46\u662f\uff0c\u53ea\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u5373 V \u56fe\u4e2d **\u70b9\u6570\u548c\u8fb9\u6570\u90fd\u662f\u5173\u4e8e $|\\mathbb S|$ \u7ebf\u6027\u7684**\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u679a\u4e3e V \u56fe\u4e2d\u6bcf\u4e2a\u9876\u70b9\u6c42\u5c04\u7ebf\u6cd5\uff0c\u518d\u679a\u4e3e V \u56fe\u4e2d\u6bcf\u6761\u8fb9\u548c\u7b80\u5355\u591a\u8fb9\u5f62\u4e2d\u6bcf\u6761\u8fb9\u6c42\u4ea4\u70b9\u5373\u53ef\u3002\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u5e73\u65b9\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5982\u4f55\u6c42\u51fa V \u56fe\u3002\u5047\u5982\u53ea\u6709\u4e24\u4e2a\u70b9\uff0c\u5219\u8003\u8651\u8fd9\u4e24\u70b9\u7684\u4e2d\u5782\u7ebf\uff08\u5782\u76f4\u5e73\u5206\u7ebf\uff09\uff0c\u5176\u5de6\u4fa7\u662f\u5230\u5de6\u65b9\u70b9\u66f4\u8fd1\u7684\u70b9\u96c6\uff0c\u53f3\u4fa7\u662f\u5230\u53f3\u65b9\u70b9\u66f4\u8fd1\u7684\u70b9\u96c6\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u53d6\u6240\u6709\u5176\u5b83\u70b9\u6c42\u4e2d\u5782\u7ebf\uff0c\u5219\u9760\u8fd1\u5176\u4e00\u4fa7\u7684\u6240\u6709\u534a\u5e73\u9762\u7684\u4ea4\u96c6\u5373\u4e3a\u5176\u5bf9\u5e94\u7684\u51f8\u58f3\u3002\n\n\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u70b9\u5404\u8dd1\u4e00\u904d\u534a\u5e73\u9762\u4ea4\uff0c\u590d\u6742\u5ea6\u5e73\u65b9\u5bf9\u6570\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u7684\u74f6\u9888 **\u5b8c\u5168\u5728\u534a\u5e73\u9762\u4ea4\u7684\u6392\u5e8f**\u3002\u56e0\u6b64\u5c3d\u91cf\u4f18\u5316\u4f60\u534a\u5e73\u9762\u4ea4\u7684\u6bd4\u8f83\u3002\u6211\u4e00\u5f00\u59cb\u7684\u5199\u6cd5\u4e00\u6b21\u6bd4\u8f83\u50bb\u50bb\u5730\u505a\u4e86 $4$ \u6b21 `atan2`\uff0c\u7136\u540e\u56e0\u4e3a\u5e38\u6570\u8fc7\u5927\u5728 CF \u4e0a\u4e5f\u5149\u8363 TLE\u3002\u540e\u6765\u9884\u5904\u7406\u51fa `atan2` \u7684\u7ed3\u679c\uff0c\u7136\u540e\u5c31\u5361\u8fc7\u53bb\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1);\nint cmp(double x){if(x>eps)return 1;if(x<-eps)return -1;return 0;}\ndouble res;\nstruct Vector{\n\tdouble x,y;\n\tVector(){}\n\tVector(double X,double Y){x=X,y=Y;}\n\tfriend Vector operator +(const Vector &u,const Vector &v){return Vector(u.x+v.x,u.y+v.y);}\n\tfriend Vector operator -(const Vector &u,const Vector &v){return Vector(u.x-v.x,u.y-v.y);}\n\tfriend Vector operator *(const Vector &u,const double &v){return Vector(u.x*v,u.y*v);}\n\tfriend Vector operator /(const Vector &u,const double &v){return Vector(u.x/v,u.y/v);}\n\tfriend double operator &(const Vector &u,const Vector &v){return u.x*v.y-u.y*v.x;}\n\tfriend double operator |(const Vector &u,const Vector &v){return u.x*v.x+u.y*v.y;}\n\tfriend bool operator ==(const Vector &u,const Vector &v){return cmp(u.x-v.x)==0&&cmp(u.y-v.y)==0;}\n\tdouble operator ~()const{return sqrt(x*x+y*y);}//the modulo of a vector\n\tdouble operator !()const{return atan2(y,x);}//the angle of a vector\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid print()const{printf(\"(%lf,%lf)\",x,y);}\n\tVector turn(){return Vector(y,-x);}\n\tfriend bool operator<(const Vector&u,const Vector&v){\n\t\tif(cmp(u.x-v.x)==0)return cmp(u.y-v.y)==-1;\n\t\treturn cmp(u.x-v.x)==-1;\n\t}\n}p[2010],q[2010];\ntypedef Vector Point;\nstruct Line{\n\tPoint x,y;\n\tVector z;double ang;\n\tLine(){}\n\tLine(Point X,Point Y){x=X,y=Y,z=Y-X,ang=!z;}\n\tfriend bool operator<(const Line&u,const Line&v){\n\t\tif(cmp(u.ang-v.ang))return u.ang<v.ang;\n\t\treturn cmp(u.z&(v.y-u.x))==-1;\n\t}\n\tfriend bool operator/(const Line&u,const Line&v){return cmp(u.z&v.z)==0;}\n\tfriend bool operator|(const Line&u,const Line&v){return cmp(u.ang-v.ang)==0;}\n\tfriend bool operator&(const Line&u,const Point&v){return cmp((v-u.x)&u.z)!=1;}\n\tfriend bool operator%(const Line&u,const Point&v){return cmp((u.x-v)|(u.y-v))!=1;}\n\tfriend Point operator&(const Line&u,const Line&v){return u.x+u.z*((v.z&(u.x-v.x))/(u.z&v.z));}\n}l[2010],r[2010];\ntypedef Line Segment;\nint n,L,R,m;\nset<Point>st;\nbool inside(Point P){\n\tif(st.find(P)!=st.end())return false;\n\tst.insert(P);\n\tstatic default_random_engine rnd(17680321);\n\tstatic uniform_real_distribution<double>urd(-pi,pi);\n\twhile(true){\n\t\tdouble ang=urd(rnd);\n\t\tPoint Q(P.x+cos(ang),P.y+sin(ang));\n\t\tLine X(P,Q);\n\t\tint num=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tPoint A=p[i],B=p[(i+1)%n];\n\t\t\tLine Y(A,B);\n\t\t\tPoint C=Y&X;\n\t\t\tif(C==B||C==A){num=-1;break;}\n\t\t\tif(!(Y%C)||(Segment(Q,C)%P&&!(P==C)))continue;\n\t\t\tnum++;\n\t\t}\n\t\tif(num!=-1)return num&1;\n\t}\n}\nvoid solve(int _){\n\tm=0;\n\tfor(int i=0;i<n;i++)if(i!=_){\n\t\tPoint P=(p[i]+p[_])/2;\n\t\tPoint Q=P+(p[_]-p[i]).turn();\n\t\t// P.print(),Q.print();puts(\"\");\n\t\tl[m++]=Line(P,Q);\n\t}\n\tl[m++]=Line(Point(-2e4,-2e4),Point(2e4,-2e4));\n\tl[m++]=Line(Point(2e4,-2e4),Point(2e4,2e4));\n\tl[m++]=Line(Point(2e4,2e4),Point(-2e4,2e4));\n\tl[m++]=Line(Point(-2e4,2e4),Point(-2e4,-2e4));\n\tsort(l,l+m),r[L=R=0]=l[0];\n\tfor(int i=1;;i++){\n\t\twhile(i<m&&l[i]|l[i-1])i++;\n\t\tif(i==m)break;\n\t\tif(L<R&&((r[L]/r[L+1])||(r[R]/r[R-1])))return;\n\t\twhile(L<R&&!(l[i]&q[R-1]))R--;\n\t\twhile(L<R&&!(l[i]&q[L]))L++;\n\t\tr[++R]=l[i];if(L<R)q[R-1]=r[R]&r[R-1];\n\t}\n\twhile(L<R&&!(r[L]&q[R-1]))R--;\n\twhile(L<R&&!(r[R]&q[L]))L++;\n\tif(R-L<=1)return;\n\tq[R]=r[L]&r[R];\n\t// printf(\"%d:\\n\",_);\n\t// for(int i=L;i<=R;i++)q[i].print();puts(\"\");\n\tfor(int i=L;i<=R;i++)if(inside(q[i]))res=max(res,~(q[i]-p[_]));\n\tfor(int i=L;i<=R;i++)for(int j=0;j<n;j++){\n\t\tSegment s(p[j],p[(j+1)%n]),t(q[i],q[i==R?L:i+1]);\n\t\tif(s/t)continue;\n\t\tPoint P=s&t;\n\t\tif(s%P&&t%P)res=max(res,~(P-p[_]));\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++)p[i].read();\n\tfor(int i=0;i<n;i++)solve(i);\n\tprintf(\"%lf\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1655793820,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6947\u3010[ICPC2018 WF]Panda Preserve\u3011"
    }
]