[
    {
        "content": "- \u6211\u5341\u5206\u60ed\u6127\uff0c\u5728\u6b64\u611f\u8c22[\u5946\u4f6c](https://www.luogu.com.cn/user/52170)\uff0c\u795d\u613f\u5176\u4fe1\u606f\u5b66\u4e4b\u8def\u5149\u8292\u7480\u74a8\u3002\n- \u53e6\u5916\u8fd8\u6709\u6211\u4eec\u673a\u623f\u540c\u5fd7\u4eec\u7684\u5e2e\u52a9\uff0c\u53c2\u7167\u4e86[\u6b64\u7bc7](https://www.luogu.com.cn/blog/gzw2005/p5163-wd-yu-di-tu-yu-nh20220929d-lian-tong-yi-ji-re-gan-gan-xiang)\u535a\u5ba2\uff0c\u5728\u6b64\u4e00\u5e76\u611f\u8c22\u3002\n- [\u524d\u60c5\u63d0\u8981](https://www.luogu.com.cn/blog/luo1gu1zui1bang1/post-kai-bai-ji-hua-1wd-yu-di-tu)\u3002\n- \u672c\u9898\u5c06\u7b80\u8ff0\u590d\u6742\u5ea6 $O(m\\log m+q\\log (n+q))$ \u7684\u505a\u6cd5\uff0c\u4f18\u4e8e\u76ee\u524d\u6240\u6709\u9898\u89e3\u7684\u590d\u6742\u5ea6\uff0c\u5b9e\u73b0\u53ea\u9700\u8981 $2.9\\text{KB}$\uff0c\u662f\u4e0d\u6298\u4e0d\u6263\u7684\u5c0f\u6e05\u65b0\u505a\u6cd5\u3002\n- [\u539f\u535a\u5ba2](https://www.luogu.com.cn/paste/ziyzdp95)\u5199\u592a\u7cca\u4e86\u5417\uff1f\u90a3\u6211\u91cd\u65b0\u6539\u4e00\u70b9\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u4ee3\u7801\u590d\u6742\u5ea6\u7684\u5e73\u51e1\u5c0f trick \u554a\uff0c\u6211\u4f30\u8ba1\u7edd\u5927\u591a\u6570\u4eba\u80af\u5b9a\u65e9\u5c31\u53d1\u73b0\u4e86\uff0c\u81f3\u4e8e\u5199\u8fd9\u4e48\u591a\u5417\u3002\n- \u672c\u9898\u9898\u89e3\u7ecf\u8fc7\u6539\u7248\u4e4b\u540e\u5df2\u7ecf\u6bd4\u9898\u89e3\u533a\u7edd\u5927\u591a\u6570\u9898\u89e3\u8be6\u7ec6\u4e86\uff0c\u800c\u4e14\u52a0\u4e86\u66f4\u4f18\u7684\u505a\u6cd5\uff0c\u4ee3\u7801\u4e5f\u66f4\u7b80\u77ed\uff0c\u5e94\u8be5\u80fd\u8fc7\u4e86\u5427\u3002\n- \u4f5c\u8005\u5df2\u7ecf\u9000\u5f79\uff0c\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u80fd\u591f\u5e2e\u5230\u66f4\u591a\u7684\u4eba\u3002\n\n**[\u9898\u610f](https://www.luogu.com.cn/problem/P5163)**\n- \u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u652f\u6301\u5220\u8fb9\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u6c42\u5355\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u524d $k$ \u5927\u8282\u70b9\u7684\u6743\u503c\u548c\u3002\n\n**\u5957\u8def\u8f6c\u5316**\n- \u9898\u76ee\u5f88\u4e0d\u63a5\u8fd1\u672c\u8d28\uff01\u6240\u4ee5\u4f5c\u8005\u8981\u50cf\u6d0b\u8471\u4e00\u6837\u4e00\u5c42\u5c42\u62e8\u5f00\uff0c\u8fd9\u4e9b\u5916\u76ae\u5176\u5b83\u535a\u5ba2\u5df2\u6709\u8bb2\u8ff0\uff0c\u5728\u6b64\u6ca1\u6709\u8be6\u7ec6\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53c2\u7167\u524d\u60c5\u63d0\u8981\u3002\n- ``\u4e00\u9053\u597d\u9898\u4e0d\u5e94\u8be5\u662f\u4e24\u9053\u9898\u62fc\u5728\u4e00\u8d77\uff0c\u4e00\u9053\u597d\u9898\u4f1a\u6709\u81ea\u5df1\u7684idea \u2014\u2014 \u800c\u5b83\u5e94\u8be5\u4e0d\u52a0\u8fc7\u591a\u5305\u88c5\u5730\u7a81\u51fa\u8fd9\u4e2aidea\u3002``\n- \u5957\u8def 1\uff1a\u52a0\u8fb9\u6bd4\u5220\u8fb9\uff08\u4e00\u822c\uff09\u66f4\u5bb9\u6613\uff0c\u6240\u4ee5\u65f6\u5149\u5012\u6d41\u6539\u6210\u53ea\u6709\u52a0\u8fb9\u7684\u60c5\u51b5\u3002\n- \u5957\u8def 2\uff1a\u8003\u8651\u5f31\u5316\u95ee\u9898\uff0c\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5728\uff08\u4e0d\u79bb\u6563\u5316 $O(q\\log w)$\uff0c\u79bb\u6563\u5316 $O(q\\log(n+q))$\uff09\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u7ef4\u62a4\u6574\u4e2a\u4fe1\u606f\u3002\n- \u5957\u8def 3\uff1a\u8f6c\u5316\u6210\u5f31\u5316\u95ee\u9898\uff0c\u5bf9\u4e8e\u6bcf\u6761\u6709\u5411\u8fb9\uff0c\u5982\u679c\u80fd\u7b97\u51fa\u5b83\u4ec0\u4e48\u65f6\u5019\u88ab\u7f29\u5165\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\uff0c\u5373\u53ef\u8f6c\u5316\u4e3a\u65e0\u5411\u56fe\u7684\u60c5\u51b5\u3002\n- \u5957\u8def 4\uff1a\u89c2\u5bdf\u7279\u6b8a\u6027\u8d28\uff0c\u5bf9\u4e8e\u5355\u6761\u8fb9\uff0c\u7b54\u6848\u6ee1\u8db3\u53ef\u4e8c\u5206\u6027\uff0c\u5bf9\u4e8e\u591a\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6574\u4f53\u4e8c\u5206\u3002\n\n**\u6574\u4f53\u4e8c\u5206\u91cc\u7684\u7ec6\u8282\uff08\u4f20\u7edf\u505a\u6cd5\uff09**\n- \u6211\u4eec\u6252\u62c9\u4e00\u4e0b\u6574\u4f53\u4e8c\u5206\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff01\n- \u5df2\u77e5\u7b54\u6848\u5728 $[l,r]$ \u533a\u95f4\u5185\uff0c\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e9b\u8fb9\u6709\u6ca1\u6709\u88ab\u7f29\u5165\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u90e8\uff0c\u628a\u51fa\u73b0\u65f6\u95f4 $\\le mid$ \u7684\u8fb9\u52a0\u5165\uff0c\u6ce8\u610f\u7f29\u70b9\u7684\u65f6\u5019\u8981\u4e0d\u8003\u8651\u5b64\u7acb\u70b9\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u628a\u88ab\u7f29\u5165\u7684\u8fb9\u548c\u4e0d\u88ab\u7f29\u5165\u7684\u8fb9\u5206\u6210\u5de6\u53f3\u4e24\u90e8\u5206\u3002\n- \u8fd9\u4e2a\u65f6\u5019\uff0c\u5de6\u8fb9\u7684\u8fb9\u53ef\u4ee5\u76f4\u63a5\u4e0b\u4f20 $[l,mid]$\uff08\u5de6\u513f\u5b50\uff09\uff0c\u800c $[mid+1,r]$\uff08\u53f3\u513f\u5b50\uff09\u7684\u8fb9\u8981\u4f53\u73b0\u5de6\u7aef\u70b9\u8d21\u732e\u7684\u5f3a\u8fde\u901a\u6027\uff0c\u4e0d\u96be\u53d1\u73b0\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u8868\u793a\u8fd9\u79cd\u5f3a\u8fde\u901a\u6027\uff0c\u56e0\u6b64\uff0c\u6700\u4f20\u7edf\u7684\u65b9\u6cd5\u7b80\u8ff0\u5982\u4e0b\uff1a\n\n**\uff08\u4f20\u7edf\u505a\u6cd5\uff09\u65b9\u6cd5\u7b80\u8ff0**\n- \u5efa\u56fe\uff0c\u628a\u51fa\u73b0\u65f6\u95f4 $\\le mid$ \u7684\u8fb9\u52a0\u5165\u7f29\u597d\u5f3a\u8fde\u901a\u6027\u7684\u56fe\u4e2d\u3002\n- \u8dd1 Tarjan \u6765\u7f29\u70b9\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u4e0d\u8981\u904d\u5386\u5b64\u7acb\u70b9\u3002\n- \u6839\u636e\u5f3a\u8fde\u901a\u6027\u628a\u8fb9\u5212\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002\n- \u628a\u65b0\u4ea7\u751f\u7684\u5f3a\u8fde\u901a\u6027\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n- \u6c42\u89e3\u53f3\u513f\u5b50\u3002\n- \u5c06\u672c\u5c42\u4ea7\u751f\u7684\u5f3a\u8fde\u901a\u6027\u4ece\u5e76\u67e5\u96c6\u4e2d\u64a4\u56de\u3002\n- \u6c42\u89e3\u5de6\u513f\u5b50\u3002\n- \u663e\u7136\uff0c\u6bcf\u4e00\u5c42\u5982\u679c\u5904\u7406 $m$ \u6761\u8fb9\uff0c\u7531\u6309\u79e9\u5408\u5e76\u7684\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6240\u4ea7\u751f\u7684\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(m\\log m)$\uff0c\u800c\u6bcf\u6761\u8fb9\u6700\u591a\u7ecf\u8fc7 $\\log$ \u5c42\uff0c\u590d\u6742\u5ea6\u4e3a $O(m\\log^2m)$\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/26wcrfow)\u3002\n- \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4e4b\u524d\u8bf4\u6574\u4f53\u4e8c\u5206\u7684\u590d\u6742\u5ea6\u662f\u74f6\u9888\uff0c\u800c\u6211\u4eec\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4f18\u5316\u5462\uff1f\u539f\u56e0\u5f88\u7b80\u5355\uff01\n\n**\u4e3a\u5565\u5982\u6b64\u7b80\u5355\u7684\u5c0f trick \u8981\u8ba9\u4f5c\u8005\u8bb2\u8fd9\u4e48\u4e45**\n- \u5b9e\u9645\u4e0a\uff0c\u4f53\u73b0\u5f3a\u8fde\u901a\u6027\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u53ea\u9700\u8981\u628a\u88ab\u7f29\u8d77\u6765\u7684\u70b9\u5f53\u6210\u540c\u4e00\u4e2a\u70b9\u5c31\u597d\u4e86\u3002\n- \u8fd9\u9898\u7684\u505a\u6cd5\u770b\u4f3c\u6ca1\u6709\u4f18\u5316\u7a7a\u95f4\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd8\u662f\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u5177\u6709\u6bd4\u5e76\u67e5\u96c6\u5f31\u7684\u6027\u8d28\uff1a\u5982\u679c\u4e00\u4e9b\u70b9\u88ab\u7f29\u8d77\u6765\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53d6\u4e00\u4e2a\u6839\u6765\u4ee3\u66ff\u5b83\uff0c\u5982\u679c\u8fd9\u4e2a\u6839\u518d\u88ab\u7f29\u8d77\u6765\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u6839\u4ee3\u8868\u7684\u5176\u5b83\u70b9\u4e86\uff01\u8fd9\u4fbf\u662f\u8bc0\u7a8d\uff01\n- \u6211\u4eec\u5728 Tarjan \u7684\u65f6\u5019\uff0c\u4fbf\u53ef\u4ee5\u7ed9\u6240\u6709\u70b9\u9009\u51fa\u4e00\u4e2a\u4ee3\u8868\uff0c\u7136\u540e\u5bf9\u4e8e\u4e0b\u4f20\u5230\u53f3\u513f\u5b50\u7684\u8fb9\uff0c\u628a\u70b9\u66ff\u6362\u4e3a\u5176\u4ee3\u8868\u5373\u53ef\u3002\n\n**\uff08\u65b0\u505a\u6cd5\uff09\u65b9\u6cd5\u7b80\u8ff0**\n- \u5efa\u56fe\uff0c\u628a\u51fa\u73b0\u65f6\u95f4 $\\le mid$ \u7684\u8fb9\u52a0\u5165\u7f29\u597d\u5f3a\u8fde\u901a\u6027\u7684\u56fe\u4e2d\u3002\n- \u8dd1 Tarjan \u6765\u7f29\u70b9\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u4e0d\u8981\u904d\u5386\u5b64\u7acb\u70b9\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u70b9\u9009\u51fa\u4e00\u4e2a\u4ee3\u8868\u3002\n- \u6839\u636e\u5f3a\u8fde\u901a\u6027\u628a\u8fb9\u5212\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002\n- \u7528\u4ee3\u8868\u628a\u8981\u52a0\u5165\u53f3\u513f\u5b50\u5185\u90e8\u7684\u8fb9\u91cd\u6807\u53f7\u3002\n- \u6c42\u89e3\u5de6\u513f\u5b50\u3002\n- \u6c42\u89e3\u53f3\u513f\u5b50\u3002\n- \u663e\u7136\uff0c\u8be5\u505a\u6cd5\u4e0d\u9700\u8981\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e00\u5c42\u5982\u679c\u5904\u7406 $m$ \u6761\u8fb9\uff0c\u7531 Tarjan \u6240\u4ea7\u751f\u7684\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(m)$\uff0c\u800c\u6bcf\u6761\u8fb9\u6700\u591a\u7ecf\u8fc7 $\\log$ \u5c42\uff0c\u590d\u6742\u5ea6\u4e3a $O(m\\log m)$\uff0c[\u6700\u7ec8\u4ee3\u7801](https://www.luogu.com.cn/paste/55dk3xv2)\u3002",
        "postTime": 1664538705,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "\u9707\u60ca\uff0c\u67d0\u9000\u5f79\u83dc\u9e21\u4e3a\u4e86\u5199\u6c34\u9898\u7684\u66f4\u4f18\u89e3\u6cd5\u5c45\u7136\u505a\u51fa\u8fd9\u4ef6\u4e8b\uff01"
    },
    {
        "content": "\u9996\u5148\u5c06\u64cd\u4f5c\u5012\u5e8f\uff0c\u628a\u5220\u8fb9\u8f6c\u5316\u4e3a\u52a0\u8fb9\u3002\u5148\u8003\u8651\u82e5\u8fb9\u662f\u65e0\u5411\u8fb9\uff0c\u6761\u4ef6\u4e3a\u8fde\u901a\uff0c\u8981\u600e\u4e48\u5904\u7406\u3002\n\n\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u7ef4\u62a4\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u8fde\u901a\u5757\u7684\u5408\u5e76\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u5b9e\u73b0\uff0c\u7ebf\u6bb5\u6811\u540c\u65f6\u4e5f\u652f\u6301\u4e86\u4fee\u6539\u70b9\u6743\u3002\n\n\u7136\u540e\u518d\u8003\u8651\u5bf9\u4e8e\u6709\u5411\u8fb9\u548c\u5f3a\u8fde\u901a\u5206\u91cf\u8981\u600e\u4e48\u505a\u3002\u65e0\u5411\u8fb9\u7684\u4f5c\u7528\u662f\u4f7f\u4e24\u4e2a\u8fde\u901a\u5757\u6210\u4e3a\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6709\u5411\u8fb9\u7684\u4f5c\u7528\u662f\u4f7f\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6210\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u4f46\u662f\u52a0\u5165\u4e00\u6761\u6709\u5411\u8fb9\u540e\uff0c\u5176\u4e24\u7aef\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e0d\u4e00\u5b9a\u5408\u5e76\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u968f\u7740\u5176\u4ed6\u8fb9\u7684\u52a0\u5165\uff0c\u8be5\u8fb9\u624d\u6709\u53ef\u80fd\u53d1\u6325\u5176\u4f5c\u7528\u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5bf9\u6bcf\u6761\u8fb9\u4e8c\u5206\u51fa\u4e00\u4e2a\u65f6\u523b\uff0c\u4e3a\u52a0\u5165\u8be5\u8fb9\u540e\uff0c\u968f\u7740\u8fb9\u7684\u52a0\u5165\uff0c\u5176\u4e24\u7aef\u5f3a\u8fde\u901a\u5206\u91cf\u5408\u5e76\u7684\u6700\u65e9\u65f6\u523b\u3002\u5355\u72ec\u8003\u8651\u6bcf\u6761\u8fb9\u4e0d\u73b0\u5b9e\uff0c\u91c7\u53d6\u6574\u4f53\u4e8c\u5206\u6765\u5904\u7406\u3002\u5bf9\u4e8e\u5f53\u524d\u4e8c\u5206\u7684\u65f6\u95f4\u533a\u95f4 $[l,r]$\uff0c\u5bf9\u4e8e\u65f6\u95f4\u5728 $[0,mid]$ \u7684\u6240\u6709\u8fb9\u90fd\u52a0\u5165\uff0c\u7136\u540e\u7528 $Tarjan$ \u6765\u7f29\u70b9\uff0c\u82e5\u6ee1\u8db3\u6761\u4ef6\u5c31\u5bfb\u627e\u66f4\u65e9\u7684\u7b54\u6848\uff0c\u4e0d\u6ee1\u8db3\u5c31\u5c1d\u8bd5\u665a\u4e00\u4e9b\u7684\u7b54\u6848\u3002\n\n\u53d1\u73b0\u5728\u4e8c\u5206\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u90fd\u52a0\u5165 $[0,mid]$ \u7684\u6240\u6709\u8fb9\u6765\u8fdb\u884c\u7f29\u70b9\uff0c\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002\u5bf9\u4e8e\u5f53\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5229\u7528\u4e4b\u524d\u4e8c\u5206\u5f97\u5230\u7684\u7f29\u70b9\u7ed3\u679c\uff0c\u901a\u8fc7\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fde\u8fb9\u76f4\u63a5\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u8fde\u8fb9\u5373\u53ef\u3002\u5bf9\u4e8e\u4e8c\u5206\u7684\u533a\u95f4 $[l,r]$\uff0c\u5df2\u7ecf\u8fde\u597d\u4e86\u533a\u95f4 $[0,mid]$ \u7684\u8fb9\uff0c\u9012\u5f52\u65f6\u5148\u8fdb\u5165\u533a\u95f4 $[mid+1,r]$\uff0c\u8fd9\u6837\u5c31\u80fd\u5229\u7528\u4e0a\u4e4b\u524d\u7684\u8fde\u8fb9\u60c5\u51b5\uff0c\u9012\u5f52\u8fdb\u5165\u533a\u95f4 $[l,mid]$ \u4e4b\u524d\uff0c\u9700\u8981\u6e05\u9664\u4e4b\u524d\u8fde\u8fb9\u7684\u5f71\u54cd\uff0c\u8fd9\u91cc\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5b9e\u73b0\u5373\u53ef\u3002\n\n\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u7f29\u70b9\u4e0d\u7528\u8003\u8651\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u56e0\u4e3a\u5982\u679c\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u8fde\u8fb9\u548c\u5f53\u524d\u8003\u8651\u7684\u8fb9\u96c6\u4e2d\u7684\u8fb9\u80fd\u6784\u6210\u65b0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u8fb9\u96c6\u4e2d\u7684\u8be5\u6761\u8fb9\u4e00\u5b9a\u4f1a\u5728\u4e4b\u524d\u7684\u4e8c\u5206\u4e2d\u88ab\u5212\u5206\u5230\u7b54\u6848\u66f4\u65e9\u7684\u533a\u95f4\uff0c\u5373\u4e0d\u4f1a\u5728\u5f53\u524d\u533a\u95f4\u51fa\u73b0\uff0c\u6240\u4ee5\u53ea\u9700\u8003\u8651\u5f53\u524d\u8fb9\u96c6\u548c\u5176\u6d89\u53ca\u5230\u7684\u70b9\u5373\u53ef\u3002\n\n\u4e8c\u5206\u51fa\u65f6\u523b\u540e\uff0c\u7c7b\u6bd4\u65e0\u5411\u56fe\u7684\u5904\u7406\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 800010\n#define maxm 10000010\n#define mid ((l+r)>>1)\n#define mk make_pair\n#define ask(x) (lower_bound(s+1,s+tot+1,x)-s)\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,qu,top,tot,cnt,dfn_cnt,s_top,tree_cnt;\nint size[maxn],fa[maxn],t[maxn],dfn[maxn],low[maxn],sta[maxn];\nint ls[maxm],rs[maxm],rt[maxn],siz[maxm];\nll a[maxn],s[maxn],sum[maxm],ans[maxn];\nbool vis[maxn];\nmap<pair<int,int>,int> mp;\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nstruct node\n{\n    int x,y,t,opt;\n}p[maxn],p1[maxn],p2[maxn],q[maxn];\nbool cmp(const node &a,const node &b)\n{\n    if(a.t==b.t) return a.opt<b.opt;\n    return a.t<b.t;\n}\nstruct Stack\n{\n    int x,y;\n}st[maxn];\nint find(int x)\n{\n    return fa[x]==x?x:find(fa[x]);\n}\nvoid merge(int x,int y)\n{\n    x=find(x),y=find(y);\n    if(x==y) return;\n    if(size[x]<size[y]) swap(x,y);\n    st[++top]=(Stack){x,y},size[x]+=size[y],fa[y]=x;\n}\nvoid del(int id)\n{\n    int x=st[id].x,y=st[id].y;\n    fa[y]=y,size[x]-=size[y];\n}\nvoid tarjan(int x)\n{\n    dfn[x]=low[x]=++dfn_cnt,sta[++s_top]=x,vis[x]=true;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(!dfn[y]) tarjan(y),low[x]=min(low[x],low[y]);\n        else if(vis[y]) low[x]=min(low[x],dfn[y]);\n    }\n    if(dfn[x]==low[x])\n    {\n        int p=sta[s_top--],now;\n        vis[p]=false;\n        if(p==x) return;\n        do\n        {\n            now=sta[s_top--],vis[now]=false,merge(p,now);\n        }while(now!=x);\n    }\n}\nvoid clear(int n)\n{\n    edge_cnt=dfn_cnt=0;\n    for(int i=1;i<=n;++i) head[t[i]]=dfn[t[i]]=low[t[i]]=0;\n}\nvoid solve(int L,int R,int l,int r)\n{\n    if(L>R) return;\n    if(l==r)\n    {\n        for(int i=L;i<=R;++i) p[i].t=l;\n        return;\n    }\n    int now=top,num=0,cnt1=0,cnt2=0;\n    for(int i=L;i<=R;++i)\n    {\n        if(p[i].t>mid) continue;\n        int x=find(p[i].x),y=find(p[i].y);\n        t[++num]=x,t[++num]=y,add(x,y);\n    }\n    for(int i=1;i<=num;++i)\n        if(!dfn[t[i]])\n            tarjan(t[i]);\n    for(int i=L;i<=R;++i)\n    {\n        if(p[i].t<=mid&&find(p[i].x)==find(p[i].y)) p1[++cnt1]=p[i];\n        else p2[++cnt2]=p[i];\n    }\n    for(int i=1;i<=cnt1;++i) p[L+i-1]=p1[i];\n    for(int i=1;i<=cnt2;++i) p[L+cnt1+i-1]=p2[i];\n    clear(num),solve(L+cnt1,R,mid+1,r);\n    while(top>now) del(top--);\n    solve(L,L+cnt1-1,l,mid);\n}\nvoid modify(int l,int r,int pos,int v,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    siz[cur]+=v,sum[cur]+=s[pos]*v;\n    if(l==r) return;\n    if(pos<=mid) modify(l,mid,pos,v,ls[cur]);\n    else modify(mid+1,r,pos,v,rs[cur]);\n}\nll query(int l,int r,int k,int cur)\n{\n    if(k>siz[cur]) return sum[cur];\n    if(l==r) return s[l]*k;\n    if(k<=siz[rs[cur]]) return query(mid+1,r,k,rs[cur]);\n    return query(l,mid,k-siz[rs[cur]],ls[cur])+sum[rs[cur]];\n}\nint merge(int x,int y,int l,int r)\n{\n    if(!x||!y) return x+y;\n    if(l==r)\n    {\n        siz[x]+=siz[y],sum[x]+=sum[y];\n        return x;\n    }\n    ls[x]=merge(ls[x],ls[y],l,mid),rs[x]=merge(rs[x],rs[y],mid+1,r);\n    siz[x]=siz[ls[x]]+siz[rs[x]],sum[x]=sum[ls[x]]+sum[rs[x]];\n    return x;\n}\nint main()\n{\n    read(n),read(m),read(qu),cnt=m;\n    for(int i=1;i<=n;++i)\n        read(a[i]),s[++tot]=a[i],fa[i]=i,size[i]=1;\n    for(int i=1;i<=m;++i)\n        read(p[i].x),read(p[i].y),mp[mk(p[i].x,p[i].y)]=i;\n    for(int i=1;i<=qu;++i)\n    {\n        read(q[i].opt),read(q[i].x),read(q[i].y),q[i].t=qu-i+1;\n        if(q[i].opt==1) p[mp[mk(q[i].x,q[i].y)]].t=q[i].t;\n        if(q[i].opt==2) a[q[i].x]+=q[i].y,s[++tot]=a[q[i].x];\n    }\n    sort(s+1,s+tot+1),tot=unique(s+1,s+tot+1)-s-1,solve(1,m,0,qu+1);\n    for(int i=1;i<=n;++i)\n        modify(1,tot,ask(a[i]),1,rt[i]),fa[i]=i,size[i]=1;\n    for(int i=1;i<=qu;++i)\n        if(q[i].opt!=1)\n            p[++cnt]=q[i];\n    sort(p+1,p+cnt+1,cmp);\n    for(int i=1;i<=cnt;++i)\n    {\n        int x=p[i].x,y=p[i].y,t=p[i].t,opt=p[i].opt,f;\n        if(!opt)\n        {\n            x=find(x),y=find(y);\n            if(x==y) continue;\n            if(size[x]<size[y]) swap(x,y);\n            size[x]+=size[y],fa[y]=x;\n            rt[x]=merge(rt[x],rt[y],1,tot);\n        }\n        if(opt==2)\n        {\n            f=find(x),modify(1,tot,ask(a[x]),-1,rt[f]);\n            a[x]-=y,modify(1,tot,ask(a[x]),1,rt[f]);\n        }\n        if(opt==3) f=find(x),ans[qu-t+1]=query(1,tot,y,rt[f]);\n    }\n    for(int i=1;i<=qu;++i)\n        if(q[i].opt==3)\n            printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1594132189,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "## \u7b80\u8981\u9898\u610f\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u6709\u5411\u7b80\u5355\u56fe\uff0c\u70b9\u5e26\u6743\uff0c\u4f60\u8981\u5b9e\u73b0 $q$ \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5305\u62ec\uff1a1\uff09\u5220\u9664\u4e00\u6761\u8fb9\uff1b2\uff09\u5355\u70b9\u52a0\uff1b3\uff09\u8be2\u95ee\u4e00\u4e2a\u70b9\u6240\u5728\u7684 DCC \u5185 \u524d $k$ \u5927\u7684\u70b9\u6743\u7684\u548c\u3002  \n$n \\le 10^5,m,q\\le 2*10^5$ \u4efb\u610f\u65f6\u523b\u70b9\u6743\u4e0d\u8d85\u8fc7 $10^9$\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u9996\u5148\u65f6\u5149\u5012\u6d41\uff0c\u5220\u8fb9\u53d8\u52a0\u8fb9\uff0c\u4f46\u52a8\u6001\u7ef4\u62a4 DCC \u4f9d\u7136\u662f\u4e0d\u592a\u53ef\u505a\u7684\u3002\u8003\u8651\u6362\u4e2a\u601d\u8def\uff0c\u5148\u7ea6\u5b9a\uff1a \n1. \u65f6\u95f4\u8f74\u4e3a $[0,q+1]$ \uff0c\u5de6\u5c0f\u53f3\u5927\u3002\n2. \u4e00\u6761\u8fb9\u7684**\u51fa\u73b0\u65f6\u95f4**\u4e3a\u5b83\u539f\u6765\u7684\u5220\u9664\u65f6\u95f4\u3002\u5982\u679c\u6ca1\u6709\u88ab\u5220\u9664\u5219\u4e3a $q+1$\u3002\n3. \u4e00\u6761\u8fb9\u7684**\u5408\u5e76\u65f6\u95f4**\u4e3a\u5176\u8fde\u63a5\u4e24\u4e2a\u9876\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a DCC \u7684\u65f6\u95f4\uff0c\u663e\u7136\uff0c\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u5408\u5e76\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u51fa\u73b0\u65f6\u95f4\u3002\u5982\u679c\u59cb\u7ec8\u6ca1\u6709\u5408\u5e76\u5219\u4e3a $0$\u3002\n\n\u5982\u679c\u6211\u4eec\u80fd\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u5408\u5e76\u65f6\u95f4\uff0c\u7136\u540e\u6309\u8fd9\u4e2a**\u5408\u5e76\u65f6\u95f4**\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5408\u5e76\uff0c\u5c31\u8ddf\u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u5757\u4e00\u6837\u505a\u4e86\u3002\u81f3\u4e8e2)\u548c3\uff09\u64cd\u4f5c\uff0c\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811+\u542f\u53d1\u5f0f\u5408\u5e76\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u3002\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c**\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u5408\u5e76\u65f6\u95f4**\u3002\u8003\u8651\u7528\u6574\u4f53\u4e8c\u5206\u89e3\u51b3\u3002\n## \u7b97\u6cd5\u8bbe\u8ba1\u2014\u2014\u6574\u4f53\u4e8c\u5206\n\u5b9a\u4e49 $solve(l,r,ll,rr)$ \u8868\u793a\uff0c\u7b54\u6848\u533a\u95f4\u4e3a $[l,r]$ \uff0c\u5f53\u524d\u8981\u6c42\u51fa\u7f16\u53f7\u5c5e\u4e8e $[ll,rr]$ \u7684\u8fb9\u7684\u5408\u5e76\u65f6\u95f4\u3002\u540c\u65f6\u9700\u8981\u4fdd\u8bc1\uff0c\u5df2\u77e5\u52a0\u5165\u51fa\u73b0\u65f6\u95f4\u5728 $[r+1,q+1]$ \u5185\u7684\u8fb9\u540e\u56fe\u7684\u8054\u901a\u4fe1\u606f\uff0c\uff08\u4e5f\u5c31\u662f\u54ea\u4e9b\u70b9\u5c5e\u4e8e\u4e00\u4e2a DCC\uff09\uff0c\u8fd9\u4e2a\u4fe1\u606f\u7528\u5e76\u67e5\u96c6\u5b58\u50a8\u3002\u4ee4 $mid = (l+r)/2$\uff0c\u6211\u4eec\u8bd5\u56fe\u628a\u7f16\u53f7\u5728 $[ll,rr]$ \u5185\u7684\u8fb9\u6309\u7167\u5408\u5e76\u65f6\u95f4\u662f\u5426**\u5927\u4e8e** $mid$ \u5212\u6210\u4e24\u90e8\u5206\uff0c\u7136\u540e\u53ef\u4ee5\u5411\u4e24\u8fb9\u5206\u6cbb\u3002\n\u7b97\u6cd5\u6d41\u7a0b\uff1a\n1. \u5982\u679c $l=r$ \uff0c\u5219 $[ll,rr]$ \u5185\u8fb9\u7684\u5408\u5e76\u65f6\u95f4\u5c31\u662f $l$ \uff0c\u76f4\u63a5 `return`\u3002\n2. $mid \\gets (l+r)/2$\uff0c\u52a0\u5165\u7f16\u53f7\u5728 $[ll,rr]$ \u5185\u4e14\u51fa\u73b0\u65f6\u95f4\u5927\u4e8e $mid$ \u7684\u8fb9\u3002\u5047\u8bbe\u8981\u52a0\u5165\u4e00\u6761\u8fb9 $e(x,y)$\uff0c `link(find(x),find(y))` \u4e5f\u5c31\u662f\u8fde\u63a5 $x,y$ \u6240\u5728 DCC \u7684\u4ee3\u8868\u70b9\u3002\n3. \u5728 **2.** \u4e2d\u5efa\u51fa\u7684\u56fe\u4e2d\u8dd1 `tarjan` \uff0c\u5e76\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u65b0\u7684 DCC\u3002\u6ce8\u610f\uff0c\u53ea\u80fd\u8dd1\u5728 **2.** \u4e2d\u8fde\u4e86\u8fb9\u7684\u70b9\uff0c\u5426\u5219\u590d\u6742\u5ea6\u662f\u9519\u7684\u3002\n4. **\u5b8c\u5168\u6e05\u9664** **2.** \u4e2d\u8fde\u7684\u8fb9\u3002\n5. \u904d\u5386 $[ll,rr]$ \u5185\u7684\u8fb9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u7684 \u51fa\u73b0\u65f6\u95f4\u5927\u4e8e $mid$\uff08\u5bb9\u6613\u5ffd\u7565\uff09\u4e14\u4e24\u7aef\u5728\u540c\u4e00\u4e2a DCC \u5185\uff0c\u5219\u5212\u5206\u5230\u53f3\u8fb9\uff1b\u5426\u5219\u5212\u5206\u5230\u5de6\u8fb9\u3002\u4ee4 $[ll,p]$ \u4e3a\u5212\u5206\u5230\u5de6\u8fb9\u7684\u8fb9\u3002\n6. \u56e0\u4e3a\u6211\u4eec\u8fd8\u672a\u6267\u884c **7.** \uff0c\u6ee1\u8db3\u300c\u5df2\u77e5\u52a0\u5165\u51fa\u73b0\u65f6\u95f4\u5728 $[mid+1,q+1]$ \u5185\u7684\u8fb9\u540e\u56fe\u7684\u8054\u901a\u4fe1\u606f\u300d\u7684\u8981\u6c42\uff0c `solve(l,mid,ll,p)`\u3002\n7. \u64a4\u9500\u5728\u7b2c\u4e8c\u6b65\u4e2d\u6267\u884c\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\u3002\n8. `solve(mid+1,r,p+1,rr)`\u3002\n\n\u8fd9\u91cc\u9762\u6709\u4e2a\u660e\u663e\u7684\u7ec6\u8282\u95ee\u9898\uff08\u96fe\uff09\uff1a\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u5168\u90e8\u62c6\u4e86\uff08\u6267\u884c **4.** \uff09\uff0c\u53ea\u4fdd\u7559\u5e76\u67e5\u96c6\u4e2d\u7684\u4fe1\u606f\uff0c\u5c31 `solve(l,mid,ll,p)`\uff1f\u4e07\u4e00\u8fd9\u4e9b\u8fb9\u5bf9\u5de6\u8fb9\u6709\u7528\u548b\u529e\uff1f\n\u4ed4\u7ec6\u5206\u6790\u53d1\u73b0\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u6211\u4eec\u52a0\u5165\u7684\u8fb9\u65e0\u975e\u6709\u4e24\u79cd\u547d\u8fd0\uff1a  \n1)\u88ab\u5212\u5206\u5230\u5de6\u8fb9\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u4e0d\u662f\u95ee\u9898\u4e86\uff0c\u53cd\u6b63\u5206\u6cbb\u5de6\u8fb9\u65f6\u5b83\u8fd8\u80fd\u518d\u52a0\u8fdb\u53bb\u3002\n2)\u88ab\u5212\u5206\u5230\u53f3\u8fb9\uff0c\u8bf4\u660e\u5b83\u7684\u4e24\u7aef\u5728\u540c\u4e00\u4e2a DCC \u5185\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u4fdd\u7559\u4e86\u5e76\u67e5\u96c6\u7684\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u4fe1\u606f\u4e22\u5931\u3002  \n~~\u597d\u50cf\u5f88\u4e0d\u8db3\u9053\u7684\u6837\u5b50\u3002~~  \n## \u4ee3\u7801\n\u4ee3\u7801\u5e94\u8be5\u4e0d\u4e11\u4f46\u662f\u6709yi\u70b9\u957f\u3002~~\u5efa\u8bae\u4e0d\u8981\u770b\u3002~~\n```cpp\n#include<bits/stdc++.h>\n#define mk make_pair\n#define pk push_back \nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> pi;\nconst int N=1e5+5,M=2e5+5;\nstruct opt{\n\tint op,x,y,t;\n\topt(int op=0,int x=0,int y=0,int t=0):op(op),x(x),y(y),t(t){}\n\tbool operator < (const opt &tmp)const{return t==tmp.t?op<tmp.op:t>tmp.t;}\n}b[M<<1];\nstruct edge{\n\tint x,y,t,nt;\n\tedge(int x=0,int y=0,int t=0):x(x),y(y),t(t){}\n}e[M];\nint n,m,q;\nnamespace prework{\n\tedge t[M<<1];\n\tint idx,dfn[N],low[N],fa[N],sz[N],in[N];\n\tvector<int> to[N];\n\tint find(int x){return x==fa[x]?x:find(fa[x]);}\n\tvoid merge(int x,int y,stack<pi> &st){\n\t\tx=find(x),y=find(y);\n\t\tif(x==y) return ;\n\t\tif(sz[x]<sz[y]) swap(x,y);\n\t\tsz[x]+=sz[y];fa[y]=x;st.push(mk(x,y));\n\t}\n\tvoid tarjan(int x,stack<pi> &st2){\n\t\tstatic stack<int> st; \n\t\tdfn[x]=low[x]=++idx;st.push(x);in[x]=1;\n\t\tfor(auto y:to[x])if(!dfn[y]) tarjan(y,st2),low[x]=min(low[x],low[y]);\n\t\telse if(in[y]) low[x]=min(low[x],dfn[y]);\n\t\tif(dfn[x]==low[x]){\n\t\t\twhile(st.top()^x){\n\t\t\t\tmerge(st.top(),x,st2);\n\t\t\t\tin[st.top()]=0;\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\tin[st.top()]=0;\n\t\t\tst.pop();\n\t\t}\n\t}\n\tvoid solve(int l,int r,int ll,int rr){\n\t\tif(l==r){\n\t\t\tfor(int i=ll;i<=rr;++i) e[i].nt=l;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tvector<int> nd; \n\t\tfor(int i=ll;i<=rr;++i)if(e[i].t>mid){\n\t\t\tint fx=find(e[i].x),fy=find(e[i].y);\n\t\t\tto[fx].pk(fy);\n\t\t\tnd.pk(fx),nd.pk(fy);\n\t\t} \n\t\tstack<pi> st;\n\t\tfor(auto x:nd)if(!dfn[x]) tarjan(x,st);\n\t\tidx=0;\n\t\tfor(auto x:nd) to[x].clear(),dfn[x]=0;\n\t\tint p1=ll,p2=rr;\n\t\tfor(int i=ll;i<=rr;++i)\n\t\t\tif(e[i].t>mid&&find(e[i].x)==find(e[i].y)) t[p2--]=e[i];\n\t\t\telse t[p1++]=e[i];\n\t\tfor(int i=ll;i<=rr;++i) e[i]=t[i];\n\t\tsolve(l,mid,ll,p1-1);\n\t\twhile(st.size()){\n\t\t\tint x=st.top().first,y=st.top().second;\n\t\t\tsz[x]-=sz[y];fa[y]=y;\n\t\t\tst.pop();\n\t\t}\n\t\tsolve(mid+1,r,p2+1,rr);\n\t}\n}\nnamespace seg{\n\t#define tl ls[id]\n\t#define tr rs[id]\n\t#define mid (l+r>>1)\n\t#define lson tl,l,mid\n\t#define rson tr,mid+1,r\n\tconst int M=400,D=1e9;\n\tint tot,a[N],fa[N],sz[N],rt[N],ls[N*M],rs[N*M],sz2[N*M];LL s[N*M];\n\tint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\tvoid insert(int &id,int l,int r,int p,int fg){\n\t\tif(!id) id=++tot;\n\t\ts[id]+=p*fg;sz2[id]+=fg;\n\t\tif(l==r) return ;\n\t\tp<=mid?insert(lson,p,fg):insert(rson,p,fg); \n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y) return x|y;\n\t\ts[x]+=s[y];sz2[x]+=sz2[y];\n\t\tls[x]=merge(ls[x],ls[y]);\n\t\trs[x]=merge(rs[x],rs[y]);\n\t\treturn x;\n\t}\n\tLL query(int id,int l,int r,int k){\n\t\tif(!id) return 0;\n\t\tif(l==r) return 1ll*k*l;\n\t\treturn k<=sz2[tr]?query(rson,k):s[tr]+query(lson,k-sz2[tr]);\n\t} \n\tvoid solve(int tot){\n\t\tsort(&b[1],&b[tot+1]);\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tfa[i]=i;sz[i]=1;\n\t\t\tinsert(rt[i],0,D,a[i],1);\n\t\t}\n\t\tstack<LL> ans;\n\t\tfor(int i=1;i<=tot;++i){\n\t\t\tint &op=b[i].op,&x=b[i].x,&y=b[i].y,fx=find(x);\n\t\t\tif(op==1){\n\t\t\t\tint fy=find(y);\n\t\t\t\tif(fx==fy) continue;\n\t\t\t\tif(sz[fx]<sz[fy]) swap(fx,fy),swap(x,y);\n\t\t\t\tsz[fx]+=sz[fy];fa[fy]=fx;rt[fx]=merge(rt[fx],rt[fy]); \n\t\t\t}\n\t\t\telse if(op==2) insert(rt[fx],0,D,a[x],-1),insert(rt[fx],0,D,a[x]-=y,1);\n\t\t\telse{\n\t\t\t\tans.push(query(rt[fx],0,D,y));\n\t\t\t}\n\t\t}\n\t\twhile(ans.size()) cout<<ans.top()<<endl,ans.pop();\n\t}\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=n;++i) cin>>seg::a[i];\n\tmap<pi,int> mp;\n\tfor(int i=1,x,y;i<=m;++i){\n\t\tcin>>x>>y;e[mp[mk(x,y)]=i]=(edge){x,y,q+1};\n\t}\n\tint tot=0;\n\tfor(int i=1,op,a,b;i<=q;++i){\n\t\tcin>>op>>a>>b;\n\t\tif(op==1) e[mp[mk(a,b)]].t=i;\n\t\telse if(op==2) seg::a[a]+=b,::b[++tot]=opt(2,a,b,i);\n\t\telse ::b[++tot]=opt(3,a,b,i);\n\t} \n\tfor(int i=1;i<=n;++i) prework::fa[i]=i,prework::sz[i]=1; \t\n\tprework::solve(0,q+1,1,m);\n\tfor(int i=1;i<=m;++i) b[++tot]=opt(1,e[i].x,e[i].y,e[i].nt);\n\tseg::solve(tot);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1599901804,
        "uid": 118092,
        "name": "\u9752\u541b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\u8fd9\u91cc\u662f\u4e00\u4e2a\u50bb\u903c\uff0c\u4ed6\u628a\u4e00\u4e2a\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5199\u6302\u4e86\u56db\u4e2a\u5730\u65b9\u5e76\u8c03\u4e86\u6574\u6574\u4e00\u5929\u3002\n\n---\n\n### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684 **\u6709\u5411\u56fe**\u3002\u8981\u6c42\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\u65ad\u8fb9\u3001\u5355\u70b9\u52a0\uff0c\u67e5\u8be2\u4e00\u4e2a\u70b9\u6240\u5728\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u6392\u540d\u524d $k$ \u7684\u6570\u7684\u548c\u3002\n\n### \u9898\u89e3\n\n\u975e\u5e38\u725b\u903c\u7684\u4e00\u4e2a\u9898\u3002\n\n\u4e00\u5f00\u59cb\u6ca1\u770b\u5230\u6709\u5411\u56fe\u8fd9\u4e2a\u4e1c\u897f\uff0c\u76f4\u63a5\u5634\u5df4\u4e86\u4e00\u4e2a\u5012\u5e8f\u52a0\u8fb9\u8dd1\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\uff08\u5168\u662f\u5957\u8def\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u5176\u4ed6\u7684\u9898\u89e3\uff09\u3002\u5199\u4e86\u4e09\u5341\u5206\u949f\u4ed4\u7ec6\u8bfb\u4e86\u8bfb\u9898\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/14789.png)\n\n\u4e8e\u662f\u4e0d\u4f1a\u3002\u6253\u5f00\u9898\u89e3\u3002\u53d1\u73b0\u662f\u4e2a\u6574\u4f53\u4e8c\u5206\u3002\u5173\u4e0a\u9898\u89e3\u3002\n\n\u8fd9\u600e\u4e48\u548c\u6574\u4f53\u4e8c\u5206\u626f\u4e0a\u7684\u5173\u7cfb\uff1f\n\n\u6211\u4eec\u6839\u636e\u521a\u624d\u90a3\u4e2a\u505a\u6cd5\u6765\u60f3\u4e00\u60f3\u6b63\u89e3\u3002\n\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5e76\u67e5\u96c6\u7ef4\u62a4\uff1f\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053\u628a $u$ \u548c $v$ \u8fde\u8d77\u6765\u4e4b\u540e\uff0c\u4ed6\u4eec\u4ec0\u4e48\u65f6\u5019\u4f1a\u5728\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u5934\u3002\n\n\u90a3\u6211\u4eec\u6c42\u51fa\u6765\u5bf9\u4e8e\u6bcf\u4e2a\u52a0\u8fb9 $u$ \u548c $v$\uff0c\u6700\u665a\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb $u$ \u548c $v$ \u4f1a\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u5934\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u7684\u65f6\u95f4\u8f74 $[0, q]$ \u662f\u5012\u5e8f\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b54\u6848\u662f $x$ \u7684\u65f6\u5019\uff0c\u5728\u8be2\u95ee $[0, x]$ \u4e4b\u95f4\uff0c$u$ \u548c $v$ \u5747\u5728\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u5934\u3002\n\n\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u52a3\u5728\u54ea\u513f\uff1f\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u628a\u56fe\u5efa\u51fa\u6765\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e00\u8138\u6574\u4f53\u4e8c\u5206\u7684\u6837\u5b50\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\uff0c\u5bf9\u4e8e\u5f53\u524d\u7b54\u6848\u533a\u95f4 $[l, r]$ \u548c\u8be2\u95ee\u5907\u9009\u533a\u95f4 $[L, R]$, \u5148\u5c06\u6240\u6709 $[r + 1, q]$ \u4e2d\u7684\u8fb9\u4e22\u8fdb\u56fe\u91cc\uff0c\u5bf9\u4e8e\u4e2d\u95f4\u7684\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u5176\u5b58\u5728\u65f6\u95f4\u662f\u665a\u4e8e $mid$ \u7684\uff0c\u5219\u628a\u4ed6\u4e5f\u4e22\u8fdb\u56fe\u4e2d\u3002\u7136\u540e\u8dd1\u4e00\u904d tarjan\uff0c\u9012\u5f52\u5c31\u5b8c\u4e86\u3002\n\n\u518d\u770b\u4e00\u773c\u53d1\u73b0\u590d\u6742\u5ea6\u975e\u5e38\u4e0d\u5bf9\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/pic/14789.png)\n\n\n\u4e0d\u5bf9\u5728\u54ea\u513f\uff1f\u6211\u4eec\u8fd8\u662f\u91cd\u590d\u5730\u52a0\u5165\u4e86\u5927\u91cf\u7684\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u4e0a\u4e00\u5c42\u5f80\u5de6\u9012\u5f52\u7684\u65f6\u5019\uff0c\u5f88\u591a\u7684\u8fb9\u5176\u5b9e\u662f\u6709\u7528\u7684\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u7f29\u70b9\uff0c\u6bcf\u6b21\u53ea\u628a\u5f53\u524d\u533a\u95f4\u5185\u7684\u8fb9\u8fde\u51fa\u6765\u3002\u5728\u5f80\u4e24\u8fb9\u9012\u5f52\u7684\u65f6\u5019\u6e05\u7a7a\u3002\u8fd9\u4e2a\u5e76\u67e5\u96c6\u5219\u5728\u5f80\u53f3\u9012\u5f52\u7684\u65f6\u5019\u6e05\u7a7a\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4e0d\u4ec5\u6210\u529f\u505a\u5bf9\u4e86\u590d\u6742\u5ea6\uff0c\u8fd8\u4fdd\u8bc1\u4e86\u6b63\u786e\u6027\u3002\n\n\u4f55\u6765\u7684\u6b63\u786e\u6027\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u4ed6\u8981\u4e48\u5728\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u5934 \u2014\u2014 \u4ed6\u5df2\u7ecf\u88ab\u7f29\u8fdb\u4e86\u70b9\u3002\n\n\u5426\u5219\u4ed6\u5c31\u4e0d\u5728\u2014\u2014\u4f46\u4ed6\u4e00\u5b9a\u4f1a\u5728\u5f80\u5de6\u9012\u5f52\u7684\u65f6\u5019\u88ab\u518d\u52a0\u8fdb\u53bb\u3002 \u539f\u56e0\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u628a\u5f53\u524d\u533a\u95f4\u4e0d\u7b26\u5408\u7684\u5168\u90e8\u4e22\u5230\u4e86\u5de6\u8fb9\uff0c\u81ea\u7136\u4f1a\u88ab\u518d\u52a0\u4e00\u904d\u3002\n\n\u4e8e\u662f\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u8fd9\u4e2a\u9898\u7684\u4ee3\u7801\u5b9e\u73b0\u5f88\u6709\u6280\u5de7\uff0c\u6211\u8fd9\u79cd\u5199\u7740\u5199\u7740\u5c31\u91cd\u540d\u7684\u53ea\u80fd namespace \u5c01\u88c5\u4e86\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/ooal4qgk)\u601d\u8def\u633a\u6e05\u6670\u7684\uff0c\u8fd8\u662f\u633a\u597d\u770b\u7684\u3002\n\n\n",
        "postTime": 1601389361,
        "uid": 55078,
        "name": "YLWang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "\u597d\u7384\u5999\u7684\u9898\u3002\n\n\u64cd\u4f5c\u53ea\u6709\u5220\u8fb9\uff0c\u5957\u8def\u53cd\u8f6c\u64cd\u4f5c\u987a\u5e8f\u8f6c\u5316\u4e3a\u52a0\u8fb9\u3002\n\n\u8fd9\u4e2a\u9898\u5982\u679c\u653e\u5728\u65e0\u5411\u56fe\u4e0a\u5c31\u5f88\u597d\u505a\u4e86\uff0c$1$ \u64cd\u4f5c\u76f8\u5f53\u4e8e\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c$2$ \u64cd\u4f5c\u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539\uff0c$3$ \u64cd\u4f5c\u76f8\u5f53\u4e8e\u67e5\u8fde\u901a\u5757\u5185\u524d $k$ \u5927\u7684\u548c\uff0c\u8fd9\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5efa\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c $2$ \u64cd\u4f5c\u76f4\u63a5\u4fee\u6539\uff0c$1$ \u64cd\u4f5c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c$3$ \u64cd\u4f5c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u95ee\u9898\u8f6c\u5316\u5230\u65e0\u5411\u56fe\u4e0a\u3002\u4e0d\u96be\u770b\u51fa\uff0c\u9898\u76ee\u8bf4\u7684\u5730\u533a\u5373\u4e3a\u5f3a\u8fde\u901a\u5206\n\u91cf\u3002\u5982\u679c\u628a\u5f3a\u8fde\u901a\u5173\u7cfb\u770b\u6210\u4e00\u6761\u65e0\u5411\u8fb9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8f6c\u5316\u5230\u65e0\u5411\u56fe\u7684\u60c5\u51b5\u4e86\u3002\n\n\u79f0\u201c\u5185\u8fb9\u201d\u4e3a\u7aef\u70b9\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8fb9\u3002\u4e0d\u96be\u770b\u51fa\uff0c\u4ec5\u4fdd\u7559\u5185\u8fb9\u5e76\u5c06\u5185\u8fb9\u53d8\u4e3a\u65e0\u5411\u8fb9\u7684\u56fe\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u5bf9\u5e94\u4e86\u539f\u56fe\u7684\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u63d0\u793a\u6211\u4eec\uff1a\u5982\u679c\u77e5\u9053\u6bcf\u6761\u5185\u8fb9\u4e24\u7aef\u8fdb\u5165\u5c5e\u4e8e\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u95f4 $t$\uff08\u5373\u65e0\u5411\u8fb9\u8fde\u63a5\u7684\u65f6\u95f4\uff09\uff0c\u90a3\u4e48\u6309\u7167\u65f6\u95f4\u6392\u5e8f\u540e\uff0c\u53ef\u4ee5\u6309\u7167\u65e0\u5411\u56fe\u6765\u505a\u3002\n\n\u5982\u679c\u53ea\u6c42\u4e00\u6761\u5185\u8fb9\u7684\u65f6\u95f4 $t$\uff0c\u7ecf\u5178\u7684\u505a\u6cd5\u662f\u4e8c\u5206\uff0c\u6bcf\u6b21\u52a0\u5165 $T_i\\le mid$ \u7684\u8fb9\u5e76 tarjan \u5224\u5b9a\u3002\u6c42\u6240\u6709\u8fb9\u7684\u65f6\u95f4 $t$\uff0c\u53ef\u4ee5\u8003\u8651\u6574\u4f53\u4e8c\u5206\u3002**\u6ce8\u610f $t$ \u548c $T$ \u662f\u4e0d\u4e00\u6837\u7684\uff08$T$ \u662f\u539f\u8fb9\u52a0\u5165\u65f6\u95f4\uff09\u3002**\n\n\u8003\u8651\u4f1a\u9047\u5230\u4ec0\u4e48\u95ee\u9898\u3002\u6574\u4f53\u4e8c\u5206\u7684\u4e00\u4e2a\u5173\u952e\u5904\u7406\u662f\uff1a\u5f53\u4e8c\u5206\u7b54\u6848\u533a\u95f4 $[mid+1,r]$ \u65f6\uff0c$[l,mid]$ \u8d21\u732e\u5fc5\u987b\u8003\u8651\u3002\u5728\u4e3b\u5e2d\u6811\u6a21\u677f\u7b49\u9898\u76ee\u4e2d\u7684\u5904\u7406\u624b\u6bb5\u662f $kth\\gets kth-x$\uff0c\u5176\u4e2d $x$ \u662f $[l,mid]$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u4f46\u5f3a\u8fde\u901a\u5173\u7cfb\u663e\u7136\u4e0d\u5177\u53ef\u51cf\u6027\u3002\u540c\u65f6\uff0c\u4e5f\u4e0d\u80fd\u66b4\u529b\u4fdd\u7559 $T_i\\in [l,mid]$ \u7684\u8fb9\uff0c\u5426\u5219\u590d\u6742\u5ea6\u4e0d\u6b63\u786e\u3002\n\n\u4e00\u4e2a\u5bf9\u4e8e\u4e0a\u8ff0\u590d\u6742\u5ea6\u4e0d\u6b63\u786e\u505a\u6cd5\u7684\u526a\u679d\u7684\u601d\u8def\u662f\u5148\u628a $[l,mid]$ \u5f62\u6210\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u5bf9\u4e8e $t_i\\le mid $ \uff08\u7531\u6574\u4f53\u4e8c\u5206\u7684\u6027\u8d28\uff0c\u5230\u8fd9\u4e00\u6b65\u5df2\u7ecf\u53ef\u4ee5\u5224\u65ad\u6bcf\u4e2a\u8fb9 $t$ \u548c $mid$ \u7684\u5173\u7cfb\uff09\u7684\u8fb9\uff0c\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e86\u5185\u8fb9\uff0c\u5bf9 $[mid+1,r]$ \u6ca1\u6709\u8d21\u732e\uff0c\u53ef\u4ee5\u53bb\u6389\u3002\uff08\u5982\u679c\u59cb\u7ec8\u5148\u505a $[l,mid]$ \u518d\u505a $[mid+1,r]$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u8fd9\u6761\u8fb9\u6c38\u4e45\u65e0\u6548\u4e86\u3002\uff09\u5bf9\u4e8e $t_i>mid$ \u7684\u8fb9\uff0c\u5b83\u4ecd\u7136\u53ef\u80fd\u5bf9\u540e\u9762\u505a\u8d21\u732e\uff0c\u7ee7\u7eed\u4fdd\u7559\u8fd9\u6761\u8fb9\u3002\n\n\u770b\u8d77\u6765\u597d\u50cf\u6709\u4ec0\u4e48\u4e0d\u5bf9\u52b2\u7684\uff1f\n\n$t_i>mid$\uff0c\u610f\u5473\u7740\u8fd9\u6761\u8fb9\u672c\u6765\u5c31\u4f1a\u88ab\u6574\u4f53\u4e8c\u5206\u6254\u5230 $[mid+1,r]$ \u53bb\u3002\u4ece\u6574\u4f53\u4e8c\u5206\u590d\u6742\u5ea6\u6b63\u786e\u6027\u7684\u89d2\u5ea6\uff0c\u53ea\u8981\u6bcf\u6b21\u4e8c\u5206\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u64cd\u4f5c\u88ab\u5206\u5230\u81f3\u591a\u4e00\u4fa7\uff0c\u4e14\u6bcf\u6b21\u64cd\u4f5c\u90fd\u548c\u64cd\u4f5c\u5e8f\u5217\u533a\u95f4\u957f\u5ea6\u6210\u7ebf\u6027\u5173\u7cfb\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\u90a3\u4e48\u5728 $[mid+1,r]$ \u6709\u7528\u7684\u8fb9\u672c\u5c31\u662f\u7b54\u6848\u5728 $[mid+1,r]$ \u7684\u8fb9\uff0c\u5373\u6709\u7528\u7684\u8fb9\u6570\u4e5f\u548c\u64cd\u4f5c\u5e8f\u5217\u6210\u7ebf\u6027\u5173\u7cfb\u3002\n\n\u90a3\u4e48\u6574\u4f53\u4e8c\u5206\u662f\u6b63\u786e\u7684\u3002\u81f3\u4e8e\u7f29\u70b9\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef unsigned int ui;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\nstd::mt19937 rnd(time(0));\ninline int sj(int n)\n{\n\tunsigned int x=rnd();\n\treturn x%n+1;\n}\n#define rand fst\ntemplate<typename typC> void read(register typC &x)\n{\n\tregister int c=getchar(),fh=1;\n\twhile ((c<48)||(c>57))\n\t{\n\t\tif (c=='-') {c=getchar();fh=-1;break;}\n\t\tc=getchar();\n\t}\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\tx*=fh;\n}\ntemplate<typename typC, typename... Args> void read(typC &first, Args& ... args) {\n\tread(first);\n\tread(args...);\n}\ntemplate<typename typC> void read(register typC *a,int num)\n{\n\tfor (register int i=1;i<=num;i++) read(a[i]);\n}\ntemplate<typename typC> void write(register typC x)\n{\n\tif (x<0) putchar('-'),x=-x;\n\tstatic int st[100];\n\tregister int tp=1;\n\tregister typC y;st[1]=x%10;x/=10;\n\twhile (x) y=x/10,st[++tp]=x-y*10,x=y;++tp;\n\twhile (--tp) putchar(st[tp]|48);\n}\ntemplate<typename typC> void write(register typC *a,register int num)\n{\n\tfor (register int i=1;i<=num;i++) write(a[i]),putchar(i==num?10:32);\n}\ntemplate<typename typC> typC ab(register typC x)\n{\n\tif (x<0) return -x;\n\treturn x;\n}\n#define space(x) write(x),putchar(32)\n#define enter(x) write(x),putchar(10)\ntypedef pair<int,int> pa;\nstruct P\n{\n\tint t,u,v;\n\tP(int c=0,int a=0,int b=0):t(c),u(a),v(b){}\n};\nstruct Q\n{\n\tint t,u,v,typ,id;\n\tQ(int c=0,int a=0,int b=0,int d=0,int e=0):t(c),u(a),v(b),typ(d),id(e){}\n\tbool operator<(const Q &o) const {return t<o.t;}\n};\nconst int N=1e5+2,M=2e5+2,K=4e5+2,O=1e7,inf=1e9;\nstruct dsu\n{\n\tint f[N],rk[N],st[N][2];\n\tint tp;\n\tvoid init(int n)\n\t{\n\t\ttp=0;\n\t\tfor (int i=1;i<=n;i++) f[i]=i,rk[i]=1;\n\t}\n\tint getf(int x)\n\t{\n\t\twhile (f[x]!=x) x=f[x];\n\t\treturn x;\n\t}\n\tvoid uni(int x,int y)\n\t{\n\t\tx=getf(x);y=getf(y);\n\t\tif (x==y) return;\n\t\tif (rk[x]>rk[y]) swap(x,y);\n\t\tst[++tp][0]=x,st[tp][1]=rk[y];\n\t\tf[x]=y;if (rk[x]==rk[y]) ++rk[y];\n\t}\n\tint fix()\n\t{\n\t\treturn tp;\n\t}\n\tvoid roll(int ntp)\n\t{\n\t\twhile (tp>ntp) rk[f[st[tp][0]]]=st[tp][1],f[st[tp][0]]=st[tp][0],--tp;\n\t}\n};\nstruct tarjan\n{\n\tvector<int> lj[N];\n\tint dfn[N],low[N],st[N],f[N],a[N];\n\tint n,tp,cnt,fs;\n\tbool ed[N];\n\tvoid init(int nn,int *b)\n\t{\n\t\tn=nn;tp=0;\n\t\tmemcpy(a+1,b+1,n<<2);\n\t\tfor (int i=1;i<=n;i++) ed[a[i]]=0;\n\t\tfor (int i=1;i<=n;i++) lj[a[i]].clear();\n\t}\n\tvoid add(int x,int y)\n\t{\n\t\tlj[x].push_back(y);\n\t}\n\tvoid dfs(int x)\n\t{\n\t\tdfn[x]=low[x]=++cnt;\n\t\ted[st[++tp]=x]=1;\n\t\tfor (auto v:lj[x]) if (!dfn[v]) dfs(v),low[x]=min(low[x],low[v]); else if (ed[v]) low[x]=min(low[x],dfn[v]);\n\t\tif (dfn[x]==low[x])\n\t\t{\n\t\t\t++fs;st[tp+1]=0;\n\t\t\twhile (st[tp+1]!=x)\n\t\t\t{\n\t\t\t\ted[st[tp]]=0;\n\t\t\t\tf[st[tp--]]=fs;\n\t\t\t}\n\t\t}\n\t}\n\tvoid cal()\n\t{\n\t\tfor (int i=1;i<=n;i++) dfn[a[i]]=0;cnt=0;fs=0;\n\t\tfor (int i=1;i<=n;i++) if (!dfn[a[i]]) dfs(a[i]);\n\t}\n};\ndsu d;\ntarjan g;\nmap<pa,int> mp;\nP lb[M];\nQ xw[M],w[M],st1[M],st2[M],o[K];\nint c[O][2],siz[O];\nll ans[M],s[O];\nint a[N],st[N],t[M],fir[N],nu[M],nv[M],f[N],rt[N];\nint T,n,m,q,i,j,k,x,y,z,la,ksiz,ks,qs,tp,tp1,tp2,ds,os;\nbool ed[N];\nvoid ztef(int l,int r,int ql,int qr)\n{\n\tif (l>r||ql>qr) return;\n\tif (l==r)\n\t{\n\t\tfor (int i=ql;i<=qr;i++) t[w[i].id]=l;\n\t\treturn;\n\t}\n\tint mid=l+r>>1,i,fp=d.fix(),u,v,m;tp=tp1=tp2=0;\n\tfor (i=ql;i<=qr;i++) nu[i]=d.getf(w[i].u),nv[i]=d.getf(w[i].v);\n\tfor (i=ql;i<=qr&&w[i].t<=mid;i++) if ((u=nu[i])!=(v=nv[i]))\n\t{\n\t\tif (!ed[u]) st[++tp]=u,ed[u]=1;\n\t\tif (!ed[v]) st[++tp]=v,ed[v]=1;\n\t} else throw;\n\tfor (i=1;i<=tp;i++) ed[st[i]]=0;\n\tfor (i=1;i<=g.fs;i++) fir[i]=0;\n\tg.init(tp,st);\n\tfor (i=ql;i<=qr&&w[i].t<=mid;i++) if (nu[i]!=nv[i]) g.add(nu[i],nv[i]);\n\tg.cal();\n\tfor (i=1;i<=tp;i++) if (!fir[g.f[st[i]]]) fir[g.f[st[i]]]=st[i]; else d.uni(fir[g.f[st[i]]],st[i]);\n\tfor (i=ql;i<=qr;i++) if (d.getf(nu[i])==d.getf(nv[i])) st1[++tp1]=w[i]; else st2[++tp2]=w[i];\n\tm=ql+tp1;\n\tfor (i=1;i<=tp1;i++) w[ql+i-1]=st1[i];\n\tfor (i=1;i<=tp2;i++) w[m+i-1]=st2[i];\n\tztef(mid+1,r,m,qr);d.roll(fp);\n\tztef(l,mid,ql,m-1);\n}\nvoid inc(int &x,int v,int l=0,int r=inf)\n{\n\tif (!x) x=++ds;\n\ts[x]+=v;++siz[x];\n\tif (l==r) return;\n\tint mid=l+r>>1;\n\tif (v<=mid) inc(c[x][0],v,l,mid); else inc(c[x][1],v,mid+1,r);\n}\nvoid dec(int &x,int v,int l=0,int r=inf)\n{\n\tif (!x) x=++ds;\n\ts[x]-=v;--siz[x];\n\tif (!siz[x]) return x=0,void();\n\tif (l==r) return;\n\tint mid=l+r>>1;\n\tif (v<=mid) dec(c[x][0],v,l,mid); else dec(c[x][1],v,mid+1,r);\n}\nvoid merge(int &x,int y)\n{\n\tif (x&&y)\n\t{\n\t\ts[x]+=s[y];siz[x]+=siz[y];\n\t\tmerge(c[x][0],c[y][0]);\n\t\tmerge(c[x][1],c[y][1]);\n\t} else x|=y;\n}\nint getf(int x)\n{\n\tif (f[x]==x) return x;\n\treturn f[x]=getf(f[x]);\n}\nll find(int x,int kth)\n{\n\tll res=0;\n\tint l=0,r=1e9;\n\twhile (kth&&l<r) if (siz[c[x][1]]>kth) x=c[x][1],l=(l+r>>1)+1; else res+=s[c[x][1]],kth-=siz[c[x][1]],x=c[x][0],r=l+r>>1;\n\treturn res+(ll)l*kth;\n}\nint main()\n{\n\tread(n,m,q);\n\tread(a,n);\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tread(lb[i].u,lb[i].v);lb[i].t=q+1;assert(lb[i].u!=lb[i].v);\n\t\tassert(mp.find(pa(lb[i].u,lb[i].v))==mp.end());\n\t\tmp[pa(lb[i].u,lb[i].v)]=i;\n\t}\n\tfor (i=1;i<=q;i++)\n\t{\n\t\tread(xw[i].typ,xw[i].u,xw[i].v);xw[i].t=q-i+1;\n\t\tif (xw[i].typ==1)\n\t\t{\n\t\t\tw[++ks]=xw[i];\n\t\t\tlb[w[ks].id=mp[pa(xw[i].u,xw[i].v)]].t=q-i+1;\n\t\t}\n\t\telse if (xw[i].typ==2) a[xw[i].u]+=xw[i].v;\n\t\telse xw[i].id=++qs;\n\t}\n\tfor (i=1;i<=m;i++) if (lb[i].t==q+1) w[++ks]=Q(0,lb[i].u,lb[i].v,0,i);\n\treverse(w+1,w+m+1);assert(ks==m);d.init(n);\n\tztef(0,q+1,1,m);\n\tfor (i=1;i<=n;i++) inc(rt[i],a[i]);\n\tfor (i=1;i<=n;i++) f[i]=i;\n\tfor (i=q;i;i--) if (xw[i].typ!=1) o[++os]=xw[i];\n\tfor (i=1;i<=m;i++) o[++os]=Q(t[i],lb[i].u,lb[i].v,1,0);\n\tsort(o+1,o+os+1);\n\tfor (i=1;i<=os;i++)\n\t{\n\t\tif (o[i].typ==1)\n\t\t{\n\t\t\tx=getf(o[i].u);y=getf(o[i].v);\n\t\t\tif (x==y) continue;\n\t\t\tmerge(rt[x],rt[y]);f[y]=x;\n\t\t}\n\t\tif (o[i].typ==2)\n\t\t{\n\t\t\tx=getf(o[i].u);\n\t\t\tdec(rt[x],a[o[i].u]);\n\t\t\tinc(rt[x],a[o[i].u]-=o[i].v);\n\t\t}\n\t\tif (o[i].typ==3)\n\t\t{\n\t\t\tx=rt[getf(o[i].u)];\n\t\t\tans[o[i].id]=siz[x]<=o[i].v?s[x]:find(x,o[i].v);\n\t\t}\n\t}\n\tfor (i=1;i<=qs;i++) enter(ans[i]);\n}\n```",
        "postTime": 1622218870,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n[\u6233\u6211](https://www.luogu.com.cn/problem/P5163)\n\n### \u9898\u89e3\n\n\u4e00\u5f00\u59cb\u770b\u9519\u4e86\u4ee5\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u76f4\u63a5\u4e0a\u79bb\u7ebf\u5012\u5e8f\u5e76\u67e5\u96c6\uff0c\u5199\u4e86\u4e00\u4f1a\u513f\u89c9\u5f97\u4e0d\u5bf9\u52b2\uff0c\u53d1\u73b0\u662f\u6709\u5411\u56fe\u3002\n\n\u8003\u8651\u6709\u5411\u56fe\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u5408\u5e76\uff1a\u8fb9\u6709\u65b9\u5411\uff0c\u6240\u4ee5\u4e0d\u80fd\u786e\u5b9a $u,v$ \u5230\u5e95\u4ec0\u4e48\u65f6\u5019\u88ab\u5e76\u8d77\u6765\u3002\n\n\u4e8e\u662f\u6211\u4eec\u60f3\u8981\u5bf9\u6bcf\u4e00\u5bf9 $(u,v)$ \u6c42\u51fa\u4e00\u4e2a\u65f6\u95f4\u70b9 $t$ \uff0c$t$ \u8868\u793a\u5728 $[0,t]$ \u65f6\u95f4\u5185 $(u,v)$ \u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u3002\n\n\u53d1\u73b0\u5982\u679c $t+1$ \u65f6\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\uff0c$t$ \u65f6\u4e5f\u5728\uff0c\u6240\u4ee5\u8003\u8651\u4e8c\u5206 $t$\u3002\u66b4\u529b\u505a\u6cd5\u662f\u6bcf\u6b21\u5efa\u4e00\u5f20\u56fe\u5bf9\u6bcf\u6761\u8fb9\u8dd1\u4e8c\u5206\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\u9996\u5148\u53d1\u73b0\u6709\u5f88\u591a $(u,v)$ \u7684\u5bf9\u5e94\u7b54\u6848\u90fd\u662f $t$ \uff0c\u8fd9\u4e2a\u5f88\u50cf\u6574\u4f53\u4e8c\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u65f6\u95f4\u8f74\u4e0a\u6574\u4f53\u4e8c\u5206\uff0c\u6574\u4f53\u4e8c\u5206\u7684\u540c\u65f6\u8dd1 $\\texttt{tarjan}$ \u7f29\u70b9\u6c42\u7b54\u6848\u3002\n\n\u8bbe\u5f53\u524d\u7b54\u6848\u533a\u95f4\u662f $[l,r],mid=\\frac{l+r}{2}$ \uff0c\u6211\u4eec\u5148\u5c06\u51fa\u73b0\u65f6\u95f4\u5728 $[0,l-1]$ \u4e4b\u95f4\u7684\u6240\u6709\u8fb9\u52a0\u5165\uff0c\u518d\u5c06\u5728\u8fd9\u4e2a\u7b54\u6848\u533a\u95f4\u5185\u7684\u51fa\u73b0\u65f6\u95f4 $\\le mid$ \u7684\u8fb9\u5168\u90e8\u52a0\u5165\uff0c\u7136\u540e\u8dd1 $\\texttt{tarjan}$ \u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u5bf9\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8981\u52a0\u5165\u65f6\u95f4 $\\in [0,mid]$ \u7684\u8fb9\u3002\u4ed4\u7ec6\u5206\u6790\uff0c\u6709\u4e00\u4e9b\u8fb9\u6bcf\u6b21\u90fd\u4f1a\u88ab\u91cd\u65b0\u7f29\u4e00\u904d\uff0c\u6bd4\u5982 $[l,r] \\to [l,mid] \\to [l,\\frac{l+mid}{2}]$ \u8fd9\u6837\uff0c\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u91cc\u7684\u8fb9\u4f1a\u88ab\u91cd\u590d\u7f29\u597d\u51e0\u6b21\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u5728\u5df2\u7ecf\u7f29\u4e86\u4e00\u4e9b\u70b9\u7684\u539f\u56fe\u4e0a\u505a\uff0c\u53ef\u4ee5\u7528\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\u628a\u67d0\u4e9b\u5730\u65b9\u7684\u5f71\u54cd\u64a4\u9500\u6389\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5148\u9012\u5f52\u5de6\u533a\u95f4\uff0c\u64a4\u9500\u5f71\u54cd\uff0c\u518d\u9012\u5f52\u53f3\u533a\u95f4\u3002\n\n\u518d\u8003\u8651\u6743\u503c\u600e\u4e48\u5904\u7406\u3002\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4fdd\u5b58\u5206\u91cf\u5185\u90e8\u7684\u6240\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u52a0\u8fb9\u65f6\u5408\u5e76\u7ebf\u6bb5\u6811\uff0c\u4fee\u6539\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u6392\u540d\u53ef\u4ee5\u8bb0\u4e00\u4e0b\u6709\u591a\u5c11\u70b9\u6bd4\u5b83\u5927\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u7684\u65b9\u6cd5\u67e5\u8be2\u6392\u540d\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u8981\u6ce8\u610f\u7ec6\u8282\u3002\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u8303\u56f4\u662f\u79bb\u6563\u5316\u4e4b\u540e\u7684\u8303\u56f4\uff01\u4e0d\u662f $n$ \uff01\n\n### \u4ee3\u7801\n\n$\\color{#99ccff}{Code}:$\n\n```cpp\n\n#include <stdio.h>\n#include <map>\n#include <algorithm>\n#define it register int\n#define ct const int\n#define il inline\nusing namespace std;\nconst int N = 1000005;\ntypedef long long ll;\nstruct ky {\n    int u, v, r, op;\n    bool operator<(const ky &p) const { return r < p.r; }\n} a[N], q[N], a1[N], a2[N];\nint n, m, Q, p[N], cnt, rot[N];\nll ans[N], w[N], b[N];\nmap<int, int> mp[N];\ntemplate <class I>\nil void sp(I &p, I &q) {\n    I x = p;\n    p = q, q = x;\n}\ntemplate <class I>\nil I Min(I p, I q) {\n    return p < q ? p : q;\n}\nnamespace sgt {\nll sum[N << 4];\nint sz[N << 4], ls[N << 4], rs[N << 4], cnt;\nil void upd(it &rt, ct l, ct r, ct pos, ct x) {\n    if (!rt)\n        rt = ++cnt;\n    if (l == r)\n        return sum[rt] += (~x ? b[pos] : -b[pos]), sz[rt] += x, void();\n    ct mid = l + r >> 1;\n    pos <= mid ? upd(ls[rt], l, mid, pos, x) : upd(rs[rt], mid + 1, r, pos, x);\n    sum[rt] = sum[ls[rt]] + sum[rs[rt]], sz[rt] = sz[ls[rt]] + sz[rs[rt]];\n}\nil void mer(it &u, ct v) {\n    if (!u || !v)\n        return u |= v, void();\n    sum[u] += sum[v], sz[u] += sz[v], mer(ls[u], ls[v]), mer(rs[u], rs[v]);\n}\nil ll que(ct rt, ct l, ct r, ct K) {\n    if (!K || !rt)\n        return 0;\n    if (K >= sz[rt])\n        return sum[rt];\n    if (l == r)\n        return Min(K, sz[rt]) * b[l];\n    ct mid = l + r >> 1;\n    return sz[rs[rt]] > K ? que(rs[rt], mid + 1, r, K) : sum[rs[rt]] + que(ls[rt], l, mid, K - sz[rs[rt]]);\n}\n}  // namespace sgt\nnamespace dsu {\nint f[N], sz[N], sta[N], top;\nil int fd(it x) {\n    while (x ^ f[x]) x = f[x];\n    return x;\n}\nil void mer(it u, it v) {\n    u = fd(u), v = fd(v);\n    if (u != v) {\n        if (sz[u] > sz[v])\n            sp(u, v);\n        sta[++top] = u, f[u] = v, sz[v] += sz[u];\n    }\n}\nil void rec(ct x) {\n    it u;\n    while (top > x) u = sta[top--], sz[f[u]] -= sz[u], f[u] = u;\n}\nil void ini() {\n    for (it i = 1; i <= n; ++i) f[i] = i, sz[i] = 1;\n    top = 0;\n}\nil int fd2(ct x) { return f[x] ^ x ? f[x] = fd2(f[x]) : x; }\n}  // namespace dsu\nusing dsu ::fd;\nusing dsu ::fd2;\nusing dsu ::mer;\nnamespace tarjan {\nint h[N], nxt[N], adj[N], top, s[N], dfn[N], low[N], ti, t;\nbool ins[N];\nil void add(ct u, ct v) { nxt[++t] = h[u], h[u] = t, adj[t] = v; }\nil void dfs(ct x) {\n    dfn[x] = low[x] = ++ti, s[++top] = x, ins[x] = 1;\n    for (it i = h[x], j; i; i = nxt[i])\n        !dfn[j = adj[i]] ? dfs(j),\n            low[x] = Min(low[x], low[j]) : low[x] = Min(low[x], ins[j] ? low[j] : low[x]);\n    if (dfn[x] == low[x]) {\n        it v = s[top];\n        do {\n            v = s[top--], ins[v] = 0, mer(x, v);\n        } while (x ^ v);\n    }\n}\n}  // namespace tarjan\nil void solve(ct l, ct r, ct u, ct v) {\n    if (l > r)\n        return;\n    if (u == v) {\n        for (it i = l; i <= r; ++i) a[i].r = u;\n        return;\n    }\n    ct mid = u + v >> 1, lst = cnt, ttop = dsu::top;\n    for (it i = l, u, v; i <= r; ++i)\n        if (((u = fd(a[i].u)) != (v = fd(a[i].v))) && a[i].r > mid)\n            tarjan::add(u, v), p[++cnt] = u, p[++cnt] = v;\n    for (it i = lst + 1; i <= cnt; ++i)\n        if (!tarjan::dfn[p[i]])\n            tarjan::dfs(p[i]);\n    tarjan::ti = 0;\n    it cn1 = 0, cn2 = 0;\n    for (it i = l, u, v; i <= r; ++i)\n        (((u = fd(a[i].u)) == (v = fd(a[i].v))) && a[i].r > mid) ? a2[++cn2] = a[i] : a1[++cn1] = a[i];\n    for (it i = l, j = 1; j <= cn1; ++j, ++i) a[i] = a1[j];\n    for (it i = l + cn1, j = 1; j <= cn2; ++j, ++i) a[i] = a2[j];\n    for (it i = lst + 1; i <= cnt; ++i)\n        tarjan::h[p[i]] = 0, tarjan::dfn[p[i]] = tarjan::low[p[i]] = 0, p[i] = 0;\n    tarjan::t = tarjan::top = 0;\n    cnt = lst, solve(l, l + cn1 - 1, u, mid), dsu::rec(ttop), solve(l + cn1, r, mid + 1, v);\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &Q); it i;\n    dsu::ini(), b[0] = n;\n    for (i = 1; i <= n; ++i) scanf(\"%lld\", &w[i]), b[i] = w[i];\n    for (i = 1; i <= m; ++i) scanf(\"%d%d\", &a[i].u, &a[i].v), mp[a[i].u][a[i].v] = i, a[i].r = Q;\n    for (i = 1; i <= Q; ++i) {\n        scanf(\"%d%d%d\", &q[i].op, &q[i].u, &q[i].v);\n        if (q[i].op == 1)\n            a[mp[q[i].u][q[i].v]].r = i - 1;\n        if (q[i].op == 2)\n            w[q[i].u] += q[i].v, b[++*b] = w[q[i].u];\n    }\n    std::sort(a + 1, a + 1 + m), std::sort(b + 1, b + 1 + *b), *b = std::unique(b + 1, b + 1 + *b) - b - 1;\n    for (i = 1; i <= n; ++i) w[i] = std::lower_bound(b + 1, b + 1 + *b, w[i]) - b;\n    solve(1, m, 0, Q), std::sort(a + 1, a + 1 + m), dsu::ini();\n    for (i = 1; i <= n; ++i) sgt::upd(rot[i], 1, b[0], w[i], 1);\n    for (it i = Q, now = m + 1, u, v; i; --i) {\n        while (now && a[now - 1].r >= i) {\n            --now, u = fd2(a[now].u), v = fd2(a[now].v);\n            if (u != v)\n                dsu::f[v] = u, sgt::mer(rot[u], rot[v]);\n        }\n        if (q[i].op == 2)\n            u = fd(q[i].u), sgt::upd(rot[u], 1, b[0], w[q[i].u], -1),\n            w[q[i].u] = std::lower_bound(b + 1, b + 1 + *b, b[w[q[i].u]] - q[i].v) - b,\n            sgt::upd(rot[u], 1, b[0], w[q[i].u], 1);\n        if (q[i].op == 3)\n            ans[i] = sgt::que(rot[fd(q[i].u)], 1, b[0], q[i].v);\n    }\n    for (i = 1; i <= Q; ++i)\n        if (q[i].op == 3)\n            printf(\"%lld\\n\", ans[i]);\n    return 0;\n}",
        "postTime": 1603072315,
        "uid": 87724,
        "name": "\u58a8\u821e\u7075\u7eaf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "\u6574\u4f53\u4e8c\u5206\u795e\u9898\uff0c\u641e\u4e86\u534a\u5929\uff0c\u53ea\u80fd\u8bf4\u51fa\u9898\u4eba\u592a\u5f3a\u4e86\u3002\n### \u9898\u610f\n\u7ed9\u5b9a\u4e00\u5f20$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u70b9\u6743\uff0c\u8981\u6c42\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n1. \u5220\u6389\u4e00\u6761\u4e4b\u524d\u5b58\u5728\u7684\u8fb9\u3002\n2. \u66f4\u6539\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n3. \u8be2\u95ee\u67d0\u4e2a\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u90e8\u524d$k$\u5927\u7684\u70b9\u6743\u4e4b\u548c\u3002\u5982\u679c\u4e0d\u8db3$k$\u4e2a\u70b9\uff0c\u5219\u8f93\u51fa\u5168\u90e8\u70b9\u6743\u4e4b\u548c\u3002\n\n### \u9898\u89e3\n\u9996\u5148\uff0c\u5957\u8def\u6027\u5730\u53cd\u8f6c\u65f6\u95f4\u8f74\uff0c\u8f6c\u5316\u4e3a\u52a0\u8fb9\u3002\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\u5f3a\u8fde\u901a\u5206\u91cf\u3002  \n\u5982\u679c\u6211\u4eec\u80fd\u6c42\u51fa\u5728\u4ec0\u4e48\u65f6\u5019\uff0c\u4e00\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5904\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u90a3\u4e48\u5c06\u6240\u6709\u8fb9\u6309\u8fd9\u4e00\u65f6\u95f4\u70b9\u6392\u5e8f\uff0c\u4ece\u5c0f\u5f80\u5927\u904d\u5386\uff0c\u5c06\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5408\u5e76\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e86\u3002\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002  \n\u4e3a\u4e86\u5904\u7406\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u5bf9\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4fdd\u5b58\u5206\u91cf\u5185\u90e8\u7684\u6240\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u52a0\u8fb9\u65f6\uff0c\u6211\u4eec\u5c06\u4e24\u68f5\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u53ef\u4ee5\u5904\u7406\u8be2\u95ee\u4e86\u3002\u800c\u5bf9\u4e8e\u4fee\u6539\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6539\u52a8\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u540c\u6837\u4e0d\u662f\u95ee\u9898\u3002\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u6c42\u51fa\u6bcf\u6761\u8fb9\u4e24\u7aef\u88ab\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u65f6\u95f4\u5462\uff1f  \n\u5148\u8003\u8651\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e8c\u5206\u7b54\u6848\u3002  \n\u8bbe\u5f53\u524d\u7b54\u6848\u4e3a$x$\uff0c\u6211\u4eec\u628a\u51fa\u73b0\u65f6\u95f4$\\le x$\u7684\u8fb9\u5168\u90e8\u52a0\u5165\u4e00\u5f20\u56fe\uff0c\u5bf9\u8fd9\u5f20\u56fe\u8dd1tarjan\uff0c\u5224\u65ad\u4e24\u7aef\u662f\u5426\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u90e8\u5373\u53ef\u3002  \n\u5c1d\u8bd5\u6539\u5199\u6210\u6574\u4f53\u4e8c\u5206\u7684\u5f62\u5f0f\u3002\u8bbe\u5f53\u524d\u7b54\u6848\u7684\u533a\u95f4\u4e3a$[l,r]$\uff0c$mid=\\frac{l+r}{2}$\uff0c\u5728\u8fd9\u4e2a\u7b54\u6848\u533a\u95f4\u5185\u7684\u8fb9\u4e3a$[a,b]$\uff0c\u6211\u4eec\u5c06\u51fa\u73b0\u65f6\u95f4\u5728$[0,l-1]$\u4e4b\u95f4\u7684\u6240\u6709\u8fb9\u52a0\u5165\uff0c\u7136\u540e\u904d\u5386$[a,b]$\u95f4\u7684\u6240\u6709\u8fb9\uff0c\u5c06$[a,b]$\u4e2d\u51fa\u73b0\u65f6\u95f4$\\le mid$\u7684\u8fb9\u5168\u90e8\u52a0\u5165\uff0c\u5728\u8fd9\u5f20\u56fe\u4e0a\u5c31\u6709\u4e86\u6240\u6709\u51fa\u73b0\u65f6\u95f4$\\le mid$\u7684\u8fb9\u3002\u8dd1\u4e00\u904dtarjan\u5373\u53ef\u3002  \n\u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u652f\u6301\u6bcf\u6b21\u90fd\u52a0\u5165\u51fa\u73b0\u65f6\u95f4\u5728$[0,mid]$\u4e4b\u95f4\u7684\u8fb9\uff0c\u8003\u8651\u5229\u7528\u4e0a\u4e00\u5c42\u9012\u5f52\u7684\u7ed3\u679c\u3002\u6211\u4eec\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u5f53\u524d\u533a\u95f4tarjan\u7f29\u70b9\u7684\u7ed3\u679c\uff0c**\u6bcf\u6b21\u5728\u4e0a\u4e00\u5c42\u5df2\u7ecf\u7f29\u4e86\u4e00\u90e8\u5206\u70b9\u7684\u201c\u865a\u56fe\u201d\u4e0a\u52a0\u8fb9**\uff0c\u5728tarjan\u7684\u8fc7\u7a0b\u4e2d\u5c06\u540c\u4e00\u5206\u91cf\u5185\u90e8\u7684\u70b9\u5728\u5e76\u67e5\u96c6\u4e0a\u5408\u5e76\u3002\u6bcf\u6b21\u5904\u7406\u5b8c\u533a\u95f4$[l,r]$\u4e4b\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u9012\u5f52\u6c42\u89e3$[mid+1,r]$\uff0c\u7b49\u5230\u5904\u7406\u5b8c\u53f3\u534a\u8fb9\u4e4b\u540e\u518d\u64a4\u9500\u5f53\u524d\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u9012\u5f52\u5904\u7406\u5de6\u534a\u8fb9\u7684$[l,mid]$\u3002\u7531\u4e8etarjan\u7684\u590d\u6742\u5ea6\u662f$O(m)$\u7684\uff0c\u6bcf\u6761\u8fb9\u6700\u591a\u53ea\u4f1a\u88ab\u5904\u7406$\\log n$\u6b21\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5c06\u65f6\u95f4\u8f74\u53d6\u53cd\uff0c\u8fd0\u7528\u6574\u4f53\u4e8c\u5206\u6c42\u51fa\u6bcf\u6761\u8fb9\u4e24\u7aef\u88ab\u5408\u5e76\u5230\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u65f6\u95f4\u3002\u5bf9\u6bcf\u6761\u8fb9\u6c42\u51fa\u8fd9\u4e2a\u503c\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u5408\u5e76\u4e00\u6761\u8fb9\u4e24\u7aef\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u548c\u76f8\u5e94\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5728\u8fc7\u7a0b\u4e2d\u987a\u4fbf\u5904\u7406\u8be2\u95ee\u548c\u4fee\u6539\uff0c\u6211\u4eec\u5c31\u505a\u5b8c\u4e86\u8fd9\u9053\u795e\u4ed9\u9898\u3002  \n\u4e3b\u8981\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u6574\u4f53\u4e8c\u5206\u4e0a\uff0c\u662f$O(m\\log^2n)$\u7684\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u6392\u5e8f\u90fd\u662f$O(m\\log n)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define reg register\ntypedef long long ll;\nusing namespace std;\ntypedef pair<int,int>pii;\nconst int MN=1e5+5;\nconst int MM=2e5+5;\n//\u8fb9\u8868 \nint to[MM],nxt[MM],h[MN],cnt;\ninline void ins(int s,int t){to[++cnt]=t;nxt[cnt]=h[s];h[s]=cnt;}\n//\u4e00\u4e9b\u53d8\u91cf\u7684\u58f0\u660e \nint n,m,q,a[MN];\nmap<pii,int>mp;\nint opt[MM],A[MM],B[MM];\nll Ans[MM];\nint N,M,b[MN*3],aa[MN];\nstruct data{int opt,s,t,tim;}d[MM*2];\ninline int getid(int x){return lower_bound(b+1,b+1+N,x)-b;}\n//\u6743\u503c\u7ebf\u6bb5\u6811 \nint tot,rt[MN],ls[MN*60],rs[MN*60],siz[MN*60];\nll sum[MN*60];\n#define mid (l+r>>1)\nvoid update(int& t,int l,int r,int pos,int v){\n\tif(!t)t=++tot;siz[t]+=v;sum[t]+=v*b[pos];\n\tif(l==r)return;\n\tif(pos<=mid)update(ls[t],l,mid,pos,v);\n\telse update(rs[t],mid+1,r,pos,v);\n}\nint merge(int rt1,int rt2,int l,int r){\n\tif(!rt1||!rt2)return rt1+rt2;\n\tif(l==r){siz[rt1]+=siz[rt2];sum[rt1]+=sum[rt2];return rt1;}\n\tls[rt1]=merge(ls[rt1],ls[rt2],l,mid);\n\trs[rt1]=merge(rs[rt1],rs[rt2],mid+1,r);\n\tsiz[rt1]=siz[ls[rt1]]+siz[rs[rt1]];\n\tsum[rt1]=sum[ls[rt1]]+sum[rs[rt1]];\n\treturn rt1;\n}\nll query(int t,int l,int r,int k){\n\tif(l==r)return 1ll*k*b[l];\n\tif(k<=siz[rs[t]])return query(rs[t],mid+1,r,k);\n\treturn sum[rs[t]]+query(ls[t],l,mid,k-siz[rs[t]]);\n}\n//\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\uff0c\u7528\u4e8etarjan\u548c\u7ebf\u6bb5\u6811\u5408\u5e76 \nint par[MN],rnk[MN];\nint find(int x){return par[x]==x?x:find(par[x]);}\nint stkx[MM],stky[MM],top;\ninline void merge(int x,int y){\n\tx=find(x);y=find(y);\n\tif(x==y)return;\n\tif(rnk[x]<rnk[y])swap(x,y);\n\tpar[y]=x;stky[++top]=y;\n\tif(rnk[x]==rnk[y])rnk[x]++,stkx[top]=x;\n}\ninline void Merge(int x,int y){\n\tx=find(x);y=find(y);\n\tif(x==y)return;\n\tif(rnk[x]<rnk[y])swap(x,y);\n\tpar[y]=x;\n\tif(rnk[x]==rnk[y])rnk[x]++;\n\trt[x]=merge(rt[x],rt[y],1,N);\n}\n//tarjan\nint dfn[MN],low[MN],stk[MN],Top,idx;\nbool vis[MN];\nvoid tarjan(int st){\n\tdfn[st]=low[st]=++idx;\n\tvis[stk[++Top]=st]=true;\n\tfor(reg int i=h[st];i;i=nxt[i]){\n\t\tif(!dfn[to[i]])tarjan(to[i]),low[st]=min(low[st],low[to[i]]);\n\t\telse if(vis[to[i]])low[st]=min(low[st],dfn[to[i]]);\n\t}\n\tif(dfn[st]==low[st]){\n\t\treg int loc=stk[Top--];\n\t\tvis[loc]=false;\n\t\twhile(stk[Top+1]!=st){\n\t\t\tvis[stk[Top]]=false;\n\t\t\tmerge(loc,stk[Top--]);\n\t\t}\n\t}\n}\n//\u6574\u4f53\u4e8c\u5206 \nint node[MM*2];\nstruct edge{int s,t,tim;}es[MM],t1[MM],t2[MM];\nvoid solve(int l,int r,int a,int b){\n\tif(a>b)return;\n\tif(l==r){\n\t\tfor(reg int i=a;i<=b;i++)es[i].tim=l;\n\t\treturn;\n\t}\n\treg int ncnt=0,ttop=top;\n\tfor(reg int i=a,s,t;i<=b;i++)\n\t\tif(es[i].tim<=mid){\n\t\t\ts=find(es[i].s);t=find(es[i].t);\n\t\t\tnode[++ncnt]=s;node[++ncnt]=t;\n\t\t\tins(s,t);\n\t\t}\n\tfor(reg int i=1;i<=ncnt;i++)\n\t\tif(!dfn[node[i]])tarjan(node[i]);\n\treg int cnt1=0,cnt2=0;\n\tfor(reg int i=a;i<=b;i++){\n\t\t//\u6ce8\u610f\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5e94\u8be5\u8981\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff0c\u5373\u8fd9\u6761\u8fb9\u5df2\u7ecf\u51fa\u73b0\uff0c\u4e14\u4e24\u7aef\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d \n\t\tif(find(es[i].s)==find(es[i].t)&&es[i].tim<=mid)t1[++cnt1]=es[i];\n\t\telse t2[++cnt2]=es[i];\n\t}\n\tfor(reg int i=1;i<=cnt1;i++)es[a+i-1]=t1[i];\n\tfor(reg int i=1;i<=cnt2;i++)es[a+cnt1+i-1]=t2[i];\n\tcnt=idx=0;\n\tfor(reg int i=1;i<=ncnt;i++)\n\t\th[node[i]]=dfn[node[i]]=low[node[i]]=0;\n\tsolve(mid+1,r,a+cnt1,b);\n\twhile(top!=ttop){\n\t\tpar[stky[top]]=stky[top];\n\t\tif(stkx[top])rnk[stkx[top]]--;\n\t\ttop--;\n\t}\n\tsolve(l,mid,a,a+cnt1-1);\n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(reg int i=1;i<=n;i++)scanf(\"%d\",a+i),b[++N]=aa[i]=a[i];\n\tfor(reg int i=1;i<=n;i++)par[i]=i,rnk[i]=1;\n\tfor(reg int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tes[i]=(edge){x,y,0};\n\t\tmp[make_pair(x,y)]=i;\n\t}\n\tfor(reg int i=1,id;i<=q;i++){\n\t\tscanf(\"%d%d%d\",opt+i,A+i,B+i);\n\t\tif(opt[i]==1)es[mp[make_pair(A[i],B[i])]].tim=q-i+1;\n\t\tif(opt[i]==2)b[++N]=aa[A[i]]+B[i],aa[A[i]]+=B[i];\n\t}\n\tsolve(0,q+1,1,m);\n\tfor(reg int i=1;i<=m;i++)\n\t\td[++M]=(data){1,es[i].s,es[i].t,es[i].tim};\n\tfor(reg int i=1;i<=q;i++)\n\t\tif(opt[i]>1)d[++M]=(data){opt[i],A[i],B[i],q-i+1};\n\tsort(d+1,d+1+M,[](data a,data b){\n\t\treturn a.tim==b.tim?a.opt<b.opt:a.tim<b.tim;\n\t});\n\tsort(b+1,b+1+N);N=unique(b+1,b+1+N)-b-1;\n\tfor(reg int i=1;i<=n;i++)\n\t\tupdate(rt[i],1,N,getid(aa[i]),1),par[i]=i;\n\tfor(reg int i=1;i<=n;i++)par[i]=i,rnk[i]=1;\n\tmemset(Ans,-1,sizeof(Ans));\n\tfor(reg int i=1,x,y;i<=M;i++){\n\t\tif(d[i].opt==1){\n\t\t\tMerge(d[i].s,d[i].t);\n\t\t}\n\t\tif(d[i].opt==2){\n\t\t\ty=find(x=d[i].s);\n\t\t\tupdate(rt[y],1,N,getid(aa[x]),-1);\n\t\t\taa[x]-=d[i].t;\n\t\t\tupdate(rt[y],1,N,getid(aa[x]),1);\n\t\t}\n\t\tif(d[i].opt==3){\n\t\t\tx=find(d[i].s);\n\t\t\tAns[q-d[i].tim+1]=query(rt[x],1,N,min(d[i].t,siz[rt[x]]));\n\t\t}\n\t}\n\tfor(reg int i=1;i<=q;i++)\n\t\tif(~Ans[i])printf(\"%lld\\n\",Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1584882847,
        "uid": 17930,
        "name": "Marser",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e00\u5b9a\u662f\u8981\u628a\u5220\u8fb9\u6539\u4e3a\u52a0\u8fb9\u7684\n\n\u5982\u679c\u662f\u65e0\u5411\u56fe\u5c31\u5f88\u597d\u505a\u4e86\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u901a\u56fe\uff0c\u6bcf\u4e2a\u8fde\u901a\u56fe\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u52a0\u8fb9\u7684\u65f6\u5019\uff0c\u5982\u679c\u5df2\u7ecf\u8fde\u901a\u4e86\u5c31\u4e0d\u7ba1\uff0c\u5426\u5219\u5c06\u4e24\u4e2a\u8fde\u901a\u56fe\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u4e0b\uff0c\u4fee\u6539\u70b9\u6743\u5c31\u76f4\u63a5\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u6539\u3002\n\n\u53d8\u4e3a\u6709\u5411\u56fe\u4e4b\u540e\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u6ca1\u90a3\u4e48\u597d\u7ef4\u62a4\u4e86\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u8003\u8651\uff0c\u5c06\u51fa\u73b0\u65f6\u95f4\u5c0f\u4e8e\u8be5\u8fb9\u7684\u8fb9\u5168\u90e8\u52a0\u5165\u540e\uff0c\u8dd1\u4e00\u904d `tarjan` \u5373\u53ef\u5224\u5b9a\u8be5\u8fb9\u4e24\u7aef\u70b9\u662f\u5426\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u5185\n\n\u6211\u4eec\u89e3\u51b3\u4e86\u5224\u5b9a\u65b9\u6cd5\uff0c\u5219\u5bb9\u6613\u60f3\u5230\u6574\u4f53\u4e8c\u5206\u3002\u5bf9\u4e8e\u4e8c\u5206\u533a\u95f4 $[l,r]$\uff0c\u6211\u4eec\u5c06\u5f53\u524d\u8303\u56f4\u7684\u3001\u51fa\u73b0\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u8fb9\u52a0\u5165\uff0c\u7136\u540e\u8dd1 `tarjan`\n\n\u53d1\u73b0\u590d\u6742\u5ea6\u662f\u9519\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5229\u7528\u4e00\u4e0b\u4e0a\u4e00\u5c42\u7f29\u70b9\u540e\u7684\u7ed3\u679c\uff1a\u5f53\u9012\u5f52\u5230 $[l,r]$ \u65f6\uff0c\u6211\u4eec\u5c06 $[0,mid]$ \u7684\u8fb9\u90fd\u52a0\u5165\u4e86\uff0c\u800c\u8fd9\u4e9b\u8fb9\u5728\u6211\u4eec\u5904\u7406 $[mid+1,r]$ \u65f6\u4e5f\u662f\u9700\u8981\u52a0\u5165\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5904\u7406 $[mid+1,r]$\uff0c\u7136\u540e\u5c06\u672c\u5c42\u7f29\u7684\u70b9\u64a4\u9500\uff0c\u5373\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u518d\u5904\u7406 $[l,mid]$\n\n`tarjan` \u7684\u590d\u6742\u5ea6\u4e3a $O(n+m)$\uff0c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u4e3a $O(\\log n)$\uff0c\u518d\u52a0\u4e0a\u6574\u4f53\u4e8c\u5206\u7684 $\\log$\uff0c\u5219\u6574\u4f53\u4e8c\u5206\u7684\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u662f\u4f18\u79c0\u7684 $O(n\\log n)$\uff0c\u5219\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n)$\uff08\u5c06 $n,m,q$ \u89c6\u4e3a\u540c\u9636\u4e0d\u533a\u5206\u4e86\uff09\n\n```cpp\n//timeuse:110min\nconst int N = 400010;\nint n,m,q;\nint a[N],b[N << 1],cntb;\nint get(int x) { return lower_bound(b + 1,b + 1 + cntb,x) - b; }\nstruct edge { int u,v,tim; }e[N];\nmap<pair<int,int>,int> mp;\nstruct modify { int op,a,b; }c[N];\nstruct data { int op,a,b,tim; }d[N];\nint tot;ll ans[N];\n\nstruct Seg_Tree\n{\n\tint rt[N],cnt = 0;\n\tstruct tree { int ls,rs,siz;ll sum; }t[N * 60];\n\tvoid update(int &now,int l,int r,int pos,int v)\n\t{\n\t\tif(!now) now = ++cnt;\n\t\tt[now].siz += v,t[now].sum += (ll)v * b[pos];\n\t\tif(l == r) return;int mid = l + r >> 1;\n\t\tif(pos <= mid) update(t[now].ls,l,mid,pos,v);\n\t\telse update(t[now].rs,mid + 1,r,pos,v);\n\t}\n\tint merge(int rt1,int rt2,int l,int r)\n\t{\n\t\tif(!rt1 || !rt2) return rt1 + rt2;\n\t\tif(l == r) { t[rt1].siz += t[rt2].siz,t[rt1].sum += t[rt2].sum;return rt1; }\n\t\tint mid = l + r >> 1;\n\t\tt[rt1].ls = merge(t[rt1].ls,t[rt2].ls,l,mid);\n\t\tt[rt1].rs = merge(t[rt1].rs,t[rt2].rs,mid + 1,r);\n\t\tt[rt1].siz = t[t[rt1].ls].siz + t[t[rt1].rs].siz;\n\t\tt[rt1].sum = t[t[rt1].ls].sum + t[t[rt1].rs].sum;\n\t\treturn rt1;\n\t}\n\tvoid merge(int x,int y) { rt[x] = merge(rt[x],rt[y],1,cntb); }\n\tll query(int now,int l,int r,int k)\n\t{\n\t\tif(t[now].siz < k) return t[now].sum;\n\t\tif(l == r) return (ll)k * b[l];\n\t\tint mid = l + r >> 1;\n\t\tif(k <= t[t[now].rs].siz) return query(t[now].rs,mid + 1,r,k);\n\t\treturn t[t[now].rs].sum + query(t[now].ls,l,mid,k - t[t[now].rs].siz);\n\t}\n}seg;\n\nstruct DSU\n{\n\tint fa[N],rnk[N],st1[N],st2[N],top;\n\tvoid init() { for(int i = 1;i <= n;i++) fa[i] = i,rnk[i] = 1; }\n\tint getf(int u) { return fa[u] == u ? u : getf(fa[u]); }\n\tvoid merge1(int x,int y)\n\t{\n\t\tx = getf(x),y = getf(y);\n\t\tif(x == y) return;\n\t\tif(rnk[x] < rnk[y]) swap(x,y);\n\t\tfa[y] = x,st1[++top] = y;\n\t\tif(rnk[x] == rnk[y]) rnk[x]++,st2[top] = x;\n\t\telse st2[top] = 0;\n\t}\n\tvoid clear(int d)\n\t{\n\t\twhile(top > d)\n\t\t{\n\t\t\tfa[st1[top]] = st1[top];\n\t\t\tif(st2[top]) rnk[st2[top]]--;\n\t\t\ttop--;\n\t\t}\n\t}\n\tvoid merge2(int x,int y)\n\t{\n\t\tx = getf(x),y = getf(y);\n\t\tif(x == y) return;\n\t\tif(rnk[x] < rnk[y]) swap(x,y);\n\t\tfa[y] = x;\n\t\tif(rnk[x] == rnk[y]) rnk[x]++;\n\t\tseg.merge(x,y);\n\t}\n}dsu;\n\nstruct Tarjan\n{\n\tstruct edge { int nxt,to; }e[N]; int head[N],ecnt = 0;\n\tvoid add(int u,int v) { e[++ecnt].to = v,e[ecnt].nxt = head[u];head[u] = ecnt; }\n\n\tint dfn[N],low[N],idx,st[N],top;\n\tbool vis[N];\n\tvoid tarjan(int u)\n\t{\n\t\tdfn[u] = low[u] = ++idx;\n\t\tvis[st[++top] = u] = 1;\n\t\tfor(int i = head[u];i;i = e[i].nxt)\n\t\t{\n\t\t\tint v = e[i].to;\n\t\t\tif(!dfn[v]) tarjan(v),low[u] = min(low[u],low[v]);\n\t\t\telse if(vis[v]) low[u] = min(low[u],dfn[v]);\n\t\t}\n\t\tif(dfn[u] == low[u])\n\t\t{\n\t\t\tint now = st[top--];\n\t\t\tvis[now] = 0;\n\t\t\twhile(st[top + 1] != u)\n\t\t\t{\n\t\t\t\tvis[st[top]] = 0;\n\t\t\t\tdsu.merge1(now,st[top--]);\n\t\t\t}\n\t\t}\n\t}\n\tvoid solve(vector<int> x) { for(int i:x) if(!dfn[i]) tarjan(i); }\n\tvoid clear(vector<int> x) { for(int i:x) head[i] = low[i] = dfn[i] = 0;ecnt = idx = 0; }\n}tar;\n\nstruct Binary\n{\n\tvector<int> node;edge t1[N],t2[N];\n\tvoid solve(int l,int r,int a,int b)\n\t{\n\t\tif(a > b) return;\n\t\tif(l == r) { for(int i = a;i <= b;i++) e[i].tim = l;return; }\n\t\tint mid = l + r >> 1;\n\t\tnode.clear();int now = dsu.top;\n\t\tfor(int i = a;i <= b;i++) if(e[i].tim <= mid)\n\t\t{\n\t\t\tint u = dsu.getf(e[i].u),v = dsu.getf(e[i].v);\n\t\t\tnode.push_back(u),node.push_back(v);\n\t\t\ttar.add(u,v);\n\t\t}\n\t\ttar.solve(node);\n\t\tint cnt1(0),cnt2(0);\n\t\tfor(int i = a;i <= b;i++)\n\t\t\tif(dsu.getf(e[i].u) == dsu.getf(e[i].v) && e[i].tim <= mid) t1[++cnt1]= e[i];\n\t\t\telse t2[++cnt2] = e[i];\n\t\tfor(int i = 1;i <= cnt1;i++) e[a + i - 1] = t1[i];\n\t\tfor(int i = 1;i <= cnt2;i++) e[a + cnt1 + i - 1] = t2[i];\n\t\ttar.clear(node);\n\t\tsolve(mid + 1,r,a + cnt1,b);\n\t\tdsu.clear(now);\n\t\tsolve(l,mid,a,a + cnt1 - 1);\n\t}\n}bin;\n\nint main()\n{\n\tn = read(),m = read(),q = read();\n\tfor(int i = 1;i <= n;i++) a[i] = b[++cntb] = read();\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\te[i].u = read(),e[i].v = read(),e[i].tim = 0;\n\t\tmp[{e[i].u,e[i].v}] = i;\n\t}\n\tfor(int i = 1;i <= q;i++)\n\t{\n\t\tc[i].op = read(),c[i].a = read(),c[i].b = read();\n\t\tif(c[i].op == 1) e[mp[{c[i].a,c[i].b}]].tim = q - i + 1;\n\t\tif(c[i].op == 2) b[++cntb] = (a[c[i].a] += c[i].b);\n\t}\n\tsort(b + 1,b + 1 + cntb);cntb = unique(b + 1,b + 1 + cntb) - b - 1;\n\t\n\tdsu.init(),bin.solve(0,q + 1,1,m);\n\tfor(int i = 1;i <= m;i++) d[++tot] = {1,e[i].u,e[i].v,e[i].tim};\n\tfor(int i = 1;i <= q;i++)\n\t\tif(c[i].op ^ 1) d[++tot] = {c[i].op,c[i].a,c[i].b,q - i + 1};\n\tsort(d + 1,d + 1 + tot,[&](data u,data v)\n\t{ return u.tim == v.tim ? u.op < v.op : u.tim < v.tim; });\n\t\n\tfor(int i = 1;i <= n;i++) seg.update(seg.rt[i],1,cntb,get(a[i]),1);\n\tdsu.init();\n\tfor(int i = 1;i <= tot;i++)\n\t{\n\t\tif(d[i].op == 1) dsu.merge2(d[i].a,d[i].b);\n\t\tif(d[i].op == 2)\n\t\t{\n\t\t\tint u = d[i].a,fau = dsu.getf(u);\n\t\t\tseg.update(seg.rt[fau],1,cntb,get(a[u]),-1);\n\t\t\ta[u] -= d[i].b;\n\t\t\tseg.update(seg.rt[fau],1,cntb,get(a[u]),1);\n\t\t}\n\t\tif(d[i].op == 3)\n\t\t{\n\t\t\tint u = d[i].a,fau = dsu.getf(u);\n\t\t\tans[q - d[i].tim + 1] = seg.query(seg.rt[fau],1,cntb,d[i].b);\n\t\t}\n\t}for(int i = 1;i <= q;i++) if(c[i].op == 3) fprint(ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1593050281,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5163 \u3010WD\u4e0e\u5730\u56fe\u3011"
    },
    {
        "content": "- \u672c\u9898\u4e3a\u5f00\u6446\u8ba1\u5212 T8\u3002\n- \u672c\u9898\u6709\u4e00\u4e2a**\u7406\u8bba\u590d\u6742\u5ea6\u4f18\u4e8e\u76ee\u524d\u6b63\u89e3** $O(n\\log)$ \u7684\u505a\u6cd5\uff0c**\u4e0d\u9700\u8981\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\uff0c\u7531\u4e8e\u672c\u9898\u5f3a\u5236\u65f6\u5149\u5012\u6d41\uff0c\u5f3a\u884c\u5957\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u505a\u6cd5\u4e0d\u591f\u63a5\u8fd1\u672c\u8d28\uff0c\u91cd\u5199\u4e00\u904d\u65e7\u7684\u4ee3\u7801\uff0c\u4ecd\u7136\u663e\u5f97\u5197\u957f\u65e0\u8da3\uff0c\u4f5c\u8005\uff0c\u4ee5\u53ca\u8be5\u505a\u6cd5\u7684\u53d1\u73b0\u8005\uff0c\u5747\u4e0d\u613f\u610f\u7ed9\u51fa\u539f\u9898\u505a\u6cd5\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u6545\u53ea\u7ed9\u51fa\u65b9\u6cd5\u6307\u5bfc[\u5728\u6b64](https://www.luogu.com.cn/blog/luo1gu1zui1bang1/lgjoi-lian-tong)\uff0c\u8bf7\u89c1\u8c05\u3002\n- \u4e0b\u9762\u662f\u4f5c\u8005\u4ee5\u524d\u5199\u7684 $O(n\\log^2)$ \u505a\u6cd5\u3002\n\n**[\u9898\u610f](https://www.luogu.com.cn/problem/P5163)**\n- \u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u652f\u6301\u5220\u8fb9\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u6c42\u5355\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u524d $k$ \u5927\u8282\u70b9\u7684\u6743\u503c\u548c\u3002\n\n**\u5206\u6790**\n- \u65f6\u5149\u5012\u6d41\u6539\u6210\u52a0\u8fb9\uff0c\u4f46\u662f\u52a0\u8fb9\u7ef4\u62a4\u5f3a\u8fde\u901a\u5206\u91cf\u662f\u4ec0\u4e48\u3002\n- \u5c1d\u8bd5\u7528\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u63cf\u8ff0\uff1a\u53ea\u8981\u6211\u4eec\u77e5\u9053\u52a0\u5165\u7684\u4e00\u6761\u8fb9\u5728\u4ec0\u4e48\u65f6\u5019\u88ab\u7f29\u8fdb\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u9ad8\u6548\u5730\u652f\u6301\u5408\u5e76\u64cd\u4f5c\u4e0e\u4fee\u6539\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u73a9\u610f\u600e\u4e48\u6c42\u5462\uff1f\n- \u5355\u4e2a\u4e8c\u5206\u5f88\u597d\u6c42\uff0c\u591a\u4e2a\u5c1d\u8bd5\u6574\u4f53\u4e8c\u5206\uff1f\n- \u5bf9\u4e8e\u591a\u4e2a\u5206\u6bb5\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5206\u6bb5\u52a0\u8fb9\uff0c\u524d\u4e00\u6bb5\u52a0\u7684\u8fb9\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5316\u4e3a\u8fde\u901a\u6027\uff0c\u4e3a\u6211\u4eec\u6574\u4f53\u4e8c\u5206\u63d0\u4f9b\u4e86\u6761\u4ef6\u3002\n- \u53ef\u4ee5\u8fd9\u6837\uff0c\u5bf9\u4e8e\u786e\u8ba4\u7b54\u6848\u5728\u533a\u95f4 $[l,r]$ \u5185\u7684\u8282\u70b9\uff0c\u5c06\u51fa\u73b0\u65f6\u95f4\u4e0d\u8d85\u8fc7\u533a\u95f4\u4e2d\u70b9\u7684\u8fb9\u52a0\u5165\uff0c\u7528 $\\text{Tarjan}$ \u7f29\u70b9\uff08\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\u53ea\u904d\u5386\u6709\u8fb9\u7684\u70b9\uff09\u7136\u540e\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5408\u5e76\u8fde\u901a\u5757\uff0c\u7136\u540e\u5148\u6c42\u89e3\u53f3\u513f\u5b50\uff0c\u64a4\u9500\u8fde\u901a\u5757\u4e4b\u540e\u6c42\u89e3\u5de6\u513f\u5b50\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n**\u4ee3\u7801\u5b9e\u73b0**\n- \u5b9e\u73b0\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6ce8\u610f\u4e8b\u9879\uff1a\n- \u8bb0\u5f97\u521d\u59cb\u5316 size\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/yw244g60)\u3002\n- \u5b9e\u73b0 Tarjan \u6ce8\u610f\u4e8b\u9879\uff1a\n- \u4fdd\u8bc1\u590d\u6742\u5ea6\u9700\u8981\u4e0d\u8bbf\u95ee\u5b64\u7acb\u70b9\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/lvh9mfgs)\u3002\n- \u5b9e\u73b0\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u6ce8\u610f\u4e8b\u9879\uff1a\n- \u67e5\u8be2\u7684\u65f6\u5019\u4e00\u4e2a\u70b9\u6709\u76f8\u540c\u503c\u8981\u7279\u5224\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/752epury)\u3002\n- [\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/26wcrfow)\u3002",
        "postTime": 1662707549,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "\u3010\u5f00\u6446\u8ba1\u5212 #1\u3011WD\u4e0e\u5730\u56fe"
    }
]