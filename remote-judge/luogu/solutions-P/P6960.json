[
    {
        "content": "[$\\huge\\texttt{P6960}$](https://www.luogu.com.cn/problem/P6960)\n\n[$\\texttt{In my cnblogs}$](https://www.cnblogs.com/RedreamMer/p/14550108.html)\n\n\u6807\u7b7e\uff1a\u4e8c\u5206\u3001\u5206\u5757\u601d\u60f3\uff0c~~\u5e73\u8861\u6811~~\n\n## \u9898\u610f\n\n\u4ea4\u4e92\u9898\u3002\n\n\u6709 $[1,n]$ $n$ \u4e2a\u6570\u5b57\uff0c\u6309\u5947\u5076\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u663e\u7136\u5076\u6570\u6709 $\\lfloor \\frac{n}{2} \\rfloor$ \u4e2a\uff0c\u5947\u6570\u6709 $\\lceil \\frac{n}{2}\\rceil$ \u4e2a\uff0c\u4e24\u90e8\u5206\u6253\u4e71\u3002\n\n\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u5076\u6570\u90e8\u5206\u7b2c $i$ \u4e2a\u6570\u548c\u5947\u6570\u90e8\u5206 $j$ \u4e2a\u6570\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u95ee\u5728 $300000$ \u6b21\u5185\u6c42\u51fa\u6240\u6709\u4f4d\u7f6e\u7684\u6570\u3002\n\n$n \\le 10000$\n\n## \u601d\u8def\n\n\u770b\u5230\u8be2\u95ee\u6b21\u6570\u5927\u6982\u662f $n$ \u8303\u56f4\u7684 $10$ \u591a\u500d\uff0c~~\u4ee5\u53ca\u4ea4\u4e92\u9898\u7684\u7279\u6027~~\uff0c\u8054\u60f3\u5230\u4e8c\u5206\u3002\n\n\u800c\u6211\u4eec\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7f8e\u597d\u7684\u6027\u8d28\uff0c\u5c06\u67d0\u4e2a\u5076\u6570\u4e0e\u6240\u6709\u5947\u6570\u505a\u4e00\u6b21\u8be2\u95ee\u64cd\u4f5c\u4e0d\u4f46\u80fd\u786e\u5b9a\u8fd9\u4e2a\u5076\u6570\u7684\u5927\u5c0f\uff0c\u8fd8\u80fd\u5c06\u6240\u6709\u7684\u5947\u6570\u6309\u8fd9\u4e2a\u5927\u5c0f\u5212\u5206\u6210\u4e24\u90e8\u5206\u3002\n\n\u66b4\u529b\u4e00\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u505a $\\mathcal O((\\frac{n}{2})^2)$ \u6b21\u8be2\u95ee\uff0c\u5076\u6570\u548c\u5947\u6570\u90fd\u53ef\u4ee5\u786e\u5b9a\u4e0b\u6765\u3002\n\n\u8fd9\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u6b64\u9898\uff0c~~\u8fd9\u65f6\u4f60\u4f1a\u53d1\u73b0\u4e8c\u5206\u8fd8\u6ca1\u7528~~\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6700\u5927\u7f3a\u9677\u662f\u5bf9\u4e8e\u6240\u6709\u7684\u5076\u6570\u7684\u8be2\u95ee\u90fd\u6ca1\u6709**\u8f83\u597d\u5730**\u8054\u7cfb\u8d77\u6765\uff08\u8be2\u95ee\u5f97\u5230\u7684\u4fe1\u606f\u53ea\u4f7f\u786e\u5b9a\u5947\u6570\u66f4\u65b9\u4fbf\uff0c\u5e76\u6ca1\u6709\u4e3a\u4e4b\u540e\u7684\u5076\u6570\u7684\u8be2\u95ee\u63d0\u4f9b\u4fbf\u6377\uff09\uff0c\u8003\u8651\u600e\u6837\u4f18\u5316\u8fd9\u90e8\u5206\u3002\n\n\uff08\u4ee5\u4e0b\u6240\u8ff0\u201c\u533a\u95f4\u201d\u5747\u4e3a\u90e8\u5206\u5947\u6570\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u6784\u6210\u7684\u533a\u95f4\uff09\n\n\u5047\u8bbe\u7b2c\u4e00\u6b21\u5076\u6570\u5df2\u7ecf\u5c06\u5947\u6570\u5212\u5206\u4e3a $A,B$ \u4e24\u90e8\u5206\uff0c\u800c\u7b2c\u4e8c\u4e2a\u5076\u6570\u7684\u8be2\u95ee $\\lceil \\frac{n}{2}\\rceil$ \u6b21\uff0c\u663e\u7136\u53ea\u80fd\u5c06\u5176\u4e2d\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e24\u5c0f\u90e8\u5206\uff0c\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u533a\u95f4**\u65e0\u4efb\u4f55\u4f5c\u7528**\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u533a\u95f4\uff0c\u8fd4\u56de\u7684**\u90fd\u662f**\u5927\u4e8e\u6216\u5c0f\u4e8e\u3002\n\n\u5f53\u8be2\u95ee\u66f4\u591a\u65f6\uff0c\u540e\u9762\u7684\u5076\u6570\u7684\u8be2\u95ee\u5927\u591a\u6570\u90fd\u662f\u65e0\u610f\u4e49\u7684\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u8981\u627e\u5230\u5076\u6570\u6240\u5c5e\uff08\u88ab\u5305\u542b\u7684\u90a3\u4e2a\u5947\u6570\u533a\u95f4\uff09\u7684\u90a3\u4e2a\u533a\u95f4\u7684\u5947\u6570\uff0c\u518d\u5728\u5176\u4e2d\u4e3a\u5176\u5212\u5206\u3002\n\n\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u5f00\u59cb\u5e76\u4e0d\u77e5\u9053\u90a3\u4e2a\u5076\u6570\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u53ea\u80fd\u4e8c\u5206\u6240\u6709\u533a\u95f4\uff0c\u56e0\u4e3a\u8981\u6bd4\u8f83\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4\u7684\u6807\u8bb0\u503c\u4e3a\u4efb\u610f\u4e00\u4e2a\u5947\u6570\u7684\u503c\uff0c\u6240\u6709\u533a\u95f4\u7684\u8fd9\u4e2a\u503c\u663e\u7136\u662f**\u5355\u8c03\u7684**\u3002\n\n\u6211\u4eec\u62ff\u5076\u6570\u4e0e\u4e4b\u4e8c\u5206\u6bd4\u8f83\uff0c**\u4f46\u662f**\u5b83\u6240\u5c5e\u7684\u90a3\u4e2a\u533a\u95f4\u53ef\u80fd\u8fd4\u56de\u662f\u5927\u4e8e\u4e5f\u53ef\u4ee5\u662f\u5c0f\u4e8e\uff0c\u4f46**\u5fc5\u5b9a\u662f**\u5355\u8c03\u7684\u533a\u95f4\u7684\u5206\u754c\u7ebf\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5206\u754c\u7ebf\u7684\u4e24\u4e2a\u533a\u95f4\u90fd\u62ff\u6765\u505a\u4e00\u6b21\u5212\u5206\u64cd\u4f5c\uff0c\u4e5f\u53ea\u4f1a\u589e\u52a0\u5e38\u6570\u7ea7\u7684\u8be2\u95ee\u3002\n\n\u4e3a\u4e86\u66f4\u597d\u5730\u7ef4\u62a4\u4e8c\u5206\uff08\u5373\u4f60\u5212\u5206\u4e86\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u8fd8\u8981\u7ef4\u62a4\u5176\u5355\u8c03\u6027\uff0c\u8fd9\u663e\u7136\u662f\u666e\u901a\u7684\u6570\u7ec4\u65e0\u6cd5\u7ef4\u62a4\u7684\uff09\uff0c\u56e0\u4e3a\u849f\u84bb\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u5176\u4ed6\u9898\u89e3\u91cc\u9762vector\u4e00\u4e2a\u4e2a\u5192\u6ce1\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5408\u7406\u7684\uff0c\u6211\u4f7f\u7528\u4e86\u6e05\u65b0\u7684\u5e73\u8861\u6811\u7ef4\u62a4\uff1a\uff09\u3002\n\n\u6ce8\u610f\uff1a\u4e3a\u4e86\u907f\u514d\u8ba8\u8bba\u5947\u6570\u4e2a\u6570\u7b49\u4e8e\u5076\u6570\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u591a\u52a0\u4e00\u4e2a\u5947\u6570\u5728\u6570\u7ec4\u672b\u5c3e\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5b83\u7684\u65f6\u5019\u90fd\u76f4\u63a5\u8fd4\u56de `<`\u3002\n\n\u7b97\u4e00\u4e0b\u8be2\u95ee\u7684\u590d\u6742\u5ea6\uff1a$\\mathcal O(n)=\\sum_{i=1}^{i\\le \\frac{n}{2}} \\frac{2n}{i} + \\log i =\\mathcal O(n\\log n)$\u3002 (\u671f\u671b\u590d\u6742\u5ea6)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O(n)=\\sum_{i=1}^{i\\le \\frac{n}{2}} \\log^2 i=\\mathcal O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nint a, id, root, ans[N + 10], h[N + 10];\nbool fake;\nchar opt;\nvector<int> e[N + 10], L, R;\nstruct node\n{\n    int val, ls, rs, rnd, siz;\n} s[N + 10];\n\ninline int New(int n)\n{\n    s[++id].val = n;\n    s[id].ls = s[id].rs = 0;\n    s[id].rnd = rand();\n    s[id].siz = 1;\n    return id;\n}\n\ninline void up(int n) { s[n].siz = s[s[n].ls].siz + s[s[n].rs].siz + 1; }\n\ninline void split(int n, int val, int &x, int &y)\n{\n    if (!n)\n    {\n        x = y = 0;\n        return;\n    }\n    if (s[n].val <= val)\n        x = n, split(s[n].rs, val, s[n].rs, y);\n    else\n        y = n, split(s[n].ls, val, x, s[n].ls);\n    up(n);\n}\n\ninline int merge(int x, int y)\n{\n    if (!x || !y)\n        return x + y;\n    if (s[x].rnd < s[y].rnd)\n    {\n        s[x].rs = merge(s[x].rs, y);\n        up(x);\n        return x;\n    }\n    else\n    {\n        s[y].ls = merge(x, s[y].ls);\n        up(y);\n        return y;\n    }\n}\n\ninline void ins(int n)\n{\n    int x, y;\n    split(root, n - 1, x, y);\n    root = merge(merge(x, New(n)), y);\n}\n\ninline int val(int rt, int n)\n{\n    int res, now = rt;\n    while (1)\n    {\n        if (s[s[now].ls].siz >= n)\n            now = s[now].ls;\n        else if (n == s[s[now].ls].siz + 1)\n            return s[now].val;\n        else\n            n -= s[s[now].ls].siz + 1, now = s[now].rs;\n    }\n}\n\ninline void query(int l, int r)\n{\n    if (r == (a + 1) / 2 && fake)\n    {\n        opt = '<';\n        return;\n    }\n    cout << \"? \" << l << ' ' << r << endl;\n    fflush(stdout);\n    cin >> opt;\n}\n\ninline bool solve(int n, int i)\n{\n    L.clear();\n    R.clear();\n    for (int j = 0; j < e[n].size(); j++)\n    {\n        query(i, e[n][j]);\n        if (opt == '>')\n            L.PB(e[n][j]);\n        else\n            R.PB(e[n][j]);\n    }\n    if (!L.size() || !R.size())\n        return false;\n    ans[i] = n + (L.size() - 1) * 2 + 1;\n    ins(ans[i] + 1);\n    e[n] = L;\n    e[ans[i] + 1] = R;\n}\n\ninline void solvepair(int l1, int l2, int i)\n{\n    bool res = solve(l1, i);\n    if (res)\n        return;\n    solve(l2, i);\n}\n\nsigned main()\n{\n    // freopen(\"in1.in\", \"r\", stdin);\n    ios::sync_with_stdio(0);\n    a = read();\n    if ((a & 1) == 0)\n        a++, fake = 1;\n    ins(1);\n    for (int i = 1; i <= (a + 1) / 2; i++)\n        e[1].PB(i);\n    for (int i = 1; i <= a / 2; i++)\n    {\n        int l = 1, r = i, l1 = -1, l2 = -1;\n        while (l <= r)\n        {\n            int mid = (l + r) >> 1, tmp = val(root, mid);\n            query(i, e[tmp][0]);\n            if (opt == '<')\n                r = mid - 1, l2 = tmp;\n            else\n                l = mid + 1, l1 = tmp;\n        }\n        if (l1 == -1)\n            solve(l2, i);\n        else if (l2 == -1)\n            solve(l1, i);\n        else\n            solvepair(l1, l2, i);\n    }\n    cout << \"! \";\n    for (int i = 1; i <= a / 2; i++)\n        cout << ans[i] << ' ';\n    for (int i = 1; i <= a; i += 2)\n        h[e[i][0]] = i;\n    for (int i = 1; i <= (a + 1) / 2; i++)\n        cout << h[i] << ' ';\n    return 0;\n}\n```",
        "postTime": 1615969557,
        "uid": 184549,
        "name": "RedreamMer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6960 [NEERC2017]Interactive Sort"
    }
]