[
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e2a\u65e0\u5efa\u6811\u505a\u6cd5\n\n#### \u4e2a\u4eba\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u6bd4\u8f83\u6613\u61c2(~~\u7b80\u76f4\u4e0d\u9700\u8981\u6ce8\u91ca~~)\n\n\u5b9a\u4e49dp\\[x][0/1/2] \u5206\u522b\u4e3ax\u8282\u70b9\u67d3\u7eff /\u7ea2 /\u84dd \u60c5\u51b5\u4e0b\u5b50\u6811\u4e2d\u6700\u591a\u6709\u51e0\u4e2a\u70b9\u88ab\u67d3\u6210\u7eff\u8272\n\n\u7c7b\u4f3c\u7684 f\\[x][0/1/2] \u4e3a\u6700\u5c11\u6709\u51e0\u4e2a\u70b9\n\n\u89c1\u4ee3\u7801:\n\n```c++\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N = 500050;\nchar s[N];\nint dp[N][4], f[N][4], cnt;\nint ans1 = 1;\nvoid dfs(int x) {\n\tif (s[x] == '0') {//\u53f6\u8282\u70b9\n\t\tf[x][0] = dp[x][0] = 1;\n\t\treturn;\n\t}\n\tdfs(++cnt);\n    //\u5de6\u513f\u5b50\u7f16\u53f7\u4e3ax+1\n\tif (s[x] == '1') { //\u4e00\u4e2a\u513f\u5b50\n\t\tdp[x][0] = max(dp[x+1][1], dp[x+1][2])+1;\n\t\tdp[x][1] = max(dp[x+1][0], dp[x+1][2]);\n\t\tdp[x][2] = max(dp[x+1][0], dp[x+1][1]);\n        \t//\u513f\u5b50\u67d3\u53e6\u5916\u4e00\u79cd\u989c\u8272\n\t\t// \u4e0a\u65b9\u4ee3\u7801\u5b8c\u5168\u662f\u590d\u5236\u4e00\u904d\u5230\u4e0b\u9762\n\t\tf[x][0] = min(f[x+1][1], f[x+1][2])+1;\n\t\tf[x][1] = min(f[x+1][0], f[x+1][2]);\n\t\tf[x][2] = min(f[x+1][0], f[x+1][1]);\n\t}\n\telse {\n        //\u53f3\u513f\u5b50\u7f16\u53f7\u4e3ak\n\t\tint k = ++cnt;\n\t\tdfs(k);\n\t\tdp[x][0] = max(dp[x+1][1] + dp[k][2], dp[x+1][2] + dp[k][1]) + 1;\n\t\tdp[x][1] = max(dp[x+1][0] + dp[k][2], dp[x+1][2] + dp[k][0]);\n\t\tdp[x][2] = max(dp[x+1][0] + dp[k][1], dp[x+1][1] + dp[k][0]);\n\t\t\n\t\tf[x][0] = min(f[x+1][1] + f[k][2], f[x+1][2] + f[k][1]) + 1;\n\t\tf[x][1] = min(f[x+1][0] + f[k][2], f[x+1][2] + f[k][0]);\n\t\tf[x][2] = min(f[x+1][0] + f[k][1], f[x+1][1] + f[k][0]);\n\t}\n\tans1 = max(ans1, dp[x][0]);\n}\nint main() {\n\tscanf (\"%s\", s + 1);\n\tdfs(++cnt);\n\tcout << ans1 << ' ' << min(f[1][0], min(f[1][1], f[1][2])) << endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1569922696,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "upd in 3.25 \u56e0\u5927\u4f6c\u8981\u6c42\u4fee\u4e86\u4e00\u4e0b$\\LaTeX$\u3002\n\n## \u5927\u4f6c\u4eecdp\u65b9\u7a0b\u6ca1\u89e3\u91ca\u6e05\u695a\u554a...\n\n\u6211\u7684 dp \u4e5f\u662f\u9012\u63a8\u5b9e\u73b0\u7684\uff0c~~\u4e0d\u50cf\u5927\u4f6c\u4eec\u90a3\u6837\u7528\u6811\u4e0adfs~~\n\n\n------------\n\n\n### \u9996\u5148\u662f\u5efa\u6811\u3002\n\n\u8fd9\u4e2a\u6811\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u8003\u8651\u7528dfs\u5efa\u6811\u3002\n\n\u5c31\u8bf4\u6837\u4f8b\u5427\u3002\n\n$1122002010$\n\n\u90bb\u63a5\u8868\u4ec0\u4e48\u90fd\u4e0d\u5b58\u5728\u7684\uff01\u56e0\u4e3a\u662f\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u90bb\u63a5\u77e9\u9635\u4f1a\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\n\n```\n\u8bbetree[i][0] \u4e3a\u7b2ci\u4e2a\u8282\u70b9\u7684\u5de6\u8282\u70b9\u7f16\u53f7\n\u8bbetree[i][1] \u4e3a\u7b2ci\u4e2a\u8282\u70b9\u7684\u53f3\u8282\u70b9\u7f16\u53f7\n\nvoid dfs(int root){//root\u8868\u793a\u51e0\u53f7\u8282\u70b9\n    tot++;//\u8868\u793a\u603b\u5171\u8bbf\u95ee\u4e86\u51e0\u4e2a\u8282\u70b9\u3002\n    if (s[root]=='0') return;//\u53f6\u5b50\u8282\u70b9\u9000\u51fa\n    if (s[root]=='1') {\n        tree[root][0]=root+1;//\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\u7684\u7f16\u53f7\u4e00\u5b9a\u662f\u8fd9\u4e2a\u8282\u70b9\u7f16\u53f7+1\n        dfs(root+1);//\u5411\u4e0b\u641c\n    }\n    if (s[root]=='2') {\n        tree[root][0]=root+1;\n        dfs(root+1);\n        tree[root][1]=tot+1;//\u53f3\u8282\u70b9\u4e00\u5b9a\u662f\u603b\u5171\u8bbf\u95ee\u7684\u7f16\u53f7+1\n        dfs(tot+1);\n    }\n}\n```\n### \u7136\u540e\u63a8\u5bfc dp \u65b9\u7a0b\n\u5148\u6c42\u6700\u5927\u503c\u3002\u8fd9\u79cd\u67d3\u8272\u95ee\u9898\u6bd4\u8f83\u6076\u5fc3\u3002\u5728 dp \u7684\u8fc7\u7a0b\u4e2d\uff0c\n\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u7684\u5de6\u53f3\u7ed3\u70b9\u662f\u5426\u67d3\u4e86\u7eff\u8272\uff0c\n\n\u56e0\u6b64 dp \u51fa\u6765\u7684\u7ed3\u679c\u4f1a\u6709\u95ee\u9898\uff1f\uff1f\uff1f\n\n### \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e0bdp\u7684\u72b6\u6001\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u662f\u6211\u4ece P1352 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\u4e2d\u5b66\u5230\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u770b\u3002\n\n\u8bbe$f_{i,0}$\u8868\u793a \u7b2c$i$\u4e2a\u70b9\uff0c\u4e0d\u67d3\u7eff\u8272\uff0c\u5176\u5b50\u6811\uff08\u5305\u62ec\u81ea\u5df1\uff09\u67d3\u6210\u7eff\u8272\u7684\u6700\u5927\u503c\u3002\n\n\u8bbe$f_{i,1}$\u8868\u793a \u7b2c$i$\u4e2a\u70b9\uff0c\u67d3\u7eff\u8272\uff0c\u5176\u5b50\u6811\uff08\u5305\u62ec\u81ea\u5df1\uff09\u67d3\u6210\u7eff\u8272\u7684\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\uff0c\u9996\u5148\uff0c\u7b2ci\u4e2a\u70b9\u82e5\u67d3\u7eff\u8272\uff0c\u90a3\u4e48\u5176\u5de6\u53f3\u8282\u70b9\u90fd\u4e0d\u80fd\u67d3\u7eff\u8272\u3002\u6240\u4ee5\u8003\u8651\u628a\u5de6\u53f3\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u72b6\u6001\u503c\u76f8\u52a0\uff0c\u4fbf\u5f97\u5230\u4e86\u7ed3\u679c\u3002\n\n\u90a3\u4e48$f_{i,1}=f_{\\text{tree}_{i,0},0}+f_{\\text{tree}_{i,1},0}$\n\n\u82e5\u8fd9\u4e2a\u70b9\u4e0d\u67d3\u7eff\u8272\u5462\uff1f\n\n\u6211\u4eec\u4f1a\u60f3\uff0c\u8fd9\u4e2a\u70b9\u4e0d\u67d3\u7eff\u8272\uff0c\u90a3\u4e48\u7531\u9898\u610f\uff0c\u5b83\u7684\u5de6\u53f3\u8282\u70b9\u4e0d\u53ef\u4ee5\u540c\u65f6\u67d3\u7eff\u8272\uff0c\n\u679a\u4e3e\u4e24\u8282\u70b9\u67d3\u8272\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u4eec\u6c42\u7684\u662f\u6700\u5927\u503c\uff0c\u90a3\u4e48$f_{i,0}$\u5c31\u662f\n\n$\\max($\u5de6\u8282\u70b9\u67d3\u7eff\u8272\u7684\u503c+\u53f3\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u503c,\n\u5de6\u8282\u70b9\u67d3\u7eff\u8272\u7684\u503c+\u53f3\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u503c,\u5de6\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u503c+\u53f3\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u503c$)$\n\n\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u90a3\u4e48\u6700\u5c0f\u503c\u4e5f\u4e00\u6837\u3002\u6492\u82b1\uff01\uff01\uff01\n\n......\u6709\u8fd9\u4e48\u8f7b\u677e\uff1f\uff1f\uff1f\n\n### \u8fd9\u9053\u9898\u7684\u5751\u70b9\u6765\u4e86\uff0c\u5bf9\u4e8e\u7b2ci\u4e2a\u8282\u70b9\u4e0d\u67d3\u7eff\u8272\u7684\u60c5\u51b5\uff0c\u4e0d\u5b58\u5728\u4e24\u4e2a\u8282\u70b9\u90fd\u4e0d\u67d3\u7eff\u8272\u7684\u60c5\u51b5\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f\n\n\u5982\u679c\u7b2c$i$\u4e2a\u70b9\u4ee5\u53ca\u5176\u5b50\u8282\u70b9\u90fd\u4e0d\u67d3\u7eff\u8272\uff0c\u90a3\u4e48\uff0c\u8fd9\u4e09\u4e2a\u70b9\u53ea\u80fd\u67d3\u4e0a\u7ea2\u3001\u84dd\u4e24\u8272\u3002\n\n\u7136\u800c\u6839\u636e\u62bd\u5c49\u539f\u7406\uff0c\u4e09\u4e2a\u70b9\u67d3\u4e0a\u4e24\u79cd\u989c\u8272\uff0c\u4e00\u5b9a\u6709\u4e24\u4e2a\u70b9\u7684\u989c\u8272\u76f8\u540c\uff01\uff01\uff01\n\n\u6240\u4ee5\uff0c\u4e0d\u7b26\u5408\u9898\u610f\uff01\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53eb**\u4e09\u8272**\u4e8c\u53c9\u6811\u3002\n\n#### \u6700\u540e\u5f00\u59cb dp\n\n\u4e3a\u4ec0\u4e48\u8981\u7528 dfs \uff1f\n\n\u7531\u4e8e\u5bf9\u4e8e\u4e00\u68f5\u5b50\u6811\uff0c\u5176\u7f16\u53f7\u6392\u5e8f\u4e00\u5b9a\u4e3a **\u6839\u8282\u70b9<\u5de6\u8282\u70b9<\u53f3\u8282\u70b9**\n\n\u6240\u4ee5\u6211\u4eec\u7528\u9012\u63a8\u3002\n\n\u4ece\u8282\u70b9\u6570\u5f00\u59cb\u5012\u63a8\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```\nfor (int i=n;i>=1;i--){\n    f[i][1]=f[tree[i][0]][0]+f[tree[i][1]][0]+1;\n    f[i][0]=max(f[tree[i][0]][1]+f[tree[i][1]][0],f[tree[i][0]][0]+f[tree[i][1]][1]);\n}\nprintf(\"%d \",max(f[1][1],f[1][0]));//\u6700\u540e\u6211\u4eec\u53ea\u8981\u6bd4\u8f83\u4e00\u4e0b\uff0c\u6811\u6839\u67d3\u548c\u4e0d\u67d3\u7684\u7b54\u6848\u54ea\u4e2a\u66f4\u4f18\nfor (int i=n;i>=1;i--){\n    f[i][1]=f[tree[i][0]][0]+f[tree[i][1]][0]+1;\n    f[i][0]=min(f[tree[i][0]][1]+f[tree[i][1]][0],f[tree[i][0]][0]+f[tree[i][1]][1]);\n}\nprintf(\"%d\",min(f[1][1],f[1][0]));//\u6700\u540e\u6211\u4eec\u53ea\u8981\u6bd4\u8f83\u4e00\u4e0b\uff0c\u6811\u6839\u67d3\u548c\u4e0d\u67d3\u7684\u7b54\u6848\u54ea\u4e2a\u66f4\u4f18\n```\n## \u771f\u00b7\u6492\u82b1",
        "postTime": 1521258053,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "**\u5728\u6b64\u7ed9\u51fa\u4e00\u4e2a\u76f8\u5bf9\u8f83\u7b80\u7684\u5b9e\u73b0**\n\n\u4eba\u8bdd\u9898\u610f\uff1a\u9012\u5f52\u5730\u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8282\u70b9\u7684\u989c\u8272\u53ef\u4ee5\u662f0,1,2\uff0c\u7236\u5b50\u8282\u70b9\u3001\u5144\u5f1f\u8282\u70b9\u95f4\u7684\u989c\u8272\u4e0d\u540c\uff0c\u6c42\u6700\u591a\uff08\u6700\u5c11\uff09\u53ef\u4ee5\u6709\u591a\u5c11\u4e2a\u70b9\u4e3a0\u8272\u3002\n\n\u6734\u7d20\u7684\u6811\u5f62dp\uff0c\u8bfb\u5165\u6570\u636e\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5b9e\u9645\u4e0a\u53ea\u6709\u7eff\u548c\u4e0d\u4e3a\u7eff\u4e24\u79cd\u72b6\u6001\uff0c\u6700\u5927/\u6700\u5c0f\u505a\u4e24\u904d\u5373\u53ef\uff0c\u5728\u6b64\u4ee5\u6700\u5927\u4e3a\u4f8b\uff1a\n\n\u4ee5 $f_{i}$ \u8868\u793a\u70b9 $i$ \u4e3a\u7eff\u8272\u65f6\u6700\u591a\u6709\u591a\u5c11\u70b9\u53ef\u4ee5\u4e3a\u7eff\uff0c$g_{i}$ \u8868\u793a\u70b9 $i$ \u4e0d\u4e3a\u7eff\u8272\u65f6\u6700\u591a\u591a\u5c11\u70b9\u53ef\u4ee5\u4e3a\u7eff\u3002\n\n\u8f6c\u79fb\u662f\u8fd9\u6837\u7684\uff0c\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a $i$ \uff0c\u82e5\u4e3a\u7eff\u8272\uff0c\u5219\u5b50\u8282\u70b9\u5fc5\u987b\u975e\u7eff\u3002\u82e5\u4e0d\u4e3a\u7eff\u8272\uff0c\u5219\u4ece\u4e24\u4e2a\u513f\u5b50\u5206\u522b\u4e00\u7eff\u4e00\u4e0d\u7eff\u7684\u72b6\u6001\u53d6 $max$ \u8f6c\u79fb\u800c\u6765\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <iomanip>\n#include <iostream>\n#include <algorithm>\n#define N 500010 \nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nchar str[N];\nint n,cnt,ch[N][2];\nint f[N],g[N],root;\nvoid build(int &x)\n{\n    x=++cnt;\n    int opt=str[cnt]-'0';\n    if(opt==0)return ;\n    if(opt==1)build(ch[x][1]);\n    if(opt==2)build(ch[x][1]),build(ch[x][2]);\n}\nint main()\n{\n    scanf(\"%s\",str+1);\n    n=strlen(str+1);\n    build(root);\n    for(int i=n;i>=1;i--)\n    {\n        f[i]=g[ch[i][1]]+g[ch[i][2]]+1;\n        g[i]=max(f[ch[i][1]]+g[ch[i][2]],f[ch[i][2]]+g[ch[i][1]]);\n    }\n    printf(\"%d \",max(f[1],g[1]));\n    for(int i=n;i>=1;i--)\n    {\n        f[i]=g[ch[i][1]]+g[ch[i][2]]+1;\n        g[i]=min(f[ch[i][1]]+g[ch[i][2]],f[ch[i][2]]+g[ch[i][1]]);\n    }\n    printf(\"%d\",min(f[1],g[1]));\n    return 0;\n}\n```",
        "postTime": 1505886988,
        "uid": 30459,
        "name": "\u6d88\u5931\u7684\u6d77\u5cb8\u7ebf",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "## $\\mathscr{SOLUTIOH}$\n\n\u8fd9\u91cc\u662f\u5efa\u6811 + \u9012\u5f52\u7684\u9898\u89e3...\u5176\u5b9e\u4e5f\u5e76\u4e0d\u957f...\n\n\u8bbe $\\mathrm{f[i][0/1/2]}$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u67d3\u6210 \uff08\u7eff / \u7ea2 / \u84dd\uff09 \u65f6\uff0c\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u591a\u6709\u591a\u5c11\u7eff\u8272\u8282\u70b9\uff1b$\\mathrm{g[i][0/1/2]}$ \u8868\u793a\u6700\u5c11\n\n\u5982\u679c $i$ \u8282\u70b9\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u80fd\u4e0e\u5b83\u67d3\u8272\u76f8\u540c\uff0c\u4e14\u4e24\u4e2a\u513f\u5b50\u4e4b\u95f4\u67d3\u8272\u4e5f\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u4e24\u4e2a\u513f\u5b50\u4f1a\u5206\u522b\u62ff\u8d70\u5269\u4e0b\u7684\u4e24\u79cd\u989c\u8272\uff1a\n\n```cpp\nf[x][0] = max(f[son1][1] + f[son2][2], f[son1][2] + f[son2][1]) + 1; //\u7eff\u8272+1\nf[x][1] = max(f[son1][0] + f[son2][2], f[son1][2] + f[son2][0]);\nf[x][2] = max(f[son1][0] + f[son2][1], f[son1][1] + f[son2][0]);\ng[x][0] = min(g[son1][1] + g[son2][2], g[son1][2] + g[son2][1]) + 1;\ng[x][1] = min(g[son1][0] + g[son2][2], g[son1][2] + g[son2][0]);\ng[x][2] = min(g[son1][0] + g[son2][1], g[son1][1] + g[son2][0]);\n```\n\u5982\u679c $i$ \u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u8fd9\u4e2a\u513f\u5b50\u53ea\u8981\u4e0d\u4e0e $i$ \u67d3\u8272\u76f8\u540c\u5373\u53ef\uff1b\u521d\u59cb\u5316\u53e6\u4e00\u4e2a\u513f\u5b50 ( $0$ ) \u7684 $\\mathrm{f,g}$ \u503c\u4e3a $0$\uff0c\u50cf\u4e0a\u9762\u8fd9\u6837\u5199\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\n\n\u66f4\u65b0\u7236\u8282\u70b9\u9700\u8981\u77e5\u9053\u5b50\u8282\u70b9\u7684\u503c\uff0c\u53ef\u4ee5\u5728\u6811\u4e0a\u9012\u5f52\n\n## $\\mathscr{CODE}$\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nconst int N = 1000000;\nint n, ch[N][2], f[N][3], g[N][3], tot = 0;\nstring a;\n\nint build()\n{\n\tint now = ++tot; //\u65b0\u5efa\u8282\u70b9\u7f16\u53f7\n\tif(a[now - 1] == '2') ch[now][0] = build(), ch[now][1] = build();\n\telse if(a[now - 1] == '1') ch[now][0] = build();\n\treturn now; //\u8fd4\u56de\u8282\u70b9\u7f16\u53f7\n}\n\nvoid dfs(int x)\n{\n\tint l = ch[x][0], r = ch[x][1];\n\tif(l) dfs(l); if(r) dfs(r); //\u9012\u5f52\u4e24\u4e2a\u513f\u5b50\n    if(!l && !r) //\u53f6\u5b50\u8282\u70b9\u521d\u59cb\u5316\n    \tf[x][0] = g[x][0] = 1, f[x][1] = f[x][2] = g[x][1] = g[x][2] = 0;\n\t//\u8f6c\u79fb\u65b9\u7a0b\n\tf[x][0] = max(f[l][1] + f[r][2], f[l][2] + f[r][1]) + 1;\n\tf[x][1] = max(f[l][0] + f[r][2], f[l][2] + f[r][0]);\n\tf[x][2] = max(f[l][0] + f[r][1], f[l][1] + f[r][0]);\n\tg[x][0] = min(g[l][1] + g[r][2], g[l][2] + g[r][1]) + 1;\n\tg[x][1] = min(g[l][0] + g[r][2], g[l][2] + g[r][0]);\n\tg[x][2] = min(g[l][0] + g[r][1], g[l][1] + g[r][0]);\n}\n\nint main()\n{\n\tcin >> a; n = a.size(); //\u6811\u7684\u8282\u70b9\u6570\u7b49\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\n\tmemset(ch, 0, sizeof(ch)); //\u82e5\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u8be5\u513f\u5b50\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u7f16\u53f7\u4e3a0\n\tf[0][0] = f[0][1] = f[0][2] = 0; //\u521d\u59cb\u5316\u7f16\u53f7\u4e3a0\u7684\u8282\u70b9\n\tdfs(build());\n\tprintf(\"%d\", max(f[1][0], max(f[1][1], f[1][2]))); //\u4e09\u79cd\u67d3\u8272\u53d6\u6700\u5927\u503c\n\tprintf(\" %d\", min(g[1][0], min(g[1][1], g[1][2]))); //\u4e09\u79cd\u67d3\u8272\u53d6\u6700\u5c0f\u503c\n\treturn 0;\n} \n```",
        "postTime": 1584086408,
        "uid": 138280,
        "name": "lxy__",
        "ccfLevel": 6,
        "title": "P2585 [ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811"
    },
    {
        "content": "\u9996\u5148\u8bf4\u4e00\u53e5\uff0c\u672c\u4eba\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u6a21\u5757\u5316\uff0c\u6807\u51c6\u5316\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4ee3\u7801\u8f83\u957f\uff0c\u6240\u4ee5\u5982\u679c\u9700\u8981\u770b\u4ee3\u7801\u7684\u8bf7\u8010\u5fc3 ![](https://cdn.luogu.com.cn/upload/pic/1436.png)\n\n\u597d\u5427\uff0c\u90a3\u6211\u4eec\u5c31\u5f00\u59cb\u4e86\n\n### Menu\n1. \u601d\u8def\u89e3\u6790\n2. \u5206\u6a21\u5757\u5b9e\u73b0  \n\t2.1. \u5efa\u6811  \n    2.2. DP  \n3. \u9644\u6ce8  \n\t3.1. \u6613\u9519\u70b9   \n    3.2. \u6211\u7684\u8c03\u8bd5\u4fe1\u606f   \n    3.3. \u4f18\u5316\n4. \u4ee3\u7801\n\n### 1. \u601d\u8def\u89e3\u6790\n\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u7684\u8f93\u5165\u8981\u6c42\u4f60\u80fd\u638c\u63e1\u5efa\u6811\u57fa\u672c\u6280\u5de7\uff08dfs\u5efa\u6811\uff09\n\n\u5176\u6b21\uff0c\u770b\u5230\u9898\u76ee\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u731c\u5230\u9700\u8981\u7528DP\uff1b\u800c\u660e\u663e\uff0c\u8fd9\u9053\u9898\u4e5f\u7b26\u5408\u6700\u4f18\u5b50\u7ed3\u6784\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7b14\u8005\u4f7f\u7528\u4e86\u6811\u4e0aDP\n\n\u56e0\u4e3a\u4e60\u60ef\uff0c\u7b14\u8005\u7528\u4e86\u6307\u9488\uff08\u6c42\u8f7b\u8650\uff09![](https://cdn.luogu.com.cn/upload/pic/36960.png)\n\n### 2. \u5206\u6a21\u5757\u5b9e\u73b0\n\n#### 2.1. \u5efa\u6811\n\n\u8fd9\u4e00\u5757\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801~~\u611f\u6027~~\u7406\u89e3\u4e0b\n\n#### 2.2. DP  \n\nStep 1: \u6267\u884c\u5b69\u5b50\u7684 DP  \nStep 2: \u83b7\u53d6\u7b54\u6848\uff08DP\u8f6c\u79fb\u65b9\u7a0b\uff09\n\n\u7ed3\u5408\u8bb0\u5f55\u7b54\u6848\u7684 ``struct`` \u7406\u89e3\uff1a\n```\nstruct record_DP {\n    int R, G, B;\n    // object's name : my color\n    // object's value : max/min count(color-green)\n} maxx, minn;\n```\n$maxx.R = max(lc->maxx.G + rc->maxx.B, lc->maxx.B + rc->maxx.G);$  \n$maxx.G = max(lc->maxx.R + rc->maxx.B, lc->maxx.B + rc->maxx.R) + 1;$  \n$maxx.B = max(lc->maxx.R + rc->maxx.G, lc->maxx.G + rc->maxx.R);$  \n$minn.R = min(lc->minn.G + rc->minn.B, lc->minn.B + rc->minn.G);$  \n$minn.G = min(lc->minn.R + rc->minn.B, lc->minn.B + rc->minn.R) + 1;$  \n$minn.B = min(lc->minn.R + rc->minn.G, lc->minn.G + rc->minn.R);$  \n\n### 3. \u9644\u6ce8 \n\n#### 3.1. \u6613\u9519\u70b9\n\n\u56e0\u4e3a\u6211\u7528\u7684\u662f\u6307\u9488\uff0c\u6240\u4ee5\u2026\u2026\u6ce8\u610f**\u91ce\u6307\u9488**\n\n#### 3.2. \u6211\u7684\u8c03\u8bd5\u4fe1\u606f \n\n\u5728\u4ee3\u7801\u524d\u9762\u52a0\u4e0a\u4e00\u884c\n```cpp\n#define DEBUG\n```\n\u5c31\u53ef\u4ee5\u770b\u5230\u6211\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd8\u662f\u6bd4\u8f83\u597d\u5eb7\u7684\u3002  \n![](https://cdn.luogu.com.cn/upload/pic/10566.png)\n\n\u53e6\u5916\u8fd8\u6709\u4e00\u4e9b\u7528\u6ce8\u91ca\u7684\u8bed\u53e5\uff0c\u6ca1\u4e8b\u5e72\u53ef\u4ee5\u5f00\uff0c\u4f46\u6ca1\u6709\u4ec0\u4e48\u7528\u3002\n\n#### 3.3. \u4f18\u5316\n\n\u8bf7\u7ed3\u5408\u6211\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n\u6211\u7684DP\u8fc7\u7a0b\u4e2d ``struct record_DP`` \u91cc\u9762\u7684\u4e24\u4e2a\u6210\u5458 ``R`` \u548c ``B`` \u7684\u503c\u6c38\u8fdc\u4e00\u6837\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\n\n### 4. \u4ee3\u7801\n```cpp\n/*************************************\n * problem:      P2585 [ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811.\n * user ID:      63720.\n * user name:    Jomoo.\n * time:         2019-06-01.\n * language:     C++.\n * upload place: Luogu.\n*************************************/ \n\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename Int>\ninline Int read()       \n{\n    Int flag = 1;\n    char c = getchar();\n    while ((!isdigit(c)) && c != '-') c = getchar();\n    if (c == '-') flag = -1, c = getchar();\n    Int init = c & 15;\n    while (isdigit(c = getchar())) init = (init << 3) + (init << 1) + (c & 15);\n\treturn init * flag;\n}\n\ntemplate <typename Int>\ninline void write(Int x)\n{\n    if (x < 0) putchar('-'), x = ~x + 1;\n    if (x > 9) write(x / 10);\n    putchar((x % 10) | 48);\n}  \n\ntemplate <typename Int>\ninline void write(Int x, char nextch)\n{\n    write(x);\n    putchar(nextch);\n}  \n\nvoid backspace()\n{\n    printf(\"\\b \\b\");\n}\n\n#ifdef DEBUG\n#include <windows.h>\n#endif\n\nstruct Tree_OP {\n    struct Tro_tree {\n        struct record_DP {\n            int R, G, B;\n            // object's name : my color\n            // object's value : max/min count(color-green)\n        } maxx, minn;\n        Tro_tree *lc, *rc;\n\n        Tro_tree() \n        {\n            maxx.R = maxx.G = maxx.B = 0;\n            minn.R = minn.G = minn.B = 0;\n            lc = rc = NULL;\n        }\n\n        #ifdef DEBUG\n        void pushup(int depth)\n        #else\n        void pushup()\n        #endif\n        {\n            if (lc && rc) {\n                #ifdef DEBUG\n                lc->pushup(depth + 1);\n                rc->pushup(depth + 1);\n                #else\n                lc->pushup();\n                rc->pushup();\n                #endif\n                maxx.R = max(lc->maxx.G + rc->maxx.B, lc->maxx.B + rc->maxx.G);\n                maxx.G = max(lc->maxx.R + rc->maxx.B, lc->maxx.B + rc->maxx.R) + 1;\n                maxx.B = max(lc->maxx.R + rc->maxx.G, lc->maxx.G + rc->maxx.R);\n                minn.R = min(lc->minn.G + rc->minn.B, lc->minn.B + rc->minn.G);\n                minn.G = min(lc->minn.R + rc->minn.B, lc->minn.B + rc->minn.R) + 1;\n                minn.B = min(lc->minn.R + rc->minn.G, lc->minn.G + rc->minn.R);\n            } else if (lc) {\n                #ifdef DEBUG\n                lc->pushup(depth + 1);\n                #else\n                lc->pushup();\n                #endif\n                maxx.R = max(lc->maxx.G, lc->maxx.B);\n                maxx.G = max(lc->maxx.R, lc->maxx.B) + 1;\n                maxx.B = max(lc->maxx.R, lc->maxx.G);\n                minn.R = min(lc->minn.G, lc->minn.B);\n                minn.G = min(lc->minn.R, lc->minn.B) + 1;\n                minn.B = min(lc->minn.R, lc->minn.G);\n            } else {\n                maxx.R = 0;\n                maxx.G = 1;\n                maxx.B = 0;\n                minn.R = 0;\n                minn.G = 1;\n                minn.B = 0;\n            }\n            #ifdef DEBUG\n            while (depth--) {\n                if (depth) {\n                    putchar(' ');\n                    putchar(' ');\n                } else {\n                    putchar('|');\n                    putchar('-');\n                }\n            }\n            printf(\"max{%d, %d, %d}, min{%d, %d, %d}.\\n\", maxx.R, maxx.G, maxx.B, minn.R, minn.G, minn.B);\n            #endif\n        }\n\n        int getMax()\n        {\n            return max(max(maxx.R, maxx.G), maxx.B);\n        }\n\n        int getMin()\n        {\n            return min(min(minn.R, minn.G), minn.B);\n        }\n    } *root;\n\n    int buildPos;\n    string tro;\n\n    void basic_dfsBuild(Tro_tree *fa)\n    {\n        // printf(\"[dfs %c]\", tro[buildPos]);\n        // Sleep(800);\n        switch (tro[buildPos]) {\n            case '2' :\n                buildPos++;\n                fa->lc = new Tro_tree();\n                basic_dfsBuild(fa->lc);\n                buildPos++;\n                fa->rc = new Tro_tree();\n                basic_dfsBuild(fa->rc);\n                break;\n            case '1' :\n                buildPos++;\n                fa->lc = new Tro_tree();\n                basic_dfsBuild(fa->lc);\n                break;\n            case '0' :\n                break;\n            default :\n                printf(\"ERR!\");\n                exit(EXIT_FAILURE);\n                break;\n        }\n        // backspace();\n        // backspace();\n        // backspace();\n        // backspace();\n        // backspace();\n        // backspace();\n        // backspace();\n        // Sleep(800);\n    }\n\n    void readIn()\n    {\n        cin >> tro;\n    }\n\n    void build()\n    {\n        buildPos = 0;\n        root = new Tro_tree();\n        basic_dfsBuild(root);\n        #ifdef DEBUG\n        putchar(10);\n        #endif\n    }\n    \n    void solve()\n    {\n        #ifdef DEBUG\n        root->pushup(0);\n        #else\n        root->pushup();\n        #endif\n        write(root->getMax(), 32);\n        write(root->getMin(), 10);\n    }\n} td;\n\nint main()\n{\n    td.readIn();\n    td.build();\n    td.solve();\n    return EXIT_SUCCESS;\n}\n```\n![](https://cdn.luogu.com.cn/upload/pic/40753.png)![](https://cdn.luogu.com.cn/upload/pic/40753.png)![](https://cdn.luogu.com.cn/upload/pic/40753.png)",
        "postTime": 1559481114,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "[*\u83b7\u5f97\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c*](https://www.lemir3.red/2019/11/29/Project2585-ZJOI2006-%E4%B8%89%E8%89%B2%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/)\n\n## \u9898\u76ee\u5206\u6790\n\n\u5148\u7528\u4e00\u4e2a\u9012\u5f52\u8f93\u5165\u6811.\n\n\u8bbe\u8ba1\u72b6\u6001$f_{i,1/2/3}$,\u8868\u793a\u5b50\u6811\u4ee5i\u4e3a\u6839,\u88ab\u67d3\u6210\u7ea2\u8272/\u7eff\u8272/\u84dd\u8272\u65f6\u7684\u6700\u5927\u503c,\u6700\u5c0f\u503c\u540c\u7406.\n\n\u6839\u636ei\u8282\u70b9\u7684\u513f\u5b50\u6570\u91cf\u8fdb\u884c\u8f6c\u79fb.\n\n## \u4ee3\u7801\n\n```cpp\n#include \"chtholly.h\"\n#define lxl long long\n#define R register\n#define INF 2147483647\n#define debug(x) printf(\"debug:%lld\\n\",x)\nusing namespace std;\nconst lxl maxn=500010;\nlxl cnt=1,ESize;\nlxl head[maxn],f[maxn][4],g[maxn][4],size[maxn];\nchar c;\nstruct _Edge\n{\n\tlxl to,next;\n}e[maxn<<1];\ninline lxl read() {char c=getchar(); lxl f=1,x=0; for(;!isdigit(c);c=getchar())(c=='-')&&(f=-1); for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48); return f*x; }\ninline void EdgeAdd(lxl from,lxl to) {e[ESize].to=to; e[ESize].next=head[from]; head[from]=ESize++; }\nvoid prework(lxl now,lxl ch)\n{\n\tsize[now]=ch;\n\tchar c_;\n\tfor(R lxl i=1;i<=ch;++i)\n\t{\n\t\tcin>>c_;\n\t\tEdgeAdd(now,++cnt);\n\t\tprework(cnt,c_-'0');\n\t}\n}\nvoid dfs(lxl from)\n{\n\tif(size[from]==0)\n\t{\n\t\tf[from][1]=0,g[from][1]=0;\n\t\tf[from][2]=0,g[from][2]=0;\n\t\tf[from][3]=1,g[from][3]=1;\n\t}\n\tif(size[from]==1)\n\t{\n\t\tlxl to=e[head[from]].to;\n\t\tdfs(to);\n\t\tf[from][1]=max(f[to][2],f[to][3]);\n\t\tf[from][2]=max(f[to][1],f[to][3]);\n\t\tf[from][3]=max(f[to][1],f[to][2])+1;\n\t\tg[from][1]=min(g[to][2],g[to][3]);\n\t\tg[from][2]=min(g[to][1],g[to][3]);\n\t\tg[from][3]=min(g[to][1],g[to][2])+1;\n\t}\n\tif(size[from]==2)\n\t{\n\t\tlxl to1=e[head[from]].to,to2=e[e[head[from]].next].to;\n\t\tdfs(to1),dfs(to2);\n\t\tf[from][1]=max(f[to1][2]+f[to2][3],f[to1][3]+f[to2][2]);\n\t\tf[from][2]=max(f[to1][1]+f[to2][3],f[to1][3]+f[to2][1]);\n\t\tf[from][3]=max(f[to1][1]+f[to2][2],f[to1][2]+f[to2][1])+1;\n\t\tg[from][1]=min(g[to1][2]+g[to2][3],g[to1][3]+g[to2][2]);\n\t\tg[from][2]=min(g[to1][1]+g[to2][3],g[to1][3]+g[to2][1]);\n\t\tg[from][3]=min(g[to1][1]+g[to2][2],g[to1][2]+g[to2][1])+1;\n\t}\n}\nint main(void)\n{\n\tmemset(head,-1,sizeof(head)),memset(g,0x3f,sizeof(g));\n\tcin>>c;\n\tprework(1,c-'0');\n\tdfs(1);\n\tprintf(\"%lld %lld\\n\",max(f[1][1],max(f[1][2],f[1][3])),min(g[1][1],min(g[1][2],g[1][3])));\n\treturn 0;\n}\n```",
        "postTime": 1575034007,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u6765\u770b\u5982\u4f55\u5c06\u9898\u76ee\u7ed9\u7684\u4e8c\u53c9\u6811\u5e8f\u5217**S\u8f6c\u5316\u6210\u4e00\u9897\u4e8c\u53c9\u6811**,\u6211\u4eec\u77e5\u9053\u5e8f\u5217\u4e2d\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u770b\u4f5c\u662f**i\u8282\u70b9\u7684\u5b50\u6811\u6570\u91cf**,\u5e8f\u5217\u540e\u9762\u7684\u8282\u70b9\u7684\u7236\u4eb2\u5728\u524d\u9762,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528**\u6808**\u6765\u5b58\u7236\u4eb2(\u5982\u679c\u6709\u4e24\u4e2a\u5b50\u6811\u5c31\u5b58\u4e24\u6b21),\u7136\u540e\u540e\u9762\u7684\u8282\u70b9\u7684\u7236\u4eb2\u5c31\u662f\u6808\u9876\u5143\u7d20,**\u8bb0\u5f55\u7236\u4eb2,\u7136\u540e\u5f39\u51fa\u6808\u9876\u5143\u7d20**,\u5c31\u53ef\u4ee5\u4e86\n\n\u8be6\u60c5\u770b\u4ee3\u7801\n\n```cpp\nint ph(int x,int y){while(y--) sk[++top]=x;}//\u81ea\u5df1\u5199\u7684push\nint tp(){return sk[top];}//top\nint pp(){top--;}//pop\n/*\u4e0a\u65b9\u4e3a\u6240\u9700\u8981\u7684\u51fd\u6570*/\nph(1,s[0]-'0');\nn=1;\nfor(int i=2;i<=s.size();i++)\n{\n    fa[++n]=tp();\n    pp();\t\n    ph(n,si-'0');\n}\n```\n\n\u666e\u901a\u641c\u7d22\u80af\u5b9a\u662f\u4f1a\u7206\u7684,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528~~\u4e07\u80fd\u7684~~\u8bb0\u5fc6\u5316\u6765\u4f18\u5316\u4e00\u4e0b,\u73b0\u5728\u8bb2\u5982\u4f55\u8bb0\u5fc6\u5316,\u6211\u4eec\u5148\u53ea**\u8003\u8651\u6700\u5927\u503c**\n\n\u7528$f[i][j]$\u8868\u793a**i\u8282\u70b9\u67d3\u6210j\u8272**(\u5176\u4e2d1\u8272\u4e3a\u7eff,2\u7ea2,3\u84dd)\u65f6**\u5b83\u7684\u5b50\u6811**\u6700\u591a\u6709\u51e0\u4e2a1\u8272,\u521d\u59cb\u5316\u4e3a-1\n\n\u6240\u4ee5\u6211\u4eec\u7b2c\u4e00\u6b65\u5c31\u662f\u679a\u4e3e\u70b91(\u6839)\u7684\u989c\u8272,\u7136\u540e\u8fdb\u884c\u641c\u7d22,\u5728\u4e09\u79cd\u989c\u8272\u7684\u641c\u7d22\u7ed3\u679c\u4e2d\u53d6\u6700\u5927\u503c\u5c31ok\u4e86(\u5f53\u7136\u5982\u679c\u679a\u4e3e1\u4e3a\u7eff\u8272\u8981\u5728\u7eff\u8272\u7684\u641c\u7d22\u7ed3\u679c\u800c\u5916\u52a0\u4e00,\u56e0\u4e3a$f[i][j]$\u8868\u793a\u5176**\u5b50\u6811**\u6700\u591a\u6709\u51e0\u4e2a1\u8272)\n\n\u6ce8\u610f,\u56e0\u4e3a\u8fd9\u4e2a\u8bb0\u5fc6\u5316\u641c\u7d22\u662f\u53d6\u6700\u503c,\u6240\u4ee5\u51fd\u6570\u5185\u7684\u8ba1\u6570\u5668\u6bcf\u6b21\u679a\u4e3e\u540e\u8981**\u8fd8\u539f**(\u8be6\u60c5\u770b\u4ee3\u7801)\n\n\u7136\u540e\u6211\u4eec\u770b\u641c\u7d22\u7684\u51fd\u6570\n\n```cpp\nint dfs(int x,int c)//x\u4e3a\u6240\u5728\u8282\u70b9,c\u4e3a\u8282\u70b9\u989c\u8272\n{\n\tif(f[x][c]>=0) return f[x][c];//\u5982\u679c\u5df2\u641c\u8fc7\u76f4\u63a5\u8fd4\u56de\n\tint b=0;//\u8ba1\u6570\u5668\n    //sn[i][k]\u4e3ai\u7684\u7b2ck\u4e2a\u513f\u5b50,sn[i][0]\u513f\u5b50\u6570\n\tif(sn[x][0]==2)//\u6709\u4e24\u4e2a\u5b50\u6811\n\t{\n\t\t\n\t\tfor(int j=1;j<=3;j++)\n\t\t{\n\t\t\tif(j==c) continue;//\u4e0d\u80fd\u540c\u8272\n\t\t\tb+=dfs(sn[x][1],j);\n\t\t\tfor(int k=1;k<=3;k++)//\u4e24\u68f5\u5b50\u6811,\u4e24\u6b21\u679a\u4e3e\n\t\t\t{\n\t\t\t    int q=0;\n\t\t\t\tif(k==j||k==c) continue;//\u4e0d\u80fd\u540c\u8272\n\t\t\t\tif(j==1||k==1) q++;//\u540c\u679a\u4e3e1\u989c\u8272\u65f6\u7684\u60c5\u51b5,\u5982\u679c\u4e24\u4e2a\u5b50\u6811\u672c\u8eab\u4e3alv\u8981\u52a0\u4e00\n\t\t\t\tb+=dfs(sn[x][2],k)+q;//b\u52a0\u4e0aq\u548cx\u5b50\u6811\u7684\u5b50\u6811\u6700\u591a\u6709\u51e0\u4e2a\u7eff(\u5373\u7ee7\u7eed\u5411\u5b50\u6811\u641c\u5c31\u7ed3\u679c)\n\t\t\t\tf[x][c]=max(f[x][c],b);\n\t\t\t\tb-=dfs(sn[x][2],k)+q;//\u7531\u4e8e\u662f\u53d6\u6700\u503c\u6240\u4ee5\u8981\u8fd8\u539f\n\t\t\t}\n\t\t\tb-=dfs(sn[x][1],j);//\u8fd8\u539f\n\t\t}\n\t}\n\tif(sn[x][0]==1)//\u4e00\u68f5\u5b50\u6811\n\t{\n\t\tfor(int j=1;j<=3;j++)//\u679a\u4e3e\n\t\t{\n\t\t    int q=0;\n\t\t\tif(j==c) continue;//\u540c\u4e0a\n\t\t\tif(j==1) q++;//\u540c\u4e0a\n\t\t\tb+=dfs(sn[x][1],j)+q;\n\t\t\tf[x][c]=max(f[x][c],b);\n\t\t\tb-=dfs(sn[x][1],j)+q;//\u8fd8\u539f\n\t\t}\t\n\t}\n\tf[x][c]=max(f[x][c],0);//\u7531\u4e8e\u53ef\u80fd\u5b50\u6811\u4e3a0,f[x][c]\u7684\u503c\u4e3a\u521d\u59cb\u503c-1,\u8fd9\u91cc\u5c06\u4ed6\u5316\u4e3a0\n\treturn f[x][c];//\u8fd4\u56de\n}\n```\n\n\n\u5bf9\u4e8e\u53d6\u6700\u5c0f\u503c\u5199\u4e00\u4e2a**\u53cd\u8fc7\u6765\u7684\u7c7b\u4f3c\u51fd\u6570**\u5c31\u53ef\u4ee5\u4e86,f[i][j]\u521d\u59cb\u5316\u4e3a\u6781\u5927\u503c(\u4ee3\u7801\u4e2d\u4e3a0x3f3f3f3f)\n\n\u8fd9\u9898\u7ec6\u8282\u8f83\u591a,**\u6ce8\u610f\u7ec6\u8282**\n\n\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,f[500005][5],maxn,minn,fa[500005],sn[500005][5],f1[500005][5];//f1\u4e3a\u6c42\u6700\u5c0f\u503c\u7528,sn[i][k]\u4e3ai\u7684\u7b2ck\u4e2a\u513f\u5b50,sn[i][0]\u513f\u5b50\u6570\nstring s;\n#define si s[i-1]\nint sk[500005],top;\nint ph(int x,int y){while(y--) sk[++top]=x;}\nint tp(){return sk[top];}\nint pp(){top--;}\nint dfs(int x,int c)\n{\n\tif(f[x][c]>=0) return f[x][c];\n\tint b=0;\n\tif(sn[x][0]==2)\n\t{\n\t\t\n\t\tfor(int j=1;j<=3;j++)\n\t\t{\n\t\t\tif(j==c) continue;\n\t\t\tb+=dfs(sn[x][1],j);\n\t\t\tfor(int k=1;k<=3;k++)\n\t\t\t{\n\t\t\t    int q=0;\n\t\t\t\tif(k==j||k==c) continue;\n\t\t\t\tif(j==1||k==1) q++;\n\t\t\t\tb+=dfs(sn[x][2],k)+q;\n\t\t\t\tf[x][c]=max(f[x][c],b);\n\t\t\t\tb-=dfs(sn[x][2],k)+q;\n\t\t\t}\n\t\t\tb-=dfs(sn[x][1],j);\n\t\t}\n\t}\n\tif(sn[x][0]==1)\n\t{\n\t\t\n\t\tfor(int j=1;j<=3;j++)\n\t\t{\n\t\t    int q=0;\n\t\t\tif(j==c) continue;\n\t\t\tif(j==1) q++;\n\t\t\tb+=dfs(sn[x][1],j)+q;\n\t\t\tf[x][c]=max(f[x][c],b);\n\t\t\tb-=dfs(sn[x][1],j)+q;\n\t\t}\t\n\t}\n\tf[x][c]=max(f[x][c],0);\n\treturn f[x][c];\n}\nint dfs1(int x,int c)\n{\n\tif(f1[x][c]<=0x3f3f3f3f-10000) return f1[x][c];//\u5982\u679c\u5c0f\u4e8e\u521d\u59cb\u5316\u503c\u8bf4\u660e\u5df2\u7ecf\u641c\u8fc7\u76f4\u63a5\u8fd4\u56de\n\tint b=0;\n\tif(sn[x][0]==2)\n\t{\n\t\t\n\t\tfor(int j=1;j<=3;j++)\n\t\t{\n\t\t\tif(j==c) continue;\n\t\t\tb+=dfs1(sn[x][1],j);\n\t\t\tfor(int k=1;k<=3;k++)\n\t\t\t{\n\t\t\t    int q=0;\n\t\t\t\tif(k==j||k==c) continue;\n\t\t\t\tif(j==1||k==1) q++;\n\t\t\t\tb+=dfs1(sn[x][2],k)+q;\n\t\t\t\tf1[x][c]=min(f1[x][c],b);\n\t\t\t\tb-=dfs1(sn[x][2],k)+q;\n\t\t\t}\n\t\t\tb-=dfs1(sn[x][1],j);\n\t\t}\n\t}\n\tif(sn[x][0]==1)\n\t{\t\n\t\tfor(int j=1;j<=3;j++)\n\t\t{\n\t\t    int q=0;\n\t\t\tif(j==c) continue;\n\t\t\tif(j==1) q++;\n\t\t\tb+=dfs1(sn[x][1],j)+q;\n\t\t\tf1[x][c]=min(f1[x][c],b);\n\t\t\tb-=dfs1(sn[x][1],j)+q;\n\t\t}\t\n\t}\n\tif(sn[x][0]==0) f1[x][c]=0;\n\treturn f1[x][c];\n}\nint main()\n{\n\tmemset(f,-1,sizeof(f));memset(f1,0x3f,sizeof(f1));//\u521d\u59cb\u5316\n\tcin>>s;\n\tph(1,s[0]-'0');\n\tn=1;\n\tfor(int i=2;i<=s.size();i++)\n\t{\n\t    fa[++n]=tp();//\u627e\u7238\u7238\n\t\tpp();\t\n\t\tph(n,si-'0');\n\t}\n\tfor(int i=2;i<=n;i++) sn[fa[i]][++sn[fa[i]][0]]=i;//\u627e\u513f\u5b50\n\tminn=0x3f3f3f3f;\n\tfor(int i=1;i<=3;i++)\n\t{\n\t\tif(i==1) maxn=max(maxn,dfs(1,i)+1);//\u5982\u679c1\u4e3a\u7eff\u8272\u989d\u5916\u52a0\u4e00\n\t\telse maxn=max(maxn,dfs(1,i));\n\t}\n\tfor(int i=1;i<=3;i++)//\u6c42\u6700\u5c0f\u503c\n\t{\n\t\tif(i==1) minn=min(minn,dfs1(1,i)+1);\n\t\telse minn=min(minn,dfs1(1,i));\n\t}\n\tprintf(\"%d %d\",maxn,minn);//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1584612689,
        "uid": 199270,
        "name": "Y_B_Y",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "> \u672c\u9898\u89e3\u9996\u53d1\u4e8e<https://ctj12461.netlify.com/2019/837e6775>\n\n\u8fd9\u662f\u4e00\u9053\u6811\u5f62`DP`\u7684\u9898\u3002\n\n# \u7b97\u6cd5\u5206\u6790\n\n\u9996\u5148\uff0c\u6211\u4eec\u7684`DP`\u8fc7\u7a0b\u662f\u57fa\u4e8e\u6811\u7684\uff0c\u6240\u4ee5\u5c31\u8981\u5148\u5efa\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u63a5\u7740\uff0c\u6211\u4eec\u8bbe\u72b6\u6001$ f_{i,j} $\uff0c\u8868\u793a\u5728\u7b2c$ i $\u4e2a\u7ed3\u70b9\u65f6\uff0c\u5c06\u989c\u8272\u6d82\u4e3a$ j $\u7684\u6700\u591a\u7684\u767d\u8272\u7ed3\u70b9\u6570\u3002\u56e0\u4e3a\u7236\u7ed3\u70b9\u4e0d\u80fd\u4e0e\u5b69\u5b50\u7ed3\u70b9\u7684\u989c\u8272\u76f8\u540c\uff0c\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u7684\u989c\u8272\u4e5f\u4e0d\u80fd\u76f8\u540c\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$ f_{i,j}=max_{k,l \\in children\\{i\\}}\\{f_{k,x}+f_{l,y}\\} (j \\neq x \\neq y) $$\n\u8fd9\u91cc$ k,l $\u662f$ i $\u7684\u5b50\u7ed3\u70b9\uff0c$ x,y $\u662f\u53ef\u80fd\u7684\u989c\u8272\uff0c\u540c\u65f6\uff0c\u5b69\u5b50\u7ed3\u70b9\u7684\u989c\u8272\u6709\u4e24\u79cd\u53ef\u80fd\u3002\u5982\u679c$ j = white $\uff0c$ f_{i,j} $\u7684\u521d\u59cb\u503c\u5e94\u8bbe\u4e3a$ 1 $\u3002\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int none = 0;\nconst int red = 1;\nconst int yellow = 2;\nconst int white = 3;\n\nstruct node {\n    int children[3];\n};\n\nnode tree[500101];\nint fx[500101][4];\nint fn[500101][4];\nchar c[500101];\n\nvoid dp(int x) { // \u8bb0\u5fc6\u5316\u641c\u7d22\n    fx[x][red] = 0;\n    fx[x][yellow] = 0;\n    fx[x][white] = 1; // \u5bf9\u4e8e\u767d\u8272\u7ed3\u70b9\u8981\u591a\u52a01\n    fn[x][red] = 0;\n    fn[x][yellow] = 0;\n    fn[x][white] = 1;\n    for (int i = 1; i <= 2; i++) {\n        if (tree[x].children[i] == 0)\n            continue;\n        dp(tree[x].children[i]);\n    }\n    int lc = tree[x].children[1];\n    int rc = tree[x].children[2];\n    fx[x][white] += max(fx[lc][red] + fx[rc][yellow], fx[rc][red] + fx[lc][yellow]);\n    fx[x][red] += max(fx[lc][white] + fx[rc][yellow], fx[rc][white] + fx[lc][yellow]);\n    fx[x][yellow] += max(fx[lc][white] + fx[rc][red], fx[rc][white] + fx[lc][red]);\n    fn[x][white] += min(fn[lc][red] + fn[rc][yellow], fn[rc][red] + fn[lc][yellow]);\n    fn[x][red] += min(fn[lc][white] + fn[rc][yellow], fn[rc][white] + fn[lc][yellow]);\n    fn[x][yellow] += min(fn[lc][white] + fn[rc][red], fn[rc][white] + fn[lc][red]);\n}\n\nint it = 0;\n\nvoid make() {\n    int tmp = ++it; // \u4fdd\u5b58\u5f53\u524d\u7ed3\u70b9\u7684\u7f16\u53f7\n    if (c[tmp] == '1') {\n        tree[tmp].children[1] = it + 1;\n        make();\n        return;\n    }\n    if (c[tmp] == '2') {\n        tree[tmp].children[1] = it + 1;\n        make();\n        tree[tmp].children[2] = it + 1;\n        make();\n        return;\n    }\n}\n\nint main() {\n    scanf(\"%s\", c + 1);\n    int len = strlen(c + 1);\n    make();\n    dp(1);\n    printf(\"%d \", max(max(fx[1][red], fx[1][yellow]), fx[1][white]));\n    printf(\"%d \", min(min(fn[1][red], fn[1][yellow]), fn[1][white]));\n    return 0;\n}\n```\n\n",
        "postTime": 1564491271,
        "uid": 219538,
        "name": "ctj12461",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011\u4e09\u8272\u4e8c\u53c9\u6811"
    },
    {
        "content": "\u597d\u6fc0\u52a8\uff0c\u6781\u5c11\u6570\u81ea\u5df1\u60f3\u51fa\u6765\u3001\u4e00\u904d\u8fc7\u7684DP\u9898\u3002\u3002\uff08\u6211\u592a\u83dc\u4e86\uff09\n\u9996\u5148DFS\u5efa\u6811\uff0c\u8bb0\u5f55\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff0c\u8fd9\u4e2a\u4e0d\u591a\u8bb2\u3002\n\u7136\u540e\u4ee5\u6c42\u6700\u5927\u503c\u4e3a\u4f8b\uff08\u6c42\u6700\u5c0f\u503c\u628amax\u6539\u6210min\u5c31\u884c\u4e86\uff09\n\u7528dp[i][j]\u8868\u793a\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u989c\u8272\u4e3aj\u7684\u60c5\u51b5\u4e0b\u67d3\u7eff\u8272\u7684\u6700\u591a\u8282\u70b9\u6570\uff081\u8868\u793a\u7eff\u8272\uff0c2\u30013\u8868\u793a\u7ea2\u3001\u84dd\uff0c\u987a\u5e8f\u65e0\u6240\u8c13\uff09\n\u679a\u4e3eJ\n\u8bbea,b\u4e3a\u53e6\u5916\u4e24\u79cd\u989c\u8272\uff08\u4f8b\u5982j=1\u65f6,a=2,b=3;j=2,a=1,b=3\uff09\n\u90a3\u4e48\u4e24\u79cd\u60c5\u51b5\n\u2460\u53ea\u6709\u5de6\u513f\u5b50\uff0cdp[i][j]=max(dp[l[i]][a],dp[r[i]][b]);\n\u2461\u67092\u4e2a\u513f\u5b50\uff0cdp[i][j]=max(dp[l[i]][a]+dp[r[i]][b],dp[l[i]][b]+dp[r[i]][a]);\nJ=1\uff0c\u90a3\u4e48\u81ea\u5df1\u672c\u8eab\u5c31\u662f\u7eff\u8272\uff0c\u6240\u4ee5+1.\n\u6ca1\u6709\u513f\u5b50\u5c31\u4e0d\u7ba1\u3002\n\u6700\u540e\u8f93\u51famax(dp[1][1],dp[1][2],dp[1][3])\u5373\u53ef\u3002\n\u7ed9\u51fa\u5197\u957f\u7684\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <stack>\n#include <list>\n#define rep(i,m,n) for(int i=m;i<=n;++i)\n#define dop(i,m,n) for(int i=m;i>=n;--i)\n#define lowbit(x) (x&(-x))\n#define ll long long\n#define INF 2147483647\n#define re register\nusing namespace std;\n//                  _ \n//made by Qihoo360 |C|\n//                  \u02c9 \ninline int read(){\n    int s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\nconst int maxn=500010;\nint id=1,l[maxn],r[maxn],dp[maxn][4],superdp[maxn][4];\nint getnum(){\n\treturn getchar()-'0';\n}\nvoid build_tree(int root){\n    int tmp=getnum();\n    if(tmp>=1) l[root]=++id,build_tree(id);\n    if(tmp==2) r[root]=++id,build_tree(id);\n}\nvoid DP(int u){\n    if(!l[u]&&!r[u]){\n      dp[u][1]=1;\n      return;\n    }\n    int a,b;\n    if(l[u]) DP(l[u]);\n    if(r[u]) DP(r[u]);\n    rep(i,1,3){\n\t   if(i==1) a=2,b=3;\n       if(i==2) a=1,b=3;\n       if(i==3) a=1,b=2;\n       if(l[u]&&!r[u]){\n         dp[u][i]+=max(dp[l[u]][a],dp[l[u]][b]);\n         if(i==1) dp[u][i]++;\n       }\n       else if(l[u]){\n\t     dp[u][i]+=max(dp[l[u]][a]+dp[r[u]][b],dp[l[u]][b]+dp[r[u]][a]);\n         if(i==1) dp[u][i]++;\n\t   }\n    }\n}\nvoid SuperDP(int u){\n    if(!l[u]&&!r[u]){\n      superdp[u][1]=1;\n      return;\n    }\n    int a,b;\n    if(l[u]) SuperDP(l[u]);\n    if(r[u]) SuperDP(r[u]);\n    rep(i,1,3){\n\t   if(i==1) a=2,b=3;\n       if(i==2) a=1,b=3;\n       if(i==3) a=1,b=2;\n       if(l[u]&&!r[u]){\n         superdp[u][i]+=min(superdp[l[u]][a],superdp[l[u]][b]);\n         if(i==1) superdp[u][i]++;\n       }\n       else if(l[u]){\n\t     superdp[u][i]+=min(superdp[l[u]][a]+superdp[r[u]][b],superdp[l[u]][b]+superdp[r[u]][a]);\n         if(i==1) superdp[u][i]++;\n\t   }\n    }\n}\nint main(){\n\tbuild_tree(1);\n\tDP(1);\n\tSuperDP(1);\n\tprintf(\"%d %d\\n\",max(max(dp[1][1],dp[1][2]),dp[1][3]),min(min(superdp[1][1],superdp[1][2]),superdp[1][3]));\n\treturn 0;\n}\n\n```",
        "postTime": 1520087551,
        "uid": 61834,
        "name": "Huami360",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6b64\u9898\u6211\u7528\u4e86\u4e00\u4e2a\u5341\u5206\u66b4\u529b\u4e14\u75af\u72c2\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5f006\u4e2a\u8bb0\u641c\u7684dfs\uff1a\u8282\u70b9\u9009\u7ea2\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5c0f\u503cminr\uff0c\u8282\u70b9\u9009\u7ea2\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u503cmaxr\uff0c\u8282\u70b9\u9009\u84dd\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5c0f\u503cminb\uff0c\u8282\u70b9\u9009\u84dd\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u503cmaxb\uff0c\u8282\u70b9\u9009\u7eff\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5c0f\u503cming\uff0c\u8282\u70b9\u9009\u7eff\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u503cmaxg\u3002\u5e76\u4e14\u8bb0\u641c\u65f6\u5bf9\u8fd9\u4e2a\u70b9\u7684\u5b69\u5b50\u7684\u989c\u8272\u8fdb\u884c\u8ba8\u8bba\uff0c\u6211\u4eec\u4ee5\u4e00\u68f5\u201c200\u201d\u4e8c\u53c9\u6811\u9009\u6700\u5927\u503c\u4e3a\u4f8b\uff08\u4e00\u4e2a\u6839\u8282\u70b9\u4e24\u4e2a\u5b69\u5b50\uff09\uff1a\u9996\u5148\u6211\u4eec\u8ba8\u8bba\u6839\u8282\u70b9\u53d6\u7eff\u7684\u60c5\u51b5\uff0c\u6c42\u8fd9\u4e2a\u6839\u8282\u70b9\u7684maxg\uff1a\u5f88\u663e\u7136\u8fd9\u4e2a\u8282\u70b9\u9009\u4e86\u7eff\u90a3\u4e48\u5b69\u5b50\u53ea\u80fd\u9009\u84dd\u6216\u7ea2\uff0c\u90a3\u4e48\u5c31\u518d\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\u5de6\u84dd\u53f3\u7ea2\u4e0e\u5de6\u7ea2\u53f3\u84dd\uff0c\u90a3\u4e48\u5c31\u5206\u522b\u6c42\u51fa\u4ed6\u4eec\u7684maxb\u548cmaxr\uff0c\u770b\u54ea\u79cd\u7ec4\u5408\u7684\u548c\u6700\u5927\uff0c\u6700\u7ec8\u628a\u6700\u5927\u7684\u548c\u52a0\u4e0a\u4e00\uff08\u56e0\u4e3a\u6839\u7ed3\u70b9\u9009\u4e86\u7eff\uff0c\u81ea\u5df1\u8981\u7b97\u4e0a\uff09\u5c31\u662f\u6839\u8282\u70b9\u7684maxg\u3002\u540c\u7406\uff0c\u5176\u4ed6\u51e0\u4e2adfs\u4e5f\u80fd\u8fd9\u6837\u4e0d\u65ad\u5730\u5206\u60c5\u51b5\u8ba8\u8bba\u3002\u8fd9\u4e2a\u65b9\u6cd5\u770b\u4f3c\u66b4\u529b\uff0c\u4e0d\u8fc7\u6bd5\u7adf\u7528\u4e86\u8bb0\u641c\uff0c\u4f1a\u7701\u6389\u4e0d\u5c11\u65f6\u95f4\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    using namespace std;\n    typedef struct _n{\n        int number;  //\u8282\u70b9\u7f16\u53f7\n        _n* left;    //\u5de6\u5b69\u5b50\n        _n* right;   //\u53f3\u5b69\u5b50\n    }node;   //\u8282\u70b9\n    int reddfs(node* tree);\n    int bluedfs(node* tree);\n    int greendfs(node* tree);   //3\u4e2a\u6c42\u6700\u5927\u503c\u7684dfs\n    int mreddfs(node* tree);\n    int mgreendfs(node* tree);\n    int mbluedfs(node* tree);   //3\u4e2a\u6c42\u6700\u5c0f\u503c\u7684dfs\n    int fmaxgreen[500001];\n    unsigned char bg[500001];\n    int fmaxred[500001];\n    unsigned char br[500001];\n    int fmaxblue[500001];\n    unsigned char bb[500001];\n    int fmingreen[500001];\n    unsigned char mbg[500001];\n    int fminred[500001];\n    unsigned char mbr[500001];\n    int fminblue[500001];\n    unsigned char mbb[500001];    //\u4ee5\u4e0a12\u4e2a\u6570\u7ec4\u8bb0\u5f55\u641c\u7d22\u7ed3\u679c\n    int reddfs(node* tree){//\u7528\u4e8e\u6c42\u8282\u70b9\u9009\u7ea2\u65f6\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u503c\n    //\u8fd9\u91cc\u5c31\u4ee5\u8fd9\u4e00\u4e2adfs\u4e3a\u4f8b\uff0c\u5176\u4ed65\u4e2adfs\u7684\u539f\u7406\u4e0e\u6b64\u76f8\u540c\n        if(br[tree->number]){\n            return(fmaxred[tree->number]);\n            //\u641c\u8fc7\u5c31\u76f4\u63a5\u8fd4\u56de\u8bb0\u5fc6\u7684\u7ed3\u679c\n        }\n        br[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){//\u6709\u4e24\u4e2a\u5b69\u5b50\n        //\u56e0\u4e3a\u7236\u4eb2\u9009\u4e86\u7ea2\uff0c\u6240\u4ee5\u5b69\u5b50\u53ea\u80fd\u9009\u7eff\u6216\u84dd\n            int a=greendfs(tree->right);\n            int b=bluedfs(tree->left);\n            //\u8ba8\u8bba\u5de6\u84dd\u53f3\u7eff\u7684\u60c5\u51b5\n            int c=greendfs(tree->left);\n            int d=bluedfs(tree->right);\n            //\u8ba8\u8bba\u5de6\u7eff\u53f3\u84dd\u7684\u60c5\u51b5\n            sum=max(a+b,c+d);//\u53d6\u4e24\u79cd\u60c5\u51b5\u7684\u6700\u5927\u503c\n        }\n        else{\n            if(tree->left!=NULL){//\u6709\u4e00\u4e2a\u5b69\u5b50\n                int a=greendfs(tree->left);\n                //\u8ba8\u8bba\u8fd9\u4e2a\u5b69\u5b50\u4e3a\u7eff\u7684\u60c5\u51b5\n                int b=bluedfs(tree->left);\n                //\u8ba8\u8bba\u8fd9\u4e2a\u5b69\u5b50\u4e3a\u84dd\u7684\u60c5\u51b5\n                sum=max(a,b);//\u53d6\u4e24\u79cd\u60c5\u51b5\u7684\u6700\u5927\u503c\n```\n}//\u8981\u662f\u6ca1\u6709\u5b69\u5b50\u7684\u8bdd\u5c31\u4e0d\u7528\u8ba8\u8bba\u4e86\n```cpp\n        }\n        fmaxred[tree->number]=sum;//\u8bb0\u5f55\u7ed3\u679c\n        return(sum);\n    }\n    int bluedfs(node* tree){\n        if(bb[tree->number]){\n            return(fmaxblue[tree->number]);\n        }\n        bb[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){\n            int a=greendfs(tree->right);\n            int b=reddfs(tree->left);\n            int c=greendfs(tree->left);\n            int d=reddfs(tree->right);\n            sum=max(a+b,c+d);\n        }\n        else{\n            if(tree->left!=NULL){\n                int a=greendfs(tree->left);\n                int b=reddfs(tree->left);\n                sum=max(a,b);\n            }\n        }\n        fmaxblue[tree->number]=sum;\n        return(sum);\n    }\n    int greendfs(node* tree){\n        if(bg[tree->number]){\n            return(fmaxgreen[tree->number]);\n        }\n        bg[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){\n            int a=bluedfs(tree->right);\n            int b=reddfs(tree->left);\n            int c=bluedfs(tree->left);\n            int d=reddfs(tree->right);\n            sum=max(a+b,c+d);\n        }\n        else{\n            if(tree->left!=NULL){\n                int a=bluedfs(tree->left);\n                int b=reddfs(tree->left);\n                sum=max(a,b);\n            }\n        }\n        fmaxgreen[tree->number]=sum+1;//\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u56e0\u4e3a\u6839\u7ed3\u70b9\u9009\u4e86\u7eff\uff0c\u6240\u4ee5\u5728\u7ed3\u679c\u4e2d\u8981\u7b97\u4e0a\u6839\u8282\u70b9\u7684\u7eff\u8272\uff0c\u5373sum+1\n        return(sum+1);\n    }\n    int mreddfs(node* tree){\n        if(mbr[tree->number]){\n            return(fminred[tree->number]);\n        }\n        mbr[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){\n            int a=mgreendfs(tree->right);\n            int b=mbluedfs(tree->left);\n            int c=mgreendfs(tree->left);\n            int d=mbluedfs(tree->right);\n            sum=min(a+b,c+d);\n        }\n        else{\n            if(tree->left!=NULL){\n                int a=mgreendfs(tree->left);\n                int b=mbluedfs(tree->left);\n                sum=min(a,b);\n            }\n        }\n        fminred[tree->number]=sum;\n        return(sum);\n    }\n    int mbluedfs(node* tree){\n        if(mbb[tree->number]){\n            return(fminblue[tree->number]);\n        }\n        mbb[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){\n            int a=mgreendfs(tree->right);\n            int b=mreddfs(tree->left);\n            int c=mgreendfs(tree->left);\n            int d=mreddfs(tree->right);\n            sum=min(a+b,c+d);\n        }\n        else{\n            if(tree->left!=NULL){\n                int a=mgreendfs(tree->left);\n                int b=mreddfs(tree->left);\n                sum=min(a,b);\n            }\n        }\n        fminblue[tree->number]=sum;\n        return(sum);\n    }\n    int mgreendfs(node* tree){\n        if(mbg[tree->number]){\n            return(fmingreen[tree->number]);\n        }\n        mbg[tree->number]=1;\n        int sum=0;\n        if(tree->right!=NULL){\n            int a=mbluedfs(tree->right);\n            int b=mreddfs(tree->left);\n            int c=mbluedfs(tree->left);\n            int d=mreddfs(tree->right);\n            sum=min(a+b,c+d);\n        }\n        else{\n            if(tree->left!=NULL){\n                int a=mbluedfs(tree->left);\n                int b=mreddfs(tree->left);\n                sum=min(a,b);\n            }\n        }\n        fmingreen[tree->number]=sum+1;\n        return(sum+1);\n    }\n    int numbert=0;     //\u8fd9\u68f5\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u5168\u5c40\u7f16\u53f7\n    node* build(){     //\u9012\u5f52\u8bfb\u5165\u5e76\u6784\u9020\u4e8c\u53c9\u6811\n        char c;\n        cin>>c;\n        if(c=='0'){    //\u53f6\u5b50\n            node* leaf=new node;\n            leaf->number=numbert;\n            numbert++;\n            leaf->left=NULL;\n            leaf->right=NULL;\n            return(leaf);\n        }\n        if(c=='1'){    //\u6709\u4e00\u4e2a\u5b69\u5b50\n            node* tree=new node;\n            tree->number=numbert;\n            numbert++;\n            tree->left=build();\n            tree->right=NULL;\n            return(tree);\n        }\n        if(c=='2'){     //\u6709\u4e24\u4e2a\u5b69\u5b50\n            node* tree=new node;\n            tree->number=numbert;\n            numbert++;\n            tree->left=build();\n            tree->right=build();\n            return(tree);\n        }\n    }\n    int main(){\n        node* tree=build();//\u8bfb\u5165\u5e76\u6784\u9020\u4e8c\u53c9\u6811\n        int a=greendfs(tree);\n        int b=reddfs(tree);\n        int c=bluedfs(tree);//\u5728\u6839\u8282\u70b9\u5904\u8ba8\u8bba\u4ed6\u9009\u54ea\u79cd\u989c\u8272\u7684\u60c5\u51b5\n        cout<<max(a,max(b,c))<<\" \";//\u53d6\u4e09\u79cd\u60c5\u51b5\u7684\u6700\u5927\u503c\n        a=mgreendfs(tree);\n        b=mreddfs(tree);\n        c=mbluedfs(tree);\n        cout<<min(a,min(b,c))<<endl;//\u53d6\u4e09\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\n        return(0);\n}\n```",
        "postTime": 1513429312,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "## \u65b9\u6cd5\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u6765\u53d1\u4e00\u6ce2\u9898\u89e3\u3002\n\n\u611f\u89c9\u8fd9\u9053\u9898\u5176\u5b9e\u633a\u4e0d\u9519\u7684\uff0c\u4e3b\u8981\u8003\u5bdf\u4e00\u4e0b\u601d\u7ef4\u3002\n\n\u9996\u5148\u6211\u6ca1\u6709\u5efa\u56fe\uff08\u9898\u89e3\u5f88\u591a\u662f\u5efa\u4e86\u56fe\u7136\u540e\u8dd1\u7684\uff0c\u5176\u5b9e\u4e0d\u7528\uff09\n\n## dp\u65b9\u7a0b\n\n\u770b\u5230\u9898\u9762\u5f88\u5bb9\u6613\u60f3\u5230\u65b9\u7a0b\uff0c\u8003\u8651f[i][1/2/3]\u4e3ai\u53f7\u8282\u70b9\u989c\u8272\u4e3a1,2,3\u7684\u65f6\u5019\u5b50\u6811\u6700\u5927\u80fd\u6d82\u6210\u7eff\u8272\u7684\u4e2a\u6570\uff08\u5176\u4e2d3\u4e3a\u7eff\u8272\uff09\n\n\uff08\u8fd9\u91cc\u7ed9\u51fa\u6700\u5927\u7684\u4e2a\u6570\uff0c\u5b50\u8282\u70b9\u4e3a1\u7684\u60c5\u51b5\uff09\n\n$f[father][1]=max(f[i][2],f[i][3])$\n$f[father][2]=max(f[i][1],f[i][3])$\n$f[father][3]=max(f[i][1],f[i][2])+1$\n\n\n\uff08\u8fd9\u662f\u5b50\u8282\u70b9\u4e3a2\u7684\u60c5\u51b5\uff09\n\n$ f[fat[t]][1]=max(f[t][2]+f[bro[t]][3],f[t][3]+f[bro[t]][2]);$\n$f[fat[t]][2]=max(f[t][1]+f[bro[t]][3],f[t][3]+f[bro[t]][1]);$\n$f[fat[t]][3]=max(f[t][2]+f[bro[t]][1],f[t][1]+f[bro[t]][2])+1;$\n\n\u663e\u7136\u9ebb\u70e6\uff0c\u89c2\u5bdf\u8fd9\u51e0\u4e2a\u65b9\u7a0b \u53d1\u73b0 \u989c\u8272\u4e4b\u548c\uff081,2,3\uff09\u5fc5\u4e3a6\n\u6240\u4ee5\u53ea\u9700\u8981\u8fd9\u4e2a\u65b9\u7a0b\u5c31\u53ef\u4ee5\u4e86\n```cpp\nf[fat[t]][i]=max(f[t][j]+f[bro[t]][k],f[t][k]+f[bro[t]][j]);\n\nif(i==3) f[fat[t]][i]++;\n```\n\uff08\u5b50\u8282\u70b9\u4e3a1\uff0c\u6216\u8005\u6c42\u6700\u5c0f\u503c\u540c\u7406\uff09\n\n\u540c\u65f6\u521d\u59cb\u5316\u7684\u65f6\u5019\u6ce8\u610f\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u6c42\u5144\u5f1f\u8282\u70b9\n\n\u8fd9\u4e2a\u65f6\u5019\u4e00\u5b9a\u5bf9\u5e94\u4e86\u7236\u8282\u70b9\u4e3a2\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4cnt\uff0c\u6bcf\u6b21\u4e00\u4e2adfs\u8fdb\u5165\u7684\u65f6\u5019\u5c31cnt++,\u8fd9\u6837\u5de6\u8fb9\u626b\u5b8c\u4e86\u540e\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u70b9\uff08\u4e5f\u5c31\u662f\u5176\u5144\u5f1f\uff09\u5bf9\u5e94\u7684\u8282\u70b9\u4e00\u5b9a\u662fcnt+1\uff0c\u6211\u4eec\u540c\u65f6\u4fdd\u7559\u5de6\u8fb9\u7684\u7f16\u53f7\uff08\u59d1\u4e14\u4e3alooker\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f97\u5230\n\n$bro[looker]=cnt+1,bro[cnt+1]=looker$\n\n\u5904\u7406\u65b9\u5f0f\u548c\u5bf9\u79f0\u4e8c\u53c9\u6811\u5f88\u50cf\u3002\n\n### \u4ee3\u7801\u65f6\u95f4\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<set>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nint f[500200][5];\nint g[500200][5];\nint a[500200],n,cnt;\nint fat[500200];\nint bro[500200];\nvoid dfs(int t)\n{\n\tcnt++;\n\tint i,j,k;\n\tf[t][3]=g[t][3]=1;\n\tif(a[t]==1) fat[cnt+1]=t,dfs(cnt+1); //cnt+1\u4e3a\u5b50\u6811\u7684\u6839\uff0c\u5b50\u6811\u7684\u6839\u7684\u7236\u8282\u70b9\u4e00\u5b9a\u662f\u81ea\u5df1\n\tif(a[t]==2) \n\t{\n\t\tint looker;\n\t\tfat[cnt+1]=t,looker=cnt+1,dfs(cnt+1);\n\t\tbro[looker]=cnt+1,fat[cnt+1]=t,bro[cnt+1]=looker,dfs(cnt+1);\n\t}\n\tif(a[fat[t]]==1)\n\t{\n\t\tfor(i=1;i<=3;i++)\n\t\tfor(j=1;j<=6-i-1;j++)\n\t\t{\n\t\t\tk=6-i-j;\n\t\t\tif(k==j||i==j||k==i) continue;\n\t\t\tf[fat[t]][i]=max(f[t][j],f[t][k]);\n\t\t\tg[fat[t]][i]=min(g[t][j],g[t][k]);\n\t\t\tif(i==3) f[fat[t]][i]++,g[fat[t]][i]++;\n\t\t}\n\t}\n\tif(a[fat[t]]==2)\n\t{\n\t\tfor(i=1;i<=3;i++)\n\t\tfor(j=1;j<=6-i-1;j++)\n\t\t{\n\t\t\tk=6-i-j;\n\t\t\tif(k==j||i==j||k==i) continue;\n\t\t\tf[fat[t]][i]=max(f[t][j]+f[bro[t]][k],f[t][k]+f[bro[t]][j]);\n\t\t\tg[fat[t]][i]=min(g[t][j]+g[bro[t]][k],g[t][k]+g[bro[t]][j]);\n\t\t\tif(i==3) f[fat[t]][i]++,g[fat[t]][i]++;\n\t\t}\n\t}\n} \n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tregister int i,j;\n\tchar t;\n\t//while(scanf(\"%c\",&t)==1) a[++n]=int(t-'0');\n    //\u8fd9\u53e5\u8bdd\u4e00\u822c\u53ea\u80fd\u5728\u8bc4\u6d4b\u673a\u4e0a\u8dd1\uff0c\u5728\u672c\u5730\u4f1a\u65e0\u9650\u8bfb\n\tstring looker;\n\tcin>>looker;\n\tfor(i=0;i<looker.size();i++) a[i+1]=int(looker[i]-'0'); \n\tdfs(1);\n\tcout<<max(f[1][2],max(f[1][3],f[1][1]))<<\" \"<<min(g[1][2],min(g[1][3],g[1][1]));\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1575079852,
        "uid": 38636,
        "name": "\u5bd2\u51b0\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u89c2\u5bdf\u9898\u9762\uff1a\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u7684\u662f\u5728\u4e00\u68f5\u6811\u4e0a\u67d3\u8272\uff0c\u76f8\u90bb\u8282\u70b9\u989c\u8272\u8981\u6c42\u4e0d\u540c\uff0c\u6c42\u67d0\u79cd\u989c\u8272\u6700\u591a\u80fd\u67d3\u51e0\u4e2a\u8282\u70b9\u3002\n\n\u6811\u4e0a\u6c42\u6700\u5927\u67d3\u8272\uff0c\u6570\u636e\u8303\u56f4\u8fd8\u662f $5e5$ \u7684\uff0c\u663e\u7136\u5c31\u662f\u4e00\u9053\u6811\u5f62 $dp$ \u3002  \n\n\u7136\u540e\u601d\u8003\u5982\u4f55\u5177\u4f53\u5904\u7406\uff0c\u8fd9\u9053\u9898\u4ec5\u6309 $dfs$ \u5e8f\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u662f\u6309 $dfs$ \u5e8f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u7528\u5148\u5efa\u6811\u518d\u8dd1\uff0c\u76f4\u63a5\u6309\u7167\u5b57\u7b26\u4e32\u987a\u5e8f\u5f80\u4e0b\u8dd1\u5c31\u884c\u3002  \n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u4e0a\u53ef\u4ee5\u5229\u7528\u8fd9\u6837\u4e00\u4e2a\u5c0f\u6280\u5de7\uff1a\u8bb0\u5f55\u4e0b\u6bcf\u68f5\u5b50\u6811\u7684 $size$ \u5927\u5c0f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $x$ \u3002\u82e5\u5b83\u4ec5\u6709\u4e00\u4e2a\u513f\u5b50\u76f4\u63a5\u8dd1\u5230  $x$ \u7684\u7f16\u53f7 $+ 1$ \uff08\u7f16\u53f7\u5373\u8282\u70b9\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\uff09\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u82e5 $x$ \u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u904d\u5386\u7b2c\u4e00\u68f5\u5b50\u6811\u7ed3\u675f\u540e\uff0c\u53e6\u4e00\u4e2a\u513f\u5b50\u7684\u7f16\u53f7\u663e\u7136\u5c31\u662f\u5f53\u524d $x$ \u7684\u7f16\u53f7 + \u7b2c\u4e00\u68f5\u5b50\u6811\u5927\u5c0f + 1\u3002  \n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u5efa\u6811\u76f4\u63a5\u8dd1 $dfs$ \u4e86\uff0c\u518d\u7ee7\u7eed\u8003\u8651\u5982\u4f55 $dp$ \uff0c\u53ea\u8981\u4f1a\u6811\u5f62 $dp$ \u5e94\u8be5\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u7528 $f[i][j]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u67d3\u6210\u7b2c $j$ \u79cd\u989c\u8272\u5176\u5b50\u6811\u5185\uff08\u5305\u62ec\u5b83\u81ea\u5df1\uff09\u6240\u542b\u7684\u7eff\u8272\u8282\u70b9\u4e2a\u6570\uff0c\u8fdb\u800c\u8fdb\u884c\u8f6c\u79fb\u3002\u672c\u9898\u4e2d\u6709\u4e09\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u7b2c\u4e8c\u7ef4\u5b58\u4e86\u5206\u522b\u67d3\u6210\u4e09\u79cd\u989c\u8272\u7684\u72b6\u6001\u3002\u4f46\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\uff0c\u7b2c\u4e8c\u7ef4\u5b58\u5f53\u524d\u8282\u70b9\u662f\u7eff\u8272\u6216\u4e0d\u662f\u7eff\u8272\u4e24\u79cd\u72b6\u6001\u5373\u53ef\u3002  \n\n\u6b63\u786e\u6027\uff1f\u56e0\u4e3a\u5728\u672c\u9898\u4e2d\u6211\u4eec\u4ec5\u5173\u5fc3\u7eff\u8272\u8282\u70b9\u4e2a\u6570\uff0c\u6240\u4ee5\u5728\u4e00\u4e2a\u67d3\u8272\u65b9\u6848\u4e2d\u7ea2\u8272\u84dd\u8272\u7684\u8282\u70b9\u4e92\u6362\uff08\u84dd\u53d8\u7ea2\uff0c\u7ea2\u53d8\u84dd\uff09\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u5229\u7528\u8fd9\u4e2a\u7ea2\u84dd\u53ef\u4ee5\u4e92\u6362\u7684\u6027\u8d28\u53ef\u4ee5\u663e\u7136\u8bc1\u51fa\u7b2c\u4e8c\u7ef4\u5e76\u4e0d\u9700\u8981\u5b58\u4e09\u79cd\u989c\u8272\u3002  \n\n\u6700\u540e\u5c31\u662f\u8f6c\u79fb\u65b9\u7a0b\uff08\u6ce8\u610f\u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u5219\u8fd9\u4e09\u4e2a\u70b9\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e3a\u7eff\u8272\uff09\uff1a  \n\u5bf9\u4e8e $x$ \u4ec5\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u60c5\u51b5\uff1a  \n$f[x][0] = max(f[y][0], f[y][1])$  \n$f[x][1] = f[y][0]$  \n\u5bf9\u4e8e $x$ \u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u60c5\u51b5\uff1a  \n$f[x][0] = max(f[y1][0] + f[y2][1] , f[y1][1] + f[y2][0])$  \n$f[x][1] = f[y1][0] + f[y2][0]$  \n$0$ \u8868\u793a\u4e0d\u662f\u7eff\u8272 , $1$ \u8868\u793a\u662f\u7eff\u8272 , $x$ \u4e3a\u5f53\u524d\u8282\u70b9 , $y$ \u4e3a\u5b50\u8282\u70b9  \n\u4ee5\u4e0a\u4e3a\u8bb0\u5f55\u6700\u5927\u503c\u7684\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6700\u5c0f\u503c\u7684\u60c5\u51b5\u53ea\u8981\u5c06 $max$ \u6362\u6210 $min$ \u5373\u53ef\u3002\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\u90e8\u5206\uff1a  \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\nusing namespace std;\n\nconst int N = 500010;\n\nchar t[N];\nint f[N][2], g[N][2], size[N];\n// f\u5b58\u6700\u5927\u503c\u60c5\u51b5\uff0cg\u5b58\u6700\u5c0f\u503c\u60c5\u51b5\n\ninline void dfs(int x) {\n\tf[x][0] = 0; f[x][1] = 1;\n\tg[x][0] = 0; g[x][1] = 1;\n\t// \u521d\u59cb\u5316\uff0c\u9009\u5219\u4e3a1\n\tsize[x] = 0;\n\tint to[3] = {0};\n\t// to\u4e2d\u5b58\u5b50\u8282\u70b9\u7f16\u53f7\n\tfor (int i = 1; i <= t[x] - '0'; i++) {\n\t\tint y = x + size[x] + 1;\n\t\t// \u6309\u4e0a\u6587\u53d9\u8ff0\u65b9\u6cd5\u904d\u5386\u5b50\u8282\u70b9\n\t\tto[i] = y;\n\t\tdfs(y);\n\t\tsize[x] += size[y];\n\t}\n\tsize[x] += 1;\n\tif (t[x] == '0') return;\n\tif (t[x] == '1') {\n\t\tf[x][0] += max(f[to[1]][0], f[to[1]][1]);\n\t\tf[x][1] += f[to[1]][0];\n\t\tg[x][0] += min(g[to[1]][0], g[to[1]][1]);\n\t\tg[x][1] += g[to[1]][0];\n\t}\n\tif (t[x] == '2') {\n\t\tf[x][0] += max(f[to[1]][0] + f[to[2]][1], f[to[1]][1] + f[to[2]][0]);\n\t\tf[x][1] += f[to[1]][0] + f[to[2]][0];\n\t\tg[x][0] += min(g[to[1]][0] + g[to[2]][1], g[to[1]][1] + g[to[2]][0]);\n\t\tg[x][1] += g[to[1]][0] + g[to[2]][0];\n\t}\n\t// \u8f6c\u79fb\n}\n\nint main() {\n\tcin >> t;\n\tdfs(0);\n\tcout << max(f[0][0], f[0][1]) << \" \" << min(g[0][0], g[0][1]) << endl;\n\t// \u6700\u540e\u8f93\u51fa\u8bb0\u5f97\u8fd8\u8981\u53d6max/min\n\treturn 0;\n}\n```\n",
        "postTime": 1572770718,
        "uid": 18282,
        "name": "Phykyer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "[\u4e09\u8272\u4e8c\u53c9\u6811](https://www.luogu.org/problem/P2585)\n\n\u6811\u5f62dp\uff0c\u524d\u5e8f\u904d\u5386\u8bb0\u4e0b\u5de6\u53f3\u513f\u5b50\uff0c\u4ece\u513f\u5b50\u5f80\u7236\u4eb2dp\u5373\u53ef\n\n$$ f[i][0]=f[son[i][0]][1]+f[son[i][1]][1]+1;$$\n\n$$ f[i][1]=max(f[son[i][0]][1]+f[son[i][1]][0],f[son[i][0][0]+f[son[i][1]][1]); $$\n\nf[i][0]\u8868\u793a\u8fd9\u4e2a\u70b9\u4e3a\u767d\u8272,f[i][1]\u8868\u793a\u4e0d\u662f\u767d\u8272\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint son[600000][2],tot;\nint f[600000][3],g[600000][2];\nchar s[500100];\nvoid dfs(int x)\n{\n\tint y=s[x]-'0';\n\tif(!y) return;\n\tif(y) son[x][0]=++tot,dfs(son[x][0]);\n\tif(y==2) son[x][1]=++tot,dfs(son[x][1]);\n}\nint main()\n{\n\tscanf(\"%s\",s+1);\n\tint n=strlen(s+1);\n\ttot=1;\n\tdfs(1);\n\tfor(int i=n;i;i--)\n\t{\n\t\tf[i][0]=f[son[i][0]][1]+f[son[i][1]][1]+1;\n\t\tf[i][1]=max(f[son[i][0]][1]+f[son[i][1]][0],f[son[i][0]][0]+f[son[i][1]][1]);\n\t}\n\tcout<<max(f[1][0],f[1][1])<<\" \";\n\tmemset(f,0,sizeof(f));\n\tf[n][0]=1;\n\tf[n][1]=0;\n\tfor(int i=n-1;i;i--)\n\t{\n\t\tf[i][0]=f[son[i][0]][1]+f[son[i][1]][1]+1;\n\t\tf[i][1]=min(f[son[i][0]][1]+f[son[i][1]][0],f[son[i][0]][0]+f[son[i][1]][1]);\n\t}\n\tcout<<min(f[1][0],f[1][1]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1568360152,
        "uid": 108459,
        "name": "lizh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://minagami.github.io/2019/09/05/Luogu-P2585-ZJOI2006-%E4%B8%89%E8%89%B2%E4%BA%8C%E5%8F%89%E6%A0%91-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/)\n\n$3kb$ \u5199\u7740\u73a9\u7684\uff0c\u6ca1\u60f3\u52301A\u4e86...\n\n$24$ \u884c\u8f6c\u79fb\u65b9\u7a0b\uff08\u5927\u96fe\n\n## \u9898\u76ee\u94fe\u63a5\n\n[P2585 [ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811](https://www.luogu.org/problem/P2585)\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u8bfb\u5165\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u6240\u6709\u8282\u70b9\u67d3\u6210\u4e09\u79cd\u989c\u8272\uff0c\u5176\u4e2d\u4e00\u4e2a\u70b9\u5de6\u513f\u5b50\u53f3\u513f\u5b50\u548c\u5b83\u81ea\u5df1\u7684\u989c\u8272\u90fd\u4e0d\u80fd\u76f8\u540c\u3002\u6c42\u67d0\u79cd\u989c\u8272\u6700\u5927\u548c\u6700\u5c0f\u5b58\u5728\u6570\u91cf\u3002\n\n\n## \u89e3\u9898\u601d\u60f3\n\n\u88f8\u7684\u6811\u5f62 $\\mathrm {DP}$\uff0c\u6211\u4eec\u8bbe `dp[x][i]` \u8868\u793a\u5df2\u7ecf\u67d3\u5b8c\u4e86 $x$ \u7684\u5b50\u6811\uff0c\u5e76\u5c06 $x$ \u67d3\u6210\u989c\u8272 $i$ \u65f6\u95ee\u9898\u7684\u89e3\uff0c\u7136\u540e\u8ba8\u8bba\u5de6\u513f\u5b50\u4e0e\u53f3\u513f\u5b50\u7684\u989c\u8272\u8fdb\u884c\u8f6c\u79fb\u3002\n\n\u7531\u4e8e\u53ea\u7edf\u8ba1\u7eff\u8272\uff0c\u6240\u4ee5\u53ea\u6709\u5f53\u524d\u8282\u70b9\u4e3a\u7eff\u8272\u65f6\uff0c\u8f6c\u79fb\u624d\u9700 $ +1 $\u3002\n\n\u5efa\u6811\u7684\u8bdd\uff0c\u53ef\u4ee5\u4e00\u4e2a `dfs` \u5b8c\u6210\uff0c\u6709\u513f\u5b50\u518d\u5efa\u8282\u70b9\uff0c\u53ef\u4ee5\u7701\u7a7a\u95f4\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n\nconst int N = 5e5 + 6;\n\ninline int max(int a, int b) {return a > b ? a : b;}\ninline int min(int a, int b) {return a < b ? a : b;}\n\nint ch[N][2], tot = 1, rt = 1, ans1 = 0xcfcfcfcf, ans2 = 0x7fffffff;\nint maxx[N][3], minn[N][3];\n\nvoid readin(int x) {\n    int son = getchar() - '0';\n    if(son == 0) return;\n    if(son == 1) {\n        ch[x][0] = ++tot;\n        readin(ch[x][0]);\n    }\n    else {\n        ch[x][0] = ++tot;\n        ch[x][1] = ++tot;\n        readin(ch[x][0]);\n        readin(ch[x][1]);\n    }\n}\n\nvoid dfs(int x) {\n    if(!ch[x][0]) {\n        maxx[x][0] = 1, maxx[x][1] = maxx[x][2] = 0;\n        minn[x][0] = 1, minn[x][1] = minn[x][2] = 0;\n    }\n    else if(!ch[x][1]) {\n        dfs(ch[x][0]);\n        maxx[x][0] = max(maxx[x][0], maxx[ch[x][0]][1] + 1);\n        maxx[x][0] = max(maxx[x][0], maxx[ch[x][0]][2] + 1);\n        maxx[x][1] = max(maxx[x][1], maxx[ch[x][0]][0]);\n        maxx[x][1] = max(maxx[x][1], maxx[ch[x][0]][2]);\n        maxx[x][2] = max(maxx[x][2], maxx[ch[x][0]][0]);\n        maxx[x][2] = max(maxx[x][2], maxx[ch[x][0]][1]);\n        minn[x][0] = min(minn[x][0], minn[ch[x][0]][1] + 1);\n        minn[x][0] = min(minn[x][0], minn[ch[x][0]][2] + 1);\n        minn[x][1] = min(minn[x][1], minn[ch[x][0]][0]);\n        minn[x][1] = min(minn[x][1], minn[ch[x][0]][2]);\n        minn[x][2] = min(minn[x][2], minn[ch[x][0]][0]);\n        minn[x][2] = min(minn[x][2], minn[ch[x][0]][1]);\n    }\n    else {\n        dfs(ch[x][0]);\n        dfs(ch[x][1]);\n        maxx[x][0] = max(maxx[x][0], maxx[ch[x][0]][1] + maxx[ch[x][1]][2] + 1);\n        maxx[x][0] = max(maxx[x][0], maxx[ch[x][0]][2] + maxx[ch[x][1]][1] + 1);\n        maxx[x][1] = max(maxx[x][1], maxx[ch[x][0]][0] + maxx[ch[x][1]][2]);\n        maxx[x][1] = max(maxx[x][1], maxx[ch[x][0]][2] + maxx[ch[x][1]][0]);\n        maxx[x][2] = max(maxx[x][2], maxx[ch[x][0]][0] + maxx[ch[x][1]][1]);\n        maxx[x][2] = max(maxx[x][2], maxx[ch[x][0]][1] + maxx[ch[x][1]][0]);\n        minn[x][0] = min(minn[x][0], minn[ch[x][0]][1] + minn[ch[x][1]][2] + 1);\n        minn[x][0] = min(minn[x][0], minn[ch[x][0]][2] + minn[ch[x][1]][1] + 1);\n        minn[x][1] = min(minn[x][1], minn[ch[x][0]][0] + minn[ch[x][1]][2]);\n        minn[x][1] = min(minn[x][1], minn[ch[x][0]][2] + minn[ch[x][1]][0]);\n        minn[x][2] = min(minn[x][2], minn[ch[x][0]][0] + minn[ch[x][1]][1]);\n        minn[x][2] = min(minn[x][2], minn[ch[x][0]][1] + minn[ch[x][1]][0]);\n    }\n}\n\nint main() {\n    readin(rt);\n    memset(maxx, 0xcf, sizeof maxx);\n    memset(minn, 0x3f, sizeof minn);\n    dfs(rt);\n    for(register int i = 0; i < 3; i++) {\n    \tans1 = max(ans1, maxx[rt][i]);\n    \tans2 = min(ans2, minn[rt][i]);\n\t}\n\tprintf(\"%d %d\", ans1, ans2);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1567683756,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 [ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811"
    },
    {
        "content": "\u5ba3\u4f20\u849f\u84bb\u535a\u5ba2 [\u535a\u5ba2](https://www.cnblogs.com/lizitong/)\n\n\u7531\u4e8e\u662f\u4e00\u68f5\u6811\uff0c\u591a\u51b3\u7b56\u7684\u95ee\u9898\uff0c\u5f88\u660e\u663e\u7684\u6811\u5f62DP\u3002\n\n\u5173\u4e8e\u6811\u5f62DP\u8be6\u89c1https://www.cnblogs.com/lizitong/p/10020914.html\n\n\u4e8c\u7ef4\u72b6\u6001\uff0cdp[i][j] j\u53d60\uff0c1,2\u8868\u793a\u4e09\u79cd\u989c\u8272\u3002\u8868\u793a\u4ee5\u8fd9\u4e2a\u7f16\u53f7\u4e3a\u7236\u8282\u70b9\u53d6\u8fd9\u4e2a\u989c\u8272\u65f6\u5019\u6709dp[i][j]\u4e2a\u70b9\u80fd\u88ab\u67d3\u6210\u7eff\u8272\u3002\n\nDFS\u641c\u5230\u6700\u5e95\uff0c\u7136\u540e\u7ed9\u53f6\u8282\u70b9\u9644\u4e0a\u521d\u503c\u3002\n\n\u7136\u540e\u56de\u6eaf\u66f4\u65b0\u3002\n\n\u4ee5\u6700\u5c0f\u503c\u4e3a\u4f8b\u3002\n\ndpmi[x][1] = min(dpmi[x][1],min(dpmi[l[x]][2]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][2])+1);\n\ndpmi[x][2] = min(dpmi[x][2],min(dpmi[l[x]][1]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][1]));\n\ndpmi[x][3] = min(dpmi[x][3],min(dpmi[l[x]][1]+dpmi[r[x]][2],dpmi[l[x]][2]+dpmi[r[x]][1]));\n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u7eff\u8272\uff0c\u5c31\u6bd4\u8f83\u5b50\u8282\u70b9\u5206\u522b\u4e3a\u5176\u4ed6\u4e24\u79cd\u989c\u8272\u7684\u5927\u5c0f\uff0c\u7136\u540e+1\n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u5176\u4ed6\u989c\u8272\uff0c\u5c31\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u70b9\u5b50\u8282\u70b9\u5206\u522b\u662f\u53e6\u5916\u4e24\u79cd\u989c\u8272\u548c\u7684\u5927\u5c0f\u3002\n\n\u6700\u540e\u8f93\u51fa\u7236\u8282\u70b9\u7684\u6700\u5927\uff08\u5c0f\uff09\u72b6\u6001\u3002\n\n\u5206\u522b\u7528l\u548cr\u6570\u7ec4\u5b58\u5de6\u53f3\u513f\u5b50\u3002\n\n\u7ec6\u8282\u8f83\u591a\uff0c\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#define N 500005\nusing namespace std;\nchar c[N];\nstruct edge\n{\n    int to;\n    int nxt;\n    int from;    \n}eg[N];\nint head[N];\nint cnt = 1;\nint ct = 1;\nint dpma[N][4];\nint dpmi[N][4];\nint l[N];\nint r[N];\nvoid add(int x,int y)\n{\n    eg[cnt].to = y;\n    eg[cnt].nxt = head[x];\n    eg[cnt].from = x;\n    head[x] = cnt++;\n}\nvoid buildtree(int x)\n{\n    if(c[x]=='2')\n    {\n        add(x,++ct);\n        l[x] = ct;\n        buildtree(ct);\n        add(x,++ct);\n        r[x] = ct;\n        buildtree(ct);\n    }else if(c[x]=='1')\n    {\n        add(x,++ct);\n        l[x] = ct;\n        buildtree(ct);\n    }else\n    {\n        return ;    \n    }\n}\nvoid dfsma(int x)\n{\n    if(l[x]==0&&r[x]==0)\n    {\n        dpma[x][1] = 1;\n        return ;\n    }else\n    {\n        if(l[x])\n        {\n            dfsma(l[x]);\n            dpma[x][1] = max(dpma[x][1],max(dpma[l[x]][2]+dpma[r[x]][3],dpma[l[x]][3]+dpma[r[x]][2])+1);\n            dpma[x][2] = max(dpma[x][2],max(dpma[l[x]][1]+dpma[r[x]][3],dpma[l[x]][3]+dpma[r[x]][1]));\n            dpma[x][3] = max(dpma[x][3],max(dpma[l[x]][1]+dpma[r[x]][2],dpma[l[x]][2]+dpma[r[x]][1]));\n        }\n        if(r[x])\n        {\n            dfsma(r[x]);\n            dpma[x][1] = max(dpma[x][1],max(dpma[l[x]][2]+dpma[r[x]][3],dpma[l[x]][3]+dpma[r[x]][2])+1);\n            dpma[x][2] = max(dpma[x][2],max(dpma[l[x]][1]+dpma[r[x]][3],dpma[l[x]][3]+dpma[r[x]][1]));\n            dpma[x][3] = max(dpma[x][3],max(dpma[l[x]][1]+dpma[r[x]][2],dpma[l[x]][2]+dpma[r[x]][1]));\n        }\n    }\n}\nvoid dfsmi(int x)\n{\n    if(l[x]==0&&r[x]==0)\n    {\n        dpmi[x][1] = 1;\n        dpmi[x][2] = 0;\n        dpmi[x][3] = 0;\n        return ;\n    }else\n    {\n        if(l[x])\n        {\n            dfsmi(l[x]);\n            dpmi[x][1] = min(dpmi[x][1],min(dpmi[l[x]][2]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][2])+1);\n            dpmi[x][2] = min(dpmi[x][2],min(dpmi[l[x]][1]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][1]));\n            dpmi[x][3] = min(dpmi[x][3],min(dpmi[l[x]][1]+dpmi[r[x]][2],dpmi[l[x]][2]+dpmi[r[x]][1]));\n        }\n        if(r[x])\n        {\n            dfsmi(r[x]);\n            dpmi[x][1] = min(dpmi[x][1],min(dpmi[l[x]][2]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][2])+1);\n            dpmi[x][2] = min(dpmi[x][2],min(dpmi[l[x]][1]+dpmi[r[x]][3],dpmi[l[x]][3]+dpmi[r[x]][1]));\n            dpmi[x][3] = min(dpmi[x][3],min(dpmi[l[x]][1]+dpmi[r[x]][2],dpmi[l[x]][2]+dpmi[r[x]][1]));\n        }\n    }\n}\nint main()\n{\n    scanf(\"%s\",c+1);\n    buildtree(1);\n    memset(dpmi,0x3f,sizeof(dpmi));\n    dpmi[0][1] = 0;\n    dpmi[0][2] = 0;\n    dpmi[0][3] = 0;\n    dfsma(1);\n    dfsmi(1);\n    printf(\"%d \",max(max(dpma[1][1],dpma[1][2]),dpma[1][3]));\n    printf(\"%d\",min(min(dpmi[1][1],dpmi[1][2]),dpmi[1][3]));    \n}\n```",
        "postTime": 1544086429,
        "uid": 120949,
        "name": "lizitong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "```\n//Pro:P2585 [ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\n\n//\u7528mx[i][0~2]\u8868\u793ai\u8fd9\u4e2a\u70b9\u67d3\u7eff\u3001\u7ea2\u3001\u84dd\u8272\u80fd\u83b7\u5f97\u7684\u6700\u5927\u7eff\u8272\u6570\uff0cmi\u8868\u793a\u6700\u5c0f\u7eff\u8272\u6570\n//\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u53f6\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684mx[][0]=mi[][0]=1,mx[][1]=mx[][2]=mi[][1]=mi[][2]=0\n//\u5982\u679c\u6709\u4e00\u4e2a\u513f\u5b50\u6216\u8005\u4e24\u4e2a\u513f\u5b50,\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u4ee3\u7801\u88ab\u6ce8\u91ca\u7684\u90e8\u5206\n\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int N=5e+5;\n\nchar s[N];\n\nstruct NODE\n{\n\tint son[2],sson;\n\tint mx[3],mi[3];\t//dp[0~2]\u5206\u522b\u8868\u793a\u7eff\u3001\u7ea2\u3001\u84dd \n}p[N];\nint now_node,root;\n\nvoid dfs1(int &u)\t//\u5efa\u6811 \n{\n\tu=++now_node;\n\tp[u].sson=s[u]-'0';\n\tfor(int i=0;i<s[u]-'0';++i)\n\t\tdfs1(p[u].son[i]);\n}\n\nvoid dfs2(int u)\n{\n\tif(p[u].sson==0)\n\t{\n\t\tp[u].mx[0]=1,p[u].mx[1]=p[u].mx[2]=0;\n\t\tp[u].mi[0]=1,p[u].mi[1]=p[u].mi[2]=0;\n\t\treturn;\n\t}\n\tfor(int i=0;i<p[u].sson;++i)\n\t\tdfs2(p[u].son[i]);\n\tif(p[u].sson==1)\n\t{\n\t\tp[u].mx[0]=max(p[p[u].son[0]].mx[1],p[p[u].son[0]].mx[2])+1;\t//\u5f53\u524d\u70b9\u7eff\u8272\n\t\tp[u].mx[1]=max(p[p[u].son[0]].mx[0],p[p[u].son[0]].mx[2]);\n\t\tp[u].mx[2]=max(p[p[u].son[0]].mx[0],p[p[u].son[0]].mx[1]);\n\t\tp[u].mi[0]=min(p[p[u].son[0]].mi[1],p[p[u].son[0]].mi[2])+1;\t//\u5f53\u524d\u70b9\u7eff\u8272 \n\t\tp[u].mi[1]=min(p[p[u].son[0]].mi[0],p[p[u].son[0]].mi[2]);\n\t\tp[u].mi[2]=min(p[p[u].son[0]].mi[0],p[p[u].son[0]].mi[1]);\n\t\t\n\t}\n\tif(p[u].sson==2)\t\t//\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u8981\u8003\u8651\u4e24\u4e2a\u513f\u5b50\u4e0d\u80fd\u76f8\u540c \n\t{\n\t\tp[u].mx[0]=max(p[p[u].son[0]].mx[1]+p[p[u].son[1]].mx[2],p[p[u].son[0]].mx[2]+p[p[u].son[1]].mx[1])+1;\t\t//\u5f53\u524d\u70b9\u7eff\u8272 \n\t\tp[u].mx[1]=max(p[p[u].son[0]].mx[0]+p[p[u].son[1]].mx[2],p[p[u].son[0]].mx[2]+p[p[u].son[1]].mx[0]);\t\t//\u5f53\u524d\u70b9\u7ea2\u8272\n\t\tp[u].mx[2]=max(p[p[u].son[0]].mx[0]+p[p[u].son[1]].mx[1],p[p[u].son[0]].mx[1]+p[p[u].son[1]].mx[0]);\t\t//\u5f53\u524d\u70b9\u84dd\u8272 \n\t\tp[u].mi[0]=min(p[p[u].son[0]].mi[1]+p[p[u].son[1]].mi[2],p[p[u].son[0]].mi[2]+p[p[u].son[1]].mi[1])+1;\t\t//\u5f53\u524d\u70b9\u7eff\u8272 \n\t\tp[u].mi[1]=min(p[p[u].son[0]].mi[0]+p[p[u].son[1]].mi[2],p[p[u].son[0]].mi[2]+p[p[u].son[1]].mi[0]);\t\t//\u5f53\u524d\u70b9\u7ea2\u8272 \n\t\tp[u].mi[2]=min(p[p[u].son[0]].mi[0]+p[p[u].son[1]].mi[1],p[p[u].son[0]].mi[1]+p[p[u].son[1]].mi[0]);\t\t//\u5f53\u524d\u70b9\u84dd\u8272\n\t}\n}\n\nint main()\n{\n\tscanf(\"%s\",s+1);\n\tdfs1(root);\n\tdfs2(root);\n\tprintf(\"%d %d\",max(p[root].mx[0],max(p[root].mx[1],p[root].mx[2])),min(p[root].mi[0],min(p[root].mi[1],p[root].mi[2])));\n\treturn 0;\n}\n```",
        "postTime": 1532002690,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "**\u6811\u5f62DP**\n\n\n\u597d\u6fc0\u52a8\u5730\u8fc7\u4e86\u3002\u5199\u4e00\u6ce2\u9898\u89e3\n\n\u6b63\u5982\u697c\u4e0b\u6240\u8bf4\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u7eff\u8272\u8282\u70b9\u7684\u6570\u76ee\uff0c\u800c\u7ea2\u8272\u84dd\u8272\u53ef\u4ee5\u770b\u4f5c\u65e0\u8272\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6839\u8282\u70b9\u548c\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u7eff\u8272\u8282\u70b9\n\n\u6309\u7167\u6811\u5f62DP\u7684\u601d\u8def\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dp[2][maxn]\n\n\u7b2c\u4e8c\u7ef4\u7ef4\u5206\u522b\u4fdd\u5b58\u8be5\u6839\u8282\u70b9\u6d82\u7eff\u8272\u4e0e\u4e0d\u6d82\u7eff\u8272\u7684\u60c5\u51b5\u4e0b\u8be5\u6811\u7684\u6700\u4f18\u6570\u76ee\u30101\u8868\u793a\u6d82\u7eff\u8272\uff0c0\u8868\u793a\u4e0d\u6d82\u3011\n\n\n\u4ee5\u6700\u5927\u7eff\u8272\u6570\u4e3a\u4f8b\uff1a\n\ndp[0][i]=max(dp[1][left[i]]+dp[0][right[i]],dp[0][left[i]]+dp[1][right[i]])\n\n\u5982\u679c\u4e0d\u6d82i\u8282\u70b9\uff0c\u90a3\u4e48i\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u6d82\uff0c\u6240\u4ee5\u8981\u4e48\u5de6\u4e3a1\u53f3\u4e3a0\uff0c\u8981\u4e48\u5de6\u4e3a0\u53f3\u4e3a1\n\ndp[1][i]=dp[0][left[i]]+dp[0][right[i]]+1\n\n\u5982\u679c\u6d82i\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u5f53\u7136\u90fd\u4e0d\u80fd\u6d82\u5566\u3010\u522b\u5fd8\u4e86\u52a0\u4e0a1\uff0c\u5373\u7edf\u8ba1\u4e0ai\u8282\u70b9\u7684\u7eff\u8272\u3011\n\n\n\u6700\u5c0f\u7eff\u8272\u4e5f\u662f\u4e00\u4e2a\u9053\u7406,\u53ea\u8981\u628amax\u6539\u4e3amin\u5c31\u597d\u4e86\uff1a\n\ndp[0][i]=min(dp[1][left[i]]+dp[0][right[i]],dp[0][left[i]]+dp[1][right[i]])\n\n\u5982\u679c\u4e0d\u6d82i\u8282\u70b9\uff0c\u90a3\u4e48i\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u6d82\uff0c\u6240\u4ee5\u8981\u4e48\u5de6\u4e3a1\u53f3\u4e3a0\uff0c\u8981\u4e48\u5de6\u4e3a0\u53f3\u4e3a1\n\ndp[1][i]=dp[0][left[i]]+dp[0][right[i]]+1\n\n\u5982\u679c\u6d82i\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u5f53\u7136\u90fd\u4e0d\u80fd\u6d82\u5566\u3010\u522b\u5fd8\u4e86\u52a0\u4e0a1\uff0c\u5373\u7edf\u8ba1\u4e0ai\u8282\u70b9\u7684\u7eff\u8272\u3011\n\n\n\u6ce8\u610f\uff1a\u521d\u59cb\u5316\u7a7a\u7684\u5b50\u8282\u70b9\u7684dp\u4e3a0\uff0c\u8868\u793a\u7a7a\u5b50\u8282\u70b9\u4e0d\u80fd\u4e3a\u589e\u52a0\u7eff\u8272\u6570\u91cf\u8d21\u732e\u4ec0\u4e48\uff0c\u8fd9\u6837\u5c31\u7701\u53bb\u4e86\u5f88\u591a\u7279\u5224\n\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f\u6839\u8282\u70b9dp[0][root]\u548cdp[1][root]\u6700\u5927\u3010\u6700\u5c0f\u3011\u90a3\u4e2a\u3002\n\n\n\u6211\u5982\u6b64\u849f\u84bb\uff0c\u53ea\u4f1a\u5199\u76f4\u89c2\u7684\u9012\u5f52dp\u3010\u4e3a\u4e86\u65b9\u4fbf,\u5f00\u4e24\u4e2a\u6570\u7ec4,dp\u5b58\u6700\u5927,f\u5b58\u6700\u5c0f\u3011\uff1a\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1000005,INF=2000000000;\nint L[maxn],R[maxn],treei=0,root,f[2][maxn],dp[2][maxn];\nint build()                           //\u5efa\u6811\n{\n    int u=++treei;\n    int son=getchar()-'0';\n    if(son==1)\n    {\n        L[u]=build();\n        R[u]=0;\n    }\n    else if(son==2)\n    {\n        L[u]=build();\n        R[u]=build();\n    }\n    else\n    {\n        L[u]=0;\n        R[u]=0;\n    }\n    return u;\n}\nvoid dpmax(int u)                 //\u6c42\u6700\u5927\n{\n    if(dp[0][L[u]]==-1) dpmax(L[u]);\n    if(dp[0][R[u]]==-1) dpmax(R[u]);\n    dp[0][u]=max(dp[0][L[u]]+dp[1][R[u]],dp[1][L[u]]+dp[0][R[u]]);\n    dp[1][u]=dp[0][L[u]]+dp[0][R[u]]+1;\n}\nvoid dpmin(int u)                 //\u6c42\u6700\u5c0f\n{\n    if(f[0][L[u]]==-1) dpmin(L[u]);\n    if(f[0][R[u]]==-1) dpmin(R[u]);\n    f[0][u]=min(f[0][L[u]]+f[1][R[u]],f[1][L[u]]+f[0][R[u]]);\n    f[1][u]=f[0][L[u]]+f[0][R[u]]+1;\n}\nint main()\n{\n    fill(f[0],f[0]+2*maxn,-1);\n    fill(dp[0],dp[0]+2*maxn,-1);\n    dp[0][0]=dp[1][0]=0;                //\u521d\u59cb\u5316\u7a7a\u8282\u70b9\u4e3a0\n    f[0][0]=f[1][0]=0;\n    root=build();                               //\u4ee5\u4e0b\u5c31\u5f88\u76f4\u89c2\u4e86\u5427\n    dpmax(root);\n    dpmin(root);\n    cout<<max(dp[0][root],dp[1][root])<<' '<<min(f[0][root],f[1][root])<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1496496072,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u4e00\u4e2a\u8282\u70b9\u67d3\u6210\u7ea2\u8272\u6216\u84dd\u8272\u662f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5c06\u6811\u4e2d\u7684\u6240\u6709\u7ea2\u8272\u548c\u84dd\u8272\u5bf9\u8c03\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u548c\u539f\u6765\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u6848\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u72b6\u6001dp[i][0]\u548cdp[i][1]\uff0c\u5206\u522b\u8868\u793a\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u53ef\u4ee5\u6d82\u7eff\u7684\u6700\u5927\u503c\uff0c\u5176\u4e2d1\u8868\u793ai\u6d82\u6210\u4e86\u7eff\u8272\uff0c0\u8868\u793a\u6ca1\u6709\u6d82\u6210\u7eff\u8272\uff0c\u4ee4L[i]\u548cR[i]\u5206\u522b\u8868\u793ai\u7684\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\uff0c\u5bb9\u6613\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1adp[i][0]=max(dp[L[i]][0]+dp[R[i]][1],dp[L[i]][1]+dp[R[i]][0],dp[L[i]][0]+dp[R[i]][0])\uff0cdp[i][1]=dp[L[i]][0]+dp[R[i]][0]+1\u3002\u81ea\u5e95\u5411\u4e0a\u8f6c\u79fb\u5373\u53ef\u3002\u7136\u540e\u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u6c42\u51faL[i]\u548cR[i]\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5f53\u4e00\u4e2a\u70b9\u6709\u4e24\u4e2a\u513f\u5b50\u65f6\uff0c\u6211\u4eec\u5904\u7406\u5b8c\u5de6\u5b50\u6811\u540e\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u4f4d\u7f6e\u6700\u9760\u540e\u7684\u70b9\u7684\u4e0b\u4e00\u4e2a\u70b9\u4e00\u5b9a\u662f\u53f3\u5b50\u6811\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u9012\u5f52\u6784\u9020\u53f3\u5b50\u6811\u3002\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 1000005\nchar s[maxn];\nint L[maxn],R[maxn],cur;\nint dpmax[maxn][2],dpmin[maxn][2];\nint que[maxn];\nvoid make_tree(int x)\n{\n    cur=max(x,cur);\n    if (s[x]=='0') return;    \n    if (s[x]=='1') \n    {\n        L[x]=x+1;\n        make_tree(x+1);    \n    }\n    if (s[x]=='2') \n    {\n        L[x]=x+1;\n        cur=0;\n        make_tree(x+1);\n        R[x]=cur+1;    \n        make_tree(cur+1);\n    }\n}\nvoid bfs(void) \n{\n    int h=1,t=1;\n    que[1]=1;\n    while (h<=t) \n    {\n        int u=que[h];h++;\n        if (L[u]) que[++t]=L[u];\n        if (R[u]) que[++t]=R[u];\n    }\n}\nint main()\n{\n    scanf(\"%s\",s);\n    int n=strlen(s);\n    for (int i=n;i>=1;i--) s[i]=s[i-1];\n    make_tree(1);\n    bfs();\n    memset(dpmin,53,sizeof dpmin);\n    dpmin[0][0]=dpmin[0][1]=0;\n    for (int i=n;i>=1;i--) \n    {\n        int x=que[i];\n        if (L[x]==0&&R[x]==0) \n        {\n            dpmax[x][0]=0;dpmin[x][0]=0;\n            dpmax[x][1]=1;dpmin[x][1]=1;\n            continue;\n        }\n        dpmax[x][0]=max(dpmax[L[x]][1]+dpmax[R[x]][0],dpmax[L[x]][0]+dpmax[R[x]][1]);\n        dpmax[x][0]=max(dpmax[x][0],dpmax[L[x]][0]+dpmax[R[x]][0]);\n        dpmax[x][1]=dpmax[L[x]][0]+dpmax[R[x]][0]+1;\n        dpmin[x][0]=min(dpmin[L[x]][1]+dpmin[R[x]][0],dpmin[L[x]][0]+dpmin[R[x]][1]);\n        dpmin[x][0]=min(dpmin[x][0],dpmin[L[x]][1]+dpmin[R[x]][1]);\n        dpmin[x][1]=dpmin[L[x]][0]+dpmin[R[x]][0]+1;\n    }\n    printf(\"%d %d\\n\",max(dpmax[1][0],dpmax[1][1]),min(dpmin[1][0],dpmin[1][1]));\n    return 0;    \n}\n```",
        "postTime": 1475143377,
        "uid": 12736,
        "name": "LVYOUYW",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "f[i][0/1]\u8868\u793ai\u7ed3\u70b9\u4e3a\u975e\u7eff\u8272/\u7eff\u7684\u7eff\u8272\u7ed3\u70b9\u7684\u6700\u5927\u4e2a\u6570\n\n\u8f6c\u79fb\nf[x][1]=f[l[x]][0]+f[r[x]][0]+1;\n\nf[x][0]=max(f[l[x]][0]+f[r[x]][1],f[r[x]][0]+f[l[x]][1]);\n\n\u6700\u5c0f\u503c\u7c7b\u4f3c\n\n    \n```cpp\n    #include<cstdio>\n    #include<iostream>\n    #include<cstring>\n    #define inf 1000000000\n    using namespace std;\n    int ans1,ans2,sz=1,cnt;\n    int f[3000005][2];\n    int l[3000005],r[3000005];\n    void read(int x)\n    {\n        char ch=getchar();\n        if(ch=='0')return;\n        sz++;l[x]=sz;read(sz);\n        if(ch=='2')\n        {\n            sz++;r[x]=sz;read(sz);\n        }\n    }\n    void dp1(int x)\n    {\n        if(!x)return;\n        dp1(l[x]);dp1(r[x]);\n        f[x][1]=f[l[x]][0]+f[r[x]][0]+1;\n        f[x][0]=max(f[l[x]][0]+f[r[x]][1],f[r[x]][0]+f[l[x]][1]);\n    }\n    void dp2(int x)\n    {\n        if(!x)return;\n        dp2(l[x]);dp2(r[x]);\n        f[x][1]=f[l[x]][0]+f[r[x]][0]+1;\n        f[x][0]=min(f[l[x]][0]+f[r[x]][1],f[r[x]][0]+f[l[x]][1]);\n    }\n    int main()\n    {\n        read(1);\n        dp1(1);ans1=max(f[1][1],f[1][0]);\n        memset(f,0,sizeof(f));\n        dp2(1);ans2=min(f[1][1],f[1][0]);\n        printf(\"%d %d\\n\",ans1,ans2);\n        return 0;\n    }\n\n```",
        "postTime": 1514297291,
        "uid": 52325,
        "name": "wenjie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2585 \u3010[ZJOI2006]\u4e09\u8272\u4e8c\u53c9\u6811\u3011"
    }
]