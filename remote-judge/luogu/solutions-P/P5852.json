[
    {
        "content": "# P5852 [USACO19DEC]Bessie's Snow Cow P\n\n> \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5b83\u67d3\u7684\u4e0d\u540c\u989c\u8272\u4e2a\u6570\uff08\u56e0\u6b64\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\u989c\u8272\uff09\u3002\n>\n> \u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff1a\n> 1.x\u7684\u5b50\u6811\u5168\u67d3\u4e0a\u67d0\u79cd\u989c\u8272\uff1b\n> 2.\u67e5\u8be2\u60f3\u7684\u5b50\u6811\u6743\u503c\u4e4b\u548c\uff1b\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u5f00\u4e00\u4e2aset\uff0c\u7ef4\u62a4\u5b50\u6811\u5168\u90e8\u90fd\u67d3\u4e0a\u540c\u79cd\u989c\u8272\u7684\u70b9\uff0c\u4e14\u4fdd\u8bc1\u4e0d\u4f1a\u5728\u540c\u4e00set\u4e2d\u6709\u4e24\u4e2a\u70b9\u7684\u5b50\u6811\u5305\u542b\u540c\u4e00\u70b9\u3002\n\n\u901a\u4fd7\u89e3\u91ca\u5c31\u662f\u4e0d\u8ba9\u4e00\u4e2a\u70b9\u88ab\u540c\u4e00\u989c\u8272\u67d3\u4e24\u6b21\u3002\n\u4f53\u73b0\u5728\u64cd\u4f5c\u4e2d\u7684\u5b9e\u9645\u6548\u5e94\u5c31\u662f\u52a0\u5165\u4e00\u4e2a\u67d3\u8272\u65f6\u8981\u5220\u6389\u5b83\u5b50\u6811\u7684\u6240\u6709\u540c\u8272\u67d3\u8272\u4fe1\u606f\u3002\n\n\u6b64\u65f6\u9700\u8981\u505a\u7684\u5c31\u662f\u5728\u4fee\u6539\u7684\u65f6\u5019\u540c\u6b65\u66f4\u65b0\u7b54\u6848\u3002\n\n\u53d1\u73b0\u7b54\u6848\u5206\u4e3a\u4e24\u90e8\u5206\uff1a  \n1.\u7956\u5148\u7684\u5b50\u6811\u67d3\u4e0a\u540c\u79cd\u989c\u8272\u65f6\uff0c\u9644\u5e26\u7740\u6211\u67d3\u4e0a\u4e86\uff1b\u6b64\u65f6\u6574\u4e2a\u5b50\u6811\u5fc5\u5b9a\u4e5f\u67d3\u4e0a\u4e86\u3002  \n2.\u6211\u7684\u67d0\u4e2a\u513f\u5b50\u67d3\u4e86\uff0c\u5b83\u5e26\u52a8\u6211\u7684\u4e00\u90e8\u5206\u5b50\u6811\u67d3\u4e86\uff1b\u6b64\u65f6\u6574\u4e2a\u5b50\u6811\u4e0d\u4e00\u5b9a\u67d3\u4e0a\u3002\n\n\u4e8e\u662f\u60f3\u5230\u5f00\u4e24\u9897\u6811\u72b6\u6570\u7ec4\uff1a  \n1.\u533a\u6539\u5355\u67e5\uff0c\u7ef4\u62a4\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u6bcf\u6b21\u7ed9\u5b50\u6811\u52a0\u8d21\u732e\uff0c\u6bcf\u6b21\u67e5\u5355\u4e2a\u70b9\u7684\u60c5\u51b5\u3002\u8fd9\u4e2a\u60c5\u51b5x\u4e0e\u5b83\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u52a0\u7684\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u67e5x\u7684\uff0c\u7136\u540e\u4e58\u5b50\u6811\u5927\u5c0f\u3002  \n2.\u5355\u6539\u533a\u67e5\uff0c\u7ef4\u62a4\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u6bcf\u6b21\u7ed9\u5355\u4e2a\u70b9\u52a0\u8d21\u732e\uff0c\u6bcf\u6b21\u67e5\u533a\u95f4\u7684\u60c5\u51b5\u3002\u52a0\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628ay\u5b50\u6811\u7684\u52a0\u7684\u5168\u90e8\u52a0\u7ed9x\u90a3\u4e00\u4e2a\u70b9\uff0c\u8fd9\u6837\u53ea\u8981\u67e5\u5230y\u90a3\u4e2a\u70b9\u5c31\u52a0\u5165\u4e86y\u6574\u4e2a\u5b50\u6811\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e00\u6bb5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nvoid upd(int x,int d)//\u4fee\u6539\n{\n\tA.ins(dfn[x],d);\n\tA.ins(low[x]+1,-d);//\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u7956\u5148\u6765\u7684\u8d21\u732e\n\tB.ins(dfn[x],(low[x]-dfn[x]+1)*d);//\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u5b50\u6811\u7684\u8d21\u732e\uff08\u6ce8\u610f\uff1a\u56e0\u4e3a\u76f4\u63a5\u628ax\u5b50\u6811\u7684\u8d21\u732e\u52a0\u7ed9x\u4e86\uff0c\u6240\u4ee5\u8981\u4e58\u5b50\u6811\u5927\u5c0f\uff09\n}\nint que(int x) {return (low[x]-dfn[x]+1)*A.ask(dfn[x])+B.ask(low[x])-B.ask(dfn[x]);}\n```\n\n\u6574\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nstruct Edge{int to,next;\n}a[maxn<<1];\nint n,q,dfn[maxn],low[maxn],bc[maxn],h[maxn],dfx,cnt;\nvoid add(int x,int y) {a[++cnt]=(Edge){y,h[x]},h[x]=cnt,a[++cnt]=(Edge){x,h[y]},h[y]=cnt;}\nvoid Dfs(int x)\n{\n\tbc[dfn[x]=++dfx]=x;\n\tfor(int i=h[x];i;i=a[i].next)\n\t\tif(!dfn[a[i].to]) Dfs(a[i].to);\n\tlow[x]=dfx;\n}\nstruct Array_Tree{\n\tint c[maxn];\n\tvoid ins(int x,int d) {for(;x<=n;x+=x&-x) c[x]+=d;}\n\tint ask(int x) {int res=0;for(;x;x-=x&-x) res+=c[x];return res;}\n}A,B;\nstd::set<int> st[maxn];\nvoid upd(int x,int d) {A.ins(dfn[x],d),A.ins(low[x]+1,-d),B.ins(dfn[x],(low[x]-dfn[x]+1)*d);}\nsigned main()\n{\n\tint x,y;\n\tn=read(),q=read();\n\tfor(int i=1;i<n;i++) add(read(),read());\n\tDfs(1);\n\twhile(q--)\n\t\tif(read()==1)\n\t\t{\n\t\t\tx=read(),y=read();\n\t\t\tauto it=st[y].upper_bound(dfn[x]);\n\t\t\tif(it!=st[y].begin()&&low[bc[*prev(it)]]>=low[x]) continue;//ancestors\n\t\t\twhile(it!=st[y].end()&&(*it)<=low[x]) upd(bc[*it],-1),st[y].erase(it++);\n\t\t\tst[y].insert(dfn[x]),upd(x,1);\n\t\t}\n\t\telse x=read(),printf(\"%d\\n\",(low[x]-dfn[x]+1)*A.ask(dfn[x])+B.ask(low[x])-B.ask(dfn[x]));\n\treturn 0;\n}\n```\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427\u3002",
        "postTime": 1601630738,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5852 \u3010[USACO19DEC]Bessie's Snow Cow P\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5852)\n\n\u6765\u4e00\u53d1~~\u81ea\u8ba4\u4e3a\u5f88\u7b80\u5355\u7684~~\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u8fd8\u662f\u5bf9\u6811\u6c42\u51fa dfs \u5e8f\uff0c\u63a5\u7740\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a dfs \u5e8f\u5217\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u4e30\u5bcc\u5ea6\uff08\u4ee5\u4e0b\u7edf\u79f0\u4e3a\u201c\u6743\u503c\u201d\uff09\u3002\n\n\u96be\u70b9\u5728\u4e8e\u600e\u4e48\u5904\u7406\u540c\u79cd\u989c\u8272\u7684\u8986\u76d6\u5173\u7cfb\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u5efa\u7acb\u4e00\u4e2a set\uff0c\u4fdd\u5b58\u88ab\u67d3\u4e0a\u8fd9\u79cd\u989c\u8272\u7684\u8282\u70b9 dfs \u5e8f\u4f4d\u7f6e\u3002\n\n\u5047\u8bbe\u73b0\u5728\u6b63\u5728\u8fdb\u884c\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5c06 x \u67d3\u6210 col \u8272\uff1a\n\n1. \u627e\u5230 set \u4e2d x \u7684\u524d\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f x \u7684\u7956\u5148\uff0c\u5982\u679c\u662f\u7684\u8bdd\u76f4\u63a5 continue \u8df3\u8fc7\u672c\u6b21\u64cd\u4f5c\u3002\n\n1. \u901a\u8fc7 set \u627e\u5230 x \u5b50\u6811\u4e2d\u5df2\u7ecf\u88ab\u67d3\u4e0a col \u8272\u7684\u8282\u70b9\u3002\n\n1. \u5c06\u8fd9\u4e9b\u8282\u70b9\u7684\u5b50\u6811\u6743\u503c\u603b\u4f53\u51cf 1\uff0c\u540c\u65f6\u628a\u8fd9\u4e9b\u8282\u70b9\u79fb\u51fa set\u3002\n\n1. \u5c06 x \u653e\u5165\u5bf9\u5e94\u7684 set\uff0c\u540c\u65f6\u5c06 x \u5b50\u6811\u4e2d\u7684\u8282\u70b9\u6743\u503c\u603b\u4f53\u52a0 1\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\u7b2c\u4e00\u6b65\uff1a\n\n\u7b2c\u4e00\u6b65\u5728\u5224\u65ad x \u7684\u5b50\u6811\u662f\u5426\u5df2\u7ecf\u88ab\u6574\u4f53\u67d3\u4e0a\u4e86 col \u8272\u3002\u5982\u679c x \u7684\u7956\u5148\u8282\u70b9\u5df2\u7ecf\u88ab\u4e8b\u5148\u67d3\u4e0a\u4e86 col \u8272\uff0c\u90a3\u4e48\u5728 set \u4e2d\u5b83\u4e0e x \u4e4b\u95f4\u4e0d\u5e94\u8be5\u518d\u6709\u5176\u4ed6\u8282\u70b9\uff08\u4e2d\u95f4\u7684\u70b9\u90fd\u5728\u4fee\u6539\u7956\u5148\u8282\u70b9\u65f6\u7684 2\u30013 \u6b65\u88ab\u5220\u6389\u4e86\uff09\u3002\n\n\u81f3\u4e8e\u67e5\u8be2\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u627e\u7ebf\u6bb5\u6811\u4e2d x \u7684\u5b50\u6811\u90e8\u5206\u7684\u6743\u503c\u533a\u95f4\u548c\u5c31\u597d\u3002\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<set>\n#define it set<int>::iterator\n#define ls (x << 1)\n#define rs (x << 1) | 1\n#define int long long\nusing namespace std;\nconst int MAXN = 2e5 + 50;\nset<int> pos[MAXN];\nint dfn[MAXN], siz[MAXN], inv[MAXN];\nstruct edge\n{\n    int nxt, to, val;\n} e[MAXN * 2];\nint head[MAXN], edgetot;\nstruct SegT\n{\n    int val[MAXN * 4], tag[MAXN * 4];\n    void pushdown(int x, int l, int r)\n    {\n        if (tag[x])\n        {\n            tag[ls] += tag[x];\n            tag[rs] += tag[x];\n            int mid = (l + r) >> 1;\n            val[ls] += tag[x] * (mid - l + 1);\n            val[rs] += tag[x] * (r - mid);\n            tag[x] = 0;\n        }\n    }\n    void modify(int x, int l, int r, int tl, int tr, int v)\n    {\n        if (tl > r || tr < l)\n            return;\n        if (tl <= l && tr >= r)\n        {\n            tag[x] += v;\n            val[x] += (r - l + 1) * v;\n            return;\n        }\n        pushdown(x, l, r);\n        int mid = (l + r) >> 1;\n        modify(ls, l, mid, tl, tr, v);\n        modify(rs, mid + 1, r, tl, tr, v);\n        val[x] = val[ls] + val[rs];\n    }\n    int query(int x, int l, int r, int tl, int tr)\n    {\n        if (tl > r || tr < l)\n            return 0;\n        if (tl <= l && tr >= r)\n            return val[x];\n        int mid = (l + r) >> 1;\n        pushdown(x, l, r);\n        return query(ls, l, mid, tl, tr) + query(rs, mid + 1, r, tl, tr);\n    }\n} T;\nint N, timtot, Q;\nvoid add(int x, int y)\n{\n    e[++edgetot].to = y;\n    e[edgetot].nxt = head[x];\n    head[x] = edgetot;\n}\nvoid dfs(int x, int fa)\n{\n    dfn[x] = ++timtot;\n    inv[timtot] = x;\n    siz[x] = 1;\n    for (int i = head[x]; i; i = e[i].nxt)\n    {\n        int v = e[i].to;\n        if (v == fa)\n            continue;\n        dfs(v, x);\n        siz[x] += siz[v];\n    }\n}\nsigned main()\n{\n    scanf(\"%lld%lld\", &N, &Q);\n    for (int i = 1; i <= N - 1; ++i)\n    {\n        int u, v;\n        scanf(\"%lld%lld\", &u, &v);\n        add(u, v);\n        add(v, u);\n    }\n    dfs(1, 0);\n    int cmd = 0;\n    int x, col;\n    while (Q--)\n    {\n        scanf(\"%lld\", &cmd);\n        if (cmd == 1)\n        {\n            scanf(\"%lld%lld\", &x, &col);\n            int l = dfn[x];\n            int r = dfn[x] + siz[x] - 1;\n            it t2 = pos[col].upper_bound(dfn[x]);\n            if (t2 != pos[col].begin())\n            {\n                t2--;\n                if (dfn[x] >= *t2 && dfn[x] <= *t2 + siz[inv[*t2]] - 1)\n                    continue;\n            }\n            it t1 = pos[col].lower_bound(dfn[x]);\n            while (t1 != pos[col].end() && *t1 <= r)\n            {\n                int now = *t1;\n                // cout << \"*\" << now << endl;\n                T.modify(1, 1, N, now, now + siz[inv[now]] - 1, -1);\n                pos[col].erase(t1);\n                t1 = pos[col].lower_bound(dfn[x]);\n            }\n            T.modify(1, 1, N, l, r, 1);\n            pos[col].insert(dfn[x]);\n        }\n        else\n        {\n            scanf(\"%lld\", &x);\n            printf(\"%lld\\n\", T.query(1, 1, N, dfn[x], dfn[x] + siz[x] - 1));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1615631032,
        "uid": 63743,
        "name": "DrBit",
        "ccfLevel": 6,
        "title": "P5852 [USACO19DEC]Bessie's Snow Cow P \uff08dfs\u5e8f+\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "#### B Bessie's Snow Cow\n\n\u9898\u76ee\uff1ahttp://www.usaco.org/index.php?page=viewproblem2&cpid=973\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1.\u7ed9\u5b9ax,c,\u7ed9x\u7684\u5b50\u6811\u67d3\u4e0a\u989c\u8272c\uff08\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6709\u591a\u4e2a\u989c\u8272\uff09\n\n2.\u7ed9\u5b9ax,\u6c42x\u7684\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u6240\u6709\u989c\u8272\u4e2a\u6570\u548c\uff08\u6bcf\u4e2a\u8282\u70b9\u5355\u72ec\u7b97\uff09\n\n\u9898\u89e3\uff1a\n\n\u8fd9\u4e2a\u9898\u6709\u4e24\u4e2a\u96be\u70b9\uff1a\n\n1.\u4fee\u6539\u65f6\uff0c\u5982\u4f55\u66f4\u65b0\u5176\u5bf9\u5b50\u6811\u5185\u8282\u70b9\u7684\u8d21\u732e\uff0c\u4ee5\u53ca\u5982\u4f55\u4e0a\u4f20\u5bf9\u7956\u5148\u7684\u5f71\u54cd\uff1b\n\n2.\u67e5\u8be2\u65f6\uff0c\u5982\u4f55\u4e00\u6b21\u6027\u7edf\u8ba1\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u8d21\u732e\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u53d8\u4e3aO(logn)\u751a\u81f3O(1),\u53e6\u4e00\u4e2a\u64cd\u4f5c\u7684\n\u590d\u6742\u5ea6\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u5230\u8fbeO(n)\u3002\n\n\u8003\u8651\u7edf\u8ba1\u7b54\u6848\u3002\u7b54\u6848\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u662fx\u6216x\u7684\u7956\u5148\u5df2\u7ecf\u67d3\u8fc7\u7684\u989c\u8272\uff0c\n\u8fd9\u4e9b\u7684\u8d21\u732e\u53ef\u4ee5\u4e00\u5e76\u8ba1\u7b97;\u4e8c\u662f\u5b50\u6811\u5185\u67d3\u8272\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u4fee\u6539\u65f6\u533a\u95f4\u52a0\u5c31\u884c\u4e86\uff0c\u5f53\u7136\u8fd8\u8981\u64a4\u9500\u4e4b\u524d\u5b50\u6811\u5185\n\u7684\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\u7684\u8d21\u732e\u3002\n\n\u6211\u4eec\u4ee5\u8fd9\u68f5\u6811\u7684dfs\u5e8f\u4e3a\u4e0b\u6807\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u7528\u5dee\u5206\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5df2\u7ecf\u67d3\n\u4e0a\u7684\u989c\u8272\u4e2a\u6570\uff0c\u518d\u5f001e5\u4e2aset\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u989c\u8272\u7684\u67d3\u8272\u60c5\u51b5\uff0c\u907f\u514d\u91cd\u590d\u67d3\u8272\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1.\u5224\u65adx\u7684\u7956\u5148\u662f\u5426\u5df2\u7ecf\u88ab\u67d3\u4e0ac\u8272\u3002\u82e5\u5df2\u7ecf\u67d3\u8272\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\n\n2.\u67e5\u8be2x\u5b50\u6811\u5185\u662f\u5426\u6709\u8282\u70b9\u67d3\u4e0ac\u8272\u3002\u82e5\u5df2\u7ecf\u67d3\u8272\uff0c\u64a4\u9500\u5176\u5f71\u54cd\u5e76\u5728set\u4e2d\n\u5220\u9664\u6b64\u8282\u70b9\uff1b\n\n3.\u5c06\u6b64\u6b21\u4fee\u6539\u52a0\u5165set,\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u3002\n\n\u90a3\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\uff0c\u53c8\u8be5\u600e\u4e48\u6c42\u5462\uff1f\n\n\u56e0\u4e3a\u8fd9\u4e9b\u8d21\u732e\u662f\u4e00\u6bb5dfs\u5e8f\u8fde\u7eed\u533a\u95f4\u7684\u5355\u70b9\u8d21\u732e\uff0c\u6211\u4eec\u53ef\u4ee5\u53e6\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\n\n\u8bb0\u5f55\u8fd9\u4e2a\u8d21\u732e\u3002\u6bcf\u6b21\u4fee\u6539\u53ea\u9700\u8981\u5355\u70b9+siz[x]\u5373\u53ef\u3002\n\n\u4fee\u6539\u64cd\u4f5c\u7684\u6b65\u9aa4\u540c\u4e0a\u3002\u6bcf\u6b21\u53ea\u9700\u8981\u67e5\u8be2[id[x]+1,id[x]+siz[x]-1]\u8fd9\u6bb5\u533a\u95f4\u7684\n\n\u8d21\u732e\u5373\u53ef\uff08\u4e5f\u5c31\u662fx\u5b50\u6811\u9664\u53bbx\u8282\u70b9\u7684\u8d21\u732e\uff09\n\n\u8bbe\u4e24\u4e2a\u67e5\u8be2\u5f97\u5230\u7684\u503c\u662fans1\u548cans2,\u90a3\u4e48\u7b54\u6848\u5373\u4e3a\uff1asiz[x]*ans1+ans2\n\n\u590d\u6742\u5ea6\uff1a\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u53ea\u4f1a\u88ab\u52a0\u5165\u548c\u64a4\u9500\u4e00\u6b21\uff0c\u6bcf\u6b21\u90fd\u662fO(logn),\n\n\u67e5\u8be2\u4e5f\u662fO(logn)\u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5373\u4e3aO(nlogn)\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register ll\n#define F(x,y,z) for(re x=y;x<=z;x++)\n#define FOR(x,y,z) for(re x=y;x>=z;x--)\ntypedef long long ll;\n#define I inline void\n#define IN inline ll\ntemplate<class D>I read(D &res){\n\tres=0;register D g=1;register char ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')g=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tres=(res<<3)+(res<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\tres*=g;\n}\nconst ll INF=1e9+7;\nstruct E{\n\tll to,nt;\n}e[202000];\n#define T e[k].to\nll n,m,tot,sit,X,Y,head[101000],siz[101000],id[101000],p[101000],out[101000];\nstruct BIT{\n\tll tr[101000],res;\n\tIN lbt(ll x){\n\t\treturn x&(-x);\n\t}\n\tI modi(ll x,ll w){while(x<=n){tr[x]+=w,x+=lbt(x);}}\n\tIN ques(ll x){res=0;while(x){res+=tr[x],x-=lbt(x);}return res;}\n}A,B;\nset<ll>s[101000];\nI modify(ll x,ll sn){\n\tA.modi(id[x],sn);\n\tA.modi(out[x]+1,-1*sn);\n\tB.modi(id[x],sn*siz[x]);\n\t//cout<<id[x]<<\" \"<<out[x]<<\" \"<<sn<<endl;\n}\nI D_1(ll x,ll fa){\n\tid[x]=++tot;siz[x]=1;p[tot]=x;\n\tfor(re k=head[x];k!=-1;k=e[k].nt){\n\t\tif(T==fa)continue;\n\t\tD_1(T,x);siz[x]+=siz[T];\n\t}\n\tout[x]=tot;\n}\nint main(){\n\tfreopen(\"snowcow.in\",\"r\",stdin);\n\tfreopen(\"snowcow.out\",\"w\",stdout);\n\tread(n);read(m);\n\tmemset(head,-1,sizeof(head));\n\ttot=-1;\n\tF(i,1,n-1){\n\t\tread(X);read(Y);\n\t\te[++tot].to=Y;\n\t\te[tot].nt=head[X];\n\t\thead[X]=tot;\n\t\te[++tot].to=X;\n\t\te[tot].nt=head[Y];\n\t\thead[Y]=tot;\n\t}\n\tF(i,0,100000)s[i].insert(INF);\n\ttot=0;\n\tD_1(1,0);\n\t//F(i,1,n)cout<<id[i]<<\" \"<<siz[i]<<\" \"<<out[i]<<endl;\n\twhile(m--){\n\t\tread(sit);read(X);\n\t\tif(sit==1){\n\t\t\tread(Y);\n\t\t\tauto P=s[Y].upper_bound(id[X]);\n\t\t\tif(P!=s[Y].begin()&&out[p[*prev(P)]]>=out[X])continue;\n\t\t\twhile(1){\n\t\t\t\tP=s[Y].upper_bound(id[X]);\n\t\t\t\tif(*P>out[X])break;\n\t\t\t\tmodify(p[*P],-1);\n\t\t\t\ts[Y].erase(P);\n\t\t\t}\n\t\t\ts[Y].insert(id[X]);\n\t\t\tmodify(X,1);\n\t\t}\n\t\telse printf(\"%lld\\n\",siz[X]*A.ques(id[X])+B.ques(out[X])-B.ques(id[X]));//printf(\"%d %d %d %d %d %lld\\n\",id[X],out[X],A.ques(id[X]),B.ques(out[X]),B.ques(id[X]),(ll)siz[X]*A.ques(id[X])+(ll)B.ques(out[X])-(ll)B.ques(id[X]));\n\t}\n\treturn 0;\n}\n```\n\u63a8\u8350\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff0chttps://www.cnblogs.com/Purple-wzy/\n\n\u8fd9\u91cc\u6709USACO12\u6708\u6708\u8d5b\u7684\u5168\u90e812\u7bc7\u9898\u89e3~",
        "postTime": 1578202904,
        "uid": 93453,
        "name": "Purple_wzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5852 \u3010[USACO19DEC]Bessie's Snow Cow\u3011"
    },
    {
        "content": "\u5c0f\u767d\u6559\u7a0b-\u4ece\u96f6\u5f00\u59cb\u8ba4\u8bc6\u8fd9\u9053\u9898\u3002\n\n\u4e4b\u524d\u4e24\u4f4d\u5927\u4f6c\u5df2\u7ecf\u5c06\u601d\u8def\u8bb2\u5f97\u5f88\u5b8c\u6574\u4e86\uff0c\u53ea\u662f\u6709\u4e00\u4e9b\u5177\u4f53\u7684\u5b9e\u73b0\u6ca1\u6709\u8bb2\u5f97\u5f88\u5168\uff0c\u53ea\u5728\u5176\u4ee3\u7801\u4e2d\u6709\u4f53\u73b0\u3002\u6240\u4ee5\u6211\u5728\u6b64\u505a\u4e00\u7bc7\u4e3b\u653b\u5b9e\u73b0\u7684\u9898\u89e3\u3002\n\n**\u672c\u9898\u7684\u601d\u8def**\n\n\u5148\u7528 **DFS\u5e8f** \u5c06\u6574\u68f5\u6811\u8f6c\u5316\u6210\u4e00\u4e2a\u5e8f\u5217(\u6211\u4eec\u7528 $dfn[x]$ \u8868\u793a $x$ \u7684DFS\u5e8f\uff0c\u7528 $low[x]$ \u8868\u793a $x$ \u7684\u5b50\u6811\u4e2d(\u542b $x$ ) $dfn$ \u6700\u5927\u7684\u70b9\u7684 $dfn$)\uff0c\u7528\u989c\u6599\u6570( $10^5$ )\u4e2a $set$ \u7ef4\u62a4\u88ab\u67d3\u4e0a\u6bcf\u79cd\u989c\u8272\u7684 **\u533a\u95f4** (\u4e3a\u4e86\u65b9\u4fbf\u67e5\u8be2\uff0c\u6b64\u5904\u5b58\u50a8\u7684\u533a\u95f4\u662f\u53cd\u7684\uff0c\u5373 $set$ \u91cc\u9762\u7684\u5143\u7d20\u7684 $first>second$ )\uff0c\u518d\u5f00\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4 $c1,c2$\u3002\u67e5\u8be2\u65f6\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5373 $x$ (\u542b\u4e49\u5982\u9898\u4e2d\u6240\u793a)\u7956\u5148\u5bf9\u67e5\u8be2\u7684\u5f71\u54cd(\u4e5f\u5c31\u662f\u6574\u68f5\u88ab\u67e5\u8be2\u5b50\u6811\u90fd\u88ab\u67d3\u4e0a\u7684\u989c\u8272)\u4e0e\u5b50\u6811\u5185\u90e8\u8282\u70b9\u5bf9\u67e5\u8be2\u7684\u5f71\u54cd\u3002\n\n**\u672c\u9898\u7684\u5177\u4f53\u5b9e\u73b0**\n\n\u6bcf\u4e00\u4e2a $set$ \u7ef4\u62a4\u7684\u533a\u95f4\u8981\u4fdd\u8bc1\u4e0d\u51fa\u73b0\u5305\u542b\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u51fa\u73b0\u4e00\u4e2a $set$ \u4e2d\u51fa\u73b0\u4e24\u4e2a $pair\\ p1,p2$ \u6ee1\u8db3 $p1.first<p2.first\\ \\&\\ p1.second>p2.second$ \uff0c\u8fd9\u6837\u6211\u4eec\u5728\u67e5\u8be2\u65f6\u624d\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u3002\u5173\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u63d2\u5165\u65f6 $lower\\_bound(p),$ \u5176\u4e2d $p.first=dfn[x],p.second=0$ \u3002\u5982\u679c\u6211\u4eec\u641c\u51fa\u6765\u7684\u533a\u95f4 **\u5305\u542b** \u6211\u4eec\u5c06\u8981\u63d2\u5165\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7565\u8fc7\u6b64\u6b21\u4fee\u6539\uff1b\u5982\u679c\u6211\u4eec\u641c\u51fa\u6765\u7684\u533a\u95f4 **\u88ab\u5305\u542b\u4e8e** \u6211\u4eec\u5c06\u8981\u63d2\u5165\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec **\u64a4\u9500** \u90a3\u6b21\u64cd\u4f5c\u7684 **\u6240\u6709\u5f71\u54cd** \uff0c\u5e76**\u7ee7\u7eed\u641c\u7d22**\u76f4\u5230\u641c\u51fa\u6765\u7684\u533a\u95f4\u4e0e\u6211\u4eec\u5c06\u8981\u63d2\u5165\u7684\u533a\u95f4\u4e0d\u4ea4\u4e3a\u6b62\uff0c\u5e76 **\u63d2\u5165** \u672c\u4e2a\u533a\u95f4\u5e76\u6dfb\u52a0\u5176\u5f71\u54cd\u3002\n\n\u5173\u4e8e\u5f71\u54cd\uff1a\n\n\u6211\u4eec\u7528 $c1$ \u6765 **\u5dee\u5206\u7ef4\u62a4** \u6bcf\u4e2a\u8282\u70b9\u7684 **\u603b\u989c\u8272\u6570**(\u6bd4\u5982\u7b2c\u4e00\u6b21\u67d3\u4e86\u8282\u70b9 $x1$ \uff0c\u90a3\u4e48\u5c31\u5728 $c2$ \u7684 $dfn[x1]$ \u8282\u70b9\u4e0a\u52a0\u4e0a $1$ \u7684\u6570\u503c\uff0c\u5728 $low[x1]$ \u8282\u70b9\u4e0a\u52a0\u4e0a $-1$ \u7684\u6570\u503c)\uff0c\u7528 $c2$ \u6765\u7ef4\u62a4(\u666e\u901a\u7ef4\u62a4)\u6bcf\u4e2a\u8282\u70b9\u76ee\u524d\u6240\u505a\u7684 **\u8d21\u732e** (\u6bd4\u5982\u7b2c\u4e00\u6b21\u67d3\u4e86\u8282\u70b9 $x1$ \uff0c\u90a3\u4e48\u5c31\u5728 $c2$ \u7684 $dfn[x1]$ \u8282\u70b9\u4e0a\u52a0\u4e0a $low[x1]-dfn[x1]+1$ \u7684\u6570\u503c)\n\n\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2 $c1$ \u4e2d $1-dfn[x]$ \u7684\u90e8\u5206(\u8bbe\u4e3a $ans1$ )\u4e0e $c2$ \u4e2d $dfn[x]+1-low[x]$ \u7684\u90e8\u5206(\u8bbe\u4e3a $ans2$ )\uff0c\u90a3\u4e48\u6700\u7ec8\u7b54\u6848\u5c31\u662f $ans1 \\times (low[x]-dfn[x]+1)+ans2$ \uff0c**\u8bb0\u5f97\u53d6\u6a21**\u3002",
        "postTime": 1612882588,
        "uid": 34200,
        "name": "wf1594937223",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5852 \u3010[USACO19DEC]Bessie's Snow Cow P\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n1 \u64cd\u4f5c\uff1a\u628a x \u7684\u5b50\u6811\u90fd\u67d3\u4e0a\u989c\u8272 c\u3002\n\n2 \u64cd\u4f5c\uff1a\u6c42 x \u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\u79cd\u6570\u548c\n\n## \u601d\u8def\n\n~~\u9996\u5148\u8fd9\u9898\u53ef\u4ee5\u5199\u6811\u5256\uff0c\u4f46\u662f\u672c\u4eba\u592a\u5dee\u6ca1\u5199~~\n\n\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u65f6\u95f4\u6233\u7684\u6027\u8d28\uff1a\u540c\u4e2a\u5b50\u6811\u5185\u8282\u70b9\u7f16\u53f7\u662f\u8fde\u8d77\u6765\u7684\u5199\u7ebf\u6bb5\u6811\u3002\n\u5c31\u662f\u8981\u6c42\u51fa size,\u67e5\u8be2\u7684\u5c31\u662f $ [dfn_x,dfn_x+sz_x-1] $\u3002\n\n\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a set\uff0c\u5b58\u50a8\u6bcf\u79cd\u989c\u8272\u54ea\u4e9b\u70b9\u67d3\u4e0a\u4e86\u3002\u4f46\u662f\u70b9\u592a\u591a\u4e86\uff0c\u76f4\u63a5\u5b58\u50a8\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u70b9 x \u67d3\u4e0a c\uff0c\u90a3\u4e48\u4ed6\u7684\u5728 set \u4e2d\u7684\u5b50\u5b59\u5c31\u53ef\u4ee5\u5220\u9664\u4e86\uff0c\u53ea\u7528\u52a0\u5165\u7956\u5148\u5c31\u884c\u4e86\u3002\u8fd9\u91cc\u53ea\u9700\u8981\u66b4\u529b\u5220\u9664\u5b50\u5b59\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u6700\u591a\u53ea\u4f1a\u5220\u4e00\u6b21\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f $ O(n) $ \u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u7136\u540e\u5982\u679c\u70b9 x \u8981\u67d3\u4e0a c\uff0c\u4e14\u53d1\u73b0\u4ed6\u7684\u7956\u5148\u5df2\u7ecf\u5728 set \u4e2d\uff0c\u5c31\u662f\u67d3\u8fc7\u4e86\uff0c\u90a3\u4e48\u8fd9\u6b21\u4fee\u6539\u5c31\u53ef\u4ee5\u5ffd\u7565\u4e86\u3002\n\n\u8fd9\u91cc\u8fd8\u6ca1\u5b8c\uff0c\u5982\u679c\u76f4\u63a5\u8fd9\u6837\u5927\u6982\u7387\u4f1a WA \u7684\uff08\u4eb2\u8eab\u7ecf\u9a8c\uff09\u3002\u4e00\u4e2a\u5de8\u5751\uff1a\u9898\u76ee\u4e2d\u8bf4\u7684\u662f\u94fe\uff0c\u5c31\u662f\u8bf4\u53ef\u80fd\u4f1a\u51fa\u73b0 $ r>l $ \u7684\u60c5\u51b5\uff0c\u9700\u8981\u7279\u5224\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>//\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01\n\n#define int long long\n\n#define iterator set<int>::iterator\n\nusing namespace std;\n\nconst int maxn=1e5+5;\nstruct edge{\n\tint to,nxt;\n}e[maxn<<1];\nint head[maxn],len,tim;\nint sz[maxn],dfn[maxn],dfx[maxn];\nint sum[maxn<<2],lz[maxn<<2];\nset<int> st[maxn];\n\ninline void init(){\n\tmemset(head,-1,sizeof(head));\n\ttim=len=0;\n}\nvoid add(int u,int v){\n\te[++len].to=v;\n\te[len].nxt=head[u];\n\thead[u]=len;\n}\n\nvoid pushup(int now){//\u7ebf\u6bb5\u6811\u677f\u5b50\n\tsum[now]=sum[now<<1]+sum[now<<1|1];\n}\nvoid pushdown(int now,int l,int r){\n\tif(lz[now]){\n\t\tint mid=(l+r)>>1;\n\t\tsum[now<<1]+=(mid-l+1)*lz[now];\n\t\tlz[now<<1]+=lz[now];\n\t\tsum[now<<1|1]+=(r-mid)*lz[now];\n\t\tlz[now<<1|1]+=lz[now];\n\t\tlz[now]=0;\n\t}\n}\nvoid build(int now,int l,int r){\n\tsum[now]=lz[now]=0;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tbuild(now<<1,l,mid);\n\tbuild(now<<1|1,mid+1,r);\n\tpushup(now);\n}\nvoid update(int now,int l,int r,int ql,int qr,int x){\n\tif(l>qr||r<ql) return;\n\tif(ql<=l&&qr>=r){\n\t\tsum[now]+=(r-l+1)*x;\n\t\tlz[now]+=x;\n\t\treturn;\n\t}\n\tpushdown(now,l,r);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) update(now<<1,l,mid,ql,qr,x);\n\tif(qr>mid) update(now<<1|1,mid+1,r,ql,qr,x);\n\tpushup(now);\n}\nint query(int now,int l,int r,int ql,int qr){\n\tif(l>qr||r<ql) return 0;\n\tif(ql<=l&&qr>=r) return sum[now];\n\tpushdown(now,l,r);\n\tint mid=(l+r)>>1,res=0;\n\tif(ql<=mid) res+=query(now<<1,l,mid,ql,qr);\n\tif(qr>mid) res+=query(now<<1|1,mid+1,r,ql,qr);\n\treturn res;\n}\n\nvoid dfs(int u,int f){//\u8ba1\u7b97 sz \u548c dfn\n\tdfn[u]=++tim;\n\tdfx[tim]=u;\n\tsz[u]=1;\n\tfor(int i=head[u];i!=-1;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tdfs(v,u);\n\t\tsz[u]+=sz[v];\n\t}\n}\n\nsigned main(){\n\t\n\tinit();\n\t\n\tint n,q;\n\t\n\tscanf(\"%lld %lld\",&n,&q);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tscanf(\"%lld %lld\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\t\n\tdfs(1,0);\n\tbuild(1,1,n);\n\t\n\twhile(q--){\n\t\tint op;\n\t\tscanf(\"%lld\",&op);\n\t\tif(op==1){\n\t\t\tint x,c;\n\t\t\tscanf(\"%lld %lld\",&x,&c);\n\t\t\tint l=dfn[x],r=dfn[x]+sz[x]-1;\n\t\t\titerator it=st[c].upper_bound(dfn[x]);\n\t\t\tif(it!=st[c].begin()){\n\t\t\t\tit--;\n\t\t\t\tif(dfn[x]>=*it&&dfn[x]<=*it+sz[dfx[*it]]-1) continue;//\u60c5\u51b52\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8be5\u64cd\u4f5c\n\t\t\t}\n\t\t\titerator it2=st[c].lower_bound(dfn[x]);\n\t\t\twhile(it2!=st[c].end()&&*it2<=r){//\u66b4\u529b\u5220\u5b50\u5b59\n\t\t\t\tint now=*it2;\n\t\t\t\tupdate(1,1,n,now,now+sz[dfx[now]]-1,-1);\n\t\t\t\tst[c].erase(it2);\n\t\t\t\tit2=st[c].lower_bound(dfn[x]);\n\t\t\t}\n\t\t\tupdate(1,1,n,l,r,1);\n\t\t\tst[c].insert(dfn[x]);\n\t\t}else{//\u67e5\u8be2\n\t\t\tint x;\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tprintf(\"%lld\\n\",query(1,1,n,dfn[x],dfn[x]+sz[x]-1));\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1653046962,
        "uid": 234469,
        "name": "hxyqwq",
        "ccfLevel": 6,
        "title": "P5852\u9898\u89e3"
    },
    {
        "content": "## Solution\n\n\u770b\u5230\u5b50\u6811 , \u679c\u65ad\u8f6c\u4e3a `DFS` \u5e8f .\n\n\u8003\u8651\u4f7f\u7528 `set` \u6765\u5b58\u6bcf\u79cd\u989c\u8272\u7684\u70b9 , \u6765\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5168\u88ab\u67d3\u4e0a\u8fd9\u4e00\u79cd\u989c\u8272 . \u6ce8\u610f , \u8fd9\u4e9b\u70b9\u4e0d\u53ef\u5b58\u5728\u5305\u542b\u5173\u7cfb , \u4e0d\u7136\u4f1a\u51fa\u73b0\u91cd\u590d .\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4 . \u65b0\u52a0\u5165\u4e00\u4e2a\u70b9 , \u5148\u5224\u65ad\u5b83\u7684\u7956\u5148\u662f\u5426\u5df2\u7ecf\u5165 . \u5982\u679c\u662f , \u5219\u9000\u51fa .\n\n> \u5728 set \u4e2d\u4e8c\u5206\u627e\u5230 dfn \u5c0f\u4e8e\u7b49\u4e8e u \u7684\u6700\u5927\u7684\u70b9 . \u5982\u679c u \u7684\u7956\u5148\u5df2\u7ecf\u5728\u91cc\u9762\u4e86 , \u5219\u8fd9\u4e2a\u70b9\u5fc5\u662f u \u7684\u7956\u5148 . \u56e0\u4e3a\u7956\u5148\u7684\u5176\u5b83\u540e\u4ee3\u5df2\u7ecf\u5728\u524d\u9762\u88ab\u5220\u6389\u4e86 .\n\n\u7136\u540e\u4f9d\u6b21\u5220\u9664\u5b83\u7684\u540e\u4ee3 .\n\n> \u5728 set \u91cc\u627e . \u6709\u4eba\u8ba4\u4e3a\u590d\u6742\u5ea6\u662f $O(nm \\text{log} m)$ \u7684 , \u5b9e\u9645\u4e0a , \u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u52a0\u5165\u4e00\u6b21\u5220\u9664\u4e00\u6b21 , \u6240\u4ee5\u590d\u6742\u5ea6\u662f $O(m \\text{log} m)$ \u7684 .\n\n\u5bf9\u4e8e\u8be2\u95ee , \u5148\u8981\u77e5\u9053\u5b83\u7684\u7956\u5148\u4eec\u548c\u540e\u4ee3\u6709\u591a\u5c11\u5728\u5404\u4e2a `set` \u4e2d . \n\n\u53ef\u4ee5\u5f00 2 \u4e2a\u6811\u72b6\u6570\u7ec4 . \u4e00\u4e2a\u7ef4\u62a4\u7956\u5148\u7684\u503c , \u5177\u4f53\u8868\u73b0\u5728\u7ed9\u7956\u5148\u7684\u5b50\u6811\u533a\u95f4\u52a01 , \u8be2\u95ee\u7684\u65f6\u5019\u5355\u70b9\u6c42\u548c , \u5c31\u77e5\u9053\u5b83\u6709\u591a\u5c11\u4e2a\u7956\u5148\u5728 `set` \u91cc .\n\n\u53e6\u4e00\u4e2a\u7ef4\u62a4\u5b50\u6811 , \u628a\u4e00\u4e2a\u5b50\u6811\u7684\u67d3\u8272\u96c6\u4e2d\u5728\u6839 , \u8be2\u95ee\u65f6\u5bf9\u5176\u5b50\u6811\u533a\u95f4\u6c42\u548c .\n\n\u6ce8\u610f\u6211\u4eec\u628a\u7ed3\u70b9\u5f53\u505a\u81ea\u5df1\u7684\u7956\u5148 , \u6240\u4ee5\u7b2c\u4e8c\u4e2a\u6811\u72b6\u6570\u7ec4\u8be2\u95ee\u65f6\u4e0d\u53ef\u4ee5\u7b97\u4e0a\u90a3\u4e2a\u7ed3\u70b9\u672c\u8eab .\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ffor(i,a,b) for(int i=(a);i<=(b);i++)\n#define roff(i,a,b) for(int i=(a);i>=(b);i--)\nusing namespace std;\nconst int MAXN=1e5+10;\nint n,q,idx,dfn[MAXN],low[MAXN],rev[MAXN];\nvector<int> G[MAXN];\nset<int> col[MAXN];\nint lowbit(int k) {\n\treturn k&-k;\n}\nstruct BIT {\n\tint n,tr[MAXN];\n\tvoid init(int N) {\n\t\treturn n=N,memset(tr,0,sizeof(tr)),void();\n\t}\n\tvoid update(int pos,int v) {\n\t\twhile(pos<=n) tr[pos]+=v,pos+=lowbit(pos);\n\t\treturn ;\n\t}\n\tint Query(int pos) {\n\t\tint ans=0;\n\t\twhile(pos) ans+=tr[pos],pos-=lowbit(pos);\n\t\treturn ans;\n\t}\n\tint query(int l,int r) {\n\t\treturn Query(r)-Query(l-1);\n\t}\n}bit1,bit2; //bit1 \u7528\u6765\u8bb0\u5f55\u603b\u4f53\u4fee\u6539 bit2 \u7528\u6765\u8bb0\u5f55\u5b57\u6570\u5185\u4fee\u6539\nvoid dfs(int u,int f) {\n\tdfn[u]=++idx,rev[idx]=u;\n\tfor(int to:G[u]) {\n\t\tif(to==f) continue;\n\t\tdfs(to,u);\n\t}\n\tlow[u]=idx;\n\treturn ;\n}\nint ancestor(int u,int c) {\n\tauto it=col[c].upper_bound(dfn[u]);\n\tif(it==col[c].begin()) return 0;\n\tit=prev(it);if(low[rev[*it]]>=low[u]) return 1;\n\treturn 0;\n}\nsigned main() {\n\tscanf(\"%lld %lld\",&n,&q);\n\tffor(i,1,n-1) {\n\t\tint u,v;\n\t\tscanf(\"%lld %lld\",&u,&v);\n\t\tG[u].push_back(v),G[v].push_back(u);\n\t}\n\tdfs(1,0);\n\tbit1.init(n),bit2.init(n);\n\tffor(i,1,q) {\n\t\tint op,x,c;\n\t\tscanf(\"%lld %lld\",&op,&x);\n\t\tif(op==1) {\n\t\t\tscanf(\"%lld\",&c);\n\t\t\tif(ancestor(x,c)) continue;\n\t\t\tauto it=col[c].upper_bound(dfn[x]);\n\t\t\twhile(it!=col[c].end()&&dfn[rev[*it]]<=low[x]) {\n\t\t\t\tint v=rev[*it];\n\t\t\t\tbit1.update(dfn[v],-1),bit1.update(low[v]+1,1),bit2.update(dfn[v],-(low[v]-dfn[v]+1));\n\t\t\t\tcol[c].erase(it++);\n\t\t\t}\n\t\t\tbit1.update(dfn[x],1),bit1.update(low[x]+1,-1),bit2.update(dfn[x],low[x]-dfn[x]+1);\n\t\t\tcol[c].insert(dfn[x]);\n\t\t}\n\t\telse printf(\"%lld\\n\",bit1.query(1,dfn[x])*(low[x]-dfn[x]+1)+bit2.query(dfn[x]+1,low[x]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1647521949,
        "uid": 120947,
        "name": "Purslane",
        "ccfLevel": 7,
        "title": "P5852"
    },
    {
        "content": "## \u9898\u76ee\u7b80\u8ff0\n\n> - \u7ed9\u5b9a\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\uff0c\u7ef4\u62a4\u4e00\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n>   - \u7ed9 $u$ \u4e3a\u6839\u7684\u6811\u8282\u70b9\u67d3\u989c\u8272 $col$\u3002\n>   - \u8be2\u95ee\u4ee5 $u$ \u4e3a\u6839\u7684\u6811\u4e2d\u6240\u6709\u8282\u70b9\u66fe\u7ecf\u67d3\u8fc7**\u4e0d\u540c**\u989c\u8272\u7684\u6570\u91cf\u548c\u3002\n> - $n,q\\leq10^5$\u3002\n\n## \u89e3\u9898\u601d\u8def\n\n\u770b\u5230\u5b50\u6811\u7b2c\u4e00\u6b65\u60f3\u5230 $dfs$ \u5e8f\u8f6c\u6362\u6210\u533a\u95f4\u95ee\u9898\u3002\n\n\u6211\u4eec\u53ea\u9700\u5355\u72ec\u8003\u8651\u6bcf\u4e00\u79cd\u989c\u8272\u3002\u4e0d\u96be\u53d1\u73b0\u5728\u8fdb\u884c\u64cd\u4f5c $1$ \u7684\u65f6\u5019\u53ef\u80fd\u6709\u201c\u541e\u5e76\u201d\u7684\u60c5\u51b5\u3002\u89e3\u51b3\u6b64\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u7ed9\u6bcf\u4e00\u79cd\u989c\u8272 $c$ \u5f00\u4e00\u4e2a `set` \u5b58\u5165\u73b0\u5728\u6240\u6709\u7528 $c$ \u67d3\u671f\u5b50\u6811\u7684\u8282\u70b9\uff0c\u6bcf\u6b21\u4e0d\u65ad\u5f39\u51fa $dfs$ \u5e8f\u7b2c\u4e00\u4e2a\u6bd4 $x$ \u7684 $dfs$ \u5e8f\u5927\u7684\u5143\u7d20\u8bb0\u4e3a $y$\u3002\u5982\u679c $dfs_y\\leq dfs_x+size_x$ \u4e5f\u5c31\u662f $y$ \u5728 $x$ \u7684\u5b50\u6811\u5185\uff0c\u5c31\u628a $y$ \u7684\u8d21\u732e\u5148\u6e05\u7406\u6389\u3002\u6211\u4eec\u518d\u627e `set` \u5f53\u4e2d\u7b2c\u4e00\u4e2a\u6bd4 $dfs_x$ \u5c0f\u7684\u5143\u7d20 $z$\uff0c\u5982\u679c $x$ \u5728 $z$ \u7684\u5b50\u6811\u5185\u90a3 $x$ \u7684\u8d21\u732e\u5c31\u4e0d\u7528\u52a0\u4e86\u3002\u5426\u5219\u7ed9\u533a\u95f4 $[ls_x,ls_x+size_x]$ \u52a0 $1$\uff08\u65b9\u4fbf\u8d77\u89c1\uff0c\u4ee3\u7801\u4e2d\u7684 `set` \u76f4\u63a5\u5b58\u50a8 $dfs$ \u5e8f\uff09\u3002\n\n\u67e5\u8be2\u76f4\u63a5\u67e5\u8be2\u533a\u95f4 $[ls_x,ls_x+size_x]$ \u7684\u548c\u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u628a\u539f\u95ee\u9898\u53d8\u6210\u4e86\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n+q)\\log n)$\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<set>\n#include<vector> \nusing namespace std;\n#define ll long long\n#define IT set<int>::iterator\nconst int MAXN=1e5+5;\nint a[MAXN];\nset<int> se[MAXN];\nint ls[MAXN],rs[MAXN],dfn[MAXN],tot=0;\nint n,q;\nvector<int> ve[MAXN];\nstruct sugtree{\n\tll siz,val,laz;\n}p[MAXN<<2];\nvoid dfs(int u,int fa){\n\tls[u]=++tot,dfn[tot]=u;\n\tfor(int v:ve[u])\n\t\tif(v!=fa)\n\t\t\tdfs(v,u);\n\trs[u]=tot;\n\treturn;\n}\nvoid build(int id=1,int l=1,int r=n){\n\tp[id].siz=(r-l+1);\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tbuild(id<<1,l,mid);\n\tbuild(id<<1|1,mid+1,r);\n}\nvoid pushdown(int id){\n\tp[id<<1].val+=p[id<<1].siz*p[id].laz,\n\tp[id<<1|1].val+=p[id<<1|1].siz*p[id].laz,\n\tp[id<<1].laz+=p[id].laz,\n\tp[id<<1|1].laz+=p[id].laz;\n\tp[id].laz=0; \n\treturn;\n}\nvoid pushup(int id){\n\tp[id].val=p[id<<1].val+p[id<<1|1].val;\n\treturn;\n}\nvoid add(int id,int l,int r,int L,int R,int d){\n\tif(L<=l&&r<=R){\n\t\tp[id].val+=p[id].siz*d;\n\t\tp[id].laz+=d;\n\t\treturn;\n\t}\n\tpushdown(id);\n\tint mid=l+r>>1;\n\tif(L<=mid) add(id<<1,l,mid,L,R,d);\n\tif(mid<R) add(id<<1|1,mid+1,r,L,R,d);\n\tpushup(id);\n\treturn;\n}\nll query(int id,int l,int r,int L,int R){\n\tif(L<=l&&r<=R)\n\t\treturn p[id].val;\n\tpushdown(id);\n\tint mid=l+r>>1;ll ans=0;\n\tif(L<=mid) ans+=query(id<<1,l,mid,L,R);\n\tif(mid<R) ans+=query(id<<1|1,mid+1,r,L,R);\n\treturn ans;\n}\nint main(){\n\tcin>>n>>q;\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;cin>>u>>v;\n\t\tve[u].push_back(v);\n\t\tve[v].push_back(u);\n\t}\n\tbuild();\n\tdfs(1,0);\n\twhile(q--){\n\t\tint op;cin>>op;\n\t\tif(op==1){\n\t\t\tint x,col;\n\t\t\tcin>>x>>col;\n\t\t\tIT it=se[col].upper_bound(ls[x]);\n\t\t\twhile(it!=se[col].end()&&*it<=rs[x]){\n\t\t\t\tadd(1,1,n,*it,rs[dfn[*it]],-1);\n\t\t\t\tse[col].erase(it);\n\t\t\t\tit=se[col].upper_bound(ls[x]);\n\t\t\t}\n\t\t\tif(it!=se[col].begin()){\n\t\t\t\tit--;\n\t\t\t\tif(ls[x]<=rs[dfn[*it]])//\u88ab\u5305\u542b\u5728 *it \u4e2d\n\t\t\t\t\tcontinue; \n\t\t\t}\n\t\t\tse[col].insert(ls[x]);\n\t\t\tadd(1,1,n,ls[x],rs[x],1);\n\t\t}\n\t\telse{\n\t\t\tint x;cin>>x;\n\t\t\tcout<<query(1,1,n,ls[x],rs[x])<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1673100819,
        "uid": 248400,
        "name": "Inaba_Meguru",
        "ccfLevel": 7,
        "title": "P5852 [USACO19DEC]Bessie's Snow Cow P \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u5206\u6790\uff1a\n\n\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u4e00\u4e2a\u5f53\u4e2d\u7684\u67d0\u4e9b\u5143\u7d20\u4e5f\u5728\u53e6\u4e00\u4e2a\u5f53\u4e2d\u51fa\u73b0\u8fc7\u3002\n\n### \u7b97\u6cd5\u5206\u6790\uff1a\n\n\u9996\u5148\u6765\u770b\u66b4\u529b\uff1a\u5f88\u5bb9\u6613\u60f3\u5230\u6839\u636e\u9898\u76ee\u6240\u7ed9\u7684\u4fe1\u606f\u6765\u679a\u4e3e\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002\u671f\u671b\u5f97\u5206 $40$\u3002\n\n\u7136\u540e\u6765\u770b\u6b63\u89e3\uff1a\u5bb9\u6613\u53d1\u73b0\uff0c\u5982\u679c\u6309\u7167\u6240\u7ed9\u96c6\u5408\u7684\u5927\u5c0f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u90a3\u4e48\u524d\u4e00\u4e2a\u96c6\u5408\u4e00\u5b9a\u4e0d\u4f1a\u662f\u540e\u4e00\u4e2a\u96c6\u5408\u7684\u771f\u5b50\u96c6\u3002\u8fd9\u65f6\u53ef\u4ee5\u7528\u67d3\u8272\u6cd5\u6765\u6c42\u89e3\u3002\n\n\u8003\u8651\u67d0\u4e00\u4e2a\u96c6\u5408\uff0c\u628a\u5b83\u80fd\u5230\u7684\u70b9(\u4e5f\u5c31\u662f\u8fd9\u4e2a\u4eba\u4f1a\u505a\u7684\u9898\u7684\u7f16\u53f7)\u7ed9\u67d3\u6210\u4e00\u79cd\u989c\u8272\uff0c\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0b\u8986\u76d6\u3002\n\n\u90a3\u4e48\u600e\u4e48\u6c42\u7b54\u6848\u5462\uff1f\u8003\u8651\u67d0\u4e00\u4e2a\u96c6\u5408\uff0c\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u80fd\u8986\u76d6\u5230\u4e24\u79cd\u989c\u8272\uff0c\u90a3\u4e48\u5fc5\u7136\u8bf4\u660e\u8be5\u96c6\u5408\u548c\u67d0\u4e00\u4e2a\u8986\u76d6\u8fd9\u4e24\u79cd\u989c\u8272\u4e4b\u4e00\u7684\u96c6\u5408\u662f\u7b54\u6848\u3002\u4f46\u662f\u5177\u4f53\u662f\u54ea\u4e00\u4e2a\u5462\uff1f\u80af\u5b9a\u662f\u8986\u76d6\u7684\u989c\u8272\u5c0f\u7684\u90a3\u4e00\u4e2a\u96c6\u5408\u55bd(\u4e0d\u660e\u767d\u7684\u8bdd\u4ee3\u7801\u91cc\u6709\u8be6\u89e3)\u3002\n\n\u4f46\u662f\uff0c\u5c31\u5dee\u6700\u540e\u4e00\u6b65\u4e86\uff01\u5982\u679c\u67d0\u4e00\u4e2a\u96c6\u5408\u8986\u76d6\u7684\u70b9\u989c\u8272\u4e3a $0$ \u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u8fd9\u4e2a\u96c6\u5408\u3002\n\n### \u4ee3\u7801+\u6ce8\u91ca\u8be6\u89e3\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define re register \nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch == '-') f=-1 ; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48) ; ch=getchar();}\n    return x*f;\n}\nconst int M = 1e6+10;\nvector<int>v[M]; //\u8981\u7528vector\u624d\u80fd\u4e0d\u7206\u7a7a\u95f4 \nint T,n;\nint col[M],k[M],rak[M];\nbool cmp(int x,int y) {return k[x] > k[y];} //\u81ea\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\uff0c\u6309\u7167k\u7684\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \nvoid work(){\n    n=read();\n    memset(col,0,sizeof(col));\n    memset(k,0,sizeof(k));\n    memset(rak,0,sizeof(rak)); //\u4e00\u5b9a\u8981\u6e05\u7a7a\u6570\u7ec4\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u6211\u5c31\u6ca1\u6e05\u7a7a\u76f4\u63a5\u7206\u96f6 \n    for(re int i(1) ; i<=n ; ++i){\n        k[i] = read(); \n        v[i].clear(); //\u540c\u6837\u9700\u8981\u6e05\u7a7avector \n        for(re int j(1) ; j<=k[i] ; ++j){\n            int x=read();\n            v[i].push_back(x); //\u628ai\u8fd9\u4e2a\u70b9\u4f1a\u505a\u7684\u9898\u7ed9\u5b58\u5165vector \n        }\n        rak[i] = i; //i\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7 \n    }\n    sort(rak+1,rak+n+1,cmp); //\u6309k\u7684\u5927\u5c0f\uff0c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n    int cnt=1;\n    for(re int i(0) ; i<v[rak[1]].size() ; ++i) col[v[rak[1]][i]] = rak[1]; //\u5148\u9884\u5904\u7406\u51fa\u6700\u5927\u7684\u96c6\u5408\uff0c\u653e\u5728\u5faa\u73af\u91cc\u4e5f\u884c \n    k[0]=1e9; //\u7279\u6b8a\u60c5\u51b5\uff0c\u4e0b\u9762\u8bf4 \n    for(re int i(2) ; i<=n ; ++i){\n        cnt++;\n        int color = 0,pd = 0;\n        for(re int j(0) ; j<v[rak[i]].size() ; ++j){ //\u6838\u5fc3\u90e8\u5206\uff0c\u5148\u904d\u5386\u8fd9\u4e2avector \n            if(color != col[v[rak[i]][j]] && pd == 1){ //\u8bf4\u660e\u5df2\u7ecf\u6709\u4e24\u79cd\u989c\u8272\u4e86 \n                printf(\"YES\\n%d %d\\n\",rak[i],k[col[v[rak[i]][j]]]<k[color]?col[v[rak[i]][j]]:color);\n\t\t//\u91cd\u70b9\u6765\u4e86\uff1a\u5982\u679ccolor\u90fd\u4e0d\u662f0\uff0c\u90a3\u4e48\u8f93\u51fa\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\u96c6\u5408\n\t\t//\u5982\u679ccolor\u6240\u80fd\u8986\u76d6\u662f0\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u8f93\u51facolor \n                return;\n            }\n            if(pd == 0) pd=1;\n            color = col[v[rak[i]][j]]; //\u628a\u989c\u8272\u8d4b\u503c\u4e3a\u7b2c\u4e00\u4e2a\u70b9\u4e0b\u9762\u8986\u76d6\u7684\u989c\u8272 \n            col[v[rak[i]][j]] = rak[i]; //\u6ce8\u610f\uff0c\u628a\u8fd9\u4e9b\u70b9\u7684\u989c\u8272\u6807\u8bb0\u4e3arak\uff0c\u540e\u9762\u624d\u80fd\u7ee7\u7eed\u505a \n        }\n    }\n    printf(\"NO\\n\"); //\u5faa\u73af\u5b8c\u90fd\u6ca1\u627e\u5230\u7684\u60c5\u51b5 \n    return;\n}\nsigned main(){\n    //freopen(\"test.in\",\"r\",stdin);\n    //freopen(\"test.out\",\"w\",stdout);\n    T=read();\n    while(T--) work();\t//\u6bcf\u4e00\u6b21\u8dd1\u5c31\u884c\u4e86 \n    return 0;\n}\n```\n\n\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\uff0c\u6b22\u8fce\u5728\u4e0b\u9762\u8bc4\u8bba\u3002\n",
        "postTime": 1648651841,
        "uid": 226367,
        "name": "glorious_dream",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P8252 \u8ba8\u8bba"
    },
    {
        "content": "[$\\texttt{link}$](https://www.luogu.com.cn/problem/P5852)\n\n## \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u9897 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6839\u4e3a $1$\uff0c\u5b9a\u4e49\u70b9 $u$ \u7684\u6743\u503c\u4e3a $u$ \u4e0a\u4e0d\u540c\u7684\u989c\u8272\u7684\u6570\u91cf\uff0c$m$ \u6b21\u64cd\u4f5c\uff1a\n\n1. \u5c06 $u$ \u7684\u5b50\u6811\u4e2d\u6ca1\u6709\u989c\u8272 $c$ \u7684\u70b9\u52a0\u4e0a\u989c\u8272 $c$\u3002\n2. \u67e5\u8be2 $u$ \u5b50\u6811\u7684\u6743\u503c\u548c\u3002  \n\n  \n\u6570\u636e\u8303\u56f4\uff1a $n,m,c\\le 10^5$\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u53ef\u4ee5\u7528 dfs \u5e8f\u628a\u5b50\u6811\u8f6c\u79fb\u5230\u533a\u95f4\u4e0a\u53bb\u3002\n\n\u53d1\u73b0\u4e00\u4e2a\u70b9 $u$ \u5b50\u6811\u7684\u6743\u503c\u548c\u8d21\u732e\u6709\u4e24\u79cd\uff1a\n\n1. $u$ \u7956\u5148\u7684\u5b50\u6811\u5747\u88ab\u67d3\u8272\uff0c\u90a3\u70b9 $u$ \u5b50\u6811\u4e5f\u4f1a\u88ab\u67d3\u8272\uff0c\u8d21\u732e\u5c31\u662f\u5b50\u6811\u5927\u5c0f\u3002\n\n2. $u$ \u5b50\u6811\u90e8\u5206\u88ab\u67d3\u8272\uff0c\u8981\u52a0\u56de\u6765\u3002\n\n\u53ef\u4ee5\u7528\u4e24\u4e2a DS\uff0c\u4e00\u4e2a\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u60c5\u51b5 $1$ \u7684\u8d21\u732e\uff0c\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\uff0c\u4e00\u4e2a\u7ef4\u62a4\u8be5\u70b9\u60c5\u51b5 $2$ \u5bf9\u5b50\u6811\u7684\u8d21\u732e\uff0c\u5355\u70b9\u52a0\uff0c\u533a\u95f4\u67e5\u3002\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u53d1\u73b0\u4e24\u79cd\u60c5\u51b5\u4f1a\u6709\u91cd\u590d\u90e8\u5206\uff0c\u53ef\u5bf9\u6bcf\u4e2a\u989c\u8272\u5f00\u4e00\u4e2a set\uff0c\u7ef4\u62a4\u60c5\u51b5 $1$ \u4e2d\u88ab\u67d3\u8272\u7684\u5b50\u6811\u6839\u8282\u70b9\u7684 dfn\uff0c\u65b0\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u6709\u7956\u5148\u7684\u5b50\u6811\u88ab\u67d3\u8272\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u518d\u52a0\u5165\u3002\n\n2. \u6ca1\u6709\u7956\u5148\u7684\u5b50\u6811\u88ab\u67d3\u8272\uff0c\u5148\u628a\u65b0\u8282\u70b9\u5b50\u6811\u4e2d\u5728 set \u91cc\u7684\u5168\u90e8\u51cf\u6389\uff0c\u518d\u628a\u8be5\u8282\u70b9\u52a0\u8fdb\u53bb\u3002\u8f6c\u6362\u5230\u533a\u95f4\u4e0a\u5c31\u662f\u628a\u65b0\u7684\u5b50\u6811\u533a\u95f4\u5e76\u4e0a\u5df2\u7ecf\u5728 set \u91cc\u7684\u533a\u95f4\uff0c\u628a\u88ab\u5305\u542b\u7684\u533a\u95f4\u5168\u90e8\u5220\u6389\u5373\u53ef\u3002\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c set \u6700\u591a\u52a0 $1$ \u4e2a\u8282\u70b9\uff0c\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7 $m$\uff0c\u590d\u6742\u5ea6\u6709\u4fdd\u8bc1\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\u5bfb\u627e dfn \u524d\u9a71\u590d\u6742\u5ea6 $O(\\log n)$\uff0c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u662f $O(\\log n)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a $O(n+m\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace IO {\n\t//read and write\n} using namespace IO;\nconst int N = 1e5 + 10;\nint n, q;\nstruct bit {\n\tint t[N];\n\tvoid add(int x, int v) { for(int i = x; i <= n; i += i & -i) t[i] += v; }\n\tint qry(int x) { int res = 0; for(int i = x; i; i -= i & -i) res += t[i]; return res; }\n} t1, t2;\nstruct edge {\n\tint to, nxt;\n} e[N << 1];\nint head[N], cnt;\nvoid add(int u, int v) {\n\te[++cnt] = (edge){v, head[u]};\n\thead[u] = cnt;\n}\nset<int> s[N];\nset<int>::iterator it;\nint dfn[N], siz[N], id[N], tim;\nvoid dfs(int u, int fa) {\n\tdfn[u] = ++tim, id[tim] = u, siz[u] = 1;\n\tfor(int i = head[u], v; i; i = e[i].nxt) {\n\t\tv = e[i].to;\n\t\tif(v == fa) continue;\n\t\tdfs(v, u);\n\t\tsiz[u] += siz[v];\n\t}\n}\nint main() {\n\tn = read(), q = read();\n\tfor(int i = 1, u, v; i < n; i++) {\n\t\tu = read(), v = read();\n\t\tadd(u, v), add(v, u);\n\t}\n\tdfs(1, 0);\n\tfor(int i = 1, opt, u, c; i <= q; i++) {\n\t\topt = read(), u = read();\n\t\tif(opt == 1) {\n\t\t\tc = read();\n\t\t\tit = s[c].lower_bound(dfn[u]);\n\t\t\tif(it != s[c].begin() && dfn[id[*prev(it)]] + siz[id[*prev(it)]] >= dfn[u] + siz[u]) continue;\n\t\t\twhile(it != s[c].end() && *it < dfn[u] + siz[u])\n\t\t\t\tt1.add(*it, -1), t1.add(*it + siz[id[*it]], 1), t2.add(*it, -siz[id[*it]]), s[c].erase(it++);\n\t\t\ts[c].insert(dfn[u]), t1.add(dfn[u], 1), t1.add(dfn[u] + siz[u], -1), t2.add(dfn[u], siz[u]);\n\t\t}\n\t\telse printf(\"%d\\n\", siz[u] * t1.qry(dfn[u]) + t2.qry(dfn[u] + siz[u] - 1) - t2.qry(dfn[u]));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1633932057,
        "uid": 365107,
        "name": "Terac",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5852 [USACO19DEC]Bessie\u2019s Snow Cow P"
    }
]