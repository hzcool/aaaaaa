[
    {
        "content": "### \u8fd9\u4e2a\u9898\u5427\uff0c\u8bf4\u96be\u4e5f\u4e0d\u96be\uff0c\u8bf4\u7b80\u5355\u4e5f\u4e0d\u7b80\u5355 ###  \n\u5176\u5b9e\u9898\u76ee\u7ed9\u7684\u5f88\u660e\u786e  \n**\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709need\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002**   \n\u8fd9\u4e0d\u662f\u660e\u6446\u7740\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5417\uff1f  \n\u521a\u8981\u5f00\u59cb\u5199\uff0c\u95ee\u9898\u63a5\u8e35\u800c\u81f3\uff0c\u8fd9\u4e2a\u767d\u8fb9\u7684\u6570\u91cf\u600e\u4e48\u63a7\u5236\u5462\uff0c\u5982\u679c\u591a\u4e86\u6216\u8005\u5c11\u4e86\uff0c\u5982\u4f55\u589e\u51cf\uff1f \n\n\u8fdb\u5165\u6b63\u9898\uff1a\n\u603b\u6240\u5468\u77e5\uff0c\u5728\u8dd1kruskal\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u53e5\u4ee3\u7801\uff1a\n```cpp\nsort(e+1,e+1+m,cmp);\n```\n\u8fd9\u662f\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u7531\u6b64\u53ef\u77e5\uff0c\u8fb9\u6743\u8d8a\u5c0f\u8d8a\u9760\u524d  \n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u767d\u8fb9\u7684\u6743\u503c\u6765\u6539\u53d8\u5b83\u51fa\u73b0\u7684\u4f4d\u7f6e \n\n\n\u4f8b\u5982need=3\uff0c\u4f46\u662f\u6b64\u65f6\u6211\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u67094\u6761\u767d\u8fb9\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u5168\u90e8\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u67d0\u6761\u767d\u8fb9\u7a81\u7136\u6bd4\u6700\u5c0f\u7684\u9ed1\u8fb9\u5927\u4e86\uff0c\u6211\u518d\u8dd1kruskal\uff0c\u66f4\u65b0\u4e4b\u540e\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u4f1a\u628a\u4e00\u6761\u5927\u7684\u767d\u8fb9\u6254\u5230\u540e\u8fb9\u53bb\uff0c\u66ff\u6362\u6210\u4e00\u6761\u9ed1\u8fb9\uff0c\u90a3\u4e48\u6b64\u65f6\u767d\u8fb9\u6761\u6570\u5c31\u5c11\u4e861\uff0c\u6ee1\u8db3\u7b54\u6848\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u628a\u52a0\u7684\u8fd9\u4e2a\u6570\u51cf\u6389\u5c31\u884c\u4e86  \n\n\u73b0\u5728\u6211\u4eec\u6765\u8bf4\u8bf4\u600e\u4e48\u786e\u5b9a\u8981\u52a0\u7684\u8fd9\u4e2a\u6570   \n\u6211\u4eec\u91c7\u53d6\u4e8c\u5206\u7b54\u6848\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u9053\u8fb9\u6743\u5728[1,100]\u6240\u4ee5\u5b9a\u4e49l=-111,r=111,\u7136\u540e\u4e8c\u5206\u5f80\u767d\u8fb9\u4e0a\u52a0\u6743\u503c\uff0c\u6700\u540e\u4e00\u5b9a\u80fd\u5361\u51fa\u6765\u4e00\u4e2a\u5408\u9002\u7684\u89e3  \n\n\u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u5982\u679c\u8bf4\u5f53\u524d\u767d\u8fb9\u52a0\u4e0amid\u540e\uff0c\u767d\u8fb9\u6761\u6570temp>need\u4e86\uff0c\u7136\u9e45\uff0c\u5982\u679c\u52a0\u4e0amid+1\u540e\uff0ctemp<need\u4e86\uff0c\u8fd9\u53ef\u548b\u6574\uff0c\u96be\u641e\u54df~~  \n\n\u9898\u76ee\u4e2d\u8bf4\u5230\u4e86\uff1a\u4fdd\u8bc1\u6709\u89e3\uff0c\u6240\u4ee5\u51fa\u73b0\u4e0a\u8ff0\u60c5\u51b5\u65f6\u4e00\u5b9a\u6709\u9ed1\u8fb9==\u767d\u8fb9\u7684\u8fb9\u6743  \nso\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u4e00\u6761\u9ed1\u8fb9\u6362\u6210\u767d\u8fb9\u5c31\u597d\u5566  \n\u5728\u767d\u8fb9\u6761\u6570temp>need\u65f6\u66f4\u65b0\u7b54\u6848  \n\u6700\u7ec8\u7b54\u6848$ ans=sum-mid\u00d7need $\n\n\u4ee3\u7801\u65f6\u95f4\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nint fa[1000010];\nint n,m,need;\nstruct node{\n\tint s,t,v,c;//\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u6743\u503c\u3001\u989c\u8272\n}e[1000010];\n\ninline bool cmp(node a,node b){//\u6392\u5e8f\n\tif(a.v==b.v) return a.c<b.c;\n\telse return a.v<b.v;\n}\n\ninline int find(int x){//\u5e76\u67e5\u96c6\u4e0d\u4f1a\u8d76\u7d27\u5b66\u53bb\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nint sum,ans,temp;\nint cnt=0;\ninline void kruskal(){//\u677f\u5b50\n\tsort(e+1,e+1+m,cmp);\n\tfor(int i=1;cnt!=n-1;i++){\n\t\tint xx=find(e[i].s),yy=find(e[i].t);\n\t\tif(xx==yy) continue;\n\t\tif(xx!=yy){\n\t\t\tcnt++;\n\t\t\tfa[xx]=yy;\n\t\t\tif(e[i].c==0) temp++;//\u7edf\u8ba1\u767d\u8fb9\u6570\u91cf\n\t\t\tsum+=e[i].v;\n\t\t} \n\t}\n}\n\nint main(){\n\tcin>>n>>m>>need;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>e[i].s>>e[i].t>>e[i].v>>e[i].c;\n\t\te[i].s++,e[i].t++;//\u6ce8\u610f\uff01\u56e0\u4e3a\u9898\u9762\u8bf40\u5f00\u59cb\u6807\u53f7\n\t}\n\tint l=-111,r=111;//\u4e8c\u5206\uff0c\u521d\u59cb\u503c\u6bd4100\u5927\u5c31\u884c\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(e[i].c==0)\n\t\t\t\te[i].v+=mid;//\u767d\u8fb9\u52a0\u6743\n\t\tfor(int i=1;i<=n+1;i++)\n\t\t\tfa[i]=i;//\u521d\u59cb\u5316\n\t\tsum=0,cnt=0,temp=0;//\u6bcf\u6b21\u8981\u6e05\u7a7a\n\t\tkruskal();\n\t\tif(temp>=need){\n\t\t\tl=mid+1;\n\t\t\tans=sum-need*mid;//\u66f4\u65b0\u7b54\u6848\n\t\t}\n\t\telse r=mid-1;\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(e[i].c==0)\n\t\t\t\te[i].v-=mid;//\u6700\u7ec8\u8981\u628a\u52a0\u4e0a\u7684\u51cf\u6389\n\t}\n\tcout<<ans<<'\\n';//over\n\treturn 0;\n}\n```\n\u611f\u89c9\u8bb2\u7684\u633a\u660e\u767d\u4e86\u53ed\uff0c\u4e0d\u61c2\u8bc4\u8bba\u533a\u89c1\uff0c\u6e9c~~~",
        "postTime": 1562917404,
        "uid": 154412,
        "name": "Gary818",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u3002\u3002\u3002\u597d\u50cf\u81f3\u5c11\u5728\u7b97\u6cd5\u590d\u6742\u5ea6\u4e0a\u505a\u4e86\u4e00\u70b9\u70b9\u6539\u8fdb\uff0c\u4e0d\u662f\u5b8c\u5168\u91cd\u590d\u5427qwq\u3002\u3002\u3002\u6c42\u7ba1\u7406\u5458\u5927\u5927\u653e\u8fc7qwq\n\n\u7ed9\u4e00\u4e2a\u540d\u8bcd\u2014\u2014WQS\u4e8c\u5206/\u5e26\u6743\u4e8c\u5206/DP\u51f8\u4f18\u5316\uff08\u5f53\u7136\u8fd9\u9898\u4e0d\u662fDP\uff09\u3002\n\n\u7528\u6765\u89e3\u51b3\u4e00\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u95ee\u9898\uff1a\n\n\u6709$n$\u4e2a\u7269\u54c1\uff0c\u9009\u62e9\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u6709\u76f8\u5e94\u7684\u6743\u503c\uff0c\u9700\u8981\u6c42\u51fa\u5f3a\u5236\u9009$need$\u4e2a\u7269\u54c1\u65f6\u7684\u6700\u5927/\u6700\u5c0f\u6743\u503c\u548c\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6c42\u4e0d\u9650\u5236\u4e2a\u6570\u7684\u6700\u5927/\u6700\u5c0f\u6743\u503c\u548c\u5f88\u5bb9\u6613\uff0c\u4f46\u5728\u9650\u5236\u4e2a\u6570\u7684\u524d\u63d0\u4e0b\u518d\u6c42\u6700\u503c\u4f1a\u53d8\u5f97\u6709\u70b9\u56f0\u96be\u3002\u6bd4\u8f83\u4f4e\u6548\u7684\u505a\u6cd5\u662f\u5bf9\u72b6\u6001\u518d\u52a0\u8bbe\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a\u5df2\u9009\u7269\u54c1\u6570\u91cf\uff0c\u7136\u540e\u901a\u8fc7DP\u7b49\u65b9\u6cd5\u6c42\u51fa\u3002\n\n\u5e94\u7528\u524d\u63d0\uff1a\u8bbe$g_x$\u4e3a\u5f3a\u5236\u9009$x$\u4e2a\u7269\u54c1\u7684\u6700\u5927/\u6700\u5c0f\u6743\u503c\u548c\uff0c\u5982\u679c\u6240\u6709\u7684\u70b9\u5bf9$(x,g_x)$\u5728\u5e73\u9762\u4e0a\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u51f8\u5305\uff0c\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u4f7f\u7528WQS\u4e8c\u5206\u3002\n\n\u6240\u4ee5\u8bf4\u7528\u4e09\u4e2a\u540d\u8bcd\u5408\u6307\u5b83\u4e5f\u4e0d\u4e3a\u8fc7\uff08\u63d0\u51fa\u8005WQS\uff0c\u4e8c\u5206\u7684\u91cf\u662f\u6743\u503c\u589e\u91cf\uff0c\u4f7f\u7528\u524d\u63d0\u662f\u51f8\u51fd\u6570\uff09\n\nWQS\u7684\u8bba\u6587[\u8fd9\u91cc](http://www.tsinsen.com/resources.page)\u53ef\u4ee5\u4e0b\u8f7d\n\n\u5efa\u8bae\u98df\u7528[Creeper_LKF\u5927\u4f6c\u7684blog](https://www.cnblogs.com/CreeperLKF/p/9045491.html)\uff0c\u6570\u5f62\u7ed3\u5408\u7684\u5206\u6790\u8fc7\u7a0b\u5df2\u7ecf\u975e\u5e38\u5b8c\u6574\u4e86\u3002\n\n\u7b80\u5355\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u77e5\u9053\u8fd9\u4e2a\u51f8\u5305\u957f\u4ec0\u4e48\u6837\u5b50\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u62ff\u7740\u4e00\u4e2a\u659c\u7387\u4e3a$k$\u7684\u76f4\u7ebf\u53bb\u5207\u8fd9\u4e2a\u51f8\u5305\uff0c\u76f8\u5f53\u4e8e\u7ed9\u6bcf\u4e2a\u7269\u54c1\u9644\u52a0\u4e86\u4e00\u4e2a\u6743\u503c$k$\u3002\u8bbe\u76f4\u7ebf\u7684\u622a\u8ddd\u4e3a$b$\uff0c\u90a3\u4e48\u9009$x$\u4e2a\u7269\u54c1\u540e\u603b\u6743\u503c\u5c31\u4f1a\u7b49\u4e8e$b+kx$\u3002\u6211\u4eec\u901a\u8fc7$O(n)$\u7684DP\u7b49\u65b9\u6cd5\u627e\u5230\u6700\u5927\u7684$b$\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u6c42\u51fa\u9009\u4e86\u7684\u4e2a\u6570$x$\uff0c\u901a\u8fc7$x$\u4e0e$need$\u7684\u5173\u7cfb\u6765\u8c03\u6574\u76f4\u7ebf\u659c\u7387\u7ee7\u7eed\u4e8c\u5206\u3002\n\n\u62ff\u672c\u9898\u6765\u8bf4\uff0c\u9009$x$\u6761\u767d\u8fb9\uff0c\u53ef\u4ee5~~\u5199\u4e2a\u5e73\u65b9DP\u7136\u540e~~\u53d1\u73b0$g_x$\u662f\u4e2a\u4e0b\u51f8\u51fd\u6570\u3002\u7136\u540e\u6211\u4eec\u5728$[-100,100]$\uff08\u663e\u7136\u662f\u659c\u7387\u7684\u4e0a\u4e0b\u754c\uff0c\u56e0\u4e3a\u66f4\u6539\u4e00\u6761\u8fb9\u5e26\u6765\u7684\u6743\u503c\u548c\u7684\u66f4\u6539\u4e0d\u4f1a\u8d85\u8fc7$100$\uff09\u7684\u8303\u56f4\u5185\u4e8c\u5206$k$\uff0c\u4e4b\u540e\u6240\u6709\u767d\u8fb9\u7684\u6743\u503c\u589e\u52a0$k$\uff0c\u8dd1\u4e00\u904dKruscal\u7edf\u8ba1\u9009\u4e86\u591a\u5c11\u6761\u767d\u8fb9\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e$need$\u5c31\u8c03\u5927$k$\uff0c\u5426\u5219\u8c03\u5c0f\u3002\n\n\u6700\u540e\u659c\u7387\u4e3a$mid$\u7684\u76f4\u7ebf\u4e0e\u51f8\u5305\u7684\u5207\u70b9\u5c31\u662f\u7b54\u6848\uff0c\u6ce8\u610f\u4ece\u4e2d\u51cf\u53bb$k$\u7684\u5f71\u54cd\uff08`ans-=mid*x`\uff09\n\n\u8fb9\u754c\u95ee\u9898Creeper_LKF\u5927\u4f6c\u4e5f\u8bc1\u660e\u4e86\u53ea\u8981\u5728\u8fb9\u6743\u76f8\u7b49\u7684\u65f6\u5019\u4f18\u5148\u9009\u767d\u8fb9\u5c31\u6ca1\u95ee\u9898\u4e86\u3002\n\n\u5199\u6cd5\u4e0a\u6709\u4e00\u4e2a\u4f18\u5316\uff1a\u6bcf\u6b21Kruscal\u7684\u65f6\u5019\u4e0d\u7528\u91cd\u65b0\u6392\u5e8f\u4e86\u3002\u56e0\u4e3a\u6bcf\u6b21\u6211\u4eec\u53ea\u662f\u7ed9\u6240\u6709\u767d\u8fb9\u6574\u4f53\u52a0\u4e00\u4e2a\u6743\u503c\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5148\u628a\u767d\u8fb9\u548c\u9ed1\u8fb9\u5206\u5f00\u6392\u5e8f\u7684\u8bdd\uff0c\u52a0\u5b8c\u4ee5\u540e\u4e5f\u8fd8\u662f\u6709\u5e8f\u7684\u3002\u6bcf\u6b21Kruscal\u65f6\u53ea\u8981\u7528\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u6cd5$O(E)$\u7684\u626b\u4e00\u904d\u5c31\u53ef\u4ee5\u5566\uff01\u590d\u6742\u5ea6\u4ece$O(E\\log E\\log 200)$\u964d\u5230\u4e86$O(E\\log E+E\\log200)$\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define RG register\n#define R RG int\n#define G if(++ip==iend&&fread(ip=buf,1,N,stdin))\nusing namespace std;\nconst int N=5e5+9,M=1e6+9;\nchar buf[N],*iend=buf+N,*ip=iend-1;\ninline int in(){\n\twhile(*ip<'-')G;\n\tR x=*ip&15;G;\n\twhile(*ip>'-'){x=x*10+(*ip&15);G;}\n\treturn x;\n}\nstruct Edge{\n\tint u,v,w;bool c;\n\tinline bool operator<(RG Edge&x){\n\t\treturn w<x.w;\n\t}\n}e[M];\nint f[N];\nint getf(R x){\n\treturn x==f[x]?x:f[x]=getf(f[x]);\n}\ninline bool add(R i){//\u5c1d\u8bd5\u52a0\u8fb9\u5e76\u8fd4\u56de\u662f\u5426\u6210\u529f\n\tif(getf(e[i].u)==getf(e[i].v))return 0;\n\tf[f[e[i].u]]=f[e[i].v];return 1;\n}\nint main(){\n\tR n=in(),mw=0,m=in(),need=in(),i,j;//mw\u4e3a\u767d\u8fb9\u6570\u91cf\n\tfor(i=0;i<m;++i){//\u70b9\u548c\u8fb9\u90fd\u4ece0\u5f00\u59cb\u5b58\u4e86\n\t\te[i].u=in();e[i].v=in();e[i].w=in();\n\t\tif(!(e[i].c=in()))swap(e[mw++],e[i]);//\u5c06\u9ed1\u767d\u8fb9\u5206\u5f00\n\t}\n\tsort(e,e+mw);sort(e+mw,e+m);\n\tR l=-100,r=100,mid,ans;\n\twhile(l<r){\n\t\tmid=(l+r+1)>>1;\n\t\tfor(i=0;i<n;++i)f[i]=i;\n\t\tans=i=0;j=mw;\n\t\twhile(i<mw&&j<m)//\u7c7b\u5f52\u5e76\u6392\u5e8f\n\t\t\te[i].w+mid<=e[j].w?ans+=add(i++):add(j++);\n\t\twhile(i<mw)ans+=add(i++);//\u767d\u8fb9\u6570\u91cf\u7edf\u8ba1\u5b8c\u6574\n\t\tans<need?r=mid-1:l=mid;\n\t}\n\tmid=l;\n\tfor(i=0;i<n;++i)f[i]=i;\n\tans=i=0;j=mw;//\u6700\u540e\u7b97\u6743\u503c\u603b\u548c\n\twhile(i<mw&&j<m)\n\t\tif(e[i].w+mid<=e[j].w)\n\t\t\tans+=(e[i].w+mid)*add(i),++i;\n\t\telse ans+=e[j].w*add(j),++j;\n\twhile(i<mw)ans+=(e[i].w+mid)*add(i),++i;\n\twhile(j<m )ans+=e[j].w*add(j),++j;\n\tprintf(\"%d\\n\",ans-need*mid);//\u51cf\u6389\n\treturn 0;\n}\n```",
        "postTime": 1535206973,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "\u3010\u53c2\u8003\u8d44\u6599\u3011\n\nliusu201601\u7684\u535a\u5ba2\uff1ahttps://blog.csdn.net/liusu201601/\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u5e26\u6743\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u662f\u9ed1\u8272\u6216\u767d\u8272\u3002\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709$need$\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002\u9898\u76ee\u4fdd\u8bc1\u6570\u636e\u6709\u89e3\u3002\n\n\u3010\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u3011\n\n- \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c$V,E,need$\u5206\u522b\u8868\u793a\u70b9\u6570\uff0c\u8fb9\u6570\u548c\u9700\u8981\u7684\u767d\u8272\u8fb9\u6570\u3002\n\n\u63a5\u4e0b\u6765E\u884c\uff0c\u6bcf\u884c\u6709\u4e94\u4e2a\u6574\u6570$s,t,c,col$\uff0c\u5206\u522b\u8868\u793a\u8fd9\u8fb9\u7684\u7aef\u70b9(\u70b9\u4ece0\u5f00\u59cb\u6807\u53f7)\uff0c\u8fb9\u6743\uff0c\u989c\u8272(0\u767d\u82721\u9ed1\u8272)\u3002\n\n- \u8f93\u51fa\u683c\u5f0f\n\n\u4e00\u884c\u8868\u793a\u6240\u6c42\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\n$100$\u5206\uff08\u6ee1\u5206\uff09\u601d\u8def\uff1a\n\n- \u6211\u4f1a\u6700\u5c0f\u751f\u6210\u6811\uff01\n\n- \u4e00\u79cd\u9519\u8bef\u7684\u89e3\u6cd5\n\n\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709$need$\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002\u90a3\u6211\u4eec\u76f4\u63a5\u9009\u62e9$need$\u6761\u767d\u8fb9\uff0c\u7136\u540e\u518d\u9009\u5269\u4e0b\u7684\u8fb9\u54af\u3002\u4f46\u662f\uff0c\u8fd9\u662f\u9519\u8bef\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8bf7\u770b\u4e0b\u9762\u7684\u8fd9\u7ec4\u6570\u636e\u3002\n```\n3 4 1\n0 1 5 0\n1 2 6 0\n0 1 2 1\n1 2 9 1\n```\n\n\u8f93\u51fa\u662f8\u3002\n\n\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u591f\u76f4\u63a5\u9009\u62e9$need$\u6761\u767d\u8fb9\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u9009\u4e86$need$\u6761\u8f83\u5c0f\u7684\u767d\u8fb9\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u5f71\u54cd\u9ed1\u8fb9\u7684\u9009\u62e9\u3002\n\n- \u6b63\u89e3\n\n1. \u5982\u679c\u5bf9\u5168\u90e8\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u7684$ans$\uff0c\u4f46\u662f\u767d\u8fb9\u4e0d\u4e00\u5b9a\u662f$need$\u6761\uff1b\n\n2. \u5982\u679c\u767d\u8fb9\u5c11\u4e86\uff0c\u8bf4\u660e\u767d\u8fb9\u6574\u4f53\u6743\u503c\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u6ca1\u88ab\u9009\u4e2d\u3002\u90a3\u6211\u5c31\u5bf9\u8fb9\u90fd\u51cf\u4e00\u70b9\u6743\uff08$x$\uff09\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u88ab\u9009\u4e2d\u7684\u767d\u8fb9\u4f1a\u589e\u591a\u3002\u540c\u7406\uff0c\u5982\u679c\u88ab\u9009\u767d\u8fb9\u6570\u91cf\u5927\u4e8e$need$\uff0c\u6211\u5c31\u7ed9\u767d\u8fb9\u4eec\u90fd\u51cf\u53bb\u4e00\u4e2a$x$\u3002\n\n3. \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e8c\u5206\u8fd9\u4e2a$x$\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\uff08\u6211\u60f3\u8981\u7684\u767d\u8fb9\u6570\u91cf\u7684\u524d\u63d0\u4e0b\uff09\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n- \u4e00\u4e9b\u8981\u6ce8\u610f\u7684\u7ec6\u8282\n\n1. \u9ed1\u767d\u8fb9\u540c\u6743\u7684\u65f6\u5019\uff0c\u4f18\u5148\u9009\u62e9\u767d\u8fb9\u3002\n\n\u4e0b\u9762\u4e0a$100$\u5206\u4ee3\u7801~\n\n```\n#include <cstdio>\nstruct node{ int s,t,c,col; } e[1000001];\nint p1=0,p2=0,su=0,n=0,m=0,t=0,l=0;\nint f[1000001];\nint find(int x)\n{\n\tif(x==f[x])\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\treturn f[x]=find(f[x]);\n\t}\n}\nvoid px(int l,int r)\n{\n\tint x=l,y=r,mid1=e[(l+r)/2].c,mid2=e[(l+r)/2].col;\n\twhile(x<=y)\n\t{\n\t\twhile((e[x].c<mid1) || (e[x].c==mid1 && e[x].col<mid2))\n\t\t{\n\t\t\tx++;\n\t\t}\n\t\twhile((e[y].c>mid1) || (e[y].c==mid1 && e[y].col>mid2))\n\t\t{\n\t\t\ty--;\n\t\t}\n\t\tif(x<=y)\n\t\t{\n\t\t\tnode pt=e[x];\n\t\t\te[x]=e[y];\n\t\t\te[y]=pt;\n\t\t\tx++;\n\t\t\ty--;\n\t\t}\n\t}\n\tif(l<y)\n\t{\n\t\tpx(l,y);\n\t}\n\tif(x<r)\n\t{\n\t\tpx(x,r);\n\t}\n}\nbool check(int mid)\n{\n\tl=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i]=i;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(e[i].col==0)\n\t\t{\n\t\t\te[i].c+=mid;\n\t\t}\n\t}\n\tsu=0;\n\tpx(1,m);\n\tp1=0,p2=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint tx=find(e[i].s);\n\t\tint ty=find(e[i].t);\n\t\tif(tx!=ty)\n\t\t{\n\t\t\tf[tx]=ty;\n\t\t\tp1++;\n\t\t\tsu+=e[i].c;\n\t\t\tif(e[i].col==0)\n\t\t\t{\n\t\t\t\tp2++;\n\t\t\t}\n\t\t\tif(p1==n-1)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(e[i].col==0)\n\t\t{\n\t\t\te[i].c-=mid;\n\t\t}\n\t}\n\tif(p2>=t)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&t);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d %d %d\",&e[i].s,&e[i].t,&e[i].c,&e[i].col);\n\t\te[i].s++;\n\t\te[i].t++;\n\t}\n\tint l=-150,r=150;\n\tint ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid)==true)\n\t\t{\n\t\t\tans=su-mid*t;\n\t\t\tl=mid+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=mid-1;\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1522560669,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2012]Tree I\u3011"
    },
    {
        "content": "~~\u5e74\u8f7b\u4eba\u7684\u7b2c\u4e00\u9053\u56fd\u5bb6\u96c6\u8bad\u961f\u9898\u76ee~~\n\n---\n\n\u5982\u679c\u6211\u4eec\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u76f4\u63a5\u8dd1MST\uff08Minimum Spanning Tree\uff0c\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u7ed3\u679c\u4f1a\u6709\u4e09\u79cd\uff1a\n\n- \u6b63\u597d\u8dd1\u51fa $\\text{Need}$ \u6761\u767d\u8fb9\n\n- \u767d\u8fb9\u591a\u4e86\n\n- \u767d\u8fb9\u5c11\u4e86\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u81ea\u7136\u662f\u6700\u597d\u7684\n\n\u5269\u4e0b\u4e24\u79cd\u60c5\u51b5\u5982\u4f55\u89e3\u51b3\uff1f\n\n---\n\n\u5f15\u8d77\u767d\u8fb9\u5c11\u7684\u539f\u56e0\uff1a\u9ed1\u8fb9\u7684\u8fb9\u6743\u76f8\u5bf9\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u8d2a\u5fc3\u5730\u9009\u62e9\u4e86\u66f4\u591a\u7684\u9ed1\u8fb9\n\n\u5f15\u8d77\u767d\u8fb9\u591a\u7684\u539f\u56e0\uff1a\u767d\u8fb9\u7684\u8fb9\u6743\u76f8\u5bf9\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u8d2a\u5fc3\u5730\u9009\u62e9\u4e86\u66f4\u591a\u7684\u767d\u8fb9\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u7ed9\u767d\u8fb9\u76f8\u5e94\u5730\u51cf\u53bb/\u52a0\u4e0a\u4e00\u4e9b\u8fb9\u6743\uff0c\u4e0d\u5c31\u53ef\u4ee5\u8fbe\u6210\u76ee\u6807\u4e86\uff1f\n\n---\n\n\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a $add$ \u8868\u793a\u6211\u4eec\u5f53\u524d\u8981\u7ed9\u767d\u8fb9\u52a0\u4e0a $add$ \u6765\u8fbe\u6210\u76ee\u6807\n\n\u8fb9\u754c\u5206\u522b\u662f\u8fb9\u6743\u6700\u5c0f\u503c\uff08-100\uff09\u548c\u8fb9\u6743\u6700\u5927\u503c\uff08100\uff09\n\n\u7531\u4e8e\u9898\u9762\u4fdd\u8bc1\u6709\u7b54\u6848\uff0c\u6240\u4ee5\u76f4\u63a5\u8f93\u51fa $ ans - add \\times \\text{Need} $\n \u5373\u53ef\uff0c\u5176\u4e2d $ans$ \u4e3a\uff08\u52a0\u4e0a\u8fb9\u6743\u540e\uff09\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\n \n`Check(mid)` \u600e\u4e48\u5199\uff1f\n\n---\n\n\u6211\u4eec\u5c06\u6240\u6709\u767d\u8fb9\u7684\u8fb9\u6743\u52a0\u4e0a$add$\uff08\u5373$mid$\uff09\uff0c\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5224\u65ad\u4e00\u4e0b\u62ff\u5230\u7684\u767d\u8272\u8fb9\u6570\u91cf\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u8981\u6c42\u7684\u6570\u91cf\uff0c\u5982\u679c\u662f\u5c31\u66f4\u65b0\u4e00\u4e0b\u5de6\u8fb9\u754c\u5e76\u8bb0\u5f53\u524d\u7684$mid$\u4e3a$tans$\uff0c\u5426\u5219\u5c31\u66f4\u65b0\u4e00\u4e0b\u53f3\u8fb9\u754c\n\n\u6ce8\u610f\u4e0d\u8981\u5fd8\u4e86\u628a\u8fb9\u6743\u51cf\u56de\u6765\n\n\uff08\u4e0d\u8981\u5728\u610f $tans$ \u662f\u4ec0\u4e48\u610f\u601d\uff09\n\n---\n\n\u521a\u624d\u6211\u4eec\u4e0d\u662f\u8bb0\u5f55\u4e86\u4e00\u4e0b$tans$\u5417\uff0c\u8fd9\u4e2a$tans$\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u3001\u80fd\u9009\u51fa\u6b63\u597d $\\text{Need}$ \u6761\u767d\u8fb9\u7684 $add$ \u503c\uff0c\u518d\u5c06\u6240\u6709\u767d\u8fb9\u7684\u8fb9\u6743\u90fd\u52a0\u4e0a\u8fd9\u4e2a $tans$\uff0c\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\n\n\u7b54\u6848\u4e0d\u8981\u5fd8\u4e86\u51cf\u53bb\u52a0\u4e0a\u7684\u8fb9\u6743\uff08\u4e5f\u5c31\u662f $ \\text{Need} \\times tans $\uff09\n\n\u90a3\u4e48\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f $ \\text{Kruskal()} - \\text{Need} \\times tans $\n\n# \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n\n#define FILE_IN(__fname) freopen(__fname, \"r\", stdin)\n#define FILE_OUT(__fname) freopen(__fname, \"w\", stdout)\n#define IMPROVE_IO() std::ios::sync_with_stdio(false)\n\n#define WHITE 0\n#define BLACK 1\n\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::max;\n\nconst int MAXV = 50000 + 10;\nconst int MAXE = 100000 + 10;\nconst int MAXW = 100;\n\nstruct Edge {\n    int prev, next, weight, add;\n    bool color;\n    // 1 -> black, 0 -> white\n    \n    Edge() { prev = next = weight = color = add = 0; }\n    \n    bool operator < (const Edge &that) const {\n        if (weight == that.weight) return color < that.color;\n        return weight < that.weight;\n    }\n} edge[MAXE << 1];\n\nint V, E, Need, cnt, ans;\n\nint U[MAXV << 1];\n\nint Find(int x) {\n    if (U[x] == x) return U[x];\n    return U[x] = Find(U[x]);\n}\n\nbool Union(int x, int y) {\n    x = Find(x), y = Find(y);\n    if (x == y) return false;\n    U[x] = y;\n    return true;\n}\n\nint Kruskal() {\n    int whiteEdge = 0;\n    for (int i = 1; i <= V; ++i) U[i] = i;\n    std::sort(edge + 1, edge + 1 + E);\n    int tot = 0;\n    ans = 0;\n    for (int i = 1; i <= E; ++i) {\n        if (Union(edge[i].prev, edge[i].next)) \n            ans += edge[i].weight, ++tot, whiteEdge += (edge[i].color == WHITE);\n        if (tot == V - 1) break;\n    }\n    return whiteEdge;\n}\n\nbool Check(int add) {\n    for (int i = 1; i <= E; ++i) {\n        if (edge[i].color == WHITE) edge[i].weight += add;\n    }\n    bool Ans = (Kruskal() >= Need);\n    for (int i = 1; i <= E; ++i) {\n        if (edge[i].color == WHITE) edge[i].weight -= add;\n    }\n    return Ans;\n}\n\nint main() {\n    IMPROVE_IO();\n    cin >> V >> E >> Need;\n    for (int i = 1; i <= E; ++i) {\n    \tcin >> edge[i].prev >> edge[i].next >> edge[i].weight >> edge[i].color;\n    \t++edge[i].prev;\n        ++edge[i].next;\n    }\n    int l = -MAXW, r = MAXW;\n    int Run = 0;\n    while (l <= r) {\n        int mid = ((l + r) >> 1);\n        if (Check(mid)) {\n            l = mid + 1;\n            Run = mid;\n        } else {\n            r = mid - 1;\n        }\n    }\n    Check(Run);\n    cout << ans - Need * Run << endl;\n    return 0;\n}\n\n```",
        "postTime": 1548941801,
        "uid": 56626,
        "name": "HDWR",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "\n\n> \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u5e26\u6743\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u662f\u9ed1\u8272\u6216\u767d\u8272\u3002\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709need\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002\nhttps://www.luogu.org/problemnew/show/P2619\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884cV,E,need\u5206\u522b\u8868\u793a\u70b9\u6570\uff0c\u8fb9\u6570\u548c\u9700\u8981\u7684\u767d\u8272\u8fb9\u6570\u3002\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u4e00\u884c\u8868\u793a\u6240\u6c42\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\u8bf4\u660e\n0:V<=10\n1,2,3:V<=15\n0,..,19:V<=50000,E<=100000\n\u6240\u6709\u6570\u636e\u8fb9\u6743\u4e3a[1,100]\u4e2d\u7684\u6b63\u6574\u6570\u3002\n\u63a5\u4e0b\u6765E\u884c\n\u6bcf\u884cs,t,c,col\u8868\u793a\u8fd9\u8fb9\u7684\u7aef\u70b9(\u70b9\u4ece0\u5f00\u59cb\u6807\u53f7)\uff0c\u8fb9\u6743\uff0c\u989c\u8272(0\u767d\u82721\u9ed1\u8272)\u3002\n\n\u9996\u5148\uff0c\u5206\u6790\u8fd9\u9053\u9898\uff0c\u662f\u4e00\u4e2a\u5173\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u9876\u70b9\u6570\u662f50000\uff0c\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u7528\u90bb\u63a5\u77e9\u9635\uff0c\u8003\u8651\u90bb\u63a5\u8868\u3002\n\u7136\u540e\uff0c\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u662f\u8981\u8dd1\u514b\u9c81\u65af\u5361\u5c14\u5566\u3002\n\n```cpp\nint find(int x) {return f[x]==x?x:f[x]=find(f[x]);}\n\nvoid kruskal(){\n\tfor(int i=1;cnt!=n-1;++i){\n\t\tint r1=find(edge[i].start),r2=find(edge[i].end);\n\t\tif(r1!=r2) {\n\t\t\tf[find(r1)]=find(r2),cnt++;\n\t\t\tif(edge[i].c==0) temp++;\n\t\t\t    ans+=edge[i].v;\n\t\t}\n\t}\n}\n\n```\n\u4e00\u4e2a\u88f8\u7684\u514b\u9c81\u65af\u5361\u5c14\u3002\u3002\u3002\u3002\n\u63a5\u4e0b\u6765\uff0c\u9488\u5bf9next\u7684\u503c\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u679a\u4e3e\uff0c\u628a\u6bcf\u4e2a\u767d\u8fb9\u7684\u6743\u503c\u51cf\u5c11\u4e00\u5b9a\u7684\u503c\uff0c\u770b\u51cf\u5c11\u591a\u5c11\u4f1a\u4f7f\u6700\u5c0f\u751f\u6210\u6811\u7684\u767d\u8fb9\u6570\u6b63\u597d\u4e3aneed\n\u90a3\u4e48\uff0c\u4f18\u5316\u4e00\u4e0b\uff0c\u5728\u767d\u8fb9\u6743\u503c\u4e0d\u65ad\u51cf\u5c11\u7684\u8fc7\u7a0b\u4e2d\uff0c\u767d\u8fb9\u7684\u6570\u91cf\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e00\u4e2a\u5355\u8c03\u7684\u8981\u6c42\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528\u4e8c\u5206\uff0c\u4e8c\u5206\u7684\u6b63\u786e\u6027\u4e5f\u53ef\u4ee5\u7531\u6b64\u8bc1\u660e\n\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2amid\u7684\u503c\uff0c\u7ed9\u6bcf\u4e2a\u767d\u8fb9\u7684\u6743\u503c\u90fd\u52a0\u4e0amid\uff0c\u5982\u679c\u8fd9\u65f6\u767d\u8fb9\u6570\u5927\u4e8e\u7b49\u4e8eneed\uff0c\u8fd9\u65f6\u5019\u5bf9mid\u7684\u503c\u8fdb\u884c\u51cf\u5c0f\uff0c\u53cd\u4e4b\u589e\u52a0\uff0c\u6bcf\u6b21\u8dd1\u4e00\u904d\u514b\u9c81\u65af\u5361\u5c14\uff0c\u66f4\u65b0ans\u7684\u503c\uff08ans\u7684\u503c\u8981\u51cf\u53bb\u589e\u52a0\u7684mid\u7684\u6743\u503c\uff09\n\u4ed6\u7684\u7ec6\u8282\u5904\u7406\u662f\u975e\u5e38\u591a\u7684\uff0c\u6bcf\u6b21\u8dd1\u514b\u9c81\u65af\u5361\u5c14\u4e4b\u524d\u90fd\u8981\u8fdb\u884c\u6e05\u96f6\uff08\u8003\u8bd5\u65f6\u5019\u5c11\u6e05\u4e00\u4e2a\u8c03\u4e86\u51e0\u767e\u5e74QAQ\uff09(\u6342\u8138\uff09\n\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801\uff08\u5410\u69fd\u4e00\u6ce2\u8003\u8bd5\u6570\u636e\u7684\u53d8\u6001\uff0c\u5341\u4e94\u4e2a\u70b9\u8fde\u4e86\u4e8c\u5341\u4e07\u6761\u8fb9\uff09\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#define FOR(i,n,m) for(int i=n;i<=m;++i)  //\u4e00\u4e2a\u559c\u6b22\u7528\u5b8f\u5b9a\u4e49\u7684\u61d2\u4eba\uff0c\u4e0d\u7528\u5728\u610f\n#define FR(i,n,m) for(int i=bli>=m;--i)\n#define OPEN(n) freopen(n\".in\",\"r\",stdin); freopen(n\".out\",\"w\",stdout);\nusing namespace std;\n\nconst int N=102000;\nint f[N],n,need,e,l,r,mid,temp,ans,_ans,cnt;\nstruct node {int start,end,c,v;}edge[N]; \nint find(int x) {return f[x]==x?x:f[x]=find(f[x]);}\nbool cmp(node a,node b) {return a.v==b.v?a.c<b.c:a.v<b.v;} //\u6392\u5e8f\uff0c\u6309\u987a\u5e8f\uff0c\u5982\u679c\u76f8\u540c\uff0c\u767d\u8fb9\u5728\u524d\n\nvoid kruskal(){\n\tmid=(l+r)>>1;\n\tFOR(i,1,e) {if(edge[i].c==0) edge[i].v+=mid;}\n\tFOR(i,1,n+1) f[i]=i;\n\tans=0,temp=0,cnt=0; \t//\u6e05\u96f6\n\tsort(edge+1,edge+e+1,cmp); \n\tfor(int i=1;cnt!=n-1;++i){\n\t\tint r1=find(edge[i].start),r2=find(edge[i].end);\n\t\tif(r1!=r2) {\n\t\t\tf[find(r1)]=find(r2),cnt++;\n\t\t\tif(edge[i].c==0) temp++;\n\t\t\t    ans+=edge[i].v;\n\t\t}\n\t}\n}\n//\u514b\u9c81\u65af\u5361\u5c14\u554a\u554a\u554a\n\nvoid in(){\n\tscanf(\"%d%d%d\",&n,&e,&need);\n\tFOR(i,1,e){\n\t\tscanf(\"%d%d%d%d\",&edge[i].start,&edge[i].end,&edge[i].v,&edge[i].c);\n\t\tedge[i].end++;\n\t\tedge[i].start++;\n\t}\n}\n\nvoid work(){\n\tin();\n\tl=-105,r=105;\n\twhile(l<=r){\n\t\tkruskal();\n\t\tif(temp>=need) l=mid+1,_ans=ans-need*mid;\n\t\telse r=mid-1;\n\t\tFOR(i,1,e) if(edge[i].c==0) edge[i].v-=mid;\n\t}\n\tprintf(\"%d\",_ans);\n}\n\nint main(){\n\t\n\t//OPEN(\"tree\")\n\t//\u54b3\u54b3\uff0c\u8003\u8bd5\u7684\u6587\u4ef6\u540d\n\t\n\twork();\n\t\n\treturn 0;\n}\n```\n\n\u8fd9\u662f\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u535a\u5ba2\uff0c\u5404\u4f4d\u5927\u4f6c\u4e0d\u8981\u7b11\u8bdd",
        "postTime": 1540808904,
        "uid": 119086,
        "name": "zijinjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "\n\u8fd9\u662f\u4e2a\u751f\u6210\u6811\uff0c\u8003\u8651Kruskal\u7684\u6d41\u7a0b\uff0c\u8981\u60f3\u767d\u8fb9\u6570\u76ee\u6ee1\u8db3\u8981\u6c42\u5c31\u8981\u8c03\u6574\u767d\u8fb9\u7684\u4f4d\u7f6e\uff0c\u4e8c\u5206\u4e00\u4e2a\u767d\u8fb9\u6743\u503c\u504f\u79fb\u91cfw\uff0c\u6bcf\u6761\u767d\u8fb9\u7684\u8fb9\u6743\u52a0\u4e0a\u8fd9\u4e2a\u504f\u79fb\u91cf\u4e4b\u540e\u505aKruskal\uff0c\u5e76\u7edf\u8ba1\u4f7f\u7528\u7684\u767d\u8fb9\u6570\u91cf\uff0c\u5982\u679c\u591a\u4e8ek\uff0c\u5219\u767d\u8fb9\u9700\u8981\u518d\u5411\u540e\u79fb\uff1b\u5c0f\u4e8ek\u767d\u8fb9\u9700\u8981\u524d\u79fb\uff0c\u8c03\u6574\u504f\u79fb\u91cf\u3002\n\n\u6700\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\n\n~~\u7136\u800c\u6211\u8fd8\u6709\u4e00\u4e2a\u4e0d\u6210\u719f\u7684LCT\u60f3\u6cd5\u4e0d\u8fc7\u51c9\u51c9\u4e86\u3002\u5927\u6982\u5c31\u662f\u7528\u5806\u7ef4\u62a4\u4e00\u4e0b\u9ed1\u8fb9\u767d\u8fb9\u7136\u540e\u4f9d\u636e\u767d\u8fb9\u6570\u91cf\u8c03\u6574\u3002\u4f46\u662f\u51c9\u51c9\u4e86\u3002~~\n\n\u4ee3\u7801\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#define N 100005\nusing namespace std;\nstruct node\n{\n\tint u,v,l,col;\n}a[N],b[N];\nbool comp(node aa,node bb)\n{\n\treturn aa.l==bb.l?aa.col<bb.col:aa.l<bb.l;\n}\nint f[N],n,m,ned;\nint get_f(int now)\n{\n\treturn now==f[now]?f[now]:f[now]=get_f(f[now]);\n}\n\nint l=-100,r=100,ans,us;\nbool canit(int mid)\n{\n\tint tot=ans=0,get=0;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tb[i]=a[i];\n\t\tif(a[i].col==0) b[i].l+=mid;\n\t}\n\tsort(b+1,b+m+1,comp);\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u=get_f(b[i].u),v=get_f(b[i].v);\n\t\tif(u==v) continue;\n\t\ttot++;\n\t\tf[u]=v;ans+=b[i].l;\n\t\tget+=b[i].col==0;\n\t\tif(tot+1==n) break;\n\t}\n\treturn get>=ned;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&ned);\n\tfor(int i=1;i<=m;++i)\n\tscanf(\"%d%d%d%d\",&a[i].u,&a[i].v,&a[i].l,&a[i].col),a[i].u++,a[i].v++;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(canit(mid)) l=mid+1,us=mid;\n\t\telse r=mid-1;\n\t}\n\tcanit(us);\n\tprintf(\"%d\\n\",ans-ned*us);\n\treturn 0;\n}\n```",
        "postTime": 1517453540,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "\u65b0\u59ff\u52bf\u3002\u5e26\u6743\u4e8c\u5206\u3002\n\n\u8003\u8651\u4e8c\u5206\u504f\u79fb\u91cf\uff0c\u5bf9\u6bcf\u4e2a\u767d\u8fb9\u90fd\u52a0\u4e0a\u504f\u79fb\u91cf\uff0c\u7136\u540e\u505akruscal\u8fdb\u884c\u5224\u5b9a\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\uff1f\u6211\u7684\u7406\u89e3\u662f\u52a0\u4e0a\u504f\u79fb\u91cf\u540e\u767d\u8fb9 \u80fd\u88ab\u7b97\u5165\u751f\u6210\u6811\u7684\u8fb9\u6570\u662f\u5355\u8c03\u7684\u3002\u5e76\u4e14\u5bf9\u4e8e\u6240\u6709\u767d\u8fb9\u52a0\u540c\u4e00\u4e2a\u6743\u503c\u5e76\u4e0d\u4f1a\u6539\u53d8\u767d\u8fb9\u95f4\u7684\u201c\u4f18\u5148\u7ea7\u201d\u2014\u2014\u76f8\u5bf9\u987a\u5e8f\uff0c\u53ea\u4f1a\u6539\u53d8\u767d\u8fb9\u9ed1\u8fb9\u4e4b\u95f4\u7684\u201c\u4f18\u5148\u7ea7\u201d\u3002 \u611f\u6027\u7684\u7406\u89e3\u4e00\u4e0b\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=50005,M=100005,INF=1e9;\nstruct edge{\n\tint u,v,w,col;\n}e[M];\nint n,m,k;\ninline void init(){\n\tn=read(); m=read(); k=read();\n\tfor (int i=1;i<=m;i++){\n\t\te[i].u=read()+1; e[i].v=read()+1; e[i].w=read(); e[i].col=read();\n\t}\n}\nint fa[N];\nint getfa(int x){\n\treturn (fa[x]==x)?x:fa[x]=getfa(fa[x]);\n}\nint ans;\ninline bool cmp(edge A,edge B){\n\treturn A.w<B.w||(A.w==B.w&&A.col<B.col);\n}\ninline bool judge(int x){\n\tfor (int i=1;i<=n;i++){\n\t\tfa[i]=i;\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tif (!e[i].col) e[i].w+=x;\n\t}\n\tsort(e+1,e+1+m,cmp); int cnt=0,res=0; ans=0;\n\tfor (int i=1;i<=m;i++){\n\t\tint p=getfa(e[i].u),q=getfa(e[i].v);\n\t\tif (p!=q){\n\t\t\tfa[p]=q; cnt++; res+=(e[i].col==0); ans+=e[i].w;\n\t\t\tif (cnt==n-1) break;\n\t\t}\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tif (!e[i].col) e[i].w-=x;\n\t}\n\treturn res>=k;\n}\ninline void solve(){\n\tint l=-100,r=101;\n\twhile (l<r){\n\t\tint mid=(l+r+1)>>1;\n\t\tif (judge(mid)) l=mid;\n\t\t\telse r=mid-1;\n\t}\n\tjudge(l);\n\twriteln(ans-l*k);\n}\nint main(){\n\tinit(); solve(); return 0;\n}\n```",
        "postTime": 1538984555,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u8fd9\u3002](https://www.cnblogs.com/maomao9173/p/10916587.html)\n\n\u65b0\u5b66\u7684\u79d1\u6280\u3002\u8bbe$f(x)$\u4e3a\u9009$x$\u6761\u767d\u8272\u8fb9\u7684\u65f6\u5019\u7684\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u548c\uff0c\u90a3\u4e48\u53ef\u4ee5\u731c\u5230\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u4e0b\u51f8\u51fd\u6570\u7684\u5f62\u5f0f\u3002\n\n![](http://images.cnblogs.com/cnblogs_com/maomao9173/1317473/o_111.png)\n\n\u5982\u56fe\uff0c\u56fe\u4e2d$x$\u5750\u6807\u8868\u793a\u9009\u7684\u767d\u8272\u8fb9\u6761\u6570\uff0c$y$\u5750\u6807\u8868\u793a\u83b7\u5f97\u7684\u6743\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a$f(x)$\u5728\u8fd9\u4e2a\u56fe\u4e0a\u5927\u81f4\u8868\u793a\u51fa\u6765\u3002\u6211\u4eec\u73b0\u5728\u5e76\u4e0d\u6e05\u9664$x$\u548c$y$\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u4e00\u4e0b\u548c\u8fd9\u4e2a\u51f8\u51fd\u6570\u76f8\u5207\u76f4\u7ebf\u7684\u659c\u7387\u3002\u8bbe\u8fd9\u4e2a\u76f4\u7ebf\u4e3a$y = kx + b$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684$x$\uff0c\u622a\u8ddd\u6700\u5c0f\u7684\u65f6\u5019\uff0c\u5c31\u662f\u4e0e\u51fd\u6570\u76f8\u5207\u7684\u65f6\u5019\u561b\uff0c\u4e5f\u662f\u7b54\u6848\u6700\u4f18\u7684\u65f6\u5019\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u76f4\u7ebf\u8f6c\u5316\u6210$y - kx = b$\u7684\u5f62\u5f0f\u3002\u7531\u4e8e\u4e0d\u6e05\u695a\u4f1a\u9009\u7528\u51e0\u6761\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u63d0\u524d\u7ed9\u6bcf\u4e00\u6761\u767d\u8272\u8fb9\u90fd\u51cf\u53bb\u4e00\u4e2a$k$\uff0c\u8fd9\u6837\u4e0d\u7ba1\u9009\u51e0\u6761\u8fb9\u5176\u5f71\u54cd\u90fd\u53ef\u4ee5\u88ab\u76f4\u63a5\u7edf\u8ba1\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u5ffd\u7565\u9009\u51e0\u6761\u8fb9\u7684\u95ee\u9898\u76f4\u63a5\u53bb\u6700\u5c0f\u5316\u622a\u8ddd$b$\u4e86\u3002\u5728\u6700\u5c0f\u5316\u622a\u8ddd\u7684\u540c\u65f6\u6211\u4eec\u5bf9$y$\u7684\u503c\u548c$x$\u7684\u503c\u505a\u4e00\u4e2a\u8bb0\u5f55\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u51fa\u5e94\u8be5\u53d6\u7528\u5de6\u533a\u95f4\u8fd8\u662f\u53f3\u533a\u95f4\u7684\u5224\u5b9a\u5566\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 50000 + 5;\nconst int M = 100000 + 5;\n#define pii pair <int, int>\n#define mp(x,y) make_pair (x, y)\n\nstruct Len {\n\tint u, v, w, c;\n\n\tvoid read () {\n\t\tcin >> u >> v >> w >> c;\n\t}\n\t\n\tbool operator < (Len rhs) const { \n\t\treturn w == rhs.w ? c < rhs.c : w < rhs.w;\n\t}\n}L[M];\n\nint n, m, k, fa[N];\n\nint find (int x) {\n\treturn x == fa[x] ? x : fa[x] = find (fa[x]);\n}\n\npii Kruskal () {\n\tfor (int i = 0; i < n; ++i) fa[i] = i;\n\tsort (L, L + m);\n\tint cnt = 0, ret = 0, wht = 0;\n\tfor (int i = 0; i < m; ++i) {\n\t\tint fu = find (L[i].u);\n\t\tint fv = find (L[i].v);\n\t\tif (fu != fv) {\n\t\t\tcnt += 1;\n\t\t\tfa[fu] = fv;\n\t\t\tret += L[i].w;\n\t\t\twht += L[i].c == 0;\n\t\t}\n\t\tif (cnt == m - 1) break;\n\t}\t\n\treturn mp (wht, ret);\n} \n\nsigned main () {\n//\tfreopen (\"data.in\", \"r\", stdin);\n\tcin >> n >> m >> k;\n\tfor (int i = 0; i < m; ++i) {\n\t\tL[i].read ();\n\t}\n\tint l = -150, r = 150, ans = 0;\n\twhile (l < r) {\n\t\tint mid = (l + r) >> 1;\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tif (L[i].c == 0) { // \u767d\u8272 \n\t\t\t\tL[i].w -= mid;\n\t\t\t}\n\t\t} \n\t\tpii ret = Kruskal ();\n//\t\tcout << \"l = \" << l << \" r = \" << r << \" mid = \" << mid <<  \" ret = (\" << ret.first << \", \" << ret.second << \")\" << endl; \n\t\tif (ret.first >= k) {\n\t\t\tr = mid;\n\t\t\tans = ret.second + mid * k;\n\t\t} else {\n\t\t\tl = mid + 1;\n\t\t}\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tif (L[i].c == 0) {\n\t\t\t\tL[i].w += mid;\n\t\t\t}\n\t\t}\n\t}\n//\tcout << l << \" \" << r << endl;\n\tcout << ans << endl;\n}\n```",
        "postTime": 1558665290,
        "uid": 58698,
        "name": "Nativ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u8fd9\u4e2a\u9898\u9762\u5f88\u53cb\u597d\u3002\n\n## \u9898\u89e3\n\n\u4e8c\u5206+\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u6761\u767d\u8fb9\u52a0\u4e0a\u67d0\u4e00\u4e2a\u503c\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u63a7\u5236\u767d\u8fb9\u9009\u62e9\u7684\u6570\u91cf\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u8fd9\u4e2a\u503c\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u5355\u8c03\u6027\u8bc1\u660e\uff1a\n\n\u5982\u679c\u67d0\u4e00\u65f6\u523b\u7684mid\u8f83\u5927\uff0c\u4f7f\u5f97\u9009\u62e9\u7684\u767d\u8fb9\u6570\u91cf\u5c0f\u4e8eneed\uff0c\u6211\u4eec\u5c31\u76f8\u5e94\u7684\u628amid\u8c03\u5c0f\uff0c\u4e5f\u5c31\u662f\u4ee4r=mid\u3002\n\n\u540c\u7406\uff0c\u5982\u679c\u67d0\u4e00\u65f6\u523b\u7684mid\u8f83\u5c0f\uff0c\u4f7f\u5f97\u9009\u62e9\u7684\u767d\u8fb9\u6570\u91cf\u5927\u4e8e\uff0c\u6211\u4eec\u5c31\u76f8\u5e94\u7684\u628amid\u8c03\u5927\uff0c\u4e5f\u5c31\u662f\u4ee4l=mid+1\u3002\n\n\u7531\u4e0a\u53ef\u77e5\u6b64\u9898\u7684\u5355\u8c03\u6027\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst int MAXN = 100000 + 5;\nconst int INF = 1e2 + 5;\nint n, m, ans, need;\nstruct EdgeNode {\n\tint from;\n\tint to, val;\n\tint color;\n} e[MAXN];\n\nint sum, tot, white;\nstruct UnionFindSet{\n\tint fa[MAXN];\n\n\tvoid init(int lim) {\n\t\tfor (int i = 1; i <= lim; ++i)\n\t\t\tfa[i] = i;\n\t\tsum = 0;\n\t\ttot = 0;\n\t\twhite = 0;\n\t}\n\n\tint find(int x) {\n\t\tif (x ^ fa[x]) fa[x] = find(fa[x]);\n\t\treturn fa[x];\n\t}\n\n\tvoid merge(int x, int y, int i) {\n\t\tx = find(x);\n\t\ty = find(y);\n\t\tif (x ^ y) {\n\t\t\ttot++;\n\t\t\tfa[x] = y;\n\t\t\tsum += e[i].val;\n\t\t\twhite += (e[i].color ^ 1);\n\t\t}\n\t}\n} ufs;\n\nbool cmp(EdgeNode x, EdgeNode y) {\n\treturn (x.val == y.val) ? (x.color < y.color) : (x.val < y.val);\n}\n\nvoid get_mst() {\n\tsort(e + 1, e + 1 + m, cmp);\n\tfor (int i = 1; tot != n - 1; ++i) {\n\t\t// if (tot == n - 1) break;\n\t\tufs.merge(e[i].from, e[i].to, i);\n\t}\n}\n\nvoid over(int x) {\n\tfor (int i = 1; i <= m; ++i) if (e[i].color ^ 1) e[i].val -= x;\n}\n\nbool check(int x) {\n\tufs.init(n + 1);\n\tfor (int i = 1; i <= m; ++i) if (e[i].color ^ 1) e[i].val += x;\n\tget_mst();\n\treturn white >= need;\n}\n\nsigned main() {\n\tscanf(\"%d %d %d\", &n, &m, &need);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d %d %d\", &e[i].from, &e[i].to, &e[i].val, &e[i].color);\n\t\te[i].from++, e[i].to++;\n\t}\n\tint l = -INF, r = INF;\n\twhile (l < r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid)) l = mid + 1, ans = sum - mid * need;\n\t\telse r = mid;\n\t\tover(mid);\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1585543142,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "$\\ \\ \\ \\ \\ \\ $\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u4e00\u9053\u597d\u7684\u4e8c\u5206\u9898\uff0c\u53ea\u4e0d\u8fc7\u6bd4\u8f83\u88f8\n\n---\n\n## \u9898\u76ee\u5206\u6790\n\n$\\ \\ \\ \\ \\ \\ $\u9898\u610f\uff1a\n\n>$\\ \\ \\ \\ \\ \\ $\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709$need$\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\n\n$\\ \\ \\ \\ \\ \\ $\u4e5f\u5c31\u662f\u8bf4\u8ba9\u4f60\u6c42\u4e00\u68f5\u6709$need$\u6761\u767d\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6c42\u95ee\u8be5\u6811\u7684\u8fb9\u6743\n\n## \u9898\u76ee\u89e3\u6790\n\n$\\ \\ \\ \\ \\ \\ $\u5f00\u59cb\u5728\u6a21\u62df\u8d5b\u573a\u4e0a\u62ff\u5230\u8fd9\u9053\u9898\uff0c\u9996\u5148\u8003\u8651\u4e8c\u5206\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\uff0c\u5224\u65ad\u5f53\u524d\u6709$need$\u6761\u767d\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u5426\u8fb9\u6743\u5c0f\u4e8e\u6211\u4eec\u5f53\u524d\u7684\u7b54\u6848\u3002   \n\n$\\ \\ \\ \\ \\ \\ $\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u5f53\u524d\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\u591a\u5c11\u6761\u8fb9\u6743\u3002   \n\n$\\ \\ \\ \\ \\ \\ $\u8003\u8651\u6b63\u786e\u6027\uff0c\u6211\u4eec\u53d1\u73b0\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u662f$Kruskal$\uff0c\u6211\u4eec\u628a\u6743\u503c\u5c0f\u7684\u653e\u5728\u524d\u9762\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u4f18\u5148\u7528\u5230\u90a3\u4e00\u6761\u8fb9\uff0c\u4f46\u662f\u8fd9\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n$\\ \\ \\ \\ \\ \\ $\u6211\u4eec\u53d1\u73b0\u6743\u503c\u8d8a\u5c0f\u7684\uff0c\u7528\u5230\u7684\u673a\u4f1a\u5c31\u8d8a\u5927\u3002\u6240\u4ee5\u8bf4\u6211\u4eec\u8981\u786e\u5b9a\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u4f7f\u5f97\u767d\u8fb9\u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u4e2d\uff0c\u4f4d\u7f6e\u4e0d\u5b9a\n\n$\\ \\ \\ \\ \\ \\ $\u8fd9\u4e2a\u610f\u601d\u662f\u8bf4\uff0c\u6211\u4eec\u4fee\u6539\u767d\u8fb9\u7684\u5c5e\u6027\uff0c\u6539\u53d8\u5b83\u7684\u4f18\u5148\u7ea7\uff0c\u4f7f\u5f97\u91c7\u7528\u7684\u65b9\u6cd5\u4e0d\u540c\u3002\n\n$\\ \\ \\ \\ \\ \\ $\u6211\u4eec\u8003\u8651\u6539\u6389\u6240\u6709\u7684\u767d\u8fb9\u6743\u503c\uff0c\u6211\u4eec\u60ca\u5947\u7684\u53d1\u73b0\u5b83\u662f\u6709\u5355\u8c03\u6027\u7684\uff0c\u6211\u4eec\u767d\u8fb9\u8d8a\u957f\uff0c\u7528\u5230\u7684\u5c31\u8d8a\u5c11\uff08\u8003\u8651Kruskal\u7684\u6392\u5e8f\uff09\uff0c\u5f88\u663e\u7136\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\uff0c\u4fee\u6539\u767d\u8fb9\u7684\u8fb9\u6743\uff0c\u6bcf\u6b21\u8fdb\u884cKruskal\u6765\u5224\u65ad\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u662f\u5426\u6709$need$\u6761\u767d\u8fb9\n\n$\\ \\ \\ \\ \\ \\ $\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(E \\log E \\times \\log 200)$\uff0c\u5e38\u6570\u5176\u5b9e\u5f88\u5c0f\n\n## \u4ee3\u7801\u7ec6\u8282\n\n- \u5f53\u4e24\u6761\u8fb9\u6743\u503c\u76f8\u7b49\uff0c\u4f18\u5148\u8003\u8651\u767d\u8fb9\n\n- \u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316\n\n$\\ \\ \\ \\ \\ \\ $\u4ee3\u7801\u7ec6\u8282\u8be6\u89c1\u6ce8\u91ca\n\n```cpp\n#include<set>\n#include<map>\n#include<queue> \n#include<cstdio>\n#include<string>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct Edge{\n\tint s,t,c,col;\n\tbool operator <(Edge x) const\n\t{\n\t\tif(c==x.c)\treturn col<x.col;\n\t\telse\treturn c<x.c;//\u6211\u4eec\u786e\u5b9a\u4f18\u5148\u7ea7\uff0c\u6743\u503c\u76f8\u7b49\u767d\u8fb9\u4f18\u5148\uff0c\u5426\u5219\u6743\u503c\u5c0f\u5728\u524d\n\t}\n}edge[100005];\nint read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9')\tc=getchar();\n\twhile(c>='0' && c<='9')\tx=(x<<1)+(x<<3)+(c^'0'),c=getchar();\n\treturn x;\n}//\u5feb\u8bfb\nint n,m,need,value,s[100005],t[100005],c[100005],col[100005],fa[50005];\nvoid makeSet(int x){for(int i=1;i<=x;++i)\tfa[i]=i;}\nint findSet(int x)\n{\n\tif(x==fa[x])\treturn x;\n\telse\treturn fa[x]=findSet(fa[x]);\n}\nbool unionSet(int x,int y)\n{\n\tint xx=findSet(x),yy=findSet(y);\n\tif(xx==yy)\treturn false;\n\tfa[xx]=yy;\n\treturn true;\n}//\u5e76\u67e5\u96c6\u4e0d\u89e3\u91ca\uff0c\u6ce8\u610f\u8fd9\u91ccunion\u7684\u5199\u6cd5\nbool check(int mid)\n{\n\tmakeSet(n);//\u6ce8\u610fmakeSet\n\tvalue=0;\n\tint cnt=0;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tif(!col[i])\tedge[i]=(Edge){s[i],t[i],c[i]+mid,col[i]};\n\t\telse\tedge[i]=(Edge){s[i],t[i],c[i],col[i]};\n\t}//\u6211\u4eec\u66f4\u6539\u767d\u8fb9\u7684\u6743\u503c\uff0c\u52a0\u4e0a\u5f53\u524d\u7684\u4e8c\u5206\u503c\n\tsort(edge+1,edge+1+m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tif(unionSet(edge[i].s,edge[i].t))\n\t\t{\n\t\t\tvalue+=edge[i].c;\n\t\t\tif(!edge[i].col)\t++cnt;\n\t\t}\n\t}//\u8fdb\u884cKruskal\uff0c\u5224\u65ad\u662f\u5426\u80fd\u9009need\u6761\u767d\u8fb9\n\treturn cnt>=need;\n}\nint main(){\n\t// freopen(\"tree.in\",\"r\",stdin);\n\t// freopen(\"tree.out\",\"w\",stdout);\n\tn=read(),m=read(),need=read();\n\tfor(int i=1;i<=m;++i)\ts[i]=read(),t[i]=read(),c[i]=read(),col[i]=read(),++s[i],++t[i];\n\tint l=-105,r=105,ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid))\tl=mid+1,ans=value-need*mid;\n\t\telse\tr=mid-1;\n\t}//\u4e8c\u5206\uff0c\u6ce8\u610f\u66f4\u65b0\u7b54\u6848\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1575290841,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2619 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I\u3011"
    },
    {
        "content": "### \u9898\u9762\n\n1491\uff1aTree\n\n\u65f6\u95f4\u9650\u5236: 1000 ms \u5185\u5b58\u9650\u5236: 65536 KB\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u539f\u9898\u6765\u81ea\uff1a2012 \u5e74\u56fd\u5bb6\u96c6\u8bad\u961f\u4e92\u6d4b\n\n\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u5e26\u6743\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u662f\u9ed1\u8272\u6216\u767d\u8272\u3002\u8ba9\u4f60\u6c42\u4e00\u68f5\u6700\u5c0f\u6743\u7684\u6070\u597d\u6709$need$\u6761\u767d\u8272\u8fb9\u7684\u751f\u6210\u6811\u3002\u9898\u76ee\u4fdd\u8bc1\u6709\u89e3\u3002\n\n\u3010\u8f93\u5165\u3011\n\n\u7b2c\u4e00\u884c$V,E,need$\u5206\u522b\u8868\u793a\u70b9\u6570\uff0c\u8fb9\u6570\u548c\u9700\u8981\u7684\u767d\u8272\u8fb9\u6570\u3002\n\n\u63a5\u4e0b\u6765$E$\u884c\uff0c\u6bcf\u884c$s,t,c,col$\u8868\u793a\u8fd9\u8fb9\u7684\u7aef\u70b9\uff08\u70b9\u4ece$0$\u5f00\u59cb\u6807\u53f7\uff09\uff0c\u8fb9\u6743\uff0c\u989c\u8272\uff08$0$\u767d\u8272\uff0c$1$\u9ed1\u8272\uff09\u3002\n\n\u3010\u8f93\u51fa\u3011\n\n\u4e00\u884c\u8868\u793a\u6240\u6c42\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\n\u3010\u8f93\u5165\u6837\u4f8b\u3011\n\n2 2 1  \n\n0 1 1 1  \n\n0 1 2 0\n\n\u3010\u8f93\u51fa\u6837\u4f8b\u3011\n\n2\n\n\u3010\u63d0\u793a\u3011\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n\u5bf9\u4e8e\u6240\u6709\u6570\u636e\uff0c$V\u22645\u00d710^4,E\u226410^5$\uff0c\u8fb9\u6743\u4e3a$[1,100]$\u4e2d\u7684\u6b63\u6574\u6570\u3002\n\n### \u7b97\u6cd5\n\nKruskal+\u4e8c\u5206\n\n**Kruskal**\n\n\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u901a\u8fc7\u6392\u5e8f\u3001\u8d2a\u5fc3\u3001\u5e76\u67e5\u96c6\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\n\n**\u4e8c\u5206**\n\n\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\uff0c\u5982\u679c\u8ba9\u767d\u8272\u7684\u8fb9\u52a0\u4e0a\uff08\u6216\u51cf\u53bb\uff09\u4e00\u4e2a\u503c\uff0c\u5219\u5728\u8d2a\u5fc3\u7b97\u6cd5\u7684Kruskal\u4e2d\uff0c\u767d\u8272\u8fb9\u7684\u6570\u76ee\u5fc5\u7136\u4e0d\u5927\u4e8e\uff08\u4e0d\u5c0f\u4e8e\uff09\u6700\u521d\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u767d\u8272\u8fb9\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u767d\u8272\u8fb9\u7684\u589e\u503c\u548c\u767d\u8272\u8fb9\u7684\u6570\u91cf\u662f\u5355\u8c03\u7684\uff0c\u53ef\u4ee5\u4e8c\u5206\u3002\n\n\u6b64\u5904\u8981\u4e8c\u5206\u589e\u51cf\u7684\u503c\uff08\u4e3a$mid$\uff09\uff0c\u9274\u4e8e\u8fb9\u6743\u5728$1~100$\u4e4b\u95f4\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e0a\u4e0b\u754c\u4e3a$105$\u3001$-105$\uff0c\u6bcf\u6b21\u4e8c\u5206\u8fdb\u884c\u4e00\u6b21Kruskal\uff0c\u518d\u68c0\u67e5\u7b54\u6848\uff0c\u5982\u679c\u767d\u8272\u8fb9\u5927\u4e8e\u7b49\u4e8e$need$\uff0c\u5219\u66f4\u65b0\u7b54\u6848\u4e3a$ans=sum-mid*need$\uff08$sum$\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\uff0c$mid$\u662f\u589e\u51cf\u503c\uff09\uff0c\u4e0d\u65ad\u4e8c\u5206\u4f7f\u767d\u8272\u8fb9\u4e0d\u65ad\u63a5\u8fd1$need$\uff0c\u53ef\u4ee5\u83b7\u5f97\u6700\u4f18\u7b54\u6848\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nint v,e,need;\nstruct node\n{\n\tint u,v,w,colour;\n}edge[100005];\ninline bool cmp(const node &A,const node &B)\n{\n\tif(A.w==B.w)\n\t{\n\t\treturn A.colour<B.colour;\n\t}\n\treturn A.w<B.w;\n}//\u8fb9\u7684\u7ed3\u6784\u4f53\u548c\u6bd4\u8f83\u51fd\u6570\nint father[50005];\nint find_father(int x)\n{\n\tif(father[x]==x)\n\t{\n\t\treturn father[x];\n\t}\n\tfather[x]=find_father(father[x]);\n\treturn father[x];\n}//\u5e76\u67e5\u96c6\nint sum,white,cnt;\nint main()\n{\n\tscanf(\"%d%d%d\",&v,&e,&need);\n\tfor(int i=1;i<=e;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&edge[i].u,&edge[i].v,&edge[i].w,&edge[i].colour);\n\t\tedge[i].u++;\n\t\tedge[i].v++;\n\t}//\u8bfb\u5165\n\tint l=-105,r=105,mid,ans=0;\n    //\u4e8c\u5206\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tfor(int i=1;i<=e;i++)\n\t\t{\n\t\t\tif(edge[i].colour==0)\n\t\t\t{\n\t\t\t\tedge[i].w+=mid;\n\t\t\t}\n\t\t}//\u589e\u52a0\u503c\n\t\tfor(int i=1;i<=v;i++)\n\t\t{\n\t\t\tfather[i]=i;\n\t\t}/\n\t\tsum=0,white=0,cnt=0;//\u521d\u59cb\u5316\n\t\tstd::stable_sort(edge+1,edge+e+1,cmp);//\u6392\u5e8f\n\t\tfor(int i=1;i<=e;i++)\n\t\t{\n\t\t\tint f1=find_father(edge[i].u),f2=find_father(edge[i].v);\n\t\t\tif(f1!=f2)\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tsum+=edge[i].w;\n\t\t\t\tfather[f2]=f1;\n\t\t\t\tif(edge[i].colour==0)\n\t\t\t\t{\n\t\t\t\t\twhite++;\n\t\t\t\t}\n\t\t\t\tif(cnt==v-1)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}//\u6700\u5c0f\u751f\u6210\u6811Kruskal\uff0c\u5e76\u7edf\u8ba1\u767d\u8272\u8fb9\u6570\u91cf\n\t\tif(white>=need)\n\t\t{\n\t\t\tl=mid+1;\n\t\t\tans=sum-mid*need;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=mid-1;\n\t\t}//\u66f4\u65b0\u8fb9\u754c\u503c\u3001\u7b54\u6848\n\t\tfor(int i=1;i<=e;i++)\n\t\t{\n\t\t\tif(edge[i].colour==0)\n\t\t\t{\n\t\t\t\tedge[i].w-=mid;\n\t\t\t}\n\t\t}//\u8fd8\u539f\u8fb9\u6743\n\t}\n\tprintf(\"%d\",ans);//\u8f93\u51fa\n\treturn 0;\n}\n```\n\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1491\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 420KB 2MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 7664KB 106MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 7664KB 103MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 7656KB 104MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 7664KB 104MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 7668KB 102MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 7656KB 103MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 7668KB 102MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 7656KB 105MS \n\n\u6d4b\u8bd5\u70b910: \u7b54\u6848\u6b63\u786e 7668KB 103MS \n\n\u6d4b\u8bd5\u70b911: \u7b54\u6848\u6b63\u786e 7664KB 103MS \n\n\u6d4b\u8bd5\u70b912: \u7b54\u6848\u6b63\u786e 6156KB 92MS \n\n\u6d4b\u8bd5\u70b913: \u7b54\u6848\u6b63\u786e 6308KB 93MS \n\n\u6d4b\u8bd5\u70b914: \u7b54\u6848\u6b63\u786e 6552KB 101MS \n\n\u6d4b\u8bd5\u70b915: \u7b54\u6848\u6b63\u786e 6796KB 100MS \n\n\u6d4b\u8bd5\u70b916: \u7b54\u6848\u6b63\u786e 6892KB 100MS \n\n\u6d4b\u8bd5\u70b917: \u7b54\u6848\u6b63\u786e 7056KB 105MS \n\n\u6d4b\u8bd5\u70b918: \u7b54\u6848\u6b63\u786e 7124KB 106MS \n\n---\n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 1.68s \u5185\u5b58 3.25MB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n\n2ms/516.00KB AC #1\n\n3ms/668.00KB AC #2\n\n126ms/2.88MB AC #3\n\n3ms/800.00KB AC #4\n\n4ms/652.00KB AC #5\n\n5ms/816.00KB AC #6\n\n6ms/780.00KB AC #7\n\n7ms/816.00KB AC #8\n\n9ms/900.00KB AC #9\n\n122ms/2.00MB AC #10\n\n150ms/2.40MB AC #11\n\n133ms/2.48MB AC #12\n\n142ms/2.45MB AC #13\n\n147ms/2.64MB AC #14\n\n148ms/2.62MB AC #15\n\n150ms/2.63MB AC #16\n\n164ms/2.91MB AC #17\n\n166ms/3.01MB AC #18\n\n189ms/3.25MB AC #19\n\n3ms/652.00KB AC #20",
        "postTime": 1565684620,
        "uid": 158626,
        "name": "lzcjoe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2619\u3010[\u56fd\u5bb6\u96c6\u8bad\u961f2]Tree I  \u4e00\u672c\u901a\u63d0\u9ad8\u7bc7 3.1.4 1491 Tree\u3011"
    }
]