[
    {
        "content": "### Description\n\n\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $a[n]$\uff0c\u652f\u6301 $q$ \u6b21\u4e0b\u9762 $3$ \u79cd\u64cd\u4f5c\uff1a\n\n- $\\mathrm{update}(l, r, x)$: \u5bf9\u4e8e $i \\in [l, r]$,  \u628a $a[i]$ \u8bbe\u4e3a $(a[i] \\oplus x)$;\n- $\\mathrm{sort}(l, r)$: \u628a $a[l..r]$ \u6392\u5e8f\uff1b\n- $\\mathrm{sum}(l, r, x)$: \u8fd4\u56de $a[l] \\oplus \\dots \\oplus a[r]$.\n\n#### \u9650\u5236\n\n$1 \\leq n,  q \\leq 10^5$\n\n$0 \\leq a_i, x < 10^8$\n\n### Solution\n\n\u5bf9\u4e8e\u96c6\u5408 $S$ \u548c\u6570\u5b57 $x$, \u7528 $\\mathrm{sort}(S) \\oplus x$ \u4ee3\u8868\u5e8f\u5217 $[s_1 \\oplus x, \\dots, s_m \\oplus x]$\uff0c\u5176\u4e2d\n\n- $S = \\{s_1, s_2, \\dots, s_m\\}$,\n- $s_1 \\leq \\dots \\leq s_m$.\n\n\u628a\u6570\u7ec4 $a[n]$ \u5212\u5206\u6210\u82e5\u5e72\u5bf9\u5b50 $(S_1, x_1), (S_2, x_2), \\dots$ \u4f7f\u5f97 \n$$\na = (\\mathrm{sort}(S_1) \\oplus x_1) + (\\mathrm{sort}(S_2) \\oplus x_2) + \\dots\n$$\n\n---\n\n\u5bf9\u4e8e\u533a\u95f4 $[l, r]$ \u7684\u64cd\u4f5c\uff0c\u5047\u8bbe\u5b58\u5728 $i \\leq j$ \u6ee1\u8db3\n$$\na[l..r] = (\\mathrm{sort}(S_i) \\oplus x_i) + \\dots + (\\mathrm{sort}(S_j) \\oplus x_j).\n$$\n\u5426\u5219\uff0c\u9700\u8981\u628a\u81f3\u591a $2$ \u5bf9 $(S, x)$ \u5206\u88c2\u3002\n\n- $\\mathrm{update}$ \u64cd\u4f5c\uff0c\u66f4\u65b0$x_i, \\dots, x_j$\uff1b\n- $\\mathrm{sort}$ \u64cd\u4f5c\u65f6\uff0c\u628a\u8fd9\u4e9b\u5bf9\u5b50\u5408\u5e76\u4e3a $\\mathrm{sort}((S_i \\oplus x_i) \\cup \\dots \\cup (S_j \\oplus x_j))$.\n\n- $\\mathrm{sum}$ \u64cd\u4f5c\u65f6\uff0c\u67e5\u8be2 $\\bigoplus_{k = i}^j \\mathrm{sum}(S_k) \\oplus x_k$.\n\n---\n\n\u56e0\u6b64\uff0c\u96c6\u5408 $S$ \u9700\u8981\u652f\u6301 $4$ \u79cd\u64cd\u4f5c\uff1a\n\n- $\\mathrm{partition}(S, k) = (S', S'')$ where $\\max S' \\leq \\min S''$ and $|S'| = k$,\n- $\\mathrm{flip}(S, y) = \\{x \\oplus y : x \\in S\\}$,\n- $\\mathrm{merge}(S, S') = S \\cup S'$,\n- $\\mathrm{sum}(S) = \\bigoplus_{x \\in S} x$.\n\nTrie \u652f\u6301\u8fd9 $4$ \u4e2a\u64cd\u4f5c\u3002\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 Compacted Trie.\n\n\u6ce8\u610f $10^8 < 2^{27}$, $27 < 2^5$, \u6240\u4ee5\u4e00\u4e2a `uint32_t` \u540c\u65f6\u53ef\u4ee5\u5b58\u4e0b\u6807\u8bb0\u548c\u957f\u5ea6\u3002\n\n---\n\n\u5168\u5c40\u4f7f\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5904\u7406\u533a\u95f4\u64cd\u4f5c\uff0c\u628a $(S_i, x_i)$ \u5b58\u50a8\u5728 $|S_1| + \\dots + |S_{i - 1}|$.\n\n\u533a\u95f4\u64cd\u4f5c\u524d\uff0c\u627e\u5230 $< l$ (and $\\leq r$) \u7684\u6700\u540e\u4e00\u4e2a $(S_i, x_i)$\uff0c\u5904\u7406\u53ef\u80fd\u7684\u5206\u88c2\u3002\n\n\u590d\u6742\u5ea6\u662f $O((q + n) (\\log n + \\max \\log a_i))$.",
        "postTime": 1615169899,
        "uid": 22682,
        "name": "ftiasch",
        "ccfLevel": 0,
        "title": "[Ynoi2013] Ynoi"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/P5612).\n\n\u9996\u5148\u8003\u8651\u8fd9\u4e2a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u600e\u4e48\u7ef4\u62a4\u3002\u6211\u4eec\u53d1\u73b0\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u8fd9\u4e2a\u4e8b\u5b83\u538b\u6839\u5c31\u6ca1\u6cd5\u76f4\u63a5\u7ef4\u62a4\u5230\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c\u7ef4\u62a4\u6709\u5e8f\u6bb5\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u628a\u539f\u5e8f\u5217\u5212\u5206\u6210\u82e5\u5e72\u6709\u5e8f\u6bb5\u8fdb\u884c\u7ef4\u62a4\u3002\u6ce8\u610f\u5230\u4e00\u6b21\u6392\u5e8f\u7b49\u4e8e\u5728\u5206\u88c2\u81f3\u591a\u4e24\u4e2a\u6709\u5e8f\u6bb5\u4e4b\u540e\u7b49\u4e8e\u662f\u628a\u4e00\u5806\u6709\u5e8f\u6bb5\u7684\u5408\u5e76\u8d77\u6765\uff08\u52bf\u80fd\u5206\u6790\u4fdd\u8bc1\u590d\u6742\u5ea6\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u6709\u5e8f\u6bb5\u4e0a\u7ef4\u62a4\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u652f\u6301\u5408\u5e76\u548c\u5206\u88c2\u3002\u663e\u7136\u60f3\u5230\u503c\u57df\u7ebf\u6bb5\u6811\u6216 01Trie\uff08\u5176\u5b9e\u8fd9\u4e24\u53ea\u672c\u8d28\u5927\u62b5\u662f\u76f8\u540c\u7684\uff09\uff0c\u7784\u4e00\u773c\u5f02\u6216\u679c\u65ad\u540e\u8005\u3002\n\n\u518d\u8003\u8651\u5982\u679c\u6ca1\u6709\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u600e\u4e48\u505a\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u533a\u95f4\u5f02\u6216\u5176\u5b9e\u53ef\u4ee5\u5728\u5206\u88c2\u81f3\u591a\u4e24\u4e2a\u6709\u5e8f\u6bb5\u540e\u5316\u4e3a\u6709\u5e8f\u6bb5\u4e0a\u7684\u533a\u95f4\u5f02\u6216\u3002\u5982\u679c\u6211\u4eec\u628a\u6709\u5e8f\u6bb5\u7684\u4fe1\u606f\u50a8\u5b58\u5230\u5de6\u7aef\u70b9\uff0c\u90a3\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u6389\u3002\n\n\u518d\u8003\u8651\u52a0\u5165\u4e86\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u5916\u5c42\u7ebf\u6bb5\u6811\u548c\u5185\u5c42 01Trie \u52a0\u4e0a Tag \u4e86\u3002\u6807\u8bb0\u663e\u7136\u53ef\u4ee5\u968f\u624b\u7ef4\u62a4\uff0c\u5c31\u662f\u6574\u4f53\u5f02\u6216\u4e86\u591a\u5c11\u3002\u4f46\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u4e00\u64cd\u4f5c\u5c31\u628a\u7ebf\u6bb5\u6811\u7684 Tag \u63a8\u7ed9 01Trie\uff0c\u90a3\u5b9e\u9645\u4e0a\u6211\u4eec\u7b49\u4ef7\u4e8e\u662f\u5bf9\u8fd9\u4e2a\u6709\u5e8f\u6bb5\u64cd\u4f5c\u540e\u53c8\u6392\u4e86\u5e8f\uff0c\u662f\u4e0d\u7b26\u9898\u610f\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u6709\u5728\u5408\u5e76\u7684\u65f6\u5019\u63a8 Tag\uff0c\u5176\u4ed6\u7684\u65f6\u5019 Tag \u5230\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u4e3a\u6b62\u3002\u5206\u88c2\u4e5f\u5c31\u6309\u7167\u539f 01Trie \u88c2\uff0c\u7ebf\u6bb5\u6811\u53f6\u5b50\u4e0a\u7684 Tag \u7ee7\u627f\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4f46\u8fd9\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u6bd2\u7624\u5361\u4e86\u6211\u4eec\u7684\u7a7a\u95f4\uff0c\u4e8e\u662f\u53ea\u80fd\u628a\u6734\u7d20 01Trie \u6362\u6210\u538b\u7f29 01Trie\uff08\u7b49\u4e8e\u662f\u7ef4\u62a4\u53f6\u8282\u70b9\u7684\u865a\u6811\uff09\u3002\n\n\u653e\u4e2a\u4ee3\u7801\u6838\u5fc3\u90e8\u5206\u597d\u4e86\uff0c\u5199\u7684\u633a\u4e11\uff0c\u770b\u770b\u5c31\u597d\uff1a\n\n```cpp\nint sn[W][2], len[W], sz[W], val[W], wval[W], tag[W];\nint n, m, M, rt[N], mpl[W], tot;\nstruct node {\n  int sm, sz, tg;\n} zkw[1 << 18];\nst odt;\ninline int newnode(int b = 0) {\n  int x = mpl[0] ? mpl[mpl[0]--] : ++tot;\n  val[x] = 0, len[x] = len[b], wval[x] = wval[b];\n  sz[x] = sn[x][0] = sn[x][1] = tag[x] = 0;\n  return x;\n}\ninline void pushup(int x) {\n  if (x && len[x] != -1) {\n    int l = sn[x][0], r = sn[x][1];\n    sz[x] = sz[l] + sz[r];\n    val[x] = val[l] ^ val[r];\n  }\n}\ninline void settag(int x, int v) {\n  if (!x) return;\n  if ((sz[x] & 1) && (val[x] ^= v), wval[x] ^= v, ~len[x]) {\n    tag[x] ^= v;\n    if (v >> len[x] & 1) swap(sn[x][0], sn[x][1]);\n  }\n}\ninline void pushraw(int x) {\n  if (int& t = tag[x]) settag(sn[x][0], t), settag(sn[x][1], t), t = 0;\n}\ninline void pushdown(int x) {\n  pushraw(x), pushraw(sn[x][0]), pushraw(sn[x][1]);\n}\ninline void uzip(int x, int k) {\n  if (pushdown(x), k == len[x]) return;\n  int t = newnode(x);\n  sn[t][0] = sn[x][0], sn[t][1] = sn[x][1];\n  sz[t] = sz[x], val[t] = val[x];\n  sn[x][0] = sn[x][1] = 0;\n  sn[x][wval[x] >> (len[x] = k) & 1] = t;\n}\ninline void ezip(int t) {\n  if (!t) return;\n  if (sn[t][0] && sn[t][1]) return;\n  if (!sn[t][0] && !sn[t][1]) return void(len[t] = -1);\n  int x = sn[t][0] | sn[t][1];\n  sn[t][0] = sn[x][0], sn[t][1] = sn[x][1], tag[x] = tag[t];\n  len[t] = len[x], wval[t] = wval[x], sz[t] = sz[x], val[t] = val[x];\n  mpl[++mpl[0]] = x;\n}\ninline void merge(int& x, int& y, int k = L - 1) {\n  if (!y) return;\n  if (!x) return x = y, void(y = 0);\n  if (~k) {\n    uzip(x, k), uzip(y, k);\n    merge(sn[x][0], sn[y][0], k - 1), merge(sn[x][1], sn[y][1], k - 1);\n    ezip(x), pushup(x);\n  } else\n    sz[x] += sz[y], val[x] ^= val[y];\n  mpl[++mpl[0]] = y, y = 0;\n}\ninline void rcalcval(int x) { val[x] = (sz[x] & 1) ? wval[x] : 0; }\ninline void split(int x, int s, int& a, int& b, int k = L - 1) {\n  if (!x) return void(a = b = 0);\n  if (!s) return a = 0, void(b = x);\n  if (s == sz[x]) return a = x, void(b = 0);\n  if (k == -1) {\n    a = x, b = newnode(x);\n    sz[b] = sz[a] - s, sz[a] = s;\n    rcalcval(a), rcalcval(b);\n    return;\n  }\n  uzip(x, k);\n  int szl = sz[sn[x][0]];\n  if (s >= szl)\n    split(sn[x][1], s - szl, sn[a = x][1], sn[b = newnode(x)][1], k - 1);\n  else\n    split(sn[x][0], s, sn[a = newnode(x)][0], sn[b = x][0], k - 1);\n  ezip(a), ezip(b), pushup(a), pushup(b);\n}\ninline void settagt(int x, int t) {\n  zkw[x].tg ^= t;\n  (zkw[x].sz & 1) && (zkw[x].sm ^= t);\n}\ninline void pushdownt(int x) {\n  if (int& t = zkw[x].tg) settagt(x << 1, t), settagt(x << 1 | 1, t), t = 0;\n}\ninline void pushway(int x) {\n  for (int w = 1, s = M; w < M; w = w << 1 | !!(x & (s >>= 1))) pushdownt(w);\n}\ninline void pushupt(int x) {\n  zkw[x].sm = zkw[x << 1].sm ^ zkw[x << 1 | 1].sm;\n  zkw[x].sz = zkw[x << 1].sz + zkw[x << 1 | 1].sz;\n}\ninline int queryt(int l, int r) {\n  int ret = 0;\n  for (pushway(l += M - 1), pushway(r += M + 1); l ^ r ^ 1; l >>= 1, r >>= 1) {\n    if (~l & 1) ret ^= zkw[l ^ 1].sm;\n    if (r & 1) ret ^= zkw[r ^ 1].sm;\n  }\n  return ret;\n}\ninline void updatet(int l, int r, int v) {\n  for (pushway(l += M - 1), pushway(r += M + 1); l ^ r ^ 1;\n       pushupt(l >>= 1), pushupt(r >>= 1)) {\n    if (~l & 1) settagt(l ^ 1, v);\n    if (r & 1) settagt(r ^ 1, v);\n  }\n  while (l >>= 1) pushupt(l);\n}\ninline void init(int x, int t = 0) {\n  zkw[x + M] = (node){val[rt[x]] ^ ((sz[rt[x]] & 1) ? t : 0), sz[rt[x]], t};\n  x += M;\n  while (x >>= 1) pushupt(x);\n}\ninline sit split(int x) {\n  if (x > n) return odt.end();\n  sit it = --odt.lower_bound(make_pair(x + 1, 0));\n  if (it->first == x) return it;\n  int l = it->first, r = it->second;\n  pushway(l + M), pushway(x + M);\n  split(rt[l], x - l, rt[l], rt[x]);\n  init(l, zkw[l + M].tg), init(x, zkw[l + M].tg);\n  odt.erase(it), odt.insert(make_pair(l, x - 1));\n  return odt.insert(make_pair(x, r)).first;\n}\ninline void updsort(int l, int r) {\n  sit itr = split(r + 1), itl = split(l);\n  int tmp = 0;\n  for (sit it = itl; it != itr; ++it) {\n    int p = it->first;\n    pushway(p + M), settag(rt[p], zkw[p + M].tg);\n    merge(tmp, rt[p]), init(p);\n  }\n  rt[l] = tmp, init(l);\n  odt.erase(itl, itr), odt.insert(make_pair(l, r));\n}\ninline void updxor(int l, int r, int v) {\n  split(r + 1), split(l), updatet(l, r, v);\n}\ninline int qryxor(int l, int r) { return split(r + 1), split(l), queryt(l, r); }\ninline void init() {\n  n = rd(), m = rd(), M = 1 << (__lg(n) + 1);\n  for (int i = 1; i <= n; ++i) {\n    zkw[i + M].sz = 1, odt.insert(make_pair(i, i));\n    int pos = rt[i] = newnode(), x = zkw[i + M].sm = rd();\n    len[pos] = L - 1, sz[pos] = 1, val[pos] = x;\n    sz[pos = sn[pos][0] = newnode()] = 1;\n    val[pos] = wval[pos] = x, len[pos] = -1;\n  }\n  for (int i = M - 1; i; --i) pushupt(i);\n}\n```\n\n\u7136\u540e\u8fd9\u73a9\u610f\u5c5e\u5b9e\u662f\u7ed9\u6211\u8c03\u8840\u538b\u9ad8\u4e86\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u9644\u8d60\u4e00\u4e2a[\u8c03\u8bd5\u5957\u4ef6](https://www.luogu.com.cn/paste/amhrgcu2)\u3002\n\n\u4ee5\u4e0a\u3002",
        "postTime": 1654094221,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "\u4f4e\u8840\u538b\u6cbb\u7597\u9898"
    }
]