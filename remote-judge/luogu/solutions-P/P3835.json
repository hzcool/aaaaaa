[
    {
        "content": "\u5c31\u662f\u53ef\u6301\u4e45\u5316\u540e\u7684\u666e\u901a\u5e73\u8861\u6811\u561b\uff08\u9003\n\n\u9898\u76ee\u63cf\u8ff0\u4e0d\u5199\u4e86\uff08\u61d2\u4e86\n\n[\u8fd9\u91cc\u662f\u9898\u76ee](https://www.luogu.org/problemnew/show/P3835)\n\n### \u4e3b\u8981\u601d\u8def\uff1aFHQ Treap + \u53ef\u6301\u4e45\u5316\n\n\u666e\u901aFHQ Treap\u52a0\u4e0a\u4e00\u70b9\u53ef\u6301\u4e45\u5316\u7684\u4e1c\u897f\u5982\u4e0b\uff1a(\u6253\u4e0a\u6ce8\u91ca\u7684\u4ee3\u7801\u662f\u53ef\u6301\u4e45\u5316\u7684\u7279\u6b8a\u64cd\u4f5c)\n\n```cpp\ninline int merge(int x, int y) {\n    if(!x || !y) return x + y;\n    if(z[x].pri < z[y].pri) {\n        int rt = newnode(); //\n        z[rt] = z[x];       //\n        z[rt].ch[1] = merge(z[rt].ch[1], y);\n        update(rt);\n        return rt;\n    } else {\n        int rt = newnode(); //\n        z[rt] = z[y];       //\n        z[rt].ch[0] = merge(x, z[rt].ch[0]);\n        update(rt);\n        return rt;\n    }\n}\ninline void split(int rt, ll k, int &x, int &y) {\n    if(!rt) x = y = 0;\n    else {\n        if(z[rt].w <= k) {\n            x = newnode(); //\n            z[x] = z[rt];  //\n            split(z[x].ch[1], k, z[x].ch[1], y);\n            update(x);\n        } else {\n            y = newnode(); //\n            z[y] = z[rt];  //\n            split(z[y].ch[0], k, x, z[y].ch[0]);\n            update(y);\n        } \n    }\n}\n```\n\n\u7136\u540e\u5f00\u4e2aroot[]\u6570\u7ec4\uff0c\u5b58\u5404\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u6ce8\u610f\u4e0b\u7a7a\u95f4\u5c31\u597d\u4e86\u3002\u8bb0\u5f97\u5f0050\u500d\uff0c\u8981\u4e0d\u51c9\u51c9\n\n### code:\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<string>\n#include<vector>\n#include<set>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define go(i,j,n,k) for(int i=j;i<=n;i+=k)\n#define fo(i,j,n,k) for(int i=j;i>=n;i-=k)\n#define rep(i,x) for(int i=h[x];i;i=e[i].nxt)\n#define mn 500010\n#define ld long double\n#define fi first\n#define se second\n#define inf 1<<30\n#define ll long long\n#define root 1,n,1\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\n#define bson l,r,rt\ninline ll read(){\n    ll x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct edge{\n    int ch[2], sze, pri;\n    ll w;\n} z[mn * 50];\nint rot[mn], xx, yy, zz, n, cnt;\ninline void update(int rt) {\n    z[rt].sze = 1;\n    if(z[rt].ch[0]) z[rt].sze += z[z[rt].ch[0]].sze;\n    if(z[rt].ch[1]) z[rt].sze += z[z[rt].ch[1]].sze;\n} \ninline int newnode(ll w = 0) {\n    z[++cnt].w = w;\n    z[cnt].sze = 1;\n    z[cnt].pri = rand();\n    return cnt;\n}\ninline int merge(int x, int y) {\n    if(!x || !y) return x + y;\n    if(z[x].pri < z[y].pri) {\n        int rt = newnode();\n        z[rt] = z[x];\n        z[rt].ch[1] = merge(z[rt].ch[1], y);\n        update(rt);\n        return rt;\n    } else {\n        int rt = newnode();\n        z[rt] = z[y];\n        z[rt].ch[0] = merge(x, z[rt].ch[0]);\n        update(rt);\n        return rt;\n    }\n}\ninline void split(int rt, ll k, int &x, int &y) {\n    if(!rt) x = y = 0;\n    else {\n        if(z[rt].w <= k) {\n            x = newnode();\n            z[x] = z[rt];\n            split(z[x].ch[1], k, z[x].ch[1], y);\n            update(x);\n        } else {\n            y = newnode();\n            z[y] = z[rt];\n            split(z[y].ch[0], k, x, z[y].ch[0]);\n            update(y);\n        } \n    }\n}\ninline int findkth(int rt, int k) {\n    while(1119) {\n        if(k <= z[z[rt].ch[0]].sze)\n            rt = z[rt].ch[0];\n        else {\n            if(z[rt].ch[0]) k -= z[z[rt].ch[0]].sze;\n            if(!--k) return rt;\n            rt = z[rt].ch[1];\n        }\n    }\n}\nint main(){\n    n = read();\n    go(i, 1, n, 1) {\n    \txx = yy = zz = 0;\n        int tmp = read(), s = read(); ll a = read();\n        rot[i] = rot[tmp];\n        if(s == 1) {\n            split(rot[i], a, xx, yy);\n            rot[i] = merge(merge(xx, newnode(a)), yy);\n        } else if(s == 2) {\n            split(rot[i], a, xx, zz);\n            split(xx, a - 1, xx, yy);\n            yy = merge(z[yy].ch[0], z[yy].ch[1]);\n            rot[i] = merge(merge(xx, yy), zz);\n        } else if(s == 3) {\n            split(rot[i], a - 1, xx, yy);\n            printf(\"%lld\\n\", z[xx].sze + 1);\n            rot[i] = merge(xx, yy);\n        } else if(s == 4) {\n            printf(\"%lld\\n\", z[findkth(rot[i], a)].w);\n        } else if(s == 5) {\n            split(rot[i], a - 1, xx, yy);\n            if(xx == 0) {\n            \tprintf(\"-2147483647\\n\");\n            \tcontinue;\n            }\n            printf(\"%lld\\n\", z[findkth(xx, z[xx].sze)].w);\n            rot[i] = merge(xx, yy); \n        } else if(s == 6) {\n            split(rot[i], a, xx, yy);\n            if(yy == 0) {\n            \tprintf(\"2147483647\\n\");\n            \tcontinue;\n            }\n            printf(\"%lld\\n\", z[findkth(yy, 1)].w);\n            rot[i] = merge(xx, yy);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1544097132,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u9898\u9762\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\n### \u9898\u89e3\uff1a\n\n\u8003\u8651\u5efa\u7acb\u4e00\u68f5\u6bcf\u4e2a\u8282\u70b9\u90fd\u8868\u793a\u4e00\u4e2a\u7248\u672c\u7684\u6811\u3002\n\n\u4ee5\u521d\u59cb\u7248\u672c $0$ \u4e3a\u6839\u3002\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u64cd\u4f5c\uff0c\u4ece $v_i$ \u5411 $i$ \u8fde\u4e00\u6761\u8fb9\uff0c\u800c\u8fb9\u6743\u5219\u662f $opt_i$ \u548c $x_i$ \u7684\u4e8c\u5143\u7ec4\uff0c\u8868\u793a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u4e0a\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8fbe\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002\n\n\u8003\u8651\u4f7f\u7528\u6743\u503c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u64cd\u4f5c\u3002\u53ea\u9700\u8981\u5b9e\u73b0\u5355\u70b9\u52a0\uff0c\u67e5\u8be2\u524d\u7f00\u548c\u4ee5\u53ca\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\u7684\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u6811\u72b6\u6570\u7ec4\u63d0\u524d\u63d2\u5165 $-2147483647$ \u548c $2147483647$ \u4e24\u4e2a\u6570\uff0c\u65b9\u4fbf\u7edf\u8ba1\u3002\n\n\u56e0\u4e3a\u6743\u503c\u8303\u56f4\u592a\u5927\uff0c\u6240\u4ee5\u5148\u79bb\u6563\u5316\u6743\u503c\uff0c\u518d\u63d2\u5165\u6811\u72b6\u6570\u7ec4\u3002\n\n\u53ea\u9700\u8981\u4ece\u7ed3\u70b9 $0$ \u5f00\u59cb DFS \uff0c\u8fdb\u5165\u5b50\u6811\u65f6\u6267\u884c\u64cd\u4f5c\uff0c\u9000\u51fa\u5b50\u6811\u65f6\u64a4\u9500\u64cd\u4f5c\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int INF = 0x7fffffff;\nconst int MQ = 500010;\n\nint N, Q;\nint faz[MQ], opt[MQ], a[MQ], b[MQ];\nint Ans[MQ];\n\nint eh[MQ], nxt[MQ], to[MQ], tot;\ninline void ins(int x, int y) {\n\tnxt[++tot] = eh[x]; to[tot] = y; eh[x] = tot;\n}\n\nint B[MQ];\ninline void Add(int i, int x) { for (; i <= N; i += i & -i) B[i] += x; }\ninline int Qur(int i) { int A = 0; for (; i; i -= i & -i) A += B[i]; return A; }\ninline int BS(int x) { int p = 0; for (int j = 1 << 18; j; j >>= 1) if ((p | j) <= N && B[p | j] <= x) x -= B[p |= j]; return p;}\n\nvoid DFS(int u, int o, int x) {\n\tint ok = 1;\n\tif (o == 1) Add(x, 1);\n\tif (o == 2) {\n\t\tif (Qur(x) == Qur(x - 1)) ok = 0;\n\t\telse Add(x, -1);\n\t}\n\tif (o == 3) Ans[u] = Qur(x - 1);\n\tif (o == 4) Ans[u] = b[BS(x) + 1];\n\tif (o == 5) Ans[u] = b[BS(Qur(x - 1) - 1) + 1];\n\tif (o == 6) Ans[u] = b[BS(Qur(x)) + 1];\n\t\n\tfor (int i = eh[u]; i; i = nxt[i])\n\t\tDFS(to[i], opt[to[i]], a[to[i]]);\n\t\n\tif (o == 1) Add(x, -1);\n\tif (o == 2 && ok) Add(x, 1);\n}\n\nint main() {\n\tscanf(\"%d\", &Q);\n\tfor (int i = 1; i <= Q; ++i) {\n\t\tscanf(\"%d%d%d\", &faz[i], &opt[i], &a[i]);\n\t\tif (opt[i] != 4)\n\t\t\tb[++N] = a[i];\n\t} b[++N] = -INF, b[++N] = INF;\n\tsort(b + 1, b + N + 1);\n\tN = unique(b + 1, b + N + 1) - b - 1;\n\tfor (int i = 1; i <= Q; ++i) {\n\t\tins(faz[i], i);\n\t\tif (opt[i] != 4)\n\t\t\ta[i] = lower_bound(b + 1, b + N + 1, a[i]) - b;\n\t}\n\tAdd(1, 1), Add(N, 1);\n\tDFS(0, 0, 0);\n\tfor (int i = 1; i <= Q; ++i) {\n\t\tif(opt[i] > 2)\n\t\t\tprintf(\"%d\\n\", Ans[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543305721,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "fhq Treap\u53ef\u6301\u4e45\u5316\uff0c\u4f7f\u7528split\uff08\u5206\u88c2\uff09\uff0cmerge\uff08\u5408\u5e76\uff09\u4e24\u4e2a\u64cd\u4f5c\n\n\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u6700\u5927\u7684\u70b9\u627e\u51fa\u6765\uff0c\u6211\u4eec\u518d\u5c06\u6392\u9664\u5c0f\u4e8e\u4ed6\u7684\u70b9\u540e\u6700\u5c0f\u7684\u70b9\u627e\u51fa\u6765\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76\u5728\u4e00\u8d77\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff1a\u6211\u4eec\u5c06\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u7684\u70b9\u627e\u51fa\u6765\u8fdb\u884c\u5408\u5e76\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O\uff08qlogq\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff08qlogq\uff09\u3002\n\n\u63a8\u5e7fBlog\uff1ahttp://www.cnblogs.com/nbwzyzngyl/p/7977369.html\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n    int l,r;int size,rnd,v;\n}t[500005*50];\nint cnt,rt[500005];\nvoid update(int k)\n{\n    t[k].size=t[t[k].l].size+t[t[k].r].size+1;\n}\nvoid newnode(int &k,int x)\n{\n    t[k=++cnt].v=x;t[k].size=1;t[k].rnd=rand();\n}\nint merge(int a,int b)\n{\n    if(!a||!b)return a+b;\n    if(t[a].rnd>t[b].rnd)\n    {\n        int p=++cnt;t[p]=t[a];\n        t[p].r=merge(t[p].r,b);\n        update(p);return p;\n    }\n    else\n    {\n        int p=++cnt;t[p]=t[b];\n        t[p].l=merge(a,t[p].l);\n        update(p);return p;\n    }\n}\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now)x=y=0;\n    else\n    {\n        if(t[now].v<=k)\n        {\n            x=++cnt;t[x]=t[now];\n            split(t[x].r,k,t[x].r,y);\n            update(x);\n        }\n        else \n        {\n            y=++cnt;t[y]=t[now];\n            split(t[y].l,k,x,t[y].l);\n            update(y);\n        }\n    }\n}\nvoid Delete(int &root,int w)\n{\n    int x=0,y=0,z=0;\n    split(root,w,x,z);\n    split(x,w-1,x,y);\n    y=merge(t[y].l,t[y].r);\n    root=merge(merge(x,y),z);\n}\nvoid Insert(int &root,int w)\n{\n    int x=0,y=0,z=0;\n    split(root,w,x,y);\n    newnode(z,w);\n    root=merge(merge(x,z),y);\n}\nint getval(int k,int w)\n{\n    if(w==t[t[k].l].size+1)return t[k].v;\n    else if(w<=t[t[k].l].size)return getval(t[k].l,w);\n    else return getval(t[k].r,w-t[t[k].l].size-1);\n}\nint getkth(int &root,int w)\n{\n    int x,y;\n    split(root,w-1,x,y);\n    int ans=t[x].size+1;\n    root=merge(x,y);\n    return ans;\n}\nint getpre(int &root,int w)\n{\n    int x,y,k,ans;\n    split(root,w-1,x,y);\n    if(!x)return -2147483647;\n    k=t[x].size;\n    ans=getval(x,k);\n    root=merge(x,y);\n    return ans;\n}\nint getnex(int &root,int w)\n{\n    int x,y,ans;\n    split(root,w,x,y);\n    if(!y)return 2147483647;\n    else ans=getval(y,1);\n    root=merge(x,y);\n    return ans;\n}\nint main()\n{\n    int n,f,w,tim;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d%d%d\",&tim,&f,&w);\n        rt[i]=rt[tim];\n        if(f==1)Insert(rt[i],w);\n        else if(f==2)Delete(rt[i],w);\n        else if(f==3)printf(\"%d\\n\",getkth(rt[i],w));\n        else if(f==4)printf(\"%d\\n\",getval(rt[i],w));\n        else if(f==5)printf(\"%d\\n\",getpre(rt[i],w));\n        else printf(\"%d\\n\",getnex(rt[i],w));\n    }\n    return 0;\n}\n```",
        "postTime": 1512373452,
        "uid": 25438,
        "name": "\u5927\u5955\u54e5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u60ca\u4e86\uff0c\u5bd2\u5047\u7684\u65f6\u5019\u6211\u8fd8\u4ee5\u4e3a\u8fd9\u9898\u672c\u6765\u5c31\u662f\u62ff\n### \u6709\u65cbtreap\n\u5199\u7684\uff1f\n\n\u4eca\u5929\u53d1\u73b0\u5176\u5b9e(\u9898\u89e3)\u6ca1\u4eba\u8fd9\u4e48\u5e72\u8fc7\uff1f\n\n\n------------\n\n\u5177\u4f53\u6765\u8bf4\u4e3a\u4ec0\u4e48treap\u53ef\u4ee5\u53ef\u6301\u4e45\u5316\n\uff08\u4ee5\u4e0b\u8bf4\u6cd5\u5c5e\u4e8e\u4fe1\u53e3\u5f00\u6cb3\uff0c~~\u4e0d~~\u4fdd\u8bc1\u5b8c\u5168~~\u4e0d~~\u6b63\u786e\uff09\n\n\uff0c\u7531\u4e8etreap\u8ba4\u5b50\u4e0d\u8ba4\u7236\uff08\u5373\u4e0d\u9700\u8981\u8bb0\u5f55\u7236\u8282\u70b9\uff09\uff0c\n\n\u800c\u4e14\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u81ea\u4e0a\u800c\u4e0b\uff08\u6216\u8005\u4efb\u610f\u65b9\u5411\u7684\u5355\u5411\uff1f\uff09\uff0c\n\n\u8fd9\u79cd\u6027\u8d28\u51b3\u5b9a\u4e86\u4e00\u4e9b\u8282\u70b9\u80fd\u591f\u65b9\u4fbf\u5730\u540c\u65f6\u88ab\u4e24\u4e2a\u7248\u672c\u5171\u7528\n\n\u4e5f\u5c31\u662f\u51b3\u5b9a\u4e86\u8fd9\u79cd\u6811\u53ef\u4ee5\u65b9\u4fbf\u5730\u53ef\u6301\u4e45\u5316\n\n\u6709\u4eba\u8bf4splay\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\u662f\u56e0\u4e3a\u5b83\u9700\u8981\u65cb\u8f6c\u3001\u5b83\u7684\u5f62\u6001\u4e0d\u505c\u5730\u5728\u53d1\u751f\u6539\u53d8\n\n\u5176\u5b9e\u51b3\u5b9a\u6027\u539f\u56e0\u662f\u5728\u4e8e\u5b83\u7684\u64cd\u4f5c\u65e2\u6709\u4ece\u4e0a\u5f80\u4e0b\uff0c\u53c8\u6709\u4ece\u4e0b\u5f80\u4e0a\u7684\uff08splay\u64cd\u4f5c\uff09\n```cpp\n\u4f5c\u4e2a\u6bd4\u65b9\uff0c\u4f60\u73b0\u5728\u6709\u8fd9\u6837\u7684\u4e00\u6761\u8def\uff0c\u4ece\u5de6\u5f80\u53f3\u8d70\n\uff08\u8c61\u5f81\u53ef\u6301\u4e45\u5316\u6811\u4e0a\u81ea\u4e0a\u800c\u4e0b\u7684\u64cd\u4f5c\uff09\n\u7248\u672c\u2460__\n       \u2198\n      \u5171\u7528\u90e8\u5206\u2014\u2014\u2014> \u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u4ece\u4e24\u6761\u5206\u8def\u5408\u5e76\u5230\u4e2d\u95f4\u7684\u4e3b\u8def\u4e0a\n\u7248\u672c\u2461__\u2197\n\n\u4f46\u662f\u5982\u679c\u4f60\u4ece\u53f3\u5f80\u5de6\u8d70\n\n\u2460__\n   \u2196\n    \uff1f<\u2014\u2014\u2014\u2014\u2014 \u4f60\u5c31\u4e0d\u77e5\u9053\u5e94\u8be5\u8d70\u54ea\u6761\u8def\u4e86\n\u2461__\u2199\n\n```\n\u5176\u5b9e\uff0c\u5e76\u4e0d\u662f\u8bf4\u53cc\u5411\u7684\u6811\u5c31\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\uff0c\u53ea\u662f\u4ee3\u7801\u590d\u6742\uff0c\u65f6\u95f4\u6548\u76ca\u592a\u4f4e\n\n\uff08\u53e6\u5916\u5bb9\u6613\u7206\u7a7a\u95f4\uff09\n\n\u800c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3001\u53ef\u6301\u4e45\u5316treap\u4e00\u822c\u53ea\u9700\u8981\u591a\u52a0\u51e0\u884c\u4ee3\u7801\u5c31\u591f\u4e86\n\n~~\u5176\u5b9e\u5bd2\u5047\u7684\u65f6\u5019\u6839\u672c\u6ca1\u8003\u8651\u8fd9\u4e48\u591a\uff0c\u770b\u89c1\u9898\u5c31\u83bd\u7740\u5199~~\n\n------------\n\n\u4ee5\u4e0b\u662f\u6211\u7684\u53ef\u6301\u4e45\u5316\u6709\u65cbtreap\u4ee3\u7801\uff0c\u7528\u4e8e\u53ef\u6301\u4e45\u5316\u7684\u65b0\u589e\u4ee3\u7801\uff08\u76f8\u5bf9\u4e8e\u539f\u7248treap\uff09\u7528\u6ce8\u91ca\u505a\u4e86\u6807\u8bb0\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.org/record/15915022)\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\nconst int INF = 0x7FFFFFFF, MAXN = 5e5+1, MPR = 100;//MPR\u662f\u7a7a\u95f4\u591a\u5f00\u500d\u6570\uff0c\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\u7528\u8fd9\u4e2a\u5947\u602a\u7684\u7f29\u5199\n\nint val[MAXN*MPR], left[MAXN*MPR], right[MAXN*MPR], size[MAXN*MPR], cnt[MAXN*MPR], pri[MAXN*MPR];\nint id = 1;\n\nvoid refresh(int &i){//\u590d\u5236\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u65b0\u7684\u8282\u70b9\uff0c\u6ce8\u610f\u6b64\u5904\u52a0\u5f15\u7528'&'\u7684\u610f\u4e49\n\tif(!i) return;\n\tval[id] = val[i], left[id] = left[i], right[id] = right[i], pri[id] = pri[i], size[id] = size[i], cnt[id] = cnt[i];\n\ti = id++;\n}\n\nvoid pull(int i){\n\tsize[i] = size[left[i]] + size[right[i]] + cnt[i];\n} \n\nvoid r_rotate(int &i){\n\trefresh(left[i]);//****//\n\tint lnode = left[i];\n\tleft[i] = right[lnode];\n\tright[lnode] = i;\n\tsize[lnode] = size[i];\n\tpull(i);\n\ti = lnode;\n}\n\nvoid l_rotate(int &i){\n\trefresh(right[i]);//****//\n\tint rnode = right[i];\n\tright[i] = left[rnode];\n\tleft[rnode] = i;\n\tsize[rnode] = size[i];\n\tpull(i);\n\ti = rnode;\n}\n\nint push_root(int i){//\u4ee5\u8282\u70b9i\u4e3a\u6a21\u677f\u521b\u5efa\u65b0\u7684\u6839\u8282\u70b9\n\trefresh(i);\n\treturn i;\n}\nvoid insert(int &i, int k){\n\tif(!i){\n\t\ti = id++;\n\t\tval[i] = k;\n\t\tsize[i] = cnt[i] = 1;\n\t\tpri[i] = rand();\n\t\treturn;\n\t}\n\tsize[i]++;\n\tif(k < val[i]){\n\t\trefresh(left[i]);//****//\n\t\tinsert(left[i], k);\n\t\tif(pri[left[i]] < pri[i]) r_rotate(i);\n\t}else if(k > val[i]){\n\t\trefresh(right[i]);//****//\n\t\tinsert(right[i], k);\n\t\tif(pri[right[i]] < pri[i]) l_rotate(i);\n\t}else cnt[i]++;\n}\n\nbool check(int i, int k){\n\tif(!i) return false;\n\tif(k <  val[i]) return check(left[i], k);\n\tif(k > val[i]) return check(right[i], k);\n\treturn true;\n} \nvoid remove(int &i, int k){\n\tif(k < val[i]) refresh(left[i]), remove(left[i], k);//****//\n\telse if(k > val[i]) refresh(right[i]), remove(right[i], k);\n\telse{\n\t\tif(cnt[i] > 1) cnt[i]--, size[i]--;\n\t\telse if(left[i] && right[i]){\n\t\t\tif(pri[left[i]] < pri[right[i]]) r_rotate(i);\n\t\t\telse l_rotate(i);\n\t\t\tremove(i, k);\n\t\t}else i = left[i] | right[i];\n\t\treturn;\n\t}\n\tsize[i]--;\n}\n\nint rank(int i, int k){\n\tif(!i) return 0;\n\tif(k <= val[i]) return rank(left[i], k);\n\treturn size[left[i]] + cnt[i] + rank(right[i], k);\n}\n\nint at(int i, int k){\n\tif(size[left[i]] >= k) return at(left[i], k);\n\tif(size[left[i]] + cnt[i] >= k) return val[i];\n\treturn at(right[i], k - size[left[i]] - cnt[i]);\n}\n\nint prev(int i, int k){\n\tif(!i) return -INF;\n\tif(k <= val[i]) return prev(left[i], k);\n\treturn std::max(val[i], prev(right[i], k));\n}\n\nint nxt(int i, int k){\n\tif(!i) return INF;\n\tif(k >= val[i]) return nxt(right[i], k);\n\treturn std::min(val[i], nxt(left[i], k));\n}\n\nint i, root[MAXN];\nusing namespace std;\n\nint main(){\n\tint n, v, opt, x;\n\tscanf(\"%d\", &n);\n\tfor(i = 1; i <= n; i++){\n\t\tscanf(\"%d%d%d\", &v, &opt, &x);\n\t\tswitch(opt){//\u770b\u4e0d\u61c2switch\u8bed\u53e5\u8bf7\u4e0d\u8981\u627e\u6211\n\t\t\tcase 1:{\n\t\t\t\troot[i] = push_root(root[v]);\n\t\t\t\tinsert(root[i], x);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tif(check(root[v], x)){\n\t\t\t\t\troot[i] = push_root(root[v]);\n\t\t\t\t\tremove(root[i], x);\n\t\t\t\t}else root[i] = root[v];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\troot[i] = root[v];\n\t\t\t\tprintf(\"%d\\n\", rank(root[i], x) + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4:{\n\t\t\t\troot[i] = root[v];\n\t\t\t\tprintf(\"%d\\n\", at(root[i], x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 5:{\n\t\t\t\troot[i] = root[v];\n\t\t\t\tprintf(\"%d\\n\", prev(root[i], x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 6:{\n\t\t\t\troot[i] = root[v];\n\t\t\t\tprintf(\"%d\\n\", nxt(root[i], x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n(\u6b22\u8fcehack\uff01)",
        "postTime": 1565099579,
        "uid": 73480,
        "name": "Natsuzora",
        "ccfLevel": 6,
        "title": "\u6709\u65cb(\u5212\u91cd\u70b9)treap\u53ef\u6301\u4e45\u5316"
    },
    {
        "content": "\u4ee5rope\u5b9e\u73b0\u7684\uff0c\u5f88\u7b80\u5355\u7684\u53ef\u6301\u4e45\u6570\u7ec4\u3002  \n\u7531\u4e8e\u53ea\u662f\u4e2a\u6570\u7ec4\uff0c\u5f005e5\u4e2a\u663e\u7136\u4f1a\u70b8\u7a7a\u95f4\uff0c\u6240\u4ee5\u8fd9\u662f\u7bc7\u90e8\u5206\u5206\u7684\u9898\u89e3\u3002\n\nrope\u662f\u4ec0\u4e48\uff1fSTL\u7684\u5185\u7f6e\u7684\u53ef\u6301\u4e45\u5316\u7684\u6570\u7ec4\u3002\u5176\u6700\u4e3a\u65b9\u4fbf\u7684\u5c31\u662f\u53ef\u4ee5O1\u590d\u5236\u539f\u6765\u7684\u6570\u7ec4\u3002\u4e8b\u5b9e\u4e0arope\u7684\u5185\u7f6e\u5b9e\u73b0\u4e5f\u662f\u5e73\u8861\u6811\uff0c\u7531\u4e8e\u53ea\u9700\u8981\u590d\u5236\u6839\u7ed3\u70b9\uff0cO1\u53ef\u4ee5\u505a\u5230\u590d\u5236\u5386\u53f2\u7248\u672c\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u5f00O2\u4f1a\u88ab\u5361T\u56db\u4e2a\u70b9\uff01\n\n\u5b9e\u73b0\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u64cd\u4f5c\uff0c\u5148\u590d\u5236\u5176\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u7684\u7248\u672c\uff08O1\uff01\uff09\u7136\u540e\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e2a\u7248\u672c\u4e2d\u7684\u6570\u5b57\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u9700\u8981\u4e8c\u5206\u5bfb\u627e\u63d2\u5165\u4f4d\u7f6e\uff0c\u4e8c\u5206\u5bfb\u627e\u5220\u9664\u4f4d\u7f6e\uff0c\u4e8c\u5206\u5bfb\u627e\u524d\u9a71\u540e\u7f00\uff0c\u5bf9\u4e8e\u67e5\u6392\u540d\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u7531\u4e8e\u662f\u6709\u5e8f\u7684\uff0c\u76f4\u63a5 begin() + rank \u5c31\u53ef\u4ee5\u5f97\u5230\u3002\u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u9009\u62e9\u4f7f\u7528STL\u4e2d\u7684lowerbound\u548cupperbound\uff0c\u5f88\u6162\u662f\u80af\u5b9a\u7684\u3002\u5bf9\u4e8e\u9898\u76ee\u4e2d\u8303\u56f4\u4e0d\u5927\u4e0d\u9700\u8981\u592a\u4f18\u79c0\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56db\u5341\u884c\u4e0d\u5230\u5b9e\u73b0\u53ef\u6301\u4e45\u5e73\u8861\u6811\u3002\n\n\u79d1\u666e\u4e00\u4e0brope\u57fa\u672c\u64cd\u4f5c\uff08\u767e\u5ea6\u8c8c\u4f3c\u6709\u70b9\u96be\u627e\uff09\uff1a\n```cpp\n#include<ext/rope>\nusing namespace __gnu_cxx;//rope\u7684\u547d\u540d\u7a7a\u95f4\nrope<type> R;\nR.push_back(a) //\u5f80\u540e\u63d2\u5165\nR.insert(pos,a)//\u5728pos\u4f4d\u7f6e\u63d2\u5165a\uff0cpos\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\nR.erase(pos,n)//\u5728pos\u4f4d\u7f6e\u5220\u9664n\u4e2a\u5143\u7d20\u3002\nR.replace(pos,x)//\u4ecepos\u5f00\u59cb\u66ff\u6362\u6210x\nR.substr(pos,x)//\u4ecepos\u5f00\u59cb\u63d0\u53d6x\u4e2a\u3002\n//\u591a\u6570\u65f6\u5019\u5b9a\u4e49rope\u7528\u6307\u9488\uff08\u65b9\u4fbf\u53ef\u6301\u4e45\u5316\uff09 \u6240\u4ee5\u4e0a\u9762\u7684\u70b9\u591a\u6570\u65f6\u5019\u8981\u6362\u6210->\n```\n\u5982\u4f55\u8fdb\u884c\u590d\u5236\uff1f\u5f88\u7b80\u5355\uff0c\u4e00\u53e5\u8bdd\uff1a  \n```cpp\nrope<type>* R[1000];\nR[i] = new rope<type>(*R[v]);\n```\n\u5728\u4e0a\u90e8\u5206\u5206\u4ee3\u7801\u524d\u5148\u8bf4\u4e00\u4e0b\u5982\u4f55\u5bf9\u5176\u4f18\u5316\u7a7a\u95f4\uff0c\u6211\u4eec\u53d1\u73b0\u67e5\u8be2\u64cd\u4f5c\u5bf9\u539f\u6570\u7ec4\u4e0d\u6539\u53d8\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f00\u4e2abac\u6570\u7ec4\u67e5\u8be2\u64cd\u4f5c\u76f4\u63a5\u6620\u5c04\u5230\u67e5\u8be2\u524d\u7684\u7248\u672c\uff08\u4e24\u4e2a\u7248\u672c\u4e00\u6837\uff09\uff0c\u5c31\u53ef\u4ee5\u5c11\u5f00\u5199\u7a7a\u95f4\u3002\u4f46\u662f~~yijan\u592a\u61d2\u4e86~~\u61d2\u5f97\u5199\u3002\u3002\u4e8e\u662f\u53ea\u6709\u4e00\u4e2a80\u5206\u4ee3\u7801\u8d34\u5728\u8fd9\u91cc\uff1a\n```cpp\n/*Heroes Never Die!*/\n#include \"ext/rope\"\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nusing namespace __gnu_cxx;\n#define MAXN 500006\nrope<int> *nums[MAXN];int n;\nint main(){\n    cin >> n;\n    nums[0] = new rope<int>();\n    for(int i=1;i<=n;++i){\n        static int v,opt,x;\n        scanf(\"%d%d%d\",&v,&opt,&x);\n        nums[i] = new rope<int>(*nums[v]);\n        if(opt == 1)\n            nums[i]->insert(lower_bound(nums[i]->begin(),nums[i]->end(),x)-nums[i]->begin(),x);\n        if(opt == 2){\n            auto it = lower_bound(nums[i]->begin(),nums[i]->end(),x);\n            if(*it == x) nums[i]->erase(it-nums[i]->begin(),1);\n        }\n        if(opt == 3)\n            printf(\"%d\\n\",(int)(lower_bound(nums[i]->begin(),nums[i]->end(),x)-nums[i]->begin()) + 1);\n        if(opt == 4)\n            printf(\"%d\\n\",*(nums[i]->begin() + x - 1));\n        if(opt == 5){\n            auto it = lower_bound(nums[i]->begin(),nums[i]->end(),x);\n            if(it == nums[i]->begin() - 1) puts(\"-2147483647\");\n            else --it,printf(\"%d\\n\",*it);\n        }\n        if(opt == 6){\n            auto it = upper_bound(nums[i]->begin(),nums[i]->end(),x);\n            if(it == nums[i]->end()) puts(\"2147483647\");\n            else printf(\"%d\\n\",*it);\n        }\n    }\n}\n```",
        "postTime": 1538887350,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u201d\u4e00\u9053\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u7684\u9898\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u90a3\u4e48\u5b83\u516b\u6210\u4e0d\u662f\u4e00\u9053\u771f\u6b63\u7684\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u7684\u9898\u3002\u201c \u2014\u2014 GGN_2015\n\n\u60ca\u5947\u5730\u53d1\u73b0\u8fd9\u9053\u9898\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4efb\u4f55\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5efa\u7acb\u4e00\u9897\u201d\u65f6\u5149\u6811\u201c\uff08\u6211\u4eec\u6682\u4e14\u8fd9\u6837\u79f0\u547c\u5b83\uff09\u3002\u5982\u679ci\u65f6\u523b\u7684\u5e73\u8861\u6811\u662f\u7531$v_i$\u65f6\u523b\u53d1\u5c55\u800c\u6765\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4ee4\u201d\u65f6\u5149\u6811\u201c\u4e0ai\u53f7\u7ed3\u70b9\u7684\u7236\u4eb2\u4e3a$v_i$\u30020\u53f7\u7ed3\u70b9\u663e\u7136\u662f\u6574\u68f5\u201d\u65f6\u5149\u6811\u201c\u7684\u6839\u7ed3\u70b9\u3002\n\n\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff08\u6211\u5199\u7684\u662ftreap\uff09\uff0c\u6700\u5f00\u59cb\u7684\u65f6\u5019\u8fd9\u662f\u4e00\u68f5\u7a7a\u6811\u3002\u5728\u201d\u65f6\u5149\u6811\u201c\u4e0aDFS\uff0c\u6bcf\u8fdb\u5165\u7ed3\u70b9i\u65f6\u5c31\u5728\u5e73\u8861\u6811\u4e2d\u8fdb\u884c\u64cd\u4f5ci\uff08\u4fee\u6539\u6570\u636e\u7ed3\u6784\u6216\u50a8\u5b58\u67e5\u8be2\u7684\u7ed3\u679c\uff09\uff0c\u7136\u540e\u518d\u4f9d\u6b21DFS\u7ed3\u70b9i\u7684\u6bcf\u4e2a\u513f\u5b50\u3002\u9000\u51fa\u7ed3\u70b9i\u65f6\uff0c\u5c31\u201d\u64a4\u9500\u201c\u8fd9\u4e2a\u7ed3\u70b9\u5bf9\u6570\u636e\u7ed3\u6784\u7684\u4fee\u6539\u3002\u4f8b\u5982\u5f53$opt_i = 1$\u65f6\uff0c\u6211\u4eec\u5411\u6570\u636e\u7ed3\u6784\u4e2d\u63d2\u5165\u4e86\u5143\u7d20$x_i$\uff0c\u79bb\u5f00\u7ed3\u70b9i\u65f6\uff0c\u6211\u4eec\u518d\u628a$x_i$\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\u3002\n\n\u6bd4\u8f83\u7279\u6b8a\u7684\u662f\uff1a\u5f53$opt_i = 2$\u65f6\uff0c\u5220\u9664\u662f\u53ef\u80fd\u5931\u8d25\u7684\u3002\u5982\u679c\u5220\u9664\u5931\u8d25\u7684\u8bdd\uff0c\u6211\u4eec\u5728\u56de\u6eaf\u7684\u65f6\u5019\u8981\u7279\u5224\uff08\u5c31\u662f\u8bf4\u4e0d\u8981\u628a\u672c\u5c31\u6ca1\u88ab\u6210\u529f\u5220\u9664\u7684$x_i$\u63d2\u5165\u56de\u6570\u636e\u7ed3\u6784\u4e2d\uff09\u3002\n\n\u9644\u4e0a\u4ee3\u7801\u4e4b\u524d\u5148\u4f5c\u51fa\u4e00\u4e2a\u58f0\u660e\uff1a\u6211\u7684treap\u7684\u4ee3\u7801\u4e0d\u652f\u6301\u53ef\u91cd\u96c6\u5408\uff0c\u6240\u4ee5\u6211\u7528\u4e86\u4e00\u4e2a\u7c7b\u4f3cpair\u7684\u6570\u636e\u7ed3\u6784\u6765\u50a8\u5b58\u5143\u7d20\uff08\u7b2c\u4e00\u7ef4\u5b58\u50a8\u5143\u7d20\u7684\u503c\uff0c\u7b2c\u4e8c\u7ef4\u8bb0\u5f55\u64cd\u4f5c\u7684\u7f16\u53f7\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1treap\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\u53e6\u5916\uff0c\u6211\u61d2\u5f97\u5199\u524d\u53bb\u548c\u540e\u7ee7\u7684\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u7684\u201d\u524d\u9a71\u201c\u548c\u201d\u540e\u7ee7\u201c\u67e5\u8be2\u662f\u5229\u7528\u201d\u6392\u540d\u201c\u548c\u201d\u7b2ck\u5927\u201c\u67e5\u8be2\u95f4\u63a5\u5b9e\u73b0\u7684\u3002\uff08\u6211\u89c9\u5f97\u8fd9\u6837\u5199treap\u66f4\u597d\u8c03\u8bd5\u4e00\u4e9b\uff09\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <queue>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstruct item {int val, id;};\nbool operator < (item A, item B) {\n\tif(A.val != B.val) return A.val < B.val;\n\treturn A.id < B.id;\n}\nbool operator == (item A, item B) {\n\treturn A.val==B.val && A.id==B.id;\n}\n\nconst int maxn = (500000 + 6)*2;\nnamespace treap {\n\tint ch[maxn][2], rnd[maxn], siz[maxn]; item key[maxn]; int ncnt;\n\tqueue<int> Q;\n\tvoid maintain(int x) {\n\t\tsiz[x] = 1 + siz[ch[x][0]] + siz[ch[x][1]];\n\t}\n\tint newnode() {\n\t\tif(!Q.empty()) {\n\t\t\tint x = Q.front(); Q.pop();\n\t\t\tch[x][0] = ch[x][1] = rnd[x] = siz[x] = 0; key[x] = (item){0, 0};\n\t\t\treturn x;\n\t\t}\n\t\treturn ++ ncnt;\n\t}\n\tvoid rotate(int& x, int d) {\n\t\tint k = ch[x][d^1]; ch[x][d^1] = ch[k][d]; ch[k][d] = x;\n\t\tmaintain(x); x = k; maintain(k);\n\t}\n\tvoid insert(int& x, item v) {\n\t\tif(x == 0) {\n\t\t\tx = newnode(); rnd[x] = rand(); siz[x] = 1; key[x] = v;\n\t\t\treturn;\n\t\t}\n\t\tint d = v < key[x] ? 0 : 1; insert(ch[x][d], v);\n\t\tmaintain(x);\n\t\tif(rnd[x] > rnd[ch[x][d]]) rotate(x, d^1);\n\t}\n\tint rnk(int x, item v) {\n\t\tif(x == 0) return 1;\n\t\tint lsiz = 1 + siz[ch[x][0]];\n\t\tif(v == key[x]) return lsiz;\n\t\tif(v < key[x]) return rnk(ch[x][0], v);\n\t\telse           return rnk(ch[x][1], v) + lsiz;\n\t}\n\titem kth(int x, int k) {\n\t\tif(x==0 || k<=0 || k>siz[x])\n\t\t\treturn k<=0 ? (item){-2147483647, 0} : (item){2147483647, 0};\n\t\tint lsiz = 1 + siz[ch[x][0]];\n\t\tif(lsiz == k) return key[x];\n\t\tif(k < lsiz) return kth(ch[x][0], k);\n\t\telse         return kth(ch[x][1], k-lsiz);\n\t}\n\tint LSIZ(int x) {return 1 + siz[ch[x][0]];}\n\tvoid erase(int& x, int k) {\n\t\tif(x == 0) return; /// \u5220\u9664\u5143\u7d20\u65f6\u4e00\u5b9a\u8981\u7279\u5224\u68c0\u6d4b\u662f\u5426\u76f8\u7b49\n\t\tint lsiz = 1 + siz[ch[x][0]];\n\t\tif(lsiz == k) {\n\t\t\tif(ch[x][0]==0 || ch[x][1]==0) {\n\t\t\t\tint tmp = x; x = ch[x][0] + ch[x][1]; Q.push(tmp);\n\t\t\t\tch[tmp][0] = ch[tmp][1] = siz[tmp] = rnd[tmp] = 0;\n\t\t\t\tkey[tmp] = (item){0, 0};\n\t\t\t}else {\n\t\t\t\tif(rnd[ch[x][0]] > rnd[ch[x][1]]) {\n\t\t\t\t\trotate(x, 0); erase(ch[x][0], LSIZ(ch[x][0]));\n\t\t\t\t}else {\n\t\t\t\t\trotate(x, 1); erase(ch[x][1], LSIZ(ch[x][1]));\n\t\t\t\t}\n\t\t\t\tmaintain(x);\n\t\t\t}\n\t\t\treturn;\n\t\t}else {\n\t\t\tif(k < lsiz) erase(ch[x][0], k);\n\t\t\telse         erase(ch[x][1], k-lsiz);\n\t\t\tmaintain(x);\n\t\t}\n\t}\n}\n\nint root = 0, V[maxn], OPT[maxn], X[maxn], ANS[maxn];\nnamespace tree {\n\tvector<int> nxt[maxn];\n\tvoid addedge(int f, int t) {nxt[f].push_back(t);}\n\tvoid dfs(int x) {\n\t\tbool delsuc = 0; /// \u8bb0\u5f55\u5220\u9664\u64cd\u4f5c\u662f\u5426\u6210\u529f\n\t\tif(OPT[x]) { /// \u6709\u64cd\u4f5c\n\t\t\tif(OPT[x] == 1) { /// \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\n\t\t\t\ttreap::insert(root, (item){X[x], x});\n\t\t\t}else if(OPT[x] == 2) { /// \u5220\u9664\u4e00\u4e2a\u5143\u7d20\n\t\t\t\tint rnk = treap::rnk(root, (item){X[x], 0}); /// \u67e5\u8be2\u8fd9\u4e2a\u5143\u7d20\u7684\u6392\u540d\n\t\t\t\tint get = treap::kth(root, rnk).val; /// \u5f97\u5230\u8fd9\u4e2a\u5143\u7d20(\u53ef\u80fd\u4e3a+-inf)\n\t\t\t\tif(get == X[x]) { /// \u53ef\u4ee5\u5220\u9664\n\t\t\t\t\ttreap::erase(root, rnk); delsuc = 1;\n\t\t\t\t}\n\t\t\t}else if(OPT[x] == 3) { /// \u67e5\u6392\u540d\n\t\t\t\tANS[x] = treap::rnk(root, (item){X[x], 0});\n\t\t\t}else if(OPT[x] == 4) { /// \u67e5\u7b2ck\u5927\n\t\t\t\tANS[x] = treap::kth(root, X[x]).val;\n\t\t\t}else if(OPT[x] == 5) { /// prev\n\t\t\t\tint rnk = treap::rnk(root, (item){X[x], 0}) - 1;\n\t\t\t\tint get = treap::kth(root, rnk).val;\n\t\t\t\tANS[x] = get;\n\t\t\t}else if(OPT[x] == 6) { /// next\n\t\t\t\tint rnk = treap::rnk(root, (item){X[x], 0x7f7f7f7f});\n\t\t\t\tint get = treap::kth(root, rnk).val;\n\t\t\t\tANS[x] = get;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < (int)nxt[x].size(); i ++) {\n\t\t\tint t = nxt[x][i]; dfs(t); /// \u9012\u5f52\u8ba1\u7b97\n\t\t}\n\t\tif(OPT[x] == 1) { /// \u56de\u6eda\u63d2\u5165\u64cd\u4f5c\n\t\t\tint rnk = treap::rnk(root, (item){X[x], 0}); /// \u4e00\u5b9a\u6709\n\t\t\ttreap::erase(root, rnk);\n\t\t}\n\t\tif(OPT[x]==2 && delsuc) {\n\t\t\ttreap::insert(root, (item){X[x], x});\n\t\t}\n\t}\n}\n\nint main() {\n\t//freopen(\"nontime.in\", \"r\", stdin);\n\tint n; scanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i ++) {\n\t\tscanf(\"%d%d%d\", &V[i], &OPT[i], &X[i]);\n\t\ttree::addedge(V[i], i);\n\t}\n\ttree::dfs(0);\n\tfor(int i = 1; i <= n; i ++) {\n\t\tif(OPT[i]>=3) {\n\t\t\tprintf(\"%d\\n\", ANS[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1538222051,
        "uid": 36456,
        "name": "GGN_2015",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u4e0d\u52a0\u5e73\u8861\u63aa\u65bd\u7684BST\n\n\u672c\u6765\u5199\u7684\u66ff\u7f6a\u7f8a\uff0c\u8fc7\u4e86\u6837\u4f8b\uff0c\u4ea4\u4e0a\u53bbWA\u4e86\u3002\u6211\u60f3\u770b\u770b\u662f\u4e0d\u662f\u66ff\u7f6a\u7f8a\u91cd\u6784\u51fa\u4e86\u95ee\u9898\uff0c\u4e8e\u662f\u628a\u91cd\u6784\u5220\u6389\u4e86\uff0c\u611f\u89c9\u4f1aT\uff0c\u7ed3\u679cA\u4e86\u3002\u3002\u3002\n\n\u8dd1\u7684\u633a\u5feb\u7684\uff0c\u7528`new`\u5f00\u5185\u5b58\u8fd8\u53ea\u8dd1\u4e865557ms\n\n\u5177\u4f53\u5982\u4f55\u53ef\u6301\u4e45\u5316\uff0c\u5c31\u662f\u5728\u9012\u5f52\u5bf9\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5148\u590d\u5236\u5f53\u524d\u8282\u70b9\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u8fdb\u884c\u64cd\u4f5c\u524d\uff0c\u76f4\u63a5\u5c06\u5f53\u524d\u6839\u5148\u6307\u5411\u5386\u53f2\u6839\uff0c\u7136\u540e\u8dd1\u51fd\u6570\uff0c\u5c31\u4e0d\u7528\u6bcf\u6b21\u628a\u5386\u53f2\u7248\u672c\u4f20\u53c2\u4f20\u4e0b\u6765\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <stack>\n#include <vector>\n\nusing namespace std;\n\nconst int MAXN = 5e5 + 5;\n//const float Alpha = 0.7;\nconst int INF = 0x7fffffff;\n\nint n;\n\nstruct Node{\n    int val, cnt, siz, cov;\n    Node* ch[2];\n    \n    Node() {}\n    \n    Node(int val) : val(val) {\n        siz = cov = cnt = 1;\n        ch[0] = ch[1] = NULL;\n    }\n};\n\nNode *rt[MAXN];\n//vector<Node*> vec;\nstack<Node*> stk;\n\nNode *newNode(int val = 0) {\n    if (stk.empty()) return new Node(val);\n    Node *p = stk.top(); stk.pop();\n    *p = Node(val);\n    return p;\n}\n\nNode *Copy(Node *now) {\n    Node *p = newNode();\n    *p = *now;\n    return p;\n}\n/*\nbool Bad(Node *now) {\n    int ls = now->ch[0] ? now->ch[0]->cov : 0;\n    int rs = now->ch[1] ? now->ch[1]->cov : 0;\n    return (float)ls > (float)now->cov * Alpha || (float)rs > (float)now->cov * Alpha;\n}\n*/\nvoid Update(Node *now) {\n    now->siz = now->cnt + (now->ch[0] ? now->ch[0]->siz : 0) + (now->ch[1] ? now->ch[1]->siz : 0);\n    now->cov = 1 + (now->ch[0] ? now->ch[0]->cov : 0) + (now->ch[1] ? now->ch[1]->cov : 0);\n}\n/*\nvoid Dfs(Node *now) {\n    if (!now) return;\n    now = Copy(now);\n    Dfs(now->ch[0]);\n    if (now->cnt) vec.push_back(now);\n    else stk.push(now);\n    Dfs(now->ch[1]);\n    now->ch[0] = now->ch[1] = NULL;\n    Update(now);\n}\n\nvoid Rebuild(Node *&now, int l, int r) {\n    if (l > r) return;\n    int mid = l + r >> 1;\n    now = vec[mid];\n    Rebuild(now->ch[0], l, mid - 1);\n    Rebuild(now->ch[1], mid + 1, r);\n}\n*/\nvoid Insert(Node *&now, int k) {\n    if (!now) {\n        now = newNode(k);\n        return;\n    } \n    now = Copy(now);\n    if (k < now->val) Insert(now->ch[0], k);\n    else if (k == now->val) now->cnt++;\n    else Insert(now->ch[1], k);\n    Update(now);\n    /*if (Bad(now)) {\n        vec.clear();\n        Dfs(now);\n        int len = vec.size();\n        Rebuild(now, 0, len - 1);\n    }*/\n}\n\nvoid Remove(Node *&now, int k) {\n    if (!now) return;\n    now = Copy(now);\n    if (k < now->val) {\n        Remove(now->ch[0], k);\n    } else if (k == now->val) {\n        if (now->cnt > 0) now->cnt--;\n    } else {\n        Remove(now->ch[1], k);\n    }\n    Update(now);\n}\n\nint Rank(Node *now, int k) {\n    if (!now) return 1;\n    int ls = now->ch[0] ? now->ch[0]->siz : 0;\n    if (k < now->val) return Rank(now->ch[0], k);\n    else if (k == now->val) return ls + 1;\n    else return Rank(now->ch[1], k) + ls + now->cnt; \n}\n\nint Kth(Node *now, int k) {\n    if (!now) return 0;\n    int ls = now->ch[0] ? now->ch[0]->siz : 0;\n    if (k <= ls) return Kth(now->ch[0], k);\n    else if (k <= ls + now->cnt) return now->val;\n    else return Kth(now->ch[1], k - ls - now->cnt);\n}\n\nint GetPre(Node *now, int k) {\n    if (!now) return -INF;\n    if (now->val >= k) return GetPre(now->ch[0], k);\n    int ret = GetPre(now->ch[1], k);\n    return ret == -INF ? (now->cnt ? now->val : GetPre(now->ch[0], k)) : ret;\n}\n\nint GetSuc(Node *now, int k) {\n    if (!now) return INF;\n    if (now->val <= k) return GetSuc(now->ch[1], k);\n    int ret = GetSuc(now->ch[0], k);\n    return ret == INF ? (now->cnt ? now->val : GetSuc(now->ch[1], k)) : ret;\n}\n\nint main() {\n    cin >> n;\n    int op, ver, k, res;\n    for (int i = 1; i <= n; i++) {\n        cin >> ver >> op >> k;\n        rt[i] = rt[ver];\n        if (op == 1) {\n            Insert(rt[i], k);\n        } else if (op == 2) {\n            Remove(rt[i], k);\n        } else if (op == 3) {\n            res = Rank(rt[i], k);\n            cout << res << endl;\n        } else if (op == 4) {\n            res = Kth(rt[i], k);\n            cout << res << endl;\n        } else if (op == 5) {\n            res = GetPre(rt[i], k);\n            cout << res << endl;\n        } else {\n            res = GetSuc(rt[i], k);\n            cout << res << endl;\n        }\n    }\n    return 0;\n}\n```\n\n~~\u5e0c\u671b\u672c\u9898\u53ef\u4ee5\u51fa\u6bd2\u7624\u6570\u636e\u5361\u6389\u672c\u7bc7\u9898\u89e3~~",
        "postTime": 1559478719,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u53ef\u6301\u4e45\u531601trie\u6811\n\u5c06\u6570\u5b57\u8868\u793a\u6210\u4e8c\u8fdb\u5236,\u5373\u53ef\u752801trie\u6811\u6765\u4fdd\u5b58\u7ef4\u62a4\u6570\u5b57\u7684\u96c6\u5408.\ntrie\u6811\u6bcf\u4e2a\u8282\u70b9\u5b580,1\u513f\u5b50\u4ee5\u53ca\u96c6\u5408\u5927\u5c0f.\n\n\u672c\u9898\u4e2d\u6570\u5b57\u53ef\u80fd\u662f\u8d1f\u6570,\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf,\u5b58\u50a8\u65f6\u90fd\u52a0\u4e00\u4e2a\u5927\u5e38\u6570\u5c06\u6570\u5b57\u7edf\u4e00\u4e3a\u6b63\u7684,\u53d6\u51fa\u6570\u5b57\u65f6\u518d\u51cf\u6389\u5373\u53ef.\n\n\u672c\u9898\u6240\u7528trie\u6811\u7684\u6df1\u5ea6\u4e3a32,\u4e24\u6b21\u7248\u672c\u53d8\u5316\u7684\u53ea\u6709\u4e00\u6761\u957f\u5ea6\u4e3a32\u7684\u94fe,\u6545\u53ef\u4ee5\u4eff\u7167\u4e3b\u5e2d\u6811\u91cd\u7528\u4e4b\u524d\u8282\u70b9\u7684\u601d\u8def,\u5c06\u6307\u9488\u6307\u56de\u4e4b\u524d\u7684\u8282\u70b9,\u53ea\u65b0\u5efa\u672c\u6b21\u7528\u5230\u7684\u8282\u70b9,\u4f7f\u7a7a\u95f4\u590d\u6742\u5ea6\u4fdd\u6301\u5728O(qw),w\u4e3a\u4f4d\u957f,\u6240\u6709\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3aO(w).\n```cpp\n// luogu-judger-enable-o2\n#include <stdio.h>\n#include <iostream>\nusing namespace std;\nconst int maxt=6e5*32;\nconst int maxn=6e5;\nint ch[maxt][2]={0},size[maxt]={0};\nint mem=0,root[maxn];\nvoid insert(int& x,int y,int v)\n{\n    x=++mem;\n    v+=1e9;\n    size[x]=size[y]+1;\n    int p=x,q=y;\n    for(int i=31;i>=0;i--)\n    {\n        if(v&(1<<i))\n        {\n            ch[p][1]=++mem;\n            ch[p][0]=ch[q][0];\n            \n            p=ch[p][1];\n            q=ch[q][1];\n        }\n        else\n        {\n            ch[p][0]=++mem;\n            ch[p][1]=ch[q][1];\n\n            p=ch[p][0];\n            q=ch[q][0];\n        }\n        size[p]=size[q]+1;\n    }\n}\nvoid erase(int& x,int y,int v)\n{\n    int q=y;\n    v+=1e9;\n    \n    for(int i=31;i>=0;i--)\n    {\n        if(v&(1<<i))\n            q=ch[q][1];\n        else\n            q=ch[q][0];\n        if(!q||!size[q])\n        {\n            x=y;\n            return;\n        }\n    }\n    x=++mem;\n    size[x]=size[y]-1;\n    int p=x;\n    q=y;\n    for(int i=31;i>=0;i--)\n    {\n        if(v&(1<<i))\n        {\n            ch[p][1]=++mem;\n            ch[p][0]=ch[q][0];\n            \n            p=ch[p][1];\n            q=ch[q][1];\n        }\n        else\n        {\n            ch[p][0]=++mem;\n            ch[p][1]=ch[q][1];\n\n            p=ch[p][0];\n            q=ch[q][0];\n        }\n        size[p]=size[q]-1;\n    }\n}\nint getsmaller(int x,int v)\n{\n    v+=1e9;\n    int p=x;\n    int ret=0;\n    for(int i=31;i>=0;i--)\n    {\n        if(v&(1<<i))\n        {\n            ret+=size[ch[p][0]];\n            p=ch[p][1];\n        }\n        else\n            p=ch[p][0];\n        if(!p||!size[p])\n            return ret;\n    }\n    return ret;\n}\nint getbigger(int x,int v)\n{\n    v+=1e9;\n    int p=x;\n    int ret=0;\n    for(int i=31;i>=0;i--)\n    {\n        if(v&(1<<i))\n            p=ch[p][1];\n        else\n        {\n            ret+=size[ch[p][1]];\n            p=ch[p][0];\n        }\n        if(!p||!size[p])\n            return ret;\n    }\n    return ret;\n}\nint getvalue(int x,int rank)\n{\n    int p=x;\n    int ret=-1e9;\n    for(int i=31;i>=0;i--)\n    {\n        if(rank>size[ch[p][0]])\n        {\n            rank-=size[ch[p][0]];\n            p=ch[p][1];\n            ret+=(1<<i);\n        }\n        else\n            p=ch[p][0];\n    }\n    return ret;\n}\nint n,his=0;\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        int v,opt,x;\n        scanf(\"%d%d%d\",&v,&opt,&x);\n        if(opt==1)\n            insert(root[i],root[v],x);\n        else if(opt==2)\n            erase(root[i],root[v],x);\n        else if(opt==3)\n        {\n            root[i]=root[v];\n            cout<<getsmaller(root[v],x)+1<<endl;\n        }\n        else if(opt==4)\n        {\n            root[i]=root[v];\n            cout<<getvalue(root[v],x)<<endl;\n        }\n        else if(opt==5)\n        {\n            root[i]=root[v];\n            int sm=getsmaller(root[v],x);\n            if(!sm)\n                cout<<-2147483647<<endl;\n            else\n                cout<<getvalue(root[v],sm)<<endl;\n        }\n        else\n        {\n            root[i]=root[v];\n            int gm=getbigger(root[v],x);\n            if(!gm)\n                cout<<2147483647<<endl;\n            else\n                cout<<getvalue(root[v],size[root[v]]-gm+1)<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1520440188,
        "uid": 70833,
        "name": "\u82cf\u8054\u5143\u5e05",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u7bc7\u9898\u89e3\u533a\uff0c\u8fd9\u9898\u7684\u6bd4\u8f83\u4e3b\u6d41\u7684\u51e0\u79cd\u89e3\u6cd5\u5206\u522b\u662f $FHQ-Treap$\uff0c\u7ebf\u6bb5\u6811\uff0c$01-Trie$ \u548c\u66ff\u7f6a\u7f8a\u6811\u3002\n\n\u4e3a\u4ec0\u4e48 $WBLT$ \u8fd9\u4e48\u597d\u5199\u5374\u4e00\u7bc7\u9898\u89e3\u90fd\u6ca1\u6709qaq\n\n---\n\n\u8003\u8651 $WBLT$ \u7684\u6027\u8d28\uff0c\u5728\u4fee\u6539\u7684\u65f6\u5019\u64cd\u8981\u662f\u4e0d $maintain$\uff0c\u5168\u6811\u7684\u5f62\u6001\u9664\u4e86\u53f6\u7ed3\u70b9\u662f\u4e0d\u4f1a\u6709\u53d8\u5316\u7684\u3002\n\n\u540c\u6837\uff0c\u5728\u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e0d $maintain$\uff0c\u5168\u6811\u7684\u5f62\u6001\u4e5f\u4e0d\u4f1a\u6709\u53d8\u5316\u3002\n\n\u56e0\u6b64\u8003\u8651\u5c06 $maintain$ \u64cd\u4f5c\u53e0\u52a0\u8d77\u6765\uff0c\u653e\u5728\u4fee\u6539\u5b8c\u6210\u540e\u518d\u4e00\u904d\u8fdb\u884c\u3002\n\n\u53ea\u8981\u78b0\u5230 $maintain$ \u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u64cd\u4f5c\u65f6\u9012\u5f52\u5411\u4e0b\u3002\n\n```cpp\nint maintain(int o){\n\tint nw=nnd(t[o].v,t[o].w,t[o].ls,t[o].rs);\n    if(t[t[nw].ls].w>t[t[nw].rs].w*ratio){\n\t\tt[nw].ls=maintain(t[nw].ls);\n\t\tt[nw].rs=maintain(t[nw].rs);\n\t\tt[nw].rs=merge(t[t[nw].ls].rs,t[nw].rs);\n\t\tt[nw].ls=t[t[nw].ls].ls;\n\t}\n\tif(t[t[nw].rs].w>t[t[nw].ls].w*ratio){\n\t\tt[nw].ls=maintain(t[nw].ls);\n\t\tt[nw].rs=maintain(t[nw].rs);\n\t\tt[nw].ls=merge(t[nw].ls,t[t[nw].rs].ls);\n\t\tt[nw].rs=t[t[nw].rs].rs;\n\t}\n\treturn nw;\n}\n```\n\u7531\u4e8e\u5728\u5b9e\u9645\u64cd\u4f5c\u7684\u65f6\u5019\u4e00\u5171\u53ea\u52a0\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u5f88\u591a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u5173\u7cfb\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u6bcf\u6b21\u4fee\u6539\u6700\u591a\u53ea\u9700\u5bf9 $\\log$ \u4e2a\u8282\u70b9\uff08\u5373\u94fe\u4e0a\u7684\u8282\u70b9\uff09\u8fdb\u884c $maintain$ \u64cd\u4f5c\u3002\n\n\u987e\u5728\u4fee\u6539\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\log n$\uff0c\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f $\\log n$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-48;\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nchar cr[200];int tt;\ninline void print(int x,char k='\\n') {\n    if(!x) putchar('0');\n    if(x < 0) putchar('-'),x=-x;\n    while(x) cr[++tt]=x%10+'0',x/=10;\n    while(tt) putchar(cr[tt--]);\n    putchar(k);\n}\nconst int maxn=500010;\nconst int ratio=4; \nstruct lef{\n\tint v,w,ls,rs;\n}t[maxn*200];\nint rt[maxn],tot;\nint nnd(int v,int w,int ls,int rs){\n    t[++tot]=(lef){v,w,ls,rs};\n    return tot;\n}\nint merge(int x,int y){\n\treturn nnd(t[y].v,t[x].w+t[y].w,x,y);\n}\nvoid pushup(int o){\n    if(!t[t[o].ls].w){\n\t\treturn;\n\t}\n    t[o].w=t[t[o].ls].w+t[t[o].rs].w;\n\tt[o].v=t[t[o].rs].v;\n}\nint maintain(int o){\n\tint nw=nnd(t[o].v,t[o].w,t[o].ls,t[o].rs);\n    if(t[t[nw].ls].w>t[t[nw].rs].w*ratio){\n\t\tt[nw].ls=maintain(t[nw].ls);\n\t\tt[nw].rs=maintain(t[nw].rs);\n\t\tt[nw].rs=merge(t[t[nw].ls].rs,t[nw].rs);\n\t\tt[nw].ls=t[t[nw].ls].ls;\n\t}\n\tif(t[t[nw].rs].w>t[t[nw].ls].w*ratio){\n\t\tt[nw].ls=maintain(t[nw].ls);\n\t\tt[nw].rs=maintain(t[nw].rs);\n\t\tt[nw].ls=merge(t[nw].ls,t[t[nw].rs].ls);\n\t\tt[nw].rs=t[t[nw].rs].rs;\n\t}\n\treturn nw;\n}\nint find(int o,int k) {\n    if(t[o].w==1) return 1;\n    if(k<=t[t[o].ls].v)return find(t[o].ls,k);\n    else return t[t[o].ls].w+find(t[o].rs,k);\n}\nint select(int o,int k) {\n    if(t[o].w==1) return t[o].v;\n    if(k<=t[t[o].ls].w)return select(t[o].ls,k);\n    else return select(t[o].rs,k-t[t[o].ls].w);\n}\nint insert(int o,int x){\n\tint nw=nnd(t[o].v,t[o].w,t[o].ls,t[o].rs);\n    if(t[nw].w==1){\n\t\tt[nw].ls=nnd(min(t[nw].v,x),1,0,0);\n\t\tt[nw].rs=nnd(max(t[nw].v,x),1,0,0);\n\t}\n    else if(x>t[t[nw].ls].v)\n\t\tt[nw].rs=insert(t[nw].rs,x);\n\telse \n\t\tt[nw].ls=insert(t[nw].ls,x);\n    pushup(nw);\n    return nw;\n}\nint erase(int o,int x){\n    int nw=nnd(t[o].v,t[o].w,t[o].ls,t[o].rs);\n    if(t[nw].w==1&&t[nw].v!=x)\n\t\treturn nw;\n    else if(t[t[nw].ls].w==1&&t[t[nw].ls].v==x)\n\t\tnw=t[nw].rs;\n    else if(t[t[nw].rs].w==1&&t[t[nw].rs].v==x)\n\t\tnw=t[nw].ls;\n    else if(x>t[t[nw].ls].v)\n\t\tt[nw].rs=erase(t[nw].rs,x);\n    else \n\t\tt[nw].ls=erase(t[nw].ls,x);\n    pushup(nw);\n    return nw;\n}\nsigned main(){\n    int n=read();\n    rt[0]=nnd(2147483647,1,0,0);\n    for(int i=1;i<=n;i++){\n        int wh=read(),opt=read(),x=read();\n        if(opt==1){\n        \trt[i]=maintain(insert(rt[wh],x));\n\t\t}\n\t\tif(opt==2){\n\t\t\trt[i]=maintain(erase(rt[wh],x));\n\t\t}\n\t\tif(opt==3){\n            print(find(rt[wh],x));\n            rt[i]=rt[wh];\n        }\n        if(opt==4){\n            print(select(rt[wh],x));\n            rt[i]=rt[wh];\n        }\n        if(opt==5){\n            int rk=find(rt[wh],x);\n            if(rk==1)print(-2147483647);\n            else print(select(rt[wh],rk-1));\n            rt[i]=rt[wh];\n        }\n        if(opt==6){\n        \tint rk=find(rt[wh],x+1);\n            print(select(rt[wh],rk));\n            rt[i]=rt[wh];\n        }\n    }\n    return 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1582708117,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "~~\u53ef\u6301\u4e45\u5316\u9898\u4e0d\u5f3a\u5236\u5728\u7ebf\u6709\u5565\u610f\u601d\uff1f\uff1f\uff1f~~   \n\u4e5f\u8bb8\u662fwtcl,\u770b\u9898\u89e3\u533a\u91cc\u5927\u795e\u4eec\u5404\u79cd\u795e\u4ed9\u505a\u6cd5\u8868\u793a\u4e0d\u4f1a    \n\u8bb2\u4e00\u4e0b\u8fd9\u9898$FHQ$ $Treap$\u53ef\u6301\u4e45\u5316\u600e\u4e48\u505a   \n\u4f17\u6240\u5468\u77e5\uff1a     \n*    $FHQ$ $Treap$\u4e2d\u5bf9\u6811\u7684\u5f62\u6001\u9020\u6210\u5f71\u54cd\u7684\u53ea\u6709$Split$\u548c$Merge$  \n*    \u53ef\u6301\u4e45\u5316\u7684\u7cbe\u9ad3\u662f\u5c06\u91cd\u590d\u7684\u7a7a\u95f4\u7701\u53bb    \n*    $Split$\u548c$Merge$\u64cd\u4f5c\u90fd\u53ea\u4f1a\u6539\u53d8\u4e24\u9897$Treap$\u4ea4\u63a5\u5904\u7684\u8282\u70b9\uff08\u88c2\u75d5\uff09   \n*    \u88c2\u75d5\u662f\u5728\u6574\u9897$Treap$\u4e0a\u7684\u4e00\u6761\u94fe   \n\u6309\u7167\u53ef\u6301\u4e45\u5316\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u88c2\u75d5\u5904\u65b0\u5f00\u70b9\uff0c\u7136\u540e\u5176\u4ed6\u70b9\u4f9d\u6b21\u590d\u5236   \n\u539f\u6765\u7684$Merge$:  \n```cpp\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rnd<t[y].rnd){\n\t\tt[x].ch[1]=merge(t[x].ch[1],y);\n      update(x);\n      return x;\n   }\n   else{\n\t\tt[y].ch[0]=merge(x,t[y].ch[0]);\n      update(y);\n      return y;\n   }\n```\n\u73b0\u5728\u7684$Merge$:  \n```cpp\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rnd<t[y].rnd){\n\t\tint id=newNode();\n\t\tt[id]=t[x];\n\t\tt[id].ch[1]=merge(t[id].ch[1],y);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n\telse{\n\t\tint id=newNode();\n\t\tt[id]=t[y];\n\t\tt[id].ch[0]=merge(x,t[id].ch[0]);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n}\n```\n$Split$\u53ef\u81ea\u884c\u7c7b\u6bd4    \nAC\u4ee3\u7801\uff1a  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=5e5+10;\nstruct node{\n\tint val;\n\tint size;\n\tint ch[2];\n\tint rnd;\n}t[NR<<6];\n#define lson t[id].ch[0]\n#define rson t[id].ch[1]\nvoid update(int id){\n\tt[id].size=t[lson].size+t[rson].size+1;\n} \nint tot;\nint newNode(int val=0){\n\ttot++;\n\tt[tot].val=val;\n\tt[tot].size=1;\n\tt[tot].rnd=rand();\n\treturn tot;\n}\nvoid split(int id,int val,int &x,int &y){\n\tif(!id){\n\t\tx=y=0;\n\t\treturn;\t\n\t}\n\tif(val<t[id].val){\n\t\ty=newNode();\n\t\tt[y]=t[id];\n\t\tsplit(lson,val,x,t[y].ch[0]);\n\t\tupdate(y);\n\t}\n\telse{\n\t\tx=newNode();\n\t\tt[x]=t[id];\n\t\tsplit(rson,val,t[x].ch[1],y);\n\t\tupdate(x);\n\t}\n}\nint merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(t[x].rnd<t[y].rnd){\n\t\tint id=newNode();\n\t\tt[id]=t[x];\n\t\tt[id].ch[1]=merge(t[id].ch[1],y);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n\telse{\n\t\tint id=newNode();\n\t\tt[id]=t[y];\n\t\tt[id].ch[0]=merge(x,t[id].ch[0]);\n\t\tupdate(id);\n\t\treturn id;\n\t}\n}\nvoid insert(int val,int &id){\n\tint x,y;\n\tsplit(id,val,x,y);\n\tid=merge(x,merge(newNode(val),y));\n}\nvoid del(int val,int &id){\n\tint x,y,z;\n\tx=y=z=0;\n\tsplit(id,val,x,z);\n\tsplit(x,val-1,x,y);\n\ty=merge(t[y].ch[0],t[y].ch[1]);\n\tid=merge(merge(x,y),z); \n}\nint rt[NR];\nint kth(int id,int k){\n\twhile(1){\n\t\tif(k<=t[lson].size)id=lson;\n\t\telse{\n\t\t\tk-=t[lson].size;\n\t\t\tif(!--k)return id;\n\t\t\tid=rson;\n\t\t}\n\t}\n}\nint main(){\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tint ver,opt,x;\n\t\tscanf(\"%d%d%d\",&ver,&opt,&x);\n\t\trt[i]=rt[ver];\n\t\tif(opt==1)insert(x,rt[i]);\n\t\tif(opt==2)del(x,rt[i]);\n\t\tif(opt==3){\n\t\t\tint y,z;\n\t\t\ty=z=0;\n\t\t\tsplit(rt[i],x-1,y,z);\n\t\t\tprintf(\"%d\\n\",t[y].size+1);\n\t\t}\n\t\tif(opt==4)printf(\"%d\\n\",t[kth(rt[i],x)].val);\n\t\tif(opt==5){\n\t\t\tint y,z;\n\t\t\ty=z=0;\n\t\t\tsplit(rt[i],x-1,y,z);\n\t\t\tif(y==0){\n\t\t\t\tputs(\"-2147483647\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",t[kth(y,t[y].size)].val);\n\t\t\trt[i]=merge(y,z);\n\t\t}\n\t\tif(opt==6){\n\t\t\tint y,z;\n\t\t\ty=z=0;\n\t\t\tsplit(rt[i],x,y,z);\n\t\t\tif(z==0){\n\t\t\t\tputs(\"2147483647\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",t[kth(z,1)].val);\n\t\t\trt[i]=merge(y,z);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596099492,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "P3835\u9898\u89e3"
    },
    {
        "content": "\u5728\u5b66\u66ff\u7f6a\u7f8a\u6811\u7684\u65f6\u5019\u53d1\u73b0\u7f51\u4e0a\u5927\u90e8\u5206\u535a\u5ba2\u90fd\u6709\u8fd9\u4e48\u4e00\u53e5\u8bdd:\n\n\u201c\u7f3a\u70b9\uff1a\u53ef\u6301\u4e45\u5316\u56f0\u96be\u3002\u201d\n\n~~\u611f\u89c9\u53ef\u6301\u4e45\u5316\u66ff\u7f6a\u7f8a\u633a\u597d\u5199\u7684\u554a\u2026\u2026\u53cd\u6b63\u6211\u4e0d\u4f1a$fhq\\space Treap$\u2026\u2026~~\n\n\u6211\u4eec\u77e5\u9053\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u7684\u5957\u8def\u5c31\u662f\u4fee\u6539\u7684\u65f6\u5019\u8fb9\u8d70\u8fb9\u65b0\u5efa\u8282\u70b9\u6302\u6210\u94fe\uff0c\u6bd4\u5982\u4e3b\u5e2d\u6811\u3001\u53ef\u6301\u4e45\u5316$Trie$\uff0c\u6211\u4eec\u4e00\u822c\u662f\u8fd9\u6837\u8fdb\u884c\u7684\uff0c\u4fee\u6539\u7684\u65f6\u5019\u9012\u5f52\u64cd\u4f5c\uff0c\u5bf9\u5f53\u524d\u8282\u70b9\u590d\u5236\u4e00\u4efd\uff0c\u628a\u4e0d\u7528\u8bbf\u95ee\u7684\u513f\u5b50\u6307\u5411\u539f\u6765\u8282\u70b9\u7684\u513f\u5b50\uff08\u8fd9\u6837\u5c31\u8282\u7ea6\u4e86\u7a7a\u95f4\uff09\uff0c\u7136\u540e\u8981\u8bbf\u95ee\u7684\u90a3\u4e2a\u513f\u5b50\u5c31\u9012\u5f52\u4e0b\u53bb\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7528\u5728\u7ebf\u6bb5\u6811\u4e0a\u9762\u975e\u5e38\u5408\u9002\uff0c\u56e0\u4e3a\u4ed6\u7684\u7956\u5148\u4e0e\u540e\u4ee3\u7684\u5173\u7cfb\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\uff0c\u800c\u5e73\u8861\u6811\u5c31\u4e0d\u592a\u4e00\u6837\u4e86\u3002\u4e00\u822c\u7684\u5e73\u8861\u6811\u90fd\u8fc7\u4e8e\u7075\u6d3b\uff0c\u53d8\u5316\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5927\u90e8\u5206\u5e73\u8861\u6811\u90fd\u5f97\u65cb\u8f6c~~\u7136\u540e\u5c31\u7236\u5b50\u5173\u7cfb\u4e71\u4f26~~\uff0c\u6211\u4eec\u7684\u53ef\u6301\u4e45\u5316\u7684\u6838\u5fc3\u5728\u4e8e\u51e0\u4e2a\u7236\u4eb2\u5171\u7528\u4e00\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5$Splay$\u4ec0\u4e48\u7684\u4e0d\u53ef\u6301\u4e45\u5316\u2026\u2026\n\n\u7136\u540e\u4e0d\u65cb\u8f6c\u7684\u5e73\u8861\u6811\u5728$OI$\u4e2d\u4e3b\u8981\u6709\u4e24\u79cd\uff1a$fhq\\space Treap$~~\uff08\u7136\u800c\u6211\u5e76\u4e0d\u4f1a\uff09~~\u548c\u66ff\u7f6a\u7f8a\u6811\u3002\u6211\u4eec\u8003\u8651\u628a\u66ff\u7f6a\u7f8a\u6811\u6309\u7167\u4e0a\u9762\u90a3\u79cd\u65b9\u5f0f\u53ef\u6301\u4e45\u5316\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u66ff\u7f6a\u7f8a\u6811\u867d\u7136\u5e76\u4e0d\u7528\u65cb\u8f6c\uff0c\u4f46\u4ed6\u7684\u6838\u5fc3\u5728\u4e8e\u66b4\u529b\u62cd\u6241\u91cd\u6784\uff0c\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u7ed9\u7236\u4eb2\u6362\u6389\u4e00\u4e2a\u513f\u5b50\uff0c\u7136\u540e\u8fd9\u79cd\u591a\u7236\u4e00\u5b50\u7684\u6301\u4e45\u5316\u5173\u7cfb\u5c31\u4e71\u4e86\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53d1\u73b0\u91cd\u6784\u4e5f\u662f\u66b4\u529b\u91cd\u6784\u7684\uff0c\u6211\u4eec\u77e5\u9053\u66ff\u7f6a\u7f8a\u6811\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u5728\u65f6\u95f4\u4e0a\u662f\u5747\u644a$O(nlogn)$\u7684\uff0c\u6211\u4eec\u539f\u6765\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u7684\u601d\u8def\u662f\u5728\u4e00\u6761\u94fe\u7684\u4fee\u6539\u64cd\u4f5c\uff08\u5355\u7eaf\u7684\u63d2\u5165\u5220\u9664\uff09\u4e0a\u8fdb\u884c\u8282\u70b9\u590d\u5236\u6302\u6210\u65b0\u7684\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u56e0\u4e3a\u66ff\u7f6a\u7f8a\u6811\u7684\u6811\u9ad8\u672c\u6765\u5c31\u56e0\u4e3a\u66b4\u529b\u91cd\u6784\u6bd4\u8f83\u5e73\u8861\u53ef\u4ee5\u770b\u505a\u662f$O(logn)$\u7ea7\u522b\u7684\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u6761\u957f\u5ea6\u4e3a\u6811\u9ad8\u7ea7\u522b\u7684\u94fe\uff0c\u6240\u4ee5\u65b0\u5efa\u7684\u8282\u70b9\u4e2a\u6570\u662f$O(nlogn)$\u7ea7\u522b\u7684\u3002\u7136\u540e\u6211\u4eec\u73b0\u5728\u5728\u66b4\u529b\u91cd\u6784\u7684\u65f6\u5019\u4e5f\u8fdb\u884c\u8282\u70b9\u7684\u590d\u5236\uff0c\u8ba9\u91cd\u6784\u4e0d\u5f71\u54cd\u539f\u6765\u7684\u7248\u672c\uff0c\u4ec5\u5f71\u54cd\u5f53\u524d\u7684\u7248\u672c\uff0c\u7136\u540e\u5c31\u76f8\u5f53\u4e8e\u6240\u6709\u4fee\u6539\u64cd\u4f5c\u90fd\u8981\u590d\u5236\u4e00\u6b21\u8282\u70b9\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5f53\u4ecd\u7136\u662f$O(nlogn)$\u7684\uff0c\u5e76\u4e0d\u4f1a\u7206\u70b8\u3002\n\n\u8fd9\u4e48\u7740\u770b\u4e0a\u53bb\u975e\u5e38\u66b4\u529b\uff0c\u4e0d\u8fc7\u6211\u5199\u7684\u53ef\u6301\u4e45\u5316\u66ff\u7f6a\u7f8a\u6811\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a\u5b9e\u6d4b\u6bd4\u5f88\u591a\u4eba\u7684$fhq\\space Treap$\u7684\u5e38\u6570\u8981\u5c0f\u2026\u2026\u66ff\u7f6a\u7f8a\u6811\u771f\u662f\u4e2a\u597d\u4e1c\u897f\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define alpha (double)0.7//alpha\u8bbe\u4e3a0.7\u6bd4\u8f83\u597d\n#define inf 2147483647\nusing namespace std;\nnamespace ywy\n{\n\tinline int get()\n\t{\n\t\tint n=0;\n\t\tchar c;\n\t\twhile((c=getchar())||23333)\n\t\t{\n\t\t\tif(c>='0'&&c<='9')break;\n\t\t\tif(c=='-')goto s;\n\t\t}\n\t\tn=c-'0';\n\t\twhile((c=getchar())||23333)\n\t\t{\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';\n\t\t\telse return(n);\n\t\t}\ns:\n\t\twhile((c=getchar())||23333)\n\t\t{\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';\n\t\t\telse return(n);\n\t\t}\n\t}\n\tvoid print(int num)\n\t{\n\t\tif(num<0)putchar('-'),num=-num;\n\t\tif(num>=10)print(num/10);\n\t\tputchar(num%10+'0');\n\t} int data[30000001],ch[30000001][2],cnt[30000001],size[30000001],gn=1;\n\tinline void up(int tree)\n\t{\n\t\tsize[tree]=size[ch[tree][0]]+size[ch[tree][1]]+cnt[tree];\n\t} int nd[500001],ptr=1;\n\tvoid dfs(int tree)//\u5728\u91cd\u6784\u524d\u5148\u628a\u5b50\u6811\u7684\u70b9\u627e\u51fa\u6765\n\t{\n\t\tif(!tree)return;\n\t\tdfs(ch[tree][0]);\n\t\tif(cnt[tree])nd[ptr]=tree,ptr++;\n\t\tdfs(ch[tree][1]);\n\t}\n\tint digui(int l,int r)//\u66b4\u529b\u91cd\u6784\u6210\u9ad8\u5ea6\u4e25\u683clogn\u7684\u5b50\u6811\uff0c\u6ce8\u610f\u4ecd\u7136\u8981\u8fdb\u884c\u8282\u70b9\u590d\u5236\n\t{\n\t\tif(l>r)return(0);\n\t\tint mid=(l+r)>>1;\n\t\tint tree=nd[mid];\n\t\tint me=gn;\n\t\tgn++;\n\t\tdata[me]=data[tree];\n\t\tcnt[me]=cnt[tree];\n\t\tch[me][0]=digui(l,mid-1);\n\t\tch[me][1]=digui(mid+1,r);\n\t\tup(me);\n\t\treturn(me);\n\t} int root[500001];\n\tint insert(int old,int num)//\u63d2\u5165\n\t{\n\t\tint tree=gn;\n\t\tgn++;\n\t\tdata[tree]=data[old];\n\t\tcnt[tree]=cnt[old];\n\t\tsize[tree]=size[old]+1;//\u8282\u70b9\u590d\u5236\n\t\tif(!old||data[old]==num)\n\t\t{\n\t\t\tdata[tree]=num;\n\t\t\tch[tree][0]=ch[old][0];\n\t\t\tch[tree][1]=ch[old][1];//\u6ce8\u610f\u4e0d\u9700\u8981\u9012\u5f52\u7684\u65f6\u5019\u8bb0\u5f97\u628a\u4e24\u4e2a\u513f\u5b50\u90fd\u6307\u4e00\u4e0b\n\t\t\tcnt[tree]++;\n\t\t\treturn(tree);\n\t\t}\n\t\tint op=num>data[tree];\n\t\tch[tree][op^1]=ch[old][op^1];\n\t\tch[tree][op]=insert(ch[old][op],num);\n\t\tif((double)max(size[ch[tree][0]],size[ch[tree][1]])>(double)size[tree]*alpha)\n\t\t{\n\t\t\tptr=1;\n\t\t\tdfs(tree);\n\t\t\treturn(digui(1,ptr-1));\n\t\t}\n\t\treturn(tree);\n\t}\n\tint del(int old,int num)//\u5220\u9664\uff0c\u4e5f\u8981\u8fdb\u884c\u8282\u70b9\u590d\u5236\n\t{\n\t\tint tree=gn;\n\t\tgn++;\n\t\tdata[tree]=data[old];\n\t\tsize[tree]=size[old]-1;\n\t\tcnt[tree]=cnt[old];\n\t\tif(num==data[tree])\n\t\t{\n\t\t\tcnt[tree]--;\n\t\t\tch[tree][0]=ch[old][0];\n\t\t\tch[tree][1]=ch[old][1];\n\t\t\treturn(tree);\n\t\t}\n\t\tint op=num>data[tree];\n\t\tch[tree][op^1]=ch[old][op^1];\n\t\tch[tree][op]=del(ch[old][op],num);\n\t\treturn(tree)\uff1b\n\t}\n\tint rankof(int tree,int rk)//\u5269\u4e0b\u7684\u8ddf\u666e\u901a\u5e73\u8861\u6811\u5c31\u4e00\u6837\u4e86~\n\t{\n\t\tif(rk<=size[ch[tree][0]])return(rankof(ch[tree][0],rk));\n\t\trk-=size[ch[tree][0]];\n\t\tif(rk<=cnt[tree])return(data[tree]);\n\t\trk-=cnt[tree];\n\t\treturn(rankof(ch[tree][1],rk));\n\t}\n\tinline int getrank(int num,int tree)\n\t{\n\t\tint ans=1,cur=tree;\n\t\twhile(cur&&data[cur]!=num)\n\t\t{\n\t\t\tif(num>data[cur])ans+=cnt[cur]+size[ch[cur][0]],cur=ch[cur][1];\n\t\t\telse cur=ch[cur][0];\n\t\t}\n\t\tans+=size[ch[cur][0]];\n\t\treturn(ans);\n\t} inline int find(int tree,int num)\n\t{\n\t\tint cur=tree;\n\t\twhile(cur&&data[cur]!=num)cur=ch[cur][num>data[cur]];\n\t\tif(!cnt[cur])return(inf);\n\t\treturn(cur);\n\t}\n\tvoid ywymain()\n\t{\n\t\tint n=get();\n\t\tfor(register int i=1; i<=n; i++)\n\t\t{\n\t\t\tint ver=get(),cmd=get(),x=get();\n\t\t\tif(cmd==1)\n\t\t\t{\n\t\t\t\troot[i]=insert(root[ver],x);\n\t\t\t}\n\t\t\tif(cmd==2)\n\t\t\t{\n\t\t\t\tif(find(root[ver],x)==inf)root[i]=root[ver];\n\t\t\t\telse root[i]=del(root[ver],x);\n\t\t\t}\n\t\t\tif(cmd==3)\n\t\t\t{\n\t\t\t\troot[i]=root[ver];\n\t\t\t\tprint(getrank(x,root[i]));\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t\tif(cmd==4)\n\t\t\t{\n\t\t\t\troot[i]=root[ver];\n\t\t\t\tprint(rankof(root[i],x));\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t\tif(cmd==5)\n\t\t\t{\n\t\t\t\troot[i]=root[ver];\n\t\t\t\tint cjr=getrank(x,root[i]);\n\t\t\t\tif(cjr==1)print(-inf);\n\t\t\t\telse print(rankof(root[i],cjr-1));\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t\tif(cmd==6)\n\t\t\t{\n\t\t\t\troot[i]=root[ver];\n\t\t\t\tint me=find(root[i],x),rk;\n\t\t\t\tif(me==inf)rk=getrank(x,root[i]);\n\t\t\t\telse rk=getrank(x,root[i])+cnt[me];\n\t\t\t\tif(rk>size[root[i]])print(inf);\n\t\t\t\telse print(rankof(root[i],rk));\n\t\t\t\tputchar('\\n');\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tywy::ywymain();\n\treturn(0);\n}\n```",
        "postTime": 1542895508,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u4e5f\u662f\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u7684\u3002\n\n\u503c\u57df\u7ebf\u6bb5\u6811\uff08\u4e5f\u6709\u7684\u53eb\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u4e00\u4e2a\u53ef\u91cd\u96c6\uff0c\u5e76\u5b9e\u73b0\u4e00\u4e9b\u4e00\u822c\u60c5\u51b5\u4e0b\u5e73\u8861\u6811\u624d\u80fd\u5b9e\u73b0\u7684\u4e8b\u60c5\u3002\n\n\u5982\u679c\u7528\u503c\u6765\u5f53\u505a\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u5b58\u67d0\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u4e0a\u5b58\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u503c\u51fa\u73b0\u7684\u603b\u6b21\u6570\uff0c\u5c31\u53ef\u4ee5\u5efa\u6210\u503c\u57df\u7ebf\u6bb5\u6811\u3002\u53ef\u4ee5\u5728\u4e0a\u9762\u76f4\u63a5\u67e5\u8be2\u7b2ck\u5927\u503c\u3001\u5c0f\u4e8e\u67d0\u503c\u7684\u6570\u7684\u4e2a\u6570\u7b49\u7b49\uff0c\u5177\u4f53\u8bf7\u767e\u5ea6\u6216\u53c2\u89c1\u4ee3\u7801\u3002\n\n\u5982\u4f55\u5c06\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u5462\uff1f\u7ebf\u6bb5\u6811\u5728\u5355\u70b9\u66f4\u65b0\u7684\u65f6\u5019\u4f1a\u7ecf\u8fc7log n\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e00\u6b21\u66f4\u65b0\u65f6\u663e\u7136\u4e5f\u53ea\u6709\u8fd9\u4e48\u591a\u8282\u70b9\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u524d\u5c06\u6839\u8282\u70b9\u8d4b\u4e3a\u4e0e\u8fd9\u6b21\u64cd\u4f5c\u57fa\u4e8e\u7684\u7248\u672c\u7684\u6839\u8282\u70b9\u76f8\u540c\u3002\u5728\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u5907\u4efd\u6bcf\u4e00\u4e2a\u7ecf\u8fc7\u7684\u8282\u70b9\uff08\u5305\u62ec\u5404\u4e2a\u5c5e\u6027\uff1a\u5de6\u3001\u53f3\u5b50\u6811\u4ee5\u53ca\u533a\u95f4\u548c\uff09\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4fee\u6539\u3002\u5177\u4f53\u4e5f\u53ef\u4ee5\u53c2\u8003[\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.luogu.org/problemnew/show/P3919)\u7684\u9898\u89e3\u3002\n\n\u5982\u679c\u76f4\u63a5\u7528\u53ef\u6301\u4e45\u5316\u7684\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u663e\u7136\u7a7a\u95f4\u662f\u4e0d\u591f\u7684\uff084\\*2e9\u4e2a\u8282\u70b9\u554a...\uff09\u3002\u73b0\u5728\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n1.\u53d1\u73b0\u8fd9\u9053\u9898\u6ca1\u6709\u52a0\u3001\u51cf\u64cd\u4f5c\uff0c\u6240\u6709\u64cd\u4f5c\u6d89\u53ca\u7684\u503c\u90fd\u662f\u786e\u5b9a\u7684\u3002\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u518d\u505a\uff0c\u60f3\u5fc5\u53ef\u4ee5A\u6389\u5427~~\uff08\u6211\u6ca1\u8bd5\u8fc7\uff09~~\n\n2.\u53ef\u4ee5\u5199\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\u9898\u76ee\u8981\u6c42\u7684\u96c6\u5408\u4e00\u5f00\u59cb\u662f\u7a7a\u7684\uff0c\u56e0\u6b64\u5982\u679c\u4e00\u5f00\u59cb\u5efa\u4e00\u68f5\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\u7684\u8bdd\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u7684\u533a\u95f4\u548c\u90fd\u662f0\u3002\u800c\u603b\u5171\u53ea\u67095e5\u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u6d89\u53ca\u66f4\u6539\u8282\u70b9\u6700\u591a\u6709log2(2e9)=31\u4e2a\uff0c\u4e24\u8005\u4e58\u8d77\u6765\u8fdc\u8fdc\u5c0f\u4e8e4\\*2e9\u3002\n\n\u53ef\u4ee5\u8003\u8651\u4e00\u5f00\u59cb\u4e0d\u771f\u6b63\u5efa\u6811\u3002\u89c4\u5b9a\uff1a\u5982\u679c\u67d0\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u8bb0\u7684\u8bdd\uff0c\u8868\u660e\u4ee5\u8fd9\u4e2a\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8fd8\u6ca1\u6709\u5b9e\u9645\u5efa\u51fa\u6765\u3002\u663e\u7136\uff0c\u4e00\u4e2a\u5b50\u6811\u6ca1\u6709\u5b9e\u9645\u5efa\u51fa\u6765\u7684\u65f6\u5019\uff0c\u5176\u8868\u793a\u7684\u533a\u95f4\u7684\u548c\u4e3a0\u3002\uff08\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u6211\u7528\u7684\u6807\u8bb0\u662f0\uff09\n\n\u5728\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u9700\u8981\u5efa\u51fa\u6765\u8981\u8d70\u5165\u7684\u90a3\u4e2a\u5b50\u8282\u70b9\u3002\u5728\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u672a\u5efa\u51fa\u7684\u5b50\u8282\u70b9\u7684\u533a\u95f4\u548c\u5f53\u505a0\u3002\n\n\u9644\uff1a\u5199\u5b8c\u540e\u6211\u53d1\u73b0\u524d\u9a71\u548c\u540e\u7ee7\u7adf\u7136\u662f\u6700\u96be\u5199\u7684...\n\n\u9644\uff1a\u6ce8\u610f\u5404\u79cd\u5bf9\u4e0d\u5b58\u5728\u7684\u8282\u70b9\u7684\u67e5\u8be2/\u8981\u5ffd\u7565\u7684\u64cd\u4f5c\n\n\u9644\uff1a\u6ce8\u610f\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u64cd\u4f5c\u7528\u5230\u7684\u53d8\u91cf\u88ab\u8bbe\u7f6e\u6210\u4e86\u5168\u5c40\u53d8\u91cf\uff0c\u8fd8define\u4e86\u4e00\u4e2amid\uff0c\u8868\u793a\u533a\u95f4\u4e2d\u70b9\uff0c\u53ef\u80fd\u6bd4\u8f83\u5947\u602a...\n\n[\u535a\u5ba2](http://www.cnblogs.com/hehe54321/p/8530074.html)\n\n```\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<bits/stdc++.h>\n#define mid ((l+r)>>1)\n#define inf 2147483647\nusing namespace std;\nint lc[20000000],rc[20000000],root[20000000],dat[20000000],ll=-1e9,rr=1e9;\n//lc[i]\u3001rc[i]\u5206\u522b\u8868\u793a\u8282\u70b9i\u7684\u5de6\u5b50\u8282\u70b9\u3001\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\uff0c\u5982\u679clc[x]=0\u5219\u8868\u793ax\u7684\u5de6\u5b50\u6811\u5c1a\u672a\u5efa\u51fa\u6765\uff0crc[x]\u540c\u7406\n//dat[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u503c\u57df\u533a\u95f4\u4e2d\u5404\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\nint n,L,x,mem=1;//\u56e0\u4e3a0\u53f7\u88ab\"\u672a\u5b9e\u9645\u5efa\u51fa\u7684\u8282\u70b9\"\u7684\u7279\u6b8a\u6807\u8bb0\u5360\u7528\u4e86\uff0c1\u53f7\u88ab\u7248\u672c0\u7684\u6839\u8282\u70b9\u5360\u7528\u4e86\n\nvoid addx(int l,int r,int& num)//\u66f4\u65b0\u64cd\u4f5c\uff0c\u5c06\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u96c6\u5408\u4e2d\u6570L\u7684\u51fa\u73b0\u6b21\u6570\u52a0\u4e0ax\uff08x\u4e3a1\u6216-1\uff09\n{\n\tint t=num;num=++mem;lc[num]=lc[t];rc[num]=rc[t];dat[num]=dat[t];//\u5907\u4efd\u5f53\u524d\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u539f\u6765\u4e3a\u7a7a\u5219\u4e5f\u53ef\u4ee5\u5b8c\u6210\n\tif(l==r)\n\t{\n\t\tif(!(dat[num]==0&&x<0))\tdat[num]+=x;//\u5982\u679cL\u51fa\u73b0\u6b21\u6570\u4e3a0\u4e14\u64cd\u4f5c\u4e3a\u5220\u9664\u64cd\u4f5c\uff0c\u5219\u5ffd\u7565\u64cd\u4f5c\n\t\treturn;\n\t}\n\tif(L<=mid)\taddx(l,mid,lc[num]);\n\telse\taddx(mid+1,r,rc[num]);\n\tdat[num]=0;\n\tif(lc[num])\tdat[num]+=dat[lc[num]];\n\tif(rc[num])\tdat[num]+=dat[rc[num]];//\u7ef4\u62a4\u5f53\u524d\u8282\u70b9\u4fe1\u606f\n}\nint query(int l,int r,int num)//\u67e5\u8be2\u96c6\u5408\u4e2d\u5c0f\u4e8ex\u7684\u6570\u7684\u4e2a\u6570\n{\n\tif(l==r)\treturn 0;//\u5982\u679c\u5df2\u7ecf\u5230\u53f6\u5b50\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u7b49\u4e8ex\uff0c\u663e\u7136\u4e0d\u5c0f\u4e8ex\n\tif(!num)\treturn 0;//\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u8868\u793a\u7684\u5b50\u6811\u4e2d\u6570\u90fd\u6ca1\u6709\uff0c\u81ea\u7136\u8fd4\u56de0\n\tif(x<=mid)\treturn query(l,mid,lc[num]);//\u6839\u636ex\u51b3\u5b9a\u5411\u5de6/\u53f3\u5b50\u6811\u8d70\n\telse\treturn (lc[num]?dat[lc[num]]:0)+query(mid+1,r,rc[num]);\n}\nint query_kth(int l,int r,int k,int num)//\u67e5\u8be2\u7b2ck\u5c0f\u6570\n{\n\tassert(num!=0);//assert(x)\u8868\u793a\u5982\u679cx\u4e3afalse\u5219\u505c\u6b62\u7a0b\u5e8f\uff0c\u662f\u7528\u6765\u8c03\u8bd5\u7684\u3002\u5982\u679c\u67e5\u8be2\u64cd\u4f5c\u662f\u6b63\u5e38\u8fdb\u884c\u7684\uff0c\u90a3\u4e48\u4e0d\u53ef\u80fd\u8d70\u5230\u672a\u5efa\u51fa\u7684\u70b9\u4e2d\n\tif(l==r)\t{return l;}\n\t//if(!num)\treturn 0;//\u6ca1\u6709\u7528\n\tint ls=lc[num]?dat[lc[num]]:0;\n\tif(ls>=k)\treturn query_kth(l,mid,k,lc[num]);//\u6839\u636e\u5de6\u5b50\u6811\u4e2d\u6570\u51fa\u73b0\u603b\u6b21\u6570\u51b3\u5b9a\u5411\u5de6/\u53f3\u5b50\u6811\u8d70\n\telse\t\treturn query_kth(mid+1,r,k-ls,rc[num]);\n}\nint query_time(int l,int r,int num)//\u67e5\u8be2\u6570x\u51fa\u73b0\u7684\u6b21\u6570\n{\n\twhile(l!=r)\n\t{\n\t\tif(!num)\treturn 0;//\u5f53\u524d\u8282\u70b9\u672a\u5efa\u51fa\uff0c\u8868\u660e\u5176\u5b50\u8282\u70b9\u5747\u672a\u51fa\u73b0\n\t\tif(L<=mid)\tr=mid,num=lc[num];\n\t\telse\tl=mid+1,num=rc[num];\n\t}\n\treturn dat[num];\n}\nint query_pre(int l,int r,int num)//\u67e5\u8be2\u6570x\u7684\u524d\u9a71\n{\n\tint t=query(l,r,num);//t\u662f\u96c6\u5408\u4e2d\u6bd4x\u5c0f\u7684\u6570\u7684\u4e2a\u6570\n\tif(t==0)\treturn -inf;//\u5982\u679c\u96c6\u5408\u4e2d\u6bd4x\u5c0f\u7684\u6570\u67090\u4e2a\uff0c\u5219x\u662f\u96c6\u5408\u4e2d\u6700\u5c0f\u7684\u6570\uff0c\u4e0d\u5b58\u5728\u524d\u9a71\n\treturn query_kth(l,r,t,num);//\u5426\u5219\u67e5\u8be2\u96c6\u5408\u4e2d\u7b2ct\u5c0f\u5373\u53ef\n}\nint query_nxt(int l,int r,int num)\n{\n\tint t1=query(l,r,num),t2=query_time(l,r,num);//t1\u662f\u96c6\u5408\u4e2d\u6bd4x\u5c0f\u7684\u6570\u7684\u4e2a\u6570,t2\u662f\u96c6\u5408\u4e2dx\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u52a0\u8d77\u6765\u662f\u96c6\u5408\u4e2d\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6570\u7684\u4e2a\u6570\n\tx=inf;int t3=query(l,r,num);\n\tif(t1+t2==t3)\treturn inf;//\u5982\u679c\u96c6\u5408\u4e2d\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6570\u4e0e\u96c6\u5408\u4e2d\u5c0f\u4e8e\u7b49\u4e8einf\u7684\u6570\u76f8\u7b49\uff0c\u5219x\u662f\u96c6\u5408\u4e2d\u6700\u5927\u7684\u6570\uff0c\u4e0d\u5b58\u5728\u540e\u7ee7\n\treturn query_kth(l,r,t1+t2+1,num);//\u5426\u5219\u67e5\u8be2\u96c6\u5408\u4e2d\u7b2ct1+t2+1\u5c0f\u5373\u53ef\n}\nint main()\n{\n\tint i,v,idx;\n\tscanf(\"%d\",&n);\n\troot[0]=1;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&v,&idx,&x);root[i]=root[v];\n\t\tif(idx==1)\n\t\t{\n\t\t\tL=x;x=1;\n\t\t\taddx(ll,rr,root[i]);\n\t\t}\n\t\telse if(idx==2)\n\t\t{\n\t\t\tL=x;x=-1;\n\t\t\taddx(ll,rr,root[i]);\n\t\t}\n\t\telse if(idx==3)\n\t\t{\n\t\t\tprintf(\"%d\\n\",query(ll,rr,root[i])+1);\n\t\t}\n\t\telse if(idx==4)\n\t\t{\n\t\t\tprintf(\"%d\\n\",query_kth(ll,rr,x,root[i]));\n\t\t}\n\t\telse if(idx==5)\n\t\t{\n\t\t\tL=x;\n\t\t\tprintf(\"%d\\n\",query_pre(ll,rr,root[i]));\n\t\t}\n\t\telse if(idx==6)\n\t\t{\n\t\t\tL=x;\n\t\t\tprintf(\"%d\\n\",query_nxt(ll,rr,root[i]));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1520503096,
        "uid": 28455,
        "name": "hehe_54321",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\n\u5e73\u8861\u6811\u7684\u53ef\u6301\u4e45\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\uff0c\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u6765\u5b9e\u73b0\u5bf9\u5386\u53f2\u7248\u672c\u7684\u4fee\u6539\u4e0e\u67e5\u8be2\uff0c\u5176\u5b9e\u6211\u611f\u89c9\u548c\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u7684\u611f\u89c9\u5dee\u4e0d\u591a\n\n### \u5bf9\u503c\u57df\u5f00+\u52a8\u6001\u5f00\u70b9\n\n\u5f00\u59cb\u8c03\u4e86\u597d\u957f\u65f6\u95f4\uff0c\u4e00\u76f428\u5206\uff0c\u540e\u6765\u53d1\u73b0\uff0c\u7adf\u7136\u53ef\u4ee5\u5220\u9664\u4e0d\u5b58\u5728\u7684\u8282\u70b9\uff1f\uff1f\uff1f\uff1f\uff08\u5927\u96fe\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u4e0b\u5224\u65ad\uff0c\u5982\u8fc7\u52a0\u5f53\u524d\u8282\u70b9\u7684size\u4e3a0,\u5219\u4e0d\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd8\u662f\u89c9\u5f97\u8fd9\u79cd\u65b9\u6cd5\u6bd4\u8f83\u597d\u5199\uff0c\u7801\u91cf\u5c11\u4e00\u4e9b\n\n#### \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=5e5+10;\nint size[maxn*30];\nint ls[maxn*30],rs[maxn*30],root[maxn];\nint nodecnt;\nint get(int rt){\n\t++nodecnt;\n\tls[nodecnt]=ls[rt];\n\trs[nodecnt]=rs[rt];\n\tsize[nodecnt]=size[rt];\n\treturn nodecnt;\n}\nvoid add(int &rt,int l,int r,int x,int v){\n\tif(rt!=0)rt=get(rt);\n\telse if(rt==0)rt=++nodecnt;\n\tsize[rt]+=v;\n\tif(l==r){\n\t\tif(size[rt]<0)size[rt]=0;\t\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)add(ls[rt],l,mid,x,v);\n\telse add(rs[rt],mid+1,r,x,v);\n\tsize[rt]=size[ls[rt]]+size[rs[rt]];\n}\nint getnum(int rt,int l,int r,int x){\n\tif(size[rt]==0||x>r){\n\t\treturn size[rt];\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)return getnum(ls[rt],l,mid,x);\n\treturn size[ls[rt]]+getnum(rs[rt],mid+1,r,x);\n}\nint getk(int rt,int l,int r,int k){\n\tif(l==r)return l;\n\tint mid=(l+r)>>1;\n\tif(size[ls[rt]]>=k)return getk(ls[rt],l,mid,k);\n\treturn getk(rs[rt],mid+1,r,k-size[ls[rt]]);\n}\nsigned main(){\n\tint n;\n\tscanf(\"%lld\",&n);\n\troot[0]=++nodecnt;\n\tfor(int i=1;i<=n;i++){\n\t\tint rt,op,x;\n\t\tscanf(\"%lld%lld%lld\",&rt,&op,&x);\n\t\troot[i]=root[rt];\n\t\tif(op==1){\n\t\t\tadd(root[i],-1e9,1e9+1,x,1);\n\t\t}\n\t\tif(op==2){\n\t\t\tadd(root[i],-1e9,1e9+1,x,-1);\n\t\t}\n\t\tif(op==3){\n\t\t\tprintf(\"%lld\\n\",getnum(root[i],-1e9,1e9+1,x)+1);\n\t\t}\n\t\tif(op==4){\n\t\t\tprintf(\"%lld\\n\",getk(root[i],-1e9,1e9+1,x));\n\t\t}\n\t\tif(op==5){\n\t\t\tint ans=getnum(root[i],-1e9,1e9+1,x);\n\t\t\tif(ans==0)printf(\"%d\\n\",-0x7fffffff);\n\t\t\telse printf(\"%lld\\n\",getk(root[i],-1e9,1e9+1,ans));\n\t\t}\n\t\tif(op==6){\n\t\t\tint ans=getk(root[i],-1e9,1e9+1, getnum(root[i],-1e9,1e9+1,x +1)+1);\n\t\t\tif(ans==1e9+1)printf(\"%d\\n\",0x7fffffff);\n\t\t\telse printf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\n}\n\n```\n\n### \u5bf9\u79bb\u6563\u5316\u6570\u7ec4\u5f00\u7ebf\u6bb5\u6811\n\n\u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u8003\u8651\u79bb\u7ebf\u64cd\u4f5c\uff0c\u628a\u9664\u4e86\u64cd\u4f5c4\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u6d89\u53ca\u6570\u503c\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u518d\u5bf9\u6bcf\u4e00\u4e2a\u8bb0\u5f55\u64cd\u4f5c\u6765\u8fdb\u884c\u5b9e\u73b0\n\n#### \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e5+10;\nint nodecnt;\nstruct node{\n\tint v,op,x;\n}temp[maxn];\nint tmp[maxn],tail;\nint rs[maxn*32],ls[maxn*32],size[maxn*32],root[maxn];\nint n;\nvoid build(int &curr, int l, int r) {\n    curr = ++nodecnt;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    build(ls[curr], l, mid);\n    build(rs[curr], mid + 1, r);\n}\nint get(int rt){\n\tnodecnt++;\n\tls[nodecnt]=ls[rt];\n\trs[nodecnt]=rs[rt];\n\tsize[nodecnt]=size[rt];\n\treturn nodecnt;\n}\nvoid add(int &rt,int l,int r,int x,int v){\n\trt=get(rt);\n\tif(l==r){\n\t\tsize[rt]+=v;\n\t\tif(size[rt]<0)size[rt]=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)add(ls[rt],l,mid,x,v);\n\telse add(rs[rt],mid+1,r,x,v);\n\tsize[rt]=size[ls[rt]]+size[rs[rt]];\n}\n\nint querysum(int rt,int l,int r,int x){\n\tif(x<l)return 0;\n\tif(x>=r)return size[rt];\n\tint mid=(l+r)>>1;\n\treturn querysum(ls[rt],l,mid,x)+querysum(rs[rt],mid+1,r,x);\n}\n\nint querykth(int rt,int l,int r,int k){\n\tif(l==r)return l;\n\tint mid=(l+r)>>1;\n\tif(k<=size[ls[rt]])return querykth(ls[rt],l,mid,k);\n\telse return querykth(rs[rt],mid+1,r,k-size[ls[rt]]);\n}\n\nint querypre(int v,int x){\n\tint ans=querysum(root[v],1,tail,x-1);\n\tif(!ans)return -2147483647;\n\telse return tmp[querykth(root[v],1,tail,ans)];\n\n}\nint querynex(int v,int x){\n\tint ans=querysum(root[v],1,tail,x);\n\tif(ans>=size[root[v]])return 2147483647;\n\telse return tmp[querykth(root[v],1,tail,ans+1)];\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d%d\",&temp[i].v,&temp[i].op,&temp[i].x);\n\t\tif(temp[i].op!=4){\n\t\t\ttmp[++tail]=temp[i].x;\n\t\t}\n\t}\n\tsort(tmp+1,tmp+tail+1);\n\ttail=unique(tmp+1,tmp+tail+1)-(tmp+1);\n\tbuild(root[0],1,tail);\n\tfor(int i=1;i<=n;i++){\n\t\tint v=temp[i].v,op=temp[i].op,x=temp[i].x;\n\t\tif(op!=4){x=lower_bound(tmp+1,tmp+tail+1,x)-tmp;}\n\t\troot[i]=root[v];\n\t\tif(op==1){\t\n\t\t\tadd(root[i],1,tail,x,1);\n\t\t}\n\t\tif(op==2){\n\t\t\tadd(root[i],1,tail,x,-1);\n\t\t}\n\t\tif(op==3){\n\t\t\tprintf(\"%d\\n\",querysum(root[i],1,tail,x-1)+1);\n\t\t}\n\t\tif(op==4){\n\t\t\tprintf(\"%d\\n\",tmp[querykth(root[i],1,tail,x)]);\n\t\t}\n\t\tif(op==5){\n\t\t\tprintf(\"%d\\n\",querypre(i,x));\n\t\t}\n\t\tif(op==6){\n\t\t\tprintf(\"%d\\n\",querynex(i,x));\n\t\t}\n\t}\n\t\n}\n\n\n\n```",
        "postTime": 1595942389,
        "uid": 345927,
        "name": "sodak",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u611f\u8c22 @wangrx \u5927\u4f6c\u5e2e\u6211\u5361\u5e38\uff01\uff01\n\n---\n\n\u770b\u5230\u9898\u89e3\u91cc\u6ca1\u6709\u6307\u9488\u5b9e\u73b0\u7684 fhq-Treap\uff0c\u90a3\u6211\u5c31\u6765\u4e00\u53d1\u5427\u3002\n\n\u53ef\u6301\u4e45\u5316 fhq-Treap \u7684\u6838\u5fc3\u662f\u5b83\u7684\u4e24\u4e2a\u57fa\u5c42\u64cd\u4f5c\u2014\u2014\u5206\u88c2\u548c\u5408\u5e76\u3002\n\n\u5176\u5b83\u7684\u64cd\u4f5c\u6309\u7167\u4e0d\u53ef\u6301\u4e45\u7684 fhq-Treap \u5199\u5c31\u884c\u4e86\u3002\n\n\u53ef\u6301\u4e45\u5316**\u6570\u636e\u7ed3\u6784**\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5c3d\u53ef\u80fd\u65b0\u5efa\u66f4\u5c11\u7684\u7ed3\u70b9\u8bb0\u5f55\u65b0\u7248\u672c\u7684\u4fe1\u606f\uff0c\u540c\u65f6\u4fdd\u7559\u4f4f\u5386\u53f2\u7248\u672c\u7684\u7ed3\u70b9\u4fe1\u606f\u3002\u53ef\u6301\u4e45\u5316 fhq-Treap \u4e5f\u4e0d\u4f8b\u5916\u3002\n\nfhq-Treap \u7684\u53ef\u6301\u4e45\u5316\uff1a\n\n\u5df2\u77e5\u6709:\n\n```cpp\ntypedef std::pair<Node*,Node*> droot;\n```\n\n\u5bf9\u4e8e\u5206\u88c2\u64cd\u4f5c:\n\n```cpp\ndroot split(Node* x,int k)\n{\n\tif(!x)return droot(NULL,NULL);\n\tdroot res;\n\tif(siz(x->ls)>=k)\n\t{\n\t\tres=split(x->ls,k);\n\t\t// \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5e76\u5c06 x \u7684\u4fe1\u606f\u590d\u5236\u5230\u5b83\u8eab\u4e0a\u3002\n\t\tNode* p=new Node;\n\t\tcopy(p,x);\n\t\t// \u4e0b\u9762\u662f\u5bf9 p \u8fdb\u884c fhq-Treap \u7684\u6b63\u5e38\u64cd\u4f5c\n\t\tp->ls=res.second;\n\t\tp->pushup();\n\t\tres.second=p;\n\t}\n\telse\n\t{\n\t\tres=split(x->rs,k-siz(x->ls)-1);\n\t\t// \u540c\u7406\n\t\tNode* p=new Node;\n\t\tcopy(p,x);\n\t\tp->rs=res.first;\n\t\tp->pushup();\n\t\tres.first=p;\n\t}\n\treturn res;\n}\n```\n\n\u5bf9\u4e8e\u5408\u5e76\u64cd\u4f5c\uff1a\n\n```cpp\nNode* merge(Node* x,Node* y)\n{\n\tif(!x)return y;\n\tif(!y)return x;\n\tif(x->w<y->w)\n\t{\n\t\tNode* p=new Node;\n\t\t// \u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5e76\u5c06 x \u7684\u4fe1\u606f\u590d\u5236\u5230\u5b83\u8eab\u4e0a\u3002\n\t\tcopy(p,x);\n\t\t// \u4e0b\u9762\u662f\u5bf9 p \u8fdb\u884c fhq-Treap \u7684\u6b63\u5e38\u64cd\u4f5c\n\t\tp->rs=merge(p->rs,y);\n\t\tp->pushup();\n\t\treturn p;\n\t}\n\telse\n\t{\n\t\tNode* p=new Node;\n\t\t// \u540c\u7406\n\t\tcopy(p,y);\n\t\tp->ls=merge(x,p->ls);\n\t\tp->pushup();\n\t\treturn p;\n\t}\n}\n```\n\n\u7531\u6b64\u53ef\u89c1\uff0c\u5bf9\u4e8e\u53ef\u6301\u4e45\u5316 fhq-Treap \u7684\u57fa\u5c42\u64cd\u4f5c\uff0c\u6bcf\u66f4\u6539\u4e00\u4e2a\u7ed3\u70b9\u5c31\u8981\u5206\u503c\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\u51fa\u6765\uff0c**\u5426\u5219\u4f60\u4fee\u6539\u7684\u5c31\u662f\u5386\u53f2\u7248\u672c\u4e0a\u7684\u7ed3\u70b9\uff01\uff01\uff01**\n\n---\n\n\u6838\u5fc3\u90e8\u5206\u5c31\u8bb2\u5230\u8fd9\u91cc\uff0c\u4e0b\u9762\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u5e38\u6570\u8f83\u5927\u3002\n\n\u5199\u4ee3\u7801\u65f6\u8981\u6ce8\u610f\u4e00\u4e9b C++ \u8bed\u8a00\u4e0a\u7684\u7ec6\u8282\uff08\u56e0\u4e3a\u7528\u7684\u662f\u6307\u9488\uff09\u3002\n\n\u65e0\u6ce8\u91ca\u7684\u4ee3\u7801\u770b[\u8fd9\u91cc](https://www.luogu.com.cn/paste/r6mtf9k5)\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n\nconst int N=5e5;\nconst int LOGN=20;\nconst int INF=2147483647;\n\nstruct Node\n{\n\tint v,w;\n\tNode *ls,*rs;\n\tint siz;\n\t\n\tNode(){}\n\t\n\tNode(int _v):v(_v),w(rand()),ls(NULL),rs(NULL),siz(1){}\n\t\n\tinline void pushup()\n\t{\n\t\tsiz=(ls?ls->siz:0)+(rs?rs->siz:0)+1;\n\t}\n};\n\ntypedef std::pair<Node*,Node*> droot;\n\nNode* root[N+10];\nint n;\n\n// \u4ee5\u4e0b\u4e3a\u5361\u5e38\u90e8\u5206\n\n#define SIZ 1000000\n\ninline char gc()\n{\n\tstatic char buf[SIZ],*p1,*p2;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,SIZ,stdin),p1==p2)?EOF:*p1++;\n}\n\n#undef SIZ\n\ninline void read(int& x)\n{\n\tx=0;int f=0;char c=gc();\n\twhile(c<'0'||c>'9')f|=(c=='-'),c=gc();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=gc();\n\tif(f)x=-x;\n}\n\n// @wangrx \u5927\u4f6c\u6559\u6211\u7684\u5361\u5e38\u6280\u5de7\uff1a\u91cd\u8f7d new \u8fd0\u7b97\u7b26\n// \u4e0b\u9762\u7684\u8bdd\u5f15\u81ea @wangrx\n// new \u662f\u7cfb\u7edf\u5728\u7ed9\u4f60\u5206\u914d\u5185\u5b58\uff0c\u901f\u5ea6\u80af\u5b9a\u4e0d\u6562\u606d\u7ef4\n// \u8fd9\u4e48\u5199\u76f8\u5f53\u4e8e\u624b\u52a8\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f delete \u5c31\u7528\u4e0d\u4e86\u4e86\n// \u4eb2\u6d4b\u6709\u7528\n\nchar pool[1<<30],*ptop=pool+(1<<30);\n\nvoid* operator new(size_t size)\n{\n\treturn ptop-=size;\n}\n\n// \u4ee5\u4e0a\u4e3a\u5361\u5e38\u90e8\u5206\n// \u4ee5\u4e0b\u4e3a fhq-Treap \u90e8\u5206\n\ninline int siz(Node* x)\n{\n\treturn x?x->siz:0;\n}\n\ninline void copy(Node*& p,Node* x) // \u4e0d\u80fd\u76f4\u63a5\u8d4b\u503c\uff0c\u800c\u4e14\u8981\u5f15\u7528\uff0c\u5426\u5219\u5c31\u548c\u6ca1\u6539\u4e00\u6837\n{\n\tp->v=x->v;\n\tp->w=x->w;\n\tp->ls=x->ls;\n\tp->rs=x->rs;\n\tp->siz=x->siz;\n}\n\ndroot split(Node* x,int k)\n{\n\tif(!x)return droot(NULL,NULL);\n\tdroot res;\n\tif(siz(x->ls)>=k)\n\t{\n\t\tres=split(x->ls,k);\n\t\tNode* p=new Node;\n\t\tcopy(p,x);\n\t\tp->ls=res.second;\n\t\tp->pushup();\n\t\tres.second=p;\n\t}\n\telse\n\t{\n\t\tres=split(x->rs,k-siz(x->ls)-1);\n\t\tNode* p=new Node;\n\t\tcopy(p,x);\n\t\tp->rs=res.first;\n\t\tp->pushup();\n\t\tres.first=p;\n\t}\n\treturn res;\n}\n\nNode* merge(Node* x,Node* y)\n{\n\tif(!x)return y;\n\tif(!y)return x;\n\tif(x->w<y->w)\n\t{\n\t\tNode* p=new Node;\n\t\tcopy(p,x);\n\t\tp->rs=merge(p->rs,y);\n\t\tp->pushup();\n\t\treturn p;\n\t}\n\telse\n\t{\n\t\tNode* p=new Node;\n\t\tcopy(p,y);\n\t\tp->ls=merge(x,p->ls);\n\t\tp->pushup();\n\t\treturn p;\n\t}\n}\n\nint queryrk(Node*& rt,int k)\n{\n\tif(!rt)return 0;\n\treturn k<=rt->v?queryrk(rt->ls,k):queryrk(rt->rs,k)+siz(rt->ls)+1;\n}\n\nint querykth(Node*& rt,int k) // \u8981\u52a0\u5f15\u7528\uff0c\u624d\u80fd\u771f\u6b63\u4fee\u6539 rt\uff0c\u4ee5\u4e0b\u540c\u7406\n{\n\tdroot x=split(rt,k-1);\n\tdroot y=split(x.second,1);\n\tNode* res=y.first;\n\trt=merge(merge(x.first,y.first),y.second);\n\treturn res->v;\n}\n\nvoid insert(Node*& rt,int v)\n{\n\tint k=queryrk(rt,v);\n\tdroot x=split(rt,k);\n\tNode* now=new Node(v);\n\trt=merge(merge(x.first,now),x.second);\n}\n\nvoid erase(Node*& rt,int v)\n{\n\tint k=queryrk(rt,v);\n\tdroot x=split(rt,k);\n\tdroot y=split(x.second,1);\n\tif(y.first->v!=v)return;\n\trt=merge(x.first,y.second);\n}\n\nint querypre(Node*& rt,int v)\n{\n\tint k=queryrk(rt,v);\n\tdroot x=split(rt,k-1);\n\tdroot y=split(x.second,1);\n\tNode* res=y.first;\n\trt=merge(merge(x.first,y.first),y.second);\n\treturn res->v;\n}\n\nint querysuc(Node*& rt,int v)\n{\n\tint k=queryrk(rt,v+1);\n\tdroot x=split(rt,k);\n\tdroot y=split(x.second,1);\n\tNode* res=y.first;\n\trt=merge(merge(x.first,y.first),y.second);\n\treturn res->v;\n}\n\n// \u4ee5\u4e0a\u4e3a fhq-Treap \u90e8\u5206\uff0c\u6ca1\u6709\u4ec0\u4e48\u5947\u5947\u602a\u602a\u7684\u64cd\u4f5c\u5bf9\u5427\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"data.in\",\"r\",stdin);\n\tfreopen(\"data.out\",\"w\",stdout);\n#endif \n\tsrand(20070414U);\n\tread(n);\n\tinsert(root[0],INF);\n\tinsert(root[0],-INF);\n\tfor(int q=1;q<=n;q++)\n\t{\n\t\tint ver,opt,x;\n\t\tread(ver),read(opt),read(x);\n\t\troot[q]=root[ver]; // \u53ef\u6301\u4e45\u5316\u57fa\u672c\u64cd\u4f5c\n\t\tif(opt==1)insert(root[q],x);\n\t\tif(opt==2)erase(root[q],x);\n\t\tif(opt==3)printf(\"%d\\n\",queryrk(root[q],x)); // \u5176\u5b9e\u662f queryrk(root[q],x)+1-1\uff0c\u6ce8\u610f +1\uff0c-1 \u7684\u7ec6\u8282\u95ee\u9898\n\t\tif(opt==4)printf(\"%d\\n\",querykth(root[q],x+1)); // \u6ce8\u610f +1\uff0c-1 \u7684\u7ec6\u8282\u95ee\u9898\n\t\tif(opt==5)printf(\"%d\\n\",querypre(root[q],x));\n\t\tif(opt==6)printf(\"%d\\n\",querysuc(root[q],x));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1583077930,
        "uid": 242702,
        "name": "registerGen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u7528\u7684\u662f\u53ef\u6301\u4e45\u5316$01trie$  \n\u60f3\u6cd5\u4e4b\u7c7b\u7684\u548c\u524d\u9762\u7684$trie$\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u6211\u662f\u5199\u7684\u9012\u5f52\uff0c\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u4f46\u662f\u6bd4\u8d77\u666e\u901a\u975e\u9012\u5f52\u7684\u5c31\u597d\u5199\u591a\u4e86\u3002  \uff08\u4e5f\u5c31\u5c11\u4e86\u51e0\u884c\uff09\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u867d\u7136\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n*logk)$\uff0c$k$\u4e3a\u503c\u57df\uff0c\u5728\u8fd9\u9053\u9898\u76ee\u4e2d\uff0c\u4e5f\u5c31\u6bd4$O(n*logn)$\u5927\u4e862\u500d\u7684\u5e38\u6570\u800c\u5df2\u3002\u3002\u5982\u679c\u4e0d\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\u7684\u8bdd\uff0c\u53ef\u4ee5\u79bb\u6563\u5316\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230$O(n*logn)$\u3002\u6bd4\u5982\u8fd9\u9898\u5c31\u53ef\u4ee5~ ~~\u867d\u7136\u5728\u8fd9\u9898\u4e2d\u79bb\u6563\u5316\u540e\u7684\u5e38\u6570\u6bd4\u4e0d\u79bb\u6563\u5316\u7684\u5e38\u6570\u8fd8\u8981\u5927~~\n\n\u4e3b\u51fd\u6570\u7684\u4ee3\u7801\u53ef\u80fd\u6709\u70b9\u4e11= = \uff0c\u5e94\u8be5\u8fd8\u662f\u770b\u5f97\u8fc7\u53bb\u7684\uff0c\u4f1a\u6709\u6ce8\u91ca(\u505a\u4e86\u9632\u6284\u88ad\u5904\u7406,\u4ed4\u7ec6\u770b\u5e94\u8be5\u770b\u5f97\u51fa\u6765)  \n~~\u7279\u522b\u597d\u80cc\u8bf5~~\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define P 1000000000\n#define MAXN 600010\n#define ri register int\nusing namespace std;\n\nint cnt,chu=30;\nint son[MAXN*32][2],size[MAXN*32];\nint t[MAXN];\n\nint ins(int dep,int pre,const int key){\n    if(dep==-1){   size[++cnt]=size[pre]+1;    return cnt;    }//\u5230\u5e95\u4e86\n    ri now=++cnt,nxt=(bool)(key&(1<<dep));//\u65b0\u5efa\u8282\u70b9\n    son[now][0]=son[pre][0],son[now][1]=son[pre][1],size[now]=size[pre]+1;//\u590d\u5236\u4e00\u4efd\n    son[now][nxt]=ins(dep-1,son[pre][nxt],key);//\u7ee7\u7eed\u63d2\u5165\n    return now;\n}\n\nint del(int dep,int pre,const int key){\n    ri now=++cnt,nxt=(bool)(key&(1<<dep));\n    son[now][0]=son[pre][0],son[now][1]=son[pre][1],size[now]=size[pre]-1;//\u590d\u5236\u4e00\u4efd\n    if(size[son[pre][nxt]]<=1){     son[now][nxt]=0;       return now;    }//\u526a\u679d\uff0c\u5220\u5230\u5e95\u4e86\n    son[now][nxt]=del(dep-1,son[pre][nxt],key);//\u5411\u4e0b\u5220\u9664\n    return now;\n}\n\nint frank(int dep,int now,const int key){\n    if(now==0)  return 0;\n    ri nxt=(bool)(key&(1<<dep));\n    return frank(dep-1,son[now][nxt],key)+(nxt?size[son[now][0]]:0);//\u6c42\u6709\u591a\u5c11\u4e2a\u6bd4key\u5c0f\u7684\u6570\n}\n\nint atrank(int dep,int now,int key){\n    if(now==0)  return 0;\n    if(key>size[son[now][0]]&&son[now][1])  return atrank(dep-1,son[now][1],key-size[son[now][0]])|(1<<dep);//\u6bd4\u5f53\u524d\u5927\n    else return atrank(dep-1,son[now][0],key);//\u6bd4\u5f53\u524d\u5c0f\n}\n\nint main(){\n    int n,v,opt,x,tmp; \n    cin>>n;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d%d\",&opt,&v,&x);\n        if(opt==1)  t[i]=ins(chu,t[v],x+P);\n        if(opt==2){\n            if(atrank(chu,t[v],frank(chu,t[v],x+P)+1)-P!=x) t[i]=t[v];\n            else t[i]=del(chu,t[v],x+P);\n        }\n        if(opt==3)  cout<<(int)(frank(chu,t[v],x+P)+1)<<endl,t[i]=t[v];\n        if(opt==4)  cout<<(int)(atrank(chu,t[v],x)-P)<<endl,t[i]=t[v];\n        if(opt==5){\n            tmp=frank(chu,t[v],x+P);\n            if(tmp==0)  puts(\"-2147483647\");\n            else tmp=atrank(chu,t[v],tmp),tmp-=P,cout<<tmp<<endl;    t[i]=t[v];\n        }\n        if(opt==6){\n            tmp=frank(chu,t[v],x+P)+1;\n            if((x+P==atrank(chu,t[v],tmp))) tmp++;\n            if(tmp>size[t[v]])    puts(\"2147483647\");\n            else tmp=atrank(chu,t[v],tmp),tmp-=P,cout<<tmp<<endl;    t[v]=t[i];\n        }\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n",
        "postTime": 1551942105,
        "uid": 20780,
        "name": "\u5357\u57ce\u5fc6\u6f47\u6e58",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u7531\u4e8e\u66ff\u7f6a\u7f8a\u6811\u7ef4\u62a4\u5e73\u8861\u4e0d\u662f\u9760\u65cb\u8f6c\u800c\u662f\u9760\u91cd\u6784\uff0c\u6240\u4ee5\u66ff\u7f6a\u7f8a\u6811\u7684\u6839\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u66ff\u7f6a\u7f8a\u6811\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u4e86\u3002\n\n\u5bf9\u4e8e3,4,5,6\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u7ed9\u628a\u8981\u64cd\u4f5c\u7684\u6839\u590d\u5236\u4e00\u904d\u5230\u65b0\u6839\u4e0a\uff0c\u5176\u4ed6\u7684\u548c\u666e\u901a\u7684\u66ff\u7f6a\u7f8a\u6811\u4e00\u6837\uff1b\n\n\u5bf9\u4e8e1,2\u64cd\u4f5c\u5148\u628a\u8981\u64cd\u4f5c\u7684\u6839\u590d\u5236\u4e00\u904d\u5230\u65b0\u6839\uff0c\u7136\u540e\u8fdb\u884c\u7c7b\u4f3c\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u8981\u52a0\u5165\uff08\u5220\u9664\uff09\u7684\u503c\u6bd4\u73b0\u5728\u8282\u70b9\u7684\u5927\uff0c\u5c31new\u4e00\u4e2a\u5de6\u513f\u5b50\uff0c\u628a\u539f\u6765\u7684\u8282\u70b9\u7684\u6240\u6709\u4fe1\u606fcopy\u5230\u5de6\u513f\u5b50\u4e0a\uff0c\u5982\u679c\u8981\u52a0\u5165\uff08\u5220\u9664\uff09\u7684\u503c\u6bd4\u73b0\u5728\u8282\u70b9\u7684\u5c0f\u540c\u7406\u64cd\u4f5c\u53f3\u513f\u5b50\uff0c\u5982\u679c\u8981\u52a0\u5165\uff08\u5220\u9664\uff09\u7684\u503c\u7b49\u4e8e\u73b0\u5728\u7684\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u4fee\u6539\u5c31\u597d\u4e86\uff08\u8be6\u89c1\u4ee3\u7801\uff09\u3002\n\n\u7136\u800c\u6211\u8fd9\u4e2a\u66ff\u7f6a\u7f8a\u6811\u6709\u4e2a\u7f3a\u70b9\uff0c\u6bcf\u6b21\u91cd\u6784\u7684\u65f6\u5019\u4e0d\u80fd\u91ca\u653e\u7a7a\u95f4\uff0c\u5426\u5219\u4f1a\u5220\u6389\u6709\u7528\u7684\u8282\u70b9\uff0c\u53ea\u80fd\u901a\u8fc7\u51cf\u5c11a\u7684\u503c\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u4e86\uff08\u5982\u679c\u8c01\u6709\u89e3\u51b3\u8fd9\u4e2a\u7684\u65b9\u6cd5\uff0c\u6c42\u79c1\u4fe1\u544a\u77e5\uff09\u3002\n\u9644\u4e0a\u4ee3\u7801\n```\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nconst int maxn = 5e5 + 7;\n\nconst int INF = 2147483647;\n\ndouble a = 0.50;\n\nint num[1000010], sum, t[1000010];\n\nstruct Node{\n    Node *leftchild, *rightchild;\n    int val, cnt, size, tot, del;\n\n    Node (int val, int cnt) :\n        val(val),\n        leftchild(NULL),\n        rightchild(NULL),\n        cnt(cnt),\n        del(0),\n        tot(0),\n        size(cnt){}\n};\n\nNode *root[maxn], *null;\n\nvoid Copy(Node *&now, Node *last) {\n\tif (!last) {\n\t\tnow = NULL;\n\t\treturn;\n\t}\n\tnow->leftchild = last->leftchild;\n\tnow->rightchild = last->rightchild;\n\tnow->cnt = last->cnt;\n\tnow->del = last->del;\n\tnow->size = last->size;\n\tnow->tot = last->tot;\n\tnow->val = last->val;\n}\n\nvoid UpdateSize(Node *&now) {\n    if (!now) {\n        return;\n    }\n    now->size = now->cnt;\n    now->del = now->tot;\n    if (now->leftchild) {\n        now->size += now->leftchild->size;\n        now->del += now->leftchild->del;\n    }\n    if (now->rightchild) {\n        now->size += now->rightchild->size;\n        now->del += now->rightchild->del;\n    }\n}\n\nvoid DFS(Node *now) {\n    if (!now) {\n        return;\n    }\n    DFS(now->leftchild);\n    if (now->cnt - now->tot) {\n        num[++sum] = now->val;\n        t[sum] = now->cnt - now->tot;   \t\n    }\n    DFS(now->rightchild);\n}\n\nNode *Rebuild(int l, int r) {\n    Node *now;\n    if (l > r) {\n        return NULL;\n    }\n    if (l == r) {\n        now = new Node(num[l], t[l]);\n        return now;\n    }\n    int mid = l + r >> 1;\n    now = new Node(num[mid], t[mid]);\n    now->leftchild = Rebuild(l, mid - 1);\n    now->rightchild = Rebuild(mid + 1, r);\n    UpdateSize(now);\n    return now;\n}\n\nvoid Maintain(Node *&now) {\n    if (!now) {\n        return;\n    }\n    int left_size = now->leftchild ? now->leftchild->size : 0;\n    int right_size = now->rightchild ? now->rightchild->size : 0;\n    if ((double)left_size * a > (double)right_size) {\n        sum = 0;\n        DFS(now);\n        now = Rebuild(1, sum);\n    }\n    else if ((double)right_size * a > (double)left_size) {\n        sum = 0;\n        DFS(now);\n        now = Rebuild(1, sum);\n    }\n    else if(now->del >= now->size / 2 || now->cnt <= now->tot) {\n        sum = 0;\n        DFS(now);\n        now = Rebuild(1, sum);    \t\n    }\n}\n\nNode *Insert(Node *now, int val, Node *last) {\n    if (!now) {\n        now = new Node(val, 1);\n        return now;\n    }\n    if (now->val == val) {\n        now->cnt++;\n    }\n    else if(now->val > val) {\n    \tnow->leftchild = new Node(1, 1);\n    \tCopy(now->leftchild, last->leftchild);\n        now->leftchild = Insert(now->leftchild, val, last->leftchild);\n    }\n    else {\n    \tnow->rightchild = new Node(1, 1);\n    \tCopy(now->rightchild, last->rightchild);\n        now->rightchild = Insert(now->rightchild, val, last->rightchild);\n    }\n    UpdateSize(now);\n    Maintain(now);\n    return now;\n}\n\nNode *Remove(Node *now, int val, Node *last) {\n    if (!now) {\n        return now;\n    }\n    if (now->val == val) {\n        now->tot++;\n    }\n    else if (now->val > val) {\n    \tnow->leftchild = new Node(1, 1);\n    \tCopy(now->leftchild, last->leftchild);\n        now->leftchild = Remove(now->leftchild, val, last->leftchild); \n    }\n    else {\n    \tnow->rightchild = new Node(1, 1);\n    \tCopy(now->rightchild, last->rightchild);\n        now->rightchild = Remove(now->rightchild, val, last->rightchild);\n    } \n    UpdateSize(now);\n    Maintain(now);\n    return now;\n}\n\nint Rank(Node *now, int val) {\n    if (!now) {\n        return 1;\n    }\n    int left_size = now->leftchild ? now->leftchild->size - now->leftchild->del: 0;\n    if (now->val == val) {\n        return left_size + 1;\n    }\n    if (now->val < val) {\n        return left_size + now->cnt - now->tot + Rank(now->rightchild, val);\n    }\n    else {\n        return Rank(now->leftchild, val);\n    }\n}\n\nint FindKth(Node *now, int rank) {\n    if (!now) {\n        return 0;\n    }\n    int left_size = now->leftchild ? now->leftchild->size - now->leftchild->del: 0;\n    if (rank <= left_size) {\n        return FindKth(now->leftchild, rank);\n    }\n    rank -= left_size;\n    if (rank <= now->cnt - now->tot) {\n        return now->val;\n    }\n    rank -= now->cnt - now->tot;\n    return FindKth(now->rightchild, rank);\n}\n\nint GetPro(Node *now, int val) {\n    if(!now) {\n        return -INF;\n    }\n    if (now->val < val) {\n    \tif (now->cnt > now->tot) {\n            return max(now->val, GetPro(now->rightchild, val));    \t\t\n    \t}\n        return GetPro(now->rightchild, val);\n    }\n    else {\n        return GetPro(now->leftchild, val);\n    }\n}\n\nint GetSuc(Node *now, int val) {\n    if (!now) {\n        return INF;\n    }\n    if (now->val > val) {\n    \tif (now->cnt > now->tot) {\n            return min(now->val, GetSuc(now->leftchild, val));    \t\t\n    \t}\n        return GetSuc(now->leftchild, val);\n    }\n    else {\n        return GetSuc(now->rightchild, val);\n    }\n}\n\n\n\nint n;\n\nint main() {\n    scanf(\"%d\", &n);\n    int _sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int flag, x, numb;\n        scanf(\"%d %d %d\", &numb, &flag, &x);\n        switch(flag) {\n            case 1 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                root[_sum] = Insert(root[_sum], x, root[numb]);\n                break;\n            }\n            case 2 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                root[_sum] = Remove(root[_sum], x, root[numb]);\n                break;\n            }\n            case 3 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                printf(\"%d\\n\", Rank(root[_sum], x));\n                break;\n            }\n            case 4 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                printf(\"%d\\n\", FindKth(root[_sum], x));\n                break;\n            }\n            case 5 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                printf(\"%d\\n\", GetPro(root[_sum], x));\n                break;\n            }\n            case 6 : {\n            \troot[++_sum] = new Node(1, 1);\n            \tCopy(root[_sum], root[numb]);\n                printf(\"%d\\n\", GetSuc(root[_sum], x));\n                break;\n            }\n        }\n    }   \n}\n```",
        "postTime": 1522485214,
        "uid": 49866,
        "name": "\u9f99\u4e4b\u543b\u2014\u6c34\u8d27",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8fd9\u662f\u8fd0\u7528\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u6765\u5b9e\u73b0\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u53ea\u8981\u9898\u76ee**\u4e0d\u5f3a\u5236\u5728\u7ebf**\uff0c\u5e73\u8861\u6811\u7684\u9898\u5927\u591a\u90fd\u80fd\u7528\u4e3b\u5e2d\u6811\u6765\u5b8c\u6210\u3002\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\n\n\u63d2\u5165\uff1a\u6b63\u5e38\u7684\u63d2\u5165\u64cd\u4f5c\u3002\n\n**\u5220\u9664**\uff1a\u5148\u67e5\u627e\u662f\u5426\u5b58\u5728\uff0c\u82e5\u5b58\u5728\u5219\u662f\u6b63\u5e38\u7684\u5220\u9664\u64cd\u4f5c\uff1b\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8d4b\u503c\u5386\u53f2\u7248\u672c\u5230\u5f53\u524d\u7248\u672c\uff08\u5f53\u65f6\u5c31\u662f\u8fd9\u4e00\u6b65\u5fd8\u4e86\u7136\u540e\u4e00\u76f4Wa\u2026\u2026\uff09\n\n\u67e5\u6392\u540d\uff1a\u67e5\u8be2\u5c0f\u4e8ex\u7684\u6570\u7684\u4e2a\u6570\u5e76+1\uff08\u597d\u50cf\u8ddf\u6ca1\u8bf4\u4e00\u6837\uff09\n\n\u67e5\u7b2ck\u5c0f\uff1a\u6b63\u5e38\u64cd\u4f5c\u5373\u53ef\uff0c\u540c\u4e3b\u5e2d\u6811\u677f\u5b50\n\n**\u67e5\u524d\u9a71**\uff1a\u627e\u5230x\u7684\u6392\u540d\uff0c\u82e5\u662f1\u5219\u65e0\u89e3\uff0c\u5426\u5219\u627e\u5230\u6bd4\u5b83\u6392\u540d\u5c0f1\u7684\u6570\uff08\u5373\u7b2c\u6392\u540d-1\u5927\uff09\n\n**\u67e5\u540e\u7ee7**\uff1a\u7a0d\u5fae\u9ebb\u70e6\u4e00\u70b9\uff0c\u9996\u5148\u627e\u5230\u6700\u5c0f\u7684\u6bd4x\u5927\u7684\u6570\u7684\u6392\u540d\uff08\u5f53\u7136\u5982\u679cx\u5728\u79bb\u6563\u5316\u6570\u7ec4\u4e2d\u6700\u5927\u4e00\u70b9\u65e0\u89e3\uff09\uff0c\u7136\u540e\u5982\u679c\u6392\u540d\u7b49\u4e8e\u6570\u7684\u4e2a\u6570+1\u5219\u65e0\u89e3\uff0c\u5426\u5219\u627e\u5230\u7b2c\u6392\u540d\u5927\u7684\u6570\u8f93\u51fa\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nnamespace io {\n\t#define getc() (iS == iT ? (iT = (iS = ibuff) + fread(ibuff, 1, SIZ, stdin), (iS == iT ? EOF : *iS++)) : *iS++)\n    const int SIZ = 1 << 21 | 1;\n    char* iS, * iT, ibuff[SIZ], obuff[SIZ], * oS = obuff, * oT = oS + SIZ - 1, fu[110], c;\n    int fr;\n    inline void out() {\n        fwrite(obuff, 1, oS - obuff, stdout);\n        oS = obuff;\n        return ;\n    }\n    inline void putc (const char x) {\n    \t*oS++ = x;\n    \tout ();\n    \treturn ;\n    }\n    template<typename Type>\n    inline void read(Type& s) {\n        s = 0; int f = 0;\n        c = getc (); while (c < '0' || c > '9') {if (c == '-') f = 1; c = getc ();}\n        while (c >= '0' && c <= '9') s = (s << 3) + (s << 1) + (c ^ 48), c = getc ();\n        s = f ? -s : s; return ;\n    }\n    template<typename Type>\n    inline void write(Type x) {\n        if (x < 0)\n            * oS++ = '-', x = -x;\n        if (!x)\n            * oS++ = '0';\n        while (x)\n            fu[++fr] = x % 10 + '0', x /= 10;\n        while (fr)\n            * oS++ = fu[fr--];\n        out();\n    }\n    inline void put(const char x[]) {\n        for (register int i = 0; x[i]; ++i)\n            * oS++ = x[i];\n        out();\n    }\n}\nusing namespace io;\n\nconst int N = 500003;\nconst char npre[] = {\"-2147483647\\n\"};\nconst char nnxt[] = {\"2147483647\\n\"};\n\nint n, rt[N], a[N], m;\nint sum[N * 150], lc[N * 150], rc[N * 150], cnt;\nstruct query {\n\tint be, op, x;\n}s[N];\n\nint exi (const int v, const int L, const int R, const int x) {\n\tif (!sum[v]) return 0;\n\tif (L == R) return sum[v];\n\tconst int mid = L + R >> 1;\n\tif (mid >= x) return exi (lc[v], L, mid, x);\n\treturn exi (rc[v], mid + 1, R, x);\n}\n\nvoid Insert (const int pr, int& v, const int L, const int R, const int x, const int z) {\n\tv = ++cnt;\n\tlc[v] = lc[pr], rc[v] = rc[pr];\n\tsum[v] = sum[pr] + z;\n\tif (L == R) return ;\n\tconst int mid = L + R >> 1;\n\tif (mid >= x) Insert (lc[pr], lc[v], L, mid, x, z);\n\telse Insert (rc[pr], rc[v], mid + 1, R, x, z);\n\treturn ;\n}\n\nint findrank (const int v, const int L, const int R, const int x) { //\u5982\u679c\u4e0b\u9762\u5df2\u7ecf\u6ca1\u6709\u6570\u6216\u8005\u641c\u5230\u53f6\u5b50\u80af\u5b9a\u8fd4\u56de1\n\tif (!sum[v] || L == R) return 1;\n\tconst int mid = L + R >> 1;\n\tif (mid >= x) return findrank (lc[v], L, mid, x);\n\treturn sum[lc[v]] + findrank (rc[v], mid + 1, R, x);\n} \n\nint findkth (const int v, const int L, const int R, const int num) {\n\tif (L == R) return L;\n\tconst int mid = L + R >> 1, t = sum[lc[v]];\n\tif (t >= num) return findkth (lc[v], L, mid, num);\n\treturn findkth (rc[v], mid + 1, R, num - t);\n} \u627e\u7b2ck\u5927\n\nint main () {\n\tread (n);\n\tint i; for (i = 1; i <= n; ++i) {\n\t\tread (s[i].be), read (s[i].op), read (s[i].x);\n\t\tif (s[i].op != 4) a[++m] = s[i].x;\n\t} //\u79bb\u6563\u5316\u8fc7\u7a0b\n\tsort (a + 1, a + m + 1);\n\tm = unique (a + 1, a + m + 1) - (a + 1);\n\tfor (i = 1; i <= n; ++i) {\n\t\tswitch (s[i].op) {\n\t\t\tcase 1 : {\n\t\t\t\ts[i].x = lower_bound (a + 1, a + m + 1, s[i].x) - a;\n\t\t\t\tInsert (rt[s[i].be], rt[i], 1, m, s[i].x, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2 : {\n\t\t\t\ts[i].x = lower_bound (a + 1, a + m + 1, s[i].x) - a;\n\t\t\t\tif (exi (rt[s[i].be], 1, m, s[i].x)) Insert (rt[s[i].be], rt[i], 1, m, s[i].x, -1);\n\t\t\t\telse rt[i] = rt[s[i].be];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3 : {\n\t\t\t\ts[i].x = lower_bound (a + 1, a + m + 1, s[i].x) - a;\n\t\t\t\trt[i] = rt[s[i].be];\n\t\t\t\twrite (findrank (rt[i], 1, m, s[i].x)), putc ('\\n');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4 : {\n\t\t\t\trt[i] = rt[s[i].be];\n\t\t\t\twrite (a[findkth (rt[i], 1, m, s[i].x)]), putc ('\\n');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 5 : {\n\t\t\t\ts[i].x = lower_bound (a + 1, a + m + 1, s[i].x) - a;\n\t\t\t\trt[i] = rt[s[i].be];\n\t\t\t\tint t = findrank (rt[i], 1, m, s[i].x);\n\t\t\t\tif (t == 1) put (npre);\n\t\t\t\telse write (a[findkth (rt[i], 1, m, t - 1)]), putc ('\\n');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 6 : {\n\t\t\t\ts[i].x = lower_bound (a + 1, a + m + 1, s[i].x) - a;\n\t\t\t\trt[i] = rt[s[i].be];\n\t\t\t\tif (s[i].x == m) put (nnxt);\n\t\t\t\telse {\n\t\t\t\t\tint t = findrank (rt[i], 1, m, s[i].x + 1);\n\t\t\t\t\tif (t == sum[rt[i]] + 1) put (nnxt);\n\t\t\t\t\telse write (a[findkth (rt[i], 1, m, t)]), putc ('\\n');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572351258,
        "uid": 31193,
        "name": "\u68a7\u6850\u706f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6765\u4e00\u4efd\u53ef\u6301\u4e45\u531601trie\u7684\u9898\u89e3\u5427  \n\u867d\u7136\u5df2\u7ecf\u6709\u4e00\u7bc701trie\u7684\u9898\u89e3\u4e86\uff0c\u4f46\u4e2a\u4eba\u89c9\u5f97\u90a3\u4e00\u7bc7\u9898\u89e3\u8fd8\u6709\u5f88\u5927\u6539\u8fdb\u7684\u5730\u65b9\uff08\u4e3b\u8981\u662f\u4ee3\u7801\u590d\u6742\u5ea6\uff09  \n\u4e3b\u8981\u601d\u8def\u5c31\u662f\u7528\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u7684\u65b9\u6cd5\u66f4\u65b0\u5373\u53ef\uff0c\u9002\u5f53\u5229\u7528\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u91cf \uff08PS:\u4e4b\u524d\u7684\u9898\u89e3\u4ee3\u7801\u884c\u6570\u662f\u6211\u7684\u4e24\u500d  \n\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f$O(nlogv)$\uff0c\u867d\u7136\u4e0d\u80fd\u5904\u7406\u533a\u95f4\u64cd\u4f5c\uff0c\u4f46\u662f\u77ed\u5440\uff0c\u800c\u4e14\u53ef\u4ee5\u5904\u7406\u6709\u5173\u5f02\u6216\u7684\u95ee\u9898\uff0c\u5982P4735  \n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+5,inf=1e9;\ninline int read(){\n    int s=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)) s=s*10+ch-'0',ch=getchar();\n    return s*f;\n}\nint tot=0;\nint rt[N],ch[N*32][2],siz[N*32];\ninline void ins(int &rt,int pre,int v){\n    v=v+inf;rt=++tot;\n    siz[rt]=siz[pre]+1;\n    int prt=rt;\n    for(int i=31;i>=0;i--){\n        int t=(v>>i)&1;\n        ch[prt][t]=++tot;\n        ch[prt][t^1]=ch[pre][t^1];\n        prt=ch[prt][t],pre=ch[pre][t];\n        siz[prt]=siz[pre]+1;\n    }\n}\ninline void del(int &rt,int pre,int v){\n    v+=inf;\n    int p=pre;\n    for(int i=31;i>=0;i--){\n        int t=(v>>i)&1;\n        p=ch[p][t];\n        if(!siz[p]) {rt=pre;return;}\n    }\n    rt=++tot;int prt=rt;\n    siz[rt]=siz[pre]-1;\n    for(int i=31;i>=0;i--){\n        int t=(v>>i)&1;\n        ch[prt][t]=++tot;\n        ch[prt][t^1]=ch[pre][t^1];\n        prt=ch[prt][t],pre=ch[pre][t];\n        siz[prt]=siz[pre]-1;\n    }\n}\ninline int rnk(int rt,int x){\n    x+=inf;int ans=0;\n    for(int i=31;i>=0;i--){\n        if((x>>i)&1) ans+=siz[ch[rt][0]],rt=ch[rt][1];\n        else rt=ch[rt][0];\n    }\n    return ans;\n}\ninline int kth(int rt,int x){\n    int ans=0;\n    for(int i=31;i>=0;i--){\n        if(x>siz[ch[rt][0]]) ans|=(1<<i),x-=siz[ch[rt][0]],rt=ch[rt][1];\n        else rt=ch[rt][0];\n    }\n    return ans-inf;\n}\nint main(){\n    ins(rt[0],rt[0],-inf);\n    ins(rt[0],rt[0],inf);\n    int n=read();\n    int v,opt,x;\n    for(int i=1;i<=n;i++){\n        v=read(),opt=read(),x=read();\n        if(opt==1) ins(rt[i],rt[v],x);\n        else if(opt==2) del(rt[i],rt[v],x);\n        else if(opt==3) rt[i]=rt[v],printf(\"%d\\n\",rnk(rt[i],x));\n        else if(opt==4) rt[i]=rt[v],printf(\"%d\\n\",kth(rt[i],x+1));\n        else if(opt==5){\n        \trt[i]=rt[v];\n        \tint t=kth(rt[i],rnk(rt[i],x));\n        \tif(t!=-inf) printf(\"%d\\n\",t);\n        \telse puts(\"-2147483647\"); \n        }else {\n            rt[i]=rt[v];\n            int t=kth(rt[i],rnk(rt[i],x+1)+1);\n            if(t!=inf) printf(\"%d\\n\",t);\n        \telse puts(\"2147483647\"); \n        }\n    }\n    return 0;\n}\n```\t",
        "postTime": 1549711963,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u6628\u5929\u665a\u4e0a\u7528zkw\u7ebf\u6bb5\u6811\u8fc7\u4e86[P3369\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\uff0c\u7a81\u7136\u610f\u8bc6\u5230\u5982\u679c\u8ba9\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e0d\u5c31\u53ef\u4ee5\u8fc7\u8fd9\u9053\u9898\u4e86\u5417\uff01\u4e8e\u662f\u6211\u5c31\u628a\u8fd9\u9053\u9898A\u4e86\u3002\u3002\u3002\n\n\u770b\u5230\u9898\u89e3\u91cc\u679c\u7136\u5df2\u7ecf\u6709\u4eba\u7528\u7ebf\u6bb5\u6811\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u7684\u7528\u6cd5\u8fd8\u662f\u7565\u6709\u4e0d\u540c\uff0c\u6211\u662f\u5c06\u8bfb\u5165\u7684\u6570\u636e\u79bb\u6563\u5316\u7684\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u5f88\u7b80\u5355\u3002\u8bbef[x]\u8868\u793ax\u8fd9\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff1a\n\n- \u63d2\u5165\u4e00\u4e2a\u6570\uff1a++f[x]\n\n- \u5220\u9664\u4e00\u4e2a\u6570\uff1a--f[x]\n\n- \u67e5\u8be2\u4e00\u4e2a\u6570\u7684\u6392\u540d\uff1a\u6c42\u524d\u7f00\u548c\n\n- \u67e5\u8be2\u7b2ck\u5c0f\uff1a\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\n\n- \u524d\u9a71\u3001\u540e\u7ee7\uff1a\u8f6c\u5316\u4e3a\u5148\u67e5\u8be2\u6392\u540d\u518d\u67e5\u8be2\u7b2ck\u5c0f\u3002\uff08\u6628\u665a\u505a\u666e\u901a\u5e73\u8861\u6811\u7684\u65f6\u5019\u662f\u7528zkw\u5199\u7684\uff0c\u524d\u9a71\u548c\u540e\u7ee7\u5c31\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4f46\u662f\u8fd9\u9898\u8981\u53ef\u6301\u4e45\u5316\uff0c\u5f97\u52a8\u6001\u5f00\u70b9\uff0c\u4e3a\u4e86\u907f\u514d\u9ebb\u70e6\u5c31\u8fd9\u6837\u5199\u4e86\uff09\n\n\u6240\u4ee5\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u53ea\u8981\u7ef4\u62a4f\u6570\u7ec4\u7684\u533a\u95f4\u548c\u5c31\u884c\u4e86\uff01\n\n\u8fd9\u9898\u8981\u53ef\u6301\u4e45\u5316\uff0c\u90a3\u4e48\u53ea\u8981\u5bf9\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u5c31\u597d\u4e86\uff0c\u975e\u5e38\u7b80\u5355\u3002\n\n\u53e6\u5916\uff0c\u5343\u4e07\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u4e8b\u60c5\u5c31\u662f\u672c\u9898\u76842\u64cd\u4f5c\u4e0d\u4fdd\u8bc1\u88ab\u5220\u9664\u7684\u6570\u5b58\u5728\uff0c\u6240\u4ee5sum\u6570\u7ec4\u7684\u7ef4\u62a4\u4e00\u5b9a\u8981\u4ed4\u7ec6\u8003\u8651\u3002\u6211\u4e00\u5f00\u59cb\u5c31\u662f\u5728\u8fd9\u4e2a\u5730\u65b9WA\u5230\u53ea\u670928\u5206\uff0c\u7136\u540e\u7b2c\u4e00\u6b21\u6539\u5b8c\u4f9d\u7136\u53ea\u670980\u5206\uff0c\u53c8\u9759\u6001\u67e5\u9519\u4e86\u597d\u4e45\u624d\u53d1\u73b0\u95ee\u9898\u3002\n\n```cpp\n// C++11\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...);\n}\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define rrep(I, A, B) for (int I = (A); I >= (B); --I)\n\nconst int maxn = 5e5 + 100;\nstruct Command {\n    int v, q, x;\n    explicit Command(int vv = 0, int qq = 0, int xx = 0)\n        : v(vv), q(qq), x(xx) {}\n};\nCommand cmd[maxn];\nint tmp[maxn];\nint root[maxn], sum[maxn * 40], left[maxn * 40], right[maxn * 40];\nint n, tot, all;\n\nvoid build(int &curr, int l, int r) {\n    curr = ++tot;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    build(left[curr], l, mid);\n    build(right[curr], mid + 1, r);\n}\nvoid insert(int &curr, int pre, int l, int r, int x, int val) {\n    curr = ++tot;\n    sum[curr] = sum[pre];\n    if (l == r) {\n        sum[curr] += val;\n        if (sum[curr] < 0) sum[curr] = 0;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (x <= mid) {\n        right[curr] = right[pre];\n        insert(left[curr], left[pre], l, mid, x, val);\n    } else {\n        left[curr] = left[pre];\n        insert(right[curr], right[pre], mid + 1, r, x, val);\n    }\n    sum[curr] = sum[left[curr]] + sum[right[curr]];\n}\nint querySum(int curr, int l, int r, int x) {\n    if (x < l) return 0;\n    if (x >= r) return sum[curr];\n    int mid = (l + r) >> 1;\n    return querySum(left[curr], l, mid, x) + querySum(right[curr], mid + 1, r, x);\n}\nint queryKth(int curr, int l, int r, int k) {\n    if (l == r) return l;\n    int mid = (l + r) >> 1;\n    if (k <= sum[left[curr]])\n        return queryKth(left[curr], l, mid, k);\n    else\n        return queryKth(right[curr], mid + 1, r, k - sum[left[curr]]);\n}\ninline int queryPrev(int v, int x) {\n    int lessthan = querySum(root[v], 1, all, x - 1);\n    if (!lessthan) return -2147483647;\n    else return tmp[queryKth(root[v], 1, all, lessthan)];\n}\ninline int querySucc(int v, int x) {\n    int lesseq = querySum(root[v], 1, all, x);\n    if (lesseq >= sum[root[v]]) return 2147483647;\n    else return tmp[queryKth(root[v], 1, all, lesseq + 1)];\n}\n\nint main() {\n    read(n);\n    rep(i, 1, n) {\n        read(cmd[i].v, cmd[i].q, cmd[i].x);\n        if (cmd[i].q != 4)\n            tmp[++all] = cmd[i].x;\n    }\n    std::sort(tmp + 1, tmp + all + 1);\n    all = std::unique(tmp + 1, tmp + all + 1) - (tmp + 1);\n\n    build(root[0], 1, all);\n\n    rep(i, 1, n) {\n        int v = cmd[i].v, q = cmd[i].q, x = cmd[i].x;\n        if (q != 4)\n            x = std::lower_bound(tmp + 1, tmp + all + 1, x) - tmp;\n        root[i] = root[v];\n        switch (q) {\n            case 1:\n                insert(root[i], root[v], 1, all, x, 1);\n                break;\n            case 2:\n                insert(root[i], root[v], 1, all, x, -1);\n                break;\n            case 3:\n                printf(\"%d\\n\", querySum(root[i], 1, all, x - 1) + 1);\n                break;\n            case 4:\n                printf(\"%d\\n\", tmp[queryKth(root[i], 1, all, x)]);\n                break;\n            case 5:\n                printf(\"%d\\n\", queryPrev(i, x));\n                break;\n            case 6:\n                printf(\"%d\\n\", querySucc(i, x));\n                break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1532401504,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "   \u8fd9\u4e2a\u9898\u76ee\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\u7684\u8981\u6c42\uff0c\u8003\u8651\u79bb\u7ebf\u7b97\u6cd5\u3002\u7531\u4e8e\u6240\u6709\u7684\u8be2\u95ee\u6784\u6210\u4e00\u4e2a\u6811\uff0c\u56e0\u6b64\u53ea\u9700\u6309\u7167\u8be2\u95ee\u7684\u903b\u8f91\u5173\u7cfb\u52a0\u4e0a\u6709\u5411\u8fb9\u53ef\u4ee5\u3002\u5bf9\u4e8e\u67e5\u8be2\u6392\u540d\uff0c\u524d\u9a71\uff0c\u540e\u7ee7\u65f6\uff0c\u8003\u8651\u6700\u5feb\u7684\u6743\u503c\u6811\u72b6\u6570\u7ec4\u7684\u89e3\u6cd5\u3002\n   \n   \u56e0\u6b64\uff0c\u9700\u8981\u9996\u5148\u8bfb\u5165\u6240\u6709\u9664\u64cd\u4f5c4\u4e4b\u5916\u7684\u6570\uff0c\u7136\u540e\u6392\u5e8f\u505a\u79bb\u6563\u5316\u64cd\u4f5c\uff0c\u5efa\u7acb\u4e00\u9897\u6743\u503c\u6811\u72b6\u6570\u7ec4\u3002\n   \n   \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u9700\u8981\u5728\u6743\u503c\u6811\u72b6\u6570\u7ec4\u52a0\u5165+1\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u56de\u6eaf\u65f6\u8fdb\u884c-1\u7684\u64cd\u4f5c\u3002\n   \n   \u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u7531\u4e8e\u5220\u9664\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u9700\u8981\u5148\u67e5\u8be2\u5bf9\u5e94\u6743\u503c\u6811\u72b6\u6570\u7ec4\u5728\u8be5\u70b9\u7684\u6743\u503c\u662f\u5426\u4e3a0\u3002\u5982\u679c\u4e0d\u662f0\uff0c\u9700\u8981\u5728\u6743\u503c\u6811\u72b6\u6570\u7ec4\u52a0\u5165-1\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u56de\u6eaf\u65f6\u8fdb\u884c+1\u7684\u64cd\u4f5c\u3002\u5982\u679c\u4e3a0\u5219\u5ffd\u7565\u8be5\u6b21\u64cd\u4f5c\u3002\n   \n   \u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u7b80\u5355\u4e00\u4e2a\u524d\u7f00\u548c\u5373\u53ef\u641e\u5b9a\u3002\n   \n   \u5bf9\u4e8e\u64cd\u4f5c4\uff0c\u9700\u8981\u7528\u500d\u589e\u6c42\u4e00\u4e2a\u7ed9\u5b9a\u7684\u524d\u7f00\u548c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u8be5\u4f4d\u7f6e\u7684\u6743\u503c\u4e0d\u4e3a0\uff0c\u90a3\u4e48\u8f93\u51fa\u539f\u59cb\u6570\u636e\u3002\u5426\u5219\u5ffd\u7565\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u3002\n   \n   \u64cd\u4f5c5\u4e0e\u64cd\u4f5c6\u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u7684\u64cd\u4f5c\u7ec4\u5408\u51fa\u6765\uff0c\u6ce8\u610f\u627e\u524d\u9a71\u4e0e\u627e\u540e\u7ee7\u7684\u76f8\u5173\u7ec6\u8282\u662f\u4e0d\u540c\u7684\uff0c\u4e3b\u8981\u662f\u8003\u8651\u5230\u67d0\u4e9b\u4f4d\u7f6e\u7684\u6743\u503c\u4e3a0\u3002\u5e76\u4e14\u6ce8\u610f\uff0c\u627e\u5230\u4f4d\u7f6e\u540e\uff0c\u90fd\u9700\u8981\u67e5\u770b\u76f8\u5e94\u4f4d\u7f6e\u7684\u6743\u503c\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u9700\u8981\u8f93\u51faINT_MIN or INT_MAX\u3002\n   \n   \u79bb\u7ebf\u6743\u503c\u6811\u72b6\u6570\u636e\u6700\u5927\u7684\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u5927\u6982\u662f370ms\uff0c\u6700\u5927\u6d88\u8017\u5185\u5b5825MB\uff0c\u6bd4\u5404\u79cd\u53ef\u6301\u4e45\u5e73\u8861\u6811\uff0c\u79bb\u7ebf\u5e73\u8861\u6811\u7684\u505a\u6cd5\u90fd\u8981\u5feb\u5e76\u4e14\u7701\u5185\u5b58\u3002\n   \n   \u4ee3\u7801\u5982\u4e0b\uff1a\n   ```cpp\n#include <stdint.h>\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n\nusing namespace std;\n\n#define LOCAL 0\n#define MAXN 500000\n\nconst int32_t kInf = (1u<<31)-1;\n\nstruct Edge {\n  int vertex;\n  int next;\n};\n\nint buffer[MAXN+1];\nint cnt;\nint bit_tree[MAXN+1];\nuint32_t query_id = 0;  //0 is not used\n//vertex id is from 0~n\nint head[MAXN+1];\nEdge edge[MAXN+1];  //directed tree\nint ans[MAXN+1];\nint op[MAXN+1];\nint val[MAXN+1];\n\nint PrefixSum(int index)\n{\n  int sum = 0;\n  while (index!=0) {\n    sum += bit_tree[index];\n    index -= (index & (-index));\n  }\n  return sum;\n}\n\nvoid UpdateSum(int n, int index, int add)\n{\n  while (index <= n) {\n    bit_tree[index] += add;\n    index += (index & (-index));\n  }\n}\n\nint GetValue(int index)\n{\n  int val;\n  int lca;\n  lca = index - (index & (-index));\n  val = bit_tree[index];\n  --index;\n  while (index!=lca) {\n    val -= bit_tree[index];\n    index -= (index & (-index));\n  }\n  return val;\n}\n\nint FindIndex(int n, int prefix_sum)\n{\n  int index, try_index, mask;\n  uint32_t num = n;\n  num |= num>>1;\n  num |= num>>2;\n  num |= num>>4;\n  num |= num>>8;\n  num |= num>>16;\n  mask = num - (num>>1);\n  index = 0;\n  while (mask != 0) {\n    try_index = index+mask;\n    if (try_index<=n && bit_tree[try_index]<prefix_sum) {\n      prefix_sum -= bit_tree[try_index];\n      index = try_index;\n    }\n    mask >>= 1;\n  }\n  return index+1;\n}\n\n//edge x->y\nvoid AddEdge(int x, int y)\n{\n  ++query_id;\n  edge[query_id].vertex = y;\n  edge[query_id].next = head[x];\n  head[x] = query_id;\n}\n\nvoid PersistentBitQuery(int x)\n{\n  int idx, y, index;\n  uint32_t rank;\n  int freq;\n  idx = head[x];\n  while (idx!=0) {\n    y = edge[idx].vertex;\n    switch (op[y]) {\n    case 1:\n      index = lower_bound(buffer, buffer+cnt, val[y]) - buffer;\n      ++index;  //index start from 1\n      UpdateSum(cnt, index, 1);\n      break;\n    case 2:\n      index = lower_bound(buffer, buffer+cnt, val[y]) - buffer;\n      ++index;  //index start from 1\n      freq = GetValue(index);\n      if (freq != 0) {\n        UpdateSum(cnt, index, -1);\n      }\n      break;\n    case 3:\n      index = lower_bound(buffer, buffer+cnt, val[y]) - buffer;\n      rank = PrefixSum(index);\n      ans[y] = rank+1;\n      break;\n    case 4:\n      index = FindIndex(cnt, val[y]);\n      freq = GetValue(index);\n      if (freq!=0) {\n        --index;\n        ans[y] = buffer[index];\n      }\n      break;\n    case 5:\n      index = lower_bound(buffer, buffer+cnt, val[y]) - buffer;\n      rank = PrefixSum(index);\n      index = FindIndex(cnt, rank);\n      freq = GetValue(index);\n      if (freq!=0) {\n        --index;\n        ans[y] = buffer[index];\n      } else {\n        ans[y] = -kInf;\n      }\n      break;\n    case 6:\n      index = lower_bound(buffer, buffer+cnt, val[y]) - buffer;\n      rank = PrefixSum(index+1);\n      index = FindIndex(cnt, rank+1);\n      freq = GetValue(index);\n      if (freq!=0) {\n        --index;\n        ans[y] = buffer[index];\n      } else {\n        ans[y] = kInf;\n      }\n      break;\n    }\n    PersistentBitQuery(y);\n    switch (op[y]) {\n    case 1:\n      UpdateSum(cnt, index, -1);\n      break;\n    case 2:\n      if (freq != 0) {\n        UpdateSum(cnt, index, 1);\n      }\n      break;\n    default:\n      break;\n    }\n    idx = edge[idx].next;\n  }\n}\n\nint ReadInteger(void)\n{\n  int x = 0, sign = 1;\n  int ch;\n  ch = getchar();\n  while (ch<'0' || ch>'9') {\n    if (ch == '-') {\n      sign = -1;\n    }\n    ch = getchar();\n  }\n  while (ch>='0' && ch<='9') {\n    x = x*10 + ch-'0';\n    ch = getchar();\n  }\n  return x*sign;\n}\n\nint main(void)\n{\n#if LOCAL\n  freopen(\"test.in\", \"r\", stdin);\n  freopen(\"test.out\", \"w\", stdout);\n#endif\n  int n;\n  int i, j;\n  n = ReadInteger();\n  memset(head, 0, (n+1)*sizeof(head[0]));\n  query_id = 0;\n  edge[query_id].vertex = 0;\n  edge[query_id].next = 0;\n  for (i=1; i<=n; ++i) {\n    j = ReadInteger();\n    op[i] = ReadInteger();\n    val[i] = ReadInteger();\n    if (op[i]!=4) {\n      buffer[cnt] = val[i];\n      ++cnt;\n    }\n    AddEdge(j, i);\n  }\n  sort(buffer, buffer+cnt);\n  cnt = unique(buffer, buffer+cnt)-buffer;\n  memset(bit_tree, 0, (1+cnt)*sizeof(bit_tree[0]));\n  PersistentBitQuery(0);\n  for (i=1; i<=n; ++i) {\n    if (op[i]!=1 && op[i]!=2) {\n      printf(\"%d\\n\", ans[i]);\n    }\n  }\n  return 0;\n}\n```\n",
        "postTime": 1590039597,
        "uid": 119884,
        "name": "damocris",
        "ccfLevel": 0,
        "title": "P3835  \u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 \u79bb\u7ebf\u505a\u6cd5"
    },
    {
        "content": "\u8bdd\u8bf4\u4f60\u4eec\u662f\u5bf9\u6307\u9488\u7248\u7684\u4e3b\u5e2d\u6811\u6709\u4ec0\u4e48\u610f\u89c1\u5417\uff1f\n\n\u4e3a\u4ec0\u4e48\u9898\u89e3\u91cc\u9762\u7684\u4e3b\u5e2d\u6811\u6ca1\u4e00\u4e2a\u662f\u7528\u6307\u9488\u7684\uff1f\n\n\u90a3\u6211\u5c31\u53d1\u4e00\u6ce2\u5427\u2026\u2026\n\n20200121 UPD:\u66f4\u6b63\u4e86\u4e00\u4e2a\u4e25\u91cd\u9519\u8bef\n# \u5927\u81f4\u601d\u8def\n\u524d\u7f6e\u829d\u58eb\uff1a[\u4e3b\u5e2d\u6811](https://www.luogu.com.cn/problem/P3834)\n\n~~\u4f17\u6240\u5468\u77e5~~\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u53ef\u91cd\u96c6\uff0c\u5e76\u5728 $O(logn)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u5168\u5c40\u7b2c $k$ \u5927\u3001\u524d\u7f00\u548c\u3001\u63d2\u5165\u3001\u5220\u9664\u7b49\u4e8b\u60c5\uff0c\u53ef\u4ee5\u66ff\u4ee3\u4e00\u4e9b\u666e\u901a\u5e73\u8861\u6811\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u5b8c\u6210\u6b64\u9898\u3002\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684**\u6570\u503c\u533a\u95f4**\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u53ef\u6301\u4e45\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5199\u4e3b\u5e2d\u6811\u8282\u7701\u7a7a\u95f4\uff0c\u4e0d\u5fc5\u6bcf\u4e2a\u64cd\u4f5c\u518d\u5efa\u4e00\u9897\u3002\n\n\u6570\u636e\u8303\u56f4 $|x_i|\\le10^9$ \u544a\u8bc9\u6211\u4eec\u8981\u79bb\u6563\u5316\uff08\u5f53\u7136\u53ef\u4ee5\u5199\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u800c\u6211\u4e0d\u4f1a\u2026\u2026\uff09\n# \u4ee3\u7801\u5206\u6790\n~~\u61d2\u5f97\u5199\u6ce8\u91ca\u76f4\u63a5\u8bb2\u5427~~\n## \u53d8\u91cf\u5b9a\u4e49\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint data;\n\tnode*left,*righ;\n}*root[500011];\nstruct opts\n{\n\tint numb,from,opti,frnu,gonu;\n} czli[500011];\nint n,a,b,stef[500011];\nbool cmp1(opts a,opts b)\n{\n\treturn a.frnu<b.frnu;\n}\nbool cmp2(opts a,opts b)\n{\n\treturn a.numb<b.numb;\n}\n```\n\n```node``` \u662f\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u3002```data``` \u662f\u6b64\u8282\u70b9\u7ef4\u62a4\u7684**\u6570\u503c**\u533a\u95f4\u5185\u7684\u6570\u7684\u4e2a\u6570\uff0c```left``` \u548c ```righ``` \u662f\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u6307\u9488\u3002```root``` \u662f\u6bcf\u6b21\u64cd\u4f5c\u540e\u6811\u6839\u7684\u6307\u9488\u3002\n\n```opts``` \u7528\u6765\u79bb\u6563\u5316\u3002```numb``` \u662f\u64cd\u4f5c\u5e8f\u53f7\uff0c```from```\u3001```opti``` \u548c ```frnu``` \u662f\u9898\u76ee\u7ed9\u51fa\u7684 $v_i$\u3001$opt_i$ \u548c $x_i$\uff0c```gonu``` \u662f\u79bb\u6563\u5316\u540e\u6b64\u7ed3\u6784\u4f53\u4ee3\u8868\u7684\u6570\u3002\n\n```n``` \u5c31\u662f\u9898\u76ee\u7ed9\u51fa\u7684 $n$\uff0c```a``` \u548c ```b``` \u662f\u79bb\u6563\u5316\u540e ```gonu``` \u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08\u6240\u4ee5 ```a``` \u8861\u4e3a $1$\uff09\uff0c```stef``` \u7ef4\u62a4\u6bcf\u4e2a ```gonu``` \u6240\u4ee3\u8868\u7684 ```frnu```\u3002\n\n```cmp1``` \u548c ```cmp2``` \u5728\u4ee5\u540e\u6392\u5e8f\u4e2d\u4f7f\u7528\u3002\n## \u79bb\u6563\u5316\n```cpp\nscanf(\"%d\",&n);\nfor(int i=1; i<=n; czli[i].numb=++i)\n\tscanf(\"%d%d%d\",&czli[i].from,&czli[i].opti,&czli[i].frnu);\nsort(czli+1,czli+n+1,cmp1);\nfor(int i=1; i<=n; ++i)\n\tstef[czli[i].gonu=czli[i-1].gonu+(czli[i].frnu!=czli[i-1].frnu)]=czli[i].frnu;\nroot[0]=build(a=czli[1].gonu,b=czli[n].gonu);\nsort(czli+1,czli+n+1,cmp2);\n```\n~~\u5927\u5bb6\u90fd\u4f1a\u5427\u90a3\u6211\u4e0d\u8bf4\u4e86\u3002~~\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee ```build``` \u662f\u4ec0\u4e48\uff0c\u5b83\u5728\u540e\u9762\uff1a\n## \u5efa\u6811\n```cpp\nnode*build(int l,int r)\n{\n\tnode*s=new node;\n\ts->data=0;\n\tif(l==r)\n\t\ts->left=s->righ=NULL;\n\telse if(l!=r)\n\t{\n\t\ts->left=build(l,l+r>>1);\n\t\ts->righ=build((l+r>>1)+1,r);\n\t}\n\treturn s;\n}\n```\n\u7531\u4e8e\u4e00\u5f00\u59cb\u53ef\u91cd\u96c6\u91cc\u6ca1\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u5efa\u4e86\u4e00\u9897 ```data``` \u5168\u662f $0$ \u7684\u6811\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u7684\u7ed3\u6784\u4f53\u91cc\u6ca1\u5b58\u8282\u70b9\u4ee3\u8868\u7684**\u6570\u503c**\u533a\u95f4\uff0c\u6240\u4ee5\u8fd9\u91cc\u4ee5\u53ca\u63a5\u4e0b\u6765\u7684**\u6570\u503c**\u533a\u95f4\u90fd\u7531\u4f20\u53c2\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\n## \u64cd\u4f5c1&2\n```cpp\ninline int maxn(int a,int b)\n{\n\treturn a>b?a:b;\n}\nnode*opt1_2(node*f,int x,int l,int r,int k)\n{\n\tnode*s=new node;\n\tif(l==x&&x==r)\n\t{\n\t\ts->left=s->righ=NULL;\n\t\ts->data=maxn(f->data+k,0);\n\t}\n\telse if(l<=x&&x<=l+r>>1)\n\t{\n\t\ts->left=opt1_2(f->left,x,l,l+r>>1,k);\n\t\ts->righ=f->righ;\n\t\ts->data=s->left->data+s->righ->data;\n\t}\n\telse if((l+r>>1)+1<=x&&x<=r)\n\t{\n\t\ts->left=f->left;\n\t\ts->righ=opt1_2(f->righ,x,(l+r>>1)+1,r,k);\n\t\ts->data=s->left->data+s->righ->data;\n\t}\n\treturn s;\n}\n```\n\u6211\u4eec\u4f1a\u53d1\u73b0\u64cd\u4f5c $1$ \u548c\u64cd\u4f5c $2$ \u5341\u5206\u50cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u4ee5 ```k``` \u533a\u5206\uff0c```k``` \u4e3a $1$ \u65f6\u4e3a\u64cd\u4f5c $1$\uff0c```k``` \u4e3a $-1$ \u65f6\u4e3a\u64cd\u4f5c $2$\u3002\n\n\u7b2c $1$ \u4e2a ```if``` \u5904\u7406\u9012\u5f52\u5230\u53f6\u8282\u70b9\uff0c\u7b2c $2$ \u4e2a ```else if``` \u5904\u7406\u5f80\u5de6\u5b50\u6811\u9012\u5f52\uff0c\u7b2c $3$ \u4e2a ```else if``` \u5904\u7406\u5f80\u53f3\u5b50\u6811\u9012\u5f52\u3002\uff08\u4e0b\u540c\uff09\n\n\u7531\u4e8e\u6709\u65f6\u64cd\u4f5c $2$ \u7684\u6570\u53ef\u4ee5\u4e0d\u5b58\u5728\uff0c\u6b64\u65f6 ```s``` \u7684 ```data``` \u4e3a $0$\uff0c\u6240\u4ee5\u53d1\u73b0\u53f6\u8282\u70b9\u7684 ```data``` \u4e3a $-1$\n\u65f6\u8981\u53ca\u65f6\u8d4b\u4e3a $0$\u3002\n\n```f``` \u662f\u539f\u6811\u4e0a\u7684\u6b64\u65f6\u8981\u5efa\u7684\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u6307\u9488\u3002\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u770b\u56fe\uff1a\n![\u4e3b\u5e2d\u6811](https://cdn.luogu.com.cn/upload/image_hosting/kyahf30y.png)\n\n\u518d\u4e0d\u7406\u89e3\u5c31\u53bb\u505a[\u6a21\u677f](https://www.luogu.com.cn/problem/P3834)\u5427\u2026\u2026\n## \u64cd\u4f5c3&4\n```cpp\nint opt3(node*f,int x,int l,int r)\n{\n\tif(l==x&&x==r)\n\t\treturn 1;\n\telse if(l<=x&&x<=l+r>>1)\n\t\treturn opt3(f->left,x,l,l+r>>1);\n\telse if((l+r>>1)+1<=x&&x<=r)\n\t\treturn f->left->data+opt3(f->righ,x,(l+r>>1)+1,r);\n}\nint opt4(node*f,int x,int l,int r)\n{\n\tif(l==r)\n\t\treturn l;\n\telse if(1<=x&&x<=f->left->data)\n\t\treturn opt4(f->left,x,l,l+r>>1);\n\telse if(f->left->data+1<=x&&x<=f->data)\n\t\treturn opt4(f->righ,x-f->left->data,(l+r>>1)+1,r);\n}\n```\n\u6ce8\u610f ```opt3``` \u7684\u8fd4\u56de\u503c\u662f\u5728\u4ee5 ```f``` \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u67e5\u8be2 ```x``` \u7684\u6392\u540d\u3002 \n\n\u800c\u4e14 ```opt4``` \u4e2d\u7684 ```x``` \u8868\u793a\u7684\u662f\u5728\u4ee5 ```f``` \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u67e5\u627e\u7b2c $x$ \u5927\u7684\u6570\uff0c\u800c\u975e\u5168\u5c40\u3002\n## \u64cd\u4f5c5&6\n```cpp\nint help(node*f,int x,int l,int r)\n{\n\tif(l==x&&x==r)\n\t\treturn f->data;\n\telse if(l<=x&&x<=l+r>>1)\n\t\treturn help(f->left,x,l,l+r>>1);\n\telse if((l+r>>1)+1<=x&&x<=r)\n\t\treturn help(f->righ,x,(l+r>>1)+1,r);\n}\nint opt5(node*f,int x,int l,int r)\n{\n\tint s=opt3(f,x,l,r)-1;\n\tif(s==0)\n\t\treturn INT_MIN;\n\telse\n\t\treturn opt4(f,s,l,r);\n}\nint opt6(node*f,int x,int l,int r)\n{\n\tint s=opt3(f,x,l,r)-1,p=help(f,x,l,r);\n\tif(s==r)\n\t\treturn INT_MAX;\n\telse\n\t\treturn opt4(f,s+p+1,l,r);\n}\n```\n```help``` \u7528\u6765\u627e ```x``` \u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\n\u5177\u4f53\u601d\u8def\u662f\u627e\u5230\u6b64\u6570\u7684\u6392\u540d\uff0c\u7136\u540e\u8fd4\u56de\u6bd4\u5b83\u6392\u540d\u5c0f\u6216\u5927\u7684\u6570\u3002\n\n\uff08\u8bdd\u8bf4\u6211\u521a\u5f00\u59cb\u628a\u64cd\u4f5c $6$ \u5199\u6210[\u8fd9\u6837](https://www.luogu.com.cn/record/30259012)\u548c[\u8fd9\u6837](https://www.luogu.com.cn/record/30297820)$AC$\u4e86\uff1f\u7ba1\u7406\u52a0\u5f3a\u4e00\u4e0b\u6570\u636e\u5427\u2026\u2026\uff09\n## \u6c47\u603b\n```cpp\nint k;\nfor(int i=1; i<=n; ++i)\n{\n\tif(czli[i].opti==1)\n\t\troot[i]=opt1_2(root[czli[i].from],czli[i].gonu,a,b,1);\n\telse if(czli[i].opti==2)\n\t\troot[i]=opt1_2(root[czli[i].from],czli[i].gonu,a,b,-1);\n\telse if(czli[i].opti==3)\n\t\tprintf(\"%d\\n\",opt3(root[i]=root[czli[i].from],czli[i].gonu,a,b));\n\telse if(czli[i].opti==4)\n\t\tprintf(\"%d\\n\",stef[opt4(root[i]=root[czli[i].from],czli[i].frnu,a,b)]);\n\telse if(czli[i].opti==5)\n\t\tprintf(\"%d\\n\",(k=opt5(root[i]=root[czli[i].from],czli[i].gonu,a,b))==INT_MIN?INT_MIN:stef[k]);\n\telse if(czli[i].opti==6)\n\t\tprintf(\"%d\\n\",(k=opt6(root[i]=root[czli[i].from],czli[i].gonu,a,b))==INT_MAX?INT_MAX:stef[k]);\n}\n```\n\u4e5f\u4e0d\u7528\u8bf4\u4e86\u5427\u3002\n\n\u6ce8\u610f\u64cd\u4f5c $4$ \u7684 $x$ \u662f ```frnu``` \u800c\u4e0d\u662f ```gonu``` \uff0c\u6211\u5c31\u5728\u8fd9\u88ab\u5751\u4e86\u3002\uff08\u5176\u5b9e\u64cd\u4f5c $4$ \u538b\u6839\u4e0d\u7528\u79bb\u6563\u5316\uff0c\u53ea\u662f\u6211\u61d2\u4e0d\u60f3\u5355\u72ec\u62ff\u51fa\u6765\u3002\uff09\n# \u6700\u540e\n\u5b8c\u6574\u4ee3\u7801\u8bf7\u81ea\u5df1\u628a\u4e0a\u9762\u7684\u5408\u8d77\u6765\uff0c\u8fd9\u91cc\u4e0d\u653e\u4e86\u3002\n\n\u6307\u9488\u7684\u4f18\u70b9\u662f\u7b26\u5408\u81ea\u7136\u8bed\u8a00\u4e60\u60ef\uff0c\u4f7f\u7528\u65b9\u4fbf\uff08\u81f3\u5c11\u6211\u8fd9\u4e48\u89c9\u5f97\uff09\u3002\n\n\u7f3a\u70b9\u662f\u7528 ```new``` \u5f00\u8282\u70b9\u5e38\u6570\u5927\uff08\u542c\u8bf4\uff09\uff0c\u4f46\u8fc7\u8fd9\u9053\u677f\u5b50\u7ef0\u7ef0\u6709\u4f59\u4e86\u3002\uff08\u6211\u7ba1\u6700\u6162\u70b9 $1.67s$ \u53eb\u7ef0\u7ef0\u6709\u4f59\uff1f\uff09\n\n\u5b8c\u7ed3\u6492\u82b1\\\\(^o^)/ ",
        "postTime": 1581136042,
        "uid": 150384,
        "name": "pyqpyq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u55ef\uff0c\u521a\u5b66\u5b8c\u4e86$fhq-treap$\u90a3\u5c31\u7528\u5b83\u6765\u505a\u5427\uff01\n\n### fhq-treap\n\u8fd9\u662f\u67d0\u4e00\u4f4d\u5927\u4f6c\u521b\u5efa\u7684\u7ed3\u6784\uff0c\u4e3b\u8981\u64cd\u4f5c\u5c31\u53ea\u6709\u4e24\u79cd\uff1a$split$\u548c$merge$\n\n\u73b0\u5728\u6211\u4eec\u5148\u5177\u4f53\u6765\u8bb2\u4e00\u8bb2\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u3002\n### \u5b9a\u4e49\n    int son[MAXN][3];//0 \u5de6\u5b69\u5b50\uff0c1\u53f3\u5b69\u5b50\n    int val[MAXN];//\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\n    int rd[MAXN];//\u6bcf\u4e2a\u70b9\u7684\u968f\u673a\u6743\u503c\n    int size[MAXN];//\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u6811\u7684\u5927\u5c0f\n\n### split\nsplit\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6839\u636e\u6743\u503c\uff0c\u53e6\u4e00\u79cd\u662f\u6839\u636e\u6392\u540d\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u6839\u636e\u6743\u503c\u6765\u5206\u88c2\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u8fd9\u4e00\u5927\u68f5\u6811\u5206\u4e3a\u4e24\u68f5\u5c0f\u6811\uff0c\u7528x\u548cy\u6765\u4ee3\u66ff\uff0c\n\n\u4e2d\u95f4\u4ee5\u4e00\u4e2ak\u4e3a\u5206\u754c\u503c\uff0c\u5c0f\u4e8ek\u53bb\u5de6\u8fb9\u7684\uff0c\u5927\u4e8ek\u53bb\u53f3\u8fb9\u3002\n\n\u8fd9\u4e2a\u5176\u4e2d\u5c31\u8574\u542b\u4e86\u5f88\u591a\u7684\u6027\u8d28\uff0c\u5e0c\u671b\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u601d\u8003\uff08\u4e3b\u8981\u662f\u6839\u7684\u5173\u7cfb\uff09\n\n\u8fd9\u4e48\u8bf4\u8d77\u6765\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\n\n$Talk$  $is$ $cheap,$ $show$ $you$ $the$ $code$\n\n```cpp\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now) \n        x=y=0;\n    else \n    {\n        if (val[now]<=k) \n            x=now,split(son[now][1],k,son[now][1],y);\n        else \n            y=now,split(son[now][0],k,x,son[now][0]);\n        update(now);\n    }\n}\n```\n\n### merge\n\n\u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u68f5\u6811\u7684\u6743\u503c\u5c0f\u4e8e\u7b2c\u4e8c\u68f5\u6811\u7684\u6743\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6bd4\u8f83\u5b83\u4eec\u7684\u968f\u673a\u6743\u503c\u3002\n\n\u5982\u679crd[l]<rd[r]\uff0c\u6211\u4eec\u5c31\u4fdd\u7559\u5b83\u7684\u5de6\u5b50\u6811\uff0c\u53e6\u4e00\u68f5\u6811\u4f5c\u4e3a\u5b83\u7684\u53f3\u5b50\u6811\uff1b\n\n\u5982\u679crd[l]>=rd[r]\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u7b2c\u4e8c\u68f5\u6811\u7684\u53f3\u5b50\u6811\uff0c\u53e6\u4e00\u9897\u6811\u4f5c\u4e3a\u5b83\u7684\u5de6\u5b50\u6811\u3002\n\n$Talk$  $is$ $cheap,$ $show$ $you$ $the$ $code$\n```cpp\nint merge(int A,int B)\n{\n    if (!A||!B) \n        return  A+B;\n    if (rd[A]<rd[B])\n    {\n        son[A][1]=merge(son[A][1],B); \n        update(A); \n        return A;\n    }\n    else \n    {\n        son[B][0]=merge(A,son[B][0]); \n        update(B); \n        return B;\n    } \n}\n```\n\n### \u5176\u4ed6\n\n#### \u6392\u540d\n\n\u76f4\u63a5\u6309\u7167a-1\u7684\u6743\u503c\u628a\u6811\u5206\u5f00\uff0c\u90a3\u4e48x\u6811\u4e2d\u6700\u5927\u7684\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8ea-1\uff0c\u90a3\u4e48a\u7684\u6392\u540d\u5c31\u662fsize[x]+1\u3002\n#### k\u5c0f\u503c\n\u8fd9\u4e2a\u592a\u7b80\u5355\u4e86\uff0c\u61d2\u5f97\u8bf4\n#### \u524d\u9a71&&\u540e\u7ee7\n\u6211\u4eec\u5148\u770b\u524d\u9a71\uff0c\u56e0\u4e3a\u8981\u5c0f\u4e8enow\uff0c\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u6309\u7167now-1\u7684\u6743\u503c\u5212\u5206x\uff0c\u73b0\u5728x\u4e2d\u6700\u5927\u7684\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8enow-1\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8f93\u51fax\u4e2d\u6700\u5927\u7684\u6570\u5c31\u597d\uff0c\n\n\u540e\u7ee7\u540c\u7406\u3002\n#### \u5220\u9664\n\u5220\u9664\u6743\u503c\u4e3av\u7684\u70b9\uff0c\n\n\u5148\u628a\u6574\u9897\u6811\u4ee5v\u4e3a\u6743\u503csplit\u6210\u4e24\u68f5\u6811a,b,\u518d\u628aa\u6811\u6309\u7167v-1\u5206\u6210c,d\u3002\n\n\u8fd9\u65f6\u5019\u503c\u4e3av\u7684\u70b9\u4e00\u5b9a\u4e3ad\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u628ad\u7684\u4e24\u4e2a\u5b50\u513f\u5b50merge\u8d77\u6765\n\n\uff08\u5212\u91cd\u70b9\uff1a\u8fd9\u4e00\u6b65\u5c31\u662f\u53bb\u9664\u6389v\u7684\u5f71\u54cd\uff09\uff0c\n\n\u518d\u628a\u4ed6\u4eec\u91cd\u65b0merge\u8d77\u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6811\uff0c\u8fd9\u9897\u6811\u5c31\u53bb\u9664\u6389\u4e86v\u7684\u5f71\u54cd\u3002\n\n\u7ed9\u51fa\u5168\u90e8\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<bits/stdc++.h>\n#include<cstring>\nusing namespace std;\nint size[500001],son[500001][2],rd[500001],val[500001];\nint T,tot,n,m,x,y,z,opt,a,root,com;\ninline void update(int x)\n{\n    size[x]=1+size[son[x][0]]+size[son[x][1]];\n}\ninline int new_node(int x)\n{\n    size[++tot]=1;\n    val[tot]=x;\n    rd[tot]=rand();\n    return tot;\n}\nint merge(int A,int B)\n{\n    if (!A||!B) \n        return  A+B;\n    if (rd[A]<rd[B])\n    {\n        son[A][1]=merge(son[A][1],B); \n        update(A); \n        return A;\n    }\n    else \n    {\n        son[B][0]=merge(A,son[B][0]); \n        update(B); \n        return B;\n    } \n}\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now) \n        x=y=0;\n    else \n    {\n        if (val[now]<=k) \n            x=now,split(son[now][1],k,son[now][1],y);\n        else \n            y=now,split(son[now][0],k,x,son[now][0]);\n        update(now);\n    }\n}\nint kth(int now,int k)\n{\n    while(1)\n    {\n        if (k<=size[son[now][0]]) \n            now=son[now][0];\n        else \n            if (k==size[son[now][0]]+1) \n                return now;\n        \telse \n                k-=size[son[now][0]]+1,now=son[now][1];\n    }\n}\n\nint main()\n{\n    srand((unsigned)time(NULL));\n    cin>>T;\n    while (T--)\n    {\n    \tscanf(\"%d%d\",&opt,&a);\n        if (opt==1)\n        {\n            split(root,a,x,y);\n            root=merge(merge(x,new_node(a)),y);\n        }\n        if (opt==2)\n        {\n            split(root,a,x,z);\n            split(x,a-1,x,y);\n            y=merge(son[y][0],son[y][1]);\n            root=merge(merge(x,y),z);\n        }\n        if (opt==3)\n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",size[x]+1);\n            root=merge(x,y);\n        }\n        if (opt==4) \n            printf(\"%d\\n\",val[kth(root,a)]);\n        if (opt==5)\n        {\n            split(root,a-1,x,y);\n            printf(\"%d\\n\",val[kth(x,size[x])]);\n            root=merge(x,y);\n        }\n        if (opt==6)\n        {\n            split(root,a,x,y);\n            printf(\"%d\\n\",val[kth(y,1)]);\n            root=merge(x,y);\n        }\n    }\n}\n```\n\n\n### \u53ef\u6301\u4e45\u5316\n\u60f3\u8981\u53ef\u6301\u4e45\u5316\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u53ea\u8981\u5c06\u4e0a\u4e00\u6b21\u7684\u72b6\u6001\u4fdd\u5b58\u4e00\u4e0b\u5c31\u884c\uff08\u5bf9\u4e8efhq-treap\u6765\u8bf4\uff09\n\n$Talk$  $is$ $cheap,$ $show$ $you$ $the$ $code$\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<bits/stdc++.h>\n#include<cstring>\nusing namespace std;\nint size[5000001],son[5000001][2],rd[5000001],val[5000001],rt[5000000];\nint T,tot,n,m,x,y,z,opt,a,root,com,bt;\ninline void update(int x)\n{\n    size[x]=1+size[son[x][0]]+size[son[x][1]];\n}\ninline int new_node(int x)\n{\n    size[++tot]=1;\n    val[tot]=x;\n    rd[tot]=rand();\n    return tot;\n}\nint merge(int A,int B)\n{\n    if (!A||!B) \n        return  A+B;\n    if (rd[A]<rd[B])\n    {\n        son[A][1]=merge(son[A][1],B); \n        update(A); \n        return A;\n    }\n    else \n    {\n        son[B][0]=merge(A,son[B][0]); \n        update(B); \n        return B;\n    } \n}\nvoid split(int now,int k,int &x,int &y)\n{\n    if(!now) \n        x=y=0;\n    else \n    {\n        if (val[now]<=k) \n            x=now,split(son[now][1],k,son[now][1],y);\n        else \n            y=now,split(son[now][0],k,x,son[now][0]);\n        update(now);\n    }\n}\nint kth(int now,int k)\n{\n    while(1)\n    {\n        if (k<=size[son[now][0]]) \n            now=son[now][0];\n        else \n            if (k==size[son[now][0]]+1) \n                return now;\n        \telse \n                k-=size[son[now][0]]+1,now=son[now][1];\n    }\n}\n\nint main()\n{\n    srand((unsigned)time(NULL));\n    cin>>n;\n\tfor (int i=1;i<=n;i++)\n    {\n    \tscanf(\"%d%d%d\",&bt,&opt,&a);\n        rt[i]=rt[bt];\n\t\tif (opt==1)\n        {\n            split(rt[i],a,x,y);\n            rt[i]=merge(merge(x,new_node(a)),y);\n        }\n        if (opt==2)\n        {\n            split(rt[i],a,x,z);\n            split(x,a-1,x,y);\n            y=merge(son[y][0],son[y][1]);\n            rt[i]=merge(merge(x,y),z);\n        }\n        if (opt==3)\n        {\n            split(rt[i],a-1,x,y);\n            printf(\"%d\\n\",size[x]+1);\n            rt[i]=merge(x,y);\n        }\n        if (opt==4) \n            printf(\"%d\\n\",val[kth(rt[i],a)]);\n        if (opt==5)\n        {\n            split(rt[i],a-1,x,y);\n            printf(\"%d\\n\",val[kth(x,size[x])]);\n            rt[i]=merge(x,y);\n        }\n        if (opt==6)\n        {\n            split(rt[i],a,x,y);\n            printf(\"%d\\n\",val[kth(y,1)]);\n            rt[i]=merge(x,y);\n        }\n    }\n\t\n    \n}\n```\n\n",
        "postTime": 1559537921,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "```cpp\n/*\n\u8fd9\u9053\u9898\u4e00\u770b\u53ef\u4ee5\u77e5\u9053\u662f\u5e73\u8861\u6811+\u6301\u4e45\u5316.\u5982\u679c\u662f\u6301\u4e45\u5316\uff0c\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u4fdd\u5b58\u5386\u53f2\u4fe1\u606f\uff0c\u6bcf\u6b21\u4fee\u6539logn\u4e2a\u70b9,\u6240\u4ee5\u5185\u5b58\u8981\u97602nlogn.\nsplit\u662f\u628a\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u4e00\u90e8\u5206\u5927\u4e8ek\uff0c\u5fc5\u987b\u4fdd\u8bc1\u5176BST\u6240\u6709\u7684\u6027\u8d28\nmerge\u662f\u5408\u5e76\u4ee5x\u4e3a\u6839\u8282\u70b9\u548c\u4ee5y\u4e3a\u6839\u8282\u70b9\u7684\u4e24\u9897\u5b50\u6811\u3002\n*/\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+5;\nstruct node{\n    int l,r;\n    int v,rd,sum;\n}a[N*50];\nint cnt;\nvoid update(int i){\n    if(!i)return ;\n    a[i].sum=a[a[i].l].sum+a[a[i].r].sum+1;\n}\nint newnode(int x){\n    ++cnt;\n    a[cnt].l=a[cnt].r=0;\n    a[cnt].sum=1;a[cnt].v=x;\n    a[cnt].rd=rand();\n    return cnt;\n}\nint merge(int x,int y){//\u5408\u5e76\u64cd\u4f5c\uff0c\u6309\u7167treap\u7684rd\u7684\u4f18\u5148\u7ea7\u6765\u5408\u5e76(\u5c0f\u8ddf\u5806\u6216\u5927\u6839\u5806\u90fd\u884c)\n//\u8fd9\u91cc\u662f\u5927\u6839\u5806 \n    if(!x||!y)return x+y;\n    if(a[x].rd>a[y].rd){\n        int p=++cnt;a[p]=a[x];\n        a[p].r=merge(a[p].r,y);\n        update(p);return p;\n    }\n    else {\n        int p=++cnt;a[p]=a[y];\n        a[p].l=merge(x,a[p].l);\n        update(p);return p;\n    }\n}\nvoid split(int now,int k,int &x,int &y){//\u628a\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u6570\u653ex\u5b50\u6811\u91cc\u9762\uff0c\u5927\u4e8ek\u7684\u653ey\u5b50\u6811\u91cc\u9762 \n    if(now==0){x=y=0;return ;}\n    if(a[now].v<=k){\n        x=++cnt;a[x]=a[now];\n        split(a[x].r,k,a[x].r,y);\n        update(x);\n    }\n    else {\n        y=++cnt;a[y]=a[now];\n        split(a[y].l,k,x,a[y].l);\n        update(y);\n    }\n}\nvoid insert(int &root,int v){//\u63d2\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9 \n     int x=0,y=0,z=0;\n     split(root,v-1,x,y);\n     z=newnode(v);\n     root=merge(merge(x,z),y);\n}\nvoid del(int &root,int v){//\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9\n    int x=0,y=0,z=0;\n    split(root,v,x,z);\n    split(x,v-1,x,y);\n    y=merge(a[y].l,a[y].r);\n    root=merge(merge(x,y),z);\n}\nint rank_value(int i,int k){\n    if(k==a[a[i].l].sum+1)return a[i].v;\n    if(k<=a[a[i].l].sum)return rank_value(a[i].l,k);\n    return rank_value(a[i].r,k-a[a[i].l].sum-1);\n}\nint kth_rank(int &root,int v){//\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u6570\n    int x,y;\n    split(root,v-1,x,y);\n    int ans=a[x].sum+1;\n    root=merge(x,y);\n    return ans;\n}\nint pre(int &root,int v){//\u6c42\u524d\u9a71 \n    int x,y,k;\n    split(root,v-1,x,y);\n    if(x==0)return -2147483647;\n    k=a[x].sum;\n    int ans=rank_value(x,k);\n    root=merge(x,y);\n    return ans;\n}\nint nex(int &root,int v){//\u6c42\u540e\u9a71\n    int x,y,ans;\n    split(root,v,x,y);\n    if(y==0)return 2147483647;\n    ans=rank_value(y,1);\n    root=merge(x,y);\n    return ans;\n}\nint n,root[N];\nint main(){\n    scanf(\"%d\",&n);\n    int x,y,op;\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%d%d%d\",&x,&op,&y);\n    \troot[i]=root[x];\n    \tif(op==1)insert(root[i],y);\n    \tif(op==2)del(root[i],y);\n    \tif(op==3)printf(\"%d\\n\",kth_rank(root[i],y));\n    \tif(op==4)printf(\"%d\\n\",rank_value(root[i],y));\n    \tif(op==5)printf(\"%d\\n\",pre(root[i],y));\n    \tif(op==6)printf(\"%d\\n\",nex(root[i],y));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1546608189,
        "uid": 50945,
        "name": "c201904",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3835 \u3010\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u3011"
    }
]