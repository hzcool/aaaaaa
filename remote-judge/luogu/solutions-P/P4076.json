[
    {
        "content": "__\u9898\u76ee\u5927\u610f__\n\n\u7ed9\u51fa $n+m$ \u4e2a\u5b57\u7b26\u4e32 ,  \u6bcf\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u82e5\u5e72\u5355\u8bcd , \u53ef\u4ee5\u6b63\u7740\u8bfb\u4e5f\u53ef\u4ee5\u53cd\u7740\u8bfb , \u6709\u4e9b\u5b57\u7b26\u4e32\u5df2\u7ecf\u786e\u5b9a\u4e86\u9605\u8bfb\u65b9\u6cd5 , \u8981\u6c42\u786e\u5b9a\u5269\u4e0b\u5b57\u7b26\u4e32\u7684\u9605\u8bfb\u65b9\u6cd5 , \u4f7f\u5f97\u6b63\u53cd\u4e32\u90fd\u51fa\u73b0\u7684\u5355\u8bcd\u6570\u6700\u5c11. \n\n\u4fdd\u8bc1\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5185\u7684\u5355\u8bcd , \u8981\u4e48\u6240\u6709\u5355\u8bcd\u7684\u6b63\u4e32\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e\u53cd\u4e32 , \u8981\u4e48\u6240\u6709\u5355\u8bcd\u7684\u53cd\u4e32\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e\u6b63\u4e32.\n\n__solution__\n\n\u56de\u6587\u4e32\u4e00\u5b9a\u4ea7\u751f $1$ \u7684\u8d21\u732e , \u5355\u72ec\u5904\u7406\n\n\u770b\u5230\u6b63\u53cd\u53ef\u4ee5\u8054\u60f3\u5230 [\u6587\u7406\u5206\u79d1](https://www.luogu.com.cn/problem/P4313) , \u7c7b\u6bd4\u8fd9\u9053\u9898\u8003\u8651\u6700\u5c0f\u5272\u505a\u6cd5\n\n\u4e00\u5f00\u59cb\u662f\u60f3\u7740\u76f4\u63a5\u5c06 $n+m$ \u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u88ab\u5206\u7684\u5bf9\u8c61 , \u7136\u800c\u5e76\u5efa\u4e0d\u4e86\u56fe , \u56e0\u4e3a\u5bf9\u4e8e\u5355\u8bcd\u6765\u8bf4\u8fd9\u662f\u5b58\u5728\u6027\u95ee\u9898\n\n\u8f6c\u6362\u601d\u7ef4 ~~\u67e5\u9605\u9898\u89e3~~ , \u5c06\u5355\u8bcd\u4f5c\u4e3a\u88ab\u5212\u5206\u96c6\u5408\u7684\u5bf9\u8c61 \n\n\u8bbe\u6e90\u70b9\u4e3a $s$ , \u6c47\u70b9\u4e3a $t$ , \u5212\u5206\u7684\u4e24\u4e2a\u96c6\u5408\u4e3a $S$ \u4e0e $T$ \n\n\u5c06\u4e00\u4e2a\u5355\u8bcd\u5206\u4e3a\u6b63\u4e32\u4e0e\u53cd\u4e32\u4e24\u4e2a\u8282\u70b9 ( \u8fd9\u91cc\u6b63\u4e32\u5b9a\u4e49\u4e3a\u6b63\u53cd\u4e32\u4e2d\u5b57\u5178\u5e8f\u8f83\u5c0f\u7684\u4e32 ) , \u6b63\u4e32\u5411\u53cd\u4e32\u8fde\u5bb9\u91cf\u4e3a $2$  \u7684\u8fb9 \n\n\n\u6b63\u4e32\u88ab\u5212\u5206\u5230 $S$ \u96c6\u5408 $\\rightarrow$ \u6b63\u4e32\u51fa\u73b0\n\n\u6b63\u4e32\u88ab\u5212\u5206\u5230 $T$ \u96c6\u5408 $\\rightarrow$ \u6b63\u4e32\u6ca1\u6709\u51fa\u73b0\n\n\u53cd\u4e32\u88ab\u5212\u5206\u5230 $T$ \u96c6\u5408 $\\rightarrow$ \u53cd\u4e32\u51fa\u73b0\n\n\u53cd\u4e32\u88ab\u5212\u5206\u5230 $S$ \u96c6\u5408 $\\rightarrow$ \u53cd\u4e32\u6ca1\u6709\u51fa\u73b0\n\n\u5f53\u6b63\u4e32\u4e00\u5b9a\u51fa\u73b0\u65f6 , $s$ \u5411\u6b63\u4e32\u8fde\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\n\n\u5f53\u53cd\u4e32\u4e00\u5b9a\u51fa\u73b0\u65f6 , \u53cd\u4e32\u5411 $t$ \u8fde\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\n\n\u63a5\u4e0b\u6765\u8003\u8651\u90a3\u4e9b\u6ca1\u6709\u786e\u5b9a\u8bfb\u6cd5\u7684\u5b57\u7b26\u4e32\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u91cd\u8981\u6761\u4ef6\n\n>\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5185\u7684\u5355\u8bcd , \u8981\u4e48\u6240\u6709\u5355\u8bcd\u7684\u6b63\u4e32\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e\u53cd\u4e32 , \u8981\u4e48\u6240\u6709\u5355\u8bcd\u7684\u53cd\u4e32\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e\u6b63\u4e32.\n\n\u610f\u5473\u7740\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u51fa\u73b0\u7684\u5355\u8bcd\u90fd\u662f\u6b63\u4e32 , \u6216\u8005\u662f\u53cd\u4e32 ( \u8fd9\u91cc\u5047\u8bbe\u90fd\u662f\u6b63\u4e32 )\n\n\u8bbe\u4f7f\u5f97\u5b57\u7b26\u4e32\u4e2d\u5355\u8bcd\u90fd\u662f\u6b63\u4e32\u7684\u8bfb\u6cd5\u662f\u5c06\u5b57\u7b26\u4e32\u5212\u5165 $S$ \u96c6\u5408\n\n\u5b57\u7b26\u4e32\u88ab\u5212\u5165 $S$ \u96c6\u5408 $\\rightarrow$ \u6b63\u4e32\u51fa\u73b0\n\n\u5b57\u7b26\u4e32\u88ab\u5212\u5165 $T$ \u96c6\u5408 $\\rightarrow$ \u53cd\u4e32\u51fa\u73b0\n\n\u82e5\u5b57\u7b26\u4e32\u88ab\u5212\u5165 $S$ \u96c6\u5408 , \u5176\u4e2d\u51fa\u73b0\u7684\u6b63\u4e32\u4e5f\u4e00\u5b9a\u5728 $S$ \u96c6\u5408 , \u4e8e\u662f\u5b57\u7b26\u4e32\u5411\u6bcf\u4e2a\u5176\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u7684\u6b63\u4e32\u8fde $INF$ \u8fb9\n\n\u82e5\u5b57\u7b26\u4e32\u88ab\u5212\u5165 $T$ \u96c6\u5408 , \u5176\u4e2d\u51fa\u73b0\u7684\u53cd\u4e32\u4e5f\u4e00\u5b9a\u5728 $T$ \u96c6\u5408 , \u4e8e\u662f\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u5355\u8bcd\u7684\u53cd\u4e32\u5411\u5b57\u7b26\u4e32\u8fde $INF$ \u8fb9 \n\n__code__\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 7e2 + 5;\nconst int M = N * N;\nconst int INF = 0x3f3f3f3f;\nint _w;\n\nint head[N] , eidx , dep[N] , que[N] , he , ta , cur[N] , st , ed;\nstruct Edge { int nxt , to , flow , cap; } edge[M];\n\nvoid addedge( int u , int v , int cap ) { \n  edge[++eidx] = (Edge) { head[u] , v , 0 , cap }; head[u] = eidx;\n  edge[++eidx] = (Edge) { head[v] , u , 0 , 0 }; head[v] = eidx;\n}\n\nbool bfs( void ) {\n  static int u;\n  memset( dep , 0 , sizeof dep );\n  dep[que[he = ta = 1] = st] = 1;\n  while( he <= ta ) {\n    u = que[he++];\n    for( int i = head[u] , v ; ~i ; i = edge[i].nxt )\n      if( !dep[v = edge[i].to] && edge[i].cap > edge[i].flow )\n        dep[que[++ta] = v] = dep[u] + 1;\n  }\n  return dep[ed] != 0;\n} \n\nint dfs( int u , int fl ) {\n  if( u == ed || !fl ) return fl;\n  int g = 0 , d;\n  for( int & i = cur[u] ; ~i ; i = edge[i].nxt ) \n    if( dep[edge[i].to] == dep[u] + 1 && ( d = dfs( edge[i].to , min( edge[i].cap - edge[i].flow , fl - g ) ) ) ) {\n      edge[i].flow += d , edge[i ^ 1].flow -= d;\n      if( ( g += d ) >= fl ) break;\n    }\n  return g;\n}\n\nint dinic( void ) {\n  int res = 0;\n  while( bfs() ) {\n    memcpy( cur , head , sizeof head );\n    res += dfs( st , INF );\n  }\n  return res;\n}\n\nint n , m , col[N] , row[N] , idx;\nchar str[N][N];\nset<string> pal;\nmap<string,int> id;\n\nvoid analyze( string s , int type , int u ) {\n  static int n; \n  static string a , b;\n  n = s.length();\n  for( int i = 0 , r , flag ; i < n ; i = r + 1 ) {\n    r = i;\n    if( s[i] == '_' ) continue;\n    while( r < n - 1 && s[r + 1] != '_' ) ++r;\n    a = s.substr( i , r - i + 1 );\n    b = a; reverse( b.begin() , b.end() );\n    if( b < a ) swap( a , b ) , flag = -1;\n    else flag = 1;\n    if( a == b ) {\n      pal.insert( a );\n      continue;\n    }\n    if( !id.count( a ) ) {\n      id[a] = ++idx;\n      id[b] = ++idx;\n      addedge( idx - 1 , idx , 2 );\n    } flag *= type;\n    if( flag == 1 ) addedge( st , id[a] , INF );\n    else if( flag == -1 ) addedge( id[b] , ed , INF );\n    else addedge( id[b] , u , INF ) , addedge( u , id[a] , INF );\n  }\n}\n\nvoid solve( void ) {\n  _w = scanf(\"%d%d\",&n,&m); idx = n + m;\n  memset( head , -1 , sizeof head ) , eidx = -1;\n  id.clear() , pal.clear();\n  for( int i = 1 ; i <= n ; ++i ) _w = scanf(\"%d\",row + i );\n  for( int i = 1 ; i <= m ; ++i ) _w = scanf(\"%d\",col + i );\n  for( int i = 1 ; i <= n ; ++i ) _w = scanf(\"%s\",str[i]+1);\n  st = 0 , ed = N - 1;\n  static string tmp;\n  for( int i = 1 ; i <= n ; ++i ) {\n    tmp = str[i] + 1;\n    analyze( tmp , row[i] , i );\n  }\n  for( int i = 1 ; i <= m ; ++i ) {\n    tmp = \"\";\n    for( int j = 1 ; j <= n ; ++j )\n      tmp += str[j][i];\n    analyze( tmp , col[i] , i + n );\n  }\n  printf(\"%d\\n\",dinic() + int( pal.size() ) );\n}\n\nint main( void ) {\n  int T;\n  _w = scanf(\"%d\",&T);\n  while( T-- ) solve();\n  return 0;\n}\n```\n\n",
        "postTime": 1583033299,
        "uid": 124915,
        "name": "guyan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4076 \u3010[SDOI2016]\u5899\u4e0a\u7684\u53e5\u5b50\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4076)\n\n[\u503c\u5f97\u5c1d\u8bd5\u4e00\u6ce2\u770b\u4e00\u770b\u662f\u4e0d\u662f\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002](https://www.cnblogs.com/lsq147/p/13864313.html)\n\n## \u9898\u76ee\u5206\u6790\n\n\u53d1\u73b0\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u8003\u8651\u4f7f\u7528\u7f51\u7edc\u6d41\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u56de\u6587\u4e32\u5355\u8bcd\uff0c\u65e0\u8bba\u6b63\u7740\u8bfb\u8fd8\u662f\u53cd\u7740\u8bfb\u90fd\u8981\u5bf9\u7b54\u6848\u8d21\u732e\u4e00\uff0c\u6240\u4ee5\u5148\u5904\u7406\u6240\u6709\u56de\u6587\u4e32\u5355\u8bcd\uff0c\u7136\u540e\u518d\u5220\u9664\u8fd9\u4e9b\u56de\u6587\u4e32\u5355\u8bcd\u53bb\u8003\u8651\u5176\u4ed6\u5355\u8bcd\u3002\u6709\u4e86\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u4e00\u4e2a\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u8981\u4e48\u4e25\u683c\u5927\u4e8e\u5b83\u7684\u53cd\u4e32\u8981\u4e48\u4e25\u683c\u5c0f\u4e8e\u5b83\u7684\u53cd\u4e32\u3002\n\n\u5c06\u67d0\u4e2a\u5355\u8bcd\u548c\u5b83\u7684\u53cd\u4e32\u4e00\u8d77\u8003\u8651\uff0c\u5982\u679c\u8fd9\u4e2a\u5355\u8bcd\u548c\u5176\u53cd\u4e32\u90fd\u51fa\u73b0\u4e86\uff0c\u90a3\u4e48\u4f1a\u5bf9\u7b54\u6848\u6709 2 \u7684\u8d21\u732e\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u4f7f\u7528\u6700\u5c0f\u5272\uff0c\u4e0d\u59a8\u5047\u8bbe\u8fd9\u4e2a\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u5b83\u7684\u53cd\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u5728\u4e86\u6700\u7ec8\u7684\u5b57\u5178\u4e2d\u5f53\u4e14\u4ec5\u5f53\u6e90\u70b9 $S$ \u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e2a\u5355\u8bcd\uff0c\u5176\u53cd\u4e32\u51fa\u73b0\u5728\u4e86\u6700\u7ec8\u7684\u5b57\u5178\u4e2d\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u5355\u8bcd\u53ef\u4ee5\u5230\u8fbe\u6c47\u70b9 $T$ \uff0c\u7136\u540e\u8fd9\u4e2a\u5355\u8bcd\u548c\u5176\u53cd\u4e32\u6709\u4e00\u6761\u6d41\u91cf\u4e3a 2 \u7684\u8fb9\uff0c\u7531\u6b64\u5efa\u56fe\u53ef\u4ee5\u5f97\u5230\u5982\u679c\u8fd9\u4e2a\u5355\u8bcd\u548c\u5176\u53cd\u4e32\u540c\u65f6\u51fa\u73b0\u5c31\u5fc5\u987b\u8981\u5272\u6389\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u4ea7\u751f 2 \u7684\u8d21\u732e\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u601d\u8def\u5efa\u51fa\u6765\u7684\u56fe\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qsswwnfk.png)\n\n\u8003\u8651\u5982\u4f55\u7528\u7ed9\u5b9a\u7684\u77e9\u9635\u53bb\u9650\u5236\u8fd9\u4e9b\u70b9\u548c\u6e90\u70b9 $S$ \u6c47\u70b9 $T$ \u4e4b\u95f4\u7684\u8fde\u901a\u6027\u3002\u8003\u8651\u5230\u9898\u76ee\u4fdd\u8bc1\u4ece\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u53bb\u770b\u5f97\u5230\u7684\u5355\u8bcd\u8981\u4e48\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e\u53cd\u4e32\u8981\u4e48\u4e25\u683c\u5927\u4e8e\u53cd\u4e32\uff0c\u6240\u4ee5\u67d0\u4e00\u884c\u6216\u8005\u5217\u4ece\u67d0\u4e2a\u65b9\u5411\u770b\u76f8\u5f53\u4e8e\u662f\u8ba9\u67d0\u4e9b\u5728\u4e0a\u9762\u7684\u70b9\u548c $S$ \u8fde\u901a\u6216\u8005\u662f\u8ba9\u67d0\u4e9b\u5728\u4e0b\u9762\u7684\u70b9\u548c $T$ \u8fde\u901a\u3002\n\n\u67d0\u4e00\u884c\u8981\u4e48\u4ece\u5de6\u5f80\u53f3\u770b\u8981\u4e48\u4ece\u53f3\u5f80\u5de6\u770b\uff0c\u4e0d\u59a8\u5047\u8bbe\u4ece\u5de6\u5f80\u53f3\u770b\u5f97\u5230\u7684\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u90fd\u4e25\u683c\u5c0f\u4e8e\u5176\u53cd\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7ecf\u5178\u6a21\u578b\uff0c\u7ed9\u6bcf\u4e2a\u8981\u6c42\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e $S$ \u76f4\u63a5\u548c\u8fd9\u4e2a\u8282\u70b9\u8fde\u8fb9\uff0c\u8fd9\u4e2a\u8282\u70b9\u548c $T$ \u76f4\u63a5\u8fde\u8fb9\uff0c\u6211\u4eec\u94a6\u5b9a\u5982\u679c\u8fd9\u4e2a\u8981\u6c42\u548c $S$ \u7684\u8fde\u8fb9\u6ca1\u6709\u88ab\u5272\u65ad\uff0c\u90a3\u4e48\u8868\u793a\u5b83\u4ece\u5de6\u5f80\u53f3\u770b\uff0c\u5426\u5219\u8868\u793a\u5b83\u4ece\u53f3\u5f80\u5de6\u770b\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u94a6\u5b9a\u7684\u65b9\u6cd5\u53bb\u7ed9\u8981\u6c42\u8282\u70b9\u548c\u5355\u8bcd\u8fde\u8fb9\u4e86\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8981\u6c42\u8282\u70b9\u53ea\u4f1a\u5272\u65ad\u4e00\u8fb9\uff0c\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u6d41\u91cf\u8bbe\u7f6e\u4e00\u4e2a\u6781\u5927\u503c $x$ \uff0c\u5047\u5982\u4e00\u4e2a\u8981\u6c42\u6ca1\u6709\u786e\u5b9a\u7a76\u7adf\u662f\u4ece\u5de6\u770b\u8fd8\u662f\u4ece\u53f3\u770b\uff0c\u90a3\u4e48\u5fc5\u7136\u9700\u8981\u5272\u6389\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6b64\u65f6\u5c31\u8981\u7ed9\u7b54\u6848\u989d\u5916\u51cf\u6389\u4e00\u4e2a $x$ \u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff0c\u6700\u540e\u5efa\u51fa\u6765\u7684\u56fe\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/siwmjqg9.png)\n\n\u89e3\u91ca\u4e00\u4e0b\u8fd9\u5f20\u56fe\u662f\u4ec0\u4e48\u610f\u601d\uff1a\u8bbe 1,3,5 \u53f7\u8282\u70b9\u5206\u522b\u8868\u793a\u5355\u8bcd `AB` `CD` `EF` \uff0c\u90a3\u4e48 2,4,6 \u53f7\u8282\u70b9\u5206\u522b\u8868\u793a\u5355\u8bcd `BA` `DC` `FE` \uff0c\u90a3\u4e48 7 \u53f7\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u770b\u7684\u5355\u8bcd\u5c31\u662f `AB,EF` \uff0c 8 \u53f7\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u770b\u7684\u5355\u8bcd\u5c31\u662f `CD` \uff0c 9 \u53f7\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u770b\u7684\u5355\u8bcd\u5c31\u662f `AB` \uff0c\u5176\u4e2d 7 \u53f7\u8282\u70b9\u8981\u6c42\u5fc5\u987b\u4ece\u5de6\u5f80\u53f3\u770b\uff0c 8 \u53f7\u8282\u70b9\u8981\u6c42\u5fc5\u987b\u4ece\u53f3\u5f80\u5de6\u770b\uff0c 9 \u53f7\u8282\u70b9\u4efb\u610f\uff0c\u90a3\u4e48\u6211\u4eec\u5efa\u51fa\u6765\u7684\u56fe\u5c31\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u4e0a\u9762\u7684\u56fe\u53ea\u9700\u8981\u5272\u65ad 9 \u548c\u6c47\u70b9 T \u8fde\u7740\u7684\u8fb9\u5c31\u884c\u4e86\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ch() getchar()\n#define pc(x) putchar(x)\n#define inf 10000\n#define INF 1000000000\nusing namespace std;\ntemplate<typename T>void read(T&x){\n\tstatic char c;static int f;\n\tfor(c=ch(),f=1;c<'0'||c>'9';c=ch())if(c=='-')f=-f;\n\tfor(x=0;c>='0'&&c<='9';c=ch())x=x*10+(c&15);x*=f;\n}\ntemplate<typename T>void write(T x){\n\tstatic char q[65];int cnt=0;\n\tif(x<0)pc('-'),x=-x;\n\tq[++cnt]=x%10,x/=10;\n\twhile(x)\n\t\tq[++cnt]=x%10,x/=10;\n\twhile(cnt)pc(q[cnt--]+'0');\n}\nconst int maxn=10005,maxm=1000005;\nstruct Edge{\n\tint v,w,nt;\n\tEdge(int v=0,int w=0,int nt=0):\n\t\tv(v),w(w),nt(nt){}\n}e[maxm];\nint hd[maxn],num=1;\nvoid qwq(int u,int v,int w){\n\te[++num]=Edge(v,w,hd[u]),hd[u]=num;\n}\nvoid qvq(int u,int v,int w){\n\tqwq(u,v,w);qwq(v,u,0);\n}\nint tot,S=0,T=1,dis[maxn],q[maxn];\nint bfs(void){\n\tmemset(dis,0,(tot+1)*4);\n\tint fro=0,bac=0;dis[q[bac++]=S]=1;\n\twhile(fro<bac){\n\t\tint u=q[fro++];\n\t\tfor(int i=hd[u];i;i=e[i].nt){\n\t\t\tint v=e[i].v,w=e[i].w;\n\t\t\tif(w&&!dis[v])\n\t\t\t\tdis[q[bac++]=v]=dis[u]+1;\n\t\t}\n\t}\n\treturn dis[T];\n}\nint cur[maxn];\nint dfs(int u,int ep){\n\tif(u==T)return ep;int re=0;\n\tfor(int&i=cur[u];i;i=e[i].nt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(w&&dis[v]==dis[u]+1){\n\t\t\tint tmp=dfs(v,min(ep,w));\n\t\t\tre+=tmp;ep-=tmp;\n\t\t\te[i^1].w+=tmp;e[i].w-=tmp;\n\t\t\tif(!ep)break;\n\t\t}\n\t}\n\treturn re;\n}\nint dinic(void){\n\tint re=0;\n\twhile(bfs()){\n\t\tmemcpy(cur,hd,(tot+1)*4);\n\t\tre+=dfs(S,INF);\n\t}\n\treturn re;\n}\nstring ReVerSe(string s){\n\tstring re=\"\";int len=s.length();\n\tfor(int i=0;i<len;++i)re=s[i]+re;\n\treturn re;\n}\nset<string>s;\nmap<string,int>sp;\nint row[80],col[80],rvr[80],rvc[80];\nchar mp[80][80];\nint main(){\n\tint test;read(test);\n\twhile(test--){\n\t\tint n,m;\n\t\tread(n),read(m);\n\t\tfor(int i=1;i<=n;++i)read(row[i]);\n\t\tfor(int i=1;i<=m;++i)read(col[i]);\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tfor(int j=1;j<=m;++j){\n\t\t\t\tchar c=ch();\n\t\t\t\twhile(c!='_'&&(c<'A'||c>'Z'))c=ch();\n\t\t\t\tmp[i][j]=c;\n\t\t\t}\n\t\t}\n\t\ts.clear();sp.clear();\n\t\tfor(int i=1;i<=n;++i){\n\t\t\trvr[i]=true;\n\t\t\tmp[i][m+1]='_';\n\t\t\tstring str=\"\";\n\t\t\tfor(int j=1;j<=m+1;++j){\n\t\t\t\tif(mp[i][j]=='_'){\n\t\t\t\t\tif(str!=\"\"){\n\t\t\t\t\t\tstring rts=ReVerSe(str);rvr[i]&=(rts<=str);\n\t\t\t\t\t\ts.insert(str),s.insert(rts);\n\t\t\t\t\t}\n\t\t\t\t\tstr=\"\";\n\t\t\t\t}\n\t\t\t\telse str=str+mp[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int j=1;j<=m;++j){\n\t\t\trvc[j]=true;\n\t\t\tmp[n+1][j]='_';\n\t\t\tstring str=\"\";\n\t\t\tfor(int i=1;i<=n+1;++i){\n\t\t\t\tif(mp[i][j]=='_'){\n\t\t\t\t\tif(str!=\"\"){\n\t\t\t\t\t\tstring rts=ReVerSe(str);rvc[j]&=(rts<=str);\n\t\t\t\t\t\ts.insert(str),s.insert(rts);\n\t\t\t\t\t}\n\t\t\t\t\tstr=\"\";\n\t\t\t\t}\n\t\t\t\telse str=str+mp[i][j];\n\t\t\t}\n\t\t}\n\t\ttot=1;int ans=0;\n\t\tmemset(hd,0,sizeof hd);num=1;\n\t\tfor(set<string>::iterator it=s.begin();it!=s.end();++it){\n\t\t\tstring abc=*it,cba=ReVerSe(abc);\n\t\t\tif(abc==cba)++ans;\n\t\t\telse if(abc<cba&&s.find(cba)!=s.end()){\n\t\t\t\tsp[abc]=++tot;sp[cba]=++tot;\n\t\t\t\tqvq(tot-1,tot,2);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;++i){\n\t\t\t++tot;\n\t\t\tif(!row[i])/*continue*/;\n\t\t\telse if((row[i]==1)^(rvr[i]))\n\t\t\t\tqvq(S,tot,inf);\n\t\t\telse\n\t\t\t\tqvq(tot,T,inf);\n\t\t\tstring str=\"\";\n\t\t\tfor(int j=1;j<=m+1;++j){\n\t\t\t\tif(mp[i][j]=='_'){\n\t\t\t\t\tif(str!=\"\"&&sp.find(str)!=sp.end()){\n\t\t\t\t\t\tstring rts=ReVerSe(str);if(rts<str)swap(rts,str);\n\t\t\t\t\t\tqvq(tot,sp[str],inf),qvq(sp[rts],tot,inf);\n\t\t\t\t\t}\n\t\t\t\t\tstr=\"\";\n\t\t\t\t}\n\t\t\t\telse str=str+mp[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int j=1;j<=m;++j){\n\t\t\t++tot;\n\t\t\tif(!col[j])/*continue*/;\n\t\t\telse if((col[j]==1)^(rvc[j]))\n\t\t\t\tqvq(S,tot,inf);\n\t\t\telse\n\t\t\t\tqvq(tot,T,inf);\n\t\t\tstring str=\"\";\n\t\t\tfor(int i=1;i<=n+1;++i){\n\t\t\t\tif(mp[i][j]=='_'){\n\t\t\t\t\tif(str!=\"\"&&sp.find(str)!=sp.end()){\n\t\t\t\t\t\tstring rts=ReVerSe(str);if(rts<str)swap(rts,str);\n\t\t\t\t\t\tqvq(tot,sp[str],inf),qvq(sp[rts],tot,inf);\n\t\t\t\t\t}\n\t\t\t\t\tstr=\"\";\n\t\t\t\t}\n\t\t\t\telse str=str+mp[i][j];\n\t\t\t}\n\t\t}\n\t\twrite(dinic()+ans),pc('\\n');\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1603437392,
        "uid": 230249,
        "name": "xiaolilsq",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 [SDOI2016]\u5899\u4e0a\u7684\u53e5\u5b50"
    },
    {
        "content": "```\n#include<map>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n# define ull unsigned long long\nconst int N = 80 ;\nconst int M = 3005 ;\nconst ull Base = 233 ;\nconst int INF = 1e8 ;\nusing namespace std ;\ninline int read() {\n    char c = getchar() ; int x = 0 , w = 1 ;\n    while(c>'9'||c<'0') { if(c=='-') w = -1 ; c = getchar() ; }\n    while(c>='0'&&c<='9') { x = x*10+c-'0' ; c = getchar() ; }\n    return x*w ;\n}\n\nchar s[N][N] ;\nint n , m , S , T ;\nint ans , cnt , num = 1 ;\nint dirh[N] , dirl[N] , hea[M] ;\nint hnum[N] , lnum[N] , d[M] ;\nint hw[2][N][N] , lw[2][N][N] , isbig[M] ;\null pw[N] , hsh1[N] , hsh2[N] ;\nmap < ull , int > p , hap ;\n\nstruct E {\n    int nxt , to , dis ;\n} edge[M * 20] ; \ninline void Insert_edge(int from , int to , int dis) {\n    edge[++num].nxt = hea[from] ; edge[num].to = to ;\n    edge[num].dis = dis ; hea[from] = num ;\n}\ninline void add_edge(int u , int v , int w) {\n    Insert_edge(u , v , w) ;\n    Insert_edge(v , u , 0) ;\n}\ninline void Clear() {\n    ans = 0 ; cnt = 0 ; num = 1 ;\n    memset(isbig , false , sizeof(isbig)) ;\n    memset(hea , 0 , sizeof(hea)) ;\n    memset(hnum , 0 , sizeof(hnum)) ;\n    memset(lnum , 0 , sizeof(lnum)) ;\n    p.clear() ; hap.clear() ;\n}\n\ninline bool Bfs() {\n    queue < int > q ; q.push(S) ;\n    memset(d , 0 , sizeof(d)) ; d[S] = 1 ;\n    while(!q.empty()) {\n        int u = q.front() ; q.pop() ;\n        for(int i = hea[u] ; i ; i = edge[i].nxt) {\n            int v = edge[i].to ;\n            if(!d[v] && edge[i].dis > 0) {\n                d[v] = d[u] + 1 ;\n                q.push(v) ;\n            }\n        }\n    }\n    return d[T] ;\n}\nint Dfs(int u , int dis) {\n    if(u == T || !dis) return dis ; \n    int Sum = 0 ;\n    for(int i = hea[u] ; i ; i = edge[i].nxt) {\n        int v = edge[i].to ;\n        if(d[v] == d[u] + 1 && edge[i].dis > 0) {\n            int diss = Dfs(v , min(dis , edge[i].dis)) ;\n            if(diss > 0) {\n                edge[i].dis -= diss ; edge[i ^ 1].dis += diss ;\n                dis -= diss ; Sum += diss ; if(!dis) break ;\n            }\n        }\n    }\n    if(!Sum) d[u] = -1 ; \n    return Sum ;\n}\ninline void dinic() {\n    while(Bfs()) \n        ans += Dfs(S , INF) ;\n}\nint main() {\n    int Case = read() ;\n    pw[0] = 1 ; for(int i = 1 ; i <= 75 ; i ++) pw[i] = pw[i - 1] * Base ;\n    while(Case --) {\n        Clear() ;\n        n = read() ; m = read() ;\n        for(int i = 1 ; i <= n ; i ++) dirh[i] = read() ;\n        for(int i = 1 ; i <= m ; i ++) dirl[i] = read() ;\n        for(int i = 1 ; i <= n ; i ++) {\n            scanf(\"%s\",s[i] + 1) ;\n            for(int j = 1 ; j <= m ; j ++)\n                hsh1[j] = hsh1[j - 1] * Base + s[i][j] ;\n            for(int j = m ; j >= 1 ; j --)\n                hsh2[j] = hsh2[j + 1] * Base + s[i][j] ;\n            int lst = 1 ; ull tp1 , tp2 ;\n            for(int j = 1 , l , r  ; j <= m ; j ++) {\n                if(s[i][j] == '_' || j == m) {\n                    l = lst , r = j - 1 ; lst = j + 1 ;\n                    if(s[i][j] != '_') ++ r ; if(l > r) continue ;\n                    tp1 = hsh1[r] - hsh1[l - 1] * pw[r - l + 1] ;\n                    tp2 = hsh2[l] - hsh2[r + 1] * pw[r - l + 1] ;\n                    if(tp1 == tp2) {\n                        if(hap[tp1]) continue ; \n                        ++ ans ; hap[tp1] = 1 ; continue ;\n                    }\n                    if(!p[tp1]) {\n                        int vit1 = 1 ;\n                        for(int k = 1 ; k <= r - l + 1 ; k ++) {\n                            if(s[i][l + k - 1] > s[i][r - k + 1]) break ;\n                            else if(s[i][l + k - 1] < s[i][r - k + 1]) {\n                                vit1 = -1 ;\n                                break ;\n                            }\n                        }\n                        p[tp1] = ++ cnt ; isbig[cnt] = vit1 ;\n                        p[tp2] = ++ cnt ; isbig[cnt] = - vit1 ;\n                    }\n                    hw[0][i][++hnum[i]] = p[tp1] ; hw[1][i][hnum[i]] = p[tp2] ;\n                }\n            }\n        }\n        for(int j = 1 ; j <= m ; j ++) {\n            for(int i = 1 ; i <= n ; i ++)\n                hsh1[i] = hsh1[i - 1] * Base + s[i][j] ;\n            for(int i = n ; i >= 1 ; i --)\n                hsh2[i] = hsh2[i + 1] * Base + s[i][j] ;\n            int lst = 1 ; ull tp1 , tp2 ;\n            for(int i = 1 , l , r ; i <= n ; i ++) {\n                if(s[i][j] == '_' || i == n) {\n                    l = lst , r = i - 1 ; lst = i + 1 ;\n                    if(s[i][j] != '_') ++ r ; if(l > r) continue ;\n                    tp1 = hsh1[r] - hsh1[l - 1] * pw[r - l + 1] ;\n                    tp2 = hsh2[l] - hsh2[r + 1] * pw[r - l + 1] ;\n                    if(tp1 == tp2) {\n                        if(hap[tp1]) continue ;\n                        ++ ans ; hap[tp1] = 1 ; continue ;\n                    }\n                    if(!p[tp1]) {\n                        int vit1 = 1 ;\n                        for(int k = 1 ; k <= r - l + 1 ; k ++) {\n                            if(s[l + k - 1][j] > s[r - k + 1][j]) break ;\n                            else if(s[l + k - 1][j] < s[r - k + 1][j]) {\n                                vit1 = -1 ;\n                                break ;\n                            }\n                        }\n                        p[tp1] = ++ cnt ; isbig[cnt] = vit1 ;\n                        p[tp2] = ++ cnt ; isbig[cnt] = -vit1 ;\n                    }\n                    lw[0][j][++lnum[j]] = p[tp1] ; lw[1][j][lnum[j]] = p[tp2] ;\n                }\n            }\n        }\n        S = 0 , T = cnt + n + m + 1 ;\n        for(int i = 1 , x , y ; i <= cnt ; i += 2) {\n            x = i ; y = i + 1 ;\n            if(isbig[x] == 1) swap(x , y) ;\n            add_edge(x , y , 2) ;\n        }\n        for(int i = 1 ; i <= n ; i ++) {\n            if(!hnum[i]) continue ;\n            if((dirh[i] == 1 && isbig[hw[0][i][1]] < 0) || (dirh[i] == -1 && isbig[hw[1][i][1]] < 0)) {\n                add_edge(S , cnt + i , INF) ;\n                for(int j = 1 ; j <= hnum[i] ; j ++) {\n                    if(dirh[i] == 1) add_edge(cnt + i , hw[0][i][j] , INF) ;\n                    else add_edge(cnt + i , hw[1][i][j] , INF) ;\n                }\n            }\n            else if((dirh[i] == 1 && isbig[hw[0][i][1]] > 0) || (dirh[i] == -1 && isbig[hw[1][i][1]] > 0)) {\n                add_edge(cnt + i , T , INF) ;\n                for(int j = 1 ; j <= hnum[i] ; j ++) {\n                    if(dirh[i] == 1) add_edge(hw[0][i][j] , cnt + i , INF) ;\n                    else add_edge(hw[1][i][j] , cnt + i , INF) ;\n                }\n            }\n            else {\n                for(int j = 1 , x , y ; j <= hnum[i] ; j ++) {\n                    x = hw[0][i][j] , y = hw[1][i][j] ;\n                    if(isbig[x] > 0) swap(x , y) ;\n                    add_edge(cnt + i , x , INF) ;\n                    add_edge(y , cnt + i , INF) ;\n                }\n            }\n        }\n        for(int i = 1 ; i <= m ; i ++) {\n            if(!lnum[i]) continue ;\n            if((dirl[i] == 1 && isbig[lw[0][i][1]] <= 0) || (dirl[i] == -1 && isbig[lw[1][i][1]] <= 0)) {\n                add_edge(S , cnt + n + i , INF) ;\n                for(int j = 1 ; j <= lnum[i] ; j ++) {\n                    if(dirl[i] == 1) add_edge(cnt + n + i , lw[0][i][j] , INF) ;\n                    else add_edge(cnt + n + i , lw[1][i][j] , INF) ;\n                }\n            }\n            else if((dirl[i] == 1 && isbig[lw[0][i][1]] >= 0) || (dirl[i] == -1 && isbig[lw[1][i][1]] >= 0)) {\n                add_edge(cnt + n + i , T , INF) ;\n                for(int j = 1 ; j <= lnum[i] ; j ++) {\n                    if(dirl[i] == 1) add_edge(lw[0][i][j] , cnt + n + i , INF) ;\n                    else add_edge(lw[1][i][j] , cnt + n + i , INF) ;\n                }\n            }\n            else {\n                for(int j = 1 , x , y ; j <= lnum[i] ; j ++) {\n                    x = lw[0][i][j] , y = lw[1][i][j] ;\n                    if(isbig[x] > 0) swap(x , y) ;\n                    add_edge(cnt + n + i , x , INF) ;\n                    add_edge(y , cnt + n + i , INF) ;\n                }\n            }\n        }\n        \n        dinic() ;\n        printf(\"%d\\n\",ans) ;\n    }\n    return 0 ;\n}\n```\n```\n\u6700\u5c0f\u5272\n\n\u597d\u4e45\u4e0d\u5199\u7f51\u7edc\u6d41\u73b0\u5728\u6211\u7684\u7f51\u7edc\u6d41\u6c34\u5e73\u771f\u4f4e==\n\u7136\u540e\u60f3\u4e86\u60f3\u4f3c\u4e4edpdp\u5e76\u4e0d\u5bb9\u6613\u8bb0\u5f55\u72b6\u6001,\u90a3\u5c31\u5e94\u8be5\u662f\u4e00\u4e2a\u7f51\u7edc\u6d41\u4e86\n\u53d1\u73b0\u8981\u6c42\u6b63\u7740\u5012\u7740\u90fd\u5b58\u5728\u7684\u5355\u8bcd\u7684\u5bf9\u6570\u6700\u5c0f\n\u90a3\u4e48\u8981\u4e0d\u662f\u4e2a\u8d39\u7528\u6d41,\u8981\u4e0d\u5c31\u662f\u6700\u5c0f\u5272\uff0c\u8981\u4e0d\u5c31\u662f\u53cd\u9762\u8ba1\u6570\u4e86\n\u7136\u540e\u5206\u6790\u641c\u9898\u89e3\u4e00\u4e0b\u89c9\u5f97\u5e94\u8be5\u662f\u6700\u5c0f\u5272\n\u6700\u5c0f\u5272\u8fde\u7684\u4e00\u6761\u8fb9\u5c31\u8868\u793a\u628ata\u4eec\u5206\u5728\u4e0d\u540c\u96c6\u5408\u7684\u4ee3\u4ef7\n\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u56de\u6587\u4e32\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\u8d21\u732e\u90fd\u662f1\n\u6240\u4ee5\u4e0d\u8003\u8651\u56de\u6587\u4e32\n\u7136\u540e\u8003\u8651\u5176\u4ed6\u7684\u5355\u8bcd\n\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd,\u5982\u679c\u8fd9\u4e2a\u5355\u8bcd\u548c\u7ffb\u8f6c\u540e\u7684\u8fd9\u4e2a\u5355\u8bcd\u540c\u65f6\u51fa\u73b0\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f2\u7684\u8d21\u732e\n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u5bf9\u5355\u8bcd,\u5b57\u5178\u5e8f\u5c0f\u7684\u5f80\u5b57\u5178\u5e8f\u5927\u7684\u5355\u8bcd\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a2\u7684\u8fb9\n\u7136\u540e\u518d\u8003\u8651\u8bfb\u6cd5\u7684\u95ee\u9898\n\u53ef\u4ee5\u53d1\u73b0\u884c\u5217\u6ca1\u5565\u5173\u7cfb,\u6240\u4ee5\u76f8\u540c\u65b9\u6cd5\u8003\u8651\u5373\u53ef\n\u5982\u679c\u7ed9\u5b9a\u8bfb\u6cd5\u662f\u4ece\u5de6\u5f80\u53f3\u4e14\u8fd9\u6837\u8bfb\u7684\u5355\u8bcd\u5b57\u5178\u5e8f\u6bd4\u5012\u7740\u8bfb\u5c0f\n\u90a3\u4e48\u5c31\u4eceSS\u5f80\u8be5\u884c\u8fde\u4e00\u6761INFINF\u7684\u8fb9\uff0c\u7136\u540e\u8fd9\u884c\u5411\u4ece\u5de6\u5f80\u53f3\u8bfb\u7684\u8fd9\u884c\u7684\u5355\u8bcd\u8fde\u4e00\u6761INFINF\u7684\u8fb9\n\u5982\u679c\u7ed9\u5b9a\u8bfb\u6cd5\u662f\u4ece\u5de6\u5f80\u53f3\u4e14\u8fd9\u6837\u8bfb\u7684\u5355\u8bcd\u5b57\u5178\u5e8f\u6bd4\u5012\u7740\u8bfb\u5927\n\u90a3\u4e48\u5c31\u4ece\u8fd9\u4e00\u884c\u4ece\u5de6\u5f80\u53f3\u8bfb\u7684\u5355\u8bcd\u5f80\u8fd9\u4e00\u884c\u8fde\u4e00\u6761INFINF\u7684\u8fb9,\u8fd9\u884c\u5f80TT\u8fde\u4e00\u6761INFINF\u7684\u8fb9\n\u8fd9\u6837\u5728\u8dd1\u6700\u5927\u6d41\u7684\u65f6\u5019\u5982\u679c\u4e00\u79cd\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u8f83\u5c0f\u7684\u90e8\u5206\u6709\u6d41\u91cf\u6d41\u5165\u5c31\u8bf4\u660e\u8bfb\u51fa\u4e86\u8fd9\u4e2a\u5355\u8bcd\n\u5982\u679c\u4e00\u79cd\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u8f83\u5927\u7684\u90e8\u5206\u6709\u6d41\u91cf\u6d41\u5165\u540c\u6837\u4e5f\u8bf4\u660e\u8bfb\u51fa\u4e86\u8fd9\u4e2a\u5355\u8bcd\n\u90a3\u4e48\u8fd9\u6837\u5c31\u8981\u5272\u6389\u8fd9\u6761\u8fde\u7740\u4e24\u4e2a\u5355\u8bcd\u7684\u8fb9\u4ea7\u751f22\u7684\u4ee3\u4ef7\n\u4ece\u53f3\u5f80\u5de6\u8bfb\u4e5f\u662f\u540c\u7406\u7684\n\u90a3\u4e48\u95ee\u9898\u5c31\u662f\u5982\u679cta\u4e0d\u7ed9\u5b9a\u4f60\u8bfb\u6cd5\u5e94\u8be5\u600e\u4e48\u529e?\n\u4e5f\u5c31\u662f\u8bf4ta\u53ef\u4ee5\u6b63\u7740\u8bfb\u4e5f\u53ef\u4ee5\u53cd\u7740\u8bfb\n\u90a3\u4e48\u5c31\u540c\u65f6\u8fdeta\u6b63\u7740\u8bfb\u7684\u8fb9\u548c\u53cd\u7740\u8bfb\u7684\u8fb9\n\u4f46\u662f\u4e0d\u8fdeS,TS,T\u5230ta\u7684\u8fb9\n\u8fd9\u6837\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u7136\u540e\u52a0\u4e0a\u56de\u6587\u4e32\u5c31\u662f\u7b54\u6848\u4e86\n```",
        "postTime": 1556255529,
        "uid": 142305,
        "name": "\u5356\u6deb\u7fc1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4076 \u3010[SDOI2016]\u5899\u4e0a\u7684\u53e5\u5b50\u3011"
    }
]