[
    {
        "content": "# \u964c\u4e0a\u82b1\u5f00\u2014\u2014\u6d45\u8c08CDQ\u5206\u6cbb\n\u4e8b\u5148\u58f0\u660e\uff0c\u6211\u662f\u5728\u6d1b\u8c37\u9898\u89e3\u91cc\u770b\u61c2\u7684\uff0c\u6240\u4ee5\u6211\u7684\u8fd9\u7bc7\u6240\u8c13\u7684\u201c\u9898\u89e3\u201d\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u505a\u5bf9[@_echo_](https://www.luogu.org/space/show?uid=33242)\u5927\u4f6c\u9898\u89e3\u7684\u8865\u5145\u3002\n\n##  \u4ec0\u4e48\u662fCDQ\u5206\u6cbb\nCDQ\u5206\u6cbb\uff0c\u5c31\u662f\u4e00\u79cd\u5206\u6cbb\u601d\u60f3\u3002\u53ef\u80fd\u5ea6\u5a18\u6bd4\u6211\u89e3\u91ca\u5730\u66f4\u6e05\u695a\u3002\u4e3b\u8981\u7528\u6765\u6c42\u504f\u5e8f\u3002\n## \u5927\u4f53\u601d\u8def\n \u5982\u56fe\u6240\u793a\uff1a\n ![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190714152406153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDQxNjQx,size_16,color_FFFFFF,t_70)\n 1. \u5c06\u4e00\u4e2a\u533a\u95f4$[l,r]$\u4e00\u76f4\u5411\u4e0b\u4e8c\u5206\u4e3a$[l,mid]$\u548c$[mid+1,r]$\uff1b\n 2. \u8fd4\u56de\u65f6\u5206\u522b\u5904\u7406\u533a\u95f4$[l,mid]$\u548c$[mid+1,r]$\uff0c\u53cc\u6307\u9488\u5b9e\u73b0\uff0c\u5904\u7406\u65f6\u4ee5**\u5f53\u524d\u503c**\u4e3a\u4e0b\u6807\uff0c**\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570**\u4e3a\u6743\u503c\u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff1b\n 3. \u5408\u5e76\u533a\u95f4$[l,mid]$\u548c$[mid+1,r]$\uff1b\n \u5177\u4f53\u5904\u7406\u65b9\u5f0f\u6211\u4f1a\u5728\u4ee3\u7801\u91cc\u8bb2\u3002\n\n \u662f\u4e0d\u662f\u5f88\u773c\u719f\uff1f\uff1f\uff1f\n \u5176\u5b9e\u5c31\u8ddf\u5f52\u5e76\u6392\u5e8f\u5dee\u4e0d\u591a\u3002\n \n \u4e3a\u4ec0\u4e48\u8981\u7528\u6811\u72b6\u6570\u7ec4\uff1f\n \u56e0\u4e3a\u597d\u6c42\u524d\u7f00\u548c\u554a\u3002\n \n \u8fd9\u91cc\u4ee5\u4e09\u7ef4\u504f\u5e8f\u4e3a\u4f8b\uff0c\u6d45\u8c08CDQ\u5206\u6cbb\u3002\n\n ## \u4f8b\u9898\n \n [\u964c\u4e0a\u82b1\u5f00(\u5f88\u597d\u542c\u7684\u6837\u5b50)](https://www.luogu.org/problemnew/show/P3810)\n\n\u6709$n$\u4e2a\u5143\u7d20\uff0c\u7b2c$i$\u4e2a\u5143\u7d20\u6709$ai$\uff0c$bi$\uff0c$ci$\u4e09\u79cd\u5c5e\u6027\uff0c\u8bbe$f(i)$\u8868\u793a\u6ee1\u8db3$aj<=ai$,$bj<=bi$\u4e14$cj<=ci$\u7684$j$\u7684\u6570\u91cf\u3002\n\u5bf9\u4e8e$d\u2208[0,n)$,\u6c42$f(i)=d$\u7684\u6570\u91cf.\n\n**\u8f93\u5165\u683c\u5f0f\uff1a**\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570$n$\uff0c$k$,\u5206\u522b\u8868\u793a\u5143\u7d20\u6570\u91cf\u548c\u6700\u5927\u5c5e\u6027\u503c **(\u4e0d\u8981\u4ee5\u4e3a$k$\u6ca1\u4ec0\u4e48\u7528\uff0c\u5f85\u4f1a\u513f\u4f1a\u7528)**\u3002\n\u4e4b\u540e$n$\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570$ai$,$bi$\uff0c$ci$\uff0c\u5206\u522b\u8868\u793a\u4e09\u4e2a\u5c5e\u6027\u503c\u3002\n\n**\u8f93\u51fa\u683c\u5f0f\uff1a**\n\u8f93\u51fa$n$\u884c\uff0c\u7b2c$d+1$\u884c\u8868\u793a $f(i) = d$\u7684$i$ \u7684\u6570\u91cf\u3002**(\u6ce8\u610f\u662f\u8f93\u51fa\u7b54\u6848\u4e3a$d$\u7684$i$\u7684\u6570\u91cf)**\n## \u89e3\u6cd5\n\u4e0d\u96be\u770b\u51fa\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u5143\u7d20$i$\uff0c\u6709\u4e09\u4e2a\u7ef4\u5ea6\u3002\n\u8981\u627e\u51fa\u4f7f\u4e09\u4e2a\u7ef4\u5ea6\u90fd\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u9700\u8981\u7528\u5230**\u4e09\u7ef4\u504f\u5e8f**\u3002\u800c\u6211\u5bf9\u4e8e\u4e09\u7ef4\u504f\u5e8f\u7684\u7406\u89e3\u662f\uff1a**\u4e00\u7ef4\u4e00\u7ef4\u5730\u5904\u7406**\u3002\n\n \n\n - \u8bfb\u5165\n \u5f53\u7136\u662f**\u7ed3\u6784\u4f53**\u5566\uff01\n \n```cpp\nstruct node\n{\n\tint a,b,c,cnt,ans;\n}s1[maxn],s2[maxn];\n```\n\n\u5176\u4e2d$a$\u8868\u793a\u7b2c\u4e00\u7ef4\uff0c$b$\u8868\u793a\u7b2c\u4e8c\u7ef4\uff0c$c$\u8868\u793a\u7b2c\u4e09\u7ef4\uff0c$cnt$\u8868\u793a\u76f8\u540c\u5143\u7d20\u4e2a\u6570\uff08\u4e3a\u4ec0\u4e48\u8981\u7edf\u8ba1\u76f8\u540c\u5143\u7d20\u4e2a\u6570\u8bf7\u770b\u9898\u610f\uff09\uff0c$ans$\u8868\u793a\u5bf9\u4e8e\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u3002\n\n- \u8f93\u5165\n\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nscanf(\"%d%d\",&n,&k);\nmx=k;//\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\nfor(int i=1;i<=n;++i)\n{\n\tint a,b,c;\n\tscanf(\"%d%d%d\",&a,&b,&c);\n\ts1[i].a=a;\n\ts1[i].b=b;\n\ts1[i].c=c;\n}//\u521d\u59cb\u5316\u8f93\u5165\n```\n\u5728\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\uff0c$k$\u662f\u6574\u4e2a\u6570\u7ec4\u4e2d\u6743\u503c\u7684\u6700\u5927\u503c\uff0c\u800c\u6811\u72b6\u6570\u7ec4\u7684\u4e0b\u6807 $i$ \u8868\u793a\u7684\u662f\u6743\u503c\u4e3a $i$ \u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002\u6240\u4ee5 $k$ \u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\u7684\u6700\u5927\u503c\u3002\n\n- \u7b2c\u4e00\u7ef4\u5904\u7406\uff08\u4ee5\u7b2c\u4e00\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff09\n\n```cpp\nbool cmp1(node x,node y)\n{\n\tif(x.a==y.a)\n\t{\n\t\tif(x.b==y.b)return x.c<y.c;\n\t\telse return x.b<y.b;\n\t}\n\telse return x.a<y.a;\n}//\u7b2c\u4e00\u7ef4\u6392\u5e8f\n```\n\u4e3b\u51fd\u6570\u5185\uff1a\n```cpp\nsort(s1+1,s1+1+n,cmp1);//\u7b2c\u4e00\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n```\n\n- \u8f6c\u5165CDQ\u6570\u7ec4\n \u5f88\u7b80\u5355\uff0c\u53ea\u9700\u5408\u5e76\u76f8\u540c\u9879\u5c31\u53ef\u4ee5\u4e86\u3002\n \u5176\u4e2d$top$\u53ef\u4ee5\u7406\u89e3\u4e3a\u76f8\u540c\u9879\u7684\u4e2a\u6570\u3002\uff08\u6ce8\u610f\u66f4\u65b0\u5143\u7d20\u4e2a\u6570\uff09\n\n```cpp\nfor(int i=1;i<=n;++i)\n{\n\ttop++;\n\tif(s1[i].a!=s1[i+1].a||s1[i].b!=s1[i+1].b||s1[i].c!=s1[i+1].c)\n\t{\n\t\tm++;//\u66f4\u65b0\u5143\u7d20\u4e2a\u6570\n\t\ts2[m].a=s1[i].a;\n\t\ts2[m].b=s1[i].b;\n\t\ts2[m].c=s1[i].c;\n\t\ts2[m].cnt=top;\n\t\ttop=0;\n\t}\n}//\u7b2c\u4e00\u7ef4\u5df2\u6709\u5e8f,\u5408\u5e76\u76f8\u540c\u8282\u70b9\n```\n\n- \u63a5\u4e0b\u6765\u5c31\u662f\u91cd\u70b9CDQ\u5206\u6cbb\u7684\u90e8\u5206\u4e86\uff01\uff01\uff01\n \n1.\u5411\u4e0b\u4e8c\u5206\uff08\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\uff09\n\n```cpp\nif(l==r)return;\nint mid=(l+r)>>1;\ncdq(l,mid);\ncdq(mid+1,r);//\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\n```\n2.\u5411\u4e0a\u5408\u5e76\n\u7b2c\u4e8c\u7ef4\u5904\u7406\uff1a\u5206\u522b\u628a$[l,mid+1]$\u548c$[mid+1,r]$\u4ee5\u7b2c\u4e8c\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n```cpp\nbool cmp2(node x,node y)\n{\n\tif(x.b==y.b)\n\treturn x.c<y.c;\n\telse return x.b<y.b;\n}//\u7b2c\u4e8c\u7ef4\u6392\u5e8f\n```\nCDQ\u51fd\u6570\u5185\uff1a\n```cpp\nsort(s2+l,s2+mid+1,cmp2);\nsort(s2+mid+1,s2+r+1,cmp2);//\u7b2c\u4e8c\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n```\n\u5206\u533a\u95f4\u6392\u5e8f\u7684\u597d\u5904\uff1a\u4fdd\u8bc1$[l,mid]$\u7684\u7b2c\u4e00\u7ef4\u5927\u4e8e$[mid+1,r]$\u7684\u7b2c\u4e00\u7ef4\uff0c\u5e76\u4e14\u4fdd\u8bc1$[l,mid]$\u5185\u548c$[mid+1,r]$\u5185\u7684\u7b2c\u4e8c\u7ef4\u5355\u8c03\u4e0d\u4e0b\u964d\u3002\n\n\u5efa\u7acb\u53cc\u6307\u9488$i$,$j$\u3002$j$\u6307\u5411$[l,mid]$\u6570\u7ec4\uff0c$i$\u6307\u5411$[mid+1,r]$\u6570\u7ec4\u3002\u6b64\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$s2[i]$\u548c$s2[j]$\uff0c\u5df2\u6709$s2[i]$\u7684\u7b2c\u4e00\u7ef4\u5927\u4e8e\u6216\u7b49\u4e8e$s2[j]$\u7684\u7b2c\u4e00\u7ef4\u3002\u90a3\u4e48for $i$\u4ece$mid+1$\u5230$r$\uff0c\u4e00\u9047\u5230$s2[i].b>=s2[j].b$\u5e76\u4e14$j<=mid$\uff0c\u5c06$s2[j]$\u52a0\u5165\u5230\u4ee5$s2[j].c$\u4e3a\u4e0b\u6807\uff0c$s2[j].cnt$\u4e3a\u6743\u503c\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u6700\u540e\u7edf\u8ba1$s2[i]$\u7684\u7b54\u6848\u3002\n\n```cpp\nint i,j=l;\nfor(i=mid+1;i<=r;++i)\n{\n\twhile(s2[i].b>=s2[j].b&&j<=mid)\n\t{\n\t\tadd(s2[j].c,s2[j].cnt);//\u5728s2[j]\u4f4d\u7f6e\u52a0\u4e0as2[j]\u7684\u4e2a\u6570\n\t\tj++;\n\t}\n\ts2[i].ans+=query(s2[i].c);//\u4fdd\u8bc1\u6811\u72b6\u6570\u7ec4\u91cc\u7684\u6570\u4e00\u5b9a\u7b26\u5408\u6761\u4ef6\n}//\u7c7b\u4f3c\u5f52\u5e76\n```\n\n3.\u6700\u540e\uff0c\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\uff08\u5176\u5b9e\u611f\u89c9\u53ef\u4ee5memset0\u7684\uff09\uff1a\n\n```cpp\nfor(i=l;i<j;++i)\nadd(s2[i].c,-s2[i].cnt);//\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\n```\n- \u7edf\u8ba1\u7b54\u6848\n\u8bbe$su$\u4e3a\u7b54\u6848\u6570\u7ec4\uff08\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e48\u5947\u602a\u7684\u5b57\u6bcd\uff0c\u56e0\u4e3a\u6211\u4e5f\u7f16\u4e0d\u4e0b\u6765\u4e86\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5bf9\u4e8e\u4e0b\u6807$i$,$su[s2[ i ].ans+s2[i].cnt-1]+=s2[i].cnt$\uff0c\u5373$s2[i]$\u7684\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u6bd4$s2[i]$\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\u52a0\u4e0a$s2[i]$\u7684\u5143\u7d20\u603b\u6570\u51cf1\uff0c\u5373$s2[i].ans+s2[i].cnt-1$\uff0c\u52a0\u4e0a$s2[i]$\u7684\u4e2a\u6570\u3002\u6700\u540e\u8f93\u51fa\u5373\u53ef\u3002\n```cpp\nfor(int i=1;i<=m;++i)\nsu[s2[i].ans+s2[i].cnt-1]+=s2[i].cnt;\nfor(int i=0;i<n;++i)\nprintf(\"%d\\n\",su[i]);\n```\n\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define maxn 200005\nusing namespace std;\n\nstruct node\n{\n\tint a,b,c,cnt,ans;\n}s1[maxn],s2[maxn];\nint n,m,k,mx,top,su[maxn];\nint c[maxn];//\u6811\u72b6\u6570\u7ec4\n\nbool cmp1(node x,node y)\n{\n\tif(x.a==y.a)\n\t{\n\t\tif(x.b==y.b)return x.c<y.c;\n\t\telse return x.b<y.b;\n\t}\n\telse return x.a<y.a;\n}//\u7b2c\u4e00\u7ef4\u6392\u5e8f\n\nbool cmp2(node x,node y)\n{\n\tif(x.b==y.b)\n\treturn x.c<y.c;\n\telse return x.b<y.b;\n}//\u7b2c\u4e8c\u7ef4\u6392\u5e8f\n\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\n\nvoid add(int x,int y)\n{\n\twhile(x<=mx)\n\t{\n\t\tc[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n}//\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u52a0\n\nint query(int x)\n{\n\tint sum=0;\n\twhile(x)\n\t{\n\t\tsum+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn sum;\n}//\u6c42\u5355\u70b9\u524d\u7f00\u548c\n//\u6811\u72b6\u6570\u7ec4\u770b\u5f97\u61c2\u5427QAQ\n\nvoid cdq(int l,int r)\n{\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tcdq(l,mid);\n\tcdq(mid+1,r);//\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\n\tsort(s2+l,s2+mid+1,cmp2);\n\tsort(s2+mid+1,s2+r+1,cmp2);//\u7b2c\u4e8c\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n\tint i,j=l;\n\tfor(i=mid+1;i<=r;++i)\n\t{\n\t\twhile(s2[i].b>=s2[j].b&&j<=mid)\n\t\t{\n\t\t\tadd(s2[j].c,s2[j].cnt);//\u5728s2[j]\u4f4d\u7f6e\u52a0\u4e0as2[j]\u7684\u4e2a\u6570\n\t\t\tj++;\n\t\t}\n\t\ts2[i].ans+=query(s2[i].c);//\u4fdd\u8bc1\u6811\u72b6\u6570\u7ec4\u91cc\u7684\u6570\u4e00\u5b9a\u7b26\u5408\u6761\u4ef6\n\t}//\u7c7b\u4f3c\u5f52\u5e76\n\tfor(i=l;i<j;++i)\n\tadd(s2[i].c,-s2[i].cnt);//\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\n}//cdq\u5206\u6cbb\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tmx=k;//\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\ts1[i].a=a;\n\t\ts1[i].b=b;\n\t\ts1[i].c=c;\n\t}//\u521d\u59cb\u5316\u8f93\u5165\n\tsort(s1+1,s1+1+n,cmp1);//\u7b2c\u4e00\u7ef4\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\ttop++;\n\t\tif(s1[i].a!=s1[i+1].a||s1[i].b!=s1[i+1].b||s1[i].c!=s1[i+1].c)\n\t\t{\n\t\t\tm++;\n\t\t\ts2[m].a=s1[i].a;\n\t\t\ts2[m].b=s1[i].b;\n\t\t\ts2[m].c=s1[i].c;\n\t\t\ts2[m].cnt=top;\n\t\t\ttop=0;\n\t\t}\n\t}//\u7b2c\u4e00\u7ef4\u5df2\u6709\u5e8f,\u5408\u5e76\u76f8\u540c\u8282\u70b9\n\tcdq(1,m);//cdq\u5206\u6cbb\n\tfor(int i=1;i<=m;++i)\n\tsu[s2[i].ans+s2[i].cnt-1]+=s2[i].cnt;\n\tfor(int i=0;i<n;++i)\n\tprintf(\"%d\\n\",su[i]);\n\treturn 0;\n}\n```\n\n\u7ec8\u4e8e\u5199\u5b8c\u4e86\uff0c\u597d\u8f9b\u82e6\u554a\uff01\uff01\uff01   \n~~\u7136\u800c\u6211\u8fd8\u662f\u4e2a\u849f\u84bb\u3002~~    \n\u518d\u6b21\u611f\u8c22[@_echo_](https://www.luogu.org/space/show?uid=33242)\u5927\u4f6c\uff01\uff01\uff01",
        "postTime": 1562828811,
        "uid": 117395,
        "name": "Bob_Wang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u8fd9\u5e76\u4e0d\u662f\u5bf9\u52b2\u7684cdq\u5206\u6cbb\u2026\u2026\n\n\u5982\u679c\u60f3\u770b\u66f4\u4e0d\u5bf9\u52b2\u7684\uff0c\u70b9\u8fd9\u91cc-> [:-)](http://www.cnblogs.com/xzyf/p/8466293.html)\n\ncdq\u5206\u6cbb\u6bcf\u6b21\u8ba1\u7b97\u524d\u4e00\u534a\u5bf9\u540e\u4e00\u534a\u7684\u5f71\u54cd\u3002\u5177\u4f53\u5730\uff0c\n\u5047\u8bbe\u4e09\u7ef4\u5206\u522b\u662fx,y,z\uff0c\u5148\u6309x\u6392\u5e8f\u3002\u5206\u6cbb\u65f6\u6bcf\u6b21\u5c06\u524d\u534a\u8fb9\u3001\u540e\u534a\u8fb9\u5206\u522b\u6309y\u6392\u5e8f\u3002\u867d\u7136\u73b0\u5728x\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\uff0c\u4f46\u662f\u524d\u534a\u8fb9\u8fd8\u662f\u90fd\u5c0f\u4e8e\u540e\u534a\u8fb9\u7684\uff0c\u6240\u4ee5\u8981\u662f\u53ea\u8ba1\u7b97\u524d\u534a\u8fb9\u5bf9\u540e\u534a\u8fb9\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u662f\u4e0d\u4f1a\u53d7\u5230x\u7684\u5f71\u54cd\u7684\u3002\u7ef4\u62a4\u540e\u4e00\u534a\u7684\u6307\u9488i\uff0c\u524d\u4e00\u534a\u7684\u6307\u9488j\uff0c\u6bcf\u6b21\u5c06i\u540e\u79fb\u4e00\u4f4d\u65f6\uff0c\u82e5y[j]<=y[i]\u5219\u4e0d\u65ad\u540e\u79fbj\uff0c\u5e76\u4e0d\u65ad\u5c06z[j]\u52a0\u5165\u6811\u72b6\u6570\u7ec4\u3002\u7136\u540e\u518d\u67e5\u8be2\u6811\u72b6\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u6570\u5c0f\u4e8e\u7b49\u4e8ez[i]\u3002 \u6700\u540e\u8981\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\u3002\n\n\u5b83\u6709\u90a3\u4e48\u4e00\u4e9b\u4e9b\u773c\u719f\uff0c\u89e3\u4e00\u7ef4\u504f\u5e8f\u65f6\u5c31\u662f\u5f52\u4ec0\u4e48\u6392\u5e8f\u3002\n\n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define maxn 100010\n#define maxk 200010\n#define ll long long \nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(isdigit(ch)==0 && ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(int x)\n{\n    int f=0;char ch[20];\n    if(!x){puts(\"0\");return;}\n    if(x<0){putchar('-');x=-x;}\n    while(x)ch[++f]=x%10+'0',x/=10;\n    while(f)putchar(ch[f--]);\n    putchar('\\n');\n}\ntypedef struct node\n{\n    int x,y,z,ans,w;\t\n}stnd;\nstnd a[maxn],b[maxn];\nint n,cnt[maxk];\nint k,n_;\nbool cmpx(stnd u,stnd v)\n{\n    if(u.x==v.x)\n    {\n        if(u.y==v.y)\n            return u.z<v.z;\n        return u.y<v.y;\n    }\n    return u.x<v.x;\n}\nbool cmpy(stnd u,stnd v)\n{\n    if(u.y==v.y)\n        return u.z<v.z;\n    return u.y<v.y;\n}\nstruct treearray\n{\n    int tre[maxk],kk;\n    int lwbt(int x){return x&(-x);}\n    int ask(int i){int ans=0; for(;i;i-=lwbt(i))ans+=tre[i];return ans;}\n    void add(int i,int k){for(;i<=kk;i+=lwbt(i))tre[i]+=k;}\n}t;\nvoid cdq(int l,int r)\n{\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    cdq(l,mid);cdq(mid+1,r);\n    sort(a+l,a+mid+1,cmpy);\n    sort(a+mid+1,a+r+1,cmpy);\n    int i=mid+1,j=l;\n    for(;i<=r;i++)\n    {\n        while(a[j].y<=a[i].y && j<=mid)\n            t.add(a[j].z,a[j].w),j++;\n        a[i].ans+=t.ask(a[i].z);\n    }\n    for(i=l;i<j;i++)\n        t.add(a[i].z,-a[i].w);\n}\nint main()\n{\n    n_=read(),k=read();t.kk=k;\n    for(int i=1;i<=n_;i++)\n        b[i].x=read(),b[i].y=read(),b[i].z=read();\n    sort(b+1,b+n_+1,cmpx);\n    int c=0;\n    for(int i=1;i<=n_;i++)\n    {\n        c++;\n        if(b[i].x!=b[i+1].x || b[i].y!=b[i+1].y || b[i].z!=b[i+1].z )\n            a[++n]=b[i],a[n].w=c,c=0;\n    } \n    cdq(1,n); \t\n    for(int i=1;i<=n;i++)\n        cnt[a[i].ans+a[i].w-1]+=a[i].w;\n    for(int i=0;i<n_;i++)\n        write(cnt[i]);\n    return 0;\n}\n\n\n```",
        "postTime": 1519717617,
        "uid": 33242,
        "name": "echo6342",
        "ccfLevel": 0,
        "title": "\u5e76\u4e0d\u5bf9\u52b2\u7684cdq\u5206\u6cbb"
    },
    {
        "content": "\u5176\u5b9ecdq\u5206\u6cbb\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\n\n\u8fd9\u68371d \u6392\u5e8f\uff0c2d cdq\uff0c3d cdq\u7edf\u8ba1\u7b54\u6848\uff0c\u63a8\u800c\u5e7f\u4e4b\uff0c\u56db\u7ef4\u504f\u5e8f\u4e5f\u662f\u4e00\u6837\u9053\u7406\uff0c\u7528cdq\u7edf\u8ba1\u7b54\u6848\uff0c\u548c\u7528cdq\u5916\u5c42\u5d4c\u5957\u51e0\u4e4e\u4e00\u6837\u64cd\u4f5c\n\n```cpp\n    #include<cstdio>\n    #include<cstring>  \n    #include<iostream>  \n    #include<algorithm>\n    #define maxn 100010 \n    using namespace std; \n    int n,k,ans[maxn]={0},d[maxn]={0};\n    struct node{\n        int x,y,z;\n        bool b;\n        int *ans;  \n        inline void get(){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            return;\n        }\n        bool operator==(const node &a)\n        const{  \n            return x==a.x&&y==a.y&&z==a.z;\n        }\n    }a[maxn],b[maxn],c[maxn];\n    inline bool cmp(const node &a, const node &b)  {\n        return a.x<b.x||a.x==b.x&&a.y<b.y||a.x==b.x&&a.y==b.y&&a.z<b.z;  \n    }\n    void merge2(int l,int r){\n        if(l==r)return;\n        int mid=(l+r)>>1;\n        merge2(l,mid);\n        merge2(mid+1,r);\n        for(int i=l,j=l,k=mid+1,cnt=0;i<=r;++i){\n            if((k>r||b[j].z<=b[k].z)&&j<=mid)\n            c[i]=b[j++],cnt+=c[i].b;\n            else{\n                c[i]=b[k++];\n                if(!c[i].b)*c[i].ans+=cnt;\n            }\n        }\n        for(int i=l;i<=r;++i)b[i]=c[i];\n    }\n    void merge1(int l,int r){\n        if(l==r)return;\n        int mid=(l+r)>>1;\n        merge1(l,mid);\n        merge1(mid+1,r);\n        for(int i=l,j=l,k=mid+1;i<=r;++i){\n            if((k>r||a[j].y<=a[k].y)&&j<=mid)\n            b[i]=a[j++],b[i].b=1;\n            else\n            b[i]=a[k++],b[i].b=0;\n        }\n        for(int i=l;i<=r;++i)a[i]=b[i];\n        merge2(l,r);\n    }\n    int main(){\n        scanf(\"%d%d\",&n,&k);\n        for(int i=1;i<=n;++i)\n        a[i].get(),a[i].ans=&ans[i],ans[i]=0;\n        sort(a+1,a+n+1,cmp);\n        for(int i=n-1;i;--i)\n        if(a[i]==a[i+1])\n        *a[i].ans=*a[i+1].ans+1;\n        merge1(1,n);\n        for(int i=1;i<=n;++i)++d[ans[i]];\n        for(int i=0;i<n;++i)\n        printf(\"%d\\n\",d[i]);\n        return 0;\n}\n```",
        "postTime": 1515551275,
        "uid": 39216,
        "name": "Shadows",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\u3011"
    },
    {
        "content": "\u5b89\u5229\u849f\u84bb[CDQ\u5206\u6cbb\u603b\u7ed3](https://www.cnblogs.com/flashhu/p/9381075.html)\n\n\u5206\u6cbb\u5c31\u662f\u5206\u6cbb\uff0c\u201c\u5206\u800c\u6cbb\u4e4b\u201d\u7684\u601d\u60f3\u3002\n\n\u90a3\u4e3a\u4ec0\u4e48\u4f1a\u6709CDQ\u5206\u6cbb\u8fd9\u6837\u7684\u79f0\u547c\u5462\uff1f\n\n\u8fd9\u4e00\u7c7b\u5206\u6cbb\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u601d\u60f3\u2014\u2014\u7528\u4e00\u4e2a\u5b50\u95ee\u9898\u6765\u8ba1\u7b97\u5bf9\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u8d21\u732e\u3002\n\n\u6709\u4e86\u8fd9\u79cd\u601d\u60f3\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u89e3\u51b3\u66f4\u590d\u6742\u7684\u95ee\u9898\u3002\n\n\u8fd9\u6837\u4e00\u53e5\u8bdd\u600e\u6837\u7406\u89e3\u597d\u5462\uff1f\u8fd8\u662f\u505a\u505a\u9898\u76ee\u5427\u3002\n\n\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u5373\u7ed9\u51fa\u82e5\u5e72\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u6709\u4e09\u4e2a\u5c5e\u6027\u503c$a,b,c$\uff0c\u8be2\u95ee\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20$i$\uff0c\u6ee1\u8db3$a_j\\leq a_i,b_j\\leq b_i,c_j\\leq c_i$\u7684$j$\u7684\u4e2a\u6570\n\n\u4e0d\u7528\u7740\u6025\uff0c\u5148\u4ece\u7b80\u5355\u7684\u95ee\u9898\u5f00\u59cb\n\n\u8bd5\u60f3\u4e00\u4e0b\u4e8c\u4f4d\u504f\u5e8f\u4e5f\u5c31\u662f$a_j\\leq a_i,b_j\\leq b_i$\u600e\u4e48\u505a\n\n\u5148\u6309$a$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$b$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4fdd\u8bc1\u4e86\u7b2c\u4e00\u7ef4$a$\u7684\u6709\u5e8f\u3002\n\n\u4e8e\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$i$\uff0c\u53ea\u53ef\u80fd$1$\u5230$i-1$\u7684\u5143\u7d20\u4f1a\u5bf9\u5b83\u6709\u8d21\u732e\uff0c\u90a3\u4e48\u76f4\u63a5\u67e5$1$\u5230$i-1$\u7684\u5143\u7d20\u4e2d\u6ee1\u8db3$b_j\\leq b_i$\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u5177\u4f53\u5b9e\u73b0\uff1f\u52a8\u6001\u7ef4\u62a4$b$\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u4ece\u524d\u5230\u540e\u626b\u4e00\u904d\u597d\u5566\uff0c$O(n\\log n)$\u3002\n\n\u90a3\u4e48\u4e09\u7ef4\u504f\u5e8f\u5462\uff1f\u6211\u4eec\u53ea\u6709\u5728\u4fdd\u8bc1\u524d\u4e24\u4f4d\u90fd\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u8ba1\u7b97\u7b54\u6848\u4e86\u3002\n\n\u4ecd\u7136\u6309$a$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$b$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c$c$\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7b2c\u4e00\u7ef4\u4fdd\u8bc1\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u4e86\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u7b2c\u4e8c\u7ef4\u4e5f\u662f\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6392\u5e8f\u3002\n\n\u60f3\u5230\u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u4e2a\u5206\u6cbb\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u5728\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7edf\u8ba1\u51fa\u5728\u5b50\u95ee\u9898\u4e2d\u4ea7\u751f\u7684\u5bf9\u7b54\u6848\u8d21\u732e\u5462\uff1f\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u628a\u5b83\u9012\u5f52\u5206\u6210\u4e24\u4e2a\u5b50\u95ee\u9898\uff0c\u5b50\u95ee\u9898\u8fdb\u884c\u5b8c\u5f52\u5e76\u6392\u5e8f\uff0c\u5df2\u7ecf\u4fdd\u8bc1$b$\u6709\u5e8f\u3002\u6b64\u65f6\uff0c\u4e24\u4e2a\u5b50\u95ee\u9898\u95f4\u6709\u4e00\u4e2a\u5206\u754c\u7ebf\uff0c\u539f\u6765\u7b2c\u4e00\u7ef4\u5de6\u8fb9\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\uff0c\u6240\u4ee5\u73b0\u5728\u5206\u754c\u7ebf\u5de6\u8fb9\u7684\u4efb\u610f\u4e00\u4e2a\u7684$a$\u5f53\u7136\u8fd8\u662f\u90fd\u5c0f\u4e8e\u53f3\u8fb9\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u90a3\u4e0d\u7b49\u4e8e\u8bf4\uff0c\u53ea\u6709\u5206\u754c\u7ebf\u5de6\u8fb9\u7684\u80fd\u5bf9\u53f3\u8fb9\u7684\u4ea7\u751f\u8d21\u732e\uff1f\n\n\u4e8e\u662f\uff0c\u95ee\u9898\u964d\u5230\u4e86\u4e8c\u7ef4\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u6392\u5e8f\u4e86\uff0c\u5f52\u5e76\u6392\u5e8f\uff08\u5de6\u8fb9\u7684\u6307\u9488\u4e3a$j$\uff0c\u53f3\u8fb9\u7684\u4e3a$i$\uff09\u5e76\u7ef4\u62a4$c$\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d$b_j\\leq b_i$\uff0c\u8bf4\u660e$j$\u53ef\u4ee5\u5bf9\u540e\u9762\u52a0\u5165\u7684\u6ee1\u8db3$c_j\\leq c_i$\u7684$i$\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\u628a$c_j$\u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff1b\u5426\u5219\uff0c\u56e0\u4e3a\u540e\u9762\u52a0\u5165\u7684$j$\u90fd\u4e0d\u4f1a\u5bf9$i$\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\u6240\u4ee5\u5c31\u8981\u7edf\u8ba1\u4e4b\u524d\u88ab\u7ed9\u7684\u6240\u6709\u8d21\u732e\u4e86\uff0c\u67e5\u8be2\u6811\u72b6\u6570\u7ec4$c_i$\u7684\u524d\u7f00\u548c\u3002\n\n\u8fd9\u662f\u5728\u5206\u6cbb\u4e2d\u7edf\u8ba1\u7684\u5b50\u95ee\u9898\u7684\u7b54\u6848\uff0c\u8ddf\u603b\u7b54\u6848\u6709\u600e\u6837\u7684\u5173\u7cfb\u5462\uff1f\u5bb9\u6613\u53d1\u73b0\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u7edf\u8ba1\u7684\u53ea\u6709\u8de8\u8d8a\u5206\u754c\u7ebf\u7684\u8d21\u732e\uff0c\u53cd\u8fc7\u6765\u770b\uff0c\u6bcf\u4e00\u4e2a\u80fd\u4ea7\u751f\u8d21\u732e\u7684$i,j$\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u4e24\u8005\u65e2\u540c\u65f6\u88ab\u5305\u542b\uff0c\u53c8\u5728\u5206\u754c\u7ebf\u7684\u5f02\u4fa7\u3002\u90a3\u4e48\u6240\u6709\u5b50\u95ee\u9898\u7684\u8d21\u732e\u52a0\u8d77\u6765\u5c31\u662f\u603b\u7b54\u6848\u3002\n\n\u7b97\u6cd5\u7684\u5927\u81f4\u601d\u8def\u5c31\u662f\u8fd9\u6837\u5566\u3002\u81f3\u4e8e\u590d\u6742\u5ea6\uff0c$T(n)=O(n\\log k)+2T(\\frac 2 n)=O(n\\log n\\log k)$\u3002\n\n\u5f53\u7136\u8fd8\u6709\u4e0d\u5c11\u7ec6\u8282\u95ee\u9898\u3002\n\n\u6700\u5927\u7684\u95ee\u9898\u5c31\u5728\u4e8e\uff0c\u53ef\u80fd\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u672c\u6765\u5b83\u4eec\u76f8\u4e92\u4e4b\u95f4\u90fd\u6709\u8d21\u732e\uff0c\u53ef\u662fcdq\u7684\u8fc7\u7a0b\u4e2d\u53ea\u6709\u5de6\u8fb9\u7684\u80fd\u8d21\u732e\u53f3\u8fb9\u7684\u3002\u8fd9\u53ef\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u628a\u5e8f\u5217\u53bb\u91cd\uff0c\u8fd9\u6837\u73b0\u5728\u5c31\u6ca1\u6709\u76f8\u540c\u7684\u4e86\u3002\u7ed9\u73b0\u5728\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u4e2a\u6743\u503c$v$\u7b49\u4e8e\u51fa\u73b0\u7684\u6b21\u6570\u3002\u4e2d\u95f4\u7684\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u4e5f\u7a0d\u6709\u53d8\u5316\uff0c\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u63d2\u5165\u7684\u503c\u662f$v$\u800c\u4e0d\u662f$1$\u4e86\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u4e5f\u8981\u7b97\u4e0a\u76f8\u540c\u5143\u7d20\u5185\u90e8\u7684\u8d21\u732e\uff0c`ans+=v-1`\u3002\n\n\u5199\u6cd5\u4e0a\uff0c\u4e3a\u4e86\u9632\u6b62sort\u548c\u5f52\u5e76\u6392\u5e8f\u4e2d\u7a7a\u95f4\u79fb\u52a8\u592a\u9891\u7e41\uff0c\u6ca1\u6709\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5c01struct\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u8981\u819c\u6539\u4e00\u4e0bcmp\u51fd\u6570\uff08\u849f\u84bb\u4e5f\u662f\u7b2c\u4e00\u6b21\u53d1\u73b0cmp\u53ef\u4ee5\u8fd9\u4e48\u5199\uff09\n\n\u849f\u84bb\u8fd8\u662f\u89c9\u5f97\u5f00\u533a\u95f4\u597d\u5199\u4e00\u4e9b\u5427\u3002\u3002\u3002\u5f53\u7136\u95ed\u533a\u95f4\u597d\u7406\u89e3\u4e9b\u3002\u3002\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define RG register\n#define R RG int\nusing namespace std;\nconst int N=1e5+9,SZ=2.2e6;\nchar buf[SZ],*pp=buf-1;//fread\u5fc5\u5907\nint k,a[N],b[N],c[N],p[N],q[N],v[N],cnt[N],ans[N],*e;\ninline int in(){\n    while(*++pp<'-');\n    R x=*pp&15;\n    while(*++pp>'-')x=x*10+(*pp&15);\n    return x;\n}\nvoid out(R x){\n    if(x>9)out(x/10);\n    *++pp=x%10|'0';\n}\ninline bool cmp(R x,R y){//\u76f4\u63a5\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u6ce8\u610f\u4e09\u5173\u952e\u5b57\n    return a[x]<a[y]||(a[x]==a[y]&&(b[x]<b[y]||(b[x]==b[y]&&c[x]<c[y])));\n}\ninline void upd(R i,R v){//\u6811\u72b6\u6570\u7ec4\u4fee\u6539\n    for(;i<=k;i+=i&-i)e[i]+=v;\n}\ninline int ask(R i){//\u6811\u72b6\u6570\u7ec4\u67e5\u524d\u7f00\u548c\n    R v=0;\n    for(;i;i-=i&-i)v+=e[i];\n    return v;\n}\nvoid cdq(R*p,R n){//\u5904\u7406\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b50\u95ee\u9898\n    if(n==1)return;\n    R m=n>>1,i,j,k;\n    cdq(p,m);cdq(p+m,n-m);//\u9012\u5f52\u5904\u7406\n    memcpy(q,p,n<<2);//\u5f52\u5e76\u6392\u5e8f\n    for(k=i=0,j=m;i<m&&j<n;++k){\n        R x=q[i],y=q[j];\n        if(b[x]<=b[y])upd(c[p[k]=x],v[x]),++i;//\u5de6\u8fb9\u5c0f\uff0c\u63d2\u5165\n        else  cnt[y]+=ask(c[p[k]=y])     ,++j;//\u53f3\u8fb9\u5c0f\uff0c\u7b97\u8d21\u732e\n    }\n    for(;j<n;++j)cnt[q[j]]+=ask(c[q[j]]);//\u6ce8\u610f\u6b64\u65f6\u53ef\u80fd\u6ca1\u6709\u5b8c\u6210\u7edf\u8ba1\n    memcpy(p+k,q+i,(m-i)<<2);\n    for(--i;~i;--i)upd(c[q[i]],-v[q[i]]);//\u5fc5\u987b\u8fd9\u6837\u8fd8\u539f\u6811\u72b6\u6570\u7ec4\uff0cmemset\u662fO(n^2)\u7684\n}\nint main(){\n    fread(buf,1,SZ,stdin);\n    R n=in(),i,j;k=in();e=new int[k+9];\n    for(i=0;i<n;++i)\n        p[i]=i,a[i]=in(),b[i]=in(),c[i]=in();\n    sort(p,p+n,cmp);\n    for(i=1,j=0;i<n;++i){\n        R x=p[i],y=p[j];++v[y];//\u6a21\u4effunique\u53cc\u6307\u9488\u53bb\u91cd\uff0c\u7edf\u8ba1v\n        if(a[x]^a[y]||b[x]^b[y]||c[x]^c[y])p[++j]=x;\n    }\n    ++v[p[j++]];\n    cdq(p,j);\n    for(i=0;i<j;++i)\n        ans[cnt[p[i]]+v[p[i]]-1]+=v[p[i]];//\u7b54\u6848\u7b97\u597d\n    for(pp=buf-1,i=0;i<n;++i)\n        out(ans[i]),*++pp='\\n';\n    fwrite(buf,1,pp-buf+1,stdout);\n}\n```\n",
        "postTime": 1532745521,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u90fd\u6ca1\u6709bitset\u7684\u5199\u6cd5\uff0c\u867d\u7136bitset\u4e0d\u80fd\u591f\u8fc7\u8fd9\u9053\u9898\u76ee\uff0c\u4f46\u662f\u5bf9\u4e8e\u7ef4\u6570\u66f4\u9ad8\u6216\u8005\u8981\u6c42\u5f3a\u5236\u5728\u7ebf\u7684\u9898\u76ee\uff0cbitset\u6709\u5f88\u5927\u4f18\u52bf\uff0c\u6211\u4eec\u5e94\u8be5\u5b66\u4e60\u3002\nbitset\u53ea\u662f\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u800c\u5df2\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u672c\u8d28\u662f\u66b4\u529b\u3002\u7136\u540e\u7528\u5206\u5757\u4f18\u5316\u66b4\u529b\u3002\n\u8fd9\u4e2a\u7b97\u6cd5\u80fd\u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u80fd\u4e0e\u5176\u4ed6\u51e0\u4e2a\u5143\u7d20\u6784\u6210\u504f\u5e8f\u5173\u7cfb\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\u7684\u505a\u6cd5\u662f\uff1a\n1. \u5bf9\u4e8e\u9664\u81ea\u5df1\u4ee5\u5916\u7684\u6240\u6709\u5143\u7d20\uff0c\u628a\u5c5e\u6027a\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u5c5e\u6027a\u7684\u503c\u7684\u5143\u7d20\u7684\u7f16\u53f7\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\u3002\uff08\u53cd\u8fc7\u6765\u8bf4\uff0c\u8fd9\u4e2a\u96c6\u5408\u91cc\u5b58\u653e\u7684\u90fd\u662f\u5143\u7d20\u7684\u7f16\u53f7\uff0c\u91cc\u9762\u7684\u7f16\u53f7\u6307\u5411\u7684\u5143\u7d20\u7684\u5c5e\u6027a\u7684\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u5c5e\u6027a\u7684\u503c\uff0c\u4e14\u7f16\u53f7\u4e0d\u5728\u6b64\u96c6\u5408\u7684\u5143\u7d20\u7684\u5c5e\u6027a\u7684\u503c\u4e00\u5b9a\u5927\u4e8e\u81ea\u5df1\u7684\u5c5e\u6027a\u7684\u503c\uff09\n2. \u540c\u7406\u6784\u9020b\u96c6\u5408\n3. \u540c\u7406\u6784\u9020c\u96c6\u5408\n4. \u2026\u2026\uff08\u591a\u5c11\u79cd\u5c5e\u6027\u6211\u4eec\u5c31\u5904\u7406\u51fa\u591a\u5c11\u4e2a\u96c6\u5408\u3002\u628a\u5143\u7d20\u7684\u7f16\u53f7\u5927\u5c0f\u5f53\u4f5c\u5c5e\u6027\u503c\u4e5f\u53ef\u4ee5\u3002\uff09\n5. \u628a\u6784\u9020\u7684\u6240\u6709\u96c6\u5408\u4ea4\u5728\u4e00\u8d77\uff0c\u5f97\u5230\u7684\u96c6\u5408\u91cc\u9762\u7684\u6bcf\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u5143\u7d20\u90fd\u548c\u81ea\u5df1\u6784\u6210\u504f\u5e8f\u5173\u7cfb\u3002\u56e0\u4e3a\u80fd\u591f\u5728\u4ea4\u96c6\u4e2d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u5fc5\u5b9a\u5176\u6bcf\u4e2a\u5c5e\u6027\u503c\u90fd\u4e0d\u8d85\u8fc7\u81ea\u5df1\u5bf9\u5e94\u7684\u6bcf\u4e2a\u5c5e\u6027\u503c\uff0c\u7b26\u5408\u9898\u610f\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=100000,maxk=3,maxblock=320,inf=0x3f3f3f3f;\nint maxsize,n,k,length,belong[maxn+5],ans[maxn+5],temp[maxn+5];\nstruct Demension {\n\tint value[maxn+5],size;\n\tvector<int> list[maxn+5];\n\tbitset<maxn+5> PreBlock[maxblock+5];//\u50a8\u5b58\u524di\u4e2a\u5757\u7684\u7b54\u6848\n\tvoid Discretization() {//\u5c06\u5143\u7d20\u5728\u5f53\u524d\u7ef4\u5ea6\u7684\u5c5e\u6027\u503c\u79bb\u6563\u5316\n\t\tint i;\n\t\tmemcpy(temp+1,value+1,n<<2);\n\t\tsort(temp+1,temp+1+n);\n\t\tsize=unique(temp+1,temp+1+n)-(temp+1);\n\t\tmaxsize=max(maxsize,size);\n\t\tfor(i=1; i<=size; ++i)\n\t\t\tlist[i].clear();\n\t\tfor(i=1; i<=n; ++i)\n\t\t\tlist[(value[i]=lower_bound(temp+1,temp+1+size,value[i])-temp)].push_back(i);\n\t}\n\tbitset<maxn+5> Get(int p) {//\u5f53\u524d\u7ef4\u5ea6\u4e0b\uff0c\u5c5e\u6027\u503c\u5c0f\u4e8e\u5143\u7d20p\u7684\u5c5e\u6027\u503c\u7684\u5143\u7d20\u7684\u7f16\u53f7\u96c6\u5408\n\t\tint i,j,temp;\n\t\tp=value[p];\n\t\tbitset<maxn+5> res=PreBlock[belong[p]-1];\n\t\tfor(i=(belong[p]-1)*length+1; i<=p; ++i) {\n\t\t\ttemp=list[i].size();\n\t\t\tfor(j=0; j<temp; ++j)\n\t\t\t\tres.set(list[i][j]);\n\t\t}\n\t\treturn res;\n\t}\n} demension[maxk+5];\ninline void Calc();\ninline void Input();\ninline void Work();\ninline void Read(int &x);\nvoid Print(int x);\nint main() {\n\tInput();\n\tCalc();\n\tWork();\n\treturn 0;\n}\nvoid Calc() {\n\tint i,j,t,m;\n\tbitset<maxn+5> temp;\n\tfor(i=1; i<=k; ++i)\n\t\tdemension[i].Discretization();//\u79bb\u6563\u5316\n\tlength=sqrt(maxsize);\n\tfor(i=1; i<=maxsize; ++i)\n\t\tbelong[i]=(i-1)/length+1;//\u503c\u57df\u5206\u5757\n\tfor(i=1; i<=k; ++i) {\n\t\tdemension[i].PreBlock[0].reset();\n\t\ttemp.reset();\n\t\tfor(j=1; j<=demension[i].size; ++j) {\n\t\t\tm=demension[i].list[j].size();\n\t\t\tfor(t=0; t<m; ++t)\n\t\t\t\ttemp.set(demension[i].list[j][t]);\n\t\t\tif(belong[j]^belong[j+1])//\u6743\u503c\u6570\u7ec4\uff0c\u628a\u5c5e\u6027\u503c\u7684\u8303\u56f4\u8fdb\u884c\u5206\u5757,\u7b2ci\u5757\u50a8\u5b58\u4e86\u524di\u5757\u7684\u4fe1\u606f\n\t\t\t\tdemension[i].PreBlock[belong[j]]=temp;\n\t\t}\n\t}\n}\nvoid Work() {\n\tint i,j;\n\tbitset<maxn+5> temp;\n\tfor(i=1; i<=n; ++i) {\n\t\ttemp.set();\n\t\tfor(j=1; j<=k; ++j)\n\t\t\ttemp&=demension[j].Get(i);\n\t\t++ans[temp.count()-1];\n\t}\n\tfor(i=0; i<n; ++i) {\n\t\tPrint(ans[i]);\n\t\tputchar('\\n');\n\t}\n}\ninline void Input() {\n\tint i,j;\n\tscanf(\"%d%d\",&n,&k);//n\u4e2a\u5143\u7d20\uff0ck\u4e2a\u5c5e\u6027\n\tk=3;\n\tfor(i=1; i<=n; ++i)\n\t\tfor(j=1; j<=k; ++j)\n\t\t\tRead(demension[j].value[i]);\n}\ninline void Read(int &x) {\n\tx=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\tdo {\n\t\tx=(x<<3)+(x<<1)+(48^c);\n\t\tc=getchar();\n\t} while(isdigit(c));\n}\nvoid Print(int x) {\n\tif(x>9)\n\t\tPrint(x/10);\n\tputchar(48^(x%10));\n}\n```\nUpdate 2019.10.27:\u4fee\u6539\u539f\u4ee3\u7801\u7684\u7801\u98ce",
        "postTime": 1551159720,
        "uid": 32663,
        "name": "1LoveNozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "[\u6233\u6211](https://www.cnblogs.com/hbxblog/p/10138165.html)\u98df\u7528\u6548\u679c\u66f4\u52a0\n####**\u524d\u8a00**\n> \u964c\u4e0a\u82b1\u5f00\uff0c\u53ef\u7f13\u7f13\u5f52\u77e3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u2014\u2014\u5434\u8d8a\u738b\n\n1. \u5bd3\u610f\uff1a\u610f\u601d\u662f\uff1a\u7530\u95f4\u9621\u964c\u4e0a\u7684\u82b1\u5f00\u4e86\uff0c\u4f60\u53ef\u4ee5\u4e00\u8fb9\u8d4f\u82b1\uff0c\u4e00\u8fb9\u6162\u6162\u56de\u6765\u3002  \n2. \u9690\u610f:\u6625\u5929\u90fd\u5230\u4e86\uff0c\u4f60\u600e\u4e48\u8fd8\u6ca1\u6709\u56de\u6765\u3002\u5f62\u5bb9\u5434\u8d8a\u738b\u671f\u76fc\u592b\u4eba\u65e9\u65e5\u5f52\u6765\u7684\u6025\u5207\u5fc3\u60c5\u3002  \n\nAsk:\u90a3\u4e48\u8fd9\u548ccdq\u6709\u4ec0\u4e48\u5173\u7cfb\u5462?  \nAnswer:~~\u5e76\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u589e\u5f3a\u8bed\u6587\u6c34\u5e73\u800c\u5df2~~\uff0c\u73b0\u5728\u6765\u770b\u4e00\u5230\u9898\u76ee:[\u964c\u4e0a\u82b1\u5f00](https://www.lydsy.com/JudgeOnline/problem.php?id=3262)\u3002\u8fd9\u5c31\u6709\u5173\u7cfb\u4e86\u5427\u3002\n\n\u9898\u76ee\u5927\u610f\u662f:\u6709$n$\u4e2a\u5143\u7d20\uff0c\u7b2c$i$\u4e2a\u5143\u7d20\u6709$a_i,b_i,c_i$\u4e09\u4e2a\u5c5e\u6027\uff0c\u8bbe$f(i)$\u8868\u793a\u6ee1\u8db3$a_j\u2264a_i$\u4e14$b_j\u2264b_i$\u4e14$c_j\u2264c_i$\u7684$j$\u7684\u6570\u91cf\u3002\u6c42$f(i)=d$\u7684\u6570\u91cf$d\\in[0,n)$  \n\n\u505a\u6cd51\uff1a\u66b4\u529b\n$O(n^2)$\u7684\u626b\u4e00\u904d\u6c42\u4e00\u4e0b\u5c31\u597d\u4e86\u3002  \n\n```cpp\n#include<bits/stdc++.h>\nint k,n,f[200001],a[200001],b[200001],c[200001],ans;\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d%d\",&a[i],&b[i],&c[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(a[j]<=a[i]&&b[j]<=b[i]&&c[j]<=c[i]&&i!=j)\n\t\t\t\tans++;\n\t\tf[ans]++,ans=0;\n\t}\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%d\\n\",f[i]);\n}\n```\n\n\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u9700\u8981\u591a\u8bb2\u5427,\u666e\u53ca\u7ec4\u7684\u96be\u5ea6\uff0c\u4f46\u4e0d\u8981\u8bf4\u4e0d\u9700\u8981\uff0c\u4f60\u5728\u5bf9\u62cd\u7684\u65f6\u5019\u5c31\u9700\u8981\u4ed6\u4e86  \n\n\u505a\u6cd52\uff1a K-DTree  \n\n~~\u4e0d\u4f1a,\u6211tcl~~  \n\n\u505a\u6cd5\u4e09\uff1acdq\u5206\u6cbb  \n\n\u73b0\u5728\u6765\u6b63\u5f0f\u8bb2\u4e00\u8bb2cdq\u5206\u6cbb\n\n### cdq\u5206\u6cbb\n\n####\u524d\u7f6e\u8981\u6c42\uff1a\n\n1. [\u6811\u72b6\u6570\u7ec4](https://www.cnblogs.com/hbxblog/p/9866972.html)\n2. [\u57fa\u7840\u5206\u6cbb](http://baidu.physton.com/?q=\u53bb\u666e\u53ca\u7ec4\u5427,\u8fd9\u4e0d\u662f\u4f60\u6539\u6765\u7684\u5730\u65b9)\n3. [\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9](https://www.cnblogs.com/hbxblog/p/10138151.html)\n\n\u9006\u5e8f\u5bf9\u7684\u95ee\u9898\u662f\u4e8c\u7ef4\u7684,\u6211\u4eec\u53ea\u9700\u8981\u8bb2\u4e00\u7ef4\u6392\u5e8f\uff0c\u7136\u540e\u5728\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002  \n\u90a3\u4e48\u5bf9\u4e8e\u4e09\u7ef4\u7684\u964c\u4e0a\u82b1\u5f00\u5462?\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u9996\u5148\u5148\u5c06\u6570\u5217\u6309\u7b2c\u4e00\u4f4d\u6392\u5e8f\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e24\u7ef4\u7684\u60c5\u51b5\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5206\u6cbb\u505a\u4e86\uff0c\u5c06\u67d0\u4e00\u4e2a\u5e8f\u5217$[l,r]$,\u5206\u6210\u6bb5$[l,mid]$\u548c$[mid+1,r]$,\u7136\u540e\u5728\u5bf9$[l,r]$\u8fd9\u6bb5\u533a\u95f4\u7684\u7b2c\u4e8c\u7ef4\u8fdb\u884c\u6392\u5e8f\u3002\u82e5\u70b9\u5728\u6392\u5e8f\u524d\u5c5e\u4e8e$[l,mid]$,\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539\uff1b\u5426\u5219\u8be5\u70b9\u5728\u6392\u5e8f\u524d\u5c5e\u4e8e$[m+1,r]$,\u4fbf\u7edf\u8ba1\u4e00\u6b21\u3002(\u5176\u5b9e\u5c31\u662f\u7c7b\u4f3c\u4e8e\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9\u7684\u64cd\u4f5c)\n\n**\u4e00\u5b9a\u8981\u8bb0\u5f97\u53bb\u91cd\uff0c\u5426\u5219\u4f1a\u51fa\u4e8b\u7684**\n\n#### code \n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200001;\nstruct node{\n\tint x,y,z,id;\n}a[N];\nint c[N<<2],k,n,b[N],bj[N],f[N];\nint lowbit(int x){\n\treturn x&(-x);\n}\nint read(){\n    int x=0,f=1;\n\tchar c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nvoid add(int x,int v){\n\twhile(x<=k)\n\t\tc[x]+=v,x+=lowbit(x);\n}\nint sum(int x){\n\tint ans=0;\n\twhile(x)\n\t\tans+=c[x],x-=lowbit(x);\n\treturn ans;\n}\nbool cmp1(const node & a , const node & b ){\n\tif(a.x!=b.x)\n\t\treturn a.x<b.x;\n\tif(a.y!=b.y)\n\t\treturn a.y<b.y;\n\treturn a.z<b.z;\n}\nbool cmp2(const node & a , const node & b ){\n\tif(a.y!=b.y)\n\t\treturn a.y<b.y;\n\tif(a.z!=b.z)\n\t\treturn a.z<b.z;\n\treturn a.x<b.x;\n}\nvoid cdq(int l,int r){\n\tif(l==r)\n\t\treturn ;\n\tint mid=(l+r)>>1,flag;\n\tcdq(l,mid),cdq(mid+1,r);\n\tsort(a+l,a+r+1,cmp2);\n\tfor(int i=l;i<=r;i++)\n\t\t(a[i].x<=mid)?add(a[i].z,1),flag=i:b[a[i].id]+=sum(a[i].z);\n\tfor(int i=l;i<=r;i++)\n\t\tif(a[i].x<=mid)\n\t\t\tadd(a[i].z,-1);\n}\nint main(){\n\tn=read(),k=read();\n\tfor(int i=1;i<=n;i++)\n\t\ta[i].x=read(),a[i].y=read(),a[i].z=read(),a[i].id=i;\n\tsort(a+1,a+1+n,cmp1);\n\tfor(int i=1;i<=n;){\n\t\tint j=i+1;\n\t\twhile(j<=n&&a[j].x==a[i].x&&a[j].y==a[i].y&&a[j].z==a[i].z)\n\t\t\tj++;\n\t\twhile(i<j)\n\t\t\tbj[a[i].id]=a[j-1].id,i++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\ta[i].x=i;\n\tcdq(1,n);\n\tfor(int i=1;i<=n;i++)\n\t\tf[b[bj[a[i].id]]]++;\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%d\\n\",f[i]);\n}\n\n```",
        "postTime": 1545123107,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "**\u6811\u72b6\u6570\u7ec4\u5957\u503c\u57df\u7ebf\u6bb5\u6811**\n\n## \u4e09\u7ef4\u504f\u5e8f\n\n\u770b\u5230\u4e09\u7ef4\u504f\u5e8f\uff0c\u6700\u7b80\u5355\u76f4\u63a5\u7684\u601d\u8def\u5c31\u662f\u5148\u6309\u7167$x$\u628a\u5143\u7d20\u6392\u5e8f\uff0c\u7136\u540e\u6309\u987a\u5e8f\u628a\u6bcf\u4e2a\u5143\u7d20\u653e\u8fdb\u4e8c\u7ef4\u6570\u636e\u7ed3\u6784\uff0c\u7edf\u8ba1\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u5373\u4e3a$x$\u3001$y$\u3001$z$\u90fd\u4e0d\u8d85\u8fc7\u8be5\u5143\u7d20\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u4ee5\u4e0b\u4e3a\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff08\u6811\u5957\u6811\uff09\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 1e5 + 5;\nconst int MAXK = 2e5;\n\nint n, k, cnt[MAXN];\n\nstruct Data{\n    int x, y, z;\n    \n    int operator < (const Data &o) const {\n        return x != o.x ? (x < o.x) : (y != o.y ? (y < o.y) : (z < o.z));\n    }\n    \n    int operator == (const Data &o) const {\n        return x == o.x && y == o.y && z == o.z;\n    }\n}data[MAXN];\n\nstruct Seg{\n    struct Node{\n        int val;\n        Node *ch[2];\n        \n        Node(int val = 0) : val(val) {\n            ch[0] = ch[1] = NULL;\n        }\n    };\n    \n    Node *rt;\n    \n    Seg() {\n        rt = NULL;\n    }\n    \n    void Modify(Node *&now, int pos, int val = 1, int nl = 1, int nr = MAXK) {\n        if (!now) now = new Node();\n        if (nl == nr) {\n            now->val += val;\n            return;\n        }\n        int mid = nl + nr >> 1;\n        if (pos <= mid) Modify(now->ch[0], pos, val, nl, mid);\n        else Modify(now->ch[1], pos, val, mid + 1, nr);\n        now->val = (now->ch[0] ? now->ch[0]->val : 0) + (now->ch[1] ? now->ch[1]->val : 0);\n    }\n    \n    int Query(Node *now, int l, int r, int nl = 1, int nr = MAXK) {\n        if (!now) return 0;\n        if (l == nl && r == nr) return now->val;\n        int mid = nl + nr >> 1;\n        if (r <= mid) return Query(now->ch[0], l, r, nl, mid);\n        else if (l > mid) return Query(now->ch[1], l, r, mid + 1, nr);\n        return Query(now->ch[0], l, mid, nl, mid) + Query(now->ch[1], mid + 1, r, mid + 1, nr);\n    }\n};\n\nSeg tree[MAXK * 4 + 5];\n\nvoid Modify(int now, int posx, int posy, int val, int nl = 1, int nr = MAXK) {\n    tree[now].Modify(tree[now].rt, posy, val);\n    if (nl == nr) return;\n    int mid = nl + nr >> 1;\n    if (posx <= mid) Modify(now << 1, posx, posy, val, nl, mid);\n    else Modify(now << 1 | 1, posx, posy, val, mid + 1, nr);\n}\n\nint Query(int now, int xl, int xr, int yl, int yr, int nl = 1, int nr = MAXK) {\n    if (xl == nl && xr == nr) return tree[now].Query(tree[now].rt, yl, yr);\n    int mid = nl + nr >> 1;\n    if (xr <= mid) return Query(now << 1, xl, xr, yl, yr, nl, mid);\n    else if (nl > mid) return Query(now << 1 | 1, xl, xr, yl, yr, mid + 1, nr);\n    return Query(now << 1, xl, mid, yl, yr, nl, mid) + Query(now << 1 | 1, mid + 1, xr, yl, yr, mid + 1, nr);\n}\n\nint main() {\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) cin >> data[i].x >> data[i].y >> data[i].z;\n    sort(data + 1, data + n + 1);\n    int sum = 1;\n    for (int i = 1; i <= n; i++) {\n        if (data[i + 1] == data[i]) {\n            sum++;\n            continue;\n        }\n        Modify(1, data[i].y, data[i].z, sum);\n        int res = Query(1, 1, data[i].y, 1, data[i].z);\n        cnt[res] += sum;\n        sum = 1;\n    }\n    for (int i = 1; i <= n; i++) cout << cnt[i] << endl;\n    return 0;\n}\n```\n\n~~\u4f60`Ctrl+C`\u3001`Ctrl+v`\u4ea4\u4e0a\u53bb\uff0c\u53d1\u73b0TLE70~~\n\n\u8003\u8651\u5230\u503c\u57df\u4e0d\u5927\uff0c\u5e76\u4e14\u7ebf\u6bb5\u6811\u5e38\u6570\u8f83\u5927\uff0c\u53ef\u4ee5\u628a\u5916\u5c42\u7684\u975e\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6362\u6210\u6811\u72b6\u6570\u7ec4\uff0c\u51cf\u5c0f\u5e38\u6570\uff0c\u4ee5\u4e0b\u4e3aAC\u4ee3\u7801\u3002\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 1e5 + 5;\nconst int MAXK = 2e5;\n\nint n, k, cnt[MAXN];\n\nstruct Data{\n    int x, y, z;\n    \n    int operator < (const Data &o) const {\n        return x != o.x ? (x < o.x) : (y != o.y ? (y < o.y) : (z < o.z));\n    }\n    \n    int operator == (const Data &o) const {\n        return x == o.x && y == o.y && z == o.z;\n    }\n}data[MAXN];\n\nstruct Seg{\n    struct Node{\n        int val;\n        Node *ch[2];\n        \n        Node(int val = 0) : val(val) {\n            ch[0] = ch[1] = NULL;\n        }\n    };\n    \n    Node *rt;\n    \n    Seg() {\n        rt = NULL;\n    }\n    \n    void Modify(Node *&now, int pos, int val, int nl, int nr) {\n        if (!now) now = new Node();\n        if (nl == nr) {\n            now->val += val;\n            return;\n        }\n        int mid = nl + nr >> 1;\n        if (pos <= mid) Modify(now->ch[0], pos, val, nl, mid);\n        else Modify(now->ch[1], pos, val, mid + 1, nr);\n        now->val = (now->ch[0] ? now->ch[0]->val : 0) + (now->ch[1] ? now->ch[1]->val : 0);\n    }\n    \n    int Query(Node *now, int l, int r, int nl, int nr) {\n        if (!now) return 0;\n        if (l == nl && r == nr) return now->val;\n        int mid = nl + nr >> 1;\n        if (r <= mid) return Query(now->ch[0], l, r, nl, mid);\n        else if (l > mid) return Query(now->ch[1], l, r, mid + 1, nr);\n        return Query(now->ch[0], l, mid, nl, mid) + Query(now->ch[1], mid + 1, r, mid + 1, nr);\n    }\n};\n/*\nSeg tree[MAXK * 4 + 5];\n\nvoid Modify(int now, int posx, int posy, int val, int nl = 1, int nr = MAXK) {\n    tree[now].Modify(tree[now].rt, posy, val);\n    if (nl == nr) return;\n    int mid = nl + nr >> 1;\n    if (posx <= mid) Modify(now << 1, posx, posy, val, nl, mid);\n    else Modify(now << 1 | 1, posx, posy, val, mid + 1, nr);\n}\n\nint Query(int now, int xl, int xr, int yl, int yr, int nl = 1, int nr = MAXK) {\n    if (xl == nl && xr == nr) return tree[now].Query(tree[now].rt, yl, yr);\n    int mid = nl + nr >> 1;\n    if (xr <= mid) return Query(now << 1, xl, xr, yl, yr, nl, mid);\n    else if (nl > mid) return Query(now << 1 | 1, xl, xr, yl, yr, mid + 1, nr);\n    return Query(now << 1, xl, mid, yl, yr, nl, mid) + Query(now << 1 | 1, mid + 1, xr, yl, yr, mid + 1, nr);\n}\n*/\n\nSeg tree[MAXK + 5];\n\nint LB(int x) {\n    return x & (-x);\n}\n\nvoid Modify(int posx, int posy, int val) {\n    for (int i = posx; i <= k; i += LB(i)) \n        tree[i].Modify(tree[i].rt, posy, val, 1, k);\n}\n\nint Query(int x, int y) {\n    int ret = 0;\n    for (int i = x; i; i -= LB(i)) ret += tree[i].Query(tree[i].rt, 1, y, 1, k);\n    return ret;\n}\n\nint main() {\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) cin >> data[i].x >> data[i].y >> data[i].z;\n    sort(data + 1, data + n + 1);\n    int sum = 1;\n    for (int i = 1; i <= n; i++) {\n        if (data[i + 1] == data[i]) {\n            sum++;\n            continue;\n        }\n        Modify(data[i].y, data[i].z, sum);\n        int res = Query(data[i].y, data[i].z);\n        cnt[res] += sum;\n        sum = 1;\n    }\n    for (int i = 1; i <= n; i++) cout << cnt[i] << endl;\n    return 0;\n}\n```",
        "postTime": 1563520310,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u5230\u7d2b\u9898\u5c31\u5f88\u5c11\u6709pascal\u9898\u89e3\u4e86\u5462qwq\n\n\u90a3\u6211\u6765\u5199\u4e00\u4efd\u6bd4\u8f83\u8be6\u7ec6\u7684\u5427\uff08\u6bd5\u7adf\u662f\u7b97\u6cd5\u6a21\u677f\u9898\uff09\n\n\u8fd9\u9053\u9898\u662f\u4e09\u7ef4\u504f\u5e8f\u7684\u6a21\u677f\n\n1D \u6211\u4eec\u5bf9\u7b2c\u4e00\u7ef4\u76f4\u63a5\u8fdb\u884c\u6392\u5e8f\u5c31\u597d\u5566\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u7ef4\u6709\u5e8f\n\n2D: \u8fd9\u91cc\u6211\u91c7\u7528\u4e86cdq\u5206\u6cbb\n\ncdq\u5206\u6cbb\u662f\u4e00\u79cd\u795e\u5947\u7684\u5206\u6cbb\u7b97\u6cd5\n\n\u4f8b\u5982\u672c\u9898\uff0c\u5c06\u7b2c\u4e8c\u7ef4\u7684\u533a\u95f4\u91c7\u53d6\u4e8c\u5206\uff0c\u9996\u5148\u9012\u5f52\u8ba1\u7b97\u5de6\u8fb9\u5185\u90e8\u5bf9\u81ea\u5df1\u7684\u8d21\u732e\uff0c\u7136\u540e\u8ba1\u7b97\u5de6\u8fb9\u5bf9\u53f3\u8fb9\u7684\u8d21\u732e\uff0c\u6700\u540e\u9012\u5f52\u8ba1\u7b97\u53f3\u8fb9\u81ea\u5df1\u5185\u90e8\u8d21\u732e\n\n\u6240\u4ee5\u91cd\u70b9\u5728\u5982\u4f55\u5904\u7406\u5de6\u8fb9\u5bf9\u53f3\u8fb9\u7684\u8d21\u732e\n\n\u5047\u8bbe\u5de6\u8fb9\u533a\u95f4\u4e3a[l,mid] \u53f3\u8fb9\u533a\u95f4\u4e3a[mid+1.r] (\u63a8\u8350\u4f7f\u7528\u95ed\u533a\u95f4\uff0c\u6bd4\u8f83\u597d\u5224\u65ad\u8fb9\u754c~~\n\n\u6211\u4eec\u5148\u5c06\u4e24\u4e2a\u533a\u95f4\u6392\u5e8f\uff0c\u6ce8\u610f\u8981\u6253\u4e0a\u5e8f\u53f7\uff0c\u8fd9\u6837\u7b49\u4f1a\u624d\u65b9\u4fbf\u5224\u65ad\u8fd9\u4e2a\u6570\u662f\u5728\u5de6\u533a\u95f4\u8fd8\u662f\u5728\u53f3\u533a\u95f4\n\n\u7136\u540e\u5c06\u6570\u7ec4\u626b\u4e00\u904d\uff0c\u6bcf\u5f53\u6211\u4eec\u9047\u89c1\u5de6\u533a\u95f4\u7684\u6570\u65f6\u7edf\u8ba1\u4e0b\u6765\uff0c\u9047\u5230\u53f3\u533a\u95f4\u7684\u6570\u5c31\u5c06\u524d\u9762\u7684\u5de6\u533a\u95f4\u7684\u6570\u7edf\u8ba1\u5230\u8be5\u6570\u7684\u7b54\u6848\u91cc\n\n\u56e0\u4e3a\uff0c\u5de6\u533a\u95f4\u7684\u6570\u7b2c\u4e00\u7ef4\u4e00\u5b9a\u5c0f\u4e8e\u53f3\u533a\u95f4\uff0c\u800c\u4e0a\u8ff0\u64cd\u4f5c\u4fbf\u7edf\u8ba1\u4e86\u7b2c\u4e8c\u7ef4\u4e5f\u5c0f\u7684\u6570\n\n\u5f53\u7136\uff0c\u5230\u6b64\u4e3a\u6b62\u662f\u4e8c\u7ef4\u504f\u5e8f\u7684\u505a\u6cd5\uff0c\u800c\u672c\u9898\u662f\u4e09\u7ef4\u504f\u5e8f(\u89c1\u4e0b\u9762\n\n3D \u7b2c\u4e09\u7ef4\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u5957\u4e00\u5c42cdq\u5206\u6cbb\uff0c\u4f46\u63a8\u8350\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4,\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u5c0f\uff0c\u800c\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u989d\u5916\u7a7a\u95f4\u8fc7\u5927\uff0c\u4f1aMLE,\u81f3\u4e8etreap\uff0c\u6211\u4e0d\u4f1a\u6253qwq\n\n\u63a5\u7740\u7b2c\u4e8c\u6b65\u8bf4\uff0c\u7531\u4e8e\u7b2c\u4e09\u7ef4\u7684\u9650\u5236\uff0c\u4e0d\u4e00\u5b9a\u7b2c\u4e00\u7ef4\uff0c\u7b2c\u4e8c\u7ef4\u90fd\u6ee1\u8db3\u6761\u4ef6\u5c31\u53ef\u4ee5\uff0c\n\u6240\u4ee5\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u7edf\u8ba1\u7b54\u6848\u6b65\u9aa4~~~\n\n\u5f53\u6211\u4eec\u8bbf\u95ee\u5230\u5de6\u533a\u95f4\u7684\u70b9\u65f6\uff0c\u6211\u4eec\u5c06\u4ed6\u7684\u7b2c\u4e09\u7ef4\u5bf9\u5e94\u7684\u70b9\u52a01\uff0c\u6765\u7edf\u8ba1\u5de6\u533a\u95f4\u4e2d\u7b2c\u4e09\u7ef4\u4e3a\u6b64\u6570\u7684\u70b9\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u5230\u53f3\u533a\u95f4\u7684\u70b9\u65f6\uff0c\u5c31\u67e5\u8be2\u6811\u72b6\u6570\u7ec4\uff0c\u6765\u627e\u5230\u7b2c\u4e09\u7ef4\u4e5f\u5c0f\u7684\u5de6\u8282\u70b9\u6570\u91cf\n\n\u55ef\u5c31\u8fd9\u6837\u5566~~~\n\n\u9644\u7801\n\n```pascal\nvar n,k,i:longint;\n    x,y,z,f,b,s,p,m:array[0..100000]of longint;\n    c:array[1..200000]of longint;\nprocedure sort(l,r:longint);\nvar a,b,i,j,c,d:longint;\nbegin\n  a:=x[(l+r)div 2];\n  c:=y[(l+r)div 2];\n  d:=z[(l+r)div 2];\n  i:=l;\n  j:=r;\n  repeat\n    while (x[i]<a)or((x[i]=a)and(y[i]<c))or((x[i]=a)and(y[i]=c)and(z[i]<d)) do\n      inc(i);\n    while (x[j]>a)or((x[j]=a)and(y[j]>c))or((x[j]=a)and(y[j]=c)and(z[j]>d)) do\n      dec(j);\n    if i<=j then\n    begin\n      b:=x[i];\n      x[i]:=x[j];\n      x[j]:=b;\n      b:=y[i];\n      y[i]:=y[j];\n      y[j]:=b;\n      b:=z[i];\n      z[i]:=z[j];\n      z[j]:=b;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if i<r then sort(i,r);\n  if l<j then sort(l,j);\nend;\nprocedure sort2(l,r:longint);\nvar x,y,z,i,j:longint;\nbegin\n  x:=b[(l+r)div 2];\n  z:=s[(l+r)div 2];\n  i:=l;\n  j:=r;\n  repeat\n    while (b[i]<x)or((b[i]=x)and(s[i]<z)) do\n      inc(i);\n    while (x<b[j])or((b[j]=x)and(s[j]>z)) do\n      dec(j);\n    if i<=j then\n    begin\n      y:=b[i];\n      b[i]:=b[j];\n      b[j]:=y;\n      y:=s[i];\n      s[i]:=s[j];\n      s[j]:=y;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if i<r then sort2(i,r);\n  if l<j then sort2(l,j);\nend;\nprocedure ins(x,y:longint);\nbegin\n  while x<=k do\n  begin\n    inc(c[x],y);\n    x:=x+(x and -x);\n  end;\nend;\nfunction query(x:longint):longint;\nbegin\n  query:=0;\n  while x>0 do\n  begin\n    inc(query,c[x]);\n    x:=x-(x and -x);\n  end;\nend;\nprocedure cdq(l,r:longint);\nvar mid,i,j:longint;\nbegin\n  if l>=r then exit;\n  mid:=(l+r)div 2;\n  cdq(l,mid);//\u9012\u5f52\u5de6\u533a\u95f4\u7684\u7b54\u6848\n  for i:=l to r do//\u6807\u8bb0+\u6392\u5e8f\n  begin\n    b[i]:=y[i];\n    s[i]:=i;\n  end;\n  sort2(l,r);\n  for i:=l to r do\n  begin\n    if s[i]=n then\n    begin\n      s[i]:=s[i];\n    end;\n    if s[i]<=mid then ins(z[s[i]],1);\n    //\u5982\u679c\u662f\u5de6\u533a\u95f4\u7684\u70b9\uff0c\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\n    if s[i]>mid then f[s[i]]:=f[s[i]]+query(z[s[i]]);\n    //\u53f3\u533a\u95f4\u7684\u70b9\u67e5\u8be2\u7edf\u8ba1\n  end;\n  for i:=l to r do\n    if s[i]<=mid then ins(z[s[i]],-1);\n  cdq(mid+1,r);//\u9012\u5f52\u53f3\u533a\u95f4\nend;\nbegin\n  readln(n,k);\n  for i:=1 to n do\n    readln(x[i],y[i],z[i]);\n  sort(1,n);//\u7b2c\u4e00\u7ef4\u6392\u5e8f\u5566\u5566\u5566\n  cdq(1,n);//\u5f00\u59cb\u5206\u6cbb\n  for i:=n-1 downto 1 do\n    if (x[i]=x[i+1])and(y[i]=y[i+1])and(z[i]=z[i+1]) then f[i]:=f[i+1];\n  for i:=1 to n do//\u4f9d\u9898\u610f\u626b\u7b54\u6848\n    inc(p[f[i]]);\n  for i:=0 to n-1 do\n    writeln(p[i]);\nend.\n```\n\nPs:\u4e09\u7ef4\u504f\u5e8f\u4e2d\uff0ccdq\u7684\u5206\u6cbb\u7edf\u8ba1\u53f3\u533a\u95f4\u5185\u90e8\u8d21\u732e\u548c\u5de6\u533a\u95f4\u5bf9\u53f3\u533a\u95f4\u7684\u8d21\u732e\u5e76\u4e0d\u51b2\u7a81\uff0c\u6240\u4ee5\u4ea4\u6362\u987a\u5e8f\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u9012\u5f52\u5de6\u53f3\u533a\u95f4\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u5f52\u5e76\u6392\u5e8f\u6765\u51cf\u5c11\u5e38\u6570\uff08\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u4e86\u6811\u72b6\u6570\u7ec4\uff0c\u6240\u4ee5\u8fd9\u70b9\u5c0f\u4f18\u5316\u4e0d\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6\uff09",
        "postTime": 1517733968,
        "uid": 29245,
        "name": "Henry_he",
        "ccfLevel": 0,
        "title": "\u4e09\u7ef4\u504f\u5e8f"
    },
    {
        "content": "\u4f5c\u4e3aCDQ\u7684\u4e00\u9053\u677f\u5b50\u9898\uff0c\u6211\u4eec\u5148\u6765\u660e\u786e\u4e00\u4e0b\u5230\u5e95\u4ec0\u4e48\u662fCDQ\uff1f\n\nCDQ\u901a\u4fd7\u4e00\u70b9\u8bf4\u5c31\u662f\u4e09\u53e5\u8bdd\uff1a\n\n1.\u9012\u5f52\u524d\u4e00\u534a\n\n2.\u5224\u65ad\u524d\u4e00\u534a\u5bf9\u4e8e\u540e\u4e00\u534a\u7684\u5f71\u54cd\n\n3.\u9012\u5f52\u540e\u4e00\u534a\n\n\u90a3\u4e48\u6211\u4eec\u6765\u770b\u8fd9\u9053\u7ecf\u5178\u7684\u4e09\u7ef4\u504f\u5e8f\u9898\uff0c\u8bf4\u4e00\u4e0b\u5927\u4f53\u7684\u601d\u8def\uff1a\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u4ee5x\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\uff08y\u548cz\u4f5c\u4e3a\u6b21\u8981\u5173\u952e\u5b57\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4ece\u5de6\u5230\u53f3\u662f\u4ee5x\u5355\u8c03\u9012\u589e\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e2a\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5206\u522b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5e8f\u5217\u4ee5y\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5f97\u5230\u7684\u4e24\u4e2a\u5e8f\u5217\u62e5\u6709\u4ee5\u4e0b\u7684\u6027\u8d28\uff1a\n\n1.\u5de6\u5e8f\u5217\u7684\u4efb\u610fx\u503c\u90fd\u5c0f\u4e8e\u53f3\u5e8f\u5217\u7684\u4efb\u610fx\u503c\n\n2.\u6bcf\u4e00\u4e2a\u5e8f\u5217\u91cc\u7684y\u503c\u90fd\u662f\u5355\u8c03\u9012\u589e\u7684\n\n\u6700\u540e\u6211\u4eec\u5206\u522b\u5728\u5e8f\u5217\u5934\u548c\u5e8f\u5217\u4e2d\u70b9\u8bbe\u5b9a\u4e24\u4e2a\u6307\u9488j\u548ci\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2ai\uff0cj\u90fd\u4ece\u4e0a\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5730\u65b9\u5f00\u59cb\u679a\u4e3e\uff0c\u5c06j\u5bf9\u5e94\u7684y\u5c0f\u4e8ei\u5bf9\u5e94\u7684y\u7684j\u52a0\u5165\u6811\u72b6\u6570\u7ec4\u4e2d\uff0c\u6700\u540e\u53ea\u8981\u5224\u65adz\u503c\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff1a\n\n1.\u7531\u4e8e\u539f\u5e8f\u5217\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\u7684\u6570\uff0c\u6211\u4eec\u8981\u5148\u8fdb\u884c\u53bb\u91cd\uff0c\u5e76\u50a8\u5b58\u6bcf\u4e00\u4e2a\u6570\u90fd\u4ee3\u8868\u4e86\u51e0\u4e2a\u76f8\u540c\u7684\u6570\u3002\n\n2.\u6bcf\u4e00\u6b21i\u7684\u589e\u52a0\u90fd\u8981\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\uff0c\u53ea\u8981\u52a0\u4e0a\u4e4b\u524d\u52a0\u7684\u76f8\u53cd\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u597d\u50cf\u4e5f\u5c31\u8fd9\u4e9b\u4e86\u3002\u3002\u3002\n\n\u6700\u540e\uff0c\u9644\u4e0a\u672c\u9898\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define maxn 100010\n#define maxk 200010\nusing namespace std;\nstruct node\n{\n    int x,y,z,ans,w;\n};\nnode a[maxn],b[maxn];\nint n,cnt[maxk];\nint k,z;\nbool cmp1(node u,node v)\n{\n    if(u.x==v.x)\n    {\n        if(u.y==v.y)\n            return u.z<v.z;\n        return u.y<v.y;\n    }\n    return u.x<v.x;\n}\nbool cmp2(node u,node v)\n{\n    if(u.y==v.y)\n        return u.z<v.z;\n    return u.y<v.y;\n}\nstruct TREE\n{\n    int tre[maxk],kk;\n    int lowbit(int x)\n    {\n        return x&(-x);\n    }\n    int ask(int i)\n    {\n        int ans=0;\n        for(; i; i-=lowbit(i))\n        {\n            ans+=tre[i];\n        }\n        return ans;\n    }\n    void add(int i,int k)\n    {\n        for(; i<=kk; i+=lowbit(i))\n        {\n            tre[i]+=k;\n        }\n    }\n} t;\nvoid cdq(int l,int r)\n{\n    if(l==r)\n    {\n        return;\n    }\n    int mid=(l+r)>>1;\n    cdq(l,mid);\n    cdq(mid+1,r);\n    sort(a+l,a+mid+1,cmp2);\n    sort(a+mid+1,a+r+1,cmp2);\n    int i=mid+1,j=l;\n    while(i<=r)\n    {\n        while(a[j].y<=a[i].y && j<=mid)\n        {\n            t.add(a[j].z,a[j].w);\n            j++;\n        }\n        a[i].ans+=t.ask(a[i].z);\n        i++;\n    }\n    for(i=l; i<j; i++)\n    {\n        t.add(a[i].z,-a[i].w);\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&z,&k);//z\u662f\u6570\u91cf\uff0ck\u662f\u6700\u5927\u5c5e\u6027\u503c\n    t.kk=k;//\u8bbe\u5b9a\u4e0a\u9650\uff0ct\u662f\u7ef4\u62a4\u7684\u6811\u72b6\u6570\u7ec4\n    for(int i=1; i<=z; i++)\n    {\n        scanf(\"%d%d%d\",&b[i].x,&b[i].y,&b[i].z);//\n    }\n    sort(b+1,b+z+1,cmp1);//\u6392\u5e8f\n    int c=0;\n    for(int i=1; i<=z; i++)\n    {\n        c++;\n        if(b[i].x!=b[i+1].x || b[i].y!=b[i+1].y || b[i].z!=b[i+1].z )\n            a[++n]=b[i],a[n].w=c,c=0;\n    }//\u53bb\u91cd\n    cdq(1,n);//cdqaq\n    for(int i=1; i<=n; i++)\n    {\n        cnt[a[i].ans+a[i].w-1]+=a[i].w;//\u8fd9\u4e2a\u5730\u65b9\u4e0d\u592a\u597d\u7406\u89e3\uff1acnt\u3010x\u3011\u5c31\u662f\u50a8\u5b58f\u3010i\u3011= x\u7684\u4e2a\u6570\uff0cx\u5c31\u7b49\u4e8ei\u7684\u7b54\u6848\u52a0\u4e0a\u5b83\u91cd\u590d\u7684\u4e2a\u6570\uff08\u53ef\u4ee5\u53d6\u7b49\uff09\u51cf\u53bb\u672c\u8eab\n    }\n    for(int i=0; i<z; i++)\n    {\n        printf(\"%d\\n\",cnt[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1550472567,
        "uid": 133227,
        "name": "\u4e8e\u4e30\u6797",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e00\u4e0b[\u535a\u5ba2](https://blog.csdn.net/xumingyang0/article/details/80772375)\n\n[\u9898\u76ee](https://www.luogu.org/problemnew/show/P3810)\n#\u9898\u89e3\uff1a\n\u8fd9\u9898\u6211\u770b\u6ca1\u6709k-d\u6811\u7684\u9898\u89e3\uff0c\u6211\u5c31\u6765\u4e00\u53d1\n\u4e09\u7ef4k-d\u6811O(n^(5/3))\u5e94\u8be5\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c\u6211T\u6389\u4e865\u4e2a\u70b9\n\u6211\u4eec\u53ef\u4ee5\u628az\u6392\u5e8f\uff0cx\u548cy\u7528k-d\u6811\u7ef4\u62a4\uff0c\u6bcf\u6b21\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u524d\u9762\u6709\u591a\u5c11\u4e2ax\u548cy\u7b26\u5408\u6761\u4ef6\uff08\u5747\u5c0f\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7684x\u548cy\uff09\n\u4f46\u662f\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u9519\u8bef\u7684\uff0c\u5f53\u4e00\u4e9bz\u76f8\u7b49\u65f6\uff0c\u8981\u67e5\u8be2\u7684\u8303\u56f4\u53ef\u80fd\u5728\u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e24\u68f5k-d\u6811\uff0c\u5206\u522b\u7ef4\u62a4\uff0c\u7136\u540e\u5c31\u5927\u529f\u544a\u6210\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n^(3/2))\n#\u6807\u7a0b\uff1a\n```cpp\n//T\u7ef4\u62a4\u5728\u5f53\u524d\u4f4d\u7f6e\u524d\uff0c\u6709\u591a\u5c11\u4e2ax\u548cy\u7b26\u5408\u6761\u4ef6\n//K\u7ef4\u62a4\u6240\u6709z\u503c\u76f8\u7b49\u7684\u70b9\u4e2d\uff0c\u6709\u591a\u5c11\u4e2ax\u548cy\u7b26\u5408\u6761\u4ef6\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=100002;\nint n,m,ans,D,i,f[N],k,j,t;\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline int read(){\n    int x=0,fl=1;char ch=gc();\n    for (;ch<48||ch>57;ch=gc())if(ch=='-')fl=-1;\n    for (;48<=ch&&ch<=57;ch=gc())x=(x<<3)+(x<<1)+(ch^48);\n    return x*fl;\n}\ninline void wri(int a){if(a>=10)wri(a/10);putchar(a%10|48);}\ninline void wln(int a){if(a<0)a=-a,putchar('-');wri(a);puts(\"\");}\ninline void Min(int &x,int y){if (y<x) x=y;}\ninline void Max(int &x,int y){if (y>x) x=y;}\nstruct kk{\n    int x,y,z;\n}a[N];\nstruct P{\n    int l,r,d[2],mn[2],mx[2],v,sum;\n    int &operator[](int x){\n        return d[x];\n    }\n    friend bool operator==(P a,P b){\n        return a.d[0]==b.d[0] && a.d[1]==b.d[1];\n    }\n    friend bool operator<(P a,P b){\n        return a[D]<b[D];\n    }\n}p[N];\nbool in(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2){\n    return x1<=X1 && X2<=x2 && y1<=Y1 && Y2<=y2;\n}\nbool out(int x1,int y1,int x2,int y2,int X1,int Y1,int X2,int Y2){\n    return X2<x1 || X1>x2 || Y2<y1 || Y1>y2;\n}\nstruct node{\n    P now,t[N];\n    int rt,cnt;\n    void update(int k){\n        int l=t[k].l,r=t[k].r;\n        for (int i=0;i<2;i++){\n            t[k].mn[i]=t[k].mx[i]=t[k][i];\n            if (l) Min(t[k].mn[i],t[l].mn[i]),Max(t[k].mx[i],t[l].mx[i]);\n            if (r) Min(t[k].mn[i],t[r].mn[i]),Max(t[k].mx[i],t[r].mx[i]);\n        }\n        t[k].sum=t[k].v+t[l].sum+t[r].sum;\n    }\n    void ins(int &k,bool D){\n        if (!k){\n            k=++cnt;\n            t[k][0]=t[k].mn[0]=t[k].mx[0]=now[0];\n            t[k][1]=t[k].mn[1]=t[k].mx[1]=now[1];\n        }\n        if (now==t[k]){\n            t[k].v+=now.v;t[k].sum+=now.v;\n            return;\n        }\n        if (now[D]<t[k][D]) ins(t[k].l,D^1);\n        else ins(t[k].r,D^1);\n        update(k);\n    }\n    int query(int k,int x1,int y1,int x2,int y2){\n        if (!k) return 0;\n        int tmp=0;\n        if (in(x1,y1,x2,y2,t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) return t[k].sum;\n        if (out(x1,y1,x2,y2,t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) return 0;\n        if (in(x1,y1,x2,y2,t[k][0],t[k][1],t[k][0],t[k][1])) tmp+=t[k].v;\n        tmp+=query(t[k].l,x1,y1,x2,y2)+query(t[k].r,x1,y1,x2,y2);\n        return tmp;\n    }\n    int build(int l,int r,bool f){\n        if (l>r) return 0;\n        int mid=l+r>>1;\n        D=f;nth_element(p+l,p+mid,p+r+1);\n        t[mid]=p[mid];\n        t[mid].l=build(l,mid-1,f^1);\n        t[mid].r=build(mid+1,r,f^1);\n        update(mid);\n        return mid;\n    }\n}T,K;\nbool cmp(kk a,kk b){\n    return a.z<b.z;\n}\nint main(){\n    n=read();k=read();m=10000;\n    for (i=1;i<=n;i++) a[i].x=read(),a[i].y=read(),a[i].z=read();\n    sort(a+1,a+n+1,cmp);\n    for (i=1;i<=n;i++){\n        k=i;\n        while (k<n && a[k].z==a[k+1].z) k++;\n        for (j=i;j<=k;j++) p[j-i+1][0]=a[j].x,p[j-i+1][1]=a[j].y,p[j-i+1].v=p[j-i+1].sum=1;\n        K.rt=K.build(1,k-i+1,0);\n        for (j=i;j<=k;j++){\n            ans=T.query(T.rt,1,1,a[j].x,a[j].y)+K.query(K.rt,1,1,a[j].x,a[j].y);\n            f[ans]++;//\u628a\u5f53\u524d\u4f4d\u7f6e\u4e5f\u7b97\u8fdb\u53bb\u4e86\uff0c\u6240\u4ee5f\u7684\u8f93\u51fa\u8303\u56f4\u662f[1,n]\n        }\n        for (j=i;j<=k;j++){\n            T.now[0]=a[j].x,T.now[1]=a[j].y,T.now.v=T.now.sum=1,T.ins(T.rt,0);\n            if (T.cnt==m){\n                for (t=1;t<=T.cnt;t++) p[t]=T.t[t];\n                T.rt=T.build(1,T.cnt,0);m+=10000;\n            }\n        }\n        i=k;\n    }\n    for (i=1;i<=n;i++) wln(f[i]);\n}\n```",
        "postTime": 1529644639,
        "uid": 22469,
        "name": "Mingoal",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u7bc7 bitset \u7684\u9898\u89e3\u3002\n\nbitset \u53ef\u4ee5\u7528\u6765\u6c42\u89e3\u9ad8\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u8bb0 $m$ \u4e3a\u7ef4\u6570\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{n^2m}{w})$\u3002\n\n\u5f00 $n$ \u4e2a bitset\uff0c$b_{i,j}=1$ \u8868\u793a $j$ \u6bcf\u4e00\u7ef4\u90fd\u4e0d\u8d85\u8fc7 $i$\u3002\u521d\u59cb\u5316\u6240\u6709 $b_{i,j}=1$\u3002\n\n\u5148\u679a\u4e3e\u6bcf\u4e00\u7ef4\uff0c\u7136\u540e\u5bf9\u6240\u6709\u6570\u6309\u8fd9\u4e00\u7ef4\u6392\u5e8f\u3002\n\n\u5f00\u4e00\u4e2a\u65b0\u7684 bitset s\uff0c\u6309\u8fd9\u4e00\u7ef4\u4ece\u5c0f\u5230\u5927\u5904\u7406\u6240\u6709\u6570\uff0c\u5904\u7406\u5230 $i$ \u65f6 $s_j=1$ \u8868\u793a\u5f53\u524d\u7ef4 $j$ \u4e0d\u8d85\u8fc7 $i$\u3002\n\n$j$ \u662f\u5355\u8c03\u7684\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6307\u9488\u7ef4\u62a4\u3002\n\n\u6bcf\u6b21 `b[i]&=s` \u5373\u53ef\u3002\n\n$100000$ \u7684 bitset \u5f00\u4e0d\u4e0b\uff0c\u8981\u7528\u5206\u7ec4 bitset\u3002\n\n\u5c31\u662f\u5c06\u70b9\u5206\u4e3a\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4 $B$ \u4e2a\uff0c\u6bcf\u6b21\u53ea\u6c42\u51fa\u8fd9 $B$ \u4e2a\u70b9\u5bf9\u5e94\u7684 bitset\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u5f00 $B$ \u4e2a bitset\u3002\n\n\u53ef\u80fd\u7565\u5fae\u5361\u5e38\u3002\n\n[AC \u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/51314650)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+3;\nint p[3][N],a[3][N],w[N];\nbitset<N>b[9999],s;\nint main(){\n\tint*tp,*ta,n,l,r,i,j,k,o;\n\tfor(i=1,scanf(\"%d%*d\",&n);i<=n;++i)for(j=0;j<3;++j)scanf(\"%d\",a[j]+i),p[j][i]=i;\n\tfor(i=0;i<3;++i)sort(p[i]+1,p[i]+n+1,[=](int x,int y){return a[i][x]<a[i][y];});//\u6309\u6bcf\u4e00\u7ef4\u6392\u5e8f\n\tfor(l=1;l<=n;l=r+1){//\u5206\u7ec4bitset\uff0c\u6bcf\u7ec49991\u4e2a\n\t\tfor(i=l,r=min(l+9991,n);i<=r;++i)b[i-l].set();\n\t\tfor(i=0;i<3;++i)for(tp=p[i],ta=a[i],s.reset(),j=k=1;j<=n;++j){\n\t\t\tfor(o=tp[j];k<=n&&ta[tp[k]]<=ta[o];)s[tp[k++]]=1;\n\t\t\tif(l<=o&&o<=r)b[o-l]&=s;\n\t\t}\n\t\tfor(i=l;i<=r;++i)++w[b[i-l].count()];\n\t}\n\tfor(i=1;i<=n;++i)printf(\"%d\\n\",w[i]);\n\treturn 0;\n}\n```",
        "postTime": 1622373485,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\uff08bitset\uff09"
    },
    {
        "content": "\u8fd9\u9898\u548b\u505a\u554a\uff1f\n\nemm\u697c\u4e0b\u6709\u6811\u72b6\u6570\u7ec4\u5957treap\u3002\n\n\u8bf6\u5440\u6211\u53ea\u4f1a\u6811\u72b6\u6570\u7ec4\u600e\u4e48\u529e\u554a\uff1f\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u6392\u5e8f\u53bb\u6389\u4e00\u7ef4\u3002\n\n\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u5f00\u4e0d\u4e0b\u600e\u4e48\u529e\u554a\uff1f\n\n\u5f00`map`\u53c8\u591a\u4e00\u4e2alog\u554a\uff1f\n\n\n---\n\n\u624b\u5199\u54c8\u5e0c\u8868\u5927\u6cd5\u597d\uff08\u522b\u544a\u8bc9\u6211`unordered_map`\uff0c\u53cd\u6b63\u8003\u573a\u4e0a\u4f60\u7528\u4e0d\u4e86\uff09\uff01\n\n\u624b\u5199\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u7136\u540e\u4e8c\u4f4d\u6811\u72b6\u6570\u7ec4\u7f8e\u6ecb\u6ecb\u554a~\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e00\u4e2a\u5730\u65b9\uff1a\u6709\u5b8c\u5168\u76f8\u540c\u7684\u70b9\u7684\u65f6\u5019\u540e\u9762\u7684\u53ef\u80fd\u4f1a\u5bf9\u524d\u9762\u7684\u9020\u6210\u5f71\u54cd\u3002\n\n```cpp\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n\ntypedef long long LL;\n\ninline int readInt() {\n  int ans = 0, c, f = 1;\n  while (!isdigit(c = getchar()))\n    if (c == '-') f *= -1;\n  do ans = ans * 10 + c - '0';\n  while (isdigit(c = getchar()));\n  return ans * f;\n}\n\nconst int N = 100050;\nconst int M = 39999983;\n\nstruct{\n  LL key[M];\n  int val[M];\n\n  int operator()(int i, int j, int) {\n    LL x = (LL)i * N + j;\n    int t = x % M;\n    while (key[t] != 0 && key[t] != x)\n      if (++t == M) t = 0;\n    return val[t];\n  }\n\n  int& operator()(int i, int j) {\n    LL x = (LL)i * N + j;\n    int t = x % M;\n    while (key[t] != 0 && key[t] != x)\n      if (++t == M) t = 0;\n    key[t] = x;\n    return val[t];\n  }\n} H;\n\nstruct Point{\n  int a, b, c;\n\n  bool operator<(const Point &t) const {\n    if (a != t.a) return a < t.a;\n    if (b != t.b) return b < t.b;\n    return c < t.c;\n  }\n\n  bool operator==(const Point &t) const {\n    return a == t.a && b == t.b && c == t.c;\n  }\n} P[N];\n\nint n, na, nb, nc, A[N], B[N], C[N];\nint ans[N];\n\nvoid Add(int x, int y) {\n  for (int i = x; i <= nb; i += i & -i)\n    for (int j = y; j <= nc; j += j & -j)\n      ++H(i, j);\n}\n\nint Query(int x, int y) {\n  int ans = 0;\n  for (int i = x; i > 0; i -= i & -i)\n    for (int j = y; j > 0; j -= j & -j)\n      ans += H(i, j, 0);\n  return ans;\n}\n\nint main() {\n  n = readInt();\n  readInt();\n  for (int i = 0; i < n; ++i) {\n    A[i] = P[i].a = readInt();\n    B[i] = P[i].b = readInt();\n    C[i] = P[i].c = readInt();\n  }\n  std::sort(A, A + n);\n  std::sort(B, B + n);\n  std::sort(C, C + n);\n  na = std::unique(A, A + n) - A;\n  nb = std::unique(B, B + n) - B;\n  nc = std::unique(C, C + n) - C;\n  for (int i = 0; i < n; ++i) {\n    P[i].a = std::lower_bound(A, A + na, P[i].a) - A + 1;\n    P[i].b = std::lower_bound(B, B + nb, P[i].b) - B + 1;\n    P[i].c = std::lower_bound(C, C + nc, P[i].c) - C + 1;\n  }\n  std::sort(P, P + n);\n  for (int i = 0, j = 0, l = 0; i < n; ++i) {\n    while (j < i || (j < n && P[j] == P[i])) ++j;\n    if (i > 0 && P[i - 1] < P[i])\n      l = Query(P[i].b, P[i].c) + j - i - 1;\n    ++ans[l];\n    Add(P[i].b, P[i].c);\n  }\n\n  for (int i = 0; i < n; ++i)\n    printf(\"%d\\n\", ans[i]);\n  return 0;\n}\n```",
        "postTime": 1526906150,
        "uid": 7868,
        "name": "_rqy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "### \u6811\u72b6\u6570\u7ec4\u5957\u5e73\u8861\u6811\n\n\u4e00\u5f00\u59cb\u770b\u5230\u9898\u7684\u65f6\u5019\u6211\u5c31\u5728\u60f3\uff0c\u4e8c\u7ef4\u504f\u5e8f\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5957splay\u5f88\u597d\u5730\u89e3\u51b3\uff08\u9664\u4e86\u50cf[Mokia](https://www.luogu.org/problemnew/show/P4390)\u8fd9\u79cd\u65f6\u7a7a\u5361\u5f97\u5f88\u53d8\u6001\u7684\u9898\uff09\uff0c\u90a3\u4e48\u4e09\u7ef4\u600e\u4e48\u529e\u5462\u3002\u3002\u3002\n\n\u540e\u6765\u6211\u7a81\u7136\u610f\u8bc6\u5230\uff0c\u672c\u9898\u5e76\u4e0d\u662f\u56de\u7b54\u4e71\u5e8f\u7684m\u4e2a\u533a\u95f4\u8be2\u95ee\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6309\u7167a\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u4e86\u8981\u56de\u7b54n\u4e2a**\u524d\u7f00**\u8be2\u95ee\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u975e\u5e38\u597d\u529e\u4e86\uff1a\u5148\u6309\u7167a\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u5143\u7d20i\uff0c\u5c06\u6240\u6709\u6ee1\u8db3a[j]<=a[i]\u7684\u5143\u7d20j\u90fd\u63d2\u5165\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u8fd9\u6837\u63cf\u8ff0\uff1a\u6811\u72b6\u6570\u7ec4\u5957splay\uff08\u4f60\u5957treap\u4e5f\u884c\uff09\uff0c\u6811\u72b6\u6570\u7ec4\u4e0a\u7ef4\u62a4b\u503c\uff0c\u5e73\u8861\u6811\u4e0a\u7ef4\u62a4c\u503c\u3002\n\n\u5176\u5b9e\u4e5f\u4e0d\u7528\u6bcf\u6b21\u90fd\u628a\u6240\u6709a[j]<=a[i]\u7684j\u63d2\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u524d\u4e00\u6b21\u57fa\u7840\u4e0a\u63d2\u5165\u6240\u6709a[j]==a[i]\u7684j\uff08\u6ce8\u610f\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u8981\u91cd\u590d\u63d2\u5165\uff09\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2ai\u8fdb\u884c\u7684\u67e5\u8be2\u53ef\u4ee5\u63cf\u8ff0\u5982\u4e0b\uff1a\u5728\u6240\u6709\u5df2\u7ecf\u63d2\u5165\u6570\u636e\u7ed3\u6784\u7684\u5143\u7d20\u4e2d\uff0c\u5728\u6240\u6709b[j]<=b[i]\u7684\u5143\u7d20j\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u6ee1\u8db3c[j]<=c[i]\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u4e8c\u7ef4\u504f\u5e8f\u4e86\u3002\n\n\u6700\u540e\u6211\u4eec\u6c42\u51fa\u6240\u6709\u7684f[i]\u4e4b\u540e\uff0c\u53ea\u8981\u8fd9\u6837\u5c31\u884c\u4e86\uff1a\n\n```cpp\nfor (int i = 1; i <= n; ++i) ++g[f[i]];\nfor (int i = 1; i <= n; ++i) printf(\"%d\\n\", g[i]);\n```\n\n\u7136\u540e\u7b80\u5355\u5730\u63d0\u4e00\u63d0\u6811\u5957\u6811\u600e\u4e48\u5199\uff08\u524d\u9762\u770b\u5230\u6709\u4eba\u8bf4\u6811\u5957\u6811\u96be\u5199\uff09\u3002\n\n\u5176\u5b9e\u6211\u4eec\u666e\u901a\u7684\u5e73\u8861\u6811\u5c31\u662f\u4e00\u4e2a\u6839\u8282\u70b9root\uff0c\u800c\u73b0\u5728\u6811\u72b6\u6570\u7ec4\u5957\u5e73\u8861\u6811\u7684\u8bdd\u5c31\u76f8\u5f53\u4e8e \u6811\u72b6\u6570\u7ec4\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u6302\u4e86\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u56e0\u6b64\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6709\u4e00\u4e2a\u6811\u6839\uff0c\u6240\u4ee5\u6211\u4eec\u5f00\u4e2a\u6570\u7ec4\n```cpp\nint root[maxn];\n```\n\n\u6ce8\u610f \u8fd9\u91cc\u7684maxn\u5e76\u4e0d\u662f\u672c\u9898\u7684n\u7684\u6700\u5927\u503c\uff0c\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4b\u503c\uff0c\u6240\u4ee5\u5e94\u8be5\u662fk\u7684\u6700\u5927\u503c\u3002\u4f46\u662f\u6211\u61d2\u5f97\u533a\u5206\uff0c\u6240\u4ee5maxn\u76f4\u63a5\u5b9a\u4e49\u6210\u4e862e5+100\uff08\u53cd\u6b63\u4e5f\u5dee\u4e0d\u591a\uff09\n\n\u7136\u540e\u5c31\u662f\u51e0\u4e4e\u6a21\u677f\u4e00\u6837\u7684\u64cd\u4f5c\uff1a\uff08\u53cd\u6b63\u6211\u5199\u4e86\u597d\u51e0\u4e2a\u9898\uff0c\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u51e0\u4e4e\u4e00\u5b57\u672a\u6539\uff09\n\n```cpp\ninline void insert(int x, int y) {\n\tfor (; x <= k; x += x & -x)\n    \tinsertSplay(root[x], y);\n}\ninline int query(int x, int y) {\n\tint ans = 0;\n    for (; x; x -= x & -x)\n    \tans += querySplay(root[x], y);\n    return ans;\n}\n```\n\n\u63a5\u4e0b\u6765\u6240\u6709\u7684\u4e8b\u60c5\u90fd\u4ea4\u7ed9splay\u505a\u5c31\u597d\u8fa3\uff01\u8fd8\u6709\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\uff0c\u6811\u5957\u6811\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(nlogn)\uff0c\u6240\u4ee5splay\u5bf9\u5e94\u7684\u7a7a\u95f4\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u6211\u5f00\u7684\u662fmaxn * 30\u3002\n\n\u4e0b\u9762\u8d34\u4e0a\u5b8c\u6574\u4ee3\u7801\u3002\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...);\n}\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define rrep(I, A, B) for (int I = (A); I >= (B); --I)\n\nconst int maxn = 2e5 + 100;\nint fa[maxn * 30], size[maxn * 30], value[maxn * 30], ch[maxn * 30][2], freq[maxn * 30];\nint root[maxn];\nint n, k, tot;\n\ninline int iden(int x) {\n    if (ch[fa[x]][0] == x) return 0;\n    if (ch[fa[x]][1] == x) return 1;\n    return -1;\n}\ninline void update(int x) {\n    size[x] = freq[x];\n    if (ch[x][0]) size[x] += size[ch[x][0]];\n    if (ch[x][1]) size[x] += size[ch[x][1]];\n}\ninline int newNode(int v = 0) {\n    value[++tot] = v;\n    size[tot] = freq[tot] = 1;\n    fa[tot] = ch[tot][0] = ch[tot][1] = 0;\n    return tot;\n}\ninline void rotate(int x) {\n    if (!x) return;\n    int d = iden(x), y = fa[x];\n    if (~iden(y)) ch[fa[y]][iden(y)] = x;\n    fa[x] = fa[y];\n    ch[y][d] = ch[x][d ^ 1];\n    if (ch[x][d ^ 1]) fa[ch[x][d ^ 1]] = y;\n    ch[x][d ^ 1] = y;\n    fa[y] = x;\n    update(y);\n    update(x);\n}\ninline void splay(int x, int &k) {\n    if (x == k) return;\n    int p = fa[k];\n    while (fa[x] != p) {\n        int y = fa[x];\n        if (fa[y] != p) rotate(iden(y) ^ iden(x) ? x : y);\n        rotate(x);\n    }\n    k = x;\n}\ninline void insertSplay(int &rt, int val) {\n    if (!rt) {\n        rt = newNode(val);\n        return;\n    }\n    int x = rt;\n    while (0207) {\n        ++size[x];\n        if (val == value[x]) {\n            ++freq[x];\n            return;\n        }\n        int d = val > value[x];\n        if (ch[x][d]) x = ch[x][d];\n        else {\n            ch[x][d] = newNode(val);\n            fa[ch[x][d]] = x;\n            splay(ch[x][d], rt);\n            return;\n        }\n    }\n}\nint querySplay(int x, int val) {\n    if (!x) return 0;\n    if (val == value[x])\n        return ch[x][0] ? size[ch[x][0]] + freq[x] : freq[x];\n    else if (val < value[x])\n        return querySplay(ch[x][0], val);\n    else if (ch[x][0])\n        return size[ch[x][0]] + freq[x] + querySplay(ch[x][1], val);\n    else\n        return freq[x] + querySplay(ch[x][1], val);\n}\n\ninline void insertBit(int x, int y) {\n    for (; x <= k; x += x & -x)\n        insertSplay(root[x], y);\n}\ninline int queryBit(int x, int y) {\n    int ans = 0;\n    for (; x; x -= x & -x)\n        ans += querySplay(root[x], y);\n    return ans;\n}\n\nstruct Element {\n    int id, a, b, c;\n};\nElement ele[maxn];\nint f[maxn], g[maxn];\nbool vis[maxn];\ninline bool aLess(const Element& lhs, const Element& rhs) {\n    return lhs.a < rhs.a;\n}\n\nint main() {\n    read(n, k);\n    rep(i, 1, n) read(ele[i].a, ele[i].b, ele[i].c);\n    std::sort(ele + 1, ele + n + 1, aLess);\n    rep(i, 1, n) {\n        if (!vis[i])\n            for (int j = i; ele[j].a == ele[i].a && j <= n; ++j) {\n                insertBit(ele[j].b, ele[j].c);\n                vis[j] = 1;\n            }\n        f[i] = queryBit(ele[i].b, ele[i].c);\n    }\n    rep(i, 1, n) ++g[f[i]];\n    rep(i, 1, n) printf(\"%d\\n\", g[i]);\n    return 0;\n}\n```",
        "postTime": 1533287613,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "## \u697c\u4e0b\u4ee3\u7801\u771f\u662f\u975e\u5e38\u4f18\u7f8e\uff0c\u8865\u5145\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u5957treap\u7684\u5927\u6982\u601d\u8def\u3002\n\n\n- \u6211\u4eec\u8981\u505a\u7684\u662f\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u6bd4f(i)\u201c\u5c0f\u201d\u7684\u5143\u7d20\u3002\n\n\u8fd9\u65f6\u60f3\u5230\u7528treap\uff1f\u5b83\u53ef\u4ee5\u505a\u5230\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u7684\u6392\u540d\uff08\u6709\u591a\u5c11\u6bd4\u5b83\u5c0f\u7684\u70b9\uff09\u3002\n\n\u518d\u60f3\u60f3\u53d1\u73b0\u53ea\u7ef4\u62a4rank\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6\u6709\u4e09\u7ef4\u3002\n\n\n- \u6811\u72b6\u6570\u7ec4\u53ef\u4ee5log\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\n\n\u800c\u5728\u6211\u4eec\u6309cmp\u6392\u5b8c\u5e8f\u4e4b\u540e\uff0c\u4fdd\u8bc1\u4e86j = 1 ~ i\u4e2d, aj < ai\u4e14bj < bi\u3002\u6ee1\u8db3\u6761\u4ef6\u7684j\u53ea\u80fd\u5728i\u7684\u524d\u7f00\u4e2d\u3002\n\n\n- \u4e8e\u662f\u53ef\u4ee5\u628atreap\u5957\u5165\u6811\u72b6\u6570\u7ec4\uff1f\n\n\u6bcf\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u7ef4\u62a4\u4e00\u4e2atreap\uff0c\u67e5\u8be2\u5f53\u524d\u533a\u95f4\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u91cf\uff0c\n\n\u7d2f\u52a0\u5c31\u80fd\u6c42\u5f97\u6ee1\u8db3\u6761\u4ef6\u7684j\u7684\u6570\u91cf\u3002\n\n\u6700\u540e\u7b54\u6848\u7ef4\u62a4\u7684\u662f\u6ee1\u8db3\u6570\u91cf\u4e3aj\u7684i\u6709\u591a\u5c11\u4e2a\u2026\u2026\u518d\u8fdb\u884c\u8f6c\u6362\u5373\u53ef\u3002\n",
        "postTime": 1512650040,
        "uid": 9098,
        "name": "XYloto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3810)\n\n### \u524d\u8a00\n\n\u8fd9\u662f\u4e00\u7bc7\u5206\u5757\u9898\u89e3\u3002\n\n## \u9898\u610f\n\n\u6709 $n$ \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u6c42\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u4e09\u4e2a\u5c5e\u6027\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n\u8fd9\u4e2a\u9898\u610f\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u8f6c\u5316\u4e00\u4e0b\uff0c\u5148\u6309 $a$ \u5c5e\u6027\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5c5e\u6027 $b$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u5c5e\u6027 $c$ \u6700\u672b\u6392\u5e8f\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\n\n\u6709 $n$ \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u6c42\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u5b83\u7684\u524d\u7f00\u4e2d\u4e24\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002\n\n## \u505a\u6cd5\n\n\u8003\u8651\u5bf9\u4e8e\u5e8f\u5217\u5206\u5757\uff0c\u6bcf\u5904\u7406\u5b8c\u4e00\u4e2a\u5757\uff0c\u5c31\u91cd\u6784\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5757\u5185\u7684\u66b4\u529b\u6bd4\u8f83\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sqrt{n})$ \u3002\n\n\u5bf9\u4e8e\u524d\u9762\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u4ece\u5904\u7406\u51fa\u7684\u6570\u7ec4\u4e2d\u8bfb\u51fa\u7b54\u6848\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(1)$ \u3002\n\n\u8003\u8651\u600e\u4e48\u5904\u7406\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u6570\u7ec4\u3002\n\n\u5c06\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u4e2a\u5c5e\u6027\u5bf9\u5e94\u5230\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5143\u7d20\u5bf9\u540e\u9762\u7684\u5143\u7d20\u505a\u8d21\u732e\uff0c\u5fc5\u987b\u8981\u5b83\u5904\u4e8e\u540e\u9762\u5143\u7d20\u7684\u53f3\u4e0b\u65b9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u6570\u52a0\u5230\u5bf9\u5e94\u7684\u70b9\u4e0a\uff0c\u7136\u540e\u505a\u4e00\u904d\u4e8c\u7ef4\u524d\u7f00\u548c\u3002\n\n\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\uff0c\u660e\u663e\u4f1a\u8d85\u65f6\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u56e0\u4e3a\u8fd9\u4e9b\u524d\u9762\u7684\u5143\u7d20\u5728\u8fd9\u6b21\u91cd\u6784\u540e\u53ea\u7528\u5bf9\u540e\u4e00\u4e2a\u5757\u4e2d\u7684\u5143\u7d20\u505a\u8d21\u732e\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u5c5e\u6027\u5927\u5c0f\u4e0d\u91cd\u8981\uff0c\u53ea\u6709\u4e0e\u540e\u9762\u8fd9\u4e9b\u5143\u7d20\u5c5e\u6027\u7684\u76f8\u5bf9\u5927\u5c0f\u6709\u610f\u4e49\u3002\n\n\u4e8e\u662f\u628a\u524d\u9762\u7684\u5143\u7d20\u5c5e\u6027\u6309\u4e0e\u540e\u9762\u8fd9\u4e9b\u5143\u7d20\u5c5e\u6027\u7684\u76f8\u5bf9\u5927\u5c0f\u7ecf\u884c\u79bb\u6563\u5316\uff0c\u518d\u505a\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\max(n,B^2))$ \u7684\uff0c\u5728 $B$ \u53d6 $\\sqrt{n}$ \u65f6\u6700\u4f18\u3002\n\n\u603b\u5171\u91cd\u6784 $\\sqrt{n}$ \u6b21\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n})$ \u3002\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n\u5bf9\u4e8e\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4ed6\u4eec\u5185\u90e8\u4f1a\u91cd\u590d\u8d21\u732e\uff0c\u4e0d\u597d\u5904\u7406\uff0c\u4e8e\u662f\u628a\u5b83\u4eec\u5220\u6210\u4e00\u4e2a\u5143\u7d20\uff0c\u516c\u7528\u8fd9\u4e2a\u5143\u7d20\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int qread()\n{\n\tregister int a=0;register char ch=getchar();\n\twhile(ch>'9'||ch<'0'){ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){(a*=10)+=(ch^48);ch=getchar();}\n\treturn a;\n}\nint n,k,f[100010],p,tot,s[100010],ans[100010],d[100010];\nint cl,c[100010],st[400],ed[400],mp[500][500],cb[200010],cc[200010];\nstruct poit\n{\n\tint a,b,c,id,cnt;\n}a[100010];\ninline bool cmp(poit x,poit y){return x.a==y.a?(x.b==y.b?x.c<y.c:x.b<y.b):x.a<y.a;}\ninline void re(register int h)\n{\n\tmemset(mp,0,sizeof(mp));\n\tint totb=0;\n\tfor(register int i=st[h];i<=ed[h];++i)s[++totb]=a[i].b;\n\tsort(s+1,s+1+totb);\n\ttotb=unique(s+1,s+1+totb)-s-1;\n\tp=1;\n\tfor(register int i=1;i<=k;++i)\n\t{\n\t\tif(i>s[p]&&p<=totb)++p;\n\t\tcb[i]=p;\n\t}\n\tint totc=0;\n\tfor(register int i=st[h];i<=ed[h];++i)s[++totc]=a[i].c;\n\tsort(s+1,s+1+totc);\n\ttotc=unique(s+1,s+1+totc)-s-1;\n\tp=1;\n\tfor(register int i=1;i<=k;++i)\n\t{\n\t\tif(i>s[p]&&p<=totc)++p;\n\t\tcc[i]=p;\n\t}\n\tfor(register int i=st[h]-1;i;--i)mp[cb[a[i].b]][cc[a[i].c]]+=a[i].cnt;\n\tfor(register int i=1;i<=totb;++i)\n\t{\n\t\tfor(register int j=1;j<=totc;++j)\n\t\t{\n\t\t\tmp[i][j]+=mp[i-1][j]+mp[i][j-1]-mp[i-1][j-1];\n\t\t}\n\t}\n\treturn ;\n}\nint main()\n{\n\tn=qread();\n\tk=qread();\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\ta[i].a=qread();\n\t\ta[i].b=qread();\n\t\ta[i].c=qread();\n\t\ta[i].id=i;\n\t\ta[i].cnt=1;\n\t\tf[i]=i;\n\t}\n\tsort(a+1,a+1+n,cmp);\n\tp=0;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tif(a[i].a==a[p].a&&a[i].b==a[p].b&&a[i].c==a[p].c)\n\t\t{\n\t\t\t++tot;\n\t\t\tf[a[i].id]=a[p].id;\n\t\t\ta[i].a=k+1;\n\t\t\t++a[p].cnt;\n\t\t}\n\t\telse p=i;\n\t}\n\tsort(a+1,a+1+n,cmp);\n\tn-=tot;\n\tcl=sqrt(n)+1;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tc[i]=(i-1)/cl+1,ed[c[i]]=i;\n\t\tans[a[i].id]+=a[i].cnt-1;\n\t}\n\tfor(register int i=n;i;--i)st[c[i]]=i;\n\tfor(register int i=1;i<=c[n];++i)\n\t{\n\t\tre(i);\n\t\tfor(register int j=st[i];j<=ed[i];++j)\n\t\t{\n\t\t\tfor(register int k=st[i];k<j;++k)\n\t\t\t{\n\t\t\t\tif(a[k].a<=a[j].a&&a[k].b<=a[j].b&&a[k].c<=a[j].c)ans[a[j].id]+=a[k].cnt;\n\t\t\t}\n\t\t\tans[a[j].id]+=mp[cb[a[j].b]][cc[a[j].c]];\n\t\t}\n\t}\n\tfor(register int i=1;i<=n+tot;++i)++d[ans[f[i]]];\n\tfor(register int i=0;i<n+tot;++i)printf(\"%d\\n\",d[i]);\n\treturn 0;\n}\n```\n## \u95ee\u9898\u5ef6\u4f38\n\n\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u62d3\u5c55\u5230\u9ad8\u7ef4\uff0c\u53ea\u7528\u5c06\u4e8c\u7ef4\u524d\u7f00\u548c\u53d8\u4e3a\u9ad8\u7ef4\u524d\u7f00\u548c\uff0c\u8c03\u6574\u5757\u957f\u5373\u53ef\u3002\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n\u8bbe\u5757\u957f\u4e3a $B$\uff0c\u5219\u603b\u5171\u91cd\u6784 $\\dfrac{n}{B}$ \u6b21\uff0c\u6bcf\u6b21\u9700\u8981\u505a\u5927\u5c0f\u4e3a $B$ \u7684 $k$ \u7ef4\u524d\u7f00\u548c\uff0c\u4ee5\u53ca\u5bf9 $n$ \u4e2a\u6570\u7684\u79bb\u6563\u3002\n\n\u5bf9\u6bcf\u4e2a\u5143\u7d20\u7684\u8be2\u95ee\uff0c\u9700\u8981 $O(B)$ \u7684\u6bd4\u8f83\u548c $O(1)$ \u7684\u67e5\u8be2\u3002\n\n\u603b\u5171\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nB+\\dfrac{n}{B}(B^k+n))$\u3002\n\n\u5bf9\u4e8e\u6700\u4f18\u5757\u957f\uff0c$O(nB)$ \u5ffd\u7565\u4e0d\u8ba1\uff0c\u53d6 $B^k=n$ \u5f97\u5230 $B=\\sqrt[k]{n}$\u3002\n\n\u90a3\u4e48\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n^\\frac{2k-1}{k})$\u3002\n",
        "postTime": 1665883979,
        "uid": 416521,
        "name": "NATURAL6",
        "ccfLevel": 7,
        "title": "P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/P3810)\n\n\u540d\u5b57\u597d\u597d\u542c\\(^o^)/~\n\n\u524d\u7f6e\u829d\u58eb\uff1a[P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1](https://www.luogu.com.cn/problem/P3374)\n\n\u6ce8\uff1a$[flag]$\u7c7b\u4f3c\u4e8e\u4e00\u4e2a$bool$\u578b\u53d8\u91cf\uff0c\u5982\u679c$flag$\u4e3a\u771f\uff0c\u90a3\u4e48$[flag]=1$\uff0c\u53cd\u4e4b\u5219\u4e3a$0$\u3002\n\n\u9898\u610f\uff1a\u7ed9\u5b9a$n$\u4e2a\u4e09\u5143\u7ec4$(a_i,b_i,c_i)$\uff0c\u8bbe$f(i)=\\sum_{j\\neq i}[a_j\\leq a_i,b_j\\leq b_i,c_j\\leq c_i]$\uff0c$ans[d]=\\sum_{i=1}^{n}[f(i)=d]$\uff0c\u8f93\u51fa$ans[d](d\\in [0,n))$\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\u7684\u9898\u76ee\uff08\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u4e86\uff09\uff0c\u8003\u8651\u600e\u4e48\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\u70b9\u5462\uff1f\u6211\u4eec\u628a\u4e09\u5143\u7ec4\u6309\u7167 $a_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c $a_i$ \u5c31\u4fdd\u8bc1\u662f\u9012\u589e\u7684\u4e86\uff0c\u90a3\u5c31\u53d8\u6210\u4e86\u4e8c\u7ef4\u504f\u5e8f\u5566\uff01\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e00\u4e2a~~\u6811\u5957\u6811~~\u795e\u5947\u7684CDQ\u5206\u6cbb\u3002\n\nCDQ\u5206\u6cbb\u7684\u4e3b\u8981\u601d\u60f3\u5927\u6982\u5c31\u662f\uff0c\u5c06\u4e00\u4e2a\u95ee\u9898\u5206\u6210\u540c\u6837\u5927\u7684\u4e24\u4e2a\uff0c\u9012\u5f52\u5904\u7406\u4e24\u4e2a\u89c4\u6a21\u8f83\u5c0f\u7684\u95ee\u9898\uff0c\u7136\u540e\u8981\u628a\u4e24\u4e2a\u89c4\u6a21\u5c0f\u7684\u95ee\u9898\u5408\u5e76\u65f6\uff0c\u8ba1\u7b97\u524d\u4e00\u534a\u5bf9\u540e\u4e00\u534a\u7684\u8d21\u732e\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728\u7528\u5f52\u5e76\u6392\u5e8f\u8ba1\u7b97\u9006\u5e8f\u5bf9\u65f6\uff0c\u5f53\u524d\u7684\u5e8f\u5217 $[l,r]$\uff0c$[l,mid]$ \u548c $[mid+1,r]$ \u5206\u522b\u6709\u5e8f\u4e86\uff0c\u7136\u540e\u6211\u4eec\u7528\u4e24\u4e2a\u6307\u9488 $p$ \u548c $q$ \u5728\u4e24\u4e2a\u5e8f\u5217\u4e2d\u626b\u63cf\uff0c\u5982\u679c\u5de6\u534a\u90e8\u5206\u7684 $val[p]$ \u4e0e\u53f3\u534a\u90e8\u5206\u7684 $val[q]$ \uff0c\u6709 $val[p]>val[q]$\uff0c\u90a3\u4e48 $[p,mid]$ \u5bf9 $q$ \u90fd\u4f1a\u6709\u9006\u5e8f\u5bf9\u7684\u8d21\u732e\uff0c\u7b54\u6848\u5c31\u7d2f\u52a0\u4e0a $mid-p+1$\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u8981\u8ba1\u7b97 $b_j\\leq b_i$ \u4e14 $c_j\\leq c_i$ \u7684\u6570\u91cf\uff08 $a$ \u5df2\u7ecf\u6709\u5e8f\u4e86\uff09\uff0c\u6211\u4eec\u5c06 $b$ \u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u5de6\u534a\u90e8\u5206 $b[p]<b[q]$\uff0c\u6211\u4eec\u628a $p$ \u4f4d\u7f6e\u7684\u8fd9\u4e2a\u4e09\u5143\u7ec4\u653e\u5165\u4e00\u4e2a\u7528\u6765\u5408\u5e76\u7684\u6570\u7ec4\u91cc\uff0c\u90a3\u4e48\u540e\u9762\u653e\u5165\u8fd9\u4e2a\u6570\u7ec4\u91cc\u7684\u4e09\u5143\u7ec4\u7684$b$\u80af\u5b9a\u6bd4\u5f53\u524d\u8fd9\u4e2a $b[p]$ \u5927\uff0c\u4e5f\u5c31\u5f53\u524d\u8fd9\u4e2a\u4e09\u5143\u7ec4\u6709\u53ef\u80fd\u5bf9\u540e\u9762\u7684\u4e09\u5143\u7ec4\u505a\u51fa\u8d21\u732e\u3002\u6211\u4eec\u5bf9 $c$ \u5efa\u7acb\u6811\u72b6\u6570\u7ec4\uff0c\u5728 $c[p]$ \u8fd9\u4e2a\u4f4d\u7f6e\u5355\u70b9\u4fee\u6539\u3002\n\n\u5f53 $b[p]>b[q]$ \u65f6\uff0c\u8981\u628a$q$\u4f4d\u7f6e\u7684\u8fd9\u4e2a\u4e09\u5143\u7ec4\u653e\u5165\u8fd9\u4e2a\u6570\u7ec4\u5185\uff0c\u90a3\u4e48\u4e4b\u524d\u653e\u5165\u8fd9\u4e2a\u6570\u7ec4\u91cc\u7684\u4e09\u5143\u7ec4\u7684 $b$ \u80af\u5b9a\u6bd4\u5f53\u524d\u8fd9\u4e2a $b[q]$ \u5c0f\uff0c\u90a3\u5c31\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u67e5\u8be2 $c[q]$ \u4f4d\u7f6e\u7684\u524d\u7f00\u548c\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/05e82iz4.png)\n\n\u5927\u6982\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u6709\u5f88\u591a\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff1a\n\n- \u4e09\u5143\u7ec4\u6709\u53ef\u80fd\u5b58\u5728\u5b8c\u5168\u76f8\u540c\u7684\u3002\n\n\u56e0\u4e3aCDQ\u8fc7\u7a0b\u4e2d\u53ea\u4f1a\u8ba1\u7b97\u5de6\u8fb9\u5bf9\u53f3\u8fb9\u7684\u8d21\u732e\uff0c\u5982\u679c\u6709\u76f8\u540c\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6309\u4ec0\u4e48\u987a\u5e8f\u8ba1\u7b97\u90fd\u4f1a\u6709\u9057\u6f0f\u3002\u8003\u8651\u628a\u8fd9\u4e9b\u76f8\u540c\u7684\u5408\u5e76\u8d77\u6765\uff0c\u8bb0\u5f55\u4e00\u4e2a$size$\uff0c\u4ee3\u8868\u8fd9\u79cd\u4e09\u5143\u7ec4\u6709\u591a\u5c11\u4e2a\u3002\u9664\u4e86CDQ\u8ba1\u7b97\u7684\u8d21\u732e\u5916\uff0c\u8fd8\u6709\u5b83\u4eec\u81ea\u8eab\u76f8\u4e92\u4e4b\u95f4\u7684\u8d21\u732e$size-1$\u3002\n\n\u6b63\u662f\u56e0\u4e3a\u8981\u628a\u76f8\u540c\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u53ea\u6309\u7167$a$\u6392\uff0c\u800c\u662f\u8981\u6309\u7167$a,b,c$\u4e3a\u7b2c\u4e00\u3001\u7b2c\u4e8c\u3001\u7b2c\u4e09\u5173\u952e\u5b57\u6392\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u76f8\u540c\u7684\u4e09\u5143\u7ec4\u4f1a\u6328\u5728\u4e00\u8d77\u3002\n\n- CDQ\u8fc7\u7a0b\u4e2d\u5b58\u5728$b[p]=b[q]$\u7684\u60c5\u51b5\n\n\u56e0\u4e3a\u8981\u8ba1\u7b97\u7684\u662f\u53ef\u4ee5\u53d6\u7b49\u53f7\u7684\uff0c\u5982\u679c\u628a\u8fd9\u79cd\u60c5\u51b5\u5f52\u5230\u5927\u4e8e\u53f7\u90a3\u8fb9\uff0c\u4e5f\u5c31\u662f\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u67e5\u8be2\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4f1a\u6709\u9057\u6f0f\u3002\u6240\u4ee5\u5e94\u8be5\u5f52\u5230\u5c0f\u4e8e\u53f7\u91cc\uff0c\u4e5f\u5c31\u662f\u66f4\u65b0\u6811\u72b6\u6570\u7ec4\uff0c\u5bf9$b[q]$\u4ecd\u7136\u80fd\u505a\u51fa\u8d21\u732e\u3002\n\n- \u7ed3\u6784\u4f53\u5185\u53d8\u91cf\u548c\u5916\u90e8\u53d8\u91cf\u7684\u5173\u7cfb\n\n\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u7684\u8bf7\u81ea\u884c\u5ffd\u7565\u3002\u3002\n\n\u4e09\u5143\u7ec4\u6211\u662f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u8868\u793a\u7684\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u4f4d\u7f6e\u5728\u4e0d\u65ad\u53d8\u5316\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u4e2d\u5e94\u8be5\u8981\u518d\u5b58\u4e00\u4e2a$pos$\uff0c\u8fd9\u4e2a$pos$\u5e94\u8be5\u4e3a\u53bb\u91cd\u540e\uff0c\u4e09\u5143\u7ec4\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u8fd8\u6709$size$\u6570\u7ec4\uff0c\u6211\u7684\u5199\u6cd5\u5b58\u7684\u4e5f\u662f\u4e09\u5143\u7ec4\u53bb\u91cd\u540e\u7684\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684\u4e09\u5143\u7ec4\u7684\u6570\u91cf\uff08\u4e5f\u5c31\u662f\u8fd9\u4e2a$size$\u4e0d\u4f1a\u56e0\u4e3a\u6392\u5e8f\u800c\u53d8\u5316\uff09\u3002\u8fd9\u4e2a\u95ee\u9898\u4e0e\u4e2a\u4eba\u7684\u5199\u6cd5\u6709\u5173\uff0c\u8fd8\u662f\u770b\u4ee3\u7801\u5427\u3002\n\n- \u6811\u72b6\u6570\u7ec4\u6bcf\u6b21CDQ\u8981\u6e05\u7a7a\n\n\u6ce8\u610f\u4e0d\u80fd\u7528$memset$\uff0c\u4f1a\u8d85\u65f6\uff0c\u800c\u662f\u5012\u7740\u505a\u56de\u53bb\uff0c\u5c31\u548c\u70b9\u5206\u6cbb\u4e00\u6837\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N=1e5+10;\nint n,m;\nint size[N],ans[N],cnt[N],t[2*N];\t\t\t\t\t  //ans\u5b58\u7684\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0ccnt\u5b58\u7684\u662f\u6bcf\u79cd\u7b54\u6848\u6709\u591a\u5c11\u4e2a\uff0ct\u662f\u6811\u72b6\u6570\u7ec4 \nstruct node\n{\n\tint a,b,c;\n\tint pos;\t\t\t\t\t\t\t\t\t\t  //pos\u8bb0\u5f55\u7684\u662f\u53bb\u91cd\u540e\u7684\u4f4d\u7f6e \n\tbool operator != (const node &x) const\n\t{\n\t\treturn (a!=x.a||b!=x.b||c!=x.c);\n\t}\n}tmp[N],v[N],w[N];\t\t\t\t\t\t\t\t\t  //tmp\u662f\u8f93\u5165\u7684\u4e09\u5143\u7ec4\uff0cv\u662f\u53bb\u91cd\u5e76\u7528\u6765\u6392\u5e8f\u7684\uff0cw\u8f85\u52a9\u6392\u5e8f \ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\ninline void change(int x,int c)\n{\n\tfor(int i=x;i<=m;i+=lowbit(i))\n\t\tt[i]+=c;\n}\ninline int query(int x)\n{\n\tint res=0;\n\tfor(int i=x;i>=1;i-=lowbit(i))\n\t\tres+=t[i];\n\treturn res;\n}\t\t\t\t\t\t\t\t\t\t\t\t\t  //\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539\u3001\u67e5\u8be2\u524d\u7f00\u548c \ninline void CDQ(int l,int r)\n{\n\tif(l==r) return;\n\tint mid=(l+r)/2,p=l,q=mid+1;\n\tCDQ(l,mid),CDQ(mid+1,r);\t\t\t\t\t\t  //\u9012\u5f52\u89e3\u51b3\u5b50\u95ee\u9898 \n\tfor(int i=l;i<=r;i++)\n\t{\t\t\t\t\t\t\t\t\t\t\t\t  //\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u66f4\u65b0\uff0c\u5e76\u653e\u5165\u8f85\u52a9\u6392\u5e8f\u7684\u6570\u7ec4\u91cc\t\t\t\n\t\tif((p<=mid&&v[p].b<=v[q].b)||q>r) change(v[p].c,size[v[p].pos]),w[i]=v[p++];\n\t\telse ans[v[q].pos]+=query(v[q].c),w[i]=v[q++];//\u66f4\u65b0\u7b54\u6848 \n\t}\n\tfor(int i=l;i<=mid;i++)\n\t\tchange(v[i].c,-size[v[i].pos]);\t\t\t\t  //\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4 \n\tfor(int i=l;i<=r;i++)\n\t\tv[i]=w[i];\n}\ninline bool cmp(node x,node y)\t\t\t\t\t\t  //3\u5173\u952e\u5b57\u6392\u5e8f \n{\n\tif(x.a==y.a)\n\t{\n\t\tif(x.b==y.b) return x.c<y.c;\n\t\telse return x.b<y.b;\n\t}\n\telse return x.a<y.a;\n}\nint main()\n{\n\tint tn;\n\tscanf(\"%d%d\",&tn,&m);\n\tfor(int i=1;i<=tn;i++)\n\t\tscanf(\"%d%d%d\",&tmp[i].a,&tmp[i].b,&tmp[i].c);\n\tsort(tmp+1,tmp+tn+1,cmp);\n\tfor(int i=1;i<=tn;i++)\t\t\t\t\t\t\t  //\u6392\u5e8f\u540e\u53bb\u91cd \n\t{\n\t\tif(tmp[i]!=tmp[i-1]) v[++n]=tmp[i],v[n].pos=n;//\u8bb0\u5f55pos \n\t\tsize[n]++;\t\t\t\t\t\t\t\t\t  //\u8bb0\u5f55size \n\t}\n\tCDQ(1,n);\n\tfor(int i=1;i<=n;i++)\t\t\t\t\t\t\t  //\u540c\u4e00\u79cd\u4e09\u5143\u7ec4\u5185\u8fd8\u6709\u8d21\u732esize-1\uff0c\u8fd9\u4e9b\u4e09\u5143\u7ec4\u7684\u7b54\u6848\u90fd\u76f8\u540c \n\t\tcnt[ans[v[i].pos]+size[v[i].pos]-1]+=size[v[i].pos];\n\tfor(int i=0;i<tn;i++)\n\t\tprintf(\"%d\\n\",cnt[i]);\n\treturn 0;\n}\n```\n\u8c22\u8c22~~",
        "postTime": 1585476547,
        "uid": 81238,
        "name": "MCAdam",
        "ccfLevel": 7,
        "title": "P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6709k-d tree\u505a\u6cd5\u7684\uff0c\u4e0d\u8fc7\u5f88\u6280\u5de7\uff0c\u597d\u50cf\u8fd8\u6709\u53e6\u4e00\u7bc7k-d tree\u9898\u89e3\uff0c\u4f46\u4ed6\u5efa\u4e86\u4e24\u68f5\u6811\uff0c\u6211\u4e5f\u6ca1\u5927\u770b\u61c2\u3002\n\n\u4e09\u7ef4\u7684k-d tree\u662f\u4e00\u5b9a\u8fc7\u4e0d\u53bb\u7684\uff0c\u5f97\u5148\u628a\u4e09\u7ef4\u53d8\u6210\u4e8c\u7ef4\u3002\n\n\u9996\u5148\u8981\u6309\u7b2c\u4e09\u7ef4\u6392\u5e8f\uff0c\u6309\u987a\u5e8f\u4e00\u6b21\u6027\u52a0\u5165\u7b2c\u4e09\u7ef4\u76f8\u540c\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u81ea\u52a8\u7701\u53bb\u4e86\u7b2c\u4e09\u7ef4\u3002\n\n\u4e00\u5f00\u59cb\u6211\u5199\u7684\u662f\u5b9a\u671f\u91cd\u6784\uff0c\u53c2\u6570\u662f0.7\u65f6\u6700\u5feb\uff0c\u6700\u5927\u7684\u70b9\u4e5f\u8dd1\u4e862s\u3002\n\n\u8fd9\u4e2a$n\\sqrt{n}$\u7684\u4f18\u7f8e\u505a\u6cd5\u88ab\u5361\u5230\u4e8660\u5206\uff0c\u8ba9\u6211\u5341\u5206\u6124\u61d1\u3002\u4e8e\u662f\u6211\u62ff\u51fa\u4e86\u4ee5\u524d\u6ca1\u5199\u8fc7\u7684\u53e6\u4e00\u79cd\u63d2\u5165\u505a\u6cd5\uff0c\u5148\u628a\u6240\u6709\u7684\u70b9\u53bb\u91cd\u4e00\u4e0b\u90fd\u52a0\u8fdb\u53bb\uff0c\u5148\u5efa\u597d\u6811\uff0c\u628a\u6bcf\u4e2a\u70b9\u6240\u63a7\u5236\u7684\u77e9\u5f62\u4e5f\u5148\u5904\u7406\u597d\uff0c\u6253\u4e0a\u88ab\u5220\u9664\u7684\u6807\u8bb0\uff0c\u63d2\u5165\u65f6\u627e\u7684\u6811\u4e0a\u5bf9\u5e94\u7684\u70b9\u628a\u70b9\u6743+1\uff0c\u5176\u4ed6\u7684\u90fd\u4e0d\u6539\u3002\u8fd9\u6837\u7684\u8bdd\u6700\u5927\u7684\u70b9\u5c31\u662f1s\u4e86\u3002\n\n```c++\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define re register\nusing namespace std;\n#ifdef ONLINE_JUDGE\nchar ss[1<<17],*A=ss,*B=ss;\ninline char gc(){if(A==B){B=(A=ss)+fread(ss,1,1<<17,stdin);if(A==B)return EOF;}return*A++;}\ntemplate<class T>inline void read(T&x){\n\tstatic char c;static int y;\n\tfor(c=gc(),x=0,y=1;c<48||57<c;c=gc())if(c=='-')y=-1;\n\tfor(;48<=c&&c<=57;c=gc())x=((x+(x<<2))<<1)+(c^'0');\n\tx*=y;\n}\n#else\nvoid read(int&x){scanf(\"%d\",&x);}\n#endif\nconst double fac=0.70;\nstruct point{\n\tint d[2],z;\n}a[100001],b[100001];\nstruct kdtree{\n\tint ch[2],sz,x[2],d[2],y[2],lv;\n}t[100001];\nint f[100001],n,tot,u,root,m;\ninline bool cmp1(point x,point y){return x.z<y.z;}\ninline bool cmp2(point x,point y){return x.d[u]<y.d[u];}\ninline bool cmp3(point x,point y){\n\tif (x.d[0]!=y.d[0]) return x.d[0]<y.d[0];\n\treturn x.d[1]<y.d[1];\n}\ninline void pushup(int rt){\n\tint l=t[rt].ch[0],r=t[rt].ch[1];\n\tt[rt].sz=t[l].sz+t[r].sz+t[rt].lv;\n\tif (l){\n\t\tt[rt].x[0]=min(t[rt].x[0],t[l].x[0]);\n\t\tt[rt].y[0]=min(t[rt].y[0],t[l].y[0]);\n\t\tt[rt].x[1]=max(t[rt].x[1],t[l].x[1]);\n\t\tt[rt].y[1]=max(t[rt].y[1],t[l].y[1]);\n\t}\n\tif (r){\n\t\tt[rt].x[0]=min(t[rt].x[0],t[r].x[0]);\n\t\tt[rt].y[0]=min(t[rt].y[0],t[r].y[0]);\n\t\tt[rt].x[1]=max(t[rt].x[1],t[r].x[1]);\n\t\tt[rt].y[1]=max(t[rt].y[1],t[r].y[1]);\n\t}\n}\ninline void up(int rt){\n\tint l=t[rt].ch[0],r=t[rt].ch[1];\n\tt[rt].sz=t[l].sz+t[r].sz+t[rt].lv;\n}\nint build(int d,int l,int r){\n\tif (l>r) return 0; u=d;\n\tint mid=(l+r)>>1,rt=++tot;\n\tnth_element(b+l,b+mid,b+r+1,cmp2);\n\tt[rt].x[0]=t[rt].x[1]=t[rt].d[0]=b[mid].d[0];\n\tt[rt].y[0]=t[rt].y[1]=t[rt].d[1]=b[mid].d[1];\n\tt[rt].ch[0]=build(d^1,l,mid-1);\n\tt[rt].ch[1]=build(d^1,mid+1,r);\n\tpushup(rt); return rt;\n}\nvoid ins(int rt,point x){\n\tif (t[rt].d[0]==x.d[0]&&t[rt].d[1]==x.d[1]){\n\t\tt[rt].lv++; t[rt].sz++; return;\n\t}\n\tint l=t[rt].ch[0],r=t[rt].ch[1];\n\tif (t[l].x[0]<=x.d[0]&&x.d[0]<=t[l].x[1]&&\n\t\tt[l].y[0]<=x.d[1]&&x.d[1]<=t[l].y[1])\n\t\tins(l,x);\n\tif (t[r].x[0]<=x.d[0]&&x.d[0]<=t[r].x[1]&&\n\t\tt[r].y[0]<=x.d[1]&&x.d[1]<=t[r].y[1])\n\t\tins(r,x);\n\tup(rt);\n\treturn;\n}\nint query(int rt,point x){\n\tif (!rt||!t[rt].sz) return 0;\n\tif (t[rt].x[0]>x.d[0]||t[rt].y[0]>x.d[1])\n\t\treturn 0;\n\tif (t[rt].x[1]<=x.d[0]&&t[rt].y[1]<=x.d[1])\n\t\treturn t[rt].sz;\n\tint num=query(t[rt].ch[0],x)+query(t[rt].ch[1],x);\n\tif (t[rt].d[0]<=x.d[0]&&t[rt].d[1]<=x.d[1]) num+=t[rt].lv;\n\treturn num;\n}\nvoid debug(int rt){\n\tif (t[rt].ch[0]) debug(t[rt].ch[0]);\n\tprintf(\"num:%d dx:%d dy:%d ch0:%d ch1:%d sz:%d lv:%d\\n\",\n\trt,t[rt].d[0],t[rt].d[1],t[rt].ch[0],t[rt].ch[1],t[rt].sz,t[rt].lv);\n\tif (t[rt].ch[1]) debug(t[rt].ch[1]);\n}\nint main(){\n//\tfreopen(\"0a.in\",\"r\",stdin);\n//\tfreopen(\"0a.out\",\"w\",stdout);\n\tint k;\n\tread(n),read(k);\n\tfor (re int i=1; i<=n; i++)\n\t\tread(a[i].d[0]),read(a[i].d[1]),read(a[i].z);\n\tsort(a+1,a+n+1,cmp3);\n\tfor (int i=1; i<=n; i++)\n\t\tif (a[i].d[0]!=a[i-1].d[0]||a[i].d[1]!=a[i-1].d[1])\n\t\t\tb[++m]=a[i];\n\troot=build(0,1,m);\n\tsort(a+1,a+n+1,cmp1);\n\tfor (re int p=1; p<=n; p++){\n\t\tk=p;\n\t\twhile (a[k+1].z==a[k].z) k++;\n\t\tfor (re int i=p; i<=k; i++) ins(root,a[i]);\n\t\tfor (re int i=p; i<=k; i++) f[query(root,a[i])]++;\n\t\tp=k;\n//\t\tdebug(root); puts(\"\");\n\t}\n\tfor (re int i=1; i<=n; i++) printf(\"%d\\n\",f[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565177843,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "### \u5f15\u8a00\n\n\u5199\u672c\u9898\u89e3\u65f6\uff0c\u9898\u89e3\u533a\u6709 $35$ \u7bc7\u9898\u89e3\uff0c\u4ec5\u4fe9 KDT \u505a\u6cd5\uff0c\u5176\u4ed6\u4eba\u51e0\u4e4e\u90fd\u662f\u4e00\u901a cdq \u7384\u5b66\uff08\uff1f\uff09\u3002\n\n\u964c\u4e0a\u82b1\u5f00\u662f KDT \u6c42\u4e09\u7ef4\u504f\u5e8f\u7684\u7ecf\u5178\u6a21\u677f\u5440\u3002\n\nKDT \u662f\u4e2a\u597d\u4e1c\u897f\uff0c\u5728\u89e3\u51b3\u9ad8\u7ef4\u95ee\u9898\u65f6\uff0c\u90fd\u53ef\u4ee5\u8003\u8651\uff1b[\u8fd9\u9898](https://www.luogu.com.cn/problem/P7711)\u5c31\u53ef\u4ee5\u7528 KDT \u9a97\u5206\u3002\n\n\u8bf7\u5148\u786e\u4fdd\u5728\u5b66\u4f1a KDT \u57fa\u64cd\uff08build\uff0cfind\uff09\u540e\u518d\u9605\u8bfb\u672c\u9898\u89e3\u3002\n\n### \u601d\u8def\n\n\u5148\u5199\u4e00\u4e2a 3DT \u4e0a\u53bb\u3002\n\n\u590d\u6742\u5ea6\u662f $O(n^{\\frac53})$ \u7684\uff0c\u6beb\u65e0\u7591\u95ee[\u4f1a T](https://www.luogu.com.cn/record/53027731)\u3002\n\n\u548b\u529e\uff1f\n\n\u89c2\u5bdf\u5230\u5404\u4e2a\u4e09\u7ef4\u70b9\u7684\u7f16\u53f7\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u800c\u5f71\u54cd\u4e00\u4e2a\u70b9 $f$ \u7684\u53ea\u6709\u4e09\u7ef4\u5750\u6807\u90fd\u4e0d\u6bd4\u5176\u5927\u7684\u70b9\uff0c\u6545\u8003\u8651\u5148\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u52a8\u6001\u63d2\u70b9\u8fdb\u4e00\u4e2a 2DT \u4e2d\u53bb\uff08\u5404\u70b9\u53ea\u6709\u7b2c\u4e8c\u3001\u4e09\u7ef4\uff09\uff0c\u540c\u671f\u67e5\u8be2 $f$\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c**\u7b2c\u4e00\u7ef4\u5750\u6807\u76f8\u540c\u65f6\uff0c\u5e94\u628a\u4e4b\u540c\u65f6\u63d2\u5165\uff0c\u518d\u4e00\u5e76\u67e5\u8be2\uff0c\u4ee5\u514d\u51fa\u73b0\u50cf $(1,1,1),(1,1,1),(1,1,1),\\dots,(1,1,1)$ \u8fd9\u6837\u7684\u6570\u636e\u65f6\u6302\u6389**\u3002\u6b64\u5916\uff0c**\u4e5f\u4e0d\u5e94\u5fd8\u8bb0\u5728\u7b54\u6848\u4e2d\u5220\u53bb\u5404\u70b9\u81ea\u8eab**\u3002\n\n### \u95ee\u9898\u6765\u4e86\n\n\u52a8\u6001\u63d2\u70b9\u548b\u5b9e\u73b0\uff1f\n\n\u524d\u4fe9\u9898\u89e3\u597d\u50cf\u90fd\u662f\u5199\u4e86\u5e26\u66ff\u7f6a\u7f8a\u6811\u5f0f\u91cd\u6784\u7684 KDT\uff0c\u7136\u800c\u8fd9\u53c8\u81ed\u53c8\u957f\uff0c\u4e00\u70b9\u4e0d\u9999\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u641e\u3002\n\n\u7531\u4e8e\u53ea\u6709\u63d2\u5165\u6ca1\u6709\u5220\u9664\uff0c\u4e0d\u7528\u6253 KDT \u60f0\u6027\u5220\u9664\u6807\u8bb0\u3002\n\n\u4f46\u5b9e\u9645\u4e0a\u63d2\u5165\u672c\u8eab\u4e5f\u5e76\u4e0d\u65b9\u4fbf\uff0c\u4e8e\u662f\u91c7\u53d6[yk\u94fe\u5206\u6cbb](https://www.luogu.com.cn/blog/myee/yk-algorithm)\u6280\u672f\uff0c\u5373\u4e8c\u8fdb\u5236\u62c6\u5206\u6cd5\u3002\n\n\u5982\u679c\u4f7f\u7528\u539f\u59cbyk\u94fe\u5206\u6cbb\u7b97\u6cd5\uff0c\u5bf9\u6bcf\u4e00\u5757\u5efa\u4e00\u4e2a KDT\uff0c\u90a3\u4e48\u6211\u4eec\u5f52\u5e76\u64cd\u4f5c\u53ea\u80fd\u63a8\u5012\u91cd\u6784\uff08\u56e0\u4e3a\u51e0\u4e4e\u6ca1\u6709\u660e\u663e\u5355\u8c03\u6027\uff09\uff0c\u5728\u63d2\u5165\u64cd\u4f5c\u5904\u590d\u6742\u5ea6\u662f $O(n\\log^2n)$ \u7684\uff08\u56e0\u4e3a\u5355\u6b21\u91cd\u6784 KDT \u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\uff09\uff0c\u4f46\u5e38\u6570\u592a\u5927\u4f1a\u6302\u6389\u3002\n\n\u8003\u8651\uff1a\u6211\u4eec\u628a\u539f\u59cb\u7684 $\\log\\operatorname{lowbit}n$ \u6b21\u5757\u5f52\u5e76\u64cd\u4f5c\uff0c\u6539\u4e3a**\u63a8\u5012\u672b $\\log\\operatorname{lowbit}n$ \u5757\u5e76\u6700\u540e\u5c06\u5220\u53bb\u5143\u7d20\u4e0e\u65b0\u63d2\u5165\u5143\u7d20\u91cd\u6784\u4e00\u4e2a\u5927\u5757**\u3002\n\n\u8fd9\u6837\uff0c\u6bcf\u4e2a\u70b9\u63d2\u5165\u65f6\u53ea\u91cd\u6784\u4e00\u6b21\uff0c\u4e8e\u662f\u5c31\u4e0d\u4f1a\u6302\u4e86\uff0c\u603b\u63d2\u5165\u590d\u6742\u5ea6\u662f $O(n\\log^2n)$ \u7684\u3002\n\n\u67e5\u8be2\u5462\uff1f**\u540c\u65f6\u7ef4\u62a4 $O(\\log n)$ \u4e2a KDT\uff0c\u96be\u9053\u4e0d T**?\n\n\u5176\u5b9e\u7531\u4e8e\u6bcf\u5757\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7\u524d\u4e00\u5757\u7684\u4e00\u534a\uff0c\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\u662f $O(\\sqrt n+\\sqrt{\\frac n2}+\\sqrt{\\frac n4}+\\dots+\\sqrt{\\frac n{2^w}})=O(\\sqrt n)$ \u7684\uff01\n\n\u56e0\u6b64\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt n+n\\log^2n)$ \u7684\uff0c\uff08\u597d\u50cf\uff09\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\uff01\n\n[\u4e0d\u8fc7](https://www.luogu.com.cn/record/53030941)\uff0c\u88ab\u5361\u5e38\u4e86QAQ\uff0c\u51e0\u5341\u6beb\u79d2\u6b7b\u6d3b\u8fc7\u4e0d\u53bb\u3002\n\n\u4e8e\u662f\u52a0\u4e00\u8f66\u5e38\u6570\u4f18\u5316\uff0c\u5f85\u591c\u6df1\u4eba\u9759\u4e4b\u65f6\uff0c\u4ea4\u5b83\u51e0\u53d1\uff0c\u76f8\u4fe1\u4f60\u4e00\u5b9a\u4f1aA\u7684QAQ\u3002\uff08\u6765\u81ea\u4e00\u4e2a\u7b2c $299$ \u6b21\u624d [AC](https://www.luogu.com.cn/record/53218123) \u7684\u4eba\uff09\n\n### Code\n\n\u5feb\u8bfb\u5feb\u5199\u5565\u7684\u5220\u4e86\u4e00\u8f66\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01\uff0c\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u80fd\u8fc7\uff0c\u52a0\u6cb9\u5361\u5e38\u5427\uff08\n\n```cpp\n#include <algorithm>\n#include <stdio.h>\ntypedef long long llt;\ntypedef unsigned uint;typedef unsigned long long ullt;\ntypedef bool bol;typedef char chr;typedef void voi;\ntypedef double dbl;\ntemplate<typename T>bol _max(T&a,T b){return(a<b)?a=b,true:false;}\ntemplate<typename T>bol _min(T&a,T b){return(b<a)?a=b,true:false;}\nconst uint k=2;\nclass kdpoint{public:uint D[k];uint&operator[](uint n){return D[n];}};\nuint d;\nbol operator<(const kdpoint&a,const kdpoint&b){return a.D[d]<b.D[d];}\nclass kdT\n{\n    public:\n        typedef kdpoint point;\n        class node;\n        voi bzr(){if(rot!=NULL)delete rot;rot=NULL;}\n        voi build(point*P,uint len){rot=new node,rot->build(P,P+len);}\n        node*rot;\n        class node\n        {\n            public:\n                point p;node*ls,*rs;\n                uint Max[k],Min[k];\n                ullt sum;\n                voi bzr(){ls=rs=NULL;}\n                voi build(point*l,point*r,uint t=0)\n                {\n                    bzr();\n                    register point*mid=(r-l)/2+l;\n                    d=t;\n                    std::nth_element(l,mid,r);\n                    p=*mid,sum=1;\n                    for(uint i=0;i<k;i++)Max[i]=Min[i]=p[i];\n                    if(l<mid)\n                    {\n                        ls=new node,ls->build(l,mid,(t+1)%k);\n                        for(uint i=0;i<k;i++)_min(Min[i],ls->Min[i]),_max(Max[i],ls->Max[i]);\n                        sum+=ls->sum;\n                    }\n                    if(mid+1<r)\n                    {\n                        rs=new node,rs->build(mid+1,r,(t+1)%k);\n                        for(uint i=0;i<k;i++)_min(Min[i],rs->Min[i]),_max(Max[i],rs->Max[i]);\n                        sum+=rs->sum;\n                    }\n                }\n                ~node(){if(ls!=NULL)delete ls;if(rs!=NULL)delete rs;}\n        };\n};\nkdT T[30];uint tp=0,siz=0;\nstd::pair<uint,kdpoint>P[100005];\nkdpoint K[100005];\nvoi insert()//yk\u94fe\u5206\u6cbb O(n\\log^2n)\n{\n\t*K=P[siz++].second;\n\tuint f=siz&-siz,u=1;\n\twhile(f>>=1)//merge\u8fc7\u7a0b\uff1a\u63a8\u5012\n\t{\n\t\tu<<=1;\n\t\tfor(uint i=u>>1;i<u;i++)K[i]=P[siz-i-1].second;\n\t\tT[--tp].bzr();\n\t}\n\tT[tp].bzr(),T[tp++].build(K,u);//merge\u8fc7\u7a0b\uff1a\u91cd\u6784\n}\nullt find(kdT::node*p,uint&x,uint&y)\n{\n    if(p==NULL||p->Min[0]>x||p->Min[1]>y)return 0;\n    if(p->Max[0]<=x&&p->Max[1]<=y)return p->sum;\n    ullt ans=0;\n    if(p->p[0]<=x&&p->p[1]<=y)ans=1;\n    ans+=find(p->ls,x,y)+find(p->rs,x,y);\n    return ans;\n}\ninline chr nc() //\u5149\u901f\u5feb\u8bfb\n{\n    static chr buf[1000010],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000010,stdin),p1==p2)?EOF:*p1++;\n}\ninline ullt read()\n{\n    register ullt ans=0;register chr c;do c=nc();while(c>'9'||c<'0');\n    do ans=c-'0'+ans*10,c=nc();while(c>='0'&&c<='9');return ans;\n}\nuint Time[100005];\nint main()\n{\n\tuint n=read(),m;m=read();\n\tfor(uint i=0;i<n;i++)P[i].first=read(),P[i].second[0]=read(),P[i].second[1]=read();\n\tstd::sort(P,P+n);\n\tfor(uint i=0,j=0;i<n;)\n    {\n\t\tfor(;j<n&&P[j].first==P[i].first;j++)insert();\n\t\twhile(i<j)\n\t\t{\n\t\t\tuint w=-1;\n\t\t\tfor(uint k=0;k<tp;k++)w+=find(T[k].rot,P[i].second[0],P[i].second[1]);\n\t\t\tTime[w]++,i++;\n\t\t}\n\t}\n    for(uint i=0;i<n;i++)printf(\"%u\\n\",Time[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1626347750,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "3810"
    },
    {
        "content": "# \u4e09\u7ef4\u504f\u5e8f\n\n\u8fd9\u9898\u6709\u5f88\u591a\u5927\u4f6c\u7528\u4e86cdq\u5206\u6cbb\uff0c\u7136\u800c\u849f\u84bb\u5e76\u4e0d\u4f1a\uff0c\u6240\u4ee5\u5c31\u8bf4\u4e00\u79cd\u5947\u602a\u7684\u6570\u636e\u7ed3\u6784\u641e\u6cd5\u5427\u3002\n\n\u6211\u7528\u7684\u662f\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\n\n## \u90e8\u5206\u5206\n\n\u9996\u5148\u6211\u4eec\u8003\u8651 $k\\le 1000$ \u7684\u60c5\u51b5\uff08\u867d\u7136\u9898\u76ee\u91cc\u6ca1\u6709\u8bf4\u8fd9\u4e2a\u90e8\u5206\u5206\uff09\u3002\n\n\u6839\u636e\u6811\u72b6\u6570\u7ec4\u7684\u4e8c\u7ef4\u504f\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u6765\u89e3\u51b3\u4e09\u7ef4\u504f\u5e8f\u3002\n\n\u5728\u7b2c\u4e00\u7ef4\u7ef4\u62a4 $b$ \u5143\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u7840\u4e0a\u518d\u5f00\u4e00\u7ef4\u7ef4\u62a4 $c$ \u5143\u7d20\uff0c\u6211\u4eec\u6c42 $f(i)$ \u5c31\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u4e86\u3002\n\n\u5982\u56fe\u5f53\u5f53\u524d\u7684 $b=2,c=3$ \u65f6\uff0c $f$ \u5c31\u7b49\u4e8e\u7ea2\u8272\u90e8\u5206\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\n![a.jpg](https://i.loli.net/2019/03/09/5c837f97bac94.jpg)\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e3b\u8981\u4e0d\u662f\u88ab\u5361\u5728\u65f6\u95f4\u4e0a\uff0c\u800c\u662f\u5728\u7a7a\u95f4\u4e0a\uff0c\u56e0\u4e3a\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u7684\u64cd\u4f5c\u65f6\u95f4\u662f $O(n\\log^2n)$ \uff0c\u800c\u7a7a\u95f4\u662f $O(k^2)$ \u3002\n\n## \u6ee1\u5206\n\n\u6211\u4eec\u53d1\u73b0\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u7684\u5143\u7d20\u5f88\u591a\u503c\u90fd\u662f0\uff0c\u4f46\u6811\u72b6\u6570\u7ec4\u6ca1\u529e\u6cd5\u52a8\u6001\u5f00\u70b9\u8282\u7701\u7a7a\u95f4\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\u8d77\u4e86zkw\u7684\u4e00\u53e5\u8bdd\uff1a\n\n![b.jpg](https://i.loli.net/2019/03/09/5c8380ff4d956.jpg)\n\n\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u628a\u7b2c\u4e8c\u7ef4\u7684\u6811\u72b6\u6570\u7ec4\u6362\u6210\u7ebf\u6bb5\u6811\u5462\uff1f\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u53ef\u4ee5\u52a8\u6001\u5f00\u70b9\u8282\u7701\u5f88\u5927\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u6240\u4ee5\u7a7a\u95f4\u95ee\u9898\u89e3\u51b3\u4e86\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u53ef\u80fd\u6709\u70b9\u5927\uff0c\u4f46\u5361\u5361\u5e38\u4e5f\u5c31\u8fc7\u4e86\u561b\u3002\n\n\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u5728\u67e5\u8be2\u7ebf\u6bb5\u6811\u65f6\u5982\u679c\u5b50\u6811\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c\u5c31\u4e0d\u5f80\u4e0b\u67e5\u627e\u3002\n\n\u6240\u4ee5\u6b63\u89e3\u5c31\u51fa\u6765\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN=200007;\n\nstruct node {\n\tint sum,ch[2],l,r;\n\tnode(){sum=ch[0]=ch[1]=l=r=0;}\n}tr[15000000+7];\nint cnt=0;\ninline int newnode(int l,int r)\n{\n\ttr[++cnt].l=l;\n\ttr[cnt].r=r;\n\treturn cnt;\n}\ninline void putdown(int N)\n{\n\tif(tr[N].l==tr[N].r) return;\n\tif(!tr[N].ch[0]) tr[N].ch[0]=newnode(tr[N].l,(tr[N].l+tr[N].r)>>1);\n\tif(!tr[N].ch[1]) tr[N].ch[1]=newnode(((tr[N].l+tr[N].r)>>1)+1,tr[N].r);\n}\nvoid add(register int X,register int now)\n{\n\tif(X>tr[now].r||X<tr[now].l) return;\n\tputdown(now);\n\ttr[now].sum++;\n\tif(tr[now].l==X&&tr[now].r==X) return;\n\tadd(X,tr[now].ch[0]);\n\tadd(X,tr[now].ch[1]);\n}\nint find(register int X,register int now)\n{\n\tif(X<tr[now].l||!tr[now].sum) return 0;\n\tputdown(now);\n\tif(X>=tr[now].r) return tr[now].sum;\n\treturn find(X,tr[now].ch[0])+find(X,tr[now].ch[1]);\n}\n\nint sum[MAXN+7];\ninline void Add(int X,int c)\n{\n\tfor(register int i=X;i<=MAXN;i+=i&-i)\n\t\tadd(c,sum[i]);\n}\nint re;\ninline int Find(int X,int c)\n{\n\tre=0;\n\tfor(register int i=X;i>0;i-=i&-i)\n\t\tre+=find(c,sum[i]);\n\treturn re;\n}\n\nint n,k;\nint f[MAXN+7],ans[MAXN+7];\nstruct ele {\n\tint a,b,c;\n}a[MAXN+7];\nbool cmp(const ele &A,const ele &B)\n{\n\treturn A.a==B.a?(A.b==B.b?A.c<B.c:A.b<B.b):A.a<B.a;\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n>>k;\n\tfor(register int i=1;i<=MAXN;i++)\n\t\tsum[i]=newnode(1,MAXN);\n\tfor(int i=1;i<=n;i++){cin>>a[i].a>>a[i].b>>a[i].c;a[i].b++;}\n\n\tsort(a+1,a+1+n,cmp);\n\t\n\tfor(register int i=1,j;i<=n;i=j)\n\t{\n\t\tAdd(a[i].b,a[i].c);\n\t\tfor(j=i+1;a[j].a==a[j-1].a;j++) Add(a[j].b,a[j].c);\n\t\tf[i]=Find(a[i].b,a[i].c);\n\t\tfor(j=i+1;a[j].a==a[j-1].a;j++) f[j]=Find(a[j].b,a[j].c);\n\t}\n\n\tfor(register int i=1;i<=n;i++)\n\t\tans[f[i]-1]++;\n\tfor(register int i=0;i<n;i++)\n\t\tcout<<ans[i]<<'\\n';\n}\n```",
        "postTime": 1552121761,
        "uid": 34323,
        "name": "mohei0",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u5957\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811:\n\n\u5148\u6309\u7b2c\u4e00\u7ef4a\u6392\u5e8f,\u67e5\u8be2\u524d\u9996\u5148\u5c06a\u503c\u76f8\u7b49\u7684\u5411\u91cf\u5168\u90e8\u63d2\u5165.\n\n\u63d2\u5165\u65f6\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4b\u503c\u6570\u91cf\u7684\u524d\u7f00\u548c,\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4c\u503c\u6570\u91cf\u7684\u524d\u7f00\u548c(\u4f1a\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\u7684\u4eba\u5e94\u8be5\u5f88\u5bb9\u6613\u770b\u61c2,\u4e0d\u4f1a\u7684\u8bdd...\u5efa\u8bae\u5148\u53bb\u5b66\u5b66qwq)\n\n\u554a\u5bf9,\u6811\u72b6\u6570\u7ec4\u662f\u6309b\u7684\u6743\u503c\u6765\u7ef4\u62a4\u7684,\u6743\u503c\u7ebf\u6bb5\u6811\u662f\u6309c\u7684\u503c\u6765\u7ef4\u62a4\u7684(\u6709\u70b9\u8ff7emmm...\u5e94\u8be5\u4e0d\u4f1a\u6709\u4e0d\u77e5\u9053\u6743\u503c\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u662f\u4ec0\u4e48\u7684\u5427~~\u8ba9\u4f60\u53bb\u5b66!!!~~)\n\n\u67e5\u8be2\u65f6\u7531\u4e8e\u5df2\u7ecf\u5c06a\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u5411\u91cfa\u503c\u7684\u5411\u91cf\u5168\u63d2\u5165\u4e86,\u6240\u4ee5\u53ea\u7528\u8003\u8651b\u503c\u548cc\u503c\u7684\u9650\u5236\u5c31\u884c\u4e86,\u6240\u4ee5\u6211\u4eec\u8981\u67e5\u8be2\u7684\u5c31\u662fb\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u5411\u91cf\u7684\u6240\u6709\u5df2\u63d2\u5165\u5411\u91cf\u4e2d,c\u503c\u5c0f\u4e8e\u5f53\u524d\u5411\u91cf\u7684\u5411\u91cf\u7684\u6570\u91cf(\u662f\u5f88\u7ed5\u53e3\u7a9d\u4e5f\u6ca1\u529e\u6cd5\u5440\u8bed\u6587\u4e0d\u597dqwq)\n\n~~\u4f1a\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u5df2\u7ecf\u53bb\u7801\u5446\u7801\u52d2~~,\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e86b\u503c\u7684\u524d\u7f00,\u6240\u4ee5\u5728\u67e5\u8be2\u7684\u65f6\u5019,\u53ea\u7528\u628ab\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524db\u503c\u7684\u90a3\u4e00\u6bb5\u524d\u7f00\u63ea\u7c97\u6765,\u5728\u5b83\u4eec\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u67e5c\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524dc\u503c\u7684\u5411\u91cf\u7684\u603b\u91cf\u5c31\u884c\u8fa3~\n\n\u6492\u82b1!!!\n\n\u4e0d\u61c2\u770b\u4ee3\u7801,\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u6e05~~\u4e11~~\u6670~~\u964b~~qwq\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m;\nint ls[10000100],rs[10000100],val[10000100],tot;\nint rt[200200];\nint b[500500],totn;\nstruct data{\n\tint a,b,c;\n}que[100100];\nbool cmp(data a,data b)\n{return a.a<b.a;}\nint ans[100100];\nint lb(int x){return x&(-x);}\nint ed;\nint qx[550],tx;\nint query(int l,int r,int k)\n{//\u67e5\u8be2\u51fd\u6570\n\tif(l==r)\n\t{\n\t\tint sum=0;\n\t\tfor(int i=1;i<=tx;++i)sum+=val[qx[i]];\n\t\treturn sum;\n\t}\n\tint mid=(l+r)/2;\n\tif(mid>=k)\n\t{\n\t\tfor(int i=1;i<=tx;++i)qx[i]=ls[qx[i]];\n\t\treturn query(l,mid,k);\n\t}\n\telse\n\t{\n\t\tint sum=0;\n\t\tfor(int i=1;i<=tx;++i)sum+=val[ls[qx[i]]],qx[i]=rs[qx[i]];\n\t\treturn sum+query(mid+1,r,k);\n\t}\n}\nint calc(int num,int num2)\n{\n\ttx=0;\n\tint pos=lower_bound(b+1,b+totn+1,num)-b;\n\tfor(int x=pos;x;x-=lb(x))\n\t\tqx[++tx]=rt[x];//\u628a\u4e00\u6bb5\u524d\u7f00\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u9884\u5904\u7406\u51fa\u6765\n\tint vp=lower_bound(b+1,b+totn+1,num2)-b;\n\treturn query(1,totn,vp);\n}\nint ins(int pr,int l,int r,int v)\n{//\u4fee\u6539\u51fd\u6570\n\tint rt=pr;\n\tif(!rt)rt=++tot;\n\tls[rt]=ls[pr],rs[rt]=rs[pr],val[rt]=val[pr]+1;\n\tif(l==r)return rt;\n\tint mid=(l+r)/2;\n\tif(mid>=v)ls[rt]=ins(ls[pr],l,mid,v);\n\telse rs[rt]=ins(rs[pr],mid+1,r,v);\n\treturn rt;\n}\nvoid add(int num,int num2)\n{\n\tnum=lower_bound(b+1,b+totn+1,num)-b;\n\tnum2=lower_bound(b+1,b+totn+1,num2)-b;\n\tfor(int x=num;x<=totn;x+=lb(x))\n\t\trt[x]=ins(rt[x],1,totn,num2);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&que[i].a,&que[i].b,&que[i].c);\n\t\tb[++totn]=que[i].a;\n\t\tb[++totn]=que[i].b;\n\t\tb[++totn]=que[i].c;\n\t}\n\tsort(b+1,b+totn+1);//\n\ttotn=unique(b+1,b+totn+1)-b-1;//\n    //\u5176\u5b9e\u4e0a\u9762\u4e24\u884c\u79bb\u6563\u5316\u6ca1\u5f88\u5927\u5fc5\u8981,\u8bf4\u4e86k<=200000\u4e86\n    //\u4f46\u6211\u603b\u89c9\u5f97\u8fd9\u6837\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4qwq\n    //\u867d\u7136\u597d\u50cf\u5e76\u6ca1\u6709,\u8fd8\u62d6\u6162\u4e86\u65f6\u95f4...TAT\n\tsort(que+1,que+n+1,cmp);//\u79bb\u7ebf\u6392\u5e8f\n\ted=1;\n\tfor(int i=1;i<=n;)\n\t{\n\t\twhile(que[ed+1].a==que[i].a)ed++;\n        //\u5148\u628aa\u76f8\u540c\u7684\u90fd\u63d2\u5165\n\t\tfor(int j=i;j<=ed;++j)\n\t\t\tadd(que[j].b,que[j].c);\n\t\twhile(i<=ed)\n\t\t{\n\t\t\tans[calc(que[i].b,que[i].c)]++;\n            //\u518d\u67e5\u8be2\n\t\t\ti++;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1527468093,
        "uid": 52285,
        "name": "\u9017\u903c\u9886\u4e3b",
        "ccfLevel": 9,
        "title": "P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f"
    },
    {
        "content": "[P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09](https://www.luogu.com.cn/problem/P3810)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c1](https://www.luogu.com.cn/blog/368107/solution-p3810)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c2](https://www.cnblogs.com/zeno6174/p/solution-p3810.html)\n\n### \u524d\u7f6e\u7b97\u6cd5\n\n+ \u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9\n+ \u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\n\n\u89e3\u9898\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u770b\u5f31\u5316\u7248\u672c $\\to$ **\u4e8c\u7ef4\u504f\u5e8f**\n\n---\n\n#### \u9898\u610f\n\n\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u4e3a\u6570\u7ec4 $a_1,a_2,\\dots,a_n$\uff0c$b_1,b_2,\\dots,b_n$ \u6c42\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $i$\uff0c$a_j\\le a_i$ \u4e14 $b_j\\le b_i$ \u7684 $j$ \u6709\u591a\u5c11\u4e2a\u3002\n\n#### \u89e3\u6cd51\n\n\u8003\u8651\u7528\u7ed3\u6784\u4f53\u628a\u6570\u7ec4\u5b58\u8d77\u6765\uff0c\u5bf9 $a$ \u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u7528\u4e00\u4e2a\u503c\u57df\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 $b$ \u503c\u5373\u53ef\u3002\n\n\u8fd8\u6ca1\u5b8c\u3002\u7531\u4e8e\u53ef\u80fd\u51fa\u73b0 $a_i=a_j$ \u4e14 $b_i=b_j$ \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u9700\u8981\u53bb\u91cd\u3002\n\n\u63d0\u5230\u53bb\u91cd\uff0c\u5c31\u8981\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u591a\u52a0\u4e00\u4e2a $x$ \u3002 $x_i$ \u8868\u793a\u4e0e $a_j=a_i,b_j=b_i$ \u7684 $j$ \u7684\u4e2a\u6570\uff0c$x_i$ \u521d\u59cb\u4e3a $1$\n\n~~\u53bb\u91cd\u6bd2\u7624\u7684\u8981\u6b7b~~\n\n#### \u89e3\u6cd52\n\n\u8fd8\u662f\u7528\u7ed3\u6784\u4f53\u5b58\uff0c\u5bf9 $a$ \u8fdb\u884c\u6392\u5e8f+\u53bb\u91cd\uff0c\u540e\u9762\u8003\u8651\u7528\u5f52\u5e76\u6392\u5e8f\u6765\u6c42\n\n\u56de\u60f3\u4e00\u4e0b\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\uff0c\u6211\u4eec\u6c42\u7684\u662f $a_i$ \u4f5c\u4e3a\u9006\u5e8f\u5bf9 $(j,i)$ \u7684 $j$ \u7684\u603b\u4e2a\u6570\u3002\n\n\u5728\u8fd9\u91cc\uff0c$a$ \u5df2\u7ecf\u6309\u5927\u5c0f\u6392\u597d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8003\u8651\u5bf9 $b$ \u503c\u6c42\u9006\u5e8f\u5bf9\u5c31\u884c\u4e86\u3002\n\n**\u6df1\u523b\u6ce8\u610f\u89e3\u6cd52**\n\n---\n\n### \u4e09\u7ef4\u504f\u5e8f\n\n\u8fdb\u5165\u6b63\u9898\n\n**\u7b2c\u4e00\u6b65**\n\n\u548c\u4e8c\u7ef4\u504f\u5e8f\u4e00\u6837\uff0c\u5148\u6309 $a$ \u503c\u6392\u597d\u5e8f\uff0c\u53bb\u91cd\n\n**\u7b2c\u4e8c\u6b65**\n\n\u4e3a\u4e86\u7b80\u5316\u9898\u76ee\uff0c\u5148\u8003\u8651\u7b80\u6613\u7248\u672c**\u4e0d\u5b58\u5728 $a_i=a_j$ \u4e14 $b_i=b_j$ \u4e14 $c_i=c_j$ \u7684\u60c5\u51b5**\uff0c\u6807\u51c6\u7248\u672c\u653e\u5728\u7b2c\u4e09\u6b65\u3002\n\n\u8fdb\u5165\u5230\u4eca\u5929\u7684\u6b63\u9898\uff1a _CDQ_ \u8bb2\u89e3\u90e8\u5206\u3002\n\n_CDQ_ \u5206\u6cbb\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u4e00\u79cd\u5206\u6cbb\u3002\u800c\u5206\u6cbb\uff0c\u5c31\u9700\u8981\u628a $[l,r]$ \u5206\u4e3a $[l,mid]$ \u548c $[mid+1,r]$ \u3002\u800c\u5bf9\u4e8e\u6211\u4eec\u8981\u5bfb\u627e\u7684\u4e00\u4e2a\u7b26\u5408 $a_j\\le a_i,b_j\\le b_i,c_j\\le c_i$ \u7684\u70b9\u5bf9 $(i,j)$ \u5fc5\u987b\u7b26\u5408\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a\n\n1. $1\\le i,j\\le mid\\gets$ \u8fd9\u5728\u9012\u5f52\u5904\u7406\u5de6\u534a\u8fb9\u65f6\u5df2\u7ecf\u5904\u7406\u4e86\n1. $mid\\lt i,j\\le n\\gets$ \u8fd9\u5728\u9012\u5f52\u5904\u7406\u53f3\u534a\u8fb9\u65f6\u5df2\u7ecf\u5904\u7406\u4e86\n1. $1\\le i,j\\le n\\gets$ **\u8fd9\u662f\u6211\u4eec\u5728\u9012\u5f52\u4e4b\u540e\u9700\u8981\u5904\u7406\u7684\u70b9\u5bf9**\n\n\u6309\u5206\u6cbb\u4e09\u90e8\u66f2\u8d70\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5408\u5e76\u5de6\u53f3\u533a\u95f4\u5e76\u7edf\u8ba1\u7b54\u6848\u4e86\u4e86\uff0c\u8fd9\u91cc\u6309\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u7684\u601d\u8def\u6765\u3002\n\n\u7531\u4e8e $a,b$ \u503c\u90fd\u88ab\u6211\u4eec\u5904\u7406\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6bd2\u7624\u7684 $c$ \u503c\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u5728\u5408\u5e76\u4e2d\uff0c\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u6b64\u65f6\u7684\u6700\u5c0f\u503c\u5728\u5de6\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u6811\u72b6\u6570\u7ec4\u7684\u5de6\u8fb9\u90a3\u4e2a\u6570\u7684 $c$ \u503c\u4f4d\u7f6e\u52a0\u4e00\n1. \u6b64\u65f6\u7684\u6700\u5c0f\u503c\u5728\u53f3\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u7b54\u6848\u52a0\u4e0a\u6811\u72b6\u6570\u7ec4\u4ece $1$ \u5230\u53f3\u8fb9\u6570\u7684 $c$ \u503c\u4f4d\u7f6e\u7684\u548c\n\n\u5982\u679c\u641e\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u5de6\u662f\u52a0\uff0c\u53f3\u662f\u67e5\uff0c\u5efa\u8bae\u91cd\u65b0\u770b\u4e00\u770b\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u3002\n\n**\u6ce8\u610f**\uff1a\u6bcf\u4e00\u6b21\u4f7f\u7528\u5b8c\u540e\u6811\u72b6\u6570\u7ec4\u8981\u6e05\u7a7a\u3002\u5982\u679c\u5355\u7eaf `memset`\uff0c\u4f1a\u8d85\u65f6\uff08\u56e0\u4e3a\u662f $O(n)$ \uff09\uff0c\u6e05\u7a7a\u5e94\u8be5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u5b58\u653e\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u7684 $c_i$ \uff0c\u5176\u5728\u6811\u72b6\u6570\u7ec4\u91cc\u9762\u7684\u503c $-1$\n\n```cpp\nint tmp[maxn]; // \u4e34\u65f6\u5b58\u653e\u5408\u5e76\u597d\u7684\u503c\u7684\u6570\u7ec4\nvoid CDQ(int l,int r){\n\tif(l == r) return;\u3000\n\tint mid = l + r >> 1,p = l,q = mid + 1,len = 0;\n\tCDQ(l,mid),CDQ(mid + 1,r); // \u9012\u5f52\u5904\u7406\n\twhile(p <= mid && q <= r){ // \u5408\u5e76\u5b50\u533a\u95f4\n\t\tif(a[p].b <= a[q].b) bit.update(a[p].c,1),tmp[++len] = a[p++]; // \u9009\u5de6\u8fb9\uff0c\u6b64\u65f6\u66f4\u65b0\u6811\u72b6\u6570\u7ec4\n\t\telse a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++]; // \u9009\u53f3\u8fb9\uff0c\u6b64\u65f6\u7b54\u6848\u8981\u52a0\u4e0a\u503c\u57df\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2 \n\t}\n\twhile(p <= mid) bit.update(a[p].c,1),tmp[++len] = a[p++]; // \u5f52\u5e76\u5de6\u8fb9\u5269\u4e0b\u90e8\u5206\n\twhile(q <= r) a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++]; // \u5f52\u5e76\u53f3\u8fb9\u5269\u4e0b\u90e8\u5206\n\tfor(int i = l;i <= mid;++i) bit.update(a[i].c,-1); // \u6e05\u7a7a\n\tfor(int i = 1;i <= len;++i) a[l + i - 1] = tmp[i]; // \u628a\u4e34\u65f6\u6570\u7ec4\u91cc\u7684\u503c\u62f7\u8d1d\u5230\u539f\u6570\u7ec4\n}\n```\n\n**\u7b2c\u4e09\u6b65**\n\n\u7531\u4e8e\u7b2c\u4e8c\u6b65\u53ea\u80fd\u5904\u7406\u4e0d\u5b58\u5728\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u63a5\u4e0b\u6765\u8bb2\u89e3\u5982\u679c\u5b58\u5728 $a_i=a_j,b_i=b_j,c_i=c_j$ \u7684 $(i,j)$ \u8be5\u600e\u4e48\u5904\u7406\u3002\n\n\u6ce8\u610f\u521a\u624d\u6211\u4eec\u6811\u72b6\u6570\u7ec4\u662f\u8fd9\u6837\u66f4\u65b0\u7684\uff1a`bit.update(a[p].c,1)`\n\n\u8fd9\u91cc\u7684 `1` \u5b9e\u9645\u4e0a\u5c31\u662f $a_s=a_p,b_s=b_p,c_s=c_p$ \u7684 $s$ \u7684\u4e2a\u6570\uff0c\u8bb0\u4e3a $x$ \uff0c$x_i$ \u6211\u4eec\u5728\u53bb\u91cd\u65f6\u6c42\u51fa\u3002\n\n\u56e0\u6b64\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint tmp[maxn];\u3000\nvoid CDQ(int l,int r){\n\tif(l == r) return;\n\tint mid = l + r >> 1,p = l,q = mid + 1,len = 0;\n\tCDQ(l,mid),CDQ(mid + 1,r);\n\twhile(p <= mid && q <= r){\n\t\tif(a[p].b <= a[q].b) bit.update(a[p].c,a[p].x),tmp[++len] = a[p++];\n\t\telse a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++]; \n\t}\n\twhile(p <= mid) bit.update(a[p].c,a[p].x),tmp[++len] = a[p++];\n\twhile(q <= r) a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++];\n\tfor(int i = l;i <= mid;++i) bit.update(a[i].c,-a[i].x);\n\tfor(int i = 1;i <= len;++i) a[l + i - 1] = tmp[i];\n}\n```\n\n**\u7b2c\u56db\u6b65**\n\n\u8fd9\u65f6 _CDQ_ \u5206\u6cbb\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u7edf\u8ba1\u7b54\u6848\n\n\u6309\u7167\u521a\u624d\u7684\u4ee3\u7801\uff0c`a[i].ans` \u8868\u793a $a_j\\le a_i,b_j\\le b_i,c_j\\le c_i$ \u4f46\u4e0d\u5305\u62ec $a_j=a_i,b_j=b_i,c_j=c_i$ \u7684 $j$ \u7684\u4e2a\u6570\uff0c\u800c `a[i].x` \u6b63\u597d\u8868\u793a\u4e86 $a_j=a_i,b_j=b_i,c_j=c_i$ \u7684 $j$ \u7684\u4e2a\u6570\u3002\u4e8e\u662f `a[i].ans + a[i].x` \u5c31\u662f\u53bb\u91cd\u540e\u7b2c $i$ \u4e2a\u70b9\u7684\u7b54\u6848\u3002\n\n```cpp\nfor(int i = 1;i <= cnt;++i) res[a[i].ans + a[i].x - 1] += a[i].x; // \u6ce8\u610f\u662f + a[i].x\uff0c\u56e0\u4e3a\u8fd8\u6709\u4e0e i \u503c\u76f8\u540c\u6240\u6709 j\uff0c\u5176\u603b\u4e2a\u6570\u662f a[i].x\nfor(int i = 0;i < n;++i) printf(\"%d\\n\",res[i]);\n```\n---\n\n[$\\color{#52C41A}\\texttt{AC CODE}$](https://www.luogu.com.cn/record/51748575)\n\n```cpp\n#include<stdio.h>\u3000\u3000\n#include<algorithm>\nconst int maxn = 114514;\nint n,k;\nstruct BIT{\n\tint t[maxn << 1];\n\tint lowbit(int i){return i & -i;}\n\tvoid update(int i,int x){for(;i <= k;i += lowbit(i)) t[i] += x;} \n\tint query(int i){int ans = 0;for(;i;i -= lowbit(i)) ans += t[i];return ans;}\n} bit; // \u6811\u72b6\u6570\u7ec4\nstruct number{\n\tint a,b,c,ans,x;\n\tbool operator<(const number& y) const{return a != y.a ? a < y.a : b != y.b ? b < y.b : c < y.c;}\n} a[maxn],tmp[maxn]; // \u6570\u7684\u7ed3\u6784\u4f53\nint res[maxn];\nvoid CDQ(int l,int r){\n\tif(l == r) return;\n\tint mid = l + r >> 1,p = l,q = mid + 1,len = 0;\n\tCDQ(l,mid),CDQ(mid + 1,r);\n\twhile(p <= mid && q <= r){\n\t\tif(a[p].b <= a[q].b) bit.update(a[p].c,a[p].x),tmp[++len] = a[p++];\n\t\telse a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++]; \n\t}\n\twhile(p <= mid) bit.update(a[p].c,a[p].x),tmp[++len] = a[p++];\n\twhile(q <= r) a[q].ans += bit.query(a[q].c),tmp[++len] = a[q++];\n\tfor(int i = l;i <= mid;++i) bit.update(a[i].c,-a[i].x);\n\tfor(int i = 1;i <= len;++i) a[l + i - 1] = tmp[i];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i = 1;i <= n;++i) scanf(\"%d%d%d\",&a[i].a,&a[i].b,&a[i].c),a[i].x = 1,a[i].ans = 0;\n\tstd::sort(a + 1,a + n + 1); // \u6392\u5e8f\n\tint cnt = 1;\n\tfor(int i = 2;i <= n;++i)\n\t\tif(a[i].a == a[cnt].a && a[i].b == a[cnt].b && a[i].c == a[cnt].c) ++a[cnt].x; // \u5982\u679c\u9047\u5230\u4e0e i \u4e00\u6837\u7684\uff0cx \u503c\u5c31\u8981\u81ea\u52a0\u4e00\n\t\telse a[++cnt] = a[i];\n\tCDQ(1,cnt); // \u6ce8\u610f\u4e0d\u662f CDQ(1,n)\n\tfor(int i = 1;i <= cnt;++i) res[a[i].ans + a[i].x - 1] += a[i].x;\n\tfor(int i = 0;i < n;++i) printf(\"%d\\n\",res[i]);\n\treturn 0;\n}\u3000\u3000\n```",
        "postTime": 1623568632,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3-P3810"
    },
    {
        "content": "\u56e0\u4e3a~~CDQ\u5206\u6cbb\u4e4b\u6bd2\u7624\u8d85\u4e4e\u4f60\u60f3\u8c61~~\uff0c\u6240\u4ee5\u672c\u9898\u89e3\u5c06\u8be6\u7ec6\u8bb2\u89e3CDQ\u5206\u6cbb\uff08\u5f53\u7136\u8fd8\u6709\u8fd9\u9053\u9898\u7684\u7279\u6b8a\u5904\u7406\u8fa3qwq\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u628a\u8fd9\u4e2a\u95ee\u9898\u5f31\u5316\u4e00\u4e0b\uff1a\u4e8c\u7ef4\u504f\u5e8f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$(a_i,b_i)$\uff0c\u6c42\u6240\u6709\u6ee1\u8db3$1 \\leq j \\leq n$\u4e14$a_j \\leq a_i$\u4e14$b_j \\leq b_i$\u7684$(a_j,b_j)$\u7684\u6570\u91cf\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u5bf9\u6240\u6709$(a_i,b_i)$\u6309\u7167$a_i$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u7136\u540e\uff0c\u5bf9$(a_i,b_i)$\u6309\u7167$b_i$\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff08\u6ce8\u610f\u8fd9\u91cc\u8981\u6392\u4e24\u6b21\u5e8f\uff09\u3002\u5bf9\u533a\u95f4$[l,r]$\u6392\u5e8f\u65f6\uff0c\u8bbe$mid=\\frac{l+r}{2}$\uff0c\u5047\u8bbe\u533a\u95f4$[l,mid]$\u548c\u533a\u95f4$[mid+1,r]$\u90fd\u5df2\u7ecf\u4ee5$b_i$\u4e3a\u5173\u952e\u5b57\u6392\u597d\u5e8f\u4e86\u3002\u6b64\u65f6\uff0c\u6709$\\forall l \\leq i \\leq mid,mid<j\\leq r:a_i \\leq a_j$\u3002\n\n\u663e\u7136\uff0c\u8fd9\u91cc\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u88ab\u5316\u89e3\u4e3a\u5f52\u5e76\u6392\u5e8f\u6c42\u201c\u987a\u5e8f\u5bf9\u201d\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u6269\u5c55\u81f3\u4e09\u7ef4\u504f\u5e8f\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4$(a_i,b_i,c_i)$\uff0c\u5148\u4ee5$a_i$\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u518d\u4ee5$b_i$\u4e3a\u5173\u952e\u5b57\u5f52\u5e76\u6392\u5e8f\u3002\u5f52\u5e76\u4e4b\u540e\uff0c$b$\u5c31\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651$c$\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u5f52\u5e76\u8fc7\u7a0b\u4e2d\uff1a\n\n\u5982\u679c$b_i \\leq b_j$\uff0c\u5219\u5728\u6811\u72b6\u6570\u7ec4\u7684$c_i$\u4f4d\u7f6e\u4e0a$+1$\u3002\n\n\u5426\u5219\uff0c\u6c42\u51fa$c_i$\u7684\u524d\u7f00\u548c\uff0c\u5e76\u8ba1\u5165\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u6240\u6709$(mid,r]$\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8fdb\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u800c\u7b54\u6848\u53ea\u5728$(mid,r]$\u4e2d\u7edf\u8ba1\uff0c\u6240\u4ee5$a$\u4e0d\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\u3002\n\n$b$\u56e0\u4e3a\u662f\u6392\u5e8f\u7684\u4f18\u5148\u7ea7\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\u3002\n\n\u6240\u4ee5\u53ea\u6709$c$\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\uff0c\u800c\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u7684\u7b54\u6848\u4fdd\u8bc1\u4e86\u53ea\u53ef\u80fd\u6709$c_i\\leq c$\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\u3002\n\n\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\n\n\u6ce8\u610f\uff1a\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\u65f6\u4e0d\u80fd\u7b80\u5355\u5730memset\uff0c\u8981\u53ea\u5220\u9664\u521a\u521a\u52a0\u8fdb\u6811\u72b6\u6570\u7ec4\u7684\u5143\u7d20\u3002\u56e0\u4e3a\u5982\u679c\u76f4\u63a5memset\u53ef\u80fd\u5f71\u54cd\u5230\u5176\u4ed6\u9012\u5f52\u8fdb\u7a0b\uff0c\u5bfc\u81f4\u7ed3\u679c\u9519\u8bef\u3002\n\n\u6700\u540e\uff0c\u7528\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u7edf\u8ba1\u6bcf\u4e00\u79cd\u7b54\u6848\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u9053\u9898\u8fd8\u9700\u8981\u8003\u8651\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5c31\u662f\u6709$i \\neq j$\u4e14$a_i=a_j,b_i=b_j,c_i=c_j$\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u4e09\u5143\u7ec4\uff0c\u53ea\u4fdd\u7559$1$\u4e2a\u3002\u540c\u65f6\uff0c\u8981\u7edf\u8ba1\u51fa\u6bcf\u4e00\u79cd\u4e09\u5143\u7ec4\u7684\u5b9e\u9645\u6570\u91cf$cnt_i$\u3002\n\n\u5728\u4fee\u6539\u6811\u72b6\u6570\u7ec4\u65f6\uff0c\u8981\u5bf9\u4f4d\u7f6e$c_i$\u52a0\u4e0a$cnt_i$\u3002\n\n\u5728\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u65f6\uff0c\u4f4d\u7f6e$ans_i$\u8981$+cnt_i$\u800c\u4e0d\u662f$+1$\u3002\n\n\u5177\u4f53\u7684\uff0c\u6765\u770b\u4ee3\u7801\u5427~\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstruct Node {\n    int a, b, c, idx;\n    //a,b,c\u662f\u4e09\u7ef4\u7a7a\u95f4\u4e0a\u7684\u70b9,idx\u662f\u51c6\u786e\u4e0b\u6807\uff0c\u65b9\u4fbf\u7edf\u8ba1\u7b54\u6848\u3002\n    //\u6bd4\u8f83\u51fd\u6570\u8981\u5199\u7684\u7a0d\u5fae\u9ebb\u70e6\u4e00\u70b9\u3002\n    bool operator < (const Node& nd) const {\n        if (a != nd.a) {\n            return a < nd.a;\n        }\n        if (c != nd.c) {\n            return c < nd.c;\n        }\n        return b < nd.b;\n    }\n};\nint n, m, c[200005], ans[200005], _ans[200005], cnt[200005], tmp_;\nNode nd[100005], tmp[100005];\n//\u8fd9\u4e2a\u662f\u7528\u6765\u53bb\u91cd\u7684\uff0c\u6211\u7528pair<pair<int,int>,int>\u6765\u5b58\u4e09\u5143\u7ec4\nmap <pair <pair <int, int>, int>, int> mp;\n\n//\u6811\u72b6\u6570\u7ec4\u90e8\u5206\ninline int LowBit(int x) {\n    return x & -x;\n}\n\ninline void Update(int i, int x) {\n    for (int j = i;j <= m;j += LowBit(j)) {\n        c[j] += x;\n    }\n}\n\ninline int Query(int i) {\n    int ans = 0;\n    for (int j = i;j >= 1;j -= LowBit(j)) {\n        ans += c[j];\n    }\n    return ans;\n}\n\nvoid Read() {\n    scanf(\"%d%d\", &n, &m);\n    tmp_ = n;\n    for (int i = 1;i <= n;i++) {\n        scanf(\"%d%d%d\", &nd[i].a, &nd[i].b, &nd[i].c);\n        nd[i].idx = i;\n        mp[make_pair(make_pair(nd[i].a, nd[i].b), nd[i].c)]++;\n        //\u6709\u91cd\u590d\n        if (mp[make_pair(make_pair(nd[i].a, nd[i].b), nd[i].c)] > 1) {\n            i--;\n            n--;\n        }\n    }\n}\n\nvoid Prefix() {\n    for (int i = 1;i <= n;i++) {\n    //\u5904\u7406\u4e00\u4e0b\u7b54\u6848\uff0c\u5b8c\u5168\u76f8\u540c\u7684\u4e24\u4e2a\u7403\u5458\u90fd\u8981+1\n        cnt[i] = mp[make_pair(make_pair(nd[i].a, nd[i].b), nd[i].c)];\n        ans[i] += cnt[i] - 1;\n    }\n    //\u6309\u7167a\u6392\u5e8f\n    sort(nd + 1, nd + n + 1);\n}\n\n//\u6838\u5fc3\uff0c\u5f52\u5e76\u6392\u5e8f\nvoid MergeSort(int l, int r) {\n    if (l == r) {\n        return;\n    }\n    int mid = l + r >> 1;\n    MergeSort(l, mid);\n    MergeSort(mid + 1, r);\n    int p1 = l, p2 = mid + 1, k = l;\n    while (p1 <= mid && p2 <= r) {\n        if (nd[p1].b <= nd[p2].b) {\n        \t//\u66f4\u65b0\u6811\u72b6\u6570\u7ec4\n            Update(nd[p1].c, cnt[nd[p1].idx]);\n            tmp[k++] = nd[p1++];\n        } else {\n        \t//\u7edf\u8ba1\u7b54\u6848\n            ans[nd[p2].idx] += Query(nd[p2].c);\n            tmp[k++] = nd[p2++];\n        }\n    }\n    //\u5f52\u5e76\u5269\u4f59\u90e8\u5206\n    while (p1 <= mid) {\n        Update(nd[p1].c, cnt[nd[p1].idx]);\n        tmp[k++] = nd[p1++];\n    }\n    while (p2 <= r) {\n        ans[nd[p2].idx] += Query(nd[p2].c);\n        tmp[k++] = nd[p2++];\n    }\n    //\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\n    for (int i = l;i <= mid;i++) {\n        Update(nd[i].c, -cnt[nd[i].idx]);\n    }\n    for (int i = l;i <= r;i++) {\n        //printf(\"%d %d %d %d\\n\", tmp[i].a, tmp[i].b, tmp[i].c, ans[tmp[i].idx]);\n        nd[i] = tmp[i];\n    }\n}\n\nvoid Solve() {\n    for (int i = 1;i <= n;i++) {\n        _ans[ans[i]] += cnt[i];//\u7edf\u8ba1\u6700\u7ec8\u7b54\u6848\n    }\n    for (int i = 1;i <= tmp_;i++) {\n        printf(\"%d\\n\", _ans[i - 1]);\n    }\n}\n\nint main() {\n    Read();\n    Prefix();\n    MergeSort(1, n);\n    Solve();\n    return 0;\n}\n```\n\u987a\u4fbf\u6c42dalao\u79c1\u4fe1\u7ed9\u62114\u7ef4\u504f\u5e8f\u89e3\u6cd5qwq",
        "postTime": 1559139422,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "**\u8fd9\u662f\u4e00\u7bc7\uff08~~\u53ea\u9488\u5bf9\u57fa\u7840\u6027\u8d28\u7684~~\uff09\u8be6\u7ec6\u7684cdq\u5206\u6cbb\u89e3\u6790**\u3002\n\n\uff08\u672c\u9898\u89e3\u89e3\u6790\u4e86\u4e00\u4e0b**\u6240\u6709\u9898\u89e3\u90fd\u76f4\u63a5\u201c\u663e\u7136\u201d\u7684\u53bb\u91cd\u95ee\u9898**\u3002\u5728\u8fd9\u91cc\u8ff7\u60d1\u7684\u53ef\u4ee5\u770b\u770b\uff09\n\ncdq\u5206\u6cbb\u6700\u57fa\u7840\u7684\u663e\u7136\u4e0d\u662f\u4e09\u7ef4\u504f\u5e8f\uff0c\u800c\u662f\u4e8c\u7ef4\u504f\u5e8f\uff08\u4e00\u7ef4(~~\u504f~~)\u6392\u5e8f\u5982\u679c\u4e0d\u6392\u5e8f\u6211\u4eec\u95f2\u7684\u614c\u53bbcdq\u4e5f\u53ef\u4ee5\uff09\uff0c\u4f46\u662f\u4e8c\u7ef4\u504f\u5e8f\u53ef\u4ee5\u62ff\u6392\u5e8f+\u6811\u72b6\u6570\u7ec4\u6c34\u8fc7\u53bb\uff0c\u7136\u540e\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u5df2\u7ecf\u6210\u4e86\u5957\u8def\uff0c\u6240\u4ee5\u5982\u679c\u8981\u771f\u6b63\u638c\u63e1cdq\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u4e09\u7ef4\u504f\u5e8f\u8fd9\u4e2a\u9898\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6572\u95e8\u7816\uff0c\u53ef\u4ee5\u8bf4\uff0c\u4f1a\u505a\u8fd9\u9053\u9898\u4e86\uff0c\u5df2\u7ecf\u4f1a\u4e86cdq\u5206\u6cbb\u4e86\u3002\uff08\u5f53\u7136\u4e0d\u4ee3\u8868\u4f60\u5c31\u80fd\u79d2\u6740\u6240\u6709\u7684cdq\u5206\u6cbb\u9898\u3002\u3002\u3002\uff09\n\n### cdq\u5206\u6cbb\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f\n\n\u662f\u4e00\u79cd\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u6cbb\u65f6\uff0c\u7ef4\u62a4\u51fa\u524d\u540e\u4e24\u4e2a\u533a\u95f4\u7684\u5f71\u54cd\u4ece\u800c\u5728\u5408\u5e76\u65f6\uff0c\u5f97\u5230\u6b63\u786e\u7684\u89e3\u3002\n\n\u548c\u666e\u901a\u5206\u6cbb\u7684\u533a\u522b\u5c31\u662f\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651$(l,mid)$ $(mid+1,r)$\u7684\u5f71\u54cd\u4e86\u3002\n\n### \u901a\u5e38\u600e\u4e48\u4f7f\u7528\u5462\uff1f\n\n- cdq\u5206\u6cbb\u53ef\u4ee5\u5e72\u7684\u4e8b\u60c5\u5f88\u591a\uff0c\u9996\u5148\uff0ccdq\u53ef\u4ee5\u4ee3\u66ff\u4e00\u5c42\u6570\u636e\u7ed3\u6784\u3002\n\n- \u7136\u540e\uff0ccdq\u53ef\u4ee5\u7528\u6765\u5d4c\u5957\uff0c\u5b9e\u73b0\u6ee1\u8db3\u4e00\u4e2a\u4e0d\u65ad\u5728\u4e4b\u524d\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4ea7\u751f\u65b0\u7ea6\u675f\u6761\u4ef6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff08\u524d\u63d0\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528\u5206\u6cbb\u89e3\u51b3\uff09\u3002\u56e0\u4e3acdq\u5206\u6cbb\u4e0d\u80fd\u5f71\u54cd\u6574\u4f53\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5728\u4e00\u4e2a\u6027\u8d28\u4e0b\u518d\u53bb\u6ee1\u8db3\u65b0\u7684\u6027\u8d28\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\u3002\n\n- \u6240\u8c13\u5f52\u5e76\u6392\u5e8f\uff0c\u5c31\u662fcdq\u5728\u533a\u95f4\u5206\u6cbb\u65f6\uff0c\u5206\u6cbb\u7136\u540e\u6bd4\u8f83\u5927\u5c0f\u3002\n\n### cdq\u5206\u6cbb\u5728\u5177\u4f53\u95ee\u9898\u7684\u5e94\u7528\u3002\n\n~~\u600e\u4e48\u5927\u90e8\u5206\u90fd\u662f\u504f\u5e8f\u95ee\u9898\u5440\u3002\u3002~~\n\n#### \u4e09\u7ef4\u504f\u5e8f\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u7b2c\u4e00\u7ef4\u6392\u5e8f+\u7b2c\u4e8c\u7ef4cdq+\u6811\u72b6\u6570\u7ec4\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9\u7b2c\u4e00\u7ef4\u6392\u5e8f+\u7b2c\u4e8c\u7ef4cdq+\u7b2c\u4e09\u7ef4cdq\u3002\n\n###### \u6ce8\u89e3\uff1a\u7b2c\u4e8c\u7ef4cdq\u662f\u6309\u7b2c\u4e8c\u7ef4\u5206\u6cbb\u65f6\u6b63\u5e8f\u6392\u5217\uff0c\u7b2c\u4e09\u7ef4cdq\u662f\u6309\u7b2c\u4e09\u7ef4\u6c42\u987a\u5e8f\u5bf9\u3002\n\n**\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u4e00\u7ef4\u7684\u65f6\u5019\u54b1\u4eec\u5c31\u7528\u5427\u56af\u56af\u56af\u3002**\n\n\u6bd5\u7adf\u4eba\u5bb6\u5e38\u6570\u5c0f\u8fd8\u597d\u6253\u8fd8\u4fbf\u4e8e\u7406\u89e3\u3002~~\u61d2\u4eba\u4e13\u7528~~\n\n### $code:$\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100010;\nstruct node{\n    int a,b,c,id;\n}p[maxn],tmp[maxn];\nint n,k;\nint c[maxn*2],ans[maxn],sum[maxn];\n#define lowbit(x) (x&(-x))\nvoid add(int i,int x){\n    for(;i<=k;i+=lowbit(i)) c[i]+=x;\n}\nvoid clear(int i){\n    for(;i<=k;i+=lowbit(i)) c[i]=0;\n}\nint s(int i){int ret=0;\n    for(;i;i-=lowbit(i)) ret+=c[i];\n    return ret;\n}\ninline int read(){\n    int a=0,b=1;char c=getchar();\n    while(!isdigit(c)){if(c=='-')b=-1;c=getchar();}\n    while(isdigit(c)){a=a*10+(c^'0');c=getchar();}\n    return a*b;\n}\ninline bool cmp1(node &x,node &y){\n    return x.a<y.a || (x.a==y.a && x.b<y.b) || (x.a==y.a && x.b==y.b && x.c<y.c);\n}\nvoid cdq(int l,int r){\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    cdq(l,mid),cdq(mid+1,r);\n    int i=l,j=mid+1,k1=l;\n    while(i<=mid && j<=r){//\u6309b\u5f52\u5e76\u6392\u5e8f \n        if(p[i].b<=p[j].b){\n            add(p[i].c,sum[p[i].id]),tmp[k1++]=p[i++];\n        }\n        else{\n            ans[p[j].id]+=s(p[j].c),tmp[k1++]=p[j++];//\u5728\u6b64\u4e4b\u524d\u7684\u6240\u6709\u7684b\u90fdbi<bj\uff0c\u6545\u7edf\u8ba1\u5b83\u4eec\u7684\u7b54\u6848\u3002 \n        }\n    }\n    while(i<=mid) tmp[k1++]=p[i++];\n    while(j<=r) ans[p[j].id]+=s(p[j].c),tmp[k1++]=p[j++]; \n    for(int i=l;i<=r;i++){\n        p[i]=tmp[i];clear(p[i].c);\n    }\n/*    memset(c,0,sizeof(c)); */\n}\nint d[maxn];\nint main(){\n    cin>>n>>k;\n    for(int i=1;i<=n;i++){\n        p[i].a=read(),p[i].b=read(),p[i].c=read(),p[i].id=i;\n    }\n    int j=0;\t\n    sort(p+1,p+1+n,cmp1);\n    for(int i=1;i<=n;++i){\n        if(p[i].a!=p[j].a||p[i].b!=p[j].b||p[i].c!=p[j].c) p[++j]=p[i];\n        sum[j]++;\n    }\n    for(int i=1;i<=j;i++) p[i].id=i;\n    cdq(1,j);\n    for(int i=1;i<=j;i++) d[ans[p[i].id]+sum[p[i].id]-1]+=sum[p[i].id];\n    for(int i=0;i<n;i++) printf(\"%d\\n\",d[i]);\n    return 0;\n} \n```\n\u5bf9\u6b64\u95ee\u9898\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u4e00\u4e0b\u91cd\u590d\u7684\u5143\u7d20\u3002\n\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u662f$<=$\uff0c\u6545\u6b64\u6392\u5e8f\u4e00\u7ef4\u5ea6\u4e4b\u540e\uff0c\u6ee1\u8db3\u7b54\u6848\u7684\u7f16\u53f7\u5b9a\u5728\u5b83\u4e4b\u524d\u3002\uff08\u5982\u679c\u8981\u6c42\u662f$<$\u7684\u663e\u7136\u4e0d\u80fd\u628a\u5728\u5b83\u4e4b\u524d$==$\u7684\u4e5f\u7b97\u8fdb\u53bb\uff09\n\n**\u4f46\u662f\uff01** \u5c31\u7b97\u662f$<=$\uff0c\u5728\u4e09\u7ef4\u5ea6\u90fd\u5b8c\u5168\u76f8\u7b49\u4e4b\u540e\uff0c\u663e\u7136\u4f9d\u7136\u53ea\u80fd\u627e\u5230\u81ea\u5df1\u4e4b\u524d\u7684\u7b54\u6848\uff0c\u800c\u5bf9\u6bd4\u81ea\u5df1\u7f16\u53f7\u540e\u7684\u7b54\u6848\uff0c\u7edf\u8ba1\u4e0d\u4e0a\u4e86\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5148\u53bb\u91cd\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u91cd\u590d\u7684\u5143\u7d20\u8bb0\u4e00\u6b21\u91cd\u590d\u6b21\u6570\uff0c\u7edf\u4e00\u5904\u7406\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\uff0c\u5b83\u4eec\u7684\u7b54\u6848\u663e\u7136\u76f8\u540c\u3002\n\n#### \u5148\u628a\u8fd9\u9898\u641e\u5b8c\uff0c\u4ee5\u540e\u518d\u628a\u5176\u4ed6\u4f8b\u9898\u6162\u6162\u52a0\u8fdb\u6765qwq\u3002",
        "postTime": 1551350921,
        "uid": 64611,
        "name": "\u4eba\u6b87\u7269\u5df2\u975e",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u4e09\u4f4d\u504f\u5e8f\uff1a\n\u53ea\u8003\u8651\u6709\u591a\u5c11\u4e2af\uff0c\u4e0d\u8003\u8651\u6bcf\u4e2af\u5177\u4f53 \u662ff\u51e0\uff1b \n**\u7b2c\u4e00\u7ef4**\uff0c\u6392\u5e8f\u3002\n\u63a5\u4e0b\u6765\uff0c\u53ea\u8981\u6ee1\u8db3**bi<=bj,ci<=cj\uff0c(i<j)**\n\u90a3\u4e48\uff0ci\u5c31\u662fj\u7684\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff08i\u5bf9j\u9020\u6210\u4e86\u8d21\u732e\uff09\u3002\n\n\u600e\u4e48\u540c\u65f6\u6ee1\u8db3b,c\u7684\u5173\u7cfb\uff0c\u5e76\u4e14\u4e0d\u7528\u518dcmp\u6392\u5e8f\uff1f\n\u60f3\u5230\u8981\u627e\u5230\u6ee1\u8db3\uff08i<j\uff09\u7684\u540c\u65f6\u7684b\uff0cc\u3002\n\u53ef\u4ee5\u8fb9\u5bf9b\u6392\u5e8f\uff0c\u8fb9\u7edf\u8ba1c\u3002\n\u5148\u770bb\u6ee1\u8db3\u6761\u4ef6\u5417\uff1f \n\n**\u7528\u5f52\u5e76\u6392\u5e8f,\u6392\u7740b\u70b9**\u3002\n\u5f52\u5e76\u6392\u5e8f\u4e2d\uff0c\u5bf9\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u5904\u7406.\n\n1.\u5bf9\u4e8e\u53f3\u8fb9\u7684j\uff0c\u5982\u679c\u5de6\u8fb9\u7684i,\u6ee1\u8db3b[i]<b[j]\uff0c\n\u5c31\u628ac[i]\u6dfb\u52a0\u5230\u6811\u72b6\u6570\u7ec4\u91cc\u9762\uff0c\u7b49\u5f85\u5c06\u6765\u7edf\u8ba1h\u5230i\u4e2d\u7684\u5143\u7d20\u5bf9j\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5373b[i]>b[j],\u90a3\u4e48\u4ee5\u540e\u7684(i\u5230t)\u90fd\u4e0d\u53ef\u80fd\u5bf9j\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\n\u8fd9\u65f6\u5019\u76f4\u63a5\u7edf\u8ba1\u6811\u72b6\u6570\u7ec4\u91cc\u9762\u80fd\u5bf9j\u4ea7\u751f\u8d21\u732e\u7684\u3002\n\n2.\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u5df2\u7ecf\u62cd\u5b8c\u4e86\uff0c\u8fd9\u65f6\u8fd8\u5269\u4e00\u4e2a\u5e8f\u5217\u3002\n\u8fd8\u5269\u53f3\u8fb9\u7684\uff0c\u8bf4\u660eh\u5230mid\u7684\u5143\u7d20\u90fd\u6ee1\u8db3b<b[j],\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u3002\n\u8fd8\u5269\u5de6\u8fb9\u7684\uff0c\u5df2\u7ecf\u6ca1\u673a\u4f1a\u7edf\u8ba1\u4e86\u3002\n\n3.\u6700\u540e\u522b\u5fd8\u4e86\u5c06\u672c\u6b21\u6811\u72b6\u6570\u7ec4\u6e05\u7a7a\uff01\n\n\u6ce8\u610f\uff1a\u5bf9\u4e8e\u76f8\u540c\u7684\u8981\u53bb\u91cd\u3002\u56e0\u4e3a\u5982\u679c\u6240\u6709\u90fd\u4e0d\u540c\uff0c\u90a3\u4e48\u5982\u679ci\u5bf9j\u4ea7\u751f\u8d21\u732e\uff0c\u5219j\u4e0d\u53ef\u80fd\u5bf9i\u4ea7\u751f\u8d21\u732e\u3002\n\u4f46\u5982\u679c\u6709\u76f8\u540c\u7684\uff0c\u5219j\u4f1a\u5bf9i\u4ea7\u751f\u8d21\u732e\u3002\n\n\u800c\u5f52\u5e76\u6392\u5e8f\u65f6\uff0c\u53ea\u6709\u5de6\u8fb9\u7684\u4f1a\u5bf9\u53f3\u8fb9\u7684\u4ea7\u751f\u8d21\u732e\uff0c\u56e0\u6b64\u5f97\u53bb\u91cd\u540e\u5355\u72ec\u7edf\u8ba1\u8d21\u732e\u3002 \n\n\u7ed3\u5c3e\u7edf\u8ba1\u7b54\u6848\uff1a\nf[j]\u7684\u7edf\u8ba1\uff1a \n\u5bf9\u4e8e\u4e00\u4e2aj\uff0c\u6709\u548c\u5b83\u4e0d\u60f3\u7b49\u7684\uff0c\u76f4\u63a5\u52a0\u4e0a\u3002\n\n\u548c\u5b83\u76f8\u540c\u7684\uff0c\u52a0\uff08\u548cj\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570-1\uff09\n\u800c\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684f[j]\u5462\uff0c\u6709 \u548cj \u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570 \u4e2af[j] \n\n```cpp\n#include<ctime>\n#include<map>\n#include<cstdlib>\n#include<cmath>\n#define r(i,a,b) for(int i=a;i<=b;i++)\n#define rr(i,a,b) for(int i=a;i>=b;i--)\n#define inf 0x3f3f3f3f\n#define mem(a) memset(a,0x3f,sizeof(a))\n#define re(a) a=read()\n#define me(a) memset(a,0,sizeof(a))\n#define in inline\nusing namespace std;\nconst int N=100007;\ninline int read(){\n    char ch=getchar();\n    int w=1,x=0;\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0',ch=getchar();}\n    return x*w;\n}\nint n,M,cnt=0,tr[N<<1],ans[N<<1];\nstruct node{\n\tint a,b,c,num,contribution;\n}e[N],temp[N];\nin bool cmp(node x,node y){\n\treturn (x.a==y.a)?((x.b==y.b)?x.c<y.c:x.b<y.b):x.a<y.a;\n}\nin int lowbit(int x){\n\treturn x&(-x);\n}\nin void add(int x,int w){\n\tfor(;x<=M;x+=lowbit(x))tr[x]+=w;\n}\nin int sum(int x){\n\tint res=0;\n\tfor(;x;x-=lowbit(x))res+=tr[x];\n\treturn res;\n}\nin void backsort(int h,int t){\n\tif(h==t)return;\n\tint mid=(h+t)>>1;\n\tbacksort(h,mid),backsort(mid+1,t);\n\tint l=h,r=mid+1,tot=h;\n\twhile(l<=mid&&r<=t){\n\t\tif(e[l].b<=e[r].b){\n\t\t\tadd(e[l].c,e[l].num);\n\t\t\ttemp[tot++]=e[l++];\n\t\t}\n\t\telse e[r].contribution+=sum(e[r].c),temp[tot++]=e[r++];\n\t}\n /*\n \u5bf9\u4e8e\u53f3\u8fb9\u7684j\uff0c\u5982\u679c\u5de6\u8fb9\u7684i,\u6ee1\u8db3b[i]<b[j]\uff0c\n\u5c31\u628ac[i]\u6dfb\u52a0\u5230\u6811\u72b6\u6570\u7ec4\u91cc\u9762\uff0c\u7b49\u5f85\u5c06\u6765\u7edf\u8ba1h\u5230i\u4e2d\u7684\u5143\u7d20\u5bf9j\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5373b[i]>b[j],\u90a3\u4e48\u4ee5\u540e\u7684(i\u5230t)\u90fd\u4e0d\u53ef\u80fd\u5bf9j\u4ea7\u751f\u8d21\u732e\u4e86\uff0c\n\u8fd9\u65f6\u5019\u76f4\u63a5\u7edf\u8ba1\u6811\u72b6\u6570\u7ec4\u91cc\u9762\u80fd\u5bf9j\u4ea7\u751f\u8d21\u732e\u7684\u3002                          \n                           */                          \n\twhile(l<=mid)add(e[l].c,e[l].num),temp[tot++]=e[l++];\n                                                 /*\n\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u5df2\u7ecf\u62cd\u5b8c\u4e86\uff0c\u8fd9\u65f6\u8fd8\u5269\u4e00\u4e2a\u5e8f\u5217\u3002\n\u8fd8\u5269\u53f3\u8fb9\u7684\uff0c\u8bf4\u660eh\u5230mid\u7684\u5143\u7d20\u90fd\u6ee1\u8db3b<b[j],\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u3002\n\u8fd8\u5269\u5de6\u8fb9\u7684\uff0c\u5df2\u7ecf\u6ca1\u673a\u4f1a\u7edf\u8ba1\u4e86\u3002                                */\n                                 \n\twhile(r<=t)e[r].contribution+=sum(e[r].c),temp[tot++]=e[r++];\n\tr(i,h,mid)add(e[i].c,-e[i].num);\n\tr(i,h,t)e[i]=temp[i];\n}\nint main(){\n\t//freopen(\"test.in\",\"r\",stdin);\n\t//freopen(\"ac.out\",\"w\",stdout);\n\tre(n),re(M);\n\tr(i,1,n){\n\t\tre(e[i].a),re(e[i].b),re(e[i].c);\n\t\te[i].num=1;\n\t}\n\tsort(e+1,e+1+n,cmp);\n\te[++cnt]=e[1];\n\tr(i,2,n){\n\t\tif(e[cnt].a==e[i].a&&e[cnt].b==e[i].b&&e[cnt].c==e[i].c)e[cnt].num++;\n\t\telse e[++cnt]=e[i];\n\t}\n\tbacksort(1,cnt);\n\tr(i,1,cnt)ans[e[i].contribution+e[i].num-1]+=e[i].num;\n\tr(i,0,n-1)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1567693571,
        "uid": 112856,
        "name": "yangshurong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "CDQ\u5206\u6cbb\u7684\u601d\u60f3\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u5206\u6cbb\uff0c\u5728\u5206\u6cbb\u65f6\u4fdd\u8bc1\u5e8f\u5217\u6709\u5e8f\uff0c\u66b4\u529b\u7edf\u8ba1\u5de6\u8fb9\u7684\u5e8f\u5217\u5bf9\u53f3\u4fa7\u7684\u5f71\u54cd\u3002\u8fd9\u6837\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u80fd\u591f\u8fbe\u5230\u4f18\u79c0\u7684$O(n \\log n)$\u3002\n\n\u4f7f\u7528CDQ\u5206\u6cbb\u53ef\u4ee5\u5229\u7528\u6570\u636e\u7684\u6709\u5e8f\u6027\u6765\u5904\u7406\u9ad8\u7ef4\u5e8f\u5217\u4e2d\u7684\u67d0\u4e00\u6216\u67d0\u51e0\u7ef4\uff0c\u4ece\u800c\u9ad8\u7ef4\u7684\u5e8f\u5217\u95ee\u9898\u8f6c\u5316\u5230\u4f4e\u7ef4\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4f7f\u7528CDQ\u5206\u6cbb\u5957CDQ\u5206\u6cbb\u53bb\u89e3\u51b3\u4e09\u7ef4\u5e8f\u5217\u95ee\u9898\u3002\n\n\u987a\u4fbf\u4e00\u63d0\uff0cCDQ\u5206\u6cbb\u7684\u540d\u5b57\u7684\u6765\u6e90\u662f\u9648\u4e39\u7426dalao\uff0c\u6700\u65e9\u662f\u5728[\u5979CTSC 2008\u7684\u4f5c\u4e1a](https://cs.stanford.edu/people/danqi/misc/divide-and-conquer.pdf)\u4e2d\u63d0\u51fa\u7684\uff08OrzOrzOrzOrzOrz\uff09\u3002\u4f3c\u4e4e\u63d2\u5934DP\u4e5f\u662f\u5979\u63d0\u51fa\u7684\uff08[CTSC 2008\u4e2d\u7684\u8bba\u6587](https://cs.stanford.edu/people/danqi/misc/dynamic-programming.pdf)\uff09\uff1f\n\n\u6211\u4eec\u4ee5[Luogu P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09](https://www.luogu.org/problemnew/show/P3810)\u4e3a\u4f8b\u6765\u8bb2\u89e3CDQ\u5206\u6cbb\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u4ee5$a$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$b$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c$c$\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u5347\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u5728\u5206\u6cbb\u65f6\u6211\u4eec\u65e0\u9700\u8003\u8651$a$\uff0c\u5de6\u4fa7\u533a\u95f4\u7684$a$\u59cb\u7ec8\u6bd4\u53f3\u4fa7\u5927\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u964d\u4f4e\u4e86\u4e00\u7ef4\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u7b2c\u4e8c\u7ef4$b$\u8fdb\u884cCDQ\u5206\u6cbb\u3002\u6211\u4eec\u4e0d\u65ad\u5bf9\u6bcf\u4e2a\u533a\u95f4\u4e8c\u5206\u9012\u5f52\u5904\u7406\uff0c\u9012\u5f52\u8fd4\u56de\u65f6\u6211\u4eec\u679a\u4e3e\u53f3\u533a\u95f4\u6bcf\u4e2a\u5143\u7d20\uff0c\u7edf\u8ba1\u5de6\u4fa7$c$\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u9006\u5e8f\u5bf9\u6765\u505a\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u518d\u5957\u4e00\u4e2aCDQ\u5206\u6cbb\u6765\u505a\u3002\u56e0\u4e3a$a$\uff0c$b$\u662f\u5347\u5e8f\u7684\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u5143\u7d20\u7684$a$\uff0c$b$\u4e5f\u5fc5\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u3002\n\n\u6700\u540e\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b$b$\u4e5f\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u5f52\u5e76\u6392\u5e8f\uff0c\u9012\u5f52\u8fd4\u56de\u65f6\u5bf9\u4e8e\u5f53\u524d\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u53f3\u533a\u95f4\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\u3002\uff08\u5176\u5b9e\u8fd9\u91cc\u76f4\u63a5\u5feb\u6392\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u591a\u4e00\u4e2a$log$\uff09\n\n\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nstruct TArray {\n  int c[1000010], mn;\n\n  void update(int n, int dt) {\n    while (n <= mn) {\n      c[n] += dt;\n      n += n & (-n);\n    }\n  }\n\n  int query(int n) {\n    int ans = 0;\n    while (n > 0) {\n      ans += c[n];\n      n -= n & (-n);\n    }\n    return ans;\n  }\n};\n\nstruct Val {\n  int a, b, c, ctr, ans;\n\n  const bool operator==(Val& rhs) {\n    if (a != rhs.a) { return false; }\n    if (b != rhs.b) { return false; }\n    if (c != rhs.c) { return false; }\n    return true;\n  }\n};\n\nbool comp(Val& lhs, Val& rhs) {\n  if (lhs.a != rhs.a) { return lhs.a < rhs.a; }\n  if (lhs.b != rhs.b) { return lhs.b < rhs.b; }\n  if (lhs.c != rhs.c) { return lhs.c < rhs.c; }\n  return false;\n}\n\nbool _comp(Val& lhs, Val& rhs) {\n  if (lhs.b != rhs.b) { return lhs.b < rhs.b; }\n  if (lhs.c != rhs.c) { return lhs.c < rhs.c; }\n  if (lhs.a != rhs.a) { return lhs.a < rhs.a; }\n  return false;\n}\n\nint n, k, t = 0, b[100010];\nVal v[100010], a[100010];\nTArray ta;\n\nvoid cdq(int l, int r) {\n  if (l == r) {\n    a[l].ans += a[l].ctr - 1;\n    return;\n  }\n  int mid = (l + r) >> 1, j = l;\n  cdq(l, mid);\n  cdq(mid + 1, r);\n  sort(a + l, a + mid + 1, _comp);\n  sort(a + mid + 1, a + r + 1, _comp);\n  for (int i = mid + 1; i <= r; i++) {\n    while (j <= mid && a[j].b <= a[i].b) {\n      ta.update(a[j].c, a[j].ctr);\n      j++;\n    }\n    a[i].ans += ta.query(a[i].c);\n  }\n  for (int i = l; i < j; i++) { ta.update(a[i].c, -a[i].ctr); }\n}\n\nint main() {\n  scanf(\"%d %d\", &n, &k);\n  ta.mn = k;\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d %d %d\", &v[i].a, &v[i].b, &v[i].c);\n  }\n  sort(v + 1, v + n + 1, comp);\n  for (int i = 1; i <= n; i++) {\n    if (i != 1 && v[i] == v[i - 1]) {\n      a[t].ctr++;\n    } else {\n      a[++t] = v[i];\n      a[t].ctr = 1;\n    }\n  }\n  cdq(1, t);\n  for (int i = 1; i <= t; i++) {\n    b[a[i].ans] += a[i].ctr;\n  }\n  for (int i = 0; i < n; i++) {\n    printf(\"%d\\n\", b[i]);\n  }\n  return 0;\n}\n```",
        "postTime": 1550489745,
        "uid": 28430,
        "name": "Nerlci_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3810)\n\n\u5fc3\u8840\u6765\u6f6e\u5b66\u4e60\u4e00\u4e0bCDQ\u5206\u6cbb\u3002\n\n\u9996\u5148\u5c06\u4e09\u5143\u7ec4\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u80fd\u5bf9$f(i)$\u4ea7\u751f\u8d21\u732e\u7684$j$\u90fd\u5728$i$\u524d\u9762\uff1b\n\n\u7136\u540e\u8fdb\u884c\u5f52\u5e76\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u80fd\u5bf9$f(i)$\u4ea7\u751f\u8d21\u732e\u7684$j$\u90fd\u4f1a\u51fa\u73b0\u5728$i$\u7684\u5de6\u8fb9\uff0c\u4e14\u53ea\u6709\u4e00\u6b21\uff1b\n\n\u6bcf\u6b21\u5f52\u5e76\u65f6\u7528$b$\u505a\u4e3a\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u53c8\u4fdd\u8bc1\u4e86\u6bcf\u4e2a$a_j\\le a_i$\u4e14$b_j\\le b_i$\u7684$j$\u90fd\u4f1a\u5728\u5f52\u5e76\u65f6\u5728$i$\u524d\u9762\u88ab\u5904\u7406\uff1b\n\n\u6700\u540e\u628a\u5de6\u8fb9\u4e09\u5143\u7ec4\u4ee5$c$\u4e3a\u952e\u503c\u5b58\u5230\u6811\u72b6\u6570\u7ec4\u91cc\uff0c\u66f4\u65b0\u53f3\u8fb9\u7684\u4e09\u5143\u7ec4\u7684$f$\u503c\u3002\n\n\u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff1a\n\n1.\u4e09\u5143\u7ec4\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\uff0c\u9700\u8981\u5148\u53bb\u91cd\u518d\u8ba1\u7b97\uff1b\n\n2.\u6811\u72b6\u6570\u7ec4\u8981\u624b\u52a8\u6e05\u7a7a\uff0c\u4e0d\u80fd\u7528memset\uff0c\u5426\u5219\u4f1a\u8d85\u65f6\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nstruct point{\n\tint a,b,c,id;\n\tpoint(){\n\t\ta=b=c=id=0;\n\t}\n}num[100001],tem[100001];\nbool cmp(point lhs,point rhs){\n\tif(lhs.a!=rhs.a)return lhs.a<rhs.a;\n\tif(lhs.b!=rhs.b)return lhs.b<rhs.b;\n\treturn lhs.c<rhs.c;\n}\nint c[200001],ans[100001],fin[100001],size[100001];\nint n,k;\nvoid update(int ind,int num){for(;ind<=k;ind+=ind&-ind)c[ind]+=num;}\nlong long query(int ind){\n\tlong long tot=0;\n\tfor(;ind;ind-=ind&-ind)tot+=c[ind];\n\treturn tot;\n}\nvoid cdq(int l,int r){\n\tif(l==r)return;\n\tint mid=(l+r)/2;\n\tcdq(l,mid);cdq(mid+1,r);\n\tint i=l,j=mid+1,ind=l;\n\twhile(i<=mid&&j<=r){\n\t\tif(num[i].b<=num[j].b)update(num[i].c,size[num[i].id]),tem[ind++]=num[i++];\n\t\telse ans[num[j].id]+=query(num[j].c),tem[ind++]=num[j++];\n\t}\n\twhile(j<=r)ans[num[j].id]+=query(num[j].c),tem[ind++]=num[j++];\n\tfor(int e=l;e<i;e++)update(num[e].c,-size[num[e].id]);\n\twhile(i<=mid)tem[ind++]=num[i++];\n\tfor(int i=l;i<=r;i++)num[i]=tem[i];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)scanf(\"%d%d%d\",&num[i].a,&num[i].b,&num[i].c);\n\tstd::sort(num+1,num+n+1,cmp);\n\tint ind=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(num[i].a!=num[i-1].a||num[i].b!=num[i-1].b||num[i].c!=num[i-1].c)tem[++ind]=num[i];\n\t\tsize[ind]++;\n\t}\n\tfor(int i=1;i<=ind;i++)num[i]=tem[i],num[i].id=i;\n\tcdq(1,ind);\n\tfor(int i=1;i<=ind;i++)fin[ans[num[i].id]+size[num[i].id]-1]+=size[num[i].id];\n\tfor(int i=0;i<n;i++)printf(\"%d\\n\",fin[i]);\n}\n```",
        "postTime": 1534556903,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09"
    },
    {
        "content": "\u89e3\u51b3\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u4ed6\u7684\u7b80\u5316\u7248\n\n\u4e00\u7ef4\u504f\u5e8f\u95ee\u9898\uff1a\u76f4\u63a5\u6392\u5e8f\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u4e8c\u7ef4\u504f\u5e8f\uff1a\u6392\u5e8f\u540e\u6328\u4e2a\u626b\u4e00\u904d\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\uff08\u4ee5\u503c\u4e3a\u4e0b\u8868\uff09\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5230\u4e86\u4e09\u7ef4\u504f\u5e8f\uff0c\u6bcf\u4e2a\u6570\u636e\u9664\u4e86 $a$,$b$ \u4e4b\u5916\uff0c\u53c8\u591a\u4e86\u7b2c\u4e09\u7ef4 $c$.\n\u6b64\u65f6\u5c31\u9700\u8981\u7528\u5230\u4eca\u5929\u7684\u7b97\u6cd5\uff1acdq \u5206\u6cbb\u3002\n\n### \u7b97\u6cd5\u5b9e\u73b0\n\n\u9996\u5148\u5c06\u6570\u7ec4\u6309\u7167\u7b2c\u4e00\u7ef4 $a$ \u6392\u5e8f\uff1a\n\n```\nbool cmp1(node x,node y)\n  {\n      if(x.a==y.a)\n        {\n            if(x.b==y.b) return x.c<y.c;\n            return x.b<y.b;\n        }\n      return x.a<y.a;\n  }\n```\n\u7136\u540e\u53bb\u91cd\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u6570\u91cf\uff1a\n```\nint m=0,num=0;\n    for(int i=1;i<=n;i++)\n      {\n          num++;\n          if(c[i].a!=c[i+1].a||c[i].b!=c[i+1].b||c[i].c!=c[i+1].c)\n            {\n               s[++m].a=c[i].a;\n               s[m].b=c[i].b;\n               s[m].c=c[i].c;\n               s[m].cnt=num;\n               num=0;\n            }\n      }\n```\n\u63a5\u4e0b\u6765\u5c31\u662f\u6838\u5fc3\u90e8\u5206\u4e86\uff1a\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u6bb5\u533a\u95f4 $[l,r]$ ,\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u6309\u7167\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\u4e86\uff0c\u6240\u4ee5 \u5bf9\u4e8e\u8be5\u533a\u95f4\u7684\u5b50\u533a\u95f4 $[l,mid]$ , $[mid+1,r]$, \u524d\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u4e00\u5b9a\u5c0f\u4e8e\u7b2c\u4e8c\u90e8\u5206\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u3002\n\n\u63a5\u7740\u6211\u4eec\u5c06\u4e24\u4e2a\u5b50\u533a\u95f4\u6309\u7167\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff1a\n\n```\nbool cmp2(node x,node y)\n  {\n      return x.b<y.b;\n  }\n```\n\u867d\u7136\u6b64\u65f6\u4e24\u4e2a\u533a\u95f4\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u5df2\u7ecf\u4e71\u5e8f\u4e86\uff0c\u4f46\u6ca1\u6709\u5173\u7cfb\uff0c\u6b64\u65f6\u524d\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u4ecd\u7136\u5c0f\u4e8e\u7b2c\u4e8c\u90e8\u5206\u7684\u7b2c\u4e00\u5173\u952e\u5b57\u3002\n\n\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u524d\u534a\u90e8\u5206\u5bf9\u540e\u534a\u90e8\u5206\u7684\u8d21\u732e\u5373\u53ef\uff1b\n\n\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 $i$,$j$ ,$i$ \u5728 $[mid+1,r]$ \u904d\u5386\uff0c\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684 $s(j).b<s(i).b$ \uff0c\u5c06\u5176\u8d21\u732e\u4ee5 $s(j).c$ \u4e3a\u4e0b\u6807\u7edf\u8ba1\u8fdb\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6700\u540e\u518d\u67e5\u8be2\u7ebf\u6bb5\u6811\u4e2d $[1,s(i).c]$ \u7684\u533a\u95f4\u548c\uff0c\u5373\u4e3a $f(i)$\u3002\n\n```\nvoid cdq(int l,int r)\n  {\n      if(l==r) return;\n      int mid=l+r>>1;\n      cdq(l,mid),cdq(mid+1,r);\n      sort(s+l,s+mid+1,cmp2),sort(s+mid+1,s+r+1,cmp2);\n      int j=l;\n      for(int i=mid+1;i<=r;i++)\n        {\n            while(j<=mid&&s[j].b<=s[i].b) \n             {\n                 change(1,1,k,s[j].c,s[j].cnt);\n                 j++;\n             }\n            s[i].ans+=query(1,1,k,1,s[i].c);\n        }\n      for(int i=l;i<j;i++)\n        change(1,1,k,s[i].c,-s[i].cnt);\n  }\n```\n\u7b97\u6cd5\u590d\u6742\u5ea6\uff1acdq\u5206\u6cbb\u4e00\u5171\u4f1a\u904d\u5386 $\\log(n)$ \u5c42\uff0c\u6bcf\u5c42\u4f1a\u904d\u5386 $n$ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u9700\u8981 $\\log(n)$ \u7684\u65f6\u95f4\u7edf\u8ba1\u8fdb\u7ebf\u6bb5\u6811\u4e2d\uff0c\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n)$\u3002\n\n\n",
        "postTime": 1625798861,
        "uid": 147401,
        "name": "koishi_offical",
        "ccfLevel": 4,
        "title": "P3810 \u4e09\u7ef4\u504f\u5e8f\u9898\u89e3"
    },
    {
        "content": "# $CDQ$ \u5206\u6cbb\n\n$CDQ$ \u5206\u6cbb\u8fd8\u662f\u7528\u4e86\u201c\u5206\u800c\u6cbb\u4e4b\u201d\u7684\u601d\u60f3\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u5206\u6cbb\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u80fd\u8ba1\u7b97\u4e00\u4e2a\u5b50\u95ee\u9898\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u8d21\u732e\uff0c\u4ece\u800c\u6c42\u51fa\u6574\u4e2a\u95ee\u9898\u7684\u7b54\u6848\n\n**\u8fd9\u91cc\u4ee5 [\u4e09\u7ef4\u504f\u5e8f](https://www.luogu.org/problemnew/show/P3810) \u4e3a\u4f8b**\n\n\u4e00\u7ef4\u504f\u5e8f\u53ea\u8981\u4e00\u4e2a\u6392\u5e8f\u5c31\u884c\u4e86\uff0c\u4e8c\u7ef4\u504f\u5e8f\u662f\u6309\u4e00\u7ef4\u6392\u597d\u5e8f\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u7b54\u6848\uff0c\u90a3\u4e09\u7ef4\u504f\u5e8f\u5c31\u8981\u7528\u5230 $CDQ$ \u5206\u6cbb\u4e86\n\n\u628a\u6574\u4e2a\u6570\u5217\u6309\u4e00\u7ef4\u6392\u597d\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u5c06\u5e8f\u5217\u4e8c\u5206\uff0c\u5206\u522b\u505a\u5b8c\u4e24\u5757\u4ee5\u540e\u518d\u8ba1\u7b97\u540e\u4e00\u5757\u5bf9\u4e8e\u524d\u4e00\u5757\u7684\u8d21\u732e\n\n\u5bf9\u4e8e\u8ba1\u7b97\u540e\u4e00\u5757\u5bf9\u524d\u4e00\u5757\u7684\u8d21\u732e\uff0c\u6211\u4eec\u5df2\u7ecf\u6309\u4e00\u7ef4\u6392\u597d\u5e8f\u4e86\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u7ef4\uff0c\u524d\u4e00\u5757\u5fc5\u5b9a\u5168\u90e8\u5c0f\u4e8e\u540e\u4e00\u5757\uff0c\u5219\u53ef\u4ee5\u6392\u9664\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9\u4e8e\u524d\u4e00\u5757\u548c\u540e\u4e00\u5757\u5206\u522b\u6309\u7167\u7b2c\u4e8c\u7ef4\u6392\u5e8f **\uff08\u7531\u4e8e\u6211\u4eec\u662f\u8ba1\u7b97\u540e\u4e00\u5757\u5bf9\u4e8e\u524d\u4e00\u5757\u7684\u8d21\u732e\uff0c\u5219\u524d\u4e00\u5757\u5185\u90e8\u5df2\u4e0d\u518d\u4e92\u76f8\u5f71\u54cd\uff09**\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u524d\u540e\u4e24\u5757\u4e2d\u7b2c\u4e8c\u7ef4\u5206\u522b\u6709\u5e8f\uff0c\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a $a[j],j \\in (mid,r]$ \u6bcf\u6b21\u5c06**\u6ee1\u8db3 $a[i].y \\le a[j].y$ \u7684 $a[i].z$ \u52a0\u5165\u6811\u72b6\u6570\u7ec4**\uff0c\u67e5\u8be2\u5373\u53ef\n\n\n~~\u53ef\u80fd\u8bb2\u7684\u4e0d\u662f\u5f88\u6e05\u695a\u3010\u96fe\u3011~~\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define N 2000010\nusing namespace std;\n\nstruct node{\n    int x,y,z;\n}b[N];\n\nstruct node1{\n    int x,y,z,ans,same;\n}a[N];\n\nstruct Treearray{\n    int t[N],kk;\n    void add(int x,int k) {for (int i=x;i<=kk;i+=i&(-i)) t[i]+=k;}\n    int query(int x) {int ans=0;for (int i=x;i;i-=i&(-i)) ans+=t[i];return ans;}\n}tree;\n\nint n,m,nn,ans[N];\n\nbool cmp1(node x,node y)\n{\n    return (x.x<y.x) || (x.x==y.x && x.y<y.y) || (x.x==y.x && x.y==y.y && x.z<y.z);\n}\n\nbool cmp2(node1 x,node1 y)\n{\n    return (x.y<y.y) || (x.y==y.y && x.z<y.z);\n}\n\nvoid cdq(int l,int r)\n{\n    if (l==r) return;\n    int mid=(l+r)>>1;\n    cdq(l,mid),cdq(mid+1,r);\n    int j=l;\n    for (int i=mid+1;i<=r;i++)\n    {\n        while (a[j].y<=a[i].y && j<=mid)\n            tree.add(a[j].z,a[j].same),j++;\n        a[i].ans+=tree.query(a[i].z);   \\\\\u67e5\u8be2\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u4e2a\u6570\n    }\n    for (int i=l;i<j;i++)\n        tree.add(a[i].z,-a[i].same);\n    sort(a+l,a+r+1,cmp2);    \\\\\u6bcf\u6b21\u505a\u5b8c\u4e00\u5757\u6570\u5c31\u5c06\u5176\u6309\u7b2c\u4e8c\u7ef4\u6392\u5e8f\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);tree.kk=m;\n    for (int i=1;i<=n;i++)\n        scanf(\"%d%d%d\",&b[i].x,&b[i].y,&b[i].z);\n    sort(b+1,b+n+1,cmp1);   \\\\\u5148\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f\n    nn=1,a[1].x=b[1].x,a[1].y=b[1].y,a[1].z=b[1].z,a[1].same=1;  \\\\\u8fd9\u91cc\u53bb\u4e86\u4e00\u4e0b\u91cd\n    for (int i=2;i<=n;i++)\n        if (b[i].x==a[nn].x && b[i].y==a[nn].y && b[i].z==a[nn].z) a[nn].same++;\n        else a[++nn].x=b[i].x,a[nn].y=b[i].y,a[nn].z=b[i].z,a[nn].same=1;\n    cdq(1,nn);\n    for (int i=0;i<=nn;i++)\n        ans[a[i].ans+a[i].same-1]+=a[i].same;  \\\\\u7edf\u8ba1\u7b54\u6848\u65f6\u522b\u5fd8\u8bb0\u8003\u8651\u5b8c\u5168\u76f8\u540c\u5143\u7d20\u7684\u8d21\u732e\n    for (int i=0;i<n;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1560945199,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011CDQ\u5206\u6cbb"
    },
    {
        "content": "\u4eba\u751f\u7b2c\u4e00\u9053CDQ\u5206\u6cbb\uff08\u8fd8\u662f\u6a21\u677f\u9898\uff0c\u5199\u6cd5\u8fd8\u8d3c2b\uff09\u2026\u2026\n\n\u5230\u76ee\u524d\u4e3a\u6b62\u9898\u89e3\u533a\u6700\u7b28\u7684CDQ\u5206\u6cbb\u65b9\u6cd5\uff1a\n\n\u6211\u4eec\u77e5\u9053CDQ\u5206\u6cbb\u53ef\u4ee5\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u9ad8\u6548\u5730\u79bb\u7ebf\u5904\u7406\u4e00\u7cfb\u5217\u5355\u70b9\u8be2\u95ee\u6216\u4fee\u6539\uff08\u4e0b\u6587\u7edf\u79f0\u4e3a\u201c\u64cd\u4f5c\u201d\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5c31\u60f3\u529e\u6cd5\u5f80\u8fd9\u4e2a\u601d\u8def\u4e0a\u9760\uff1a\n\n\u4ee4$\\{v_i\\}$\u4e3a\u4e00\u4e2a\u5047\u60f3\u7684\u5e8f\u5217\uff0c\u521d\u59cb\u65f6\u6240\u6709\u503c\u5747\u4e3a$+\\infty$\u3002\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u7684\u7b2c\u4e00\u7ef4$a$\u770b\u6210\u201c\u64cd\u4f5c\u65f6\u95f4\u201d\uff0c\u5c06\u6240\u6709\u70b9\u6309$a$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e**\u4f9d\u6b21**\u5c06\u6bcf\u4e2a\u70b9$(a,b,c)$\u8f6c\u6362\u6210\u4ee5\u4e0b\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n\uff081\uff09\u9996\u5148\uff0c\u4ee4$v_b = c$\uff1b\n\uff082\uff09\u7136\u540e\uff0c\u622a\u6b62\u5230\u5f53\u524d\u65f6\u523b\uff08\u5bf9\u5e94$a_j \\le a_i$\uff09\uff0c\u8be2\u95ee$v_0 \\cdots v_b$\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$c$\u7684\u6570\u6709\u591a\u5c11\u4e2a\u3002\uff08\u663e\u7136\u81ea\u8eab\u4e5f\u4f1a\u88ab\u7edf\u8ba1\u8fdb\u53bb\uff09\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5c06$N$\u4e2a\u70b9\u8f6c\u5316\u6210\u4e86$2N$\u6b21\u5355\u70b9\u64cd\u4f5c\u3002\u5b9e\u73b0\u65f6\u501f\u52a9\u4e00\u4e2a\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0cCDQ\u5206\u6cbb\u53ef\u4ee5\u76f4\u63a5\u5957\u7528\u201c\u5f52\u5e76\u65f6\u53ea\u5904\u7406\u5de6\u533a\u95f4\u7684\u4fee\u6539\uff0c\u53ea\u7edf\u8ba1\u53f3\u533a\u95f4\u7684\u67e5\u8be2\u201d\u7684\u6a21\u677f\u6846\u67b6\u3002\n\n\u987a\u4fbf\u5b89\u5229\u4e00\u7bc7\u535a\u6587\uff1ahttps://blog.csdn.net/wu_tongtong/article/details/78785836 \n\n\u4e0d\u8fc7\u8fd9\u4e2a\u601d\u8def\u6709\u4e00\u4e2abug\uff0c\u5904\u7406$a$\u76f8\u7b49\u7684\u60c5\u5f62\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u8003\u8651\u5982\u4e0b\u4e00\u7ec4\u6837\u4f8b\uff1a\n\n```\n4 5\n1 3 5\n1 3 5\n1 2 3\n2 2 3\n```\n\n\u5982\u679c\u76f4\u63a5\u5957\u7528\u4e0a\u8fb9\u7684\u601d\u8def\uff0c\u4f1a\u53d1\u73b0\uff1a\u7531\u4e8e\u70b9$(1,2,3)$\u5bf9\u5e94\u7684\u4fee\u6539\u64cd\u4f5c\u653e\u5728\u4e86\u70b9$(1,3,5)$\u4e4b\u540e\uff0c\u90a3\u4e48\u8fdb\u884c$(1,3,5)$\u5bf9\u5e94\u7684\u67e5\u8be2\u65f6\uff0c\u70b9$(1,2,3)$\u5e76\u4e0d\u4f1a\u88ab\u7edf\u8ba1\u8fdb\u53bb\u3002\u5bf9\u4e8e\u82e5\u5e72\u4e2a\u76f8\u540c\u7684\u70b9\u4e5f\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u6a21\u578b\u8fdb\u884c\u4fee\u6b63\uff1a\u5728\u5bf9$N$\u4e2a\u70b9\u6392\u5e8f\u65f6\uff0c\u4ee5$a$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$b$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c$c$\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u3002\u53e6\u5916\u76f8\u7b49\u7684\u70b9\u8fd8\u8981\u8c03\u6574\u64cd\u4f5c\u7684\u987a\u5e8f\uff1a\u5bf9\u4e8e$k$\u4e2a\u76f8\u7b49\u7684\u70b9\uff0c\u5148\u628a$k$\u6b21\u4fee\u6539\u505a\u5b8c\uff0c\u7136\u540e\u8fdb\u884c$k$\u6b21\u67e5\u8be2\u3002\u4f8b\u5982\uff0c\u4e0a\u8fb9\u7684\u6837\u4f8b\u5e94\u8be5\u8f6c\u6362\u6210\u5982\u4e0b\u7684\u64cd\u4f5c\u5e8f\u5217\uff1a\n\n$(1,2,3)$ \u4fee\u6539\uff1b\n$(1,2,3)$ \u8be2\u95ee\uff1b\n\n$(1,3,5)$ \u4fee\u6539\uff1b\n$(1,3,5)$ \u4fee\u6539\uff1b\n\n$(1,3,5)$ \u8be2\u95ee\uff1b\n$(1,3,5)$ \u8be2\u95ee\uff1b\n\n$(2,2,3)$ \u4fee\u6539\uff1b\n$(2,2,3)$ \u8be2\u95ee\u3002\n\n\u8fd9\u6837\u65b9\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff08\u4e0d\u59a8\u4ee5\u4e0a\u4f8b\u9a8c\u8bc1\u4e00\u4e0b\uff09\u3002\u7136\u540e\u5c31\u662f\u5b8c\u6574\u4ee3\u7801\uff08\u4e00\u5f00\u59cb\u6ca1\u770b\u5230K\u7684\u9650\u5236\u8fd8\u624b\u8d31\u5199\u4e86\u4e2a\u79bb\u6563\u5316\uff09\uff1a\n\n``` cpp\n#include <cstdio>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <numeric>\n\nstruct node_t\n{\n    int a, b, c, id;\n};\n\nenum class operation_type_t\n{\n    initialize = 0,\n    modify = 1,\n    query = 2\n};\n\nstruct oper_t\n{\n    operation_type_t type;\n    int position;\n    int key;\n    int ans_id;\n\n    bool operator < (const oper_t& rhs) const\n    {\n        if (position != rhs.position)\n            return position < rhs.position;\n        return static_cast<int>(type) < static_cast<int>(rhs.type);\n    }\n};\n\ntemplate <class T, class Oper = std::plus<T>>\nclass binary_indexed_tree_t\n{\n    std::vector<T> value;\n    int n;\n    Oper oper;\n\n    int lowbit(int x) { return x & -x; }\npublic:\n    binary_indexed_tree_t() = default;\n    explicit binary_indexed_tree_t(int n) { init(n); }\n\n    void init(int n)\n    {\n        value.assign(n + 1, T());\n        this->n = n;\n    }\n    void modify(int pos, const T& x)\n    {\n        for (pos += 1; pos <= n; pos += lowbit(pos))\n            value[pos] = oper(value[pos], x);\n    }\n    T get_prefix(int pos, T init = T())\n    {\n        for (pos += 1; pos; pos -= lowbit(pos))\n            init = oper(value[pos], init);\n        return init;\n    }\n};\n\nconst int maxN = (int)1e5 + 10;\n\nnode_t node[maxN];\noper_t oper[maxN * 2];\nint ans[maxN];\nint N;\n\nvoid cdq_divide(int left, int right)\n{\n    static oper_t temp[maxN * 2];\n    static binary_indexed_tree_t<int> bit(N);\n\n    if (right - left <= 1)\n        return;\n\n    int mid = (left + right) >> 1;\n    cdq_divide(left, mid);\n    cdq_divide(mid, right);\n\n    for (int il = left, ir = mid, it = 0; il < mid || ir < right; )\n    {\n        if ((il < mid && ir < right && oper[il] < oper[ir]) ||\n            (ir == right))\n        {\n            if (oper[il].type == operation_type_t::modify)\n            {\n                bit.modify(oper[il].key, 1);\n            }\n            temp[it++] = oper[il];\n            il += 1;\n        }\n        else\n        {\n            if (oper[ir].type == operation_type_t::query)\n            {\n                ans[oper[ir].ans_id] += bit.get_prefix(oper[ir].key);\n            }\n            temp[it++] = oper[ir];\n            ir += 1;\n        }\n    }\n\n    for (int i = left; i < mid; i++)\n        if (oper[i].type == operation_type_t::modify)\n            bit.modify(oper[i].key, -1);\n\n    for (int i = left; i < right; i++)\n        oper[i] = temp[i - left];\n}\n\ntemplate <class RAIter, class MemPtr, class Comp>\nint discretize_in_place(RAIter first, RAIter last, MemPtr mp, Comp &&comp_3way)\n{\n    std::vector<int> idx(last - first);\n    std::iota(idx.begin(), idx.end(), 0);\n    std::sort(idx.begin(), idx.end(), [&comp_3way, &first] (int x, int y) {\n        return comp_3way(first[x], first[y]) < 0;\n    });\n\n    int count = 0, next = 0;\n    for (size_t i = 0; i + 1 < idx.size(); i++, count = next)\n    {\n        next = comp_3way(first[idx[i]], first[idx[i + 1]]) == 0 ? count : count + 1;\n        first[idx[i]].*mp = count;\n    }\n    first[idx.back()].*mp = count;\n    return count;\n}\n\nint main()\n{\n    scanf(\"%d%*d\", &N);\n    for (int i = 0; i < N; i++)\n    {\n        scanf(\"%d%d%d\", &node[i].a, &node[i].b, &node[i].c);\n        node[i].id = i;\n    }\n\n    auto comp_node = [] (const node_t& lhs, const node_t& rhs) {\n        if (lhs.a != rhs.a)\n            return lhs.a < rhs.a;\n        if (lhs.b != rhs.b)\n            return lhs.b < rhs.b;\n        return lhs.c < rhs.c;\n    };\n    std::sort(node, node + N, comp_node);\n\n    discretize_in_place(node, node + N, &node_t::b, [](const node_t &lhs, const node_t &rhs) {\n        return lhs.b - rhs.b;\n    });\n    discretize_in_place(node, node + N, &node_t::c, [](const node_t &lhs, const node_t &rhs) {\n        return lhs.c - rhs.c;\n    });\n\n    oper[0].position = -1;\n    oper[0].type = operation_type_t::initialize;\n\n    for (int qi = 1, i = 0; i < N; )\n    {\n        int ub = std::upper_bound(node + i, node + N, node[i], comp_node) - node;\n        for (int j = i; j < ub; j++)\n        {\n            oper[qi++] = {.type = operation_type_t::modify,\n                          .position = node[j].b,\n                          .key = node[j].c,\n                          .ans_id = node[j].id};\n        }\n        for (int j = i; j < ub; j++)\n        {\n            oper[qi++] = {.type = operation_type_t::query,\n                          .position = node[j].b,\n                          .key = node[j].c,\n                          .ans_id = node[j].id};\n        }\n        i = ub;\n    }\n\n    cdq_divide(0, N << 1 | 1);\n\n    std::vector<int> ans_count(maxN);\n    for (int i = 0; i < N; i++)\n        ans_count[ans[i]] += 1;\n\n    for (int i = 1; i <= N; i++)\n        printf(\"%d\\n\", ans_count[i]);\n\n    return 0;\n}\n\n```\n",
        "postTime": 1543733587,
        "uid": 49526,
        "name": "Orina_zju",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5361\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u800c\u4e14\u849f\u84bb\u8fd8\u770b\u4e0d\u61c2\u5176\u4ed6\u9898\u89e3\u4e2d\u4e3a\u6570\u4e0d\u591a\u7684\u4e8c\u7ef4CDQ\u5206\u6cbb\uff0c\u6700\u540e\u7ec8\u4e8e\u81ea\u5df1\u641e\u51fa\u6765\u4e86..\n\n\n\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u6c42\u4e09\u4e2a\u5750\u6807\u5747\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u4e09\u5143\u7ec4\u7684\u4e2a\u6570\u3002\n\n\n\u4e00\u4e2a\u4e09\u5143\u7ec4\u53ea\u4f1a\u5bf9\u4e09\u4e2a\u5750\u6807\u90fd\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u4e09\u5143\u7ec4\u9020\u6210\u5f71\u54cd\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528CDQ\u5206\u6cbb\u6765\u5904\u7406\u3002\n\n\u9996\u5148\u628a\u7ed9\u5b9a\u7684\u6570\u636e\u53bb\u91cd\uff0c\u56e0\u4e3aCDQ\u5206\u6cbb\u5bf9\u4e8e\u4e09\u4e2a\u5750\u6807\u5b8c\u5168\u4e00\u6837\u7684\u5143\u7d20\u7edf\u8ba1\u7b54\u6848\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728\u7ed9\u7b2c\u4e00\u7ef4\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u987a\u4fbf\u89e3\u51b3\u3002\n\n\u6211\u4eec\u9700\u8981\u4e24\u4e2aCDQ\u5206\u6cbb\u51fd\u6570\uff08\u53ef\u4ee5\u538b\u7f29\u5230\u4e00\u4e2a\uff09\uff0c\u7b2c\u4e00\u4e2a\u8d1f\u8d23\u7ed9\u7b2c\u4e8c\u7ef4\u6392\u5e8f\uff0c\u7b2c\u4e8c\u4e2a\u8d1f\u8d23\u7ed9\u7b2c\u4e09\u4f4d\u6392\u5e8f\u3002\n\n\u5728\u7ed9\u7b2c\u4e8c\u7ef4\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\u662f\u5728\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff0c\u4ee5\u65b9\u4fbf\u7b2c\u4e09\u7ef4\u7edf\u8ba1\u7b54\u6848\uff08\u56e0\u4e3a\u7b2c\u4e09\u7ef4\u5728\u7edf\u8ba1\u7b54\u6848\u65f6\u9700\u8981\u4fdd\u8bc1\u4e09\u7ef4\u90fd\u6709\u5e8f\uff09\uff0c\u6bcf\u6b21\u5bf9\u7b2c\u4e8c\u7ef4\u7684\u6392\u5e8f\u8fdb\u884c\u5b8c\u6bd5\u540e\uff0c\u76f4\u63a5\u8fdb\u884c\u7b2c\u4e09\u7ef4\u6392\u5e8f\uff0c\u540c\u65f6\u8fd8\u8981\u4fdd\u8bc1\u7b2c\u4e09\u7ef4\u6392\u5e8f\u8fdb\u884c\u5b8c\u540e\uff0c\u5bf9\u7b2c\u4e8c\u7ef4\u6392\u5e8f\u7684\u6570\u7ec4\u4e0d\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002\n\n\u4ee3\u7801\u4e2d\u6709\u90e8\u5206\u8bf4\u660e\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <assert.h>\n#define debug(x) std::cout << #x << \" = \" << x << std::endl;\nusing int_t = long long int;\n\nusing std::cin;\nusing std::cout;\nusing std::endl;\n\nconst int_t LARGE = 100000;\n\nstruct Query\n{\n    int_t pos[3];\n    int_t mark;\n    int_t *result = 0;\n    int_t count = 0;\n    int_t &operator[](int_t x)\n    {\n        return pos[x];\n    }\n    bool operator==(const Query &x)\n    {\n        for (int_t i = 0; i < 3; i++)\n        {\n            if (pos[i] != x.pos[i])\n                return false;\n        }\n        return true;\n    }\n};\nQuery querys[LARGE + 1];\nint_t n, k;\n//\u7b2c\u4e8c\u4e2aCDQ\u5206\u6cbb\uff0c\u5bf9\u7b2c\u4e09\u7ef4\u5750\u6807\u8fdb\u884c\u6392\u5e8f\u5e76\u7edf\u8ba1\u7b54\u6848\nvoid process2(Query *querys, int_t left, int_t right)\n{\n    if (left == right)\n        return;\n    static Query temp[LARGE + 1];\n    int_t mid = (left + right) / 2;\n    process2(querys, left, mid);\n    process2(querys, mid + 1, right);\n    int_t uleft = left;\n    int_t uright = mid + 1;\n    int_t curr = 0;\n    //\u8fd9\u4e2afor\u5faa\u73af\u5199\u7684\u53ef\u80fd\u6709\u70b9\u6666\u6da9\u96be\u61c2\n    //\u5927\u6982\u5c31\u662f\u628a\u666e\u901a\u5f52\u5e76\u6392\u5e8f\u5408\u5e76\u6709\u5e8f\u8868\u7684\u4e09\u4e2a\u8fc7\u7a0b\u76f4\u63a5\u7ed3\u5408\u8d77\u6765\u4e86\n    for (int_t i = left; i <= right; i++)\n    {\n        //uleft uright\u5199\u6210\u4e86left right\n        //\u8fd9\u79cd\u70c2\u9519\u8bef\u8c03\u4e86\u4e00\u665a\u4e0a\n        \n        //\u80fd\u4ece\u5de6\u8fb9\u5e8f\u5217\u4e2d\u62ff\u51fa\u4e00\u4e2a\u5143\u7d20\u7684\u6761\u4ef6\u662f\u5de6\u8fb9\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8f83\u5c0f\u6216\u8005\u53f3\u8fb9\u5e8f\u5217\u5df2\u7ecf\u4e3a\u7a7a\n        if (((uright > right) || querys[uleft].pos[2] <= querys[uright].pos[2]) && uleft <= mid)\n        {\n            temp[i] = querys[uleft];\n            uleft++;\n            //\u4e4b\u6240\u4ee5\u8981\u52a0\u8fd9\u4e2a\u5224\u65ad\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5bf9\u7b2c\u4e09\u7ef4\u7684\u6392\u5e8f\u6253\u4e71\u4e86\u539f\u6765\u7684\u7b2c\u4e8c\u7ef4\u7684\u72b6\u6001\n            //\u6240\u4ee5\u6211\u4eec\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u6807\u8bb0\u8bb0\u5f55\u4e86\u539f\u6765\u7b2c\u4e8c\u7ef4\u7684\u6709\u5e8f\u6027\n            //\u8fd9\u4e2a\u6807\u8bb0\u5c31\u662fmark\uff0cmark\u4e3atrue\u8868\u793a\u8fd9\u4e2a\u67e5\u8be2\u539f\u6765\u5728\u5de6\u8fb9\n            if (temp[i].mark != 0)\n            {\n                //\u56e0\u4e3a\u5143\u7d20\u53bb\u91cd\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u9700\u8981\u4e58\u4e0a\u5143\u7d20\u4e2a\u6570\n                curr += (temp[i].mark * temp[i].count);\n            }\n        }\n        else\n        {\n            temp[i] = querys[uright];\n            uright++;\n            if (temp[i].mark == 0)\n            {\n                *temp[i].result += curr;\n                // cout << \"counting \" << curr << \" to \" << temp[i] << endl;\n            }\n        }\n    }\n    std::copy(temp + left, temp + right + 1, querys + left);\n}\n\nvoid process1(Query *querys, int_t left, int_t right)\n{\n    if (left == right)\n        return;\n    static Query temp[LARGE + 1];\n    int_t mid = (left + right) / 2;\n    process1(querys, left, mid);\n    process1(querys, mid + 1, right);\n    int_t uleft = left;\n    int_t uright = mid + 1;\n    for (int_t i = left; i <= right; i++)\n    {\n        if (((uright > right) || querys[uleft].pos[1] <= querys[uright].pos[1]) && uleft <= mid)\n        {\n            temp[i] = querys[uleft];\n            //\u9700\u8981\u505a\u597d\u8fd9\u4e2a\u6807\u8bb0\uff0c\u56e0\u4e3a\u5bf9\u7b2c\u4e09\u7ef4\u6392\u5e8f\u540e\u7b2c\u4e8c\u7ef4\u5c31\u65e0\u5e8f\u4e86\n            temp[i].mark = 1;\n            uleft++;\n        }\n        else\n        {\n            temp[i] = querys[uright];\n            //\u4e3a\u4e86\u9632\u6b62\u8bef\u7edf\u8ba1\u7b54\u6848\uff0c\u7b2c\u4e8c\u7ef4\u5728\u53f3\u8fb9\u7684\u9700\u8981\u628a\u6807\u8bb0\u8bbe\u7f6e\u4e3a0\n            temp[i].mark = 0;\n            uright++;\n        }\n    }\n    std::copy(temp + left, temp + right + 1, querys + left);\n    //\u9012\u5f52\u5904\u7406\u7b2c\u4e09\u7ef4\n    //\u6ce8\u610f\u4e0d\u8981\u628a::querys\u4f20\u8fdb\u53bb\uff0c\u56e0\u4e3a\u6211\u4eecprocess1\u7684\u4f5c\u7528\u662f\u5bf9\u7b2c\u4e8c\u7ef4\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u679c\u518d\u8c03\u7528process2\u7ed9\u7b2c\u4e09\u7ef4\u6392\u5e8f\uff0c\u800c\u4e14\u4f7f\u7528\u7684\u8fd8\u662f\u540c\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6253\u4e71\u4e86\u7b2c\u4e8c\u7ef4\u7684\u987a\u5e8f\n    process2(temp, left, right);\n}\n\nint main()\n{\n    int_t _n;\n    cin >> n >> k;\n    //\u4fdd\u5b58\u4e00\u4e0bn\n    _n = n;\n    //\u4e00\u4e2a\u5185\u5b58\u6c60\uff0c\u7528\u6765\u8bb0\u5f55\u67e5\u8be2\u7684\u7b54\u6848\n    static int_t results[LARGE + 1];\n    for (int_t i = 1; i <= n; i++)\n    {\n        cin >> querys[i].pos[0] >> querys[i].pos[1] >> querys[i].pos[2];\n    }\n    //\u6392\u5e8f\u53bb\u91cd\n    std::sort(querys + 1, querys + 1 + n, [](const Query &a, const Query &b) -> bool {\n        if (a.pos[0] == b.pos[0])\n        {\n            if (a.pos[1] == b.pos[1])\n            {\n                return a.pos[2] < b.pos[2];\n            }\n            else\n            {\n                return a.pos[1] < b.pos[1];\n            }\n        }\n        else\n        {\n            return a.pos[0] < b.pos[0];\n        }\n    });\n    //\u53bb\u91cd\n    int_t first = 1;\n    querys[1].count++;\n    for (int_t i = 2; i <= n; i++)\n    {\n        if (querys[i] == querys[first])\n        {\n            querys[first].count++;\n        }\n        else\n        {\n            first = i;\n            querys[first].count++;\n        }\n    }\n    n = std::remove_if(querys + 1, querys + 1 + n, [](const Query &x) -> bool { return x.count == 0; }) - querys - 1;\n    //\u7ed9\u53bb\u91cd\u540e\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5206\u914d\u4e00\u4e2aint\u6307\u9488\u7528\u6765\u4fdd\u5b58\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u5728process2\u4e2d\u7edf\u8ba1\u7ed3\u679c\u7684\uff0c\u800cprocess2\u4e2d\u65e0\u6cd5\u5bf9::querys\u6570\u7ec4\u505a\u51fa\u4fee\u6539\n    for (int_t i = 1; i <= n; i++)\n    {\n        querys[i].result = results + i;\n    }\n    process1(querys, 1, n);\n    //\u7ed3\u679c\u6570\u7ec4\n    static int_t result[LARGE + 1];\n    for (int_t i = 1; i <= n; i++)\n    {\n        //\u56e0\u4e3a\u6211\u4eec\u53bb\u8fc7\u91cd\uff0c\u6240\u4ee5\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\u52a0\u4e0a\u8fd9\u4e2a\u4e09\u5143\u7ec4\u7684\u4e2a\u6570-1\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e1c\u897f\u4e5f\u5bf9\u8fd9\u4e2a\u4e09\u5143\u7ec4\u7684\u7b54\u6848\u505a\u51fa\u4e86\u8d21\u732e\n        *querys[i].result += querys[i].count - 1;\n        result[*querys[i].result] += querys[i].count;\n    }\n    for (int_t i = 0; i < _n; i++)\n        cout << result[i] << endl;\n    return 0;\n}\n\n```\n\n\u535a\u5ba2\u94fe\u63a5https://yutong.site/?p=722",
        "postTime": 1537879458,
        "uid": 56891,
        "name": "officeyutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "\u54a6\uff1f\uff01\u6211\u662fPascal\u7684\uff08~~AC400+ Happy~~\uff09\n\n\u6628\u5929\u542c\u5927\u4f6c\u8bb2\u4e86CDQ\u5206\u6cbb\uff0c\u89c9\u5f97\u5f88\u6709\u9053\u7406\uff0c\u4eca\u5929\u65e9\u4e0a\u4e00\u6ce2AC\u4e86\uff08\u9898\u89e3\u6709\u4e9b\u8bed\u65e0\u4f26\u6b21\uff0c\u671b\u539f\u8c05\uff09\u3002\n\nCDQ\u5206\u6cbb\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u5f88\u5bb9\u6613\u542c\u61c2\u3002\n\n\u73b0\u5728\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u4e09\u7ef4\u504f\u5e8f\u7684\u601d\u8def\u662f\uff0c\u9996\u5148\u5bf9\u7b2c\u4e00\u7ef4a\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0a\u5df2\u7ecf\u662f\u6709\u5e8f\u7684\u4e86\u3002\n\n\u6982\u62ec\uff1a\uff08\u770b\u4e0d\u61c2\u4e5f\u6ca1\u4e8b\uff09\n\n\u7136\u540e\u518d\u8fdb\u884c\u5206\u6cbb\uff0c\u5206\u4e3a{l,mid},{mid+1,r}\u4e24\u4e2a\u533a\u95f4\u8fdb\u884c\u5206\u6cbb\uff0c\u518d\u6b21\u5bf9\u4e24\u4e2a\u533a\u95f4\u4ee5b\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u51fa**\u7b2c\u4e00\u4e2a\u533a\u95f4\u5bf9\u7b2c\u4e8c\u4e2a\u533a\u95f4\u6240\u4ea7\u751f\u7684\u7b54\u6848**\uff08\u5206\u6cbb\u65f6\u4f1a\u6f0f\u6389\uff09\u3002\n\n\u7ee7\u7eed\u5206\u6cbb--->cdq\uff08l,mid\uff09,cdq\uff08mid+1,r\uff09\n\n\u5177\u4f53\u5b9e\u73b0\uff1a\n\n\u2460\u5c061~n\u5206\u4e3a\u4e24\u4e2a\u533a\u95f4\n\n\u2461\u5c06\u4e24\u4e2a\u533a\u95f4\u5206\u522b\u4ee5b\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u524d\u9762\u7684\u533a\u95f4\u7684a\u5df2\u7ecf\u6bd4\u540e\u9762\u7684a\u5927\u4e86\uff0c\u90a3\u4e48\u5bf9\u4e8e\u524d\u4e00\u4e2a\u533a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2ai\uff0c\u6211\u4eec\u8981\u5728\u540e\u4e00\u4e2a\u533a\u95f4\u4e2d\u6070\u597d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u524d\u9762\u7684\u70b9\u7684b\u90fd\u6bd4\u8be5\u70b9\u5927\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u2462\u7ee7\u7eed\u5206\u6cbb\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u82e5\u6709\u5931\u8bef\uff0c\u671bdalao\u6307\u51fa\u3002\n\n```cpp\n// luogu-judger-enable-o2//O2\u4f18\u5316\u2026\u2026\ntype zty=record\n  a,b,c,id,ll:longint;\nend;\nvar\n  q,u:array[0..400005]of zty;\n  d,ans1,ans2:array[0..400005]of longint;\n  n,m,i,k,tot,o:longint;\nprocedure asort(l,r:longint);\n      var\n         i,j:longint;\n         x,y:zty;\n      begin\n         i:=l;\n         j:=r;\n         x:=q[(l+r) div 2];\n         repeat\n           while (q[i].a>x.a) or (q[i].a=x.a) and (q[i].b>x.b)\n           or (q[i].a=x.a) and (q[i].b=x.b) and (q[i].c>x.c) do\n            inc(i);\n           while (x.a>q[j].a) or (x.a=q[j].a) and (x.b>q[j].b)\n           or (q[j].a=x.a) and (q[j].b=x.b) and (x.c>q[j].c) do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=q[i];\n                q[i]:=q[j];\n                q[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           asort(l,j);\n         if i<r then\n           asort(i,r);\n      end;\nprocedure bsort(l,r:longint);\n      var\n         i,j:longint;\n         x,y:zty;\n      begin\n         i:=l;\n         j:=r;\n         x:=q[(l+r) div 2];\n         repeat\n           while q[i].b<x.b do\n            inc(i);\n           while x.b<q[j].b do\n            dec(j);\n           if not(i>j) then\n             begin\n                y:=q[i];\n                q[i]:=q[j];\n                q[j]:=y;\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           bsort(l,j);\n         if i<r then\n           bsort(i,r);\n      end;\nfunction lowbit(x:longint):longint;\nbegin\n  exit(x and (-x));\nend;\nprocedure update(x,y:longint);\nbegin\n  while x<=m do\n  begin\n    d[x]:=d[x]+y;\n    x:=x+lowbit(x);\n  end;\nend;\nfunction getsum(x:longint):longint;\nbegin\n  getsum:=0;\n  while x>0 do\n  begin\n    inc(getsum,d[x]);\n    x:=x-lowbit(x);\n  end;\nend;\nprocedure cdq(l,r:longint);\nvar\n  mid,i,j:longint;\nbegin\n  if l=r then\n    exit;\n  mid:=(l+r) div 2;\n  j:=mid+1;\n  bsort(l,mid);\n  bsort(mid+1,r);\n\n  for i:=l to mid do\n  begin\n    while (j<=r) and (q[j].b<=q[i].b) do\n    begin\n      update(q[j].c,q[j].ll);\n      inc(j);\n    end;\n    ans1[q[i].id]:=ans1[q[i].id]+getsum(q[i].c);\n  end;\n  j:=mid+1;\n  for i:=l to mid do\n  begin\n    while (j<=r) and (q[j].b<=q[i].b) do\n    begin\n      update(q[j].c,-q[j].ll);\n      inc(j);\n    end;\n    //ans1[i]:=ans1[i]+getsum(q[i].c);\n  end;\n  {for i:=mid+1 to r do\n    if (q[i].a=q[mid].a) and (q[i].b=q[mid].b) and (q[i].c=q[mid].c) then\n      inc(ans1[i]);}\n  asort(l,mid);\n  asort(mid+1,r);\n\n  cdq(l,mid);\n  cdq(mid+1,r);\nend;\nbegin\n  readln(n,m);\n  o:=n;\n  for i:=1 to n do\n  begin\n    readln(q[i].a,q[i].b,q[i].c);\n    q[i].id:=i;\n  end;\n  asort(1,n);\n  inc(tot);\n  u[tot]:=q[1];\n  u[tot].ll:=1;\n  for i:=2 to n do\n    if (q[i].a=q[i-1].a) and (q[i].b=q[i-1].b) and (q[i].c=q[i-1].c) then\n      inc(u[tot].ll) else\n      begin\n        inc(tot);\n        u[tot]:=q[i];\n        u[tot].ll:=1;\n      end;\n  n:=tot;\n  //writeln(n);\n  q:=u;\n  {writeln;\n  for i:=1 to n do\n    writeln(q[i].a,' ',q[i].b,' ',q[i].c,' ',q[i].ll);}\n  cdq(1,n);\n\n  for i:=1 to n do\n    inc(ans2[ans1[q[i].id]+q[i].ll-1],q[i].ll);\n  //writeln;\n  for i:=0 to o-1 do\n    writeln(ans2[i]);\nend.\n```\n\n",
        "postTime": 1534169223,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "### \u3010\u4f8b\u9898\u3011\n![\u9898\u76ee\u63cf\u8ff0](https://cdn.luogu.com.cn/upload/pic/28231.png)\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n- CDQ\u5206\u6cbb\u88f8\u9898\u3002\n- \u5148\u628a\u6240\u6709\u5c5e\u6027\u6309\u7167a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5e76\u8fdb\u884ca\u7684\u79bb\u6563\u5316\uff0c\u8bb0\u4e3a\u7f16\u53f7\u3002\n- \u7136\u540e\u8fdb\u884cCDQ\u5206\u6cbb\uff0c\u628al\u5230r\u7684\u5c5e\u6027\u6309\u7167b\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u7528\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55<=c\u5c5e\u6027\u7684\u5c5e\u6027\u6570\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa\u7b54\u6848\u3002\n- \u4f46\u662f\u7edf\u8ba1\u7684\u5c5e\u6027\u5fc5\u987b\u5728\u5f53\u524d\u5c5e\u6027\u4e4b\u524d\uff0c\u7136\u540e\u5c31\u8981\u4f7f\u7528CDQ\u5206\u6cbb\u6700\u7cbe\u9ad3\u7684\u90e8\u5206\uff1a\u679a\u4e3el\u5230r\uff0c\u5982\u679c \u5f53\u524d\u5c5e\u6027\u7f16\u53f7$<=mid$\uff0c\u90a3\u4e48\u7528\u6811\u72b6\u6570\u7ec4\u589e\u52a0\u5bf9\u5e94\u8303\u56f4\u7684\u6570\u91cf\uff0c\u5426\u5219\u5c31\u7d2f\u52a0\u6811\u72b6\u6570\u7ec4<=c\u7684\u6570\u91cf\u8bb0\u4e3a\u7b54\u6848\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u7edf\u8ba1\u7684\u4e00\u5b9a\u5728\u5f53\u524d\u7684\u524d\u9762\u3002\n- \u679a\u4e3e\u5b8c\u4e4b\u540e\u8fd8\u8981\u628a\u6811\u72b6\u6570\u7ec4\u6e05\u7a7a\uff0c\u4f46\u4e0d\u53ef\u4ee5\u4f7f\u7528$memset$\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u662f$n^2$\u7684\uff0c\u53ea\u80fd\u8fdb\u884c\u589e\u52a0\u64cd\u4f5c\u7684\u9006\u64cd\u4f5c\u3002\n- \u6700\u540e\u8981\u8fdb\u884c\u5224\u91cd\uff08\u4e3a\u4ec0\u4e48\u8981\u5224\u91cd\uff1f\u56e0\u4e3a\u5982\u679c\u4e0d\u5224\u91cd\uff0c\u7136\u540e\u51fa\u73b0\u4e863\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5c5e\u6027\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\uff09\u3002\n\n### \u3010\u89e3\u9898\u53cd\u601d\u3011\n- \u5728\u505a\u6811\u72b6\u6570\u7ec4\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5927\u5c0f\u662f\u7f16\u53f7\u5927\u5c0f\u8fd8\u662f\u6570\u503c\u5927\u5c0f\u3002\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=5000005;\nint n,k;\nint ans[N],same[N],f[N];\nstruct NUM{\n\tint w,a,b,c;\n}p[N];\nint tree[N];\nint lowbit(int x) {return ((x&(-x)));}\nvoid add(int x,int y)\n{\n\tfor (;x<=k;x+=lowbit(x)) tree[x]+=y;//\u6b64\u5904\u662f<=k\u800c\u4e0d\u662f<=n\n}\nint sum(int x)\n{\n\tint ans=0;\n\tfor (;x;x-=lowbit(x)) ans+=tree[x];\n\treturn ans;\n}\n\n\nbool cmp1(NUM a,NUM b)\n{\n\tif (a.a!=b.a) return a.a<b.a;\n\tif (a.b!=b.b) return a.b<b.b;\n\treturn a.c<b.c;\n}\nbool cmp2(NUM a,NUM b)\n{\n\tif (a.b!=b.b) return a.b<b.b;\n\tif (a.c!=b.c) return a.c<b.c;\n\treturn a.a<b.a;\n}\n\nvoid CDQ(int l,int r)\n{\n\tif (l==r) return;\n\tint mid=(l+r)/2;\n\tCDQ(l,mid);CDQ(mid+1,r);\n\tsort(p+l,p+1+r,cmp2);\n\tfor (int i=l;i<=r;i++)\n\t\tif (p[i].a<=mid)\n\t\t{\n\t\t\tadd(p[i].c,1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans[p[i].w]+=sum(p[i].c);\n\t\t}\n\tfor (int i=l;i<=r;i++)\n\t\tif (p[i].a<=mid)\n\t\t\tadd(p[i].c,-1);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&p[i].a,&p[i].b,&p[i].c);\n\t\tp[i].w=i;\n\t}\n\tsort(p+1,p+1+n,cmp1);\n\tfor (int i=1;i<=n;)\n\t{\n\t\tint j=i+1;\n        while (j<=n&&p[i].a==p[j].a&&p[i].b==p[j].b&&p[i].c==p[j].c) \n\t\t\tj++;\n        while(i<j) \n\t\t\tsame[p[i++].w]=p[j-1].w;\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tp[i].a=i;\n\t\t\n\tCDQ(1,n);\n\t\n\tfor (int i=1;i<=n;i++)\n\t\tf[ans[same[p[i].w]]]++;\n\tfor (int i=0;i<n;i++)\n\t\tprintf(\"%d\\n\",f[i]);\n\treturn 0;\n} \n```",
        "postTime": 1534117235,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "CDQ\u5206\u6cbb\u2014\u2014\u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "###\u9898\u89e3\n\n\u60f3\u5fc5\u5927\u5bb6\u90fd\u662f\u4e3a\u4e86\u5b66\u4e60CDQ\u5206\u6cbb\u624d\u6765\u5237\u8fd9\u9053\u9898\u76ee\u7684(~~\u4f1aTreap\u7684\u5927\u4f6c\u8bf7\u8d70\u5f00~~)\n\u9996\u5148\u6211\u4eec\u8003\u8651\u4e8c\u7ef4\u504f\u5e8f\uff0c\u53ea\u9700\u5c06\u7b2c\u4e00\u7ef4\u4f8b\u5982$a$\u6392\u5e8f\uff0c\u7136\u540e\u5728\u786e\u4fdd$a$\u6709\u5e8f\u7684\u524d\u63d0\u4e0b\u5229\u7528\u5404\u79cd\u7b97\u6cd5\u7b97\u987a\u5e8f\u5bf9$b_j,b_i$\uff0c\u4f8b\u5982Splay\uff0c\u5f52\u5e76\uff0c\u7ebf\u6bb5\u6811\u7b49\u7b49\n\n\u7136\u540e\u81f3\u4e8e\u4e09\u7ef4\uff0c\u56db\u7ef4\u751a\u81f3\u4e94\u7ef4\u516d\u7ef4\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u4e0d\u65ad\u7684\u5f80\u4e0a\u5957\u6570\u636e\u7ed3\u6784(\u6216\u8005\u7ee7\u7eedCDQ\u5206\u652f)\u7f62\u4e86\uff0c\u592a\u9ad8\u5e8f\u7684\u5176\u5b9e\u53ea\u662f\u5957\u677f\u5b50\u7684\u8fc7\u7a0b\u4e86(~~\u8c8c\u4f3c\u4f4e\u7ef4\u4e5f\u662f\u5957\u677f\u5b50\u7684\u8fc7\u7a0b~~)\n\u672c\u9898\u6211\u91c7\u7528\u7684\u662f**\u5f52\u5e76\u5957\u6811\u72b6\u6570\u7ec4**(\u8c8c\u4f3c\u697c\u4e0a\u6ca1\u6709\u8fd9\u79cd\u7b97\u6cd5)\n\n\u5148\u5c06\u4e00\u7ef4\u6392\u5e8f\uff0c\u7136\u540e\u518d\u5229\u7528\u5f52\u5e76\u6392\u5e8f\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\n\u5728\u5de6\u533a\u95f4A,\u548c\u53f3\u533a\u95f4B\u4e2d\uff0c\u533a\u95f4A\u7684a\u4e00\u5b9a\u5c0f\u4e8eB\uff0c\u4f46\u662fA\u5185\u7684a\u518d\u5f52\u5e76\u540e\u662f\u5426\u8fd8\u6709\u5e8f\u5c31\u4e0d\u4e00\u5b9a\u4e86\uff01\uff01\uff01\n\u518d\u5f52\u5e76\u5de6\u533a\u95f4\u8fc7\u7a0b\u4e2d\u53ea\u4fee\u6539(\u56e0\u4e3a\u53ea\u7b97\u5bf9\u53f3\u533a\u95f4\u7684\u8d21\u732e!!!\u5176\u5185\u90e8\u7684\u8d21\u732e\u4f1a\u5728\u4e0b\u5c42\u9012\u5f52\u4e2d\u627e\u5230)\uff0c\u5728\u53f3\u533a\u95f4\u8fc7\u7a0b\u4e2d\u624d\u67e5\u8be2\uff01\uff01\uff01\n\n\u7136\u540e\u6211\u7684\u4ee3\u7801\u7528\u7684\u662f**\u5de6\u95ed\u53f3\u95ed**\u7684\u533a\u95f4\uff0c\u8fd9\u6837\u66f4\u52a0\u65b9\u4fbf\n\n###\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define mid ((l+r)>>1)\n#define lowbit(x) (x&(-x))\n#define ll long long\nconst int _=200100;\ninline int read()\n{\n\tchar ch='!';int z=1,num=0;\n\twhile(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n\tif(ch=='-')z=-1,ch=getchar();\n\twhile(ch<='9'&&ch>='0')num=(num<<3)+(num<<1)+ch-'0',ch=getchar();\n\treturn z*num;\n}\nint N,K,top,bel[_];\nll ans[_],g[_],c[_],f[_];\nstruct hand\n{\n\tint a,b,c,sz,id;\n\tbool operator < (const hand &A)const\n\t\t{\n\t\t\tif(b!=A.b)return b<A.b;\n\t\t\tif(c!=A.c)return c<A.c;\n\t\t\treturn id<A.id;\n\t\t}\n}t[_],tmp[_],q[_];\nbool cmp(hand A,hand B)\n{\n\tif(A.a!=B.a)return A.a<B.a;\n\tif(A.b!=B.b)return A.b<B.b;\n\tif(A.c!=B.c)return A.c<B.c;\n\treturn A.id<B.id;\n}\nvoid Update(int x,int d)\n{\n\twhile(x<=K)\n\t{\n\t\tc[x]+=d;\n\t\tx+=lowbit(x);\n\t}\n}\nvoid Clear(int x,int d)\n{\n\twhile(x<=K)\n\t{\n\t\tc[x]=d;\n\t\tx+=lowbit(x);\n\t}\n}\nint Query(int x)\n{\n\tint sum=0;\n\twhile(x)\n\t{\n\t\tsum+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn sum;\n}\nvoid CDQ(int l,int r)\n{\n\tif(l==r)return;\n\tCDQ(l,mid);CDQ(mid+1,r);\n\tint p=l,q=mid+1,o=l-1;\n\twhile(p<=mid&&q<=r)\n\t{\n\t\tif(t[p]<t[q])\n\t\t\tUpdate(t[p].c,t[p].sz),tmp[++o]=t[p++];\n\t\telse\n\t\t\tg[t[q].id]+=Query(t[q].c),tmp[++o]=t[q++];\n\t}\n\twhile(p<=mid)tmp[++o]=t[p++];\n\twhile(q<=r)\n\t\tg[t[q].id]+=Query(t[q].c),tmp[++o]=t[q++];\n\tfor(int i=l;i<=r;++i)\n\t\tClear(tmp[i].c,0),t[i]=tmp[i];\n}\nbool pd(int i,int now)\n{\n\tif(!now)return 0;\n\telse return (q[i].a==t[now].a&&q[i].b==t[now].b&&q[i].c==t[now].c);\n}\nint main()\n{\n\tN=read();K=read();\n\tfor(int i=1;i<=N;++i)\n\t\tq[i].a=read(),q[i].b=read(),q[i].c=read(),q[i].sz=1,q[i].id=i;\n\tsort(q+1,q+1+N,cmp);\n\ttop=0;\n\tfor(int i=1;i<=N;++i)\n\t{\n\t\tif(!pd(i,top))\n\t\t\tt[++top]=q[i],t[top].id=top;\n\t\telse t[top].sz++;\n\t\tbel[i]=top;\n\t}\n\tCDQ(1,top);\n\tfor(int i=1;i<=top;++i)g[t[i].id]+=t[i].sz-1;\n\tfor(int i=1;i<=N;++i)f[i]=g[bel[i]];\n\tfor(int i=1;i<=N;++i)ans[f[i]]++;\n\tfor(int i=0;i<N;++i)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1522834099,
        "uid": 47901,
        "name": "\u9f99\u795e\u54c8\u8fea\u65af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    },
    {
        "content": "### \u3010\u4f8b\u9898\u3011\n![](https://cdn.luogu.com.cn/upload/pic/28232.png)\n### \u3010\u7ed3\u9898\u601d\u8def\u3011\n- \u8fd9\u9898\u6709\u5f88\u591a\u89e3\u6cd5\u78b0\u5de7\u6211\u4eec\u662f\u4f5c\u4e3aCDQ\u5206\u6cbb\u7684\u4f8b\u9898\uff0c\u4e8e\u662f\u8fd9\u91cc\u5c31\u53ea\u4ecb\u7ecdCDQ\u5206\u6cbb\u7684\u89e3\u6cd5\n- \u4e00\u9053\u4e09\u7ef4\u504f\u5e8f\uff0c\u6240\u4ee5\u5148\u628a\u6240\u6709\u5c5e\u6027\u8fdb\u884c\u591a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u5148\u6309a\u6392\u5e8f\uff0c\u518d\u6309b\u6392\u5e8f\uff0c\u6700\u540e\u6309c\u6392\u5e8f\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u5728\u6570\u5217\u91cc\u9762\uff0c\u540e\u9762\u7684a\u4f1a\u6bd4\u524d\u9762\u7684a\u8981\u5927\uff08\u76f8\u5f53\u4e8e\u628aa\u79bb\u6563\u5316\uff09\u3002\n- \u63a5\u7740\u5c31\u8fdb\u884cCDQ\u5206\u6cbb\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4l\u5230r\u6765\u8bf4\uff0ca\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u3002\u5728CDQ\u5206\u6cbb\u5b8cl--mid\u548cmid+1--r\u8fd9\u4e24\u4e2a\u533a\u95f4\u540e\uff0c\u628al\u5230r\u8fdb\u884c\u591a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8fd9\u6b21\u5148\u6309b\u6392\u5e8f\uff0c\u518d\u6309c\u6392\u5e8f\uff0c\u6700\u540e\u6309a\u6392\u5e8f\uff0c\u8fd9\u5c31\u518d\u4fdd\u8bc1\u4e86b\u7684\u8981\u6c42\u3002\n- \u7136\u540e\u50cfCDQ\u5206\u6cbb\u9700\u8981\u7684\u90a3\u6837\uff0c\u628a\u5c0f\u4e8e\u7b49\u4e8emid\u7684a\u7684\u8d21\u732e\u7edf\u8ba1\u8d77\u6765\uff0c\u628a1-c\u7684\u533a\u95f4\u5168\u90e8\u52a01\uff0c\u4f18\u5316\u5927\u4e8emid\u7684\u503c\u7684\u7b54\u6848\u3002\u8fd9\u662f\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\uff0c\u672c\u4eba\u4e3a\u4e86\u65b9\u4fbf\u7528\u4e86\u6811\u72b6\u6570\u7ec4\u3002\n- \u8bb0\u5f97\u6700\u540e\u8fd8\u539f\u6811\u72b6\u6570\u7ec4\u3002\u6ce8\u610f\uff0c\u5982\u679c\u76f4\u63a5\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884cmemset\u6709\u53ef\u80fd\u4f1a\u8d85\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u5bf9\u76f4\u63a5\u7684\u64cd\u4f5c\u8fdb\u884c\u53cd\u64cd\u4f5c\uff0c\u628a\u5c0f\u4e8e\u7b49\u4e8emid\u7684a\u4e2d\uff0c1-c\u7684\u533a\u95f4\u5168\u90e8\u52a0-1\u5373\u53ef\u3002\n- \u6700\u540e\u8fdb\u884c\u5224\u91cd\uff08\u4e3a\u4ec0\u4e48\u8981\u5224\u91cd\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u6709\u51e0\u4e2a\u76f8\u540c\u7684\u91cf\uff0c\u6211\u4eecCDQ\u5206\u6cbb\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u7ba1\u5b83\uff0c\u76f4\u63a5\u8ba1\u7b97\u5c31\u4f1a\u628a\u6240\u6709\u7ed3\u679c\u90fd\u8ba1\u7b97\u51fa\u6765\u3002\u8fd9\u662f\u4f60\u5982\u679c\u4e0d\u5224\u91cd\uff0c\u90a3\u4e48\u5c31\u4f1a\u628a\u4e00\u4e2a\u7b54\u6848\u53cd\u590d\u7d2f\u52a0\uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u4f1a\u53d8\u5927\uff09\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\nint lowbit(int x) \n{\n\treturn (x&(-x));\n}\nint n,tree[1000005];\nint ans[1000005],sx[1000005];\nstruct jgt{int a,b,c,num;}sz[1000005];\nvoid add(int x,int c)\n{\n\tfor (int i=x;i<=1000000;i+=lowbit(i))\n\t  tree[i]+=c;\n}\nint sum(int x)\n{\n\tint sum=0;\n\tfor (int i=x;i>=1;i-=lowbit(i))\n\t  sum+=tree[i];\n\t return sum;\t\n}\nbool cmp1(jgt a,jgt b)\n{\n\n\tif (a.a!=b.a) return a.a<b.a;\n\tif (a.b!=b.b) return a.b<b.b;\n\treturn a.c<b.c;\n}\nbool cmp2(jgt a,jgt b)\n{\n\tif (a.b!=b.b) return a.b<b.b;\n\tif (a.c!=b.c) return a.c<b.c;\n\treturn a.a<b.a;\n}\nvoid CDQ(int l,int r)\n{\n\tif (l==r) return;\n\tint mid=(l+r)/2;\n\tCDQ(l,mid);CDQ(mid+1,r);\n\tsort(sz+l,sz+1+r,cmp2);\n\tfor (int i=l;i<=r;i++)\n\t  {\n\t  \tif (sz[i].a<=mid) add(sz[i].c,1);\n\t  \t  else ans[sz[i].num]+=sum(sz[i].c);\n\t  }\n\tfor (int i=l;i<=r;i++)\n\t  if (sz[i].a<=mid) add(sz[i].c,-1);\n\treturn;\n}\nint record[1000005];\nint k;\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor (int i=1;i<=n;i++)\n\t  {\n\t  \tscanf(\"%d%d%d\",&sz[i].a,&sz[i].b,&sz[i].c);\n\t  \tsz[i].num=i;\n\t  }\n\tsort(sz+1,sz+1+n,cmp1);\n\tint gs=0;\n\tfor (int i=1;i<=n;)\n      {\n          int j=i+1;\n          while (j<=n&&sz[i].a==sz[j].a&&sz[i].b==sz[j].b&&sz[i].c==sz[j].c) j++;\n          while (i<j) sx[sz[i++].num]=sz[j-1].num;\n      }\n\tfor (int i=1;i<=n;i++) sz[i].a=i;\n\tCDQ(1,n);\n\tfor (int i=1;i<=n;i++)\n\t  record[ans[sx[sz[i].num]]]++;\n\tfor (int i=0;i<n;i++) printf(\"%d\\n\",record[i]);\n\t\n\treturn 0;\n}\n```\n    ",
        "postTime": 1534117874,
        "uid": 12344,
        "name": "glitxi",
        "ccfLevel": 0,
        "title": "CDQ\u5206\u6cbb-----P3810 \u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09"
    },
    {
        "content": "\n\u7ed9\u51fa\u4e00\u4e2a\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u7b2c\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\uff0c\u7b2c\u4e09\u7ef4treap\u7684\u4ee3\u7801\u3002\n\nP.S.\u6ce8\u610ftreap\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n\n\u9996\u5148\u5bf9a\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\n\n\u7136\u540e\u5c06c\u503c\u6309\u7167\u6811\u72b6\u6570\u7ec4\u7684\u65b9\u6cd5\u63d2\u5165\u5230treap\u4e2d\u3002\n\n\u6811\u72b6\u6570\u7ec4\u4e2d\u662ftreap\u7684\u6839\u8282\u70b9\uff0c\u5171\u6709k\u4e2atreap\u3002\n\n\u6548\u7387\u4e3an\\*log^2(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm> \nusing namespace std;\nconst int maxn=200100;\nint n=0,k=0;\nint sum[maxn]={},root[maxn]={},answer[maxn]={};\nstruct node\n{\n    int l,r;//\u5de6\u5b50\uff0c\u53f3\u5b50\n    int v,w;//\u8282\u70b9\u7684\u503c\uff0c\u76f8\u540cv\u7684\u4e2a\u6570\n    int rand;//\u968f\u673a\u503c\uff0c\u7528\u4e8e\u7ef4\u62a4\u5806\n    int size; \n}t[maxn<<5];\nint size=0;\nstruct data\n{\n    int a,b,c;\n}f[maxn];\nint lowbit(int x)\n{\n    return x&(-x);\n}\nvoid updata(int x)\n{\n    t[x].size=t[t[x].l].size+t[t[x].r].size+t[x].w;\n}\nvoid rturn(int &k)\n{\n    int tmp=t[k].l;\n    t[k].l=t[tmp].r;\n    t[tmp].r=k;\n    t[tmp].size=t[k].size;\n    updata(k);\n    k=tmp;\n}\nvoid lturn(int &k)\n{\n    int tmp=t[k].r;\n    t[k].r=t[tmp].l;\n    t[tmp].l=k;\n    t[tmp].size=t[k].size;\n    updata(k);\n    k=tmp;\n}\nvoid insert(int &k,int x)\n{\n    if(!k)//\u5f53\u524d\u70b9\u4e3a\u7a7a\uff0c\u5206\u914d\u4e00\u4e2a\n    {\n        k=++size;\n        t[k].size=t[k].w=1;\n        t[k].v=x;\n        t[k].rand=rand();\n        return; \n    }\n    t[k].size++;\n    if(t[k].v==x)\n        t[k].w++;\n    else if(x<t[k].v)//\u63d2\u5165\u5230\u5de6\u8fb9\n    {\n        insert(t[k].l,x);\n        if(t[t[k].l].rand<t[k].rand)//\u7ef4\u62a4\u5806\n            rturn(k);\n    }\n    else//\u53f3\n    {\n        insert(t[k].r,x);\n        if(t[t[k].r].rand<t[k].rand)//\u7ef4\u62a4\u5806\n            lturn(k);\n    } \n}\nint rank(int k,int x)//\u67e5\u8be2x\u7684\u6392\u540d\n{\n    if(!k)\n        return 0;\n    if(x==t[k].v)\n        return t[k].w+t[t[k].l].size;\n    else if(x<t[k].v)\n        return rank(t[k].l,x);\n    else\n        return t[k].w+t[t[k].l].size+rank(t[k].r,x);\n}\nbool cmp(data a,data b)\n{\n    if(a.a!=b.a) return a.a<b.a;\n    if(a.b!=b.b) return a.b<b.b;\n    return a.c<b.c;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d%d%d\",&f[i].a,&f[i].b,&f[i].c);\n    sort(f+1,f+n+1,cmp);\n    int ans;\n    for(int i=1;i<=n;i++)\n    {\n        if(f[i].a==f[i+1].a && f[i].b==f[i+1].b && f[i].c==f[i+1].c && i!=n)\n            sum[i+1]=sum[i]+1;\n        else\n        {\n            ans=0;\n            for(int j=f[i].b;j;j-=lowbit(j))\n                ans+=rank(root[j],f[i].c);\n            answer[ans]+=sum[i]+1;\n        }\n        for(int j=f[i].b;j<=k;j+=lowbit(j))\n            insert(root[j],f[i].c);\n    }\n    for(int i=0;i<n;i++)\n        cout<<answer[i]<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1511439380,
        "uid": 38188,
        "name": "\u6570\u5b66\u7cfb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\u3011"
    },
    {
        "content": "> ### \u5f53\u7136\u662f$CDQ$+\u6811\u72b6\u6570\u7ec4\u5566\n\n\n\u7531\u4e8e\u6ca1\u6709\u591a\u5c11$Pascal$\u7684\u4ee3\u7801,\u8fd9\u91cc\u8d34\u4e00\u4e2a$Pascal$\u7684,\u6bd4\u8f83\u5de5\u6574\u7f8e\u89c2....\n\n> #### \u5173\u4e8e\u4e09\u4e2a\u7ef4\u7684\u89e3\u6cd5\n\n\u9996\u5148\u7b2c\u4e00\u7ef4,\u6211\u4eec\u53ef\u4ee5\u6309\u7167$point[1,i]$\u8fdb\u884c\u6392\u5e8f(\u4e5f\u5c31\u662f$a[i]$)\u3002\u8981\u6ce8\u610f,$point[1,i]$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57,$point[2,i],point[3,i]$\u4e3a\u7b2c\u4e8c,\u7b2c\u4e09\u5173\u952e\u5b57\u3002\u8fd9\u65f6\u5019\u8981\u6ce8\u610f,\u5728$Pascal$\u7684\u6392\u5e8f\u4e2d,**\u4e0d\u80fd\u5b9a\u4e49$mid=(l+r)/2$,\u800c\u662f\u8981\u5b9a\u4e49$s[1]=point[1,mid],s[2]=point[2,mid],s[3]=point[3,mid]$**,\u4e0d\u7136\u5c31\u4f1a$GG$\u3002\n\n\u7b2c\u4e8c\u7ef4\u6211\u4eec\u91c7\u7528$CDQ$\u5206\u6cbb,\u8bb2\u4e00\u4e0b\u505a\u6cd5:\n\n$I.$\u9047\u5230l=r\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86,$exit$\u3002\n\n$II.$\u5148\u8fdb\u5165$CDQ(l,mid)$\u3002\u4e00\u5f00\u59cb\u662f$CDQ(1,n)$\u3002\n\n$III.l$\u5230$r$,$element[i]$\u662f\u8fd9\u4e9b\u70b9\u7684$point[2,i]$(\u4e5f\u5c31\u662f\u7b2c\u4e8c\u4e2a\u70b9)\u3002\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a$num[i]:=i$,\u5c31\u662f\u7f16\u53f7\u3002\u968f\u540e\u8fdb\u884c$element,num$\u4e3a\u7b2c\u4e00,\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n$IV.l$\u5230$r$,\u5982\u679c$i$\u7684\u7f16\u53f7\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u8bdd,\u6211\u4eec\u5c31\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u7edf\u8ba1,\u7b49\u4e00\u4f1a\u8bb2\u7b2c\u4e09\u7ef4\u7684\u65f6\u5019\u4f1a\u5c06\u5982\u4f55\u7edf\u8ba1\u3002\u5426\u5219\u5c31\u8ba1\u7b97\u5171\u4eab,\u7b49\u4e00\u4f1a\u4e5f\u4f1a\u8bb2\u3002\n\n$V.$\u8fd8\u539f\u6811\u72b6\u6570\u7ec4,\u7136\u540e\u8fdb\u5165$CDQ(mid+1,r)$\u3002\n\n\u7b2c\u4e09\u7ef4\u5ea6\u4e3a\u4ec0\u4e48\u8981\u7528\u6811\u72b6\u6570\u7ec4?\u6211\u89c9\u5f97\u6743\u503c\u7ebf\u6bb5\u6811\u6bd4\u8f83\u597d\u7406\u89e3\u3002\u6211\u4eec\u6c42\u9006\u5e8f\u5bf9\u7684\u65f6\u5019,\u4e5f\u5c31\u662f\u770b\u5b83$1$~$i-1$\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u5427,\u6811\u72b6\u6570\u7ec4\u5c31\u662f\u7528\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7684\u3002\u90a3\u4e48\u63d2\u5165\u4e5f\u5c31\u76f8\u5f53\u4e8e\u662f\u6743\u503c,\u67e5\u8be2\u5c31\u662f\u67e5\u8be2\u4e0a\u8ff0\u6240\u8bf4\u3002\u65e2\u7136\u6811\u72b6\u6570\u7ec4\u597d\u5199,\u90a3\u4e48\u5c31\u8fd9\u6837\u5b50\u5199\u54af\u3002\n\n> #### $Code$\n\n```pascal\n// luogu-judger-enable-o2\nvar\n    n,k,i:longint;\n    point:array[1..3,-1..210000] of longint; //\u5750\u6807\u70b9a,b,c\n    num,element:array[-1..210000] of longint; //\u7f16\u53f7\u548c\u7b2c\u4e8c\u5750\u6807,\u8be6\u89c1\u4e0b\u65b9\n    value,ans,tree:array[-1..210000] of longint; //\u7edf\u8ba1\u7b54\u6848\u4e0e\u6811\u72b6\u6570\u7ec4\n\nprocedure Sort_1(l,r:longint); //\u4e00\u5f00\u59cb\u7684\u6392\u5e8f,\u6ce8\u610f\u4e0a\u8ff0\u6240\u8bf4\nvar\n    i,j,t:longint;\n    s:array[1..3] of longint;\nbegin\n    i:=l; j:=r; s[1]:=point[1,(l+r) div 2]; s[2]:=point[2,(l+r) div 2]; s[3]:=point[3,(l+r) div 2];\n    repeat\n        while (point[1,i]<s[1])or((point[1,i]=s[1])and(point[2,i]<s[2]))or((point[1,i]=s[1])and(point[2,i]=s[2])and(point[3,i]<s[3])) do\n        \tinc(i);\n        while (point[1,j]>s[1])or((point[1,j]=s[1])and(point[2,j]>s[2]))or((point[1,j]=s[1])and(point[2,j]=s[2])and(point[3,j]>s[3])) do\n        \tdec(j);\n        if i<=j then\n        begin\n        \tt:=point[1,i]; point[1,i]:=point[1,j]; point[1,j]:=t;\n        \tt:=point[2,i]; point[2,i]:=point[2,j]; point[2,j]:=t;\n        \tt:=point[3,i]; point[3,i]:=point[3,j]; point[3,j]:=t;\n            inc(i); dec(j);\n        end;\n    until i>j;\n    if i<r then Sort_1(i,r);\n    if j>l then Sort_1(l,j);\nend;\n\nprocedure Sort_2(l,r:longint); //\u4e0a\u8ff0\u7684\u7b2c\u4e8c\u4e2a\u6392\u5e8f,\u4e5f\u5c31\u662f\u4ee5\u7b2c\u4e8c\u5750\u6807,\u7f16\u53f7\u4e3a\u7b2c\u4e00,\u7b2c\u4e8c\u5173\u952e\u5b57\u7684\u6392\u5e8f\nvar\n    i,j,t:longint;\n    s:array[1..2] of longint;\nbegin\n    i:=l; j:=r; s[1]:=element[(l+r) div 2]; s[2]:=num[(l+r) div 2];\n    repeat\n        while (element[i]<s[1])or((element[i]=s[1])and(num[i]<s[2])) do inc(i);\n        while (element[j]>s[1])or((element[j]=s[1])and(num[j]>s[2])) do dec(j);\n        if i<=j then\n        begin\n            t:=element[i]; element[i]:=element[j]; element[j]:=t;\n            t:=num[i]; num[i]:=num[j]; num[j]:=t;\n            inc(i); dec(j);\n        end;\n    until i>j;\n    if i<r then Sort_2(i,r);\n    if j>l then Sort_2(l,j);\nend;\n\nfunction lowbit(num:longint):longint; begin exit(num and -num); end; //\u4ee5\u4e0b\u662f\u6811\u72b6\u6570\u7ec4\u5e38\u8bc6\n\nprocedure Insert(x,add:longint);\nbegin\n    while x<=k do\n    begin\n        inc(tree[x],add);\n        inc(x,lowbit(x));\n    end;\nend;\n\nfunction Query(x:longint):longint;\nbegin\n    Query:=0;\n    while x>0 do\n    begin\n        inc(Query,tree[x]);\n        dec(x,lowbit(x));\n    end;\nend;\n\nprocedure CDQ(l,r:longint); //cdq\u5206\u6cbb,l,r\u4e3a\u5de6\u53f3\u4e24\u8fb9\u754c\nvar\n    mid,i,j:longint;\nbegin\n    if l=r then exit; //\u5230\u7ec8\u70b9    \n    mid:=(l+r) div 2;\n    CDQ(l,mid); //\u5148\u5de6\u8fb9\n\n    for i:=l to r do \n    begin\n        element[i]:=point[2,i]; //\u8bb0\u5f55\u7b2c\u4e8c\u4e2a\u5750\u6807\n        num[i]:=i; //\u8bb0\u5f55\u7f16\u53f7\n    end;\n    Sort_2(l,r); //\u6392\u5e8f\n\n    for i:=l to r do\n        if num[i]<=mid then //\u7f16\u53f7\u5728\u5de6\u8fb9,\u7b97\u5171\u4eab\n            Insert(point[3,num[i]],1) //\u76f4\u63a5\u5f80\u8fd9\u4e2a\u5730\u65b9\u63d2\u5165,\u6ce8\u610f\u662f\u7b2c\u4e09\u5750\u6807\u7684\u7f16\u53f7\n        else\n            inc(value[num[i]],Query(point[3,num[i]])); //\u8ba1\u7b971~\u7b2c\u4e09\u5750\u6807\u7684\u5171\u4eab,\u6ce8\u610fvalue\u91cc\u9762\u7684\u662f\u7f16\u53f7\n    for i:=l to r do //\u8fd8\u539f\u6811\u72b6\u6570\u7ec4\n        if num[i]<=mid then\n            Insert(point[3,num[i]],-1);\n    CDQ(mid+1,r); //\u8fdb\u5165\u53f3\u8fb9\nend;\n\nbegin\n    read(n,k);\n    for i:=1 to n do\n        read(point[1,i],point[2,i],point[3,i]);\n    Sort_1(1,n);\n    CDQ(1,n);\n\n    for i:=n-1 downto 1 do //\u5224\u91cd\u590d\n        if (point[1,i]=point[1,i+1])and(point[2,i]=point[2,i+1])and(point[3,i]=point[3,i+1]) then\n            value[i]:=value[i+1];\n    for i:=1 to n do //\u8bb0\u5f55\u7b54\u6848\n        inc(ans[value[i]]);\n    for i:=0 to n-1 do\n        writeln(ans[i]);\nend.\n```\n\n\u4ee5\u4e0b\u662f$8.29$\u65e5\u5bf9 $CDQ$ \u7684\u8865\u5145:\n\n\u5176\u5b9e\u90fd\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u6765\u5b8c\u6210\u6b64\u7c7b\u95ee\u9898,\u8fd9\u91cc\u6765\u8bb2\u4e00\u4e0b $CDQ$ \u5206\u6cbb\u3002 $CDQ$ \u5206\u6cbb\u548c\u5176\u5b83\u6570\u636e\u7ed3\u6784\u5dee\u4e0d\u591a,\u51e0\u4e4e\u90fd\u662f\u6bcf\u591a\u4e00\u7ef4,\u65f6\u95f4\u590d\u6742\u5ea6\u591a\u4e2a $log\\ n$\u3002\u90a3\u4e48\u4e8c\u7ef4\u504f\u5e8f\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4,\u8fd9\u91cc\u4e0d\u591a\u8bf4\u3002\n\n$CDQ$ \u5927\u4f53\u53ef\u4ee5\u8ba4\u4e3a\u662f \u5148\u7b97\u51fa $l$~$mid$ \u7684\u8d21\u732e,\u7136\u540e\u7b97\u51fa $l$\u5bf9$r$ \u7684\u8d21\u732e,\u6700\u540e\u518d\u7b97 $mid$~$r$ \u7684\u8d21\u732e\u3002\u5bf9\u4e8e $l$~$mid$ \u548c $mid$~$r$ \u7684\u8d21\u732e,\u53ef\u4ee5\u76f4\u63a5 $CDQ(l,mid),CDQ(r,mid)$\u3002\u4e3a\u4ec0\u4e48\u5462?\u56e0\u4e3a\u5206\u6cbb\u4ee5\u540e\u5b83\u4eec\u4f1a\u5bf9\u81ea\u5df1\u7684 $l$~$r$ \u7b97\u81ea\u5df1\u7684\u8d21\u732e,\u6240\u4ee5\u8fd9\u6837\u5b50\u6728\u6709\u95ee\u9898\u3002\u73b0\u5728\u8ba8\u8bba\u7684\u91cd\u70b9\u5c31\u662f\u5982\u4f55\u6c42\u51fa $l$~$r$ \u7684\u8d21\u732e\u3002\n\n\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898: \u504f\u5e8f\u95ee\u9898\u7684\u7b2c\u4e00\u7ef4,\u6211\u4eec\u662f\u76f4\u63a5\u6392\u5e8f\u7684\u3002\u6ce8\u610f\u8981\u6309\u7b2c $1$ \u4e2a\u6570\u7ec4\u4e3a\u7b2c $1$ \u5173\u952e\u5b57,\u7b2c $2$ \u4e2a\u4e3a\u7b2c $2$ \u4e2a\u5173\u952e\u5b57 $.....$\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6574\u4e2a\u6570\u7ec4 $a[i]\\leq a[j]\\ (i\\leq j)$\u3002\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u533a\u95f4 $l,r$ ,\u6211\u4eec\u5148 $CDQ(l,mid)$\u3002\u968f\u540e\u6211\u4eec\u7ed9 $l,r$ \u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c\u7f16\u53f7, $num[i]:=i$(\u8fd9\u4e2a\u65f6\u5019 $num$ \u4e3a\u7f16\u53f7)\u3002\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u6570\u7ec4 $element[l$~$r]$ \u4e3a $l$~$r$ \u7684 $b[i]$,\u7136\u540e\u8fdb\u884c $Sort(l,r)$\u3002\u5176\u4e2d $element$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57, $num$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u6700\u540e\u5faa\u73af\u626b\u4e00\u904d,\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u540e\u5df2\u7ecf\u6ee1\u8db3 $b[i]\\leq b[j]\\ (i\\leq j)$\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u9006\u5e8f\u5bf9\u8fd9\u6837\u5b50,\u5bf9\u6743\u503c\u7ebf\u6bb5\u6811(\u6811\u72b6\u6570\u7ec4)\u63d2\u5165\u7b2c\u4e09\u7ef4 $c[i]$\u3002\u5982\u679c $num[i]\\leq mid$ \u7684\u8bdd,\u6211\u4eec\u5c31\u63d2\u5165,\u5426\u5219\u7b97\u8d21\u732e\u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5b50\u5462?\u56e0\u4e3a\u73b0\u5728\u6ee1\u8db3\u7684\u662f $b[i]\\leq b[j]\\ (i\\leq j)$ ,\u800c $num[i]\\leq mid$ \u53ef\u4ee5\u6ee1\u8db3 $a[l$~$mid]\\leq a[mid+1$~$r]$,\u6211\u4eec\u53ea\u9700\u8981\u5bf9 $c$ \u6570\u7ec4\u8fdb\u884c\u9006\u5e8f\u5bf9\u4e00\u6837\u7684\u64cd\u4f5c\u3002\n\n\n",
        "postTime": 1535291074,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3810 \u3010\u3010\u6a21\u677f\u3011\u4e09\u7ef4\u504f\u5e8f\uff08\u964c\u4e0a\u82b1\u5f00\uff09\u3011"
    }
]