[
    {
        "content": "### \u66f4\u68d2\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u5c3d\u5728\u672c\u9898\u89e3\u4e2d\uff01\n\n\u5206\u6790\u4e00\u6ce2\u9898\u610f\uff0c\u663e\u7136\u7684\u533a\u95f4\u64cd\u4f5c\uff0c\u800c\u4e14\u4fe1\u606f\u90fd\u662f\u7ebf\u6bb5\u6811\u80fd\u7ef4\u62a4\u7684\u3002\n\n\u56e0\u4e3a\u6709\u533a\u95f4\u53d6\u53cd\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4ec5\u8981\u8bb0\u5f55$1$\u7684\u4fe1\u606f\uff0c$0$\u7684\u4fe1\u606f\u4e5f\u8981\u8bb0\u5f55\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4$8$\u4e2a\u4fe1\u606f\uff1a\n\n$1/0$\u7684\u4e2a\u6570\uff0c\u5de6/\u53f3\u8fb9\u8d77$1/0$\u7684\u6700\u957f\u957f\u5ea6\uff0c\u6574\u6bb5\u533a\u95f4\u4e2d$1/0$\u7684\u8fde\u7eed\u6700\u957f\u957f\u5ea6\u3002\n\n\u53ea\u6709\u7ef4\u62a4\u81f3\u5c11$8$\u4e2a\u4fe1\u606f\u624d\u80fd\u4fdd\u8bc1\u80fd\u591f\u5408\u5e76\u533a\u95f4\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002\n\n\u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u590d\u6742\u4fe1\u606f\u662f\u66f4\u597d\u7684\u65b9\u6cd5\uff1a\n\n```cpp\nstruct d{\n\t// \u5206\u522b\u8868\u793a\u4e0a\u8ff0\u76848\u4e2a\u4fe1\u606f\n    // w: 1(white) , b: 0(black)\n    // l: \u5de6\u8fb9\u8d77 , r: \u53f3\u8fb9\u8d77\n    // mw, mb \u4ee3\u8868\u6574\u6bb5\u533a\u95f4\u4e2d1/0\u7684\u6700\u957f\u957f\u5ea6\n\tint w,b,lw,lb,rw,rb,mw,mb;\n    //\u6784\u9020\u51fd\u6570\uff0c\u65b9\u4fbf\u8d4b\u503c\n\td(int w=0,int b=0,int lw=0,int lb=0,int rw=0,int rb=0,int mw=0,int mb=0):\n    w(w),b(b),lw(lw),lb(lb),rw(rw),rb(rb),mw(mw),mb(mb){}\n};\n```\n\n\u800c\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\uff0c\u9700\u8981\u8003\u8651\u5f88\u591a\u4e1c\u897f\uff1a\n\n$1/0$\u7684\u4e2a\u6570\u76f4\u63a5\u76f8\u52a0\uff0c\u5de6\u53f3\u8d77\u7684$1/0$\u8981\u8003\u8651\u5de6/\u53f3\u7684\u4e00\u6574\u4e2a\u533a\u95f4\u662f\u5426\u662f\u540c\u4e00\u4e2a\u6570\u3002\n\n\u6574\u6bb5\u533a\u95f4\u4e2d\u7684$1/0$\u6700\u957f\u957f\u5ea6 = \u5de6,\u53f3\u533a\u95f4\u7684$1/0$\u6700\u957f\u957f\u5ea6\u548c\u5de6\u8fb9\u7684\u53f3\u7aef,\u53f3\u8fb9\u7684\u5de6\u7aef\u7684$1/0$\u6700\u957f\u957f\u5ea6\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\n\n\u7531\u6b64\u5199\u51fa\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u51fd\u6570\uff1a\n\n```cpp\ninline d hb(d i,d j){\n\treturn d(\n\ti.w+j.w, i.b+j.b,\n\t(i.b?i.lw:i.w+j.lw), (i.w?i.lb:i.b+j.lb),\n\t(j.b?j.rw:j.w+i.rw), (j.w?j.rb:j.b+i.rb),\n\tmax(max(i.mw,j.mw),i.rw+j.lw),\n\tmax(max(i.mb,j.mb),i.rb+j.lb));\n}\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u5728\u5efa\u6811\uff0c\u4fee\u6539\u548c\u67e5\u8be2\u7684\u65f6\u5019\u90fd\u4f1a\u7528\u5230\uff0c\u6211\u5199\u590d\u6742\u7684\u7ebf\u6bb5\u6811\u90fd\u4f1a\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u3002\n\n\u7136\u540e\u662f\u5bf9\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u4fee\u6539\uff0c\u8981\u6ce8\u610f$3$\u79cd\u4fee\u6539\u64cd\u4f5c\u7684\u4f18\u5148\u987a\u5e8f\uff1a\u5148\u8d4b\u503c\u540e\u53d6\u53cd\uff1a\n\n```cpp\ninline void P(int i,int typ){\n\t// tg1(\u6807\u8bb01)\u662f\u533a\u95f4\u8d4b\u503c,\u6ca1\u6709\u6807\u8bb0\u65f6\u4e3a-1,\u6709\u6807\u8bb0\u65f6\u4e3a0\u62161\n    // tg2(\u6807\u8bb02)\u662f\u533a\u95f4\u53d6\u53cd,\u6ca1\u6709\u6807\u8bb0\u65f6\u4e3a 0,\u6709\u6807\u8bb0\u65f6\u4e3a1\n    // len\u8868\u793a\u4e00\u4e2a\u533a\u95f4\u7684\u957f\u5ea6,\u5728\u5efa\u6811\u65f6\u5904\u7406\n\td&t=dat[i];\n    // \u533a\u95f4\u8d4b\u503c\u4e3a 0\n\tif(typ==0) tg2[i]= 0, tg1[i]=0, t=d(0,len[i],0,len[i],0,len[i],0,len[i]);\n    // \u533a\u95f4\u8d4b\u503c\u4e3a 1\n\tif(typ==1) tg2[i]= 0, tg1[i]=1, t=d(len[i],0,len[i],0,len[i],0,len[i],0);\n    // \u533a\u95f4\u53d6\u53cd\n\tif(typ==2) tg2[i]^=1, swap(t.w,t.b), swap(t.lw,t.lb), swap(t.rw,t.rb), swap(t.mw,t.mb);\n}\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u4fee\u6539\u548c\u6807\u8bb0\u4e0b\u4f20(pushdown)\u65f6\u7528\u5230\u3002\n\n\u63a5\u4e0b\u6765\u662f\u6807\u8bb0\u4e0b\u4f20(pushdown)\uff0c\u6ce8\u610f\u987a\u5e8f\uff1a\n\n```cpp\ninline void pd(int i){\n\t// \u5bf9\u4e24\u4e2a\u5b50\u533a\u95f4\u4fee\u6539\n\tif(~tg1[i]) P(i<<1,tg1[i]), P(i<<1|1,tg1[i]);\n\tif(tg2[i]) P(i<<1,2), P(i<<1|1,2);\n    // \u628a\u6807\u8bb0\u6e05\u7a7a\n\ttg1[i]=-1, tg2[i]=0;\n}\n```\n\n\u6700\u540e\u662f\u5efa\u6811\uff0c\u4fee\u6539\u548c\u67e5\u8be2\u51fd\u6570\uff0c\u6709\u4e86\u4e0a\u9762\u7684\uff0c\u8fd9\u5c31\u5f88\u7b80\u5355\u4e86\uff1a\n\n```cpp\nvoid build(int i,int l,int r){\n\tlen[i]=r-l+1; tg1[i]=-1;\n\tif(l==r) {int t=a[l]; dat[i]=d(t,t^1,t,t^1,t,t^1,t,t^1); return;}\n\tbuild(i<<1,l,l+r>>1);\n\tbuild(i<<1|1,(l+r>>1)+1,r);\n\tdat[i]=hb(dat[i<<1],dat[i<<1|1]);\n}\nvoid Mdf(int i,int l,int r,int a,int b,int t){\n\t// \u5982\u679c\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6 \u6216\u8005 \u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u4fee\u6539\u533a\u95f4\u5185\u7684\u60c5\u51b5\n\tif(b<l||r<a) return; if(a<=l&&r<=b) {P(i,t); return;}\n\tpd(i); Mdf(i<<1,l,l+r>>1,a,b,t), Mdf(i<<1|1,(l+r>>1)+1,r,a,b,t);\n\tdat[i]=hb(dat[i<<1],dat[i<<1|1]);\n}\nd Qur(int i,int l,int r,int a,int b){\n\t// \u5982\u679c\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6 \u6216\u8005 \u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\u7684\u60c5\u51b5\n\tif(b<l||r<a) return d(); if(a<=l&&r<=b) return dat[i];\n\tpd(i); return hb(Qur(i<<1,l,l+r>>1,a,b),Qur(i<<1|1,(l+r>>1)+1,r,a,b));\n}\n```\n\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,q,a[100001];\nstruct d{\n\tint w,b,lw,lb,rw,rb,mw,mb;\n\td(int w=0,int b=0,int lw=0,int lb=0,int rw=0,int rb=0,int mw=0,int mb=0):\n    w(w),b(b),lw(lw),lb(lb),rw(rw),rb(rb),mw(mw),mb(mb){}\n};\ninline d hb(d i,d j){\n\treturn d(\n\ti.w+j.w, i.b+j.b,\n\t(i.b?i.lw:i.w+j.lw), (i.w?i.lb:i.b+j.lb),\n\t(j.b?j.rw:j.w+i.rw), (j.w?j.rb:j.b+i.rb),\n\tmax(max(i.mw,j.mw),i.rw+j.lw),\n\tmax(max(i.mb,j.mb),i.rb+j.lb));\n}\nd dat[262144]; int len[262144],tg1[262144],tg2[262144];\ninline void P(int i,int typ){\n\td&t=dat[i];\n\tif(typ==0) tg2[i]= 0, tg1[i]=0, t=d(0,len[i],0,len[i],0,len[i],0,len[i]);\n\tif(typ==1) tg2[i]= 0, tg1[i]=1, t=d(len[i],0,len[i],0,len[i],0,len[i],0);\n\tif(typ==2) tg2[i]^=1, swap(t.w,t.b), swap(t.lw,t.lb), swap(t.rw,t.rb), swap(t.mw,t.mb);\n}\ninline void pd(int i){\n\tif(~tg1[i]) P(i<<1,tg1[i]), P(i<<1|1,tg1[i]);\n\tif(tg2[i]) P(i<<1,2), P(i<<1|1,2);\n\ttg1[i]=-1, tg2[i]=0;\n}\nvoid build(int i,int l,int r){\n\tlen[i]=r-l+1; tg1[i]=-1;\n\tif(l==r) {int t=a[l]; dat[i]=d(t,t^1,t,t^1,t,t^1,t,t^1); return;}\n\tbuild(i<<1,l,l+r>>1);\n\tbuild(i<<1|1,(l+r>>1)+1,r);\n\tdat[i]=hb(dat[i<<1],dat[i<<1|1]);\n}\nvoid Mdf(int i,int l,int r,int a,int b,int t){\n\tif(b<l||r<a) return; if(a<=l&&r<=b) {P(i,t); return;}\n\tpd(i); Mdf(i<<1,l,l+r>>1,a,b,t), Mdf(i<<1|1,(l+r>>1)+1,r,a,b,t);\n\tdat[i]=hb(dat[i<<1],dat[i<<1|1]);\n}\nd Qur(int i,int l,int r,int a,int b){\n\tif(b<l||r<a) return d(); if(a<=l&&r<=b) return dat[i];\n\tpd(i); return hb(Qur(i<<1,l,l+r>>1,a,b),Qur(i<<1|1,(l+r>>1)+1,r,a,b));\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",a+i);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=q;++i){\n\t\tint opt,l,r;\n\t\tscanf(\"%d%d%d\",&opt,&l,&r); ++l, ++r;\n\t\tif(opt<3) Mdf(1,1,n,l,r,opt);\n\t\telse {d t=Qur(1,1,n,l,r); printf(\"%d\\n\",opt==3?t.w:t.mw);}\n\t}\n\treturn 0;\n}\n```\n\n\u4ee5\u4e0a\u5c31\u662f\u6211\u6253\u8f83\u590d\u6742\u7ebf\u6bb5\u6811\u64cd\u4f5c\u65f6\u7684\u6a21\u677f\uff0c\u5927\u5bb6\u53ef\u4ee5\u501f\u9274\u4e00\u4e0b\uff0c\u5f62\u6210\u81ea\u5df1\u7684\u98ce\u683c\u3002",
        "postTime": 1527264480,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u5f88\u4e45\u6ca1\u53d1\u9898\u89e3\u4e86\uff0c \u8fd9\u9898\u96be\u8c03\uff0c \u770b\u770b\u8fd9\u7bc7\u9898\u89e3\u80fd\u4e0d\u80fd\u5e2e\u5230\u5927\u5bb6\n\n$debug$ \u4e86\u4e00\u4e2a\u4e0b\u5348\uff0c \u53d1\u70b9\u4e1c\u897f\u8bf4\u70b9\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\n[\u4ece\u535a\u5ba2\u642c\u8fc7\u6765\uff0c \u4e0d\u77e5\u9053\u683c\u5f0f\u4f1a\u4e0d\u4f1a\u70b8\u3002\u3002](https://www.cnblogs.com/Tony-Double-Sky/p/9823463.html)\n\n\u9996\u5148\u8bf4\u660e\uff0c \u7ebf\u6bb5\u6811\u8fd9\u79cd\u4e1c\u897f\uff0c \u6bcf\u4e2a\u4eba\u5199\u6cd5\u5dee\u5f02\u8f83\u5927\uff0c **\u9898\u89e3\u561b\u4e3b\u8981\u662f\u770b\u601d\u8def\u662f\u5426\u6b63\u786e\u4ee5\u53ca\u7ec6\u8282\u662f\u5426\u5904\u7406\u5f97\u5f53**\n\n\u638c\u63e1\u8fd9\u9898\uff0c \u5c06\u4f1a\u5bf9\u7ebf\u6bb5\u6811\u6709\u4e00\u4e2a\u597d\u7684\u9886\u609f\n\n\uff08\u524d\u6392\u6c42\u70b9\u8d5e~~\u786c\u5e01\u6536\u85cf\u7d20\u8d28\u4e09\u8fde XD~~\uff09\n\n# \u524d\u6587\n\n\u8fd9\u7bc7\u9898\u89e3\u5c06\u7740\u91cd\u5bf9\u4ee5\u4e0b\u95ee\u9898\u505a\u4e00\u4e2a\uff08\u5c3d\u91cf\u8be6\u7ec6\uff09\u7684\u8bf4\u660e\uff0c \u4e0d\u61c2\u53ef\u4ee5\u79c1\u4fe1\u6216QQ\uff0c \u6709\u7a7a\u53ef\u4ee5\u89e3\u7b54\n\n1. \u5927\u4f53\u601d\u8def\u53ca\u7ef4\u62a4\u5143\u7d20\n1. \u4e0a\u63a8\uff08\u8fd9\u4e24\u4e2a\u5927\u5bb6\u90fd\u6709\u8bb2\uff0c \u770b\u4e0d\u61c2\u5c31\u90fd\u770b\u770b\u6ca1\u51c6\u5c31\u4f1a\u4e86\uff09\n1. \u7740\u91cd\u8bb2 **$pushdown$ \u4e0b\u653e\u61d2\u6807\u8bb0\u64cd\u4f5c \u7684\u7ec6\u8282\u5904\u7406\u95ee\u9898**\n\n\u5f88\u591a\u5f97 $10$ \u5206\u7684\u4eba\u90fd\u662f\u61d2\u6807\u8bb0\u4e0b\u653e\u7ec6\u8282\u5904\u7406\u4e0d\u5f97\u5f53\n\n\u8bda\u7136\uff0c \u8fd8\u8bf7\u89c2\u6469\u8fd9\u7bc7\u9898\u89e3\u4e4b\u524d**\u81ea\u884c\u4ed4\u7ec6\u601d\u8003**\uff0c \u80fd\u5f97\u5230\u5f88\u591a\n\n\u53e6\u5916\uff0c \u6b64\u9898\u7801\u91cf\u8f83\u5927\u3002 \u5982\u8fd8\u6709\u9519\u8bef\u8bf7\u544a\u77e5\u3002 \u8c22\u8c22\n\n\u90a3\u4e48\u5f00\u59cb\u5427\n\n# [\u6b63\u6587](https://www.cnblogs.com/Tony-Double-Sky/p/9823463.html)\n\n\u5bf9\u81ea\u5df1 & $RNG$ \uff1a \u9a84\u5175\u5fc5\u8d25\n$lpl$\u52a0\u6cb9\uff01\n\n# P2572 [SCOI2010]\u5e8f\u5217\u64cd\u4f5c\n\u9898\u76ee\u63cf\u8ff0\nlxhgww\u6700\u8fd1\u6536\u5230\u4e86\u4e00\u4e2a01\u5e8f\u5217\uff0c\u5e8f\u5217\u91cc\u9762\u5305\u542b\u4e86n\u4e2a\u6570\uff0c\u8fd9\u4e9b\u6570\u8981\u4e48\u662f0\uff0c\u8981\u4e48\u662f1\uff0c\u73b0\u5728\u5bf9\u4e8e\u8fd9\u4e2a\u5e8f\u5217\u6709\u4e94\u79cd\u53d8\u6362\u64cd\u4f5c\u548c\u8be2\u95ee\u64cd\u4f5c\uff1a\n\n0 a b \u628a[a, b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u62100\n\n1 a b \u628a[a, b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u62101\n\n2 a b \u628a[a,b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u90e8\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u6240\u6709\u76840\u53d8\u62101\uff0c\u628a\u6240\u6709\u76841\u53d8\u62100\n\n3 a b \u8be2\u95ee[a, b]\u533a\u95f4\u5185\u603b\u5171\u6709\u591a\u5c11\u4e2a1\n\n4 a b \u8be2\u95ee[a, b]\u533a\u95f4\u5185\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76841\n\n\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u8be2\u95ee\u64cd\u4f5c\uff0clxhgww\u90fd\u9700\u8981\u7ed9\u51fa\u56de\u7b54\uff0c\u806a\u660e\u7684\u7a0b\u5e8f\u5458\u4eec\uff0c\u4f60\u4eec\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f\n\n---\n\n**\u9519\u8bef\u65e5\u5fd7\uff1a \u5185\u5bb9\u8f83\u591a\u4e14\u91cd\u8981\uff0c \u5c06\u5199\u5728\u4e0b\u65b9\u52a0\u7c97**\n\n---\n\n# Solution\n\u7ebf\u6bb5\u6811\uff0c \u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n1. $sum$ \u533a\u95f4 $1$ \u7684\u4e2a\u6570\n2. $max[0/1]$ \u533a\u95f4\u5185 $0/1$ \u6700\u957f\u8fde\u7eed\u5b50\u6bb5\n3. $lmax[0/1]$ \u5305\u542b\u533a\u95f4\u5de6\u7aef\u70b9\u6700\u957f $0/1$ \u5b50\u6bb5\n4. $rmax[0/1]$ \u5305\u542b\u533a\u95f4\u53f3\u7aef\u70b9\u6700\u957f $0/1$ \u5b50\u6bb5\n\n\u9274\u4e8e\u6709\u533a\u95f4\u64cd\u4f5c\uff0c \u8fd9\u91cc\u8fd8\u9700\u8981\u4e24\u4e2a\u6807\u8bb0\uff1a\n5. $lazy = {-1, 0, 1}$  \u4e3a $-1$ \u8868\u793a\u65e0\u72b6\u6001\uff0c \u4e3a $0/1$ \u8868\u793a\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u4e3a $0/1$\n6. $rev = {0, 1}$ \u533a\u95f4\u662f\u5426\u7ffb\u8f6c\n---\n\n\u9700\u8981\u7ef4\u62a4\u7684\u5143\u7d20\u8f83\u591a\uff0c \u5148\u8bb2 $pushup$\n\u533a\u95f4\u548c\u76f4\u63a5\u76f8\u52a0\u5373\u53ef\n\u5305\u542b\u5de6\u7aef\u70b9\u7684\u8fde\u7eed\u5b50\u6bb5\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u76f4\u63a5\u7ee7\u627f\u5de6\u533a\u95f4\u7684 $lmax$\n2. \u5f53\u5de6\u533a\u95f4\u5168\u6ee1 / \u5168\u7a7a\u65f6\uff0c \u5de6\u7aef\u70b9\u53ef\u4ee5\u8de8\u8d8a\uff0c \u52a0\u4e0a\u53f3\u533a\u95f4\u7684\u90e8\u5206\n\n\u53f3\u533a\u95f4\u66f4\u65b0\u540c\u7406\n\n\u5bf9\u4e8e\u533a\u95f4\u6700\u957f\u8fde\u7eed\u5b50\u6bb5\uff0c \u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\n1.  \u76f4\u63a5\u7ee7\u627f\u5de6\u533a\u95f4\u7684\u8f83\u5927\u503c\n2. \u76f4\u63a5\u7ee7\u627f\u53f3\u533a\u95f4\u7684\u8f83\u5927\u503c\n3. \u5de6\u533a\u95f4\u7684\u542b\u53f3\u7aef\u70b9\u6700\u957f\u5b50\u6bb5 + \u53f3\u533a\u95f4\u542b\u5de6\u7aef\u70b9\u6700\u957f\u5b50\u6bb5\uff0c \u5373\u6700\u957f\u90e8\u5206\u8de8\u8d8a\u533a\u95f4\u5206\u5272\u7ebf\n\n\u4ee5\u4e0a\u9700\u8981\u5206 $0/1$ \u8ba8\u8bba\uff0c \u7a0b\u5e8f\u4e2d\u76f4\u63a5\u4e24\u5c42\u5faa\u73af\u641e\u5b9a\n\n---\n\n**\u7136\u540e\u5230\u4e86\u96be\u70b9 $pushdown$**\n\n**~~\u6211\u4e00\u4e2a\u9700\u8981\u51b2\u7701\u961f\u7684\u9009\u624b\u7adf\u7136\u76f4\u5230\u73b0\u5728\u624d\u6ce8\u610f\u5230\u8fd9\u70b9\u5f88\u60e8\u554a~~**\n\n\u5728\u7ebf\u6bb5\u6811 **$pushdown$** \u64cd\u4f5c\u4e2d\uff0c \u6211\u4eec\u9700\u8981\u660e\u786e\u4e24\u4ef6\u4e8b\uff1a\n\n1. \u6807\u8bb0\u7684\u4f18\u5148\u7ea7\n\n**2. \u4e0b\u653e\u67d0\u4e00\u6807\u8bb0\u662f\u5426\u4f1a\u5bf9\u5b50\u8282\u70b9\u7684\u5176\u4ed6\u7c7b\u578b\u6807\u8bb0\u6709\u6240\u5f71\u54cd**\n\n\u8fd9\u91cc\u91cd\u70b9\u8ba8\u8bba\u7b2c\u4e8c\u70b9\uff08\u7b2c\u4e00\u70b9\u533a\u95f4\u5168\u4f53\u8d4b\u503c\u4f18\u5148\u7ea7\u80af\u5b9a\u9ad8\u4e8e\u7ffb\u8f6c\uff0c \u6240\u4ee5\u4f18\u5148\u62c6\u533a\u95f4\u8d4b\u503c\u6807\u8bb0\uff0c \u62c6\u6807\u8bb0\u65f6\u9700\u8981\u5c06\u7ffb\u8f6c\u6807\u8bb0\u6e05\u7a7a\uff09\n\n\u5728\u62c6\u89e3\u4e00\u4e2a\u6807\u8bb0\u65f6\uff0c \u6211\u4eec\u4e0d\u4ec5\u9700\u8981\u660e\u786e\u5c06\u6b64\u6807\u8bb0\u4e0b\u653e\u5230\u5b50\u8282\u70b9\uff0c **\u540c\u7c7b\u578b\u7684\u6807\u8bb0**\u5e94\u8be5\u5982\u4f55\u6539\u53d8\uff0c \u800c\u66f4\u5e94\u660e\u786e\u62c6\u89e3\u6b64\u6807\u8bb0\u4f1a\u5bf9 **\u4e0d\u540c\u7c7b\u578b\u7684\u6807\u8bb0**\u6709\u4f55\u79cd\u5f71\u54cd\n\n\u660e\u786e\u540c\u7c7b\u578b\u7684\u5f71\u54cd\u662f\u4e00\u822c\u4e0d\u4f1a\u51fa\u95ee\u9898\u7684\uff0c \u5982\u5c06\u533a\u95f4\u52a0\u6807\u8bb0\u4e0b\u653e\u65f6\uff0c \u5b50\u8282\u70b9\u7684\u533a\u95f4\u52a0\u6807\u8bb0\u7d2f\u52a0\u4e0a\u8fd9\u4e2a\u503c\n\n\u4ee5\u672c\u9898\u4e3a\u4f8b\uff1a\n\n**\u5c06\u533a\u95f4\u8d4b\u503c\u6807\u8bb0\u62c6\u89e3\u65f6\uff0c \u4e0d\u4ec5\u9700\u8981\u5c06\u5b50\u533a\u95f4\u8d4b\u503c\u6807\u8bb0\u66f4\u65b0\u4e3a\u6b64\u503c\uff0c \u8fd8\u9700\u8981\u5c06\u5b50\u8282\u70b9\u7ffb\u8f6c\u6807\u8bb0\u6e05\u7a7a**\uff08\u4e0d\u8fc7\u8fd9\u4e2a\u8c8c\u4f3c\u5f71\u54cd\u4e0d\u5927\uff0c \u62c6\u8d4b\u503c\u6807\u8bb0\u65f6\u4f1a\u5c06\u7ffb\u8f6c\u6807\u8bb0\u6e05\u7a7a\u7684\uff09\n\n**\u5c06\u533a\u95f4\u7ffb\u8f6c\u6807\u8bb0\u62c6\u89e3\u65f6\uff0c \u9700\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u8003\u8651\u6b64\u6807\u8bb0\u4e0b\u63a8\u5bf9\u5b50\u533a\u95f4 \u8d4b\u503c\u6807\u8bb0 \u548c \u7ffb\u8f6c\u6807\u8bb0\u9020\u6210\u7684\u5f71\u54cd**\n\n\u8003\u8651\u5230\u8d4b\u503c\u6807\u8bb0\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u7ffb\u8f6c\u6807\u8bb0\uff0c **\u5728\u6709\u8d4b\u503c\u6807\u8bb0\u7684\u60c5\u51b5\u4e0b\uff0c \u76f4\u63a5\u7ffb\u8f6c\u8d4b\u503c\u6807\u8bb0**\n\n\u5176\u4f59\u60c5\u51b5\u7ffb\u8f6c\u6807\u8bb0\u5f02\u6216\u7b49\u4e8e1\n\n---\n\n\n\u5176\u4f59\u89c1\u4ee3\u7801 \u867d\u7136\u5f88\u957f\u4f46\u7528\u5fc3\u5f04\u61c2\u4f1a\u5bf9\u7ebf\u6bb5\u6811\u6709\u4e00\u4e2a\u5f88\u6df1\u523b\u7684\u7406\u89e3\n\n\u8fd9\u6837**\u5b8c\u5907\u5730**\u8003\u8651\u6240\u6709\u60c5\u51b5\u662f\u4e00\u4e2a $OI$ \u9009\u624b\u7684\u57fa\u672c\u7d20\u517b\n\n---\n\n\u55ef\u5c31\u8fd9\u6837\uff0c $RNG$ \u522b\u4e27\u6c14\uff0c \u4f60\u4eec\u662f\u6700\u68d2\u7684\uff1b $S8$ \uff0c$lpl$ \u52a0\u6cb9\uff01\n\n# Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#include<climits>\n#define LL long long\n#define REP(i, x, y) for(int i = (x);i <= (y);i++)\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 200019;\nint num, na;\nint v[maxn];\n#define lid (id << 1)\n#define rid (id << 1) | 1\n//int max(int a, int b){return a > b ? a : b;}//\u542c\u8bf4\u624b\u5199\u5feb\uff1f\nstruct seg_tree{\n    int l, r;\n    int sum;\n    int lazy;//-1.NULL  0.\u5168\u4e3a0  1.\u5168\u4e3a1\n\tint rev;\n    int max[2], lmax[2], rmax[2];\n    }tree[maxn << 2];\nvoid pushup(int id){\n    tree[id].sum = tree[lid].sum + tree[rid].sum;\n    REP(i, 0, 1){\n        tree[id].lmax[i] = tree[lid].lmax[i];\n        if(i == 1 && tree[lid].sum == tree[lid].r - tree[lid].l + 1)//\u5de6\u533a\u95f4\u5168\u6ee1\n            tree[id].lmax[i] += tree[rid].lmax[i];//\u53ef\u4ee5\u8de8\u8d8a\n        else if(i == 0 && tree[lid].sum == 0)//\u5de6\u533a\u95f4\u5168\u7a7a\n            tree[id].lmax[i] += tree[rid].lmax[i];\n        \n        tree[id].rmax[i] = tree[rid].rmax[i];\n        if(i == 1 && tree[rid].sum == tree[rid].r - tree[rid].l + 1)\n            tree[id].rmax[i] += tree[lid].rmax[i];\n        else if(i == 0 && tree[rid].sum == 0)\n            tree[id].rmax[i] += tree[lid].rmax[i];\n        \n        tree[id].max[i] = tree[lid].rmax[i] + tree[rid].lmax[i];//\u4e2d\u95f4\n        tree[id].max[i] = max(tree[id].max[i], tree[lid].max[i]);//\u7ee7\u627f\u5b50\u533a\u95f4\n        tree[id].max[i] = max(tree[id].max[i], tree[rid].max[i]);\n        }\n    }\nvoid build(int id, int l, int r){\n    tree[id].l = l, tree[id].r = r, tree[id].lazy = -1;\n    if(l == r){\n        tree[id].sum = v[l];\n        tree[id].max[0] = tree[id].lmax[0] = tree[id].rmax[0] = v[l] == 0;\n        tree[id].max[1] = tree[id].lmax[1] = tree[id].rmax[1] = v[l] == 1;\n        return ;\n        }\n    int mid = (l + r) >> 1;\n    build(lid, l, mid), build(rid, mid + 1, r);\n    pushup(id);\n    }\nvoid pushdown(int id){\n    if(tree[id].lazy != -1){//\u4f18\u5148\u7ea7\u6700\u9ad8\n\t\ttree[id].rev = 0;//\u6e05\u7a7a\u6807\u8bb0\n        int val = tree[id].lazy;\n        tree[lid].sum = (tree[lid].r - tree[lid].l + 1) * val;\n        tree[rid].sum = (tree[rid].r - tree[rid].l + 1) * val;\n        \n        tree[lid].lazy = tree[rid].lazy = val;\n\t\ttree[lid].rev = tree[rid].rev = 0;\n        \n        tree[lid].max[val] \n        = tree[lid].lmax[val] \n        = tree[lid].rmax[val] \n        = tree[lid].r - tree[lid].l + 1;\n        tree[lid].max[val ^ 1] \n        = tree[lid].lmax[val ^ 1] \n        = tree[lid].rmax[val ^ 1] \n        = 0;\n        \n        tree[rid].max[val] \n        = tree[rid].lmax[val] \n        = tree[rid].rmax[val] \n        = tree[rid].r - tree[rid].l + 1;\n        tree[rid].max[val ^ 1] \n        = tree[rid].lmax[val ^ 1] \n        = tree[rid].rmax[val ^ 1] \n        = 0;\n\t\t\n\t\ttree[id].lazy = -1;\n        }\n    if(tree[id].rev){\n        tree[lid].sum = (tree[lid].r - tree[lid].l + 1) - tree[lid].sum;\n        tree[rid].sum = (tree[rid].r - tree[rid].l + 1) - tree[rid].sum;\n        \n        if(tree[lid].lazy != -1)tree[lid].lazy ^= 1;//\u7efc\u5408\u8003\u8651\u4f18\u5148\u7ea7\uff0c \u5bf9\u5176\u4ed6\u6807\u8bb0\u7684\u5f71\u54cd\n\t\telse tree[lid].rev ^= 1;\n\t\tif(tree[rid].lazy != -1)tree[rid].lazy ^= 1;\n\t\telse tree[rid].rev ^= 1;\n        \n        swap(tree[lid].max[0], tree[lid].max[1]);\n        swap(tree[lid].lmax[0], tree[lid].lmax[1]);\n        swap(tree[lid].rmax[0], tree[lid].rmax[1]);\n        \n        swap(tree[rid].max[0], tree[rid].max[1]);\n        swap(tree[rid].lmax[0], tree[rid].lmax[1]);\n        swap(tree[rid].rmax[0], tree[rid].rmax[1]);\n\t\t\n\t\ttree[id].rev = 0;\n        }\n    }\nvoid update(int id, int val, int l, int r){\n    pushdown(id);\n    if(tree[id].l == l && tree[id].r == r){\n        if(val == 0 || val == 1){\n            tree[id].sum = (tree[id].r - tree[id].l + 1) * val;\n            tree[id].lazy = val;\n            tree[id].max[val] \n            = tree[id].lmax[val] \n            = tree[id].rmax[val] \n            = tree[id].r - tree[id].l + 1;\n            tree[id].max[val ^ 1] \n            = tree[id].lmax[val ^ 1] \n            = tree[id].rmax[val ^ 1] \n            = 0;\n            }\n        else if(val == 2){\n            tree[id].sum = (tree[id].r - tree[id].l + 1) - tree[id].sum;\n            tree[id].rev ^= 1;\n            swap(tree[id].max[0], tree[id].max[1]);\n            swap(tree[id].lmax[0], tree[id].lmax[1]);\n            swap(tree[id].rmax[0], tree[id].rmax[1]);\n            }\n        return ;\n        }\n    int mid = (tree[id].l + tree[id].r) >> 1;\n    if(mid < l)update(rid, val, l, r);\n    else if(mid >= r)update(lid, val, l, r);\n    else update(lid, val, l, mid), update(rid, val, mid + 1, r);\n    pushup(id);\n    }\nint query(int id, int l, int r){\n    pushdown(id);\n    if(tree[id].l == l && tree[id].r == r)return tree[id].sum;\n    int mid = (tree[id].l + tree[id].r) >> 1;\n    if(mid < l)return query(rid, l, r);\n    else if(mid >= r)return query(lid, l, r);\n    else return query(lid, l, mid) + query(rid, mid + 1, r);\n    }\nseg_tree Q_max(int id, int l, int r){\n    pushdown(id);\n    if(tree[id].l == l && tree[id].r == r)return tree[id];\n    int mid = (tree[id].l + tree[id].r) >> 1;\n    if(mid < l)return Q_max(rid, l, r);\n    else if(mid >= r)return Q_max(lid, l, r);\n    else{\n        seg_tree ret, L = Q_max(lid, l, mid), R = Q_max(rid, mid + 1, r);\n        ret.sum = L.sum + R.sum;\n        REP(i, 0, 1){\n            ret.lmax[i] = L.lmax[i];\n            if(i == 1 && L.sum == L.r - L.l + 1)//\u5de6\u533a\u95f4\u5168\u6ee1\n                ret.lmax[i] += R.lmax[i];//\u53ef\u4ee5\u8de8\u8d8a\n            else if(i == 0 && L.sum == 0)//\u5de6\u533a\u95f4\u5168\u7a7a\n                ret.lmax[i] += R.lmax[i];\n            \n            ret.rmax[i] = R.rmax[i];\n            if(i == 1 && R.sum == R.r - R.l + 1)\n                ret.rmax[i] += L.rmax[i];\n            else if(i == 0 && R.sum == 0)\n                ret.rmax[i] += L.rmax[i];\n            \n            ret.max[i] = L.rmax[i] + R.lmax[i];//\u4e2d\u95f4\n            ret.max[i] = max(ret.max[i], L.max[i]);//\u7ee7\u627f\u5b50\u533a\u95f4\n            ret.max[i] = max(ret.max[i], R.max[i]);\n            }\n        return ret;\n        }\n    }\nint main(){\n    num = RD(), na = RD();\n    REP(i, 1, num)v[i] = RD();\n    build(1, 1, num);\n    while(na--){\n        int cmd = RD(), l = RD(), r = RD();l++, r++;\n        if(cmd == 0)update(1, 0, l, r);\n        else if(cmd == 1)update(1, 1, l, r);\n        else if(cmd == 2)update(1, 2, l, r);\n        else if(cmd == 3)printf(\"%d\\n\", query(1, l, r));\n        else printf(\"%d\\n\", Q_max(1, l, r).max[1]);\n        }\n    return 0;\n    }\n```",
        "postTime": 1540050132,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u770b\u7740\u9898\u89e3\u4e2d\u7ebf\u6bb5\u6811\u5197\u957f\u7684 $\\text{pushup}$ \u548c $\\text{pushdown}$ \u2014\u2014 \u6cea\uff0c\u6d41\u4e86\u4e0b\u6765\u3002  \n\u6b64\u65f6\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\uff0c\u6709\u5f88\u591a\u5730\u65b9\u5c31\u66f4\u597d\u60f3\u3001\u597d\u5199\u4e86\u3002\n****\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u4e3b\u8981\u7ef4\u62a4 \u6700\u957f\u524d\u540e\u7f00\u7684 $0,1$ \u6570\u91cf\uff0c\u548c\u6700\u957f\u8fde\u7eed $0,1$ \u6570\u91cf\u3002\n\n\u5bf9\u4e8e $\\text{pushup}$\uff0c\u8ddf\u7ef4\u62a4\u6700\u5927\u5b50\u6bb5\u548c\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u8981\u5224\u65ad\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u662f\u5426\u5168\u4e3a $0$ \u6216 $1$\u3002  \n\u5177\u4f53\u5730\u8bf4\uff0c\u4ee5\u524d\u662f\u8fd9\u4e48\u7ef4\u62a4\u524d\u7f00\u6700\u5927\u548c\u7684\n```cpp\npre[u] = max(pre[ls],sum[ls]+val[u]+pre[rs]);\n// ls,rs \u6307\u5de6\u53f3\u513f\u5b50\n```  \n\u73b0\u5728\u8981\u8fd9\u6837\u7ef4\u62a4\u524d\u7f00\u6700\u957f\u8fde\u7eed $1$ \u7684\u6570\u91cf\n```cpp\npre[u] = pre[ls];\nif(sum[ls]==size[ls]&&val[u]) pre[u] = max(pre[u],sum[ls]+pre[rs]+1);\n// size[u] \u6307 u \u7684\u5b50\u6811\u5927\u5c0f\n```\n\u5bf9\u4e8e\u4e0a\u4f20\u5176\u5b83\u4fe1\u606f\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u6253\u8986\u76d6\u6807\u8bb0\u6bd4\u8f83\u7b80\u5355\uff1b\u6253\u53cd\u8f6c\u6807\u8bb0\u65f6\uff0c\u9664\u4e86\u8981\u4ea4\u6362\u5bf9\u5e94\u7684 $0,1$ \u4fe1\u606f\uff0c\u8fd8\u9700\u8981\u5c06\u8986\u76d6\u6807\u8bb0\u53d6\u53cd\u3002\uff08\u56e0\u4e3a\u6211\u4eec\u94a6\u5b9a\u53cd\u8f6c\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u8fd9\u6837\u4fbf\u4e8e\u7ef4\u62a4\uff09\n\n\u4fee\u6539\u548c\u67e5\u8be2\u8fd8\u662f\u76f4\u63a5\u628a\u533a\u95f4\u5206\u88c2\u51fa\u6765\uff0c\u6253\u6807\u8bb0/\u53d6\u4fe1\u606f \u5373\u53ef\u3002  \n\u4e8e\u662f\u8fd9\u9898\u5c31\u88ab\u8f7b\u677e\u5207\u6389\u4e86\u3002  \n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define N 100003\n#define reg register\n#define ll long long\n#define mid ((l+r)>>1)\n#define ls son[u][0]\n#define rs son[u][1]\nusing namespace std;\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nint b[N];\nint n,q;\n\nstruct fhqTreap{\n    int size[N],son[N][2],rnd[N],tag[N],sum[N],a[N];\n    int pre1[N],suf1[N],pre0[N],suf0[N],ans1[N],ans0[N];\n    bool inv[N];\n    int rt,cnt;\n\n    inline void pushup(int u){ //\u4e0d\u8fc7\u4e5f\u6ca1\u77ed\u591a\u5c11\n        size[u] = size[ls]+size[rs]+1;\n        sum[u] = sum[ls]+sum[rs]+a[u];\n        pre1[u] = pre1[ls],suf1[u] = suf1[rs];\n        pre0[u] = pre0[ls],suf0[u] = suf0[rs];\n        if(a[u]&&size[ls]==sum[ls]) pre1[u] = max(pre1[u],sum[ls]+pre1[rs]+1);\n        if(a[u]&&size[rs]==sum[rs]) suf1[u] = max(suf1[u],sum[rs]+suf1[ls]+1);\n        if(!a[u]&&!sum[ls]) pre0[u] = max(pre0[u],size[ls]+pre0[rs]+1);\n        if(!a[u]&&!sum[rs]) suf0[u] = max(suf0[u],size[rs]+suf0[ls]+1);\n        ans1[u] = max(ans1[ls],ans1[rs]);\n        ans0[u] = max(ans0[ls],ans0[rs]);\n        if(a[u]) ans1[u] = max(ans1[u],suf1[ls]+pre1[rs]+1);\n        if(!a[u]) ans0[u] = max(ans0[u],suf0[ls]+pre0[rs]+1);\n    }\n\n    inline void pushc(int u,int k){\n        a[u] = k;\n        sum[u] = k==1?size[u]:0;\n        pre1[u] = suf1[u] = ans1[u] = sum[u];\n        pre0[u] = suf0[u] = ans0[u] = size[u]-sum[u];\n        tag[u] = k==1?1:-1;\n    }\n\n    inline void pushiv(int u){\n        sum[u] = size[u]-sum[u];\n        a[u] ^= 1;\n        swap(pre0[u],pre1[u]);\n        swap(suf0[u],suf1[u]);\n        swap(ans0[u],ans1[u]);\n        inv[u] ^= 1;\n        tag[u] = -tag[u];\n    }\n\n    inline void pushdown(int u){\n        if(inv[u]){\n            if(ls) pushiv(ls);\n            if(rs) pushiv(rs);\n            inv[u] = 0;\n        }\n        if(tag[u]){\n            int x = tag[u]==1?1:0;\n            if(ls) pushc(ls,x);\n            if(rs) pushc(rs,x);\n            tag[u] = 0;\n        }\n    }\n\n    inline int neww(int x){ //\u65b0\u5efa\u8282\u70b9\u522b\u5fd8\u4e86\u52a0\u521d\u59cb\u4fe1\u606f\n        int u = ++cnt;\n        sum[u] = a[u] = x;\n        pre1[u] = suf1[u] = ans1[u] = x;\n        pre0[u] = suf0[u] = ans0[u] = !x;\n        size[u] = 1;\n        rnd[u] = rand();\n        return u;\n    }\n\n    int merge(int u,int v){\n        pushdown(u);\n        pushdown(v);\n        if(!u||!v) return u|v;\n        if(rnd[u]<rnd[v]){\n            son[u][1] = merge(son[u][1],v);\n            pushup(u);\n            return u;\n        }else{\n            son[v][0] = merge(u,son[v][0]);\n            pushup(v);\n            return v;\n        }\n    }\n\n    void split(int cur,int k,int &u,int &v){\n        if(!cur){\n            u = v = 0;\n            return;\n        }\n        pushdown(cur);\n        if(size[son[cur][0]]<k){\n            u = cur;\n            split(rs,k-size[ls]-1,rs,v);\n        }else{\n            v = cur;\n            split(son[v][0],k,u,son[v][0]);\n        }\n        pushup(cur);\n    }\n\n    inline void replace(int l,int r,int k){\n        int x,y,z;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        pushc(y,k);\n        rt = merge(merge(x,y),z);\n    }\n\n    inline void invert(int l,int r){\n        int x,y,z;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        pushiv(y);\n        rt = merge(merge(x,y),z);\n    }\n\n    inline int query_sum(int l,int r){\n        int x,y,z,res;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        res = sum[y];\n        rt = merge(merge(x,y),z);\n        return res;\n    }\n\n    inline int query_ans(int l,int r){\n        int x,y,z,res;\n        split(rt,l-1,x,y);\n        split(y,r-l+1,y,z);\n        res = ans1[y];\n        rt = merge(merge(x,y),z);\n        return res;\n    }\n\n    int build(int l,int r){ //\u7ebf\u6027\u5efa\u6811\n        if(l>r) return 0;\n        int u = neww(b[mid]);\n        ls = build(l,mid-1);\n        rs = build(mid+1,r);\n        pushup(u);\n        return u;\n    }\n}T;\n\nint main(){\n    int op,l,r;\n    read(n),read(q);\n    for(reg int i=1;i<=n;++i) read(b[i]);\n    T.rt = T.build(1,n);\n    while(q--){\n        read(op),read(l),read(r);\n        ++l,++r; //\u5e8f\u5217\u4e0b\u6807\u662f [0,n) \u4e4b\u95f4\n        if(op==0) T.replace(l,r,0);\n        else if(op==1) T.replace(l,r,1);\n        else if(op==2) T.invert(l,r);\n        else if(op==3) printf(\"%d\\n\",T.query_sum(l,r));\n        else printf(\"%d\\n\",T.query_ans(l,r));\n    }\n    return 0;\n}\n```",
        "postTime": 1572719420,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\n\u5982\u679c\u6ca1\u6709\u533a\u95f4\u53cd\u8f6c\uff0c\u8fd9\u9898\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6709\u53cd\u8f6c\uff0c\u6240\u4ee5\u65e2\u8981\u7ef4\u62a41\uff0c\u53c8\u8981\u7ef4\u62a40\u3002\n\ntot\u8bb0\u5f55\u533a\u95f4\u4e2d1\u7684\u4e2a\u6570\n\nlen\u8bb0\u5f55\u533a\u95f4\u957f\u5ea6\n\nl\u8bb0\u5f55\u533a\u95f4\u5de6\u7aef\u70b9\n\nr\u8bb0\u5f55\u533a\u95f4\u53f3\u7aef\u70b9\n\nsum1\u8868\u793a\u533a\u95f4\u4e2d\u6700\u957f\u8fde\u7eed\u76841\u7684\u4e2a\u6570\n\nlmax1\u8868\u793a\u533a\u95f4\u4e2d\u4ee5\u5de6\u7aef\u70b9\u4e3a\u8d77\u70b9\u4ece\u5de6\u5f80\u53f3\u7684\u8fde\u7eed1\u7684\u4e2a\u6570\n\nrmax1\u8868\u793a\u533a\u95f4\u4e2d\u4ee5\u53f3\u7aef\u70b9\u4e3a\u8d77\u70b9\u4ece\u53f3\u5f80\u5de6\u7684\u8fde\u7eed1\u7684\u4e2a\u6570\n\n0\u540c\u7406\n\nlaz1\u8868\u793a\u533a\u95f4\u8986\u76d6\uff0c0\u8868\u793a\u65e0\u64cd\u4f5c\uff0c1\u8868\u793a0\u8986\u76d6\uff0c2\u8868\u793a1\u8986\u76d6\n\nlaz2\u8868\u793a\u533a\u95f4\u53cd\u8f6c\uff0c0\u8868\u793a\u65e0\u64cd\u4f5c\uff0c1\u8868\u793a\u53cd\u8f6c\n\n \n\n\u5b9a\u4e49\u4e86\u8fd9\u4e48\u591a\u5c31\u591f\u4e86\uff0c\u7136\u540e\u8003\u8651\u5efa\u6811\u548cupdate\u7ef4\u62a4\n\nupdate\uff1a\n\n1.tot\u5c31\u76f4\u63a5\u52a0\u5c31\u884c\n\n2.lmax1\u66f4\u65b0\u8981\u770b\u4e00\u4e0b\u5de6\u533a\u95f4\u662f\u5426\u5168\u4e3a1\uff0c\u82e5\u5168\u4e3a1\uff0c\u5219\u5e94\u52a0\u4e0a\u53f3\u533a\u95f4lmax1\n\n3.rmax1\u66f4\u65b0\u8981\u770b\u4e00\u4e0b\u53f3\u533a\u95f4\u662f\u5426\u5168\u4e3a1\uff0c\u82e5\u5168\u4e3a1\uff0c\u5219\u5e94\u52a0\u4e0a\u5de6\u533a\u95f4rmax1\n\n4.sum1\u66f4\u65b0\u6709\u4e09\u4e2a\u6765\u6e90\uff0c\u5de6\u533a\u95f4sum1\uff0c\u53f3\u533a\u95f4sum1\uff0c\u5de6\u533a\u95f4rmax1+\u53f3\u533a\u95f4lmax1\n\n0\u7ef4\u62a4\u7684\u540c\u7406\u3002\n\n\u61d2\u5f97\u5199\u90a3\u591aif\uff0celse\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u91c7\u7528\u4e86\u4e09\u76ee\u8fd0\u7b97\u7b26\n\n \n\nbuild\uff1a\n\n1.\u8fb9\u627e\u8fb9\u6c42len\n\n2.\u9012\u5f52\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u770b\u539f\u5e8f\u5217\u4e2d\u662f1\u8fd8\u662f0,\u53bb\u66f4\u65b0\u53f6\u5b50\u7ed3\u70b9\u7684\u4e1c\u897f\n\n3.\u4e09\u76ee\u8fd0\u7b97\u7b26\u5bf91\u548c0\u7684\u66f4\u65b0\u76f8\u53cd\n\n4.\u6700\u540eupdate\uff0c\u7531\u53f6\u5b50\u7ed3\u70b9\u56de\u6eaf\uff0c\u7ef4\u62a4\u6574\u4e2a\u5927\u533a\u95f4\n\n \n\n\u7136\u540e\u57fa\u672c\u7684\u5efa\u6811\u5b8c\u6210\u4e86\uff0c\u5148\u4e0d\u60f3\u90a3\u4e9b\u4e2a\u64cd\u4f5c\uff0c\u628amain\u6846\u67b6\u5199\u51fa\uff0c\n\nchange\u53ef\u4ee5\u5206\u6807\u8bb0\u8868\u793a\u4fee\u6539\u64cd\u4f5c\uff0c\u4e00\u4e2a\u5c31\u591f\u4e86\n\nask\u8fd4\u56de\u7684\u4e1c\u897f\u4e0d\u540c\uff0c\u8981\u5206\u4e24\u4e2a\n\n\u7136\u540emain\u51fd\u6570\u4e5f\u641e\u5b9a\u4e86\n\n \n\n\u5f00\u59cb\u672c\u9898\u6bd4\u8f83\u96be\u7406\u89e3\u7684\u4e00\u5757\uff1adown\u548claz\u6807\u8bb0\u3002\n\n1.\u5982\u679c\u4e4b\u524d\u6709\u53cd\u8f6c\u6807\u8bb0\uff0c\u4f46\u662f\u53c8\u6709\u8986\u76d6\u6807\u8bb0\uff0c\u4e4b\u524d\u7684\u53cd\u8f6c\u6807\u8bb0\u5c31\u6ca1\u7528\u4e86\uff0c\n\n\u6240\u4ee5\u5f53\u8981\u6253\u8986\u76d6\u6807\u8bb0\u65f6\uff0c\u53cd\u8f6c\u6807\u8bb0\u662f\u53ef\u4ee5\u6e05\u7a7a\u7684\n\n2.\u533a\u95f4\u8986\u76d6\u7684\u8bdd\u5c31\u662f\u90a3\u4e9b\u4e1c\u897f\u7b49\u4e8elen\u62160\u7684\u95ee\u9898\n\n3.\u533a\u95f4\u53cd\u8f6c\u628a0\u548c1\u7684\u4e1c\u897f\u4ea4\u6362\u5c31\u884c\u4e86\n\n4.down\u5b8c\u6807\u8bb0\u8bb0\u5f97\u6e05\u7a7a\n\n \n\nask1\u8fd4\u56detot\u5c31\u884c\n\nask2\u5206\u5f00\u627e\u533a\u95f4\u7684\u8bdd\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u5de6\u533a\u95f4\u7684rmax1+\u53f3\u533a\u95f4\u7684lmax1\uff0c\n\n\u8fd9\u4e2a\u8fd8\u8981\u53d6min\uff0c\u56e0\u4e3a\u53ef\u80fd\u5206\u5230\u4e24\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u5230\u4e0d\u4e86lmax1\u6216rmax1\n\n \n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\u76f4\u63a5\u4e0b\u653e\u6807\u8bb0\u53ef\u80fd\u53f6\u5b50\u7ed3\u70b9\u4e5f\u4e0b\u653e\uff0c\u53ef\u80fd\u4f1a\u8d8a\u754c\uff0c\u6240\u4ee5 \u5f00\u4e86\u516b\u500d\u7a7a\u95f4\n\n \n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define R register\n#define lson k<<1,l,mid   //\u51cf\u5c11\u7801\u91cf\u6216\u8005\u4e3a\u4e86\u597d\u770b\n#define rson k<<1|1,mid+1,r\n#define ls k<<1\n#define rs k<<1|1\n#define mid ((l+r)>>1)\n#define sum1(rt) tr[rt].sum1\n#define sum0(rt) tr[rt].sum0\n#define lmax1(rt) tr[rt].lmax1\n#define lmax0(rt) tr[rt].lmax0\n#define rmax1(rt) tr[rt].rmax1\n#define rmax0(rt) tr[rt].rmax0\n#define len(rt) tr[rt].len\n#define laz1(rt) tr[rt].laz1\n#define laz2(rt) tr[rt].laz2\n#define tot(rt) tr[rt].tot\nusing namespace std;\nconst int maxn=200005;\nint n,m,a[maxn];\nstruct node{\n    int sum1,lmax1,rmax1;\n    int tot,len,laz1,laz2;\n    int sum0,lmax0,rmax0;\n}tr[maxn<<2];\ninline int read(){\n    R int s=0,w=1;\n    R char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n    return s*w;\n}\ninline void update(R int k){\n    lmax1(k)=(sum1(ls)==len(ls))?len(ls)+lmax1(rs):lmax1(ls);\n    rmax1(k)=(sum1(rs)==len(rs))?len(rs)+rmax1(ls):rmax1(rs);\n    sum1(k)=max(max(sum1(ls),sum1(rs)),rmax1(ls)+lmax1(rs));\n    lmax0(k)=(sum0(ls)==len(ls))?len(ls)+lmax0(rs):lmax0(ls);\n    rmax0(k)=(sum0(rs)==len(rs))?len(rs)+rmax0(ls):rmax0(rs);\n    sum0(k)=max(max(sum0(ls),sum0(rs)),rmax0(ls)+lmax0(rs));\n    tot(k)=tot(ls)+tot(rs);\n}\nvoid build(R int k,R int l,R int r){\n    len(k)=r-l+1;\n\tif(l==r){\n        tot(k)=a[l];\n        lmax1(k)=rmax1(k)=sum1(k)=((a[l]==1)?1:0);\n        lmax0(k)=rmax0(k)=sum0(k)=((a[l]==1)?0:1);\n        return ;\n    }\n    build(lson);build(rson);\n    update(k);\n}\ninline void down(R int k){\n    if(laz1(k)==1){\n        sum0(ls)=lmax0(ls)=rmax0(ls)=len(ls);\n        tot(ls)=sum1(ls)=lmax1(ls)=rmax1(ls)=0;\n        laz1(ls)=1;laz2(ls)=0;\n        sum0(rs)=lmax0(rs)=rmax0(rs)=len(rs);\n        tot(rs)=sum1(rs)=lmax1(rs)=rmax1(rs)=0;\n        laz1(rs)=1;laz2(rs)=0;\n        laz1(k)=0;laz2(k)=0;\n    }\n    if(laz1(k)==2){\n        tot(ls)=sum1(ls)=lmax1(ls)=rmax1(ls)=len(ls);\n        sum0(ls)=lmax0(ls)=rmax0(ls)=0;\n        laz1(ls)=2;laz2(ls)=0;\n        tot(rs)=sum1(rs)=lmax1(rs)=rmax1(rs)=len(rs);\n        sum0(rs)=lmax0(rs)=rmax0(rs)=0;\n        laz1(rs)=2;laz2(rs)=0;\n        laz1(k)=0;laz2(k)=0;\n    }\n    if(laz2(k)){\n        tot(ls)=len(ls)-tot(ls);\n        swap(sum0(ls),sum1(ls));\n        swap(lmax0(ls),lmax1(ls));\n        swap(rmax0(ls),rmax1(ls));\n        if(laz1(ls)==1)laz1(ls)=2;\n        else if(laz1(ls)==2)laz1(ls)=1;\n        else laz2(ls)^=1;\n        tot(rs)=len(rs)-tot(rs);\n        swap(sum0(rs),sum1(rs));\n        swap(lmax0(rs),lmax1(rs));\n        swap(rmax0(rs),rmax1(rs));\n        if(laz1(rs)==1)laz1(rs)=2;\n        else if(laz1(rs)==2)laz1(rs)=1;\n        else laz2(rs)^=1;\n        laz2(k)=0;\n    }\n}\nvoid change(R int k,R int l,R int r,R int x,R int y,R int z){\n    down(k);\n    if(l==x&&y==r){\n        if(z==1){\n            sum0(k)=lmax0(k)=rmax0(k)=len(k);\n            tot(k)=sum1(k)=lmax1(k)=rmax1(k)=0;\n            laz1(k)=1;\n            laz2(k)=0;\n        }\n        else if(z==2){\n            tot(k)=sum1(k)=lmax1(k)=rmax1(k)=len(k);\n            sum0(k)=lmax0(k)=rmax0(k)=0;\n            laz1(k)=2;\n            laz2(k)=0;\n        }\n        else {\n            tot(k)=len(k)-tot(k);\n            swap(sum0(k),sum1(k));\n            swap(lmax0(k),lmax1(k));\n            swap(rmax0(k),rmax1(k));\n            laz2(k)^=1;\n        }\n        return ;\n    }\n    if(y<=mid)change(lson,x,y,z);\n    else if(x>mid)change(rson,x,y,z);\n    else change(lson,x,mid,z),change(rson,mid+1,y,z);\n    update(k);\n}\nint ask1(R int k,R int l,R int r,R int x,R int y){\n    down(k);\n    if(l==x&&y==r){\n        return tot(k);\n    }\n    if(y<=mid)return ask1(lson,x,y);\n    else if(x>mid)return ask1(rson,x,y);\n    else return ask1(lson,x,mid)+ask1(rson,mid+1,y);\n}\nint  ask2(R int k,R int l,R int r,R int x,R int y){\n    down(k);\n    if(l==x&&y==r){\n        return sum1(k);\n    }\n    if(y<=mid)return ask2(lson,x,y);\n    else if(x>mid)return ask2(rson,x,y);\n    else return max(max(ask2(lson,x,mid),ask2(rson,mid+1,y)),min(lmax1(rs),y-mid)+min(rmax1(ls),mid-x+1));\n}\nint main(){\n    n=read();m=read();\n    for(R int i=1;i<=n;++i)\n        a[i]=read();\n    build(1,1,n);\n    int opt,a,b;\n    while(m--){\n        opt=read();a=read()+1;b=read()+1;\n        if(opt==0)change(1,1,n,a,b,1);\n        else if(opt==1)change(1,1,n,a,b,2);\n        else if(opt==2)change(1,1,n,a,b,3);\n        else if(opt==3)printf(\"%d\\n\",ask1(1,1,n,a,b));\n        else if(opt==4)printf(\"%d\\n\",ask2(1,1,n,a,b));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1568787547,
        "uid": 151768,
        "name": "\u6d41\u901d\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u79cd\u5206\u5757\u505a\u6cd5\uff1a\n\n\u5bf9\u4e8e\u64cd\u4f5c $0-3$ \uff0c\u7ef4\u62a4\u4e24\u4e2a $tag$ \u6765\u8fdb\u884c\u7ffb\u8f6c\u7b49\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u56db\uff0c\u7ef4\u62a4\u4e09\u4e2a\u6570\u7ec4\uff1a $ Max,Rmax,Lmax $ \uff0c\u8868\u793a\u4e00\u4e2a\u5757\u4e2d\u7684\u6700\u5927\u8fde\u7eed $0/1$ \uff0c\u4e00\u4e2a\u5757\u4e2d\u5305\u542b\u53f3\u7aef\u70b9\u7684\u6700\u5927\u8fde\u7eed $0/1$ \uff0c\u4e00\u4e2a\u5757\u4e2d\u5305\u542b\u5de6\u7aef\u70b9\u7684\u6700\u5927\u8fde\u7eed  $0/1$ \u3002\n\n\u5c31\u505a\u5b8c\u4e86\u3002\n\n$0-3$ \u64cd\u4f5c\u53ef\u4ee5\u53c2\u8003\u5f00\u5173\u4e00\u9898\uff0c $4$ \u64cd\u4f5c\u8bf7\u81ea\u884c\u5b9e\u73b0\u3002\n\n\u7ed9\u51fa\u90e8\u5206\u4ee3\u7801\uff08\u4e0d\u5b8c\u6574\uff09\uff1a\n\n```cpp\nnamespace Block {\n\t\n\tll len, num, l[N], r[N], bl[N], tag[N], ans[N], Max[N], Lmax[N], Rmax[N];\n\t\n\tinline void build () {\n\t\tlen = sqrt (n), num = ( n - 1 ) / len + 1;\n\t\tFor ( i, 1, n ) bl[i] = ( i - 1 ) / len + 1;\n\t\tFor ( i, 1, num ) l[i] = ( i - 1 ) * len + 1, r[i] = i * len;\n\t\tr[num] = n;\n\t}\n\t\n\tinline void modify ( ll opt, ll x, ll y ) {\n\t\tif ( !opt ) {\n\t\t\tif ( bl[x] == bl[y] ) \n\t\t\t\tFor ( i, x, y ) \n\t\t\t\t\tans[bl[x]] -= ( a[i] ^ tag[bl[x]] ),\n\t\t\t\t\ta[i] = 0, ans[bl[x]] += ( a[i] ^ tag[bl[x]] );\n\t\t\telse {\n\t\t\t\tFor ( i, x, r[bl[x]] ) {\n\t\t\t\t\tans[bl[x]] -= ( a[i] ^ tag[bl[x]] ),\n\t\t\t\t\ta[i] = 0, ans[bl[x]] += ( a[i] ^ tag[bl[x]] );\n\t\t\t\t}\n\t\t\t\tFor ( i, l[bl[y]], y ) {\n\t\t\t\t\tans[bl[y]] -= ( a[i] ^ tag[bl[y]] ),\n\t\t\t\t\ta[i] = 0, ans[bl[y]] += ( a[i] ^ tag[bl[y]] );\n\t\t\t\t}\n\t\t\t\tFor ( i, bl[x] + 1, bl[y] - 1 ) tag[i] = ans[i] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( bl[x] == bl[y] ) \n\t\t\t\tFor ( i, x, y ) \n\t\t\t\t\tans[bl[x]] -= ( a[i] ^ tag[bl[x]] ),\n\t\t\t\t\ta[i] = 1, ans[bl[x]] += ( a[i] ^ tag[bl[x]] );\n\t\t\telse {\n\t\t\t\tFor ( i, x, r[bl[x]] ) {\n\t\t\t\t\tans[bl[x]] -= ( a[i] ^ tag[bl[x]] ),\n\t\t\t\t\ta[i] = 1, ans[bl[x]] += ( a[i] ^ tag[bl[x]] );\n\t\t\t\t}\n\t\t\t\tFor ( i, l[bl[y]], y ) {\n\t       \t\t\t\tans[bl[y]] -= ( a[i] ^ tag[bl[y]] ),\n\t\t\t\t\ta[i] = 1, ans[bl[y]] += ( a[i] ^ tag[bl[y]] );\n\t\t\t\t}\n\t\t\t\tFor ( i, bl[x] + 1, bl[y] - 1 ) tag[i] = 1, ans[i] = len;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tinline void update ( ll x, ll y ) {\n\t\tif ( bl[x] == bl[y] ) \n\t\t\tFor ( i, x, y ) \n\t\t\t\tans[bl[x]] -= ( tag[bl[x]] ^ a[i] ),\n\t\t\t\ta[i] ^= 1, ans[bl[x]] += ( tag[bl[x]] ^ a[i] );\n\t\telse {\n\t\t\tFor ( i, bl[x] + 1, bl[y] - 1 ) \n\t\t\t\ttag[i] ^= 1, ans[i] = len - ans[i];\n\t\t\t\n\t\t\tFor ( i, x, r[bl[x]] )\n\t\t\t\tans[bl[x]] -= ( tag[bl[x]] ^ a[i] ),\n\t\t\t\ta[i] ^= 1, ans[bl[x]] += ( tag[bl[x]] ^ a[i] );\n\t\t\t\n\t\t\tFor ( i, l[bl[y]], y ) \n\t\t\t\tans[bl[y]] -= ( tag[bl[y]] ^ a[i] ),\n\t\t\t\ta[i] ^= 1, ans[bl[y]] += ( tag[bl[y]] ^ a[i] );\n\t\t}\n\t}\n\t\n\tinline ll query ( ll opt, ll x, ll y ) {\n\t\tif ( opt == 3 ) {\n\t\t\tll sum = 0;\n\t\t\tif ( bl[x] == bl[y] ) For ( i, x, y ) sum += ( a[i] ^ tag[bl[x]] ); \n\t\t\telse {\n\t\t\t\tFor ( i, bl[x] + 1, bl[y] - 1 ) sum += ans[i];\n\t\t\t\tFor ( i, x, r[bl[x]] ) sum += ( a[i] ^ tag[bl[x]] );\n\t\t\t\tFor ( i, l[bl[y]], y ) sum += ( a[i] ^ tag[bl[y]] );\n\t\t\t} return sum;\n\t\t} else {\n\t\t\tll aa = 0, sum = 0;\n\t\t\tif ( bl[x] == bl[y] ) \n\t\t\t\tFor ( i, x, y ) \n\t\t\t\t\tif ( ( a[i] ^ tag[bl[x]] ) == 1 ) aa++;\n\t\t\t\t\telse sum = max ( sum, aa ), aa = 0;\n\t\t\telse {\n\t\t\t\tFor ( i, x, r[bl[x]] ) ;\n\t\t\t\tFor ( i, l[bl[y]], y ) ;\n\t\t\t\tFor ( i, bl[x] + 1, bl[y] - 1 ) ;\n\t\t\t} return sum;\n\t\t}\n\t}\n}\n```",
        "postTime": 1552347846,
        "uid": 104379,
        "name": "Cesare",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2572"
    },
    {
        "content": "\u7ebf\u6bb5\u6811??\n\n\u4e0d\u8981!!\n\n### $fhq \\ Treap$ \u662f\u4e5f!!\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u957f\u8fde\u7eed1\u5f88\u9ebb\u70e6,\u5e73\u8861\u6811\u5c31\u80fd\u5f88\u597d\u5730\u51cf\u5c11\u7801\u91cf\n\n\u6709\u4e00\u4e2a\u51cf\u5c11\u7801\u91cf\u7684\u795e\u5668:\u7ed3\u6784\u4f53\u5185\u5b9a\u4e49\u51fd\u6570!(\u5c31\u662f\u5c01\u88c5\u8d77\u6765)\n\n\u5728\u5916\u90e8\u76f4\u63a5~~\u75af\u72c2~~\u8c03\u7528\u5373\u53ef!\n\n\u867d\u8bf4\u6bd4\u8f83\u6162,\u4f46AC\u662f\u6ca1\u95ee\u9898\u7684,\u8fd9\u53c8\u662f\u7701\u9009\u9898,\u5f00O2\u540e\u5feb\u5230\u98de\u8d77!\n\n---\n\n\u7ec6\u8282\u5404\u4f4d\u5927\u4f6c\u90fd\u5df2\u8bf4\u4e86,\u8fd9\u91cc\u518d\u70b9\u4e00\u4e0b:\n\n\u9996\u5148\u662f\u53cd\u8f6c\u548c\u63a8\u5e73\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\u95ee\u9898,\u5176\u5b9e\u8c01\u5148\u8c01\u540e\u90fd\u884c,\u4f46\u90fd\u8981\u6ce8\u610f**\u524d\u4e00\u4e2a\u64cd\u4f5c\u4f1a\u5f71\u54cd\u540e\u4e00\u4e2a\u64cd\u4f5c**\n\n\u6bd4\u5982\u6211\u5199\u7684\u662f\u5148\u53cd\u8f6c\u518d\u63a8\u5e73,\u90a3\u4e48\u53cd\u8f6c\u64cd\u4f5c\u65f6**\u522b\u5fd8\u4e86\u4e5f\u628a\u63a8\u5e73\u6807\u8bb0\u53d6\u53cd**\n\n\u5e73\u8861\u6811\u8282\u70b9\u8bb0\u5f55\u4fe1\u606f**\u65e2\u8981\u8bb0\u5f55\u5173\u4e8e0\u7684\u4e5f\u8981\u8bb0\u5f55\u5173\u4e8e1\u7684**,\u8fd9\u6837\u5b50\u53cd\u8f6c\u64cd\u4f5c\u76f4\u63a5\u628a\u6709\u51730,1\u7684swap\u4e00\u4e0b\u5373\u53ef\n\n---\n\n\u8bf4\u4e00\u4e0b\u53d8\u91cf\u542b\u4e49,\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3:\n\n$lmax[0/1]$ \u533a\u95f4\u6700\u5de6\u4fa7\u8fde\u7eed0/1\u7684\u4e2a\u6570\n\n$rmax[0/1]$ \u533a\u95f4\u6700\u53f3\u4fa7\u8fde\u7eed0/1\u7684\u4e2a\u6570\n\n$mx[0/1]$ \u533a\u95f4\u5185\u6700\u591a\u6709\u8fde\u7eed\u76840/1\u7684\u4e2a\u6570\n\n$sum1$ \u533a\u95f4\u51851\u7684\u4e2a\u6570\n\n$rev$ \u53cd\u8f6c\u6807\u8bb0\n\n$cov$ \u63a8\u5e73\u6807\u8bb0(\u82e5\u503c\u4e3a-1\u5219\u8868\u793a\u4e0d\u7528\u63a8\u5e73)\n\n$key$ \u952e\u503c\n\n$val$ \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c(0/1)\n\n$siz$ \u5b50\u6811(\u533a\u95f4)\u5927\u5c0f\n\n$ch[0/1]$ \u5de6/\u53f3\u513f\u5b50\n\n\u7ed3\u6784\u4f53\u91cc\u7684\u5c01\u88c5(\u53ea\u7528\u5c01\u88c5\u53cd\u8f6c\u548c\u63a8\u5e73)\n\n```cpp\nstruct node{\n\tint siz,key,ch[2],val,lmax[2],rmax[2],mx[2],sum1;\n\tint cov;\n\tbool rev;\n\tinline void Rev(){//\u53cd\u8f6c\n\t\trev^=1;\n\t\tswap(lmax[0],lmax[1]);\n\t\tswap(rmax[0],rmax[1]);\n\t\tswap(mx[0],mx[1]);\n\t\tif(cov!=-1)cov^=1;\n\t\tsum1=siz-sum1;\n\t\tval^=1;\n\t}\n\tinline void Cov(int d){//\u63a8\u5e73\n\t\tval=d;\n\t\tcov=d;\n\t\tsum1=(d?siz:0);\n\t\tfor(int i=0;i<=1;i++){\n\t\t\tlmax[i]=rmax[i]=mx[i]=((d==i)?siz:0);\n\t\t}\n\t}\n}t[N];\n```\n\n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u4ee3\u7801\u7684\u7b80\u6d01\u5566!o(*\uffe3\u25bd\uffe3\\*)\u30d6\n\n\u6ca1\u6709\u4e00\u70b9\u538b\u884c,\u957f\u5ea6\u6bd4\u9664\u73c2\u6735\u8389\u6811\u5916\u7684\u9898\u89e3\u77ed\u591a\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\n#define N 100100\ninline int read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\nint n,m,cnt,root;\nstruct node{\n\tint siz,key,ch[2],val,lmax[2],rmax[2],mx[2],sum1;\n\tint cov;\n\tbool rev;\n\tinline void Rev(){\n\t\trev^=1;\n\t\tswap(lmax[0],lmax[1]);\n\t\tswap(rmax[0],rmax[1]);\n\t\tswap(mx[0],mx[1]);\n\t\tif(cov!=-1)cov^=1;\n\t\tsum1=siz-sum1;\n\t\tval^=1;\n\t}\n\tinline void Cov(int d){\n\t\tval=d;\n\t\tcov=d;\n\t\tsum1=(d?siz:0);\n\t\tfor(int i=0;i<=1;i++){\n\t\t\tlmax[i]=rmax[i]=mx[i]=((d==i)?siz:0);\n\t\t}\n\t}\n}t[N];\nint NewNode(int data){//\u521d\u59cb\u5316\u522b\u6f0f\u4e86\u4e1c\u897f,\u5426\u5219\u4f1a\u51fa\u4e00\u4e9b\u5947\u602a\u7684\u9519\u8bef\n\tint k=++cnt;\n\tt[k].val=t[k].sum1=data;\n\tt[k].siz=1;\n\tt[k].key=rand();\n\tt[k].ch[0]=t[k].ch[1]=0;\n\tt[k].rev=0;\n\tt[k].cov=-1;\n\tfor(int i=0;i<=1;i++){\n\t\tt[k].lmax[i]=t[k].rmax[i]=t[k].mx[i]=(data==i);\n\t}\n\treturn k;\n}\ninline void update(int k){\n\tt[k].siz=t[t[k].ch[0]].siz+t[t[k].ch[1]].siz+1;\n\tt[k].sum1=t[t[k].ch[0]].sum1+t[t[k].ch[1]].sum1+t[k].val;\n\tfor(int i=0;i<=1;i++){\n\t\tt[k].lmax[i]=t[t[k].ch[0]].lmax[i];\n\t\tt[k].rmax[i]=t[t[k].ch[1]].rmax[i];\n\t\tt[k].mx[i]=max(t[t[k].ch[0]].mx[i],t[t[k].ch[1]].mx[i]);\n\t\tif(t[k].val==i){//\u5f53i\u7b49\u4e8e\u8282\u70b9\u7684\u503c\u65f6\u8fd8\u8981\u518d\u6b21\u66f4\u65b0\n\t\t\tif(t[t[k].ch[0]].sum1==(i?t[t[k].ch[0]].siz:0)){//\u5224\u65ad\u662f\u5426\u5de6\u5b50\u6811\u5185\u90fd\u662f\u76f8\u540c\u7684\u503c(\u5e76\u4e14\u7b49\u4e8ei)\n\t\t\t\tt[k].lmax[i]+=1+t[t[k].ch[1]].lmax[i];\n\t\t\t}\n\t\t\tif(t[t[k].ch[1]].sum1==(i?t[t[k].ch[1]].siz:0)){//\u7c7b\u4e0a\n\t\t\t\tt[k].rmax[i]+=1+t[t[k].ch[0]].rmax[i];\n\t\t\t}\n\t\t\tt[k].mx[i]=max(t[k].mx[i],t[t[k].ch[0]].rmax[i]+1+t[t[k].ch[1]].lmax[i]);\n\t\t}\n\t}\n}\ninline void pushdown(int k){\n\tif(t[k].rev){\n\t\tt[t[k].ch[0]].Rev();\n\t\tt[t[k].ch[1]].Rev();\n\t\tt[k].rev=0;\n\t}\n\tif(t[k].cov!=-1){\n\t\tt[t[k].ch[0]].Cov(t[k].cov);\n\t\tt[t[k].ch[1]].Cov(t[k].cov);\n\t\tt[k].cov=-1;\n\t}\n}\nint Merge(int l,int r){\n\tif(!l||!r){\n\t\treturn l+r;\n\t}\n\tpushdown(l),pushdown(r);\n\tif(t[l].key<t[r].key){\n\t\tt[l].ch[1]=Merge(t[l].ch[1],r);\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse{\n\t\tt[r].ch[0]=Merge(l,t[r].ch[0]);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\nvoid Split(int k,int data,int &l,int &r){\n\tif(!k){\n\t\tl=r=0;\n\t\treturn ;\n\t}\n\tpushdown(k);\n\tif(t[t[k].ch[0]].siz+1<=data){\n\t\tl=k;\n\t\tSplit(t[k].ch[1],data-t[t[k].ch[0]].siz-1,t[k].ch[1],r);\n\t}\n\telse{\n\t\tr=k;\n\t\tSplit(t[k].ch[0],data,l,t[k].ch[0]);\n\t}\n\tupdate(k);\n}\ninline void Change(int x,int y,int d){\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tt[p].Cov(d);\n\troot=Merge(Merge(l,p),r);\n}\ninline void Reverse(int x,int y){\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tt[p].Rev();\n\troot=Merge(Merge(l,p),r);\n}\ninline int Count1(int x,int y){\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tint ans=t[p].sum1;\n\troot=Merge(Merge(l,p),r);\n\treturn ans;\n}\ninline int Ask_MX(int x,int y){\n\tint l,p,r;\n\tSplit(root,y,l,r);\n\tSplit(l,x-1,l,p);\n\tint ans=t[p].mx[1];\n\troot=Merge(Merge(l,p),r);\n\treturn ans;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;++i){\n\t\tint x=read();\n\t\troot=Merge(root,NewNode(x));\n\t}\n\tfor(register int i=1;i<=m;++i){\n\t\tint opt=read(),l=read()+1,r=read()+1;\n\t\tif(opt==0){\n\t\t\tChange(l,r,0);\n\t\t}\n\t\telse if(opt==1){\n\t\t\tChange(l,r,1);\n\t\t}\n\t\telse if(opt==2){\n\t\t\tReverse(l,r);\n\t\t}\n\t\telse if(opt==3){\n\t\t\tprintf(\"%d\\n\",Count1(l,r));\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d\\n\",Ask_MX(l,r));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n[*Froggy's blog*](https://www.luogu.org/blog/1445353309froggy/)\n\n#### \u5471!!\n",
        "postTime": 1573483924,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "# [SCOI2010]\u5e8f\u5217\u64cd\u4f5c\n\u6b64\u9898\u4e3a \u771f\u00b7\u7801\u519c\u9898 \u505a\u5b8c\u6b64\u9898\u8d76\u811a\u5bf9\u7ebf\u6bb5\u6811\u6709\u4e862\u66f4\u597d\u7684\u7406\u89e3\n\n\u5982\u679c\u6ca1\u505a\u8fc7 $P 2253$\u53ef\u4ee5\u5148\u53bb\u505a\u90a3\u9053\u9898,\u4e0d\u8981\u7528\u66b4\u529b\u6216\u8005\u4e71\u641e\u7b97\u6cd5~~\u4e0d\u8fc7\u597d\u50cf\u66b4\u529b\u53ef\u8fc7~~,\u90a3\u9053\u9898\u5c31\u662f\u8fd9\u9053\u9898\u7684\u5f31\u5316\u7248\u672c,~~\u63a8\u9500\u4e00\u4e0b\u6211\u5728\u90a3\u9898\u7684\u9898\u89e3~~,\u7136\u540e$pushup$\u64cd\u4f5c\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\n\n$sum$\u8868\u793a\u533a\u95f4\u6570\u7684\u548c\n\n$t[p].sum = t[ls(p)].sum + t[rs(p)].sum$\n\n$tag$\u8868\u793a\u533a\u95f4\u88ab\u96c6\u4f53\u53d8\u6210\u4e860 \u6216\u8005 1\n\n${tag|-1, 0, 1}$ \n\n-1\u8868\u793a\u672a\u4fee\u6539 \n\n0\u8868\u793a\u4fee\u6539\u4e3a0 \n\n1\u8868\u793a\u4fee\u6539\u4e3a1\n\n\u5982\u679c$tag != -1$ \n\n$t[ls(p)].sum = (t[ls(p)].r - t[ls(p)].l + 1) * t[p].tag;$\n\n$t[rs(p)].sum = (t[rs(p)].r - t[rs(p)].l + 1) * t[p].tag;$\n\n$pre[v]$ \u548c $suf[v]$\u90fd\u8d4b\u503c\u4e3a\u533a\u95f4\u957f\u5ea6\n\n$pre[v$ ^ $1]$ \u548c $suf[v $^$ 1]$\u90fd\u53d8\u4e3a0\n\n$t[p].rev$\u4e5f\u5c31\u6b64\u65e0\u6548 \u53d8\u4e3a0\n```cpp\n\n\t\tt[ls(p)].sum = (t[ls(p)].r - t[ls(p)].l + 1) * v;\n\t\tt[rs(p)].sum = (t[rs(p)].r - t[rs(p)].l + 1) * v;\n\t\t\n\t\tt[ls(p)].tag = t[rs(p)].tag = v;\n\t\tt[ls(p)].rev = t[rs(p)].rev = 0;\n\t\t\n\t\tt[ls(p)].pre[v] = t[ls(p)].suf[v] = t[ls(p)].dat[v] = (t[ls(p)].r - t[ls(p)].l + 1);\n\t\tt[ls(p)].pre[v ^ 1] = t[ls(p)].suf[v ^ 1] = t[ls(p)].dat[v ^ 1] = 0;\n\t\t\n\t\tt[rs(p)].pre[v] = t[rs(p)].suf[v] = t[rs(p)].dat[v] = (t[rs(p)].r - t[rs(p)].l + 1);\n\t\tt[rs(p)].pre[v ^ 1] = t[rs(p)].suf[v ^ 1] = t[rs(p)].dat[v ^ 1] = 0;\n\t\t\n\t\tt[p].tag = -1;\n```\n\n$rev$\u8868\u793a\u662f\u5426\u88ab\u53cd\u8f6c\n\n\u4e0b\u65b9\u65f6\u5206\u4e24\u79cd\u60c5\u51b5\u5982\u679c$tag = [1 / 0]$ $tag = !(tag)$\n\u5426\u5219$tag = -1$, rev = rev ^ 1,\u5982\u679c\u5148\u524d\u5df2\u7ecf\u88ab\u53cd\u8f6c\u8fc7\u4e86,\u90a3\u4e48\u5148\u524d\u7684\u53cd\u8f6c\u65e0\u6548,\u5426\u5219\u5c31\u52a0\u4e0a1\n\n$dat[0/1]$ \u5b9e\u73b0\u8f83\u7b80\u5355\u5177\u4f53\u770b\u4ee3\u7801\n\n$suf[0/1]$ \u5b9e\u73b0\u8f83\u7b80\u5355\u5177\u4f53\u770b\u4ee3\u7801\n\n$pre[0/1]$ \u5b9e\u73b0\u8f83\u7b80\u5355\u5177\u4f53\u770b\u4ee3\u7801\n\n\u7136\u540e\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u4e1c\u897f,\u770b\u4e0b\u9762\u4e24\u6bb5$change$\u51fd\u6570,\u4e00\u4e2a100\u5206,\u4e00\u4e2a10\u5206,\u8bf7\u60a8\u81ea\u884c\u601d\u8003\u4e3a\u4ec0\u4e48 $ps:$\u8003\u8651$pushdown$\u64cd\u4f5c\u5bf9$change$\u51fd\u6570\u5185\u90e8\u5f71\u54cd\n\n```cpp\nvoid change(int p, int l, int r, int v){\n\tpush_down(p);\n\tif (l <= t[p].l && t[p].r <= r){\n\t\tif (v == 0 || v == 1){\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) * v;\n\t\t\tt[p].tag = v;\n\t\t\tt[p].pre[v] = t[p].suf[v] = t[p].dat[v] = (t[p].r - t[p].l + 1);\n\t\t\tt[p].pre[v ^ 1] = t[p].suf[v ^ 1] = t[p].dat[v ^ 1] = 0;\n\t\t} \n\t\telse if (v == 2) {\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) - t[p].sum;\n\t\t\tt[p].rev ^= 1;\n\t\t\tswap(t[p].pre[0], t[p].pre[1]);\n\t\t\tswap(t[p].suf[0], t[p].suf[1]);\n\t\t\tswap(t[p].dat[0], t[p].dat[1]);\n\t\t}\n\t\treturn;\n\t}\n\t\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (l <= mid) change(ls(p), l, r, v);\n\tif (r > mid) change(rs(p), l, r, v);\n\tpush_up(p);\n}\n/*\nvoid change(int p, int l, int r, int v){\n\tif (l <= t[p].l && t[p].r <= r){\n\t\tif (v == 0 || v == 1){\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) * v;\n\t\t\tt[p].tag = v;\n\t\t\tt[p].pre[v] = t[p].suf[v] = t[p].dat[v] = (t[p].r - t[p].l + 1);\n\t\t\tt[p].pre[v ^ 1] = t[p].suf[v ^ 1] = t[p].dat[v ^ 1] = 0;\n\t\t} \n\t\telse if (v == 2) {\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) - t[p].sum;\n\t\t\tt[p].rev ^= 1;\n\t\t\tswap(t[p].pre[0], t[p].pre[1]);\n\t\t\tswap(t[p].suf[0], t[p].suf[1]);\n\t\t\tswap(t[p].dat[0], t[p].dat[1]);\n\t\t}\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (mid < l) change(rs(p), l, r, v);\n\telse if (r <= mid) change(ls(p), l, r, v);\n\telse change(ls(p), l, mid, v), change(rs(p), mid + 1, r, v);\n\tpush_up(p);\n}\n*/\n```\n\u5b8c\u6574\u7248\n\n\n# code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n    ll f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nconst int MAX_N = 2e5 + 50;\n\nint n, m, a[MAX_N];\n\nstruct segment_tree{\n\tint l, r;\n\tint sum, tag, rev, pre[2], suf[2], dat[2];\n\t#define ls(p) (p << 1)\n\t#define rs(p) (p << 1 | 1)\n}t[MAX_N << 2];\n\nvoid push_up(int p){\n\tt[p].sum = t[ls(p)].sum + t[rs(p)].sum;\n\tfor (int i = 0; i <= 1; i ++ ){\n\t\tt[p].pre[i] = t[ls(p)].pre[i];\n\t\tif (i == 1 && t[ls(p)].sum == (t[ls(p)].r - t[ls(p)].l + 1)) \n\t\t\tt[p].pre[i] += t[rs(p)].pre[i];\n\t\telse if (i == 0 && t[ls(p)].sum == 0) \n\t\t\tt[p].pre[i] += t[rs(p)].pre[i];\n\t\t\n\t\tt[p].suf[i] = t[rs(p)].suf[i];\n\t\tif (i == 1 && t[rs(p)].sum == (t[rs(p)].r - t[rs(p)].l + 1))\n\t\t\tt[p].suf[i] += t[ls(p)].suf[i];\n\t\telse if (i == 0 && t[rs(p)].sum == 0)\n\t\t\tt[p].suf[i] += t[ls(p)].suf[i];\n\t\t\n\t\tt[p].dat[i] = t[ls(p)].suf[i] + t[rs(p)].pre[i];\n\t\tt[p].dat[i] = max(t[p].dat[i], t[ls(p)].dat[i]);\n\t\tt[p].dat[i] = max(t[p].dat[i], t[rs(p)].dat[i]);\n\t\tt[p].dat[i] = max(t[p].dat[i], t[p].pre[i]);\n\t\tt[p].dat[i] = max(t[p].dat[i], t[p].suf[i]);\n\t}\n}\n\nvoid push_down(int p){\n\tif (t[p].tag != -1) {\n\t\tt[p].rev = 0;\n\t\tint v = t[p].tag;\n\t\t\n\t\tt[ls(p)].sum = (t[ls(p)].r - t[ls(p)].l + 1) * v;\n\t\tt[rs(p)].sum = (t[rs(p)].r - t[rs(p)].l + 1) * v;\n\t\t\n\t\tt[ls(p)].tag = t[rs(p)].tag = v;\n\t\tt[ls(p)].rev = t[rs(p)].rev = 0;\n\t\t\n\t\tt[ls(p)].pre[v] = t[ls(p)].suf[v] = t[ls(p)].dat[v] = (t[ls(p)].r - t[ls(p)].l + 1);\n\t\tt[ls(p)].pre[v ^ 1] = t[ls(p)].suf[v ^ 1] = t[ls(p)].dat[v ^ 1] = 0;\n\t\t\n\t\tt[rs(p)].pre[v] = t[rs(p)].suf[v] = t[rs(p)].dat[v] = (t[rs(p)].r - t[rs(p)].l + 1);\n\t\tt[rs(p)].pre[v ^ 1] = t[rs(p)].suf[v ^ 1] = t[rs(p)].dat[v ^ 1] = 0;\n\t\t\n\t\tt[p].tag = -1;\n\t}\n\tif (t[p].rev) {\n\t\tt[ls(p)].sum = (t[ls(p)].r - t[ls(p)].l + 1) - t[ls(p)].sum;\n\t\tt[rs(p)].sum = (t[rs(p)].r - t[rs(p)].l + 1) - t[rs(p)].sum;\n\t\t\n\t\tif (t[ls(p)].tag != -1) t[ls(p)].tag ^= 1;\n\t\telse t[ls(p)].rev ^= 1;\n\t\tif (t[rs(p)].tag != -1) t[rs(p)].tag ^= 1;\n\t\telse t[rs(p)].rev ^= 1;\n\t\t\n\t\tswap(t[ls(p)].dat[0], t[ls(p)].dat[1]);\n\t\tswap(t[ls(p)].suf[0], t[ls(p)].suf[1]);\n\t\tswap(t[ls(p)].pre[0], t[ls(p)].pre[1]);\n\t\t\n\t\tswap(t[rs(p)].dat[0], t[rs(p)].dat[1]);\n\t\tswap(t[rs(p)].suf[0], t[rs(p)].suf[1]);\n\t\tswap(t[rs(p)].pre[0], t[rs(p)].pre[1]);\n\t\t\n\t\tt[p].rev = 0;\n\t}\n\treturn;\n}\n\nvoid build (int p, int l, int r) {\n\tt[p].l = l; t[p].r = r; t[p].tag = -1;\n\tif (l == r) {\n\t\tt[p].sum = a[l];\n\t\tt[p].pre[a[l]] = t[p].suf[a[l]] = t[p].dat[a[l]] = 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p), l, mid);\n\tbuild(rs(p), mid + 1, r);\n\tpush_up(p);\n}\n\nvoid change(int p, int l, int r, int v){\n\tpush_down(p);\n\tif (l <= t[p].l && t[p].r <= r){\n\t\tif (v == 0 || v == 1){\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) * v;\n\t\t\tt[p].tag = v;\n\t\t\tt[p].pre[v] = t[p].suf[v] = t[p].dat[v] = (t[p].r - t[p].l + 1);\n\t\t\tt[p].pre[v ^ 1] = t[p].suf[v ^ 1] = t[p].dat[v ^ 1] = 0;\n\t\t} \n\t\telse if (v == 2) {\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) - t[p].sum;\n\t\t\tt[p].rev ^= 1;\n\t\t\tswap(t[p].pre[0], t[p].pre[1]);\n\t\t\tswap(t[p].suf[0], t[p].suf[1]);\n\t\t\tswap(t[p].dat[0], t[p].dat[1]);\n\t\t}\n\t\treturn;\n\t}\n\t\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (l <= mid) change(ls(p), l, r, v);\n\tif (r > mid) change(rs(p), l, r, v);\n\tpush_up(p);\n}\n/*\nvoid change(int p, int l, int r, int v){\n\tif (l <= t[p].l && t[p].r <= r){\n\t\tif (v == 0 || v == 1){\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) * v;\n\t\t\tt[p].tag = v;\n\t\t\tt[p].pre[v] = t[p].suf[v] = t[p].dat[v] = (t[p].r - t[p].l + 1);\n\t\t\tt[p].pre[v ^ 1] = t[p].suf[v ^ 1] = t[p].dat[v ^ 1] = 0;\n\t\t} \n\t\telse if (v == 2) {\n\t\t\tt[p].sum = (t[p].r - t[p].l + 1) - t[p].sum;\n\t\t\tt[p].rev ^= 1;\n\t\t\tswap(t[p].pre[0], t[p].pre[1]);\n\t\t\tswap(t[p].suf[0], t[p].suf[1]);\n\t\t\tswap(t[p].dat[0], t[p].dat[1]);\n\t\t}\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (mid < l) change(rs(p), l, r, v);\n\telse if (r <= mid) change(ls(p), l, r, v);\n\telse change(ls(p), l, mid, v), change(rs(p), mid + 1, r, v);\n\tpush_up(p);\n}\n*/\nll query_sum(int p, int l, int r){\n\tif (l <= t[p].l && t[p].r <= r) \n\t\treturn t[p].sum;\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tint ans = 0;\n\tif (l <= mid) ans += query_sum(ls(p), l, r);\n\tif (r > mid) ans += query_sum(rs(p), l, r);\n\treturn ans;\n}\n\nsegment_tree query_len(int p, int l, int r){\n\tif (l <= t[p].l && t[p].r <= r) \n\t\treturn t[p];\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (r <= mid) return query_len(ls(p), l, r);\n\tif (l > mid) return query_len(rs(p), l, r);\n\tsegment_tree t1 = query_len(ls(p), l, r), t2 = query_len(rs(p), l, r), t3;\n\tt3.sum = t1.sum + t2.sum;\n\tfor (int i = 0; i <= 1; i ++ ){\n\t\tt3.pre[i] = t1.pre[i];\n\t\tif (i == 1 && t1.sum == (t1.r - t1.l + 1)) \n\t\t\tt3.pre[i] += t2.pre[i];\n\t\telse if (i == 0 && t1.sum == 0) \n\t\t\tt3.pre[i] += t2.pre[i];\n\t\t\n\t\tt3.suf[i] = t2.suf[i];\n\t\tif (i == 1 && t2.sum == (t2.r - t2.l + 1))\n\t\t\tt3.suf[i] += t1.suf[i];\n\t\telse if (i == 0 && t2.sum == 0)\n\t\t\tt3.suf[i] += t1.suf[i];\n\t\t\n\t\tt3.dat[i] = t1.suf[i] + t2.pre[i];\n\t\tt3.dat[i] = max(t3.dat[i], t1.dat[i]);\n\t\tt3.dat[i] = max(t3.dat[i], t2.dat[i]);\n\t\tt3.dat[i] = max(t3.dat[i], t3.pre[i]);\n\t\tt3.dat[i] = max(t3.dat[i], t3.suf[i]);\n\t}\n\treturn t3;\n}\n\nint main() {\n\tn = read(); m = read();\n\tfor (int i = 1; i <= n; i ++ ) a[i] = read();\n\tbuild(1, 1, n); \n\tfor (int i = 1; i <= m; i ++ ){\n\t\tint opt = read(), l = read(), r = read();\n\t\tl ++ , r ++ ;\n\t\tif (opt == 0) change(1, l, r, 0);\n\t\tif (opt == 1) change(1, l, r, 1);\n\t\tif (opt == 2) change(1, l, r, 2);\n\t\tif (opt == 3) printf(\"%d\\n\", query_sum(1, l, r));\n\t\tif (opt == 4) printf(\"%d\\n\", query_len(1, l, r).dat[1]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1566178463,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": ">\u4fee\u6539\u4e86\u6392\u7248\n\n\u8fd9\u4e2a\u9898\u7684\u7ec6\u8282\u5f88\u9ebb\u70e6\u2026\u2026\u5b9a\u4e49\u7ebf\u6bb5\u6811\uff1a\n\n$sum$:\u8fd9\u6bb5\u533a\u95f4\u5185$1$\u7684\u603b\u6570\n\n$Lb$:\u8fd9\u6bb5\u533a\u95f4\u5185\u8fde\u7eed$0$\u7684\u6700\u5927\u957f\u5ea6\n\n$Lw$:\u8fd9\u6bb5\u533a\u95f4\u5185\u8fde\u7eed$1$\u7684\u6700\u5927\u957f\u5ea6\n\n$llb$:\u8fd9\u6bb5\u533a\u95f4\u4ece\u5de6\u7aef\u70b9\u8fde\u7eed$0$\u7684\u6700\u5927\u957f\u5ea6\n\n$llw$:\u8fd9\u6bb5\u533a\u95f4\u4ece\u5de6\u7aef\u70b9\u8fde\u7eed$1$\u7684\u6700\u5927\u957f\u5ea6\n\n$rlb$:\u8fd9\u6bb5\u533a\u95f4\u4ece\u53f3\u7aef\u70b9\u8fde\u7eed$0$\u7684\u6700\u5927\u957f\u5ea6\n\n$rlw$:\u8fd9\u6bb5\u533a\u95f4\u4ece\u53f3\u7aef\u70b9\u8fde\u7eed$1$\u7684\u6700\u5927\u957f\u5ea6\n\n$fl$:\u7ffb\u8f6c\u6807\u8bb0\n\n$lazy$:\u4e0b\u63a8\u6807\u8bb0\uff08\u8bb0\u5f55\u662f\u5426\u5168\u8d4b\u4e3a$1$\u6216$0$\uff09\n\n\u597d\u4e71...\n\n\u53ef\u4ee5\u627e\u51fa\u4e0a\u63a8\u5173\u7cfb\u5f0f\uff1a\uff08$0$\u8868\u793a\u5de6\u513f\u5b50\uff0c$1$\u8868\u793a\u53f3\u513f\u5b50\uff09\n\n$sum=sum_0+sum_1$\n\n$Lb=max(Lb_0,Lb_1,rlb_0+llb_1)$\uff08$Lw$\u540c\u7406\uff09\n\n$if(llb_0==mid-l+1)$ $llb=llb_0+llb_1$\uff08$llw$\u540c\u7406\uff09\n\n$if(rlb_1==r-mid)$ $rlb=rlb_1+rlb_0$\uff08$rlw$\u540c\u7406)\n\n\u7136\u800c\u6700\u6076\u5fc3\u7684\u662f\u6807\u8bb0\u4e0b\u63a8\uff0c$lazy$\u7684\u4f18\u5148\u7ea7\u80af\u5b9a\u5927\u4e8e\u7ffb\u8f6c\u6807\u8bb0\uff08\u5168\u53d8\u4e3a\u4e00\u4e2a\u6570\u5c31\u628a\u7ffb\u8f6c\u7ed3\u679c\u8986\u76d6\u4e86\uff09\n\n\u6240\u4ee5\u5148\u5224\u65ad$lazy$,\u5982\u679c\u6709$lazy$,\u5de6\u53f3\u513f\u5b50\u7684\u7ffb\u8f6c\u6807\u8bb0\u90fd\u8981\u6e05\u7a7a\n\n\u7136\u540e\u5c31\u662f\u6162\u6162\u6253\u4ee3\u7801\u4e86...\n\n### \u4ee3\u7801\n```\n# include<iostream>\n# include<cstdio>\n# include<cstring>\n# define mid (l+r>>1)\n# define tl (k<<1)\n# define tr (k<<1|1)\nusing namespace std;\nconst int MAX=1e5+1;\nstruct p{\n    int sum,Lw,Lb,llw,rlw,llb,rlb,lazy,fl;\n}s[MAX<<2];\nint n,m;\nint max(int x,int y)\n{\n    return x>y?x:y;\n}\nvoid pus(int l,int r,int k)\n{\n    s[k].sum=s[tl].sum+s[tr].sum;\n    \n    s[k].Lb=max(s[tl].Lb,s[tr].Lb);\n    s[k].Lw=max(s[tl].Lw,s[tr].Lw);\n    \n    s[k].llb=s[tl].llb;\n    s[k].llw=s[tl].llw;\n    if(s[tl].llw==mid-l+1)\n    s[k].llw+=s[tr].llw;\n    if(s[tl].llb==mid-l+1)\n    s[k].llb+=s[tr].llb;\n    \n    s[k].rlb=s[tr].rlb;\n    s[k].rlw=s[tr].rlw;\n    if(s[tr].rlw==r-mid)\n    s[k].rlw+=s[tl].rlw;\n    if(s[tr].rlb==r-mid)\n    s[k].rlb+=s[tl].rlb;\n    \n    s[k].Lw=max(s[k].Lw,s[tl].rlw+s[tr].llw);\n    s[k].Lb=max(s[k].Lb,s[tl].rlb+s[tr].llb);\n}\nvoid down(int l,int r,int k)\n{\n    int f=s[k].lazy,fl=s[k].fl,L1=mid-l+1,L2=r-mid;\n    s[k].lazy=-1;\n    if(!f)\n    {\n        s[tl]=(p){0,0,L1,0,0,L1,L1,0,0};\n        s[tr]=(p){0,0,L2,0,0,L2,L2,0,0};\n    }\n    else if(f==1)\n    {\n        s[tl]=(p){L1,L1,0,L1,L1,0,0,1,0};\n        s[tr]=(p){L2,L2,0,L2,L2,0,0,1,0};\n    }\n    if(fl)\n    {\n        s[k].fl=0;\n        int sum=s[tl].sum,Lw=s[tl].Lw,Lb=s[tl].Lb,llw=s[tl].llw,rlw=s[tl].rlw,llb=s[tl].llb,rlb=s[tl].rlb;\n        s[tl].sum=L1-sum;\n\ts[tl].Lw=Lb,s[tl].Lb=Lw;\n\ts[tl].llw=llb,s[tl].rlw=rlb;\n\ts[tl].llb=llw,s[tl].rlb=rlw;\n\ts[tl].fl^=1;\n        \n        sum=s[tr].sum,Lw=s[tr].Lw,Lb=s[tr].Lb,llw=s[tr].llw,rlw=s[tr].rlw,llb=s[tr].llb,rlb=s[tr].rlb;\n        s[tr].sum=L2-sum;\n\ts[tr].Lw=Lb,s[tr].Lb=Lw;\n\ts[tr].llw=llb,s[tr].rlw=rlb;\n\ts[tr].llb=llw,s[tr].rlb=rlw;\n\ts[tr].fl^=1;\n    }\n}\nvoid build(int l,int r,int k)\n{\n    s[k].lazy=-1;\n    if(l==r)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        s[k]=(p){x,x,(x^1),x,x,(x^1),(x^1),-1,0};\n        return;\n    }\n    build(l,mid,tl);\n    build(mid+1,r,tr);\n    pus(l,r,k);\n}\nvoid change1(int l,int r,int k,int L,int R)\n{\n    if(l>=L&&r<=R)\n    {\n        int LL=r-l+1;\n        s[k]=(p){0,0,LL,0,0,LL,LL,0,0};\n        return;\n    }\n    if(l>R||r<L) return;\n    down(l,r,k);\n    change1(l,mid,tl,L,R);\n    change1(mid+1,r,tr,L,R);\n    pus(l,r,k);\n}\nvoid change2(int l,int r,int k,int L,int R)\n{\n    if(l>=L&&r<=R)\n    {\n        int LL=r-l+1;\n        s[k]=(p){LL,LL,0,LL,LL,0,0,1,0};\n        return;\n    }\n    if(l>R||r<L) return;\n    down(l,r,k);\n    change2(l,mid,tl,L,R);\n    change2(mid+1,r,tr,L,R);\n    pus(l,r,k);\n}\nvoid change3(int l,int r,int k,int L,int R)\n{\n    if(l>=L&&r<=R)\n    {\n        int LL=r-l+1,sum=s[k].sum,Lw=s[k].Lw,Lb=s[k].Lb,llw=s[k].llw,rlw=s[k].rlw,llb=s[k].llb,rlb=s[k].rlb;\n        s[k]=(p){LL-sum,Lb,Lw,llb,rlb,llw,rlw,s[k].lazy,(s[k].fl^1)};\n        return;\n    }\n    if(l>R||r<L) return;\n    down(l,r,k);\n    change3(l,mid,tl,L,R);\n    change3(mid+1,r,tr,L,R);\n    pus(l,r,k);\n}\nint ask1(int l,int r,int k,int L,int R)\n{\n    if(l>=L&&r<=R) return s[k].sum;\n    if(l>R||r<L) return 0;\n    down(l,r,k);\n    return ask1(l,mid,tl,L,R)+ask1(mid+1,r,tr,L,R);\n}\np ask2(int l,int r,int k,int L,int R)\n{\n    if(l>=L&&r<=R) return s[k];\n    if(l>R||r<L) return (p){0};\n    down(l,r,k);\n    p LL=ask2(l,mid,tl,L,R),RR=ask2(mid+1,r,tr,L,R),ans;\n    ans.sum=LL.sum+RR.sum;\n    ans.Lw=max(LL.Lw,RR.Lw);\n    ans.Lb=max(LL.Lb,RR.Lb);\n    ans.llw=LL.llw,ans.rlw=RR.rlw;//\n    ans.llb=LL.llb,ans.rlb=RR.rlb;//\n    if(LL.llb==mid-l+1) ans.llb+=RR.llb;\n    if(LL.llw==mid-l+1) ans.llw+=RR.llw;\n    if(RR.rlb==r-mid) ans.rlb+=LL.rlb;\n    if(RR.rlw==r-mid) ans.rlw+=LL.rlw;\n    ans.Lw=max(ans.Lw,LL.rlw+RR.llw);\n    ans.Lb=max(ans.Lb,LL.rlb+RR.llb);\n    return ans;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n      {\n      \tint op,a,b;\n      \tscanf(\"%d%d%d\",&op,&a,&b);\n      \ta++,b++;\n      \tif(!op) change1(1,n,1,a,b);\n      \telse if(op==1) change2(1,n,1,a,b);\n      \telse if(op==2) change3(1,n,1,a,b);\n      \telse if(op==3) printf(\"%d\\n\",ask1(1,n,1,a,b));\n      \telse if(op==4) printf(\"%d\\n\",ask2(1,n,1,a,b).Lw);\n      }\n    return 0;\n}\n```\n### [\u535a\u5ba2](https://a-failure.github.io/2018/03/15/SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/)",
        "postTime": 1518180606,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "## \u66f4\u68d2\u7684 bitset \u64cd\u4f5c\uff0c\u5c3d\u5728\u672c\u9898\u89e3\u4e2d\uff01\n\n### \u4f20\u7edf bitset\n\n\u89c2\u5bdf\u5230\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u662f $10^5$\uff0c\u800c\u4e14\u5168\u662f $01$ \u4e32\uff0c\u56e0\u6b64\u8054\u60f3\u5230 $O(n^2w^{-1})$ \u7684 bitset\u3002\uff08\u672c\u6587\u4e2d $w$ \u5747\u8868\u793a\u5b57\u957f\uff0c\u9ed8\u8ba4 $64$\uff09\u3002\n\n\u4f20\u7edf\u7684 bitset \u53ef\u4ee5\u501f\u52a9\u4f4d\u8fd0\u7b97\u8f7b\u677e\u5730\u7ef4\u62a4\u533a\u95f4\u7f6e $0$\u3001\u533a\u95f4\u7f6e $1$\u3001\u533a\u95f4\u7ffb\u8f6c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(n/w)$\u3002\u800c\u4e14\u8fd9\u4e09\u8005\u4ee3\u7801\u6781\u4e3a\u63a5\u8fd1\uff0c\u4e00\u822c\u5199\u5b8c\u4e00\u4e2a\u7a0d\u5fae\u6539\u6539\u5c31\u80fd\u5f97\u5230\u53e6\u4e00\u4e2a\u3002\n\n\u540c\u65f6\u501f\u52a9 `__builtin_popcountll` \u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\log w)$\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u533a\u95f4\u6570 $1$ \u7684\u4ee3\u7801\u3002\n\n### \u96be\u70b9\n\n\u4f46\u662f\u533a\u95f4\u6570\u8fde\u7eed $1$ \u6570\u5e76\u4e0d\u597d\u7ef4\u62a4\u2014\u2014\u54ea\u6015\u7ef4\u62a4\u540c\u4e00 `int64` \u7684\u524d\u7f00\u3001\u540e\u7f00 $1$ \u6570\u91cf\u53ef\u4ee5\u7528 `lowbit` \u548c `__lg` \u89e3\u51b3\uff0c\u540c\u5757\u8fde\u7eed $1$ \u6570\u91cf\u4e5f\u6ca1\u6709\u5bf9\u5e94\u7684\u4f4d\u8fd0\u7b97\u624b\u6bb5\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u64cd\u4f5c\u6211\u4eec\u53ea\u80fd\u653e\u5f03\u4f4d\u8fd0\u7b97\uff0c\u76f4\u63a5\u5c06\u4e00\u5757\u5185\u6240\u6709\u60c5\u5f62\u5168\u90e8\u9884\u5904\u7406\u51fa\u5de6\u4fa7 $1$ \u6570\u3001\u53f3\u4fa7 $1$ \u6570\u3001\u8fde\u7eed $1$ \u6570\u3002\n\n\u8fd9\u4e5f\u5c31\u5bfc\u81f4\u5bf9\u4e8e\u8fd9\u79cd\u8fd0\u7b97\u6211\u4eec\u9009\u53d6\u7684\u5757\u957f\u4e0d\u80fd\u662f $64$ \u4e86\uff08\u6211\u9009\u7684 $16$\uff0c\u4e5f\u5c31\u662f\u4e00\u5927\u5757\u53d8\u56db\u5c0f\u5757\uff0c\u8981\u662f\u6709\u4eba\u4e0d\u6015\u9ebb\u70e6\u53ef\u4ee5\u9009 $21,21,22$\uff09\uff0c\u4f46\u662f\u524d\u51e0\u79cd\u64cd\u4f5c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u9009 $64$\u3002\n\n### \u6ce8\u610f\u4e8b\u9879 & \u8c03\u8bd5\u6280\u5de7\n\n- `unsigned long long` \u6ea2\u51fa\u662f\u6709\u5b9a\u4e49\u7684\uff0c`long long` \u6ea2\u51fa\u7b97 UB\u3002\n- \u5f53\u4f60\u8981\u53d6\u4e8c\u8fdb\u5236\u67d0\u4e00\u4f4d\u65f6\u8bf7\u5199\u6210 `1ull<<x`\uff08\u800c\u975e `1<<x`\uff09\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002\n- \u5927\u90e8\u5206\u540c\u5b66\u7528\u5c0f\u7aef\u6cd5 `bitset` \u5b58\u50a8\uff08\u4e5f\u5c31\u662f $2^0$ \u4f4d\u5bf9\u5e94 $seq_0$\uff09\uff0c\u4f46\u662f\u5de6\u79fb\u53f3\u79fb\u8fd0\u7b97\u4ecd\u7136\u5efa\u7acb\u5728\u5927\u7aef\u6cd5\u57fa\u7840\u4e0a\uff0c\u56e0\u6b64\u4e24\u79cd\u8bb0\u6cd5\u4e0d\u8981\u5f04\u6df7\u3002\n- **\uff08\u9002\u7528\u4e8e\u6240\u6709\u9898\u76ee\uff09** \u4f60\u8ba4\u4e3a\u662f\u96be\u70b9\u3001\u6700\u5bb9\u6613\u51fa\u9519\u7684\u5730\u65b9\u53ef\u80fd\u53cd\u800c\u6ca1\u90a3\u4e48\u5bb9\u6613\u51fa\u9519\uff0c\u6bd4\u5982\u8fd9\u9053\u9898\u6211\u4e00\u76f4\u5728 $4$ \u64cd\u4f5c\u4e0a\u627e\u95ee\u9898\u627e\u4e86\u4e00\u4e0b\u5348\uff0c\u6700\u540e\u53d1\u73b0\u662f $0$ \u64cd\u4f5c\u6709\u4e00\u5904 $l,r$ \u5199\u6210 $bl,br$ \u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Rsh=6,B=1<<Rsh,B4=16,Bmx=65535;\n//\u5757\u957f\u662f2\u7684Rsh\u6b21\u65b9\u4e5f\u5c31\u662fB\uff0c\u7279\u522b\u5730\uff0c4\u64cd\u4f5c\u5757\u957f\u4e3a B4\uff0c\u5757\u5185\u6700\u5927\u503cBmx\nint n,m,cb[1<<16],l1[1<<16],r1[1<<16];\nunsigned long long a[1565],op[64][64];\n//op[l][r]\u4e3a\u4e8c\u8fdb\u5236\u7b2cl..r\u4f4d\u5747\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u4e3a\u51cf\u5c0f\u4f4d\u8fd0\u7b97\u6253\u9519\u6982\u7387\u6211\u8bbe\u8ba1\u6210\u8fd9\u6837\nvoid set0(int l,int r)//[l,r]\n{\n\tint bl=l>>Rsh,br=r>>Rsh;\n\tl&=B-1;r&=B-1;\n\tif(bl==br)//\u7279\u5224\u540c\u4e00\u5757\n\t{\n\t\ta[bl]&=~op[l][r];\n\t\treturn;\n\t}\n\ta[bl]&=~op[l][B-1];\n\ta[br]&=~op[0][r];\n\tfor(int i=bl+1;i<br;i++)\n\t\ta[i]=0;\n}\nvoid set1(int l,int r)\n{\n\tint bl=l>>Rsh,br=r>>Rsh;\n\tl&=B-1;r&=B-1;\n\tif(bl==br)\n\t{\n\t\ta[bl]|=op[l][r];\n\t\treturn;\n\t}\n\ta[bl]|=op[l][B-1];\n\ta[br]|=op[0][r];\n\tfor(int i=bl+1;i<br;i++)\n\t\ta[i]=-1ull;\n}\nvoid rev(int l,int r)\n{\n\tint bl=l>>Rsh,br=r>>Rsh;\n\tl&=B-1;r&=B-1;\n\tif(bl==br)\n\t{\n\t\ta[bl]^=op[l][r];\n\t\treturn;\n\t}\n\ta[bl]^=op[l][B-1];\n\ta[br]^=op[0][r];\n\tfor(int i=bl+1;i<br;i++)\n\t\ta[i]^=-1ull;\n}\n#define BPL __builtin_popcountll \nint countbit(int l,int r)\n{\n\tint bl=l>>Rsh,br=r>>Rsh;\n\tl&=B-1;r&=B-1;\n\tif(bl==br)\n\t\treturn BPL(a[bl]&op[l][r]);\n\tint tot=BPL(a[bl]&op[l][B-1])+BPL(a[br]&op[0][r]);\n\tfor(int i=bl+1;i<br;i++)\n\t\ttot+=BPL(a[i]);\n\treturn tot;\n}\nint combo(int l,int r)\n{\n\tif((l>>4)==(r>>4))//\u5176\u5b9e\u8fd9\u4e0d\u662f\u5fc5\u987b\uff0c\u89c1\u540e\u9762\u4ee3\u7801\n\t\treturn cb[(a[l>>Rsh]&op[l&(B-1)][r&(B-1)])>>(l&(B-1))];\n\tint bl=l>>Rsh,br=r>>Rsh,overall=0,mxr=0;\n    //overall\u8bb0\u5f55\u5f53\u524d\u6240\u6709\u8fde\u7eed1\u6700\u5927\u503c\uff0cmxr\u8bb0\u5f55\u5f53\u524d\u6709\u51e0\u4e2a\u8fde\u7eed\u76841\n\tunsigned long long RealAbl=a[bl],RealAbr=a[br];\n    //\u4e3a\u8282\u7701\u8ba8\u8bba\uff0c\u6211\u4eec\u5c06\u5e72\u6270\u6e05\u7a7a\uff0c\u5b8c\u4e8b\u91cd\u65b0\u5199\u5165\n\ta[bl]&=op[l&(B-1)][B-1];a[br]&=op[0][r&(B-1)];\n\tfor(int i=bl;i<=br;i++)\n\t{\n\t\tfor(int j=1;j<=4;j++)\n\t\t{\n\t\t\tunsigned long long v=a[i]<<(B-j*B4)>>(3*B4);//\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6d89\u53ca\u5927\u7aef\u6cd5\u548c\u5c0f\u7aef\u6cd5\u7684\u533a\u522b\n\t\t\tif(v==Bmx)//\u5982\u679c\u8fd9\u5757\u5168 1\n\t\t\t{\n\t\t\t\toverall=max(overall,mxr+B4);\n\t\t\t\tmxr+=B4;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toverall=max(overall,max(mxr+r1[v],cb[v]));\n\t\t\t\tmxr=l1[v];\n\t\t\t}\n\t\t}\n\t}\n\ta[bl]=RealAbl;a[br]=RealAbr;\n\treturn overall;\n}\nint main()\n{\n\tfor(int i=0;i<B;i++)//\u9884\u5904\u7406 op\u6570\u7ec4\n\t{\n\t\top[i][i]=1ull<<i;\n\t\tfor(int j=i+1;j<B;j++)\n\t\t\top[i][j]=op[i][j-1]|(1ull<<j);\n\t}\n\tfor(int i=0;i<(1<<B4);i++)\n\t{\n\t\tif(i&1)r1[i]=r1[i>>1]+1;//\u5927\u7aef\u6cd5\u53f3\u4fa7 1 \u4e2a\u6570\n\t\telse r1[i]=0;\n\t\tcb[i]=max(cb[i>>1],r1[i]);//\u5757\u5185\u6700\u5927\u8fde\u7eed 1 \u4e2a\u6570\n\t\tfor(int j=i;j&(1<<B4-1);j=(j<<1)^(1<<B4))l1[i]++;//\u5927\u7aef\u6cd5\u5de6\u4fa7 1 \u4e2a\u6570\uff0c\u53cd\u6b63\u4e0d\u662f\u74f6\u9888\uff0c\u591a\u4e2alog\u65e0\u6240\u8c13\u4e86\n\t}\n\tscanf(\"%d%d\",&n,&m);\n\tunsigned long long tmp;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tscanf(\"%llu\",&tmp);\n\t\ta[i>>Rsh]|=tmp<<(i&(B-1));\n\t}\n\tint op,l,r;\n\tfor(;m;m--)\n\t{\n\t\tscanf(\"%d%d%d\",&op,&l,&r);\n\t\tif(op==0)set0(l,r);\n\t\tif(op==1)set1(l,r);\n\t\tif(op==2)rev(l,r);\n\t\tif(op==3)printf(\"%d\\n\",countbit(l,r));\n\t\tif(op==4)printf(\"%d\\n\",combo(l,r));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1668006697,
        "uid": 101694,
        "name": "yummy",
        "ccfLevel": 7,
        "title": "bitset \u57fa\u672c\u64cd\u4f5c\u590d\u4e60"
    },
    {
        "content": "[\u535a\u5ba2\u5730\u5740](https://mivik.gitee.io/2019/11/12/scoi2010-sequenceoperations.html)\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problem/P2572)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a01\u5e8f\u5217\uff0c\u8981\u6c42\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n- \u533a\u95f4\u8d4b\u503c\n- \u533a\u95f4\u53d6\u53cd\n- \u67e5\u8be2\u533a\u95f4\u51851\u7684\u4e2a\u6570\n- \u67e5\u8be2\u533a\u95f4\u5185\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76841\n\n## \u9898\u76ee\u601d\u8def\n\n\u5c31\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u8fc7\u6211\u501f\u8fd9\u6b21\u673a\u4f1a\u5b8c\u5584\u4e86\u4e00\u4e0b\u6211\u7684\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u7ed3\u6784\n\n\u8fd9\u4e2a\u7ed3\u6784\u8fd8\u662f\u5f88\u5b8c\u5584\u548c\u89e3\u8026\u7684\uff0c\u53ef\u4ee5\u5728\u5927\u90e8\u5206\u9898\u76ee\u91cc\u9762\u4f7f\u7528\uff0c\u4ee3\u7801\u8f83\u4e3a\u7b80\u6d01\u4e14\u601d\u8def\u6e05\u6670\n\n## \u4ee3\u7801\u57fa\u672c\u601d\u8def\n\n\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u5e8f\u5217\u7684\u6570\u636e\u7c7b\u578b\u4e3a`V`\uff0c\u6bd4\u5982\u672c\u9898\u4e2d`V`\u4e3a`bool`\n\n\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u7ed3\u6784\u4f53\n\n- Data\n\n  \u8bb0\u5f55\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u6709\u9700\u8981\u7ef4\u62a4\u7684\u503c\u548c\u672c\u533a\u95f4\u7684\u957f\u5ea6\n\n- Tag\n\n  \u8bb0\u5f55\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u5f85\u4e0b\u4f20\u7684\u4fee\u6539\u6807\u8bb0\n\n\u5b83\u4eec\u5206\u522b\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff08\u65b9\u6cd5\u540d\u53ef\u6709\u4e0d\u540c\uff0c\u65b9\u4fbf\u7406\u89e3\u5373\u53ef\uff09\uff1a\n\n- Data\n\n```cpp\nvoid init(const V &); //\u7528\u4e00\u4e2a\u503c\u6765\u521d\u59cb\u5316\u7ebf\u6bb5\u6811\u8282\u70b9\uff08\u8981\u6c42\u662f\u53f6\u5b50\u8282\u70b9\uff09\nvoid merge(const Data &, const Data &); //\u5c06\u5de6\u53f3\u4e24\u4e2aData\u5408\u5e76\u4e3a\u81ea\u5df1\n//\u5176\u4ed6\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u672c\u9898\u4e2d\u6709set\u8d4b\u503c,reverse\u53cd\u8f6c\n```\n\n- Tag\n\n```cpp\noperator bool(); //\u8fd4\u56de\u8be5Tag\u662f\u5426\u9700\u8981\u4e0b\u4f20\nvoid operator+=(const Tag &); //\u5c06\u81ea\u5df1\u548c\u53e6\u4e00\u4e2aTag\u5408\u5e76\nvoid apply(const Data &); //\u5c06\u81ea\u5df1\u4ee3\u8868\u7684\u4fee\u6539\u5e94\u7528\u4e8e\u4e00\u4e2aData\u4e0a\nvoid clear(); //\u6e05\u9664Tag\u5e26\u6709\u7684\u4e0b\u4f20\u6807\u8bb0\n```\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u9996\u5148\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u5b8f\u5b9a\u4e49ww\n\n```cpp\ntypedef const int &iint; //iint\u4ee3\u8868\u4e0d\u53d8\u7684\u53d8\u91cf\uff0c\u901a\u5e38\u5728\u4f20\u53c2\u4e2d\u7528\u5230\uff0c\u636e\u8bf4\u6709\u52a9\u4e8e\u4f18\u5316\u5185\u5b58\n#define ls (x<<1) //\u5de6\u513f\u5b50\n#define rs (ls|1) //\u53f3\u513f\u5b50\n#define LL ls,l,mid //\u5de6\u513f\u5b50\u6240\u9700\u8981\u4f20\u7684\u53c2\uff0c\u7531\u6b64build(ls,l,mid)\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3abuild(LL)\n#define RR rs,mid+1,r //\u4e0e\u4e0a\u9762\u7c7b\u4f3c\n```\n\n\n\n\u5bf9\u4e8e\u672c\u9898\u6765\u8bb2\uff0c\u6211\u4eec\u7684Data\u4e2d\u9700\u8981\u7ef4\u62a4\n\n```cpp\nint cnt; //\u533a\u95f4\u4e2d1\u7684\u4e2a\u6570\nint lsm; //\u533a\u95f4\u4ece\u5de6\u8fb9\u5f00\u59cb\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76f8\u540c\u7684\u6570\nint rsm; //\u533a\u95f4\u4ece\u53f3\u8fb9\u5f00\u59cb\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76f8\u540c\u7684\u6570\nbool ld; //\u533a\u95f4\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6570\nbool rd; //\u533a\u95f4\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6570\nint mx[2]; //\u533a\u95f4\u6700\u591a\u8fde\u7eed\u7684(0\u7684\u4e2a\u6570/1\u7684\u4e2a\u6570)\nint len; //\u533a\u95f4\u957f\u5ea6\n```\n\n\u5177\u4f53\u5b9e\u73b0\n\n```cpp\nstruct Data {\n\tint cnt,lsm,rsm,mx[2];\n\tbool ld,rd;\n\tint len;\n\tinline void init(const bool &val) { //\u53f6\u5b50\u7ed3\u70b9\u8d4b\u521d\u503c\n\t\tmx[val]=len=lsm=rsm=1;\n\t\tcnt=ld=rd=val;\n\t}\n\tinline void set(const bool &val) { //\u533a\u95f4\u8d4b\u503c\n\t\tlsm=rsm=len;\n\t\tcnt=len*val;\n\t\tmx[val]=len,mx[!val]=0;\n\t\tld=rd=val;\n\t}\n\tinline void reverse() { //\u533a\u95f4\u53cd\u8f6c\n\t\tld=!ld,rd=!rd,cnt=len-cnt;\n\t\tswap(mx[0],mx[1]);\n\t}\n\tinline void merge(const Data &a, const Data &b) { //\u5c06\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u4e3a\u81ea\u5df1\n\t\tlen=a.len+b.len;\n\t\tcnt=a.cnt+b.cnt;\n\t\tld=a.ld,rd=b.rd;\n\t\tlsm=a.lsm;\n\t\tif (a.lsm==a.len&&a.ld==b.ld) lsm+=b.lsm; //\u5982\u679c\u5de6\u8fb9\u5168\u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14\u53f3\u533a\u95f4\u80fd\u548c\u5de6\u533a\u95f4\u8fde\u4e0a\uff0c\u90a3\u5c31\u52a0\u4e0a\u53f3\u533a\u95f4\u7684lsm\n\t\trsm=b.rsm;\n\t\tif (b.rsm==b.len&&b.rd==a.rd) rsm+=a.rsm; //\u548c\u4e0a\u9762\u7c7b\u4f3c\n\t\tmx[0]=mx[1]=0;\n\t\tmx[a.rd]+=a.rsm;\n\t\tmx[b.ld]+=b.lsm; //\u7b80\u5355\u601d\u8003\u4e00\u4e0b\u5373\u53ef\u660e\u767d\n\t\tmx[0]=max(mx[0],max(a.mx[0],b.mx[0]));\n\t\tmx[1]=max(mx[1],max(a.mx[1],b.mx[1]));\n\t}\n};\n```\n\n\u6211\u4eec\u8fd9\u91cc\u5c06\u6240\u6709\u7ed3\u70b9\u7684Data\u8bb0\u4e3a\u6570\u7ec4 $d$\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5199\u51fa\u6211\u4eec\u7684\u4e0a\u4f20(pu)\u548c\u5efa\u6811(build)\u51fd\u6570\uff1a\n\n```cpp\ninline void pu(iint x) {\n\td[x].merge(d[ls],d[rs]);\n}\nvoid build(iint x=1, iint l=1, iint r=n) {\n\tif (l==r) { //\u53f6\u5b50\u8282\u70b9\n\t\td[x].init(a[l]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(LL);\n\tbuild(RR);\n\tpu(x);\n}\n```\n\n\u600e\u4e48\u6837\uff01\u4ee3\u7801\u662f\u4e0d\u662f\u5f88\u7b80\u77edww\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u6765\u5b9e\u73b0\u6211\u4eec\u7684Tag\uff0c\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a\n\n```cpp\nbool set, sval; //\u5206\u522b\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u662f\u5426\u6709\u8d4b\u503c\u4ee5\u53ca\u8d4b\u6210\u4ec0\u4e48\u503c\nbool rev; //\u5f53\u524d\u533a\u95f4\u662f\u5426\u6709\u53cd\u8f6c\n```\n\n**\u7d27\u63a5\u7740\u5c31\u662f\u6700\u5bb9\u6613\u51fa\u9519\u7684Tag\u5408\u5e76\u90e8\u5206\uff01**\n\n\u6211\u4eec\u4e00\u5b9a\u8981\u4fdd\u8bc1**\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\u4e0d\u80fd\u51fa\u73b0\u4e00\u4e2aTag\u65e2\u6709\u8d4b\u503c\u53c8\u6709\u53cd\u8f6c\u7684\u60c5\u51b5**\uff0c\u56e0\u4e3a\u90a3\u6837\u6211\u4eec\u5c06\u65e0\u6cd5\u786e\u5b9a\u8d4b\u503c\u548c\u53cd\u8f6c\u7684\u987a\u5e8f\n\n\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u7684\u5b9e\u73b0\n\n```cpp\nstruct Tag {\n\tbool set,sval;\n\tbool rev;\n\tinline operator bool() const { return set||rev; } //\u8c03\u7528\u65f6\u76f4\u63a5\u7528Tag t;if(t){xxx...}\uff0c\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u628atag\u8f6c\u6362\u4e3abool\n\tinline void operator+=(const Tag &t) { //\u533a\u95f4\u5408\u5e76\n\t\tif (t.set) { //\u5982\u679c\u8981\u6c42\u8d4b\u503c\n\t\t\tset=1;\n\t\t\tsval=t.sval; //\u5c31\u8d4b\u6210\u8fd9\u4e2a\u503c\n\t\t\trev=0; //\u540c\u65f6\u628a\u81ea\u5df1\u539f\u672c\u7684\u53cd\u8f6c\u6807\u8bb0\u6e05\u7a7a\n\t\t} else if (t.rev) { //\u5426\u5219\uff0c\u5982\u679c\u8981\u6c42\u53cd\u8f6c\n\t\t\tif (set) sval=!sval; //\u5982\u679c\u81ea\u5df1\u5df2\u7ecf\u6709\u8d4b\u503c\u4e86\uff0c\u5c31\u628a\u81ea\u5df1\u8981\u8d4b\u7684\u503c\u53cd\u8f6c\n\t\t\telse rev^=1; //\u5426\u5219\u8bb0\u5f55\u53cd\u8f6c\u6807\u8bb0\n\t\t}\n\t}\n\tinline void apply(Data &d) const {\n\t\tif (set) d.set(sval);\n\t\telse if (rev) d.reverse();\n\t}\n\tinline void clear() { set=sval=rev=0; } // \u6e05\u7a7a\u6807\u8bb0\n};\n```\n\n\u6709\u4e86\u8fd9\u4e2aTag\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u6211\u4eec\u7684\u4e0b\u4f20(pd)\u51fd\u6570\uff1a\n\n```cpp\ninline void pd(iint x) {\n\tTag &t=tag[x];\n\tif (!t) return; //\u5982\u679c\u6ca1\u6709\u9700\u8981\u4e0b\u4f20\u7684\u6807\u8bb0\uff0c\u5219\u8fd4\u56de\n\tt.apply(d[ls]),tag[ls]+=t;\n\tt.apply(d[rs]),tag[rs]+=t;\n\tt.clear();\n}\n```\n\nupdate\u51fd\u6570\u548cquery\u51fd\u6570\u4e5f\u6613\u4e8e\u7406\u89e3\n\n```cpp\nint ll,rr; //\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u672c\u6b21\u4fee\u6539/\u67e5\u8be2\u7684\u5de6\u53f3\u7aef\u70b9\nTag tt; //\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u672c\u6b21\u4fee\u6539\u8981\u4e0b\u4f20\u7684\u6807\u8bb0\nvoid update(iint x=1, iint l=1, iint r=n) {\n\tif (ll<=l&&r<=rr) {\n\t\ttag[x]+=tt;\n\t\ttt.apply(d[x]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tpd(x);\n\tif (mid>=ll) update(LL);\n\tif (mid<rr) update(RR);\n\tpu(x);\n}\nData query(iint x=1, iint l=1, iint r=n) {\n\tif (ll<=l&&r<=rr) return d[x];\n\tint mid=(l+r)>>1;\n\tpd(x);\n\t// \u5bf9\u4e8e\u53ea\u9700\u8981\u67e5\u8be2\u5de6/\u53f3\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u8fd4\u56de\u5de6/\u53f3\u533a\u95f4\u7684\u67e5\u8be2\u7ed3\u679c\n\tif (mid<ll) return query(RR);\n\tif (mid>=rr) return query(LL);\n\t// \u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4\u90fd\u6709\u5305\u542b\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5219\u9700\u8981\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u8fd4\u56de\u7684Data\n\tData ret;\n\tret.merge(query(LL),query(RR));\n\treturn ret;\n}\n```\n\n\u6700\u540e\u6211\u4eec\u7684main\u51fd\u6570\u5c31\u5f88\u597d\u5199\u5566\uff0c\u4e0b\u9762\u76f4\u63a5\u8d34\u4e0a\u5168\u90e8\u4ee3\u7801\u5427\n\n```cpp\n// Mivik 2019.11.12\n// **************\n// \u4e0b\u6587\u4e2dR\u4ee3\u8868\u8bfb\u5165(Read())\uff0c\u7531\u4e8e\u9898\u89e3\u9650\u5236\u5e76\u6ca1\u6709\u653e\u4e0aRead\u7684\u5b9e\u73b0ww\n// **************\n#include <iostream>\n#include <cstdio>\n\n#define endl '\\n'\n#define R Read()\n\ntypedef const int &iint;\n\nconst int nmax = 100005;\nconst int tmax = 262150;\n#define ls (x<<1)\n#define rs (ls|1)\n#define LL ls,l,mid\n#define RR rs,mid+1,r\nusing namespace std;\n\nint n,m;\nbool a[nmax];\nint ll,rr;\nbool qcnt;\nstruct Data {\n\tint cnt,lsm,rsm,mx[2];\n\tbool ld,rd;\n\tint len;\n\tinline void init(const bool &val) {\n\t\tmx[val]=len=lsm=rsm=1;\n\t\tcnt=ld=rd=val;\n\t}\n\tinline void set(const bool &val) {\n\t\tlsm=rsm=len;\n\t\tcnt=len*val;\n\t\tmx[val]=len,mx[!val]=0;\n\t\tld=rd=val;\n\t}\n\tinline void reverse() {\n\t\tld=!ld,rd=!rd,cnt=len-cnt;\n\t\tswap(mx[0],mx[1]);\n\t}\n\tinline void merge(const Data &a, const Data &b) {\n\t\tlen=a.len+b.len;\n\t\tcnt=a.cnt+b.cnt;\n\t\tld=a.ld,rd=b.rd;\n\t\tlsm=a.lsm;\n\t\tif (a.lsm==a.len&&a.ld==b.ld) lsm+=b.lsm;\n\t\trsm=b.rsm;\n\t\tif (b.rsm==b.len&&b.rd==a.rd) rsm+=a.rsm;\n\t\tmx[0]=mx[1]=0;\n\t\tmx[a.rd]+=a.rsm;\n\t\tmx[b.ld]+=b.lsm;\n\t\tmx[0]=max(mx[0],max(a.mx[0],b.mx[0]));\n\t\tmx[1]=max(mx[1],max(a.mx[1],b.mx[1]));\n\t}\n} d[tmax];\nstruct Tag {\n\tbool set,sval;\n\tbool rev;\n\tinline operator bool() const { return set||rev; }\n\tinline void operator+=(const Tag &t) {\n\t\tif (t.set) {\n\t\t\tset=1;\n\t\t\tsval=t.sval;\n\t\t\trev=0;\n\t\t} else if (t.rev) {\n\t\t\tif (set) sval=!sval;\n\t\t\telse rev^=1;\n\t\t}\n\t}\n\tinline void apply(Data &d) const {\n\t\tif (set) d.set(sval);\n\t\telse if (rev) d.reverse();\n\t}\n\tinline void clear() { set=sval=rev=0; }\n} tag[tmax],tt;\ninline void pu(iint x) { d[x].merge(d[ls],d[rs]); }\ninline void pd(iint x) {\n\tTag &t=tag[x];\n\tif (!t) return;\n\tt.apply(d[ls]),tag[ls]+=t;\n\tt.apply(d[rs]),tag[rs]+=t;\n\tt.clear();\n}\nvoid build(iint x=1, iint l=1, iint r=n) {\n\tif (l==r) {\n\t\td[x].init(a[l]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(LL);\n\tbuild(RR);\n\tpu(x);\n}\nvoid update(iint x=1, iint l=1, iint r=n) {\n\tif (ll<=l&&r<=rr) {\n\t\ttag[x]+=tt;\n\t\ttt.apply(d[x]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tpd(x);\n\tif (mid>=ll) update(LL);\n\tif (mid<rr) update(RR);\n\tpu(x);\n}\nData query(iint x=1, iint l=1, iint r=n) {\n\tif (ll<=l&&r<=rr) return d[x];\n\tint mid=(l+r)>>1;\n\tpd(x);\n\tif (mid<ll) return query(RR);\n\tif (mid>=rr) return query(LL);\n\tData ret;\n\tret.merge(query(LL),query(RR));\n\treturn ret;\n}\nint main() {\n\tint i;\n\tn=R,m=R;\n\tfor (i=1;i<=n;i++) a[i]=R;\n\tbuild();\n\twhile (m--) {\n\t\ti=R,ll=R+1,rr=R+1; //\u672c\u6b21\u64cd\u4f5c\u7684\u5de6\u53f3\u7aef\u70b9\n\t\tswitch (i) {\n\t\t\tcase 0:tt={1,0,0};update();break;\n\t\t\tcase 1:tt={1,1,0};update();break;\n\t\t\tcase 2:tt={0,0,1};update();break;\n\t\t\tcase 3:cout<<query().cnt<<endl;break;\n\t\t\tcase 4:cout<<query().mx[1]<<endl;break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n----\n\n\n[\u6b22\u8fce\u6765\u6211\u7684\u535a\u5ba2\u901b\u901b](https://mivik.gitee.io)",
        "postTime": 1573526818,
        "uid": 45182,
        "name": "Mivik",
        "ccfLevel": 9,
        "title": "[\u9898\u89e3] [SCOI2010] \u5e8f\u5217\u64cd\u4f5c"
    },
    {
        "content": "0 a b \u628a[a, b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u62100\n\n1 a b \u628a[a, b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u62101\n\n2 a b \u628a[a,b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u90e8\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u6240\u6709\u76840\u53d8\u62101\uff0c\u628a\u6240\u6709\u76841\u53d8\u62100\n\n3 a b \u8be2\u95ee[a, b]\u533a\u95f4\u5185\u603b\u5171\u6709\u591a\u5c11\u4e2a1\n\n4 a b \u8be2\u95ee[a, b]\u533a\u95f4\u5185\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76841\n\n\uff01~~\u6211\u77e5\u9053\uff01\u7ebf\u6bb5\u6811~~\uff01\n\n\u76f8\u4fe1\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u65b9\u6cd5\uff0c\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u6765\u4ecb\u7ecd\u4e00\u4e0b\u6211\u7684\u6807\u8bb0\u4e0b\u653e\u7684\u65b9\u6cd5\uff0c\u611f\u89c9\u5f88\u597d\u5b9e\u73b0\u7684\u591a\uff1a\n\n\u6211\u4eec\u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.\u62e5\u6709\u8986\u76d6\u6807\u8bb0\u7684\u7236\u533a\u95f4\u4e0b\u653e\u7ed9\u62e5\u6709\u533a\u95f4\u53cd\u8f6c\u6807\u8bb0\u7684\u5b50\u533a\u95f4\uff1a\u76f4\u63a5\u8986\u76d6\u6389\u53cd\u8f6c\u6807\u8bb0\uff1b\n\n2.\u62e5\u6709\u53cd\u8f6c\u6807\u8bb0\u7684\u7236\u533a\u95f4\u4e0b\u653e\u7ed9\u62e5\u6709\u533a\u95f4\u8986\u76d6\u6807\u8bb0\u7684\u5b50\u533a\u95f4\uff1a**\u8fd9\u65f6\u4e0d\u7528\u7ed9\u5b50\u533a\u95f4\u4e0b\u653e\u53cd\u8f6c\u6807\u8bb0\uff0c\u76f4\u63a5\u628a\u5b50\u533a\u95f4\u8986\u76d6\u6807\u8bb0\u53cd\u8f6c\uff01**\n\n\u8fd9\u6837\uff0c\u4e00\u4e2a\u533a\u95f4\u6700\u591a\u53ea\u4f1a\u540c\u65f6\u62e5\u67091\u4e2a\u6807\u8bb0\uff0c\u4e0d\u4f1a\u6709\u51b2\u7a81\u4e86\uff1b\n\n\u4e00\u4e2a\u5c0f\u63d0\u793a\uff1a\n\n\u5728\u8fdb\u884c\u533a\u95f4\u53cd\u8f6c\u64cd\u4f5c\u65f6\uff0c\u5728\u4fee\u6539\u6807\u8bb0\u524d\uff0c\u5148\u628a\u539f\u6765\u7684\u6807\u8bb0\u4e0b\u653e\uff1b\n\n~~\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801~~\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\n#include<ctime>\n#include<climits>\n#include<cctype>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pairint pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\n#define gc getchar\ntemplate<class T>void in(T &x)\n{\n    x = 0;\n    bool f = 0;\n    char c = gc();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-') f = 1;\n        c = gc();\n    }\n    while ('0' <= c && c <= '9')\n    {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = gc();\n    }\n    if (f) x = -x;\n}\n#undef gc\n#define pb push_back\n#define N 100005\n#define M N<<3\n#define ls (x<<1)\n#define rs (x<<1|1)\n#define gm int mid=((l+r)>>1)\n// 1100\nint n;\nint chu[N];// len : 0/1: zero one; 0/1 left/right\nint cnt[M][2],len[M][2][2],mx[M][2];\nint rev[M],laz[M]; // laz > rev\nconst int rt=1;\nil void up(int x,int l,int r,int mid)\n{\n    cnt[x][0]=cnt[ls][0]+cnt[rs][0];\n    len[x][0][0]=(len[ls][0][0]==mid-l+1)?(len[ls][0][0]+len[rs][0][0]):len[ls][0][0];\n    len[x][0][1]=(len[rs][0][1]==r-mid)?(len[rs][0][1]+len[ls][0][1]):len[rs][0][1];\n    mx[x][0]=max(max(mx[ls][0],mx[rs][0]),len[ls][0][1]+len[rs][0][0]);\n    // 1\n    cnt[x][1]=cnt[ls][1]+cnt[rs][1];\n    len[x][1][0]=(len[ls][1][0]==mid-l+1)?(len[ls][1][0]+len[rs][1][0]):len[ls][1][0];\n    len[x][1][1]=(len[rs][1][1]==r-mid)?(len[rs][1][1]+len[ls][1][1]):len[rs][1][1];\n    mx[x][1]=max(max(mx[ls][1],mx[rs][1]),len[ls][1][1]+len[rs][1][0]);\n}\nvoid build(int x,int l,int r)\n{\n    if(l==r)\n    {\n        cnt[x][chu[l]]=1;\n        len[x][chu[l]][0]=len[x][chu[l]][1]=1;\n        mx[x][chu[l]]=1;\n        return;\n    }\n    gm;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    up(x,l,r,mid);\n    // printf(\"C %d %d: %d\\n\",l,r,cnt[x][1]);\n}\n// cnt, len, mx\nil void down(int x,int l,int r)\n{\n    if(laz[x])\n    {\n        laz[x]&=1;\n        rev[x]=0;\n        cnt[x][laz[x]]=r-l+1;\n        cnt[x][laz[x]^1]=0;\n        len[x][laz[x]][0]=len[x][laz[x]][1]=r-l+1;\n        len[x][laz[x]^1][0]=len[x][laz[x]^1][1]=0;\n        mx[x][laz[x]]=r-l+1;\n        mx[x][laz[x]^1]=0;\n        laz[ls]=laz[x]+2;\n        laz[rs]=laz[x]+2;\n        laz[x]=0;\n    }\n    else if(rev[x])\n    {\n        swap(cnt[x][0],cnt[x][1]);\n        swap(len[x][0][0],len[x][1][0]);\n        swap(len[x][0][1],len[x][1][1]);\n        swap(mx[x][0],mx[x][1]);\n        if(laz[ls]) laz[ls]^=1;\n        else rev[ls]^=1;\n        if(laz[rs]) laz[rs]^=1;\n        else rev[rs]^=1;\n        rev[x]=0;\n    }\n}\nvoid change(int x,int l,int r,int ql,int qr,int op)\n{\n    if(ql<=l&&r<=qr)\n    {\n        laz[x]=op+2;\n        down(x,l,r);\n        return;\n    }\n    down(x,l,r);\n    gm;\n    if(ql<=mid) change(ls,l,mid,ql,qr,op);\n    else down(ls,l,mid);\n    if(qr>mid) change(rs,mid+1,r,ql,qr,op);\n    else down(rs,mid+1,r);\n    up(x,l,r,mid);\n}\nvoid change2(int x,int l,int r,int ql,int qr)\n{\n    down(x,l,r);\n    if(ql<=l&&r<=qr)\n    {\n        rev[x]^=1;\n        down(x,l,r);\n        return;\n    }\n    gm;\n    if(ql<=mid) change2(ls,l,mid,ql,qr);\n    else down(ls,l,mid);\n    if(qr>mid) change2(rs,mid+1,r,ql,qr);\n    else down(rs,mid+1,r);\n    up(x,l,r,mid);\n}\nint query(int x,int l,int r,int ql,int qr)\n{\n    down(x,l,r);\n    if(ql<=l&&r<=qr)\n        return cnt[x][1];\n    gm;\n    int t=0;\n    if(ql<=mid) t=query(ls,l,mid,ql,qr);\n    if(qr>mid) t+=query(rs,mid+1,r,ql,qr);\n    return t;\n}\nstruct Node\n{\n    int l,r,m,al;\n    Node() {}\n    Node(int tl,int tr,int mm,int all)\n    {\n        l=tl,r=tr,m=mm,al=all;\n    }\n};\nil void pup(Node &x,Node v)\n{\n    x.m=max(max(x.m,v.m),x.r+v.l);\n    x.l=x.al?x.l+v.l:x.l;\n    x.r=v.al?x.r+v.r:v.r;\n    x.al&=v.al;\n}\nNode query2(int x,int l,int r,int ql,int qr)\n{\n    down(x,l,r);\n    if(ql<=l&&r<=qr)\n        return Node(len[x][1][0],len[x][1][1],mx[x][1],cnt[x][1]==r-l+1);\n    gm;\n    Node t(0,0,0,1);\n    if(ql<=mid) t=query2(ls,l,mid,ql,qr);\n    if(qr>mid) pup(t,query2(rs,mid+1,r,ql,qr));\n    return t;\n}\nsigned main()\n{\n#ifdef M207\n    freopen(\"in.in\", \"r\", stdin);\n#endif\n    int q;\n    in(n); in(q);\n    for(ri i=1; i<=n; ++i)\n        in(chu[i]);\n    build(rt,1,n);\n    int op,a,b;\n    while(q--)\n    {\n        in(op),in(a),in(b);\n        ++a,++b;\n        if(op==0||op==1) change(rt,1,n,a,b,op);\n        else if(op==2) change2(rt,1,n,a,b);\n        else if(op==3) printf(\"%d\\n\",query(rt,1,n,a,b));\n        else printf(\"%d\\n\",query2(rt,1,n,a,b).m);\n    }\n    return 0;\n}\n```",
        "postTime": 1538030044,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811-P2572 [SCOI2010]\u5e8f\u5217\u64cd\u4f5c-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8c03\u4e86\u5f88\u4e45,\u6765\u5199\u4e2a\u9898\u89e3(~~\u524d\u540e\u6709\u5173\u7cfb\u5417~~)\u3002\n\n\u4e3b\u8981\u4e0d\u662f\u6765\u8bb2\u89e3\u6cd5\u7684,\u800c\u662f\u6765\u5c06\u5982\u4f55\u7701\u601d\u7ef4\u96be\u5ea6\u7684\u3002\n\n**\u4ecb\u7ecd\u4e00\u4e0b\u5199\u590d\u6742\u7ebf\u6bb5\u6811\u9898\u76ee\u7684\u6280\u5de7\u3002**\n\n\u91c7\u7528\u8fd9\u4e9b\u6280\u5de7,\u5728\u8fd9\u9898,\u5c31\u4e0d\u7528\u8ba8\u8bba\u61d2\u6807\u8bb0\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528,\u65e2\u7701\u4e0b\u4e86\u4ee3\u7801\u91cf\u53c8\u7701\u4e0b\u4e86\u5e38\u6570\u3002\n\n\n\u9996\u5148\u5462,\u8fd9\u9053\u9898\u7684\u67e5\u8be2\u6709**\u533a\u95f4\u548c**+**\u533a\u95f4\u6700\u5927\u8fde\u7eed1**\u3002\n\n\u524d\u8005,\u53ea\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4{\u533a\u95f4\u548c}\u5c31\u597d\u4e86,\u5341\u5206\u7b80\u5355\u3002\n\n\u540e\u8005,\u5341\u5206\u5957\u8def\u5730,\u7ef4\u62a4{\u533a\u95f4\u5de6\u7aef\u6700\u957f\u8fde\u7eed1,\u533a\u95f4\u53f3\u7aef\u6700\u957f\u8fde\u7eed1,\u533a\u95f4\u4e2d\u6700\u957f\u8fde\u7eed1}\n\n\u5957\u8def\u89c1https://www.luogu.org/problemnew/show/P2894\n\n\u8fd9\u9053\u9898\u7684\u4fee\u6539\u6709**\u533a\u95f4\u8986\u76d6**+**\u533a\u95f4\u5f02\u6216**\u3002\n\n\u533a\u95f4\u8986\u76d6\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684,\u533a\u95f4\u5f02\u6216\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\u3002\n\n\u539f\u6765\u76841\u90fd\u53d8\u62100\u4e86,\u6240\u4ee5\u8fd8\u8981\u7ef4\u62a4{\u533a\u95f4\u5de6\u7aef\u6700\u957f\u8fde\u7eed0,\u533a\u95f4\u53f3\u7aef\u6700\u957f\u8fde\u7eed0,\u533a\u95f4\u4e2d\u6700\u957f\u8fde\u7eed0},\u5f02\u6216\u7684\u65f6\u5019swap\u3002\n\n\u5177\u4f53\u4ee3\u7801:\n\n```cpp\nstruct Node\n{ \n  char f1,f2;\n  //f1:\u8986\u76d6\u6807\u8bb0 0:\u65e0\u6807\u8bb0; 1:\u8986\u76d6\u4e3a0; 2:\u8986\u76d6\u4e3a1.\n  //f2:\u7ffb\u8f6c\u6807\u8bb0 0:\u65e0\u6807\u8bb0; 1:\u6709\u6807\u8bb0.\n  int l0,r0,l1,r1,m0,m1,x,len;\n  //l0:\u533a\u95f4\u5de6\u7aef\u6700\u957f\u8fde\u7eed0; r0:\u533a\u95f4\u53f3\u7aef\u6700\u957f\u8fde\u7eed0; m0:\u533a\u95f4\u4e2d\u6700\u957f\u8fde\u7eed0.\n  //\u5176\u4f59\u7c7b\u63a8\n  void rev(){\n    swap(l0,l1);\n    swap(r0,r1);\n    swap(m0,m1);\n    x=len-x;\n    //\u5f02\u6216\n  }\n  void set()\n  {\n    if (f1==1){\n      l1=r1=m1=x=0;\n      l0=r0=m0=len;\n    }if (f1==2){\n      l1=r1=m1=x=len;\n      l0=r0=m0=0;\n    }//\u8986\u76d6\n  }\n};\n\n\u8fd9\u91cc\u4fdd\u5b58\u7684 len \u662f\u533a\u95f4\u957f\u5ea6\u3002\n\n\u4fdd\u5b58len\u662f\u4e00\u4e2a\u5c0f\u6280\u5de7,\u53ef\u4ee5\u8282\u7701\u4ee3\u7801\u91cf\u548c\u5e38\u6570\u3002\n\n\u628a\u9488\u5bf9\u5355\u4e2a\u8282\u70b9\u7684\u4fee\u6539\u64cd\u4f5c,\u5199\u6210\u8282\u70b9\u7ed3\u6784\u4f53\u7684\u6210\u5458\u51fd\u6570,\u4e5f\u53ef\u4ee5\u8282\u7701\u4ee3\u7801\u91cf\u548c\u5e38\u6570\u3002\n```\n\n\u63a5\u4e0b\u6765\u662fbuild\n\n```cpp\n\u8fd9\u91cca\u662f\u7ebf\u6bb5\u6811\u5185\u5b58\u6c60.\n\nvoid up(int num)\n{\n  int l=num<<1,r=num<<1|1;\n  //\u4fdd\u5b58\u5de6\u53f3\u513f\u5b50\u6bd4define\u66f4\u9ad8\u6548,\u66f4\u987a\u773c\n  //\u5176\u4f59\u90fd\u662f\u5957\u8def\n  if (a[l].x==a[l].len)\n   a[num].l1=a[l].len+a[r].l1;\n  else a[num].l1=a[l].l1;\n  if (a[r].x==a[r].len)\n   a[num].r1=a[r].len+a[l].r1;\n  else a[num].r1=a[r].r1;\n  a[num].m1=max(a[l].m1,max(a[r].m1,a[r].l1+a[l].r1));\n\n  if (!a[l].x)\n   a[num].l0=a[l].len+a[r].l0;\n  else a[num].l0=a[l].l0;\n  if (!a[r].x)\n   a[num].r0=a[r].len+a[l].r0;\n  else a[num].r0=a[r].r0;\n  a[num].m0=max(a[l].m0,max(a[r].m0,a[r].l0+a[l].r0));\n\n  a[num].x=a[l].x+a[r].x;\n}\nvoid build(int l,int r,int num)\n{\n  a[num].len=r-l+1;\n  //\u4fdd\u5b58len,\u4ece\u6b64\u4e0d\u518d\u4fee\u6539 \n  if(l==r){\n  \tscanf(\"%d\",&a[num].x);\n  \ta[num].l1=a[num].r1=a[num].m1=a[num].x;\n  \ta[num].l0=a[num].r0=a[num].m0=!a[num].x;\n  \t//\u521d\u59cb\u5316\n  \treturn ;\n  }int mid=(l+r)>>1;\n  build(l,mid,num<<1);\n  build(mid+1,r,num<<1|1);\n  up(num);\n}\n\n\u90fd\u633a\u5957\u8def\u7684,\u4e0d\u518d\u8d58\u8ff0\u3002\n```\n\n\u63a5\u4e0b\u6765\u662f\u91cd\u5934\u620f:\u61d2\u6807\u8bb0\u7684\u5904\u7406\u3002\n\n\u5982\u679c\u540c\u4e00\u4e2a\u8282\u70b9\u540c\u65f6\u6709\u4e24\u4e2a\u61d2\u6807\u8bb0,\u5c31\u4f1a\u4ee4\u4eba\u8111\u9614\u75bc,\u60f3\u534a\u5929\u3002\n\n\u76f4\u63a5**\u8ba9\u4e24\u4e2a\u61d2\u6807\u8bb0\u4e92\u65a5**,\u5c31\u4e0d\u4f1a\u6709\u5982\u6b64\u9ebb\u70e6\u4e86\u3002\n\n\u4fdd\u8bc1\u4e00\u4e2a\u8282\u70b9\u53ea\u80fd\u6709\u4e00\u4e2a\u61d2\u6807\u8bb0,\u8986\u76d6\u6807\u8bb0\u548c\u5f02\u6216\u6807\u8bb0\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002\n\n\u6253\u8986\u76d6\u6807\u8bb0\u7684\u65f6\u5019,\u5982\u679c\u6709\u5f02\u6216\u6807\u8bb0,\u76f4\u63a5\u6e05\u7a7a\u3002\n\n\u6253\u5f02\u6216\u6807\u8bb0\u7684\u65f6\u5019,\u5982\u679c\u6709\u8986\u76d6\u6807\u8bb0,\u628a\u8986\u76d6\u6807\u8bb0\u7ffb\u8f6c\u3002\n\n\u8fd9\u5c31\u5b9e\u73b0\u4e86**\u8ba9\u4e24\u4e2a\u61d2\u6807\u8bb0\u4e92\u65a5**\u3002\n\n\u6b64\u5916,\u61d2\u6807\u8bb0\u6709\u4e24\u79cd,\n\n1.\u6253\u61d2\u6807\u8bb0\u7684\u8282\u70b9,\u5176\u4f59\u6570\u636e\u672a\u6b63\u786e,\u8fd8\u9700\u66f4\u65b0\n\n2.\u6253\u61d2\u6807\u8bb0\u7684\u8282\u70b9,\u5176\u4f59\u6570\u636e\u5df2\u6b63\u786e\n\n\u540e\u8005\u66f4\u4e3a\u7a33\u59a5,\u4f60\u53ef\u4ee5\u770b\u770b[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P2042)\n\n\u672c\u9898\u89e3\u91c7\u7528\u540e\u8005,\u5e38\u6570\u7565\u6709(?)\u589e\u52a0\u3002\n\n```cpp\n//\u5c01\u88c5\u518d\u591a,\u4e00\u4e2ainline\u5e38\u6570\u4e0d\u53d8\n\n//\u6253\u5f02\u6216\u6807\u8bb0\ninline void rev(int num)\n{\n  if (a[num].f1){\n    a[num].f1=1+!(a[num].f1-1);\n    a[num].set();\n    //\u6253\u5f02\u6216\u6807\u8bb0\u7684\u65f6\u5019,\u5982\u679c\u6709\u8986\u76d6\u6807\u8bb0,\u628a\u8986\u76d6\u6807\u8bb0\u7ffb\u8f6c\u3002\n  }else{a[num].f2^=1;a[num].rev();}\n  //\u5426\u5219\u4e00\u5207\u6b63\u5e38\n}\n//\u6253\u5f02\u6216\u6807\u8bb0\ninline void set(int num,int op)\n{\n  a[num].f1=op;\n  a[num].f2=0;\n  //\u6253\u8986\u76d6\u6807\u8bb0\u7684\u65f6\u5019,\u5982\u679c\u6709\u5f02\u6216\u6807\u8bb0,\u76f4\u63a5\u6e05\u7a7a\u3002\n  a[num].set();\n}\n//\u4e0b\u4f20\u61d2\u6807\u8bb0 \nvoid ladd(int num)\n{\n  if (num>n*2)return ;\n  int l=num<<1,r=num<<1|1;\n  //\u540c\u4e0a \n  if (a[num].f1){set(l,a[num].f1);set(r,a[num].f1);}\n  if (a[num].f2){rev(l);rev(r);}\n  a[num].f1=a[num].f2=0;\n}\n//\u533a\u95f4\u5de6\u53f3\u7aef\u5916\u7f6e\nint wfl,wfr;\n//\u533a\u95f4\u8986\u76d6\nvoid setline(int l,int r,int num,int op)\n{\n  if (wfl<=l&&r<=wfr){\n  \tset(num,op);\n  \treturn ;\n  }ladd(num);\n  int mid=(l+r)>>1;\n  if (wfl<=mid)setline(l,mid,num<<1,op);\n  if (wfr>mid)setline(mid+1,r,num<<1|1,op);\n  up(num);\n}\n//\u533a\u95f4\u5f02\u6216\nvoid revline(int l,int r,int num)\n{\n  if (wfl<=l&&r<=wfr){\n  \trev(num);\n  \treturn ;\n  }ladd(num);\n  int mid=(l+r)>>1;\n  if (wfl<=mid)revline(l,mid,num<<1);\n  if (wfr>mid)revline(mid+1,r,num<<1|1);\n  up(num);\n}\n```\n\n\u67e5\u8be2\u548c\u4e3b\u51fd\u6570\n\n```cpp\nvoid query(int l,int r,int num)\n{\n  ladd(num);\n  if (wfl<=l&&r<=wfr){\n  \tans[++tn]=a[num];\n    //\u5b9a\u4e49\u4e00\u4e2aans \u4e3aNode\u6570\u7ec4\u7528\u4e8e\u6536\u96c6\u7b54\u6848\u3002\n  \treturn ;\n  }int mid=(l+r)>>1;\n  if (wfl<=mid)query(l,mid,num<<1);\n  if (wfr>mid)query(mid+1,r,num<<1|1);\n}\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  build(1,n,1);\n  for (int i=1,ord;i<=m;i++){\n  \tscanf(\"%d%d%d\",&ord,&wfl,&wfr);\n    wfl++;wfr++;\n  \tif (ord<2)setline(1,n,1,ord+1);\n    if (ord==2)revline(1,n,1);\n    //\u4fee\u6539\n    if (ord>2){tn=0;query(1,n,1);}\n    if (ord==3){\n      int sum=0;\n      for (int j=1;j<=tn;j++)\n       sum+=ans[j].x;\n      //\u5c06\u4fee\u6539\u5f97\u6765\u7684\u533a\u95f4\u548c\u76f8\u52a0\n      printf(\"%d\\n\",sum);\n    }if (ord==4){\n      Node t;\n      for (int j=2;j<=tn;j++){\n      \tint l=j-1,r=j;\n      \tif (ans[l].m1==ans[l].len)\n         t.l1=ans[l].len+ans[r].l1;\n        else t.l1=ans[l].l1;\n        if (ans[r].m1==ans[r].len)\n         t.r1=ans[r].len+ans[l].r1;\n        else t.r1=ans[r].r1;\n        t.m1=max(ans[l].m1,max(ans[r].m1,ans[r].l1+ans[l].r1));\n        //\u4e0a\u9762\u53c2\u7167up\n        t.len=ans[l].len+ans[r].len;\n        ans[r]=t;\n        //\u628aans\u6570\u7ec4\u901a\u8fc7up\u5408\u6210\u4e00\u4e2a\n      }printf(\"%d\\n\",ans[tn].m1);\n      //\u76f4\u63a5\u8f93\u51fa\u6700\u540e\u4e00\u4e2a\u7684\u7b54\u6848\n      //\u6709\u70b9\u96be\u7406\u89e3,\u5927\u5bb6\u597d\u597d\u60f3\u60f3\n    }\n  }return 0;\n}\n```\n\n[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16231698)\n\n\u53ef\u4ee5\u770b\u5230,\u5728\u6ca1\u6709\u8ba4\u771f\u5361\u5e38\u6570,\u6ce8\u91cd\u4e8e\u4ee3\u7801\u91cf(\u6ca1\u5220\u6ce8\u91ca)\u548c\u601d\u7ef4\u96be\u5ea6\u7684\u60c5\u51b5\u4e0b,\u8fd8\u8dd1\u8fdb\u4e86\u6700\u4f18\u89e3\u524d\u4e09\u9875\u3002\n\n\u6240\u4ee5\u8bf4$Think\\ \\ twice,code\\ \\ once.$",
        "postTime": 1549976122,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "## 96\u884c\u8d85\u77ed\u7ebf\u6bb5\u6811\u9898\u89e3\n\n###### ~~1099ms\u7565\u6162\u52ff\u55b7~~\n\n\u672c\u9898\u89e3\u4e3b\u8981\u8bba\u8ff0\u538b\u884c\u6280\u5de7\uff0c\u601d\u8def\u5176\u4ed6\u5927\u4f6c\u8bb2\u7684\u5f88\u6e05\u6670\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\n\n\u770b\u5b8c\u9898\u4e4b\u540e\u5f53\u7136\u662f\u4e00\u773c\u7ebf\u6bb5\u6811\u5566\uff0c\u7136\u800c\u8fd9\u9898\u4f3c\u4e4e\u9700\u8981\u7ef4\u62a4\u8bb8\u591a\u4e2atag\uff0c\u8d64\u88f8\u88f8\u7684\u7801\u519c\u9898\u3002\n\n\n\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u7ef4\u62a4\u8fd9\u4e9b\u6570\u636e\uff1a\n\n`mx[2][3]`\uff0c\u8868\u793a0/1\u7ec4\u6210\u7684\u5728\u5de6\u8fb9/\u5728\u53f3\u8fb9/\u5728\u4e2d\u95f4\u7684\u6700\u957f\u8fde\u7eed\u5b50\u4e32\u3002\n\n`tag`\uff0c\u8868\u793a\u533a\u95f4\u8d4b\u503c\u3002\n\n`rev`\uff0c\u8868\u793a\u533a\u95f4\u53d6\u53cd\u3002\n\n\u663e\u800c\u6613\u89c1\uff0c\u6709\u4e86\u90a3\u4e48\u591atag\uff0cpushdown\u64cd\u4f5c\u4e00\u5b9a\u4f1a\u53c8\u81ed\u53c8\u957f\u3002\n\n### \u4e00\u3001\u5b9a\u4e49\n\n```cpp\nstruct hh{int sum,mx[2][4]/*l,r,all*/,tag;bool rev;}tr[sz<<2],null;//null\u7528\u6765\u8d4b\u521d\u503c\n#define ls tr[k<<1]\n#define rs tr[k<<1|1]\n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\n#define rep() for (int i=1;i<=3;i++)\n//define:\u51cf\u5c0f\u7801\u91cf\u7684\u597d\u65b9\u6cd5\n```\n\u6709\u4e86\u4ee5\u4e0a\u7684define\uff0c\u7801\u91cf\u5c06\u4f1a\u51cf\u5c0f\u8bb8\u591a\uff0c\u4f46\u8fd8\u4e0d\u591f\u3002\n\n### \u4e8c\u3001\u5229\u7528\u5c0f\u51fd\u6570\n\n\u6ce8\u610f\u5230pushdown\u3001modify\u7b49\u64cd\u4f5c\u4e2d\u90fd\u8981\u591a\u6b21\u5199\u533a\u95f4\u8d4b\u503c\u3001\u53d6\u53cd\u7b49\u64cd\u4f5c\uff0c\u53ef\u4ee5\u585e\u5728\u4e00\u8d77\n\n```cpp\nvoid Same(hh &x,int l,int r,int t)//\u533a\u95f4\u8d4b\u503c\u4e3at\n{\n\tx.sum=t*(r-l+1);x.tag=t;x.rev=0;\n\trep() x.mx[t][i]=r-l+1,x.mx[!t][i]=0;\n}\nvoid Rev(hh &x,int l,int r)//\u533a\u95f4\u53d6\u53cd\n{\n\tif (x.tag!=-1) return Same(x,l,r,x.tag^1);\n\tx.rev^=1;x.sum=r-l+1-x.sum;\n\trep() swap(x.mx[0][i],x.mx[1][i]);\n}\n```\n\n\u4e8e\u662f\uff0cpushdown\u64cd\u4f5c\u53ef\u4ee5\u5f00\u5fc3\u5730\u7f29\u6210\u77ed\u77ed6\u884c\n\n```cpp\nvoid pushdown(int k,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tif (tr[k].tag!=-1){int &t=tr[k].tag;Same(ls,l,mid,t);Same(rs,mid+1,r,t);t=-1;}\n\tif (tr[k].rev){tr[k].rev=0;Rev(ls,l,mid);Rev(rs,mid+1,r);}\n}\n```\n\n\u8fd9\u65f6\uff0c\u4fee\u6539\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u53d8\u77ed\u4e86\uff08\u89c1\u4e0b\u6587\uff09\n\n### \u4e09\u3001pushup\u7684\u5de7\u5999\u8fd0\u7528\n\n\u4f60\u4ee5\u4e3apushup\u53ea\u80fd\u5728\u4fee\u6539\u4e4b\u540e\u66f4\u65b0\uff1f\n\n\u9519\u5566\uff01\uff01\n\nquery\u7684\u65f6\u5019\uff0cpushup\u4e5f\u662f\u53ef\u4ee5\u7528\u7684\n\n```cpp\nvoid pushup(hh &k,hh L,hh R,int l,int r,int mid)//\u5c06int k\u6539\u4e3ahh &k\uff0c\u4f5c\u7528\u66f4\u52a0\u5e7f\u6cdb\n{\n\tk.sum=L.sum+R.sum;\n\tfor (int i=0;i<=1;i++)\n\t{\n\t\tk.mx[i][1]=(L.mx[i][1]==mid-l+1?mid-l+1+R.mx[i][1]:L.mx[i][1]);\n\t\tk.mx[i][2]=(R.mx[i][2]==r-mid?r-mid+L.mx[i][2]:R.mx[i][2]);\n\t\tk.mx[i][3]=max(max(L.mx[i][3],R.mx[i][3]),L.mx[i][2]+R.mx[i][1]);\n\t}\n}\n```\n\n\u4e8e\u662f\uff0c\u67e5\u8be2\u64cd\u4f5c\u53d8\u6210\u4e86\u8fd9\u6837\n\n```cpp\nhh query(int k,int l,int r,int x,int y)\n{\n\tint mid=(l+r)>>1;\n\thh ret=null;\n\tif (x<=l&&r<=y) return tr[k];\n\tpushdown(k,l,r);\n\tif (y<=mid) return query(lson,x,y);\n\tif (x>mid) return query(rson,x,y);\n\thh L=query(lson,x,y),R=query(rson,x,y);\n\tpushup(ret,L,R,max(x,l),min(y,r),mid);//!!!\n\treturn ret;\n}\n```\n\n\u6700\u540e\u653e\u4e0a96\u884c\u7684\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define sz 200020\nusing namespace std;\nint n,m;\nstruct hh{int sum,mx[2][4]/*l,r,mid*/,tag;bool rev;}tr[sz<<2],null;\n#define ls tr[k<<1]\n#define rs tr[k<<1|1]\n#define lson k<<1,l,mid\n#define rson k<<1|1,mid+1,r\n#define rep() for (int i=1;i<=3;i++)\nvoid Same(hh &x,int l,int r,int t)\n{\n\tx.sum=t*(r-l+1);x.tag=t;x.rev=0;\n\trep() x.mx[t][i]=r-l+1,x.mx[!t][i]=0;\n}\nvoid Rev(hh &x,int l,int r)\n{\n\tif (x.tag!=-1) return Same(x,l,r,x.tag^1);\n\tx.rev^=1;x.sum=r-l+1-x.sum;\n\trep() swap(x.mx[0][i],x.mx[1][i]);\n}\nvoid pushdown(int k,int l,int r)\n{\n\tint mid=(l+r)>>1;\n\tif (tr[k].tag!=-1){int &t=tr[k].tag;Same(ls,l,mid,t);Same(rs,mid+1,r,t);t=-1;}\n\tif (tr[k].rev){tr[k].rev=0;Rev(ls,l,mid);Rev(rs,mid+1,r);}\n}\nvoid pushup(hh &k,hh L,hh R,int l,int r,int mid)\n{\n\tk.sum=L.sum+R.sum;\n\tfor (int i=0;i<=1;i++)\n\t{\n\t\tk.mx[i][1]=(L.mx[i][1]==mid-l+1?mid-l+1+R.mx[i][1]:L.mx[i][1]);\n\t\tk.mx[i][2]=(R.mx[i][2]==r-mid?r-mid+L.mx[i][2]:R.mx[i][2]);\n\t\tk.mx[i][3]=max(max(L.mx[i][3],R.mx[i][3]),L.mx[i][2]+R.mx[i][1]);\n\t}\n}\nvoid make_same(int k,int l,int r,int x,int y,int w)\n{\n\tif (x<=l&&r<=y) return Same(tr[k],l,r,w);\n\tpushdown(k,l,r);\n\tint mid=(l+r)>>1;\n\tif (x<=mid) make_same(lson,x,y,w);\n\tif (y>mid) make_same(rson,x,y,w);\n\tpushup(tr[k],ls,rs,l,r,mid);\n}\nvoid reverse(int k,int l,int r,int x,int y)\n{\n\tif (x<=l&&r<=y) return Rev(tr[k],l,r);\n\tpushdown(k,l,r);\n\tint mid=(l+r)>>1;\n\tif (x<=mid) reverse(lson,x,y);\n\tif (y>mid) reverse(rson,x,y);\n\tpushup(tr[k],ls,rs,l,r,mid);\n}\nhh query(int k,int l,int r,int x,int y)\n{\n\tint mid=(l+r)>>1;\n\thh ret=null;\n\tif (x<=l&&r<=y) return tr[k];\n\tpushdown(k,l,r);\n\tif (y<=mid) return query(lson,x,y);\n\tif (x>mid) return query(rson,x,y);\n\thh L=query(lson,x,y),R=query(rson,x,y);\n\tpushup(ret,L,R,max(x,l),min(y,r),mid);\n\treturn ret;\n}\nvoid build(int k,int l,int r)\n{\n\ttr[k].tag=-1;tr[k].rev=0;\n\tif (l==r)\n\t{\n\t\tint x;cin>>x;\n\t\ttr[k].sum=x;\n\t\trep() tr[k].mx[x][i]=1,tr[k].mx[!x][i]=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lson);build(rson);\n\tpushup(tr[k],ls,rs,l,r,mid);\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tint x,y,z;\n\tcin>>n>>m;\n\tbuild(1,1,n);\n\twhile (m--)\n\t{\n\t\tcin>>z>>x>>y;++x;++y;\n\t\tif (z<2) make_same(1,1,n,x,y,z);\n\t\telse if (z==2) reverse(1,1,n,x,y);\n\t\telse if (z==3) printf(\"%d\\n\",query(1,1,n,x,y).sum);\n\t\telse printf(\"%d\\n\",query(1,1,n,x,y).mx[1][3]);\n\t}\n}\n```",
        "postTime": 1544001121,
        "uid": 76481,
        "name": "p_b_p_b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u6b63\u5982\u697c\u4e0b\u51e0\u4f4d\u6240\u8bf4\uff0c\u8fd9\u662f\u4e00\u9053\u5de9\u56fa\u533a\u95f4\u64cd\u4f5c\u7684\u597d\u9898\uff0c\u6211\u4e5f\u7528\u6211\u7684\u98ce\u683c\u5199\u4e86\u4e00\u4e0b\uff0c\u53ef\u80fd\u5728\u590d\u6742\u5ea6\u65b9\u9762\u4e0d\u5982\u51e0\u4f4d\uff0c\u4f46\u662f...\u7b80\u5355\u6613\u61c2\u3002\n\n\n\u9996\u5148\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\u548c\u67e5\u8be2\u533a\u95f4\u5185**\u6700\u957f\u8fde\u7eed1**\u7684\u4e2a\u6570\uff0c\u8fd9\u90e8\u5206\u8bb8\u591a\u7c7b\u4f3c\u9898\u76ee\u90fd\u6709\u3002\n\n\n\u8981\u5206\u60c5\u51b5\uff0c**\u5411\u4e0a\u5408\u5e76**\u540e\u533a\u95f4\u7684\u6700\u957f\u8fde\u7eed1\u53ef\u80fd\u7b49\u4e8e\uff1a\n\n1. **\u5de6**\u533a\u95f4\u7684\u8fde\u7eed\u6700\u957f1\uff1b\n\n2. **\u53f3**\u533a\u95f4\u7684\u8fde\u7eed\u6700\u957f1\uff1b\n\n3. \u5de6\u53f3\u533a\u95f4\u7684**\u4e2d\u95f4**\u90e8\u5206\uff1b\n\n\n\u7075\u6027\u7684\u5730\u65b9\u6765\u4e86\uff0c\u7b2c3\u79cd\u60c5\u51b5\u5982\u4f55\u5b9e\u73b0\u5462\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u5de6\u8d771\u548c\u53f3\u8d771\u7684\u4e2a\u6570\uff0c\u7136\u540e\u4e09\u79cd\u60c5\u51b5\u7528max\u62ec\u8d77\u6765\u3002\n\n\u7136\u540e\u8fd9\u4e24\u4e2a\u65b0\u4fe1\u606f\u53c8\u5982\u4f55**\u5411\u4e0a\u5408\u5e76**\u5462\uff1f\u601d\u8003\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u5de6\u8d77\uff0c\u60c5\u51b5\u5982\u4e0b\uff1a\n\n1. \u82e5**\u5de6\u5b50\u6811\u5168\u90e8\u4e3a1**\uff0c\u6839\u7684\u5de6\u8d771\u5c31\u662f**\u5de6\u533a\u95f4\u957f\u5ea6\u52a0\u4e0a\u53f3\u5b57\u6811\u7684\u5de6\u8d771**\uff1b\n\n2. \u5426\u5219\u5c31\u662f**\u5de6\u5b50\u6811\u7684\u5de6\u8d771**\uff1b\n\n\n\u53f3\u8d77\u540c\u7406\u3002\n\n\n\u8fd9\u6837\u4e00\u6765\u5c31\u8981\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f\u4e86\uff0c\u518d\u770b\u770b**\u4fee\u6539**\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u53cd\u8f6c...\u90a3\u4e48\u518d\u5206\u522b\u7ef4\u62a4\u8fd9\u4e09\u4e2a\u4fe1\u606f\u7684**0\u503c\u7248\u672c**\uff0c\u7ffb\u8f6c\u65f6\u8fdb\u884cswap\u3002\n\n\u6b64\u5904\u8981\u6ce8\u610f\u8986\u76d6\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u7ffb\u8f6c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5148\u4e0b\u653e\u8986\u76d6\u6807\u7b7e\u3002\n\n~~\u55ef\uff0c\u6709\u591f\u9ebb\u70e6\u3002~~\n\n\n\u4f46\u662f**\u67e5\u8be2**\u8d77\u6765\u4e5f\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u6700\u7ec8\u662f\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u8fde\u7eed\u6700\u957f1\uff0c\u6240\u4ee5\u67e5\u8be2\u51fd\u6570\u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a**\u8282\u70b9**\uff0c\u7136\u540e\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u5411\u4e0a\u9012\u5f52\u3002\u90a3\u4e48\u4f9d\u7136\u5bf9\u4e8e\u5de6\u8d77\uff1a\n\n1. \u5982\u679c**\u5de6\u5b50\u6811\u4e3a\u7a7a**\uff0c\u5f53\u524d\u8282\u70b9\u5de6\u8d771\u4e3a\u5176**\u53f3\u5b50\u6811\u5de6\u8d771**\uff1b\n\n2. \u5982\u679c**\u5de6\u5b50\u6811\u4e0d\u7a7a**:\n\n(1)\u82e5**\u5de6\u5b50\u6811\u5de6\u8d771\u7b49\u4e8e\u5de6\u5b50\u6811\u533a\u95f4\u957f\u5ea6**\uff0c\u5f53\u524d\u8282\u70b9\u5de6\u8d771\u4e3a**\u5de6\u5b50\u6811\u533a\u95f4\u957f\u52a0\u53f3\u5b50\u6811\u5de6\u8d771**\uff1b\n\n(2)\u5426\u5219\u5f53\u524d\u8282\u70b9\u5de6\u8d771\u4e3a\u5176**\u5de6\u5b50\u6811\u5de6\u8d771**\uff1b\n\n\n\u53f3\u8d77\u540c\u7406\uff0c\u6700\u7ec8\u533a\u95f4\u6700\u957f1\u540c\u5411\u4e0a\u5408\u5e76\u64cd\u4f5c\u3002\n\n\u6700\u540e\u8fd4\u56de\u67e5\u8be2\u533a\u95f4\u7684\u6700\u7ec8\u6700\u957f\u8fde\u7eed1\u5373\u53ef\n\n\n\u6c42\u548c\u4ec0\u4e48\u7684\u5c31\u4e0d\u5fc5\u591a\u8bf4\uff0c\u5e38\u89c4\u64cd\u4f5c\u5c31\u597d\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100002;\nint a[maxn],n,m,i,x,y,s;\nstruct node{int l,r,t;}ha;\nstruct segtree{\n    #define lson (o<<1)\n    #define rson (o<<1|1)\n    #define mid ((l+r)>>1)\n    int sumv[maxn<<2],suml[maxn<<2],sumr[maxn<<2],sumt[maxn<<2];//v\u4e3avalue\uff0cl\u4e3aleft\uff0cr\u4e3aright\uff0ct\u4e3atotal\n    int sumlz[maxn<<2],sumrz[maxn<<2],sumtz[maxn<<2];//\u4e0a\u4e00\u884c\u4fe1\u606f\u76840\u503c\u7248\u672c\uff0c\u7ffb\u8f6c\u65f6\u7528\n    int reiv[maxn<<2],itiv[maxn<<2],xorv[maxn<<2];//\u4e09\u4e2a\u6807\u8bb0\uff0c\u8fd9\u9e1f\u8bed\u76840\u548c1\u5c31\u4e0d\u8981\u5728\u610f\u4e86\n    inline void pushup(int o,int l,int r){//\u5411\u4e0a\u5408\u5e76\n        if(suml[lson]==mid-l+1)suml[o]=suml[lson]+suml[rson];//\u7b2c1\u79cd\u60c5\u51b5\n         else suml[o]=suml[lson];//\u7b2c2\u79cd\u60c5\u51b5\n        if(sumr[rson]==r-mid)sumr[o]=sumr[rson]+sumr[lson];\n         else sumr[o]=sumr[rson];//\u53f3\u8d77\u540c\u7406\n        sumt[o]=max(max(sumt[rson],sumt[lson]),suml[rson]+sumr[lson]);//\u5b9e\u9645\u6700\u957f1\u7684\u4e09\u79cd\u60c5\u51b5\n        if(sumlz[lson]==mid-l+1)sumlz[o]=sumlz[lson]+sumlz[rson];\n         else sumlz[o]=sumlz[lson];\n        if(sumrz[rson]==r-mid)sumrz[o]=sumrz[rson]+sumrz[lson];\n         else sumrz[o]=sumrz[rson];\n        sumtz[o]=max(max(sumtz[rson],sumtz[lson]),sumlz[rson]+sumrz[lson]);//0\u503c\u7248\u672c\u540c\u7406\n        sumv[o]=sumv[lson]+sumv[rson];\n    }\n    inline void pushdown(int o,int l,int r){//\u4e0b\u653e\n        if(itiv[o]){\n            sumv[lson]=suml[lson]=sumr[lson]=sumt[lson]=mid-l+1;\n            sumv[rson]=suml[rson]=sumr[rson]=sumt[rson]=r-mid;\n            sumlz[lson]=sumlz[rson]=sumrz[lson]=sumrz[rson]=sumtz[lson]=sumtz[rson]=0;\n            itiv[rson]=itiv[lson]=1;\n            xorv[lson]=xorv[rson]=reiv[lson]=reiv[rson]=0;\n            itiv[o]=0;\n        }else if(reiv[o]){\n            sumlz[lson]=sumrz[lson]=sumtz[lson]=mid-l+1;\n            sumlz[rson]=sumrz[rson]=sumtz[rson]=r-mid;\n            sumv[lson]=sumv[rson]=suml[lson]=suml[rson]=sumr[lson]=sumr[rson]=sumt[lson]=sumt[rson]=0;\n            reiv[rson]=reiv[lson]=1;\n            xorv[lson]=xorv[rson]=itiv[lson]=itiv[rson]=0;\n            reiv[o]=0;\n        }\n        //\u6ce8\u610f\u5e76\u5217\u7684\u6807\u7b7e\u4e0d\u8981\u52a0else\uff0c\u4e00\u5e76\u4e0b\u63a8\n        if(xorv[o]){\n            sumv[lson]=mid-l+1-sumv[lson],sumv[rson]=r-mid-sumv[rson];\n            swap(sumt[lson],sumtz[lson]);swap(sumt[rson],sumtz[rson]);\n            swap(suml[lson],sumlz[lson]);swap(suml[rson],sumlz[rson]);\n            swap(sumr[lson],sumrz[lson]);swap(sumr[rson],sumrz[rson]);\n            xorv[lson]^=1;xorv[rson]^=1;\n            xorv[o]=0;\n        }\n    }\n    inline void build(int o,int l,int r){\u5efa\u6811\n        reiv[o]=itiv[o]=xorv[o]=0;\n        if(l==r){\n         suml[o]=sumr[o]=sumt[o]=sumv[o]=a[l];\n         sumlz[o]=sumrz[o]=sumtz[o]=a[l]^1;\n         return;\n        }\n        build(lson,l,mid);\n        build(rson,mid+1,r);\n        pushup(o,l,r);\n    }\n    inline int querysum(int o,int l,int r,int ql,int qr){//\u6c42\u548c\uff0c\u53731\u7684\u4e2a\u6570\n        if(ql<=l&&qr>=r)return sumv[o];\n        pushdown(o,l,r);\n        int ans=0;\n        if(ql<=mid)ans+=querysum(lson,l,mid,ql,qr);\n        if(qr>mid)ans+=querysum(rson,mid+1,r,ql,qr);\n        return ans;\n    }\n    inline node querymax(int o,int l,int r,int ql,int qr){//\u6c42\u6700\u957f\u8fde\u7eed1\n        if(ql<=l&&qr>=r)return (node){suml[o],sumr[o],sumt[o]};\n        pushdown(o,l,r);\n        node t,tl,tr;//\u7528\u7ed3\u6784\u4f53\u5206\u522b\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f\n        int fll=0,flr=0;//\u5224\u65ad\u5b50\u6811\u662f\u5426\u4e3a\u7a7a\u7684flag\n        if(ql<=mid)tl=querymax(lson,l,mid,ql,qr);else{tl=(node){0,0,0};fll=1;}//\u8d4b\u62100\uff0c\u4ee5\u514d\u5f71\u54cd\u6700\u7ec8\u533a\u95f4\u5185\u6700\u957f\u8fde\u7eed1\u7684\u6bd4\u8f83\n        if(qr>mid)tr=querymax(rson,mid+1,r,ql,qr);else{tr=(node){0,0,0};flr=1;}\n        if(tl.l==mid-l+1)t.l=tl.l+tr.l;//1\n         else if(fll==1)t.l=tr.l;//2(1)\n          else t.l=tl.l;//2(2)\n        if(tr.r==r-mid)t.r=tr.r+tl.r;\n         else if(flr==1)t.r=tl.r;\n          else t.r=tr.r;\n        t.t=max(max(tr.t,tl.t),tl.r+tr.l);\n        return t;\n    }\n    inline void optiti(int o,int l,int r,int ql,int qr){//\u533a\u95f4\u8d4b\u4e3a1\n        if(ql<=l&&qr>=r){\n            sumv[o]=r-l+1;\n            sumlz[o]=sumrz[o]=sumtz[o]=0;\n            suml[o]=sumr[o]=sumt[o]=r-l+1;\n            xorv[o]=0,itiv[o]=1,reiv[o]=0;\n            return;\n        }\n        pushdown(o,l,r);\n        if(ql<=mid)optiti(lson,l,mid,ql,qr);\n        if(qr>mid)optiti(rson,mid+1,r,ql,qr);\n        pushup(o,l,r);\n    }\n    inline void optrei(int o,int l,int r,int ql,int qr){//\u533a\u95f4\u8d4b\u4e3a0\n        if(ql<=l&&qr>=r){\n            sumv[o]=0;\n            sumlz[o]=sumrz[o]=sumtz[o]=r-l+1;\n            suml[o]=sumr[o]=sumt[o]=0;\n            xorv[o]=0,itiv[o]=0,reiv[o]=1;\n            return;\n        }\n        pushdown(o,l,r);\n        if(ql<=mid)optrei(lson,l,mid,ql,qr);\n        if(qr>mid)optrei(rson,mid+1,r,ql,qr);\n        pushup(o,l,r);\n    }\n    inline void optxor(int o,int l,int r,int ql,int qr){//\u533a\u95f4\u7ffb\u8f6c\n        if(ql<=l&&qr>=r){\n            sumv[o]=r-l+1-sumv[o];\n            swap(sumt[o],sumtz[o]);\n            swap(suml[o],sumlz[o]);\n            swap(sumr[o],sumrz[o]);\n            xorv[o]^=1;\n            return;\n        }\n        pushdown(o,l,r);\n        if(ql<=mid)optxor(lson,l,mid,ql,qr);\n        if(qr>mid)optxor(rson,mid+1,r,ql,qr);\n        pushup(o,l,r);\n    }\n}seg;\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    seg.build(1,1,n);\n    while(m--){\n        scanf(\"%d%d%d\",&s,&x,&y);\n        x++;y++;\n        switch(s){//\u6700\u597d\u52a0\u4e0abreak\n            case 0:seg.optrei(1,1,n,x,y);break;\n            case 1:seg.optiti(1,1,n,x,y);break;\n            case 2:seg.optxor(1,1,n,x,y);break;\n            case 3:printf(\"%d\\n\",seg.querysum(1,1,n,x,y));break;\n            case 4:printf(\"%d\\n\",seg.querymax(1,1,n,x,y).t);break;\n        }\n    }\n    return 0;\n}\n```\n\u4ece\u672c\u4eba\u535a\u5ba2\u8f6c\u79fb\uff0cmarkdown\u8bed\u6cd5\u53ef\u80fd\u7a0d\u6709\u504f\u5dee\uff0c\u671b\u89c1\u8c05\u3002\n",
        "postTime": 1516888073,
        "uid": 5464,
        "name": "ChoHakuNe",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u4e00\u9053\u5f88\u957f\u5f88\u957f\u7684\u7ebf\u6bb5\u6811\uff0c\u4e5f\u7b97\u662f\u4e00\u9053\u5de9\u56fa\u533a\u95f4\u64cd\u4f5c\u7684\u597d\u9898\u3002\u8fd9\u91cc\u7ed9\u51faAC\u4ee3\u7801\u53ca\u8f83\u4e3a\u8be6\u7ec6\u7684\u6ce8\u91ca\u3002\n\n \n \n \n \n \n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define xL (x << 1)\n#define xR (x << 1 | 1)\nusing namespace std;\nconst int N = 4e5 + 5; \nint pr0[N], pr1[N], sf0[N], sf1[N], lon[N], vis[N];\nint As0[N], As1[N], sum[N], tag[N], rev[N], n, m;\nstruct point\n{\n    int pr, sf, ans, lon;\n    point(const int P, const int S, const int A, const int L): \n    pr(P), sf(S), ans(A), lon(L) {}\n};\ntemplate <class T> inline T Max(const T a, const T b) {return a > b? a : b;}\ntemplate <class T> inline void Swap(T &a, T &b) {a ^= b; b ^= a; a ^= b;}\ninline int get() //\u8bfb\u5165\u4f18\u5316 \n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x) //\u8f93\u51fa\u4f18\u5316 \n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void Push(const int x)\n{\n    int L = xL, R = xR;\n    sum[x] = sum[L] + sum[R]; \n    //sum[x]\u8868\u793a\u5e8f\u5217\u4e2d1\u7684\u4e2a\u6570\uff0c\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u7528\u6c42\u548c\u4ee3\u66ff \n    As0[x] = Max(Max(As0[L], As0[R]), pr0[R] + sf0[L]);\n    As1[x] = Max(Max(As1[L], As1[R]), pr1[R] + sf1[L]);\n    //As0/As1\u8868\u793a\u6700\u957f\u8fde\u7eed0/1\u7684\u4e2a\u6570 \n    //\u9664\u4e86\u4ece\u5de6\u53f3\u8282\u70b9\u5411\u4e0a\u4f20\u9012\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5de6\u8282\u70b9\u6700\u957f\u540e\u7f00+\u53f3\u8282\u70b9\u6700\u957f\u524d\u7f00 \n    pr0[x] = (sum[L] ? pr0[L] : lon[L] + pr0[R]);\n    pr1[x] = (sum[L] == lon[L] ? lon[L] + pr1[R] : pr1[L]);\n    //pr0/pr1\u8868\u793a\u6700\u957f\u8fde\u7eed0/1\u524d\u7f00 \n    sf0[x] = (sum[R] ? sf0[R] : lon[R] + sf0[L]);\n    sf1[x] = (sum[R] == lon[R] ? lon[R] + sf1[L] : sf1[R]);\n    //sf0/sf1\u8868\u793a\u6700\u957f\u8fde\u7eed0/1\u540e\u7f00\n    //\u8fd9\u91cc\u540c\u65f6\u7ef4\u62a4\u4e86\u6700\u957f\u8fde\u7eed0/1\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u5728\u533a\u95f4\u53d6\u53cd\u65f6\u6211\u4eec\u53ea\u9700\u5c06\u5176\u4ea4\u6362 \n}\ninline void AddTag(const int x, const int val) \n//\u64cd\u4f5c0/1\u4e2d\u7684\u6253\u6807\u8bb0\uff0ctag[x] = 0/1\u5206\u522b\u8868\u793a\u64cd\u4f5c0/1, tag[x] = -1\u8868\u793a\u65e0\u6807\u8bb0  \n{\n    rev[x] = 0; //\n```\n/\\*\n\u53bb\u6389\u8fd9\u4e00\u884c\u5c31\u53ea\u670910\u5206\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u663e\u7136\u64cd\u4f5c0/1\u7684\u4f18\u5148\u7ea7\u662f\u8981\u9ad8\u4e8e\u64cd\u4f5c2\u7684\u3002\u56e0\u4e3a\u82e5\u662f\u5728\u64cd\u4f5c2\n\n\u540e\u518d\u6267\u884c\u64cd\u4f5c0/1\uff0c\u64cd\u4f5c2\u5c31\u663e\u5f97\u6ca1\u6709\u610f\u4e49\u4e86\u3002\u90a3\u4e48\u9996\u5148\u8981\u4fdd\u8bc1\n\n\u6807\u8bb0\u540c\u65f6\u5b58\u5728\u65f6\u53ea\u53d7\u64cd\u4f5c0/1\u7684\u5f71\u54cd, \u540c\u65f6\u4e5f\u4e0d\u80fd\u8ba9\u64cd\u4f5c2\u7684\u6807\n\n\u8bb0\u5728\u6267\u884c\u64cd\u4f5c0/1\u7684\u6807\u8bb0\u524d\u5148\u4e0b\u4f20\u3002\n\n\\*/\n \n \n \n \n \n \n```cpp\n    if (val)\n    {\n        pr0[x] = sf0[x] = As0[x] = 0; tag[x] = 1; \n        pr1[x] = sf1[x] = As1[x] = sum[x] = lon[x];\n    }\n    else\n    {\n        pr0[x] = sf0[x] = As0[x] = lon[x]; tag[x] = 0;\n        pr1[x] = sf1[x] = As1[x] = sum[x] = 0; \n    } \n}\ninline void AddRev(const int x) //\u64cd\u4f5c2\u4e2d\u7684\u6253\u6807\u8bb0 \n{\n    rev[x] ^= 1;\n    sum[x] = lon[x] - sum[x];\n    Swap(pr0[x], pr1[x]);\n    Swap(sf0[x], sf1[x]);\n    Swap(As0[x], As1[x]);\n}\ninline void Down(const int x) //\u6807\u8bb0\u4e0b\u653e \n{\n    if (tag[x] != -1)\n    {\n        AddTag(xL, tag[x]); AddTag(xR, tag[x]);\n        tag[x] = -1;\n    }\n    if (rev[x])\n    {\n        AddRev(xL); AddRev(xR);\n        rev[x] = 0;\n    }\n}\ninline void UndTag(const int x, const int l, const int r, const int u, const int v, const int z) //\u64cd\u4f5c0/1 \n{\n    if (l == u && r == v) return AddTag(x, z);\n    Down(x); int mid = l + r >> 1;\n    if (u > mid) UndTag(xR, mid + 1, r, u, v, z);\n    else if (v <= mid) UndTag(xL, l, mid, u, v, z);\n    else\n    {\n        UndTag(xL, l, mid, u, mid, z);\n        UndTag(xR, mid + 1, r, mid + 1, v, z);\n    }\n    Push(x); \n}\ninline void UndRev(const int x, const int l, const int r, const int u, const int v) //\u64cd\u4f5c2 \n{\n    if (l == u && r == v) return AddRev(x);\n    Down(x); int mid = l + r >> 1;\n    if (u > mid) UndRev(xR, mid + 1, r, u, v);\n    else if (v <= mid) UndRev(xL, l, mid, u, v);\n    else\n    {\n        UndRev(xL, l, mid, u, mid);\n        UndRev(xR, mid + 1, r, mid + 1, v);\n    }\n    Push(x); \n}\ninline int QueSum(const int x, const int l, const int r, const int u, const int v) //\u64cd\u4f5c3 \n{\n    if (l == u && r == v) return sum[x];\n    Down(x); int mid = l + r >> 1;\n    if (u > mid) return QueSum(xR, mid + 1, r, u, v);\n    else if (v <= mid) return QueSum(xL, l, mid, u, v);\n    else return QueSum(xL, l, mid, u, mid) + \n                QueSum(xR, mid + 1, r, mid + 1, v);\n}\ninline point QueAns(const int x, const int l, const int r, const int u, const int v) //\u64cd\u4f5c4 \n{\n    if (l == u && r == v) return point(pr1[x], sf1[x], As1[x], lon[x]);\n    Down(x); int mid = l + r >> 1;\n    if (u > mid) return QueAns(xR, mid + 1, r, u, v);\n    else if (v <= mid) return QueAns(xL, l, mid, u, v);\n    else\n    {\n        point tx = QueAns(xL, l, mid, u, mid),\n              ty = QueAns(xR, mid + 1, r, mid + 1, v);\n        return point((tx.pr == tx.lon? tx.lon + ty.pr : tx.pr), \n                     (ty.sf == ty.lon? ty.lon + tx.sf : ty.sf),\n                     Max(Max(tx.ans, ty.ans), tx.sf + ty.pr), tx.lon + ty.lon);\n```\n/\\*\n\u8981\u6ce8\u610f\u7684\u662f\uff1a\u7ebf\u6bb5\u6811\u5728\u8be2\u95ee\u65f6\u4f1a\u5c06\u8be2\u95ee\u7684\u533a\u95f4\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u5b8c\u6574\u7684\u7ba1\u8f96\u533a\u95f4\uff0c\n\n\u6240\u4ee5\u6211\u4eec\u5728\u5c06\u8fd9\u4e9b\u533a\u95f4\u7684\u4fe1\u606f\u4e0a\u4f20\u65f6\uff0c\u4e5f\u8981\u5bf9\u5176\u8fdb\u884c\u7ef4\u62a4\u3002\u90a3\u4e48\u540c\u6837\u6211\u4eec\u4e5f\u518d\u8981\u8bb0\n\n\u5f55\u533a\u7684\u524d\u7f00\u3001\u540e\u7f00\u4ee5\u53ca\u957f\u5ea6\u6765\u7ef4\u62a4\u6700\u957f\u8fde\u7eed0/1\u7684\u957f\u5ea6\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f\u7ed3\u6784\u4f53\u6765\u8fd4\n\n\u56de\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\\*/\n \n \n\n```cpp\n    }\n} \ninline void Bul(const int x, const int l, const int r) //\u5efa\u6811 \n{\n    lon[x] = r - l + 1; tag[x] = -1;\n    //lon[x]\u8868\u793ax\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u957f\u5ea6 \n    if (l == r)\n    {\n        sum[x] = pr1[x] = sf1[x] = As1[x] = vis[l];\n        pr0[x] = sf0[x] = As0[x] = vis[l] ^ 1; \n        return ;\n    }\n    int mid = l + r >> 1;\n    Bul(xL, l, mid);\n    Bul(xR, mid + 1, r);\n    Push(x);\n}\nint main()\n{\n    n = get(); m = get(); \n    for (int i = 1; i <= n; ++i) vis[i] = get(); \n    Bul(1, 1, n); int k, u, v;\n    while (m--)\n    {\n         k = get(); u = get() + 1; v = get() + 1;\n         switch (k)\n         {\n            case 0: UndTag(1, 1, n, u, v, 0); break;\n            case 1: UndTag(1, 1, n, u, v, 1); break;\n            case 2: UndRev(1, 1, n, u, v); break;\n            case 3: put(QueSum(1, 1, n, u, v)), putchar('\\n'); break;\n            case 4: put(QueAns(1, 1, n, u, v).ans), putchar('\\n'); break;\n         }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1493599490,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\n\n[P2572 [SCOI2010]\u5e8f\u5217\u64cd\u4f5c](https://www.luogu.com.cn/problem/P2572)\n\n\u6211\u592a\u84bb\u4e86\uff0c\u8fd9\u9898\u505a\u4e86\u51e0\u5929\n~~\u4e0a\u8bfe\u4e5f\u8fd8\u505a\u6765\u7740~~\n\n\u3010\u8bf4\u53e5\u95f2\u8bdd\u3011\u5f53\u6211\u770b\u5230\u9898\u89e3\u533a\u90a3\u4e48\u4e9b\u5806\u79ef\u5982\u5c71\u7684\u4ee3\u7801\u65f6\uff0c\u6211\u662f\u62d2\u7edd\u89c2\u770b\u7684\uff0c\u76f8\u4fe1\u6709\u540c\u5b66\u6216\u8bb8\u4e5f\u4f1a\u6709\u76f8\u4f3c\u611f\u53d7\uff0c\u800c\u6211\u81ea\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u53ef\u80fd\u6bd4\u8f83\u597d\u7406\u89e3\u4e9b\uff0c\u4e5f\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u53ef\u4ee5\u5e2e\u52a9\u540c\u5b66\u4eec\u3002\n\n~~\u4f1a\u77ed\u4e9b\u5417\uff1f~~\n\n\u9996\u5148comes the\u4ee3\u7801\u7ec6\u8282\n\n```cpp\n#define P (k<<1)\n#define S P|1\n#define M (l+r>>1)\n#define len (r-l+1)\n```\n\nP\u662f\u5de6\u513f\u5b50\uff0cS\u662f\u53f3\u513f\u5b50\uff0cM\u662f\u533a\u95f4\u4e2d\u70b9\u4f4d\u7f6e\uff0clen\u662f\u533a\u95f4\u957f\u5ea6\n\nnext\uff0c\u4ecb\u7ecd\u4e0b\u6811\u4e0a\u4fe1\u606f\n\n```cpp\nstruct tree{\n\tint sum,l,r,mx0,mx1;bool x;int c;\t//x for xor, c for cover.\n\t\t\t\t\t\t//x: 1 rev, 0 instead\n\t\t\t\t\t\t//c: 0 don't cover, 1 cover 0, 2 cover 1\n}\n```\n\n\u5148\u522b\u6025\u7740D\u6211\u7684\u82f1\u8bed\uff0c\u6211\u6765~~\u7ffb\u8bd1~~\u89e3\u91ca\u4e00\u4e0b\n\n### sum\n\n\u533a\u95f4\u548c\uff0c\u5373\u533a\u95f4\u6709\u591a\u5c111\n\n### l & r\n\n\u5de6\u53f3\u7aef\u70b9\u5f00\u59cb\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76841/0\n\n\u8fde\u77401\uff0cl\u3001r\u4e3a\u6b63\uff0c\u5426\u5219\u4e3a\u8d1f\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u533a\u95f4\u603b\u4e0d\u4e3a\u7a7a\uff0c\u6545l\u3001r\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u65f6\u4e5f\u4e0d\u4f1a\u4e3a0\n\n### mx0 & mx1\n\n\u533a\u95f4\u5185\u6700\u957f\u8fde\u7eed0/1\u957f\u5ea6\n\n\u53ef\u4ee5\u4e3a0\n\n## lazy tag\n\n### x\n\n\u5b58**\u8fde\u7eed**\u53d6\u53cd\u4fe1\u606f\n\n\u7531\u4e8e\u76f8\u540c\u4e00\u4e2a\u533a\u95f4\u8fde\u7eed\u4e24\uff08\u6216\u8005\u8bf4\u5076\u6570\u6b21\uff09\u6b21\u53d6\u53cd\u76f8\u5f53\u4e8e\u6ca1\u6574\uff0c\u4e8e\u662f\u7528bool\u5b58\u50a8\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5b58**\u8fde\u7eed**\u53d6\u53cd\u4fe1\u606f\n\n\u662f\u4e3a\u4e86push_down\u7684\u65b9\u4fbf\n\n### c\n\n\u5b58\u50a8\u8986\u76d6\u4fe1\u606f\n\nc=0\u65f6\uff0c\u6ca1\u8986\u76d6\n\nc=1\u65f6\uff0c\u8986\u76d60\n\nc=2\u65f6\uff0c\u8986\u76d61\n\n\u55ef\uff0c\u662f\u65f6\u5019\u8bf4push_up push_down\u90a3\u4e9b\u4e8b\u4e86\n\n### push_up\n\n```cpp\nvoid push_up(int k,int l,int r)\n{\n\tsgt[k].sum=sgt[P].sum+sgt[S].sum;\n\tsgt[k].l=sgt[P].l;sgt[k].r=sgt[S].r;\n\tif(((sgt[P].l==sgt[P].r && sgt[P].l==sgt[P].sum) || !sgt[P].sum) && sgt[P].l*sgt[S].l>0)\tsgt[k].l+=sgt[S].l;\n\tif(((sgt[S].r==sgt[S].l && sgt[S].r==sgt[S].sum) || !sgt[S].sum) && sgt[S].r*sgt[P].r>0)\tsgt[k].r+=sgt[P].r;\n\tint t=sgt[P].r + sgt[S].l;\n\tsgt[k].mx0=max(-t,max(sgt[P].mx0,sgt[S].mx0));\n\tsgt[k].mx1=max(t,max(sgt[P].mx1,sgt[S].mx1));\n}\n```\n\n\u554a\u4e5f\uff01\u90a3\u4fe9if\u8fd8\u6709\u90a3\u4e2at\u548b\u56de\u4e8b\uff1f\u83ab\u614c\uff0c\u867d\u7136\u770b\u4e0a\u53bb\u633a\u5947\u602a\u7684\uff0c\u4e14\u542c\u6211\u80fd\u5426\u987f\u5f00\u4f60\u7684\u8305\u585e\n~~\u5173\u8054\u8bcd\u8bed\u6709\u95ee\u9898\uff1f~~\n\nsum\u4e3a\u4fe9\u513f\u5b50sum\u7684\u548c\uff0cl\u3001r\u5148\u7ee7\u627f\u533a\u95f4\u513f\u5b50\u5b58\u50a8\u7684\u6700\u5de6\u6700\u53f3\u7684\u76f8\u5173\u503c\n\nif\u6761\u4ef6\u5224\u65ad\u6211\u4eec\u5206\u5f00\u6765\u8bf4\n\n#### sgt[P/S].l==sgt[P/S].r && sgt[P/S].l/r==sgt[P/S].sum\n\n**\u8003\u8651\u513f\u5b50l\u3001r\u8986\u76d61**\n\n\u8fd9\u91cc\u5224\u65ad\u7684\u662fl\u3001r\u662f\u5426\u8986\u76d6\u4e86\u6574\u4e2a\u533a\u95f4\uff0c\u524d\u4e00\u4e2a\u5224\u65ad\u5373\u67d0\u513f\u5b50\u7ef4\u62a4\u7684\u533a\u95f4\u6700\u5de6\u6700\u53f3\u76f8\u5173\u4fe1\u606f\u662f\u5426\u76f8\u7b49\uff0c\u6bd4\u8f83\u5bf9\u79f0\n\n\u90a3\u53ea\u6709\u8fd9\u4e2a\u5224\u65ad\u662f\u5426\u80fd\u884c\u5462\uff1f\n\n```\n1 1 1 0 1 1 1\n```\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cl\u3001r\u76f8\u7b49\uff0c\u4f46\u5e76\u975e\u8986\u76d6\u5168\u533a\u95f4\uff0c\u52a0\u4e0asum\u7684\u5224\u65ad\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\u4e86\n\n\u5176\u5b9e\uff0c\u82e5l\u3001r\u90fd\u8986\u76d61\uff0c\u4e0d\u80fd\u8986\u76d6\u6574\u4e2a\u7ef4\u62a4\u533a\u95f4\u4f46\u76f8\u7b49\uff0c\u90a3\u8bf4\u660e\u4ec0\u4e48\uff1f\u8bf4\u660el\u3001r\u8986\u76d6\u7684\u533a\u95f4\u4e0d\u63a5\u4e0a\u3002\u90a3\u4e48\u4e0d\u7ba1\u6ca1\u63a5\u4e0a\u4e2d\u95f4\u90a3\u90e8\u5206\u6709\u591a\u5c110\u30011\uff0csum\u5927\u4e8e\u7b49\u4e8el+r\uff0c\u4ece\u800c\u5927\u4e8e\u4efb\u610fl\u3001r\uff1b\u82e5sum\u7b49\u4e8el\u6216r\u4e86\u5c31\u80fd\u591f\u8bf4\u660el\u3001r\u63a5\u4e0a\u4e86\uff0c\u4ece\u800c\u8bf4\u660el\u3001r\u4efb\u610f\u5176\u4e00\u90fd\u53ef\u4ee5\u8986\u76d6\u6574\u4e2a\u7ef4\u62a4\u533a\u95f4\u3002\n\n#### !sgt[P/S].sum\n\n**\u8003\u8651\u513f\u5b50l\u3001r\u8986\u76d60**\n\n\u82e5\u67091\u5219sum\u4e0d\u4f1a\u662f0\n\n#### sgt[P].l*sgt[S].l>0 \u6216\u662f sgt[S].r*sgt[P].r>0\n\n\u5224\u65ad\u80fd\u5426\u8fde\u63a5\u8d77\u6765\uff0c\u5373\u5224\u65ad\u8981\u8fde\u63a5\u7684\u90e8\u5206\u4e0e\u5f53\u524d\u5df2\u77e5\u7684\u88ab\u4e00\u4e2a\u6570\u5b57\u8986\u76d6\u7684\u533a\u95f4\u4e2d\u6570\u5b57\u662f\u5426\u7edf\u4e00\uff0c\u4e8e\u662f\u53d8\u4e3a\u4e86\u5224\u65ad\u662f\u5426\u540c\u53f7\u7684\u95ee\u9898\u3002\n\n\u8bdd\u6bd4\u8f83\u957f\uff0c\u4e3e\u4e2a\u4f8b\u5b50\n\n```\n1 1 0 0\n```\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cl\u867d\u7136\u53ef\u4ee5\u8986\u76d6\u533a\u95f4\u4e24\u4e2a1\uff0c\u4f46\u5230\u540e\u9762\u5c31\u4e0d\u80fd\u8fde\u4e0a\u4e86\uff0c\u56e0\u4e3a\u53d8\u62100\u4e86\uff0c\u800cl\u8981\u5b58\u50a8\u8fde\u7eed\u7684\u76f8\u540c\u6570\u5b57\u957f\u5ea6\n\n\u82e5if\u4e2d\u6761\u4ef6\u6210\u7acb\uff0c\u8bf4\u660e\u8981\u628al/r\u6269\u5145\u5230\u5176\u5b83\u533a\u95f4\uff0c\u4e8e\u662f\u505a\u52a0\u6cd5\n\n\u4e0b\u9762\u8c08\u8c08\u90a3\u4e2at\u4ee5\u53camx\u7684\u66f4\u65b0\n\nt\u505a\u7684\u5c1d\u8bd5\u5927\u6982\u662f\uff1a\u5c06\u5de6\u513f\u5b50\u7684r\u548c\u53f3\u513f\u5b50\u7684l\u8fde\u8d77\u6765\uff0c\u53ef\u4ee5\u770b\u505a\u5c06\u513f\u5b50\u533a\u95f4\u8fde\u8d77\u6765\uff0c\u53d6\u9700\u8981\u7684\u4e1c\u897f\uff0c\u5373\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u4e2d\u95f4\u90a3\u5757\u662f\u5426\u4f1a\u6709\u5176\u5b83\u53d8\u6570\u5bfc\u81f4mx\u53d8\u5316\uff0c\u800cmx\u53d8\u5316\u5927\u4f53\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u3002\n\n\u5de6\u513f\u5b50\u7684r\u548c\u53f3\u513f\u5b50\u7684l\u8986\u76d6\u6570\u5b57\u76f8\u540c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u8bf4\u4e0b\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u52a0\u8d77\u6765t\u7edd\u5bf9\u503c\u5c31\u4f1a\u66f4\u5c0f\u3002\n\n\u5148\u524d\u5355\u4e2a\u513f\u5b50\u533a\u95f4\u4e2dmx\u90fd\u4e0d\u4e00\u5b9a\u4f1a\u53d6l\u6216r\u7684\u503c\uff0c\u8fd9\u91cc\u66f4\u5c0f\u4e86\u7684\u8bdd\u90a3\u4e0d\u5c31\u66f4\u4e0d\u4f1a\u53d6\u4e86\uff1f\n\n\u518d\u8c08\u7b26\u53f7\uff0c\u7531\u4e8emx\u975e\u8d1f\uff0ct\u82e5\u662f\u7edd\u5bf9\u503c\u6bd4\u4e0d\u4e0a\uff0c\u90a3t\u539f\u503c\u662f\u6b63\u662f\u8d1f\u662f\u4e0d\u662f\u90fd\u6bd4\u4e0d\u4e0a\uff1f\n\n\u7ec8\u4e8e\u5230\u4e86push_down\u7684\u90e8\u5206\u4e86\n\n### push_down\n\n\u8fd9\u91cc\u91c7\u7528\u5148\u8986\u76d6\u540e\u53d6\u53cd\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u5728\u66f4\u65b0\u4fe1\u606f\u65f6\u82e5\u662f\u5728\u67d0\u533a\u95f4\u6574\u4f53\u8986\u76d6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u53d6\u53cd\u6807\u8bb0\u5c31\u8981\u6e05\u7a7a\uff0c\u4e5f\u4e0e\u524d\u6587\u8bf4x\u5b58\u7684\u662f\u8fde\u7eed\u53d6\u53cd\u4fe1\u606f\u76f8\u547c\u5e94\n\n```cpp\nvoid push_down(int k,int l,int r)\n{\n\tif(sgt[k].c){\n\t\tcover(P,l,M,sgt[k].c-1);\n\t\tcover(S,M+1,r,sgt[k].c-1);\t//\u8986\u76d6\u64cd\u4f5c\n\t}\n\tif(sgt[k].x){\n\t\trev(P,l,M);\n\t\trev(S,M+1,r);\t\t\t\t//\u53d6\u53cd\u64cd\u4f5c\n\t}\n\tsgt[k].c=0;\n\tsgt[k].x=0;\t\t\t\t\t\t//\u5f52\u96f6\n}\n```\n\n\u5982\u6b64\u770b\u6765\uff0cpush_down\u7684\u4ee3\u7801\u597d\u50cf\u4e5f\u4e0d\u662f\u90a3\u4e48\u591a\u561b\n\n\u4e0a\u6574\u4e2a\u4ee3\u7801\u4e86\u54c8\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define ll long long\n#define N 100005\n#define P (k<<1)\n#define S P|1\n#define M (l+r>>1)\n#define len (r-l+1)\nint read()\n{\n\tint w=1,num=0;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0' && c<='9'){num=(num<<1)+(num<<3)+c-'0';c=getchar();}\n\treturn w*num;\n}\nstruct tree{\n\tint sum,l,r,mx0,mx1;bool x;int c;\t//x for xor, c for cover.\n\t\t\t\t\t\t\t\t\t\t//x: 1 rev, 0 instead\n\t\t\t\t\t\t\t\t\t\t//c: 0 don't cover, 1 cover 0, 2 cover 1\n}sgt[N<<2];\nint n,m;\nint a[N];\nvoid push_up(int k,int l,int r)\n{\n\tsgt[k].sum=sgt[P].sum+sgt[S].sum;\n\tsgt[k].l=sgt[P].l;sgt[k].r=sgt[S].r;\n\tif(((sgt[P].l==sgt[P].r && sgt[P].l==sgt[P].sum) || !sgt[P].sum) && sgt[P].l*sgt[S].l>0)\tsgt[k].l+=sgt[S].l;\n\tif(((sgt[S].r==sgt[S].l && sgt[S].r==sgt[S].sum) || !sgt[S].sum) && sgt[S].r*sgt[P].r>0)\tsgt[k].r+=sgt[P].r;\n\tint t=sgt[P].r + sgt[S].l;\n\tsgt[k].mx0=max(-t,max(sgt[P].mx0,sgt[S].mx0));\n\tsgt[k].mx1=max(t,max(sgt[P].mx1,sgt[S].mx1));\n}\nvoid build(int k,int l,int r)\n{\n\tif(l==r){\n\t\tsgt[k].mx1=sgt[k].sum=a[l];\n\t\tsgt[k].mx0=!a[l];\n\t\tsgt[k].l=sgt[k].r=(a[l]<<1)-1;\n\t\treturn;\n\t}\n\tbuild(P,l,M);\n\tbuild(S,M+1,r);\n\tpush_up(k,l,r);\n}\nvoid rev(int k,int l,int r)\n{\n\tsgt[k].sum=len-sgt[k].sum;\n\tswap(sgt[k].mx0,sgt[k].mx1);\n\tsgt[k].l*=-1;sgt[k].r*=-1;\n\tsgt[k].x^=1;\n}\nvoid cover(int k,int l,int r,int mode)\n{\n\tsgt[k].mx1=sgt[k].sum=mode*len;\n\tsgt[k].mx0=(!mode)*len;\n\tsgt[k].l=((mode<<1)-1)*len; \n\tsgt[k].r=sgt[k].l;\n\tmode+=1;\n\tsgt[k].c=mode;\n\tsgt[k].x=0;\n}\n//c first\nvoid push_down(int k,int l,int r)\n{\n\tif(sgt[k].c){\n\t\tcover(P,l,M,sgt[k].c-1);\n\t\tcover(S,M+1,r,sgt[k].c-1);\n\t}\n\tif(sgt[k].x){\n\t\trev(P,l,M);\n\t\trev(S,M+1,r);\n\t}\n\tsgt[k].c=0;\n\tsgt[k].x=0;\n}\nvoid upd(int k,int l,int r,int i,int j,int mode)\n{\n\tif(l>=i && r<=j){\n\t\tif(mode!=2)\n\t\t\tcover(k,l,r,mode);\n\t\telse\n\t\t\trev(k,l,r);\n\t\treturn;\n\t}\n\tpush_down(k,l,r);\n\tif(M>=i)\tupd(P,l,M,i,j,mode);\n\tif(M<j)\t\tupd(S,M+1,r,i,j,mode);\n\tpush_up(k,l,r);\n}\ntree query(int k,int l,int r,int i,int j,int mode)\n{\n\tif(l>=i && r<=j)\n\t\treturn sgt[k];\n\tpush_down(k,l,r);\n\ttree ans,t;\n\tmemset(&ans,0,sizeof(ans));memset(&t,0,sizeof(t));\n\tif(M>=i)\tans=query(P,l,M,i,j,mode);\n\tif(M<j)\t\tt=query(S,M+1,r,i,j,mode);\n\tans.sum+=t.sum;//\u8fd9\u91cc\u5728\u540e\u9762\u8fd8\u8981\u51cf\u6389t.sum\uff0c\u8c03\u4e86\u633a\u4e45\u7684 \n\tif(mode==4){\n\t\tif(((ans.l==ans.r && ans.l==ans.sum-t.sum) || !ans.sum) && ans.l*t.l>0)\tans.l+=t.l;\n\t\tif(((t.l==t.r && t.r==t.sum) || !t.sum) && t.r*ans.r>0)\t\t\t\t\tt.r+=ans.r;\n\t\tans.mx1=max(ans.r+t.l,max(ans.mx1,t.mx1));\n\t\tif(t.r)\t\tans.r=t.r;\n\t\tif(!ans.l)\tans.l=t.l;\n\t}\n\treturn ans;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\ta[i]=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint mode=read(),l=read(),r=read();\n\t\tl++;r++;\n\t\tif(mode<=2)\tupd(1,1,n,l,r,mode);\n\t\telse\n\t\t\tif(mode==3)\tprintf(\"%d\\n\",query(1,1,n,l,r,mode).sum);\n\t\t\telse\t\tprintf(\"%d\\n\",query(1,1,n,l,r,mode).mx1);\n\t}\n\treturn 0;\n}\n```\n\u611f\u8c22\u89c2\u770b",
        "postTime": 1585805587,
        "uid": 152459,
        "name": "wenye05",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "[P2572 [SCOI2010]\u5e8f\u5217\u64cd\u4f5c](https://www.luogu.org/problem/P2572)\n\n\u8fd9\u9053\u9898\u9898\u89e3\u5df2\u7ecf\u5f88\u591a\u4e86\n\n\u4f46\u662f\u6211\u8fd8\u662f\u60f3\u5199\u4e00\u7bc7\n\n~~\u7eaa\u5ff5 \u8c03\u4e09\u5929\u4ee3\u7801~~\n\n\n### \u601d\u8def\n\n\u601d\u8def \u5f88\u7b80\u5355\n\n```cpp\nstruct node\n{\n\tint len,sum,lazy,rev,lsum[2],rsum[2],maxl[2];\n}tree[MAXN << 2];\nlen:\u957f\u5ea6\n\nsum:1\u7684\u4e2a\u6570\n\nlazy:\u628a[a, b]\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u62100/1\u6807\u8bb0\n\nrev:\u53cd\u8f6c\u6807\u8bb0\n\nlsum[1/0]:\u8bb0\u5f55\u4ece\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed1/0\u7684\u4e2a\u6570\n\nrsum[1/0]:\u8bb0\u5f55\u4ece\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed1/0\u7684\u4e2a\u6570\n\nmaxl[1/0]:\u8bb0\u5f55\u533a\u95f4\u5185\u6700\u957f\u8fde\u7eed1/0\u7684\u4e2a\u6570\n```\n\n\u7136\u540e \u5c31\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u4e86\n\n\u4e3b\u8981\u662f\u8c03\u8bd5\n\n### \u8c03\u8bd5\u8981\u70b9\n\n\u6765\u8bf4\u4e00\u4e9b\u6280\u5de7\n\n$pushdown$\u65f6 \u8981\u4e48\u5de6\u533a\u95f4,\u8981\u4e48\u53f3\u533a\u95f4\n\n\u53ef\u4ee5\u8003\u8651 \u4e24\u6b21$pushdown$ \n\n\u6bcf\u6b21\u4f20 \u73b0\u5728\u533a\u95f4\u6807\u53f7 \u4fee\u6539\u533a\u95f4\u6807\u53f7 \u4fee\u6539\u533a\u95f4\u957f\u5ea6\n\n```cpp\npushdown(k,k << 1,mid - l + 1);\npushdown(k,k << 1 | 1,r - mid);\nr - mid \uff01\uff01\u4e0d\u8981+1\uff01\uff01\n```\n\n\u7c7b\u4f3c\u7684\n\n```cpp\nupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\u4fee\u6539lsum[0],rsum[0],maxl[0]\nupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\u4fee\u6539lsum[1],rsum[1],maxl[1]\n```\n\n### $code$\n\n```cpp\n#include <stack>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define reg register int\n#define isdigit(x) ('0' <= x&&x <= '9')\ntemplate<typename T>\ninline T Read(T Type)\n{\n\tT x = 0,f = 1;\n\tchar a = getchar();\n\twhile(!isdigit(a)) {if(a == '-') f = -1;a = getchar();}\n\twhile(isdigit(a)) {x = (x << 1) + (x << 3) + (a ^ '0');a = getchar();}\n\treturn x * f;\n}\nconst int MAXN = 100010;\nstruct segment_tree\n{\n\tstruct node\n\t{\n\t\tint len,sum,lazy,rev,lsum[2],rsum[2],maxl[2];\n\t}tree[MAXN << 2];\n\tvoid update(int k,int k1,int k2,int lenl,int lenr,int x) \n\t{\n\t\ttree[k].maxl[x] = max(tree[k1].maxl[x],max(tree[k2].maxl[x],tree[k1].rsum[x] + tree[k2].lsum[x]));\n\t\ttree[k].lsum[x] = tree[k1].lsum[x];\n\t\tif(tree[k1].lsum[x] == lenl) tree[k].lsum[x] += tree[k2].lsum[x];\n\t\ttree[k].rsum[x] = tree[k2].rsum[x];\n\t\tif(tree[k2].rsum[x] == lenr) tree[k].rsum[x] += tree[k1].rsum[x];\n\t\ttree[k].sum = tree[k1].sum + tree[k2].sum;\n\t}\n\tvoid build(int k,int l,int r) \n\t{\n\t\tif(l == r)\n\t\t{\n\t\t\tint x = tree[k].sum = Read(1);\n\t\t\ttree[k].maxl[x] = tree[k].lsum[x] = tree[k].rsum[x] = 1;\n\t\t\ttree[k].maxl[!x] = tree[k].lsum[!x] = tree[k].rsum[!x] = 0;\n\t\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\tbuild(k << 1,l,mid);\n\t\tbuild(k << 1 | 1,mid + 1,r);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\t}\n\tvoid pushdown(int k,int k1,int len) \n\t{\n\t\tif(tree[k].lazy != -1)\n\t\t{\n\t\t\tint x = tree[k1].lazy = tree[k].lazy;\n\t\t\ttree[k].rev = tree[k1].rev = 0;\n\t\t\t//lazy\u4e0erev\u7684\u4f18\u5148\u7ea7\u52a1\u5fc5\u8003\u8651\u6e05\u695a \n\t\t\ttree[k1].sum = (x == 1?len:0);\n\t\t\ttree[k1].maxl[x] = tree[k1].lsum[x] = tree[k1].rsum[x] = len;\n\t\t\ttree[k1].maxl[!x] = tree[k1].lsum[!x] = tree[k1].rsum[!x] = 0;\n\t\t}\n\t\tif(tree[k].rev)\n\t\t{\n\t\t\tif(tree[k1].lazy != -1) tree[k1].lazy = !tree[k1].lazy;\n\t\t\telse tree[k1].rev = !tree[k1].rev;\n\t\t\t//lazy\u4e0erev\u7684\u4f18\u5148\u7ea7\u52a1\u5fc5\u8003\u8651\u6e05\u695a \n\t\t\t//\u4e0b\u4f20\u65f6\uff0c\u6ce8\u610f\u4fee\u6539l/r\u533a\u95f4\u7684rev\u548clazy \u6b64\u65f6\u4ecd\u5f97\u8003\u8651\u4f18\u5148\u7ea7 \n\t\t\ttree[k1].sum = len - tree[k1].sum;\n\t\t\tswap(tree[k1].lsum[0],tree[k1].lsum[1]);\n\t\t\tswap(tree[k1].rsum[0],tree[k1].rsum[1]);\n\t\t\tswap(tree[k1].maxl[0],tree[k1].maxl[1]);\n\t\t}\n\t}\n\tvoid change(int k,int l,int r,int L,int R,int x) \n\t{\n\t\tif(L <= l&&r <= R)\n\t\t{\n\t\t\ttree[k].lazy = x,tree[k].rev = 0; \n\t\t\ttree[k].sum = (x == 1?r - l + 1:0);\n\t\t\ttree[k].maxl[x] = tree[k].lsum[x] = tree[k].rsum[x] = r - l + 1;\n\t\t\ttree[k].maxl[!x] = tree[k].lsum[!x] = tree[k].rsum[!x] = 0;\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(k,k << 1,mid - l + 1);\n\t\tpushdown(k,k << 1 | 1,r - mid);\n\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\tif(L <= mid) change(k << 1,l,mid,L,R,x);\n\t\tif(mid < R) change(k << 1 | 1,mid + 1,r,L,R,x);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\t}\n\tvoid inverse(int k,int l,int r,int L,int R) \n\t{\n\t\tif(L <= l&&r <= R)\n\t\t{\n\t\t\tif(tree[k].lazy != -1) tree[k].lazy = !tree[k].lazy;\n\t\t\telse tree[k].rev = !tree[k].rev;\n\t\t\ttree[k].sum = r - l + 1 - tree[k].sum;\n\t\t\tswap(tree[k].lsum[0],tree[k].lsum[1]);\n\t\t\tswap(tree[k].rsum[0],tree[k].rsum[1]);\n\t\t\tswap(tree[k].maxl[0],tree[k].maxl[1]);\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(k,k << 1,mid - l + 1);\n\t\tpushdown(k,k << 1 | 1,r - mid);\n\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\tif(L <= mid) inverse(k << 1,l,mid,L,R);\n\t\tif(mid < R) inverse(k << 1 | 1,mid + 1,r,L,R);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\t}\n\tint query(int k,int l,int r,int L,int R) \n\t{\n\t\t\n\t\tif(L <= l&&r <= R) return tree[k].sum;\n\t\tint mid = l + r >> 1;\n\t\tpushdown(k,k << 1,mid - l + 1);\n\t\tpushdown(k,k << 1 | 1,r - mid);\n\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\tint ans = 0;\n\t\tif(L <= mid) ans = query(k << 1,l,mid,L,R);\n\t\tif(mid < R) ans += query(k << 1 | 1,mid + 1,r,L,R);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\t\treturn ans;\n\t}\n\tnode Sum(int k,int l,int r,int L,int R) \n\t{\n\t\tif(L <= l&&r <= R) \n\t\t{\n\t\t\ttree[k].len = r - l + 1;\n\t\t\treturn tree[k];\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(k,k << 1,mid - l + 1);\n\t\tpushdown(k,k << 1 | 1,r - mid);\n\t\ttree[k].lazy = -1,tree[k].rev = 0;\n\t\tnode k1[2];\n\t\tmemset(k1,0,sizeof(k1));\n\t\tif(L <= mid) k1[0] = Sum(k << 1,l,mid,L,R);\n\t\tif(mid < R) k1[1] = Sum(k << 1 | 1,mid + 1,r,L,R);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,0);\n\t\tupdate(k,k << 1,k << 1 | 1,mid - l + 1,r - mid,1);\n\t\tnode k3;\n\t\tk3.maxl[1] = max(k1[0].maxl[1],max(k1[1].maxl[1],k1[0].rsum[1] + k1[1].lsum[1]));\n\t\tk3.lsum[1] = k1[0].lsum[1];\n\t\tif(k1[0].lsum[1] == k1[0].len) k3.lsum[1] += k1[1].lsum[1];\n\t\tk3.rsum[1] = k1[1].rsum[1];\n\t\tif(k1[1].rsum[1] == k1[1].len) k3.rsum[1] += k1[0].rsum[1];\n\t\tk3.len = k1[0].len + k1[1].len;\n\t\t//\u4e0d\u8981\u5fd8\u4e86\u7b97len \u8fd9\u884c\u6ca1\u5199 \u53ea\u4f1awa\u4e24\u4e2a\u70b9 \n\t\treturn k3;\n\t}\n}T;\nint main()\n{\n\tint n = Read(1),m = Read(1);\n\tmemset(T.tree,0,sizeof(T.tree));\n\tT.build(1,1,n);\n\twhile(m--)\n\t{\n\t\tint ans,op = Read(1),l = Read(1) + 1,r = Read(1) + 1;\n\t\t//\u4e0d\u8981\u5fd8\u4e86\u52a01 \n\t\tswitch(op)\n\t\t{\n\t\t\tcase 0: T.change(1,1,n,l,r,0); break; \n\t\t\tcase 1: T.change(1,1,n,l,r,1); break; \n\t\t\tcase 2: T.inverse(1,1,n,l,r); break; \n\t\t\tcase 3: ans = T.query(1,1,n,l,r); printf(\"%d\\n\",ans); break; \n\t\t\tcase 4: ans = T.Sum(1,1,n,l,r).maxl[1]; printf(\"%d\\n\",ans); break; \n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### \u603b\u7ed3\n\n\u8fd9\u79cd\u6bd2\u7624\u6570\u636e\u7ed3\u6784\u9898\n\n\u5148\u9759\u6001\u67e5\u9519\n\n\u518d\u5bf9\u62cd\n\n\u7136\u540e\u6c42\u52a9\n\n~~\u6216\u8005\u76f4\u63a5\u6c42\u52a9~~\n\n#### \u5e2e\u52a9\u5de5\u5177\n\n\u5982\u679c\u8fd8\u6ca1\u8c03\u51fa\u6765 \u53ef\u4ee5\u5c1d\u8bd5\u4ee5\u4e0b\u65b9\u5f0f\n\n\n\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c  \u63d0\u4f9b\u7684\u5bf9\u62cd\u7a0b\u5e8f \n```cpp\n#include<bit/stdc++.h>\nusing namespace std;\nint main()\n{\n    while(1)\n    {\n        system(\"gen.exe\");//\u8fd9\u662f\u4f60\u7684\u6570\u636e\u751f\u6210\u5668\n        system(\"1.exe < data.in > 1.out\");//\u8fd9\u662f\u4f60\u7684\u7a0b\u5e8f \n        system(\"2.exe < data.in > 2.out\");//\u8fd9\u662f\u9898\u89e3\u6216\u8005\u9700\u8981\u5bf9\u62cd\u7684\u66b4\u529b\n        if(system(\"fc 1.out 2.out\")) break;//\u5bf9\u4e24\u4e2a\u7684\u8f93\u51fa\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u4e00\u6837\u5c31\u4f1a\u7ec8\u6b62\u7a0b\u5e8f \n    }\n}\n```\n\nLJC00118 \u63d0\u4f9b\u7684 \n\n[\u6570\u636e\u751f\u6210\u7a0b\u5e8f](https://www.luogu.org/discuss/show/43457)",
        "postTime": 1573104464,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\u590d\u4e60"
    },
    {
        "content": "(\u5bf9\u62cd\u5199\u9519\u4e86\uff0c\u7136\u540e\u62cd\u4e86\u534a\u4e2a\u5c0f\u65f6\u603b\u662f\u7b54\u6848\u9519\u8bef\uff0c\u4e00\u6012\u4e4b\u4e0b\u76f4\u63a5\u4ea4\u8bc4\u6d4b\u5c31A\u4e86..\uff09\n\n\u590d\u6742\uff0c\u4f46\u4e0d\u56f0\u96be\u7684\u7ebf\u6bb5\u6811\u3002\n\n### \u7ebf\u6bb5\u6811\u7684\u7ed3\u70b9\u7ef4\u62a4\u54ea\u4e9b\u4fe1\u606f\uff1f\n\n- 1. \u5de6\u53f3\u7aef\u70b9\u989c\u8272\n- 2. \u6700\u957f\u8fde\u7eed$1$\n- 3. \u6700\u957f\u8fde\u7eed$0$\n- 4. \u53cd\u8f6c\uff0c\u8986\u76d6\u6807\u8bb0\n- 5. \u603b\u5171\u6709\u591a\u5c11$1$\n\n### \u5982\u4f55\u5408\u5e76\u533a\u95f4\uff1f\n\n\u9996\u5148\u8003\u8651\u4fe1\u606f5\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u533a\u95f4\u548c\u7684\u5408\u5e76\u65b9\u5f0f\u5373\u53ef\u3002\n\n\u7136\u540e\u518d\u770b\u4fe1\u606f2\uff0c3\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8003\u8651\u5f53\u524d\u533a\u95f4\u7684\u9760\u5de6\u6700\u957f\u8fde\u7eed\u6bb5\uff0c\u9760\u53f3\u6700\u957f\u8fde\u7eed\u6bb5\u548c\u4e2d\u95f4\u6700\u957f\u8fde\u7eed\u6bb5\u6765\u7ef4\u62a4\u5408\u5e76\u3002\n\n\u518d\u770b\u4fe1\u606f1\uff0c\u76f4\u63a5\u8ba9\u4ed6\u7684\u5de6\u7aef\u70b9\u7b49\u4e8e\u5de6\u513f\u5b50\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u7b49\u4e8e\u53f3\u513f\u5b50\u53f3\u7aef\u70b9\u5373\u53ef\u3002\n\n### \u5982\u4f55\u4e0b\u653e\u6807\u8bb0\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u8986\u76d6\u6807\u8bb0\u5728\u4e0b\u653e\u7684\u65f6\u5019\uff0c\u4f1a\u8986\u76d6\u6389\u4e4b\u524d\u7684\u6240\u6709\u6807\u8bb0\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5148\u4e0b\u653e\u8986\u76d6\u6807\u8bb0\uff0c\u518d\u4e0b\u65b9\u53cd\u8f6c\u6807\u8bb0\u5373\u53ef\u3002\n\n\u4e0b\u65b9\u53cd\u8f6c\u6807\u8bb0\u65f6\u6709\u4ec0\u4e48\u8981\u6ce8\u610f\u7684\uff1f\n\n\u5982\u679c\u4e0b\u65b9\u7684\u4e0b\u4e00\u4e2a\u5b50\u533a\u95f4\u6709\u8986\u76d6\u6807\u8bb0\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u4ed6\u7684\u8986\u76d6\u6807\u8bb0\u5f02\u6216\u4e00\u5373\u53ef\uff0c\u82e5\u6ca1\u6709\u8986\u76d6\u6807\u8bb0\uff0c\u90a3\u5c31\u628a\u4ed6\u7684\u53cd\u8f6c\u6807\u8bb0\u5f02\u6216\u4e00\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u5982\u679c\u4e0b\u4e00\u4e2a\u533a\u95f4\u6709\u8986\u76d6\u6807\u8bb0\u5e76\u4e14\u6709\u53cd\u8f6c\u6807\u8bb0\u7684\u8bdd\uff0c\u4ed6\u7684\u8986\u76d6\u6807\u8bb0\u4e00\u5b9a\u65f6\u5148\u5230\u7684\uff0c\u5e76\u4e14\u53cd\u8f6c\u6807\u8bb0\u4f1a\u628a\u4ed6\u7684\u8986\u76d6\u6807\u8bb0\u53cd\u8f6c\uff0c\u5982\u679c\u6211\u4eec\u4e0b\u6b21\u7684\u53cd\u8f6c\u6807\u8bb0\u53c8\u6765\u5230\u4e86\u8fd9\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u4ed6\u7684\u8986\u76d6\u6807\u8bb0\u53cd\u8f6c\uff0c\u4e0d\u53bb\u7ba1\u4ed6\u7684\u53cd\u8f6c\u6807\u8bb0\u5373\u53ef\u3002\n\n\u540c\u7406\uff0c\u82e5\u4ed6\u6709\u8986\u76d6\u6807\u8bb0\u5374\u6ca1\u6709\u53cd\u8f6c\u6807\u8bb0\u7684\u8bdd\uff0c\u548c\u4e0a\u9762\u4e00\u6837\u3002\n\n### \u5982\u4f55\u67e5\u8be2\u548c\u66f4\u65b0\uff1f\n\n\u524d\u51e0\u4e2a\u64cd\u4f5c\u90fd\u662f\u57fa\u7840\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4e3b\u8981\u8bf4\u4e00\u4e0b\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u8fd4\u56de\u7ed3\u6784\u4f53\u7684\u51fd\u6570\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u4e4b\u540e\u5408\u5e76\u67e5\u8be2\u7684\u4e24\u4e2a\u533a\u95f4\u7684\u7b54\u6848\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u5408\u5e76\u7684\u7b54\u6848\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u4e00\u4e2a`pushup`\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\u7ed3\u6784\u4f53\u4e2d\u7684**\u6700\u957f\u8fde\u7eed\u4e00**\u7684\u90a3\u4e2a\u4fe1\u606f\u3002\n\n\u4ee3\u7801\u4e0d\u96be\u5199\uff0c\u4e3b\u8981\u662f\u7ec6\u5fc3\u3002\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1\n\nusing namespace std;\n\nconst int N = 2 * 1e5;\nint n , m , a[N];\n\nstruct Seg {\n\tint l , r , len; // \u672c\u5c5e\u6027 \n\tint qf , fg; // tag\n\tint dis; // \u6709\u51e0\u4e2a\u4e00 \n\tint ld , rd; // \u5de6\u53f3\u7ed3\u70b9\u989c\u8272 \n\tint lft[2] , rgt[2] , mid[2]; // \u7ef4\u62a4\u6700\u957f\u5e8f\u52171/0 \n\tSeg() {fg = -1;\n\tl = r = len = qf = dis = ld = rd = lft[1] = rgt[1] = mid[1] = lft[0] = rgt[0] = mid[0] = 0;}\n}t[N << 1];\n\nvoid pushup(int x) {\n\tt[x].dis = t[ls(x)].dis + t[rs(x)].dis;\n\tt[x].ld = t[ls(x)].ld; t[x].rd = t[rs(x)].rd;\n\t\n\tt[x].lft[1] = t[ls(x)].lft[1]; t[x].rgt[1] = t[rs(x)].rgt[1];\n\tt[x].lft[0] = t[ls(x)].lft[0]; t[x].rgt[0] = t[rs(x)].rgt[0];\n\t\n\tif(t[ls(x)].lft[1] == t[ls(x)].len) t[x].lft[1] += t[rs(x)].lft[1];\n\tif(t[ls(x)].lft[0] == t[ls(x)].len) t[x].lft[0] += t[rs(x)].lft[0];\n\t\n\tif(t[rs(x)].rgt[1] == t[rs(x)].len) t[x].rgt[1] += t[ls(x)].rgt[1];\n\tif(t[rs(x)].rgt[0] == t[rs(x)].len) t[x].rgt[0] += t[ls(x)].rgt[0];\n\t\n\tt[x].mid[1] = max(t[ls(x)].mid[1] , t[rs(x)].mid[1]);\n\tt[x].mid[0] = max(t[ls(x)].mid[0] , t[rs(x)].mid[0]);\n\t\n\tt[x].mid[1] = max(t[x].mid[1] , t[ls(x)].rgt[1] + t[rs(x)].lft[1]);\n\tt[x].mid[0] = max(t[x].mid[0] , t[ls(x)].rgt[0] + t[rs(x)].lft[0]); \n}\n\nvoid built(int x , int l , int r ){\n\tt[x].l = l , t[x].r = r;\n\tt[x].len = r - l + 1;\n\tif(l == r) {\n\t\tt[x].dis = a[l];\n\t\tt[x].ld = t[x].rd = a[l];\n\t\tt[x].lft[1] = t[x].rgt[1] = t[x].mid[1] = a[l];\n\t\tt[x].lft[0] = t[x].rgt[0] = t[x].mid[0] = (a[l] ^ 1);\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuilt(ls(x) , l , mid);\n\tbuilt(rs(x) , mid + 1 , r);\n\tpushup(x);\n}\n\nvoid pushdown(int x) {\n\tif(t[x].fg != -1) {\n\t\tint tag = t[x].fg;\n\t\tt[ls(x)].fg = tag;\n\t\tt[rs(x)].fg = tag;\n\t\tt[ls(x)].dis = tag * t[ls(x)].len;\n\t\tt[rs(x)].dis = tag * t[rs(x)].len;\n\t\tt[ls(x)].ld = t[ls(x)].rd = t[rs(x)].ld = t[rs(x)].rd = tag;\n\t\tt[ls(x)].qf = t[rs(x)].qf = 0;\n\t\tt[ls(x)].lft[1] = t[ls(x)].rgt[1] = t[ls(x)].mid[1] = tag * t[ls(x)].len;\n\t\tt[rs(x)].lft[1] = t[rs(x)].rgt[1] = t[rs(x)].mid[1] = tag * t[rs(x)].len;\n\t\t\n\t\tt[ls(x)].lft[0] = t[ls(x)].rgt[0] = t[ls(x)].mid[0] = (tag ^ 1) * t[ls(x)].len;\n\t\tt[rs(x)].lft[0] = t[rs(x)].rgt[0] = t[rs(x)].mid[0] = (tag ^ 1) * t[rs(x)].len;\n\t\tt[x].fg = -1;\n\t}\n\tif(t[x].qf == 1) {\n\t\tt[ls(x)].ld ^= 1; t[ls(x)].rd ^= 1;\n\t\tt[rs(x)].ld ^= 1; t[rs(x)].rd ^= 1;\n\t\tif(t[ls(x)].fg != -1) t[ls(x)].fg ^= 1;\n\t\telse t[ls(x)].qf ^= 1;\n\t\tif(t[rs(x)].fg != -1) t[rs(x)].fg ^= 1;\n\t\telse t[rs(x)].qf ^= 1;\n\t\tt[ls(x)].dis = t[ls(x)].len - t[ls(x)].dis;\n\t\tt[rs(x)].dis = t[rs(x)].len - t[rs(x)].dis;\t\n\t\tswap(t[ls(x)].lft[1] , t[ls(x)].lft[0]);\n\t\tswap(t[ls(x)].rgt[1] , t[ls(x)].rgt[0]);\n\t\tswap(t[ls(x)].mid[1] , t[ls(x)].mid[0]);\n\t\t\n\t\tswap(t[rs(x)].lft[1] , t[rs(x)].lft[0]);\n\t\tswap(t[rs(x)].rgt[1] , t[rs(x)].rgt[0]);\n\t\tswap(t[rs(x)].mid[1] , t[rs(x)].mid[0]);\n\t\tt[x].qf =0 ;\n\t}\n}\n\nvoid updata_all_0(int x , int l , int r) {\n\tif(t[x].l >= l && t[x].r <= r) {\n\t\tt[x].ld = t[x].rd = 0;\n\t\tt[x].dis = 0;\n\t\tt[x].lft[1] = t[x].rgt[1] = t[x].mid[1] = 0;\n\t\tt[x].lft[0] = t[x].rgt[0] = t[x].mid[0] = t[x].len;\n\t\tt[x].qf = 0 ; t[x].fg = 0;\n\t\treturn;\n \t}\n \tpushdown(x);\n\tint mid = (t[x].l + t[x].r )>> 1;\n \tif(l <= mid) updata_all_0(ls(x) , l , r);\n\tif(r > mid ) updata_all_0(rs(x) , l, r);\n\tpushup(x);\n}\n\nvoid updata_all_1(int x , int l , int r) {\n\tif(t[x].l >= l && t[x].r <= r) {\n\t\tt[x].ld = t[x].rd = 1;\n\t\tt[x].dis = t[x].len;\n\t\tt[x].lft[1] = t[x].rgt[1] = t[x].mid[1] = t[x].len;\n\t\tt[x].lft[0] = t[x].rgt[0] = t[x].mid[0] = 0;\n\t\tt[x].qf = 0 ; t[x].fg = 1;\n\t\treturn;\n \t}\n \tpushdown(x);\n\tint mid = (t[x].l + t[x].r) >> 1;\n \tif(l <= mid) updata_all_1(ls(x) , l , r);\n\tif(r > mid ) updata_all_1(rs(x) , l, r);\n\tpushup(x);\n}\n\nvoid updata_all_rev(int x , int l , int r) {\n\tif(t[x].l >= l && t[x].r <= r) {\n\t\tt[x].ld ^= 1; t[x].rd ^= 1;\n\t\tt[x].dis = t[x].len - t[x].dis;\n\t\tswap(t[x].lft[1] , t[x].lft[0]);\n\t\tswap(t[x].rgt[1] , t[x].rgt[0]);\n\t\tswap(t[x].mid[1] , t[x].mid[0]);\n\t\tt[x].qf ^= 1;\n\t\t\n\t\treturn;\n \t}\n \tpushdown(x);\n\tint mid = (t[x].l + t[x].r) >> 1;\n \tif(l <= mid) updata_all_rev(ls(x) , l , r);\n\tif(r > mid ) updata_all_rev(rs(x) , l, r);\n\tpushup(x);\n}\n\nint query_all_1(int x , int l,  int r) {\n\tif(t[x].l >= l && t[x].r <= r) return t[x].dis;\n\tint ans = 0;\n\tpushdown(x);\n\tint mid = (t[x].l + t[x].r) >> 1;\n\tif(l <= mid) ans += query_all_1(ls(x) , l , r);\n\tif(r > mid ) ans += query_all_1(rs(x) , l , r);\n\tpushup(x);\n\treturn ans; \n}\n\nSeg query_cnt_1(int x , int l,  int r) {\n\tif(t[x].l >= l && t[x].r <= r) return t[x];\n\tSeg ans;\n\tpushdown(x);\n\tint mid = (t[x].l + t[x].r) >> 1;\n\tSeg lson , rson;\n\tif(l <= mid) lson = query_cnt_1(ls(x) , l , r);\n\tif(r > mid ) rson = query_cnt_1(rs(x) , l , r);\n\tans.lft[1] = lson.lft[1];\n\tif(lson.lft[1] == lson.len) ans.lft[1] += rson.lft[1];\n\tans.rgt[1] = rson.rgt[1];\n\tif(rson.rgt[1] == rson.len) ans.rgt[1] += lson.rgt[1];\n\tans.mid[1] = max(lson.mid[1] , rson.mid[1]);\n\tans.mid[1] = max(ans.mid[1] , lson.rgt[1] + rson.lft[1]);\n\treturn ans; \n}\n\nint main () {\n//\tfreopen(\"data.txt\" ,\"r\" , stdin);\n//\tfreopen(\"ans2.out\" ,\"w\" , stdout);\n\tscanf(\"%d %d\" , &n , &m);\n\tfor(int i = 1 ; i <= n ; ++ i) scanf(\"%d\" , a + i);\n\tbuilt(1 , 1 , n);\n\twhile(m -- ) {\t\t\n\t\tint opt , l , r; scanf(\"%d %d %d\" , &opt,  &l , &r);\n\t\tl ++ , r ++;\n\t\tif(opt == 0) {\n\t\t\tupdata_all_0(1 , l , r);\n\t\t} else if(opt == 1) {\n\t\t\tupdata_all_1(1 , l , r);\n\t\t} else if(opt == 2) {\n\t\t\tupdata_all_rev(1 , l , r);\n\t\t} else if(opt == 3) {\n\t\t\tprintf(\"%d\\n\" , query_all_1(1 , l , r));\n\t\t} else if(opt == 4) {\n\t\t\tSeg ans = query_cnt_1(1 , l , r);\n\t\t\tprintf(\"%d\\n\" , max(ans.mid[1] , max(ans.lft[1] , ans.rgt[1])));\n\t\t}\n\t}\n\treturn 0;\n} \n\n```\n\n",
        "postTime": 1572744571,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://pelom.top/archives/52/)\n\n# \u9898\u610f\n\n\u5bf9\u4e8e\u4e00\u4e2a$01$\u5e8f\u5217\uff0c\u6709$5$\u79cd\u64cd\u4f5c\uff1a\n\n$0 \\ a \\ b$ \u628a$[a,b]$\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u6210$0$\n\n$1 \\ a \\ b$ \u628a$[a,b]$\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u53d8\u6210$1$\n\n$2 \\ a \\ b$ \u628a$[a,b]$\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5168\u90e8\u53d6\u53cd\n\n$3 \\ a \\ b$ \u8be2\u95ee$[a,b]$\u533a\u95f4\u5185\u603b\u5171\u6709\u591a\u5c11\u4e2a$1$\n\n$4 \\ a \\ b$ \u8be2\u95ee$[a,b]$\u533a\u95f4\u5185\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684$1$\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u7b54\u6848\n\n**\u6570\u636e\u8303\u56f4\uff1a**$1 \\le n,m \\le 100000$\n\n# \u9898\u89e3\n\n\u660e\u663e\u7684\u7ebf\u6bb5\u6811\u9898\n\n\u9700\u8981\u7ef4\u62a4\u54ea\u4e9b\u4e1c\u897f\uff1f\u533a\u95f4$1$\u7684\u603b\u6570\uff0c\u8fde\u7eed$1$\u7684\u6700\u5927\u4e2a\u6570\uff0c\u8986\u76d6\u6807\u8bb0\uff0c\u53d6\u53cd\u6807\u8bb0\n\n\u4e3a\u4e86\u5728\u53d6\u53cd\u540e\u83b7\u5f97\u8fde\u7eed$1$\u7684\u6700\u5927\u4e2a\u6570\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u8fde\u7eed$0$\u7684\u6700\u5927\u4e2a\u6570\n\n\u56e0\u4e3a\u8be2\u95ee\u7684\u662f\u8fde\u7eed\u7684$1$\uff0c\u5728\u8fdb\u884c\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u4ee5\u4e0b\u60c5\u51b5\n\n1. \u5de6\u533a\u95f4\u7684\u503c\n\n2. \u53f3\u533a\u95f4\u7684\u503c\n\n3. \u5de6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u53ef\u4ee5\u548c\u53f3\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u63a5\u4e0a\n\n\u8fd9\u6837\uff0c\u8fd8\u9700\u8981\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u4ece\u5de6/\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed$1$\u4e2a\u6570\n\n\u800c\u5408\u5e76\u8fd9\u4e24\u4e2a\u4e1c\u897f\u4e5f\u6709\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u4ee5\u4ece\u5de6\u5f00\u59cb\u4e3a\u4f8b\uff0c\n\n1. \u5de6\u533a\u95f4\u7684\u503c\n\n2. \u5de6\u533a\u95f4\u6ee1\uff0c\u5408\u5e76\u540e\u4e3a\u5de6\u533a\u95f4\u7684\u503c$+$\u53f3\u533a\u95f4\u4ece\u5de6\u5f00\u59cb\u7684\u8fde\u7eed$1$\u4e2a\u6570\n\n\u800c\u56e0\u4e3a\u533a\u95f4\u53d6\u53cd\u7684\u5b58\u5728\uff0c\u540c\u6837\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u8fd9\u6837\u7684\u8fde\u7eed$0$\u4e2a\u6570\n\n```cpp\ninline node operator + (const node& x){\n    node res;\n    res.c=c+x.c;\n    res.l[0]=l[0];\n    res.l[1]=l[1];\n    if(s[0]==0)\n        res.l[1]+=x.l[1];\n    if(s[1]==0)\n        res.l[0]+=x.l[0];\n    res.r[0]=x.r[0];\n    res.r[1]=x.r[1];\n    if(x.s[0]==0)\n        res.r[1]+=r[1];\n    if(x.s[1]==0)\n        res.r[0]+=r[0];\n    res.s[0]=max(r[0]+x.l[0],max(s[0],x.s[0]));\n    res.s[1]=max(r[1]+x.l[1],max(s[1],x.s[1]));\n    return res;\n}\n```\n\n\u4e0b\u9762\u662f$pushdown$\u51fd\u6570\u7684\u5199\u6cd5\n\n\u9996\u5148\u8003\u8651\u4e24\u4e2a\u6807\u8bb0\u7684\u4f18\u5148\u7ea7\u95ee\u9898\uff1a\u5728\u533a\u95f4\u8986\u76d6\u540e\uff0c\u533a\u95f4\u53d6\u53cd\u4f1a\u5931\u6548\uff0c\u6240\u4ee5\u4f18\u5148\u5904\u7406\u533a\u95f4\u8986\u76d6\uff1b\u5e76\u5728\u5904\u7406\u533a\u95f4\u8986\u76d6\u6807\u8bb0\u540e\uff0c\u5c06\u533a\u95f4\u53d6\u53cd\u6807\u8bb0\u7f6e$0$\n\n\u533a\u95f4\u53d6\u53cd\u8981\u4ea4\u6362\u7ef4\u62a4\u7684$0/1$\u7684\u503c\uff0c\u5e76\u5c06\u533a\u95f4$1$\u4e2a\u6570\u66f4\u65b0\u4e3a\u533a\u95f4\u957f\u5ea6$-$\u533a\u95f4$1$\u4e2a\u6570\n\n```cpp\ninline void pushDown(int rt,int len){\n    if(T[rt].v!=-1){\n        T[ls].s[0]=T[ls].l[0]=T[ls].r[0]=(T[rt].v^1)*(len-(len>>1));\n        T[ls].c=T[ls].s[1]=T[ls].l[1]=T[ls].r[1]=T[rt].v*(len-(len>>1));\n        T[rs].s[0]=T[rs].l[0]=T[rs].r[0]=(T[rt].v^1)*(len>>1);\n        T[rs].c=T[rs].s[1]=T[rs].l[1]=T[rs].r[1]=T[rt].v*(len>>1);\n        T[ls].v=T[rs].v=T[rt].v;\n        T[ls].f=T[rs].f=0;\n        T[rt].v=-1;\n    }\n    if(T[rt].f){\n        T[ls].c=(len-(len>>1))-T[ls].c;\n        T[rs].c=(len>>1)-T[rs].c;\n        swap(T[ls].s[0],T[ls].s[1]);\n        swap(T[ls].l[0],T[ls].l[1]);\n        swap(T[ls].r[0],T[ls].r[1]);\n        swap(T[rs].s[0],T[rs].s[1]);\n        swap(T[rs].l[0],T[rs].l[1]);\n        swap(T[rs].r[0],T[rs].r[1]);\n        T[ls].f^=1;\n        T[rs].f^=1;\n        T[rt].f=0;\n    }\n}\n```\n\n\u81f3\u6b64\uff0c\u672c\u9898\u590d\u6742\u7684\u64cd\u4f5c\u5b8c\u6210\uff0c\u5269\u4f59\u90e8\u5206\u4e0e\u4e00\u822c\u7ebf\u6bb5\u6811\u65e0\u5f02\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define ls rt<<1\n#define rs rt<<1|1\nconst int N=100000+10;\nint n,m,op,a,b;\nbool p[N];\nstruct node{\n    int c,s[2],l[2],r[2];\n    int v;\n    bool f;\n    inline node():c(0),s{0,0},l{0,0},r{0,0},v(-1),f(0){}\n    inline node operator + (const node& x){\n        node res;\n        res.c=c+x.c;\n        res.l[0]=l[0];\n        res.l[1]=l[1];\n        if(s[0]==0)\n            res.l[1]+=x.l[1];\n        if(s[1]==0)\n            res.l[0]+=x.l[0];\n        res.r[0]=x.r[0];\n        res.r[1]=x.r[1];\n        if(x.s[0]==0)\n            res.r[1]+=r[1];\n        if(x.s[1]==0)\n            res.r[0]+=r[0];\n        res.s[0]=max(r[0]+x.l[0],max(s[0],x.s[0]));\n        res.s[1]=max(r[1]+x.l[1],max(s[1],x.s[1]));\n        return res;\n    }\n} T[N<<2];\ninline void pushUp(int rt){\n    T[rt]=T[ls]+T[rs];\n}\ninline void pushDown(int rt,int len){\n    if(T[rt].v!=-1){\n        T[ls].s[0]=T[ls].l[0]=T[ls].r[0]=(T[rt].v^1)*(len-(len>>1));\n        T[ls].c=T[ls].s[1]=T[ls].l[1]=T[ls].r[1]=T[rt].v*(len-(len>>1));\n        T[rs].s[0]=T[rs].l[0]=T[rs].r[0]=(T[rt].v^1)*(len>>1);\n        T[rs].c=T[rs].s[1]=T[rs].l[1]=T[rs].r[1]=T[rt].v*(len>>1);\n        T[ls].v=T[rs].v=T[rt].v;\n        T[ls].f=T[rs].f=0;\n        T[rt].v=-1;\n    }\n    if(T[rt].f){\n        T[ls].c=(len-(len>>1))-T[ls].c;\n        T[rs].c=(len>>1)-T[rs].c;\n        swap(T[ls].s[0],T[ls].s[1]);\n        swap(T[ls].l[0],T[ls].l[1]);\n        swap(T[ls].r[0],T[ls].r[1]);\n        swap(T[rs].s[0],T[rs].s[1]);\n        swap(T[rs].l[0],T[rs].l[1]);\n        swap(T[rs].r[0],T[rs].r[1]);\n        T[ls].f^=1;\n        T[rs].f^=1;\n        T[rt].f=0;\n    }\n}\nvoid build(int rt,int l,int r){\n    if(l==r){\n        T[rt].c=T[rt].s[1]=T[rt].l[1]=T[rt].r[1]=p[l];\n        T[rt].s[0]=T[rt].l[0]=T[rt].r[0]=p[l]^1;\n        return ;\n    }\n    int mid=l+r>>1;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    pushUp(rt);\n}\nvoid update(int rt,int l,int r,int L,int R,int k){\n    if(l>=L && r<=R){\n        if(k==-1){\n            T[rt].f^=1;\n            T[rt].c=(r-l+1)-T[rt].c;\n            swap(T[rt].s[0],T[rt].s[1]);\n            swap(T[rt].l[0],T[rt].l[1]);\n            swap(T[rt].r[0],T[rt].r[1]);\n        }\n        else{\n            T[rt].s[0]=T[rt].l[0]=T[rt].r[0]=(k^1)*(r-l+1);\n            T[rt].c=T[rt].s[1]=T[rt].l[1]=T[rt].r[1]=k*(r-l+1);\n            T[rt].v=k;\n            T[rt].f=0;\n        }\n        return ;\n    }\n    pushDown(rt,r-l+1);\n    int mid=l+r>>1;\n    if(L<=mid)\n        update(ls,l,mid,L,R,k);\n    if(R>mid)\n        update(rs,mid+1,r,L,R,k);\n    pushUp(rt);\n}\nnode query(int rt,int l,int r,int L,int R){\n    if(l>=L && r<=R){\n        return T[rt];\n    }\n    pushDown(rt,r-l+1);\n    node res;\n    int mid=l+r>>1;\n    if(L<=mid)\n        res=res+query(ls,l,mid,L,R);\n    if(R>mid)\n        res=res+query(rs,mid+1,r,L,R);\n    pushUp(rt);\n    return res;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&p[i]);\n    build(1,1,n);\n    for(;m--;){\n        scanf(\"%d%d%d\",&op,&a,&b);\n        a++,b++;\n        switch(op){\n            case 0:update(1,1,n,a,b,0);break;\n            case 1:update(1,1,n,a,b,1);break;\n            case 2:update(1,1,n,a,b,-1);break;\n            case 3:printf(\"%d\\n\",query(1,1,n,a,b).c);break;\n            case 4:printf(\"%d\\n\",query(1,1,n,a,b).s[1]);break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1570973157,
        "uid": 63708,
        "name": "Pelom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u597d\u9898  \n\n\u5f53\u6211\u4eec\u628a\u672c\u6765\u7b80\u5355\u7684\u51e0\u79cd\u64cd\u4f5c\u5408\u5e76\u5728\u4e00\u8d77\u65f6\uff0c\u9700\u8981\u8003\u8651\u7684\u5c31\u9ebb\u70e6\u4e86\u5f88\u591a  \n\u4f46\u662f\u672c\u9898\u7ec8\u7a76\u53ea\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u5e94\u7528\uff0c\u8003\u5bdf\u7684\u53ea\u6709\u7801\u529b   \nAC\u672c\u9898\uff0c\u4f60\u9700\u8981\u524d\u7f6e\u77e5\u8bc6\u70b9\u4e4b   \n\u2014\u2014[\u533a\u95f4\u8fde\u7eed1\u4e2a\u6570](https://www.luogu.org/problem/P2894)  \n\u2014\u2014\u533a\u95f4\u7ffb\u8f6c\uff08\u81ea\u5df1\u60f3\u60f3\u600e\u4e48\u5b9e\u73b0\uff09  \n\n\u5f53\u533a\u95f4\u7ffb\u8f6c\u8fc7\u540e\uff0c\u6211\u4eec\u7ef4\u62a4\u7684\u6709\u5173\u533a\u95f4\u8fde\u7eed1\u4e2a\u6570\u7684\u4fe1\u606f\u4fbf\u5168\u90e8\u5931\u6548\u4e86  \n\u6709\u6ca1\u6709\u4ec0\u4e48\u65b9\u4fbf\u7684\u529e\u6cd5\u89e3\u51b3\u8fd9\u4e00\u70b9\u5462\uff1f  \n\u770b\u90a31e5\u7684\u6570\u636e\u89c4\u6a21\u548c\u853c\u53ef\u4eb2\uff0c\u591a\u4e2a\u5e38\u6570\u4e5f\u4e0d\u4f1aT  \n\u90a3\u5c31\u518d\u7ef4\u62a4\u533a\u95f4\u8fde\u7eed0\u7684\u4e2a\u6570\u5427\uff01  \n\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd~~\u66b4\u529b~~\u7684\u65b9\u5f0f\u65b9\u4fbf\u7684\u5b9e\u73b0\u4e86\u533a\u95f4\u7ffb\u8f6c\u4e0e\u8fde\u7eed1\u4e4b\u95f4\u7684\u51b2\u7a81  \n\u63a5\u4e0b\u6765\u5c31\u662f\u4ee3\u7801\u65f6\u95f4\u4e86  \n\u987a\u4fbf\u6ce8\u610f\u5904\u7406\u597d\u7ffb\u8f6c\u4e0e\u5168\u90e8\u8d4b\u503c\u4e4b\u95f4\u7684\u6807\u8bb0\u51b2\u7a81  \n```cpp\n#include<bits/stdc++.h>\n#define lc (p<<1)\n#define rc (p<<1|1)\n#define frog 19260817//\u4fe1\u4ef0\u4e4b\u529b\uff01 \nusing namespace std;\nstruct Node{\n\tint l,r,v,lazy_turn,lazy_all;\n\tint sum  ,lsum  ,rsum;\n\tint sum_0,lsum_0,rsum_0;\n\t//v:\u533a\u95f4\u4e2a\u6570\u548c \n\t//sum  :\u8fde\u7eed1\u4e2a\u6570\u548c lsum  :\u5de6\u533a\u95f4\u5f00\u59cb\u7684\u8fde\u7eed1\u4e2a\u6570\u548c rsum  :\u53f3\u533a\u95f4\u5f00\u59cb\u7684\u8fde\u7eed1\u4e2a\u6570\u548c\n\t//sum_0:\u8fde\u7eed0\u4e2a\u6570\u548c lsum_0:\u5de6\u533a\u95f4\u5f00\u59cb\u7684\u8fde\u7eed0\u4e2a\u6570\u548c rsum_0:\u53f3\u533a\u95f4\u5f00\u59cb\u7684\u8fde\u7eed0\u4e2a\u6570\u548c\n\t//lazy_turn:\u533a\u95f4\u662f\u5426\u7ffb\u8f6c lazy_all:\u533a\u95f4\u662f\u5426\u5168\u90e8\u66f4\u65b0 \n\t//\u7ef4\u62a4\u533a\u95f40\u7684\u4e2a\u6570\u662f\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u66f4\u65b0\u533a\u95f41\u7684\u4e2a\u6570 \n}T[800010];\nint a[200010];\nvoid pushup(int p){\n\tT[p].v=T[lc].v+T[rc].v; \n\t\n\tT[p].lsum=T[lc].lsum;//\u7528\u5de6\u533a\u95f4\u5de6\u7aef\u7684\u8fde\u7eed1\u4e2a\u6570\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u5de6\u7aef\u8fde\u7eed1\u4e2a\u6570 \n\tif(T[lc].lsum==T[lc].r-T[lc].l+1)T[p].lsum+=T[rc].lsum;\n\t//\u5982\u679c\u5de6\u533a\u95f4\u8fde\u7eed1\u4e2a\u6570\u7b49\u4e8e\u5176\u957f\u5ea6,\u5373\u5de6\u533a\u95f4\u5168\u4e3a1,\u52a0\u4e0a\u53f3\u533a\u95f4\u5de6\u7aef\u8fde\u7eed1\u4e2a\u6570 \n\tT[p].rsum=T[rc].rsum;//\u540c\u4e0a \n\tif(T[rc].rsum==T[rc].r-T[rc].l+1)T[p].rsum+=T[lc].rsum;\n\tT[p].sum=max(T[lc].rsum+T[rc].lsum,max(T[lc].sum,T[rc].sum));//\u7528\u5de6\u53f3\u533a\u95f4\u7684\u8fde\u7eed1\u4e2a\u6570\u548c\u4e2d\u95f4\u5408\u5e76\u7684\u8fde\u7eed1\u4e2a\u6570\u66f4\u65b0\u5f53\u524d\u533a\u95f4 \n\t\n\tT[p].lsum_0=T[lc].lsum_0;//\u540c\u4e0a \n\tif(T[lc].lsum_0==T[lc].r-T[lc].l+1)T[p].lsum_0+=T[rc].lsum_0;\n\tT[p].rsum_0=T[rc].rsum_0;\n\tif(T[rc].rsum_0==T[rc].r-T[rc].l+1)T[p].rsum_0+=T[lc].rsum_0;\n\tT[p].sum_0=max(T[lc].rsum_0+T[rc].lsum_0,max(T[lc].sum_0,T[rc].sum_0));\n}\nvoid build(int p,int l,int r){\n\tT[p].l=l;T[p].r=r;\n\tT[p].lazy_all=-1;\n\tif(l==r){\n\t\tT[p].v=T[p].sum=T[p].lsum=T[p].rsum=a[l];\n\t\tT[p].sum_0=T[p].lsum_0=T[p].rsum_0=a[l]^1;\n\t\t//\u521d\u59cb\u5316\u6b64\u533a\u95f4\u7684\u503c(1\u62160 ^1==\u53d6\u53cd) \n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(p);\n}\nvoid pushnow_turn(int p){\n\tT[p].v=(T[p].r-T[p].l+1)-T[p].v;//\u7b49\u4e8e\u533a\u95f4\u5185\u603b\u4e2a\u6570\u51cf\u53bb\u7ffb\u8f6c\u540e0\u7684\u4e2a\u6570(\u5373\u4ee5\u524d1\u7684\u4e2a\u6570) \n\tswap(T[p].sum,T[p].sum_0);//\u7ffb\u8f6c1,0\u4e2a\u6570 \n\tswap(T[p].lsum,T[p].lsum_0);\n\tswap(T[p].rsum,T[p].rsum_0);\n\tif(T[p].lazy_all!=-1)\n\t\tT[p].lazy_all^=1;//\u8fdb\u884c\u8fc7\u533a\u95f4\u5168\u90e8\u8d4b\u503c,\u90a3\u4e48\u5c31\u76f4\u63a5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539 \n\telse T[p].lazy_turn^=1;//\u5426\u5219\u6807\u8bb0\u5c06\u6b64\u533a\u95f4\u7ffb\u8f6c \n} \nvoid pushnow_all(int p,int v){\n\tT[p].lazy_turn=0;T[p].lazy_all=v;//\u663e\u7136\u5f53\u5168\u90e8\u8d4b\u503c\u4ee5\u540e,\u533a\u95f4\u662f\u5426\u7ffb\u8f6c\u5df2\u65e0\u610f\u4e49 \n\tif(v==1){//\u533a\u95f4\u5168\u90e8\u4e3a1 \n\t\tT[p].sum=T[p].lsum=T[p].rsum=T[p].v=T[p].r-T[p].l+1;\n\t\tT[p].sum_0=T[p].lsum_0=T[p].rsum_0=0;\n\t}\n\telse{//\u533a\u95f4\u5168\u90e8\u4e3a0 \n\t\tT[p].sum=T[p].lsum=T[p].rsum=T[p].v=0;\n\t\tT[p].sum_0=T[p].lsum_0=T[p].rsum_0=T[p].r-T[p].l+1;\n\t}\n}\nvoid pushdown(int p){\n\tif(T[p].lazy_all!=-1){//\u88ab\u5168\u90e8\u4fee\u6539\u8fc7 \n\t\tpushnow_all(lc,T[p].lazy_all);\n\t\tpushnow_all(rc,T[p].lazy_all);\n\t\tT[p].lazy_all=-1;\n\t}\n\tif(T[p].lazy_turn){//\u88ab\u5168\u90e8\u7ffb\u8f6c\u8fc7 \n\t\tpushnow_turn(lc);\n\t\tpushnow_turn(rc);\n\t\tT[p].lazy_turn=0;\n\t}\n} \nvoid update_turn(int p,int ql,int qr){\n\tif(ql<=T[p].l&&T[p].r<=qr){\n\t\tpushnow_turn(p);\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid)update_turn(lc,ql,qr);\n\tif(qr>mid)update_turn(rc,ql,qr);\n\tpushup(p);\n}\nvoid update_all(int p,int ql,int qr,int v){\n\tif(ql<=T[p].l&&T[p].r<=qr){\n\t\tpushnow_all(p,v);\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid)update_all(lc,ql,qr,v);\n\tif(qr>mid)update_all(rc,ql,qr,v);\n\tpushup(p);\n}\nint query_all(int p,int ql,int qr){\n\tif(ql<=T[p].l&&T[p].r<=qr)\n\t\treturn T[p].v;\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1,ans=0;\n\tif(ql<=mid)ans+=query_all(lc,ql,qr);\n\tif(qr>mid)ans+=query_all(rc,ql,qr);\n\treturn ans;\n}\nNode query_continue(int p,int ql,int qr){\n\tif(ql<=T[p].l&&T[p].r<=qr)\n\t\treturn T[p];\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid&&mid<qr){//\u6b64\u533a\u95f4\u5168\u90e8\u5728\u67e5\u8be2\u8303\u56f4\u5185  \n\t\tNode lans,rans,ans;\n\t\tlans=query_continue(lc,ql,qr);\n\t\trans=query_continue(rc,ql,qr);\n\t\t//\u540cpushup \n\t\tans.lsum=lans.lsum;\n\t\tif(lans.lsum==T[lc].r-T[lc].l+1)ans.lsum+=rans.lsum;\n\t\tans.rsum=rans.rsum;\n\t\tif(rans.rsum==T[rc].r-T[rc].l+1)ans.rsum+=lans.rsum;\n\t\tans.sum=max(lans.rsum+rans.lsum,max(lans.sum,rans.sum));\n\t\treturn ans;\n\t}\n\tif(ql<=mid)return query_continue(lc,ql,qr);\n\tif(qr>mid)return query_continue(rc,ql,qr);\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&a[i]);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;++i){\n\t\tint t,x,y;\n\t\tscanf(\"%d%d%d\",&t,&x,&y);\n\t\t++x;++y;//\u672c\u9898\u5751\u70b9\u4e4b\u4e00,\u5904\u7406\u6210\u4ece1\u5f00\u59cb\u7684\u4e0b\u6807 \n\t\tif(t==0||t==1)update_all(1,x,y,t);\n\t\tif(t==2)update_turn(1,x,y);\n\t\tif(t==3)printf(\"%d\\n\",query_all(1,x,y));\n\t\tif(t==4)printf(\"%d\\n\",query_continue(1,x,y).sum);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565592623,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\u2014\u5927\u6742\u70e9\u7ef4\u62a4\u96c6\u5408"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u6bd2\u7624\u7ebf\u6bb5\u6811......\n\n\u524d\u4e09\u4e2a\u64cd\u4f5c\u5176\u5b9e\u86ee\u597d\u641e\u7684\uff08\u53ea\u8981\u4e4b\u524d\u505a\u8fc7\u6b64\u7c7b\u7684\u7624\u5b50\u9898\uff09\uff0c\u8111\u8865\u4e00\u4e2a\u4f18\u5148\u7ea7\u51fa\u6765\uff08\u5f53\u7136\u8fd9\u91cc\u663e\u7136\u662f\u5e73\u63a8\u6bd4\u7ffb\u8f6c\u4f18\u5148\uff0c\u56e0\u4e3a\u5e73\u63a8\u4e0b\u53bb\u7ffb\u8f6c\u5c31\u6ca1\u4e86\uff09\uff0c\u7136\u540e\u6839\u636e\u4f18\u5148\u7ea7\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u800c\u540e\u4e24\u4e2a\u64cd\u4f5c......\u7b2c\u4e00\u4e2azz\uff0c\u7b2c\u4e8c\u4e2a\u6709\u70b9\u70e6\uff0c\u4e3b\u8981\u662f\u8981\u6ce8\u610f\u7531\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u800c\u6765\u7684\u90a3\u4e2a1\u4e32\u5fc5\u987b\u5f97\u6bd4\u67e5\u8be2\u957f\u5ea6\u77ed\uff0c\u5426\u5219\u53ea\u670910pts\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e2a\u7ebf\u6bb5\u6811\uff0c\u6211\u53cd\u6b63\u662f\u7528\u5806\u5199\u7684\uff0c\u7ed3\u6784\u4f53\u53c8\u81ed\u53c8\u957f\uff0c\u849f\u84bb\u8868\u793a\u770b\u4e0d\u61c2\u3002\n\n......\u4ee3\u7801\u91cc\u6709\u6ce8\u91ca\u53ef\u4ee5\u770b\u4e00\u770b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100005;\nint N,M,num[maxn];\nint M_1[maxn<<2],LM_1[maxn<<2],RM_1[maxn<<2];\nint M_0[maxn<<1],LM_0[maxn<<2],RM_0[maxn<<2];//0\u4e5f\u8981\u8fdb\u884c\u7edf\u8ba1\u65b9\u4fbf\u7ffb\u8f6c \nint REV[maxn<<2],LAZY[maxn<<2],CNT[maxn<<2];\nvoid pushdown(int l,int r,int id){\n\tint m=(l+r)>>1;\n\tif(LAZY[id]!=-1){//\u4f18\u5148\u4f20\u5e73\u63a8\u4e0d\u7136\u6d17\u767d \n\t\tLAZY[id<<1]=LAZY[id<<1|1]=LAZY[id];\n\t\tCNT[id<<1]=LAZY[id]*(m-l+1);CNT[id<<1|1]=LAZY[id]*(r-m);\n\t\tM_1[id<<1]=LM_1[id<<1]=RM_1[id<<1]=LAZY[id<<1]*(m-l+1);\n\t\tM_0[id<<1]=LM_0[id<<1]=RM_0[id<<1]=(LAZY[id<<1]^1)*(m-l+1);\n\t\tM_1[id<<1|1]=LM_1[id<<1|1]=RM_1[id<<1|1]=LAZY[id<<1|1]*(r-m);\n\t\tM_0[id<<1|1]=LM_0[id<<1|1]=RM_0[id<<1|1]=(LAZY[id<<1|1]^1)*(r-m);\n\t\tREV[id<<1]=REV[id<<1|1]=0;//\u8986\u76d6\u7ffb\u8f6c\u6807\u8bb0 \n\t\tLAZY[id]=-1;//\u5f80\u4e0b\u4f20\u4e86\u5c31\u6ca1\u4e86 \n\t}\n\tif(REV[id]){//\u7136\u540e\u4f20\u7ffb\u8f6c\uff08\u4ec5\u53ef\u80fd\u662f\u5728\u5e73\u63a8\u64cd\u4f5c\u4e4b\u540e\u8fdb\u884c\u7684\uff0c\u4e0d\u7136\u65e9\u88ab\u5e73\u63a8\u8986\u76d6\u4e86\uff09 \n\t\tREV[id<<1]^=1;REV[id<<1|1]^=1;\n\t\tCNT[id<<1]=m-l+1-CNT[id<<1];\n\t\tswap(M_1[id<<1],M_0[id<<1]);\n\t\tswap(LM_1[id<<1],LM_0[id<<1]);\n\t\tswap(RM_1[id<<1],RM_0[id<<1]);\n\t\tCNT[id<<1|1]=r-m-CNT[id<<1|1];\n\t\tswap(M_1[id<<1|1],M_0[id<<1|1]);\n\t\tswap(LM_1[id<<1|1],LM_0[id<<1|1]);\n\t\tswap(RM_1[id<<1|1],RM_0[id<<1|1]);\n\t\tREV[id]=0;\n\t}\n}\nvoid pushup(int l,int r,int id){//\u66f4\u65b0\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u5199\u90a3\u4e48\u591a\u7279\u5224\u641e\u5565 \n\tint m=(l+r)>>1;\n\tCNT[id]=CNT[id<<1]+CNT[id<<1|1];\n\tM_1[id]=max(max(M_1[id<<1],M_1[id<<1|1]),RM_1[id<<1]+LM_1[id<<1|1]);\n\tM_0[id]=max(max(M_0[id<<1],M_0[id<<1|1]),RM_0[id<<1]+LM_0[id<<1|1]);\n\tLM_1[id]=LM_1[id<<1]+(LM_1[id<<1]==m-l+1)*LM_1[id<<1|1];\n\tLM_0[id]=LM_0[id<<1]+(LM_0[id<<1]==m-l+1)*LM_0[id<<1|1];\n\tRM_1[id]=RM_1[id<<1|1]+(RM_1[id<<1|1]==r-m)*RM_1[id<<1];\n\tRM_0[id]=RM_0[id<<1|1]+(RM_0[id<<1|1]==r-m)*RM_0[id<<1];\n}\nvoid build(int l,int r,int id){//\u57fa\u64cd\u5efa\u6811 \n\tif(l==r){\n\t\tM_1[id]=LM_1[id]=RM_1[id]=(num[l]==1);\n\t\tM_0[id]=LM_0[id]=RM_0[id]=(num[l]==0);\n\t\tCNT[id]=num[l];return;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(l,m,id<<1);\n\tbuild(m+1,r,id<<1|1);\n\tpushup(l,r,id);\n}\nvoid change(int x,int y,int l,int r,int id,int k){//\u57fa\u64cd\u4fee\u6539 \n\tif(x<=l&&r<=y){\n\t\tLM_1[id]=RM_1[id]=M_1[id]=k*(r-l+1);\n\t\tLM_0[id]=RM_0[id]=M_0[id]=(k^1)*(r-l+1);\n\t\tCNT[id]=k*(r-l+1);LAZY[id]=k;REV[id]=0;return;//\u6ce8\u610frev\u88ab\u8986\u76d6\u4e86\uff01 \n\t}\n\tpushdown(l,r,id);\n\tint m=(l+r)>>1;\n\tif(x<=m)change(x,y,l,m,id<<1,k);\n\tif(y>m)change(x,y,m+1,r,id<<1|1,k);\n\tpushup(l,r,id);\n}\nvoid reverse(int x,int y,int l,int r,int id){//\u57fa\u64cd\u7ffb\u8f6c \n\tif(x<=l&&r<=y){\n\t\tREV[id]^=1;\n\t\tCNT[id]=r-l+1-CNT[id];\n\t\tswap(M_1[id],M_0[id]);\n\t\tswap(LM_1[id],LM_0[id]);\n\t\tswap(RM_1[id],RM_0[id]);\n\t\treturn;\n\t}\n\tpushdown(l,r,id);\n\tint m=(l+r)>>1;\n\tif(x<=m)reverse(x,y,l,m,id<<1);\n\tif(y>m)reverse(x,y,m+1,r,id<<1|1);\n\tpushup(l,r,id);\n}\nint getcnt(int x,int y,int l,int r,int id){//\u57fa\u64cd\u6c42\u548c \n\tif(x<=l&&r<=y)return CNT[id];\n\tpushdown(l,r,id);\n\tint ans=0,m=(l+r)>>1;\n\tif(x<=m)ans+=getcnt(x,y,l,m,id<<1);\n\tif(y>m)ans+=getcnt(x,y,m+1,r,id<<1|1);\n\treturn ans;\n}\nint getmax(int x,int y,int l,int r,int id){//\u6ce8\u610f\u8fd9\u4e2a \n\tif(x<=l&&r<=y)return M_1[id];\n\tint m=(l+r)>>1;\n\tpushdown(l,r,id);\n\tif(x<=m&&y>m){\n\t\tint ans=max(getmax(x,y,l,m,id<<1),getmax(x,y,m+1,r,id<<1|1)),rm,lm;\n\t\trm=min(RM_1[id<<1],m-x+1);//\u8de8\u8fc7\u4e86\u4e2d\u70b9\u5c31\u8fd8\u8981\u8ba8\u8bba\u4e24\u533a\u95f4\u5408\u5e76 \n\t\tlm=min(LM_1[id<<1|1],y-m);//\u4e0d\u8981\u7206\u533a\u95f4\u4e86\u4e0d\u713610pts \n\t\tans=max(ans,lm+rm);\n\t\treturn ans;\n\t}else if(x<=m){\n\t\treturn getmax(x,y,l,m,id<<1);\n\t}else if(y>m)return getmax(x,y,m+1,r,id<<1|1);\n}\nint main(){\n\t//freopen(\"in.txt\",\"r\",stdin);\n\tmemset(LAZY,-1,sizeof(LAZY));\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=1;i<=N;i++)scanf(\"%d\",&num[i]);\n\tbuild(1,N,1);\n\tfor(int i=1,opt,l,r;i<=M;i++){\n\t\tscanf(\"%d%d%d\",&opt,&l,&r);l++,r++;\n\t\tif(opt==0){\n\t\t\tchange(l,r,1,N,1,0);\n\t\t}else if(opt==1){\n\t\t\tchange(l,r,1,N,1,1);\n\t\t}else if(opt==2){\n\t\t\treverse(l,r,1,N,1);\n\t\t}else if(opt==3){\n\t\t\tprintf(\"%d\\n\",getcnt(l,r,1,N,1));\n\t\t}else if(opt==4){\n\t\t\tprintf(\"%d\\n\",getmax(l,r,1,N,1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u597d\u50cf\u6211\u4ee3\u7801\u8fd8\u662f\u957f\u4e86......\u5b66ODT\u53bb\u4e86......",
        "postTime": 1556854146,
        "uid": 109396,
        "name": "Uniecho1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "##\u8fd9\u9053\u9898\u592a\u5751\u4e86\uff0c\u6211\u505a\u4e86\u52a0\u8d77\u6765\u4e00\u5929\u624dAC\uff0c\u627e\u9519\u627e\u8fc7\u6765\u627e\u8fc7\u53bb\uff0c\u53d1\u73b0\u662fpushup()\u9519\u4e86\uff08\u6cea\u5954\uff0c\u6700\u5f00\u59cb\u6211\u4fe1\u8a93\u65e6\u65e6\u7684\u8bf4pushup()\u6ca1\u9519\uff0c\u7ed3\u679c\u5c31pushup()\u6700\u591a\uff09\n\n\u8fd9\u9053\u9898\u96be\u5ea6\u4e2d\u89c4\u4e2d\u77e9\uff0c\u5c31\u662f\u7ec6\u8282\u5904\u7406\u975e\u5e38\u591a\uff0c\u9519\u4e00\u70b9\u5c31\u8981\u627e\u5f88\u4e45\u3002\n\n#\u600e\u4e48\u505a\uff1f\n\n\u9996\u5148\u770b\u9898\uff0c\u67092\u79cd\u4fee\u6539\uff083\u4e2a\uff09\uff0c2\u4e2a\u8be2\u95ee\uff0c\u6700\u5f00\u59cb\u6211\u5f00\u4e86\u4e24\u4e2alazy\u6807\u8bb0\uff0c\u4f46\u5176\u5b9e\u4e0d\u7528\uff0c\u90a3\u6837\u53cd\u800c\u66f4\u9ebb\u70e6\u3002\u5f00\u4e00\u4e2alazy\u6807\u8bb0\u5c31\u591f\u4e86\u3002\n\n\u6bcf\u6b21\u4fee\u6539\uff0c\u5c31\u5206\u7c7b\u8ba8\u8bba:\u5f53opt==0||opt==1\u65f6\u76f4\u63a5\u4fee\u6539\uff0c\u4e0b\u4f20\u6807\u8bb0\uff1b\u5f53opt==2\u65f6\uff0c\u5c31\u8981\u5206\u62103\u5927\u7c7b\uff0c\u5f53\u524d\u533a\u95f4sign=-1\uff0csign=2\uff0csign=1||sign=0\uff0c\u8fd9\u91cc\u8f83\u9ebb\u70e6\uff0c\u53ef\u76f4\u63a5\u770b\u6211\u4ee3\u7801\uff1b\ndowndate()\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff1b\n\n\u7136\u540e\u4e00\u5b9a\u8981\u6ce8\u610fpushup()\uff0c\u8fd9\u4e2a\u51fd\u6570\u5176\u5b9e\u5f88\u77ed\uff0c\u4f46\u5f88\u91cd\u8981\uff0c\u5904\u7406\u4e00\u5b9a\u8981\u6070\u5f53\u3002\n\n#\u67e5\u8be2\u8fde\u7eed\u76841\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u4e2a\u505a\u6cd5\u6bd4\u8f83\u5de7\u5999\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2apre\uff0c\u8bb0\u5f55\u5de6\u533a\u95f4\u7684maxr\uff0c\u5411\u4e0a\u66f4\u65b0\uff0c\u7136\u540e\u67e5\u627e\u53f3\u533a\u95f4\u7684maxl\uff0c\u7136\u540e\u4e0emaxx\u6bd4\u8f83\uff08\u56e0\u4e3a\u67e5\u8be2\u7684\u533a\u95f4\u53ef\u80fd\u4e0d\u80fd\u88ab\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e2d\u7684\u533a\u95f4\u5305\u542b\u5b8c\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u88ab\u5206\u4e3a\u4e24\u6bb5\u67e5\u8be2\uff09\u3002\n\n\u4e0a\u4ee3\u7801\uff08\u5927\u5bb6\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u770b\u4e86\u4ee3\u7801\u5e94\u8be5\u5c31\u61c2\u4e86\uff0c\u4ee3\u7801\u5f88\u5bb9\u6613\u61c2\uff0c\u8010\u5fc3\u9605\u8bfb^\\_^):\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ls id<<1\n#define rs id<<1|1\nusing namespace std;\nconst int N=100000+10;\nint n,m,a[N],ans=0,pre;\nstruct node\n{\n    int left,right,sign,sum,maxx,maxl,maxr,maxl0,maxr0,maxx0;\n}tree[N*4];\nvoid pushup(int id)//\u53ef\u6076\u7684\u51fd\u6570\n{\n    tree[id].sum=tree[ls].sum+tree[rs].sum;\n    tree[id].maxl=tree[ls].maxl;tree[id].maxl0=tree[ls].maxl0;\n    if(tree[id].maxl==tree[ls].right-tree[ls].left+1)tree[id].maxl+=tree[rs].maxl;\n    if(tree[id].maxl0==tree[ls].right-tree[ls].left+1)tree[id].maxl0+=tree[rs].maxl0;\n    tree[id].maxr=tree[rs].maxr;tree[id].maxr0=tree[rs].maxr0;\n    if(tree[id].maxr==tree[rs].right-tree[rs].left+1)tree[id].maxr+=tree[ls].maxr;\n    if(tree[id].maxr0==tree[rs].right-tree[rs].left+1)tree[id].maxr0+=tree[ls].maxr0;\n    tree[id].maxx=max(tree[ls].maxx,max(tree[rs].maxx,tree[ls].maxr+tree[rs].maxl));\n    tree[id].maxx0=max(tree[ls].maxx0,max(tree[rs].maxx0,tree[ls].maxr0+tree[rs].maxl0));\n}\nvoid built(int id,int l,int r)\n{\n    tree[id].left=l,tree[id].right=r,tree[id].sign=-1;\n    if(l==r)\n    {\n        tree[id].maxl=tree[id].maxr=tree[id].maxx=tree[id].sum=a[l];\n        tree[id].maxl0=tree[id].maxr0=tree[id].maxx0=(a[l]^1);\n        return;\n    }\n    int mid=(l+r)>>1;\n    built(ls,l,mid),built(rs,mid+1,r);pushup(id);\n}\nvoid change(int id)\n{\n    swap(tree[id].maxl,tree[id].maxl0);swap(tree[id].maxr,tree[id].maxr0);swap(tree[id].maxx,tree[id].maxx0);\n    tree[id].sum=tree[id].right-tree[id].left+1-tree[id].sum;\n}\nvoid downdate(int id)\n{\n    if(tree[id].sign<=1&&tree[id].sign>=0)\n    {\n        int tmp;\n        tmp=(tree[ls].right-tree[ls].left+1);\n        tree[ls].sign=tree[id].sign;\n        tree[ls].maxl=tree[ls].maxr=tree[ls].maxx=tree[ls].sum=tmp*tree[id].sign;\n        tree[ls].maxl0=tree[ls].maxr0=tree[ls].maxx0=tmp*(tree[id].sign^1);\n        tmp=(tree[rs].right-tree[rs].left+1);\n        tree[rs].sign=tree[id].sign;\n        tree[rs].maxl=tree[rs].maxr=tree[rs].maxx=tree[rs].sum=tmp*tree[id].sign;\n        tree[rs].maxl0=tree[rs].maxr0=tree[rs].maxx0=tmp*(tree[id].sign^1);\n    }\n    else if(tree[id].sign==2)\n    {\n        if(tree[ls].sign<=1&&tree[ls].sign>=0)\n        {\n            int tmp=(tree[ls].right-tree[ls].left+1);\n            tree[ls].maxl=tree[ls].maxr=tree[ls].maxx=tree[ls].sum=tmp*(tree[ls].sign^1);\n            tree[ls].maxl0=tree[ls].maxr0=tree[ls].maxx0=tmp*tree[ls].sign;\n            tree[ls].sign^=1;\n        }\n        else if(tree[ls].sign==-1)\n        {\n            change(ls);tree[ls].sign=2;\n        }\n        else if(tree[ls].sign==2)\n        {\n            change(ls);tree[ls].sign=-1;\n        }\n        if(tree[rs].sign<=1&&tree[rs].sign>=0)\n        {\n            int tmp=(tree[rs].right-tree[rs].left+1);\n            tree[rs].maxl=tree[rs].maxr=tree[rs].maxx=tree[rs].sum=tmp*(tree[rs].sign^1);\n            tree[rs].maxl0=tree[rs].maxr0=tree[rs].maxx0=tmp*tree[rs].sign;\n            tree[rs].sign^=1;\n        }\n        else if(tree[rs].sign==-1)\n        {\n            change(rs);tree[rs].sign=2;\n        }\n        else if(tree[rs].sign==2)\n        {\n            change(rs);tree[rs].sign=-1;\n        }\n    }tree[id].sign=-1;\n}\nvoid update(int id,int l,int r,int opt)\n{\n    if(tree[id].left>r||tree[id].right<l)return;\n    if(tree[id].left>=l&&tree[id].right<=r)\n    {\n        if(opt==0||opt==1)\n        {\n            int tmp=(tree[id].right-tree[id].left+1);tree[id].sign=opt;\n            tree[id].maxl=tree[id].maxr=tree[id].maxx=tree[id].sum=tmp*tree[id].sign;\n            tree[id].maxl0=tree[id].maxr0=tree[id].maxx0=tmp*(tree[id].sign^1);\n        }\n        else if(opt==2)\n        {\n            if(tree[id].sign==2)\n            {\n                change(id);tree[id].sign=-1;\n            }\n            else if(tree[id].sign<=1&&tree[id].sign>=0)\n            {\n                int tmp=(tree[id].right-tree[id].left+1);tree[id].sign^=1;\n                tree[id].maxl=tree[id].maxr=tree[id].maxx=tree[id].sum=tmp*tree[id].sign;\n                tree[id].maxl0=tree[id].maxr0=tree[id].maxx0=tmp*(tree[id].sign^1);\n            }\n            else if(tree[id].sign==-1)\n            {\n                change(id);tree[id].sign=2;\n            }\n        }\n        return;\n    }\n    if(tree[id].sign>=0)downdate(id);\n    update(ls,l,r,opt);update(rs,l,r,opt);pushup(id);\n}\nint querysum(int id,int l,int r)\n{\n    if(tree[id].left>r||tree[id].right<l)return 0;\n    if(tree[id].left>=l&&tree[id].right<=r)return tree[id].sum;\n    if(tree[id].sign>=0)downdate(id);\n    int tmp=querysum(ls,l,r)+querysum(rs,l,r);\n    return tmp;\n}\nvoid querymaxx(int id,int l,int r)\n{\n    if(tree[id].left>r||tree[id].right<l)return;\n    if(tree[id].left>=l&&tree[id].right<=r)\n    {\n        ans=max(ans,max(tree[id].maxx,pre+tree[id].maxl));\n        if(tree[id].sum==tree[id].right-tree[id].left+1) pre+=tree[id].sum;\n        else pre=tree[id].maxr;//\u5de7\u5999\u5730pre\n        return;\n    }\n    if(tree[id].sign>=0)downdate(id);\n    querymaxx(ls,l,r);querymaxx(rs,l,r);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    built(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,opt;\n        scanf(\"%d%d%d\",&opt,&x,&y);x++,y++;\n        if(opt<=2)update(1,x,y,opt);\n        if(opt==3)printf(\"%d\\n\",querysum(1,x,y));\n        if(opt==4)ans=0,pre=0,querymaxx(1,x,y),printf(\"%d\\n\",ans);\n    }\n}\n```",
        "postTime": 1509266809,
        "uid": 25709,
        "name": "SNiFe",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u5f88\u96be\u5f88\u96be\u7684\u7ebf\u6bb5\u6811\u9898\u76ee\uff0c\u6211\u548c\u540c\u5b66\u4e00\u8d77\u5199\u4e86\u4e24\u4e2a\u665a\u4e0a\u624d\u5199\u51fa\u6765\n\n\u9996\u5148\u6211\u4eec\u8003\u86510\uff0c1\uff0c3\u4e09\u79cd\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4sum\uff0csign\u5373\u53ef\n\n\u67e5\u8be2\u533a\u95f4\u8fde\u7eed\u76841\u70b9\u4e2a\u6570\u65f6\uff0c\u5c31\u53ef\u7ef4\u62a4\u4e00\u4e2asuml/sumr\u8868\u793a\u5f53\u524d\u533a\u95f4\u4ece\u5de6/\u53f3\u8d77\u6709\u591a\u5c11\u8fde\u7eed\u76841\uff0c\u4e00\u4e2amaxx\u8868\u793a\u5f53\u524d\u533a\u95f4\u6700\u5927\u7684\u8fde\u7eed\u4e2a\u6570\n\n\u5bf9\u4e8e\u533a\u95f4\u53d6\u53cd\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4e0e1\u6240\u5bf9\u5e94\u7684\u76840\u7684\u76f8\u5173\u60c5\u51b5\u5373\u53ef\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\uff1asum\uff0csign\uff0csuml0\uff0csumr0\uff0cmaxx0\uff0csuml1\uff0csumr1\uff0cmaxx1    8\u4e2a\u503c\n\n\u662f\u4e0d\u662f\u60f3\u60f3\u90fd\u89c9\u5f97\u590d\u6742\uff1f         \u6ca1\u4e8b\uff0c\u5199\u8d77\u6765\u66f4\u590d\u6742\n\n\u4e4b\u524d\u5199\u7684\u65f6\u5019\u611f\u89c9\u6700\u96be\u7684\u5730\u65b9\u5c31\u662f\u4e0b\u4f20\u6807\u8bb0\uff0c\n\n\u5176\u5b9e\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\n\n\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u5982\u679c\u5f53\u524d\u6807\u8bb0\u662f0,1\uff1b\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u8986\u76d6\n\n\u5982\u679c\u662f2\uff0c\u5c31\u770b\u513f\u5b50\u8282\u70b9\u7684\u6807\u8bb0\uff0c\u6ca1\u6709\u5c31\u7ee7\u627f\uff0c\u5982\u679c\u513f\u5b50\u662f2\uff0c\u5c31\u53ef\u4ee5\u62b5\u6d88\uff0c\u5c06\u513f\u5b50\u6807\u8bb0\u4e3a-1\n\n\u5982\u679c\u513f\u5b50\u662f0\u6216\u80051\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u5c060\u53d81,1\u53d80\uff1b\uff08\u60f3\u60f3\u662f\u4e0d\u662f\u8fd9\u4e2a\u9053\u7406\uff09\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u5b50\uff0c\u6069\uff0csign\u521d\u503c\u4e3a-1\uff01\uff01\n\n\u5176\u4ed6\u7684\u5c31\u81ea\u5df1\u6478\u7d22\u5427\n\n\u89c1\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100000+10;\nstruct nod{\n    int left,right,sum,sign;\n    int suml1,sumr1,maxx1;\n    int suml0,sumr0,maxx0;\n}t[maxn*4];\nint s[maxn];\nint n,m,ans;\nvoid up(int g){\n    t[g].sum=t[g<<1].sum+t[g<<1|1].sum;\n    t[g].suml0=t[g<<1  ].suml0;if(t[g].suml0==(t[g<<1  ].right-t[g<<1].left+1))t[g].suml0+=t[g<<1|1].suml0;\n    t[g].suml1=t[g<<1  ].suml1;if(t[g].suml1==(t[g<<1  ].right-t[g<<1].left+1))t[g].suml1+=t[g<<1|1].suml1;\n    t[g].sumr0=t[g<<1|1].sumr0;if(t[g].sumr0==(t[g<<1|1].right-t[g<<1|1].left+1))t[g].sumr0+=t[g<<1].sumr0;\n    t[g].sumr1=t[g<<1|1].sumr1;if(t[g].sumr1==(t[g<<1|1].right-t[g<<1|1].left+1))t[g].sumr1+=t[g<<1].sumr1;\n    t[g].maxx0=max(t[g<<1].maxx0,t[g<<1|1].maxx0);t[g].maxx0=max(t[g].maxx0,t[g<<1].sumr0+t[g<<1|1].suml0);\n    t[g].maxx1=max(t[g<<1].maxx1,t[g<<1|1].maxx1);t[g].maxx1=max(t[g].maxx1,t[g<<1].sumr1+t[g<<1|1].suml1);\n}\nvoid build(int g,int l,int r){\n    t[g].left=l;t[g].right=r;t[g].sign=-1;\n    if(l==r){\n        t[g].sum=s[l];\n        if(s[l]==1)t[g].suml1=t[g].sumr1=t[g].maxx1=1;\n        if(s[l]==0)t[g].suml0=t[g].sumr0=t[g].maxx0=1;\n        return;\n    }int mid=l+r>>1;\n    build(g<<1,l,mid);build(g<<1|1,mid+1,r);\n    up(g);\n}\nvoid down(int g){\n    if(t[g].sign==2){\n        if(t[g<<1].sign==2)t[g<<1].sign=-1;\n        else if(t[g<<1].sign!=-1)t[g<<1].sign^=1;\n        else t[g<<1].sign=t[g].sign;\n        if(t[g<<1|1].sign==2)t[g<<1|1].sign=-1;\n        else if(t[g<<1|1].sign!=-1)t[g<<1|1].sign^=1;\n        else t[g<<1|1].sign=t[g].sign;\n    }else t[g<<1].sign=t[g].sign,t[g<<1|1].sign=t[g].sign;\n    if(t[g<<1].sign==0){\n        t[g<<1].sum=0;\n        t[g<<1].suml1=t[g<<1].sumr1=t[g<<1].maxx1=0;\n        t[g<<1].suml0=t[g<<1].sumr0=t[g<<1].maxx0=(t[g<<1].right-t[g<<1].left+1);\n    }    \n    if(t[g<<1|1].sign==0){\n        t[g<<1|1].sum=0;\n        t[g<<1|1].suml1=t[g<<1|1].sumr1=t[g<<1|1].maxx1=0;\n        t[g<<1|1].suml0=t[g<<1|1].sumr0=t[g<<1|1].maxx0=(t[g<<1|1].right-t[g<<1|1].left+1);\n    }\n    if(t[g<<1].sign==1){\n        t[g<<1].sum=(t[g<<1].right-t[g<<1].left+1);\n        t[g<<1].suml0=t[g<<1].sumr0=t[g<<1].maxx0=0;\n        t[g<<1].suml1=t[g<<1].sumr1=t[g<<1].maxx1=(t[g<<1].right-t[g<<1].left+1);\n    }\n    if(t[g<<1|1].sign==1){\n        t[g<<1|1].sum=(t[g<<1|1].right-t[g<<1|1].left+1);\n        t[g<<1|1].suml0=t[g<<1|1].sumr0=t[g<<1|1].maxx0=0;\n        t[g<<1|1].suml1=t[g<<1|1].sumr1=t[g<<1|1].maxx1=(t[g<<1|1].right-t[g<<1|1].left+1);\n    }\n    if(t[g<<1].sign==2 || t[g<<1].sign==-1){\n        t[g<<1].sum=(t[g<<1].right-t[g<<1].left+1-t[g<<1].sum);\n        swap(t[g<<1].suml0,t[g<<1].suml1);\n        swap(t[g<<1].sumr0,t[g<<1].sumr1);\n        swap(t[g<<1].maxx0,t[g<<1].maxx1);\n    }    \n    if(t[g<<1|1].sign==2 || t[g<<1|1].sign==-1){\n        t[g<<1|1].sum=(t[g<<1|1].right-t[g<<1|1].left+1-t[g<<1|1].sum);\n        swap(t[g<<1|1].suml0,t[g<<1|1].suml1);\n        swap(t[g<<1|1].sumr0,t[g<<1|1].sumr1);\n        swap(t[g<<1|1].maxx0,t[g<<1|1].maxx1);\n    }t[g].sign=-1;\n}\nvoid change(int g,int l,int r,int opt){\n    if(r<t[g].left || t[g].right<l)return;\n    if(l<=t[g].left&&t[g].right<=r){\n        if(t[g].sign==-1)t[g].sign=opt;\n        else if(opt==2 && t[g].sign==2)t[g].sign=-1;\n        else if(opt==2 && t[g].sign!=2)t[g].sign^=1;\n        else if(opt!=2)t[g].sign=opt;\n        if(opt==0){\n            t[g].sum=0;\n            t[g].suml1=t[g].sumr1=t[g].maxx1=0;\n            t[g].suml0=t[g].sumr0=t[g].maxx0=(t[g].right-t[g].left+1);\n        }\n        if(opt==1){\n            t[g].sum=(t[g].right-t[g].left+1);\n            t[g].suml0=t[g].sumr0=t[g].maxx0=0;\n            t[g].suml1=t[g].sumr1=t[g].maxx1=(t[g].right-t[g].left+1);\n        }\n        if(opt==2){\n            t[g].sum=(t[g].right-t[g].left+1-t[g].sum);\n            swap(t[g].suml1,t[g].suml0);\n            swap(t[g].sumr1,t[g].sumr0);\n            swap(t[g].maxx1,t[g].maxx0);\n        }return;\n    }\n    if(t[g].sign!=-1)down(g);\n    change(g<<1,l,r,opt);change(g<<1|1,l,r,opt);\n    up(g);\n}\nint get1(int g,int l,int r){\n    if(r<t[g].left || t[g].right<l)return 0;\n    if(l<=t[g].left&&t[g].right<=r)return t[g].sum;\n    if(t[g].sign!=-1)down(g);\n    return get1(g<<1,l,r)+get1(g<<1|1,l,r);\n}\nvoid get2(int g,int l,int r){\n    if(r<t[g].left || t[g].right<l)return;\n    if(l<=t[g].left&&t[g].right<=r){\n        ans=max(ans,t[g].maxx1);return;\n    }\n    if(t[g].sign!=-1)down(g);\n    get2(g<<1,l,r);get2(g<<1|1,l,r);\n    ans=max(ans,min(t[g<<1].sumr1,t[g<<1].right-l+1)+min(t[g<<1|1].suml1,r-t[g<<1|1].left+1));\n}\nint main()\n{\n//    freopen(\"a.in\",\"r\",stdin);\n//    freopen(\"my.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&s[i]);\n    }build(1,0,n-1);\n    for(int i=1;i<=m;i++){\n        int l,r,opt;\n        scanf(\"%d%d%d\",&opt,&l,&r);\n        if(opt<=2){\n            change(1,l,r,opt);\n        }\n        else if(opt==3)printf(\"%d\\n\",get1(1,l,r));\n        else if(opt==4){\n            ans=0;get2(1,l,r);printf(\"%d\\n\",ans);\n        }\n    }\n}\n\n```",
        "postTime": 1509109574,
        "uid": 25365,
        "name": "zhouenji",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P2572)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e00\u773c\u7ebf\u6bb5\u6811\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9488\u5bf9\u8be2\u95ee$3$\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u533a\u95f4$1$\u7684\u4e2a\u6570\uff1b\u9488\u5bf9\u8be2\u95ee$4$\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u4e2d\u5de6\u8d77\u7684\u3001\u53f3\u8d77\u7684\u548c\u6700\u957f\u7684\u8fde\u7eed\u7684$1$\u7684\u4e2a\u6570\u3002~~\u8fd9\u4e24\u4e2a\u8be2\u95ee\u5176\u5b9e\u662f\u6bd4\u8f83\u89c4\u89c4\u77e9\u77e9\u7684\u4e86\u3002~~  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5bf9\u4e8e\u64cd\u4f5c$0$\u548c$1$\uff0c\u6253\u61d2\u6807\u8bb0\uff1b\u5bf9\u4e8e\u64cd\u4f5c$2$\uff0c\u4e5f\u6253\u61d2\u6807\u8bb0\uff0c\u4e14\u7531\u4e8e\u5e8f\u5217\u4e0a\u7684$0$\u548c$1$\u4f1a\u4e92\u6362\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06$1$\u7ef4\u62a4\u7684\u4e1c\u897f\uff0c\u518d\u7ed9$0$\u4e5f\u7ef4\u62a4\u4e00\u4efd\uff0c\u8fd9\u6837\u53cd\u8f6c\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u4e92\u6362\u4fe1\u606f\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8be2\u95ee$3$\u7684\u65f6\u5019\u4e5f\u662f\u4e00\u4e2a\u4e2d\u89c4\u4e2d\u77e9\u7684\u64cd\u4f5c\u3002\u8be2\u95ee$4$\u7684\u65f6\u5019\uff0c\u8be2\u95ee\u533a\u95f4\u5e76\u4e0d\u603b\u80fd\u5b8c\u5168\u8986\u76d6\u8282\u70b9\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u518d\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f\uff0c\u8868\u793a\u5f53\u524d\u533a\u95f4\u548c\u8be2\u95ee\u533a\u95f4\u7684\u4ea4\u96c6\u4e2d\uff0c\u5de6\u8d77\u548c\u53f3\u8d77\u7684\u6700\u957f\u7684$1$\u7684\u4e2a\u6570\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5728\u56de\u6eaf\u7684\u65f6\u5019\u66f4\u65b0\u7b54\u6848\u548c\u7ef4\u62a4\u4fe1\u606f\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6700\u540e\u63d0\u4e00\u4e0b$0,1$\u548c$2$\u7684\u6807\u8bb0\u91cd\u53e0\u95ee\u9898\uff0c\u5982\u679c\u5728$2$\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8282\u70b9\u5df2\u7ecf\u88ab\u6574\u4f53\u8d4b\u8fc7\u4e00\u6b21\u503c\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u4e8e\u6574\u4f53\u8d4b\u7684\u503c\u4e5f\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u907f\u514d\u4e0b\u4f20\u7684\u65f6\u5019\u51fa\u9519\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u4efd\u4ee3\u7801\u8dd1\u5f97\u8fd8\u4e0d\u592a\u6162\u3002\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n\nconst int MAXN = 1e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\nvoid swapp( _T &x, _T &y )\n{\n\t_T t = x; x = y, y = t;\n}\n\nstruct segmentTreeNode\n{\n\tint l0, l1, r0, r1, s0, siz, mx0, mx1;\n\tint tag, val;\n\t#define l0( x ) ( segTree[x].l0 )\n\t#define l1( x ) ( segTree[x].l1 )\n\t#define r0( x ) ( segTree[x].r0 )\n\t#define r1( x ) ( segTree[x].r1 )\n\t#define s0( x ) ( segTree[x].s0 )\n\t#define siz( x ) ( segTree[x].siz )\n\t#define mx0( x ) ( segTree[x].mx0 )\n\t#define mx1( x ) ( segTree[x].mx1 )\n\t#define tag( x ) ( segTree[x].tag )\n\t#define val( x ) ( segTree[x].val )\n\t#define isLeaf( x ) ( segTree[x].siz == 1 )\n}segTree[MAXN << 2];\n\nint seq[MAXN];\nint N, M;\n\nvoid upt( const int x )\n{\n\tif( isLeaf( x ) ) return ;\n\ts0( x ) = s0( x << 1 ) + s0( x << 1 | 1 );\n\tl0( x ) = l0( x << 1 ) == siz( x << 1 ) ? ( siz( x << 1 ) + l0( x << 1 | 1 ) ) : l0( x << 1 );\n\tl1( x ) = l1( x << 1 ) == siz( x << 1 ) ? ( siz( x << 1 ) + l1( x << 1 | 1 ) ) : l1( x << 1 );\n\tr0( x ) = r0( x << 1 | 1 ) == siz( x << 1 | 1 ) ? ( siz( x << 1 | 1 ) + r0( x << 1 ) ) : r0( x << 1 | 1 );\n\tr1( x ) = r1( x << 1 | 1 ) == siz( x << 1 | 1 ) ? ( siz( x << 1 | 1 ) + r1( x << 1 ) ) : r1( x << 1 | 1 );\n\tmx0( x ) = MAX( MAX( mx0( x << 1 ), mx0( x << 1 | 1 ) ), r0( x << 1 ) + l0( x << 1 | 1 ) );\n\tmx1( x ) = MAX( MAX( mx1( x << 1 ), mx1( x << 1 | 1 ) ), r1( x << 1 ) + l1( x << 1 | 1 ) );\n}\n\nvoid cover( const int x, const int v )\n{\n\tif( v ) mx0( x ) = s0( x ) = l0( x ) = r0( x ) = 0, mx1( x ) = l1( x ) = r1( x ) = siz( x );\n\telse mx1( x ) = l1( x ) = r1( x ) = 0, s0( x ) = mx0( x ) = l0( x ) = r0( x ) = siz( x );\n\ttag( x ) = -1, val( x ) = v;\n}\n\nvoid reverse( const int x )\n{\n\ts0( x ) = siz( x ) - s0( x );\n\tswapp( l0( x ), l1( x ) ), swapp( r0( x ), r1( x ) ), swapp( mx0( x ), mx1( x ) );\n\tif( tag( x ) < 0 ) val( x ) ^= 1;\n\telse tag( x ) ^= 1;\n}\n\nvoid normalize( const int x )\n{\n\tif( isLeaf( x ) || ! tag( x ) ) return ;\n\tif( tag( x ) < 0 ) cover( x << 1, val( x ) ), cover( x << 1 | 1, val( x ) );\n\telse reverse( x << 1 ), reverse( x << 1 | 1 );\n\ttag( x ) = val( x ) = 0;\n}\n\nvoid build( const int x, const int l, const int r )\n{\n\tint mid = l + r >> 1;\n\tif( l > r ) return; \n\tsiz( x ) = r - l + 1;\n\tif( l == r ) { cover( x, seq[l] ); return ; }\n\tbuild( x << 1, l, mid );\n\tbuild( x << 1 | 1, mid + 1, r );\n\tupt( x );\n}\n\nvoid cover( const int x, const int l, const int r, const int segL, const int segR, const int v )\n{\n\tint mid = l + r >> 1;\n\tif( segL <= l && r <= segR ) { cover( x, v ); return ; }\n\tif( isLeaf( x ) ) return ; normalize( x );\n\tif( segL <= mid ) cover( x << 1, l, mid, segL, segR, v );\n\tif( segR > mid ) cover( x << 1 | 1, mid + 1, r, segL, segR, v );\n\tupt( x );\n}\n\nvoid reverse( const int x, const int l, const int r, const int segL, const int segR )\n{\n\tint mid = l + r >> 1;\n\tif( segL <= l && r <= segR ) { reverse( x ); return ; }\n\tif( isLeaf( x ) ) return ; normalize( x );\n\tif( segL <= mid ) reverse( x << 1, l, mid, segL, segR );\n\tif( segR > mid ) reverse( x << 1 | 1, mid + 1, r, segL, segR );\n\tupt( x );\n}\n\nint query1( const int x, const int l, const int r, const int segL, const int segR )\n{\n\tint mid = l + r >> 1, ret = 0;\n\tif( segL <= l && r <= segR ) return siz( x ) - s0( x );\n\tif( isLeaf( x ) ) return 0; normalize( x );\n\tif( segL <= mid ) ret += query1( x << 1, l, mid, segL, segR );\n\tif( segR > mid ) ret += query1( x << 1 | 1, mid + 1, r, segL, segR );\n\treturn ret;\n}\n\nint query2( const int x, const int l, const int r, const int segL, const int segR, int &lef, int &rig )\n{\n\tint mid = l + r >> 1, ret = 0, ll = 0, lr = 0, rl = 0, rr = 0;\n\tif( segL <= l && r <= segR ) { lef = l1( x ), rig = r1( x ); return mx1( x ); }\n\tif( isLeaf( x ) ) return 0; normalize( x );\n\tif( segL <= mid ) ret = MAX( ret, query2( x << 1, l, mid, segL, segR, ll, lr ) );\n\tif( segR > mid ) ret = MAX( ret, query2( x << 1 | 1, mid + 1, r, segL, segR, rl, rr ) );\n\tret = MAX( ret, lr + rl );\n\tlef = ll == mid - MAX( l, segL ) + 1 ? ( ll + rl ) : ll;\n\trig = rr == MIN( r, segR ) - mid ? ( rr + lr ) : rr;\n\treturn ret;\n}\n\nint main()\n{\n\tint op, L, R, lv, rv;\n\tread( N ), read( M );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( seq[i] );\n\tbuild( 1, 1, N );\n\twhile( M -- )\n\t{\n\t\tread( op ), read( L ), read( R );\n\t\tL ++, R ++;\n\t\tif( op == 0 ) cover( 1, 1, N, L, R, 0 );\n\t\tif( op == 1 ) cover( 1, 1, N, L, R, 1 );\n\t\tif( op == 2 ) reverse( 1, 1, N, L, R );\n\t\tif( op == 3 ) write( query1( 1, 1, N, L, R ) ), putchar( '\\n' );\n\t\tif( op == 4 ) write( query2( 1, 1, N, L, R, lv, rv ) ), putchar( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1579182668,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[SCOI2010]\u5e8f\u5217\u64cd\u4f5c"
    },
    {
        "content": "# Previous\n\n\u5efa\u8bae\u5927\u5bb6\u53ef\u4ee5\u5148\u505a\u4e00\u4e0b[\u8fd9\u4e00\u9898](https://www.luogu.org/problemnew/show/UVA1400)\uff0c\u548c\u672c\u9898\u7684\u601d\u8def\u76f8\u8fd1\uff08\u4f46\u662f\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff09\n\n# Main\n\n## \u57fa\u672c\u601d\u60f3\u53ca\u89e3\u91ca\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u8fd9\u4e48\u6784\u9020\uff1a\n```cpp\nstruct Node\n{\n\tint l,r;\n\tint sum[2];\n\tint _max[2],lmax[2],rmax[2];\n\tbool tag[2],tags;\n    \n\t#define l(x) tree[x].l\n\t#define r(x) tree[x].r\n\t#define len(x) tree[x].r-tree[x].l+1\n\t#define sum(x,y) tree[x].sum[y]\n\t#define _max(x,y) tree[x]._max[y]\n\t#define lmax(x,y) tree[x].lmax[y]\n\t#define rmax(x,y) tree[x].rmax[y]\n\t#define tag(x,y) tree[x].tag[y]\n\t#define tags(x) tree[x].tags\n}tree[262150];\n```\n\n~~\u8bf7\u5ffd\u7565`#define`~~\n\n\u5176\u4e2d\uff0c\n\n- `l,r`\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u6620\u5c04\u5230\u6574\u4e2a\u6570\u7ec4\u4e0a\u7684\u5bf9\u5e94\u533a\u95f4\n- `sum[0,1]`\u8868\u793a\u5bf9\u5e94\u533a\u95f4\u91cc\u6709\u591a\u5c11\u4e2a$0$\u548c$1$\n- `_max[0,1]`\u8868\u793a\u5bf9\u5e94\u533a\u95f4\u91cc**\u201c\u8fde\u7eed\u7684$1$\u201d\u7684\u6700\u5927\u957f\u5ea6**\uff1b\n- `l(r)max[0,1]`\u8868\u793a\u5bf9\u5e94\u533a\u95f4\u91cc**\u524d\uff08\u540e\uff09\u7f001**\u7684\u957f\u5ea6\uff08\u6bd4\u5982\u8bf4\uff0c\u5bf9\u4e8e$1011$\uff0c\u90a3\u4e48$lmax=1, rmax=2$\uff09\uff1b\n- `tag[0,1]`\u8868\u793a\u5bf9\u5e94\u533a\u95f4\u662f\u5426\u88ab**\u4fee\u6539\u4e3a$0$\u6216$1$**\u7684\u6807\u8bb0\n- `tags`\u8868\u793a\u5bf9\u5e94\u533a\u95f4\u662f\u5426\u88ab**\u53cd\u8f6c**\u7684\u6807\u8bb0\n\n\u8fd9\u6837\u540c\u65f6\u7ef4\u62a4$0$\u548c$1$\u7684\u6570\u636e\u7684\u8bdd\uff0c\u5f53\u6211\u4eec\u9047\u5230\u9898\u76ee\u4e2d\u7684\u53cd\u8f6c\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u8981**\u5c06\u5c5e\u4e8e$0$\u548c\u5c5e\u4e8e$1$\u7684\u6570\u636e\u90fd`std::swap`\u4e00\u6b21\uff0c\u7136\u540e\u518d\u6253\u4e0a\u6807\u8bb0**\u5373\u53ef\u3002\n\n\u770b\u8d77\u6765`sum`\u5e76\u4e0d\u96be\u7ef4\u62a4\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a**\u5982\u4f55\u7ef4\u62a4`_max`\uff1f`lmax`\u548c`rmax`\u53c8\u6709\u4ec0\u4e48\u7528\u5462\uff1f**\n\n## \uff08\u7406\u8bba\u4e0a\u7684\uff09\u7ef4\u62a4\n\n- \u5bf9\u4e8e`_max`\u7684\u7ef4\u62a4\uff0c\u53ef\u4ee5\u5206\u6210**\u4e24\u79cd\u60c5\u51b5**\uff1a\n\n\t1. ![](https://s2.ax1x.com/2019/07/01/Z8A4KK.png)\n\n\t\t\u6700\u957f\u7684\u8fde\u7eed$1$\u53ef\u80fd**\u6a2a\u8de8\u4e86\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u534a**\uff0c\u8fd9\u65f6\uff0c$\\_max=rmax(lson)+lmax(rson)$\n\n\t2. ![](https://s2.ax1x.com/2019/07/02/ZG7cOP.png)\n\n\t\t\u6700\u957f\u7684\u8fde\u7eed$1$\u53ef\u80fd**\u5b8c\u5168\u5728\u533a\u95f4\u7684\u5de6\u534a\u90e8\u5206\u6216\u53f3\u534a\u90e8\u5206**\uff0c\u8fd9\u65f6\uff0c$\\_max=\\max\\{ \\_max(lson),\\_max(rson)\\}$\n   \n   **\u7efc\u4e0a\u6240\u8ff0\uff0c$\\_max=\\max\\{ rmax(lson)+lmax(rson),\\_max(lson),\\_max(rson) \\}$**\n\n- \u5bf9\u4e8e`lmax`\u548c`rmax`\uff0c\u4e5f\u53ef\u4ee5\u5206\u6210**\u4e24\u79cd\u60c5\u51b5**\uff08\u8fd9\u91cc\u4ee5`lmax`\u4e3a\u4f8b\uff09\uff1a\n\t\n    1. ![ZGHsNF.png](https://s2.ax1x.com/2019/07/02/ZGHsNF.png)\n    \n    \t\u5982\u679c\u5de6\u534a\u90e8\u5206**\u5b8c\u5168\u662f$1$**\u7684\u8bdd\uff0c\u90a3\u4e48$lmax=len(lson)+lmax(rson)$\n    2. ![ZGbn5F.png](https://s2.ax1x.com/2019/07/02/ZGbn5F.png)\n    \t\n        \u5982\u679c\u5de6\u534a\u90e8\u5206**\u4e0d\u5b8c\u5168\u662f$1$**\u7684\u8bdd\uff0c\u90a3\u4e48$lmax=lmax(lson)$\n        \n  `rmax`\u540c\u7406\u3002\n  \n  \uff08\u6ce8\u610f\uff0c`l(r)max`\u548c`_max`\u4e0d\u4e00\u6837\uff0c**\u4e0d\u9700\u8981\u53d6`std::max()`**\uff09\n  \n- \u641e\u5b8c\u4e86\u5404\u79cd`max`\uff0c\u63a5\u4e0b\u6765\u5c31\u53ea\u5269\u4e0b`tag`\uff08\u5c31\u662f**\u4e0b\u63a8\u6807\u8bb0\u7684\u64cd\u4f5c**\uff09\u4e86\u3002\n\n\t\u9996\u5148\u6211\u4eec\u8981\u660e\u767d\uff1a**\u4e0a\u9762\u7684\u4e09\u4e2a`tag`\uff08`tag[0,1]`\u548c`tags`\uff09\u4e4b\u95f4\u662f\u6709\u4f18\u5148\u7ea7\u7684**\u3002\n    \n    \u8fd9\u4e2a\u5f88\u5bb9\u6613\u7406\u89e3\uff1a**\u5f53\u4f60\u5c06\u67d0\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u6240\u6709\u6570\u5b57\u90fd\u6539\u6210$0$\u6216\u8005$1$\u4e4b\u540e\uff0c\u4e4b\u524d\u7684\u53cd\u8f6c\u548c\u5176\u5b83\u8d4b\u503c\u5c31\u6ca1\u6709\u610f\u4e49\u4e86**  \n    **\u4f46\u662f\u5982\u679c\u4f60\u53ea\u662f\u53cd\u8f6c\u7684\u8bdd\uff0c\u4e4b\u524d\u7684$0,1$\u8d4b\u503c\u5bf9\u4ee5\u540e\u8fd8\u662f\u6709\u7528\u7684**\u3002\n    \n    \u6240\u4ee5\u53ef\u4ee5\u5f97\u51fa\uff1a**`tags`\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e`tag[0,1]`**\u3002\n    \n    \u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\u5c31\u662f\uff1a\n    \n    1. \u4fee\u6539`tag[0,1]`\u65f6\uff0c\u5982\u679c\u4fee\u6539\u7684\u662f`tag[k]`\uff0c\u5219**\u5c06`tag[k^1]`\u548c`tags`\u90fd\u4fee\u6539\u4e3a$0$**\uff08\u8868\u793a\u4e4b\u524d\u7684\u64cd\u4f5c\u5df2\u7ecf\u6ca1\u6709\u610f\u4e49\uff09\uff0c**\u5c06`tag[k]`\u4fee\u6539\u4e3a$1$**\uff1b\uff08`^`\u8868\u793a\u5f02\u6216\uff09\n    \n    2. \u4fee\u6539`tags`\u65f6\uff0c\u5219**\u53ea\u9700\u8981\u6267\u884c`tags^=1`\u5373\u53ef**\uff08\u56e0\u4e3a\u8fde\u7eed\u53cd\u8f6c\u4e24\u6b21\u4e4b\u540e\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709\u53cd\u8f6c\u8fc7\uff0c~~\u5982\u679c\u50cf\u7b14\u8005\u4e00\u6837\u4e00\u5f00\u59cb\u76f4\u63a5\u6267\u884c`tags=0`\u7684\u8bdd\u53ea\u670910\u5206~~\uff09\n    \n## \u5b9e\u9645\u7ef4\u62a4\n\n~~\u5176\u5b9e\u5c31\u662f\u8be6\u7ec6\u5730\u8bb2\u89e3\u4ee3\u7801~~\n\n- \u9996\u5148\uff0c\u5efa\u6811\u672c\u8eab\u4e0d\u96be\uff1a\n\n  ```cpp\n  void build(int l,int r,int index)\n  {\n      l(index)=l,r(index)=r;\n\n      if( l==r ){sum(index,o[l])=_max(index,o[l])=lmax(index,o[l])=rmax(index,o[l])=1;return;}\n\n      int mid=(l+r)>>1;\n      build(l,mid,index<<1);build(mid+1,r,index<<1|1);\n\n      pushup(index);return;\n  }\n  ```\n\n\t\u7ed3\u5408\u4e0a\u9762\u7684`#define`\u6765\u770b\u7684\u8bdd\uff0c\u5176\u5b9e\u90fd\u662f\u4e00\u4e9b\u65e5\u5e38\u64cd\u4f5c\u2026\u2026\n\n- \u5411\u4e0a\u66f4\u65b0\u4fe1\u606f\uff08`pushup`\uff09\u4e5f\u4e0d\u96be\uff0c\u6309\u7167\u4e0a\u9762\u7406\u8bba\u7ef4\u62a4\u7684\u601d\u8def\u5199\u5c31\u53ef\u4ee5\u4e86\uff0c~~\u4f46\u662f\u53ef\u80fd\u4f1a\u5f88\u590d\u8bfb\u673a\u2026\u2026\u800c\u4e14\u7ec6\u8282\u5343\u4e07\u4e0d\u80fd\u6253\u9519\uff08\u6bd4\u5982\u4e0d\u80fd\u628a0\u548c1\u6253\u53cd\uff09~~\n\n\t![ZGXAWF.png](https://s2.ax1x.com/2019/07/02/ZGXAWF.png)\n    \n    ~~\u56e0\u4e3a\u9875\u5bbd\u6709\u9650\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\u4e0d\u662f\u5f88\u7f8e\u89c2\uff0c\u53ea\u80fd\u653e\u622a\u56fe\u4e86\uff0c\u6c42\u4e0d\u8981\u88ab\u6253qaq~~\n    \n- **\u505a\u597d\u51c6\u5907\uff01\u4e0b\u63a8\u6807\u8bb0\uff08`pushdown`\uff09\u624d\u662f\u91cd\u70b9\uff01\uff08~~\u540c\u6837\u8fd9\u91cc\u7684\u7ec6\u8282\u4e5f\u5f88\u591a\uff0c\u8981\u7ed3\u5408\u4e0a\u9762\u7684\u601d\u8def\u597d\u597d\u7406\u89e3\u624d\u884c\uff0c\u4e0d\u7136\u5206\u5206\u949f\u7ffb\u8f66\u2026\u2026~~\uff09**\n\n  ```cpp\n  void pushdown(int index)\n  {\n      if( tag(index,0) or tag(index,1) )\n      {\n          bool k=tag(index,1);\n\n          sum(index<<1,k)=_max(index<<1,k)=lmax(index<<1,k)=rmax(index<<1,k)=len(index<<1);\n          sum(index<<1,k^1)=_max(index<<1,k^1)=lmax(index<<1,k^1)=rmax(index<<1,k^1)=0;\n          tag(index<<1,k)=1,tag(index<<1,k^1)=tags(index<<1)=0;\n\n          sum(index<<1|1,k)=_max(index<<1|1,k)=lmax(index<<1|1,k)=rmax(index<<1|1,k)=len(index<<1|1);\n          sum(index<<1|1,k^1)=_max(index<<1|1,k^1)=lmax(index<<1|1,k^1)=rmax(index<<1|1,k^1)=0;\n          tag(index<<1|1,k)=1,tag(index<<1|1,k^1)=tags(index<<1|1)=0;\n\n          tag(index,k)=0;\n      }\n\n      if( tags(index) )\n      {\n          swap( sum(index<<1,0),sum(index<<1,1) );\n          swap( _max(index<<1,0),_max(index<<1,1) );\n          swap( lmax(index<<1,0),lmax(index<<1,1) );\n          swap( rmax(index<<1,0),rmax(index<<1,1) );\n          tags(index<<1)^=1;\n\n          swap( sum(index<<1|1,0),sum(index<<1|1,1) );\n          swap( _max(index<<1|1,0),_max(index<<1|1,1) );\n          swap( lmax(index<<1|1,0),lmax(index<<1|1,1) );\n          swap( rmax(index<<1|1,0),rmax(index<<1|1,1) );\n          tags(index<<1|1)^=1;\n\n          tags(index)=0;\n      }\n\n      return;\n  }\n  ```\n  \n  \u91cd\u70b9\u6ce8\u610f\u4e00\u4e0b\u5404\u4e2a`tag`\u662f\u5982\u4f55\u4fee\u6539\u7684\uff0c\u5176\u5b83\u7684\u7ef4\u62a4\u548c\u4e0a\u9762\u6240\u8bf4\u7684\u4e00\u6837\u3002\n  \n- \u5269\u4e0b\u7684\u5c31\u662f\u9898\u76ee\u4e2d\u7684\u5177\u4f53\u64cd\u4f5c\uff0c\u5927\u90e8\u5206\u90fd\u4e0d\u96be\uff08\u6309\u7167\u5e38\u89c4\u7684\u7ebf\u6bb5\u6811\u548c\u4e0a\u9762\u7684\u601d\u8def\u6253\u51fa\u6765\u5373\u53ef\uff09\uff0c\u4f46\u662f\u7b2c$4$\u79cd\u64cd\u4f5c\uff08\u5c31\u662f\u8be2\u95ee\u533a\u95f4\u91cc\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684$1$\uff09\u7a0d\u96be\uff0c\u8fd8\u662f\u8981\u62ff\u4ee3\u7801\u6765\u8bb2\uff1a\n\n\t```cpp\n\tint ask_max(int l,int r,int index)\n    {\n        if( l<=l(index) and r(index)<=r ) return _max(index,1);\n        pushdown(index);\n        \n        int mid=( l(index)+r(index) )>>1;\n        \n        if( r<=mid ) return ask_max(l,r,index<<1);\n        else if( l>mid ) return ask_max(l,r,index<<1|1);\n        else return max( min( rmax(index<<1,1),mid-l+1 )+min( lmax(index<<1|1,1),r-mid ),max( ask_max(l,mid,index<<1),ask_max(mid+1,r,index<<1|1) ) );\n    }\n\t```\n    \n    **\u91cd\u70b9\u662f\u6700\u540e\u4e00\u884c\uff01**\n    \n    ![ZYqfYT.png](https://s2.ax1x.com/2019/07/03/ZYqfYT.png)\n    \n    ~~\uff08\u5982\u679c\u770b\u4e0d\u6e05\u695a\u7684\u8bdd\u53ef\u4ee5\u53f3\u952e\u6253\u5f00\u65b0\u6807\u7b7e\u9875\u67e5\u770b\u56fe\u7247\uff09~~\n    \n    \u9996\u5148\uff0c\u8fd9\u4e2a`std::max`\u91cc\u9762\u6709**\u4e09\u9879**\u3002\u6700\u540e\u4e24\u9879\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5c31\u662f\u8fd4\u56de\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684`_max`\uff0c**\u5173\u952e\u662f\u7b2c\u4e00\u9879\uff1a\u4e3a\u4ec0\u4e48`rmax`\u548c`lmax`\u524d\u9762\u8981\u52a0`std::min`\u5462\uff1f**\n    \n    \u753b\u4e2a\u4f8b\u5b50\u5c31\u80fd\u660e\u767d\u4e86\uff1a![ZYLkAP.png](https://s2.ax1x.com/2019/07/03/ZYLkAP.png)\n    \n    \u7d2b\u6846\u662f\u8be2\u95ee\u7684\u533a\u95f4\uff0c\u4e24\u4e2a\u7eff\u6846\u5206\u522b\u4ee3\u8868`lmax`\u548c`rmax`\u3002\n    \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c**`lmax`\u548c`rmax`\u6709\u65f6\u53ef\u80fd\u4f1a\u6bd4\u8be2\u95ee\u533a\u95f4\u8fd8\u8981\u957f\uff01**\n    \n    \u6240\u4ee5\u6211\u4eec\u624d\u9700\u8981\u53d6`std::min()`\uff0c**\u5982\u679c`r(l)max`\u6bd4\u8be2\u95ee\u533a\u95f4\u7684\u5de6\uff08\u53f3\uff09\u534a\u90e8\u5206\u8fd8\u957f\u7684\u8bdd\uff0c\u5c31\u53d6`mid-l+1`\u548c`r-mid`\uff08\u8868\u793a\u8be2\u95ee\u533a\u95f4\u7684\u5de6\uff08\u53f3\uff09\u534a\u90e8\u5206\uff09**\u3002\n    \n# Final\n\n\u4e0b\u9762\u662f\u4ee3\u7801~~\uff08\u53ef\u80fd\u7ed3\u6784\u4f53\u7801\u98ce\u6709\u4e9b\u6076\u5fc3\uff0c\u4e0d\u8981\u6253\u6211qaq~~\n\n[$\\mathrm{Code}$](https://www.luogu.org/paste/iku5ymww)",
        "postTime": 1561959070,
        "uid": 76049,
        "name": "info___tion",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5e38\u6570\u7565\u5927\u4f46\u662f\u53ef\u80fd\u4f1a\u597d\u60f3\u4e00\u4e9b\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u9898\u7684\u96be\u70b9\u5728\u4e8e\u66f4\u65b0\u548c\u6807\u8bb0\u3002\n\n\u6211\u8fd9\u91cc\u9009\u62e9\u7ef4\u62a4\u4e86\u5de6\u8fb9\u7684\u8fde\u7eed$1$\u7684\u4e2a\u6570$lsum$\uff0c\u53f3\u8fb9\u7684\u8fde\u7eed$1$\u7684\u4e2a\u6570$rsum$\uff0c$1$\u7684\u603b\u6570$tot$\u4ee5\u53ca\u6700\u957f\u7684\u8fde\u7eed$1$\u7684\u548c$sum$\u3002\n\n\u533a\u95f4\u8d4b\u503c\u975e\u5e38\u597d\u5904\u7406\uff0c\u91cd\u70b9\u5728\u4e8e\u53cd\u8f6c\u64cd\u4f5c\u3002\n\n\u7531\u4e8e\u672c\u849f\u84bb\u6bd4\u8f83\u5f31\uff0c\u4e00\u65f6\u95f4\u6ca1\u6709\u60f3\u51fa\u597d\u7684\u505a\u6cd5\uff0c\u5c31\u9009\u62e9\u4e86\u7ef4\u62a4\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff0c\u4e00\u4e2a\u7ef4\u62a4\u7b54\u6848\uff0c\u53e6\u4e00\u4e2a\u7ef4\u62a4\u53cd\u8f6c\u540e\u7684\u6811\uff0c\u8bb0\u4e3a$mirror$\u3002\n\n\u4e0a\u4f20\u65f6\u4e0e\u539f\u6811\u540c\u6837\u66f4\u65b0\uff0c\u5728\u533a\u95f4\u8d4b\u503c\u7684\u65f6\u5019\u5bf9$mirror$\u8d4b\u76f8\u53cd\u7684\u503c\uff0c\u4f46\u662f\u6807\u8bb0\u8981\u6253\u76f8\u540c\u7684\u6807\u8bb0\uff0c\u4e0b\u4f20\u7684\u65f6\u5019\u7edf\u4e00\u6e05\u7a7a\uff08\u56e0\u4e3a\u6ca1\u6709\u7edf\u4e00\u6e05\u7a7a$WA$\u4e86\u4e24\u6b21\uff09\u3002\n\n\u8fd8\u6709\u5c31\u662f\u8be2\u95ee$sum$\u65f6\u7684\u5408\u5e76\u7b54\u6848\u5c31\u548c\u4e0a\u4f20\u4e00\u6837\u7ef4\u62a4\u5c31\u884c\u4e86\u3002\n\nCode\uff1a\n\n```cpp\n#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#define inl inline\n#define re register int\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n    Read x = 0;\n    register bool w = 0;\n    register char c = getchar();\n    while (c > '9' || c < '0') {\n        if (c == '-')\n            w = 1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = getchar();\n    }\n    return w ? -x : x;\n}\nint a[100001];\nstruct node {\n    int tot, sum, lsum, rsum;\n    bool reset, modify, rev;\n}t[1000001], mirror[1000001];\nstruct val {\n    int sum, lsum, rsum;\n};\ninl void maintain(int k, int l, int r, int mid) {\n    re ls = k << 1, rs = k << 1 | 1;\n    t[k].tot = t[ls].tot + t[rs].tot;\n    t[k].lsum = t[ls].lsum, t[k].rsum = t[rs].rsum;\n    if (t[ls].sum == mid - l + 1)t[k].lsum += t[rs].lsum;//\u5982\u679c\u5de6\u8fb9\u5168\u4e3a1\u5c31\u52a0\u4e0a\u53f3\u8fb9\u7684\u5de6\u8fde\u7eed1\n    if (t[rs].sum == r - mid)t[k].rsum += t[ls].rsum;//\u540c\u7406\n    t[k].sum = max(max(t[ls].sum, t[rs].sum), t[ls].rsum + t[rs].lsum);\n    mirror[k].tot = mirror[ls].tot + mirror[rs].tot;\n    mirror[k].lsum = mirror[ls].lsum, mirror[k].rsum = mirror[rs].rsum;\n    if (mirror[ls].sum == mid - l + 1)mirror[k].lsum += mirror[rs].lsum;\n    if (mirror[rs].sum == r - mid)mirror[k].rsum += mirror[ls].rsum;\n    mirror[k].sum = max(max(mirror[ls].sum, mirror[rs].sum), mirror[ls].rsum + mirror[rs].lsum);\n}\ninl void build(int k, int l, int r) {\n    if (l == r) {\n        t[k].sum = t[k].lsum = t[k].rsum = t[k].tot = a[l];\n        mirror[k].sum = mirror[k].lsum = mirror[k].rsum = mirror[k].tot = a[l] ^ 1;\n        return;\n    }\n    re mid = l + r >> 1;\n    build(k << 1, l, mid), build(k << 1 | 1, mid + 1, r);\n    maintain(k, l, r, mid);\n}\ninl void modify(int x, int l, int r) {\n    t[x].tot = t[x].sum = t[x].lsum = t[x].rsum = r - l + 1;\n    t[x].modify = 1;\n    t[x].reset = t[x].rev = 0;\n    mirror[x].tot = mirror[x].sum = mirror[x].lsum = mirror[x].rsum = mirror[x].reset = mirror[x].rev = 0;\n    mirror[x].modify = 1;\n}\ninl void zero(int x, int l, int r) {\n    t[x].tot = t[x].sum = t[x].lsum = t[x].rsum = t[x].modify = t[x].rev = 0;\n    t[x].reset = 1;\n    mirror[x].tot = mirror[x].sum = mirror[x].lsum = mirror[x].rsum = r - l + 1;\n    mirror[x].rev = mirror[x].modify = 0;\n    mirror[x].reset = 1;//\u6ce8\u610f\u8981\u6253\u540c\u6837\u7684\u6807\u8bb0\n}\ninl void filp(int x, int l, int r) {\n    mirror[x].rev ^= 1, t[x].rev ^= 1;\n    swap(mirror[x], t[x]);\n}\ninl void pushdown(int k, int l, int r) {\n    re mid = l + r >> 1;\n    if (t[k].modify) {\n        modify(k << 1, l, mid);\n        modify(k << 1 | 1, mid + 1, r);\n        t[k].modify = mirror[k].modify = 0;\n    }\n    else if (t[k].reset) {\n        zero(k << 1, l, mid);\n        zero(k << 1 | 1, mid + 1, r);\n        t[k].reset = mirror[k].reset = 0;\n    }\n    if (t[k].rev) {\n        filp(k << 1, l, mid);\n        filp(k << 1 | 1, mid + 1, r);\n        t[k].rev = mirror[k].rev = 0;\n    }//\u6ce8\u610f\u6807\u8bb0\u6e05\u7a7a\u8981\u7edf\u4e00\u6e05\u7a7a\n}\ninl void change(int k, int l, int r, int x, int y) {\n    if (l >= x && r <= y) {\n        modify(k, l, r);\n        return;\n    }\n    pushdown(k, l, r);\n    re mid = l + r >> 1;\n    if (x <= mid)change(k << 1, l, mid, x, y);\n    if (y > mid)change(k << 1 | 1, mid + 1, r, x, y);\n    maintain(k, l, r, mid);\n}\ninl void reset(int k, int l, int r, int x, int y) {\n    if (l >= x && r <= y) {\n        zero(k, l, r);\n        return;\n    }\n    pushdown(k, l, r);\n    re mid = l + r >> 1;\n    if (x <= mid)reset(k << 1, l, mid, x, y);\n    if (y > mid)reset(k << 1 | 1, mid + 1, r, x, y);\n    maintain(k, l, r, mid);\n}\ninl void reverse(int k, int l, int r, int x, int y) {\n    if (l >= x && r <= y) {\n        filp(k, l, r);\n        return;\n    }\n    pushdown(k, l, r);\n    re mid = l + r >> 1;\n    if (x <= mid)reverse(k << 1, l, mid, x, y);\n    if (y > mid)reverse(k << 1 | 1, mid + 1, r, x, y);\n    maintain(k, l, r, mid);\n}\ninl int qtot(int k, int l, int r, int x, int y) {\n    if (l >= x && r <= y)return t[k].tot;\n    pushdown(k, l, r);\n    re mid = l + r >> 1, ans = 0;\n    if (x <= mid)ans += qtot(k << 1, l, mid, x, y);\n    if (y > mid)ans += qtot(k << 1 | 1, mid + 1, r, x, y);\n    return ans;\n}\ninl val qsum(int k, int l, int r, int x, int y) {\n    if (l >= x && r <= y)return val{ t[k].sum,t[k].lsum,t[k].rsum };\n    pushdown(k, l, r);\n    re mid = l + r >> 1, fl = 0, fr = 0;\n    val ans = val{ 0,0,0 }, ls = val{ 0,0,0 }, rs = val{ 0,0,0 };\n    if (x <= mid)ls = qsum(k << 1, l, mid, x, y), fl = 1;\n    if (y > mid)rs = qsum(k << 1 | 1, mid + 1, r, x, y), fr = 1;\n    if (!fl)return rs;\n    if (!fr)return ls;//\u8fd9\u91cc\u4e5f\u662f\u4e2a\u5c0f\u7ec6\u8282\n    ans.sum = max(ls.sum, rs.sum);\n    ans.lsum = ls.lsum, ans.rsum = rs.rsum;\n    if (ls.sum == mid - max(l, x) + 1) ans.lsum += rs.lsum;\n    if (rs.sum == min(r, y) - mid) ans.rsum += ls.rsum;\n    ans.sum = max(ans.sum, ls.rsum + rs.lsum);\n    return ans;\n}\nsigned main() {\n    re n = read<int>(), m = read<int>(), op, x, y;\n    for (re i = 1; i <= n; i++)a[i] = read<int>();\n    build(1, 1, n);\n    while (m--) {\n        op = read<int>(), x = read<int>() + 1, y = read<int>() + 1;\n        if (!op) {\n            reset(1, 1, n, x, y);\n        }\n        else if (op == 1) {\n            change(1, 1, n, x, y);\n        }\n        else if (op == 2) {\n            reverse(1, 1, n, x, y);\n        }\n        else if (op == 3) {\n            printf(\"%d\\n\", qtot(1, 1, n, x, y));\n        }\n        else {\n            printf(\"%d\\n\", qsum(1, 1, n, x, y).sum);\n        }\n    }\n}\n```\n\n",
        "postTime": 1554961604,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P2572 \u5e8f\u5217\u64cd\u4f5c"
    },
    {
        "content": "# \u4e00\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u7ebf\u6bb5\u6811\n\n\u7ebf\u6bb5\u6811\u7684\u539f\u7406\u5927\u5bb6\u5927\u6982\u90fd\u6bd4\u8f83\u6e05\u695a\u4e86\n\n\u6211\u628a\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u5206\u4e3a3\u7c7b\uff1a\n\n1. \u7ed3\u6784\u7c7b(\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9)\n\n2. \u53c2\u6570/\u4fe1\u606f\u7c7b(\u533a\u95f4\u548c\uff0cmax)\n\n3. \u61d2\u6807\u8bb0\n\n\u4e3b\u8981\u8bf4\u4e00\u4e0b\u61d2\u6807\u8bb0\uff0c\u61d2\u6807\u8bb0tag\u7684\u542b\u4e49\u662f\u5bf9\u8fd9\u68f5\u5b50\u6811\u9664\u81ea\u5df1\u4ee5\u5916\u7684\u90e8\u5206\u5e94\u8be5\u4f5c\u67d0\u4e9b\u4fee\u6539\uff0c\u4f46\u81ea\u5df1\u672c\u8eab\u662f\u4fee\u6539\u8fc7\u7684\n\n\u56e0\u6b64\u7ebf\u6bb5\u6811\u8981\u59cb\u7ec8\u4fdd\u8bc1\uff1a\u53ea\u8981\u5404\u7ea7\u7956\u5148\u6ca1\u6709tag\uff0c\u81ea\u5df1\u7ef4\u62a4\u7684\u4e00\u5207\u4fe1\u606f\u90fd\u662f\u6b63\u786e\u7684\n\n\u6240\u4ee5\u6211\u4eec\u624d\u80fd\u8fd9\u6837\u67e5\u8be2\u533a\u95f4\u548c:\n```\nint query(int nd, int p, int q)\n{\n\tif(p > r[nd] || q < l[nd]) return 0;\n\tif(p <= l[nd] && q >= r[nd]) return val[nd];\n\tpushdown(nd);\n\treturn query(2 * nd, p, q) + query(2 * nd + 1, p, q);\n}\n```\n\n(\u8fd9\u5728\u6211\u770b\u6765\u4e5f\u662f\u7ebf\u6bb5\u6811\u4e0d\u80fd\u533a\u95f4\u7ffb\u8f6c\u7684\u4e00\u4e2a\u539f\u56e0)\n\n\u6211\u4eec\u8003\u8651\u8fd9\u9053\u9898\u9700\u89812\u4e2atag\uff0c\u4e00\u4e2a\u7ef4\u62a40/1\u662f\u5426\u53cd\u8fc7\u6765(rev)\uff0c\u4e00\u4e2a\u7ef4\u62a4\u6709\u6ca1\u6709\u88ab\u533a\u95f4\u8d4b\u503c(set)\n\n\u6ce8\u610f\u5230\u67d0\u4e00\u6bb5\u5982\u679c\u672c\u6765\u6709set\u800c\u65e0rev\uff0c\u52a0\u4e0a\u4e00\u4e2arev\u4f1a\u6539\u53d8\u5176set\u7684\u503c\n\n\u800c\u5982\u679c\u672c\u6765\u6709rev\u800c\u65e0set\uff0c\u52a0\u4e0a\u4e00\u4e2aset\u4e0d\u4f1a\u6539\u53d8rev\u7684\u503c\n\n\u8fd9\u5c31\u597d\u6bd4\u52a0\u52a0\u6cd5\u6807\u8bb0\u4e0d\u4f1a\u5f71\u54cd\u4e58\u6cd5\uff0c\u4f46\u52a0\u4e58\u6cd5\u6807\u8bb0\u4f1a\u5f71\u54cd\u52a0\u6cd5\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u660e\u767d\u4e86\uff0crev\u7684\u4f18\u5148\u7ea7\u8981\u9ad8\u4e8eset\n\n\u56e0\u6b64\u5728\u4e0b\u4f20\u65f6\u8981\u5148\u4e0b\u4f20rev\n\n\u8fd8\u6709\u4e00\u70b9\u601d\u7ef4\u7684\u8bef\u533a\u9700\u8981\u6f84\u6e05\uff1a\n\n\u82e5\u4e00\u6bb5\u65e2\u6709rev\u53c8\u6709set\uff0c\u5219set\u662f\u5df2\u7ecf\u53cd\u8fc7\u6765\u540e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e5f\u5c31\u5bf9\u5e94\u4e86\u81ea\u8eab\u8282\u70b9\u4fe1\u606f\u7684\u6b63\u786e\u6027\n\n\u53e6\u5916\uff0c\u4e24\u6b21\u53cd\u7f6e\u4f1a\u56de\u5230\u539f\u6765\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u66f4\u65b0rev\u662f\u8981\u5f02\u6216\u4e0a1\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u7b49\u4e8e1\n\n\u8fd9\u9898\u6bd4\u8f83\u7e41\u6742\uff0c\u5efa\u8bae\u4e0d\u8981\u8fc7\u5ea6\u538b\u884c\uff0c\u4e0d\u7136\u67e5\u9519\u4f1a\u5f88\u9ebb\u70e6\n\n\u5f53\u7136\uff0c\u4ee5\u4e0a\u7684\u90fd\u662f\u4e2a\u4eba\u89c2\u70b9\uff0c\u7ebf\u6bb5\u6811\u672c\u6765\u5199\u6cd5\u5c31\u5f88\u591a\uff0c\u5982\u679c\u5199\u6cd5\u5dee\u5f02\u8f83\u5927\u7684\uff0c\u5ffd\u7565\u8fd9\u7bc7\u6587\u7ae0\u5373\u53ef\n\n\u4e0b\u9762\u662f(\u4e11\u964b\u7684)\u4ee3\u7801\n```\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nstruct st {int a, b, c;};//\u4e3a\u4e86\u5199\u5b50\u6bb5\u548c\u65b9\u4fbf\nst mst(int a, int b, int c){st x; x.a = a; x.b = b; x.c = c; return x;}\nint a[100005], l[300005], r[300005], L[300005], set[300005], rev[300005];\nint one[300005], lm[300005][2], rm[300005][2], mm[300005][2];\nvoid pushup(int nd)\n{\n\tone[nd] = one[2 * nd] + one[2 * nd + 1];\n\tlm[nd][0] = lm[2 * nd][0] + ((lm[2 * nd][0] == L[2 * nd]) ? lm[2 * nd + 1][0] : 0);\n\tlm[nd][1] = lm[2 * nd][1] + ((lm[2 * nd][1] == L[2 * nd]) ? lm[2 * nd + 1][1] : 0);\n\trm[nd][0] = rm[2 * nd + 1][0] + ((rm[2 * nd + 1][0] == L[2 * nd + 1]) ? rm[2 * nd][0] : 0);\n\trm[nd][1] = rm[2 * nd + 1][1] + ((rm[2 * nd + 1][1] == L[2 * nd + 1]) ? rm[2 * nd][1] : 0);\n\tmm[nd][0] = max(rm[2 * nd][0] + lm[2 * nd + 1][0], max(mm[2 * nd][0], mm[2 * nd + 1][0]));\n\tmm[nd][1] = max(rm[2 * nd][1] + lm[2 * nd + 1][1], max(mm[2 * nd][1], mm[2 * nd + 1][1]));\n}\nint f(int x)\n{\n\treturn x == -1 ? x : (x ^ 1);\n}\nvoid pushdown(int nd)\n{\n\tif(rev[nd])\n\t{\n\t\trev[2 * nd] ^= 1; rev[2 * nd + 1] ^= 1;\n\t\tset[2 * nd] = f(set[2 * nd]); set[2 * nd + 1] = f(set[2 * nd + 1]);\n\t\tone[2 * nd] = L[2 * nd] - one[2 * nd]; one[2 * nd + 1] = L[2 * nd + 1] - one[2 * nd + 1];\n\t\tswap(lm[2 * nd][0], lm[2 * nd][1]); swap(rm[2 * nd][0], rm[2 * nd][1]); swap(mm[2 * nd][0], mm[2 * nd][1]);\n\t\tswap(lm[2 * nd + 1][0], lm[2 * nd + 1][1]); swap(rm[2 * nd + 1][0], rm[2 * nd + 1][1]); swap(mm[2 * nd + 1][0], mm[2 * nd + 1][1]);\n\t\trev[nd] = 0;\n\t}\n\tif(set[nd] != -1)\n\t{\n\t\tset[2 * nd] = set[2 * nd + 1] = set[nd];\n\t\tone[2 * nd] = L[2 * nd] * set[nd];\n\t\tone[2 * nd + 1] = L[2 * nd + 1] * set[nd];\n\t\tlm[2 * nd][1] = rm[2 * nd][1] = mm[2 * nd][1] = L[2 * nd] * set[nd];\n\t\tlm[2 * nd][0] = rm[2 * nd][0] = mm[2 * nd][0] = L[2 * nd] * (1 - set[nd]);\n\t\tlm[2 * nd + 1][1] = rm[2 * nd + 1][1] = mm[2 * nd + 1][1] = L[2 * nd + 1] * set[nd];\n\t\tlm[2 * nd + 1][0] = rm[2 * nd + 1][0] = mm[2 * nd + 1][0] = L[2 * nd + 1] * (1 - set[nd]);\n\t\tset[nd] = -1;\n\t}\n}\nvoid build(int nd)\n{\n\tL[nd] = r[nd] - l[nd] + 1;\n\tif(L[nd] == 1)\n\t{\n\t\tone[nd] = a[l[nd]];\n\t\tlm[nd][one[nd]] = rm[nd][one[nd]] = mm[nd][one[nd]] = 1;\n\t\treturn ;\n\t}\n\tl[2 * nd] = l[nd], r[2 * nd] = (l[nd] + r[nd]) / 2, l[2 * nd + 1] = r[2 * nd] + 1, r[2 * nd + 1] = r[nd];\n\tbuild(2 * nd); build(2 * nd + 1);\n\tpushup(nd);\n}\nvoid Set(int nd, int p, int q, int c)\n{\n\tif(p > r[nd] || q < l[nd]) return ;\n\tif(p <= l[nd] && q >= r[nd])\n\t{\n\t\tset[nd] = c;\n\t\tone[nd] = L[nd] * set[nd];\n\t\tlm[nd][1] = rm[nd][1] = mm[nd][1] = L[nd] * set[nd];\n\t\tlm[nd][0] = rm[nd][0] = mm[nd][0] = L[nd] * (1 - set[nd]);\n\t\treturn ;\n\t}\n\tpushdown(nd);\n\tSet(2 * nd, p, q, c); Set(2 * nd + 1, p, q, c);\n\tpushup(nd);\n}\nvoid reverse(int nd, int p, int q)\n{\n\tif(p > r[nd] || q < l[nd]) return ;\n\tif(p <= l[nd] && q >= r[nd])\n\t{\n\t\trev[nd] ^= 1;\n\t\tset[nd] = f(set[nd]); \n\t\tone[nd] = L[nd] - one[nd];\n\t\tswap(lm[nd][0], lm[nd][1]);\n\t\tswap(rm[nd][0], rm[nd][1]);\n\t\tswap(mm[nd][0], mm[nd][1]);\n\t\treturn ;\n\t}\n\tpushdown(nd);\n\treverse(2 * nd, p, q); reverse(2 * nd + 1, p, q);\n\tpushup(nd);\n}\nint query(int nd, int p, int q)\n{\n\tif(p > r[nd] || q < l[nd]) return 0;\n\tif(p <= l[nd] && q >= r[nd]) return one[nd];\n\tpushdown(nd);\n\treturn query(2 * nd, p, q) + query(2 * nd + 1, p, q);\n}\nst qmax(int nd, int p, int q)\n{\n\tif(p > r[nd] || q < l[nd]) return mst(0, 0, 0);\n\tif(p <= l[nd] && q >= r[nd]) return mst(lm[nd][1], rm[nd][1], mm[nd][1]);\n\tpushdown(nd);\n\tst x1 = qmax(2 * nd, p, q), x2 = qmax(2 * nd + 1, p, q);\n\treturn mst(x1.a + ((x1.a == L[2 * nd]) ? x2.a : 0), x2.b + ((x2.b == L[2 * nd + 1]) ? x1.b : 0), max(max(x1.c, x2.c), x1.b + x2.a));\n}\nint main(int argc, char **argv)\n{\n\tint n, m, op, p, q, i;\n\tmemset(set, -1, sizeof(set));\n\tscanf(\"%d%d\", &n, &m);\n\tfor(i = 1; i <= n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\tl[1] = 1, r[1] = n;\n\tbuild(1);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d%d%d\", &op, &p, &q);\n\t\tp++; q++; \n\t\tswitch(op)\n\t\t{\n\t\t\tcase 0: Set(1, p, q, 0); break;\n\t\t\tcase 1: Set(1, p, q, 1); break;\n\t\t\tcase 2: reverse(1, p, q); break;\n\t\t\tcase 3: printf(\"%d\\n\", query(1, p, q)); break;\n\t\t\tcase 4: printf(\"%d\\n\", qmax(1, p, q).c); break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1554725409,
        "uid": 47140,
        "name": "\u65af\u8302",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u7206\u8c03\u4e00\u665a\u7ec8\u4e8e\u8c03\u51fa\u6765\u4e86\uff0c\u4e0d\u5bb9\u6613\u554a2333\n\n\u524d\u9762\u7684\u9898\u89e3\u8bb2\u7684\u90fd\u5dee\u4e0d\u591a\u4e86\uff0c\u6211\u8fd9\u91cc\u63d0\u4f9b\u6211\u7684\u4e00\u4e9b\u7406\u89e3\uff1a\n\n1.\u6700\u540e\u4e00\u4e2a\u70b9\u6570\u636e\u662f2e5\uff0c\u6d1b\u8c37\u6570\u636e\u9505\u4e862333\n\n2.\u5173\u4e8e\u6807\u8bb0\uff1a\n\n\u7c7b\u6bd4\u7ebf\u6bb5\u68112\uff0c\u663e\u7136\u8d4b\u503c\u6807\u8bb0\u6bd4\u7ffb\u8f6c\u4f18\u5148\uff0c\u56e0\u6b64\u7ed9\u533a\u95f4\u6253\u4e0a\u8d4b\u503c\u6807\u8bb0\u65f6\uff0c\u5e94\u8be5\u5c06\u7ffb\u8f6c\u6807\u8bb0\u6e05\u7a7a\n    \n\u5f53\u4e00\u4e2a\u533a\u95f4\u6709\u8d4b\u503c\u6807\u8bb0\uff0c\u800c\u53c8\u8981\u88ab\u6253\u4e0a\u7ffb\u8f6c\u6807\u8bb0\u65f6\uff0c\u8fd9\u662f\u5e94\u8be5\u76f4\u63a5\u5c06\u8d4b\u503c\u6807\u8bb0^1,\u800c\u4e0d\u7528\u5904\u7406\u7ffb\u8f6c\u6807\u8bb0\u3002\u8fd9\u6837\u5c31\u9632\u6b62\u6807\u8bb0\u7684\u524d\u540e\u8986\u76d6\u548c\u51b2\u7a81\n\n3.\u6700\u540e\u4e00\u4e2a\u8be2\u95ee\u4e0d\u5e94\u8be5\u76f4\u63a5\u8fd4\u56de\u503c\uff0c\u800c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9\u3002\u56e0\u4e3a\u5f53\u5904\u7406ql - mid\u548cmid + 1-qr\u65f6\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u5e94\u8be5\u8003\u8651\u8fd9\u4e24\u6bb5\u533a\u95f4\u7684\u5176\u4ed6\u503c\uff08\u539f\u7406\u540cpushdown\uff09\n\n\u4e0a\u4ee3\u7801\uff0c\u6ca1\u6709\u538b\u884c\uff0c\u5199\u7684\u5f88\u76f4\u767d\uff1a\n```\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<climits>\n#include<vector>\n#include<cstdlib>\n#include<ctime>\n#include<queue> \nusing namespace std;\ninline int read()\n{\n\tint ans = 0,op = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\n\t{\n\t\tif(ch == '-') op = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9')\n\t{\n\t\t(ans *= 10) += ch - '0';\n\t\tch = getchar();\n\t}\n\treturn ans * op;\n}\nconst int maxn = 2e5 + 10;\nstruct node\n{\n\tint sum,m1,m0,ml1,mr1,ml0,mr0;\n\tint lazy;//0,1\n\tint inv;\n}a[maxn << 2];\ninline void pushdown(int i,int l,int r)\n{\n\tint mid = (l + r) >> 1;\n\tint lenl = mid - l + 1,lenr = r - mid;\n\tif(a[i].lazy == 0)\n\t{\n\t\ta[i << 1] = (node){0,0,lenl,0,0,lenl,lenl,0,0};\n\t\ta[i << 1 | 1] = (node){0,0,lenr,0,0,lenr,lenr,0,0};\n\t\ta[i].inv = 0;\n\t}\n\tif(a[i].lazy == 1)\n\t{\n\t\ta[i << 1] = (node){lenl,lenl,0,lenl,lenl,0,0,1,0};\n\t\ta[i << 1 | 1] = (node){lenr,lenr,0,lenr,lenr,0,0,1,0};\n\t\ta[i].inv = 0;\n\t}\n\ta[i].lazy = -1;\n\tif(a[i].inv == 1)\n\t{\n\t\tif(a[i << 1].lazy != -1) a[i << 1].lazy ^= 1;\n\t\telse a[i << 1].inv ^= 1;\n\t\ta[i << 1].sum = lenl - a[i << 1].sum;\n\t\tswap(a[i << 1].m1,a[i << 1].m0);\n\t\tswap(a[i << 1].ml1,a[i << 1].ml0);\n\t\tswap(a[i << 1].mr1,a[i << 1].mr0);\n\t\t\n\t\tif(a[i << 1 | 1].lazy != -1) a[i << 1 | 1].lazy ^= 1;\n\t\telse a[i << 1 | 1].inv ^= 1;\n\t\ta[i << 1 | 1].sum = lenr - a[i << 1 | 1].sum;\n\t\tswap(a[i << 1 | 1].m1,a[i << 1 | 1].m0);\n\t\tswap(a[i << 1 | 1].ml1,a[i << 1 | 1].ml0);\n\t\tswap(a[i << 1 | 1].mr1,a[i << 1 | 1].mr0);\n\t\t\n\t\ta[i].inv = 0;\n\t}\n}\ninline void pushup(int i,int l,int r)\n{\n\ta[i].sum = a[i << 1].sum + a[i << 1 | 1].sum;\n\t\n\tint mid = (l + r) >> 1;\n\t\n\tif(a[i << 1].ml1 == mid - l + 1) a[i].ml1 = a[i << 1].ml1 + a[i << 1 | 1].ml1;\n\telse a[i].ml1 = a[i << 1].ml1;\n\t\n\tif(a[i << 1].ml0 == mid - l + 1) a[i].ml0 = a[i << 1].ml0 + a[i << 1 | 1].ml0;\n\telse a[i].ml0 = a[i << 1].ml0;\n\t\n\tif(a[i << 1 | 1].mr1 == r - mid) a[i].mr1 = a[i << 1 | 1].mr1 + a[i << 1].mr1;\n\telse a[i].mr1 = a[i << 1 | 1].mr1;\n\t\n\tif(a[i << 1 | 1].mr0 == r - mid) a[i].mr0 = a[i << 1 | 1].mr0 + a[i << 1].mr0;\n\telse a[i].mr0 = a[i << 1 | 1].mr0;\n\t\n\ta[i].m1 = max(max(a[i << 1].m1,a[i << 1 | 1].m1),a[i << 1].mr1 + a[i << 1 | 1].ml1);\n\ta[i].m0 = max(max(a[i << 1].m0,a[i << 1 | 1].m0),a[i << 1].mr0 + a[i << 1 | 1].ml0);\n}\nvoid build(int i,int l,int r)\n{\n\ta[i].lazy = -1;\n\ta[i].inv = 0;\n\tif(l == r)\n\t{\n\t\tint op = read();\n\t\ta[i] = (node){op,op,op ^ 1,op,op,op ^ 1,op ^ 1,-1,0};\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(i << 1,l,mid);\n\tbuild(i << 1 | 1,mid + 1,r);\n\tpushup(i,l,r);\n}\nvoid op0(int i,int l,int r,int ql,int qr)\n{\n\tpushdown(i,l,r);\t\n\tint len = r - l + 1;\n\tif(l == ql && r == qr)\n\t{\n\t\ta[i] = (node){0,0,len,0,0,len,len,0,0};\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(qr <= mid) op0(i << 1,l,mid,ql,qr);\n\telse if(ql > mid) op0(i << 1 | 1,mid + 1,r,ql,qr);\n\telse\n\t{\n\t\top0(i << 1,l,mid,ql,mid);\n\t\top0(i << 1 | 1,mid + 1,r,mid + 1,qr);\n\t}\n\tpushup(i,l,r);\n}\nvoid op1(int i,int l,int r,int ql,int qr)\n{\n\tpushdown(i,l,r);\n\tint len = r - l + 1;\n\tif(l == ql && r == qr)\n\t{\n\t\ta[i] = (node){len,len,0,len,len,0,0,1,0};\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(qr <= mid) op1(i << 1,l,mid,ql,qr);\n\telse if(ql > mid) op1(i << 1 | 1,mid + 1,r,ql,qr);\n\telse\n\t{\n\t\top1(i << 1,l,mid,ql,mid);\n\t\top1(i << 1 | 1,mid + 1,r,mid + 1,qr);\n\t}\t\n\tpushup(i,l,r);\n}\nvoid op2(int i,int l,int r,int ql,int qr)//\u53d6\u53cd \n{\n\tpushdown(i,l,r);\n\tint len = r - l + 1;\n\tif(l == ql && r == qr)\n\t{\n\t\tif(a[i].lazy != -1) a[i].lazy ^= 1;\n\t\telse a[i].inv ^= 1; \n\t\tswap(a[i].m1,a[i].m0);\n\t\tswap(a[i].ml1,a[i].ml0);\n\t\tswap(a[i].mr1,a[i].mr0);\n\t\ta[i].sum = len - a[i].sum;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(qr <= mid) op2(i << 1,l,mid,ql,qr);\n\telse if(ql > mid) op2(i << 1 | 1,mid + 1,r,ql,qr);\n\telse\n\t{\n\t\top2(i << 1,l,mid,ql,mid);\n\t\top2(i << 1 | 1,mid + 1,r,mid + 1,qr);\n\t}\t\n\tpushup(i,l,r);\t\n}\nint query1(int i,int l,int r,int ql,int qr)\n{ \n\tpushdown(i,l,r);\n\tif(l == ql && r == qr) return a[i].sum;\n\tint mid = l + r >> 1;\n\tif(qr <= mid) return query1(i << 1,l,mid,ql,qr);\n\telse if(ql > mid) return query1(i << 1 | 1,mid + 1,r,ql,qr);\n\telse return query1(i << 1,l,mid,ql,mid) + query1(i << 1 | 1,mid + 1,r,mid + 1,qr);\n}\nnode qmax(int i,int l,int r,int ql,int qr)\n{\n\tpushdown(i,l,r);\n\tif(l == ql && r == qr) return a[i];\n\tint mid = l + r >> 1;\n\tif(qr <= mid) return qmax(i << 1,l,mid,ql,qr);\n\telse if(ql > mid) return qmax(i << 1 | 1,mid + 1,r,ql,qr);\n\t//else \n\t//return qmax(i << 1 | 1,mid + 1,r,mid + 1,qr);\n\telse\n\t{\n\t\tnode ans;\n\t\tnode lef = qmax(i << 1,l,mid,ql,mid);\n\t\tnode rig = qmax(i << 1 | 1,mid + 1,r,mid + 1,qr);\n\t\t//printf(\"%d\\n\",lef.m1);\n\t\tans.sum = lef.sum + rig.sum;\n\t\tans.ml0 = lef.ml0,ans.ml1 = lef.ml1;\n\t\tans.mr0 = rig.mr0,ans.mr1 = rig.mr1;\n\t\tif(lef.ml0 == mid - ql + 1) ans.ml0 += rig.ml0;\n\t\tif(lef.ml1 == mid - ql + 1) ans.ml1 += rig.ml1;\n\t\tif(rig.mr0 == qr - mid) ans.mr0 += lef.mr0; \n\t\tif(rig.mr1 == qr - mid) ans.mr1 += lef.mr1;\n\t\tans.m1 = max(max(lef.m1,rig.m1),lef.mr1 + rig.ml1);\n\t\tans.m0 = max(max(lef.m0,rig.m0),lef.mr0 + rig.ml0);\n\t\treturn ans;\n\t}\n}\nint main()\n{\n\tint n = read(),m = read();\n\tbuild(1,1,n);\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint op = read(),l = read(),r = read();\n\t\tl++,r++; \n\t\tif(op == 0) op0(1,1,n,l,r);\n\t\tif(op == 1) op1(1,1,n,l,r);\n\t\tif(op == 2) op2(1,1,n,l,r);\n\t\tif(op == 3) printf(\"%d\\n\",query1(1,1,n,l,r));\n\t\tif(op == 4)\n\t\t{\n\t\t\tnode ans = qmax(1,1,n,l,r);\n\t\t\tprintf(\"%d\\n\",ans.m1);\n\t\t}\n\t}\n}\n```",
        "postTime": 1549029435,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u5404\u79cd\u7e41\u7410\u7684\u7ebf\u6bb5\u6811\u6807\u8bb0\u64cd\u4f5c\u3002\u3002\u3002\u8d64\u88f8\u88f8\u7684\u7801\u519c\u9898\u3002\n\n\u8c03\u4e86\u4e00\u4e2a\u665a\u4e0a\uff0c\u6700\u540e\u5199\u7bc7\u9898\u89e3\u3002\n\n\u9898\u89e3\u4eae\u70b9\uff1a\u4ee3\u7801\u77ed\uff0c~~\u8dd1\u5f97\u6162\uff08\u8fde\u7b2c\u4e00\u9875\u90fd\u6ca1\u6324\u8fdb\u53bb\uff09~~\n\n\n\u5176\u5b9e\u6211\u8ddf\u4f60\u4eec\u8bf4\u554a\uff0c\u4ee3\u7801\u77ed\u662f\u597d\u4e8b~~\uff08\u8fd9\u91cc\u4e0d\u662f\u8bf4\u538b\u884c\u597d\uff0c\u6211\u7684\u4ee3\u7801\u4e0d\u538b\u884c\u4e5f\u6ca1\u90a3\u4e48\u957f\uff09~~\uff0c\u56e0\u4e3a\u4ee3\u7801\u77ed\u597d\u8c03\u554a\uff0c\u51e0\u4e2a\u7c7b\u4f3c\u7684\u8bed\u53e5\u5199\u4e2a\u51fd\u6570\uff0c\u65e2\u6ee1\u8db3\u4e86\u61d2\u4eba\u9700\u8981\uff08\u51cf\u5c11\u7801\u91cf\uff09\uff0c\u800c\u4e14\u4e5f\u8ba9\u4ee3\u7801\u601d\u8def\u6e05\u6670\uff0c\u6ca1\u6709\u90a3\u4e48\u6742\u4e71\u4e86\u3002\n\n\n------------------------------------------------------------------\n\nthe code:\n------------------------------------------------------------------------------------------------------------------------------------\n\n```\n//by Judge\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int M=2e5+5;\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x,char chr='\\n'){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=chr;\n} inline void cmax(int& a,int b){ if(a<b) a=b; }\nstruct node{ int l,r,len,tag,rev;\n\tint sum,max[2],lmax[2],rmax[2];\n}t[M<<2],zero; int n,m,v[M];\n#define ls k<<1\n#define rs k<<1|1\ninline node merge(node a,node b){ //\u61d2\u4eba\u5408\u5e76\n\tstatic node c;\n\tc.sum=a.sum+b.sum;\n\tfor(int i=0;i<=1;++i){\n\t\tc.lmax[i]=a.lmax[i];\n\t\tif(a.lmax[i]==a.len)\n\t\t\tc.lmax[i]+=b.lmax[i];\n\t\tc.rmax[i]=b.rmax[i];\n\t\tif(b.rmax[i]==b.len)\n\t\t\tc.rmax[i]+=a.rmax[i];\n\t\tc.max[i]=a.rmax[i]+b.lmax[i];\n\t\tcmax(c.max[i],a.max[i]);\n\t\tcmax(c.max[i],b.max[i]);\n\t} return c;\n} inline void pushup(int k){ //\u61d2\u4ebapushup\n\tt[0]=merge(t[ls],t[rs]);\n\tt[k].sum=t[0].sum;\n\tfor(int i=0;i<=1;++i){\n\t\tt[k].max[i]=t[0].max[i];\n\t\tt[k].lmax[i]=t[0].lmax[i];\n\t\tt[k].rmax[i]=t[0].rmax[i];\n\t}\n} inline void chg(int k,int v){ //\u61d2\u4ebachange\n\tif(v<2){\n\t\tt[k].sum=t[k].len*v,t[k].tag=v,t[k].rev=0;\n\t\tt[k].max[v]=t[k].lmax[v]=t[k].rmax[v]=t[k].len;\n\t\tt[k].max[v^1]=t[k].lmax[v^1]=t[k].rmax[v^1]=0;\n\t} else if(v==2){\n\t\tt[k].sum=t[k].len-t[k].sum;\n\t\tif(t[k].tag!=-1) t[k].tag^=1;\n\t\telse t[k].rev^=1;\n\t\tswap(t[k].max[0],t[k].max[1]);\n\t\tswap(t[k].lmax[0],t[k].lmax[1]);\n\t\tswap(t[k].rmax[0],t[k].rmax[1]);\n\t}\n} inline void pushdown(int k){ //pushdown\u53ef\u4ee5\u975e\u5e38\u77ed\n\tif(t[k].tag!=-1)\n\t\tt[k].rev=0,chg(ls,t[k].tag),\n\t\tchg(rs,t[k].tag),t[k].tag=-1;\n\telse if(t[k].rev)\n\t\tchg(ls,2),chg(rs,2),t[k].rev=0;\n} void build(int k,int l,int r){ /*     \u7136\u540e\u90fd\u662f\u7ebf\u6bb5\u6811\u5e38\u89c4\u64cd\u4f5c   */\n\tt[k].l=l,t[k].r=r,t[k].len=r-l+1,t[k].tag=-1;\n\tif(l==r){ int c=v[l]; t[k].sum=c;\n\t\tt[k].max[c]=t[k].lmax[c]=t[k].rmax[c]=1; return ;\n\t} int mid=l+r>>1; build(ls,l,mid),build(rs,mid+1,r),pushup(k);\n} void update(int k,int L,int R,int opt){\n\tif(L<=t[k].l&&t[k].r<=R) return chg(k,opt);\n\tint mid=t[k].l+t[k].r>>1; pushdown(k);\n\tif(L<=mid) update(ls,L,R,opt);\n\tif(R>mid) update(rs,L,R,opt); pushup(k);\n} int query(int k,int L,int R){\n\tif(L>t[k].r||t[k].l>R) return 0;\n\tif(L<=t[k].l&&t[k].r<=R) return t[k].sum;\n\tpushdown(k); int mid=t[k].l+t[k].r>>1;\n\treturn query(ls,L,R)+query(rs,L,R);\n} node query_mx(int k,int L,int R){\n\tif(L>t[k].r||t[k].l>R) return zero; //zero\u4f5c\u7528\u548c\u4ed6\u7684\u540d\u5b57\u4e00\u6837\uff0cmerge\u7684\u65f6\u5019\u5c31\u4e0d\u7b97\u8d21\u732e\u4e86\n\tif(L<=t[k].l&&t[k].r<=R) return t[k]; pushdown(k);\n\treturn merge(query_mx(ls,L,R),query_mx(rs,L,R));\n} int main(){ n=read(),m=read();\n\tfor(int i=1;i<=n;++i) v[i]=read();\n\tbuild(1,1,n);\n\tfor(int opt,l,r;m;--m){ //\u5904\u7406\u5404\u79cd\u64cd\u4f5c\n\t\topt=read(),l=read()+1,r=read()+1;\n\t\tif(opt<3) update(1,l,r,opt);\n\t\telse if(opt==3) print(query(1,l,r));\n\t\telse if(opt==4) print(query_mx(1,l,r).max[1]);\n\t} return Ot(),0;\n}\n```\n\n\n\u4e0d\u538b\u884c\u4e5f\u5c31\u4e00\u767e\u4e00\u4e8c\u5341\u884c\u5427\u3002\n",
        "postTime": 1541115281,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u4e00\u9053\u5751\u7239\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u7ef4\u62a47\u4e2a\u4fe1\u606f\uff0c\u533a\u95f4\u5de6\u53f3\u6bb5\u70b9\u503c\uff0c\u5de6\u53f3\u7aef\u70b9\u7684\u8fde\u7eed\u957f\u5ea6\uff0c\u533a\u95f4\u5185\u7684\u6700\u957f0\u4e32\u548c1\u4e32\u3002\u6ce8\u610f\u6807\u8bb0\u5408\u5e76\uff0c\u7ffb\u8f6c\u6807\u8bb0\u662fxor\u66f4\u65b0\u7684\u3002\u8986\u76d6\u6807\u8bb0\u9047\u4e0a\u7ffb\u8f6c\u6807\u8bb0\u662f\u6539\u8986\u76d6\u6807\u8bb0\u7c7b\u578b\u3002\u6216\u8005\u8986\u76d6\u3002\n\n    \n```cpp\n#include<bits/stdc++.h>\n#define sight(x) ('0'<=x&&x<='9')\n#define MID ((l+r)>>1)\n#define max(x,y) (x)>(y)?(x):(y) \n#define node No\n#define o(x) (x=(x&1)+1)\n#define L(x) ((x)<<1)\n#define R(x) ((x)<<1|1)\n#define La lazy\n#define N 400007\nusing namespace std;\ninline void read(int &x) {\n    static char c; static int b;\n    for (b=1,c=getchar();!sight(c);c=getchar()) if (c=='-') b=-1;\n    for (x=0;sight(c);c=getchar()) x=x*10+c-48;\n    x*=b;\n}\nstruct Node{\n    int sum,l,r,llen,rlen,ma[2],siz;\n    inline void add(Node x,Node y){\n        sum=x.sum+y.sum; siz=x.siz+y.siz;\n        l=x.l; r=y.r;\n        ma[0]=max(x.ma[0],y.ma[0]); ma[1]=max(x.ma[1],y.ma[1]);\n        if (x.r==y.l) ma[x.r]=max(ma[x.r],x.rlen+y.llen);\n        llen=x.llen; rlen=y.rlen;\n        if (x.llen==x.siz) llen=x.llen+((y.l==x.r)?y.llen:0);\n        if (y.rlen==y.siz) rlen=y.rlen+((y.l==x.r)?x.rlen:0);\n    }\n    inline void G1() {\n        sum=siz-sum;\n        l^=1,r^=1; swap(ma[0],ma[1]);\n    }\n    inline void L1(int x) {\n        sum=x?siz:0;\n        l=r=x; ma[x]=siz; ma[x^1]=0; llen=rlen=siz;\n    }\n}T[N],RR;\nint La[N],La1[N];\ninline void updata(int node){\n    if (La[No]) { La[L(No)]=La[R(No)]=La[No];\n    T[L(No)].L1(La[No]&1); La1[L(No)]=0;\n    T[R(No)].L1(La[No]&1); La1[R(No)]=0; La[No]=0; return;}\n    if (La1[No]) { \n    if (La[L(No)]) o(La[L(No)]),La1[L(No)]=0; else La1[L(No)]^=1;\n    if (La[R(No)]) o(La[R(No)]),La1[R(No)]=0; else La1[R(No)]^=1;\n    La1[No]=0; T[L(No)].G1(); T[R(No)].G1(); return;}\n}\nvoid build(int node,int l,int r){\n    if (l==r) {\n        read(T[node].sum);\n        T[node].l=T[node].r=T[node].sum;\n        T[node].llen=T[node].rlen=T[node].siz=1;\n        T[node].ma[T[node].sum]=1;\n        return;\n    }\n    build(L(No),l,MID); build(R(No),MID+1,r);\n    T[node].add(T[L(No)],T[R(No)]);\n}\nvoid change(int node,int l,int r,int L,int R,int col){\n    if (L<=l&&r<=R) {   int    XX=col&3;\n        if (XX) { La1[No]=0; La[No]=XX; T[No].L1(XX&1);}  \n        else { if (La[No]) o(La[No]),La1[No]=0; else La1[No]^=1; T[No].G1();\n        } return;\n    }\n    if (La[node]||La1[node]) updata(node);\n    if (R<=MID) change(L(No),l,MID,L,R,col); else\n    if (L> MID) change(R(No),MID+1,r,L,R,col); else\n    change(L(No),l,MID,L,MID,col),change(R(No),MID+1,r,MID+1,R,col);\n    T[No].add(T[L(No)],T[R(No)]);\n}\nNode query(int node,int l,int r,int L,int R){\n    if (L<=l&&r<=R) return T[node];\n    if (La[node]||La1[node]) updata(node);\n    if (R<=MID) return query(L(No),l,MID,L,R); \n    if (L> MID) return query(R(No),MID+1,r,L,R); \n    Node XX;\n    XX.add(query(L(No),l,MID,L,MID),query(R(No),MID+1,r,MID+1,R));\n    return XX;\n}\nvoid write(int x){\n    if (x<10) {putchar('0'+x);return;}write(x/10); putchar('0'+x%10);\n}\nint n,m,op,X,Y;\nint main () {\n    freopen(\"a.in\",\"r\",stdin);\n    read(n); read(m);\n    build(1,1,n);\n    while(m--) {\n        read(op); read(X); read(Y); X++; Y++;\n        switch (op){\n            case 0:change(1,1,n,X,Y,2); break;\n            case 1:change(1,1,n,X,Y,1); break;\n            case 2:change(1,1,n,X,Y,4); break;\n            case 3:RR=query(1,1,n,X,Y);write(RR.sum);putchar('\\n'); break;\n            case 4:RR=query(1,1,n,X,Y);write(RR.ma[1]);putchar('\\n'); break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1512717921,
        "uid": 53193,
        "name": "\u6b87\u96ea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2572 \u3010[SCOI2010]\u5e8f\u5217\u64cd\u4f5c\u3011"
    }
]