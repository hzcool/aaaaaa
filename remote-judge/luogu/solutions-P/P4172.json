[
    {
        "content": "\u4eba\u751f\u7b2c\u4e00\u9053\u6df1\u84dd\u9898~~\u5f53\u7136\u8981\u5199\u4e00\u4e0b\u9898\u89e3\u8fa3\uff01\n\n\n\n## \u9898\u610f\uff1a\n\n\u7ed9\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u8be2\u95eex\u5230y\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n2. \u5220\u53bb\u4e00\u6761\u8fb9\n\n\n\n## \u505a\u6cd5\uff1a\n\nlink-cut-tree\u901a\u5e38\u7528\u6765\u89e3\u51b3\u6811\u4e0a\u4e00\u4e9b\u52a8\u6001\u52a0\u8fb9\u3001\u5220\u8fb9\u7684\u95ee\u9898\u3002\n\n\u5982\u679c\u4e0d\u4f1alct\u53ef\u4ee5\u5148\u81ea\u5df1\u53bb\u5b66\u4e60\u4e00\u4e0b\uff0c\u6253\u51e0\u9053\u6a21\u677f~~\uff08bzoj\u4e0a\u5168\u662f~~\u3002\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u5927\u81f4\u5185\u5bb9\u3002\uff08\u4e0d\u8fc7\u5efa\u8bae\u8fd8\u662f\u81ea\u5df1\u53bb\u597d\u597d\u7406\u89e3\u6d88\u5316\u4e00\u4e0b\uff0c\u672c\u4eba\u521d\u5b66lct\u7684\u65f6\u5019\u4e5f\u662f\u7406\u89e3\u4e86\u597d\u4e45\u7684qwq\n\n\n\n> \u79f0\u4e00\u4e2a\u70b9\u88ab\u8bbf\u95ee\u8fc7, \u5982\u679c\u521a\u521a\u6267\u884c\u4e86\u5bf9\u8fd9\u4e2a\u70b9\u7684 ACCESS \u64cd\u4f5c.\n\n\n> \u5982\u679c\u7ed3\u70b9 v \u7684\u5b50\u6811\u4e2d, \u6700\u540e\u88ab\u8bbf\u95ee\u7684\u7ed3\u70b9\u5728\u5b50\u6811 w \u4e2d, \u8fd9\u91cc w \u662f v \u7684\u513f\u5b50, \u90a3\u4e48\u5c31\u79f0 w \u662f v \u7684 Preferred Child. \u5982\u679c\u6700\u540e\u88ab\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u5c31\u662f v \u672c\u8eab, \u90a3\u4e48\u5b83\u6ca1\u6709 Preferred Child. \u6bcf\u4e2a\u70b9\u5230\u5b83\u7684 Preferred Child \u7684\u8fb9\u79f0\u4f5c Preferred Edge. \u7531 Preferred Edge \u8fde\u63a5\u6210\u7684\u4e0d\u53ef\u518d\u5ef6\u4f38\u7684\u8def\u5f84\u79f0\u4e3a Preferred Path.\n\n\n> \u8fd9\u6837, \u6574\u68f5\u6811\u5c31\u88ab\u5212\u5206\u6210\u4e86\u82e5\u5e72\u6761 Preferred Path. \u5bf9\u6bcf\u6761 Preferred Path, \u7528\u8fd9\u6761\u8def\u4e0a\u7684\u70b9\u7684\u6df1\u5ea6\u4f5c\u4e3a\u5173\u952e\u5b57, \u7528\u4e00\u68f5\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u5b83(\u5728\u8fd9\u68f5\u5e73\u8861\u6811\u4e2d, \u6bcf\u4e2a\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u70b9, \u90fd\u5728 Preferred Path \u4e2d\u8fd9\u4e2a\u70b9\u7684\u4e0a\u65b9; \u53f3\u5b50\u6811\u4e2d\u7684\u70b9, \u90fd\u5728 Preferred Path \u4e2d\u8fd9\u4e2a\u70b9\u7684\u4e0b\u65b9). \u9700\u8981\u6ce8\u610f\u7684\u662f, \u8fd9\u79cd\u5e73\u8861\u6811\u5fc5\u987b\u652f\u6301\u5206\u79bb\u4e0e\u5408\u5e76. \u8fd9\u91cc, \u6211\u4eec\u9009\u62e9 Splay Tree \u4f5c\u4e3a\u8fd9\u4e2a\u5e73\u8861\u6811\u7684\u6570\u636e\u7ed3\u6784. \u6211\u4eec\u628a\u8fd9\u68f5\u5e73\u8861\u6811\u79f0\u4e3a\u4e00\u68f5 Auxiliary Tree.\n\n\n> \u77e5\u9053\u4e86\u6811 T \u5206\u89e3\u6210\u7684\u8fd9\u82e5\u5e72\u6761 Preferred Path, \u6211\u4eec\u53ea\u9700\u8981\u518d\u77e5\u9053\u8fd9\u4e9b\u8def\u5f84\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb, \u5c31\u53ef\u4ee5\u8868\u793a\u51fa\u8fd9\u68f5\u6811 T . \u7528 Path Parent \u6765\u8bb0\u5f55\u6bcf\u68f5 Auxiliary Tree \u5bf9\u5e94\u7684 Preferred Path \u4e2d\u7684\u6700\u9ad8\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9,\u5982\u679c\u8fd9\u4e2a Preferred Path \u7684\u6700\u9ad8\u70b9\u5c31\u662f\u6839\u7ed3\u70b9, \u90a3\u4e48\u4ee4\u8fd9\u68f5 Auxiliary Tree \u7684 Path Parent \u4e3a null.\n\n\n> Link-Cut Trees \u5c31\u662f\u5c06\u8981\u7ef4\u62a4\u7684\u68ee\u6797\u4e2d\u7684\u6bcf\u68f5\u6811 T \u8868\u793a\u4e3a\u82e5\u5e72\u4e2a Auxiliary Tree, \u5e76\u901a\u8fc7 Path Parent \u5c06\u8fd9\u4e9b Auxiliary Tree \u8fde\u63a5\u8d77\u6765\u7684\u6570\u636e\u7ed3\u6784. \n\nlct\u7684\u4e3b\u8981\u64cd\u4f5c\u57fa\u4e8eACCESS\u64cd\u4f5c\uff0c\u6765\u770b\u4e00\u4e0bACCESS\u64cd\u4f5c\u7684\u6d41\u7a0b\uff1a\n\n> ACCESS \u64cd\u4f5c\u662f Link-Cut Trees \u7684\u6240\u6709\u64cd\u4f5c\u7684\u57fa\u7840. \u5047\u8bbe\u8c03\u7528\u4e86\u8fc7\u7a0b ACCESS(v), \u90a3\u4e48\u4ece\u70b9 v \u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u5c31\u6210\u4e3a\u4e00\u6761\u65b0\u7684 Preferred Path. \u5982\u679c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u67d0\u4e2a\u7ed3\u70b9 u \u5e76\u4e0d\u662f\u5b83\u7684\u7236\u4eb2 parent(u) \u7684 Preferred Child, \u90a3\u4e48\u7531\u4e8e parent(u) \u7684 Preferred Child \u4f1a\u53d8\u4e3a u , \u539f\u672c\u5305\u542b parent(u) \u7684 Preferred Path \u5c06\u4e0d\u518d\u5305\u542b\u7ed3\u70b9 parent(u) \u53ca\u5176\u4e4b\u4e0a\u7684\u90e8\u5206. \n\n\n> \u9996\u5148, \u7531\u4e8e\u8bbf\u95ee\u4e86\u70b9 v, \u90a3\u4e48\u5b83\u7684 Preferred Child \u5e94\u5f53\u6d88\u5931. \u5148\u5c06\u70b9 v \u65cb\u8f6c\u5230\u5b83\u6240\u5c5e\u7684 Auxiliary Tree \u7684\u6839, \u5982\u679c v \u5728 v \u6240\u5c5e\u7684 Auxiliary Tree \u4e2d\u6709\u53f3\u513f\u5b50(\u4e5f\u5c31\u662f v \u539f\u6765\u7684 Preferred Child), \u90a3\u4e48\u5e94\u8be5\u5c06 v \u5728 v \u6240\u5c5e\u7684 Auxiliary Tree \u4e2d\u7684\u53f3\u5b50\u6811(\u5bf9\u5e94\u7740\u5b83\u7684\u539f\u6765\u7684 Preferred Child \u4e4b\u4e0b\u7684 Preferred Path)\u4ece v \u6240\u5c5e\u7684 Auxiliary Tree \u4e2d\u5206\u79bb, \u5e76\u8bbe\u7f6e\u8fd9\u4e2a\u65b0\u7684 Auxiliary Tree \u7684 Path Parent \u4e3a v.\u7136\u540e, \u5982\u679c\u70b9 v \u6240\u5c5e\u7684 Preferred Path \u5e76\u4e0d\u5305\u542b\u6839\u7ed3\u70b9, \u8bbe\u5b83\u7684 Path Parent \u4e3a u, \u90a3\u4e48\u9700\u8981\u5c06 u \u65cb\u8f6c\u5230 u \u6240\u5c5e\u7684 Auxiliary Tree \u7684\u6839, \u5e76\u7528\u70b9 v \u6240\u5c5e\u7684 Auxiliary Tree \u66ff\u6362\u5230\u70b9 u \u6240\u5c5e\u7684 Auxiliary Tree \u4e2d\u70b9 u \u7684\u53f3\u5b50\u6811, \u518d\u5c06\u539f\u6765\u70b9 u \u6240\u5c5e\u7684 Auxiliary Tree \u4e2d\u70b9 u \u7684\u53f3\u5b50\u6811\u7684 Path Parent \u8bbe\u7f6e\u4e3a u. \u5982\u6b64\u64cd\u4f5c,\u76f4\u5230\u5230\u8fbe\u5305\u542b\u6839\u7ed3\u70b9\u7684 Preferred Path. \n\n\u2014\u2014\u4ee5\u4e0a\u6240\u6709\u5f15\u7528\u90e8\u5206\u6765\u6e90\u4e8e`yang zhe`\u7684\u300aQTREE \u89e3\u6cd5\u7684\u4e00\u4e9b\u7814\u7a76\u300b\u8bba\u6587\u3002\n\n\n\n\u4e8e\u662f\u5404\u79cd\u8fde\u8fb9\u3001\u5220\u8fb9\u3001\u6362\u6839\u64cd\u4f5c\u5c31\u53ef\u4ee5\u6267\u884c\u4e86\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\n\n------\n\n\n\n\u7136\u540e\u6211\u4eec\u6765\u8003\u8651\u8fd9\u9053\u9898\u3002\n\n\n\n\u6211\u4eec\u53d1\u73b0\u5220\u8fb9\u7279\u522b\u96be\u5904\u7406\uff0c\u90a3\u4e48\u600e\u6837\u8f6c\u5316\u4e00\u4e0b\u5462\uff1f\u5012\u7740\u5904\u7406\u6240\u6709\u8be2\u95ee\uff0c\u4e8e\u662f\u5220\u8fb9\u53d8\u6210\u4e86\u52a0\u8fb9\u3002\u7136\u540e\u67e5\u8be2\u6240\u6709\u8def\u5f84\u4e0a\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c\u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u8981\u7ef4\u62a4\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e86\uff0c\u4e5f\u53ef\u4ee5\u7528lct\u505a\u5230\u3002\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86**\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811**\u3002\n\n\u6211\u4eec\u6b64\u65f6\u5df2\u7ecf\u5c06\u8be2\u95ee\u5012\u8fc7\u6765\u5904\u7406\u4e86\uff0c\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u597d\u4e86\u4e00\u68f5mst\uff0c\u6bcf\u52a0\u4e00\u6761\u8fb9u-v\uff0c\u80af\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a**\u73af**\u3002\u56e0\u4e3a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u8981\u5728\u73af\u4e0a\u53bb\u6389\u4e00\u6761\u6700\u5927\u7684\u8fb9\u3002\u4e8e\u662f\u5904\u7406\u52a0\u8fb9\u64cd\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n> 1. \u67e5\u8be2u-v\u94fe\u4e0a\u6700\u5927\u8fb9\u6743mx\n> 2. \u6bd4\u8f83\u65b0\u52a0\u7684\u8fb9\u6743w\u548cmx\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c $w>mx$ \uff0c\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b\u5426\u5219\u5220\u53bb\u8fb9\u6743\u4e3amx\u7684\u8fb9(cut)\uff0c\u52a0\u4e0au-v\u8fd9\u6761\u8fb9(link)\u3002\n\n\u90a3\u4e48\u67e5\u8be2\u5c31\u76f4\u63a5\u67e5\u94fe\u4e0a\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\n\n------\n\n\n\n\u81f3\u6b64\uff0c\u6b64\u9898\u5927\u81f4\u6d41\u7a0b\u5df2\u7ecf\u7ed3\u675f\u3002\n\n\u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\uff1a\n\n1. \u5728\u4fdd\u5b58mx\u7684\u65f6\u5019\u9700\u8981\u5b58\u7684\u662f\u8fb9\u7684\u7f16\u53f7\uff0c\u56e0\u4e3a\u5230\u65f6\u52a0\u8fb9\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u3002\n2. \u4f60\u53d1\u73b0lct\u4f3c\u4e4e\u53ea\u80fd\u5904\u7406\u94fe\u4e0a\u6700\u5927\u70b9\u6743\u800c\u65e0\u6cd5\u4fdd\u5b58\u8fb9\u6743\u3002\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651 **\u628a\u8fb9\u770b\u6210\u70b9** \uff0c\u52a0\u4e00\u6761\u8fb9u-v\uff0c\u7f16\u53f7\u4e3aid\uff0c\u5219 `link(u, id); link(v, id);` \uff1b\u5220\u8fb9\u540c\u7406\u3002\n3. \u5728\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u9700\u8981\u627e\u5230\u67d0\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2amap\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\u3002\n\n\n\n## \u4ee3\u7801\uff1a\n\n\u597d\u8fa3\u597d\u8fa3\u6ce5\u840c\u662f\u4e0d\u662f\u5df2\u7ecf\u6025\u7740\u60f3\u770b\u4ee3\u7801\u8fa3qwqwq\n\n\u90a3\u63a5\u4e0b\u6765\u5c31\u662f\u770b~~\u819c~~\u4ee3\u7801\u65f6\u95f4~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<cmath>\n#include<cstdlib>\n#include<cctype>\n#include<map>\n#define mp make_pair\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll read() {\n\tchar ch = getchar(); ll x = 0; int op = 1;\n\tfor(; !isdigit(ch); ch = getchar()) if(ch == '-') op = -1;\n\tfor(; isdigit(ch); ch = getchar()) x = x*10+ch-'0';\n\treturn x*op;\n}\ninline void write(ll a) {\n\tif(a < 0) putchar('-'), a = -a;\n\tif(a >= 10) write(a/10); putchar('0'+a%10);\n}\nconst int N = 100010, M = 1000010;\nint n, m, que;\nint ans[N];\nbool vis[M];\nmap<pii, int> id;\nstruct edge { int x, y, z; } e[M];\nstruct questions { int opt, x, y, flag; } q[N];\nconst bool cmp(const edge &a, const edge &b) { return a.z < b.z; }\nconst int S = N+M;\nint rev[S], fa[S], c[S][2], mx[S], val[S];\ninline bool isroot(int x) { return c[fa[x]][0] != x && c[fa[x]][1] != x; }\ninline void pushup(int x) {\n\tmx[x] = val[x];\n\tif(e[mx[c[x][0]]].z > e[mx[x]].z) mx[x] = mx[c[x][0]];\n\tif(e[mx[c[x][1]]].z > e[mx[x]].z) mx[x] = mx[c[x][1]];\n}\ninline void rot(int x) {\n\tif(isroot(x)) return;\n\tint y = fa[x], z = fa[y], f = c[y][1] == x;\n\tc[y][f] = c[x][f^1]; if(c[x][f^1]) fa[c[x][f^1]] = y;\n\tfa[x] = z; if(!isroot(y)) c[z][c[z][1] == y] = x;\n\tfa[y] = x; c[x][f^1] = y;\n\tpushup(y); pushup(x);\n}\ninline void pushdown(int x) {\n\tif(!rev[x]) return;\n\trev[c[x][0]] ^= 1; rev[c[x][1]] ^= 1; swap(c[x][0], c[x][1]);\n\trev[x] = 0;\n}\nint st[N], top;\ninline void pushtag(int x) {\n\ttop = 0;\n\twhile(x) { st[++ top] = x; x = fa[x]; }\n\twhile(top) pushdown(st[top --]);\n}\ninline void splay(int x) {\n\tpushtag(x);\n\twhile(!isroot(x)) {\n\t\tint y = fa[x], z = fa[y];\n\t\tif(!isroot(y)) rot(((c[z][0] == y) == (c[y][0] == x))?y:x);\n\t\trot(x);\n\t}\n}\ninline void access(int x) {\n\tint t = 0;\n\twhile(x) {\n\t\tsplay(x); c[x][1] = t; pushup(x);\n\t\tt = x; x = fa[x];\n\t}\n}\ninline void rever(int x) { access(x); splay(x); rev[x] ^= 1; }\ninline void link(int x, int y) { rever(x); fa[x] = y; }\ninline void split(int x, int y) { rever(x); access(y); splay(y); }\ninline void cut(int x, int y) { split(x, y); fa[x] = c[y][0] = 0; }\ninline int find(int x) {\n\taccess(x); splay(x); pushdown(x);\n\twhile(c[x][0]) { x = c[x][0]; pushdown(x); }\n\treturn x;\n}\ninline void init(int x, int y) {\n\tfa[x] = c[x][0] = c[x][1] = rev[x] = 0;\n\tmx[x] = val[x] = y;\n}\nint main() {\n\t/*freopen(\"tube.in\", \"r\", stdin);\n\tfreopen(\"tube.out\", \"w\", stdout);*/\n\tn = read(), m = read(), que = read();\n\tfor(int i = 1; i <= m; i ++) {\n\t\te[i].x = read(); e[i].y = read(); e[i].z = read();\n\t\tif(e[i].x > e[i].y) swap(e[i].x, e[i].y);\n\t}\n\tsort(e+1, e+1+m, cmp);\n\tfor(int i = 1; i <= m; i ++) id[mp(e[i].x, e[i].y)] = i;\n\tfor(int i = 1; i <= que; i ++) {\n\t\tq[i].opt = read(); q[i].x = read(); q[i].y = read();\n\t\tif(q[i].x > q[i].y) swap(q[i].x, q[i].y);\n\t\tif(q[i].opt == 2) {\n\t\t\tint d = id[mp(q[i].x, q[i].y)];\n\t\t\tq[i].flag = d;//flag\u8868\u793aq[i]\u8fd9\u6761\u8fb9\u5728e\u4e2d\u7684\u7f16\u53f7 \n\t\t\tvis[d] = 1;\n\t\t}\n\t}\n\tint all = n+m, sum = 0; e[0].z = 0;\n\tfor(int i = 1; i <= all; i ++) init(i, i<=n?0:(i-n));\n\tfor(int i = 1, x, y; i <= m; i ++) if(!vis[i]) {\n\t\tif(sum == n-1) break;\n\t\tx = e[i].x; y = e[i].y;\n\t\tif(find(x) == find(y)) continue;\n\t\tlink(x, i+n); link(y, i+n);\n\t\tsum ++;\n\t}\n\tfor(int i = que, x, y; i >= 1; i --) {\n\t\tx = q[i].x; y = q[i].y;\n\t\tif(q[i].opt == 1) {\n\t\t\tsplit(x, y); ans[i] = e[mx[y]].z;\n\t\t} else {\n\t\t\tsplit(x, y);\n\t\t\tint d = q[i].flag, t = mx[y];\n\t\t\tif(e[d].z < e[mx[y]].z) {\n\t\t\t\tcut(e[t].x, t+n); cut(e[t].y, t+n);\n\t\t\t\tlink(x, d+n); link(y, d+n);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= que; i ++) if(q[i].opt == 1) write(ans[i]), puts(\"\");\n\treturn 0;\n}\n```\n\n\n\n**\u540e\u8bdd\uff1a**\n\nemmm\u6211\u5199\u4e86\u8fd9\u4e48\u591a\u4e5f\u662f\u633a\u7d2f\u7684\uff0c\u6ce5\u840c\u89c9\u5f97\u597d\u7684\u8bdd\u4e00\u5b9a\u8981\u5179\u74f7\u4e00\u4e0b\u55f7\uff01\u8d5e\u4e00\u4e0b\u5f88\u5feb\u7684\u55f7~qwqwqwq\n\n\u4e5f\u9f13\u52b1\u6211\u4e00\u4e0b\u4ee5\u540e\u80fd\u7ee7\u7eed\u5199\u597d\u7684\u9898\u89e3\uff01\n\n\u6709\u4ec0\u4e48\u7f3a\u70b9\u4e5f\u5c3d\u7ba1\u63d0\u51fa\u6765~\u6b22\u8fce\u7684\u55f7~\n",
        "postTime": 1518074799,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "**\u6211\u7684\u535a\u5ba2\uff1a[\u4f20\u9001\u95e8](https://www.wjyyy.top/2956.html)**\n\n## \u9898\u89e3\uff1a\n\n\u8fd9\u4e2a\u9898\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u56fe\u800c\u4e0d\u662f\u4e00\u68f5\u6811\uff0c\u770b\u4f3c\u4e0d\u80fd\u7528LCT\u5199\u3002\u4f46\u662f\u8fd9\u662fLCT\u7684\u4e00\u4e2a\u7528\u6cd5\u2014\u2014\u7ef4\u62a4\u751f\u6210\u6811\u3002\n\n---\n\n\u56e0\u4e3a\u672c\u9898\u8981\u6c42\u51fa**\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c**\uff0c\u53ef\u80fd\u4f1a\u60f3\u5230[\u8d27\u8f66\u8fd0\u8f93](https://www.luogu.org/problemnew/show/P1967)\u7684\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u5e76\u7ef4\u62a4\u751f\u6210\u6811\u3002\u7136\u800c\u8fd8\u9700\u8981\u52a8\u6001\u5220\u8fb9\uff0c\u4e07\u4e00\u5220\u6389\u4e86\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u603b\u4e0d\u80fd\u518d\u505a\u4e00\u904d\u751f\u6210\u6811\u5427\uff1f\n\n\u4f46\u662f\u8fd9\u4e2a\u9898\u53ea\u6709\u5220\u8fb9\uff0c\u56e0\u6b64\u8fc7\u7a0b\u662f**\u5355\u8c03\u7684**\uff0c\u56e0\u6b64\u628a\u5b83\u5012\u8fc7\u6765\u5c31\u662f\u52a0\u8fb9\u3002\u52a0\u8fb9\u7406\u8bba\u4e0a\u5c31\u597d\u505a\u4e00\u4e9b\u4e86\u3002\n\n\u56e0\u4e3a\u4fdd\u8bc1\u4e86\u201c\u4efb\u4f55\u65f6\u5019\u6211\u4eec\u8003\u8651\u7684\u6c34\u7ba1\u7f51\u7edc\u90fd\u662f\u8fde\u901a\u7684\u201d\uff0c\u6240\u4ee5\u5148\u628a\u56fe\u5220\u5230\u6700\u540e\uff0c\u4e0d\u505a\u4efb\u4f55\u67e5\u8be2\u64cd\u4f5c\uff0c\u8fd9\u4e00\u70b9\u53c8\u6709\u70b9\u50cf[\u822a\u7ebf\u89c4\u5212](https://www.luogu.org/problemnew/show/P2542)\u4e00\u9898\u4e86\uff08\u8fd9\u9898\u4ee5\u524d\u662f\u7528[\u6811\u5256\u6c34\u8fc7\u53bb\u7684](https://www.wjyyy.top/895.html)\uff0c\u4e5f\u662f\u5148\u628a\u8fb9\u5220\u5b8c\uff09\u3002\n\n\u6b64\u65f6\u6211\u4eec\u6c42\u51fa\u6b8b\u4f59\u56fe\u4e0a\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u53ea\u8981\u6cbf\u7740\u8fd9\u68f5MST\u4e0a\u8d70\uff0c\u5c31\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u8d2a\u5fc3\u3002\n\n\u62ffLCT\u7ef4\u62a4\u8fd9\u68f5\u751f\u6210\u6811\uff0csplay\u4e0a\u7684\u70b9\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u6700\u5927\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u6761\u94fe\u7684\u6700\u5927\u6743\u503c\u3002\n\n\u4e4b\u540e\u8003\u8651\u52a0\u8fb9\uff0c\u4e5f\u5c31\u662f\u52a8\u6001\u7684MST\u4e86\uff0c\u987a\u7740\u4e0a\u9762\u8d2a\u5fc3\u7684\u601d\u8def\u60f3\uff0c\u5982\u679c\u5728\u6811\u4e0a\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u6b64\u65f6\u4ece\u4efb\u610f\u4e00\u70b9\u8fdb\u5165\u73af\uff0c\u4ece\u53e6\u4e00\u70b9\u51fa\u73af\uff0c\u53ef\u4ee5\u4ece\u73af\u4e0a\u4e24\u4e2a\u65b9\u5411\u8d70\uff0c\u90a3\u4e48\u6700\u4f18\u89e3\u603b\u53ef\u4ee5\u907f\u5f00\u6700\u957f\u7684\u4e00\u6761\u8fb9\u3002\n\n![](http://www.wjyyy.top/wp-content/uploads/2019/01/201901031739.png)\n\n\u6bd4\u5982\u8bf4\u4ece$E$\u5230$D$\uff0c\u6700\u4f18\u7684\u8def\u5f84\u662f$E-C-A-B-D$\uff0c\u8def\u5f84\u6700\u5927\u503c\u4e3a$7$\uff0c\u800c$E-F-D$\u6700\u5927\u503c\u4e3a$8$\u3002\u90a3\u4e48$D-F$\u8fd9\u6761\u8fb9\u53ef\u4ee5\u5220\u6389\uff0c\u539f\u56e0\u662f\u6700\u4f18\u89e3\u603b\u4e0d\u5fc5\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\n\n\u90a3\u4e48\u5047\u8bbe$E-F$\u8fd9\u6761\u8fb9\u662f\u65b0\u52a0\u8fdb\u6765\u7684\uff0c\u539f\u6765\u7684\u56fe\u662f\u8fd9\u6837\uff08\u201c\u73af\u201d\u4e0a\u7684\u70b9\u8fd8\u8fde\u63a5\u6709\u5176\u4ed6\u7684\u8fb9\uff0c\u4f46\u4fdd\u8bc1\u662f\u4e00\u68f5\u6811\uff09\n\n![](http://www.wjyyy.top/wp-content/uploads/2019/01/201901031745.png)\n\n\u6211\u4eec\u73b0\u5728\u53ea\u5173\u6ce8\u8fd9\u4e2a\u201c\u73af\u201d\uff0c\u5148\u7528`split(E,F)`\u628a$E-F$\u8fd9\u6761**\u94fe**\u7684\u4fe1\u606f\u63d0\u53d6\u51fa\u6765\u3002\u6b64\u65f6\u53ef\u4ee5\u67e5\u8be2\u51fa\u94fe\u4e0a\u7684\u6700\u5927\u6743\u503c$8$\uff0c\u4e0e\u5373\u5c06\u52a0\u5165\u7684$3$\u8fdb\u884c\u6bd4\u8f83\u3002\u53d1\u73b0$3<8$\u3002\u8bf4\u660e\u8fd9\u4e2a\u73af\u4e0a\u53ef\u4ee5\u5220\u6389\u6743\u503c\u6700\u5927\u7684\u8fb9\u6765\u4fdd\u8bc1\u6700\u4f18\uff0c\u90a3\u4e48\u5728\u5e73\u8861\u6811\u4e0a\u201c\u4e8c\u5206\u201d\u51fa\u8fd9\u6761\u8fb9\uff0c\u6765\u5220\u9664\u5b83\u3002\u5982\u679c\u5373\u5c06\u52a0\u5165\u7684\u8fb9\u6743\u6bd4\u6574\u6761\u94fe\u4e0a\u7684\u6700\u5927\u503c\u8fd8\u5927\uff0c\u90a3\u4e48\u76f4\u63a5\u5ffd\u7565\u8fd9\u4e2a\u64cd\u4f5c\u3002\n\n\u4e0a\u9762\u63d0\u5230\u7684\u201c\u4e8c\u5206\u201d\u5b9e\u9645\u4e0a\u662f\u5728\u5e73\u8861\u6811\u4e0a\u67e5\u627e\u3002\u5982\u679c\u53d1\u73b0\u6839\u8282\u70b9\u7684\u503c\u5c31\u662f\u6240\u8981\u7684\u503c\uff0c\u5c31\u8fd4\u56de\u6839\u8282\u70b9\uff0c\u5426\u5219\u54ea\u68f5\u5b50\u6811\u4e2d\u6709\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u5c31\u8fdb\u54ea\u68f5\u5b50\u6811\uff0c\u8fd9\u4e00\u6b65\u590d\u6742\u5ea6\u5747\u644a$O(\\log n)$\u3002\n\n\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5`split()`\u7136\u540e\u67e5\u8be2\u94fe\u7684\u4fe1\u606f\u5c31\u597d\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u662f\u5982\u4f55\u7ef4\u62a4\u8fb9\uff0c\u8fd9\u65f6\u4e0d\u80fd\u50cf\u6811\u5256\u90a3\u6837\u7ef4\u62a4\u5230\u7236\u4eb2\u7684\u8fb9\u4e86\u3002\u56e0\u4e3aLCT\u6bd4\u8f83\u7075\u6d3b\uff0c\u6240\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u70b9\u6765\u4ee3\u8868\u4e00\u6761\u8fb9\u3002\u6bd4\u5982\u8bf4\u6211\u8981\u8fde\u63a5\u539f\u56fe\u4e0a\u7684$1,2$\u4e24\u70b9\uff0c\u628a\u8fd9\u6761\u8fb9\u547d\u540d\u4e3a$A$\uff08$A$\u5728\u7a0b\u5e8f\u4e2d\u8fd8\u662f\u4f1a\u7528\u6570\u5b57\u6765\u8868\u793a\u7684\uff09\uff0c\u6743\u503c\u4e3a$4$\u3002\n\n![](http://www.wjyyy.top/wp-content/uploads/2019/01/201901031856.png)\n\n\u5c31\u628a$1,2$\u4e0e$A$\u5206\u522b\u8fde\u63a5\u8d77\u6765\u3002$A$\u5728\u6574\u5f20\u56fe\u4e2d\u59cb\u7ec8\u53ea\u4e0e$1,2$\u8fd9\u4e24\u4e2a\u70b9\u76f8\u8fde\uff0c\u8fb9\u6743\u5728LCT\u4e0a\u8868\u793a\u4e3a\u70b9\u6743\u3002\u539f\u56fe\u4e0a\u7684\u70b9\u70b9\u6743\u4e3a$0$\uff08\u5982\u679c\u8981\u6c42\u6700\u5c0f\u503c\u539f\u56fe\u4e0a\u7684\u70b9\u5e94\u8be5\u8bbe\u4e3a$+\\infty$\uff09\u3002\n\n\u7136\u540e\u5012\u5e8f**\u52a0\u8fb9**\uff0c\u518d\u628a\u7b54\u6848\u5012\u8fc7\u6765\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## Code\uff1a\n\n\u4ee3\u7801\u5e76\u6ca1\u6709\u4ec0\u4e48\u6ce8\u91ca\uff0c\u5e0c\u671bdalao\u4eec\u628a\u601d\u60f3\u7406\u89e3\u540e\u505a\u9898\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ls ch[0][k]\n#define rs ch[1][k]\n#define which(k) (ch[1][fa[k]]==k)\n#define isroot(k) (ch[0][fa[k]]!=k&&ch[1][fa[k]]!=k)\nusing std::max;\nint ch[2][120000],fa[120000];\nint key[120000],sum[120000],lazy[120000];\nvoid maintain(int k)\n{\n    sum[k]=max(max(sum[ls],key[k]),sum[rs]);\n}\nvoid pushdown(int k)\n{\n    if(lazy[k])\n    {\n        int tmp=ls;\n        ls=rs;\n        rs=tmp;\n        lazy[k]=0;\n        lazy[ls]^=1;\n        lazy[rs]^=1;\n    }\n}\nvoid Rotate(int k)\n{\n    int y=fa[k];\n    if(!isroot(y))\n        ch[which(y)][fa[y]]=k;\n    bool d=which(k);\n    fa[k]=fa[y];\n    fa[y]=k;\n    ch[d][y]=ch[!d][k];\n    fa[ch[d][y]]=y;\n    ch[!d][k]=y;\n    maintain(y);\n    maintain(k);\n}\nint stk[120000],tp=0;\nvoid splay(int k)\n{\n    int x=k;\n    while(!isroot(x))\n    {\n        stk[++tp]=x;\n        x=fa[x];\n    }\n    stk[++tp]=x;\n    while(tp)\n        pushdown(stk[tp--]);\n\n    while(!isroot(k))\n    {\n        int y=fa[k];\n        if(!isroot(y))\n            Rotate(which(k)^which(y)?k:y);\n        Rotate(k);\n    }\n}\nvoid access(int k)\n{\n    for(int x=k,y=0;x;y=x,x=fa[x])\n    {\n        splay(x);\n        ch[1][x]=y;\n        maintain(x);\n    }\n}\nvoid makeroot(int k)\n{\n    access(k);\n    splay(k);\n    lazy[k]^=1;\n}\nvoid split(int x,int y)\n{\n    makeroot(x);\n    access(y);\n    splay(y);\n}\nvoid link(int x,int y)\n{\n    makeroot(x);\n    fa[x]=y;\n}\nvoid cut(int x,int y)\n{\n    makeroot(x);\n    access(y);\n    splay(y);\n    fa[x]=ch[0][y]=0;\n}\nint Find(int k,int x)\n{\n    if(key[k]==x)\n        return k;\n    if(sum[ls]==x)\n        return Find(ls,x);\n    return Find(rs,x);\n}\nint f[1010][1010],U[101000],V[101000],op[101000];\nint n,m,q;\nstruct edge\n{\n    int x,y,v,ava;\n    edge(){ava=1;}\n    friend bool operator <(edge a,edge b)\n    {\n        return a.v<b.v;\n    }\n}e[101000];\nint s[1010];\nint Find(int x)\n{\n    if(s[x]!=x)\n        return s[x]=Find(s[x]);\n    return x;\n}\nvoid Union(int x,int y)\n{\n    s[Find(x)]=Find(y);\n}\nvoid mst()\n{\n    for(int i=1;i<=n;++i)\n        s[i]=i;\n    for(int i=1;i<=m;++i)\n        if(e[i].ava&&Find(e[i].x)!=Find(e[i].y))\n        {\n            Union(e[i].x,e[i].y);\n            link(e[i].x,n+i);\n            link(e[i].y,n+i);\n        }\n}\nint ans[101000];\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=1;i<=m;++i)\n        scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].v);\n    std::sort(e+1,e+1+m);\n    for(int i=1;i<=m;++i)\n    {\n        f[e[i].x][e[i].y]=f[e[i].y][e[i].x]=i;\n        key[n+i]=e[i].v;\n    }\n    for(int i=1;i<=q;++i)\n    {\n        scanf(\"%d%d%d\",&op[i],&U[i],&V[i]);\n        if(op[i]==2)\n            e[f[U[i]][V[i]]].ava=0;\n    }\n    mst();\n    int cnt=0;\n    for(int i=q;i>=1;--i)\n    {\n        split(U[i],V[i]);//V[i]\u662f\u6839\n        if(op[i]==1)\n            ans[++cnt]=sum[V[i]];\n        else\n        {\n            int t=Find(V[i],sum[V[i]]);\n            if(key[f[U[i]][V[i]]+n]<sum[V[i]])\n            {\n                cut(e[t-n].x,t);\n                cut(e[t-n].y,t);\n                link(U[i],f[U[i]][V[i]]+n);\n                link(V[i],f[U[i]][V[i]]+n);\n            }\n        }\n    }\n    for(int i=cnt;i>=1;--i)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1546515280,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u662f\u8981\u6c42\u4e00\u4e2a\u6811\u94fe\u4e0a\u6700\u5927\u503c\u6700\u5c0f\u3002\n\n\n\u8003\u8651Kruskal\u7b97\u6cd5\u6d41\u7a0b\uff0c\u53d1\u73b0\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\n\u90a3\u4e48\u5c31\u8981\u7ef4\u62a4\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\n\u6b63\u5e8f\u5220\u8fb9\u53ef\u4ee5\u79bb\u7ebf\u53cd\u5411\u64cd\u4f5c\uff0c\u53d8\u6210\u52a0\u8fb9\u3002\n\n\n\u90a3\u4e48\u5728\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u65ad\u5f00\u6362\u4e0a\u6700\u5927\u7684\u8fb9\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u9897\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7528LCT\u7ef4\u62a4\u3002\n\n\n\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#define N 1500000\n#include<cstdio>\nusing namespace std;\nint re[N],c[N][2],mx[N],val[N],fa[N];\nint s[N],top;\n\nbool isroot(int now)\n{\n    return !fa[now]||(c[fa[now]][0]!=now&&c[fa[now]][1]!=now);\n}\nvoid down(int now)\n{\n    if(re[now])\n    {\n        re[now]^=1;\n        re[c[now][0]]^=1;\n        re[c[now][1]]^=1;\n        swap(c[now][0],c[now][1]);\n    }\n}\nvoid update(int now)\n{\n    mx[now]=now;\n    if(val[ mx[c[now][0]] ]>val[mx[now]]) mx[now]=mx[c[now][0]];\n    if(val[ mx[c[now][1]] ]>val[mx[now]]) mx[now]=mx[c[now][1]];\n}\nvoid rotate(int now)\n{\n    int F=fa[now],Y=fa[F];\n    int r=c[F][0]==now,l=r^1;\n    \n    if(!isroot(F)) if(c[Y][0]==F) c[Y][0]=now;else c[Y][1]=now;\n    \n    fa[now]=Y;fa[F]=now;\n    c[F][l]=c[now][r];\n    fa[c[now][r]]=F;\n    c[now][r]=F;\n    update(F); \n    update(now);\n}\nvoid splay(int now)\n{\n    s[top=1]=now;\n    for(int i=now;!isroot(i);i=fa[i]) s[++top]=fa[i];\n    while(top) down(s[top--]);\n    while(!isroot(now))\n    {\n        int F=fa[now],Y=fa[F];\n        if(!isroot(F))\n        {\n            if((c[Y][0]==F)^(c[F][0]==now)) rotate(now);\n            else rotate(F);\n        }\n        rotate(now);\n    }\n}\nvoid access(int now)\n{\n    int last=0;\n    while(now) splay(now),c[now][1]=last,update(now),last=now,now=fa[now];\n}\n\nvoid makeroot(int x)\n{\n    access(x);splay(x);re[x]^=1;\n}\nvoid link(int x,int y)\n{\n    makeroot(x);fa[x]=y;\n}\nvoid cut(int x,int y)\n{\n    makeroot(x);access(y);splay(y);fa[x]=c[y][0]=0;\n}\nint query(int x,int y)\n{\n    makeroot(x);access(y);splay(y);return mx[y];\n}\n\n\nstruct eage\n{\n    int u,v,l,id;\n    bool po;\n}e[N];\nstruct node\n{\n    int x,y,ans,id,fl; \n}q[N];\nint n,m,Q;\n\nbool comp1(eage aa,eage bb)\n{\n    return aa.u==bb.u?aa.v<bb.v:aa.u<bb.u;\n}\nbool comp2(eage aa,eage bb)\n{\n    return aa.l<bb.l;\n}\nbool comp3(eage aa,eage bb)\n{\n    return aa.id<bb.id;\n}\nint findit(int u,int v)\n{\n    int l=1,r=m;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(e[mid].u<u||(e[mid].u==u&&e[mid].v<v))l=mid+1;\n        else if(e[mid].u==u&&e[mid].v==v)return mid;\n        else r=mid-1;\n    }\n}\nint f[N];\nint get_f(int now)\n{\n    return now==f[now]?f[now]:f[now]=get_f(f[now]);\n}\nvoid KU()\n{\n    for(int i=1;i<=n;++i) f[i]=i;\n    sort(e+1,e+m+1,comp3);\n    int tot=0;\n    for(int i=1;i<=m;++i)\n    {\n        if(e[i].po) continue; \n        int x=get_f(e[i].u),y=get_f(e[i].v);\n        if(x==y) continue;\n        tot++;\n        f[x]=y;\n        link(e[i].u,i+n);\n        link(e[i].v,i+n);\n        if(tot==n-1) return;\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&Q);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].l);\n        if(e[i].u>e[i].v) swap(e[i].u,e[i].v);\n    }\n    //buid\n    sort(e+1,e+m+1,comp2);\n    for(int i=1;i<=m;++i)\n    {\n        e[i].id=i;\n        val[n+i]=e[i].l;\n        mx[n+i]=n+i;\n    }\n    //in\n    sort(e+1,e+m+1,comp1);\n    for(int i=1;i<=Q;++i)\n    {\n        scanf(\"%d%d%d\",&q[i].fl,&q[i].x,&q[i].y);\n        if(q[i].fl==2)\n        {\n            if(q[i].x>q[i].y) swap(q[i].x,q[i].y);\n            int id=findit(q[i].x,q[i].y);\n            q[i].id=e[id].id;\n            e[id].po=1;\n        }\n    }\n    \n    KU();\n    for(int i=Q;i;--i) \n    {\n        if(q[i].fl==1) q[i].ans=val[query(q[i].x,q[i].y)];\n        else//join\n        {\n            int bi=query(q[i].x,q[i].y);\n            if(val[bi]>val[q[i].id+n])\n            {\n                cut(e[bi-n].u,bi);\n                cut(e[bi-n].v,bi);\n                link(q[i].x,q[i].id+n);\n                link(q[i].y,q[i].id+n);\n            }\n        }\n    }\n    for(int i=1;i<=Q;++i) if(q[i].fl==1) printf(\"%d\\n\",q[i].ans);\n    return 0;\n}\n```",
        "postTime": 1517314732,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10576550.html)\n\n### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u652f\u6301\u5220\u8fb9\uff0c\u6c42\u4e24\u70b9\u7684\u8def\u5f84\u4e2d\u6240\u6709\u6743\u503c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c~~\u8c8c\u4f3c\u5f88\u7ed5\u7684\u6837\u5b50~~\n\n\u7531\u4e8e\u6709\u5220\u8fb9\uff0c\u4e0d\u96be\u60f3\u5230$LCT$\uff0c\u53c8\u56e0\u4e3a$LCT$\u4e0d\u652f\u6301\u7ef4\u62a4\u56fe\uff0c\u800c\u4e14\u53ea\u6709\u5220\u8fb9\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u65f6\u95f4\u56de\u6eaf\u3002\n\n\u628a\u8fd9\u9053\u9898\u53d8\u6210\u6a21\u677f\u6709\u51e0\u4e2a\u95ee\u9898\uff1a\n\n\uff08\u601d\u8def\u4e3a\u4e2a\u4eba$YY$\uff0c\u53ef\u80fd\u975e\u5e38\u9ebb\u70e6\uff09\n\n### $1.$\u6211\u4eec\u600e\u4e48\u786e\u5b9a\u6700\u540e\u7684\u72b6\u6001\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u5148\u7528$map$\u5b58\u6bcf\u4e00\u6761\u8fb9\uff0c\u5728\u8be2\u95ee\u64cd\u4f5c\u65f6\uff0c\u6bcf\u5220\u4e00\u6761\u8fb9\uff0c\u5c31\u628a\u4ed6\u5728$map$\u4e0a\u53bb\u6389\uff0c\u6700\u540e\u5269\u4e0b\u7684\u8fb9\u5373\u4e3a\u6700\u7ec8\u72b6\u6001\n\n### $2.$\u52a0\u8fb9\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u73af\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u8981\u8ba9\u7b54\u6848\u66f4\u4f18\uff0c\u6211\u4eec\u663e\u7136\u8981\u52a8\u6001\u7ef4\u62a4[\u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/blog/Hakuryu/solution-p3366)\uff0c\u7136\u540e\u7ef4\u62a4\u4e86\u6700\u5c0f\u751f\u6210\u6811\u540e\u5c31\u53ea\u8981\u627e\u6700\u5c0f\u751f\u6210\u6811\u6811\u4e0a\u4e24\u70b9\u7684\u6700\u5927\u503c\u4e86\n\n\u9644\u4e0a\u5e38\u6570\u6781\u5927\u53c8\u5341\u5206\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define updown(x) swap(ch[1][x], ch[0][x]), tag[x] ^= 1\n#define get_fa(x) ch[1][fa[x]] == x\n#define isroot(x) ch[1][fa[x]] == x || ch[0][fa[x]] == x\n#define _ 150006\nint n, m, Q, ans[_], Top, st[_], top, fa[_], tag[_], ch[2][_], val[_], ma[_], id[_];\nstruct node {int opt, u, v, w;}e[_];\npair<int, int> a[_];\nmap<pair<int, int>, int> q, Id;\nil void pushdown(int x) {\n\tif(!tag[x]) return;\n\tif(ch[1][x]) updown(ch[1][x]);\n\tif(ch[0][x]) updown(ch[0][x]);\n\ttag[x] = 0;\n}\nil void pushup(int x) {\n\tma[x] = val[x], id[x] = x;\n\tif(ch[1][x] && ma[x] < ma[ch[1][x]]) ma[x] = ma[ch[1][x]], id[x] = id[ch[1][x]];\n\tif(ch[0][x] && ma[x] < ma[ch[0][x]]) ma[x] = ma[ch[0][x]], id[x] = id[ch[0][x]];\n}\nil void rotate(int x) {\n\tint y = fa[x], z = fa[y], w = get_fa(x), k = get_fa(y);\n\tch[w][y] = ch[w ^ 1][x], fa[ch[w ^ 1][x]] = y;\n\tif(isroot(y)) ch[k][z] = x; fa[x] = z;\n\tch[w ^ 1][x] = y, fa[y] = x;\n\tpushup(y), pushup(x);\n}\nil void Splay(int x) {\n\tint y = x;\n\tst[++ top] = x;\n\twhile(isroot(y)) st[++ top] = y = fa[y];\n\twhile(top) pushdown(st[top --]);\n\twhile(isroot(x)) {\n\t\tint y = fa[x];\n\t\tif(isroot(y)) rotate(get_fa(x) == get_fa(y) ? y : x);\n\t\trotate(x);\n\t}\n}\nil void access(int x) {for(int y = 0; x; x = fa[y = x]) Splay(x), ch[1][x] = y, pushup(x);}\nil void makeroot(int x) {access(x), Splay(x), updown(x);}\nil int findroot(int x) {\n\taccess(x), Splay(x);\n\twhile(ch[0][x]) x = ch[0][x];\n\tSplay(x);\n\treturn x;\n}\nil void spilt(int x, int y) {makeroot(x), access(y), Splay(y);}\nil void link(int x, int y) {\n\tmakeroot(x);\n\tif(findroot(y) != x) fa[x] = y;\n}\nint main() {\n\tfile(a);\n\tn = read(), m = read(), Q = read();\n\trep(i, 1, m) {\n\t\tint u = read(), v = read();\n\t\ta[i] = make_pair(u, v), q[make_pair(v, u)] = q[a[i]] = read(), val[i + n] = q[a[i]];\n\t\tId[a[i]] = Id[make_pair(v, u)] = i;\n\t}\n\trep(i, 1, Q) {\n\t\tint opt = read(), u = read(), v = read();\n\t\te[i] = (node){opt, u, v, q[make_pair(u, v)]};\n\t}\n\trep(i, 1, Q) \n\t\tif(e[i].opt == 2) q[make_pair(e[i].u, e[i].v)] = q[make_pair(e[i].v, e[i].u)] = 0;\n    rep(i, 1, m) {\n        if(q[a[i]] == 0) continue;\n        if(findroot(a[i].first) == findroot(a[i].second)) {\n            spilt(a[i].first, a[i].second); int now = id[a[i].second];\n            if(val[i + n] >= val[now]) continue;\n            Splay(now), fa[ch[1][now]] = fa[ch[0][now]] = 0;\n        }\n        link(a[i].first, i + n), link(i + n, a[i].second);\n    }\n\tdrep(i, 1, Q) {\n\t\tint u = e[i].u, v = e[i].v;\n\t\tif(e[i].opt == 2) {\n            if(findroot(u) == findroot(v)) {\n                spilt(u, v); int now = id[v];\n                if(e[i].w >= val[now]) continue;\n                Splay(now), fa[ch[1][now]] = fa[ch[0][now]] = 0;\n            }\n            link(u, Id[make_pair(u, v)] + n), link(Id[make_pair(u, v)] + n, v);\n        }\n\t\telse spilt(u, v), ans[++ Top] = val[id[v]];\n\t}\n\tdrep(i, 1, Top) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1553221013,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "## \u601d\u8def\u5206\u6790\n\n\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u8981\u6c42\u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u8fb9\u6743\u6700\u5c0f\uff0c\u5c31\u4e0d\u96be\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002\u800c\u9898\u76ee\u4e2d\u6709\u5220\u8fb9\u7684\u64cd\u4f5c\uff0c\u90a3\u80af\u5b9a\u662f\u8981\u52a8\u6001\u7ef4\u62a4\u5566\u3002\u76f4\u63a5\u4e0aLCT\u7ef4\u62a4\u8fb9\u6743\u6700\u5c0f\u503c\uff08\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b[\u849f\u84bb\u7684Blog](http://www.cnblogs.com/flashhu/p/8324551.html)\uff09\n\n\u8fd9\u65f6\u5019\u4ee4\u4eba\u5934\u75bc\u7684\u95ee\u9898\u53c8\u5192\u51fa\u6765\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u5220\u6389\u4e00\u6761\u8fb9\u4ee5\u540e\uff0c\u53c8\u4e0d\u597d\u4ece\u6811\u65ad\u5f00\u540e\u7684\u4e24\u8fb9\u9009\u51fa\u6700\u5c0f\u7684\u8fb9\u5728\u8fde\u4e0a\u3002\u8fd9\u662f\u6839\u672c\u7ef4\u62a4\u4e0d\u4e86\u7684\u3002\n\n\u4e8e\u662f\u849f\u84bb\u53c8get\u5230\u4e86\u4e00\u4e2a\u65b0\u5957\u8def\u2014\u2014\u987a\u5e8f\u89e3\u51b3\u4e0d\u4e86\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u79bb\u7ebf\u8be2\u95ee\uff0c\u53cd\u8fc7\u6765\u5904\u7406\u3002\u539f\u6765\u7684\u5220\u8fb9\u53d8\u6210\u4e86\u52a0\u8fb9\uff0c\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002\u76f4\u63a5split\u627e\u51fa\u73af\u4e0a\u7684\u6700\u5927\u8fb9\uff0c\u5f53\u524d\u8981\u52a0\u7684\u8fb9\u6bd4\u5b83\u5c0f\u5c31\u66ff\u6362\u6389\u3002\n\n\u4e00\u4e2a\u505a\u6cd5\u7684\u95ee\u9898\uff1a\u5728\u53cd\u8fc7\u6765\u521d\u59cb\u5316\u6700\u540e\u65f6\u523b\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0ckruskal\u52a0\u8fb9\u65f6\u8fd8\u4e0d\u662f\u5f88\u597d\u5224\u65ad\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u6709\u6ca1\u6709\u5728\u4e2d\u9014\u65ad\u6389\u3002\u5982\u679c\u8981\u641e\u4e00\u4e2aset\u6216\u8005map\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u4e0d\u4f1a\u5f88\u9ebb\u70e6\uff1f\n\n\u7136\u540e\u770b\u5230N\u5c45\u7136\u53ea\u67091000\uff1f\uff01\u4e8e\u662f\u76f4\u63a5\u5f00\u90bb\u63a5\u77e9\u9635\u6807\u8bb0\u4e00\u4e0b\u5c31\u597d\u5566\u3002\n\n\u5361\u5e38+O2 600+ms\u6c34\u5230\u699c\u4e0a\u6765\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define R register int\n#define I inline void\n#define lc c[x][0]\n#define rc c[x][1]\nconst int N=1009,M=2009,L=100009;\nint f[M],c[M][2],v[M],mx[M],ex[M];\n//ex\u5b58\u653eLCT\u4e2d\u4ee3\u8868\u8fb9\u7684\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u4e3a\u5361\u5e38cut\u5e2e\u5fd9\nint ff[N],l[N][N],k[L],a[L],b[L],ans[L];\nbool r[M],g[N][N];//\u66b4\u529b\u641e\u90bb\u63a5\u77e9\u9635\nstruct EDGE{\n    int u,v,l;\n    inline bool operator<(EDGE x)const{\n        return l<x.l;\n    }\n}e[L];\nchar ch;int z;\ninline int in(){\n    while((ch=getchar())<'-');\n    z=ch&15;\n    while((ch=getchar())>'-')z*=10,z+=ch&15;\n    return z;\n}\ninline bool nroot(R x){return c[f[x]][0]==x||c[f[x]][1]==x;}\ninline int get(R x,R y){return v[x]>v[y]?x:y;}\nI pushup(R x){\n    mx[x]=get(x,get(mx[lc],mx[rc]));\n}\nI pushdown(R x){\n    if(r[x]){\n        R t=lc;\n        r[lc=rc]^=1;r[rc=t]^=1;r[x]=0;\n    }\n}\nI pushall(R x){\n    if(nroot(x))pushall(f[x]);\n    pushdown(x);\n}\nI rotate(R x){\n    R y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n    if(nroot(y))c[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;\n    f[w]=y;f[y]=x;f[x]=z;\n    pushup(y);\n}\nI splay(R x){\n    R y=x;\n    pushall(x);\n    while(nroot(x)){\n        if(nroot(y=f[x]))\n            rotate((c[y][0]==x)^(c[f[y]][0]==y)?x:y);\n        rotate(x);\n    }\n    pushup(x);\n}\nI access(R x){\n    for(R y=0;x;x=f[y=x])\n        splay(x),rc=y,pushup(x);\n}\nI mroot(R x){\n    access(x);splay(x);\n    r[x]^=1;\n}\n#define link(E)\\\n    mroot(x);f[f[ex[E]=x]=E]=y;\\\n    v[E]=l[x][y];pushup(E)\n//\u4e0d\u6b63\u5e38\u7684link\u548ccut\uff08\u4e5f\u603b\u7ed3\u5728blog\u91cc\uff09\nI cut(R x){\n    access(ex[x]);splay(x);\n    lc=rc=f[lc]=f[rc]=0;\n}\nint getf(R x){\n    if(x==ff[x])return x;\n    return ff[x]=getf(ff[x]);\n}\nint main(){\n    R n,m,Q,i,x,y,tmp,cnt;\n    n=in();m=in();Q=in();\n    for(i=1;i<=m;++i){\n        x=e[i].u=in();y=e[i].v=in();\n        l[x][y]=l[y][x]=e[i].l=in();\n    }\n    for(i=1;i<=Q;++i){\n        k[i]=in();a[i]=in();b[i]=in();\n        if(k[i]&2)g[a[i]][b[i]]=g[b[i]][a[i]]=1;\n    }\n    for(i=0;i<=n;++i)\n        ff[i]=i;\n    //\u63a5\u4e0b\u6765\u8fd8\u662f\u8d70\u4e00\u904dkruskal\n    sort(e+1,e+m+1);\n    for(cnt=n*2-1,i=1;cnt>n;++i){\n        x=e[i].u;y=e[i].v;\n        if(!g[x][y]&&getf(x)!=getf(y)){\n            link(cnt);--cnt;\n            ff[ff[x]]=ff[y];\n        }\n    }\n    for(cnt=0,i=Q;i;--i){\n        mroot(x=a[i]);\n        access(y=b[i]);splay(y);\n        if(k[i]&1)ans[++cnt]=v[mx[y]];//\u7b54\u6848\u538b\u5230\u6808\u91cc\u9762\uff0c\u6700\u540e\u53cd\u8fc7\u6765\u5f39\n        else if(v[mx[y]]>l[x][y]){\n            cut(tmp=mx[y]);link(tmp);\n        }\n    }\n    while(cnt)printf(\"%d\\n\",ans[cnt--]);\n    return 0;\n}\n```",
        "postTime": 1521276503,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u7684\u786e\u662f\u7528\u6700\u5c0f\u751f\u6210\u6811\u641e\u7684\uff0c\u53ea\u4e0d\u8fc7\u60f3\u6cd5\u6709\u70b9\u9519\u8bef\u6ca1\u60f3\u51fa\u6765\n\n\u76f4\u5230\u4ea4\u4e0a\u53bbRE\u4e86\u624d\u53d1\u73b0QAQ\n\n\u5176\u5b9e\u8fd9\u4e2a\u9898\u79bb\u7ebf\u5c31\u5f88\u597d\u505a\u3002\u5012\u5e8f\uff0c\u7136\u540e\u628a\u5220\u8fb9\u770b\u6210\u52a0\u8fb9 \n\n\u5148\u628a\u6240\u6709\u4e0d\u4f1a\u88ab\u62c6\u9664\u7684\u8fb9kruskal\u4e00\u4e0b\uff08\u4e0d\u4e00\u5b9a\u8981\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u68ee\u6797\u4e5f\u884c\uff0c\u6bd5\u7adf\u540e\u9762\u8fd8\u4f1a\u6709\u52a0\u8fb9\n\n\u7136\u540e\u5012\u5e8f\u770b\u8be2\u95ee\uff0c\u5982\u679c\u4e3a1\u5c31\u8f93\u51fa\uff0c\u5982\u679c\u4e3a2\u5c31\u5148\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u56fe\u4e2d(x,y)\u7684\u7b80\u5355\u8def\u5f84\u60c5\u51b5\n\n\u82e5xy\u4e0d\u8054\u901a\uff0c\u76f4\u63a5\u8fde\u63a5\n\n\u82e5xy\u8054\u901a\uff0c\u4e14xy\u8def\u5f84\u4e0a\u7684\u6700\u957f\u8fb9\u5c0f\u4e8e\u8981\u52a0\u7684\u8fb9\uff0c\u5219\u4e0d\u5904\u7406\n\n\u5426\u5219\u5c31\u5c06\u6700\u5927\u8fb9\u5220\u6389\uff0c\u7136\u540elink\u8981\u52a0\u7684\u8fb9\u5373\u53ef\n\u7ef4\u62a4\u8fb9\u6743\u5219\u662f\u5957\u8def\u65b9\u6cd5\n\n\u4e0d\u8fc7\u5b66\u5230\u4e00\u4e2a\u65b0\u5957\u8defQAQ\n\n\u5c06\u6240\u6709\u8fb9\u7684x,y\u6309\u5c0f\u7684\u518d\u524d\u9762\n\n\u7136\u540ex\u7b2c\u4e00\u5173\u952e\u5b57\uff0cy\u7b2c\u4e8c\u5173\u952e\u5b57sort\u4e00\u4e0b\n\u7b2ci\u6761\u8fb9\u7684\u7f16\u53f7\u4e3ai+n\uff0c\u627e\u7684\u65f6\u5019\u5728\u8fb9\u91cc\u4e8c\u5206\u4e00\u4e0b\u5c31\u627e\u5230\u4e86QAQ \n\n\u6211\u7684[\u4ee3\u7801](http://www.cnblogs.com/refun/p/8685633.html)\u80fd\u8fc7\u52a0\u5f3a\u7248\u7684\u6570\u636e",
        "postTime": 1522677408,
        "uid": 41890,
        "name": "Refun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104539669)\n\n**14:30 \u5f00\u59cb\u5199\u9898**\n\n\u601d\u8def\uff1a\u9996\u5148\u8fd9\u9053\u9898\u6211\u4eec\u80af\u5b9a\u8981\u5012\u5e8f\u64cd\u4f5c\uff0c\u56e0\u4e3a\u53ea\u6709\u5220\u8fb9\uff0c\u5012\u5e8f\u53d8\u6210\u52a0\u8fb9\u66f4\u597d\u5904\u7406\uff0c\u5176\u5b9e\u8fd9\u9898\u8ddf[\u822a\u7ebf\u89c4\u5212](https://www.luogu.com.cn/problem/P2542)\u633a\u50cf\u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4ed6\u8ba9\u8d70\u8fc7\u7684\u9053\u8def\u7684\u6700\u5927\u51c6\u5907\u65f6\u95f4\u6700\u77ed\uff0c\u90a3\u4e48\u4ed6\u8d70\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u5728\u4ed6\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\uff01\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86lct\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\n\n\u56e0\u4e3a\u8fd9\u9898\u8981\u7ef4\u62a4\u7684\u662f\u8fb9\u6743\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fb9\u6743\u770b\u6210\u70b9\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u8fde\u63a5$x$,$y$\u7684\u7f16\u53f7\u4e3a$i$\u7684\u8fb9\u6211\u4eec\u8981\u8fde\u63a5\u8d77\u6765\u5c31\u662f\n\n```cpp\nlink(x,i+n),link(i+n,y);\n```\n\n\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u5982\u679c\u6211\u4eec\u65b0\u52a0\u8fdb\u6765\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u7684\u4e00\u6761\u8fb9\u7ed9\u5220\u6389\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981lct\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u8fd9\u91cc\u7ef4\u62a4\u7684\u662f**\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u7684\u7f16\u53f7**\n\n\u5982\u679c\u65b0\u52a0\u8fdb\u6765\u7684$x\\ to \\ y$\u7684\u8fb9\u6bd4\u4e4b\u524d$x$,$y$\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u8fd8\u8981\u5927\uff0c\u5c31\u4e0d\u7ba1\u4ed6\uff0c\u5426\u5219\u628a\u6700\u5927\u7684$cut$\u6389\uff0c\u7136\u540e\u628a\u8fd9\u6761\u8fb9$link$\u4e0a\n\n\u4e3a\u4e86\u8bb0\u5f55\u7f16\u53f7\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\u7136\u540elower_bound\u4e00\u4e0b\n\n\u800c\u4e14\u8fd9\u9053\u9898\u6709\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u6240\u6709\u70b9\u8054\u901a\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u540e\u5269\u4e0b\u7684\u81f3\u5c11\u662f\u4e00\u68f5\u6811\u4e86\uff0c\u8003\u8651\u7684\u60c5\u51b5\u5c31\u5c11\u4e00\u4e9b\n\n**15:00 \u7801\u5b8c**\n\n\u4e00\u6d4b\u6837\u4f8b\uff0c\u6b7b\u4e86qwq\n\n\u7136\u540e\u53d1\u73b0\u662f\u6211\u7684vis\u6807\u8bb0\u6253\u53cd\u4e86\n\n**15:15 \u7b2c\u4e00\u6b21\u63d0\u4ea4**\n\n\u4ea4\u4e0a\u53bb\u53d1\u73b0\u53ea\u670910\u5206\n\n\u4ee3\u7801\uff1a\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=2e5+5;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nint n,m,q;\nint fa[N],son[N][2],_max[N],val[N],st[N];\nint out[N],cnt;\nint sum;\nbool vis[N],tag[N];\n\nstruct Edge{\n\tint x,y,c;\n\tbool operator < (const Edge &cmp)const{\n\t\tif(x==cmp.x)return y<cmp.y;\n\t\treturn x<cmp.x;\n\t}\n}e[N];\n\nstruct querys{\n\tint x,y,id,opt;\n}qr[N];\n\nbool isroot(int x){\n\treturn son[fa[x]][0]!=x&&son[fa[x]][1]!=x;\n}\n\nbool locate(int x){\n\treturn son[fa[x]][1]==x;\t\n}\n\nvoid reverse(int x){\n\tswap(son[x][0],son[x][1]);\n\ttag[x]^=1;\t\n}\n\nvoid update(int x){\n\t_max[x]=val[x];\n\tif(e[_max[son[x][0]]].c>e[_max[x]].c)_max[x]=_max[son[x][0]];\n\tif(e[_max[son[x][1]]].c>e[_max[x]].c)_max[x]=_max[son[x][1]];\t\n}\n\nvoid pushdown(int x){\n\tif(tag[x]){\n\t\tif(son[x][0])reverse(son[x][0]);\n\t\tif(son[x][1])reverse(son[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n\nvoid rotate(int x){\n\tint y=fa[x],z=fa[y],side=locate(x);\n\tfa[x]=z;\n\tif(!isroot(y))son[z][son[z][1]==y]=x;\n\tson[y][side]=son[x][side^1];\n\tif(son[x][side^1])fa[son[y][side]]=y;\n\tson[x][side^1]=y,fa[y]=x;\n\tupdate(y),update(x);\t\n}\n\nvoid splay(int x){\n\tint y=x,top=0;\n\tst[++top]=y;\n\twhile(!isroot(y))y=fa[y],st[++top]=y;\n\twhile(top)pushdown(st[top--]);\n\twhile(!isroot(x)){\n\t\tint y=fa[x];\n\t\tif(!isroot(y))rotate(locate(x)==locate(y)?y:x);\n\t\trotate(x);\t\n\t}\n\tupdate(x);\n}\t\n\nvoid access(int x){\n\tfor(int y=0;x;y=x,x=fa[x])\n\t\tsplay(x),son[x][1]=y,update(x);\t\n}\n\nvoid makeroot(int x){\n\taccess(x),splay(x);\n\treverse(x);\t\n}\n\nint findroot(int x){\n\taccess(x),splay(x);\n\twhile(son[x][0])pushdown(x),x=son[x][0];\n\tsplay(x);\n\treturn x;\n}\n\nvoid split(int x,int y){\n\tmakeroot(x);\n\taccess(y),splay(y);\t\n}\n\nvoid link(int x,int y){\n\tmakeroot(x);\n\tfa[x]=y;\t\n}\n\nvoid cut(int x,int y){\n\tsplit(x,y);\n\tfa[x]=son[y][0]=0;\t\n}\n\nint main()\n{\n\tread(n),read(m),read(q);\n\tRep(i,1,m){\n\t\tread(e[i].x),read(e[i].y),read(e[i].c);\n\t\tif(e[i].x>e[i].y)swap(e[i].x,e[i].y);\n\t}\t\n\tsort(e+1,e+m+1);\n\tRep(i,1,q){\n\t\tread(qr[i].opt),read(qr[i].x),read(qr[i].y);\n\t\tif(qr[i].x>qr[i].y)swap(qr[i].x,qr[i].y);\n\t\tif(qr[i].opt==2){\n\t\t\tint _id=lower_bound(e+1,e+m+1,(Edge){qr[i].x,qr[i].y,0})-e;\n\t\t\tqr[i].id=_id;\n\t\t\tvis[_id]=true;\n\t\t}\n\t}\n\tRep(i,1,n+m)_max[i]=val[i]=(i<=n?0:(i-n));\n\tRep(i,1,m){\n\t\tif(sum==n-1)break;\n\t\tint x=e[i].x,y=e[i].y;\n\t\tif(vis[i])continue;\n\t\tif(findroot(x)==findroot(y))continue;\n\t\tlink(x,i+n),link(i+n,y);\n\t\tsum++;\t\t\n\t}\n\t_Rep(i,q,1){\n\t\tint x=qr[i].x,y=qr[i].y;\n\t\tif(qr[i].opt==1)split(x,y),out[++cnt]=e[_max[y]].c;\n\t\telse{\n\t\t\tsplit(x,y);\n\t\t\tint _id=_max[y];\n\t\t\tif(e[qr[i].id].c>e[_id].c)continue;\n\t\t\tcut(e[_id].x,_id+n),cut(_id+n,e[_id].y);\n\t\t\tlink(x,qr[i].id+n),link(y,qr[i].id+n);\n\t\t}\n\t}\n\t_Rep(i,cnt,1)printf(\"%d\\n\",out[i]);\n\treturn 0;\n}\n```\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n**16:15 \u604d\u7136\u5927\u609f**\n\n~~\u522b\u95ee\u6211\u4e2d\u95f4\u5e72\u5565\u53bb\u4e86~~\n\n\u6211\u4eec\u8003\u8651\u6211\u4eec\u6b63\u5e38\u6211\u4eec\u7684$kruskal$\u662f\u600e\u4e48\u505a\u7684\n\n\u6211\u4eec\u8981\u6309**\u8fb9\u6743**\u6392\u5e8f\uff0c\u800c\u4e0d\u662fx\uff0cy\n\n\u539f\u6765\u9519\u5728\u8fd9\u91cc\u4e86\u554a\uff0c\u90a3\u4e48\u6211\u4eec\u6539\u4e00\u4e0b\u6392\u5e8f\u65b9\u5f0f\u5c31\u597d\u4e86\u5427\n\n\u522b\u6025\uff0c\u8fd9\u6837\u7684\u8bddlower_bound\u5c31\u4e0d\u597d\u505a\u4e86\n\n\u624b\u5199\u4e8c\u5206\u53c8\u6b7b\u5faa\u73af\u4e86\n\n\u6700\u540e\u53ea\u597d\u7528\u5230map\u5927\u6cd5\n\n**16:35 AC**\n\n\u6211\u4eec\u7528map\u6765\u6620\u5c04\u4e00\u4e0b\u5c31\u597d\u5566\n\nAC code\uff1a\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=2e5+5;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nint n,m,q;\nint fa[N],son[N][2],_max[N],val[N],st[N];\nint out[N],cnt;\nint sum;\nbool vis[N],tag[N];\n\nstruct Edge{\n\tint x,y,c;\n\tbool operator < (const Edge &cmp)const{\n\t\treturn c<cmp.c;\t\n\t}\n}e[N];\n\nmap<pair<int,int>,int> mp;\n\nstruct querys{\n\tint x,y,id,opt;\n}qr[N];\n\nbool isroot(int x){\n\treturn son[fa[x]][0]!=x&&son[fa[x]][1]!=x;\n}\n\nbool locate(int x){\n\treturn son[fa[x]][1]==x;\t\n}\n\nvoid reverse(int x){\n\tswap(son[x][0],son[x][1]);\n\ttag[x]^=1;\t\n}\n\nvoid update(int x){\n\t_max[x]=val[x];\n\tif(e[_max[son[x][0]]].c>e[_max[x]].c)_max[x]=_max[son[x][0]];\n\tif(e[_max[son[x][1]]].c>e[_max[x]].c)_max[x]=_max[son[x][1]];\t\n}\n\nvoid pushdown(int x){\n\tif(tag[x]){\n\t\tif(son[x][0])reverse(son[x][0]);\n\t\tif(son[x][1])reverse(son[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n\nvoid rotate(int x){\n\tint y=fa[x],z=fa[y],side=locate(x);\n\tfa[x]=z;\n\tif(!isroot(y))son[z][son[z][1]==y]=x;\n\tson[y][side]=son[x][side^1];\n\tif(son[x][side^1])fa[son[y][side]]=y;\n\tson[x][side^1]=y,fa[y]=x;\n\tupdate(y),update(x);\t\n}\n\nvoid splay(int x){\n\tint y=x,top=0;\n\tst[++top]=y;\n\twhile(!isroot(y))y=fa[y],st[++top]=y;\n\twhile(top)pushdown(st[top--]);\n\twhile(!isroot(x)){\n\t\tint y=fa[x];\n\t\tif(!isroot(y))rotate(locate(x)==locate(y)?y:x);\n\t\trotate(x);\t\n\t}\n\tupdate(x);\n}\t\n\nvoid access(int x){\n\tfor(int y=0;x;y=x,x=fa[x])\n\t\tsplay(x),son[x][1]=y,update(x);\t\n}\n\nvoid makeroot(int x){\n\taccess(x),splay(x);\n\treverse(x);\t\n}\n\nint findroot(int x){\n\taccess(x),splay(x);\n\twhile(son[x][0])pushdown(x),x=son[x][0];\n\tsplay(x);\n\treturn x;\n}\n\nvoid split(int x,int y){\n\tmakeroot(x);\n\taccess(y),splay(y);\t\n}\n\nvoid link(int x,int y){\n\tmakeroot(x);\n\tfa[x]=y;\t\n}\n\nvoid cut(int x,int y){\n\tsplit(x,y);\n\tfa[x]=son[y][0]=0;\t\n}\n\nint main()\n{\n\tread(n),read(m),read(q);\n\tRep(i,1,m){\n\t\tread(e[i].x),read(e[i].y),read(e[i].c);\n\t\tif(e[i].x>e[i].y)swap(e[i].x,e[i].y);\n\t}\t\n\tsort(e+1,e+m+1);\n\tRep(i,1,m)mp[make_pair(e[i].x,e[i].y)]=i;\n\tRep(i,1,q){\n\t\tread(qr[i].opt),read(qr[i].x),read(qr[i].y);\n\t\tif(qr[i].x>qr[i].y)swap(qr[i].x,qr[i].y);\n\t\tif(qr[i].opt==2){\n\t\t\tint _id=mp[make_pair(qr[i].x,qr[i].y)];//map\u6620\u5c04\n\t\t\tqr[i].id=_id;\n\t\t\tvis[_id]=true;\n\t\t}\n\t}\n\tRep(i,1,n+m)_max[i]=val[i]=(i<=n?0:(i-n));\n\tRep(i,1,m){\n\t\tif(sum==n-1)break;\n\t\tint x=e[i].x,y=e[i].y;\n\t\tif(vis[i])continue;\n\t\tif(findroot(x)==findroot(y))continue;\n\t\tlink(x,i+n),link(i+n,y);\n\t\tsum++;\t\t\n\t}\n\t_Rep(i,q,1){\n\t\tint x=qr[i].x,y=qr[i].y;\n\t\tif(qr[i].opt==1)split(x,y),out[++cnt]=e[_max[y]].c;\n\t\telse{\n\t\t\tsplit(x,y);\n\t\t\tint _id=_max[y];\n\t\t\tif(e[qr[i].id].c>e[_id].c)continue;\n\t\t\tcut(e[_id].x,_id+n),cut(_id+n,e[_id].y);\n\t\t\tlink(x,qr[i].id+n),link(y,qr[i].id+n);\n\t\t}\n\t}\n\t_Rep(i,cnt,1)printf(\"%d\\n\",out[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1582793495,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "[P4172 [WC2006]\u6c34\u7ba1\u5c40\u957f](https://www.luogu.org/problemnew/show/P4172)\n\n### Problem Abstract\uff1a\n\u4e00\u5f20\u65e0\u5411\u56fe\u4e2d\uff0c\u6c42\u8fde\u63a5\u4e24\u70b9\u7684\u4e00\u6761\u8def\u5f84\u4f7f\u5176\u4e2d\u6700\u5927\u8fb9\u6743\u6700\u5c0f\uff0c\u652f\u6301\u52a8\u6001\u5220\u8fb9\u3002\n\n### Ideas Outline\uff1a\n1. MST\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\n2. \u6b63\u96be\u5219\u53cd\n3. \u5316\u8fb9\u4e3a\u70b9\n\n### Process Details:\n1.\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u6700\u5927\u8fb9\u6743\uff0c\u56e0\u4e3aMST\u662f\u8fde\u901a\u7684\uff0c\u4e14Kruskal\u8fc7\u7a0b\u4e2d\u52a0\u5165\u7684\u8fb9\u90fd\u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u663e\u7136\u5b83\u5728\u5f53\u524d\u7684MST\u4e0a\u3002\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7528LCT\u7ef4\u62a4\u5f53\u524dMST\u5373\u53ef\u77e5\u9053\u7b54\u6848\u3002\n\n2.\u5982\u679c\u8003\u8651\u5220\u8fb9\uff0c\u5220\u6389\u5f53\u524dMST\u5185\u7684\u8fb9\u8981\u53bb\u627eMST\u5916\u7684\u53ef\u4ee5\u6784\u6210\u8fde\u901a\u7684\u4e00\u6761\u8fb9\uff0c\u9700\u8981\u7ef4\u62a4\u8fde\u63a5\u88ab\u65ad\u5f00\u7684\u4e24\u90e8\u5206\u7684\u76f4\u63a5\u8fb9\uff0c**\u6211\u4e0d\u4f1a**\u3002\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u795e\u4ed9\u7b97\u6cd5\uff0c\u8fd8\u8bf7\u5946\u4eba\u4eec\u6307\u70b9\u3002\n\n\u82e5\u53cd\u7740\u6765\uff0c\u8003\u8651\u52a0\u8fb9\uff0c\u5219\u60c5\u51b5\u7b80\u5355\u5f88\u591a\uff1a\u82e5\u5f53\u524d\u52a0\u5165\u7684\u8fd9\u6761\u8fb9\uff0c\u6bd4\u539f\u6765\u8fde\u63a5\u8fd9\u4e24\u70b9\u7684\u6700\u5927\u8fb9\u6743\u5c0f\uff0c\u5219cut\u6389\u8be5\u8fb9\uff0clink\u5f53\u524d\u52a0\u5165\u7684\u8fb9\u3002\u6211\u4eec\u53ea\u9700\u8981\u5728LCT\u4e0a\u7ef4\u62a4\u6700\u5927\u8fb9\u7684\u7f16\u53f7\uff08\u7528map\u4e4b\u7c7b\u7684\uff09\u3002\n\n3.\u5728LCT\u4e0a\u7ef4\u62a4\u8fb9\u6743\u6709\u51e0\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5316\u8fb9\u4e3a\u70b9\u3002\u8fd9\u662f\u7ef4\u62a4\u8fb9\u6743\u7684\u4e00\u79cd\u7ecf\u5178\u601d\u8def\u3002\n\n\u628a\u4e00\u6761\u8fb9\u770b\u6210\u4e00\u4e2a\u70b9\u52a0\u4e24\u6761\u8fb9\uff0c\u5206\u522b\u8fde\u7740\u539f\u5148\u8fde\u7740\u7684\u4e24\u70b9\u3002\u5982\u4e0b\u3002\n\n\u539f\u6765\u8fd9\u4e2a\u6837\n\n![](https://i.loli.net/2019/07/05/5d1f18407739d90717.jpg)\n\n\u7136\u540e\u957f\u8fd9\u6837\n\n![](https://i.loli.net/2019/07/05/5d1f183eaf23861123.jpg)\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fb9\u5f53\u6210\u70b9\u6765\u7ef4\u62a4\u4e86\uff0c\u53ea\u9700\u628a\u70b9\u96c6\u5f00\u5927m\u4e2a\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define mp make_pair\n#define lc t[x][0]\n#define rc t[x][1]\nusing namespace std;\nconst int N = 1005, M = 100005, Q = 100005, S = N + M;\n\nint n, m, q, k;\n\nstruct Operation {\n    int k, a, b, num;\n}tmp;\nvector<Operation> op; //\u50a8\u5b58\u8f93\u5165\u6570\u636e\nbool disconnected[M]; //\u64cd\u4f5c2\u4e2d\u662f\u5426\u88ab\u5220\u9664\uff0c\u7528\u4e8e\u5efa\u7acb\u521d\u59cbMST\n\nstruct Edge {\n    int s, t, dis;\n}e[M];\ninline bool cmp(Edge const& a, Edge const& b) {return a.dis < b.dis;} \nmap<pair<int, int>, int> Map;\n/////////////////////////////////////////\nint val[S], fa[S], tag[S], t[S][2], ans[S];\ninline bool nroot(int const& x) {return t[fa[x]][0] == x || t[fa[x]][1] == x;}\ninline void pushup(int const& x) {\n    ans[x] = val[x];\n    if(e[ans[lc]].dis > e[ans[x]].dis) ans[x] = ans[lc];\n    if(e[ans[rc]].dis > e[ans[x]].dis) ans[x] = ans[rc];\n}\ninline void pushdown(int const& x) {\n    if(tag[x]) {\n        if(lc) swap(t[lc][0], t[lc][1]), tag[lc] ^= 1;\n        if(rc) swap(t[rc][0], t[rc][1]), tag[rc] ^= 1;\n        tag[x] = 0;\n    } return;\n}\ninline void rotate(int const& x) {\n    int y = fa[x], z = fa[y], k = t[y][1] == x, c = t[x][!k];\n    if(nroot(y))t[z][t[z][1] == y] = x;\n    t[x][!k] = y; t[y][k] = c;\n    if(c) fa[c] = y;\n    fa[y] = x; fa[x] = z; \n    pushup(y), pushup(x);\n    return;\n}\nvoid pushall(int const& x) {if(nroot(x)) pushall(fa[x]); pushdown(x);}\ninline void splay(int const& x) {\n    int y, z;\n    pushall(x);\n    while(nroot(x)) {\n        y = fa[x], z = fa[y];\n        if(nroot(y)) rotate((t[y][0] == x) ^ (t[z][0] == y) ? x : y);\n        rotate(x);\n    }\n    pushup(x);\n}\ninline void access(int x) {for(int y = 0; x; x = fa[y = x]) splay(x), rc = y, pushup(x);}\ninline void makeroot(int const& x) {access(x); splay(x); swap(lc, rc); tag[x] ^= 1;}\ninline int findroot(int x) {access(x); splay(x); pushdown(x); while(lc) pushdown(x), x = lc; splay(x); return x;}\ninline void split(int const& x, int const& y){makeroot(x); access(y); splay(y);}\ninline void link(int const& x, int const& y) {makeroot(x); fa[x] = y;}\ninline void cut(int const& x, int const& y) {split(x, y); fa[x] = t[y][0] = 0;}\nvoid init(int const& x, int const& y) {\n    fa[x] = lc = rc = tag[x] = 0;\n    val[x] = ans[x] = y;\n}\n/////////////////////////////////////////\nvoid Kruskal() {\n    int cnt = 0;\n    for(int i = 1; i <= m; ++i)\n        if(!disconnected[i]) {\n            if(cnt == n-1) break;\n            if(findroot(e[i].s) == findroot(e[i].t)) continue;\n            link(e[i].s, i + n), link(e[i].t, i + n);\n            ++cnt;\n        }\n}\n\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &q);\n    for(int i = 1; i <= m; ++i) {\n        scanf(\"%d%d%d\", &e[i].s, &e[i].t, &e[i].dis);\n        if(e[i].s > e[i].t) swap(e[i].s, e[i].t);\n    }\n    sort(e + 1, e + 1 + m, cmp);\n    for(int i = 1; i <= m; ++i) Map[mp(e[i].s, e[i].t)] = i;\n    for(int i = 1; i <= q; ++i) {\n        scanf(\"%d%d%d\", &tmp.k, &tmp.a, &tmp.b);\n        if(tmp.a > tmp.b) swap(tmp.a, tmp.b);\n        if(tmp.k == 2) {\n            tmp.num = Map[mp(tmp.a, tmp.b)]; disconnected[tmp.num] = 1;\n        }\n        else tmp.num = 0;\n        op.push_back(tmp);\n    }\n    \n    e[0].dis = 0;\n    for(int i = 1; i <= n; ++i) init(i, 0);\n    for(int i = n + 1; i <= n + m; ++i) init(i, i - n);\n    //\u4ecen+1\u5230n+m\u53f7\u7684\u70b9\u5c31\u662f\u4ece\u8fb9\u8f6c\u5316\u8fc7\u6765\u7684\n    Kruskal();\n    \n    stack<int> prt;\n    for(int i = q - 1, x, y; i >= 0; --i) {\n        x = op[i].a, y = op[i].b; split(x, y);\n        if(op[i].k == 1) prt.push(e[ans[y]].dis);\n        else { \n            int num = op[i].num, replace = ans[y];\n            if(e[num].dis < e[replace].dis) {\n                cut(e[replace].s, replace + n); cut(replace + n, e[replace].t);\n                link(x, num + n); link(num + n, y); //\u6ce8\u610f\u8fb9\u5316\u6210\u70b9\u4e4b\u540e\u8981\u65ad\u5f00\u4e24\u6761\u8fb9\n            }\n        }\n    }\n    while(!prt.empty()) printf(\"%d\\n\", prt.top()), prt.pop();\n}\n```\n\n",
        "postTime": 1562320575,
        "uid": 34237,
        "name": "Adam_Ng",
        "ccfLevel": 6,
        "title": "P4172 \u6c34\u7ba1\u5c40\u957f \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "## \u524d\u8a00\n\n\u641e\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u8981\u5199LCT\uff0c\u641e\u4e0d\u61c2\u4e3a\u4ec0\u4e48\u8981\u52a0\u5f3a\u6570\u636e\u300206\u5e74\u54ea\u6765\u7684\u8fd9\u4e48\u591aLCT\uff1f~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u662f\u4e0d\u4f1aLCT\u7684~~ \u50cf\u8fd9\u9053\u9898\u662f\u7528\u7236\u4eb2\u8868\u793a\u6cd5\u6765\u641e\u7684\u3002\u867d\u7136\u590d\u6742\u5ea6\u4e0d\u662flog\uff0c\u4f46\u662f\u73b0\u5728\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u5374\u662f\u65e0\u8bba\u4ece\u7a7a\u95f4\uff0c\u8fd8\u662f\u4ee3\u7801\u91cf\uff0c\u8fd8\u662f\u65f6\u95f4\u90fd\u662f\u4f18\u79c0\u4e0d\u6b62\u4e00\u70b9\u3002\n~~\u800c\u4e14\u8fd9\u6837\u8fd8\u80fd\u51fa\u5728noip\u8fd9\u6837\u7684\u8003\u8bd5~~\n\n## sol\n\n\u4e00\u4e2a\u70c2\u5927\u8857\u7684\u5957\u8def\u5c31\u662f\u79bb\u7ebf\u641e\u3002\u8fd9\u4e5f\u662f\u8fd9\u9053\u9898\u7684\u552f\u4e00\u96be\u70b9\u3002\u4f30\u8ba1\u5927\u4f6c\u4eec\u90fd\u5df2\u7ecf\u8bb2\u900f\u4e86\u3002\n\n\u4f46\u662f\u4e3a\u4e86\u7167\u987e\u6211\u8fd9\u6837\u7684\u4e0d\u4f1aLCT\u7684\u849f\u84bb\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u90a3\u5c31\u662f\u76f4\u63a5\u7528fa[]\u6570\u7ec4\u6765\u7ef4\u7cfb\u8fd9\u68f5\u6811\u3002\u6bd4\u5982\u8bf4\uff0c\u8981\u628au,v\u76f8\u8fde\uff0c\u9996\u5148\u628au\u5411\u4e0a\u7528fa\u6570\u7ec4\u8dd1\uff0c\u7136\u540e\u4e00\u8def\u5c06fa\u6570\u7ec4\u53cd\u5411\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503cfa[u]=v\u3002\n\n\u4f46\u662f\u5199\u7684\u65f6\u5019\u8fd8\u662f\u5fc3\u865a\uff0c\u6240\u4ee5\u5199\u7684\u5341\u5206\u5c0f\u5fc3\uff0c\u5e94\u8be5\u628a\u5e38\u6570\u5f04\u5230\u6700\u5c0f\u4e86\u3002**\u4ee3\u7801\u4e00\u5b9a\u4e0d\u80fd\u5199\u4e11**\n\n## code\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int _=1e6+22;\nint fa[1001],g[1001][1001],n,m,Q,anss[_/10],mm,par[1001],sign[1001],cnt;\nint rec[1001];\nstruct Edge{\n\tint u,v,w;\n}e[_],e1[_];\nstruct MO{\n\tint u,v,k;\n}mo[_];\ninline char gc(){\n\tstatic char buf[1<<6],*p1=buf,*p2=buf;\n\treturn (p1==p2)&&(p2=(p1=buf)+fread(buf,1,1<<6,stdin),p1==p2)?EOF:*p1++;\n}\ntemplate <class T>\ninline void read(T&data){\n\tdata=0;\n\tregister char ch=0;\n\twhile(ch<'0'||ch>'9')ch=gc();\n\twhile(ch<='9'&&ch>='0'){\n\t\tdata=(data<<1)+(data<<3)+(ch^48);\n\t\tch=gc();\n\t}\n}\ntemplate <class R>\ninline void write(R data){\n\tif(data>9)write(data/10);\n\tputchar('0'+data%10);\n}\nbool cmp(register Edge a,register Edge b){return a.w<b.w;}\nint fi(register int x){return x==par[x]?x:par[x]=fi(par[x]);}\nint main(){\n\tread(n),read(m),read(Q);\n\tregister int i,u,v,fu,fv,ff,qq,now,LCA,ans,ANS;\n\tfor(i=1;i<=m;++i){\n\t\tregister Edge & fff=e1[i];\n\t\tread(fff.u),read(fff.v),read(fff.w);\n\t}\n\tfor(i=1;i<=Q;++i){\n\t\tregister MO& IOI=mo[i]; \n\t\tread(IOI.k),read(IOI.u),read(IOI.v);\n\t\tif(IOI.k==2)g[IOI.v][IOI.u]=1,g[IOI.u][IOI.v]=1;\n\t}\n\tfor(i=1;i<=m;++i){\n\t\tregister int &IOI=g[e1[i].u][e1[i].v];\n\t\tif(!IOI)e[++mm]=e1[i];\n\t\tIOI=g[e1[i].v][e1[i].u]=e1[i].w;\n\t}\n\tsort(e+1,e+mm+1,cmp);\n\tfor(i=1;i<=n;++i)par[i]=i;\n\tfor(i=1;i<=mm;++i){\n\t\tu=e[i].u,v=e[i].v,fu=fi(u),fv=fi(v);\n\t\tif(fu==fv)continue;\n\t\tpar[fu]=fv,ff=fa[u],qq=u;\n\t\twhile(ff)\n\t\t\tswap(fa[ff],qq),swap(ff,qq);\t\t\t\n\t\tfa[u]=v;\n\t}\n\tfor(i=Q;i;--i){\n\t\tu = mo[i].u,v=mo[i].v,now=u,rec[now]=0;\n\t\twhile(now){sign[now]=i,rec[fa[now]]=max(rec[now],g[now][fa[now]]),now=fa[now];}\n\t\tLCA=v,ans=0,ANS=0;\n\t\twhile(LCA&&sign[LCA]!=i){ans=max(ans,g[LCA][fa[LCA]]),LCA=fa[LCA];}\n\t\tANS=max(ans,rec[LCA]);\n\t\tif(mo[i].k==1){anss[++cnt]=ANS;}\n\t\telse {\n\t\t\tif(ANS<=g[u][v])continue;\n\t\t\tif(ans>rec[LCA])swap(u,v);\n\t\t\tff=fa[u],qq=u;\n\t\t\twhile(g[qq][ff]!=ANS){\n\t\t\t\tswap(fa[ff],qq),swap(ff,qq);\n\t\t\t}\n\t\t\tfa[u]=v;\n\t\t}\n\t\t\t\t\n\t}\n\tfor(i=cnt;i;--i)write(anss[i]),puts(\"\");\n\treturn 0;\t\n}\n\n```\n\n\n\n",
        "postTime": 1537349285,
        "uid": 70313,
        "name": "\u5b66\u54e5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\uff08\u8c8c\u4f3c\u8981\u7701\u9009\u4e86\uff1f\u4f3c\u4e4e\u4e0d\u5173\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u4e8b\uff0c\u8fd8\u662f\u7ed9OIers\u4eec\u52a0\u6cb9\u5427\uff01\uff09\n\u7b2c\u4e00\u6b21\u5b66\u5230\u4e86\u8fb9\u8f6c\u6362\u4e3a\u70b9\u7684\u795e\u5947\u64cd\u4f5c\u3002\n\u7531\u4e8e\u8981\u627e\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u7684\u6700\u957f\u5ea6\uff08\u5f88\u7ed5\u81ea\u7406\u89e3\uff09\uff0c\u8fd8\u662f\u5f88\u5bb9\u6613\u5c31\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u3002\u518d\u7531\u4e8e\u60f3\u5230\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u5220\u8fb9\u8fd8\u662f\u5f88\u590d\u6742\u7684\u5c31\u60f3\u5230\u8fd9\u9053\u9898\u7684\u5220\u8fb9\u79bb\u7ebf\u5012\u7740\u6765\u505a\uff0c\u5c06\u5220\u8fb9\u8f6c\u6362\u6210\u52a0\u8fb9\u6765\u505a\u5c31\u543c\u4e86\u3002\n\n\u4f46\u662f\u6743\u503c\u5168\u662f\u5728\u8fb9\u4e0a\u7684\uff0c\u600e\u4e48\u6765\u641e\uff08\u53ea\u4f1a\u70b9\u4e0a\u7684LCT\uff09\u3002\u3002\u4e8e\u662f\u7ffb\u4e86\u9898\u89e3\uff0c\u53d1\u73b0\u4e86\u795e\u5947\u7684\u64cd\u4f5c\u2014\u300b\u5c06\u8fb9\u8f6c\u6362\u6210\u70b9\u6765\u64cd\u4f5c\uff0c\u8fb9\u8f6c\u6210\u7684\u70b9\u6743\u503c\u4fbf\u662f\u8fb9\u6743\u503c\uff0c\u70b9\u7f16\u53f7\u4e3an+\u8fb9\u7f16\u53f7\u3002\u56e0\u6b64\u8fd9\u6837\u5c31\u641e\u5b9a\u4e86\u5b58\u50a8\u95ee\u9898\u3002\n\n\u8003\u8651\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7531\u4e8e\u662f\u5012\u7740\u6765\u8003\u8651\uff0c\u56e0\u6b64\u5728\u7ed3\u5c3e\u662f\u53ef\u4ee5\u7528kruskal\u6216\u8005prim\u6765\u641e\u51fa\u4e00\u5f20\u6700\u5c0f\u751f\u6210\u6811\u7684\u56fe\u7684\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5link\u4e00\u4e0b\u8d77\u70b9\u4e0e\u8fb9\u70b9\u7136\u540elink\u4e00\u4e0b\u8fb9\u70b9\u548c\u7ec8\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u8be2\u95ee\u65f6\u4e5f\u5f88\u7b80\u5355\uff0csetroot(x),access(y),splay(y),return dat[mx[y]]\u5c31\u627e\u5230\u4e86\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8def\u3002\n\n\u76f8\u5bf9\u8f83\u590d\u6742\u7684\u662f\u52a0\u8fb9\u64cd\u4f5c\u3002\u4e0d\u8fc7\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u52a0\u8fb9\uff08x,y\uff09\u4e4b\u540e\u80af\u5b9a\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\u7684\u3002\u800c\u6211\u4eec\u5148\u627e\u5230\u8fd9\u6761\u8def\u5f84(x,y)\u4e0a\u7684\u6700\u5927\u8def\uff0c\u5224\u65ad\u52a0\u7684\u8fb9\u6743\u662f\u5426\u5c0f\u4e8e\u8fd9\u4e2a\u6700\u5927\u8def\uff0c\u5c0f\u4e8e\u5c31\u5148cut\u6389\u6700\u5927\u8def\uff0c\u7136\u540elink(x,y)\u8fdb\u53bb\uff0c\u5426\u5219\u5c31\u4e0d\u7ba1\u8fd9\u4e2a\u52a0\u8fb9\uff0c\u5c31\u8fd9\u6837\u5c31\u59cb\u7ec8\u7528LCT\u7ef4\u62a4\u597d\u4e86\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u3002\n```cpp\n#include<bits/stdc++.h>\n#define zig(x) zigzag(x,1)\n#define zag(x) zigzag(x,2)\nusing namespace std;\nint bingchafa[1005];\nint gf(int x) { return bingchafa[x]==x?x:bingchafa[x]=gf(bingchafa[x]); }\nstruct edge\n{\n    int a,b,c;\n} bian[200005];\nint n,m,q; int bianid[1005][1005],bianxx[200005],bianyy[200005];\nint bbian[1005][1005];\nstruct cz\n{\n    int k,a,b;\n}caozuo[200005];\nbool operator<(const edge &aa,const edge &bb)\n{\n    return aa.c<bb.c;\n}\nint rev[210005],ls[200005],rs[200005],fa[200005],dat[200005],mx[200005];\nint ans[200005];\nbool isroot(int x) { return rs[fa[x]]!=x&&ls[fa[x]]!=x; }\nvoid putdowm(int x)\n{\n    if(!rev[x]) return ;\n    swap(ls[x],rs[x]); rev[ls[x]]^=1; rev[rs[x]]^=1; rev[x]=0;\n}\nvoid putup(int x)\n{\n\tmx[x]=x;\n\tif(dat[mx[ls[x]]]>dat[mx[x]]) mx[x]=mx[ls[x]];\n\tif(dat[mx[rs[x]]]>dat[mx[x]]) mx[x]=mx[rs[x]];\n}\nvoid zigzag(int x,int knd)\n{\n    int y=fa[x],z=fa[y];\n    if(!isroot(y))\n    {\n        if(ls[z]==y) ls[z]=x;\n        else rs[z]=x;\n    }\n    fa[x]=z; fa[y]=x;\n    if(knd==1)\n    {\n        ls[y]=rs[x];\n        fa[ls[y]]=y;\n        rs[x]=y;\n    }\n    else \n    {\n        rs[y]=ls[x];\n        fa[rs[y]]=y;\n        ls[x]=y;\n    }\n    putup(y); putup(x);\n}\nvoid putdowmall(int x)\n{\n    if(!isroot(x)) putdowmall(fa[x]);\n    putdowm(x);\n}\nvoid splay(int x)\n{\n    int y,z; putdowmall(x);\n    while(!isroot(x))\n    {\n        y=fa[x],z=fa[y];\n        if(isroot(y))\n        {\n            if(ls[y]==x) zig(x);\n            else zag(x);\n        }\n        else\n        {\n            if(ls[z]==y)\n            {\n                if(ls[y]==x) { zig(y); zig(x); }\n                else { zag(x); zig(x); }\n            }\n            else\n            {\n                if(rs[y]==x) { zag(y); zag(x); }\n                else { zig(x); zag(x); }\n            }\n        }\n    }\n}\nvoid acc(int x)\n{\n    for(int y=0;x;y=x,x=fa[x])\n    {\n        splay(x);\n        rs[x]=y;\n        putup(x);\n    }\n}\nvoid setroot(int x)\n{\n    acc(x); splay(x); rev[x]^=1;\n}\nvoid link(int x,int y)\n{\n    setroot(x); fa[x]=y;\n}\nvoid cut(int x,int y)\n{\n    setroot(x); acc(y); splay(y);\n    ls[y]=fa[x]=0; putup(x); putup(y);\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&bian[i].a,&bian[i].b,&bian[i].c); dat[i+n]=bian[i].c;\n\t\tbianid[bian[i].a][bian[i].b]=bianid[bian[i].b][bian[i].a]=i+n;\n\t\tdat[i+n]=bian[i].c; bianxx[i+n]=bian[i].a; bianyy[i+n]=bian[i].b;\n    }\n    for(int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d%d\",&caozuo[i].k,&caozuo[i].a,&caozuo[i].b);\n        if(caozuo[i].k==2) { bbian[caozuo[i].a][caozuo[i].b]=bbian[caozuo[i].b][caozuo[i].a]=1; }\n    }\n    sort(bian+1,bian+1+m);\n    int dian=n-1;\n    int x,y;\n    for(int i=1;i<=n;i++) bingchafa[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        if(bbian[bian[i].a][bian[i].b]) continue;\n        x=gf(bian[i].a); y=gf(bian[i].b);\n        if(x==y) continue;\n        bingchafa[x]=y;\n        link(bian[i].a,bianid[bian[i].a][bian[i].b]); link(bian[i].b,bianid[bian[i].a][bian[i].b]);\n        dian--;\n        if(!dian) break;\n    }\n    for(int i=q;i>=1;i--)\n    {\n    \t    x=caozuo[i].a;\n\t\t\ty=caozuo[i].b;\n        if(caozuo[i].k==1)\n        {\n        \tsetroot(x); acc(y); splay(y);\n        \tans[i]=dat[mx[y]];\n        }\n        else\n        {\n        \tsetroot(x); acc(y); splay(y);\n        \tint  idd=bianid[x][y];\n        \tif(dat[mx[y]]>dat[idd])\n        \t{\n        \t\tint z=mx[y];\n        \t\tcut(bianyy[z],z); cut(bianxx[z],z);\n        \t\tlink(idd,x); link(idd,y);\n        \t}\n        }\n    }\n    for(int  i=1;i<=q;i++)\n    {\n    \tif(caozuo[i].k==1) printf(\"%d\\n\",ans[i]);\n    }\n} \n```\n\u6b22\u8fce\u6765[Newuser\u5c0f\u7ad9](https://www.newuser.top)\u901b\u901b\uff01",
        "postTime": 1523259713,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "SC \u7701 MY \u5e02\u6709\u7740\u5e9e\u5927\u7684\u5730\u4e0b\u6c34\u7ba1\u7f51\u7edc\uff0c\u561f\u561f\u662f MY \u5e02\u7684\u6c34\u7ba1\u5c40\u957f\uff08\u5c31\u662f\u7ba1\u6c34\u7ba1\u7684\u5566\uff09\uff0c\u561f\u561f\u4f5c\u4e3a\u6c34\u7ba1\u5c40\u957f\u7684\u5de5\u4f5c\u5c31\u662f\uff1a\u6bcf\u5929\u4f9b\u6c34\u516c\u53f8\u53ef\u80fd\u8981\u5c06\u4e00\u5b9a\u91cf\u7684\u6c34\u4ece $x$ \u5904\u9001\u5f80 $y$ \u5904\uff0c\u561f\u561f\u9700\u8981\u4e3a\u4f9b\u6c34\u516c\u53f8\u627e\u5230\u4e00\u6761\u4ece $A$ \u81f3 $B$ \u7684\u6c34\u7ba1\u7684\u8def\u5f84\uff0c\u63a5\u7740\u901a\u8fc7\u4fe1\u606f\u5316\u7684\u63a7\u5236\u4e2d\u5fc3\u901a\u77e5\u8def\u5f84\u4e0a\u7684\u6c34\u7ba1\u8fdb\u5165\u51c6\u5907\u9001\u6c34\u72b6\u6001\uff0c\u7b49\u5230\u8def\u5f84\u4e0a\u6bcf\u4e00\u6761\u6c34\u7ba1\u90fd\u51c6\u5907\u597d\u4e86\uff0c\u4f9b\u6c34\u516c\u53f8\u5c31\u53ef\u4ee5\u5f00\u59cb\u9001\u6c34\u4e86\u3002\u561f\u561f\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u9879\u9001\u6c34\u4efb\u52a1\uff0c\u7b49\u5230\u5f53\u524d\u7684\u9001\u6c34\u4efb\u52a1\u5b8c\u6210\u4e86\uff0c\u624d\u80fd\u5904\u7406\u4e0b\u4e00\u9879\u3002\n\n\u5728\u5904\u7406\u6bcf\u9879\u9001\u6c34\u4efb\u52a1\u4e4b\u524d\uff0c\u8def\u5f84\u4e0a\u7684\u6c34\u7ba1\u90fd\u8981\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u51c6\u5907\u64cd\u4f5c\uff0c\u5982\u6e05\u6d17\u3001\u6d88\u6bd2\u7b49\u7b49\u3002\u561f\u561f\u5728\u63a7\u5236\u4e2d\u5fc3\u4e00\u58f0\u4ee4\u4e0b\uff0c\u8fd9\u4e9b\u6c34\u7ba1\u7684\u51c6\u5907\u64cd\u4f5c\u540c\u65f6\u5f00\u59cb\uff0c\u4f46\u7531\u4e8e\u5404\u6761\u7ba1\u9053\u7684\u957f\u5ea6\u3001\u5185\u5f84\u4e0d\u540c\uff0c\u8fdb\u884c\u51c6\u5907\u64cd\u4f5c\u9700\u8981\u7684\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c\u3002\u4f9b\u6c34\u516c\u53f8\u603b\u662f\u5e0c\u671b\u561f\u561f\u80fd\u627e\u5230\u8fd9\u6837\u4e00\u6761\u9001\u6c34\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ba1\u9053\u5168\u90fd\u51c6\u5907\u5c31\u7eea\u6240\u9700\u8981\u7684\u65f6\u95f4\u5c3d\u91cf\u77ed\u3002\u561f\u561f\u5e0c\u671b\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5b8c\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u9009\u62e9\u8def\u5f84\u7684\u7cfb\u7edf\uff0c\u4ee5\u6ee1\u8db3\u4f9b\u6c34\u516c\u53f8\u7684\u8981\u6c42\u3002\u53e6\u5916\uff0c\u7531\u4e8e MY \u5e02\u7684\u6c34\u7ba1\u5e74\u4ee3\u4e45\u8fdc\uff0c\u4e00\u4e9b\u6c34\u7ba1\u4f1a\u4e0d\u65f6\u51fa\u73b0\u6545\u969c\u5bfc\u81f4\u4e0d\u80fd\u4f7f\u7528\uff0c\u4f60\u7684\u7a0b\u5e8f\u5fc5\u987b\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u3002\n\n\u4e0d\u59a8\u5c06 MY \u5e02\u7684\u6c34\u7ba1\u7f51\u7edc\u770b\u4f5c\u4e00\u5e45\u7b80\u5355\u65e0\u5411\u56fe\uff08\u5373\u6ca1\u6709\u81ea\u73af\u6216\u91cd\u8fb9\uff09\uff1a\u6c34\u7ba1\u662f\u56fe\u4e2d\u7684\u8fb9\uff0c\u6c34\u7ba1\u7684\u8fde\u63a5\u5904\u4e3a\u56fe\u4e2d\u7684\u7ed3\u70b9\u3002\n\n------\n\n\u8fd9\u9053\u9898\u53ea\u6709\u5220\u8fb9\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u505a\u662f\u52a0\u8fb9\u64cd\u4f5c\uff0c\u8fd9\u6837\u597d\u5904\u7406\u4e00\u70b9\u3002\n\n\u9898\u76ee\u4fdd\u8bc1\u4e86\u56fe\u65e0\u8bba\u600e\u4e48\u5220\u8fb9\u90fd\u4fdd\u8bc1\u8054\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u56fe\u5220\u5b8c\u3002\u5220\u5b8c\u540e\u6211\u4eec\u5462\u6c42\u51fa\u56fe\u7684MST, \u90a3\u4e48\u4efb\u610f\u4e24\u70b9\u5728\u8fd9\u9897MST\u4e0a\u8d70\u90fd\u662f\u6700\u4f18\u7684~~\u522b\u95ee\u6211\u600e\u4e48\u8bc1\u8d2a\u5fc3\u662f\u7528\u6765\u8bc1\u7684\u5417~~\u3002\u6211\u4eec\u53ef\u4ee5\u7528LCT\u6765\u7ef4\u62a4\u8fd9\u9897MST\uff0cSplay\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c(\u4e5f\u5c31\u662f\u94fe\u4e0a\u7684\u6700\u5927\u503c)\n\n\u8003\u8651\u52a0\u8fb9\u64cd\u4f5c\u3002\u4e0a\u9762\u6211\u63d0\u5230\u4e86\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u4efb\u610f\u4e24\u70b9\u5728\u8fd9\u9897MST\u4e0a\u8d70\u90fd\u662f\u6700\u4f18\u7684\u3002\u5982\u679c\u6b64\u65f6\u6211\u4eec\u5728MST\u4e0a\u4efb\u610f\u52a0\u4e00\u6761\u8fb9\u90fd\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u70b9\u5165\u73af\uff0c\u4efb\u610f\u4e00\u70b9\u51fa\u73af\uff0c\u65b9\u5411\u968f\u610f\u3002\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u6700\u4f18\u89e3\u59cb\u7ec8\u80fd\u907f\u5f00\u6700\u957f\u7684\u4e00\u6761\u8fb9\uff01\n\n\u8003\u5bdf\u8fd9\u4e2a\u73af\uff0c\u7528lct\u7684split\u64cd\u4f5c\u63d0\u51fa`\u94fe`\u7684\u4fe1\u606f\uff0c\u67e5\u51fa\u6700\u5927\u7684\u6743\u503c\u3002\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u6743\u503c\u6700\u5927\u7684\u8fb9\u6765\u4fdd\u8bc1`\u73af`\u4e0a\u7684\u6700\u4f18\u3002\n\n\u600e\u4e48\u6c42\u51fa\u8fd9\u6761\u8fb9\u5462\uff1f\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u6765\u627e\n\n\u518d\u6765\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u7ef4\u62a4\u8fb9\u5462\uff1f\n\n\u8003\u8651\u7528\u4e00\u4e2a\u70b9\u6765\u8868\u793a\u4e00\u6761\u8fb9\u3002\n\n\u6700\u540e`\u9006\u5e8f`\u52a0\u8fb9\uff0c\u628a\u7b54\u6848`\u9006\u5e8f`\u8f93\u51fa\u5373\u53ef\n\n(~~\u826f\u5fc3\u9898\u89e3~~)\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <stack>\n#define mid ((l + r) >> 1)\n#define mp make_pair\n#define fir first\n#define sec second\n#define pub push_back\n#define pob pop_back\n\nusing namespace std;\ntypedef long long LL;\n\n#define io_e '\\0'\n#define io_s ' '\n#define io_l '\\n'\n #define _DEBUG_ 1 // debug toggle\nnamespace Fast_IO {\n#ifndef _DEBUG_\n\t#define gc() (iS == iT ? (iT = (iS = ibuff) + fread(ibuff, 1, SIZ, stdin), (iS == iT ? EOF : *iS++)) : *iS++)\n#else\n\t#define gc() getchar()\n#endif\n\tconst int SIZ = 1 << 21 | 1;\n\tchar *iS, *iT, ibuff[SIZ], obuff[SIZ], *oS = obuff, *oT = oS + SIZ - 1, fu[110], c;\n\tint fr;\n\tinline void ioout() {\n\t    fwrite(obuff, 1, oS - obuff, stdout);\n\t    oS = obuff;\n\t}\n\ttemplate <class Type>\n\tinline void read(Type& x) {\n\t    x = 0;\n\t    Type y = 1;\n\t    for (c = gc(); (c > '9' || c < '0') && c ^ '-'; c = gc())\n\t        ;\n\t    c == '-' ? y = -1 : x = (c & 15);\n\t    for (c = gc(); c >= '0' && c <= '9'; c = gc()) x = x * 10 + (c & 15);\n\t    x *= y;\n\t}\n\tinline bool blank(char ch) { return ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t'; }\n\tinline void read(char* s) {\n\t    register char ch = gc();\n\t    for (; blank(ch); ch = gc())\n\t        ;\n\t    for (; !blank(ch); ch = gc()) *s++ = ch;\n\t    *s = 0;\n\t}\n\tinline void read(char& c) {\n\t    for (c = gc(); blank(c); c = gc())\n\t        ;\n\t}\n\ttemplate <typename Type, typename... Args>\n\tinline void read(Type& t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <typename... Args>\n\tinline void read(char* t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <typename... Args>\n\tinline void read(char& t, Args&... args) {\n\t    read(t), read(args...);\n\t}\n\ttemplate <class Type>\n\tinline void write(char lastChar, Type x) {\n\t    if (x < 0)\n\t        *oS++ = '-', x = -x;\n\t    if (x == 0)\n\t        *oS++ = '0';\n\t    while (x) fu[++fr] = x % 10 + '0', x /= 10;\n\t    while (fr) *oS++ = fu[fr--];\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\tinline void write(char lastChar, char x[]) {\n\t    for (register int i = 0; x[i]; ++i) *oS++ = x[i];\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\tinline void write(char lastChar, char x) {\n\t    *oS++ = x;\n\t    *oS++ = lastChar;\n\t    ioout();\n\t}\n\ttemplate <typename Type, typename... Args>\n\tinline void write(char midChar, Type t, Args... args) {\n\t    write(midChar, t), write(midChar, args...);\n\t}\n}  // namespace Fast_IO\n\nusing Fast_IO::read;\nusing Fast_IO::write;\n\nnamespace LinkCutTree {\n\tconst int SIZE = 12e4 + 5;\n\tstruct SPLAY {\n\t\tint ch[2];\n\t\tint fa;\n\t\tint key;\n\t\tint maxValue;\n\t\tint lazyTag;\n\t} T[SIZE];\n\tstack < int > MemoryWaste; \n\t#define ls T[x].ch[0]\n\t#define rs T[x].ch[1]\n\t#define WhichSon(x) (T[T[x].fa].ch[1] == x)\n\t#define IsRoot(x) (T[T[x].fa].ch[0] ^ x && T[T[x].fa].ch[1] ^ x)\n\t\n\tvoid UpdateMessage(int x) {\n\t\tT[x].maxValue = max(max(T[ls].maxValue, T[x].key), T[rs].maxValue);\n\t}\n\t\n\tvoid UpdateSons(int x) {\n\t\tif (T[x].lazyTag) {\n\t\t\tls ^= rs ^= ls ^= rs;\n\t\t\tT[x].lazyTag = 0;\n\t\t\tT[ls].lazyTag ^= 1;\n\t\t\tT[rs].lazyTag ^= 1;\n\t\t}\n\t}\n\t\n\tvoid RotateNode(int x) {\n\t\tint y = T[x].fa;\n\t\tif (!IsRoot(y)) T[T[y].fa].ch[WhichSon(y)] = x;\n\t\tbool k = WhichSon(x);\n\t\tT[x].fa = T[y].fa;\n\t\tT[y].fa = x;\n\t\tT[y].ch[k] = T[x].ch[k ^ 1];\n\t\tT[T[y].ch[k]].fa = y;\n\t\tT[x].ch[k ^ 1] = y;\n\t\tUpdateMessage(y);\n\t\tUpdateMessage(x);\n\t}\n\t\n\tvoid LinkSplay(int x) {\n\t\tint u = x;\n\t\twhile (!IsRoot(u)) MemoryWaste.push(u), u = T[u].fa;\n\t\tMemoryWaste.push(u);\n\t\twhile (MemoryWaste.size()) UpdateSons(MemoryWaste.top()), MemoryWaste.pop();\n\t\tfor (; !IsRoot(x); RotateNode(x)) {\n\t\t\tint y = T[x].fa;\n\t\t\tif (!IsRoot(y))\n\t\t\t\tRotateNode(WhichSon(x) ^ WhichSon(y) ? x : y);\n\t\t}\n\t}\n\tvoid AccessEdge(int x) {\n\t\tfor (int u = x, y = 0; u; y = u, u = T[u].fa) {\n\t\t\tLinkSplay(u);\n\t\t\tT[u].ch[1] = y;\n\t\t\tUpdateMessage(u);\n\t\t}\n\t}\n\t\n\tvoid MakeRoot(int x) {\n\t\tAccessEdge(x);\n\t\tLinkSplay(x);\n\t\tT[x].lazyTag ^= 1;\n\t}\n\t\n\tvoid SplitTree(int x, int y) {\n\t\tMakeRoot(x);\n\t\tAccessEdge(y);\n\t\tLinkSplay(y);\n\t}\n\t\n\tvoid LinkTree(int x, int y) {\n\t\tMakeRoot(x);\n\t\tT[x].fa = y;\n\t}\n\t\n\tvoid CutTree(int x, int y) {\n\t\tMakeRoot(x);\n\t\tAccessEdge(y);\n\t\tLinkSplay(y);\n\t\tT[x].fa = T[y].ch[0] = 0;\n\t}\n\t\n\tint FindByKey(int x, int u) {\n\t\tif (T[x].key == u) return x;\n\t\telse if (T[ls].maxValue == u) return FindByKey(ls, u);\n\t\telse return FindByKey(rs, u);\n\t}\n} // namespace LinkCutTree\n\nusing namespace LinkCutTree;\n\nint F[1005][1005], U[101000], V[101000];\nint OP[101000], ans[101000], n, m, QueryNumber;\nstruct EdgeNode {\n\tint x, y;\n\tint val, key;\n\tEdgeNode() { key = 1; }\n\tfriend bool operator < (EdgeNode X, EdgeNode Y) {\n\t\treturn X.val < Y.val;\n\t}\n} e[101000];\nstruct UnionFindSet {\n\tint fa[1010];\n\t\n\tint find(int x) {\n\t\tif (x ^ fa[x]) fa[x] = find(fa[x]);\n\t\treturn fa[x];\n\t}\n\t\n\tvoid merge(int x, int y) {\n\t\tint u = find(x), v = find(y);\n\t\tif (u ^ v) fa[u] = v;\n\t}\n\t\n\tvoid init(int n, int m) {\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tfa[i] = i;\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tif (e[i].key && find(e[i].x) ^ find(e[i].y)) {\n\t\t\t\tmerge(e[i].x, e[i].y);\n\t\t\t\tLinkTree(e[i].x, n + i);\n\t\t\t\tLinkTree(e[i].y, n + i);\n\t\t\t}\n\t\t}\n\t}\n} ufs;\n\nsigned main() {\n\tread(n, m, QueryNumber);\n\tfor (int i = 1; i <= m; ++i)\n\t\tread(e[i].x, e[i].y, e[i].val);\n\tsort(e + 1, e + 1 + m);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tF[e[i].x][e[i].y] = i;\n\t\tF[e[i].y][e[i].x] = i;\n\t\tT[n + i].key = e[i].val;\n\t}\n\tfor (int i = 1; i <= QueryNumber; ++i) {\n\t\tread(OP[i], U[i], V[i]);\n\t\tif (OP[i] == 2) e[F[U[i]][V[i]]].key = 0;\n\t}\n\tufs.init(n, m);\n\tint EdgeCount = 0;\n\tfor (int i = QueryNumber; i >= 1; --i) {\n\t\tSplitTree(U[i], V[i]);\n\t\tif (OP[i] == 1) ans[++EdgeCount] = T[V[i]].maxValue;\n\t\telse {\n\t\t\tint Temporary = FindByKey(V[i], T[V[i]].maxValue);\n\t\t\tif (T[F[U[i]][V[i]] + n].key < T[V[i]].maxValue) {\n\t\t\t\tCutTree(e[Temporary - n].x, Temporary);\n\t\t\t\tCutTree(e[Temporary - n].y, Temporary);\n\t\t\t\tLinkTree(U[i], F[U[i]][V[i]] + n);\n\t\t\t\tLinkTree(V[i], F[U[i]][V[i]] + n);\n\t\t\t}\t\n\t\t}\n\t}\n\tfor (int i = EdgeCount; i >= 1; --i)\n\t\twrite(io_l, ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1580217662,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.com.cn/problem/P4172)\n## \u4e8c\u3001\u89e3\u6cd5\n\u7b80\u8ff0\u4e00\u4e0b\u9898\u610f\u5427\uff0c\u672c\u9898\u5c31\u662f\u7ed9\u4f60$n$\u4e2a\u70b9$m$\u6761\u8fb9\uff0c\u652f\u6301\u4e0b\u9762\u4e24\u79cd\u64cd\u4f5c\uff1a\n- 1\u3001\u8be2\u95ee$(x,y)$\u6240\u6709\u8def\u5f84\u4e0a\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n- 2\u3001\u53bb\u6389\u8fb9$(x,y)$\uff0c\u4fdd\u8bc1\u8fb9\u5728\u7ed9\u5b9a\u7684$m$\u6761\u8fb9\u4e2d\uff0c\u5e76\u4e14\u56fe\u4efb\u4f55\u65f6\u5019\u8054\u901a\u3002\n\n\u8003\u8651\u8be2\u95ee\uff0c\u5982\u679c\u6211\u4eec\u80fd\u7ef4\u62a4\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48$(x,y)$\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u8def\u5f84\u7684\u6700\u5927\u503c\u5373\u662f\u7b54\u6848\uff0c\u4f46\u662f\u672c\u9898\u9700\u8981\u5220\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5220\u8fb9\u9006\u5e8f\uff0c\u5c31\u53d8\u6210\u4e86\u52a0\u8fb9\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u52a8\u6001\u7ef4\u62a4\u8fd9\u9897\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528$lct$\uff0c\u6211\u4eec\u91cd\u65b0\u5199\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u52a0\u8fb9\u51fd\u6570\uff0c\u5982\u679c\u8fb9\u7684\u4e24\u7aef\u4e0d\u8fde\u901a\uff0c\u76f4\u63a5\u52a0\u5165\uff1b\u5426\u5219\u627e\u5230\u8fd9\u6761\u8fb9\u6784\u6210\u7684\u73af\u4e0a\u7684\u6700\u5927\u503c\uff0c\u548c\u65b0\u52a0\u7684\u8fd9\u4e00\u6761\u8fb9\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u65b0\u52a0\u7684\u8fd9\u6761\u8fb9\u5927\u5219\u4e0d\u64cd\u4f5c\uff0c\u5426\u5219\u6211\u4eec\u5220\u9664\u73af\u4e0a\u7684\u6700\u5927\u8fb9\u4e4b\u540e\u518d\u52a0\u4e0a\u8fd9\u6761\u8fb9\uff0c$lct$\u4e2d\u7ef4\u62a4\u6700\u5927\u8fb9\u6743\u548c\u6700\u5927\u8fb9\u6743\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f$lct$\u5904\u7406\u4e0d\u4e86\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u770b\u6210\u70b9\uff0c\u8fde\u63a5$(x,y)$\u5c31\u4ee3\u8868\u8fde\u63a5$(x,id),(id,y)$\uff0c$id$\u662f\u8fb9\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u628a\u8fb9\u6743\u653e\u5728\u8fd9\u4e2a\u70b9\u4e0a\u3002\n\n\u636e\u8bf4\u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u6570\u636e\u52a0\u5f3a\u7248\uff0c\u849f\u84bb\u7684\u4ee3\u7801\u5199\u7684\u592a\u4e11\u4e86\uff0c\u8fc7\u4e0d\u4e86\uff0c\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\u3002\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <map>\nusing namespace std;\nconst int Q = 100005;\nconst int M = 110005;\nint read()\n{\n\tint x=0,flag=1;char c;\n\twhile((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n\twhile(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn x*flag;\n}\nint n,m,q,a[M],b[M],c[M],op[Q],x[Q],y[Q],ans[Q];\nint par[M],ch[M][2],val[M],Max[M],pos[M],fl[M],st[M];\nmap<int,int> mp,id;\nint nrt(int x)\n{\n\treturn ch[par[x]][0]==x || ch[par[x]][1]==x;\n}\nint Hash(int a,int b)\n{\n    if(a>=b) swap(a,b);\n    return 1ll*a*n+b;\n}\nint chk(int x)\n{\n\treturn ch[par[x]][1]==x;\n}\nvoid push_up(int x)\n{\n\tif(!x) return ;\n\tMax[x]=max(val[x],max(Max[ch[x][0]],Max[ch[x][1]]));\n\tif(Max[x]==val[x]) pos[x]=x;\n\telse if(Max[x]==Max[ch[x][0]]) pos[x]=pos[ch[x][0]];\n\telse if(Max[x]==Max[ch[x][1]]) pos[x]=pos[ch[x][1]];\n}\nvoid flip(int x)\n{\n\tif(!x) return ;\n\tswap(ch[x][0],ch[x][1]);\n\tfl[x]^=1;\n}\nvoid push_down(int x)\n{\n\tif(!x) return ;\n\tif(fl[x])\n\t{\n\t\tflip(ch[x][0]);flip(ch[x][1]);\n\t\tfl[x]=0;\n\t}\n}\nvoid rotate(int x)\n{\n\tint y=par[x],z=par[y],k=chk(x),w=ch[x][k^1];\n\tch[y][k]=w;par[w]=y;\n\tif(nrt(y)) ch[z][chk(y)]=x;par[x]=z;\n\tch[x][k^1]=y;par[y]=x;\n\tpush_up(y);push_up(x);\n}\nvoid splay(int x)\n{\n\tint y=x,z=0;\n\tst[++z]=y;\n\twhile(nrt(y)) st[++z]=y=par[y];\n\twhile(z) push_down(st[z--]);\n\twhile(nrt(x))\n\t{\n\t\tint y=par[x],z=par[y];\n\t\tif(nrt(y))\n\t\t{\n\t\t\tif(chk(y)==chk(x)) rotate(y);\n\t\t\telse rotate(x);\n\t\t}\n\t\trotate(x);\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y=0;x;x=par[y=x])\n\t\tsplay(x),ch[x][1]=y,push_up(x);\n}\nvoid makeroot(int x)\n{\n\taccess(x);splay(x);\n\tflip(x);\n}\nint findroot(int x)\n{\n\taccess(x);splay(x);\n\twhile(ch[x][0]) push_down(x),x=ch[x][0];\n\tsplay(x);\n\treturn x;\n}\nvoid split(int x,int y)\n{\n\tmakeroot(x);\n\taccess(y);splay(y);\n}\nvoid link(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)!=x) par[x]=y;\n}\nvoid cut(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)==x && par[y]==x && !ch[y][0])\n\t{\n\t\tpar[y]=ch[x][1]=0;\n\t\tpush_up(x);\n\t}\n}\nvoid add(int i)\n{\n    val[i+n]=c[i];push_up(i+n);\n    if(findroot(a[i])^findroot(b[i]))\n    {\n        link(a[i],i+n);link(i+n,b[i]);\n        return ;\n    }\n    split(a[i],b[i]);\n    if(Max[b[i]]<=c[i]) return ;\n    int t=pos[b[i]];\n    cut(a[t-n],pos[t]);cut(pos[t],b[t-n]);\n    link(a[i],i+n);link(i+n,b[i]);\n}\nint main()\n{\n    Max[0]=-(1<<30);\n    n=read();m=read();q=read();\n    for(int i=1;i<=m;i++)\n    {\n        a[i]=read();b[i]=read();c[i]=read();\n        id[Hash(a[i],b[i])]=i;\n    }\n    for(int i=1;i<=q;i++)\n    {\n        op[i]=read();x[i]=read();y[i]=read();\n        if(op[i]==2)\n            mp[Hash(x[i],y[i])]=1;\n    }\n    for(int i=1;i<=m;i++)\n        if(!mp[Hash(a[i],b[i])])\n            add(i);\n    for(int i=q;i>0;i--)\n    {\n        if(op[i]==1)\n        {\n            split(x[i],y[i]);\n            ans[i]=Max[y[i]];\n        }\n        else\n            add(id[Hash(x[i],y[i])]);\n    }\n    for(int i=1;i<=q;i++)\n        if(op[i]==1)\n            printf(\"%d\\n\",ans[i]);\n}\n\n```\n",
        "postTime": 1578804549,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73\u54e6](http://ljf-cnyali.cn/2019/08/19/WC2006%E6%B0%B4%E7%AE%A1%E5%B1%80%E9%95%BF-LCT/)\n\n\u9898\u76ee\u8981\u6c42\u8be2\u95ee\u4ece$u$\u5230$v$\u7684\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u8be5\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u540c\u65f6\u4f1a\u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\n\n\u8003\u8651\u8be2\u95ee\uff0c\u8fd9\u9053\u9898\u8ddf[NOIP2013\u8d27\u8f66\u8fd0\u8f93](https://www.luogu.org/problem/P1967)\u7279\u522b\u50cf\uff0c\u663e\u7136\u7b54\u6848\u662f\u5728\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\uff0c\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a$u$\u5230$v$\u7684\u8def\u5f84\u6700\u5927\u503c\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5220\u8fb9\u64cd\u4f5c\u4e0d\u597d\u8fdb\u884c\u53ef\u4ee5\u628a\u8be2\u95ee\u53cd\u8fc7\u6765\u8fdb\u884c\u52a0\u8fb9\u64cd\u4f5c\n\nLCT\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u5bf9\u4e8e\u4e00\u6b21\u52a0\u8fb9$u,v,w$\n\n-   \u5982\u679c$u,v$\u4e0d\u8fde\u901a\uff0c\u52a0\u4e0a\u8fd9\u6761\u8fb9\n-   \u52a0\u4e0a\u8fd9\u6761\u8fb9\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u5148$Split(u,v)$\uff0c\u5982\u679c$w>Tree[v].max$\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e00\u5b9a\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u5426\u5219\u5c31\u628a$Tree[v].max\\_pos$\u5220\u53bb\uff0c\u52a0\u4e0a$u,v$\u8fd9\u6761\u8fb9\n\n```cpp\n/***************************************************************\n\tFile name: P4172.cpp\n\tAuthor: ljfcnyali\n\tCreate time: 2019\u5e7408\u670819\u65e5 \u661f\u671f\u4e00 14\u65f609\u520628\u79d2\n***************************************************************/\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) \n#define mem(a) memset ( (a), 0, sizeof ( a ) ) \n#define str(a) strlen ( a ) \n#define ls(x) Tree[x].son[0]\n#define rs(x) Tree[x].son[1]\n#define fa(x) Tree[x].fa\ntypedef long long LL;\n\nconst int maxn = 5000010;\n\nstruct node\n{\n    int son[2], lazy, fa, Max, id;\n} Tree[maxn];\n\nstruct Node\n{\n    int u, v, w, opt;\n} a[maxn];\n\nint n, m, q, w[maxn], id[maxn], ans[maxn], cnt;\nmap<int, bool> Map;\n\ninline bool IsRoot(int x) { return (ls(fa(x)) == x || rs(fa(x)) == x) ? false : true; }\n\ninline void Update(int x) { Tree[x].lazy ^= 1; swap(ls(x), rs(x)); }\n\ninline void PushUp(int x)\n{\n    Tree[x].Max = w[x]; Tree[x].id = x;\n    if ( ls(x) && Tree[ls(x)].Max > Tree[x].Max ) Tree[x].Max = Tree[ls(x)].Max, Tree[x].id = Tree[ls(x)].id;\n    if ( rs(x) && Tree[rs(x)].Max > Tree[x].Max ) Tree[x].Max = Tree[rs(x)].Max, Tree[x].id = Tree[rs(x)].id;\n}\n\ninline void PushDown(int x)\n{\n    if ( !Tree[x].lazy ) return ;\n    Tree[x].lazy ^= 1;\n    if ( ls(x) ) Update(ls(x)); if ( rs(x) ) Update(rs(x));\n}\n\ninline void Rotate(int x)\n{\n    int y = fa(x), z = fa(y), k = rs(y) == x, w = Tree[x].son[!k];\n    if ( !IsRoot(y) ) Tree[z].son[rs(z) == y] = x;\n    fa(x) = z; fa(y) = x; if ( w ) fa(w) = y;\n    Tree[x].son[!k] = y; Tree[y].son[k] = w;\n    PushUp(y);\n}\n\ninline void Splay(int x)\n{\n    stack<int> Stack; int y = x, z; Stack.push(y);\n    while ( !IsRoot(y) ) Stack.push(y = fa(y));\n    while ( !Stack.empty() ) { PushDown(Stack.top()); Stack.pop(); }\n    while ( !IsRoot(x) ) \n    {\n        y = fa(x); z = fa(y);\n        if ( !IsRoot(y) ) Rotate((ls(y) == x) ^ (ls(z) == y) ? x : y);\n        Rotate(x);\n    }\n    PushUp(x);\n}\n\ninline void Access(int root) { for ( int x = 0; root; x = root, root = fa(root) ) { Splay(root); rs(root) = x; PushUp(root); } }\n\ninline void MakeRoot(int x) { Access(x); Splay(x); Update(x); }\n\ninline int FindRoot(int x) { Access(x); Splay(x); while ( ls(x) ) x = ls(x); Splay(x); return x; }\n\ninline void Link(int u, int v) { MakeRoot(u); if ( FindRoot(v) != u ) fa(u) = v; }\n\ninline void Split(int u, int v) { MakeRoot(u); Access(v); Splay(v); }\n\ninline bool Check(int u, int v) { MakeRoot(u); return FindRoot(v) == u; }\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    scanf(\"%d%d%d\", &n, &m, &q);\n    REP(i, 1, m) \n    {\n        scanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].w);\n        if ( a[i].u > a[i].v ) swap(a[i].u, a[i].v);\n        id[a[i].u * n + a[i].v] = i;\n        w[i + n] = a[i].w;\n    }\n    REP(i, m + 1, m + q) \n    {\n        scanf(\"%d%d%d\", &a[i].opt, &a[i].u, &a[i].v);\n        if ( a[i].u > a[i].v ) swap(a[i].u, a[i].v);\n        if ( a[i].opt == 2 ) Map[a[i].u * n + a[i].v] = true;\n    }\n    REP(i, 1, m)\n    {\n        if ( Map[a[i].u * n + a[i].v] == true ) continue ;\n        if ( !Check(a[i].u, a[i].v) ) \n        {\n            Link(a[i].u, i + n); \n            Link(i + n, a[i].v);\n        }\n        else\n        {\n            Split(a[i].u, a[i].v);\n            if ( Tree[a[i].v].Max <= a[i].w ) continue ;\n            int x = Tree[a[i].v].id; Splay(x); fa(ls(x)) = fa(rs(x)) = 0;\n            Link(a[i].u, i + n); Link(i + n, a[i].v);\n        }\n    }\n    for ( int i = q + m; i >= m + 1; -- i )\n    {\n        if ( a[i].opt == 1 ) \n        {\n            Split(a[i].u, a[i].v);\n            ans[++ cnt] = Tree[a[i].v].Max;\n            continue ;\n        }\n        if ( !Check(a[i].u, a[i].v) ) { Link(a[i].u, i + n); Link(i + n, a[i].v); continue ; }\n        int x = id[a[i].u * n + a[i].v];\n        Split(a[i].u, a[i].v); if ( Tree[a[i].v].Max <= a[x].w ) continue ;\n        int y = Tree[a[i].v].id; Splay(y); fa(ls(y)) = fa(rs(y)) = 0;\n        Link(a[i].u, n + x); Link(n + x, a[i].v);\n    }\n    for ( int i = cnt; i >= 1; -- i ) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1566197377,
        "uid": 8618,
        "name": "\u6c34\u5e93\u4e2d\u7684\u6c34\u5e93",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\u70b9\u51fb\u98df\u7528\u6548\u679c\u66f4\u52a0:[\u6233\u6211](https://www.cnblogs.com/hbxblog/p/10728771.html)\n### \u9898\u76ee\u94fe\u63a5\n\n[\u6233\u6211](https://www.luogu.org/recordnew/show/18312783)\n\n### $Solution$\n\n\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811,\u56e0\u4e3a\u6b63\u7684\u641e\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u53cd\u7740\u641e\u4f1a\u6bd4\u8f83\u597d,\u73b0\u5c06\u6ca1\u6709\u6ca1\u5220\u6389\u7684\u8fb9\u7559\u4e0b\u6765\u751f\u6210\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811,\u518d\u52a0\u8fb9\u5c31\u597d\u4e86\uff0c\u73b0\u5728$LCT$\n\n\u6765\u770b\u770b\u600e\u4e48\u7ef4\u62a4\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u52a0\u4e00\u6761\u8fb9\u540e\u4f1a\u662f\u4e00\u4e2a\u73af\uff0c\u5728\u73af\u4e0a\u5220\u6389\u4e00\u4e2a\u6700\u5927\u7684\u8fb9\uff0c\u8fd8\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u52a0\u8fb9\u53ea\u8981\u5224\u65ad\u8fd9\u6761\u8fb9\u548c\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6700\u5927\u8fb9\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5c0f\u4e8e\uff0c\u5219\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\uff0c\u539f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6700\u5927\u7684\u8fb9\u5220\u9664\uff0c\u5982\u679c\u5927\u4e8e\u4e0d\u9700\u8981\u7ba1\u4ed6\u3002\n\n\u4f46\u662f$LCT$\u53ea\u80fd\u7ef4\u62a4\u70b9\u6743\uff0c\u4e0d\u80fd\u7ef4\u62a4\u8fb9\u6743\uff0c\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u8fb9\u770b\u6210\u70b9\u5373\u53ef\n\n\u52a0\u5165$(x,y)\u7684\u8fb9$\u5c31\u662f$link(x,id),link(y,id),id$\u4e3a\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\n$cut$\u540c\u7406\n\n### $Code$\n\n``` cpp\n#include<bits/stdc++.h>\n#define rg register\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nstruct node {\n    int fa,v,lazy,ch[2];\n}a[1100001];\nint v[1100001],pre[100001];\nmap<int,int> f[100001];\nint vis[1000001];\ninline bool nroot(int x){\n    return a[a[x].fa].ch[0]==x||a[a[x].fa].ch[1]==x;\n}\ninline int max(int x,int y){\n    return v[x]>v[y]?x:y;\n}\ninline void pushup(int x){\n    a[x].v=max(a[a[x].ch[0]].v,max(a[a[x].ch[1]].v,x));\n}\ninline void work(int x){\n    int t=a[x].ch[0];\n    a[x].ch[0]=a[x].ch[1],a[x].ch[1]=t,a[x].lazy^=1;\n}\ninline void pushdown(int x){\n    if(a[x].lazy)\n        work(x),a[a[x].ch[0]].lazy^=1,a[a[x].ch[1]].lazy^=1;\n}\ninline void rotate(int x){\n    int y=a[x].fa,z=a[y].fa,k=(a[y].ch[1]==x);\n    if(nroot(y)) a[z].ch[a[z].ch[1]==y]=x;\n    a[x].fa=z,a[y].ch[k]=a[x].ch[k^1],a[a[x].ch[k^1]].fa=y;\n    a[x].ch[k^1]=y,a[y].fa=x;\n    pushup(x),pushup(y);\n}\ninline void down(int x){\n    if(nroot(x)) down(a[x].fa);\n    pushdown(x);\n}\ninline void splay(int x){\n    down(x);\n    while(nroot(x)){\n        int y=a[x].fa,z=a[y].fa;\n        if(nroot(y))\n            (a[y].ch[1]==x)^(a[z].ch[1]==y)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    pushup(x);\n}\ninline void access(int x){\n    int y=0;\n    while(x) splay(x),a[x].ch[1]=y,pushup(y=x),x=a[x].fa;\n}\ninline void makeroot(int x){\n    access(x),splay(x),a[x].lazy^=1;\n}\ninline void splix(int x,int y){\n    makeroot(x),access(y),splay(y);\n}\ninline int findroot(int x){\n    access(x),splay(x);\n    while(a[x].ch[0]) pushdown(x),x=a[x].ch[0];\n    splay(x);\n    return x;\n}\ninline void link(int x,int y){\n    makeroot(x);\n    if(findroot(y)!=x)\n        a[x].fa=y;\n}\ninline void cut(int x,int y){\n    makeroot(x);\n    if(findroot(y)!=x||a[y].fa!=x||a[y].ch[0]) return ;\n    a[y].fa=a[x].ch[1]=0,pushup(x);\n}\nstruct node1{\n    int x,y,z;\n}b[1000001];\ninline bool cmp(const node1 & a , const node1 & b ){\n    return a.z<b.z;\n}\ninline int find(int x){\n    return pre[x]==x?x:pre[x]=find(pre[x]);\n}\nint X[100001],Y[100001],opt[100001],n,m,q,ans[100001],tot;\ninline void MST(){\n    for(int i=1;i<=n;i++)\n        pre[i]=i;\n    for(int i=1;i<=m;i++){\n        int fx=find(b[i].x),fy=find(b[i].y);\n        if(!vis[i]&&fx!=fy)\n            link(b[i].x,i+n),link(b[i].y,i+n),pre[fx]=fy;\n    }\n}\nint main(){\n    n=read(),m=read(),q=read();\n    for(rg int i=1;i<=m;i++)\n        b[i].x=read(),b[i].y=read(),b[i].z=read();\n    sort(b+1,b+1+m,cmp);\n    for(rg int i=1;i<=m;i++)\n        f[b[i].x][b[i].y]=f[b[i].y][b[i].x]=i+n,v[i+n]=b[i].z;\n    for(rg int i=1;i<=q;i++){\n        opt[i]=read(),X[i]=read(),Y[i]=read();\n        if(opt[i]==2) vis[f[X[i]][Y[i]]-n]=1;\n    }\n    MST();\n    for(rg int i=q;i>=1;i--){\n        splix(X[i],Y[i]);\n        if(opt[i]==1)\n            ans[++tot]=v[a[Y[i]].v];\n        else{\n            if(v[a[Y[i]].v]>v[f[X[i]][Y[i]]]){\n                int x=a[Y[i]].v;\n                cut(b[x-n].x,x),cut(b[x-n].y,x),link(X[i],f[X[i]][Y[i]]),link(Y[i],f[X[i]][Y[i]]);\n            }\n        }\n    }\n    for(rg int i=tot;i>=1;i--)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1555675262,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\u79bb\u7ebf\u505a,\u628a\u5220\u8fb9\u8f6c\u5316\u4e3a\u52a0\u8fb9,\u7528LCT\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811.\u90a3\u4e48\u5982\u679c\u52a0\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e0d\u8fde\u901a,\u76f4\u63a5\u8fde\u5c31\u884c\u4e86.\u5982\u679c\u8054\u901a\u5c31\u627e\u4ed6\u4eec\u4e4b\u95f4\u7684\u74f6\u9888\u8fb9,\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u8fb9\u662f\u5426\u66f4\u4f18,\u5982\u679c\u66f4\u4f18\u5c31cut\u6389\u74f6\u9888\u8fb9,\u52a0\u4e0a\u5f53\u524d\u8fb9.\n\n\u90a3\u600e\u4e48\u7ef4\u62a4\u74f6\u9888\u8fb9\u5462?\u628a\u8fb9\u4e5f\u770b\u505a\u70b9,\u5411\u4e24\u4e2a\u70b9\u5206\u522b\u8fde\u8fb9,\u90a3\u4e48\u53ea\u7528\u7ef4\u62a4\u6700\u5927\u503c\u5c31\u884c\u4e86.\u7ef4\u62a4\u7684\u53ea\u7ef4\u62a4\u7f16\u53f7,\u6bd4\u8f83\u7684\u65f6\u5019\u5c31\u6bd4\u8f83\u7f16\u53f7\u5bf9\u5e94\u7684\u8fb9\u6743,\u8fd9\u6837\u65b9\u4fbf\u8be2\u95ee\u65f6\u5220\u8fb9.\n\n~~\u867d\u7136\u53ef\u80fd\u6ca1\u6709\u4eba\u50cf\u6211\u8fd9\u4e48zz\u9519\u4e86\u8fd9\u4e2a\u5730\u65b9,\u4e0d\u8fc7\u6211\u8fd8\u662f\u60f3\u8bf4\u4e00\u8bf4: \u6ce8\u610f\u50a8\u5b58 **\u8fb9(u,v)\u6216\u8005\u65ad\u8fb9(u,v)** \u7684\u65f6\u5019,\u8981\u628a\u8f83\u5c0f\u503c\u8bbe\u4e3au,\u8f83\u5927\u503c\u8bbe\u4e3av.\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\u5728BZOJ\u4e0a\u80fdA,\u4f46\u662f\u5728\u6d1b\u8c37\u4e0a\u4f1aWA,\u56e0\u4e3aBZOJ\u4e0a\u7684\u6570\u636e\u4fdd\u8bc1\u524d\u9762\u7ed9\u51fa\u7684\u8fb9(u,v),\u5728\u65ad\u8fb9\u7684\u65f6\u5019\u7ed9\u51fa\u7684\u987a\u5e8f\u4ecd\u7136\u662f(u,v).\u800c\u6d1b\u8c37\u4e0a\u7684\u5b98\u65b9\u6570\u636e\u7ed9\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u662f(v,u).~~\n\n\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u662f\u52a0\u5f3a\u7248\u6570\u636e\u7684\u8303\u56f4,\u5982\u679c\u662f\u6d1b\u8c37\u7684\u6570\u636e,\u53ea\u7528N\u5f001000,MAXN\u5f002000,MAXM\u53bb\u6389\u4e00\u4e2a0\u5c31\u884c\u4e86.\n\n# CODE\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\ntemplate<typename T>inline void read(T &num) {\n\tchar ch; int flg = 1;\n\twhile((ch=getchar())<'0'||ch>'9')if(ch=='-')flg=-flg;\n\tfor(num=0;ch>='0'&&ch<='9';num=num*10+ch-'0',ch=getchar());\n\tnum*=flg;\n}\nconst int N = 100005;\nconst int MAXN = 200005;\nconst int MAXM = 1000005;\nconst int MAXQ = 100005;\nint n, m, Q;\nstruct edge { int u, v, len, id; bool po; }E[MAXM];\nstruct Query { int op, x, y, id; }q[MAXQ];\nnamespace LCT {\n\t#define ls ch[x][0]\n\t#define rs ch[x][1]\n\tint ch[MAXN][2], fa[MAXN], mx[MAXN], w[MAXN], ID[MAXN];\n\tbool rev[MAXN];\n\tinline bool isr(int x) { return ch[fa[x]][0] != x && ch[fa[x]][1] != x; }\n\tinline bool get(int x) { return x == ch[fa[x]][1]; }\n\tinline void upd(int x) {\n\t\tmx[x] = x;\n\t\tif(ls && w[mx[ls]] > w[mx[x]]) mx[x] = mx[ls];\n\t\tif(rs && w[mx[rs]] > w[mx[x]]) mx[x] = mx[rs];\n\t}\n\tinline void rot(int x) {\n\t\tint y = fa[x], z = fa[y], l = get(x), r = l^1;\n\t\tif(!isr(y)) ch[z][get(y)] = x;\n\t\tfa[ch[x][r]] = y; fa[y] = x; fa[x] = z;\n\t\tch[y][l] = ch[x][r]; ch[x][r] = y;\n\t\tupd(y), upd(x);\n\t}\n\tinline void mt(int x) { if(rev[x]) rev[x] ^= 1, rev[ls] ^= 1, rev[rs] ^= 1, swap(ls, rs); }\n\tvoid mtpath(int x) { if(!isr(x)) mtpath(fa[x]); mt(x); }\n\tinline void splay(int x) {\n\t\tmtpath(x);\n\t\tfor(; !isr(x); rot(x))\n\t\t\tif(!isr(fa[x])) rot(get(x)==get(fa[x])?fa[x]:x);\n\t}\n\tinline int access(int x) { int y=0;\n\t\tfor(; x; x=fa[y=x]) splay(x), ch[x][1]=y, upd(x);\n\t\treturn y;\n\t}\n\tinline void bert(int x) { access(x), splay(x), rev[x] ^= 1; }\n\tinline int sert(int x) {\n\t\taccess(x), splay(x);\n\t\tfor(; ch[x][0]; x=ch[x][0]);\n\t\treturn x;\n\t}\n\tinline void link(int x, int y) {\n\t\tbert(x);\n\t\tif(sert(y) == x) return;\n\t\tfa[x] = y;\n\t}\n\tinline void cut(int x, int y) {\n\t\tbert(x), access(y), splay(y);\n\t\tif(sert(y) != x || fa[x] != y || ch[x][1] != 0) return;\n\t\tfa[x] = ch[y][0] = 0; upd(y);\n\t}\n\tinline int split(int x, int y) {\n\t\tbert(x), access(y), splay(y);\n\t\treturn y;\n\t}\n\tinline int query(int x, int y) {\n\t\tsplit(x, y);\n\t\tif(sert(y) != x) return -1;\n\t\treturn mx[y];\n\t}\n}\nusing namespace LCT;\ninline bool cmp1(const edge &i, const edge &j) { return i.len < j.len; }\ninline bool cmp2(const edge &i, const edge &j) { return i.u == j.u ? i.v < j.v : i.u < j.u; }\ninline bool cmp3(const edge &i, const edge &j) { return i.id < j.id; }\nint f[N], tot;\nint find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }\ninline void Kruskal() {\n\tfor(int i = 1; i <= n; ++i) f[i] = i;\n\tsort(E + 1, E + m + 1, cmp3);\n\ttot = 0;\n\tfor(int i = 1; i <= m; ++i)\n\t\tif(!E[i].po) {\n\t\t\tint x = find(E[i].u), y = find(E[i].v);\n\t\t\tif(x != y) {\n\t\t\t\tf[x] = y, ++tot;\n\t\t\t\tmx[tot+n] = tot+n;\n\t\t\t\tw[tot+n] = E[i].len;\n\t\t\t\tID[tot+n] = i;\n\t\t\t\tlink(E[i].u, n+tot);\n\t\t\t\tlink(E[i].v, n+tot);\n\t\t\t\tif(tot == n-1) return;\n\t\t\t}\n\t\t}\n}\ninline int pos(int U, int V) { //\u4e8c\u5206\u627e\u7f16\u53f7\n\tint l = 1, r = m, mid;\n\twhile(l < r) {\n\t\tmid = (l + r) >> 1;\n\t\tif(E[mid].u < U || (E[mid].u == U && E[mid].v < V)) l = mid + 1;\n\t\telse r = mid;\n\t}\n\treturn l;\n}\nint ans[MAXQ];\nint main () {\n\tread(n), read(m), read(Q);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tread(E[i].u), read(E[i].v), read(E[i].len);\n\t\tif(E[i].u > E[i].v) swap(E[i].u, E[i].v);\n\t}\n\tsort(E + 1, E + m + 1, cmp1);\n\tfor(int i = 1; i <= m; ++i) E[i].id = i;\n\tsort(E + 1, E + m + 1, cmp2);\n\tfor(int i = 1; i <= Q; ++i) {\n\t\tread(q[i].op), read(q[i].x), read(q[i].y);\n\t\tif(q[i].x > q[i].y) swap(q[i].x, q[i].y);\n\t\tif(q[i].op == 2) {\n\t\t\tint k = pos(q[i].x, q[i].y);\n\t\t\tq[i].id = E[k].id; E[k].po = 1; //po\u8868\u793a\u88ab\u7834\u574f\u6389\n\t\t}\n\t}\n\tKruskal();\n\tfor(int i = Q; i >= 1; --i)\n\t\tif(q[i].op == 1) ans[i] = w[query(q[i].x, q[i].y)];\n\t\telse {\n\t\t\tint t = query(q[i].x, q[i].y);\n\t\t\tif(t == -1) { //\u4e0d\u8fde\u901a\n\t\t\t\t++tot;\n\t\t\t\tmx[n+tot] = n+tot; ID[n+tot] = q[i].id, w[n+tot] = E[q[i].id].len;\n\t\t\t\tlink(q[i].x, n+tot), link(q[i].y, n+tot);\n\t\t\t}\n\t\t\telse if(w[t] > E[q[i].id].len) {\n\t\t\t\tcut(E[ID[t]].u, t), cut(E[ID[t]].v, t);\n\t\t\t\tmx[t] = t; ID[t] = q[i].id; w[t] = E[q[i].id].len; //\u56de\u6536\u4f7f\u7528t\u8fd9\u4e2a\u7f16\u53f7,\u8fd9\u6837LCT\u7684\u70b9\u6570\u53ef\u4ee5\u53ea\u5f002*n\n\t\t\t\tlink(q[i].x, t), link(q[i].y, t);\n\t\t\t}\n\t\t}\n\tfor(int i = 1; i <= Q; ++i)\n\t\tif(q[i].op == 1) printf(\"%d\\n\", ans[i]);\n}\n```",
        "postTime": 1552985692,
        "uid": 30433,
        "name": "Ark_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011(\u5728BZOJ\u4e0a\u8fc7\u4e86\u4f46\u662f\u6d1b\u8c37WA\u4e86\u7684\u53ef\u4ee5\u770b\u8fd9\u8fb9...)"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u79fb\u6b65[\u6211\u7684blog](https://www.cnblogs.com/bztMinamoto/p/9339609.html)\n\n\u5b66\u5b8c\u8fd9\u9898\u624d\u53d1\u73b0\u539f\u6765LCT\u8fd8\u6709\u8fd9\u4e48\u591a\u8bb2\u7a76orz\u2026\u2026\u5bf9\u7740\u4ee3\u7801\u770b\u4e86\u4e00\u4e0b\u5348\u624d\u660e\u767d\u662f\u600e\u4e48\u56de\u4e8b\u2026\u2026\n\n\u9996\u5148\uff0c\u8fd9\u9898\u5728\u7ebf\u663e\u7136\u4e0d\u53ef\u505a\uff08\u5728\u7ebfA\u4e86\u7684\u5927\u4f6c\u8bf7\u6536\u4e0b\u6211\u7684\u819d\u76d6\uff09\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u79bb\u7ebf\u505a\u6cd5\uff0c\u7136\u540e\u5012\u53d9\u8003\u8651\uff0c\u5c31\u53ef\u4ee5\u628a\u5220\u8fb9\u6539\u4e3a\u52a0\u8fb9\u4e86\n\n\u5176\u6b21\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u9898\u76ee\n\n\u4f7f\u4e24\u70b9\u4e4b\u95f4\u6700\u5927\u7684\u8fb9\u6743\u6700\u5c0f\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\n\n\u4e8e\u662f\u5148\u5bf9\u7740\u6700\u540e\u7684\u56fe\u4e00\u901akruskal\n\n\u7136\u540e\u5012\u5e8f\u5904\u7406\u52a0\u8fb9\u548c\u8be2\u95ee\u5373\u53ef\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u76f4\u63a5\u5728LCT\u4e0a\u67e5\u8be2\n\n\u52a0\u8fb9\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\uff0c\u5f97\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\n\n1.x\u548cy\u4e0d\u5728\u540c\u4e00\u8054\u901a\u5757\uff0c\u76f4\u63a5\u52a0\u8fb9\n\n2.\u82e5\u5728\u540c\u4e00\u8054\u901a\u5757\u4f46\u52a0\u7684\u8fb9\u7684\u8fb9\u6743\u5927\u4e8ex\u5230y\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\uff0c\u8df3\u8fc7\n\n3.\u5426\u5219\u5220\u53bbx\u5230y\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e00\u6761\u8fb9\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff08\u6216\u8005\u76f4\u63a5LCT\u4e0afindroot\uff0c\u4f46\u8fd9\u6837\u6ca1\u5e76\u67e5\u96c6\u8dd1\u5f97\u5feb\uff09\n\n\u4f46\u662fLCT\u53ea\u80fd\u7ef4\u62a4\u70b9\uff0c\u600e\u4e48\u8003\u8651\u8fb9\u6743\u5462\uff1f\n\n\u6211\u4eec\u628a\u8fb9\u8f6c\u5316\u4e3a\u70b9\u8003\u8651\u5c31\u597d\u4e86\u3002\u7ed9\u6bcf\u6761\u8fb9\u4e00\u4e2a\u7f16\u53f7\uff0c\u8981\u8fde\u8fb9\u65f6\u5c06x\u548cy\u5206\u522b\u4e0e\u5b83\u6240\u4ee3\u8868\u7684\u7684\u70b9\u76f8\u8fde\n\n\uff08ps\uff1a\u5b66\u5230\u4e86\u4e00\u4e2a\u5f88\u5389\u5bb3\u7684\u6280\u5de7\uff0c\u5c06\u8fb9\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e8c\u5206\u4e86\uff09\n\n```\n//minamoto\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#define N 1200100\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<15,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<15],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nstruct node{\n    int from,to,len;\n} e[N],E[N];\nstruct node1{\n    int opt,x,y,ans;\n}Q[N];\nint n,m,k,now,cnt;\nbool cmp1(node a,node b){return a.from<b.from||a.from==b.from&&a.to<b.to;}\nbool cmp2(node a,node b){return a.len<b.len;}\nint top,s[N],ch[N][2],fa[N],v[N],mxnum[N],f[N];bool rev[N],dam[N];\nint ff(int x){return f[x]==x?x:(f[x]=ff(f[x]));}\nvoid unite(int x,int y){x=ff(x),y=ff(y);f[x]=y;}\nbool isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\nvoid pushup(int x){\n    if(v[x]>v[mxnum[ch[x][0]]]&&v[x]>v[mxnum[ch[x][1]]]) mxnum[x]=x;\n    else if(v[mxnum[ch[x][0]]]>v[mxnum[ch[x][1]]]) mxnum[x]=mxnum[ch[x][0]];\n    else mxnum[x]=mxnum[ch[x][1]];\n}\nvoid pushdown(int x){if(rev[x]&&x)swap(ch[x][0],ch[x][1]),rev[ch[x][0]]^=1,rev[ch[x][1]]^=1,rev[x]^=1;}\nvoid rotate(int x){\n    int y=fa[x],z=fa[y],d=(ch[y][1]==x);if(!isroot(y)) ch[z][ch[z][1]==y]=x;\n    fa[x]=z,fa[y]=x;fa[ch[x][d^1]]=y,ch[y][d]=ch[x][d^1],ch[x][d^1]=y;pushup(y),pushup(x);\n}\nvoid splay(int x){\n    s[top=1]=x;for(int i=x;!isroot(i);i=fa[i]) s[++top]=fa[i];for(int i=top;i>=1;--i) pushdown(s[i]);\n    for(int y=fa[x],z=fa[y];!isroot(x);y=fa[x],z=fa[y]){\n        if(!isroot(y)) ((ch[z][1]==y)^(ch[y][1]==x))?rotate(x):rotate(y);rotate(x);\n    }\n}\nvoid access(int x){int t=0;while(x){splay(x),ch[x][1]=t,pushup(x),t=x,x=fa[x];}}\nvoid makeroot(int x){access(x),splay(x),rev[x]^=1;}\nint findroot(int x){access(x);splay(x);pushdown(x);while(ch[x][0]) pushdown(x=ch[x][0]);return x;}\nint query(int x,int y){makeroot(x),access(y),splay(y);return v[mxnum[y]];}\nvoid link(int x,int y){makeroot(x),access(y),splay(y);fa[x]=y;}\nvoid cut(int x,int y){makeroot(x),access(y),splay(y);fa[x]=ch[y][0]=0;}\nint getid(int u,int v){\n    int l=1,r=m;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(e[mid].from==u&&e[mid].to==v) return mid+n;\n        if(e[mid].from<u||e[mid].from==u&&e[mid].to<v) l=mid+1;\n        else r=mid-1;\n    }\n}\nvoid kruskal(){\n    for(int i=1;i<=m;++i){\n        int line=getid(E[i].from,E[i].to);\n        if(!dam[line]&&ff(E[i].from)!=ff(E[i].to)){\n            link(E[i].from,line),link(E[i].to,line);\n            unite(E[i].from,E[i].to);\n            if(++cnt==n-1) break;\n        }\n    }\n}\nvoid addline(int x,int y){\n    if(ff(x)!=ff(y)){\n        int line=getid(x,y);\n        link(x,line),link(line,y);\n        unite(x,y);\n        return;\n    }\n    makeroot(x),access(y),splay(y);\n    int cutline=mxnum[y],cutx=e[cutline-n].from,cuty=e[cutline-n].to;\n    int line=getid(x,y);\n    if(v[cutline]<v[line]) return;\n    cut(cutx,cutline),cut(cutline,cuty);\n    link(x,line),link(line,y);\n}\nint main(){\n    //freopen(\"testdata.in\",\"r\",stdin);\n    n=read(),m=read(),k=read();\n    for(int i=1;i<=n;++i) f[i]=i;\n    for(int i=1;i<=m;++i){\n        e[i].from=read(),e[i].to=read(),e[i].len=read();\n        if(e[i].from>e[i].to) swap(e[i].from,e[i].to);\n        E[i]=e[i];\n    }\n    sort(e+1,e+m+1,cmp1);\n    sort(E+1,E+m+1,cmp2);\n    for(int i=1;i<=m;++i){\n        v[e[i].from]=v[e[i].to]=-1;\n        v[n+i]=e[i].len;\n    }\n    for(int i=1;i<=k;++i){\n        Q[i].opt=read(),Q[i].x=read(),Q[i].y=read();\n        if(Q[i].x>Q[i].y) swap(Q[i].x,Q[i].y);\n        if(Q[i].opt==2) dam[getid(Q[i].x,Q[i].y)]=true;\n    }\n    kruskal();\n    for(int i=k;i>=1;--i){\n        if(Q[i].opt==1) Q[i].ans=query(Q[i].x,Q[i].y);\n        else addline(Q[i].x,Q[i].y);\n    }\n    for(int i=1;i<=k;++i)\n    if(Q[i].opt==1)\n    printf(\"%d\\n\",Q[i].ans);\n}\n```",
        "postTime": 1532047682,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4172 \u3010[WC2006]\u6c34\u7ba1\u5c40\u957f\u3011"
    },
    {
        "content": "\u4e8e\u662f\u5404\u79cd\u8fde\u8fb9\u3001\u5220\u8fb9\u3001\u6362\u6839\u64cd\u4f5c\u5c31\u53ef\u4ee5\u6267\u884c\u4e86\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\r\n\r\n\u7136\u540e\u6211\u4eec\u6765\u8003\u8651\u8fd9\u9053\u9898\u3002\r\n\r\n\u6211\u4eec\u53d1\u73b0\u5220\u8fb9\u7279\u522b\u96be\u5904\u7406\uff0c\u90a3\u4e48\u600e\u6837\u8f6c\u5316\u4e00\u4e0b\u5462\uff1f\u5012\u7740\u5904\u7406\u6240\u6709\u8be2\u95ee\uff0c\u4e8e\u662f\u5220\u8fb9\u53d8\u6210\u4e86\u52a0\u8fb9\u3002\u7136\u540e\u67e5\u8be2\u6240\u6709\u8def\u5f84\u4e0a\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c\u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u8981\u7ef4\u62a4\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e86\uff0c\u4e5f\u53ef\u4ee5\u7528lct\u505a\u5230\u3002\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n\u6211\u4eec\u6b64\u65f6\u5df2\u7ecf\u5c06\u8be2\u95ee\u5012\u8fc7\u6765\u5904\u7406\u4e86\uff0c\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u597d\u4e86\u4e00\u68f5mst\uff0c\u6bcf\u52a0\u4e00\u6761\u8fb9u-v\uff0c\u80af\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u56e0\u4e3a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u8981\u5728\u73af\u4e0a\u53bb\u6389\u4e00\u6761\u6700\u5927\u7684\u8fb9\u3002\u4e8e\u662f\u5904\u7406\u52a0\u8fb9\u64cd\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a\r\n\r\n\u67e5\u8be2u-v\u94fe\u4e0a\u6700\u5927\u8fb9\u6743mx\r\n\u6bd4\u8f83\u65b0\u52a0\u7684\u8fb9\u6743w\u548cmx\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c w>mxw>mx \uff0c\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\uff1b\u5426\u5219\u5220\u53bb\u8fb9\u6743\u4e3amx\u7684\u8fb9(cut)\uff0c\u52a0\u4e0au-v\u8fd9\u6761\u8fb9(link)\u3002\r\n\u90a3\u4e48\u67e5\u8be2\u5c31\u76f4\u63a5\u67e5\u94fe\u4e0a\u6700\u5927\u503c\u5373\u53ef\u3002\r\n\r\n\u81f3\u6b64\uff0c\u6b64\u9898\u5927\u81f4\u6d41\u7a0b\u5df2\u7ecf\u7ed3\u675f\u3002\r\n\r\n\u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\uff1a\r\n\r\n\u5728\u4fdd\u5b58mx\u7684\u65f6\u5019\u9700\u8981\u5b58\u7684\u662f\u8fb9\u7684\u7f16\u53f7\uff0c\u56e0\u4e3a\u5230\u65f6\u52a0\u8fb9\u7684\u65f6\u5019\u9700\u8981\u7528\u5230\u3002\r\n\u4f60\u53d1\u73b0lct\u4f3c\u4e4e\u53ea\u80fd\u5904\u7406\u94fe\u4e0a\u6700\u5927\u70b9\u6743\u800c\u65e0\u6cd5\u4fdd\u5b58\u8fb9\u6743\u3002\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651 \u628a\u8fb9\u770b\u6210\u70b9 \uff0c\u52a0\u4e00\u6761\u8fb9u-v\uff0c\u7f16\u53f7\u4e3aid\uff0c\u5219 link(u, id); link(v, id); \uff1b\u5220\u8fb9\u540c\u7406\u3002\r\n\u5728\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u9700\u8981\u627e\u5230\u67d0\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2amap\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\u3002\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n#define lc c[x][0]\r\n#define rc c[x][1]\r\n#define R register int\r\n#define ll long long\r\n#define Iter set<edge>::iterator\r\nusing namespace std;\r\nconst int MAXN=1e6+10;\r\nstruct LinkCutTree {\r\n    int top,q[MAXN];\r\n    int c[MAXN][2],fa[MAXN],rev[MAXN];\r\n    int vv[MAXN],mx[MAXN];///\u6700\u5927\u70b9\u7f16\u53f7\r\n\r\n    void pushup(R x) {\r\n        mx[x]=x;\r\n        if(vv[ mx[lc] ]>vv[ mx[x] ])    mx[x]=mx[lc];\r\n        if(vv[ mx[rc] ]>vv[ mx[x] ])    mx[x]=mx[rc];\r\n    }\r\n    void pushdown(R x) {\r\n        if(rev[x]) {\r\n            rev[x]^=1,rev[lc]^=1,rev[rc]^=1;\r\n            swap(lc,rc);\r\n        }\r\n    }\r\n    bool isroot(R x) {\r\n        return c[ fa[x] ][0]!=x && c[ fa[x] ][1]!=x;\r\n    }\r\n    void rotate(R x) {\r\n        int y=fa[x],z=fa[y],l=c[y][1]==x,r=l^1;\r\n        if(!isroot(y))\r\n            c[z][ c[z][1]==y ] =x;\r\n        fa[x]=z,fa[y]=x;\r\n\r\n        fa[ c[x][r] ]=y;\r\n        c[y][l]=c[x][r];\r\n\r\n        c[x][r]=y;\r\n        pushup(y),pushup(x);\r\n    }\r\n    void splay(R x) {\r\n        top=1,q[top]=x;\r\n        for(R i=x;!isroot(i);i=fa[i]) q[++top]=fa[i];\r\n        for(R i=top;i;--i)    pushdown(q[i]);\r\n        while(!isroot(x)) {\r\n            R y=fa[x],z=fa[y];\r\n            if(!isroot(y)) {\r\n                if( (c[y][1]==x) == (c[z][1]==y) )  rotate(x);\r\n                else    rotate(y);\r\n            }\r\n            rotate(x);\r\n        }\r\n    }\r\n    void access(R x) {\r\n        for(int t=0;x;t=x,x=fa[x])\r\n                splay(x),c[x][1]=t,pushup(x);\r\n    }\r\n    void makeroot(R x) {\r\n        access(x);\r\n        splay(x);\r\n        rev[x]^=1;\r\n    }\r\n    int find(R x) {\r\n        access(x);\r\n        splay(x);\r\n        while(lc) x=lc;\r\n        return x;\r\n    }\r\n    void link(R x,R y) {\r\n        makeroot(x);\r\n        fa[x]=y;\r\n    }\r\n    void split(R x,R y) {\r\n        makeroot(x);\r\n        access(y);\r\n        splay(y);\r\n    }\r\n    void cut(R x,R y) {\r\n        makeroot(x);\r\n        if( find(y)!=x || fa[x]!=y || c[x][1] ) return;\r\n        fa[x]=c[y][0]=0;\r\n        pushup(y);\r\n    }\r\n    int query(R x,R y) {\r\n        split(x,y);\r\n        return mx[y];\r\n    }\r\n}T;\r\n/// data================================================\r\nint N,M,Q;\r\nstruct edge {\r\n    int x,y,t;\r\n    int id;\r\n    bool disabled;\r\n}E[MAXN];\r\nbool operator < (edge a,edge b) {\r\n    return make_pair(a.x,a.y)<make_pair(b.x,b.y);\r\n}\r\nbool cmp (edge a,edge b) {\r\n    return a.t<b.t;\r\n}\r\nbool cmp_id(edge a,edge b) {\r\n    return a.id<b.id;\r\n}\r\nstruct query{\r\n    int opt,x,y;\r\n    edge e;\r\n    int ans;\r\n}ask[MAXN];\r\nset<edge> S,rela;\r\n///main ================================================\r\nint main() {\r\n    //freopen(\"tube.in\",\"r\",stdin);\r\n    //freopen(\"tube.out\",\"w\",stdout);\r\n    scanf(\"%d%d%d\",&N,&M,&Q);\r\n    for(int i=1;i<=M;++i) {\r\n        scanf(\"%d%d%d\",&E[i].x,&E[i].y,&E[i].t);\r\n        E[i].id=i;\r\n        T.vv[i+N]=E[i].t;\r\n        if(E[i].x>E[i].y)   swap(E[i].x,E[i].y);\r\n        S.insert(E[i]);\r\n    }\r\n    for(int i=1;i<=Q;++i) {\r\n        scanf(\"%d%d%d\",&ask[i].opt,&ask[i].x,&ask[i].y);\r\n        if(ask[i].x>ask[i].y)   swap(ask[i].x,ask[i].y);\r\n        if(ask[i].opt==2) {\r\n            Iter it=S.find(edge{ask[i].x,ask[i].y,0,0,0});\r\n            ask[i].e=*it;\r\n            E[it->id].disabled=true;\r\n        }\r\n    }\r\n    ///do the kruskal\r\n    sort(E+1,E+M+1,cmp);\r\n    for(int i=1;i<=M;++i) {\r\n        int x=E[i].x,y=E[i].y,id=E[i].id;\r\n        if(E[i].disabled) continue;\r\n        if(T.find(x)!=T.find(y)) {\r\n            T.link(x,id+N),T.link(id+N,y);\r\n        }\r\n    }\r\n    ///cope query\r\n    sort(E+1,E+M+1,cmp_id);\r\n    for(int i=Q;i;--i) {\r\n        if(ask[i].opt==1) {\r\n            int pos=T.query(ask[i].x,ask[i].y);\r\n            ask[i].ans=T.vv[pos];\r\n        }\r\n        else {\r\n            int x=ask[i].e.x,y=ask[i].e.y,tm=ask[i].e.t,id=ask[i].e.id;\r\n            int pos=T.query(ask[i].x,ask[i].y);\r\n            if(tm<T.vv[pos]) {\r\n                T.cut(pos,E[pos-N].x),T.cut(E[pos-N].y,pos);\r\n                T.link(id+N,x),T.link(id+N,y);\r\n            }\r\n        }\r\n    }\r\n    for(int i=1;i<=Q;++i)\r\n        if(ask[i].opt==1)\r\n            printf(\"%d\\n\",ask[i].ans);\r\n    return 0;\r\n}\r\n\r\n```",
        "postTime": 1523964400,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "P4172 \u6c34\u7ba1\u5c40\u957f"
    }
]