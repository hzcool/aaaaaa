[
    {
        "content": "\u5176\u5b9e\u8fd9\u4e2a\u9898 fhqtreap \u4e5f\u662f\u53ef\u505a\u7684\uff0c\u8fd9\u9898\u7684\u65f6\u95f4\u74f6\u9888\u5b9e\u9645\u4e0a\u5728\u8f93\u51fa\u800c\u4e0d\u5728\u5e73\u8861\u6811\u3002\n\n\u8fd9\u9898\u53ea\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- \u6c42\u67d0\u4e2a\u503c\u7684\u6392\u540d-1\n\n- \u4fee\u6539\u67d0\u4e2a\u503c\n\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5e94\u8be5\u4eba\u4eba\u90fd\u4f1a\uff0c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5148\u5220\u4e86\u518d\u52a0\u8fdb\u53bb\u5c31\u597d\u4e86\u3002\n\n\u81f3\u4e8e\u9898\u6570\u548c\u7f5a\u65f6\uff0c\u5c31\u91cd\u65b0\u5199\u4e2a\u7c7b\u5c31\u884c\u4e86\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,root;\ninline int read()\n{\n\tint re=0,k=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')k=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){re=re*10+ch-48;ch=getchar();}\n\treturn re*k;\n}\nint tot,ans,s[100005],ls;\nstruct st{//\u5199\u4e2a\u65b0\u7684val\u7c7b\n\tint ria,rib;\n\tbool operator <(const st b)const{\n\t\tif(ria==b.ria)return rib<b.rib;\n\t\telse return ria>b.ria;\n\t}\n\tbool operator <=(const st b)const{\n\t\tif(ria==b.ria)return rib<=b.rib;\n\t\telse return ria>=b.ria;\n\t}\n}a[100005];\nstruct ss{\n\tint lson,rson,rnd,sz,cnt;st val;\n}e[200005];\n----------\u5e73\u8861\u6811\u5206\u5272\u7ebf----------\nvoid push_up(int x)\n{\n\te[x].sz=e[e[x].lson].sz+e[e[x].rson].sz+e[x].cnt;\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)return x|y;\n\tif(e[x].rnd<e[y].rnd)\n\t{\n\t\te[x].rson=merge(e[x].rson,y);\n\t\tpush_up(x);return x;\n\t}\n\telse\n\t{\n\t\te[y].lson=merge(x,e[y].lson);\n\t\tpush_up(y);return y;\n\t}\n}\nvoid split(st k,int now,int &x,int &y)\n{\n\tif(!now)\n\t{\n\t\tx=y=0;\n\t}\n\telse\n\t{\n\t\tif(e[now].val<=k)\n\t\t{\n\t\t\tx=now;\n\t\t\tsplit(k,e[now].rson,e[now].rson,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty=now;\n\t\t\tsplit(k,e[now].lson,x,e[now].lson);\n\t\t}\n\t}\n\tpush_up(now);\n}\nint new_node(st k)\n{\n\tint now;\n\tif(ls)now=s[ls--];//\u5199\u4e0a\u5783\u573e\u56de\u6536\u8282\u7701\u7a7a\u95f4\n\telse now=++tot;\n\te[now].sz=e[now].cnt=1;\n\te[now].val=k;\n\te[now].rnd=rand();\n\te[now].lson=e[now].rson=0;\n\treturn now;\n}\nvoid insert(st x)\n{\n\tint l,r;\n\tsplit(x,root,l,r);\n\tl=merge(l,new_node(x));\n\troot=merge(l,r);\n}\nvoid del(st x)\n{\n\tint l,a,r;st y=x;\n\ty.rib--;\n\tsplit(x,root,l,r);\n\tsplit(y,l,l,a);\n\ts[++ls]=a;\n\ta=merge(e[a].lson,e[a].rson);\n\troot=merge(merge(l,a),r);\n}\nint ask_val(st x)\n{\n\tint l,r;\n\tx.rib--;\n\tsplit(x,root,l,r);\n\tint re=e[l].sz+1;\n\troot=merge(l,r);\n\treturn re-1;\n}\n-----------\u5206\u5272\u7ebf\u7ed3\u675f-----------\ntypedef unsigned int ui;\n    ui randNum(ui& seed, ui last, const ui m) {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\nui seed,last=7;\ninline void write(int x)//\u8fd9\u4e2a\u5fc5\u987b\u8981\uff0c\u4e0d\u7136\u4f1at\u5f97\u5f88\u60e8\n{\n\tif(x<10)\n\t{\n\t\tputchar(x+48);\n\t\treturn;\n\t}\n\twrite(x/10),write(x%10);\n}\nint main()\n{\n\tint t=read();\n\twhile(t--)\n\t{\n\tsrand(19260817);\n\tm=read();n=read();seed=read();\n\troot=ls=tot=0;\n\tfor(int i=1;i<=m;i++)\n\t\ta[i].ria=a[i].rib=0,insert(a[i]);\n\tint u,v;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tu=randNum(seed,last,m);\n\t\tv=randNum(seed,last,m);\n\t\tdel(a[u]);\n\t\ta[u].ria++;a[u].rib+=v;\n\t\tinsert(a[u]);\n\t\tlast=ask_val(a[u]);\n\t\twrite(last);\n\t\tputchar('\\n');\t\n\t}\n\t}\n}\n```",
        "postTime": 1581340773,
        "uid": 55201,
        "name": "clamee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u9996\u5148```diss```\u4e00\u4e0b```TJOI2019D1T2```\u51fa\u9898\u4eba\uff0c\u5c45\u7136\u51fa\u4e86\u4e00\u9053\u5e73\u8861\u6811\u6a21\u677f\u9898\uff0c\u5c5e\u5b9e\u6709\u70b9\u8fc7\u5206\u4e86\u3002\n\n\u9898\u89e3\u91cc\u7684\u529e\u6cd5\u5927\u591a\u662f\u7ef4\u62a4\u4e00\u4e2apair\uff0c\u4e0d\u8fc7\u8fd9\u9898\u53ef\u4ee5\u66f4\u7b80\u5355\u5730\u7ef4\u62a4\u4e00\u4e2a```1500000```\u8fdb\u5236\u7684\u4e24\u4f4d\u6570\uff0c\u7b2c\u4e00\u4f4d\u662f```AC```\u6570\uff0c\u7b2c\u4e8c\u4f4d\u662f```1500000 - ``` \u7f5a\u65f6\u6570\u7684\u7ed3\u679c\u3002\u56e0\u4e3aAC\u6570\u4e00\u5b9a```\u2264```$10^6$,\u6240\u4ee5\u8fd9\u4e2a\u6570\u5728\u5341\u8fdb\u5236\u4e0b\u53ea\u67091e12\u90a3\u4e48\u5927\uff0c\u5728```long long```\u8303\u56f4\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u529e\u6cd5\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u589e\u52a0\u4e86```AC```\u6570\u548c\u7f5a\u65f6\u6570\uff0c\u5c06\u5176\u7b2c\u4e00\u4f4d+1\uff0c\u7b2c\u4e8c\u4f4d\u51cf\u53bb\u7f5a\u65f6\u6570\uff0c\u7136\u540e\u5e73\u8861\u6811\u67e5\u8be2\uff0c\u518d\u5e73\u8861\u6811\u5220\u53bb\u4e00\u4e2a\u70b9\uff0c\u5e73\u8861\u6811\u52a0\u5165\u4e00\u4e2a\u3002\u6574\u4e2a\u8fc7\u7a0b\u9700\u8981\u5bf9\u6bcf\u4e2a\u4eba\u7ef4\u62a4\u8fd9\u4e2a```1500000```\u8fdb\u5236\u7684\u6570\u5373\u53ef\u3002\n\n\u8fc7\u7a0b\u4e2d\u8bf7\u6ce8\u610f\u53d8\u91cf\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u65e2\u6709```unsigned int```\uff0c \u53c8\u6709```long long```\uff0c\u7ec6\u5fc3\u4e00\u4e9b\u522b\u5f04\u9519\u4e86\u5c31\u884c\u3002",
        "postTime": 1585557938,
        "uid": 163980,
        "name": "\u884c\u541f\u5578\u4e5d\u5dde",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u76f4\u63a5\u5927\u529bsplay\u9e2d\uff0c\u6765\u4e2a\u4e0d\u5199\u6307\u9488\u7684\n\n\u6bcf\u6b21\u64cd\u4f5c\u6839\u636e$randNum ()$\u51fd\u6570\u751f\u6210Ria\u548cRib\n\n\u7528$ac[i]$\u8868\u793ai\u4f4d\u9009\u624b\u7684ac\u6570\uff0c$fs[i]$\u76f8\u5e94\u5730\u8868\u793a\u7f5a\u65f6\n\n\u90a3\u4e48\u6bcf\u6b21\u64cd\u4f5c$ac[Ria]++,fs[Ria]+=Rib$\n\n\u6709\u4e24\u4e2a\u5173\u952e\u5b57\uff0c\u600e\u4e48\u529e\uff1f\u4e0apair\n\n\u7136\u540e\u5957splay\u6a21\u677f\uff08\u8bb0\u5f97\u4e00\u5b9a\u8981\u63d2\u54e8\u5175\uff0c\u6211\u5c31\u5728\u8fd9\u6302\u4e86\uff09\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u5c31\u662f\u4e00\u4e2apair\n\npair\u7684first\u662fac\u6570\uff0c\u90a3\u4e48\u6b63\u5e38\u6bd4\u8f83\uff0csecond\u662f\u7f5a\u65f6\uff0c\u8d8a\u5c0f\u7684\u624d\u6392\u5728\u524d\u9762\uff0c\u56e0\u6b64\u63d2\u5165\u7684\u65f6\u5019\u53d6\u8d1f\u5c31\u884c\u4e86\u3002\n\nsplay\u6bd4\u8f83\u597d\u60f3~~\u5e9f\u8bdd~~\u5e38\u6570\u8fd8\u662f\u633a\u5927\u7684\uff0c\u4e0d\u5f00o2T\u4e24\u4e2a\u70b9\u3002\u3002\u3002\uff08\u4f46\u4e3b\u8981\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5\u561b\u5bf9\u5427\uff09\n\n\u8fd9\u9053\u9898\u8f93\u51fa\u91cf\u8fd8\u662f\u6bd4\u8f83\u5927\u7684\uff0c\u6362\u4e0a\u624b\u5199\u7ed3\u6784\u4f53\u548c\u5feb\u5199\u80fd\u8fc7\n\nCode:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cctype>\n#include <algorithm>\n#define MAXN 1200100\n#define INF 1 << 29\nusing namespace std;\ntypedef unsigned int ui;\ntypedef pair <int, int> pii;\n\nint size[MAXN], son[MAXN][3], father[MAXN], cnt[MAXN], ac[MAXN], fs[MAXN], sz, root, n;\npii val[MAXN];\nui m, seed, last = 7;\n\n//\u751f\u6210\u6570\u636e\u51fd\u6570\nui randNum (ui &seed, ui last, ui m) {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\n\n//splay\u6a21\u677f\nstruct spaly {\n    \n    inline void maintain (int x) {\n        size[x] = size[son[x][0]] + size[son[x][1]] + cnt[x];\n    }\n    \n    inline void rotate (int x) {\n        int y = father[x], z = father[y];\n        int k = son[y][1] == x, kk = son[z][1] == y;\n        son[z][kk] = x,\n        father[x] = z,\n        son[y][k] = son[x][k ^ 1],\n        father[son[x][k ^ 1]] = y,\n        son[x][k ^ 1] = y,\n        father[y] = x,\n        maintain (y), maintain (x);\n    }\n    \n    inline void splay (int x, int goal) {\n        while (father[x] != goal) {\n            int y = father[x], z = father[y];\n            if (z != goal)\n                (son[y][1] == x) ^ (son[z][1] == y)\n                    ? rotate (x) : rotate (y);\n            rotate (x);\n        }\n        if (! goal) root = x;\n    }\n    \n    inline int prev (pii x) {\n        int now = root, pre;\n        while (now) {\n            (val[now] < x)\n                ? pre = now, now = son[now][1]\n                : now = son[now][0];\n        }\n        return pre;\n    }\n    \n    inline int succ (pii x) {\n        int now = root, nxt;\n        while (now) {\n            (val[now] > x)\n                ? nxt = now, now = son[now][0]\n                : now = son[now][1];\n        }\n        return nxt;\n    }\n    \n    inline void del (pii x) {\n        int pre = prev (x), nxt = succ (x);\n        splay (pre, 0), splay (nxt, pre);\n        int pos = son[nxt][0];\n        if (cnt[pos] > 1) cnt[pos]--, splay (pos, 0);\n        else son[nxt][0] = 0;\n    }\n    \n    inline void insert (pii x) {\n        int now = root, fa = 0;\n        while (now && x != val[now]) fa = now, now = son[now][x > val[now]];\n        if (now) cnt[now]++;\n        else {\n            now = ++sz;\n            if (fa) son[fa][x > val[fa]] = now;\n            son[now][0] = son[now][1] = 0;\n            size[now] = cnt[now] = 1;\n            val[now] = x, father[now] = fa;\n        }\n        splay (now, 0);\n    }\n    \n}tree;\n\nint main () {\n    int T; scanf (\"%d\", &T);\n    for (register int i = 1; i <= T; i++) {\n    \tscanf (\"%d%d%d\", &m, &n, &seed), root = 0, sz = 0;\n        //\u4e00\u5b9a\u8981\u63d2\u4e24\u4e2a\u54e8\u5175\n    \ttree.insert (pii (INF, -INF)), tree.insert (pii (-INF, INF));  \n        //\u6e05\u7a7a\u6570\u636e\n    \tmemset (ac, 0, sizeof ac), memset (fs, 0, sizeof fs);\n    \tfor (register int j = 1; j <= n; j++) {\n    \t\tui o = randNum (seed, last, m), u = randNum (seed, last, m);\n            if (ac[o]) tree.del (pii (ac[o], -fs[o]));\n            //\u5982\u679c\u6709\u8fd9\u4e2a\u4eba\uff0c\u90a3\u4e48\u5220\u9664\uff0c\u6ce8\u610f\u7f5a\u65f6\u8981\u53d6\u8d1f\u63d2\u5165\uff0c\u8fce\u5408pair\u7684\u6bd4\u8f83\n            ++ac[o], fs[o] += u; tree.insert (pii (ac[o], -fs[o]));\n            //\u5904\u7406\u6570\u636e\uff0c\u63d2\u5165\u65b0\u8282\u70b9\n            last = size[son[root][1]] - 1, printf (\"%d\\n\", last);\n            //insert\u7684\u65f6\u5019\u65b0\u8282\u70b9\u5df2\u7ecf\u65cb\u5230\u6839\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u53f3\u5b50\u6811\uff08\u6bd4\u5b83\u6392\u540d\u9ad8\u7684\uff09\u5373\u53ef\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1561220301,
        "uid": 22658,
        "name": "sleepyNick",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u9996\u5148,\u6392\u540d\u7cfb\u7edf,\u4e00\u770b\u5c31\u77e5\u9053\u662f~~\u539f\u9898~~,\u53ef\u4ee5\u4e0a\u5e73\u8861\u6811\u6765\u7ef4\u62a4\n\n\u7136\u540e\u8003\u8651\u4e00\u79cd\u6bd4\u8f83\u6734\u7d20\u7684\u60f3\u6cd5,\u56e0\u4e3a\u6211\u4eec\u8981\u77e5\u9053\u6392\u540d\u5728\u4e00\u4e2a\u4eba\u524d\u9762\u7684\u4eba\u6570,\u4e5f\u5c31\u662fAC\u6570\u6bd4\u4ed6\u591a\u7684\u4eba\u6570+AC\u6570\u4e00\u6837\u5e76\u4e14\u7f5a\u65f6\u5c11\u7684\u4eba\u6570,\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u90a3\u4e24\u4e2a\u4e1c\u897f.AC\u6570\u66f4\u591a\u7684\u4eba\u6570\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u4e0a\u6811\u72b6\u6570\u7ec4.\u540e\u8005\u7684\u8bdd\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u79cdAC\u6570\u5f00\u503c\u57df\u7ebf\u6bb5\u6811,\u5b58\u6bcf\u4e2a\u7f5a\u65f6\u6709\u591a\u5c11\u4eba,\u6ce8\u610f\u5230\u7f5a\u65f6\u4e4b\u548c\u4e0d\u4f1a\u8d85\u8fc7$1.5*10^6$,\u6240\u4ee5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3.\u7136\u540e\u6bcf\u6b21\u6709\u4e2a\u4ebaAC\u6570\u548c\u7f5a\u65f6\u6539\u53d8\u5c31\u5148\u5728\u539f\u6765\u7684\u4f4d\u7f6e-1,\u7136\u540e\u5728\u65b0\u4f4d\u7f6e+1.\u6bcf\u6b21\u8be2\u95ee\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u4e0aAC\u6570$>$\u5f53\u524dAC\u6570\u7684\u5bf9\u5e94\u533a\u95f4\u4e4b\u548c$+$\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u7f5a\u65f6$<$\u5f53\u524d\u7f5a\u65f6\u7684\u533a\u95f4\u4e4b\u548c\n\n```cpp\n// luogu-judger-enable-o2\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<ctime>\n#include<queue>\n#include<map>\n#include<set>\n#define LL long long\n#define ui unsigned int\n\nusing namespace std;\nconst int N=1e5+10,M=1e6+10,MX=1500000;\nLL rd()\n{\n    LL x=0,w=1;char ch=0;\n    while(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*w;\n}\nui randNum(ui& seed ,ui last,const ui m)\n{ \n    seed=seed*17+last;\n    return seed%m+1; \n}\nui sd;\nint m,n,a[N],b[N],c[M];\nvoid ad(int x,int y){while(x<=n) c[x]+=y,x+=x&(-x);}\nint gsm(int x){int an=0;while(x) an+=c[x],x-=x&(-x);return an;}\nint s[M*25],ch[M*25][2],rt[M],tt;\nvoid add(int o1,int o2,int x)\n{\n    int l=1,r=MX;\n    s[o1]=s[o2]+1;\n    while(l<r)\n    {\n        int mid=(l+r)>>1;\n        if(x<=mid)\n        {\n            ch[o1][0]=++tt,ch[o1][1]=ch[o2][1];\n            o1=ch[o1][0],o2=ch[o2][0];\n            r=mid;\n        }\n        else\n        {\n            ch[o1][0]=ch[o2][0],ch[o1][1]=++tt;\n            o1=ch[o1][1],o2=ch[o2][1];\n            l=mid+1;\n        }\n        s[o1]=s[o2]+1;\n    }\n}\nvoid dec(int o,int x)\n{\n    int l=1,r=MX;\n    --s[o];\n    while(l<r)\n    {\n        int mid=(l+r)>>1;\n        if(x<=mid) o=ch[o][0],r=mid;\n        else o=ch[o][1],l=mid+1;\n        --s[o];\n    }\n}\nint quer(int o,int l,int r,int ll,int rr)\n{\n    if(ll>rr||!o) return 0;\n    if(ll<=l&&r<=rr) return s[o];\n    int an=0,mid=(l+r)>>1;\n    if(ll<=mid) an+=quer(ch[o][0],l,mid,ll,rr);\n    if(rr>mid) an+=quer(ch[o][1],mid+1,r,ll,rr);\n    return an;\n}\n    \n\nint main()\n{\n    int T=rd(),ans=7;\n    while(T--)\n    {\n        m=rd(),n=rd(),sd=rd();\n        for(int i=1;i<=n;++i) c[i]=rt[i]=0;\n        for(int i=1;i<=m;++i) a[i]=b[i]=0;\n        tt=0;\n        for(int i=1;i<=n;++i)\n        {\n            int x=randNum(sd,ans,m),y=randNum(sd,ans,m);\n            if(a[x]) dec(rt[a[x]],b[x]),ad(a[x],-1);\n            ++a[x],b[x]+=y;\n            int las=rt[a[x]];\n            add(rt[a[x]]=++tt,las,b[x]),ad(a[x],1);\n            ans=gsm(n)-gsm(a[x])+quer(rt[a[x]],1,MX,1,b[x]-1);\n            printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1557059094,
        "uid": 38372,
        "name": "star_magic_young",
        "ccfLevel": 9,
        "title": "luogu P5338 [TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c"
    },
    {
        "content": "# \u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u89e3\u9898\u62a5\u544a\n\n\u8fd9\u9898\u4e00\u770b\uff0c\u522b\u4eba\u90fd\u8bf4\u662f\u5e73\u8861\u6811\u7684\u677f\u5b50\uff0c\u8fd8\u90fd\u7528 **fhq_treap** \u6253\u8fc7\u4e86\uff0c\u6211\u8fd9\u4e48\u83dc\uff0c\u7b2c\u4e00\u773c\u6ca1\u770b\u51fa\u6765\u65f6\u5e73\u8861\u6811\uff0c\u7b2c\u4e8c\u773c\u770b\u51fa\u6765\u4e86\uff0c\u4e4b\u540e\u5192\u51fa\u5404\u79cd sb \u9519\u8bef\n\n~~\u8bdd\u8bf4 \u7532\u82ef\u5148\u751f \u548c \u5927\u4e2d\u950b \u662f\u4ec0\u4e48\u6897\u5440\uff08\u96fe\uff09~~\n\n~~\u8bdd\u8bf4\u53bb\u5e74 **lyz** \u662f\u600e\u4e48 **T1** \u7206\u96f6\u7684\uff1f~~\n\n~~\u8bdd\u8bf4\u8fd9\u9898\u8fd9\u4e48\u6c34\u6211\u600e\u4e48RE\u8fd9\u4e48\u591a\u6b21~~\n\n\u6211\u4eec\u8fd9\u91cc\u64cd\u4f5c\u4e00\u4e0b\uff0c\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\u5c31\u597d\u4e86\uff0c\u7ed3\u70b9\u7684 *data* \u7528\u4e2a\u7ed3\u6784\u4f53\u5c01\u88c5\uff0c\u7136\u540e\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5373\u53ef\u3002\n\n~~\u8bdd\u8bf4\u6211\u7684avl\u4e0d\u80fd\u5f00 O2 \u662f\u4ec0\u4e48\u9b3c~~ \n\n\u6211\u6015\u662foier\u4e2d\u6781\u5c11\u6570\u4f1aavl\u7684\u4eba\u5427\u3002avl\u6811\u7684\u4f18\u70b9\u662f\u6781\u4e3a\u7a33\u5b9a\uff01\u4f46\u662f\u7a33\u5b9a\u7684\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u4ed6\u80af\u5b9a\u662f $O(n \\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4e8e\u662f\u5f88\u591a\u9898\u53ef\u4ee5\u8fc7\u3002\u800c\u4e14\u4ed6\u5c31\u662f\u6700\u672c\u8d28\u7684 **BST** \u529f\u80fd\u6781\u4e3a\u5f3a\u5927\uff08\u96fe\uff09\u3002\n\n\u4f46\u662f\u50cf\u8fd9\u9053\u9898\u53ea\u80fd\u5f97\u523090pts,\u56e0\u4e3a\u6709\u592a\u591a\u7684\u5220\u9664\u64cd\u4f5c\u3002\u3002\n\n\u8bdd\u8bf4\u5f00\u4e86O2\u5c31RE\u662f\u4ec0\u4e48\u9b3c\n\n\u4f46\u662f\u6211\u7684\u66ff\u7f6a\u7f8a\u80fd\u8fc7\u5440\uff01\n\n## avl\u4ee3\u7801\n\n```c++\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int Maxn = 1e5 + 11;\n\nll t, n, m;\n\ntypedef unsigned int ui;\n\nui seed, ria, rib, last;\n\nui randNum(ui& seed, ui last, const ui m) {\n\tseed = seed * 17 + last;\n\treturn seed % m + 1;\n}\n\nstruct Plr {\n\tint ac, tim;\n\tbool operator < (const Plr b) const { return(b.ac == ac) ? tim > b.tim :ac < b.ac; }\n\tvoid operator = (const Plr x) { ac = x.ac; tim = x.tim; }\n\tbool operator ==(const Plr b) const { return  ac == b.ac && tim == b.tim; }\n}plr[Maxn];\n\nstruct avlNode;\n\ntypedef avlNode *avl;\n\nstruct avlNode {\n\tPlr data;\n\tint size, high, num;\n\tavl ls, rs;\n\tint get_size() { return this == NULL ? 0 : this->size; }\n\tint get_high() { return this == NULL ? 0 : this->high; }\n\tvoid update() {\n\t\tthis->size = this->ls->get_size() + this->rs->get_size() + this->num;\n\t\tthis->high = max(this->ls->get_high(), this->rs->get_high()) + 1;\n\t}\n\tavlNode(Plr x) {\n\t\tsize = 1;\n\t\thigh = 1;\n\t\tnum = 1;\n\t\tdata = x;\n\t\tls = NULL;\n\t\trs = NULL;\n\t}\n};\n\navl Single_left(avl k2) {\n\tavl k1 = k2->ls;\n\tk2->ls = k1->rs;\n\tk1->rs = k2;\n\tk2->update();\n\tk1->update();\n\treturn k1;\n}\n\navl Single_right(avl k1) {\n\tavl k2 = k1->rs;\n\tk1->rs = k2->ls;\n\tk2->ls = k1;\n\tk1->update();\n\tk2->update();\n\treturn k2;\n}\n\navl double_left_right(avl T) {\n\tT->ls = Single_right(T->ls);\n\treturn Single_left(T);\n}\n\navl double_right_left(avl T) {\n\tT->rs = Single_left(T->rs);\n\treturn Single_right(T);\n}\n\navl Make_empty(avl T) {\n\tif(T != NULL) {\n\t\tMake_empty(T->ls);\n\t\tMake_empty(T->rs);\n\t\tdelete T;\n\t}\n\treturn NULL;\n}\n\navl insert(Plr x, avl T) {\n\tif(T == NULL) { return new avlNode(x); }\n\tif(x == T->data) {\n\t\t++(T->num);\n\t\tT->update();\n\t\treturn T;\n\t}\n\telse if(x < T->data) {\n\t\tT->ls = insert(x, T->ls);\n\t\tT->update();\n\t\tif(T->ls->get_high() - T->rs->get_high() == 2) {\n\t\t\tif(x < T->ls->data) { T = Single_left(T); }\n\t\t\telse { T = double_left_right(T); }\n\t\t}\n\t}\n\telse {\n\t\tT->rs = insert(x, T->rs);\n\t\tT->update();\n\t\tif(T->rs->get_high() - T->ls->get_high() == 2) {\n\t\t\tif(T->rs->data < x) { T = Single_right(T); }\n\t\t\telse { T = double_right_left(T); }\n\t\t}\n\t}\n\tT->update();\n\treturn T;\n}\n\navl erase(Plr x, avl T) {\n\tif(T == NULL) return NULL;\n\tif(T->data == x) {\n\t\tif(T->num > 1) {\n\t\t\t--(T->num);\n\t\t\tT->update();\n\t\t\treturn T;\n\t\t}\n\t\telse if(T->ls && T->rs) {\n\t\t\tavl tmp = T->rs;\n\t\t\twhile(tmp->ls) { tmp = tmp->ls; }\n\t\t\tT->num = tmp->num;\n\t\t\tT->data = tmp->data;\n\t\t\ttmp->num = 1;\n\t\t\tT->rs = erase(tmp->data, T->rs);\n\t\t\tT->update();\n\t\t\tif(T->ls->get_high() - T->rs->get_high() == 2) {\n\t\t\t\tif(T->ls->ls->get_high() >= T->ls->rs->get_high()) { T = Single_left(T); }\n\t\t\t\telse { T = double_left_right(T); }\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tavl tmp = T;\n\t\t\tif(T->ls) T = T->ls;\n\t\t\telse if(T->rs) T = T->rs;\n\t\t\telse T = NULL;\n\t\t\tdelete tmp;\n\t\t}\n\t}\n\telse if(x < T->data) {\n\t\tT->ls = erase(x, T->ls);\n\t\tT->update();\n\t\tif(T->rs->get_high() - T->ls->get_high() == 2) {\n\t\t\tif(T->rs->rs->get_high() >= T->rs->ls->get_high()) { T = Single_right(T); }\n\t\t\telse { T = double_right_left(T); }\n\t\t}\n\t}\n\telse {\n\t\tT->rs = erase(x, T->rs);\n\t\tT->update();\n\t\tif(T->ls->get_high() - T->rs->get_high() == 2) {\n\t\t\tif(T->ls->ls->get_high() >= T->ls->rs->get_high()) { T = Single_left(T); }\n\t\t\telse { T = double_left_right(T); }\n\t\t}\n\t}\n\tif(T == NULL) return NULL;\n\tT->update();\n\treturn T;\n}\n\nint get_rank(Plr x, avl T) {\n\tif(T->data == x) return T->rs->get_size();\n\tif(x < T->data) return get_rank(x, T->ls) + T->rs->get_size() + T->num;\n\treturn get_rank(x, T->rs);\n}\n\navl T = NULL;\n\nint read() {\n\tint x = 0;\n\tchar ch = getchar();\n\twhile(ch <'0' || ch >'9') ch = getchar();\n\twhile(ch <= '9' && ch >= '0') {\n\t\tx = (x << 1) + (x << 3) + (ch - '0');\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\nvoid write(int x){\n\tif(x < 10) {\n\t\tputchar(x + 48);\n\t\treturn;\n\t}\n\twrite(x / 10), write(x % 10);\n}\nint main() {\n\t//freopen(\"test.in\", \"r\", stdin);\n\tt = read();\n\tlast = 7;\n\twhile(t--) {\n\t\tm = read(); n = read(); seed = read();\n\t\tfor(int i = 1; i <= m; ++i) {\n\t\t\tplr[i].ac = plr[i].tim = 0;\n\t\t\tT = insert(plr[i], T);\n\t\t}\n\t\tfor(int i = 1; i <= n; ++i) {\n\t\t\tria = randNum(seed, last, m);\n\t\t\trib = randNum(seed, last, m);\n\t\t\tT = erase(plr[ria], T);\n\t\t\tplr[ria].ac++; plr[ria].tim += rib;\n\t\t\tT = insert(plr[ria], T);\n\t\t\tlast = get_rank(plr[ria], T);\n\t\t\twrite(last);\n\t\t\tputchar('\\n');\n\t\t}\n\t\tT = Make_empty(T);\n\t}\n\treturn 0;\n}\n```\n\n\u5728\u4fdd\u8bc1\u4e0dRE\u7684\u65f6\u5019\u7801\u91cf+\u8c03\u8bd5\u96be\u5ea6\u582a\u6bd4\u732a\u56fd\u6740\u3002\n\n## \u66ff\u7f6a\u7f8a\n\n~~\u8fd9\u9053\u9898\u7528\u66ff\u7f6a\u7f8a\u5c31\u6bd4\u8f83\u5408\u9002\u4e86\uff08\u867d\u7136\u5f00\u4e86O2\u624d\u80fd\u8fc7\uff09~~\n\n\u56e0\u4e3a\u7ed3\u70b9\u5b9e\u5728\u662f\u592a\u591a\u4e86\uff01\uff01\uff01\u8fd9\u5c31\u662f\u66ff\u7f6a\u7f8a\u7684\u5f0a\u7aef\u3002\n\n```c++\n#define _CRT_SECURE_NO_WARNINGS\n#pragma GCC optimize(2)\n\n#include <iostream>\n#include <cstdio>\n#include <vector>\n\ntemplate<typename T> inline T abs(const T &a) { return a < 0 ? -a : a; }\n\nconst int Maxn = 1e5 + 11;\n\nstruct Plr {\n\tint ac, tim;\n\tvoid operator = (const Plr &x) { ac = x.ac; tim = x.tim; return; }\n\tbool operator < (const Plr &x) const { return ac == x.ac ? tim > x.tim:ac < x.ac; }\n\tbool operator == (const Plr &x) { return ac == x.ac && tim == x.tim; }\n\tbool operator <= (const Plr &x) const { return ac == x.ac ? tim >= x.tim : ac <= x.ac; }\n}plr[Maxn];\n\n#define get getchar\n#define put putchar\n\nint read() { int x = 0; bool f = 0; char ch = get(); while(ch < '0' || ch >'9') { f = (ch == '-'); ch = get(); }while(ch <= '9' && ch >= '0') { x = (x << 1) + (x << 3) + (ch - '0'); ch = get(); }return f ? -x : x; }\nvoid write(int x) { if(x < 0) { put('-'); x = abs(x); }if(x < 10) { put(x + 48); return; }write(x / 10); put(x % 10 + 48); }\nvoid write(Plr x) { write(x.ac); put(' '); write(x.tim); put('\\n'); }\n\n#undef put\n#undef get\n\nusing namespace std;\n\ntypedef double db;\n\nconst double alpha = 0.7125;\n\n#define al alpha\n\nstruct sgtNode;\n\ntypedef sgtNode *sgt;\n\nstruct sgtNode {\n\tPlr data;\n\tint size, valid;\n\tbool del;\n\tsgt ls, rs;\n\tbool bad() { return (double)this->ls->size > al *(double) this->size || (double)this->rs->size > al *(double) this->size; }\n\tvoid update() { this->size = this->ls->size + this->rs->size + 1; this->valid = this->ls->valid + this->rs->valid + !this->del; }\n};\n\nsgt NullNode = NULL;\n\nsgt Makety(sgt T) {\n\tif(T != NullNode) {\n\t\tT->ls = Makety(T->ls);\n\t\tT->rs = Makety(T->rs);\n\t\tdelete T;\n\t\tT = NULL;\n\t}\n\treturn NULL;\n}\n\nvoid output(sgt T) {\n\tif(T != NullNode) {\n\t\toutput(T->ls);\n\t\tputchar(' ');\n\t\twrite(T->data);\n\t\tputchar(' ');\n\t\toutput(T->rs);\n\t}\n\treturn;\n}\n\n\nsgt build(vector <sgt> &ve, int l, int r) {\n\tif(l > r) return NullNode;\n\tint mid = (l + r) >> 1;\n\tsgt T = ve[mid];\n\tT->ls = build(ve, l, mid - 1);\n\tT->rs = build(ve, mid + 1, r);\n\tT->update();\n\treturn T;\n}\n\nvoid dfs(sgt T, vector <sgt> &ve) {\n\tif(T == NullNode) return;\n\tdfs(T->ls, ve);\n\tif(!T->del) ve.push_back(T);\n\tdfs(T->rs, ve);\n\tif(T->del) { delete T; }\n}\n\nsgt rebuild(sgt T) {\n\tvector <sgt> ve;\n\tdfs(T, ve);\n\treturn build(ve, 0, ve.size() - 1);\n}\n\nsgt insert(sgt T, Plr x) {\n\tif(T == NullNode) {\n\t\tT = new sgtNode();\n\t\tT->ls = T->rs = NullNode;\n\t\tT->data = x;\n\t\tT->del = 0;\n\t\tT->size = T->valid = 1;\n\t\treturn T;\n\t}\n\t++(T->size); ++(T->valid);\n\tif(T->data <= x) { T->rs = insert(T->rs, x); }\n\telse { T->ls = insert(T->ls, x); }\n\tif(T->bad()) { T = rebuild(T); }\n\treturn T;\n}\n\nsgt erase(int rnk, sgt T) {\n\tif(!T->del && rnk == T->ls->valid + 1) {\n\t\tT->del = 1;\n\t\t--(T->valid);\n\t\treturn T;\n\t}\n\t--(T->valid);\n\tif(rnk <= T->ls->valid + !T->del) { T->ls = erase(rnk, T->ls); }\n\telse { T->rs = erase(rnk - T->ls->valid - !T->del, T->rs); }\n\treturn T;\n}\n\nint get_rank(sgt T, Plr x) {\n\tint ans = 1;\n\twhile(T != NullNode) {\n\t\tif(x <= T->data) { T = T->ls; }\n\t\telse { ans += T->ls->valid + !T->del; T = T->rs; }\n\t}\n\treturn ans;\n}\n\nint get_rank1(sgt T, Plr x) {\n\tint ans = 0;\n\twhile(T != NullNode) {\n\t\tif(x < T->data) { ans += T->rs->valid + !T->del; T = T->ls; }\n\t\telse { T = T->rs;}\n\t}\n\treturn ans;\n}\n\ntypedef unsigned int ui;\n\nui seed, last, m, n, t;\n\nui randNum(ui& seed, ui last, const ui m) {\n\tseed = seed * 17 + last;\n\treturn seed % m + 1;\n}\n\nint main() {\n\t//freopen(\"in.txt\", \"r\", stdin);\n\tt = read();\n\tlast = 7;\n\tNullNode = new sgtNode();\n\twhile(t--) {\n\t\tsgt rot = NullNode;\n\t\tm = read(); n = read(); seed = read();\n\t\tfor(int i = 1; i <= (int)m; ++i) {\n\t\t\tplr[i].ac = plr[i].tim = 0;\n\t\t\trot = insert(rot, plr[i]);\n\t\t}\n\t\tint ria, rib;\n\t\twhile(n--) {\n\t\t\tria = randNum(seed, last, m);\n\t\t\trib = randNum(seed, last, m);\n\t\t\trot = erase(get_rank(rot, plr[ria]), rot);\n\t\t\tplr[ria].ac++;\n\t\t\tplr[ria].tim += rib;\n\t\t\trot = insert(rot, plr[ria]);\n\t\t\tlast = get_rank1(rot, plr[ria]);\n\t\t\twrite(last);\n\t\t\tputchar('\\n');\n\t\t}\n\t\trot = Makety(rot);\n\t}\n\treturn 0;\n}\n```\n\n\u4f46\u662f\u8f83\u597d\u8c03\u8bd5\uff0c\u4ee3\u7801\u77ed",
        "postTime": 1584183156,
        "uid": 232125,
        "name": "SiRiehn_nx",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10954797.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5338)\n\n#### ~~\u8fd9\u9898\u660e\u663e\u53ef\u4ee5\u5e73\u8861\u6811\u76f4\u63a5\u5927\u529b\u6574\uff0c\u6240\u4ee5\u6211\u8981\u8bf4\u4e00\u4e0b\u7ebf\u6bb5\u6811+\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5~~\n\n#### ~~\u5b9e\u9645\u7ebf\u6bb5\u6811+\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5\u4e5f\u5f88\u66b4\u529b~~\n\n#### \u6211\u4eec\u5148\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u4e2aac\u6570\u91cf\u6709\u591a\u5c11\u4e2a\u961f\u4f0d\u3002\u8fd9\u6837\u5c31\u80fd\u5feb\u901f\u6c42\u51fa\u6709\u591a\u5c11\u961f\u4f0dac\u6570\u6bd4\u73b0\u5728\u8fd9\u4e2a\u961f\u4f0dac\u6570\u591a\n\n#### \u6211\u4eec\u518d\u7528$n$\u68f5\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u7b2c$i$\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662fac\u6570\u4e3a$i$\u7684\u961f\u4f0d\u7684\u7f5a\u65f6\u60c5\u51b5\u3002\u5f53\u4e00\u4e2a\u961f\u4f0dac\u6570\u4e3a$x$\u7f5a\u65f6\u4e3a$t$\u65f6\uff0c\u5c31\u5728\u7b2c$x$\u68f5\u7ebf\u6bb5\u6811$t$\u4e0a\u52a0\u4e00\u3002\u8fd9\u6837\u5c31\u80fd\u5feb\u901f\u6c42\u51fa\u6709\u591a\u5c11\u961f\u4f0dac\u6570\u4e0e\u73b0\u5728\u8fd9\u4e2a\u961f\u4f0dac\u6570\u76f8\u540c\u4e14\u7f5a\u65f6\u66f4\u5c11\n\n#### \u5f53\u4e00\u4e2a\u961f\u4f0d\u8fc7\u4e86\u4e00\u9898\u540e\u5c31\u5728\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u4e2d\u6b63\u5e38\u4fee\u6539\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\n#define M 1000005\n#define N 150005\n#define ML 1500005\n#define uint unsigned int\n#define getchar nc\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register int x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\nuint randNum(uint& seed,uint last,const uint mod)\n{\n\tseed=17*seed+last;\n\treturn seed%mod+1;\n}\nstruct bit{\n\tint tr[N];\n\tinline void init()\n\t{\n\t\tmemset(tr,0,sizeof(tr));\n\t}\n\tinline void update(register int pos,register int val)\n\t{\n\t\tfor(register int i=pos;i<N;i+=i&(-i))\n\t\t\ttr[i]+=val;\n\t}\n\tinline int query(register int pos)\n\t{\n\t\tint res=0;\n\t\tfor(register int i=pos;i;i-=i&(-i))\n\t\t\tres+=tr[i];\n\t\treturn res;\n\t}\n}tr1;\nstruct segt{\n\tstruct node{\n\t\tint ls,rs,sum;\n\t}tr[M*40];\n\tint tot,root[N];\n\tinline void init()\n\t{\n\t\tmemset(root,0,sizeof(root));\n\t\ttot=0;\n\t}\n\tinline void update(register int &rt,register int l,register int r,register int pos,register int val)\n\t{\n\t\tif(!rt)\n\t\t{ \n\t\t\trt=++tot;\n\t\t\ttr[rt].ls=tr[rt].rs=tr[rt].sum=0;\n\t\t} \n\t\tif(l==r)\n\t\t{\n\t\t\ttr[rt].sum+=val;\n\t\t\treturn;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tif(pos<=mid)\n\t\t\tupdate(tr[rt].ls,l,mid,pos,val);\n\t\telse\t\n\t\t\tupdate(tr[rt].rs,mid+1,r,pos,val);\n\t\ttr[rt].sum=tr[tr[rt].ls].sum+tr[tr[rt].rs].sum;\n\t}\n\tinline int query(register int &rt,register int l,register int r,register int L,register int R)\n\t{\n\t\tif(!rt)\n\t\t\treturn 0;\n\t\tif(L<=l&&r<=R)\n\t\t\treturn tr[rt].sum;\n\t\tint mid=l+r>>1,res=0;\n\t\tif(L<=mid)\n\t\t\tres+=query(tr[rt].ls,l,mid,L,R);\n\t\tif(R>mid)\n\t\t\tres+=query(tr[rt].rs,mid+1,r,L,R);\n\t\treturn res;\n\t}\n}tr2;\nuint seed,last;\nint T,n,m,tim[N],num[N];\nint main()\n{\n\tT=read();\n\tlast=7;\n\twhile(T--)\n\t{\n\t\tm=read(),n=read(),seed=read();\n\t\tmemset(num,0,sizeof(num));\n\t\tmemset(tim,0,sizeof(tim));\n\t\ttr1.init(),tr2.init();\n\t\tfor(register int i=1;i<=m;++i)\n\t\t\tnum[i]=1,tim[i]=1;\n\t\ttr1.update(1,m),tr2.update(tr2.root[1],1,ML,1,m);\n\t\tfor(register int i=1;i<=n;++i)\n\t\t{\n\t\t\tint p=randNum(seed,last,m),v=randNum(seed,last,m);\n\t\t\ttr1.update(num[p],-1);\n\t\t\ttr2.update(tr2.root[num[p]],1,ML,tim[p],-1);\n\t\t\t++num[p],tim[p]+=v;\n\t\t\ttr1.update(num[p],1);\n\t\t\ttr2.update(tr2.root[num[p]],1,ML,tim[p],1);\n\t\t\tint res=m-tr1.query(num[p]);\n\t\t\tres+=tr2.query(tr2.root[num[p]],1,ML,1,tim[p]-1);\n\t\t\tlast=res;\n\t\t\twrite(res),puts(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1560663191,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9053\u9898\u7edd\u5bf9\u662f\u5165\u95e8splay\u7684\u7edd\u4e16\u597d\u9898 \u5361\u4e86\u6211\u4e00\u5929\u7684\u5e38 \n\n\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u53ea\u9700\u8981\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\n- \u5220\u9664\u67d0\u4e00\u6743\u503c\u7684\u4eba\n- \u52a0\u5165\u67d0\u4e00\u6743\u503c\u7684\u4eba  \n\n\u90a3\u4e48\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u62ff\u5e73\u8861\u6811\u7ef4\u62a4 \u6211\u4eec\u5e73\u8861\u6811\u53ea\u9700\u8981\u652f\u6301\u5220\u9664\u548c\u63d2\u5165\u5c31\u597d\u4e86 \n\n\u6211\u76f8\u4fe1\u5404\u4f4d\u90fd\u4f1a\u5199\u4e00\u4e9b\u9ad8\u6548\u5e73\u8861\u6811 \u4f46\u662f\u6211\u4e0d\u4f1a \u6211\u53ea\u4f1afhq-treap  \n\n\u6211\u8ba4\u4e3a\u4ee5\u6211\u7684\u5e38\u6570fhq-treap\u6839\u672c\u4e0d\u53ef\u80fd\u901a\u8fc7\u8fd9\u9053\u9898 \u4e8b\u5b9e\u4e0a \u6211\u7684fhq-treap\u53ea\u62ff\u5230\u4e86\u4e94\u5341\u5206\u7684\u4f18\u79c0\u6210\u7ee9  \n\n\u6240\u4ee5\u6211\u53bb\u5b66\u4e86\u4e00\u4e0bsplay \u5e76\u5c1d\u8bd5\u4f7f\u7528splay\u89e3\u51b3\u5b83 \u7136\u540e\u7ecf\u5386\u4e86\u56db\u6b21\u91cd\u6784\u4ee5\u540e\u6210\u529f\u7684\u5361\u8fdb\u4e8610\u79d2\n\n\u7b80\u5355\u8bf4\u4e00\u4e0bsplay\u9700\u8981\u5361\u5e38\u7684\u70b9\u4ee5\u53ca\u5751\u70b9\n- \u67d0\u4f4d\u5927\u4f6c\u8bf4\u8fc7\u7684 \u628a\u4e24\u4e2a\u5c5e\u6027\u538b\u7f29\u6210\u4e00\u4e2a\u5c5e\u6027\n- \u5220\u9664\u7684\u65f6\u5019\u4f60\u5f53\u7136\u53ef\u4ee5\u6309\u7167\u6743\u503c\u518d\u53bb\u7528$logn$\u7684\u65f6\u95f4\u627e\u5230\u8fd9\u4e2a\u70b9 \u7136\u540e\u5904\u7406\u5b83 \u4f46\u662f\u8fd9\u6837\u505a\u5f88\u6162 \u4f60\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e00\u4e2a\u4eba\u5bf9\u5e94\u7684splay\u4e0a\u7684\u70b9 \u7136\u540e\u76f4\u63a5\u64cd\u4f5c\u8fd9\u4e2a\u70b9\n- \u6e05\u7a7a\u6811\u7684\u65f6\u5019\u628a\u8bb0\u5f55\u8282\u70b9\u6570\u7684cnt\u8bbe\u7f6e\u62100\u5c31\u597d\u4e86 \u518d\u53bb\u904d\u5386\u4e00\u904d\u6574\u68f5\u6811\u4e5f\u4f1a\u5bfc\u81f4\u5e38\u6570\u53d8\u5927\n- \u4e0d\u9700\u8981\u5199\u8bfb\u5165\u4f18\u5316 \u4f46\u662f\u4e00\u5b9a\u8981\u5199\u8f93\u51fa\u4f18\u5316 \u8fd9\u9898\u8f93\u51fa\u91cf\u8fbe\u5230\u4e86\u6050\u6016\u7684\u4e03\u4f4d\u6570\n  - \u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 \u4f46\u662f\u6211\u81ea\u5df1\u8dd1\u7684\u65f6\u5019fwrite\u6bd4putchar\u8dd1\u5f97\u6162\n- \u8dd1\u5b8c\u4e00\u7ec4\u6570\u636e\u4e4b\u540e\u4e0d\u9700\u8981\u6e05\u7a7alast \u6211\u7b2c\u4e00\u6b21\u56e0\u4e3a\u8fd9\u4e2awa\u4e86\n- \u80fd\u4e0dsplay\u5c31\u4e0d\u8981splay \u6bd4\u5982\u4f60\u5728\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u8fc7\u540e\u662f\u4e00\u5b9a\u8981\u5c06\u5b83splay\u5230\u6839\u7684 \u4f46\u662f\u7d27\u63a5\u7740\u67e5\u8be2\u6392\u540d\u7684\u65f6\u5019 \u53ef\u4ee5\u76f4\u63a5\u628a\u4ed6\u7684\u5de6\u5b50\u6811\u5927\u5c0f\u641e\u51fa\u6765 \u4e5f\u5c31\u662f\u8bf4\u80fd\u76f4\u63a5\u901a\u8fc7\u4eba\u8111yy\u5f97\u51fa\u7684\u4e1c\u897f\u5c31\u4e0d\u8981\u53bb\u9ebb\u70e6\u8ba1\u7b97\u673a\u8ba1\u7b97\n \n\u7136\u540e\u987a\u4fbf\u7ed9\u51fa\u6700\u540e\u4e24\u4e2a\u70b9\u7684\u6570\u636e(\u4ec5\u8f93\u5165)  \n![QAQ](https://i.loli.net/2019/05/13/5cd9218918b3391251.jpg)  \n\n\u6700\u540e\u4e22\u4e00\u4e2a\u8d3c\u4e11\u7684\u4ee3\u7801\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"inline\")\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef unsigned int ui;\ntypedef long long int_t;\ntypedef int int_T;\n\nconst int_t maxn = 1200100;\nconst int_t base = 23;\nconst int_t tmpb = 1<<23;\n#define il inline \n\nil ui randNum(ui& seed, ui last, const ui m) {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\n\n\nil int_t getAC(int_t rt){return rt>>24;}\nil int_t getTim(int_t rt){return (rt>>1)&(tmpb-1);}\nil bool cmp(int_t a,int_t b){return getAC(a)==getAC(b)?getTim(a)<getTim(b):getAC(a)>getAC(b);}\nil int_t getW(int_t AC,int_t tim){return (AC << 24) | (tim<<1);}\n\nint_T son[maxn][2],fa[maxn],size[maxn],ac[maxn],ys[maxn];\nint_T root,last=7,cnt=0;\nint_t w[maxn],tw[maxn];\n\nil bool check(int_T rt){\n    return son[fa[rt]][1] == rt;\n}\n\nil void pushup(int_T rt){\n    size[rt] = size[son[rt][0]] + size[son[rt][1]] + ac[rt];\n}\n\nil void rotate(int_T rt){\n    int_T tfa = fa[rt],gfa = fa[tfa];\n    bool ck = check(rt);\n    fa[rt] = gfa;\n    if(gfa)son[gfa][check(tfa)] = rt;\n    son[tfa][ck] = son[rt][!ck];\n    if(son[rt][!ck])fa[son[rt][!ck]] = tfa;\n    son[rt][!ck] = tfa;\n    fa[tfa] = rt;\n    size[rt] = size[tfa];\n    pushup(tfa);\n}\n\nil void splay(int_T rt,int_T goal){\n    while(fa[rt] != goal){\n        if(fa[fa[rt]] != goal){\n            if(check(rt) == check(fa[rt]))rotate(fa[rt]);\n            else rotate(rt);\n        }\n        rotate(rt);\n    }\n    if(goal == 0)root = rt;\n}\n\nil void insert(int_t W){\n    int_T rt = root,tfa = 0;\n    while(w[rt] != W && rt)tfa = rt,rt = son[rt][cmp(w[rt],W)];\n    if(rt)++ac[rt];\n    else {\n        w[++cnt] = W;\n        ac[cnt] = size[cnt] = 1;\n        son[cnt][0] = son[cnt][1] = fa[cnt] = 0;  \n        if(tfa) {\n            fa[cnt] = tfa;\n            son[tfa][cmp(w[tfa],W)] = cnt;\n        } \n        rt = cnt;\n    }\n    splay(rt,0);\n}\n\nil int_T pre(int_T rt){rt=son[rt][0];while(son[rt][1])rt=son[rt][1];return rt;}\nil int_T nxt(int_T rt){rt=son[rt][1];while(son[rt][0])rt=son[rt][0];return rt;}\n\nil void del(int_t rt){\n    splay(rt,0);\n    int_T p = pre(rt),n = nxt(rt);\n    splay(p,0);splay(n,p);\n    if(ac[rt] > 1)--ac[rt],--size[rt],--size[p],--size[n];\n    else {son[n][0] = fa[rt] = size[rt] = ac[rt] = w[rt] = 0;--size[n],--size[p];}\n}\n\nvoid write(int_T x){\n    if(x > 9)write(x/10);\n    putchar(x%10 + '0');\n}\n\nvoid work(){\n    ui seed,m,n;\n    scanf(\"%d%d%d\",&m,&n,&seed);\n    root = son[0][0] = son[0][1] = w[0] = fa[0] = 0;\n    cnt = 0;\n    for(int_T i=1;i<=m;i++)\n        insert(1),tw[i] = 1,ys[i]=1;\n    insert(getW(n+23,0));\n    insert(getW(0,233));\n    while(n--){\n        ui Ria = randNum(seed,last,m),Rib = randNum(seed,last,m);\n        del(ys[Ria]);\n        tw[Ria] += (tmpb + Rib) << 1;\n        insert(tw[Ria]);\n        ys[Ria] = root;\n        last = size[son[root][0]]-1;\n        write(last);putchar('\\n');\n    }\n}\n\nint main(){\n    int_t T;scanf(\"%d\",&T);\n    while(T--)\n        work();\n}\n```",
        "postTime": 1557733579,
        "uid": 74020,
        "name": "Rainy_chen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "**\u642c\u8fd0\u5b98\u65b9\u9898\u89e3\u3002**\n\n------------\n\n\u7b80\u5355\u6765\u8bf4\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\u3002\u5728\u9898\u9762\u4e2d\u8bf4\u7f5a\u65f6\u4e0d\u8d85\u8fc7$1500000$\u5176\u5b9e\u5df2\u7ecf\u7ed9\u4e86\u63d0\u793a\u8fd9\u4e2a\u9898\u53ef\u4ee5\u6309\u7167\u7f5a\u65f6\u6765\u5efa\u7acb\u7ebf\u6bb5\u6811\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2auser\u6765\u8bf4\uff0c\u6bd4\u4ed6\u6392\u540d\u9ad8\u7684\u4eba\u6765\u6e90\u4e8e\u4e24\u4e2a\u5730\u65b9\uff1a\u7b2c\u4e00\u662f\u9898\u76ee\u6570\u66f4\u591a\uff0c\u7b2c\u4e8c\u662f\u7f5a\u65f6\u66f4\u5c11\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9898\u76ee\u6570\u91cf\u5efa\u7acb\u6811\u72b6\u6570\u7ec4\uff0c\u53bb\u7ef4\u62a4ac\u9898\u76ee\u6570\u91cf\u7684\u524d\u7f00\u548c\u3002\u5bf9\u4e8e\u9898\u6570\u76f8\u540c\u7684\u540c\u5b66\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u7f5a\u65f6\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0 $1500000\\times$\u5e73\u5747ac\u6570\u91cf$\\times4$ \u662f\u4f1aMLE\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u65f6\u9700\u8981\u52a8\u6001\u5efa\u7acb\u7ebf\u6bb5\u6811\uff08\u7c7b\u4f3c\u4e8e\u4e3b\u5e2d\u6811\u7684\u65b9\u6cd5\uff09\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ea6 $log(1500000)+log(n/m)$ \u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $log(1500000)+(n/m)$ \u3002\n\n\u6ce8: $n/m$\u4ee3\u8868\u8fd1\u4f3c\u4e8eac\u9898\u76ee\u6570\u91cf\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6570\u7ec4\u4e5f\u53ef\u4ee5\u505a\u3002\n\n\u5e38\u6570\u6bd4\u8f83\u5c0f\u7684splay\u4e5f\u53ef\u4ee5\u8fc7\u8fd9\u9053\u9898\u7684\u7edd\u5927\u90e8\u5206\u6837\u4f8b\u70b9\u3002\n\n------------\n\nstd\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n\n#define mid (l + r >> 1)\n\nconst int MQ = 1000005;\nconst int MAX = 150000;\nconst int MLEN = 1500010;\n\ntypedef unsigned int ui;\n\nui randNum(ui& seed, ui last, const ui mod){\n\tseed = 17 * seed + last;\n\treturn seed % mod + 1;\n}\n\nstruct bi_tree{\n\tint m_arr[MAX];\n\tint lowbit(int num){\n\t\treturn num & (-num);\n\t}\n\n\tvoid init(){\n\t\tmemset(m_arr, 0, sizeof(m_arr));\n\t}\n\tvoid update(int p, int v){\n\t\twhile(p < MAX) {\n\t\t\tm_arr[p] += v;\n\t\t\tp += lowbit(p);\n\t\t}\n\t}\n\tint get(int p){\n\t\tint res = 0;\n\t\twhile(p > 0){\n\t\t\tres += m_arr[p];\n\t\t\tp -= lowbit(p);\n\t\t}\n\t\treturn res;\n\t}\n};\n\nstruct sgm_tree{\n\tstruct node{\n\t\tint lc, rc;\n\t\tint num;\n\t};\n\tnode sgm[MQ * 40];\n\tint head[MAX];\n\tint top;\n\tvoid init(){\n\t\tmemset(head, 0, sizeof(head));\n\t\ttop = 1;\n\t}\n\tvoid update(int& nd, int l, int r, int p, int num){\n\t\tif(nd == 0){\n\t\t\tnd = top++;\n\t\t\tsgm[nd].lc = sgm[nd].rc = sgm[nd].num = 0;\n\t\t}\n\t\tif(p == l && p == r){\n\t\t\tsgm[nd].num += num;\n\t\t\treturn;\n\t\t}\n\t\tif(p <= mid){\n\t\t\tupdate(sgm[nd].lc, l, mid, p, num);\n\t\t}\n\t\telse{\n\t\t\tupdate(sgm[nd].rc, mid + 1, r, p, num);\n\t\t}\n\t\tsgm[nd].num = sgm[sgm[nd].lc].num + sgm[sgm[nd].rc].num;\n\t}\n\tint get(int& nd, int l, int r, int L, int R){\n\t\tif(nd == 0) return 0;\n\t\tif(l == L && r == R){\n\t\t\treturn sgm[nd].num;\n\t\t}\n\t\tif(R <= mid){\n\t\t\treturn get(sgm[nd].lc, l, mid, L, R);\n\t\t}\n\t\telse if(L > mid){\n\t\t\treturn get(sgm[nd].rc, mid + 1, r, L, R);\n\t\t}\n\t\telse{\n\t\t\treturn get(sgm[nd].lc, l, mid, L, mid) + get(sgm[nd].rc, mid + 1, r, mid + 1, R);\n\t\t}\n\t}\n\n};\n\nint p_num[MAX];\nint p_tim[MAX];\nbi_tree bt;\nsgm_tree st;\n\nint main()\n{\n\n\tfreopen(\"roll.in\", \"r\", stdin);\n\tfreopen(\"roll.out\", \"w\", stdout);\n\tui seed, last;\n\tint m, n, casen, i, p, v, res;\n\tscanf(\"%d\", &casen);\n\tlast = 7;\n\twhile(casen--){\n\t\tscanf(\"%d%d%d\", &m, &n, &seed);\n\t\tmemset(p_tim, 0, sizeof(p_tim));\n\t\tmemset(p_num, 0, sizeof(p_num));\n\t\tbt.init();\n\t\tst.init();\n\n\t\tfor(i = 1; i <= m; i++){\n\t\t\tp_num[i] = 1;\n\t\t\tp_tim[i] = 1;\n\t\t}\n\t\tbt.update(1, m);\n\t\tst.update(st.head[1], 1, MLEN, 1, m);\n\t\tfor(i = 0; i < n; i++){\n\t\t\tp = randNum(seed, last, m);\n\t\t\tv = randNum(seed, last, m);\n\t\t\tbt.update(p_num[p], -1);\n\t\t\tst.update(st.head[p_num[p]], 1, MLEN, p_tim[p], -1);\n\n\t\t\tp_num[p]++;\n\t\t\tp_tim[p] += v;\n\n\t\t\tbt.update(p_num[p], 1);\n\t\t\tst.update(st.head[p_num[p]], 1, MLEN, p_tim[p], 1);\n\n\t\t\tres = m - bt.get(p_num[p]);\n\t\t\tres += st.get(st.head[p_num[p]], 1, MLEN, 1, p_tim[p] - 1);\n\t\t\tlast = res;\n\t\t\tprintf(\"%d\\n\", res);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1557584666,
        "uid": 56614,
        "name": "ThomasX",
        "ccfLevel": 4,
        "title": "P5338 \u9898\u89e3"
    },
    {
        "content": "## [My blog](https://www.cnblogs.com/liubainian/)\n\n---\n\n## \u95ee\u9898\u63cf\u8ff0\n\n[LG5338](https://www.luogu.org/problem/P5338)\n\n[LOJ3105](https://loj.ac/problem/3105)\n\n[BZOJ5509](https://www.lydsy.com/JudgeOnline/problem.php?id=5509)\n\n---\n\n## \u9898\u89e3\n\n\u5efa\u7acb\u4e00\u68f5$\\mathrm{Treap}$\uff0c\u628a\u539f\u6765\u7684$val$\u6362\u6210\u4e24\u4e2a\u503c$ac,tim$\n\n\u539f\u6765\u7684\u6bd4\u8f83$val_a<val_b$\u6539\u6210\uff08\u8bbe\u4e24\u4e2a\u7ed3\u70b9\u5206\u522b\u4e3a$node_a,node_b$\uff09\uff1a\n\n1.\u82e5$ac_a>ac_b$\uff0c\u5219$node_a<node_b$\n\n2.\u82e5$1$\u4e0d\u6210\u7acb\uff0c\u82e5$ac_a=ac_b,tim_a<tim_b$\uff0c\u5219$node_a<node_b$\n\n3.\u82e5$1,2$\u5747\u4e0d\u6210\u7acb\uff0c\u5219$node_a>node_b$\n\n~~10s\u65f6\u9650\u7b80\u76f4\u8981\u5361\u7206\u8bc4\u6d4b\u673a~~\n\n---\n\n## $\\mathrm{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntemplate<typename Tp>\nvoid read(Tp &x){\n    x=0;char ch=1;int fh;\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') fh=-1,ch=getchar();\n    else fh=1;\n    while(ch>='0'&&ch<='9'){\n        x=(x<<1)+(x<<3)+ch-'0';\n        ch=getchar();\n    }\n    x*=fh;\n}\n\nconst int INF=0x3f3f3f3f;\nconst int maxm=1000000+7;\n\nint n,T,root;\n\nunsigned seed,las=7,m;\n\ntypedef unsigned int ui;\n    ui randNum(ui& seed, ui last, ui m) {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\n\nint dat[maxm],size[maxm],cnt[maxm],ac[maxm],tim[maxm];\nint ch[maxm][2],tot;\n\nint nowac[maxm*10],nowtim[maxm*10];\n\nvoid pushup(int x){\n    size[x]=size[ch[x][0]]+size[ch[x][1]]+cnt[x];\n}\n\nint New(int a,int b){\n    dat[++tot]=rand(),size[tot]=cnt[tot]=1,ac[tot]=a,tim[tot]=b;\n    return tot;\n}\n\nvoid build(){\n    tot=0;\n    root=New(INF,-INF);ch[root][1]=New(-INF,INF);\n    pushup(root);\n}\n\nvoid rotate(int &id,int dir){\n    int tmp=ch[id][dir xor 1];\n    ch[id][dir xor 1]=ch[tmp][dir];\n    ch[tmp][dir]=id;id=tmp;\n    pushup(ch[id][dir]);pushup(id);\n}\n\nvoid insert(int &id,int a,int b){\n    if(!id){\n        id=New(a,b);return;\n    }\n    if(a==ac[id]&&b==tim[id]) cnt[id]++;\n    else{\n        int d;\n        if(a>ac[id]) d=0;\n        else if(a==ac[id]){\n            if(b<tim[id]) d=0;\n            else d=1;\n        }\n        else d=1;\n        insert(ch[id][d],a,b);\n        if(dat[id]<dat[ch[id][d]]) rotate(id,d xor 1);\n    }\n    pushup(id);\n}\n\nvoid remove(int &id,int a,int b){\n    if(!id) return;\n    if(ac[id]==a&&tim[id]==b){\n        if(cnt[id]>1){\n            cnt[id]--;pushup(id);return;\n        }\n        if(ch[id][0]||ch[id][1]){\n            if(!ch[id][1]||dat[ch[id][0]]>dat[ch[id][1]]){\n                rotate(id,1);remove(ch[id][1],a,b);\n            }\n            else{\n                rotate(id,0);remove(ch[id][0],a,b);\n            }\n            pushup(id);\n        }\n        else id=0;\n        return;\n    }\n    if(a>ac[id]){\n        remove(ch[id][0],a,b);\n    }\n    else if(a==ac[id]){\n        if(b<tim[id]) remove(ch[id][0],a,b);\n        else remove(ch[id][1],a,b);\n    }\n    else remove(ch[id][1],a,b);\n    pushup(id);\n}\n\nint get_rank(int id,int a,int b){\n    if(!id) return 0;\n    if(a==ac[id]&&b==tim[id]) return size[ch[id][0]]+1;\n    if(a>ac[id]) return get_rank(ch[id][0],a,b);\n    else if(a==ac[id]&&b<tim[id]) return get_rank(ch[id][0],a,b);\n    return size[ch[id][0]]+cnt[id]+get_rank(ch[id][1],a,b);\n}\n\nint TTTT;\n\nint main(){\n    srand(28910);read(TTTT);\n    while(TTTT--){\n        build();memset(ch,0,sizeof(ch));\n        memset(nowac,0,sizeof(nowac));memset(nowtim,0,sizeof(nowtim));\n        read(m);read(n);read(seed);\n        for(int i=1;i<=n;i++){\n            int x,y;\n            x=randNum(seed,las,m),y=randNum(seed,las,m);\n            remove(root,nowac[x],nowtim[x]);\n            nowac[x]++,nowtim[x]+=y;\n//            insert(root,nowac[x],nowtim[y]);\n            insert(root,nowac[x],nowtim[x]);//\u9519\u8bef\u7b14\u8bb0\uff1a\u5f04\u9519x,y \n//            las=get_rank(root,nowac[x],nowtim[y])-2;\n            las=get_rank(root,nowac[x],nowtim[x])-2;//\u9519\u8bef\u7b14\u8bb0\uff1a\u5f04\u9519x,y \n            printf(\"%d\\n\",las);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1568994626,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u677f\u5b50\u9898  \n\u4e0d\u7528\u62c5\u5fc3 \u66b4\u529b\u5220\u70b9 \u52a0\u70b9 \u5f00$O2$\u80fd\u8fc7  \n\u53cd\u6b63\u7701\u9009\u80fd\u5f00 ~~\u4e3a\u4ec0\u4e48$NOIP$\u6ca1\u6709~~\n### First\n\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u4fdd\u5b58\u8282\u70b9\n```cpp\nstruct kkk {\n    int ac,rib;\n    bool operator == (const kkk& res) const {\n        return ac==res.ac&&rib==res.rib;\n    }\n    bool operator < (const kkk& res) const {\n        return ac>res.ac||(ac==res.ac&&rib<res.rib);\n    }\n    bool operator <= (const kkk& res) const {\n        return *this<res||*this==res; \n    }\n};\n```\n~~\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e2a\u540d\u5b57~~\n\n### Second\n\u5e73\u8861\u6811\u677f\u5b50  \n```cpp\n\u7565\n```\n\u89c1\u4ee5\u4e0b\u4ee3\u7801\n## Third \u52a0\u70b9 \u5220\u70b9\n\u7528$AC[a]$\u8868\u793a$a$\u7684\u9898\u6570,$RIB[b]$\u8868\u793a\u7f5a\u65f6  \n\u5f53$a$ $AC$\u4e86\u4e00\u9898,\u7f5a\u65f6\u4e3a$b$\u65f6  \n\u90a3\u6211\u4eec\u5220\u70b9{$AC[a]$,$RIB[a]$}  \n\u7136\u540e\u52a0\u70b9{$++AC[a]$,$RIB[a]+=b$} \u5e76\u6c42\u6392\u540d\u5c31\u53ef\u4ee5\u4e86   \n\n\u5b8c\u6574$CODE$\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<ctime>\n#include<cstdlib>\n#include<cstring>\n\nstruct kkk {\n    int ac,rib;\n    bool operator == (const kkk& res) const {\n        return ac==res.ac&&rib==res.rib;\n    }\n    bool operator < (const kkk& res) const {\n        return ac>res.ac||(ac==res.ac&&rib<res.rib);\n    }\n    bool operator <= (const kkk& res) const {\n        return *this<res||*this==res; \n    }\n};\n\nnamespace zl_just {\n    template<typename T>\n    class Treap {\n        public:\n        static const int maxn = 1000000 + 5;\n        struct Node {\n            T v;\n            int c,s,r;\n            Node *ch[2];\n            inline int cmp(T x) {\n                if(x==v) return -1;\n                return v<x;\n            }\n            inline int ch_size(int d) { return ch[d]==NULL?0:ch[d]->s; }\n            inline void maintain() { s=c+ch_size(0)+ch_size(1); }\n        }node[maxn];\n        Node* root;\n        int size;\n        Treap() { root=NULL; size=0; }\n        inline void clear() { root=NULL; size=0; }\n        \n        inline void rotate(Node* &o,int d) {\n            Node *k=o->ch[d^1]; o->ch[d^1]=k->ch[d]; k->ch[d]=o; \n            o->maintain(); k->maintain(); o=k;\n        }\n        \n        void insert(Node* &o,T x) {\n            if(o==NULL) {\n                o=&node[size++]; o->r=rand();\n                o->v=x; o->s=o->c=1;\n                o->ch[0]=o->ch[1]=NULL;\n            }\n            else {\n                int d=o->cmp(x);\n                if(d==-1) { o->c++; o->s++; return ; }\n                insert(o->ch[d],x); o->maintain();\n                if(o->ch[d]->r > o->r) rotate(o,d^1);\n            }\n        }\n        \n        void remove(Node* &o,T x) {\n            if(o==NULL) return ;\n            int d=o->cmp(x);\n            if(d==-1) {\n                if(o->c > 1) { o->c--; o->s--; return ; }\n                else if(o->ch[0]==NULL) o=o->ch[1];\n                else if(o->ch[1]==NULL) o=o->ch[0];\n                else {\n                    int d2 = (o->ch[0]->r > o->ch[1]->r);\n                    rotate(o,d2); remove(o->ch[d2],x);\n                }\n            }\n            else remove(o->ch[d],x);\n            if(o!=NULL) o->maintain();\n        }\n        \n        int rank(Node *o,T x) {\n            int rk=0;\n            while(o!=NULL) {\n                int d=o->cmp(x);\n                if(d==-1) return rk+o->ch_size(0);\n                if(d) rk+=o->ch_size(0)+o->c;\n                o=o->ch[d];\n            }  \n            return rk;\n        }\n    };\n}\n//\u6a21\u677f\n\nusing namespace zl_just;\nint AC[1000005],RIB[1000005];\nTreap<kkk>treap;\n\ntypedef unsigned int ui;\n    ui randNum(ui& seed, ui last, const ui m) {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\n\nint main() {\n    srand(time(NULL));\n    int T,last=7;\n    //\u6ce8\u610f\u4e86,\u662f\u5f00\u59cb\u4e3a7,\u4e0d\u662f\u6bcf\u7ec4\u6570\u636e\u90fd\u91cd\u7f6e\u4e3a7\n    scanf(\"%d\",&T);\n    while(T--) {\n        ui n,m,seed;\n        treap.clear();\n        memset(AC,0,sizeof AC);\n        memset(RIB,0,sizeof RIB);\n        //\u6570\u7ec4\u4e00\u5b9a\u8981\u6e05\u5e72\u51c0!!!\n        scanf(\"%d%d%d\",&m,&n,&seed);\n        for(register ui i=0;i<n;i++) {\n            ui a=randNum(seed,last,m),b=randNum(seed,last,m);\n            treap.remove(treap.root,(kkk){AC[a],RIB[a]});\n            AC[a]++; RIB[a]+=b;\n            treap.insert(treap.root,(kkk){AC[a],RIB[a]});\n            //\u5176\u5b9e\u53ef\u4ee5\u4fbf\u63d2\u4fbf\u67e5\u6392\u540d\n            last=treap.rank(treap.root,(kkk){AC[a],RIB[a]});\n            printf(\"%d\\n\",last);\n        }\n    }\t\n    return 0;\n}\n```\n",
        "postTime": 1557726668,
        "uid": 125925,
        "name": "zl_just",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u88f8\u9898\u3002\n\n\u5bb3\u6015\u7528`pair`\u8fc7\u4e0d\u53bb\uff0c\u5f00\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55$AC$\u6b21\u6570\u548c\u7f5a\u65f6\uff0c\u91cd\u8f7d\u51e0\u4e2a\u8fd0\u7b97\u7b26\u3002\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u7684$AC$\u6b21\u6570\u548c\u7f5a\u65f6\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u5220\u9664\u65e7\u8282\u70b9\uff0c\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u518d\u8f93\u51fa\u7b2c$k$\u5927\u5c31\u597d\u5566\u3002\n\n`last`\u53ea\u9700\u8981\u5728\u7b2c\u4e00\u6b21\u8bbe\u7f6e\u4e3a7\uff0c\u4ee5\u540e\u90fd\u4e0d\u9700\u8981\u91cd\u7f6e\u3002\n\n\u653e\u4e00\u4e0b\u4ee3\u7801\u3002\u7528`splay`\u5b9e\u73b0\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i_, s_, t_) for (int i_ = (s_); i_ <= (t_); ++i_)\n\nconst int N = 2e6 + 5;\n\nstruct Sta {\n    int ac, ti;\n    Sta() {}\n    Sta(int x, int y) : ac(x), ti(y) {}\n    bool operator < (const Sta &rhs) const {\n        return ac == rhs.ac ? ti < rhs.ti : ac > rhs.ac;\n    }\n    bool operator == (const Sta &rhs) const {\n        return ac == rhs.ac && ti == rhs.ti;\n    }\n    bool operator != (const Sta &rhs) const {\n        return ac != rhs.ac || ti != rhs.ti;\n    }\n} g[N << 1];\n\nstruct Node *root;\nstruct Node {\n    Node *fa, *ch[2];\n    Sta v;\n    int cnt, siz;\n    Node() {}\n    Node(Node *f, Sta x) : fa(f), v(x), cnt(1), siz(1) {}\n    void upd() {\n        siz = cnt + (ch[0] ? ch[0]->siz : 0) + (ch[1] ? ch[1]->siz : 0);\n    }\n    int rel() {\n        return fa ? fa->ch[1] == this : 0;\n    }\n    void link(Node *o, Node *f, int r) {\n        if (o) o->fa = f;\n        if (f) f->ch[r] = o;\n    }\n    void rot() {\n       Node *f = fa;\n       int r = rel();\n       link(this, f->fa, f->rel());\n       link(ch[r ^ 1], f, r);\n       link(f, this, r ^ 1);\n       f->upd(), upd();\n       if (!fa) root = this;\n    }\n    void splay(Node *tar = NULL) {\n        while (fa != tar) {\n            if (fa->fa == tar) rot();\n            else if (rel() == fa->rel())\n                fa->rot(), rot();\n            else rot(), rot();\n        }\n    }\n    int rnk() {\n        return ch[0] ? ch[0]->siz : 0;\n    }\n    Node *pre() {\n        Node *o = ch[0];\n        while (o->ch[1])\n            o = o->ch[1];\n        return o;\n    }\n    Node *suc() {\n        Node *o = ch[1];\n        while (o->ch[0])\n            o = o->ch[0];\n        return o;\n    }\n} tpool[N], *tcur = tpool;\n\nNode *find(Sta x) {\n    Node *o = root;\n    while (o && o->v != x)\n        o = o->ch[o->v < x];\n    if (o) o->splay(); // ***\n    return o;\n}\n\nNode *ins(Node *&o, Node *f, Sta x) {\n    if (!o)\n        return o = new (tcur++) Node(f, x);\n    if (o->v == x)\n        return ++o->cnt, o;\n    return ins(o->ch[o->v < x], o, x);\n}\n\nNode *ins(Sta x) {\n    Node *o = ins(root, NULL, x);\n    o->splay();\n    return o;\n}\n\nvoid del(Node *o) {\n    Node *p = o->pre(), *s = o->suc();\n    p->splay(), s->splay(p); // ***\n    if (o->cnt > 1)\n        --o->cnt, --o->siz;\n    else s->ch[0] = NULL;\n    s->upd(), p->upd();\n}\n\nvoid del(Sta x) {\n    Node *o = find(x);\n    if (o) del(o);\n}\n\nint rnk(Sta x) {\n    Node *o = find(x);\n    if (o) return o->rnk();\n    o = ins(x);\n    int ans = o->rnk();\n    del(o);\n    return ans;\n}\n\nvoid init() {\n    memset(tpool, 0, sizeof tpool);\n    tcur = tpool;\n    root = NULL;\n    ins(Sta(INT_MAX, INT_MIN));\n    ins(Sta(INT_MIN, INT_MAX));\n}\n\ntemplate<typename T>\nvoid read(T &x) {\n    char ch;\n    while (!isdigit(ch = getchar()));\n    for (x = ch - '0'; isdigit(ch = getchar()); x = x * 10 + ch - '0');\n}\n\nunsigned int seed, last = 7, n, m, Ra, Rb;\n\nunsigned int randNum() {\n    seed = seed * 17 + last;\n    return seed % m + 1;\n}\n\nvoid work() {\n    init();\n    read(m), read(n), read(seed);\n    while (n--) {\n        Ra = randNum(), Rb = randNum();\n        del(g[Ra]);\n        ++g[Ra].ac, g[Ra].ti += Rb;\n        ins(g[Ra]);\n        printf(\"%d\\n\", last = rnk(g[Ra]) - 1);\n    }\n    memset(g, 0, sizeof g);\n}\n\nint main() {\n    //freopen(\"roll.in\", \"r\", stdin);\n    //freopen(\"roll.out\", \"w\", stdout);\n    int T;\n    read(T);\n    while (T--)\n        work();\n}\n```",
        "postTime": 1557635286,
        "uid": 55295,
        "name": "Vozeo",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "### Part0.\u9898\u5916\u8bdd\n\n\u7701\u9009\u4e5f\u6562\u51fa\u5e73\u8861\u6811\u677f\u5b50\u9898\u4e86\uff1f\n\n\u6211\u8fd8\u4e00\u904d\u8fc7\u4e86OrzOrz\n\n### Part1.\u601d\u8def\n\n\u4e8b\u5b9e\u4e0a\u4f1a\u6709\u5e73\u8861\u6811\u88ab\u5361\u6b7b\uff0c\u4f60\u5e94\u8be5\u7528\u4ec0\u4e48\u5e73\u8861\u6811\uff1f\n\n\u9996\u5148\u6211\u6700\u4e0d\u559c\u6b22\u7684\u5e73\u8861\u6811\u5c31\u662ffhq-Treap\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7684\u5e38\u6570\u975e\u5e38\u5927\u3002\n\n\u4e3a\u4e86\u60a8\u7684\u524d\u9014\uff0c\u8bf7\u4e0d\u8981\u5728\u8003\u573a\u4e0a\u5199fhq-Treap\uff0c\u4e0d\u8981\u8ba4\u4e3a\u5b83\u5e38\u6570\u5c0f\uff0c\u5373\u4f7f\u662f\u5e8f\u5217\u7ef4\u62a4\u9898\uff0c\u5982\u679c\u4f60\u65f6\u95f4\u591f\uff0c\u8bf7\u9009\u62e9splay\u3002\n\n\u90a3splay\u5462\uff1f\u4e0d\u9519\u7684\u5e73\u8861\u6811\uff0c\u4f46\u662f\u6709\u70b9\u9ebb\u70e6\u3002\n\n\u666e\u901aTreap\u5c31\u884c\u4e86\u3002\n\n\u53ea\u8981\u5199\u4ee3\u7801\u7684\u65f6\u5019\u6ce8\u610f\u81ea\u5df1\u7684\u5e38\u6570\u3002\n\n\u4f8b\u5982\u4e0d\u8981\u6bcf\u4e00\u6b21\u90fdmemset\uff0c\u8981\u60f3\u597d\u81ea\u5df1\u4e00\u5b9a\u8981memset\u54ea\u4e9b\n\n\u5982\u679c\u5bf9\u81ea\u5df1\u7684\u5e38\u6570\u6ca1\u6709\u628a\u63e1\u5c31\u4e0d\u8981\u7528stl\uff08\u53cd\u6b63\u6211\u7528\u4e86\uff09\n\n\u8fd8\u60f3\u8bf4\u7684\u4e00\u70b9\u5c31\u662f\u8fd9\u4e2a\u968f\u673a\u600e\u4e48\u968f\u673a\uff0c\u6211\u63a8\u8350\u4f60\u4eec\u7528mt19937\uff0c\u4e0d\u8fc7\u662fc++11\u7684\uff0c\u5b83\u4ea7\u51fa\u7684\u968f\u673a\u6570\u6bd4rand\u9760\u8c31\n\n### Part2.Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i , a , b) for(int i = (a) ; i <= (b) ; ++i)\n#define irep(i , a , b) for(int i = (b) ; i >= (a) ; --i)\n#define IO ios::sync_with_stdio(false)\n#define ms(A) memset(A , 0 , sizeof A)\n#define msinf(A) memset(A , 0x3f , sizeof A)\ntypedef long long ll;\ntypedef pair <int , int> pii;\n\nconst int inf = 0x3f3f3f3f;\nconst ll infLL = 0x3f3f3f3f3f3f3f3fLL;\n\nconst int N = 1000000 + 5;\n\nmt19937 rnd(time(0));\n\nint n , m , tmp;\n\ntypedef unsigned int ui;\nui sd , lst = 7;\nui randNum(ui& seed, ui last, const ui n) {seed = seed * 17 + last;return seed % n + 1;}\n\nint ac[N] , fs[N];\n\nint cnt , sz[N << 1] , rp[N << 1] , ch[N << 1][2];\npii val[N << 1];\n\n#define lc(o) ch[o][0]\n#define rc(o) ch[o][1]\nint rt;\nint cmp(int o , pii x) {return val[o] < x;}\nvoid up(int o) {sz[o] = sz[lc(o)] + sz[rc(o)] + 1;}\nvoid rotate(int& o , int d) {\n\tint k = ch[o][d];\n\tch[o][d] = ch[k][d ^ 1];\n\tch[k][d ^ 1] = o; up(o); up(k); o = k;\n}\n\nvoid insert(int& o , pii x) {\n\tif(!o) {\n\t\tval[o = ++cnt] = x; lc(o) = rc(o) = 0;\n\t\trp[o] = rnd(); sz[o] = 1;\n\t}\n\telse {\n\t\tint d = cmp(o , x);\n\t\tinsert(ch[o][d] , x); if(rp[ch[o][d]] < rp[o]) rotate(o , d);\n\t\tup(o);\n\t}\n}\nvoid erase(int& o , pii x) {\n\tif(val[o] == x) {\n\t\tif(lc(o) * rc(o)) {\n\t\t\tint d = rp[lc(o)] < rp[rc(o)];\n\t\t\trotate(o , d ^ 1);\n\t\t\terase(ch[o][d] , x);\n\t\t}\n\t\telse o = lc(o) + rc(o); \n\t}\n\telse erase(ch[o][cmp(o , x)] , x);\n\tif(o) up(o);\n}\nint rnk(int o , pii x) {\n\tif(!o) return 0;\n\tif(val[o] <= x) return rnk(rc(o) , x);\n\treturn sz[rc(o)] + 1 + rnk(lc(o) , x);\n}\n\nvoid solve() {\n\tms(fs); ms(ac); rt = 0; cnt = 0;\n\tscanf(\"%d %d %d\" , &n , &m , &tmp); sd = (ui)tmp;\n\trep(i , 1 , m) {\n\t\tint id = randNum(sd , lst , n);\n\t\tif(ac[id] != 0) erase(rt , pii(ac[id] , -fs[id]));\n\t\t++ac[id]; fs[id] += randNum(sd , lst , n);\n\t\tprintf(\"%d\\n\" , tmp = rnk(rt , pii(ac[id] , -fs[id])));\n\t\tinsert(rt , pii(ac[id] , -fs[id]));\n\t\tlst = (ui)tmp;\n\t}\n}\n\nint main() {\n\tint T;\n\tscanf(\"%d\" , &T);\n\twhile(T--) solve();\n\treturn 0;\n} \n```",
        "postTime": 1558073081,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u773c\u5c31\u770b\u51fa\u662f\u5e73\u8861\u6811\u88f8\u9898\u3002\n\n\u90a3\u4e48\u5c31\u76f4\u63a5\u7528 pbds \u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002(\u8fd9\u4e2a\u5e93\u53ef\u662f\u76f4\u63a5\u5c31\u53ef\u4ee5\u7528\u7684)\n\n\u4ee3\u7801:\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<cassert>\n#include<iostream>\n#include<climits>\n#include<vector>\n#include<bitset>\n#include<queue>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<(b);++i)\n#define pb push_back\n#define mp make_pair\n#define mx(a,b) (a>b?a:b)\n#define mn(a,b) (a<b?a:b)\ntypedef unsigned long long uint64;\ntypedef unsigned int uint32;\ntypedef long long ll;\nusing namespace std;\n\nnamespace IO\n{\n\tconst uint32 Buffsize=1<<15,Output=1<<24;\n\tstatic char Ch[Buffsize],*S=Ch,*T=Ch;\n\tinline char getc()\n\t{\n\t\treturn((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n\t}\n\tstatic char Out[Output],*nowps=Out;\n\t\n\tinline void flush(){fwrite(Out,1,nowps-Out,stdout);nowps=Out;}\n\n\ttemplate<typename T>inline void read(T&x)\n\t{\n\t\tx=0;static char ch;T f=1;\n\t\tfor(ch=getc();!isdigit(ch);ch=getc())if(ch=='-')f=-1;\n\t\tfor(;isdigit(ch);ch=getc())x=x*10+(ch^48);\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write(T x,char ch='\\n')\n\t{\n\t\tif(!x)*nowps++='0';\n\t\tif(x<0)*nowps++='-',x=-x;\n\t\tstatic uint32 sta[111],tp;\n\t\tfor(tp=0;x;x/=10)sta[++tp]=x%10;\n\t\tfor(;tp;*nowps++=sta[tp--]^48);\n\t\t*nowps++=ch;\n\t\tif(nowps-Out>=1<<23)flush();\n\t}\n\n\tinline void getstr(char*q)\n\t{\n\t\tregister char ch;\n\t\tfor(ch=getc();!isgraph(ch);ch=getc());\n\t\tfor(;isgraph(ch);ch=getc())*q++=ch;\n\t\t*q='\\0';\n\t}\n\n\tinline void getwd(char&x){for(x=getc();!isupper(x);x=getc());}\n}\nusing namespace IO;\n\nvoid file()\n{\n#ifndef ONLINE_JUDGE\n\tFILE*DSD=freopen(\"water.in\",\"r\",stdin);\n\tFILE*CSC=freopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\ninline void Chkmin(int&u,int v){u>v?u=v:0;}\n\ninline void Chkmax(int&u,int v){u<v?u=v:0;}\n\ninline void Chkmax(double&u,double v){u<v?u=v:0;}\n\ninline void Chkmax(ll&u,ll v){u<v?u=v:0;}\n\ninline void Chkmin(ll&u,ll v){u>v?u=v:0;}\n\nconst int MAXN=1e5+7;\n\nstatic int n,m;\n\nuint32 seed;\n\nuint32 randnm(uint32&seed,uint32 lst,const uint32 m)\n{\n\tseed=seed*17+lst;return seed%m+1;\n}\n\ninline void init(){read(m),read(n),read(seed);}\n\n#include<bits/extc++.h>\nusing namespace __gnu_pbds;\ntypedef pair<int,ll>Pr;\n\ntree<Pr,null_type,greater<Pr>,rb_tree_tag,tree_order_statistics_node_update>G;\n\nstatic int AC[MAXN];\n\nstatic ll tim[MAXN];\n\nstatic int last;\n\nconst int bl=1e7;\n\ninline void solve()\n{\n\tG.clear();\n\tRep(i,1,m)AC[i]=0,tim[i]=1.5e14+i,G.insert(mp(0,tim[i]));\n\tRep(i,1,n)\n\t{\n\t\tint ria=randnm(seed,last,m),rib=randnm(seed,last,m);\n\t\tG.erase(mp(AC[ria],tim[ria]));\n\t\t++AC[ria],tim[ria]-=(ll)rib*bl;\n\t\tG.insert(mp(AC[ria],tim[ria]));\n\t\twrite(last=G.order_of_key(mp(AC[ria],tim[ria]/bl*bl+bl-1000)));\n\t}\n}\n\nint main()\n{\n\tfile();\n\tstatic int _;\n\tread(_),last=7;\n\twhile(_--)init(),solve();\n\tflush();\n\treturn 0;\n}\n```",
        "postTime": 1556803667,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5338 \u3010[TJOI2019]\u7532\u82ef\u5148\u751f\u7684\u6eda\u699c\u3011"
    }
]