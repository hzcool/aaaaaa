[
    {
        "content": "# [yLOI2023] D \u8150\u8349\u4e3a\u8424\r\n\r\n> \u8fd9\u4e2a\u9898\u4e0a\u7ebf\u524d\u7ecf\u8fc7\u4e86\u5de8\u5927\u524a\u5f31\uff0c\u5bfc\u81f4\u7ed3\u8bba\u53d8\u5f97\u5f88\u4e00\u773c\uff0c\u53ef\u80fd\u5bf9\u601d\u7ef4\u91cf\u7684\u8981\u6c42\u53d8\u5f31\u4e86\u3002\r\n\r\n## Description\r\n\r\n\u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u5750\u6807\u4e3a $x_i$\uff0c\u6743\u91cd\u4e3a $a_i$\u3002\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u6bcf\u4e2a\u70b9\u4f1a\u5411\u4e0e\u5b83\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u4e2d\u6743\u91cd\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\u79fb\u52a8\uff0c\u901f\u5ea6\u4e3a\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u6bcf\u79d2\uff0c\u5982\u679c\u76f8\u90bb\u4e24\u4e2a\u70b9\u7684\u6743\u91cd\u90fd\u6bd4\u5b83\u81ea\u8eab\u6743\u91cd\u5c0f\uff0c\u5219\u4e0d\u79fb\u52a8\u3002\u4e24\u4e2a\u70b9\u76f8\u9047\u65f6\uff0c\u6743\u91cd\u8f83\u5c0f\u7684\u70b9\u6d88\u5931\u3002\r\n\r\n\u6c42\u51fa\u6bcf\u4e2a\u70b9\u6d88\u5931\u65f6\u7684\u5750\u6807\u3002\r\n\r\n$1 \\leq n \\leq 5 \\times 10^5$\uff0c$1 \\leq x_i \\leq 10^9$\uff0c$a$ \u662f\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217\u3002\r\n\r\n## Analysis\r\n\r\n### \u7b97\u6cd5\u4e00\r\n\r\n$n = 2$ \u65f6\u53ea\u8981\u6bd4\u8f83\u4e24\u4e2a\u70b9\u8c01\u6743\u91cd\u5927\u5373\u53ef\uff0c\u4e00\u5b9a\u662f\u6743\u91cd\u8f83\u5c0f\u7684\u8d70\u5230\u6743\u91cd\u8f83\u5927\u7684\u7136\u540e\u53bb\u4e16\u3002\u671f\u671b\u5f97\u5206 $5$ \u5206\u3002\r\n\r\n### \u7b97\u6cd5\u4e8c\r\n\r\n\u5f53 $n \\leq 100$\uff0c$x_i \\leq 200$ \u65f6\uff0c\u663e\u7136\u6bcf\u9694 $200$ \u79d2\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u70b9\u6d88\u5931\u3002\u4e8e\u662f\u9010\u79d2\u6a21\u62df\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n x_i)$\uff0c\u671f\u671b\u5f97\u5206 $30$ \u5206\u3002\r\n\r\n### \u7b97\u6cd5\u4e09\r\n\r\n\u627e\u5230\u79bb\u5f97\u6700\u8fd1\u7684\u4e00\u5bf9\u76f8\u90bb\u70b9 $(i,j)$\uff0c\u4f7f\u5f97\u4e00\u65b9\u9759\u6b62\uff0c\u53e6\u4e00\u65b9\u5728\u671d\u7740\u5bf9\u65b9\u79fb\u52a8\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5728 $(i,j)$ \u53d1\u751f\u78b0\u649e\u4e4b\u524d\uff0c\u5176\u4ed6\u70b9\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u628a\u65f6\u95f4\u8df3\u5230 $(i,j)$ \u78b0\u649e\u7684\u65f6\u523b\uff0c\u5bb9\u6613\u7b97\u51fa\u6b64\u65f6\u5176\u4ed6\u6240\u6709\u70b9\u7684\u5750\u6807\uff1a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5176\u4ed6\u70b9\u7684\u8fd0\u52a8\u65b9\u5411\u548c\u901f\u5ea6\u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u5047\u8bbe\u7ecf\u8fc7\u4e86 $T\\mathrm s$ \u53d1\u751f\u78b0\u649e\uff0c\u5219\u4e00\u4e2a $T \\mathrm s$ \u524d\u5411\u53f3\u8fd0\u52a8\u7684\u70b9 $i$ \u7684\u65b0\u5750\u6807\u5c31\u662f $x_i + T$\u3002\u5411\u5de6\u8fd0\u52a8\u540c\u7406\u3002\u66b4\u529b\u4fee\u6539\u4ecd\u5b58\u6d3b\u7684\u70b9\u7684\u5750\u6807\u3002\u6bcf\u6b21\u4fee\u6539 $O(n)$ \u4e2a\u70b9\uff0c\u4e00\u5171\u4fee\u6539 $O(n)$ \u6b21\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\u671f\u671b\u5f97\u5206 $60$ \u5206\u3002\r\n\r\n### \u7b97\u6cd5\u56db\r\n\r\n$a_i$ \u5355\u8c03\u9012\u589e\u7684\u60c5\u51b5\uff1a\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u6240\u6709\u7684\u70b9\u90fd\u5411\u53f3\u79fb\u52a8\u3002\u56e0\u4e3a\u70b9\u7684\u79fb\u52a8\u901f\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u4e24\u4e2a\u70b9\u7684\u95f4\u8ddd\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002\u5927\u5bb6\u6700\u540e\u90fd\u4f1a\u548c $n$ \u53f7\u70b9\u78b0\u649e\uff0c\u7136\u540e\u53bb\u4e16\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u671f\u671b\u5f97\u5206 $5$ \u5206\u3002\u7ed3\u5408\u7b97\u6cd5\u4e09\u53ef\u5f97 $65$ \u5206\u3002\r\n\r\n### \u7b97\u6cd5\u4e94\r\n\r\n$a_i$ \u5355\u5cf0\u7684\u60c5\u51b5\uff1a\u7c7b\u4f3c\u7684\uff0c\u6240\u6709\u70b9\u90fd\u4f1a\u671d\u7740\u6743\u503c\u6700\u5927\u7684\u70b9\u79fb\u52a8\uff0c\u4e14\u540c\u5411\u7684\u4e24\u4e2a\u70b9\u95f4\u8ddd\u4e0d\u53d8\u3002\u6700\u540e\u5927\u5bb6\u90fd\u548c\u6743\u91cd\u6700\u5927\u7684\u70b9\u78b0\u649e\uff0c\u53bb\u4e16\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u671f\u671b\u5f97\u5206 $5$ \u5206\u3002\u7ed3\u5408\u7b97\u6cd5\u4e09\u3001\u56db\u53ef\u5f97 $70$ \u5206\u3002\r\n\r\n### \u7b97\u6cd5\u516d\r\n\r\n\u7ed3\u5408\u7b97\u6cd5\u4e09\u3001\u56db\u3001\u4e94\uff0c\u6211\u4eec\u5c1d\u8bd5\u5206\u6790\u8fd0\u52a8\u7684\u5f62\u5f0f\uff0c\u5f97\u51fa key conclusion\uff1a\r\n\r\n1. \u76f8\u90bb\u4e24\u4e2a\u540c\u5411\u8fd0\u52a8\u7684\u70b9\uff08\u5728\u4e00\u65b9\u65b9\u5411\u6539\u53d8\u524d\uff09\u7684\u95f4\u8ddd\u4e0d\u4f1a\u6539\u53d8\u3002\r\n2. \u53d1\u751f\u4e00\u6b21\u78b0\u649e\u540e\uff0c**\u81f3\u591a\u53ea\u6709\u4e24\u4e2a\u70b9\u7684\u8fd0\u52a8\u65b9\u5411\u4f1a\u6539\u53d8**\u3002\r\n3. \u53ea\u6709\u8fd0\u52a8\u65b9\u5411\u4e0d\u540c\u7684\u4e24\u4e2a\u70b9\uff08\u628a\u9759\u6b62\u4e5f\u770b\u505a\u4e00\u4e2a\u8fd0\u52a8\u65b9\u5411\uff09\u4f1a\u53d1\u751f\u78b0\u649e\u3002\r\n\r\n\u7b2c\u4e00\u6761\u663e\u7136\uff0c\u8003\u8651\u8bc1\u660e\u7b2c\u4e8c\u6761\uff1a\u5047\u8bbe $j,i,k$ \u662f\u4e09\u4e2a\u76f8\u90bb\u7684\u70b9\uff0c\u67d0\u4e00\u65f6\u523b $i$ \u78b0\u649e\u5230\u4e86 $j$\u3002\u6b64\u65f6\u4e0e $j$ \u76f8\u90bb\u548c\u4e0e $k$ \u76f8\u90bb\u7684\u70b9\u53d1\u751f\u4e86\u53d8\u5316\uff08\u4ece $k$ \u53d8\u6210 $i$ \u6216\u4ece $j$ \u53d8\u6210 $i$\uff09\uff0c\u56e0\u6b64\u53ef\u80fd\u5bfc\u81f4 $j$ \u548c $k$ \u7684\u8fd0\u52a8\u65b9\u5411\u6539\u53d8\u3002\u5bf9 $j$ \u5de6\u4fa7\u548c $k$ \u53f3\u4fa7\u7684\u70b9\u800c\u8a00\uff0c\u4e0e\u5b83\u4eec\u76f8\u90bb\u7684\u70b9\u6ca1\u6709\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u8fd0\u52a8\u65b9\u5411\u4e0d\u4f1a\u6539\u53d8\u3002\r\n\r\n\u7ed3\u5408\u7b2c\u4e09\u6761\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6240\u6709\u8fd0\u52a8\u65b9\u5411\u4e0d\u540c\u7684\u76f8\u90bb\u70b9\u5bf9\u3002\u90a3\u4e48\u4e00\u6b21\u78b0\u649e\u540e\uff0c\u53ea\u9700\u8981\u5bf9\u70b9\u5bf9\u505a\u51fa $O(1)$ \u4e2a\u4fee\u6539\u5c31\u80fd\u5f97\u5230\u65b0\u7684\u72b6\u6001\u3002\u6839\u636e\u7b97\u6cd5\u4e09\uff0c\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u6700\u5148\u53d1\u751f\u78b0\u649e\u7684\u4e00\u5b9a\u662f\u79bb\u5f97\u6700\u8fd1\u7684\u70b9\u5bf9\uff0c\u6211\u4eec\u6309\u65f6\u95f4\u987a\u5e8f\u7ef4\u62a4\u6bcf\u6b21\u78b0\u649e\u3002\r\n\r\n\u6bcf\u6b21\u78b0\u649e\u662f\u627e\u95f4\u8ddd\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\u5bf9\uff0c\u4e8e\u662f\u9700\u8981\u4e00\u4e2a\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u6700\u5c0f\u503c\u7684\u6570\u636e\u7ed3\u6784\u3002\u53ef\u4ee5\u4f7f\u7528 `std::set` \u6216\u8005 `std::priority_queue`\u3002\u4ee5\u4e0b\u7ea6\u5b9a\u4f7f\u7528 `std::set`\u3002\r\n\r\n\u6211\u4eec\u9700\u8981\u80fd\u627e\u51fa\u8fd9\u4e9b\u70b9\u5bf9\u91cc\u5f53\u524d\u95f4\u8ddd\u6700\u5c0f\u7684\uff0c\u8fd9\u4e2a\u70b9\u5bf9\u4f1a\u6700\u5148\u53d1\u751f\u78b0\u649e\u3002\u8fd9\u91cc\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u6bcf\u4e2a\u70b9\u5bf9\u7684\u95f4\u8ddd\u662f\u5728\u52a0\u5165 set \u7684\u65f6\u523b\u8ba1\u7b97\u7684\u3002\u5f53\u65f6\u95f4\u589e\u52a0\u65f6\uff0c\u4e0d\u53ef\u80fd\u66b4\u529b\u4fee\u6539 set \u91cc\u70b9\u5bf9\u7684\u8ddd\u79bb\u3002\u90a3\u4e48\u5982\u4f55\u627e\u51fa**\u5f53\u524d**\u95f4\u8ddd\u6700\u5c0f\u7684\u70b9\u5bf9\u5462\uff1f\r\n\r\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u65e0\u6cd5\u76f4\u63a5\u6bd4\u8f83\u70b9\u5bf9\u95f4\u8ddd\u7684\u539f\u56e0\u662f\u5b83\u4eec\u52a0\u5165 set \u65f6\u8ba1\u7b97\u95f4\u8ddd\u7684\u65f6\u95f4\u662f\u4e0d\u540c\u7684\u3002\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\uff0c\u5982\u679c\u7edf\u4e00\u7ef4\u62a4\u4e24\u4e2a\u70b9\u5bf9\u5728\u67d0\u4e00\u56fa\u5b9a\u65f6\u523b\u65f6\u7684**\u7b49\u6548\u95f4\u8ddd**\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7ef4\u62a4\u5b83\u4eec\u5728\u65f6\u523b $0$ \u7684\u7b49\u6548\u95f4\u8ddd\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u65f6\u523b $T$\uff0c\u95f4\u8ddd\u4e3a $d$ \u7684\u70b9\u5bf9\u7684\u7b49\u6548\u95f4\u8ddd\u4e3a $T + d$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b49\u6548\u95f4\u8ddd\u7684\u542b\u4e49\u662f\uff0c\u5047\u8bbe\u70b9\u5bf9\u7684\u4e24\u4e2a\u70b9\u662f\u4ee5\u6bcf\u79d2\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u4e0d\u505c\u9760\u8fd1\u65f6\uff0c\u4ed6\u4eec\u5728\u7b2c $0$ \u79d2\u65f6\u7684\u8ddd\u79bb\u3002\r\n\r\n\u5f53\u4e00\u6b21\u78b0\u649e\u53d1\u751f\u540e\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u4e00\u4e9b\u70b9\u7684\u8fd0\u52a8\u65b9\u5411\uff0c\u5bfc\u81f4\u4e00\u4e9b\u70b9\u5bf9\u6d88\u5931\uff0c\u4e00\u4e9b\u70b9\u5bf9\u589e\u52a0\u3002\u8fd9\u6837\u7684\u6539\u53d8\u91cf\u90fd\u662f $O(1)$ \u4e2a\u3002\u4f8b\u5982\uff0c\u5bf9\u56db\u4e2a\u76f8\u90bb\u7684\u70b9 $i,j,k,l$\uff08$k$ \u548c $l$ \u76f8\u8ddd\u8f83\u8fdc\uff09\uff0c\u5047\u8bbe\u5b83\u4eec\u7684\u6743\u91cd\u5206\u522b\u662f $4,1,2,3$\u3002\u5219\u521d\u59cb\u65f6 $k$ \u5411 $l$ \u79fb\u52a8\uff0c\u6b64\u65f6 $(i,j)$ \u662f\u4e00\u4e2a\u70b9\u5bf9\uff0c$(k,l)$ \u662f\u4e00\u4e2a\u70b9\u5bf9\u3002\u5f53 $(i,j)$ \u78b0\u649e\u540e\uff0c$k$ \u5de6\u4fa7\u7684\u6743\u91cd\u6bd4\u53f3\u4fa7\u5927\uff0c\u5219\u5b83\u4f1a\u56de\u5934\u5411\u5de6\u4fa7\u8d70\u3002$(k,l)$ \u8fd9\u4e2a\u70b9\u5bf9\u88ab\u5220\u9664\u4e86\uff0c$(i,k)$ \u8fd9\u4e2a\u70b9\u5bf9\u589e\u52a0\u4e86\u3002\r\n\r\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5728\u63d2\u5165 set \u65f6\uff0c\u8981\u6c42\u51fa\u4e24\u70b9\u5f53\u524d\u7684\u95f4\u8ddd\u3002\u8fd9\u8981\u6c42\u6211\u4eec\u80fd\u5feb\u901f\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u3002\u8003\u8651\u61d2\u66f4\u65b0\uff0c\u4ec5\u5f53\u4e00\u6b21\u78b0\u649e\u53d1\u751f\u540e\uff0c\u66f4\u65b0\u4e0e\u6d88\u5931\u7684\u70b9\u76f8\u90bb\u7684\u70b9\u7684\u5750\u6807\uff08\u56e0\u4e3a\u53ea\u6709\u8fd9\u4e24\u4e2a\u70b9\u53ef\u80fd\u51d1\u6210\u65b0\u70b9\u5bf9\uff09\u3002\u8bb0 $lastChange_i$ \u8868\u793a\u4e0a\u6b21\u66f4\u65b0 $i$ \u7684\u5750\u6807\u7684\u65f6\u523b\uff0c\u4e0a\u6b21\u66f4\u65b0\u540e $i$ \u7684\u5750\u6807\u662f $x_i$\uff0c\u5f53\u524d\u65f6\u523b\u4e3a $T$\uff0c\u5219 $i$ \u5f53\u524d\u7684\u5750\u6807\u5c31\u662f $x_i + (T - lastChange_i) \\times aspect_i$\u3002\u5176\u4e2d\uff0c\u5f53 $i$ \u5411\u5de6\u79fb\u52a8\u65f6\uff0c$aspect_i = -1$\uff0c$i$ \u5411\u53f3\u79fb\u52a8\u65f6\uff0c$aspect_i = 1$\uff0c\u9759\u6b62\u4e0d\u52a8\u65f6 $aspect_i = 0$\u3002\u8fd9\u662f\u56e0\u4e3a\u4e24\u6b21\u66f4\u65b0\u4e4b\u95f4 $i$ \u7684\u8fd0\u52a8\u65b9\u5411\u4e0d\u53ef\u80fd\u53d8\u5316\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff09\u3002\u8fd9\u5176\u5b9e\u4e5f\u662f\u80fd\u4f7f\u7528\u7b49\u6548\u95f4\u8ddd\u7ef4\u62a4\u6700\u5c0f\u95f4\u8ddd\u7684\u539f\u56e0\u3002\r\n\r\n\u6b64\u5916\uff0c\u4e3a\u4e86\u80fd\u6c42\u51fa\u5f53\u524d\u4e0e\u67d0\u4e2a\u70b9\u76f8\u90bb\u7684\u70b9\uff0c\u9700\u8981\u6309\u987a\u5e8f\u7ef4\u62a4\u5f53\u524d\u8fd8\u5b58\u6d3b\u7684\u70b9\uff0c\u652f\u6301\u67e5\u8be2\u4e0a\u4e00\u4e2a\u3001\u4e0b\u4e00\u4e2a\u3002\u8fd9\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\u5b8c\u6210\uff0cstd \u56fe\u7701\u4e8b\u4f7f\u7528\u4e86 `std::set`\u3002\r\n\r\n\u603b\u7684\u6765\u8bf4\uff0c\u4e00\u5171\u53d1\u751f\u4e86 $O(n)$ \u6b21\u78b0\u649e\uff0c\u6bcf\u6b21\u78b0\u649e\u5bf9 set \u6709 $O(1)$ \u6b21\u4fee\u6539\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $O(\\log n)$\u3002\u4e8e\u662f\u7b97\u6cd5\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\u671f\u671b\u5f97\u5206 $100$ \u5206\u3002\r\n\r\n\u9a8c\u9898\u4eba\u7ed9\u51fa\u7684\u4ee3\u7801\u4e2d\uff0c\u76f4\u63a5\u7ef4\u62a4\u4e86\u6bcf\u4e2a\u70b9\u5728\u65f6\u523b $0$ \u7684**\u7b49\u6548\u5750\u6807**\u3002\u539f\u7406\u4e0e\u7b49\u6548\u95f4\u8ddd\u76f8\u4f3c\uff0c\u4e5f\u5c31\u662f\u5047\u8bbe\u4e00\u4e2a\u70b9\u4e00\u76f4\u6309\u5f53\u524d\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u5219\u5b83\u5728\u65f6\u523b $0$ \u5e94\u6709\u7684\u5750\u6807\u3002\u76f8\u5f53\u4e8e\u628a\u4e0a\u6587\u505a\u6cd5\u91cc $lastChange$ \u56fa\u5b9a\u4e3a $0$\u3002\r\n\r\n\u56e0\u4e3a\u7bc7\u5e45\u539f\u56e0\uff0c\u672c\u6587\u7701\u53bb\u4e86\u4e00\u4e9b\u8bc1\u660e\u6bd4\u8f83\u7b80\u5355\uff08\u4f46\u53ef\u80fd\u5e76\u4e0d\u76f4\u89c2\uff09\u7684\u53ef\u884c\u6027\u3001\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u4ec5\u7ed9\u51fa\u4e86\u505a\u6cd5\u3002\u8fd9\u4e9b\u88ab\u7701\u53bb\u7684\u53ef\u884c\u6027\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u5c1d\u8bd5\u4e3e\u53cd\u4f8b\uff08\u53d1\u73b0\u4e3e\u4e0d\u51fa\uff09\u6765\u611f\u6027\u7406\u89e3\uff0c\u8fdb\u800c\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff0c\u5728\u6b64\u7565\u53bb\u3002\r\n\r\n## Code\r\n\r\n\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\u662f\uff0c\u6ce8\u610f\u5230\u540c\u4e00\u79d2\u53ef\u80fd\u4f1a\u6709\u591a\u53ea\u8424\u706b\u866b\u53bb\u4e16\uff0c\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u8424\u706b\u866b\u7684\u65b9\u5411\u88ab\u53cd\u590d\u66f4\u65b0\u3002\u5982\u679c\u66f4\u65b0\u987a\u5e8f\u4e0d\u6b63\u786e\u5c31\u4f1a\u51fa\u95ee\u9898\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5728 set \u91cc\u4ee5\u4e0d\u52a8\uff08\u663e\u7136\u78b0\u649e\u90fd\u662f\u4e00\u53ea\u52a8\u7684\u649e\u4e00\u53ea\u4e0d\u52a8\u7684\uff09\u7684\u90a3\u53ea\u8424\u706b\u866b\u4eae\u5ea6\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\r\n\r\n\u5982\u679c\u6ca1\u6709\u60f3\u5230\u8fd9\u4e2a\u6280\u5de7\uff0c\u90a3\u4e48\u6709\u4e00\u4e2a\u5f88\u666e\u9002\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5148\u628a\u540c\u4e00\u79d2\u53d1\u751f\u7684\u78b0\u649e\u5168\u90fd\u62ff\u51fa\u6765\uff0c\u96c6\u4f53\u66f4\u65b0\u5b8c\u4ee5\u540e\u518d\u626b\u4e00\u904d\u53d7\u5f71\u54cd\u7684\u70b9\uff0c\u6c42\u51fa\u8fd9\u4e00\u79d2\u7684\u672b\u72b6\u6001\uff0c\u6700\u540e\u585e\u5165 set\u3002std \u4f7f\u7528\u7684\u662f\u7b2c\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002\r\n\r\n```cpp\r\n#include <set>\r\n#include <tuple>\r\n#include <iostream>\r\n#include <algorithm>\r\n\r\nconst int maxn = 500005;\r\nconst int INF = 2000000001;\r\n\r\nint n, bcnt, T;\r\nint x[maxn], a[maxn], dis[maxn], aspect[maxn], ans[maxn], lastChange[maxn];\r\n\r\nstd::set<std::tuple<int, int, int>> s;\r\nstd::set<int> alive;\r\n\r\ninline int getAspect(int pre, int x, int post) {\r\n  if (a[pre] > a[post]) {\r\n    if (a[pre] > a[x]) return -1;\r\n  } else {\r\n    if (a[post] > a[x]) return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\ninline int getp(int i) { return x[i] + (T - lastChange[i]) * aspect[i];}\r\n\r\nint main() {\r\n  std::ios::sync_with_stdio(false);\r\n  std::cin.tie(nullptr);\r\n  std::cin >> n;\r\n  auto read = []() { int x; std::cin >> x; return x; };\r\n  std::generate(x + 1, x + 1 + n, read);\r\n  std::generate(a + 1, a + 1 + n, read);\r\n  for (int i = 1; i <= n; ++i) aspect[i] = getAspect(i - 1, i, i + 1);\r\n  x[0] = -INF, x[n + 1] = INF;\r\n  alive.insert(0); alive.insert(n + 1);\r\n  for (int i = 1; i <= n; ++i) if (aspect[i] == -1) dis[i] = dis[i - 1] - x[i - 1] + x[i];\r\n  for (int i = n; i; --i) if (aspect[i] == 1) dis[i] = dis[i + 1]- x[i] + x[i + 1];\r\n  for (int i = 1; i <= n; ++i) if (aspect[i] != 0) {\r\n    if (aspect[i + aspect[i]] != aspect[i]) s.insert(std::make_tuple(dis[i], a[i + aspect[i]], i));\r\n  }\r\n  for (int Cnt = 1; Cnt < n; ++Cnt) {\r\n    auto begin = s.begin();\r\n    int i = std::get<2>(*begin);\r\n    T = lastChange[i] + dis[i];\r\n    s.erase(s.begin());\r\n    int j = (aspect[i] == 1) ? *(++alive.find(i)) : *(--alive.find(i));\r\n    ans[i] = x[j];\r\n    int k = (aspect[i] == -1) ? *(++alive.find(i)) : *(--alive.find(i));\r\n    alive.erase(i);\r\n    if (aspect[i] == aspect[k]) {\r\n      x[k] = getp(k);\r\n      lastChange[k] = T;\r\n      s.insert(std::make_tuple((dis[k] = abs(x[k] - x[j])) + T, a[j], k));\r\n    } else {\r\n      if (k == 0 || k == n + 1) continue;\r\n      int as = getAspect(*(--alive.find(k)), k, *(++alive.find(k)));\r\n      if (as != aspect[k]) {\r\n        if (aspect[k] == 0) {\r\n          int h = (as == -1) ? *(++alive.find(k)) : *(--alive.find(k));\r\n          if (s.find(std::make_tuple(dis[h] + lastChange[h], a[k], h)) != s.end()) {\r\n            s.erase(std::make_tuple(dis[h] + lastChange[h], a[k], h));\r\n          }\r\n        }\r\n        x[k] = getp(k);\r\n        int prenode = (aspect[k] == 1) ? *(++alive.find(k)) : *(--alive.find(k));\r\n        if (s.find(std::make_tuple(dis[k] + lastChange[k], a[prenode], k)) != s.end()) {\r\n          s.erase(std::make_tuple(dis[k] + lastChange[k], a[prenode], k));\r\n        }\r\n        aspect[k] = as;\r\n        s.insert(std::make_tuple(T + (dis[k] = abs(x[k] - x[j])), a[j], k));\r\n        lastChange[k] = T;\r\n      }\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; ++i) std::cout << ans[i] << \" \\n\"[i == n];\r\n}\r\n```\r\n\r\n## Generator\r\n\r\n```cpp\r\nconst int maxn = 500005;\r\n\r\nint a[maxn], x[maxn];\r\n\r\nvoid makedata(int T) {\r\n  int n = 500000, lim = 500000000;\r\n  if (T <= 6) {\r\n    if (T == 1) n = 2;\r\n    else n = 100;\r\n    lim = 200;\r\n    for (int i = 1; i <= n; ++i) a[i] = i;\r\n    std::random_shuffle(a + 1, a + 1 + n, modx<int>);\r\n    for (int i = 1; i <= lim; ++i) x[i] = i;\r\n    std::random_shuffle(x + 1, x + 1 + lim, modx<int>);\r\n    std::sort(x + 1, x + 1 + n);\r\n  } else {\r\n    if (T <= 12) n = 1000;\r\n    int block = lim / 7, tn = n / 7, nn = 0;\r\n    for (int cnt = 1, i = 1; cnt <= 3; ++cnt) {\r\n      int delta = block / (tn + 1);\r\n      for (int j = 1, p = i; j <= tn; ++j) {\r\n        x[++nn] = p;\r\n        p += delta;\r\n      }\r\n      i += block;\r\n    }\r\n    int beg = tn * 3 + 1;\r\n    std::set<int> oc;\r\n    for (int i = nn; i <= n; ++i) {\r\n      int p;\r\n      do p = modx(lim - block * 3) + block * 3; while (oc.find(p) != oc.end());\r\n      oc.insert(p);\r\n      x[i] = p;\r\n    }\r\n    std::sort(x + nn, x + 1 + n);\r\n    if (T == 13) {\r\n      for (int i = 1; i <= n; ++i) a[i] = i;\r\n    } else if (T == 14) {\r\n      for (int i = 1; i <= n; ++i) a[i] = i;\r\n      std::random_shuffle(a + 1, a + 1 + n);\r\n      std::sort(a + 1, std::find(a + 1, a + 1 + n, n));\r\n      std::sort(std::find(a + 1, a + 1 + n, n), a + 1 + n, std::greater<int>());\r\n    } else if (T > 14 && T <= 17) {\r\n      for (int i = 1; i <= n; ++i) a[i] = i;\r\n      std::random_shuffle(a + 1, a + 1 + n);\r\n      for (int i = 2, c0 = 1, c1 = 1; i <= n; ++i) if (a[i] > a[i - 1]) {\r\n        c0++; c1 = 1;\r\n        if (c0 > 5) std::swap(a[i - 2], a[i - 3]);\r\n      } else {\r\n        c1++; c0 = 1; \r\n        if (c1 > 5) std::swap(a[i - 2], a[i - 3]);\r\n      }\r\n    } else {\r\n      for (int i = 1; i <= tn; ++i) a[i] = 2 * i;\r\n      for (int i = tn; i > 0; --i) a[i + tn] = 2 * i - 1;\r\n      for (int i = 2 * tn + 1; i <= n; ++i) a[i] = i;\r\n      std::random_shuffle(a + tn + tn + 1, a + 1 + n, modx<int>);\r\n    }\r\n  }\r\n  printf(\"%d\\n\", n);\r\n  for (int i = 1; i <= n; ++i) printf(\"%d%c\", x[i] * 2, i == n ? '\\n' : ' ');\r\n  for (int i = 1; i <= n; ++i) printf(\"%d%c\", a[i], i == n ? '\\n' : ' ');\r\n}\r\n```",
        "postTime": 1529311394,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "[yLOI2023] D \u8150\u8349\u4e3a\u8424"
    },
    {
        "content": "\u300c\u5988\u5988\uff0c\u6211\u5c06\u53d8\u6210\u4e00\u53ea\u8424\u706b\u866b\u3002\u300d\n\n\u5c31\u662f\u6a21\u62df + \u4f18\u5316\u3002\n\n\u53ef\u4ee5\u7b97\u51fa\u6bcf\u4e2a\u8424\u706b\u866b\u521d\u59cb\u79fb\u52a8\u7684\u65b9\u5411\uff0c\u8fd9\u6837\u5979\u7684\u4f4d\u7f6e\u53ef\u4ee5\u7528\u5173\u4e8e\u65f6\u95f4\u7684\u4e00\u6b21\u51fd\u6570\u8868\u793a\u3002\n\n\u540c\u6837\u4e5f\u53ef\u4ee5\u5904\u7406\u51fa\u82e5\u4e4b\u540e\u6ca1\u6709\u8424\u706b\u866b\u6d88\u5931\uff0c\u6bcf\u4e2a\u8424\u706b\u866b\u5c06\u8981\u88ab\u541e\u5e76\u7684\u65f6\u95f4\u3002\n\n\u6309\u65f6\u95f4\u5165\u5806\uff0c\u5806\u9876\u7684\u8424\u706b\u866b\u88ab\u541e\u5e76\u7684\u65f6\u95f4\u5c31\u662f\u6211\u4eec\u8ba1\u7b97\u7684\u65f6\u95f4\u3002\n\n\u4e3a\u4e86\u4f18\u5316\uff0c\u82e5\u4e00\u4e2a\u8424\u706b\u866b\u52a8\u7684\u65b9\u5411\u4e0a\u4e0b\u4e00\u4e2a\u8424\u706b\u866b\u548c\u5979\u65b9\u5411\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u5148\u4e0d\u5165\u5806\uff0c\u56e0\u4e3a\u4e0b\u4e2a\u8424\u706b\u866b\u5fc5\u7136\u6d88\u5931\u5f97\u6bd4\u5979\u65e9\u3002\n\n\u901a\u8fc7\u4e00\u6b21\u51fd\u6570\u8ba1\u7b97\u51fa\u88ab\u541e\u5e76\u7684\u5750\u6807\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6539\u52a8\u522b\u7684\u8424\u706b\u866b\u3002\n\n\u7528\u94fe\u8868\u7ef4\u62a4\u6d3b\u7740\u7684\u866b\uff0c\u8bbe\u5c40\u90e8\u4f9d\u6b21\u4e3a $LL,L,x,R,RR$\u3002\u5f53 $x$ \u6d88\u5931\u540e\uff0c$L,R$ \u7684\u4e00\u6b21\u51fd\u6570\u548c\u65f6\u95f4\u6709\u53ef\u80fd\u6539\uff0c$LL,RR$ \u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u6539\u3002\n\n\u7ec6\u8282\u8f83\u591a\uff0c\u6ce8\u610f\u4fee\u6539\u7684\u65f6\u5019\u6392\u9664\u65f6\u95f4\u76f8\u540c\u7684\u8424\u706b\u866b\uff0c\u56e0\u4e3a\u5979\u4eec\u662f\u540c\u4e00\u65f6\u95f4\u6d88\u5931\u7684\u3002\n\n\u4f18\u5148\u961f\u5217\u5e94\u8be5\u6bd4 set \u5feb\u3002\n\n```cpp\n// Problem: Luogu P9066 [yLOI2023] \u8150\u8349\u4e3a\u8424\n// Url: https://www.luogu.com.cn/problem/P9066\n// T/M Limit: 2000ms 512MB\n// Time: 2023-02-14 13:16:10\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,j,k) for(int i=(j),i##_=(k);i<=i##_;i++)\n#define per(i,j,k) for(int i=(j),i##_=(k);i>=i##_;i--)\n#define int long long\nconst int N=500010,inf=1e18;\nint n,pos[N],w[N],L[N],R[N],dir[N],ans[N],t[N],st[N];\nint a[N];\ninline int way(int x,int y,int z){ return (y>x && y>z)?0:(z>x?1:-1); }\ninline void get(int x){\n\tint y;\n\tif(!dir[x]) t[x]=inf;\n\telse if(dir[x]==1){\n\t\ty=R[x];\n\t\tif(!dir[y]){\n\t\t\tt[x]=pos[y]-pos[x];\n\t\t}else if(dir[y]==1){\n\t\t\tt[x]=inf;\n\t\t}else assert(0);\n\t}else{\n\t\ty=L[x];\n\t\tif(!dir[y]){\n\t\t\tt[x]=pos[x]-pos[y];\n\t\t}else if(dir[y]==-1){\n\t\t\tt[x]=inf;\n\t\t}else assert(0);\n\t}\n}\nstruct node{\n\tint id,t,st;\n\tfriend bool operator<(const node&x,const node&y){ return x.t>y.t; }\n};\npriority_queue<node> q;\ninline int p(int x,int tm){ return pos[x]+dir[x]*tm; }\ninline void ins(int x){ q.push({x,t[x],++st[x]}); }\nvoid work(int x,int tm){\n\tpos[x]=p(x,tm);\n\tdir[x]=way(w[L[x]],w[x],w[R[x]]);\n\tpos[x]-=dir[x]*tm;\n\tget(x);\n\tins(x);\n}\nsigned main(){ios::sync_with_stdio(false),cin.tie(nullptr);\n\tcin>>n;\n\trep(i,1,n) cin>>pos[i];\n\trep(i,1,n) cin>>w[i];\n\trep(i,1,n) dir[i]=way(w[i-1],w[i],w[i+1]);\n\trep(i,2,n) L[i]=i-1;\n\trep(i,1,n-1) R[i]=i+1;\n\tiota(a+1,a+1+n,1);\n\tsort(a+1,a+1+n,[](int x,int y){return w[x]>w[y];});\n\trep(i,1,n) get(a[i]);\n\trep(i,1,n) ins(i);\n\tint x,y,z,tm;\n\twhile(1){\n\t\tx=q.top().id; tm=q.top().t; z=q.top().st; q.pop();\n\t\tif(st[x]!=z) continue;\n\t\tif(!dir[x]) break;\n\t\tans[x]=p(x,tm);\n\t\ty=L[x],z=R[x];\n\t\tR[y]=z,L[z]=y;\n\t\t//y,z \u6539 dir & t , L[y] \u548c R[z] \u6539 t\n\t\tif(y && t[y]>tm) work(y,tm);\n\t\tif(z && t[z]>tm) work(z,tm);\n\t\tif(L[y] && t[L[y]]>tm) get(L[y]),ins(L[y]);\n\t\tif(R[z] && t[R[z]]>tm) get(R[z]),ins(R[z]);\n\t}\n\trep(i,1,n) cout<<ans[i]<<\" \\n\"[i==n];\nreturn 0;}\n```",
        "postTime": 1676429331,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "P9066 [yLOI2023] \u8150\u8349\u4e3a\u8424\uff08\u6a21\u62df/\u4f18\u5148\u961f\u5217\uff09"
    }
]