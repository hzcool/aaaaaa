[
    {
        "content": "\u5982\u679c\u8fd9\u9898\u6362\u4e2a\u95ee\u6cd5\uff1a\u80fd\u4e0d\u80fd\u8df3a\u652f\u821e\u66f2\n\n\u6211\u4eec\u6765\u770b\u770b\n\n\u628a\u6bcf\u4e2a\u4eba\u62c6\u6210\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u70b9\n\n\u4eceS\u5411\u6bcf\u4e2a\u7537\u751f\u8fde\u5bb9\u91cf\u4e3aa\u7684\u8fb9\uff0c\u8868\u793a\u9650\u5236a\u652f\u821e\u66f2\n\n\u518d\u4ece\u7537\u751f\u8fde\u5411\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u7684\u4e24\u4e2a\u70b9\uff0c\n\n\u4f46\u662f\u8fd9\u6837\u5b50\u6ca1\u6cd5\u9650\u5236\uff0c\u56e0\u4e3a\u53ea\u8bf4\u4e86\u4e0d\u80fd\u548c\u8d85\u8fc7K\u4e2a\u4e0d\u559c\u6b22\u7684\u4eba\u8df3\u821e\n\n\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4eceS\u8fde\u5411\u7537\u751f\u559c\u6b22\uff0c\u5bb9\u91cf\u4e3aa\n\n\u518d\u4ece\u7537\u751f\u559c\u6b22\u8fde\u5411\u7537\u751f\u4e0d\u559c\u6b22\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3aK\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\n\n\u63a5\u4e0b\u6765\u5c31\u5f88\u597d\u529e\u4e86\n\n\u7537\u751f\u559c\u6b22\u8fde\u5411\u5973\u751f\u559c\u6b22\n\n\u7537\u751f\u4e0d\u559c\u6b22\u8fde\u5411\u5973\u751f\u4e0d\u559c\u6b22\n\n\u800c\u5973\u751f\u4e4b\u95f4\u7684\u8fde\u8fb9\u7c7b\u4f3c\u4e8e\u7537\u751f\n\n\uff08\u4f60\u5c31\u60f3\uff0c\u5982\u679c\u8fd9\u4e2a\u56fe\u53cd\u8fc7\u6765\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u600e\u4e48\u8fde\u8fb9\u5c31\u5f88\u6e05\u6670\u4e86\uff09\n\n\u8fd9\u4e2a\u65f6\u5019\u8dd1\u6700\u5927\u6d41\n\n\u6c42\u51fa\u6765\u7684\u5c31\u662f\u6700\u5927\u7684\u5339\u914d\u6570\n\n\u5982\u679c\u6700\u5927\u6d41\u6070\u597d\u7b49\u4e8ea\\*n\n\n\u4e5f\u5c31\u662f\u6070\u597da\\*n\u7ec4\u5339\u914d\uff0c\u610f\u5473\u7740\u53ef\u884c\n\n\n\u73b0\u5728\u518d\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\n\n\u65e2\u7136\u8981\u6c42\u6700\u5927\u7684a\n\n\u6240\u4ee5\u5c31\u4e8c\u5206\u4e00\u4e0b\n\n\u7136\u540e\u6bcf\u6b21\u628a\u56fe\u91cd\u6784\u4e00\u4e0b\u6d41\u91cf\n\n\u4e8c\u5206\u5c31\u884c\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAX 300\n#define MAXL 100000\n#define INF 1000000000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nstruct Line\n{\n    int v,next,w;\n}e[MAXL];\nint h[MAX],cnt;\nint ans,S,T,n,m,K;\ninline void Add(int u,int v,int w)\n{\n    e[cnt]=(Line){v,h[u],w};\n    h[u]=cnt++;\n    e[cnt]=(Line){u,h[v],0};\n    h[v]=cnt++;\n}\nint level[MAX];\nint cur[MAX];\nbool BFS()\n{\n    memset(level,0,sizeof(level));\n    level[S]=1;\n    queue<int> Q;\n    Q.push(S);\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=h[u];i!=-1;i=e[i].next)\n        {\n            int v=e[i].v;\n            if(e[i].w&&!level[v])\n                level[v]=level[u]+1,Q.push(v);\n        }\n    }\n    return level[T];\n}\nint DFS(int u,int flow)\n{\n    if(flow==0||u==T)return flow;\n    int ret=0;\n    for(int &i=cur[u];i!=-1;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(e[i].w&&level[v]==level[u]+1)\n        {\n            int dd=DFS(v,min(flow,e[i].w));\n            flow-=dd;ret+=dd;\n            e[i].w-=dd;e[i^1].w+=dd;\n        }\n    }\n    return ret;\n}\nint Dinic()\n{\n    int ret=0;\n    while(BFS())\n    {\n        for(int i=S;i<=T;++i)cur[i]=h[i];\n        ret+=DFS(S,INF);\n    }\n    return ret;\n}\nchar g[MAX][MAX];\nvoid Build(int mid)\n{\n    memset(h,-1,sizeof(h));\n    cnt=0;\n    for(int i=1;i<=n;++i)\n    {\n        Add(S,i,mid);\n        Add(i+n+n,T,mid);\n        Add(i,i+n,K);\n        Add(i+n+n+n,i+n+n,K);\n    }\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=n;++j)\n            if(g[i][j]=='Y')\n                Add(i,j+n+n,1);\n            else\n                Add(i+n,j+n+n+n,1);\n}\nint main()\n{\n    n=read();K=read();\n    S=0;T=n+n+n+n+1;\n    for(int i=1;i<=n;++i)\n        scanf(\"%s\",g[i]+1);\n    int l=0,r=n;\n    while(l+1<r)\n    {\n        int mid=(l+r)>>1;\n        Build(mid);\n        if(Dinic()==mid*n)l=mid;\n        else r=mid;\n    }\n    Build(r);\n    printf(\"%d\\n\",Dinic()==r*n?r:l);\n    return 0;\n}\n\n```",
        "postTime": 1514367028,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3153 \u3010[CQOI2009]DANCE\u8df3\u821e\u3011"
    },
    {
        "content": "## P3153 [CQOI2009]\u8df3\u821e\n\n\u9898\u76ee\u63cf\u8ff0\n\u4e00\u6b21\u821e\u4f1a\u6709n\u4e2a\u7537\u5b69\u548cn\u4e2a\u5973\u5b69\u3002\u6bcf\u9996\u66f2\u5b50\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u7537\u5b69\u548c\u5973\u5b69\u6070\u597d\u914d\u6210n\u5bf9\u8df3\u4ea4\u8c0a\u821e\u3002\u6bcf\u4e2a\u7537\u5b69\u90fd\u4e0d\u4f1a\u548c\u540c\u4e00\u4e2a\u5973\u5b69\u8df3\u4e24\u9996\uff08\u6216\u66f4\u591a\uff09\u821e\u66f2\u3002\u6709\u4e00\u4e9b\u7537\u5b69\u5973\u5b69\u76f8\u4e92\u559c\u6b22\uff0c\u800c\u5176\u4ed6\u76f8\u4e92\u4e0d\u559c\u6b22\uff08\u4e0d\u4f1a\u201d\u5355\u5411\u559c\u6b22\u201c\uff09\u3002\u6bcf\u4e2a\u7537\u5b69\u6700\u591a\u53ea\u613f\u610f\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u5973\u5b69\u8df3\u821e\uff0c\u800c\u6bcf\u4e2a\u5973\u5b69\u4e5f\u6700\u591a\u53ea\u613f\u610f\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u7537\u5b69\u8df3\u821e\u3002\u7ed9\u51fa\u6bcf\u5bf9\u7537\u5b69\u5973\u5b69\u662f\u5426\u76f8\u4e92\u559c\u6b22\u7684\u4fe1\u606f\uff0c\u821e\u4f1a\u6700\u591a\u80fd\u6709\u51e0\u9996\u821e\u66f2\uff1f\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548ck\u3002\u4ee5\u4e0bn\u884c\u6bcf\u884c\u5305\u542bn\u4e2a\u5b57\u7b26\uff0c\u5176\u4e2d\u7b2ci\u884c\u7b2cj\u4e2a\u5b57\u7b26\u4e3a'Y'\u5f53\u4e14\u4ec5\u5f53\u7537\u5b69i\u548c\u5973\u5b69j\u76f8\u4e92\u559c\u6b22\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u4ec5\u4e00\u4e2a\u6570\uff0c\u5373\u821e\u66f2\u6570\u76ee\u7684\u6700\u5927\u503c\u3002\n\n---\n# \u5206\u6790\n\n\u9996\u5148\u770b\u7684\u51fa\u8fd9\u9053\u9898\u662f\u4e00\u4e2a**\u5339\u914d\u95ee\u9898**\uff0c\u81ea\u7136\u8054\u60f3\u5230\u7f51\u7edc\u6d41\u7b97\u6cd5\n\n\u65e2\u7136\u662f\u7f51\u7edc\u6d41\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u6709\u7f51\u7edc\u5bb9\u91cf\u6765\u8fbe\u5230**\u9650\u5236**\u7684\u76ee\u7684\uff0c\u6700\u540e\u5bf9\u5e94\u9898\u610f\u7684\u8981\u6c42\u3002\u800c**\u901a\u8fc7\u9898\u610f\u627e\u9650\u5236\u6761\u4ef6\uff0c\u6784\u5efa\u6a21\u578b\u6700\u540e\u7528\u6700\u5927\u6d41\u6c42\u89e3\uff0c\u662f\u6700\u5927\u6d41\u7c7b\u9898\u76ee\u7684\u6838\u5fc3\u89e3\u6cd5**\n\n\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b\u8fd9\u9898\u6709\u4ec0\u4e48\u9650\u5236\uff1a\n\n1.\u6240\u6709\u7537\u5b69/\u5973\u5b69\u90fd\u8981\u8df3\u821e\uff0c\u4e0d\u80fd\u5728\u65c1\u8fb9\u5e72\u770b\u7740\n\n2.\u4e0d\u4f1a\u548c\u540c\u4e00\u4eba\u8df3\u821e\n\n3.\u53ea\u80fd\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u4eba\u8df3\u821e\n\n\u4f9d\u636e\u8fd9\u4e9b\u6761\u4ef6\uff0c\u6211\u4eec\u600e\u4e48\u6784\u5efa\u6a21\u578b\u5462\uff1f\n\n# \u5efa\u6a21\n\n\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u5206\u6790\uff1a\n\n1.\u90fd\u8981\u8df3\u821e\n\n\u65e2\u7136\u4e0d\u80fd\u5e72\u770b\u7740\uff0c\u90a3\u4e48\u4e00\u9996\u821e\u66f2\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5f97\u8df3\uff0c\u6362\u8a00\u4e4b\uff0c\u82e5\u662f\u672c\u9898\u7b54\u6848\u4e3aans\uff0c\u90a3\u4e48\u6700\u7ec8\u6bcf\u4eba\u90fd\u80fd\u8df3ans\u53ea\u821e\uff0c\n\n\u6240\u4ee5\u6211\u4eec**\u4e8c\u5206\u7b54\u6848**\uff0c\u5728\u67d0\u4e2a\u6a21\u578b\u4e0b\u8dd1\u6700\u5927\u6d41\uff0c\u6700\u540e\u68c0\u67e5\u7b54\u6848\uff0c\u82e5\u6ee1\u8db3\u6761\u4ef6\uff1a\uff08\u8df3\u821e\u7684\u603b\u6570\u5c31\u662fans * N\uff08\u4eba\u6570\uff09\uff09\u6211\u4eec\u5c31\u5f80\u4e0a\u641c\uff0c\u5426\u5219\u5c31\u5f80\u4e0b\u641c\uff0c\u4e0d\u65ad\u7f29\u5c0f\u4e8c\u5206\u8303\u56f4\uff0c\u627e\u5230\u7b54\u6848 ~~\uff08\u5176\u5b9e\u8c8c\u4f3c\u6570\u636e\u8303\u56f4\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\uff09~~\n\n2.\u4e0d\u4f1a\u548c\u540c\u4e00\u4eba\u8df3\u821e\n\n\u5339\u914d\u7684\u57fa\u672c\u77e5\u8bc6\uff0c\u7537\u5973\u8fde\u8fb9\u5bb9\u91cf\u4e3a1\u5373\u53ef\uff0c\u4e0d\u518d\u8d58\u8ff0\n\n3.\u80fd\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u4eba\u8df3\u821e\n\n\u6211\u4eec\u8981\u6c42\u80fd\u8df3\u821e\u7684\u573a\u6570\u6700\u591a\uff0c\u81ea\u7136\u5c31\u60f3k\u5c3d\u53ef\u80fd\u591a\u4e00\u70b9\uff0c\u867d\u7136k\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u4f46\u662f\u4f9d\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6211\u4eec**\u80fd\u4e0d\u7528k\u5c31\u5c3d\u91cf\u4e0d\u7528k**\uff0c\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u548c\u821e\u4f34\u4e92\u76f8\u559c\u6b22\uff0c\u5c31\u4e0d\u7528\u6d88\u8017k\u7684\u6b21\u6570\u4e86\u3002\n\n\u4e3a\u4e86\u8fbe\u5230\u559c\u6b22\u7684\u4eba\u4e92\u76f8\u8df3\u821e\u4e0d\u6d88\u8017k\uff0c\u6211\u4eec\u9700\u8981**\u5206\u88c2\u70b9**\uff1a\u5c06\u6bcf\u4e2a\u7537/\u5973\u5206\u88c2\u4e3a\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u8fde\u8fb9\u5982\u4e0b\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/17515.png)\n\na\u4e3a\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\n\u6e90\u70b9\u8fde\u7537\u5bb9\u91cf\u4e3aa\u4fdd\u8bc1\u4e86\u4e00\u4e2a\u4eba\u53ef\u4ee5\u8df3a\u573a\u821e\uff0c\u6765\u8fdb\u884c\u6700\u5927\u6d41\u4ee5\u53ca\u7b54\u6848\u9a8c\u8bc1\n\uff08\u6df1\u8272\u4e3a\u559c\u6b22\uff0c\u6d45\u4e00\u70b9\u4e3a\u4e0d\u559c\u6b22\uff09\n\n\u82e5\u4e24\u4eba\u76f8\u4e92\u559c\u6b22\uff0c\u5219\u6709\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/17516.png)\n\n\u8fd9\u6837\u76f4\u63a5\u8fde\u559c\u6b22\uff0cs\u5230t\u7684\u8def\u4e0a\u6ca1\u6709\u5360\u7528k\uff0c\u5373k\u7684\u6b21\u6570\u65e0\u6d88\u8017\uff1b\u5bb9\u91cf\u4e3a1\u4fdd\u8bc1\u4e86\u53ea\u548c\u540c\u4e00\u4eba\u8df3\u4e00\u6b21\u821e\n\n---\n\u82e5\u4e24\u4eba\u4e0d\u4e92\u76f8\u559c\u6b22\uff0c\u5219\u6709\n\n![](https://cdn.luogu.com.cn/upload/pic/17517.png)\n\n\u4e0d\u559c\u6b22\u7684\u4eba\u8df3\u821e\u4e0d\u613f\u610f\uff0c\u9700\u8981\u6d88\u8017k\uff0c\u8def\u5f84\u88ab\u5939\u5728k\u4e4b\u95f4\uff0c\u6700\u5927\u6d41\u4ece\u4e4b\u95f4\u901a\u8fc7\u6d88\u8017k\uff0c\u8fbe\u5230\u76ee\u7684\uff1b\u5bb9\u91cf\u4e3a1\u540c\u6837\u4fdd\u8bc1\u4e86\u53ea\u548c\u540c\u4e00\u4eba\u8df3\u4e00\u6b21\u821e\n\n\u5efa\u6a21\u5b8c\u6bd5\n\n\u6700\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u9a8c\u8bc1\u662f\u5426\u5408\u6cd5\uff0c\u7ee7\u7eed\u4e8c\u5206\u5373\u53ef\u5f97\u5230\u6700\u7ec8\u7b54\u6848\n\n**\u6ce8\uff1a\u91cd\u590d\u5efa\u56fe\u8bb0\u5f97\u521d\u59cb\u5316**\n\n# AC Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 100019,INF = 1e9;\nint num,k,nume = 1;\nint dance[190][190];\nint s,t,maxflow;\nint head[maxn << 2];\nstruct Node{\n    int v,dis,nxt;\n    }E[maxn << 3];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nint d[maxn];\nbool bfs(){\n    queue<int>Q;\n    memset(d,0,sizeof(d));\n    d[s] = 1;\n    Q.push(s);\n    while(!Q.empty()){\n        int u = Q.front();Q.pop();\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(E[i].dis && !d[v]){\n                d[v] = d[u] + 1;\n                if(v == t)return 1;\n                Q.push(v);\n                }\n            }\n        }\n    return 0;\n    }\nint Dinic(int u,int flow){\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = head[u];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(d[v] == d[u] + 1 && rest && E[i].dis){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)d[v] = 0;\n            E[i].dis -= k;\n            E[i ^ 1].dis += k;\n            rest -= k;\n            }\n        }\n    return flow - rest;\n    }\nvoid build(int a){\n    memset(head,0,sizeof(head));\n    nume = 1;//\u521d\u59cb\u5316\n    for(int i = 1;i <= num;i++){\n        add(s,i,a);\n        add(i,s,0);//\u8fde\u6c47\u70b9\u5230\u7537\u751f\u559c\u6b22\n        add(i,i + num,k);\n        add(i + num,i,0);//\u8fde\u7537\u559c\u6b22\u5230\u4e0d\u559c\u6b22\n        add(i + 2 * num,i + 3 * num,k);\n        add(i + 3 * num,i + 2 * num,0);//\u8fde\u5973\u4e0d\u559c\u6b22\u5230\u559c\u6b22\n        add(i + 3 * num,t,a);\n        add(t,i + 3 * num,0);//\u5973\u559c\u6b22\u5230\u6e90\u70b9\n        }\n    for(int i = 1;i <= num;i++){\n        for(int j = 1;j <= num;j++){\n            if(dance[i][j]){\n                add(i,j + 3 * num,1);\n                add(j + 3 * num,i,0);\n                }\n            else{\n                add(i + num,j + 2 * num,1);\n                add(j + 2 * num,i + num,0);\n                }\n            }\n        }\n    }\nbool check(int mid){\n    build(mid);\n    maxflow = 0;\n    int flow = 0;\n    while(bfs())while(flow = Dinic(s,INF))maxflow += flow;\n    if(maxflow == mid * num)return 1;\n    return 0;\n    }\nint search(int l,int r){\n    int ans;\n    while(l <= r){\n        int mid = l + r >> 1;\n        if(check(mid))l = mid + 1,ans = mid;\n        else r = mid - 1;\n        }\n    return ans;\n    }\nint main(){\n    num = RD();k = RD();\n    char temp;\n    for(int i = 1;i <= num;i++){\n        for(int j = 1;j <= num;j++){\n            cin>>temp;\n            if(temp == 'Y')dance[i][j] = 1;\n            }\n        }\n    s = num * 4 + 1;t = s + 1;\n    printf(\"%d\\n\",search(0,num + k));\n    return 0;\n    }\n```",
        "postTime": 1523786963,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3153 \u3010[CQOI2009]\u8df3\u821e\u3011"
    },
    {
        "content": "[P3153 [CQOI2009]\u8df3\u821e](https://www.luogu.com.cn/problem/P3153)\n\nUPD\uff1a\u4e0a\u6b21\u6ca1\u8fc7\uff0c\u4fee\u6539\u4e86\u4e00\u4e0b\n\n\u9898\u610f\u7565\uff0c\u7b97\u6cd5\uff1a\u7f51\u7edc\u6d41\u4e2d\u7684\u6700\u5927\u6d41\u3002\n\n\u8003\u8651\u62c6\u70b9\uff0c\u9996\u5148\u753b\u51fa\u539f\u70b9\u548c\u6c47\u70b9\uff0c\u63a5\u7740\u4e00\u5217\u8868\u793a\u7537\u751f\u70b9\uff0c\u53e6\u4e00\u5217\u8868\u793a\u5973\u751f\u70b9\uff0c\u518d\u62c6\u70b9\u3002\u5c06\u6bcf\u4e2a\u7537\u751f\u62c6\u4e3a\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u70b9\uff0c\u9700\u8981\u8fde\u63a5\u6240\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u7684\u5973\u751f\u7684\u70b9\uff0c\u5177\u4f53\u793a\u610f\u5982\u4e0b\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/54xqau70.png)\n\n\u9700\u8981\u6ce8\u610f\u7684\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u548c\u81ea\u5df1\u559c\u6b22\u7684\u5f88\u591a\u4eba\u8df3\u65e0\u6570\u6b21\uff0c\u6240\u4ee5\u8981\u8fde\u5bb9\u91cf $ inf $ \uff0c\u4f46\u53ea\u80fd\u548c\u81ea\u5df1\u4e0d\u559c\u6b22\u7684\u4eba\u4eec\u8df3 $ k $ \u6b21\uff0c\u6240\u4ee5\u8fde\u5bb9\u91cf $ k $\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4e0a\u6587\u6240\u8bf4\u7684\uff0c\u4e2d\u95f4\u7684\u4e00\u6761\u8fb9\u8868\u793a\u5bf9\u5e94\u7684\u4e00\u5bf9\u5173\u7cfb\uff0c\u6bcf\u4e2a\u4eba\u7684\u559c\u6b22\u8282\u70b9\u5411\u559c\u6b22\u7684\u4eba\u8fde\u8fb9\uff0c\u4e0d\u559c\u6b22\u8282\u70b9\u5411\u4e0d\u559c\u6b22\u7684\u4eba\u8fde\u8fb9\uff0c\u56e0\u4e3a\u53ea\u80fd\u8df3\u4e00\u6b21\uff0c\u6240\u4ee5\u5bb9\u91cf\u4e3a $ 1 $ \u3002\n\n\u4f46\u662f\u6e90\u6c47\u70b9\u4e0e\u6bcf\u4e2a\u4eba\u4e4b\u95f4\u7684\u8fb9\u600e\u4e48\u8003\u8651\u5462\uff1f\u4f17\u6240\u5468\u77e5\uff0c\u7f51\u7edc\u6d41\u4e2d\u4e00\u4e2a\u70b9\u7684\u6d41\u51fa\u91cf\u7b49\u4e8e\u5176\u6d41\u5165\u91cf\uff0c\u6240\u4ee5\u4eba\u7684\u4e2a\u6570 $ \\cdot $ \u6bcf\u6761\u8fb9\u6d41\u91cf $ = $ \u6e90\u70b9\u91cf\uff0c\u5bf9\u6bcf\u6761\u8fb9\u6d41\u91cf\u8fdb\u884c\u4e8c\u5206\u5373\u53ef\uff0c\u5982\u679c\u6e90\u70b9\u51fa\u91cf\u5927\u4e8e\u6700\u5927\u6d41\uff0c\u5219\u9700\u8981\u51cf\u5c0f\u6bcf\u6761\u8fb9\u7684\u51fa\u91cf\uff0c\u53cd\u4e4b\u540c\u3002\u800c\u4e3a\u4e86\u6c42\u6700\u591a\u5bf9\uff0c\u5219\u6c42\u6700\u5927\u6d41\u3002( $ ISAP $ \u7b97\u6cd5\uff09\u3002\n\n### \u603b\u7ed3\u601d\u8def\n\u6309\u4e0a\u56fe\u8fdb\u884c\u5efa\u56fe\uff0c\u5bf9\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e8c\u5206\u7b54\u6848\uff0c\u5982\u679c\u6240\u6709\u51fa\u6d41\u91cf\u5927\u4e8e\u6700\u5927\u6d41\uff0c\u5219\u51cf\u5c0f\u6bcf\u6761\u8fb9\u6d41\u91cf\u3002\n\n\u4e3a\u65b9\u4fbf\u7406\u89e3\u5efa\u56fe\uff0c\u6837\u4f8b\u5efa\u56fe\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gha4mtg6.png)\n\n## Tips\n\n\u63a5\u4e0b\u6765\u8bf4\u4e00\u4e9b\u5173\u4e8e\u4ee3\u7801\u5b9e\u73b0\u65b9\u9762\u7684\u5185\u5bb9\n\n1\u3001\u7531\u4e8e $ mid $ \u5728\u8fb9\u4e0a\uff0c\u6240\u4ee5\u6bcf\u6b21\u4e8c\u5206\u9700\u8981\u91cd\u65b0\u5efa\u8fb9\n\n2\u3001\u4e8c\u5206\u4e0b\u754c $ 0 $ \u4e0a\u754c $ n $ \n\n3\u3001**\u63d0\u524d\u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\u4e2d\u5efa\u56fe\u7684\u5b9e\u73b0**\n\n\u5efa\u56fe\u5206\u4e3a\u4e09\u4e2a\u677f\u5757\uff1a\n\n\u4e00\u3001\u5de6\u534a\u90e8\u5206\u70b9\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bd173jbh.png)\n \n\u4e8c\u3001\u53f3\u534a\u90e8\u5206\u70b9\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/izjvfh7a.png)\n\ntips: $ \\lfloor \\frac{n}{m} \\rfloor = \\lceil \\frac{n+1}{m} \\rceil $\n\n\u4e09\u3001\u4e2d\u95f4\u90e8\u5206\n\n\u8ba8\u8bba\u7b2ci\u4e2a\u7537\u5b69\uff0c\u76f4\u63a5\u5bf9\u5e94\u6bcf\u4e00\u4e2a\u5973\u751f\uff0c\u5982\u679c\u559c\u6b22\u5c31\u4ece\u559c\u6b22\u8282\u70b9\u8fde\u5411\u559c\u6b22\u8282\u70b9\uff0c\u4e0d\u559c\u6b22\u5c31\u4ece\u4e0d\u559c\u6b22\u8282\u70b9\u8fde\u5411\u4e0d\u559c\u6b22\u8282\u70b9\u3002~~\u4f5c\u8005\u5199\u7d2f\u4e86\u5199\u4e0d\u52a8\u4e86\u5c31\u7565\u4e86\uff0c\u56e0\u4e3a\u662f\u6700\u7b80\u5355\u7684\u4e00\u90e8\u5206~~\n\n\n$ Code $\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <cstring>\n# define int long long\nusing namespace std;\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 1e6 + 5;\nconst int maxm = 50 + 5;\nint n , k;\n\nchar c[maxm];\nint S , T;\nint like[maxm][maxm];\nint cnt[maxn] , dis[maxn];\ntypedef struct {\n\tint x , y , z , next;\n} Edge;\nEdge edge[maxn];\nint E = 1  , elast[maxn];\nvoid add(int x , int y , int z) {\n\tE ++;\n\tedge[E].x = x;\n\tedge[E].y = y;\n\tedge[E].z = z;\n\tedge[E].next = elast[x];\n\telast[x] = E;\n}\nvoid rebuild(int mid) {\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tadd(i + 1 , n + 1 + ((i - 1) << 1) + 1, inf);\n\t\tadd(n + 1 + ((i - 1) << 1) + 1 , i + 1 , 0);\n\t\tadd(i + 1 , n + 1 + ((i - 1) << 1) + 2 , k);\n\t\tadd(n + 1 + ((i - 1) << 1) + 2 , i + 1 , 0);\n\t\tfor (int j = 1 ; j <= n ; j ++) {\n\t\t\tif (like[i][j] == 1) {\n\t\t\t\tadd(n + 1 + ((i - 1) << 1) + 1 , n * 3 + 1 + (j << 1) - 1 , 1);\n\t\t\t\tadd(n * 3 + 1 + (j << 1) - 1 , n + 1 + ((i - 1) << 1) + 1 , 0);\n\t\t\t} else {\n\t\t\t\tadd(n + 1 + ((i - 1) << 1) + 2 , n * 3 + 1 + (j << 1) , 1);\n\t\t\t\tadd(n * 3 + 1 + (j << 1) , n + 1 + ((i - 1) << 1) + 2 , 0);\n\t\t\t}\n\t\t}\n\n\t}\n\tfor (int i = 1 ; i <= n << 1 ; i ++) {\n\t\tif (i & 1) {\n\t\t\tadd(n * 3 + 1 + i , ((i + 1) >> 1) + n * 5 + 1 , inf);\n\t\t\tadd(((i + 1) >> 1) + n * 5 + 1 , n * 3 + 1 + i , 0);\n\t\t} else {\n\t\t\tadd(n * 3 + 1 + i , n * 5 + 1 + (i >> 1) , k);\n\t\t\tadd(n * 5 + 1 + (i >> 1) , n * 3 + 1 + i , 0);\n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tadd(1 , i + 1 , mid);\n\t\tadd(i + 1 , 1 , mid);\n\t}\n\tfor (int i = n * 5 + 1 + 1 ; i <= T - 1 ; i ++) {\n\t\tadd(i , T , mid);\n\t\tadd(T , i , mid);\n\t}\n\n}\nint dfs(int u , int flow) {\n\tint temp , delta;\n\tdelta = 0;\n\tif (u == T) return flow;\n\tfor (int i = elast[u] ; i ; i = edge[i].next) {\n\t\tint v = edge[i].y;\n\t\tif (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n\t\t\ttemp = dfs(v , min(flow - delta , edge[i].z));\n\t\t\tedge[i].z -= temp;\n\t\t\tedge[i ^ 1].z += temp;\n\t\t\tdelta += temp;\n\t\t\tif (delta == flow || dis[1] >= T) return delta;\n\t\t}\n\t}\n\tif (dis[1] >= T) return delta;\n\tcnt[dis[u]] --;\n\tif (cnt[dis[u]] == 0) dis[1] = T;\n\tdis[u] = dis[u] + 1;\n\tcnt[dis[u]] ++;\n\treturn delta;\n}\nsigned main() {\n\tcin >> n >> k;\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tscanf(\"%s\" , &c);\n\t\tfor (int j = 0 ; j < n ; j ++) {\n\t\t\tif (c[j] == 'Y') {\n\t\t\t\tlike[i][j + 1] = 1;\n\t\t\t} else {\n\t\t\t\tlike[i][j + 1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tS = 1;\n\tT = n * 6 + 2;\n\tint ans;\n\tint l = 0 , r = n, Ans;\n\twhile (l <= r) {\n\t\tint mid = l + r >> 1;\n\t\tE = 1;\n\t\tmemset(elast , 0 , sizeof elast);\n\t\tmemset(dis , 0 , sizeof dis);\n\t\trebuild(mid);\n\t\tans = 0;\n\t\twhile (dis[1] < T) {\n\t\t\tans += dfs(1 , inf + 1);\n\t\t}\n\t\tif (ans == n * mid){\n\t\t\tl = mid + 1;\n\t\t\tAns = mid;\n\t\t} else {\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\tprintf(\"%d\\n\" , Ans);\n\treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1626777837,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P3153 [CQOI2009]\u8df3\u821e"
    },
    {
        "content": "## \u95f2\u8bdd\n\n\u8fd9\u9053\u9898\u662f 2022 \u5e74\u6691\u5047\u7684\u6700\u540e\u4e00\u9053\u9898\uff0c\u8fd9\u7bc7\u9898\u89e3\u662f 2022 \u5e74\u6691\u5047\u7684\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u3002\n\n## \u601d\u8def\n\n\u5bb9\u6613\u53d1\u73b0\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e8e\u662f\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\u5047\u8bbe\u5f53\u524d\u7684\u821e\u66f2\u6570\u91cf\u4e3a $x$\uff0c\u8003\u8651\u5efa\u7acb\u7f51\u7edc\u6d41\u6a21\u578b\u5224\u65ad $x$ \u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\n\n- \u5efa\u7acb\u6e90\u70b9\u548c\u6c47\u70b9\u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u628a TA \u62c6\u6210 \u201c\u559c\u6b22\u70b9\u201d \u548c \u201c\u4e0d\u559c\u6b22\u70b9\u201d\u3002\n- \u7531\u6e90\u70b9\u5411\u6bcf\u4e2a\u7537\u5b69\u7684 \u201c\u559c\u6b22\u70b9\u201d \u8fde\u5bb9\u91cf\u4e3a $x$ \u7684\u5f27\u3002\n- \u7531\u6bcf\u4e2a\u7537\u5b69\u7684 \u201c\u559c\u6b22\u70b9\u201d \u5411\u4ed6\u7684 \u201c\u4e0d\u559c\u6b22\u70b9\u201d \u8fde\u5bb9\u91cf\u4e3a $k$ \u7684\u5f27\u3002\n- \u7531\u6bcf\u4e2a\u7537\u5b69\u7684 \u201c\u559c\u6b22\u70b9\u201d \u5411\u4ed6\u559c\u6b22\u7684\u5973\u5b69\u7684 \u201c\u559c\u6b22\u70b9\u201d \u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u5f27\uff1b\u7531\u6bcf\u4e2a\u7537\u5b69\u7684 \u201c\u4e0d\u559c\u6b22\u70b9\u201d \u5411\u4ed6\u4e0d\u559c\u6b22\u7684\u5973\u5b69\u7684 \u201c\u4e0d\u559c\u6b22\u70b9\u201d \u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u5f27\u3002\n- \u7531\u6bcf\u4e2a\u5973\u5b69\u7684 \u201c\u4e0d\u559c\u6b22\u70b9\u201d \u5411\u5979\u7684 \u201c\u559c\u6b22\u70b9\u201d \u8fde\u5bb9\u91cf\u4e3a $k$ \u7684\u5f27\u3002\n- \u7531\u6bcf\u4e2a\u5973\u5b69\u7684 \u201c\u559c\u6b22\u70b9\u201d \u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $x$ \u7684\u5f27\u3002\n\n\u6b64\u65f6\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u5373\u4e3a\u53ef\u4ee5\u8df3\u821e\u7684\u4eba\u7684\u5bf9\u6570\u3002\u82e5\u6700\u5927\u6d41\u7b49\u4e8e $n x$\uff0c\u5219 $x$ \u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u82e5\u4f7f\u7528 $\\texttt {Dinic}$ \u7b97\u6cd5\u6c42\u89e3\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal { O } ( n ^ 4 \\log n )$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1e9;\nconst int MAXN = 5e1;\nconst int MAXNODE = 1e3;\nint n, k;\nint l, r, mid;\nchar c[MAXN + 5][MAXN + 5];\nstruct Node{\n\tint v, w, anti;\n\tNode(): v(0), w(0), anti(0){}\n\tNode(int V, int W, int ANTI): v(V), w(W), anti(ANTI){}\n};\nvector < vector < Node > > g(MAXNODE + 5);\nint dep[MAXNODE + 5];\nint cur[MAXNODE + 5];\nqueue < int > q;\nvoid Add(int u, int v, int w)\n{\n\tg[u].push_back(Node(v, w, g[v].size()));\n\tg[v].push_back(Node(u, 0, g[u].size() - 1));\n}\nbool BFS(int s, int t, int n)\n{\n\tfor(int u = 1; u <= n; u ++) dep[u] = 0; dep[s] = 1;\n\tfor(int u = 1; u <= n; u ++) cur[u] = 0;\n\twhile( ! q.empty()) q.pop(); q.push(s);\n\twhile( ! q.empty()){\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < g[u].size(); i ++){\n\t\t\tif(g[u][i].w > 0 && dep[g[u][i].v] == 0){\n\t\t\t\tdep[g[u][i].v] = dep[u] + 1;\n\t\t\t\tq.push(g[u][i].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t] > 0;\n}\nint DFS(int u, int t, int minflow, int n)\n{\n\tif(u == t) return minflow;\n\tfor(int &i = cur[u]; i < g[u].size(); i ++){\n\t\tif(g[u][i].w > 0 && dep[g[u][i].v] == dep[u] + 1){\n\t\t\tint inc = DFS(g[u][i].v, t, min(minflow, g[u][i].w), n);\n\t\t\tif(inc > 0){\n\t\t\t\tg[u][i].w -= inc;\n\t\t\t\tg[g[u][i].v][g[u][i].anti].w += inc;\n\t\t\t\treturn inc;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint Dinic(int s, int t, int n)\n{\n\tint res = 0;\n\twhile(BFS(s, t, n) == true){\n\t\twhile(true){\n\t\t\tint inc = DFS(s, t, INF, n);\n\t\t\tif(inc == 0) break;\n\t\t\tres += inc;\n\t\t}\n\t}\n\treturn res;\n}\nbool Check(int x)\n{\n\tfor(int u = 1; u <= 4 * n + 2; u ++) g[u].clear();\n\tfor(int u = 1; u <= n; u ++) Add(4 * n + 1, u, x);\n\tfor(int u = 1; u <= n; u ++) Add(u, n + u, k);\n\tfor(int u = 1; u <= n; u ++) for(int v = 1; v <= n; v ++){\n\t\tif(c[u][v] == 'Y') Add(u, 2 * n + v, 1);\n\t\tif(c[u][v] == 'N') Add(n + u, 3 * n + v, 1);\n\t}\n\tfor(int u = 1; u <= n; u ++) Add(3 * n + u, 2 * n + u, k);\n\tfor(int u = 1; u <= n; u ++) Add(2 * n + u, 4 * n + 2, x);\n\treturn Dinic(4 * n + 1, 4 * n + 2, 4 * n + 2) == n * x;\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tfor(int u = 1; u <= n; u ++) for(int v = 1; v <= n; v ++) cin >> c[u][v];\n\tl = 0, r = n + 1;\n\twhile(l + 1 < r){\n\t\tmid = (l + r) >> 1;\n\t\tif(Check(mid) == true) l = mid;\n\t\telse r = mid;\n\t}\n\tprintf(\"%d\\n\", l);\n\treturn 0;\n}\n```\n\n2022.8.31",
        "postTime": 1661907294,
        "uid": 232838,
        "name": "huangkx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3153 [CQOI 2009] \u8df3\u821e"
    },
    {
        "content": "\u8bfb\u5b8c\u8fd9\u5230\u9898\uff0c\u611f\u89c9\u4e0a\u50cf\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u5339\u914d\u5f97\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53c8\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u62c6\u70b9\uff0c\u5c06\u7537\u751f\u548c\u5973\u751f\u90fd\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5e76\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ak\u7684\u8fb9\n![](https://cdn.luogu.com.cn/upload/image_hosting/v5wmxct6.png)\n\n\u5bf9\u4e8e\u4e00\u5bf9\u76f8\u4e92\u559c\u6b22\u7684\u7537\u5973\uff0c\u5728\u7537l\u4e0e\u5973r\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5982\u679c\u4e0d\u559c\u6b22\u90a3\u4e48\u5c31\u5728\u7537r\u4e0e\u5973l\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u679a\u4e3e\u53ef\u4ee5\u6709\u548c\u821e\u66f2\u6570\u91cfm\uff0c\u5728S\u4e0e\u7537l\uff0c\u5973r\u4e0eT\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3am\u7684\u8fb9\uff0c\u5982\u679c\u8be5\u6d41\u7f51\u7edc\u5b58\u5728\u6ee1\u6d41\u7684\u6700\u5927\u6d41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b54\u6848\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a\u6b64\u9898\u7b54\u6848\u5e76\u4e0d\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\n\n\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N = 1005, M = 1e5 + 5, INF = 1e8;\n\nint n, k, idx, S, T;\nint head[N], ver[M], net[M], cpt[M];\nint d[N], cur[N], q[N];\n\nvoid add(int a, int b, int c)\n{\n    net[idx] = head[a], ver[idx] = b, cpt[idx] = c, head[a] = idx++;\n    net[idx] = head[b], ver[idx] = a, cpt[idx] = 0, head[b] = idx++;\n}\n\nbool bfs()\n{\n    int front = 0, tail = 0;\n    memset(d, -1, sizeof(d));\n    q[0] = S, d[S] = 0, cur[S] = head[S];\n    while (front <= tail)\n    {\n        int u = q[front++];\n        for (int i = head[u]; ~i; i = net[i])\n        {\n            int v = ver[i];\n            if (d[v] == -1 && cpt[i])\n            {\n                d[v] = d[u] + 1;\n                cur[v] = head[v];\n                if (v == T)\n                    return true;\n                q[++tail] = v;\n            }\n        }\n    }\n    return false;\n}\n\nint find(int u, int limit)\n{\n    if (u == T)\n        return limit;\n    int flow = 0;\n    for (int i = cur[u]; ~i && flow < limit; i = net[i])\n    {\n        cur[u] = i;\n        int v = ver[i];\n        if (d[v] == d[u] + 1 && cpt[i])\n        {\n            int x = find(v, min(limit - flow, cpt[i]));\n            if (!x)\n                d[v] = -1;\n            cpt[i] -= x, cpt[i ^ 1] += x, flow += x;\n        }\n    }\n    return flow;\n}\n\nint dinic()\n{\n    int flow, res = 0;\n    while (bfs())\n    {\n        while (flow = find(S, INF))\n            res += flow;\n    }\n    return res;\n}\n\nint main()\n{\n    memset(head, -1, sizeof(head));\n    S = 0, T = N - 1;\n    scanf(\"%d%d\", &n, &k);\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            char a;\n            scanf(\" %c\", &a);\n            if (a == 'Y')\n                add(i, 3 * n + j, 1);\n            else\n                add(n + i, 2 * n + j, 1);\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        add(i, n + i, k), add(2 * n + i, 3 * n + i, k);\n        add(S, i, 0), add(3 * n + i, T, 0);\n    }\n    int ans = 55;\n    while(ans--)\n    {\n        for (int i = 0; i < idx; i += 2)\n        {            \n            if (cpt[i ^ 1])\n                cpt[i] += cpt[i ^ 1], cpt[i ^ 1] = 0;\n            if (ver[i ^ 1] == S || ver[i] == T)\n                cpt[i] = ans;\n        }\n        if (dinic() == ans * n)\n        {\n            printf(\"%d\", ans);\n            return 0;\n        }\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1613521642,
        "uid": 277863,
        "name": "BzhH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3P3153 [CQOI2009]\u8df3\u821e"
    },
    {
        "content": "### Solution\n\n\u4e0d\u59a8\u4e8c\u5206\u821e\u66f2\u7684\u6570\u76ee\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4e8c\u5206\u90fd\u91cd\u65b0\u5efa\u56fe\u3002\u8003\u8651\u628a\u7537\u5b69\u548c\u5973\u5b69\u90fd\u5206\u6210\u4e09\u90e8\u5206\uff0c\u559c\u6b22\u548c\u4e0d\u559c\u6b22\uff0c\u4ee5\u53ca\u81ea\u5df1\u672c\u8eab\u3002\n\n\u9996\u5148\u8fde\u6e90\u70b9\u5230\u7537\u5b69\u672c\u8eab\uff0c\u6d41\u91cf\u4e3a\u4e8c\u5206\u7684\u821e\u66f2\u6570\u91cf\u3002\u63a5\u7740\u8fde\u7537\u5b69\u672c\u8eab\u548c\u559c\u6b22\u90e8\u5206\uff0c\u6d41\u91cf\u4e3a\u65e0\u9650\uff0c\u8868\u793a\u80fd\u548c\u559c\u6b22\u7684\u5973\u5b69\u6761\u65e0\u9650\u591a\u9996\u821e\u66f2\u3002\u518d\u8fde\u7537\u5b69\u672c\u8eab\u548c\u4e0d\u559c\u6b22\u90e8\u5206\uff0c\u6d41\u91cf\u4e3a $k$\uff0c\u56e0\u4e3a\u6700\u591a\u548c\u4e0d\u559c\u6b22\u7684\u5973\u5b69\u8df3 $k$ \u9996\u821e\u66f2\u3002\u5973\u5b69\u540c\u7406\u3002\n\n\u6700\u540e\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u628a\u76f8\u4e92\u559c\u6b22\u7684\u7537\u5b69\u7684\u559c\u6b22\u90e8\u5206\u548c\u5973\u5b69\u7684\u559c\u6b22\u90e8\u5206\u8fde\u8d77\u6765\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u53ea\u4f1a\u548c\u76f8\u540c\u7684\u4eba\u8df3\u4e00\u6b21\uff0c\u6240\u4ee5\u6d41\u91cf\u4e3a $1$\u3002\u5982\u679c\u4e00\u4e2a\u7537\u5b69\u548c\u4e00\u4e2a\u5973\u5b69\u76f8\u4e92\u4e0d\u559c\u6b22\uff0c\u5c31\u8fde\u4ed6\u4eec\u7684\u4e0d\u559c\u6b22\u90e8\u5206\uff0c\u6d41\u91cf\u4f9d\u7136\u4e3a $1$\u3002\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u522b\u5fd8\u8bb0\u628a\u5973\u5b69\u672c\u8eab\u548c\u6c47\u70b9\u8fde\u8d77\u6765\uff0c\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\nconst int N=305,M=1e6+5,inf=2e9;\nstruct edge{\n\tint v,nxt,w;\n}e[M<<1];\nint head[N],cnt;\nint n,k,S,T,dep[N],cur[N];\nchar ch[N][N];\nint b(int x){return x;}\nint blk(int x){return n+x*2-1;}\nint bdlk(int x){return n+x*2;}\nint g(int x){return n*5+1;}\nint glk(int x){return n*3+x*2-1;}\nint gdlk(int x){return n*3+x*2;}\nvoid Add(int x,int y,int w){\n\te[++cnt]=((edge){y,head[x],w});\n\thead[x]=cnt;\n}\nvoid add(int x,int y,int w){\n\tAdd(x,y,w),Add(y,x,0);\n}\nvoid init(){\n\tmemset(cur,0,sizeof(cur));\n\tmemset(head,0,sizeof(head));\n\tcnt=1;\n}\nbool bfs(int st,int ed){\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int>q;\n\tq.push(st);\n\tcur[st]=head[st],dep[st]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(!dep[v] && e[i].w){\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tcur[v]=head[v];\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[ed];\n}\nint dfs(int u,int frm){\n\tint to=0;\n\tif(u==T) return frm;\n\tfor(int i=cur[u];i && frm;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tcur[u]=i;\n\t\tif(e[i].w && dep[v]==dep[u]+1){\n\t\t\tint tmp=dfs(v,min(frm,e[i].w));\n\t\t\te[i].w-=tmp,e[i^1].w+=tmp;\n\t\t\tfrm-=tmp,to+=tmp;\n\t\t}\n\t}\n\tif(!to) dep[u]=0;\n\treturn to;\n}\nint Dinic(){\n\tint flw=0;\n\twhile(bfs(S,T)) flw+=dfs(S,inf);\n\treturn flw;\n}\nbool check(int x){\n    init();\n\tfor(int i=1;i<=n;++i) add(S,b(i),x);\n\tfor(int i=1;i<=n;++i) add(b(i),blk(i),inf),add(b(i),bdlk(i),k);\n\tfor(int i=1;i<=n;++i)\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tif(ch[i][j]=='Y') add(blk(i),glk(j),1);\n\t\t\telse add(bdlk(i),gdlk(j),1);\n\t\t}\n\tfor(int i=1;i<=n;++i) add(glk(i),g(i),inf),add(gdlk(i),g(i),k);\n\tfor(int i=1;i<=n;++i) add(g(i),T,x);\n\treturn Dinic()==n*x;\n}\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr),cout.tie(nullptr);\n\tcin>>n>>k;\n\tS=0,T=6*n+1;\n\tfor(int i=1;i<=n;++i) cin>>ch[i]+1;\n\tint l=0,r=n,ans=0;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(check(mid)){\n\t\t\tans=mid;\n\t\t\tl=mid+1;\n\t\t}else r=mid-1;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1685598727,
        "uid": 491321,
        "name": "Erotate",
        "ccfLevel": 0,
        "title": "[CQOI2009]\u8df3\u821e \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u5efa\u6a21\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff1a\u5148\u4e8c\u5206\u7b54\u6848 $x$\uff0c\u7136\u540e\u5efa\u56fe\uff1a\n\n* $(S,i)$\uff0c\u5176\u4e2d $i$ \u662f\u8868\u793a\u7537\u751f\u7684\u70b9\uff0c\u6d41\u91cf\u4e3a $x$\u3002\n* $(j,T)$\uff0c\u5176\u4e2d $j$ \u662f\u8868\u793a\u5973\u751f\u7684\u70b9\uff0c\u6d41\u91cf\u4e3a $x$\u3002\n* $(i,i_0)$\uff0c$i_0$ \u662f\u8868\u793a\u4e0d\u559c\u6b22\u7684\u70b9\uff0c\u6d41\u91cf\u4e3a $k$\u3002\n* $(i,i_1)$\uff0c\u8868\u793a\u559c\u6b22\uff0c\u6d41\u91cf\u4e3a $\\inf$\u3002\n* \u7b2c\u4e09\u3001\u56db\u7c7b\u8fb9\u5bf9\u5973\u751f\u540c\u7406\uff0c\u4e4b\u540e\u559c\u6b22\u5411\u559c\u6b22\u8fde\uff0c\u4e0d\u559c\u6b22\u5411\u4e0d\u559c\u6b22\u8fde\uff0c\u6d41\u91cf\u4e3a $1$\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u9700\u8981\u8865\u5145\u4e00\u4e2a\u8bf4\u660e\uff1a\u4efb\u4f55\u4e00\u4e2a\u6d41\u91cf\u65b9\u6848\u548c\u539f\u6765\u7684\u8df3\u821e\u65b9\u6848\u4e00\u4e00\u5bf9\u5e94\u3002\u4e0d\u59a8\u628a\u76f8\u4e92\u5339\u914d\u7684\u7537\u751f\u548c\u5973\u751f\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u663e\u7136\u8fd9\u6784\u6210\u4e00\u4e2a $x$ \u6b63\u5219\u4e8c\u5206\u56fe\uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e\u5b83\u80fd\u88ab\u62c6\u6210\u6070\u597d $x$ \u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u8003\u8651\u5f52\u7eb3\uff0c\u663e\u7136\u5220\u53bb\u4e00\u7ec4\u5b8c\u7f8e\u5339\u914d\u4f1a\u5f97\u5230\u4e00\u4e2a $x-1$ \u6b63\u5219\u4e8c\u5206\u56fe\uff0c\u6240\u4ee5\u539f\u547d\u9898\u7b49\u4ef7\u4e8e\uff1a\u4efb\u4f55 $r$ \u6b63\u5219\u56fe\u90fd\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u8fd9\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u8003\u8651 Hall \u5b9a\u7406\u3002\n\n* Hall \u5b9a\u7406\uff0c\u5373\u5bf9\u4e8e\u5de6\u90e8\u70b9\u4e2d\u4efb\u610f\u4e00\u4e2a\u5b50\u96c6 $S$\uff0c\u5b9a\u4e49\u548c $v$ \u76f8\u90bb\u7684\u70b9\u96c6\u5408\u4e3a $N(v)$\uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e $|S|\\leq|\\cup_{v\\in S}N(v)|$\u3002\n\n\u5047\u8bbe $R=\\cup_{v\\in S}N(v)$\uff0c\u5047\u8bbe $|R|<|L|$\uff0c\u90a3\u4e48 $|R|\\times k<|L|\\times k$\uff0c\u53f3\u8fb9\u662f $L$ \u8fde\u5411 $R$ \u7684\u8fb9\u96c6\u5927\u5c0f\uff0c\u5de6\u8fb9\u662f $R$ \u7684\u90bb\u8fb9\u96c6\u5408\u5927\u5c0f\u3002\u663e\u7136\u524d\u8005\u662f\u540e\u8005\u7684\u5b50\u96c6\uff0c\u77db\u76fe\u3002\u6545\u5f97\u8bc1\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define ldb long double\n#define pb push_back\n#define mp make_pair\n#define pii pair<int, int>\nusing namespace std;\ninline int read() {\n    int x = 0; bool op = 0;\n    char c = getchar();\n    while(!isdigit(c))op |= (c == '-'), c = getchar();\n    while(isdigit(c))x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();\n    return op ? -x : x;\n}\ntemplate<int N> struct MFL {\n  \tconst int INF = 1e9;\n    int n, etot, S, T, head[N], to[N], nxt[N], flow[N];\n    void addedge(int u, int v, int w) { \n        to[++etot] = v; flow[etot] = w; nxt[etot] = head[u]; head[u] = etot;\n    }\n    void add(int u, int v, int w) {\n        addedge(u, v, w); addedge(v, u, 0);\n        return ;\n    }\n    void init(int nn, int ns, int nt) {\n        n = nn; S = ns; T = nt; etot = 1;\n        memset(head, 0, sizeof(head));\n        return ;\n    }\n    int lev[N], cur[N];\n    bool bfs() {\n        for(int i = 0; i <= n; i++)cur[i] = head[i], lev[i] = 0;\n        queue<int> q;\n        q.push(S); lev[S] = 1;\n        while(q.empty() == false) {\n            int u = q.front(); q.pop();\n            for(int i = head[u]; i; i = nxt[i]) {\n                if(lev[to[i]] || flow[i] == 0)continue;\n                lev[to[i]] = lev[u] + 1;\n                if(to[i] == T)return true;\n                q.push(to[i]);\n            }\n        }\n        return false;\n    }\n    int dinic(int u, int fl) {\n        if(u == T)return fl;\n        int rest = fl;\n        for(int i = cur[u]; i && rest; i = nxt[i]) {\n            cur[u] = i;\n            if(lev[to[i]] ^ (lev[u] + 1) || flow[i] == 0)continue;\n            int inc = dinic(to[i], min(flow[i], rest));\n            if(inc == 0)lev[to[i]] = 0;\n            flow[i] -= inc; flow[i ^ 1] += inc; rest -= inc;\n        }\n        return fl - rest;\n    }\n    int query() {\n        int mxfl = 0, fl = 0;\n        while(bfs()) {\n            while(fl = dinic(S, INF))mxfl += fl;\n        }\n        return mxfl;\n    }\n};\nconst int N = 5e3 + 10;\nconst int MAXN = 1e6 + 10;\nconst int INF = 1e9;\nMFL<MAXN> mf;\nint n, k, tot, id[N][2];\nchar g[N][N];\nbool check(int x) {\n    mf.init(tot + 1, 0, tot + 1);\n    for(int i = 1; i <= n; i++) {\n        mf.add(mf.S, i, x);\n        mf.add(i, id[i][0], k);\n        mf.add(i, id[i][1], INF);\n    }\n    for(int i = n + 1; i <= n * 2; i++) {\n        mf.add(i, mf.T, x);\n        mf.add(id[i][0], i, k);\n        mf.add(id[i][1], i, INF);\n    }\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= n; j++) {\n            if(g[i][j] == 'Y')mf.add(id[i][1], id[j + n][1], 1);\n            else mf.add(id[i][0], id[j + n][0], 1);\n        }\n    }\n    if(mf.query() < x * n)return false;\n    return true;\n} \nint main() {\n    n = read(); k = read();\n    for(int i = 1; i <= n; i++)scanf(\"%s\", g[i] + 1);\n    tot = 2 * n;\n    for(int i = 1; i <= n * 2; i++) {\n        id[i][0] = ++tot; id[i][1] = ++tot;\n    }\n    int lef = 0, rig = n + 1;\n    while(lef + 1 < rig) {\n        int mid = lef + rig >> 1;\n        if(check(mid))lef = mid;\n        else rig = mid;\n    }\n    printf(\"%d\\n\", lef);\n    return 0;\n}\n```\n",
        "postTime": 1649662723,
        "uid": 682934,
        "name": "yllcm",
        "ccfLevel": 0,
        "title": "Solution-P3153"
    },
    {
        "content": "### \u601d\u8def\n\n\u5148\u601d\u8003\uff0c\u80fd\u5426\u7528\u7f51\u7edc\u6d41\u76f4\u63a5\u6c42\u89e3\uff0c\u4e0d\u8fc7\u597d\u50cf\u4e0d\u73b0\u5b9e\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u5148\u786e\u5b9a\u4e00\u4e2a\u7b54\u6848\uff0c\u65e0\u6cd5\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u6709\u8fd9\u4e48\u591a\u821e\u66f2\u3002\n\n\u7136\u540e\u5c31\u53d1\u73b0\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e14\u9898\u76ee\u4e2d\u6709\u201c\u6700\u591a\u201d\u4e8c\u5b57\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e8c\u5206\uff0c\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u503c $mid$\uff0c\u8868\u793a\u6bcf\u4e2a\u4eba\u53ef\u4ee5\u8df3\u7684\u821e\u66f2\u7684\u6570\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u8fde\u8fb9\u3002\n\n\u5bf9\u4e8e\u8fde\u8fb9\u7684\u65b9\u5f0f\uff0c\u7531\u4e8e\u9898\u76ee\u4e2d\u6307\u51fa\u4e86\u6709\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u4eba\u8fdb\u884c\u62c6\u70b9\uff0c\u62c6\u6210\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u70b9\u3002\n\n\u5bf9\u4e8e\u4e0d\u559c\u6b22\u7684\u4eba\u7684\u8df3\u821e\u6570\u91cf $k$\uff0c\u53ea\u9700\u8981\u4ece\u559c\u6b22\u5411\u4e0d\u559c\u6b22\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $k$ \u7684\u8fb9\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u8fd9 $k$ \u652f\u821e\u662f\u5305\u542b\u5728\u6bcf\u4e2a\u4eba\u603b\u5171\u53ef\u4ee5\u8df3\u821e\u7684\u6570\u91cf $mid$ \u4e2d\u7684\u3002\n\n\u7136\u540e\u6309\u7167\u8981\u6c42\uff0c\u4ece\u7537\u751f\u559c\u6b22\u5411\u5973\u751f\u559c\u6b22\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u4ece\u7537\u751f\u4e0d\u559c\u6b22\u5411\u5973\u751f\u4e0d\u559c\u6b22\u8fde\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8df3 $mid \\times n$ \u652f\u821e\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u4e00\u4e9b\u7ec6\u8282\n\n1. \u5bf9\u4e8e\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u8fde\u5411\u7537\u751f\u548c\u5973\u751f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6e90\u70b9\u8fde\u5411\u7537\u751f\uff0c\u5973\u751f\u5c31\u5f97\u8fde\u5411\u6c47\u70b9\u3002\n\n2. \u4ece\u6e90\u70b9\u51fa\u53d1\uff0c\u53ea\u9700\u8981\u5411\u7537\u751f\u559c\u6b22\u8fde\u4e0a\u6d41\u91cf\u4e3a $mid$ \u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u5bf9\u4e8e\u6c47\u70b9\uff0c\u5219\u4ece\u5973\u751f\u559c\u6b22\u8fde\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e5f\u4e3a $mid$\u3002\u81f3\u4e8e\u6b64\u5904\u4e3a\u4ec0\u4e48\u662f\u4ece\u5973\u751f\u559c\u6b22\u8fde\u5411\u6c47\u70b9\uff0c\u753b\u4e00\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9') chh=getchar();\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss;\n}\nint n,k,s,t;\nchar choice[55][55];\nint depth[1005];\nint head[1005],to[1000005],val[1000005],nxt[1000005],tot=1;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nbool bfs(){\n\tmemset(depth,0,sizeof depth); depth[s]=1;\n\tqueue<int> q; q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(val[i]&&!depth[u]){\n\t\t\t\tdepth[u]=depth[x]+1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow){\n\tif(now==t) return flow;\n\tint out_flow=0;\n\tfor(register int i=head[now];i&&flow;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(val[i]&&depth[u]==depth[now]+1){\n\t\t\tint tmp=dfs(u,min(val[i],flow));\n\t\t\tval[i]-=tmp; val[i^1]+=tmp;\n\t\t\tflow-=tmp; out_flow+=tmp;\n\t\t}\n\t}\n\tif(out_flow==0) depth[now]=0;\n\treturn out_flow;\n}\nint Dinic(){\n\tint ret=0;\n\twhile(bfs()) ret+=dfs(s,1e9);\n\treturn ret;\n}\nvoid rebuild(int mid){\n    memset(head,-1,sizeof head); tot=1;\n    for(register int i=1;i<=n;i++){\n        add(s,i,mid); add(i,s,0);\n        add(i,i+n,k); add(i+n,1,0);\n        add(i+n+n+n,i+n+n,k); add(i+n+n,i+n+n+n,0);\n        add(i+n+n,t,mid); add(t,i+n+n,0);\n    }\n    for(register int i=1;i<=n;i++){\n    \tfor(register int j=1;j<=n;j++){\n    \t\tif(choice[i][j]=='Y'){\n    \t\t\tadd(i,j+n+n,1); add(j+n+n,i,0);\n\t\t\t}\n            else {\n            \tadd(i+n,j+n+n+n,1); add(j+n+n+n,i+n,0);\n\t\t\t}\n\t\t}\n\t}\n       \n}\nbool check(int mid){\n\trebuild(mid);\n\treturn Dinic()==mid*n;\n}\nint main(){\n\tn=read(),k=read();\n\ts=0,t=4*n+1;\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=n;j++){\n\t\t\tcin>>choice[i][j];\n\t\t}\n\t}\n\tint l=0,r=n,mid,ans=0;\n\twhile(l<=r){\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid)) l=mid+1,ans=mid;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1647422609,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P3153 [CQOI2009]\u8df3\u821e \u9898\u89e3"
    },
    {
        "content": "~~\u6211\u53c8\u662f\u51b2\u7740\u7f51\u7edc\u6d41\u6765\u7684~~    \n\n\u9996\u5148\u68b3\u7406\u4e00\u4e0b\u8fd9\u9053\u9898\uff0c\u5bf9\u8fd9\u9053\u9898\u6709\u4e86\u4e2a\u5370\u8c61\uff1a\u7ed9\u4e86\u4f60\u4e00\u4e9b\u9650\u5236\u7136\u540e\u8ba9\u4f60\u6c42\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u7684\u6700\u5927\u503c\u3002    \n\n\u6b38\uff0c\u611f\u89c9\u662f\u6700\u5927\u6d41\u3002    \n\n\u63a5\u7740\u5c31\u5f00\u59cb\u68b3\u7406\u6761\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e24\u6761\uff1a    \n\n- \u4e24\u4e24\u4e4b\u95f4\u53ea\u80fd\u8df3\u4e00\u6b21\n- \u6bcf\u4eba\u6700\u591a\u548c\u4e0d\u559c\u6b22\u7684\u4eba\u8df3 $k$ \u6b21    \n\n\u7167\u7740\u6700\u5927\u6d41\u753b\u846b\u82a6\uff0c\u5148\u7cca\u4e86\u4e2a\u6700\u5927\u6d41\u56fe\u7684\u6837\u5b50\u8bd5\u7740\u6c42\u4e86\u4e00\u4e0b\u6700\u5927\u6d41\u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u548c\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u554a\u2026\u2026\u53c8\u60f3\u4e86\u60f3\u53d1\u73b0\u6211\u4eec\u5176\u5b9e\u6c42\u7684\u662f\u4e00\u4e2a\u6d41\u7684\u6700\u5c11\u7684\u4eba\u6700\u591a\u53ef\u4ee5\u6d41\u591a\u5c11\uff0c\u73b0\u5728\u5374\u53ea\u80fd\u627e\u5230\u6240\u6709\u4eba\u6700\u591a\u53ef\u4ee5\u6d41\u591a\u5c11\u2026\u2026    \n\n\u6709\u4ebf\u70b9\u61f5\uff0c\u5f00\u59cb\u601d\u8003\u8fd9\u4e2a\u6700\u5927\u6d41\u7684\u503c\u53ef\u80fd\u4f1a\u548c\u6211\u4eec\u7684\u7b54\u6848\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u53d1\u73b0\u4e86\u7b54\u6848\u7684\u5355\u8c03\u6027\uff0c\u8111\u5b50\u91cc\u77ac\u95f4\u5c31\u60f3\u5230\u4e86\u4e8c\u5206\u7b54\u6848\uff0c\u800c\u6211\u4eec\u5224\u65ad\u5f53\u524d\u7b54\u6848\u662f\u5426\u5408\u6cd5\u4e5f\u5c31\u662f\u5224\u5f53\u524d\u662f\u5426\u80fd\u8df3 $ans$ \u652f\u821e\u7684\u8bdd\uff0c\u6211\u4eec\u76f4\u63a5\u5efa\u4e00\u4e2a $S$ \uff0c\u5411\u6bcf\u4e2a\u7537\u751f\u8fde\u4e00\u6761\u5bb9\u91cf $ans$ \u7684\u8fb9\uff0c\u5982\u679c\u6700\u540e\u8fd8\u80fd\u6ee1\u6d41\uff0c\u8fd9\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u5bf9\u4e8e\u5973\u751f\u5c31\u76f4\u63a5\u5411 $T$ \u8fde\u4e5f\u5c31\u662f\u5982\u679c\u6b64\u65f6 $ans \\times n = F$ \uff0c\u521a\u597d\u4e5f\u548c\u6700\u5927\u6d41\u7684\u503c\u6302\u4e0a\u4e86\u52fe\uff01    \n\n\u627e\u5230\u4e86\u6bd4\u8f83\u6b63\u786e\u7684\u601d\u8def\uff0c\u63a5\u7740\u5c31\u662f\u601d\u8003\u6bd4\u8f83\u68d8\u624b\u7684\u6d41\u91cf\u9650\u5236\uff0c\u9996\u5148\u6ee1\u6d41\u7684\u60c5\u51b5\u4e0d\u80fd\u52a8\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u8981\u6709\u4e00\u4e2a $k$ \u6b21\u7684\u9650\u5236\u7684\u8bdd\uff0c\u5c31\u53ea\u80fd\u62c6\u6210\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u79cd\u70b9\u4e86\uff0c\u539f\u672c\u8fde\u5411 $S$ \u548c $T$ \u7684\u8fb9\u5c31\u63a5\u5230\u559c\u6b22\u70b9\u4e0a\u9762\uff0c\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u7537\u5973\u751f\u800c\u8a00\uff0c\u90fd\u7531\u559c\u6b22\u70b9\u5411\u4e0d\u559c\u6b22\u70b9\u8fde\u4e00\u4e2a\u5bb9\u91cf\u4e3a $k$ \u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6211\u4eec\u6ca1\u6539\u53d8\u6ee1\u6d41\u60c5\u51b5\u5e76\u4e14\u9650\u5236\u4e86 $k$ \u3002\n\n\u5bf9\u4e8e\u7537\u5973\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u5982\u679c\u4e24\u4eba\u4e92\u76f8~~\u7231\u6155~~\uff0c\u5c31\u76f4\u63a5\u5c06\u7537\u751f\u4ee3\u8868\u7740\u559c\u6b22\u7684\u70b9\u5411\u5973\u751f\u4ee3\u8868\u7740\u559c\u6b22\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff1b\u76f8\u53cd\uff0c\u5c31\u5c06\u7537\u751f\u4ee3\u8868\u7740\u4e0d\u559c\u6b22\u7684\u70b9\u5411\u5973\u751f\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002     \n\n\u7136\u540e\u5c31\u662f\u5b9e\u73b0\u7684\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u6ce8\u610f\u4e00\u4e0b\u6e05\u7a7a\u6570\u7ec4\u548c\u5efa\u8fb9\u522b\u5199\u9519\u2026\u2026    \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int Len = 50 * 50 * 5 + 5,Inf = 1e9;\nint n,k,head[Len],cnt = 1,cur[Len],s,t,N,Ans,dep[Len],ans;\nstruct node\n{\n\tint next,to,w;\n}edge[Len << 1];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w;\n\thead[from] = cnt;\n}\nint BFS()\n{\n\tqueue<int> q;\n\tmemset(dep , 0 , sizeof dep);\n\tq.push(s);dep[s] = 1;cur[s] = head[s];\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front() ; q.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(!dep[to] && edge[e].w)\n\t\t\t{\n\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tif(to == t) return dep[to];\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int u,int In)\n{\n\tif(u == t) return In;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(edge[e].w && dep[to] == dep[u] + 1)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res;\n\t\t}\n\t}\n\treturn (!Out) ? dep[u] = 0 : Out;\n}\nchar ss[55][55];\nint Lclone(int x){return (x << 1) - 1;}\nint Dclone(int x){return x << 1;}\nbool check(int res)\n{\n\tmemset(head , 0 , sizeof head) ; cnt = 1;\n\tans = 0;\n\tint num = n << 1;\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tadd(s , Lclone(i) , res) , add(Lclone(i) , s , 0);//s -> i : res\n\t\tadd(Lclone(i) , Dclone(i) , k) , add(Dclone(i) , Lclone(i) , 0);//Like -> Dislike: k\n\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tadd(num + Lclone(i) , t , res) , add(t , num + Lclone(i) , 0);//num + Lclone(i) -> t : res\n\t\tadd(num + Dclone(i) , num + Lclone(i) , k) , add(num + Lclone(i) , num + Dclone(i) , 0);\n\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= n ; j ++)\n\t\t{\n\t\t\tif(ss[i][j] == 'Y') add(Lclone(i) , num + Lclone(j) , 1) , add(num + Lclone(j) , Lclone(i) , 0);\n\t\t\telse add(Dclone(i) , num + Dclone(j) , 1) , add(num + Dclone(j) , Dclone(i) , 0); \n\t\t}\n\twhile(BFS()) ans += dfs(s , Inf);\n\tif(ans == res * n) return true;\n\treturn false;\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&k);\n\ts = 0 , t = (n << 2) + 1;\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%s\",ss[i] + 1);\n\tint l = 0 , r = n;\n\twhile(l <= r)\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid)) l = mid + 1 , Ans = mid;\n\t\telse r = mid - 1;\n\t}\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```",
        "postTime": 1608643812,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3153 \u3010[CQOI2009]\u8df3\u821e\u3011"
    },
    {
        "content": "\u5206\u6790\uff1a\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u76f4\u63a5\u6c42\u7b54\u6848\u5e76\u4e0d\u5bb9\u6613\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u7b54\u6848m\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u53ef\u884c\u5462\uff1f\u7528\u7f51\u7edc\u6d41\u3002\n\n\u6211\u4eec\u7528Ai\u8868\u793a\u7b2ci\u4e2a\u7537\u751f\uff0cBi\u8868\u793a\u7b2ci\u4e2a\u5973\u751f\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u7537\u751f\u548c\u5973\u751f\u90fd\u590d\u5236\u4e00\u904d\uff0cAi\u590d\u5236\u4e3aai,Bi\u590d\u5236\u4e3abi\u3002\n\n\u5982\u679cAi\u548cBj\u76f8\u4e92\u559c\u6b22\uff0c\u5219Ai\u5411Bi\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\n\n\u5982\u679cAi\u548cBj\u4e0d\u76f8\u4e92\u559c\u6b22\uff0c\u5219ai\u5411bi\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\n\n\u7136\u540eAi\u5411ai\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ak\u7684\u8fb9\uff0cbi\u5411Bi\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ak\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8868\u793a\u6700\u591a\u53ea\u613f\u610f\u548c\u4e0d\u559c\u6b22\u7684\u4eba\u8df3k\u6b21\u821e\u3002\n\n\u63a5\u7740\uff0c\u5efa\u7acb\u6e90\u70b9s\u6c47\u70b9t\uff0cs\u5411A\u8fde\u5bb9\u91cf\u4e3am\u7684\u8fb9\uff0cB\u5411t\u8fde\u5bb9\u91cf\u4e3am\u7684\u8fb9\u3002\n\n\u90a3\u4e48\uff0c\u8dd1\u6700\u5927\u6d41\u4e4b\u540e\u7684\u6b8b\u4f59\u7f51\u7edc\u4e2d\uff0cs\u5411A\u7684n\u6761\u8fb9\u5168\u4e3a0\u7684\u8bdd\u5c31\u8868\u793a\u7b54\u6848\u53ef\u884c\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u884c\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n\nusing namespace std;\n\nint e[1001],d[1001],f[1001],x;\nint n,k,a[1001][1001],b[1001][1001];\n\nbool check(int o)\n{\n    for(int i=1;i<=4*n+1;i++)\n        for(int j=1;j<=4*n+1;j++) a[i][j]=b[i][j];   \n    for(int i=1;i<=n;i++) a[0][i]=a[i+2*n][1+4*n]=o;\n    memset(e,0,sizeof(e));\n    memset(d,0,sizeof(d));\n    memset(f,0,sizeof(f));\n    f[0]=4*n+2;\n    x=0;\n    e[0]=0;\n    while(d[0]<4*n+2)\n    {\n        bool bo=false;\n        for(int i=0;i<=4*n+1;i++)\n            if((a[x][i]>0)&&(d[i]+1==d[x]))\n            {\n                e[i]=x;\n                x=i;\n                bo=true;\n                break;\n            }\n        if(bo)\n        {\n            if(x==1+4*n)\n            {\n                int mi=1e9;\n                while(x!=0)\n                {\n                    mi=min(mi,a[e[x]][x]);\n                    x=e[x];\n                }\n                x=4*n+1;\n                while(x!=0)\n                {\n                    a[e[x]][x]-=mi;\n                    a[x][e[x]]+=mi;\n                    x=e[x];\n                }\n            }\n            continue;\n        }\n        int mi=4*n+1;\n        for(int i=0;i<=4*n+1;i++)\n            if(a[x][i]) mi=min(mi,d[i]);\n        f[d[x]]--;\n        if(f[d[x]]==0) break;\n        d[x]=mi+1;\n        f[d[x]]++;\n        x=e[x];\n    }\n    for(int i=1;i<=n;i++)\n        if(a[0][i]!=0) return false;\n    return true;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    memset(a,0,sizeof(a));\n    for(int i=1;i<=n;i++)\n    {\n        b[i][i+n]=b[i+3*n][i+2*n]=k;\n        char ch[100];\n        scanf(\"%s\",ch);\n        for(int j=1;j<=n;j++)\n            if(ch[j-1]=='Y') \n                b[i][j+2*n]=1;else b[i+n][j+3*n]=1;\n    }\n    int l=0,r=n;\n    while(l<r)\n    {\n        int mid=(l+r+1)/2;\n        if(check(mid)) l=mid;else r=mid-1;\n    }\n    cout<<l<<endl;\n    return 0;\n}\n```",
        "postTime": 1526952860,
        "uid": 79044,
        "name": "\u7834\u58c1\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3153 \u3010[CQOI2009]\u8df3\u821e\u3011"
    },
    {
        "content": "\u5783\u573e\u7f51\u7edc\u6d411A\uff0c\u600e\u4e48\u80fd\u6ca1\u6709\u9898\u89e3\uff1f\n\n**\u589e\u52a0\u8d85\u7ea7\u6e90\u6c47+\u5206\u88c2\u70b9+\u6700\u5927\u6d41+\u4e8c\u5206**\u3002\n\n###\u5206\u6790\uff1a\n\n**\u7537\uff0c\u5973\u5404\u5206\u88c2\u6210\u559c\u6b22yes\u548c\u4e0d\u559c\u6b22no\u4e24\u4e2a\u70b9**\n\n\u82e5\u7537\u5973\u662fcp\uff0c\u5219\u6bcf\u4e2a\u7537yes-->\u6bcf\u4e2a\u5973yes \u5bb9\u91cf1\n\n\u82e5\u7537\u5973\u4e0d\u662fcp\uff0c\u5219\u6bcf\u4e2a\u7537no-->\u6bcf\u4e2a\u5973no \u5bb9\u91cf1\n\n**\u63a7\u5236\uff1a\u6bcf\u4e2a\u7537\u5b69\u90fd\u4e0d\u4f1a\u548c\u540c\u4e00\u4e2a\u5973\u5b69\u8df3\u4e24\u9996\uff08\u6216\u66f4\u591a\uff09\u821e\u66f2\u3002**\n\n\u6bcf\u4e2a\u7537yes-->\u81ea\u5df1no \u5bb9\u91cfk\n\n\u6bcf\u4e2a\u5973no-->\u81ea\u5df1yes \u5bb9\u91cfk\n\n**\u63a7\u5236\uff1a\u6bcf\u4e2a\u7537\u5b69\u6700\u591a\u53ea\u613f\u610f\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u5973\u5b69\u8df3\u821e\uff0c\u800c\u6bcf\u4e2a\u5973\u5b69\u4e5f\u6700\u591a\u53ea\u613f\u610f\u548ck\u4e2a\u4e0d\u559c\u6b22\u7684\u7537\u5b69\u8df3\u821e\u3002**\n\n\u6700\u540e\u4e8c\u5206x\uff08\u66b4\u529b\u679a\u4e3eok\uff0c\u6570\u636e\u5f31\u7206\u4e86\uff01\uff09\n\nS--->\u6bcf\u4e2a\u7537yes \u5bb9\u91cfx\n\n\u6bcf\u4e2a\u5973yes--->T \u5bb9\u91cfx\n\n\u82e5\u6700\u5927\u6d41==x\\*\u4eba\u6570\uff08\u5373\u6ee1\u6d41\uff09 \u5219\u6210\u7acb\u3002\n\n**\u63a7\u5236\uff1a\u6bcf\u9996\u66f2\u5b50\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u7537\u5b69\u548c\u5973\u5b69\u6070\u597d\u914d\u6210n\u5bf9\u8df3\u4ea4\u8c0a\u821e\u3002**\n\n\\_\u3010ISAP\u3011\\_\n\n\n \n \n \n \n \n \n \n \n     \n     \n```cpp\n#include<iostream>\n#include<fstream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<vector>\n#include<queue>\n#include<deque>\n#include<utility>\n#include<map>\n#include<set>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<functional>\n#include<sstream>\n#include<cstring>\n#include<bitset>\n#include<stack>\nusing namespace std;\nint n,m,s,t,cnt,x,y,z,k,ans;\nchar ss[55][55];\nstruct sdt\n{\n    int cap,flow,u,v;\n}e[200005];\nint nxt[200005],fir[10005],d[10005],par[10005],num[10005],cur[10005];\nbool vis[10005];\nint read()\n{\n    int x=0;char c=getchar();\n    while(c<48||c>57)c=getchar();\n    while(c>47&&c<58)x*=10,x+=c-48,c=getchar();\n    return x;\n}\nvoid add(int u,int v,int cp,int fl)\n{\n    e[++cnt].u=u;e[cnt].v=v;e[cnt].cap=cp;e[cnt].flow=fl;\n    nxt[cnt]=fir[u];fir[u]=cnt;\n}\nvoid bfs()\n{\n    memset(vis,0,sizeof(vis));\n    memset(d,0,sizeof(d));\n    queue<int>q;\n    d[t]=0;\n    vis[t]=1;\n    q.push(t);\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        for(int i=fir[k];i;i=nxt[i])\n        {\n            if(!vis[e[i].v] && e[i].cap==0)\n            {\n                vis[e[i].v]=1;\n                d[e[i].v]=d[k]+1;\n                q.push(e[i].v);\n            }\n        }\n    }\n}\nint agument()\n{\n    int p=t;\n    int ans=2147483647;\n    while(p!=s)\n    {\n        ans=min(ans,e[par[p]].cap-e[par[p]].flow);\n        p=e[par[p]].u;\n    }\n    p=t;\n    while(p!=s)\n    {\n        e[par[p]].flow+=ans;\n        e[par[p]^1].flow-=ans;\n        p=e[par[p]].u;\n    }\n    return ans;\n}\nint isap()\n{\n    memset(num,0,sizeof(num));\n    int flow=0;\n    for(int i=1;i<=n;i++)\n    {\n        num[d[i]]++;\n        cur[i]=fir[i];\n    }\n    int p=s;\n    while(d[s]<n)\n    {\n        if(p==t)\n        {\n            flow+=agument();\n            p=s;\n        }\n        bool ok=0;\n        for(int i=cur[p];i;i=nxt[i])\n        {\n            if(e[i].cap>e[i].flow && d[p]==d[e[i].v]+1)\n            { \n                ok=1; \n                par[e[i].v]=i; \n                cur[p]=i; \n                p=e[i].v; \n                break; \n            } \n        }\n        if(!ok)\n        {\n            int mn=n-1;\n            for(int i=fir[p];i;i=nxt[i])\n            {\n                if(e[i].cap>e[i].flow)mn=min(mn,d[e[i].v]);\n            }\n            if(--num[d[p]]==0)break;\n            num[d[p]=mn+1]++;\n            cur[p]=fir[p];\n            if(p!=s)p=e[par[p]].u;\n        }\n    }\n    return flow;\n}\nvoid build(int yhy)\n{\n    memset(nxt,0,sizeof(nxt));\n    memset(fir,0,sizeof(fir));\n    cnt=1;\n    for(int i=1;i<=m;i++)\n    {\n        add(1,1+i,yhy,0);\n        add(1+i,1,0,0);\n        add(1+2*m+i,t,yhy,0);\n        add(t,1+2*m+i,0,0);\n        for(int j=0;j<m;j++)\n        {\n            if(ss[i][j]=='Y')\n            {\n                add(1+i,1+2*m+j+1,1,0);\n                add(1+2*m+j+1,i+1,0,0);\n            }\n            else\n            {\n                add(1+m+i,1+3*m+j+1,1,0);\n                add(1+3*m+j+1,1+i+m,0,0);\n            }\n        }\n        add(1+i,1+m+i,k,0);\n        add(1+m+i,1+i,0,0);\n        add(1+3*m+i,1+2*m+i,k,0);\n        add(1+2*m+i,1+3*m+i,0,0);\n    }\n}\nint main()\n{\n    m=read();\n    k=read();\n    n=2+4*m;\n    s=1;\n    t=2+4*m;\n    for(int i=1;i<=m;i++)\n    {\n        for(int j=0;j<m;j++)\n        {\n            cin>>ss[i][j];\n        }\n    }\n    int l=0,r=m;\n    while(l<=r)\n    {\n        int mid=(l+r)/2;\n        build(mid);\n        bfs();\n        if(isap()==mid*m)\n        {\n            l=mid+1;\n            ans=mid;\n        }\n        else\n        {\n            r=mid-1;\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1493046517,
        "uid": 16817,
        "name": "winmt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3153 \u3010[CQOI2009]DANCE\u8df3\u821e\u3011"
    }
]