[
    {
        "content": "reference\uff1a eJOI2021 Day1 Editorial\n\n$n = 1$ \u90e8\u5206\u5206\u662f\u672c\u9898\u5173\u5065\u3002\n\n\u53ef\u4ee5\u731c\u6d4b\u6b64\u65f6\u53ef\u884c\u7684\u6700\u4f18\u89e3\u662f $2^m - 1$\uff0c\u8003\u8651\u6784\u9020\u3002\n\n- \u5982\u679c $m = 2^k (k \\in \\mathbb N_+)$\uff0c\u90a3\u4e48\u53ef\u4ee5\u6784\u9020\u51fa $\\forall 0 \\le i \\le n - 1, a_i \\gets i \\oplus (i >> 1)$\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u683c\u96f7\u7801\uff0c\u5176\u4e00\u6027\u8d28\u5c31\u662f\u53ef\u4efb\u610f `rotate`\u3002\n\n- \u5426\u5219\u5c06 $m$ \u62c6\u6210 $2^{k_1} + 2^{k_2} + \\cdots +2^{k_p},(k_1\\gt k_2 \\gt \\cdots \\gt k_p)$\uff0c\u5355\u4e2a $2^{k_i}$ \u6309\u7167\u4e0a\u8ff0\u505a\u6cd5\u6784\u9020\uff0c\u540c\u65f6\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8981\u52a0\u4e0a $2 ^ {k_1} + \\cdots + 2^{k_{i-1}}$\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u3002\u63a5\u4e0b\u6765\u9700\u8981\u5408\u5e76\u3002\n\n- \u4ee4 $i = p \\to 2$\uff0c\u5f53\u524d\u5408\u5e76\u5230 $2^{k_i}$ \u548c $2^{k_{i-1}}$\u3002\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c$2^{k_{i-1}}$\u4e2d\u4e00\u5b9a\u6709\u4e00\u4e2a\u6570\u4e0e $2^{k_i}$ \u7b2c\u4e00\u4e2a\u6570\u6ee1\u8db3\u6761\u4ef6\uff0c\u6240\u4ee5\u5c06 $2^{k_{i-1}}$ \u4e2d\u90a3\u4e2a\u6570 `rotate` \u5230\u672b\u5c3e\u5373\u53ef\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u6837\u6784\u9020\u662f\u5bf9\u7684\u3002\n\n- \u79f0\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6784\u9020\u51fa\u6765\u7684\u5e8f\u5217\u4e3a `CompactGrayCode`\u3002\n\n\u5bf9\u4e8e $n \\gt 1$ \u65f6\uff0c\u5206\u522b\u6784\u9020 $n,m$ \u6240\u5bf9\u5e94\u7684 `CompactGrayCode`\uff0c\u8bb0\u4e3a `CGCn` \u548c `CGCm`\u3002\u5bf9\u4e8e\u6bcf\u4e2a $a_{i, j}$\uff0c\u90fd\u4ee5\u4e8c\u8fdb\u5236\u4e0b\u7684\u67d0\u79cd\u65b9\u5f0f\u62fc\u63a5 `CGCn[i]` \u548c `CGCm[j]`\uff0c\u5f97\u5230\u4e00\u7ec4\u53ef\u884c\u89e3\u3002\u8fd9\u6837\u7684\u6b63\u786e\u6027\u663e\u7136\uff0c\u95ee\u9898\u4e5f\u5c31\u53d8\u6210\u4e86\u627e\u5230\u6700\u5c0f\u4ee3\u4ef7\u7684\u62fc\u63a5\u65b9\u5f0f\u3002\n\n\u8fd9\u91cc\u7528 $n = m = 6$ \u6765\u52a0\u4ee5\u8bf4\u660e\u3002\u9996\u5148\uff0c`CGCn` \u548c `CGCm` \u5747\u4e3a\uff1a\n\n$$5 = 101_{2}, 1 = 001_{2}, 3 = 011_{2}, 2 = 010_{2}, 0 = 000_{2}, 4 = 100_{2} $$\n\n\u5982\u679c\u9009\u62e9\u987a\u6b21\u62fc\u63a5\uff0c\u90a3\u4e48\u77e9\u9635\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t372iktb.png)\n\n\u53ef\u4ee5\u53d1\u73b0\u6700\u5927\u503c\u4e3a $45 = \\textcolor{red}{101}\\textcolor{blue}{101}_2$\u3002\n\n\u4f46\u5982\u679c\u4ee5\u4e0b\u56fe\u62fc\u63a5\uff0c\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/kuubsmro.png)\n\n\u6700\u5927\u503c\u4ec5\u4e3a $43 = \\textcolor{red}{10}\\textcolor{blue}{10}\\textcolor{red}1\\textcolor{blue}{1}_2$\n\n\u53d1\u73b0\u6700\u5927\u503c\u53ea\u8ddf `CGCn` \u548c `CGCm` \u4e2d\u7684\u6700\u5927\u503c\u6709\u5173\uff0c\u4e8e\u662f\u53ef\u4ee5 `dp` \u6c42\u89e3\u3002\n\n$f_{i, j}$ \u8868\u793a\u53d6\u4e86 `CGCn` \u6700\u5927\u503c\u7684\u524d $i$ \u4f4d\uff0c`CGCm` \u6700\u5927\u503c\u7684\u524d $j$ \u4f4d\uff0c\u62fc\u63a5\u6210\u7684\u6700\u5c0f\u503c\u3002\n\n`dp` \u540e\u6784\u9020\u65b9\u6848\u662f\u5bb9\u6613\u7684\u3002\n\n\u53c2\u8003\u5b9e\u73b0\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nsigned main () {\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n\n  int n, m;\n  std::cin >> n >> m;\n\n  std::vector<std::vector<int>> Gray(11);\n  for (int i = 0; i <= 10; ++i) {\n    for (int j = 0; j < (1 << i); ++j) {\n      Gray[i].emplace_back(j ^ (j >> 1));\n    }\n  }\n\n  auto GetCompactGray = [&](int x) {\n    std::vector<std::vector<int>> tmp;\n    for (int i = 10; ~i; --i) {\n      if (x >> i & 1) {\n        tmp.emplace_back(Gray[i]);\n      }\n    }\n\n    int lim = 0;\n    for (auto &i : tmp) {\n      for (auto &j : i) {\n        j += lim;\n      }\n      lim += i.size();\n    }\n\n    for (int i = (int)tmp.size() - 1; i; --i) {\n      auto &l = tmp[i - 1], &r = tmp[i];\n      for (int j = 0; j < (int)l.size(); ++j) {\n        if (__builtin_popcount((l[j] ^ r[0])) == 1) {\n          rotate(l.begin(), l.begin() + j + 1, l.end());\n          break;\n        }\n      }\n    }\n\n    std::vector<int> res;\n    for (auto &i : tmp) {\n      res.insert(res.end(), i.begin(), i.end());\n    }\n\n    return res;\n  };\n\n  auto CompactGrayn = GetCompactGray(n--), CompactGraym = GetCompactGray(m--);\n  int x = (!n) ? 1 : std::__lg(n) + 1, y = (!m) ? 1 : std::__lg(m) + 1, all = x + y - 1;\n  std::vector<std::vector<int>> f(x + 1, std::vector<int>(y + 1, (1 << 11))), pre(f);\n\n  f[0][0] = 0;\n  for (int i = 1; i <= x; ++i) {\n    f[i][0] = f[i - 1][0] | ((n >> (x - i) & 1) << (all - i + 1));\n    pre[i][0] = 1;\n  }\n  for (int i = 1; i <= y; ++i) {\n    f[0][i] = f[0][i - 1] | ((m >> (y - i) & 1) << (all - i + 1));\n    pre[0][i] = 2;\n  }\n  for (int i = 1; i <= x; ++i) {\n    for (int j = 1; j <= y; ++j) {\n      int I = f[i - 1][j] | ((n >> (x - i) & 1) << (all - i - j + 1)), J = f[i][j - 1] | ((m >> (y - j) & 1) << (all - i - j + 1));\n      if (I < J) {\n        f[i][j] = I;\n        pre[i][j] = 1;\n      } else {\n        f[i][j] = J;\n        pre[i][j] = 2;\n      }\n    }\n  }\n\n  std::vector<int> from(x + y);\n  int now = 0;\n  for (; x || y; ) {\n    from[now++] = pre[x][y];\n    if (pre[x][y] == 1) {\n      --x;\n    } else {\n      --y;\n    }\n  }\n\n  for (int i = 0; i <= n; ++i) {\n    for (int j = 0; j <= m; ++j) {\n      //merge CompactGrayn[i] and CompactGraym[j]\n      int res = 0, x = CompactGrayn[i], y = CompactGraym[j];\n      for (int k = 0; k < now; ++k) {\n        if (from[k] == 1) {\n          res |= (x & 1) << k;\n          x >>= 1;\n        } else {\n          res |= (y & 1) << k;\n          y >>= 1;\n        }\n      }\n      std::cout << res << \" \\n\"[j == m];\n    }\n  }\n}\n```",
        "postTime": 1667866952,
        "uid": 175456,
        "name": "Licykoc",
        "ccfLevel": 0,
        "title": "eJOI2021 Xcopy \u9898\u89e3"
    }
]