[
    {
        "content": "\u8868\u793aynoi\u7684\u5206\u5757\u9898\u4e0d\u52a0\u526a\u679d\u662f\u7edd\u5bf9\u8fc7\u4e0d\u53bb\u7684\u2026\u2026\n\n~~\u6211\u8fde4680\u7684\u526a\u679d\u90fd\u526a\u8fc7\u8fd8\u4f1a\u6002\u8fd9\u9898\uff1f~~\n\n__________________\n\n### \u524d\u7f6e\u829d\u58eb:\u7ebf\u6bb5\u6811\n\n\u5176\u5b9e\u53ea\u8981\u4f1a\u6309\u7167\u9898\u610f\u6a21\u62df\u5efa\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\u2026\u2026\n\n~~\u6211\u5e73\u5e38\u60ef\u7528\u7684\u662f\u5de6\u5f00\u53f3\u95ed\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u8fc7\u8fd9\u9898\u7ed9\u51fa\u7684\u7ebf\u6bb5\u6811\u662f\u95ed\u533a\u95f4\u7684\u7ebf\u6bb5\u6811~~\n\n\n## \u672c\u9898\u9898\u89e3\n\n\u597d\u7684\u6211\u4eec\u4e00\u770b\u8fd9\u9898\u53d1\u73b0\u6211\u4eec\u4e0d\u518d\u7ef4\u62a4\u5e8f\u5217\u800c\u662f\u5728\u7ef4\u62a4\u7ebf\u6bb5\u6811\u4e86\u2026\u2026\n\n\u90a3\u4e48\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\u7ebf\u6bb5\u6811\u6709\u4ec0\u4e48\u4f18\u7f8e\u6027\u8d28\u53ef\u4ee5\u8ba9\u6211\u4eec\u5229\u7528\u5462\uff1f\n\n\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u5e76\u6ca1\u6709\u2026\u2026\n\n\u770b\u8d77\u6765\u6211\u4eec\u7684\u601d\u8003\u9677\u5165\u4e86\u50f5\u5c40\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5316\u7248\u672c\uff0c\u5982\u679c\u6211\u4eec\u7ef4\u62a4\u7684\u4e0d\u662f\u7ebf\u6bb5\u6811\u800c\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u7684\u64cd\u4f5c\u4f1a\u53d8\u6210\u4ec0\u4e48\u5462\uff1f\n\n1.\u533a\u95f4\u52a0\n\n2.\u8be2\u95ee\u533a\u95f4\u91cc\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u6bd4x\u5c0f\n\n\u8fd9\u597d\u50cf\u662f\u4e2a\u5206\u5757\u7684\u7ecf\u5178\u95ee\u9898\u554a\u2026\u2026\u6211\u4eec\u5c06\u5e8f\u5217\u5206\u6210$O(\\sqrt{n})$\u5757\uff0c\u7136\u540e\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u5757\u4e2d\u6570\u5b57\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4ee5\u53ca\u4e00\u4e2a\u52a0\u6cd5\u6807\u8bb0\uff0c\u6211\u4eec\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u7684\u91cd\u6784\u96f6\u6563\u7684\u5757\uff0c\u5bf9\u4e8e\u6574\u5757\u6211\u4eec\u76f4\u63a5\u6253\u6807\u8bb0\n\n\u7136\u540e\u6211\u4eec\u8be2\u95ee\u7684\u65f6\u5019\u8fb9\u89d2\u66b4\u529b\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6574\u5757\u76f4\u63a5\u4e8c\u5206\u5c31\u884c\u4e86\n\n\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(NlogN\\sqrt{N})$\u7684\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5e76\u4e0d\u80fd\u642c\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u533a\u95f4+x\u7684\u65f6\u5019\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4f1a\u53d8\u5316$len\u00d7x$\u5176\u4e2d$len$\u4e3a\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u957f\u5ea6\uff0c\u5373\u4f7f\u6211\u4eec\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684size\u5206\u7c7b\u8ba8\u8bba\uff0c\u60f3\u8981\u5957\u7528\u521a\u624d\u7684\u5206\u5757\u7b97\u6cd5\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u533a\u95f4\u52a0\u6cd5\u5c31\u80fd\u591f\u7834\u574f\u6211\u4eec\u7684\u6709\u5e8f\u6027\u8d28\n\n\u4e0d\u8fc7\u65e2\u7136\u63d0\u5230\u7684\u6bcf\u4e2a\u8282\u70b9\u7684len\u503c\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u6027\u8d28\n\n\u5f53\u6211\u4eec\u533a\u95f4\u7684\u957f\u5ea6\u662f2\u7684\u6574\u6b21\u5e42\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u53d1\u73b0len\u7684\u53d6\u503c\u53ea\u6709log\u79cd\u2026\u2026\u8fd9\u4e2a\u5f53\u7136\u5341\u5206\u663e\u7136\n\n\u90a3\u4e48\u8ba9\u6211\u4eec\u628a\u76ee\u5149\u653e\u5230\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u80a5\u80a0\u6709\u8da3\u7684\u6027\u8d28\uff0c\u901a\u8fc7\u6253\u8868\u53ef\u4ee5\u5f97\u5230\uff0c\u5728\u7ebf\u6bb5\u6811\u7684\u957f\u5ea6\u5c0f\u4e8e$10^5$\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u6700\u591a\u670933\u79cd(\u5e94\u8be5\u662f\u8fd9\u4e2a\u6570\uff0c\u53ef\u80fd\u7a0d\u6709\u6d6e\u52a8)\u672c\u8d28\u4e0d\u540c\u7684\u8282\u70b9\u957f\u5ea6\n\n\u6240\u4ee5\u770b\u8d77\u6765\u6211\u4eec\u53ef\u4ee5\u628a\u8282\u70b9\u957f\u5ea6\u76f8\u7b49\u7684\u8282\u70b9\u62c9\u51fa\u6765\u770b\u6210\u4e00\u4e2a\u5e8f\u5217\n\n\u8fd9\u6837\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5for\u6bcf\u79cd\u4e0d\u540c\u7684\u533a\u95f4\u957f\u5ea6\u7136\u540e\u53bb\u8dd1\u521a\u624d\u5728\u5e8f\u5217\u4e0a\u7684\u66b4\u529b\u2026\u2026\n\n\u5177\u4f53\u70b9\u6765\u8bb2\u5f53\u6211\u4eec\u6267\u884c\u533a\u95f4$(l,r)$\u52a0x\u7684\u65f6\u5019\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u79cd\u4e0d\u540c\u7684\u8282\u70b9\u957f\u5ea6$len$\uff0c\u6b64\u65f6\u6211\u4eec\u628a\u6240\u6709\u957f\u5ea6\u4e3alen\u7684\u8282\u70b9\u6309\u7167\u5de6\u7aef\u70b9\u6392\u597d\u5e8f(\u5176\u5b9e\u53f3\u7aef\u70b9\u4e5f\u53ef\u4ee5\uff0c\u6bd5\u7adf\u957f\u5ea6\u4e00\u6837\u7684\u8282\u70b9\u4e00\u5b9a\u4e92\u4e0d\u5305\u542b\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u53c8\u4e0d\u5b58\u5728\u76f8\u4ea4\u5173\u7cfb)\u8fd9\u4e9b\u8282\u70b9\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\n\n\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u6bd4\u8f83\u9760\u8fd1$l$\u548c$r$\u7684\u8282\u70b9\u589e\u52a0\u7684\u503c\u4e0d\u662f$len\u00d7x$\u56e0\u4e3al\u548cr\u53ef\u80fd\u6ca1\u6709\u5b8c\u5168\u5305\u542b\u8fd9\u4e2a\u8282\u70b9\uff0c\n\n\u5176\u4ed6\u88ab$(l,r)$\u5b8c\u5168\u5305\u542b\u7684\u8282\u70b9\u7684\u6743\u503c\u4e00\u5b9a\u589e\u52a0\u4e86$len\u00d7x$\uff0c\u6240\u4ee5$(l,r)$\u533a\u95f4$+x$\u5c31\u53d8\u6210\u4e86\u4e24\u4e2a\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\u548c\u4e00\u4e2a\u533a\u95f4\u52a0\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5f53\u7136\u662f\u53ef\u4ee5\u5957\u7528\u6211\u4eec\u5728\u5e8f\u5217\u4e0a\u7684\u5206\u5757\u7b97\u6cd5\u7684\n\n\u800c\u6211\u4eec\u67e5\u8be2\u7684\u65f6\u5019\u5f53\u7136\u4e5f\u53ef\u4ee5\u679a\u4e3e\u8282\u70b9\u7684\u957f\u5ea6\uff0c\u4f9d\u7136\u662f\u96f6\u6563\u7684\u5757\u66b4\u529b\u7136\u540e\u5728\u6574\u5757\u4e0a\u4e8c\u5206\u7b54\u6848\u67e5\u627e\u5c31\u53ef\u4ee5\u4e86\n\n\u770b\u8d77\u6765\u6211\u4eec\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f$O(Nlog^2{n}\\sqrt{N})$\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u5c42\u6700\u591a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u8282\u70b9\u957f\u5ea6\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4e00\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662f\n\n$$\\sum_{i}\\sqrt{\\frac{n}{2^{i}}}(log(n)-i)$$\n\n\u7684\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7a0d\u5fae\u8fd1\u4f3c\u4e00\u4e0b\u4f1a\u53d1\u73b0\u5b83\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662f\n\n$O(\\sqrt{N}logn)$\n\n\u53ea\u662f\u5e38\u6570\u7a0d\u5fae\u5927\u4e86\u51e0\u5708\u800c\u5df2\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u603b\u590d\u6742\u5ea6\u5c31\u662f$O(N\\sqrt{N}logn)$\n\n\n\u8bf4\u7684\u5f88\u6f02\u4eae\u5b9e\u9645\u4e00\u5199\u60a8\u53d1\u73b0\u8fd9\u4e2a\u5206\u5757\u7ec6\u8282\u4e0d\u662f\u4e00\u822c\u7684\u591a\u5e76\u4e14\u5185\u5b58\u5206\u914d\u4e5f\u5341\u5206\u4ee4\u4eba\u5934\u5927\u2026\u2026\n\n\u7b49\u60a8\u7ec8\u4e8e\u8c03\u5b8c140\u884c+\u7684\u4ee3\u7801\u4e4b\u540e\u60a8\u53d1\u73b0\u60a8tle\u4e86\u2026\u2026\n\n\u5982\u679c\u6734\u7d20\u5b9e\u73b0\u4e0a\u8ff0\u7684\u7b97\u6cd5\u663e\u7136\u4e0d\u7b26\u5408ynoi\u7684\u98ce\u683c\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u7ed9\u96f6\u6563\u5757\u7684\u52a0\u7684\u65f6\u5019\u90fd\u662f\u8fd9\u4e2a\u5757\u4e2d\u7684\u4e00\u4e9b\u5143\u7d20+\u4e86va\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u5bf9\u6709\u5e8f\u6027\u4e0d\u53d8\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u800c\u4e0d\u662fsort\u6765\u91cd\u6784\u6574\u4e2a\u5757\uff0c\u8fd9\u6837\u91cd\u6784\u7684\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86$O(n)$\n\n\u5bf9\u4e8e\u5355\u70b9\u4fee\u6539\u6211\u4eec\u66b4\u529b\u7684\u628a\u8fd9\u4e2a\u70b9\u63d2\u5165\u5230\u539f\u6765\u7684\u6709\u5e8f\u6570\u5217\u91cc\u5c31\u884c\u4e86\uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u65adswap\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\u590d\u6742\u5ea6\u4f9d\u7136$O(n)$\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u86c7\u76ae\u7684\u8c03\u4e00\u4e0b\u5757\u957f\u628a\u6211\u4eec\u7684\u590d\u6742\u5ea6\u964d\u81f3$O(N\\sqrt{Nlogn})$\n\n\u6211\u7684\u5783\u573e\u5f52\u5e76\u5e38\u6570\u8fc7\u5927\u4e86\u6240\u4ee5\u6211\u7684\u5757\u957f\u662f\u4e22\u4eba\u7684$1.3\\sqrt{N}$\u5404\u4f4d\u795e\u4ed9\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u5e38\u6570\u5927\u5c0f\u81ea\u884c\u4e09\u5206\u51fa\u6700\u4f18\u5757\u957f\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u4ea4\u4e0a\u53bb\u8fd8\u662ftle\uff0c\u5927\u6982\u5206\u6570\u662f\u572855\u523085\u4e4b\u95f4\n\n\u6211\u4eec\u53d1\u73b0\u8fd8\u9700\u8981\u538b\u69a8\u4e00\u4e9b\u8be2\u95ee\u65b9\u9762\u7684\u590d\u6742\u5ea6\uff0c\u5f88\u9057\u61be\u7684\u662f\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u80fd\u88ab\u7ee7\u7eed\u538b\u69a8\u4e86\u2026\u2026\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u8001\u8001\u5b9e\u5b9e\u7684\u526a\u679d\u597d\u4e86\u2026\u2026\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u526a\u679d\u5c31\u53ef\u4ee5\u8fc7\u4e86\u8fd9\u9898\uff0c\u5224\u65ad\u4e00\u4e0b\u8be2\u95ee\u7684x\u662f\u5426\u5927\u4e8e\u6700\u5927\u503c\u6216\u8005\u5c0f\u4e8e\u6700\u5c0f\u503c\uff0c\u5982\u679c\u4e24\u4e2a\u6761\u4ef6\u6ee1\u8db3\u5176\u4e00\u5c31\u8fd4\u56de0\u6216\u8005\u662f\u5757\u957f\uff0c\u5426\u5219\u6211\u4eec\u5c31\u5927\u529b\u4e8c\u5206\n\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u4e2a\u526a\u679d\u76f8\u5f53\u597d\u4f7f\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9898\u4e86~\n\n~~\u5176\u5b9e\u8fd9\u9898\u601d\u8def\u975e\u5e38\u7b80\u5355\u5c31\u662f\u5b9e\u73b0\u7684\u7ec6\u8282\u5341\u5206\u96be\u53d7~~\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\nusing namespace std;const int N=1e5+10;typedef long long ll;int n;int m;\nnamespace INPUT_SPACE{\n    const int BS=(1<<24)+5;char Buffer[BS],*HD,*TL;\n    char gc() { if(HD==TL) TL=(HD=Buffer)+fread(Buffer,1,BS,stdin);return (HD==TL)?EOF:*HD++; }\n    inline int inn()\n    {\n        int x,ch,sgn=1;while(((ch=gc())<'0'||ch>'9')&&ch!='-');\n        if(ch=='-') sgn=-1,x=0;else x=ch^'0';\n        while((ch=gc())>='0'&&ch<='9') x=(x<<1)+(x<<3)+(ch^'0');\n        return x*sgn;\n    }\n}using INPUT_SPACE::inn;\ntemplate <typename T>//\u8fd9\u91cc\u76f4\u63a5\u7528\u6307\u9488+\u6570\u7ec4\u5206\u914d\u5185\u5b58 \ninline void gm(T* & p,int siz,T* & op){op=p;p=p+siz+1;}\nll* S_t;int* A_t;ll S_bas[15*N];int A_bas[20*N];int q[N];ll* SA;\ninline bool cmp(int x,int y){return SA[x]<SA[y];}\nstruct blk\n{\n    ll* a;int* sr;int* sr1;int siz;ll add;int pl;int pr;\n    inline ll& operator [](const int& x){return a[x];}\n    inline void ih()//\u521d\u59cb\u5316\u5185\u5b58 \n    {\n        gm(S_t,siz,a);gm(A_t,siz,sr);gm(A_t,siz,sr1);\n    \tfor(int i=1;i<=siz;i++)sr[i]=i;\n    }\n    inline void rebuild(int l,int r,int pos)//\u5f52\u5e76 \n    {\n        for(int i=1;i<=siz;i++)a[i]+=add;add=0;\n        int hd1=0;int hd=0;int op=0;\n        for(int i=1;i<=siz;i++)\n            if(sr[i]!=pos)((l<=sr[i]&&sr[i]<=r)?sr[++hd1]:q[++hd])=sr[i];\n        int i=1;int j=1;\n        while(i<=hd1&&j<=hd)sr1[++op]=((a[sr[i]]<a[q[j]])?sr[i++]:q[j++]);\n        while(i<=hd1)sr1[++op]=sr[i++];while(j<=hd)sr1[++op]=q[j++];\n        int ins=1;\n        if(ins<=siz-1&&a[sr1[1]]<a[pos])\n        {\n            int l=1;int r=siz-1;\n            while(l!=r){int mid=(l+r+1)>>1;if(a[sr1[mid]]<a[pos])l=mid;else r=mid-1;}\n            ins=l+1;\n        }for(int i=1;i<ins;i++)sr[i]=sr1[i];sr[ins]=pos;\n        for(int i=ins;i<=siz-1;i++)sr[i+1]=sr1[i];\n    }\n    inline void brurebuild()\n    {for(int i=1;i<=siz;i++)a[i]+=add;add=0;SA=a;sort(sr+1,sr+siz+1,cmp);}\n    inline int qry(ll x)//\u8be2\u95ee \n    {\n        int l=0;int r=siz;x-=add;\n        if(x<a[sr[1]])return 0;if(x>=a[sr[siz]])return siz;\n        while(l!=r){int mid=(l+r+1)>>1;if(a[sr[mid]]<=x)l=mid;else r=mid-1;}\n        return l;\n    }\n    inline int brucalc(int l,int r,ll x)\n    {int ret=0;x-=add;for(int i=l;i<=r;i++)ret+=(a[i]<=x);return ret;}\n    inline void lb_add(ll del){add+=del;} \n}B_bas[N];blk* B_t;\nstruct blk_arr\n{\n    int tot;int* bi;int* bj;blk* bl;int* al;int* ar;int gl[N];int gr[N];int B;\n    inline void ih()//\u5206\u914d\u5185\u5b58 \n    {\n        gm(A_t,tot,bi);gm(A_t,tot,bj);gm(A_t,tot,al);gm(A_t,tot,ar);B=sqrt(tot)*1.3;\n        for(int i=1;i<=tot;i++)bi[i]=(i-1)/B+1;for(int i=1;i<=tot;i++)bj[i]=(i-1)%B+1;\n        gm(B_t,bi[tot],bl);for(int i=1;i<bi[tot];i++)bl[i].siz=B;\n        bl[bi[tot]].siz=((tot%B)?tot%B:B);\n        for(int i=1;i<=bi[tot];i++)bl[i].ih();tot=0;\n    }\n    inline void pb(const int& l,const int& r){al[++tot]=l;ar[tot]=r;}\n    inline void calcg()//\u8fd9\u91cc\u9884\u5904\u7406\u7684\u5b9e\u9645\u8be2\u95ee\u7684\u70b9\u548c\u5e8f\u5217\u4e0a\u7684\u70b9\u7684\u6620\u5c04 \n    {\n        for(int i=1;i<=n+1;i++)gl[i]=0x3f3f3f3f;for(int i=1;i<=tot;i++)gl[ar[i]]=i;\n        for(int i=1;i<=tot;i++)gr[al[i]]=i;for(int i=n;i>=1;i--)gl[i]=min(gl[i],gl[i+1]);\n        for(int i=1;i<=n;i++)gr[i]=max(gr[i],gr[i-1]);\n    }\n    inline bool aju(int& l,int& r)\n    {r=min(r,ar[tot]);l=max(l,al[1]);return (l<=r);}\n    inline void stadd(int l,int r,ll x,ll va)//\u5206\u5404\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u76f8\u5f53\u6076\u5fc3\u5927\u5bb6\u8fd8\u662f\u81ea\u5df1\u9893\u5427 \n    {\n        if(aju(l,r)==false)return;int tl=gl[l];int tr=gr[r];if(tl>tr)return;\n        l=max(l,al[tl]);r=min(r,ar[tr]);\n        if(tl==tr){bl[bi[tl]][bj[tl]]+=(r-l+1)*x;bl[bi[tl]].rebuild(0,0,bj[tl]);return;}\n        int p1=bi[tl];int p2=bi[tr];\n        bl[p1][bj[tl]]+=(ar[tl]-l+1)*x;bl[p2][bj[tr]]+=(r-al[tr]+1)*x;\n        if(p1==p2){for(int i=tl+1;i<tr;i++)bl[p1][bj[i]]+=va;bl[p1].brurebuild();return;}\n        for(int i=tl+1;bi[i]==p1;i++)bl[p1][bj[i]]+=va;\n        for(int i=tr-1;bi[i]==p2;i--)bl[p2][bj[i]]+=va;\n        bl[p1].rebuild(bj[tl]+1,bl[p1].siz,bj[tl]);\n        bl[p2].rebuild(1,bj[tr]-1,bj[tr]);\n        for(int i=p1+1;i<p2;i++)bl[i].lb_add(va);\n    }\n    inline int qry(int l,int r,ll x)//\u8be2\u95ee\u4e5f\u662f\u5206\u60c5\u51b5\u8ba8\u8bba \n    {\n        if(aju(l,r)==false)return 0;int tl=gl[l];int tr=gr[r];\n        if(l>al[tl])tl++;if(r<ar[tr])tr--;if(tl>tr)return 0;\n        int p1=bi[tl];int p2=bi[tr];\n        if(p1==p2){return bl[p1].brucalc(bj[tl],bj[tr],x);}int ret=0;\n        ret=bl[p1].brucalc(bj[tl],bl[p1].siz,x)+bl[p2].brucalc(1,bj[tr],x);\n        for(int i=p1+1;i<p2;i++)ret+=bl[i].qry(x);return ret;\n    }\n}ds[35];int lim[35];int cnt;\ninline void dfs1(int l,int r)//\u9884\u5148\u5206\u914dsize \n{\n    if(l>r)return;int va=r-l+1;int mid=(l+r)>>1;\n    for(int i=1;i<=cnt;i++)if(lim[i]==va){ds[i].tot++;goto ed;}\n    lim[++cnt]=va;ds[cnt].tot++;\n    ed:;if(r!=l){dfs1(l,mid);dfs1(mid+1,r);}\n}\ninline void dfs2(int l,int r)//\u5904\u7406\u533a\u95f4 \n{\n    if(l>r)return;int va=r-l+1;int mid=(l+r)>>1;\n    for(int i=1;i<=cnt;i++)if(lim[i]==va){ds[i].pb(l,r);break;}\n    if(r!=l){dfs2(l,mid);dfs2(mid+1,r);}\n}\nint main()\n{\n//\tfreopen(\"tst.txt\",\"r\",stdin);freopen(\"run.txt\",\"w\",stdout);\n    S_t=S_bas;A_t=A_bas;B_t=B_bas;n=inn();m=inn();\n    dfs1(1,n);for(int i=1;i<=cnt;i++)ds[i].ih();dfs2(1,n);\n    for(int i=1;i<=cnt;i++)ds[i].calcg();\n    for(int rd=1,tp,l,r,x;rd<=m;rd++)\n    {\n        tp=inn();l=inn();r=inn();x=inn();\n        if(tp==1){for(int i=1;i<=cnt;i++)ds[i].stadd(l,r,x,(ll)lim[i]*x);}\n        else \n        {\n            int ret=0;for(int i=1;i<=cnt;i++)ret+=ds[i].qry(l,r,x);\n            printf(\"%d\\n\",ret);\n        }\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1546594657,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5063 \u3010[Ynoi2014]\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3011"
    },
    {
        "content": "- [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5063)\n\n---\n\n### \u95f2\u8bdd\n\n> \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c**\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee**\u3002\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4eba\u4eec\uff0c\u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\u3002\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\uff0c\u6211\u56de\u6765\u4e86\u3002\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c\u76fc\u541b\u52ff\u5fd8\u3002\u2014\u2014\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\uff1a\u73c2\u6735\u8389\n\n- \u7b2c\u4e00\u6b21\u5199 Ynoi \u9898\u89e3\u796d\n\n- \u4e3a\u4ec0\u4e48\u5927\u4f19\u90fd\u8bf4\u8fd9\u9898\u8981\u5361\u5e38\u554a\u3002\u3002\u3002\u6211\u5b8c\u5168\u6ca1\u5361\u5e38\u5c31\u8fc7\u4e86\u554a\u3002\u3002\u3002\n\n---\n\n### \u89e3\u9898\u601d\u8def\n\n- \u9996\u5148\uff0c~~\u56e0\u4e3a\u662f Ynoi\uff0c\u6240\u4ee5~~\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u662f\u4e00\u9053**\u5206\u5757**\u9898\u3002\u4f46\u662f\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u52a0\u64cd\u4f5c\u65f6\uff0c\u7531\u4e8e\u5404\u7ebf\u6bb5\u7684\u957f\u5ea6\u4e0d\u4e00\u5b9a\u76f8\u7b49\u800c\u5bfc\u81f4\u6bcf\u4e2a\u7ebf\u6bb5\u52a0\u4e0a\u7684\u503c\u4e0d\u4e00\u5b9a\u76f8\u7b49\uff0c\u6240\u4ee5\u6ca1\u6cd5\u628a\u6240\u6709\u7ebf\u6bb5\u53d8\u6210\u4e00\u4e2a\u5e8f\u5217\u505a\u5206\u5757\u3002\n\n- \u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u79cd**\u66b4\u529b**\u7684\u505a\u6cd5\uff1a\u5c06\u6240\u6709\u76f8\u540c\u957f\u5ea6\u7684\u7ebf\u6bb5\u653e\u5165\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5bf9\u6bcf\u4e2a\u96c6\u5408\u5185\u90e8\u8fdb\u884c\u5206\u5757\u3002\n\n\t- \u82e5\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u6ee1\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u6bcf\u4e00\u5c42\u7684\u7ebf\u6bb5\u957f\u5ea6\u5fc5\u7136\u90fd\u76f8\u7b49\u3002\u6240\u4ee5\u8fd9\u4e2a\u4e8c\u53c9\u6811\u53ea\u4f1a\u5f62\u6210 $\\log n$ \u4e2a\u96c6\u5408\u3002\n    \n\t- \u5373\u4f7f\u8be5\u7ebf\u6bb5\u6811\u4e0d\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u96c6\u5408\u7684\u6570\u76ee\u4e5f\u4e0d\u4f1a\u589e\u52a0\u5f88\u591a\u3002\n    \n\t\u6240\u4ee5\u8be5\u65b9\u6cd5\u53ef\u884c\u3002\n            \n\n---\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u5b9e\u73b0\u65f6\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n1. **\u5341\u5e74 OI \u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00 LL \u89c1\u7956\u5b97\u3002**\n2. \u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u6ce8\u610f\u4e0d\u8981\u641e\u6df7\u4ee5\u4e0b\u53d8\u91cf\uff1a\n\t- \u6839\u8282\u70b9\u957f\u5ea6 $n$\n\t- \u96c6\u5408\u603b\u6570\n\t- \u6bcf\u4e2a\u96c6\u5408\u5185\u7684\u5143\u7d20\u603b\u6570\n   - \u6bcf\u4e2a\u96c6\u5408\u5185\u6240\u5206\u7684\u5757\u6570\n   \n---\n\n**AC \u4ee3\u7801**\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint mp[100005],tp=0;\nstruct _68th_island\n{\n\tint n,len,S,T;\n\tstruct Nephren\n\t{\n\t\tint l,r,val;\n\t\tbool operator < (const Nephren &x)const\n\t\t{\n\t\t\treturn this->val<x.val;\n\t\t}\n\t}nd[100005];\n\tstruct Ithea\n\t{\n\t\tint L,R,lmax,rmax,tag;\n\t\tbool operator < (const Ithea &x)const\n\t\t{\n\t\t\treturn this->rmax<x.rmax;\n\t\t}\n\t}B[405];\n\tvoid init()\n\t{\n\t\tS=sqrt(n);\n\t\tT=n/S;\n\t\tfor(int i=1;i<=T;i++)B[i].L=B[i-1].R+1,B[i].R=i*S;\n\t\tif(B[T].R<n)T++,B[T].L=B[T-1].R+1,B[T].R=n;\n\t\tfor(int i=1;i<=T;i++)B[i].lmax=nd[B[i].L].l,B[i].rmax=nd[B[i].R].r;\n\t\treturn;\n\t}\n\tvoid mdf(int p,int l,int r,int v)\n\t{\n\t\tfor(int i=B[p].L;i<=B[p].R;i++)\n\t\t{\n\t\t\tif(nd[i].l>r||nd[i].r<l)continue;\n\t\t\tnd[i].val+=(min(nd[i].r,r)-max(nd[i].l,l)+1)*v;\n\t\t}\n\t\tsort(nd+B[p].L,nd+B[p].R+1);\n\t\treturn;\n\t}\n\tint qry(int p,bool all,int l,int r,int v)\n\t{\n\t\tif(all)return upper_bound(nd+B[p].L,nd+B[p].R+1,(Nephren){-1,-1,v-B[p].tag})-nd-B[p].L;\n\t\tint res=0;\n\t\tfor(int i=B[p].L;i<=B[p].R;i++)res+=(l<=nd[i].l&&nd[i].r<=r&&nd[i].val+B[p].tag<=v);\n\t\treturn res;\n\t}\n\tvoid modify(int l,int r,int v)\n\t{\n\t\tint i=lower_bound(B+1,B+T+1,(Ithea){-1,-1,-1,l,-1})-B;\n\t\tif(i>T)return;\n\t\tif(B[i].lmax<=l&&r<=B[i].rmax)\n\t\t{\n\t\t\tif(B[i].lmax==l&&B[i].rmax==r)B[i].tag+=v*len;\n\t\t\telse mdf(i,l,r,v);\n\t\t\treturn;\n\t\t}\n\t\tif(B[i].lmax<l)mdf(i,l,B[i].rmax,v),i++;\n\t\twhile(i<=T&&B[i].rmax<=r)B[i++].tag+=v*len;\n\t\tif(i>T)return;\n\t\tif(B[i].lmax<=r)mdf(i,B[i].lmax,r,v);\n\t\treturn;\n\t}\n\tint query(int l,int r,int v)\n\t{\n\t\tint i=lower_bound(B+1,B+T+1,(Ithea){-1,-1,-1,l,-1})-B;\n\t\tif(i>T)return 0;\n\t\tif(B[i].lmax<=l&&r<=B[i].rmax)\n\t\t{\n\t\t\tif(B[i].lmax==l&&B[i].rmax==r)return qry(i,true,-1,-1,v);\n\t\t\telse return qry(i,false,l,r,v);\n\t\t}\n\t\tint res=0;\n\t\tif(B[i].lmax<l)res+=qry(i,false,l,B[i].rmax,v),i++;\n\t\twhile(i<=T&&B[i].rmax<=r)res+=qry(i++,true,-1,-1,v);\n\t\tif(i>T)return res;\n\t\tif(B[i].lmax<=r)res+=qry(i,false,B[i].lmax,r,v);\n\t\treturn res;\n\t}\n}a[40];\nvoid build(int l,int r)\n{\n\tint LEN=r-l+1;\n\tif(!mp[LEN])mp[LEN]=++tp,a[tp].len=LEN;\n\ta[mp[LEN]].n++;\n\ta[mp[LEN]].nd[a[mp[LEN]].n].l=l;\n\ta[mp[LEN]].nd[a[mp[LEN]].n].r=r;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(l,mid);\n\tbuild(mid+1,r);\n\treturn;\n}\nvoid OP1(int l,int r,int v)\n{\n\tfor(int i=1;i<=tp;i++)a[i].modify(l,r,v);\n\treturn;\n}\nvoid OP2(int l,int r,int v)\n{\n\tint res=0;\n\tfor(int i=1;i<=tp;i++)res+=a[i].query(l,r,v);\n\tprintf(\"%lld\\n\",res);\n\treturn;\n}\nsigned main()\n{\n\tint n,m;\n\tscanf(\"%lld %lld\",&n,&m);\n\tbuild(1,n);\n\tfor(int i=1;i<=tp;i++)a[i].init();\n\twhile(m--)\n\t{\n\t\tint op,l,r,v;\n\t\tscanf(\"%lld %lld %lld %lld\",&op,&l,&r,&v);\n\t\tif(op==1)OP1(l,r,v);\n\t\telse OP2(l,r,v);\n\t}\n\treturn 0;\n}\n```\n\n**AC \u8bb0\u5f55\uff1a**\n\n![\u8bb0\u5f55](https://cdn.luogu.com.cn/upload/image_hosting/f131d2n2.png)",
        "postTime": 1659348149,
        "uid": 380019,
        "name": "xieyikai2333",
        "ccfLevel": 6,
        "title": "\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/mfeitveer/p/16553845.html)\n\n\u5982\u679c\u5e95\u4e0b\u6ca1\u6709\u653e\u6b63\u89e3\u590d\u6742\u5ea6\u53ef\u80fd\u8fd8\u9700\u8981\u60f3\u5f88\u4e45\u3002\n\n\u4f46\u770b\u89c1\u6b63\u89e3\u4e5f\u8981\u5e26\u4e00\u4e2a $\\log$ \u5c31\u6bd4\u8f83\u597d\u60f3\u4e86\u3002\n\n\u4f46\u4e8c\u5206\u7684\u7ec6\u8282\u8fd8\u662f\u5f88\u96be\u8c03\u7684\u3002\n\n### \u9898\u610f\n\n\u8981\u6c42\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\n\n1. \u533a\u95f4\u52a0\u3002\n\n2. \u533a\u95f4\u6c42\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6811\uff0c\u4f46\u4e5f\u8981\u5305\u62ec\u88ab\u5305\u542b\u7684\u975e\u53f6\u5b50\u8282\u70b9\u3002\n\n### \u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\u7684\u8d21\u732e\uff0c\u5982\u679c\u533a\u95f4\u957f\u5ea6\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u7edf\u4e00\u5904\u7406\u3002\n\n\u8003\u8651\u5230\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u957f\u5ea6\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5206\u522b\u7ef4\u62a4\u6bcf\u4e2a\u957f\u5ea6\u7684\u8d21\u732e\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u8981\u60f3\u4e00\u4e2a\u64cd\u4f5c\u590d\u6742\u5ea6\u6700\u591a $\\sqrt n \\log n$ \u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e0a\u9762\u4e24\u4e2a\u64cd\u4f5c\u3002\n\n\u8003\u8651\u5206\u5757\u3002\n\n\u5bf9\u6bcf\u4e00\u4e2a\u76f8\u540c\u957f\u5ea6\u7684\u8282\u70b9\u7684\u5e8f\u5217\u90fd\u8fdb\u884c\u5206\u5757\u3002\n\n\u7136\u540e\u5c31\u60f3\u666e\u901a\u5206\u5757\u4e00\u6837\uff0c\u8fdb\u884c\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u7ec6\u8282\n\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u6700\u5927\u96be\u70b9\u53ef\u80fd\u662f\u5728\u4f60\u9009\u51fa\u4f60\u8981\u7ef4\u62a4\u7684\u533a\u95f4\u65f6\u8fdb\u884c\u7684\u4e8c\u5206\u64cd\u4f5c\u3002\n\n\u8fd9\u9053\u9898\u975e\u5e38\u7684\u6bd2\u7624\uff0c\u7ed9\u4e00\u4e2a\u5728\u5f31\u7684\u6837\u4f8b\uff0c\u6570\u636e\u7ed9\u7684\u7279\u522b\u5f3a\u3002\n\n\u8bf4\u51e0\u4e2a\u6bd4\u8f83\u5bb9\u6613\u9519\u7684\u7ec6\u8282\u3002\n\n- \u5728\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e9b\u8282\u70b9\u53ef\u80fd\u4e0d\u662f\u5b83\u7ef4\u62a4\u7684\u6574\u4e2a\u957f\u5ea6\u90fd\u9700\u8981\u52a0\u3002\u6240\u4ee5\u5728\u4e8c\u5206\u51fa\u8fb9\u754c\u4ee5\u540e\uff0c\u8fd8\u9700\u8981\u7279\u5224\u4e00\u4e0b\u3002\n\n- \u987a\u7740\u4e0a\u9762\u7684\u8bf4\uff0c\u4f60\u5728\u7279\u5224\u65f6\uff0c\u4f8b\u5982\u6b64\u65f6\u4f60\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u53ea\u6709\u4e00\u6bb5\u9700\u8981\u52a0\uff0c\u6b64\u65f6\u4f60\u8fd8\u8981\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u6700\u53f3\u8fb9\u662f\u5426\u5728\u4f60\u7684\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u7684\u5de6\u8fb9\uff0c\u53ef\u80fd\u7a0d\u5fae\u6709\u4e00\u70b9\u7ed5\u3002\u4f46\u4f60\u4e0d\u7279\u5224\u8fd9\u4e2a\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u56db\u5341\u5206\u7684\u9ad8\u5206\u3002\n\n- \u9488\u5bf9\u4e00\u4e9b\u7a7a\u95f4\u4e0a\u7684\u4f18\u5316\uff0c\u6b64\u9898\u9700\u8981\u52a8\u6001\u5f00\u7a7a\u95f4\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5f00\u6ee1\uff0c\u53ef\u4ee5\u4f7f\u7528 $vector$ \u3002\n\n- \u9488\u5bf9\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4f18\u5316\uff0c\u4f8b\u5982\u4f60\u5728\u7279\u5224\u65f6\uff0c\u4f60\u6ca1\u6709\u5fc5\u8981\u5728\u6b64\u65f6\u4fee\u6539\u5b8c\u76f4\u63a5\u4fee\u6539\u6574\u5757\u7136\u540e\u6392\u5e8f\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u8fd9\u6837\u505a\uff0c\u4f60\u6bcf\u4e00\u6b21\u64cd\u4f5c\u65f6\u9700\u8981\u4fee\u6539\u7684\u5757\u53ef\u80fd\u4f1a\u6709\u56db\u5757\u3002\u53ef\u4ee5\u5224\u65ad\u4e00\u4e0b\u6b64\u65f6\u7684\u96f6\u6563\u5757\u662f\u5426\u8fd8\u9700\u8981\u4fee\u6539\uff0c\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u6700\u591a\u4fee\u6539\u4e24\u4e2a\u96f6\u6563\u5757\u3002\n\n- \u8fd8\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u5206\u5757\u4e2d\u4e8c\u5206\u7684\u526a\u679d\uff0c\u6700\u5927\u6700\u5c0f\u503c\u7684\u7279\u5224\uff0c\u5982\u679c\u6700\u5c0f\u503c\u5927\u4e8e\u8be2\u95ee\uff0c\u76f4\u63a5\u8df3\u8fc7\uff0c\u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u8be2\u95ee\uff0c\u76f4\u63a5\u52a0\u4e0a\u5757\u957f\u3002\n\n\u5176\u4ed6\u7684\u5c31\u6ca1\u4ec0\u4e48\u4e86\u3002\n\n\u5982\u679c\u8c03\u8bd5\u8981\u6570\u636e\uff0c\u53ef\u4ee5\u53bb\u770b\u8bc4\u8bba\u533a\u3002\n\n\u8fd9\u91cc\u518d\u653e\u4e00\u7ec4\u6570\u636e\u3002\n\n[\u6837\u4f8b](https://www.luogu.com.cn/paste/kgf6pkkl)\u3002\n\n[code](https://www.luogu.com.cn/record/82525105)\n\n",
        "postTime": 1659671798,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "P5063 [Ynoi2014] \u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee \u9898\u89e3"
    },
    {
        "content": "~~\u5982\u4f55\u8bc4\u4ef7\u6211\u5f03\u4e86 MCOI \u7684\u7b54\u7591\u6765\u5199 Ynoi~~\n\n~~\u73c2\u6735\u8389\u8fd9\u4e48\u53ef\u7231\uff0c\u8fd9\u9898\u4e5f\u86ee\u6e05\u65b0\u7684\uff0c\u4e3a\u5565\u6ca1\u4eba\u5199\u5462/yiw~~\n\n\u9898\u610f\uff1a\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u7ebf\u6bb5\u6811\u4e0a\u66b4\u529b\u533a\u95f4\u52a0\u548c\u67e5\u8be2\u7ebf\u6bb5\u6811\u4e0a\u6240\u6709\u5305\u542b\u4e8e\u67d0\u533a\u95f4\u4e14\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u548c\u5c0f\u4e8e\u7b49\u4e8e\u8be2\u95ee\u7ed9\u5b9a\u7684\u4e00\u4e2a\u503c\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u9996\u5148\u56e0\u4e3a\u533a\u95f4\u52a0\u533a\u95f4 rank \u6ca1\u6709 polylog \u505a\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u731c\u6d4b\u8fd9\u9898\u4e5f\u6ca1\u6709\uff0c\u8003\u8651\u5206\u5757\u3002\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u5f88\u96be\u641e\uff0c\u5c31\u662f\u533a\u95f4\u52a0\u4e4b\u540e\u7ebf\u6bb5\u6811\u4e0a\u7531\u4e8e\u8282\u70b9\u957f\u5ea6\u4e0d\u540c\uff0c\u6240\u4ee5\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u53d8\u5316\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u503c\u3002\n\n\u4f46\u662f\u6839\u636e\u300a\u7ecf \u5178 \u7ed3 \u8bba\u300b\uff0c\u8fd9\u6837\u7684\u4e00\u68f5\u7ebf\u6bb5\u6811\u8282\u70b9\u957f\u5ea6\u79cd\u7c7b\u6570\u662f $O(\\log n)$ \u7684\u3002\n\n\u8fd9\u65f6\u5c31\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u601d\u8def\uff0c\u5373\u5f00 $O(\\log n)$ \u4e2a\u5206\u5757\uff0c\u5206\u522b\u4fdd\u5b58\u6bcf\u4e00\u79cd\u957f\u5ea6\u7684\u8282\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u533a\u95f4\u52a0\u7684\u65f6\u5019\u5c31\u5bf9\u6ca1\u6709\u5b8c\u5168\u5305\u542b\u7684\u505a\u5355\u70b9\u52a0\uff0c\u5bf9\u5b8c\u5168\u5305\u542b\u7684\u505a\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n\u4f17\u6240\u5468\u77e5\u533a\u95f4\u52a0\u533a\u95f4 rank \u5b58\u5728 $O(m\\sqrt{n\\log n})$ \u505a\u6cd5\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(m\\sqrt{n\\log n}\\log n)$ \u7684\u590d\u6742\u5ea6\u7206\u70b8\u7b97\u6cd5\uff1f\n\nNONONO\uff01\u518d\u6b21\u62ff\u51fa\u300a\u7ecf \u5178 \u7ed3 \u8bba\u300b\uff0c\u7ebf\u6bb5\u6811\u4e00\u5c42\u53ea\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u8282\u70b9\u957f\u5ea6\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u4e00\u4e0b\u4ecd\u7136\u662f $O(m\\sqrt{n\\log n})$\uff0c\u53ea\u4e0d\u8fc7\u5e38\u6570\u8981\u591a $3$ \u500d\u5de6\u53f3\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fd9\u4e48\u505a\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9762\u5206\u6790\u8fc7\u4e86\u662f $O(m\\sqrt{n\\log n})$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u7ebf\u6bb5\u6811\u8282\u70b9\u4e2a\u6570\uff0c\u5373 $O(n)$\u3002\n\n\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u5c31\u662f\u5728\u505a\u5355\u70b9\u52a0\u7684\u65f6\u5019\u4e8c\u5206\u8282\u70b9\u9700\u8981\u4e00\u4e9b\u8ba8\u8bba\u3002\u5927\u81f4\u8981\u6ce8\u610f\u5230\u4ee5\u4e0b\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff1a\n\n1. \u6070\u597d\u5305\u542b\uff08\u5373\u67e5\u8be2\u7684\u7aef\u70b9\u4e0e\u8282\u70b9\u7684\u7aef\u70b9\u91cd\u5408\uff09\n2. \u6ca1\u6709\u8282\u70b9\u8de8\u8fc7\u8be2\u95ee\u7aef\u70b9\n3. \u8be2\u95ee\u7684\u533a\u95f4\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u8282\u70b9\n4. \u8be2\u95ee\u7684\u533a\u95f4\u4e0d\u4e0e\u4efb\u4f55\u8282\u70b9\u76f8\u4ea4\uff08\u662f\u53ef\u80fd\u51fa\u73b0\u7684\uff0c\u56e0\u4e3a\u662f\u679a\u4e3e\u957f\u5ea6\uff0c\u5bf9\u957f\u5ea6\u76f8\u540c\u7684\u5f00\u5206\u5757\uff09\n\n\u7136\u540e\u6ce8\u610f\u8981\u5f00 `long long`\uff0c\u522b\u7684\u7ec6\u8282\u5c31\u6ca1\u4ec0\u4e48\u4e86\u3002\n\n\u76f4\u63a5\u505a\u4f1a\u88ab\u5361\u5e38\u3002\u7531\u4e8e\u5f52\u5e76\u5e38\u6570\u5f88\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u5757\u957f\u8c03\u5c0f\u4e00\u70b9\uff0c\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nstruct Node {\n\tint l, r;\n\tlong long val;\n\tinline bool operator < (const Node& b) const {return l < b.l;}\n\tNode() {}\n\tNode(int l, int r, long long val) : l(l), r(r), val(val) {}\n};\npair <long long, int> tmpa[100005], tmpb[100005];\nint atop, btop;\nstruct BlkDivide {\n\tNode *seq;\n\tint *pos, bl[400], br[400];\n\tlong long addt[400];\n\tpair <long long, int> *blkval;\n\tint len, S;\n\tinline void Allocate() {\n\t\tseq = new Node [len + 5];\n\t\tpos = new int [len + 5];\n\t\tblkval = new pair <long long, int> [len + 5];\n\t}\n\tinline void Build() {\n\t\tS = Max((int)(0.7 * sqrt(len * log2(len))), 1);\n\t\t//for (int i = 1;i <= len;i++) printf(\"(%d %d %lld) \", seq[i].l, seq[i].r, seq[i].val); puts(\"\");\n\t\tfor (int i = 1;i <= len;i++) blkval[i] = make_pair(seq[i].val, i);\n\t\tfor (int i = 1;i <= len;i++) pos[i] = (i - 1) / S + 1;\n\t\tfor (int i = 1;i <= pos[len];i++) {\n\t\t\tbl[i] = (i - 1) * S + 1;\n\t\t\tbr[i] = i * S;\n\t\t}\n\t\tbr[pos[len]] = len; \n\t\t//printf(\"%d\\n\", pos[len]);\n\t\tfor (int i = 1;i <= pos[len];i++) sort(blkval + bl[i], blkval + br[i] + 1);\n\t}\n\tinline void Add(int l, int r, long long v) {\n\t\t//printf(\"CALLTO: Add(%d,%d,%lld)\\n\", l, r, v);\n\t\tif (l > r) return;\n\t\tif (pos[l] == pos[r]) {\n\t\t\tatop = btop = 0;\n\t\t\tfor (int i = bl[pos[l]];i <= br[pos[l]];i++) {\n\t\t\t\tif (blkval[i].second >= l && blkval[i].second <= r) tmpa[++atop] = make_pair(blkval[i].first + v, blkval[i].second);\n\t\t\t\telse tmpb[++btop] = blkval[i];\n\t\t\t}\n\t\t\tint k = bl[pos[l]], i = 1, j = 1;\n\t\t\twhile (i <= atop && j <= btop) {\n\t\t\t\tif (tmpa[i] < tmpb[j]) blkval[k++] = tmpa[i++];\n\t\t\t\telse blkval[k++] = tmpb[j++];\n\t\t\t}\n\t\t\twhile (i <= atop) blkval[k++] = tmpa[i++];\n\t\t\twhile (j <= btop) blkval[k++] = tmpb[j++];\n\t\t\tfor (int i = l;i <= r;i++) seq[i].val += v;\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = pos[l] + 1;i < pos[r];i++) addt[i] += v;\n\t\tatop = btop = 0;\n\t\tfor (int i = l;i <= br[pos[l]];i++) seq[i].val += v;\n\t\tfor (int i = bl[pos[r]];i <= r;i++) seq[i].val += v;\n\t\tfor (int i = bl[pos[l]];i <= br[pos[l]];i++) {\n\t\t\tif (blkval[i].second >= l) tmpa[++atop] = make_pair(blkval[i].first + v, blkval[i].second);\n\t\t\telse tmpb[++btop] = blkval[i];\n\t\t}\n\t\tint k = bl[pos[l]], i = 1, j = 1;\n\t\twhile (i <= atop && j <= btop) {\n\t\t\tif (tmpa[i] < tmpb[j]) blkval[k++] = tmpa[i++];\n\t\t\telse blkval[k++] = tmpb[j++];\n\t\t}\n\t\twhile (i <= atop) blkval[k++] = tmpa[i++];\n\t\twhile (j <= btop) blkval[k++] = tmpb[j++];\n\t\tatop = btop = 0;\n\t\tfor (int i = bl[pos[r]];i <= br[pos[r]];i++) {\n\t\t\tif (blkval[i].second <= r) tmpa[++atop] = make_pair(blkval[i].first + v, blkval[i].second);\n\t\t\telse tmpb[++btop] = blkval[i];\n\t\t}\n\t\tk = bl[pos[r]], i = 1, j = 1;\n\t\twhile (i <= atop && j <= btop) {\n\t\t\tif (tmpa[i] < tmpb[j]) blkval[k++] = tmpa[i++];\n\t\t\telse blkval[k++] = tmpb[j++];\n\t\t}\n\t\twhile (i <= atop) blkval[k++] = tmpa[i++];\n\t\twhile (j <= btop) blkval[k++] = tmpb[j++];\n\t}\n\tinline int Query(int l, int r, long long v) {\n\t\tif (pos[l] == pos[r]) {\n\t\t\tint ans = 0;\n\t\t\tfor (int i = l;i <= r;i++) ans += (seq[i].val + addt[pos[l]] <= v);\n\t\t\treturn ans;\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = l;i <= br[pos[l]];i++) ans += (seq[i].val + addt[pos[l]] <= v);\n\t\tfor (int i = bl[pos[r]];i <= r;i++) ans += (seq[i].val + addt[pos[r]] <= v);\n\t\tfor (int i = pos[l] + 1;i < pos[r];i++) ans += upper_bound(blkval + bl[i], blkval + br[i] + 1, make_pair(v - addt[i], 0x3f3f3f3f)) - blkval - bl[i];\n\t\treturn ans;\n\t}\n};\nBlkDivide b[35];\nint n, m, ref[100005], lcnt, len[45];\n\ninline void Dfs1(int pl, int pr) {\n\tif (!ref[pr - pl + 1]) {\n\t\tref[pr - pl + 1] = ++lcnt;\n\t\tlen[lcnt] = pr - pl + 1;\n\t}\n\t++b[ref[pr - pl + 1]].len;\n\tif (pl == pr) return;\n\tint mid = pl + pr >> 1;\n\tDfs1(pl, mid); Dfs1(mid + 1, pr);\n}\n\ninline void Allocate() {\n\tfor (int i = 1;i <= lcnt;i++) {\n\t\tb[i].Allocate();\n\t\tb[i].len = 0;\n\t}\n}\n\ninline void Dfs3(int pl, int pr) {\n\tb[ref[pr - pl + 1]].seq[++b[ref[pr - pl + 1]].len] = Node(pl, pr, 0);\n\tif (pl == pr) return;\n\tint mid = pl + pr >> 1;\n\tDfs3(pl, mid); Dfs3(mid + 1, pr);\n}\n\ninline void Modify(int l, int r, long long v) {\n\tfor (int i = 1;i <= lcnt;i++) {\n\t\t//printf(\"LENGTH = %d\\n\", len[i]);\n\t\tint idxl = upper_bound(b[i].seq + 1, b[i].seq + 1 + b[i].len, Node(l, 0, 0)) - b[i].seq - 1;\n\t\tint idxr = upper_bound(b[i].seq + 1, b[i].seq + 1 + b[i].len, Node(r, 0, 0)) - b[i].seq - 1;\n\t\t//printf(\"L = %d R = %d\\n\", idxl, idxr);\n\t\tif (idxl > idxr) continue;\n\t\tif (idxl == idxr) {\n\t\t\tif (b[i].seq[idxl].r < l || b[i].seq[idxl].l > r) continue;\n\t\t\tb[i].Add(idxl, idxl, v * (Min(r, b[i].seq[idxl].r) - Max(l, b[i].seq[idxl].l) + 1));\n\t\t\tcontinue;\n\t\t}\n\t\tif (b[i].seq[idxl].l < l && b[i].seq[idxl].r >= l) b[i].Add(idxl, idxl, v * (Min(b[i].seq[idxl].r, r) - l + 1));\n\t\tif (b[i].seq[idxl].l < l) idxl++;\n\t\tif (b[i].seq[idxr].r > r) {\n\t\t\tb[i].Add(idxr, idxr, v * (r - b[i].seq[idxr].l + 1));\n\t\t\tidxr--;\n\t\t}\n\t\tb[i].Add(idxl, idxr, v * len[i]);\n\t}\n}\n\ninline int Query(int l, int r, long long v) {\n\tint ans = 0;\n\tfor (int i = 1;i <= lcnt;i++) {\n\t\t//printf(\"LENGTH = %d\\n\", len[i]);\n\t\tint idxl = lower_bound(b[i].seq + 1, b[i].seq + 1 + b[i].len, Node(l, 0, 0)) - b[i].seq;\n\t\tint idxr = upper_bound(b[i].seq + 1, b[i].seq + 1 + b[i].len, Node(r, 0, 0)) - b[i].seq - 1;\n\t\tif (b[i].seq[idxr].r > r) idxr--;\n\t\t//printf(\"L = %d, R = %d\\n\", idxl, idxr);\n\t\tif (idxl > idxr) continue;\n\t\tans += b[i].Query(idxl, idxr, v);\n\t}\n\treturn ans;\n}\n\ninline void Solve() {\n\tfor (int i = 1;i <= lcnt;i++) b[i].Build();\n\twhile (m--) {\n\t\tint opt = qread(), l = qread(), r = qread();\n\t\tlong long v = qread();\n\t\tif (opt == 1) Modify(l, r, v);\n\t\telse printf(\"%d\\n\", Query(l, r, v));\n\t}\n}\n\nint main() {\n\tn = qread(); m = qread();\n\tDfs1(1, n);\n\tAllocate();\n\tDfs3(1, n);\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1613026146,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5063 \u3010[Ynoi2014] \u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\u9996\u5148\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u4e0d\u6298\u4e0d\u6263\u7684\u5361\u7a7a\u95f4 + \u5361\u5e38\u6bd2\u7624\u9898\u3002\u9996\u5148\u8fd9\u73a9\u610f\u513f\u672c\u8eab\u5c31\u5f88\u96be\u7801\uff0c\u6211\u4ece\u4e00\u4e2a\u4e0b\u5348\u7801\u5230\u534a\u4e2a\u665a\u4e0a\u624d\u7801\u4e86\u7b2c\u4e00\u904d\uff0c\u63a5\u7740\u53c8\u82b1\u4e86\u5feb10h+\u7684\u5c0f\u65f6\u5728\u7ebf\u4e0b\u8fc7 CICN \u54e5\u54e5\u7ed9\u7684\u5927\u6837\u4f8b\uff0c\u6700\u540e\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u505aquery\u6211\u5b9e\u5728\u6ca1\u8c03\u51fa\u6765\u8fd8\u53bb~~\u8d3a\u4e86~~\u4e00\u4e0b CICN \u54e5\u54e5\u7684\u7ebf\u6bb5\u6811\u4e0aquery\u5199\u6cd5\u63a5\u7740\u5c31\u662f\u5361\u5e38\u5361\u7a7a\u95f4\u2026\u2026\u6700\u540e\u7384\u5b66\u8c03\u5757\u957f\u5361\u8fc7\u53bb\u4e86\u3002                          \n\n\u8fd9\u91cc\u5982\u679c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\sqrt {n}\\log n)$ \u7684\u540c\u5b66\u53ef\u4ee5\u7384\u5b66\u8c03\u5c0f\u4e00\u4e0b\u5757\u957f\uff0c\u8fd9\u6837\u5e94\u8be5\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n# \u6b63\u6587\n\u5176\u5b9e\u8fd9\u9053\u9898\u601d\u8def\u5f88\u7b80\u5355\u3002          \n\n\u521a\u62ff\u5230\u8fd9\u9053\u9898\u6211\u5c31\u5f00\u59cb\u7740\u624b\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff0c\u7a0d\u5fae\u77a5\u4e00\u773c\u5e95\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c$O(n \\sqrt {n\\log n})$ \uff1f \u5982\u679c\u4e0d\u662f\u5206\u6563\u5c42\u53e0\u9ed1\u79d1\u6280\u4e86\u4e00\u4e0b\u7684\u8bdd\u6309\u7406\u800c\u8a00\u4e0d\u5e94\u8be5\u662f\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u3002           \n\n\u53c8\u60f3\u4e86\u4e00\u4f1a\u513f\uff0c\u611f\u89c9\u8fd8\u662f\u5f97\u5206\u5757\uff0c~~\u4e0d\u7136\u4f60\u6559\u6211\u4e00\u4e0b\u8fd9\u4e2a\u5f88\u50cf\u533a\u95f4 rank \u7684\u4e1c\u897f\u600e\u4e48\u505a\u561b\uff1f~~          \n\n\u4e8e\u662f\u5c31\u6a21\u62df\u4e86\u51e0\u7ec4\u5c0f\u6837\u4f8b\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u6027\u8d28\uff1a\n\n- \u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u800c\u8a00\uff0c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u5c42\u8282\u70b9\u4e0a\u4f1a\u88ab\u4fee\u6539\u7684\u8282\u70b9\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u4e2d\u95f4\u5168\u90e8\u52a0\u4e00\u4e2a\u503c\u4e24\u7aef\u662f\u4e00\u4e2a\u4e0d\u5b9a\u503c\u3002            \n\n- \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u800c\u8a00\uff0c\u7ebf\u6bb5\u6811\u4e0a\u88ab\u67e5\u627e\u7684\u8282\u70b9\u80af\u5b9a\u662f\u8fde\u7eed\u7684\u3002          \n\n\u8fd9\u7ed9\u4e86\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u601d\u8def\uff1a\u8003\u8651\u5230\u7ebf\u6bb5\u6811\u9ad8\u4e3a $\\log n$ \u6211\u4eec\u5c31\u76f4\u63a5\u628a\u6bcf\u4e00\u5c42\u7ed9\u62c9\u51fa\u6765\u505a\u4e00\u4e2a\u5e8f\u5217\u7136\u540e\u5728\u4e0a\u9762\u5206\u5757\u7ef4\u62a4\u533a\u95f4\u52a0\u533a\u95f4 rank \u5373\u53ef\u3002(\u8fd9\u91cc)         \n\n\u4f46\u662f\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u6211\u7a81\u7136\u611f\u89c9\u8fd9\u4e2a\u5b9e\u73b0\u8fd8\u662f\u6709\u70b9\u4e0d\u597d\u5b9e\u73b0\u2026\u2026\u4e8e\u662f\u53c8\u60f3\u5230\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u8868\u793a\u533a\u95f4\u957f\u5ea6\uff0c\u79cd\u7c7b\u5927\u6982\u4e5f\u662f $\\log n$ \u4e2a(\u5982\u679c\u6ca1\u8bb0\u9519 100000 \u65f6\u662f 28 ) \uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u628a\u7ebf\u6bb5\u6811\u4e0a\u90a3\u4e9b\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\u7684\u8282\u70b9\u62c9\u51fa\u6765\u8dd1\u6210\u4e00\u4e2a\u5e8f\u5217\u5373\u53ef\u3002          \n\n\u63a5\u7740\u6211\u4eec\u6765\u8bc1\u4e00\u4e0b\u8fd9\u4e48\u5199\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a           \n\n- \u9996\u5148\u5148\u628a\u5757\u957f\u8c03\u6210 $\\sqrt n$ \u3002\n\n- \u4fee\u6539\u64cd\u4f5c\uff0c\u5f88\u663e\u7136\u6211\u4eec\u6d89\u53ca $\\log n$ \u6b21\u5e8f\u5217\u4fee\u6539\uff0c\u6bcf\u6b21\u5e8f\u5217\u4fee\u6539\u5c31\u662f\u6563\u5757 sort \u91cd\u6784\u6574\u5757\u61d2\u6807\u8bb0\uff0c\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u9ad8\u8fbe $O(\\sqrt n\\log n^2)$ \u554a\uff0c\u4f46\u662f\u522b\u5fd8\u4e86\u6211\u4eec\u6bcf\u5c42\u5e8f\u5217\u7684\u957f\u5ea6\u4e0d\u4e00\uff0c\u4ece\u5c0f\u5230\u5927\u57fa\u672c\u90fd\u662f 2 \u500d\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u5e94\u8be5\u662f $O(\\log n\\sum_{i = 1} ^ {\\log n}\\sqrt\\frac{n}{2 ^ i})$ \uff0c\u8fd9\u4e2a\u628a $\\sqrt n$ \u4e00\u63d0\u51fa\u6765\u5c31\u662f\u4e2a $O(\\sqrt n \\log n)$ \u7ea7\u522b\u7684\u4e1c\u897f\u4e86\u3002          \n\n- \u67e5\u8be2\u64cd\u4f5c\uff0c\u548c\u4fee\u6539\u64cd\u4f5c\u540c\u7406\uff0c\u5c31\u76f8\u5f53\u4e8e\u6563\u5757\u66b4\u529b\u6574\u5757\u4e8c\u5206\u67e5\u627e\uff0c\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\sqrt n \\log n)$ \uff0c\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u4e0a\u8ff0\u540e\u4e5f\u662f $O(\\sqrt n \\log n)$ \u3002          \n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u505a\u5230 $O(n \\sqrt n \\log n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e86\uff0c\u6309\u7406\u800c\u8a00\u65e0\u6cd5\u901a\u8fc7\u8fd9\u9053\u9898\uff0c\u4f46\u662f\u56e0\u4e3a lxl \u4e0d\u662f\u5f88\u60f3\u5361\uff0c\u6240\u4ee5\u5c31\u653e $O(n \\sqrt n \\log n)$ \u8fc7\u4e86\u3002           \n\n\u5982\u679c\u4f60\u8fd8\u662f\u88ab\u5361\u5e38/\u5361\u7a7a\u95f4\u4e86\uff0c\u8fd9\u8fb9\u51e0\u4e2a\u5c0f\u5efa\u8bae\uff1a        \n\n- \u8c03\u5757\u957f\uff0c\u5c3d\u91cf\u5f80\u5c0f\u8c03\u3002\n\n- \u8457\u540d\u7684\u533a\u95f4 rank \u526a\u679d\u52a0\u4e0a\uff0c\u5373\u770b\u5f53\u524d\u5757\u7684\u6781\u503c\uff0c\u5982\u679c\u67e5\u8be2\u5c0f\u4e8e\u6700\u5c0f\u503c\u5c31\u76f4\u63a5\u8d70\u4e86\u6216\u8005\u67e5\u8be2\u5927\u4e8e\u6700\u5927\u503c\u5c31\u76f4\u63a5\u52a0\u6574\u5757\u3002          \n\n- ~~\u5feb\u8bfb\u5feb\u8f93~~\u3002            \n\n- \u628a sort \u6362\u6210\u5f52\u5e76\u3002           \n\n- \u5408\u7406\u5f00 long long\u3002          \n\n\u7136\u540e\u5c31\u5dee\u4e0d\u591a\u4e86\u3002          \n\n\u5f53\u7136\u5173\u4e8e\u6b64\u9898\u8fd8\u53ef\u4ee5\u7528\u5206\u6563\u5c42\u53e0\u7b97\u6cd5\u8fdb\u884c\u6bd2\u7624\u4f18\u5316\uff0c\u5bf9\u8fd9\u4e00\u5757\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u5b66\u4e00\u4e0b\u5206\u6563\u5c42\u53e0\u7b97\u6cd5\u6765\u5eb7\u5eb7\uff0c\u5177\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8bc1\u660e\uff1a          \n\n- \u4ee4\u5757\u957f\u4e3a S \uff0c\u5f53\u524d\u5c42\u957f\u5ea6\u4e3a n \u3002         \n\n- \u5355\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u5f52\u5e76\u4f18\u5316\u540e\u5c31\u4e00\u4e2a $O(S + \\frac{n}{S})$ \u7684\u4e8b\u3002      \n- \u5355\u6b21\u67e5\u8be2\u64cd\u4f5c\uff0c\u5206\u6563\u5c42\u53e0\u4f18\u5316\u540e\u5c31\u4e00\u4e2a $O(\\log n + \\frac{n}{S})$     \n\n- S \u76f4\u63a5\u53d6\u4e00\u4e2a $\\sqrt n$ \uff0c\u8fd9\u9053\u9898\u5c31\u6210 $O(n\\sqrt n)$ \u4e86\u3002      \n\n\u4e0d\u8fc7\u6211\u60f3\u5e94\u8be5\u6ca1\u4eba\u6253\u8fd9\u4e2a\u73a9\u610f\u513f\u5427\u3002                \n\n```cpp\n//\u5982\u679c\u8981\u52a0\u7684\u8bdd\u6bcf\u5c42\u70b9\u52a0\u7684\u503c\u80af\u5b9a\u4e00\u6837 \n//\u6240\u4ee5\u76f4\u63a5\u5bf9\u6bcf\u5c42\u7684\u70b9\u5206\u5757\u7136\u540e\u7ef4\u62a4\uff0c\u95ee\u9898\u8f6c\u5316\u6210\u666e\u901a\u7684\u5206\u5757\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<cmath>\nusing namespace std;\nconst int Len = 1e5 + 5 , SIZE = 1005 , LOG = 34;\nstruct node\n{\n\tint l,r,idx;\n\tlong long val;\n\tnode(){val = 0;}\n\tnode(int L,int R,int IDX,long long VAL){l = L , r = R , idx = IDX , val = VAL;}\n\tinline bool operator < (const node &b) const {return val < b.val;}\n}a[LOG][Len] , Used[Len][2];\nstruct Node\n{\n\tint l,r;\n\tNode(){l = 0 , r = 0;}\n\tNode(int L,int R){l = L , r = R;}\n\tinline bool operator < (const Node &b) const {return l < b.l;}\n}c[LOG][Len];\nint Usedpos[2];\nbool cmp(node x,node y){return x.val < y.val;}\nlong long add[SIZE][LOG];\nint flag[Len];\nlong long Maxn[SIZE][LOG],Minn[SIZE][LOG];\nint lsh[LOG << 2],n,m,L[SIZE][LOG],R[SIZE][LOG],pos[Len][LOG],t[LOG],Layer,llen[LOG],spaw[Len << 2],tsiz[LOG];\ninline void maintain(int now,int X)\n{\n\tint posUsed[2] , idx = L[X][now];\n\tposUsed[0] = 1 , posUsed[1] = 1; \n\twhile(posUsed[0] <= Usedpos[0] && posUsed[1] <= Usedpos[1])\n\t{\n\t\tif(Used[posUsed[0]][0].val <= Used[posUsed[1]][1].val) a[now][idx] = Used[posUsed[0] ++][0];\n\t\telse a[now][idx] = Used[posUsed[1] ++][1];\n\t\tidx ++;\n\t}\n\twhile(posUsed[0] <= Usedpos[0]) a[now][idx ++] = Used[posUsed[0] ++][0];\n\twhile(posUsed[1] <= Usedpos[1]) a[now][idx ++] = Used[posUsed[1] ++][1];\n\tMaxn[X][now] = -1e18 , Minn[X][now] = 1e18;\n\tfor(int i = L[X][now] ; i <= R[X][now] ; i ++) Maxn[X][now] = max(Maxn[X][now] , a[now][i].val) , Minn[X][now] = min(Minn[X][now] , a[now][i].val);\n\t//\u8fd9\u91cc\u53ef\u4ee5\u4e0dadd\u91cd\u8f7d \n}\ninline void upd(int now,int l,int r,long long Add)\n{\n\tint LL = pos[l][now] , RR = pos[r][now];\n\tif(LL == RR)\n\t{\n\t\tUsedpos[0] = Usedpos[1] = 0;\n\t\tfor(int i = L[LL][now] ; i <= R[LL][now] ; i ++) \n\t\t{\n\t\t\tif(a[now][i].idx >= l && a[now][i].idx <= r){Used[++ Usedpos[0]][0] = a[now][i] ; Used[Usedpos[0]][0].val += Add; }\n\t\t\telse Used[++ Usedpos[1]][1] = a[now][i];\n\t\t}\n\t\tmaintain(now , LL);\n\t\treturn;\n\t}\t\n\tUsedpos[0] = Usedpos[1] = 0;\n\tfor(int i = L[LL][now] ; i <= R[LL][now] ; i ++) \n\t{\n\t\tif(a[now][i].idx >= l && a[now][i].idx <= r){Used[++ Usedpos[0]][0] = a[now][i] ; Used[Usedpos[0]][0].val += Add;}\n\t\telse Used[++ Usedpos[1]][1] = a[now][i];\n\t}\n\tmaintain(now , LL);\n\tfor(int i = LL + 1 ; i <= RR - 1 ; i ++) add[i][now] += Add;\n\tUsedpos[0] = Usedpos[1] = 0;\n\tfor(int i = L[RR][now] ; i <= R[RR][now] ; i ++) \n\t{\n\t\tif(a[now][i].idx >= l && a[now][i].idx <= r){Used[++ Usedpos[0]][0] = a[now][i] ; Used[Usedpos[0]][0].val += Add;}\n\t\telse Used[++ Usedpos[1]][1] = a[now][i];\n\t}\n\tmaintain(now , RR);\n}\ninline int Qry(int now,int l,int r,long long x)\n{\n\tint LL = pos[l][now] , RR = pos[r][now] , res = 0;\n\tif(LL == RR)\n\t{\n\t\tfor(int i = L[LL][now] ; i <= R[LL][now] ; i ++) if(a[now][i].idx >= l && a[now][i].idx <= r && a[now][i].val <= x - add[LL][now]) res ++;\n\t\treturn res; \n\t}\n\tfor(int i = L[LL][now] ; i <= R[LL][now] ; i ++) if(a[now][i].idx >= l && a[now][i].idx <= r && a[now][i].val <= x - add[LL][now]) res ++;\n\tfor(int i = LL + 1 ; i <= RR - 1 ; i ++) \n\t{\n\t\tif(x - add[i][now] < Minn[i][now]) continue;\n\t\tif(x - add[i][now] > Maxn[i][now]){res += R[i][now] - L[i][now] + 1 ; continue;}\n\t\tint num = upper_bound(a[now] + L[i][now] , a[now] + R[i][now] , node(0 , 0 , 0 , x - add[i][now])) - a[now];\n\t\tif(num == L[i][now] && a[now][num].val > x - add[i][now]) continue;\n\t\tif(a[now][num].val > x - add[i][now]) num --;\n\t\tres += num - L[i][now] + 1;\n\t}\n\tfor(int i = L[RR][now] ; i <= R[RR][now] ; i ++) if(a[now][i].idx >= l && a[now][i].idx <= r && a[now][i].val <= x - add[RR][now]) res ++;\n\treturn res;\n}\nvoid Build(int now)\n{\n\tt[now] = max(1 , (int)sqrt(llen[now] >> 2));\n\ttsiz[now] = llen[now] / t[now];\n\tfor(int i = 1 ; i <= tsiz[now] ; i ++) L[i][now] = (i - 1) * t[now] + 1 , R[i][now] = i * t[now] , Maxn[i][now] = 0 , Minn[i][now] = 0;\n\tif(R[tsiz[now]][now] != llen[now])\n\t{\n\t\ttsiz[now] ++;\n\t\tL[tsiz[now]][now] = R[tsiz[now] - 1][now] + 1;\n\t\tR[tsiz[now]][now] = llen[now];\n\t} \n\tfor(int i = 1 ; i <= tsiz[now] ; i ++)\n\t\tfor(int j = L[i][now] ; j <= R[i][now] ; j ++) pos[j][now] = i;\n}\nvoid build(int p,int l,int r)\n{\n\tif(!flag[r - l + 1]){flag[r - l + 1] = ++ Layer;lsh[Layer] = r - l + 1;}\n\tspaw[p] = ++ llen[flag[r - l + 1]];\n\tc[flag[r - l + 1]][llen[flag[r - l + 1]]].l = l , c[flag[r - l + 1]][llen[flag[r - l + 1]]].r = r;a[flag[r - l + 1]][llen[flag[r - l + 1]]].val = 0;\n\ta[flag[r - l + 1]][llen[flag[r - l + 1]]].idx = llen[flag[r - l + 1]];a[flag[r - l + 1]][llen[flag[r - l + 1]]].l = l , a[flag[r - l + 1]][llen[flag[r - l + 1]]].r = r;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1 , l , mid) , build(p << 1 | 1 , mid + 1 , r);\n}\ninline void update(int l,int r,long long Add)\n{\n\tint Lpos = 0 , Rpos = 0;\n\tfor(int j = 1 ; j <= Layer ; j ++)\n\t{\n\t\tLpos = upper_bound(c[j] + 1 , c[j] + llen[j] + 1 , Node(l , 0)) - c[j] - 1;\n\t\tRpos = upper_bound(c[j] + 1 , c[j] + llen[j] + 1 , Node(r , 0)) - c[j] - 1;\n\t\tif(Lpos > Rpos) continue;\n\t\tif(Lpos == Rpos)\n\t\t{\n\t\t\tif(c[j][Lpos].r < l || c[j][Lpos].l > r) continue;\n\t\t\tupd(j , Lpos , Lpos , Add * (min(r , c[j][Lpos].r) - max(l , c[j][Lpos].l) + 1));\n\t\t\tcontinue;\n\t\t}\n\t\tif(c[j][Lpos].l < l && c[j][Lpos].r >= l) upd(j , Lpos , Lpos , Add * (min(r , c[j][Lpos].r) - l + 1));\n\t\tif(c[j][Lpos].l < l) Lpos ++;\n\t\tif(c[j][Rpos].r > r)\n\t\t{\n\t\t\tupd(j , Rpos , Rpos , 1LL * Add * (r - c[j][Rpos].l + 1));\n\t\t\tRpos --;\n\t\t}\n\t\tupd(j , Lpos , Rpos , 1LL * Add * lsh[j]);\n\t}\n\t\n}\ninline int query(int l,int r,long long F)\n{\n\tint res = 0 , Lpos = 0 , Rpos = 0;\n\tfor(int j = 1 ; j <= Layer ; j ++)\n\t{\n\t\tLpos = lower_bound(c[j] + 1 , c[j] + llen[j] + 1 , Node(l , 0)) - c[j];\n\t\tRpos = upper_bound(c[j] + 1 , c[j] + llen[j] + 1 , Node(r , 0)) - c[j] - 1;\n\t\tif(c[j][Rpos].r > r) Rpos --;\n\t\tif(Lpos > Rpos) continue;\n\t\tint Enthalpy = Qry(j , Lpos , Rpos , F);\n\t\tres += Enthalpy;\n\t}\n\treturn res;\n}\ninline int read() {\n    char ch = getchar();\n    int x = 0, f = 1;\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while ('0' <= ch && ch <= '9') {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\ninline void write(int x) {\n    if (x < 0)\n        putchar('-'), x = -x;\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\nsigned main()\n{\n\tn = read() , m = read();\n\tbuild(1 , 1 , n);\n\tfor(int i = 1 ; i <= Layer ; i ++) Build(i);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint opt,l,r;long long x;opt = read() , l = read() , r = read() , x = read();\n\t\tif(opt == 1) update(l , r , x);\n\t\telse write(query(l , r , x)) , putchar('\\n');\n\t}\n\treturn 0;\t\n} \n```",
        "postTime": 1617419072,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5063 [Ynoi2014] \u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee"
    },
    {
        "content": "\u611f\u8c22ClCN\u54e5\u54e5\u7684\u6837\u4f8b\uff0c\u7ec8\u4e8e\u8c03\u51fa\u6765\u4e86\uff0c\u7b97\u662f\u7b2c\u4e00\u9053\u5b8c\u5168\u72ec\u7acb\u8c03\u7684Ynoi\u5427\uff0c\u4ee5\u524d\u90fd\u662f\u8c03\u7740\u8c03\u7740\u5c31\u8c03\u6210\u4e86\u522b\u4eba\u7684\u4ee3\u7801\u3002\u3002\u3002\n\n\u56e0\u4e3a\u533a\u95f4\u52a0\u533a\u95f4 $rank$ \u4e0d\u5b58\u5728 $polylog$ \u89e3\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u8ba4\u4e3a\u8fd9\u9898\u4e5f\u4e0d\u5b58\u5728 $polylog$ \u89e3\u6cd5\uff0c\u76f4\u63a5\u8003\u8651\u5206\u5757\u3002\u7136\u540e\u53d1\u73b0\u5e76\u4e0d\u597d\u505a\u3002\u3002\u3002\n\n\u4e0d\u8fc7\u6839\u636e\u7ebf\u6bb5\u6811\u7ecf\u5178\u7ed3\u8bba\uff1a\u7ebf\u6bb5\u6811\u6bcf\u4e00\u5c42\u81f3\u591a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u957f\u5ea6\uff0c\u800c\u81f3\u591a\u6709 $log$ \u5c42\u3002\u6240\u4ee5\u5982\u679c\u62c6\u5f00\u6bcf\u5c42\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4 $log$ \u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u52a0\u533a\u95f4 $rank$ \u3002\u7531\u4e8e\u533a\u95f4\u52a0\u533a\u95f4 $rank$ \u5b58\u5728  $O(n\\sqrt{n log n})$ \u89e3\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a $O(nlogn\\ \\sqrt{nlogn})$ \u7684\u5783\u573e\u7b97\u6cd5\uff1f\u5176\u5b9e\u62ff\u7b49\u6bd4\u6570\u5217\u6c42\u4e00\u4e0b\u53d1\u73b0\u8fd9\u73a9\u610f\u5176\u5b9e\u6ca1\u6709\u90a3\u4e48\u79bb\u8c31\uff0c\u5e94\u8be5\u662f $O(n\\sqrt{nlogn})$ \u3002\u4e0d\u8fc7\u5e38\u6570\u7565\u5927\u3002\u8fd9\u6837\u505a\u7684\u8bdd\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u65f6\u95f4 $O(n\\sqrt{nlogn})$ \uff0c\u7a7a\u95f4 $O(n)$ \u7684\u505a\u6cd5\uff0c\u7136\u540e\u5199\u5c31\u597d\u4e86\u3002\u4e0d\u8fc7\u7ec6\u8282\u771f\u7684\u4e00\u5927\u5806\u3002\u3002\u3002\u7531\u4e8e\u6bcf\u6b21\u52a0\u6cd5\u5de6\u53f3\u4e24\u7aef\u53ef\u80fd\u5e76\u6ca1\u6709\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u52a0\u7684\u503c\u4e0d\u4e00\u5b9a\u662f $len*x$ \u8981\u7279\u5224\uff0c\u67e5\u8be2\u65f6\u4e24\u7aef\u53ef\u80fd\u6709\u90e8\u5206\u8d85\u51fa\uff0c\u4e5f\u8981\u7279\u5224\u3002\u3002\u3002\u4e0d\u8fc7\u5199 lower_bound \u548c while \u5199\u4f1a\u8f7b\u677e\u5f88\u591a\u3002\n\n\u597d\u50cf\u4e00\u70b9\u90fd\u4e0d\u5361\u5e38\uff1f\u6211 scanf \u90fd\u8fc7\u4e86\uff0c\u6563\u5757\u8fd8\u662f sort \u6392\u5e8f\u3002\u3002\u3002\n\n\u5410\u69fd\uff1a\u5468\u4e09\u8c03\u4e86\u4e00\u5929\u53d1\u73b0\u662f\u96f6\u6563\u52a0\u53ef\u80fd\u4e0d\u662f $len*x$ \uff0c\u5468\u56db\u8c03\u4e86\u4e00\u5929\u53d1\u73b0\u6253 tag \u6253\u9519\u4e86\uff0c\u7136\u540e\u5468\u4e94\u4e0a\u8bfe\u53d1\u73b0\u6ca1\u5b8c\u5168\u6e05\u7a7a\uff0c\u6539\u5b8c\u5c31\u8fc7\u4e86\u3002\u3002\u3002\u4ee5\u4e0b\u662f48\u5206\u4ee3\u7801\uff0c\u5373\u662f\u591a\u6d4b\u672a\u5b8c\u5168\u6e05\u7a7a\u7684\u4ee3\u7801\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100005\n#define int long long\nint n,m,T,tot,ht,hh[N],rh[50],opt[N],l[N],r[N],x[N],ans[N];\nstruct node{\n\tint l,r,t;\n\tbool operator<(const node &a)const{return l<a.l;}\n} a[N<<2];\nvector<node> v[50];\nvoid dfs1(int l,int r){\n\ta[++tot].l=l,a[tot].r=r,a[tot].t=0;\n\tif(!hh[r-l+1]) hh[r-l+1]=++ht,rh[ht]=r-l+1,v[ht].push_back(node{0,0,0});\n\tv[hh[r-l+1]].push_back(a[tot]);\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tdfs1(l,mid),dfs1(mid+1,r);\n}\nstruct ds{\n\tint n,bl,ans,a[N],o[N],k[N],L[500],R[500],Add[500];\n\tbool bf;\n\tinline void init(int x){\n\t\tn=x;bf=false;for(int i=1;i<=n;++i) o[i]=a[i]=0;\n\t\tif(n<=600){bf=true;return;}\n\t\tbl=sqrt(n);\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tk[i]=i/bl+1;Add[k[i]]=0;\n\t\t\tif(k[i]^k[i-1]) L[k[i]]=i,R[k[i-1]]=i-1;\n\t\t} L[k[1]]=1,R[k[n]]=n;\n\t}\n\tinline void add(int l,int r,int ll,int rr,int x){\n\t\t//printf(\"add l=%d r=%d x=%d\\n\",l,r,x);\n\t\tif(l>r) return;\n\t\tif(bf){\n\t\t\tfor(int i=l;i<=r;++i) a[i]+=(min(rr,v[T][i].r)-max(ll,v[T][i].l)+1)*x;\n\t\t\treturn;\n\t\t}\n\t\tif(k[l]==k[r]){\n\t\t\tfor(int i=l;i<=r;++i) a[i]+=(min(rr,v[T][i].r)-max(ll,v[T][i].l)+1)*x;\n\t\t\tfor(int i=L[k[l]];i<=R[k[l]];++i) o[i]=a[i];\n\t\t\tsort(o+L[k[l]],o+R[k[l]]+1);return;\n\t\t}\n\t\tfor(int i=l;k[i]==k[l];++i) a[i]+=(min(rr,v[T][i].r)-max(ll,v[T][i].l)+1)*x;\n\t\tfor(int i=r;k[i]==k[r];--i) a[i]+=(min(rr,v[T][i].r)-max(ll,v[T][i].l)+1)*x;\n\t\tfor(int i=L[k[l]];i<=R[k[l]];++i) o[i]=a[i];sort(o+L[k[l]],o+R[k[l]]+1);\n\t\tfor(int i=L[k[r]];i<=R[k[r]];++i) o[i]=a[i];sort(o+L[k[r]],o+R[k[r]]+1);\n\t\tfor(int i=k[l]+1;i<k[r];++i) Add[i]+=rh[T]*x;\n\t}\n\tinline int ask(int l,int r,int x){\n\t\t//printf(\"ask l=%d r=%d x=%d\\n\",l,r,x);\n\t\tif(l>r) return 0;ans=0;\n\t\tif(bf){for(int i=l;i<=r;++i) ans+=(a[i]+Add[k[i]]<=x);return ans;}\n\t\tif(k[l]==k[r]){for(int i=l;i<=r;++i) ans+=(a[i]+Add[k[i]]<=x);return ans;}\n\t\tfor(int i=l;k[i]==k[l];++i) ans+=(a[i]+Add[k[i]]<=x);\n\t\tfor(int i=r;k[i]==k[r];--i) ans+=(a[i]+Add[k[i]]<=x);\n\t\tfor(int i=k[l]+1;i<k[r];++i) ans+=upper_bound(o+L[i],o+R[i]+1,x-Add[i])-o-L[i];\n\t\treturn ans;\n\t}\n\tinline void print(){\n\t\tfor(int i=1;i<v[T].size();++i) printf(\"[%d,%d %d] \",v[T][i].l,v[T][i].r,a[i]+Add[k[i]]);puts(\"\");\n\t}\n} t;\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tdfs1(1,n);\n\tfor(int i=1;i<=m;++i) scanf(\"%lld%lld%lld%lld\",&opt[i],&l[i],&r[i],&x[i]);\n\tfor(T=1;T<=ht;++T){\n\t\t//printf(\"T=%d len=%d\\n\",T,rh[T]);\n\t\tt.init(v[T].size()-1);\n\t\tfor(int i=1,ll,rr;i<=m;++i){\n\t\t\tif(opt[i]&1){\n\t\t\t\tll=lower_bound(v[T].begin(),v[T].end(),node{l[i],0,0})-v[T].begin();\n\t\t\t\twhile(v[T][ll-1].r>=l[i]) --ll;\n\t\t\t\trr=upper_bound(v[T].begin(),v[T].end(),node{r[i],0,0})-v[T].begin()-1;\t\n\t\t\t\twhile(v[T][rr].l>r[i]) rr--;\n\t\t\t\tt.add(ll,rr,l[i],r[i],x[i]);\n\t\t\t}else{\n\t\t\t\tll=lower_bound(v[T].begin(),v[T].end(),node{l[i],0,0})-v[T].begin();\n\t\t\t\twhile(v[T][ll].l<l[i]) ll++;\n\t\t\t\trr=upper_bound(v[T].begin(),v[T].end(),node{r[i],0,0})-v[T].begin()-1;\n\t\t\t\twhile(v[T][rr].r>r[i]) rr--;\n\t\t\t\tans[i]+=t.ask(ll,rr,x[i]);\n\t\t\t}\n\t\t\t//t.print();\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i) if(opt[i]^1) printf(\"%lld\\n\",ans[i]);\n}\n```\n",
        "postTime": 1638525136,
        "uid": 376149,
        "name": "sunset1028",
        "ccfLevel": 0,
        "title": "P5063 [Ynoi2014] \u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee \u9898\u89e3"
    }
]