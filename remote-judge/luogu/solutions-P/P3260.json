[
    {
        "content": "### P.S.\n\u8fd9\u9898\u8c03\u4e86\u6211\u4e00\u4e2a\u4e0a\u5348/ll\u3002  \n[\u8fd9\u7bc7\u9898\u89e3\u5e94\u8be5\u662f\u8fd9\u9898\u4e2d\u6b63\u786e\u7684\u89e3\u6cd5/cy](https://www.luogu.com.cn/discuss/show/266985)  \n\u5177\u4f53\u7ed3\u8bba\u6211\u4e5f\u4e0d\u4f1a\u8bc1\u660e\uff0c\u53ea\u4f1a\u611f\u6027\u7406\u89e3\uff08\u6bd5\u7adf\u6211\u662f OIer \u800c\u4e0d\u662f MOer  \n\uff08UPD\uff0c\u6839\u636e @zhouchenyuan005 \u6307\u5bfc\uff0c\u597d\u50cf\u53d1\u660e\u4e86\u4e00\u79cd\u770b\u4e0a\u53bb\u5f88\u5bf9\u7684\u8bc1\u660e\u7ed3\u8bba\u65b9\u6cd5\u3002  \n\u6570\u636e\u611f\u89c9\u662f\u7528\u811a\u9020\u7684\uff08\u6216\u8005\u53ef\u80fd\u6570\u636e\u8303\u56f4\u662f\u7528\u811a\u9020\u7684  \n\uff08\u6bd5\u7adf\u6211\u6784\u9020\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u6570\u636e\uff0c\u5c31\u628a\u7b2c\u4e00\u7bc7\u9898\u89e3 X \u6389\u4e86/cy  \n\uff08\u56e0\u4e3a\u901a\u9053\u5f88\u77ed\uff0c\u5728\u901a\u9053\u5f88\u8fdc\u5904\u6709\u5149\u5b66\u4eea\u5668\u5e76\u4e0d\u5f71\u54cd\u901a\u9053\u5185\u7684\u5149  \n\uff08UPD\uff0c\u597d\u50cf\u628a\u4e24\u7bc7\u9898\u89e3\u90fd X \u6389\u4e86\u3002  \n### Description.\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5149\u901a\u9053\uff0c\u5185\u58c1\u80fd\u53cd\u5149\u3002\uff08\u955c\u9762\u53cd\u5c04  \n\u4e0a\u9762\u6709\u5f88\u591a\u5149\u5b66\u4eea\u5668\uff0c\u53ef\u80fd\u662f\u77e9\u5f62\uff0c\u4e5f\u53ef\u80fd\u662f\u5706\u5f62\u3002  \n\u8981\u6c42\u8ba9\u5149\u80fd\u4ece\u4e00\u5934\u80fd\u901a\u5230\u53e6\u4e00\u5934\uff0c\u6c42\u6700\u5c0f\u6467\u6bc1\u7684\u5149\u901a\u9053\u4ee3\u4ef7\u3002  \n### Tips.\n[\u5bf9\u6837\u4f8b\u7684\u6a21\u62df](https://www.geogebra.org/m/t2x4xugf)  \n\u4e00\u4e9b\u624b\u6a21\u62df\u7684\u6570\u636e\uff0c\u662f\u7b14\u8005\u8c03\u4ee3\u7801\u8fc7\u7a0b\u4e2d\u5bf9\u62cd\u5f97\u5230\u7684\n[1](https://www.geogebra.org/m/jcce8cpy)\n[2](https://www.geogebra.org/m/sregtqug)\n[3](https://www.geogebra.org/m/fwwuddnv)\n[4](https://www.geogebra.org/m/tqwdrepe)\n[5](https://www.geogebra.org/m/eshzekab)\n### Solution.\n\u9996\u5148\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c\u5149\u901a\u9053\u4e2d\u95f4\u6709\u7f1d\u9699\uff0c\u90a3\u5149\u5c31\u80fd\u4ece\u4e00\u5934\u3002  \n\u611f\u8c22 @[zhouchenyuan005](https://www.luogu.com.cn/user/87416) \u63d0\u4f9b\u7684\u505a\u6cd5\u3002\uff08\u867d\u7136\u53ef\u80fd\u8bc1\u660e\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u4f46\u662f\u53ef\u4ee5\u611f\u6027\u7406\u89e3  \n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u7c7b\u4f3c\u626b\u63cf\u7ebf\u4e00\u6837\u5730\u626b\u8fc7\u53bb\uff0c\u5bf9\u4e8e\u6700\u5de6\u8fb9\u7684\u70b9\uff0c\u5b83\u663e\u7136\u53ef\u4ee5\u5411\u5b83\u53f3\u8fb9\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u79fb\u52a8\u3002  \n\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5728\u8fb9\u7f18\u7684\u70b9\u5b83\u90fd\u6709\u4efb\u610f\u4e00\u4e2a\u65b9\u5411\uff0c\u90a3\u4e48\u5149\u5c31\u80af\u5b9a\u80fd\u901a\u5230\u5de6\u53f3\u8fb9\u3002  \n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u6700\u5c11\u4ee3\u4ef7\u628a\u539f\u56fe\u5220\u6389\u4e00\u4e9b\u4eea\u5668\uff0c\u8ba9\u4eea\u5668\u4e4b\u95f4\u6709\u7a7a\u9699\u3002  \n\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c\u628a\u5149\u5b66\u4eea\u5668\u770b\u4f5c\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u9009\u51fa\u4e00\u4e9b\u70b9\u628a\u5b83\u5220\u6389\u5e76\u8ba9\u539f\u56fe\u4e0d\u8054\u901a\u3002  \n\u8fd9\u663e\u7136\u53ef\u4ee5\u7528\u6700\u5c0f\u5272\u505a\uff0c\u6ce8\u610f\u4e0d\u662f\u88f8\u7684\u6700\u5c0f\u5272\u56e0\u4e3a\u8fd9\u91cc\u662f\u5220\u70b9\u800c\u4e0d\u662f\u5272\u8fb9\u3002  \n\u6211\u4eec\u5bf9\u76f8\u5207\u6216\u76f8\u5272\u7684\u4e24\u4e2a\u5149\u5b66\u4eea\u5668\u8fde\u8fb9\uff0c\u5bf9\u6700\u4e0a\u9762\u548c\u6700\u4e0b\u9762\u4e24\u4e2a\u4f5c\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\u3002  \n\u5bf9\u4e8e\u6bcf\u4e2a\u5149\u5b66\u4eea\u5668\uff0c\u6211\u4eec\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5e76\u8fde 1 \u7684\u6d41\u91cf\u9650\u5236\u3002  \n\u5bf9\u8fde\u8fb9\uff0c\u628a\u4e00\u6761\u8fb9\u51fa\u53d1\u70b9\u7684\u51fa\u70b9\u8fde\u5411\u7ed3\u675f\u70b9\u7684\u5165\u70b9\uff0c\u7136\u540e\u8dd1 dinic\u3002  \n\n\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u5b8c\u7ed3\u6492\u82b1\uff0c\u4ee3\u7801\u5f88\u4e11\uff0c\u52ff\u55b7/kel  \n### Coding.\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;const double eps=1e-7;const int INF=1e9;\nstruct rnd{double x,y,r;int id;}a[1205];\nstruct squ{double x1,y1,x2,y2;int id;}b[1205];\nstruct edge{int to,w,nxt;}e[2000005];\ndouble Cx,Cy;int n,et,s,t,head[1205],d[1205],cr[1205],ac,bc;\ninline char chk(squ a,double x,double y) {return a.x1-eps<=x&&x<=a.x2+eps&&a.y1-eps<=y&&y<=a.y2+eps;}\ninline char CHK(squ a,double y,double x1,double x2) {return (a.y1-eps<=y&&y<=a.y2+eps)||chk(a,x1,y)||chk(a,x2,y);}\ninline char chk1(rnd a,double x,double y1,double y2)\n{\n\tif((a.x-x)*(a.x-x)+(a.y-y1)*(a.y-y1)<=a.r*a.r+eps) return 1;\n\tif((a.x-x)*(a.x-x)+(a.y-y2)*(a.y-y2)<=a.r*a.r+eps) return 1;\n\tif(!(a.x-x<=a.r+eps&&a.x-x>=a.r-eps)) return 0;\n\tdouble dy=sqrt(a.r*a.r-(a.x-x)*(a.x-x)),Y1=a.y-dy,Y2=a.y+dy;\n\treturn (y1-eps<=Y1&&Y1<=y2+eps)||(y1-eps<=Y2&&Y2<=y2+eps);\n}\ninline char chk2(rnd a,double y,double x1,double x2)\n{\n\tif((a.x-x1)*(a.x-x1)+(a.y-y)*(a.y-y)<=a.r*a.r+eps) return 1;\n\tif((a.x-x2)*(a.x-x2)+(a.y-y)*(a.y-y)<=a.r*a.r+eps) return 1;\n\tif(!(a.y-y<=a.r+eps&&a.y-y>=-a.r-eps)) return 0;\n\tdouble dx=sqrt(a.r*a.r-(a.y-y)*(a.y-y)),X1=a.x-dx,X2=a.x+dx;\n\treturn (x1-eps<=X1&&X1<=x2+eps)||(x1-eps<=X2&&X2<=x2+eps);\n}\ninline char operator+(rnd a,rnd b) {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)<=(a.r+b.r+eps)*(a.r+b.r+eps);}\ninline char operator+(squ a,squ b) {return chk(a,b.x1,b.y1)||chk(a,b.x1,b.y2)||chk(a,b.x2,b.y1)||chk(a,b.x2,b.y2);}\ninline char operator+(squ a,rnd b)\n{\n\tif((a.x1-b.x)*(a.x1-b.x)+(a.y1-b.y)*(a.y1-b.y)<=b.r*b.r+eps) return 1;\n\tif((a.x2-b.x)*(a.x2-b.x)+(a.y1-b.y)*(a.y1-b.y)<=b.r*b.r+eps) return 1;\n\tif((a.x1-b.x)*(a.x1-b.x)+(a.y2-b.y)*(a.y2-b.y)<=b.r*b.r+eps) return 1;\n\tif((a.x2-b.x)*(a.x2-b.x)+(a.y2-b.y)*(a.y2-b.y)<=b.r*b.r+eps) return 1;\n\tif(chk(a,b.x,b.y)) return 1;\n\tif(chk1(b,a.x1,a.y1,a.y2)||chk1(b,a.x2,a.y2,a.y2)||chk2(b,a.y1,a.x1,a.x2)||chk2(b,a.y2,a.x1,a.x2)) return 1;\n\treturn 0;\n}\ninline void ADDE(int x,int y,int w) {e[++et]=(edge){y,w,head[x]},head[x]=et;}\ninline void adde(int x,int y,int w) {ADDE(x,y,w),ADDE(y,x,0);}\ninline char bfs(int s,int t)\n{\n\tqueue<int>q;q.push(s),memset(d,0,sizeof(d)),d[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].w&&!d[e[i].to]) d[e[i].to]=d[x]+1,q.push(e[i].to);\n\t}\n\treturn !!d[t];\n}\n#define rev(x) ((((x)&1)?1:-1)+(x))\ninline int dfs(int x,int t,int lim=INF)\n{\n\tint f=lim;if(x==t) return lim;\n\tfor(int i=cr[x];i;cr[x]=i=e[i].nxt) if(d[e[i].to]==d[x]+1&&e[i].w)\n\t{\n\t\tint g=dfs(e[i].to,t,min(f,e[i].w));f-=g;\n\t\te[i].w-=g,e[rev(i)].w+=g;if(!f) break;\n\t}\n\treturn lim-f;\n}\ninline int dinic(int s,int t) {int r=0;while(bfs(s,t)) memcpy(cr,head,sizeof(cr)),r+=dfs(s,t);return r;}\nint main()\n{\n\tscanf(\"%lf%lf%d\",&Cx,&Cy,&n),et=0,memset(head,0,sizeof(head)),s=n<<1|1,t=s+1;\n\tfor(int i=1,fg;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&fg);if(fg^2) ++ac,scanf(\"%lf%lf%lf\",&a[ac].x,&a[ac].y,&a[ac].r),a[ac].id=i;\n\t\telse bc++,scanf(\"%lf%lf%lf%lf\",&b[bc].x1,&b[bc].y1,&b[bc].x2,&b[bc].y2),b[bc].id=i;\n\t}\n\tfor(int i=1;i<=n;i++) adde(i,i+n,1);\n\tfor(int i=1;i<=ac;i++) if(chk2(a[i],0,0,Cx)) adde(s,a[i].id,1);\n\tfor(int i=1;i<=bc;i++) if(CHK(b[i],0,0,Cx)) adde(s,b[i].id,1);\n\tfor(int i=1;i<=ac;i++) if(chk2(a[i],Cy,0,Cx)) adde(a[i].id+n,t,1);\n\tfor(int i=1;i<=bc;i++) if(CHK(b[i],Cy,0,Cx)) adde(b[i].id+n,t,1);\n\tfor(int i=1;i<=ac;i++) for(int j=1;j<=ac;j++) if(i!=j&&a[i]+a[j]) adde(a[i].id+n,a[j].id,1);\n\tfor(int i=1;i<=bc;i++) for(int j=1;j<=ac;j++) if(i!=j&&b[i]+a[j]) adde(b[i].id+n,a[j].id,1);\n\tfor(int i=1;i<=ac;i++) for(int j=1;j<=bc;j++) if(i!=j&&b[j]+a[i]) adde(a[i].id+n,b[j].id,1);\n\tfor(int i=1;i<=bc;i++) for(int j=1;j<=bc;j++) if(i!=j&&(b[i]+b[j]||b[j]+b[i])) adde(b[i].id+n,b[j].id,1);\n\treturn printf(\"%d\\n\",dinic(s,t)),0;\n}\n```",
        "postTime": 1602908000,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P3260[JLOI2014]\u955c\u9762\u901a\u9053\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "[\u955c\u9762\u901a\u9053](https://www.luogu.com.cn/problem/P3260)\n\n### \u9898\u76ee\u5927\u610f\n\n\u5728\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u5185\uff0c\u7ed9\u51fa\u4e00\u4e2a\u955c\u9762\u901a\u9053\u548c\u82e5\u5e72\u4e2a\u955c\u9762\u5143\u4ef6\uff0c\u6bcf\u4e2a\u5143\u4ef6\u53ef\u80fd\u662f\u5706\u5f62\u6216\u77e9\u5f62\u3002\u6c42\u51fa\u4e3a\u4e86\u80fd\u591f\u4f7f\u5149\u4ece\u901a\u9053\u5de6\u8fb9\u901a\u8fc7\u901a\u9053\u5230\u8fbe\u53f3\u8fb9\uff0c\u81f3\u5c11\u9700\u8981\u62ff\u8d70\u7684\u5143\u4ef6\u4e2a\u6570\u3002\n\n![](https://i.imgloc.com/2023/06/01/VktuU5.png)\n\n### \u601d\u8def\u5206\u6790\n\n\u9996\u5148\uff0c\u5b58\u5728\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c\u901a\u9053\u4e2d\u5b58\u5728\u4ece\u5de6\u8fb9\u5230\u53f3\u8fb9\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5149\u5c31\u80fd\u901a\u8fc7\u3002\n\n\u8bc1\u660e\u4e00\u4e0b\uff1a\u5f53\u901a\u9053\u4e2d\u5b58\u5728\u4ece\u5de6\u8fb9\u5230\u53f3\u8fb9\u7684\u8def\u5f84\u65f6\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06\u901a\u9053\u7ad6\u76f4\u653e\u7f6e\uff0c\u4ee4\u5de6\u8fb9\u671d\u4e0a\uff0c\u5411\u901a\u9053\u4e2d\u6ce8\u6c34\uff0c\u90a3\u4e48\u6c34\u4e00\u5b9a\u80fd\u4ece\u4e0b\u65b9\u6d41\u51fa\u3002\u8003\u8651\u6c34\u6070\u597d\u6d41\u51fa\u65f6\uff0c\u5373\u6d41\u51fa\u7684\u6c34\u5f62\u6210\u201c\u6c34\u7ebf\u201d\u65f6\uff0c\u5c06\u901a\u9053\u7684\u5269\u4f59\u90e8\u5206\u586b\u6ee1\uff0c\u90a3\u4e48\u5149\u4e00\u5b9a\u53ef\u4ee5\u6cbf\u987a\u7740\u6c34\u7684\u65b9\u5411\u901a\u8fc7\uff0c\u6240\u4ee5\u5728\u5269\u4f59\u90e8\u5206\u6ca1\u6709\u586b\u6ee1\u7684\u60c5\u51b5\u4e0b\u5149\u4e5f\u80fd\u901a\u8fc7\u3002\n\n![](https://i.imgloc.com/2023/06/01/VkWZR8.png)\n\n\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff0c\u81f3\u5c11\u9700\u8981\u62ff\u8d70\u591a\u5c11\u5143\u4ef6\u53ef\u4ee5\u4f7f\u5f97\u901a\u9053\u4e2d\u5b58\u5728\u4ece\u5de6\u5230\u53f3\u7684\u8def\u5f84\uff0c\u800c\u8fd9\u7b49\u4ef7\u4e8e\u901a\u9053\u7684\u4e0a\u4e0b\u8fb9\u754c\u65e0\u6cd5\u901a\u8fc7\u5143\u4ef6\u8fde\u901a\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u4e0b\u8fb9\u754c\u7684\u8fde\u901a\u6027\u4e0e\u5143\u4ef6\u7684\u5f62\u72b6\uff0c\u5927\u5c0f\u5747\u65e0\u5173\uff0c\u53ea\u4e0e\u5143\u4ef6\u4e4b\u95f4\u662f\u5426\u63a5\u89e6\u6709\u5173\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5143\u4ef6\u62bd\u8c61\u6210\u70b9\uff0c\u70b9\u4e0e\u70b9\u4e4b\u95f4\u5b58\u5728\u8fb9\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u70b9\u4ee3\u8868\u7684\u5143\u4ef6\u63a5\u89e6\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u5f20\u56fe\u3002\n\n\u6211\u4eec\u540c\u65f6\u4e5f\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u8fb9\u754c\u62bd\u8c61\u6210\u70b9\u52a0\u5165\u56fe\uff0c\u8fde\u8fb9\u65b9\u5f0f\u4e0e\u5143\u4ef6\u7c7b\u4f3c\uff0c\u5373\u5982\u679c\u5b58\u5728\u5143\u4ef6\u4e0e\u8fb9\u754c\u76f8\u63a5\u89e6\uff0c\u90a3\u4e48\u5c06\u8be5\u5143\u4ef6\u4ee3\u8868\u7684\u70b9\u548c\u8fb9\u754c\u4ee3\u8868\u7684\u70b9\u8fde\u8fb9\u3002\n\n![](https://i.imgloc.com/2023/06/01/VktvUw.png)\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\uff0c\u81f3\u5c11\u9700\u8981\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u53ef\u4ee5\u4f7f\u5f97\u4e0a\u4e0b\u8fb9\u754c\u4ee3\u8868\u7684\u4e24\u70b9\u4e0d\u8fde\u901a\u3002\n\n\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u6d41\u89e3\u51b3\u3002\n\n\u5efa\u56fe\u65b9\u5f0f\u6bd4\u8f83\u7b80\u5355\uff0c\u5c06\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u51fa\u5165\u70b9\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u5c06\u4e0a\u4e0b\u8fb9\u754c\u4ee3\u8868\u7684\u70b9\u8bbe\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u70b9\u4e0e\u70b9\u4e4b\u95f4\uff0c\u70b9\u4e0e\u8fb9\u754c\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a $+\\infty$ \u7684\u8fb9\u5373\u53ef\u3002\n\n![](https://i.imgloc.com/2023/06/01/VktQg3.png)\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5143\u4ef6\u4e4b\u95f4\u63a5\u89e6\uff1a\n\n- \u5706\u548c\u5706\n\n\u76f4\u63a5\u8ba1\u7b97\u4e24\u5706\u5fc3\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u534a\u5f84\u4e4b\u548c\u5373\u53ef\u3002\n\n- \u77e9\u5f62\u548c\u77e9\u5f62\n\n\u679a\u4e3e\u4e24\u4e2a\u77e9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u662f\u5426\u5728\u53e6\u4e00\u77e9\u5f62\u5185\u5373\u53ef\uff1f\n\n\u8003\u8651\u5982\u4e0b\u60c5\u51b5\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vx7pws9y.png)\n\n\u56e0\u6b64\u8fd8\u9700\u9010\u4e00\u5224\u65ad\u8fb9\u662f\u5426\u76f8\u4ea4\u3002\n\n- \u5706\u548c\u77e9\u5f62\n\n\u53ef\u4ee5\u8f6c\u5316\u6210\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u5706\u89d2\u77e9\u5f62\u5185\uff0c\u5c06\u5706\u89d2\u77e9\u5f62\u62c6\u6210\u56db\u4e2a\u5706\u548c\u4e24\u4e2a\u77e9\u5f62\uff0c\u5c06\u70b9\u89c6\u4e3a\u534a\u5f84\u4e3a $0$ \u7684\u5706\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u505a\u5373\u53ef\u3002\n\n![](https://i.imgloc.com/2023/06/01/VktG6V.th.png) ![](https://i.imgloc.com/2023/06/01/Vktd1d.th.png)\n\n### \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n\nusing namespace std;\nconst int M=330,N=220000;\n#define eps 1e-6\n#define inf 0x3f3f3f3f\n\nint n,S,T,idx=1,op;\ndouble in1,in2,in3,in4,cx,cy;\nint to[N],nxt[N],head[N],w[N];\nint cur[N],d[N];\n\nvoid add(int u,int v,int c){\n    idx++;to[idx]=v;nxt[idx]=head[u];head[u]=idx;w[idx]=c;\n    idx++;to[idx]=u;nxt[idx]=head[v];head[v]=idx;w[idx]=0;\n}\n\nqueue <int> q;\n\nbool bfs(){\n    memset(d,-1,sizeof d);\n    while(!q.empty()) q.pop();\n    cur[S]=head[S];\n    q.push(S);d[S]=0;\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=nxt[i]){\n            int v=to[i];\n            if(~d[v]||!w[i]) continue;\n            d[v]=d[now]+1;\n            cur[v]=head[v];\n            if(v==T) return 1;\n            q.push(v);\n        }\n    }\n    return 0;\n}\n\nint dfs(int s,int lim){\n    if(s==T) return lim;\n    int flow=0;\n    for(int i=cur[s];i&&flow<lim;i=nxt[i]){\n        int v=to[i];cur[s]=i;\n        if(d[v]!=d[s]+1||!w[i]) continue;\n        int t=dfs(v,min(w[i],lim-flow));\n        if(!t) d[v]=-1;\n        w[i]-=t;w[i^1]+=t;flow+=t;\n    }\n    return flow;\n}\n\nint dinic(){//dinic \u677f\u5b50\n    int ans=0,flow=0;\n    while(bfs()) while(flow=dfs(S,inf)) ans+=flow;\n    return ans;\n}\n\nstruct Node{\n    int type;//1\u4ee3\u8868\u5706\uff0c2\u4ee3\u8868\u77e9\u5f62\uff0c3\u8868\u793a\u7ebf\u6bb5\n    double x1,y1,x2,y2,r;\n}a[M];\n\ndouble dis_two_points(double x1,double y1,double x2,double y2){//\u8ba1\u7b97\u4e24\u70b9\u8ddd\u79bb\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\n\nbool Point_Rec(double x1,double y1,Node a){//\u5224\u65ad\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5185\n    return (x1>a.x1-eps)&&(x1<a.x2+eps)&&(y1>a.y1-eps)&&(y1<a.y2+eps);\n}\n\nbool Lin_Int(Node a,Node b){//\u5224\u65ad\u7279\u5b9a\u76f4\u7ebf\u662f\u5426\u76f8\u4ea4\n    return (a.x1<=b.x1&&b.x1<=a.x2)&&(b.y1<=a.y1&&a.y1<=b.y2);\n}\n\nbool Cyc_Int(Node a,Node b){//\u5224\u65ad\u5706\u662f\u5426\u76f8\u4ea4\n    return dis_two_points(a.x1,a.y1,b.x1,b.y1)<a.r+b.r+eps;\n}\n\nbool Rec_Int(Node a,Node b){//\u5224\u65ad\u4e24\u4e2a\u77e9\u5f62\u662f\u5426\u76f8\u4ea4\n    bool res1=Point_Rec(a.x1,a.y1,b);\n    bool res2=Point_Rec(a.x2,a.y2,b);\n    bool res3=Point_Rec(a.x1,a.y2,b);\n    bool res4=Point_Rec(a.x2,a.y1,b);//\u5224\u70b9\n    Node line1=Node{3,a.x1,a.y1,a.x2,a.y1};\n    Node line2=Node{3,a.x1,a.y1,a.x1,a.y2};\n    Node line3=Node{3,a.x2,a.y1,a.x2,a.y2};\n    Node line4=Node{3,a.x1,a.y2,a.x2,a.y2};\n    Node line5=Node{3,b.x1,b.y1,b.x2,b.y1};\n    Node line6=Node{3,b.x1,b.y1,b.x1,b.y2};\n    Node line7=Node{3,b.x2,b.y1,b.x2,b.y2};\n    Node line8=Node{3,b.x1,b.y2,b.x2,b.y2};//\u4e24\u4e2a\u77e9\u5f62\u516b\u6761\u7ebf\n    bool res5=Lin_Int(line1,line6)||Lin_Int(line1,line7);\n    bool res6=Lin_Int(line2,line5)||Lin_Int(line2,line8);\n    bool res7=Lin_Int(line3,line5)||Lin_Int(line3,line8);\n    bool res8=Lin_Int(line4,line6)||Lin_Int(line4,line8);//\u7ebf\u662f\u5426\u76f8\u4ea4\n    return res1||res2||res3||res4||res5||res6||res7||res8;\n}\n\nbool check(Node a,Node b){\n    if(a.type==1&&b.type==1) return Cyc_Int(a,b);\n    if(a.type==2&&b.type==2) return Rec_Int(a,b)||Rec_Int(b,a);//\u8003\u8651\u4e00\u4e2a\u77e9\u5f62\u5728\u53e6\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u60c5\u51b5\n    if(a.type!=b.type){\n        if(a.type==2) swap(a,b);\n        Node point=Node{1,a.x1,a.y1,0,0,0};\n        bool res1=Cyc_Int(point,Node{1,b.x1,b.y1,0,0,a.r});\n        bool res2=Cyc_Int(point,Node{1,b.x2,b.y2,0,0,a.r});\n        bool res3=Cyc_Int(point,Node{1,b.x1,b.y2,0,0,a.r});\n        bool res4=Cyc_Int(point,Node{1,b.x2,b.y1,0,0,a.r});//\u89c6\u4e3a\u56db\u4e2a\u5706\u548c\u4e24\u4e2a\u77e9\u5f62\n        bool res5=Point_Rec(a.x1,a.y1,Node{2,b.x1-a.r,b.y1,b.x2+a.r,b.y2});\n        bool res6=Point_Rec(a.x1,a.y1,Node{2,b.x1,b.y1-a.r,b.x2,b.y2+a.r});\n        return res1||res2||res3||res4||res5||res6;\n    }\n    return 0;\n}\n\nint main(){\n    scanf(\"%lf%lf%d\",&cx,&cy,&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%lf%lf%lf\",&op,&in1,&in2,&in3);\n        if(op==2) scanf(\"%lf\",&in4);\n        if(op==1) a[i]=Node{1,in1,in2,0,0,in3};\n        if(op==2) a[i]=Node{2,in1,in2,in3,in4};\n    }\n    S=N-5;T=N-6;\n    a[n+1]=Node{2,-inf,cy,inf,inf};//\u4e0a\u4e0b\u8fb9\u754c\u53ef\u4ee5\u5f53\u4f5c\u4e24\u4e2a\u65e0\u7a77\u5927\u7684\u77e9\u5f62\n    a[n+2]=Node{2,-inf,-inf,inf,0};\n    for(int i=1;i<=n;i++){\n        if(check(a[n+1],a[i])) add(S,2*i-1,inf);\n        if(check(a[n+2],a[i])) add(2*i,T,inf);\n        add(2*i-1,2*i,1);//\u5165\u70b9\u548c\u51fa\u70b9\n        for(int j=i+1;j<=n;j++)//\u66b4\u529b\u52a0\u8fb9\u5373\u53ef\n            if(check(a[i],a[j])){\n                add(2*i,2*j-1,inf);\n                add(2*j,2*i-1,inf);\n            }\n    }  \n    cout<<dinic()<<'\\n'; \n    return 0;\n}\n```",
        "postTime": 1685627766,
        "uid": 767096,
        "name": "TKXZ133",
        "ccfLevel": 4,
        "title": "\u955c\u9762\u901a\u9053 \u9898\u89e3"
    },
    {
        "content": "### Part 0. \u5410\u69fd\n\n\u9ed1\u9898\u9996A\u796d\uff0c\u53d1\u4e2a\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0bqwq\n\n\u672c\u9898\u7d27\u6263\u73b0\u5b9e\u751f\u6d3b\uff0c\u9898\u9762\u7b80\u6d01\u660e\u4e86\uff0c\u8fde\u5c0f\u5b66\u751f\u90fd\u80fd\u770b\u61c2\uff1b\u8003\u5bdf\u77e5\u8bc6\u70b9\u5168\u9762\uff0c\u4e0d\u4ec5\u5c06\u7f51\u7edc\u6d41\u4e0e\u9898\u76ee\u5de7\u5999\u5730\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u8fd8\u8003\u5bdf\u4e86\u77e9\u5f62\u78b0\u649e\u68c0\u6d4b\u76f8\u5173\u77e5\u8bc6\uff0c\u4e3a\u7b54\u9898\u8005\u5c06\u6765\u7684```2D```\u6e38\u620f\u5f00\u53d1\u6253\u4e0b\u4e86\u57fa\u7840\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u672c\u9898\u771f\u53ef\u8c13\u662f\u7b80\u7ea6\u800c\u6df1\u9083\u7684\u4e00\u9053\u5999\u9898\uff08\u9003\n\n### Part 1. \u9898\u76ee\u5927\u610f\n\n\u5728\u4e00\u4e2a\u955c\u9762\u901a\u9053\u4e2d\u6709\u4e00\u4e9b**\u8868\u9762\u662f\u955c\u9762**\u7684\u5149\u5b66\u5143\u4ef6\uff0c\u53ef\u4ee5\u4e92\u76f8\u91cd\u53e0\uff0c\u8bf7\u95ee\u6700\u5c11\u5220\u6389\u591a\u5c11\u4e2a\u5143\u4ef6\uff0c\u5c31\u80fd\u4f7f\u5f97\u5149\u7ebf\u80fd\u4ece\u8fd9\u4e00\u5934\u5230\u8fbe\u53e6\u4e00\u5934\uff1f\n\n### Part 2.\u95ee\u9898\u5206\u6790\n\n\u9996\u5148\u8fd9\u9053\u9898\u76ee\u4e3a\u4e86\u5413\u552c\u4f60\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/17614.png)\n\n\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u5e76\u6ca1\u6709\u8981\u6c42\u8ba9\u4f60\u6784\u5efa\u51fa\u4e00\u6761\u8fd9\u6837\u7684\u5149\u7ebf\u6765\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u53ea\u662f**\u786e\u4fdd\u901a\u9053\u80fd\u900f\u5149**\u5c31\u884c\u4e86\u3002\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u6837\u5b50\u624d\u80fd\u786e\u4fdd\u901a\u9053\u80fd\u900f\u5149\u5462\uff1f\u7b54\u6848\u662f\uff1a\u786e\u4fdd**\u5b83\u7684\u4e2d\u95f4\u6709\u7f1d\u9699**\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u9898\u76ee\u6709\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n* \u5149\u7ebf\u53ef\u4ee5\u4ece\u6700\u5de6\u7aef\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u3001\u4efb\u610f\u4e00\u4e2a\u89d2\u5ea6\u5c04\u5165\u3002\n\n* \u5149\u5b66\u4eea\u5668\u548c\u901a\u9053\u7684\u4e0a\u4e0b\u9762\u662f\u955c\u5b50\u505a\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u628a\u5149\u5438\u6536\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5149\u5b50\u90fd\u53ef\u4ee5\u4ece\u4efb\u610f\u89d2\u5ea6\u5c04\u51fa\uff0c\u53ea\u8981\u4e2d\u95f4\u6709\u7f1d\u9699\uff0c\u5b83\u5c31\u53ef\u4ee5\u5230\u8fbe\u4efb\u4f55\u5730\u65b9\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53c8\u5982\u4f55\u624d\u80fd\u4f7f\u5f97\u4e2d\u95f4\u6709\u7f1d\u9699\u4ea7\u751f\u5462\uff1f\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/im67zb2r.png)\n\n\u5982\u56fe\uff0c\u5bf9\u4e8e\u4e92\u76f8\u4ea7\u751f\u63a5\u89e6\u7684\u4e24\u4e2a\u56fe\u5f62\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u6240\u4ee3\u8868\u7684\u70b9\u8fde\u63a5\u8d77\u6765\uff1b\u5bf9\u4e8e\u548c\u955c\u9762\u901a\u9053\u7684\u4e0a\u4e0b\u4e24\u7aef\u4ea7\u751f\u63a5\u89e6\u7684\u56fe\u5f62\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u5206\u522b\u548c\u539f\u70b9\u3001\u6c47\u70b9\u8fde\u63a5\u8d77\u6765\u3002\u4e8e\u662f\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a**\u6700\u591a\u5220\u53bb\u51e0\u4e2a\u70b9**\uff0c\u4f7f\u5f97```S```\u548c```T```\u4e0d\u8fde\u901a\u3002\n\n\u663e\u800c\u6613\u89c1\uff0c\u8fd9\u5c31\u662f\u4e2a\u5178\u578b\u7684\u6700\u5c0f\u5272\u95ee\u9898\u3002\n\n\u4e8e\u662f\uff0c\u8fd9\u9053\u9898\u6700\u96be\u7684\u90e8\u5206\u5c31\u5f97\u5230\u89e3\u51b3\u4e86\u3002\u6ce8\u610f\u8fd9\u91cc\u662f\u5220\u70b9\u800c\u4e0d\u662f\u5220\u8fb9\uff0c\u6240\u4ee5\u8981\u62c6\u70b9\uff0c\u62c6\u70b9\u7684\u8fc7\u7a0b\u5c31\u4e0d\u518d\u9610\u8ff0\u4e86\u3002\n\n\u4e0b\u9762\u6211\u4eec\u6765\u5230\u4e86\u8fd9\u9053\u9898\u7b2c\u4e8c\u96be\u7684\u90e8\u5206\uff1a\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u56fe\u5f62\u4e92\u76f8\u4ea7\u751f\u63a5\u89e6\uff1f\n\n\u5982\u679c\u662f\u4e24\u4e2a\u5706\u5f62\uff0c\u633a\u597d\u529e\u7684\uff0c\u6839\u636e\u521d\u4e2d\u6570\u5b66\uff0c\u6c42\u5706\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u534a\u5f84\u4e4b\u548c\u5373\u53ef\n\n\u5982\u679c\u662f\u4e24\u4e2a\u77e9\u5f62\uff0c\u4e5f\u633a\u597d\u529e\u7684\uff0c\u6700\u7b80\u5355\u7c97\u66b4\u7684\u529e\u6cd5\u662f\uff1a\u5224\u65ad\u77e9\u5f62\u7684\u56db\u4e2a\u70b9\u4e2d\u662f\u5426\u6709\u70b9\u843d\u5728\u53e6\u4e00\u4e2a\u77e9\u5f62\u4e2d\u5373\u53ef\u3002\uff08\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f18\u5316\u4e00\u4e0b\uff09\n\n\u95ee\u9898\u662f\uff1a\u4e00\u4e2a\u77e9\u5f62\u548c\u4e00\u4e2a\u5706\u5f62\u7684\u60c5\u51b5\u8be5\u5982\u4f55\u89e3\u51b3\uff1f\n\n\u8003\u8651\u5230\u77e9\u5f62\u7684\u56db\u6761\u8fb9**\u5747\u5e73\u884c\u4e8e\u5750\u6807\u8f74**\uff0c\u6211\u7ed9\u5927\u5bb6\u5e26\u6765\u4e00\u79cd\u6bd4\u8f83\u6613\u4e8e\u7406\u89e3\u7684\u529e\u6cd5\u3002\n\n\u5148\u6765\u770b\u770b\u4e09\u4e2a\u6761\u4ef6\uff1a\n\n* ```\u6761\u4ef6A```\uff1a\u77e9\u5f62\u662f\u5426\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u9876\u70b9\u843d\u5728\u5706\u7684\u5185\u90e8\uff1f\n\n* ```\u6761\u4ef6B```\uff1a\u4ee5\u5706\u5fc3\u4e3a\u539f\u70b9\u6784\u5efa\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u77e9\u5f62\u5bf9\u89d2\u7ebf\u4e0a\u7684\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u90fd\u5728\u8be5\u5750\u6807\u7cfb\u7684\u540c\u4e00\u8c61\u9650\uff1f\n\n* ```\u6761\u4ef6C```\uff1a\u77e9\u5f62\u662f\u5426\u548c\u5706\u7684\u5916\u63a5\u6b63\u65b9\u5f62\u4ea7\u751f\u63a5\u89e6\uff1f\n\n\u5982\u679c```\u6761\u4ef6C```\u4e0d\u6ee1\u8db3\uff0c\u90a3\u5b83\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u4ea7\u751f\u78b0\u649e\n\n\u5982\u679c```\u6761\u4ef6A```\u4e0d\u6ee1\u8db3\uff08\u6709\u9876\u70b9\u843d\u5728\u5706\u5185\uff09\uff0c\u90a3\u5b83\u4eec\u4e00\u5b9a\u4f1a\u4ea7\u751f\u78b0\u649e\n\n\u5f53```\u6761\u4ef6C```\u548c```\u6761\u4ef6A```\u540c\u65f6\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u6211\u4eec\u518d\u6765\u770b```\u6761\u4ef6B```\n\n\u5982\u679c```\u6761\u4ef6B```\u6ee1\u8db3\uff0c\u90a3\u4e48\u5b83\u4eec\u4e0d\u4f1a\u4ea7\u751f\u78b0\u649e\uff1b\u5426\u5219\u4f1a\u4ea7\u751f\u78b0\u649e\u3002\n\n\u81ea\u5df1\u753b\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\uff0c\u4f60\u4f1a\u53d1\u73b0\u786e\u5b9e\u5982\u6b64\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u65e0\u8db3\u8f7b\u91cd\u7684\u5c0f\u95ee\u9898\uff1a\u5982\u4f55\u5224\u65ad\u56fe\u5f62\u548c\u901a\u9053\u7684\u4e0a\u4e0b\u4e24\u8fb9\u63a5\u89e6\uff1f\n\n\u518d\u521b\u5efa\u4e24\u4e2a\u56fe\u5f62\uff0c\u5206\u522b\u8868\u793a\u5b83\u7684\u4e0a\u4e0b\u4e24\u6761\u201c\u7ebf\u201d\u5c31\u884c\u4e86\u3002\n\n### Part 3.\u4ee3\u7801\n\n\u5185\u9644\u6ce8\u91ca\uff0c\u53ef\u8bfb\u6027\u633a\u5f3a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define KIND_CIRCLE 0\n#define KIND_RECTANGLE 1\n#define INF 0x7fffffff\n#define MAXN 10001\n#define MAXM 2000001\n\n/////////////////////global\ndouble cx, cy;\nint n;\n\n/////////////////////object\nclass Object\n{\npublic:\n    bool kind; //0->circle 1->rectangle\n    double x;\n    double y;\n    double width;\n    double height;\n    double radius;\n    bool isCrashed(Object obj);\n    Object()\n    {\n        kind = false;\n        x = y = width = height = radius = 0;\n    }\n};\nObject objectList[MAXN];\ndouble distance(double x1, double y1, double x2, double y2)\n{\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\nbool isCrashed_Rectangle(double x1, double y1, double width1, double height1,\n                         double x2, double y2, double width2, double height2)\n{\n    return x1 <= x2 + width2 && x2 <= x1 + width1 && y1 >= y2 - height2 && y2 >= y1 - height1;\n}\nbool isCrashed_Circle(double x1, double y1, double radius1,\n                      double x2, double y2, double radius2)\n{\n    return distance(x1, y1, x2, y2) <= radius1 + radius2;\n}\nbool isCrashed_RectangleAndCircle(double rectx, double recty, double rectwidth, double rectheight,\n                                  double cirx, double ciry, double cirradius)\n{\n    double x1, y1, x2, y2, cirrectx, cirrecty, cirrectwidth, cirrectheight;\n    x1 = rectx;\n    x2 = rectx + rectwidth;\n    y1 = recty;\n    y2 = recty - rectheight; //\u6ce8\u610fy\u8f74\u4e0a\u52a0\u4e0b\u51cf\n    cirrectx = cirx - cirradius;\n    cirrecty = ciry + cirradius; //\u6ce8\u610fy\u8f74\u4e0a\u52a0\u4e0b\u51cf\n    cirrectheight = cirrectwidth = cirradius * 2;\n    bool flagA;                         //\u6761\u4ef6A:\u77e9\u5f62\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u70b9\u843d\u5728\u5706\u5185\uff08\u5230\u5706\u5fc3\u7684\u8ddd\u79bb\u5927\u4e8e\u534a\u5f84\uff09\n    bool flagB;                         //\u6761\u4ef6B:\u77e9\u5f62\u5bf9\u89d2\u7ebf\u4e0a\u7684\u4e24\u4e2a\u9876\u70b9\u90fd\u5728\u5706\u5fc3\u7684\u540c\u4e00\u8c61\u9650\n    int sideX1, sideY1, sideX2, sideY2; //\u6761\u4ef6B\u7684\u8f85\u52a9\u53d8\u91cf,1\u4e3a\u6b63\u65b9\u5411,-1\u4e3a\u8d1f\u65b9\u5411\n    bool flagC;                         //\u6761\u4ef6C:\u77e9\u5f62\u548c\u5706\u7684\u5916\u63a5\u6b63\u65b9\u5f62\u4ea7\u751f\u63a5\u89e6\n    if (distance(x1, y1, cirx, ciry) > cirradius &&\n        distance(x1, y2, cirx, ciry) > cirradius &&\n        distance(x2, y1, cirx, ciry) > cirradius &&\n        distance(x2, y2, cirx, ciry) > cirradius)\n        flagA = true;\n    else\n        flagA = false;\n    sideX1 = x1 - cirx > 0 ? 1 : -1;\n    sideY1 = y1 - ciry > 0 ? 1 : -1;\n    sideX2 = x2 - cirx > 0 ? 1 : -1;\n    sideY2 = y2 - ciry > 0 ? 1 : -1;\n    if (sideX1 == sideY1 && sideX2 == sideY2)\n        flagB = true;\n    else\n        flagB = false;\n    if (isCrashed_Rectangle(rectx, recty, rectwidth, rectheight,\n                            cirrectx, cirrecty, cirrectwidth, cirrectheight))\n        flagC = true;\n    else\n        flagC = false;\n    if (!flagC)\n        return false;\n    else if (!flagA)\n        return true;\n    else if (flagB)\n        return false;\n    else\n        return true;\n}\nbool Object::isCrashed(Object obj)\n{\n    if (kind == KIND_CIRCLE)\n    {\n        if (obj.kind == KIND_CIRCLE)\n            return isCrashed_Circle(x, y, radius, obj.x, obj.y, obj.radius);\n        else //KIND_RECTANGLE\n            return isCrashed_RectangleAndCircle(obj.x, obj.y, obj.width, obj.height, x, y, radius);\n    }\n    else //KIND_RECTANGLE\n    {\n        if (obj.kind == KIND_CIRCLE)\n            return isCrashed_RectangleAndCircle(x, y, width, height, obj.x, obj.y, obj.radius);\n        else //KIND_RECTANGLE\n            return isCrashed_Rectangle(x, y, width, height, obj.x, obj.y, obj.width, obj.height);\n    }\n}\n\n/////////////////////network_flow\nstruct Edge\n{\n    int next, to, dis;\n} bian[MAXM];\nint h[MAXN], used[MAXN], dep[MAXN];\nint s, t;\nint temp = 1;\nvoid add(int from, int to, int dis)\n{\n    temp++;\n    bian[temp].dis = dis;\n    bian[temp].next = h[from];\n    bian[temp].to = to;\n    h[from] = temp;\n}\nvoid addE(int from, int to, int dis)\n{\n    add(from, to, dis);\n    add(to, from, 0);\n}\nbool bfs()\n{\n    int x, i;\n    queue<int> Q;\n    Q.push(s);\n    memset(dep, 0, sizeof(dep));\n    dep[s] = 1;\n    while (!Q.empty())\n    {\n        x = Q.front();\n        Q.pop();\n        for (i = h[x]; i; i = bian[i].next)\n            if (bian[i].dis != 0 && dep[bian[i].to] == 0)\n            {\n                dep[bian[i].to] = dep[x] + 1;\n                Q.push(bian[i].to);\n            }\n    }\n    return dep[t] != 0;\n}\nint dfs(int x, int in)\n{\n    int out = 0, i, k;\n    if (x == t)\n        return in;\n    for (i = used[x]; i && in != 0; i = bian[i].next, used[x] = i)\n    {\n        if (bian[i].dis != 0 && dep[bian[i].to] == dep[x] + 1)\n        {\n            k = dfs(bian[i].to, min(bian[i].dis, in));\n            bian[i].dis -= k;\n            bian[i ^ 1].dis += k;\n            in -= k;\n            out += k;\n        }\n    }\n    if (out == 0)\n        dep[x] = 0;\n    return out;\n}\nint getId(int depth, int x)\n{\n    return (depth - 1) * 500 + x;\n}\n\n/////////////////////main\nint main()\n{\n    scanf(\"%lf%lf\", &cx, &cy);\n    scanf(\"%d\", &n);\n    int x, i, j, x1, y1, x2, y2;\n    //create \"line\"\n    Object upObject, downObject;\n    upObject.kind = KIND_RECTANGLE;\n    upObject.x = 0;\n    upObject.y = cy;\n    upObject.width = cx;\n    upObject.height = 0;\n    downObject.kind = KIND_RECTANGLE;\n    downObject.x = 0;\n    downObject.y = 0;\n    downObject.width = cx;\n    downObject.height = 0;\n    //build network\n    s = MAXN - 2;\n    t = MAXN - 1;\n    for (i = 1; i <= n; i++)\n        addE(getId(1, i), getId(2, i), 1);\n\n    for (i = 1; i <= n; i++)\n    {\n        //read object data\n        scanf(\"%d\", &x);\n        if (x == 1) //circle\n        {\n            objectList[i].kind = KIND_CIRCLE;\n            scanf(\"%lf%lf%lf\", &objectList[i].x, &objectList[i].y, &objectList[i].radius);\n        }\n        else //rectangle\n        {\n            objectList[i].kind = KIND_RECTANGLE;\n            scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n            objectList[i].x = x1;\n            objectList[i].y = y2;\n            objectList[i].width = x2 - x1;\n            objectList[i].height = y2 - y1;\n        }\n        //build network\n        for (j = 1; j <= i - 1; j++)\n        {\n            if (objectList[i].isCrashed(objectList[j]))\n            {\n                addE(getId(2, i), getId(1, j), INF);\n                addE(getId(2, j), getId(1, i), INF);\n            }\n        }\n    }\n    //build network\n    for (i = 1; i <= n; i++)\n    {\n        if (objectList[i].isCrashed(upObject))\n            addE(s, getId(1, i), INF);\n        if (objectList[i].isCrashed(downObject))\n            addE(getId(2, i), t, INF);\n    }\n    //dinic\n    int ans = 0;\n    while (bfs())\n    {\n        memcpy(used, h, sizeof(h));\n        ans += dfs(s, INF);\n    }\n    printf(\"%d\", ans);\n    return 0;\n    //\u5b8c\u7ed3\u6492\u82b1awa\n}\n```",
        "postTime": 1622966088,
        "uid": 125429,
        "name": "SfumatoCannon_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3260 \u3010[JLOI2014]\u955c\u9762\u901a\u9053\u3011"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u9898\u89e3\uff1a**\u5728\u7269\u7406\u4e0a\u6709\u4e00\u4e2a\u5b9a\u7406\uff0c\u53ea\u8981\u6c34\u80fd\u901a\u8fc7\u7684\u5730\u65b9\uff0c\u5149\u5c31\u80fd\u901a\u8fc7\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5c31\u662f\u53ea\u8981$S$\u548c$T$\u8054\u901a\u5149\u5c31\u80fd\u901a\u8fc7\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u95ee\u9898\u4ece\u201c\u6700\u5c11\u62ff\u8d70\u591a\u5c11\u4e2a\u5149\u5b66\u5143\u4ef6\u540e\uff0c\u5b58\u5728\u4e00\u6761\u5149\u7ebf\u7ebf\u8def\u53ef\u4ee5\u4eceCD\u5c04\u51fa\u201d\u8f6c\u5316\u4e3a\u201c\u6700\u5c11\u62ff\u8d70\u591a\u5c11\u4e2a\u5173\u5b66\u5143\u4ef6\u540e\uff0c$AC$\u548c$BD$\u4e0d\u8fde\u901a\u201d\u3002\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8f6c\u5316\u540e\u7684\u95ee\u9898\u4f3c\u4e4e\u5c31\u597d\u89e3\u51b3\u4e86\u3002\u6211\u4eec\u73b0\u5728\u8003\u8651\uff0c\u8f6c\u5316\u540e\u7684\u95ee\u9898\u600e\u4e48\u5efa\u56fe\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u5149\u5b66\u5143\u4ef6\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$1$\u3002\u5bf9\u4e8e$S$\u548c\u5143\u4ef6\u3001$T$\u548c\u5143\u4ef6\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u5143\u4ef6\u548c$BD$\u6709\u4ea4\u70b9\uff0c\u6d4b\u5f53\u524d\u5143\u4ef6\u548c$S$\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\uff1b\u5982\u679c\u5f53\u524d\u5143\u4ef6\u548c$AC$\u6709\u4ea4\u70b9\uff0c\u5219\u5f53\u524d\u5143\u4ef6\u548c$T$\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\u3002\u5bf9\u4e8e\u4e24\u4e2a\u5149\u5b66\u5143\u4ef6\u4e4b\u95f4\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u5143\u4ef6\u4e4b\u95f4\u76f8\u4ea4\u6211\u4eec\u5c31\u628a\u8fd9\u4e24\u4e2a\u70b9\u7528\u4e00\u6761\u8fb9\u6743\u4e3a$inf$\u7684\u8fb9\u8fde\u5728\u4e00\u8d77\u3002\u73b0\u5728\u96be\u70b9\u4e0d\u662f\u5982\u4f55\u5efa\u56fe\uff0c\u800c\u662f\u600e\u4e48\u5224\u65ad\u4e24\u4e2a\u5149\u5b66\u5143\u4ef6\u76f8\u4ea4\u3002\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u4e24\u4e2a\u5149\u5b66\u5143\u4ef6\u662f\u540c\u4e00\u79cd\u5149\u5b66\u5143\u4ef6\u7684\u8fd9\u79cd\u60c5\u51b5\u6bd4\u8f83\u597d\u5224\u65ad\uff0c\u5206\u522b\u5c31\u662f\u77e9\u5f62\u76f8\u4ea4\u7684\u5224\u65ad\u548c\u5706\u5f62\u76f8\u4ea4\u7684\u5224\u65ad\uff0c\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u6df7\u5728\u4e00\u8d77\u5c31\u4e0d\u597d\u5224\u65ad\u4e86\u3002\u5706\u5f62\u548c\u77e9\u5f62\u76f8\u4ea4\u4e00\u5171\u5206\u4e3a\u56db\u79cd\u60c5\u51b5\uff1a1.\u77e9\u5f62\u7684\u4e00\u4e2a\u89d2\u5728\u5706\u5f62\u4e4b\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u76f4\u63a5\u7528\u70b9\u548c\u5706\u7684\u5173\u7cfb\u8fdb\u884c\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u30022.\u5706\u5f62\u5728\u77e9\u5f62\u4e24\u4fa7\uff0c\u4f46\u662f\u77e9\u5f62\u6ca1\u6709\u89d2\u5728\u5706\u5f62\u91cc\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u5148\u8981\u5224\u65ad\u5706\u5fc3\u662f\u4e0d\u662f\u5728\u77e9\u5f62\u7684\u4e0a\u4e0b\u8fb9\u6240\u5728\u76f4\u7ebf\u4e4b\u95f4\uff0c\u82e5\u4e0d\u662f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e00\u5b9a\u4e0d\u6210\u7acb\uff0c\u82e5\u662f\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u77e9\u5f62\u7684\u5de6\u53f3\u8fb9\u6240\u5728\u76f4\u7ebf\u76f4\u7ebf\u662f\u4e0d\u662f\u6709\u4e00\u6761\u7ecf\u8fc7\u5706\u5f62\uff0c\u8fd9\u4e2a\u76f4\u63a5\u7528\u76f4\u7ebf\u4e8e\u5706\u7684\u4f4d\u7f6e\u5173\u7cfb\u5c31\u53ef\u4ee5\u30023.\u7b2c\u4e09\u79cd\u60c5\u51b5\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u57fa\u672c\u4e00\u6837\uff0c\u5c31\u662f\u628a\u5706\u5f62\u5728\u77e9\u5f62\u7684\u5de6\u53f3\u53d8\u6210\u5706\u5f62\u5728\u77e9\u5f62\u7684\u4e0a\u4e0b\u30024.\u5706\u5f62\u5728\u77e9\u5f62\u4e2d\u95f4\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u5224\u65ad\u5706\u5fc3\u662f\u4e0d\u662f\u5728\u77e9\u5f62\u4e4b\u5185\u5c31\u597d\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define N 610\n#define inf 1000000000\nint n,m,x,y,lab,s,t,dis[N],ans,kind[N],a[N],b[N],c[N],d[N];\nint cur[N],head[N],to[N*N<<1],nxt[N*N<<1],val[N*N<<1],idx=1;\nvoid add(int a,int b,int c)\n    {nxt[++idx]=head[a],to[idx]=b,val[idx]=c,head[a]=idx;}\nbool bfs()\n{\n    memset(dis,-1,sizeof dis);\n    queue <int> q;q.push(s),dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        if(p==t) return true;\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n    } return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=cur[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(val[i]) cur[p]=i;\n            if(!temp) break;\n        } return flow-temp;\n}\nvoid dinic() {int tmp=0;while(bfs())\n    {memcpy(cur,head,sizeof head);while((tmp=dfs(s,inf))!=0) ans+=tmp;}}\nint pla(int i,int j) {return (i-1)*m+j;}\nlong long squ(int x) {return 1ll*x*x;}\nbool line1(int i,int j)\n{\n    if(min(a[j],a[i])!=a[i]||max(a[j],c[i])!=c[i]) return false;\n    if(min(b[j],b[i])==b[i]&&max(b[j],d[i])==d[i]) return true;\n    return squ(b[j]-b[i])<=squ(c[j])||squ(b[j]-d[i])<=squ(c[j]);\n}\nbool line2(int i,int j)\n{\n    if(min(b[j],b[i])!=b[i]||max(b[j],d[i])!=d[i]) return false;\n    return squ(a[j]-a[i])<=squ(c[j])||squ(a[j]-c[i])<=squ(c[j]);\n}\nbool point(int i,int j)\n{\n    return squ(a[i]-a[j])+squ(b[i]-b[j])<=squ(c[j])||\n        squ(a[i]-a[j])+squ(d[i]-b[j])<=squ(c[j])||\n        squ(c[i]-a[j])+squ(d[i]-b[j])<=squ(c[j])||\n        squ(c[i]-a[j])+squ(b[i]-b[j])<=squ(c[j]);\n}\nbool meet(int i,int j)\n{\n    if(kind[i]==1&&kind[j]==1) return squ(a[i]-a[j])+squ(b[i]-b[j])<=squ(c[i]+c[j]);\n    if(kind[i]==2&&kind[j]==2)\n        return min(c[i],c[j])>=max(a[i],a[j])&&min(d[i],d[j])>=max(b[i],b[j]);\n    if(kind[i]==1) swap(i,j);\n    return line1(i,j)||line2(i,j)||point(i,j);\n}\nbool up(int i)\n    {if(kind[i]==1) return b[i]+c[i]>=y; return d[i]>=y;}\nbool down(int i)\n    {if(kind[i]==1) return b[i]-c[i]<=0; return b[i]<=0;}\nint main()\n{\n    scanf(\"%d%d%d\",&x,&y,&n),s=n*2+1,t=n*2+2;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d%d\",&kind[i],&a[i],&b[i],&c[i]);\n        if(kind[i]==2) scanf(\"%d\",&d[i]);\n    }\n    for(int i=1;i<=n;i++) add(i,i+n,1),add(i+n,i,0);\n    for(int i=1;i<=n;i++) if(down(i)) add(s,i,inf),add(i,s,0);\n    for(int i=1;i<=n;i++) if(up(i)) add(i+n,t,inf),add(t,i+n,0);\n    for(int i=1;i<=n;i++) for(int j=i+1;j<=n;j++) if(meet(i,j))\n        add(i+n,j,inf),add(j,i+n,0),add(j+n,i,inf),add(i,j+n,0);\n    dinic(),printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545618865,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3260 \u3010[JLOI2014]\u955c\u9762\u901a\u9053\u3011"
    },
    {
        "content": "\u849f\u84bb\u7b2c\u4e00\u7bc7\u9ed1\u9898\u9898\u89e3 awa  \n\u5c06\u5149\u6e90\u770b\u4f5c\u6269\u6563\u7684\u6c34\u6ce2\uff0c\u78b0\u5230\u8fb9\u7f18\u5c31\u4f1a\u53cd\u5f39\u56de\u53bb\u3002\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u8981\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u901a\u9053\u4e2d\u95f4\u6709\u7a7a\u9699\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u80fd\u8ba9\u5149\u4ece\u8d77\u70b9\u53cd\u5c04\u5230\u7ec8\u70b9\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u53bb\u6389\u6700\u5c11\u7684\u539f\u4ef6\uff0c\u4f7f\u5f97\u8d77\u70b9\u4e0e\u7ec8\u70b9\u8054\u901a\u3002  \n\u8003\u8651\u7f51\u7edc\u6d41\u3002\u6bcf\u4e2a\u5143\u4ef6\u62c6\u6210\u51fa\u5165\u70b9\uff0c\u6d41\u91cf\u4e3a $1$\u3002\u91cd\u53e0\u7684\u5143\u4ef6\u8fde\u4e00\u6761\u6d41\u91cf $\\inf$ \u7684\u8fb9\uff0c\u4e0e\u901a\u9053\u7684\u4e24\u5757\u955c\u9762\u91cd\u53e0\u7684\u4e5f\u8fde\u4e00\u6761\u6d41\u91cf $\\inf$ \u7684\u8fb9\u3002\u6700\u7ec8\u7b54\u6848\u5c31\u662f\u8be5\u56fe\u7684\u6700\u5c0f\u5272\u3002  \n\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u539f\u4ef6\u662f\u5426\u91cd\u53e0\u3002\u6211\u4eec\u5c06\u5176\u5206\u6210\u4e09\u79cd\u60c5\u51b5\u8003\u8651\uff1a  \n### \u5706\u4e0e\u5706  \n\u76f4\u63a5\u5224\u65ad\u4e24\u5706\u5fc3\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u4e24\u5706\u534a\u5f84\u4e4b\u548c\u3002\n```cpp\ninline \nll dis(ll ax, ll ay, ll bx, ll by) {\n\treturn (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n}\n\ninline \nbool check(circle p, circle q) {\n\treturn dis(p.x, p.y, q.x, q.y) <= (ll)(p.r + q.r) * (p.r + q.r);\n}\n```\n### \u65b9\u4e0e\u65b9  \n\u4e24\u77e9\u5f62\u76f8\u4ea4\uff0c\u5fc5\u6709\u4e00\u4e2a\u77e9\u5f62\u7684\u9876\u70b9\u5728\u53e6\u4e00\u4e2a\u77e9\u5f62\u5185\u3002\u76f4\u63a5\u5224\u65ad\u5373\u53ef\u3002\n```cpp\ninline \nbool check(rectangle p, rectangle q) {\n\tif (q.ax <= p.ax && p.ax <= q.bx && q.ay <= p.ay && p.ay <= q.by) return 1;\n\tif (q.ax <= p.bx && p.bx <= q.bx && q.ay <= p.ay && p.ay <= q.by) return 1;\n\tif (q.ax <= p.ax && p.ax <= q.bx && q.ay <= p.by && p.by <= q.by) return 1;\n\tif (q.ax <= p.bx && p.bx <= q.bx && q.ay <= p.by && p.by <= q.by) return 1;\n\treturn 0;\n}\n```\n### \u5706\u4e0e\u65b9  \n\u8003\u8651\u77e9\u5f62\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0e\u5706\u6709\u4ea4\u70b9\u3002\u6bcf\u6761\u8fb9\u53ef\u4ee5\u5206\u6210\u4e09\u79cd\u60c5\u51b5\u8003\u8651\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/j6j4ndtl.png)  \n\u4e0e $x$ \u8f74\u5782\u76f4\u7684\u8fb9\u53ea\u8981\u8f6c\u4e00\u4e0b\u5c31\u597d\u3002\n```cpp\ninline \nbool check(circle p, int ax, int bx, int y, bool f) {\n\tif (f) swap(p.x, p.y);\n\tif (ax > p.x) return dis(ax, y, p.x, p.y) <= (ll)p.r * p.r;\n\tif (bx < p.x) return dis(bx, y, p.x, p.y) <= (ll)p.r * p.r;\n\treturn abs(p.y - y) <= p.r;\n}\n```\n\u63a5\u7740\u628a\u56db\u6761\u8fb9\u5168\u90e8\u5e26\u8fdb\u53bb\u7b97\u4e00\u904d\uff1a\n```cpp\ninline \nbool check(circle p, rectangle q) {\n\tif (check(p, q.ax, q.bx, q.ay, 0)) return 1;\n\tif (check(p, q.ax, q.bx, q.by, 0)) return 1;\n\tif (check(p, q.ay, q.by, q.ax, 1)) return 1;\n\tif (check(p, q.ay, q.by, q.bx, 1)) return 1;\n\treturn 0;\n}\n```\n\u6700\u540e\uff0c\u5982\u4f55\u5224\u65ad\u901a\u9053\u65c1\u7684\u4e24\u4e2a\u955c\u9762\u5462\uff1f\u53ea\u8981\u5c06\u4ed6\u4eec\u8868\u793a\u6210\u5bbd\u5ea6\u4e3a $0$ \u7684\u77e9\u5f62\u6765\u6bd4\u8f83\u5c31\u597d\u4e86\u3002\u5b8c\u7ed3\u6492\u82b1\u3002\n# AC \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 3010;\nconst int MAXM = MAXN * (MAXN - 1);\n\nconst int inf = 0x3f3f3f3f;\n\nstruct edge {\n\tint v, c, nxt;\n} e[MAXM];\n\nint head[MAXN], tot = 1;\n\nvoid add(int u, int v, int c) {\n    e[++tot] = { v, c, head[u] }, head[u] = tot;\n    e[++tot] = { u, 0, head[v] }, head[v] = tot;\n}\n\nint level[MAXN];\n\nint bfs(int s, int t) {\n    memset(level, 255, sizeof level);\n    queue<int> q;\n    level[s] = 0, q.push(s);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = e[i].nxt) {\n            if (e[i].c > 0 && level[e[i].v] < 0) {\n                level[e[i].v] = level[u] + 1;\n                q.push(e[i].v);\n            }\n        }\n    }\n    return level[t];\n}\n\nint dfs(int u, int t, int f) {\n    if (u == t) return f;\n    for (int i = head[u]; i; i = e[i].nxt) {\n        if (e[i].c > 0 && level[u] < level[e[i].v]) {\n            int d = dfs(e[i].v, t, min(f, e[i].c));\n            if (d > 0) {\n                e[i].c -= d, e[i ^ 1].c += d;\n                return d;\n            }\n        }\n    }\n    return 0;\n}\n\ninline \nint max_flow(int s, int t) {\n    int flow = 0, f;\n    while (~bfs(s, t)) {\n        while ((f = dfs(s, t, inf)) > 0) flow += f;\n    }\n    return flow;\n}\n\nstruct circle {\n\tint x, y, r;\n} a[MAXN];\n\nstruct rectangle {\n\tint ax, ay, bx, by;\n} b[MAXN];\n\nint tota, totb;\n\ninline \nll dis(ll ax, ll ay, ll bx, ll by) {\n\treturn (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n}\n\ninline \nbool check(circle p, circle q) {\n\treturn dis(p.x, p.y, q.x, q.y) <= (ll)(p.r + q.r) * (p.r + q.r);\n}\n\ninline \nbool check(rectangle p, rectangle q) {\n\tif (q.ax <= p.ax && p.ax <= q.bx && q.ay <= p.ay && p.ay <= q.by) return 1;\n\tif (q.ax <= p.bx && p.bx <= q.bx && q.ay <= p.ay && p.ay <= q.by) return 1;\n\tif (q.ax <= p.ax && p.ax <= q.bx && q.ay <= p.by && p.by <= q.by) return 1;\n\tif (q.ax <= p.bx && p.bx <= q.bx && q.ay <= p.by && p.by <= q.by) return 1;\n\treturn 0;\n}\n\ninline \nbool check(circle p, int ax, int bx, int y, bool f) {\n\tif (f) swap(p.x, p.y);\n\tif (ax > p.x) return dis(ax, y, p.x, p.y) <= (ll)p.r * p.r;\n\tif (bx < p.x) return dis(bx, y, p.x, p.y) <= (ll)p.r * p.r;\n\treturn abs(p.y - y) <= p.r;\n}\n\ninline \nbool check(circle p, rectangle q) {\n\tif (check(p, q.ax, q.bx, q.ay, 0)) return 1;\n\tif (check(p, q.ax, q.bx, q.by, 0)) return 1;\n\tif (check(p, q.ay, q.by, q.ax, 1)) return 1;\n\tif (check(p, q.ay, q.by, q.bx, 1)) return 1;\n\treturn 0;\n}\n\ninline \nbool check(rectangle p, circle q) {\n\treturn check(q, p);\n}\n\nint n, s, t, k;\n\nint x, y;\n\nint main() {\n    scanf(\"%d%d%d\", &x, &y, &n), s = 0, t = n << 1 | 1;\n    for (int i = 1; i <= n; i++) {\n    \tscanf(\"%d\", &k);\n    \tif (k == 1) ++tota, scanf(\"%d%d%d\", &a[tota].x, &a[tota].y, &a[tota].r);\n    \telse ++totb, scanf(\"%d%d%d%d\", &b[totb].ax, &b[totb].ay, &b[totb].bx, &b[totb].by);\n\t}\n\tfor (int i = 1; i <= n; i++) add(i, i + n, 1);\n\tfor (int i = 1; i <= tota; i++) {\n\t\tif (check(a[i], { 0, 0, x, 0 })) add(s, i, inf);\n\t}\n\tfor (int i = 1; i <= totb; i++) {\n\t\tif (check(b[i], { 0, 0, x, 0 })) add(s, tota + i, inf);\n\t}\n\tfor (int i = 1; i <= tota; i++) {\n\t\tif (check(a[i], { 0, y, x, y })) add(n + i, t, inf);\n\t}\n\tfor (int i = 1; i <= totb; i++) {\n\t\tif (check(b[i], { 0, y, x, y })) add(n + tota + i, t, inf);\n\t}\n\tfor (int i = 1; i <= tota; i++) {\n\t\tfor (int j = i + 1; j <= tota; j++) {\n\t\t\tif (check(a[i], a[j])) add(n + i, j, inf), add(n + j, i, inf);\n\t\t}\n\t\tfor (int j = 1; j <= totb; j++) {\n\t\t\tif (check(a[i], b[j])) add(n + i, tota + j, inf), add(n + tota + j, i, inf);\n\t\t}\n\t}\n\tfor (int i = 1; i <= totb; i++) {\n\t\tfor (int j = i + 1; j <= totb; j++) {\n\t\t\tif (check(b[i], b[j])) add(n + tota + i, tota + j, inf), add(n + tota + j, tota + i, inf);\n\t\t}\n\t}\n\tprintf(\"%d\", max_flow(s, t));\n}\n```",
        "postTime": 1660881971,
        "uid": 406941,
        "name": "Register_int",
        "ccfLevel": 6,
        "title": "P3260 \u9898\u89e3"
    },
    {
        "content": "~~\u8fbe\u514b\u6cf0\u5e73yyds\uff01~~\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u611f\u6027\u7406\u89e3\u4e00\u4e2a\u524d\u7f6e\u829d\u58eb\uff1a\u53ea\u8981\u5b58\u5728\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u901a\u8def\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u201c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u7a7a\u6c14\u662f\u8054\u901a\u7684\u201d\uff09\uff0c\u90a3\u5149\u5c31\u4e00\u5b9a\u80fd\u8fc7\u5f97\u53bb\u3002\u611f\u6027\u7406\u89e3\u4e0b\u662f\u5f88\u597d\u60f3\u5230\u8fd9\u4e00\u6b65\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u60f3\u8c61\u6709\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u53ef\u4ee5\u8fde\u7740\u76f8\u63a5\u7684\u5668\u5177\u79fb\u52a8\uff0c\u90a3\u4e48\u5de6\u53f3\u8fb9\u754c\u4e4b\u95f4\u5b58\u5728\u901a\u8def\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u80fd\u4ece\u4e0a\u8fb9\u754c\u79fb\u52a8\u5230\u4e0b\u8fb9\u754c\u3002\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0c\u5982\u679c\u5b58\u5728\u901a\u8def\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u5b9a\u8fc7\u4e0d\u4e86\u901a\u8def\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5b9e\u9645\u4e0a\u5df2\u7ecf\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u56fe\u8bba\u6a21\u578b\uff1a\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u81f3\u5c11\u5220\u53bb\u51e0\u4e2a\u70b9\u53ef\u4ee5\u4f7f\u5f97\u8d77\u70b9\u548c\u7ec8\u70b9\u4e4b\u95f4\u4e0d\u8fde\u901a\u3002\u90a3\u663e\u7136\u62c6\u70b9\u6700\u5c0f\u5272\u5c31\u80fd\u505a\u4e86\u3002\n\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u56fe\u600e\u4e48\u5efa\uff0c\u7b49\u4e8e\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u80fd\u591f\u5224\u5b9a\u4e24\u4e2a\u56fe\u5f62\u662f\u5426\u76f8\u4ea4\u3002\n\n\u56fe\u5f62\u4e00\u5171\u4e09\u79cd\uff1a\u77e9\u5f62\uff0c\u5706\u5f62\uff0c\uff08\u6a2a\u5e73\u7ad6\u76f4\u7684\uff09\u7ebf\u6bb5\u3002\n\n1. \u7ebf\u6bb5\u5bf9\u7ebf\u6bb5\n\n\u2026\u2026\u7565\u3002\n\n2. \u7ebf\u6bb5\u5bf9\u5706\u5f62\n\n\u7528\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u622a\u5706\u5f97\u5230\u53e6\u4e00\u6761\u7ebf\u6bb5\uff0c\u8f6c\u5316\u4e3a 1\u3002\n\n3. \u7ebf\u6bb5\u5bf9\u77e9\u5f62\n\n\u5176\u5b9e\u77e9\u5f62\u53ef\u4ee5\u7edf\u4e00\u8f6c\u5316\u4e3a\u56db\u6761\u7ebf\u6bb5\u2026\u2026\u4e0d\u8fc7\u5176\u5b9e\u65e0\u6240\u8c13\uff0c\u5148\u5199\u4e2a\u8f85\u52a9\u51fd\u6570\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5185\uff0c\u7136\u540e\u5982\u679c\u7ebf\u6bb5\u6709\u7aef\u70b9\u5728\u77e9\u5f62\u5185\u76f4\u63a5\u505a\u5b8c\uff0c\u5426\u5219\u5224\u4e00\u4e0b\u4e24\u4e2a\u7aef\u70b9\u5728\u77e9\u5f62\u5f02\u4fa7\u5373\u53ef\u3002\n\n4. \u77e9\u5f62\u5bf9\u77e9\u5f62\n\n\u5224\u4e00\u4e0b\u56db\u4e2a\u9876\u70b9\u6709\u6ca1\u6709\u88ab\u53e6\u4e00\u4e2a\u5305\u542b\u7684\uff0c\u7136\u540e\u53cd\u8fc7\u6765\u4e5f\u5224\u4e00\u4e0b\uff0c\u505a\u5b8c\u4e86\u3002\n\n5. \u77e9\u5f62\u5bf9\u5706\u5f62\n\n\u2026\u2026\u8fd9\u4e2a\u662f\u771f\u7684\u5f97\u628a\u77e9\u5f62\u62c6\u6210\u56db\u6761\u7ebf\u6bb5\u4e86\u3002\n\n6. \u5706\u5f62\u5bf9\u5706\u5f62\n\n\u5224\u4e0b\u5706\u5fc3\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u534a\u5f84\u4e4b\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7ed3\u5408\u8fd9\u4e9b\u6240\u6709\uff0c\u5c31\u505a\u5b8c\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct pnt {\n  int x, y;\n};\nstruct rng {\n  int l, r;\n  friend rng operator&(const rng& a, const rng& b) {\n    return {max(a.l, b.l), min(a.r, b.r)};\n  }\n};\nstruct seg {\n  pnt s, t;\n};\nstruct rct {\n  pnt pos[4];\n  pnt& operator[](const int& to) { return pos[to]; }\n  const pnt& operator[](const int& to) const { return pos[to]; }\n  friend bool isi(const rct& a, const pnt& b) {\n    return b.x >= a[0].x && b.y >= a[0].y && b.x <= a[2].x && b.y <= a[2].y;\n  }\n  friend bool isi(const rct& a, const seg& b) {\n    if (isi(a, b.s) || isi(a, b.t)) return true;\n    return b.s.y >= a[0].y && b.t.y <= a[2].y && b.s.x <= a[0].x &&\n           b.t.x >= a[2].x;\n  }\n  friend bool isi(const rct& a, const rct& b) {\n    for (int i = 0; i < 4; ++i)\n      if (isi(a, b[i]) || isi(b, a[i])) return true;\n    return false;\n  }\n};\nstruct crc : pnt {\n  int r;\n  friend bool isi(const crc& c, const seg& to) {\n    if (auto [a, b] = to; a.x == b.x) {\n      auto dt = 1ll * c.r * c.r - 1ll * (a.x - c.x) * (a.x - c.x);\n      if (dt < 0) return false;\n      auto l = c.y - sqrt(dt), r = c.y + sqrt(dt);\n      auto [L, R] = minmax(a.y, b.y);\n      return L <= r && l <= R;\n    } else if (a.y == b.y) {\n      auto dt = 1ll * c.r * c.r - 1ll * (a.y - c.y) * (a.y - c.y);\n      if (dt < 0) return false;\n      auto l = c.x - sqrt(dt), r = c.x + sqrt(dt);\n      auto [L, R] = minmax(a.x, b.x);\n      return L <= r && l <= R;\n    }\n    return false;\n  }\n  friend bool isi(const crc& c, const rct& r) {\n    for (int i = 0; i < 3; ++i)\n      if (isi(c, seg{r[i], r[i + 1]})) return true;\n    return isi(c, seg{r[3], r[0]});\n  }\n  friend bool isi(const crc& a, const crc& b) {\n    return 1ll * (a.x - b.x) * (a.x - b.x) + 1ll * (a.y - b.y) * (a.y - b.y) <=\n           1ll * (a.r + b.r) * (a.r + b.r);\n  }\n};\npair<int, seg> up, dn;\nint n, s, t;\nvector<pair<int, rct>> r;\nvector<pair<int, crc>> c;\nextern void add(int u, int v, int c);\nvoid lnk(auto& a, auto& b) {\n  if (isi(a.second, b.second)) {\n    add(a.first << 1 | 1, b.first << 1, INT_MAX);\n    add(b.first << 1 | 1, a.first << 1, INT_MAX);\n  }\n}\nvoid init() {\n  int cx, cy;\n  cin >> cx >> cy;\n  cin >> n;\n  dn = {n + 1, {{0, 0}, {cx, 0}}}, up = {0, {{0, cy}, {cx, cy}}};\n  for (int i = 1, op; i <= n; ++i)\n    if (cin >> op; op == 1) {\n      int x, y, r;\n      cin >> x >> y >> r;\n      c.emplace_back(i, crc{x, y, r});\n    } else {\n      int x1, y1, x2, y2;\n      cin >> x1 >> y1 >> x2 >> y2;\n      r.emplace_back(i, rct{{{x1, y1}, {x1, y2}, {x2, y2}, {x2, y1}}});\n    }\n  for (int i = 1; i <= n; ++i) add(i << 1, i << 1 | 1, 1);\n  for (auto rr : r) lnk(rr, up), lnk(rr, dn);\n  for (auto cc : c) lnk(cc, up), lnk(cc, dn);\n  for (int i = 0, len = r.size(); i < len; ++i)\n    for (int j = i + 1; j < len; ++j) lnk(r[i], r[j]);\n  for (int i = 0, len = c.size(); i < len; ++i)\n    for (int j = i + 1; j < len; ++j) lnk(c[i], c[j]);\n  for (auto rr : r)\n    for (auto cc : c) lnk(cc, rr);\n  s = 1, t = (n + 1) << 1;\n}\nconstexpr int N = 609;\nstruct {\n  int to, nxt, c;\n} e[N * N << 1];\nint hd[N], tot = 1, d[N];\nvoid add(int u, int v, int c) {\n  e[++tot] = {v, hd[u], c}, hd[u] = tot;\n  e[++tot] = {u, hd[v], 0}, hd[v] = tot;\n}\nbool bfs() {\n  queue<int> q;\n  q.push(s);\n  memset(d, 0, sizeof d);\n  d[s] = 1;\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    for (int i = hd[u]; i; i = e[i].nxt)\n      if (e[i].c && !d[e[i].to]) {\n        q.push(e[i].to), d[e[i].to] = d[u] + 1;\n        if (e[i].to == t) return true;\n      }\n  }\n  return false;\n}\nint dinic(int x, int f) {\n  if (x == t) return f;\n  int rst = f, k;\n  for (int i = hd[x]; i; i = e[i].nxt)\n    if (e[i].c && d[e[i].to] == d[x] + 1) {\n      if (!(k = dinic(e[i].to, min(e[i].c, rst)))) d[e[i].to] = 0;\n      e[i].c -= k, e[i ^ 1].c += k, rst -= k;\n    }\n  if (f == rst) d[x] = -1;\n  return f - rst;\n}\nint dinic() {\n  int ans = 0;\n  while (bfs()) ans += dinic(s, INT_MAX);\n  return ans;\n}\nint main() {\n  init();\n  cout << dinic() << endl;\n  return 0;\n}\n```\n\n\u4ee5\u4e0a\u3002",
        "postTime": 1644822592,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "1 0 0 0 t h A C"
    },
    {
        "content": "\u55f7\u55f7\u4fee\u4e861\u4e2a\u5c0f\u65f6\u4e2d\u95f4\u8fd8\u9893\u4e86\u4e00\u4f1a\u5b8c\u4e86\u8d70\u6295\u65e0\u8def\u62ffdalao\u4ee3\u7801\u6328\u4e2a\u51fd\u6570\u62fc\u63a5\u63d0\u4ea4\u67e5\u9519\n\n\u6700\u540e\u53d1\u73b0\u67d0\u5904a\u6253\u6210b\u624b\u6b8b\u6bc1\u4e00\u751f\n\n\u4e0d\u5199\u4e2a\u9898\u89e3\u5bf9\u4e0d\u8d77\u81ea\u5df1\u4e86\u90fd\n\n\u9996\u5148\u8003\u8651\u4e00\u4e0b\uff0c\u8111\u8865\u4e0b\u4f60\u7528\u7740\u624b\u7535\u771f\u7684\u4ece\u8fd9\u4e48\u4e00\u4e2a\u901a\u9053\u91cc\u7167\u8fc7\u6765...\n\n\u6211\u4eec\u4f1a\u60ca\u5947\u5730\u53d1\u73b0\uff0c\u53ea\u8981\u8fd9\u4e2a\u901a\u9053\u80fd\u900f\u6c14\u5c31\u80fd\u900f\u5149\uff01\n\n\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u89e3\u51b3\u5982\u4f55\u5224\u65ad\u8fd9\u4e2a\u901a\u9053\u662f\u5426\u900f\u6c14\u4e86\u3002\n\n\u8003\u8651\u5c06\u6bcf\u4e2a\u5143\u4ef6\u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u901a\u9053\u4e0a\u4e0b\u8fb9\u754c\u5355\u72ec\u5f53\u62102\u4e2a\u70b9\n\n\u6bcf\u4e24\u4e2a\u76f8\u4ea4\u76f8\u5207\uff08\u603b\u4e4b\u4e0d\u901a\u6c14\uff09\u7684\u5143\u4ef6\u8fde\u8fb9\uff0c\u4e0e\u4e0a\u4e0b\u8fb9\u754c\u76f8\u4ea4\u76f8\u5207\u7684\u5c31\u4e0e\u8fb9\u754c\u8fde\u8fb9\n\n\u901a\u6c14\u7684\u65f6\u5019\u5c31\u662f\u6ca1\u6709\u4ece\u4e0a\u8fb9\u754c\u8fde\u5230\u4e0b\u8fb9\u754c\u7684\u5143\u4ef6\u4eec\n\n\u6211\u4eec\u8fd9\u4e48\u5efa\u56fe\u5c31\u662f\u4e0a\u8fb9\u754c\u5230\u4e0b\u8fb9\u754c\u4e0d\u8fde\u901a\n\n\u8fd8\u8981\u6c42\u53bb\u6389\u7684\u5143\u4ef6\u6570\u76ee\u6700\u5c11\n\n\u6240\u4ee5\u5c31\u662f\u6700\u5c0f\u5272\uff0c\u5f00\u59cb\u6109\u5feb\u5730\u5957dinic\u677f\u5b50\n\n\u4e3a\u4e86\u6bcf\u4e2a\u5143\u4ef6\u53ea\u88ab\u53bb\u6389\u4e00\u6b21\uff0c\u6bcf\u4e2a\u5143\u4ef6\u6211\u4eec\u62c6\u62102\u4e2a\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\n\n\u4ee3\u7801\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double ddf;\nconst int N=100000+10;\nconst int M=1250;\nconst int fuck=0x3f3f3f3f;\nconst int inf=0x3f3f3f3f;\nint n,m,k,st,ed;\nstruct edge{\n    int to,next,cap;\n}g[N*10];\nint head[M],tot=2;\nvoid add(int st,int ed,int cp){\n    g[tot].to=ed;\n    g[tot].next=head[st];\n    g[tot].cap=cp;\n    head[st]=tot++;\n}\nvoid ins(int st,int ed,int cp,int rp){\n    add(st,ed,cp);\n    add(ed,st,rp);\n}\nstruct node{\n    int t,x1,y1,x2,y2,r;\n    void inp(){\n        scanf(\"%d\",&t);\n        if(t==1)scanf(\"%d%d%d\",&x1,&y1,&r);\n        else scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n    }\n}mp[M];\nint sqr(int x){\n    return x*x;\n}\nddf dis(int x1,int y1,int x2,int y2){\n    return sqrt(sqr(x1-x2)+sqr(y1-y2));\n}\nbool chk(int a,int b){\n    int t1=mp[a].t,t2=mp[b].t;\n    if(t1==2&&t2==1){\n        int x1=mp[a].x1,y1=mp[a].y1,x2=mp[a].x2,y2=mp[a].y2;//\u8fd9\u91cc\u6700\u540e\u4e00\u4e2aa\u6253\u6210b\u67e5\u4e861\u5c0f\u65f6\n        int xx=mp[b].x1,yy=mp[b].y1,rr=mp[b].r;\n        if(dis(x1,y1,xx,yy)<=rr||dis(x2,y2,xx,yy)<=rr||dis(x1,y2,xx,yy)<=rr||dis(x2,y1,xx,yy)<=rr)return 1;\n        if(x1<=xx&&x2>=xx&&(abs(y1-yy)<=rr||abs(y2-yy)<=rr))return 1;\n        if(y1<=yy&&y2>=yy&&(abs(x1-xx)<=rr||abs(x2-xx)<=rr))return 1;\n        return 0;\n    }\n    else if(t1==1&&t2==1){\n        return dis(mp[a].x1,mp[a].y1,mp[b].x1,mp[b].y1)<=mp[a].r+mp[b].r;\n    }\n    else if(t1==2&&t2==2){\n        return max(mp[a].x1,mp[b].x1)<=min(mp[a].x2,mp[b].x2)&&max(mp[a].y1,mp[b].y1)<=min(mp[a].y2,mp[b].y2);\n    }\n    else{\n        return chk(b,a);\n    }\n}\nvoid init(){\n    int x,y,z;\n    st=1,ed=1242;\n    scanf(\"%d%d%d\",&x,&y,&n);\n    int a,b,c;\n    for(int i=1;i<=n;i++){\n        mp[i].inp();\n        for(int j=1;j<i;j++){\n            if(chk(i,j)){\n                ins(i+i+1,j+j,inf,0);\n                ins(j+j+1,i+i,inf,0);\n            }\n        }\n        if(mp[i].t==1){\n            if(mp[i].y1-mp[i].r<=0)ins(st,i+i,inf,0);\n            if(mp[i].y1+mp[i].r>=y)ins(i+i+1,ed,inf,0);\n        }\n        else{\n            if(mp[i].y1<=0)ins(st,i+i,inf,0);\n            if(mp[i].y2>=y)ins(i+i+1,ed,inf,0);\n        }\n        ins(i+i,i+i+1,1,0);\n    }\n}\nint lv[N];\nqueue<int>q;\nbool bfs(int s,int t){\n    memset(lv,0,sizeof(lv));\n    lv[s]=1;\n    while(!q.empty())q.pop();\n    q.push(s);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=head[x];i;i=g[i].next){\n            int v=g[i].to;\n            if(g[i].cap&& !lv[v]){\n                lv[v]=lv[x]+1;\n                q.push(v);\n            }\n        }\n    }\n    return lv[t];\n}\nint dfs(int x,int mf){\n    if(!mf||x==ed)return mf;\n    int tmp=0;\n    for(int i=head[x];i;i=g[i].next){\n        int v=g[i].to;\n        if(g[i].cap&&lv[v]==lv[x]+1){\n            int f=dfs(v,min(mf,g[i].cap));\n            tmp+=f;\n            mf-=f;\n            g[i].cap-=f;\n            g[i^1].cap+=f;\n        }\n    }\n    return tmp;\n}\nint dinic(int s,int t){\n    int r=0;\n    while(bfs(s,t))r+=dfs(s,inf);\n    return r;\n}\nint main(){\n    init();\n    printf(\"%d\",dinic(st,ed));\n    return 0;\n}\n```",
        "postTime": 1511616810,
        "uid": 38725,
        "name": "xiwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3260 \u3010[JLOI2014]\u955c\u9762\u901a\u9053\u3011"
    }
]