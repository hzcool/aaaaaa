[
    {
        "content": "\u8fd9\u9053\u9898\u7b97\u662f\u5f88\u7b80\u5355\u7684dfs\uff0c\u90fd\u4e0d\u9700\u8981\u526a\u679d\u3002\n\n\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u641c\u7d22\u51fd\u6570\uff0c\u51fd\u6570\u4f20\u9012\u7684\u53d8\u91cf\u4e3at\u548cs,t\u8868\u793a\u641c\u7d22\u5230\u4e86\u7b2ct\u79cd\u9972\u6599\uff0cs\u8868\u793a\u76ee\u524d\u9009\u7684\u9972\u6599\u7684\u603b\u6570\u3002\n\n\u7136\u540e\u786e\u5b9a\u641c\u7d22\u7684\u8fb9\u754c\uff0c\u4e5f\u5c31\u662ft>\u9972\u6599\u7684\u79cd\u6570\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u6b21\u9009\u7684\u90a3\u4e9b\u9972\u6599\u4e2d\u7684\u7ef4\u751f\u7d20\u4e4b\u548c\u662f\u4e0d\u662f\u90fd\u5927\u4e8e\u7b49\u4e8e\u725b\u6bcf\u5929\u9700\u8981\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf\uff08\u53ef\u4ee5\u7528\u4e2a\u51fd\u6570\u5199\uff09\u3002\u5982\u679c\u662f\uff0c\u5c31\u5224\u65ad\u9009\u7684\u9972\u6599\u7684\u603b\u6570\u5c0f\u4e8e\u4ee5\u524d\u7684\u6700\u4f18\u89e3\uff08\u7c7b\u4f3c\u4e8e\u6253\u64c2\u53f0\u7684\u90a3\u79cd\u64cd\u4f5c\uff09\uff0c\u5982\u679c\u5c0f\u4e8e\uff0c\u90a3\u4e48\u5f53\u524d\u6700\u4f18\u89e3\u5c31\u8981\u88ab\u66ff\u6362\u6389\uff0c\u800c\u6700\u4f18\u89e3\u7684\u4e00\u4e2a\u6570\u7ec4\u4e5f\u8981\u88ab\u66ff\u6362\u6389\u3002\u6700\u540ereturn\u5373\u53ef\u3002\n\n\u63a5\u7740\u5f00\u59cb\u5199\u51fd\u6570\u7684\u4e3b\u4f53\u90e8\u5206\u3002\u9996\u5148\u6211\u4eec\u9009\u7b2ct\u79cd\u9972\u6599\uff0c\u90a3\u4e48s\u5c31\u8981\u52a0\u4e00\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u8981\u628at\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u5f53\u4e2d\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\u8981\u5b58\uff09\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u7528\u51fd\u6570\uff0c\u5373search(t+1,s+1);  \u8c03\u5b8c\u51fd\u6570\u540e\uff0c\u8bb0\u5f97\u8981\u56de\u6eaf.\u628at\u4ece\u6570\u7ec4\u4e2d\u62ff\u8d70\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4e0d\u9009\u7b2ct\u79cd\u9972\u6599\uff0c\u8fd9\u6837\u505a\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u641c\u7d22\u4e00\u6b65\uff1asearch(t+1,s); \u5c31\u884c\u4e86\u3002\n\n\u6700\u540e\u8f93\u51fa\u89e3\u5373\u53ef\u3002\n\n\u601d\u8def\u5c31\u8fd9\u4e48\u591a\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u90e8\u5206\u3002\n\n# \u8bf7\u52ff\u6284\u88ad\uff01\uff01\uff01\n\n```cpp\n#include <bits/stdc++.h>//\u61d2\u4eba\u6700\u7231\u7684\u4e07\u80fd\u5934\u6587\u4ef6 \nusing namespace std;//\u540d\u5b57\u7a7a\u95f4 \nint ans[1000];//\u8fd9\u4e2a\u6570\u7ec4\u662f\u6765\u5b58\u50a8\u89e3\u7684\u3002 \nint a[1000];//\u8868\u793a\u725b\u6bcf\u5929\u9700\u8981\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf\u3002 \nint b[1000][1000];//\u6bcf\u79cd\u9972\u6599\u5305\u542b\u7684\u5404\u79cd\u7ef4\u4ed6\u547d\u7684\u91cf\u7684\u591a\u5c11\u3002\nint c[1000];//\u6bcf\u6b21\u641c\u7d22\u9009\u7684\u9972\u6599\u7f16\u53f7 \nint n,m,minn=100000000;\nbool pd(int x)//\u8fd9\u662f\u5224\u65ad\u6bcf\u6b21\u9009\u7684\u90a3\u4e9b\u9972\u6599\u4e2d\u7684\u7ef4\u751f\u7d20\u4e4b\u548c\u662f\u4e0d\u662f\u90fd\u5927\u4e8e\u7b49\u4e8e\u725b\u6bcf\u5929\u9700\u8981\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf\u7684\u51fd\u6570 \n{\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint sum=0;\n\t\tfor(int j=1; j<=x; j++)\n\t\tsum+=b[c[j]][i];//\u7528\u4e00\u4e2asum\u7d2f\u52a0 \n\t\tif(sum<a[i]) return false;//\u5982\u679c\u6709\u4e00\u9879\u7ef4\u751f\u7d20\u6bd4\u725b\u9700\u8981\u7684\u7ef4\u751f\u7d20\u8981\u5c11\uff0c\u76f4\u63a5\u8fd4\u56defalse \n\t}\n\treturn true;\n}\nvoid search(int t,int s)//\u641c\u7d22\u7684\u51fd\u6570 \n{\n\tif(t>m)//\u8fb9\u754c\n\t{\n\t\tif(pd(s))//\u5fc5\u987b\u5f97\u6ee1\u8db3\u6761\u4ef6\n\t\t{\n\t\t\tif(s<minn)//\u5224\u65ad\u9009\u7684\u9972\u6599\u7684\u603b\u6570\u5c0f\u4e8e\u4ee5\u524d\u7684\u6700\u4f18\u89e3\n\t\t\t{\n\t\t\t\tminn=s;//\u66ff\u6362\u6389\n\t\t\t\tfor(int i=1; i<=minn; i++)\n\t\t\t\t{\n\t\t\t\t\tans[i]=c[i];//\u7b54\u6848\u7684\u6570\u7ec4\u4e5f\u8981\u88ab\u66ff\u6362\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn; //\u8fd4\u56de\n\t}\n\tc[s+1]=t;//\u628at\u653e\u5728\u6570\u7ec4\u91cc\n\tsearch(t+1,s+1);//\u641c\u7d22\u4e00\u6b65\n\tc[s+1]=0;//\u56de\u6eaf\u4e00\u6b65\n\tsearch(t+1,s);//\u5982\u679c\u4e0d\u9009\u7b2ct\u79cd\u9972\u6599\u7684\u64cd\u4f5c\n}\nint main()//\u4e3b\u51fd\u6570\u90e8\u5206\n{\n\tcin>>n;//\u8bfb\u5165\n\tfor(int i=1; i<=n; i++)\n\tcin>>a[i];//\u8bfb\u5165\n\tcin>>m;//\u8bfb\u5165\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tfor(int j=1; j<=n; j++)\n\t\tcin>>b[i][j];//\u8fd8\u662f\u8bfb\u5165\n\t}\n\tsearch(1,0);//\u8c03\u7528\u641c\u7d22\u51fd\u6570\n\tcout<<minn<<' ';//\u8f93\u51fa\n\tfor(int i=1; i<=minn; i++)\n\tcout<<ans[i]<<' ';//\u8fd8\u662f\u8f93\u51fa\n\treturn 0;//\u7ed3\u675f\u7a0b\u5e8f\n}\n```\n\n\n",
        "postTime": 1521452660,
        "uid": 42443,
        "name": "06ray",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u770b\u4e86\u534a\u5929\uff0c\u7ed3\u679c\u53d1\u73b0\u5927\u4f6c\u4eec\u7528\u7684\u90fd\u662fdfs\uff0c\u597d\u5947\u7684\u6211\u4e8e\u662f\u6253\u4e86\u4e00\u4e2abfs\uff0c\u540e\u6765\u8c03\u8bd5\u8c03\u4e86\u534a\u5929\uff0c\u7ec8\u4e8eAC\u3002\n\n\u601d\u8def\u8bf4\u660e\uff1a\n\n\t1\u3001\u5b9a\u4e49\u961f\u5217\uff0c\u7c7b\u578b\u4e3a\u7ed3\u6784\u4f53\uff0c\u7ed3\u6784\u4f53\u5185\u4e00\u5171\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u4fdd\u5b58\u9972\u6599\u4e2a\u6570\u3001\u9972\u6599\u7f16\u53f7\u548c\u9972\u6599\u5185\u7ef4\u751f\u7d20\u542b\u91cf\u4e4b\u548c\uff1b\n    \n\t2\u3001\u5148\u5c06\u6240\u6709\u7c7b\u578b\u7684\u9972\u6599\u653e\u5165\u961f\u5217\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5176\u4e2d\u4e00\u79cd\u9972\u6599\u5c31\u53ef\u4ee5\u6ee1\u8db3\u6240\u6709\u7684\u5976\u725b\uff1b\n\n\t3\u3001\u8fdb\u5165\u5faa\u73af\uff0c\u5faa\u73af\u5185\u5224\u65ad\u961f\u9996\u5143\u7d20\u662f\u5426\u6ee1\u8db3\uff0c\u82e5\u6ee1\u8db3\u8f93\u51fa\u518d\u7ed3\u675f\u51fd\u6570\u5373\u53ef\uff0c\u5426\u5219\u518d\u4ece\u6b64\u5143\u7d20\u52a0\u4e0a\u6b64\u5143\u7d20\u6700\u540e\u4e00\u79cd\u9972\u6599+1\u5f00\u59cb\u7684\u6240\u6709\u9972\u6599\u7684\u548c\uff0c\u5e76\u4fdd\u5b58\u9972\u6599\u7684\u5e8f\u53f7\uff0c\u9972\u6599\u6570+1\uff0c\u6700\u540e\u518d\u653e\u5165\u961f\u5c3e\uff1b\n    \n\u4ee5\u4e0b\u662f\u4ee3\u7801\n\n```\n#include<iostream>\n#include<queue>\nusing namespace std;\nint a[30][30],b[30];\nint n,m;\nstruct node{\n\tint wss[30];\n\tint num[30];\n\tint ans;\n}q;\nvoid bfs()\n{\n\tqueue<node>que;\n\tq=que.front();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tq.wss[j]=a[i][j];\n\t\tq.num[1]=i;\n\t\tq.ans=1;\n\t\tque.push(q);\n\t}\n\twhile(!que.empty())\n\t{\n\t\tnode s,t;\n\t\ts=que.front();\n\t\tt=que.front();\n\t\tque.pop();\n\t\tbool w=1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(s.wss[i]<b[i])\n\t\t\t{\n\t\t\t\tw=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(w==1)\n\t\t{\n\t\t\tcout<<s.ans<<' ';\n\t\t\tfor(int i=1;i<=s.ans;i++)cout<<s.num[i]<<\" \";\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=s.num[s.ans]+1;i<=m;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tt.wss[j]=s.wss[j]+a[i][j];\n\t\t\tt.ans=s.ans+1;\n\t\t\tt.num[t.ans]=i;\n\t\t\tque.push(t);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>b[i];\n\tcin>>m;\n\tfor(int i=1;i<=m;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcin>>a[i][j];\n\tbfs();\n\treturn 0;\n}\n```\n\u6c42\u8fc7QAQ",
        "postTime": 1565753221,
        "uid": 118184,
        "name": "In_blue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u6211\u5f88\u83dc\uff0c\u5c31\u53ea\u7ed9\u5927\u5bb6\u6765\u4e2a$dfs$\u3002       \n\u5199$dfs$\u6700\u91cd\u8981\u7684\u662f\u4f60\u5f97\u6709\u4e2a\u7ed3\u675f\u6761\u4ef6\uff08\u8981\u4e0d\u7136\u4f60\u5199\u4e86\u5f88\u957f\u7684\u4ee3\u7801\u4e00\u8fd0\u884c\u2014\u2014\u6b7b\u5faa\u73af\u3002\uff09\u8fd9\u91cc\u7684\u63a5\u6570\u6761\u4ef6\u5f88\u5bb9\u6613\u60f3\u5230\u5c31\u662f\u725b\u6ee1\u8db3\u4e86\u4ed6\u7684\u7ef4\u4ed6\u547d\uff0c\u901a\u4fd7\u4e00\u70b9\u8bf4\u5c31\u662f\u5582\u9971\u4e86\u725b\u3002          \n\u7136\u540e\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u679a\u4e3e\uff01\uff08\u7b80\u5355\u7c97\u66b4\uff09\u3002       \n\u63a5\u7740\u6211\u4eec\u6765\u770b\u4ee3\u7801\uff1a\n\n```\n#include<iostream>//\u5934\u6587\u4ef6\nusing namespace std;//\u7a7a\u95f4\u547d\u540d\u3002\nint f,nfeed[30],type,t[30][30],m=20,mx[30],ans[30];//\u5b9a\u4e49\nbool cz(int x)\n{\n\tfor(int i=1;i<=f;i++)\n\t{\n\t\tint he=0; //\u522b\u5fd8\u4e86\u521d\u59cb\u5316\uff01\uff01\uff01\n\t\tfor(int j=1;j<=x;j++)\n\t\t{\n\t\t\the+=t[ans[j]][i];//\u7d2f\u52a0\n\t\t}\n\t\tif(he<nfeed[i]) return false;//\u4e00\u65e6\u6ca1\u5582\u9971\u5c31\u8d76\u7d27\u8df3\u7684\n\t}\n\treturn true;//\u5582\u9971\u4e86\u3002\n}\nvoid dfs(int pos,int z)\n{\n\tif(pos>type)//\u641c\u5b8c\u4e86\uff0c\u4e0d\u7ba1\u5b83\u6210\u529f\u4e0d\u6210\u529f\u6211\u90fd\u8981\u7ed3\u675f\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u6b7b\u5faa\u73af\u3002\n\t{\n\t\tif(cz(z) && z<m)//\u6210\u529f\u4e86\n\t\t{\n\t\t\tm=z;\n\t\t\tfor(int i=1;i<=z;i++)\n\t\t\t{\n\t\t\t\tmx[i]=ans[i];//\u590d\u5236\n\t\t\t}\n\t\t}\n\t\treturn ;//\u5feb\u7ed9\u6211\u7ed3\u675f\uff01\n\t}\n\tans[z+1]=pos;\n\tdfs(pos+1,z+1);//\u7ee7\u7eed\u641c\u7d22\n\tdfs(pos+1,z);//\u7ee7\u7eed\u641c\u7d22\n   //\u662f\u4e0d\u662f\u611f\u89c9\u5f88\u50cf\u52a8\u5f52\uff01\n}\nint main()\n{\n\tcin>>f;//\u8bfb\u5165\u5976\u725b\u9700\u8981\u7684\u7ef4\u4ed6\u547d\u7684\u79cd\u7c7b\u6570\u3002\n\tfor(int i=1;i<=f;i++)\n\t\tcin>>nfeed[i];//\u8bfb\u5165\u725b\u6bcf\u5929\u9700\u8981\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf\u3002\n\tcin>>type;//\u8bfb\u5165\u53ef\u7528\u6765\u5582\u725b\u7684\u9972\u6599\u7684\u79cd\u6570\u3002\n\tfor(int i=1;i<=type;i++)\n\t{\n\t\tfor(int j=1;j<=f;j++)\n\t\t{\n\t\t\tcin>>t[i][j];\u9972\u6599\u5305\u542b\u7684\u5404\u79cd\u7ef4\u4ed6\u547d\u7684\u91cf\u7684\u591a\u5c11\u3002\n\t\t} \n\t}\n\tdfs(1,0);//\u7206\u641c\uff01\n\tcout<<m<<\" \";//\u8f93\u51fa\n\tfor(int i=1;i<=m;i++)\n\t\tcout<<mx[i]<<\" \";//\u8f93\u51fa\n\tcout<<endl;//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1565871590,
        "uid": 195892,
        "name": "tmp27",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "[Youngsc](http://youngscc.github.io/)\n\n\u6765\u4e00\u6ce2\u8fed\u4ee3\u52a0\u6df1\u7684\u4ee3\u7801\u3002\u3002\n\n\u4e4b\u524d\u88ab\u9000\u56de\u6765\u8bf4\u6211\u8bf4\u660e\u592a\u5c11\u3002\u7136\u800c\u6211\u60f3\u8bf4\u4e00\u6ce2\u641c\u7d22\u6211\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u5440\u3002\u3002\u3002\n\n\u56e0\u4e3a\u9898\u76ee\u4e2d\u8981\u6c42\u9972\u6599\u8d8a\u5c11\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u8fed\u4ee3\u52a0\u6df1\u7684\u601d\u60f3\uff0c\u5148\u9650\u5236\u6bcf\u4e00\u6b21\u641c\u7d22\u7684\u6df1\u5ea6\uff0c\u641c\u5230\u4e00\u5b9a\u7684\u6df1\u5ea6\u5c31\u8fd4\u56de\uff0c\u5373\u6bcf\u4e00\u6b21\u9009\u62e9\u7684\u9972\u6599\u6570\u91cf\uff0c\u9009\u62e9\u4e86\u8db3\u591f\u7684\u9972\u6599\u5c31\u8fd4\u56de\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u79cd\u8fd9\u6837\u6570\u91cf\u7684\u7ec4\u5408\uff0c\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\uff0c\u8fd9\u6837\u7684\u8bdd\u80fd\u628a\u6700\u4f18\u89e3\u653e\u641c\u5728\u524d\u8fb9\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u7684\u526a\u679d\u5c31\u80fdAC\u3002\n\n\n### \u4ee3\u7801\u5728\u8fd9\u91cc\n\n\nPS: 29\u884c\u6709\u4e00\u4e2a\u5224\u65ad\u8fd4\u56de\u662f\u4e00\u4e2a\u526a\u679d\uff0c\u5c31\u662f\u8bf4\u5982\u679c\u5269\u4e0b\u7684\u4e0d\u591f\u6211\u8981\u9009\u62e9\u7684\u6570\u91cf\u4e86\uff0c\u90a3\u4e48\u6211\u5c31\u8fd4\u56de\uff0c\u7531\u4e8e\u6570\u636e\u6bd4\u8f83\u6c34\uff0c\u6240\u4ee5\u53ef\u6709\u53ef\u65e0\u3002\n\n\n```cpp\n# include <algorithm>\n# include <iostream>\n# include <cstring>\n# include <cstdio>\n# include <cmath>\n# define R register\n# define LL long long\n\nusing namespace std;\n\nint n,m,vc[30],c[20][30],a[30];\nbool v[20];\n\ninline void in(R int &a){\n    R char c = getchar();R int x=0,f=1;\n    while(!isdigit(c)){if(c == '-') f=-1; c=getchar();}\n    while(isdigit(c)) x = (x<<1)+(x<<3)+c-'0',c = getchar();\n    a = x*f;\n}\n\ninline void dfs(R int x,R int sum,R int num){ //num\u5c31\u662f\u8fed\u4ee3\u52a0\u6df1\u7684\u9650\u5236\u6761\u4ef6\n    if(sum == num)//\u5224\u65ad\u8fb9\u754c\u6761\u4ef6\n    {\n        for(R int i=1; i<=m; ++i) if(a[i] < vc[i]) return;\n        cout << num << ' ';\n        for(R int i=1; i<=n; ++i) if(v[i]) cout << i << ' ';\n        exit(0);//\u76f4\u63a5\u5728\u51fd\u6570\u4e2d\u7ed3\u675f\u7a0b\u5e8f\n    }\n    if(n-x<num-sum) return;//\u6240\u8c13\u53ef\u6709\u53ef\u65e0\u7684\u526a\u679d\u3002\n    for(R int i=x+1; i<=n; ++i)\n    {\n        v[i] = 1;\n        for(R int j=1; j<=m; ++j) a[j] += c[i][j];\n        dfs(i,sum+1,num);\n        for(R int j=1; j<=m; ++j) a[j] -= c[i][j];\n        v[i] = 0;//\u56de\u6eaf\n    }\n}\n\ninline int yg(){\n    in(m);\n    for(R int i=1; i<=m; ++i) in(vc[i]);\n    in(n);\n    for(R int i=1; i<=n; ++i)\n        for(R int j=1; j<=m; ++j) in(c[i][j]);\n    for(R int i=1; i<=n; ++i) dfs(0,0,i);//\u679a\u4e3e\u8fed\u4ee3\u52a0\u6df1\u7684\u4e0d\u540c\u6df1\u5ea6\u3002\n    return 0;\n}\n\nint youngsc = yg();\nint main(){;}\n\n```",
        "postTime": 1505620168,
        "uid": 36282,
        "name": "Youngsc",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u5f88\u7b80\u5355\u7684\u4e00\u9053DFS\uff0c\u4f46\u662f\u5c45\u7136\u5199\u4e86\u6211\u4e00\u6574\u4e2a\u665a\u81ea\u4e60\uff1f\uff1f\uff1f\n\n\u4e8e\u662f\u5fc3\u8840\u6765\u6f6e\u5199\u4e86\u849f\u84bb\u4eba\u751f\u7b2c\u4e00\u7bc7\u9898\u89e3\n\n\u53cd\u6b63\u6709\u5f88\u591a\u7ec6\u8282\u8981\u6ce8\u610f\n\n\u5177\u4f53\u770b\u6ce8\u91ca\u53ed\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <string.h>\nusing namespace std;\n#define INF 0x3f3f3f3f\n#define N 100\nint v, g, minn = INF, lenth;//v,g\u5982\u9898\uff0cminn\u5b58\u7b54\u6848\u957f\u5ea6\uff0clenth\u5b58\u5f53\u524d\u957f\u5ea6\nint vet[N], food[N][N], save[N], ans[N];//vet\u5b58\u6bcf\u79cd\u7ef4\u751f\u7d20\u6700\u5c11\u9700\u8981\u91cf\uff0cfood\u5b58\u6bcf\u79cd\u98df\u7269\u53ef\u4ee5\u63d0\u4f9b\u7ef4\u751f\u7d20\u7684\u591a\u5c11\uff0csave\u5b58\u5df2\u7ecf\u9009\u62e9\u7684\u9972\u6599\uff0cans\u5b58\u7b54\u6848\u9009\u62e9c\u7684\u9972\u6599\u79cd\u7c7b\nbool vis[N];//\u6807\u8bb0\nbool check(int lenth){//\u5224\u65ad\u5f53\u524d\u662f\u5426\u5df2\u7ecf\u6ee1\u8db3\u725b\u725b\u7ef4\u751f\u7d20\u7684\u9700\u6c42\u91cf\n    int niu[N];\n    memset(niu, 0, sizeof(niu));//\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff0c\u6211\u56e0\u4e3a\u6ca1\u6709\u521d\u59cb\u5316\u5361\u4e86\u597d\u4e45\uff01\uff01\uff01\n    for(int i = 1; i <= lenth; i ++){\n        for(int l = 1; l <= v; l ++)\n            niu[l] += food[save[i]][l];//\u5b58\u98df\u7269\u63d0\u4f9b\u7ed9\u725b\u725b\u7684\u7ef4\u751f\u7d20\n    }\n    for(int i = 1; i <= v; i++){\n        if(niu[i] < vet[i])    return false;//\u5982\u679c\u6709\u4e00\u79cd\u7ef4\u751f\u7d20\u4e0d\u591f\u5c31\u8fd4\u56defalse\n    }\n    return true;//\u6bcf\u79cd\u7ef4\u751f\u7d20\u90fd\u591f\u4e86\u5c31\u8fd4\u56detrue\n}\nvoid dfs(){\n    if(lenth > g || lenth > minn)    return;//\u526a\u679d\u4f18\u5316m\uff0c\u5982\u679c\u9009\u62e9\u7684\u9972\u6599\u79cd\u7c7b\u8d85\u8fc7\u4e86\u4e00\u5171\u6709\u7684\u9972\u6599\u79cd\u7c7b\uff0c\u6216\u662f\u9009\u62e9\u7684\u79cd\u7c7b\u5df2\u7ecf\u8d85\u8fc7\u4e86\u4e4b\u524d\u7684\u6700\u4f18\u89e3\n    if(check(lenth) == true){//\u5982\u679c\u6ee1\u8db3\u4e86\u6bcf\u79cd\u7ef4\u751f\u7d20\u7684\u9700\u6c42\u91cf\n        if(minn > lenth){//\u5982\u679c\u5f53\u524d\u89e3\u6700\u4f18\n            minn = lenth;\n            for(int i = 1; i <= minn; i ++)\n                ans[i] = save[i];//\u5b58\u50a8\u7b54\u6848\n        }\n        return;//\u7ed3\u675f\n    }\n    int start = save[lenth]; //\u4ece\u4e0a\u4e00\u6b65\u9009\u62e9\u7684\u9972\u6599\u5f00\u59cb\u9009\u62e9\uff0c\u53ef\u4ee5\u907f\u514d\u51fa\u73b01\uff0c2\uff0c3\u548c3\uff0c2\uff0c1\u7684\u60c5\u51b5\uff0c\u7279\u522b\u91cd\u8981\uff0c\u4e0d\u7136\u4f1aT\u4e24\u4e2a\u70b9\n    if(start == 0)  start = 0;\n    for(int i = start; i <= g; i ++){//\u679a\u4e3e\u9009\u62e9\u7684\u9972\u6599\u79cd\u7c7b\n        if(vis[i] == false){//\u5982\u679c\u672a\u88ab\u9009\u62e9\u8fc7\n            vis[i] = true;//\u6807\u8bb0\u5df2\u88ab\u9009\u62e9\n            lenth ++;//\u7b54\u6848\u957f\u5ea6++\n            save[lenth] = i;//\u5b58\u50a8\u7b54\u6848\n            dfs();//\u9012\u5f52\u8fdb\u884c\u4e0b\u4e00\u6b21\u9009\u62e9\n            vis[i] = false;//\u56de\u6eaf\u65f6\u8fd8\u539f\n            save[lenth] = 0;\n            lenth --;\n        }\n    }\n}\nint main(){\n    scanf(\"%d\", &v);\n    for(int i = 1; i <= v; i ++)\n        scanf(\"%d\", &vet[i]);\n    scanf(\"%d\", &g);\n    for(int i = 1; i <= g; i ++)\n        for(int l = 1; l <= v; l ++)\n            scanf(\"%d\", &food[i][l]);//\u8f93\u5165\n    dfs();\n    printf(\"%d \", minn);\n    for(int i = 1; i <= minn; i ++)\n        printf(\"%d \", ans[i]);//\u8f93\u51fa\n    return 0;\n}\n\n```\n",
        "postTime": 1573134322,
        "uid": 222635,
        "name": "_Andrea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u4e0b\u9762\u90a3\u7bc7\u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\u9898\u89e3\u88ab\u6211\u53c9\u4e86\uff01~~\u6211\u7b2c\u4e00\u6b21\u4ea4\u7684\u4ee3\u7801\u4e5f\u88ab\u81ea\u5df1\u53c9\u4e86~~\n\n### \u6574\u4f53\u601d\u8def\n\n\u56e0\u4e3a\u6bcf\u79cd\u9972\u6599\u53ea\u6709\u9009\u6216\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\uff0c\u51712^g\u4e2a\u5b50\u96c6\uff0c\u6bcf\u79cd\u5b50\u96c6\u9700\u8981gv\u7684\u65f6\u95f4\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662fgv*2^g\uff0c\u56e0\u4e3a\u8fd9\u9898\u6570\u636e\u5f88\u5c0f\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n### \u5b57\u5178\u5e8f\u7684\u4fdd\u8bc1\n\n\u8003\u8651\u7528\u4e8c\u8fdb\u5236\u6765\u679a\u4e3e\u5b50\u96c6\uff0c\u53f3\u6570\u7b2ci\u4f4d\u4e3a0\u4ee3\u8868\u4e0d\u9009\u9972\u6599g+1-i\uff08\u8fd9\u91cc\u6bd4\u8f83\u7279\u6b8a\uff0c\u539f\u56e0\u5f85\u4f1a\u513f\u8bf4\uff09\uff0c\u4e3a1\u4ee3\u8868\u9009\u9972\u6599g+1-i\uff0c\u9009\u7684\u9972\u6599\u4e2a\u6570\u5c31\u662f1\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u4ece2^g-1\u679a\u4e3e\u52300\uff0c\u7b2c\u4e00\u4e2a\u9047\u5230\u7684\u6700\u4f18\u89e3\u5373\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u3002\u56e0\u4e3a\uff1a\uff08\u8fd9\u91cc\u53ef\u4ee5\u81ea\u5df1\u60f3\u6e05\u695a\uff0c\u8bc1\u660e\u611f\u89c9\u7565\u7e41\u7410\uff09\n- \u5047\u8bbe\u6709\u4e24\u4e2a\u6700\u4f18\u89e3a\u548cb\uff08a\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8eb\uff09\uff0c\u5b83\u4eec\u90fd\u6709x\u4e2a1\n- \u4ece\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6bd4\u8f83\u65b9\u6848\u7684\u5b57\u5178\u5e8f\u5373\u6bd4\u8f83\uff1a\n\t1. \u82e5a\u7684\u5de6\u6570\u7b2c\u4e00\u4e2a1\u6bd4b\u7684\u5de6\u6570\u7b2c\u4e00\u4e2a1\u9760\u5de6\u5219a\u7684\u5b57\u5178\u5e8f\u5927\uff0c\u53cd\u4e4bb\u7684\u5b57\u5178\u5e8f\u5927\n    2. \u82e5\u4f4d\u7f6e\u4e00\u6837\uff0c\u5219\u6bd4\u8f83\u5de6\u6570\u7b2c\u4e8c\u4e2a1\u7684\u4f4d\u7f6e\n    3. \u7ee7\u7eed\u6bd4\u8f83\uff0c\u76f4\u81f3\u4e0d\u540c\n- \u53ef\u4ee5\u770b\u51fa\uff0c\u5728a\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8eb\u65f6\uff0ca\u672c\u8eab\u662f\u5927\u4e8eb\u7684\uff0c\u5373a\u5148\u4e8eb\u88ab\u679a\u4e3e\u5230\n\n\u4e3a\u4ec0\u4e48\u8981\u7528\u7b2ci\u4f4d\u8868\u793a\u9009\u4e0d\u9009\u9972\u6599g+1-i\u800c\u4e0d\u662f\u9972\u6599i\u5462\uff1f\u56e0\u4e3a\u4e8c\u8fdb\u5236\u679a\u4e3e\u7684\u65f6\u5019\u662f\u56fa\u5b9a\u9ad8\u4f4d\u4e0d\u53d8\u5148\u53d8\u4f4e\u4f4d\uff0c\u53ea\u6709\u628a\u7f16\u53f7\u5c0f\u7684\u9972\u6599\u653e\u5728\u4e8c\u8fdb\u5236\u7684\u9ad8\u4f4d\u4e0a\u624d\u80fd\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u9047\u5230\u7684\u89e3\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\n\n### \u6570\u9972\u6599\u4e2a\u6570\n\n\u7b2c\u4e00\u4e2a\u9047\u5230\u53ea\u80fd\u4fdd\u8bc1\u5b57\u5178\u5e8f\u5c0f\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u9972\u6599\u4e2a\u6570\u5c11\uff0c\u6240\u4ee5\u8fd8\u8981\u6570\u9972\u6599\u7684\u4e2a\u6570\n\n\u6570\u9972\u6599\u4e2a\u6570\u5c31\u662f\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u65701\u7684\u4e2a\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\nint count(int x)\n{\n\tint out=0;\n\twhile (x)\n\t{\n\t\tout+=x&1;\n\t\tx>>=1;\n\t}\n\treturn out;\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nint v,need[30],g,a[20][30],ans,minn=0x7fffffff,t[30];\n\nint count(int x);\n\nint main()\n{\n    int i,j,k;\n    bool flag;\n    \n    cin>>v;\n    \n    for (i=0;i<v;++i)\n    {\n        cin>>need[i];\n    }\n    \n    cin>>g;\n    \n    for (i=1;i<=g;++i)\n    {\n        for (j=0;j<v;++j)\n        {\n            cin>>a[i][j];\n        }\n    }\n    \n    for (i=(1<<g)-1;i>=0;--i) //\u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\n    {\n        if (count(i)<minn) //\u82e5\u5f53\u524d\u5b50\u96c6\u7684\u9972\u6599\u6570\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684\u6700\u4f18\u89e3\u5219\u5f53\u524d\u5b50\u96c6\u4e00\u5b9a\u4e0d\u662f\u7b54\u6848\n        {\n            memset(t,0,sizeof(t));\n            for (j=0;j<g;++j)\n            {\n                if ((1<<j)&i) //i\u7684\u53f3\u6570\u7b2cj+1\u4f4d\u4e3a1\u4ee3\u8868\u9972\u6599g-j\u5728\u5f53\u524d\u679a\u4e3e\u7684\u5b50\u96c6\u4e2d\n                {\n                    for (k=0;k<v;++k)\n                    {\n                        t[k]+=a[g-j][k];\n                    }\n                }\n            }\n            flag=true;\n            for (j=0;j<v;++j) //\u5224\u65ad\u5f53\u524d\u65b9\u6848\u662f\u5426\u5408\u6cd5\n            {\n                if (t[j]<need[j])\n                {\n                    flag=false;\n                    break;\n                }\n            }\n            if (flag) //\u56e0\u4e3a\u5df2\u7ecf\u5224\u65ad\u8fc7\u5f53\u524d\u5b50\u96c6\u9972\u6599\u6570\u5c0f\u4e8e\u5f53\u524d\u6700\u4f18\u89e3\uff0c\u82e5\u5f53\u524d\u65b9\u6848\u5408\u6cd5\u5219\u76f4\u63a5\u66f4\u65b0\u6700\u4f18\u89e3\n            {\n                minn=count(i);\n                ans=i;\n            }\n        }\n    }\n    \n    cout<<minn;\n    \n    for (i=g-1;i>=0;--i) //\u8f93\u51fa\u65b9\u6848\n    {\n        if ((1<<i)&ans)\n        {\n            cout<<\" \"<<g-i;\n        }\n    }\n    \n    return 0;\n}\n\nint count(int x) //\u65701\u7684\u4e2a\u6570\n{\n    int out=0;\n    while (x)\n    {\n        out+=x&1;\n        x>>=1;\n    }\n    return out;\n}\n```",
        "postTime": 1532750281,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u9898\u89e3by\uff1a[redbag](http://www.luogu.org/space/show?uid=2674)\n\n\u539f\u9898\u89e3\u5730\u5740\uff1a[http://redbag.duapp.com/?p=1160](http://redbag.duapp.com/?p=1160)\n\nac\u8bb0\u5f55\uff1a[http://www.luogu.org/record/show?rid=779120](http://www.luogu.org/record/show?rid=779120)\n\n\u539f\u9898\u5730\u5740\uff1a[http://www.luogu.org/problem/show?pid=1460](http://www.luogu.org/problem/show?pid=1460)\n\n\n\u8fd9\u9053\u9898\u6211\u5f00\u59cb\u7ea0\u7ed3\u4e86\u5f88\u4e45\u662f\u7528dfs\u8fd8\u662f\u7528bfs\u5462\uff0c\u4f46\u662f\u7531\u4e8e\u7ed3\u679c\u8981\u6c42\u5982\u679c\u6709\u591a\u79cd\u60c5\u51b5\uff0c\u5c31\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\u5b50dfs\u5c31\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u5c31\u4f1a\u7701\u5f88\u591a\u5224\u65ad\u3002\u603b\u7684\u6765\u8bf4\u8fd9\u662f\u7b80\u5355\u7684\u641c\u7d22\u3002\n\n\n/\\*\nID: ylx14274\n\nPROG: holstein\n\nLANG: C++\n\n\\*/\n```cpp\n#include<set>  \n#include<map>  \n#include<list>  \n#include<queue>  \n#include<stack>  \n#include<string>  \n#include<math.h>  \n#include<time.h>  \n#include<vector>  \n#include<bitset>  \n#include<memory>  \n#include<utility>  \n#include<stdio.h>  \n#include<sstream>  \n#include<iostream>  \n#include<stdlib.h>  \n#include<string.h>  \n#include<algorithm> \n#define LL unsigned long long   \nusing namespace std;\nint vv;//\u7ef4\u4ed6\u547d\u79cd\u7c7b \nint v[26];//\u6bcf\u79cd\u6240\u9700\u6570\u91cf \nint n;//\u5582\u725b\u7684\u9972\u6599\u79cd\u7c7b\u6570\nint a[16][26];//\u6bcf\u79cd\u9972\u6599\u6bcf\u79cd\u7ef4\u4ed6\u547d\u542b\u91cf\nint w[26];//\u5b58\u6700\u5c0f\u9700\u8981\u9972\u6599\u7684\u65b9\u6848 \nint p,mm,he;//\u5b58\u9700\u5403\u7684\u79cd\u7c7b\u7684\u6570\u91cf \nint c[26];//c[i]\u6807\u8bb0\u5403\u4e0d\u5403\u7b2ci\u79cd\u9972\u6599\uff0c1\u4e3a\u5403 \nint pd()\n{\n    for (int i=1;i<=vv;i++) \n    if (v[i]>0) return 0;//\u4e0d\u7b26\u5408\u6761\u4ef6\n    return 1; \n}\nint pr()\n{\n    if (p<mm)//\u8fd9\u79cd\u65b9\u6848\u9700\u8981\u7684\u9972\u6599\u79cd\u7c7b\u66f4\u5c11\n    //\u7531\u4e8e\u641c\u7d22\u4fdd\u8bc1\u4e86\u5148\u641c\u5230\u7684\u5b57\u5178\u5e8f\u4f1a\u5c0f\uff0c\u6240\u4ee5\u4e0d\u9700\u6bd4\u8f83p=min\u7684\u60c5\u51b5\n    {\n        he=0;\n        mm=p;\n        for (int i=1;i<=n;i++)\n        if (c[i]==1)\n        {\n            he++;\n            w[he]=i;\n        }\n    } \n}\nvoid dfs(int t)\n{\n    if (pd()==1)//\u725b\u5403\u8fd9\u4e9b\u80fd\u6ee1\u8db3\u6240\u9700\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf \n    {pr();return;}\n    if (t>n)//\u6bcf\u79cd\u9972\u6599\u90fd\u9009\u8fc7\u4e86 \n    {return;} \n    ////\u5403\u7b2ct\u79cd\u9972\u6599\n    for (int i=1;i<=vv;i++)\n    {\n        v[i]-=a[t][i];//\u6807\u8bb0 \n    }\n    c[t]=1;//\u6807\u8bb0\u5403\u7b2ct\u79cd\u9972\u6599 \n    p++; \n    dfs(t+1); \n    for (int i=1;i<=vv;i++)\n    {\n        v[i]+=a[t][i];//\u8fd8\u539f\u6807\u8bb0 \n    }\n    c[t]=0;//\u8fd8\u539f\u6807\u8bb0 \n    p--; \n    ////\u4e0d\u5403\u7b2ct\u79cd\u9972\u6599\n    dfs(t+1); \n}\nint main() \n{\n    mm=23333;\n    freopen(\"holstein.in\",\"r\",stdin);\n    freopen(\"holstein.out\",\"w\",stdout); \n    scanf(\"%d\",&vv);//\u8bfb\u5165\u9700\u8981\u7684\u7ef4\u4ed6\u547d\u603b\u6570 \n    for (int i=1;i<=vv;i++) scanf(\"%d\",&v[i]);//\u8bfb\u5165\u725b\u6240\u9700\u7684\u7ef4\u4ed6\u547d\u91cf \n    scanf(\"%d\",&n);//\u8bfb\u5165\u5582\u725b\u7684\u9972\u6599\u79cd\u6570 \n    for (int i=1;i<=n;i++)//\u8bfb\u5165\u7f16\u53f7i\u6240\u5305\u542b\u7684\u5404\u79cd\u7ef4\u4ed6\u547d\u91cf \n        for (int j=1;j<=vv;j++)\n        scanf(\"%d\",&a[i][j]);\n    dfs(1);\n    printf(\"%d\",mm);\n    for (int i=1;i<=mm;i++)\n        printf(\" %d\",w[i]);\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1468645549,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u6b64\u9898\u6211\u7528\u7684\u75af\u72c2\u7684bfs\uff0c\u7528\u4f4d\u8fd0\u7b97\u8bb0\u5f55\u72b6\u6001\uff08\u5c31\u662f\u9009\u4e86\u54ea\u79cd\u9972\u6599\uff0c\u5bf9\u5e94\u4f4d\u7f6e1\uff09\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u6240\u6709\u7684\u9972\u6599\uff08\u56e0\u4e3a\u6bcf\u79cd\u9972\u6599\u90fd\u6709\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u88ab\u9009\u53d6\u7684\uff09\uff0c\u7136\u540e\u5206\u522b\u8ba9\u4ed6\u4eec\u4e3a\u8d77\u70b9bfs\uff0c\u6700\u540e\u627e\u51fa\u4e00\u4e2a\u6570\u76ee\u6700\u5c0f\u4e14\u6700\u5148\u51fa\u73b0\u7684\u65b9\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    int zuixiao[30];//\u6700\u5c0f\u7ef4\u751f\u7d20\n    int v[30][30];//\u5404\u79cd\u9972\u6599\u7684\u7ef4\u751f\u7d20\n    int tmps[30];\n    int main(){\n        int vs;\n        cin>>vs;\n        for(int i=0;i<vs;i++)cin>>zuixiao[i];\n        int n;\n        cin>>n;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<vs;j++){\n                cin>>v[i][j];\n            }\n        }\n        unsigned int best;//\u6700\u4f18\u7684\u65b9\u6848\uff0c\u6309\u4f4d\u5b58\u50a8\n        int minn=0x7fffffff;//\u6700\u5c0f\u7684\u6570\u76ee\n        for(int i=0;i<n;i++){//\u66b4\u529b\u679a\u4e3e\u4ee5\u6bcf\u4e2a\u9972\u6599\u4e3a\u8d77\u70b9\u7684bfs\n            for(int j=0;j<vs;j++){\n                if(v[i][j]<zuixiao[j])goto lcd;\n            }\n            printf(\"1 %d\",i+1);//\u5982\u679c\u4e00\u79cd\u5c31\u53ef\u6ee1\u8db3\u9700\u6c42\uff0c\u76f4\u63a5\u8f93\u51fa\u8fd9\u4e00\u79cd\n            return(0);\n```\nlcd:\n```cpp\n            queue<int> steps;//\u5b58\u50a8\u6b65\u6570\u7684\u961f\u5217\n            queue<unsigned int> que;//\u5b58\u50a8\u72b6\u6001\u4f4d\u7684\u961f\u5217\n            queue<int> lasts;//\u5b58\u50a8\u6700\u540e\u4e00\u4e2a\u9009\u4e86\u54ea\u4e2a\u7684\u961f\u5217\n            que.push(1<<i);\n            lasts.push(i);\n            steps.push(1);\n            do{\n                unsigned int flags=que.front();\n                int step=steps.front();\n                int last=lasts.front();\n                que.pop();\n                lasts.pop();\n                steps.pop();\n                for(int j=last+1;j<n;j++){\n                    unsigned int nf=flags|(1<<j);//\u6807\u8bb0\u8fd9\u4e2a\u9972\u6599\n                    for(int k=0;k<vs;k++){\n                        tmps[k]=v[j][k];\n                    }\n                    for(int k=0;k<n;k++){\n                        if(flags&(1<<k)){\n                            for(int l=0;l<vs;l++){\n                                tmps[l]+=v[k][l];\n                            }\n                        }\n                    }\n                    for(int k=0;k<vs;k++){\n                        if(tmps[k]<zuixiao[k])goto g;  \n                    }\n                    if(step+1<minn){//\u7ef4\u751f\u7d20\u5df2\u7ecf\u6ee1\u8db3\u6700\u5c0f\u9700\u6c42\uff0c\u800c\u4e14\u6570\u76ee\u4e5f\u66f4\u5c0f\n                        minn=step+1;\n                        best=nf;\n                    }\n                    goto jh;\n```\ng:\n```cpp\n                    que.push(nf);\n                    lasts.push(j);\n                    steps.push(step+1);\n                }\n            }while(!que.empty());\n            jh:int zyc;\n        }\n        printf(\"%d\",minn);\n        for(int i=0;i<n;i++){\n            if(best&(1<<i)){\n                printf(\" %d\",i+1);//\u8f93\u51fa\u6309\u4f4d\u5b58\u50a8\u7684\u65b9\u6848\n            }\n        }\n        return(0);\n}\n```",
        "postTime": 1514111458,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define mem(x) memset(x,0,sizeof(x)) //\u5077\u61d2\u800c\u5df2 \nshort int v,g,p=50; //short int \u8282\u7701\u7a7a\u95f4 \u3010\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u5fc5\u8981\u3011 \nshort int need[30],food[20][30];\n\nstruct node{\n    bool chos[20]; //chos[i] -> \u7b2ci\u79cd\u9972\u6599\u662f\u5426\u88ab\u9009 \n    short int now[30],sum,cnt; //now[i] -> \u5f53\u524d\u7b2ci\u79cd\u7ef4\u4ed6\u547d\u7684\u6570\u91cf; sum->\u72b6\u538b\u7528\u7684; cnt->\u5f53\u524d\u9009\u4e86\u7684\u9972\u6599\u79cd\u6570; \n    void init(){ //\u521d\u59cb\u5316\n        mem(chos);\n        mem(now);\n        sum=cnt=0;\n    }\n    void add(bool t,int k){ //\u786e\u8ba4\u7b2ck\u79cd\u9972\u6599\u662f\u5426\u4f7f\u7528 \n        cnt+=t; //\u5982\u679c\u9009\u4e86\uff0ccnt++ \n        sum=(sum<<1)|(chos[k]=t); //\u66f4\u65b0sum\u503c \u548c chos[k] \n        if(t) for(int i=1;i<=v;i++) now[i]+=food[k][i]; //\u5982\u679c\u9009\u62e9\u4f7f\u7528\uff0c\u66f4\u65b0\u5f53\u524d\u7ef4\u4ed6\u547d\u6570 \n    }\n    bool pd(){ //\u5224\u65ad\u662f\u5426\u7b26\u5408\u9898\u610f \n        for(int i=1;i<=v;i++) if(now[i]<need[i]) return false; //\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u591f\u5c31\u76f4\u63a5\u8fd4\u56de \n        return true;\n    }\n}ans;\n\nvoid dfs(node now,int k){\n    if(now.pd()){//\u4efb\u4f55\u65f6\u5019\u5230\u4e86\u90fd\u53ef\u4ee5\u76f4\u63a5\u505c\u4e0b\u4e86 \n        if(now.cnt<ans.cnt) ans=now; //\u4f18\u5148\u8003\u8651\u79cd\u6570\u5927\u5c0f \n        if(k<g) now.sum<<=(g-k); //\u6709\u53ef\u80fd\u8fd8\u6ca1\u6709\u8fd0\u884c\u5230\u7b2cg\u5c42\uff0c\u628asum\u540e\u9762\u7684\u503c\u52a0\u4e0a\u4ee5\u514d\u4e0b\u4e00\u884c\u6bd4\u8f83\u7684\u65f6\u5019\u53d1\u751f\u9519\u8bef \n        if(now.cnt==ans.cnt && now.sum<ans.sum) //\u53ef\u4ee5\u8bc1\u660e\u72b6\u538b\u4e4b\u540e\u7684sum\u7684\u5927\u5c0f\u5173\u7cfb\u7b49\u4ef7\u4e8e\u5b57\u5178\u5e8f\u7684\u5927\u5c0f\u5173\u7cfb \n        return;\n    }\n    if(k==g+1) return;\n    node next1=now,next2=now; //\u521b\u5efa\u4e24\u4e2a\u65b0\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728\u539f\u672c\u7684\u4e0a\u9762\u6539\n    next1.add(true,k);//\u9009\u5f53\u524d\u7684\u7b2ck\u79cd\u9972\u6599 \n    dfs(next1,k+1);//dfs\u8fc7\u7a0b \n    next2.add(false,k);//\u4e0d\u9009 \n    dfs(next2,k+1);//dfs\u8fc7\u7a0b \n    return;\n}\n\nvoid scan(){\n    mem(need); //\u521d\u59cb\u5316 \n    mem(food); //\u521d\u59cb\u5316 \n    cin.sync_with_stdio(false); //\u4f18\u5316 cin \u8bfb\u5165\u901f\u5ea6  \u3010\u8fd9\u9053\u9898\u5176\u5b9e\u4e5f\u6ca1\u5fc5\u8981\u3011 \n    cin>>v;\n    for(int i=1;i<=v;i++) cin>>need[i];\n    cin>>g;\n    for(int i=1;i<=g;i++) for(int j=1;j<=v;j++) cin>>food[i][j];\n}\n\nvoid print(){\n    cout<<ans.cnt; //\u8f93\u5165\u9009\u4e86\u7684\u9972\u6599\u7684\u79cd\u6570 \n    for(int i=1;i<=g;i++) if(ans.chos[i]) cout<<\" \"<<i; //\u8f93\u51fa\u6bcf\u4e2a\u88ab\u9009\u7684\u9972\u6599\u7684\u5e8f\u53f7 \n    putchar('\\n'); //\u4e60\u60ef\u6027\u6362\u884c \n    return;\n}\n\nvoid Healthy_Holsteins(){\n    scan(); //\u8f93\u5165 \n    node start; //\u521b\u5efa\u7a7a\u7ed3\u6784\u4f53 \n    start.init(); //\u521d\u59cb\u5316\u4e00\u4e0b\u4ee5\u514d\u51fa\u95ee\u9898 \n    ans.cnt=g+2;  //\u628aans\u521d\u59cb\u5316\u8d85\u8fc7\u6700\u5927\u503c \n    dfs(start,0); //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \n    print(); //\u8f93\u51fa \n    return; \n}\nint main(){\n    Healthy_Holsteins();\n    return 0; //\u7ed3\u675f \n}\n```",
        "postTime": 1533008474,
        "uid": 30003,
        "name": "\u5c0f\u767d\u56db\u4e2a\u767d",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u4e00\u9053\u5173\u4e8edfs\u7684\u9898\uff0c\u6570\u636e\u592a\u5c0f\uff0c\u7206\u641c\uff08\u6050\u6016..\u526a\u679d\u5462\uff1f\uff09\n\n\u4e0d\u4f1a\u91cd\u590d\uff0c\u6bcf\u6b21num+1\n\n/\\*\nID:luojiny1\n\nLANG:C++\n\nTASK:holstein\n\n\\*/\n\n\n\n    \n\n```cpp\n#include<cstdio>\nconst int maxv=1010,maxg=20;\n#define INF 1e9\nint vita[maxg][maxv],cow[maxv],p=INF,ans[maxv]={0},V,G,now[maxv]={0},id[maxg]={0};\nbool ok(){\n    for(int i=0;i<V;i++)if(now[i]<cow[i])return false;\n    return true;\n}\nvoid search(int step,int num)\n{\nid[step-1]=num;\nif(ok()&&step<p)\n{\n    p=step;\n    for(int i=0;i<p;i++)\n        ans[i]=id[i];\n}\nfor(int i=num+1;i<G;i++)\n{\n    for(int j=0;j<V;j++)now[j]+=vita[i][j];\n    search(step+1,i);\n    for(int j=0;j<V;j++)now[j]-=vita[i][j];\n}\n}\nint main()\n{\n    freopen(\"holstein.in\",\"r\",stdin);\n    freopen(\"holstein.out\",\"w\",stdout);\n    scanf(\"%d\",&V);\n    for(int i=0;i<V;i++)scanf(\"%d\",&cow[i]);\n    scanf(\"%d\",&G);\n    for(int i=0;i<G;i++)\n    for(int j=0;j<V;j++)scanf(\"%d\",&vita[i][j]);\n    for(int i=0;i<G;i++)\n    {\n            for(int j=0;j<V;j++)now[j]=vita[i][j];\n            search(1,i);\n            for(int j=0;j<V;j++)now[j]-=vita[i][j];\n    }\n    printf(\"%d\",p);\n    for(int i=0;i<p;i++)printf(\" %d\",ans[i]+1);\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1497846808,
        "uid": 22150,
        "name": "\u548c\u5176\u6b63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u9047\u5230\u8fd9\u4e2a\u9898\uff0c\u65e2\u7136\u6709\u591a\u91cd\u7ef4\u751f\u7d20\u9700\u8981\u8fbe\u6807\uff0c\u90a3\u4e48\u8d2a\u5fc3\u5c31\u662f\u4e0d\u53ef\u80fd\u7684\u4e86\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u641c\u7d22\u3002\n\n\n\u56e0\u4e3a\u8981\u4ee5\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5c31\u60f3\u5230DFS\uff0c\u56e0\u4e3a\u7531\u4e8eDFS\u7684\u6027\u8d28,\u641c\u7d22\u51fa\u6765\u7684\u7b2c\u4e00\u4e2a\u6700\u4f18\u89e3\u5219\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\n\n\n\u5982\u679c\u66b4\u529b\u641c\u7d22\u7684\u8bdd\uff0c\u4f1aTLE2~3\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u4e00\u4e9b\u526a\u679d\u4e86\u3002\n\n\n1\u3001\u6700\u4f18\u6027\u526a\u679d\uff1a\u5982\u679c\u5f53\u524d\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u8d85\u8fc7\u5df2\u6709\u7b54\u6848\u6216\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u8d85\u8fc7\u7ef4\u751f\u7d20\u603b\u7c7b\uff0c\u5219\u526a\u679d\n\n\n2\u3001\u5982\u679c\u8981\u4f7f\u75281 2 3 4 5\u8fd95\u79cd\u7ef4\u751f\u7d20\u65f6\uff0c\u53ef\u80fd\u4f1a\u67095 4 3 2 1\u7b49\u91cd\u590d\u641c\u7d22\uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u4ece\u5f53\u524d\u4f7f\u7528\u7684\u6700\u5927\u6570\u5f00\u59cb\u679a\u4e3e\uff0c\u641c\u7d22\n\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n\n\n\uff08PS\uff1a\u81ea\u52a8\u5ffd\u7565\u201cinline\u201d\u3001\u201cregister\u201d\u7b49\u5b57\u6837\uff0c\u636e\u8bf4\u662f\u6709\u52a0\u901f\u6548\u679c\u7684\uff0c\u4f46\u597d\u50cf\u5df2\u88ab\u8bc1\u4f2a\uff0c\u53ea\u662f\u672c\u4eba\u4e60\u60ef\u6253\u800c\u5df2\uff09\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cstdio>\nusing namespace std;\n#define rint register int//\u6b64\u4ee3\u7801\u4e2d\u6240\u6709\u7684\u201crint\u201d\u5373\u4e3a\u201cregister int\u201d\uff0c\u4f46\u53ef\u4ee5\u81ea\u52a8\u5ffd\u7565register\ninline void read(int &x)//\u8bfb\u5165\u4f18\u5316\n{\n    x=0;int w=1;char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')w=-1,ch=getchar();\n    while(isdigit(ch))x=(x<<3)+(x<<1)+(ch^'0'),ch=getchar();\n    x=x*w;\n}\nconst int maxn=30,maxm=20;\nint n,m,vita[maxn],food[maxm][maxn],a[maxn]={0},e=0,A[maxm],ans=maxm,ansA[maxm];\n//n\u4e3a\u7ef4\u751f\u7d20\u6570\u91cf\uff0cm\u4e3a\u9972\u6599\u6570\u91cf\uff0cvita[]\u8868\u793a\u6240\u9700\u7684\u7ef4\u751f\u7d20\uff0ca\u8868\u793a\u5f53\u524d\u7684\u7ef4\u751f\u7d20\u603b\u91cf\n//e\u8868\u793a\u76ee\u524d\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u4e2a\u6570\uff0cA[]\u5b58\u50a8\u76ee\u524d\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u79cd\u7c7b\uff0cans\u3001ansA[]\u4e3a\u7b54\u6848\nbool vis[maxn]={0},flag=0;\n//vis[]\u8868\u793a\u662f\u5426\u4f7f\u7528\u8fc7\uff0cflag\u8868\u793a\u662f\u5426\u4e3a\u7b54\u6848\ninline bool judge()//\u5224\u5b9a\u65b9\u6848\u662f\u5426\u53ef\u884c\n{\n    for(rint i=1;i<=n;i++)\n        if(a[i]<vita[i])\n            return false;//\u6709\u4e00\u79cd\u7ef4\u751f\u7d20\u4e0d\u8fbe\u6807\u5c31\u4e0d\u884c\n    return true;//\u6bcf\u79cd\u90fd\u8fbe\u6807\u5219\u53ef\u4ee5\n}\ninline void dfs()\n{\n    if(e>ans||e>m)return;\n    //\u6700\u4f18\u6027\u526a\u679d\uff1a\u5982\u679c\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u8d85\u8fc7\u5df2\u6709\u7b54\u6848\u6216\u4f7f\u7528\u7684\u7ef4\u751f\u7d20\u8d85\u8fc7\u7ef4\u751f\u7d20\u603b\u7c7b\uff0c\u5219\u526a\u679d\n    flag=judge();//\u8bc4\u5224\u6b64\u65b9\u6848\u662f\u5426\u53ef\u884c\n    if(flag)//\u5982\u679c\u53ef\u884c\n    {\n        if(e<ans)//\u5982\u679c\u7b54\u6848\u6bd4\u4e4b\u524d\u7684\u66f4\u5c0f\n        {\n            ans=e;\n            for(rint i=1;i<=e;i++)ansA[i]=A[i];\n            flag=0;\n            //\u5219\u5c06\u6b64\u7b54\u6848\u8d4b\u503c\u7ed9\u6700\u7ec8\u7b54\u6848\u5417\uff0c\u518d\u5c06\u6b64flag\u6807\u8bb0\u4e3a0\uff0c\u7ee7\u7eed\u641c\u7d22\u4e0b\u4e00\u4e2a\u7b54\u6848\n        }\n        return;\n    }\n    int k=A[e];\n    if(k==0)k=1;\n    for(rint i=k;i<=m;i++)//\u4ece\u5f53\u524d\u4f7f\u7528\u7684\u6700\u540e\u4e00\u79cd\u7ef4\u751f\u7d20\u5f00\u59cb\u5bfb\u627e\uff08\u5426\u52191 2 3 4 5\u548c5 4 3 2 1\u4f1a\u91cd\u590d\u8ba1\u7b97\uff09\n    {\n        if(vis[i]==0)//\u5982\u679c\u6ca1\u6709\u88ab\u4f7f\u7528\n        {\n            vis[i]=1;\n            A[++e]=i;\n            for(rint j=1;j<=n;j++)a[j]+=food[i][j];\n            //\u5c06\u6b64\u79cd\u7ef4\u751f\u7d20\u4f7f\u7528\u5e76\u7ee7\u7eed\u641c\u7d22\n            dfs();\n            for(rint j=1;j<=n;j++)a[j]-=food[i][j];\n            vis[i]=0;\n            e--;\n            //\u518d\u6807\u8bb0\u56de\u6765\n        }\n    }\n}\nint main()\n{\n    read(n);\n    for(rint i=1;i<=n;i++)read(vita[i]);\n    read(m);\n    for(rint i=1;i<=m;i++)\n        for(rint j=1;j<=n;j++)\n            read(food[i][j]);\n    //\u8bfb\u5165\n    dfs();\n    printf(\"%d\",ans);\n    for(rint i=1;i<=ans;i++)printf(\" %d\",ansA[i]);\n    //\u8f93\u51fa\u7b54\u6848\n    return 0; \n}\n```",
        "postTime": 1504061988,
        "uid": 47062,
        "name": "zengqinyi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "```cpp\n\n//\u6c42\u5fc5\u987b\u7684\u6700\u5c0f\u9972\u6599\u79cd\u6570\uff0c\u4eceidx\u79cd\u5f00\u59cb\u5f80\u540e\u904d\u5386\n//\u6ca1\u627e\u5230\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6848\uff0c\u5bf9\u6bd4\u4e00\u4e0b\u662f\u5426\u79cd\u7c7b\u6570\u6700\u5c0f\uff0c\u6700\u5c0f\u5c31\u5b58\u8d77\u6765\n//\u6700\u540e\u8f93\u51faans\uff0cansqueue[]\n\n#include <iostream>\n#include <cstring>\n#include <fstream>\n\nusing namespace std;\n\nconst int N = 30, M = 25;\n\nint vita[N], vitatmp[N];   //vitatmp\u5b58\u5f53\u524d\u7684\u7ef4\u751f\u7d20\u7684\u91cf\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u591f\u7528\nint g[M][N];\n\nint vitaqueue[M];\nint ansqueue[M];     //\u7528\u6765\u5b58\u653e\u9972\u6599\u7684\u5e8f\u53f7\nint ans = 0x3f;      //\u8bb0\u5f55\u6700\u5c0f\u65b9\u6848\u7684\u7ef4\u751f\u7d20\u65b9\u6848\u79cd\u6570\nint vis[M];          //\u662f\u5426\u4f7f\u7528\u8fc7\n\nint n, m;\nint idx;\n\nbool check()\n{   \n    for (int i = 1; i <= n; i++)\n        if (vitatmp[i] < vita[i]) return false;\n    \n    return  true;\n}\n\nvoid dfs()\n{\n    //for (int i = 1; i <= idx; i++) printf(\"%d \", ansqueue[i]);\n    //puts(\"\");\n\n\t//\u8fd9\u4e2a\u5730\u65b9\u4e0d\u8fdb\u884c\u526a\u679d\uff0c\u6570\u636e\u4e5f\u80fd\u8fc7\n    //if (idx > ans || idx > m) return;\n\n    if (check())\n    {\n        //vitatmp\u591f\u7528\uff0c\u4f46\u662f\u9972\u6599\u79cd\u6570\u4e0d\u662f\u6700\u5c0f\uff0c\u5c31\u526a\u679d\n        if (idx >= ans) return ;\n\n        //\u66b4\u529b\u641c\u7d22\uff0c\u4f1a\u4e0d\u65ad\u5237\u65b0\u51fa\u6765\u4f18\u5316\u7684\u65b9\u6848\uff0c\u5b58\u8d77\u6765\n        ans = idx;\n        for (int i = 1; i <= ans; i++) ansqueue[i] = vitaqueue[i];\n\n        //for (int i = 1; i <= ans; i++) printf(\"%d \", ansqueue[i]);\n        //puts(\"\");\n    }\n    //\u5982\u679c\u5f53\u524dvitatmp\u8fd8\u4e0d\u591f\u7528\uff0c\u9700\u8981\u7ee7\u7eed\u53bb\u627e\n\n   for (int i = vitaqueue[idx]; i <= m; i++)\n    {\n        if (i >= 1 && !vis[i])\n        {\n            vis[i] = 1;\n            vitaqueue[++idx] = i;\n            for (int j = 1; j <= n; j++) vitatmp[j] += g[i][j];\n\n            dfs();\n   \n            for (int j = 1; j <= n; j++) vitatmp[j] -= g[i][j];   //j<=n \u6253\u6210i<=n\uff0c\u8c03\u8bd53\u5c0f\u65f6\uff0c\u6eba, bus error 10\n            idx--;\n            vis[i] = 0;\n        }\n    }\n\n    return ;\n}\n\n\nint main()\n{\n    //freopen(\"P1460_2.in\", \"r\", stdin);\n\n    cin >> n;\n    for (int i = 1; i <= n; i++) cin >> vita[i];   //vita[]\u5b58\u6240\u9700vita\u6807\u51c6\u503c\n\n    cin >> m;\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            cin >> g[i][j];\n\n    dfs();\n\n    printf(\"%d \", ans);\n    for (int i = 1; i <= ans; i++) printf(\"%d \", ansqueue[i]);\n    puts(\"\");\n\n    return 0;\n}\n\n```\n\n### \u603b\u7ed3\u4e00\u4e0b\uff1a\ndfs\u771f\u9999\n\n\u5f88\u591a\u9898\u89e3\u7528\u7684\u7c7b\u4f3cDP\uff0c\u90a3\u4e2a\u89e3\u6cd5\u5f88\u597d\uff0c\u96c6\u5408\u601d\u60f3\n\n\u5982\u679c\u6570\u636e\u5f88\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u8fdb\u884c\u4f18\u5316\uff0c\u90a3\u5c31\u9ad8\u7ea7\u4e86\n\nMacOS\u4e0b\uff0c\u7b2c\u4e00\u6b21\u9047\u5230 Bus error 10\u7684\u9519\u8bef\uff0c\u77e5\u9053\u662f\u6808\u6ea2\u51fa\uff0c\u67e5\u4e863\u5c0f\u65f6\u4e5f\u6ca1\u6574\u660e\u767d\u3002\u6700\u540e\u7528printf\u5927\u6cd5\uff0c\u6253\u65ad\u70b9\u770b\u6267\u884c\u8fc7\u7a0b\uff0c\u4e00\u4e0b\u5c31\u63ea\u51fa\u4e86\u95ee\u9898\uff08for\u5faa\u73af\u91cc\u9762i\u6253\u6210\u4e86j\uff0c\u6eba\uff09",
        "postTime": 1577596653,
        "uid": 165143,
        "name": "zqiceberg",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u91c7\u7528\u9012\u5f52+\u526a\u679d\u6765\u505a\n\n\u5982\u679c\u4e0d\u61c2\u9012\u5f52\u7684\uff0c\u8d76\u7d27\u53bb\u5b66\u4e00\u4e0bP1706 \u5168\u6392\u5217\u95ee\u9898\u5427\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m;\nint d[310],f[310][310];\nint a[310],b[310],cnt[310],min=999999999;\nbool v[310];\ninline bool pd()//\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4f9b\u7ed9\u5976\u725b\u8db3\u591f\u7684\u7ef4\u4ed6\u547d \n{\n\tfor(int i=1;i<=n;i++) if(cnt[i]<d[i]) return false;\n\treturn true;\n}\nvoid dfs(int k,int s)//k\u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e\uff0cs\u8868\u793a\u5df2\u7ecf\u7528\u4e86\u591a\u5c11\u79cd\u9972\u6599\u4e86 \n{\n\tif(s>=min) return;//\u5982\u679c\u8d85\u8fc7\u4e86\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u80af\u5b9a\u4e0d\u662f \n\tif(pd()==true)//\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5c31\u80af\u5b9a\u662f\u66f4\u4f18\u503c\u4e86\uff0c\u524d\u9762\u5df2\u7ecf\u6392\u9664\u8fc7\u4e86 \n\t{\n\t\tmin=s;//\u8d4b\u503c\uff0c\u53d6\u6700\u4f18\u503c \n\t\tfor(int i=1;i<=min;i++) a[i]=b[i];\n\t}\n\telse if(k==m+1) return;//\u5982\u679c\u8d85\u8fc7\u4e86\u4e0a\u9650\uff0c\u5c31\u4e0d\u7528\u7ba1\u4e86 \n\telse\n\t{\n\t\tfor(int i=k;i<=m;i++)//\u641c\u7d22 \n\t\t{\n\t\t\tif(v[i]==true)//\u5982\u679c\u6ca1\u6709\u88ab\u7528\u8fc7 \n\t\t\t{\n\t\t\t\tfor(int j=1;j<=n;j++) cnt[j]+=f[i][j];//\u589e\u52a0\u603b\u6570 \n\t\t\t\tb[s+1]=i;v[i]=false;//\u8bb0\u5f55 \n\t\t\t\tdfs(i+1,s+1);//\u5f80\u4e0b\u641c\u7d22 \n\t\t\t\tb[s+1]=0;v[i]=true;//\u56de\u6eaf \n\t\t\t\tfor(int j=1;j<=n;j++) cnt[j]-=f[i][j];\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint i,j;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++) scanf(\"%d\",&d[i]);//\u521d\u59cb\u5316 \n\tscanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++) \n\t{\n\t\tfor(j=1;j<=n;j++) scanf(\"%d\",&f[i][j]);\n\t\tv[i]=true;\n\t}\n\tdfs(1,0);printf(\"%d \",min);for(i=1;i<min;i++) printf(\"%d \",a[i]);//\u9012\u5f52\u548c\u8f93\u51fa \n\tprintf(\"%d\\n\",a[min]);return 0;//\u7ed3\u675f \n}\n```",
        "postTime": 1524231021,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\\* \u8fd9\u91cc\u4e3b\u8981\u7528\u4e86\u4e00\u4e2a\u72b6\u6001\u538b\u7f29\u7684\u6280\u5de7\uff0c\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u53d6\u4e0d\u53d6\u8be5\u9972\u6599\n\n\\* \u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u53d8\u91cf\u542b\u4e49\u5982\u5176\u540d\u5b57\n\n***\n```cpp\n#include <iostream> //\u6211\u4e60\u60ef\u7528iostream\uff0c\u7528cstdio\u7684\u52ff\u55b7 \nusing namespace std;\nconst int MAX = (1 << 31) - 1; //\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \u6ce8\uff1aint\u6700\u5927\u4e3a2^32,\u4e00\u534a\u7528\u4e8e\u8d1f\u6570\u6545\u6700\u5927\u503c\u4e3a2^31\uff0c\u76f4\u63a5\u5e73\u79fb31\u4f1a\u7206\u70b8\u5bfc\u81f4\u51fa\u73b0\u8d1f\u6570\uff0c\u6545\u9700\u8981-1 \nint vita_min_need[26]; // \nint feeds_vita_content[16][26]; //\u8868\u793a\u9972\u6599\u4e2d\u6240\u542b\u7684\u7ef4\u4ed6\u547d\u6570\uff0c\u7b2c\u4e00\u7ef4\u4e3a\u9972\u6599\u7f16\u53f7\uff0c\u7b2c\u4e8c\u7ef4\u4e3a\u9972\u6599 \n// vita_num\u8868\u793a\u7ef4\u4ed6\u547d\u7684\u79cd\u7c7b\u6570\uff0cfeed_num\u8868\u793a\u9972\u6599\u7684\u79cd\u7c7b\u6570\uff0c\u90fd\u7531\u8f93\u5165\u5f97\u77e5 \nint vita_num, feed_num;\n\n//\u627e\u5230\u603b\u5171\u9009\u53d6\u7684\u9972\u6599\u6570\uff0c\u5373\u6539\u72b6\u6001\u5728\u4e8c\u8fdb\u5236\u4e0b\u6570\u5b571\u7684\u6570\u91cf\nint cac_feed_num(int status)\n{\n    int feed_num = 0;//\u7edf\u8ba1\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u9972\u6599\u603b\u6570 \n    while (status > 0)\n    {\n        feed_num += status & 1; //\u5de7\u5999\u5229\u7528\u4f4d\u4e0e\u64cd\u4f5c\u7b97\u51fa\u5f53\u524d\u72b6\u6001\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u5f53\u524d\u4f4d\u662f\u5426\u4e3a1,\u5982\u4e3a1\uff0c\u8868\u793a\u9009\u4e86\u5f53\u524d\u9972\u6599\uff0c\u9972\u6599\u6570+1 \n        status >>= 1;//\u4f7f\u7528\u5e73\u79fb\uff0c\u6bd4\u9664\u6cd5\u6548\u7387\u66f4\u9ad8\n    }\n    return feed_num;\n}\n\n//\u5224\u65ad\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u7b26\u5408\u8981\u6c42\nbool jud(int status)\n{\n    int tot_vitamin[26] = {0};\n    int now_feed = 0, now_vitamin;\n    while (status > 0) \n    {\n        if (status & 1)\n        {\n            for (now_vitamin = 0; now_vitamin < vita_num; now_vitamin++)\n                tot_vitamin[now_vitamin] += feeds_vita_content[now_feed][now_vitamin];\n        }\n        status >>= 1;\n        now_feed++;\n    }\n    for (now_vitamin = 0; now_vitamin < vita_num; now_vitamin++)\n        if (tot_vitamin[now_vitamin] < vita_min_need[now_vitamin])\n            return false;\n    return true;\n}\n\nvoid print_status(int status)\n{\n    int now_feed = 0;\n    bool feed_using_situation[16] = {false};\n    while (status > 0) \n    {\n        if (status & 1)\n            feed_using_situation[now_feed] = true;\n        status >>= 1;\n        now_feed++;\n    }\n    for (now_feed = 0; now_feed < feed_num; now_feed++)\n        if (feed_using_situation[now_feed] == true)\n            cout << (now_feed + 1) << ' ';\n}\n\nint main()\n{\n    //\u8bfb\u5165 \n    cin >> vita_num;\n    int i;\n    for (i = 0; i < vita_num; i++)\n        cin >> vita_min_need[i];\n    cin >> feed_num;\n    int j;\n    for (i = 0; i < feed_num; i++)\n        for (j = 0; j < vita_num; j++)\n            cin >> feeds_vita_content[i][j];\n    \n    //\u4ee5\u4e0b\u4ee3\u7801\u904d\u5386\n    int max_choise = 1 << feed_num, min_c;\n    int min_feed_num = MAX, min_status = 0, cur_feed_num, cur_status;\n    for (cur_status = 1; cur_status < max_choise; cur_status++)\n    {\n        cur_feed_num = cac_feed_num(cur_status);\n        //\u4e3b\u8981\u526a\u679d\uff0c\u5982\u679c\u5b83\u6240\u9700\u7684\u9972\u6599\u6570\u5927\u4e8e\u6700\u5c0f\u6240\u9700\u9972\u6599\u6570\uff0c\u6216\u76f8\u7b49\u4f46\u5b57\u5178\u5e8f\u5927\uff0c\u5b83\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\u65e0\u5173\u7d27\u8981\uff0c\u76f4\u63a5\u8df3\u8fc7\n        if (cur_feed_num < min_feed_num || (cur_feed_num == min_feed_num && cur_status < min_status))\n            if (jud(cur_status))\n            {\n                min_status = cur_status; //\u5c06\u6700\u5c0f\u72b6\u6001\u7f6e\u4e3a\u5f53\u524d\u72b6\u6001\n                min_feed_num = cur_feed_num; //\u5c06\u6700\u5c0f\u6240\u9700\u9972\u6599\u7684\u603b\u6570\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6240\u9700\u9972\u6599\u7684\u603b\u6570 \n            }\n    }\n    \n    //\u6253\u5370 \n    cout << min_feed_num << ' '; //\u6253\u5370\u6700\u5c0f\u6240\u9700\u9972\u6599\u7684\u603b\u6570 \n    print_status(min_status); //\u5c06\u6700\u5c0f\u6240\u9700\u9972\u6599\u603b\u6570\u5bf9\u5e94\u7684 \n    return 0;\n}\n```",
        "postTime": 1500560388,
        "uid": 20462,
        "name": "lukelin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u7b2c\u4e00\u773c\u770b\u8d77\u6765\u8ba4\u4e3a\u662f\u52a8\u6001\u89c4\u5212\uff0c\u5176\u5b9e\u4e00\u4e2adfs\u5c31\u53ef\u4ee5\u89e3\u51b3\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint a[26][26],b[26];\nint bj[26],js=2147483,ko=1,n,m;\nchar s[100],l[100];\nint pd() { \n    for(int i=1; i<=n; i++)\n        if(bj[i]<b[i])//\u5224\u65ad\u662f\u4e0d\u662f\u7ef4\u751f\u7d20\u5927\u4e8e\u725b\u6240\u9700\u7684\u6700\u4f4e\u7684\u7ef4\u4ed6\u547d \n            return 0;//\u5982\u679c\u4e0d\u662f\u8fd4\u56de0 \n    return 1;//\u5982\u679c\u662f\u8fd4\u56de1 \n}\nvoid dfs(int k,int ans) {\n    if(pd()==1) {//\u5982\u679c \u7ef4\u751f\u7d20\u5927\u4e8e\u725b\u6240\u9700\u7684\u6700\u4f4e\u7684\u7ef4\u4ed6\u547d \n        if(js>ans) {//\u5982\u679c\u5f53\u524d\u6700\u5c0f\u503c\u5927\u4e8e\u672c\u6b21\u7684\u503c \n            for(int i=1; i<=m; i++)\n                l[i]=s[i];//\u628as\u6570\u7ec4\u7684\u503c\u8d4b\u7ed9l\u6570\u7ec4 \n        }\n        js=min(js,ans);//\u53d6js\u548cans\u4e2d\u7684\u6700\u5c0f\u503c \n        return ;//\u8fd4\u56de \n    }\n    for(int i=k+1; i<=m; i++) {\n        for(int j=1; j<=n; j++)\n            bj[j]+=a[i][j];\n        s[i]='1';//\u8868\u8bb0i\u8bf4\u660ei\u70b9\u522b\u88ab\u9009\u8fc7 \n        dfs(i,ans+1);//\u641c\u7d22 \n        for(int j=1; j<=n; j++)\n            bj[j]=bj[j]-a[i][j];\n        s[i]='0';//\u8bb2i\u7684\u8868\u8bb0\u6e05\u7a7a \n    }\n}\nint main() {\n    cin>>n;//\u8f93\u5165 \n    for(int i=1; i<=n; i++)\n        cin>>b[i];\n    cin>>m;\n    for(int i=1; i<=m; i++)\n        for(int j=1; j<=n; j++)\n            cin>>a[i][j];\n    for(int ii=1; ii<=m; ii++) {\n        memset(s,0,sizeof(s));//\u628as\u6570\u7ec4\u7684\u503c\u6e05\u7a7a \n        s[ii]='1';//\u8868\u8bb0ii \n        memset(bj,0,sizeof(bj));//\u628abj\u6570\u7ec4\u6e05\u7a7a \n        for(int j=1; j<=n; j++)\n            bj[j]=a[ii][j]; \n        dfs(ii,1);//\u641c\u7d22 \n    }\n    cout<<js<<\" \";\n    for(int i=1; i<=m; i++) {\n        if(l[i]=='1')//\u5982\u679c\u70b9i\u88ab\u6807\u8bb0\u8fc7 \n            cout<<i<<\" \";//\u8f93\u51fa \n    }\n    return 0;\n}\n```",
        "postTime": 1500476996,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u601d\u60f3\uff1a\u968f\u673a\u5316\uff0c\u4ece1\u5f00\u59cb\u589e\u52a0\u79cd\u6570p\uff0c\u5bf9\u4e8e\u79cd\u6570p\uff0c\u968f\u673a\u679a\u4e3e\u9009p\u4e2a\u7ef4\u4ed6\u547d\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u679a\u4e3e5000\u6b21\u5373\u53ef\uff0c\u7136\u540e\u53d6\u6700\u4f18\u89e3(\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u679a\u4e3e\u5bf9\u79cd\u6570p\u603b\u60c5\u51b5\u6570\u76843/4\u53ef\u4ee5\u4f18\u5316\uff0c\u4e0d\u8fc7\u4e5f\u5f88\u5feb\u4e86)\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<iomanip>\n#include<map>\n#include<vector>\n#include<ctime>\n#include<algorithm>\nusing namespace std;\n#define RG register\n#define IL inline\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\ntemplate<typename T>\nT qget(void)\n{\n  T xi=0;\n  char ch=getchar();\n  bool f=false;\n  while(ch<'0'||ch>'9')\n    {\n      if(ch=='-')f=1;\n      ch=getchar( );\n    }\n  while( ch>='0'&&ch<='9')xi=xi*10+ch-48,ch=getchar();\n  if(f)xi=-xi;\n  return xi;\n}\nstruct HAHA{//\u5b58\u679a\u4e3e\u7684\u72b6\u6001\n  short c[26];\n  bool a[16];\n  HAHA()\n  {\n    memset(c,0,sizeof(c));\n    memset(a,0,sizeof(a));\n  }\n  bool operator < (HAHA b)\n  {\n    HAHA *a=this;\n    for(int i=1;i<=25;i++)if(a->c[i]<b.c[i])return true;else if(a->c[i]>b.c[i])return false;\n    return false;\n  }\n};\nshort a[16][26],need[26],n,g,ok;\nbool xa[16];\nvoid letrand(int n)//\u968f\u673a\u6253\u4e71\n{\n  for(int i=1;i<=n;i++)swap(xa[rand()%n+1],xa[rand()%n+1]);\n}\nHAHA check()\n{\n  HAHA c;\n  ok=1;\n  for(int i=1;i<=g;i++)if(xa[i]){for(int j=1;j<=n;j++)c.c[j]+=a[i][j];c.a[i]=1;}\n  for(int i=1;i<=n;i++)if(c.c[i]<need[i]){ok=0;return c;}//\u662f\u5426\u6ee1\u8db3\u8981\u6c42\n  return c;\n}\nvoid print(int p,HAHA q)\n{\n//  int p=0;\n//  for(int i=1;i<=g;i++)if(q.a[i])p++;\n  cout<<p<<\" \";\n  for(int i=1;i<=g;i++)if(q.a[i])printf(\"%d \",i);\n  exit(0);\n}\nvoid work()\n{\n  int p=0;\n  while(1)\n    {\n      ++p;//\u79cd\u6570\n      vector<HAHA>k;\n      int u=5000;//\u679a\u4e3e\u6b21\u6570\n      memset(xa,0,sizeof(xa));\n      for(RG int i=1;i<=p;i++)xa[i]=1;\n      for(RG int i=1;i<=u;i++)\n        {\n          letrand(g);//\u6253\u4e71\n          HAHA p1=check();//\u5224\u65ad\u5e76\u5b58\u7ed3\u679c\n          if(ok)k.push_back(p1);//\u6ee1\u8db3\u8981\u6c42\n        }\n      if(k.size()>0)\n        {\n          sort(k.begin(),k.end());//\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528sort\n          print(p,k[0]);\n        }\n    }\n}\nint main()\n{\n  srand(time(NULL));//\u968f\u673a\u6570\u79cd\u5b50\n  n=qget<int>();\n  for(RG int i=1;i<=n;i++)need[i]=qget<int>();\n  g=qget<int>();\n  for(RG int i=1;i<=g;i++)for(RG int j=1;j<=n;j++)a[i][j]=qget<int>();\n  work();\n  return 0;\n}\n```",
        "postTime": 1497154790,
        "uid": 19730,
        "name": "\u5929\u00b7\u4e09\u7396",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "```cpp\n//\u53ea\u8981\u52a0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u526a\u679d\u5373\u53ef\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<iostream>\n#define inf 999999999\nusing namespace std;\nconst int maxn=100010;\nint a[maxn];\nint m,n;\nint b[101][101];\nbool p[maxn];\nint ans=inf;\nint top[maxn];//\u7528\u6765\u4fdd\u5b58\u7b54\u6848\nint cnt;\nint c[maxn],coot;\nbool pd;\nbool flag2;\nvoid dfs(int sum,int h){\n    bool flag=0;\n    for(int i=1;i<=m;i++){\n        if(a[i]>0){flag=1;break;}\n    }\n    if(!flag){\n        if(sum<ans){//\u6839\u636edfs\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u6bd4\u8f83sum==ans\u7684\u60c5\u51b5\n            coot=cnt;\n            ans=sum;\n            for(int i=1;i<=cnt;i++){\n                c[i]=top[i];\n            }\n        }\n        return;\n    }\n    for(int i=h+1;i<=n;i++){//\u4eceh+1\u8fd9\u4e00\u884c\u5f00\u59cb\u5f80\u4e0b\u641c\uff0c\u8fd9\u5c31\u662f\u90a3\u4e2a\u5c0f\u5c0f\u7684\u526a\u679d\n        if(!p[i]){\n            p[i]=1;\n            for(int j=1;j<=m;j++){\n                a[j]-=b[i][j];\n            }\n            top[++cnt]=i;\n            dfs(sum+1,i);//\u4e0b\u6b21\u641c\u7d22\u53ea\u5f80\u4e0b\u641c\uff0c\u907f\u514d\u641c\u56de\u6765\u5bfc\u81f4\u8d85\u65f6\n            --cnt;//\u56de\u6eaf\n            p[i]=0;\n            for(int j=1;j<=m;j++){\n                a[j]+=b[i][j];\n            }\n        }\n    }\n}\nint main(){\n    int i,j,k;\n    scanf(\"%d\",&m);\n    for(i=1;i<=m;i++){\n        scanf(\"%d\",&a[i]);\n    }\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            scanf(\"%d\",&b[i][j]);\n        }\n    }\n    dfs(0,0);\n    printf(\"%d \",coot);\n    for(i=1;i<coot;i++){\n        printf(\"%d \",c[i]);\n    }\n    printf(\"%d\\n\",c[coot]);\n    return 0;\n}\n```",
        "postTime": 1486352323,
        "uid": 18421,
        "name": "ergeda",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "## \u9898\u89e3 [P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011](https://www.luogu.org/problemnew/show/P1460)\n\n\u4f5c\u8005\uff1a [\u5218\u661f\u5b870508](https://www.luogu.org/space/show?uid=34500)\n\n\n------------\n**\u601d\u8def\uff1a\u7528\u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\uff0c\u4ece\u800c\u627e\u5230\u6700\u4f18\u89e3**\n\n------------\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,wtm[505],g,sl[505][505],ans=0x7f7f7f7f,a[50005][505],an;\n// n:\u7ef4\u4ed6\u547d\u79cd\u6570  wtm:\u7ef4\u4ed6\u547d\u9700\u6c42\u91cf  g:\u9972\u6599\u79cd\u6570  sl[i][j]\uff1a\u7b2ci\u79cd\u9972\u6599\u4e2d\u7b2cj\u79cd\u7ef4\u4ed6\u547d\u7684\u542b\u91cf\n// ans:\u9700\u6c42\u7684\u6700\u5c0f\u4e2a\u6570  a:\u4fdd\u5b58\u7ed3\u679c  an:\u4fdd\u5b58\u7ed3\u679c\u7684\u4e8c\u8fdb\u5236\u5b50\u96c6 \nint read()//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565 \n{\n    int x=0,f=1;//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n    char c=getchar();\n    while(!isdigit(c))\n\t{\n\t\tif(c=='-')//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n\t\t\tf=-1;\n\t\tc=getchar();//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n\t}\n    while(isdigit(c))//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n\t{\n\t\tx=x*10+c-'0';//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n\t\tc=getchar();\n\t}\n    return x*f;//\u5feb\u8bfb\uff0c\u8bf7\u5ffd\u7565\n}\nint main()\n{\n\tn=read();//\u8bfb\u5165 \n\tfor(int i=1;i<=n;i++)\n\t\twtm[i]=read();//\u8fd8\u662f\u8bfb\u5165 \n\tg=read();//\u4ecd\u7136\u662f\u8bfb\u5165 \n\tfor(int i=1;i<=g;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tsl[i][j]=read();//\u4f9d\u65e7\u662f\u8bfb\u5165 \n\tfor(int i=0;i<(1<<g);i++)\n\t//\u4e8c\u8fdb\u5236\u679a\u4e3e\u5b50\u96c6\uff0c\u4ece\u5168\u90e8\u4e0d\u53d6\uff08000000000\u2026\u2026\uff09\u5230\u5168\u53d6\uff08111111\u2026\u2026\uff09 \n\t{\n\t\tint la=0,_wtm[505],dontok=0;\n\t\t// l:\u8fd9\u6b21\u9009\u62e9\u7684\u9972\u6599\uff0c_wtm:\u8fd9\u6b21\u7684\u603b\u7ef4\u4ed6\u547d\u91cf \n\t\t// dontok:\u6807\u8bb0\u662f\u5426\u4e0d\u884c \n\t\tmemset(_wtm,0,sizeof(_wtm));//\u7f6e0 \n\t\tfor(int j=0;j<g;j++)//\u679a\u4e3e\u7b2cj+1\u4f4d \n\t\t\tif(i&(1<<j))\n\t\t\t/*\n\t\t\t\u5982\u679c\u7b2cj+1\u4f4d\u4e0a\u662f1\uff08\u5373\u4e3a\u8981\u53d6\uff09 \n\t\t\t\u90a3 i&(1<<j)\u7684\u503c\u4e3a1\n\t\t\t\u53cd\u4e4b\u4e3a0 \n\t\t\t&\u53f7\u5373\u4e3a\u6309\u4e3a\u4e0e\n\t\t\t1<<j\u7684\u4e8c\u8fdb\u5236\u503c\u4e3a\uff1a100000\u2026\u2026(j\u4e2a0) \n\t\t\t*/ \n\t\t\t{\n\t\t\t\ta[i][++la]=j;//\u8bb0\u5f55 \n\t\t\t\tfor(int k=1;k<=n;k++)\n\t\t\t\t\t_wtm[k]+=sl[j+1][k];//\u589e\u52a0\u603b\u7ef4\u4ed6\u547d\u91cf \n\t\t\t}\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(_wtm[j]<wtm[j])//\u5982\u679c\u7ef4\u4ed6\u547d\u4e0d\u591f \n\t\t\t{\n\t\t\t\tdontok=1;//\u6807\u8bb0\uff1a\u4e0d\u884c \n\t\t\t\tbreak;//\u9000\u51fa \n\t\t\t}\n\t\tif(dontok)//\u5982\u679c\u4e0d\u884c\uff0c\u6267\u884c\u4e0b\u4e00\u4e2a \n\t\t\tcontinue;\n\t\tif(ans>la)//\u8bb0\u5f55\u6700\u5c0f\u7b54\u6848 \n\t\t{\n\t\t\tans=la;//\u8bb0\u5f55\u6700\u5c0f\u7b54\u6848\u9972\u6599\u4e2a\u6570 \n\t\t\tan=i;//\u8bb0\u5f55\u6700\u5c0f\u7b54\u6848\u7684\u4e8c\u8fdb\u5236\u5b50\u96c6 \n\t\t}\n\t}\n\tcout << ans <<' ';//\u8f93\u51fa \n\tfor(int i=1;i<=ans;i++) \n\t\tcout << a[an][i]+1 <<' ';//\u518d\u6b21\u8f93\u51fa \n\tcout << endl;\n\treturn 0;\n}\n\n```\n\n**PS:**\n```    \u4e4b\u524d\u7a0b\u5e8f\u70b8\u4e86\uff0c\u663e\u793aTLE\uff0c\u4e8e\u662f\u6211\u6253\u4e86\u5feb\u8bfb\uff0c\u540e\u6765\u624d\u53d1\u73b0\u662fBUG\uff0c\u4e8e\u662f\u5feb\u8bfb\u5c31\u7559\u7740\u4e86\u3002\u3002\u3002```",
        "postTime": 1549598465,
        "uid": 34500,
        "name": "\u849f\u84bblxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662fDFS\uff0c\u4e5f\u4e0d\u77e5\u9053\u90a3\u4e48\u591a\u4eba\u4e3a\u4ec0\u4e48\u7528BFS\u505a\uff0c\u7a0d\u5fae\u5224\u65ad\u52a0\u641c\u7d22\u4e00\u4e0b\u5c31\u8fc7\u4e86\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,sum[101],a[101],mina=100001,ans,b[101][101],k,s,r[101],o[101];\nvoid dfs(int x)\n{\n\tint l=0,i;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tif(sum[i]<a[i])\n\t\t{\n\t\t\tl=1;//\u5224\u65ad\u662f\u5426\u7b26\u5408\u8981\u6c42 \n\t\t}\n\t}\n\tif(l==0)\n\t{\n\t\tif(ans<mina)//\u66f4\u65b0\n\t\t{\n\t\t\tmina=ans;\n\t\t\tfor(i=1;i<=ans;i++)\n\t\t\t{\n\t\t\t\tr[i]=o[i];//\u8d4b\u503c\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\t\n\tif(l==1)\n\t{\n\t\tans++;\n\t\to[ans]=x;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tsum[i]=sum[i]+b[x][i];\n\t\t}\n\t\tfor(i=1;i<=k-x+1;i++)\n\t\tdfs(x+i);//\u679a\u4e3e\u6240\u6709\u65b9\u6848 \n\t\tans--;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tsum[i]=sum[i]-b[x][i];\n\t\t}\n\t}\n}\nint main()\n{\n\tint i,j;\n\t//freopen(\"holstein.in\",\"r\",stdin);\n\t//freopen(\"holstein.out\",\"w\",stdout);\n\tcin>>n;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tcin>>k;\n\tfor(j=1;j<=k;j++)\n\t{\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t    cin>>b[j][i];//\u4e8c\u7ef4\u8981\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\n\t\t}\n\t}\n\tdfs(0);\n\tcout<<mina-1<<\" \";//\u6ce8\u610f\u8fd9\u91cc\u5343\u4e07\u8981\u51cf\u4e00\n\tfor(i=2;i<=mina;i++)\n\t{\n\t\tcout<<r[i]<<\" \";//\u540c\u7406\uff0c\u4ece\u4e8c\u5f00\u59cb\u679a\u4e3e\n\t}\n}\n```",
        "postTime": 1534640117,
        "uid": 90642,
        "name": "liyifan200626",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\n\n------------\nvoid dfs(int x){\n\n    if(\u6ee1\u8db3\u8f93\u51fa\u6761\u4ef6){\n        \u8f93\u51fa\u89e3;\n    }\n    else{\n        for(int i=1;i<=\u5c1d\u8bd5\u65b9\u6cd5\u6570;i++)\n            if(\u6ee1\u8db3\u8fdb\u4e00\u6b65\u641c\u7d22\u6761\u4ef6){\n                \u4e3a\u8fdb\u4e00\u6b65\u641c\u7d22\u6240\u9700\u8981\u7684\u72b6\u6001\u6253\u4e0a\u6807\u8bb0;\n               dfs(x+1);\n                \u6062\u590d\u5230\u6253\u6807\u8bb0\u524d\u7684\u72b6\u6001;//\u4e5f\u5c31\u662f\u8bf4\u7684{\u56de\u6eaf}\n        }\n    }\n}\n\u53c2\u8003\u7528dfs\u6a21\u677f\n\n\u89e3\u9898\u601d\u8def\uff1a\u56e0\u4e3a\u98df\u7269\u6570\u91cf\u53ca\u6240\u9700\u7ef4\u4ed6\u547d\u79cd\u7c7b\u5f88\u5c11 \u6240\u4ee5\u4f7f\u7528dfs\u6765\u89e3\u9898\n\n\u6838\u5fc3\u601d\u60f3\uff1a\u4ece\u7b2c\u4e00\u7ec4\u98df\u7269\u7684\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\u679a\u4e3e\u51fa\u5f53\u524d\u4e00\u79cd\u98df\u7269\u4e2d\u6240\u542b\u7684\u5404\u7ef4\u4ed6\u547d\u503c\n\u7136\u540e\u7528\u9700\u6c42\u51cf\u53bb\u6bcf\u79cd\u7ef4\u4ed6\u547d\u503c...\u4ece\u6240\u6709\u53ef\u884c\u65b9\u6848\u4e2d\u627e\u51fa\u6700\u5c0f\u89e3 \n\n**\u732e\u4e0a\u4ee3\u7801**\n\n-----------\n\n```cpp\n#include <cstdio>\n\nint V,G;//v\u9700\u8981\u7684\u7ef4\u4ed6\u547d\u7684\u79cd\u7c7b\u6570,G\u53ef\u7528\u7684\u98df\u7269\u7684\u79cd\u6570\n\nint a[30];//\u5b58\u725b\u6bcf\u5929\u9700\u8981\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u7684\u6700\u5c0f\u91cf\n\nint Y[30][30];//\u7f16\u53f7\u4e3an\u98df\u7269\u5305\u542b\u7684\u5404\u79cd\u7ef4\u4ed6\u547d\u7684\u91cf\u7684\u591a\u5c11\n\nint book[20];//\u8bb0\u5f55\u5c1d\u8bd5\u8fc7\u7684\u98df\u7269\n\nint m=1000000,min1;//\u8bb0\u5f55\u4f7f\u7528\u6700\u5c0f\u98df\u7269\u79cd\u7c7b\n\nint ans[20];//\u8f93\u51fa\u65b9\u6848\n\n\nvoid flag(){//\u6bcf\u6b21\u5c1d\u8bd5\u4e00\u79cd\u540e \u8bb0\u5f55\u5c1d\u8bd5\u7684\u98df\u7269\n\t\n    int tmp=0;\n    for(int i=1;i<=G;i++)\n        if(book[i]==1)//\n            ans[++tmp]=i;//\u8bb0\u5f55\u7b54\u6848\n}\n\n//\u68c0\u6d4b \u725b\u6240\u9700\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u91cf \u662f\u5426\u6ee1\u8db3 \u6709-->true \u6ca1-->false\n\nbool check(){\n\n    for(int i=1; i<=V;i++)\n        if(a[i]>0)\n            return false;\n    return true;\n}\n\n//\u6df1\u641c...\nvoid dfs(int x){\n\n\t\n    //\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u725b\u6240\u9700\u7684\u6bcf\u79cd\u7ef4\u4ed6\u547d\u91cf,\u6ee1\u8db3\u540e\u7ee7\u7eed\n    \n\tif(check()){\n    \n        //\u8bb0\u5f55\u4f7f\u7528\u6700\u5c0f\u98df\u7269\u79cd\u7c7b,\u53ca \u6bd4\u8f83\u6700\u5c0f\u7684\u8f93\u51fa\u65b9\u6848\n\t\tif(min1<m){\n            m=min1;\n            flag();//\u8c03\u7528flag()\u8bb0\u5f55\u4f7f\u7528\u6700\u5c0f\u98df\u7269\u79cd\u7c7b\n            return;\n        }\n    }\n\t\n\t//\u5f53\u53ef\u7528\u98df\u7269\u79cd\u6570<1\u65f6\uff0c\u8df3\u51fa\u51fd\u6570\n    if(x>G) \n        return;\n    \n\t//\u4e8c\u7ef4\u6570\u7ec4\u7b2c\u4e00\u4e2a\u4e0b\u6807(1,1)\u5f00\u59cb\u8bfb,\u53ca \u6bcf\u79cd\u98df\u7269\u4e2d\u7ef4\u4ed6\u547d\u542b\u91cf\u7684\u7b2c\u4e00\u4e2a\u503c\n\tfor(int i=1;i<=V;i++)\n        a[i]-=Y[x][i];//\u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2a\u540e\u725b\u6240\u9700\u7684\u7ef4\u4ed6\u547d\u91cf\u51cf\u5c11\n        book[x]=1;//\u6807\u8bb0\u5df2\u8bfb\u53d6\u8fc7\u7684\n        min1++;//\u66f4\u65b0min1\u7684\u503c\n        dfs(x+1);\n\t//\u56de\u6eaf\u5230\u521d\u59cb\u72b6\u6001...\n    for(int i=1;i<=V;i++)\n        a[i]+=Y[x][i];\n    book[x]=0;\n    min1--;\n    dfs(x+1);\n}\n\nint main(){\n\n    scanf(\"%d\", &V);\n    for(int i=1;i<=V;i++)\n        scanf(\"%d\",&a[i]);\n    scanf(\"%d\",&G);\n    for(int i=1;i<=G;i++)\n        for(int j=1;j<=V;j++)\n            scanf(\"%d\",&Y[i][j]);\n        dfs(1);//\u8fd0\u884c\u51fd\u6570...\u8f93\u51fa\u6700\u5c0f\u4f7f\u7528\u98df\u7269\u79cd\u7c7b\u53ca\u6700\u5c0f\u65b9\u6848\n    printf(\"%d \",m);\n    for(int i=1;i<=m;i++)\n        printf(\"%d \",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1526054798,
        "uid": 58751,
        "name": "VanillaYuzume",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u9898\u89e3\n\n\u8fd9\u9898\u7528\u7684BFS\u7ed3\u5408\u4f4d\u8fd0\u7b97\u52a0\u901f,\u5e76\u4e14\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u5df2\u8ba1\u7b97\u8fc7\u7684\u524d\u7f00,\u5f88\u5bb9\u6613\u5927\u5e45\u5ea6\u526a\u679d.\u800c\u4e14\u4e00\u5f97\u5230\u89e3\u5c31\u80fd\u8fd4\u56de,\u56e0\u4e3aBFS\u6700\u5148\u627e\u5230\u7684\u4e00\u5b9a\u662f\u6700\u4f18\u89e3.\n\n\n\uff08\u51cf\u5c11\u4ee3\u7801\u590d\u5236\uff0c\u5171\u521b\u7f8e\u597d\u6d1b\u8c37\uff09\n\n\n```cpp\n#include <fstream>\n#include <vector>\n#include <deque>\nusing namespace std;\n```\n\u00a0\n```cpp\nstatic int type_of_vitamin;\nstatic int type_of_feed;\nstatic vector<int> vitamin;\nstatic  vector< vector<int> > feeds;\n```\n\u00a0\n```cpp\nvector<int> GetMinFeed();\ninline bool IsEnough(const vector<int> &feed);\ninline vector<int> GetState(int feed);\ninline void AddFeed(vector<int> &state, const vector<int> feed);\nvector<int> BitToVector(int feed);\n```\n\u00a0\nint main() {\n\n  ifstream fin(\"holstein.in\");\n\n  ofstream fout(\"holstein.out\");\n\n\u00a0\n```cpp\n  fin >> type_of_vitamin;\n  int v, counter = 0;\n  while (counter++ < type_of_vitamin) {\n    fin >> v;\n    vitamin.push_back(v);\n  }\n```\n\u00a0\n```cpp\n  fin >> type_of_feed;\n  int g;\n  counter = 0;\n  vector<int> feed;\n  while (fin >> g) {\n    feed.push_back(g);\n    ++counter;\n    if (counter == type_of_vitamin) {\n      feeds.push_back(feed);\n      feed.clear();\n      counter = 0;\n    }\n  }\n```\n\u00a0\n```cpp\n  vector<int> min_feed = GetMinFeed();\n  fout << min_feed.size() << ' ';\n  for (int i = 0; i < min_feed.size(); ++i) {\n    fout << min_feed[i];\n    if (i+1 < min_feed.size())\n      fout << ' ';\n  }\n  fout << endl;\n  return 0;\n}\n```\n\u00a0\n```cpp\nvector<int> GetMinFeed() {\n  vector<bool> is_searched(1 << type_of_feed + 1, false); // \u8bb0\u5f55\u9972\u6599\u7ec4\u5408\u662f\u5426\u5df2\u88ab\u641c\u7d22\u5230,\u6700\u957f2^15 + 1\n  deque<int> q;\n  int feed = 0, current_feed = 0;  // \u7528bit\u4f4d\u6765\u8bb0\u5f55\u641c\u7d22\u5230\u7684\u9972\u6599\u7ec4\u5408\n  vector<int> state, current_state; // \u8bb0\u5f55\u9972\u6599\u7ec4\u5408\u7684\u7ef4\u4ed6\u547d\u6570\n```\n\u00a0\n```cpp\n  while (true) {\n    if (!q.empty()) {\n      feed = q.front();\n      q.pop_front();\n      state = GetState(feed);\n    }\n```\n\u00a0\n    for (int i = 0; i < type\\_of\\_feed; ++i) {\n\n      current\\_feed = feed;\n\n      current\\_state = state;\n\n\u00a0\ncurrent\\_feed |= (1 << i);  // \u7528\u6216\u8fd0\u7b97\u628a\u5f53\u524d\u7684\u9972\u6599\u52a0\u5230\u539f\u6709\u7684\u7ec4\u5408\u5f53\u4e2d\n\n// \u5982\u679c\u6216\u8fd0\u7b97\u4e4b\u540e\u672a\u53d8,\u5219\u641c\u7d22\u5230\u91cd\u590d\u9972\u6599, \u82e5\u5f53\u524d\u7ec4\u5408\u5df2\u8bbf\u95ee, \u5219\u4e5f\u53ef\u526a\u679d\n\n      if (current\\_feed == feed || is\\_searched[current\\_feed]) \n        continue;\n\n\u00a0\n```cpp\n      is_searched[current_feed] = true;\n      AddFeed(current_state, feeds[i]);\n      if (IsEnough(current_state))\n        return BitToVector(current_feed);\n      else\n        q.push_back(current_feed);\n    }\n  }\n}\n```\n\u00a0\n```cpp\ninline bool IsEnough(const vector<int> &feed) {\n  // \u5224\u65ad\u4e00\u4e2a\u9972\u6599\u7ec4\u5408\u662f\u5426\u6ee1\u8db3\u9700\u8981\n  if (feed.empty()) return false;\n  for (int i = 0; i < type_of_vitamin; ++i)\n    if (feed[i] < vitamin[i])\n      return false;\n  return true;\n}\n```\n\u00a0\n```cpp\ninline vector<int> GetState(int feed) {\n  // \u4ece\u4e00\u4e2a\u6570\u53d6\u51fa\u4e8c\u8fdb\u5236\u4f4d\u5e76\u751f\u6210\u9972\u6599\u7ec4\u5408\u53ca\u5176\u7ef4\u4ed6\u547d\u6570\n  vector<int> state;\n  int bit = 0;\n  while (feed) {\n    if (feed & 1)\n      AddFeed(state, feeds[bit]);\n    ++bit;\n    feed >>= 1;\n  }\n  return state;\n}\n```\n\u00a0\ninline void AddFeed(vector<int> &state, const vector<int> feed) {\n\n// \u5c06\u4e00\u4e2a\u65b0\u7684\u9972\u6599\u52a0\u5230\u539f\u6709\u7684\u7684\u9972\u6599\u7ec4\u5408\u4e2d\u5e76\u8ba1\u7b97\u7ef4\u4ed6\u547d\u6570\n\n```cpp\n  if (state.empty()) {\n    state = feed;\n  } else {\n    for (int i = 0; i < type_of_vitamin; ++i)\n      state[i] += feed[i];\n  }\n}\n```\n\u00a0\n```cpp\nvector<int> BitToVector(int feed) {\n  // \u628a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u9972\u6599\u7ec4\u5408\u8f6c\u5316\u6210\u6570\u7ec4,\u7528\u4e8e\u6700\u540e\u8f93\u51fa\n  vector<int> feeds;\n  int bit = 0;\n  while (feed) {\n    if (feed & 1)\n      feeds.push_back(bit + 1);\n    ++bit;\n    feed >>= 1;\n  }\n  return feeds;\n}\n```",
        "postTime": 1463313276,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1460 \u3010\u5065\u5eb7\u7684\u8377\u65af\u5766\u5976\u725b Healthy Holsteins \u3011"
    }
]