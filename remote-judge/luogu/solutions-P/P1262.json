[
    {
        "content": "### \u53ef\u4ee5\u770b\u51fa\u6b64\u9898\u6709\u4e24\u79cd\u60c5\u51b5:\n\n\n\u4e00\u662f\u6709\u7684\u7f6a\u72af\u65e2\u4e0d\u80fd\u8d3f\u8d42\u4ed6\u4e5f\u6ca1\u6709\u7f6a\u72af\u80fd\u63ed\u53d1\u4ed6\uff0c\u90a3\u4e48\u6b64\u9898\u65e0\u89e3\uff0c\u6211\u4eec\u5728\u904d\u5386\u65f6\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff0c\u53ea\u8981\u9047\u89c1\u6ca1\u6709\u6807\u8bb0\u7684\u5c31\u8f93\u51fa\u7136\u540e\u9000\u51fa\u5373\u53ef\n\n\n\u4e8c\u662f\u6240\u6709\u7684\u7f6a\u72af\u90fd\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u88ab\u80fd\u8d3f\u8d42\u7684\u7f6a\u72af\u63ed\u53d1\u3002\u5f88\u660e\u663e\uff0c\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u8d44\u91d1\u5c31\u662f\u8d3f\u8d42\u90a3\u4e2a\u6ca1\u6709\u5165\u5ea6\u7684\u7f6a\u72af\uff0c\u4e8c\u662f\u6709\u73af\uff0c\u90a3\u4e48\u8d44\u91d1\u5c31\u662f\u90a3\u4e2a\u73af\u91cc\u7f6a\u72af\u6240\u9700\u8d44\u91d1\u6700\u5c0f\u7684\u3002\u6211\u4eec\u60f3\uff0c\u5982\u679c\u6211\u4eec\u628a\u73af\u91cc\u7684\u7f6a\u72af\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5168\u90fd\u662f\u524d\u8005\u7684\u60c5\u51b5\u4e86\n\n\n\u81f3\u4e8e\u5982\u4f55\u7f29\u70b9\u6b22\u8fce\u6765\u770b[\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/sincereactor/)\n\n\n```\n#include<iostream>\n#include<stdio.h>\n#include<cstring>\nusing namespace std;\nstruct ss{\n\tint next,to;\n};ss data[200010];\nconst int inf=1e9+7;\nint n,q,timeclock,p,top,cnt,ans,r;\nint dfn[200010],low[200010],stack[200010],instack[200010],next[200010],head[200010];\nint belong[200010],money[200010],sum[200010],size[200010],rd[200010];\nvoid add(int a,int b)\n{\n\tdata[++p].next=head[a];\n\tdata[p].to=b;\n\thead[a]=p;\n}\nvoid tarjan(int a)           //\u6807\u51c6\u7684tarjan\u4ee3\u7801 \n{\n\tdfn[a]=low[a]=++timeclock;\n\tinstack[a]=1;\n\tstack[++top]=a;\n\tfor(int i=head[a];i;i=data[i].next)\n\t{\n\t\tint v=data[i].to;\n\t    if(!dfn[v])\n\t    {\n\t \t    tarjan(v);\n\t\t    low[a]=min(low[a],low[v]);\n\t    }\n\t    else\n\t    if(instack[v])\n\t    low[a]=min(low[a],dfn[v]);\n\t}\n\tif(dfn[a]==low[a])\n\t{\n\t\tcnt++;\n\t\twhile(stack[top+1]!=a)\n\t\t{\n\t\t\tbelong[stack[top]]=cnt;\n\t\t\tinstack[stack[top]]=0;\n\t\t\tsize[cnt]++;\n\t\t\tsum[cnt]=min(sum[cnt],money[stack[top]]);\n\t\t\ttop--;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\tmoney[i]=1e9+7;        //\u8bb0\u5f97\u8d4b\u521d\u503c\u54e6 \n\tfor(int i=1;i<=n;i++)\n\tsum[i]=1e9;\n\tscanf(\"%d\",&q);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint u,mo;\n\t\tscanf(\"%d%d\",&u,&mo);\n\t\tmoney[u]=mo;\n\t}\n\tscanf(\"%d\",&r);\n\tfor(int i=1;i<=r;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(!dfn[i]&&money[i]!=inf)  //\u5982\u679c\u4ed6\u80fd\u591f\u88ab\u8d3f\u8d42\u5c31\u4ee5\u4ed6\u4e3a\u8d77\u70b9\u627e\u73af \n\ttarjan(i);\n\tfor(int i=1;i<=n;i++)      //\u5728\u8fd9\u91cc\u6211\u4eec\u7528dfn\u6570\u7ec4\u6765\u5224\u65ad\u5b83\u662f\u5426\u88ab\u904d\u5386\u8fc7 \n\tif(!dfn[i])\n\t{\n\t\tprintf(\"NO\\n\");\n\t\tprintf(\"%d\\n\",i);\n\t\treturn 0;\n\t}\n\t\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=head[i];j;j=data[j].next)\n\tif(belong[i]!=belong[data[j].to])\n\t{\n\t    rd[belong[data[j].to]]++;   //\u8bb0\u5f55\u5165\u5ea6 \n\t}\n\tprintf(\"YES\\n\");\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t   if(!rd[i])\n\t   { \n\t       ans+=sum[i];\n\t   }\n    }\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1525950986,
        "uid": 63035,
        "name": "Danny_boodman",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "### \u4eca\u5929\u6a21\u62df\u8d5b\u521a\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u6253\u7b97\u5199\u7bc7\u9898\u89e3\u52a0\u6df1\u4e00\u4e0b\u7406\u89e3\n\n\n------------\n\n\n## 1.  \u5206\u6790\u9898\u610f :\n\n **\u7ed9\u4f60\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5176\u4e2d\u67d0\u4e9b\u70b9\u662f\u53ef\u4ee5\u4e70\u7684\uff0c\u5982\u679c\u4f60\u4e70\u4e86\u4e00\u4e2a\u70b9\uff0c\u4f60\u53ef\u4ee5\u5230\u8fbe\u8fd9\n\u4e2a\u70b9\u6307\u5411\u7684\u70b9,\u6307\u5411\u7684\u8fd9\u4e2a\u70b9\u53c8\u80fd\u5230\u5b83\u6307\u5411\u7684\u70b9......(\u76f4\u5230\u8d70\u4e0d\u901a)\uff0c\u6211\u4eec\u8981\u9009\u62e9\u4e00\u4e9b\u70b9\u4e70\uff0c\u4f7f\u56fe\u8054\u901a\u4e14\u4ee3\u4ef7\u6700\u5c0f\uff01**\n \n## 2.  \u505a\u9898\u601d\u8def\uff1a\n\n\u9996\u5148\u601d\u8003\uff0c\u6211\u4eec\u8981\u9009\u62e9\u4e00\u4e9b\u70b9\uff0c\u600e\u4e48\u9009\u624d\u80fd\u4ee3\u4ef7\u6700\u5c0f\u5462\uff1f\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9x\uff0c\u5982\u679cx\u7684\u5165\u5ea6\u4e0d\u4e3a0\uff0c\u8bf4\u660e\u6709\u70b9\uff08\u8bbe\u8fd9\u4e2a\u70b9\u4e3ay\uff09\u6307\u5411x\u3002 \u90a3\u8d2a\u5fc3\u7684\u60f3\n\n\u6211\u4eec\u4e70x\u4e0d\u5982\u4e70y, \u4f46y\u5982\u679c\u4e5f\u6709\u5165\u5ea6\uff0c\u6211\u4eec\u5c31\u4e70\u6307\u5411y\u7684\u70b9..........\n\n\n**\u7136\u540e\u5f97\u51fa\u7ed3\u8bba\uff1a\u4e70\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9**\n\n\u4f46\u662f \u6211\u4eec\u53c8\u60f3\u5230 \u5982\u679c\u6709\u4e00\u4e2a\u73af\u5b58\u5728 \u8fd9\u4e2a\u73af\u7684\u6240\u6709\u70b9\u5165\u5ea6\u90fd\u4e0d\u4e3a0 \u90a3\u6211\u4eec\u600e\u4e48\u529e\uff1f\n\n\u5f88\u597d\u60f3\u5230\n\n\u4f60\u4e0d\u662f\u6709\u73af\u5417\uff0c\u4f60\u4e0d\u662f\u5f88\u62fd\u5417\uff0c\u8001\u5b50\u4f1atarjan \u4f60\u8fd8\u4e0d\u662f\u5f97\u53eb\u7238\u7238\uff1f\uff08\u66b4\u8e81\uff09\n\n\u76f4\u63a5\u6765\u4e2atarjan\u7f29\u70b9 \u8fd9\u4e2a\u73af\u7684\u82b1\u8d39\u5c31\u662f\u5176\u4e2d\u67d0\u4e2a\u82b1\u8d39\u6700\u5c0f\u70b9\u7684\u82b1\u8d39\n\n\u56e0\u4e3a\u8fd9\u4e2a\u73af\u7684\u5176\u4e2d\u4e00\u4e2a\u70b9\u4e70\u4e86\uff0c\u8fd9\u4e2a\u73af\u5c31\u90fd\u662f\u4f60\u7684\u4e86\n\n------------\n\n## 3. \u7ec6\u8282\u5206\u6790:\n\n\u597d\u4e86\u6211\u4eec\u7f29\u5b8c\u70b9\u4e86\n\n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u77e5\u9053,\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u662f\u5fc5\u987b\u4e70\u7684\uff01\u8fd9\u70b9\u6bcb\u5eb8\u7f6e\u7591\n\n\u4f46\u662f\u4e0d\u662f\u5165\u8bfb\u4e0d\u4e3a0\u7684\u70b9\u5c31\u90fd\u4e0d\u7528\u4e70\uff1f\uff1f\n\n\u7b54\u6848\u5f53\u7136\u662f\u5426\n\n\u5982\u679cx\u6307\u5411y\n\n\u4f46\u662fx\u662f\u6211\u4eec\u4e0d\u80fd\u4e70\u7684 \u6216\u8005 x\u4e0d\u80fd\u88ab\u5176\u4ed6\u70b9\u5230\u8fbe \u90a3\u4e48y\u5c31\u662f\u4e00\u5b9a\u5f97\u4e70\u7684\n\n## 4.\u65e0\u89e3\u60c5\u51b5\n\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5fc5\u987b\u4e70\u7684\u70b9\uff0c\u5374\u4e0d\u80fd\u4e70\uff01\n\n\n\u6211\u5e9f\u8bdd\u6709\u70b9\u591a\uff0c\uff0cdalao\u52ff\u55b7\n\nAC\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<stack>\n#include<algorithm>\n#define INF (int)0x3f3f3f3f \n#define maxn 10010 \nusing namespace std;\nint n,p,num,cnt;   // num\u662ftarjan\u7684\u65f6\u95f4\u6233   cnt\u5728\u7f29\u70b9\u65f6\u7ef4\u62a4\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 \nint w[maxn],dfn[maxn],low[maxn];\nint mi[maxn],k[maxn],minid[maxn];    //   \u7f29\u70b9\u540e pw\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u82b1\u8d39  k[i]\u8868\u793ai\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \nbool vis[maxn],flag[maxn][maxn],ru[maxn];    //  vis\u6570\u7ec4\u8868\u793ai\u662f\u5426\u5728\u6570\u7ec4\u91cc  flag\u8868\u793ai j\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6709\u6ca1\u6709\u8fde\u8fb9 \nvector<int> v[maxn];\nstack<int> s;\nvoid tarjan(int x)    //  \u6807\u51c6\u7684tarjan \n{\n\tlow[x]=dfn[x]=++num;\n\ts.push(x);\n\tvis[x]=true;\n\tfor(int i=0;i<v[x].size();i++)\n\t{\n\t\tint ed=v[x][i];\n\t\tif(!dfn[ed])\n\t\t{\n\t\t\ttarjan(ed);\n\t\t\tlow[x]=min(low[x],low[ed]);\n\t\t}\n\t\telse if(vis[ed]) low[x]=min(low[x],dfn[ed]);\n\t}\n\tif(dfn[x]==low[x])    //  x\u662f\u4e00\u4e2a\u5173\u952e\u70b9\n\t{\n\t\tint minw=INF,lk=INF,t;\n\t\tcnt++;\n\t\twhile(1)\n\t\t{\n\t\t\tt=s.top();\n\t\t\ts.pop();\n\t\t\tvis[t]=false;\n\t\t\tminw=min(minw,w[t]);     //   \u53d6\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u82b1\u8d39 \n\t\t\tlk=min(lk,t);\n\t\t\tk[t]=cnt;\n\t\t\tif(t==x) break;\n\t\t}\n\t\tminid[cnt]=lk;\n\t\tmi[cnt]=minw;\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&p);           //  n\u4e2a\u95f4\u8c0d  \u6709p\u4e2a\u95f4\u8c0d\u613f\u610f\u88ab\u6536\u4e70 \n\tfor(int i=1;i<=n;i++) w[i]=INF; // \u5148\u521d\u59cb\u5316 \u5982\u679ci\u53f7\u95f4\u8c0d\u5f00\u4ef7\u4e3aINF\u8bf4\u660e\u4ed6\u4e0d\u80fd\u88ab\u6536\u4e70  \n\tint a,b;\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);       //  a\u53f7\u95f4\u8c0d\u613f\u610f\u88ab\u6536\u4e70\n\t\tw[a]=b;     \t\t   //   w\u6570\u7ec4\u4ee3\u8868\u6bcf\u4e2a\u95f4\u8c0d\u613f\u610f\u88ab\u6536\u4e70\u7684\u91d1\u989d \n\t}\n\tint r;\n\tscanf(\"%d\",&r);\n\tfor(int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tv[a].push_back(b);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i]) tarjan(i);    \t \t//   tarjan\u7f29\u70b9\n\tfor(int i=1;i<=n;i++)  // \u6ce8\u610f\uff01\uff01\u4e8b\u5b9e\u4e0a\u6211\u6ca1\u6709\u7f29\u70b9\u5efa\u65b0\u56fe\u7684\u64cd\u4f5c\uff01\u56e0\u4e3a\u4e0d\u9700\u8981\n\t{\n\t\tfor(int j=0;j<v[i].size();j++)\n\t\t{\n\t\t\tint ed=v[i][j];\n\t\t\tif(k[i]==k[ed]||flag[k[i]][k[ed]]) continue; // \u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u76f4\u63a5\u8df3\u8fc7 \u6216\u8005\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\n\t\t\tflag[k[i]][k[ed]]=true;\n\t\t\tif(ru[k[i]]||mi[k[i]]!=INF) ru[k[ed]]=true;    //   \u91cd\u70b9\uff01\u5982\u679ci\u70b9\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u4e0d\u80fd\u88ab\u8d3f\u8d42 \u6216\uff01\u4e0d\u80fd\u88ab\u5176\u4ed6\u70b9\u5230\u8fbe \u4ed6\u4eec\u6240\u6307\u5411\u7684\u70b9\u4e0d\u8bb0\u5f55\u6709\u5165\u5ea6 \n\t\t}\n\t}\n\tint id=INF,all=0;    //   \u5982\u679c\u4e0d\u7b26\u5408\u9898\u610f \u627e\u5230\u7684\u6700\u5c0f\u7f16\u53f7id \n\tbool f=false;\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tif(ru[i]) continue;   //  \u6709\u5165\u5ea6\u7684\u70b9\u8df3\u8fc7\n\t\tif(mi[i]==INF)    //  \u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e0d\u80fd\u4e70 \u8bf4\u660e\u6574\u5f20\u56fe\u5c31\u65e0\u89e3\u4e86\n\t\t{\n\t\t\tf=true;\n\t\t\tid=min(id,minid[i]);   // \u627e\u5230\u6700\u5c0f\u7f16\u53f7\n\t\t}\n\t\tif(!f) all+=mi[i];\n\t}\n\tif(f) printf(\"NO\\n%d\",id);\n\telse printf(\"YES\\n%d\",all);\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1570867811,
        "uid": 103308,
        "name": "lk_liang",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u770b\u5230\u522b\u4eba\u7684\u7a0b\u5e8f\u90fd\u662f100\u591a\u884c\u7684\u6211\u8fd9\u4e2a63\u884c\u7684\u5c31\u8d76\u7d27\u8fc7\u6765\u51d1\u4e2a\u70ed\u95f9\u3002\n\n\u672c\u9898\u7684\u4e3b\u8981\u65b9\u6cd5\u5c31\u662f\u5229\u7528Tarjan\u8fdb\u884c\u7f29\u70b9\uff0c\u628a\u6709\u73af\u56fe\u7f29\u6210DAG\u5373\u53ef\u3002\u5177\u4f53\u5185\u5bb9\u4e0b\u9762\u7684\u7a0b\u5e8f\u6709\u6ce8\u89e3\uff0c\u4e14\u5176\u4ed6\u4eba\u8bb2\u5f97\u4e5f\u5f88\u8be6\u7ec6\u4e86\u3002\n\n\u81f3\u4e8eTarjan\u548c\u7f29\u70b9\u8fd8\u6ca1\u6709\u5b66\u8fc7\u7684\u4eba\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\uff1a\n\n[Tarjan](http://www.cnblogs.com/shadowland/p/5872257.html) \u8fd9\u4e2a\u4eba\u8bb2\u5f97\u5f88\u6e05\u695a\u660e\u767d\uff0c\u6a21\u677f\u4e5f\u7b80\u5355\u660e\u4e86\u3002\n\n[\u7f29\u70b9](http://blog.csdn.net/zjy2015302395/article/details/52303864) \u7f29\u70b9\u5728\u51fd\u6570tarjan\u7684\u6700\u540e\uff0c\u53ef\u4ee5\u770b\u4e00\u770b\uff08\u5b66\u7684\u65f6\u5019\u627e\u4e86\u5f88\u4e45\uff09\u3002\n\n\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c**\u540c\u4e00\u4e2a\u7f29\u70b9\u4e2d\u7684\u4e24\u4e2a\u70b9\u5728\u8ba1\u7b97\u5165\u5ea6\u65f6\u4e0d\u9700\u8981\u518d\u52a0**\uff0c\u6211\u5c31\u683d\u5728\u8fd9\u513f\u4e86\uff0c\u8c03\u8bd5\u8001\u534a\u5929\u624d\u53d1\u73b0\u3002\n\n\u4ee5\u4e0b\u662f\u7a0b\u5e8f\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int INF=1e9,N=3001,M=8997001;\nint n,m,t,tot,rd[N],fir[N],mon[N],dfn[N],low[N],sta[N],bel[N],smon[N],nod[M],nex[M];\n//rd:\u5165\u5ea6 fir,nod,nex:\u90bb\u63a5\u8868\u76f8\u5173 mon:\u5355\u4e2a\u95f4\u8c0d\u91d1\u94b1 dfn,low:Tarjan\u76f8\u5173 sta:Tarjan\u6808 bel:\u70b9\u6240\u5c5e\u7f29\u70b9 smon:\u7f29\u70b9\u6700\u5c0f\u91d1\u94b1\nbool vis[N];\nvoid add(int i,int x,int y){\n    nod[i]=y,nex[i]=fir[x],fir[x]=i;\n}//\u4ee5\u4e0a\u90bb\u63a5\u8868\u90e8\u5206\nvoid dfs(int x){\n    if(vis[x]) return;\n    vis[x]=1,tot++;\n    for(int i=fir[x];i;i=nex[i]) dfs(nod[i]);\n}//\u4ee5\u4e0a\u904d\u5386\u6709\u5411\u56fe\u90e8\u5206\nvoid tar(int x){\n    dfn[x]=low[x]=++tot,vis[x]=1,sta[++t]=x;\n    for(int i=fir[x];i;i=nex[i]){\n        int y=nod[i];\n        if(!dfn[y]) tar(y),low[x]=min(low[x],low[y]);\n        else if(vis[y]) low[x]=min(low[x],dfn[y]);\n    }\n    if(dfn[x]==low[x]){\n        smon[x]=INF;\n        do{\n            vis[sta[t]]=0;\n            bel[sta[t]]=x;\n            smon[x]=min(smon[x],mon[sta[t]]);\n                        //\u7531\u4e8e\u73af\u4e2d\u53ea\u8981\u6536\u4e70\u4e00\u4e2a\u4eba \u5176\u4ed6\u4eba\u7684\u60c5\u62a5\u90fd\u53ef\u4ee5\u77e5\u9053\uff0c\u56e0\u6b64\u53ea\u8981\u53d6\u6700\u5c0f\u503c\u5373\u53ef\n            t--; \n        } while(sta[t+1]!=x);\n    }\n}//\u4ee5\u4e0atarjan\u7f29\u70b9\u90e8\u5206\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) mon[i]=INF;\n        //\u6211\u91c7\u7528\u7684\u662f\u5c06\u4e0d\u80fd\u6536\u4e70\u7684\u95f4\u8c0d\u91d1\u94b1\u8bbe\u4e3a\u65e0\u9650\u5927\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        mon[x]=y;\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(i,x,y);\n    }//\u4ee5\u4e0a\u8bfb\u5165\n    for(int i=1;i<=n;i++) if(mon[i]!=INF) dfs(i);\n    if(tot<n) for(int i=1;i<=n;i++) if(!vis[i]){\n        printf(\"NO\\n%d\",i);\n        return 0;\n    }//\u5982\u679c\u4e0d\u80fd\u6536\u4e70\u7684\u95f4\u8c0d\u4e0d\u88ab\u6536\u4e70\u7684\u95f4\u8c0d\u638c\u63e1\u60c5\u62a5\uff0c\u5219\u65e0\u6cd5\u5f97\u77e5\u4ed6\u7684\u60c5\u62a5\uff0c\u4e0d\u53ef\u884c\n    tot=0;\n    for(int i=1;i<=n;i++) vis[i]=0;\n    //vis\u6570\u7ec4\u529f\u80fd\u4ece\u5224\u65ad\u662f\u5426\u904d\u5386\u5230\u70b9\u53d8\u4e3a\u662f\u5426\u5728\u6808\u4e2d\uff08\u53ea\u662f\u5e76\u4e0d\u60f3\u518d\u5f00\u4e2a\u6570\u7ec4\uff09\n    for(int i=1;i<=n;i++) if(mon[i]!=INF&&!dfn[i]) tar(i);\n    //\u5982\u679c\u53ef\u4ee5\u6536\u4e70\u800c\u4e14\u6ca1\u8bbf\u95ee\u8fc7\u5c31\u8fdb\u884c\u7f29\u70b9\n    for(int i=1;i<=n;i++)\n        for(int j=fir[i];j;j=nex[j])\n        if(bel[i]!=bel[nod[j]]) /*\u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u5224\u65ad*/ rd[bel[nod[j]]]++;\n    int ans=0;\n    for(int i=1;i<=n;i++) if(bel[i]==i&&!rd[i]) ans+=smon[i];\n        //\u5982\u679c\u95f4\u8c0d\u4e0d\u88ab\u4efb\u4f55\u4eba\u638c\u63e1\u60c5\u62a5\u5219\u53ea\u80fd\u6536\u4e70\n    printf(\"YES\\n%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1487076386,
        "uid": 6045,
        "name": "\u6885\u82b1\u9e7f\u5609\u5bbe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "Tarjan\u662f\u4ec0\u4e48\u9b3c\uff1f\uff1f\uff1f\u55b5\u55b5\u55b5\n\nf[]\u50a8\u5b58\u8be5\u8282\u70b9\u7684\u6e90\u53ef\u6536\u4e70\u8282\u70b9\uff1b\n\nnd[]\u50a8\u5b58\u67d0\u53ef\u6536\u4e70\u8282\u70b9\u7684\u5f71\u54cd\uff1b\n\n\u601d\u8def\n\u5148\u5bf9\u6240\u6709\u7684\u53ef\u6536\u4e70\u7684\u70b9\u6309\u6536\u4e70\u4ef7\u683c\u6392\u5e8f\uff1b\n\n\u7136\u540e\u6bcf\u4e2a\u70b9\u5982\u679c\u9700\u8981\u52a0\u5165\uff0c\u66f4\u65b0\u4ed6\u4e4b\u524d\u70b9\u7684\u5f71\u54cd\uff0c\u5e76\u8bb0\u5f55\u8be5\u70b9\u7684\u5f71\u54cd\uff1b\n\n\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u6ca1\u6709\u5f71\u54cd\u6e90\uff0c\u8be5\u70b9\u4e0d\u53d7\u63a7\u5236\uff1b\n\n\u5bf9\u4e8e\u6240\u6709\u53ef\u4ee5\u6536\u4e70\u7684\u70b9\uff0c\u5982\u679c\u5f71\u54cd\u4e3a0\uff0c\u4e0d\u6536\u4e70\uff1b\n\n\n\u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n 1     #include<cstdio>\n 2     #include<cstring>\n 3     #include<algorithm>\n 4     using namespace std;\n 5     const int maxn=3010;\n 6     const int maxr=8010;\n 7     int n,p,r,ans;\n 8     int a,b;\n 9     int h[maxn],hs;\n10     int e_s[maxr],e_n[maxr];\n11     int f[maxn],nd[maxn];\n12     struct nate{int s,v;}d[maxn];\n13     bool cmp(const nate&x,const nate&y){return x.v<y.v;}\n14     void dfs(int k,int s){\n15         if(f[k]) nd[f[k]]--;\n16         f[k]=s,nd[s]++;\n17         for(int i=h[k];i;i=e_n[i])\n18         if(f[e_s[i]]!=s) dfs(e_s[i],s);\n19     }\n20     int main(){\n21         freopen(\"spyweb.in\",\"r\",stdin);\n22         freopen(\"spyweb.out\",\"w\",stdout);\n23         scanf(\"%d%d\",&n,&p);\n24         for(int i=1;i<=p;i++){\n25             scanf(\"%d%d\",&a,&b);\n26             d[i].s=a,d[i].v=b;\n27         }\n28         sort(d+1,d+p+1,cmp);\n29         scanf(\"%d\",&r);\n30         for(int i=1;i<=r;i++){\n31             scanf(\"%d%d\",&a,&b);\n32             ++hs,e_s[hs]=b,e_n[hs]=h[a],h[a]=hs;\n33         }\n34         for(int i=1;i<=p;i++){\n35             if(f[d[i].s]) for(int j=h[d[i].s];j;j=e_n[j]){\n36                 if(!f[e_s[j]]){\n37                     dfs(d[i].s,i);\n38                     break;\n39                 }\n40             }\n41             else dfs(d[i].s,i);\n42         }\n43         for(int i=1;i<=n;i++)\n44         if(!f[i]){\n45             printf(\"NO\\n%d\\n\",i);\n46             return 0;\n47         }\n48         for(int i=1;i<=p;i++) if(nd[i]) ans+=d[i].v;\n49         printf(\"YES\\n%d\\n\",ans);\n50         return 0;\n51     }\n```\n\u4e0d\u8981\u5728\u610f\u6211\u8be1\u5f02\u7684\u540d\u8bcd\u548c\u540d\u8bcd\u89e3\u91ca\uff1b\nblog\uff1ahttp://www.cnblogs.com/J-william/p/6820876.html#\\_label5\n",
        "postTime": 1494141197,
        "uid": 21020,
        "name": "Long\u00b7J\u00b7William",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u4e0b\u9762\u7684\u9898\u89e3\u6709\u4e0d\u5c11\u662f\u7f29\u70b9\u7b97\u6cd5\u2026\u2026\u76f8\u5f53\u795e\u5947\u7684\u770b\u4e0d\u61c2QAQ\n\n### \u600e\u4e48\u60f3\n\n\u8fd9\u4e2a\u9898\u76ee\u7684\u4e3b\u8981\u601d\u8def\uff1a\n\n1. \u9996\u5148\u8981\u80fd\u591f\u8868\u793a\u8fd9\u4e2a\u56fe\u2014\u2014\u5728\u4e0b\u9762\u4f7f\u7528vector\u7684\u6570\u7ec4know\u8868\u793a\u5355\u5411\u8ba4\u8bc6\u5173\u7cfb\n\n2. \u53e6\u5916\uff0c\u5728\u4e0b\u9762\u4f7f\u7528\u7ed3\u6784\u4f53can\\_be\\_bought\u8868\u793a\u80fd\u591f\u88ab\u6536\u4e70\u7684\u4eba\u7684\u5e8f\u53f7\u548c\u6536\u4e70\u7684\u94b1\uff0c\u6570\u7ec4mon\u8868\u793a\u6536\u4e70\u6240\u9700\u8981\u7684\u94b1\uff0c\u6570\u7ec4root\u8868\u793a\u901a\u8fc7\u6536\u4e70root[k]\u5c31\u80fd\u95f4\u63a5\u902e\u6355k\n\n3. \u5148\u5bf9\u80fd\u88ab\u6536\u4e70\u7684\u4eba\u6240\u9700\u8981\u7684\u94b1\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f(\u5728\u4e0b\u9762\u4f7f\u7528sort\u914d\u5408camp)\uff0c\u5bf9\u8fd9\u4e9b\u4eba\uff0c\u4ece\u5c0f\u5230\u5927\u7684\u5f00\u59cb\u679a\u4e3e\n\n4. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u679a\u4e3e\u7684\u4ebai\uff0c\u5982\u679croot[i]==0\uff0c\u8868\u660e\u5148\u524d\u4ed6\u5e76\u6ca1\u6709\u88ab\u6536\u4e70\uff0c\u4ece\u4ef7\u683c\u4e0a\u6765\u5206\u6790\u4ed6\u5fc5\u987b\u88ab\u6536\u4e70\uff0c\u90a3\u4e48\u6240\u6709\u4ed6\u95f4\u63a5\u80fd\u902e\u6355\u7684\u4eba\u90fd\u53ef\u4ee5\u901a\u8fc7\u4ed6\u88ab\u6536\u4e70\u800c\u88ab\u902e\u6355\uff0c\u6240\u4ee5\u8fd9\u4e9b\u4eba\u7684root[]\u88ab\u66f4\u65b0\u4e3ai\uff08\u4e3a\u4ec0\u4e48\uff1f\u89c1A\uff09\n\n\u5982\u679croot[i]!=0\uff0c\u90a3\u4e48 \u56e0\u4e3ai\u88ab\u6536\u4e70\u800c\u88ab\u902e\u6355\u7684\u4eba \u4e5f\u4e00\u6837\u80fd\u591f \u56e0\u4e3aroot[i]\u88ab\u6536\u4e70\u800c\u88ab\u902e\u6355\uff0c\u800c\u524d\u9762\u6392\u8fc7\u5e8f\uff0croot[i]\u88ab\u6536\u4e70\u663e\u7136\u94b1\u8981\u6bd4\u6536\u4e70i\u597d\n\n5. \u679a\u4e3e\u5b8c\u6240\u6709\u7684\u80fd\u591f\u88ab\u6536\u4e70\u7684\u4eba\u4e4b\u540e\uff0c\u5982\u679c\u8fd9n\u4e2a\u4eba\u91cc\u9762\u6709\u4ebaroot\u4e3a0\uff0c\u8bf4\u660e\u4ed6\u59cb\u7ec8\u4e0d\u80fd\u88ab\u902e\u6355\uff0c\u8f93\u51fa\u5e8f\u53f7\u9000\u51fa\u7a0b\u5e8f\n\n6. \u5c06\u6240\u6709\u4eba\u7684root\u6807\u8bb0\u5728buy\u6570\u7ec4\u4e0a\uff0c\u90a3\u4e48\u6700\u540ebuy\u4e0a\u6240\u6709\u88ab\u6807\u8bb0\u7684\u4eba\u5f62\u6210\u7684\u65b9\u6848\u5c31\u662f\u6240\u82b1\u51fa\u53bb\u7684\u94b1\u7684\u6700\u5c0f\u65b9\u6848\uff0c\u6c42\u548c\u8f93\u51fa\n\n### A.\u4e3a\u4ec0\u4e48\u8981\u66f4\u65b0\u8fd9\u4e9b\u4eba\u7684root\uff1f\n\n\u5148\u524d\u6709\u7684\u4ebaw\u56e0\u4e3a\u4ef7\u683c\u66f4\u4f4e\u7684\u4ebab\u6536\u4e70\u800c\u88ab\u902e\u6355\uff0c\u90a3\u4e48\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u6536\u4e70i\u800c\u902e\u6355w\u7684\u8def\u7ebf\u4e0d\u7ecf\u8fc7b\uff1a\u902e\u6355i\u4e00\u5b9a\u8981\u94b1\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u6536\u4e70\u4e0d\u6536\u4e70b\u800c\u53d1\u751f\u6539\u53d8\uff0cb\u4e5f\u8981\u4ed8\u94b1i\u4e5f\u8981\u4ed8\u94b1\uff0c\u6536\u4e70\u6539\u4e0d\u6539\u8fd9\u4e2a\u4eba\u7684root\u65e0\u6240\u8c13\n\n2. \u6536\u4e70i\u800c\u902e\u6355w\u7684\u8def\u7ebf\u7ecf\u8fc7b\uff1ai\u4f7f\u5f97b\u88ab\u902e\u6355\u4f7f\u5f97w\u88ab\u902e\u6355\uff0c\u8fd9\u6837\u4f7fw\u902e\u6355\u5c31\u4e0d\u518d\u9700\u8981\u4e3ab\u4ed8\u94b1\n\n\u7efc\u4e0a\uff0c\u66f4\u6539\u4e86\u4e4b\u540e\u80fd\u591f\u4fdd\u8bc1\u4f7fw\u88ab\u902e\u6355\u7684\u65b9\u6848\u6240\u7528\u7684\u94b1\u6570\u6700\u5c11\uff0c\u7ef4\u62a4\u4e86\u6700\u4f18\u6027\n\n\n\u4ee5\u4e0b\u4e3a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nint n,p;\n\nstruct can_be_bought {\n    int num,money;\n    can_be_bought(int nu,int mo)    {//\u6784\u9020\u51fd\u6570\n                num=nu;\n        money=mo;\n        }\n};\n\ntypedef can_be_bought cbg;\ntypedef vector<int>::iterator int_iter;\ntypedef vector<cbg>::iterator cbg_iter;\n\nvector<int> know[3001];//\u8bb0\u5f55\u6240\u6709\u7684\u95f4\u8c0d\u4e4b\u95f4\u7684\u5355\u5411\u7ebf\u6bb5\nqueue<int>    qu;//\u7528\u4e8e\u66f4\u65b0\u8282\u70b9\nvector<cbg>    can;//\u8bb0\u5f55\u6240\u6709\u80fd\u88ab\u6536\u4e70\u7684\u4eba\u7684\u7f16\u53f7\u548c\u4ef7\u94b1\n\nbool camp(cbg a1,cbg a2)        {\n        return a1.money<a2.money;\n}//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\nint mon[3001]= {0};//\u6536\u4e70\u8fd9\u4e2a\u4eba\u6240\u9700\u8981\u7684\u94b1\uff0c\u65b9\u4fbf\u6700\u540e\u76f8\u52a0\nint root[3001]= {0};//\u902e\u6355\u8fd9\u4e2a\u4eba\u6240\u9700\u8981\u7684\u6536\u4e70\u7684\u4eba\u7684\u7f16\u53f7\nbool buy[3001]= {0};//\u6700\u7ec8\u6536\u4e70\u65b9\u6848\n\nvoid bfs(int ro)    {\n        while(!qu.empty())    {\n                int k=qu.front();\n                qu.pop();\n                if(root[k]!=ro)        {//\u5982\u679c\u902e\u6355\u8fd9\u4e2a\u4eba\u6536\u4e70\u7684\u4e0d\u662f\u81ea\u5df1\uff0c\u9632\u6b62\u73af\u7684\u51fa\u73b0\n                        root[k]=ro;//\u66f4\u65b0root\n                        for(int_iter iter=know[k].begin(); iter!=know[k].end(); iter++)        {\n                                if(root[*iter]==ro)        continue;//\u540c\u4e0a\n                                qu.push(*iter);\n                        }\n                }\n        }\n}\nint main()    {\n        scanf(\"%d%d\",&n,&p);\n        int i;\n        for(i=0; i<p; i++)    {\n                int mo,nu;\n                scanf(\"%d%d\",&nu,&mo);\n                mon[nu]=mo;\n                cbg a(nu,mo);\n                can.push_back(a);\n        }\n        sort(can.begin(),can.end(),camp);//\u4ef7\u94b1\u6392\u5e8f\n        int r;\n        scanf(\"%d\",&r);\n        for(i=0; i<r; i++)    {\n                int x,y;\n                scanf(\"%d%d\",&x,&y);\n                know[x].push_back(y);//\u6709\u5411\u8fb9\u8f93\u5165\n        }\n        cbg_iter iter;\n        for(iter=can.begin(); iter!=can.end(); iter++)    {\n                if(root[iter->num]!=0)    continue;//\u5982\u679c\u4ed6\u80fd\u591f\u901a\u8fc7\u522b\u4eba\u7684\u6536\u4e70\u800c\u88ab\u902e\u6355\u5c31\u4e0d\u7528\u6536\u4e70\u4ed6\n                qu.push(iter->num);\n                bfs(iter->num);\n        }\n        for(i=1; i<=n; i++)    {\n                if(root[i]==0)    {//\u6709\u4eba\u4e0d\u80fd\u901a\u8fc7\u4efb\u4f55\u4eba\u7684\u6536\u4e70\u800c\u88ab\u902e\u6355\n                        printf(\"NO\\n%d\",i);\n                        return 0;\n                }\n                buy[root[i]]=true;\n        }\n        int S=0;\n        for(i=1; i<=n; i++)    {\n                if(buy[i])    {\n                        S+=mon[i];\n                }\n        }\n        printf(\"YES\\n%d\",S);\n        return 0;\n}\n```",
        "postTime": 1495215953,
        "uid": 29077,
        "name": "TBB_Nozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "[*\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c*](https://www.cnblogs.com/Lemir3/p/11097721.html)\n\n[*\u9898\u9762*](https://www.luogu.org/problemnew/show/P1262)\n\n\u8fd9\u9053\u9898\u592a\u795e\u4e86\u5427,\u4ece\u6628\u665a\u4e03\u70b9\u534a\u505a\u5230\u4eca\u5929\u4e0b\u5348\u4e24\u70b9.\n\n\u6211\u7ecf\u5386\u4e86\u4ee5\u4e0b\u6298\u817e(\u4ee5\u4e0b\u5185\u5bb9\u53ef\u8df3\u8fc7):\n\n+ \u4e00\u5f00\u59cb\u60f3\u7684\u662f\u7528Tarjan\u7f29\u70b9,\u7136\u540e\u8dd1\u6700\u77ed\u8def,\u901a\u8fc7\u8def\u5f84\u67d3\u8272,\u8ba9\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6743\u503c\u7b49\u4e8e\u8d77\u70b9(\u4e5f\u5c31\u662f\u53ef\u4ee5\u88ab\u6536\u4e70\u7684\u7f8e\u56fd\u95f4\u8c0d\u7684\u7f16\u53f7),\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9,\u7528\u5b83\u5bf9\u5e94\u7684\u8def\u5f84,\u7d2f\u52a0\u6743\u503c\u5f97\u5230\u7b54\u6848,\u5982\u679c\u6709\u70b9\u7684\u6743\u503c\u4e3a\u6b63\u65e0\u7a77,\u90a3\u4e48\u5c31\u8bf4\u660e\u6709\u95f4\u8c0d\u65e0\u6cd5\u6536\u4e70,\u518d\u626b\u4e00\u904d\u67d3\u8272\u6570\u7ec4\u627e\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u8f93\u51faNO.\n\n\u8fd9\u79cd\u65b9\u5f0f\u8c8c\u4f3c\u53ef\u4ee5,\u4f46\u662f\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019,\u677e\u5f1b\u64cd\u4f5c\u4f1a\u628a\u6743\u503c\u66f4\u5c0f\u7684\u8def\u5f84\u66f4\u65b0\u8fdb\u6765,\u4f46\u662f\u8fd9\u6761\u6700\u77ed\u8def\u53ef\u80fd\u662f\u65e0\u6cd5\u786e\u4fdd\u8dd1\u5411\u6743\u503c\u66f4\u5927\u7684\u70b9\u7684\u524d\u7f00\u70b9\u7684,\u6240\u4ee5\u8bf4\u4f1a\u5bfc\u81f4\u6743\u503c\u53cd\u800c\u66f4\u5927.\u8fd9\u79cd\u65b9\u6cd5\u6700\u9ad8\u5f97\u4e8652\u5206.\n\n\u6bd4\u5982\u4e0b\u9762\u8fd9\u5f20\u56fe:\n\n![P1262_\u7f8e\u5e1d\u7684\u95f4\u8c0d\u7f51\u7edc\u88ab\u6211\u90e8\u6355\u83b7!\u914d\u56fe1.png](https://i.loli.net/2019/06/27/5d1475c97647d90711.png)\n\n1,2,3,4\u53f7\u70b9\u660e\u663e\u662f\u4e2a\u5f3a\u8054\u901a\u5206\u91cf,\u6536\u4e70\u8fd9\u4e2a\u5206\u91cf\u7684\u4ee3\u4ef7\u4e3a10.\n\n5\u53f7\u70b9\u4e5f\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf,\u6536\u4e70\u5b83\u7684\u4ee3\u4ef7\u4e3a20.\n\n\u8be5\u56fe\u53ea\u6709\u4ece5\u53f7\u70b9\u5f00\u59cb,\u624d\u53ef\u4ee5\u904d\u5386\u5b8c\u6240\u6709\u7684\u70b9,\u603b\u4ee3\u4ef7\u4e3a20.\n\n\u4f46\u662f\u5728\u8dd1\u6700\u77ed\u8def\u65f6,\u8fdb\u5165\u7f29\u8fc7\u70b9\u540e\u76841,2,3,4\u8282\u70b9\u540e,\u4f1a\u628a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u677e\u5f1b\u4e3a10,\u4f46\u662f\u8fd9\u4e2a10\u662f\u65e0\u6cd5\u8dd1\u5b8c\u6574\u4e2a\u56fe\u7684,\u8fd9\u4e5f\u5bfc\u81f4\u603b\u4ee3\u4ef7\u53d8\u4e3a\u4e8630;\n\n+ \u7136\u540e\u6211\u751a\u81f3\u60f3\u7f29\u70b9\u4e4b\u540e\u8dd1\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811,\u4f46\u662f\u7b97\u4e86\u4e0b\u8fd9\u6837\u505a\u4f1a\u8d85\u65f6.\n\n+ \u4e4b\u540e\u6211\u53c8\u60f3\u597d\u4e86\u597d\u4e45,\u548c[*zxs*](https://www.cnblogs.com/zsx6/)\u5927\u4f6c\u5728\u4e2d\u5348\u6070\u996d\u7684\u65f6\u5019\u4ea4\u6d41\u4e86\u4e0b\u8fd9\u9053\u9898,\u624d\u60f3\u51fa\u6765\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9,\u7136\u540e\u7d2f\u52a0\u8fd9\u4e9b\u70b9\u7684\u6743\u503c.\u8fd9\u662f\u56e0\u4e3a\u5165\u5ea6\u4e3a0\u7684\u70b9\u662f\u4e00\u5b9a\u8981\u88ab\u6536\u4e70\u7684,\u4e0d\u7136\u5c31\u65e0\u6cd5\u904d\u5386\u5b8c\u5168\u56fe,\u5982\u679c\u6709\u95f4\u8c0d\u70b9\u65e0\u6cd5\u88ab\u6536\u4e70\u800c\u4e14\u65e0\u6cd5\u88ab\u5176\u4ed6\u95f4\u8c0d\u544a\u53d1,\u5c31\u8f93\u51faNO.\n\n\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u5728\u4ee3\u7801\u91cc\u89e3\u91ca\u7f62,\u5404\u4f4d\u5728\u9605\u8bfb\u6211\u7684\u53d8\u91cf\u540d\u65f6\u53ea\u7528\u770b\u4e0b\u5212\u7ebf\u540e\u7684\u90e8\u5206.\n\n**\u4ee3\u7801**:\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<stack>\n#include<queue>\n\nusing namespace std;\n\nstack<int>s;\n\nstruct edge\n{\n    int to,next;\n}e[10010];\n\nint OddToThePeoplesVolunteerArmy_n,GreatSoviet_p,TheSovietUnion_CntSize,PeoplesRupublic_TimeCnt,YpaForOurGreatMotherland_r,TheDefenderOfMoscow_size,TheInternationalMustCometrue_ans;\nint head[10010],dfn[10010],low[10010],indu[10010],dis[10010],color[10010],Nodedis[10010];\nbool flag[10010];\n\nvoid EdgeAdd(int,int);\nvoid Tarjan(int);\n\nint main()\n{\n    memset(head,-1,sizeof(head));\n    memset(Nodedis,0x3f,sizeof(Nodedis));\n    memset(dis,0x3f,sizeof(dis));\n    scanf(\"%d%d\",&OddToThePeoplesVolunteerArmy_n,&GreatSoviet_p);\n    for(int _=1;_<=GreatSoviet_p;_++)\n    {\n        int id,USAIsRubbish;\n        scanf(\"%d%d\",&id,&USAIsRubbish);\n        dis[id]=USAIsRubbish;\n    }\n    scanf(\"%d\",&YpaForOurGreatMotherland_r);\n    for(int _=1;_<=YpaForOurGreatMotherland_r;_++)\n    {\n        int father,son;\n        scanf(\"%d%d\",&father,&son);\n        EdgeAdd(father,son);\n    }\n    for(int _=1;_<=OddToThePeoplesVolunteerArmy_n;_++)\n    {\n        if(dfn[_]==0&&dis[_]!=0x3f3f3f3f)//\u628a\u53ef\u4ee5\u6536\u4e70\u7684\u7f8e\u56fd\u95f4\u8c0d\u8fdb\u5165Tarjan\u7f29\u70b9,\u8fd9\u6837\u7f29\u51fa\u6765\u7684\u70b9\u624d\u80fd\u591f\u88ab\u904d\u5386.\n        {\n            Tarjan(_);\n        }\n    }\n    for(int _=1;_<=OddToThePeoplesVolunteerArmy_n;_++)//\u7f29\u5b8c\u70b9\u540e\u5982\u679c\u5b58\u5728\u65e0\u6cd5\u88ab\u6536\u4e70,\u53c8\u65e0\u6cd5\u88ab\u5176\u5b83\u95f4\u8c0d\u6307\u63a7\u7684\u70b9,\u5c31\u8bf4\u660e\u65e0\u6cd5\u6536\u4e70\u6240\u6709\u95f4\u8c0d.\n    {\n        if(dfn[_]==0)\n        {\n            printf(\"NO\\n%d\\n\",_);\n            return 0;\n        }\n    }\n    for(int _=1;_<=OddToThePeoplesVolunteerArmy_n;_++)\n    {\n        for(int __=head[_];__!=-1;__=e[__].next)\n        {\n            int to=e[__].to;\n            if(color[_]!=color[to])\n            {\n                indu[color[to]]++;//\u7edf\u8ba1\u5165\u5ea6.\n            }\n        }\n    }\n    for(int _=1;_<=TheSovietUnion_CntSize;_++)\n    {\n        if(indu[_]==0)//\u7d2f\u52a0\u5fc5\u987b\u6536\u4e70\u7684\u95f4\u8c0d\u7684\u4ee3\u4ef7.\n        {\n            TheInternationalMustCometrue_ans+=Nodedis[_];\n//            printf(\"Nodedis:%d\\n\",Nodedis[_]);\n        }\n    }\n    printf(\"YES\\n%d\\n\",TheInternationalMustCometrue_ans);\nreturn 0;\n}\n\nvoid EdgeAdd(int from,int to)\n{\n    e[++TheDefenderOfMoscow_size].to=to;\n    e[TheDefenderOfMoscow_size].next=head[from];\n    head[from]=TheDefenderOfMoscow_size;\n}\n\nvoid Tarjan(int FuckTrump_from)\n{\n    dfn[FuckTrump_from]=low[FuckTrump_from]=++PeoplesRupublic_TimeCnt;\n    s.push(FuckTrump_from);\n    flag[FuckTrump_from]=true;\n    for(int _=head[FuckTrump_from];_!=-1;_=e[_].next)\n    {\n        int to=e[_].to;\n        if(dfn[to]==0)\n        {\n            Tarjan(to);\n            low[FuckTrump_from]=min(low[FuckTrump_from],low[to]);\n        }\n        else if(flag[to]==true)\n        {\n            low[FuckTrump_from]=min(low[FuckTrump_from],dfn[to]);\n        }\n    }\n    if(dfn[FuckTrump_from]==low[FuckTrump_from])\n    {\n        TheSovietUnion_CntSize++;\n        while(!s.empty())\n        {\n            int RedAmryIsTheStrongest_temp=s.top();\n            s.pop();\n            flag[RedAmryIsTheStrongest_temp]=false;\n            color[RedAmryIsTheStrongest_temp]=TheSovietUnion_CntSize;\n            Nodedis[TheSovietUnion_CntSize]=min(Nodedis[TheSovietUnion_CntSize],dis[RedAmryIsTheStrongest_temp]);//\u7f29\u70b9\u540e\u7684\u70b9\u7684\u4ee3\u4ef7\u4e3a\u539f\u6765\u7684\u73af\u7684\u4ee3\u4ef7\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u4ee3\u4ef7.\n            color[RedAmryIsTheStrongest_temp]=TheSovietUnion_CntSize;//\u67d3\u8272.\n            if(RedAmryIsTheStrongest_temp==FuckTrump_from)break;\n        }\n    }\n}\n\n```",
        "postTime": 1561623478,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "P1262_\u7f8e\u5e1d\u7684\u95f4\u8c0d\u7f51\u7edc\u88ab\u6211\u90e8\u6355\u83b7!"
    },
    {
        "content": "$Tarjan$\u88f8\u9898\u3002\n\n\u5176\u5b9e\u6211\u7684\u601d\u8def\u6bd4\u8f83\u76f4\u767d\uff0c\u4f46\u662f\u7801\u91cf\u7a0d\u5927(\u5176\u5b9e\u4e5f\u5c3120min\u5de6\u53f3..)\n\n\u9996\u5148\u7684\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\u5c31\u662f\uff0c\u82e5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u6240\u6709\u7684\u95f4\u8c0d\uff0c\u5f53\u4e14\u4ec5\u5f53\u7f29\u70b9\u540e\u6240\u6709\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u4e0a\u6709\u53ef\u4ee5\u8d3f\u8d42\u7684\u95f4\u8c0d\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u7f29\u5b8c\u70b9\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a$dag$\uff0c\u6240\u6709\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u82e5\u6ca1\u6709\u4eba\u7684\u8bdd\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u8d70\u5230\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5982\u679c\u53ef\u4ee5\u8d70\u5230\u7684\u8bdd\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u7684\u6743\u503c\u52a0\u8d77\u6765\u3002\n\n\uff08\u5982\u679c\u4e00\u4e2a\u70b9\u4e0a\u6709\u591a\u4e2a\u53ef\u8d3f\u8d42\u7684\u95f4\u8c0d\uff0c\u8bb0\u5f97\u53d6\u6700\u5c0f\u503c\u3002\uff09\n\n\u7136\u540e\u6211\u4eec\u518d\u770b\u4e0d\u80fd\u63a7\u5236\u6240\u6709\u95f4\u8c0d\u7684\u60c5\u51b5\u3002\n\n\u663e\u7136\u7684\u4e00\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5c31\u7f29\u70b9\u540e\u7684\u56fe\u91cd\u5efa\u4e00\u6b21\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u6709\u95f4\u8c0d\u7684\u70b9\u8fdb\u884c\u67d3\u8272\uff0c\u6700\u540e\u5269\u4e0b\u7684\u6240\u6709\u70b9\u4e2d\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u6709\u70b9\u8003\u9a8c\u7801\u529b\uff0c\u4e0d\u8fc7\u5982\u679c$tarjan$\u5199\u591a\u70b9\u7684\u8bdd\u5176\u5b9e\u4f1a\u53d1\u73b0\u8fd8\u662f\u86ee\u597d\u5199\u7684\u3002\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 8000 + 10;\nint n , p , r;\nint esp[N] , val[N] ,cnt;\nint head[N];\n\nstruct Edge {\n\tint to , nxt;\n}e[N];\n\nvoid add(int u  , int v ) {\n\te[++ cnt].to = v;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nstruct Edge_new{\n\tint to , nxt;\n}e_new[N];\n\nint head_new[N]; \nvoid add_new(int u ,int v) {\n\te_new[++ cnt].to = v;\n\te_new[cnt].nxt = head_new[u];\n\thead_new[u] = cnt;\n}\n\nint tot , idx , dfn[N] , low[N] , ins[N] , top , st[N] , wic[N];\nint worth[N];\nbool flag[N];\n\nvector <int> S[N];\n\nvoid Tarjan(int now) {\n\tdfn[now] = low[now] = ++ idx;\n\tins[now] = 1; st[++ top] = now;\n\tfor(int i = head[now] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif(!dfn[v]) {\n\t\t\tTarjan(v);\n\t\t\tlow[now] = min(low[now] , low[v]);\n\t\t} else if(ins[v]) low[now] = min(low[now] , dfn[v]);\n\t}\n\tif(low[now] == dfn[now]) {\n\t\ttot ++;\n\t\tint p;\n\t\tdo {\n\t\t\tp = st[top --];\n\t\t\tif(esp[p]) flag[tot] = true , worth[tot] = min(worth[tot] , val[p]);\n\t\t\tS[tot].push_back(p);\n\t\t\twic[p] = tot;\n\t\t\tins[p] = 0;\n\t\t}while(p != now);\n\t}\n}\n\nint ind[N];\n\nint vis[N];\nvoid dfs(int now) {\n\tvis[now] = 1;\n\tfor(int i = head_new[now] ; i ; i = e_new[i].nxt) {\n\t\tint v = e_new[i].to;\n\t\tif(vis[v]) continue;\n\t\tdfs(v);\n\t}\n}\n\nint Work() {\n\tfor(int i = 1 ; i <= tot ; ++ i) \n\t\tif(flag[i] && !vis[i]) dfs(i);\n\tint r = 0x3f3f3f3f;\t\n\tfor(int i = 1 ; i <= tot ; ++ i) \n\t\tif(!vis[i]) {\n\t\t\tfor(int j = 0 ; j < S[i].size() ; j ++) {\n\t\t\t\tr = min(r , S[i][j]);\n\t\t\t}\n\t\t}\n\treturn r;\n}\n\nint main () {\n\tscanf(\"%d %d\" , &n , &p);\n\tfor(int i = 1 ; i <= n ; ++ i) worth[i] = 0x3f3f3f3f;\n\tfor(int i = 1 ; i <= p ; ++ i) {\n\t\tint aa , bb;\n\t\tscanf(\"%d %d\" , &aa , &bb);\n\t\tesp[aa] = 1; val[aa] = bb;\t\n\t}\n\tscanf(\"%d\" , &r);\n\tfor(int i = 1 ; i <= r ; ++ i) {\n\t\tint u , v; scanf(\"%d %d\" , &u ,&v);\n\t\tadd(u , v);\n\t}\n\tfor(int i = 1 ; i <= n ; ++ i) if(!dfn[i]) Tarjan(i);\n\tcnt = 0;\n\tfor(int i = 1 ; i <= n ; ++ i ) {\n\t\tfor(int j = head[i] ; j ; j = e[j].nxt) {\n\t\t\tint v = e[j].to;\n\t\t\tif(wic[i] == wic[v]) continue;\n\t\t\tind[wic[v]] ++;\n\t\t}\n\t}\n\tint ans = 0 , f = 0; \n\tfor(int i = 1 ; i <= tot ; ++ i) {\n\t\tif(!ind[i] && flag[i]) {\n\t\t\tans += worth[i];\n\t\t} else if(!ind[i]) f = 1;\n\t}\n\tif( ! f) {\n\t\tprintf(\"YES\\n%d\\n\" , ans);return 0;\n\t} else {\n\t\tfor(int i = 1 ; i <= tot ; ++ i) {\n\t\t\tfor(int j = 0 ; j < S[i].size() ; j ++) {\n\t\t\t\tint p = S[i][j];\n\t\t\t\tfor(int k = head[p] ; k ; k = e[k].nxt) {\n\t\t\t\t\tint v = e[k].to;\n\t\t\t\t\tif(wic[v] == wic[p]) continue;\n\t\t\t\t\tadd_new(wic[p] , wic[v]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"NO\\n%d\\n\",Work());\t\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572269573,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u6211\u4eec\u89c2\u5bdf\u9898\u76ee\u7684\u6027\u8d28\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u6709\u4e00\u4e2a\u4eba\u88ab\u6536\u4e70\u6216\u88ab\u63a7\u5236\u4e86\uff0c\u6574\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u88ab\u63a7\u5236\n\n\u9996\u5148\uff0c\u6211\u4eec\u8dd1\u4e00\u8fb9$tarjan$\u7f29\u70b9\uff0c\u7136\u540e\u5c06\u6240\u6709\u53ef\u6536\u4e70\u7684\u95f4\u8c0d\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u8dd1\u4e00\u8fb9\u62d3\u6251\u6392\u5e8f  \n\u5982\u679c\u6700\u540e\u6240\u6709\u70b9\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u8f93\u51fa`YES`\uff0c\u5426\u5219\u8f93\u51fa`NO`\u3002 \n\n\u8f93\u51fa`NO`\u7684\u7b2c\u4e8c\u95ee\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u5173\u952e\u662f`YES`\u7684\u7b2c\u4e8c\u95ee  \n\n\u65e2\u7136\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u6240\u6709\u7684\u95f4\u8c0d\u90fd\u53ef\u4ee5\u88ab\u63a7\u5236\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5165\u5ea6\u4e0d\u4e3a$0$\u4e14\u53ef\u4ee5\u88ab\u6536\u4e70\u7684\u95f4\u8c0d\uff0c\u4ed6\u7684\u524d\u9a71\u8282\u70b9\u80af\u5b9a\u4e5f\u88ab\u63a7\u5236\u4e86\uff0c\u8bf4\u660e\u4ed6\u7684\u524d\u9a71\u8282\u70b9\u4e2d\u6709\u53ef\u88ab\u6536\u4e70\u7684\u95f4\u8c0d\uff0c\u5e76\u4e14\u660e\u663e\u4ef7\u503c\u66f4\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e70\u5165\u5ea6\u4e3a$0$\u7684\u8282\u70b9\uff08\u95f4\u8c0d\uff09\u3002 \u8fd9\u91cc\u8bf4\u7684\u5165\u5ea6\u6307\u7684\u662f\u6240\u5728\u5f3a\u8054\u901a\u5206\u91cf\u7684\u5165\u5ea6\n\n### \u6ce8\u610f\uff1a \u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u53ef\u6536\u4e70\u7684\u95f4\u8c0d\uff0c\u53ea\u9009\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e2a  \n\u4e0d\u7136\u4f60\u53ea\u6709$54$\u5206\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<stack>\nusing namespace std;\nconst int Maxn=3010,inf=0x3f3f3f3f;\nvector <int> e[Maxn],g[Maxn];\nint low[Maxn],dfn[Maxn],f[Maxn];\nint ind[Maxn],ind2[Maxn];\nbool vis[Maxn];\nint n,m,ans,k,timecnt;\nstack <int> s;\nstruct spy{\n\tint pos,cost;\n}a[Maxn];\ninline bool cmp(spy x,spy y)\n{\n\treturn x.cost<y.cost;\n}\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9')s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\n\treturn s*w;\n}\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++timecnt;\n\tvis[x]=1,s.push(x);\n\tfor(int i=0;i<e[x].size();++i)\n\t{\n\t\tint y=e[x][i];\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(vis[y])low[x]=min(low[x],low[y]);\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\twhile(s.size())\n\t\t{\n\t\t\tint y=s.top();\n\t\t\ts.pop();\n\t\t\tf[y]=x,vis[y]=0;\n\t\t\tif(x==y)break;\n\t\t}\n\t}\n}\nvoid topo()\n{\n\tqueue <int> q;\n\tfor(int i=1;i<=k;++i)\n\tq.push(f[a[i].pos]);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(int i=0;i<g[x].size();++i)\n\t\t{\n\t\t\tint y=g[x][i];\n\t\t\tif(!ind[y])continue;\n\t\t\tind[y]--;\n\t\t\tif(!ind[y])q.push(y);\n\t\t}\n\t}\n}\nint check()\n{\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(f[i]!=i)continue;\n\t\tif(!vis[i])return i;\n\t}\n\treturn 0;\n}\nint main()\n{\n\t//freopen(\"in.txt\",\"r\",stdin);\n\tn=read(),k=read();\n\tfor(int i=1;i<=k;++i)\n\ta[i].pos=read(),a[i].cost=read();\n\tm=read();\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint x=read(),y=read();\n\t\te[x].push_back(y);\n\t}\n\tfor(int i=1;i<=n;++i)\n\tif(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(int j=0;j<e[i].size();++j)\n\t\t{\n\t\t\tint x=i,y=e[i][j];\n\t\t\tif(f[x]==f[y])continue;\n\t\t\tg[f[x]].push_back(f[y]);\n\t\t\tind[f[y]]++,ind2[f[y]]++; //\u5b58\u50a8\u4e24\u904d\u5165\u5ea6\u662f\u56e0\u4e3a\u5176\u4e2d\u4e00\u4e2a\u4f1a\u5728\u62d3\u6251\u6392\u5e8f\u4e2d\u88ab\u4fee\u6539\n\t\t}\n\t}\n\ttopo();\n\tint tmp=check();\n\tif(tmp)\n\t{\n\t\tprintf(\"NO\\n%d\\n\",tmp);\n\t\treturn 0;\n\t}\n\tmemset(vis,0,sizeof(vis));//\u591a\u6b21\u5229\u7528\u4e86vis\n\tsort(a+1,a+1+k,cmp);\n\tfor(int i=1;i<=k;++i)\n\t{\n\t\tif(!ind2[f[a[i].pos]] && !vis[f[a[i].pos]])\n\t\tans+=a[i].cost,vis[f[a[i].pos]]=1;\n\t}\n\tprintf(\"YES\\n%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1575021817,
        "uid": 120362,
        "name": "Priori_Incantatem",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u6211\u4ece\u9694\u58c1  P2835 \u523b\u5f55\u5149\u76d8 \u8fc7\u6765\uff1b\n\n\u4ee3\u7801\u5dee\u4e0d\u591a\uff0ctarjan\u7f29\u70b9\u6a21\u677f\uff1b\n\n\u7f29\u7684\u70b9\u4ef7\u683c\u53d6\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6700\u5c0f\u4ef7\u683c\u4fbf\u53ef\uff1b\n\n\u6700\u540e\u5982\u679c\u8fd9\u4e2a\u70b9\u80fd\u901a\u8fc7\u4e70\u5176\u4ed6\u4eba\u5e72\u6389\u90a3\u80af\u5b9a\u4e0d\u4e70\uff1b\n\n###\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<stack>\nusing namespace std;\nconst int N=3005,INF=2147483647;\nint n,p,r,t1,t2,t3,k;\nint tot,head[N*3],next[N*3],to[N*3];\nint w[N],color[N],dfn[N],low[N],cost[N],timer,color_num,rd[N],ans;\nbool vis[N],in[N];\nstack<int> sta;\ninline void add(int x,int y){\n    to[++tot]=y;\n    next[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs(int x){\n    vis[x]=1;k++;\n    for(int i=head[x];i!=-1;i=next[i]){\n        if(!vis[to[i]])     dfs(to[i]);\n    }\n}\nvoid tarjan(int x){         //\u9694\u58c1\u9898\u7684\u6a21\u677f\n    dfn[x]=low[x]=++timer;\n    in[x]=1;sta.push(x);\n    for(int i=head[x];i!=-1;i=next[i]){\n        if(!dfn[to[i]]){\n            tarjan(to[i]);\n            low[x]=min(low[x],low[to[i]]);\n        }\n        else if(in[to[i]]) low[x]=min(low[x],dfn[to[i]]);\n    }\n    if(dfn[x]==low[x]){              //\u4e0d\u613f\u610f\u7528do while \u6539\u4e0d\u8fc7\u6765\u4e86\uff1b\n        color_num++;\n        while(sta.top()!=x){\n            color[sta.top()]=color_num;\n            cost[color_num]=min(cost[color_num],w[sta.top()]);\n            in[sta.top()]=0;\n            sta.pop();\n        }\n        color[sta.top()]=color_num;\n        cost[color_num]=min(cost[color_num],w[sta.top()]); //\u53d6\u6700\u5c0f\u82b1\u8d39\n        in[sta.top()]=0;\n        sta.pop();\n    }\n}\nint main(){\n    cin>>n>>p;\n    fill(head,head+N*3,-1);\n    fill(w,w+N,INF);\n    fill(cost,cost+N,INF);\n    for(int i=1;i<=p;i++){\n        cin>>t1>>t2;\n        w[t1]=t2;\n    }\n    cin>>r;\n    for(int i=1;i<=r;i++){\n        cin>>t1>>t2;\n        add(t1,t2);\n    }\n    for(int i=1;i<=n;i++){                     //dfs\u641c\u4e00\u4e0b\u770b\u770b\u662f\u5426\u6709\u89e3\n        if(w[i]!=INF&&!vis[i]){\n            dfs(i);\n        }\n    }\n    if(k<n){\n        cout<<\"NO\"<<endl;\n        for(int i=1;i<=n;i++){\n            if(!vis[i]){\n                cout<<i<<endl;  \n                return 0;          //\u76f4\u63a5\u5f3a\u9000\n            }\n        }    \n    } \n    for(int i=1;i<=n;i++){\n        if(!dfn[i]) tarjan(i);\n    }\n/*    for(int i=1;i<=n;i++){           //\u8c03\u8bd5\u7528\u7684\n        cout<<color[i]<<\" \";\n    }\n    for(int i=1;i<=n;i++){            //\u8fb9\u5199\u8fb9\u8c03\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u7b49\u4ee3\u7801\u957f\u4e86\u518d\u627e\u9519\u5c31\u9ebb\u70e6\u4e86\n        cout<<cost[color[i]]<<\" \";\n    }*/\n    for(int i=1;i<=n;i++){\n        for(int j=head[i];j!=-1;j=next[j]){\n            if(color[i]!=color[to[j]])        //\u4e00\u5f00\u59cb\u8fd9\u91cc\u5fd8\u52a0\u4e86 \u53ea\u670954\u5206\uff1f\uff1f\uff1f\uff1f\uff08\u7adf\u7136\u4e0d\u662f5\u7684\u500d\u6570\uff09\n            rd[color[to[j]]]++;\n        }\n    }\n    for(int i=1;i<=color_num;i++){\n        if(!rd[i]) ans+=cost[i];\n    }\n    cout<<\"YES\"<<endl;\n    cout<<ans<<endl;\n}\n```\n/\\*\n7\n6\n1 10\n2 9\n3 8\n4 7\n5 6\n6 5\n6\n1 2\n2 3\n3 4\n4 5\n5 2\n6 7\n\u6211\u81ea\u5df1\u9020\u7684\u6570\u636e\n\n\u7b54\u6848\u5e94\u8be5\u662f 15\n\n\\*/",
        "postTime": 1506087064,
        "uid": 27495,
        "name": "bymlg001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "# \u524d\u7f6e\u77e5\u8bc6\uff1a\n\n- [\u5f3a\u8054\u901a\u5206\u91cf](https://blog.csdn.net/qq_46230164/article/details/105406699)\n\n# \u5206\u6790\n\n\u4f1a\u4e86\u5f3a\u8054\u901a\u5206\u91cf\u4ee5\u540e\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5199\u8fd9\u9053\u9898\u4e86\u3002\u9996\u5148\u8fd9\u9053\u9898\u4e0d\u662f\u4e00\u4e2a $DAG$ \u6211\u4eec\u5e94\u8be5\u5148\u7f29\u70b9\uff0c\u628a\u8fd9\u4e2a\u56fe\u53d8\u6210\u4e00\u4e2a $DAG$\u3002\n\n\u53d8\u6210 $DAG$ \u5c31\u597d\u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\uff0c\u7b54\u6848\u5373\u4e3a\u6240\u6709\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u7684\u503c\u7684\u548c\uff08\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5185\u7684\u6240\u6709\u4eba\u88ab\u6536\u4e70\u7684\u6570\u989d\u4e2d\u7684\u6700\u5c0f\u503c\uff08\u4e0d\u4f1a\u88ab\u6536\u4e70\u94b1\u6570\u4e3a $\\inf$\uff09\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\ntemplate<typename T>inline void read(T &FF){\n\tT RR=1;FF=0;char CH=getchar();\n\tfor(;!isdigit(CH);CH=getchar())if(CH=='-')RR=-1;\n\tfor(;isdigit(CH);CH=getchar())FF=(FF<<1)+(FF<<3)+(CH^48);\n\tFF*=RR;\n}\ntemplate<typename T>inline void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)write(x/10);\n\tputchar('0'+x%10);\n}\nconst int MAXN=1e6+10,MAXM=1e6+10;\nint s[MAXN],stop,dfn[MAXN],low[MAXN],scccnt,sccnum[MAXN],dfscnt,tot,he[MAXN],ne[MAXM<<1],ed[MAXM<<1],n,x,y,de[MAXN],ans,m,k,dis[MAXN],num[MAXN],sum[MAXN];\nvoid add(int x,int y){\n\ted[++tot]=y;\n\tne[tot]=he[x];\n\the[x]=tot;\n}\ninline void tarjan(int now){\n\tdfn[now] = low[now] = ++dfscnt;\n\ts[stop++] = now;\n\tfor (int i=he[now];i;i=ne[i]){\n\t\tif(!dfn[ed[i]]){\n\t\t\ttarjan(ed[i]);\n\t\t\tlow[now] = min(low[now], low[ed[i]]);\n\t\t}else if(!sccnum[ed[i]]) {\n\t\t\tlow[now] = min(low[now], dfn[ed[i]]);\n\t\t}\n\t}\n\tif(dfn[now]==low[now]){\n\t\tscccnt++;\n\t\tdo{\n\t\t\tsccnum[s[--stop]]=scccnt;\n\t\t\tsum[scccnt]=min(sum[scccnt],dis[s[stop]]);//\u53d6min\n\t\t}while(s[stop]!=now);\n\t}\n}//\u5f3a\u8054\u901a\u5206\u91cf\nsigned main(){\n\tmemset(sum,127,sizeof(sum));//\u8d4b\u4e0a\u65e0\u7a77\u5927\n\tmemset(dis,127,sizeof(dis));//\u8d4b\u4e0a\u65e0\u7a77\u5927\n\tread(n);read(k);\n\tfor(int i=1;i<=k;i++)read(num[i]),read(dis[num[i]]);\n\tread(m);\n\tfor(int i=1;i<=m;i++){\n\t\tread(x);read(y);\n\t\tadd(x,y);\n\t}\n\tfor(int i=1;i<=k;i++)\n\t\tif(!dfn[num[i]])tarjan(num[i]);\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])return cout<<\"NO\\n\"<<i,0;//\u53ef\u4ee5\u88ab\u6536\u4e70\u7684\u70b9\u4e2d\u4e0d\u77e5\u9053\u8fd9\u4e2a\u70b9\u7684\u6d88\u606f\uff0c\u5373\u4e3a\u4e0d\u53ef\u4ee5\u63a7\u5236\u6240\u6709\u95f4\u8c0d\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=he[i];j;j=ne[j])\n\t\t\tif(sccnum[i]!=sccnum[ed[j]])de[sccnum[ed[j]]]++;\n\tfor(int i=1;i<=scccnt;i++)\n\t\tif(!de[i])ans+=sum[i];\n\tcout<<\"YES\\n\"<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1586660754,
        "uid": 180242,
        "name": "orzdevinwang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7531\u4e8e\u5b58\u5728\u73af\u9700\u8981\u7f29\u70b9\uff0c\u5f53\u7136\u7f29\u70b9\u4e0d\u662f\u8fd9\u9898\u7684\u6838\u5fc3\u3002\n\n\u7531\u9898\u610f\u53ef\u77e5\uff0c\u5047\u5982\u95f4\u8c0d$1$\u638c\u63a7\u7740\u95f4\u8c0d$2$\u7684\u60c5\u62a5\uff0c\u95f4\u8c0d$2$\u53c8\u638c\u63a7\u7740$3$\u548c$4$\u7684\u60c5\u62a5\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u5bf9$1$\u884c\u8d3f\uff0c$1$\u5c31\u4f1a\u63d0\u4f9b$2$\u7684\u4fe1\u606f\uff0c$2$\u88ab\u63ed\u53d1\u540e\uff0c\u53c8\u4f1a\u900f\u9732$3$\u3001$4$\u7684\u60c5\u62a5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4e0a\u8ff0\u60c5\u51b5\u8f6c\u5316\u4e3a\u56fe\uff0c\u90a3\u5c31\u662f\n```\n1 -> 2\n2 -> 3\n2 -> 4\n...\n\n\n```\n\u4e5f\u5c31\u662f\u8bf4\uff0c**\u4e00\u4e2a\u70b9\u80fd\u591f\u5230\u8fbe\u7684\u70b9\uff0c\u90fd\u662f\u5b83\u80fd\u591f\u63a7\u5236\u7684\u70b9\u3002**\n\n\u800c\u4e14\uff0c\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e2d\uff0c\u5982\u679c$1$\u548c$2$\u90fd\u80fd\u591f\u88ab\u8d3f\u8d42\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5148\u5bf9\u8c01\u52a8\u624b\u597d\u5462\uff1f\n\n\u5f53\u7136\u662f$1$\u4e86\uff01\u56e0\u4e3a\u6709$1$\u5c31\u80fd\u591f\u63a7\u5236$2$\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u627e$2$\u5e72\u561b\uff01\u56e0\u6b64\uff0c**\u5982\u679c$a,b$\u90fd\u53ef\u4ee5\u88ab\u8d3f\u8d42\uff0c\u800c\u4ece$a$\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe$b$\uff0c\u6211\u4eec\u4e00\u5b9a\u4f1a\u4f18\u5148\u8d3f\u8d42$a$\u3002**\n\n\u53ef\u77e5\u5728\n```\n1 -> 2\n2 -> 3\n3 -> 1\n```\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$1$\u3001$2$\u3001$3$\u6784\u6210\u4e86\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4efb\u610f\u8d3f\u8d42\u4e00\u4e2a\u5c31\u53ef\u4ee5\u5f97\u5230\u5168\u90e8\u4e09\u4e2a\u4eba\u7684\u60c5\u62a5\uff08\u6216\u8005\u8bf4**\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u53ef\u8d3f\u8d42\u7684**\uff09\u3002\n\n\u56e0\u6b64\uff0c\u672c\u9898\u9700\u8981\u7528\u5230\u7f29\u70b9\u7684\u7b97\u6cd5\u3002\u60f3\u5fc5\u5927\u5bb6\u90fd\u559c\u6b22\u7528$\\mathrm{Tarjan}$\u6765\u7f29\u70b9\uff0c\u4f46\u8fd9\u91cc\u5462\uff0c\u672c\u849f\u84bb\u8981\u4ecb\u7ecd\u4e00\u79cd\u51b7\u95e8\u7684\u7f29\u70b9\u7b97\u6cd5\u2014\u2014$\\bold{Kosaraju} $\u3002\n\n\u6b64\u7b97\u6cd5\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff1a\n\n$\\ $\n\n\u5bf9\u56fe\u8dd1\u4e00\u904d$\\mathrm{DFS}$\uff0c\u6309\u7167**\u9000\u51fa\u641c\u7d22\u7684\u987a\u5e8f**\u5c06\u6bcf\u4e2a\u70b9**\u5165\u6808**\uff1b\u5efa\u7acb\u4e00\u5f20\u53cd\u56fe\uff08\u6240\u6709\u8fb9\u7684\u6307\u5411\u4ece$x ->y$\u53d8\u6210$y->x$\uff09\uff0c\u518d\u4f9d\u6b21\u4ece\u6808\u9876\u53d6\u70b9\uff0c\u4f5c\u4e3a\u8d77\u70b9**\u5728\u53cd\u56fe\u4e0a**\u8dd1$\\mathrm{DFS}$\uff0c\u8fd9\u4e2a\u8d77\u70b9\u80fd\u8dd1\u5230\u7684\u70b9\u90fd\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\uff01\n\n$\\ $\n\n~~\uff08\u5b66\u8fd9\u4e2a\u7528\u7684\u65f6\u95f4\u4e0d\u77e5\u9053\u6bd4$\\mathrm{Tarjan}$\u77ed\u591a\u5c11\uff09~~\n\n\u81f3\u4e8e\u8fd9\u7b97\u6cd5\u7684\u539f\u7406\u561b\u3002\u3002\u3002~~[\u70b9\u6b64\u5de6\u8f6c\u677f\u5b50\u9898\u4e86\u89e3\u66f4\u591a](https://www.luogu.org/problem/P3387)~~\n\n\u5b8c\u6210\u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u4ece$\\mathrm{DAG}$\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u6709\u5165\u5ea6\u7684\u70b9\u4e00\u5b9a\u4f1a\u88ab\u67d0\u4e2a\u6ca1\u6709\u5165\u5ea6\u7684\u70b9\u63a7\u5236\u3002\n\n\u53d7\u6b64\u601d\u60f3\u5f71\u54cd\uff0c\u5f53\u65f6\u6211\u4fbf\u60f3\u5230\u4e86\u8fd9\u6837\u4e00\u79cd\u60f3\u6cd5\u2014\u2014\u4ece\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u5165\u624b\u3002\u679a\u4e3e**\u53ef\u8d3f\u8d42\u7684\u5f3a\u8fde\u901a\u5206\u91cf**\uff08\u65b0$\\mathrm{DAG}$\u4e2d\u7684\u70b9\uff09\u6709\u54ea\u4e9b\u51fa\u5ea6\u4e3a$0$\uff0c\u5e76\u4ece\u8fd9\u4e9b\u70b9\u5f00\u59cb$\\mathrm{DFS}$\u5bf9\u80fd\u5230\u8fbe\u7684\u70b9\u8fdb\u884c\u8986\u76d6\u63a7\u5236 \uff08*\u6ce8\u610f\u4e0d\u8981\u4e0e\u7f29\u70b9\u524d\u7684\u56fe\u6df7\u6dc6*\uff0c*\u672c\u849f\u84bb\u56e0\u4e3a\u4e24\u56fe\u5206\u4e0d\u6e05\u88ab*$\\#2$ $\\#3$*\u5411\u5916\u5411\u91cc\u4e24\u4e2a\u83ca\u82b1\u56fe\u8f6e\u756a\u540a\u6253*$\\mathfrak{QwQ}$\uff09\n\n\u770b\u4e0a\u53bb\u6ca1\u95ee\u9898\uff1f\n\n\u6765\u5206\u6790\u4e00\u4e0b\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7e5fty6l.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u56fe\u4e2d\u6709$1,4,8$\u4e09\u4e2a\u70b9\uff08\u95f4\u8c0d\uff09\u53ef\u4ee5\u8d3f\u8d42\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u53ea\u627e\u5165\u5ea6\u4e3a$0$\u7684\u70b9\uff0c\u6240\u4ee5$4,8$\u90fd\u88ab\u5ffd\u7565\u4e86\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u4f1a\u662f\uff1a\n\n```\nNO\n4\n```\n\u800c\u4e0d\u662f\u6b63\u89e3\uff1a\n```\nNO\n6\n```\n\n\n\u770b\u6765\u8fd9\u79cd\u65b9\u6cd5\u884c\u4e0d\u901a\u4e86\u3002\n\n\u4f46\u662f\uff01\n\n**\u5728$\\mathrm{DAG}$\u4e2d\uff0c\u4ee5\u5165\u5ea6\u4e3a$0$\u7684\u70b9\u8fdb\u884c$\\mathrm{BFS}$\u65f6\uff0c\u662f\u4e0d\u662f\u62d3\u6251\u5e8f\u5728\u524d\u7684\u70b9\u4f1a\u5148\u88ab\u8bbf\u95ee\u5230\uff1f**\n\n\u90a3\u4e48\uff01\u6b63\u786e\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u5148\u5904\u7406\u51fa\u53ef\u884c\u8d3f\u70b9\u7684\u62d3\u6251\u5e8f\uff0c\u7136\u540e\uff0c\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\uff0c\u6328\u4e2a\u4f5c\u4e3a\u8d77\u70b9\u5728$\\mathrm{DAG}$\u4e0a\u8fdb\u884c\u641c\u7d22\u8986\u76d6\u2014\u2014\u8fd9\u6837\uff0c\u65e2\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u5c11\u5730\u8d3f\u8d42\u95f4\u8c0d\uff0c\u53c8\u4e0d\u4f1a\u9057\u6f0f\u4efb\u4f55\u884c\u8d3f\u7684\u673a\u4f1a\uff01\n\n\u53e6\u5916\uff0c\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u9898\u7684\u6570\u636e\u771f\u7684\u662f\u5341\u5206\u5de7\u5999\uff0c\u5148\u7528\u83ca\u82b1\u56fe\u68c0\u67e5\u4f60\u7684\u7f29\u70b9\u662f\u5426\u6709\u95ee\u9898\uff0c\u518d\u8fdb\u884c\u5de7\u5999\u8bbe\u8ba1$\\mathrm{Hack}$\u6389\u90a3\u4e9b\u201c\u7406\u8bba\u4e0a\u6b63\u786e\u201d\u7684\u505a\u6cd5\u3002**\u7ed9\u51fa\u9898\u4eba\u70b9\u4e2a\u8d5e\uff01**\n\n$\\mathrm{Now,time\\ for\\ the\\ code!}$\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#define LL long long\nusing namespace std;\ntemplate<class T>inline void read(T&X)\n{\n\u3000\u3000X = 0;\n\u3000\u3000char symbol('\\0'),ch(getchar());\n\u3000\u3000for(;ch<'0'||'9'<ch;(!(ch^'-'))?(symbol='\\1'):(1),ch=getchar());\n\u3000\u3000for(;'0'<=ch&&ch<='9';X=(X<<3)+(X<<1)+(ch^48),ch=getchar());\n\u3000\u3000(symbol)?(X=-X):(1);\n}\nconst int MAXN = 100003, MAXM = 400003, MAXC = 100003; // \u5f00\u5f97\u7565\u5927\u4e86\u70b9\u3002\u3002\u3002 \nint n, p, m; \n\nchar isa[MAXN]; // \u70b9\u662f\u5426\u53d7\u8d3f \nint X[MAXN]; // \u70b9\u8981\u7684\u94b1 \nint aai[MAXN]; // \u53ef\u884c\u540d\u5355\uff08\u70b9\uff09 \n\nstruct graph{\n\u3000\u3000int heads[MAXN]; \n\u3000\u3000int cnt; \n\u3000\u3000int next[MAXN], to[MAXN]; \n\u3000\u3000void addE(const int x, const int y)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000++cnt; \n\u3000\u3000\u3000\u3000next[cnt] = heads[x]; \n\u3000\u3000\u3000\u3000to[cnt] = y; \n\u3000\u3000\u3000\u3000heads[x] = cnt; \n\u3000\u3000}\n};\ngraph E, E1; \nint bel[MAXM]; // \u70b9\u5c5e\u4e8e\u5f3a\u8fde\u901a\u5206\u91cf(SCC) \nchar vis[MAXN]; // \u6bd4 bool \u5feb \nint sta[MAXN], tot; // \u6808\uff0c\u5fc5\u8981\u65f6\u4e5f\u53ef\u7528\u4f5c\u961f\u5217 \nint scn; // SCC \u4e2a\u6570 \nchar isA[MAXC]; // \u4e00\u4e2a SCC \u662f\u5426\u6709\u53d7\u8d3f\u7684\u70b9 \nint scA[MAXC]; // \u8d3f\u8d42\u4e00\u4e2a SCC \u4e2d\u6700\u4fbf\u5b9c\u7684\u95f4\u8c0d\u5c31\u80fd\u638c\u63e1\u6574\u4e2a SCC \n\n// Kosaraju \u8fc7\u7a0b \nvoid dfs1(const int x) \n{\n\u3000\u3000vis[x] = 1; \n\u3000\u3000int y, e; \n\u3000\u3000for(e = E.heads[x]; e; e = E.next[e])\n\u3000\u3000{\n\u3000\u3000\u3000\u3000y = E.to[e]; \n\u3000\u3000\u3000\u3000if(!vis[y])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000dfs1(y); \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n\u3000\u3000sta[++tot] = x; \n}\n\nvoid reverse(void)\n{\n\u3000\u3000int e, x, y; \n\u3000\u3000for(x = 1; x <= n; ++x)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000for(e = E.heads[x]; e; e = E.next[e])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000y = E.to[e]; \n\u3000\u3000\u3000\u3000\u3000\u3000E1.addE(y, x); \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n\nvoid dfs2(const int x)\n{\n\u3000\u3000bel[x] = scn; \n\u3000\u3000if(isa[x])\n\u3000\u3000{\n\u3000\u3000\u3000\u3000isA[scn] = 1; \n\u3000\u3000\u3000\u3000scA[scn] = min(scA[scn], X[x]); \n\u3000\u3000}\n\u3000\u3000int y, e; \n\u3000\u3000for(e = E1.heads[x]; e; e = E1.next[e])\n\u3000\u3000{\n\u3000\u3000\u3000\u3000y = E1.to[e]; \n\u3000\u3000\u3000\u3000if(!bel[y])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000dfs2(y); \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n\nvoid Kosaraju(void)\n{\n\u3000\u3000int x, y, i; \n\u3000\u3000memset(vis, 0x00, sizeof vis); \n\u3000\u3000for(x = 1; x <= n; ++x)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000if(!vis[x]) dfs1(x); \n\u3000\u3000}\n\u3000\u3000reverse(); \n\u3000\u3000memset(bel, 0x00, sizeof bel); \n\u3000\u3000scn = 0; \n\u3000\u3000for(i = tot; i; --i)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000x = sta[i]; \n\u3000\u3000\u3000\u3000if(!bel[x])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000++scn; \n\u3000\u3000\u3000\u3000\u3000\u3000dfs2(x); \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n// \n\ngraph E2; \nint ind[MAXC], oud[MAXC]; \nvoid reconstruct(void) // \u5efa\u9020 DAG \n{\n\u3000\u3000int e, x, y; \n\u3000\u3000for(x = 1; x <= n; ++x)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000for(e = E.heads[x]; e; e = E.next[e])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000y = E.to[e]; \n\u3000\u3000\u3000\u3000\u3000\u3000if(bel[x] != bel[y])\n\u3000\u3000\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000E2.addE(bel[x], bel[y]); \n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000++ind[bel[y]]; ++oud[bel[x]]; \n\u3000\u3000\u3000\u3000\u3000\u3000}\n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n\nint fee; // \u603b\u8d39\u7528 \nint cov; // \u5b8c\u6210\u884c\u8d3f\u540e\u53ef\u4ee5\u63a7\u5236\u7684\u70b9\u6570 \n\nvoid cover(const int x) // \u4ee5\u67d0\u4e2a\u70b9\u4e3a\u8d77\u70b9\u8fdb\u884c\u63a7\u5236 \n{\n\u3000\u3000++cov; \n\u3000\u3000vis[x] = 1; \n\u3000\u3000int e, y; \n\u3000\u3000for(e = E2.heads[x]; e; e = E2.next[e])\n\u3000\u3000{\n\u3000\u3000\u3000\u3000y = E2.to[e]; \n\u3000\u3000\u3000\u3000if(vis[y]) continue; \n\u3000\u3000\u3000\u3000cover(y); \n\u3000\u3000}\n}\n\nint tplist[MAXC]; // \u6309\u7167\u62d3\u6251\u5e8f\u6392\u5217\u7684\u540d\u5355\uff08\u53ef\u884c\u8d3f\u7684 SCC \uff09 \nint tpn; \nint imd[MAXC]; // \u53e6\u5b58\u5165\u5ea6 \nvoid topo(void) // \u5904\u7406\u62d3\u6251\u5e8f \n{\n\u3000\u3000memcpy(imd, ind, sizeof ind); \n\u3000\u3000int e, x, y; \n\u3000\u3000int head = 0, tail = 0; \n\u3000\u3000for(e = 1; e <= scn; ++e)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000if(!imd[e])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000sta[tail++] = e; \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n\u3000\u3000for(; head < tail; )\n\u3000\u3000{\n\u3000\u3000\u3000\u3000x = sta[head++]; \n\u3000\u3000\u3000\u3000if(isA[x])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000tplist[++tpn] = x; \n\u3000\u3000\u3000\u3000}\n\u3000\u3000\u3000\u3000for(e = E2.heads[x]; e; e = E2.next[e])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000y = E2.to[e]; \n\u3000\u3000\u3000\u3000\u3000\u3000--imd[y]; \n\u3000\u3000\u3000\u3000\u3000\u3000if(!imd[y])\n\u3000\u3000\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000sta[tail++] = y; \n\u3000\u3000\u3000\u3000\u3000\u3000}\n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n\nint search(void) // \u5c55\u5f00 cover \n{\n\u3000\u3000topo(); \n\n\u3000\u3000memset(vis, 0x00, sizeof vis); \n\u3000\u3000int i, x; \u3000\u3000\n\u3000\u3000\n//\u3000\u3000for(i = 1; i <= p; ++i)\n//\u3000\u3000{\n//\n//\u3000\u3000\u3000\u3000x = bel[aai[i]]; \n//\u3000\u3000\u3000\u3000if(!ind[x] && !vis[x])\n//\u3000\u3000\u3000\u3000{\n//\u3000\u3000\u3000\u3000\u3000\u3000fee += scA[x]; \n//\u3000\u3000\u3000\u3000\u3000\u3000cover(x); \n//\u3000\u3000\u3000\u3000}\n//\u3000\u3000}\n\u3000\u3000\n\u3000\u3000// \u5751\u70b9\uff1a\u53ef\u80fd\u6709 ind \u4e0d\u662f 0 \u7684\u5207\u5165\u70b9\u4e0d\u4f1a\u88ab\u524d\u9762\u7684\u5207\u5165\u70b9\u641e\u5230 \n\u3000\u3000// \u8840\u3002\u3002\u3002 \n\u3000\u3000\n\u3000\u3000for(i = 1; i <= tpn; ++i)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000x = tplist[i]; \n\u3000\u3000\u3000\u3000if(!vis[x])\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000fee += scA[x]; \n\u3000\u3000\u3000\u3000\u3000\u3000cover(x); \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n\u3000\u3000if(cov == scn) // \u6ce8\u610f\u4e0d\u662f n\u3000// \u8840\u3002\u3002\u3002 \n\u3000\u3000{\n\u3000\u3000\u3000\u3000return fee; \n\u3000\u3000}\n\u3000\u3000else\n\u3000\u3000{\n\u3000\u3000\u3000\u3000for(i = 1; i <= n; ++i)\n\u3000\u3000\u3000\u3000{\n\u3000\u3000\u3000\u3000\u3000\u3000if(!vis[bel[i]]) return -i; \n\u3000\u3000\u3000\u3000}\n\u3000\u3000}\n}\n\nint main()\n{\n\u3000\u3000memset(scA, 0x7f, sizeof scA); \n\u3000\u3000int i, x, y; \n\u3000\u3000read(n); read(p); \n\u3000\u3000for(i = 1; i <= p; ++i)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000read(aai[i]); \n//\u3000\u3000\u3000\u3000read(X[i]); // \u8840\u3002\u3002\u3002 \n\u3000\u3000\u3000\u3000read(X[aai[i]]); \n\u3000\u3000\u3000\u3000isa[aai[i]] = 1; \n\u3000\u3000}\n\u3000\u3000read(m); \n\u3000\u3000for(i = 1; i <= m; ++i)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000read(x); read(y); \n\u3000\u3000\u3000\u3000E.addE(x, y); \n\u3000\u3000}\n\u3000\u3000Kosaraju(); \n\u3000\u3000reconstruct(); \n\u3000\u3000x = search(); \n\u3000\u3000if(x < 0)\n\u3000\u3000{\n\u3000\u3000\u3000\u3000printf(\"NO\\n%d\\n\", -x); \n\u3000\u3000}\n\u3000\u3000else\n\u3000\u3000{\n\u3000\u3000\u3000\u3000printf(\"YES\\n%d\\n\", x); \n\u3000\u3000}\n\u3000\u3000return 0; \n}\n\n*/ \n\n\n```\n\u559c\u6b22\u7684\u8bdd\u522b\u5fd8\u4e86\u7ed9\u672c\u849f\u84bb\u7559\u4e0b\u4e00\u4e2a\u8d5e\u554a~ $\\mathfrak{OuO}$\n",
        "postTime": 1569414473,
        "uid": 28004,
        "name": "PBCWZCC",
        "ccfLevel": 0,
        "title": "P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u96be\uff0c\u4e3b\u8981\u662f\u7ec6\u8282\u3002\n\n\u8fd9\u9898\u6709\u70b9\u50cf[P2341 [HAOI2006]\u53d7\u6b22\u8fce\u7684\u725b](https://www.luogu.org/problemnew/show/P2341)\uff0c\u4f46\u53c8\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\n\n\u5410\u69fd\u5b8c\u6bd5\uff0c\u6b63\u9898\u5f00\u59cb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u95f4\u8c0d\u4e4b\u95f4\u7684\u5173\u7cfb\u4f1a\u6784\u6210\u4e00\u5f20\u6709\u5411\u56fe\u3002\u5982\u679c\u4e00\u4e2a\u95f4\u8c0d\u88ab~~\u653b\u7565~~\u902e\u6355\u4e86\uff0c\u90a3\u4e48\u4ed6\u7684\u6240\u6709\u51fa\u8fb9\u6240\u8fde\u63a5\u7684\u95f4\u8c0d\u90fd\u4f1a\u88ab~~\u653b\u7565~~\u902e\u6355\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u4e00\u79cd\u5f88\u723d\u7684\u60c5\u51b5\uff1a\u5982\u679c\u4f60~~\u653b\u7565~~\u902e\u6355\u7684\u67d0\u4e2a\u95f4\u8c0d\u5904\u4e8e\u4e00\u4e2a$SCC$......\u90a3\u4e48\u8fd9\u6574\u4e2a$SCC$\u90fd\u4f1a\u88ab~~\u653b\u7565~~\u902e\u6355\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981~~\u592a\u76d1~~\u5854\u5c14\u6768\uff08$Tarjan$\uff09\u7b97\u6cd5\u6765\u7f29\u70b9\u4e86\uff0c\u8fd9\u662f\u6211\u4eec\u8981\u8bb0\u4e0b\u6bcf\u4e2a$SCC$\u4e2d\u53d7\u8d3f\u6570\u989d\u6700\u4f4e\u662f\u591a\u5c11\u3002\n\n\u5728\u7f29\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u641c\u7d22\u6811\u7684\u6811\u6839\uff0c\u5c31\u662f\u8fd9\u4e00\u6b65\uff08\u5b66\u8fc7$Tarjan$\u7684\u5e94\u8be5\u90fd\u77e5\u9053\uff09\n\n```cpp\nfor(int i = 1; i <= n; i++) if(!dfn[i] && ......) tarjan(i); //\u8fd9\u91cc\u7684i\u5c31\u662f\u6811\u6839\n```\n\n\u4e3a\u4e86\u540e\u9762\u65b9\u4fbf\uff0c\u6211\u4eec\u53ea\u9009\u62e9\u53ef\u4ee5\u8d3f\u8d42\u7684\u95f4\u8c0d\u505a\u6811\u6839\uff0c\u90a3\u4e48\u902e\u6355\u4e0d\u5230\u7684\u95f4\u8c0d\u5728\u641c\u7d22\u7684\u65f6\u5019\u662f\u641c\u4e0d\u5230\u7684\uff0c\u5b83\u7684\u5165\u6808\u65f6\u95f4\u6233\u5c31\u662f$0$\u3002\u73b0\u5728\u65e0\u89e3\u7684\u60c5\u51b5\u5df2\u7ecf\u89e3\u51b3\u4e86\u3002\u6211\u4eec\u628a\u6240\u6709\u70b9\u626b\u4e00\u904d\uff0c\u5982\u679c\u6709\u8c01\u7684$dfn$\u503c\u4e3a$0$\uff0c\u8bf4\u660e\u6b64\u9898\u65e0\u89e3\u3002\u8fd9\u65f6\u8f93\u51fa\u7f16\u53f7\uff0c\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n\u7136\u540e\u4e0d\u96be\u53d1\u73b0\u5982\u679c\u6709\u89e3\uff0c\u8fd9\u4e2a\u7f29\u70b9\u540e\u7684\u56fe\u5c31\u662f\u4e00\u5806$DAG$\u3002\n\n\u6253\u4e2a\u6bd4\u65b9\uff1a\u8fd9\u5c31\u50cf\u4e00\u5806\u98df\u7269\u7f51\u3002\u7269\u8d28\u548c\u80fd\u91cf\u6cbf\u7740\u8fb9\u6d41\u52a8\u3002~~\uff08\u521d\u4e8c\u8981\u5730\u751f\u4e2d\u8003\u4e86\uff0c\u770b\u5565\u90fd\u80fd\u60f3\u5230\u5730\u751f\uff09~~\n\n\u73b0\u5728\u6211\u4eec\u60f3\u8ba9\u8fd9\u5806\u98df\u7269\u7f51\u4e2d\u7684\u751f\u7269\u5927\u706d\u7edd\u3002\u6211\u4eec\u53ea\u9700\u8981\u6740\u6b7b\u6240\u6709\u751f\u4ea7\u8005\uff0c\u7136\u540e\u6d88\u8d39\u8005\u5c31\u4f1a\u968f\u4e4b\u6d88\u4ea1\u3002\uff08\u597d\u90aa\u6076\u7684\u60f3\u6cd5\uff09\n\n\u751f\u4ea7\u8005\u662f\u98df\u7269\u94fe\u7684\u6700\u5e95\u5c42\uff0c\u5b83\u4eec\u7684\u5165\u5ea6\u90fd\u662f$0$\u3002\n\n\u6b63\u5982\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa\u5165\u5ea6\u4e3a$0$\u7684$SCC$\uff0c\u7528\u6700\u4f4e\u4ef7\u683c\u5b8c\u6210\u8d3f\u8d42\u3002\u628a\u8fd9\u4e9b\u6700\u4f4e\u4ef7\u683c\u5168\u90e8\u52a0\u8d77\u6765\u5c31\u5f97\u51fa\u4e86\u89e3\u3002\n\n\u4ee3\u7801\uff1a\uff08$codestyle$\u3001\u540d\u5b57\u5f88\u6e05\u5947\u52ff\u55b7\u3002~~\u4e00\u5b9a\u8981\u6709\u4e2a\u597d\u7684\u9a6c\u8702\uff0c\u4ed6\u80fd\u8ba9\u4f60\u5c11\u5199\u4e0d\u5c11\u884c~~\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<stack>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\n\nconst int MaxN = 8005;\nconst int MaxM = MaxN * MaxN;\nint n, m, p;\nstruct Edge //\u94fe\u5f0f\u524d\u5411\u661f\n{\n    int v, nxt;\n} edge[MaxM];\nint val[MaxN], head[MaxN], k = 1;\nstack<int>st;\nint low[MaxN], dfn[MaxN], col[MaxN], ins[MaxN], cnt = 0, tim = 0;\nint minn[MaxN];\nint deg[MaxN];\nint ans = 0;\n\nvoid addedge(int u, int v) //\u5efa\u8fb9\uff08\u5355\u5411\uff09\n{\n    edge[k].v = v;\n    edge[k].nxt = head[u];\n    head[u] = k++;\n}\n\ninline void init() //\u521d\u59cb\u5316\u548c\u8bfb\u5165\n{\n    memset(val, 0x3f, sizeof(val));\n    memset(minn, 0x3f, sizeof(minn));\n    scanf(\"%d\", &n);\n    scanf(\"%d\", &p);\n    for(int i = 1; i <= p; i++)\n    {\n        int u;\n        scanf(\"%d\", &u);\n        scanf(\"%d\", &val[u]);\n    }\n    scanf(\"%d\", &m);\n    for(int i = 1; i <= m; i++)\n    {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        addedge(u, v); //\u4eceu\u5230v\u8fde\u6709\u5411\u8fb9\n    }\n}\n\nvoid tarjan(int u) //Tarjan\u7684\u677f\u5b50\n{\n    low[u] = dfn[u] = ++tim;\n    ins[u] = 1;\n    st.push(u);\n    for(int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].v;\n        if(!dfn[v]) \n        {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if(ins[v])\n        {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if(low[u] == dfn[u])\n    {\n        int l;\n        cnt++;\n        do \n        {\n            l=st.top();st.pop();\n            ins[l]=0;\n            col[l]=cnt;\n            minn[cnt] = min(minn[cnt], val[l]); //\u8bb0\u5f55\u6bcf\u4e2aSCC\u4e2d\u6700\u5c0f\u53ef\u4ee5\u8d3f\u8d42\u7684\n        } while(l!=u);\n    }\n}\n\nvoid Seek_SCC()\n{\n    //\u627e\u53ef\u4ee5\u8d3f\u8d42\u7684\u95f4\u8c0d\uff0c\u4ee5\u4e4b\u4e3a\u6839\u8dd1Tarjan\n    for(int i = 1; i <= n; i++) if(!dfn[i] && val[i] != 0x3f3f3f3f) tarjan(i); \n}\n\nvoid Judge_NoSolution()\n{\n\tfor(int i = 1; i <= n; i++)\n    {\n    \tif(!dfn[i]) //\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u641c\u5230\uff0c\u8bf4\u660e\u4e0d\u53ef\u80fd\u5c06\u5176\u902e\u6355\n\t\t{\n    \t\tprintf(\"NO\\n%d\", i);\n    \t\texit(0);\n\t\t}\n\t}\n}\n\nvoid Calc_Deg()\n{\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = head[i]; j; j = edge[j].nxt)\n        {\n            int v = edge[j].v;\n            if(col[i] != col[v]) //\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u4e0d\u5728\u540c\u4e00SCC\uff0c\u90a3\u4e48\u7ec8\u70b9\u6240\u5728SCC\u5165\u5ea6\u52a0\u4e00\n            {\n                deg[col[v]]++;\n            }\n        }\n    }\n}\n\nvoid Calc_Ans()\n{\n\tans = 0;\n    for(int i = 1; i <= cnt; i++)\n    {\n        if(deg[i] == 0) //\u5982\u679c\u5165\u5ea6\u4e3a0\u5c31\u8fdb\u884c\u8d3f\u8d42\n        {\n            ans += minn[i];\n        }\n    }\n}\n\nvoid solve()\n{\n    Seek_SCC(); //\u6c42SCC\n    Judge_NoSolution(); //\u5224\u65ad\u65e0\u89e3\uff0c\u5982\u679c\u65e0\u89e3\u4f1a\u5728\u51fd\u6570\u91cc\u7ed3\u675f\uff0c\u4e0d\u4f1a\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\n    Calc_Deg(); //\u7edf\u8ba1\u5165\u5ea6\n    Calc_Ans(); //\u8ba1\u7b97\u7b54\u6848\n    printf(\"YES\\n%d\", ans);\n}\n\nint main()\n{\n    init(); //\u521d\u59cb\u5316\n    solve(); //\u6c42\u89e3\n}\n```\n\n",
        "postTime": 1559808367,
        "uid": 92254,
        "name": "Social_Zhao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "## \u5e9f\u8bdd\n\u6b64\u9898\u771f\u7684\u662f......\u4e00\u8a00\u96be\u5c3d\uff0c\u5224NO\u90a3\u91cc\u5224\u4e86\u597d\u4e45\uff0cYES\u5012\u662f\u8fc7\u4e86\u3002\n## \u601d\u8def\n1. \u5148\u8bf4YES\u5427\uff0c\u5c31\u662f\u5148\u7f29\u70b9\uff0c\u540c\u65f6\u628a\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6700\u5c0f\u503c\u6c42\u51fa\u6765\uff0c\u6700\u540e\u628a\u90a3\u4e9b\u5165\u5ea6\u4e3a0\u7684\u5206\u91cf\u6700\u5c0f\u503c\u76f8\u52a0\uff08\u5165\u5ea6\u4e3a0\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u4eba\u53ef\u4ee5\u4e3e\u62a5\u4ed6\u4eec\uff09\u3002\n1.  \u81f3\u4e8eNO\u7684\u8bdd\uff0c\u4e00\u5f00\u59cb\u6211\u4e5f\u662f\u7528\u662f\u5426\u80fd\u88ab\u4e3e\u62a5\u6216\u80fd\u88ab\u6536\u4e70\u6765\u5224\u65ad\u7684\uff0c\u4f46\u83ab\u540dWA\u4e86\uff0c\u7136\u540e\u60f3\u4e86\u4e00\u4e0b\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u5728**tarjan\u540e\u7684\u7684dfn\u4e3a0**\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u80fd\u88ab\u4e3e\u62a5\uff08\u904d\u5386\uff09\uff0c\u4e5f\u4e0d\u80fd\u88ab\u6536\u4e70\n$\uff08if (!dfn[i]&&cost[i]!=999999999) Tarjan(i);)$\n\n## \u4ee3\u7801\n\u7565\u957f\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,q,r;\nint cost[3005],MIN_COST[3005];\nint head[3005],cnt=0;\nint low[3005],dfn[3005],num=0,top=0,st[3005],col=0,co[3005];\nint degree_into[3005];\nstruct Edge{int next,to;}t[8005];\nvoid add(int a,int b)\n{\n    t[++cnt].next=head[a];\n    t[cnt].to=b;\n    head[a]=cnt;\n}\nvoid Tarjan(int u)\n{\n\tdfn[u]=low[u]=++num;\n\tst[++top]=u;\n\tfor (int i=head[u]; i; i=t[i].next)\n\t{\n\t\tint v=t[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\tTarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else\n\t\tif (!co[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (low[u]==dfn[u]) \n\t{\n\t\tco[u]=++col;\n\t\tMIN_COST[col]=min(MIN_COST[col],cost[u]);\n\t\twhile (st[top]!=u)\n\t\t{\n\t\t\tco[st[top]]=col; \n\t\t\tMIN_COST[col]=min(MIN_COST[col],cost[st[top]]);\n\t\t\t--top;\n\t\t}\n\t\t--top;\n\t}\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n\tfor (int i=1;i<=n;i++) MIN_COST[i]=999999999;\n\tfor (int i=1;i<=n;i++) cost[i]=999999999;\n    for (int i=1; i<=q; i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        cost[x]=y;\n    } \n    scanf(\"%d\",&r);\n    for (int i=1; i<=r; i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n    }\n    for (int i=1; i<=n; i++) if (!dfn[i]&&cost[i]!=999999999) Tarjan(i);\n    for (int i=1; i<=n; i++)\n     for (int j=head[i]; j; j=t[j].next)\n     if (co[i]!=co[t[j].to]) degree_into[co[t[j].to]]++;\n\t //for (int i=1;i<=n;i++) cout<<MIN_COST[co[i]]<<\" \"<<co[i]<<\" \"<<degree_into[co[i]]<<endl;\n    for (int i=1; i<=n; i++) \n    if (!dfn[i])\n\t{\n        cout<<\"NO\"<<endl;\n        cout<<i<<endl;\n        return 0;\n    }  \n    int sum=0;\n    for (int i=1; i<=col; i++) if (degree_into[i]==0) sum+=MIN_COST[i];\n    cout<<\"YES\"<<endl;\n    cout<<sum<<endl; \n    return 0;\n}\n```\n\u597d\u5427\uff0c\u5176\u5b9e\u4e0d\u7b97\u5f88\u957f",
        "postTime": 1548722145,
        "uid": 37409,
        "name": "Episode9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u601d\u8def\u5982\u4e0b\uff1a\n\n1.\u8f93\u5165\u6570\u636e\uff0c\u7528mon[a]\u8868\u793a\u6536\u4e70a\u7684\u82b1\u8d39\n\n\u7528tarjan\u8fdb\u884c\u7f29\u70b9\n\n\u2460\u7528cos\u6570\u7ec4   \u8bb0\u5f55 \u4e00\u4e2a\u73af\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u521d\u59cb\u5316\u4e3a19991215\n\n\u2461\u7528num\u6570\u7ec4  \u8bb0\u5f55\u4e00\u4e2a\u73af\u6700\u5c0f\u7684\u6807\u53f7 \uff0c\u521d\u59cb\u5316\u4e3a19991215\n\n2.\u5efa\u7acb\u65b0\u56fe\n\n3.\u9996\u5148\u8ba9\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u8fdb\u884c\u6536\u4e70\uff0cans\\_1+=cos[i]\uff0c\u7136\u540e\u5411\u4e0bdfs\uff0c\u628adfs\u5230\u7684\u70b9\u6807\u8bb0\u4e3avis[i]=1\n\n\uff08\u5982\u679c\u5165\u5ea6\u4e3a0 \u4e14 \u6b64\u70b9\u7684\u82b1\u8d39\u4e3a19991215\u3002\u90a3\u4e48\u7b54\u6848\u4e00\u5b9a\u662fNO\uff0c\u7136\u540e\u7528ans\\_2\u66f4\u65b0\u7f16\u53f7\u5c0f\u7684\u7b54\u6848(ans\\_2\u7684\u521d\u59cb\u5316\u503c\u4e3a19991215)\uff09\n\n4.\u5224\u65ad\u5f53\u524d\u5269\u4e0b\u7684vis[i]=0\u7684\u70b9 \u7684 \u82b1\u8d39 cos[i] \u662f\u5426\u4e3a19991215\uff0c\u5982\u679c\u662f\uff0c\u7ee7\u7eed\u7528ans\\_2\u66f4\u65b0\u7f16\u53f7\u5c0f\u7684\u7b54\u6848\n\n5.\u5c06\u6240\u6709vis[i]=0\u7684\u70b9\u5bf9\u5e94\u7684\u82b1\u8d39cos[i]\u52a0\u7ed9ans\\_1\uff0c\u5e76\u6807\u8bb0vis[i]=1;\n\n6.\u5982\u679cans\\_2\u4e0d\u7b49\u4e8e19991215\uff0c\u8f93\u51faans\\_2,\u5426\u5219\u8f93\u51faans\\_1.\n\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u957f\u4ee3\u7801\u5f80\u5f80\u66f4\u6e05\u6670 \u5e76\u4e14\u5bb9\u6613 \u627e\u9519\u8bef\uff09\uff1a\n\n\n\n\n\n\n    \n    \n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint n,m,k,a,b;\nint ans_1,ans_2;\nint dfn[202020],low[202020];\nint sta[202020],col[202020];\nint cos[202020],mon[202020];\nint num[202020];\nbool vis[202020],rd[202020];\nint head[202020],pead[202020];\nstruct Node_1\n{\n    int to,next;\n}e[202020];\nstruct Node_2\n{\n    int to,next;\n}p[202020];\nint read()\n{\n    int rt=0,in=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')\n            in=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        rt=rt*10+ch-'0';\n        ch=getchar();\n    }\n    return rt*in;\n}\nvoid add_old_edge(int u,int v)\n{\n    e[++head[0]].to=v;\n    e[head[0]].next=head[u];\n    head[u]=head[0];\n}\nvoid add_new_edge(int u,int v)\n{\n    p[++pead[0]].to=v;\n    p[pead[0]].next=pead[u];\n    pead[u]=pead[0];\n}\nvoid tarjan(int x)\n{\n    dfn[x]=low[x]=++dfn[0];\n    vis[x]=true;\n    sta[++sta[0]]=x;\n    for(int i=head[x]; i!=0; i=e[i].next)\n        if(!dfn[e[i].to])\n        {\n            tarjan(e[i].to);\n            low[x]=min(low[x],low[e[i].to]);\n        }\n        else if(vis[e[i].to])\n            low[x]=min(low[x],dfn[e[i].to]);\n    if(dfn[x]==low[x])\n    {\n        vis[x]=false;\n        ++col[0];\n        cos[col[0]]=19991215;\n        num[col[0]]=19991215;\n        while(sta[sta[0]+1]!=x)\n        {\n            vis[sta[sta[0]]]=false;\n            col[sta[sta[0]]]=col[0];\n            num[col[0]]=min(num[col[0]],sta[sta[0]]);\n            if(mon[sta[sta[0]]]!=0)\n                cos[col[0]]=min(cos[col[0]],mon[sta[sta[0]]]);\n            sta[0]--;\n        }\n    }\n}\nvoid dfs(int x)\n{\n    vis[x]=1;\n    for(int i=pead[x]; i!=0; i=p[i].next)\n        if(!vis[p[i].to])\n            dfs(p[i].to);\n}\nint main()\n{\n    n=read();k=read();\n    for(int i=1; i<=k; i++)\n    {\n        a=read();\n        mon[a]=read();\n    }\n    m=read();\n    for(int i=1; i<=m; i++)\n    {\n        a=read();b=read();\n        add_old_edge(a,b);\n    }\n    for(int i=1; i<=n; i++)\n        if(!dfn[i])\n            tarjan(i);\n    for(int i=1; i<=n; i++)\n        for(int j=head[i]; j!=0; j=e[j].next)\n            if(col[i]!=col[e[j].to])\n            {\n                add_new_edge(col[i],col[e[j].to]);\n                rd[col[e[j].to]]=1;\n            }\n    for(int i=1; i<=col[0]; i++)\n        if(!rd[i]&&!vis[i]&&cos[i]!=19991215)\n        {\n            ans_1+=cos[i];\n            dfs(i);\n        }\n    ans_2=19991215;\n    for(int i=1; i<=col[0]; i++)\n        if(cos[i]==19991215&&!vis[i])\n            ans_2=min(num[i],ans_2);\n    if(ans_2!=19991215)\n    {\n        printf(\"NO\\n%d\",ans_2);\n        return 0;\n    }\n    for(int i=1; i<=col[0]; i++)\n        if(!vis[i])\n        {\n            vis[i]=true;\n            ans_1+=cos[i];\n        }\n    printf(\"YES\\n%d\",ans_1);\n    return 0;\n}\n\n```",
        "postTime": 1505319431,
        "uid": 19215,
        "name": "OIer991215",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": " \n```cpp\ntype\n edge=record\n  node,next:longint;\n  end;\nvar\n n,ans,x,y,c,deep//\u65f6\u95f4\u6233,tot:longint;\n du,list,w,first,dfn,low:array[0..3000]of longint;\n e:array[0..8000*4]of edge;\n v,f:array[0..3000]of boolean;\n indu,rd,mc,stack:array[0..3000]of longint;\n path:array[0..3000,0..3000]of boolean;\n num,minn,nd:longint;\nfunction min(x,y:longint):longint;\nbegin\n if x>y then exit(y) else exit(x);\nend;\nprocedure insert(x,y:longint);\nbegin\n inc(tot);\n with e[tot] do\n begin\n  node:=y;\n  next:=first[x];\n  first[x]:=tot;\n end;\nend;\nprocedure zoom(x:longint);//\u7f29\u70b9\nvar\n i,j,d,l,min,mint:longint;\nbegin\n min:=maxlongint;\n mint:=min;\n d:=0;\n l:=0;\n while stack[num]<>x do//\u6e05\u9664\n begin\n  inc(l);\n  list[l]:=stack[num];\n  f[stack[num]]:=false;\n  dec(num);\n end;\n f[stack[num]]:=false;\n inc(l);\n list[l]:=stack[num];\n dec(num);\n for i:=1 to l do\n begin\n  if list[i]<mint then mint:=list[i];\n  d:=rd[list[i]]+d;\n  if (w[list[i]]>0)and(w[list[i]]<min)then min:=w[list[i]];//\u627e\u5230\u6536\u4e70\u8005\n end;\n for i:=1 to l do\n  for j:=1 to l do\n   if (i<>j)and(path[i,j])then dec(d);\n   if (d=0)and(min=maxlongint)then//\u5982\u679c\u4e0d\u80fd\u88ab\u6536\u4e70\u800c\u4e14rudu\u4e3a0\u7684\u70b9\u5c31impossible\u4e86\n   if mint<minn then minn:=mint;\n   inc(nd);\n   du[nd]:=d;\n   mc[nd]:=min;\nend;\nprocedure dfs(x:longint);\nvar i:longint;\nbegin\n inc(deep);//\u65f6\u95f4\u6233\n dfn[x]:=deep;\n low[x]:=deep;\n inc(num);\n stack[num]:=x;\n i:=first[x];\n v[x]:=true;\n f[x]:=true;\n while i<>0 do\n begin\n  if not v[e[i].node]then\n  begin\n   dfs(e[i].node);\n   low[x]:=min(low[x],low[e[i].node]);\n  end\n  else if f[e[i].node]then\n   low[x]:=min(low[x],low[e[i].node]);\n   i:=e[i].next;\n  end;\n if dfn[x]=low[x] then zoom(x);//\u662f\u5f3a\u8fde\u901a\u5206\u91cf\nend;\nprocedure get;\nvar i:longint;\nbegin\n if minn<>maxlongint then//\u66f4\u65b0\u8fc7\u5c31\u8bc1\u660e\u6709\u70b9\u4e0d\u80fd\u88ab\u8bbf\u95ee\u3002\u3002\n begin\n  writeln('NO');\n  writeln(minn);\n  halt;\n end;\n for i:=1 to nd do\n  if du[i]=0 then inc(ans,mc[i]);//\u626b\u63cf\u6bcf\u4e2a\u7f29\u70b9\uff0c\u5982\u679c\u9700\u8981\u88ab\u6536\u4e70\u5c31\u6536\u4e70\u4ed6\u3002\n  writeln('YES');\n  writeln(ans);\nEND;\nPROCEdure READIN;//\u8bfb\u5165\nvar i,p,r:longint;\nbegin\n read(n);\n read(p);\n for i:=1 to p do\n begin\n  read(c);\n  readln(w[c]);\n end;\n read(r);\n for i:=1 to r do\n begin\n  read(x,y);\n  insert(x,y);\n  path[x,y]:=true;\n  inc(rd[y]);//\u5165\u5ea6++\n end;\n minn:=maxlongint;\n for i:=1 to n do\n  if not v[i] then dfs(i);//\u53ef\u80fd\u8fd8\u53ef\u4ee5\u66f4\u65b0\u7684\u70b9\n get;\nend;\nbegin\n assign(input,'dist.in');\n reset(input);\n readin;\n close(input);\nend.>>tarjan\u6c42\u7f29\u70b9\n```",
        "postTime": 1460363800,
        "uid": 12657,
        "name": "zhongxing",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u5c31\u662ffloodfill+tarjan\u3002\n\n\u5f00\u59cb\u5148bfs\u4e00\u904d\uff0c\u5982\u679c\u4e0d\u80fd\u88ab\u6536\u4e70\u76f4\u63a5halt\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\n\u5426\u5219\u5c31\u8bf4\u660e\u90fd\u80fd\u88ab\u6536\u4e70\u3002\u90a3\u4e48tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\n\n\u540c\u65f6\u8fdb\u884c\u7f29\u70b9\uff0c\u5e76\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6700\u5c0f\u7684\u88ab\u6536\u4e70\u7684\u4ef7\u683c\uff0c\n\n\u6700\u540e\u628a\u5165\u5ea6\u4e3a\u96f6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u88ab\u6536\u4e70\u4ef7\u683c\u7d2f\u52a0\u8d77\u6765\u3002\n\n\u6211\u7684\u4ee3\u7801\u5df2\u7ecf\u5199\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u7167\u6211\u7684\u5199\u5c31\u53ef\u4ee5\u5566~~~\n\n```delphi\n\n\nprogram jdwl;\ntype point=^node;\n     node=record\n            data:longint;\n            next:point;\n          end;\nvar newn,n,i,r,mcost,ed,time,hao,a,b,p,head,tail:longint;\n    v,sfzz:array[0..6100]of boolean;\n    con:array[0..6100]of point;\n    rp:point;\n    d,dfn,low,zhan,cost,rd,fan,dgcost,belong:array[0..6100]of longint;\n\nfunction min(a,b:longint):longint;\nbegin\n  if a<b then exit(a);\n  exit(b);\nend;\n\nprocedure add(a,b:longint);\nvar p:point;\nbegin\n  new(p);\n  p^.data:=b;\n  p^.next:=con[a];\n  con[a]:=p;\nend;\n\nprocedure bfs;//\u4e0d\u80fd\u6536\u4e70\u7684\u60c5\u51b5\u76f4\u63a5floodfill\nvar p:point;\n    zi:longint;\nbegin\n  while head<=tail do\n    begin\n      p:=con[d[head]];\n      while p<>nil do\n        begin\n          zi:=p^.data;\n          if v[zi]=false then\n            begin\n              inc(tail);\n              d[tail]:=zi;\n              v[zi]:=true;//dfs\u5f00\u5934,bfs\u4e2d\u95f4,\u8fdb\u884c\u6807\u8bb0\uff0c\u8fdb\u6808\u7b49\n            end;\n          p:=p^.next;\n        end;\n      inc(head);\n    end;\nend;\n\nprocedure dfs(x:longint);\nvar p:point;\n    zi,st,i:longint;//zi:\u513f\u5b50\u8282\u70b9\nbegin\n  v[x]:=true;//dfs\u5f00\u5934,bfs\u4e2d\u95f4,\u8fdb\u884c\u6807\u8bb0\uff0c\u8fdb\u6808\u7b49\n\n  inc(ed);//\u5165\u6808\n  zhan[ed]:=x;//\u6808\u91cc\u6bcf\u4e2a\u7f16\u53f7\u5bf9\u5e94\u4e00\u4e2a\u70b9\n  fan[x]:=ed;//\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u6808\u91cc\u4e00\u4e2a\u7f16\u53f7\n  sfzz[x]:=true;\n\n  inc(time);\n  dfn[x]:=time;\n  low[x]:=time;\n  //dfn:\u65f6\u95f4\u6233;low:\u80fd\u8ffd\u6eaf\u5230\u7684\u6808\u4e2d\u6700\u5c0f\u7684\u65f6\u95f4\u6233\n\n  p:=con[x];\n  while p<>nil do\n    begin\n      zi:=p^.data;\n      if v[zi]=false then\n        begin\n          dfs(zi);\n          low[x]:=min(low[x],low[zi]);\n          //\u5982\u679c\u672a\u88ab\u8bbf\u95ee\u8fc7\uff0c\u627e\u672c\u8eab\u548c\u513f\u5b50\u7ed3\u70b9\u4e2d\u6700\u5c0f\u7684low\n        end\n\n                      else\n        if sfzz[zi]=true then\n          low[x]:=min(low[x],dfn[zi]);\n        //\u5982\u679c\u5728\u6808\u91cc\uff0c\u627e\u672c\u8eab\u7684low\u548c\u513f\u5b50\u7ed3\u70b9\u7684dfn\u4e2d\u66f4\u5c0f\u7684\n      p:=p^.next;\n    end;\n\n  if dfn[x]=low[x]then //\u51fa\u6808\n    begin\n      inc(newn);//\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u6807\u53f7\n      st:=fan[x];\n      for i:=st to ed do\n        begin\n          sfzz[zhan[i]]:=false;//\u8fd8\u539f\n          belong[zhan[i]]:=newn;\n          //\u6807\u8bb0\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n          if(cost[zhan[i]]>-maxlongint+1)and\n            (cost[zhan[i]]<dgcost[newn])then\n              dgcost[newn]:=cost[zhan[i]];\n          //\u6c42\u51fa\u5f53\u524d\u5f3a\u8fde\u901a\u5206\u91cf\u7684mincost\n        end;\n      ed:=st-1;\n    end;\nend;\n\nbegin\n  readln(n);\n\n  mcost:=0;\n  newn:=0;\n  for i:=1 to n do\n    begin\n      cost[i]:=-maxlongint+1;\n      dgcost[i]:=maxlongint-1;\n      v[i]:=false;\n      sfzz[i]:=false;\n      rd[i]:=0;\n      con[i]:=nil;\n    end;\n\n  readln(p);\n  for i:=1 to p do\n    readln(hao,cost[hao]);\n\n  readln(r);\n  for i:=1 to r do\n    begin\n      readln(a,b);\n      add(a,b);\n    end;\n\n  for i:=1 to n do\n    if(v[i]=false)and(cost[i]>-maxlongint+1)then\n      begin\n        head:=1;\n        tail:=1;\n        d[1]:=i;\n        v[i]:=true;\n        bfs;\n      end;//\u4ece\u6bcf\u4e2a\u53ef\u4ee5\u88ab\u6536\u4e70\u7684\u70b9\u51fa\u53d1\u8fdb\u884c\u586b\u5145\n\n  for i:=1 to n do\n    if v[i]=false then\n      begin\n        writeln('NO');\n        writeln(i);\n        halt;\n      end;\n\n\n  for i:=1 to n do v[i]:=false;\n  for i:=1 to n do\n    begin\n      if v[i]=true then continue;\n      ed:=0;\n      time:=0;\n      //\u53ef\u6e05\u96f6\u53ef\u4e0d\u6e05\n      dfs(i);\n    end;\n\n  for i:=1 to n do\n    begin\n      rp:=con[i];\n      while rp<>nil do\n        begin\n          if belong[i]<>belong[rp^.data]then\n            inc(rd[belong[rp^.data]]);\n          //\u82e5\u4e24\u4e2a\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf,\n          //\u5219\u5b50\u8282\u70b9\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5165\u5ea6\u52a0\u4e00\n          rp:=rp^.next;\n        end;\n    end;\n\n  for i:=1 to newn do\n    if rd[i]=0 then inc(mcost,dgcost[i]);\n  //\u627e\u5165\u5ea6\u4e3a\u96f6\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u8fdb\u884c\u7edf\u8ba1\u7d2f\u52a0\n  writeln('YES');\n  writeln(mcost);\nend.      \n\n\n```",
        "postTime": 1458453832,
        "uid": 11874,
        "name": "lqylqylqy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "Tarjan\u7f29\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5b58\u4e0b\u6765\u6536\u4e70\u9700\u8981\u7684\u6700\u5c0f\u4ef7\u503c\u548c\u5305\u542b\u7684\u6700\u5c0f\u6807\u53f7\uff0c\u627e\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5982\u679c\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u90fd\u53ef\u4ee5\u63a7\u5236\u5c31\u662fYES,\u63a7\u5236\u4f4f\u5165\u5ea6\u4e3a0\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u7ed3\u679c\uff0c\u5426\u5219NO\uff0c\u627e\u5230\u65e0\u6cd5\u63a7\u5236\u7684\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0cDFS\u76f4\u5230\u6709\u53ef\u63a7\u5236\u7684\u505c\u6b62\uff0c\u66f4\u65b0\u4e0d\u53ef\u63a7\u7684\u6700\u5c0f\u5e8f\u53f7\u5373\u53ef\n",
        "postTime": 1428473517,
        "uid": 5147,
        "name": "Bryant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "**\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a[\u9ec4\u6bdb\u732b_HYX\u7684\u535a\u5ba2](https://www.luogu.org/blog/jerriehmm/solution-p1983)**\n\n**~~\u63a8\u9500\u4e0b\u6211\u7684\u7a7a\u95f4~~\uff1a[\u849f\u84bb](https://www.luogu.org/blog/jerriehmm/)**\n\n# \u89e3\u9898\u5173\u952e\uff1atarjan \u7f29\u70b9 \n\n## 1.\u601d\u8def\n\n### **1.1 \u5ba1\u9898**\n\n$A$\u638c\u63e1$B$\u7684\u8d44\u6599\n\n**\u27fa** $A$\u88ab\u6293\u6216\u8005\u88ab\u8d3f\u8d42\uff0c$B$\u5c31\u88ab\u66b4\u9732\u4e86\n\n**\u27fa** $A$\u5982\u679c\u5c5e\u4e8e\u88ab\u641c\u8fc7\u7684\u96c6\u5408\uff0c\u5219$B$\u4e5f\u5c5e\u4e8e\n\n### **1.2 \u53ef\u884c\u6027&\u6700\u4f18\u6027**\n\n\u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u884c\u6027\uff1a**\u5982\u679c\u4e00\u4e2a\u95f4\u8c0d\u6ca1\u6709\u88ab\u5176\u4ed6\u4eba\u627c\u4f4f\u54bd\u5589\uff0c\u90a3\u4e48\u4ed6\u5982\u679c\u4e0d\u88ab\u6536\u4e70\uff0c\u5c31\u4e00\u5b9a\u4e0d\u80fd\u7834\u574f\u6574\u4e2a\u95f4\u8c0d\u7f51\u7edc\uff1b\u76f8\u53cd\u5730\uff0c\u5982\u679c\u90fd\u53ef\u4ee5\u88ab\u6536\u4e70\uff0c\u5219\u7b54\u6848\u5c31\u662f\u4ed6\u4eec\u4e4b\u548c\u3002**\n\n\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u6807\u8f6c\u4e3a\u627e\u5230\u6ca1\u6709\u88ab\u627c\u4f4f\u54bd\u5589\u7684\u95f4\u8c0d\uff0c\u5e76\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u5168\u90e8\u90fd\u88ab\u6536\u4e70\u3002\n\n\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u70b9\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tqyrtp9p.png)\n\n\u4f46\u662f\u56fe\u4e2d\u5374\u67092,4,3,1\u4e92\u76f8\u7275\u52365,6,7,8\u76f8\u4e92\u7275\u5236\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u7684\u56fe\u662f\u6709\u73af\u7684\uff0c\u6216\u8005\u8bf4\u6709\u95f4\u8c0d\u76f8\u4e92\u7275\u5236\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u628a**\u53ef\u4ee5\u4e92\u76f8\u7275\u5236\u7684\u4e00\u7fa4\u95f4\u8c0d**\u770b\u505a\u4e00\u4e2a\u95f4\u8c0d\uff0c\u5176\u6536\u4e70\u8d39\u7528\uff0c\u6211\u4eec\u901a\u8fc7\u6700\u4f18\u7684\u601d\u60f3\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u95f4\u8c0d\u7fa4\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u3002\n\n## 2.\u7b97\u6cd5\u5b9e\u73b0\n\n### 2.1 \u5f3a\u8054\u901a\u5206\u91cf\n\n\u50cf\u90a3\u4e00\u7fa4\u95f4\u8c0d\u4e00\u6837\u76f8\u4e92\u7275\u5236\uff0c\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\u7684\u70b9\u7684\u96c6\u5408\u53eb\u505a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u4e00\u822c\u4f7f\u7528tarjan\u7b97\u6cd5\u6c42\u53d6\u3002\n\n### 2.2 \u8ddf\u672c\u9898\u7684\u5173\u7cfb\n\n\u901a\u8fc7\u6c42\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u53ef\u4ee5\u5c06\u5728\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u770b\u505a\u4e00\u4e2a\u5927\u7684\u70b9\n\n\u5982\u4e0a\u9762\u7684\u4e00\u7ec4\u6570\u636e\uff0c\u5c06\u5f3a\u8054\u901a\u5206\u91cf{1,2,3,4}\u770b\u505aA\uff0c{5,6,7,8}\u770b\u505aB\uff0c\u5219\u6709:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hqrvq60l.png)\n\n\u4e8e\u662f\uff0c\u5c06\u76f8\u540c\u5f3a\u8054\u901a\u5206\u91cf\u7684\u67d3\u4e2a\u8272\uff0c\u6700\u540e\u518d\u5efa\u65b0\u56fe\u5c31\u597d\u4e86\n\n(\u53ef\u4ee5\u4e0d\u5efa\u65b0\u56fe\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u6bd4\u8f83\u62bd\u8c61\u4e00\u70b9\u70b9\uff0c\u8fd9\u91cc\u5c31\u5efa\u65b0\u56fe\u76f4\u89c2\u4e00\u70b9)\n\n## 3.\u6ce8\u610f\n\n\u2460\u8bb0\u5f97\u7ed9\u6bcf\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u5f04\u597d\u6700\u5c0f\u7f16\u53f7\u7684\uff0c\u5e94\u4ed8NO\u7684\u60c5\u51b5\n\n\u2461\u95f4\u8c0d\u7f51\u7edc\u53ef\u80fd\u662f\u68ee\u6797\uff0c\u8981\u5145\u5206\u904d\u5386\n\n## 4.\u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxn 3003\n#define Inf 2147483647\nusing namespace std;\nint dfn[maxn],low[maxn],n,m,p;\nint first[maxn],st[maxn],top,tot,num,cnt,co[maxn][maxn],Cost[maxn],col[maxn],mo[maxn],MIN[maxn];\nbool inst[maxn],vis[maxn];\nstruct Edge{\n    int to,nxt;\n}e[maxn<<2],ne[maxn<<2];\nvoid add(int u,int v)\n    {e[++tot]=(Edge){v,first[u]};first[u]=tot;}\nvoid tarjan(int u)\n{\n    low[u]=dfn[u]=++num;\n    st[++top]=u;inst[u]=1;\n    for(int i=first[u];i;i=e[i].nxt)\n    {\n        int v=e[i].to;\n        if(!dfn[v])\n        {\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(inst[v]) low[u]=min(low[u],dfn[v]);\n    }\t\t\t\t\t\t\t\t\t\t//\u5230\u8fd9\u91cc\u90fd\u662ftarjan\u6a21\u677f\uff0c\u4e0d\u591a\u505a\u89e3\u91ca \n    if(dfn[u]==low[u])\t\t\t\t\t\t//\u627e\u5230\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \n    {\n        ++cnt; \n\t\tint minn=Inf,minum=Inf; \t\t\t\n        while(st[top]!=u&&top>0)\n        {\n            inst[st[top]]=0;\n            co[cnt][++co[cnt][0]]=st[top];\n            minn=min(minn,Cost[st[top]]);\t//\u7531\u4e0a\uff0c\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4ef7\u503c\u7531\u6700\u5c0f\u6536\u4e70\u8d39\u7528\u7684\u95f4\u8c0d\u51b3\u5b9a\n            minum=min(minum,st[top]);\t\t//\u5f53\u524d\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7f16\u53f7\u6700\u5c0f\u7684(\u5e94\u4ed8\u4e0d\u80fd\u6536\u4e70\u5168\u90e8\u7684\u60c5\u51b5) \n            top--;\n        }\n        \n        inst[u]=0;\t\t\t\t\t\t\t//u\u4e5f\u8981\u540c\u4e0a\u5904\u7406 \n\t\tco[cnt][++co[cnt][0]]=u;\n        minn=min(minn,Cost[u]);\n        minum=min(minum,u);\n        \n        top--;mo[cnt]=minn;MIN[cnt]=minum;\n        for(int i=1;i<=co[cnt][0];++i) Cost[co[cnt][i]]=minn,col[co[cnt][i]]=cnt;//\u4ef7\u503c\u540c\u5316\uff0c\u67d3\u8272 \n    }\n}\nvoid build_new()\n{\n    for(int i=1;i<=cnt;++i)\n    {\n        for(int j=1;j<=co[i][0];++j)\n        {\n            int u=co[i][j];\n            for(int k=first[u];k;k=e[k].nxt)\n            {\n                int v=e[k].to;\n                if(col[v]==col[u]) continue;//\u548c\u4e0d\u540c\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5143\u7d20\u8fde\u8fb9\n                vis[col[v]]=1;\t\t\t\t//\u88ab\u5efa\u8fb9\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5165\u5ea6\u4e0d\u4e3a\u96f6 \n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&p);\n    int u,v;\n    for(int i=1;i<=maxn-1;++i) Cost[i]=Inf;\t//\u6bcf\u4e2a\u95f4\u8c0d\u90fd\u8981\u88ab\u9644\u4e0a\u6700\u5927\u503c \n    for(int i=1;i<=p;++i)\n    {\n        int x;scanf(\"%d\",&x);\n        scanf(\"%d\",&Cost[x]);\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\t\t\t\t\t\t\t//\u8fde\u8fb9 \n    }\n    for(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);//\u5bf9\u95f4\u8c0d\u68ee\u6797tarjan\u4e00\u6b21 \n    build_new();\n    int ans=0;\n    for(int i=1;i<=cnt;++i)\n        if(!vis[i])\n        {\n            if(mo[i]==Inf) {printf(\"NO\\n%d\",MIN[i]);return 0;}\n            ans+=mo[i];\n        }\n    printf(\"YES\\n%d\",ans);return 0;\n}\n```\n## \u840c\u65b0\u7b2c\u56db\u7bc7\u9898\u89e3QWQ\u8bf7\u591a\u591a\u63d0\u51fa\u610f\u89c1\u8ba9\u849f\u84bb\u6539\u8fdb\u4e0b",
        "postTime": 1579842748,
        "uid": 71960,
        "name": "\u9ec4\u6bdb\u732b_HYX",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u9996\u5148\u8fdb\u884c\u7f29\u70b9\u3002  \n\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u53ea\u9700\u8981\u4e70\u901a\u4e00\u4e2a\u4eba\u5176\u4ed6\u4eba\u5c31GG\u4e86,\u90a3\u4e48\u53ea\u8981\u8d2a\u5fc3\u4e70\u6700\u4fbf\u5b9c\u7684\u4eba\u5c31\u597d\u4e86\u3002  \n\u8003\u8651\u7f29\u70b9\u540e\u5f62\u6210\u7684DAG\u68ee\u6797,\u663e\u7136\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u5206\u91cf\u6392\u6389\u5176\u4ed6\u5206\u91cf\u5c31\u8ddf\u7740GG\u4e86\u3002  \n\u82e5\u5165\u5ea6\u4e3a0\u7684\u5206\u91cf\u90fd\u80fd\u4e70\u901a,\u628a\u8fd9\u4e9b\u5206\u91cf\u7684\u4ee3\u4ef7\u76f8\u52a0\u5373\u4e3a\u6700\u5c0f\u4ee3\u4ef7\u3002  \n\u5982\u679c\u6709\u5165\u5ea6\u4e3a0\u7684\u5206\u91cf\u4e0d\u80fd\u4e70\u901a,\u5219\u4e00\u5b9a\u65e0\u6cd5\u4e70\u901a\u6240\u6709\u95f4\u8c0d\u3002  \n\u7136\u540e\u4ece\u6240\u6709\u80fd\u4e70\u901a\u7684\u70b9\u5f00\u59cbdfs,\u6240\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u5206\u91cf\u5185\u7684\u6700\u5c0f\u7f16\u53f7\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\u3002  \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 3456, M = 8901, inf = 0x3f3f3f3f;\nint head[N<<1], cost[N], ver[M<<1], my[M<<1], nex[M<<1], tot, n;\ninline void addedge(int u, int v) {\n\tver[tot] = v, my[tot] = u, nex[tot] = head[u], head[u] = tot++;\n}\n\nint dfn[N], low[N], sta[N], co[N], mc[N], ind[N], vis[N], minid[N], col = 1, dfs_clock = 1, top;\nvoid tarjan(int cur) {\n\tdfn[cur] = low[cur] = dfs_clock++;\n\tsta[top++] = cur;\n\tfor(int i = head[cur]; ~i; i = nex[i]) \n\t\tif(!dfn[ver[i]]) {\n\t\t\ttarjan(ver[i]);\n\t\t\tlow[cur] = min(low[cur], low[ver[i]]);\n\t\t} else if(!co[ver[i]]) {\n\t\t\tlow[cur] = min(low[cur], dfn[ver[i]]);\n\t\t}\n\tif(dfn[cur] == low[cur]) {\n\t\tco[cur] = col;\n\t\tmc[col] = cost[cur];\n\t\tminid[col] = cur;\n\t\twhile(sta[--top] != cur) {\n\t\t\tco[sta[top]] = col;\n\t\t\tmc[col] = min(mc[col], cost[sta[top]]);\n\t\t\tminid[col] = min(minid[col], minid[sta[top]]);\n\t\t}\n\t\t++col;\n\t}\n}\n\nvoid dfs(int cur) {\n\tvis[cur] = 1;\n\tfor(int i = head[cur+n]; ~i; i = nex[i])\n\t\tdfs(ver[i]);\n}\n\nint main() {\n\tmemset(head, -1, sizeof(head));\n\tmemset(cost, inf, sizeof(cost));\n\tint p, m, u, v;\n\tscanf(\"%d %d\", &n, &p);\n\tfor(int i = 1; i <= p; ++i) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\tcost[u] = v;\n\t}\n\tscanf(\"%d\", &m);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\taddedge(u, v);\n\t}\n\tmemset(mc, inf, sizeof(mc));\n\tfor(int i = 1; i <= n; ++i) if(!dfn[i]) tarjan(i);\n\t--col;\n\tfor(int i = 0, end = tot; i < end; ++i)\n\t\tif(co[my[i]] != co[ver[i]]) {\n\t\t\taddedge(co[my[i]]+n, co[ver[i]]);\n\t\t\t++ind[co[ver[i]]];\n\t\t}\n\tint ans = 0, flg = 1;\n\tfor(int i = 1; i <= col; ++i)\n\t\tif(!ind[i]) {\n\t\t\tif(mc[i] == inf)\n\t\t\t\tflg = 0;\n\t\t\telse {\n\t\t\t\tans += mc[i];\n\t\t\t}\n\t\t}\n\tif(flg) {\n\t\tprintf(\"YES\\n%d\\n\", ans);\n\t\treturn 0;\n\t}\n\tprintf(\"NO\\n\");\n\tfor(int i = 1; i <= col; ++i)\n\t\tif(!vis[i] && mc[i] != inf) {\n\t\t\tdfs(i);\n\t\t}\n\tint nid = inf;\n\tfor(int i = 1; i <= col; ++i) \n\t\tif(!vis[i]) {\n\t\t\tnid = min(nid, minid[i]);\n\t\t}\n\tprintf(\"%d\\n\", nid);\n\treturn 0;\t\n}\n```",
        "postTime": 1573604767,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "### \u9898\u9762\n\n1517\uff1a\u95f4\u8c0d\u7f51\u7edc\n\n\u65f6\u95f4\u9650\u5236: 1000 ms \u5185\u5b58\u9650\u5236: 562144 KB\n\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\n\u7531\u4e8e\u5916\u56fd\u95f4\u8c0d\u7684\u5927\u91cf\u6e17\u5165\uff0c\u56fd\u5bb6\u5b89\u5168\u6b63\u5904\u4e8e\u9ad8\u5ea6\u5371\u673a\u4e4b\u4e2d\u3002\u5982\u679c$A$\u95f4\u8c0d\u624b\u4e2d\u638c\u63e1\u7740\u5173\u4e8e$B$\u95f4\u8c0d\u7684\u72af\u7f6a\u8bc1\u636e\uff0c\u5219\u79f0$A$\u53ef\u4ee5\u63ed\u53d1$B$\u3002\u6709\u4e9b\u95f4\u8c0d\u63a5\u53d7\u8d3f\u8d42\uff0c\u53ea\u8981\u7ed9\u4ed6\u4eec\u4e00\u5b9a\u6570\u91cf\u7684\u7f8e\u5143\uff0c\u4ed6\u4eec\u5c31\u613f\u610f\u4ea4\u51fa\u624b\u4e2d\u638c\u63e1\u7684\u5168\u90e8\u60c5\u62a5\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u6536\u4e70\u4e00\u4e9b\u95f4\u8c0d\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u63a7\u5236\u95f4\u8c0d\u7f51\u4e2d\u7684\u6bcf\u4e00\u5206\u5b50\u3002\u56e0\u4e3a\u4e00\u65e6\u6211\u4eec\u902e\u6355\u4e86\u4e00\u4e2a\u95f4\u8c0d\uff0c\u4ed6\u624b\u4e2d\u638c\u63e1\u7684\u60c5\u62a5\u90fd\u5c06\u5f52\u6211\u4eec\u6240\u6709\uff0c\u8fd9\u6837\u5c31\u6709\u53ef\u80fd\u902e\u6355\u65b0\u7684\u95f4\u8c0d\uff0c\u638c\u63e1\u65b0\u7684\u60c5\u62a5\u3002\n\n\u6211\u4eec\u7684\u53cd\u95f4\u8c0d\u673a\u5173\u63d0\u4f9b\u4e86\u4e00\u4efd\u8d44\u6599\uff0c\u5305\u62ec\u6240\u6709\u5df2\u77e5\u7684\u53d7\u8d3f\u7684\u95f4\u8c0d\uff0c\u4ee5\u53ca\u4ed6\u4eec\u613f\u610f\u6536\u53d7\u7684\u5177\u4f53\u6570\u989d\u3002\u540c\u65f6\u6211\u4eec\u8fd8\u77e5\u9053\u54ea\u4e9b\u95f4\u8c0d\u624b\u4e2d\u5177\u4f53\u638c\u63e1\u4e86\u54ea\u4e9b\u95f4\u8c0d\u7684\u8d44\u6599\u3002\u5047\u8bbe\u603b\u5171\u6709$n$\u4e2a\u95f4\u8c0d\uff0c\u6bcf\u4e2a\u95f4\u8c0d\u5206\u522b\u7528$1$\u5230$n$\u7684\u6574\u6570\u6765\u6807\u8bc6\u3002\n\n\u8bf7\u6839\u636e\u8fd9\u4efd\u8d44\u6599\uff0c\u5224\u65ad\u6211\u4eec\u662f\u5426\u53ef\u80fd\u63a7\u5236\u5168\u90e8\u7684\u95f4\u8c0d\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u6c42\u51fa\u6211\u4eec\u6240\u9700\u8981\u652f\u4ed8\u7684\u6700\u5c11\u8d44\u91d1\u3002\u5426\u5219\uff0c\u8f93\u51fa\u4e0d\u80fd\u88ab\u63a7\u5236\u7684\u4e00\u4e2a\u95f4\u8c0d\u3002\n\n\u3010\u8f93\u5165\u3011\n\n\u7b2c\u4e00\u884c\u53ea\u6709\u4e00\u4e2a\u6574\u6570$n$\u3002\u7b2c\u4e8c\u884c\u662f\u6574\u6570$p$\u3002\u8868\u793a\u613f\u610f\u88ab\u6536\u4e70\u7684\u4eba\u6570\u3002\n\n\u63a5\u4e0b\u6765\u7684$p$\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u4e00\u4e2a\u613f\u610f\u88ab\u6536\u4e70\u7684\u95f4\u8c0d\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u6570\u8868\u793a\u4ed6\u5c06\u4f1a\u88ab\u6536\u4e70\u7684\u6570\u989d\u3002\n\n\u7d27\u8ddf\u7740\u4e00\u884c\u53ea\u6709\u4e00\u4e2a\u6574\u6570$r$\u3002\u7136\u540e$r$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6570\u5bf9$(A,B)$\uff0c$A$\u95f4\u8c0d\u638c\u63e1$B$\u95f4\u8c0d\u7684\u8bc1\u636e\u3002\n\n\u3010\u8f93\u51fa\u3011\n\n\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u6240\u6709\u95f4\u8c0d\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa$YES$\uff0c\u5e76\u5728\u7b2c\u4e8c\u884c\u8f93\u51fa\u6240\u9700\u8981\u652f\u4ed8\u7684\u8d3f\u91d1\u6700\u5c0f\u503c\u3002\u5426\u5219\u8f93\u51fa$NO$\uff0c\u5e76\u5728\u7b2c\u4e8c\u884c\u8f93\u51fa\u4e0d\u80fd\u63a7\u5236\u7684\u95f4\u8c0d\u4e2d\uff0c\u7f16\u53f7\u6700\u5c0f\u7684\u95f4\u8c0d\u7f16\u53f7\u3002\n\n\u3010\u8f93\u5165\u6837\u4f8b\u3011\n\n2 \n\n1 \n\n2 512 \n\n2 \n\n1 2 \n\n2 1\n\n\u3010\u8f93\u51fa\u6837\u4f8b\u3011\n\nYES\n\n512\n\n\u3010\u63d0\u793a\u3011\n\n$1\u2264n\u22643000,1\u2264p\u2264n,1\u2264r\u22648000$, \u6bcf\u4e2a\u6536\u4e70\u7684\u8d39\u7528\u4e3a\u975e\u8d1f\u6570\u4e14\u4e0d\u8d85\u8fc7$20000$\u3002\n\n### \u7b97\u6cd5\n\n$Tarjan$\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\n\n>\u6709\u5411\u56fe\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5728\u6709\u5411\u56fe$G$\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u9876\u70b9$vi,vj$\u95f4\uff08$vi>vj$\uff09\u6709\u4e00\u6761\u4ece$vi$\u5230$vj$\u7684\u6709\u5411\u8def\u5f84\uff0c\u540c\u65f6\u8fd8\u6709\u4e00\u6761\u4ece$vj$\u5230$vi$\u7684\u6709\u5411\u8def\u5f84\uff0c\u5219\u79f0\u4e24\u4e2a\u9876\u70b9\u5f3a\u8fde\u901a($strongly$ $connected$)\u3002\u5982\u679c\u6709\u5411\u56fe$G$\u7684\u6bcf\u4e24\u4e2a\u9876\u70b9\u90fd\u5f3a\u8fde\u901a\uff0c\u79f0$G$\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u56fe\u3002\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf($strongly$ $connected$ $components$)\u3002\n\n\u5c06\u539f\u56fe\u7f29\u70b9\u540e\u4f1a\u53d8\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6b64\u65f6\u67e5\u627e\u5165\u5ea6\u4e3a$0$\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u5fc5\u987b\u6536\u4e70\uff08\u5165\u5ea6\u4e3a$0$\u610f\u5473\u7740\u6ca1\u6709\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u4ee5\u63ed\u53d1\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff09\uff0c\u5176\u4e2d\u53ef\u4ee5\u6536\u4e70\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u6536\u4e70\u8d39\u7528\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u8fd9\u53ef\u4ee5\u5728\u7b97\u6cd5\u4e2d\u7edf\u8ba1\u3002\u8d39\u7528\u4e3a\u8fd9\u4e9b\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u8d39\u7528\u548c\u3002\n\n\u5bf9\u4e8e\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u662f\u4e00\u4e2a\u95f4\u8c0d\u4e0d\u80fd\u6536\u4e70\u4e5f\u6ca1\u6709\u4eba\u80fd\u591f\u63ed\u53d1\u5b83\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u5148\u7b5b\u9009\u51fa\u4e0d\u80fd\u6536\u4e70\u7684\u95f4\u8c0d\uff0c\u4e0d\u5bf9\u8fd9\u4e2a\u95f4\u8c0d\u8fdb\u884c$Tarjan$\u7b97\u6cd5\uff0c\u8fd9\u6837\u5982\u679c\u4ed6\u662f\u4e00\u4e2a\u5176\u4ed6\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u5b83\u7684$dfn$\u7684\u503c\u4e0d\u4f1a\u4e3a$0$\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u80fd\u591f\u63ed\u53d1\u5b83\u65f6\u5b83\u7684$dfn$\u503c\u624d\u4f1a\u4e3a$0$\uff08\u6839\u636e$Tarjan$\u7b97\u6cd5\uff0c\u6bcf\u4e00\u4e2a\u904d\u5386\u8fc7\u7684\u70b9\u7684$dfn$\u503c\u90fd\u4f1a\u5927\u4e8e$0$\uff09\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<stack>\n#define mini(a,b) ((a)<(b)?(a):(b))\nconst unsigned short int N=3005,M=8005;\nunsigned short int n,p,r;\nstruct node\n{\n\tunsigned short int to,next;\n}edge[M];\nunsigned short int head[N],cnt;\ninline void add(unsigned short int u,unsigned short int v)\n{\n\tcnt++;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u5fc3\u5b58\u56fe\u3001\u52a0\u8fb9\nunsigned short int a[N];//\u6536\u4e70\u91d1\u989d\nunsigned short int dfn[N],low[N],step,col[N],num,minl[N];//Tarjan\u7b97\u6cd5\u9700\u8981\u7684\u6570\u7ec4\uff0cminl\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u8d3f\u8d42\u91d1\u989d\u6700\u5c0f\u503c\nstd::stack<unsigned short int> s;\nvoid Tarjan(unsigned short int i)\n{\n\tstep++;\n\tdfn[i]=step;\n\tlow[i]=step;\n\ts.push(i);\n\tunsigned short int k;\n\tfor(unsigned short int j=head[i];j!=0;j=edge[j].next)\n\t{\n\t\tk=edge[j].to;\n\t\tif(dfn[k]==0)\n\t\t{\n\t\t\tTarjan(k);\n\t\t\tlow[i]=mini(low[i],low[k]);\n\t\t}\n\t\telse if(col[k]==0)\n\t\t{\n\t\t\tlow[i]=mini(low[i],dfn[k]);\n\t\t}\n\t}\n\tif(dfn[i]==low[i])\n\t{\n\t\tnum++;\n\t\tcol[i]=num;\n\t\tminl[num]=a[i];\n\t\twhile(s.top()!=i)\n\t\t{\n\t\t\tcol[s.top()]=num;\n\t\t\tminl[num]=mini(minl[num],a[s.top()]);\n\t\t\ts.pop();\n\t\t}\n\t\ts.pop();\n\t}\n\treturn;\n}\nunsigned short int du[N];\nunsigned int ans;\nint main()\n{\n\tscanf(\"%hu%hu\",&n,&p);\n\tmemset(minl,0x4f,sizeof(minl));\n\tmemset(a,0x4f,sizeof(a));//\u5c06\u6700\u5c0f\u503c\u3001\u91d1\u989d\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\uff084f4f>20000\uff09\n\tunsigned short int x,y;\n\tfor(register unsigned short int i=1;i<=p;i++)\n\t{\n\t\tscanf(\"%hu%hu\",&x,&y);\n\t\ta[x]=y;\n\t}\n\tscanf(\"%hu\",&r);\n\tfor(register unsigned short int i=1;i<=r;i++)\n\t{\n\t\tscanf(\"%hu%hu\",&x,&y);\n\t\tadd(x,y);\n\t}//\u8bfb\u5165\u3001\u52a0\u8fb9\n\tfor(register unsigned short int i=1;i<=n;i++)\n\t{\n\t\tif(dfn[i]==0 && a[i]!=0x4f4f)\n\t\t{\n\t\t\tTarjan(i);//\u4ec5\u5bf9\u4e8e\u80fd\u53d7\u8d3f\u7684\u95f4\u8c0d\u8fdb\u884c\u5f3a\u8fde\u901a\u5206\u91cf\u8ba1\u7b97\n\t\t}\n\t}\n\tfor(register unsigned short int i=1;i<=n;i++)\n\t{\n\t\tif(dfn[i]==0)\n\t\t{\n\t\t\tputs(\"NO\");\n\t\t\tprintf(\"%hu\",i);//\u6ca1\u6709\u8bbf\u95ee\u5230\u5373\u65e0\u6cd5\u5b8c\u6210\u4efb\u52a1\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(register unsigned short int i=1;i<=n;i++)\n\t{\n\t\tfor(register unsigned short int j=head[i];j!=0;j=edge[j].next)\n\t\t{\n\t\t\tif(col[i]!=col[edge[j].to])\n\t\t\t{\n\t\t\t\tdu[col[edge[j].to]]++;//\u7edf\u8ba1\u51fa\u5ea6\n\t\t\t}\n\t\t}\n\t}\n\tfor(register unsigned short int i=1;i<=num;i++)\n\t{\n\t\tif(du[i]==0)\n\t\t{\n\t\t\tans+=minl[i];//\u6dfb\u52a0\u7b54\u6848\n\t\t}\n\t}\n\tputs(\"YES\");\n\tprintf(\"%u\",ans);//\u8f93\u51fa\n\treturn 0;\n}\n```\n\n#### \u8fd0\u884c\u7ed3\u679c\n\n\u4e00\u672c\u901aOJ\uff1a\n\n1517\n\n\u901a\u8fc7 100\u5206\n\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 448KB 2MS \n\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 452KB 4MS \n\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 452KB 6MS \n\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 460KB 5MS \n\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 500KB 6MS \n\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 512KB 7MS \n\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 524KB 9MS \n\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 536KB 10MS \n\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 556KB 11MS \n\n\u6d4b\u8bd5\u70b910: \u7b54\u6848\u6b63\u786e 564KB 11MS \n\n\u6d4b\u8bd5\u70b911: \u7b54\u6848\u6b63\u786e 560KB 11MS \n\n---\n\n\u6d1b\u8c37\uff1a\n\n\u7528\u65f6 41ms \u5185\u5b58 944.00KB\n\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\n\n3ms/664.00KB AC #1\n\n4ms/796.00KB AC #2\n\n3ms/596.00KB AC #3\n\n4ms/944.00KB AC #4\n\n3ms/632.00KB AC #5\n\n2ms/696.00KB AC #6\n\n3ms/796.00KB AC #7\n\n2ms/692.00KB AC #8\n\n2ms/696.00KB AC #9\n\n3ms/640.00KB AC #10\n\n4ms/764.00KB AC #11\n\n4ms/768.00KB AC #12\n\n4ms/896.00KB AC #13",
        "postTime": 1566294155,
        "uid": 158626,
        "name": "lzcjoe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262\u3010\u95f4\u8c0d\u7f51\u7edc \u4e00\u672c\u901a\u63d0\u9ad8\u7bc7 3.5.3 1517 \u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "    \u672c\u4eba\u849f\u84bb  \u6700\u540e\u7b54\u6848\u8dd1\u4e8642ms....\n    \u770b\u5230\u6709\u5f88\u591a0ms\u5927\u795e \u4e0d\u77e5\u548b\u505a\u7684...\n    \n    \u4f46\u6211\u8fd8\u662f\u5f88\u4e0d\u8981\u8138\u7684\u6765\u53d1\u9898\u89e3\uff1f\uff1f\uff1f\n    \n    \u9996\u5148\u660e\u786e\u8fd9\u662f\u4e00\u4e2a\u7f29\u70b9\n    1 \u51e1\u662f\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u70b9\u7684\u7684\u6700\u5c0f\u503c\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u6570\u636e \u56e0\u4e3a\u5176\u4ed6\u6240\u6709\u6bd4\u4ed6\u82b1\u8d39\u5927\u7684\u4e0e\u5b83\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u641c\u5230 \u4e5f\u5c31\u4e0d\u9700\u8981\u4e86\n    \n    2 tarjan\u7684\u65f6\u5019\u8981\u6ce8\u610f \u6211\u4eec\u53ea\u80fd\u627edfn == 0 \u5e76\u4e14 \u53ef\u4ee5\u88ab\u8d3f\u8d42\u7684\u70b9\n    \n    3 \u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc \u5982\u679c\u67d0\u4e2a\u70b9\u4e0d\u80fd\u88ab\u8d3f\u8d42 \u5219\u4e0d\u80fd\u7528\u5b83\u66f4\u65b0\u7b54\u6848\n    \n    4 \u5f3a\u8fde\u901a\u5206\u91cf\u5b8c\u6210\u540e \u6211\u4eec\u5fc5\u987b\u6839\u636e\u7f29\u597d\u7684\u70b9\u6784\u5efa\u65b0\u56fe \u65b0\u56fe\u91cc\u4e00\u5b9a\u5bf9\u6ca1\u6709\u73af\u7684 \u4f46\u662f\u65b0\u56fe\u91cc\u53ef\u80fd\u6709\u94fe \u6211\u4eec\u6700\u540e\u7684\u7b54\u6848\u53ea\u8981\u662f\u65b0\u56fe\u91cc\u6240\u6709\u94fe\u7684\u8d77\u70b9\u5c31\u884c\u4e86\uff08\u8fd9\u91cc\u6211\u7684\u64cd\u4f5c\u662f\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\uff09\n    \n   \n   \n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<stack>\n#include<queue>\nusing namespace std;\nconst int maxn = 3005;\nconst int maxm = 8005;\nint n,m,p,head[maxn],dfn[maxn],low[maxn],top,mon[maxn],indexx,belong[maxn],head2[maxn],top2,indegree[maxn];\nbool instack[maxn],wou[maxn],can[maxn];\nstruct edge {\n\tint to,next,from;\n}e[maxm],e2[maxm];\nstack< int > s;\nvoid add_edge(int u,int v) {\n\te[++top].to = v;\n\te[top].from = u;\n\te[top].next = head[u] ;\n\thead[u] = top;\n}\nvoid add_edge2(int u,int v) {\n\te2[++top2].to = v;\n\te2[top2].from = u;\n\te2[top2].next = head2[u] ;\n\thead2[u] = top2;\n}\n\nvoid tarjan(int u) {\n\tdfn[u] = low[u] = ++indexx;\n\tinstack[u] = 1;\n\ts.push(u) ;\n\tfor(int i = head[u]; i ;i = e[i].next) {\n\t\tif(!dfn[e[i].to]) {\n\t\t\ttarjan(e[i].to) ;\n\t\t\tlow[u] = min(low[u] , low[e[i].to]) ;\n\t\t}\n\t\telse \n\t\t  if(instack[e[i].to])\n\t\t    low[u] = min(low[u] , low[e[i].to]) ;\n\t}\n\tif(dfn[u] == low[u]) {\n\t\twhile(s.top() != u) {\n\t\t\tint k = s.top() ; s.pop() ;\n\t\t\tinstack[k] = 0;\n\t\t\tbelong[k] = u;\n\t\t\tif(mon[u] && mon[k]) mon[u] = min(mon[u] , mon[k]) ;//\u8fd8\u6709\u8fd9\u91cc \u5982\u679c\u5728\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u67d0\u4e2a\u70b9\u4e0d\u80fd\u88ab\u8d3f\u8d42 \u4f46\u662f\u5374\u53ef\u4ee5\u88ab\u627e\u5230\n\t\t\t                                                    //\u5219\u4e0d\u80fd\u66f4\u65b0\u7b54\u6848   mon[u] = min(mon[u],mon[k]) ; \u8fd9\u6837\u5c31\u662f\u9519\u8bef\u7684 \n\t\t}\n\t\ts.pop() ; instack[u] = 0;\n\t\tbelong[u] = u;\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&p) ;\n\tfor(int i = 1;i <= n ;++i) belong[i] = i;\n\twhile(p--) {\n\t\tint x ,y; scanf(\"%d%d\",&x,&y) ;\n\t\twou[x] = 1; mon[x] = y;\n\t}\n\tscanf(\"%d\",&m) ;\n\tfor(int i = 1;i <= m ;++i) {\n\t\tint x,y; scanf(\"%d%d\",&x,&y) ;\n\t\tadd_edge(x , y) ; can[y] = 1;\n\t}\n\tfor(int i = 1;i <= n ;++i) \n\t\tif(!wou[i] && !can[i]) {\n\t\t\tprintf(\"NO\\n\") ; printf(\"%d\", i) ;\n\t\t\treturn 0;\n\t\t} \n\tprintf(\"YES\\n\") ;\t\n\tfor(int i = 1;i <= n ;++i)\n\t  if(!dfn[i] && mon[i]) tarjan(i) ;   //\u7f29\u70b9 \u522b\u5fd8\u4e86\u6211\u4eec\u53ea\u80fd\u641c\u53ef\u4ee5\u88ab\u8d3f\u8d42\u7684\u70b9 \n\tfor(int i = 1;i <= m ;++i) {   //\u6784\u5efa\u65b0\u56fe \n\t\tif(belong[e[i].from] == belong[e[i].to]) continue ;\n\t\tadd_edge2(belong[e[i].from] , belong[e[i].to]) ;\n\t\tindegree[belong[e[i].to]]++;   //\u6700\u540e\u627e\u7684\u662f\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9 \n\t}\n\tlong long ans = 0;\n\tfor(int i = 1;i <= n ;++i) {\n\t\tif(belong[i] != i || indegree[i]) continue ;\n\t\tans = (long long)(ans + mon[i]) ;\n\t}\n\tprintf(\"%lld\",ans) ;\n\treturn 0;\n}\n```",
        "postTime": 1534764185,
        "uid": 88340,
        "name": "Tiffany_Tendering",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u5148tarjan\u7f29\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u6709\u53ef\u80fd\u88ab\u6536\u4e70\u7684\u4eba\uff0c\u66f4\u65b0\u4ed6\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u8d2d\u4e70\u6743\u503c\uff0c\u56e0\u4e3a\u8d2d\u4e70\u4e00\u4e2a\u4eba\uff0c\u8fd9\u4e00\u4e2a\u5206\u91cf\u5c31\u90fd\u88ab\u4e70\u4e86\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u82e5\u4e00\u4e2a\u4eba\u4e0d\u80fd\u88ab\u6536\u4e70\uff0c\u53ea\u80fd\u662f\u4ed6\u662f\u4e00\u4e2a\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\uff0c\u6211\u4eec\u5224\u65ad\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5165\u5ea6\u662f\u4e0d\u662f0\uff0c\u662f0\u7684\u8bdd\uff0c\u82e5\u4ed6\u8fd8\u4e0d\u80fd\u88ab\u6536\u4e70\uff0c\u90a3\u5c31\u8f93\u51fano\uff0c\u7136\u540e\u80fd\u88ab\u6536\u4e70\u5c31\u628a\u6743\u503c\u52a0\u4e0a\uff0c\u6700\u540e\u8f93\u51fa\u5c31\u597d\n\u4ee3\u7801\n```cpp\n#include<cmath>\n#include<queue>\n#include<stack>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int M=10000;\nstack<int>s;\nvector<int>v[M];\nvector<int>G[M];\nint f[M],in[M];\nint n,m,e,c[M];\nint ind=0,ti=0,fa[M];\nint dfn[M],low[M],vis[M];\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++ind;s.push(x);vis[x]=1;\n\tfor (int i=0;i<v[x].size();i++)\n\t{\n\t\tint go=v[x][i];\n\t\tif (!dfn[go])\n\t\t{\n\t\t\ttarjan(go);\n\t\t\tlow[x]=min(low[x],low[go]);\n\t\t}\n\t\telse if (vis[go])\n\t\t\tlow[x]=min(low[x],dfn[go]);\n\t}\n\tif (low[x]==dfn[x])\n\t{\n\t\tint u=-1;ti++;\n\t\twhile (u!=x)\n\t\t{\n\t\t\tu=s.top();s.pop();\n\t\t\tfa[u]=ti;vis[u]=0;\n\t\t}\n\t}\n\treturn ;\n}\nvoid top()\n{\n\tqueue<int>q;int ans=0;\n\tfor (int i=1;i<=ti;i++)\n\t{\n\t\tif (!in[i]) \n\t\t{\n\t\t\tif (f[i]!=1e9) q.push(i),ans+=f[i];\n\t\t\telse \n\t\t\t{\n\t\t\t\tputs(\"NO\");for (int k=1;k<=n;k++)\n\t\t\t\tif (fa[k]==i) return (void)(cout<<k);\n\t\t\t}\n\t\t}\n\t}\t\n\tputs(\"YES\");cout<<ans;\n\treturn ;\n}\nint main()\n{\n\tfill(f,f+8500,1e9);\n\tscanf(\"%d%d\",&n,&m);int a,b;\n\tfor (int i=1;i<=m;i++)\n\t\tscanf(\"%d%d\",&a,&b),c[a]=b;\n\tscanf(\"%d\",&e);\n\tfor (int i=1;i<=e;i++)\n\t\tscanf(\"%d%d\",&a,&b),v[a].push_back(b);\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dfn[i]) tarjan(i);\n\tfor (int i=1;i<=n;i++)\n\t\tif (c[i]) f[fa[i]]=min(f[fa[i]],c[i]);\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int k=0;k<v[i].size();k++)\n\t\t\tif (fa[i]!=fa[v[i][k]]) \n\t\t\t\tin[fa[v[i][k]]]++;\n\ttop();\n\treturn 0;\n}\n```",
        "postTime": 1530183829,
        "uid": 71558,
        "name": "AcerMo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053tarjan\u7684\u6a21\u677f\u9898\u3002\n\n\u5982\u679c\u4e0d\u4e86\u89e3\u4ec0\u4e48\u662ftarjan\u548c\u7f29\u70b9\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u51e0\u7bc7blog\uff0c\u8bb2\u8ff0\u7684\u5341\u5206\u8be6\u7ec6\n\ntarjan\uff1ahttps://blog.csdn.net/justlovetao/article/details/6673602\n\n\u7f29\u70b9\uff1ahttps://blog.csdn.net/sdsy191553/article/details/79674201\n\n\u5728\u7f29\u5b8c\u70b9\u540e\u7684\u56fe\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6536\u4e70\u4e00\u4e2a\u95f4\u8c0d\uff0c\u4fbf\u53ef\u4ee5\u5c06\u6574\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u95f4\u8c0d\u90fd\u6293\u83b7\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u5728tarjan\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u53ef\u6536\u4e70\u95f4\u8c0d\u7684\u6700\u5c0f\u6570\u989d\uff0c\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u53ea\u9700\u8981\u652f\u4ed8\u6700\u5c0f\u6570\u989d\u5373\u53ef\n\n\u540c\u65f6\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u95f4\u8c0d\u88ab\u6293\uff0c\u90a3\u4e48\u5b83\u6307\u5411\u7684\u6240\u6709\u5176\u4ed6\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u95f4\u8c0d\u4e5f\u90fd\u4f1a\u88ab\u6293\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u8003\u8651\u652f\u4ed8\u5165\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5373\u53ef\u4fdd\u8bc1\u5176\u4ed6\u6240\u6709\u90fd\u4e0d\u4f1a\u9057\u6f0f\u3002\u6240\u4ee5\u5728\u7f29\u70b9\u65f6\uff0c\u8bb0\u5f97\u53ca\u65f6\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5165\u5ea6\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define a(a,b,c) for(int a=b;a<=c;a++)\n#define b(a,b,c) for(int a=b;a>=c;a--)\nusing namespace std;\nconst int INF=0x3f3f3f3f,N=3050,M=16050;\nint ver[M],Next[M],head[N],d[N];\nint vc[M],nc[M],hc[M],dc[N],k[N],used[N];\nint dfn[N],low[N],stack[N],v[N],c[N];\nint n,m,tot,tc,t,num,cnt,top,ans;\nbool flag=1;\ninline void add(int x,int y)\n{\n\tver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n}\ninline void add_c(int x,int y)\n{\n\tvc[++tc]=y,nc[tc]=hc[x],hc[x]=tc;\n}\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++num;\n\tstack[++top]=x,v[x]=1;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(v[y]) low[x]=min(low[x],dfn[y]);\n\t}\n\tif(low[x]==dfn[x])\n\t{\n\t\tcnt++;int y;\n\t\tdo{\n\t\ty=stack[top--],v[y]=0;\n\t\tc[y]=cnt;\n\t\tdc[cnt]=min(dc[cnt],d[y]);\n\t\t}while(x!=y);\n\t}\n}\nint main()\n{\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(dc,0x3f,sizeof(dc));\n\tscanf(\"%d%d\",&n,&t);\n\ta(i,0,t-1)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\td[x]=y;\n\t}\n\tscanf(\"%d\",&m);\n\ta(i,0,m-1)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\ta(i,1,n)\n\tif(!dfn[i]) tarjan(i);\n\ta(x,1,n)\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(c[x]!=c[y]) add_c(c[x],c[y]),k[c[y]]++;\n\t}\n\ta(i,1,n)\n\tif(!used[c[i]]&&!k[c[i]])\n\t{\n\t\tif(dc[c[i]]==INF) {\n\t\t\tflag=0;\n\t\t\tans=i;\n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\tans+=dc[c[i]];\n\t\t\tused[c[i]]=1;\n\t\t}\n\t}\n\tif(flag) printf(\"YES\\n%d\",ans);\n\telse printf(\"NO\\n%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1528435832,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u505a\u8fd9\u4e2a\u9898\u65ad\u65ad\u7eed\u7eed\u505a\u4e86\u4e00\u5468\u591a\u2026\u2026\u6211\u611f\u89c9\u4eba\u751f\u65e0\u671b\u4e86\n\n\u770b\u4e86\u770b\uff0c\u57fa\u672c\u90fd\u662fPascal\u7684\u9898\u89e3\uff0c\u90a3\u5c31\u53d1\u4e2aC++\u7684\u5427\n\n\u8fd9\u4e2a\u9898\u662f\u5bf9\u62cd\u62cd\u8fc7\u7684\uff0c\u6240\u4ee5\u4ee3\u7801\u540e\u9762\u9644\u52a0\u4e86\u51e0\u7ec4\u5bf9\u62cd\u65f6\u6211WA\u7684\u6570\u636e\n\n\u6838\u5fc3\u601d\u60f3\u5c31\u662fTarjan\u7f29\u70b9\uff0c\u7f29\u70b9\u524d\u8981\u8dd1\u4e00\u904dCheck\uff0c\u68c0\u67e5\u662f\u5426\u6bcf\u4e2a\u8282\u70b9\u90fd\u80fd\u591f\u88ab\u8bbf\u95ee\u5230\uff0c\u8fd9\u91ccDFS\u548cBFS\u5e94\u8be5\u90fd\u884c\uff0c\u6211\u7528\u7684BFS\n\ntarjan\u7684\u540c\u65f6\u66f4\u65b0\u5f3a\u8054\u901a\u5206\u91cf\u7f29\u70b9\u7684\u6743\u503c\uff0c\u5c31\u662f\u8be5\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u82b1\u94b1\u6700\u5c11\u7684\u90a3\u4e2a\n\n\u6709\u5165\u5ea6\u7684\u7f29\u70b9\u4e0d\u9700\u8981\u6536\u4e70\uff0c\u6ce8\u610f\u4e0d\u8981\u5fd8\u4e86\u5355\u4e2a\u4e14\u6ca1\u6709\u5165\u5ea6\u7684\u70b9\n\n\u4ee3\u7801\u5199\u7684\u5f88\u5197\u957f\uff0c\u5927\u5bb6\u5c06\u5c31\u4e00\u4e0b\u5427\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6\n#define nomoney -1\n#define INF 0x3f3f3f\nusing namespace std;\nint n, p, r, ans = 0;\nbool can = true, vis[3010] = { 0 };\nstruct point {\n    int money;\n    bool canfind;\n    int to[3010];\n    int top;\n    point() {\n        memset(this->to, 0, sizeof(this->to));\n        this->top = 0;\n        this->money = -1;\n        this->canfind = false;\n    }\n}o[3010],so[3010];\nbool check() {//BFS\u8dd1Check\n    queue<int> q;\n    for (int i = 1;i <= n;i++) {\n        if (!vis[i] && o[i].money != nomoney)vis[i] = true;else continue;\n        q.push(i);\n        while (!q.empty()) {\n            int temp = q.front();\n            q.pop();\n            for (int v = 1;v <= o[temp].top;v++) {\n                if (vis[o[temp].to[v]] == false) {\n                    vis[o[temp].to[v]] = true;\n                    o[o[temp].to[v]].canfind = true;\n                    q.push(o[temp].to[v]);\n                }\n            }\n        }\n    }\n    memset(vis,0,sizeof(vis));\n    for (int i = 1;i <= n;i++) {\n        if (o[i].money == nomoney && o[i].canfind == false) {\n            ans = i;\n            can = false;\n            return false;\n        }\n    }\n    return true;\n}\nvoid input() {\n    scanf(\"%d%d\", &n, &p);\n    for (int i = 1;i <= p;i++) {\n        int tp, tm;\n        scanf(\"%d%d\", &tp, &tm);\n        o[tp].money = tm;\n    }\n    scanf(\"%d\", &r);\n    for (int i = 1;i <= r;i++) {\n        int ts, te;\n        scanf(\"%d%d\", &ts, &te);\n        o[ts].top++;\n        o[ts].to[o[ts].top] = te;\n        if (o[ts].money != nomoney || o[ts].canfind == true)o[te].canfind = true;\n    }\n}\n//=============Tarjan=============\nint indexi = 0, dfn[3010], low[3010];\nstruct stack_II {\n    int s[3010];\n    int top;\n    stack_II() {\n        memset(this->s, 0, sizeof(this->s));\n        top = 0;\n    }\n    void push(int x) {\n        this->top++;\n        this->s[top] = x;\n    }\n    int pop() {\n        int temp = this->s[top];\n        this->s[top] = 0;\n        top--;\n        return temp;\n    }\n}u;\nint ufind(int x) {\n    for (int i = 1;i <= u.top;i++) {\n        if (u.s[i] == x)return i;\n    }\n    return 0;\n}\nvoid tarjan(int x) {\n    vis[x] = true;\n    dfn[x] = low[x] = ++indexi;\n    u.push(x);\n    for (int i = 1;i <= o[x].top;i++) {\n        if (vis[o[x].to[i]] == false) {\n            tarjan(o[x].to[i]);\n            low[x] = min(low[x], low[o[x].to[i]]);\n        }\n        else if (ufind(o[x].to[i])) {\n            low[x] = min(low[x], dfn[o[x].to[i]]);\n        }\n    }\n    if (low[x] == dfn[x]) {\n        int sum = INF, temp = x;\n        do {\n            temp = u.pop();\n            for (int v = 1;v <= o[temp].top;v++) {\n                if (low[x] != low[o[temp].to[v]]) {\n                    so[low[o[temp].to[v]]].top++;\n                    so[low[o[temp].to[v]]].to[so[low[o[temp].to[v]]].top] = low[x];\n                }\n            }\n            if (o[temp].money != nomoney)sum = min(sum, o[temp].money);\n        } while (x != temp);\n        if (sum != INF)so[low[x]].money = sum;\n    }\n}\n//=============Tarjan=============\nvoid work() {\n    for (int i = 1;i <= n;i++) {\n        if (vis[i] == false && o[i].canfind == false)tarjan(i);\n    }\n    for (int i = 1;i <= n;i++) {\n        if (vis[i] == false && o[i].money != nomoney)tarjan(i);\n    }\n    for (int i = 1;i <= indexi;i++) {\n        if (so[i].top == 0 && so[i].money!=nomoney)ans += so[i].money;\n    }\n}\nvoid output() {\n    if (can == true) {\n        printf(\"YES\\n%d\\n\", ans);\n    }\n    else {\n        printf(\"NO\\n%d\\n\", ans);\n    }\n}\nint main() {\n    input();\n    check() ? work(), output() : output();\n#ifdef DEBUG_ONLY\n    system(\"pause\");\n#endif // DEBUG_ONLY\n    return 0;\n}\n/*\n7\n7\n1 200\n2 200\n3 200\n4 50\n5 200\n6 70\n7 200\n9\n2 1\n6 2\n7 6\n2 7\n7 4\n3 1\n4 3\n5 4\n3 5\n//=====\n3\n3\n1 3\n2 2\n3 1\n2\n3 2\n2 1\n//=====\n4\n2\n2 0\n3 10\n4\n1 3\n1 4\n2 1\n2 3\n//right answer : YES 0\n//=====\n4\n1\n3 30\n6\n1 4\n3 2\n3 4\n4 1\n4 2\n4 3\n//right answer : YES 30\n*/\n```",
        "postTime": 1485217890,
        "uid": 12498,
        "name": "Invrise",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u672c\u4eba\u80fd\u5199\u7684Pascal\u4ee3\u7801\u4e0d\u591a\u4e86\uff0c\u8fd9\u4e2a\u9898\u89e3\u5f53\u505a\u7eaa\u5ff5\u5427\u3002\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u4e9b\u70b9\uff0c\u518d\u6307\u5b9a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u70b9\u5e76\u52a0\u4e0a\u6743\u503c\uff0c\u95ee\u662f\u5426\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u4ece\u6307\u5b9a\u7684\u70b9\u4e2d\u7684\u67d0\u51e0\u4e2a\u70b9\u5f00\u59cb\u5bf9\u56fe\u904d\u5386\uff0c\u80fd\u628a\u6574\u4e2a\u56fe\u904d\u5386\u5b8c\uff0c\u5e76\u4e14\u6743\u503c\u6700\u5c0f\u3002\n\n\u5bf9\u4e8e\u6253\u51faNO\u7684\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff1a\u4ee5\u6bcf\u4e2a\u6307\u5b9a\u7684\u70b9\u4e3a\u8d77\u59cb\u70b9\u505a\u904d\u5386\uff0c\u6bcf\u5230\u4e00\u4e2a\u65b0\u7684\u70b9\u5c31\u628a\u8ba1\u6570\u5668+1\uff0c\u6700\u540e\u6bd4\u4e00\u4e0b\u8ba1\u6570\u5668\u6570\u503c\u4e0en\u7684\u5927\u5c0f\u5373\u53ef\uff0c\u5982\u679c\u6253\u51faNO\u5219\u518d\u8fdb\u884c\u4e00\u6b21\u7206\u626b\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5904\u7406\u8ba1\u6570\u5668\u5927\u5c0f\u7b49\u4e8en\uff0c\u5373\u6253\u51faYES\u7684\u5462\uff1f\n\n\u9000\u4e00\u6b65\u601d\u8003\uff0c\u5982\u679c\u8fd9\u4e2a\u6709\u5411\u56fe\u662f\u4e2aDAG\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u91cc\u53ea\u9700\u8981\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u7684\u6743\u503c\u76f8\u52a0\u5373\u53ef\u3002\uff08\u8fd9\u4e00\u5207\u90fd\u5efa\u7acb\u5728\u80fd\u63a7\u5236\u6240\u6709\u95f4\u8c0d\u7684\u57fa\u7840\u4e0a\uff09\n\n\u56e0\u4e3a\u5982\u679c\u4e0d\u9009\u7528\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90a3\u8fd9\u4e9b\u70b9\u5c31\u662f\u65e0\u4eba\u63a7\u5236\u7684\u3002\n\n\u9009\u4e86\u8fd9\u4e9b\u70b9\u4e4b\u540e\uff0c\u56fe\u4e5f\u4e00\u5b9a\u80fd\u88ab\u4ed6\u4eec\u53ca\u4ed6\u4eec\u7684\u5b50\u5b59\u63a7\u5236\uff0c\u5c31\u662f\u8bf4\u5176\u4ed6\u5907\u9009\u7684\u70b9\u4e0d\u7528\u9009\u4e86\u3002\n\n\u90a3\u4e48\u597d\u5427\uff0c\u600e\u4e48\u628a\u4e00\u4e2a\u5e26\u73af\u6709\u5411\u56fe\u53d8\u6210DAG\uff1f\n\n\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6a21\u578b\u5c31\u51fa\u6765\u4e86\u3002\n\n\u672c\u4eba\u91c7\u7528\u7684\u662ftarjan\u7f29\u70b9\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\nvar first,last,money,name,r,temp,fa,dfn,low:array [1..3000] of longint;\n\n```cpp\nmoney1:array [1..3000] of longint;\nb,int:array [1..3000] of boolean;\nnext,en:array [1..8000] of longint;\nn,m,n1,top,ans,i,j,x,y,index,all:longint;\nprocedure inn;\nbegin\n  assign(input,'spy.in');reset(input);\n  assign(output,'spy.out');rewrite(output);\nend;\nprocedure ot;\nbegin\n  close(input);\n  close(output);\nend;//\u4e0d\u8981\u7ba1\u4ed6\u4eec\u3002\nprocedure add(x,y:longint);\nbegin\n  inc(top);\n  if first[x]=0 then first[x]:=top\n  else next[last[x]]:=top;\n  en[top]:=y;\n  last[x]:=top;\nend;//\u90bb\u63a5\u8868\nprocedure search(x:longint);\nvar i:longint;\nbegin\n  if b[x] then exit;\n  inc(top);\n  i:=first[x];\n  b[x]:=true;\n  while i>0 do\n  begin\n    search(en[i]);\n    i:=next[i];\n  end;\nend;//\u56fe\u7684\u904d\u5386\u6a21\u5757\nprocedure push(x:longint);\nbegin\n  inc(top);\n  temp[top]:=x;\nend;\nfunction pop:longint;\nbegin\n  dec(top);\n  exit(temp[top+1]);\nend;\nfunction min(a,b:longint):longint;\nbegin\n  if a<b then exit(a);\n  exit(b);\nend;\nprocedure scc(u:longint);\nvar i,x:longint;\nbegin\n  push(u);\n  int[u]:=true;\n  b[u]:=true;\n  inc(index);\n  dfn[u]:=index;\n  low[u]:=index;\n  i:=first[u];\n  while i>0 do\n  begin\n    if not b[en[i]] then\n    begin\n      scc(en[i]);\n      low[u]:=min(low[u],low[en[i]]);\n    end\n    else\n      if int[en[i]] then\n      low[u]:=min(low[u],dfn[en[i]]);\n    i:=next[i];\n  end;\n  if dfn[u]=low[u] then\n  begin\n    inc(ans);\n    repeat\n      x:=pop;\n      fa[x]:=ans;\n      int[x]:=false;\n    until x=u;\n  end;\nend;//tarjan\u6a21\u5757\uff0c\u4e0d\u77e5\u9053\u7684\u8bdd\u81ea\u5df1\u767e\u5ea6\u3002\nprocedure endl;\nvar i:longint;\nbegin\n  for i:=1 to n do\n    if not b[i] then break;\n  writeln('NO');\n  write(i);\n  ot;\n  halt;\nend;//\u6253NO\u7684\nbegin\n  inn;\n  read(n,n1);\n  fillchar(money,sizeof(money),60);\n  for i:=1 to n1 do\n  begin\n    read(name[i],x);\n    money[name[i]]:=x;\n  end;\n  read(m);\n  for i:=1 to m do\n  begin\n    read(x,y);\n    add(x,y);\n  end;\n  top:=0;\n  for i:=1 to n1 do\n    search(name[i]);\n  if top<n then endl;\n  fillchar(b,sizeof(b),false);\n  top:=0;\n  for i:=1 to n do\n    if not b[i] then scc(i);//tarjan\n  fillchar(money1,sizeof(money1),127);\n  for i:=1 to n do\n  begin\n    money1[fa[i]]:=min(money1[fa[i]],money[i]);\n    j:=first[i];\n    while j>0 do\n    begin\n      if fa[en[j]]<>fa[i] then inc(r[fa[en[j]]]);\n      j:=next[j];\n    end;\n  end;//\u7edf\u8ba1\u5165\u5ea6\u4e0efa\u70b9\u7684\u6743\u503c\u3002\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6743\u503c\u662f\u8fd9\u4e2a\u5206\u91cf\u5185\u5404\u4e2a\u70b9\u6743\u503c\u7684\u6700\u5c0f\u503c\uff08\u56e0\u4e3a\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u80fd\u63a7\u5236\u5206\u91cf\u4e2d\u7684\u5176\u4f59\u6240\u6709\u70b9\uff09\n  for i:=1 to ans do\n    if r[i]=0 then all:=all+money1[i];\n  writeln('YES');\n  write(all);\n  ot;\nend.\n```",
        "postTime": 1483768015,
        "uid": 13940,
        "name": "pupuvovovovovo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u5bb6\u90fd\u6253\u7684\u662ftarjan\uff0c\u672c\u667a\u969c\u4e00\u8138\u8ff7\u832b\u3011\u4f4e\u667a\u5546\u7248\u6b63\u89e3\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u88ab\u6536\u4e70\u4e14\u9700\u8981\u6536\u4e70\u7684\u95f4\u8c0ddfs \u641c\u7d22\u5230\u7684\u70b9\u5165\u5ea6\u52a0\u4e00 \u663e\u7136\u88ab\u641c\u5230\u7684\u95f4\u8c0d\u4e0d\u9700\u8981\u6536\u4e70\n\nfor i=1 to n\n\n\u82e5\u6709\u5165\u5ea6\u4e3a\u96f6\u4e14\u4e0d\u53ef\u6536\u4e70\u7684\u70b9\uff0c\u5219NO\n\n\u628a\u9700\u8981\u6536\u4e70\uff08\u5165\u5ea6\u4e3a\u96f6\uff09\u7684\u95f4\u8c0d\u7684\u4ef7\u683c\u52a0\u4e0a\n\n\n```cpp\nvar\n    minm,minn,min,ans,i,n,q,x,y,r,l:longint;\n    a,c,d,e:array[1..3000]of longint;\n    p,w,ww:array[1..3000]of boolean;\n    b:array[1..8000,1..2]of longint;\n    pp:boolean;\nprocedure dfs(x:longint);\nvar l:longint;\nbegin\n    p[x]:=true;ww[x]:=true;\n    l:=a[x];\n    while l<>0 do begin\n        if not ww[b[l,1]] then dfs(b[l,1]);\n        if b[l,1]<>e[i] then inc(d[b[l,1]]);\n        l:=b[l,2];\n    end;\nend;\nbegin\n    readln(n);\n    readln(q);\n    for i:=1 to q do begin\n        readln(e[i],c[e[i]]);\n        w[e[i]]:=true;\n    end;\n    readln(r);\n    for i:=1 to r do begin\n        readln(x,y);\n        inc(l);b[l,1]:=y;b[l,2]:=a[x];a[x]:=l;\n    end;\n    for i:=1 to q do if d[e[i]]=0 then begin\n        fillchar(ww,sizeof(ww),false);\n        dfs(e[i]);\n    end;\n    for i:=1 to n do if not p[i] then begin\n        writeln('NO');\n        writeln(i);\n        exit;\n    end;\n    for i:=1 to q do if d[e[i]]=0 then ans:=ans+c[e[i]];\n    writeln('YES');\n    writeln(ans);\nend.\n\n```",
        "postTime": 1479391032,
        "uid": 29338,
        "name": "Nyl\u767d\u53f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5148\u6765\u5224\u65ad\u662f\u5426\u6709\u89e3\uff1a\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u4ece\u53ef\u4ee5\u88ab\u8d3f\u8d42\u7684\u95f4\u8c0d\u51fa\u53d1\uff1a\n\n\u6211\u4eec\u5c06\u53ef\u4ee5\u88ab\u8d3f\u8d42\u7684\u95f4\u8c0d\u90fd\u5165\u961f\uff0c\u505a\u4e00\u6b21\u5bbd\u641c\uff0c\u5982\u679c\u80fd\u904d\u5386\u5b8c\u6574\u5f20\u56fe(\u8fd9\u4e5f\u662f\u4e3a\u4f55\u8fd9\u9053\u9898\u4f1a\u5728\u56fe\u7684\u904d\u5386\u91cc\u7684\u7f18\u6545\u4e86)\uff0c\u90a3\u5c31\u8bf4\u660e\u6709\u89e3\uff0c\u4e0d\u80fd\u904d\u5386\u5b8c\u90a3\u5c31\u662f\u65e0\u89e3\u4e86\u3001\u3001\u6211\u4eec\u5148\u5199\u4e2a\u5bbd\u641c\uff0c\u5bbd\u641c\u8fd4\u56de\u503c\u5206\u4e24\u7c7b\uff1a\u4e3a\u96f6\uff0c\u4ee3\u8868\u6709\u89e3\uff0c\u4e0d\u4e3a\u96f6\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u4e0d\u80fd\u88ab\u63a7\u5236\u7684\u95f4\u8c0d\u7f16\u53f7\uff1a\n\n```cpp\nint BFS ()\n{\n    queue <int> q;\n    for (int i = 1;i<=P;i++)\n    {\n        q.push (peo[i]);//\u80fd\u88ab\u8d3f\u8d42\u7684\u95f4\u8c0d\n        dfs [peo[i]] = 1;//\u88ab\u8bbf\u95ee\uff0c\u4e5f\u5c31\u662f\u80fd\u5230\u8fbe\n    }\n    while (!q.empty())\n    {\n        int now = q.front ();q.pop();\n        for (int nt = head[now];nt;nt = e[nt].next)//\u8fb9\u8868\n        {\n            int to = e[nt].to;\n            if (dfs[to])continue;\n            dfs [to] = 1;\n            q.push (to);\n        }\n    }\n    for(int i=1;i<=N;i++)if(!dfs[i])return i;//\u603b\u5171\u6709N\u4e2a\u95f4\u8c0d\n    return 0;\n}\n```\n\u5982\u679c\u6709\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5f3a\u8fde\u901a\u7f29\u70b9\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3001\u3001\n\n\u7f29\u6210\u70b9\u540e\uff0c\u6211\u4eec\u5229\u7528\u7f29\u6210\u7684\u70b9\u5efa\u56fe\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u53ea\u9700\u8981\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9(\u7f29\u70b9)\u91cc\u7684\u67d0\u4e2a\u95f4\u8c0d\u4e70\u901a\u5373\u53ef(\u95f4\u8c0d\u5f53\u7136\u662f\u4e70\u901a\u6700\u4fbf\u5b9c\u7684\u554a)\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <string.h>\nusing namespace std;\nstruct edge\n{\n    int to,next;\n}e[8080];\nint head [3030],cnt;\nint N,P,R;\nint peo [8080];\nint cost [8080];\nvoid add (int u,int v)\n{\n    e[++cnt].to = v;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\nint dfs [3030],low[3030],vis[3030],sta[3030],top,ind;\nint blkuai [3030],kc[3030],col;\nint BFS ()\n{\n    queue <int> q;\n    for (int i = 1;i<=P;i++)\n    {\n        q.push (peo[i]);\n        dfs [peo[i]] = 1;\n    }\n    while (!q.empty())\n    {\n        int now = q.front ();q.pop();\n        for (int nt = head[now];nt;nt = e[nt].next)\n        {\n            int to = e[nt].to;\n            if (dfs[to])continue;\n            dfs [to] = 1;\n            q.push (to);\n        }\n    }\n    for(int i=1;i<=N;i++)if(!dfs[i])return i;\n    return 0;\n}\nvoid tarjan (int id)//\u8fd9\u4e2a\u662f\u6a21\u677f\u4e86\u3001\u3001\n{\n    dfs[id] = low[id] = ++ind;\n    sta[++top] = id;\n    vis[id] = 1;\n    for (int nt = head [id];nt;nt = e[nt].next)\n    {\n        int to = e[nt].to;\n        if (!dfs[to])\n        {\n            tarjan (to);\n            low[id] = min (low[id],low[to]);\n        }\n        else if (vis[to])\n        {\n            low [id] = min (low[id],dfs [to]);\n        }\n    }\n    int kk;\n    if (dfs[id] == low[id])\n    {\n        col++;\n        do\n        {\n            kk = sta [top--];\n            blkuai [kk] = col;//\u8bb0\u5f55\u6539\u70b9\u5c5e\u4e8e\u67d0\u4e2a\u5f3a\u8fde\u901a\n            vis[kk] = 0;\n        }while (kk!=id);\n    }\n    return;\n}\nint in[3030];//\u67d0\u70b9\u5165\u5ea6\nvoid solve ()\n{\n    memset (dfs,0,sizeof (dfs));\n    for (int i = 1;i<=N;i++)\n    {\n        if (!dfs[i])tarjan (i);//\u5bf9\u5168\u56fe\u90fd\u8dd1\u4e00\u904d\n    }\n    for (int i = 1;i<=N;i++)\n    {\n        for (int nt = head[i];nt;nt = e[nt].next)\n        {\n            int to = e[nt].to;\n            if (blkuai[i] != blkuai[to])\n            {\n                in[blkuai[to]]++;//\u6c42\u5165\u5ea6\n            }\n        }\n    }\n    memset (kc,11,sizeof (kc));\n    for (int i = 1;i<=P;i++)\n    {\n        kc[blkuai[peo[i]]] = min (kc[blkuai[peo[i]]],cost[i]);//\u6c42\u67d0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\u540e\u7684\u6700\u5c0f\u82b1\u8d39\n    }\n    int sum=0;\n    for (int i = 1;i<=col;i++)\n    {\n        if (in[i] == 0)//\u53ea\u9700\u4e70\u901a\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u4e2d\u7684\u67d0\u4e2a\u95f4\u8c0d\n        {\n            sum += kc[i];\n        }\n    }\n    cout <<\"YES\"<<endl;\n    cout <<sum<<endl;\n    return;\n}\nint main ()\n{\n    ios::sync_with_stdio(false);//\u52a0\u5feb\u8f93\u5165\u8f93\u51fa\u901f\u5ea6..\n    cin >>N>>P;\n    for (int i = 1;i<=P;i++)\n        cin >>peo[i]>>cost[i];\n    cin >>R;\n    int u,v;\n    for (int i = 1;i<=R;i++)\n    {\n        cin >>u>>v;\n        add (u,v);\n    }\n    int ans = BFS();\n    if (ans)\n    {\n        cout <<\"NO\"<<endl<<ans<<endl;\n        return 0;\n    }\n    solve();\n    return 0;\n}\n```",
        "postTime": 1478073533,
        "uid": 12941,
        "name": "\u8ff7\u5931\u4e4b\u591c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u5f3a\u8fde\u901a\u4e00\u53d1+\u62d3\u6251\u6392\u5e8f\uff08DP\uff09\uff0c\u8981\u8bb0\u8f7d\u4e00\u4e2a\u5206\u91cf\u5185\u70b9\u6743\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u7136\u540etop\\_sort(),\u5728\u62d3\u6251\u7684\u8fc7\u7a0b\u4e2dDP\u6c42\u51fa\u6765\u5c31\u662f\u4e86\uff0c\u4e3b\u8981\u8003\u5bdf\u4ee3\u7801\u719f\u7ec3\u5ea6\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>V[3005];\nvector<int>rV[3005];\nvector<int>e;\nbool vis[3005];\nint val[3005]={0};\nint kind[3005];\nvector<int>scc[3005];\nvector<int>tj[100005];\nint scc_val[3005];\nint rd[3005];\nbool cat[3005];\nint n,p,r,cmp=0;\nint ans=0;\nvoid dfs(int v)\n{\n    vis[v]=1;\n    for(int i=V[v].size()-1;i>=0;i--)\n    {\n        int k=V[v][i];\n        if(!vis[k])\n        {\n            dfs(k);\n        }\n    }\n    e.push_back(v);\n}\nvoid rdfs(int v)\n{\n    vis[v]=1;\n    kind[v]=cmp;\n    for(int i=rV[v].size()-1;i>=0;i--)\n    {\n        int k=rV[v][i];\n        if(!vis[k])\n        {\n            rdfs(k);\n        }\n    }\n    scc[cmp].push_back(v);\n}\nvoid find(int i)\n{\n    for(int j=scc[i].size()-1;j>=0;j--)\n    {\n        int k=scc[i][j];scc_val[i]=min(scc_val[i],val[k]);\n        for(int v=V[k].size()-1;v>=0;v--)\n        {\n            int l=V[k][v];\n            if(kind[k]!=kind[l])\n            {\n                tj[i].push_back(kind[l]);\n                rd[kind[l]]++;\n            }\n        }\n    }\n}\nvoid read() \n{\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&p);\n    memset(val,0x7f,sizeof(val));\n    memset(rd,0,sizeof(rd));\n    memset(scc_val,127/3,sizeof(scc_val));\n    for(int i=1;i<=p;i++)\n    {  int a,b;\n        scanf(\"%d%d\",&a,&b);\n        val[a]=b;\n    }\n    scanf(\"%d\",&r);\n    for(int i=1;i<=r;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        V[a].push_back(b);\n        rV[b].push_back(a);\n    }\n}\nvoid two_dfs()\n{\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        dfs(i);\n    }\n    memset(vis,false,sizeof(vis));\n    for(int w=e.size()-1;w>=0;w--)\n    {\n        int i=e[w];\n        if(!vis[i])\n        {\n            cmp++;\n            rdfs(i);\n        }\n    }\n}\nvoid build()\n{\n    for(int i=1;i<=cmp;i++)\n    {\n        find(i);\n    }\n}\nbool top_sort()\n{\n    stack<int>s;\n    for(int i=1;i<=cmp;i++)\n    {\n        if(!rd[i])\n        {\n            if(scc_val[i]>=scc_val[3001]) continue;\n            else  \n            {\n             s.push(i);         \n             ans+=scc_val[i];\n            }\n        }\n    }\n    while(!s.empty())\n    {\n        int p=s.top();s.pop();\n        cat[p]=true;\n        for(int i=tj[p].size()-1;i>=0;i--)\n        {  int q=tj[p][i];\n            rd[q]--;\n            if(!rd[q])\n            {\n                s.push(q);\n            }\n        }\n    }\n}\nvoid outit()\n{\n    int thm=999999;\n    bool ok=true;\n    for(int i=1;i<=cmp;i++)\n    {\n        if(!cat[i])\n        {\n            for(int j=scc[i].size()-1;j>=0;j--)\n            {\n                int k=scc[i][j];\n                if(val[k]>=val[3001])\n                thm=min(thm,k);\n                ok=false;\n            }\n        }\n    }\n    if(ok)\n    {\n        printf(\"YES\\n\");\n        cout<<ans<<endl;\n    }\n    else{\n        printf(\"NO\\n\");\n        printf(\"%d\\n\",thm);\n    }\n}\nint main()\n{\n    read();\n    two_dfs();\n    build();\n    top_sort();\n    outit();\n}\n```",
        "postTime": 1476409848,
        "uid": 14410,
        "name": "Ghost_lzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u9996\u5148BFS\u6c42\u51fa\u662f\u5426\u6709\u70b9\u4e0d\u80fd\u88ab\u8bbf\u95ee \u82e5\u6709\u5219\u663e\u7136\u8fd9\u4e2a\u95f4\u8c0d\u4e0d\u80fd\u88ab\u63a7\u5236\n\n\u7136\u540e\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u95ee\u9898 \u5bf9\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6211\u4eec\u8d2a\u5fc3\u7684\u9009\u53d6\u5176\u4e2d\u82b1\u8d39\u6700\u5c0f\u7684\u70b9\u7edf\u8ba1\u7b54\u6848\n\n\u6700\u7ec8\u7b54\u6848\u4e3a\u5165\u5ea6\u4e3a0\u7684\u70b9\u7684\u82b1\u8d39\u548c\n\n\u4e0d\u5f97\u4e0d\u8bf4\u4ee3\u7801\u91cf\u8fd8\u633a\u5927...\n\n\u6709\u4e00\u70b9\u8981\u6ce8\u610f \u8fb9\u7684\u6570\u91cf\u5e94\u8be5\u662fn << 1\u800c\u4e0d\u662f\u548cn\u540c\u6837\u5927\u5c0f\uff0c60\u5206\u7684\u5927\u591a\u6570\u662f\u8fb9\u8868\u6ca1\u5f00\u591f\u5427...\n\n\u8fb9\u8868\u5199\u6cd5\u4e3a\u94fe\u5f0f\u524d\u5411\u661f \u76f8\u6bd4vector\u6709\u8089\u773c\u53ef\u89c1\u7684\u5e38\u6570\u4f18\u52bf..\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nconst int MAXN = 3000 + 10;\n\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-') f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}\n    return x * f;\n}\n\nstruct node { int to, next; }edge[MAXN << 1];\nint head[MAXN], n, r, p;\nint money[MAXN], ans, cnt;\nbool vis[MAXN];\nqueue<int> q;\nstack<int> S;\n\ninline void addedge(int u, int v) {\n    edge[++cnt].to = v; edge[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nvoid bfs() {\n    while(!q.empty()) {\n        int u = q.front(); q.pop();\n        vis[u] = true;\n        for(int i = head[u]; i; i = edge[i].next) {\n            int v = edge[i].to;\n            if(!vis[v]) {\n                vis[v] = true;\n                q.push(v);\n            }\n        }\n    }\n    for(int i = 1; i <= n; ++i) if(!vis[i]) {\n        puts(\"NO\"); printf(\"%d\\n\", i);\n        exit(0);\n    }\n}\n\nint pre[MAXN], lowlink[MAXN], sccno[MAXN];\nint scc_cnt, dfs_clock, in0[MAXN], best[MAXN];\n\nvoid dfs(int u) {\n    pre[u] = lowlink[u] = ++dfs_clock;\n    S.push(u);\n    for(int i = head[u]; i; i = edge[i].next) {\n        int v = edge[i].to;\n        if(!pre[v]) {\n            dfs(v);\n            lowlink[u] = min(lowlink[u], lowlink[v]);\n        }\n        else if(!sccno[v]) {\n            lowlink[u] = min(lowlink[u], pre[v]);\n        }\n    }\n    if(lowlink[u] == pre[u]) {\n        scc_cnt++;\n        if(!best[scc_cnt]) best[scc_cnt] = inf;\n        for(;;) {\n            int x = S.top(); S.pop();\n            best[scc_cnt] = min(best[scc_cnt], money[x]);\n            sccno[x] = scc_cnt;\n            if(x == u) break;\n        }\n    }\n}\n\nvoid tarjan() { \n    dfs_clock = scc_cnt = 0;\n    memset(sccno, 0, sizeof(sccno));\n    memset(pre, 0, sizeof(pre));\n    memset(best, 0, sizeof(best));\n    for(int i = 1; i <= n; ++i) \n        if(!pre[i]) dfs(i); \n}\n\nvoid work() {\n    for(int i = 1; i <= scc_cnt; ++i) in0[i] = 1;\n    for(int i = 1; i <= n; ++i)\n        for(int j = head[i]; j; j = edge[j].next) {\n            int v = edge[j].to;\n            if(sccno[i] != sccno[v]) in0[sccno[v]] = 0;\n        }\n    for(int i = 1; i <= scc_cnt; ++i)\n        if(in0[i]) ans += best[i];\n}\n\nint main() {\n    n = read(), p = read();\n    memset(money, inf, sizeof(money));\n    for(int i = 1, x, y; i <= p; ++i) {\n        x = read(), y = read();\n        money[x] = y; q.push(x);\n    }\n    r = read();\n    for(int i = 1, u, v; i <= r; ++i) {\n        u = read(), v = read();\n        addedge(u, v);\n    }\n    bfs(); tarjan(); work();\n    puts(\"YES\"); printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1476238324,
        "uid": 18480,
        "name": "Sci_M3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u601d\u8def\u697c\u4e0a\u524d\u8f88\u4eec\u5df2\u7ecf\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u6765\u8865\u5145\u4e00\u79cd\u4e0d\u7528BFS\u76f4\u63a5\u6c42\u5f3a\u8fde\u901a\u7684\u5199\u6cd5\uff0c\u4e3b\u8981\u601d\u8def\u5c31\u662f\u5728tarjan\u4e2d\u7edf\u8ba1\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6700\u5c0f\u8d39\u7528\u7684\u540c\u65f6\u7edf\u8ba1\u51fa\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\uff0c\u5f53\u60c5\u51b5\u4e3aNO\u65f6\u53ea\u8981\u8f93\u51fa\u6240\u6709\u4e0d\u80fd\u8d2d\u4e70\u4e14\u5165\u5ea6\u4e3a0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u7684\u6700\u5c0f\u503c\u5c31\u884c\u4e86~\n\n```cpp\n\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <stack>\n\nusing namespace std;\n\nint n,p;\n\nint buy[3001],pre[3001]={0},lowlink[3001],sccno[3001]={0},cost[3001]={0};\nint sccrd[3001]={0},scclow[3001];\n\nvector <int> e[3001];\n\nint dfs_clock=0,scc_cnt=0;\n\nstack <int> s;\n\nvoid dfs(int x)\n{\n    pre[x]=lowlink[x]=++dfs_clock;//tarjan\u6a21\u677f\uff0c\u4e0d\u53e8\u53e8\u3002\u3002\n    s.push(x);\n    for(int i=0;i<e[x].size();i++)\n    {\n        int u=e[x][i];\n        if(!pre[u])\n        {\n            dfs(u);\n            lowlink[x]=min(lowlink[x],lowlink[u]);\n        }\n        else if(!sccno[u])\n        {\n            lowlink[x]=min(lowlink[x],pre[u]);\n        } \n    }\n    if(lowlink[x]==pre[x])\n    {\n        ++scc_cnt;\n        while(1)\n        {\n            int t=s.top();s.pop();\n            sccno[t]=scc_cnt;\n            if(buy[t]!=-1)cost[scc_cnt]=min(cost[scc_cnt],buy[t]);//\u8fd9\u91cc\u7edf\u8ba1\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u8d2d\u4e70\u8d39\u7528\n            scclow[scc_cnt]=min(scclow[scc_cnt],t);//\u8fd9\u91cc\u7edf\u8ba1\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\n            if(t==x)break;\n        }\n    }\n}\n\nint main()\n{\n    memset(buy,-1,sizeof(buy));\n    memset(cost,0x7f,sizeof(cost));\n    memset(scclow,0x7f,sizeof(scclow));\n    int pd=cost[0];\n    scanf(\"%d%d\",&n,&p);\n    for(int i=1;i<=p;i++)\n    {\n        int t1,t2;\n        scanf(\"%d%d\",&t1,&t2);\n        buy[t1]=t2;\n    }\n    int r;\n    scanf(\"%d\",&r);\n    for(int i=1;i<=r;i++)\n    {\n        int t1,t2;\n        scanf(\"%d%d\",&t1,&t2);\n        e[t1].push_back(t2);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n        {\n            dfs(i);\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=0;j<e[i].size();j++)\n        {\n            if(sccno[i]!=sccno[e[i][j]])\n            {\n                sccrd[sccno[e[i][j]]]++;\n            }\n        }\n    }\n    int ans=0,b=1,ans2=pd;\n    for(int i=1;i<=scc_cnt;i++)\n    {\n        if(!sccrd[i])\n        {\n            if(cost[i]!=pd)ans+=cost[i];//\u663e\u7136\u5f53\u67d0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u8d2d\u4e70\u8d39\u7528\u7b49\u4e8e\u521d\u59cb\u503c\u65f6\uff0c\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u65e0\u6cd5\u88ab\u8d2d\u4e70\n            else\n            {\n                b=0;\n                ans2=min(ans2,scclow[i]);\n            }\n        }\n    }\n    if(b)printf(\"YES\\n%d\",ans);\n    else printf(\"NO\\n%d\",ans2);\n    return 0;\n}\n\n```",
        "postTime": 1466678318,
        "uid": 14815,
        "name": "crowworks695",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u4e00\u9053\u8fde\u901a\u5206\u91cf \u4e3a\u4e86\u597d\u5199 \u6211\u4eec\u5148bfs\u4e00\u6b21\u5224\u65ad\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5 \u76f4\u63a5\u8f93\u51fa \u7136\u540etarjan\u7f29\u70b9 scc\\_cnt\u4ee3\u8868\u7f29\u70b9\u540e\u7684\u7f16\u53f7 \u7136\u540e\u901a\u8fc7\u67e5\u627e\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\uff08\u4ee3\u8868\u539f\u6765\u7684\u4e00\u6bb5\u8fde\u901a\u5206\u91cf\uff09 \u8fd9\u4e9b\u70b9\u5fc5\u987b\u8d3f\u8d42 \u8bb0\u8d77\u6765\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u4e86 \u770b\u4e0b\u9762\u5168\u662fp\u515a\u7684 \u6211\u6765\u586bC++\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<vector>\n#include<cstdlib>\n#include<stack>\n#define maxn 3002\nusing namespace std;\nint N,M,R,money[maxn];\nvector<int >son[maxn];\nqueue<int>q;\nstack<int>Stack;\nint bfs_vis[maxn];\nint ans;\nvoid bfs(){\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        bfs_vis[x]=1;\n        for(int i=0;i<son[x].size();i++){\n            int y=son[x][i];\n            if(!bfs_vis[y]){\n                bfs_vis[y]=1;\n                q.push(y);\n            }\n        }\n    }\n    for(int i=1;i<=N;i++){\n        if(!bfs_vis[i]){\n            printf(\"NO\\n\");\n            printf(\"%d\",i);\n            exit(0);\n        }\n    }\n}\nint dfn[maxn],low[maxn],TIME,best[maxn],sccno[maxn],scc_cnt;\nvoid tarjan(int u){\n    dfn[u]=low[u]=++TIME;\n    Stack.push(u);\n    for(int i=0;i<son[u].size();i++){\n        int y=son[u][i];\n        if(!dfn[y]){\n            tarjan(y);\n            low[u]=min(low[u],low[y]);\n        }\n        else if(!sccno[y])low[u]=min(low[u],dfn[y]);\n    }\n    if(low[u]==dfn[u]){\n        scc_cnt++;\n        if(!best[scc_cnt])best[scc_cnt]=1e9;\n        int y;\n        for(;;){\n            int v=Stack.top();Stack.pop();\n            best[scc_cnt]=min(best[scc_cnt],money[v]);\n            sccno[v]=scc_cnt;\n            if(v==u)break;\n        }\n    }\n}\nint in0[maxn];\nvoid work(){\n    for(int i=1;i<=scc_cnt;i++)in0[i]=1;\n    for(int i=1;i<=N;i++){\n        for(int j=0;j<son[i].size();j++){\n            int v=son[i][j];\n            if(sccno[i]!=sccno[v])in0[sccno[v]]=0;\n        }\n    }\n    for(int i=1;i<=scc_cnt;i++){\n        if(in0[i])ans+=best[i];\n    }\n}\nint used_vis[maxn];\nint main(){\n    scanf(\"%d%d\",&N,&M);\n    for(int i=1;i<=N;i++)money[i]=1e9;\n    for(int i=1;i<=M;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        money[a]=b;\n        q.push(a);\n    }\n    scanf(\"%d\",&R);\n    for(int i=1;i<=R;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b); \n        son[a].push_back(b);\n    }\n    bfs();\n    for(int i=1;i<=N;i++){\n        if(!dfn[i])tarjan(i);\n    }\n    work();\n    printf(\"YES\\n\");\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1465185198,
        "uid": 18431,
        "name": "intruder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c45\u7136\u653e\u5728\u56fe\u7684\u904d\u5386\u91cc\u2026\u2026\n\n<hr>\n\u8fd9\u9053\u9898\u4e3b\u8981\u7528\u5230\u7684\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u9996\u5148\u5148\u5bf9\u6bcf\u4e2a\u540c\u610f\u53d7\u8d3f\u7684\u4ebaBFS\u4e00\u904d\uff0c\u5224\u65ad\u4e00\u4e0b\u5982\u679c\u6709\u4eba\u6ca1\u88abBFS\u5230\u5c31\u8f93\u51faNO\n\n\u7136\u540e\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u9700\u8981\u4ed8\u51fa\u7684\u94b1\u662f\u672c\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u4ef7\u683c\u6700\u5c11\u7684\u90a3\u4e2a\u3002\n\n\u6700\u540e\u7b54\u6848\u4e3a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u7684\u4ef7\u683c\u4e4b\u548c\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\uff1aO(n) \uff08\u5176\u5b9e\u5e38\u6570\u633a\u5927\uff09\n\n\uff08\u672c\u4ee3\u7801\u4f7f\u7528\u4e86c++\u7684vector\uff0c\u8f83\u7701\u7a7a\u95f4\uff09\n\n[/color][codec ]\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <iomanip>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <vector>\n#define INF 2147483647\n#define ll long long\n#define PI 3.14159265358979323846\n#define MO 1000000007\nusing namespace std;\n//num\u662f\u51fa\u5ea6\uff1bpr\u662f\u4ef7\u683c\uff0c\u4e0d\u80fd\u8d3f\u8d42\u5219\u4e3aINF\uff1bused\u7528\u4e8e\u5224\u65ad\u662f\u5426\u88ab\u641c\u7d22\u5230\uff1bnum2\u662f\u5165\u5ea6\uff1bv\u548cf\u5206\u522b\u8bb0\u5f55\u51fa\u8fb9\u548c\u5165\u8fb9\nstruct sth\n{\nint num,pr,used,num2;\nvector <int> v;\nvector <int> f;\n}pe[3010],npe[3010];\nint n,p,r,w,t,st,en,inde,ans;\nint l[10000],dfn[3010],low[3010],bac[3010];\nint ins[3010];\nbool found;\n//\u5feb\u901f\u8bfb\u5165\ninline int read()\n{\nint x=0,f=1;char ch=getchar();\nwhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\nwhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\nreturn x*f;\n}\n//\u5224NO\u7684BFS\nvoid make(int x)\n{\nfor (int i=0;i<pe[x].num;i++)\nif (!pe[pe[x].v[i]].used)\n{\npe[pe[x].v[i]].used=true;\nen++;\nl[en]=pe[x].v[i];\n}\n}\n//\u5f3a\u8fde\u901a\u5206\u91cf\nvoid tarjan(int x)\n{\nins[x]=1;\nlow[x]=dfn[x]=++inde;\nfor (int i=0;i<pe[x].num;i++)\nif (!dfn[pe[x].v[i]])\n{\ntarjan(pe[x].v[i]);\nen++;\nl[en]=pe[x].v[i];\nlow[x]=min(low[x],low[pe[x].v[i]]);\n}\nelse if (ins[pe[x].v[i]]==1)\n{\nlow[x]=min(low[x],dfn[pe[x].v[i]]);\n}\n}\nint main()\n{\nn=read(),p=read();\nfor (int i=1;i<=n;i++)\npe[i].pr=INF;\nfor (int i=1;i<=p;i++)\n{\nw=read();\npe[w].pr=read();\n}\nr=read();\n//\u4f7f\u7528vector\u52a0\u8fb9\nfor (int i=1;i<=r;i++)\n{\nw=read(),t=read();\npe[w].num++;\npe[w].v.push_back(t);\npe[t].num2++;\npe[t].f.push_back(w);\n}\nfor (int i=1;i<=n;i++)\nif (pe[i].pr<INF)\n{\npe[i].used=true;\nst=0,en=0,l[0]=i;\nwhile (st<=en)\n{\nmake(l[st]);\nst++;\n}\n}\nfor (int i=1;i<=n;i++)\nif (!pe[i].used)\n{\nprintf(\"NO\\n%d\",i);\nreturn 0;\n}\nfor (int i=1;i<=n;i++)\nif (!ins[i]) \n{\nst=0,en=0,l[0]=i;\ntarjan(i);\nfor (int j=0;j<=en;j++)\nbac[dfn[l[j]]]=l[j];\nfor (int j=0;j<=en;j++)\n{\n//\u7f29\u70b9\nif (dfn[l[j]]!=low[l[j]])\n{\nint fr=l[j],to=bac[low[l[j]]];\npe[to].pr=min(pe[to].pr,pe[fr].pr);\npe[fr].used=false;\npe[to].num+=pe[fr].num;\nfor (int k=0;k<pe[fr].num;k++)\npe[to].v.push_back(pe[fr].v[k]);\npe[to].num2+=pe[fr].num2;\nfor (int k=0;k<pe[fr].num2;k++)\npe[to].f.push_back(pe[fr].f[k]);\n}\nins[l[j]]=2;\n}\n}\n//\u53bb\u65e0\u7528\u8fb9\u53ca\u81ea\u73af\nfor (int i=1;i<=n;i++)\nif (pe[i].used)\n{\nfor (int j=0;j<pe[i].num;j++)\nif (pe[pe[i].v[j]].used&&pe[i].v[j]!=i)\n{\nnpe[i].num++;\nnpe[i].v.push_back(pe[i].v[j]);\n}\nfor (int j=0;j<pe[i].num2;j++)\nif (pe[pe[i].f[j]].used&&pe[i].f[j]!=i)\n{\nnpe[i].num2++;\nnpe[i].f.push_back(pe[i].f[j]);\n}\nnpe[i].pr=pe[i].pr;\nnpe[i].used=true;\n}\nfor (int i=1;i<=n;i++)\nif (npe[i].used&&!npe[i].num2) ans+=npe[i].pr;\nprintf(\"YES\\n%d\",ans);\nreturn 0;\n}\n[/codec ]\n```",
        "postTime": 1460377339,
        "uid": 9433,
        "name": "FlierKing",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    },
    {
        "content": "\u9996\u5148\u6838\u5fc3\u7b97\u6cd5\u6beb\u65e0\u7591\u95ee\u662ftarjan\uff0c\u8dd1tarjan\u7684\u65f6\u5019\u987a\u4fbf\u66f4\u65b0\u6574\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u7684\u4ef7\u503c\u3002\n\n\u67e5\u627e\u662f\u5426\u6709\u89e3\u4e0d\u9700\u8981\u904d\u5386\u5168\u56fe\uff0c\u53ea\u8981\u5728\u5efa\u56fe\u7684\u65f6\u5019\u7edf\u8ba1\u539f\u56fe\u7684\u5165\u5ea6\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u5165\u5ea6\u4e3a0\u5e76\u4e14\u6539\u70b9\u7684\u4ef7\u503c\u4e5f\u4e3a0\uff08\u4e5f\u5c31\u662f\u8bf4\u65e2\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4eba\u63ed\u9732\u4e5f\u4e0d\u53d7\u8d3f\u8d42\uff09\uff0c\u90a3\u4e48\u8fd9\u5f20\u56fe\u65e0\u89e3\uff08\u56e0\u4e3a\u6c38\u8fdc\u65e0\u6cd5\u5f97\u5230\u8fd9\u4e2a\u4eba\u7684\u60c5\u62a5\uff09\n\n\u4e4b\u540e\u641c\u7d22\u7684\u65f6\u5019\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\u5f00\u59cb\u641c\u7d22\u3002\u56e0\u4e3a\u5165\u5ea6\u4e3a0\u7684\u70b9\u4e00\u5b9a\u662f\u6709\u4ef7\u503c\u7684\u70b9\uff0c\u5426\u5219\u8fd9\u5f20\u56fe\u65e0\u89e3\u3002\n\n\u8fd9\u79cd\u7b97\u6cd5\u6709\u4e00\u4e2a\u7f3a\u70b9\uff0c\u5c31\u662f\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u8fb9\u6307\u5411\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u5219\u56e0\u4e3a\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8ba1\u7b97\uff0c\u9700\u8981\u5728\u7ed3\u5c3e\u7279\u6b8a\u5904\u7406\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u6240\u6709\u5165\u5ea6\u4e3a0\u4e14\u6709\u4ef7\u503c\u7684\u70b9\u7684\u4ef7\u503c\u90fd\u662f\u5fc5\u987b\u7684\u3002\n\n```pascal\nConst\n    MAX=3000;\n    MAXE=8000;\nVar\n    n,p,i,j,t,cnt,tot,a,b,r,top,time,ans:longint;\n    flag,flag2:array[1..MAX] of integer;\n    list,toit,next,low,dfn,stack,refer,v,newv,indegree,newindegree:array[1..MAXE] of longint;\nFunction min(a,b:longint):longint;\n    begin\n        if a<b then exit(a);\n        exit(b);\n    end;\nProcedure add(u,v1:longint);\n    begin\n        inc(cnt);\n        toit[cnt]:=v1;\n        inc(indegree[v1]); \n        next[cnt]:=list[u];\n        list[u]:=cnt;\n    end;\nProcedure dfs(now:longint);\n    var\n        w:longint;\n    begin\n        flag[now]:=1;\n        inc(top);\n        stack[top]:=now;\n        inc(time);\n        dfn[now]:=time;\n        low[now]:=time;\n        w:=list[now];\n        while w<>0 do begin\n            if flag[toit[w]]=0 then dfs(toit[w]);\n            if flag[toit[w]]<2 then low[now]:=min(low[now],low[toit[w]]);\n            w:=next[w];\n        end;\n        if dfn[now]=low[now] then begin\n            inc(tot);\n            while stack[top+1]<>now do begin\n                refer[stack[top]]:=tot;\n                newindegree[tot]:=newindegree[tot]+indegree[stack[top]];\n                if (newv[tot]=0) and (v[stack[top]]<>0) then newv[tot]:=v[stack[top]] else\n                    if v[stack[top]]<>0 then newv[tot]:=min(newv[tot],v[stack[top]]);\n                flag[stack[top]]:=2;\n                dec(top);\n            end;\n        end;\n    end;\nProcedure dfs2(now:longint);\n    var\n        w:longint;\n    begin\n        flag[refer[now]]:=1; //\u6807\u8bb0\u5f53\u524d\u6240\u8bbf\u95ee\u7684\u70b9\u6240\u5904\u7684\u5f3a\u8054\u901a\u5206\u91cf\n        flag2[now]:=1; //\u6807\u8bb0\u5f53\u524d\u70b9\u672c\u8eab\n        w:=list[now];\n        while w<>0 do begin\n            if flag2[toit[w]]=0 then dfs2(toit[w]); //\u5982\u679c\u6307\u5411\u7684\u70b9\u6ca1\u6709\u88ab\u62d3\u5c55\u8fc7\u5219\u7ee7\u7eed\u62d3\u5c55\n            w:=next[w];\n        end;\n    end;\nBegin\n    readln(n);\n    readln(p);\n    for i:=1 to p do begin\n        read(t);\n        readln(v[t]); //\u8bfb\u5165\u4ef7\u503c\n    end;\n    readln(r);\n    for i:=1 to r do begin\n        readln(a,b);\n        add(a,b);\n    end;\n    for i:=1 to n do\n        if (v[i]=0) and (indegree[i]=0) then begin //\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u4e0d\u5177\u6709\u4ef7\u503c\u5e76\u4e14\u5165\u5ea6\u4e3a0\u5219\u8be5\u70b9\u65e0\u6cd5\u88ab\u8bbf\u95ee\n            writeln('NO');\n            writeln(i);\n            halt;\n        end;\n    fillchar(flag,sizeof(flag),0);\n    for i:=1 to n do\n        if dfn[i]=0 then dfs(i);\n    fillchar(flag,sizeof(flag),0);\n    fillchar(flag2,sizeof(flag2),0);\n    for i:=1 to n do\n        if (indegree[i]=0) then begin //\u4ece\u6709\u4ef7\u503c(\u53ef\u4ee5\u88ab\u8d3f\u8d42)\u4e14\u5165\u5ea6\u4e3a0\u7684\u70b9(\u4e0d\u80fd\u901a\u8fc7\u5176\u4ed6\u4eba\u83b7\u5f97\u8fd9\u4e2a\u4eba\u7684\u60c5\u62a5)\u65f6\u624d\u4ece\u8fd9\u4e2a\u4eba\u5f00\u59cb\u641c\u7d22\n            if flag[refer[i]]=0 then ans:=ans+newv[refer[i]]; //\u53ea\u6709\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u65f6\u624d\u66f4\u65b0\u7b54\u6848\n            dfs2(i); //\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u641c\u7d22\n        end;\n    for i:=1 to n do\n        if (flag2[i]=0) and (newv[refer[i]]<>0) then begin //\u627e\u5230\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u70b9\n                dfs2(i); //\u53d1\u73b0\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u5f3a\u8054\u901a\u5206\u91cf\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u4f46\u662f\u5177\u6709\u4ef7\u503c\uff0c\u8bf4\u660e\u8be5\u5f3a\u8054\u901a\u5206\u91cf\u672a\u88ab\u641c\u7d22\u8fc7\n                ans:=ans+newv[refer[i]];\n        end;\n    writeln('YES');\n    writeln(ans);\nEnd. \u3010code\u3011\n```",
        "postTime": 1478575447,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1262 \u3010\u95f4\u8c0d\u7f51\u7edc\u3011"
    }
]