[
    {
        "content": "\u533a\u95f4\u64cd\u4f5c\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u9700\u8981\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u7a7a\u623f\u7684\u6570\u91cfsum\uff0c\u4f46\u662f\u53ea\u7ef4\u62a4\u8fd9\u4e00\u4e2a\u503c\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5f53\u6211\u4eec\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u65f6\u6ca1\u6cd5\u76f4\u63a5\u8ba9\u7236\u4eb2\u8282\u70b9\u7684sum\u7b49\u4e8e\u4e24\u4e2a\u513f\u5b50\u7684sum\u548c\uff0c\u6bd4\u5982\u5de6\u513f\u5b50\u57281~4\u4e2d\u6709\u4e09\u4e2a\u8fde\u7eed\u7a7a\u623f1\u30012\u30013\uff0c\u53f3\u513f\u5b50\u57285~8\u4e2d\u6709\u4e09\u4e2a\u8fde\u7eed\u7a7a\u623f6\u30017\u30018\uff0c\u8fd9\u65f6\u7236\u4eb2\u7684sum\u663e\u7136\u4e0d\u7b49\u4e8e6\u800c\u7b49\u4e8e3\u3002\n\n\u56e0\u6b64\u5728\u65b0\u5efa\u7ebf\u6bb5\u6811\u65f6\u9700\u8981\u7ef4\u62a4\u5982\u4e0b\u4fe1\u606f\uff08\u61d2\u6807\u8bb0\u4f1a\u5728\u4e0b\u9762\u7684\u533a\u95f4\u4fee\u6539\u4e2d\u7528\u5230\uff09\uff1a\n```cpp\nstruct Segment_Tree{\n\tint sum;//\u533a\u95f4\u6700\u5927\u8fde\u7eed\u7a7a\u623f\u6570\n\tint len;//\u533a\u95f4\u957f\u5ea6 \n\tint lmax,rmax;//\u4ece\u5de6\u5f00\u59cb\u6216\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u7a7a\u623f\u6570\n\tint lazy;//\u61d2\u6807\u8bb0 \n}t[4*MAXX];\n```\n\n\u7136\u540e\u662f\u5efa\u6811\u8fc7\u7a0b\uff0c\u7ef4\u62a4\u4e0a\u8ff0\u4fe1\u606f\u3002\n```cpp\nvoid build(int p,int l,int r)\n{\n\tt[p].lazy=0;//\u61d2\u6807\u8bb0\u6e05\u96f6\n\tt[p].sum=t[p].len=t[p].lmax=t[p].rmax=r-l+1;\n\t//\u521d\u59cb\u5747\u4e3a\u7a7a\u623f\uff0c\u6240\u4ee5\u8fde\u7eed\u7a7a\u623f\u957f\u5ea6\u90fd\u6574\u4e2a\u533a\u95f4\u957f\u5ea6\n\tif(l==r)return;\n\tint mid=(l+r)/2;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r); \n}\n```\n\u61d2\u6807\u8bb0\u4e0b\u653e\uff1a\n```cpp\nvoid spread(int p)\n{\n\tif(t[p].lazy==0)return;\n    //\u6ca1\u6709\u6807\u8bb0\u76f4\u63a5\u8fd4\u56de\n\tif(t[p].lazy==1){\n    //\u5982\u679c\u8981\u65b0\u5f00\u623f\n\t    t[p*2].lazy=t[p*2+1].lazy=1;\n    //\u4e0b\u653e\u61d2\u6807\u8bb0\n\t\tt[p*2].sum=t[p*2].lmax=t[p*2].rmax=0;\n\t\tt[p*2+1].sum=t[p*2+1].lmax=t[p*2+1].rmax=0;\n    //\u8fd9\u4e00\u6bb5\u533a\u95f4\u6ca1\u6709\u5269\u4f59\u623f\u95f4\n\t}\n\tif(t[p].lazy==2){\n    //\u5982\u679c\u9000\u623f\n\t\tt[p*2].lazy=t[p*2+1].lazy=2;\n\t\tt[p*2].sum=t[p*2].lmax=t[p*2].rmax=t[p*2].len;\n\t\tt[p*2+1].sum=t[p*2+1].lmax=t[p*2+1].rmax=t[p*2+1].len;\n    //\u8fd9\u4e00\u6bb5\u623f\u95f4\u5168\u90e8\u662f\u7a7a\u7684\n\t}\n\tt[p].lazy=0;//\u61d2\u6807\u8bb0\u6e05\u96f6\n}\n```\n\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\uff1a\n```cpp\nvoid renew(int p)\n{\n\tif(t[p*2].sum==t[p*2].len)//\u5de6\u533a\u95f4\u5168\u4e3a\u7a7a\u623f \n\t t[p].lmax=t[p*2].len+t[p*2+1].lmax;\n    //\u90a3\u4e48\u5de6\u533a\u95f4\u5168\u90e8\u53ef\u4f4f\uff0c\u5728\u52a0\u4e0a\u53f3\u533a\u95f4\u4ece\u5de6\u5f00\u59cb\u7684\u6700\u957f\u533a\u95f4\n\telse t[p].lmax=t[p*2].lmax;\n    //\u5426\u5219\u7236\u8282\u70b9\u7684lmax\u7b49\u4e8e\u5de6\u533a\u95f4\u7684lmax\n\tif(t[p*2+1].sum==t[p*2+1].len)//\u53f3\u533a\u95f4\u5168\u4e3a\u7a7a\u623f\uff0c\u540c\u7406\n\t t[p].rmax=t[p*2+1].len+t[p*2].rmax; \n\telse t[p].rmax=t[p*2+1].rmax;\n\tt[p].sum=max(max(t[p*2].sum,t[p*2+1].sum),t[p*2].rmax+t[p*2+1].lmax);\n    //p\u8282\u70b9\u7684sum\u6709\u4e09\u79cd\uff1a\u5168\u5728\u5de6\u8fb9\u7684\uff0c\u5168\u5728\u53f3\u8fb9\u7684\uff0c\u8de8\u8d8a\u5de6\u53f3\u533a\u95f4\u7684\uff0c\u53d6\u4e2amax\u5c31\u597d\u4e86\n} \n```\n\u73b0\u5728\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u5df2\u7ecf\u5b8c\u6210\uff0c\u518d\u770b\u9898\uff0c\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u67e5\u8be2max(sum)\u7684\u5de6\u7aef\u70b9\n\n\u533a\u95f4\u4fee\u6539\uff08\u4fee\u6539\u5206\u4e24\u79cd\uff1a\u9000\u623f\u548c\u5f00\u623f\uff09\uff1a\n```cpp\nvoid change(int p,int l,int r,int tag,int L,int R)\n//tag=1\u4ee3\u8868\u6ca1\u4eba\u4f4f\uff0ctag=2\u4ee3\u8868\u6709\u4eba\u4f4f\uff0c[L,R]\u662f\u8981\u4fee\u6539\u7684\u533a\u95f4 \n{\n\tspread(p);//\u4e0b\u653e\u61d2\u6807\u8bb0\n\tif(L<=l&&r<=R){//\u5982\u679c\u8981\u4fee\u6539\u7684\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u4e86\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4 \n    \tif(tag==1)t[p].sum=t[p].lmax=t[p].rmax=0;\n    //\u5982\u679c\u8981\u5f00\u623f\uff0c\u8fd9\u4e00\u6bb5\u623f\u95f4\u5168\u90e8\u4e0d\u53ef\u7528\n\t\telse t[p].sum=t[p].lmax=t[p].rmax=t[p].len; \n    //\u5982\u679c\u8981\u9000\u623f\uff0c\u8fd9\u4e00\u6bb5\u533a\u95f4\u5168\u90e8\u53ef\u7528\n\t\tt[p].lazy=tag;//\u66f4\u65b0\u61d2\u6807\u8bb0\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(L<=mid)change(p*2,l,mid,tag,L,R);\n\tif(R>mid)change(p*2+1,mid+1,r,tag,L,R);\n    //\u4fee\u6539\u5de6\u53f3\u513f\u5b50\n\trenew(p);//\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\n}\n```\n\u67e5\u8be2\uff1a\n```cpp\nint ask(int p,int l,int r,int length)\n{\n\tspread(p);//\u4e0b\u653e\u61d2\u6807\u8bb0\n\tif(l==r)return l;//\u5982\u679c\u627e\u5230\u5bf9\u5e94\u533a\u95f4\uff0c\u8fd4\u56de\u5de6\u7aef\u70b9\n\tint mid=(l+r)/2;\n\tif(t[p*2].sum>=length)return ask(p*2,l,mid,length);\n    //\u5982\u679c\u5de6\u533a\u95f4\u5373\u53ef\u627e\u5230\u8db3\u591f\u591a\u7684\u623f\u95f4\uff0c\u5c31\u5728\u5de6\u533a\u95f4\u627e\n\tif(t[p*2].rmax+t[p*2+1].lmax>=length)return mid-t[p*2].rmax+1;\n    //\u5982\u679c\u5728\u4e2d\u95f4\u80fd\u627e\u5230\u8db3\u591f\u591a\u7684\u623f\u95f4\uff0c\u7b54\u6848\u5c31\u662f\u5de6\u533a\u95f4\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u533a\u95f4\u7684\u5de6\u7aef\u70b9\n\telse return ask(p*2+1,mid+1,r,length);\n    //\u5426\u5219\u5c31\u5728\u53f3\u8fb9\u627e\n}\n```\n\u6700\u540e\u7684\u4e3b\u51fd\u6570\uff1a\n```cpp\nint main()\n{\n\tn=read();m=read();\n\tbuild(1,1,n);//\u5efa\u6811\n\tfor(int i=1;i<=m;i++) \n\t{\n\t\tint act,x,y;\n\t\tact=read();\n\t\tif(act==1){\n\t\t\tx=read();\n\t\t\tif(t[1].sum>=x){\n        //\u5982\u679c\u5b58\u5728\u8fd9\u4e48\u957f\u7684\u533a\u95f4\u624d\u627e\n\t\t\t\tint left=ask(1,1,n,x);\n\t\t\t\tprintf(\"%d\\n\",left);\n\t\t\t\tchange(1,1,n,1,left,left+x-1);\n                //\u627e\u5230\u4e4b\u540e\u8bb0\u5f97\u4fee\u6539\n\t\t\t}\n\t\t\telse printf(\"0\\n\");//\u5426\u5219\u627e\u4e0d\u5230\n\t\t}\n\t\telse{\n\t\t\tx=read();y=read();\n\t\t\tchange(1,1,n,2,x,x+y-1);//\u9000\u623f\t\n\t\t}\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1527851757,
        "uid": 60120,
        "name": "Chemist",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37P2894\u9152\u5e97"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u90fd\u5199\u5f97\u5f88\u957f\uff0c\u662f\u65f6\u5019\u53d1\u4e00\u7bc7\u4e09\u76ee\u8fd0\u7b97\u7684\u9898\u89e3\u4e86\n\n\u5176\u5b9e\u7b2c\u4e00\u7bc7\u9898\u89e3\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u6765\u8865\u5145\u4e00\u4e0b\uff0c\u7c7b\u4f3c\u6700\u5927\u5b50\u6bb5\u548c\u7684\u505a\u6cd5\uff0c\u5229\u7528$sum$\u8981\u4e48\u5728\u5de6\u533a\u95f4\uff0c\u8981\u4e48\u5728\u53f3\u533a\u95f4\uff0c\u8981\u4e48\u6a2a\u8de8\u4e24\u4e2a\u533a\u95f4\n\n\u4e3a\u4e86\u65b9\u4fbf\u67e5\u770b\uff0c\u6211\u628a\u4e00\u4e2a\u53d8\u91cf\u4e00\u884c\n\n\u8fd9\u662f\u4e00\u4e2a\u7ed3\u70b9\u7684\u4fe1\u606f\n```cpp\nstruct node{\n\tint sum;//\u533a\u95f4\u6700\u957f\u8fde\u7eed\u7a7a\u623f\u7684\u957f\u5ea6\n\tint lmax;//\u4ecel\u7aef\u70b9\u5f00\u59cb\u6700\u957f\u8fde\u7eed\u7a7a\u623f\u7684\u957f\u5ea6\n\tint rmax;//\u4ecer\u7aef\u70b9\u5f00\u59cb\u6700\u957f\u8fde\u7eed\u7a7a\u623f\u7684\u957f\u5ea6\n\tint lazy;//lazy\u4e3a1\u8868\u793a\u9000\u623f\uff0c\u4e3a2\u8868\u793a\u5f00\u623f\n\tint len;//\u533a\u95f4\u957f\u5ea6\uff0c\u8bb0\u5f55\u540e\u65b9\u4fbf\u8ba1\u7b97\n\t#define mid (l+r>>1)\n\t#define lson (rt<<1)\n\t#define rson (rt<<1|1)\n\t#define sum(rt) tree[rt].sum\n\t#define lmax(rt) tree[rt].lmax\n\t#define rmax(rt) tree[rt].rmax\n\t#define lazy(rt) tree[rt].lazy\n\t#define len(rt) tree[rt].len\n}tree[maxn<<2];\n```\n\n\u5f00\u59cb\u5efa\u6811\n```cpp\nvoid build(int l,int r,int rt){\n\tsum(rt)=lmax(rt)=rmax(rt)=len(rt)=r-l+1;\n    //\u521d\u59cb\u90fd\u662f\u7a7a\u623f\n\tif(l == r) return ;\n\tbuild(l,mid,lson);\n\tbuild(mid+1,r,rson);\n}\n```\n\u66f4\u65b0\u7ed3\u70b9\u4fe1\u606f\n```cpp\nvoid pushup(int rt){\n\tlmax(rt)=(lmax(lson)==len(lson))?len(lson)+lmax(rson):lmax(lson);\n    //\u82e5\u5de6\u513f\u5b50\u533a\u95f4\u5168\u7a7a\u90a3\u4e48lmax\u53ef\u4ee5\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50\uff0c\u5426\u5219\u4e0d\u80fd\n\trmax(rt)=(rmax(rson)==len(rson))?len(rson)+rmax(lson):rmax(rson);\n    //\u82e5\u53f3\u513f\u5b50\u533a\u95f4\u5168\u7a7a\u90a3\u4e48rmax\u53ef\u4ee5\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50\uff0c\u5426\u5219\u4e0d\u80fd\n\tsum(rt)=max(rmax(lson)+lmax(rson),max(sum(lson),sum(rson)));\n    //\u6709\u4e09\u79cd\u60c5\u51b5\uff0csum\u5168\u5728\u5de6\u513f\u5b50\uff0c\u5168\u5728\u53f3\u513f\u5b50\uff0c\u6a2a\u8de8\u5de6\u53f3\u513f\u5b50\n}\n```\n\u4e0b\u4f20\u6807\u8bb0\n```cpp\nvoid pushdown(int rt){\n\tif(!lazy(rt)) return ;\n\tlazy(lson)=lazy(rson)=lazy(rt);\n    //\u4e0b\u4f20lazy\u6807\u8bb0\n\tsum(lson)=lmax(lson)=rmax(lson)=(lazy(rt)==1)?len(lson):0;\n\tsum(rson)=lmax(rson)=rmax(rson)=(lazy(rt)==1)?len(rson):0;\n    //lazy\u4e3a1\u8868\u793a\u9000\u623f\uff0c\u4e3a2\u8868\u793a\u5f00\u623f\n\tlazy(rt)=0;\n    //\u6e05\u7a7alazy\u6807\u8bb0\n}\n```\n\u8fdb\u884c\u9000\u623f\u6216\u5f00\u623f\n```cpp\nvoid update(int L,int R,int tag,int l,int r,int rt){\n\tif(L <= l && r <= R){\n\t\tsum(rt)=lmax(rt)=rmax(rt)=(tag==1)?len(rt):0;\n\t\tlazy(rt)=tag;\n        //\u76f4\u63a5\u66f4\u65b0\u6389\uff0c\u6253\u4e0alazy\u6807\u8bb0\n\t\treturn ;\n\t}\n\tpushdown(rt);\n\tif(L <= mid) update(L,R,tag,l,mid,lson);\n\tif(R > mid) update(L,R,tag,mid+1,r,rson);\n\tpushup(rt);\n    //\u8bb0\u5f97\u4e0b\u4f20\u5e76\u66f4\u65b0\n}\n```\n\u5728$[1,n]$\u627e\u5230\u4e00\u4e2a$\\geq x$\u7684\u533a\u95f4\u5e76\u8fd4\u56de\u5de6\u7aef\u70b9\n```cpp\nint query(int len,int l,int r,int rt){\n\tif(l == r) return l;\n\tpushdown(rt);\n    //\u4e0b\u4f20\u6807\u8bb0\n\tif(sum(lson)>=len) return query(len,l,mid,lson);\n    //\u9012\u5f52\u5230\u5de6\u513f\u5b50\n\tif(rmax(lson)+lmax(rson)>=len) return mid-rmax(lson)+1;\n    //\u5de6\u53f3\u513f\u5b50\u5408\u5e76\u540e\u6ee1\u8db3\u5c31\u7528\u4e2d\u95f4\n\treturn query(len,mid+1,r,rson);\n    //\u9012\u5f52\u5230\u53f3\u513f\u5b50\n}\n```\n\u5b8c\u6574\u4ee3\u7801$\u2193$\n\n$Code\\ Below:$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=50000+10;\nint n,m;\n\nstruct node{\n\tint sum,lmax,rmax,lazy,len;\n\t#define mid (l+r>>1)\n\t#define lson (rt<<1)\n\t#define rson (rt<<1|1)\n\t#define sum(rt) tree[rt].sum\n\t#define lmax(rt) tree[rt].lmax\n\t#define rmax(rt) tree[rt].rmax\n\t#define lazy(rt) tree[rt].lazy\n\t#define len(rt) tree[rt].len\n}tree[maxn<<2];\n\nvoid pushup(int rt){\n\tlmax(rt)=(lmax(lson)==len(lson))?len(lson)+lmax(rson):lmax(lson);\n\trmax(rt)=(rmax(rson)==len(rson))?len(rson)+rmax(lson):rmax(rson);\n\tsum(rt)=max(rmax(lson)+lmax(rson),max(sum(lson),sum(rson)));\n}\n\nvoid pushdown(int rt){\n\tif(!lazy(rt)) return ;\n\tlazy(lson)=lazy(rson)=lazy(rt);\n\tsum(lson)=lmax(lson)=rmax(lson)=(lazy(rt)==1)?len(lson):0;\n\tsum(rson)=lmax(rson)=rmax(rson)=(lazy(rt)==1)?len(rson):0;\n\tlazy(rt)=0;\n}\n\nvoid build(int l,int r,int rt){\n\tsum(rt)=lmax(rt)=rmax(rt)=len(rt)=r-l+1;\n\tif(l == r) return ;\n\tbuild(l,mid,lson);\n\tbuild(mid+1,r,rson);\n}\n\nvoid update(int L,int R,int tag,int l,int r,int rt){\n\tif(L <= l && r <= R){\n\t\tsum(rt)=lmax(rt)=rmax(rt)=(tag==1)?len(rt):0;\n\t\tlazy(rt)=tag;\n\t\treturn ;\n\t}\n\tpushdown(rt);\n\tif(L <= mid) update(L,R,tag,l,mid,lson);\n\tif(R > mid) update(L,R,tag,mid+1,r,rson);\n\tpushup(rt);\n}\n\nint query(int len,int l,int r,int rt){\n\tif(l == r) return l;\n\tpushdown(rt);\n\tif(sum(lson)>=len) return query(len,l,mid,lson);\n\tif(rmax(lson)+lmax(rson)>=len) return mid-rmax(lson)+1;\n\treturn query(len,mid+1,r,rson);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tbuild(1,n,1);\n\tint opt,l,x;\n\twhile(m--){\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(sum(1)>=x){\n\t\t\t\tl=query(x,1,n,1);\n\t\t\t\tprintf(\"%d\\n\",l);\n\t\t\t\tupdate(l,l+x-1,2,1,n,1);\n\t\t\t}\n\t\t\telse printf(\"0\\n\");\n\t\t}\n\t\telse {\n\t\t\tscanf(\"%d%d\",&l,&x);\n\t\t\tupdate(l,l+x-1,1,1,n,1);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u6ca1\u6781\u9650\u538b\u884c\u540e$81$\u884c\uff0c\u81ea\u8ba4\u4e3a\u4ee3\u7801\u8fd8\u662f\u6bd4\u8f83\u6e05\u723d\u7684\n\n$upd:1.1$\n\n\u521a\u5b66 $ODT$\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u53ef\u4ee5\u7528 $ODT$ \u6c34\u5230 $92$\uff0c\u4e0d\u8fc7 $set$ \u7248\u8d85\u7ea7\u6162\uff0c\u4e0b\u6b21\u6211\u624b\u5199\u4e00\u4e2a $list$ \u8bd5\u4e00\u8bd5\n\n$92$ \u5206\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define IT set<node>::iterator\nusing namespace std;\nconst int maxn=100000+10;\nint n,m;\n\nstruct node{\n\tint l,r;\n\tmutable int val;\n\tnode(int l,int r=-1,int val=0):l(l),r(r),val(val){}\n};\nbool operator < (const node &a,const node &b){\n\treturn a.l<b.l;\n}\n\nset<node> s;\n\ninline int read(){\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\nvoid print(int x){\n\tif(x<0){putchar('-');x=-x;}\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\nIT split(int x){\n\tIT it=s.lower_bound(node(x));\n\tif(it!=s.end()&&it->l==x) return it;\n\tit--;\n\tint l=it->l,r=it->r,val=it->val;\n\ts.erase(it);\n\ts.insert(node(l,x-1,val));\n\treturn s.insert(node(x,r,val)).first;\n}\n\nvoid update(int l,int r,int x){\n\tIT R=split(r+1),L=split(l);\n\ts.erase(L,R);\n\ts.insert(node(l,r,x));\n}\n\nint query(int x){\n\tint ans=0,now=0;\n\tfor(IT it=s.begin();it!=s.end();it++){\n\t\tif(it->r<=n&&it->val==0){\n\t\t\tif(now==0) ans=it->l;\n\t\t\tnow+=it->r-it->l+1;\n\t\t\tif(now>=x) return ans;\n\t\t}\n\t\telse now=0;\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\ts.insert(node(1,n,0));\n\ts.insert(node(n+1,n+1,-1));\n\tint op,l,r,x;\n\tfor(int i=1;i<=m;i++){\n\t\top=read();\n\t\tif(op==1){\n\t\t\tx=read();\n\t\t\tprintf(\"%d\\n\",l=query(x));\n\t\t\tif(l) update(l,l+x-1,1);\n\t\t}\n\t\telse {\n\t\t\tl=read(),r=read();\n\t\t\tupdate(l,l+r-1,0);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540510951,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e09\u4e2a\u503c\uff0c\u533a\u95f4\u5185\u6700\u5927\u7684\u8fde\u7eed\u7a7a\u4f4d\uff0c\u4ece\u5de6\u8fb9\u6700\u5927\u5ef6\u4f38\u7684\u957f\u5ea6\uff0c\u4ece\u53f3\u8fb9\u6700\u5927\u5ef6\u4f38\u7684\u957f\u5ea6\u3002\n\n\n\u66f4\u65b0\u65f6\uff0c\u6709\u4eba\u4f4f\u8ba9\u8fd9\u4e9b\u6570\u7ec4\u90fd\u4e3a0\uff0c\u8868\u793a0\u4e2a\u7a7a\u4f4d\uff0c\u6ca1\u4eba\u4f4f\uff0c\u5c31\u662f\u533a\u95f4\u957f\u5ea6\uff0c\u8868\u793a\u533a\u95f4\u5185\u7684\u7a7a\u4f4d\u5c31\u662f\u957f\u5ea6\uff0c\u90fd\u662f\u7a7a\u4f4d\u3002\n\n\n\u5176\u4ed6\u7684\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\nconst int MAXN = 400010;\nint len[MAXN],sum[MAXN],ml[MAXN],mr[MAXN],tag[MAXN];\n//\u5206\u522b\u533a\u95f4\u7684\u957f\u5ea6\uff0c\u533a\u95f4\u5185\u6700\u5927\u7684\u8fde\u7eed\u7a7a\u4f4d\uff0c\u4ece\u5de6\u8fb9\u5ef6\u4f38\u6700\u957f\u7684\u7a7a\u4f4d\uff0c\u540c\u7406\u4ece\u53f3\u8fb9\uff0c\u61d2\u6807\u8bb0 \nint n,q;\nvoid pushup(int rt)\n{\n    if (sum[rt<<1]==len[rt<<1])//\u5982\u679c\u5de6\u533a\u95f4\u5168\u662f\u7a7a\u4f4d\uff0c\u5927\u533a\u95f4\u7684ml\u5c31\u662f\u5de6\u533a\u95f4\u7684\u5168\u90e8 \u52a0 \u53f3\u533a\u95f4\u7684ml \n        ml[rt] = sum[rt<<1]+ml[rt<<1|1];\n    else//\u5426\u5219\u5c31\u662f\u6700\u533a\u95f4ml \n        ml[rt] = ml[rt<<1];\n    if (sum[rt<<1|1]==len[rt<<1|1])//\u540c\u7406 \n        mr[rt] = sum[rt<<1|1]+mr[rt<<1];\n    else\n        mr[rt] = mr[rt<<1|1];\n    sum[rt] = max(max(sum[rt<<1],sum[rt<<1|1]),mr[rt<<1]+ml[rt<<1|1]);//\u5927\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u957f\u5ea6\uff0c\u4ece\u4e24\u4e2a\u5b50\u533a\u95f4\u548c\u4e2d\u95f4\u7684\u90e8\u5206\u533a\u6700\u5927\u7684 \n    return;\n}\nvoid pushdown(int rt)\n{\n    if (tag[rt]==0) return;\n    if (tag[rt]==1)//\u6709\u4eba\u4f4f\uff0c\u6240\u4ee5\u8bbe\u4e3a0 \n    {\n        tag[rt<<1] = tag[rt<<1|1] = 1;\n        sum[rt<<1] = ml[rt<<1] = mr[rt<<1] = 0;\n        sum[rt<<1|1] = ml[rt<<1|1] = mr[rt<<1|1] = 0;\n    }\n    if (tag[rt]==2)//\u6ca1\u6709\u4eba\u4f4f\uff0c\u5168\u662f\u7a7a\uff0c\u5c31\u662f\u533a\u95f4\u7684\u957f\u5ea6 \n    {\n        tag[rt<<1] = tag[rt<<1|1] = 2;\n        sum[rt<<1] = ml[rt<<1] = mr[rt<<1] = len[rt<<1];\n        sum[rt<<1|1] = ml[rt<<1|1] = mr[rt<<1|1] = len[rt<<1|1];\n    }\n    tag[rt] = 0;\n}\nvoid build(int l,int r,int rt)\n{\n    ml[rt] = mr[rt] = sum[rt] = len[rt] = r-l+1;\n    tag[rt] = 0;\n    if (l==r) return;\n    int m = (l+r)>>1;\n    build(lson);\n    build(rson);\n}\nvoid update(int l,int r,int rt,int L,int R,int c)\n{\n    pushdown(rt);\n    if (L<=l&&r<=R)\n    {\n        if (c==1) sum[rt] = ml[rt] = mr[rt] = 0;\n        else sum[rt] = ml[rt] = mr[rt] = len[rt];\n        tag[rt] = c;\n        return ;\n    }\n    int m = (l+r)>>1;\n    if (L<=m) update(lson,L,R,c);\n    if (R>m)  update(rson,L,R,c);\n    pushup(rt);\n}\nint query(int l,int r,int rt,int x)\n{\n    pushdown(rt);\n    if (l==r) return l;\n    int m = (l+r)>>1;\n    if (sum[rt<<1]>=x) return query(lson,x);//\u5982\u679c\u5de6\u533a\u95f4\u6709x\u4e2a\u8fde\u7eed\u7a7a\u4f4d\uff0c\u5728\u5de6\u533a\u95f4\u627e \n    if (mr[rt<<1]+ml[rt<<1|1]>=x) return m-mr[rt<<1]+1;//\u5982\u679c\u5de6\u533a\u95f4\u7684\u53f3\u8fb9 \u548c \u53f3\u533a\u95f4\u7684\u5de6\u8fb9 \u52a0\u8d77\u6765\u6709x\u4e2a\u8fde\u7eed\u7a7a\u4f4d\uff0c\u8fd4\u56de\u5de6\u533a\u95f4\u53f3\u8fb9\u6700\u5927\u65f6\u7684\u8d77\u70b9 \n    else return query(rson,x);//\u5728\u53f3\u533a\u95f4\u627e\uff0c\u80af\u5b9a\u4f1a\u6709\u7684 \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n    build(1,n,1);\n    while (q--)\n    {\n        int opt,x,y,p;\n        scanf(\"%d\",&opt);\n        if (opt==1)\n        {\n            scanf(\"%d\",&x);\n            if (sum[1]<x)//\u5982\u679c\u603b\u533a\u95f4\u6ca1\u6709x\u4e2a\u8fde\u7eed\u7684\u7a7a\u4f4d\uff0c\u8f93\u51fa0 \n            {\n                printf(\"0\\n\");\n                continue;\n            }\n            p = query(1,n,1,x);\n            printf(\"%d\\n\",p);\n            update(1,n,1,p,p+x-1,1);//\u533a\u95f4\u4e0d\u662f0\uff0c\u6240\u4ee5\u6570\u7ec4\u90fd\u662f0\uff0c\u89c1\u6570\u7ec4\u5b9a\u4e49 \n        }\n        else\n        {\n            scanf(\"%d%d\",&x,&y);\n            update(1,n,1,x,x+y-1,2);//\u5c06\u533a\u95f4\u8bbe\u4e3a0\uff0c\u6240\u4ee5\u6570\u7ec4\u90fd\u662f\u533a\u95f4\u7684\u957f\u5ea6 \n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1502286699,
        "uid": 39828,
        "name": "amstar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "# \u6c34\u8fc7\u4e86\u4e00\u9053\u84dd\u9898\uff08\u7f8e\u6ecb\u6ecb%%%%%%%\uff09\n---\n\u8fd8\u662f\u5148\u8bf4\u4e00\u4e0b\u505a\u6cd5\uff1a\n\n1\u3001\u6a21\u62df\uff0c\u66b4\u529b\n\n2\u3001\u5feb\u8bfb\u3002\n\n3\u3001O2\n\n---\n\u4e3b\u8981\u662f\u6309\u9898\u610f\u6a21\u62df\uff0c\u7ebf\u6027\u6c42\u6700\u5de6\u7684\u8d85\u8fc7\u957f\u5ea6\u7684\u7a7a\u4f4d\uff0c\u6807\u8bb0\u4e3a1.\n\u53bb\u6389\u5c31\u6807\u8bb0\u4e3a0.\n```\n#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m;\nint a,k,g,x,y;\nbool ok;\nbool z[500005];\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nint main()\n{\n    n=read();\n    m=read();\n    for(register int i=1;i<=m;i++){\n    \ta=read();\n    \tif(a==1){\n    \tk=read();\n    \tok=0;\n    \tg=0;\n    \tfor(int j=1;j<=n;j++){\n    \t\tif(z[j]==0){\n    \t\t\tg++;\n    \t\t}\n    \t\telse {\n    \t\t\tg=0;\n    \t\t}\n    \t\tif(g>=k){\n    \t\t\tfor(register int l=j-k+1;l<=j;l++)\n    \t\t\t\tz[l]=1;\n    \t\t\tprintf(\"%d\\n\",j-k+1);\n    \t\t\tok=1;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tif(!ok)puts(\"0\");\n    \t}\n    \telse {\n    \t\tx=read();\n    \t\ty=read();\n    \t\tfor(register int j=x;j<=x+y-1;j++)z[j]=0;\n    \t}\n\t}\n    return 0;\n}\n```",
        "postTime": 1564837195,
        "uid": 58363,
        "name": "Bronya19C",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "### \u9996\u5148\u5b89\u5229\u535a\u5ba2\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/linzhengmin/p/11140727.html)  \n### \u6b63\u786e\u7684\u9898\u89e3\n\u9996\u5148\u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u9898\u8981\u7528\u7ebf\u6bb5\u6811\u505a\u3002\u8003\u8651\u7ef4\u62a4\u9760\u5de6\u8fb9\u7684answer\uff0c\u9760\u53f3\u8fb9\u7684answer\uff0c\u548c\u6574\u4e2a\u533a\u95f4\u7684answer\uff0c\u90a3\u4e48\u5c31\u73c2\u4ee5\u7ef4\u62a4\u8fd9\u9053\u9898\u76ee\u4e86\u3002  \n\u8fd9\u91cc\u6bd4\u8f83\u590d\u6742\u7684\u6709\u4e0b\u4f20\u64cd\u4f5c\u548c\u4e0a\u4f20\u64cd\u4f5c\u3002\n#### \u4e0a\u4f20\n```cpp\nvoid pushUp(int pos, int l, int r){\n    seg[pos].ans = max(seg[pos << 1].rans + seg[pos << 1 | 1].lans, max(seg[pos << 1].ans, seg[pos << 1 | 1].ans));\n    int mid = (l + r) >> 1;\n    if (seg[pos << 1].ans == mid - l + 1)\n        seg[pos].lans = seg[pos << 1 | 1].lans + seg[pos << 1].ans;\n    else\n        seg[pos].lans = seg[pos << 1].lans;\n    if (seg[pos << 1 | 1].ans == r - mid)\n        seg[pos].rans = seg[pos << 1].rans + seg[pos << 1 | 1].ans;\n    else\n        seg[pos].rans = seg[pos << 1 | 1].rans;\n}\n```\n#### \u4e0b\u4f20\n```cpp\nvoid pushDown(int pos, int l, int r){\n    if (!seg[pos].lazy){\n        seg[pos << 1].lazy = seg[pos << 1 | 1].lazy = 0;\n        int mid = (l + r) >> 1;\n        seg[pos << 1].ans = seg[pos << 1].lans = seg[pos << 1].rans = mid - l + 1;\n        seg[pos << 1 | 1].ans = seg[pos << 1 | 1].lans = seg[pos << 1 | 1].rans = r - mid;\n    }\n    else if (seg[pos].lazy == 1){\n        seg[pos << 1].lazy = seg[pos << 1 | 1].lazy = 1;\n        seg[pos << 1].ans = seg[pos << 1].lans = seg[pos << 1].rans = 0;\n        seg[pos << 1 | 1].ans = seg[pos << 1 | 1].lans = seg[pos << 1 | 1].rans = 0;\n    }\n    seg[pos].lazy = -1;\n}\n\n```\n### \u6b63\u89e3\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint read(){\n    int x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\nstruct Node{\n    int ans, lans, rans;\n    int lazy; \n} seg[200000];\n\nvoid pushUp(int pos, int l, int r){\n    seg[pos].ans = max(seg[pos << 1].rans + seg[pos << 1 | 1].lans, max(seg[pos << 1].ans, seg[pos << 1 | 1].ans));\n    int mid = (l + r) >> 1;\n    if (seg[pos << 1].ans == mid - l + 1)\n        seg[pos].lans = seg[pos << 1 | 1].lans + seg[pos << 1].ans;\n    else\n        seg[pos].lans = seg[pos << 1].lans;\n    if (seg[pos << 1 | 1].ans == r - mid)\n        seg[pos].rans = seg[pos << 1].rans + seg[pos << 1 | 1].ans;\n    else\n        seg[pos].rans = seg[pos << 1 | 1].rans;\n}\n\nvoid pushDown(int pos, int l, int r){\n    if (!seg[pos].lazy){\n        seg[pos << 1].lazy = seg[pos << 1 | 1].lazy = 0;\n        int mid = (l + r) >> 1;\n        seg[pos << 1].ans = seg[pos << 1].lans = seg[pos << 1].rans = mid - l + 1;\n        seg[pos << 1 | 1].ans = seg[pos << 1 | 1].lans = seg[pos << 1 | 1].rans = r - mid;\n    }\n    else if (seg[pos].lazy == 1){\n        seg[pos << 1].lazy = seg[pos << 1 | 1].lazy = 1;\n        seg[pos << 1].ans = seg[pos << 1].lans = seg[pos << 1].rans = 0;\n        seg[pos << 1 | 1].ans = seg[pos << 1 | 1].lans = seg[pos << 1 | 1].rans = 0;\n    }\n    seg[pos].lazy = -1;\n}\n\nvoid build(int pos, int l, int r){\n    if (l == r){\n        seg[pos].ans = seg[pos].lans = seg[pos].rans = 1;\n        seg[pos].lazy = -1;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    build(pos << 1, l, mid), build(pos << 1 | 1, mid + 1, r);\n    pushUp(pos, l, r);\n}\n\nvoid modify(int pos, int l, int r, int x, int y, int val){\n    if (x <= l && r <= y){\n        if (val) seg[pos].ans = seg[pos].lans = seg[pos].rans = 0;\n        else seg[pos].ans = seg[pos].lans = seg[pos].rans = r - l + 1;\n        seg[pos].lazy = val;\n        return ;\n    }\n    pushDown(pos, l, r); int mid = (l + r) >> 1;\n    if (x <= mid) modify(pos << 1, l, mid, x, y, val);\n    if (y > mid) modify(pos << 1 | 1, mid + 1, r, x, y, val);\n    pushUp(pos, l, r);\n}\n\nint query(int pos, int l, int r, int k){\n    pushDown(pos, l, r); if (l == r) return l;\n    int mid = (l + r) >> 1;\n    if (seg[pos << 1].ans >= k) return query(pos << 1, l, mid, k);\n    if (seg[pos << 1].rans + seg[pos << 1 | 1].lans >= k) return (mid - seg[pos << 1].rans + 1);\n    else return query(pos << 1 | 1, mid + 1, r, k);\n}\n\nint main(){\n    int n = read(), m = read();\n    build(1, 1, n);\n    for (int i = 1; i <= m; ++i){\n        int op = read(), x, y;\n        if (op == 1){\n            x = read();\n            if(seg[1].ans >= x){\n                int l = query(1, 1, n, x);\n                printf(\"%d\\n\", l);\n                modify(1, 1, n, l, l + x - 1, 1);\n            }\n            else\n                puts(\"0\");\n        }\n        else{\n            x = read(), y = read();\n            modify(1, 1, n, x, x + y - 1, 0);\n        }\n    }\n    return 0;\n}\n```\n### \u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u5f97\u9ad8\u5206\u601d\u8def\n\u8fd9\u662f\u6211\u53d1\u8fd9\u7bc7\u9898\u89e3\u7684\u76ee\u7684\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u719f\u6089\u7684\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u5c31\u60f3\u5230\u4e86\u73c2\u6735\u8389\u6811\uff0c\u4e5f\u5c31\u662f\u6211\u4e00\u5f00\u59cb\u7684\u6253\u6cd5\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u636e\u7684\u539f\u56e0\u73c2\u6811T\u4e86\uff0c\u4f24\u5fc3.jpg\u3002  \n\u6211\u4eec\u8003\u8651\u73c2\u6735\u8389\u6811\u7684\u67e5\u8be2\uff0c\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u4e00\u4e0b\u67e5\u8be2\u5373\u53ef\n```cpp\nint query(int k){\n    int l = 1, cnt = 0;\n    for (set<Node>::iterator it = st.begin(); it != st.end(); ++it){\n        if (it->val == 1){\n            l = it->r + 1;\n            cnt = 0;\n        }\n        else{\n            cnt += it->r - it->l + 1;\n            if (cnt >= k) return l;\n        }\n    }\n    return -1;\n}\n```\n\u6211\u4eec\u8003\u8651\u628a\u8fde\u5728\u4e00\u8d77\u7684\u5757\u7684\u503c\u4e3a\u96f6\u7684\u533a\u95f4\u7684\u957f\u5ea6\u52a0\u8d77\u6765\uff0c\u53d6\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u7aef\u70b9\uff0c\u7136\u540e\u5c31\u73c2\u4ee5\u505a\u51fa\u6765\u5566\u3002\n### \u53ef\u601c\u768492\u5206\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nint read(){\n    int x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\n//build\nstruct Node{\n    int l, r;\n    mutable bool val;\n    Node(int a = -1, int b = -1, int c = 0){\n        l = a, r = b, val = c;\n    }\n    bool operator < (const Node &a) const{\n        return l < a.l;\n    }\n};\n\nset<Node> st;\n\n//modify\nset<Node>::iterator split(int pos){\n    set<Node>::iterator it = st.lower_bound(Node(pos));\n    if (it != st.end() && it->l == pos) return it;\n    --it; Node tmp = *it; st.erase(it);\n    st.insert(Node(tmp.l, pos - 1, tmp.val));\n    return st.insert(Node(pos, tmp.r, tmp.val)).first; //first return iterator\n}\n\nvoid assign(int l, int r, bool val){\n    set<Node>::iterator itr = split(r + 1), itl = split(l);\n    st.erase(itl, itr);\n    st.insert((Node){l, r, val});\n}\n\n//query\nint query(int k){\n    int l = 1, cnt = 0;\n    for (set<Node>::iterator it = st.begin(); it != st.end(); ++it){\n        if (it->val == 1){\n            l = it->r + 1;\n            cnt = 0;\n        }\n        else{\n            cnt += it->r - it->l + 1;\n            if (cnt >= k) return l;\n        }\n    }\n    return -1;\n}\n\nint main(){\n    int n = read(), m = read(); st.insert((Node){1, n, 0});\n    while (m--){\n        int op = read();\n        if (op == 1){\n            int x = read(), pos = query(x);\n            if (pos == -1) puts(\"0\");\n            else{\n                printf(\"%d\\n\", pos);\n                assign(pos, pos + x - 1, 1);\n            }\n        }\n        else if (op == 2){\n            int x = read(), y = read();\n            assign(x, x + y - 1, 0);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1562331445,
        "uid": 20462,
        "name": "lukelin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "Links: [Here](https://www.luogu.com.cn/problem/P2894)\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u9898\u76ee\u3002\n\n\u4e4d\u4e00\u770b\uff0c\u4fee\u6539\u8fd8\u597d\u4fee\u6539\uff0c\u53ea\u662f...\n\n...\u67e5\u8be2\u662f\u4ec0\u4e48\u9b3c\uff1f\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/46mbvqdh.png)\n\n\u9898\u76ee\u662f\u8981\u67e5\u8be2\u957f\u5ea6\u5927\u4e8e n \u7684\u8fde\u7eed\u7a7a\u623f\u533a\u95f4\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5b9a\u4e49 `val[]` \u4e3a\u533a\u95f4\u5185\u7684\u6700\u5927\u7a7a\u623f\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4\uff1a\n\n1. \u533a\u95f4\u5185\u4ece\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7a7a\u623f\u533a\u95f4\u7684\u957f\u5ea6(`lmax[]`)\u3002\n2. \u533a\u95f4\u5185\u4ece\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed\u7a7a\u623f\u533a\u95f4\u7684\u957f\u5ea6(`rmax[]`)\u3002\n\n\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\uff1a\n\n1. \u53ea\u4ece\u533a\u95f4\u5de6\u5b50\u6811\u67e5\u8be2(`val[lson]`)\uff0c\u5982 `* 0 0 *|* * * *`\u3002\n2. \u53ea\u4ece\u533a\u95f4\u53f3\u5b50\u6811\u67e5\u8be2(`val[rson]`)\uff0c\u5982 `* * * *|* 0 0 *`\u3002\n3. \u67e5\u8be2\u7684\u533a\u95f4\u8de8\u8d8a\u4e86\u4e2d\u7ebf(`rmax[lson] + lmax[rson]`)\uff0c\u5982 `* * 0 0|0 * * *`\u3002\n\n\u7b54\u6848\u5c31\u662f**\u7b26\u5408\u8981\u6c42\u65f6**\u6309\u987a\u5e8f\u67e5\u8be2\uff1a\n\n```cpp\nif (val[lson] >= want) return search(want, l, mid, lson);\nelse if (rmax[lson] + lmax[rson] >= want) return mid - rmax[lson] + 1;\nelse if (val[rson] >= want) return search(want, mid + 1, r, rson);\nelse return 0;\n\n```\n\n\u5728~~\u4e2a\u4eba\u7684~~\u4ee3\u7801\u4e2d\uff0c`lazy[o] == 1` \u4ee3\u8868\u6e05\u7a7a\u533a\u95f4\uff0c`lazy[o] == 2`\u4ee3\u8868\u586b\u6ee1\u533a\u95f4\u3002\uff08`lazy[o] == 0` \u4e0d\u9700\u8981\u8bf4\u4e86\u5427...\uff09\n\n\u518d\u6ce8\u610f\u4e00\u4e0b `pushdown` \u4e0b\u63a8\u61d2\u6807\u8bb0\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\uff1a\n\n```cpp\nvoid pushdown(int o) {\n    if (lazy[o]) {\n        lmax[lson] = rmax[lson] = val[lson] = lazy[o] == 1 ? 0 : len[lson];\n        lmax[rson] = rmax[rson] = val[rson] = lazy[o] == 1 ? 0 : len[rson];\n        lazy[lson] = lazy[rson] = lazy[o];\n    }\n    lazy[o] = 0;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define lson o << 1\n#define rson (o << 1) | 1\nusing namespace std;\nconst int MAXN = 50001;\nstruct SegmentTree {\n    int val[MAXN << 2]\uff0c len[MAXN << 2], lmax[MAXN << 2], rmax[MAXN << 2], lazy[MAXN << 2];\n    void pushup(int o) {\n        lmax[o] = val[lson] == len[lson] ? len[lson] + lmax[rson] : lmax[lson];\n        rmax[o] = val[rson] == len[rson] ? len[rson] + rmax[lson] \uff1a rmax[rson];\n        val[o] = max(max(val[lson], val[rson]), rmax[lson] + lmax[rson]);\n    }\n    void pushdown(int o) {\n        if (lazy[o]) {\n            lmax[lson] = rmax[lson] = val[lson] = lazy[o] == 1 ? 0 : len[lson];\n            lmax[rson] = rmax[rson] = val[rson] = lazy[o] == 1 ? 0 : len[rson];\n            lazy[lson] = lazy[rson] = lazy[o];\n        }\n        lazy[o] = 0;\n    }\n    void build(int l, int r, int o) {\n        val[o] = len[o] = lmax[o] = rmax[o] = r - l + 1;\n        lazy[o] = 0;\n        if (l != r) {\n            int mid = (l + r) >> 1;\n            build(l, mid, lson);\n            build(mid + 1, r, rson);\n        }\n    }\n    int search(int want, int l, int r, int o) {\n        pushdown(o);\n        if (l == r) return l;\n        int mid = (l + r) >> 1;\n        if (val[lson] >= want) return search(want, l, mid, lson);\n        else if (rmax[lson] + lmax[rson] >= want) return mid - rmax[lson] + 1;\n        else if (val[rson] >= want) return search(want, mid + 1, r, rson);\n        else return 0;\n    }\n    void change(bool type, int cl, int cr, int l, int r, int o) {\n        pushdown(o);\n        if (cl <= l and cr >= r) {\n            val[o] = lmax[o] = rmax[o] = type ? len[o] : 0;\n            lazy[o] = int(type) + 1;\n            return;\n        }\n        if (cr < l or cl > r) return;\n        else {\n            int mid = (l + r) >> 1;\n            change(type, cl, cr, l, mid, lson);\n            change(type, cl, cr, mid + 1, r, rson);\n            pushup(o);\n        }\n    }\n} seg\uff1b\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    seg.build(0, n, 0);\n    for (int i = 0; i < m; i++) {\n        int k, a;\n        scanf(\"%d %d\", &k, &a);\n        if (k == 1) {\n            if (seg.val[1] >= a) {\n                int s = seg.search(a, 0, n, 0);\n                printf(\"%d\\n\", s);\n                seg.change(0, s, s + a - 1, 0, n, 0);\n            }\n            else {\n                printf(\"0\\n\");\n            }\n        }\n        else {\n            int b;\n            scanf(\"%d\", &b);\n            seg.change(1, a, a + b - 1, 0, n, 0);\n        }\n    }\n    return 0;\n}\n```\n\n\u7136\u800c\u6211\u57cb\u4e86\u51e0\u4e2a\u5751\n\n\u76f4\u63a5\u63d0\u4ea4\u4f1a\u53d1\u73b0\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gpxonk13.png)\n\n\u5373\u4f7f\u4f60\u6539\u4e86 CE \u4e5f\u4e0d\u80fd\u8fc7\u7684\uff0c\u4e56\u4e56\u81ea\u5df1\u5199\u5427\uff08\u5149\u901f\u9003 + \u5207\u52ff\u8c14\u8c14\uff09",
        "postTime": 1582702235,
        "uid": 109114,
        "name": "_l_l_",
        "ccfLevel": 8,
        "title": "\u3010\u7ebf\u6bb5\u6811\u3011\u3010\u9898\u89e3\u3011P2894\u3010[USACO08FEB]Hotel G\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u660e\u663e\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u9898\uff0c\u81f3\u4e8e\u8003\u8bd5\u65f6\u56e0\u4e3a\u61d2\u6807\u8bb0\u7684\u5c0f\u95ee\u9898\u53ea\u670920\u5206\uff0c~~\u6211\u4e5f\u5f88\u65e0\u5948~~\u3002\n\n\u8fdb\u5165\u6b63\u9898\uff0c\u65e2\u7136\u8981\u4fee\u6539\u67e5\u8be2\u533a\u95f4\u5185\u8fde\u7eed\u7684\u4e00\u6bb5\u5143\u7d20\uff0c~~\u4f3c\u66fe\u76f8\u8bc6\u7684\u611f\u89c9~~\u3002\n\u6211\u4eec\u7b49\u4ef7\u7684\u628a\u7a7a\u623f\u5b50\u770b\u4e3a1\uff0c\u4f4f\u4eba\u7684\u623f\u5b50\u770b\u4e3a0\u3002\n\n\u6211\u4eec\u7ef4\u62a4\u4e09\u4e2a\u503c: $num$\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u6700\u957f\u7684\u4e00\u6bb5\u8fde\u7eed$'1'$\u4e32 \uff0c $lnum$\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u4ece\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed$'1'$\u4e32 , $rnum$\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u4ece\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u8fde\u7eed$'1'$\u4e32\u3002\n\n\u7136\u540e\uff0c\u7528f\u8bb0\u5f55\u533a\u95f4\u72b6\u6001\uff08\u61d2\u6807\u8bb0\uff09\uff0c$f=1$\u8868\u793a\u5168\u4e3a1\uff0c$f=0$\u8868\u793a\u5168\u4e3a0\uff0c$f=2$\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u3002\n\n\u7136\u540e\uff0c\u5c31\u7167\u7740\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u5199\u3002\u7a0d\u5fae\u9ebb\u70e6\u4e00\u70b9\u7684\u662f\u533a\u95f4\u4fee\u6539\u540e\u7684\u7ef4\u62a4\u4e0e\u67e5\u8be2\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u8bb2\u89e3\u4e00\u4e0b\u3002\n\n#### 1.\u533a\u95f4\u4fee\u6539\u540e\u7684\u7ef4\u62a4\uff08$pushup$\u51fd\u6570\uff09\n\n\u5728\u5f97\u5230\u4e24\u4e2a\u5b50\u533a\u95f4\u540e\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u4ed6\u4eec\u5f97\u51fa\u5927\u533a\u95f4\u7684\u4fe1\u606f\u3002\uff08\u5e9f\u8bdd\uff09\n\n1.$lnum$\uff0c$rnum$\n\n\u663e\u7136\uff0c\u5927\u533a\u95f4\u7684$lnum$\u5c31\u7b49\u4e8e\u5de6\u533a\u95f4\u7684$lnum$\uff0c\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5f53\u5de6\u533a\u95f4\u5168\u4e3a1\u65f6\uff0c\u5927\u533a\u95f4\u7684$lnum$\u7b49\u4e8e\u5de6\u533a\u95f4\u7684\u957f\u5ea6\u52a0\u4e0a\u53f3\u533a\u95f4\u7684$lnum$\u3002$rnum$\u540c\u7406\u3002\n\n2.$num$\n\n\u663e\u7136\uff0c\u5927\u533a\u95f4\u7684$num$\u53ef\u80fd\u662f\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684$num$\u7684\u8f83\u5927\u503c\uff0c\u540c\u65f6\uff0c\u4e5f\u53ef\u80fd\u662f\u7531\u5de6\u533a\u95f4\u7684$rnum$\u548c\u53f3\u533a\u95f4$lnum$\u7684\u62fc\u63a5\u800c\u6210\u7684\u8fde\u7eed\u20181\u2019\u4e32\u3002\n\n#### 2.\u533a\u95f4\u67e5\u8be2\uff08$Find$\u51fd\u6570\uff09\n\n\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u54ea\u4e2a\u533a\u95f4\u8db3\u591f\u5c31\u67e5\u8be2\u54ea\u4e2a\u533a\u95f4\u5417\uff0c\u6ce8\u610f\u8f93\u51fa\u6700\u5c0f\u7684\u503c\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u67e5\u8be2\u3002\n\n\n```cpp\n#include <cstdio>\n#define ls x << 1\n#define rs x << 1 | 1\n#define INF 0x3f3f3f3f\n\nconst int MAXN = 50000;\nint n,m;\nstruct node{\n\tint l , r , f;\n\tint num , lnum , rnum;\n}Tree[ 4 * MAXN + 5 ];\n\nint Max( int x , int y ) {\n\treturn x > y ? x : y;\n}\nint Min( int x , int y ) {\n\treturn x < y ? x : y;\n}\n\nvoid Build( int x , int l , int r ) {\n\tTree[ x ].l = l , Tree[ x ].r = r , Tree[ x ].f = 2;\n\tTree[ x ].lnum = Tree[ x ].rnum = Tree[ x ].num = Tree[ x ].r - Tree[ x ].l + 1;\n\tif( l == r ) return;\n\t\n\tint Mid = ( l + r ) / 2;\n\tBuild( ls , l , Mid );\n\tBuild( rs , Mid + 1 , r );\n}\nvoid pushup( int x ) {\n\tTree[ x ].lnum = Tree[ ls ].lnum;\n\tif( Tree[ ls ].num == Tree[ ls ].r - Tree[ ls ].l + 1 ) Tree[ x ].lnum = Tree[ ls ].num + Tree[ rs ].lnum;\n\t\n\tTree[ x ].rnum = Tree[ rs ].rnum;\n\tif( Tree[ rs ].num == Tree[ rs ].r - Tree[ rs ].l + 1 ) Tree[ x ].rnum = Tree[ rs ].num + Tree[ ls ].rnum;\n\t\n\tTree[ x ].num = Max( Max( Tree[ ls ].num , Tree[ rs ].num ) , Tree[ ls ].rnum + Tree[ rs ].lnum );\n}\nvoid pushdown( int x ) {\n\tif( Tree[ x ].l == Tree[ x ].r )\n\t\treturn;\n\tif( Tree[ x ].f == 0 ) {\n\t\tTree[ ls ].num = 0 , Tree[ ls ].f = 0;\n\t\tTree[ rs ].num = 0 , Tree[ rs ].f = 0;\n\t\tTree[ ls ].lnum = Tree[ ls ].rnum = 0;\n\t\tTree[ rs ].lnum = Tree[ rs ].rnum = 0;\n\t\tTree[ x ].f = 2;\n\t}\n\tif( Tree[ x ].f == 1 ) {\n\t\tTree[ ls ].num = Tree[ ls ].r - Tree[ ls ].l + 1 , Tree[ ls ].f = 1;\n\t\tTree[ rs ].num = Tree[ rs ].r - Tree[ rs ].l + 1 , Tree[ rs ].f = 1;\n\t\tTree[ ls ].lnum = Tree[ ls ].rnum = Tree[ ls ].num;\n\t\tTree[ rs ].lnum = Tree[ rs ].rnum = Tree[ rs ].num;\n\t\tTree[ x ].f = 2;\n\t}\n}\nvoid Insert( int x , int l , int r , int k ) {\n\tif( l > Tree[ x ].r || Tree[ x ].l > r )\n\t\treturn;\n\tif( l <= Tree[ x ].l && Tree[ x ].r <= r ) {\n\t\tTree[ x ].f = k;\n\t\tTree[ x ].num = k == 1 ? Tree[ x ].r - Tree[ x ].l + 1 : 0;\n\t\tTree[ x ].lnum = Tree[ x ].rnum = Tree[ x ].num;\n\t\treturn;\n\t}\n\tpushdown( x );\n\tInsert( ls , l , r , k );\n\tInsert( rs , l , r , k );\n\tpushup( x );\n}\nint Find( int x , int k ) {\n\tif( Tree[ x ].l == Tree[ x ].r ) return Tree[ x ].l;\n\tpushdown( x );\n\tif( Tree[ ls ].num >= k ) return Find( ls , k );\n\tif( Tree[ ls ].rnum + Tree[ rs ].lnum >= k ) return Tree[ ls ].r - Tree[ ls ].rnum + 1;\n\tif( Tree[ rs ].num >= k ) return Find( rs , k );\n}\nint main( ) {\n\t//freopen(\"hotel.in\",\"r\",stdin);\n\t//freopen(\"hotel.out\",\"w\",stdout);\n\t\n\tscanf(\"%d %d\",&n,&m);\n\tBuild( 1 , 1 , n );\n\tint op,x,d;\n\tfor( int i = 1 ; i <= m ; i ++ ) {\n\t\tscanf(\"%d\",&op);\n\t\tif( op == 1 ) {\n\t\t\tscanf(\"%d\",&d);\n\t\t\tif( Tree[ 1 ].num < d ) {\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint r = Find( 1 , d );\n\t\t\tInsert( 1 , r , r + d - 1 , 0 );\n\t\t\tprintf(\"%d\\n\",r);\n\t\t}\n\t\telse if( op == 2 ) {\n\t\t\tscanf(\"%d %d\",&x,&d);\n\t\t\tInsert( 1 , x , x + d - 1 , 1 );\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1565955080,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "P2894 [USACO08FEB]\u9152\u5e97Hotel"
    },
    {
        "content": "( \u672c\u6587\u4e5f\u4f5c$8.16$\u8003\u8bd5\u9898\u89e3, \u9644[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problem/P2894). )  \n\u54b1\u4eec\u8003\u8bd5\u7ec8\u4e8e\u9001\u70b9\u6c34\u5206\u4e86$x$.\n\n------------\n\u9996\u5148, \u53ef\u4ee5\u8f7b\u6613\u770b\u51fa\u672c\u9898\u7684\u7b97\u6cd5\u2014\u2014\u7ebf\u6bb5\u6811.  \n\u6211\u4eec\u7ef4\u62a4\u4e09\u4e2a\u6570\u503c: \u4ee5\u533a\u95f4\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u7a7a\u623f\u957f\u5ea6; \u4ee5\u533a\u95f4\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u7a7a\u623f\u957f\u5ea6; \u6574\u4e2a\u533a\u95f4\u6700\u957f\u7684\u7a7a\u623f\u957f\u5ea6.  \n\u5bf9\u4e8e\u533a\u95f4\u5408\u5e76, \u4e3a\u4e86\u7ef4\u62a4\u5927\u533a\u95f4\u7684\u6700\u957f\u7684\u7a7a\u623f\u957f\u5ea6, \u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u5206\u7c7b\u8ba8\u8bba:  \n1. \u6700\u957f\u7a7a\u623f\u533a\u95f4\u5728\u5de6\u513f\u5b50.  \n\n2. \u6700\u957f\u7a7a\u623f\u533a\u95f4\u5728\u53f3\u513f\u5b50.  \n\n3. \u6700\u957f\u7a7a\u623f\u533a\u95f4\u8de8\u8d8a\u5de6\u53f3\u513f\u5b50.  \n\n\u4ee5\u4e0a\u4e09\u79cd\u60c5\u51b5, \u53d6\u6700\u5927\u503c\u5373\u53ef.  \n\u7279\u522b\u6ce8\u610f, \u5728\u533a\u95f4\u5408\u5e76\u65f6, \u5982\u679c\u51fa\u73b0\u67d0\u4e2a\u513f\u5b50\u5168\u662f\u7a7a\u623f, \u4ee5\u533a\u95f4\u7aef\u70b9\u5f00\u59cb\u7684\u7a7a\u623f\u957f\u5ea6\u4e5f\u4f1a\u8d2f\u7a7f\u4e2a\u513f\u5b50.  \n\u5982\u4f55\u67e5\u8be2? \u6211\u4eec\u5206\u4e3a\u4e09\u6b65:  \n1. \u67e5\u8be2\u662f\u5426\u5b58\u5728\u7b54\u6848.  \n\u5f88\u8f7b\u677e, \u8bbf\u95ee\u6839\u8282\u70b9\u5373\u53ef.  \n\n2. \u627e\u5230\u6700\u9760\u5de6\u7684\u7b54\u6848\u4f4d\u7f6e.  \n\u9012\u5f52\u67e5\u627e. \u5728\u8fdb\u5165\u9012\u5f52\u65f6\u68c0\u67e5\u8be5\u7ed3\u70b9\u533a\u95f4\u5185\u662f\u5426\u5b58\u5728\u7b54\u6848, \u5728\u4ee5\u4e0a\u65871.2.3.\u7684\u987a\u5e8f\u5206\u522b\u68c0\u67e5\u6700\u957f\u7a7a\u623f\u957f\u5ea6\u7684\u4e09\u79cd\u60c5\u51b5. \u4e00\u65e6\u627e\u5230\u89e3, \u7acb\u5373\u7ed3\u675f\u67e5\u8be2.  \n\n3. \u6807\u8bb0\u5165\u4f4f.  \n( \u4e0d\u4f1a\u53bb\u505a\u677f\u9898\u5427. )  \n\n\u4e0a\u4ee3\u7801, $class$\u6ce8\u610f\u907f\u96f7, \u98ce\u9a9a\u7801\u98ce\u6ce8\u610f\u907f\u96f7.\n```cpp\n#include <cstdio>\n#include <iostream>\n\n#define Int register int\n\nusing namespace std;\n\ninline int rint () {\n\tInt x = 0, f = 1; register char s = getchar ();\n\tfor ( ; s < '0' || '9' < s; s = getchar () ) f = s == '-' ? -f : f;\n\tfor ( ; '0' <= s && s <= '9'; s = getchar () ) x = ( x << 3 ) + ( x << 1 ) + ( s ^ '0' );\n\treturn x * f;\n}\n\nconst int MAXN = 50000;\nint n, m, Ans;\n\nclass Segment_Tree {\nprivate:\n\tstruct Node {\n\t\tint l, r, Lmax, Rmax, Secmax, Lazy;\n\t} *Tree;\npublic:\n\tinline int CompSecmax () { return Tree[1].Secmax; }\n\tinline void Build ( const int i, const int l, const int r, const int SizeofTree = 0 ) {\n\t\tif ( i == 1 ) Tree = new Node[SizeofTree] ();\n\t\tTree[i] = { l, r, r - l + 1, r - l + 1, r - l + 1 };\n\t\tif ( l == r ) return ;\n\t\tint mid = l + r >> 1;\n\t\tthis -> Build ( i << 1, l, mid );\n\t\tthis -> Build ( i << 1 | 1, mid + 1, r );\n\t}\n\tinline void Spread ( const int i ) {\n\t\tif ( ! Tree[i].Lazy ) return ;\n\t\tif ( ~ Tree[i].Lazy ) {\n\t\t\tTree[i << 1].Lmax = Tree[i << 1].Rmax = Tree[i << 1].Secmax = Tree[i << 1].r - Tree[i << 1].l + 1;\n\t\t\tTree[i << 1 | 1].Lmax = Tree[i << 1 | 1].Rmax = Tree[i << 1 | 1].Secmax = Tree[i << 1 | 1].r - Tree[i << 1 | 1].l + 1;\n\t\t} else {\n\t\t\tTree[i << 1].Lmax = Tree[i << 1].Rmax = Tree[i << 1].Secmax = 0;\n\t\t\tTree[i << 1 | 1].Lmax = Tree[i << 1 | 1].Rmax = Tree[i << 1 | 1].Secmax = 0;\n\t\t}\n\t\tTree[i << 1].Lazy = Tree[i << 1 | 1].Lazy = Tree[i].Lazy;\n\t\tTree[i].Lazy = 0;\n\t}\n\tinline void Push_up ( const int i ) {\n\t\tTree[i].Lmax = Tree[i << 1].Lmax, Tree[i].Rmax = Tree[i << 1 | 1].Rmax;\n\t\tTree[i].Secmax = max ( Tree[i << 1].Secmax, Tree[i << 1 | 1].Secmax ); // \u4e0d\u8de8\u754c\n\t\tTree[i].Secmax = max ( Tree[i].Secmax, Tree[i << 1].Rmax + Tree[i << 1 | 1].Lmax ); // \u8de8\u754c\n\t\tif ( Tree[i << 1].Lmax == Tree[i << 1].r - Tree[i << 1].l + 1 ) { // \u8d2f\u901a \n\t\t\tTree[i].Lmax += Tree[i << 1 | 1].Lmax;\n\t\t}\n\t\tif ( Tree[i << 1 | 1].Rmax == Tree[i << 1 | 1].r - Tree[i << 1 | 1].l + 1 ) {\n\t\t\tTree[i].Rmax += Tree[i << 1].Rmax;\n\t\t}\n\t}\n\tinline void Check_out ( const int i, const int l, const int r ) {\n\t\tif ( r < Tree[i].l || Tree[i].r < l ) return ;\n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) {\n\t\t\tTree[i].Lmax = Tree[i].Rmax = Tree[i].Secmax = Tree[i].r - Tree[i].l + 1;\n\t\t\tTree[i].Lazy = 1;\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tthis -> Check_out ( i << 1, l, r );\n\t\tthis -> Check_out ( i << 1 | 1, l, r );\n\t\tthis -> Push_up ( i );\n\t}\n\tinline int Check_in ( const int i, const int d ) {\n\t\tif ( Tree[i].Secmax < d ) return 0;\n\t\tif ( Tree[i].l == Tree[i].r ) {\n\t\t\treturn Tree[i].l;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tint lret = Check_in ( i << 1, d );\n\t\tif ( lret ) return lret;\n\t\tif ( Tree[i << 1].Rmax + Tree[i << 1 | 1].Lmax >= d ) return Tree[i << 1].r - Tree[i << 1].Rmax + 1;\n\t\treturn Check_in ( i << 1 | 1, d );\n\t}\n\tinline void Cover ( const int i, const int l, const int r ) {\n\t\tif ( r < Tree[i].l || Tree[i].r < l ) return ;\n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) {\n\t\t\tTree[i].Lmax = Tree[i].Rmax = Tree[i].Secmax = 0;\n\t\t\tTree[i].Lazy = -1;\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tthis -> Cover ( i << 1, l, r );\n\t\tthis -> Cover ( i << 1 | 1, l, r );\n\t\tthis -> Push_up ( i );\n\t}\n} SegTree;\n\ninline void Work () {\n\tn = rint (), m = rint ();\n\tSegTree.Build ( 1, 1, n, n << 2 );\n\twhile ( m -- ) {\n\t\tstatic int Opr, x, d;\n\t\tscanf ( \"%d\", &Opr );\n\t\tif ( Opr == 1 ) {\n\t\t\tscanf ( \"%d\", &d );\n\t\t\tif ( SegTree.CompSecmax () < d ) {\n\t\t\t\tputs ( \"0\" );\n\t\t\t} else {\n\t\t\t\tint l = SegTree.Check_in ( 1, d );\n\t\t\t\tprintf ( \"%d\\n\", l );\n\t\t\t\tSegTree.Cover ( 1, l, l + d - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\tscanf ( \"%d %d\", &x, &d );\n\t\t\tSegTree.Check_out ( 1, x, x + d - 1 );\n\t\t}\n\t}\n}\n\nint main () {\n//\tfreopen ( \"hotel.in\", \"r\", stdin );\n//\tfreopen ( \"hotel.out\", \"w\", stdout );\n\tWork ();\n\treturn 0;\n}\n```",
        "postTime": 1565941311,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "Aug. 16th, 2019---Hotel\u9898\u89e3"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P2894)\u770b\u9898\u76ee\u3002\n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7ebf\u6bb5\u6811\u5165\u95e8\u9898\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u91cc\u9762\u7ef4\u62a4\u4e09\u4e2a\u4e1c\u897f\u2014\u2014\u4ece\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u7684\u4e00\u6bb5\u7a7a\u623f\u95f4\u7684\u957f\u5ea6\uff1b\u4ece\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u957f\u7684\u4e00\u6bb5\u7a7a\u623f\u95f4\u7684\u957f\u5ea6\uff1b\u8be5\u533a\u95f4\u5185\u6700\u957f\u7684\u4e00\u6bb5\u7a7a\u623f\u95f4\u7684\u957f\u5ea6\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4fee\u6539\u5c31\u4e0d\u8bf4\u4e86\uff1b\u524d\u4e24\u4e2a\u4fe1\u606f\u53ef\u4ee5\u7528\u6765\u5408\u5e76\u51fa\u7b2c\u4e09\u4e2a\u4fe1\u606f\uff1b\u6709\u4e86\u7b2c\u4e09\u4e2a\u4fe1\u606f\u5c31\u53ef\u4ee5\u7528\u6765\u67e5\u8be2\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u67e5\u8be2\u5c31\u662f......\u66b4\u529b\u904d\u5386\u8fd9\u68f5\u6811\u3002\u8bb0\u5f97\u7528\u7b2c\u4e09\u4e2a\u4fe1\u606f\u6765\u526a\u679d\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#define len( a ) ( segTree[a].r - segTree[a].l + 1 )\n//#define __DEBUG\n\nconst int MAXN = 50005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct segmentTreeNode\n{\n\tint l, r;\n\tint lEmp, rEmp, emp;\n\tint tag;\n}segTree[MAXN << 2];\n\nint N, M;\n\nvoid upt( const int now )\n{\n\tif( segTree[now].l == segTree[now].r ) return;\n\tsegTree[now].lEmp = segTree[now << 1].lEmp == len( now << 1 ) ? segTree[now << 1 | 1].lEmp + len( now << 1 ) : segTree[now << 1].lEmp;\n\tsegTree[now].rEmp = segTree[now << 1 | 1].rEmp == len( now << 1 | 1 ) ? segTree[now << 1].rEmp + len( now << 1 | 1 ) : segTree[now << 1 | 1].rEmp;\n\tsegTree[now].emp = MAX( MAX( segTree[now << 1].emp, segTree[now << 1 | 1].emp ), segTree[now << 1].rEmp + segTree[now << 1 | 1].lEmp );\n}\n\nvoid normalize( const int now )\n{\n\tif( segTree[now].l == segTree[now].r ) return;\n\tif( segTree[now].tag )\n\t{\n\t\tif( segTree[now].tag > 0 )\n\t\t{\n\t\t\tsegTree[now << 1].lEmp = segTree[now << 1].rEmp = segTree[now << 1].emp = 0;\n\t\t\tsegTree[now << 1 | 1].lEmp = segTree[now << 1 | 1].rEmp = segTree[now << 1 | 1].emp = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsegTree[now << 1].lEmp = segTree[now << 1].rEmp = segTree[now << 1].emp = len( now << 1 );\n\t\t\tsegTree[now << 1 | 1].lEmp = segTree[now << 1 | 1].rEmp = segTree[now << 1 | 1].emp = len( now << 1 | 1 );\n\t\t}\n\t\tsegTree[now << 1].tag = segTree[now << 1 | 1].tag = segTree[now].tag;\n\t\tsegTree[now].tag = 0;\n\t}\n}\n\nvoid build( const int now, const int left, const int right )\n{\n\tsegTree[now].l = left, segTree[now].r = right;\n\tif( left == right )\n\t{\n\t\tsegTree[now].lEmp = segTree[now].rEmp = segTree[now].emp = 1;\n\t\treturn;\n\t}\n\tbuild( now << 1, left, ( left + right ) >> 1 );\n\tbuild( now << 1 | 1, ( ( left + right ) >> 1 ) + 1, right );\n\tupt( now );\n}\n\nvoid update( const int now, const int segL, const int segR )\n{\n\t#ifdef __DEBUG\n\tsegmentTreeNode &node1 = segTree[now];\n\t#endif\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR )\n\t{\n\t\tsegTree[now].lEmp = segTree[now].rEmp = segTree[now].emp = 0;\n\t\tsegTree[now].tag = 1;\n\t\treturn;\n\t}\n\tif( segTree[now].l == segTree[now].r ) return;\n\tnormalize( now );\n\tupdate( now << 1, segL, segR );\n\tupdate( now << 1 | 1, segL, segR );\n\tupt( now );\n}\n\nvoid clean( const int now, const int segL, const int segR )\n{\n\t#ifdef __DEBUG\n\tsegmentTreeNode &node2 = segTree[now];\n\t#endif\n\tif( segR < segTree[now].l || segTree[now].r < segL ) return;\n\tif( segL <= segTree[now].l && segTree[now].r <= segR )\n\t{\n\t\tsegTree[now].lEmp = segTree[now].rEmp = segTree[now].emp = len( now );\n\t\tsegTree[now].tag = -1;\n\t\treturn;\n\t}\n\tif( segTree[now].l == segTree[now].r ) return;\n\tnormalize( now );\n\tclean( now << 1, segL, segR );\n\tclean( now << 1 | 1, segL, segR );\n\tupt( now );\n}\n\nint query( const int now, const int length )\n{\n\t#ifdef __DEBUG\n\tsegmentTreeNode &node3 = segTree[now];\n\t#endif\n\tif( segTree[now].emp < length ) return 0;\n\tif( segTree[now].l == segTree[now].r ) return segTree[now].l;\n\tint val = 0;\n\tnormalize( now );\n\tval = query( now << 1, length );\n\tif( val ) return val;\n\tif( segTree[now << 1].rEmp + segTree[now << 1 | 1].lEmp >= length )\n\t\treturn segTree[now << 1].r - segTree[now << 1].rEmp + 1;\n\treturn query( now << 1 | 1, length );\n}\n\nint main()\n{\n//\tfreopen( \"hotel.in\", \"r\", stdin );\n//\tfreopen( \"hotel.out\", \"w\", stdout );\n\tint op, x, d, res;\n\tread( N ), read( M );\n\tbuild( 1, 1, N );\n\twhile( M -- )\n\t{\n\t\tread( op );\n\t\tif( op & 1 )\n\t\t{\n\t\t\tread( d );\n\t\t\tres = query( 1, d );\n\t\t\twrite( res ), putchar( '\\n' );\n\t\t\tif( res ) update( 1, res, res + d - 1 );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tread( x ), read( d );\n\t\t\tclean( 1, x, x + d - 1 );\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1565940583,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "19\u5e74\u6691\u5047\u9ad8\u4e8c\u7b2c\u5341\u516b\u573a\u2014\u2014[LG P2894][USACO08FEB]\u9152\u5e97Hotel"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u5c06\u9898\u76ee\u7b80\u5316\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u5b9e\u73b0$2$\u4e2a\u64cd\u4f5c\uff1a\n\n1\u3001\u8ba2\u623f:\u76f8\u5f53\u4e8e\u67e5\u8be2\u662f\u5426\u6709\u8fde\u7eed$D$\u4e2a\u4f4d\u7f6e\u662f\u7a7a\u7684\uff0c\u5982\u679c\u6709\u8f93\u51fa\u6700\u5de6\u7aef\u70b9\n\n2\u3001\u9000\u623f:\u76f8\u5f53\u4e8e\u5c06$X$\u5230$X+D-1$\u8fd9\u6bb5\u4f4d\u7f6e\u7f6e\u4e3a\u7a7a\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u9053\u652f\u6301\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u9898\u3002\n\n\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u7ef4\u62a4$4$\u4e2a\u53d8\u91cf\uff1a\n\n1\u3001$lm$\u4ece\u5de6\u6570\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684$0$\n\n2\u3001$rm$\u4ece\u53f3\u6570\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684$0$\n\n3\u3001$m$\u6574\u4e2a\u533a\u95f4\u6700\u591a\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684$0$\n\n4\u3001$sum$\u533a\u95f4\u7684\u957f\u5ea6\n\n\uff08\u8bfb\u8005\uff1a\u4ec0\u4e48\uff01\uff1f\u4e0d\u7528\u5ef6\u8fdf\u6807\u8bb0\uff08\u4fd7\u79f0$lazy$\u6807\u5fd7\uff09\u5417\uff1f\uff09\n\n\uff08\u6211\uff1a...\u5ef6\u8fdf\u6807\u8bb0\u8fd8\u8981\u5199\u5728\u8fd9\u91cc\u5417\uff1f\u533a\u95f4\u4fee\u6539\u4e0d\u662f\u80af\u5b9a\u9700\u8981\u5417?\uff09\n\n\u4e00\u5f00\u59cb\uff0c\u56e0\u4e3a\u6574\u4e2a\u533a\u95f4\u90fd\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u8fd9\u4e9b\u7684\u503c\u90fd\u8d4b\u4e3a\u533a\u95f4\u7684\u957f\u5ea6\u3002\n\n\u5f53\u9047\u5230\u4e00\u4e2a\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5c31\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u67e5\u8be2\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6700\u540e\u5f97\u5230\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u9760\u5de6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u90fd\u5148\u5224\u65ad\u5de6\u8fb9\u7684\u8fde\u7eed$0$\u7684\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u6211\u4eec\u9700\u8981\u7684$D$\uff0c\u5982\u679c\u662f\u5c31\u76f4\u63a5\u8fd4\u56de\u5de6\u7aef\u70b9\uff0c\u7136\u540e\uff0c\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5224\u65ad\u5224\u65ad\u4e2d\u95f4\u548c\u53f3\u8fb9\u7684\u90e8\u5206\u3002\n\n\u5f53\u9047\u5230\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5c31\u6b63\u5e38\u4fee\u6539\uff0c\u53ea\u662f\u5728\u6700\u540e\u4e0a\u4f20\u6807\u5fd7\u7684\u65f6\u5019\u4f1a\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u70b9\uff0c\u6709\u51e0\u79cd\u60c5\u51b5\u9700\u8981\u5224\u65ad\u3002\n\n\u6700\u540e\uff0c\u56e0\u4e3a\u6211\u4eec\u6d89\u53ca\u4e86\u533a\u95f4\u4fee\u6539\uff0c\u6240\u4ee5\u6bcf\u505a\u4e00\u6b65\u64cd\u4f5c\u90fd\u8981\u4e0b\u653e\u6807\u5fd7\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#define l(i) t[i].l\n#define r(i) t[i].r\n#define m(i) t[i].m\n#define lm(i) t[i].lm\n#define rm(i) t[i].rm\n#define sum(i) t[i].sum\n#define add(i) t[i].add\nusing namespace std;\nstruct ppap \n{\n\tint l,r,m,lm,rm,sum,add;\n}t[200010];\nint n,m;\nint pushup(int p)//\u4e0a\u4f20\u6807\u5fd7\n{\n  if(sum(2*p)==m(2*p)) lm(p)=sum(2*p)+lm(2*p+1);\n  else lm(p)=lm(2*p);\n  if(sum(2*p+1)==m(2*p+1)) rm(p)=sum(2*p+1)+rm(2*p);\n  else rm(p)=rm(2*p+1);\n  m(p)=max(m(2*p),m(2*p+1));\n  m(p)=max(m(p),rm(2*p)+lm(2*p+1));\n}\nint pushdown(int p)//\u4e0b\u653e\u6807\u5fd7\n{\n  int add=add(p);\n\tadd(p)=0;\n  if(l(p)==r(p)) return 0;\n  if(add==1){\n    lm(2*p)=rm(2*p)=m(2*p)=sum(2*p);\n    lm(2*p+1)=rm(2*p+1)=m(2*p+1)=sum(2*p+1);\n    add(2*p)=add(2*p+1)=1;\n  }\n  else if(add==2){\n    lm(2*p)=rm(2*p)=m(2*p)=0;\n    lm(2*p+1)=rm(2*p+1)=m(2*p+1)=0;\n    add(2*p)=add(2*p+1)=2;\n  }\n}\nint build(int p,int l,int r)//\u5efa\u6811 \n{\n  l(p)=l;\n\tr(p)=r;\n  lm(p)=rm(p)=m(p)=sum(p)=r-l+1;\n  if(l==r) return 0;\n  int mid=(l+r)>>1;\n  build(2*p,l,mid);\n\tbuild(2*p+1,mid+1,r);\n}\nint change(int p,int x,int y,int f)//\u533a\u95f4\u4fee\u6539 \n{\n  pushdown(p);\n  int l=l(p),r=r(p);\n  if(l==x&&y==r){\n    if(f==1) lm(p)=rm(p)=m(p)=sum(p);\n    else lm(p)=rm(p)=m(p)=0;\n    add(p)=f;\n    return 0;\n  }\n  int mid=(l+r)>>1;\n  if(mid>=y) change(2*p,x,y,f);\n  else if(mid<x) change(2*p+1,x,y,f);\n  else{\n    change(2*p,x,mid,f);\n    change(2*p+1,mid+1,y,f);\n  }\n  pushup(p);\n}\nint ask(int p,int x)//\u533a\u95f4\u67e5\u8be2 \n{\n  pushdown(p);\n  int l=l(p),r=r(p),mid=(l+r)>>1;\n  if(l==r) return l;\n  if(m(2*p)>=x) return ask(2*p,x);\n  if(rm(2*p)+lm(2*p+1)>=x) return mid-rm(2*p)+1;\n  return ask(2*p+1,x);\n} \nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  build(1,1,n);\n  for(int i=1;i<=m;i++){\n    int f,x,y;\n    scanf(\"%d\",&f);\n    if(f==1){\n      scanf(\"%d\",&x);\n      if(t[1].m<x) cout<<0<<endl;\n      else{\n\t\t\t\tint p=ask(1,x);\n\t\t\t\tcout<<p<<endl;\n\t\t\t\tchange(1,p,p+x-1,2);\n\t\t\t}\n    }\n    else{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tchange(1,x,x+y-1,1);\n\t\t}\n  }\n}\n```",
        "postTime": 1563697428,
        "uid": 43373,
        "name": "jacky567",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "#### \u8fd9\u9053\u9898\u662f\u9053\u7ebf\u6bb5\u6811\u7684\u597d\u9898\uff0c\u503c\u5f97\u4e00\u505a\n\n\u4e3a\u4ec0\u4e48\u8bf4\u662f\u9053\u7ebf\u6bb5\u6811\u597d\u9898\u5462\uff0c\u56e0\u4e3a\u5b83\u4e0d\u62d8\u4e8e\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\uff0c\u5728\u67e5\u8be2\u90e8\u5206\u975e\u5e38~~\u6bd2\u7624~~\u6709\u8da3\u3002\n\n\u56de\u5230\u6b63\u9898\uff0c\u770b\u5230\u533a\u95f4\u64cd\u4f5c\uff0c\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u548c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u76f8\u4f3c\uff0c\u5b58\u50a8\u6700\u5927\u8fde\u7eed\u7a7a\u623f\uff0c\u6700\u5927\u524d\u7f00\u7a7a\u623f\u548c\u6700\u5927\u540e\u7f00\u7a7a\u623f\u3002\n\n\u8fd8\u6709\u4e00\u70b9\uff1a$tag$\u6709\u4e09\u79cd\u503c\uff0c\u4ee3\u8868\u533a\u95f4\u9000\u623f\uff08$2$\uff09\uff0c\u533a\u95f4\u5165\u4f4f\uff08$1$\uff09\uff0c\u6ca1\u6709$tag$\uff08$0$\uff09\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f$pushup$\u64cd\u4f5c\u548c$pushdown$\u64cd\u4f5c\uff08\u5176\u4ed6\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\uff09\n\n$code:$\uff08$pushup$\u64cd\u4f5c\u548c$pushdown$\u64cd\u4f5c\uff09\n```\nvoid up(int root){\n\ta[root].lm=a[ls].lm;\n\ta[root].rm=a[rs].rm;\n\ta[root].sum=max(max(a[ls].sum,a[rs].sum),a[ls].rm+a[rs].lm);//sum\u53ea\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\u53ea\u5305\u542b\u5de6\u5b69\u5b50\uff0c\u6a2a\u8de8\u5de6\u53f3\u5b69\u5b50\uff0c\u53ea\u5305\u542b\u53f3\u5b69\u5b50\n\tif(a[ls].sum==a[ls].len)\n\t\ta[root].lm=a[ls].sum+a[rs].lm;\n\tif(a[rs].sum==a[rs].len)\n\t\ta[root].rm=a[rs].sum+a[ls].rm;//\u6700\u5927\u524d\u7f00\u7a7a\u623f\u548c\u6700\u5927\u540e\u7f00\u7a7a\u623f\n\treturn;\n}\nvoid pd(int root){\n\tif(!a[root].tag)return;\n\tif(a[root].tag==1){\n\t\ta[ls].sum=0;a[ls].lm=0;a[ls].rm=0;a[ls].tag=1;\n\t\ta[rs].sum=0;a[rs].lm=0;a[rs].rm=0;a[rs].tag=1;//\u533a\u95f4\u5165\u4f4f\uff0c\u5168\u7f6e0\n\t}\n\telse{\n\t\ta[ls].sum=a[ls].len;a[ls].lm=a[ls].len;\n\t\ta[ls].rm=a[ls].len;a[ls].tag=2;\n\t\ta[rs].sum=a[rs].len;a[rs].lm=a[rs].len;\n\t\ta[rs].rm=a[rs].len;a[rs].tag=2;//\u533a\u95f4\u9000\u623f\uff0c\u5168\u7f6elen\n\t}\n\ta[root].tag=0;\n}\n```\n\u8fd8\u6709\u4e00\u4e2a\u91cd\u70b9\uff08\u4e5f\u662f\u4e2a\u4eba\u8ba4\u4e3a\u7684\u672c\u4f53\u6700\u96be\u70b9\uff09\uff1a$query$\u600e\u4e48\u5199\uff1f\n\n\u5176\u5b9e\u8fd9\u91cc\u7684$query$\u5df2\u7ecf\u4e0d\u592a\u50cf\u7ebf\u6bb5\u6811\u7684$query$\u4e86\n\n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u5230\u7684\u8282\u70b9\uff0c\u5982\u679c\u5de6\u5b69\u5b50\u6709\u8db3\u591f\u7a7a\u623f\u5c31\u9012\u5f52\u5230\u5de6\u5b69\u5b50\uff0c\u5426\u5219\u6a2a\u8de8\u4e24\u4e2a\u5b69\u5b50\uff0c\u7136\u540e\u518d\u9012\u5f52\u53f3\u5b69\u5b50\u3002\n\n$code:$\n```\nint query(int root,int l,int r,int k){\n\tpd(root);\n\tif(a[root].sum<k)return 0;\n\tif(a[ls].sum>=k)return query(ls,l,mid,k);//\u5de6\u5b69\u5b50\n\tif(a[ls].rm+a[rs].lm>=k)return mid-a[ls].rm+1;//\u6a2a\u8de8\n\tif(a[rs].sum>=k)return query(rs,mid+1,r,k);//\u53f3\u5b69\u5b50\n}\n```\n\u6240\u6709\u7684\u96be\u70b9\u90fd\u653b\u514b\u4e86\uff0c\u9664\u6b64\u4ee5\u5916\uff0c\u8fd8\u8981\u6ce8\u610f\uff1a\n+ \u522b\u76f4\u63a5\u7528$cin$\n+ \u8bb0\u5f97$pushdown$\u548c$pushup$\n+ ~~\u522b\u628a$ls$\u548c$rs$\u5f04\u6df7~~\n\n\u6700\u540e\u5c31\u662f\u5b8c\u6574\u4ee3\u7801\u4e86~\n```\n#include<iostream>\nusing namespace std;\n#define ls (root<<1)\n#define rs (root<<1|1)\n#define mid ((l+r)>>1)\nstruct point{\n\tint sum,lm,rm,len,tag;\n} a[400005];\nvoid up(int root){\n\ta[root].lm=a[ls].lm;\n\ta[root].rm=a[rs].rm;\n\ta[root].sum=max(max(a[ls].sum,a[rs].sum),a[ls].rm+a[rs].lm);//sum\u53ea\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\u53ea\u5305\u542b\u5de6\u5b69\u5b50\uff0c\u6a2a\u8de8\u5de6\u53f3\u5b69\u5b50\uff0c\u53ea\u5305\u542b\u53f3\u5b69\u5b50\n\tif(a[ls].sum==a[ls].len)\n\t\ta[root].lm=a[ls].sum+a[rs].lm;\n\tif(a[rs].sum==a[rs].len)\n\t\ta[root].rm=a[rs].sum+a[ls].rm;//\u6700\u5927\u524d\u7f00\u7a7a\u623f\u548c\u6700\u5927\u540e\u7f00\u7a7a\u623f\n\treturn;\n}\nvoid pd(int root){\n\tif(!a[root].tag)return;\n\tif(a[root].tag==1){\n\t\ta[ls].sum=0;a[ls].lm=0;a[ls].rm=0;a[ls].tag=1;\n\t\ta[rs].sum=0;a[rs].lm=0;a[rs].rm=0;a[rs].tag=1;//\u533a\u95f4\u5165\u4f4f\uff0c\u5168\u7f6e0\n\t}\n\telse{\n\t\ta[ls].sum=a[ls].len;a[ls].lm=a[ls].len;\n\t\ta[ls].rm=a[ls].len;a[ls].tag=2;\n\t\ta[rs].sum=a[rs].len;a[rs].lm=a[rs].len;\n\t\ta[rs].rm=a[rs].len;a[rs].tag=2;//\u533a\u95f4\u9000\u623f\uff0c\u5168\u7f6elen\n\t}\n\ta[root].tag=0;\n}\nvoid build(int root,int l,int r){\n\ta[root].len=r-l+1;a[root].sum=a[root].len;\n\ta[root].lm=a[root].len;a[root].rm=a[root].len;//\u7b80\u5355\u521d\u59cb\u5316\n\ta[root].tag=0;\n\tif(l==r)return;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n}\nvoid change1(int root,int l,int r,int ql,int qr){//\u5165\u4f4f \n\tpd(root);\n\tif(ql<=l&&qr>=r){//\u6253tag\n\t\ta[root].tag=1;\n\t\ta[root].sum=0;a[root].lm=0;a[root].rm=0;\n\t\treturn;\n\t}\n\tif(ql<=mid)change1(ls,l,mid,ql,qr);//\u9012\u5f52\u5de6\u5b69\u5b50\n\tif(qr>mid)change1(rs,mid+1,r,ql,qr);//\u9012\u5f52\u53f3\u5b69\u5b50\n\tup(root);\n\treturn;\n}\nvoid change2(int root,int l,int r,int ql,int qr){//\u9000\u623f \n\tpd(root);\n\tif(ql<=l&&qr>=r){//\u6253tag\n\t\ta[root].sum=a[root].len;a[root].lm=a[root].len;\n\t\ta[root].rm=a[root].len;a[root].tag=2;\n\t\treturn;\n\t}\n\tif(ql<=mid)change2(ls,l,mid,ql,qr);//\u9012\u5f52\u5de6\u5b69\u5b50\n\tif(qr>mid)change2(rs,mid+1,r,ql,qr);//\u9012\u5f52\u53f3\u5b69\u5b50\n\tup(root);\n\treturn;\n}\nint query(int root,int l,int r,int k){\n\tpd(root);\n\tif(a[root].sum<k)return 0;\n\tif(a[ls].sum>=k)return query(ls,l,mid,k);//\u5de6\u5b69\u5b50\n\tif(a[ls].rm+a[rs].lm>=k)return mid-a[ls].rm+1;//\u6a2a\u8de8\n\tif(a[rs].sum>=k)return query(rs,mid+1,r,k);//\u53f3\u5b69\u5b50\n}\nint mian()\n{\n\tios::sync_with_stdio(false);cin.tie(0);\n\tint n,m,opt,x,y,t;\n\tcin>>n>>m;\n\tbuild(1,1,n);\n\tfor(int i=0;i<m;i++){\n\t\tcin>>opt;\n\t\tif(opt==1){\n\t\t\tcin>>x;\n\t\t\tt=query(1,1,n,x);\n\t\t\tcout<<t<<endl;\n\t\t\tif(t)change1(1,1,n,t,t+x-1);\n\t\t}\n\t\telse{\n\t\t\tcin>>x>>y;\n\t\t\tchange2(1,1,n,x,x+y-1);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u5343\u4e07\u522b$ctrl C+V$\uff0c\u540e\u679c\u81ea\u8d1f",
        "postTime": 1554453980,
        "uid": 55959,
        "name": "AC_Automation",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "Blog\u5730\u5740:[\u849f\u84bb\u7684Blog](https://www.luogu.org/blog/zgj-bloom)\n\n\u524d\u51e0\u5929\u5728\u540c\u5b66\u7684\u534f\u52a9\u4e0b\u5f00\u901a\u4e86\u6d1b\u8c37\u535a\u5ba2\uff0c\u4f46\u4e00\u76f4\u6ca1\u6709\u60f3\u597d\u7b2c\u4e00\u7bc7\u5199\u4ec0\u4e48\n\n\u5728\u4e0a\u5348~~**\u7528\u5b9e\u529b**~~AK\uff08**\u624b\u52a8\u6ed1\u7a3d**\uff09\u4e4b\u540e\uff0c\u4e0b\u5348\u9047\u5230\u4e86\u4e00\u9053\u8ba9\u6211\u5d29\u6e83\u7684\u9898\n\n\u7531\u4e8e\u6211\u663e\u793a\u5bf9\u5b83\u803d\u8bef\u4e86\u6211\u4e00\u4e0b\u5348\u65f6\u95f4\u800c\u4ea7\u751f\u7684\u7684\u75db\u6068\u2014\u2014\u5c31\u5b83\u4e86\uff01\n\n\u5728\u7ecf\u8fc7\u4e0a\u9762\u7684\u611f\u6168\u4e4b\u540e\uff0c\u4ee5\u4e0b\u624d\u662f\u6b63\u6587\n\n\n\u8fd9\u9053\u9898\u4ee5\u524d\u505a\u8fc7\u4e00\u9053\u7c7b\u4f3c\u7684\uff0c\u6240\u4ee5\u4e86\u89e3\u4e00\u4e9b\u7ebf\u6bb5\u6811\u533a\u95f4\u5904\u7406\u7684~~**\u5957\u8def**~~\u65b9\u6cd5\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u6700\u957f\u8fde\u7eed0\u7684\u4e2a\u6570\uff0c~~**\u800c\u6839\u636e\u5957\u8def**~~\uff0c\u8fd9\u6837\u505a\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u503c\n\n\u5206\u522b\u662f\n\n1. $lans$:\u4e00\u4e2a\u533a\u95f4\u4ece\u5de6\u7aef\u5f00\u59cb\u6700\u957f\u8fde\u7eed0\u7684\u4e2a\u6570\n\n2. $rans$:\u4e00\u4e2a\u533a\u95f4\u4ece\u53f3\u7aef\u5f00\u59cb\u6700\u957f\u8fde\u7eed0\u7684\u4e2a\u6570\n\n3. $ans$:\u4e00\u4e2a\u533a\u95f4\u5185\u6700\u957f\u8fde\u7eed0\u7684\u4e2a\u6570\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u533a\u95f4\u5408\u5e76\u4e86\n\n\u4f46\u67e5\u627e\u65f6\uff0c\u6211\u4eec\u627e\u7684\u5e76\u4e0d\u662f\u6700\u957f\u8fde\u7eed0\uff0c\u800c\u662f\u957f\u5ea6\u4e3ax\u7684\u533a\u95f4\n\n\u90a3\u4e48\u5982\u679c \u6700\u957f\u8fde\u7eed0\u4e2a\u6570$> x$ \u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5c31\u662f\u5408\u6cd5\u7684\n\n\u6211\u4eec\u60f3\u4e00\u60f3\uff0c\u5982\u679c\u6211\u4eec\u679a\u4e3e\u5408\u6cd5\u533a\u95f4\u7684\u8bdd\uff0c\u4e00\u5b9a\u662f\u4ece \u5408\u6cd5\u533a\u95f4\u5de6\u7aef\u70b9\u662f\u5927\u533a\u95f4\u7684\u5de6\u7aef\u70b9  --->  \u5408\u6cd5\u533a\u95f4\u5728\u5927\u533a\u95f4\u91cc\u9762  --->  \u5408\u6cd5\u533a\u95f4\u53f3\u7aef\u70b9\u662f\u5927\u533a\u95f4\u7684\u53f3\u7aef\u70b9  \u8fd9\u6837\u679a\u4e3e\n\n\u90a3\u4e48\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u4e86\u6700\u957f\u8fde\u7eed0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e00\u6b65\u7684\u6700\u4f18\u503c\u76f4\u63a5\u53d6\u51fa\n\n\u90a3\u4e48\u5c06\u8fd9\u4e09\u4e2a\u679a\u4e3e\u6b65\u9aa4\u76f4\u63a5\u6309\u987a\u5e8f\u6267\u884c\u5c31\u884c\u4e86\n\n\u67e5\u8be2\u5177\u4f53\u53ef\u4ee5\u8fd9\u6837\n\n\u2460 \u5982\u679c\u533a\u95f4\u6700\u957f\u8fde\u7eed0\u90fd\u6ca1\u6709$x$\u957f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u4e00\u5b9a\u4e0d\u53ef\u4ee5\uff0c\u8fd4\u56de0\n\n\u2461 \u5982\u679c\u5de6\u533a\u95f4\u6700\u957f\u8fde\u7eed0\u7684\u4e2a\u6570$> x$\uff0c\u90a3\u4e48\u76f4\u63a5\u9009\u53d6\u5de6\u533a\u95f4\u7684\u90a3\u4e2a\u533a\u95f4\u5373\u53ef\n\n\u2462 \u56e0\u4e3a\u5de6\u533a\u95f4\u7684$rans$\u548c\u53f3\u533a\u95f4\u7684$lans$\u4e5f\u662f\u8fde\u7eed\u7684\uff08\u753b\u4e2a\u533a\u95f4\u56fe\u5c31\u80fd\u660e\u767d\uff09\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u4eec\u4e24\u4e2a\u76f8\u52a0 $rans[lson]+lans[rson]> x$ \u7684\u8bdd\uff0c\u5c31\u76f8\u5f53\u4e8e\u5408\u6cd5\u533a\u95f4\u5728\u5728\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\u91cc\u9762\u4e86\uff0c\u4e5f\u662f\u5408\u6cd5\u7684\n\n\u2463\u5b9e\u5728\u6ca1\u6709\u529e\u6cd5\uff0c\u5c31\u53ea\u80fd\u770b\u4ece\u53f3\u533a\u95f4\u7684\u6700\u957f\u8fde\u7eed0\u662f\u5426\u5408\u6cd5\u4e86\n\n\u770b\u4e0d\u61c2\u7684 ---> \u770b\u4ee3\u7801\n\n```cpp\n// \u7801\u98ce\u88ab\u5f88\u591a\u4eba\u8bf4\u5947\u602a\uff0c\u51d1\u6d3b\u770b\u5427 \n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson (k*2)\n#define rson (k*2+1) \n#define mid ((l+r)/2)\n#define N 50010\nusing namespace std;\nint n,m;\nint ans[N*8],lans[N*8],rans[N*8],tag[N*8];\nvoid build(int k,int l,int r)\n{\n\tans[k]=lans[k]=rans[k]=r-l+1;// \u5f00\u59cb\u65f6\u533a\u95f4\u5168\u662f0\uff0c\u6709r-l+1\u4e2a \n\ttag[k]=-1;\n\tif(l==r) return;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\treturn;\n}\nvoid pushup(int k,int l,int r)\n{\n\tans[k]=max(rans[lson]+lans[rson],max(ans[lson],ans[rson]));\n\tif(lans[lson]==mid-l+1) lans[k]=lans[lson]+lans[rson];//\u8fd9\u91ccWA\u8fc7\u4e00\u6b21 \n\telse lans[k]=lans[lson];\n\tif(rans[rson]==r-mid) rans[k]=rans[rson]+rans[lson];\n\telse rans[k]=rans[rson];\n\treturn;\n}\nvoid pushdown(int k,int l,int r)\n{\n\tif(tag[k]==-1) return;\n\tans[lson]=(mid-l+1)*tag[k];\n\tlans[lson]=(mid-l+1)*tag[k];\n\trans[lson]=(mid-l+1)*tag[k];\n\ttag[lson]=tag[k];\n\tans[rson]=(r-mid)*tag[k];\n\tlans[rson]=(r-mid)*tag[k];\n\trans[rson]=(r-mid)*tag[k];\n\ttag[rson]=tag[k];\n\ttag[k]=-1;// \u4e0b\u4f20\u540e\u628a\u5927\u533a\u95f4\u5ef6\u8fdf\u6807\u8bb0\u6e05\u6389 \n\treturn;\n}\nint getans(int k,int l,int r,int x)\n{\n\tpushdown(k,l,r);\n\tif(ans[k]<x) return 0;\n\tif(r-l+1==x) return l; \n\tif(ans[lson]>=x) return getans(lson,l,mid,x);//\u5408\u6cd5\u533a\u95f4\u5728\u5de6\u533a\u95f4\u91cc    \n\tif(rans[lson]+lans[rson]>=x) return mid-rans[lson]+1;//\u5408\u6cd5\u533a\u95f4\u88ab\u5206\u6210\u4e24\u534a \n\treturn getans(rson,mid+1,r,x);//\u5408\u6cd5\u533a\u95f4\u5728\u53f3\u533a\u95f4\u91cc \n}\nvoid change(int k,int l,int r,int lx,int rx,int x)\n{\n\tpushdown(k,l,r);\n\tif(lx<=l && r<=rx)\n\t{\n\t\tans[k]=(r-l+1)*x;\n\t\tlans[k]=(r-l+1)*x;\n\t\trans[k]=(r-l+1)*x;\n\t\ttag[k]=x;\n\t\treturn;\n\t}\n\tif(lx<=mid) change(lson,l,mid,lx,rx,x);\n\tif(rx>mid) change(rson,mid+1,r,lx,rx,x);\n\tpushup(k,l,r);\n\treturn;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tbuild(1,1,n);//\u5efa\u6811 \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint cmd;\n\t\tscanf(\"%d\",&cmd);\n\t\tif(cmd==1)\n\t\t{\n\t\t\tint l,len;\n\t\t\tscanf(\"%d\",&len);\n\t\t\tif(len>ans[1])\n\t\t\t{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tl=getans(1,1,n,len);//\u9898\u76ee\u8be2\u95ee\u6700\u5f80\u5de6\u7684\u5408\u6cd5\u533a\u95f4\u5de6\u7aef\u70b9\u503c \n\t\t\tprintf(\"%d\\n\",l);\n\t\t\tchange(1,1,n,l,l+len-1,0);//\u8ba2\u623f\u540e\u628a\u90a3\u4e9b\u623f\u95f4\u5360\u4e0a \n\t\t}\n\t\telse\n\t\t{\n\t\t\tint l,len;\n\t\t\tscanf(\"%d%d\",&l,&len);\n\t\t\tchange(1,1,n,l,l+len-1,1);//\u9000\u623f\u540e\u628a\u90a3\u4e9b\u623f\u95f4\u8ba9\u51fa\u6765 \n\t\t\t\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u4e0d\u592a\u719f\u6089\u6d1b\u8c37\u7684\u7f16\u8f91\u5668\uff0c\u4e0d\u559c\u52ff\u55b7\uff0c\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u7684OI\u4e4b\u8def\u6709\u6240\u5e2e\u52a9\u3002",
        "postTime": 1550230721,
        "uid": 80672,
        "name": "Unaccepted",
        "ccfLevel": 0,
        "title": "[USACO 2008 FEB]Hotel(\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u535a\u5ba2)"
    },
    {
        "content": "\u6ca1\u6709pascal\u4ee3\u7801\u554a\uff0c\u6765\u4e00\u53d1\u3002\n\n\u8fd9\u9053\u9898\u662f\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811\u95ee\u9898\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u957f\u8fde\u7eed0\u7684\u957f\u5ea6\uff0c\u540c\u65f6\u8bb0\u5f55\u533a\u95f4\u5de6\u8d77\u6700\u957f\u8fde\u7eed0\u957f\u5ea6\u548c\u53f3\u8d77\u6700\u957f\u8fde\u7eed0\u957f\u5ea6\u5c31\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fe1\u606f\u7684\u5408\u5e76\u3002\n\n```cpp\nprogram rrr(input,output);\ntype\n  treetype=record\n     l,r,lmax,rmax,max,c:longint;    //l\u662f\u533a\u95f4\u5de6\u7aef\u70b9\u7f16\u53f7\uff0cr\u662f\u533a\u95f4\u53f3\u7aef\u70b9\u7f16\u53f7\uff0clmax\u662f\u533a\u95f4\u5de6\u8d77\u6700\u957f\u8fde\u7eed0\u957f\u5ea6\uff0crmax\u662f\u533a\u95f4\u53f3\u8d77\u6700\u957f\u8fde\u7eed0\u957f\u5ea6\uff0cmax\u662f\u533a\u95f4\u6700\u957f\u8fde\u7eed0\u957f\u5ea6\n  end;\nvar\n  a:array[0..200020]of treetype;\n  n,m,i,opt,x,y:longint;\nfunction max(a,b:longint):longint;\nbegin\n   if a>b then exit(a) else exit(b);\nend;\nprocedure build(k,l,r:longint);\nvar\n  mid,t:longint;\nbegin\n   t:=r-l+1;\n   a[k].l:=l;a[k].r:=r;a[k].max:=t;a[k].lmax:=t;a[k].rmax:=t;a[k].c:=-1;\n   if l=r then exit;\n   mid:=(l+r)>>1;\n   build(k+k,l,mid);\n   build(k+k+1,mid+1,r);\nend;\nprocedure pushdown(k:longint);\nvar\n  i,t:longint;\nbegin\n   if a[k].c=-1 then exit;\n   if a[k].l=a[k].r then begin a[k].c:=-1;exit; end;\n   i:=k+k;\n   if a[k].c=0 then\n      begin\n         t:=a[i].r-a[i].l+1;\n         a[i].lmax:=t;a[i].rmax:=t;a[i].max:=t;a[i].c:=0;\n         t:=a[i+1].r-a[i+1].l+1;\n         a[i+1].lmax:=t;a[i+1].rmax:=t;a[i+1].max:=t;a[i+1].c:=0;\n       end\n   else\n      begin\n         a[i].lmax:=0;a[i].rmax:=0;a[i].max:=0;a[i].c:=1;\n         a[i+1].lmax:=0;a[i+1].rmax:=0;a[i+1].max:=0;a[i+1].c:=1;\n      end;\n   a[k].c:=-1;\nend;\nfunction ask(k:longint):longint;\nvar\n  i:longint;\nbegin\n   pushdown(k);\n   i:=k+k;\n   if a[i].max>=x then exit(ask(i))\n   else if a[i].rmax+a[i+1].lmax>=x then exit(a[i].r-a[i].rmax+1)\n   else exit(ask(i+1));\nend;\nprocedure change1(k,x,y:longint);\nvar\n  mid,i:longint;\nbegin\n   pushdown(k);\n   if (x<=a[k].l) and (a[k].r<=y) then\n      begin a[k].lmax:=0;a[k].rmax:=0;a[k].max:=0;a[k].c:=1;exit; end;\n   mid:=(a[k].l+a[k].r)>>1;i:=k+k;\n   if x<=mid then change1(i,x,y);\n   if mid<y then change1(i+1,x,y);\n   if a[i].lmax=a[i].r-a[i].l+1 then a[k].lmax:=a[i].lmax+a[i+1].lmax else a[k].lmax:=a[i].lmax;   //\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u521a\u5f00\u59cb\u5bb9\u6613\u76f4\u63a5\u5199a[k].lmax:=a[i].lmax\n   if a[i+1].rmax=a[i+1].r-a[i+1].l+1 then a[k].rmax:=a[i].rmax+a[i+1].rmax else a[k].rmax:=a[i+1].rmax;   //\u8fd9\u91cc\u4e5f\u4e00\u6837\n   a[k].max:=max(max(a[i].max,a[i+1].max),a[i].rmax+a[i+1].lmax);\nend;\nprocedure change0(k,x,y:longint);\nvar\n  mid,t,i:longint;\nbegin\n   pushdown(k);\n   if (x<=a[k].l) and (a[k].r<=y) then\n      begin t:=a[k].r-a[k].l+1;a[k].lmax:=t;a[k].rmax:=t;a[k].max:=t;a[k].c:=0;exit; end;\n   mid:=(a[k].l+a[k].r)>>1;i:=k+k;\n   if x<=mid then change0(i,x,y);\n   if mid<y then change0(i+1,x,y);\n   if a[i].lmax=a[i].r-a[i].l+1 then a[k].lmax:=a[i].lmax+a[i+1].lmax else a[k].lmax:=a[i].lmax;   //\u8fd8\u6709\u8fd9\u513f\n   if a[i+1].rmax=a[i+1].r-a[i+1].l+1 then a[k].rmax:=a[i].rmax+a[i+1].rmax else a[k].rmax:=a[i+1].rmax;   //\u548c\u8fd9\u513f\n   a[k].max:=max(max(a[i].max,a[i+1].max),a[i].rmax+a[i+1].lmax);\nend;\nbegin\n   //assign(input,'r.in');assign(output,'r.out');reset(input);rewrite(output);\n   readln(n,m);\n   build(1,1,n);\n   for i:=1 to m do\n      begin\n         read(opt);\n         if opt=1 then\n            begin\n               readln(x);\n               if a[1].max<x then writeln(0)\n               else begin y:=ask(1);writeln(y);change1(1,y,y+x-1); end;\n            end\n         else begin readln(x,y);change0(1,x,x+y-1); end;\n      end;\n   //close(input);close(output);\nend.\n```",
        "postTime": 1488551711,
        "uid": 28023,
        "name": "McGrady",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "\u9996\u5148\u611f\u8c22\u4e00\u4e0b\u697c\u4e0b\u7684\u9898\u89e3\uff0c\u8fd9\u9053\u9898\u6211\u6709\u7ec6\u8282\u5199\u9519\u4e86\uff0c\u4e00\u76f48\u5206\uff0c\u5fc3\u7070\u610f\u51b7\uff0c\u6765\u770b\u4e86\u697c\u4e0b\u5927\u795e\u7684\u9898\u89e3\uff1b\n\n\u54c7\uff01\uff01\u8fd9\u4e48\u7e41\u7410\u7684\u7a0b\u5e8f\u90fd\u80fdAC\uff1f\uff1f\uff0c\u6211\u7684\u4e5f\u4e00\u5b9a\u53ef\u4ee5\uff01\uff01\uff01\n\n\u7136\u540e\u6211\u91cd\u62fe\u4fe1\u5fc3\uff0c\u52aa\u529b\u68c0\u67e5\uff0c\u5c31AC\u4e86\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#define Ll long long\nusing namespace std;\nstruct tree{\n    int xx,yy,l,r,m,p;//xx\uff0cyy\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u8303\u56f4\uff0cl,r\u4ee3\u8868\u8fd9\u6bb5\u533a\u95f4\u7684\u5de6\u53f3\u6700\u957f\u8fde\u7eed\u7a7a\u4f4d\uff0cm\u5c31\u662f\u6574\u6bb5\u533a\u95f4\u7684\u8fde\u7eed\u7a7a\u4f4d\uff0cp\u662flazy\u6807\u8bb0 \n}T[500000*8+1];\nint n,m,x,y,z,ans;\nvoid clean(int num){//\u8fd9\u4e2a\u663e\u7136\u5c31\u662flazy\u7684\u4e0b\u4f20 \n    if(T[num].xx==T[num].yy)return;\n    if(!T[num].p)return;\n    int k=num+num;\n    if(T[num].p==1){\n        T[k].l=T[k].m=T[k].r=T[k+1].l=T[k+1].m=T[k+1].r=0;\n        T[k].p=T[k+1].p=1;\n    }else{\n        T[k].l=T[k].m=T[k].r=T[k].yy-T[k].xx+1;\n        T[k+1].l=T[k+1].m=T[k+1].r=T[k+1].yy-T[k+1].xx+1;\n        T[k].p=T[k+1].p=2;\n    }\n    T[num].p=0;\n}\nvoid maketree(int x,int y,int num){\n    T[num].xx=x;T[num].yy=y;\n    T[num].l=T[num].r=T[num].m=y-x+1;//\u4e00\u5f00\u59cb\u5168\u7a7a\u623f \n    if(x==y)return;\n    int mid=(x+y)>>1;num=num<<1;\n    maketree(x,mid  ,num  );\n    maketree(mid+1,y,num+1);\n}\nint find(int x,int num){//\u627e\u4e00\u4e2a\u957f\u5ea6\u4f4dx\u7684\u533a\u95f4\uff0c\u73b0\u641c\u7d22\u5230\u7b2cnum\u4e2a\u533a\u95f4 \n    clean(num);clean(num*2);clean(num*2+1); \n    if(T[num].l>=x)return T[num].xx;//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u8fde\u7eed\u533a\u95f4\u8db3\u591f\uff0c\u90a3\u4e48\u76f4\u63a5\u4f4f\u5728\u6700\u5de6\u8fb9\u5427 \n    if(T[num*2].m>=x)return find(x,num*2);//\u5982\u679c\u5de6\u534a\u6bb5\u533a\u95f4\u7684\u6700\u5927\u503c\u6ee1\u8db3x\uff0c\u8bf4\u660e\u53ef\u4ee5\u4f4f\u5728\u5de6\u5b50\u513f\u5b50\u7684\u533a\u95f4 \n    if(T[num*2].r+T[num*2+1].l>=x)return T[num*2].yy-T[num*2].r+1;//\u8fd9\u65f6\u5224\u65ad\u4e2d\u95f4\u7684\u4e00\u5757\u533a\u57df \n    return find(x,num*2+1);    //\u56e0\u4e3a\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u533a\u95f4\uff0c\u4f46\u524d\u9762\u90fd\u627e\u4e0d\u5230\uff0c\u90a3\u53ea\u53ef\u80fd\u5728\u53f3\u534a\u6bb5\u7684\u533a\u95f4\u91cc\u4e86 \n}\nvoid gaoji(int num){//ohly~ohlyohlyohly~~ wearethegay~~~wearethegay~~~~~~~~\u968f\u4fbf\u53d6\u7684\u51fd\u6570\u547d \n    int k=num<<1;\n    clean(k);clean(k+1);\n    T[num].l=T[k  ].l;//\u663e\u7136\u5927\u533a\u95f4\u7684l\u662f\u5de6\u5c0f\u533a\u95f4\u7684l\uff0c\u4f46\u662f\u5982\u679c\u5de6\u5c0f\u533a\u95f4\u5168\u7a7a\uff0c\u663e\u7136\u5927\u533a\u95f4\u7684l\u8981\u52a0\u4e0a\u53f3\u5c0f\u533a\u95f4\u7684l \n    if(T[k  ].l==T[k  ].yy-T[k  ].xx+1)T[num].l+=T[k+1].l;\n    T[num].r=T[k+1].r;//\u540c\u7406 \n    if(T[k+1].r==T[k+1].yy-T[k+1].xx+1)T[num].r+=T[k  ].r;\n    T[num].m=max(T[k].m,T[k+1].m);//\u8fd9\u4e2a\u5f88\u663e\u7136\u554a \n    T[num].m=max(T[num].m,T[k].r+T[k+1].l);\n}\nvoid dec(int x,int y,int num){//\u8fd9\u4e9b\u548c\u57fa\u672c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a \n    clean(num);\n    if(x<=T[num].xx&&T[num].yy<=y){T[num].l=T[num].r=T[num].m=0;T[num].p=1;return;}\n    num=num<<1;\n    if(x<=T[num  ].yy)dec(x,y,num  );\n    if(y>=T[num+1].xx)dec(x,y,num+1);\n    gaoji(num/2);\n}\nvoid pluss(int x,int y,int num){\n    clean(num);\n    if(x<=T[num].xx&&T[num].yy<=y){T[num].l=T[num].r=T[num].m=T[num].yy-T[num].xx+1;T[num].p=2;return;}\n    num=num<<1;\n    if(x<=T[num  ].yy)pluss(x,y,num  );\n    if(y>=T[num+1].xx)pluss(x,y,num+1);\n    gaoji(num/2);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    maketree(1,n,1);\n    while(m--){\n        scanf(\"%d\",&x);\n        if(x==1){\n            scanf(\"%d\",&x);\n            if(T[1].m<x){printf(\"0\\n\");continue;}//T[1].m\u662f\u6574\u4e2a\u533a\u95f4\u4e2d\u7684\u6700\u5927\u8fde\u7eed\u7a7a\u4f4d\uff0c\u8fd9\u4e2a\u5224\u65ad\u663e\u7136\u6210\u7acb \n            ans=find(x,1);//\u901a\u8fc7\u4e86\u4e0a\u9762\u4e00\u4e2a\u5224\u65ad\uff0c\u4e00\u5b9a\u53ef\u4ee5\u627e\u51fa\u7b54\u6848 \n            printf(\"%d\\n\",ans);\n            dec(ans,ans+x-1,1);//\u628a\u65b0\u4f4f\u8fdb\u6765\u7684\u623f\u95f4\u91cd\u7f6e \n        }else{\n            scanf(\"%d%d\",&x,&y);\n            pluss(x,x+y-1,1);//\u628a\u65b0\u8d70\u51fa\u53bb\u7684\u623f\u95f4\u91cd\u7f6e \n        }\n    }\n}\n```",
        "postTime": 1487162537,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u505a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f\uff1a\u524d\u7f00\u3001\u540e\u7f00\u548c\u4e2d\u95f4\u7684\u6700\u5927\u503c\u3002\u4f46\u662f\uff0c\u7ebf\u6bb5\u6811\u7684\u9898\u600e\u4e48\u80fd\u7528\u7ebf\u6bb5\u6811\u505a\u5462\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u4e00\u4e2a`fhq treap`\u7684\u4ee3\u7801\uff08\u6210\u529f\u628a\u84dd\u9898\u53d8\u6210\u7d2b\u9898\uff09\n\n\u5e73\u8861\u6811\u53ef\u4ee5\u7ef4\u62a4\u6570\u5217\u4fe1\u606f\u3002\u5177\u4f53\u505a\u6cd5\u662f\u5c06\u5e73\u8861\u6811\u7684\u8282\u70b9\u4ee5\u4e0b\u6807\u4e3a\u5173\u952e\u5b57\u7ec4\u7ec7\uff0c\u5373\u8282\u70b9\u5728\u5e73\u8861\u6811\u5185\u7684`rank`\u5373\u4e3a\u5176\u5728\u6570\u5217\u91cc\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\uff0c\u6bcf\u4e2a\u5b50\u6811\u90fd\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u4e3a\u4e86\u8f93\u51fa\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u8282\u70b9\u8fd8\u8981\u683c\u5916\u8bb0\u5f55\u6a2a\u8de8\u5176\u7684\u6bb5\u7684\u5de6\u7aef\u70b9\u76f8\u5bf9\u4e8e\u5176\u4ee3\u8868\u7684\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u504f\u79fb\u91cf\uff08\u5373`crossl`\u6570\u7ec4\uff09\u3002\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c`delta`\u8bb0\u5f55\u8be5\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u8981\u6ce8\u610f`pushup`\u548c`pushdown`\u4e0d\u80fd\u4e71\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\n\nint lt[50005];\nint rt[50005];\nint ri[50005];\nint siz[50005];\nint tag[50005];\nint amz[50005]; //\u6574\u4e2a\u533a\u95f4\u5185\u7684\u6700\u5927\u8fde\u7eed0\nint lmz[50005];\nint rmz[50005];\nint rmzl[50005]; //\u7528\u4e8e\u7ef4\u62a4crossl\nint cross[50005];\nint crossl[50005];\nint top;\n\nint buildarr(int x) //\u5efa\u6811\n{\n\tif(x)\n\t{\n\t\t++top;\n\t\tint t = top;\n\t\tsiz[t] = x;\n\t\tamz[t] = lmz[t] = rmz[t] = cross[t] = x;\n\t\tlt[t] = buildarr((x-1)>>1);\n\t\trt[t] = buildarr(x-1-((x-1)>>1));\n\t\treturn t;\n\t}\n\treturn 0;\n}\n\nvoid pushup(int x)\n{\n\tif(!x)\n\t{\n\t\treturn;\n\t}\n\t\n\tsiz[x] = siz[lt[x]]+siz[rt[x]]+1;\n\t\n\tif(tag[x])\n\t{\n\t\tif(tag[x]==1)\n\t\t{\n\t\t\tlmz[x] = rmz[x] = amz[x] = cross[x] = siz[x];\n\t\t\trmzl[x] = crossl[x] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlmz[x] = rmz[x] = amz[x] = cross[x] = crossl[x] = 0;\n\t\t\trmzl[x] = siz[x];\n\t\t}\n\t\treturn;\n\t}\n\t\n\tif(lmz[lt[x]]==siz[lt[x]] && !ri[x])\n\t{\n\t\tlmz[x] = siz[lt[x]]+1+lmz[rt[x]];\n\t}\n\telse\n\t{\n\t\tlmz[x] = lmz[lt[x]];\n\t}\n\t\n\tif(rmz[rt[x]]==siz[rt[x]] && !ri[x])\n\t{\n\t\trmz[x] = rmz[rt[x]]+1+rmz[lt[x]];\n\t\trmzl[x] = rmzl[lt[x]];\n\t}\n\telse\n\t{\n\t\trmz[x] = rmz[rt[x]];\n\t\trmzl[x] = rmzl[rt[x]]+siz[lt[x]]+1;\n\t}\n\t\n\tcross[x] = crossl[x] = 0;\n\tif(!ri[x])\n\t{\n\t\tcross[x] = rmz[lt[x]]+1+lmz[rt[x]];\n\t\tcrossl[x] = rmzl[lt[x]];\n\t}\n\t\n\tamz[x] = max({amz[lt[x]],amz[rt[x]],cross[x]});\n}\n\nvoid pushdown(int x)\n{\n\tif(tag[x])\n\t{\n\t\tpushup(x);\n\t\tif(tag[x]==1)\n\t\t{\n\t\t\tri[x] = 0;\n\t\t\ttag[lt[x]] = tag[rt[x]] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tri[x] = 1;\n\t\t\ttag[lt[x]] = tag[rt[x]] = 2;\n\t\t}\n\t\tpushup(lt[x]);\n\t\tpushup(rt[x]);\n\t\ttag[x] = 0;\n\t}\n}\n\nvoid split(int t,int s,int& l,int& r)\n{\n\tif(!t)\n\t{\n\t\tl = r = 0;\n\t\treturn;\n\t}\n\t\n\tpushdown(t);\n\tif(siz[lt[t]]<s)\n\t{\n\t\tl = t;\n\t\tsplit(rt[t],s-siz[lt[t]]-1,rt[t],r);\n\t\tpushup(l);\n\t}\n\telse\n\t{\n\t\tr = t;\n\t\tsplit(lt[t],s,l,lt[t]);\n\t\tpushup(r);\n\t}\n}\n\nint merge(int l,int r)\n{\n\tif(!l || !r)\n\t{\n\t\treturn l+r;\n\t}\n\t\n\tpushdown(l);\n\tpushdown(r);\n\t\n\tif(rand()%(siz[l]+siz[r])<=siz[l])\n\t{\n\t\trt[l] = merge(rt[l],r);\n\t\tpushup(l);\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\tlt[r] = merge(l,lt[r]);\n\t\tpushup(r);\n\t\treturn r;\n\t}\n}\n\nint query(int t,int s,int delta)\n{\n\tif(!t)\n\t{\n\t\treturn -1;\n\t}\n\tpushdown(t);\n\tif(amz[lt[t]]>=s) //\u8d2a\u5fc3\u5730\u5f80\u5de6\u8fb9\u79fb\u52a8\n\t{\n\t\treturn query(lt[t],s,delta);\n\t}\n\tif(cross[t]>=s)\n\t{\n\t\treturn crossl[t]+delta;\n\t}\n\treturn query(rt[t],s,delta+siz[lt[t]]+1);//\u53ef\u4ee5\u53bb\u6389delta\u53c2\u6570\u5199\u6210query(rt[t],s)+siz[lt[t]]+1\uff0c\u4e0d\u8fc7\u5c3e\u9012\u5f52\u5f62\u5f0f\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u4f18\u5316\u6210\u8fed\u4ee3\n}\n\nint main()\n{\n\tsrand(20040703);\n\t\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint fhq = buildarr(n);\n\t\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint opt;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tint ans = query(fhq,x,0);\n\t\t\tif(ans==-1)\n\t\t\t{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint ll,rr,tt;\n\t\t\t\tsplit(fhq,ans,ll,rr);\n\t\t\t\tsplit(rr,x,tt,rr);\n\t\t\t\ttag[tt] = 2;\n\t\t\t\tfhq = merge(ll,merge(tt,rr));\n\t\t\t\tprintf(\"%d\\n\",ans+1);\n\t\t\t}\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tint l,len;\n\t\t\tscanf(\"%d%d\",&l,&len);\n\t\t\tint ll,rr,tt;\n\t\t\tsplit(fhq,l-1,ll,rr);\n\t\t\tsplit(rr,len,tt,rr);\n\t\t\ttag[tt] = 1;\n\t\t\tfhq = merge(ll,merge(tt,rr));\n\t\t}\n\t}\n}\n```",
        "postTime": 1567834028,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problem/P2894)\n\n\u533a\u95f4\u4fee\u6539+\u533a\u95f4\u67e5\u8be2\n\n\u8fd9\u4e0d\u5c31\u662f**\u7ebf\u6bb5\u6811**\u5417\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u54ea\u4e9b\u5143\u7d20\u5462\uff1f\n\n\u7ebf\u6bb5\u72b6\u6001f\uff0c\u6700\u957f\u7684\u8fde\u7eed\u7a7a\u623f\u95f4\u6570k\n\n\u6700\u91cd\u8981\u7684\u5c31\u662f\u6700\u957f\u7684\u8fde\u7eed\u7a7a\u623f\u95f4\u6570\uff0c\u4f46\u662f\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\u53c8\u600e\u4e48\u627e\u7b2c\u4e00\u4e2a\u7a7a\u623f\u95f4\u5462\u5462\uff1f\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u4e24\u4e2a\u5143\u7d20\uff1a\n\n\u4ece\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed\u7a7a\u623f\u95f4\u6570lk\uff0c\u4ece\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed\u7a7a\u623f\u95f4\u6570rk\n\n#### \u67e5\u8be2\u64cd\u4f5c\n\n\u5148\u5224\u65ad\u5f53\u524d\u7ebf\u6bb5\u662f\u5426\u5b58\u5728\u8fde\u7eed\u7684\u7a7a\u623f\u95f4\u6570\u5927\u4e8e\u7b49\u4e8e\u9700\u8981\u7684\u623f\u95f4\u6570\n\n\u4e0d\u662f\u5c31\u76f4\u63a5return\n\n\u5982\u679c\u662f\uff0c\u56e0\u4e3a\u8981\u4f7f\u623f\u95f4\u53f7\u5c3d\u53ef\u80fd\u5c0f\n\n1.\u5219\u5148\u770b\u5de6\u513f\u5b50\u7684lk\u662f\u5426\u6ee1\u8db3\uff0c\u6ee1\u8db3\u5219\u8fdb\u5165\n\n2.\u518d\u770b\u4e2d\u95f4\u662f\u5426\u6ee1\u8db3,\u4e2d\u95f4\u5373\u4e3a\u5de6\u513f\u5b50\u7684rk + \u53f3\u513f\u5b50\u7684lk\n\n\u6ee1\u8db3\u5c31\u53ef\u4ee5\u76f4\u63a5return\u7b54\u6848\u4e86\uff0c\u5373\u4e3a \u5de6\u513f\u5b50\u7684r-\u5de6\u513f\u5b50\u88ab\u5360\u7528\u7684rk+1\n\n //\u6b64\u5904\u53ef\u4ee5\u6682\u505c\u8111\u8865\u6b65\u9aa42\n\n3.\u6700\u540e\u770b\u53f3\u513f\u5b50\u7684rk\u662f\u5426\u6ee1\u8db3\uff0c\u6ee1\u8db3\u5219\u8fdb\u5165\n\n```cpp\nint query(int x,int d)\n{\n\tif(d > t[x].k)\n\t\treturn 0;\n\tif(t[x].l == t[x].r)\n\t\treturn t[x].l;\n\tupdate(x);\n\tif(t[x<<1].k >= d)//\u4f18\u5148\u8003\u8651\u524d\u9762\n\t\treturn query(x << 1,d);\n\telse if(t[x<<1].rk + t[x<<1|1].lk >= d)//\u5176\u6b21\u662f\u4e2d\u95f4\n\t\treturn t[x<<1].r - t[x<<1].rk + 1;\n\telse if(t[x<<1|1].k >= d)//\u6700\u540e\u662f\u540e\u9762\n\t\treturn query(x << 1 | 1,d);\n\treturn 0;\n}\n\n```\n\n#### \u5165\u4f4f\u64cd\u4f5c and \u9000\u623f\u64cd\u4f5c\n\n\u5c31\u50cf\u5e73\u65f6\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u4e00\u6837\uff0c\u53ea\u662f\u7ef4\u62a4\u7684\u65f6\u5019\u6709\u4e9b\u4e0d\u540c\n\n\u9996\u5148\u5f80\u4e0b\u627e\u7684\u65f6\u5019\u8981\u628a\u7236\u8282\u70b9\u7684\u72b6\u6001\u66f4\u65b0\u7ed9\u5b50\u8282\u70b9(\u61d2\u6807\u8bb0)\n\n\u5230\u4e86\u4e4b\u540e\u8981\u66f4\u65b0\u5f53\u524d\u70b9\u72b6\u6001\uff0c\u6700\u540e\u5411\u4e0a\u66f4\u65b0\n\n\u6211\u5b9a\u4e49\u7684\u72b6\u6001\u4e3a\n\n0\uff1a\u5f53\u524d\u7ebf\u6bb5\u4e00\u4e2a\u4eba\u90fd\u6ca1\u6709\n\n1\uff1a\u5f53\u524d\u7ebf\u6bb5\u4f4f\u6ee1\u4eba\n\n-1\uff1a\u65e2\u6709\u5165\u4f4f\u7684\uff0c\u53c8\u6709\u6ca1\u4eba\u7684\n\n```cpp\nvoid check(int x,int l,int r,int f)\n{\n\tif(t[x].r < l || t[x].l > r)\n\t\treturn;\n\tif(t[x].r <= r && t[x].l >= l)\n\t{\n\t\tt[x].f = f;\n\t\tif(f == 1)\n\t\t\tt[x].lk = t[x].rk = t[x].k = 0;\n\t\telse\n\t\t\tt[x].lk = t[x].rk = t[x].k = t[x].r - t[x].l + 1;\n\t\treturn;\n\t}\n\tupdate(x);//\u5f80\u4e0b\u66f4\u65b0\n\tcheck(x<<1,l,r,f);\n\tcheck(x<<1|1,l,r,f);\n\tupdate1(x);//\u5411\u4e0a\u66f4\u65b0\n}\n```\n\n\u5982\u679c\u4f60\u542c\u61c2\u4e86\uff0cupdate\u53ef\u4ee5\u81ea\u5df1\u7422\u78e8\u5199\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u770b\u770b\u5427\n\n\u4ee3\u7801\uff1a\n\n```cpp\n//12252024832524\n#include <cstdio>\n#include <algorithm>\n#define Min(x,y) (x<y?x:y)\n#define Max(x,y) (x>y?x:y)\nusing namespace std;\n\ntypedef long long LL;\nconst int MAXN = 50005;\nint n;\nstruct node\n{\n\tint l,r,f;\n\tint lk,rk,k;\n}t[MAXN << 1];\n\nint Read()\n{\n\tint x1 = 0,f1 = 1;char c1 = getchar();\n\twhile(c1 > '9' || c1 < '0'){if(c1 == '-')f1 = -1;c1 = getchar();}\n\twhile(c1 >= '0' && c1 <= '9'){x1 = (x1*10) + (c1^48);c1 = getchar();}\n\treturn x1 * f1;\n}\nvoid Put(int x)\n{\n\tif(x > 9)\n\t\tPut(x/10);\n\tputchar(x%10^48);\n}\nvoid update(int x)//\u5411\u4e0b\u4f20\u9012\n{\n\tif(t[x].f < 0)\n\t\treturn ;\n\tint f = t[x].f;\n\tt[x].f = -1;\n\t//\u5de6\n\tx <<= 1;\n\tif(f == 1)\n\t\tt[x].lk = t[x].rk = t[x].k = 0;\n\telse\n\t\tt[x].lk = t[x].rk = t[x].k = t[x].r - t[x].l + 1;\n\tt[x].f = f;\n\t//\u53f3\n\tx |= 1;\n\tif(f == 1)\n\t\tt[x].lk = t[x].rk = t[x].k = 0;\n\telse\n\t\tt[x].lk = t[x].rk = t[x].k = t[x].r - t[x].l + 1;\n\tt[x].f = f;\n}\nvoid update1(int x)//\u5411\u4e0a\u66f4\u65b0\n{\n\tt[x].lk = t[x<<1].lk;\n\tt[x].rk = t[x<<1|1].rk;\n\tif(t[x].lk == t[x<<1].r - t[x<<1].l + 1)//\u5de6\u8fb9\u5168\u6ca1\u5360\n\t\tt[x].lk += t[x<<1|1].lk;//\u52a0\u4e0a\u53f3\u513f\u5b50\u7684\u5de6\u8fb9\n\tif(t[x].rk == t[x<<1|1].r - t[x<<1|1].l + 1)//\u53f3\u8fb9\u5168\u6ca1\u5360\n\t\tt[x].rk += t[x<<1].rk;//\u52a0\u4e0a\u5de6\u513f\u5b50\u7684\u53f3\u8fb9\n\tt[x].k = Max(t[x<<1].k,t[x<<1|1].k);//\u66f4\u65b0k\uff0c\u5de6\u6216\u53f3\n\tt[x].k = Max(t[x].k,t[x<<1].rk + t[x<<1|1].lk);//\u6216\u4e2d\u95f4 \n}\nvoid Build(int x,int l,int r)\n{\n\tt[x].l = l;\n\tt[x].r = r;\n\tt[x].k = t[x].rk = t[x].lk = r - l + 1;\n\tif(l == r)\n\t\treturn ;\n\tint mid = (l+r) >> 1;\n\tBuild(x<<1,l,mid);\n\tBuild(x<<1|1,mid+1,r);\n}\nvoid check(int x,int l,int r,int f)//check in and check out\n{\n\tif(t[x].r < l || t[x].l > r)\n\t\treturn;\n\tif(t[x].r <= r && t[x].l >= l)\n\t{\n\t\tt[x].f = f;\n\t\tif(f == 1)\n\t\t\tt[x].lk = t[x].rk = t[x].k = 0;\n\t\telse\n\t\t\tt[x].lk = t[x].rk = t[x].k = t[x].r - t[x].l + 1;\n\t\treturn;\n\t}\n\tupdate(x);//\u5f80\u4e0b\u66f4\u65b0\n\tcheck(x<<1,l,r,f);\n\tcheck(x<<1|1,l,r,f);\n\tupdate1(x);//\u5411\u4e0a\u66f4\u65b0\n}\nint query(int x,int d)\n{\n\tif(d > t[x].k)\n\t\treturn 0;\n\tif(t[x].l == t[x].r)\n\t\treturn t[x].l;\n\tupdate(x);\n\tif(t[x<<1].k >= d)//\u4f18\u5148\u8003\u8651\u524d\u9762\n\t\treturn query(x << 1,d);\n\telse if(t[x<<1].rk + t[x<<1|1].lk >= d)//\u5176\u6b21\u662f\u4e2d\u95f4\n\t\treturn t[x<<1].r - t[x<<1].rk + 1;\n\telse if(t[x<<1|1].k >= d)//\u6700\u540e\u662f\u540e\u9762\n\t\treturn query(x << 1 | 1,d);\n\treturn 0;\n}\n\nint main()\n{\n\tfreopen(\"hotel.in\",\"r\",stdin);\n\tfreopen(\"hotel.out\",\"w\",stdout);\n\tn = Read();\n\tBuild(1,1,n);\n\tfor(int m = Read();m;-- m)//\u636e\u8bf4\u6bd4while\u5feb\n\t{\n\t\tint pd = Read(),x = Read();\n\t\tif(pd == 1)\n\t\t{\n\t\t\tpd = query(1,x);\n\t\t\tPut(pd);\n\t\t\tputchar('\\n');\n\t\t\tif(pd)\n\t\t\t\tcheck(1,pd,pd+x-1,1);\n\t\t}\n\t\telse\n\t\t\tcheck(1,x,x+Read()-1,0);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565934245,
        "uid": 137437,
        "name": "PPL_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    },
    {
        "content": "### bzoj 1593: [Usaco2008 Feb]Hotel \u65c5\u9986\n#### Soluion\n\u3000\u3000sb\u7ebf\u6bb5\u6811\u9898.\u5199\u8d77\u6765\u6781\u5176\u9ebb\u70e6.\u6574\u6574\u8c03\u4e86\u4e00\u4e0a\u5348, \u4e0b\u534810\u5206\u949f\u5c31\u627e\u5230\u9519\u8bef\u4e86.\u539f\u6765\u662f**\u6807\u8bb0\u6ca1\u6709\u6e05\u7a7a**, \u602a\u4e0d\u5f97\u6211\u624b\u7801\u4e86\u4e00\u68f5\u6ca1\u6807\u8bb0\u7684\u5c31\u884c\u4e86, \u6211\u679c\u7136\u8fd8\u662f\u592a\u5f31\u4e86.~~\u6bcf\u6b21\u5199\u7ebf\u6bb5\u6811\u90fd\u4f1a\u88ab\u6309\u5728\u5730\u4e0a\u6469\u64e6\u7684\u611f\u89c9\u771f\u662f\u4e0d\u723d.~~\n\n\u3000\u3000\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4**\u533a\u95f4\u6700\u957f\u7a7a\u95f2\u8fde\u7eed\u533a\u95f4**, \u56e0\u4e3a\u4e00\u6bb5\u533a\u95f4\u53ef\u4ee5\u7531\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u800c\u6765, \u6240\u4ee5\u4e24\u4e2a**\u8fde\u7eed\u7684\u7ebf\u6bb5\u6811\u8282\u70b9**\u5408\u5e76\u4e0d\u4ec5\u9700\u8981\u7ef4\u62a4\u5404\u81ea\u7684\u6700\u957f\u8fde\u7eed\u957f\u5ea6, \u8fd8\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u7684\u5de6\u4fa7\u5f00\u59cb\u6700\u957f\u957f\u5ea6, \u53f3\u4fa7\u5f00\u59cb\u6700\u957f\u957f\u5ea6, \u4e00\u4e2a\u5927\u533a\u95f4$[l,r]$\u7684\u4e24\u4e2a\u5b50\u533a\u95f4$[l,mid],[mid+1,r]$\u5176\u5de6\u4fa7\u5f00\u59cb\u6700\u957f\u957f\u5ea6, \u53f3\u4fa7\u5f00\u59cb\u6700\u957f\u957f\u5ea6\u5408\u5e76\u8d77\u6765\u53ef\u80fd\u4f1a\u5f97\u5230$[l,r]$\u7684\u6700\u957f\u957f\u5ea6.\n\n\u3000\u3000\u54e6, \u5bf9\u4e86, \u6211\u7ebf\u6bb5\u6811\u5199**\u6307\u9488**.\u56e0\u6b64\u53ef\u80fd\u662f\u9898\u89e3\u4e2d\u552f\u4e00\u4e00\u4e2a\u6307\u9488.\u4e0b\u9762\u5177\u4f53\u4ecb\u7ecd\u4e00\u4e0b\u5404\u4e2a\u90e8\u5206\u7684\u4f5c\u7528.\u6211\u7a0d\u5fae\u538b\u538b\u884c, \u4e0d\u538b\u884c\u592a\u957f\u4e86.\n\n- \u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u7ed3\u6784\u4f53:\n```c++\nstruct Node{\n    bool vis;//1\u8868\u793a\u623f\u95f4\u5168\u90e8\u53ef\u7528\n    int tag;//\u6807\u8bb0, 1\u8868\u793a\u623f\u95f4\u5168\u90e8\u88ab\u5360\u7528,2\u8868\u793a\u623f\u95f4\u5168\u90e8\u88ab\u91ca\u653e, 0\u8868\u793a\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f.\n    int L,R;//\u533a\u95f4\u5de6\u7aef\u70b9, \u53f3\u7aef\u70b9\n    int l,r,m,p;//\u5de6,\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u957f\u5ea6, \u6700\u957f\u957f\u5ea6\u7684\u5f00\u59cb\u70b9.\n    Node *ls,*rs;//\u5de6\u53f3\u513f\u5b50\u8282\u70b9.\n    void Merge(){//\u4ece\u4e24\u4e2a\u5b57\u8282\u70b9\u5408\u5e76\u800c\u6765\n        vis=(ls->vis&rs->vis);l=ls->l;r=rs->r;\n        if(ls->vis)l+=rs->l;if(rs->vis)r+=ls->r;\n        if(ls->m>rs->m)m=ls->m,p=ls->p;else m=rs->m,p=rs->p;\n        if(ls->r+rs->l>m)m=ls->r+rs->l,p=ls->R-ls->r+1;\n    }\n    void clear(){vis=l=r=m=p=false;}//\u8bbe\u4e3a\u5168\u90e8\u88ab\u5360\u7528\n    void all(){vis=true,p=L,l=r=m=R-L+1;}//\u8bbe\u4e3a\u5168\u90e8\u88ab\u91ca\u653e\n    void TurnUp(){if(tag==1)clear();if(tag==2)all();}//\u6839\u636etag\u6539\u53d8\u72b6\u6001\n    void print(){printf(\"%d %d %d %d\\n\",l,r,m,p);}//\u6253\u5370\u72b6\u6001\n    void PushDown(){if(!tag)return ;ls->tag=tag,rs->tag=tag;ls->TurnUp(),rs->TurnUp();tag=0;}\n}c[N<<2];//\u63d0\u524d\u5f00\u597d\u5185\u5b58, \u52a8\u6001\u5206\u914d\u8d3c\u6162\n```\n- \u5206\u914d\u8282\u70b9\u5185\u5b58\n```c++\nNode *new_Node(){\nstatic int cnt=0;\nreturn &c[++cnt];\n}//static \u4e3ac++\u8bed\u6cd5, \u4eceddd\u90a3\u91cc\u5b66\u7684.\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6307\u9488\n```\n- \u7ebf\u6bb5\u6811\n```c++\nnamespace SegmentTree{\n    Node *root;int n;//\u6839\u8282\u70b9\u548cn\n    void build(Node *&now,int l,int r){\n        now->L=l,now->R=r;if(l==r){now->all();return ;}//\u8bbe\u4e3a\u5168\u90e8\u4e0d\u88ab\u5360\u7528\n        int mid=(l+r)>>1;now->ls=new_Node(),now->rs=new_Node();//\u9700\u8981\u7ed9\u5b50\u8282\u70b9\u5206\u914d\u5185\u5b58\n        build(now->ls,l,mid);build(now->rs,mid+1,r);now->Merge();//\u5408\u5e76\u4e24\u4e2a\u5b50\u8282\u70b9\n    }\n    void init(){root=new_Node();build(root,1,n);}//\u521d\u59cb\u5316, \u9700\u8981\u5206\u914d\u6839\u8282\u70b9\u5185\u5b58\n    void Modify(Node *&now,int l,int r,int L,int R,int G){//\u4fee\u6539, G\u4e3a\u6807\u8bb0,1\u5360\u7528,2\u91ca\u653e\n        if(l>=L&&r<=R){now->tag=G;now->TurnUp();return;}//\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6bdb\u4e00\u6837\n        now->PushDown();\n        int mid=(l+r)>>1;\n        if(L<=mid)Modify(now->ls,l,mid,L,R,G);\n        if(R>mid)Modify(now->rs,mid+1,r,L,R,G);\n        now->Merge();\n    }\n    int Query(Node *&now,int l,int r,int L){//\u67e5\u8be2\u533a\u95f4\u5927\u4e8eL\u7684\u53ef\u7528\u623f\u95f4\n        if(l==r)return l;\n        now->PushDown();\n        if(now->m<L)return 0;\n        int mid=(l+r)>>1;\n        if(now->ls->m>=L)return Query(now->ls,l,mid,L);//\u9996\u5148\u8003\u8651\u5de6\u4fa7\u533a\u95f4\n        else if(now->ls->r+now->rs->l>=L)\n\t        return now->ls->R-now->ls->r+1;//\u8003\u8651\u90e8\u5206\u5728\u5de6\u4fa7\u90e8\u5206\u5728\u53f3\u4fa7\u7684\u533a\u95f4\n        else return Query(now->rs,mid+1,r,L);//\u6700\u540e\u8003\u8651\u5b8c\u5168\u5728\u53f3\u4fa7\u7684\u533a\u95f4\n    }\n};using namespace SegmentTree;\n```\n- \u4e3b\u51fd\u6570\n```c++\nint main(){\n    int m;\n    scanf(\"%d%d\",&n,&m);\n    init();int a,b,c;\n    while(m--){\n        scanf(\"%d%d\",&a,&b);\n        if(a==1){\n            int p=Query(root,1,n,b);\n            printf(\"%d\\n\",p);\n            if(p)Modify(root,1,n,p,p+b-1,1);//\u8bb0\u5f97\u9700\u8981\u4fee\u6539\u554a\n        }\n        if(a==2){scanf(\"%d\",&c);Modify(root,1,n,b,b+c-1,2);}\n    }\n    return 0;\n}\n```\n\n#### Code\n100\u5206.\n```c++\n#include<iostream>\n#include<cstdio>\n#define N 1000005\nusing namespace std;\n\nstruct Node{\n    bool vis;\n    int tag;\n    int L,R;//\u533a\u95f4\n    int l,r,m,p;//\u5de6,\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u957f\u5ea6, \u6700\u957f\u957f\u5ea6\u7684\u5f00\u59cb\u70b9.\n    Node *ls,*rs;//\u5de6\u53f3\u513f\u5b50\u8282\u70b9.\n    void Merge(){\n        vis=(ls->vis&rs->vis);l=ls->l;r=rs->r;\n        if(ls->vis)l+=rs->l;if(rs->vis)r+=ls->r;\n        if(ls->m>rs->m)m=ls->m,p=ls->p;else m=rs->m,p=rs->p;\n        if(ls->r+rs->l>m)m=ls->r+rs->l,p=ls->R-ls->r+1;\n    }\n    void clear(){vis=l=r=m=p=false;}\n    void all(){vis=true,p=L,l=r=m=R-L+1;}\n    void TurnUp(){if(tag==1)clear();if(tag==2)all();}\n    void print(){printf(\"%d %d %d %d\\n\",l,r,m,p);}\n    void PushDown(){if(!tag)return ;ls->tag=tag,rs->tag=tag;ls->TurnUp(),rs->TurnUp();tag=0;}\n}c[N<<2];\nNode *new_Node(){static int cnt=0;return &c[++cnt];}\nnamespace SegmentTree{\n    Node *root;int n;\n    void build(Node *&now,int l,int r){\n        now->L=l,now->R=r;if(l==r){now->all();return ;}\n        int mid=(l+r)>>1;now->ls=new_Node(),now->rs=new_Node();\n        build(now->ls,l,mid);build(now->rs,mid+1,r);now->Merge();\n    }\n    void init(){root=new_Node();build(root,1,n);}\n    void Modify(Node *&now,int l,int r,int L,int R,int G){\n        if(l>=L&&r<=R){now->tag=G;now->TurnUp();return;}\n        now->PushDown();\n        int mid=(l+r)>>1;\n        if(L<=mid)Modify(now->ls,l,mid,L,R,G);\n        if(R>mid)Modify(now->rs,mid+1,r,L,R,G);\n        now->Merge();\n    }\n    int Query(Node *&now,int l,int r,int L){\n        if(l==r)return l;\n        now->PushDown();\n        if(now->m<L)return 0;\n        int mid=(l+r)>>1;\n        if(now->ls->m>=L)return Query(now->ls,l,mid,L);\n        else if(now->ls->r+now->rs->l>=L)return now->ls->R-now->ls->r+1;\n        else return Query(now->rs,mid+1,r,L);\n    }\n};using namespace SegmentTree;\n\nint main(){\n    int m;\n    scanf(\"%d%d\",&n,&m);\n    init();int a,b,c;\n    while(m--){\n        scanf(\"%d%d\",&a,&b);\n        if(a==1){\n            int p=Query(root,1,n,b);\n            printf(\"%d\\n\",p);\n            if(p)Modify(root,1,n,p,p+b-1,1);\n        }\n        if(a==2){scanf(\"%d\",&c);Modify(root,1,n,b,b+c-1,2);}\n    }\n    return 0;\n}\n```\n\u6ca1\u6709\u6807\u8bb0\u768466\u5206. TLE\n````c++\n#include<iostream>\n#include<cstdio>\n#define N 1000005\nusing namespace std;\n\nstruct Node{\n    bool vis,flag;\n    int L,R;//\u533a\u95f4\n    int l,r,m,p;//\u5de6,\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u957f\u5ea6, \u6700\u957f\u957f\u5ea6\u7684\u5f00\u59cb\u70b9.\n    Node *ls,*rs;//\u5de6\u53f3\u513f\u5b50\u8282\u70b9.\n    void Merge(){\n        L=ls->L,R=rs->R;\n        vis=(ls->vis&rs->vis);\n        l=ls->l;r=rs->r;\n        if(ls->vis)l+=rs->l;\n        if(rs->vis)r+=ls->r;\n        if(ls->m>rs->m)m=ls->m,p=ls->p;\n        else m=rs->m,p=rs->p;\n        if(ls->r+rs->l>m)m=ls->r+rs->l,p=ls->R-ls->r+1;\n    //\tprint();\n    }\n    void print(){\n        printf(\"flag:%d l:%d r:%d L:%d R:%d Max:%d Position:%d Vis:%d\\n\",flag,L,R,l,r,m,p,vis);\n    }\n    void clear(){\n        vis=l=r=m=p=false;\n    }\n    void all(){\n        vis=true,p=L,l=r=m=R-L+1;\n    }\n    void TurnUp(int G){\n        if(G)clear();else all();\n    }\n}c[N<<2];\n\nNode *new_Node(){\n    static int cnt=0;\n    return &c[++cnt];\n}\n\nnamespace SegmentTree{\n    Node *root;\n    int n;\n    void build(Node *now,int l,int r){\n        now->L=l,now->R=r;\n        if(l==r){now->all();return ;}\n        int mid=(l+r)>>1;\n        now->ls=new_Node(),now->rs=new_Node();\n        build(now->ls,l,mid);build(now->rs,mid+1,r);\n        now->Merge();\n    }\n    void init(){\n        root=new_Node();\n        build(root,1,n);\n    }\n    void Modify(Node *now,int l,int r,int L,int R,bool G){\n        if(l==r){now->TurnUp(G);return;}\n        int mid=(l+r)>>1;\n        if(L<=mid)Modify(now->ls,l,mid,L,R,G);\n        if(R>mid)Modify(now->rs,mid+1,r,L,R,G);\n        now->Merge();\n    }\n    int Query(Node *now,int l,int r,int L){\n        if(l==r)return now->p;\n        if(now->m<L)return 0;\n        int mid=(l+r)>>1,ans=0;\n        if(now->ls->m>=L)ans=Query(now->ls,l,mid,L);\n        else if(now->ls->r+now->rs->l>=L)ans=now->ls->R-now->ls->r+1;\n        else ans=Query(now->rs,mid+1,r,L);\n        return ans;\n    }\n};using namespace SegmentTree;\n\nint main(){\n    int m;\n    scanf(\"%d%d\",&n,&m);\n    init();int a,b,c;\n    while(m--){\n        scanf(\"%d%d\",&a,&b);\n        if(a==1){\n            int p=Query(root,1,n,b);\n            printf(\"%d\\n\",p);\n            if(p)Modify(root,1,n,p,p+b-1,1);\n        }\n        if(a==2){scanf(\"%d\",&c);Modify(root,1,n,b,b+c-1,0);}\n    }\n    return 0;\n}\n```",
        "postTime": 1525699672,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2894 \u3010[USACO08FEB]\u9152\u5e97Hotel\u3011"
    }
]