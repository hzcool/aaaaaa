[
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a $O(n\\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5411\u65e5\u8475\u7684\u957f\u9ad8\u4e00\u5b9a\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u4f7f\u7528\u5dee\u5206\u3002\n\n\u8003\u8651\u628a\u539f\u6570\u7ec4 $a$ \u5dee\u5206\u6210\u6570\u7ec4 $c$\uff0c\u5373 $c_x=c_x-c_{x-1}$ \u4e14 $c$ \u4e0b\u6807\u7684\u8303\u56f4\u662f $2\\sim n$\u3002\u663e\u7136\u5dee\u5206\u6570\u7ec4\u4e3a $0$ \u7684\u5730\u65b9\u53ef\u4ee5\u5408\u5e76\uff0c\u56e0\u4e3a\u524d\u540e\u76f8\u7b49\u7684\u65f6\u5019\uff0c\u751f\u957f\u90fd\u662f\u540c\u65f6\u7684\u3002\u6240\u4ee5\u4e0b\u9762\u8ba8\u8bba\u7684\u662f $c$ \u6570\u7ec4\u4e2d\u6ca1\u6709 $0$ \u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c A\uff0c\u6240\u6709 $c$ \u6570\u7ec4\u4e2d**\u5f53\u524d\u4f4d\u7f6e**\u5c0f\u4e8e $0$ \u7684\u5730\u65b9 $a$ \u6570\u7ec4\u90fd\u4f1a\u52a0\u4e00\uff08\u5373\u4e00\u4e2a\u6570\u5c0f\u4e8e\u524d\u9762\u7684\u6570\uff0c$a$ \u6570\u7ec4\u5c31\u4f1a\u52a0\u4e00\uff09\uff0c\u8003\u8651\u8fd9\u5bf9\u5dee\u5206\u6570\u7ec4 $c$ \u7684\u5f71\u54cd\u3002\u5982\u679c $c_x>0$\uff0c\u90a3\u4e48 $a_x$ \u4e0d\u4f1a\u6539\u53d8\uff0c\u800c\u5982\u679c $c_{x-1}<0$\uff0c\u90a3\u4e48 $a_{x-1}$ \u4f1a\u52a0\u4e00\uff0c\u6240\u4ee5 $c_x$ \u8981\u51cf\u4e00\u3002\u5982\u679c $c_x<0$\uff0c\u90a3\u4e48 $a_x$ \u4f1a\u52a0\u4e00\uff0c\u800c\u5982\u679c $c_{x-1}>0$\uff0c\u90a3\u4e48 $a_{x-1}$ \u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5 $c_x$ \u8981\u52a0\u4e00\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c B\uff0c\u6240\u4ee5 $c$ \u6570\u7ec4\u4e2d**\u540e\u4e00\u4e2a\u4f4d\u7f6e**\u5927\u4e8e $0$ \u7684\u5730\u65b9 $a$ \u6570\u7ec4\u90fd\u4f1a\u52a0\u4e00\uff08\u5373\u4e00\u4e2a\u6570\u5c0f\u4e8e\u540e\u9762\u7684\u6570\uff0c$a$ \u6570\u7ec4\u5c31\u4f1a\u52a0\u4e00\uff09\uff0c\u540c\u6837\u7684\uff0c\u8003\u8651\u5176\u5bf9\u5dee\u5206\u6570\u7ec4 $c$ \u7684\u5f71\u54cd\u3002\u5982\u679c $c_{x+1}>0$\uff0c\u90a3\u4e48 $a_{x}$ \u4f1a\u52a0\u4e00\uff0c\u800c\u5982\u679c $c_{x+2}<0$\uff0c\u90a3\u4e48 $a_{x+1}$ \u4e0d\u4f1a\u53d8\uff0c\u6240\u4ee5 $c_{x+1}$ \u4f1a\u51cf\u4e00\u3002\u5982\u679c $c_{x+1} <0$\uff0c\u90a3\u4e48 $a_{x+1}$ \u4e0d\u4f1a\u53d8\uff0c\u800c\u5982\u679c $c_{x+2}>0$\uff0c\u90a3\u4e48 $a_{x+1}$ \u4f1a\u52a0\u4e00\uff0c\u6240\u4ee5 $c_{x+1}$ \u4f1a\u52a0\u4e00\u3002\n\n\u4ece\u4e0a\u9762\u7684\u63a8\u5bfc\u53ef\u4ee5\u53d1\u73b0\uff0c\u6240\u6709 $c$ \u4f1a\u53d1\u751f\u6539\u53d8\u7684\u5730\u65b9\u90fd\u662f\u524d\u9762\u6216\u8005\u540e\u9762\u7684 $c$ \u7684\u6b63\u8d1f\u6027\u548c\u5f53\u524d\u4e0d\u540c\uff0c\u6240\u4ee5\u8003\u8651\u628a\u6240\u6709\u6781\u957f\u7684\u7b26\u53f7\u76f8\u540c\u7684 $c$ \u770b\u6210\u4e00\u6bb5\u3002 \n\n\u90a3\u4e48\u5bf9\u4e8e\u64cd\u4f5c A\uff0c\u5c31\u662f\u628a\u6240\u6709\u6b63\u6570\u6bb5\u7684\u6700\u5de6\u8fb9\u7684\u6570\u51cf\u4e00\uff0c\u6240\u6709\u8d1f\u6570\u6bb5\u7684\u6700\u5de6\u8fb9\u7684\u6570\u52a0\u4e00\uff0c\u7279\u522b\u7684\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u662f\u6b63\u6570\u6bb5\uff0c\u90a3\u4e48\u5b83\u4e0d\u9700\u8981\u51cf\u4e00\u3002\n\n\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u64cd\u4f5c B\uff0c\u5c31\u662f\u628a\u6240\u6709\u6b63\u6570\u6bb5\u7684\u6700\u53f3\u8fb9\u7684\u6570\u51cf\u4e00\uff0c\u6240\u6709\u8d1f\u6570\u6bb5\u7684\u6700\u53f3\u8fb9\u7684\u6570\u52a0\u4e00\uff0c\u7279\u522b\u7684\uff0c\u5982\u679c\u6700\u540e\u4e00\u6bb5\u662f\u8d1f\u6570\u6bb5\uff0c\u90a3\u4e48\u5b83\u4e0d\u9700\u8981\u52a0\u4e00\u3002\n\n\u5982\u679c\u67d0\u4e2a $c_x$ \u53d8\u6210\u4e86 $0$\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u4ece\u8fd9\u4e2a\u6bb5\u91cc\u9762\u5220\u6389\uff0c\u5982\u679c\u8fd9\u4e2a\u6bb5\u6b64\u65f6\u88ab\u5220\u7a7a\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u9020\u6210\u5176\u524d\u540e\u7684\u6bb5\u5408\u5e76\uff0c\u8fd9\u65f6\u5019\u76f4\u63a5\u5408\u5e76\u5373\u53ef\u3002\n\n\u76f4\u63a5\u7528\u53ef\u5220\u5806\u5206\u522b\u7ef4\u62a4\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e $2$ \u548c\u5927\u5c0f\u7b49\u4e8e $1$ \u7684\u6bb5\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u76f4\u63a5\u6253\u4e00\u4e2a\u5168\u5c40\u6807\u8bb0\uff0c\u7136\u540e\u5982\u679c\u6709 $c_x=0$ \u7684 $x$ \u5c31\u8fdb\u884c\u5220\u9664\u5904\u7406\u5373\u53ef\u3002\n\n\u4e00\u4e2a\u4f4d\u7f6e\u7684 $c$ \u53ea\u53ef\u80fd\u7b49\u4e8e $0$ \u4e00\u6b21\uff0c\u6240\u4ee5\u5b83\u53ea\u4f1a\u8fdb\u5806\u4e00\u6b21\uff0c\u51fa\u5806\u4e00\u6b21\uff0c\u9020\u6210\u524d\u540e\u5408\u5e76\u4e00\u6b21\uff0c\u6545\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u5f97\u5230\u6700\u540e\u7684\u5dee\u5206\u6570\u7ec4 $c$ \u540e\uff0c\u8003\u8651\u8fd8\u539f\u6570\u7ec4 $a$\u3002\u4e0d\u96be\u53d1\u73b0\u6700\u5927\u503c\u662f\u4e0d\u4f1a\u8d85\u8fc7\u539f\u5e8f\u5217\u7684\u6700\u5927\u503c\u7684\uff0c\u627e\u5230\u539f\u5e8f\u5217\u7684\u6700\u5927\u503c\u53ca\u5176\u4f4d\u7f6e\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd8\u539f\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define RI register int\ntypedef long long LL;\n\n#define FILEIO(name) freopen(name\".in\", \"r\", stdin), freopen(name\".out\", \"w\", stdout);\n\nusing namespace std;\n\nint const MAXN = 3e5 + 5;\nint a[MAXN], b[MAXN];\nint cf[MAXN];\nint nxt[MAXN], pre[MAXN];\nstruct Node {\n  int val, id;\n  bool operator < (const Node &A) const { return val ^ A.val ? val > A.val : id > A.id; }\n  bool operator == (const Node &A) const { return val == A.val && id == A.id; }\n};\nstruct DeleteHeap {\n  priority_queue <Node> I, O;\n  inline void Flush() {\n    while (!O.empty() && I.top() == O.top())\n      I.pop(), O.pop(); }\n  inline void insert(Node x) { /*cout << this << \" insert \" << x.id << \" \" << x.val << endl;*/ I.push(x); }\n  inline void erase (Node x) { /*cout << this << \" erase  \" << x.id << \" \" << x.val << endl;*/ O.push(x); }\n  inline bool empty() { Flush(); return I.empty(); }\n  inline Node top()   { Flush(); return I.top();   }\n} Head, Tail, HT; // \u524d\u4e24\u4e2a\u7ef4\u62a4\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e 2 \u7684\u6bb5\uff0c\u6700\u540e\u4e00\u4e2a\u7ef4\u62a4\u5927\u5c0f\u4e3a 1 \u7684\u6bb5\u3002\nint tagh, tagt, taght; // \u5168\u5c40\u6807\u8bb0\nint size[MAXN], L[MAXN], R[MAXN]; // \u6bb5\u5927\u5c0f\uff0c\u5de6\u53f3\u7aef\u70b9\nint ans[MAXN];\n\n// \u627e\u6bcf\u4e2a\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\nint FindL(int x) { return x == L[x] ? x : L[x] = FindL(L[x]); }\nint FindR(int x) { return x == R[x] ? x : R[x] = FindR(R[x]); }\n\nvoid Init(int n) { // \u6c42\u5f97\u5dee\u5206\u6570\u7ec4\uff0c\u4ee5\u53ca\u521d\u59cb\u5316\u3002\n  for (RI i = 2; i <= n; ++i)\n    cf[i] = a[i] - a[i - 1], b[i] = (cf[i] > 0 ? 1 : -1);\n  for (RI i = 1; i <= n; ++i)\n    nxt[i] = i + 1, pre[i + 1] = i;\n  for (RI i = 2; i <= n; ++i)\n    if (cf[i] == 0) {\n      nxt[pre[i]] = nxt[i];\n      pre[nxt[i]] = pre[i];\n    }\n  int las = nxt[1], cnt = 0;\n  for (RI i = nxt[1]; i != n + 1; i = nxt[i], ++cnt)\n    if (b[i] != b[las]) {\n      for (RI j = las; j != i; j = nxt[j])\n        L[j] = las, R[j] = pre[i];\n      size[las] = cnt;\n      if (size[las] >= 2) {\n        Head.insert((Node){b[las] * cf[las], las});\n        Tail.insert((Node){b[pre[i]] * cf[pre[i]], pre[i]});\n      }\n      else\n        HT.insert((Node){b[las] * cf[las], las});\n      las = i, cnt = 0;\n    }\n  for (RI j = las; j; j = nxt[j])\n    L[j] = las, R[j] = pre[n + 1];\n  size[las] = cnt;\n  if (size[las] >= 2) {\n    Head.insert((Node){b[las] * cf[las], las});\n    Tail.insert((Node){b[pre[n + 1]] * cf[pre[n + 1]], pre[n + 1]});\n  }\n  else\n    HT.insert((Node){b[las] * cf[las], las});\n}\n\ninline void Del(int x) { // \u5220\u9664\u4e00\u4e2a\u6bb5\n  int sz = size[FindL(x)];\n  if (sz >= 2) {\n    int l = FindL(x), r = FindR(x);\n    Head.erase((Node){b[l] * cf[l], l});\n    Tail.erase((Node){b[r] * cf[r], r});\n    cf[l] -= b[l] * tagh;\n    cf[r] -= b[r] * tagt;\n  }\n  else {\n    int l = FindL(x);\n    HT.erase((Node){b[l] * cf[l], l});\n    cf[l] -= b[l] * taght;\n  }\n}\ninline void Ins(int x) { // \u52a0\u5165\u4e00\u4e2a\u6bb5\n  int sz = size[FindL(x)];\n  if (sz >= 2) {\n    int l = FindL(x), r = FindR(x);\n    cf[l] += b[l] * tagh;\n    cf[r] += b[r] * tagt;\n    Head.insert((Node){b[l] * cf[l], l});\n    Tail.insert((Node){b[r] * cf[r], r});\n  }\n  else {\n    int l = FindL(x);\n    cf[l] += b[l] * taght;\n    HT.insert((Node){b[l] * cf[l], l});\n  }\n}\nvoid Merge(int lc, int rc) { // \u5408\u5e76\u4e24\u4e2a\u6bb5\n  int szr = size[FindL(rc)];\n  int r = FindR(lc);\n  int l = FindL(rc);\n  R[r] = FindR(rc);\n  L[l] = FindL(lc);\n  size[FindL(lc)] += szr;\n  Ins(lc);\n}\n\nint main() {\n\n#ifdef LOCAL\n  FILEIO(\"a\");\n#endif\n\n  int n, m; scanf(\"%d %d\", &n, &m);\n  for (RI i = 1; i <= n; ++i) scanf(\"%d\", a + i);\n  Init(n);\n  while (m--) {\n    char ch = getchar();\n    while (ch != 'A' && ch != 'B') ch = getchar();\n    if (ch == 'A') {\n      ++tagh, ++taght;\n      if (b[nxt[1]] == 1) { // \u4e0a\u6587\u8bf4\u7684\u7279\u5224\n        Del(nxt[1]);\n        cf[FindL(nxt[1])] += b[FindL(nxt[1])];\n        Ins(nxt[1]);\n      }\n    }\n    else {\n      ++tagt, ++taght;\n      if (b[pre[n + 1]] == -1) { // \u4e0a\u6587\u8bf4\u7684\u7279\u5224\n        Del(pre[n + 1]);\n        cf[FindR(pre[n + 1])] += b[FindR(pre[n + 1])];\n        Ins(pre[n + 1]);\n      }\n    }\n    while (666) { // \u5220\u9664 c[x]=0 \u7684\u4f4d\u7f6e\n      int flag = 1;\n      while (!HT.empty() && HT.top().val <= taght) {\n        flag = 0;\n        Node t = HT.top();\n        Del(t.id);\n        int P = pre[t.id], N = nxt[t.id];\n        nxt[P] = N, pre[N] = P;\n        if (P != 1 && N != n + 1) {\n          Del(P), Del(N);\n          Merge(P, N);\n        }\n      }\n      while (!Head.empty() && Head.top().val <= tagh) {\n        flag = 0;\n        Node t = Head.top();// Head.erase(t);\n        Del(t.id);\n        int l = FindL(t.id);\n        L[l] = L[nxt[l]] = nxt[l];\n        size[nxt[l]] = size[l] - 1;\n        nxt[pre[l]] = nxt[l];\n        pre[nxt[l]] = pre[l];\n        Ins(t.id);\n      }\n      while (!Tail.empty() && Tail.top().val <= tagt) {\n        flag = 0;\n        Node t = Tail.top();// Tail.erase(t);\n        Del(t.id);\n        int l = FindL(t.id), r = FindR(t.id);\n        R[r] = R[pre[r]] = pre[r];\n        size[l] = size[l] - 1;\n        nxt[pre[r]] = nxt[r];\n        pre[nxt[r]] = pre[r];\n        Ins(t.id);\n      }\n      if (flag) break;\n    }\n  }\n  while (!Head.empty()) Del(Head.top().id);\n  while (!Tail.empty()) Del(Tail.top().id);\n  while (!HT.empty()) Del(HT.top().id);\n  int mx = -1, pos = -1;\n  for (RI i = 1; i <= n; ++i) // \u8fd8\u539f a \u6570\u7ec4\n    if (a[i] > mx)\n      mx = a[i], pos = i;\n  ans[pos] = a[pos];\n  for (RI i = pos + 1; i <= n; ++i)\n    ans[i] = ans[i - 1] + cf[i];\n  for (RI i = pos - 1; i >= 1; --i)\n    ans[i] = ans[i + 1] - cf[i + 1];\n  for (RI i = 1; i <= n; ++i)\n    printf(\"%d \", ans[i]);\n\n  cerr << (double)(clock()) / CLOCKS_PER_SEC << \" s \" << endl;\n\n  return 0;\n}\n\n// created by Daniel yuan\n/*\n     ________\n    /        \\\n   / /      \\ \\\n  / /        \\ \\\n  \\            /\n   \\  ______  /\n    \\________/\n*/\n```\n\n\n\n",
        "postTime": 1612428576,
        "uid": 71955,
        "name": "Daniel_yuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4352 \u3010[CERC2015]Greenhouse Growth\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u9ad8\u5ea6\u76f8\u540c\u7684\u4e00\u6bb5\u53ef\u4ee5\u5408\u5e76\uff0c\u7528\u94fe\u8868\u4ece\u5de6\u5f80\u53f3\u7ef4\u62a4\u8fd9\u4e9b\u8fde\u7eed\u6bb5\uff0c\u6bcf\u6bb5\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\nl,rl,r\uff1a\u8868\u793a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u3002\n\nt,at,a\uff1a\u8868\u793a\u5728\u7b2ctt\u5929\u7ed3\u675f\u65f6\u5b83\u7684\u9ad8\u5ea6\u662faa\u3002\n\nbb\uff1a\u5f53\u9633\u5149\u5728\u5de6\u8fb9\u65f6\u5b83\u662f\u5426\u4f1a\u957f\u9ad8\u3002\n\ncc\uff1a\u5f53\u9633\u5149\u5728\u53f3\u8fb9\u65f6\u5b83\u662f\u5426\u4f1a\u957f\u9ad8\u3002\n\n\u4ee4sa[i],sb[i]sa[i],sb[i]\u5206\u522b\u8868\u793a\u524dii\u5929\u4e2d\u9633\u5149\u5728\u5de6/\u53f3\u8fb9\u7684\u5929\u6570\uff0c\u90a3\u4e48\u663e\u7136\u7b2cii\u5929\u8fd9\u4e00\u6bb5\u7684\u9ad8\u5ea6\u4e3aa+b(sa[i]\u2212sa[t])+c(sb[i]\u2212sb[t])a+b(sa[i]\u2212sa[t])+c(sb[i]\u2212sb[t])\u3002\n\n\u5bf9\u4e8e\u76f8\u90bb\u7684\u4e24\u6bb5\uff0c\u6839\u636e\u5176bb\u548ccc\uff0c\u53ef\u4ee5\u5f97\u51fa\u5b83\u4eec\u5408\u5e76\u7684\u65f6\u95f4\u3002\n\n\u4e00\u5929\u4e00\u5929\u8fdb\u884c\u6a21\u62df\uff0c\u6bcf\u5929\u53ea\u5904\u7406\u90a3\u4e00\u5929\u53ef\u80fd\u53d1\u751f\u7684\u5408\u5e76\u4e8b\u4ef6\uff0c\u7136\u540e\u91cd\u65b0\u8ba1\u7b97\u65b0\u7684\u5408\u5e76\u53d1\u751f\u7684\u65f6\u95f4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(n+m)O(n+m)\u3002\n\n\u4ee3\u7801(\u4f60\u4eec\u80af\u5b9a\u53ea\u770b\u8fd9\u4e2a)\uff1a\n~~~\n#include<cstdio>\nconst int N=300010,M=N*3;\nint n,m,ca,cb,i,j,k,T,h[N],tot;char b[N];\nint sa[N],sb[N],ga[N],gb[N],gab[N],v[M],nxt[M],ed;\nstruct P{int l,r,pre,nxt,t,a;bool b,c,del;}e[N];\ninline void read(int&a){char c;while(!(((c=getchar())>='0')&&(c<='9')));a=c-'0';while(((c=getchar())>='0')&&(c<='9'))(a*=10)+=c-'0';}\ninline void add(int&x,int y){v[++ed]=y;nxt[ed]=x;x=ed;}\ninline int ask(const P&p){return p.a+p.b*(ca-sa[p.t])+p.c*(cb-sb[p.t]);}\ninline void cal(P&p){\n  p.b=ask(p)<ask(e[p.pre]);\n  p.c=ask(p)<ask(e[p.nxt]);\n}\ninline void merge(int o);\ninline void check(int o){\n  P&p=e[o],&q=e[p.nxt];\n  int x=ask(p),y=ask(q),z=x<y?y-x:x-y;\n  if(!z)merge(o);\n  bool fa=(x>y)^p.b,fb=(x<y)^q.c;\n  if(fa&&fb){\n    if(ca+cb+z<=m)add(gab[ca+cb+z],o);\n    return;\n  }\n  if(fa){\n    if(ca+z<=m)add(ga[ca+z],o);\n    return;\n  }\n  if(fb){\n    if(cb+z<=m)add(gb[cb+z],o);\n    return;\n  }\n}\ninline void merge(int o){\n  P&p=e[o];\n  if(p.del||!p.nxt)return;\n  P&q=e[p.nxt];\n  int x=ask(p),y=ask(q);\n  if(x!=y)return;\n  q.del=1;\n  p.r=q.r;\n  p.nxt=q.nxt;\n  if(q.nxt)e[q.nxt].pre=o;\n  p.t=T,p.a=x;\n  cal(p);\n  if(p.pre)check(p.pre);\n  if(p.nxt)check(o);\n}\nint main(){\n  read(n),read(m);\n  for(i=1;i<=n;i++)read(h[i]);\n  for(i=1;i<=n;i=j){\n    for(j=i;j<=n&&h[i]==h[j];j++);\n    tot++;\n    e[tot].l=i,e[tot].r=j-1;\n    e[tot].a=h[i];\n  }\n  for(i=1;i<tot;i++)e[i].nxt=i+1;\n  for(i=2;i<=tot;i++)e[i].pre=i-1;\n  for(i=1;i<=tot;i++)cal(e[i]);\n  for(i=1;i<tot;i++)check(i);\n  scanf(\"%s\",b+1);\n  for(T=1;T<=m;T++){\n    b[T]=='A'?ca++:cb++;\n    sa[T]=sa[T-1]+(b[T]=='A');\n    sb[T]=sb[T-1]+(b[T]=='B');\n    for(j=ga[ca];j;j=nxt[j])merge(v[j]);\n    for(j=gb[cb];j;j=nxt[j])merge(v[j]);\n    for(j=gab[T];j;j=nxt[j])merge(v[j]);\n    ga[ca]=gb[cb]=0;\n  }\n  for(i=1;i<=tot;i++)if(!e[i].del)for(k=ask(e[i]),j=e[i].l;j<=e[i].r;j++)h[j]=k;\n  for(i=1;i<=n;i++)printf(\"%d%c\",h[i],i<n?' ':'\\n');\n  return 0;\n}\n~~~\n###### \u62d2\u7edd\u6284\u88ad\n\n\u5e0c\u671b\u5927\u5bb6\u559c\u6b22",
        "postTime": 1548569272,
        "uid": 115066,
        "name": "yang2018",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4352 \u3010[CERC2015]Greenhouse Growth \u3011"
    }
]