[
    {
        "content": "\uff08\u6b64\u9898\u8003\u67e5\u4e86\u5bf9KMP\u7684\u7406\u89e3\u4ee5\u53ca~~\u4e71\u641e\u80fd\u529b~~\u6709\u7406\u6709\u636e\u7684\u4f18\u5316\uff09\n\n\u9996\u5148\u5bf9\u4e8e\u53ef\u6301\u4e45\u5316\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u79bb\u7ebf\u4e0b\u6765\u5e76\u5728\u64cd\u4f5c\u6811\u4e0adfs\u3002\n\n\u9898\u610f\u663e\u7136\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u505aKMP\uff0c\u5e76\u6c42$\\sum nxt_i$\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u5b57\u6bb5\uff0c\u73b0\u5728\u8981\u5728\u540e\u9762\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u5b57\u6bb5\uff0c\u5982\u4f55\u8ba1\u7b97\u65b0\u5b57\u6bb5\u7684\u8d21\u732e\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u8df3$nxt$\uff0c\u5982\u679c\u8df3\u5230\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u540e\u9762\u6b63\u597d\u6709\u4e00\u957f\u4e32\u957f\u5ea6\u4e3a$y$\u7684$c$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u5339\u914d\u3002\n\n\u7531\u4e8e\u4fdd\u8bc1\u4e86$c$\u4e0d\u540c\u4e8e\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u77e5\u9053\u5982\u679c$nxt$\u8df3\u5230\u67d0\u4e2a\u5b57\u6bb5\u7684\u4e2d\u95f4\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u5b9a\u6ca1\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u81ea\u5df1yy\u4e00\u4e0b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49$nxt'_i$\u4e3a\u4ece\u5f53\u524d\u7684\u7b2c$i$\u4e2a\u5b57\u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u4e00\u76f4\u8df3KMP\u7684$nxt$\u6240\u8df3\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u6240\u5728\u7684\u5b57\u6bb5\uff0c\u6ee1\u8db3\u8be5\u70b9\u662f\u5176\u6240\u5728\u5b57\u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002\n\n\u4ee5\u4e0a\u7b97\u6cd5\u5927\u6982\u662f50\u5206\uff0c\u7531\u4e8e\u6570\u636e\u8fc7\u6c34\uff0c\u5b9e\u9645\u53ef\u4ee5AC\u3002\n\n\u5bf9\u4e8ehack\u6570\u636e\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u4f7f\u5176\u590d\u6742\u5ea6\u6b63\u786e\u3002\uff08\u4ee5\u4e0b\u4f18\u5316\u501f\u9274\u4e8e@142857cs\u7684\u4ee3\u7801orz\uff09\n\n\u6bcf\u6b21\u8df3$nxt'$\u65f6\uff0c\u6211\u4eec\u8003\u8651\u8fdb\u884c\u4e00\u4e9b\u4f18\u5316\uff1a\n\n**\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u5b58\u5728\u5468\u671f\uff0c\u6211\u4eec\u76f4\u63a5\u8df3\u5230\u6240\u6709\u5468\u671f\u7684\u7b2c\u4e00\u4e2a\u3002**\n\n\u5426\u5219\u5c31\u548c\u539f\u6765\u4e00\u6837\u8df3$nxt$\u3002\n\n\u8fd9\u6837\u663e\u7136\u6bcf\u6b21\u957f\u5ea6\u81f3\u5c11$/2$\uff0c\u590d\u6742\u5ea6\u5c31\u4e0d\u9700\u8981\u5747\u644a\u4e86\uff0c\u76f4\u63a5\u5c31\u662f$O(nlogn)$\n\n\uff08\u5982\u6709\u9519\u8bef\u8bf7\u4e0d\u541d\u8d50\u6559\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing std::min;\nstd::map<std::pair<char,short>,int>ma[100001];\nchar get(){\n    char ch=getchar();\n    while(ch<'a'||ch>'z')ch=getchar();\n    return ch;\n}\nint end[100010],pre[100010],cnt,n,length[100010],nxt[100010],ope[100010][2],len,P=998244353,f[100001];\nint head[100010],Nxt[200010],b[200010],k,cn;\nvoid push(int s,int t){\n    Nxt[++k]=head[s];\n    head[s]=k;\n    b[k]=t;\n}\nlong long ans[100010],fin[100010],val[100010][3];\ninline long long getsum(register long long l,register long long r){\n    if(l>r)return 0;\n    return (l+r)*(r-l+1)/2;\n}\nvoid dfs(int x,int f){\n    if(ope[x][0]){\n        int tem=nxt[len];\n        ++len;\n        ans[len]=0;\n        val[len][0]=ope[x][0];\n        val[len][1]=ope[x][1];\n        val[len][2]=val[len-1][2]+ope[x][1];\n        nxt[len]=0;\n        if(len==1){\n            ans[len]=getsum(1,val[1][1]-1);\n        }\n        else{\n        \tint lastgap=len-tem;\n            while(tem&&(val[tem+1][0]!=ope[x][0]||val[tem+1][1]!=ope[x][1])){\n                if(tem-nxt[tem]==lastgap)tem=tem%lastgap+lastgap;\n                lastgap=tem-nxt[tem];\n                tem=nxt[tem];\n            }\n            if(tem||(val[1][0]==ope[x][0]&&val[1][1]<=ope[x][1]))nxt[len]=tem+1;\n            else nxt[len]=tem;\n            tem=nxt[len-1];\n        \tlastgap=len-1-tem;\n            long long lastlength=0;\n            while(lastlength<val[len][1]&&tem){\n                if(val[tem+1][0]==ope[x][0]&&val[tem+1][1]>lastlength){\n                    ans[len]+=getsum(val[tem][2]+lastlength+1,val[tem][2]+min(val[tem+1][1],val[len][1]));\n                    lastlength=val[tem+1][1];\n                }\n                if(tem-nxt[tem]==lastgap)tem=tem%lastgap+lastgap;\n                lastgap=tem-nxt[tem];\n                tem=nxt[tem];\n            }\n            if(lastlength<val[len][1]&&val[1][0]==val[len][0]){\n                ans[len]+=getsum(lastlength+1,min(val[len][1],val[1][1]));\n                lastlength=std::max(lastlength,min(val[len][1],val[1][1]));\n                ans[len]+=val[1][1]*(val[len][1]-lastlength);\n            }\n            ans[len]+=ans[len-1];\n        }\n    }\n    fin[x]=ans[len];\n    for(int i=head[x];i;i=Nxt[i]){\n        dfs(b[i],x);\n    }\n    if(ope[x][0])--len;\n}\nint read(){\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nvoid write(long long x){\n    if(x>9)write(x/10);\n    putchar((x%10)+'0');\n}\nsigned main(){\n    scanf(\"%d\",&n);\n    for(int i=1,opt,x;i<=n;i++){\n        opt=read(),x=read();\n        if(opt==1){\n            ope[i][0]=get();\n            ope[i][1]=x;\n            auto y=std::make_pair(ope[i][0],ope[i][1]);\n            f[i]=ma[f[i-1]][y];\n            if(!f[i]) ma[f[i-1]][y]=i,push(f[i-1],i),f[i]=i;\n        }\n        else{\n            f[i]=f[x];\n        }\n    }\n    dfs(0,-1);\n    for(int i=1;i<=n;i++)write(fin[f[i]]%P),putchar('\\n');\n}\n\n```",
        "postTime": 1554814914,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5287 \u3010[HNOI2019]JOJO\u3011"
    },
    {
        "content": "~~\u6570\u7ec4\u4e0d\u6e05\u7a7a\uff0c\u72060\u4e24\u884c\u6cea~~\n\n\u9996\u5148\u4f60\u53d1\u73b0\u8fd9\u4e2a\u4e32\u662f\u7531\u4e00\u5806\u4e8c\u5143\u7ec4$(x_i,c_i)$\u6784\u6210\u7684\uff0c\u7136\u800c\u8fd9\u4e2a\u5339\u914d\u662f\u57fa\u4e8e\u4e00\u4e2a\u4e2a\u5b57\u7b26\u5339\u914d\u7684\uff0c\u770b\u4e0a\u53bb\u4f3c\u4e4e\u548c\u8fd9\u4e9b$O(n)$\u4e2a\u4e8c\u5143\u7ec4\u6ca1\u5565\u5173\u7cfb\u3002\u4f46\u662f\u8fd9\u9898\u7684\u6700\u91cd\u8981\u7684\u6027\u8d28\u5c31\u662f\u5982\u679c\u4e00\u4e2a\u524d\u7f00\u548c\u4e00\u4e2a\u540e\u7f00\u80fd\u591f\u5339\u914d\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u9664\u53bb\u5f00\u5934\u7684\u548c\u7ed3\u5c3e\u7684\u5269\u4e0b\u4e2d\u95f4\u7684\u6240\u6709\u4e8c\u5143\u7ec4\u4e00\u5b9a\u80fd\u5339\u914d\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n$aaa|bb|ccc|a|c|bbbb\u2026\u2026aaaaa|bb|ccc|a|c|bbb$\n\n\u8fd9\u4e2a\u663e\u7136\u53ef\u4ee5\u6709\u4e00\u4e2a$Border$\u662f$aaabbcccacbbb$\uff0c\u8fd9\u4e2d\u95f4\u7684$bbcccac$\u7684\u90e8\u5206\u662f\u5b8c\u5168\u5339\u914d\u7684\u4e8c\u5143\u7ec4\u5e8f\u5217$(2,b)(3,c)(1,a)(1,c)$\uff0c\u4f46\u662f\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u4e8c\u5143\u7ec4\u53ef\u80fd\u957f\u5ea6\u6709\u6240\u4e0d\u540c\uff0c\u5177\u4f53\u6765\u8bf4\uff0c**\u540e\u7f00\u7684\u5f00\u5934\u957f\u5ea6\u4e0d\u5c0f\u4e8e\u524d\u7f00\uff0c\u7ed3\u5c3e\u957f\u5ea6\u4e0d\u8d85\u8fc7\u524d\u7f00**\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u4ed6\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u6761\u4ef6\u624d\u80fd\u591f\u5339\u914d\u3002\n\n\u5f88\u663e\u7136\u90a3\u4e2a2\u7684\u53ef\u6301\u4e45\u5316\u64cd\u4f5c\u6211\u4eec\u9700\u8981\u79bb\u7ebf\u5efa\u68f5\u6811\u7136\u540edfs\uff08\u5176\u5b9e\u5728\u7ebf\u5728\u8fd9\u68f5\u6811\u4e0a\u505a\u505a\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\u2026\u2026\uff09\uff0c\u6211\u4eec\u5c31\u8003\u8651\u5f53\u524d\u70b9\u5230\u6839\u7684\u4e32\u5c31\u884c\u4e86\u3002\n\n\u65e2\u7136\u90a3\u4e2d\u95f4\u7684\u4e8c\u5143\u7ec4\u9700\u8981\u4e25\u683c\u7684\u5339\u914d\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u628a\u8fd9\u4e2a\u6c42\u4e00\u4e2a$next$\uff0c\u800c\u4e14\u65e2\u7136\u6211\u7684\u7b2c\u4e00\u4e2a\u4e8c\u5143\u7ec4\u53ef\u4ee5\u5728\u957f\u5ea6\u4e0a\u4e0d\u4e25\u683c\u7684\u5339\u914d\uff0c\u5e72\u8106\u5c31\u5728\u6784\u5efa$next$\u6570\u7ec4\u7684\u65f6\u5019\u7279\u5224\u4e00\u4e0b\u4e0e\u7b2c\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7684\u5339\u914d\u4e0d\u5c31\u884c\u4e86\uff1f\u8fd9\u6837\u6211\u4eec\u5c31\u53ea\u9700\u8003\u8651\u7ed3\u5c3e\u7684\u4e8c\u5143\u7ec4\u4e86\uff0c\u800c\u6211\u4eec\u4e5f\u6b63\u662f\u8981\u8003\u8651\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4\u4f1a\u589e\u52a0\u591a\u5c11\u7b54\u6848\uff0c\u8fd9\u6837\u597d\u3002\n\n\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u662f\u5728\u6811\u4e0a\u8dd1$next$\uff0c\u7136\u800c\u666e\u901a\u4e32\u4e0a\u7684\u590d\u6742\u5ea6\u662f**\u5747\u644a**$O(n)$\u7684\uff0c\u653e\u5230\u6811\u4e0a\u590d\u6742\u5ea6\u5c31\u4e0d\u5bf9\u4e86\u2026\u2026\uff08\u8fd9\u663e\u7136\u53ef\u4ee5\u9020\u4e00\u6761\u94fe\uff0c\u5e95\u4e0b\u6302\u4e2a\u83ca\u82b1\u6765\u5361\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u50cf\u81ea\u52a8\u673a\u4e00\u6837\u4ee4$nxt[i][c][x]$\u4e3a\u5728\u4e0e$i$\u53f7\u70b9\u8fd9\u4e2a\u524d\u7f00\u4e00\u6837\u7684\u540e\u7f00\u540e\u9762\u52a0\u4e2a\u4e8c\u5143\u7ec4$(x,c)$\uff0c$next$\u5e94\u8be5\u5230\u54ea\uff0c\u8fd9\u4e2a$nxt[i][c]$\u53ef\u4ee5\u5957\u8def\u7684\u7528\u4e3b\u5e2d\u6811\u5b58\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u4ece$next[i]$\u8f6c\u79fb\u8fc7\u6765\uff0c\u7136\u540e\u5355\u70b9\u4fee\u6539\u3002\n\n\uff08\u63a5\u4e0b\u6765\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u4e2a\u4e32\u7684**fail\u6811**\u4e3a\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u7684\u4f4d\u7f6e\u4ee5$next$\u4e3a\u7236\u4eb2\u6784\u5efa\u7684\u6811\uff0c\u8981\u6ce8\u610f\u4e0e\u8fd9\u68f5\u8be2\u95ee\u7684\u6811\u533a\u5206\u5f00\uff09\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u6dfb\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4$(x,c)$\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u8003\u8651\u5b83\u7684\u4e0a\u4e00\u4e2a\u4f4d\u7f6e$u$\u7684$fail$\u6811\u4e0a\u5230\u6839\u7684\u4e00\u6761\u7956\u5148\u94fe\uff0c\u65b0\u52a0\u7684\u8fd9$x$\u4e2a\u5b57\u7b26\u53ef\u80fd\u5c31\u4f1a\u628a$next$\u7ee7\u627f\u81ea\u8fd9\u6761\u94fe\u4e0a\u7684\u67d0\u4e2a\u540e\u7ee7\u5b57\u7b26\u4e3a$c$\u7684\u7956\u5148\uff0c\u7136\u800c\uff0c\u8fd9\u6837\u7684\u7956\u5148\u4f1a\u6709\u5f88\u591a\uff0c\u4f46\u662f\u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684$next$\u5c3d\u91cf\u957f\uff08\u6bd5\u7adf\u662f\u6700\u957f\u7684$Border$\uff09\uff0c\u6211\u4eec\u4ee5\u8fd9\u5f20\u56fe\u4e3a\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/58634.png)\n\n\uff08\u5176\u4e2d\u9ed1\u8272\u90e8\u5206\u662f\u8fd9\u6761fail\u94fe\uff0c\u7ea2\u8272\u7684\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a$x$\u7684\u4e8c\u5143\u7ec4$(x,c)$\uff0c\u8fd9\u662f\u6211\u4eec\u5f53\u524d\u5728\u6dfb\u52a0\u7684\u65b0\u4e8c\u5143\u7ec4\uff0c\u4e0a\u97623\u4e2a\u84dd\u8272\u7684\u662f\u540e\u7ee7\u5b57\u7b26\u4e3a$c$\u76843\u4e2a\u7956\u5148\u7684\u4e8c\u5143\u7ec4\uff09\n\n\u6211\u4eec\u5bf9$[1,x]$\u6240\u6709\u7684\u65b0\u6dfb\u52a0\u7684$c$\u5b57\u7b26\u8fdb\u884c\u5206\u6bb5\u8003\u8651\uff0c$[1,x_3]$\u8fd9\u4e2a\u90e8\u5206\u663e\u7136\u5c31\u8981\u627e$(x3,c)$\u8fd9\u4e2a\u7956\u5148\u8fdb\u884c\u5339\u914d\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684$i\\in[1,x_3]$\uff0c$next_i=deep_{(x_3,c)}+i$\uff0c\u540c\u7406\u5bf9\u4e8e\u4efb\u610f\u7684$i\\in[x_3+1,x_2]$\uff0c$next_i=deep_{(x_2,c)}+i$\uff0c\u5bf9\u4e8e$i>x2$\uff0c$next_i$\u663e\u7136\u5c31\u662f0\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u62c6\u6210\u4e24\u90e8\u5206\uff0c\u6211\u4eec\u8bbe$mx[i][c]$\u4e3a$i$\u7684\u6240\u6709fail\u7956\u5148\u4e2d\uff0c\u540e\u7ee7\u5b57\u7b26\u4e3a$c$\u7684\u6700\u957f\u7684$x$\uff0c\u90a3\u4e48\u663e\u7136\u5728$[1,\\min(mx[u][c],x)]$\u8fd9\u4e2a\u90e8\u5206\u91cc\u7684$next$\u662f\u6709\u503c\u7684\uff0c\u5b83\u4eec\u80af\u5b9a\u8981\u52a0$i$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u628a$\\sum_{i=1}^{\\min(mx[u][c],x)}i$\u8fd9\u4e2a\u7b49\u5dee\u6570\u5217\u7684\u548c\u52a0\u5230\u7b54\u6848\u91cc\uff0c\u7136\u540e\u5c31\u662f\u8003\u8651\u80fd\u591f\u5339\u914d\u7684\u7956\u5148\u7684\u6df1\u5ea6\u4e4b\u548c\u4e86\u3002\u6ce8\u610f\u5230\u6211\u4eec\u5728$dfs$\u7684\u65f6\u5019\uff0c\u6df1\u5ea6\u663e\u7136\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u533a\u95f4\u5f3a\u884c\u8d4b\u503c\uff01\u4ee4$f[i][c][x]$\u4e3a$i$\u7684$fail$\u7956\u5148\u5bf9\u4e00\u4e2a\u5728\u540e\u9762$x$\u4f4d\u7f6e\u7684$c$\u5b57\u7b26\u7684\u6700\u5927\u7684\u8d21\u732e\uff0c\u8fd9\u4e2a\u4ecd\u7136\u7528\u4e3b\u5e2d\u6811\u5b58\uff0c\u6211\u4eec\u6bcf\u9047\u5230\u4e00\u4e2a$(x,c)$\uff0c\u90fd\u628a$[1,x]$\u8fd9\u4e2a\u533a\u95f4\u5f3a\u884c\u8d4b\u4e3a\u5f53\u524d\u70b9\u7684\u6df1\u5ea6\u56e0\u4e3a\u8fd9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u6837\u5728\u4e3b\u5e2d\u6811\u4e0a\u533a\u95f4\u6c42\u548c\u5c31\u884c\u4e86\u3002\n\n\u53e6\u5916\u6211\u4eec\u9700\u8981\u7279\u5224\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u8fd9\u79cd\u60c5\u51b5\uff1a\n\n$aaaa|bbbb|aaaaaa$\n\n\u8003\u8651\u6700\u540e\u4e00\u6bb5$(6,a)$\u7684$next$\u6570\u7ec4\u4f9d\u6b21\u4e3a$1,2,3,4,4,4$\uff0c\u800c\u4e0d\u662f$1,2,3,4,0,0$\uff0c\u8fd9\u662f\u56e0\u4e3a\u5339\u914d\u7684\u662f\u7b2c\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c\u8fd9\u4e2a\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#define ll long long\n#define p 998244353\n#define up(_o) data[_o] = (data[lef[_o]] + data[rgh[_o]]) % p\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tinline char cget() {\n\t    char c;\n\t    while ((c = getchar()) || 23333)\n\t        if (c >= 'a' && c <= 'z')\n\t            return (c);\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t    int x;\n\t    int c;\n\t} bian;\n\tbian memchi[1000001], stk[100011];\n\tint gn = 1, heads[200001], f[200011][26], nxt[200011][26];\n\tinline void add(int s, int t, int x, int c) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    memchi[gn].x = x;\n\t    memchi[gn].c = c;\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint lef[20000001], rgh[20000001];\n\tint data[20000001], anss[200001], changes[20000001];\n\tint id[200001], gseg = 1;\n\tint set(int rl, int rr, int l, int r, int tree, int x, int chg) {\n\t    int me = gseg;\n\t    gseg++;\n\t    if (rl == l && rr == r) {\n\t        changes[me] = x;\n\t        data[me] = (x * (ll)(r - l + 1)) % p;\n\t        return (me);\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    if (changes[tree])\n\t        chg = changes[tree];\n\t    if (rl > mid) {\n\t        if (chg) {\n\t            lef[me] = gseg;\n\t            gseg++;\n\t            changes[lef[me]] = chg;\n\t            data[lef[me]] = (chg * (mid - l + 1)) % p;\n\t            rgh[me] = set(rl, rr, mid + 1, r, rgh[tree], x, chg);\n\t        } else\n\t            lef[me] = lef[tree], rgh[me] = set(rl, rr, mid + 1, r, rgh[tree], x, 0);\n\t    } else {\n\t        if (rr <= mid) {\n\t            if (chg) {\n\t                rgh[me] = gseg;\n\t                gseg++;\n\t                changes[rgh[me]] = chg;\n\t                data[rgh[me]] = (chg * (ll)(r - mid)) % p;\n\t                lef[me] = set(rl, rr, l, mid, lef[tree], x, chg);\n\t            } else\n\t                rgh[me] = rgh[tree], lef[me] = set(rl, rr, l, mid, lef[tree], x, 0);\n\t        } else {\n\t            lef[me] = set(rl, mid, l, mid, lef[tree], x, chg);\n\t            rgh[me] = set(mid + 1, rr, mid + 1, r, rgh[tree], x, chg);\n\t        }\n\t    }\n\t    up(me);\n\t    return (me);\n\t}\n\tint query(int rl, int rr, int l, int r, int tree) {\n\t    if (!tree)\n\t        return (0);\n\t    int mid = (l + r) >> 1;\n\t    if (changes[tree])\n\t        return ((changes[tree] * (ll)(rr - rl + 1)) % p);\n\t    if (rl == l && rr == r)\n\t        return (data[tree]);\n\t    if (rl > mid)\n\t        return (query(rl, rr, mid + 1, r, rgh[tree]));\n\t    if (rr <= mid)\n\t        return (query(rl, rr, l, mid, lef[tree]));\n\t    return ((query(rl, mid, l, mid, lef[tree]) + query(mid + 1, rr, mid + 1, r, rgh[tree])) % p);\n\t}\n\tint sp = 1, fail[200001], mx[200001][26];\n\tinline ll dft(ll n) { return (((n * (n + 1)) >> 1) % p); }\n\tvoid dfs(int pt, int deep) {\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (pt) {\n\t            for (register int j = 0; j < 26; j++)\n\t                mx[pt][j] = mx[fail[pt]][j], f[pt][j] = f[fail[pt]][j], nxt[pt][j] = nxt[fail[pt]][j];\n\t        } else {\n\t            for (register int j = 0; j < 26; j++) mx[pt][j] = 0, f[pt][j] = 0, nxt[pt][j] = 0;\n\t        }\n\t        if (pt == 0)\n\t            stk[1] = memchi[i];\n\t        fail[memchi[i].dest] = query(memchi[i].x, memchi[i].x, 1, 10000, nxt[pt][memchi[i].c]);\n\t        if (pt == 0) {\n\t            anss[memchi[i].dest] = dft(memchi[i].x - 1);\n\t        } else {\n\t            if (!fail[pt]) {\n\t                if (memchi[i].c != stk[1].c)\n\t                    anss[memchi[i].dest] = anss[pt];\n\t                else\n\t                    anss[memchi[i].dest] =\n\t                        (anss[pt] + dft(min(memchi[i].x, mx[pt][memchi[i].c])) +\n\t                         (ll)(memchi[i].x - min(memchi[i].x, mx[pt][memchi[i].c])) * mx[pt][memchi[i].c]) %\n\t                        p;\n\t            } else {\n\t                anss[memchi[i].dest] = (anss[pt] + dft(min(memchi[i].x, mx[pt][memchi[i].c])) +\n\t                                        (ll)query(1, memchi[i].x, 1, 10000, f[pt][memchi[i].c])) %\n\t                                       p;\n\t                if (memchi[i].x > mx[pt][memchi[i].c] && memchi[i].c == stk[1].c) {\n\t                    anss[memchi[i].dest] =\n\t                        (anss[memchi[i].dest] + stk[1].x * (ll)(memchi[i].x - mx[pt][memchi[i].c])) % p;\n\t                }\n\t            }\n\t        }\n\t        f[pt][memchi[i].c] = set(1, memchi[i].x, 1, 10000, f[fail[pt]][memchi[i].c], deep, 0);\n\t        if (pt == 0) {\n\t            nxt[pt][memchi[i].c] =\n\t                set(memchi[i].x, 10000, 1, 10000, nxt[fail[pt]][memchi[i].c], memchi[i].dest, 0);\n\t        } else\n\t            nxt[pt][memchi[i].c] =\n\t                set(memchi[i].x, memchi[i].x, 1, 10000, nxt[fail[pt]][memchi[i].c], memchi[i].dest, 0);\n\t        mx[pt][memchi[i].c] = max(mx[fail[pt]][memchi[i].c], memchi[i].x);\n\t        dfs(memchi[i].dest, deep + memchi[i].x);\n\t    }\n\t}\n\tvoid ywymain() {\n\t    int n = get();\n\t    int cur = 0, gpt = 1;\n\t    for (register int i = 1; i <= n; i++) {\n\t        int op = get();\n\t        if (op == 2)\n\t            cur = id[get()];\n\t        else {\n\t            int x = get();\n\t            char c = cget();\n\t            add(cur, gpt, x, c - 'a');\n\t            cur = gpt;\n\t            gpt++;\n\t        }\n\t        id[i] = cur;\n\t    }\n\t    dfs(0, 0);\n\t    for (register int i = 1; i <= n; i++) printf(\"%d\\n\", anss[id[i]]);\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1557755107,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5287 \u3010[HNOI2019]JOJO\u3011"
    },
    {
        "content": "# Description\n\n\u4e24\u79cd\u64cd\u4f5c\n\n - `1 x c` \u5728\u5f53\u524d\u5b57\u7b26\u4e32\u672b\u5c3e\u6dfb\u52a0$x$\u4e2a$c$\u5b57\u7b26\u3002\n - `2 x` \u628a\u5f53\u524d\u5b57\u7b26\u4e32\u53d8\u4e3a\u7b2c$x$\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u72b6\u6001\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0c\u8f93\u51fa\u5f53\u524d\u5b57\u7b26\u4e32\u7684$next$\u6570\u7ec4\u53ea\u548c\u3002\n\n\u64cd\u4f5c\u6570$\\leq 10^5$\uff0c$c \\leq 10^4$\u3002\n\n# Solution\n\n`2`\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u7528\u79bb\u7ebf\u5efa\u6811\u89e3\u51b3\u3002\n\n\u8003\u8651\u5982\u679c\u4e00\u6bb5\u524d\u7f00\u5339\u914d\u4e00\u6bb5\u540e\u7f00\uff0c\u90a3\u4e48\u9664\u4e86\u7b2c\u4e00\u6bb5\u7684\u5b57\u7b26\uff0c\u5176\u4ed6\u6bb5\u7684\u4e8c\u5143\u7ec4$(x,c)$\u9700\u8981\u6ee1\u8db3\u5b8c\u5168\u76f8\u7b49\u3002\u8fd9\u672c\u8d28\u4e0a\u53ef\u4ee5\u5c06$(x,c)$\u89c6\u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u5b57\u7b26\u8fdb\u884c\u5339\u914d\u3002\n\n\u5148\u8003\u8651\u5728\u5f53\u524d\u4e32\u7684\u672b\u5c3e\u65b0\u52a0\u5165\u4e00\u4e2a\u4e8c\u5143\u7ec4$(x,c)$\u600e\u4e48\u8ba1\u7b97\u7b54\u6848\uff0c\u663e\u7136\u662f\u4e0d\u65ad\u8df3$next$\uff0c\u5982\u679c\u5f53\u524d\u524d\u7f00\u540e\u63a5\u7684\u5b57\u7b26\u4e3a$c$\uff0c\u90a3\u4e48\u53ef\u4ee5\u589e\u52a0\u4e00\u6bb5\u9996\u9879\u4e3a\u5f53\u524d\u524d\u7f00\u957f\u5ea6\uff0c\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217\u7684\u8d21\u732e\uff08\u8981\u4e0e\u4e4b\u524d\u7684\u8d21\u732e\u53d6$max$\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u8986\u76d6\u4e4b\u524d\u6ca1\u8986\u76d6\u7684\u4f4d\u7f6e\uff09\u3002\n\n\u800c\u5982\u679c\u5728$next$\u94fe\u4e0a\u6709\u6070\u597d\u7b49\u4e8e$(x,c)$\u7684\u4e8c\u5143\u7ec4\uff0c\u90a3\u4e48\u5f53\u524d\u4e32\u7ed3\u5c3e\u7684$next$\u6307\u5411\u6700\u9760\u540e\u7684\u4e8c\u5143\u7ec4\uff0c\u5426\u5219\u6307\u5411$0$\u3002\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u4e8c\u5143\u7ec4$(x',c)$\u6ee1\u8db3$x'>x$\uff0c\u90a3\u4e48\u7531\u4e8e\u4e0b\u6b21\u6dfb\u52a0\u7684\u5b57\u7b26\u4e00\u5b9a\u4e0e\u5f53\u524d\u5b57\u7b26\u4e0d\u540c\uff0c\u6240\u4ee5\u4e00\u5b9a\u65e0\u6cd5\u5339\u914d\u3002\n\n\u4f46\u662f\u7531\u4e8e$kmp$\u7684\u590d\u6742\u5ea6\u662f\u5747\u644a\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u4e0a\u8ff0\u7b97\u6cd5\u5957\u8fdb\u6811\u4e0a`dfs`\u662f\u884c\u4e0d\u901a\u7684\u3002\n\n\u8003\u8651\u4e00\u4e2a\u53eb$kmp$\u81ea\u52a8\u673a\u7684\u4e1c\u897f\uff0c\u5b83\u7684\u672c\u8d28\u662f\u628a$kmp$\u8df3$next$\u7684\u8fc7\u7a0b\u9884\u5904\u7406\uff0c\u7531\u4e8e\u672c\u9898\u5b57\u7b26\u96c6\u5927\u5c0f\u5f88\u5927\uff0c\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u3002\n\n\u8bbe$f_{i,j,k}$\u8868\u793a\u5728\u4e32\u7684$s_{i-1}$\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26$(j,k)next$\u6240\u5230\u8fbe\u7684\u4f4d\u7f6e\uff0c\u540c\u7406\u8bbe$g_{i,j,k}$\u8868\u793a\u589e\u52a0\u7684\u7b54\u6848\u3002\u5728`dfs`\u7684\u65f6\u5019\uff0c\u4fee\u6539$f_{i,x,c}$\u7684\u503c\uff0c\u5e76\u5c06$g_{i,x,1..c}$\u8bbe\u7f6e\u4e3a\u9996\u9879\u4e3a\u5f53\u524d\u4e32\u957f\u5ea6\uff0c\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217\u3002`dfs`\u4e0b\u4e00\u5c42\u524d\u628a$f_{i+1}$\u7684\u72b6\u6001\u7531$f_{next[i]+1}$\u7ee7\u627f\u8fc7\u6765\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u628a\u6570\u5217\u8bbe\u4e3a\u4e00\u4e2a\u516c\u5dee\u4e3a$1$\u7684\u7b49\u5dee\u6570\u5217\uff0c\u6240\u4ee5\u53ea\u7528\u7ef4\u62a4\u9996\u9879\u6240\u8986\u76d6\u7684\u4f4d\u7f6e\uff0c\u5269\u4e0b\u7684\u7528\u9ad8\u65af\u6c42\u548c\u5355\u72ec\u7b97\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\ninline char gc()\n{\n\tchar c = getchar();\n\twhile (c < 'a' || c > 'z') c = getchar();\n\treturn c;\n}\n\ntypedef long long ll;\nconst int maxn = 100005, M = 1e4 + 7, mod = 998244353;\n\nint n;\nint val[maxn], pos[maxn], ans[maxn], a[maxn], b[maxn], top;\nvector<int> to[maxn];\n\nint rt[maxn][26], mx[maxn][26], tot;\nstruct seg\n{\n\tint l, r, lch, rch, sum, lzy, nxt;\n} t[maxn * 60];\n\n#define mid ((l + r) >> 1)\n\ninline void new_node(int &s) {t[++tot] = t[s]; s = tot;}\ninline void add(int s, int v, int len) {t[s].sum = (ll)v * len % mod; t[s].lzy = v;}\ninline void push_down(int s, int l, int r)\n{\n\tif (!t[s].lzy) return ;\n\tnew_node(t[s].lch); add(t[s].lch, t[s].lzy, mid - l + 1);\n\tnew_node(t[s].rch); add(t[s].rch, t[s].lzy, r - mid);\n\tt[s].lzy = 0;\n}\n\nvoid modify(int &s, int l, int r, int x, int v, int p)\n{\n\tnew_node(s);\n\tif (r < x) return add(s, v, r - l + 1);\n\tif (l == r) return t[s].nxt = p, add(s, v, 1);\n\tpush_down(s, l, r);\n\tmodify(t[s].lch, l, mid, x, v, p);\n\tif (x > mid) modify(t[s].rch, mid + 1, r, x, v, p);\n\tt[s].sum = (t[t[s].lch].sum + t[t[s].rch].sum) % mod;\n}\n\nvoid query(int &s, int l, int r, int x, int &ans, int &nxt)\n{\n\tif (r < x) return ans = (ans + t[s].sum) % mod, void();\n\tif (l == r) return ans = (ans + t[s].sum) % mod, nxt = t[s].nxt, void();\n\tpush_down(s, l, r);\n\tquery(t[s].lch, l, mid, x, ans, nxt);\n\tif (x > mid) query(t[s].rch, mid + 1, r, x, ans, nxt);\n}\n\ninline int getsum(int x) {return ((ll)x * (x + 1) >> 1) % mod;}\n\nvoid dfs(int u)\n{\n\t++top;\n\tint x = val[u] / M, y = val[u] % M, nxt = 0;\n\ta[top] = val[u]; b[top] = b[top - 1] + y;\n\tif (top == 1) ans[u] = getsum(y - 1);\n\telse {\n\t\tans[u] = (ans[u] + getsum(min(mx[top][x], y))) % mod;\n\t\tquery(rt[top][x], 1, M, y, ans[u], nxt);\n\t\tif (!nxt && a[1] / M == x && b[1] < y) nxt = 1, ans[u] = (ans[u] + (ll)b[1] * max(0, y - mx[top][x])) % mod;\n\t}\n\tmx[top][x] = max(mx[top][x], y);\n\tmodify(rt[top][x], 1, M, y, b[top - 1], top);\n\tfor (int v : to[u]) {\n\t\tmemcpy(mx[top + 1], mx[nxt + 1], sizeof(mx[top + 1]));\n\t\tmemcpy(rt[top + 1], rt[nxt + 1], sizeof(rt[top + 1]));\n\t\tans[v] = ans[u]; dfs(v);\n\t}\n\t--top;\n}\n\nint main()\n{\n\tn = gi();\n\tfor (int op, x, i = 1; i <= n; ++i) {\n\t\top = gi(); x = gi();\n\t\tif (op == 1) val[++tot] = (gc() - 'a') * M + x, pos[i] = tot, to[pos[i - 1]].push_back(pos[i]);\n\t\telse pos[i] = pos[x];\n\t}\n\n\tfor (int i : to[0]) {\n\t\ttot = 0;\n\t\tmemset(rt[1], 0, sizeof(rt[1]));\n\t\tmemset(mx[1], 0, sizeof(mx[1]));\n\t\tdfs(i);\n\t}\n\n\tfor (int i = 1; i <= n; ++i) printf(\"%d\\n\", ans[pos[i]]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1555311433,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5287 \u3010[HNOI2019]JOJO\u3011"
    },
    {
        "content": "# HNOI2019 JOJO\n\n**upd:\u7a81\u7136\u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u662f\u53ef\u4ee5\u5f3a\u5236\u5728\u7ebf\u7684\uff0c\u4e0b\u9762\u7684\u63cf\u8ff0\u6709\u6240\u6539\u52a8**\n\n\u88ab\u9c7c\u90a3\u9898\u9001\u9000\u5f79\u4e86\uff0c\u5f88\u751f\u6c14\u3002\n\n\u7136\u540e\u6211Day1\u5feb\u4e0b\u8003\u7684\u65f6\u5019\u53e3\u80e1\u4e86\u4e00\u4e2a\u505a\u6cd5\n\n\u4eca\u5929\u60f3\u8d77\u6765\u4e4b\u540e\u5c31\u5199\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u5b83\u8fc7\u4e86\uff0c\u5b83\u8fc7\u4e86\uff0c\u5b83\u8fc7\u4e86\u3002\n\nwoc\u8981\u662f\u4e0d\u5199\u9c7c\uff0c\u6211\u53ef\u4ee5\u591a\u51fa3\u4e2a\u5c0f\u65f6\u5199T2,T3,\u968f\u4fbf\u6253\u4e5f\u80fd\u8fdb\u961f\u554a\u554a\u554a\u554a\u554a\u554a\n\n\u597d\u4e86\uff0c\u4e0d\u626f\u4e86\uff0c\u6211\u4eec\u8a00\u5f52\u6b63\u4f20\u3002\n\n\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u82e5\u4e24\u4e2a\u4e32\u5339\u914d\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e2d\u95f4\u7684\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e5f\u5fc5\u987b\u76f8\u540c\uff0c\u53ea\u6709\u7b2c\u4e00\u6bb5\u548c\u6700\u540e\u4e00\u6bb5\u53ef\u80fd\u4e0d\u662f\u5b8c\u6574\u7684\u4e00\u6bb5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u6bcf\u4e00\u6bb5\u76f8\u540c\u7684\u5b57\u7b26\u770b\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26(**\u6211\u4eec\u6682\u4e14\u628a\u65b0\u7684\u5b57\u7b26\u53eb\u505a\u5b57\u6bb5**)\uff0c\u6c42next\u6570\u7ec4\u3002\n\n\u7531\u4e8e\u5176\u4e2d\u4e00\u4e2a\u5339\u914d\u4e32\u5fc5\u987b\u662f\u6574\u4e2a\u4e32\u7684\u524d\u7f00\uff0c\u56e0\u6b64\uff0c\u7b2c\u4e00\u5b57\u6bb5\u7684\u5904\u7406\u51e0\u4e4e\u4e0e\u4e00\u822c\u7684KMP\u76f8\u540c\uff0c\u53ea\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5**:\u82e5\u67d0\u4e2a\u5b57\u6bb5\u4e0e\u7b2c\u4e00\u5b57\u6bb5\u7684\u5b57\u7b26\u76f8\u540c\uff0c\u5e76\u4e14\u957f\u5ea6\u5927\u4e8e\u7b2c\u4e00\u5b57\u6bb5**\uff0c\u4e5f\u662f\u53ef\u4ee5\u5339\u914d\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e00\u6bb5\u7684\u540e\u9762\u4e00\u6bb5\u5b57\u7b26\u53bb\u5339\u914d\u7b2c\u4e00\u6bb5\u5b57\u7b26\n\n\u6bd4\u5982\u8bf4 \u5bf9\u4e8e\u4e32aabbbaabbaaabbb\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u770b\u6210 a2 b3 a2 b2 a3 b3 \u51716\u4e2a\u5b57\u6bb5\u7684\u4e32\n\n\u8fd9\u4e2a\u65b0\u4e32\u7684next\u6570\u7ec4\u4e3a 0 0 1 0 1 2 \n\n\u6b64\u65f6$next[4]=0$\u800c\u4e0d\u662f$1$\uff0c\u56e0\u4e3a\u540e\u4e00\u4e2a\u5b57\u7b26\u4e00\u5b9a\u4e0e$b$\u4e0d\u540c\uff0c\u4e00\u5b9a\u5339\u914d\u4e0d\u4e0a\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd9\u4e2anext\u5bf9\u4e8e\u540e\u9762\u7684\u5339\u914d\u6765\u8bf4\u662f\u65e0\u610f\u4e49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd1\u4f3c\u7684\u8ba4\u4e3a\uff0cb2\u4e0eb3\u4e0d\u80fd\u5339\u914d\uff0c\u4f46\u662f\u5728\u7edf\u8ba1b2\u8fd9\u6bb5\u5b57\u7b26\u7684\u7b54\u6848\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u8fd9\u4e00\u6bb5\u662f\u53ef\u4ee5\u4e0e\u524d\u9762\u7684\u5339\u914d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u8df3next\u7684\u8fc7\u7a0b\u4e2d\uff0c\u987a\u4fbf\u5c06\u6bcf\u4e2a\u5b57\u7b26\u7684next\u6c42\u51fa\u6765\u8ba1\u5165\u7b54\u6848\u3002\n\n\u4ee5\u4e0a\u662f\u6211\u7684\u8003\u573a\u505a\u6cd5\uff0c\u53ef\u4ee5\u83b7\u5f9750\u5206\uff0c\u4f46\u7531\u4e8e\u4e00\u4e9b\u5947\u602a\u7684\u9519\u8bef\u6211\u53ea\u83b7\u5f97\u4e8620\u5206\u3002\n\n\u8d34\u4e0b50\u5206\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int _=1e5+5,M=2e4,yl=998244353;\nvoid inc(int &x,int y){x+=y;if(x>=yl)x-=yl;}\nint n;\nnamespace task1{\n    struct Node{\n        int a[305],b[305],f[305],len,ans;\n        int js(ll l,ll r){\n            if(l>r)return 0;\n            return (l+r)*(r-l+1)/2%yl;\n        }\n        void insert(int x){\n            if(len==0)return ans=js(1,x%M-1),b[1]=x%M,f[1]=0,a[++len]=x,void();\n            ll k=f[len],mx=0; a[++len]=x;\n            while(1){\n                if(a[k+1]/M==x/M){\n                    ll l=min(x%M,a[k+1]%M);\n                    inc(ans,js(b[k]+mx+1,b[k]+l));\n                    mx=l;\n                }\n                if(a[k+1]==x||!k)break; k=f[k];\n            }\n            if(a[k+1]==x)f[len]=k+1,b[len]=b[k]+x%M;\n            else if(a[1]/M==x/M&&a[1]%M<x%M)\n                f[len]=1,inc(ans,max(0ll,(x%M-mx))*b[1]%yl);\n            b[len]=b[len-1]+x%M;\n        }\n    }T[305];\n    void main(){\n        for(int i=1;i<=n;++i){\n            int opt,x;cin>>opt;\n            if(opt==1){\n                char c;cin>>x>>c;\n                T[i]=T[i-1];\n                T[i].insert(c*M+x);\n                cout<<T[i].ans<<endl;\n            }\n            else cin>>x,T[i]=T[x],cout<<T[i].ans<<endl;\n        }\n    }\n}\nnamespace task2{\n    int a[_],b[_],f[_],len,ans;\n    ll js(ll l,ll r){\n        if(l>r)return 0;\n        return (l+r)*(r-l+1)/2%yl;\n    }\n    void insert(int x){\n        if(len==0)return ans=js(1,x%M-1),b[1]=x%M,f[1]=0,a[++len]=x,void();\n        ll k=f[len],mx=0; a[++len]=x;\n        while(1){\n            if(a[k+1]/M==x/M){\n                ll l=min(x%M,a[k+1]%M);\n                inc(ans,js(b[k]+mx+1,b[k]+l));\n                mx=l;\n            }\n            if(a[k+1]==x||!k)break; k=f[k];\n        }\n        if(a[k+1]==x)f[len]=k+1,b[len]=b[k]+x%M;\n        else if(a[1]/M==x/M&&a[1]%M<x%M)\n            f[len]=1,inc(ans,max(0ll,(x%M-mx))*b[1]%yl);\n            //\u6211\u8003\u573a\u4e0a\u628ab[1]\u5199\u6210\u4e86a[1]\u4e22\u4e8630\u5206\n        b[len]=b[len-1]+x%M;\n    }\n    void main(){\n        for(int i=1;i<=n;++i){\n            int opt,x;cin>>opt;\n            char c;cin>>x>>c;\n            insert(c*M+x);\n            cout<<ans<<endl;\n        }\n    }\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n;\n    if(n<=300)task1::main();\n    else task2::main();\n}\n\n```\n\n\u81f3\u4e8e\u6269\u5c55\u5230100\u5206\u3002\n\n\u4f46\u662f\u66b4\u529b\u8df3next\u7684\u590d\u6742\u5ea6\u662f\u5747\u644a\u7684\uff0c\u6211\u4eec\u8fd8\u662f\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u5927\u6982\u53ef\u4ee5\u53eb\u505aKMP\u81ea\u52a8\u673a\u7684\u4e1c\u897f\uff0c\u7531\u4e8e\u7ecf\u8fc7\u8f6c\u5316\u540e\u5b57\u7b26\u96c6\u5f88\u5927\uff0c\u6211\u4eec\u8003\u8651\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6765\u7ef4\u62a4\u8fd9\u4e2aKMP\u81ea\u52a8\u673a\u7684\u8f6c\u79fb\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u5b57\u7b26\u7684next\u7684\u8f6c\u79fb\u62f7\u8d1d\u8fc7\u6765\uff0c\u5e76\u628a\u540e\u4e00\u4e2a\u5b57\u6bb5\u52a0\u8fdb\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u518d\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u6bb5\u662f\u957f\u5ea6\u4e3aL\uff0c\u90a3\u4e48\u6bcf\u6b21\u5339\u914d\u5230\u5b83\u7684\u53e6\u4e00\u4e2a\u5b57\u6bb5\u7684\u524dL\u4e2a\u5b57\u7b26\u4f1a\u88ab\u5b83\u5339\u914d\u6389\uff0c\u800c\u6211\u4eec\u8981\u6c42\u5339\u914d\u6700\u957f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6700\u540e\u4e00\u6bb5\u53ef\u4ee5\u5339\u914d\u7684\uff0c\u4f9d\u7136\u8003\u8651\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u7c7b\u5b57\u6bb5\u7684\u7b2c$i$\u4e2a\u80fd\u5339\u914d\u591a\u957f\u7684\u5b57\u7b26\u3002\u6bcf\u6b21\u9700\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u5c31\u53d8\u6210\u4e86\u524d\u7f00\u8d4b\u503c\u4e0e\u524d\u7f00\u6c42\u548c\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u524d\u7f00\u8d4b\u503c\uff0c\u524d\u7f00\u6c42\u548c\u6765\u5b8c\u6210\u6240\u67091\u64cd\u4f5c\u3002\n\n\u800c\u8fd9\u6837\u505a\u53ef\u4ee5\u987a\u4fbf\u89e3\u51b32\u64cd\u4f5c\u5e26\u6765\u7684\u5bf9\u5386\u53f2\u7248\u672c\u8fdb\u884c\u64cd\u4f5c\u7684\u95ee\u9898\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a$O(nlog n)$\n\n\u9274\u4e8e\u6d1b\u8c37\u4e0a\u6284\u9898\u89e3\u592a\u591a\u4e86\uff0c\u9632\u4e0d\u80dc\u9632\uff0c\u6240\u4ee5\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u6709\u9700\u8981\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211\u3002",
        "postTime": 1554724752,
        "uid": 63348,
        "name": "Cqdnse",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5287 \u3010[HNOI2019]JOJO\u3011"
    },
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\u662f\u6c42\u5b57\u7b26\u4e32\u505a KMP \u4e4b\u540e\u7684 $\\sum next(i)$\u3002\u4f17\u6240\u5468\u77e5 $next(i)$ \u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a $i$ \u7684\u524d\u7f00\u7684\u6700\u957f\u771f $\\operatorname{Border}$ \u957f\u5ea6\uff0c\u4e8e\u662f\u7b54\u6848\u663e\u800c\u6613\u89c1\u2026\u2026\u4f46\u662f\u5b57\u7b26\u4e32\u5f88\u957f\uff0c\u8fd8\u6709\u56de\u6eaf\u64cd\u4f5c\uff0c\u600e\u4e48\u529e\uff1f\n\n\u9996\u5148\u60f3\u6ca1\u6709\u56de\u6eaf\u64cd\u4f5c\u7684\u600e\u4e48\u505a\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4ec5\u6709\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u603b\u5171\u6709 $n$ \u6bb5\uff0c\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u53ea\u8ddf\u6bb5\u6570\u6302\u4e0a\u5173\u7cfb\u3002\u7528 $s_{c_i}$ \u8868\u793a\u5b57\u7b26\u4e32 $s$ \u7b2c\u4e2a\u6781\u957f $i$ \u6bb5\u7684\u5b57\u7b26\u662f $s_{c_i}$\uff0c$s_{l_i}$ \u8868\u793a\u5b57\u7b26\u4e32 $s$ \u7b2c $i$ \u4e2a\u6781\u957f\u6bb5\u957f\u5ea6\uff0c\u90a3\u4e48\u5b9a\u4e49\u4e24\u4e2a\u5b57\u7b26\u4e32 $s,t$ \u8fd1\u4f3c\u76f8\u7b49\u4e3a\uff1a\n\n1. \u5b57\u7b26\u4e32\u4e0a\u9762\u7684\u6781\u957f\u76f8\u540c\u5b57\u7b26\u7684\u6bb5\u6570\u76f8\u540c\uff0c\u8bb0\u4e3a $p$\uff1b   \n2. $\\forall i,1 \\leq i \\leq p,s_{c_i} = t_{c_i}$\uff1b   \n3. $\\forall i,2 \\leq i \\leq p,s_{l_i} = t_{l_i}$ \u4e14 $s_{l_1} \\leq t_{l_1}$\u3002\n\n\u53c8\u5b9a\u4e49\u7c7b $\\operatorname{Border}$ \u8868\u793a\u5c06 $\\operatorname{Border}$ \u5b9a\u4e49\u4e2d\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u6539\u4e3a\u8fd1\u4f3c\u76f8\u7b49\u3002\u91c7\u7528\u8fd9\u79cd\u65b0\u7684\u6bd4\u8f83\u65b9\u5f0f\u6765\u8fdb\u884c KMP \u503c\u5f97\u5c1d\u8bd5\u3002\u663e\u7136\u91c7\u53d6\u589e\u91cf\u6cd5\u8ba1\u7b97\uff0c\u6211\u4eec\u65b0\u52a0\u5165\u4e00\u6bb5\u5b57\u7b26\uff0c\u904d\u5386\u6ca1\u52a0\u5165\u4e4b\u524d\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u7c7b $\\operatorname{Border}$\u3002\u5982\u679c\u7c7b $\\operatorname{Border}$ \u540e\u7684\u5b57\u7b26\u4e0e\u65b0\u52a0\u5165\u7684\u5b57\u7b26\u76f8\u540c\uff0c\u90a3\u4e48\u5c31\u4f1a\u9020\u6210\u8d21\u732e\u3002\u5bb9\u6613\u53d1\u73b0\u6211\u4eec\u52a0\u5165\u7684\u524d\u7f00\u5176\u5b9e\u662f\u4e00\u6bb5\u4e00\u6bb5\u9020\u6210\u8d21\u732e\uff08\u56e0\u4e3a\u7c7b $\\operatorname{Border}$ \u540e\u9762\u7684\u5b57\u7b26\u6bb5\u957f\u5ea6\u53ef\u80fd\u4e0d\u8db3\u8ba9\u6240\u6709\u5b57\u7b26\u9020\u6210\u8d21\u732e\uff09\uff0c\u8fd9\u4e2a\u8d21\u732e\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff08\u7279\u6b8a\u7684\uff0c\u5982\u679c\u7b2c\u4e00\u6bb5\u7684\u5b57\u7b26\u548c\u65b0\u52a0\u5165\u7684\u5b57\u7b26\u76f8\u540c\uff0c\u9020\u6210\u7684\u8d21\u732e\u4f1a\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u4f46\u4e0d\u96be\u5904\u7406\uff0c\u53ef\u4ee5\u81ea\u5df1\u601d\u8003\uff09\uff0c\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u6539\u53d8\u5339\u914d\u65b9\u5f0f\u7684 KMP $O(n)$ \u89e3\u51b3\u6ca1\u6709\u56de\u6eaf\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\n\n\u7136\u540e\u51fa\u73b0\u4e86\u56de\u6eaf\u64cd\u4f5c\u3002\u5efa\u51fa\u72b6\u6001\u6811\u53ef\u4ee5\u76f4\u63a5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u51fa\u73b0\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u662f KMP \u7684\u590d\u6742\u5ea6\u662f\u5747\u644a\u7684\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u652f\u6301\u8fd9\u6837\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u300c\u6301\u4e45\u5316\u300d\u7684\u64cd\u4f5c\uff0c\u80fd\u4e0d\u80fd\u91c7\u53d6\u4e00\u4e9b\u65b9\u6cd5\u4f18\u5316\u5462\uff1f\u6839\u636e Border \u90a3\u5957\u7406\u8bba\uff0c\u6709\u4e00\u4e2a\u6027\u8d28\u662f\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u957f\u5ea6\u5927\u4e8e $\\frac{|s|}{2}$ \u7684 $\\operatorname{Border}$ \u6784\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u6211\u4eec\u80fd\u5426\u7528\u8fd9\u4e2a\u6027\u8d28\u4f18\u5316\u5462\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f46\u4e0d\u5b8c\u5168\u53ef\u4ee5\uff0c\u624b\u63a8\u5bfc\u4e4b\u540e\u53d1\u73b0\u5982\u679c\u76f4\u63a5\u8df3\u5230\u5c0f\u4e8e $\\frac{|s|}{2}$ \u7684\u5730\u65b9\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u56e0\u4e3a\u65e0\u6cd5\u8bc1\u660e\u4e00\u4e2a\u4e0d\u662f\u539f\u4e32\u7684 $\\operatorname{Border}$ \u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u539f\u4e32\u7684\u7c7b $\\operatorname{Border}$\uff08\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u9898\u4f60\u76f4\u63a5\u6a21\u516c\u5dee\u90fd\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u56e0\u4e3a\u6570\u636e\u592a\u6c34\u4e86\u2026\u2026\uff09\u3002\u90a3\u4e48\u5c31\u8df3\u5230\u6bd4\u8f83\u63a5\u8fd1 $\\frac{|s|}{2}$ \u7684\u7c7b $\\operatorname{Border}$ \u5c31\u884c\uff0c\u6b63\u786e\u6027\u548c\u590d\u6742\u5ea6\u90fd\u80fd\u4fdd\u8bc1\u3002\n\n\u8fd9\u6837\u6bcf\u6b21\u8ba1\u7b97\u548c\u6c42 $next(i)$ \u7684\u590d\u6742\u5ea6\u90fd\u53d8\u6210\u5355\u6b21 $O(\\log n)$ \u4e86\uff0c\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst LL MOD=998244353;\nvector<LL> G[100005];\nLL n,pos[100005],ans[100005],l[100005];\nchar c[100005];\nLL cnt;\nLL getSum(LL L,LL R){return (L<=R)?(R-L+1)%MOD*(MOD+1)/2%MOD*(L+R)%MOD:0;}\nLL nxt[100005],seql[100005],len[100005],sum[100005];\nchar seqc[100005];\nvoid dfs(LL now)\n{\n\tfor(auto st:G[now])\n\t{\n\t\tchar stc=c[st];\n\t\tLL stl=l[st];\n\t\t++cnt;\n\t\tsum[cnt]=0,len[cnt]=len[cnt-1]+stl,seql[cnt]=stl,seqc[cnt]=stc;\n\t\tif(cnt==1)\tsum[cnt]=getSum(0,stl-1);\n\t\telse\n\t\t{\n\t\t\tLL j,lst;\n\t\t\tj=nxt[lst=cnt-1];\n\t\t\twhile(j && (seqc[j+1]!=seqc[cnt] || seql[j+1]!=seql[cnt]))\n\t\t\t{\n\t\t\t    if(nxt[j]<=lst/2)   lst=j,j=nxt[j];\n\t\t\t    else\n\t\t\t    {\n\t\t\t\t\tint d=j-nxt[j];\n\t\t\t\t\tint tmp=lst/2;\n\t\t\t\t\tj=j%d;\n\t\t\t\t\tj+=((tmp-j)/d+1)*d;\n\t\t\t\t\tlst=j+d;\n\t\t\t    }\n\t\t\t}\n\t\t\tif(j || (seqc[j+1]==seqc[cnt] && seql[j+1]==seql[cnt]))\tnxt[cnt]=j+1;\n\t\t\telse if(seqc[1]==seqc[cnt] && seql[1]<=seql[cnt])\tnxt[cnt]=1;\n\t\t\telse\tnxt[cnt]=0;\n\t\t\tj=nxt[lst=cnt-1];\n\t\t\tLL maxn=0;\n\t\t\twhile(j && maxn<seql[cnt])\n\t\t\t{\n\t\t\t\tif(seqc[j+1]==seqc[cnt] && seql[j+1]>maxn)\n\t\t\t\t{\n\t\t\t\t\tsum[cnt]=(sum[cnt]+getSum(len[j]+maxn+1,len[j]+min(seql[j+1],seql[cnt])));\n\t\t\t\t\tmaxn=seql[j+1];\n\t\t\t\t}\n\t\t\t    if(nxt[j]<=lst/2)   lst=j,j=nxt[j];\n\t\t\t    else\n\t\t\t    {\n\t\t\t\t\tint d=j-nxt[j];\n\t\t\t\t\tint tmp=lst/2;\n\t\t\t\t\tj=j%d;\n\t\t\t\t\tj+=((tmp-j)/d+1)*d;\n\t\t\t\t\tlst=j+d;\n\t\t\t    }\n\t\t\t}\n\t\t\tif(maxn<seql[cnt])\n\t\t\t{\n\t\t\t\tif(seqc[1]==seqc[cnt])\n\t\t\t\t{\n\t\t\t\t\tLL x=min(seql[1],seql[cnt]);\n\t\t\t\t\tsum[cnt]=(sum[cnt]+getSum(maxn+1,x))%MOD;\n\t\t\t\t\tsum[cnt]=(sum[cnt]+(seql[cnt]-max(maxn,x))*seql[1]%MOD)%MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans[st]=sum[cnt]=(sum[cnt]+sum[cnt-1])%MOD;\n\t\tdfs(st);\n\t\t--cnt;\n\t}\n}\nint main(){\n\tscanf(\"%lld\",&n);\n\tfor(LL i=1;i<=n;++i)\n\t{\n\t\tLL op;\n\t\tscanf(\"%lld\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tLL t;\n\t\t\tchar s[2];\n\t\t\tscanf(\"%lld %s\",&t,s);\n\t\t\tpos[i]=++cnt;\n\t\t\tG[pos[i-1]].push_back(pos[i]);\n\t\t\tl[pos[i]]=t,c[pos[i]]=*s;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLL x;\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tpos[i]=pos[x];\n\t\t}\n\t}\n\tcnt=0;\n\tdfs(0);\n\tfor(LL i=1;i<=n;++i)\tprintf(\"%lld\\n\",ans[pos[i]]);\n\treturn 0;\n}\n```",
        "postTime": 1641194515,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u4e00\u5207\u90fd\u6e05\u96f6\u3002\u4e00\u5207\u90fd\u6e05\u96f6\uff08\u6492\u788e\u7b80\u5386\uff09\u3002"
    }
]