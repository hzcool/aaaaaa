[
    {
        "content": "> [P8543 \u300cWdoi-2\u300d\u7eaf\u7cb9\u7684\u590d\u4ec7\u5973\u795e](https://www.luogu.com.cn/problem/P8543)\n\n\u5bf9\u4e8e\u6bcf\u4e2a $(a_i, c_i)$\uff0c\u8003\u8651 $a_i$ \u4f5c\u4e3a\u533a\u95f4\u6240\u6709 $c_j = c_i$ \u7684 $a_j$ \u7684\u6700\u5c0f\u503c\u65f6\uff0c\u5408\u6cd5\u5de6\u53f3\u7aef\u70b9\u7684\u5f62\u6001\u3002\u53ef\u77e5\u82e5\u8be2\u95ee\u5de6\u7aef\u70b9\u843d\u5728 $[L, i]$\uff0c\u53f3\u7aef\u70b9\u843d\u5728 $[i, R]$\uff0c\u5219\u672c\u6b21\u8be2\u95ee\u7b54\u6848\u81f3\u5c11\u4e0d\u5c0f\u4e8e $a_i$\uff0c\u5176\u4e2d $L$ \u4e3a\u989c\u8272\u4e3a $c_i$ \u4e14 $a_j < a_i$\uff0c$j < i$ \u7684 $i$ \u7684\u524d\u9a71 $j$ \u52a0 $1$\uff1a\u5de6\u7aef\u70b9\u4e0d\u80fd\u8de8\u8fc7 $j$\uff0c\u5426\u5219 $\\min$ \u4f1a\u53d8\u5f97\u66f4\u5c0f\uff1b\u540c\u7406 $R$ \u4e3a\u989c\u8272\u4e3a $c_i$ \u4e14 $a_j < a_i$\uff0c$j > i$ \u7684 $i$ \u7684\u540e\u7ee7 $j$ \u51cf $1$\u3002\u82e5 $L$ \u4e0d\u5b58\u5728\u5219\u4e3a $1$\uff0c$R$ \u4e0d\u5b58\u5728\u5219\u4e3a $n$\u3002\n\n\u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u53ef\u77e5\u6bcf\u4e2a $(a_i, c_i)$ \u5bf9\u8be2\u95ee\u7684\u8d21\u732e\u662f\u77e9\u5f62 $[L, i]\\times [i, R]$ \u53d6 $\\max$\u3002\u77e9\u5f62\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u989c\u8272\u6309 $a_i$ \u4ece\u5927\u5230\u5c0f\u626b\u63cf\u7ebf + set \u7ef4\u62a4\u6c42\u51fa\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u77e9\u5f62\u53d6 $\\max$\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u4e14\u6240\u6709\u67e5\u8be2\u5728\u52a0\u5165\u6240\u6709\u77e9\u5f62\u540e\u3002\u5bf9 $x$ \u8f74\u626b\u63cf\u7ebf\uff0c\u5728 $x = L$ \u5904\u5f80 $y\\in [i, R]$ \u52a0\u5165 $a_i$\uff0c\u5728 $x = i + 1$ \u5904\u4ece $y\\in [i, R]$ \u5220\u9664 $a_i$\u3002\u975e\u5e38\u7ecf\u5178\u7684\u6807\u8bb0\u6c38\u4e45\u5316\u6811\u5957\u6811\u3002\u5177\u4f53\u5730\uff0c\u52a0\u5165\u65f6\u5f80 $[i, R]$ \u7684\u62c6\u5206\u533a\u95f4\u7ef4\u62a4\u7684\u5e73\u8861\u6811\u4e2d\u52a0\u5165 $a_i$\uff0c\u5220\u9664\u540c\u7406\u3002\u67e5\u8be2\u65f6\u67e5\u8be2\u7ecf\u8fc7\u6240\u6709\u8282\u70b9\u7684\u5e73\u8861\u6811\u6700\u5927\u503c\u3002\u7528 `multiset` \u4f1a\u88ab\u5361\u5e38\uff0c\u9700\u8981\u7528\u4e24\u4e2a `priority_queue` \u6a21\u62df\u53ef\u5220\u9664\u5806\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log ^ 2n + q\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define fi first\n#define se second\n#define TIME 1e3 * clock() / CLOCKS_PER_SEC\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ull = unsigned long long;\ninline ll read() {\n  ll x = 0, sgn = 0;\n  char s = getchar();\n  while(!isdigit(s)) sgn |= s == '-', s = getchar();\n  while(isdigit(s)) x = x * 10 + s - '0', s = getchar();\n  return sgn ? -x : x;\n}\ninline void print(int x) {\n  if(x < 0) return putchar('-'), print(-x);\n  if(x >= 10) print(x / 10);\n  putchar(x % 10 + '0');\n}\nbool Mbe;\nconstexpr int N = 2e5 + 5;\nconstexpr int Q = 1e6 + 5;\nvoid cmin(int &x, int y) {x = x < y ? x : y;}\nvoid cmax(int &x, int y) {x = x > y ? x : y;}\npii d[N];\nint n, q, cnt, c[N], a[N], ans[Q];\nset<int> s[N];\npriority_queue<int> val[N << 2], era[N << 2];\nvector<pair<pii, int>> add[N];\nvector<pii> qu[N];\nvoid modify(int l, int r, int ql, int qr, int x, int v) {\n  if(ql <= l && r <= qr) {\n    if(v > 0) val[x].push(v);\n    else era[x].push(-v);\n    return;\n  }\n  int m = l + r >> 1;\n  if(ql <= m) modify(l, m, ql, qr, x << 1, v);\n  if(m < qr) modify(m + 1, r, ql, qr, x << 1 | 1, v);\n}\nint query(int l, int r, int p, int x) {\n  int ans = 0;\n  while(!era[x].empty() && val[x].top() == era[x].top()) val[x].pop(), era[x].pop();\n  if(!val[x].empty()) ans = val[x].top();\n  if(l == r) return ans;\n  int m = l + r >> 1;\n  return max(ans, p <= m ? query(l, m, p, x << 1) : query(m + 1, r, p, x << 1 | 1));\n}\nbool Med;\nsigned main() {\n  fprintf(stderr, \"%.3lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"1.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"1.out\", \"w\", stdout);\n  #endif\n  cin >> n >> q;\n  for(int i = 1; i <= n; i++) c[i] = read(), s[c[i]].insert(i);\n  for(int i = 1; i <= n; i++) a[i] = read(), d[i] = {a[i], i};\n  sort(d + 1, d + n + 1);\n  for(int i = n, pt = n; i; i--) {\n    while(pt && d[pt].first == i) {\n      int id = d[pt--].second, col = c[id];\n      auto pt = s[col].find(id);\n      int l = 1, r = n;\n      if(pt != s[col].begin()) l = *--pt + 1, pt++;\n      if(pt != --s[col].end()) r = *++pt - 1, pt--;\n      s[col].erase(pt);\n      add[l].push_back({{id, r}, i});\n      add[id + 1].push_back({{id, r}, -i});\n    }\n  }\n  for(int i = 1; i <= q; i++) {\n    int l = read(), r = read();\n    qu[l].push_back({r, i});\n  }\n  for(int i = 1; i <= n; i++) {\n    for(auto it : add[i]) modify(1, n, it.fi.fi, it.fi.se, 1, it.se);\n    for(auto it : qu[i]) ans[it.se] = query(1, n, it.fi, 1);\n  }\n  for(int i = 1; i <= q; i++) print(ans[i]), putchar('\\n');\n  cerr << TIME << \" ms\\n\";\n  return 0;\n}\n```",
        "postTime": 1662828599,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P8543 \u300cWdoi-2\u300d\u7eaf\u7cb9\u7684\u590d\u4ec7\u5973\u795e"
    },
    {
        "content": "## \u9898\u89e3\r\n\r\n\u6ce8\u610f\u5230\uff0c\u8fd9\u662f\u4e2a\u4e0d\u5e26\u4fee\u6539\u7684\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\u3002\u6839\u636e\u4e00\u822c\u5957\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u7684\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u679a\u4e3e\u8be2\u95ee\u7684\u53f3\u7aef\u70b9 $r$\uff0c\u518d\u6765\u89e3\u51b3\u6240\u6709 $r_i=r$ \u7684\u8be2\u95ee\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/eivxdrka.png)\r\n\r\n\u5982\u56fe\u6240\u793a\u3002\u6211\u4eec\u4ee5\u6570\u7ec4\u4e0b\u6807\u4f5c\u4e3a\u6a2a\u8f74\uff0c\u4ee5\u6bcf\u4e00\u79cd\u989c\u8272\u4f5c\u4e3a\u7eb5\u8f74\uff0c\u7ed8\u5236\u9898\u76ee\u4e2d\u6240\u7ed9\u51fa\u7684 $a_i$\u3002\r\n\r\n\u5047\u5b9a\u73b0\u5728\u6211\u4eec\u8981\u5904\u7406\u4e00\u7ec4\u8be2\u95ee $(l,r)$\uff0c\u4e5f\u5c31\u662f\u5904\u7406\u8fd9\u6837\u4e00\u4e2a\u7ea2\u8272\u7684\u77e9\u5f62\u3002\u77e9\u5f62\u7684\u6bcf\u4e00\u884c\u7684\u6743\u503c\u5c31\u662f\u8be5\u884c\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff1b\u6240\u6c42\u5373\u4e3a\u6240\u6709\u884c\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\r\n\r\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u628a\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u56e0\u6b64\u53ef\u4ee5\u5148\u770b\u4f5c $r$ \u662f\u5b9a\u503c\u6765\u601d\u8003\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u8fd9\u4e2a $l$ \u8d8a\u5c0f\uff0c\u8fd9\u4e00\u5217\u7684\u6743\u503c\u5355\u8c03\u4e0d\u589e\u3002\u5149\u6709\u8fd9\u4e2a\u8fd8\u4e0d\u591f\u3002\u6ce8\u610f\u5230\uff0c\u7b2c $i$ \u5217\u4e0a\u67d0\u4e2a\u5143\u7d20\u4f1a\u6210\u4e3a\u8fd9\u4e00\u5217\u7684\u6743\u503c\uff0c\u6240\u5bf9\u5e94\u7684 $l$\uff0c\u5e94\u8be5\u662f**\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4**\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/x5qhz6od.png)\r\n\r\n\u5982\u56fe\u6240\u793a\uff0c\u53d6\u51fa\u5176\u4e2d\u7684\u4e00\u5217\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 $l$ \u5411\u5de6\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u8fd9\u4e00\u5217\u7684\u6743\u503c\u5171\u53d1\u751f\u4e86\u4e09\u6b21\u53d8\u5316\uff1a$5\\to 3\\to 2$\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e2a $a_i$ \u6210\u4e3a\u8be5\u5217\u7684\u6743\u503c\u65f6\uff0c\u6240\u5bf9\u5e94\u7684\u533a\u95f4 $[p_i,q_i]$\u3002\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5bf9\u4e00\u7cfb\u5217\u533a\u95f4\u7684\u64cd\u4f5c\uff08\u533a\u95f4 $[p_i,q_i]$ \u7684\u6743\u503c\u5c31\u662f $a_i$\uff09\u3002\r\n\r\n\u90a3\u4e48\u5728\u679a\u4e3e $r$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5e72\u8fd9\u6837\u51e0\u4ef6\u4e8b\uff1a\r\n\r\n- \u5c06\u533a\u95f4 $[p_r,q_r](a_r)$ \u52a0\u5165\u3002\r\n- \u5904\u7406\u53f3\u7aef\u70b9\u4e3a $r$ \u7684\u6240\u6709\u8be2\u95ee $(l_i,r_i)$\u3002\r\n- \u5c06 $q_i=r$ \u7684\u533a\u95f4\u90fd\u5220\u9664\u3002\r\n\r\n\u6211\u4eec\u8981\u7528\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u80fd\u591f\u7ef4\u62a4\u8fd9\u4e09\u79cd\u64cd\u4f5c\u3002\u8fd9\u4e2a\u7ed3\u6784\u8981\u6c42\u53ef\u4ee5\u652f\u6301\u52a0\u5165\u6307\u5b9a\u533a\u95f4\u3001\u5220\u9664\u6307\u5b9a\u533a\u95f4\u3001\u67e5\u8be2\u5305\u542b $l$ \u7684\u533a\u95f4\u7684\u6743\u503c\u7684\u6700\u5927\u503c\u3002\r\n\r\n\u8fd9\u662f\u53ef\u4ee5\u4f7f\u7528\u52a0\u4e0a\u4e86**\u6807\u8bb0\u6c38\u4e45\u5316**\u7684\u7ebf\u6bb5\u6811\u5b9e\u73b0\u7684\u3002\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u542b\u4e49\u662f\uff0c\u5f53\u6267\u884c\u4fee\u6539\u64cd\u4f5c\u6070\u597d\u8986\u76d6\u4e86\u5f53\u524d\u8282\u70b9\uff0c\u6211\u4eec\u7ed9\u5b83\u6253\u4e0a\u7684\u6807\u8bb0\u662f\u6c38\u4e45\u5316\u7684\u3002\u5f53\u6709\u8be2\u95ee\u64cd\u4f5c\u8981\u7ecf\u8fc7\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u7528\u8fd9\u4e2a\u6807\u8bb0\u66f4\u65b0\u8fd9\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\r\n\r\n\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e0d\u540c\u7684 $l$ \u6240\u67e5\u8be2\u5230\u7684\u7b54\u6848\u3002\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u8981\u7ef4\u62a4\u4e00\u4e2a $\\verb!set!$\uff0c\u8fd9\u4e2a $\\verb!set!$ \u5c31\u662f\u6c38\u4e45\u5316\u4e86\u7684\u6807\u8bb0\u3002\r\n\r\n- \u5bf9\u4e8e\u52a0\u5165\u533a\u95f4 $[p,q](a)$ \u64cd\u4f5c\uff0c\u6211\u4eec\u5148\u627e\u5230\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4eec\uff0c\u5411\u5b83\u4eec\u7684 $\\verb!set!$ \u91cc\u52a0\u5165 $a$\u3002\r\n- \u5bf9\u4e8e\u5220\u9664\u533a\u95f4 $[p,q](a)$ \u64cd\u4f5c\uff0c\u6211\u4eec\u540c\u6837\u627e\u5230\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u4eec\uff0c\u4ece\u4ed6\u4eec\u7684 $\\verb!set!$ \u91cc\u5220\u9664 $a$\u3002\r\n- \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u6211\u4eec\u4e00\u8def\u4e0a\uff0c\u8bbf\u95ee\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4ece\u6807\u8bb0\u91cc\u627e\u6700\u5927\u503c\uff08\u5982\u679c\u6709\u6700\u5927\u503c\u7684\u8bdd\uff09\u5e76\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\r\n\r\n\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u597d\u5904\uff1a\u5982\u679c\u4e0d\u6c38\u4e45\u5316\uff0c\u90a3\u4e48\u67e5\u8be2\u7684\u65f6\u5019\u9700\u8981\u5c06\u6807\u8bb0\u4e0b\u63a8\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u7684\u6807\u8bb0\u662f $\\verb!set!$\uff0c\u4e0b\u63a8\u8d77\u6765\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\u3002\r\n\r\n\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u627e\u5230 $[p_i,q_i]$\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u627e\u5230\uff0c\u989c\u8272\u7b49\u4e8e $c_i$\uff0c\u503c\u4e0d\u8d85\u8fc7 $a_i$ \u7684\u6700\u9760\u8fd1\u5b83\u7684\u4e24\u4e2a\u70b9\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u3002\r\n\r\n## \u5173\u4e8e\u5361\u5e38\r\n\r\n\u7531\u4e8e\u672c\u9898\u9700\u8981\u5361\u6389 $\\mathcal O(m\\sqrt n)$ \u7684\u505a\u6cd5\uff0c\u56e0\u6b64\u5bf9\u65f6\u9650\u5361\u7684\u7565\u7d27\uff08\u4f46\u4fdd\u8bc1\u662f $\\text{std}$ \u4e24\u500d\u65f6\u9650\u4ee5\u4e0a\uff09\u3002\r\n\r\n\u76f4\u63a5\u4f7f\u7528 $\\text{multiset}$ \u7ef4\u62a4\u6807\u8bb0\u7684\u8bdd\uff0c\u5e38\u6570\u8f83\u5927\u3002\u4f46\u662f\u7531\u4e8e\u672c\u9898\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u8f83\u5c11\uff08\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u6700\u5927\u503c\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\u6765\u66ff\u4ee3\u8fd9\u4e2a $\\text{multiset}$\uff1a\r\n\r\n- \u7528\u4e24\u4e2a\u5806 $P,Q$\uff0c$P$ \u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\uff0c$Q$ \u7528\u6765\u61d2\u60f0\u5220\u9664\u3002\r\n- \u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u76f4\u63a5\u5411 $P$ \u4e2d\u63d2\u5165\u5143\u7d20\u3002\r\n- \u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u76f4\u63a5\u5411 $Q$ \u4e2d**\u63d2\u5165**\u5143\u7d20\u3002\r\n- \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u4e0d\u65ad\u6bd4\u8f83 $P$ \u548c $Q$ \u7684\u5806\u9876\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\uff0c\u5982\u679c\u5806\u9876\u76f8\u540c\uff0c\u5c31\u8bf4\u660e $P$ \u5806\u9876\u7684\u5143\u7d20\u5e94\u8be5\u662f\u5728\u67d0\u4e2a\u65f6\u5019\u88ab\u5220\u9664\u6389\u4e86\u3002\u90a3\u4e48 $P,Q$ \u540c\u65f6\u5f39\u51fa\u5806\u9876\uff0c\u4e00\u76f4\u5230\u5806\u9876\u4e0d\u540c\u3002\r\n\r\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u88ab\u63d2\u5165\u3001\u5f39\u51fa\u6700\u591a\u4e00\u6b21\uff0c\u56e0\u6b64\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(\\log n)$ \u7684\u3002\r\n\r\n\u4f46\u662f\u5806\u7684\u5e38\u6570\u660e\u663e\u5c0f\u4e8e\u5e73\u8861\u6811\uff0c\u56e0\u6b64\u53ef\u4ee5\u6781\u5927\u51cf\u5c0f\u5e38\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u91cc\u7528\u7684\u662f\u624b\u5199\u914d\u5bf9\u5806\uff0c\u4f46\u662f\u5b9e\u6d4b\u7528 $\\text{STL}$ \u91cc\u7684\u4f18\u5148\u961f\u5217\u4e5f\u80fd\u65e0\u538b\u529b\u8fc7\u9898\u3002\r\n\r\n\u53e6\u5916\u6709\u4e00\u70b9\u5c31\u662f\uff0c\u8ba1\u7b97 $[p_i,q_i]$ \u65f6\u9700\u8981\u7528\u5230\u6808\u3002\u4f46\u662f\u6808\u57fa\u4e8e $\\text{deque}$ \u5b9e\u73b0\uff0c\u65e0\u8bba\u662f\u65f6\u95f4\u5e38\u6570\u8fd8\u662f\u7a7a\u95f4\u5e38\u6570\u90fd\u5f88\u5927\uff0c\u5efa\u8bae\u4f7f\u7528 $\\text{vector}$ \u66ff\u4ee3\u3002\r\n\r\n## \u4ee3\u7801\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define up(l,r,i) for(int i=l,END##i=r;i<=END##i;++i)\r\n#define dn(r,l,i) for(int i=r,END##i=l;i>=END##i;--i)\r\nusing namespace std;\r\ntypedef long long i64;\r\nconst int INF =2147483647;\r\nconst int MAXN= 2e5 + 3;\r\nconst int SIZ = 8e5 + 3;\r\nmultiset <int,greater<int>> O[SIZ];\r\n#define lc(t) (t<<1  )\r\n#define rc(t) (t<<1|1)\r\nvoid modify(int t,int a,int b,int l,int r,int w){\r\n    if(l<=a&&b<=r){\r\n        if(w>0) O[t].insert(w);\r\n        if(w<0) O[t].erase (O[t].find(-w));\r\n    } else {\r\n        int c=a+b>>1;\r\n        if(l<=c) modify(lc(t),a,c  ,l,r,w);\r\n        if(r> c) modify(rc(t),c+1,b,l,r,w);\r\n    }\r\n}\r\nvoid query(int t,int a,int b,int p,int &w){\r\n    if(!O[t].empty()) w=max(w,*O[t].begin());\r\n    if(a==b) return; int c=a+b>>1;\r\n    if(p<=c) query(lc(t),a,c  ,p,w);\r\n    if(p> c) query(rc(t),c+1,b,p,w);\r\n}\r\nint qread(){\r\n    int w=1,c,ret;\r\n    while((c=getchar())> '9'||c< '0') w=(c=='-'?-1:1); ret=c-'0';\r\n    while((c=getchar())>='0'&&c<='9') ret=ret*10+c-'0';\r\n    return ret*w;\r\n}\r\nint n,q,A[MAXN],C[MAXN],L[MAXN],R[MAXN],W[MAXN];\r\nstack <int> S1[MAXN],S2[MAXN];\r\nstruct Node1{int l,r,w;};\r\nstruct Node2{int l,x  ;};\r\nvector<Node1> V[MAXN]; vector<Node2> Q[MAXN];\r\nint main(){\r\n    n=qread(),q=qread(); A[0]=A[n+1]=-INF;\r\n    up(1,n,i) S1[i].push(0),S2[i].push(n+1);\r\n    up(1,n,i) C[i]=qread();\r\n    up(1,n,i) A[i]=qread();\r\n    up(1,n,i){\r\n        while(A[S1[C[i]].top()]>=A[i]) S1[C[i]].pop();\r\n        L[i]=S1[C[i]].top()+1,S1[C[i]].push(i);\r\n    }\r\n    dn(n,1,i){\r\n        while(A[S2[C[i]].top()]>=A[i]) S2[C[i]].pop();\r\n        R[i]=S2[C[i]].top()-1,S2[C[i]].push(i);\r\n    }\r\n    up(1,n,i){\r\n        V[  i   ].push_back({L[i],i, A[i]});\r\n        V[R[i]+1].push_back({L[i],i,-A[i]});\r\n    }\r\n    up(1,q,i){\r\n        int l=qread(),r=qread(); Q[r].push_back({l,i});\r\n    }\r\n    up(1,n,i){\r\n        for(auto &p:V[i]) modify(1,1,n,p.l,p.r,p.w);\r\n        for(auto &p:Q[i]) query(1,1,n,p.l,W[p.x]);\r\n    }\r\n    up(1,q,i) printf(\"%d\\n\",W[i]);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1661822073,
        "uid": 68344,
        "name": "\u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 \u3010WR2-1D\u3011\u3010\u300cWdoi-2\u300d\u7eaf\u7cb9\u7684\u590d\u4ec7\u5973\u795e\u3011"
    },
    {
        "content": "\u6211\u7684\u8bc4\u4ef7\u662f\u7eaf\u7eaf\u7684\u5957\u8def\u9898\uff0c\u867d\u7136\u8fdc\u8fdc\u4e0d\u80fd\u55b7\uff0c\u4f46\u662f\u4f5c\u4e3a\u4e00\u9053**\u5408\u683c\u7684 ds \u9898\u51fa\u5230\u6708\u8d5b\u8fd9\u4e2a\u4f4d\u7f6e\u4e5f\u8bb8\u8fd8\u662f\u6709\u6240\u6b20\u7f3a**\u3002\n\n\u5176\u5b9e\u662f\u90a3\u5929\u6c34 LA \u7684\u65f6\u5019\u770b\u5230\u6709\u4eba\u5728\u95ee\u8fd9\u4e2a\u9898\uff0c\u6ca1\u60f3\u5230\u73b0\u5728\u6708\u8d5b\u8fd8\u6709 ds \u9898\uff0c\u4e8e\u662f\u5c31\u6765\u770b\u4e86\u770b\u3002\u7136\u540e\u4e00\u773c\u4e86\u3002\n\n\u4f60\u8003\u8651\u4e00\u4e2a\u8fd9\u6837\u7684\u5d4c\u5957\u7ed3\u6784\uff0c\u5185\u5c42\u7684\u8d21\u732e\u5177\u6709\u5355\u8c03\u6027\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u6574\u4e2a\u8fc7\u7a0b\u90fd\u662f\u53ef\u4ee5\u5355\u8c03\u6808\u8f85\u52a9\u626b\u63cf\u7ebf\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u5bf9\u4e8e\u626b\u63cf\u7ebf\u65f6\u5019\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u8d21\u732e\u3002\n\n\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\n\n- \u5f3a\u5236\u5728\u7ebf\u7684\u533a\u95f4\u96c6\u5408\u52a0\u5143\u7d20\uff0c\u533a\u95f4\u96c6\u5408\u51cf\u5c11\u5143\u7d20\uff0c\u5355\u70b9\u96c6\u5408\u6c42 $\\max$\uff0c\u4fdd\u8bc1\u5220\u9664\u64cd\u4f5c\u5408\u6cd5\u4e14\u4e0e\u52a0\u5165\u64cd\u4f5c\u914d\u5bf9\u3002\n\n\u56e0\u4e3a\u52a0\u5165/\u5220\u9664\u662f\u914d\u5bf9\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u5957\u4e2a\u968f\u4fbf\u7684\u652f\u6301\u52a0\u5165\u5220\u9664\u67e5\u8be2\u6700\u5927\u503c\u7684\u7ed3\u6784\u5373\u53ef\uff0c\u7136\u540e\u6bcf\u6b21\u5220\u9664\u548c\u52a0\u5165\u7684\u8282\u70b9\u662f\u53ef\u4ee5\u914d\u5bf9\u7684\uff0c\u76f4\u63a5\u66b4\u529b\u5220\u7136\u540e\u6807\u8bb0\u6c38\u4e45\u5316\u627e\u4e00\u627e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log ^ 2 n + m \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(m \\log n)$\u3002\n\n```cpp\n/*\n\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u8f85\u52a9\u626b\u63cf\u7ebf\n\u7b49\u4ef7\u4e8e\u533a\u95f4\u52a0\u5165\u4e00\u4e2a\u6570\u533a\u95f4\u96c6\u5408\u4ece\u533a\u95f4\u96c6\u5408\u5220\u9664\u4e00\u4e2a\u6570\n\u8fd9\u5c31\u8f85\u52a9\u4e00\u4e0b\u6807\u8bb0\u6c38\u4e45\u5316\u5c31\u5b8c\u4e86\u3002 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\n#define ll long long\nchar buf[1<<23],*p1=buf,*p2=buf,obuf[1<<23],*O=obuf;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\ninline int read() {\n\tint x=0;char ch=getchar();\n\twhile(!isdigit(ch)){ch=getchar();}\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\nvoid print(ll x) {\n    if(x>9) print(x/10);\n    *O++=x%10+'0';\n}\nconst int Len = 2e5 + 5;\nint n,q,c[Len],a[Len];\nvector<int> vec[Len];int tp[Len];\nstruct pp{int l,r;pp(){l = r = 0;}pp(int L,int R){l = L , r = R;}}ps[1000005];\nvector<pp> QQ[Len];int sz[Len];\nint Print[1000005]; \n#define ls(p) (p << 1)\n#define rs(p) (p << 1 | 1)\nint wss[Len << 2];multiset<int> st[Len << 2];\ninline int Q(int p){if(!st[p].size()) return 0;return *st[p].rbegin();}\nvoid add(int p,int l,int r,int nl,int nr,int w)\n{\n\tif(nl <= l && nr >= r) \n\t{\n\t\tst[p].insert(w);\n\t\twss[p] = Q(p);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) add(ls(p) , l , mid , nl , nr , w);\n\tif(nr > mid) add(rs(p) , mid + 1 , r , nl , nr , w);\n}\nmultiset<int>::iterator it;\nvoid del(int p,int l,int r,int nl,int nr,int w)\n{\n\tif(nl <= l && nr >= r)\n\t{\n\t\tit = st[p].find(w);\n\t\tst[p].erase(it);\n\t\twss[p] = Q(p);\n\t\treturn; \n\t}\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) del(ls(p) , l , mid , nl , nr , w);\n\tif(nr > mid) del(rs(p) , mid + 1 , r , nl , nr , w);\n}\nint ms;\nvoid Q(int p,int l,int r,int idx)\n{\n\tms = max(ms , wss[p]);\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) Q(ls(p) , l , mid , idx);\n\telse Q(rs(p) , mid + 1 , r , idx);\n}\nint main()\n{\n\tn = read() , q = read();\n\tfor(int i = 1 ; i <= n ; i ++) c[i] = read();\n\tfor(int i = 1 ; i <= n ; i ++) a[i] = read() , tp[i] = 1;\n\tfor(int i = 1 ; i <= q ; i ++) ps[i].l = read() , ps[i].r = read() , sz[ps[i].r] ++;\n\tfor(int i = 1 ; i <= n ; i ++) QQ[i].reserve(sz[i]) , tp[c[i]] ++;\n\tfor(int i = 1 ; i <= q ; i ++) QQ[ps[i].r].push_back(pp(ps[i].l , i));\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tvec[i].resize(tp[i]);\n\t\ttp[i] = 0;\n\t\tvec[i][tp[i]] = 0;\n\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tint col = c[i];\n\t\twhile(tp[col] > 0 && a[i] < a[vec[col][tp[col]]]) \n\t\t{\n\t\t\tdel(1 , 1 , n , vec[col][tp[col] - 1] + 1 , vec[col][tp[col]] , a[vec[col][tp[col]]]);\n\t\t\ttp[col] --;\n\t\t}\n\t\tadd(1 , 1 , n , vec[col][tp[col]] + 1 , i , a[i]);\n\t\tvec[col][++ tp[col]] = i;\n\t\tfor(int j = 0 ; j < QQ[i].size() ; j ++) \n\t\t{\n\t\t\tms = 0;Q(1 , 1 , n , QQ[i][j].l);\n\t\t\tPrint[QQ[i][j].r] = ms;\n\t\t}\n\t}\n\tfor(int i = 1 ; i <= q ; i ++) print(Print[i]) , *O ++ = '\\n';\n\tfwrite(obuf,O-obuf,1,stdout);\n\treturn 0;\n}\n```",
        "postTime": 1662945588,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P8543 \u300cWdoi-2\u300d\u7eaf\u7cb9\u7684\u590d\u4ec7\u5973\u795e"
    },
    {
        "content": "\u5927\u529b\u51fa\u5947\u8ff9\u3002\n\n\u4e0d\u4f1a polylog \u600e\u4e48\u529e\uff1f\u90a3\u5c31\u60f3\u60f3\u6839\u53f7\u3002\n\n\u8fd9\u79cd\u95ee\u9898\u770b\u8d77\u6765\u5c31\u975e\u5e38\u53ef\u4ee5\u79fb\u52a8\u533a\u95f4\u9010\u4e2a\u5904\u7406\u8d21\u732e\uff0c\u60f3\u5230\u7528\u83ab\u961f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8003\u8651\u52a0\u70b9\u548c\u5220\u70b9\u7684\u8fc7\u7a0b\uff0c\u52a0\u70b9\u662f\u53ef\u4ee5 $O(1)$ \u66f4\u65b0\u5bf9\u5e94\u989c\u8272\u7684\u6700\u5c0f\u503c\u7684\uff0c\u4f46\u662f\u5220\u70b9\u4e0d\u884c\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u4f7f\u7528\u56de\u6eda\u83ab\u961f\u3002\n\n\u6c42\u51fa\u6bcf\u79cd\u989c\u8272\u6700\u5c0f\u503c\u8003\u8651\u600e\u6837\u5feb\u901f\u7ef4\u62a4\u7b54\u6848\uff0c\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6240\u6709\u989c\u8272\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u66f4\u65b0\u7b54\u6848\u540e\u5c31\u628a\u8fd9\u4e2a\u70b9\u539f\u6765\u7684\u8d21\u732e\u5220\u6389\uff0c\u65b0\u7684\u8d21\u732e\u52a0\u4e0a\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u6216\u8005\u6811\u72b6\u6570\u7ec4\u500d\u589e\u3002\u4f46\u8fd9\u6837\u4f1a\u8ba9\u603b\u590d\u6742\u5ea6\u53d8\u6210 $O(n\\sqrt m\\log n+m\\log n)$\uff0c\u8fde\u7b2c\u4e09\u4e2a sub \u90fd\u8fc7\u4e0d\u4e86\u3002\n\n\u6ce8\u610f\u5230\u4fee\u6539\u662f\u5728\u79fb\u52a8\u83ab\u961f\u6307\u9488\u7684\u65f6\u5019\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u4e00\u5171\u4f1a\u4fee\u6539 $O(n\\sqrt m)$ \u6b21\u3002\u800c\u67e5\u8be2\u53ea\u6709\u6bcf\u4e2a\u8be2\u95ee\u4f1a\u67e5\u8be2\u4e00\u6b21\uff0c\u56e0\u6b64\u53ea\u4f1a\u67e5\u8be2 $O(m)$ \u6b21\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u53f7\u5e73\u8861\uff0c\u4f7f\u7528\u4e00\u79cd $O(1)$ \u4fee\u6539 $O(\\sqrt n)$ \u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u5c31\u53ef\u4ee5\u628a\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n\\sqrt m+m\\sqrt n)$\u3002\n\n\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u662f\u5206\u5757\uff0c\u540c\u65f6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u548c\u6bcf\u4e2a\u5757\u7684\u603b\u548c\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u5012\u7740\u679a\u4e3e\u627e\u5230\u7b2c\u4e00\u4e2a\u548c\u4e0d\u4e3a $0$ \u7684\u5757\u5728\u91cc\u9762\u66b4\u529b\u67e5\u627e\u5373\u53ef\u3002\n\n\u8fd9\u6837\u4ea4\u4e0a\u53bb\u5927\u7ea6\u53ea\u4f1a\u5728\u7b2c\u56db\u4e2a sub \u88ab\u5361\u6389\u4e24\u4e2a\u70b9\uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u65bd\u5c55\u4f60\u9ad8\u8d85\u7684\u5361\u5e38\u6280\u5de7\u4e86\uff1a\n\n- \u5feb\u8bfb\u5feb\u8f93\uff1b\n\n- \u8c03\u5757\u957f\uff1b\n\n- \u56de\u9000\u7684\u65f6\u5019\u4e0d\u4f7f\u7528 vector \u5b58\u9700\u8981\u56de\u9000\u7684\u70b9\u800c\u6539\u7528\u6570\u7ec4\uff1b\n\n- \u6570\u7ec4\u8d34\u7740\u4e0b\u754c\u5f00\uff1b\n\n- \u51cf\u5c11 cache miss\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u628a\u91cd\u590d\u53d6\u7528\u7684\u6570\u7ec4\u5143\u7d20\u53d6\u51fa\u6765\u653e\u5230\u4e34\u65f6\u53d8\u91cf\u91cc\u9762\uff0c\u5206\u5757\u6570\u7ec4\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u548c\u6574\u5757\u7684\u6570\u7ec4\u4e0d\u8981\u5f00\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u91cc\u7b49\u7b49\u3002\n\n\u4e8b\u5b9e\u4e0a\u6700\u540e\u4e00\u6761\u624d\u662f\u6700\u6709\u6548\u7684\u5e38\u6570\u4f18\u5316\uff0c\u7ecf\u8fc7\u5361\u5e38\u540e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u9898\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int block=245,lim=1e9;\nint n,m,pos[200001],p[200001],col[200001],a[200001],ans[1000001],minn[200001],val[200001],cnt1[200001],cnt2[2001],tmp[251][2],tot;\nstruct element\n{\n    int l,r,id;\n    bool operator <(const element &other) const\n    {\n        return pos[l]^pos[other.l]? pos[l]<pos[other.l]:r<other.r;\n    }\n}q[1000001];\nnamespace io {\n\tconst int __SIZE = (1 << 21) + 1;\n\tchar ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;\n\t#define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)\n\tinline void flush () { fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; }\n\tinline void gc (char &x) { x = Gc(); }\n\tinline void pc (char x) { *oS ++ = x; if (oS == oT) flush (); }\n\tinline void pstr (const char *s) { int __len = strlen(s); for (__f = 0; __f < __len; ++__f) pc (s[__f]); }\n\tinline void gstr (char *s) { for(__c = Gc(); __c < 32 || __c > 126 || __c == ' ';)  __c = Gc();\n\t\tfor(; __c > 31 && __c < 127 && __c != ' ' && __c != '\\n' && __c != '\\r'; ++s, __c = Gc()) *s = __c; *s = 0; }\n\ttemplate <class I> inline bool gi (I &x) { _eof = 0;\n\t\tfor (__f = 1, __c = Gc(); (__c < '0' || __c > '9') && !_eof; __c = Gc()) { if (__c == '-') __f = -1; _eof |= __c == EOF; }\n\t\tfor (x = 0; __c <= '9' && __c >= '0' && !_eof; __c = Gc()) x = x * 10 + (__c & 15), _eof |= __c == EOF; x *= __f; return !_eof; }\n\ttemplate <class I> inline void print (I x) { if (!x) pc ('0'); if (x < 0) pc ('-'), x = -x;\n\t\twhile (x) qu[++ qr] = x % 10 + '0',  x /= 10; while (qr) pc (qu[qr --]); }\n\tstruct Flusher_ {~Flusher_(){flush();}}io_flusher_;\n} using io::pc; using io::gc; using io::pstr; using io::gstr; using io::gi; using io::print;\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\ninline void add(int x)\n{\n    int y=col[x],z;\n    if(a[x]<minn[y])\n    {\n        if(minn[y]<lim)\n        {\n            z=minn[y];\n            --cnt1[z];\n            --cnt2[pos[z]];\n        }\n        z=minn[y]=a[x];\n        ++cnt1[z];\n        ++cnt2[pos[z]];\n    }\n}\nint main()\n{\n    gi(n);\n    gi(m);\n    for(int i=1;i<=n;++i)\n    {\n        gi(col[i]);\n        pos[i]=(i-1)/block+1;\n        if(i!=1&&pos[i]!=pos[i-1])\n            p[pos[i-1]]=i-1;\n        val[i]=lim;\n    }\n    p[pos[n]]=n;\n    for(int i=1;i<=n;++i)\n        gi(a[i]);\n    for(int i=1;i<=m;++i)\n        gi(q[i].l),gi(q[i].r),q[i].id=i;\n    sort(q+1,q+m+1);\n    for(int i=1,l=1,r=0,pl=0,pr=0,tl,tr,id,lst=0;i<=m;++i)\n    {\n        tl=q[i].l,tr=q[i].r,id=q[i].id;\n        if(tr-tl+1<=250)\n        {\n            for(int j=tl;j<=tr;++j)\n                if(a[j]<val[col[j]])\n                    val[col[j]]=a[j];\n            for(int j=tl;j<=tr;++j)\n                if(val[col[j]]>ans[id])\n                    ans[id]=val[col[j]];\n            for(int j=tl;j<=tr;++j)\n                val[col[j]]=lim;\n            continue;\n        }\n        if(pos[tl]^lst)\n        {\n            lst=pos[tl];\n            for(int j=1;j<=n;++j)\n            {\n                minn[j]=lim;\n                cnt1[j]=0;\n            }\n            for(int j=1;j<=pos[n];++j)\n                cnt2[j]=0;\n            l=pl=p[pos[tl]]+1;\n            r=pr=p[pos[tl]];\n        }\n        for(;r<tr;++r)\n            add(r+1);\n        tot=0;\n        for(;l>tl;--l)\n        {\n            int qwq=col[l-1];\n            tmp[++tot][0]=qwq;\n            tmp[tot][1]=minn[qwq];\n            add(l-1);\n        }\n        for(int j=pos[n];j>=1;--j)\n            if(cnt2[j])\n            {\n                for(int k=p[j];;--k)\n                    if(cnt1[k])\n                    {\n                        ans[id]=k;\n                        break;\n                    }\n                break;\n            }\n        for(;l<pl;++l)\n        {\n            int x=tmp[tot][0],w=tmp[tot][1];\n            if(minn[x]!=w)\n            {\n                int y=minn[x];\n                --cnt1[y];\n                --cnt2[pos[y]];\n                minn[x]=w;\n                if(w<lim)\n                {\n                    ++cnt1[w];\n                    ++cnt2[pos[w]];\n                }\n            }\n            --tot;\n        }\n    }\n    for(int i=1;i<=m;++i)\n        print(ans[i]),pstr(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1662856334,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "P8543 \u300cWdoi-2\u300d\u7eaf\u7cb9\u7684\u590d\u4ec7\u5973\u795e \u9898\u89e3"
    }
]