[
    {
        "content": "### \u601d\u8def\n\u9996\u5148\u4e00\u770b\uff0c\u56db\u7ef4\u504f\u5e8f\u7684\u88f8\u9898\uff0c\u600e\u4e48\u505a\u5462\uff1f\u4e09\u7ef4\u504f\u5e8f\u662f\u6392\u5e8f\u5904\u7406\u7b2c\u4e00\u7ef4\uff0ccdq\u5904\u7406\u7b2c\u4e8c\u7ef4\uff0c\u6570\u636e\u7ed3\u6784\u5904\u7406\u6700\u540e\u4e00\u7ef4\uff0c\u90a3\u4e48\u56db\u7ef4\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528cdq\u5957cdq\u6765\u5904\u7406\u7b2c\u4e8c\u7ef4\u548c\u7b2c\u4e09\u7ef4\u3002\n\n### \u5177\u4f53\u5b9e\u73b0\n\n\u4e09\u7ef4\u504f\u5e8f\u7684CDQ\u672c\u8d28\u5c31\u662f\u628a\u6bcf\u4e2a$(x,y,z)(x,y,z)$ \u8f6c\u5316\u82e5\u5e72\u4e3a $(0,y,z)(0,y,z)$ \u5bf9 $(1,y,z)(1,y,z)$ \u7684\u8d21\u732e\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4e2a\u7ecf\u5178\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\u3002\n\n\u56db\u7ef4\u504f\u5e8f\u4e2d\u73c2\u4ee5\u6cbf\u7528\u4e09\u7ef4\u504f\u5e8f\u4e2d\u7684\u601d\u8def\u3002\n\n\u628a\u82e5\u5e72 $(x,y,z,w)$\u5206\u6210$ (0/1,0/1,z,w))$\uff0c\u7136\u540e\u8ba1\u7b97 $(0,0,z,w) $\u5bf9 $(1,1,z,w)$\u7684\u8d21\u732e\u3002\n\n\u2014\u2014by Froggy\n\n\u90a3\u4e48\u6211\u4eec\u5728\u7b2c\u4e00\u5c42CDQ\u7684\u65f6\u5019\u628a$[l,mid]$\u533a\u95f4\u5185\u7684\u6570\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u4ed6\u4eec\u7684\u7b2c\u4e00\u7ef4\u662f1\uff0c\u5728\u7b2c\u4e8c\u5c42CDQ\u7684\u65f6\u5019\u8ba1\u7b97[l,mid]\u4e2d\u6807\u8bb0\u4e3a1\u7684\u6570\u5bf9[mid+1,r]\u4e2d\u6807\u8bb0\u4e3a0\u7684\u6570\u7684\u8d21\u732e\u5c31\u597d\u4e86\u3002\n\n\n### \u6ce8\u610f\n\n- \u5728CDQ\u65f6\u6211\u4eec\u5fc5\u987b\u5148\u9012\u5f52\u8ba1\u7b97\u5de6\u533a\u95f4\uff0c\u7b97\u5b8c\u5de6\u533a\u95f4\u5bf9\u53f3\u533a\u95f4\u7684\u8d21\u732e\u540e\u5728\u9012\u5f52\u8ba1\u7b97\u53f3\u533a\u95f4\uff0c\u4e0d\u7136\u5f97\u51fa\u7684\u503c\u4f1a\u53d8\u5c0f\u3002\n\n- CDQ\u7684\u6392\u5e8f\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u7279\u522b\u6ce8\u610f\u76f8\u7b49\u7684\u60c5\u51b5\u3002\n\n\n### \u4ee3\u7801\n\n```\n#include<cstdio>\n#include<algorithm>\n#define int long long\n#define inf 1e17\nusing namespace std;\nconst int N=1e6;\nint n,tm[N],top=1,pos1[N],t[N],ans[N],res,pos2[N];\nstruct node{\n\tint ok,a,b,c,d,w,id,ans;\n}s[N],tmp[N];\ninline void read(int &x)\n{\n\tx=0;int f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if (c=='-')f=0;c=getchar();}\n\twhile(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n\tx=f?x:-x;\n}\ninline bool cmp1(const node&A,const node&B) {return A.a==B.a?(A.b==B.b?(A.c==B.c?A.d<B.d:A.c<B.c):A.b<B.b):A.a<B.a;}\ninline bool cmp2(const node&A,const node&B) {return A.b==B.b?(A.a==B.a?(A.c==B.c?A.d<B.d:A.c<B.c):A.a<B.a):A.b<B.b;}\ninline bool cmp3(const node&A,const node&B) {return A.c<B.c;}\nvoid add(int x,int p){for (int i=x;i<=n;i+=i&-i)t[i]=max(t[i],p);}\nvoid del(int x){for (int i=x;i<=n;i+=i&-i)t[i]=0;}\nint ask(int x)\n{\n\tint ans=0;\n\tfor (int i=x;i;i-=i&-i)ans=max(ans,t[i]);\n\treturn ans;\n}\nvoid cdq2(int l,int r)\n{\n\tif (l==r)return ;\n\tint mid=l+r>>1,L=l;\n\tcdq2(l,mid);\n\tsort(s+l,s+mid+1,cmp3);\n\tsort(s+mid+1,s+r+1,cmp3);\n\tfor (int i=mid+1;i<=r;++i)\n\t{\n\t\twhile(s[L].c<=s[i].c&&L<=mid)\n\t\t{\n\t\t\tif (s[L].ok)add(s[L].d,s[L].ans);\n\t\t\tL++;\t\n\t\t}\n\t\tif (!s[i].ok)\n\t\t\ts[i].ans=max(ask(s[i].d)+s[i].w,s[i].ans);\n\t}\n\tfor (int i=l;i<L;++i)if (s[i].ok)del(s[i].d);\n\tfor (int i=l;i<=r;++i)tmp[pos2[s[i].id]]=s[i];\n\tfor (int i=l;i<=r;++i)s[i]=tmp[i];\n\tcdq2(mid+1,r);\n}\nvoid cdq1(int l,int r)//\u7b2c\u4e8c\u7ef4 \n{\n\tif (l==r)return ;\n\tint mid=l+r>>1;\n\tcdq1(l,mid);\n\tfor (int i=l;i<=mid;++i)s[i].ok=1;\n\tfor (int i=mid+1;i<=r;++i)s[i].ok=0;\n\tsort(s+l,s+r+1,cmp2);\n\tfor (int i=l;i<=r;++i)pos2[s[i].id]=i;\n\tcdq2(l,r);\n\tfor (int i=l;i<=r;++i)tmp[pos1[s[i].id]]=s[i];\n\tfor (int i=l;i<=r;++i)s[i]=tmp[i];\n\tcdq1(mid+1,r);\n}\nsigned main()\n{\n//\tfreopen(\"a.in\",\"r\",stdin);\n//\tfreopen(\"a.out\",\"w\",stdout);\n\tscanf(\"%lld\",&n);\n\tfor (int i=1,a,b,c,d;i<=n;++i)\n\t{\n\t\tread(a),read(b),read(c),read(d);\n\t\ts[i]=(node){0,a,b,c,d,1};\n\t\ttm[i]=d;\t\n\t}\n\tsort(tm+1,tm+n+1);\n\tint num=unique(tm+1,tm+n+1)-tm-1;//\u53bb\u91cd\n\tfor (int i=1;i<=n;++i)s[i].d=lower_bound(tm+1,tm+num+1,s[i].d)-tm;//\u5bf9\u7b2c\u56db\u4f4d\u79bb\u6563\u5316\uff0c\u6811\u72b6\u6570\u7ec4\u63d2\u503c \n\tsort(s+1,s+n+1,cmp1);//\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f \n\tfor (int i=2;i<=n;++i)\n\t{\n\t\tif(s[i].a!=s[i-1].a||s[i].b!=s[i-1].b||s[i].c!=s[i-1].c||s[i].d!=s[i-1].d)s[++top]=s[i];//\u53bb\u91cd \n\t\telse s[top].w+=s[i].w;\n\t}\n\tfor (int i=1;i<=top;++i)s[i].id=i,s[i].ans=s[i].w,pos1[s[i].id]=i;\n\tcdq1(1,top);\n\tfor (int i=1;i<=n;++i)res=max(res,s[i].ans);\n\tprintf(\"%lld\",res);\n\treturn 0;\n}\n```",
        "postTime": 1606381177,
        "uid": 227436,
        "name": "\u5e74\u534e\u5929\u5730",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e2a\u6392\u5e8f\u540e\u8f6c\u6210\u4e09\u7ef4\u7684\uff0c\u5feb\u4e86\u4e00\u500d\n\n\u4e0d\u96be\u5199\u51fadp\u65b9\u7a0b\n```cpp\nf[i]=max{f[j]}+1 (a[j]<=a[i],b[j]<=b[i],c[j]<=c[i],d[j]<=d[i])\n```\n\u8fd9\u662f\u4e2a\u7ecf\u5178\u7684\u56db\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u5148\u6309a\u5347\u5e8f\u6392\u5e8f\u6389\u4e00\u7ef4\u4e4b\u540e\u7528kdtree\u5b9e\u73b0b,c,d\u7684\u4e09\u7ef4\u504f\u5e8f\n\n\u628a(b,c,d)\u4e09\u5143\u7ec4\u60f3\u8c61\u6210\u4e00\u4e2a\u4e09\u7ef4\u5750\u6807\u7cfb\u5185\u7684\u70b9\uff0c\u70b9\u6743\u662f\u5176\u5bf9\u5e94\u7684f\u503c\uff0c\u67e5\u8be2\u51fa\u5f53\u524dkdtree\u4e2d\u5728\u77e9\u5f62{(-inf,-inf,-inf),(b[i],c[i],d[i])}\u4e2d\u7684\u70b9\u6743\u6700\u5927\u503c+1\u5373\u662ff[i]\uff0c\u518d\u628a(b[i],c[i],d[i])\u5e26\u4e0a\u70b9\u6743f[i]\u63d2\u5165\u5230kdtree\u4e2d\u5373\u53ef\n\n\u5728kdtree\u4e2d\u67e5\u8be2\u65f6\u9047\u5230\u6574\u4e2a\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u641c\u5230\u7684\u6700\u5927\u503c\u65f6\u5c31\u53ef\u4ee5\u526a\u679d~~(\u6211\u7edd\u5bf9\u4e0d\u4f1a\u8bf4\u6211\u4e00\u5f00\u59cb\u6ca1\u5224\u8fd9\u4e2a\u8fd8\u4ee5\u4e3a\u88ab\u5361\u5e38\u4e86\u4ea4\u4e86n\u904d)~~\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define reg register\nusing std::max;\nusing std::min;\nconst int N=5e4+10,INF=1e9+10;\nconst short K=4;\ninline const void read(reg int &in)\n{\n    in=0;reg char ch=getchar();reg short fh=1;\n    while (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n    while (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n    in*=fh;\n}\nshort f;\nint n,ans,flag;\nstruct point\n{\n    int d[K],w;\n    inline const bool operator<(reg const point &p)const\n    {\n        if (d[f]^p.d[f])return d[f]<p.d[f];\n        for (reg short i=0;i<K-flag;i++)\n        \tif (d[i]^p.d[i])\n        \t\treturn d[i]<p.d[i];\n        return 0;\n    }\n}a[N];\ntemplate<short K>\nclass kD_Tree\n{\n    private:\n        const static double alpha=0.75;\n        struct tree\n        {\n            int size,mxw;\n            tree *son[2];\n            point range,mn,mx;\n            inline const void pushup()\n            {\n               \tsize=son[0]->size+1+son[1]->size;\n                mxw=max(max(son[0]->mxw,son[1]->mxw),range.w);\n                for (reg short i=0;i<K;i++)\n                    mn.d[i]=min(range.d[i],min(son[0]->mn.d[i],son[1]->mn.d[i])),\n                    mx.d[i]=max(range.d[i],max(son[0]->mx.d[i],son[1]->mx.d[i]));\n            }\n            inline const bool unbalanced()\n            {\n                return son[0]->size>size*alpha||son[1]->size>size*alpha;\n            }\n            inline const bool in(reg const point &a,reg const point &b)\n            {\n                for (reg short i=0;i<K;i++)\n                    if (a.d[i]>mn.d[i]||b.d[i]<mx.d[i])\n                        return 0;\n                return 1;\n            }\n            inline const bool out(reg const point &a,reg const point &b)\n            {\n                for (reg short i=0;i<K;i++)\n                    if (a.d[i]>mx.d[i]||b.d[i]<mn.d[i])\n                        return 1;\n                return 0;\n            }\n            inline const bool at(reg const point &a,reg const point &b)\n            {\n                for (reg short i=0;i<K;i++)\n                    if (range.d[i]<a.d[i]||range.d[i]>b.d[i])\n                        return 0;\n                return 1;\n            }\n        }memory_pool[N],*tail,*null,*root,*recycle[N];\n        point down;\n        int top;\n        inline const void init()\n        {\n            tail=memory_pool;\n            null=tail++;\n            for (reg short i=0;i<K;i++)\n                null->mn.d[i]=INF,\n                down.d[i]=null->mx.d[i]=-INF;\n            null->son[0]=null->son[1]=null;\n            root=null;\n        }\n        inline tree *spawn(reg const point &x)\n        {\n            reg tree *p=top?recycle[--top]:tail++;\n            p->son[0]=p->son[1]=null;\n            p->range=p->mn=p->mx=x;\n            p->mxw=x.w;\n            p->size=1;\n            return p;\n        }\n        point b[N];int rnk;\n        inline const void travel(reg tree *p)\n        {\n            if (p==null)return;\n            travel(p->son[0]);\n            b[++rnk]=p->range;\n            recycle[top++]=p;\n            travel(p->son[1]);\n        }\n        inline tree *build(reg int l,reg int r,reg short d)\n        {\n            if (l>r)return null;\n            reg int mid=l+r>>1;f=d;\n            std::nth_element(b+l,b+mid,b+r+1);\n            tree *p=spawn(b[mid]);\n            if (l==r)return p;\n            p->son[0]=build(l,mid-1,(d+1)%K);\n            p->son[1]=build(mid+1,r,(d+1)%K);\n            return p->pushup(),p;\n        }\n        inline const void rebuild(reg tree *&p)\n        {\n            rnk=0;\n            travel(p);\n            p=build(1,rnk,0);\n        }\n        int ans;\n        inline const void query(reg tree *p,reg const point &a,reg const point &b)\n        {\n            if (p==null)return;\n            if (p->out(a,b))return;\n            if (p->in(a,b))return (void)(ans=max(p->mxw,ans));\n            ans=max(ans,p->at(a,b)?p->range.w:0);\n           \tif (p->son[0]->mxw>ans)query(p->son[0],a,b);\n           \tif (p->son[1]->mxw>ans)query(p->son[1],a,b);\n        }\n        inline tree **findbad(reg tree *&p,reg const point &x,reg short d)\n        {\n            if (p==null)return p=spawn(x),&null;\n            tree **bad=findbad(p->son[p->range.d[d]<x.d[d]],x,(d+1)%K);\n            p->pushup();\n            if (p->unbalanced())bad=&p;\n            return bad;\n        }\n    public:\n        inline kD_Tree()\n        {\n            init();\n        }\n        inline const int query(reg const point &up)\n        {\n            ans=0;query(root,down,up);return ans;\n        }\n    \tinline const void insert(reg const point &p)\n    \t{\n            reg tree **bad=findbad(root,p,0);\n            if (*bad==null)return;\n            rebuild(*bad);\n        }\n};\nkD_Tree<K-1>kdt;\nint main()\n{\n    read(n);\n    for (reg int i=1;i<=n;i++)\n    \tfor (reg short j=0;j<K;j++)\n        \tread(a[i].d[j]);\n    std::sort(a+1,a+n+1);flag=1;\n    for (reg int i=1;i<=n;i++)\n    \tfor (reg short j=0;j<K-1;j++)\n    \t\ta[i].d[j]=a[i].d[j+1];\n    for (reg int i=1;i<=n;i++)\n        ans=max(ans,a[i].w=kdt.query(a[i])+1),\n        kdt.insert(a[i]);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1554533695,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "\u4e0d\u8bba\u662f\u542c\u8bf4\u8fd8\u662f\u770b\u9898\uff0c\u90fd\u8ba9\u6211\u4eec\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u56db\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u8bb8\u591a\u4eba\u7684\u505a\u6cd5\u90fd\u662f CDQ \u5957 CDQ \u7684 $O(n\\log_2^3n)$ \u548c \u4e09\u7ef4 K-D Tree \u7684 $O(n^\\frac{5}{3})$\uff0c\u5982\u679c\u4e0d\u662f\u8fd9\u9898\u6570\u636e\u6bd4\u8f83\u968f\u673a\uff0c\u4e00\u65e6\u51fa\u9898\u4eba\u628a\u4f60\u5361\u6ee1\uff0c\u5c31\u5371\u9669\u4e86\uff0c\u53cd\u6b63\u6211\u4e0d\u6562\u7528\u4e09\u7ef4 K-D Tree\uff0c\u4e8e\u662f\u60f3\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u65f6\u95f4 $O(n^\\frac{3}{2})$\uff0c\u7a7a\u95f4 $n\\log_2n$ \u7684\u505a\u6cd5\u3002\n\n\u7b2c\u4e00\u6b65\u662f\u5927\u5bb6\u90fd\u8981\u505a\u7684\uff0c\u901a\u8fc7\u5c06 $a$ \u7ef4\u6392\u5e8f\u5c06\u9759\u6001\u56db\u7ef4\u504f\u5e8f\u8f6c\u6362\u6210\u52a8\u6001\u4e09\u7ef4\u504f\u5e8f\uff0c\u63a5\u4e0b\u6765\uff0c\u5c06\u7f16\u53f7\u6309 $b$ \u7ef4\u6392\u5e8f\uff0c\u6b64\u5904\u76f8\u540c\u7684\u4e0d\u5e94\u53bb\u91cd\uff0c\u800c\u5e94\u6309\u7f16\u53f7\u7ee7\u7eed\u6bd4\u8f83\uff1b\u7136\u540e\uff0c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5957\u4e8c\u7ef4 K-D Tree\uff0c\u5148\u5efa\u6811\uff0c\u6bcf\u6b21\u5f97\u5230\u7b54\u6848\u540e\u5728\u6811\u4e0a\u4fee\u6539\u5373\u53ef\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=5e4+4,M=1e6+6;\nchar buf[M+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,M,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n    int x;for(c=gc;c<'!';c=gc);\n    for(x=0;c>'!';x=x*10+(48^c),c=gc);\n    return x;\n}\nint lx[M],rx[M],ly[M],ry[M],mx[M],my[M],xa[M],ma[M];\nint t[M][2],cnt,nrb,nt,lz[M];\nint cnt1,cnt2;\nstruct Tp{int x,y;}a[N];\nchar now;\ninline bool operator<(const Tp &x,const Tp &y){\n    return now?x.x<y.x:x.y<y.y;\n}\n#define ls t[x][0]\n#define rs t[x][1]\n#define Max(x,y) if(x<y)x=y\n#define Min(x,y) if(x>y)x=y\nint build(int l,int r){\n    int x=++cnt,md=l+r>>1,i;now^=1;\n    nth_element(a+l,a+md,a+r+1);\n    lx[x]=rx[x]=mx[x]=a[md].x;\n    ly[x]=ry[x]=my[x]=a[md].y;\n    if(l<md){\n        ls=build(l,md-1);Min(lx[x],lx[ls]);\n        Min(ly[x],ly[ls]);Max(rx[x],rx[ls]);\n        Max(ry[x],ry[ls]);\n    }\n    if(md<r){\n        rs=build(md+1,r);Min(lx[x],lx[rs]);\n        Min(ly[x],ly[rs]);Max(rx[x],rx[rs]);\n        Max(ry[x],ry[rs]);\n    }\n    return x;\n}\ninline bool ck(int x){\n    return x&&lx[x]<=mx[0]&&ly[x]<=my[0]&&xa[x]>ma[0];\n}\ninline bool ck2(int x){\n    return x&&lx[x]<=mx[0]&&rx[x]>=mx[0]&&ly[x]<=my[0]&&ry[x]>=my[0];\n}\ninline void pd(int x){\n    Max(ma[x],lz[x]);\n    if(ls){Max(lz[ls],lz[x]);Max(xa[ls],lz[ls]);}\n    if(rs){Max(lz[rs],lz[x]);Max(xa[rs],lz[rs]);}\n    lz[x]=0;\n}\nvoid ask(int x){\n    if(lz[x])pd(x);\n    if(rx[x]<=mx[0]&&ry[x]<=my[0]){\n        Max(ma[0],xa[x]);return;\n    }if(mx[x]<=mx[0]&&my[x]<=my[0])\n        Max(ma[0],ma[x]);\n    if(ck(ls))ask(ls);\n    if(ck(rs))ask(rs);\n}\nvoid cg(int x){\n    if(lx[x]==mx[0]&&rx[x]==mx[0]&&ly[x]==my[0]&&ry[x]==my[0]){\n        Max(lz[x],ma[0]);Max(xa[x],lz[x]);\n    }else{\n        if(mx[x]==mx[0]&&my[x]==my[0]){\n            Max(ma[x],ma[0]);Max(xa[x],ma[x]);\n        }if(ck2(ls)){cg(ls);Max(xa[x],xa[ls]);}\n        if(ck2(rs)){cg(rs);Max(xa[x],xa[rs]);}\n    }\n}\nstruct kdt{\n    int rt;\n    inline int qry(int x,int y){\n        mx[0]=x,my[0]=y,ma[0]=0;\n        if(ck(rt))ask(rt);\n        return ma[0];\n    }\n    inline void add(int x,int y,int d){\n        mx[0]=x,my[0]=y,ma[0]=d;\n        if(ck2(rt))cg(rt);\n    }\n}tr[N];\nint n,bI[N],rk[N],mt,ans[N];\nstruct Dat{int a[4];}d[N];\nint main(){\n    int i,j,x;\n    for(n=read(),i=1;i<=n;++i)\n        d[bI[i]=i]={{read(),read(),read(),read()}};\n    stable_sort(d+1,d+n+1,[&](Dat x,Dat y){\n        for(i=0;i<4;++i)\n            if(x.a[i]!=y.a[i])return x.a[i]<y.a[i];\n        return false;\n    });\n    stable_sort(bI+1,bI+n+1,[&](int x,int y){\n        return d[x].a[1]==d[y].a[1]?x<y:d[x].a[1]<d[y].a[1];\n    });\n    for(i=1;i<=n;++i)rk[bI[i]]=i;\n    for(i=1;i<=n;++i){\n        nt=i&-i;\n        for(j=1;j<=nt;++j){\n            x=bI[i-j+1];\n            a[j]={d[x].a[2],d[x].a[3]};\n        }\n        tr[i].rt=build(1,nt);\n    }\n    for(i=1;i<=n;++i){\n        for(j=rk[i];j;j-=j&-j)\n            ans[i]=max(ans[i],tr[j].qry(d[i].a[2],d[i].a[3]));\n        ans[0]=max(ans[0],++ans[i]);\n        for(j=rk[i];j<=n;j+=j&-j)\n            tr[j].add(d[i].a[2],d[i].a[3],ans[i]);\n    }\n    printf(\"%d\\n\",ans[0]);\n    return 0;\n}\n```\n\u7a7a\u95f4\u590d\u6742\u5ea6\u5f88\u597d\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^\\frac{3}{2})$ \u800c\u4e0d\u7528\u518d\u52a0\u4e00\u53ea $\\log$\uff1f\n\n\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u548c K-D Tree \u771f\u7684\u5f88\u822c\u914d\uff01\n\n\u8bbe $k=\\log_2n$\uff0c\u5219\u5355\u6b21\u67e5\u8be2\u6700\u574f\u65f6\u95f4\u4e3a $\\sum_{i\\le k}\\sqrt{2^i}\\le2\\sum_{i<=\\frac{k}{2}}2^i\\le2^{\\frac{k}{2}+2}=O(\\sqrt{n})$",
        "postTime": 1646531733,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u795e\u5947\u7684\u56db\u7ef4\u504f\u5e8f"
    },
    {
        "content": "\u8c08\u4e00\u4e0b\u849f\u84bb\u7684\u505a\u6cd5\u2026\u2026\n\n\u8003\u573a\u4e0a\u6211\u4e0d\u4f1a\u5199\u4e09\u7ef4\u7684K-D-Tree,\u4e8e\u662f\u5c31\u5199\u4e86\u4e2a\u56db\u7ef4\u7684\uff0c\u4f46\u7531\u4e8e\u590d\u6742\u5ea6\u7684\u95ee\u9898\u56db\u7ef4K-D-Tree\u80af\u5b9a\u8981gg\u2026\u2026\n\n\u5148\u770b\u8fd9\u9898\uff0c\u88f8\u9898\uff0c\u5c31\u662f\u8981\u6c42\u56db\u7ef4\u504f\u5e8f\u3002\n\n\u5bf9\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\u6211\u4eec\u5c31\u5728\u4e09\u7ef4\u91cc\u9762\u67e5\u627e\u7b26\u5408\u8981\u6c42\uff08\u5373\u5728\u7b26\u5408\u8981\u6c42\u7684\u7a7a\u95f4\u8303\u56f4\u5185\u7684\u70b9\uff09\u3002\n\n\u7136\u800c\u6211\u5e76\u4e0d\u662f\u8bb2\u7684\u600e\u4e48\u505a\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u4e00\u5c42\u5bf9\u4e8e\u76f8\u5e94\u7684\u7ef4\u5ea6\uff0c\u5728KD\u6811\u4e0a\u6709\u7c7b\u4f3c\u4e8eBST\u7684\u6027\u8d28\uff0c\u7136\u800c\u5bf9\u4e8e\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u5e0c\u671b\u8fd9\u68f5\u6811\u8d8a\u5e73\u8861\u8d8a\u597d\u3002\n\n\u8003\u8651\u6211\u4eec\u5e38\u7528\u7684\u4e24\u4e2a\u5e73\u8861\u6811\u2014\u2014Splay\uff0cTreap\uff08\u65cb\u8f6c\u5f0f\uff09\n\n\u5f88\u663e\u7136KD\u6811\u5728\u533a\u95f4\u5212\u5206\u4e0a\u6709\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff0c\u6211\u4eec\u4e0d\u80fd\u628aKD\u6811\u968f\u4fbf\u4e71\u8f6c\uff0c\u5426\u5219\u5c42\u6570\u548c\u7ef4\u5ea6\u7684\u5bf9\u5e94\u5173\u7cfb\u4f1a\u906d\u5230\u7834\u574f\n\n\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8003\u8651\u4e00\u79cd\u4e0d\u65cb\u8f6c\u7684\u5e73\u8861\u6811\u3002\u4f5c\u4e3a\u65e0\u5b9e\u529b\u9009\u624b\u6211\u53ef\u80fd\u53ea\u4f1a\u66ff\u7f6a\u7f8a\u6811\u3002\n\n\u5bf9\u4e8e\u66ff\u7f6a\u7f8a\u6811\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5f88\u54b8\u9c7c\uff08\u975e\u5e38\u7b26\u5408\u54b8\u9c7c\u9009\u624bzcy\u7684\u4e2a\u6027\uff09\uff0c\u5c31\u662f\u5f53\u6211\u4eec\u53d1\u73b0\u54ea\u91cc\u4e0d\u592a\u5e73\u8861\u4e86\uff0c\u5c31\u628a\u5b83\u66b4\u529b\u5730\u62cd\u6241\u91cd\u5efa\uff08zcy\u5f88\u559c\u6b22\u8fd9\u4e2a\u540d\u5b57\uff09\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u4e5f\u7b80\u5355\u5f97\u5f88\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 50010\n#define inf 1000000009\n#define lson (t1[o].l)\n#define rson (t1[o].r)\nusing namespace std;\ntypedef long long ll;\nint n,m,q[N],rt,dis,top=0;int tot=0,F;\ninline int read(){\n    int f=1,x=0;char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f*x;\n}int ans=0;\nstruct Point{\n    int d[4],maxv[4],minv[4],l,r,f,size,v,ma;\n    inline int& operator [] (int x){return d[x];}\n    inline int in(){for(int i=0;i<4;i++)d[i]=read();}\n}t1[N],t2[N],it;\nbool cmp(int a,int b){return t1[a][F]<t2[b][F];}\nbool operator < (Point a,Point b){\n    for(int i=0;i<=3;i++){\n        if(a.d[i]<b.d[i])return 1;\n        if(a.d[i]>b.d[i])return 0;\n    }\n    return 0;\n}\ninline void pushup(int o){\n    for(int i=0;i<=3;i++){\n        t1[o].minv[i]=min(t1[o].d[i],min(t1[lson].minv[i],t1[rson].minv[i]));\n        t1[o].maxv[i]=max(t1[o].d[i],max(t1[lson].maxv[i],t1[rson].maxv[i]));\n    }\n    t1[o].ma=max(t1[o].v,max(t1[lson].ma,t1[rson].ma));\n    t1[o].size=t1[lson].size+t1[rson].size+1;\n}\n    int build(int l,int r,int f){\n        int mid=(l+r)>>1;F=f;\n        nth_element(q+l,q+mid,q+r+1,cmp);\n        int o=q[mid];t1[o].f=f;lson=0;rson=0;\n        if(l<mid)lson=build(l,mid-1,(f+1)%4);\n        if(r>mid)rson=build(mid+1,r,(f+1)%4);\n        pushup(o);return o;\n    }\n    void dfs(int o){\n        if(!o)return;q[++top]=o;\n        dfs(lson);dfs(rson);\n    }\n    void rebuild(int &o){\n        top=0;dfs(o);\n        o=build(1,top,t1[o].f);\n    }\n    inline int newnode(int f){\n        int o=++tot;t1[tot].f=f;t1[o]=it;\n        for(int i=0;i<=3;i++)t1[o].minv[i]=t1[o].maxv[i]=t1[o][i];\n        t1[o].ma=t1[o].v;t1[o].size=1;\n        return o;\n    }\n    void ins(int &o,int f){\n        if(!o){o=newnode(f);return;}\n        if(t1[o][f]<it[f]){\n            ins(lson,(f+1)%4);\n            pushup(o);\n            if(t1[lson].size>t1[o].size*0.75)rebuild(o);\n        }\n        else{\n            ins(rson,(f+1)%4);\n            pushup(o);\n            if(t1[rson].size>t1[o].size*0.75)rebuild(o);\n        }\n    }\n    inline int check(int o){\n        if(!o)return 0;int _=0;\n        for(int i=0;i<=3;i++)if(t1[o].maxv[i]<=it.d[i])_++;\n        if(_==4)return _;\n         _=1;\n        for(int i=0;i<=3;i++)if(t1[o].minv[i]>it[i])_=0;\n        return _;\n    }\n    inline int calcdis(Point x,Point y){\n        for(int i=0;i<=3;i++)if(x[i]>y[i])return 0;\n        return x.v;\n    }\n    void query(int o){\n        ans=max(calcdis(t1[o],it),ans);\n        int dl=check(lson),dr=check(rson);\n        if(dl==4)ans=max(ans,t1[lson].ma);\n        else if(dl&&ans<t1[lson].ma)query(lson);\n        if(dr==4)ans=max(ans,t1[rson].ma);\n        else if(dr&&ans<t1[rson].ma)query(rson);\n    }\nint main(){\n    n=read();\n    for(int i=0;i<=3;i++)t1[0].minv[i]=inf,t1[0].maxv[i]=-inf;\n    t1[0].ma=-inf;\n    for(int i=1;i<=n;i++){\n        t2[i].in();t2[i].v=1;\n    }\n    sort(t2+1,t2+n+1);\n    int _=0;\n    for(int i=1;i<=n;i++){\n        ans=0;it=t2[i];\n        query(rt);\n        t2[i].v+=ans;it=t2[i];\n        _=max(_,t2[i].v);ins(rt,0);\n    }\n    printf(\"%d\\n\",_);\n}\n```",
        "postTime": 1497489699,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "\n\u505akd-tree\u9898\u627e\u5230\u4e86\u8fd9\u9053\u9898 \u987a\u4fbf\u63a8\u9500[blog](https://www.cnblogs.com/Hs-black/p/12382450.html)\n\n---\n\n\u8fd9\u9898\u662f\u56db\u7ef4\u610f\u4e49\u4e0b\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217, \u4f46\u5982\u679c\u5c06\u7b2c\u4e00\u7ef4\u6392\u5e8f\u5c31\u53d8\u6210\u4e09\u7ef4\u95ee\u9898\u4e86, kd-tree\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4f1a\u66f4\u4f18\n\n\u603b\u800c\u8a00\u4e4b\u5c31\u662f\n$$\ndp_i = \\max_{x_j\\le x_i,y_j\\le y_i,z_j \\le z_i} dp_j + 1\n$$\n\u4ece\u524d\u5411\u540e\u626b, \u627e\u5230\u4e09\u7ef4\u90fd\u6bd4\u5b83\u5c0f\u7684dp\u503c\u6700\u5927\u7684\u70b9, \u627e\u70b9\u53ef\u4ee5\u7528kd-tree\u6765\u4f18\u5316\n\n\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u6280\u5de7\u548c\u526a\u679d:\n\n* \u5982\u679c\u5f53\u524d\u5b50\u6811dp\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u5df2\u641c\u51fa\u7684\u6700\u4f18\u7b54\u6848\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u80af\u5b9a\u4e0d\u4f1a\u66f4\u65b0\u4e86\n* \u5982\u679c\u5f53\u524d\u5b50\u6811\u7684\u70b9\u90fd\u5728\u8303\u56f4\u5185, \u76f4\u63a5\u62ff\u6700\u5927\u503c\u66f4\u65b0\u7b54\u6848\u8fd4\u56de\n* \u5982\u679c\u5f53\u524d\u5b50\u6811\u6709\u4e00\u7ef4\u7684\u6700\u5c0f\u503c\u8d85\u8fc7\u4e86\u8303\u56f4, \u90a3\u4e48\u4ee3\u8868\u7740\u8fd9\u4e2a\u5b50\u6811\u4e2d\u65e0\u4e00\u6ee1\u8db3\u6761\u4ef6, \u76f4\u63a5\u8fd4\u56de\u5373\u53ef\n* \u6bcf\u6b21\u63d2\u5165\u4e0d\u7528\u66ff\u7f6a\u7f8a\u601d\u60f3\u91cd\u6784, \u53ef\u4ee5\u76f4\u63a5\u63d0\u524d\u628a\u6811\u5efa\u51fa\u6765, \u521d\u59cbdp\u503c\u90fd\u8bbe\u4e3a\u96f6, \u52a0\u5165\u64cd\u4f5c\u76f8\u5f53\u4e8e\u6fc0\u6d3b\u4e00\u4e2a\u70b9, \u5177\u4f53\u5c31\u662f\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u4ece\u4e0a\u5411\u4e0b\u641c\u5230\u90a3\u4e2a\u70b9, \u8fd4\u56de\u65f6\u4e00\u8def\u66f4\u65b0\u5c31\u884c\u4e86\n\n\u6709\u4e86\u4ee5\u4e0a\u526a\u679d, \u8db3\u591f\u901a\u8fc7\u6b64\u9898\n\n[\u8fd9\u91cc\u6709\u4e00\u4e9b\u6570\u636e\u53ef\u80fd\u5bf9\u4f60\u6709\u7528](http://noi-test.zzstep.com/contest/Round/TATT/testCase/19001) \u53ef\u4ee5\u4fee\u6539url\u627e\u5230\u5176\u4ed6\u6570\u636e \u4ece18998\u523019003\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define I inline\n#define ll long long\nusing namespace std;\n\ntemplate <typename T>\nvoid read(T &x) {\n    x = 0; bool f = 0;\n    char c = getchar();\n    for (;!isdigit(c);c=getchar()) if (c=='-') f=1;\n    for (;isdigit(c);c=getchar()) x=x*10+(c^48);\n    if (f) x=-x;\n}\n\nconst int N = 200500;\nstruct node {\n\tint d[4];\n\tbool operator < (const node &k) const {\n\t\tfor (int i = 0;i < 4; i++) \n\t\t\tif (d[i] != k.d[i]) return d[i] < k.d[i];\n\t\treturn 0;\n\t}\n}p[N];\n\nint g[N], k;\n\nI bool cmp(int a, int b) {\n\treturn p[a].d[k] < p[b].d[k];\n}\n\n#define ls son[x][0]\n#define rs son[x][1]\n\nint son[N][2];\nint mx[N][3], mn[N][3], mxa[N], res[N], ans;\nI void Mn(int &x, int y) { if (x > y) x = y; }\nI void Mx(int &x, int y) { if (x < y) x = y; }\n\nI void maintain(int x) {\n\tfor (int i = 0;i <= 2; i++) {\n\t\tmx[x][i] = mn[x][i] = p[x].d[i+1];\n\t\tif (ls) Mx(mx[x][i], mx[ls][i]), Mn(mn[x][i], mn[ls][i]);\n\t\tif (rs) Mx(mx[x][i], mx[rs][i]), Mn(mn[x][i], mn[rs][i]);\n\t}\n}\nint build(int l, int r, int d) {\n\tif (l > r) return 0;\n\tint mid = (l + r) >> 1;\n\tk = d + 1, nth_element(g + l, g + mid, g + r + 1, cmp);\n\tson[g[mid]][0] = build(l, mid - 1, (d + 1) % 3);\n\tson[g[mid]][1] = build(mid + 1, r, (d + 1) % 3);\n\tmaintain(g[mid]); return g[mid];\n}\n\nint tmp;\n\n// \u5224\u65adx\u70b9\u662f\u5426\u5728y\u70b9\u8303\u56f4\u4ee5\u5185 \ninline bool in(int *x, int *y) {\n\tint cnt = 0;\n\tfor (int i = 0;i < 3; i++) cnt += (x[i] <= y[i]);\n\treturn cnt == 3;\n}\n\nvoid query(int x, int y) {\n\tif (mxa[x] <= tmp) return;\n\tif (!in(mn[x], p[y].d + 1)) return;\n\tif (in(mx[x], p[y].d + 1)) return tmp = mxa[x], void();\n\tif (in(p[x].d + 1, p[y].d + 1)) Mx(tmp, res[x]);\n\tif (ls) query(ls, y); if (rs) query(rs, y);\n}\n\n// \u6fc0\u6d3b\u64cd\u4f5c \nvoid upit(int x, int y) {\n\tif (x == y) {\n\t\tres[x] = tmp, Mx(mxa[x], res[x]); return;\n\t}\n\tif (!in(p[y].d + 1, mx[x]) || !in(mn[x], p[y].d + 1)) return;\n\t// \u5982\u679cy\u70b9\u4e0d\u5728\u91cc\u9762\u5c31\u8fd4\u56de \n\tif (ls) upit(ls, y); if (rs) upit(rs, y);\n\tMx(mxa[x], mxa[ls]), Mx(mxa[x], mxa[rs]);\n}\n\nint rt, n;\nint main() {\n\tfreopen (\"hs.in\",\"r\",stdin);\n\tread(n);\n\tfor (int i = 1;i <= n; i++) {\n\t\tread(p[i].d[0]), read(p[i].d[1]);\n\t\tread(p[i].d[2]), read(p[i].d[3]);\n\t\tg[i] = i;\n\t}\n\tsort(p + 1, p + n + 1); rt = build(1, n, 0);\n\tfor (int i = 1;i <= n; i++) \n\t\ttmp = 0, query(rt, i), tmp++, upit(rt, i), Mx(ans, tmp);\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1582952602,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u795e\u5947\u7684\u4e71\u641e\u3002\n\n\u9996\u5148\u6309\u4e00\u4e2a\u7ef4\u5ea6\u6392\u5e8f\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u6709\u4e09\u4e2a\u9650\u5236\u7684 LIS\uff0c\u5373\uff1a\n\n$$f_i=\\max f_j[1\\le j<i,x_j\\le x_i,y_j\\le y_i,z_j\\le z_i]+1$$\n\n\u8fd9\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u5f88\u96be\u4f18\u5316\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 KDT \u6216\u8005 CDQ\uff0c\u4e8b\u5b9e\u4e0a\u4e00\u5f00\u59cb\u4e5f\u786e\u5b9e\u662f\u8fd9\u6837\uff0c\u6211\u5199\u4e86\u4e00\u4e2a\u66b4\u529b\u548c\u4e09\u7ef4\u52a8\u6001\u5f00\u70b9 BIT \u90fd T \u98de\u4e86\u3002\n\n\u8003\u8651\u4e00\u79cd\u795e\u5947\u7684\u601d\u8def\uff1a\n\n\u6bcf\u6b21\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u4ece\u5c0f\u5230\u5927\u904d\u5386 $f$ \u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u628a $f$ \u6570\u7ec4\u52a8\u6001\u7684\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u904d\u5386\u4e00\u4e0b\uff0c\u7136\u540e\u5224\u65ad\u8fd9\u4e2a $f_j$ \u80fd\u5426\u8f6c\u79fb\uff0c\u5373\u6ee1\u8db3\u4e0a\u9762\u7684\u8f6c\u79fb\u6761\u4ef6\u3002\u5982\u679c\u53ef\u4ee5\u5c31\u76f4\u63a5\u8df3\u51fa\u3002\u8fd9\u4e2a\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\uff1a\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u56e0\u4e3a\u5df2\u7ecf\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u6240\u4ee5\u80af\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u90a3\u4e48\u4ec0\u4e48 ds \u53ef\u4ee5\u52a8\u6001\u652f\u6301\u63d2\u5165\u548c\u4ece\u5c0f\u5230\u5927\u904d\u5386\u5462\uff1fset \u662f\u5927\u591a\u6570\u4eba\u6700\u5148\u60f3\u5230\u7684\uff0c\u4f46\u662f\u5e38\u6570\u592a\u5927\u4e86\u3002\n\nvector \u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a $n$ \u8f83\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 vector \u66b4\u529b\u7684 insert \u529f\u80fd\u3002\n\n\u7136\u540e\u60ca\u9669\u7684\u52a0\u4e86\u4e2a\u5feb\u8bfb\u8fc7\u4e86\uff0c\u590d\u6742\u5ea6\u662f $n^2$ \u4f46\u662f vector insert \u7684\u5e38\u6570\u5b9e\u5728\u592a\u5c0f\u4e86\u3002\u3002\u81f3\u4e8e\u5982\u679c\u7528 set \u5b9e\u73b0\u7684\u5462\uff1f\u6700\u574f\u4ecd\u7136\u662f $n^2$ \u4f46\u662f\u671f\u671b\u590d\u6742\u5ea6\u5c31\u4e0d\u4f1a\u8bc1\u4e86\u3002\u3002\n\n\u867d\u8bf4\u8dd1\u4e0d\u8fc7 KDT \u548c CDQ\uff0c\u4f46\u662f\u8fd9\u4e1c\u897f\u597d\u5199\u554a\uff011k \u4ee3\u7801\u957f\u5ea6\u6bd4 KDT \u548c CDQ \u7684 3\uff0c4k \u597d\u5199\u591a\u4e86\u3002\n\n\u8bf4\u8d77\u6765\u590d\u6742\uff0c\u5176\u5b9e\u4ee3\u7801\u633a\u597d\u5b9e\u73b0\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n   int s=0;\n   char ch=getchar();\n   while(ch<'0'||ch>'9') ch=getchar();\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s;\n}\nstruct node\n{\n\tint x,y,z,p;\n}a[100005];\nbool cmp(node x,node y)\n{\n\tif(x.x==y.x)\n\t\tif(x.y==y.y)\n\t\t\tif(x.z==y.z)\n\t\t\t\treturn x.p<y.p;\n\t\t\telse\n\t\t\t\treturn x.z<y.z;\n\t\telse\n\t\t\treturn x.y<y.y;\n\telse\n\t\treturn x.x<y.x;\n}\nstruct node2\n{\n\tint s,x,y,z;\n\tfriend bool operator <(node2 x,node2 y)\n\t{\n\t\treturn x.s>y.s;\n\t}\n\tnode2(){}\n\tnode2(int S,int X,int Y,int Z)\n\t{\n\t\ts=S,x=X,y=Y,z=Z;\n\t}\n};\nset<node2> p;\nint main()\n{\n\tset<node2>::iterator it;\n\tint n=read(),i,j,s,mx=0,ans;\n\tfor(i=0;i<n;i++)\n\t\ta[i].x=read(),a[i].y=read(),a[i].z=read(),a[i].p=read();\n\tsort(a,a+n,cmp);\n\tp.insert(node2(0,-1e9,-1e9,-1e9));\n\tfor(i=0;i<n;i++)\n\t{\n\t\tfor(it=p.begin();a[i].y<it->x||a[i].z<it->y||a[i].p<it->z;j++);\n\t\tans=it->s+1;\n\t\tmx=max(mx,ans);\n\t\tp.insert(node2(ans,a[i].y,a[i].z,a[i].p));\n\t}\n\tcout<<mx;\n}\n```\n",
        "postTime": 1606565000,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "\u5199\u7684\u65f6\u5019\u521a\u5b66KD-Tree\u4e0d\u4e45......\n\n\n\u7531\u4e8e\u592a\u5f31\u672c\u849f\u84bb\u751a\u81f3\u6ca1\u6709\u60f3\u5230\u6392\u5e8f\u4f18\u5316\u6389\u4e00\u7ef4......\u73b0\u5728\u4e00\u60f3\u5f53\u65f6\u7b80\u76f4\u592azz\u4e86......\n\n\u7531\u4e8e\u592a\u5f31\u672c\u849f\u84bb\u4e0d\u4f1a\u66ff\u7f6a\u7f8a\u6811\u8fd9\u4e48\u9ad8\u7aef\u7684\u4e1c\u897f......\u8fd9\u4e48\u4e45\u8fc7\u53bb\u4e86\u54b1\u8fd8\u662f\u4e0d\u4f1a......\n\n\n### **\u7136\u800c\u4ee5\u4e0a\u7684\u4e1c\u897f\u662f\u5b8c\u5168\u4e0d\u9700\u8981\u7684\u3002**\n\n\u76f4\u63a5\u56db\u7ef4\u88f8KD-Tree\u5373\u53ef\u901a\u8fc7\u6b64\u9898\u3002\n\n\n\u53ef\u4ee5\u8003\u8651\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\u5efa\u597d\u4e00\u68f5\u7a7a\u7684\u6811\uff0c\u521d\u59cb\u7ed9\u6bcf\u4e2a\u8282\u70b9\u8d4b\u503c\u4e3a0\u3002\n\n\u5efa\u6811\u8003\u8651\u8fd9\u4e48\u5efa:\u5728\u4f20\u7edf\u7684\u6bcf\u4e00\u5c42\u7ef4\u5ea6\u4e0d\u76f8\u540c\u7684\u57fa\u7840\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u53d6\u51fa\u5f53\u524d\u8282\u70b9\u7ba1\u8f96\u533a\u95f4\u4ee5\u5f53\u524d\u5750\u6807\u6392\u5e8f\u540e\u5904\u4e8e\u6b63\u4e2d\u95f4\u7684\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u8fd9\u5c31\u80fd\u5c3d\u53ef\u80fd\u4fdd\u6301\u533a\u95f4\u5927\u5c0f\u8f83\u4e3a\u5e73\u8861\u4e86~\n\n\n\u7136\u540e\u7ed9\u6240\u6709\u70b9\u6309\u56db\u7ef4\u5927\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u5176\u7b54\u6848\uff0c\u5e76\u4fee\u6539\u6811\u4e2d\u5b83\u7684\u6743\u503c\uff0c\u8fd9\u5c31\u662f\u5e38\u89c1\u7684DP\u4e86\u3002\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u7ef4\u62a4\u5176\u5185\u90e8\u7684\u56db\u7ef4\u5206\u522b\u7684\u6700\u5c0f\u5750\u6807\uff08\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4e0d\u6765\u81ea\u540c\u4e00\u4e2a\u70b9\uff09\uff0c\u7528\u4e8e\u5224\u65ad\u8be5\u4e0d\u8be5\u8bbf\u95ee~\n\n\u540c\u65f6\u641c\u5b8c\u4e00\u4e2a\u513f\u5b50\u540e\u8981\u5224\u65ad\u4e00\u4e0b\u53e6\u4e00\u4e2a\u513f\u5b50\u503c\u4e0d\u503c\u5f97\u641c\u518d\u51b3\u5b9a\u662f\u5426\u5411\u4e0b\u641c\u3002\n\n\n\u7136\u540e\u662f\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u526a\u679d:\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u5e76\u5728\u66f4\u65b0\u65f6\u76f4\u63a5\u5411\u4e0a\u66f4\u65b0\u7236\u4eb2\u3002\n\n\u4e3a\u4ec0\u4e48\u8bf4\u5b83\u91cd\u8981\uff0c\u53ef\u4ee5\u53bb\u770b\u770b[\u54b1\u7684\u535a\u5ba2](http://blog.csdn.net/zlttttt/article/details/72892239)\u6216\u8005\u542c\u4e00\u4e0b\u53e3\u80e1:\n\n\u5982\u679c\u4f60\u9009\u62e9\u4e86\u76f4\u63a5\u5411\u4e0b\u5bfb\u627e\u8282\u70b9\u7684\u8bdd\uff0c\u60f3\u8c61\u4e00\u4e0b\u5982\u679c\u6070\u597d\u51fa\u73b0\u4e86\u4f60\u8981\u8bbf\u95ee\u7684\u76ee\u6807\u8282\u70b9\u4e0e\u5f53\u524d\u8282\u70b9\u5728\u5f53\u524d\u7ef4\u5ea6\u7684\u5750\u6807\u76f8\u7b49\u7684\u60c5\u51b5\u3002\n\n\u6b64\u65f6\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7684\u7ba1\u8f96\u533a\u95f4\u5747\u53ef\u80fd\u5305\u542b\u4f60\u60f3\u8981\u7684\u8282\u70b9\uff0c\u90fd\u641c\u4e00\u6b21\u4f1aTLE\u7684\u3002\n\n\u867d\u7136\u8fd9\u662f\u53ef\u4ee5\u907f\u514d\u7684\uff0c\u7136\u800c\u5e38\u6570\u8fd8\u662f\u6bd4\u76f4\u63a5\u8bb0\u7236\u4eb2\u66f4\u5927.....(\u8fd9\u4e2a\u7248\u672c\u54b1\u7684\u535a\u5ba2\u4e0a\u6709)\n\n\n\u8fd9\u662f\u54b1\u8dd1\u5f97\u6700\u5feb\u7684\u4e00\u4efd\u4ee3\u7801\uff1a\n\n\uff08\u5982\u679c\u60f3\u770b\u770b\u54b1\u505a\u6b64\u9898\u7684\u7ecf\u5386~~\u9519\u5f97\u6709\u591a\u60e8~~\u6b22\u8fce\u56f4\u89c2[\u672c\u849f\u84bb\u7684\u535a\u5ba2](http://blog.csdn.net/zlttttt/article/details/72892239)\uff09\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=50009;\n\nint main_d;\n\ninline int minn(int a,int b){if(a<b)return a;return b;}\ninline int maxx(int a,int b){if(a>b)return a;return b;}\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0' || '9'<ch){if(ch=='-')f=-1;ch=getchar();}\n    while('0'<=ch && ch<='9'){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nstruct point\n{\n    int coord[4],mn[4],id,l,r,mv,v,f;\n\n    int &operator [](int x)\n    {\n        return coord[x];\n    }\n    void init()\n    {\n        for(int i=0;i<=3;i++)\n            mn[i]=coord[i];\n        v=mv=f=0;\n    }\n};\n\nbool operator <(point satori,point koishi)\n{\n    return satori[main_d]<koishi[main_d];\n}\ninline bool ecmp(point a,point b)\n{\n    for(int i=0;i<=3;i++)\n        if(a[i]!=b[i])\n            return 0;\n    return 1;\n}\ninline bool judge(point satori,point koishi)\n{\n    for(int i=0;i<=3;i++)\n        if(satori[i]>koishi[i])\n            return 0;\n    return 1;\n}\ninline bool valid(point satori,point koishi)\n{\n    for(int i=0;i<=3;i++)\n        if(satori.mn[i]>koishi[i])\n            return 0;\n    return 1;\n}\n\nint p[N];\nint sumt[5];\n\nstruct k_dimensional_tree\n{\n    int root,maxval;\n    point t[N];\n    void update(int x)\n    {\n        for(int i=0;i<=3;i++)\n            t[x].mn[i]=minn(t[x].mn[i],minn(t[t[x].l].mn[i],t[t[x].r].mn[i]));\n        t[x].mv=maxx(t[x].v,maxx(t[t[x].l].mv,t[t[x].r].mv));\n    }\n    void push(int x)\n    {\n        t[x].mv=maxx(t[x].v,maxx(t[t[x].l].mv,t[t[x].r].mv));\n    }\n    inline int check(int x,point p)\n    {\n        if(!x)return x;\n        int ret=1;\n        for(int i=0;i<=3;i++)\n            if(p[i]<t[x].mn[i])\n                ret=0;\n        return ret;\n    }\n    int biu(int l,int r,int d)\n    {\n        main_d=d;\n        int mid=l+r>>1,nxt;\n        nth_element(t+l,t+mid,t+r+1);\n        nxt=d+1;\n        if(nxt==4)\n            nxt=1;\n        t[mid].init();\n        if(l<mid)\n            t[mid].l=biu(l,mid-1,nxt),t[t[mid].l].f=mid;\n        if(mid<r)\n            t[mid].r=biu(mid+1,r,nxt),t[t[mid].r].f=mid;\n        update(mid);\n        return mid;\n    }\n    void query(int x,point p,int d)\n    {\n        sumt[0]++;\n        if(judge(t[x],p) && maxval<t[x].v)\n            maxval=t[x].v;\n\n        int nxt=d+1;\n        if(nxt==4)\n            nxt=1;\n        if(p[d]>=t[x][d])\n        {\n            int a=t[x].l,b=t[x].r;\n            if(t[a].mv<t[b].mv)\n                swap(a,b);\n\n            if(valid(t[a],p) && t[a].mv>maxval)\n                query(a,p,nxt);\n            if(valid(t[b],p) && t[b].mv>maxval)\n                query(b,p,nxt);\n        }\n        else\n            if(valid(t[t[x].l],p) && t[t[x].l].mv>maxval)\n                query(t[x].l,p,nxt);\n    }\n    void modify(int x,int v)\n    {\n        t[x].v=v;\n        push(x);\n        while(x=t[x].f)\n            push(x);\n    }\n}koishi;    \nbool pcmp(int a,int b)\n{    \n    for(int i=0;i<=3;i++)\n        if(koishi.t[a][i]!=koishi.t[b][i])\n            return koishi.t[a][i]<koishi.t[b][i];\n    return 0;\n}\n\nint main()\n{\n    int n=read();\n    for(int i=1;i<=n;i++)\n    {\n        p[i]=i;\n        for(int j=0;j<=3;j++)\n            koishi.t[i][j]=read();\n        koishi.t[i].id=i;\n    }\n\n    koishi.root=koishi.biu(1,n,1);\n    sort(p+1,p+n+1,pcmp);\n\n    for(int i=1;i<=n;i++)\n    {\n        koishi.maxval=0;\n        int o=p[i];\n        koishi.query(koishi.root,koishi.t[p[i]],1);\n        koishi.modify(p[i],koishi.maxval+1);\n    }\n    printf(\"%d\\n\",koishi.t[koishi.root].mv);\n    return 0;\n}\n```",
        "postTime": 1509642328,
        "uid": 19293,
        "name": "zltttt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u6c42\u56db\u7ef4\u6700\u957f\u4e0d\u964d\u94fe\u3002\n\n\u53ef\u4ee5\u5f88\u5feb\u60f3\u5230\u4e00\u4e2a $O(n^2)$ \u7684\u505a\u6cd5\uff0c\u90a3\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u7136\u540e\u66b4\u529b\u627e\u5230\u5408\u6cd5\u524d\u7f00\u6700\u5927\u503c\uff0c\u66f4\u65b0\u8fd9\u4e2a\u6570\u7684\u7b54\u6848\u3002\n\n\u90a3\u4e48\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u3002\n\n## \u89e3\u6cd5\n\n\u8003\u8651\u5206\u5757\uff0c\u5c06\u5e8f\u5217\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f\u540e\u5206\u5757\uff0c\u5757\u957f\u4e3a $B$\u3002\n\n\u5148\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5bf9\u4e8e\u73b0\u5728\u5757\u5185\u6bcf\u4e2a\u6570\u5728\u524d\u9762\u7684\u5757\u4e2d\u7684\u6700\u5927\u5408\u6cd5\u7b54\u6848\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u7b54\u6848\u548c\u5757\u5185\u524d\u9762\u7684\u5408\u6cd5\u70b9\u4e00\u4e00\u6bd4\u8f83\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nB)$\u3002\n\n\u8003\u8651\u600e\u4e48\u6c42\u8fd9\u4e2a\u7b54\u6848\u3002\n\n\u53ef\u4ee5\u5bf9\u6240\u6709\u6570\u5148\u79bb\u6563\u5316\u4e00\u8fb9\uff0c\u7136\u540e\u628a\u7b54\u6848\u5bf9\u5e94\u5230\u8be5\u4e09\u7ef4\u70b9\u4e0a\uff0c\u518d\u6c42\u4e00\u904d\u4e09\u7ef4\u524d\u7f00\u6700\u5927\u503c\uff0c\u4f46\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\dfrac{n^4}{B})$\uff0c \u660e\u663e\u8fc7\u4e0d\u4e86\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8981\u6c42\u7684\u53ea\u662f\u5bf9\u8fd9\u4e2a\u5757\u5185\u70b9\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u5b8c\u5168\u4e0d\u9700\u8981\u6bcf\u6b21\u5bf9\u6574\u4e2a\u503c\u57df\u505a\u4e0a\u8ff0\u64cd\u4f5c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6570\u6309\u8be5\u5757\u5185\u7684\u6570\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u8fd9\u6837\u5b50\u4e0d\u5f71\u54cd\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u5bf9\u5927\u5c0f\uff0c\u4e5f\u5c31\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u4f46\u8981\u505a\u7684\u95ee\u9898\u89c4\u6a21\u53d8\u6210\u4e86 $B$\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u5728 $O(\\dfrac{n}{B}(B^3+n))$ \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6765\u5757\u5185\u6bcf\u4e2a\u6570\u5728\u524d\u9762\u7684\u5757\u4e2d\u7684\u6700\u5927\u5408\u6cd5\u7b54\u6848\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nB+\\dfrac{n}{B}(B^3+n))$\uff0c \u5728 $B$ \u4e3a $\\sqrt[3]{n}$ \u65f6\u4e3a\u6700\u4f18\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int qread()\n{\n\tregister int a=0,f=1;register char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){(a*=10)+=(ch^48);ch=getchar();}\n\treturn a*f;\n}\nint n,cl,c[50010],st[50010],ed[50010],ans[50010],mp[100][100][100],que[3][50010],en[3],b[200010],tot;\nint xx,yy,zz,cc[3][200010],p[3];\nstruct poin\n{\n\tint a,b,c,d;\n}a[50010];\ninline bool cmp(register poin x,register poin y){return x.a==y.a?(x.b==y.b?(x.c==y.c?x.d<y.d:x.c<y.c):x.b<y.b):x.a<y.a;}\ninline int find(register int x,register int y,register int z)\n{\n\tint an=0;\n\tan=max(an,mp[x-1][y][z]);\n\tan=max(an,mp[x][y-1][z]);\n\tan=max(an,mp[x][y][z-1]);\n\treturn an;\n} \ninline bool check(register int x,register int y)\n{\n\tif(a[x].b>a[y].b)return 0;\n\tif(a[x].c>a[y].c)return 0;\n\tif(a[x].d>a[y].d)return 0;\n\treturn 1;\n}\nint main()\n{\n\tn=qread();\n\tcl=pow(n,0.333333)+1;\n\tfor(register int i=1;i<=n;++i)b[++tot]=a[i].a=qread(),b[++tot]=a[i].b=qread(),b[++tot]=a[i].c=qread(),b[++tot]=a[i].d=qread(),c[i]=(i-1)/cl+1,ed[c[i]]=i;\n\tsort(b+1,b+1+tot);\n\ttot=unique(b+1,b+1+tot)-b-1;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\ta[i].a=lower_bound(b+1,b+1+tot,a[i].a)-b;\n\t\ta[i].b=lower_bound(b+1,b+1+tot,a[i].b)-b;\n\t\ta[i].c=lower_bound(b+1,b+1+tot,a[i].c)-b;\n\t\ta[i].d=lower_bound(b+1,b+1+tot,a[i].d)-b;\n\t}\n\tfor(register int i=n;i;--i)st[c[i]]=i;\n\tsort(a+1,a+1+n,cmp);\n\tfor(register int i=1;i<=c[n];++i)\n\t{\n\t\ten[0]=en[1]=en[2]=0;\n\t\tfor(register int j=st[i];j<=ed[i];++j)\n\t\t{\n\t\t\tque[0][++en[0]]=a[j].b;\n\t\t\tque[1][++en[1]]=a[j].c;\n\t\t\tque[2][++en[2]]=a[j].d;\n\t\t}\n\t\tsort(que[0],que[0]+en[0]+1);\n\t\tsort(que[1],que[1]+en[1]+1);\n\t\tsort(que[2],que[2]+en[2]+1);\n\t\ten[0]=unique(que[0],que[0]+en[0]+1)-que[0]-1;\n\t\ten[1]=unique(que[1],que[1]+en[1]+1)-que[1]-1;\n\t\ten[2]=unique(que[2],que[2]+en[2]+1)-que[2]-1;\n\t\tp[0]=p[1]=p[2]=0;\n\t\tfor(register int j=1;j<=n*4;++j)\n\t\t{\n\t\t\twhile(que[0][p[0]]<j&&p[0]<=en[0])++p[0];\n\t\t\twhile(que[1][p[1]]<j&&p[1]<=en[1])++p[1];\n\t\t\twhile(que[2][p[2]]<j&&p[2]<=en[2])++p[2];\n\t\t\tcc[0][j]=p[0],cc[1][j]=p[1],cc[2][j]=p[2];\n\t\t}\n\t\tfor(register int j=1;j<st[i];++j)\n\t\t{\n\t\t\txx=cc[0][a[j].b];\n\t\t\tyy=cc[1][a[j].c];\n\t\t\tzz=cc[2][a[j].d];\n\t\t\tmp[xx][yy][zz]=max(mp[xx][yy][zz],ans[j]);\n\t\t}\n\t\tfor(register int j=1;j<=en[0];++j)\n\t\t{\n\t\t\tfor(register int k=1;k<=en[1];++k)\n\t\t\t{\n\t\t\t\tfor(register int l=1;l<=en[2];++l)\n\t\t\t\t{\n\t\t\t\t\tmp[j][k][l]=max(mp[j][k][l],find(j,k,l));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(register int j=st[i];j<=ed[i];++j)\n\t\t{\n\t\t\txx=cc[0][a[j].b];\n\t\t\tyy=cc[1][a[j].c];\n\t\t\tzz=cc[2][a[j].d];\n\t\t\tans[j]=mp[xx][yy][zz]+1;\n\t\t\tfor(register int k=st[i];k<j;++k)if(check(k,j))ans[j]=max(ans[j],ans[k]+1);\n\t\t}\n\t\tfor(register int j=1;j<=en[0]+1;++j)\n\t\t{\n\t\t\tfor(register int k=1;k<=en[1]+1;++k)\n\t\t\t{\n\t\t\t\tfor(register int l=1;l<=en[2]+1;++l)\n\t\t\t\t{\n\t\t\t\t\tmp[j][k][l]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;++i)ans[0]=max(ans[0],ans[i]);\n\tprintf(\"%d\",ans[0]);\n\treturn 0;\n}\n```\n",
        "postTime": 1668222231,
        "uid": 416521,
        "name": "NATURAL6",
        "ccfLevel": 7,
        "title": "P3769 [CH\u5f31\u7701\u80e1\u7b56R2]TATT \u9898\u89e3"
    },
    {
        "content": "# TATT\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3769)\n## \u9898\u76ee\u5927\u610f\n\u6c42$4$\u4f4d\u504f\u5e8f\u3002\n## \u601d\u8def\n\u9996\u5148\u4e0d\u7528\u8bb2\u7684\u662f\uff0c\u5148\u6309\u7167\u7b2c\u4e00\u7ef4\u6392\u5e8f\u3002\u4e0d\u8fc7\u5c0f\u849f\u84bb\u6709\u4e00\u70b9\u4e0d\u662f\u5f88\u7406\u89e3\uff0c\u4e3a\u4ec0\u4e48\u6392\u5e8f\u7684\u65f6\u5019\u4e0d\u80fd\u5199\u6210\uff1a\n```cpp\nbool operator < (const node &p)const\n{\n\treturn x[0] < p.x[0];\n}\n```\n\n\u6211\u8fd9\u6837\u5c31\u53ea\u6709$64$\u4e86\u3002zbl\u3002\u3002\u3002\u5e0c\u671b\u8bc4\u8bba\u533a\u6709dalao\u7a7a\u964d\u62ef\u6551\u4e00\u4e0b\u6211\u8fd9\u4e2a\u5c0f\u849f\u84bb\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5269\u4e0b\u4e09\u7ef4\u8fde\u5e26$dp$\u503c\u63d2\u8fdb$\\text {K-D Tree}$\uff08$dp$\u503c\u5c31\u662fLIS\u91cc\u9762\u7684\u90a3\u4e2a\uff09\uff0c\u7136\u540e\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u6bd4\u5f53\u524d\u8282\u70b9\u5c0f\u7684\u70b9\u7684$dp$\u503c\u6700\u5927\u7684\u5373\u53ef\u3002\n\n\u4e00\u5f00\u59cb\u6ca1\u526a\u679d\u4ee5\u4e3a\u4ee3\u7801\u5199\u9505\u4e86\uff0c\u4e00\u76f4\u76ef\u4ee3\u7801\u4e5f\u67e5\u4e0d\u51fa\u9519\u3002\n\n\u8fd9\u662f\u4e00\u4efd\u6c27\u4e2d\u6bd2\u7684\u4ee3\u7801\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 50005\n\nint Ans,split;\n\nstruct point\n{\n\tint x[3],w;\n\tbool operator < (const point &p)const{return x[split] < p.x[split];}\n\tbool operator > (const point &p)const\n\t{\n\t\tfor (Int i = 0;i <= 2;++ i)\n\t\t\tif (x[i] < p.x[i])\n\t\t\t\treturn 0;\n\t\treturn 1;\n\t}\t\n};\n\nclass K_DTree\n{\n#define alpha 0.75\n#define lson tree[k].ls\n#define rson tree[k].rs\n\tprivate:\n\t\tint cur,tot,rub[MAXN];\n\t\tpoint a[MAXN];\n\t\tstruct node\n\t\t{\n\t\t\tint mx[3],mi[3],ls,rs,maxw,size;point tp;\n\t\t}tree[MAXN];\n\t\tint newnode (){if (tot) return rub[tot --];else return ++ cur;}\n\t\tvoid Pushup (int k)\n\t\t{\n\t\t\ttree[k].maxw = tree[k].tp.w;\n\t\t\tif (lson) tree[k].maxw = max (tree[k].maxw,tree[lson].maxw);\n\t\t\tif (rson) tree[k].maxw = max (tree[k].maxw,tree[rson].maxw);\n\t\t\tfor (Int i = 0;i <= 2;++ i)\n\t\t\t{\n\t\t\t\ttree[k].mx[i] = tree[k].mi[i] = tree[k].tp.x[i];\n\t\t\t\tif (lson) tree[k].mx[i] = max (tree[k].mx[i],tree[lson].mx[i]);\n\t\t\t\tif (lson) tree[k].mi[i] = min (tree[k].mi[i],tree[lson].mi[i]);\n\t\t\t\tif (rson) tree[k].mx[i] = max (tree[k].mx[i],tree[rson].mx[i]);\n\t\t\t\tif (rson) tree[k].mi[i] = min (tree[k].mi[i],tree[rson].mi[i]);\n\t\t\t}\n\t\t\ttree[k].size = tree[lson].size + tree[rson].size + 1;\n\t\t}\n\tpublic:\n\t\tint build (int l,int r,int deg)\n\t\t{\n\t\t\tif (l > r) return 0;\n\t\t\tint mid = (l + r) >> 1,k = newnode ();\n\t\t\tsplit = deg;\n\t\t\tnth_element (a + l,a + mid,a + r + 1);\n\t\t\ttree[k].tp = a[mid];\n\t\t\tlson = build (l,mid - 1,(deg + 1) % 3);\n\t\t\trson = build (mid + 1,r,(deg + 1) % 3);\n\t\t\tPushup (k);\n\t\t\treturn k;\n\t\t}\n\t\tvoid pia (int k,int num)\n\t\t{\n\t\t\tif (lson) pia (lson,num);\n\t\t\ta[num + tree[lson].size + 1] = tree[k].tp;rub[++ tot] = k;\n\t\t\tif (rson) pia (rson,num + tree[lson].size + 1);\n\t\t}\n\t\tvoid check (int &k,int deg)\n\t\t{\n\t\t\tif (tree[lson].size > tree[k].size * alpha || tree[rson].size > tree[k].size * alpha)\n\t\t\t\tpia (k,0),k = build (1,tree[k].size,deg); \n\t\t}\n\t\tvoid Insert (int &k,point tmp,int deg)\n\t\t{\n\t\t\tif (!k){k = newnode (),lson = rson = 0,tree[k].tp = tmp,Pushup (k);return ;}\n\t\t\tif (tmp.x[deg] <= tree[k].tp.x[deg]) Insert (lson,tmp,(deg + 1) % 3);\n\t\t\telse Insert (rson,tmp,(deg + 1) % 3);\n\t\t\tPushup (k);\n\t\t\tcheck (k,deg);\n\t\t}\n\t\tvoid query (int k,point tmp)\n\t\t{\n\t\t\tif (!k) return ;\n\t\t\tif (tree[k].maxw <= Ans) return ;\n\t\t\tif (tmp.x[0] < tree[k].mi[0] || tmp.x[1] < tree[k].mi[1] || tmp.x[2] < tree[k].mi[2]) return ;\n\t\t\tif (tmp > tree[k].tp) Ans = max (Ans,tree[k].tp.w);\n\t\t\tif (tmp > point {tree[k].mx[0],tree[k].mx[1],tree[k].mx[2],0}) \n\t\t\t{\n\t\t\t\tAns = max (Ans,tree[k].maxw);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tquery (lson,tmp);\n\t\t\tquery (rson,tmp);\n\t\t}\n#undef lson\n#undef rson\n#undef alpha\n};\n\nK_DTree Tree;\n\nint n;\n\nstruct node\n{\n\tint x[4];\n\tbool operator < (const node &p)const\n\t{\n\t\tfor (Int i = 0;i <= 3;++ i)\n\t\t\tif (x[i] < p.x[i]) return 1;\n\t\t\telse if (x[i] > p.x[i]) return 0;\n\t\treturn 0;\n\t}\n}a[MAXN];\n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nsigned main()\n{\n\tn = read ();\n\tfor (Int i = 1;i <= n;++ i)\n\t{\n\t\tint x = read (),y = read (),z = read (),w = read ();\n\t\ta[i] = node {x,y,z,w};\n\t} \n\tsort (a + 1,a + n + 1);\n\tint rt = 0,maxAns = 0;\n\tfor (Int i = 1;i <= n;++ i)\n\t{\n\t\tAns = 0;\n\t\tTree.query (rt,point {a[i].x[1],a[i].x[2],a[i].x[3],0});\n\t\tmaxAns = max (maxAns,Ans + 1);\n\t\tTree.Insert (rt,point {a[i].x[1],a[i].x[2],a[i].x[3],Ans + 1},0); \n\t}\n\twrite (maxAns),putchar ('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1585226592,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3769 \u3010[CH\u5f31\u7701\u80e1\u7b56R2]TATT\u3011"
    }
]