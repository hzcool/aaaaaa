[
    {
        "content": "\u8bb2\u9053\u7406\u8fd9\u9053\u9898\u4f1a\u7ed9\u4eba\u4e00\u79cd\u201c\u8fd8\u6709\u8fd9\u79cd\u64cd\u4f5c\u201d\u7684\u611f\u89c9\u2026\u2026\n\n# \u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\n\n### \u524d\u7f6e\u829d\u58eb\uff1a\u6b63\u6001\u5206\u5e03\n\n\u4ec0\u4e48\u662f\u6b63\u6001\u5206\u5e03\uff0c\u6240\u8c13\u6b63\u6001\u5206\u5e03\u5462\u2026\u2026\u5c31\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cfX\u7684\u4e00\u79cd\u5206\u5e03\u5f62\u5f0f\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u60c5\u51b5\u4f1a\u6709\u5f88\u591a\u79cd\uff0c\u6bd4\u5982\u5747\u5300\u5206\u5e03\uff0c\u5c31\u662f\u5728\u4e00\u5b9a\u503c\u57df\u5185\u53d6\u6bcf\u4e2a\u5730\u65b9\u7684\u503c\u7684\u6982\u7387\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6bd4\u5982\u4e8c\u9879\u5206\u5e03\uff0c\u53ea\u80fd\u662f\u4e24\u79cd\u503c(\u4f8b\u5982\u629b\u786c\u5e01)\n\n\u7136\u540e\u6b63\u6001\u5206\u5e03\u5c31\u662f\u5404\u79cd\u6982\u7387\u5206\u5e03\u60c5\u51b5\u7684\u4e00\u79cd\uff0c\u5b83\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6b63\u6001\u5206\u5e03\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u671f\u671b$\u03bc$\u548c\u4e00\u4e2a\u65b9\u5dee$\u03c3^{2}$\u5c31\u53ef\u4ee5\u63cf\u8ff0\uff0c\u6211\u4eec\u8bb0\u505aN($\u03bc,\u03c3^{2}$)\uff0c\u611f\u6027\u7684\u7406\u89e3\u7684\u8bdd\uff0c\u6b63\u6001\u5206\u5e03\u7684\u7279\u70b9\u662f\u4e2d\u95f4\u9ad8\uff0c\u4e24\u8fb9\u4f4e\uff0c\u6982\u7387\u5bc6\u5ea6\u66f2\u7ebf\u4e3a\u949f\u5f62\n\n\u4f46\u662f\u771f\u6b63\u4f7f\u6b63\u6001\u5206\u5e03\u91cd\u8981\u7684\u8fd8\u662f\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u2026\u2026\u8fd9\u4e2a\u540e\u9762\u8bb2\n\n### \u524d\u7f6e\u829d\u58eb\uff1a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\n\n\u5982\u679c\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u662f\u79bb\u6563\u7684\uff0c\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u7528\u4e00\u4e2a\u8868\u683c\uff0c\u5217\u51fa\u6bcf\u4e2a\u503c\u51fa\u73b0\u7684\u6982\u7387\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u8981\u63cf\u8ff0\u4e00\u4e2a\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u5462\uff1f\u663e\u7136\u5b83\u53d6\u4efb\u4f55\u4e00\u4e2a\u503c\u7684\u6982\u7387\u90fd\u662f0\u554a\u2026\u2026\uff0c\u4f46\u662f\u663e\u7136\u503c\u843d\u5728\u67d0\u4e00\u4e2a\u533a\u95f4\u7684\u6982\u7387\u53ef\u4ee5\u4e0d\u662f0\u554a\n\n\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3a**\u6982\u7387\u5bc6\u5ea6\u51fd\u6570**\u7684\u4e1c\u897f\u6765\u63cf\u8ff0\u8fd9\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u60c5\u51b5\n\n\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cfx\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570f(x)\u9700\u8981\u6ee1\u8db3\u8fd9\u6837\u4e00\u4e2a\u6761\u4ef6\uff0c\u624d\u53ef\u4ee5\u662f\u8fd9\u4e2a\u53d8\u91cf\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\n\n**f(x)\u5728\u67d0\u4e00\u533a\u95f4\u7684\u79ef\u5206\uff0c\u7b49\u4e8ex\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u6982\u7387**\n\n\u66f4\u7c97\u66b4\u7684\u4e00\u70b9\u8bb2\uff0cf(x)\u5728\u67d0\u4e00\u533a\u95f4\u5185\u548cX\u8f74\u6240\u56f4\u6210\u7684\u56fe\u5f62\u9762\u79ef\u7b49\u4e8eX\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u6982\u7387\n\n\u90a3\u4e48\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u662f\u4ec0\u4e48\u5462\uff0c\u8bbe\u8fd9\u4e2a\u6b63\u6001\u5206\u5e03\u4e3aN($\u03bc,\u03c3^{2}$)\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\n\n## $f(x)=\\frac{1}{\\sqrt{2\u03c0\u03c3^{2}}}e^{-\\frac{(x-\u03bc)^{2}}{2\u03c3^{2}}}$\n\n\u5176\u4e2de\u7684\u82e5\u5e72\u6b21\u65b9\u53ef\u4ee5\u7528cmath\u5e93\u4e2d\u7684exp()\u51fd\u6570\u8ba1\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u65e6\u8bc1\u660e\u4e86\u4e00\u4e2a\u53d8\u91cf\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u5c31\u662f\u5bf9\u7740\u76ee\u6807\u533a\u95f4\u5927\u529b\u8f9b\u666e\u68ee\u79ef\u5206\u5373\u53ef\u4e86\n\n---------------\n\n\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u7684\u5185\u5bb9\uff1a\n\n\u8bbe\u6709n\u4e2a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cfx\uff0c\u90a3\u4e48\u2026\u2026\u6ee1\u8db3\u2026\u2026\n\n\u62b1\u6b49\u8fd9\u4e2a\u4e1c\u897f\u6211\u770b\u4e0d\u61c2\u2026\u2026\n\n\u4f46\u662f\u6211\u4eec\u5462\u505a\u8fd9\u9053\u9898\u7528\u7684\u662f\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u4e00\u4e2a\u8f83\u4e3a\u4eb2\u6c11\u7684\u4e00\u4e2a**\u63a8\u8bba**\n\n\u82e5\u6709N\u4e2a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cf$x_{1}\u2026\u2026x_{n}$\u671f\u671b\u4e3a$\u03bc$\u65b9\u5dee\u4e3a$\u03c3^{2}$\n\n\u90a3\u4e48\u8bbe\n\n# $Y_{n}=\\frac{\\sum^{n}_{i=1}x_{i}-n\u03bc}{\\sqrt{n\u03c3^{2}}}$\n\n\u5219\u5f53n\u8db3\u591f\u5927\u7684\u65f6\u5019~~(\u5f53\u6ee1\u8db3\u6211\u4eec\u7684eps\u8981\u6c42\u7684\u65f6\u5019)~~\u53ef\u4ee5\u8ba4\u4e3a$Y_{n}$\u670d\u4ece\u6b63\u6001\u5206\u5e03N(0,1)\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u4e00\u4ef6\u4e8b\uff0c\u51fa\u9898\u4eba\u5df2\u7ecf\u7ed9\u4e86\u6211\u4eecx\u7684\u65b9\u5dee\u548c\u671f\u671b\u4e86\uff0c\u6211\u4eec\u6b64\u65f6\u8fd0\u7528\u4e00\u4e0b\u9ad8\u4e00\u6570\u5b66\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\n\n### $\\sum^{n}_{i=1}xi\u2208[A,B]$\n\n\u90a3\u4e48\u6709\n\n## $Y_{n}\u2208[\\frac{A-n\u03bc}{\\sqrt{n\u03c3^{2}}},\\frac{B-n\u03bc}{\\sqrt{n\u03c3^{2}}}]$\n\n\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e00\u4ef6\u4e8b\uff0c\u8fd9\u5c31\u662f\u9053\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u7684\u88f8\u9898\u2026\u2026\n\n\u6211\u4eec\u552f\u4e00\u8981\u505a\u7684\u4e8b\u5c31\u662f\u8f6c\u4e86A,B\u8303\u56f4\u4e4b\u540e\u5bf9\u7740\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5927\u529b\u8f9b\u666e\u68ee\u79ef\u5206\uff0c\u6bd5\u7adf\u8bef\u5dee\u8981\u6c42\u8d3c\u5bbd\u5bf9\u5427\u2026\u2026\uff0c\u4f46\u662f\u518d\u600e\u4e48\u8bf4n=1\u4e4b\u7c7b\u7684\u60c5\u51b5\u6211\u4eec\u662f\u4e0d\u53ef\u4ee5\u8ba4\u4e3an\u8db3\u591f\u5927\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53c8\u8981\u4f7f\u7528\u5bf9\u6570\u636e\u5206\u60c5\u51b5\u8ba8(\u9a97)\u8bba(\u5206)\u7684\u6280\u5de7\u4e86\n\n## \u5c0f\u6570\u636e\u505a\u6cd5\uff1a\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362(FFT)\n\n\u5bf9\u4e8e\u4e00\u4e9b\u5c0f\u7684\u6570\u636e\u6211\u4eec\u5462\u53d1\u73b0\u53ef\u4ee5\u8fd9\u6837\u505a\n\n\u6784\u9020\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u6b21\u6570\u4e3a0~x-1\uff0c\u6211\u4eec\u5462\u5e0c\u671b\u8fd9\u4e2a\u6784\u9020\u51fa\u6765\u7684\u591a\u9879\u5f0f\u6ee1\u8db3\u8fd9\u6837\u4e00\u4e2a\u6761\u4ef6\uff1a\u5c31\u662f\u6b21\u6570\u4e3aa\u7684\u9879\u7684\u7cfb\u6570\u5c31\u662f**\u7f16\u53f7\u548c\u4e3aa\u7684\u6982\u7387**\n\n\u663e\u7136\u4e00\u5f00\u59cb\u6bcf\u4e00\u9879\u7684\u7cfb\u6570\u90fd\u662f$\\frac{1}{x}$\n\n\u63a5\u4e0b\u6211\u4eec\u5462\u8003\u8651\u8f6c\u79fb\uff0c\u628a\u8fd9\u4e2a\u5f0f\u5b50\u5e73\u65b9\u4e00\u4e0b\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u65b0\u7684\u591a\u9879\u5f0f\u4e5f\u6ee1\u8db3\u521a\u624d\u7684\u6027\u8d28\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8003\u8651\u6211\u4eec\u5728\u505a\u4e58\u6cd5\u7684\u65f6\u5019\u505a\u4e86\u4ec0\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u9879\uff0c\u6211\u4eec\u76f8\u5f53\u4e8e\u679a\u4e3e\u4e86\u8fd9\u4e24\u6b21\u63b7\u9ab0\u5b50\u7684\u6240\u6709\u53ef\u80fd\u60c5\u51b5\uff0c\u76f8\u4e58\u518d\u76f8\u52a0\uff0c\u521a\u597d\u548c\u591a\u9879\u5f0f\u4e58\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\u76f8\u540c\uff0c\u540c\u7406\u4e5f\u67093\u6b21\uff0c4\u6b21\uff0cy\u6b21\u65b9\u7684\u60c5\u51b5\n\n\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662fdp\uff0c\u8f6c\u79fb\u65b9\u7a0b\u662f\u5377\u79ef\u7684\u5f62\u5f0f\u7136\u540e\u518d\u53bb\u7528fft\u4f18\u5316\n\n\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\uff0c\u6784\u9020\u8fd9\u6837\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u7136\u540e\u8ba1\u7b97\u5b83\u7684y\u6b21\u65b9\uff0c\u6700\u540e\u518d\u8ba1\u7b97\u6b21\u6570\u4eceA-B\u7684\u548c\u5c31OK\u4e86\n\n~~\u4ec0\u4e48\u4f60\u4e0d\u4f1afft?\u51fa\u95e8\u5de6\u8f6cluogu\u819c\u677f\u533a\uff0c\u5305\u6559\u5305\u4f1a~~\n\n----------------\n\n\u4e4b\u540e\u5c31\u6ca1\u5565\u96be\u5ea6\u4e86\uff0c\u5982\u679c\u4f60\u4e0d\u4f1aSimpson\u79ef\u5206\u6cd5\u7684\u8bdd\u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u7684\u4ecb\u7ecd\u4e0b\n\n## \u81ea\u9002\u5e94Simpson\u79ef\u5206\u6cd5\n\n\u5927\u6982\u5c31\u662f\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u51fd\u6570\u7684\u66f2\u7ebf\u4e0b\u9762\u79ef\uff0c\u7136\u540e\u6211\u4eec\u600e\u4e48\u6c42\u5462\uff1f\n\n\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5207\u7247\u6cd5\uff0c\u5b9a\u4e00\u4e2aeps\u7136\u540e\u4e00\u8def\u77e9\u5f62\u5207\u7247\u5207\u8fc7\u53bb\n\n\u53e6\u4e00\u79cd\u60f3\u6cd5\u662f\u68af\u5f62\u6cd5\uff0c\u5c31\u662f\u628a\u521a\u624d\u7684\u77e9\u5f62\u53d8\u6210\u68af\u5f62\uff0c\u4f46\u662f\u521a\u624d\u7684\u4e24\u79cd\u505a\u6cd5\u5c31\u662f\u6015\u51fd\u6570\u7a81\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u91c7\u53d6\u4e00\u79cd\u66f4\u79d1\u5b66\u7684\u65b9\u6cd5-\u81ea\u9002\u5e94Simpson\u79ef\u5206\u6cd5\n\n\u6211\u4eec\u7c97\u66b4\u7684\u8ba4\u4e3a\u8fd9\u4e2a\u66f2\u7ebf\u662f\u4e00\u4e2a\u629b\u7269\u7ebf\uff0c\u6211\u4eec\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u629b\u7269\u7ebf\u7684\u66f2\u7ebf\u4e0b\u9762\u79ef\u516c\u5f0f\n\n### $\\frac{(r-l)(f(l)+4f(mid)+f(r))}{6}$\n\n\u6765\u8ba1\u7b97\u4e86\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u4e0d\u591f\uff0c\u6211\u4eec\u518d\u7528l,mid\u548cmid,r\u4e24\u90e8\u5206\u7684\u9762\u79ef\u548c\u6765\u770b\u4e00\u4e0b\u5dee\u662f\u5426\u6ee1\u8db3eps\uff0c\u5982\u679c\u7cbe\u5ea6\u4e0d\u591f\u5c31\u9012\u5f52\u4e0b\u53bb\uff0c\u6700\u540e\u6211\u4eec\u5c31\u66b4\u529b\u7684\u628a\u8fd9\u4e2a\u51fd\u6570\u7684\u79ef\u5206\u6c42\u4e86\u51fa\u6765\u2026\u2026\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\u5427\uff0c\u5199\u8d77\u6765\u5c31\u662f\u4fe9\u677f\u5b50\uff0c\u633a\u597d\u5199\u7684\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\ntypedef double db;\nconst db eps=1e-12;const int N=524300;const db pi=acos(-1);int T;\nconst int Mlim=524288;const db K=1/sqrt(2*pi);int x;int y;int lim;\nstruct cmp//\u865a\u6570\u7c7b \n{\n\tdb r;db v;cmp(db a=0,db b=0){r=a;v=b;}\n\tfriend cmp operator +(cmp a,cmp b){return cmp(a.r+b.r,a.v+b.v);}\n\tfriend cmp operator -(cmp a,cmp b){return cmp(a.r-b.r,a.v-b.v);}\n\tfriend cmp operator *(cmp a,cmp b){return cmp(a.r*b.r-a.v*b.v,a.r*b.v+a.v*b.r);}\n\tvoid operator /=(db a){r/=a;v/=a;}\n}res[N];int r[N];int len;\ninline void clear(){for(int i=0;i<lim;i++){res[i]=cmp();r[i]=0;}}\ninline cmp po(cmp a,int p){cmp r(1,0);for(;p;p>>=1,a=a*a){if(p&1){r=r*a;}}return r;}\ninline void clacr(){for(int i=1;i<lim;i++){r[i]=r[i>>1]>>1|(i&1)<<len;}}//\u8ba1\u7b97\u53cd\u8f6c\u6570\u7ec4 \ninline void fft(cmp* tp,int n,int op)//fft\u677f\u5b50 \n{\n\tfor(int i=1;i<n;i++){if(i<r[i])swap(tp[i],tp[r[i]]);}\n\tfor(int k=1;k<n;k<<=1)\n\t{\n\t\tfor(int s=0;s<n;s+=2*k)\n\t\t{\n\t\t\tcmp now(1,0);cmp rt(cos(pi/k),op*sin(pi/k));\n\t\t\tfor(int i=s;i<s+k;i++,now=now*rt)\n\t\t\t{cmp ev=tp[i];cmp od=tp[i+k];tp[i]=ev+now*od;tp[i+k]=ev-now*od;}\n\t\t}\n\t}if(op==-1){for(int i=0;i<n;i++){tp[i]/=n;}}\n}\ninline db f(db x){return K*exp(x*x/-2.0);}//\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \ninline db psp(db l,db r){db mid=(l+r)/2.0;return (r-l)*(f(l)+4.0*f(mid)+f(r))/6.0;}\ninline db sp(db l,db r)//\u7136\u540e\u8fd9\u662fSimpson\u79ef\u5206\u7684\u677f\u5b50 \n{\n\tdb mid=(l+r)/2.0;db f1=psp(l,r);db f2=psp(l,mid)+psp(mid,r);\n\tdb res=(-eps<f1-f2&&f1-f2<eps)?f1:sp(l,mid)+sp(mid,r);return res;\n}\ninline void solve()\n{\n\tscanf(\"%d%d\",&x,&y);lim=x*y;\n\tif(lim<=Mlim)//\u5224\u65ad\u4e00\u4e0bfft\u8dd1\u7684\u8fc7\u53bb\u8fd8\u662f\u8dd1\u4e0d\u8fc7\u53bb \n\t{\n\t\tfor(len=0;(1<<len)<=lim;len++);lim=(1<<len);len--;\n\t\tclacr();for(int i=0;i<x;i++){res[i].r=1/(db)x;}\n\t\tfft(res,lim,1);//\u76f4\u63a5\u5feb\u901f\u5e42\u5373\u53ef \n\t\tfor(int i=0;i<lim;i++){res[i]=po(res[i],y);}\n\t\tfft(res,lim,-1);\n\t\tfor(int i=1;i<=10;i++)\n\t\t{\n\t\t\tint a;int b;scanf(\"%d%d\",&a,&b);db ret=0;\n\t\t\tfor(int j=a;j<=b;j++){ret+=res[j].r;}\n\t\t\tprintf(\"%.6lf\\n\",ret);\n\t\t}\n\t}\n\telse//\u5927\u6570\u636e\u5957\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406 \n\t{\n\t\tdb mu=(db)(x-1)/2;db sigma=(db)(x*x-1)/12;\n\t\tfor(int i=1;i<=10;i++)//\u5927\u529b\u8f6cA,B\u8303\u56f4\u4e4b\u540e\u8ba1\u7b97\u79ef\u5206\u5373\u53ef \n\t\t{\n\t\t\tdb a;db b;scanf(\"%lf%lf\",&a,&b);\n\t\t\ta=(a-y*mu)/sqrt(y*sigma);b=(b-y*mu)/sqrt(y*sigma);\n\t\t\tprintf(\"%.6lf\\n\",sp(0,b)-sp(0,a));\n\t\t}lim=0;\n\t}\n}\nint main()\n{scanf(\"%d\",&T);for(int z=1;z<=T;z++){solve();clear();}return 0;//\u62dc\u62dc\u7a0b\u5e8f~}\n```\n\n\n\n\n\n",
        "postTime": 1521102788,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3779 \u3010[SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce\u3011"
    },
    {
        "content": "\u6982\u7387\u8bba\u592a\u96be\u4e86\uff0c\u4e0d\u4f1a\u3002\u4f46\u8fd9\u4e0d\u80fd\u963b\u6b62\u6211\u4eec\u8fc7\u9898\u3002\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u4e00\u4e2a\u57fa\u4e8e\u80cc\u5305\u7684\u66b4\u529b\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u770b\u6210\u662f\u5377\u79ef\u7684\u5f62\u5f0f\u5c31\u53ef\u4ee5\u7528fft\u4f18\u5316\u4e86\u3002\u5f62\u5f0f\u5316\u8bb2\uff0c\u5c31\u662f\u6c42\u5e42\u7ea7\u6570$ (\\sum\\limits_{i = 0}^{x - 1} \\frac{1}{x} z^i)^y $\u5728$[z^A, z^B]$\u4e4b\u95f4\u7684\u7cfb\u6570\u548c\u3002\n\n#### \u4e0d\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u505a\u6cd5\n\u76f4\u63a5\u5c06\u4e0a\u8ff0\u5e42\u7ea7\u6570\u66b4\u529b\u500d\u589e\u5377\u79ef\u6c42\u51fa\u6765\u590d\u6742\u5ea6\u662f$O(x*y*log(xy))$\uff0c\u4e0d\u592a\u80fd\u8fc7\u7684\u3002\u4f46\u5982\u679c\u4e0d\u5728\u6a21\u610f\u4e49\u4e0b\u505a\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7206\u7cbe\u5ea6\u7206\u8fc7\u53bb\u3002\u5f88\u5bb9\u6613\u53d1\u73b0\u6700\u540e\u6c42\u5f97\u7684\u70b9\u6570\u548c\u5f88\u5927\u6982\u7387\u5c31\u662f\u5728\u5747\u503c\u9644\u8fd1\u7684\uff0c\u8fc7\u5927\u8fc7\u5c0f\u7684\u6982\u7387\u51e0\u4e4e\u4e3a0\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u4e2d\u95f4\u5728\u505a\u5377\u79ef\u548c\u6709\u5f88\u591a\u9879\u51e0\u4e4e\u4e3a0\uff0c\u6211\u4eec\u628a\u4ed6\u4eec\u5ffd\u7565\u6389\u662f\u5728\u7cbe\u5ea6\u7684\u627f\u53d7\u8303\u56f4\u4e4b\u5185\u7684\u3002\u4e8e\u662f\u6211\u4eec\u5728\u505a\u500d\u589e\u6c42\u51fa\u4e0a\u8ff0\u5e42\u7ea7\u6570\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u53ea\u4fdd\u7559\u4e2d\u95f4\u7684\u4e00\u5c0f\u6bb5\u6709\u503c\u7684\u90e8\u5206\uff0c\u5176\u4f59\u7684\u6254\u6389\u5c31\u884c\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c$\\epsilon$\uff0c\u6bcf\u6b21\u5377\u79ef\u540e\u628a\u591a\u9879\u5f0f\u4e2d\u503c$\\le \\epsilon$\u7684\u90fd\u6254\u6389\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u662f$O(len*log(len + y))$\uff0c\u5176\u4e2d$len$\u662f\u6700\u7ec8\u5e42\u7ea7\u6570\u4e2d\u503c$> \\epsilon$\u7684\u4e2a\u6570\u3002\u5b9e\u8df5\u8bc1\u660e\uff0c\u5f53$\\epsilon$\u53d6$10^{-9}$\u65f6\uff0c$len$\u5927\u6982\u662f\u4e24\u4e09\u4e07\uff0c\u5e76\u4e14\u6b64\u65f6\u7684\u7cbe\u5ea6\u53ef\u4ee5\u8fbe\u5230\u5c0f\u6570\u70b9\u540e4\u4f4d\u3002\n\n#### \u5728\u6a21\u610f\u4e49\u4e0b\u7684\u505a\u6cd5\n\u5982\u679c\u7b54\u6848\u53ef\u4ee5\u5bf9\u67d0\u4e2a\u8d28\u6570\u53d6\u6a21\uff0c\u8fd9\u9898\u5c31\u66f4\u597d\u505a\u4e86\u3002\n\u8003\u8651\u6700\u5f00\u59cb\u7684\u90a3\u4e2a\u5e42\u7ea7\u6570\uff1a\n\n$(\\sum\\limits_{i = 0}^{x - 1} \\frac{1}{x} z^i)^y = (\\frac{1}{x} \\frac{1 - z^x}{1 - z})^y = (\\frac{1}{x})^y (1 - z^x)^y(\\frac{1}{1 - z})^y$\n\n\u6211\u4eec\u60f3\u8981\u6c42\u5176\u5728\u7b2c$[A, B]$\u4e4b\u95f4\u7684\u7cfb\u6570\u548c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e58\u4e0a\u4e00\u4e2a$\\frac{1}{1 - x}$\u6765\u505a\u4e00\u6b21\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8f6c\u5316\u6210\u4e24\u6b21\u5f62\u5982\u6c42\u4e00\u4e2a$z^n$\u7684\u7cfb\u6570\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u662f\uff1a\n\n$[z^n] (\\frac{1}{x})^y (1 - z^x)^y(\\frac{1}{1 - z})^{y + 1}$\n\n\u624b\u52a8\u5c55\u5f00\u540e\u9762\u7684\u4e24\u4e2a\uff1a\n\n$=[z^n] (\\frac{1}{x})^y(\\sum\\limits_{i = 0}^{y}\\binom{y}{i}(-1)^iz^{ix})(\\sum\\limits_{i = 0}\\binom{y + i}{y}z^i)$\n\n$=(\\frac{1}{x})^y\\sum\\limits_{i = 0}^{y}\\binom{y}{i}(-1)^i\\binom{y + n - ix}{y}$\n\n\u9884\u5904\u7406\u7ec4\u548c\u6570\u4e4b\u540e\u968f\u4fbf\u505a\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u590d\u6742\u5ea6$O(x*y)$\u3002\n \n\n\u505a\u6cd5\u4e00\u7684\u4ee3\u7801\uff1a\n```cpp\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace PO {\n  const int N = 4e5 + 5;\n  const double PI = acos(-1);\n  \n  struct Com {\n    double x, y;\n    friend Com operator + (Com a, Com b) {\n      return (Com){ a.x + b.x, a.y + b.y };\n    }\n    friend Com operator - (Com a, Com b) {\n      return (Com){ a.x - b.x, a.y - b.y };\n    }\n    friend Com operator * (Com a, Com b) {\n      return (Com){ a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x };\n    }\n  } ta[N], tb[N], w[N];\n  int rev[N], L = 1;\n  typedef vector<Com> Poly;\n\n  void Init(int l) {\n    for (; L < l; L <<= 1) {\n      for (int i = L; i < (L << 1); ++i) {\n        w[i] = (Com){ cos(PI / L * (i - L)), sin(PI / L * (i - L)) };\n      }\n    }\n    for (int i = 0; i < l; ++i) {\n      rev[i] = (rev[i >> 1] >> 1) | (i & 1? l >> 1 : 0);\n    }\n  }\n  \n  void Dft(Com *a, int l) {\n    for (int i = 0; i < l; ++i)\n      if (i < rev[i]) swap(a[i], a[rev[i]]);\n    for (int i = 1; i < l; i <<= 1) {\n      for (int j = 0; j < l; j += i << 1) {\n        Com *l = a + j, *r = l + i, *wx = w + i, y;\n        for (int k = 0; k < i; ++k, ++l, ++r, ++wx) {\n          y = (*r) * (*wx);\n          *r = (*l) - y;\n          *l = (*l) + y;\n        }\n      }\n    }\n  }\n  void Idft(Com *a, int l) {\n    reverse(a + 1, a + l);\n    Dft(a, l);\n    for (int i = 0; i < l; ++i) {\n      a[i].x /= l;\n      a[i].y /= l;\n    }\n  }\n\n  vector<double> Mul(vector<double> a, vector<double> b) {\n    int n = a.size(), m = b.size(), l;\n    for (l = 1; l < n + m - 1; l <<= 1);\n    Init(l);\n    a.resize(l), b.resize(l);\n    for (int i = 0; i < l; ++i) {\n      ta[i] = (Com){ a[i], 0 };\n      tb[i] = (Com){ b[i], 0 };\n    }\n    Dft(ta, l), Dft(tb, l);\n    for (int i = 0; i < l; ++i) {\n      ta[i] = ta[i] * tb[i];\n    }\n    Idft(ta, l);\n    for (int i = 0; i < l; ++i) {\n      a[i] = ta[i].x;\n    }\n    a.resize(n + m - 1);\n    return a;\n  }\n  \n}\n\nvoid Cut(vector<double> &a, int &base) {\n  const double GAMA = 1e-9;\n  int id = 0;\n  while (a[id] < GAMA) ++id;\n  for (int i = 0; i + id < a.size(); ++i) {\n    a[i] = a[i + id];\n  }\n  while (a.back() < GAMA) {\n    a.pop_back();\n  }\n  base += id;\n}\n\nint main() {\n  int tc;\n  for (cin >> tc; tc--; ) {\n    int x, y;\n    cin >> x >> y;\n\n    vector<double> ans(x * y);\n    vector<double> F(x, 1.0 / x), G(1, 1);\n    int base_f = 0, base_g = 0;\n    for (int ex = y; ex; ex >>= 1) {\n      if (ex & 1) {\n        G = PO::Mul(G, F);\n        base_g += base_f;\n        Cut(G, base_g);\n      }\n      F = PO::Mul(F, F);\n      base_f *= 2;\n      Cut(F, base_f);\n    }\n    for (int i = 0; i < G.size(); ++i) {\n      ans[i + base_g] = G[i];\n    }\n    for (int i = 1; i < x * y; ++i) {\n      ans[i] += ans[i - 1];\n    }\n    \n    for (int cas = 10; cas--; ) {\n      int l, r;\n      cin >> l >> r;\n      printf(\"%.12f\\n\", ans[r] - (l? ans[l - 1] : 0));\n    }\n  }\n\n  return 0;\n}\n```",
        "postTime": 1551493145,
        "uid": 20360,
        "name": "zj\u4f59\u80fd",
        "ccfLevel": 9,
        "title": "[SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce \u505a\u6cd5"
    },
    {
        "content": "\u8fd9\u6570\u5b66\u9898\u592a\u795e\u4ed9\u4e86...\n\n## FFT \u505a\u6cd5\n\n\u5bb9\u6613\u60f3\u5230\u8fd9\u6837\u4e00\u79cd\u5e38\u89c4\u505a\u6cd5\uff1a\u8bbe $f(i,j)$ \u8868\u793a\u63b7\u5b8c\u524d $i$ \u4e2a\u9ab0\u5b50\u540e\u70b9\u6570\u548c\u4e3a $j$ \u7684\u6982\u7387\uff0c\u5219\u6709\uff0c\n\n$$\nf(i,j)=\\sum_{0 \\leq k \\leq \\min(j,X-1)} f(i-1,j-k) \\times \\frac{1}{X}\n$$\n\n\u8fb9\u754c\u663e\u7136\u662f $f(0,0)=1$\u3002\n\n\u6ce8\u610f\u5230\u8f6c\u79fb\u8fc7\u7a0b\u53ef\u4ee5\u7528\u591a\u9879\u5f0f\u5feb\u901f\u5e42\u4f18\u5316\uff08\u76f8\u5f53\u4e8e\u6c42 ($\\sum_{i=0}^{X-1} \\dfrac{1}{X}x^i)^Y$ \u4e2d\u5404\u9879\u7684\u7cfb\u6570\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(XY \\log(XY))$\uff0c\u5e76\u4e0d\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n## \u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\n\n\u5982\u679c\u7528\u8ba1\u7b97\u673a\u6a21\u62df\u4e00\u4e0b\u6295\u63b7\u9ab0\u5b50\u7684\u8fc7\u7a0b\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5728\u9ab0\u5b50\u6570\u91cf\u8db3\u591f\u591a\u7684\u65f6\u5019\uff0c\u5404\u9ab0\u5b50\u6570\u5b57\u4e4b\u548c\u51fa\u73b0\u7684\u6982\u7387\uff0c\u5448\u73b0\u51fa**\u6b63\u6001\u5206\u5e03**\u7684\u7279\u5f81\u3002\n\n\u8fd9\u4e2a\u73b0\u8c61\u80cc\u540e\u5c31\u662f\u6982\u7387\u8bba\u4e2d\u7684**\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406**\u3002\n\n\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff1a\u5bf9\u4e8e $N$ \u4e2a**\u72ec\u7acb\u540c\u5206\u5e03**\uff08\u5bf9\u5e94\u672c\u9898\u4e2d\u5b8c\u5168\u76f8\u540c\u7684\u9ab0\u5b50\uff09\u7684\u968f\u673a\u53d8\u91cf $X_1, X_2, \\ldots, X_N$\uff0c\u82e5 $E(X_i)=\\mu$\uff0c$D(X_i)=\\sigma^2$\uff0c\u4ee4\uff0c\n\n$$\nY =\\frac{\\sum_{i=1}^N X_i - N\\mu}{\\sqrt{N\\sigma^2}}\n$$\n\n\u5219\u5f53 $N$ **\u8db3\u591f\u5927**\u65f6\uff0c$Y \\sim N(0,1)$\u3002\n\n\u800c\u6211\u4eec\u5728\u9ad8\u4e2d\u6570\u5b66\u4e2d\u5df2\u7ecf\u5b66\u4e60\u5230\uff0c\u5bf9\u4e8e\u6b63\u6001\u5206\u5e03 $N(\\mu,\\sigma^2)$\uff0c\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u89e3\u6790\u5f0f\u4e3a\uff1a\n\n$$\nf(x)=\\frac{1}{\\sqrt{2\\pi\\sigma}}e^{\\frac{-(x-\\mu)^2}{2 \\sigma^2}}\n$$\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u6c42\u51fa $f(x)$ \u5728\u76f8\u5e94\u533a\u95f4\u5185\u7684\u79ef\u5206\u5373\u53ef\u3002\n\n\u6c42\u89e3\u79ef\u5206\u9700\u8981\u7528\u5230 [\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u6cd5](https://oi-wiki.org/math/integral/)\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u8ba8\u8bba\u5747\u5728\u9ab0\u5b50\u4e2a\u6570**\u8db3\u591f\u591a**\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\uff0c\u5f53\u9ab0\u5b50\u7684\u6570\u91cf\u8f83\u5c11\u65f6\uff0c\u5c06\u70b9\u6570\u4e4b\u548c\u8fd1\u4f3c\u4e3a\u6b63\u6001\u5206\u5e03\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\uff0c\u8fd9\u65f6\u5019\u4ecd\u7136\u9700\u8981\u91c7\u7528\u5e38\u89c4\u7684 FFT \u65b9\u6cd5\u6765\u89e3\u51b3\u3002\n\n```cpp\n// Problem: P3779 [SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3779\n// Memory Limit: 500 MB\n// Time Limit: 1000 ms\n// Author: StudyingFather\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nconst double PI = 3.1415926535897;\nnamespace fft {\nconst int MAXL = (1 << 16) + 5;\nstruct complex {\n  complex(double a = 0, double b = 0) { this->a = a, this->b = b; }\n  double a, b;\n} res[MAXL];\nint r[MAXL];\ncomplex operator+(complex x, complex y) {\n  return complex(x.a + y.a, x.b + y.b);\n}\ncomplex operator-(complex x, complex y) {\n  return complex(x.a - y.a, x.b - y.b);\n}\ncomplex operator*(complex x, complex y) {\n  return complex(x.a * y.a - x.b * y.b, x.b * y.a + y.b * x.a);\n}\ncomplex fpow(complex x, int y) {\n  complex ans(1, 0);\n  while (y) {\n    if (y & 1) ans = ans * x;\n    x = x * x;\n    y >>= 1;\n  }\n  return ans;\n}\nvoid fft(complex *f, int n, int op) {\n  for (int i = 0; i < n; i++)\n    if (i < r[i]) swap(f[i], f[r[i]]);\n  for (int i = 2; i <= n; i <<= 1) {\n    int len = i >> 1;\n    complex tmp1(cos(PI / len), op * sin(PI / len));\n    for (int j = 0; j < n; j += i) {\n      complex tmp2(1, 0);\n      for (int k = j; k < j + len; k++) {\n        complex x = tmp2 * f[len + k];\n        f[len + k] = f[k] - x;\n        f[k] = f[k] + x;\n        tmp2 = tmp2 * tmp1;\n      }\n    }\n  }\n  if (op == -1) {\n    for (int i = 0; i <= n; i++) f[i].a /= n, f[i].b /= n;\n  }\n}\nvoid solve(int x, int y) {\n  memset(res, 0, sizeof(res));\n  memset(r, 0, sizeof(r));\n  for (int i = 0; i < x; i++) res[i].a = 1.0 / x;\n  int len = 1;\n  while (len <= x * y) len <<= 1;\n  for (int i = 0; i < len; i++)\n    r[i] = (r[i >> 1] >> 1) | ((i & 1) ? len >> 1 : 0);\n  fft(res, len, 1);\n  for (int i = 0; i < len; i++) res[i] = fpow(res[i], y);\n  fft(res, len, -1);\n  for (int i = 1; i <= 10; i++) {\n    int a, b;\n    cin >> a >> b;\n    double ans = 0;\n    for (int j = a; j <= b; j++) ans += res[j].a;\n    cout << ans << endl;\n  }\n}\n}  // namespace fft\nnamespace simpson {\ndouble f(double x) { return exp((-x * x) / 2) / sqrt(2 * PI); }\ndouble simpson(double l, double r) {\n  double mid = (l + r) / 2;\n  return (r - l) * (f(l) + 4 * f(mid) + f(r)) / 6;\n}\ndouble asr(double l, double r, double eqs, double ans, int step) {\n  double mid = (l + r) / 2;\n  double fl = simpson(l, mid), fr = simpson(mid, r);\n  if (abs(fl + fr - ans) <= 15 * eqs && step < 0)\n    return fl + fr + (fl + fr - ans) / 15;\n  else\n    return asr(l, mid, eqs / 2, fl, step - 1) +\n           asr(mid, r, eqs / 2, fr, step - 1);\n}\ndouble calc(double l, double r, double eqs) {\n  return asr(l, r, eqs, simpson(l, r), 8);\n}\nvoid solve(int x, int y) {\n  double mu = (x - 1) / 2.0, sig2 = (x * x - 1) / 12.0;\n  for (int i = 1; i <= 10; i++) {\n    double a, b;\n    cin >> a >> b;\n    a = (a - y * mu) / sqrt(y * sig2), b = (b - y * mu) / sqrt(y * sig2);\n    cout << calc(a, b, 1e-4) << endl;\n  }\n}\n}  // namespace simpson\nint main() {\n  int T;\n  cin >> T;\n  while (T--) {\n    int x, y;\n    cin >> x >> y;\n    if (x * y <= (1 << 15))\n      fft::solve(x, y);  // use FFT for small testcase\n    else\n      simpson::solve(x, y);  // use simpson for large testcase\n  }\n  return 0;\n}\n```",
        "postTime": 1624420482,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3779 \u3010[SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce\u3011"
    },
    {
        "content": "\u6709$Y$\u4e2a\u6982\u7387\u5747\u5300\u53d6\u503c\u5728$0...X-1$\u7684\u79bb\u6563\u53d8\u91cf$\\{x_{i}\\}$\u3002\n\n\u6c42$A\\leq \\sum x_i \\leq B$\u7684\u6982\u7387\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u5f53$Y$\u5f88\u5927\u7684\u65f6\u5019\u8fd9\u4e2a\u6982\u7387\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u6210\u6b63\u6001\u5206\u5e03\u3002\n\n\u51fa\u9898\u4eba\u7ed9\u51fa\u4e86\u5176\u671f\u671b\u4e3a$\\mu = n\\frac {X-1}2$\uff0c\u65b9\u5dee\u4e3a$\\sigma^2 = n\\frac {X^2-1}{12}$\n\n\u7b49\u7b49\u4e3a\u4ec0\u4e48$n$\u4e2a\u53d8\u91cf\u548c\u7684\u65b9\u5dee\u53ea\u9700\u8981$\\times n$\uff1f\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20200701172428635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTUwMDA0,size_16,color_FFFFFF,t_70)\n~~\u4e3a\u4e86\u65b9\u4fbf\u8c03\u7528\u5e93\u51fd\u6570~~\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6b63\u6001\u5206\u5e03\u5316\u4e3a$N(0,1)$\u4e5f\u5373\u6807\u51c6\u6b63\u6001\u5206\u5e03\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u5c31\u662f\u8981\u6c42$N(0,1)$\u5728$\\frac {A - \\mu}{\\sigma} \\rightarrow \\frac {B - \\mu}{\\sigma}$\u7684\u548c\u3002\n\n$N(0,1)$\u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\uff1a$\\frac 1{\\sqrt {2\\pi}}\\int_0^xe^{\\frac {-t^2}2}{\\rm d}t$\n\n\u6362\u4e00\u4e0b\u5143$u = \\frac t{\\sqrt 2}$\n\n\u5219\u539f\u5f0f\u53d8\u4e3a$\\frac 1{\\sqrt {2\\pi}}\\sqrt 2\\int_0^{\\frac x{\\sqrt 2}}e^{-u^2}{\\rm d}u$\n\n\uff08\u56e0\u4e3a$\\int$\u7684\u8303\u56f4\u7f29\u5c0f\u4e86$\\sqrt 2$\u500d\u6240\u4ee5\u8981\u4e58\u4e0a$\\sqrt 2$\u3002\uff09\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20200701172952672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1OTUwMDA0,size_16,color_FFFFFF,t_70)\n\u6240\u4ee5\u539f\u5f0f\u4e3a$\\frac 12 {\\rm erf(\\frac x{\\sqrt 2})}$\uff0c\u5927\u8303\u56f4\u76f4\u63a5\u8ba1\u7b97\u3002\n\n\u5bf9\u4e8e\u5c0f\u8303\u56f4\u7684\u6570\u636e\u4e0d\u4e00\u5b9a\u662f\u5f88\u7b26\u5408\u6b63\u6001\u5206\u5e03\u7684\uff0c\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5c0f\u8303\u56f4\u5c31\u76f4\u63a5\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u5feb\u901f\u5e42\uff0c\n\n\u53d1\u73b0\u8fd9\u4e2a\u5e95\u6570\u591a\u9879\u5f0f\u7684\u6b21\u6570\u624d$20$\uff0c\n\n~~\u8fd9\u653e\u57282020\u5e74\u8fd8\u5199FFT\u5c31\u6709\u70b9\u95ee\u9898\u4e86~~\n\n\u76f4\u63a5$O(20Y)$\u6c42\u591a\u9879\u5f0f\u5feb\u901f\u5e42\u5373\u53ef\u3002\n\n$\\mathcal AC \\ Code$\n\n```cpp\n#include<bits/stdc++.h>\n#define db double\n#define rep(i,j,k) for(int i=(j),LIM=(k);i<=LIM;i++)\n#define per(i,j,k) for(int i=(j),LIM=(k);i>=LIM;i--)\nusing namespace std;\n\ndb X,Y,mu,sig;\n#define maxn 2500\ndb A[maxn],B[maxn],sm[maxn];\n\nint main(){\n\tint T;\n\tfor(scanf(\"%d\",&T);T--;){\n\t\tscanf(\"%lf%lf\",&X,&Y);\n\t\tif(X * Y <= 2000){\n\t\t\tB[0] = pow(1/X,Y);\n\t\t\trep(i,1,X*Y-1){\n\t\t\t\tB[i] = 0;\n\t\t\t\trep(j,1,min((int)X-1,i))\n\t\t\t\t\tB[i] += Y * j * B[i-j] - (i-j) * B[i-j];\n\t\t\t\tB[i] /= i;\n\t\t\t}\n\t\t\trep(i,0,X*Y-1) sm[i] = (i ? sm[i-1] : 0) + B[i];\n\t\t\tfor(int tim=1;tim<=10;tim++){\n\t\t\t\tint a,b;scanf(\"%d%d\",&a,&b);\n\t\t\t\tprintf(\"%.10lf\\n\",sm[b] - (a ? sm[a-1] : 0));\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tmu = (X-1) / 2 * Y , sig = sqrt((X*X-1) / 12 * Y);\n\t\t\tfor(int tim = 1;tim <= 10;tim++){\n\t\t\t\tint A,B;\n\t\t\t\tscanf(\"%d%d\",&A,&B);\n\t\t\t\tprintf(\"%.10lf\\n\",(erf((B - mu) / sig / sqrt(2)) - erf((A - 1 - mu) / sig / sqrt(2))) / 2);\n\t\t\t} \n\t\t}\n\t}\n}\n```\n",
        "postTime": 1593600928,
        "uid": 30037,
        "name": "Freopen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3779 \u3010[SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce\u3011"
    },
    {
        "content": "# [LG-P3779 [SDOI2017] \u9f99\u4e0e\u5730\u4e0b\u57ce](https://www.luogu.com.cn/problem/P3779) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=LG-P3779-Solution)\n\n### \u9898\u9762\n\n\u7ed9\u5b9a\u4e00\u4e2a $ m $ \u9762\u7684\u9ab0\u5b50\uff0c\u7b49\u6982\u7387\u4ea7\u51fa $ 0, 1, 2, \\cdots, m - 1 $\uff0c\u6295 $ n $ \u6b21\uff0c\u6c42\u6295\u51fa\u6765\u7684\u6570\u4e4b\u548c\u5728\u533a\u95f4 $ [A, B] $ \u7684\u6982\u7387\u3002\n\n### Solution\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u70b9\u524d\u7f6e\u77e5\u8bc6\uff1a\n\n**\u6b63\u6001\u5206\u5e03**\uff1a\u56fe\u5f62\u4e0d\u518d\u8d58\u8ff0\uff0c\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u968f\u673a\u53d8\u91cf $ X $ \u7684\u6b63\u6001\u5206\u5e03\u53ea\u9700\u8981\u5b83\u7684\u671f\u671b $ \\mu $ \u548c\u65b9\u5dee $ \\sigma^2 $ \u5373\u53ef\u63cf\u8ff0\uff0c\u8bb0\u4f5c $ N(\\mu, \\sigma^2) $\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u6070\u597d\u5bf9\u5e94\u7740\u9898\u5e72\u3002\n\n**\u6982\u7387\u5bc6\u5ea6\u51fd\u6570**\uff1a\u4f9d\u7136\u8003\u8651\u4e00\u4e2a\u968f\u673a\u53d8\u91cf $ X $\uff0c\u82e5\u5176\u4e3a\u79bb\u6563\u7684\u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u7b80\u5355\u7684\u6c42\u51fa\u4efb\u610f\u70b9\u7684\u6982\u7387\u3002\u4f46\u82e5\u5176\u4e3a\u8fde\u7eed\u578b\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u7684\u6982\u7387\u5728\u6781\u9650\u610f\u4e49\u4e0b\u4e3a $ 0 $\uff0c\u7136\u7136\u800c\u67e5\u8be2\u4e00\u6bb5\u533a\u95f4\u7684\u65f6\u5019\u663e\u7136\u4e0d\u4e3a $ 0 $\uff0c\u6240\u4ee5\u6211\u4eec\u4fbf\u5f15\u5165\u4e86\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6765\u63cf\u8ff0\u8fd9\u4e2a\u6982\u7387\uff0c\u5bf9\u4e8e\u968f\u673a\u53d8\u91cf $ X $ \u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 $ f(x) $\uff0c\u9700\u8981\u6ee1\u8db3 $ f(x) $ \u5728\u533a\u95f4\u5185\u7684\u79ef\u5206\u7b49\u4e8e $ X $ \u843d\u5728\u8be5\u533a\u95f4\u7684\u6982\u7387\u3002\n\n\u7136\u540e\u6709\u4e2a\u7ed3\u8bba\uff1a\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a\n$$\nf(x) = \\dfrac{1}{\\sqrt{2 \\pi \\sigma^2}}e^{-\\tfrac{(x - \\mu)^2}{2\\sigma^2}}\n$$\n\u5173\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u7684\u8bc1\u660e\u3002\u3002\u3002\u5b8c\u5168\u4e0d\u662f\u4eba\u770b\u7684\uff0c\u4f3c\u4e4e\u53ea\u80fd\u5f3a\u884c\u8bb0\u4e0b\u6765\u8fd9\u4e2a\u516c\u5f0f\u3002\u3002\u3002\u5982\u679c\u4f60\u4e00\u5b9a\u8981\u770b\u4e00\u4e0b\u8bc1\u660e\uff0c\u7f51\u4e0a\u5012\u662f\u4e5f\u6709\u4e00\u4e2a [\u6b63\u6001\u5206\u5e03\u63a8\u5bfc\u8fc7\u7a0b](https://zhuanlan.zhihu.com/p/52808762)\u3002\n\n\u7136\u540e\u8fd8\u6709\u5c31\u662f C++ \u5e93\u91cc\u81ea\u5e26\u4e86\u4e2a `erf` \u548c `erfc`\uff0c\u5927\u6982\u6c42\u7684\u662f\u8bef\u5dee\u51fd\u6570\u7684\u79ef\u5206\u548c\u4e92\u8865\u8bef\u5dee\u51fd\u6570\u4e4b\u7c7b\u7684\uff0c\uff08~~\u6211\u4e0d\u4f1a~~\uff09\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u770b\u770b\u3002\n\n\u7136\u540e\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u591f\u8bc1\u660e\u672c\u9898\u8fd9\u73a9\u610f\u662f\u6b63\u6001\u5206\u5e03\u7684\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u5bf9\u8fd9\u4e2a $ f(x) $ \u505a\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\uff0c\u6c42\u4e00\u4e0b\u79ef\u5206\u5c31\u884c\u4e86\u3002\n\n**\u72ec\u7acb\u540c\u5206\u5e03**\uff1a\u9996\u5148\u72ec\u7acb\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u5c31\u662f\u4e24\u4e2a\u968f\u673a\u53d8\u91cf\u4e4b\u95f4\u65e0\u5f71\u54cd\uff0c\u548c\u9ad8\u4e2d\u6570\u5b66\u91cc\u9762\u7684\u72ec\u7acb\u4e8b\u4ef6\u5dee\u4e0d\u591a\u3002\u7136\u540e\u540c\u5206\u5e03\u5c31\u662f\u6307\u4e00\u4e9b\u968f\u673a\u53d8\u91cf\u670d\u4ece\u76f8\u540c\u7684\u5206\u5e03\u3002\n\nTips\uff1a\u6982\u7387\u8bba\u4e2d $ E(X) $ \u8868\u793a\u671f\u671b\uff0c$ D(X) $ \u8868\u793a\u65b9\u5dee\u3002\n\n**\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406**\uff1a\u5bf9\u4e8e $ n $ \u4e2a\u72ec\u7acb\u540c\u5206\u5e03\uff08\u5982\u672c\u9898\u4e2d\u7684\u76f8\u540c\u9ab0\u5b50\uff09\u7684\u968f\u673a\u53d8\u91cf $ X_1, X_2, \\cdots, X_n $\uff0c\u82e5 $ E(X_i) = \\mu, D(X_i) = \\sigma^2 $\uff0c\u4ee4\uff1a\n$$\nY_n = \\dfrac{\\sum_{i = 1}^n X_i - n\\mu}{\\sqrt{n\\sigma^2}}\n$$\n\u82e5 $ n $ \u8db3\u591f\u5927\uff0c\u5219\u6211\u4eec\u8ba4\u4e3a $ Y_n \\sim N(0, 1) $\u3002\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u5e38\u7528\u63a8\u8bba\uff0c\u5f53\u7136\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u6b63\u6001\u5206\u5e03\u7684\u4e00\u70b9\u8fd0\u7b97\u89c4\u5219\uff0c\u5373\uff1a\n\n\u82e5 $ X \\sim N(a, b) $ \u5219 $ cX \\sim N(ca, c^2b) $\uff0c\u4ece\u671f\u671b\u548c\u65b9\u5dee\u7684\u610f\u4e49\u4e0d\u96be\u7406\u89e3\u3002\n\n\u82e5 $ X \\sim N(a, b) $ \u5219 $ X + c \\sim N(a + c, b) $\uff0c\u540c\u7406\u4e0d\u96be\u5f97\u51fa\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u521a\u624d\u7684\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u5f0f\u5b50\u8f6c\u5316\u4e3a\uff1a\n$$\n\\sum_{i = 1}^nX_i \\sim N(n\\mu, n\\sigma^2)\n$$\n\u4e5f\u5c31\u662f\u8bf4\uff0c**\u672c\u9898\u91cc\u6c42\u7684\u8fd9\u4e9b\u9ab0\u5b50\u7684\u70b9\u6570\u548c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f $ n $ \u4e2a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u548c**\uff0c\u6240\u4ee5\u4e00\u5b9a\u670d\u4ece $ N(n\\mu, n\\sigma^2) $\uff0c\u7528\u6211\u4eec\u521a\u624d\u5199\u7684\u6b63\u6001\u5206\u5e03\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5e26\u8fdb\u53bb\u8fd9\u4e2a\u671f\u671b\u548c\u65b9\u5dee\u7136\u540e\u6c42\u4e2a\u79ef\u5206\u5373\u53ef\u3002\n\n\u7136\u540e\u53d1\u73b0\u8fd9\u4e1c\u897f\u5957\u4e2a\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u5c31\u53ef\u4ee5\u5728 $ O(\\texttt{\u7384\u5b66}) $ \u7684\u590d\u6742\u5ea6\u5b8c\u6210\u3002\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u8fd8\u6709\u70b9\u95ee\u9898\uff0c\u5c31\u662f\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u9700\u8981\u4e00\u4e2a\u524d\u63d0\uff0c$ n $ \u8db3\u591f\u5927\uff0c\u5bf9\u4e8e\u4e00\u4e9b $ n = 1 $ \u4e4b\u7c7b\u7684\u6570\u636e\u70b9\u7528\u8fd9\u4e2a\u5c31\u663e\u7136\u5bc4\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u4e00\u4e9b\u6570\u636e\u70b9\u5206\u6cbb\u7684\u505a\u6cd5\u3002\n\n\u663e\u7136\u5bf9\u4e8e $ n $ \u8f83\u5c0f\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u591a\u9879\u5f0f\uff0c\u591a\u9879\u5f0f $ i $ \u6b21\u65b9\u9879\u7684\u7cfb\u6570\u4e3a\u9ab0\u5b50\u503c\u4e3a $ i $ \u7684\u6982\u7387\uff0c\u663e\u7136\u5f53 $ n = 1 $ \u65f6\uff0c\u5047\u8bbe\u9ab0\u5b50\u9762\u6570\u4e3a $ m $\uff0c\u4e0d\u96be\u60f3\u5230\u591a\u9879\u5f0f\u4e3a $ \\dfrac{1}{m}x^{m - 1} + \\dfrac{1}{m}x^{m - 2} + \\cdots + \\dfrac{1}{m}x^1 + \\dfrac{1}{m}x^0 $\u3002\u7136\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u5bf9\u4e8e\u5176\u5b83\u7684 $ n $ \u7ed3\u679c\u5c31\u662f\u8fd9\u4e2a\u591a\u9879\u5f0f\u7684 $ n $ \u6b21\u65b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528 FFT \u4f18\u5316\u4e00\u4e0b\u7136\u540e\u5728\u7ed3\u679c\u91cc\u6c42\u51fa\u6307\u6570\u5728 $ [A, B] $ \u4e4b\u95f4\u7684\u7cfb\u6570\u548c\u5373\u53ef\uff0c\u8fd9\u4e1c\u897f\u53ef\u4ee5\u7528\u591a\u9879\u5f0f\u5feb\u901f\u5e42\u4f18\u5316\uff08\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u4e0d\u7b97\u662f\u591a\u9879\u5f0f\u5feb\u901f\u5e42\uff0c\u56e0\u4e3a\u6700\u7ec8\u591a\u9879\u5f0f\u603b\u957f\u5ea6\u8f83\u5c0f\uff0c\u6240\u4ee5\u5728\u6b63\u5e38 FFT \u65f6\u5199\u4e2a\u590d\u6570\u7684\u5feb\u901f\u5e42\u5c31\u884c\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u4e00\u4e0b\uff0c\u663e\u7136\u591a\u9879\u5f0f\u521d\u59cb\u9879\u6570\u6700\u591a\u4e3a $ m $\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $ O(nm \\log nm) $\uff0c\u5e38\u6570\u4e0d\u5c0f\uff0c\u7136\u540e $ nm $ \u662f $ 4e6 $ \u7ea7\u522b\u7684\uff0c\u603b\u4e4b $ nm \\le 1e5 $ \u5e94\u8be5\u4e0d\u6210\u95ee\u9898\uff0c\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u7684\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u4e00\u822c\u8981\u6c42 $ n \\ge 30 $ \u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7406\u8bba\u4e0a\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\nTips\uff1a\u4ec5\u7528\u591a\u9879\u5f0f\u5feb\u901f\u5e42\u671f\u671b\u5f97\u5206 60~70\u3002\n\nupd\uff1a\u4e0a\u8ff0\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u4e86\uff0c\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u4e0d\u8981\u5fd8\u8bb0**\u5728\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u7684\u8fc7\u7a0b\u4e2d\u9650\u5236\u5c42\u6570**\uff0c\u540e\u6587\u662f\u6211\u6700\u5f00\u59cb\u5199\u8fd9\u9053\u9898\u65f6\u7684\u56e0\u4e3a\u6ca1\u6709\u9650\u5236\u5c42\u6570\u7684\u4e00\u4e9b\u8bef\u533a\u4e0e\u53e6\u4e00\u79cd\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n\n---\n\n\u5982\u679c\u4e0d\u5728\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u4e2d\u9650\u5236\u5c42\u6570\uff0c\u90a3\u4e48\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff0c\u539f\u56e0\u9664\u6b64\u4e4b\u5916\u8fd8\u53ef\u80fd\u56e0\u62df\u5408 $ N(0, 1) $ \u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4f1a\u6bd4\u62df\u5408 $ N(n\\mu, n\\sigma^2) $ \u7cbe\u5ea6\u66f4\u9ad8\u4e00\u70b9\uff0c\u53ef\u80fd\u56e0\u4e3a $ n\\mu $ \u548c $ n\\sigma^2 $ \u7684\u503c\u57df\u8303\u56f4\u592a\u5927\u4e86\uff0c\u518d\u52a0\u4e0a\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u672c\u6765\u7cbe\u5ea6\u5c31\u5f88\u7384\u5b66\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u6700\u7ec8\u7b54\u6848\u7cbe\u5ea6\u7206\u70b8\u3002\n\n\u603b\u4e4b\u8fd8\u53ef\u4ee5\u8003\u8651\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5373\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\u7684\u521d\u59cb\u5f0f\u5b50\uff1a\n$$\nY_n = \\dfrac{\\sum_{i = 1}^n X_i - n\\mu}{\\sqrt{n\\sigma^2}}\n$$\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u77e5\u9053\u4e86\u9650\u5b9a\u7684 $ \\sum_{i = 1}^n X_i $ \u7684\u8303\u56f4\uff0c\u4e5f\u5c31\u53ef\u4ee5\u5e26\u8fdb\u5f0f\u5b50\u91cc\u76f4\u63a5\u63a8\u51fa $ Y_n $ \u7684\u8303\u56f4\uff0c\u7136\u540e\u7528\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u8dd1\u4e00\u4e0b $ N(0, 1) $ \u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u56e0\u4e3a $ Y_n \\sim N(0, 1) $\uff0c\u6240\u4ee5\u6c42\u51fa\u5bf9\u5e94\u8303\u56f4\u4e4b\u540e\u76f4\u63a5\u6c42 $ N(0, 1) $ \u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5728\u65b0\u8303\u56f4\u91cc\u7684\u79ef\u5206\u5373\u4e3a\u7b54\u6848\u3002~~\u4e0d\u8fc7\u8fd9\u6837\u4f1a\u53d1\u73b0\u4f9d\u7136\u662f\u9519\u8bef\u7684~~\u5982\u679c\u5728\u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u4e2d\u9650\u5236\u5c42\u6570\u90a3\u4e48\u5c31\u6ca1\u6709\u95ee\u9898\u4e86\u3002\n\n\u68c0\u67e5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6b63\u6001\u5206\u5e03\u4e2d\uff0c\u5728\u89d2\u843d\u53ef\u80fd\u5f88\u5c0f\uff0c\u4ece\u800c\u5bfc\u81f4 $ [l, mid], [mid, r], [l, r] $ \u90fd\u5f88\u5c0f\uff0c\u4ece\u800c\u76f4\u63a5\u8fd4\u56de $ 0 $\uff0c\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u62df\u5408\u7684\u8bef\u5dee\u8fc7\u5927\uff0c\u4e8e\u662f\u8003\u8651\u6bcf\u6b21\u6c42\u8303\u56f4 $ [A, B] $ \u7684\u65f6\u5019\u5206\u522b\u62df\u5408 $ [0, A] $ \u548c $ [0, B] $\uff0c\u7136\u540e\u7528 $ [0, B] $ \u7684\u503c\u51cf\u53bb $ [0, A] $ \u7684\uff0c\u8fd9\u6837\u662f\u7b49\u6548\u7684\uff0c\u4e14\u4f1a\u66f4\u591a\u7684\u5f15\u5165\u8f83\u5927\u7684\u503c\u4f7f\u5f97\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u6539\u6210\u6b64\u65b9\u6cd5\u540e\u5373\u4f7f\u4e0d\u9650\u5236\u5c42\u6570\u4e5f\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\nTips\uff1a\u4ee3\u7801\u4e2d\u6ce8\u91ca\u90e8\u5206\u5373\u4e3a\u540e\u534a\u90e8\u5206\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define comp complex < ld >\n#define DFT (true)\n#define IDFT (false)\n#define EPS (ld)(1e-10)\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, M;\n\ncomp comp_qpow(comp a, ll b){\n    comp ret(1.0, 0.0), mul(a);\n    while(b){\n        if(b & 1)ret = ret * mul;\n        b >>= 1;\n        mul = mul * mul;\n    }return ret;\n}\n\nclass Polynomial{\nprivate:\npublic:\n    int len;\n    comp A[2100000];\n    comp Omega(int n, int k, bool pat){\n        if(pat == DFT)return comp(cos(2 * PI * k / n), sin(2 * PI * k / n));\n        return conj(comp(cos(2 * PI * k / n), sin(2 * PI * k / n)));\n    }\n    void Reverse(comp* pol){\n        int pos[len + 10];\n        memset(pos, 0, sizeof pos);\n        for(int i = 0; i < len; ++i){\n            pos[i] = pos[i >> 1] >> 1;\n            if(i & 1)pos[i] |= len >> 1;\n        }\n        for(int i = 0; i < len; ++i)if(i < pos[i])swap(pol[i], pol[pos[i]]);\n    }\n    void FFT(comp* pol, int len, bool pat){\n        Reverse(pol);\n        for(int siz = 2; siz <= len; siz <<= 1)\n            for(comp* p = pol; p != pol + len; p += siz){\n                int mid = siz >> 1;\n                for(int i = 0; i < mid; ++i){\n                    auto tmp = Omega(siz, i, pat) * p[i + mid];\n                    p[i + mid] = p[i] - tmp, p[i] = p[i] + tmp;\n                }\n            }\n        if(pat == IDFT)\n            for(int i = 0; i <= len; ++i)\n            A[i].real(A[i].real() / (ld)len), A[i].imag(A[i].imag() / (ld)len);\n    }\n    void MakeFFT(void){\n        FFT(A, len, DFT);\n        for(int i = 0; i < len; ++i)A[i] = comp_qpow(A[i], N);\n        FFT(A, len, IDFT);\n    }\n}poly;\n\nld mu, sigma2;\n\nld f(ld x){\n    return exp(-(x - mu) * (x - mu) / 2.0 / sigma2) / sqrt(2.0 * PI * sigma2);\n}\nld Simpson(ld a, ld b){\n    return (b - a) * (f(a) + f(b) + 4 * f((a + b) / 2.0)) / 6.0;\n}\nld Adaptive(ld l, ld r, ld cur, ld eps = 1e-6, ll dep = 1){\n    ld mid = (l + r) / 2.0;\n    ld lval = Simpson(l, mid), rval = Simpson(mid, r);\n    if(dep >= 10 && fabs(lval + rval - cur) <= eps * 15.0)return lval + rval + (lval + rval - cur) / 15.0;\n    return Adaptive(l, mid, lval, eps / 2.0, dep + 1) + Adaptive(mid, r, rval, eps / 2.0, dep + 1);\n}\n\nint main(){\n    int T = read();\n    while(T--){\n        M = read(), N = read();\n        if(N * M <= (int)1e5){\n            memset(poly.A, 0, sizeof poly.A);\n            for(int i = 0; i <= M - 1; ++i)\n                poly.A[i].real((ld)1.0 / (ld)M), poly.A[i].imag(0.0);\n            poly.len = 1;\n            while(poly.len <= N * M)poly.len <<= 1;\n            poly.MakeFFT();\n            for(int i = 1; i <= 10; ++i){\n                int A = read(), B = read();\n                ld ans(0.0);\n                for(int j = A; j <= B; ++j)ans += poly.A[j].real();\n                printf(\"%.10Lf\\n\", ans);\n            }\n        }else{\n            // mu = 0.0, sigma2 = 1.0;\n            // ld real_mu = (ld)(M - 1) / 2.0;\n\t\t\t// ld real_sig = ((ld)M * M - 1.0) / 12.0;\n            // for(int i = 1; i <= 10; ++i){\n            //     int A = read(), B = read();\n            //     ld L = (ld)((ld)A - N * real_mu) / sqrt(N * real_sig);\n            //     ld R = (ld)((ld)B - N * real_mu) / sqrt(N * real_sig);\n            //     printf(\"%.8Lf\\n\", Adaptive((ld)L, (ld)R, Simpson(L, R)));\n            //     // printf(\"%.8Lf\\n\", Adaptive((ld)0, (ld)R, Simpson(0, R)) - Adaptive((ld)0, (ld)L, Simpson(0, L)));\n            // }\n\n            mu = (ld)N * (ld)(M - 1) / 2.0;\n            sigma2 = (ld)N * (ld)((ll)M * M - 1) / 12.0;\n            for(int i = 1; i <= 10; ++i){\n                int A = read(), B = read();\n                printf(\"%.8Lf\\n\", Adaptive((ld)A, (ld)B, Simpson(A, B)));\n            }\n        }\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_12_10 \u521d\u7a3f\n\nupdate-2023_02_01 fix \u521d\u7a3f\u4e2d\u7684\u4e00\u4e9b\u9519\u8bef\u4e0e\u4e0d\u4e25\u8c28\u7684\u8868\u8ff0",
        "postTime": 1670667396,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P3779 [SDOI2017] \u9f99\u4e0e\u5730\u4e0b\u57ce \u9898\u89e3"
    },
    {
        "content": "\n$dp$\u65b9\u7a0b\u5f88\u7b80\u5355\uff0c\u8bbe$f[i][j]$\u4e3a\u5230\u7b2c$i$\u7684\u9ab0\u5b50\uff0c\u4e00\u5171\u6709$j$\u70b9\u6570\u7684\u6982\u7387  \n\u8f6c\u79fb  \n$$f[i][j] = \\sum\\limits_{k=0}^{\\min(j,x-1)}f[i-1][j-k]\\times \\frac{1}{n}$$\n$fft$\u5377\u79ef+\u5feb\u901f\u5e42\u4e4b\u540e\u636e\u8bf4\u662f$70$\u7684\u5206\uff0c\u7136\u540e\u6211\u7684\u8fa3\u9e21$fft$\u5c31\u62ff\u4e86$60$  \n\n\u7136\u540e\u53d1\u73b0\u6ca1\u7528\u5230\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u671f\u671b$\\mu$\u548c\u65b9\u5dee$\\sigma$\u3002  \n\u77e5\u4e4e\u4e0a\u8bf4\u51fa\u9898\u4eba\u4ee5**\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406**\u4f5c\u4e3a\u7406\u8bba\u5206\u6790\u7684\u57fa\u7840\u51fa\u4e86\u8fd9\u4e48\u4e00\u9053\u9898  \n\u5b66\u4e60\u4e00\u4e0b\u6b63\u6001\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\n$$f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}\\times \\exp(-\\frac{(x-\\mu)^2}{2\\sigma^2})$$  \n\u7528$simpson$\u79ef\u5206\u5f3a\u884c\u79ef\u8d77\u6765\u3002  \n\u4f46\u662f\u8fd9\u6837\u7cbe\u5ea6\u8fd8\u662f\u592a\u4f4e\uff0c\u628a\u6b63\u6001\u5206\u5e03\u8f6c\u6362\u6210\u6807\u51c6\u6b63\u6001\u5206\u5e03\u3002\u600e\u4e48\u641e\u53ef\u4ee5\u70b9[\u8fd9\u4e2a](https://www.baidu.com/)\u3002  \n\u6807\u51c6\u6b63\u6001\u5206\u5e03\u4e0b$\\mu=0$\uff0c$\\sigma=1$\u3002\n$$f(x)=\\frac{1}{\\sqrt{2\\pi}}\\times \\exp(-\\frac{x^2}{2})$$  \n\u518d\u53bb\u79ef\u5206\uff0c\u8fd9\u91cc\u76f4\u63a5\u4ea4\u79ef\u5206\u7684\u4ee3\u7801\u6211\u662f$5$\u5206\uff0c\u56e0\u4e3a\u7cbe\u5ea6\u592a\u4f4e\u3002\u3002\u3002  \n\u4e8e\u662f\u5c0f\u6570\u636e\u5f3a\u884c$fft$\u4f18\u5316$dp$\uff0c\u5927\u6570\u636e\u5f3a\u884c$simpson$\u5bf9\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u79ef\u5206\u3002  \n\u5c31A\u4e86  \n\u6211\u8ba4\u4e3a\u662f\u6211\u7684\u4ee3\u7801\u592a\u70c2\uff0c\u56e0\u4e3a\u77e5\u4e4e\u4e0a\u8fd8\u8bf4\u9a8c\u9898\u4eba$10$\u884c\u4ee3\u7801AC\u3002\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read()\n{\n    int x = 0, f = 1; char ch = getchar();\n    while (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\n    while (isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x * f;\n}\n#define db double\nconst db pi2 = sqrt(2.0 * acos(-1));\nconst db eps = 1e-13;\ndb sigma, mu;\ndb x, y;\ndb f(db x) { return exp(-x * x / 2) / pi2; }\ndb simpson(db l, db k, db r)\n{\n    db lk = (l + k) / 2;\n    db kr = (k + r) / 2;\n    db fl = f(l);\n    db fr = f(r);\n    db fk = f(k);\n    db flk = f(lk);\n    db fkr = f(kr);\n    db ansl = (k - l) * (fl + fk + 4 * flk) / 6;\n    db ansr = (r - k) * (fk + fr + 4 * fkr) / 6;\n    db anslr = (r - l) * (fl + fr + 4 * fk) / 6;\n    if (fabs(ansl + ansr - anslr) < 15 * eps)\n        return ansl + ansr + (ansl + ansr - anslr) / 15;\n    else\n        return simpson(l, lk, k) + simpson(k, kr, r);\n}\nvoid solve_simpson()\n{\n    mu = (x - 1) / 2;\n    sigma = sqrt((x * x - 1) / 12);\n    for (int i = 1; i <= 10; i++)\n    {\n        db a, b;\n        scanf(\"%lf%lf\", &a, &b);\n        a = ((a - 0.5) / y - mu) * sqrt(y) / sigma;\n        b = ((b + 0.5) / y - mu) * sqrt(y) / sigma;\n        printf(\"%.8lf\\n\", simpson(0, b / 2, b) - simpson(0, a / 2, a));\n    }\n}\n#define cpx complex<double>\nconst db pi = acos(-1);\nconst int MAX = 810000;\ncpx a[MAX], b[MAX];\nint rev[MAX];\ndb ans[MAX];\nvoid fft(cpx *a, int N, int f)\n{\n    for (int i = 0; i < N; i++)\n        if (i < rev[i])\n            swap(a[i], a[rev[i]]);\n    for (int i = 1; i < N; i <<= 1)\n    {\n        cpx wn(cos(pi / i), f * sin(pi / i));\n        for (int j = 0; j < N; j += (i << 1))\n        {\n            cpx w(1, 0);\n            for (int k = 0; k < i; k++)\n            {\n                cpx x = a[j + k], y = w * a[j + k + i];\n                a[j + k] = x + y;\n                a[j + k + i] = x - y;\n                w = w * wn;\n            }\n        }\n    }\n    if (f == -1)\n        for (int i = 0; i < N; i++)\n            a[i] = a[i] / (db)N;\n}\nvoid solve_fft()\n{\n    db p = 1.0 / (db)x;\n    int N = 0, l = 0;\n    for (N = 1, l = 0; N < (x * y); N <<= 1)\n        l++;\n    for (int i = 0; i < N; i++)\n        rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (l - 1));\n    for (int i = 0; i < N; i++)\n        a[i] = b[i] = 0.0;\n    a[0] = 1.0;\n    for (int i = 0; i < x; i++)\n        b[i] = p;\n    fft(a, N, 1); fft(b, N, 1);\n    for (int i = 0; i < N; i++)\n    {\n        for (int kk = y; kk; b[i] = b[i] * b[i], kk >>= 1)\n            if (kk & 1)\n                a[i] = a[i] * b[i];\n    }\n    fft(a, N, -1);\n    ans[0] = a[0].real();\n    for (int i = 1; i < N; i++)\n        ans[i] = ans[i - 1] + a[i].real();\n    for (int i = 1; i <= 10; i++)\n    {\n        int A = read(), B = read();\n        printf(\"%.8lf\\n\", A == 0 ? ans[B] : ans[B] - ans[A - 1]);\n    }\n}\nint main()\n{\n    int T;\n    scanf(\"%d\", &T);\n    while (T--)\n    {\n        scanf(\"%lf%lf\", &x, &y);\n        if (x * y <= 400000)\n            solve_fft();\n        else\n            solve_simpson();\n    }\n    return 0;\n}\n```\n\n```\n\u8865\u5145\u3002\u3002  \nfft\u540e\u6c42\u524d\u7f00\u548c\uff0c\u76f4\u63a5\u7528std::complex<double>\u6c42\u524d\u7f00\u548c\u7cbe\u5ea6\u7206\u70b8\u53ea\u67095\u5206\n\u8d4b\u503c\u5230double[]\u91cc\u9762\u5c31\u597d\u4e86\u3002\n\u90fd\u662fdouble\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\u3002\nsimpson\u79ef\u5206\u76f4\u63a5\u79ef(a, b) 80\u5206\n\u5199\u6210(0, b) - (0, a) AC\n\u6211\u8fd8\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\u3002\n```",
        "postTime": 1520677742,
        "uid": 37070,
        "name": "Ameyax",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3779 \u3010[SDOI2017]\u9f99\u4e0e\u5730\u4e0b\u57ce\u3011"
    }
]