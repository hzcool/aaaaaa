[
    {
        "content": "\u8bb0$c(x,y)\u200b$\u8868\u793a\u8fb9\u6743\u3002\n\n\u5bf9$T_2$\u8fdb\u884c\u70b9\u5206\u6cbb\n\n\u8bbe$x,y$\u5728\u5f53\u524d\u70b9\u5206\u6811\u4e2d\u5230\u6839\u7684\u8ddd\u79bb\u4e3a$dep_x,dep_y$\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a$(x,y)$\u7684\u8fb9\u6743\u4e3a$dist_1(x,y)+dep_x+dep_y$\n\n\u56e0\u4e3a\uff0c\u82e5\u5728\u5f53\u524d\u70b9\u5206\u6811\u4e2d\uff0c$lca(x,y)$\u7b49\u4e0e\u70b9\u5206\u6811\u7684\u91cd\u5fc3\uff0c\u90a3\u4e48\u4e0a\u5f0f\u662f\u6210\u7acb\u7684\uff0c\u5426\u5219$c(x,y)\\leq dist_1(x,y)+dep_x+dep_y$\n\n\u771f\u5b9e\u7684$c(x,y)$\u4f1a\u9012\u5f52\u8fdb\u4e0b\u4e00\u4e2a\u70b9\u5206\u6811\u88ab\u8003\u8651\u5230\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2a\u5f0f\u5b50\u4f9d\u7136\u6210\u7acb\uff0c\u5bf9\u7b54\u6848\u4e0d\u4f1a\u6709\u5f71\u54cd\n\n\u90a3\u4e48\u6211\u4eec\u5e0c\u671b\u5728\u5f53\u524d\u70b9\u5206\u6811\u7684\u610f\u4e49\u4e0b\u5220\u9664\u4e00\u4e9b\u4e00\u5b9a\u4e0d\u4f1a\u5bf9\u6700\u7ec8\u7b54\u6848\u6709\u8d21\u732e\u7684$(x,y)$\n\n\u8003\u8651\u4ee5\u4e0b\u7b97\u6cd5\uff1a\n\n1.\u9996\u5148\u6c42\u51fa\u5f53\u524d\u70b9\u5206\u6811\u4e2d\u7684\u70b9\uff0c\u5728$T_1$\u5f53\u4e2d\u7684\u865a\u6811\u3002\n\n2.\u5bf9\u4e8e\u6240\u6709\u5f53\u524d\u70b9\u5206\u6811\u4e2d\u7684\u70b9$x$,\u5efa\u7acb\u65b0\u70b9$x'$,\u5728\u865a\u6811\u4e0a\u52a0\u4e00\u6761$(x,x')$\u8fb9\uff0c\u8fb9\u6743\u4e3a$dep_x$\uff0c\u6211\u4eec\u79f0$mp[x']=x$,\u6211\u4eec\u79f0\u6240\u6709\u8fd9\u6837\u7684$x'$\u4e3a\u6e90\u70b9\n\n3.\u8dd1\u4e24\u904d\u6811$dp$,\u5bf9\u4e8e\u865a\u6811\u4e0a\u6bcf\u4e2a\u70b9$y$\uff0c\u8bb0\u5f55$pre[y]$\u8868\u793a\u79bb$y$\u6700\u8fd1\u7684\u6e90\u70b9\uff08\u5982\u679c\u6709\u591a\u4e2a\u6700\u8fd1\u7684\u968f\u4fbf\u8bb0\u4e00\u4e2a\u5373\u53ef\uff09\uff0c$dist[y]$\u8868\u793a$pre[y]$\u4e0e$y$\u7684\u8ddd\u79bb\n\n4.\u679a\u4e3e\u865a\u6811\u4e2d\u6bcf\u4e00\u6761\u8fb9$(a,b)$\uff0c\u5c06$(mp[pre[a]],mp[pre[b]],dist[a]+dist[b]+l(a,b))$\uff0c$l$\u8868\u793a\u865a\u6811\u4e0a\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u3002\u8fd9\u6761\u8fb9\u52a0\u5165\u5019\u9009\u8fb9\u96c6\n\n\u6240\u6709\u70b9\u5206\u6811\u7684\u6240\u6709\u5019\u9009\u8fb9\u96c6\u5927\u5c0f\u603b\u5171$O(n\\log n)$\uff0c\u5bf9\u8fd9\u4e9b\u8fb9\u8fdb\u884c$kruskal$\u7b97\u6cd5\uff0c\u5373\u53ef\u7b97\u51fa\u7b54\u6848\u3002\n\n\u4f7f\u7528\u9884\u5904\u7406$ST$\u8868\u6c42$lca$\u53ef\u5728$O(n\\log n)$\u9009\u51fa\u5019\u9009\u8fb9\u96c6\u3002\n\n\u7b97\u6cd5\u6b63\u786e\u6027\u8bc1\u660e\u8bf7\u8bfb\u8005\u81ea\u884c\u601d\u8003\u3002\n\n\u7b97\u6cd5\u590d\u6742\u5ea6$O(n\\log n+n\\log n\\log (n\\log n))$\n\n\u540e\u9762\u90a3\u7b2c\u4e8c\u4e2a$\\log$\u53ea\u662f\u7ed9$n\\log n$\u6761\u8fb9\u6392\u5e8f\u7684\u590d\u6742\u5ea6\uff0c\u4f17\u6240\u5468\u77e5$sort$\u6392\u5e8f\u662f\u5f88\u5feb\u7684\uff0c\u56e0\u6b64\u6b64\u7b97\u6cd5\u53ef\u5728\u4e00\u5b9a\u610f\u4e49\u4e0a\u8ba4\u4e3a\u662f$O(n\\log n)$\u3002$std$\u662f\u57fa\u4e8e\u8fd9\u79cd\u505a\u6cd5\uff0c\u56e0\u6b64\u5f88\u591a\u4f7f\u7528$boruvka$\u7b97\u6cd5\u6216\u5176\u4ed6\u505a\u6cd5\u7684$O(n\\log^2n)$\u53ef\u80fd\u4f1a\u88ab\u5361\u5e38\uff0c\u5b9e\u9645\u4e0a\u65f6\u9650\u975e\u5e38\u5bbd\u677e\u3002\n\n\u6309\u7167\u6b64\u7b97\u6cd5\uff0c$atcoder$\u4e0a\u7684\u90a3\u4e2a\u5b50\u95ee\u9898\u53ef\u505a\u5230$O(n)$",
        "postTime": 1583974024,
        "uid": 51879,
        "name": "\u68a6\u68a6\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6199 \u3010[EER1]\u6cb3\u7ae5\u91cd\u5de5\u3011"
    },
    {
        "content": "\u8ddf\u51fa\u9898\u4eba\u4ea4\u6d41\u4e86\u4e00\u4e0b\u4e0d\u592a\u6e05\u695a\u4e3a\u4ec0\u4e48\u8dd1\u5f97\u975e\u5e38\u6162\uff0c\u53ef\u80fd\u662f\u6709\u4e9b\u4e1c\u897f\u5199\u6302\u4e86\uff0c\u6709\u7a7a\u6765 debug \u4e00\u4e0b\u5361\u5361\u5e38\u6570\u3002\u5e78\u4e8f\u51fa\u9898\u4eba\u5f00\u4e86 4s \u8981\u4e0d\u7136\u5f53\u573a\u66b4\u6bd9\u3002\n\n---\n\n\u9898\u76ee\u7b80\u8ff0\uff1a\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\u548c\u4e24\u68f5\u6811\uff0c\u56fe\u4e0a $(i,j)$ \u8fb9\u6743\u7b49\u4e8e $dist_1(i,j) + dist_2(i,j)$\uff0c$dist_p(i,j)$ \u8868\u793a\u7b2c $p$ \u68f5\u6811\u4e0a\u4e24\u70b9\u8ddd\u79bb\u3002\u4f60\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u3002\n\n$n \\leq 10^5$\n\n---\n\nsub-problem\uff1a[Here](https://www.luogu.com.cn/problem/AT3611)\n\n\u4f7f\u7528 Boruvka \u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\u5728\u6bcf\u4e00\u5c42\u4e2d\u6211\u4eec\u9700\u8981\u627e\u5230\u6bcf\u4e00\u4e2a\u5df2\u7ecf\u5f62\u6210\u7684\u8fde\u901a\u5757\u4e0e\u8fd9\u4e2a\u8fde\u901a\u5757\u5916\u7684\u67d0\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u8fde\u63a5\u7684\u8fb9\u7684\u6700\u5c0f\u6743\u503c\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u8ba1\u7b97\u4e0e\u8fd9\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u7684\u6240\u6709\u70b9\u4e0e\u5b83\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u3002\n\n\u6ce8\u610f\u5230\u4e0e\u56fe\u4e0a\u8ddd\u79bb\u76f8\u5173\u7684\u662f\u4e24\u68f5\u6811\u7684\u8ddd\u79bb\uff0c\u89c1\u5230\u8fd9\u79cd\u8d21\u732e\u4e0e\u591a\u68f5\u6811\u76f8\u5173\u7684\u95ee\u9898 $99.9\\%$ \u8981\u5728\u4e00\u68f5\u6811\u4e0a\u6811\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u68f5\u6811\u70b9\u5206\u6cbb\uff0c\u8003\u8651\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u6240\u6709\u8def\u5f84\u7684\u8d21\u732e\u3002\u6ce8\u610f\u5230\u8fdb\u884c\u70b9\u5206\u6cbb\u540e\uff0c\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u7684\u4e00\u6761\u7a7f\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u8def\u5f84\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u4e24\u6761\u8def\u5f84\uff0c\u800c\u8fd9\u4e24\u6761\u8def\u5f84\u7684\u957f\u5ea6\u53ea\u4e0e\u8def\u5f84\u7aef\u70b9\u662f\u8c01\u6709\u5173\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5728\u5206\u6cbb\u533a\u57df\u5185\u7684\u70b9 $i$ \u7684\u70b9\u6743 $val_i$ \u8bbe\u505a\u5b83\u5230\u5206\u6cbb\u91cd\u5fc3\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6761\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728\u7b2c\u4e8c\u68f5\u6811\u5f53\u524d\u5206\u6cbb\u533a\u57df\u7684\u56fe\u4e0a\u7684\u8fb9\uff0c\u5b83\u7684\u957f\u5ea6\u5c31\u662f $val_i + val_j + dist_1(i,j)$\u3002\u7136\u540e\u4f60\u5c31\u628a\u9898\u76ee\u8f6c\u5316\u4e3a\u4e86\u4e0a\u9762\u7ed9\u51fa\u7684 sub-problem\uff01\n\n\u4f46\u8fd8\u6709\u4e00\u4e2a\u4e8b\u60c5\uff1a\u5bf9\u4e8e\u5206\u6cbb\u91cd\u5fc3\u7684\u540c\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u4e24\u4e2a\u70b9\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u4e0d\u5e94\u8be5\u88ab\u7b97\u5165\uff0c\u4f46\u662f\u5728\u73b0\u5728\u7b97\u5165\u7b54\u6848\u4e00\u5b9a\u4e0d\u5982\u5728\u67d0\u4e00\u6b21\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u8fd9\u4e24\u4e2a\u70b9\u88ab\u5206\u5165\u4e0d\u540c\u7684\u5b50\u6811\u65f6\u4ea7\u751f\u7684\u8d21\u732e\u4f18\u3002\u6240\u4ee5\u628a\u8fd9\u6837\u7684\u8fb9\u7b97\u5165\u7b54\u6848\u4e5f\u662f\u65e0\u59a8\u7684\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5feb\u901f\u5730\u89e3\u51b3 sub-problem \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u5f53\u524d\u5206\u6cbb\u533a\u57df\u5185\u7684\u6240\u6709\u70b9\u5728\u7b2c\u4e8c\u68f5\u6811\u4e0a\u5efa\u7acb\u865a\u6811\uff0c\u5e76\u5728\u865a\u6811\u4e0a DP\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$ \u6c42\u51fa $dist_1(x,y)+val_y$ \u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u4e0e\u53d6\u5230\u6700\u5c0f\u503c\u7684 $y$ \u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u6240\u6709\u70b9 $z$ \u7684 $dist_1(x,z) + val_z$ \u7684\u6700\u5c0f\u503c\u3002\u8fd9\u4e2a DP \u53ef\u4ee5\u5229\u7528\u4e24\u6b21 dfs \u89e3\u51b3\uff1a\u7b2c\u4e00\u6b21 dfs \u7531\u513f\u5b50\u5411\u7236\u4eb2\u8f6c\u79fb\uff0c\u7b2c\u4e8c\u6b21 dfs \u7531\u7236\u4eb2\u5411\u513f\u5b50\u8f6c\u79fb\u3002\u56e0\u4e3a\u4e00\u6761\u8def\u5f84\u4e00\u5b9a\u5148\u5411\u4e0a\u8d70\u82e5\u5e72\u6b65\u518d\u5411\u4e0b\u8d70\u82e5\u5e72\u6b65\uff0c\u6240\u4ee5\u8fd9\u6837\u8d21\u732e\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u3002\n\n\u6700\u540e\u6839\u636e\u53d6\u5230\u6700\u5c0f\u503c\u7684\u70b9\u662f\u5426\u548c\u5f53\u524d\u70b9\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u5f53\u524d\u6bcf\u4e00\u4e2a\u70b9\u5728\u8fd9\u4e00\u4e2a\u5206\u6cbb\u533a\u57df\u5185\u80fd\u591f\u8fde\u51fa\u7684\u6700\u5c0f\u6743\u503c\u7684\u8fb9\u7684\u6743\u503c\u548c\u5176\u7aef\u70b9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\u590d\u6742\u5ea6 $O(n \\log ^3 n)$\uff08Boruvka + \u70b9\u5206\u6cbb + \u6bcf\u4e00\u6b21\u70b9\u5206\u6cbb\u9700\u8981\u5efa\u865a\u6811\uff0c\u865a\u6811\u91cc\u6709\u6392\u5e8f\u548c LCA\uff09\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5224\u65ad\u5728\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u9700\u8981\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u4f46\u53ef\u4ee5\u5206\u6790\u5f97\u5230\u5e76\u67e5\u96c6\u4ea7\u751f\u7684\u590d\u6742\u5ea6\u662f $O(n \\log^2 n)$ \u7684\u3002\n\n\u8fd9\u4e2a\u590d\u6742\u5ea6\u5e76\u4e0d\u4f18\u79c0\uff0c\u4f1a\u5728 subtask4 \u4e0a TLE\uff08\u975e\u5e38\u9b54\u5e7b\u7684\u4e00\u4ef6\u4e8b\u662f\u5728 subtask4 \u4e0a\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(n \\log^2 n)$ \u7684\u56e0\u4e3a\u70b9\u5206\u6cbb\u6240\u7ecf\u8fc7\u7684\u70b9\u6570\u4e4b\u548c\u662f\u7ebf\u6027\u7684\uff09\u3002\u4e00\u4e2a\u4f18\u5316\u662f\uff1a\u7b2c\u4e8c\u68f5\u6811\u7684\u6811\u5f62\u6001\u6c38\u8fdc\u4e0d\u4f1a\u53d8\uff0c\u6240\u4ee5\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\u548c\u6bcf\u4e00\u5c42\u7684\u865a\u6811\u603b\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u5efa\u597d\u4e4b\u540e\u628a\u5b83\u5b58\u4e0b\u6765\uff0c\u4e4b\u540e\u76f4\u63a5\u62ff\u8fc7\u6765\u7528\u5c31\u884c\u3002\u590d\u6742\u5ea6\u964d\u4f4e\u4e3a $O(n \\log^2 n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n---\n\n\u9898\u5916\u8bdd\uff1a\u5982\u679c\u4f60\u5728 Atcoder \u4e0a\u770b\u6211\u5728 sub-problem \u4e0a\u7684 AC \u63d0\u4ea4\uff0c\u4f60\u4f1a\u53d1\u73b0\u5199\u6cd5\u5e76\u4e0d\u662f\u5982\u4e0a\u9762\u6240\u8ff0\u7684 Boruvka + \u865a\u6811 DP\uff0c\u800c\u662f\u70b9\u5206\u6cbb + Kruskal\u3002\u8ddf\u51fa\u9898\u4eba\u8fdb\u884c\u4ea4\u6d41\u8fc7\u540e\u611f\u89c9\u4f3c\u4e4e\u5229\u7528\u8fd9\u4e2a\u505a\u6cd5\u8fdb\u884c\u62d3\u5c55\u5c31\u53ef\u4ee5\u5f97\u5230\u51fa\u9898\u4eba\u7ed9\u51fa\u7684\u6807\u7b97\u4e86\u3002\n\n---\n\nCode \u957f\u5ea6\u8f83\u957f\uff0c\u8bf7\u8c28\u614e\u98df\u7528\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nint read(){\n\tint a = 0; bool f = 0; char c = getchar(); while(!isdigit(c)){f = c == '-'; c = getchar();}\n\twhile(isdigit(c)){a = a * 10 + c - 48; c = getchar();} return f ? -a : a;\n}\n\nconst int _ = 1e5 + 7;\nstruct Edge{int end , upEd , w;}; int N , allmn[_] , id[_] , cnt , val[_];\n\nnamespace dsu{\n\tint fa[_]; int find(int x){return x > N ? 0 : fa[x] == x ? x : (fa[x] = find(fa[x]));}\n}\n\nnamespace tree1{\n\tEdge Ed[_ << 1]; int head[_] , cntEd;\n\tvoid addEd(int a , int b , int c){Ed[++cntEd] = (Edge){b , head[a] , c}; head[a] = cntEd;}\n\n\tint dfn[_] , fa[_] , top[_] , sz[_] , son[_] , dep[_] , len[_];\n\t\n\tvoid dfs(int x , int p){\n\t\tsz[x] = 1; fa[x] = p; dep[x] = dep[p] + 1;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(Ed[i].end != p){\n\t\t\t\tlen[Ed[i].end] = len[x] + Ed[i].w;\n\t\t\t\tdfs(Ed[i].end , x); sz[x] += sz[Ed[i].end];\n\t\t\t\tif(sz[Ed[i].end] > sz[son[x]]) son[x] = Ed[i].end;\n\t\t\t}\n\t}\n\n\tvoid dfs1(int x , int t){\n\t\tstatic int ts = 0; dfn[x] = ++ts; top[x] = t; if(!son[x]) return;\n\t\tdfs1(son[x] , t);\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(Ed[i].end != fa[x] && Ed[i].end != son[x]) dfs1(Ed[i].end , Ed[i].end);\n\t}\n\t\n\tint LCA(int x , int y){\n\t\twhile(top[x] != top[y]){if(dep[top[x]] < dep[top[y]]) swap(x , y); x = fa[top[x]];}\n\t\treturn dep[x] < dep[y] ? x : y;\n\t}\n\n\tint dist(int x , int y){return len[x] + len[y] - 2 * len[LCA(x , y)];}\n\t\n\tvector < pair < int , int > > ch[_]; int mn[_][2][2];\n\t\n\tvoid merge(int p , int q , int w){\n\t\tstatic int tmp[2][2]; bool fl = dsu::find(mn[p][0][1]) == dsu::find(mn[q][0][1]);\n\t\tif(mn[p][0][0] < 0ll + mn[q][0][0] + w){\n\t\t\ttmp[0][0] = mn[p][0][0]; tmp[0][1] = mn[p][0][1];\n\t\t\tif(mn[p][1][0] < 0ll + mn[q][fl][0] + w){tmp[1][0] = mn[p][1][0]; tmp[1][1] = mn[p][1][1];}\n\t\t\telse{tmp[1][0] = mn[q][fl][0] + w; tmp[1][1] = mn[q][fl][1];}\n\t\t}\n\t\telse{\n\t\t\ttmp[0][0] = mn[q][0][0] + w; tmp[0][1] = mn[q][0][1];\n\t\t\tif(0ll + mn[q][1][0] + w < mn[p][fl][0]){tmp[1][0] = mn[q][1][0] + w; tmp[1][1] = mn[q][1][1];}\n\t\t\telse{tmp[1][0] = mn[p][fl][0]; tmp[1][1] = mn[p][fl][1];}\n\t\t}\n\t\tmemcpy(mn[p] , tmp , sizeof(tmp));\n\t}\n\n\tbool in[_];\n\tvoid dp1(int x){for(auto t : ch[x]){dp1(t.first); merge(x , t.first , t.second);}}\n\n\tvoid dp2(int x){\n\t\tfor(auto t : ch[x]){merge(t.first , x , t.second); dp2(t.first);}\n\t\tch[x].clear(); bool fl = dsu::find(mn[x][0][1]) == dsu::find(x);\n\t\tif(in[x] && 0ll + mn[x][fl][0] + val[x] < allmn[x]){allmn[x] = mn[x][fl][0] + val[x]; id[x] = mn[x][fl][1];}\n\t\tmemset(mn[x] , 0x7f , sizeof(mn[x])); in[x] = 0;\n\t}\n\n\tstruct data{bool in; int id , fa;};\n\tvector < data > innode[_];\n\t\n\tvoid build(int id){\n\t\tif(innode[id].empty()) return;\n\t\tint rt = 0;\n\t\tfor(auto t : innode[id]){\n\t\t\tif(!t.fa) rt = t.id; else ch[t.fa].push_back(make_pair(t.id , len[t.id] - len[t.fa]));\n\t\t\tif(in[t.id] = t.in){mn[t.id][0][0] = val[t.id]; mn[t.id][0][1] = t.id;}\n\t\t}\n\t\tdp1(rt); dp2(rt);\n\t}\n\n\tvoid build_save(vector < int > &node , int id){\n\t\tif(node.size() == 1) return;\n\t\tstatic int stk[_]; int top = 0;\n\t\tfor(auto t : node){\n\t\t\tin[t] = 1;\n\t\t\tif(top){\n\t\t\t\tint p = LCA(stk[top] , t);\n\t\t\t\twhile(dep[stk[top - 1]] >= dep[p]){innode[id].push_back((data){in[stk[top]] , stk[top] , stk[top - 1]}); --top;}\n\t\t\t\tif(stk[top] != p){innode[id].push_back((data){in[stk[top]] , stk[top] , p}); stk[top] = p;}\n\t\t\t}\n\t\t\tstk[++top] = t;\n\t\t}\n\t\tfor(int i = 1 ; i < top ; ++i) innode[id].push_back((data){in[stk[i + 1]] , stk[i + 1] , stk[i]});\n\t\tinnode[id].push_back((data){in[stk[1]] , stk[1] , 0});\n\t\tfor(auto t : node) in[t] = 0;\n\t}\n\t\n\tvoid input(){\n\t\tfor(int i = 1 ; i < N ; ++i){int x = read() , y = read() , z = read(); addEd(x , y , z); addEd(y , x , z);}\n\t\tdfs(1 , 0); dfs1(1 , 1); memset(mn , 0x7f , sizeof(mn));\n\t}\n}\n\nnamespace tree2{\n\tEdge Ed[_ << 1]; int head[_] , cntEd;\n\tvoid addEd(int a , int b , int c){Ed[++cntEd] = (Edge){b , head[a] , c}; head[a] = cntEd;}\n\tint dfn[_] , fa[_] , top[_] , sz[_] , son[_] , dep[_] , len[_];\n\t\n\tvoid dfs(int x , int p){\n\t\tsz[x] = 1; fa[x] = p; dep[x] = dep[p] + 1;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(Ed[i].end != p){\n\t\t\t\tlen[Ed[i].end] = len[x] + Ed[i].w;\n\t\t\t\tdfs(Ed[i].end , x); sz[x] += sz[Ed[i].end];\n\t\t\t\tif(sz[Ed[i].end] > sz[son[x]]) son[x] = Ed[i].end;\n\t\t\t}\n\t}\n\t\n\tvoid dfs1(int x , int t){\n\t\tstatic int ts = 0; dfn[x] = ++ts; top[x] = t; if(!son[x]) return;\n\t\tdfs1(son[x] , t);\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(Ed[i].end != fa[x] && Ed[i].end != son[x]) dfs1(Ed[i].end , Ed[i].end);\n\t}\n\n\tint LCA(int x , int y){\n\t\twhile(top[x] != top[y]){if(dep[top[x]] < dep[top[y]]) swap(x , y); x = fa[top[x]];}\n\t\treturn dep[x] < dep[y] ? x : y;\n\t}\n\n\tint dist(int x , int y){return len[x] + len[y] - 2 * len[LCA(x , y)];}\n\t\n\tvoid input(){\n\t\tfor(int i = 1 ; i < N ; ++i){int x = read() , y = read() , z = read(); addEd(x , y , z); addEd(y , x , z);}\n\t\tdfs(1 , 0); dfs1(1 , 1);\n\t}\n\n\tbool vis[_]; int nsz , msz , mid;\n\n\tvoid getsz(int x){\n\t\tvis[x] = 1; ++nsz;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd) if(!vis[Ed[i].end]) getsz(Ed[i].end);\n\t\tvis[x] = 0;\n\t}\n\n\tint getrt(int x){\n\t\tvis[x] = 1; int mx = 0 , sz = 1;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(!vis[Ed[i].end]){int t = getrt(Ed[i].end); sz += t; mx = max(mx , t);}\n\t\tmx = max(mx , nsz - sz); if(msz > mx){msz = mx; mid = x;}\n\t\tvis[x] = 0; return sz;\n\t}\n\n\tvoid getnode(int x , int l , vector < pair < int , int > > &node){\n\t\tnode.push_back(make_pair(x , l)); vis[x] = 1;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd)\n\t\t\tif(!vis[Ed[i].end]) getnode(Ed[i].end , l + Ed[i].w , node);\n\t\tvis[x] = 0;\n\t}\n\n\tvector < pair < int , int > > node[_];\n\tvoid divide(int x){\n\t\tnsz = 0; msz = 1e9; getsz(x); getrt(x); x = mid;\n\t\tif(node[x].empty()){\n\t\t\tgetnode(x , 0 , node[x]); vector < int > pid;\n\t\t\tfor(auto t : node[x]) pid.push_back(t.first);\n\t\t\tsort(pid.begin() , pid.end() , [&](int p , int q){return tree1::dfn[p] < tree1::dfn[q];});\n\t\t\ttree1::build_save(pid , x);\n\t\t}\n\t\tfor(auto t : node[x]) val[t.first] = t.second;\n\t\ttree1::build(x); vis[x] = 1;\n\t\tfor(int i = head[x] ; i ; i = Ed[i].upEd) if(!vis[Ed[i].end]) divide(Ed[i].end);\n\t}\n\t\n\tvoid work(){\n\t\tfor(int i = 1 ; i <= N ; ++i) dsu::fa[i] = i;\n\t\tlong long sum = 0;\n\t\twhile(cnt != N - 1){\n\t\t\tstatic int mnid[_];\n\t\t\tmemset(vis , 0 , sizeof(vis)); memset(allmn , 0x7f , sizeof(allmn)); divide(1);\n\t\t\tfor(int i = 1 ; i <= N ; ++i)\n\t\t\t\tif(!mnid[dsu::find(i)] || allmn[mnid[dsu::find(i)]] > allmn[i]) mnid[dsu::find(i)] = i;\n\t\t\tfor(int i = 1 ; i <= N ; ++i)\n\t\t\t\tif(dsu::find(i) == i){\n\t\t\t\t\tint l = mnid[i] , r = id[mnid[i]]; mnid[i] = 0;\n\t\t\t\t\tif(dsu::find(r) != i){dsu::fa[i] = dsu::find(r); sum += tree1::dist(l , r) + dist(l , r); ++cnt;}\n\t\t\t\t}\n\t\t}\n\t\tcout << sum << endl;\n\t}\n}\n\nint main(){\n\tfreopen(\"in\",\"r\",stdin);\n\tN = read(); tree1::input(); tree2::input(); tree2::work(); return 0;\n}\n```",
        "postTime": 1583728255,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "P6199 [EER1]\u6cb3\u7ae5\u91cd\u5de5"
    },
    {
        "content": "\u5b50\u95ee\u9898 : [AT3611 Tree MST](https://www.luogu.com.cn/blog/command-block/ds-ji-lu-at3611-tree-mst) ; \u89e3\u6cd5 : [\u9898\u89e3 AT3611 \u3010Tree MST\u3011](https://www.luogu.com.cn/blog/command-block/solution-at3611)\n\n**\u9898\u610f** : \u7ed9\u51fa\u4e24\u68f5\u6811$T_1,T_2$,\u70b9\u7684\u6807\u53f7\u5bf9\u5e94,\u6709\u8fb9\u6743\u3002\n\n\u6309\u7167\u5982\u4e0b\u7684\u89c4\u5219\u751f\u6210\u4e00\u4e2a\u65e0\u5411\u56fe : $(u,v)$\u4e4b\u95f4\u7684\u8fb9\u6743\u4e3a $T_1.dis(u,v)+T_2.dis(u,v)$\n\n\u6c42\u8fd9\u5f20\u56fe\u7684 `MST` \u7684\u8fb9\u6743\u548c\u3002$n\\leq 10^5$,\u65f6\u9650$\\texttt{4s}$.\n\n------------\n\n\u9996\u5148\u629b\u51fa\u7ed3\u8bba : \u5bf9\u4e8e(\u5b8c\u5168\u56fe)`MST`\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a**\u8fb9\u96c6**,\u505a\u4e00\u6b21`MST`,\u53ea\u4fdd\u7559\u5176\u4e2d\u7684\u8fb9,\u6700\u540e\u5bf9\u4fdd\u7559\u7684\u8fb9\u7edf\u4e00\u505a`MST`,\u4e00\u5b9a\u80fd\u5f97\u5230\u6700\u4f18\u89e3\u3002\n\n\u5148\u5bf9\u5176\u4e2d\u4e00\u68f5\u6811\u4e0b\u624b,\u8003\u8651\u70b9\u5206\u6cbb\u3002\u53ea\u8003\u8651\u8d8a\u8fc7\u5206\u6cbb\u4e2d\u5fc3\u7684\u8def\u5f84\u5bf9\u5e94\u7684\u8fde\u8fb9\u3002\n\n\u8003\u8651`dfs`\u4e00\u4e0b\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6,\u5219$(u,v)$\u4e4b\u95f4\u8fde\u8fb9\u7684\u4ee3\u4ef7\u5c31\u662f$dep[u]+dep[v]+T_2.dis(u,v)$\n\n\u6ce8\u610f,\u5f53\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u5b50\u6811\u5185\u65f6,\u8fd9\u4e2a\u5f0f\u5b50\u5e76\u4e0d\u6b63\u786e,\u4f46\u662f\u6bd4\u76f4\u63a5\u8fde\u63a5\u7684\u771f\u5b9e\u503c\u66f4\u5927,\u6240\u4ee5\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u73b0\u5728\u6211\u4eec\u5c31\u662f\u8981\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u6c42\u4e00\u4e2a`MST`\u3002\u53ef\u4ee5\u8003\u8651\u5efa\u7acb\u865a\u6811\u7136\u540e\u5c31\u53d8\u6210\u4e0a\u9762\u7684 {\u5b50\u95ee\u9898} \u4e86\u3002\n\n\u865a\u6811\u91cc\u9762\u7684\u8f85\u52a9\u70b9\u4e0d\u5e94\u8be5\u8fde\u8fb9,\u53ef\u4ee5\u628a$dep$\u8bbe\u7f6e\u4e3a`INF`\u4fbf\u4e8e\u5224\u65ad\u3002\n\n\u5b50\u95ee\u9898\u548c\u865a\u6811\u7684\u590d\u6742\u5ea6\u5747\u662f$O(n\\log n)$,\u672c\u9898\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(n\\log^2n)$\n\n\u4ee3\u7801\u8f83\u957f,\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5b9e\u73b0\u4e0a\u7684\u6280\u5de7:\n\n- \u628a\u865a\u6811\u8282\u70b9\u7f16\u53f7\u6620\u5c04\u5230$[1,m]$\n\n- DP\u505a\u5b50\u95ee\u9898\u7684\u65f6\u5019\u5c01\u88c5\u7ed3\u6784\u4f53\n\n- \u628a\u70b9\u5206\u6cbb\u7684\u5206\u6cbb\u533a\u57df\u76f4\u63a5\u62f7\u8d1d\u51fa\u6765,\u907f\u514d\u591a\u4f59\u7684`dfs`\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u8054\u901a\u5757,\u5c06\u5176\u5ffd\u7565(\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u5feb)\n\n- \u5c01\u88c5\u6210\u4e3a\u96be\u9898,\u8bf7\u5584\u7528\u5b8f\n\n\u53e6\u5916\u7531\u4e8e\u6211\u7684\u4e24\u7a7a\u683c\u65e0`Tab`\u7f29\u8fdb,\u8fd9\u91cc\u53ef\u80fd\u663e\u793a\u5730\u6709\u70b9\u5947\u602a\u2026\u2026\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define MaxN 100500\nusing namespace std;\ninline int read()\n{\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nvector<int> g[MaxN],l[MaxN];\ninline void adl(int f,int t,int len){\n  g[f].push_back(t);l[f].push_back(len);\n  g[t].push_back(f);l[t].push_back(len);\n}\nint w[MaxN],c[MaxN];\n#define Pr pair<int,int>\n#define mp make_pair\n#define fir first\n#define sec second\nstruct Data\n{\n  Pr x,x2;int c;\n  void chk(const Data &t){\n    if (t.c==c){\n      x=min(x,t.x);\n      x2=min(x2,t.x2);\n    }else {\n      if (t.x<=x){\n        x2=min(x,t.x2);\n        c=t.c;x=t.x;\n      }else x2=min(x2,t.x);\n    }\n  }\n  Pr get(int tc){\n    if (tc==c)return x2;\n    return x;\n  }\n}ff[MaxN];\n#define f ff\nvoid dfs1(int u,int fa)\n{\n  f[u].x=mp(w[u],u);\n  f[u].c=c[u];\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa){\n   \t  dfs1(v,u);\n   \t  f[v].x.fir+=l[u][i];\n   \t  f[v].x2.fir+=l[u][i];\n   \t  f[u].chk(f[v]);\n   \t  f[v].x.fir-=l[u][i];\n      f[v].x2.fir-=l[u][i];\n   \t}\n}\nvoid dfs2(int u,int fa)\n{\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa){\n      f[u].x.fir+=l[u][i];\n      f[u].x2.fir+=l[u][i];\n      f[v].chk(f[u]);\n      f[u].x.fir-=l[u][i];\n      f[u].x2.fir-=l[u][i];\n   \t  dfs2(v,u);\n    }\n}\nint findf(int u)\n{return c[u]==u ? u : c[u]=findf(c[u]);}\nbool merge(int x,int y)\n{\n  x=findf(x);y=findf(y);\n  if (x==y)return 0;\n  c[x]=y;return 1;\n}\n#define INF 1010000000\nPr p[MaxN];\nint tc,tn,tl,t[MaxN];\nstruct Line\n{int fr,to,len;}s[MaxN<<5];\nvoid sub()\n{\n  int stl=tl;\n  for (int i=1;i<=tn;i++)c[i]=i;\n  while(tl-stl<tc-1){\n    for (int i=1;i<=tn;i++){\n      p[i].fir=f[i].x.fir=f[i].x2.fir=INF;\n      f[i].x.sec=f[i].x2.sec=f[i].c=0;\n    }dfs1(1,0);dfs2(1,0);\n    for (int i=1;i<=tn;i++)\n      if (w[i]<INF){\n        Pr sav=f[i].get(c[i]);\n        sav.fir+=w[i];\n        p[c[i]]=min(p[c[i]],sav);\n      }\n    for (int i=1;i<=tn;i++)\n      if (p[i].fir<INF&&merge(i,p[i].sec))\n        s[++tl]=(Line){t[i],t[p[i].sec],p[i].fir};\n    for (int i=1;i<=tn;i++)findf(i);\n  }for (int i=1;i<=tn;i++)\n    {g[i].clear();l[i].clear();}\n}\n#undef f\nint in[MaxN],out[MaxN],dep[MaxN],f[17][MaxN],cd[MaxN];\nint lca(int x,int y)\n{\n  if (dep[x]>dep[y])swap(x,y);\n  int k=16;\n  while(k--)\n    while(dep[f[k][y]]>=dep[x])\n      y=f[k][y];\n  k=16;\n  while(k--)\n    while(f[k][x]!=f[k][y])\n      {x=f[k][x];y=f[k][y];}\n  return x==y ? x: f[0][x];\n}\nint tim;\nvoid getf(int u,int fa)\n{\n  in[u]=++tim;\n  f[0][u]=fa;\n  dep[u]=dep[fa]+1;\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa){\n      cd[v]=cd[u]+l[u][i];\n      getf(v,u);\n    }\n  out[u]=tim;\n}\nint wd[MaxN],e[MaxN],ef,tp[MaxN],st[MaxN];\nbool cmp(int A,int B){return in[A]<in[B];}\nvoid calc()\n{\n  ef++;tc=tn;\n  sort(t+1,t+tn+1,cmp);\n  for (int i=1;i<=tn;i++)e[t[i]]=ef;\n  int top=tn;\n  for (int i=1,u;i<top;i++)\n    if (e[u=lca(t[i],t[i+1])]<ef){\n      e[t[++tn]=u]=ef;\n      wd[u]=INF;\n    }\n  sort(t+1,t+tn+1,cmp);\n  top=0;\n  for (int i=1;i<=tn;i++)\n    w[i]=wd[t[tp[t[i]]=i]];\n  for (int i=1,u;i<=tn;i++){\n    u=t[i];\n    while(top>1&&out[u]>out[st[top]]){\n      adl(tp[st[top-1]],tp[st[top]],cd[st[top]]-cd[st[top-1]]);\n      top--;\n    }st[++top]=u;\n  }while(top>1){\n    adl(tp[st[top-1]],tp[st[top]],cd[st[top]]-cd[st[top-1]]);\n    top--;\n  }sub();\n}\nvector<int> g2[MaxN],l2[MaxN];\n#define g g2\n#define l l2\nint ms[MaxN],siz[MaxN];\nbool vis[MaxN];\nvoid pfs(int u,int fa)\n{\n  siz[t[++tn]=u]=1;ms[u]=0;\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa&&!vis[v]){\n      pfs(v,u);\n      siz[u]+=siz[v];\n      ms[u]=max(ms[u],siz[v]);\n    }\n}\nint getrt(int u)\n{\n  tn=0;pfs(u,0);\n  int rt=0;\n  for (int i=1;i<=tn;i++){\n    ms[t[i]]=max(ms[t[i]],tn-siz[t[i]]);\n    if (ms[t[i]]<ms[rt])rt=t[i];\n  }return rt;\n}\nvoid dfs(int u,int fa)\n{\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa&&!vis[v])\n      {wd[v]=wd[u]+l[u][i];dfs(v,u);}\n}\nvoid solve(int u)\n{\n  if (siz[u]==1)return ;\n  wd[u]=0;dfs(u,0);\n  calc();vis[u]=1;\n  for (int i=0,v;i<g[u].size();i++)\n    if (!vis[v=g[u][i]])\n   \t  solve(getrt(v));\n}\n#undef g\n#undef l\nbool cmpL(const Line &A,const Line &B)\n{return A.len<B.len;}\nint n;\nint main()\n{\n  n=read();\n  for (int i=1,fr,to,len;i<n;i++){\n    fr=read();to=read();len=read();\n    adl(fr,to,len);\n  }getf(1,0);\n  for (int i=1;i<=n;i++)\n    {g[i].clear();l[i].clear();}\n  for (int j=1;j<16;j++)\n    for (int i=1;i<=n;i++)\n      f[j][i]=f[j-1][f[j-1][i]];\n  for (int i=1,fr,to,len;i<n;i++){\n    fr=read();to=read();len=read();\n    g2[fr].push_back(to);l2[fr].push_back(len);\n    g2[to].push_back(fr);l2[to].push_back(len);\n  }ms[0]=n+1;solve(getrt(1));\n  long long ans=0;\n  for (int i=1;i<=n;i++)c[i]=i;\n  sort(s+1,s+tl+1,cmpL);\n  for (int i=1;i<=tl;i++)\n    if (merge(s[i].fr,s[i].to))\n      ans+=s[i].len;\n  printf(\"%lld\",ans);\n}\n```\n\n\u6b64\u5916,\u8fd9\u9898\u5bf9\u6bcf\u4e2a\u70b9\u989d\u5916\u8d4b\u6743\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002",
        "postTime": 1583827783,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6199 \u3010[EER1]\u6cb3\u7ae5\u91cd\u5de5\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u7ecf\u5178\u7684\u5957\u8def\uff0c\u5199\u8fd9\u7bc7\u9898\u89e3\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u8003\u8651 Boruvka \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u597d\u5904\u662f\u7528 $O(\\log n)$ \u7684\u4ee3\u4ef7\u5c06\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u8f6c\u5316\u4e3a\u8f83\u4e3a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u8f6c\u5316\u540e\u7684\u95ee\u9898\u662f\uff1a\u6bcf\u4e2a\u70b9 $i$ \u6709\u4e00\u4e2a\u989c\u8272 $col_i$\uff0c\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $i$ \u6c42\u51fa $\\min\\limits_{col_i\\neq col_j}dis_1(i,j)+dis_2(i,j)$\u3002\n\n\u8003\u8651\u5728 $T_1$ \u4e0a\u70b9\u5206\u6cbb\uff0c\u6bcf\u6b21\u6c42\u51fa\u5f53\u524d\u5b50\u6811\u5728 $T_2$ \u4e0a\u7684\u865a\u6811\u3002\u70b9\u5206\u6cbb\u7684\u597d\u5904\u662f\u628a $dis_1(i,j)$ \u62c6\u6210 $w_i+w_j$\u3002\u4e8e\u662f\u76f4\u63a5\u5728\u865a\u6811\u4e0a\u6362\u6839 dp \u5373\u53ef\u3002dp \u8fc7\u7a0b\u4e2d\u9700\u8981\u8bb0\u5f55\u6700\u5927\u503c\u4ee5\u53ca\u4e0e\u6700\u5927\u503c\u989c\u8272\u4e0d\u540c\u7684\u6700\u5927\u503c\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u7ec6\u8282\u662f\uff1a\u70b9\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u5728\u91cd\u5fc3\u7684\u540c\u4e00\u513f\u5b50\u7684\u5b50\u6811\u5185\u7684\u4e24\u4e2a\u70b9\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5e94\u8be5\u5728\u5f53\u524d\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u3002\n\n\u4f46\u53ef\u4ee5\u53d1\u73b0\u7531\u4e8e\u8fb9\u6743\u90fd\u662f\u6b63\u6570\uff0c\u6240\u4ee5\u5373\u4fbf\u8fd9\u4e24\u4e2a\u70b9\u5728\u5f53\u524d\u8fc7\u7a0b\u4e2d\u88ab\u8ba1\u7b97\u5230\u4e86\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\uff0c\u8fd9\u79cd\u65b9\u6848\u4e00\u5b9a\u4e0d\u4f18\u3002\n\n\u8fd9\u6837\u76f4\u63a5\u8ba1\u7b97\u4e00\u904d\u590d\u6742\u5ea6\u662f $O(n\\log ^2n)$\uff0c\u74f6\u9888\u5728\u5efa\u865a\u6811\u3002\u7b97\u4e0a Boruvka \u5c31\u662f $O(n\\log^3 n)$\u3002\u4f46\u865a\u6811\u7684\u5f62\u6001\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u70b9\u5206\u6811\u4e0a\u6bcf\u4e2a\u5b50\u6811\u7684\u865a\u6811\u5c31\u53ef\u4ee5\u505a\u5230 $O(n\\log^2 n)$\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 100005\n#define pb push_back\n#define ll long long\nconst int INF=1e9;\nint n,m,dfsT,G,vs2[N],rt[N],st[N];ll ans;bool vs1[N];\nint dfn1[N],dfn2[N],fa[N],dep[N],s[N],sz[N],hv[N],tp[N];\nstruct Edge\n{\n\tint v,w;Edge(int _v=0,int _w=0) {v=_v;w=_w;}\n\tEdge operator + (int t) const {return Edge(v,w+t);}\n\tEdge operator - (int t) const {return Edge(v,w-t);}\n}z[N],dp1[N],dp2[N],dp3[N],dp4[N];\nvector<Edge> e1[N],e2[N];struct Node {int u,w;};\nvector<Node> vc1[N];vector<int> vc2[N];\nbool cmp(int x,int y)\n{return (x>0?dfn1[x]:dfn2[-x])<(y>0?dfn1[y]:dfn2[-y]);}\nint findRt(int u) {return u==rt[u]?u:rt[u]=findRt(rt[u]);}\nvoid merge(int u,int v,int w)\n{u=findRt(u);v=findRt(v);if(u!=v) rt[u]=v,ans+=w;}\nvoid ins(Edge &z1,Edge &z2,Edge vl)\n{\n\tif(vl.w<z1.w) {if(vl.v!=z1.v) z2=z1;z1=vl;}\n\telse if(vl.w<z2.w && vl.v!=z1.v) z2=vl;\n}\nvoid dfs1(int u,int f,int x,int s,bool fl)\n{\n\tint mx=0;sz[u]=1;\n\tif(fl) vc1[G].pb((Node) {u,s}),vc2[G].pb(u),vs2[u]=G;\n\tfor(auto i:e1[u]) if(i.v!=f && !vs1[i.v])\n\t\tdfs1(i.v,u,x,s+i.w,fl),sz[u]+=sz[i.v],mx=max(mx,sz[i.v]);\n\tmx=max(mx,x-sz[u]);if(!fl && mx<=x/2) G=u;\n}\nvoid dfs2(int u,int f)\n{\n\tfa[u]=f;dfn1[u]=++dfsT;dep[u]=dep[f]+1;sz[u]=1;\n\tfor(auto i:e2[u]) if(i.v!=f)\n\t{\n\t\ts[i.v]=s[u]+i.w;dfs2(i.v,u);sz[u]+=sz[i.v];\n\t\tif(sz[i.v]>sz[hv[u]]) hv[u]=i.v;\n\t}dfn2[u]=++dfsT;\n}\nvoid dfs3(int u,int f)\n{\n\ttp[u]=f;if(hv[u]) dfs3(hv[u],f);\n\tfor(auto i:e2[u]) if(i.v!=fa[u] && i.v!=hv[u]) dfs3(i.v,i.v);\n}\nint LCA(int u,int v)\n{\n\twhile(tp[u]!=tp[v])\n\t{if(dep[tp[u]]<dep[tp[v]]) swap(u,v);u=fa[tp[u]];}\n\tif(dep[u]<dep[v]) swap(u,v);return v;\n}\nvoid build(int u,int x)\n{\n\tdfs1(u,0,x,0,0);u=G;dfs1(u,0,x,0,1);vs1[u]=1;\n\tsort(vc2[u].begin(),vc2[u].end(),cmp);\n\tfor(int i=0;i<(int)vc2[u].size()-1;++i)\n\t{\n\t\tint t=LCA(vc2[u][i],vc2[u][i+1]);\n\t\tif(vs2[t]!=u) vs2[t]=u,vc2[u].pb(t);\n\t}\n\tfor(int i=0;i<(int)vc2[u].size();++i)\n\t{if(vc2[u][i]<0) break;vc2[u].pb(-vc2[u][i]);}\n\tsort(vc2[u].begin(),vc2[u].end(),cmp);\n\tfor(auto i:e1[u]) if(!vs1[i.v]) build(i.v,sz[i.v]);\n}\nvoid slv(int u)\n{\n\tfor(auto i:vc2[u]) if(i>0)\n\t\tdp1[i]=dp2[i]=dp3[i]=dp4[i]=Edge(0,INF);\n\tfor(auto i:vc1[u]) dp1[i.u]=Edge(rt[i.u],i.w);\n\tfor(auto i:vc2[u]) if(i>0) st[++st[0]]=i;else\n\t{\n\t\tint f=st[--st[0]],w=s[-i]-s[f];if(!f) continue;\n\t\tins(dp1[f],dp2[f],dp1[-i]+w);ins(dp1[f],dp2[f],dp2[-i]+w);\n\t}\n\tfor(auto i:vc2[u]) if(i>0)\n\t{\n\t\tint f=st[st[0]],w=s[i]-s[f];st[++st[0]]=i;\n\t\tdp3[i]=dp1[i];dp4[i]=dp2[i];if(!f) continue;\n\t\tins(dp3[i],dp4[i],dp3[f]+w);ins(dp3[i],dp4[i],dp4[f]+w);\n\t}else --st[0];\n\tfor(auto i:vc1[u])\n\t{\n\t\tint t1=rt[i.u];Edge t=t1==dp3[i.u].v?dp4[i.u]:dp3[i.u];\n\t\tt=t+i.w;if(t.w<z[t1].w) z[t1]=t;\n\t}\n}\nvoid Boruvka()\n{\n\tfor(int i=1;i<=n;++i) rt[i]=i;\n\twhile(1)\n\t{\n\t\tbool fl=0;\n\t\tfor(int i=1;i<=n;++i)\n\t\t{findRt(i);if(rt[i]!=rt[1]) fl=1;z[i]=Edge(0,INF);}\n\t\tif(!fl) break;for(int i=1;i<=n;++i) slv(i);\n\t\tfor(int i=1;i<=n;++i) if(rt[i]==i) merge(i,z[i].v,z[i].w);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1,u,v,w;i<n;++i)\n\t{\n\t\tscanf(\"%d %d %d\",&u,&v,&w);\n\t\te1[u].pb(Edge(v,w));e1[v].pb(Edge(u,w));\n\t}\n\tfor(int i=1,u,v,w;i<n;++i)\n\t{\n\t\tscanf(\"%d %d %d\",&u,&v,&w);\n\t\te2[u].pb(Edge(v,w));e2[v].pb(Edge(u,w));\n\t}dfs2(1,0);dfs3(1,1);build(1,n);Boruvka();\n\tprintf(\"%lld\\n\",ans);return 0;\n}\n```",
        "postTime": 1655178489,
        "uid": 119621,
        "name": "Kubic",
        "ccfLevel": 10,
        "title": "P6199 [EER1]\u6cb3\u7ae5\u91cd\u5de5"
    },
    {
        "content": "\u5148\u5728 T1 \u4e2d\u6c42\u51fa\u6240\u6709\u70b9\u5230 $1$ \u7684\u8ddd\u79bb $\\mathrm{dep1}_x$\u3002\u7528 ST \u8868\u9884\u5904\u7406\u51fa T1 \u7684 LCA\u3002\n\n\u628a T2 \u70b9\u5206\u6cbb\u3002\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5230\u5206\u6cbb\u6839\u7684\u8def\u5f84\u957f\u5ea6 $\\mathrm{dep2}_x$\u3002\u8003\u8651\u7ecf\u8fc7\u5f53\u524d\u6839\u8282\u70b9\u7684\u8def\u5f84\u3002\n\n\u628a\u5f53\u524d T2 \u70b9\u5206\u6cbb\u5230\u7684\u5b50\u6811\u7684\u70b9\u5728 T1 \u4e2d\u5efa\u7acb\u865a\u6811\u3002\u7136\u540e\u5bf9\u4e8e T2 \u70b9\u5206\u6cbb\u5230\u7684\u70b9 $x$\uff0c\u6211\u4eec\u5728\u865a\u6811\u4e2d\u7ed9\u5b83\u62c6\u51fa\u4e00\u4e2a\u70b9 $x'$\uff0c\u4ece $x'$ \u5411 $x$ \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a $\\mathrm{dep2}_x$ \u7684\u8fb9\u3002\u7136\u540e\u5bf9\u4e8e\u865a\u6811\u4e0a\u7684\u4e00\u6761\u8fb9 $(x,y)$\uff0c\u8fde\u4e00\u6761\u957f\u5ea6\u4e3a T1 \u4e2d $x,y$ \u8ddd\u79bb\u7684\u8fb9\u3002\u4e8b\u5b9e\u4e0a\u7531\u4e8e\u865a\u6811\u4e2d\u7684\u76f8\u90bb\u7684\u70b9\u5728 T1 \u4e2d\u4e00\u5b9a\u662f\u7956\u5b59\u5173\u7cfb\uff0c\u6240\u4ee5\u76f4\u63a5 $\\mathrm{dep1}$ \u51cf\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u4ece\u6240\u6709\u62c6\u51fa\u6765\u7684\u70b9 $x'$ \u8dd1\u6700\u77ed\u8def\uff0c\u6c42\u51fa\u865a\u6811\u4e0a\u6240\u6709\u70b9\u5230\u8fbe\u6700\u8fd1\u7684 $x'$ \u7684\u8ddd\u79bb $\\mathrm{dis}$ \u548c\u6700\u8fd1\u7684 $x'$ \u7684\u7f16\u53f7 $\\mathrm{pre}$\u3002\u63a5\u4e0b\u6765\u679a\u4e3e\u865a\u6811\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9 $(x,y)$\uff0c\u5411\u8fb9\u96c6 $E$ \u4e2d\u6254\u4e00\u6761\u8fde\u63a5 $\\mathrm{pre}_x,\\mathrm{pre}_y$\uff0c\u957f\u5ea6\u4e3a $\\mathrm{dis_x}+\\mathrm{dis_y}+d_{x,y}$\uff0c\u5176\u4e2d $d_{x,y}$ \u5c31\u662f\u865a\u6811\u4e2d $x,y$ \u8fb9\u7684\u957f\u5ea6\uff08\u4e5f\u5c31\u662f T1 \u4e2d $x,y$ \u7684\u8ddd\u79bb\uff09\u3002\n\n\u663e\u7136\u6211\u4eec\u6254\u8fdb $E$ \u7684\u8fb9\u7684\u957f\u5ea6\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u5b9e\u9645\u957f\u5ea6\uff08\u4e5f\u5c31\u662f\u6211\u4eec\u8ba1\u7b97\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e\u5b9e\u9645\u4e0a\u5b83\u4eec\u5728 T1 \u7684\u8ddd\u79bb\u52a0\u4e0a T2 \u7684\u8ddd\u79bb\uff09\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8bc1\u660e\u6240\u6709\u6700\u7ec8\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e00\u5b9a\u5728 $E$ \u4e2d\u4e14\u957f\u5ea6\u4e00\u5b9a\u7b49\u4e8e\u5b9e\u9645\u957f\u5ea6\u5373\u53ef\u3002\n\n\u8003\u8651\u6700\u7ec8\u88ab\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9 $x,y$\uff0c\u5b83\u4eec\u4e00\u5b9a\u4f1a\u540c\u65f6\u5728\u67d0\u4e00\u68f5\u865a\u6811\u4e2d\uff0c\u4e14\u865a\u6811\u4e0a\u5b83\u4eec\u4e4b\u95f4\u8def\u5f84\u7684 $\\mathrm{pre}$ \u4e00\u5b9a\u662f\u4e00\u6bb5\u524d\u7f00\u4e3a $x$\uff0c\u53e6\u4e00\u6bb5\u540e\u7f00\u4e3a $y$\uff0c\u5426\u5219\u5047\u8bbe\u5176\u8def\u5f84\u4e2d\u6709\u4e00\u4e2a\u70b9\u7684 $\\mathrm{pre}$ \u4e3a\u70b9 $z$\uff0c\u663e\u7136\u6700\u7ec8\u7684\u751f\u6210\u6811\u4e2d $(x,y)$ \u6ca1\u6709 $(x,z),(z,y)$ \u4f18\u3002\n\n\u800c\u4e14\u4e0d\u96be\u53d1\u73b0\u5f53\u5206\u6cbb\u5230\u7684\u6839\u4e3a T2 \u4e2d $x$ \u5230 $y$ \u7684\u8def\u5f84\u65f6\uff0c\u6211\u4eec\u6254\u8fdb $E$ \u7684\u8def\u5f84 $(x,y)$ \u957f\u5ea6\u5c31\u662f\u6b63\u786e\u7684\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a $k$ \u7684\u70b9\u5206\u6811\uff0c\u6211\u4eec\u6254\u8fdb $E$ \u7684\u8fb9\u6570\u662f $O(k)$ \u7684\uff0c\u6240\u4ee5\u6700\u7ec8 $E$ \u4e2d\u7684\u8fb9\u7684\u6570\u91cf\u5c31\u4f1a\u662f $O(n\\log n)$ \u7684\uff0c\u8dd1 Kruskal \u5373\u53ef\u3002\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\n\n\u7531\u4e8e\u4ee3\u7801\u6709\u4e00\u5b9a\u957f\u5ea6\uff0c\u8bf7\u5230\u4e91\u526a\u5207\u677f\u67e5\u770b\uff1ahttps://www.luogu.com.cn/paste/pawpljpq",
        "postTime": 1611379506,
        "uid": 53962,
        "name": "stoorz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6199 \u3010[EER1]\u6cb3\u7ae5\u91cd\u5de5\u3011"
    }
]