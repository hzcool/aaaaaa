[
    {
        "content": "\u8fd9\u9053\u9898\u5462\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5e76\u67e5\u96c6\u5566\u3002\n### # **\u5e76\u67e5\u96c6\u7684Get\u64cd\u4f5c**\n```cpp\nint get(int x){\n\tif(x==fa[x])\treturn x;\n    return fa[x]=get(fa[x]);//\u8def\u5f84\u538b\u7f29\n}\n```\n### # \u5e76\u67e5\u96c6\u7684Merge\u64cd\u4f5c\n```cpp\nvoid merge(int x,int y){\n\tfa[get(x)]=get(y);\n} // \u53ef\u4ee5\u76f4\u63a5\u5199\u5728\u7a0b\u5e8f\u91cc\n```\n# \u7279\u522b\u63d0\u9192\n\n\t\u5e76\u67e5\u96c6\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff0c\u5373fa[i]=i\uff0c\u8868\u793ai\u7684\u7239\u662f\u5b83\u81ea\u5df1\n    \u55ef\uff01\u4e00\u5b9a\u8981\u8bb0\u5f97\u554a\uff01\n\u5148\u6392\u5e8f\uff0c**\u628a\u6240\u6709e==1\u7684\u64cd\u4f5c\u653e\u5728\u524d\u9762\uff0c\u7136\u540e\u518d\u8fdb\u884ce==0\u7684\u64cd\u4f5c**\uff0c**\u5728\u8fdb\u884ce==1\u7684\u64cd\u4f5c\u7684\u65f6\u5019**\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5b83\u7ea6\u675f\u7684\u4e24\u4e2a\u53d8\u91cf\u653e\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\u5373\u53ef\u3002**\u5728e==0**\uff0c\u5373\u5b58\u5728\u4e00\u6761\u4e0d\u76f8\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u5bf9\u4e8e\u5b83\u7ea6\u675f\u7684\u4e24\u4e2a\u53d8\u91cf\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u90a3\u5c31\u4e0d\u53ef\u80fd\u6ee1\u8db3\uff01\u5982\u4e0d\u76f8\u7b49\u7684\u7ea6\u675f\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u90a3\u5c31YES\u3002\n\n\u8fd8\u6709\u554a\uff0c**\u6211\u4eec\u8981\u5173\u6ce8\u4e00\u4e0b\u6570\u636e\u8303\u56f4**\uff0c\u662f\u670910\u76849\u6b21\u65b9\u90a3\u4e48\u5927\uff0c\u5982\u679c\u5f00\u4e00\u4e2a10\u76849\u6b21\u65b9\u5927\u7684fa\u6570\u7ec4\u7684\u8bdd\uff0c\u7a7a\u95f4\u80af\u5b9a\u8d85\u9650\uff0c\u8d85\u9650\u5c31\u51c9\u51c9\uff08**\u4eb2\u8eab\u7ecf\u5386\uff0c\u8bf7\u52ff\u6a21\u4eff\uff0c\u8c22\u8c22\u914d\u5408\uff01\uff01\uff01**\uff09\u6240\u4ee5\uff0c\u5404\u4f4d\u4eb2\u7231\u7684\u5c0f\u4f19\u4f34\u4eec\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230[\u79bb\uff01\u6563\uff01\u5316\uff01](https://www.cnblogs.com/cytus/p/8933597.html)\u3002\n\n\u603b\u5f97\u6765\u8bf4\u79bb\u6563\u5316\u6709\u4e09\u6b65\u8d70\u6218\u7565\uff1a\n\n1.\u53bb\u91cd\uff08\u53ef\u4ee5\u7528\u5230unique\u53bb\u91cd\u51fd\u6570\uff09\n\n2.\u6392\u5e8f\n\n3.\u4e8c\u5206\u7d22\u5f15\uff08\u53ef\u4ee5\u7528\u5230lower_bound\u51fd\u6570\uff09\n\n**\u653e\u4ee3\u7801**\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;\nint t,n,f[1000007],book[1000007*3];  //t\u8868\u793at\u7ec4\u6570\u636e\uff0cn\u8868\u793a\u6709n\u4e2a\u64cd\u4f5c\uff0cf[]\u662f\u6211\u4eec\u5e76\u67e5\u96c6\u7684\u6570\u5b57\uff0cbook[]\u662f\u79bb\u6563\u5316\u7684\u6570\u7ec4 \nstruct node{\n    int x,y,e;\n}a[1000001];  \nbool cmp(node a,node b){\n    return a.e>b.e;\n}//\u6392 \u5e8f\u5c06e==1\u7684\u653e\u5728\u524d\u9762 \ninline void first(int kkk){\n    for(int i=1;i<=kkk;i++)  f[i]=i;\n}//\u521d \u59cb \u5316 \nint get(int x){\n    if(x==f[x]) return x;\n    return f[x]=get(f[x]);\n}\nint main(){\n    scanf(\"%d\",&t);\n    while(t--){\n      int tot=-1;\n      memset(book,0,sizeof(book));\n      memset(a,0,sizeof(a));\n      memset(f,0,sizeof(f));\n    int flag=1;\n        scanf(\"%d\",&n);\n       \n        for(int i=1;i<=n;i++){\n            scanf(\"%d %d %d\",&a[i].x,&a[i].y,&a[i].e);\n            book[++tot]=a[i].x;\n            book[++tot]=a[i].y;\n        }\n        sort(book,book+tot);//\u6392\u5e8f \n        int reu=unique(book,book+tot)-book;  //\u53bb\u91cd \n        for(int i=1;i<=n;++i){\n           a[i].x=lower_bound(book,book+reu,a[i].x)-book;\n           a[i].y=lower_bound(book,book+reu,a[i].y)-book;   \n        } \n        first(reu);   //\u521d\u59cb\u5316 \n        sort(a+1,a+n+1,cmp);  //\u6309e\u6392\u5e8f \n        for(int i=1;i<=n;i++){\n            int r1=get(a[i].x);\n            int r2=get(a[i].y);\n            if(a[i].e){\n                f[r1]=r2;  //\u5c31\u662f\u6211\u4eec\u7684merge\u64cd\u4f5c \n            }else if(r1==r2){\n                printf(\"NO\\n\");\n                flag=0;  //\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6807\u8bb0\u4e3a\u5426 \n                break;\n            }\n        }\n        if(flag)    printf(\"YES\\n\");   //\u90fd\u6ee1\u8db3\u6761\u4ef6\u4e86 \n    }\n    return 0;\n}\n```\n\u4e0d\u61c2\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u79c1\u4fe1\u6211\uff0c\u611f\u8c22\u60a8\u7684\u9605\u8bfb\uff01",
        "postTime": 1533395016,
        "uid": 91559,
        "name": "\u8ffd\u68a6_Chen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "# **#P1955 \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u9898\u89e3**\n**\u5927\u5bb6\u90fd\u5728\u7528algorithm\u5934\u6587\u4ef6\u79bb\u6563\uff0c\u8fd9\u65f6\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5355\u6b21\u6620\u5c04\u67e5\u8be2O\uff08logN\uff09\uff0c\u8fd8\u60f3\u4f18\u5316\u600e\u4e48\u529e\uff1fO\uff081\uff09\u53ef\u4e0d\u53ef\u4ee5\uff1f\uff01** \n\n\n\u4e0b\u9762\u6765\u4ecb\u7ecd\u6211\u7684\u7b97\u6cd5\uff1a\u5229\u7528Hash\u8868\u7ef4\u62a4\u6620\u5c04\n\t\n       \u4e86\u89e3\u54c8\u5e0c\u7684dalao\u77e5\u9053\u5982\u679c\u7ef4\u62a4\u7684\u597d\uff0c\u53ef\u4ee5\u5b9e\u73b0O\uff081\uff09\u67e5\u8be2\n###    \u6211\u6765\u5927\u6982\u70b9\u4e00\u70b9Hash\u8868(\u6563\u5217\u8868\uff09\n\n\t   \u5b83\u4e00\u822c\u7531Hash\u51fd\u6570\u4e0e\u90bb\u63a5\u8868\uff08\u94fe\u8868\u7ed3\u6784\uff09\u5171\u540c\u5b9e\u73b0\uff0c\u4e0e\u79bb\u6563\n    \u5316\u601d\u60f3\u7c7b\u4f3c\uff0c\u4e0e\u79bb\u6563\u5316\u4e0d\u540c\u7684\u662f\uff1a\u540c\u6837\u5c06\u503c\u57df\u3001\u8303\u56f4\u53d8\u5c0f\uff0c\u54c8\u5e0c\n    \u53ef\u80fd\u9020\u6210\u4e24\u4e2a\u539f\u59cb\u503c\u4e0d\u540c\u7684\u4fe1\u606f\u88abHash\u51fd\u6570\u6620\u5c04\u4e3a\u76f8\u540c\u7684\u503c\n    \n       \u6240\u4ee5\u6211\u4eec\u4e3b\u8981\u5904\u7406\u201cHash\u51fd\u6570\u201d\u548c\u201c\u51b2\u7a81\u60c5\u51b5\u201d\n       1. \u4e00\u822cHash\u51fd\u6570\u7684\u6784\u9020\u9700\u8981\u4e00\u4e2amod\u6570\uff0c\u901a\u5e38\u5b9a\u4e49\u4e3a \u4e0d\u5927\u4e8e\n    n\u7684\u6700\u5927\u7d20\u6570 \uff0c\u8fd9\u6837\u968f\u673a\u6570\u636e\u53ef\u4ee5\u5747\u5300\u7684\u6620\u5c04\u5728\u6784\u5efa\u7684\u94fe\u8868\u91cc\u3002\n       2. \u540c\u4e00\u4e2a\u94fe\u4e2d\u53ef\u80fd\u51fa\u73b0\u591a\u4e2a\u6570\uff0c\u6709\u4e00\u79cd\u201c\u5f00\u6563\u5217\u201d\u7684\u89e3\u51b3\u6848\n    \u662f\uff0c\u5c06\u539f\u59cb\u503c\u6620\u5c04\u540e\u503c\u76f8\u540c\u7684\u5f52\u4e3a\u4e00\u7c7b\uff0c\u6784\u6210\u4e00\u4e2a\u94fe\uff0c\u63a5\u5728\u8868\u5934\n    \uff08\u6620\u5c04\u503c\uff09\u4e4b\u540e\uff0c\u6bcf\u6761\u94fe\u7684\u8282\u70b9\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u6570\u636e\uff08\u6211\u8fd9\u9053\u9898\u5c31\n    \u662f\u5229\u7528\u5f00\u6563\u5217\uff09\uff0c\u4e4b\u540e\u4f9d\u6b21\u904d\u5386\u5373\u53ef\uff0c\u56e0\u4e3a\u4f9d\u8d56\u4e8eHash\u51fd\u6570\uff0c\u6784\n    \u9020\u7684\u8d8a\u597d\u8d8a\u63a5\u8fd1O\uff081\uff09\n    \n \u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n ```\n#define Max 100010\n#define mod 99991 \nstruct node{\n\tint real,map;//\u771f\u5b9e\u503c\uff0c\u6620\u5c04\u503c\uff08\u6b64\u6620\u5c04\u975e\u5f7c\u6620\u5c04\uff0c\u6211\u4eec\u9700\u8981map\u53c2\u4e0e\u5e76\u67e5\u96c6\u8fd0\u7b97\uff0creal%mod\u624d\u662fhash\u6620\u5c04\uff09\n}\nvector <node> hash[Max]; \nint tot;//\u5373\u7ed3\u6784\u4f53\u4e2d\u7684map\u6620\u5c04\uff0c\u540e\u9762\u8fd0\u7b97\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u53ea\u8003\u8651\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u65f6\u95f4++tot\uff0c\u800c\u4e0d\u9700\u8981\u4f9d\u9760\u5927\u5c0f\u76f8\u5bf9\u6620\u5c04\uff0c\u8fd9\u91cc\u6ca1\u5fc5\u8981\nint map(int i,int j,bool k)\n{\n\tint x,y,ok=1;\n\tint a = i % mod, b = j % mod;\n  \u4ee5\u4e0b\u5373\u6620\u5c04\u67e5\u8be2\u7684\u8fc7\u7a0b\uff0c\u770b\u4e0d\u61c2\u53d1\u8bc4\u8bba\n\tif(!hash[a].empty()){\n\t\tfor(int l = 0; l < hash[a].size(); l++)\n\t\t\tif(i==hash[a][l].real) x = hash[a][l].map,ok = 0;\n\t\tif(ok) hash[a].push_back((node){i,++tot}),x = tot;\n\t}\n\telse hash[a].push_back((node){i,++tot}),x = tot;\n\tok = 1;\n\tif(!hash[b].empty()){\n\t\tfor(int l = 0; l < hash[b].size(); l++)\n\t\t\tif(j==hash[b][l].real) y = hash[b][l].map,ok = 0;\n\t\tif(ok) hash[b].push_back((node){j,++tot}),y = tot;\n\t}\n\telse hash[b].push_back((node){j,++tot}),y = tot;\n\treturn ask(x,y,k); \n}\n```\n#### \u4e0e\u5176\u4ed6\u9898\u89e3\u533a\u522b\u4e3b\u8981\u5c31\u662f\u79bb\u6563\u65b9\u5f0f\n\u4e0b\u9762AC\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector> \n#define Max 100010\n#define mod 99991 \n\nusing namespace std;\n\nint fa[2*Max],d[2*Max];\nstruct node{\n\tint real,map;\n}un[Max];\nvector <node> hash[Max]; \nint tot,cnt;\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nint ask(int i,int j,bool k)\n{\n\tif(find(i)==find(j)) return 1;\n\telse if(k){\n\t\tfa[find(j)] = find(i);\n\t\treturn 0;\n\t}\n\treturn 0;\n}\nint map(int i,int j,bool k)\n{\n\tint x,y,ok=1;\n\tint a = i % mod, b = j % mod;\n\tif(!hash[a].empty()){\n\t\tfor(int l = 0; l < hash[a].size(); l++)\n\t\t\tif(i==hash[a][l].real) x = hash[a][l].map,ok = 0;\n\t\tif(ok) hash[a].push_back((node){i,++tot}),x = tot;\n\t}\n\telse hash[a].push_back((node){i,++tot}),x = tot;\n\tok = 1;\n\tif(!hash[b].empty()){\n\t\tfor(int l = 0; l < hash[b].size(); l++)\n\t\t\tif(j==hash[b][l].real) y = hash[b][l].map,ok = 0;\n\t\tif(ok) hash[b].push_back((node){j,++tot}),y = tot;\n\t}\n\telse hash[b].push_back((node){j,++tot}),y = tot;\n\treturn ask(x,y,k); \n}\nint main()\n{\n\tint n;\n\tcin >> n;\n\t\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfor(int i = 1; i <= 200010; i++)\n\t\t\tfa[i] = i;\n\t\tfor(int i = 0; i < 100000; i++)\n\t\t\thash[i].clear();\n\t\tmemset(d,0,sizeof(d));\n\t\tmemset(un,0,sizeof(un));\n        //\u4ee5\u4e0a\u6bcf\u6b65\u7684\u521d\u59cb\u5316\u4e0d\u80fd\u4e22\n\t\tcnt = tot = 0;\n\t\tint num,now = 1;\n\t\tcin >> num;\n\t\tfor(int i = 1; i <= num; i++)\n\t\t{\n\t\t\tint x,y,z;\n\t\t\tcin >> x >> y >> z;\n\t\t\tif(z) map(x,y,1);\n\t\t\telse un[++cnt].real = x, un[cnt].map = y;\t\n\t\t}\n\t\tfor(int i = 1; i <= cnt; i++)\n\t\t\tif(map(un[i].real,un[i].map,0)){\n\t\t\t\tnow = 0;\n\t\t\t\tcout << \"NO\" <<endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif(now) cout << \"YES\" << endl;\n\t}\n\treturn 0;\n}\n```\n     \u5bf9\u6bd4\u5176\u4ed6\u9898\u89e3AC\u4ee3\u7801\uff1a3.13s 27.50MB\n                     \u6211\uff1a1.45s 8.52MB\n               \u52a0\u5165\u8bfb\u4f18\uff1a334ms\uff01\uff01\uff01\n\u4e0b\u9762\u8fd8\u9700\u6ce8\u610f\u521d\u59cb\u5316\u95ee\u9898\uff1a\n\n\u6211\u56e0\u4e3afor(int i = 1; i <= 200010; i++)\n\t\t\tfa[i] = i;\n\n\u5199\u6210for(int i = 1; i <= n; i++)\n\t\t\tfa[i] = i;\n            WA\u4e864\u4e2a\u70b9\n          \n\u5199\u6210for(int i = 1; i <= 100000; i++)\n\t\t\tfa[i] = i;\n            WA\u4e86\u7b2c\u4e8c\u4e2a\u70b9\n\n         \u5927\u5bb6\u6709\u610f\u53ef\u4ee5\u7ffb\u6211\u7684\u8bb0\u5f55\uff08\u516c\u5f00\u7684\uff09\n~~\u672c\u849f\u84bb\u4ec5\u6d45\u61c2\u4e00\u4e9b\u6570\u636e\u7ed3\u6784dalao\u52ff\u55b7~~",
        "postTime": 1565426601,
        "uid": 154710,
        "name": "Virvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u6211\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\u5c45\u7136A\u4e86QAQ\uff0c\u90a3\u5c31\u8be6\u7ec6\u8bf4\u4e00\u8bf4\n\n---\n\n## \u5e76\u67e5\u96c6\n\n\u5e76\u67e5\u96c6\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u68ee\u6797\u3002\n\n\u4ee4\u4e00\u6570\u7ec4$f$\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u7238\u7238\uff0c\u7b2c$i$\u4e2a\u7ed3\u70b9\u7684\u7238\u7238\u662f$f_i$\uff0c\u5f53$f_i=i$\u65f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u7684\u7238\u7238\u662f\u81ea\u5df1\uff0c\u5373\u6ca1\u6709\u7238\u7238\u65f6\uff0c\u5b83\u5c31\u662f\u6839\u7ed3\u70b9\u3002\n\n\u5e76\u67e5\u96c6\u6709\u4e24\u79cd\u57fa\u672c\u64cd\u4f5c\uff1a``find``\u548c``merge``\n\n### find\n\n\u4fd7\u79f0\u627e\u7238\u7238\u3002\n\n\u672c\u4eba\u4e60\u60ef\u4e8e\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0\n\n```cpp\nint find(int x)\n{\n\tif(f[x]==x) return x;\n    else return find(f[x]);\n}\n```\n\n\u5373\u53ef\uff0c\u6bd4\u8f83\u7b80\u5355\u8bf7\u81ea\u884c\u7406\u89e3\n\n### merge\n\n\u5408\u5e76\u4e24\u68f5\u6811\uff0c\u76f4\u63a5\u628a\u7b2c2\u68f5\u6811\u7684\u6700\u65e9\u7684\u7956\u5148\u7684\u7238\u7238\u6539\u4e3a\u7b2c1\u68f5\u6811\u7684\u6700\u65e9\u7684\u7956\u5148\n\n\u4ee3\u7801\u5f88\u7b80\u5355\uff1a\n\n```cpp\nvoid merge(int a,int b)\n{\n\tf[find(a)]=find(b);\n}\n```\n\n### \u8def\u5f84\u538b\u7f29\n\n\u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u5f88\u5feb\u8fd9\u68f5\u6811\u5c31\u4f1a\u53d8\u6210\u7c7b\u94fe\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21``find``\u64cd\u4f5c\u7684\u8017\u65f6\u5c31\u4e0d\u80fd\u63a5\u53d7\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528\u4e00\u4e2a\u7ed3\u70b9\u7684\u6700\u65e9\u7684\u7956\u5148\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6bcf\u6b21``find``\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u628a\u8fd9\u4e2a\u7ed3\u70b9\u7684\u7238\u7238\u6539\u6210\u5b83\u6700\u65e9\u7684\u7956\u5148\u3002\n\n\u53ea\u9700\u8981\u628a``find``\u64cd\u4f5c\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\u5373\u53ef\u3002\n\n```cpp\nint find(int x)\n{\n\tif(f[x]==x) return x;\n    else return f[x]=find(f[x]);\n}\n```\n\n---\n\n## \u79bb\u6563\u5316\n\n> \u79bb\u6563\u5316\uff0c\u5c31\u662f\u628a\u65e0\u9650\u7a7a\u95f4\u4e2d\u6709\u9650\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u4ee5\u6b64\u63d0\u9ad8\u7b97\u6cd5\u7684\u65f6\u7a7a\u6548\u7387\u3002\n\n\u6765\u81ea\u767e\u5ea6~~\uff08\u53cd\u6b63\u6211\u4e00\u5f00\u59cb\u6ca1\u770b\u61c2\uff09~~\n\n\u8bb2\u901a\u4fd7\u4e00\u70b9\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u53ef\u4ee5\u5f88\u5927\u7684\u6570\u636e\u6392\u4e2a\u5e8f\uff0c\u53bb\u4e2a\u91cd\uff0c\u653e\u5728\u65b0\u7684\u6570\u7ec4\u91cc\uff0c\u6bcf\u6b21\u7528\u4e8c\u5206\u627e\u5b83\u5728\u65b0\u6570\u7ec4\u7684\u4f4d\u7f6e\u3002\n\n---\n\n## \u5e76\u67e5\u96c6\u548c\u79bb\u6563\u5316\n\n\u628a$x$\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$x$\u8fdb\u884c\u5e76\u67e5\u96c6\u64cd\u4f5c\n\n---\n\n## \u5c06\u6761\u4ef6\u8f6c\u5316\u4e3a\u5e76\u67e5\u96c6\u7684\u57fa\u672c\u64cd\u4f5c\n\n\u4e24\u4e2a$x$\u76f8\u7b49\uff0c\u5219\u76f8\u5f53\u4e8e\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5426\u5219\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u3002\n\n---\n\n## \u7ec6\u8282\n\n\u8fdb\u884c\u9650\u5236\u6761\u4ef6\u7684\u5224\u65ad\u524d\uff0c\u5148\u6309$e$\u6392\u4e2a\u5e8f\uff0c$1$\u5728\u524d\u9762\uff0c$0$\u5728\u540e\u9762\uff0c\u4e3a\u4ec0\u4e48\u8bf7\u81ea\u5df1\u601d\u8003\n\n---\n\n## \u4ee3\u7801\n\n~~\u76f4\u63a5\u590d\u5236\u4f60\u4f1a\u7206\u96f6\u7684~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define maxn 100007\n#define maxnt 1000000007\nstruct node{\n    int a,b,e;\n}a[maxn];\nint ttttt,f[maxn*2],x[maxn*2],n,lsh[maxn*2],nn,wz[maxn*2];\nbool flag;\nvoid mak()\n{\n    for(register int i=1;i<=nn;i++)\tf[i]=i;\n}\nint find(int x)\n{\n    return f[x]==x?x:f[x]=find(f[x]);\n}\nbool comp(int a,int b)\n{\n    return a<b;\n}\nbool cmp(node a,node b)\n{\n    return a.e>b.e;\n}\nint er(int zz)\n{\n    int l=1,r=nn,m;\n    while(l<=r)\n    {\n        m=(l+r)/2;\n        if(lsh[m]==zz) return m;\n        if(zz>lsh[m]) l=m+1;\n        else r=m-1;\n    }\n    return zz;\n}\nint mian()\n{\n    scanf(\"%d\",&ttttt);\n    while(ttttt--)\n    {\n        scanf(\"%d\",&n);\n        nn=0;\n        flag=0;\n        for(register int i=1;i<=n;i++)\n        {\n            scanf(\"%d%d%d\",&a[i].a,&a[i].b,&a[i].e);\n            x[i*2-1]=a[i].a,x[i*2]=a[i].b;\n        }\n        sort(x+1,x+2*n+1,comp);\n        for(register int i=1;i<=2*n;i++)\n        {\n            if(x[i]!=x[i-1])\n            {\n                lsh[++nn]=x[i];\n//\t\t\t\twz[i]=nn;\n            }\n//\t\t\telse wz[i]=wz[i-1];\n        }\n        mak();\n        sort(a+1,a+n+1,cmp);\n        for(register int i=1;i<=n;i++)\n        {\n            if(a[i].e)\n            {\n                int aaa=find(er(a[i].a)),bbb=find(er(a[i].b));\n                if(aaa!=bbb) f[aaa]=bbb;\n            }\n            else\n            {\n                int aaa=find(er(a[i].a)),bbb=find(er(a[i].b));\n                if(aaa==bbb)\n                {\n                    printf(\"NO\\n\");\n                    flag=1;\n                    break;\n                }\n            }\n        }\n        if(!flag) printf(\"YES\\n\");\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1529038750,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6211\u6240\u8ba4\u4e3a\u7684\u6bd4\u8f83\u91cd\u8981\u7684\u9898\u76ee\uff08\u5c3d\u7ba1\u5bf9\u4e8e\u5f88\u591a\u4eba\u6765\u8bf4\u5f88\u7b80\u5355\uff09\u3002  \n\n\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053\u5f88\u5bb9\u6613\u8bc6\u7834\u7684\u5e76\u67e5\u96c6\u88f8\u9898\uff08\u4e5f\u8bb8\u6211\u770b\u5b8c\u9898\u89e3\u524d\u4e0d\u4f1a\u8fd9\u4e48\u8bf4\uff09\uff0c\u6309\u7167\u9898\u76ee\u8981\u6c42\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u4e2a\u5e8f\uff0c\u628a\u5408\u5e76\u64cd\u4f5c\uff08\u9898\u76ee\u4e2d\u6570\u5b57\u8868\u793a\u4e3a1\uff0c\u5373\u4e24\u4e2a\u53d8\u91cf\u76f8\u7b49\uff09\u653e\u5728\u524d\u9762\u9884\u5148\u6267\u884c\uff0c\u518d\u8fdb\u884c\u5224\u65ad\u64cd\u4f5c\uff08\u6570\u5b57\u8868\u793a\u4e3a0\uff0c\u5373\u4e24\u4e2a\u53d8\u91cf\u4e0d\u76f8\u7b49\uff09\u3002  \n\n\u4f46\u662f\u7531\u4e8e\u9898\u76ee\u4e2dx\u7684\u6570\u91cf\u7ea7\u8fbe\u5230\u4e8610^9\uff0c\u968f\u610f\u5f00\u4e00\u4e2a\u8fd9\u6837\u5927\u5c0f\u7684\u5e76\u67e5\u96c6\u6570\u7ec4\uff0c\u90a3\u4e48MLE\u4ee5\u53caCE\u4ec0\u4e48\u7684\u90fd\u5728\u524d\u65b9\u6b22\u8fce\u60a8\u3002\u8fd9\u91cc\u5c31\u8981\u7528\u5230\u672c\u849f\u84bb\u4e0d\u4f1a\u7684\u6bd4\u8f83\u9ad8\u7ea7 \u7684\u79bb\u6563\u5316\uff08\u56e0\u4e3a\u53ea\u670910^6\u4e2a\u64cd\u4f5c\uff0c\u4e0d\u53ef\u80fd1~10^9\u6240\u6709\u7684\u53d8\u91cf\u90fd\u7528\u5230\u4e86\uff09\u3002\n\n\u79bb\u6563\u5316\u4ee5\u540e\u4e00\u5207\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff08\u90fd\u662f\u4e9b\u57fa\u672c\u64cd\u4f5c\uff09\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define R register int\nusing namespace std;\ninline int read()\n{\n    int f=1,x=0; char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n    while(ch<='9'&&ch>='0') x=x*10+ch-'0',ch=getchar();\n    return f*x;\n}\nconst int maxn=100005;\nstruct data\n{\n\tint x,y,e;\n}a[maxn];\ninline bool cmp(data x,data y)\n{\n\treturn x.e>y.e;\n}\nint t,n,f[maxn],b[maxn<<2];//b\u6570\u7ec4\u81f3\u5c11\u8981\u5f00\u4e24\u500d\u5927\u5c0f\uff08\u867d\u7136\u6211\u5f00\u4e864\u500d\uff09\uff0c\u56e0\u4e3a\u521a\u5f00\u59cb\u8981\u540c\u65f6\u8bb0\u5f55\u4e24\u4e2a\u503c\ninline int find(int x)\n{\n\treturn x==f[x]?x:f[x]=find(f[x]);\n}\nint main()\n{\n\tt=read();\n\twhile (t--)\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(b,0,sizeof(b));\n\t\tmemset(f,0,sizeof(f));\n\t\tn=read();int tot=0;\n\t\tfor (R i=1;i<=n;++i)\n\t\t{\n\t\t\ta[i].x=read();a[i].y=read();a[i].e=read();\n\t\t\tb[++tot]=a[i].x;//\u8bb0\u5f55\u8fd9\u4e9b\u503c\n\t\t\tb[++tot]=a[i].y;\n\t\t}\n\t\tsort(b+1,b+1+tot);\n\t\tint tott=unique(b+1,b+1+tot)-b;//algorithm\u4e2d\u7684\u51fd\u6570\uff0c\u628a\u6570\u7ec4\u53bb\u91cd\uff0c\u7136\u540e\u8fd4\u56de\u672b\u5c3e\u6307\u9488\u3002\u8fd9\u91cc\u51cf\u4e00\u4e2ab\u5c31\u53ef\u4ee5\u8868\u793ab\u73b0\u5728\u7684\u5927\u5c0f\u4e86\n\t\tfor (R i=1;i<=n;++i)\n\t\t{\n\t\t\ta[i].x=lower_bound(b+1,b+1+tott,a[i].x)-b;//\u5341\u5206\u5b9e\u7528\u7684lower_bound\uff0c\u5bfb\u627eb\u4e2d>=a[i].x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u6307\u9488\uff08\u56e0\u4e3aa[i].x\u5728b\u4e2d\u4e00\u5b9a\u5b58\u5728\uff0c\u6240\u4ee5\u662f\u76f4\u63a5\u6c42\u51faa[i].x\u79bb\u6563\u5316\u540e\u5bf9\u5e94\u7684\u503c\uff09\uff0c\u51cf\u53bbb\u5c31\u662f\u5b83\u7684\u4f4d\u7f6e\u3002\n\t\t\ta[i].y=lower_bound(b+1,b+1+tott,a[i].y)-b;\n\t\t}\n        //--------------\u4ee5\u4e0b\u4e3a\u6b63\u5e38\u64cd\u4f5c\n\t\tfor (R i=1;i<=tott;++i) f[i]=i;\n\t\tsort(a+1,a+1+n,cmp);\n\t\tbool ff=true;\n\t\tfor (R i=1;i<=n;++i)\n\t\t{\n\t\t\tif (a[i].e==1)\n\t\t\t{\n\t\t\t\tint f1=find(a[i].x),f2=find(a[i].y);\n\t\t\t\tif (f1!=f2)\n\t\t\t\t{\n\t\t\t\t\tf[f1]=f2;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tint f1=find(a[i].x),f2=find(a[i].y);\n\t\t\t\tif (f1==f2)\n\t\t\t\t{\n\t\t\t\t\tff=false;//\u627e\u5230\u4e00\u4e2a\u4e0d\u5408\u7406\u5c31\u53ef\u4ee5\u9000\u51fa\u4e86\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ff==true) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539954260,
        "uid": 28730,
        "name": "bobxie",
        "ccfLevel": 0,
        "title": "P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"
    },
    {
        "content": " \n\n## \u3010\u9898\u89e3\u3011\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\n\nupd2020\u5e7407\u670829\u65e522:47:40:\u6539\u6b63\u4e86\u4e00\u4e2a\u4e8b\u5b9e\u9519\u8bef\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2 n)$(\u6211\u90a3\u65f6\u592a\u83dc\u4e86)\n\nupd2019\u5e7409\u670830\u65e521:15:42:\u6539\u5199\u4e86\u4ee3\u7801\uff0c\u4e4b\u524d\u4ee3\u7801\u592a\u4e11\u4e86\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/winlere/p/10603890.html)\n\n[**P1955** [NOI2015\\]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790](https://www.luogu.org/problemnew/show/P1955) \n\n\u770b\u5230\u5927\u5bb6\u90fd\u662f\u79bb\u7ebf\u505a\u7684\uff0c\u6211\u6765\u53d1\u53d1\u5728\u7ebf\u600e\u4e48\u505a\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u4e0d\u9002\u5408\u4f5c\u4e3a\u5b66\u4e60\u5e76\u67e5\u96c6\u7684\u6587\u7ae0\uff0c\u9002\u5408\u6df1\u5165\u7406\u89e3\u5b83\u3002\n\n\u7b49\u53f7\u663e\u7136\u5177\u6709\u4f20\u9012\u6027:$a=b ,b=c\\ \\rightarrow a=c$\n\n\n\u6211\u4eec\u53d1\u73b0\u4e0d\u7b49\u53f7\u4e0d\u5177\u6709\u4f20\u9012\u6027\n$a\\not =b ,b\\not = c \\ \\ \\rightarrow c \\ \\ ?\\  \\ a$\n\u4f46\u662f\u53d1\u73b0\u5728\u4e00\u79cd\u60c5\u51b5\u4e0b\u5177\u6709\u4f20\u9012\u6027\n$$\na=b ,b\\not =c\\rightarrow a\\not=c\n$$\n\u90a3\u4e48\u6211\u4eec\u540c\u6837\u662f\u5e76\u67e5\u96c6\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u5143\u7d20\u7684\u76f8\u7b49\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u5957\u4e00\u4e2a$set$\uff0c\u7528\u6765\u5b58\u8fd9\u4e2a\u4e0d\u7b49\u4e8e\u8282\u70b9\u7684\u8282\u70b9\u662f\u54ea\u4e9b\uff0c\u540c\u65f6\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u548c\u8def\u5f84\u538b\u7f29\uff0c\u6bcf\u6b21$query$\u7684\u65f6\u5019\u4e00\u8fb9\u628a\u8def\u5f84\u538b\u7f29\u4e00\u8fb9\u628a$set$\u7684\u5185\u5bb9\u5168\u90e8\u79fb\u52a8\u5230\u5f53\u524d\u7684\u6839\u4e0a\u3002\n\n\u5e76\u67e5\u96c6\u590d\u6742\u5ea6$O(n\\log n)$\uff0c\u5173\u4e8eset\u7684\u90a3\u4e00\u5757\u590d\u6742\u5ea6\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u590d\u6742\u5ea6$O(n\\log^2 n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std; typedef long long ll;\ninline int qr(){\n      register int ret=0,f=0;\n      register char c=getchar();\n      while(c<48||c>57)f|=c==45,c=getchar();\n      while(c>=48&&c<=57) ret=ret*10+c-48,c=getchar();\n      return f?-ret:ret;\n}\n\n\nmap<ll, int> mp;\nstruct R {\n      set<int> data;\n      int f;\n}r[200001];\n\ninline int q(const int&x) {\n      int t=x,i=x,temp;\n      while(r[t].f^t) t = r[t].f;\n      while(r[i].f^i){\n\t    if(r[i].data.size())\n\t\t  r[t].data.insert(r[i].data.begin(),r[i].data.end()),r[i].data.clear();\n\t    temp=r[i].f,r[i].f=t,i=temp;\n      }\n      return t;\n}\n\ninline void j(int t1, int t2) {\n      if(r[t1].f==r[t2].f) return;\n      if(r[t1].data.size()<r[t2].data.size())\n\t    swap(t1, t2);\n      for(auto t:r[t2].data) r[q(t)].data.insert(t1);\n      r[t1].data.insert(r[t2].data.begin(),r[t2].data.end());\n      r[t2].data.clear();\n      r[t2].f = t1;\n}\n\nint main(){\n      int T=qr();\n      while(T--){\n\t    int n=qr(),cnt=0,f=1;\n\t    mp.clear();\n\t    for(int t=1;t<=n*2;++t) r[t].f=t,r[t].data.clear();\n\t    for(int t=1,t0,t1,t2;t<=n;++t){\n\t\t  t1=qr();t2=qr();t0=qr();\n\t\t  if(!f)continue;\n\t\t  t1=mp.find(t1)==mp.end()?mp[t1]=++cnt:mp[t1];\n\t\t  t2=mp.find(t2)==mp.end()?mp[t2]=++cnt:mp[t2];\n\t\t  if (t1=q(t1),t2=q(t2),t0)\n\t\t\tif(r[t1].data.find(t2)!=r[t1].data.end()) f=0;\n\t\t\telse j(t1,t2);\n\t\t  else\n\t\t\tif (t1==t2) f=0;\n\t\t\telse r[t1].data.insert(t2),r[t2].data.insert(t1);\n\t    }\n\t    if(f) puts(\"YES\");\n\t    else  puts(\"NO\");\n      }\n      return 0;\n}\n\n```\n\n",
        "postTime": 1553606944,
        "uid": 113460,
        "name": "\u8c01\u662f\u9e3d\u738b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P1955)\n\n\u9898\u610f\u5f88\u660e\u663e\u4e86\uff0c**\u5e76\u67e5\u96c6**\u57fa\u672c\u64cd\u4f5c\n\n**\u6211\u4eec\u628a\u6240\u6709\u64cd\u4f5c\u5b58\u4e0b\u6765\uff0c\u79bb\u7ebf\u5148\u5904\u7406\u5408\u5e76\uff08\u5373\u8981\u6c42\u76f8\u7b49\uff09\uff0c\u518d\u5bf9\u6bcf\u4e2a\u8981\u6c42\u4e0d\u76f8\u7b49\u5224\u65ad\u6839\u662f\u5426\u76f8\u540c\u5373\u53ef**\n\n\u4ee5\u4e0a\u601d\u8def\u5f88\u597d\u60f3\uff0c\u5176\u4ed6\u9898\u89e3\u4e5f\u6709\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u60f3\u8bf4\u7684\u662f\uff1a\n\n## \u79bb\u6563\u5316\n\n* **\u201c\u79bb\u6563\u5316\u201d\u662f\u628a\u65e0\u7a77\u5927\u96c6\u5408\u4e2d\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u6620\u5c04\u4e3a\u6709\u9650\u96c6\u5408\u4ee5\u4fbf\u4e8e\u7edf\u8ba1\u7684\u65b9\u6cd5**\n\n\u9996\u5148\u7531\u9898\u76ee$i$\uff0c$j$\u7684\u89c4\u6a21\uff1a**1<=i,j<=1e9**\n\u53ef\u77e5\u9700\u8981\u79bb\u6563\u5316 \n\n\u79bb\u6563\u5316\u4e00\u822c\u6709\u4e09\u79cd\u65b9\u6cd5\n\n## 1.map\n\n\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\uff0c\u4e0d\u8fc7\u4f3c\u4e4e\u5bb9\u6613\u88ab\u5361\uff0c\u8fd9\u91cc\u4e0d\u8ba8\u8bba\n\n## 2.unique\u51fd\u6570\n\n**algorithm\u4e2d\u7684\u51fd\u6570,\u628a\u6570\u7ec4\u53bb\u91cd(\u4e0d\u771f\u6b63\u628a\u91cd\u590d\u7684\u5143\u7d20\u5220\u9664),\u7136\u540e\u8fd4\u56de\u672b\u5c3e\u6307\u9488**\uff08\u67d0\u9898\u89e3\uff09\n\n\u8fd9\u4e5f\u662f\u5927\u591a\u6570\u9898\u89e3\u4f7f\u7528\u7684\u65b9\u6cd5\n\n\u6211\u4e00\u5f00\u59cb\u662f\u8fd9\u6837\u5199\u7684\uff1a\uff08\u6ce8\u91ca\u6765\u81ea\u67d0\u9898\u89e3\uff09\n```cpp\nil void lsh(){\t\t\t\t\t\t//\u79bb\u6563\u5316  \n    sort(book+1,book+cnt+1);\n    reu=unique(book+1,book+cnt+1)-book; \n    //algorithm\u4e2d\u7684\u51fd\u6570,\u628a\u6570\u7ec4\u53bb\u91cd,\u7136\u540e\u8fd4\u56de\u672b\u5c3e\u6307\u9488.\u8fd9\u91cc\u51cf\u4e00\u4e2ab\u5c31\u53ef\u4ee5\u8868\u793ab\u73b0\u5728\u7684\u5927\u5c0f\u4e86 \n\tfor(re int i=1;i<=n;++i){\n\t\ta[i].x=lower_bound(book+1,book+reu+1,a[i].x)-book;\t\n        //\u5341\u5206\u5b9e\u7528\u7684lower_bound,\u5bfb\u627eb\u4e2d>=a[i].x\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u6307\u9488 \n        //\u56e0\u4e3ax\u5728b\u4e2d\u4e00\u5b9a\u5b58\u5728,\u6240\u4ee5\u662f\u76f4\u63a5\u6c42\u51fax\u79bb\u6563\u5316\u540e\u5bf9\u5e94\u7684\u503c,\u51cf\u53bbb\u5c31\u662f\u5b83\u7684\u4f4d\u7f6e  \n        a[i].y=lower_bound(book+1,book+reu+1,a[i].y)-book;\n\t}\n}\n\n```\n\n\u7136\u540e\u6211wa\u4e86\u7b2c\u4e09\u4e2a\u70b9 \u6d4b\u51fa\u6211\u9519\u8bef\u7684\u6570\u636e\u662f\uff1a\n```cpp\n2\n4\n8 2 0\n2 9 1\n2 7 1\n9 7 0\n3\n9 2 0\n1 3 1\n2 3 1\n\nNO\nYES\n```\n\u6211\u4ed4\u7ec6\u5bf9\u7167\u9898\u89e3\uff0c\u53d1\u73b0\u6211\u52a0\u4e0a\uff08pre\u5c31\u662f\u7956\u5148\u6570\u7ec4\uff09\n```cpp\nmemset(pre,0,sizeof(pre));\t\n\n```\n\u5c31AC\u4e86\n\n\u4f46\u6211\u60f3\u4e0d\u660e\u767d\u554a\n**\u6309\u7406\u8bf4pre\u6bcf\u6b21\u4f7f\u7528\u524d\u4f1a\u6709\u521d\u59cb\u5316\u4e3a\u81ea\u5df1\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u4f7f\u7528\u7684\u90e8\u5206\u660e\u660e\u53ef\u4ee5\u76f4\u63a5\u8986\u76d6**\n```cpp\n for(re int i=1;i<=reu;++i) pre[i]=i;\n```\n\n\u5f53\u6211\u8f93\u51fa\u4e00\u4e9b\u4e2d\u95f4\u53d8\u91cf\u65f6\u53d1\u73b0\n```cpp\n\u5bf9\u4e8e\n3\n9 2 0\n1 3 1\n2 3 1\n\n\u6620\u5c04\u51fa\u6765\n1->1 2->2 3->3 9->6 \uff08what\uff1f\u548c\u81ea\u5df1\u60f3\u7684\u4e0d\u4e00\u6837\u554a\uff09\n\u800c\u6b64\u65f6reu=5\nmemset\u540e\u8be2\u95ee\u65f6 \u4e00\u4e2a\u6570\u7684\u6839\u4e3a0 \u624d\u5f97\u5230\u6b63\u786e\u7b54\u6848\n```\n\n\u90a3\u4e48\u5173\u4e8e**unique\u79bb\u6563\u5316\u7684\u6b63\u786e\u6027\uff1f\uff1f**\n\n\u7f51\u4e0a\u5404\u79cd\u535a\u5ba2\u770b\u4e0d\u61c2\uff0c\u5bf9unique\u5b8c\u5168\u4e0d\u77e5\u9053\u600e\u4e48\u7528\uff0c\u5b83\u8fd4\u56de\u7684\u5230\u5e95\u662f\u4ec0\u4e48\u5462\uff1f\uff1f\n\n**\u6c42dalao\u8bc4\u8bba\u533a\u89e3\u60d1QAQ**\n\n## 3.\u4e0d\u4f7f\u7528map/unique\n\n\u6a21\u677f\uff1a\n```cpp\nil void lsh(){\n    sort(book+1,book+cnt+1);\n\tfor(re int i=1;i<=cnt;++i)\n\t\tif(i==1||book[i]!=book[i-1]) b[++m]=book[i];\n}\nil int query(int x){\n\treturn lower_bound(b+1,b+m+1,x)-b;\n}\n\n```\n\u4e0d\u9700\u8981\u5bf9pre\u521d\u59cb\u53160 \n\n\u4e2d\u95f4\u6570\u636e\n```cpp\n2 -> 1\n7 -> 2\n8 -> 3\n9 -> 4\nNO\n1 -> 1\n2 -> 2\n3 -> 3\n9 -> 4\nYES\n```\n\u55ef\u8fd9\u624d\u662f\u6211\u60f3\u8981\u7684\u6620\u5c04\n\n### AC\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define re register\n#define il inline\n#define ll long long\nusing namespace std;\n\ninline int read(){\n    int s=0,f=0;char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-'),c=getchar();\n    while(c>='0'&&c<='9') s=(s<<3)+(s<<1)+(c^'0'),c=getchar();\n    return f?-s:s;\n}\n\nconst int N=1e5+5;\nint t,n,pre[N],cnt;\nstruct no{\n    int x,y,op;\n}a[N];\nil bool cmp(no x,no y){return x.op>y.op;}\n\nint book[N<<2],b[N<<2],m;\n\nil void init(){\n    for(re int i=1;i<=m;++i) pre[i]=i;\n}\nint find(int x){\n    return pre[x]==x?x:pre[x]=find(pre[x]);\n}\nbool fl;\n\nil void lsh(){\n    sort(book+1,book+cnt+1);\n\tfor(re int i=1;i<=cnt;++i)\n\t\tif(i==1||book[i]!=book[i-1]) b[++m]=book[i];\n}\nil int query(int x){\n\treturn lower_bound(b+1,b+m+1,x)-b;\n}\nint main(){\n    t=read();\n    while(t--){\n        memset(book,0,sizeof(book));cnt=m=0,fl=1;\n    \t\n        n=read();\n        for(re int i=1;i<=n;++i){\n            a[i].x=read(),a[i].y=read(),a[i].op=read();\n            book[++cnt]=a[i].x,book[++cnt]=a[i].y;\n        } \n        \n        lsh();\n        \n        sort(a+1,a+n+1,cmp);\n        init();\n        for(re int i=1;i<=n;++i){\n            int x=query(a[i].x),y=query(a[i].y);\n            int fx=find(x),fy=find(y);\n            if(a[i].op==1) pre[fx]=fy;\n            else if(fx==fy){\n                puts(\"NO\");fl=0;break;\n            } \n        }\n        if(fl) puts(\"YES\");\n    }\n    return 0;\n}\n\n```\n**\u6c42\u89e3\u60d1**",
        "postTime": 1560861386,
        "uid": 103655,
        "name": "\u4e00\u53ea\u840c\u65b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u9996\u5148\u660e\u786e\u4e00\u70b9\uff1a\u76f8\u7b49\u5177\u6709\u4f20\u9012\u6027\uff0c\u4e0d\u76f8\u7b49\u4e0d\u5177\u6709\u4f20\u9012\u6027\uff08Eg:\u82e5x1\u7b49\u4e8ex2,x2\u7b49\u4e8ex3\u65f6,\u663e\u7136x1=x3\u3002\u4f46\u5f53x1\u4e0d\u7b49\u4e8ex2,x2\u4e0d\u7b49\u4e8ex3\u65f6,x1\u4e0d\u4e00\u5b9a\u4e0d\u7b49\u4e8ex3\uff09\u3002\n\n\u56e0\u6b64\uff0c**\u6240\u6709ei\u76f8\u7b49\u7684\u7684\u7ea6\u675f\u6761\u4ef6\u4e4b\u95f4\u4e92\u4e0d\u51b2\u7a81\u3002**\n\n\u6240\u4ee5\uff0c**\u53ea\u6709\u5728\u5f53ei=0\u7684\u7ea6\u675f\u6761\u4ef6\u4e0e\u5df2\u6709\u7684\u5176\u4ed6ei=1\u7684\u7ea6\u675f\u6761\u4ef6\u53d1\u751f\u51b2\u7a81\u65f6\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8f93\u51faNO\u3002**\n\n\u5927\u4f53\u601d\u8def\uff1a\n\n\u5f00\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u76f8\u7b49\u7684\u6570\u7684\u96c6\u5408:\n\n1.\u5c06\u5f62\u4f3c(xi,xj,ei(=1))\u7684\u7ea6\u675f\u6761\u4ef6\u770b\u505a\u4e3a\u4e00\u4e2a\u5c06xi,xj\u4e24\u4e2a\u6570\u6240\u5c5e\u7684\u96c6\u5408\u5408\u5e76\u4e3a\u4e00\u4e2a\u96c6\u5408\u7684\u64cd\u4f5c\uff08\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e2a\u7b80\u5355\u7684\u5e76\u67e5\u96c6\u5408\u5e76\uff09\uff1b\n\n2.\u5c06\u5f62\u4f3c(xi,xj,ei(=0))\u7684\u7ea6\u675f\u6761\u4ef6\u770b\u505a\u4e00\u4e2a\u8be2\u95ee\u64cd\u4f5c\u3002\u5982\u679cfa[xi]=fa[xj],\u90a3\u4e48\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u5373\u4e3a\u53d1\u751f\u4e86\u51b2\u7a81\uff08fa[xi]=fa[xj]\u8bf4\u660exi=xj\uff0c\u4f46\u5f53\u524d\u7684\u7ea6\u675f\u6761\u4ef6\u544a\u8bc9\u4f60xi\u4e0d\u7b49\u4e8exj\uff0c\u6545\u51b2\u7a81\uff09\u3002\n\n**\u63d0\u9192\uff1a\u5148\u6267\u884cei=1\u7684\u64cd\u4f5c\uff0c\u518d\u6267\u884cei=0\u7684\u64cd\u4f5c\uff08\u56e0\u4e3a\u6211\u4eec\u662f\u62ffei=0\u7684\u64cd\u4f5c\u53bb\u548c\u6240\u6709ei=1\u7684\u64cd\u4f5c\u53bb\u6bd4\u8f83\u770b\u662f\u5426\u51b2\u7a81\uff09\u3002**\n\n\u6700\u540e\u6ce8\u610fxi\u548cxj\u7684\u6570\u636e\u8303\u56f4\uff081<=xi,xj<=1e9),\u6240\u4ee5\u79bb\u6563\u5316\u8f93\u5165\u7684xi,xj\uff08\u4e0d\u7136\u5e76\u67e5\u96c6\u6570\u7ec4\u5f00\u4e0d\u4e0b\uff09\u3002\n\n**Code\uff1a**### \n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<map>\n#define ri register int\nusing namespace std;\n\nconst int MAXN=200020;\nint t,n,fa[MAXN],tot,cnt[MAXN],sum,sj,r1,r2;\nstruct node{\n    int x1,x2,e;\n}inf[MAXN];\nmap<int,int>hs;//\u501f\u7528map\u79bb\u6563\u5316x1,x2\n\ninline int read()\n{\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\tch=getchar();\n    while('0'<=ch&&ch<='9')\n    {\n        x=(x << 3)+(x << 1)+(ch-'0');\n        ch=getchar();\n    }\n    return x;\n}\n\nbool cmp(node a,node b)//\u5c06\u7ea6\u675f\u6761\u4ef6\u4e2dei=1\u7684\u64cd\u4f5c\u653e\u5230\u524d\u9762\u64cd\u4f5c \n{\n    return a.e > b.e;\n}\n\nint find(int x)//\u67e5\u8be2x\u6240\u5728\u96c6\u5408\u7684\u6807\u53f7 \n{\n    if(x==fa[x])\treturn x;\n    return fa[x]=find(fa[x]);//\u8def\u5f84\u538b\u7f29\n}\n\nvoid work()\n{\n    tot=0;//tot:\u8bb0\u5f55cnt\u6570\u7ec4\u7684\u5927\u5c0f \n    //\u56e0\u4e3a\u5fd8\u5199\u8fd9\u53e5\u8bdd\u53c8\u8c03\u4e86\u5c06\u8fd1\u4e00\u4e2a\u5c0f\u65f6\u554a\u554a\u554a\n    n=read();\n    for(ri i=1;i<=n;i++)\n    {\n        inf[i].x1=read(),inf[i].x2=read(),inf[i].e=read();\n        cnt[++tot]=inf[i].x1,cnt[++tot]=inf[i].x2;//\u5c06x1,x2\u538b\u5012cnt\u6570\u7ec4\u4e2d\uff0c\u65b9\u4fbf\u79bb\u6563\u3002 \n    }\n    \n    sort(cnt+1,cnt+tot+1);\n    hs[cnt[1]]=1,sum=1;\n    for(ri i=2;i<=tot;i++)//\u79bb\u6563\u5316 \n        if(cnt[i]!=cnt[i-1])\ths[cnt[i]]=++sum;\n        \n    for(ri i=1;i<=sum;i++)\tfa[i]=i;\n    sort(inf+1,inf+n+1,cmp);//\u6ce8\u610f\u5148\u6267\u884cEi=1\u7684\u64cd\u4f5c\uff0c\u518d\u9010\u4e00\u5224\u65adEi=0\u7684\u64cd\u4f5c\u662f\u5426\u4e0e\u4ee5\u524d\u7684\u76f8\u7b49\u5173\u7cfb\u4e92\u76f8\u51b2\u7a81\u3002 \n    sj=n+1;//\u521d\u59cb\u5316sj\uff08\u6ca1\u8fd9\u53e5\u8bdd\u4f1a\u6267\u884cwork\u51fd\u6570\u4e2d\u6700\u540e\u7684\u90a3\u4e00\u4e2afor\u5faa\u73af\uff09 \n    for(ri i=1;i<=n;i++)\n    {\n        if(!inf[i].e)\t{ sj=i; break;}\n        inf[i].x1=hs[inf[i].x1],inf[i].x2=hs[inf[i].x2];\n        r1=find(inf[i].x1),r2=find(inf[i].x2);\n        if(r1!=r2)\tfa[max(r1,r2)]=min(r1,r2);\n    }\n    \n    bool flag=0;\n    for(ri i=sj;i<=n;i++)//\u67e5\u8be2ei=0\u7684\u7ea6\u675f\u6761\u4ef6\u662f\u5426\u4e0e\u4e4b\u524dei=1\u7684\u7ea6\u675f\u6761\u4ef6\u51b2\u7a81 \n    {\n        inf[i].x1=hs[inf[i].x1],inf[i].x2=hs[inf[i].x2];\n        r1=find(inf[i].x1),r2=find(inf[i].x2);\n        if(r1==r2)\t{ flag=1; break; }\n        //fa[xi]=fa[xj]\u8bf4\u660exi=xj\uff0c\u4f46\u5f53\u524d\u7684\u7ea6\u675f\u6761\u4ef6\u544a\u8bc9\u4f60xi\u4e0d\u7b49\u4e8exj\uff0c\u6545\u51b2\u7a81\n    }\n    if(flag)\tcout<<\"NO\"<<'\\n';\n    if(!flag)\t cout<<\"YES\"<<'\\n';\n}\n\nint main()\n{\n    t=read();\n    for(ri i=1;i<=t;i++)\twork();\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1538125791,
        "uid": 53774,
        "name": "\u5403\u74dc\u7fa4\u4f17syc",
        "ccfLevel": 0,
        "title": "P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"
    },
    {
        "content": "~~\uff08\u770b\u6ca1\u6709\u4eba\u5199\u4f7f\u7528 vector \u7684\u9898\u89e3\uff0c\u524d\u6765\u6c34\u4e00\u53d1\uff09~~  \n\n\u601d\u8def\u548c\u5927\u5bb6\u90fd\u4e00\u6837\uff0c\u5c31\u662f\u79bb\u6563\u5316+\u5e76\u67e5\u96c6\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxN = 2e5 + 10;\nstruct node {\n\tint x, y, e;\n\tbool operator < (const node &rhs) const {\n\t\treturn e > rhs.e;\n\t}\n} data[maxN];\nint n, T;\nint par[maxN];\nvoid init(int len) {\n\tfor (int i = 1; i <= len; i++) par[i] = i;\n}\nint find(int x) {\n\treturn par[x] == x ? x : par[x] = find(par[x]);\n}\nbool same(int x, int y) {\n\treturn find(x) == find(y);\n}\nvoid unite(int x, int y) {\n\tif (!same(x, y)) par[find(y)] = par[x];\n}\nint main() {\n\tscanf(\"%d\", &T);\n\twhile (T--) {\n\t\tvector<int> vec;\n\t\tbool flag = true;\n\t\tmemset(data, 0, sizeof(data));\n\t\tmemset(par, 0, sizeof(par));\n\t\tscanf(\"%d\", &n);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tscanf(\"%d%d%d\", &data[i].x, &data[i].y, &data[i].e);\n\t\t\tvec.push_back(data[i].x);\n\t\t\tvec.push_back(data[i].y);\n\t\t}\n\t\tsort(vec.begin(), vec.end());\n\t\tvec.erase(unique(vec.begin(), vec.end()), vec.end());\t// vector \u7684\u53bb\u91cd\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tdata[i].x = lower_bound(vec.begin(), vec.end(), data[i].x) - vec.begin();\n\t\t\tdata[i].y = lower_bound(vec.begin(), vec.end(), data[i].y) - vec.begin();\n\t\t}\n\t\tinit(vec.end() - vec.begin());\t// \u8fd9\u91cc\u7528\u65b0\u7684 vector \u7684\u957f\u5ea6\u6765\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\t\tsort(data + 1, data + n + 1);\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (data[i].e) unite(data[i].x, data[i].y);\n\t\t\telse if (same(data[i].x, data[i].y)) flag = false;\n\t\tprintf(\"%s\\n\", flag ? \"YES\" : \"NO\");\n\t}\n}\n```",
        "postTime": 1537858341,
        "uid": 46833,
        "name": "hawa130",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u9996\u5148\u5c06\u6240\u6709\u7684$i$\u548c$j$\u79bb\u6563\u5316\u3002\n\n\u5148\u5904\u7406\u76f8\u7b49\u7684\u6761\u4ef6\u3002\u56e0\u4e3a\u76f8\u7b49\u5177\u6709\u4f20\u9012\u6027\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u76f8\u7b49\u5173\u7cfb\uff0c\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u53d8\u91cf\u5168\u90e8\u76f8\u7b49\u3002\u5373\u8fde\u8fb9$(i,j)$\u3002\n\n\u7136\u540e\u5904\u7406\u4e0d\u7b49\u7684\u6761\u4ef6\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c$i$\u548c$j$\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u90a3\u4e48\u5c31\u540c\u65f6\u5b58\u5728$x_i=x_j$\u548c$x_i\\neq y_i$\uff0c\u8fd9\u663e\u7136\u662f\u77db\u76fe\u7684\u3002\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709\u7684\u4e0d\u7b49\u6761\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7684$i$\u548c$j$\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u90a3\u4e48\u4e0d\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0c\u5426\u5219\u53ef\u4ee5\u88ab\u6ee1\u8db3\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 2e5 + 5;\nint n, m, fa[N], a[N];\nstruct cyx {\n    int x, y, op;\n} que[N];\nint cx(int x) {\n    if (fa[x] != x) fa[x] = cx(fa[x]);\n    return fa[x];\n}\nvoid zm(int x, int y) {\n    int ix = cx(x), iy = cx(y);\n    if (ix != iy) fa[iy] = ix;\n}\nvoid work() {\n    int i, tot = 0; n = read();\n    for (i = 1; i <= n; i++) a[++tot] = que[i].x = read(),\n        a[++tot] = que[i].y = read(), que[i].op = read();\n    sort(a + 1, a + tot + 1); m = unique(a + 1, a + tot + 1) - a - 1;\n    for (i = 1; i <= n; i++) {\n        que[i].x = lower_bound(a + 1, a + m + 1, que[i].x) - a;\n        que[i].y = lower_bound(a + 1, a + m + 1, que[i].y) - a;\n    }\n    for (i = 1; i <= m; i++) fa[i] = i;\n    for (i = 1; i <= n; i++) if (que[i].op == 1)\n        zm(que[i].x, que[i].y);\n    for (i = 1; i <= n; i++) if (que[i].op == 0 && cx(que[i].x) == cx(que[i].y))\n        return (void) (puts(\"NO\")); puts(\"YES\");\n}\nint main() {\n    int T = read();\n    while (T--) work();\n    return 0;\n}\n```",
        "postTime": 1508641263,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0a\u5404\u4f4d\u90fd\u662f\u7528\u79bb\u6563\u5316\uff0cO(nlogn)\u7684\u590d\u6742\u5ea6\uff0c\u6211\u5c31\u6765\u4e00\u53d1\u4e0d\u7528\u4efb\u4f55STL\u7eaf\u624b\u5199\u7684\u54c8\u5e0c\u8868\uff0c\u590d\u6742\u5ea6O(n)\uff0c\u4f18\u4e8e\u79bb\u6563\u5316\n\n\u79bb\u6563\u5316\u9002\u7528\u4e8e\u6570\u636e\u4e4b\u95f4\u9700\u8003\u8651\u5927\u5c0f\u5173\u7cfb\u7684\u9898\u76ee\uff0c\u6b64\u9898\u4e0d\u8003\u8651\u5927\u5c0f\u5173\u7cfb\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u5c31\u53ef\u4ee5\u4e86\n\n\u9996\u5148\uff0c\u9700\u8981\u9009\u4e00\u4e2a1000000\u5de6\u53f3\u7684\u6a21\u6570\n\n\u4e4b\u540e\uff0c\u6bcf\u8f93\u5165\u4e00\u884c\uff0c\u82e5e=0\uff0c\u5c31\u7528\u6570\u7ec4\u8bb0\u5f55i,j\uff0c\u5426\u5219\u5c31\u5c06i,j\u5b58\u5165\u54c8\u5e0c\u8868\uff0c\u540c\u65f6\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1a\n```cpp\ninline int ins(ci&x){\n\tri v=x%M;//M\u4e3a\u6a21\u6570\n\tif(he[v]==0){\n\t\tne[++t]=0,to[t]=x,he[v]=t;\n\t\tst[++tp]=v,f[t]=t;//st\u6570\u7ec4\u662f\u4f18\u5316\u6e05\u7a7a\u7528\u7684\uff0cf\u4e3a\u5e76\u67e5\u96c6\u7684\u6570\u7ec4\n\t\treturn t;//\u8fd9\u91cc\u8fd4\u56de\u503c\u4e3a\u5bf9\u5e94\u7684\u4f4d\u7f6e\n\t}\n\tfor(ri i=he[v];i;i=ne[i]){\n\t\tif(to[i]==x)return i;//\u5982\u679c\u5df2\u7ecf\u5b58\u5165\u5c31\u76f4\u63a5\u8fd4\u56de\n\t}\n\tne[++t]=he[v],to[t]=x,he[v]=t,f[t]=t;\n\treturn t;\n}\n```\n\u63a5\u4e0b\u6765\u5224\u65ad\u6240\u6709e=0\u7684\u60c5\u51b5\uff0c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\uff0c\u6b64\u65f6\u9700\u8981\u7528\u5230\u54c8\u5e0c\u8868\u67e5\u627e\u64cd\u4f5c\uff1a\n```cpp\ninline int qry(ci&x){\n\tri v=x%M;\n\tfor(ri i=he[v];i;i=ne[i]){\n\t\tif(to[i]==x)return i;//\u8fd4\u56de\u5bf9\u5e94\u4f4d\u7f6e\n\t}\n\treturn 0;//\u6ca1\u627e\u5230\u5c31\u8fd4\u56de0\n}\n```\n\u5224\u65ad\u7684\u90e8\u5206\uff1a\n```cpp\nfor(ri i=0;i<u;i++){\n\tif(a[i]==b[i]){//\u7279\u5224i,j\u76f8\u7b49\u7684\u60c5\u51b5\n\t\tputs(\"NO\");\n\t\tgoto END;\n\t}\n\tp=qry(a[i]),q=qry(b[i]);\n\tif(p&&q&&getf(p)==getf(q)){//\u82e5p\u4e0eq\u5728\u540c\u4e00\u96c6\u5408\u4e2d\u5c31\u9000\u51fa\n\t\tputs(\"NO\");\n\t\tgoto END;\n\t}\n}\nputs(\"YES\");//\u672a\u9000\u51fa\u5c31\u8f93\u51faYES\nEND:;\n```\n\u6ce8\u610f\u591a\u6d4b\u8981\u6e05\u7a7a\uff1a\n```cpp\nvoid clr(){\n\twhile(tp)he[st[tp--]]=0;//\u4f18\u5316\uff0c\u628a\u6539\u53d8\u4e86he\u503c\u7684v\u5168\u90e8\u5b58\u5165\u6808\uff0c\u4e4b\u540e\u53ea\u9700\u6e05\u7a7a\u6808\u4e2d\u7684\u6570\n\tt=u=0;\n}\n```\n\u8fd8\u8981\u6ce8\u610f\u5e76\u67e5\u96c6\u9700\u8981\u8def\u5f84\u538b\u7f29\uff1a\n```cpp\ninline int getf(ci&x){\n\treturn f[x]==x?x:f[x]=getf(f[x]);\n}\n```\n[AC\u8bb0\u5f55\uff0c\u65e0O2\u4ec5301ms](https://www.luogu.org/record/23736258)",
        "postTime": 1567867979,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u662f\u5f88\u6c34\u7684QAQ\n\n------------\n\n\u5e76\u67e5\u96c6\u7684\u601d\u8def\u5df2\u7ecf\u5f88\u660e\u663e\u4e86:\u9996\u5148\u628a\u201c\u76f8\u7b49\u201d\u7684\u6761\u4ef6\u641e\u597d\uff0c\u4e5f\u5c31\u662f\u7528\u5e76\u67e5\u96c6\u5e76\u8d77\u6765\u3002\u4e4b\u540e\u904d\u5386\u6240\u6709\u201c\u4e0d\u7b49\u201d\u7684\u6761\u4ef6\uff0c\u53ea\u8981\u6709\u4e00\u5bf9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5c31\u4e0d\u53ef\u80fd\u6ee1\u8db3\u3002\n\n------------\n\n\u7136\u800c\uff0c\u6570\u636e\u8303\u56f4\u4e2di,j<=1e9\uff0c\u8fd9\u4e2a\u6761\u4ef6\u975e\u5e38\u7684\u8df3\u3002\u6211\u4eec\u8981\u5148\u7528\u79bb\u6563\u5316\u641e\u4e00\u4e0b\u3002\u697c\u4e0a\u7684\u5927\u4f6c\u4eec\u90fd\u662f\u7528\u7684sort+unique\uff0c\u8fd9\u91cc\u6211\u6362\u4e2a\u65b9\u6cd5\uff1a\u7528map\u6620\u5c04\u3002\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u662f\uff1a\u6bcf\u8bfb\u5230\u4e00\u4e2a\u5728Map\u91cc\u6ca1\u6709\u6620\u5c04\u7684i(\u6216j)\uff0c\u6211\u4eec\u5c31\u521b\u5efa\u4e00\u4e2a\u6620\u5c04\u3002\u6700\u7ec8\uff0cMap\u91cc\u7684value\u90fd\u5728[1,2n]\u8fd9\u4e2a\u533a\u95f4\u91cc\uff0c\u63a5\u4e0b\u6765\u5c31\u5f88\u597d\u641e\u4e86\u3002\n\n------------\n\n\u554a\uff0c\u8fd8\u6709\uff0c\u4e0a\u9762\u90a3\u4e2a2n\u5f88\u91cd\u8981\uff0c\u6211\u7b2c\u4e00\u6b21\u5f00\u4e86n\u7684\u7a7a\u95f4\uff0c\u7ed3\u679c\u57fa\u4f6c\u7d2b\u4e86\u3002\n\n------------\n\n\u9644AC\u4ee3\u7801ORZ\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,n,x,y,e,fa[200005],flag,cnt;\nvector<pair<int,int> >vec;\nmap<int,int>Map;\nvoid init(){\n    for(int i=1;i<=2*n;++i)fa[i]=i;\n}\nint fd(int x){\n    return fa[x]==x?x:fa[x]=fd(fa[x]);\n}\nbool in_one(int x,int y){\n    return fd(x)==fd(y);\n}\nvoid U(int x,int y){\n    fa[fd(x)]=fd(y);\n}\nint main(){\n    ios::sync_with_stdio(0);\n    cin>>t;\n    while(t--){\n        Map.clear();\n        cnt=0;\n        cin>>n;\n        vec.clear();\n        init();\n        flag=0;\n        for(int i=1;i<=n;++i){\n            cin>>x>>y>>e;\n            if(Map.find(x)!=Map.end())x=Map[x];\n            else {Map[x]=++cnt;x=cnt;}\n            if(Map.find(y)!=Map.end())y=Map[y];\n            else {Map[y]=++cnt;y=cnt;}\n            if(e){\n                U(x,y);\n            }else{\n                vec.push_back(make_pair(x,y));\n            }\n        }\n        for(vector<pair<int,int> >::iterator it=vec.begin();it!=vec.end();++it){\n            if(in_one(it->first,it->second)){\n                cout<<\"NO\"<<endl;\n                flag=1;\n                break;\n            }\n        }\n        if(!flag)cout<<\"YES\"<<endl;\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1540691713,
        "uid": 112316,
        "name": "Linne",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u5f88\u666e\u901a\u7684\u5e76\u67e5\u96c6\uff0c\u628a\u76f8\u7b49\u7684\u6570\u5408\u5e76\uff0c\u7528\u4e0d\u76f8\u7b49\u7684\u6761\u4ef6\u6765\u5224\u65ad\uff0c\u5982\u679c\u5df2\u7ecf\u5408\u5e76\u7684\u4e24\u4e2a\u6570\u5374\u4e0d\u76f8\u7b49\u5219\u8f93\u51fa\u201cNo\u201d\u3002\u81f3\u4e8e\u79bb\u6563\u5316\u6211\u592a\u83dc\u4e86\u6211\u4e5f\u4e0d\u6e05\u695a\u662f\u4ec0\u4e48\uff0c\u968f\u4fbf\u819c\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\uff08\u53ef\u4ee5\u8bd5\u8bd5\u4f60\u5973\u670b\u53cb\u7684\u751f\u65e5\uff09\uff0c\u4e0d\u591a\u8bf4\u4e86\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\nusing namespace std;\nlong long father[1000001];\nlong long w1[100001],w2[100001];\nint find(int x)\n{\n    if(father[x]==x)return father[x];\n    father[x]=find(father[x]);\n    return father[x];\n}\nvoid unionn(int r1,int r2)\n{\n    father[r1]=r2;\n}\nint main()\n{\n    int g;\n    cin>>g;\n    for(int k=1;k<=g;k++)\n    {\n        long long n,x,y,e,tot=0,pd=0;\n        cin>>n;\n        for(int i=1;i<=1000001;i++)\n            father[i]=i;\n        for(int i=1;i<=n;i++)\n        {\n            cin>>x>>y>>e;\n            x%=520817;\n            y%=520817;\n            if(e==1)\n            {\n                int r1=find(x);\n                int r2=find(y);\n                unionn(r1,r2);\n            }\n            else\n            {\n                w1[++tot]=x;\n                w2[tot]=y;\n            }\n        }\n        for(int i=1;i<=tot;i++)\n            if(find(w1[i])==find(w2[i]))\n                pd=1;\n        if(pd==1)cout<<\"NO\"<<endl;\n        else cout<<\"YES\"<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1508050942,
        "uid": 49248,
        "name": "Slr\u795e\u9f99\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u601d\u8def\u662f\u5148\u628a\u7b49\u53f7\u7684\u4e24\u4e2a\u6570\u7528\u5e76\u67e5\u96c6\u8fde\u8d77\u6765\u3002\n\n\n\u518d\u626b\u4e00\u904d\u4e0d\u7b49\u53f7\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5c31NO\uff0c\u8fd4\u56de\u3002\n\n\n\u5982\u679c\u6210\u529f\u626b\u5b8c\u4e86\uff0c\u8f93\u51faYES\u3002\n\n\n\u4f46\u662f\u8fd9\u9898\u6570\u636e\u8fd9\u4e48\u5927\uff0c\u5fc5\u987b\u79bb\u6563\u5316\u3002\n\n\nlower\\_bound\u662f\u4e2a\u597d\u4e1c\u897f\u554a\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u67d0\u4e2a\u6570\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u80fd\u65b9\u4fbf\u6211\u4eec\u8fdb\u884c\u79bb\u6563\u5316\u4e86\u3002\n\n\n\u697c\u4e0b\u7684dalao\u90fd\u8bf4\u662f\u666e\u53ca\u7ec4\u96be\u5ea6\uff0c\u672c\u849f\u84bb\u771f\u662f\u670d\u4e86\u3002\n\n\n\u6211\u62ff\u666e\u4e00\u7684\u65f6\u5019\u6570\u636e\u7ed3\u6784\u8fd8\u6ca1\u5165\u95e8\u5462\uff01\n\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u5199\u7684\u4e0d\u7b97\u592a\u4e11\u5427\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstdlib>\n#include <stack>\n#include <ctime>\n#include <cmath>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <vector>\n#define rep(i,m,n) for(int i=m;i<=n;i++)\n#define dop(i,m,n) for(int j=m;j>=n;j--)\n#define lowbit(x) (x&(-x))\nusing namespace std;\nconst int maxn=100010;\nlong long f[2*maxn+100];\nlong long n,T,a[maxn],b[maxn],c[maxn],e[2*maxn];\nvoid cch(){\n    rep(i,1,2*n) f[i]=i;\n}\nint find(int x){\n    return f[x]==x?x:f[x]=find(f[x]);\n}\nvoid merge(int x,int y){\n    f[find(y)]=f[find(x)];\n}\nbool ask(int x,int y){\n    return find(x)==find(y);\n}\nvoid Work(){\n    int tmp=0;\n    cin>>n;\n    cch();\n    memset(e,0,sizeof(e));\n    rep(i,1,n){\n       cin>>a[i]>>b[i]>>c[i];\n       e[++tmp]=a[i];\n       e[++tmp]=b[i];\n    }\n    sort(e+1,e+tmp+1);\n    rep(i,1,n)\n       if(c[i])\n         merge(lower_bound(e+1,e+tmp+1,a[i])-e,lower_bound(e+1,e+tmp+1,b[i])-e);\n    rep(i,1,n)\n       if(!c[i])\n         if(ask(lower_bound(e+1,e+tmp+1,a[i])-e,lower_bound(e+1,e+tmp+1,b[i])-e)){\n           printf(\"NO\\n\");\n           return ;\n         }\n    printf(\"YES\\n\");\n    return ;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cout.tie(0);\n    cin>>T;\n    while(T--)\n      Work();\n    return 0; \n}\n```",
        "postTime": 1502799597,
        "uid": 52738,
        "name": "I_am_God",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u4ee3\u7801\u6211\u5c31\u4e0d\u5199\u4e86\uff0c\u6211\u662fPas\u515a\uff0c\u8bb0\u5f55\u91cc\u90fd\u662fC++......\n\n\u8fd9\u9053\u9898\u662f\u666e\u53ca\u7ec4\u96be\u5ea6\u6ca1\u9519\uff0c\u4f46\u5e76\u67e5\u96c6\u662f\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u4f3c\u4e4e\u5e76\u4e0d\u662f\u666e\u53ca\u7ec4\u7684\u8003\u67e5\u8303\u56f4\u3002\n\n\u6240\u4ee5\uff0c\u5728\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u7528**\u56fe\u8bba**\u505a\uff08\u4e0d\u8fc7\u4f1a\u6bd4\u5e76\u67e5\u96c6\u9ebb\u70e6\uff0c\u8c01\u53eb\u4f60\u4e0d\u4f1a\u5e76\u67e5\u96c6\u5462\uff09\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\uff0c\u5904\u7406\u6240\u6709\u7684\u5f0f\u5b50\uff0c\u628a\u7b49\u5f0f\u5173\u7cfb\u5efa\u6210\u4e00\u4e2a\u56fe\uff0cx1,x2\u4e4b\u7c7b\u7684\u5c31\u662f\u9876\u70b9\uff0c\u76f8\u7b49\u5c31\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u6837\u5904\u7406\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528floodfill\u7b97\u6cd5\uff0c\u628a\u4e92\u76f8\u8fde\u901a\u7684\u70b9\u90fd\u67d3\u4e0a\u540c\u4e00\u79cd\u989c\u8272\uff0c\u5404\u4e2a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u989c\u8272\u4e0d\u540c\u3002\n\n\u518d\u6bd4\u8f83\u6240\u6709\u4e0d\u7b49\u5f0f\u4e24\u8fb9\u7684\u9876\u70b9\u989c\u8272\uff0c\u76f8\u540c\u5c31\u4e0d\u80fd\u6210\u7acb\u3002\n\n\u8fd9\u6837\u666e\u53ca\u7ec4\u4e5f\u53ef\u4ee5\u505a\u4e86\u3002\n\n",
        "postTime": 1438567144,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u666e\u53ca\u7ec4\u96be\u5ea6\u3002\n\n\u9996\u5148\u5bf9\u53d8\u91cf\u7f16\u53f7\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u8fd9\u7528sort\u3001unique\u3001lower\\_bound\u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u5b8c\u6210\u3002\n\n\u5148\u5bf9\u4e8e\u6240\u6709\u76f8\u540c\u7684\u7ea6\u675f\uff0c\u628a\u8fd9\u4e9b\u53d8\u91cf\u52a0\u5165\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e0d\u540c\u7684\u7ea6\u675f\uff0c\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u662f\uff0c\u5219NO\u3002\n",
        "postTime": 1437396047,
        "uid": 8072,
        "name": "immortalCO",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u9996\u5148\u5f88\u5bb9\u6613\u60f3\u5230\u5e76\u67e5\u96c6\u7ef4\u62a4,\u5c06\u76f8\u7b49\u7684\u6570merge\u8d77\u6765\u3002\u4f46\u662f\u6211\u4eec\u5f88\u96be\u7ef4\u62a4\u4e0d\u7b49\u7684\u60c5\u51b5\u3002\n\n\u90a3\u600e\u4e48\u529e?\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u4e24\u6570\u4e0d\u7b49\u662f\u5426\u6210\u7acb,\u53ea\u662f\u4e0d\u80fd\u7ef4\u62a4\u5b83\u800c\u5df2,\u5e76\u4e14\u4e8b\u5b9e\u4e0a,\u4e0d\u7b49\u6ca1\u6709\u7c7b\u4f3c$a\\ne b,b\\ne c,\\texttt{\u5219}a\\ne c$\u7684\u6027\u8d28\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d8\u66f4\u7ef4\u62a4\u987a\u5e8f\u3002\n\n\u5148\u5728\u5e76\u67e5\u96c6\u91cc\u7ef4\u62a4\u7b49\u4e8e\u7684\u5173\u7cfb(\u4e5f\u5c31\u662f\u5148\u5904\u7406$e=1$\u7684\u7ea6\u675f),\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u7b49\u7ea6\u675f\u6761\u4ef6$a\\ne b$,\u5224\u65ad$a,b$\u662f\u5426\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u91cc\u3002\n\n\u81f3\u4e8e\u6570\u636e\u8303\u56f4\u662f$10^9$,\u5f00\u4e2amap\u628a\u6bcf\u4e00\u4e2a\u51fa\u73b0\u7684\u672a\u77e5\u6570\u7f16\u53f7\u5bf9\u5e94\u5230$[1,n]$\u8303\u56f4\u5185\u7684\u6574\u6570\u4e0a\u5c31\u597d\u4e86\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint T,n,u,v,cnt,tu,tv,op,ne[100010][2],sz,f[200010];\nmap<int,int>mp;\nint getf(int x){\n    return f[x]==x?x:f[x]=getf(f[x]);\n}\nvoid merge(int x,int y){\n    if(getf(x)==getf(y))return;\n    f[f[x]]=f[y];\n}\nint main(){\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&n);\n        for(int i=1;i<=2*n;i++)f[i]=i;\n        mp.clear();\n        cnt=0;\n        sz=0;\n        for(int i=1;i<=n;i++){\n            scanf(\"%d%d%d\",&u,&v,&op);\n            tu=mp[u];\n            if(!tu)tu=mp[u]=++cnt;\n            tv=mp[v];\n            if(!tv)tv=mp[v]=++cnt;\n            if(!op)ne[++sz][0]=tv,ne[sz][1]=tu;\n            else merge(tu,tv);\n        }\n        for(int i=1;i<=cnt;i++)getf(i);\n        for(int i=1;i<=sz;i++)\n            if(f[ne[i][0]]==f[ne[i][1]]){\n                puts(\"NO\");\n                goto END;\n            }\n        puts(\"YES\");\n        END:\n        ;\n    }\n    return 0;\n}\n```",
        "postTime": 1546344619,
        "uid": 26294,
        "name": "xryjr233",
        "ccfLevel": 9,
        "title": "[2019.1.1]BZOJ4195 [Noi2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790(\u5e76\u67e5\u96c6/\u79bb\u6563\u5316)"
    },
    {
        "content": "[\u8d70\u4f60](https://www.luogu.org/problemnew/show/P1955)\n\n## \u601d\u8def\uff1a\n\n\u6309\u79e9\u5408\u5e76\u548c\u8def\u5f84\u538b\u7f29\u5728\u8fd9\u9053\u9898\u90fd\u80fd\u7528\uff0c\u5bf9\u90a3\u4e9b\u7528\u4e24\u79cd\u4f18\u5316\u5982\u540c\u5199\u677f\u5b50\u7684OIer\u4eec\u7b97\u662f\u5f88\u53cb\u597d\u4e86\u3002\u8fd9\u9053\u9898\u603b\u4f53\u601d\u8def\u662f\u628a\u6761\u4ef6\u76f8\u7b49\u7684\u5408\u5e76\uff0c\u6761\u4ef6\u4e0d\u7b49\u7684\u5219\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u662f\u5219\u4e0d\u6210\u7acb\u3002\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u79bb\u7ebf\u6765\u505a\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u5148\u5c06\u6570\u636e\u90fd\u8bfb\u5165\uff0c\u4f7fe\u4e3a1\u7684\u5728\u524d\uff0ce\u4e3a0\u7684\u5728\u540e\uff0c\u5148\u5168\u90e8\u5408\u5e76\u5728\u5224\u65ad\uff0c\u8fd9\u6837\u505a\u5bf9\u6700\u540e\u7ed3\u679c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u8be5\u77db\u76fe\u8fd8\u662f\u8981\u77db\u76fe\u3002\u8fd9\u6837\u53ef\u4ee5\u7701\u53bb\u8bb0\u5f55\u6761\u4ef6\u4e0d\u7b49\u7684i\u548cj\u8fd9\u4ef6\u9ebb\u70e6\u4e8b\u3002\u56e0\u4e3a\u6709\u4e9bi\u548cj\u975e\u5e38\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bfb\u5165\u7684\u65f6\u5019\u6a21\u4e00\u4e2a\u5927\u8d28\u6570\uff08\u8fd9\u6837\u5176\u5b9e\u5c31\u53ef\u4ee5A\u6389\u8fd9\u9053\u9898\uff0c\u4f46\u4e0d\u662f\u6700\u597d\u7684\u529e\u6cd5\u2192\u79bb\u6563\u5316\uff09\u3002\n\n\n------------\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define LL long long\n#define clr(a) memset(a,0,sizeof(a))\nusing namespace std;\nstruct haha{LL x,y,e;}a[1000010];\nLL n,m,mod=100000007;\nLL fa[1000010],h[1000010],uni[1000010<<1];//uni\u662f\u7528\u6765\u79bb\u6563\u5316\u7684\u6570\u7ec4 \nbool flag;\nbool cmp(haha x,haha y){return x.e>y.e;}\nLL get(LL x){return fa[x]==x?fa[x]:fa[x]=get(fa[x]);}//\u8def\u5f84\u538b\u7f29 \nvoid merge(LL x,LL y){//\u6309\u79e9\u5408\u5e76 \n\tLL fx=get(x);\n\tLL fy=get(y);\n\tif(fx!=fy){\n\t\tif(h[fx]>=h[fy]){\n\t\t\th[fx]+=h[fy];\n\t\t\tfa[fy]=fx;\n\t\t}\n\t\telse{\n\t\t\th[fy]+=h[fx];\n\t\t\tfa[fx]=fy;\n\t\t}\n\t}\n}\nvoid first(LL k){//\u521d\u59cb\u5316 \n\tfor(LL i=1;i<=k;i++){\n\t\th[i]=1;\n\t\tfa[i]=i;\n\t}\n}\nint main(){\n\tscanf(\"%lld\",&m);\n\twhile(m--){\n\t\tLL cnt=0;\n\t\tclr(a);clr(uni);\n\t\tscanf(\"%lld\",&n);\n\t\tfor(LL i=1;i<=n;i++){\n\t\t\tscanf(\"%lld%lld%lld\",&a[i].x,&a[i].y,&a[i].e);\n\t\t\ta[i].x%=mod;a[i].y%=mod;//\u907f\u514d\u8fc7\u4ebf\u7684\u6570\u636e\uff0c\u6a21\u5927\u8d28\u6570 \n\t\t\tuni[++cnt]=a[i].x;uni[++cnt]=a[i].y;\n\t\t}\n\t\tsort(uni+1,uni+1+cnt);//45~50\uff1a\u79bb\u6563\u5316\uff0c\u4f18\u5316\u65f6\u7a7a\u6548\u7387 \n\t\tLL len=unique(uni+1,uni+1+cnt)-uni-1;\n\t\tfor(LL i=1;i<=n;i++){\n\t\t\ta[i].x=lower_bound(uni+1,uni+1+len,a[i].x)-uni-1;\n\t\t\ta[i].y=lower_bound(uni+1,uni+1+len,a[i].y)-uni-1;\n\t\t}\n\t\tfirst(len);\n\t\tflag=0;\n\t\tsort(a+1,a+1+n,cmp);\n\t\tfor(LL i=1;i<=n;i++){\n\t\t\tLL xx=get(a[i].x);\n\t\t\tLL yy=get(a[i].y);\n\t\t\tif(a[i].e==1)\n\t\t\t\tmerge(xx,yy);\n\t\t\tif(a[i].e==0)\n\t\t\t\tif(xx==yy){\n\t\t\t\t\tprintf(\"NO\\n\");\n\t\t\t\t\tflag=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t} \n\t\tif(!flag) printf(\"YES\\n\");\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1533904258,
        "uid": 54513,
        "name": "Palace",
        "ccfLevel": 0,
        "title": "\u3010P1955\u3011 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[http://www.cnblogs.com/OIerShawnZhou/](http://www.cnblogs.com/OIerShawnZhou/)\n\n\uff08\u6211\u5e73\u5e38\u5199\u7684\u9898\u89e3\u90fd\u4f1a\u5f80\u535a\u5ba2\u91cc\u53d1\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u524d\u6765\u62cd\u7816\uff09\n\n\u590d\u4e60\u5e76\u67e5\u96c6\u3002\u4e00\u5f00\u59cb\u8fd8\u4ee5\u4e3a\u6211\u5199\u4e11\u4e86\u5361\u6211\u5e38\u6570\uff0c\u603b\u662fTLE\u7b2c\u4e8c\u70b9\uff0c\u540e\u6765\u53d1\u73b0tot\u6ca1\u6e05\u96f6\u3002\u3002\u3002\n\n\u4f7f\u7528\u4e86STL\u91cc\u9762\u7684unique\u51fd\u6570\u548clower\\_bound\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u9700\u8981\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u4ee5\u4fbf\u4e8e\u540e\u7eed\u64cd\u4f5c\u3002\n\n\u5224\u65ad\u53ef\u884c\u4e0d\u53ef\u884c\u7684\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u9996\u5148\u628a\u6240\u6709\u7684\u76f8\u7b49\u5173\u7cfb\u5408\u5e76\uff0c\u7136\u540e\u53bb\u770b\u6240\u6709\u7684\u4e0d\u7b49\u5173\u7cfb\uff0c\u5982\u679c\u67d0\u4e2a\u4e0d\u7b49\u5173\u7cfb\u8fde\u63a5\u7684\u4e24\u4e2a\u6570\u5728\u76f8\u7b49\u5173\u7cfb\u7684\u5e76\u67e5\u96c6\u91cc\uff0c\u90a3\u80af\u5b9a\u5c31\u662f\u77db\u76fe\u7684\uff0c\u8981\u8f93\u51faNO\u3002\u5982\u679c\u4e00\u76f4\u90fd\u6ca1\u6709\u77db\u76fe\uff0c\u6700\u540e\u5c31\u8f93\u51faYES\u5c31\u597d\u3002\n\n\u4ee3\u7801\u5f88\u76f4\u89c2\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#define maxn 10000005\nusing namespace std;\nstruct quests{\n    int x,y,e;\n    bool operator<(const quests &rhs)const{\n        return e > rhs.e;\n    }\n};\nquests a[maxn];\nint t,n;\nint tot;\nint tmp[maxn];\ninline int read(){\n    int num = 0;\n    char c;\n    while ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n    num = c - '0';\n    while (isdigit(c = getchar()))\n        num = num * 10 + c - '0';\n    return num;\n}\nint father[maxn];\nint find(int x){\n    if (father[x] == x)\n        return father[x];\n    return father[x] = find(father[x]);\n}\nint main(){\n    t = read();\n    while (t--){\n        n = read();\n        tot = 0;\n        for (int i=1;i<=n;i++){\n            a[i].x = read();\n            a[i].y = read();\n            a[i].e = read();\n            tmp[++tot] = a[i].x;\n            tmp[++tot] = a[i].y;\n        }\n        sort(a+1,a+n+1);\n        sort(tmp+1,tmp+1+tot);\n        tot = unique(tmp+1,tmp+tot+1) - (tmp+1);\n        for (register int i=1;i<=tot;i++)\n            father[i] = i;\n        bool ok = true;\n        for (int i=1;i<=n;i++){\n            a[i].x = lower_bound(tmp+1,tmp+tot+1,a[i].x) - tmp;\n            a[i].y = lower_bound(tmp+1,tmp+tot+1,a[i].y) - tmp;\n            if (a[i].e)\n                father[find(a[i].x)] = find(a[i].y);\n            else if (find(a[i].x) == find(a[i].y)) {\n                ok = false;\n                break;\n            }\n        }\n        if (ok)\n            printf(\"YES\\n\");\n        else\n            printf(\"NO\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1508765543,
        "uid": 20197,
        "name": "ShawnZhou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u79bb\u6563\u5316+\u5e76\u67e5\u96c6\u3002\n\n\u8fd8\u7b97\u662f\u6bd4\u8f83\u597d\u5199\u7684\u3002\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\uff0c\u6211\u4eec\u53d1\u73b0$i,j$\u7684\u503c\u8fc7\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u79bb\u6563\u5316\u4e00\u4e0b\u3002\n\n\u5176\u6b21\uff0c\u6211\u4eec\u53d1\u73b0\u6bcf\u7ec4\u6761\u4ef6\u6539\u53d8\u987a\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u5982\u679c\u662f\u5728\u7ebf\u7684\u8bdd\uff0c\u9700\u8981\u7528\u5230\u79cd\u7c7b\u5e76\u67e5\u96c6\uff0c\u800c\u79bb\u7ebf\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5904\u7406\u6240\u6709\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u628a\u4ed6\u4eec\u8fde\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u7136\u540e\u518d\u5224\u65ad\u6240\u6709\u4e0d\u7b49\u7684\u60c5\u51b5\uff0c\u4e00\u65e6\u53d1\u751f\u77db\u76fe\u7acb\u5373\u505c\u6b62\u8f93\u51fa\u3002\n\n\u5bf9\u4e8e\u79bb\u6563\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u7ed3\u6784\u4f53\u8bb0\u5f55\u4e0b\u6bcf\u4e2a$i,j$\uff0c\u79bb\u6563\u5316\u540e\u518d\u6309\u7167\u7f16\u53f7\u6392\u5e8f\u56de\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u7f16\u53f7\u4e3a$q$\u8be2\u95ee\uff0c\u5b83\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u6570\u7ec4$a$\u4e2d\u7684$i,j$\u4e3a$a[2p-1],a[2p].$\n\n\u8fd8\u6709\uff0c\u8981\u8bb0\u5f97\u5f00\u4e24\u500d\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684\u662f\u4e24\u4e2a\u9700\u8981\u79bb\u6563\u5316\u7684\u503c\uff0c(\u56e0\u4e3a\u8fd9\u4e2a\u6211\u88ab\u5751\u4e86\u4e00\u6b21\u63d0\u4ea4\u3002)\n\n\u4ee3\u7801\u7684\u8bdd\u5199\u7684\u5e94\u8be5\u662f\u5f88\u6e05\u695a\u7684\uff0c\u5206\u7ec4\u5904\u7406\uff0c\u6ce8\u610f\u521d\u59cb\u5316\uff01\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 3e5 + 10;\nint cnt;\n\nstruct Node {\n\tint num , val , w;\n}a[N];\n\nbool cmp1(Node a , Node b) {return a.val < b.val;}\nbool cmp2(Node a , Node b) {return a.num < b.num;}\n\nstruct Qus {\n\tint x , y , num;\n\tbool flag;\n\tbool operator < (const Qus &a) const {\n\t\treturn flag > a.flag;\n\t}\n}q[N];\n\nint bin[N];\n\nint find(int x) {\n\tif(bin[x] == x) return x;\n\treturn bin[x] = find(bin[x]);\n}\n\nvoid add(int x , int y) {\n\tint fx = find(x) , fy = find(y);\n\tif(fx != fy) bin[fx] = fy;\n}\n\nvoid Solve() {\n\tint n;\n\tcnt = 0;\n\tscanf(\"%d\" , &n);\n\tfor(int i = 1 ; i <= n ; ++ i) {\n\t\tbin[i] = i; bin[i + n] = i + n;\n\t\tscanf(\"%d %d %d\" ,&q[i].x , &q[i].y , &q[i].flag);\n\t\tq[i].num = i;\n\t\ta[++ cnt].num = i , a[cnt].val = q[i].x;\n\t\ta[++ cnt].num = i , a[cnt].val = q[i].y;\n\t}\n\tsort(a + 1 , a + 1 + cnt , cmp1);\n\tint cur = 0;\n\tfor(int i = 1 ; i <= cnt ; ++ i) {\n\t\tif(a[i].val != a[i - 1].val) a[i].w = ++ cur;\n\t\telse a[i].w = cur; \n\t}\n\tsort(a + 1 , a + 1 + cnt , cmp2);\n\tsort(q + 1 , q + 1 + n);\n\tfor(int i = 1 ; i <= n ; ++ i) {\n\t\tint num = q[i].num;\n\t\tif(q[i].flag == 1) {\n\t\t\tadd(a[num * 2].w , a[num * 2 - 1].w);\n\t\t} else {\n\t\t\tif(find(a[num * 2].w) == find(a[num * 2 - 1].w)) {\n\t\t\t\tputs(\"NO\"); return;\n\t\t\t}\n\t\t}\n\t}\n\tputs(\"YES\");\n}\n\nint main () {\n\tint T;\n\tscanf(\"%d\" , &T);\n\twhile(T -- ) Solve(); \n\treturn 0;\n}\n```\n\n",
        "postTime": 1572351224,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053**\u5e76\u67e5\u96c6**\u7684\u6a21\u677f\u9898\u76ee\uff0c\u5176\u5b9e\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u5566\uff01\n\n $find$ \u51fd\u6570 \u7528\u6765\u67e5\u627ex\u7684\u7236\u4eb2\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u4e00\u5b9a\u4f1a\u7684\u5427\u3002\n\n```cpp\nint find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\n```\n\n\n $merge$ \u51fd\u6570 \u53ef\u4ee5\u505a\u4e24\u4e2a\u76f8\u7b49\u7684\u7ea6\u675f\u6761\u4ef6i\u4e0ej\u5408\u5e76\u5230\u4e00\u8d77\u7684\u64cd\u4f5c\uff0c\u8bdd\u4e0d\u591a\u8bf4\uff0c\u8d34\u4ee3\u7801\uff01\uff01\uff01\n\n```cpp\nvoid merge(int x,int y){\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy)return;\n\tfa[fx]=fy;\n}\n```\n\n \u672c\u9898\u5927\u81f4\u601d\u8def\uff1a\u56e0\u4e3a\u8981\u8bfb\u5165$2n$\u4e2a\u6570 \uff0c \u6211\u4eec\u53ef\u4ee5\u5c06\u8bfb\u5165\u7684\u6570\u6392\u5e8f\u540e\u518d\u53bb\u91cd\uff08\u7b80\u79f0\u79bb\u6563\u5316\uff09\u3002\u90a3\u662f\u56e0\u4e3a \u8f93\u5165\u7684$i$\u4e0e$j$\u90fd\u5f88\u5927 \u4f46\u662f$n$\u5374\u5f88\u5c0f \u8fd9\u4e5f\u5c31\u662f\u89e3\u9898\u7684\u4e00\u4e2a\u7a81\u7834\u53e3\u3002\n\n \u7136\u540e\u6211\u4eec\u9700\u8981\u77e5\u9053\u8bfb\u5165\u7684\u6570 \u5728\u79bb\u6563\u5316\u540e\u6570\u4e2d\u7684\u4f4d\u7f6e \u56e0\u6b64\u5c31\u9700\u8981\u53bb\u904d\u5386 \u5982\u679c\u91c7\u7528\u66b4\u529b  \u90a3\u4e48\u65f6\u95f4\u4fbf\u4f1a\u5de8\u957f\u65e0\u6bd4  \u53ef\u662f \u5927\u5bb6\u4e0d\u8981\u5fd8\u8bb0\u4e86  \u79bb\u6563\u5316\u540e\u7684\u6570\u662f\u6709\u987a\u5e8f\u7684  \u6240\u4ee5 \u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e8c\u5206\u67e5\u627e \u7684 \u5999\u62db \uff01\uff01\uff01\n\n \u597d\uff0c\u4ee3\u7801\uff0c\u8d70\u4f60\uff01\uff01\uff01\n\n\n```cpp\n#include<bits/stdc++.h>\n#define N 400005\nusing namespace std;\nint n,T,x,y,tot,num,a[2N],b[N],c[N],d[2N],fa[N];\nbool flag;\n\tint find(int x){\n\tif(fa[x]==x)return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid merge(int x,int y){\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy)return;\n\tfa[fx]=fy;\n}\nbool change(int x,int y){\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy)return false;\n\treturn true;\n}\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tscanf(\"%d%d%d\",&a[i2-1],&a[i2],&c[i]);\n\t\t\td[i2-1]=a[i2-1];d[i2]=a[i2];\n\t\t}\n\t\tsort(d+1,d+2*n+1);num=tot=0;b[0]=-1;\n\t\tfor(int i=1;i<=2*n;i++)\n\t\t\tif(d[i]!=b[tot])b[++tot]=d[i];\n\t\tfor(int i=0;i<=tot;i++)fa[i]=i;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(c[i]==0)continue;\n\t\t\tx=lower_bound(b+1,b+tot+1,a[i*2-1])-b;\n\t\t\ty=lower_bound(b+1,b+tot+1,a[i*2])-b;\n\t\t\tmerge(x,y);\n\t\t}\n\t\tflag=true;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(c[i]==1)continue;\n\t\t\tx=lower_bound(b+1,b+tot+1,a[i*2-1])-b;\n\t\t\ty=lower_bound(b+1,b+tot+1,a[i*2])-b;\n\t\t\tif(!change(x,y)){\n\t\t\t\tprintf(\"NO\\n\");\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)printf(\"YES\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571036263,
        "uid": 238925,
        "name": "\u4eba\u95f4\u51e1\u4eba",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "# P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\n\n\n&nbsp;\n# \u5206\u6790~~\u5e9f\u8bdd~~\n\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u601d\u8003\u600e\u6837\u624d\u80fd\u5224\u65ad\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u4f1a\u5bfc\u81f4\u6574\u4e2a\u95ee\u9898\u77db\u76fe\u3002\n\n**\u9898\u76ee\u4e2d\u7684\u7ea6\u675f\u6761\u4ef6\u6709\u4e24\u79cd\uff0c\u76f8\u7b49\u548c\u4e0d\u76f8\u7b49**\n\n\u5f88\u663e\u7136\uff0c\u76f8\u7b49\u6761\u4ef6\u662f\u4e0d\u4f1a\u4e92\u76f8\u51b2\u7a81\u7684\uff08\u5927\u5bb6\u90fd\u76f8\u7b49\uff09\n\u4e0d\u7b49\u6761\u4ef6\u4e5f\u4e0d\u4f1a\u4e92\u76f8\u51b2\u7a81\uff08\u5927\u5bb6\u90fd\u4e0d\u76f8\u7b49\uff09\n\u6240\u4ee5\u4ea7\u751f\u51b2\u7a81\u7684\u539f\u56e0\u662f\u4e0d\u7b49\u5173\u7cfb\u548c\u76f8\u7b49\u5173\u7cfb\u4e4b\u95f4\u4e0d\u80fd\u540c\u65f6\u6210\u7acb\n\n**~~\u5e9f\u8bdd\u9898\u5e72\u91cc\u90fd\u8bf4\u4e86~~**\n\n\u90a3\u4e48\u5728\u987a\u5e8f\u8bfb\u5165\u7684\u8fc7\u7a0b\u4e2d\u5982\u4f55\u67e5\u770b\u5f53\u524d\u6761\u4ef6\u662f\u5426\u548c\u5df2\u77e5\u6761\u4ef6\u77db\u76fe\u5462\uff1f\n\u7531\u4e8e\u7b49\u5f0f\u7684\u4f20\u9012\u6027\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u76f8\u7b49\u7684\u5143\u7d20\u62bd\u8c61\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u76f8\u7b49\n\n\u96c6\u5408\u5185\u6bcf\u4e00\u4e2a\u5143\u7d20\u8981\u6ee1\u8db3\u5feb\u901f\u7684**\u5408\u5e76\u5230\u5176\u5b83\u96c6\u5408**\u548c**\u67e5\u627e\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20**\n\n\u6211\u4eec\u5c31~~\u7075\u5149\u4e00\u95ea~~\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u4e86**\u5e76 \u67e5\u96c6**\n\n\u6240\u4ee5\u6211\u4eec\u7684\u601d\u8def\u5c31\u662f\u628a\u6240\u6709\u76f8\u7b49\u7684\u70b9\u5e76\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u3002\u5224\u65ad\u4e0d\u7b49\u65f6\uff0c\u5982\u679c\u7ea6\u675f\u6761\u4ef6\u91cc\u7684\u4e24\u4e2a\u5143\u7d20\u5df2\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff08\u6839\u636e\u5df2\u77e5\u6761\u4ef6\u8fd9\u4e24\u4e2a\u5143\u7d20\u76f8\u7b49\uff09\uff0c\u90a3\u4e48\u8be5\u7ea6\u675f\u6761\u4ef6\u4e0e\u5176\u4ed6\u6761\u4ef6\u77db\u76fe\uff0c\u8df3\u51fa\u5373\u53ef\u3002\n\n&nbsp;\n\n# \u6ce8\u610f\n&nbsp;\n## 1.\u6570\u636e\u8303\u56f4\n\n\u6ce8\u610fi\uff0cj\u7684\u6570\u636e\u89c4\u6a21\u662f1e9\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u7684fa\u6570\u7ec4\u65e0\u6cd5\u5f00\u5230\u90a3\u4e48\u5927~~\u5373\u4fbf\u5185\u5b58\u7ed9512M~~\u6240\u4ee5\u5fc5\u987b\u4f7f\u7528\u79bb\u6563\u5316\u628a\u8fd9\u4e9b\u5927\u5f97\u79bb\u8c31\u7684i\uff0cj\u7f29\u52301-2m\u4e4b\u95f4\uff08m\u662f\u53d8\u91cf\u7684\u4e2a\u6570\uff09\n\n[\u79bb\u6563\u5316\u6982\u8ff0-\u767e\u5ea6\u767e\u79d1](https://baike.baidu.com/item/%E7%A6%BB%E6%95%A3%E5%8C%96/10501557) <--\u53c2\u8003\u8d44\u6599\n\n&nbsp;\n\n## 2.\u5c0f\u7ec6\u8282\n\n### \u5904\u7406\u6761\u4ef6\u7684\u987a\u5e8f\n\n\u7531\u4e0a\u6587\u5206\u6790\u6240\u8ff0\uff0c\u53ef\u89c1\u5148\u5408\u5e76\u5b8c\u6240\u6709\u76f8\u7b49\u7684\u6761\u4ef6\u518d\u5224\u65ad\u4e0d\u7b49\u7684\u6761\u4ef6\uff0c\u6240\u4ee5\u5728\u8bfb\u5165\u6761\u4ef6\u540e\u5e94\u8be5\u5bf9\u6761\u4ef6\u6392\u5e8f\uff0c\u4ee3\u7801\u4e2d\u7528\u4e86\u7ed3\u6784\u4f53\u6392\u5e8f \uff0c\u4f7f\u5f97\u6807\u8bb0\u4e3a1\u7684\u6761\u4ef6\u6392\u5728\u6807\u8bb0\u4e3a0\u7684\u524d\u9762\n\n### \u6570\u7ec4\u7684\u521d\u59cb\u5316\n\n\u5904\u7406\u79bb\u6563\u5316\u9700\u8981\u7528\u5230\u7684**inp**\uff08\u8bb0\u5f55\u8f93\u5165\u7684\u53d8\u91cf\u540d\u79f0\uff09\u548c**b**\uff08\u53bb\u91cd\u540e\u7684\u79bb\u6563\u5316\u6570\u7ec4\uff09\n\n\u5e76\u67e5\u96c6\u6240\u7528\u7684fa\u6570\u7ec4\n\n\u5728\u6bcf\u6b21\u8be2\u95ee\u524d **\u7edf\u7edf\u90fd\u8981\u521d\u59cb\u5316**\n\n\u4e0d\u7136\u5404\u79cdREMLEWA...\n\n\n\n\u597d\u5427\u5e9f\u8bdd\u8bf4\u5230\u8fd9\u91cc\u770b\u4ee3\u7801\u5427 \u81ea\u8ba4\u4e3a\u6ce8\u91ca\u8bf4\u5f97\u5f88\u6e05\u695a\uff08\u9003\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n#define N 1000000\n#define ll long long\n#define re register\nint T, n, cnt;\n//\u5faa\u73af\u6b21\u6570 \u7ea6\u675f\u6761\u4ef6\u6570\u91cf \u53d8\u91cf\u6570\u91cf\uff08\u672a\u53bb\u91cd\uff09\nint inp[N << 1], b[N], m, fa[N << 1];\n//\u8f93\u5165 \u53bb\u91cd\u6570\u7ec4 \u53d8\u91cf\u6570\u91cf\uff08\u5df2\u53bb\u91cd\uff09 \u7236\u4eb2\u6570\u7ec4\uff08\u5e76\u67e5\u96c6\uff09\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') { x = x * 10 + c - '0'; c = getchar(); }\n\treturn x * f;\n}//\u5feb\u8bfb\n\nstruct node //\u7ea6\u675f\u6761\u4ef6\u7ed3\u6784\u4f53\n{\n\tint x, y, tp;\n}a[N];//\u6570\u5b57x\u548c\u6570\u5b57y\u7684\u5173\u7cfb tp\u8868\u793a\u7c7b\u578b\n\nvoid discrete()\n{\n\tsort(inp + 1, inp + 1 + cnt);\n\tfor (int i = 1; i <= cnt; i++)\n\t\tif (i == 1 || inp[i] != inp[i - 1])\n\t\t\tb[++m] = inp[i];\n}//\u53bb\u91cd\n\nint query(int x) { return lower_bound(b + 1, b + 1 + m, x) - b; }//\u79bb\u6563\u5316\nbool cmp(node a1, node a2) { return a1.tp > a2.tp; }//\u5bf9\u7ea6\u675f\u6761\u4ef6\u8fdb\u884c\u6392\u5e8f\n\nint getfather(int x) { return fa[x] = x == fa[x] ? x : getfather(fa[x]); }//\u5e76\u67e5\u96c6\nbool check(int x, int y) { return getfather(x) == getfather(y); }\n//\u67e5\nvoid merge(int x, int y)\n{\n\tint xx = getfather(x), yy = getfather(y);\n\tif (xx != yy) fa[xx] = yy;\n}//\u5e76\n\nint main()\n{\n\tT = read();\n\tfor (int tp = 0; tp < T; tp++)\n\t{\n\t\tmemset(fa, 0, sizeof(fa));//\u4e00\u5b9a\u4e0d\u80fd\u5fd8\u8bb0\u521d\u59cb\u5316 \uff08\u5176\u5b9e\u53ef\u4ee5\u8bb0\u5fc6\u7528\u4e86\u591a\u5c11\u4e07\u4e00T\u5927\u8d77\u6765\uff09\n\t\tmemset(inp, 0, sizeof(inp));\n\t\tmemset(b, 0, sizeof(b));\n\t\tbool flag = true;//\u662f\u5426\u6210\u7acb\uff08\u6709\u77db\u76fe\uff09\n\t\tn = read();\n\t\tfor (int i = 1; i <= n; i++) //\u8bfb\u5165\u5173\u7cfb\n\t\t\ta[i].x = read(), a[i].y = read(), a[i].tp = read(), inp[++cnt] = a[i].x, inp[++cnt] = a[i].y;\n\t\tdiscrete();//\u79bb\u6563\u5316\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\ta[i].x = query(a[i].x), a[i].y = query(a[i].y);//\u79bb\u6563\u5316\n\t\tfor (int i = 1; i <= m; i++)\n\t\t\tfa[i] = i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\t\tsort(a + 1, a + 1 + n, cmp);//\u5c06\u7ea6\u675f\u6761\u4ef6\u6392\u5e8f\n\t\tfor (int i = 1; i <= n; i++)\n\t\t{\n\t\t\tif (a[i].tp == 1) merge(a[i].x, a[i].y);//\u82e5\u76f8\u7b49\u5219\u5e76\n\t\t\telse if (check(a[i].x, a[i].y))//\u82e5\u4e0d\u7b49\u5219\u67e5\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");//\u8f93\u51fa\u7ed3\u679c\n\t}\n}\n```",
        "postTime": 1564633555,
        "uid": 92008,
        "name": "Yuyuanqi",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "~~\u5ba3\u4f20\u4e00\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2~~https://www.cnblogs.com/lizitong/\n\n\u5e26\u6743\u5e76\u67e5\u96c6\u3002\n\n\u7531\u4e8e\u849f\u84bb\u7406\u89e3\u529b\u6781\u5176\u6709\u9650\uff0c\u5e76\u770b\u4e0d\u61c2\u7f51\u4e0a\u5f00\u4e8c\u500d\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u4e2a\u4eba\u5e26\u6743\u5e76\u67e5\u96c6\u7684\u505a\n\n\u6cd5\u5168\u90e8\u90fd\u662f\u53d6\u4f59\u505a\u6cd5\u3002\n\n\u6211\u4eec\u75280\u548c1\u4ee3\u8868\u8fd9\u4e2a\u6570\u548c\u6839\u8282\u70b9\u76f8\u540c\u6216\u8005\u4e0d\u540c\uff0c\u5f53\u77db\u76fe\u65f6\u5373\u8fd9\u53e5\u8bdd\u662f\u5047\u8bdd\u3002\n\n\u4e8e\u662f\u5feb\u4e50\u5730\u5199\u5b8c\u4ee3\u7801\u8fc7\u6837\u4f8b\uff0c\u4ea4\u4e86\u4e0a\u53bb\uff1a\n\u7b2c\u4e09\u4e2a\u70b9WA\u4e86\u3002\n\n\u9ed1\u4eba\u95ee\u53f7\u8138\uff08\uff1f\uff1f\uff1f\uff09\n\n\u4e8e\u662f\u4e0b\u8f7d\u4e86\u6570\u636e\uff0c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\n\n\u5982\u679c\u6309\u7167\u6b63\u5e38\u7684\u987a\u5e8f\u5904\u7406\uff0c\u5f53\u7ed9\u51fa\u8fd9\u6837\u7684\u6570\u636e\u65f6\uff1a\n\n**a\u2260b\uff0cb\u2260c\uff0cc\u2260a**\n\n**\u6839\u636e\u6211\u4eec\u7684\u7406\u8bba\uff0c0\u4ee3\u8868\u76f8\u540c\uff0c1\u4ee3\u8868\u4e0d\u76f8\u540c\uff0c\u524d\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5f97\uff1aa\u4e3a0\uff0cb\u4e3a1\uff0cc\u4e3a0\uff0c\u90a3\u4e48\u5f53c\u2260a\u65f6\uff0c\u63a8\u51fa\u77db\u76fe\u3002**\n\n**\u8fd9\u6837\u505a\u663e\u7136\u662f\u9519\u8bef\u7684\u3002\u524d\u4e24\u4e2a\u6761\u4ef6\u5e76\u4e0d\u662f\u7b2c\u4e09\u4e2a\u7ed3\u8bba\u7684\u5145\u8981\u6761\u4ef6\u3002\u8f7b\u6613\u53ef\u4ee5\u4e3e\u51fa\u53cd\u4f8b\uff1a**\n\n**a = 1\uff0cb = 2\uff0cc = 3**\n\n**\u90a3\u4e48\u6211\u4eec\u6700\u597d\u7684\u505a\u6cd5\u4fbf\u662f\u5148\u628a\u6240\u6709\u7684\u76f8\u7b49\u6761\u4ef6\u52a0\u5165\u5230\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u518d\u53bb\u5904\u7406\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u5982\u679ca\uff0cb\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u90a3\u4e48\u663e\u7136\u4e0d\u6210\u7acb\u3002\u5982\u679c\u4e0d\u5728\uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u3002**\n\n\u4e0a\u4ee3\u7801\uff1a\n\nPS\uff1a\u672c\u4eba\u79bb\u6563\u5316\u65b9\u5f0f\u5947\u7279\uff0c\u4e09\u500d\u5927\u5c0f\uff0c\u4e00\u500d\u5b58x\uff0c\u4e8c\u500d\u5b58y\uff0c\u4e09\u500d\u5b58\u76f8\u7b49\u5173\u7cfb\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#define N 1000005\nusing namespace std;\nint n;\nint f[N];\nint g[N];\nbool flag;\nint find(int x)\n{\n    if(f[x]==x)\n    {\n        return f[x];\n    }\n    int fx = find(f[x]);\n    g[x] = (g[f[x]]+g[x])%2;\n    return f[x] = fx;\n}\nstruct node\n{\n    int x;\n    int y;\n    int a;\n    int num;\n    int p;\n}nd[N+N+N];\nvoid uion(int x,int y,int a)\n{\n    int fx = find(x);\n    int fy = find(y);\n    if(fx!=fy)\n    {\n        f[fy] = fx;\n        if(a==1)\n        {\n            g[fy] = (g[x]-g[y]+2)%2;\n        }else\n        {\n            g[fy] = (g[x]-g[y]+2+1)%2;\n        }    \n    }\n}\nint cmp(node a,node b)\n{\n    return a.p<b.p;\n}\nvoid init()\n{    \n    memset(g,0,sizeof(g));\n    memset(nd,0,sizeof(nd));\n    flag = 0;\n    scanf(\"%d\",&n);\n    for(int i = 1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&nd[i].p,&nd[i+n].p,&nd[i+n+n].a);\n        nd[i].num = i;\n        nd[i+n].num = i;\n    }\n}\nvoid disperse()\n{\n    sort(nd+1,nd+1+n+n,cmp);\n    int cnt = 1;\n    for(int i = 1;i<=n+n;i++)\n    {\n        if(!nd[nd[i].num].x)\n        {\n            nd[nd[i].num].x = cnt;\n        }else\n        {\n            nd[nd[i].num].y = cnt;\n        }\n        if(nd[i+1].p!=nd[i].p)\n        {\n            cnt++;\n        }\n    }\n    for(int i = 1;i<=n;i++)\n    {\n        nd[i].a = nd[i+n+n].a;\n    }\n    for(int i = 1;i<=cnt;i++)\n    {\n        f[i] = i;\n    }\n}\nvoid solve()\n{\n    for(int i = 1;i<=n;i++)\n    {\n        if(nd[i].a==1)\n        {\n            uion(nd[i].x,nd[i].y,nd[i].a);\n        }\n    }\n    for(int i = 1;i<=n;i++)\n    {\n        if(nd[i].a==0)\n        {\n            int fx = find(nd[i].x);\n            int fy = find(nd[i].y);\n            if(fx==fy)\n            {\n                printf(\"NO\\n\");\n                flag = 1;\n                return ;\n            }\n        }\n    }\n}\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        init();\n        disperse();\n        solve();\n        if(flag==0)\n        {\n            printf(\"YES\\n\");\n        }\n    }\n}\n/*\n\u7b2c\u4e09\u7ec4\u6570\u636e\u5949\u4e0a\n9\n234 1\n1 1\n78 0\n1 1\n977 0\n76 1\n877 0\n987 0\n987 0\n*/\n```\n",
        "postTime": 1544085611,
        "uid": 120949,
        "name": "lizitong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5b9e\u9645\u5c31\u662f\u4e2a\u5e76\u67e5\u96c6\uff0c\u4f46\u662fi\u548cj\u7684\u89c4\u6a21\u5f88\u5927\uff0c\u8fd9\u6837\uff0c\u6570\u7ec4\u4e0b\u89d2\u6807\u6ca1\u6cd5\u5b58\u4e0b\u3002\n\n\u8fd9\u6837\uff0c\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u53d1\u73b0\u6ca1\u6709\u7528\u4f18\u5148\u961f\u5217\u8fdb\u884c\u79bb\u6563\u5316\u7684\uff08*\u5b9e\u9645\u6211\u8fd9\u6837\u662f\u5438\u6c27\u8fc7\u7684*\uff09\u6211\u5c31\u60f3\u6765H2O\u4e00\u53d1\u3002\n\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8bb0\u5f55cnt\uff0clast\u4e24\u4e2a\u53d8\u91cf\uff0c\u8bb0\u5f55\u5f53\u524d\u662f\u7b2c\u51e0\u5c0f\uff0c\u4e0a\u4e00\u4e2a\u6570\u7684\u503c\u662f\u51e0\u3002\u8fd9\u6837\uff0c\u7528\u4f18\u5148\u961f\u5217\u6bcf\u6b21\u53d6\u51fa\u5269\u4f59\u6700\u5c0f\u7684\u6570\uff0c\u5224\u65ad\u5b83\u548clast\u662f\u5426\u76f8\u7b49\u3002\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u8bb0\u5f55\u5b83\u79bb\u6563\u5316\u540e\u7684\u503c\u3002\n\n### **\u6ce8\u610f\uff01**\n\u4e00\u5b9a\u8981\u5bf9\u6bcf\u7ec4\u7ea6\u675f\u6761\u4ef6\u8fdb\u884c\u6392\u5e8f\uff08**\u6211\u56e0\u4e3a\u8fd9\u4e2aWA\u4e867\u4e2a\u70b9\uff0c\u6392\u5e8f\u540e\u5c31\u597d\u4e86**\uff09\uff01\u5148\u5224\u65ad\u76f8\u7b49\u7684\uff0c\u5c06\u5b83\u4eec\u6240\u5728\u96c6\u5408\u6392\u5e8f\uff1b\u518d\u5224\u65ad\u8981\u6c42\u4e0d\u7b49\u7684\u4e24\u4e2a\u6570\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5982\u679c\u5728\uff0c\u5c31\u65e0\u6cd5\u540c\u65f6\u6ee1\u8db3\u3002\n\nO2\u4f18\u5316\u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n#include<map>\n#include<queue>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 102400\nint T;\nint n;\nstruct node\n{\n    int x;\n    int y;\n    int val;\n    friend bool operator < (node a,node b)\n    {\n        return a.val>b.val;\n    }\n}nd[maxn];\nint f[2*maxn];\nint cnt=2,last=0x8f8f8f8f;\nvoid init()\n{\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=cnt;i++)\n    {\n        f[i]=i;\n    }\n    cnt=2;\n    last=0x8f8f8f8f;\n    return;\n}\nint find(int x)\n{\n    if(x==f[x])\n    {\n        return x;\n    }else\n    {\n        return f[x]=find(f[x]);\n    }\n}\nvoid merge(int x,int y)\n{\n    int fx=find(x);\n    int fy=find(y);\n    f[fx]=fy;\n    return;\n}\nint main()\n{\n    scanf(\"%d\",&T);\n    while(T--)\n    {\n        scanf(\"%d\",&n);\n        map<int,int>m;\n        priority_queue<int,vector<int>,greater<int> >p;\n        for(int i=1;i<=n;i++)\n        {\n            scanf(\"%d%d%d\",&nd[i].x,&nd[i].y,&nd[i].val);\n            p.push(nd[i].x);\n            p.push(nd[i].y);\n        }\n        while(p.size())\n        {\n            int x=p.top();\n            p.pop();\n            if(x==last)\n            {\n                continue;\n            }else\n            {\n                m[x]=cnt;\n                cnt++;\n                last=x;\n            }\n        }\n        sort(nd+1,nd+n+1);\n        init();\n        bool f=1;\n        for(int i=1;i<=n;i++)\n        {\n            nd[i].x=m[nd[i].x];\n            nd[i].y=m[nd[i].y];\n            if(nd[i].val==1)\n            {\n                merge(nd[i].x,nd[i].y);\n            }else if(find(nd[i].x)==find(nd[i].y))\n            {\n                printf(\"NO\\n\");\n                f=0;\n                break;\n            }\n        }\n        if(f)\n        {\n            printf(\"YES\\n\");\n        }\n        memset(&nd,0,sizeof(nd));\n    }\n}\n```",
        "postTime": 1543579958,
        "uid": 158849,
        "name": "renhr2002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "[\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2](https://www.cnblogs.com/cold-cold/p/10029969.html)\n\n\u6b64\u9898\u5e76\u67e5\u96c6\u548c\u79bb\u6563\u5316\u8fd9\u4e24\u79cd\u7b97\u6cd5\u5176\u5b9e\u5f88\u597d\u770b\u51fa\uff0c\u4f46\u662f\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\u5e76\u67e5\u96c6\u7684\u65b9\u5f0f\u95ee\u9898\u3002\n\n\u6211\u7684\u7b2c\u4e00\u79cd\u601d\u8def\u5176\u5b9e\u662f\u53d7 NOI2001\u98df\u7269\u94fe \u8fd9\u9898\u6240\u5f71\u54cd\u7684\uff0c\u6211\u5c06\u6bcf\u4e00\u4e2ax\u6570\u5206\u4e3a\u4e24\u9762\uff0cx\u548cx+n\uff0c\n\n\u3000\u3000\u5982\u679c\u64cd\u4f5c\u4e3a\u4f7fx\uff0cy\u76f8\u7b49\uff0c\u5c31\u5c06x\u4e0ey\u5408\u5e76\uff0cx+n\u4e0ey+n\u5408\u5e76\n\n\u3000\u3000\u5982\u679c\u64cd\u4f5c\u4e3a\u4f7fx\uff0cy\u4e0d\u7b49\uff0c\u5c31\u5c06x\u4e0ey+n\u5408\u5e76\uff0cx\u4e0ey+n\u5408\u5e76\n\n\u3000\u3000\u5982\u679c\u4efb\u4f55\u65f6\u5019x\u4e0ex+n\u76f8\u8fde\u4e86\u5c31\u4e0d\u6210\u7acb\n\n\u8fd9\u4f3c\u4e4e\u5f88\u6b63\u786e\uff0c\u4e8e\u662f\u5c31\u8fc7\u4e8690\u5206.......\u6570\u636e\u6c34\u7684\u3002\n\n\u9519\u8bef\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\ninline int read()\n{\n    register int p(1),a(0);register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') p=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') a=a*10+ch-48,ch=getchar();\n    return a*p;\n}\nconst int N=401000;\nint t,x,y,n,bowl[N],cx[N],cy[N],fa[N],co[N],len,fla;\nint getf(int u){return fa[u]==u?u:fa[u]=getf(fa[u]);}\nvoid MERGE(int u,int v)\n{\n    int t1=getf(u),t2=getf(v);\n    if(t1!=t2) fa[t1]=t2;\n}\nbool check(int u) {return getf(u)==getf(u+len);}\nint main()\n{\n//    freopen(\"input\",\"r\",stdin);\n//    freopen(\"output\",\"w\",stdout);\n    t=read();\n    while(t--)\n    {\n        n=read();fla=0;\n        for(int i=(n<<2);i>=1;--i) fa[i]=i;\n        for(int i=1;i<=n;++i)\n        {\n            cx[i]=read(),cy[i]=read(),co[i]=read();\n            bowl[(i<<1)-1]=cx[i],bowl[i<<1]=cy[i];\n        }\n        sort(bowl+1,bowl+(n<<1)+1);\n        len=unique(bowl+1,bowl+(n<<1)+1)-bowl-1;\n        for(int i=1;i<=n;++i)\n        {\n            x=lower_bound(bowl+1,bowl+1+len,cx[i])-bowl,y=lower_bound(bowl+1,bowl+1+len,cy[i])-bowl;\n            if(co[i]==1)\n            {\n                MERGE(x,y);\n                if(check(x)||check(y)) {fla=1;break;}\n            }\n            else\n            {\n                MERGE(x,y+len);\n                if(check(x)||check(y)) {fla=1;break;}\n            }\n        }\n        if(fla) puts(\"NO\");\n        else puts(\"YES\");\n    }\n    return 0;\n}\n\n```\n\n\u4f46\u662f\u6211\u81ea\u5df1\u4e3e\u51fa\u4e86\u53cd\u4f8b\u3002\n\n```cpp\n1\n3\n1 2 0\n2 3 0\n1 3 0\n```\n\n\u5728\u6211\u7684\u65b9\u6cd5\u7684\u8fde\u63a5\u4e0b\uff0c\u672c\u5e94\u662f\u4e09\u4e2a\u4e92\u4e0d\u76f8\u7b49\u7684\u6570\u5374\u51fa\u73b0\u4e86\u51b2\u7a81\n\n\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u9519\u8bef\u5462\uff0c\u539f\u56e0\u5728\u4e8e\u4e0d\u7b49\u53f7\u4e0d\u5177\u5907\u4f20\u9012\u6027\uff0c\u800c\u7b49\u53f7\u5177\u6709\u4f20\u9012\u6027\u3002a\u2260b\u548cb\u2260c\u4e0d\u80fd\u63a8\u51faa\u2260c\uff0c\u7531\u6b64\u9020\u6210\u4e86\u9519\u8bef\u3002\n\n\u800c\u6b63\u786e\u7684\u505a\u6cd5\u6b63\u662f\u5229\u7528\u4e86\u4e0d\u7b49\u53f7\u4e0d\u5177\u5907\u4f20\u9012\u6027\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7b49\u53f7\u64cd\u4f5c\u7387\u5148\u5408\u5e76\u5b8c\u4e86\u4ee5\u540e\uff0c\u518d\u5224\u65ad\u6240\u6709\u4e0d\u7b49\u53f7\u662f\u5426\u6210\u7acb\uff0c\u53ca\u4e24\u6570\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u5c31\u53ef\u5df2\u5b8c\u6210\u6b64\u9898\n\n\u6b63\u786e\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\ninline int read()\n{\n    register int p(1),a(0);register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') p=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') a=a*10+ch-48,ch=getchar();\n    return a*p;\n}\nconst int N=401000;\nint t,x,y,n,bowl[N],cx[N],cy[N],fa[N],co[N],len,fla;\nint getf(int u){return fa[u]==u?u:fa[u]=getf(fa[u]);}\nvoid MERGE(int u,int v)\n{\n\tint t1=getf(u),t2=getf(v);\n\tif(t1!=t2) fa[t1]=t2;\n}\nbool check(int u,int v){return getf(u)==getf(v);}\nint main()\n{\n//\tfreopen(\"input\",\"r\",stdin);\n//\tfreopen(\"output\",\"w\",stdout);\n\tt=read();\n\twhile(t--)\n\t{\n\t\tn=read();fla=0;\n\t\tfor(int i=(n<<1);i>=1;--i) fa[i]=i;\n\t\tfor(int i=1;i<=n;++i)\n\t\t{\n\t\t\tcx[i]=read(),cy[i]=read(),co[i]=read();\n\t\t\tbowl[(i<<1)-1]=cx[i],bowl[i<<1]=cy[i];\n\t\t}\n\t\tsort(bowl+1,bowl+(n<<1)+1);\n\t\tlen=unique(bowl+1,bowl+(n<<1)+1)-bowl-1;\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tcx[i]=lower_bound(bowl+1,bowl+1+len,cx[i])-bowl,cy[i]=lower_bound(bowl+1,bowl+1+len,cy[i])-bowl;\n\t\tfor(int i=1;i<=n;++i) if(co[i]==1) MERGE(cx[i],cy[i]);\n\t\tfor(int i=1;i<=n;++i) if(co[i]==0) if(check(cx[i],cy[i])) {fla=1;break;}\n\t\tif(fla) puts(\"NO\");\n\t\telse puts(\"YES\");\n\t}\n    return 0;\n}\n```",
        "postTime": 1543338754,
        "uid": 48934,
        "name": "cold_cold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u601d\u8def\u5e94\u8be5\u8fd8\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u7684\n\n\u5e76\u67e5\u96c6\n\n\u5982\u679c\u4e24\u4e2a\u6570\u5173\u7cfb\u76f8\u7b49\u5c31\u52a0\u5165\u4e00\u4e2a\u96c6\uff0c\u4e0d\u76f8\u7b49\u5c31\u68c0\u67e5\u4e4b\u524d\u7684\u6761\u4ef6\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u96c6\u91cc\u2026\u2026\u5982\u679c\u77db\u76fe\u5c31\u8f93\u51faNO\uff0c\u4e00\u76f4\u987a\u5229\u5730\u8fd0\u884c\u4e0b\u53bb\u8f93\u51faYES\n\n\u4f46\u662f\u5982\u679c\u4f60\u5199\u4e00\u4e2a\u88f8\u7684\u5e76\u67e5\u96c6\u2026\u2026\u7ed3\u679c\u5f88\u60e8\\\u5fae\u7b11\n\n\u6570\u636e\u8303\u56f4\u8fd8\u662f\u5f88\u5927\u7684\u2026\u2026\u7136\u540e\u8fd9\u91cc\u6211\u4eec\u8981\u7528\u5230\u79bb\u6563\u5316\n\n\u201c\u79bb\u6563\u5316\uff0c\u5c31\u662f\u628a\u65e0\u9650\u7a7a\u95f4\u4e2d\u6709\u9650\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u4ee5\u6b64\u63d0\u9ad8\u7b97\u6cd5\u7684\u65f6\u7a7a\u6548\u7387\u201d\u2014\u2014\u8fd9\u662f\u767e\u5ea6\u7684\u89e3\u91ca\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684i\u3001j\u7684\u503c\u8bb0\u5f55\u4e0b\u6765\uff0c\u6392\u5e8f\uff0c\u7136\u540e\u5728\u65b0\u7684\u6570\u7ec4\u91cc\u7d22\u5f15\u2026\u2026\u5c31\u8282\u7701\u4e86\u5f88\u591a\u7a7a\u95f4\n\n\u5173\u4e8e\u79bb\u6563\u5316\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0https://www.cnblogs.com/kevince/archive/2014/08/06/3893531.html\n\n\u522b\u7684\u8981\u662f\u4e00\u5b9a\u8bf4\u6709\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5927\u6982\u5c31\u662f\u6bcf\u6b21\u8bb0\u5f97\u91cd\u65b0\u521d\u59cb\u5316fa\u6570\u7ec4\u3001tmp\u548c\u90a3\u4e2a\u7528\u4e8e\u5224\u65adYES/NO\u7684\u6570\u4e86\u5427\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u2026\u2026\u697c\u4e0b\u5199\u5f97\u5f88\u6e05\u695a\u5566\n",
        "postTime": 1514778934,
        "uid": 54702,
        "name": "COPPERTHIC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010[NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u7b97\u6cd5\u63cf\u8ff0\uff1a\n\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u7b49\u5f0f\uff0c\u5c06\u4ed6\u4eec\u7528\u5e76\u67e5\u96c6\u8054\u5408\u3002\n\n\n\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\uff0c\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u7956\u5148\u4e0b\u3002\n\n\n**\u6ce8\u610f\u51e0\u4e2a\u95ee\u9898**\n\n\n1.\u6bcf\u4e00\u6b21\u8981\u91cd\u7f6efa\u6570\u7ec4\uff01\n\n\n2.\u79bb\u6563\u5316\u4e00\u5b9a\u8981\u4e00\u8d77\u505a\uff0c\u4e0d\u80fd\u4e24\u8fb9\u5206\u5f00\uff01\n\n\nP.S. \u6211\u4e0d\u4f1a\u5176\u4ed6\u79bb\u6563\u5316\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u6211\u5c31\u7528\u4e86\u6700\u5f31\u7684\u4e00\u79cd\u3002\u3002\u3002\n\n\n\u4ee3\u7801\u5f53\u7136\u8981\u6709\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n      \n      \n       \n            \n\n```cpp\n#include<bits/stdc++.h>\n#define size 600010\nusing namespace std;\nint fa[size],n;\ntypedef pair<long long,long long  > P;\nvoid setup()\n{\n  for (int i=1;i<=500010;i++) fa[i]=i;\n}\nint find (int x)\n{\n  if (x==fa[x]) return x;\n  return fa[x]=find(fa[x]);\n}\nvoid unite(int x,int y)\n{\n  fa[find(x)]=find(y);\n}\nbool query(int x,int y)\n{\n  return (find(x)==find(y));\n}\nbool cmp(P x,P y)\n{\n  return (x.first>y.first);\n}\nvoid lisan (P a[],int A[])\n{\n    int cnt=0;\n  sort(a+1,a+n*2+1,cmp);\n  for (int c=1;c<=n*2;c++)\n  {\n      if (c==1||a[c].first!=a[c-1].first) cnt++;\n      A[a[c].second]=cnt;\n  } \n} \nP a[size];\nint  A[size],B[size],sgn[size],t;\nint main()\n{\n    scanf(\"%d\",&t);\n  for (int i=1;i<=t;i++)\n  {\n      scanf(\"%d\",&n);\n      bool flag=0;\n      setup();\n      memset(sgn,0,sizeof(sgn));\n      memset(A,0,sizeof(A));\n      memset(a,0,sizeof(a));\n      for (int j=1;j<=n;j++)\n      {\n        long long  ta,tb;\n        scanf(\"%lld%lld%d\",&ta,&tb,&sgn[j]);\n        a[j]=make_pair(ta,j);\n        a[j+n]=make_pair(tb,j+n);\n      }\n      lisan(a,A);\n      for (int ii=1;ii<=n;ii++) B[ii]=A[n+ii];\n      for (int ii=1;ii<=n;ii++)\n      if (sgn[ii]) unite(A[ii],B[ii]);\n      for (int ii=1;ii<=n;ii++)\n      {\n          if (!sgn[ii]) \n          {\n            if (query(A[ii],B[ii]))\n            {\n                flag=1;break;\n            }\n          }\n      }\n      if (!flag)  printf(\"YES\\n\");else printf(\"NO\\n\");\n  }\n  return 0;\n}\n\n```",
        "postTime": 1506341722,
        "uid": 44273,
        "name": "\u786b\u4ee3\u786b\u9178\u94a0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "1.\u79bb\u6563\u5316\uff1a\u5bf9\u6240\u6709\u51fa\u73b0\u7684\u53d8\u91cf\u6392\u5e8f\u5e76\u91cd\u65b0\u7f16\u53f7\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728logn\u65f6\u95f4\u5185\u67e5\u627e\u4efb\u610f\u53d8\u91cf\u7684\u65b0\u7f16\u53f7\uff08\u7528hash\u597d\u50cf\u4e5f\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u5982\u679c\u6570\u636e\u6545\u610f\u5361\u4f60\u5c31\u6ca1\u529e\u6cd5\u4e86\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u7528\u4e86\u6392\u5e8f\uff09\n\n2.\u6784\u9020\u65e0\u5411\u56fe\uff1a\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u56fe\u4e2d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e2a\u76f8\u7b49\u7ea6\u675f\u6761\u4ef6\u5bf9\u5e94\u56fe\u4e2d\u4e00\u6761\u8fb9\n\n3.Floodfill\u627e\u51fa\u6240\u6709\u8fde\u901a\u5757\uff0c\u5e76\u6807\u53f7\n\n4.\u68c0\u67e5\u6240\u6709\u4e0d\u7b49\u6761\u4ef6\uff0c\u82e5\u6709\u5c5e\u4e8e\u540c\u4e00\u8fde\u901a\u5757\uff0c\u8f93\u51faNo\uff0c\u5426\u5219\u8f93\u51faYes\n\n\u65f6\u95f4\u590d\u6742\u5ea6nlogn\n\n\u6211\u53ef\u662fpascal\n\n\u4ee3\u7801\uff1a\n\n```cpp\nprogram prog(input,output);\ntype\n  pointer=^nodetype;\n  nodetype=record\n     data:longint;\n     next:pointer;\n  end;\nvar\n  i,j,k,t,n,x,y,e,an,bn,len:longint;\n  ax,ay,bx,by:array[0..100010]of longint;\n  f,g,q:array[0..200020]of longint;\n  v:array[0..200020]of boolean;\n  a,r:array[0..200020]of pointer;\n  tt,p:pointer;\n  flag:boolean;\nprocedure qsort(q,h:longint);\nvar\n  i,j,x,t:longint;\nbegin\n   i:=q;j:=h;x:=f[(i+j)>>1];\n   repeat\n       while f[i]<x do inc(i);\n       while x<f[j] do dec(j);\n       if i<=j then\n           begin\n              t:=f[i];f[i]:=f[j];f[j]:=t;\n              inc(i);dec(j);\n           end;\n   until i>j;\n   if j>q then qsort(q,j);\n   if i<h then qsort(i,h);\nend;\nfunction fun(x:longint):longint;\nvar\n  l,r,mid:longint;\nbegin\n   l:=1;r:=len;\n   while l<r-1 do\n       begin\n          mid:=(l+r)>>1;\n          if f[mid]<x then l:=mid+1 else r:=mid;\n       end;\n   if f[l]=x then exit(l) else exit(r);\nend;\nprocedure bfs(x:longint);\nvar\n  h,t:longint;\nbegin\n   h:=1;t:=1;q[1]:=x;v[x]:=true;inc(k);g[x]:=k;\n   while true do\n       begin\n          p:=a[q[h]];\n          while p^.next<>nil do\n              begin\n                 p:=p^.next;\n                 if not v[p^.data] then\n                     begin\n                        g[p^.data]:=k;v[p^.data]:=true;\n                        inc(t);q[t]:=p^.data;\n                     end;\n              end;\n          inc(h);\n          if h>t then break;\n       end;\nend;\nbegin\n   //assign(input,'prog.in');assign(output,'prog.out');reset(input);rewrite(output);\n   readln(t);\n   for i:=1 to t do\n       begin\n          readln(n);\n          an:=0;bn:=0;\n          for j:=1 to n do\n              begin\n                 readln(x,y,e);\n                 f[j<<1-1]:=x;f[j<<1]:=y;\n                 if e=1 then begin inc(an);ax[an]:=x;ay[an]:=y; end\n                 else begin inc(bn);bx[bn]:=x;by[bn]:=y; end\n              end;\n          qsort(1,n<<1);\n          f[0]:=0;len:=0;\n          for j:=1 to n<<1 do if f[j]<>f[j-1] then begin inc(len);f[len]:=f[j]; end;\n          for j:=1 to len do begin new(a[j]);a[j]^.next:=nil;r[j]:=a[j]; end;\n          for j:=1 to an do\n              begin\n                 x:=fun(ax[j]);y:=fun(ay[j]);\n                 new(p);p^.data:=y;p^.next:=nil;r[x]^.next:=p;r[x]:=p;\n                 new(p);p^.data:=x;p^.next:=nil;r[y]^.next:=p;r[y]:=p;\n              end;\n          fillchar(v,sizeof(v),false);\n          k:=0;\n          //for j:=1 to len do writeln(f[j],' ',j);writeln;\n          for j:=1 to len do if not v[j] then bfs(j);\n          //for j:=1 to len do writeln(j,' ',g[j]);\n          flag:=true;\n          //for j:=1 to bn do begin writeln(bx[j],' ',by[j]); end;\n          for j:=1 to bn do\n              begin\n                 x:=fun(bx[j]);y:=fun(by[j]);\n                 if g[x]=g[y] then begin flag:=false;break; end;\n              end;\n          if flag then writeln('YES') else writeln('NO');\n          for j:=1 to len do\n              begin\n                 p:=a[j];\n                 while p<>nil do begin tt:=p^.next;dispose(p);p:=tt; end;\n              end;\n       end;\n   //close(input);close(output);\nend.\n```",
        "postTime": 1482334548,
        "uid": 28023,
        "name": "McGrady",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u5e76\u67e5\u96c6\u52a0\u79bb\u6563\u5316\uff0c\u6ce8\u610fmap\u7684\u4f7f\u7528\uff0c\u6ca1\u4f7f\u7528\u4e00\u6b21\u5c31\u52a0\u4e00\u6b21log\uff0c\u8c28\u614e\u3002\u3002\u3002\u4e4b\u524d\u5c31\u5361\u5728\u8fd9\u4e2amap\u4e0a\u4e86\u3002\u3002\u3002\n\n\n[codec]\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<map>\n#define LL long long\nusing namespace std;\nconst int maxn=100010;\nint t,n;\nint father[2*maxn];\nLL a[maxn],b[maxn],c[maxn];\nmap<LL,int>s;\nint find(int);\nLL read();\nint main(){\n    int i,j;\n    cin>>t;\n    while(t--){\n        int cnt=0;\n        bool flag=false;\n        s.clear();\n        n=read();\n        for(i=1;i<=n*2;i++)father[i]=i;\n        for(i=1;i<=n;i++){\n            a[i]=read();b[i]=read();c[i]=read();\n            //if(s.find(a[i])==s.end())s[a[i]]=++cnt;\n            //if(s.find(b[i])==s.end())s[b[i]]=++cnt;\n            if(c[i]){\n                int ap=s[a[i]],bp=s[b[i]];\n                if(!ap){\n                    s[a[i]]=++cnt;\n                    ap=cnt;\n                }\n                if(!bp){\n                    s[b[i]]=++cnt;\n                    bp=cnt;\n                }\n                int x=find(ap);\n                int y=find(bp);\n                if(x!=y)\n                    father[x]=y;\n            }\n        }\n        for(i=1;i<=n;i++){\n            if(!c[i]){\n                int ap=s[a[i]],bp=s[b[i]];\n                if(a[i]==b[i]){\n                    flag=true;\n                    break;\n                }\n                if(!ap||!bp)continue;\n                int x=find(ap);\n                int y=find(bp);\n                if(x==y){\n                    flag=true;\n                    break;\n                }\n            }\n        }\n        if(flag)cout<<\"NO\\n\";\n        else cout<<\"YES\\n\";\n    }\n    return 0;\n}\nint find(int x){\n    if(x!=father[x])\n        return father[x]=find(father[x]);\n    return x;\n}\nLL read(){\n    LL ans=0,f=1;\n    char tmp=getchar();\n    while(tmp<'0'||tmp>'9'){\n        if(tmp=='-')\n            f=-1;\n        tmp=getchar();\n    }\n    while(tmp>='0'&&tmp<='9'){\n        ans=ans*10+tmp-'0';\n        tmp=getchar(); \n    }\n    return ans*f;\n}\n[/codec]\n```",
        "postTime": 1469331860,
        "uid": 13062,
        "name": "jinqiu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1955 \u3010\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790\u3011"
    },
    {
        "content": "\u6211\u7684\u601d\u8def\u8c8c\u4f3c\u548c\u5927\u5bb6\u4e0d\u4e00\u6837\u54c8\u2026\u2026\n\n**\u9898\u9762\u63cf\u8ff0**\uff1a\n\n\u5f88\u7b80\u5355\uff1a\n\n\u7ed9\u51fa\u8bb8\u591a\u76f8\u7b49\u548c\u4e0d\u76f8\u7b49\u7684\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u77db\u76fe\u3002\n\n**\u601d\u8def**:\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u8fde\u84dd\u9898\u90fd\u4e0d\u5230\u2026\u2026\n\n\u4f7f\u7528\u5e76\u67e5\u96c6\u7edf\u8ba1\u4e0d\u540c\u7684\u5173\u7cfb\uff0c\u518d\u679a\u4e3e\u76f8\u540c\u7684\uff0c\u770b\u662f\u5426\u77db\u76fe\u5373\u53ef\u3002\n\n\u53d1\u73b0i,j**\u6781\u5927**\uff0c\u51b7\u9759\uff0c**\u4e0d\u8981\u5199\u54c8\u5e0c**\uff01\n\n\u8bb0\u4f4f\uff0c\u5148\u770b\u4e00\u4e0b\u53ef\u4e0d\u53ef\u4ee5\u4f7f\u7528**map**\u3002\n\n\u53d1\u73b0\u53ef\u4ee5\uff0c\u5f00\u4e24\u4e2amap\uff0c\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u5e76\u67e5\u96c6\u7684\u6570\u7ec4\uff0c\u53e6\u4e00\u4e2a\u5219\u5b58\u50a8\u6570\u7ec4\u4e2d\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u8fd9\u4e2a\u6570\uff0c\u518d\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u8fd4\u56de\u8fd9\u4e2a\u6570\u7ec4\u4e0a\u7684\u6570\u7684\u5f15\u7528\uff0c\u8fd9\u6837\u5982\u679c\u4e0b\u9762\u8981\u6539\u7684\u8bdd\u5f88\u65b9\u4fbf\u3002\n\n\u8fd9\u4e2a\u51fd\u6570\uff1a(unordered_map\u662f\u5565\u770b[\u6211\u7684\u6587\u7ae0](https://www.lijiaan.top/2019/08/05/C-STL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E9%97%A8/#more))\n```cpp\nlong long n,nd,p,di[1000005],dj[1000005];\nunordered_map<long long,long long> idm;\nunordered_map<long long,bool> idb;\nlong long &id(long long x){ \n\tif(idb[x]) return idm[x];//\u5982\u679c\u5df2\u7ecf\u6709\u4e86\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u6570\u7ec4\u4e2d\u7684\u6570\n\telse {//\u5426\u5219\u8fd4\u56dex\n\t\tidb[x]=1,idm[x]=x;\n\t\treturn idm[x]; \n\t}\n}\n```\n\n\u4e0b\u9762\u8d34\u51fa\u5168\u7bc7\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,nd,p,di[1000005],dj[1000005];\nunordered_map<long long,long long> idm;//\u5b58\u50a8\u5e76\u67e5\u96c6\u6570\u7ec4\nunordered_map<long long,bool> idb;//\u5b58\u50a8\u662f\u5426\u51fa\u73b0\u8fc7\nlong long &id(long long x){ //\u8fd4\u56de\u7684\u662f\u5f15\u7528\n\tif(idb[x]) return idm[x];\n\telse {\n\t\tidb[x]=1,idm[x]=x;\n\t\treturn idm[x]; \n\t}\n}\nlong long find(long long x){\n\tif(id(x)==x) return x;\n\treturn id(x)=find(id(x));\n}\nvoid unite(long long x,long long y){\n\tlong long xi=find(x),yi=find(y);\n\tid(xi)=yi;//\u56e0\u4e3a\u662f\u5f15\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u5199\n}\nint main(){\n\tios::sync_with_stdio(false);//\u8bfb\u5165\u4f18\u5316\n\tcin>>p;\n\tfor(int np=0;np<p;np++){\n\t\tidm.clear();//\u6e05\u7a7amap\n\t\tidb.clear();\n\t\tnd=0;\n\t\tbool flag=0;\n\t\tcin>>n;\n\t\tint i,j,e;\n\t\tfor(int a=0;a<n;a++){\n\t\t\tcin>>i>>j>>e;\n\t\t\tif(e==0){//\u5982\u679c\u4e24\u8005\u4e0d\u76f8\u540c\uff0c\u628a\u5b83\u4eec\u5b58\u8d77\u6765\n\t\t\t\tdi[nd]=i,dj[nd]=j;\n\t\t\t\tnd++;\n\t\t\t}\n\t\t\telse unite(i,j);//\u5426\u5219\u5c06\u5b83\u4eec\u5b58\u5165\u5e76\u67e5\u96c6\n\t\t}\n\t\tfor(int a=0;a<nd;a++){\n\t\t\tif(find(di[a])==find(dj[a])){//\u5982\u679c\u4e24\u8005\u672c\u5e94\u76f8\u7b49\uff0c\u5374\u4e0d\u76f8\u7b49\n\t\t\t\tcout<<\"NO\\n\";\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!flag)cout<<\"YES\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n\u518d\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u5f00\u4f18\u5316\u662f\u4e0d\u8fc7\u7684\uff0c\u5fc5\u987b\u5f00O2\u4f18\u5316\u624d\u80fd\u8fc7\u3002",
        "postTime": 1565103331,
        "uid": 149872,
        "name": "\u5c0f\u5c0f\u5c0f\u670b\u53cb",
        "ccfLevel": 5,
        "title": "P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"
    }
]