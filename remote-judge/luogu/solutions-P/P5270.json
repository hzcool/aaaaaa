[
    {
        "content": "#### \u5bf9\u4e8e $q$ \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\n\u60f3\u4e00\u60f3\uff0c\u5982\u679c\u53ea\u6709 $0,1$ \u7684\u60c5\u51b5\uff0c\u662f\u4e0d\u662f\u53ea\u8981\u5224\u65ad\u540e\u7f00\u957f\u5ea6 $t$ \u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a $1$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\u5982\u679c\u6570\u53ef\u4ee5\u662f $0,1$ \u4ee5\u5916\u7684\u6570\u5462\uff0c\u662f\u4e0d\u662f\u5c31\u884c\u4e0d\u901a\u4e86\uff0c\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8ba8\u8bba\u4ed6\u4eec\u7684\u603b\u548c\u3002\u4f46\u662f\u6211\u4eec\u5f97\u7a0d\u5fae\u53d8\u4e00\u4e0b\uff0c\u4e0d\u80fd\u76f4\u63a5\u52a0\u8d77\u6765\u3002\n\u5229\u7528 hash \u7684\u601d\u60f3\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u6570\u5316\u6210\u516d\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f\n\n+ $x$\n+ $x\\times 23$\n+ $x^3$\n+ $f(x)$\n+ $x^2$\n+ $\\sqrt{x}$\n\n$f(x)$ \u662f\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684\u6620\u5c04\u51fd\u6570\u3002\n\n\u7136\u540e\u4e5f\u548c $0,1$ \u7684\u60c5\u51b5\u4e00\u6837\u5224\u65ad\u3002\u628a\u6240\u6709\u53c2\u6570\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u3002\n\n#### \u5bf9\u4e8e $q$ \u6bd4\u8f83\u5927\u7684\u60c5\u51b5\n\u8003\u8651\u5230 $q$ \u6bd4\u8f83\u5927\u65f6\u5019\uff0c\u662f\u4e00\u4e2a\u5faa\u73af\u961f\u5217\u3002\u6240\u4ee5\u7b54\u6848\u53ef\u4ee5\u770b\u6210\uff1a\n\n\u8d77\u59cb\u90e8\u5206\u7684\u7b54\u6848**\u52a0\u4e0a**\u91cd\u590d\u90e8\u5206\u7684\u7b54\u6848**\u4e58\u4ee5**\u91cd\u590d\u6b21\u6570**\u518d\u52a0\u4e0a**\u7ed3\u675f\u90e8\u5206\u7684\u7b54\u6848\u3002\n\n\u6240\u4ee5\uff0c\u9009\u4e00\u4e2a\u5927\u6982\u5408\u7406\u7684\u91cd\u590d\u90e8\u5206\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u4e86\u3002\n\n\u987a\u5e26\u4e00\u63d0\uff0c\u5176\u4ed6\u9898\u89e3\u7684\u6807\u7a0b\u5168\u662f\u9519\u7684\u3002\n\nhack \u6570\u636e\uff1a\n```\n9 50 20\n1 2 1 2 1 2 1 1 2 2 1 1 2 1 2 1 1 2 1 1 2 2 1 2 2 1 2 2 2 1 2 1 1 1 1 2 1 2 2 1 1 2 2 1 2 2 2 1 2 1  \n2 1 2 \n1 2 \n5 2 1 1 1 1 \n3 1 1 2 \n3 1 2 2 \n4 1 2 2 2 \n3 1 1 1 \n4 2 2 1 1 \n3 2 2 2 \n9\n7 5 3 1 8 2 6 4 9\n```\n\u6b63\u786e\u7b54\u6848\u8f93\u51fa $2$\uff0c\u4ed6\u4eec\u8f93\u51fa $1$\u3002\n```\n1 3 10\n1 1 1\n1 1\n1\n1\n```\n\u6b63\u786e\u7b54\u6848\u8f93\u51fa $8$\uff0c\u4ed6\u4eec\u8f93\u51fa $0$\u3002\n#### \u6807\u7a0b\n```\n#include<bits/stdc++.h>\n#define random(l,r) ((rand()*32768+rand())%(r-l+1)+l) \nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\nconst int inf=0x7fffffff;\nconst int maxn=210000;\nint fval[maxn];\nstruct ss{\n\tunsigned  a,b,c,d,e,f;\n\tss(){a=b=c=d=e=f=0;}\n\tss(int a,int b,int c,int d,int e,int f):a(a),b(b),c(c),d(d),e(e),f(f){}\n\tss(int x){\n\t\ta=x;\n\t\tb=x*23;\n\t\tc=x*x*x;\n\t\td=fval[x];\n\t\te=x*x;\n\t\tf=sqrt(x);\n\t}\n\tss operator -=(ss t1){\n\t\ta-=t1.a;\n\t\tb-=t1.b;\n\t\tc-=t1.c;\n\t\td-=t1.d;\n\t\te-=t1.e;\n\t\tf-=t1.f;\n\t\treturn *this;\n\t} \n\tss operator +=(ss t1){\n\t\ta+=t1.a;\n\t\tb+=t1.b;\n\t\tc+=t1.c;\n\t\td+=t1.d;\n\t\te+=t1.e;\n\t\tf+=t1.f;\n\t\treturn *this;\n\t} \n\tbool operator ==(ss t1){\n\t\treturn a==t1.a&&b==t1.b&&c==t1.c&&d==t1.d&&e==t1.e&&f==t1.f;\n\t} \n};\nss operator + (ss t1,ss t2){\n\treturn  ss(t1.a+t2.a,t1.b+t2.b,t1.c+t2.c,t1.d+t2.d,t1.e+t2.e,t1.f+t2.f);\n}\nint gcd(int a,int b){\n\treturn !b?a:gcd(b,a%b);\n}\nvector<int>aa[maxn];\nvector<ss>tot[maxn];\nint n,t,q,m,r[maxn];\nvoid solve() {\n\tsrand(time(0));\n\tfor(int i=0;i<=1e5;i++)\n\t\tfval[i]=random(1,(int)1e9);\n\tcin>>n>>t>>q;\n\tss key;\n\tfor(int a,i=1;i<=t;i++){\n\t\tcin>>a;\n\t\tkey+=ss(a);\n\t}\n\tfor(int z,i=1;i<=n;i++){\n\t//\tcout<<\" input \"<<i<<endl;\n\t\tcin>>z;\n\t\taa[i].push_back(z);\n\t\tfor(int kk,j=z;j>=1;j--){\n\t\t\tcin>>kk;\n\t\t\taa[i].push_back(kk);\n\t\t}\n\t\tss key;\n\t\ttot[i].push_back(key);\n\t\tfor(int j=z;j>=1;j--){\n\t\t\ttot[i].push_back(key+=ss(aa[i][j]));\n\t\t}\n\t}\n\t//cout<<\"check123\"<<endl;\n\tcin>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>r[i];\n\t}\n\tss tt;\n\tint be=0,len=0,len0=0,ans=0;\n\ttot[0].push_back(tt);\n\taa[0].push_back(0);\n//\tcout<<\"qwe\"<<endl;\n\tif(q<=maxn*8){\n\t\tfor(int i=1;i<=q;i++){\n\t\t\tint x=r[(i-1)%m+1]; \n\t//\t\tcout<<\"x = \"<<x<<endl;\n\t\t\tlen+=aa[x][0];\n\t\t//\tcout<<\"len = \"<<len<<endl;\n\t\t\ttt+=tot[x][aa[x][0]];\n\t\t//\tcout<<\"check 0\"<<endl;\n\t\t\twhile(be<i&&len-len0>=t){\n\t\t\t//\tcout<<be<<endl;\n\t\t\t\tlen-=len0;\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tbe++;\n\t\t\t\tlen0=aa[r[(be-1)%m+1]][0];\n\t\t\t//\tcout<<len0<<\" \"<<len<<endl;\n\t\t\t}\n\t\t\t//cout<<\"check 1\"<<endl; \n\t\t\tif(len>t){\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen0=len0-(len-t);\n\t\t\t\ttt+=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen=t;\n\t\t\t}\n\t\t\tif(len==t){\n\t\t\t\tif(tt==key)ans++;\n\t\t\t}\n\t\t//\tcout<<i<<\" \"<<ans<<\" \"<<be<<\" \"<<len<<\" \"<<len0<<endl;\n\t\t} \n\t\tcout<<ans<<endl;\n\t}else{\n\t\tint mm=m;\n\t\twhile(mm*2<=maxn*2)mm*=2;\n\t\tint bb=(q-mm)%mm,kk=(q-mm)/mm;\n\t//\tcout<<kk<<\" \"<<bb<<\" \"<<mm<<endl;\n\t//\tcout<<mm<<endl;\n\t\tfor(int i=1;i<=mm;i++){\n\t\t\tint x=r[(i-1)%m+1]; \n\t//\t\tcout<<\"x = \"<<x<<endl;\n\t\t\tlen+=aa[x][0];\n\t\t//\tcout<<\"len = \"<<len<<endl;\n\t\t\ttt+=tot[x][aa[x][0]];\n\t\t//\tcout<<\"check 0\"<<endl;\n\t\t\twhile(be<i&&len-len0>=t){\n\t\t\t//\tcout<<be<<endl;\n\t\t\t\tlen-=len0;\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tbe++;\n\t\t\t\tlen0=aa[r[(be-1)%m+1]][0];\n\t\t\t//\tcout<<len0<<\" \"<<len<<endl;\n\t\t\t}\n\t\t\t//cout<<\"check 1\"<<endl; \n\t\t\tif(len>t){\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen0=len0-(len-t);\n\t\t\t\ttt+=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen=t;\n\t\t\t}\n\t\t\tif(len==t){\n\t\t\t\tif(tt==key)ans++;\n\t\t\t}\n\t\t//\tcout<<i<<\" \"<<ans<<\" \"<<be<<\" \"<<len<<\" \"<<len0<<endl;\n\t\t} \n\t\tint ans2=0;\n\t\tfor(int i=mm+1;i<=mm+mm;i++){\n\t\t\tint x=r[(i-1)%m+1]; \n\t//\t\tcout<<\"x = \"<<x<<endl;\n\t\t\tlen+=aa[x][0];\n\t\t//\tcout<<\"len = \"<<len<<endl;\n\t\t\ttt+=tot[x][aa[x][0]];\n\t\t//\tcout<<\"check 0\"<<endl;\n\t\t\twhile(be<i&&len-len0>=t){\n\t\t\t//\tcout<<be<<endl;\n\t\t\t\tlen-=len0;\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tbe++;\n\t\t\t\tlen0=aa[r[(be-1)%m+1]][0];\n\t\t\t//\tcout<<len0<<\" \"<<len<<endl;\n\t\t\t}\n\t\t\t//cout<<\"check 1\"<<endl; \n\t\t\tif(len>t){\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen0=len0-(len-t);\n\t\t\t\ttt+=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen=t;\n\t\t\t}\n\t\t\tif(len==t){\n\t\t\t\tif(tt==key)ans2++;\n\t\t\t}\n\t\t//\tcout<<i<<\" \"<<ans<<\" \"<<be<<\" \"<<len<<\" \"<<len0<<endl;\n\t\t} \n\t\tans2*=kk;\n\t\tans+=ans2;\n\t//\tcout<<ans<<endl;\n//\t\tcout<<bb<<\" \"<<be<<\" \"<<len<<\" \"<<len0<<\" \"<<kk<<endl;\n\t\tfor(int i=mm*2+1;i<=mm*2+bb;i++){\n\t\t\tint x=r[(i-1)%m+1]; \n\t//\t\tcout<<\"x = \"<<x<<endl;\n\t\t\tlen+=aa[x][0];\n\t\t//\tcout<<\"len = \"<<len<<endl;\n\t\t\ttt+=tot[x][aa[x][0]];\n\t\t//\tcout<<\"check 0\"<<endl;\n\t\t\twhile(be<i&&len-len0>=t){\n\t\t\t//\tcout<<be<<endl;\n\t\t\t\tlen-=len0;\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tbe++;\n\t\t\t\tlen0=aa[r[(be-1)%m+1]][0];\n\t\t\t//\tcout<<len0<<\" \"<<len<<endl;\n\t\t\t}\n\t\t\t//cout<<\"check 1\"<<endl; \n\t\t\tif(len>t){\n\t\t\t\ttt-=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen0=len0-(len-t);\n\t\t\t\ttt+=tot[r[(be-1)%m+1]][len0];\n\t\t\t\tlen=t;\n\t\t\t}\n\t\t\tif(len==t){\n\t\t\t\tif(tt==key)ans++;\n\t\t\t}\n\t\t//\tcout<<i<<\" \"<<ans<<\" \"<<be<<\" \"<<len<<\" \"<<len0<<endl;\n\t\t} \n\t\tcout<<ans<<endl;\n\t}\n}\nint main() {\n\tint t=1;\n\t//cin>>t;\n\twhile(t--) solve();\n}\n\n/*\n10 10 9600\n0 1 1 1 0 1 1 0 0 0 \n6 0 0 1 1 1 0 \n6 0 0 0 0 0 0 \n5 0 0 0 0 0 \n4 1 0 0 0 \n5 1 1 1 0 1 \n2 1 1 \n6 0 0 0 0 0 1 \n1 0 \n4 0 0 1 1 \n1 1 \n30\n10 4 3 9 10 9 4 8 5 10 9 8 6 10 10 4 9 2 2 9 6 4 1 10 10 1 9 10 3 5 \n*/\n```\n",
        "postTime": 1636703212,
        "uid": 258432,
        "name": "liaojiqing2012",
        "ccfLevel": 0,
        "title": "\u9898\u89e3"
    },
    {
        "content": "# \u65e0\u8bba\u600e\u6837\u795e\u6811\u5927\u4eba\u90fd\u4f1a\u5220\u5e93\u8dd1\u8def\n\n## \u9898\u76ee\u5927\u610f\n\n\u4e2d\u6587\u9898\u9762\u81ea\u5df1\u53bb\u8bfb\u5427 QwQ\n\n## \u4e00\u53e5\u8bdd\u9898\u89e3\n\nHash + \u53cc\u7aef\u961f\u5217\u6a21\u62df\u3002\n\n## \u89e3\u9898\u62a5\u544a\n\n\u8fd9\u9053\u9898\uff0c\u9996\u5148\u6bd4\u8f83\u663e\u7136\u7684\u4e00\u70b9\u662f : \u53ea\u6709\u5b57\u7b26\u4e32 $x$ \u957f\u5ea6\u4e3a $T$ \u7684\u540e\u7f00\u662f\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u53bb\u7ef4\u62a4 $x$ \u7684\u540e $T$ \u4f4d\u4e2d\uff0c\u6bcf\u79cd\u6570\u5b57\u51fa\u73b0\u7684\u4e2a\u6570\u3002\u540c\u65f6\u8003\u8651\u5230\u524d $60pts$ \u7684\u5b57\u7b26\u96c6\u90fd\u7279\u522b\u5c0f\u3002\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217 $+$ \u6876\u6765\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u4e5f\u5c31\u662f\u6bcf\u6b21\u4ece\u5c3e\u90e8\u52a0\u5165\u5b57\u7b26\uff0c\u4ece\u5934\u90e8\u5220\u9664\u5b57\u7b26\u3002\n\n```cpp\nfor (register int i = 1; i <= q; i++) {\n    int now = r[i % m + 1];\n    for (register int j = 1; j <= len[now]; j++) {\n        qu.push(a[now][j]);\n        tot[a[now][j]]++;\n    }\n    while (qu.size() > (unsigned)t) {\n        tot[qu.front()]--;\n        qu.pop();\n    }\n }\n```\n\u8fd9\u6837\u5c31\u6709 $20pts$ \u4e86\uff01\n\n\u4f46\u662f\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e $Q$ \u6bd4\u8f83\u5927\u7684\u60c5\u51b5\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u5e76\u4e0d\u9002\u7528\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u662f\u6bcf $m$ \u4e2a\u4e00\u5faa\u73af\u7684\uff0c\u6240\u4ee5\u5f53 $x$ \u7684\u957f\u5ea6\u5927\u4e8e $T$ \u7684\u65f6\u5019\uff0c\u8fdb\u884c\u7b2c $i$ \u64cd\u4f5c\u548c\u8fdb\u884c\u7b2c $i+m$ \u6b21\u64cd\u4f5c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u8fdb\u884c\u51e0\u8f6e\u64cd\u4f5c\u4f7f\u5f97 $x$ \u7684\u957f\u5ea6\u5927\u4e8e $T$\uff0c\u7136\u540e\u5728\u8fdb\u884c\u4e00\u8f6e\u64cd\u4f5c\u6c42\u51fa $sum[i]$ \u8868\u793a\u4ece\u7b2c $1$ \u4e2a\u64cd\u4f5c\u5230\u7b2c $i$ \u4e2a\u64cd\u4f5c\u4e2d\u6709\u591a\u5c11\u4e2a\u64cd\u4f5c\u5bf9\u7b54\u6848\u4ea7\u751f\u4e86\u8d21\u732e\u3002\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u5bf9\u4e8e\u524d $60pts$\uff0c\u6709 $R_i = i$\uff0c\u56e0\u6b64\u63d2\u5165\u7684\u5b57\u7b26\u4e2a\u6570\u662f $O(\u5b57\u7b26\u4e32\u603b\u957f)$ \u7ea7\u522b\u7684\u3002\n\n\u76f8\u6bd4\u4e4b\u524d\u7684 $20pts$ \u505a\u6cd5\u53ea\u591a\u4e86\u51e0\u53e5\u8bdd\u3002\n\n```cpp\nfor (register int i = 1; i <= m; i++) {\n    int now = r[i];\n    for (register int j = 1; j <= len[now]; j++) {\n        qu.push(a[now][j]);\n        tot[a[now][j]]++;\n    }\n    while (qu.size() > (unsigned)t) {\n        tot[qu.front()]--;\n        qu.pop();\n    }\n    res[i] = res[i - 1] + check();\n }\nans += res[m] * (q / m);\nans += res[q % m];\n```\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u6ee1\u5206\u505a\u6cd5\uff0c\u4ece $60pts$ \u5230\u6ee1\u5206\u6709\u4e24\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u662f\u5b57\u7b26\u96c6\u5927\u5c0f\u53d8\u6210\u4e86 $10^5$ \u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21\u5224\u65ad\u7684\u590d\u6742\u5ea6\u8fc7\u9ad8\uff1b\u7136\u540e\u662f\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u4fdd\u8bc1\uff0c\u53ef\u80fd\u8fde\u7eed $m$ \u6b21\u90fd\u8981\u6c42\u63d2\u5165\u540c\u4e00\u4e2a\u957f\u5ea6\u4e3a $10^5$ \u7684\u5b57\u7b26\u4e32\uff0c\u590d\u6742\u5ea6\u4f9d\u7136\u7206\u70b8\u3002\u3002\u3002\n\n\u5148\u5c1d\u8bd5\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u663e\u7136 $hash$ \u662f\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6700\u666e\u901a\u7684 $hash$\uff0c\u4e5f\u5c31\u662f $hash_s = \\sum_{i=0}s[i]  \\times base^i$\uff0c\u81f3\u4e8e\u662f\u81ea\u7136\u6ea2\u51fa\uff0c\u5355\u6a21\u6570\uff0c\u53cc\u6a21\u6570\uff0c\u8fd8\u662f $n$ \u6a21\u6570\u4e0d\u4f5c\u4ecb\u7ecd\u3002\n\n\u628a\u7528\u4e8e\u50a8\u5b58\u6570\u5b57\u7684\u6876\u5f53\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 $hash$ \u6389\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4f1a\u7528\u5230 $hash$ \u7684\u4e00\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 $hash$ \u503c\u51cf\u53bb\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 $hash$ \u4f1a\u5f97\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u6309\u4f4d\u76f8\u51cf\u7684\u5230\u7684\u5b57\u7b26\u4e32\u7684 $hash$ \u503c\uff0c \u76f8\u52a0\u540c\u7406\u3002\n\n\u4e3e\u4e2a\u6817\u5b50\u5c31\u662f \uff1a\n\n$hash(234576) - hash(123456) = hash(111120)$\n\n$hash(1111) + hash(1234) = hash(2345)$\n\n\u5f53\u7136\uff0c\u9700\u8981\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\u90fd\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u8981\u4fdd\u8bc1\u52a0\u51fa\u6765\u7684\u6570\u5c0f\u4e8e $base$ \u3002\n\n\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u8fd8\u53ef\u4ee5\u5f97\u51fa\u6765 :\n\n$hash(123456) + base^2 = hash(124456)$ \u3002\n\n\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728 $O(1)$ \u7684\u65f6\u95f4\u5185\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\uff0c\u68c0\u67e5\u8d21\u732e\u3002\n\n\u540c\u65f6\uff0c\u8fd8\u53d1\u73b0\u5982\u679c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6765 $n$ \u4e2a\u5c0f\u5b57\u7b26\u4e32\u7684 $hash$ \u503c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 $O(1)$ \u7684\u65f6\u95f4\u5185\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\u90a3\u4e48\uff0c\u53ef\u4ee5\u5728\u53cc\u7aef\u961f\u5217\u91cc\u9762\u5b58\u50a8\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u5355\u4e2a\u5b57\u7b26\u3002\n\n\u81f3\u4e8e\u4ece\u53cc\u7aef\u961f\u5217\u5934\u90e8\u5220\u9664\uff0c\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 :\n\n- \u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u9700\u8981\u5220\u6389\uff0c\u90a3\u4e48\u76f4\u63a5\u5f39\u51fa\u5e76\u51cf\u53bb\u5373\u53ef\u3002\n\n- \u5b57\u7b26\u4e32\u9700\u8981\u5220\u6389\u4e00\u90e8\u5206\uff0c\u8003\u8651\u5230\u5728\u961f\u5217\u4e2d\u50a8\u5b58\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u662f\u4e00\u4e2a\u6574\u4e32\uff0c\u8981\u4e48\u662f\u4e00\u4e2a\u540e\u7f00\uff0c\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa $n$ \u7684\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\u7684\u503c\uff0c\u5220\u53bb\u4e00\u4e2a\u540e\u7f00\u518d\u4ece\u5934\u90e8\u52a0\u5165\u4e00\u4e2a\u540e\u7f00\u5373\u53ef (\u5b9e\u9645\u4e0a\u5c31\u662f\u5220\u9664\u4e00\u4e2a\u5b50\u4e32)\u3002\n\n\u7ecf\u8fc7\u7b80\u5355\u7684\u5206\u6790\uff0c\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\n\n\u9644\u4e0a\u4ee3\u7801 :\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<deque>\n\ntypedef unsigned long long ull;\ntypedef std::pair<ull, ull> par;\nconst int maxn = 1e5 + 7;\nconst int base = 1e5 + 7;\nconst int mod1 = 1e9 + 7;\nconst int mod2 = 1e9 + 9;\n\null pow1[maxn], pow2[maxn];\n\npar operator + (const par &x, const par &y) {\n    par res = x;\n    res.first = (res.first + y.first) % mod1;\n    res.second = (res.second + y.second) % mod2;\n    return res;\n}\n\npar operator - (const par &x, const par &y) {\n    par res = x;\n    res.first = (res.first + mod1 -  y.first) % mod1;\n    res.second = (res.second + mod2 - y.second) % mod2;\n    return res;\n}\n\nclass Solution{\nprivate :\n    struct Node{\n        int id, len;\n\n        Node(int id, int len) :\n            id(id), len(len) {}\n    };\n    \n    int n, t, q, s[maxn], len[maxn], *a[maxn], m, r[maxn], res[maxn];\n    par hashS, *hashA[maxn], hashNow;\n    int lenth, ans;\n    std::deque<Node> dq;\n\n    void init() {\n        pow1[0] = pow2[0] = 1;\n        for (register int i = 1; i <= 100000; i++) {\n            pow1[i] = pow1[i - 1] * base % mod1;\n            pow2[i] = pow2[i - 1] * base % mod2;\n        }\n    }\n\n    par getHash(int id, int l, int r) {\n        ull res1 = (hashA[id][r].first + mod1 - hashA[id][l - 1].first) % mod1;\n        ull res2 = (hashA[id][r].second + mod2 - hashA[id][l - 1].second) % mod2;\n        return std::make_pair(res1, res2);\n    }\n\n    par getSuc(int id, int lenth) {\n        return getHash(id, len[id] - lenth + 1, len[id]);\n    }\n    \npublic :\n    Solution() {\n        init();\n        get();\n        solve();\n    }\n\n    void get() {\n        scanf(\"%d %d %d\", &n, &t, &q);\n        for (register int i = 1; i <= t; i++) {\n            scanf(\"%d\", s + i);\n            hashS.first = (hashS.first + pow1[s[i]]) % mod1;\n            hashS.second = (hashS.second + pow2[s[i]]) % mod2;\n        }\n        for (register int i = 1; i <= n; i++) {\n            scanf(\"%d\", len + i);\n            a[i] = new int[len[i] + 1];\n            hashA[i] = new par[len[i] + 1];\n            hashA[i][0] = std::make_pair(0u, 0u);\n            for (register int j = 1; j <= len[i]; j++) {\n                scanf(\"%d\", a[i] + j);\n                hashA[i][j].first = (hashA[i][j - 1].first + pow1[a[i][j]]) % mod1;\n                hashA[i][j].second = (hashA[i][j - 1].second + pow2[a[i][j]]) % mod2;\n            }\n        }\n        scanf(\"%d\", &m);\n        for (register int i = 1; i <= m; i++) {\n            scanf(\"%d\", r + i);\n        }\n    }\n\n    void solve() {\n        if (q <= m) {\n            for (register int i = 1; i <= q; i++) {\n                int now = r[i];\n                hashNow = hashNow + hashA[now][len[now]];\n                lenth += len[now];\n                dq.push_back(Node(now, len[now]));\n\n                while (lenth > t) {\n                    Node nd = dq.front();\n                    dq.pop_front();\n                    if (lenth - nd.len >= t) {\n                        hashNow = hashNow - getSuc(nd.id, nd.len);\n                        lenth -= nd.len;\n                    } else {\n                        int del = lenth - t;\n                        dq.push_front(Node(nd.id, nd.len - del));\n                        lenth -= del;\n                        hashNow = hashNow - getSuc(nd.id, nd.len);\n                        hashNow = hashNow + getSuc(nd.id, nd.len - del);\n                    }\n                }\n                if (hashNow == hashS) {\n                    ans++;\n                }\n            }\n            printf(\"%d\\n\", ans);\n            return;\n        }\n        for (register int i = 1; i <= m; i++) {\n            int now = r[i];\n            hashNow = hashNow + hashA[now][len[now]];\n            //printf(\"%d\\n\", len[now]);\n            lenth += len[now];\n            dq.push_back(Node(now, len[now]));\n\n            while (lenth > t) {\n                Node nd = dq.front();\n                dq.pop_front();\n                if (lenth - nd.len >= t) {\n                    hashNow = hashNow - getSuc(nd.id, nd.len);\n                    lenth -= nd.len;\n                } else {\n                    int del = lenth - t;\n                    dq.push_front(Node(nd.id, nd.len - del));\n                    lenth -= del;\n                    hashNow = hashNow - getSuc(nd.id, nd.len);\n                    hashNow = hashNow + getSuc(nd.id, nd.len - del);\n                }\n            }\n            \n            //printf(\"%d : %llu %llu\\n\", i, hashNow.first, hashNow.second);\n            //printf(\"%d %d\\n\", i, lenth);\n            if (hashNow == hashS) {\n                ans++;\n            }\n        }\n        q -= m;\n        for (register int i = 1; i <= m; i++) {\n            int now = r[i];\n            hashNow = hashNow + hashA[now][len[now]];\n            lenth += len[now];\n            dq.push_back(Node(now, len[now]));\n\n            while (lenth > t) {\n                Node nd = dq.front();\n                dq.pop_front();\n                if (lenth - nd.len >= t) {\n                    hashNow = hashNow - getSuc(nd.id, nd.len);\n                    lenth -= nd.len;\n                } else {\n                    int del = lenth - t;\n                    dq.push_front(Node(nd.id, nd.len - del));\n                    lenth -= del;\n                    hashNow = hashNow - getSuc(nd.id, nd.len);\n                    hashNow = hashNow + getSuc(nd.id, nd.len - del);\n                }\n            }\n            res[i] = res[i - 1] + (hashNow == hashS);\n        }\n        ans += res[m] * (q / m);\n        ans += res[q % m];\n        printf(\"%d\\n\", ans);\n    }\n};\nSolution sol;\n\nint main() {}\n\n```\nps : \u5c3d\u7ba1\u6bd4\u8d5b\u7684\u65f6\u5019\u8fd9\u4efd\u4ee3\u7801\u901a\u8fc7\u4e86\u6240\u6709\u7684\u6d4b\u8bd5\u70b9\uff0c\u4f46\u662f\u7531\u4e8e\u5077\u61d2\uff0c\u5b83\u53ef\u80fd\u4f1a\u88ab\u4e00\u4e9b\u7cbe\u5fc3\u6784\u9020\u7684\u6570\u636e\u5361\u6389\uff0c\u6bd4\u5982\u8bf4\u67d0\u4e9b\u8fdb\u884c $m$ \u6b21\u64cd\u4f5c\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32 $x$ \u7684\u957f\u5ea6\u4f9d\u7136\u5c0f\u4e8e $T$ \u7684\u6570\u636e\u3002",
        "postTime": 1553412572,
        "uid": 49866,
        "name": "\u9f99\u4e4b\u543b\u2014\u6c34\u8d27",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5270 \u3010\u65e0\u8bba\u600e\u6837\u795e\u6811\u5927\u4eba\u90fd\u4f1a\u5220\u5e93\u8dd1\u8def\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u5b57\u7b26\u96c6\u8f83\u5c0f\u7684\u60c5\u51b5\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u5f00\u6876\uff0c\u6700\u540e\u5c06\u51fa\u73b0\u8fc7\u7684\u6b21\u6570\u5f53\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\u7136\u540e\u6211\u4eec\u5982\u4f55\u5224\u65ad\u80fd\u5426\u62fc\u51fa\u6765\uff0c\u5373\u4e24\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u76f8\u540c\u3002\n\n\u90a3\u4e48\u68c0\u7d22\u8fc7\u7a0b\u6211\u4eec\u5c3d\u91cf\u505a\u5230\u66f4\u5feb\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5230\u5b57\u7b26\u4e32  hash  \u3002\n\n\u63a5\u7740\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a\n\n$ 1 . $ \u7b2c\u4e00\u8f6e\u5339\u914d\u5b8c $ m $ \u6b21\u64cd\u4f5c\u3002\n\n$ 2 . $ \u9664\u4e86 $ 1 $ \u4ee5\u5916\u7684\u6240\u6709\u64cd\u4f5c\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u5206\u4e24\u6b65\u5462\uff1f\n\n\u56e0\u4e3a\u7b2c\u4e00\u6b65\u505a\u5b8c\u540e\u6211\u4eec\u4f1a\u5269\u4f59\u4e00\u4e9b\u6570\u5f71\u54cd\u5230\u540e\u9762\u64cd\u4f5c\uff0c\u800c\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u524d\u9762\u6240\u591a\u7684\u6570\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u641e\u5728\u4e00\u8d77\u505a\u3002\n\n\u63a5\u7740\u7a0d\u5fae\u63cf\u8ff0\u4e0b\u5339\u914d\u65f6\u7684\u7ec6\u8282\uff1a\n\n\u56e0\u4e3a $ S $ \u4e32\u7684\u957f\u5ea6\u4e3a $ m $ \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6070\u597d $ m $ \u4f4d\u5373\u53ef\u3002\n\n\u63d2\u5165\u5f88\u597d\u505a\uff0c\u4e3b\u8981\u9700\u8981\u6392\u9664\u5f00\u5934\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u3002\n\n\u5b9a\u4e49 $ nxt $ \u4e3a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4ec0\u4e48\uff0c $ nxtpos $ \u5f53\u524d\u53d6\u5230 $ nxt $ \u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4f4d\u3002\n\n$ now $ \u4e3a\u5f53\u524d\u5b57\u7b26\u4e32\u7684  hash  \u503c \uff0c $ Len $ \u4e3a\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\n\n```cpp\nfor(int i=1;i<=m&&i<=Q;i++){\n    now+=a[r[i]].h;\n    Len+=a[r[i]].len;\n    while(Len>T&&nxt<=i){\n        if(nxtpos!=1||Len-a[r[nxt]].len<T){\n        \t//\u5f53\u524d\u4e0d\u662f\u4e00\u6574\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u957f\u5ea6\u4e0d\u8db3\u4ee5\u5230\u8fbe\u4e00\u6574\u4e2a\n            int delta=min(Len-T,a[r[nxt]].len-nxtpos+1);\n            now-=calc(r[nxt],nxtpos,nxtpos+delta-1);\n            Len-=delta;\n            nxtpos+=delta;\n        }else if(Len-a[r[nxt]].len>=T){\n        \t//\u8df3\u4e00\u6574\u4e2a\n            Len-=a[r[nxt]].len;\n            now-=a[r[nxt]].h;\n            nxt++;\n            nxtpos=1;\n        }\n        while(nxtpos>a[r[nxt]].len&&nxt<=i){\n       \t\t//\u8c03\u6574nxt\uff0cnxtpos\n            nxtpos-=a[r[nxt]].len;\n            nxt++;\n        }\n    }\n    if(now==hash1)  res++;\n}\n\n```\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u6b65\uff0c\u4e0e\u7b2c\u4e00\u6b65\u5927\u540c\u5c0f\u5f02\uff0c\u552f\u4e00\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u6b65\u7684\u524d\u7f00\u7b54\u6848\u548c\uff08\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\u540e\u9762\u7684\u7b54\u6848\uff09\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=6e6+5000;\nint n,T,Q;\nint s[N];\nconst unsigned long long base=19260817;\nunsigned long long hash1=0;\nint len;\nvector<int> v[N];\nint maxx;\nint m,r[N];\nmap<int,int> tong;\nunsigned long long p[N];\nvector<unsigned long long> h[N];\nstruct node{\n    int len;\n    unsigned long long h;\n}a[N];\nunsigned long long now=0;\nint Len=0;\nint res=0;\nunsigned long long calc(int id,int L,int R){\n    unsigned long long ans=h[id][R]-h[id][L-1];\n    return ans;\n}\nint SUM=0;\nint Pre[N];\nint main(){\n    scanf(\"%d%d%d\",&n,&T,&Q);\n    p[0]=1;\n    for(int i=1;i<=n;i++)\n        p[i]=p[i-1]*base;\n    for(int i=1;i<=T;i++){\n        scanf(\"%d\",&s[i]);\n        tong[s[i]]++;\n        maxx=max(maxx,s[i]);\n        hash1+=p[s[i]];\n    }\n    tong.clear();\n    for(int i=1;i<=n;i++){\n        int len;\n        scanf(\"%d\",&len);\n        h[i].push_back(0);\n        for(int j=1;j<=len;j++){\n            int x;\n            scanf(\"%d\",&x);\n            v[i].push_back(x);\n            unsigned long long tmp=h[i][j-1];\n            tmp=tmp+p[x];\n            h[i].push_back(tmp);\n        }\n        a[i].len=len;\n        a[i].h=h[i][len];\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n        scanf(\"%d\",&r[i]);\n    if(m<T){\n        for(int i=1;i<=m;i++)\n            for(int j=1;j<=10;j++)\n                r[i+j*m]=r[i];\n        m*=10;\n\n    }\n    for(int i=1;i<=m;i++)\n        r[i+m]=r[i];\n    int nxt=1,nxtpos=1;\n    for(int i=1;i<=m&&i<=Q;i++){\n        now+=a[r[i]].h;\n        Len+=a[r[i]].len;\n        while(Len>T&&nxt<=i){\n            if(nxtpos!=1||Len-a[r[nxt]].len<T){\n                int delta=min(Len-T,a[r[nxt]].len-nxtpos+1);\n                now-=calc(r[nxt],nxtpos,nxtpos+delta-1);\n                Len-=delta;\n                nxtpos+=delta;\n            }else if(Len-a[r[nxt]].len>=T){\n                Len-=a[r[nxt]].len;\n                now-=a[r[nxt]].h;\n                nxt++;\n                nxtpos=1;\n            }\n            while(nxtpos>a[r[nxt]].len&&nxt<=i){\n                nxtpos-=a[r[nxt]].len;\n                nxt++;\n            }\n        }\n        if(now==hash1)  res++;\n    }\n    for(int i=1;i<=m&&i+m<=Q;i++){\n        now+=a[r[i]].h;\n        Len+=a[r[i]].len;\n        while(Len>T&&nxt<=i+m){\n            if(nxtpos!=1||Len-a[r[nxt]].len<T){\n                int delta=min(Len-T,a[r[nxt]].len-nxtpos+1);\n                now-=calc(r[nxt],nxtpos,nxtpos+delta-1);\n                Len-=delta;\n                nxtpos+=delta;\n            }else if(Len-a[r[nxt]].len>=T){\n                Len-=a[r[nxt]].len;\n                now-=a[r[nxt]].h;\n                nxt++;\n                nxtpos=1;\n            }\n            while(nxtpos>a[r[nxt]].len&&nxt<=i+m){\n                nxtpos-=a[r[nxt]].len;\n                nxt++;\n            }\n        }\n        Pre[i]=Pre[i-1];\n        if(now==hash1)  res++,SUM++,Pre[i]++;\n    }\n    Q-=2*m;\n    if(Q>=0){\n        res+=(Q/m)*SUM+(Pre[Q%m]);\n    }\n    cout<<res<<endl;\n    return 0;\n}\n\n```\n\n**tips:**\n\n~~\u4e0d\u8981\u50cf\u6211\u4e00\u6837 $ N $ \u548c $ n $ \u6df7\u7528\u3002~~\n\n\u672c\u9898\u4e0d\u5361 $ m $ \u6b21\u64cd\u4f5c\u540e\u4ecd\u7136\u5c0f\u4e8e $ T $ \u7684\u60c5\u51b5\uff0c\u867d\u7136\u8349\u7387\u5730\u4e58\u4e86\u4e2a $ 10 $ \u3002\n\n\n\n\n\n\n\n\n",
        "postTime": 1636716967,
        "uid": 216213,
        "name": "syk666",
        "ccfLevel": 7,
        "title": "P5270 \u65e0\u8bba\u600e\u6837\u795e\u6811\u5927\u4eba\u90fd\u4f1a\u5220\u5e93\u8dd1\u8def"
    },
    {
        "content": "\u7533\u660e\u4e00\u4e0b\uff1a\u8fd9\u7bc7\u9898\u89e3\u53ef\u80fd\u548cxht37\u7684\u9898\u89e3\u6709\u5171\u540c\u4e4b\u5904\uff0c\u4e0d\u8fc7\u4e5f\u6709\u4e00\u4e9b\u81ea\u5df1\u7684\u601d\u8def\n\n\u56e0\u4e3a\u8fd9\u9898\u672c\u6765\u4e0d\u592a\u4f1a\u505a\uff0c\u7136\u540e\u770b\u61c2\u4e86xht37\u7684\u9898\u89e3\uff0c\u5f00\u59cb\u7801\u7684\u8fd9\u9053\u9898\n\n\u9996\u5148\u6211\u4eec\u8003\u865150pts\u7684\u66b4\u529b\u600e\u4e48\u5199\uff1f\n\n\u6211\u4eec\u53ea\u9700\u8981\u7528\u53cc\u7aef\u961f\u5217\u6765\u66b4\u529b\u7ef4\u62a4\u5f53\u524d\u7684\u4e32\u548c\u76ee\u6807\u4e32\u662f\u5426\u76f8\u540c\u5373\u53ef\n\n\u7136\u540e\u7531\u4e8e\u8be2\u95ee\u662f\u5faa\u73af\u7684\uff0c\u5e76\u4e14\u8303\u56f4\u8fbe\u5230\u4e861e9\uff0c\u6211\u4eec\u53d1\u73b0\u627e\u51fa\u5faa\u73af\u8282\u5373\u53ef\n\n\u6ce8\u610f\u7b2c\u4e00\u5faa\u73af\u6709\u53ef\u80fd\u4e0d\u662f\u5b8c\u6574\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u505a\u4e24\u6b21\uff0c\u4ee5\u7b2c\u4e8c\u4e2a\u5faa\u73af\u4e3a\u4e3b\u6765\u66f4\u65b0\u7b54\u6848\uff01\n\n\u53ef\u662f\u4e8b\u5b9e\u4e0a\u5982\u679c\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u8be2\u95ee\u53cd\u590d\u8c03\u7528\u540c\u4e00\u4e2a\u8303\u56f4\u5f88\u5927\u7684\u4e32\u5c31\u4f1a\u88ab\u5361\u6389\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u652f\u6301\u4e00\u79cd\u5feb\u901f\u6bd4\u8f83\u662f\u5426\u76f8\u540c\u7684\u7b97\u6cd5\n\n\u7531\u4e8e\u6bd4\u8f83\u53ea\u662f\u5728\u6bcf\u4e2a\u8be2\u95ee\u52a0\u5b8c\u4ee5\u540e\u8be2\u95ee\u7684\uff0c\u6240\u4ee5\u8be2\u95ee\u6570\u662f\u53ef\u63a7\u7684\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u53ef\u4ee5\u5b57\u7b26\u4e32hash\u5373\u53ef\uff0c\u4f46\u662f\u8fd9\u91cc\u7684hash\u548c\u5e73\u5e38\u7684hash\u4e0d\u540c\n\n\u8fd9\u4e2ahash\u7684\u601d\u8def\u548cP4065\u7684\u601d\u60f3\u5dee\u4e0d\u591a\uff01\n\n\u7531\u4e8e\u6bd4\u8f83\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ed9\u6bcf\u4e2a\u5b57\u7b26\uff08\u8fd9\u91cc\u9898\u76ee\u91cc\u662f\u6574\u6570\uff09\u5b9a\u4e49\u4e00\u4e2ahash\u503c\n\n\u7136\u540e\u533a\u95f4\u4e00\u6bb5\u5b57\u7b26\u4e32\u7684hash\u503c\u4e3a\u6bcf\u4e2a\u5b57\u7b26hash\u7684\u603b\u548c\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u7684\u6bd4\u8f83\n\n\u4f46\u662f\u4e8b\u5b9e\u4e0a\u8fd9\u6837\u5f88\u5bb9\u6613\u88ab\u4e00\u4e9bduliu\u51fa\u9898\u4eba\u5361\u6389\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49hash\u662f\u4e00\u4e2a6\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u540c\u6837\u652f\u6301\u6211\u4eec\u52a0\u51cf\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u5730\u51cf\u5c11\u88ab\u5361\u6389\u7684\u6982\u7387\uff01\n\n\u7136\u540e\u6211\u4eec\u6bd4\u8f83\u7684\u65f6\u5019\u8fd8\u6709\u7528deque\uff0c\u540c\u6837\u7edf\u8ba1\u54c8\u5e0c\u503c\u53ef\u4ee5\u7528vector\u8bb0\u5f55\u540e\u7f00\u548c\uff0c\u5177\u4f53\u6709\u4e00\u4e9b\u7ec6\u8282\u89c1\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pr; \n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 100005;\n\nint n, T, q, str[N], mx, m, len[N], ord[N], pre[N];\nvector<int> vec[N];\nstruct hashh {\n\tull h[6];\n\thashh() { memset(h, 0, sizeof(h)); }\n} hs[N], hhh, sth;\nvector<hashh> rec[N];\n\ninline ull lar_rand() { return (ull)rand() * rand() * rand() * rand() * rand() * rand(); }\ninline void add(hashh &x, hashh &y) {\n\tfor (int i = 0; i < 6; i++) x.h[i] += y.h[i];\n} \ninline void sub(hashh &x, hashh &y) {\n\tfor (int i = 0; i < 6; i++) x.h[i] -= y.h[i];\n}\ninline bool equal(hashh x, hashh y) {\n\tfor (int i = 0; i < 6; i++) if (x.h[i] != y.h[i]) return false;\n\treturn true;\n}\n\nint main() {\n\tsrand(time(NULL));\n\tn = read(); T = read(); q = read();\n\tfor (int i = 1; i <= T; i++) str[i] = read(), mx = max(mx, str[i]);\n\tfor (int i = 1; i <= n; i++) {\n\t\tint l = read();\n\t\twhile (l--) {\n\t\t\tint x = read();\n\t\t\tvec[i].push_back(x); mx = max(mx, x);\n\t\t}\n\t}\n\tm = read();\n\tfor (int i = 1; i <= m; i++) ord[i] = read();\n\tfor (int i = 0; i <= mx; i++)\n\t\tfor (int j = 0; j < 6; j++) hs[i].h[j] = lar_rand();\n\tfor (int i = 1; i <= T; i++) add(sth, hs[str[i]]);\n\tfor (int i = 1; i <= n; i++) {\n\t\tlen[i] = vec[i].size(), rec[i].resize(len[i]);\n\t\tfor (int j = len[i] - 1; j >= 0; j--) rec[i][j] = hs[vec[i][j]];\n\t\tfor (int j = len[i] - 2; j >= 0; j--) add(rec[i][j], rec[i][j + 1]);\n\t}\n\tint curl = 0, ans = 0;\n\tdeque<pr> que; while (!que.empty()) que.pop_back();\n\tfor (int i = 1; i <= m && i <= q; i++) {\n\t\tadd(hhh, rec[ord[i]][0]), curl += len[ord[i]];\n\t\tque.push_back(pr(ord[i], 0));\n\t\twhile (curl > T) {\n\t\t\tpr x = que.front(); que.pop_front();\n\t\t\tint fir = x.first, sec = x.second;\n\t\t\tsub(hhh, rec[fir][sec]);\n\t\t\tcurl -= len[fir] - sec;\n\t\t\tif (curl < T) {\n\t\t\t\tint np = len[fir] - (T - curl);\n\t\t\t\tque.push_front(pr(fir, np));\n\t\t\t\tadd(hhh, rec[fir][np]);\n\t\t\t\tcurl = T;\n\t\t\t}\n\t\t}\n\t\tif (equal(hhh, sth)) ans++;\n\t}\n\tif (q <= m) {\n\t\tprintf(\"%d\\n\", ans);\n\t\treturn 0;\n\t}\n\tq -= m; int cyc = 0;\n\tfor (int i = 1; i <= m && i <= q; i++) {\n\t\tadd(hhh, rec[ord[i]][0]), curl += len[ord[i]];\n\t\tque.push_back(pr(ord[i], 0));\n\t\twhile (curl > T) {\n\t\t\tpr x = que.front(); que.pop_front();\n\t\t\tint fir = x.first, sec = x.second;\n\t\t\tsub(hhh, rec[fir][sec]);\n\t\t\tcurl -= len[fir] - sec;\n\t\t\tif (curl < T) {\n\t\t\t\tint np = len[fir] - (T - curl);\n\t\t\t\tque.push_front(pr(fir, np));\n\t\t\t\tadd(hhh, rec[fir][np]);\n\t\t\t\tcurl = T;\n\t\t\t}\n\t\t}\n\t\tpre[i] = pre[i - 1];\n\t\tif (equal(hhh, sth)) cyc++, pre[i]++;\n\t}\n\tprintf(\"%d\\n\", ans + cyc * (q / m) + pre[q % m]);\n\treturn 0;\n}\n```\n",
        "postTime": 1593744892,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5270 \u3010\u65e0\u8bba\u600e\u6837\u795e\u6811\u5927\u4eba\u90fd\u4f1a\u5220\u5e93\u8dd1\u8def\u3011"
    },
    {
        "content": "[\u9898](https://www.luogu.com.cn/problem/P5270)\n\n\u6570\u636e\u8303\u56f4 $q \\le 10^9$\uff0c\u65e0\u6cd5\u76f4\u63a5\u6a21\u62df\uff0c\u8003\u8651\u7b97\u51fa $m$ \u6b21\u64cd\u4f5c\u7684\u7b54\u6848\uff0c\u7136\u540e\u4e58\u4e0a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u91cd\u590d\u6b21\u6570\u3002\n\n\u56e0\u4e3a\u7b2c\u4e00\u8f6e\u52a0\u5b57\u7b26\u4e32\u6bd4\u8f83\u7279\u6b8a\uff0c\u8003\u8651\u7b2c $m+1\\sim 2\\times m$ \u6b21\u64cd\u4f5c\u3002\n\n\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u51fa\u6bcf\u4e00\u79cd\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u4e0e\u4e32 $S$ \u76f8\u540c\u3002\u5bb9\u6613\u60f3\u5230\u54c8\u5e0c\u3002\n\n\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26 $c$\uff0c\u5c06\u5b83\u6620\u5c04\u5230\u4e00\u4e2a\u5927\u6574\u6570 $to_c$\uff0c\u7136\u540e\u53ea\u8981\u5224\u65ad $to$ \u7684\u548c\u662f\u5426\u76f8\u7b49\u3002\n\n\u53ef\u4ee5\u7ef4\u62a4 \u6bcf\u4e2a\u4e32\u7684 $to$ \u7684\u540e\u7f00\u548c \u4e0e \u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684 $to$ \u7684\u548c\u7684\u524d\u7f00\u548c \u6765\u5224\u65ad\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nvoid file(){\n\tfreopen(\"1.in\", \"r\", stdin);\n\tfreopen(\"1.out\", \"w\", stdout);\n}\nusing ll = long long;\nusing ull = unsigned long long;\nmt19937_64 gen(time(0));\nconst int nMax = 2e6 + 5;\nint n, t, q, m;\narray<int, nMax> s, r, len;\narray<__int128_t, nMax> sum; // \u6bcf\u4e2a\u4e32\u7684 to \u7684\u548c\u7684\u524d\u7f00\u548c\n__int128_t hs;\narray<vector<int>, nMax> a;\narray<vector<__int128_t>, nMax> suf; // \u6bcf\u4e2a\u4e32\u7684 to \u7684\u540e\u7f00\u548c\narray<ull, nMax> to;\n// \u6ce8\u610f\u53ef\u80fd\u524d m \u6b21\u64cd\u4f5c\u540e\u62fc\u63a5\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4ecd\u7136 < T\n// init \u662f\u5c06 r \u4e0d\u65ad\u590d\u5236\uff0c\u4f7f\u5f97\u524d m \u6b21\u64cd\u4f5c\u540e\uff0c\u5b57\u7b26\u4e32\u603b\u957f\u5ea6 > T\nvoid init(){\n\tll ts = 0, tm = m, sum = 0;\n\tfor(int i = 1; i <= m; i++) ts += a[r[i]].size();\n\tsum = ts;\n\twhile(sum - ts <= t){\n\t\tsum += ts;\n\t\tfor(int i = 1; i <= tm; i++) r[m + i] = r[i];\n\t\tm += tm;\n\t}\n}\nint main(){\n\tfile();\n\tios::sync_with_stdio(0);\n\tfor(int i = 0; i < nMax; i++) to[i] = gen(); // \u6620\u5c04\n\tcin >> n >> t >> q;\n\tfor(int i = 1; i <= t; i++) cin >> s[i], hs += to[s[i]];\n\tfor(int i = 1; i <= n; i++){\n\t\tint l; cin >> l, a[i].resize(l);\n\t\tfor(int &x : a[i]) cin >> x;\n\t\tsuf[i].resize(l + 1);\n\t\tfor(int j = l - 1; j >= 0; j--)\n\t\t\tsuf[i][j] = suf[i][j + 1] + to[a[i][j]];\n\t}\n\tcin >> m;\n\tfor(int i = 1; i <= m; i++) cin >> r[i];\n\tinit();\n\tfor(int i = 1; i <= m; i++) r[i + m] = r[i];\n\tfor(int i = 1; i <= 2 * m; i++){\n\t\tsum[i] = sum[i - 1] + suf[r[i]][0];\n\t\tlen[i] = len[i - 1] + a[r[i]].size();\n\t}\n\tint pos = 1, res = 0, cnt = 0;\n\tfor(int i = 1; i <= min(m, q); i++){ // 1 ~ m\n\t\twhile(len[i] - len[pos] >= t) pos++;\n\t\tint p = t - (len[i] - len[pos]), id = r[pos];\n\t\tif(len[i] - len[pos - 1] < t) continue;\n\t\t__int128_t val = suf[id][a[id].size() - p] + sum[i] - sum[pos];\n\t\tassert(a[id].size() >= p);\n\t\tif(val == hs) res++;\n\t}\n\tif(q <= m) return cout << res << \"\\n\", 0;\n\tq -= m, pos = 1;\n\tfor(int i = m + 1; i <= 2 * m; i++){ // m + 1 ~ 2m\n\t\twhile(len[i] - len[pos] >= t) pos++;\n\t\tint p = t - (len[i] - len[pos]), id = r[pos];\n\t\tif(len[i] - len[pos - 1] < t) continue;\n\t\t__int128_t val = suf[id][a[id].size() - p] + sum[i] - sum[pos];\n\t\tif(val == hs) cnt++;\n\t}\n\tres += q / m * cnt, pos = 1;\n\tfor(int i = m + 1; i <= m + q % m; i++){ // \u7edf\u8ba1\u5269\u4f59\u90e8\u5206\n\t\twhile(len[i] - len[pos] >= t) pos++;\n\t\tint p = t - (len[i] - len[pos]), id = r[pos];\n\t\tif(len[i] - len[pos - 1] < t) continue;\n\t\t__int128_t val = suf[id][a[id].size() - p] + sum[i] - sum[pos];\n\t\tif(val == hs) res++;\n\t}\n\tcout << res << \"\\n\";\n\treturn 0;\n}\n```",
        "postTime": 1683772705,
        "uid": 431487,
        "name": "_zdc_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5270 \u65e0\u8bba\u600e\u6837\u795e\u6811\u5927\u4eba\u90fd\u4f1a\u5220\u5e93\u8dd1\u8def"
    }
]