[
    {
        "content": "\u6df3\u6734\u7684\u5e76\u67e5\u96c6~\u4f46\u56e0\u4e3a\u5b83\u4eec\u5e26\u6709\u6743\u503c\uff0c\u56e0\u6b64\u6392\u5e8f\u662f\u5fc5\u987b\u7684\uff0c\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u8ba9\u5371\u5bb3\u5927\u7684\u7f6a\u72af\u5728\u4e24\u4e2a\u76d1\u72f1\u91cc\u3002\n\n\u90a3\u4e48\uff0c\u518d\u7ed3\u5408\u654c\u4eba\u7684\u654c\u4eba\u548c\u81ea\u5df1\u5728\u4e00\u4e2a\u76d1\u72f1\u7684\u89c4\u5f8b\u5408\u5e76\u3002\n\n\u5f53\u67e5\u627e\u65f6\u53d1\u73b0\u5176\u4e2d\u4e24\u4e2a\u7f6a\u72af\u4e0d\u53ef\u907f\u514d\u5730\u78b0\u649e\u5230\u4e00\u8d77\u65f6\uff0c\u53ea\u80fd\u5c06\u5176\u8f93\u51fa\u5e76\u7ed3\u675f\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u5c31\u662f\u6ca1\u6709\u51b2\u7a81\u65f6\u4e00\u5b9a\u8f93\u51fa0\uff01\uff01\uff01\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct data {int x,y,z;};//\u7ed3\u6784\u4f53\u4fbf\u4e8e\u6392\u5e8f\u7684\u53d8\u6362\ndata f[100005];\nint n,m,a[20005],b[20005],i;\ninline bool cmp(data a,data b)//\u91cd\u5199cmp\u51fd\u6570\n{\n    return a.z>b.z;\n}\ninline int find(int x)\n{\n    if(a[x]==x) return x;\n    a[x]=find(a[x]);\n    return a[x];\n}\ninline void ad(int x,int y)//\u5408\u5e76\n{\n    x=find(a[x]);\n    y=find(a[y]);\n    a[x]=y;\n}\ninline bool check(int x,int y)//\u67e5\u627e\n{\n    x=find(x);\n    y=find(y);\n    if(x==y) return true;\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++) a[i]=i;\n    for(i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&f[i].x,&f[i].y,&f[i].z);\n    sort(f+1,f+m+1,cmp);//c\u515a\u7684\u4f18\u8d8a\u611f~\n    for(i=1;i<=m+1;i++)//\u4e3a\u4ec0\u4e48m+1\u5462\uff1f\u5982\u679c\u8fd0\u884c\u5230m+1\u4f1a\u8f93\u51fa0\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48\u3002\n    {\n        if(check(f[i].x,f[i].y)) {printf(\"%d\",f[i].z);break;}//\u5982\u679c\u4e24\u4e2a\u7f6a\u72af\u5df2\u7ecf\u5728\u540c\u4e00\u76d1\u72f1\u5c31\u8f93\u51fa \uff0c\u5e76\u9000\u51fa\n        else\n        {\n            if(!b[f[i].x]) b[f[i].x]=f[i].y;//\u6807\u8bb0\u201c\u654c\u4eba\u201d\n                else {ad(b[f[i].x],f[i].y);}//\u5c06\u654c\u4eba\u7684\u654c\u4eba\u5408\u5e76\n            if(!b[f[i].y]) b[f[i].y]=f[i].x;\n                else {ad(b[f[i].y],f[i].x);}\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1499216567,
        "uid": 20094,
        "name": "\u68a6\u56de\u8fd8",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "## \u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011\n\n\u9898\u76ee\u4f20\u9001\u95e8\uff1a\n\nhttps://www.luogu.org/problemnew/show/P1525\n\n\u9644\u8bed\uff1a**\u771f\u662f\u4e00\u9053\u597d\u9898**\uff01\uff01\uff01\n\n\u5e0c\u671b\u5bf9**\u5e76\u67e5\u96c6**\u548c**\u4e8c\u5206\u56fe\u5339\u914d**\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3\u7684\u7ae5\u978b\u597d\u597d\u7406\u89e3\u672c\u9898\n\n=================================================\n\n### \u9898\u9762\u5927\u610f:~~\uff08\u4eba\u6027\u7ffb\u8bd1\uff09~~\n\n\u7ed9\u4f60m\u5bf9\u77db\u76fe\u5173\u7cfb,**\u6bcf\u5bf9\u5173\u7cfb\u5206\u522b\u6d89\u53ca\u5230x\uff0cy\u4e24\u4eba**,\u77db\u76fe\u503c\u4e3aw\n\n\u8bf7\u4f60\u5224\u65ad**\u5206\u914d**x\u548cy\u5230**\u4e24\u4e2a\u96c6\u5408**\u4e2d\uff0c\u80fd\u5426\u907f\u514d\u51b2\u7a81\n\n\u5982**\u80fd\u907f\u514d**\u8bf7\u8f93\u51fa0\uff0c\u5982\u679c**\u51b2\u7a81\u4e0d\u53ef\u907f\u514d**\uff0c\u8bf7\u8f93\u51fa**\u6700\u5c0f\u7684\u77db\u76fe\u503c**\n\n\u4ee5\u4e0a\u662f\u672c\u4eba\u81ea\u5df1\u7684\u201c\u7ffb\u8bd1\u201d\u7406\u89e3\uff0c\u63a5\u4e0b\u6765\u8bf7\u770b**\u7b97\u6cd5\u5206\u6790**\n\n=================================================\n\n### \u7b97\u6cd5\u5206\u6790\uff1a\n\n~~\u5148\u6765\u4e00\u4e9b\u6ca1\u7528\u7684~~~~~\n\n\u672c\u4eba\u5728\u505a\u672c\u9898\u65f6\uff0c\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7684**\u4e24\u4e2a\u76d1\u72f1(\u5373\u4e24\u4e2a\u96c6\u5408)**\uff0c\n\n\u5c31\u5f88\u987a\u7406\u6210\u7ae0\u7684\u60f3\u5230\u6700\u8fd1\u770b\u5230\u7684\u56fe\u8bba\u95ee\u9898----**\u4e8c\u5206\u56fe**\uff0c\n\n\u6240\u4ee5\u672c\u4eba\u6700\u5f00\u59cb\u7528\u7684\u662f**\u4e8c\u5206\u56fe\u5224\u5b9a\uff08\u67d3\u8272\u6cd5\uff09**A\u6389\u4e86\u672c\u9898\n\n\u4f46\u662f\u6211\u8fd8\u662f\u592a\u849f\u4e86\u3002\u3002\u3002\u5728\u67d0Wang\u59d3\u5de8\u4f6c\u7684\u6307\u5bfc\u4e0b\n\n(\"%4^89&8$^%&&*#@!$%^&~~~?')  \n\n~~\u6b64\u5904\u7701\u53bb\u4e00\u4e07\u5b57\u5927\u4f6c\u7684\u8bdd~~\u5f97\u77e5\u8fd8\u6709\u4e00\u79cd\u4e1c\u897f\u53eb\u505a**\u5e76\u67e5\u96c6**\n\n\uff08\u8fd8\u662f\u5927\u4f6c\u5389\u5bb3\uff0c\u6211\u592a\u849f\u4e86= =\uff09\u8c03\u8bd5\u4e86\u534a\u5929\uff0c\u7ec8\u4e8e\u4e24\u79cd\u65b9\u6cd5\u90fd\u8fc7\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u5c31\u8bb2\u4e00\u4e0b\u8fd9\u4e24\u79cd\u65b9\u6cd5\n~~\uff08\u8fa3\u9e21BB\u7ed3\u675f\uff0c\u63a5\u4e0b\u6765\u662f\u6b63\u9898\uff09~~\n\n\n\n#### 1.\u5e76\u67e5\u96c6\n\n\u672c\u9898\uff0c\u56e0\u4e3a\u8bf4\u4e86\u6709\u201c**\u8fb9\u6743\u503c**\u201d\uff08\u6211\u7406\u89e3\u4e3a\u77db\u76fe\u503c\uff09\uff0c\u6240\u4ee5**\u8981\u6c42\u51fa\u73b0\u77db\u76fe\u60c5\u51b5\u4e0b**\u7684**\u6700\u5c0f\u8fb9\u6743\u503c**\u663e\u7136\u662f**\u9700\u8981\u6392\u5e8f**\u7684\n\n\u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u6211\u4eec\u8981\u6309\u7167\u4ec0\u4e48\u65b9\u6cd5\u8fdb\u884c\u5206\u914d\u5462\uff1f\n\n\u6211\u4eec\u4e0d\u59a8\u8fd9\u6837\u60f3\uff1a\u4e24\u4e2a\u4ebaa\uff0cb\u6709\u4ec7\uff0c\u90a3\u4e48\u628a\u4ed6\u4eec\u653e\u5728\u4e00\u8d77\u663e\u7136\u4f1a\u6253\u8d77\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u4e0d\u5982**\u628aa\u4e0eb\u7684\u5176\u4ed6\u654c\u4eba\u653e\u5728\u4e00\u8d77**\uff0c\n\n\u56e0\u4e3a\u8fd9\u6837**\u53ef\u80fd\u4f1a\u51fa\u73b0\u201c\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\u201d\u7684\u60c5\u51b5**\uff0c**\u6070\u597da\u4e0eb\u7684\u5176\u4ed6\u654c\u4eba\u4e4b\u95f4\u6ca1\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u53ef\u4ee5\u653e\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u53cd\u4e4bb\u5bf9a\u4ea6\u7136**\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u8fd9\u6837\u5b9e\u73b0\uff1a\n\u9996\u5148\u9700\u8981**\u5e76\u67e5\u96c6\u521d\u59cb\u5316**\n\n\n\uff081\uff09\u5148**\u628a\u6240\u6709\u7684\u77db\u76fe\u5173\u7cfb\u6309\u7167\u77db\u76fe\u503c\u4ece\u5927\u5230\u5c0f\u6392\u4e00\u904d\u5e8f**\uff0c\n\n\uff082\uff09\u63a5\u4e0b\u6765\u6bcf\u6b21\u64cd\u4f5c\u53d6\u51fa\u4e00\u4e2a\u5173\u7cfb\uff0c**\u770b\u77db\u76fe\u7684\u4e24\u4e2a\u4ebax\u548cy\u662f\u5426\u5df2\u7ecf\u5206\u914d\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d**\uff08\u5e76\u67e5\u96c6\u627e\u7236\u4eb2\u5373\u53ef\uff09\uff0c\u90a3\u4e48\u8fd8\u5206\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\u5982\u679c\u5728\u4e00\u8d77\u90a3\u4e48\u663e\u7136\u4f1a\u6253\u8d77\u6765\uff08\u4f1a\u51fa\u73b0\u77db\u76fe\uff09\uff0c\u90a3\u4e48**\u76f4\u63a5\u8f93\u51fa\u5f53\u524d\u7684\u8fb9\u6743**\uff08\u77db\u76fe\u503c\uff09\u5373\u53ef\uff08\u6b64\u65f6\u4fdd\u8bc1\u662f\u6700\u5c0f\u77db\u76fe\u503c\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6392\u5e8f\u4e86\uff09\n\n\u5982\u679c\u4e0d\u5728\u540c\u4e00\u7ec4\uff0c\u5219**\u6309\u7167\u201c\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\u201d\u7684\u539f\u5219**\uff0c\u628ax\u4e0ey\u7684\u5176\u4ed6\u654c\u4eba\u5206\u5728\u540c\u4e00\u7ec4\uff0cy\u4e0ex\u7684\u5176\u4ed6\u654c\u4eba\u5206\u5728\u540c\u4e00\u7ec4\n\n\u4e0d\u65ad\u8fdb\u884c\u4ee5\u4e0a\u64cd\u4f5c\u6700\u7ec8\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\n\n\u4ee5\u4e0a\u662f\u7b2c\u4e00\u79cddalao\u505a\u6cd5= =\n\n#### 2.\u4e8c\u5206\u56fe\u5224\u5b9a\n\n\u5176\u5b9e\u5bf9\u4e8e**\u4e8c\u5206\u56fe\u5224\u5b9a**\u7684\u505a\u6cd5\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u7684\uff0c\uff08\u56e0\u4e3a\u6211\u592a\u84bb\u60f3\u4e0d\u5230\u5e76\u67e5\u96c6\u8fd8\u8981\u6709\u8fb9\u6743\uff09\u4e5f\u6613\u4e8e\u5b9e\u73b0\n\n\u7531\u4e8e\u672c\u9898\u8981\u6c42\u628a\u7f6a\u72af\u5212\u5206\u5230\u4e24\u4e2a\u76d1\u72f1\u4e2d\uff08\u6211\u7406\u89e3\u4e3a\u5212\u5206\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\uff09\u90a3\u4e48\u6211\u4e0d\u7981\u60f3\u5230\u56fe\u8bba\u7684**\u4e8c\u5206\u56fe**\n\n\u9996\u5148\uff0c\u629b\u6765\u4e00\u4e2a**\u4e8c\u5206\u56fe\u7684\u5b9a\u4e49**\uff1a\n\n\u5982\u679c\u4e00\u5f20**\u65e0\u5411\u56fe**\u7684n\u4e2a\u8282\u70b9(n>=2)\u53ef\u4ee5\u5206\u4e3aA,B\u4e24\u4e2a\u96c6\u5408\uff0c\n\n\u4e14\u6ee1\u8db3A \u2229 B = \u2205  \uff0c\u800c\u4e14\u5728\u540c\u4e00\u96c6\u5408\u5185\u7684\u70b9\u4e4b\u95f4\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\uff0c\u90a3\u4e48\u8fd9\u5f20\u65e0\u5411\u56fe\u88ab\u79f0\u4e3a\u4e8c\u5206\u56fe\uff0c\u5176\u4e2dA\u548cB\u5206\u522b\u53eb\u505a\u4e8c\u5206\u56fe\u7684\u5de6\u90e8\u548c\u53f3\u90e8\n\n\u90a3\u4e48\u5bf9\u4e8e\u672c\u9898\uff0c\u6211\u4eec\u5c31\u662f\u8981\u628a\u6240\u6709\u4eba\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5176\u95f4\u4e0d\u51fa\u73b0\u77db\u76fe\uff0c\u663e\u7136\u5f88\u7b26\u5408\u4e8c\u5206\u56fe\u7684\u8981\u6c42\n\n\u522b\u592a\u9ad8\u5174\uff0c\u95ee\u9898\u6765\u4e86\uff1a**\u5982\u4f55\u5224\u5b9a\u8fd9\u4e2a\u201c\u77db\u76fe\u56fe\u201d\u662f\u4e0d\u662f\u4e8c\u5206\u56fe**\n\n\u5728\u8fd9\u91cc\uff0c\u672c\u4eba\u629b\u51fa\u4e00\u4e2a**\u4e8c\u5206\u56fe\u5224\u5b9a\u5b9a\u7406**\uff1a\n\n\n    \u4e00\u5f20\u65e0\u5411\u56fe\u662f\u4e8c\u5206\u56fe\uff1a\n    \n    \u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\uff08\u5947\u73af\u662f\u6307\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u73af\uff09\n\n\n\u5bf9\u4e8e\u8be5\u5b9a\u7406\u7684\u8bc1\u660e\uff0c\u672c\u4eba\u5c31\u4e0d\u518d\u8d58\u8ff0\uff08\u767e\u5ea6\u5427\u5e74\u8f7b\u4eba\uff09\n\n\u65e2\u7136\u6709\u4e86\u5224\u5b9a\u5b9a\u7406\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5**\u4f7f\u7528\u67d3\u8272\u6cd5\u8fdb\u884c\u4e8c\u5206\u56fe\u5224\u5b9a**\n\n\u67d3\u8272\u6cd5\u57fa\u672c\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n1.**\u5927\u591a\u6570\u60c5\u51b5\u57fa\u4e8edfs\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22**\uff09\n   \n\u4f46\u672c\u9898\u672c\u4eba\u7528\u4e86bfs\u5b9e\u73b0~~\uff08\u5bb3\u6015\u7206\u7cfb\u7edf\u6808\uff09~~\n\n2.\u6211\u4eec\u5c1d\u8bd5**\u7528\u9ed1\u548c\u767d\u4e24\u79cd\u989c\u8272\u6807\u8bb0\u56fe\u4e2d\u7684\u70b9**\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48**\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\u5e94\u5168\u90e8\u6807\u8bb0\u4e3a\u76f8\u53cd\u7684\u989c\u8272**\n\n\u5982\u679c**\u5728\u6807\u8bb0\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u51b2\u7a81**\uff0c\u90a3\u4e48\u7b97\u6cd5\u7ed3\u675f\uff0c\u8bc1\u660e\u672c\u56fe\u4e2d\u5b58\u5728\u5947\u73af\uff0c\u5373**\u672c\u56fe\u4e0d\u4e3a\u4e8c\u5206\u56fe**\uff1b\u53cd\u4e4b\uff0c\u5982\u679c**\u7b97\u6cd5\u6b63\u5e38\u7ed3\u675f\uff0c\u90a3\u4e48\u8bc1\u660e\u672c\u56fe\u662f\u4e8c\u5206\u56fe**\n\n\u90a3\u597d\u5566\uff0c\u73b0\u5728\u6709\u4e86\u67d3\u8272\u6cd5\u5224\u5b9a\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u4e00\u4ef6\u4e8b\uff1a\u8fd9\u4e2a**\u6700\u5c0f\u77db\u76fe\u503c**\u600e\u4e48\u6c42\uff1f\n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u5224\u5b9a\u95ee\u9898\uff1a\u662f\u5426\u5b58\u5728\u4e00\u79cd\u5206\u914d\u65b9\u6848\uff0c\u4f7f\u5f97\u6700\u5c0f\u7684\u77db\u76fe\u503c\u4e0d\u8d85\u8fc7mid\u3002\u663e\u7136\uff0c\u5f53mid\u8f83\u5c0f\u65f6\u53ef\u884c\u7684\u65b9\u6848\u5bf9\u4e8emid\u8f83\u5927\u65f6\u4f9d\u7136\u53ef\u884c\u3002\u6362\u8a00\u4e4b\uff0c**\u672c\u9898\u7684\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027**\uff0c**\u53ef\u4ee5\u91c7\u7528\u4e8c\u5206\u7684\u65b9\u6cd5\u6c42\u89e3**\uff0c**\u5c06\u6c42\u6700\u5c0f\u503c\u95ee\u9898\u8f6c\u6362\u4e3a\u5224\u5b9a\u95ee\u9898\n**\n\n\u7b56\u7565\u5982\u4e0b\uff1a\u6211\u4eec**\u4e8c\u5206\u7b54\u6848**\uff0c\u8bbe\u5f53\u524d\u4e8c\u5206\u7684\u503c\u4e3amid\uff0c\u6b64\u65f6\u4efb\u610f\u4e24\u4e2a\u77db\u76fe\u53cc\u65b9x\u548cy\u5fc5\u987b\u88ab\u5206\u5728\u4e24\u4e2a\u4e0d\u540c\u96c6\u5408\u4e2d\uff0c\u5c06\u7f6a\u72af\u4eec\u4f5c\u4e3a\u8282\u70b9\uff0c**\u5728\u77db\u76fe\u503c\u5927\u4e8e\u7b49\u4e8emid\u7684\u7f6a\u72af\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u5f20\u65e0\u5411\u56fe**\u3002\u6b64\u65f6\u6211\u4eec**\u53ea\u9700\u5224\u5b9a\u8fd9\u5f20\u65e0\u5411\u56fe\u662f\u5426\u4e3a\u4e8c\u5206\u56fe**\u5373\u53ef\uff08\u56e0\u4e3a\u8981\u5206\u4e3a\u4e24\u90e8\u5206\uff09\uff0c**\u5982\u679c\u662f\u4e8c\u5206\u56fe\uff0c\u4ee4\u4e8c\u5206\u53f3\u7aef\u70b9R=mid\uff0c\u5426\u5219\u4ee4L=mid\u5373\u53ef**\n\n\u4ee5\u4e0a\u5c31\u662f\u7b2c\u4e8c\u79cd\u601d\u8def~~~\n\n=================================================\n\n\u603b\u7ed3\uff1a\u672c\u4eba\u505a\u5b8c\u672c\u9898\u4e4b\u540e\uff0c\u5bf9\u6bd4\u4e86\u4e00\u4e0b\u4e24\u79cd\u505a\u6cd5\uff0c\u53d1\u73b0\u5e76\u67e5\u96c6\u7684\u6548\u7387\u7565\u9ad8\uff08\u4e5f\u8bb8\u662f\u5b83\u6709\u8def\u5f84\u538b\u7f29\uff0c\u5747\u644a\u4e0b\u63a5\u8fd1\u5e38\u6570\u7ea7\u522b\uff09\n\n\u4f46\u4e8c\u5206\u56fe\u5224\u5b9a\u505a\u6cd5\u4e5f\u6beb\u4e0d\u900a\u8272\uff0c\u5dee\u4e0d\u4e86\u591a\u5c11\uff0c\u800c\u4e14\u597d\u5b9e\u73b0\n\n\u4e8c\u8005\u6548\u7387\u6bd4\u8f83\uff1a\n\n##### \u5e76\u67e5\u96c6\uff1a128ms\n##### \u4e8c\u5206\u56fe\u5224\u5b9a\uff1a168ms\n\n\u63a5\u4e0b\u6765\u653e\u4ee3\u7801= =\u4e24\u4e2a\u4e00\u8d77\u653e\u4e86~~~\n\nPS:\u4ee3\u7801\u4e2d\u4e5f\u6709\u89e3\u91ca\u54e6\uff0c\u5e0c\u671b\u80fd\u5e2e\u5230\u5927\u5bb6\n\n=================================================\n\n\u505a\u6cd5\u4e00:\u5e76\u67e5\u96c6\n\n\n    #include<iostream>\n    #include<cstdio>\n    #include<cmath>\n    #include<algorithm>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    typedef long long ll;\n    const int inf=1e9+7;\n    inline int read()\n    {\n        int p=0,f=1;char c=getchar();\n        while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n        while(c>='0'&&c<='9'){p=p*10+c-'0';c=getchar();}\n        return f*p;}\n    const int maxn=20009;\n    const int maxm=200019;\n    struct Edge//\u5b9a\u4e49\u8fb9:\u8d77\u70b9nex,\u7ec8\u70b9to,\u8fb9\u6743w \n    {\n\t    int nex,to,w;\n    }p[maxm];\n    int n,m,fa[maxn],Enemy[maxn];\n    //fa[i]\u662fi\u7684\u7236\u4eb2(\u5e76\u67e5\u96c6),Enemy[i]\u662fi\u7684\u654c\u4eba(\u4e0d\u80fd\u5728\u540c\u4e00\u7ec4) \n    int find(int k)//\u5e76\u67e5\u96c6\u627e\u7236\u4eb2 \n    {\n\t    if(fa[k]==k)return k;\n\t    else return fa[k]=find(fa[k]);\n    }\n    bool cmp(Edge x,Edge y)\n    {return x.w>y.w;}\n    int main()\n    {\n\t    n=read(),m=read();\n\t    for(int i=1;i<=m;i++)//\u52a0\u8fb9 \n\t        p[i].nex=read(),\n\t\t    p[i].to=read(),\n\t\t    p[i].w=read();\n\t    for(int i=1;i<=n;i++)\n\t        fa[i]=i;\n\t    sort(p+1,p+1+m,cmp);//\u6309\u6012\u6c14\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n\t    //\u63a5\u4e0b\u6765\u5f00\u59cb\u5408\u5e76\u7f6a\u72af \n\t    for(int i=1;i<=m;i++)\n\t        {\n\t    \t    int t1=find(p[i].nex),t2=find(p[i].to);\n\t    \t    if(t1==t2)//\u51fa\u73b0\u77db\u76fe:\u76f4\u63a5\u7ed3\u675f \n\t    \t       {\n\t\t\t   \t\tprintf(\"%d\",p[i].w);\n\t\t\t   \t\treturn 0;\n\t\t\t       }\n\t\t\t    //\u5176\u4f59\u7684\u5c31\u628a\u654c\u4eba\u7684\u654c\u4eba\u4e0e\u81ea\u5df1\u5206\u5230\u4e00\u7ec4 \n\t    \t    if(!Enemy[p[i].nex])\n\t    \t   \t    Enemy[p[i].nex]=p[i].to;\n\t    \t    else fa[find(Enemy[p[i].nex])]=find(p[i].to);\n\t    \t    //\u540c\u4e0a \n\t\t\t    if(!Enemy[p[i].to])\n\t    \t   \t    Enemy[p[i].to]=p[i].nex;\n\t    \t    else fa[find(Enemy[p[i].to])]=find(p[i].nex);\t   \n\t\t    }\n\t    printf(\"0\");//\u6ca1\u6709\u77db\u76fe\n\t    return 0;\n    }\n\n=================================================\n\n\u505a\u6cd52\uff1a\u4e8c\u5206\u56fe\u5224\u5b9a\n\n\n\n    #include<iostream>\n    #include<cstdio>\n    #include<cmath>\n    #include<algorithm>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    typedef long long ll;\n    const int inf=1e9+7;\n    inline int read()\n    {\n        int p=0,f=1;char c=getchar();\n        while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){p=p*10+c-'0';c=getchar();}\n        return f*p;}\n    struct Edge\n    {\n\t    int from,to,w;\n    }p[200019];\n    int n,m,L,R,cnt,head[200019];\n    void add_edge(int x,int y,int W)\n    {\n\t    cnt++;\n\t    p[cnt].from=head[x];\n\t    head[x]=cnt;\n\t    p[cnt].to=y;\n\t    p[cnt].w=W;\n    }\n    bool work(int mid)\n    //\u5224\u65ad\u4ee5mid\u4e3a\u4ec7\u6068\u503c\u662f\u5426\u80fd\u5f62\u6210\u4e8c\u5206\u56fe \n    {\n\t    queue <int> q;\n\t    int color[20009]={0};\n\t    //\u4ee5\u4e0b\u662f\u67d3\u8272\u6cd5\u5224\u65ad\u4e8c\u5206\u56fe \n\t    for(int i=1;i<=n;i++)\n\t        if(!color[i]) \n\t           {\n\t       \t  q.push(i);\n\t       \t  color[i]=1;\n\t             while(!q.empty())\n\t       \t\t    {\n\t       \t\t      int x=q.front();\n\t       \t\t      q.pop();\n\t       \t\t      for(int i=head[x];i;i=p[i].from)\n\t       \t\t      \tif(p[i].w>=mid)\n\t\t\t\t\t\t\t   {\n\t       \t\t      \t    if(!color[p[i].to])//\u6ca1\u67d3\u8fc7\u8272 \n\t       \t\t      \t      {\n\t       \t\t      \t    \t q.push(p[i].to);\n\t       \t\t      \t    \t if(color[x]==1)\n                                      color[p[i].to]=2;\n\t       \t\t      \t    \t else color[p[i].to]=1;\n\t       \t\t      \t    \t //\u6d82\u4e0a\u76f8\u53cd\u989c\u8272\u5165\u961f \n\t\t\t\t\t\t\t\t   }\n\t       \t\t      \t   else if(color[p[i].to]==color[x])\n\t       \t\t      \t    \t   return false;\n\t       \t\t      \t   //\u5982\u679c\u51fa\u73b0\u77db\u76fe\u76f4\u63a5\u8fd4\u56de(\u4e0d\u4e3a\u4e8c\u5206\u56fe) \n\t\t\t\t\t\t\t  }\n\t\t\t\t\t   }\n\t\t       }\n\t    return true;//\u6b63\u5e38\u7ed3\u675f\uff0c\u8bc1\u660e\u662f\u4e8c\u5206\u56fe\n    }\n    int main()\n    {\n\t    n=read(),m=read();\n\t    for(int i=1;i<=m;i++)//\u52a0\u8fb9\uff08\u65e0\u5411\u56fe\uff09\n\t        {\n\t    \t    int x=read(),y=read(),w=read();\n\t    \t    R=max(R,w);//\u4e8c\u5206\u53f3\u7aef\u70b9 \n\t    \t    add_edge(x,y,w);\n\t    \t    add_edge(y,x,w);\n\t\t    }\n\t    R++;//\u522b\u5fd8\u4e86\u52a01\uff08\u53f3\u7aef\u70b9R\uff09\uff0c\u5de6\u7aef\u70b9L\u5f00\u59cb\u4e3a0\n\t    while(R>L+1)//\u5f00\u59cb\u4e8c\u5206\u5224\u65ad\u4e8c\u5206\u56fe(\u7b54\u6848\u5355\u8c03) \n\t          {\n\t      \t    int mid=(L+R)>>1;\n\t      \t    if(work(mid))\n\t\t\t      //\u67d3\u8272\u6cd5\u5224\u65ad\u4e8c\u5206\u56fe\u5982\u679c\u53ef\u884c\u5c31\u7f29\u5c0f\u8303\u56f4 \n\t      \t        R=mid;\n\t      \t    else L=mid;\n\t\t      }\n\t    printf(\"%d\",L);//\u6700\u540e\u5de6\u7aef\u70b9\u5373\u4e3a\u7b54\u6848\n\t    return 0;\n    }\n\n\n\u597d\u5566\uff0c\u5230\u6b64\u672c\u9898\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u5730\u65b9\u4e0d\u5bf9\u8bf7\u5404\u4f4ddalao\u6307\u51fa\uff0c\u6216\u8005\u79c1\u4fe1\u6211\u4e5f\u53ef\u4ee5\n\n\uff08\u672c\u4eba\u4ee3\u7801\u4e11\uff0cdalao\u4eec\u4e0d\u559c\u52ff\u55b7\uff09\n\n\u6700\u540e\u63a8\u5e7f\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff1a\n\nhttps://www.luogu.org/blog/new2zy/\n\n\u62dc\u62dc~~~\u611f\u8c22\u9605\u8bfb\n",
        "postTime": 1531311078,
        "uid": 60359,
        "name": "___new2zy___",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u6b64\u9898\u662f\u4e00\u9053\u5f88\u7ecf\u5178\uff0c\u800c\u4e14\u5f88\u597d\u7684\u9898\u76ee\u3002\u601d\u8def\u4e5f\u5341\u5206\u7684\u65b0\u9896\uff0c\u6bd4\u8f83\u7684\u96be\u4ee5\u6349\u6478\u3002\u800c\u6211\u53c8\u65e5\u5e38\u770b\u4e0d\u61c2\u697c\u4e0b\u5927\u4f6c\u4eec\u7684\u9898\u89e3\u4e86\u2026\u2026\uff08\u8fd8\u662f\u6211\u592a\u849f\u84bb\u4e86\uff09\u3002\u6240\u4ee5\uff0c\u6211\u60f3\u5728\u9898\u89e3\u533a\u4e2d\u8c08\u4e00\u8c08\u6211\u7684\u601d\u8003\u8fc7\u7a0b\uff0c\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4e00\u4e0b\u8fd9\u9053\u597d\u9898\u3002\n\n\u9996\u5148\uff0c\u4e00\u770b\u5230\u9898\u76ee\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u4f1a\u8054\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002\u4f46\u662f\uff0c\u8fd9\u4e00\u9898\u6bd4\u8f83\u7684\u590d\u6742\uff0c\u51e1\u4eba\u4e4b\u95f4\u7684\u5173\u7cfb\u5341\u5206\u51cc\u4e71\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u6700\u5c0f\u751f\u6210\u6811\u7ef4\u62a4\u3002\u4f46\u662f\uff0c\u867d\u7136\u4e0d\u80fd\u7528\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u5374\u53ef\u4ee5\u4fdd\u7559\u4e0b\u4e00\u4e2a\u5341\u5206\u91cd\u8981\u7684\u601d\u60f3\uff1a\u8d2a\u5fc3\u3002\u5f88\u5bb9\u6613\u4fbf\u80fd\u60f3\u5230\uff0c\u6211\u4eec\u8981\u4f7f\u6012\u6c14\u503c\u5927\u7684\u4e00\u5bf9\u4eba\u5c3d\u91cf\u4e0d\u5728\u540c\u4e00\u95f4\u76d1\u72f1\u91cc\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u4f18\u5148\u8003\u8651\u6012\u6c14\u503c\u6700\u5927\u7684\u4e24\u4e2a\u4eba\uff0c\u7136\u540e\u662f\u6b21\u5927\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u8fd9\u4e00\u60f3\u6cd5\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u5373\u7528\u4ea4\u6362\u6cd5\u3002\u5982\u679c\u5df2\u7ecf\u7528\u6b64\u7b56\u7565\u6392\u597d\u4e86\u7f6a\u72af\uff0c\u6b64\u65f6\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u7f6a\u72af\uff0c\u90fd\u4e0d\u80fd\u4f7f\u72b6\u6001\u6700\u4f18\u3002\u6240\u4ee5\uff0c\u53ea\u8981\u4e00\u65e6\u51fa\u73b0\u67d0\u4e24\u4e2a\u4eba\u4e00\u5b9a\u8981\u5728\u540c\u4e00\u76d1\u72f1\u65f6\uff0c\u5219\u65e0\u9700\u7ee7\u7eed\u5224\u65ad\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u65f6\u95f4\u80af\u5b9a\u662f\u5f71\u54cd\u529b\u6700\u5927\u7684\u4e86\u3002\u7136\u540e\u5c31\u76f4\u63a5\u8df3\u51fa\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u6709\u4e86\u8fd9\u4e2a\u5173\u952e\u7684\u601d\u8def\uff0c\u4fbf\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5c06\u9898\u76ee\u62bd\u8c61\u753b\u3002\u9898\u610f\u7528\u6700\u901a\u4fd7\u7684\u8bdd\u6765\u8bf4\uff0c\u5373\u5c06\u4e00\u4e2a\u65e0\u5411\u56fe\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u70b9\u96c6\uff0c\u4f7f\u4e24\u4e2a\u70b9\u96c6\u4e2d\u6240\u6709\u7684\u8fb9\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff08\u7136\u800c\u6211\u4e0d\u4f1a\u4e8c\u5206\u56fe\u67d3\u8272\u2026\u2026\uff09\u3002\u90a3\u4e48\uff0c\u57fa\u4e8e\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u7528\u4ec0\u4e48\u6765\u7ef4\u62a4\u70b9\u4e4b\u95f4\u7684\u73b0\u6709\u7684\u5173\u7cfb\u5462\uff1f\u8fd9\u6837\uff0c\u81ea\u7136\u800c\u7136\u5c31\u80fd\u60f3\u5230\u5e76\u67e5\u96c6\u4e86\u3002\n\n###\u4f46\u662f\uff0c\u53c8\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e24\u4e2a\u4e0d\u5728\u4e00\u8d77\u7684\u70b9\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e2a\u4e0d\u5728\u4e00\u8d77\u7684\u5173\u7cfb\u3002\n\n\u6709\u4eba\u5230\u8fd9\u91cc\u4fbf\u4f1a\u8bf4\uff1a\u8fd9\u5c31\u5bb9\u6613\u4e86\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a1-n\u7684\u5e76\u67e5\u96c6\uff0c\u5982\u679c\u4e24\u6570\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5219\u8bb0\u4e3a\u4ed6\u4eec\u4e24\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u3002\u8fd9\u6837\uff0c\u53ea\u8981\u4e24\u4e2a\u70b9\u88ab\u5224\u5230\u5728\u540c\u4e00\u5e76\u67e5\u96c6\uff0c\u5219\u5b83\u4eec\u5fc5\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5373\u5fc5\u987b\u4ea7\u751f\u51b2\u7a81\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u8f93\u51fa\u4e86\u3002\n\n**\u4f46\u662f\uff0c\u5f88\u591a\u540c\u5b66\u4f1a\u53d1\u73b0\uff0c\u8fd9\u6837\u505a\u53ea\u670960\u5206\u3002\u90a3\u4e3a\u4ec0\u4e48\u4f1a\u9519\u5462\uff1f\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u6817\u5b50\uff1a**\n\n\u8f93\u5165\uff1a\n\n4 4\n1 2 100000\n\n3 4 100000\n\n1 3 2\n2 4 1\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b89\u6392\uff1a\u7b2c\u4e00\u4e2a\u70b9\u96c6\uff1a1\u30014\uff1b\u7b2c\u4e8c\u4e2a\u70b9\u96c6\uff1a2\u30013\u3002\u8fd9\u6837\uff0c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u4e8b\u4ef6\uff0c\u8f93\u51fa\u4e3a0\uff08\u597d\u50cf\u6d1b\u8c37\u6570\u636e\u6ca1\u6709\u53610\u7684\uff0c\u4f46\u662f\u597d\u591a\u9898\u89e3\u90fd\u6ca1\u6709\u7279\u52240\u2026\u2026\uff09\u3002\u4f46\u662f\uff0c\u7528\u521a\u624d\u7684\u601d\u8def\u4f1a\u8f93\u51fa1\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\u3002\u9996\u5148\uff0c\u8ba91\u30012\u5728\u540c\u4e00\u5e76\u67e5\u96c6\uff1b\u7136\u540e\uff0c\u8ba93\u30014\u5728\u540c\u4e00\u5e76\u67e5\u96c6\uff1b\u4e4b\u540e\uff0c\u8ba91\u30013\u5728\u540c\u4e00\u5e76\u67e5\u96c6\uff0c\u6b64\u65f6\u4e24\u4e2a\u5e76\u67e5\u96c6\u5408\u5e76\u3002\u6700\u540e\uff0c\u518d\u5224\u65ad2\u30014\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e24\u6570\u5728\u540c\u4e00\u5e76\u67e5\u96c6\uff0c\u4e8e\u662f\u5c31\u8f93\u51fa\u4e861\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u9519\u8bef\u5c31\u5f97\u5230\u4e00\u4e2a\u89e3\u91ca\u4e86\uff1a\u56e0\u4e3a2\u30014\u7684\u8ddd\u79bb\u662f\u5947\u6570\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u4eec\u540c\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u96c6\u5408\u4e2d\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4e00\u5b9a\u540c\u5728\u4e00\u4e2a\u76d1\u72f1\u3002\u6240\u4ee5\uff0c\u8ddd\u79bb\u95ee\u9898\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\n\n\u4f3c\u4e4e\u53ea\u80fd\u66b4\u529b\u7ef4\u62a4\u4e86\uff0c\u4f46\u662f\u8fd9\u6837\u53c8\u5f88\u53ef\u80fdTLE\u3002\u90a3\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u4ece\u524d\u4e00\u4e2a\u601d\u8def\u6240\u4ea7\u751f\u7684\u9519\u8bef\u7740\u624b\u4e86\u3002\u5b83\u4ea7\u751f\u9519\u8bef\u7684\u539f\u56e0\u662f\uff1a\u4e0d\u80fd\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff08\u6216\u8005\u601d\u8def\uff09\uff1a\u8865\u96c6\u3002\u6211\u4eec\u8bbe\u7f6e\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u7cfb\u7edf\uff1ai+n\u3002\u51e1\u662f\u4e0ei+n\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u7684\uff0c\u90fd\u662f\u4e0d\u80fd\u4e0ei\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u3002\u8fd9\u6837\uff0c\u56e0\u4e3ai+n\u8fd9\u4e2a\u8282\u70b9\u4e16\u754c\u4e0a\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u4fdd\u8bc1\u4e86\u6bcf\u4e00\u4e2a\u5e76\u67e5\u96c6\u96c6\u5408\u4e2d\u7684\u5b58\u5728\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u5076\u6570\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u4e00\u65e6\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u70b9\u96c6\u4e2d\u3002\u53e6\u5916\uff0c\u6ce8\u610f\u5bf9i+n\u4e5f\u8981\u538b\u7f29\u8def\u5f84\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u4e24\u4e2a\u8865\u96c6\u8282\u70b9\u76f8\u8fde\uff0c\u8fd9\u65f6\u5982\u679c\u4e0dfind\u5c31\u4f1a\u9020\u6210\u4e00\u5927\u5806\u4e1c\u897f\u8fde\u5728\u4e00\u8d77\uff0c\u5c31\u4f1aMLE\uff08\u5177\u4f53\u600e\u4e48\u641e\u5f97\u6211\u4e5f\u4e0d\u77e5\u9053\uff09\u3002\n\n\u7136\u540e\u8bb0\u5f97\u6570\u7ec4\u8981\u5f002\\*n\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u4e00\u4e0b\u6012\u6c14\u503c\uff0c\u5c31\u641e\u5b9a\u4e86\u3002\n\n\u5176\u5b9e\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u601d\u8def\u8fd8\u662f\u5f88\u5de7\u5999\u7684\u3002\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u7684\u4e1c\u897f\uff08\u4e5f\u6ca1\u591a\u5c11\uff09\uff0c\u5177\u4f53\u8bf7\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nstruct NODE\n{\n    int x,y,val;//\u4e00\u4e2a\u72b6\u6001\uff0c\u9700\u8981\u4fdd\u5b583\u4e2a\u91cf\n};\nstruct cmp\n{\n    bool operator()(const NODE& a,const NODE& b)//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n    {\n        return a.val<b.val;//\u91cd\u8f7d\n    }\n};\npriority_queue<NODE,vector<NODE>,cmp>gx;//\u5927\u6839\u5806\uff08\u5bf9\u4e8eval\uff09\nint bcj[100000];//\u5e76\u67e5\u96c6\nint find_(int node)//\u5e76\u67e5\u96c6\u627e\u6839\u8282\u70b9\u8fc7\u7a0b\n{\n    if(bcj[node]!=node)return bcj[node]=find_(bcj[node]);\n    return node;\n}\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int dr1,dr2,zhi;\n    for(int i=1;i<=2*n;i++)bcj[i]=i;//\u521d\u59cb\u5316\uff0c\u8bb0\u5f97\u662f2*n\n    while(m--)\n    {\n        scanf(\"%d%d%d\",&dr1,&dr2,&zhi);\n        gx.push((NODE){dr1,dr2,zhi});//\u52a0\u5165\u961f\u5217\n    }\n    while(!gx.empty())//\u4e00\u76f4\u5230\u6ca1\u6709\u51b2\u7a81\n    {\n        if(find_(gx.top().x)==find_(gx.top().y))//\u5982\u679c\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u5185\n        {\n            printf(\"%d\",gx.top().val);//\u76f4\u63a5\u8f93\u51fa\n            return 0;\n        }\n        bcj[bcj[gx.top().x]]=bcj[find_(gx.top().y+n)];\n        bcj[bcj[gx.top().y]]=bcj[find_(gx.top().x+n)];//\u7ef4\u62a4\u65b0\u7684\u5173\u7cfb\uff0c\u8bb0\u5f97\u6709\u4e24\u4e2a\u5e76\u67e5\u96c6\u8981\u7ef4\u62a4\n        gx.pop();\n    }\n    printf(\"%d\",0);//\u7279\u52240\u7684\u60c5\u51b5\n    return 0;\n}\n```",
        "postTime": 1507174468,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "## \u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011\uff1a\u79cd\u7c7b\u5e76\u67e5\u96c6\n\n### \u524d\u8a00\uff1a\n\u5728\u6570\u636e\u7ed3\u6784\u5e76\u67e5\u96c6\u4e2d\uff0c\u79cd\u7c7b\u5e76\u67e5\u96c6\u5c5e\u4e8e\u6269\u5c55\u57df\u5e76\u67e5\u96c6\u4e00\u7c7b\u3002\n\n\u6bd4\u8f83\u5178\u578b\u7684\u9898\u76ee\u5c31\u662f\uff1a[\u98df\u7269\u94fe](https://www.luogu.org/problemnew/show/P2024)\uff08\u6bd4\u672c\u9898\u96be\u4e00\u4e9b\uff0c\u6709\u4e09\u4e2a\u79cd\u7c7b\u5b58\u5728\uff09\n\n\u9996\u5148\u8bb2\u4e00\u4e0b\u672c\u9898\u7684\u8d2a\u5fc3\uff0c\u8fd9\u4e2a\u662f\u5fc5\u987b\u8981\u61c2\u7684\u3002\u6211\u4eec\u5047\u8bbe\u6700\u540eZ \u5e02\u957f\u770b\u5230\u7684\u90a3\u4e2a\u51b2\u7a81\u4e8b\u4ef6\u7684\u5f71\u54cd\u529b\u4e3a x \uff08\u4e5f\u5c31\u662f\u6709\u4e00\u5bf9\u4ec7\u6068\u503c\u4e3a x \u7684\u7f6a\u72af\u5728\u540c\u4e00\u76d1\u72f1\uff09\u90a3\u4e48\u6bd4 x \u4ec7\u6068\u503c\u66f4\u9ad8\u7684\u6bcf\u4e00\u5bf9\u7f6a\u72af\u5fc5\u987b\u5206\u914d\u5230\u4e0d\u540c\u7684\u76d1\u72f1\uff08\u4e0d\u7136\uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u4e0d\u662f x \uff0c\u800c\u662f\u8fd9\u4e00\u5bf9\u7f6a\u72af\u7684\u4ec7\u6068\u503c\u4e86\uff09\uff1b\n\n\u6240\u4ee5\u672c\u9898\u662f\u5b58\u5728\u5355\u8c03\u6027\u7684\uff0c\u53ea\u9700\u8981\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u4ec7\u6068\u503c\uff0c\u5230\u90a3\u4e00\u5bf9\u4e0e\u524d\u9762\u51fa\u73b0\u77db\u76fe\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\uff1b\n\n### \u601d\u8def\uff1a\n\n\u79cd\u7c7b\u5e76\u67e5\u96c6\u4e2d\u201c\u79cd\u7c7b\u201d\u8fd9\u4e2a\u8bcd\u4e5f\u4e0d\u662f\u7edd\u5bf9\u7684\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8bf4\u662f\u4e00\u79cd\u5173\u7cfb\uff0c\u800c\u672c\u9898\u7684\u5173\u7cfb\u5c31\u5728\u4e8e\u8981\u5c06\u7f6a\u72af\u5206\u914d\u5230\u7684**\u4e24\u4e2a\u76d1\u72f1**\uff1b\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u5f00\u5230\u4e24\u500d\u6765\u6a21\u62df\u8fd9\u4e24\u4e2a\u76d1\u72f1\uff08\u7528A\uff0cB\u8868\u793a\uff09\uff0c\u6bcf\u4e2a\u7f6a\u72af\u5728\u76d1\u72f1\u4e2d\u90fd\u6709\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n\u5047\u8bbe\u73b0\u5728\u8981\u628a\u4e24\u4e2a\u6709\u4ec7\u7684\u7f6a\u72af\u5206\u522b\u653e\u5230 A \u6216 B \u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u8981\u6ee1\u8db3\u8fd9\u4e00\u5bf9\u7684\u8981\u6c42\uff08\u5373\u5206\u5230\u7684\u76d1\u72f1\u4e0d\u540c\uff09\uff0c\u90a3\u4e48\u5982\u679c\u7b2c\u4e00\u4e2a\u7f6a\u72af\u5728 A \u76d1\u72f1\uff0c\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u5fc5\u987b\u5728 B \u76d1\u72f1\uff0c\u53cd\u4e4b\u4e5f\u4e00\u6837\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 A \u76d1\u72f1\u4e2d\u7b2c\u4e00\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u4e0e B \u76d1\u72f1\u4e2d\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5373\u8fd9\u6837\u5408\u5e76\u624d\u80fd\u4fdd\u8bc1\u5206\u5230\u7684\u76d1\u72f1\u4e0d\u4e00\u6837\u3002\u4f46\u7b2c\u4e00\u4e2a\u7f6a\u72af\u4e0d\u4e00\u5b9a\u53ea\u80fd\u5728 A \u76d1\u72f1\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 B \u76d1\u72f1\u4e2d \u7b2c\u4e00\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u4e0e A \u76d1\u72f1\u4e2d\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u7ef4\u62a4\u3002\n\n\u800c\u51fa\u73b0\u77db\u76fe\u7684\u60c5\u51b5\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a a \u548c c \u6709\u4ec7\uff0cb \u548c c \u6709\u4ec7\uff0c\u90a3\u4e48\u6b64\u65f6 a \u548c c \u5728\u4e0d\u540c\u76d1\u72f1\uff0cb \u548c c \u4e5f\u5728\u4e0d\u540c\u76d1\u72f1\uff0c\u4e5f\u5c31\u662f\u8bf4 a \u548c b \u4e00\u5b9a\u5728\u4e00\u4e2a\u76d1\u72f1\u3002\u53ef\u4e00\u65e6\u6b64\u65f6 a \u548c b \u6709\u4ec7\u90a3\u4e48\u5c31\u77db\u76fe\u4e86\uff0c\u56e0\u4e3aa \u548c b \u8981\u5728\u4e0d\u540c\u76d1\u72f1\u4e0d\u7136\u4f1a\u6709\u77db\u76fe\uff0c\u53ef a \u548c b \u5df2\u7ecf\u5728\u4e4b\u524d\u5224\u5b9a\u4e3a\u5fc5\u987b\u5728\u540c\u4e00\u76d1\u72f1\uff0c\u6240\u4f1a\u77db\u76fe\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa a \u548c b \u7684\u4ec7\u6068\u503c\uff08\u539f\u7406\u53c2\u89c1\u524d\u8a00\u7684\u8d2a\u5fc3\uff09\n\n### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<iomanip>\n#include<algorithm>\n#define rg register int//\u5361\u5e38\n\nusing namespace std;\n\nstruct su{\n    int f,t,v;\n}a[100010];\n\nint n,m,l,r,mid,f;\nint s[20001<<1]; //\u4e0d\u8981\u5355\u72ec\u5f00\u4e24\u6570\u7ec4\uff01\n\ninline int qr(){  char ch; //\u5feb\u8bfb\n    while((ch=getchar())<'0'||ch>'9');\n    int res=ch^48;\n    while((ch=getchar())>='0'&&ch<='9')\n        res=res*10+(ch^48);\n    return res;\n}\n\ninline bool cmp(su x,su y){\n    return x.v>y.v; //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n}\n\ninline int get(int x){\n    if(x==s[x])return x;\n    return s[x]=get(s[x]);//\u8def\u5f84\u538b\u7f29\n}\n\nint main(){\n    n=qr(),m=qr();\n    for(rg i=1;i<=m;++i)\n        a[i].f=qr(),a[i].t=qr(),a[i].v=qr();\n    sort(a+1,a+m+1,cmp); //\u8d2a\u5fc3\n    for(rg i=1;i<=n;++i)\n        s[i]=i,s[i+n]=i+n; //\u521d\u59cb\u5316\u4e0d\u80fd\u5fd8\uff01\uff01\uff01\n    for(rg i=1;i<=m;++i){\n        rg x=a[i].f,y=a[i].t;\n        if(get(x)==get(y)||get(x+n)==get(y+n)){\n            f=a[i].v;break;//\u4e0d\u80fd\u5728\u540c\u4e00\u76d1\u72f1\u7684\u4ec7\u4eba\u649e\u4e0a\u4e86\n        }\n        s[s[x+n]]=s[y];\n        s[s[x]]=s[y+n];//\u7ef4\u62a4\u4e24\u7f6a\u72af\u5728\u4e0d\u540c\u76d1\u72f1\u7684\u5173\u7cfb\n    }printf(\"%d\\n\",f);\n    return 0;\n}\n```\n\u79cd\u7c7b\u5e76\u67e5\u96c6\u5176\u5b9e\u4f60\u7406\u89e3\u4e86\uff0c\u7801\u91cf\u4e0d\u9ad8\uff08~~\u5982\u679c\u7b97\u4e0a\u5feb\u8bfb\u7b49\u9884\u5904\u7406\u7684\u8bdd......~~\n\n### \u4e00\u4e9b\u5bf9\u79cd\u7c7b\u5e76\u67e5\u96c6\u7684\u7406\u89e3~~\uff08\u8840\u6cea\u53f2\uff09~~\n\n\u4ee3\u7801\u4e2d\u5f00\u6570\u7ec4\u662f\u8bb2\u4e86\u4e0d\u8981\u5f00\u4e24\u4e2a\u5355\u72ec\u6570\u7ec4\uff0c\u56e0\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u6570\u7ec4\u521d\u59cb\u5316\u65f6\uff0c\u8d4b\u7684\u503c\u90fd\u662f \u4ece 1 \u5f00\u59cb\u7684\uff0c\u8fd4\u56de\u7684\u662f\u65e0\u533a\u522b\u7684$1$\u5230$n$\u7684\u4e0b\u6807\uff0c\u4e22\u5931\u4e86\u201cA\u76d1\u72f1\u201d\u548c\u201cB\u76d1\u72f1\u201d\u7684\u5173\u7cfb\u3002\u5c06\u4e24\u6570\u7ec4\u5e76\u67e5\u96c6\u7ef4\u62a4\uff08\u4e0d\u597d\u5b9e\u73b0\uff09\u800c\u4e14\u4f1a\u56e0\u4e3a\u6709\u4e9b\u503c\u91cd\u590d\u800c\u8ba9\u4f60 WA \u5230\u6000\u7591\u4eba\u751f\n\n\u5176\u6b21\uff0c\u6211\u4eec\u6bcf\u6b21\u5224\u65ad\u77db\u76fe\u65f6\uff0c\u4e24\u4e2a\u7f6a\u72af\u5728A\u76d1\u72f1\u548cB\u76d1\u72f1\u7684\u4f4d\u7f6e\u90fd\u8981\u5224\uff0c\u800c\u4e14\u662f\u6bcf\u4e2a\u76d1\u72f1\u5355\u72ec\u5224\uff01\u8fd9\u4fdd\u8bc1\u4e86\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff01\n",
        "postTime": 1541506634,
        "uid": 111334,
        "name": "\u706f\u82af\u7cd5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "#1. \u5e7f\u544a\uff08\u8bef\uff09\n\n\u67e5\u770b\u6211\u7684\u4e2a\u4eba\u7a7a\u95f4\uff0c\u6709\u6211\u7684\u535a\u5ba2\u5730\u5740\uff08\u6700\u8fd1\u8981\u8fc1\u79fb\uff09\n\n\n#2. \u601d\u8def\n\n1. \u5148\u9006\u5e8fsort\u4e00\u904d\n\n2. \u5047\u8bbea\u865a\u62df\u7684\u654c\u4eba\u4e3aa'\uff0cb\u865a\u62df\u654c\u4eba\u662fb'\uff0c\u4ee5\u6b64\u7c7b\u63a8\n\n3. a\u548cb\u662f\u654c\u4eba\uff0c\u8fde\u7ebfa\u548cb'\uff0cb\u548ca'\uff0c\u4ee3\u8868\u662f\u670b\u53cb\n\n4. \u5f53\u51fa\u73b0\u4e24\u4e2a\u654c\u4eba\u5728\u4e00\u4e2a\u201c\u670b\u53cb\u5708\u201d\u4e2d\u7684\u65f6\u5019\uff0c\u77db\u76fe\uff0c\u8f93\u51fa\u5e76\u7ec8\u6b62\u7a0b\u5e8f\uff08\u539f\u6765\u6392\u8fc7\u5e8f\u4e86\uff0c\u4fdd\u8bc1\u6b64\u65f6\u51b2\u7a81\u6700\u5927\uff09\n\n5. \u6ca1\u6709\u77db\u76fe\uff0c\u8f93\u51fa0\n\n\n#3. AC\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nint n,m,f[40001],x,y;\nstruct data\n{\n    int a,b,c;\n} e[100001];\nint gz(const data &a,const data &b)\n{\n    if(a.c>b.c)return 1;\n    else return 0;\n}\nint find(int x)\n{\n    return f[x]==x?x:f[x]=find(f[x]);\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1; i<=m; i++)\n        scanf(\"%d %d %d\",&e[i].a,&e[i].b,&e[i].c);\n    for(int i=1; i<=n*2; i++)\n        f[i]=i;\n    sort(e+1,e+m+1,gz);\n    for(int i=1; i<=m; i++)\n    {\n        x=find(e[i].a);\n        y=find(e[i].b);\n        if(x==y)\n        {\n            printf(\"%d\\n\",e[i].c);\n            return 0;\n        }\n        f[y] = find(e[i].a + n);\n        f[x] = find(e[i].b + n);\n    }\n    puts(\"0\");\n    return 0;\n}//\u7f29\u8fdb\u5751\u7239\n```",
        "postTime": 1458134013,
        "uid": 5846,
        "name": "yyy2015c01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u4e0d\u540c\u7684\u4eba\u6709\u4e0d\u540c\u7684\u505a\u6cd5\uff0c\u770b\u89c1\u9898\u89e3\u91cc\u4e00\u7fa4\u5e76\u67e5\u96c6\uff0c\u8bf4\u5b9e\u5728\u5e76\u67e5\u96c6\u505a\u6cd5\u6211\u662f\u4e0d\u4f1a\u7684\u3002\u6211\u7684\u505a\u6cd5\u662f\u8001\u5e08\u968f\u53e3\u63d0\u5230\u5230\uff0c\u4e8c\u5206+\u5224\u65ad\u662f\u5426\u6784\u6210\u4e8c\u5206\u56fe\n\n\u9996\u5148\u6211\u4eec\u4e8c\u5206\u679a\u4e3e\u6700\u5927\u7684\u5f71\u54cd\u529b\uff08\u7531\u4e8e\u662f\u6c42\u6700\u5c0f\u7684\u6700\u5927\uff0c\u6ee1\u8db3\u4e8c\u5206\u7684\u6027\u8d28\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\uff09\uff0c\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u5f71\u54cd\u529b\u5927\u4e8e\u6211\u4eec\u6240\u679a\u4e3e\u7684midd\u7684\u7f6a\u72af\u5c31\u5fc5\u987b\u62c6\u5f00\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u4e3a\u4ed6\u4eec\u4e4b\u95f4\u8fde\u51fa\u4e00\u6761\u8fb9\u3002\u6bcf\u6761\u8fb9\u90fd\u8fde\u4e0a\u4e4b\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u51e0\u4e2a\u8fde\u901a\u56fe\uff08\u6ce8\u610f\u662f\u51e0\u4e2a\uff0c\u4e0d\u662f\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u4e0b\u9762\u6211\u4eec\u8981\u5bf9\u8fd9\u4e9b\u8fde\u901a\u56fe\u5224\u65ad\u5b83\u4eec\u80fd\u5426\u62c6\u6210\u4e24\u8fb9\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5224\u65ad\u4e8c\u5206\u56fe\u3002\n\n\u53ea\u8981\u4f1a\u4e8c\u5206\u56fe\u5224\u5b9a\uff0c\u8fd9\u9898\u5c31\u5df2\u7ecf\u89e3\u51b3\u7684\u5427\n\n\u4e0b\u9762\u6211\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4e8c\u5206\u56fe\u5224\u5b9a\u7684\u65b9\u6cd5\uff08\u6211\u53ea\u4ecb\u7ecd\u4e00\u79cd\uff0c\u67d3\u8272\u6cd5\uff09\n\n\u9996\u5148\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u67d3\u8272\uff0c\u90a3\u4e48\u6211\u4eec\u5f00\u59cb\u6211\u4eec\u7684\u7b97\u6cd5\u3002\u9996\u5148\u628a\u8fd9\u4e2a\u70b9\u6807\u8bb0\u6210\u9ed1\u8272\uff0c\u7136\u540e\u5f00\u59cbbfs\uff0c\u679a\u4e3e\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\uff0c\u5c06\u5b83\u4eec\u6807\u8bb0\u6210\u767d\u8272\uff08\u5728\u6211\u7684\u7a0b\u5e8f\u91cc\u75281\u548c2\u8868\u793a\u989c\u8272\uff09\uff0c\u4e0d\u65ad\u904d\u5386\u6574\u5f20\u56fe\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u4e0b\u4e00\u4e2a\u67d3\u8272\u7684\u70b9\u5df2\u7ecf\u6709\u4e86\u989c\u8272\uff0c\u5224\u65ad\u662f\u5426\u4e0e\u6b64\u65f6\u4f60\u5728\u7684\u70b9\u989c\u8272\u4e00\u81f4\u3002\u82e5\u662f\u989c\u8272\u4e00\u81f4\uff0c\u8bf4\u660e\u67d3\u8272\u5b58\u5728\u51b2\u7a81\uff0c\u65e0\u6cd5\u62c6\u6210\u4e8c\u5206\u56fe\uff0c\u76f4\u63a5return false\u3002\u5982\u679c\u65e0\u8bef\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u9000\u51fa\uff08\u6ce8\u610f\u53ea\u6709\u6ca1\u67d3\u8272\u7684\u70b9\u624d\u9700\u8981\u52a0\u5165\u961f\u5217\uff09\u3002\u4e4b\u540e\u6211\u4eec\u679a\u4e3e\u4e0b\u4e00\u4e2a\u70b9\uff0c\u82e5\u5df2\u67d3\u8272\u5219\u8df3\u8fc7\uff0c\u6ca1\u6709\u7684\u8bdd\u8bf4\u660e\u6211\u4eec\u627e\u5230\u4e86\u4e00\u5f20\u65b0\u7684\u56fe\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u5c31\u884c\u4e86\u3002\n\n\u5f88\u597d\u7406\u89e3\u7684\u67d3\u8272\u6cd5\u5427\n\n\u9664\u4e86\u8fd9\u4e2a\u6211\u60f3\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5173\u4e8e\u4e8c\u5206\u65f6\u5982\u4f55\u6539\u53d8midd\u3002\u8fd9\u6837\u60f3\uff0c\u5982\u679c\u5f53\u524d\u7684midd\u503c\u8db3\u591f\u8ba9\u6211\u62c6\u6210\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u6211\u5c31\u7ee7\u7eed\u628a\u5b83\u518d\u53d8\u5c0f\uff08\u4e8c\u5206\u7684\u8d2a\u5fc3\u6027\u8d28\u561b\uff09\uff0c\u7136\u540e\u5c31\u3002\u3002\u3002\u3002\u8fd9\u9898\u5c31\u80fdA\u4e86\uff0c\u77e5\u9053\u4e86\u539f\u7406\uff0c\u4e0d\u96be\u5427\uff0c\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5f88\u5bb9\u6613\u3002\n\n\u4e0b\u9762\u6211\u9644\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=100000+15;\nint n,m,sum;\nint head[maxn];\nstruct node{int to;int z;int next;}edge[maxn*2];\ninline int read()\n{\n\tchar ch;\n\tint fu=1,x=0;\n\tfor (ch=getchar(); ch<=32; ch=getchar());\n\tif (ch=='-') fu=-1,ch=getchar();\n\tfor (x=0; ch>32; ch=getchar()) x=x*10+ch-48;\n\treturn x*fu;\n}\nvoid add(int x,int y,int z)\n{\n\tedge[++sum].next=head[x];\n\tedge[sum].to=y;\n\tedge[sum].z=z;\n\thead[x]=sum;\n}\nbool bfs(int midd) \n{\n\tint color[maxn];\n\tmemset(color,0,sizeof(color));\n\tqueue <int> q;\n\tfor (int j=1;j<=n;j++)\n\t{\n\tif (color[j]) continue;\n    q.push(j);color[j]=1;\n    do\n    {\n      int k=q.front();q.pop();\n\t  for (int i=head[k];i;i=edge[i].next)\n\t  if (edge[i].z>=midd)\n\t  {   \n\t  \t if (color[edge[i].to]==0) {\n\t\t   color[edge[i].to]=color[k]==1?2:1;\n\t\t   q.push(edge[i].to);\n\t       }\n\t\t else if (color[edge[i].to]==color[k]) return false; \n\t\t  }\n    }while (!q.empty());\n}\n    return true;\n}\nint main()\n{\n\tint maxx;\n\tn=read();m=read();\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\ta=read();b=read();c=read();\n\t\tmaxx=max(maxx,c);\n\t    add(a,b,c);\n\t    add(b,a,c);\n\t}\n\tint l=0,r=maxx+1,midd;\n\twhile (l+1<r)\n\t{\n\t\tmidd=(l+r)>>1;\n\t\tif (bfs(midd)) r=midd;\n\t\telse l=midd;\n\t}\n\tprintf(\"%d\",l);\n\treturn 0;\n}\n```\n",
        "postTime": 1519263019,
        "uid": 63019,
        "name": "\u661f\u661f\u4e4b\u706b",
        "ccfLevel": 0,
        "title": "P1525\u5173\u62bc\u7f6a\u72af\u9898\u89e3"
    },
    {
        "content": "## **\u9898\u76ee\u5927\u610f**\n\n\u6709n\u4e2a\u7f6a\u72af\uff0c\u8981\u5c06\u5b83\u4eec**\u5206\u6210\u4e24\u4e2a\u96c6\u5408**\u3002\u7ed9\u51fam\u5bf9\u5173\u7cfb(x,y,val)\uff0c\u8868\u793a\u82e5\u5c06x,y\u5206\u5230\u540c\u4e00\u96c6\u5408\u4e2d\uff0c\u4f1a\u4ea7\u751fval\u7684\u6028\u6c14\u503c\uff1b\u82e5\u672a\u7ed9\u51fa\u5173\u7cfb\uff0c\u5219\u8bf4\u660e(x,y)\u5206\u5230\u540c\u4e00\u96c6\u5408\u6028\u6c14\u503c\u4e3a0\u3002\u8be2\u95ee**\u6700\u5c0f\u5316\u6700\u5927\u6028\u6c14\u503c**\u3002n<=20000,m<=100000\n\n## **\u601d\u8003\u65b9\u54111**\n\n\u9996\u5148\u60f3\u5230\u5c06**\u6700\u4f18\u6027\u95ee\u9898\u8f6c\u5316\u4e3a\u5224\u65ad\u6027\u95ee\u9898**\uff0c\u7b80\u5316\u6c42\u89e3\u3002\n\n\u5373\uff1a\u679a\u4e3e\u6700\u5927\u6028\u6c14\u503cmaxa\uff0c\u4ee4val\u5c0f\u4e8e\u7b49\u4e8emaxa\u7684\u8fb9\uff08\u5305\u62ec\u8fb9\u6743\u4e3a0\u7684\u8fb9\uff09\u624d\u80fd\u5b58\u5728\uff0c\u5224\u5b9a\u662f\u5426\u53ef\u884c\u3002\u95ee\u9898\u8f6c\u5316\u6210\u5982\u4f55\u5224\u5b9a1\u4e2a\u56fe\u80fd\u5426\u88ab**\u5212\u5206\u6210\u4e24\u4e2a\u5b8c\u5168\u56fe**\u3002\n\n\u5982\u679c\u6b63\u5411\u5224\u65ad\uff0c\u4f1a\u56e0\u4e3a\u5404\u8fb9\u9519\u7efc\u590d\u6742\uff0c\u9650\u5236\u4e0d\u660e\u786e\u800c\u96be\u4ee5\u6c42\u89e3\u3002\n\n\u5c1d\u8bd5**\u53cd\u5411\u5224\u65ad**\uff0c\u8003\u8651\u5b58\u5728\u5408\u6cd5\u65b9\u6848\u65f6\uff0c**\u8865\u56fe**\u7684\u76f8\u5173\u9650\u5236\u3002\u7531\u4e8e\u201c\u5b8c\u5168\u56fe\u201d\u7684\u9650\u5236\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0d\u5b58\u5728\u7684\u8fb9\u7684\u9876\u70b9\u5fc5\u987b\u5206\u5c5e\u4e24\u4e2a\u96c6\u5408\uff0c\u56e0\u6b64\u8865\u56fe\u4e3a\u4e8c\u5206\u56fe\u4e3a\u5fc5\u8981\u6761\u4ef6\u3002\u5c1d\u8bd5\u8bc1\u660e\u5145\u5206\u6027\uff0c\u82e5\u8865\u56fe\u4e3a\u4e8c\u5206\u56fe\uff0c\u5219\u4e0d\u5b58\u5728 \u540c\u4e00\u96c6\u5408\u7684\u4e24\u70b9\u95f4\u6ca1\u6709\u8fde\u8fb9 \u7684\u60c5\u51b5\uff0c\u5219\u4e24\u96c6\u5408\u4e00\u5b9a\u5747\u4e3a\u5b8c\u5168\u56fe\u3002\u6545\u8865\u56fe\u4e3a\u4e8c\u5206\u56fe\u4e3a\u5145\u8981\u6761\u4ef6\uff0c\u8bc1\u6bd5\u3002\n\n\u95ee\u9898\u8f6c\u5316\u6210\u5982\u4f55**\u5224\u5b9a\u56fe\u662f\u5426\u4e3a\u4e8c\u5206\u56fe**\u3002\n\n###  \u5b9e\u73b0\u65b9\u5f0f1\n\nDFS\u67d3\u8272\u5224\u5b9a\u4e8c\u5206\u56fe\u3002\u5355\u6b21\u5224\u5b9a\u65f6\u95f4\u590d\u6742\u5ea6O\uff08N+M\uff09\n   \n\u7531\u4e8e\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u4e8c\u5206\u6700\u5927\u6028\u6c14\u503c\u4f18\u5316\u3002\n\n\u7efc\u4e0a\uff0c\u4e8c\u5206\u6700\u5927\u6028\u6c14\u503c + \u4e8c\u5206\u56fe\u67d3\u8272 \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6O((N+M)logM)\n\n### \u5b9e\u73b0\u65b9\u5f0f2\n\n\u4e8c\u5206\u56fe\u5224\u5b9a\u5176\u5b9e\u662f**\u77db\u76fe\u5173\u7cfb\u7684\u5224\u5b9a\uff0c\u8003\u8651\u5e76\u67e5\u96c6\u3002**\n\n\u4f20\u7edf\u7684\u5e76\u67e5\u96c6\u53ea\u80fd\u7ef4\u62a4\u70b9\u7684\u8fde\u901a\u6027\u95ee\u9898\u3002\u5f53\u70b9\u4e4b\u95f4\u5b58\u5728\u591a\u79cd\u5173\u7cfb\uff0c\u4e14**\u5173\u7cfb\u5177\u6709\u4f20\u9012\u6027**\u65f6\uff0c\u5c31\u8981\u4f7f\u7528 \u5e26\u6743\u5e76\u67e5\u96c6 \u6216\u8005 \u6269\u5c55\u57df\u5e76\u67e5\u96c6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(MlogM)\n\n#### \u5173\u4e8e \u5e26\u6743\u5e76\u67e5\u96c6 \u4e0e \u6269\u5c55\u57df\u5e76\u67e5\u96c6\n\n\u5e26\u6743\u5e76\u67e5\u96c6\u5728\u5e76\u67e5\u96c6\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7**\u8fb9\u6743**\u7ef4\u62a4\u5404\u70b9\u95f4\u7684\u5173\u7cfb\u3002\u70b9\u4e0e\u6839\u7684\u5173\u7cfb\u9700\u8981\u901a\u8fc7\u70b9\u4e0e\u7236\u4eb2\u3001\u7236\u4eb2\u4e0e\u6839\u7684\u5173\u7cfb\u63a8\u7b97\uff1b\u4e24\u70b9\u95f4\u7684\u5b9e\u9645\u5173\u7cfb\u9700\u8981\u901a\u8fc7\u4e24\u70b9\u4e0e\u6839\u7684\u5173\u7cfb\u63a8\u7b97\uff1b\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\u9700\u8981\u63a8\u7b97\u51fa\u4e24\u6839\u7684\u5173\u7cfb\u3002\u96be\u70b9\u4e3b\u8981\u5728\u4e8e\u5982\u4f55**\u5c06\u5173\u7cfb\u53ca\u5176\u4f20\u9012\u6027\u7528\u6570\u503c\u548c\u76f8\u5e94\u7684\u7b97\u5f0f\u4f53\u73b0**\uff0c\u4ee5\u5b9e\u73b0\u67e5\u8be2\u4e0e\u5408\u5e76\u3002\n\n\u6269\u5c55\u57df\u5e76\u67e5\u96c6\u5219\u53e6\u8f9f\u8e4a\u5f84\uff0c\u5c061\u4e2a\u70b9\u62c6\u5206\u6210\u82e5\u5e72\u865a\u70b9\uff0c\u901a\u8fc7**\u5408\u5e76\u865a\u70b9**\u7ef4\u62a4\u5404\u70b9\u95f4\u7684\u5173\u7cfb\u3002\u76f8\u6bd4\u8d77\u5e26\u6743\u5e76\u67e5\u96c6\uff0c\u4f18\u70b9\u5728\u4e8e\u4ec5\u7528\u5230\u4f20\u7edf\u7684\u5e76\u67e5\u96c6\uff1b\u7f3a\u70b9\u5728\u4e8e \u7a7a\u95f4\u590d\u6742\u5ea6 \u4e3a \u70b9\u6570*\u72b6\u6001\u6570\uff0c\u800c\u4e14\u9700\u8981\u5168\u9762\u8003\u8651\u4f53\u73b0\u5728\u6269\u5c55\u57df\u4e0a\u7684**\u6240\u6709\u7b49\u4ef7\u5173\u7cfb**\u3002 _\u63d2\u4e00\u53e5\u9898\u5916\u8bdd\uff1a\u8fd9\u79cd\u201c\u62c6\u70b9\u201d\u601d\u60f3\u662f\u975e\u5e38\u7f8e\u5999\u4e14\u5e38\u7528\u7684\u601d\u60f3\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u7b97\u6cd5/\u4e60\u9898\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e24\u79cd\u5e94\u7528\u6700\u7ecf\u5178\u7684\u4f53\u73b0\u5e94\u8be5\u662f[\u98df\u7269\u94fe](https://www.luogu.org/problemnew/show/P2024)\n\n#### \u56de\u5f52\u672c\u9898\n\u4e0b\u6587\u7528\u201c\u654c\u5bf9\u201d\u201c\u53cb\u597d\u201d\u4ee3\u66ff\u70b9\u5bf9\u5728\u4e8c\u5206\u56fe\u4e2d\u7684\u5173\u7cfb\u3002\n\n1.\u5e26\u6743\u5e76\u67e5\u96c6 \u89e3\u6cd5\n\n\u8bbe\u8fb9\u67431\u8868\u793a\u654c\u5bf9\uff0c\u8fb9\u67430\u8868\u793a\u53cb\u597d\u3002\u5173\u7cfb\u7684\u4f20\u9012\u6027\u5229\u7528%\u7684\u6027\u8d28\u4f53\u73b0\u3002\n\n\u5df2\u77e5x\u4e0efa\u7684\u5173\u7cfb,fa\u4e0e\u6839\u7684\u5173\u7cfb\uff0c\u6c42x\u4e0e\u6839\u5173\u7cfb\uff1aRel[x] = (Rel[x] + Rel[Fa[x]])%2;\n\nx,y\u540c\u5c5e1\u96c6\u5408\uff0c\u5df2\u77e5x,y\u4e0e\u6839\u7684\u5173\u7cfb\uff0c\u6c42x\u4e0ey\u7684\u5173\u7cfb\uff1arel(x,y) = (Rel[x] + Rel[y])%2\n\nx,y\u4e0d\u5c5e1\u96c6\u5408\uff0c\u5df2\u77e5x\u4e0ey\u7684\u5173\u7cfb\uff0c\u5df2\u77e5x\u4e0erootx\uff0cy\u4e0erooty\u7684\u5173\u7cfb\uff0c\u6c42rootx\u4e0erooty\u7684\u5173\u7cfb\uff1aRel[rootx] = (Rel[x] + rel(x,y) + Rel[y])%2\n\n\u4e3b\u4f53\u4ee3\u7801\u5982\u4e0b:\n```cpp\nint findA(int x)\n{\n\tif(Fa[x] == x)\treturn x;\n\tint temp = findA(Fa[x]);\n\tRel[x] = (Rel[x] + Rel[Fa[x]]) % 2;\n\treturn Fa[x] = temp;\n}\nvoid Merge(int x,int y,int rootx,int rooty)\n{\n\tint rel = (Rel[x] + 1 + Rel[y]) % 2;\n\tFa[rootx] = rooty;\n\tRel[rootx] = rel;\n}\nvoid Calc()\n{\n    int ans = 0;\n    for(int i = 1 ; i <= m ; i ++)\n    {\n        int x = Edge[i].x , y = Edge[i].y , w = Edge[i].w;\n        int rootx = findA(x) , rooty = findA(y);\n        if(rootx != rooty)\tMerge(x,y,rootx,rooty);\n        else\t\n        {\n        \tint rel = (Rel[x] + Rel[y]) % 2;\n        \tif(rel == 0)\t\n        \t{\n        \t\tans = w;\n        \t\tbreak;\n\t\t\t}\n\t\t}\n    }\n    printf(\"%d\\n\",ans);\n}\n```\n\n2.\u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u89e3\u6cd5\n\nx\u7684\u654c\u5bf9\u57df/\u53cb\u597d\u57df\uff1ax , x + n \n\n\u8be2\u95eex,y\u5173\u7cfb\uff1a\u8be2\u95eex,y\u7684\u654c\u5bf9\u57dfx,y\u662f\u5426\u4e3a\u540c1\u96c6\u5408\uff0c\u82e5\u662f\u5219x,y\u4e3a\u540c\u7c7b\uff0c\u5426\u5219\u53cd\u4e4b\u3002\u5373if(rootx == rooty)\tx,y\u4e3a\u540c\u7c7b\u3002\n\n\u7ef4\u62a4x,y\u654c\u5bf9\u5173\u7cfb\uff1a\u5408\u5e76x\u7684\u654c\u5bf9\u57df\u4e0ey\u7684\u53cb\u597d\u57df\u3001x\u7684\u53cb\u597d\u57df\u4e0ey\u7684\u654c\u5bf9\u57df\uff0c\u5373Merge(x,y+n),Merge(x+n,y);\n\n\u4e3b\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nint findA(int x)\n{\n    if(Fa[x] == x)\treturn x;\n    return Fa[x] = findA(Fa[x]);\n}\nvoid Merge(int x,int y)\n{\n    int rootx = findA(x) , rooty = findA(y);\n    Fa[rootx] = rooty;\n}\nvoid Calc()\n{\n    int ans = 0;\n    for(int i = 1 ; i <= m ; i ++)\n    {\n        int x = Edge[i].x , y = Edge[i].y , w = Edge[i].w;\n        if(findA(x) == findA(y))//\u4e24\u8005\u7684\u654c\u5bf9\u57df\u5c5e\u4e8e\u540c1\u96c6\u5408\uff0c\u5219\u4e24\u8005\u4e3a\u540c\u7c7b\t\n        {\n            ans = w;\n            break;\n        }\t\n        else\t\n        {\n           //\u5c06x\u7684\u654c\u5bf9\u57df\u4e0ey\u7684\u53cb\u597d\u57df\u5408\u5e76\uff0c\u5c06x\u7684\u53cb\u597d\u57df\u4e0ey\u7684\u654c\u5bf9\u57df\u5408\u5e76\u3002 \n            Merge(x,y + n);\n            Merge(x + n ,y);\n        }\n    }\n    printf(\"%d\\n\",ans);\n}\n```\n\n## \u601d\u8003\u65b9\u5411\u4e8c\n\n   \u6700\u5c0f\u5316\u6700\u5927\u8fb9\u6743\uff0c\u5219**\u8003\u8651\u8d2a\u5fc3**\u3002\n  \u4e3a\u4e86\u6700\u5927\u8fb9\u6743\u5c3d\u53ef\u80fd\u5c0f\uff0c\u5c3d\u53ef\u80fd\u5220\u9664\u8fb9\u6743\u8f83\u5927\u7684\u8fb9\uff0c\u56e0\u6b64\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f9d\u6b21\u53d6\u51fa\u8bd5\u56fe\u5c06\u5176\u9876\u70b9\u67d3\u6210\u4e0d\u540c\u7684\u989c\u8272\u3002\u6700\u7ec8\u505a\u6cd5\u4e0e\u4e0a\u6587\u76f8\u540c\uff0c\u4e0d\u8fc7\u4e0d\u5931\u4e3a\u53e6\u4e00\u79cd\u601d\u8003\u7684\u597d\u65b9\u5411\u3002",
        "postTime": 1555051893,
        "uid": 19153,
        "name": "littlewyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "# P1525 \u5173\u62bc\u7f6a\u72af \u9898\u89e3\n\n~~\u672c\u4eba\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u4e0d\u559c\u52ff\u55b7~~\n\n     \u6ca1\u8fc7\u5ba1qwq\uff0c\u6211\u7ffb\u4e86\u597d\u51e0\u904d\u9898\u89e3\uff0c\u4e00\u517147\u7bc7\u53ea\u67093\u4e2a\u7528\u4e86\u8fb9\u5e26\n     \u6743\u5e76\u67e5\u96c6\uff0c\u5269\u4e0b\u5168\u662f\u4e8c\u5206\u56fe\u548c\u6269\u5c55\u57df\uff08\u79cd\u7c7b\u5e76\u67e5\u96c6\uff09\uff0c\u5176\u4e2d\n     \u4e24\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u4e0e\u6211\u4e0d\u4e00\u6837\uff0c\u8fd8\u6709\u4e00\u4e2a\u53ea\u5199\u4e86\u601d\u8def\u3002\u3002\n\n\n------------\n\u56e0\u4e3a\u6c42\u6700\u4f18\u89e3\uff0c\u81ea\u7136\u60f3\u5230\u8d2a\u5fc3\uff0c\u7136\u540e\u8fd8\u9700\u8981\u5e76\u67e5\u96c6\u7ef4\u62a4\n  \n \u6700\u57fa\u672c\u7684\u601d\u8def\u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u5f88\u8be6\u7ec6\uff0c\u6211\u5c31\u6765\u8bf4\u8bf4\u6211\u7684\u4ee3\u7801\u3002\n------------\n\t\u9996\u5148\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff08\u4f18\u5148\u961f\u5217\uff0c\u7ed3\u6784\u4f53\u5b58\u50a8\uff09\n    \u770b\u5230\u4e0d\u5c11\u9898\u89e3\u7528sort\uff0c\u8fd8\u662f\u5806\u6392\u987a\u624b\u70b9\n    \n```\nstruct node{\n\tint x,y,dis;\n\tbool operator < (const node &a) const{//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n\t\treturn dis < a.dis ;\n\t}  \n \t/*\u5728\u7ed3\u6784\u4f53\u5185\u91cd\u8f7d\u53ef\u4ee5\u7701\u70b9\u4e8b\uff0c\u76f4\u63a5\u4f7f\u7528\n    \u91cd\u8f7d\u5c0f\u4e8e\u53f7:\u82e5\u9047\u5230\u4f60\u5b9a\u4e49\u7684\u8fd9\u79cd\u7c7b\u578b\u7684\u6570\u636e\u53ef\u4ee5\u6309\u4f60\u60f3\u7684\u65b9\n    \u5f0f\u6bd4\u8f83,\u6211\u8fd9\u91cc\u7684\u610f\u601d\u662f\u5f53\u524d\u6124\u6012\u503c\u82e5\u5c0f\u4e8e\u65b0\u8f93\u5165\u7684\u503c\uff0c\u5219\u4e24\n    \u7ec4\u6570\u636e\u4e92\u6362\uff08\u6ca1\u67e5\u8fc7\u4e0d\u77e5\u9053\u7406\u89e3\u7684\u5bf9\u4e0d\u5bf9\uff09*/\n}dis[100010];\npriority_queue<node>que;\n```\n\n\t**\u4e3a\u4ec0\u4e48\u91cd\u8f7d\u5c0f\u4e8e\u53f7\u4e0d\u91cd\u8f7d\u5927\u4e8e\u53f7\uff1f**\n    **\u56e0\u4e3a\u5728stl\u91cc\u539f\u672c\u5c31\u7528\u5c0f\u4e8e\u53f7\u6bd4\u8f83\u4e24\u4e2a\u6570**\n    ~~\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684~~\n    ~~\u6309\u4f4fCtrl\u9f20\u6807\u5de6\u51fb\u5934\u6587\u4ef6~~\n\n------------\nAC\u4ee3\u7801\uff08\u4e00\u904d\u8fc7233\uff09\u52a0\u5165\u5feb\u8bfb58ms\uff0c\u8dfb\u8eab\u6700\u4f18\u89e3\u524d30\n  ```cpp\n#include<iostream>\n#include<queue>\n#define Max 20020\n\nusing namespace std;\n\nstruct node{\n\tint x,y,dis;\n\tbool operator < (const node &a) const{\n\t\treturn dis < a.dis ;\n\t}\n}dis[100010];\npriority_queue<node>que;\nint fa[Max],d[Max];//d\u6570\u7ec4\u4e3a\u513f\u5b50\u4e0e\u7236\u4eb2\u4e4b\u95f4\u7684\u8fb9\u6743 0\u4e3a\u5728\u4e00\u7ec4\uff0c1\u4e3a\u4e0d\u5728\u4e00\u7ec4\nint n,m;\nint find(int x)\n{\n\tif(x==fa[x]) return x;\n\tint root = find(fa[x]);\n\td[x] ^= d[fa[x]]; //\u4e00\u5b9a\u8981\u5728\u5f53\u524d\u70b9\u7684\u7236\u4eb2\u6ca1\u6709\u6539\u53d8\u524d\u5c06\u5173\u7cfb\u6539\u6210\u5f53\u524d\u70b9\u4e0e\u7956\u5148\u7684\u5173\u7cfb \n\treturn fa[x] = root;\n}\nint ask(int i,int j)\n{\n\t//\u8fd9\u91cc\u5206\u4e863\u79cd\u60c5\u51b5 \n\tif(find(i)==find(j)){//\u5f53\u4e24\u4e2a\u4eba\u5df2\u7ecf\u786e\u5b9a\u5206\u7ec4\uff08\u5728\u540c\u4e00\u96c6\u91cc\uff09 \n\t\tif(d[i]^d[j]) return 0;//\u82e5\u4e3a1\uff0c\u5373\u4e0d\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u4e0d\u4f1a\u6709\u51b2\u7a81\u8fd4\u56de0 \n\t\telse return 1;//\u5426\u5219\u5fc5\u5b9a\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a\u6700\u4f18\u6027\uff0c\u6124\u6012\u503c\u6bd4\u4ed6\u5927\u7684\u90fd\u5df2\u7ecf\u5206\u5f00\u4e86\uff0c\u6240\u4ee5\u5f97\u5230\u7b54\u6848\u8fd4\u56de1 \n\t}\n\telse{//\u6ca1\u6709\u8fdb\u884c\u5206\u7ec4\uff0c\u5219\u5c06\u4e24\u4e2a\u96c6\u5e76\u8d77\u6765(\u600e\u4e48\u5e76\uff1f\u5f53\u7136\u662f\u5206\u5f00\u4e3a\u4e24\u7ec4\u4e86!) \n\t\tint x = find(i), y = find(j);\n\t\tfa[y] = x; \n\t\td[y] = d[i] ^ d[j] ^ 1;//\u8fd9\u91cc\u6839\u636e\u4e24\u4e2a\u4eba\u7684\u5173\u7cfb\u63a8\u51fa\u4e24\u4e2a\u7956\u5148\u7684\u5173\u7cfb\n\t\t//\u53ef\u4ee5\u76f4\u63a5\u7528d[i],d[j]\u662f\u56e0\u4e3a\u5df2\u7ecf\u6267\u884c\u8fc7\u8def\u5f84\u538b\u7f29\u4e86:fa[i] = x, fa[j] = y \n\t\t//\u56e0\u4e3a\u53ea\u6709\u2018\u5728\u540c\u4e00\u7ec4\u2019\u548c\u2018\u4e0d\u5728\u540c\u4e00\u7ec4\u2019\u4e24\u79cd\u5173\u7cfb\uff0c\u5982\u4e0b\u56fe\u6211\u4eec\u53ef\u4ee5\u7528xi,yj,ij\u7684\u5173\u7cfb\u5f02\u6216\u5f97\u5230xy\u7684\u5173\u7cfb \n\t\treturn 0;\n\t}\n}\nint main()\n{\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i++)//\u521d\u59cb\u5316\n\t\tfa[i] = i;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint a,b,c;\n\t\tcin >> a >> b >> c;\n\t\tque.push((node){a,b,c}); //\u76f4\u63a5\u8f93\u5165node\u7c7b\u578b\u7684\u4e09\u6570\n  \t\t\t\t\t\t\t\t\t//\u8981\u6309\u987a\u5e8f\n\t}\n\twhile(!que.empty())\n\t{\n\t\t//\u4ece\u5927\u5f00\u59cb\u5904\u7406  \n\t\tnode now = que.top(); \n\t\tque.pop();//\u4e0d\u52a0\u7206\u96f6233 \n\t\tint ok = ask(now.x,now.y);//\u8be2\u95ee \n\t\tif(ok) {\n\t\t\tcout << now.dis;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t//\u80fd\u591f\u6267\u884c\u5230\u8fd9\u4e00\u6b65\u8bf4\u660e\u90fd\u4e0d\u4f1a\u8d77\u51b2\u7a81\uff0c\u8f93\u51fa0 \n\tcout << \"0\";\n\treturn 0;\n}\n```\n![](http://p0.so.qhimgs1.com/bdr/300_115_/t0145e12134d9c1f31a.jpg)\n------------\n\u9644\uff1a\u5e76\u67e5\u96c6\u4e0d\u7ba1\u662f\u4fbf\u5e26\u6743\u8fd8\u662f\u6269\u5c55\u57df\u4e3b\u8981\u7ef4\u62a4\u597d\u4e00\u4e2a\u4f20\u9012\u5173\u7cfb\uff0c\u50cffind\u51fd\u6570\u548cask\u51fd\u6570\u4e2d\u5bf9d\u6570\u7ec4\u7684\u5904\u7406\uff0c\n  \u53ef\u4ee5\u5c1d\u8bd5\u7528\u8fb9\u5e26\u6743\u7ec3\u7ec3[\u98df\u7269\u94fe](https://www.luogu.org/problem/P2024)\uff0c\n  \u4e0d\u9700\u8981\u591a\u597d\u7684\u903b\u8f91\u5224\u65ad\uff0c\u5411\u4e0a\u56fe\u627e\u51e0\u79cd\u5173\u7cfb\u63a8\u4e00\u4e0b\u5c31\u5e94\u8be5\u662f\u6b63\u89e3\n ",
        "postTime": 1565317276,
        "uid": 154710,
        "name": "Virvan",
        "ccfLevel": 0,
        "title": "P1525 \u5173\u62bc\u7f6a\u72af \u9898\u89e3"
    },
    {
        "content": "[blog\u91cc\u98df\u7528\u66f4\u4f73](https://www.luogu.org/blog/xzlhxc/solution-p1525)    \n[\u9898\u76ee\u94fe\u63a5\uff08\u6d1b\u8c37P1525\uff09](https://www.luogu.org/problem/P1525)    \n**\u524d\u7f6e\u829d\u58eb\uff1a[\u4e8c\u5206\u56fe\uff08\u5224\u5b9a/\u67d3\u8272\uff09](https://www.luogu.org/problem/P1330)\uff0c[\u5e76\u67e5\u96c6](https://www.luogu.org/problem/P3367)**     \n**\u89c9\u5f97\u672c\u9898\u89e3\u6709\u95ee\u9898\u6216\u8005\u641e\u4e0d\u61c2\u7684\u8bf7\u79c1\u4fe1\u6216\u8bc4\u8bba\u7b14\u8005\uff01**\n\n------------\n```\n \u201c\u542c\u8bf4\u4f60\u6700\u8fd1\u5728\u5199\u4e00\u7bc7\u5173\u4e8eP1525\u7684\u9898\u89e3\uff1f\u201d\u7ba1\u7406\u5458\u95ee\u6211\u3002\n\u201c\u662f\u7684\u3002\u201d\u6211\u5fae\u7b11\u9053\u3002\n\u201c\u8fd9\u662f\u600e\u6837\u7684\u4e00\u7bc7\u9898\u89e3\u5462\uff1f\u201d\u7ba1\u7406\u5458\u5f88\u597d\u5947\u3002\n\u201c\u4e8c\u5206\u56fe\u5224\u5b9a\u3001\u5e76\u67e5\u96c62\u79cd\u505a\u6cd5\u4e0e\u8d2a\u5fc3\u8bc1\u660e\u3002\u201d\u6211\u56de\u7b54\u9053\u3002\n\u201c\u4ec0\u4e48\uff1f\u51e0\u6837\u4e1c\u897f\u6df7\u7740\u5417\uff1f\u201d\u7ba1\u7406\u5458\u5f88\u5403\u60ca\u3002   \n\u201c\u5bf9\u3002\u201d\u6211\u7b11\u4e86\uff0c\u201c\u8fd9\u662f\u6211\u770b\u5b8c\u9898\u89e3\u533a\u540e\u4f5c\u51fa\u7684\u51b3\u5b9a\u3002\u201d\n\n--\u6539\u7f16\u81ea\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u524d\u8a00\n```\n\n------------\n## \u4e00\u3001\u9898\u610f\n\u7ed9\u4f60$N$\u4e2a\u70b9\uff0c$M$\u6761\u5e26\u6743\u65e0\u5411\u8fb9\uff0c\u5c06\u8fd9\u4e9b\u70b9\u5206\u4e3a2\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f972\u4e2a\u96c6\u5408\u5185\u90e8\u8fb9\u7684\u6700\u5927\u8fb9\u6743\u5c3d\u53ef\u80fd\u5c0f\u3002\u5982\u679c\u80fd\u505a\u52302\u4e2a\u96c6\u5408\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u8f93\u51fa0 \u3002\n\n**\u5c06\u70b9\u5206\u4e3a2\u4e2a\u96c6\u5408\uff0c\u7b54\u6848\u4e0e\u96c6\u5408\u5185\u90e8\u8fb9\u6709\u5173** ------> **\u4e8c\u5206\u56fe**     \n**\u6700\u5927\u8fb9\u6743\u5c3d\u53ef\u80fd\u5c0f** ------> **\u4e8c\u5206**\n\n\u6211\u4eec\u4ece\u9898\u76ee\u4e2d\u63d0\u70bc\u51fa\u4e86\u8fd92\u4e2a\u4fe1\u606f\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\uff1a\n\n## \u4e8c\u3001\u89e3\u6cd5\n### \u2460\u4e8c\u5206+\u4e8c\u5206\u56fe\u5224\u5b9a\n~~\u5176\u5b9e\u5c31\u662f\u56db\u5206\u56fe\u5224\u5b9a\uff08\u8bef~~    \n\n\u5148\u8bc1\u660e\u6b63\u786e\u6027\uff1a   \n\n\u8bbe$f(mid)$\u4e3a\u5f53\u5185\u90e8\u6700\u5927\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8emid\u65f6\u662f\u5426\u6709\u89e3\u3002  \n\u5982\u679c$f(mid)=true$\uff0c\u5219\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\u4f7f\u5f97\u96c6\u5408\u5185\u7684\u8fde\u8fb9\u90fd\u5c0f\u4e8e\u7b49\u4e8e$mid$\uff0c\u5373**\u96c6\u5408\u5916\u7684\u8fde\u8fb9\u7684\u6743\u503c\u90fd\u5927\u4e8e$mid$**\u3002    \n\u5f53$mid_2>mid$\u65f6\uff0c\u96c6\u5408\u5916\u90e8\u7684\u8fde\u8fb9\u7684\u6743\u503c\u4e00\u5b9a\u5927\u4e8e$mid_2$\uff0c\u5373\u4e00\u5b9a\u5927\u4e8e$mid$\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6240\u6709\u7684$mid$\uff0c\u5982\u679c$f(mid)$\u6ee1\u8db3\uff0c$f(mid_2)$\u4e00\u5b9a\u6ee1\u8db3\u3002\u6545\u53ef\u4ee5\u4e8c\u5206\u3002    \n\n\u8bc1\u6bd5\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4e8c\u5206\u6a21\u677f\n```cpp\nwhile(L<R)\n{\n\tbool flag=true;//\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n\tmid=L+R>>1;//\u4e8c\u5206\n\tfor(int i=1;flag&&i<=n;i++)//\u4e8c\u5206\u56fe\u67d3\u8272\n\t if(!color[i])flag=flag&&dfs(i,1);\n\tif(flag)R=mid;\n\telse L=mid+1;\n\tmemset(color,0,sizeof(color));\n}\n```\n**\u5e73\u65f6\u5224\u65ad\u81ea\u5df1\u7684\u4e8c\u5206\u662f\u5426\u4f1a\u6b7b\u5faa\u73af\uff0c\u53ea\u9700\u8003\u8651$L=R-1$\u65f6\u5019\u7684\u60c5\u51b5\u5e76\u8bbe\u7f6e\u8fb9\u754c\u5c31\u53ef\u4ee5\u4e86\u3002**\n\n~~\u5b8c\u6574\u4ee3\u7801\uff1f\u4e0d\u5b58\u5728\u7684\u3002\u4e8c\u5206\u56fe\u67d3\u8272\u6a21\u677f\u81ea\u5df1\u5199\u2026\u2026~~\n\n### \u2461\u8d2a\u5fc3+\u5e76\u67e5\u96c6\u201c\u6269\u5c55\u57df\u201d\n- \u8d2a\u5fc3\n\n\u65e2\u7136\u8981\u6c42\u96c6\u5408\u5185\u7684\u6700\u5927\u8fb9\u5c3d\u53ef\u80fd\u5c0f\uff0c\u90a3\u80af\u5b9a\u8981\u8ba9\u5927\u7684\u8fb9\u8fde\u63a52\u4e2a\u96c6\u5408\u3002   \n\u4e8e\u662f\u5c31\u5f97\u5230\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\n\n**\u5c06\u8fb9\u96c6\u6309\u7167\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u80fd\u4f7f\u8fd9\u6761\u8fb9\u76842\u4e2a\u70b9\u5206\u522b\u57282\u4e2a\u96c6\u5408\u91cc\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\uff0c\u5426\u5219\u8f93\u51fa\u8fd9\u6761\u8fb9\u7684\u6743\u503c\uff0c\u7ed3\u675f\u3002**     \n\n- \u8bc1\u660e\uff1a  \n\n\u7528\u53cd\u8bc1\u6cd5\u3002\n\n\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u66f4\u4f18\u7684\u65b9\u6848\uff0c\u8bbe\u8d2a\u5fc3\u7b56\u7565\u7684\u89e3\u4e3a$ans_1$\uff0c\u8fd9\u4e2a\u65b9\u6848\u7684\u89e3\u4e3a$ans_2$\u3002      \n\n\u56e0\u4e3a$ans_2<ans_1$\u6240\u4ee5\u6700\u4f18\u89e3\u65b9\u68482\u4e2a\u96c6\u5408\u5185\u90e8\u6700\u5927\u7684\u6743\u503c\u4e3a$ans_2$\uff0c\u5219\u5927\u4e8e$ans_2$\u7684\u8fb9\u90fd\u7528\u6765\u8fde\u63a52\u4e2a\u96c6\u5408\u3002  \n\n\u7136\u800c\u5f53\u8d2a\u5fc3\u7b56\u7565\u8fdb\u884c\u5230$ans_1$\u65f6\uff0c\u5df2\u7ecf\u8bf4\u660e\u4e0d\u80fd\u8ba9\u5927\u4e8e$ans_1$\u7684\u8fb9\u90fd\u7528\u6765\u8fde\u63a52\u4e2a\u96c6\u5408\uff0c\u6545\u6700\u4f18\u89e3\u4e0e\u9898\u610f\u77db\u76fe\u3002\u56e0\u6b64\u4e0d\u5b58\u5728\u66f4\u4f18\u7684\u65b9\u6848\u3002\n\n**\u8bc1\u6bd5\u3002**\n\n- \u5b9e\u73b0   \n\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad2\u4e2a\u70b9\u662f\u5426\u80fd\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u5462\uff1f   \n\u5176\u5b9e\u53ef\u4ee5\u53c2\u8003[\u8fd9\u9053\u9898\uff08\u98df\u7269\u94fe\uff09](https://www.luogu.org/problem/P2024)\u3002 \n\n\u7528\u6269\u5c55\u57df\uff0c\u5c06\u4e00\u4e2a\u70b9$i$\u62c6\u6210$i$\u4e0e$i+n$2\u4e2a\u70b9\uff0c\u5206\u522b\u8868\u793a$i$\u5728\u7b2c\u4e00\u4e2a\u96c6\u5408\u548c$i$\u5728\u7b2c\u4e8c\u4e2a\u96c6\u5408\u3002    \n\n\u5982\u679c$i,j$\u4e0d\u51b2\u7a81\uff0c\u5c31\u5408\u5e76$i,j+n$\u4e0e$j,i+n$\u3002   \n\n\u5982\u679c\u51b2\u7a81\uff0c\u8bf4\u660e\u5982\u679c\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c**\u201c$i$\u5728\u7b2c\u4e00\u4e2a\u96c6\u5408\u201d\u4e0e\u201c$i$\u5728\u7b2c\u4e8c\u4e2a\u96c6\u5408\u201d\u8fd92\u6761\u4fe1\u606f\u53ef\u4ee5\u76f8\u4e92\u63a8\u51fa**\uff0c\u663e\u7136\u77db\u76fe\u3002\u6240\u4ee5\u8fd9\u6761\u8fb9\u5fc5\u987b\u8fde\u5728\u96c6\u5408\u5185\u90e8\u3002   \n\n\u56e0\u4e3a\u8fb9\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\uff0c\u5f53\u524d\u7684\u8fb9\u5982\u679c\u4f5c\u4e3a\u7b54\u6848\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u8fb9\u5373\u4f7f\u5168\u90e8\u52a0\u5165\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u5f53\u524d\u8fb9\uff0c\u6545\u7b54\u6848\u4e0d\u4f1a\u6539\u53d8\u3002\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u3002   \n\n\u5982\u679c\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u7528\u6765\u8fde\u63a52\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u96c6\u5408\u5185\u90e8\u53ef\u4ee5\u6ca1\u6709\u8fb9\uff0c\u6545\u8f93\u51fa0 \u3002   \n\n- \u6ce8\u610f\u4e8b\u9879\n1. \u5e76\u67e5\u96c6\u8bb0\u5f97\u521d\u59cb\u5316\uff0c\u8981\u5f002\u500d\u7a7a\u95f4\uff08\u4e00\u4e2a\u70b9\u62c6\u62102\u4e2a\u70b9\uff09\u3002 \n1. \u8bb0\u5f97\u8def\u5f84\u538b\u7f29\uff08TLE\u8b66\u544a\uff09\u3002\n\n~~\u5b8c\u6574\u4ee3\u7801\uff1f\u4e0d\u5b58\u5728\u7684\u3002\u5e76\u67e5\u96c6\u6a21\u677f\u81ea\u5df1\u5199\u2026\u2026~~\n\n### \u2462\u8d2a\u5fc3+\u5e26\u6743\u5e76\u67e5\u96c6\n _\u5e26\u6743\u5e76\u67e5\u96c6\u7684\u9898\u89e3\u771f\u7684\u5c11\uff0c\u8fd9\u91cc\u7801\u4e00\u53d1\u3002_    \n \n- \u8d2a\u5fc3 \u7565\uff08\u7b56\u7565\u4e0e\u8bc1\u660e\u540c\u2461\uff09\n- find\u5b9e\u73b0   \n\n\u53ef\u4ee5\u53c2\u8003[\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4](https://www.luogu.org/problem/P1196)    \n\n\u8bbe$g_i$\u8868\u793a$i$\u662f\u5426\u4e0e\u7236\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c0\u8868\u793a\u5728\uff0c1\u8868\u793a\u4e0d\u5728\u3002    \n\uff08\u7531\u4e8e$g_i$\u8868\u793a$i$\u4e0e\u5176\u7236\u8282\u70b9\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u6545\u6709\u201c\u8fb9\u5e26\u6743\u201d\u4e4b\u8bf4\u3002\uff09    \n\n\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a$x$\uff0c\u7236\u8282\u70b9\u4e3a$fx$\uff0c\u7956\u5148\u8282\u70b9\u4e3a$root$\u3002\uff08\u4e0b\u9762\u4ee5\u201c\u76f8\u540c\u201d\u548c\u201c\u4e0d\u540c\u201d\u8868\u793a\u4e8c\u8005\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff09     \n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u76f8\u540c\uff08$g_x=0$\uff09\uff0c\u90a3\u4e48$x$\u4e0e$root$\u662f\u5426\u76f8\u540c\u53d6\u51b3\u4e8e$fx$\u4e0e$root$\u662f\u5426**\u76f8\u540c**\u3002     \n\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u4e0d\u540c\uff08$g_x=1$\uff09\uff0c\u90a3\u4e48$x$\u4e0e$root$\u662f\u5426\u76f8\u540c\u53d6\u51b3\u4e8e$fx$\u4e0e$root$\u662f\u5426**\u76f8\u5f02**\u3002\n\n\u6545\u53ef\u4ee5\u5f97\u51fa\u8fd9\u6837\u7684\u7ed3\u8bba\uff1a\u5f53$f_{fx}=root$\u65f6\uff0c\u5373\u5b8c\u6210\u8def\u5f84\u538b\u7f29\u65f6\uff0c\u6709\uff1a   \n$g_x=g_{x} \\oplus g_{fx} $\uff08$\\oplus$\u8868\u793a\u5f02\u6216\u64cd\u4f5c\uff09    \n\n _\u5404\u4f4d\u53ef\u4ee5\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u6765\u68c0\u9a8c\u3002_ \n \n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06```int find(int x);```\u51fd\u6570\u6539\u6210\u8fd9\u6837\uff1a\n```cpp\nint found(int x)\n{\n\tif(f[x]==x)return x;\n\tint root=found(f[x]);\n\tg[x]^=g[f[x]];//\u6b64\u65f6g[f[x]]\u4e3afx\u4e0eroot\u7684\u5173\u7cfb\n\treturn f[x]=fa;\n    //\u4e0d\u80fd\u5148\u8d4b\u503cf[x]\uff0c\u518d\u8ba1\u7b97g[x]\n    //\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff1f\n}\n```\n- merge\u5b9e\u73b0   \n\n\u5148\u770b\u56fe\n![](https://cdn.luogu.com.cn/upload/image_hosting/607ubidg.png)    \n\u7531\u56fe\u53ef\u5f97\uff0c\u4fdd\u8bc1\u8fde\u8fb9\u65f6$x,y$\u4e0d\u76f8\u540c\uff0c\u80fd\u5f97\u5230$g_{ky}$\u7684\u503c\u3002\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6b64\u65f62\u4e2a\u70b9\u5728\u4e0d\u540c\u7684\u96c6\u5408\u5185\uff08\u8fd8\u8bb0\u5f97\u539f\u9898\u5417\uff1f\uff09\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c\uff1a\n```cpp\nbool merge(int x,int y)\n{\n\tint kx=find(x),ky=find(y);\n\tif(kx==ky)return false;\n    f[ky]=kx;\n\tg[ky]=g[x]^g[y]^1;\n\treturn true;\n}\n```\n\n\u81f3\u6b64\uff0c\u6838\u5fc3\u4ee3\u7801\u5c31\u5199\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u5c31\u4e0d\u96be\u5199\uff1a\n\n\u5982\u679c$x$\u548c$y$\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff08\u8bf4\u660e$x,y$\u5173\u7cfb\u5c1a\u672a\u786e\u5b9a\uff09\uff0c```merge(x,y)```\u3002    \n\u5982\u679c$x$\u548c$y$\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u4e14\u8def\u5f84\u538b\u7f29\u540e$g_x \\ne g_y$\u8bf4\u660e$x,y$\u5df2\u7ecf\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u4e0d\u7528\u7ba1\u3002     \n\u5982\u679c$x$\u548c$y$\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u4e14\u8def\u5f84\u538b\u7f29\u540e$g_x=g_y$\u8bf4\u660e$x,y$\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u8f93\u51fa\u89e3\u5e76\u9000\u51fa\u3002\n\n## \u4e09\u3001AC!\n\u89c9\u5f97\u597d\u5c31\u70b9\u4e2a\u8d5e\u5457\uff01\n",
        "postTime": 1572096507,
        "uid": 25862,
        "name": "xzlhxc_ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u849f\u84bb\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u61f5\u4e86\u597d\u4e45\uff0c\u56e0\u4e3a\u60f3\u5230\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff08n^2\uff09\u7684\uff0c\u57fa\u672c\u53ea\u80fdTLE\n\n\u540e\u6765\u4ed4\u7ec6\u60f3\u4e86\u60f3\uff0c\u672c\u9898\u53ea\u9700\u8981\u6700\u5927\u7684\u5f71\u54cd\u529b\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u5f71\u54cd\u529b\u5927\u5c0f\u5c06\u6bcf\u4e00\u5bf9\u51b2\u7a81\u5173\u7cfb\u964d\u5e8f\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u7684\u5f71\u54cd\u529b\u6700\u5c0f\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u95ee\u9898\uff1a\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6570\u7ec4[1--2n]\uff0c\u5176\u4e2d[a]\u8868\u793a\u5904\u4e8e\u4e00\u4e2a\u76d1\u72f1\uff0c[a+n]\u8868\u793a\u5904\u4e8e\u53e6\u4e00\u4e2a\u76d1\u72f1\n\n\u4ece\u5934\u626b\u63cf\u6bcf\u4e00\u5bf9\u5173\u7cfb\uff0c\u5c06a\u548cb+n\uff0ca+n\u548cb\u5408\u5e76\uff08\u5373\u4e24\u4eba\u5173\u5728\u4e0d\u540c\u76d1\u72f1\uff09\n\n\u5408\u5e76\u4e4b\u524d\u68c0\u67e5a\u548cb\uff0ca+n\u548cb+n\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\uff0c\u5982\u679c\u662f\uff0c\u5219\u6700\u5927\u5f71\u54cd\u529b\u5373\u4e3a\u6b64\u5bf9\u5173\u7cfb\u7684\u5f71\u54cd\u529b\n\n\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u98df\u7269\u94fe\u90a3\u4e00\u9898\n\n\u7ec6\u8282\u8bf7\u770b\u6ce8\u89e3\uff0c\u4e0a\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\nusing namespace std;\nconst int N=20010;\nstruct ab{\n    int x,y,z;\n};\nab t[N*5];\nint f[N*2],h[N*2];\nint n,m;\nint ff(int x)\n{\n    if(f[x]==x) return x;\n    return f[x]=ff(f[x]);\n}\nvoid unite(int x,int y)\n{\n    x=ff(x),y=ff(y);\n    if(x==y) return;\n    if(h[x]<h[y])\n    f[x]=y;\n    else if(h[x]>h[y])\n    f[y]=x;\n    else\n    f[y]=x,h[x]++;\n    return;\n}\nbool same(int x,int y)\n{\n    if(ff(x)==ff(y)) return true;\n    return false;\n}\nbool cmp(ab x,ab y)\n{\n    return x.z>y.z;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n*2;i++)\n    f[i]=i,h[i]=1;\n    for(int i=0;i<m;i++)\n    scanf(\"%d%d%d\",&t[i].x,&t[i].y,&t[i].z);\n    sort(t,t+m,cmp);\n    //\u5c06\u6bcf\u4e00\u5bf9\u5173\u7cfb\u6309\u7167\u5f71\u54cd\u529b\u5927\u5c0f\u964d\u5e8f\u6392\u5217\n    for(int i=0;i<m;i++)\n    {\n        int x=t[i].x,y=t[i].y;\n        if(same(x,y)||same(x+n,y+n))\n        {\n            printf(\"%d\",t[i].z);\n            return 0;\n        }\n        //\u5982\u679c\u5728\u540c\u4e00\u76d1\u72f1\uff0c\u6b64\u65f6\u7684\u5f71\u54cd\u529b\u4fbf\u662f\u7b54\u6848\n        unite(x,y+n);\n        unite(x+n,y);\n        //\u5426\u5219\uff0c\u5c06\u4e24\u4eba\u5173\u5728\u4e0d\u540c\u76d1\u72f1\n    }\n    printf(\"0\");\n    return 0;\n}\n```",
        "postTime": 1527766170,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u63d0\u793a\uff1a\n\n\u5206\u914d\u65b9\u6cd5\uff1a\u5e02\u957f\u770b\u5230\u7684\u51b2\u7a81\u4e8b\u4ef6\u5f71\u54cd\u529b\u662f3512\uff08\u75312\u53f7\u548c3\u53f7\u7f6a\u72af\u5f15\u53d1\uff09\u3002\u5176\u4ed6\u4efb\u4f55\u5206\u6cd5\u90fd\u4e0d\u4f1a\u6bd4\u8fd9\u4e2a\u5206\u6cd5\u66f4\u4f18\u3002\n\n\u5bf9\u4e8e30%\u7684\u6570\u636e\u6709N\u226415\u3002 \n\n\u5bf9\u4e8e70%\u7684\u6570\u636e\u6709N\u22642000\uff0cM\u226450000\u3002 \n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\u6709N\u226420000\uff0cM\u2264100000\u3002\n\n\u601d\u8def\uff1a\u6700\u5927\u503c\u6700\u5c0f\u9996\u5148\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u6cd5\u3002\u9a8c\u8bc1\u65b9\u6cd5\u5982\u4e0b\uff1a\u731c\u4e00\u4e2amid\u540e\uff0c\u5c06\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u8fb9\u90fd\u5047\u5220\u9664\u6389\uff0c\u7136\u540e\u9a8c\u8bc1\u5927\u4e8emid\u7684\u8fb9\u8fde\u6210\u7684\u56fe\u662f\u5426\u4e3a\u4e8c\u5206\u56fe\u3002\uff08\u56e0\u4e3amid\u4e3a\u53d1\u751f\u51b2\u7a81\u7684\u6700\u5927\u6743\u503c\uff0c\u5927\u4e8emid\u7684\u8fb9\u90fd\u4e0d\u5e94\u8be5\u53d1\u751f\u51b2\u7a81\uff0c\u5373\u5e94\u4e3a\u4e8c\u5206\u56fe\u3002\uff09\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#define maxn 20005\nusing namespace std;\nstruct data{int a,b,c;};\nint n,m;\nvector<int>g[maxn],w[maxn];\nint vis[maxn]={0};\nint q[maxn];\nint front,rear;\nbool BFS(int s,int m)\n{\n    front=rear=1;\n    q[rear++]=s;\n    vis[s]=1;\n    while(front!=rear)\n    {\n        int i=q[front];\n        front++;\n        for(int k=0;k<g[i].size();k++)\n        {\n            if(w[i][k]>m)\n            {\n                int j=g[i][k];\n                if(vis[i]==vis[j]) return 0;\n                if(vis[j]==0)\n                {\n                    q[rear++]=j;\n                    vis[j]=3-vis[i];\n                }\n            }\n        }\n    }\n    return 1;\n}\nbool check(int t)\n{\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i<=n;i++)\n    {\n        if(vis[i]==0)\n        {\n            bool ok=BFS(i,t);\n            if(!ok) return false;\n        }\n    }\n    return true;\n}\nint main()\n{\n    //freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    int x,y,z;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        g[x].push_back(y);\n        g[y].push_back(x);\n\n        w[x].push_back(z);\n        w[y].push_back(z);\n    }\n\n    int A=0,B=1000000000,ans;\n    while(A<=B)\n    {\n        int C=(A+B)/2;\n        int ok=check(C);\n        if(ok) B=C-1,ans=C;\n        else A=C+1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1529290595,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "### \u7ec8\u4e8e\u5b66\u4f1a\u4e86\u79cd\u7c7b\u5e76\u67e5\u96c6\uff0c\u5199\u70b9\u81ea\u5df1\u80fd\u770b\u61c2\u7684\u4e1c\u897f\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u5bf9\u5e76\u67e5\u96c6\u80af\u5b9a\u90fd\u4e0d\u964c\u751f\uff0c\u5e76\u67e5\u96c6\u662f\u4e00\u7c7b\u80fd\u652f\u6301\u5408\u5e76\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u4f20\u7edf\u7684\u5e76\u67e5\u96c6\u80fd\u5b9e\u73b0\u7684\u64cd\u4f5c\u662f\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u628a\u4e24\u4e2a\u5143\u7d20\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\n\n\u4f46\u662f\u6211\u4eec\u5982\u679c\u7ef4\u62a4\u4e00\u4e2a\u64cd\u4f5c\uff1a\u4e24\u4e2a\u5143\u7d20\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u529e\u5462\uff1f\n\n\u7ed9\u4e2a\u4f8b\u9898\u5148\u81ea\u5df1\u4f53\u4f1a\uff1a\n\n[P1525 \u5173\u62bc\u7f6a\u72af ](https://www.luogu.org/problemnew/show/P1525)\n\n\u8bfb\u5b8c\u9898\u76ee\u4e86\u5417\uff1f\u73b0\u5728\u5e94\u8be5\u77e5\u9053\u6211\u8bf4\u7684\u662f\u4ec0\u4e48\u610f\u601d\u4e86\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u521a\u5b66\u5b8c\u4f20\u7edf\u5e76\u67e5\u96c6\u7684\u65f6\u5019\u624b\u8db3\u65e0\u63aa\u3002\n\n\u60f3\u4e86\u534a\u5929\uff0c\u4e0d\u77e5\u9053\u5982\u4f55\u5b9e\u73b0\u3002\n\n\u6700\u540e\u4e0a\u7f51\u67e5\u8d44\u6599\uff0c\u624d\u53d1\u73b0\u4e86\u8fd9\u4e2a\u9a9a\u4e1c\u897f:\n### \u79cd\u7c7b\u5e76\u67e5\u96c6\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u79cd\u7c7b\u5e76\u67e5\u96c6\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\u3002\n\n\u6211\u4eec\u770b\u5230\uff0c\u8fd9\u9053\u9898\u76ee\u7684\u5173\u7cfb\u53ea\u6709\u4e24\u4e2a\uff1a\u670b\u53cb\uff0c\u654c\u4eba\u3002\n\n\u79cd\u7c7b\u5e76\u67e5\u96c6\u7684\u610f\u601d\u5c31\u662f\u5728\u666e\u901a\u5e76\u67e5\u96c6\u7684\u57fa\u7840\u4e0a\u6269\u5927\u5e76\u67e5\u96c6\u7684\u5bb9\u91cf\uff0c\u6765\u7ef4\u62a4\u591a\u79cd\u5173\u7cfb\u3002\n\n\u8fd9\u6837\u8bf4\u53ef\u80fd\u4e0d\u592a\u597d\u61c2\uff0c\u6211\u4eec\u7ed3\u5408\u8fd9\u9053\u9898\u76ee\u8c08\u4e00\u4e0b\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u80fd\u60f3\u5230\u8fd9\u9053\u9898\u76ee\u7684\u6b63\u786e\u89e3\u6cd5\u5982\u4e0b:\n\n1. \u6309\u7167\u4ec7\u6068\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\n2. \u904d\u5386\u4e00\u8fb9\uff0c\u628a\u4ed6\u4fe9\u6254\u5230\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u4ed6\u4fe9\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u4ed6\u4eec\u7684\u4ec7\u6068\u503c\u3002\n\n3. \u8d2a\u5fc3\u662f\u5f88\u597d\u8bc1\u660e\u7684\uff0c\u4efb\u610f\u4ea4\u6362\u4e00\u7ec4\u4ec7\u6068\u503c\uff0c\u5f97\u5230\u7684\u7b54\u6848\u4e0d\u4f1a\u66f4\u4f18\u3002\n\n\u89e3\u6cd5\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u8fd9\u4e2a\u6254\u5230\u4e0d\u540c\u96c6\u5408\u7684\u64cd\u4f5c\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\n\n\u4e0a\u9762\u5df2\u7ecf\u8bf4\u4e86\uff0c\u79cd\u7c7b\u5e76\u67e5\u96c6\u8981\u6269\u5927\u5bb9\u91cf\u7ef4\u62a4\u4e0d\u540c\u7684\u5173\u7cfb\u3002\n\n\u4e24\u79cd\u5173\u7cfb\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u5e76\u67e5\u96c6\u7684\u5bb9\u91cf\u5f00\u5230\u4e24\u500d\u3002\n\n\u6211\u4eec\u628a\u5e76\u67e5\u96c6\u6570\u7ec4\u7ef4\u62a4\u7684\u5173\u7cfb\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n$x$ \u4ee3\u8868\u670b\u53cb\u96c6\u5408\n\n$x+n$ \u4ee3\u8868\u654c\u4eba\u96c6\u5408\n\n\u5982\u679c $a ,b$ \u662f\u670b\u53cb\n\n\u6211\u4eec\u5c31\u628a $a , b$ \u8fde\u5728\u4e00\u8d77\u3002\n\n\u5426\u5219\u7684\u8bdd $(a , b+n)$ , $(b ,a+n)$ \u8fde\u5728\u4e00\u8d77\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u4ee3\u7801\u5c31\u975e\u5e38\u597d\u5b9e\u73b0\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 100000 + 5;\nint n,m,bin[maxn << 1];\nstruct crime{\n\tint a,b,val;\n\tbool operator < (const crime &a) const {//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\t\treturn a.val < val;\n\t}\n}x[maxn];\n\nint find(int x){\n\tif(bin[x] == x) return x;\n\treturn bin[x] = find(bin[x]);\n}\n\nint main ()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i) bin[i] = i , bin[i+n] = i+n;//\u9884\u5904\u7406\n\tfor(int i=1;i<=m;++i) scanf(\"%d%d%d\",&x[i].a,&x[i].b,&x[i].val);\n\tsort(x+1,x+1+m);\n\tfor(int i=1;i<=m;++i){\n\n\t\tint fa = find(x[i].a);//a\u7684\u540c\u4e00\u4e2a\u76d1\u72f1\u96c6\u5408\n\t\tint fb = find(x[i].b);//b\u7684\u540c\u4e00\u4e2a\u76d1\u72f1\u96c6\u5408\n\t\tint ffa = find(x[i].a + n);//a\u7684\u53e6\u4e00\u4e2a\u76d1\u72f1\u96c6\u5408\n\t\tint ffb = find(x[i].b + n);//b\u7684\u53e6\u4e00\u4e2a\u76d1\u72f1\u96c6\u5408\n\t\tif(fa == fb ){//\u5982\u679c\u5f53\u524d\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u4f1a\u5f15\u53d1\u51b2\u7a81\uff0c\u8f93\u51fa\u3002\n\t\t\tprintf(\"%d\\n\",x[i].val);\n\t\t\treturn 0;\n\t\t}\n\t\tbin[fa] = ffb;//a\u5c31\u5728b\u7684\u53e6\u4e00\u4e2a\u76d1\u72f1\u4e2d\n\t\tbin[fb] = ffa;//b\u5c31\u5728a\u7684\u53e6\u4e00\u4e2a\u76d1\u72f1\u4e2d\n\t}\n\tputs(\"0\");//\u4fbf\u5229\u7ed3\u675f\u4e86\u8fd8\u6ca1\u627e\u5230\uff0c\u8f93\u51fa0\n\treturn 0;\n}\n//\u8fd8\u662f\u4e0d\u7406\u89e3\u6211\u4eec\u53ef\u4ee5\u6a21\u62df\u4e00\u4e0b\n\n// scan : 1 2\n// link(1,2+n) link(2,1+n)\n// scan : 2 3 \n// link(2,3+n) link(3,2+n)\n\t\t\n// now set :\t\n// 1,3 -> 2+n\n// 2 -> 1+n\n// 1+n -> 3+n\n// 2,1+n -> 3+n\n\t\t\n// scan : 1 3\n// link(1,3+n) link(3,1+n) \u8fd9\u65f6\u5019\u53d1\u73b0\u51b2\u7a81\u4e86\uff0c\u8f93\u51fa\u3002\n// print( (1,3).val ).\n\n```\n\n\u5230\u8fd9\u91cc\uff0c\u5e94\u8be5\u5c31\u5f88\u597d\u61c2\u4e86\u3002\n\n\u4f46\u662f\uff0c\u73b0\u5b9e\u5f80\u5f80\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u3002\n\n\u5982\u679c\u7ef4\u62a4\u7684\u5173\u7cfb\u66f4\u591a\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u4e09\u79cd\u5173\u7cfb\u3002\uff08\u5982\u679c\u4ee5\u540e\u9047\u5230\u66f4\u591a\u5173\u7cfb\uff0c\u7c7b\u4f3c\u8fd9\u79cd\u5206\u6790\u65b9\u6cd5\u3002\n\n\u4f8b\u9898 \n\n[P2024 [NOI2001]\u98df\u7269\u94fe](https://www.luogu.org/problemnew/show/P2024)\n\n\u6211\u4eec\u770b\u5230\u8fd9\u91cc\u6709\u4e09\u79cd\u5173\u7cfb:\n\n1. $a$ \u4e0e $b$ \u662f\u540c\u7c7b\n\n2. $a$ \u5403 $b$\n\n3. $a$ \u88ab $b$ \u5403\n\n\u4e24\u500d\u5e76\u67e5\u96c6\u663e\u7136\u4e0d\u591f\u4e86\uff0c\u90a3\u5f00\u4e09\u500d\u4e0d\u5c31\u884c\u4e86\uff1f\n\n~~\u5c31\u662f\u8fd9\u4e48\u7b80\u5355~~\n\n\u5173\u7cfb\u66f4\u591a\u7684\u8bdd\uff0c\u4ee5\u6b64\u7c7b\u63a8.\n\n\u4ee3\u7801\u5982\u4e0b:\n```cpp\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 5 * 1e4 + 10;\nint bin[maxn << 2];\nint n,k,ans = 0;\n\nint find(int x){\n\tif(bin[x] == x) return x;\n\treturn bin[x] = find(bin[x]);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n *3;++i) \n\t\tbin[i] = i;\n\twhile(k--){\n\t\tregister int step , a , b;\n\t\tscanf(\"%d%d%d\",&step,&a,&b);\n\t\tif(a > n || b > n){\n\t\t\tans++;continue;\n\t\t}\n\t\tif(step == 2 && a == b){\n\t\t\tans++;continue;\n\t\t}\n\t\tif(step == 1)\n\t\t{\n\t\t\tint fa = find(a);\n\t\t\tint fb = find(b);\n\t\t\tint ffa = find(a + n);\n\t\t\tint ffb = find(b + n);\n\t\t\tint fffa = find(a + n + n);\n\t\t\tint fffb = find(b + n + n);\n\t\t\tif(ffa == fb || ffb == fa || fffa == fb || fffb == fa ){\n\t\t\t\tans++;continue;\n\t\t\t}\n\t\t\tbin[fa] = fb;//a\u7684\u540c\u7c7b\u662fb\u7684\u540c\u7c7b\n\t\t\tbin[ffa] = ffb;//a\u7684\u730e\u7269\u662fb\u7684\u730e\u7269\n\t\t\tbin[fffa] = fffb;//a\u7684\u5929\u654c\u662fb\u7684\u5929\u654c\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//a eat b;\n\t\t\tint fa = find(a);\n\t\t\tint fb = find(b);\n\t\t\tint ffa = find(a + n);\n\t\t\tint ffb = find(b + n);\n\t\t\tint fffa = find(a + n + n);\n\t\t\tint fffb = find(b + n + n);\n\t\t\tif(fa == fb || ffb == fa) {\n\t\t\t\tans++;continue;\n\t\t\t}\n            \t\t//\u8fd9\u91cc\u5173\u7cfb\u5c31\u6709\u70b9\u590d\u6742\u4e86\uff0c\u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\u633a\u7b80\u5355\u7684 \n\t\t\tbin[fa] = fffb;//a\u7684\u540c\u7c7b\u662fb\u7684\u5929\u654c\n            \t\tbin[ffa] = fb;//a\u7684\u730e\u7269\u662fb\u7684\u540c\u7c7b\n            \t\tbin[fffa] = ffb;//a\u7684\u5929\u654c\u662fb\u7684\u730e\u7269\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n# END.",
        "postTime": 1558700799,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u79cd\u7c7b\u5e76\u67e5\u96c6\u7b14\u8bb0"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\u76ee\u65f6\u600e\u4e48\u4e5f\u6ca1\u6709\u60f3\u5230\u8fd9\u662f\u4e00\u9053\u795e\u5947\u7684\u5e76\u67e5\u96c6\u3002~~\u6700\u540e\u7adf\u662f\u95ee\u522b\u4eba\u7684\u624d\u77e5\u9053\u7684~~\n\n\u56e0\u4e3a\u53ea\u6709\u4e24\u6240\u76d1\u72f1\uff0c\u6240\u4ee5\u53ea\u8981\u5c3d\u91cf\u4f7f\u6028\u6c14\u503c\u5927\u7684\u4e24\u4e2a\u4eba\u5206\u914d\u5728\u540c\u4e00\u76d1\u72f1\u4e2d\u5373\u53ef\uff08\u8d2a\u5fc3\uff09\u3002\u6211\u4eec\u7528b\u6570\u7ec4\u5b58\u50a8\u8fd9\u4e2a\u4eba\u7684\u201c\u654c\u4eba\u201d\u3002\n\u4f46\u5bf9\u4e8e\u540c\u4e00\u76d1\u72f1\u4e2d\u7684\u4eba\u6765\u8bf4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\u3002\n\n\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n 1. \u6309\u6028\u6c14\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n 1. \u4f9d\u6b21\u53d6\u51fa\u8fd9\u4e24\u4e2a\u4ebau\u3001v\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u540c\u4e00\u7ec4\u4e86\uff08\u4e0d\u53ef\u907f\u514d\uff09\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u8f93\u51fa\u7ed3\u675f\u7a0b\u5e8f\uff08\u8fd9\u4e2a\u6028\u6c14\u503c\u662f\u6700\u5927\u7684\uff09\u3002\n\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\t 1. \u5982\u679cu\u8fd8\u6ca1\u6709\u654c\u4eba\uff0c\u5c31\u5c06b[u]=v;\n     1. \u5982\u679c\u5df2\u7ecf\u6709\u4e86\uff0c\u5c31\u628av\u548cu\u7684\u654c\u4eba\u5206\u5728\u540c\u4e00\u7ec4\uff0c\u5373f[v]=f[find(u)]\uff1b\n    \n   v\u7684\u60c5\u51b5\u4e5f\u4e00\u6837\u3002\n\n    \n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct node{\n\tint u,v,c;\n}a[100012];\nint b[20012],f[20012],n,m;\nbool cmp(node x,node y)\n{\n\treturn x.c>y.c;\n}\ninline int find(int x)\n{\n\tif (f[x]!=x) f[x]=find(f[x]);\n\treturn f[x];\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1; i<=m; i++) scanf(\"%d%d%d\",&a[i].u,&a[i].v,&a[i].c);\n\tsort(a+1,a+1+m,cmp);//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\tfor (int i=1; i<=n; i++) f[i]=i;\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint x=find(a[i].u),y=find(a[i].v);\n\t\tif (x==y)//\u5728\u540c\u4e00\u7ec4\u4e86\u5c31\u9000\u51fa\n\t\t{\n\t\t\tprintf(\"%d\\n\",a[i].c);\n\t\t\treturn 0;\n\t\t}\n\t\tif (!b[a[i].u]) b[a[i].u]=a[i].v; \n        else f[find(b[a[i].u])]=f[a[i].v];\n\t\tif (!b[a[i].v]) b[a[i].v]=a[i].u; \n        else f[find(b[a[i].v])]=f[a[i].u];//v\u4e5f\u6765\u4e00\u904d\n\t}\n\tprintf(\"0\\n\");//\u6ca1\u6709\u51b2\u7a81\u5c31\u8f93\u51fa0\n\treturn 0;\n}\n```",
        "postTime": 1540883511,
        "uid": 43103,
        "name": "Tanktt",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u4e0b\u9762\u5c45\u7136\u6709\u4eba\u8bf4\u751f\u6210\u6811\u4e0d\u884c\uff08\u4e5f\u8bb8\u53ea\u662f\u6ca1\u8003\u8651\uff09\n\n\u601d\u8def\uff1a\u5148\u6c42\u6700\u5927\u751f\u6210\u6811\n\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\n\u7136\u540e\u4ece\u5927\u5230\u5c0f\u5224\u65ad\u8fb9\u662f\u5426\u53ef\u884c\n\n\u9047\u5230\u51b2\u7a81\uff08\u4e24\u8fb9\u989c\u8272\u76f8\u540c\uff09\u5219\u8f93\u51fa\n\u65e0\u51b2\u7a81\u5219\u8f93\u51fa0\n\n\n\u8bc1\u660e\uff1a\n\n\u5c06\u6811\u4e0a\u7684\u8fb9\u53eb\u505a\u7ea2\u8fb9\uff0c\u4e4b\u524d\u6dfb\u52a0\u7684\u8fb9\u53eb\u505a\u7eff\u8fb9\n\n\u52a0\u5165\u4e00\u6761\u8fb9\u540e\u4f1a\u4ea7\u751f\u4e00\u4e9b\u73af\n\n\u5bf9\u73af\u4e0a\u7684\u6bcf\u6761\u7eff\u8fb9\uff0c\u90fd\u6709\u4e00\u4e9b\u5bf9\u5e94\u7ea2\u8fb9\u548c\u5b83\u7ec4\u6210\u4e00\u4e2aLCA\u73af\uff0c\u4e14\u8fd9\u6761\u7eff\u8fb9\u6bd4\u6240\u6709\u73af\u4e0a\u7684\u7ea2\u8fb9\u77ed\n\n\u65b0\u52a0\u5165\u7684\u8fb9\u4e5f\u5f62\u6210\u4e00\u4e2aLCA\u7ea2\u8fb9\u73af\uff0c\u4e14\u6bd4\u8fd9\u4e9b\u7ea2\u8fb9\u90fd\u77ed\n\n\u8fd9\u4e2a\u73af\u4e0a\u6709\u4e09\u7c7b\u8fb9\n\n1.\u5728\u65b0\u52a0\u5165\u7684\u8fb9\u5bf9\u5e94LCA\u7ea2\u8fb9\u73af\u4e0a\u7684\uff1a\u7531\u7b97\u6cd5\u53ef\u8bc1\n\n2.\u7eff\u8fb9\u7531\u7b97\u6cd5\u53ef\u8bc1\n\n3.\u5176\u4ed6\u7ea2\u8fb9\uff1a\u4e00\u5b9a\u6bd4\u5bf9\u5e94\u7eff\u8fb9\u957f\uff0c\u56e0\u800c\u4e5f\u6bd4\u65b0\u52a0\u5165\u7684\u8fb9\u957f\n\n\u56e0\u800c\u65b0\u52a0\u5165\u7684\u8fb9\u6700\u77ed\uff0c\u82e5\u88ab\u8feb\u4fdd\u7559\u5219\u662f\u7b54\u6848\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=20000,M=100000;\nint head[N],vis[M],next[M],ver[M],tot,n,m,p,color[N],fa[N];\ninline void add(int a,int b){\n    tot++;\n    ver[tot]=b;\n    next[tot]=head[a];\n    head[a]=tot;\n}\nstruct node{\n    int s,t,len;\n}; \nnode q[M];\nbool cmp(node a,node b){\n    return a.len>b.len;\n}\nint getfather(int a){\n    if(a==fa[a])\n        return a;\n    return fa[a]=getfather(fa[a]);\n} \nvoid dfs(int a,int col){\n    vis[a]=col;\n    for(int i=head[a];i!=0;i=next[i]){\n        if(!vis[ver[i]]){\n            dfs(ver[i],3-col);\n        }\n    }\n} \nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&q[i].s,&q[i].t,&q[i].len);\n    }\n    //\u6700\u5927\u751f\u6210\u6811\n    sort(q+1,q+m+1,cmp); \n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n    for(int i=1;i<=m;i++){\n        int fxa=getfather(q[i].s);\n        int fxb=getfather(q[i].t);\n        if(fxa==fxb) continue; \n        fa[fxa]=fxb; \n        add(q[i].s,q[i].t);\n        add(q[i].t,q[i].s);\n    } \n    //\u53ea\u9700\u8981\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u5c31\u884c\n    dfs(1,1);\n    //\u5224\u5b9a\n    for(int i=1;i<=m;i++){\n        if(vis[q[i].s]==vis[q[i].t]){\n            printf(\"%d\",q[i].len);\n            return 0;\n        }\n    }\n    printf(\"0\");\n    return 0;\n}\n```\n\u4e00\u4e2aKruskal\uff0c\u4e00\u4e2aDFS\uff0c\u518d\u5224\u5b9a\n\u5e94\u8be5\u4e0d\u96be\u5199\n\n\u7528\u65f6: 160ms / \u5185\u5b58: 3332KB\n",
        "postTime": 1529932543,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8fd9\u53ef\u80fd\u662fnoip\u91cc\u9762\u5f88\u7f55\u89c1\u7684\u4e00\u9053\u7eaf\u5e76\u67e5\u96c6\u7684\u9898\u5427\uff08\u5927\u96fe  \n\n### \u89e3\u9898\u601d\u8def  \n---\n\u9996\u5148\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u89e3\u51b3\u6028\u6c14\u503c\u66f4\u5927\u7684\u4e24\u4e2a\u4eba\uff0c\u6240\u4ee5\u9996\u5148\u9700\u8981\u5c06\u6028\u6c14\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f  \n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4e00\u4e2a\u4e00\u4e2a\u5730\u89e3\u51b3\u77db\u76fe\uff0c\u4e5f\u5c31\u662f\u5bf9\u7f6a\u72af\u5206\u7ec4\uff0c\u5982\u679c\u73b0\u5728\u8981\u8003\u8651\u7684\u8fd9\u5bf9\u7f6a\u72af\u5df2\u7ecf\u5728\u540c\u4e00\u7ec4\u4e86\uff0c\u90a3\u5c31\u89e3\u51b3\u4e0d\u4e86\u77db\u76fe\uff0c\u7b54\u6848\u5c31\u662f\u6028\u6c14\u503c  \n\u5426\u5219\u8fd9\u4e2a\u77db\u76fe\u662f\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8bbe\u7acb\u5bf9\u7acb\u96c6\u5408\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4f\u8868\u793a\u6bcf\u4e2a\u7f6a\u72af\u4ed6\u7684\u5bf9\u7acb\u96c6\u5408\u662f\u54ea\u4e2a\u7f6a\u72af\u6240\u5728\u7684\u96c6\u5408  \n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u7684\u4e24\u4e2a\u7f6a\u72afA\u548cB\uff0c\u5982\u679cA\u6ca1\u6709\u5bf9\u7acb\u96c6\u5408\uff0c\u5c31\u628af[A]\u8bbe\u4e3aB\uff0c\u5982\u679c\u6709\u5bf9\u7acb\u96c6\u5408\uff0c\u5c31\u628af[A]\u6240\u5728\u7684\u96c6\u5408\u548cB\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u3002\u5982\u679cB\u6ca1\u6709\u5bf9\u7acb\u96c6\u5408\uff0c\u5c31\u628af[B]\u8bbe\u4e3aA\uff0c\u5982\u679c\u6709\u5bf9\u7acb\u96c6\u5408\uff0c\u5c31\u628af[B]\u6240\u5728\u7684\u96c6\u5408\u548cA\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u3002\u5982\u679c\u6240\u6709\u77db\u76fe\u90fd\u89e3\u51b3\u4e0d\u4e86\uff0c\u7b54\u6848\u5c31\u662f0  \n\n---  \n### AC\u4ee3\u7801(\u5173\u7231\u751f\u547d\uff0c\u62d2\u7edd\u6284\u88ad)  \n\u4e0a\u9762\u7684\u89e3\u91ca\u5e94\u8be5\u5df2\u7ecf\u591f\u8be6\u7ec6\u4e86\uff0c\u6240\u4ee5\u4ee3\u7801\u5c31\u4e0d\u52a0\u6ce8\u91ca\u4e86\n```cpp  \n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint fa[20005], f[20005];\nint n, m, ans;\nstruct edge {\n    int a;\n    int b;\n    int c;\n};\nbool cmp(edge a, edge b) {\n    if (a.c != b.c) {\n        return a.c > b.c;\n    }\n    return a.a < b.a;\n}\nedge e[100005];\nvoid init() {\n    for (int i = 1; i <= n; i++) {\n        fa[i] = i;\n    }\n}\nint get(int x) {\n    if (fa[x] == x) {\n        return x;\n    }\n    return fa[x] = get(fa[x]);\n}\nvoid merge(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        fa[y] = x;\n    }\n}\nint main() {\n    cin >> n >> m;\n    for (int i = 0; i < m; i++) {\n        cin >> e[i].a >> e[i].b >> e[i].c;\n    }\n    init();\n    sort(e, e + m, cmp);\n    for (int i = 0; i < m; ++i) {\n        if (get(e[i].a) == get(e[i].b)) {\n            ans = e[i].c;\n            break;\n        } else {\n            if (f[e[i].a]) {\n                merge(f[e[i].a], e[i].b);\n            } else {\n                f[e[i].a] = e[i].b;\n            }\n            if (f[e[i].b]) {\n                merge(f[e[i].b], e[i].a);\n            } else {\n                f[e[i].b] = e[i].a;\n            }\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}  \n```  \n",
        "postTime": 1570709316,
        "uid": 199266,
        "name": "Liberty10",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\n\n# \u6734\u7d20\u7684\u5e76\u67e5\u96c6\u505a\u6cd5qwq\n **1\u3001\u5bf9\u6bcf\u4e2a\u72af\u4ebax\uff0c\u5efa\u4e00\u4e2a\u865a\u62df\u7ed3\u70b9x\u2019**\n \n **2\u3001\u4ece\u5927\u5230\u5c0f\u5b89\u6392\uff0c\u5c06\u4e24\u4e2a\u72af\u4ebax,y  \u201c\u5206\u5230\u4e24\u4e2a\u76d1\u72f1\u201d  \u7684\u65b9\u6cd5\u662f\u5c06x\u548cy\u2019\u6240\u5728\u96c6\u5408\u5408\u5e76\uff0cy\u548cx\u2019\u6240\u5728\u96c6\u5408\u5408\u5e76\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a \u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u6211\u7684\u670b\u53cb  \u6211\u8981\u548c\u654c\u4eba\u7684\u654c\u4eba\u5728\u4e00\u8d77QwQ\uff09**\n \n **3\u3001\u5f53\u5904\u7406\u4e00\u7ec4\u72af\u4ebax,y\u65f6\u53d1\u73b0x\u548cy\uff08\u6216x\u2019,y\u2019\uff09\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5219\u8868\u793a\u8fd9\u5bf9\u72af\u4eba\u5df2\u7ecf\u88ab\u5b89\u6392\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u6b64\u65f6\u7684\u6028\u6068\u503c\u5c31\u662f\u7b54\u6848\uff08\u56e0\u4e3a\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86\uff09**\n\n#### \u4e3e\u4e2a\u4f8b\u5b50    \n#### \u8001\u5e08\u548c\u4f60\u6709\u4ec7\uff0c\u4f60\u548c\u73ed\u957f\u6709\u4ec7  \uff0c\u6240\u4ee5 \u4f60\u4e0d\u80fd\u548c\u73ed\u957f\u548c\u8001\u5e08\u5728\u4e00\u6b21,\u5373\u73ed\u957f\u548c\u8001\u5e08\u5fc5\u987b\u5728\u4e00\u8d77\n#### \u53ef\u5982\u679c\u73ed\u957f\u548c\u8001\u5e08\u6709\u4ec7\u7684\u8bdd\uff0c\u5c31\u4e0e\u4e4b\u524d\u7684\u6761\u4ef6\u51b2\u7a81\u4e86\uff0c\u6240\u4ee5\u73ed\u957f\u548c\u8001\u5e08\u4e4b\u524d\u5c31\u6709\u4ec7\uff0c\u8bf4\u660e\u4ed6\u4eec\u5df2\u7ecf\u5728\u4e00\u8d77\u4e86\uff0c\u6b64\u65f6\u8f93\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u4ec7\u6068\u503c\u5373\u53ef\n\n###### \u4e0a\u4ee3\u7801\uff08\u7801\u98ce\u4e11\uff0c\u52ff\u55b7QwQ\uff09\n```cpp\n#include <iostream>//\u5351\u5fae\u7684\u5934\u6587\u4ef6qwq\n#include <cstring>\n#include <cstdio>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#define ll long long\n#define maxn 10000010\n\nusing namespace std;\n\nint fa[maxn];//\u8bb0\u5f55\u7236\u4eb2\nint b[maxn];//\u654c\u4eba\u7684\u654c\u4ebaqwq(\u8fd9\u91cc\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5f00\u4e24\u4e2a\u6570\u7ec4\uff0c\u5373\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3afa[1~n],fa[n~2n]\n\nstruct node\n{\n\tint x;\n\tint y;\n\tint val;//\u6028\u6c14\u503c\n}a[maxn];\n\nbool cmp(node a,node b)\n{\n\treturn a.val>b.val;//\u5c06\u6028\u6c14\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n}\n\nint find(int x)//\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6\n{\n\tif(x==fa[x])  return x;\n\tfa[x]=find(fa[x]);\n\treturn fa[x];\n}\n\nvoid bing(int x,int y)//\u5408\u5e76\u64cd\u4f5cqwq\n{\n\tfa[find(x)]=find(y);\n}\n\nbool pd(int x,int y)//\u67e5\u8be2\n{\n\tif(find(x)==find(y))  return true;\n\telse return false;\n}\n\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)   fa[i]=i;//\u521d\u59cb\u5316\n\tfor(int i=1;i<=m;i++)\n\t   scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].val);\n\tsort(a+1,a+m+1,cmp);//STL \u5feb\u6392\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(pd(a[i].x,a[i].y))  //\u5982\u679c\u4e24\u540d\u72af\u4eba\u5df2\u7ecf\u5728\u4e00\u4e2a\u76d1\u72f1\u4e86\uff0c\u5c31\u5df2\u7ecf\u627e\u5230\u4e86\u7b54\u6848  \n\t\t{\n\t\t\tprintf(\"%d\\n\",a[i].val);  return 0;\n\t\t}\n\t\telse //\u7ef4\u62a4\u65b0\u7684\u5173\u7cfb\uff0c\u6ce8\u610f\u6b64\u65f6\u8981\u7ef4\u62a4\u4e24\u4e2a\u5e76\u67e5\u96c6\n\t\t{\n\t\t    if(b[a[i].x]==0)   b[a[i].x]=a[i].y;\n\t\t\telse  \n\t\t\t{\n\t\t\t\tbing(b[a[i].x],a[i].y);\n\t\t\t}\n\t\t\tif(b[a[i].y]==0)   b[a[i].y]=a[i].x;\n\t\t\telse  \n\t\t\t{\n\t\t\t\tbing(b[a[i].y],a[i].x);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"0\\n\");//\u8bb0\u5f97\u53ef\u80fd\u8981\u8f93\u51fa0\n\treturn 0;\n\n}\n```\n\n##### \u4eca\u5929\u4e0a\u5348\u8001\u5e08\u8bb2\u5e76\u67e5\u96c6\u7684\u65f6\u5019\u8bb2\u4e86\u8fd9\u9898\uff0c\u590d\u4e60\u4e00\u4e0bqwq\n\n",
        "postTime": 1565261399,
        "uid": 35531,
        "name": "\u7531\u6bd4\u6ee8\u4e36\u96ea\u4e43",
        "ccfLevel": 0,
        "title": "P1525 \u9898\u89e3"
    },
    {
        "content": "\u597d\u5427\uff0c\u53d1\u4e2a\u4e8c\u5206\u56fe\u9898\u89e3QAQ..\n\n\n\u505a\u6cd5\uff1a\u4e8c\u5206\u7b54\u6848+\u4e8c\u5206\u56fe\n\n1.\u8981\u6c42\u6700\u5927\u7684\u5f71\u54cd\u529b\u6700\u5c0f -> \u60f3\u5230\u4e8c\u5206\u7b54\u6848\n\n2.\u5c06\u7f6a\u72af\u5173\u62bc\u5728\u4e24\u4e2a\u76d1\u72f1\u91cc -> \u60f3\u5230\u4e8c\u5206\u56fe\n\n\n\u5177\u4f53\uff0c\u5c06\u6240\u6709\u7f6a\u72af\u7684\u5173\u7cfb\u6309\u7167\u5f71\u54cd\u529b\u5927\u5c0f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4e8c\u5206\u7b54\u6848mid\uff08\u6b64\u5904\u7684mid\u662f\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u9700\u8981\u7528\u5230\u5177\u4f53\u503c\u65f6\u518d\u4ee3\u5165\u5230\u6570\u7ec4\u4e2d\u5373\u53ef\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\uff09\u3002check\u51fd\u6570\u5373\u662f\u5224\u65ad\u8be5\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u9996\u5148\u5c06a[mid].v\u5927\u4e8e\u7b54\u6848\u7684\u5173\u7cfb\u90fd\u8fde\u8fb9\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5c06\u6240\u6709\u5173\u7cfb\u6309\u7167\u5f71\u54cd\u529b\u6392\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u4ecemid + 1\u5230m\u5faa\u73af\uff0cm\u662f\u5173\u7cfb\u603b\u6570\uff0c\u5c06\u8fd9\u4e9b\u5173\u7cfb\u90fd\u8fde\u8fb9\u5373\u53ef\u3002\u7136\u540e\u5c31\u662f\u9ed1\u767d\u67d3\u8272\u5224\u65ad\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u662f\u7684\u5c31\u8fd4\u56detrue\uff0c\u53cd\u4e4b\u8fd4\u56defalse\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 20010;\nconst int M = 100010;\n\nint n, m, color[N];\nbool flag;\n\nvector<int> e[N];\n\nstruct Node{\n    int x, y, v;\n    bool operator < (const Node &other) const{\n        return v < other.v;\n    }\n}a[M];\n\ninline void dfs(int u, int c)//\u67d3\u8272\u5224\u65ad\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0cu\u662f\u5f53\u524d\u8282\u70b9\uff0cc\u662f\u5f53\u524d\u9700\u8981\u67d3\u7684\u989c\u8272\uff0ccolor[]\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\n{\n    color[u] = c;\n    for (int i = 0; i < e[u].size(); i ++){\n        int v = e[u][i];\n        if (!color[v]) dfs(v, c ^ 1);//\u76f8\u90bb\u7684\u70b9\u8fd8\u6ca1\u67d3\u8fc7\u8272\uff0c\u5c31\u5c06\u5b83\u67d3\u6210\u4e0e\u81ea\u5df1\u4e0d\u540c\u7684\u989c\u8272\n        else\n        if (color[v] == c) flag = false;//\u6709\u51b2\u7a81\u5c31\u628a\u6807\u5fd7\u6807\u4e3afalse\uff0c\u8be5\u56fe\u4e0d\u662f\u4e8c\u5206\u56fe\n    }\n}\n\ninline bool check(int pos)//\u68c0\u67e5\u662f\u5426\u4e3a\u4e8c\u5206\u56fe\n{\n    for (int i = 1; i <= n; i ++) e[i].clear();//\u6ce8\u610f\u521d\u59cb\u5316\n    for (int i = pos + 1; i <= m; i ++){//\u8fde\u8fb9\uff0cpos+1\u5f00\u59cb\u7684\u5173\u7cfb\u7684\u5f71\u54cd\u529b\u90fd\u662f\u5927\u4e8e\u7b54\u6848\u7684\uff0c\u9700\u8981\u5728\u4e24\u4e2a\u76d1\u72f1\u5185\n        e[a[i].x].push_back(a[i].y);\n        e[a[i].y].push_back(a[i].x);\n    }\n    flag = true;\n    memset(color, 0, sizeof color);//\u6ce8\u610f\u521d\u59cb\u5316\n    for (int i = 1; i <= n; i ++)//dfs\u9ed1\u767d\u67d3\u8272\n        if (!color[i]){\n            dfs(i, 0);\n            if (!flag) return false;\n        }\n    return true;\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i ++)\n        scanf(\"%d%d%d\", &a[i].x, &a[i].y, &a[i].v);\n    sort(a + 1, a + 1 + m);  //\u7ed3\u6784\u4f53\u6309v\u6392\u5e8f\n    int l = 0, r = m, mid; //\u4e8c\u5206\u7b54\u6848\n    while (l + 1 < r){\n        mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    if (m == 1) puts(\"0\");  //\u7279\u5224\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5173\u7cfb\u76f4\u63a5\u8f93\u51fa0\n    else printf(\"%d\\n\", a[r].v);\n    return 0;\n}\n```",
        "postTime": 1502460864,
        "uid": 19722,
        "name": "fy0123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8ddfP1892\u56e2\u4f19\u7684\u505a\u6cd5\u7c7b\u4f3c\u3002\n\n\u9664\u4e86\u7528\u6570\u7ec4\u4fdd\u5b58\u654c\u4eba\u7f16\u53f7\u4e4b\u5916\uff0c\u8fd8\u6709\u53e6\u4e00\u79cd\u505a\u6cd5\u3002\n\n\u56e2\u4f19\uff1a\u5408\u5e76\u65f6\uff0c\u7528i\u8282\u70b9\u8868\u793a\u4e3a\u53cb\uff0ci+n\u7ed3\u70b9\u8868\u793a\u4e3a\u654c\u3002\n\n\u672c\u9898\uff1a\u5408\u5e76\u65f6\uff0c\u7528i\u8282\u70b9\u8868\u793a\u540c\u4e00\u76d1\u72f1\uff0ci+n\u7ed3\u70b9\u8868\u793a\u4e0d\u540c\u76d1\u72f1\u3002\n\n\u6309\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u8fb9\uff0c~~\u8d2a\u5fc3\u5730~~\u628a\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u7ed3\u70b9\u8bbe\u5b9a\u4e3a\u4e0d\u540c\u76d1\u72f1\uff08\u4e3a\u654c\uff09\n\n\u9047\u5230\u51b2\u7a81\u540e\u8bf4\u660e\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u6b64\u65f6\u8f93\u51fa\u6743\u503c\uff0c\u5373\u4e3a\u51b2\u7a81\u7684\u6700\u5927\u503c\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint n,m,cnt,fa[100005],ans;\n\nstruct edge{\n\tint u,v,w;\n}e[100005];\n\ninline void add(int u,int v,int w){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].w=w;\n}\n\ninline int cmp(edge x,edge y){\n\treturn x.w>y.w;\n}\n\ninline int getfa(int v){\n\tif(fa[v]==v)return v;\n\tfa[v]=getfa(fa[v]);\n\treturn fa[v];\n}\n\ninline void merge(int x,int y){\n\tx=getfa(x);y=getfa(y);\n\tfa[y]=x;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=2*n;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\tsort(e+1,e+cnt+1,cmp);\n\tfor(int i=1;i<=cnt;i++){\n\t\tint u=e[i].u,v=e[i].v;\n\t\tint fau=getfa(u),fav=getfa(v);\n\t\tif(fau!=fav){\n\t\t\tmerge(u,v+n);\n\t\t\tmerge(v,u+n);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d\\n\",e[i].w);\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"0\\n\");//\u6d1b\u8c37\u7b2c\u4e00\u4e2a\u70b9\u53610\n}\n```",
        "postTime": 1566898554,
        "uid": 51301,
        "name": "Y15BeTa",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "   \u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5f53\u505a\u8fb9\u5e26\u5168\u7684\u5e76\u67e5\u96c6\u6765\u505a\u3002\n   \n   \u4f46\u5176\u5b9e\u5e76\u67e5\u96c6\u7684\u505a\u6cd5\u5e76\u4e0d\u662f\u7279\u522b\u597d\u60f3\uff0c\u6211\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5374\u628a\u5b83\u5f53\u6210\u4e86**\u4e8c\u5206\u56fe**\u6765\u505a\uff0c~~\u770b\u4e86\u4e00\u4e0b\u522b\u4eba\u7684\u9898\u89e3~~\u6211\u624d\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a**\u5e76\u67e5\u96c6**\u7684\u9898\u3002\n   \n   \n\n------------\n\n\u90a3\u4e48\u4ec0\u4e48\u662f**\u5e76\u67e5\u96c6**\u5462\uff1f\n\n\u8f6c[\u5e76\u67e5\u96c6](https://baike.so.com/doc/6119935-6333082.html)\n\n------------\n\n\n\u5982\u679c\u4f60~~\u6ca1\u6709~~\u542c\u61c2\uff0c~~\u90a3\u5c31\u7b97\u4e86~~\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u6211\u6765\u8bb2\u4e00\u4e0b**\u5e76\u67e5\u96c6**\uff1b\n\n# \u5e76\u67e5\u96c6\n**\u5e76\u67e5\u96c6**\u662f\u4e00\u79cd\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u82e5\u5e72\u4e2a\u4e0d\u91cd\u53e0\u7684\u96c6\u5408\uff0c\u5e76\u652f\u6301\u5408\u5e76\u4e0e\n\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8be6\u7ec6\u5730\u8bf4\uff0c\u5e76\u67e5\u96c6\u5305\u62ec\u5982\u4e0b\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c:\n\n\n1.find\uff0c\u67e5\u8be2\u4e00\u4e2a\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u96c6\u5408\u3002\n\n2.merge ~~\uff08\u6211\u4e60\u60ef\u53eb\u4ed6hb\uff08\u5408\u5e76\uff08hebing\uff09\uff09\uff09~~\uff0c\u628a\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u96c6\u5408\u3002\n\n\u4e3a\u4e86\u5177\u4f53\u5b9e\u73b0\u5e76\u67e5\u96c6\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9a\u4e49\u96c6\u5408\u7684\u8868\u793a\u65b9\u6cd5\u3002\n\n\u5728\u5e76\u67e5\u96c6\u4e2d\uff0c\u6211\u4eec\u91c7\u7528 **\u201c\u627e\u7239\u201d\u6cd5**\uff0c\u5373\u4e3a\u6bcf\u4e2a\u96c6\u5408\u9009\u62e9\u4e00\u4e2a\u56fa\u5b9a\u7684\u5143\u7d20\uff0c\u4f5c\u4e3a\u6574\u4e2a\u96c6\u5408\u7684 **\u201c\u7239\u201d**\uff0c\n\n\u5176\u6b21\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u5f52\u5c5e\u5173\u7cfb\u7684\u8868\u793a\u65b9\u6cd5\u3002\u7b2c\u4e00\u79cd\u601d\u8def\u662f\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4f\uff0c\u7528f\n\u4fdd\u5b58\u5143\u7d20x\u6240\u5728\u96c6\u5408\u7684 **\u201c\u7239\u201d**\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u5143\u7d20\u7684\u5f52\u5c5e\u96c6\u5408\uff0c\u4f46\u5728\u5408\u5e76\u65f6\u9700\u8981\u4fee\u6539\u5927\u91cf\u5143\u7d20\u7684f\u503c\uff0c\u6548\u7387\u5f88\u4f4e\u3002\n\n\u7b2c\u4e8c\u79cd\u601d\u8def\u662f**\u4f7f\u7528\u4e00\u68f5\u6811\u5f62\u7ed3\u6784\u5b58\u50a8\u6bcf\u4e2a\u96c6\u5408\uff0c\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5143\u7d20\uff0c\u6811\u6839\u662f\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20**\u3002\n\n\u6574\u4e2a\u5e76\u67e5\u96c6\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u68ee\u6797(\u82e5\u5e72\u68f5\u6811)\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4fa\u6765\u8bb0\u5f55\u8fd9\u4e2a\u68ee\u6797\uff0c\u7528fa[x]\u4fdd\u5b58x\u7684\u7236\u8282\u70b9\u3002\n\n\u7279\u522b\u5730\uff0c\u4ee4\u6811\u6839\u7684fa\u503c\u4e3a\u5b83\u81ea\u5df1\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5728\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\uff0c\u53ea\u9700\u63a5\u4e24\u4e2a\u6811\u6839(**\u4ee4\u5176\u4e2d\u30fc\u4e2a\u6811\u6839\u4e3a\u53e6\u30fc\u4e2a\u6811\u6839\u7684\u5b50\u8282\u70b9**\uff0c\u5373 **fa[root1]\uff1droot2**\uff0c\u4e0d\u8fc7\u5728\u67e5\u8be2\u5143\u7d20\u7684\u5f52\u5c5e\u65f6\uff0c\u9700\u8981\u4ece\u8be5\u5143\u7d20\u5f00\u59cb\u901a\u8fc7fa\u5b58\u50a8\u7684\u503c\u4e0d\u65ad\u9012\u5f52\u8bbf\u95f4\u7236\u8282\u70b9\uff0c\u76f4\u81f3\u5230\u8fbe\u6811\u6839\u3002\n\n\u4e3a\u4e86\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\uff0c\u5e76\u67e5\u96c6\u5f15\u5165\u4e86\u8def\u5f84\u538b\u7f29\u4e0e\u6309\u79e9\u5408\u5e76\u4e24\u79cd\u601d\u60f3\u3002\n\n\u672c\u849f\u84bb\u82e5\u5bf9\u6309\u79e9\u5408\u5e76~~\u4e0d\u592a\u719f\u6089~~\u3002\n\n\u6240\u4ee5\u4e0b\u9762\u5bf9\u8def\u5f84\u538b\u7f29**\u8be6\u7ec6**\u8bb2\u89e3\uff08\u9003\uff09\n\n## \u8def\u7ecf\u538b\u7f29\n\u5927\u5bb6\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u7b2c\u4e00\u79cd\u601d\u8def(\u76f4\u63a5\u7528\u6570\u7ec4f\u4fdd\u5b58\u4ee3\u8868)\u7684\u67fb\u8be2\u6548\u7387\u5f88\u9ad8\uff0c\u6211\n\u4eec\u4e0d\u59a8\u8003\u8651\u628a\u4e24\u79cd\u601d\u8def\u8fdb\u884c\u7ed3\u5408\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u6bcf\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u201c\u6811\u5f62\u7ed3\u6784\u201d\u7684\u6839\u8282\u70b9\u662f\u4ec0\u4e48\uff0c\u5e76\u4e0d\u5173\u5fc3\u8fd9\u68f5\u6811\u7684\u5177\u4f53\u5f62\u6001\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u6267\u884cfind\u64cd\u4f5c\u7684\u540c\u65f6\uff0c\u628a\u8bbf\u95ee\u8fc7\u7684\u6bcf\u4e2a\u8282\u70b9(\u4e5f\u5c31\u662f\u6240\u67e5\u8be2\u5143\u7d20\u5168\u90e8\u7956\u5148)\u90fd\u76f4\u63a5\u6307\u5411\u6811\u6839\u3002\n\n\n\n------------\n\n\n------------\n### \u4ee3\u7801\u5b9e\u73b0\n\n------------\n**\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316**\n\n```c\nfor(int i=1;i<=cnt;i++)\n    {\n        f[i]=i;\n    }\n```\n\n**find\u64cd\u4f5c**\n\n```c\nint find(int x)\n{\n    if(x!=f[x])f[x]=find(f[x]);\n    return f[x];\n}\n```\n\n**\u5408\u5e76\u64cd\u4f5c**\n\n```\nvoid add(int x,int y)\n{\n\tx=find(f[x]);\n\ty=find(f[y]);\n\tf[x]=y;\n}\n```\n**\u5224\u65ad\u64cd\u4f5c**\n```c\nbool check(int x,int y)\n{\n\tx=find(x);\n\ty=find(y);\n\tif(x==y)return true;\n\treturn false;\n}\n```\n**sort\u7684cmp**\n```c\nbool cmp(zf x,zf y)\n{\n\treturn x.c>y.c;\n}\n```\n**\u7ed3\u6784\u4f53**\n```c\nstruct zf{\n\tint a;\n\tint b;\n\tint c;\n}x[100010];\n```\n**\u4e3b\u51fd\u6570**\n```c\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);//\u8f93\u5165\n\tfor(i=1;i<=n;i++)//\u521d\u59cb\u5316\n\ta[i]=i;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\t scanf(\"%d%d%d\",&x[i].a,&x[i].b,&x[i].c);//\u8f93\u5165\n\t}\n\tsort(x+1,x+m+1,cmp);//\u6392\u5e8f\uff0cSTL\u5927\u6cd5\u597d\uff01\uff01\uff01\uff01\n\tfor(i=1;i<=m+1;i++)\n\t{\n\t\tif(check(x[i].a,x[i].b))\n\t\t{\n\t\t\tprintf(\"%d\",x[i].c);//\u5982\u679c\u4e24\u4e2a\u7f6a\u72af\u5df2\u7ecf\u5728\u540c\u4e00\u76d1\u72f1\u5c31\u8f93\u51fa\n\t\t\tbreak;//\u9000\u51fa\u5faa\u73af\n\t\t}\n\t\t\telse \n\t\t{\n\t\t\tif(!b[x[i].a])b[x[i].a]=x[i].b;//\u6807\u8bb0\u654c\u4eba\n\t\t\telse\n            {\n\t\t\t\thb(b[x[i].a],x[i].b);\u5408\u5e76\u654c\u4eba\u7684\u654c\u4eba\uff1b\n\t\t\t}\n\t\t\tif(!b[x[i].b])b[x[i].b]=x[i].a;//\u76f8\u53cd\u4ea6\u7136\n\t\t\telse\n            {\n\t\t\t\thb(b[x[i].b],x[i].a);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u534e\u4e3d\u7684\u7ed3\u675f~-~\n}\n```\n~~\u5e9f\u8bdd\u4e0d\u591a\u8bf4~~\uff0c\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1b\n```c\n#include<bits/stdc++.h>\nusing namespace std;\nstruct zf{\n\tint a;\n\tint b;\n\tint c;\n}x[100010];\n\nint n,m,a[20015],b[20015],i;\n\ninline bool cmp(zf x,zf y)\n{\n\treturn x.c>y.c;\n}\ninline int find(int x)\n{\n\tif(a[x]==x)return x;\n\ta[x]=find(a[x]);\n\treturn a[x];\n}\ninline void hb(int x,int y)\n{\n\tx=find(a[x]);\n\ty=find(a[y]);\n\ta[x]=y;\n}\ninline bool check(int x,int y)\n{\n\tx=find(x);\n\ty=find(y);\n\tif(x==y)return true;\n\treturn false;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n    \n\tfor(i=1;i<=n;i++)\n\ta[i]=i;\n    \n\tfor(i=1;i<=m;i++)\n\t{\n\t\t scanf(\"%d%d%d\",&x[i].a,&x[i].b,&x[i].c);\n\t}\n\tsort(x+1,x+m+1,cmp);\n    \n\tfor(i=1;i<=m+1;i++)\n\t{\n\t\tif(check(x[i].a,x[i].b))\n\t\t{\n\t\t\tprintf(\"%d\",x[i].c);\n\t\t\tbreak;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(!b[x[i].a])b[x[i].a]=x[i].b;\n\t\t\telse hb(b[x[i].a],x[i].b);\n\t\t\tif(!b[x[i].b]) b[x[i].b]=x[i].a;\n\t\t\telse hb(b[x[i].b],x[i].a);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u6ce8\u91ca\u4e0a\u9762\u6709\uff0c~~\u5c31\u4e0d\u5199\u4e86~~\uff08\u9003\uff09~\n\n\u5b8c\u7ed3 \u6700\u540e\u5b89\u5229\u4e00\u4e0b\u6211\u7684[\u535a\u5ba2](https://www.luogu.org/blog/lwhd/) \uff08\u9003\uff09\n\n\u5982\u679c\u672c\u849f\u84bb\u9898\u89e3\u5199\u7684\u4e0d\u591f\u597d\u6216\u8005\u6709\u54ea\u4e9b\u5730\u65b9\u4e0d\u591f\u7cbe\u786e\uff0c\u8bf7\u5728\u8bc4\u8bba\u91cc\u9762**\u7559\u8a00**\u3002\n\n###### \u671b\u6ee1\u610f~~\n\n\u9898\u89e3\u5199\u7684~~\u4e0d\u5bb9\u6613~~\u3002\u5e0c\u671b\u5ba1\u6838**\u5927\u4f6c**\u624b\u4e0b\u7559\u60c5 ~~\u9003~~",
        "postTime": 1566136976,
        "uid": 181404,
        "name": "\u8def\u4eba_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "## \u8bdd\u8bf4\u8fd9\u9053\u9898~~\u4e0d\u4e00\u770b\u5c31~~\u4e8c\u5206\u7b54\u6848\u5417\uff1f\n### \u770b\u5230\u4e00\u5806\u5927\u4f6c\u7528\u5e76\u67e5\u96c6%%%  sto orz\n### \u90a3\u6211\u5c31\u6765\u53d1\u4e00\u53d1\u4e8c\u5206\u7b54\u6848\u7684\u4ee3\u7801\u5427\n\n\u9996\u5148\u89c2\u5bdf\u6570\u636e\u53ef\u4ee5\u53d1\u73b0\u7b97\u6cd5\u5927\u6982\u7387\u662fn*log(n\uff09\u7684/~~\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48~~\n\u90a3\u5c31\u76f4\u63a5\u7528\u4e8c\u5206\u53bb\u627e\u6700\u540e\u6700\u5c0f\u7684\u6700\u5927\u5f71\u54cd\u529b\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5224\u65ad\u8fd9\u4e2a\u7b54\u6848\u662f\u5426\u5408\u6cd5\uff0c\u76f4\u63a5dfs\u5c31\u884c\uff0c\u5982\u679c\u5927\u4e8e\u5f53\u524d\u7684\u4e8c\u5206\u503c\u5c31\u5fc5\u987b\u5206\u5230\u4e24\u4e2a\u76d1\u72f1\u91cc\u9762\uff0c\u5982\u679c\u672a\u53d1\u73b0\u77db\u76fe\uff08\u5373\u4e24\u4e2a\u7f6a\u72af\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u91cc\u9762\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u6028\u6c14\u503c\u5374\u5927\u4e8e\u4e8c\u5206\u503c\uff0c\u8fd4\u56de\u4e0d\u5408\u6cd5\uff1b\u5bf9\u4e8e\u5c0f\u4e8e\u4e8c\u5206\u503c\u7684\u5173\u7cfb\u5c31\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u6b64\u65f6\u653e\u5728\u54ea\u8fb9\u662f\u4e00\u6837\u7684\n\n#### \u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define in read()\n#define re register\n\nconst int N=2e4+5,M=1e5+5;\nint n,m,cnt,first[N],col[N],l,r;\nstruct Edge{\n\tint u,v,w,nxt;\n}e[M<<1];\n\ninline int read(){\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile((c<'0'||c>'9')&&c!='-')c=getchar();\n\tif(c=='-')f=-1,c=getchar();\n\twhile(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\treturn x*f;\n}\ninline void add(int u,int v,int w){\n\te[++cnt]=(Edge){u,v,w,first[u]};\n\tfirst[u]=cnt;\n}\nbool color(int u,int k){\n\tint f=0;\n\tfor(re int i=first[u];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(w>k){\n\t\t\tif(col[v]==1)col[v]=col[u]^1,f|=color(v,k);\n\t\t\telse if(col[v]==col[u])return 1;\n\t\t}\n\t\tif(f)break;\n\t}\n\treturn f;\n}\ninline bool check(int w){\n\tint f=0;\n\tfor(re int i=1;i<=n;++i)col[i]=1;\n\tfor(re int i=1;i<=n;++i){\n\t\tif(col[i]!=1)continue;\n\t\tcol[i]=2;\n\t\tf|=color(i,w);\n\t\tif(f)break;\n\t}\n\treturn !f;\n}\n\nint main(){\n\tn=in,m=in;\n\tfor(re int i=1;i<=m;++i){\n\t\tint a=in,b=in,c=in;\n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t\tr=max(r,c);\n\t}\n\twhile(l<r){\n\t\tint mid=l+r>>1;\n\t\tif(check(mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\",l);\n\treturn 0;\n}\n```\n",
        "postTime": 1569757050,
        "uid": 137924,
        "name": "Arr\u8451",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "### \u5e76\u67e5\u96c6\n\u8fd9\u9053\u9898\u4e4d\u4e00\u770b\u6c42\u6700\u5c0f\u6700\u5927\u503c\uff0c\u60f3\u60f3\u53c8\u4e0d\u77e5\u5982\u4f55\u4e0b\u624b\uff0c\u7ecf\u4e00\u4f4d\u5927\u4f6c\u6307\u70b9\uff0c\u77e5\u9053\u8be5\u7528\u5e76\u67e5\u96c6\uff0c\u987a\u4fbf\u5ea6\u5a18\u4e86\u4e00\u4e0b\u5e76\u67e5\u96c6\uff0c\u5c31\u662f\u4e24\u4e2a\u6700\u57fa\u672c\u7684\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u591a\u8bb2\u4e86\uff0c\u53c2\u89c1 **P3367\u3010\u6a21\u677f\u3011\u5e76\u67e5\u96c6** \u3002\n```cpp\nint find(int x){\n    if(fa[x]!=x) fa[x]=find(fa[x]);\n    return fa[x];\n}\nvoid unite(int x,int y){\n    fa[find(x)]=find(y);\n}\n```\n\n### \u53cd\u4eba\u7c7b\n\u8fd9\u662f\u90a3\u4f4d\u5927\u4f6c\u544a\u8bc9\u6211\u7684\u540d\u8bcd\uff0c\u5e94\u8be5\u662f\u4fbf\u4e8e\u7406\u89e3\u7528\u7684\u3002\u4e3e\u4e2a\u6817\u5b50\uff1a\u5982\u679cA\u548cB\u662f\u654c\u4eba\uff0c\u90a3\u4e48A\u548cB\u7684\u53cd\u4eba\u7c7b\u5c31\u662f\u597d\u53cb\uff0cB\u548cA\u7684\u53cd\u4eba\u7c7b\u5c31\u662f\u597d\u53cb\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u8868\u793aB\u7684\u53cd\u4eba\u7c7b\uff0c\u53ef\u4ee5\u53e6\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\u4fbf\u662f\u7528i+n\u6765\u8868\u793ai\u7684\u53cd\u4eba\u7c7b\n\n### \u8d2a\u5fc3\n\u63a5\u4e0b\u6765\u5c31\u7528\u8d2a\u5fc3\u7684\u601d\u8def\u4e86\u3002\u5f00\u4e2a\u7ed3\u6784\u4f53\uff0c\u628a\u51e0\u5bf9cp\u6309\u7167\u6012\u6c14\u503c\u6392\u6392\u5e8f\uff0c\u4ece\u6012\u6c14\u503c\u6700\u5927\u7684\u4e00\u5bf9cp\u5f00\u59cb\uff0c\u4ece\u5927\u5230\u5c0f\u5165\u624b\uff0c\u54b1\u4eec\u7684\u76ee\u7684\u5c31\u662f\u628a\u8fd9\u51e0\u5bf9\u6700\u72e0\u7684cp\u62c6\u6563\uff08\u4e5f\u5c31\u662f\u4fe9\u4eba\u5206\u522b\u548c\u5bf9\u65b9\u7684\u53cd\u4eba\u7c7b\u76f8\u8fde\uff09\u3002\u5982\u679c\u51fa\u73b0\u4e00\u5bf9cp\u62c6\u6563\u4e86\uff0c\u4f1a\u8ba9\u524d\u9762\u7684cp\u53c8\u51a4\u5bb6\u8def\u7a84\uff0c\u90a3\u4e48\u51f6\u624b\u5c31\u662f\u4f60\u4eec\u8fd9\u5bf9cp\uff01\u8f93\u51fa\uff0c\u4efb\u52a1\u7ed3\u675f\u3002\n\n### \u8b66\u544a\n\u4e0d\u8981\u62c6\u6563\u4e86\u6240\u6709cp\u5c31\u592a\u5174\u594b\uff0c\u522b\u5fd8\u4e86\u8f93\u51fa\u4e2a**0**\n\n#### \u4e0a\u4e00\u4e0b\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff5e\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint fa[40008];//\u4e3a\u4e86\u5b58\u653e\u53cd\u4eba\u7c7b\uff0c\u6240\u4ee5\u5f00\u4e24\u500d\nstruct cp{\n    int a,b,anger;\n}c[100008];//\u7ed3\u6784\u4f53\u653ecp\nbool cmp(const cp &x,const cp &y){\n    return x.anger>y.anger;\n}//\u6309\u7167\u6012\u6c14\u503c\u5927\u5c0f\u6392\u5e8f\uff0c\u5148\u62c6\u6563\u72e0cp\nint find(int x){\n    if(fa[x]!=x) fa[x]=find(fa[x]);\n    return fa[x];\n}\nvoid unite(int x,int y){\n    fa[find(x)]=find(y);\n}\n//\u5e76\u67e5\u96c6\u6a21\u7248\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=2*n;i++) fa[i]=i;\n    for(int i=1;i<=m;i++) scanf(\"%d%d%d\",&c[i].a,&c[i].b,&c[i].anger);\n    sort(c+1,c+m+1,cmp);\n    for(int i=1;i<=m;i++){\n        if(find(c[i].a)==find(c[i].b)){\n            printf(\"%d\",c[i].anger);\n            return 0;\n        }\n        unite(c[i].a,c[i].b+n);\n        unite(c[i].b,c[i].a+n);\n        //\u4e92\u76f8\u8fde\u7ed3\u5bf9\u65b9\u7684\u53cd\u4eba\u7c7b\n    }\n    puts(\"0\");//\u5168\u90e8\u62c6\u6563\u8f93\u51fa0\n    return 0;\n}\n```\nPS\uff1a\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u5927\u4f6c\u52ff\u55b7\uff5e",
        "postTime": 1565426326,
        "uid": 205050,
        "name": "KrOX",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8d2a\u5fc3+\u5e26\u6743\u5e76\u67e5\u96c6\n\n\u5206\u6790\n\u5bf9\u4e8e\u51b2\u7a81,\u6211\u4eec\u80af\u5b9a\u4f18\u5148\u5904\u7406\u77db\u76fe\u503c\u8f83\u5927\u7684\u4e00\u5bf9,\u6240\u4ee5\u6309\u7167\u77db\u76fe\u503c\u6392\u5e8f,\u5148\u5904\u7406\u5927\u7684.\u5c06\u5927\u7684\u51b2\u7a81\u62b5\u6d88\u6389,\u5728\u5904\u7406\u5c0f\u7684\u76f4\u5230\u4e0d\u80fd\u5904\u7406\u4e3a\u6b62.\n\n\u8d2a\u5fc3\u53ef\u4ee5\u8bc1\u660e\n\n ![](https://cdn.luogu.com.cn/upload/pic/9431.png) \n\n\u5bf9\u4e8ep1>p2\u5982\u679c\u4e0d\u5904\u7406p1,\u90a3\u4e48ans=p1,\u5426\u5219ans<=p1\u6240\u4ee5\u663e\u7136\u5148\u5904\u7406\u5927\u7684\u51b2\u7a81\u503c.\n\n\u4e4b\u540e\u6211\u4eec\u8981\u5904\u7406\u51b2\u7a81.   \u5904\u7406\u51b2\u7a81\u601d\u8def\u662f\u8fd9\u6837\u7684,\n\n\u5c06\u6240\u6709\u51b2\u7a81\u7684\u7f6a\u72af\u653e\u5230\u4e0d\u540c\u7684\u76d1\u72f1\u91cc,\u76f4\u5230\u4e0d\u80fd\u653e\u4e3a\u6b62.\n\n\u4f7f\u7528\u5e26\u6743\u5e76\u67e5\u96c6,\u6743\u8bb0\u5f55\u4e86\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bbpos,\u82e5pos%2==1,\u90a3\u4e48\u8ba4\u4e3a\u4ed6\u4e0e\u6839\u5904\u4e8e\u4e0d\u540c\u76d1\u72f1,\u82e5pos%2==0,\u4ed6\u4e0e\u6839\u5904\u4e8e\u76f8\u540c\u76d1\u72f1.\n\n\u7279\u522b\u7684 pos\u662f\u4ed6\u5230\u6839\u8def\u8fc7\u7684\u8282\u70b9\u6743\u503c\u4e4b\u548c.  \u6240\u4ee5\u5047\u5982\u6211\u4eec\u4f7f\u67d0\u4e2a\u8282\u70b9\u7684\u6743\u4e3a0,\u5373\u4ee3\u8868\u4ed6\u4e0e\u6839\u540c\u76d1\u72f1.\n\n\u6bcf\u6b21\u5c06\u672a\u786e\u5b9a\u7684\u8282\u70b9\u8fde\u8d77\u6765,\u6765\u8868\u793a\u5173\u7cfb\n\n\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u8fd9\u4e48\u60f3, \u5148\u770b\u4e00\u6761\u94fe\n\n ![](https://cdn.luogu.com.cn/upload/pic/9432.png) \n\n ![](https://cdn.luogu.com.cn/upload/pic/9433.png) \n\n\u4e8e\u662f\u8fb9\u6743\u4e3a1\u8868\u793a\u5904\u4e8e\u4e0d\u540c\u76d1\u72f1,\u6bcf\u9694\u4e00\u4e2a\u5c31\u662f\u540c\u4e00\u4e2a\u76d1\u72f1,\u4ee5\u5468\u671f2\u53d8\u5316,\u6545pos%2\u5373\u53ef.\n\n\u73b0\u5728\u5047\u5982\u6709\u4e00\u7ec4\u51b2\u7a81,\n\n\u5982\u679c\u672a\u786e\u5b9a\u5173\u7cfb,\u5373\u6ca1\u6709\u5904\u4e8e\u540c\u4e00\u68f5\u6811,\u90a3\u4e48\n\n\u6211\u4eec\u9700\u8981\u5c06\u4ed6\u4eec\u653e\u5230\u4e0d\u540c\u76d1\u72f1,\u5e76\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6b64\u4fe1\u606f.\n\n\u5177\u4f53\u662f\n\n\u5982\u679c\u4ed6\u4eec\u4e0e\u6839\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u4e00\u6837,\u5373\u4e00\u4e2a\u4e0e\u6839\u540c\u76d1\u72f1,\u4e00\u4e2a\u4e0e\u6839\u4e0d\u540c\u76d1\u72f1\n\n,\u5c06\u4ee4 \u6839\u8282\u70b9pos=0,\u7136\u540e\u76f8\u8fde,\u8868\u793a\u4e24\u4e2a\u6839\u8282\u70b9\u540c\u76d1\u72f1.(\u6b64\u65f6\u80af\u5b9a\u4e24\u4e2a\u6839\u662f\u4e0d\u51b2\u7a81\u7684,\u56e0\u4e3a\u5982\u679c\u51b2\u7a81\u4e14\u66f4\u91cd\u8981\u4e4b\u524d\u5c31\u5c06\u8fde\u8fb9),\n\n\u76f8\u53cd\u5982\u679c\u4ed6\u4eec\u4e0e\u6839\u76f8\u5bf9\u8ddd\u79bb\u4e00\u6837,\u90a3\u4e48\u4ee4\u4e24\u6839\u5904\u4e8e\u4e0d\u540c\u76d1\u72f1\u5373\u53ef.\n\n\u6240\u4ee5\u662f\u4ee4\u4e00\u4e2a\u6839 pos=1\u7136\u540e\u76f8\u8fde.\n\n**\u503c\u5f97\u6ce8\u610f,\u5728\u8fde\u6839\u65f6\u6bcf\u68f5\u6811\u5185\u90e8\u7684\u76f8\u5bf9\u8ddd\u79bb\u4e0d\u53d8,\u4fdd\u8bc1\u4e86\u4e4b\u524d\u5904\u7406\u7684\u51b2\u7a81,\u73b0\u5728\u4f9d\u7136\u6709\u6548.**\n\n\u5047\u5982\u8fd9\u7ec4\u51b2\u7a81\u5df2\u7ecf\u786e\u5b9a\u4e86\u5173\u7cfb,\u76f4\u63a5\u5224\u65ad\u6709\u65e0\u51b2\u7a81\u5373\u53ef.\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint ward[20005],d[20005],rank2[20005];\nint n,m,ans;\ntypedef struct aaa\n{\n    int a,b,pow;\n}node;\nnode pair2[100005];\nint find(int x)\n{\n    int iter,q=0;\n    for( iter=x;iter!=ward[iter];iter=ward[iter])\n        q+=d[iter];\n    for(int temp;x!=iter;temp=ward[x],ward[x]=iter,x=temp)\n    q-=d[x],d[x]=q+d[x];\n    return x;\n    \n}\nbool cmp(node a,node b)\n{\n    return a.pow>b.pow;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    ward[i]=i,rank2[i]=1;\n    int a,b;\n    for(int i=1;i<=m;i++)\n    scanf(\"%d%d%d\",&pair2[i].a,&pair2[i].b,&pair2[i].pow);\n    sort(pair2+1,pair2+m+1,cmp);\n    int ta,tb;\n    for(int i=1;i<=m;i++)\n    {\n        ta=pair2[i].a,tb=pair2[i].b;\n        int ra=find(ta),rb=find(tb);\n        if(ra!=rb)\n        ward[ra]=rb,d[ra]=(!((d[ta]-d[tb]+2)%2));    \n        else\n        if(!((d[ta]-d[tb]+2)%2))\n            {\n                cout<<pair2[i].pow;\n                return 0;\n            }\n    }\n    cout<<ans;\n } \n```",
        "postTime": 1508804057,
        "uid": 36310,
        "name": "caddy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "e\uff0c\u5c31\u6211\u4e00\u773c\u770b\u7740\u50cf\u6700\u5927\u751f\u6210\u6811\u561b\uff1f\n\n#### \u9898\u76ee\u5206\u6790\uff1a\n\n\u9898\u76ee\u7b80\u610f\uff1a\u5c06\u65e0\u5411\u56fe$G$\u7684\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97\u540c\u4e00\u96c6\u5408\u4e2d\u4e24\u70b9\u4e4b\u95f4\u6700\u5927\u8fb9\u6700\u5c0f\u3002\n\n\u9996\u5148\u6211\u4eec\u5c31\u4f1a\u60f3\u5230\u4e00\u79cd\u8d2a\u5fc3\uff1a\u5c3d\u91cf\u4f7f\u8f83\u5927\u8fb9\u7684\u4e24\u7aef\u70b9\u5904\u4e8e\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\u3002\n\n\u7136\u540e\u5728\u7ed9\u8fb9\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u6211\u60f3\u5230\u4e86\u6700\u5927\u751f\u6210\u6811\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u6811\u662f\u4e00\u79cd\u4e8c\u5206\u56fe\u7ed3\u6784\uff0c\u90a3\u4e48\u6211\u4eec\u5957\u6700\u5927\u751f\u6210\u6811\u7684\u677f\u5b50\u5c31\u53ef\u4ee5\u5c3d\u91cf\u5c06\u8f83\u5927\u8fb9\u585e\u8fdb\u8fd9\u4e2a\u4e8c\u5206\u56fe\u4e2d\uff0c\u5269\u4e0b\u7684\u8fb9\u53ef\u4ee5\u6839\u636e\u6811\u7684\u67d3\u8272\u60c5\u51b5\u5224\u65ad\u80fd\u5426\u5728\u585e\u8fdb\u56fe\u540e\u7ef4\u6301\u4e8c\u5206\u56fe\u7684\u6027\u8d28\uff0c\u5982\u679c\u4e0d\u80fd\u7ef4\u6301\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u4e24\u4e2a\u7aef\u70b9\u5b58\u5728\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u4e00\u6761\u8fb9\uff0c\u56e0\u4e3a\u6211\u4eec\u63d0\u524d\u6392\u5e8f\u5c06\u8f83\u5927\u8fb9\u6392\u5728\u4e86\u524d\u9762\uff0c\u6240\u4ee5\u8fd9\u6761\u8fb9\u5c31\u662f\u6700\u5927\u7684\u51b2\u7a81\u8fb9\uff0c\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u4e5f\u662f\u7ecf\u5f97\u8d77ans=0\u7684\u8003\u9a8c\u7684\u3002\n\n#### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define N 20005\n#define M 100005\nusing namespace std;\n\nint n, m, co[N], bcj[N], dep[N];\nstruct EDGE {//\u5b58\u8fb9\n\tint a, b, len;\n\tvoid in() {\n\t\tscanf(\"%d%d%d\", &a, &b, &len);\n\t}\n\tbool operator< (const EDGE &o) const {\n\t\treturn len > o.len;//\u6392\u5e8f\u89c4\u5219\n\t}\n} edge[M];\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6811\nint head[N], to[N << 1], nxt[N << 1], cnt = 1;\n\n//\u5e76\u67e5\u96c6\u76f8\u5173\u64cd\u4f5c\uff08\u6700\u5927\u751f\u6210\u6811\u76f8\u5173\uff09\nint fa(int x) { return x == bcj[x] ? x : bcj[x] = fa(bcj[x]); }\nvoid un(int a, int b) {//\u6309\u79e9\u5408\u5e76\n\ta = fa(a); b = fa(b);\n\tif(dep[a] <= dep[b]) {\n\t\tbcj[a] = b;\n\t\tif(dep[a] == dep[b]) dep[b]++;\n\t} else bcj[b] = a;\n}\nbool isin(int a, int b) { return fa(a) == fa(b); }\n\n//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\uff08\u6811\u76f8\u5173\uff09\nvoid addedge(int u, int v) {\n\tto[cnt] = v;\n\tnxt[cnt] = head[u];\n\thead[u] = cnt++;\n}\n\n//\u8bfb\u5165\u4e0e\u521d\u59cb\u5316\nvoid init() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1;i <= n;i++) bcj[i] = i;\n\tfor(int i = 0;i < m;i++) edge[i].in();\n\tsort(edge, edge + m);\n}\n\nvoid dfs(int p, int fa, int col) {//\u6811\u4e0a\u67d3\u8272\n\tco[p] = col;\n\tfor(int i = head[p];i;i = nxt[i])\n\t\tif(to[i] != fa) dfs(to[i], p, -col);\n}\n\nint work() {\n\tint cnt = 1;\n\tfor(int i = 0;i < m && cnt != n;i++) {//\u5efa\u6700\u5927\u751f\u6210\u6811\n\t\tint a = edge[i].a, b = edge[i].b;\n\t\tif(!isin(a, b)) {\n\t\t\tun(a, b);\n\t\t\taddedge(a, b);\n\t\t\taddedge(b, a);\n\t\t\tcnt++;\n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i++)//\u6ce8\u610f\u56fe\u4e0d\u8fde\u901a\u7684\u60c5\u51b5\n\t\tif(!co[i]) dfs(i, 0, 1);\n\tfor(int i = 0;i < m;i++)//\u627e\u6700\u5927\u51b2\u7a81\u8fb9\n\t\tif(co[edge[i].a] == co[edge[i].b])//\u989c\u8272\u76f8\u540c\uff08\u540c\u4e00\u96c6\u5408\uff09\n\t\t\treturn edge[i].len;\n\treturn 0;//\u6ca1\u6709\u51b2\u7a81\u8fb9\n}\n\nint main() {\n\tinit();\n\tprintf(\"%d\", work());\n\treturn 0;\n}\n```\n\n#### \u540e\u8bb0\uff1a\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u4e8c\u5206\u56fe\uff0c\u6211\u7528 \u8d2a\u5fc3+\u6700\u5927\u751f\u6210\u6811+\u6811\u4e0a\u67d3\u8272 \u751f\u6210\u4e86\u6700\u4f18\u56fe\uff0c\u5bf9\u4e8e\u6211\u6ca1\u6709\u60f3\u5230\u7684\u5176\u4ed6 ~~\u795e\u4ed9~~ \u505a\u6cd5\u8868\u793a\u60ca\u8bb6\uff0c\u8fd8\u662f\u6211\u592a\u849f\u4e86QAQ\u3002",
        "postTime": 1571648808,
        "uid": 133236,
        "name": "saxiy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u4e2a\u9898\u8ddf\u56e2\u4f19\u90a3\u4e2a\u9898\u5f88\u50cf\u554a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3 \u8981\u628a\u6012\u6c14\u503c\u6700\u5927\u7684\u4e24\u4f4d\u5c3d\u53ef\u80fd\u5173\u5728\u4e24\u4e2a\u76d1\u72f1\u91cc,\u7136\u540e\u518d\u8003\u8651\u6b21\u5927\u7684,\u4f9d\u6b21\u7c7b\u63a8\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u6210 \u628a\u548ca\u6012\u6c14\u503c\u6700\u5927\u7684b b\u7684\u6012\u6c14\u503c\u6700\u5927\u7684c \u8981\u662fa\u548cc\u7684\u6012\u6c14\u503c\u5141\u8bb8\u7684\u8bdd \u5c31\u628aa\u548cc\u5173\u5728\u4e00\u8d77 \u6240\u8c13\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\u3002\n\n\u90a3\u6211\u4eec\u8981\u7ed9\u662f\u654c\u4eba\u7684\u4e24\u4e2a\u4eba\u505a\u4e2a\u6807\u8bb0 \u600e\u4e48\u505a\u5462 \u5c062\u500d\u7684n\u521d\u59cb\u5316\u3002\n\n\u8bbe\u7f6e2n\u4e2a\u6570\u7ec4 x\u548cx+n\u8868\u793a\u4e0d\u540c\u76d1\u72f1 y\u548cy+n\u8868\u793a\u4e0d\u540c\u76d1\u72f1 \n\n\u5728\u5408\u5e76\u524d\u770b\u770bx\u548cy,x+n\u548cy+n\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u91cc \u5728\u7684\u8bdd\u5f71\u54cd\u529b\u5c31\u662f\u6700\u5927\u4e86\u554a,\u5982\u679c\u4e0d\u662f\u5c31\u5408\u5e76x\u548cy+n\uff0cy\u548cx+n.\n\n\u5c31\u662f\u8fd9\u6837.\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cmath>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint f[100010],d[100010];\nint n,m; \n\nstruct dataa{\n\tint x,y;\n\tint sum;\n}a[200010];\n\nbool cmp(dataa x,dataa y){\n\treturn x.sum>y.sum;\n}\n\nint find(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n}\n\nvoid unionn(int x,int y){\n\tint x1,y1;\n\tx1=find(x),y1=find(y);\n\tif(x1!=y1) f[y1]=x1;\n}\n\nbool pd(int x,int y){\n\tif(find(x)==find(y)) return true;\n\treturn false;\n}\n\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n*2;i++) f[i]=i;\n\tfor(int i=1;i<=m;i++) cin>>a[i].x>>a[i].y>>a[i].sum;\n\tsort(a+1,a+m+1,cmp);\n\tfor(int i=1;i<=m;i++){\n\t\tint s=a[i].x,z=a[i].y;\n\t\tif(pd(s,z)||pd(s+n,z+n)) {\n\t\t\tcout<<a[i].sum;\n\t\t\treturn 0;\n\t\t}\n\t\tunionn(s,z+n);\n\t\tunionn(s+n,z);\n\t}\n\tcout<<0;\n} \n```\n",
        "postTime": 1533476070,
        "uid": 51395,
        "name": "7wwwwth",
        "ccfLevel": 4,
        "title": "\u4e00\u4e2a\u5e76\u67e5\u96c6\u548c\u53cd\u96c6\u7684\u601d\u60f3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u57fa\u672c\u601d\u8def\u662f\u5e76\u67e5\u96c6\uff0c\u5982\u679c\u5bf9\u5e76\u67e5\u96c6\u4e0d\u719f\u6089\uff0c\u5efa\u8bae\u5148\u53bb\u505aP3367\uff0cP1551\uff0cP1892\u3002\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u8981\u6211\u4eec\u8f93\u51fa\u7684\u662f\u2018\u5f71\u54cd\u529b\u6700\u5c0f\u7684\u4e8b\u4ef6\u2019\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u628a\u5f71\u54cd\u529b\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff08\u540c\u65f6\u6392\u5bf9\u5e94\u7684\u4eba\uff09\uff0c\u7136\u540e\u4e00\u4ef6\u4ef6\u5904\u7406\u3002\n\n\u5982\u679c\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8f93\u51fa\u5e76\u9000\u51fa\u7a0b\u5e8f\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n```cpp\nvar i,j,k,l,m,n:longint;\n    a,b,c,e,f:array[0..100001]of longint;\nprocedure sort(l,r:longint);//\u7ecf\u5178\u5feb\u6392\nvar i,j,t,v:longint;\n  begin\n    i:=l;\n    j:=r;\n    v:=c[(i+j)div 2];\n    while i<j do\n      begin\n        while c[i]>v do inc(i);\n        while c[j]<v do dec(j);\n        if i<=j then\n          begin\n            t:=a[i]; a[i]:=a[j]; a[j]:=t;//\u8bb0\u5f97\u628a\u4eba\u4e5f\u4e00\u8d77\u4ea4\u6362\n            t:=b[i]; b[i]:=b[j]; b[j]:=t;\n            t:=c[i]; c[i]:=c[j]; c[j]:=t;\n            inc(i); dec(j);\n          end;\n      end;\n    if l<j then sort(l,j);\n    if i<r then sort(i,r);\n  end;\nfunction gf(k:longint):longint;//\u5e76\u67e5\u96c6\u5fc5\u5907\uff1a\u67e5\u627e\u4e00\u4e2a\u9876\u70b9\u7684\u6839\u8282\u70b9\n  begin\n    if f[k]=k then exit(k);\n    f[k]:=gf(f[k]);//\u8fd9\u91cc\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\uff0c\u6e90\u4ee3\u7801\u662f\u2018exit(gf(f[k]));'\n    exit(f[k]);//\u73b0\u5728\u7528\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u628a\u5f53\u524d\u8282\u70b9\u7684f[k]\u76f4\u63a5\u8d4b\u503c\u4e3a\u5b83\u7684\u6839\u8282\u70b9\uff0c\u4f7f\u5f97\u4e4b\u540e\u7684\u67e5\u627e\u4e0d\u7528\u518d\u641c\u4e00\u904d\n  end;\nbegin\n  readln(n,m);\n  for i:=1 to n do f[i]:=i;\n  for i:=1 to m do readln(a[i],b[i],c[i]);\n  sort(1,m);\n  for i:=1 to m do\n    begin\n      if gf(a[i])=gf(b[i]) then begin writeln(c[i]); halt; end;//\u5982\u679c\u6ca1\u6cd5\u907f\u514d\u4e86\u5c31\u8f93\u51fa\n      if e[a[i]]=0 then e[a[i]]:=b[i] else f[gf(b[i])]:=gf(e[a[i]]);//\u654c\u4eba\u5904\u7406\uff0c\u76f8\u5e94\u7684\u601d\u8def\u5728P1892\u4e2d\u6709\u51fa\u73b0\uff0c\u5c31\u4e0d\u4ecb\u7ecd\u4e86\u3002\n      if e[b[i]]=0 then e[b[i]]:=a[i] else f[gf(a[i])]:=gf(e[b[i]]);\n      if i=m then writeln(0);//\u503c\u4e3a0\n    end;\nend.\n```",
        "postTime": 1510275170,
        "uid": 19484,
        "name": "ererer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u6211\u4eec\u7528 fa[i]=j\u8868\u793ai j\u5728\u4e00\u4e2a\u76d1\u72f1 f[i+n]=j\u8868\u793a i j\u4e0d\u5728\u4e00\u4e2a\u76d1\u72f1\n\n\n\u63a5\u7740\u8d2a\u5fc3\u6392\u5e8f\u5c31\u884c\u2193\n\n ```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nstruct A\n{\n    int x;\n    int y;\n    int boom;\n}a[100000+1];\nint fa[20000*2+1];\nint f(int x)\n{\n    if(fa[x]!=x) fa[x]=f(fa[x]);\n    return fa[x];\n}\nint n,m;\nbool cmp(const A a,const A b)\n{\n    return a.boom>b.boom;\n}\nint main()\n{\n    cin>>n>>m;\n    \n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].boom);\n    \n    for(int i=1;i<=2*n;i++) fa[i]=i;\n    \n    sort(a+1,a+m+1,cmp);\n    \n    for(int i=1;i<=m;i++)\n    {\n        int x=a[i].x, y=a[i].y;\n        if(f(x)==f(y))\n        {\n            cout<<a[i].boom;\n            return 0;\n        }\n        else\n        {\n            fa[f(x+n)]=f(y);\n            fa[f(y+n)]=f(x);\n        }\n    }\n    cout<<0;  // !!!!!  \u7279\u4f8b \u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u70b9 \n    return 0;\n}\n```",
        "postTime": 1439888599,
        "uid": 8137,
        "name": "sxb_201",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u849f\u84bb\u770b\u5230\u8fd9\u9898\u5176\u5b9e\u601d\u8003\u4e86\u4e00\u4e9b\u95ee\u9898\u624d\u5f00\u59cb\u7f16\u7a0b\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u95ee\u9898\u5e76\u4e14\u653e\u51fa\u4ee3\u7801\n\n## \u4e3a\u4ec0\u4e48\u8d2a\u5fc3\u662f\u6b63\u786e\u7684\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\u5927\u5bb6\u90fd\u4f1a\u60f3\u5230\u628a\u51b2\u7a81\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5927\u5230\u4e0b\u8fdb\u884c\u52a0\u8fb9\uff0c\u4e3a\u4ec0\u4e48\u4e4b\u540e\u52a0\u5165\u7684\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\uff08\u8fd9\u91cc\u552f\u4e00\u7684\u53d8\u6362\u65b9\u5f0f\u53ea\u6709\u5728\u4e24\u4e2a\u76d1\u72f1\u4e2d\u53d8\u6362\u3010\u8d77\u7801\u6211\u4e00\u5f00\u59cb\u662f\u8fd9\u4e48\u60f3\u7684\u3011\uff09\n\n\u4f46\u540e\u6765\u60f3\u5230\u5176\u5b9e\u4e0d\u7528\u8fdb\u884c\u53d8\u6362\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\u53eb\n**\u4ec7\u4eba\u7684\u4ec7\u4eba\u5c31\u662f\u670b\u53cb**\u540c\u65f6\uff0c\u53ea\u6709\u4e24\u5ea7\u76d1\u72f1\uff0c\u849f\u84bb\u7075\u5149\u4e00\u95ea\uff01\n\n\u8fd9\u6837\u95ee\u9898\u4e00\u4e0b\u5b50\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\uff0c\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684\u8fb9\uff0c\u8fdb\u884c\u67d0\u4e9b\u4ea6\u654c\u4ea6\u53cb\u7684\u64cd\u4f5c\u540e\u4e00\u5b9a\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u4e0a\u9762\u90a3\u4e2a\u95ee\u9898\u4e86\uff08\u8fd9\u4e2a\u95ee\u9898\u4f1a\u5728\u4e0b\u9762\u8be6\u7ec6\u8bf4\u5230\uff09\n\n## \u5982\u4f55\u5b9e\u73b0\n\u9664\u4e86\u4e00\u822c\u7684\u5e76\u8336\u51e0\u6570\u7ec4\uff0c\u8fd8\u6709\u7ef4\u62a4\u4e00\u4e2a\u4e1c\u897f\u53eb\u4ec7\u4eba\u6570\u7ec4\u7684\u4e1c\u897f\n\u8fd9\u4e2a\u4ec7\u4eba\u6570\u7ec4\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\n\n\u5bf9\u4e8e\u8fd8\u6ca1\u6709\u654c\u4eba\uff0c\u800c\u88ab\u5904\u7406\u5230\u7684\u7f6a\u72af\uff0c\u6211\u4eec\u66f4\u65b0\u4ec7\u4eba\u4e3a\u53e6\u4e00\u4e2a\u7f6a\u72af\n\n\u5bf9\u4e8e\u5df2\u7ecf\u6709\u654c\u4eba\u7684\u7f6a\u72af\uff0c\u76f4\u63a5\u628a\u548c\u4ed6\u6709\u51b2\u7a81\u7684\u7f6a\u72af\u548c\u4ec7\u4eba\u5408\u5e76\n\n~~\u6b63\u786e\u6027\u597d\u50cf\u5f88\u663e\u7136~~\n\n\u60f3\u5230\u8fd9\u4e9b\uff0c\u8fd9\u9053\u9898\u76ee\u5c31\u5df2\u7ecf\u89e3\u51b3\u4e86\n\n## \u4ee3\u7801\n\u4e00\u70b9\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5b8c\u7f8e\u60c5\u51b5\u8981\u8f93\u51fa0\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=100005;\n\nstruct edge{\n\tint u,v,w;\n}e[maxn];\nint fa[maxn<<1],dr[maxn<<1];\nint n,m;\n\nbool cmp(edge x,edge y){\n\treturn x.w>y.w;\n}\n\ninline int read(){\n\tint f=1,x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\n\ninline int find(int x){\n\tif(fa[x]==x)return x;\n\tfa[x]=find(fa[x]);\n\treturn fa[x];\n}\n\nbool judge(int x,int y){\n\tif(find(x)==find(y))return 1;\n\telse return 0;\n}\n\ninline void merge(int x,int y){\n\tfa[find(x)]=find\uff08y);\n}\n\nint main(){\n\tmemset(dr,0,sizeof(dr));\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tfa[i]=i;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\te[i].u=read(),e[i].v=read(),e[i].w=read();\n\t}\n\tint tag=0;\n\tsort(e+1,e+m+1,cmp\uff09;\n\tfor(int i=1;i<=m;i++){\n\t\tif(judge(e[i].u,e[i].v)){\n\t\t\tcout<<e[i].w;\n\t\t\ttag=1;\n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\tif(!dr[e[i].u]){\n\t\t\t\tdr[e[i].u]=e[i].v;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmerge\uff08dr[e[i].u],e[i].v);\n\t\t\t}\n\t\t\tif(!dr[e[i].v]){\n\t\t\t\tdr[e[i].v]=e[i].u;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmerge\uff08dr[e[i].v],e[i].u);\n\t\t\t}\n\t\t}\n\t}\n\tif(!tag)cout<<\"0\";\n\treturn 0;\n}\n```\n\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u82e5\u5e72\u4e2d\u6587\u62ec\u53f7\uff0c\u76f4\u63a5\u590d\u5236\u5c06\u4f1ace\uff1b",
        "postTime": 1570798980,
        "uid": 85799,
        "name": "wyqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "# \u5173\u62bc\u7f6a\u72af\uff1a\n\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u975e\u5e38\u7ecf\u5178\u76842-SAT\u9898\u76ee\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\u5462\uff0c\u542c\u6211\u6162\u6162\u5206\u6790\u9053\u6765\uff1a\n\u5982\u679c\u4f60\u505a\u8fc7\u201c\u5c0f\u51f8\u73a9\u77e9\u9635\u201d\u548c\u201c2-SAT\u95ee\u9898\u201d\uff0c\u8fd9\u4e24\u9053\u9898\u76ee\u540e\uff0c\u4f60\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3\u8fd9\u9053\u9898\u76ee\u4e86\u3002\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5f53\u7136\u662fO\uff08\u80fd\u8fc7\uff09\u3002\n### \u9898\u76ee\u63cf\u8ff0\nS S\u57ce\u73b0\u6709\u4e24\u5ea7\u76d1\u72f1\uff0c\u4e00\u5171\u5173\u62bc\u7740N N\u540d\u7f6a\u72af\uff0c\u7f16\u53f7\u5206\u522b\u4e3a1-N1\u2212N\u3002\u4ed6\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u81ea\u7136\u4e5f\u6781\u4e0d\u548c\u8c10\u3002\u5f88\u591a\u7f6a\u72af\u4e4b\u95f4\u751a\u81f3\u79ef\u6028\u5df2\u4e45\uff0c\u5982\u679c\u5ba2\u89c2\u6761\u4ef6\u5177\u5907\u5219\u968f\u65f6\u53ef\u80fd\u7206\u53d1\u51b2\u7a81\u3002\u6211\u4eec\u7528\u201c\u6028\u6c14\u503c\u201d\uff08\u4e00\u4e2a\u6b63\u6574\u6570\u503c\uff09\u6765\u8868\u793a\u67d0\u4e24\u540d\u7f6a\u72af\u4e4b\u95f4\u7684\u4ec7\u6068\u7a0b\u5ea6\uff0c\u6028\u6c14\u503c\u8d8a\u5927\uff0c\u5219\u8fd9\u4e24\u540d\u7f6a\u72af\u4e4b\u95f4\u7684\u79ef\u6028\u8d8a\u591a\u3002\u5982\u679c\u4e24\u540d\u6028\u6c14\u503c\u4e3acc \u7684\u7f6a\u72af\u88ab\u5173\u62bc\u5728\u540c\u4e00\u76d1\u72f1\uff0c\u4ed6\u4eec\u4fe9\u4e4b\u95f4\u4f1a\u53d1\u751f\u6469\u64e6\uff0c\u5e76\u9020\u6210\u5f71\u54cd\u529b\u4e3ac c\u7684\u51b2\u7a81\u4e8b\u4ef6\u3002\n\n\u6bcf\u5e74\u5e74\u672b\uff0c\u8b66\u5bdf\u5c40\u4f1a\u5c06\u672c\u5e74\u5185\u76d1\u72f1\u4e2d\u7684\u6240\u6709\u51b2\u7a81\u4e8b\u4ef6\u6309\u5f71\u54cd\u529b\u4ece\u5927\u5230\u5c0f\u6392\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u7136\u540e\u4e0a\u62a5\u5230S \u57ceZ \u5e02\u957f\u90a3\u91cc\u3002\u516c\u52a1\u7e41\u5fd9\u7684Z \u5e02\u957f\u53ea\u4f1a\u53bb\u770b\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4e8b\u4ef6\u7684\u5f71\u54cd\u529b\uff0c\u5982\u679c\u5f71\u54cd\u5f88\u574f\uff0c\u4ed6\u5c31\u4f1a\u8003\u8651\u64a4\u6362\u8b66\u5bdf\u5c40\u957f\u3002\n\n\u5728\u8be6\u7ec6\u8003\u5bdf\u4e86NN \u540d\u7f6a\u72af\u95f4\u7684\u77db\u76fe\u5173\u7cfb\u540e\uff0c\u8b66\u5bdf\u5c40\u957f\u89c9\u5f97\u538b\u529b\u5de8\u5927\u3002\u4ed6\u51c6\u5907\u5c06\u7f6a\u72af\u4eec\u5728\u4e24\u5ea7\u76d1\u72f1\u5185\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u6c42\u4ea7\u751f\u7684\u51b2\u7a81\u4e8b\u4ef6\u5f71\u54cd\u529b\u90fd\u8f83\u5c0f\uff0c\u4ece\u800c\u4fdd\u4f4f\u81ea\u5df1\u7684\u4e4c\u7eb1\u5e3d\u3002\u5047\u8bbe\u53ea\u8981\u5904\u4e8e\u540c\u4e00\u76d1\u72f1\u5185\u7684\u67d0\u4e24\u4e2a\u7f6a\u72af\u95f4\u6709\u4ec7\u6068\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u5728\u6bcf\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\u53d1\u751f\u6469\u64e6\u3002\n\n\u90a3\u4e48\uff0c\u5e94\u5982\u4f55\u5206\u914d\u7f6a\u72af\uff0c\u624d\u80fd\u4f7fZ \u5e02\u957f\u770b\u5230\u7684\u90a3\u4e2a\u51b2\u7a81\u4e8b\u4ef6\u7684\u5f71\u54cd\u529b\u6700\u5c0f\uff1f\u8fd9\u4e2a\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f\n\n### \u8f93\u5165\u683c\u5f0f\n\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570N,MN,M\uff0c\u5206\u522b\u8868\u793a\u7f6a\u72af\u7684\u6570\u76ee\u4ee5\u53ca\u5b58\u5728\u4ec7\u6068\u7684\u7f6a\u72af\u5bf9\u6570\u3002\u63a5\u4e0b\u6765\u7684MM\u884c\u6bcf\u884c\u4e3a\u4e09\u4e2a\u6b63\u6574\u6570a_j,b_j,c_ja \nj\n\u200b\t ,b \nj\n\u200b\t ,c \nj\n\u200b\t \uff0c\u8868\u793aa_ja \nj\n\u200b\t  \u53f7\u548cb_j b \nj\n\u200b\t \u53f7\u7f6a\u72af\u4e4b\u95f4\u5b58\u5728\u4ec7\u6068\uff0c\u5176\u6028\u6c14\u503c\u4e3ac_jc \nj\n\u200b\t \u3002\u6570\u636e\u4fdd\u8bc11<aj\u2264bj\u2264N ,0 < cj\u2264 1,000,000,0001<aj\u2264bj\u2264N,0<cj\u22641,000,000,000\uff0c\u4e14\u6bcf\u5bf9\u7f6a\u72af\u7ec4\u5408\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\u51711 \u884c\uff0c\u4e3aZ \u5e02\u957f\u770b\u5230\u7684\u90a3\u4e2a\u51b2\u7a81\u4e8b\u4ef6\u7684\u5f71\u54cd\u529b\u3002\u5982\u679c\u672c\u5e74\u5185\u76d1\u72f1\u4e2d\u672a\u53d1\u751f\u4efb\u4f55\u51b2\u7a81\u4e8b\u4ef6\uff0c\u8bf7\u8f93\u51fa0\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u5373\u5148\u6309\u6028\u6c14\u503c\u6392\u4e00\u4e0b\u5e8f\uff0c\u7136\u540e\u5bf9\u6700\u5927\u6028\u6c14\u503c\u8fdb\u884c\u4e8c\u5206\uff0c\n\u8fd9\u91cc\u6700\u5927\u6028\u6c14\u503c\u6307\u7684\u662f\u6700\u7ec8\u7b54\u6848\uff0c\u5982\u679c\u5f53\u524d\u6028\u6c14\u503c\u53ef\u4ee5\u6ee1\u8db3\u9898\u610f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba9r=mid\uff1b\n\n\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u63d0\u610f\uff0c\u8bf4\u660e\u6211\u4eec\u5bf9\u7b54\u6848\u7684\u8981\u6c42\u592a\u82db\u523b\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u8ba9l=mid+1\uff1b\n\u76f4\u5230l=r\u4e3a\u6b62\n\n\u4e8c\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n\twhile(l<r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tr=mid;\n\t\t}\n\t\telse\n\t\tl=mid+1;\n\t}\n```\n\u63a5\u4e0b\u6765\u5c31\u662fcheck\u51fd\u6570\u7684\u8fc7\u7a0b\u4e86\u3002\n\n\u7531\u4e8e\u6211\u4eec\u679a\u4e3e\u7684\u662f\u6700\u5927\u7684\u6028\u6c14\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6028\u6c14\u503c\u5927\u4e8e\u6211\u4eec\u679a\u4e3e\u7684\u6028\u6c14\u503c\u7684\u4e00\u5bf9\u7f6a\u72af\uff0c\u4ed6\u4eec\u80af\u5b9a\u662f\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u4e2d\uff0c\u5426\u5219\u6211\u4eec\u7684\u679a\u4e3e\u5c31\u662f\u5931\u8d25\u7684\u3002\n\n\u6211\u4eec\u7ecf\u8fc7\u4ed4\u7ec6\u8bfb\u9898\u540e\u53d1\u73b0\uff1a\u6bcf\u4e2a\u7f6a\u72af\u8981\u4e48\u662f\u9009\u62e9\u76d1\u72f11\uff0c\u8981\u4e48\u662f\u9009\u62e9\u76d1\u72f12\u3002\n\u4e8e\u662f\u5c31\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e862-SAT\u3002\n\n### \u9650\u5236\u6761\u4ef6\u662f\u4ec0\u4e48\u5462\uff1f\n\u6211\u4eec\u4e0d\u662f\u679a\u4e3e\u4e86\u6700\u5927\u6028\u6c14\u503c\u5417\uff08\u5047\u5b9a\u8fd9\u4e2a\u6700\u5927\u6028\u6c14\u503c\u662fX\uff09\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6709A\u548cB\u7684\u6028\u6c14\u503c\u5927\u4e8eX\u3002\u90a3\u4e48\uff1a\n#### 1.\u5982\u679cA\u9009\u62e9\u4e86\u76d1\u72f11\uff0cB\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f12\u3002\n#### 2.\u5982\u679cA\u9009\u62e9\u4e86\u76d1\u72f12\uff0cB\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f11\u3002\n#### 3.\u5982\u679cB\u9009\u62e9\u4e86\u76d1\u72f11\uff0cA\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f12\u3002\n#### 4.\u5982\u679cB\u9009\u62e9\u4e86\u76d1\u72f12\uff0cA\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f11\u3002\n\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5efa\u56db\u6761\u8fb9\u3002\n```cpp\n\t\tint s1=a[i].x;\n\t\tint s2=a[i].y;\n\t\tadd(s1,s2+n);\n\t\tadd(s2,s1+n);\n\t\tadd(s2+n,s1);\n\t\tadd(s1+n,s2);\n```\n\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u7531\u4e8e\u6211\u4eec\u679a\u4e3e\u4e86\u6700\u5927\u6028\u6c14\u503c\u3002\u90a3\u4e48\u5bf9\u4e8eA\uff0cB\u7684\u6028\u6c14\u503c\u4e3a\u8be5\u503c\u7684\u70b9\u3002\u6211\u4eec\u77e5\u9053\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u6028\u6c14\u503c\uff0c\u56e0\u6b64A\uff0cB\u4e00\u5b9a\u8981\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\n\u5373\uff1a\n#### 1.\u5982\u679cA\u9009\u62e9\u4e86\u76d1\u72f11\uff0cB\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f11\u3002\n#### 2.\u5982\u679cA\u9009\u62e9\u4e86\u76d1\u72f12\uff0cB\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f12\u3002\n#### 1.\u5982\u679cB\u9009\u62e9\u4e86\u76d1\u72f11\uff0cA\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f11\u3002\n#### 2.\u5982\u679cB\u9009\u62e9\u4e86\u76d1\u72f12\uff0cA\u5c31\u53ea\u80fd\u9009\u62e9\u76d1\u72f12\u3002\n```cpp\n\tadd(p1,p2);\n\tadd(p2,p1);\n\tadd(p1+n,p2+n);\n\tadd(p2+n,p1+n);\n```\n\u90a32-SAT\u7684\u6a21\u578b\u5c31\u5f88\u660e\u663e\u4e86\uff08\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a2-SAT\u7684\u8bdd\uff0c\u5efa\u8bae\u81ea\u5b66\u4e00\u4e0b\uff09\n\n\u6211\u4eec\u5efa\u5b8c\u8fb9\u540e\u8dd1\u4e00\u4e2atarjan\uff0c\u6807\u8bb0\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u7136\u540e\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u70b9\u7684\u4e24\u4e2a\u76d1\u72f1\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8bf4\u660e\u65e0\u89e3\u3002\n\u53cd\u4e4b\u5fc5\u6709\u89e3\u3002\n\n\u6574\u4e2acheck\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nbool check(int now)\n{\n\tp=0;\n\tmemset(low,0,sizeof(low));\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(stack,0,sizeof(stack));\n\tmemset(vis,0,sizeof(vis));\n\tmemset(head,0,sizeof(head));\n\tmemset(col,0,sizeof(col));\n    //\u6bcf\u8fdb\u884c\u5b8c\u4e00\u6b21tarjan\uff0c\u6240\u6709\u7684\u503c\u90fd\u8981\u6e05\u96f6\u3002\n\tsum=0;\n\tcolor=0;\n\tint p1=a[now].x;\n\tint p2=a[now].y;\n\tadd(p1,p2);\n\tadd(p2,p1);\n\tadd(p1+n,p2+n);\n\tadd(p2+n,p1+n);\n\tfor(int i=now+1;i<=m;i++)\n\t{\n\t\tint s1=a[i].x;\n\t\tint s2=a[i].y;\n\t\tadd(s1,s2+n);\n\t\tadd(s2,s1+n);\n\t\tadd(s2+n,s1);\n\t\tadd(s1+n,s2);\n\t}//\u7531\u4e8e\u4e4b\u524d\u6392\u8fc7\u5e8f\uff0c\u56e0\u6b64\u5728now\u53ea\u540e\u7684\u6028\u6c14\u503c\u80af\u5b9a\u90fd\u66f4\u5927\n\tint flag=0;\n\tfor(int i=1;i<=2*n;i++)\n\t{\n\t\tif(dfn[i]==0)\n\t\ttarjan(i);\n\t}//\u6807\u51c6tarjan\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(col[i]==col[i+n])\n\t\t{\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t}//\u5224\u65ad\u8fc7\u7a0b\u3002\n\tif(flag==0)\n\treturn true;\n\telse\n\treturn false;\n}\n```\ntarjan\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++sum1;\n\tvis[x]=1;\n\tstack[++sum]=x;\n\tfor(int i=head[x];i;i=b[i].next)\n\t{\n\t\tint t=b[i].to;\n\t\tif(dfn[t]==0)\n\t\t{\n\t\t\ttarjan(t);\n\t\t\tlow[x]=min(low[x],low[t]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(vis[t]==1)\n\t\t\t{\n\t\t\t\tlow[x]=min(low[x],dfn[t]);\n\t\t\t}\n\t\t}\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tcolor++;\n\t\tint v;\n\t\tdo\n\t\t{\n\t\t\tv=stack[sum];\n\t\t\tsum--;\n\t\t\tcol[v]=color;\n\t\t\tvis[v]=0;\n\t\t}\n\t\twhile(x!=v);\n\t}\n}\n```\n\u6574\u4f53AC\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct vode\n{\n\tint x;\n\tint y;\n\tint wns;\n}a[200050];\nbool cmp(vode x,vode y)\n{\n\treturn x.wns<y.wns;\n}\nint p=0;\nstruct vode1\n{\n\tint to;\n\tint next;\n}b[800005];\nint head[200005];\nint vis[200005];\nint stack[200005];\nint low[200005];\nint dfn[200005];\nint sum=0;\nint color=0;\nint n,m;\nint col[200005];\nvoid add(int x,int y)\n{\n\tp++;\n\tb[p].to=y;\n\tb[p].next=head[x];\n\thead[x]=p;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nint sum1=0;\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++sum1;\n\tvis[x]=1;\n\tstack[++sum]=x;\n\tfor(int i=head[x];i;i=b[i].next)\n\t{\n\t\tint t=b[i].to;\n\t\tif(dfn[t]==0)\n\t\t{\n\t\t\ttarjan(t);\n\t\t\tlow[x]=min(low[x],low[t]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(vis[t]==1)\n\t\t\t{\n\t\t\t\tlow[x]=min(low[x],dfn[t]);\n\t\t\t}\n\t\t}\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\tcolor++;\n\t\tint v;\n\t\tdo\n\t\t{\n\t\t\tv=stack[sum];\n\t\t\tsum--;\n\t\t\tcol[v]=color;\n\t\t\tvis[v]=0;\n\t\t}\n\t\twhile(x!=v);\n\t}\n}\nbool check(int now)\n{\n\tp=0;\n\tmemset(low,0,sizeof(low));\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(stack,0,sizeof(stack));\n\tmemset(vis,0,sizeof(vis));\n\tmemset(head,0,sizeof(head));\n\tmemset(col,0,sizeof(col));\n    //\u6bcf\u8fdb\u884c\u5b8c\u4e00\u6b21tarjan\uff0c\u6240\u6709\u7684\u503c\u90fd\u8981\u6e05\u96f6\u3002\n\tsum=0;\n\tcolor=0;\n\tint p1=a[now].x;\n\tint p2=a[now].y;\n\tadd(p1,p2);\n\tadd(p2,p1);\n\tadd(p1+n,p2+n);\n\tadd(p2+n,p1+n);\n\tfor(int i=now+1;i<=m;i++)\n\t{\n\t\tint s1=a[i].x;\n\t\tint s2=a[i].y;\n\t\tadd(s1,s2+n);\n\t\tadd(s2,s1+n);\n\t\tadd(s2+n,s1);\n\t\tadd(s1+n,s2);\n\t}//\u7531\u4e8e\u4e4b\u524d\u6392\u8fc7\u5e8f\uff0c\u56e0\u6b64\u5728now\u53ea\u540e\u7684\u6028\u6c14\u503c\u80af\u5b9a\u90fd\u66f4\u5927\n\tint flag=0;\n\tfor(int i=1;i<=2*n;i++)\n\t{\n\t\tif(dfn[i]==0)\n\t\ttarjan(i);\n\t}//\u6807\u51c6tarjan\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(col[i]==col[i+n])\n\t\t{\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t}//\u5224\u65ad\u8fc7\u7a0b\u3002\n\tif(flag==0)\n\treturn true;\n\telse\n\treturn false;\n}\nint main()\n{\n\tcin>>n>>m;\n\tif(n==2)\n\t{\n\t\tcout<<\"0\"<<endl;\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>a[i].x>>a[i].y>>a[i].wns;\n\t}\n\tsort(a+1,a+1+m,cmp);\n\tint l=1;\n\tint r=m;\n\twhile(l<r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tr=mid;\n\t\t}\n\t\telse\n\t\tl=mid+1;\n\t}//\u4e8c\u5206\u7b54\u6848\n\tcout<<a[l].wns<<endl;\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1565878524,
        "uid": 114514,
        "name": "zzr8178541919",
        "ccfLevel": 7,
        "title": "P1525 \u5173\u62bc\u7f6a\u72af"
    },
    {
        "content": "### \u8bf4\u4e00\u4e0b\u6211\u5bf9\u4e8e\u79cd\u7c7b\u5e76\u67e5\u96c6\u7684\u7406\u89e3\u5427~~\u697c\u4e0b\u7684dalaoAC\u4ee3\u7801\u591f\u591a\u4e86~~\n\n\u6211\u662f\u57fa\u4e8e\u8fd9\u4f4ddalao[\u9898\u89e3](https://www.luogu.org/blog/812-xiao-wen/solution-p1525)\u5c24\u5176\u662f\u8fd9\u4e24\u6bb5\u8bdd\u7684\u89e3\u91ca\n\n_\u5047\u8bbe\u73b0\u5728\u8981\u628a\u4e24\u4e2a\u6709\u4ec7\u7684\u7f6a\u72af\u5206\u522b\u653e\u5230 A \u6216 B \u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u8981\u6ee1\u8db3\u8fd9\u4e00\u5bf9\u7684\u8981\u6c42\uff08\u5373\u5206\u5230\u7684\u76d1\u72f1\u4e0d\u540c\uff09\uff0c\u90a3\u4e48\u5982\u679c\u7b2c\u4e00\u4e2a\u7f6a\u72af\u5728 A \u76d1\u72f1\uff0c\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u5fc5\u987b\u5728 B \u76d1\u72f1\uff0c\u53cd\u4e4b\u4e5f\u4e00\u6837\u3002_\n\n_\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 A \u76d1\u72f1\u4e2d\u7b2c\u4e00\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u4e0e B \u76d1\u72f1\u4e2d\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5373\u8fd9\u6837\u5408\u5e76\u624d\u80fd\u4fdd\u8bc1\u5206\u5230\u7684\u76d1\u72f1\u4e0d\u4e00\u6837\u3002\u4f46\u7b2c\u4e00\u4e2a\u7f6a\u72af\u4e0d\u4e00\u5b9a\u53ea\u80fd\u5728 A \u76d1\u72f1\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 B \u76d1\u72f1\u4e2d\u7b2c\u4e00\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u4e0e A \u76d1\u72f1\u4e2d\u7b2c\u4e8c\u4e2a\u7f6a\u72af\u7684\u4f4d\u7f6e\u7ef4\u62a4\u3002_\n\n\u5e76\u7ed3\u5408\u300a\u6311\u6218\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u300b\u8fd9\u672c\u4e66\u5173\u4e8e\u5bf9[\u98df\u7269\u94fe](https://www.luogu.org/problem/P2024)\u8fd9\u9053\u7ecf\u5178\u5e76\u67e5\u96c6\u7684\u9898\u6cd5\u63a8\u6b64\u53ca\u5f7c\u800c\u6765\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7f6a\u72af $i$ \u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u5143\u7d20 $i-A$ \u548c $i-B$ \u5206\u522b\u5bf9\u5e94\u4e8e\u5bf9\u5e94 $father[i]$ \u548c $father[i+n]$\uff08\u8d77\u59cb\u65f6\u6bcf\u4e2a\u8282\u70b9$father[i]==i$\uff09\n\n\u5bf9\u4e8e\u4e24\u4e2a\u76d1\u72f1\u6211\u4eec\u9700\u8981\u7528\u4e24\u4e2a\u96c6\u5408 $A$ \u548c $B$ \uff0c**\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u8868\u793a\u96c6\u5408\u91cc\u7684\u60c5\u51b5\u540c\u65f6\u53d1\u751f\u6216\u8005\u4e0d\u53d1\u751f** ~~\uff08\u5176\u5b9e\u53ea\u8981\u770b\u540c\u65f6\u53d1\u751f\u5c31\u884c\u4e86\u4e24\u8005\u662f\u4e00\u6837\u7684\uff09~~\n\n\u6bd4\u5982\u53e6\u6709\u4e00\u7f6a\u72af $j$ \uff0c\u96c6\u5408A\u4e2d\u6709 $i-A$ \u548c $j-B$\uff0c\u96c6\u5408B\u4e2d\u6709 $i-B$ \u548c $j-A$ \n\n\u5b83\u8868\u793a $i$ \u5173\u5728 $A$ \u76d1\u72f1\u4e2d\u548c $j$ \u5173\u5728 $B$ \u76d1\u72f1\u4e2d\u662f\u540c\u65f6\u53d1\u751f\u7684\uff1b$i$ \u5173\u5728 $B$ \u76d1\u72f1\u4e2d\u548c $j$ \u5173\u5728 $A$ \u76d1\u72f1\u4e2d\u662f\u540c\u65f6\u53d1\u751f\u7684 ~~\uff08\u4f60\u770b\u5c31\u53ea\u8981\u770b\u540c\u65f6\u53d1\u751f\u5c31\u884c\u4e86\u770b\u4e0d\u540c\u65f6\u53d1\u751f\u8fd8\u9700\u8981\u5012\u4e00\u4e0b~~\n\n\u81f3\u6b64\u4f60\u5e94\u8be5\u660e\u767d\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528\u4e24\u4e2a\u96c6\u5408\u6765\u8868\u793a\uff0c\u56e0\u4e3a\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u53ef\u80fd\u540c\u65f6\u5b58\u5728\uff0c\u4f60\u4e0d\u80fd\u53ea\u5f00\u4e00\u500d $father[]$ \u6570\u7ec4\u6765\u5ffd\u7565\u53e6\u4e00\u79cd\u60c5\u51b5\n\n\u56e0\u6b64\u6211\u4eec\u5bf9\u4e8e\u5df2\u7ecf\u6309\u9006\u5e8f\u6392\u5217\u8fc7\u7684\u7684\u6bcf\u5bf9$i$ \uff0c$j$\u8fde\u8fb9\uff1a$i-A$ \u548c $j-B$\u5408\u5e76\uff0c$i-B$ \u548c $j-A$ \u5408\u5e76\uff0c\u8868\u793a $i$\uff0c$j$ \u5206\u5f00\u5f85\uff1b\u5f53\u7136\u5728\u6bcf\u6b21\u5408\u5e76\u524d\u5148\u5224\u65ad\uff1a\u5982\u679c $i-A$ \u548c $j-A$ \u6216\u8005 $i-B$ \u548c $j-B$ \u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408\uff0c\u8bf4\u660e\u4e24\u8005\u5df2\u7ecf\u5728\u540c\u4e00\u76d1\u72f1\uff0c\u8f93\u51fa\u7b54\u6848\u5373\u53ef",
        "postTime": 1564996987,
        "uid": 78368,
        "name": "Cutelemon6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u5199\u63d0\u9ad8\u5386\u7ec3\u5730\u7684\u9898\u89e3^_^\n\n---\n\n[P1525\u539f\u9898\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1525)\n\n\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u7ecf\u5178\u7684**\u5e76\u67e5\u96c6**\u9898\u76ee\u3002\n\n\u601d\u8def\uff1a\u5148\u6309\u7167\u6028\u6c14\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\n\n\u7136\u540e\u5c06\u6028\u6c14\u503c\u6700\u5927\u7684\u653e\u5230\u4e0d\u540c\u76d1\u72f1\u91cc\uff0c\u6700\u540e\u78b0\u5230\n\n\u8fd9\u4e2a\u5e76\u67e5\u96c6\u6709\u4e00\u70b9\u53d8\u5316\uff0c\u5c31\u662f\u8981\u5408\u5e76\u53cd\u96c6\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n```cpp\n\u82e5a\u4e0eb\u76f8\u53cd\uff0cb\u4e0ec\u76f8\u53cd\uff0c\n\u5219a\u4e0ec\u5c31\u5728\u4e00\u8d77\u3002\n```\n\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u5c06\u5e76\u67e5\u96c6\u5f00\u52302\u500d\uff0c\u7528a+n\u8868\u793aa\u7684\u53cd\u9762\uff0c\u5c06b\u4e0ea+n\u5408\u5e76\uff0ca\u4e0eb+n\u5408\u5e76\u3002\n\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u53ef\u884c\u7684\u3002\n\n\u53c2\u8003\u9898\u76ee\uff1a\n\n[P1892 [BOI2003]\u56e2\u4f19](https://www.luogu.org/problemnew/show/P1892)\n\n[P2024 [NOI2001]\u98df\u7269\u94fe](https://www.luogu.org/problemnew/show/P2024)\n\n---\n\u4e0b\u9762\u5206\u6b65\u5c55\u793aAC \u4ee3\u7801(\u6ce8\u91ca\u5728\u4ee3\u7801\u4e2d)\uff1a\n\n1.\u5e76\u67e5\u96c6\uff1a\u6211\u624b\u5199\u4e86\u4e00\u4e2a\u6a21\u677f~,\u521d\u59cb\u5316\u5728\u6a21\u677f\u4e2d\u81ea\u5e26\u3002\n```cpp\nconst int wlxsq=2e4+6;\ntemplate<int SIZE>\nclass Union{\n    private:\n\t\tint fa[SIZE];\n    public:\n        void clear(){for(int i=0;i<SIZE;i++)fa[i]=i;}\n        Union(){clear();}\n        int getf(int x){return x==fa[x]?x:fa[x]=getf(fa[x]);}\n        inline void merge(int x,int y){fa[getf(x)]=getf(y);}\n        inline bool check(int x,int y){return getf(x)==getf(y);}\n};\nUnion< wlxsq<<1 >un;//\u5e76\u67e5\u96c6\u5fc5\u987b\u5f00\u52302\u500d\n```\n2.\u5b9a\u4e49\u56da\u72af\u5173\u7cfb\u7684\u7ed3\u6784\u4f53\u3002\n```cpp\nint n,m;//n\u540d\u56da\u72af\uff0cm\u5bf9\u5173\u7cfb\nstruct node{\n\tint u,v,w;//\u8868\u793au,v\u4e24\u4e2a\u72af\u4eba\u4e4b\u95f4\u6028\u6c14\u503c\u4e3aw\n\tbool operator <(const node &q)const{return w>q.w;}\n\t\t//\u6309\u6028\u6c14\u503c\u5347\u5e8f\u6392\u5e8f\n}e[wlxsq<<3];\n```\n3.\u4e3b\u51fd\u6570\u4e2d\u7684\u5904\u7406\u90e8\u5206(\u8f93\u5165\u5c31\u4e0d\u8bf4\u4e86),\u6ce8\u610f\u5fc5\u987b\u5148\u6392\u5e8f\u3002\n```cpp\nsort(e+1,e+m+1);\nfor(int i=1;i<=m;i++)\n{\n\tif(un.check(e[i].u,e[i].v))\n\t\treturn printf(\"%d\",e[i].w),0;\n\t\t//\u4e24\u4e2a\u72af\u4eba\u5728\u4e00\u8d77\uff0c\u5fc5\u7136\u4f1a\u51b2\u7a81\uff0c\u8f93\u51fa\u5e76\u7ed3\u675f\n\tun.merge(e[i].u,e[i].v+n);//u\u4e0ev\u7684\u53cd\u9762\u5408\u5e76\n\tun.merge(e[i].v,e[i].u+n);//v\u4e0eu\u7684\u53cd\u9762\u5408\u5e76\n}\nputs(\"0\");//\u6ca1\u6709\u51b2\u7a81\u8f93\u51fa0 \n```\n---\n\u6700\u540e\u662f\u5b8c\u6574 **AC \u4ee3\u7801**(\u53bb\u6ce8\u91ca)\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    char c=getchar();int x=0;bool f=0;\n    while(!isdigit(c))f^=!(c^45),c=getchar();\n    while(isdigit(c))x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f)x=-x;return x;\n}\nconst int wlxsq=2e4+6;\ntemplate<int SIZE>\nclass Union{\n    private:\n\t\tint fa[SIZE];\n    public:\n        void clear(){for(int i=0;i<SIZE;i++)fa[i]=i;}\n        Union(){clear();}\n        int getf(int x){return x==fa[x]?x:fa[x]=getf(fa[x]);}\n        inline void merge(int x,int y){fa[getf(x)]=getf(y);}\n        inline bool check(int x,int y){return getf(x)==getf(y);}\n};\nUnion< wlxsq<<1 >un;\nint n,m;\nstruct node{\n\tint u,v,w;\n\tbool operator <(const node &q)const{return w>q.w;}\n}e[wlxsq<<3];\nint main()\n{\n\tn=read(),m=read();\n    for(int i=1;i<=m;i++)\n    \te[i].u=read(),e[i].v=read(),e[i].w=read();\n    sort(e+1,e+m+1);\n    for(int i=1;i<=m;i++)\n    {\n    \tif(un.check(e[i].u,e[i].v))\n    \t\treturn printf(\"%d\",e[i].w),0;\n    \tun.merge(e[i].u,e[i].v+n);\n    \tun.merge(e[i].v,e[i].u+n);\n\t}\n\tputs(\"0\")\n    return 0;\n}\n```",
        "postTime": 1555212585,
        "uid": 151935,
        "name": "Rainbow_qwq",
        "ccfLevel": 0,
        "title": "P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011(\u5e76\u67e5\u96c6)"
    },
    {
        "content": "\u8fd9\u53c8\u662f\u4e00\u9053\u5751\u9898\uff01\n\n\n\u601d\u60f3\u8fdb\u884c\u4e86\u5927\u5e45\u8f6c\u53d8\uff0c\u5e76\u67e5\u96c6\u70b8\u4e86\u4e4b\u540e\u7ec8\u4e8e\u641e\u51fa\u4e86\u4e00\u79cd\u5947\u8469\u7684\u7b97\u6cd5\uff0c\u7ec8\u4e8e\u5361\u65f6\u95f4A\u4e86\u3002\n\n\n\u628a\u601d\u8def\u6309\u987a\u5e8f\u7406\u4e00\u7406\u3002\n\n\n\u5148\u628a\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u4e00\u4e0b\u3002\n\n\n<1> \u770b\u5b8c\u9898\u76ee\uff0c\u6211\u53bb\u8fd9\u4e0d\u662f\u5e76\u67e5\u96c6\u6a21\u677f\u4e48\u5417\uff0c\u9a6c\u4e0a\u6572\u4e86\u4e2a\u88f8\u5e76\u67e5\u96c6\uff0c\u5224\u65ad\u4e24\u4e2a\u70b9\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u8054\u901a\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\u8f93\u51fa\u5f53\u524d\u503c\u5373\u53ef\u3002\n\n\nCODE\uff08WA\uff09\n\n```cpp\n    #include<cstdio>\n    #include<algorithm>\n    using namespace std;\n    const int N=20005,M=100005;\n    struct data\n    {\n        int l,r,s;\n    }e[N];\n    int father[N],i,n,m;\n    inline void read(int &x)\n    {\n        x=0; char ch=getchar();\n        while (ch<'0'||ch>'9') ch=getchar();\n        while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    }\n    inline int comp(data a,data b) { return a.s>b.s; }\n    inline int getfather(int k) { return k==father[k]?k:father[k]=getfather(father[k]); }\n    int main()\n    {\n        read(n); read(m);\n        for (i=1;i<=n;++i)\n        father[i]=i;\n        for (i=1;i<=m;++i) \n        read(e[i].l),read(e[i].r),read(e[i].s);\n        sort(e+1,e+m+1,comp);\n        for (i=1;i<=m;++i)\n        {\n            int fx=getfather(e[i].l),fy=getfather(e[i].r);\n            if (fx==fy) break;\n            father[fx]=fy;\n        }\n        printf(\"%d\",e[i].s);\n        return 0;\n    }\n```\n\u5e05\u6c14\u5f97\u641e\u4e8650\u5206\u00b7\u3002\n\n\n\n<2> \u4e0a\u4e00\u79cd\u6253\u6cd5\u4e3a\u4ec0\u4e48\u4f1aWA\uff0c\u662f\u56e0\u4e3a\u6ca1\u6709\u8003\u8651\u5230\u4e00\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u4e24\u4e2a\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5076\u6570\uff0c\u90a3\u4e48\u4ed6\u4eec\u5e94\u8be5\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff08\u7c7b\u4f3c\u4e8e\u6211\u7684\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u6211\u7684\u670b\u53cb\uff09\u3002\u7c7b\u4f3c\u7684\u601d\u60f3\u5728\u98df\u7269\u94fe\u8fd9\u9053\u9898\u91cc\u9762\u4e5f\u6709\u3002\n\n\n\u7136\u540e\u5c31\u662f\u4e00\u9053\u5e26\u6743\u5e76\u67e5\u96c6\u7684\u6a21\u677f\u9898\u4e86\uff08\u53ef\u662f\u6211\u4e0d\u4f1a\uff09\n\n\n\u4e0d\u8fc7\u53ef\u4ee5\u7528\u8865\u96c6\u7684\u505a\u6cd5\u6765\u641e\n\n\n\u5f00\u4e24\u500d\u7684\u6570\u7ec4\uff0c\u6bcf\u6b21\u8fde\u8fb9\u7684\u65f6\u5019\u628ax\u548cy+n\u76f8\u8fde\uff0cy\u548cx+n\u76f8\u8fde\u3002\u8fd9\u6837\u5982\u679c\u4e24\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u76f8\u540c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u80af\u5b9a\u662f\u5076\u6570\u3002\n\n\nCODE\uff08TLE\uff09\n\n\n\n\u7136\u540e\u871c\u6c41TLE\u4e864\u4e2a\u70b9\n\n\n\n\n```cpp\n    #include<cstdio>\n    #include<algorithm>\n    using namespace std;\n    const int N=20005,M=100005;\n    struct data\n    {\n        int l,r,s;\n    }e[N];\n    int father[N*2],i,n,m;\n    inline void read(int &x)\n    {\n        x=0; char ch=getchar();\n        while (ch<'0'||ch>'9') ch=getchar();\n        while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    }\n    inline int comp(data a,data b) { return a.s>b.s; }\n    inline int getfather(int k) { return k==father[k]?k:father[k]=getfather(father[k]); }\n    int main()\n    {\n        read(n); read(m);\n        for (i=1;i<=n*2;++i)\n        father[i]=i;\n        for (i=1;i<=m;++i) \n        read(e[i].l),read(e[i].r),read(e[i].s);\n        sort(e+1,e+m+1,comp);\n        for (i=1;i<=m;++i)\n        {\n            int fx=getfather(e[i].l),fy=getfather(e[i].r);\n            if (fx==fy) { printf(\"%d\",e[i].s); return 0; } \n            father[fx]=father[getfather(e[i].r+n)];\n            father[fy]=father[getfather(e[i].l+n)];\n        }\n        puts(\"0\");\n        return 0;\n    }\n\u3000\u3000<3> \u7ec8\u4e8e\uff0c\u53d1\u73b0\u4e86\u4e00\u79cd\u795e\u5947\u7684\u7b97\u6cd5\u3002\u56e0\u4e3a\u5df2\u7ecf\u5bf9\u8fb9\u957f\u6392\u8fc7\u5e8f\uff0c\u5e76\u4e14\u7a0d\u5fae\u60f3\u4e00\u60f3\u5c31\u53ef\u4ee5\u5f97\u51fa\u5982\u679c\u5230\u8fd9\u4e00\u6761\u8fb9\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u8fb9\u7edd\u5bf9\u4e5f\u6ee1\u8db3\u4e0d\u4e86\u3002\n```\n\u4e8e\u662f\u2014\u2014\u4e8c\u5206\u3002\n\n\u5bf9\u4e8e\u4e8c\u5206\u51fa\u6765\u7684\u8fb9\u957f\uff0c\u53ea\u4fdd\u7559\u6bd4\u5b83\u957f\u7684\u8fb9\uff0c\u518d\u8dd1\u4e00\u904d\u67d3\u8272\u5373\u53ef\u3002\n\n\n\u6240\u8c13\u67d3\u8272\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u70b9\u67d3\u4e0a\u4e00\u79cd\u989c\u8272\uff08\u4f8b\u59821\uff09\uff0c\u518d\u628a\u4e0e\u5b83\u76f8\u90bb\u7684\u70b9\u67d3\u4e0a\u53e6\u4e00\u79cd\u989c\u8272\u5373\u53ef\uff08\u4f8b\u59822\uff09\u3002\n\n\n\u5982\u679c\u53d1\u73b0\u4e00\u4e2a\u70b9\u4e0e\u4e4b\u76f8\u8fde\u7684\u70b9\u989c\u8272\u548c\u5b83\u4e00\u6837\uff0c\u8bf4\u660e\u4e0d\u53ef\u884c\uff0creturn \u6389\u5373\u53ef\u3002\n\n\nBFS\u5b9e\u73b0\u7384\u5b66\u590d\u6742\u5ea6\uff0c\u5e38\u6570\u5c0f\u7684\u5e94\u8be5\u80fd\u5361\u8fc7\u53bb\n\n\n```cpp\n\u3000\u3000CODE(AC)\n    #include<cstdio>\n    #include<vector>\n    #include<algorithm>\n    #include<cstring>\n    using namespace std;\n    const int N=20005,M=100005;\n    vector <int> a[N],l[N];\n    int n,m,i,j,ans,col[N],q[N*2+10],e[M],x,y;\n    inline void read(int &x)\n    {\n        x=0; char ch=getchar();\n        while (ch<'0'||ch>'9') ch=getchar();\n        while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    }\n    inline int comp(int a,int b) { return a>b; }\n    inline bool check(int x)\n    {\n        memset(col,0,sizeof(col));\n        for (i=1;i<=n;++i)\n        if (!col[i]) \n        {\n            memset(q,0,sizeof(q));\n            int head=0,tail=1;\n            q[1]=i; col[i]=1;\n            while (head<tail)\n            {\n                int now=q[++head];\n                for (j=0;j<a[now].size();++j)\n                {\n                    int k=a[now][j];\n                    if (l[now][j]>x)\n                    {\n                        if (!col[k]) { col[k]=3-col[now]; q[++tail]=k; } else\n                        if (col[k]==col[now]) return 0;\n                    }\n                }\n            }\n        }\n        return 1;\n    }\n    int main()\n    {\n        read(n); read(m);\n        for (i=1;i<=m;++i)\n        {\n            read(x); read(y); read(e[i]);\n            a[x].push_back(y); l[x].push_back(e[i]); \n            a[y].push_back(x); l[y].push_back(e[i]);\n        }\n        sort(e+1,e+m+1,comp);\n        int l=1,r=m+1;\n        while (l<=r)\n        {\n            int mid=l+r>>1;\n            if (check(e[mid])) ans=mid,l=mid+1; else r=mid-1;\n        }\n        printf(\"%d\",e[ans]);\n        return 0;\n}\n```",
        "postTime": 1514097439,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u663e\u7136\uff0c\u8fd9\u9053\u9898\u662f\u4e8c\u5206\n\n\u7136\u800c\u2026\u2026\n\n\u600e\u4e48\u5224\u65ad\uff1f\n\n\u5438\u6536\u697c\u4e0b\u5927\u4f6c\u7684\u601d\u8def\uff1a\u4e8c\u5206\u56fe\u67d3\u8272\uff0c\u6309\u7167\u6028\u6068\u5173\u7cfb\u8fdb\u884c\u5efa\u56fe\uff0c\u82e5\u8fd9\u5f20\u56fe\u662f\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u51b2\u7a81\u3002\u4e8c\u5206\u7b54\u6848\uff0c\u6bd4mid\u5c0f\u7684\u8fb9\u89c6\u4f5c\u4e0d\u5b58\u5728\uff0c\u82e5\u65b0\u56fe\u80fd\u88ab\u67d3\u6210\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u6b64\u65f6\u7684mid\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct STack//\u4eba\u5de5\u6808\n{\n    int now,b,u;\n};\nSTack s[200005];\nint top;\nstruct ct         //\u51b2\u7a81\n{\n    int a,b,v;\n};\nct m[100005];\nint N,M;\nint hea[100005],poi[200006],nex[200007],val[200008],tot;\nvoid work(int i,int j,int v)\n{\n    tot++;\n    poi[tot]=j;\n    val[tot]=v;\n    nex[tot]=hea[i];\n    hea[i]=tot;\n}\nbool cmp(const ct &a,const ct &b)\n{\n    return a.v>b.v;\n}\nint color[100005],mark;\nbool pd(int po)\n{\n    mark+=2;                         //color\u5c0f\u4e8eMark\uff0c\u5219\u8fd9\u6b21\u5224\u65ad\u672a\u8bbf\u95ee\u8fc7  mark\u4e3a\u4e00\u79cd\u989c\u8272  mark+1\u4e3a\u53e6\u4e00\u79cd\u989c\u8272\n    int maxn=m[po].v;\n    for(int i=1;i<=N;i++)\n     if(color[i]<mark)\n     {\n    color[i]=mark;\n    top++;\n    s[top].now=i;\n    s[top].b=hea[i];\n    while(top)\n    {\n        if(s[top].b==0)\n        {\n            top--;\n            continue;\n        }\n        s[top].u=poi[s[top].b];\n        if(val[s[top].b]<maxn)                  //\u5f53\u524d\u8fb9\u7684\u6743\u503c\u5c0f\u4e8e\u4e8c\u5206\u7b54\u6848\n        {\n            s[top].b=nex[s[top].b];\n            continue;\n        }\n        if(color[s[top].u]<mark)\n        {\n            if(color[s[top].now]==mark)\n             color[s[top].u]=mark+1;\n            else\n             color[s[top].u]=mark;\n            top++;\n            s[top].now=s[top-1].u;\n            s[top].b=hea[s[top].now];\n            continue;\n        }\n        else\n        {\n            if(color[s[top].now]==color[s[top].u])\n             return false;                                                           //\u67d3\u8272\u53d1\u751f\u51b2\u7a81\uff0c\u8fd4\u56de\u4e3b\u51fd\u6570\n                                                                                                       //\u8fd9\u4e5f\u662f\u6211\u7528\u624b\u5de5\u6808\u7684\u539f\u56e0\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e3b\u51fd\u6570\n        }\n        s[top].b=nex[s[top].b];\n    }\n     }\nreturn true;\n}\nint main()\n{\n    scanf(\"%d%d\",&N,&M);\n    for(int i=1;i<=M;i++)\n    {    \n     scanf(\"%d%d%d\",&m[i].a,&m[i].b,&m[i].v);\n     work(m[i].a,m[i].b,m[i].v);\n     work(m[i].b,m[i].a,m[i].v);\n    }\n    sort(m+1,m+M+1,cmp);                           //\u5c06\u51b2\u7a81\u6309\u6028\u6068\u503c\u6392\u5e8f\n    int l=1,r=M+1;                                            //\u4e8c\u5206\u51b2\u7a81\u7f16\u53f7\n//r=M+1  !!!!!!!!!!!!!!!         \u5373\u7b2cM+1\u4e2a\u51b2\u7a81\u6028\u6068\u503c\u4e3a0\n    while(l<r-1)\n    {\n        int mid=(l+r)>>1;\n        if(pd(mid))\n         l=mid;\n        else\n         r=mid;\n    }\n    if(pd(l)) \n     printf(\"%d\",m[r].v);\n    else\n     printf(\"%d\",m[l].v);\nfclose(stdin);fclose(stdout);\nreturn 0;\n}\n```",
        "postTime": 1509752049,
        "uid": 25224,
        "name": "daks",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff1a\u6309\u7167\u6028\u6c14\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u628a\u4e24\u4eba\u653e\u5165\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u5f53\u53d1\u73b0\u6709\u51b2\u7a81\u65f6\u8f93\u51fa\u6028\u6c14\u6700\u5c0f\u503c\u3002\n\n\u7b97\u6cd5\uff1a\u5e76\u67e5\u96c6\u3002(N\u4e2a\u72af\u4eba\u770b\u6210\u662fN\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u6700\u540e\u8981\u5408\u5e76\u62102\u4e2a\u96c6\u5408\u3002)\n\n\u5efa\u7acb\u8865\u96c6\u7ef4\u62a4\u201c\u72af\u4eba\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u201d\u7684\u5173\u7cfb\u3002\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint n,m,fa[40005];\nstruct node{\n    int a,b,c;\n}e[100005];\nint find(int x){\n    if(fa[x]==x) return x;\n    return fa[x]=find(fa[x]);\n}\nbool cmp(node a,node b){\n    return a.c>b.c; \n}\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n*2;i++) fa[i]=i;\n    for(int i=1;i<=m;i++)\n       scanf(\"%d %d %d\",&e[i].a,&e[i].b,&e[i].c);\n    sort(e+1,e+1+m,cmp);\n    for(int i=1;i<=m;i++){\n        int x=find(e[i].a),y=find(e[i].b);\n        if(x==y){//\u5f53x\u548cy\u90fd\u4e0d\u4e0e\u540c\u4e00\u96c6\u5408\u7f6a\u72af\u5173\u5728\u4e00\u4e2a\u76d1\u72f1\u65f6\uff0cx\u548cy\u5fc5\u7136\u8981\u5173\u5728\u4e0d\u540c\u7684\u76d1\u72f1 \n            printf(\"%d\",e[i].c);\n            return 0;\n        }\n        fa[x]=find(e[i].b+n);//x\u4e0eb\u7684\u8865\u96c6\u5408\u5e76\nfa[y]=find(e[i].a+n);//y\u4e0ea\u7684\u8865\u96c6\u5408\u5e76\n    }\n    printf(\"0\");\n    return 0;\n}\n```",
        "postTime": 1500800740,
        "uid": 9663,
        "name": "\u8d85\u7ea7\u8303\u8303",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\uff08\u6392\u5e8f\uff09+\u5e76\u67e5\u96c6\uff1a\n\n\u89c2\u5bdf\u5230\u5bf9\u4e8e\u4e09\u4e2a\u4ebaa,b,c\u82e5a\u4e0ec\u4e0d\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0cb\u4e0ec\u4e0d\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u5219a\u4e0eb\u5fc5\u7136\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u3002\u3002\u3002\n\n\u7136\u540e\u6211\u4eec\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u5c31\u53ef\u4ee5\u5efa\u7acb\u52a0\u6743\u5e76\u67e5\u96c6\uff0c\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\uff081\uff09\u3001\u7528d[x]\u8868\u793ax\u4e0ex\u7684\u7236\u4eb2\u7684\u5173\u7cfb\uff0c\u82e5\u4e3a1\u8868\u793a\u5728\u4e0d\u540c\u76d1\u72f1\uff0c\u82e5\u4e3a0\u8868\u793a\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\n\n\uff082\uff09\u3001\u8def\u5f84\u538b\u7f29\u7ef4\u62a4(getfa(x))\uff1a\u5728\u6bcf\u6b21\u6267\u884cf[x]=getfa(f[x])\u64cd\u4f5c\u540e\uff0c\u6267\u884cd[x]=d[f[x]] xor d[x]\uff08xor\u8868\u793a\u5f02\u6216\uff0c\u5177\u4f53\u539f\u56e0\u5728\u4e0a\u9762\u8bf4\u5f97\u5f88\u6e05\u695a\uff09\n\n\uff083\uff09\u3001\u5408\u5e76\u64cd\u4f5c\u7ef4\u62a4(merge(x,y))\uff1a\n\n\u8bbefx=getfa(x),\u7406\u6240\u5f53\u7136\u5730\uff0cf[fx]=y\n\n\u7136\u540e\u518d\u6267\u884cd[fx]=d[x]^1\n\n\uff084\uff09\u3001\u6ce8\u610f\u5728\u7528\u5e76\u67e5\u96c6\u524d\u4e00\u5b9a\u8981\u628a\u6240\u6709\u7684f[i]=i\uff08\u53cd\u6b63\u6700\u597d\u662f\u8fd9\u6837\uff0c\u5426\u5219\u4f1a\u9519\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09\n\n\uff085\uff09\u3001\u6ce8\u610f0\u7684\u60c5\u51b5\n",
        "postTime": 1377518933,
        "uid": 400,
        "name": "hncsyjc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u770b\u4e86\u9898\u89e3\uff0c\u53d1\u73b0\u4e00\u5806\u5927\u4f6c\u7528\u7684\u6700\u5927\u751f\u6210\u6811\u3002\n\n\u4f5c\u4e3a\u840c\u65b0\uff0c\u745f\u745f\u53d1\u6296\uff08\u81ea\u5df1\u592a\u5f31\u4e86\uff09\n\n\u770b\u5230\u9898\u7684\u7b2c\u4e00\u773c\uff0c\u89c9\u5f97\u662f\u4e00\u9053\u8d2a\u5fc3+\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u9898\n\n\u7136\u540e\u81ea\u5df1\u5c31\u778e\u641e\u4e86\u4e00\u6ce2\uff0c\u7ed3\u679c\u5c31A\u4e86\n\n\u4e0b\u4e3a\u4ee3\u7801\uff1a\n\n\n\n------------\n```\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#define Maxn 20010\n\nusing namespace std;\nint f[Maxn],d[Maxn],m,n;\n\nstruct gx{\n\tint u,v;\n\tint c;\n}a[100010];\n\nbool cmp(gx a,gx b){\n\treturn a.c>b.c;\n}                         \u7ed3\u6784\u4f53\u5feb\u6392\n\nint find(int a){\n    if(f[a]==a)\n        return a;\n    return f[a]=find(f[a]); \n}                          \u67e5\u627e\u7236\u4eb2\uff08find\uff09\n\nvoid hb(int a,int b){\n\tf[find(a)]=find(b);\n}                           \u5408\u5e76\u5e76\u67e5\u96c6\n\ninline int read(){\n\tint x=0,k=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')\n\t\tk=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn  k*x;\n}                           \u8bfb\u5165\u4f18\u5316\uff08\u6765\u81ea\u4e00\u4e2a\u88ab\u672c\u6821\u6a21\u62df\u8d5b\u5361\u5e38\u7684\u849f\u84bb\uff09\n\nint main(){\n//\tfreopen(\"a.in\",\"r\",stdin);\n//\tfreopen(\"a.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\tf[i]=i,d[i]=-1;               \u521d\u59cb\u5316\n\tfor(int i=1;i<=m;i++){\n\t\ta[i].u=read();\n\t\ta[i].v=read();\n\t\ta[i].c=read();\n\t}\n\tsort(a+1,a+m+1,cmp);   \u4ee5\u6124\u6012\u503c\u6392\u5e8f\uff08\u4ece\u5927\u5230\u5c0f\uff09\uff0c\u7136\u540e\u8d2a\u5fc3\u5c31\u597d\u4e86\uff08\u8fd9\u91cc\u662fa+m+1\uff0c\u81ea\u5df1\u5199\u6210\u4e86a+n+1\uff0c\u8c03\u4e86n\uff01\u5e74\uff09\n\tfor(int  i=1;i<=m;i++){\n\t\t if(find(f[a[i].u])==find(f[a[i].v]))\n        {\n            cout<<a[i].c;\n            return 0;\n        }               \u627e\u5230\u7b2c\u4e00\u4e2a\u90fd\u5728\u4e00\u4e2a\u76d1\u72f1\u7684\u4e24\u4e2a\u4eba\u5373\u4e3a\u6700\u5927\u6124\u6012\u503c\n        if(d[a[i].u]==-1)\n        d[a[i].u]=a[i].v;\n        if(d[a[i].v]==-1)\n        d[a[i].v]=a[i].u;\n        hb(d[find(a[i].u)],a[i].v);\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\uff08\u5408\u5e76\uff09\n        hb(d[find(a[i].v)],a[i].u);\n\t}\n\tcout<<\"0\"<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1540888949,
        "uid": 29219,
        "name": "xuhao",
        "ccfLevel": 0,
        "title": "p1525 \u5173\u62bc\u7f6a\u72af"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7b97\u662f\u8054\u8d5b\u91cc\u5f88\u826f\u5fc3\u7684\u9898\u76ee\u4e86\uff0c\u601d\u8def\u6bd4\u8f83\u65b0\u9896\u800c\u4e14\u53ef\u4ee5\u4e00\u9898\u591a\u89e3\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\u5f88\u591a\u4eba\u7b2c\u4e00\u60f3\u6cd5\u5c31\u662f\u4e8c\u5206\u6216\u8d2a\u5fc3\n\n\u4e8c\u5206\u51fa\u4e00\u4e2a\u503c\u540e\u53ef\u4ee5\u5faa\u73af\u6240\u6709\u51b2\u7a81\u5bf9\uff0c\u4f46\u662f\u53d1\u73b0\u90a3\u4e9b\u4e0d\u4f1a\u8d77\u51b2\u7a81\u7684\u4eba\u5458\u6392\u653e\u4f1a\u5bf9\u4e4b\u540e\u7684\u5bf9\u4ea7\u751f\u6709\u540e\u6548\u6027\u7684\u5f71\u54cd\uff0c\u9664\u4e86\u9898\u89e3\u4e2d\u63d0\u5230\u7684\u90a3\u79cd\u65b9\u6cd5\u597d\u50cf\u5f88\u96be\u8fdb\u884c\u5224\u5b9a\n\n\u8d2a\u5fc3\u9996\u5148\u5c31\u4f1a\u6709\u4e00\u4e2a\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u663e\u7136\u662f\u5148\u8981\u5c06\u5f71\u54cd\u529b\u6700\u5927\u7684\u5148\u5206\u522b\u6392\u5f00\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u597d\u5904\u7406\u4e4b\u540e\u540e\u9762\u5e94\u8be5\u9075\u5faa\u4ec0\u4e48\u539f\u5219\uff0c\u8c01\u53c8\u548c\u8c01\u5408\u5e76\u5462\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5f53\u4efb\u610f\u4e2a\u56da\u72af\u540c\u65f6\u4e0e\u4e00\u4e2a\u56da\u72af\u8d77\u51b2\u7a81\u65f6\uff0c\u8fd9\u4efb\u610f\u4e2a\u56da\u72af\u5fc5\u987b\u5728\u4e00\u8d77\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u8bb2\u4e0d\u6307\u540d\u7684\u5206\u914d\u65b9\u6848\uff08\u65e0\u4ece\u4e0b\u624b\uff09\u8f6c\u6210\u4e86\u8c01\u548c\u8c01\u5fc5\u987b\u5728\u4e00\u8d77\n\n# \u4e0b\u9762\u5148\u9ecf\u8d34\u4ee3\u7801\uff0c\u63a5\u4e0b\u6765\u89e3\u7b54\u4e00\u4e2a\u53ef\u80fd\u56f0\u60d1\u4e00\u4e9b\u540c\u5b66\u7684\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nint n,m;\n\nint read(){\n    int x=0,y=1;char k;\n    while(k<'0'||k>'9'){if(k=='-')y=-1;k=getchar();}\n    while(k<='9'&&k>='0'){x=(x<<3)+(x<<1)+k-'0';k=getchar();};\n    return x*y;\n}\n\nstruct node{\n\tint a,b,v;\n}e[1000005];\n\nint fa[20005];\nint anti[20005];\n\nint get(int k){\n\tif(k==fa[k]) return k;\n\treturn fa[k]=get(fa[k]);\n}\n\nbool cmp(node a,node b){\n\treturn a.v>b.v;\n}\n\nvoid toge(int a,int b){\n\tint f_a=get(a);\n\tint f_b=get(b);\n\tif(f_a==f_b) return;\n\tfa[f_a]=f_b;\n}\n\nint main(){\n\tfreopen(\"a.in\",\"r\",stdin);\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++) e[i].a=read(),e[i].b=read(),e[i].v=read();\n\tsort(e+1,e+1+m,cmp);\n\tfor(int i=1;i<=n;i++) fa[i]=i,anti[i]=0;\n\tfor(int i=1;i<=m;i++){\n\t\tint f1=get(e[i].a);\n\t\tint f2=get(e[i].b);\n\t\tif(f1==f2){\n\t\t\tprintf(\"%d\",e[i].v);\n\t\t\treturn 0;\n\t\t}\n\t\tif(anti[f1]==0) anti[f1]=f2;\n\t\telse toge(f2,anti[f1]);\n\t\tif(anti[f2]==0) anti[f2]=f1;\n\t\telse toge(f1,anti[f2]);\n\t}\n\tprintf(\"0\\n\");\n\treturn 0;\n}\n```\n\n#  \u6211\u4eec\u5728\u7ed3\u675f\u65f6\u628afa\u6570\u7ec4\u6253\u5370\u51fa\u6765\u53d1\u73b0\u597d\u50cf\u5927\u5bb6\u6307\u5411\u7684\u7236\u4eb2\u8fdc\u8fdc\u4e0d\u6b62\u4e24\u4e2a\n\n## \u4e0d\u662f\u8bf4\u597d\u4e86\u53ea\u6709\u4e24\u4e2a\u76d1\u72f1\u4e48\n\n#### \u8fd9\u65f6\u6211\u4eec\u628a\u8fd9\u4e00\u5806\u4e00\u5806\u56da\u72af\u770b\u6210\u4e00\u5757\u4e00\u5757\uff0c\u53ea\u8981\u8fd9\u51e0\u5757\u56da\u72af\u6ca1\u6709\u51fa\u73b0\u8fc7\u5fc5\u987b\u96b6\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76d1\u72f1\u4f46\u5148\u524d\u51b2\u7a81\u7684\uff08\u5982\u679c\u6709\u5219\u4f1areturn 0\u8f93\u51fa\u7b54\u6848\uff09\u4e4b\u540e\u4ed6\u4eec\u5c31\u53ef\u4ee5\u6309\u7167\u4e4b\u524d\u7684\u6761\u4ef6\u6392\u653e\uff0c\u8fd9\u70b9\u6211\u4eec\u5e76\u4e0d\u7528\u7ba1\u4e86",
        "postTime": 1527601773,
        "uid": 47378,
        "name": "\u67cf\u6728\u7531\u7eaaAKB48",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u4e00\u6b21\u6a21\u62df\u6d4b\u8bd5\u9898\u505a\u8fd9\u4e2a\uff0c\u6211\u5dee\u4e00\u70b9\u5c31\u4e09\u767e\u5206\u8650\u573a\u4e86\uff08\u6211\u4e0d\u670d\u554a\uff09\u3002\u3002\u3002\u3002\u3002\u3002mdzz\n\n\u4f46\u662f\u8fd9\u4e2a\u4e8c\u5206\u67d3\u8272\u7684\u601d\u60f3\u8fd8\u662f\u5f88\u597d\u61c2\u5f97\uff0c\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\u8be6\u60c5\u5c31\u770b\u6211\u8003\u8bd5\u65f6\u663e\u5f97\u6ca1\u4e8b(\u4e00\u4e2a\u534a\u5c0f\u65f6\uff09\u6253\u7684\u6ce8\u91ca\u597d\u4e86\uff0c\u5f88\u6e05\u6670\n\n//\u7a0d\u5fae\u60f3\u4e00\u4e0b(\u6211\u662f\u8c01\uff0c\u6211\u5728\u54ea\u91cc\uff0c\u6211\u5728\u5e72\u4ec0\u4e48)\uff0c\u54d4~~~~~~~~\uff0c\u8ba9\u51b2\u7a81\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u4e8c\u5206\u554a\uff1f\uff01\n\n//\u5728\u9650\u5236\u503c\u4ee5\u4e0a\u7684\u51b2\u7a81\u503c\u80af\u5b9a\u4e0d\u5728\u4e00\u8d77\uff0c\u5728\u4e24\u4e2a\u70b9\u4e4b\u95f4\u5efa\u4e00\u6761\u76f8\u8fde\u7684\u8fb9\n\n//\u7136\u540e\u5728dfs\u4e00\u904d\u5e76\u8fdb\u884c\u67d3\u8272(\u5206\u7262\u623f)\uff0c\u6709\u8fb9\u76f8\u90bb\u70b9\u67d3\u6210\u5f02\u8272\n\n//\u5982\u679cdfs\u5230\u4e00\u4e2a\u8bbf\u95ee\u8fc7\u7684\u70b9\u5e76\u4e14\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u9650\u5236\u503c\u8fc7\u5c0f\uff0cpd\u5b8c\u4e86\uff0c\u4e8c\u5206\u5b8c\u4e86\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\ninline int read(){           //\u8fd9\u5f53\u7136\u662f\u5927\u4f6c\u7684\u8bfb\u5165\u4f18\u5316\u4e86 \n    int res=0,f=1;\n    char ch=getchar();\n    while (ch>'9'||ch<'0'||(!ch=='-')){ ch=getchar(); }\n    if (ch=='-'){ f=-1; ch=getchar(); }\n    while (ch<='9'&&ch>='0'){ res=res*10+ch-'0'; ch=getchar(); }\n    return res*f;\n}\nint max(int a,int b){ return a>b?a:b;};\nvector<int> gx[20001];\nint visit[20001];\nstruct node{\n    int zf1,zf2;\n    int nq;\n};\nnode md[100001];\nbool cmp(const node &a,const node &b){\n    return a.nq>b.nq;\n}\nint depth[20001];\nint n,m;\nint flag=0;\nvoid dfs1(int t,int dp){\n    if (flag) return;\n    visit[t]=1; depth[t]=dp;\n    for (int i=0;i<gx[t].size();++i){\n        if (!visit[gx[t][i]]){\n            dfs1(gx[t][i],!dp);    //\u641c\u7d22\u4e0b\u4e00\u4e2a\u6ca1\u6709\u8bbf\u95ee\u7684\u70b9\uff0cdepth\u53ea\u6709\uff081,2)    \uff08\u6211\u7684\u67d3\u8272\u50cfzz\u4e00\u6837\uff08dp+1\uff09%2+1\u8fd8\u662f1\uff09 \n        } \n        else if (depth[t]==depth[gx[t][i]]){   \n            flag=1;            //\u5982\u679c\u7b2c\u4e8c\u6b21\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4e14\u67d3\u8272\u4e00\u6837\u8fd8\u76f8\u90bb\uff0cmust be dying\n            return;\n        }\n    }\n}\nint pd(int mid){                    //\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u7684\u7075\u9b42(\u6ed1\u7a3d) \n    flag=0;                            //\u4e00\u5927\u5768\u7684\u521d\u59cb\u5316 \n    memset(depth,0,sizeof(depth));\n    memset(visit,0,sizeof(visit));\n    for (int i=1;i<=n;++i){\n        gx[i].clear();\n    }\n    for (int i=1;i<=m;++i){           //\u628a\u6012\u6c14\u5927\u4e8e\u9650\u5236\u7684\u90fd\u5efa\u8fb9\uff0c\u4e00\u5b9a\u4e0d\u5728\u4e00\u4e2a\u76d1\u72f1 \n        if (md[i].nq>mid){\n            gx[md[i].zf1].push_back(md[i].zf2);\n            gx[md[i].zf2].push_back(md[i].zf1);\n            //cout<<md[i].zf1<<\" \"<<md[i].zf2<<endl; \n        }\n        else break;\n    }\n    for (int i=1;i<=n;++i){\n        if (!visit[i]){\n            dfs1(i,1);          //\u4ece\u4e00\u4e2a\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u7684\u70b9\u641c\u7d22\uff0c\u4e0e\u5176\u76f8\u8fde\u7684\u4efb\u4f55\u70b9\u90fd\u6807\u8bb0 \n        }\n    }\n    /*for (int i=1;i<=n;++i){\n        printf(\"%d \",depth[i]);\n    }\n    printf(\"\\n\");*/\n    if (flag) return 0;         //flag==1\u80af\u5b9a\u662f\u7206\u70b8\u4e86 \n    else return 1;\n}\nint main(){\n    //freopen(\"prison.in\",\"r\",stdin);\n    //freopen(\"prison.out\",\"w\",stdout);\n    n=read(); m=read();\n    int r,l,maxn=0;\n    for (int i=1;i<=m;++i){\n        md[i].zf1=read(); md[i].zf2=read(); md[i].nq=read();  \n        maxn=max(maxn,md[i].nq); //md\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u53cd\u6b63\u80af\u5b9a\u4e0d\u662f\u4f60\u60f3\u7684\uff0c\u4f46\u6211\u6253\u7740\u6253\u7740\u4e5f\u5fd8\u4e86\u3002\u3002\u3002\u3002\n        //** \u6ca1\u5f97 \u4e70\u7684 \u540d\u5355 MD5 md \u76ee\u7684 \u9762\u5bf9 \u95e8\u5e97 \u77db\u76fe(\u641c\u72d7\u8f93\u5165\u6cd5\u7ed9\u51fa\u4e86\u6b63\u786e\u7b54\u6848\uff0cmdzz) \n    }\n    sort(md+1,md+m+1,cmp);\n    l=0,r=maxn;\n    while (l<r){               //\u8fd9\u5f53\u7136\u662f\u4e2a\u4e8c\u5206\u4e86\uff1f\uff01\uff1b \n        int mid=(l+r)/2;\n        //cout<<l<<\"  \"<<r<<endl;   //\u5220\u6ce8\u91ca\u5566\u5427\u3002\u3002\u3002\u3002\u3002\u3002 \n        if (pd(mid)){\n            r=mid;\n        }\n        else{\n            l=mid+1;\n        }\n    }\n    printf(\"%d\\n\",r);\n    //fclose(stdin); fclose(stdout);\n    return 0;\n}\n//\u73c2\u5b66\u5206\u6790\uff0c\u6211\u8fd9\u6b21\u4f1a\u6709\u4e09\u767e\u5206\n```",
        "postTime": 1509753550,
        "uid": 20751,
        "name": "\u81f3\u5c0a\u63b0\u63b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1an\u4e2a\u70b9m\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5c06n\u4e2a\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff08\u4f1a\u5220\u6389\u4e00\u4e9b\u8fb9\uff09\uff0c\u4f7f\u5f97\u5269\u4f59\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u6700\u5927\u7684\u8fb9\u6700\u5c0f\n\n\u5e76\u67e5\u96c6\uff1a\n\n1\u3001\u5148\u5c06\u6240\u6709\u7684\u8fb9\u6743\u6392\u5e8f\uff1f\n\n2.\u6700\u5c0f\u751f\u6210\u6811\uff1f\u6700\u5927\u751f\u6210\u6811\uff1f\n\n3\u3001\u600e\u4e48\u7ef4\u62a4\u4e24\u4e2a\u5e76\u67e5\u96c6\uff1f\n\n\u6700\u5927\u751f\u6210\u6811\u7ed9\u4e86\u6211\u542f\u53d1\uff1a\n\n\u9996\u5148\u5c06\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6700\u957f\u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u80af\u5b9a\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u4e8e\u662f\u5c31\u52a0\u5165\u5230\u53cd\u96c6\u91cc\u9762\n\n\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\u5462\uff1f\n\n\u76f4\u5230\u6709\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\u4e86\uff0c\u7ed3\u675f\u3002return 0;\n\n\u53cd\u96c6\u600e\u4e48\u5e94\u7528\u5462\uff1f\n\n\u7528\u4e00\u4e2a\u6570\u7ec4enemy\u6765\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u6700\u8fd1\u7684\u654c\u4eba\uff0c\u4e0b\u4e00\u6b21\u9047\u5230\u76f8\u540c\u7684\u4eba\uff0c\u5c31\u653e\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\n\n\u600e\u6837O(1)\u67e5\u8be2\u4e24\u70b9\u6240\u8fde\u7684\u8fb9\u6743?\n\n\u77e9\u9635\u4f1a\u70b8\uff0c\u904d\u5386\u592a\u6162\uff0c\u90a3\u5c31\u6700\u540e\u518d\u627e\n\n\u6539\u4e86\u534a\u5929\uff0c\u539f\u6765\u662fjudge\u51fd\u6570\u5199\u9519\u4e86\uff01\uff01\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=20001;\nconst int MAXM=100001;\nint n,m,father[MAXN],enemy[MAXN];\nstruct Edge{\n    int from,to,dis;\n}edge[MAXM];\nint find(int x)\n{\n    if (father[x]!=x) return father[x]=find(father[x]);\n    return father[x];\n}\nvoid unionn(int x,int y)\n{\n    int xx=find(x);\n    int yy=find(y);\n    if (xx!=yy) father[xx]=father[yy];\n}\nbool judge(int x,int y)\n{\n    return find(x)==find(y);\n}\nbool comp(Edge a,Edge b)\n{\n    return a.dis>b.dis;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1; i<=n; i++) father[i]=i;\n    for (int i=1; i<=m; i++)\n        scanf(\"%d%d%d\",&edge[i].from,&edge[i].to,&edge[i].dis);\n    sort(edge+1,edge+1+m,comp);\n    int flag; \n    for (int i=1; i<=m; i++)\n    {\n        if (judge(edge[i].from,edge[i].to)) {flag=i; break;}//\u6b64\u5904\u5e94\u8be5\u662fbreak\u800c\u4e0d\u662fcontinue\n        if (enemy[edge[i].from]) unionn(enemy[edge[i].from],edge[i].to);\n        if (enemy[edge[i].to]) unionn(enemy[edge[i].to],edge[i].from);\n        enemy[find(edge[i].from)]=edge[i].to;\n        enemy[find(edge[i].to)]=edge[i].from;//\u662f\u654c\u4eba \n    }\n    printf(\"%d\",edge[flag].dis);\n    return 0;\n}\n\n```",
        "postTime": 1508214558,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u770b\u697c\u4e0bdalao\u4ee3\u7801\uff0c\u8868\u793a\u4e00\u7247\u61f5\u3002\n\n\u5c1d\u8bd5\u4e86\u4e00\u4e0b\u66b4\u529b\uff08\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\uff09\uff0c\u7adf\u7136\u8fc7\u4e86\u3002\n\n\u89e3\u91ca\u5199\u4ee3\u7801\u91cc\u53bb\u4e86\u3002\n\n\u5c31\u662f\u7ef4\u62a4\u4e24\u4e2a\u5e76\u67e5\u96c6\uff0c\u6211\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\u7684\u8fd9\u4e48\u79cd\u5173\u7cfb\uff08\u56e0\u4e3a\u5df2\u7ecf\u62cd\u5b8c\u4e86\u5e8f\uff0c\u6211\u654c\u4eba\u7684\u654c\u4eba\u548c\u6211\u7684\u4ec7\u6068\u503c\u80af\u5b9a\u8981\u6bd4\u6211\u4e0e\u654c\u4eba\u7684\u4ec7\u6068\u503c\u8981\u5c0f\uff09\u3002\n\n\u82e5\u4e24\u4e2a\u4ec7\u6068\u503c\u5f53\u524d\u6700\u5927\u7684\u4e24\u4e2a\u4eba\u5728\u4e00\u4e2a\u76d1\u72f1\u91cc\uff08\u5faa\u73af\u4e2d\uff09\uff0c\u5219\u8f93\u51fa\u5e76\u7ed3\u675f\u7a0b\u5e8f\uff08\u56e0\u4e3a\u8fd9\u5df2\u7ecf\u662f\u6700\u5c0f\u7684\u6700\u5927\u4e86\uff09\n\n```cpp\n#include<iostream> \n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint e[20010],f[20010];\nstruct node{\n    int aj;\n    int bj;\n    long long cj;    \u6ce8\u610f\u6570\u636e\u8303\u56f4\u3002\n};\nbool comp(const node &l,const node &p)\n{\n    return l.cj>p.cj;   \u81ea\u5b9a\u4e49sort\u6bd4\u8f83\u51fd\u6570\n}\nint find(int z)\n{\n    if(f[z]==z)\n        return z;\n    return f[z]=find(f[z]);    \u5e76\u67e5\u96c6\n}\nnode hh[100010];    \u50a8\u5b58\u5173\u7cfb\u7684\u6570\u7ec4\nint main()\n{\n    cin.sync_with_stdio(false);            \u53ef\u6709\u53ef\u65e0\u7684\u8bfb\u5165cin\u4f18\u5316\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        f[i]=i;                     \u5e76\u67e5\u96c6\u9884\u5904\u7406\n        e[i]=-1;                -1\u8868\u793a\u4e3a\u6682\u4e14\u6ca1\u6709\u4ec7\u6068\u503c\u6700\u5927\u7684\u4eba\uff08\u8ddf\u90a3\u4e2a\u6211\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb\u7c7b\u4f3c\uff09\n    }\n    for(long long i=1;i<=m;i++)\n    {\n        cin>>hh[i].aj>>hh[i].bj>>hh[i].cj;\n    }\n    sort(hh+1,hh+m+1,comp);\n    int i=1;\n    while(1)\n    {\n        if(find(f[hh[i].aj])==find(f[hh[i].bj]))\n        {\n```\n\u82e5aj\u4e0ebj\u4e24\u4eba\u5df2\u7ecf\u5728\u540c\u4e00\u76d1\u72f1\u91cc\uff0c\u8f93\u5165\u5e76\u7ed3\u675f\n```cpp\n            cout<<hh[i].cj;\n            return 0;\n        }\n        if(e[hh[i].aj]==-1)\n        {\n            e[hh[i].aj]=hh[i].bj;    \u653e\u5165\u4ec7\u4eba\uff0c\u4e0b\u540c\uff0ce\u4e3aenemy\n        }\n        if(e[hh[i].bj]==-1)\n        {\n            e[hh[i].bj]=hh[i].aj;\n        }\n        int f1=find(hh[i].aj),f2=find(hh[i].bj); \u53d6\u4e24\u4e2a\u4eba\u7684\u7236\u4eb2\n        f[find(e[f1])]=f2;   \u4e0e\u4ec7\u4eba\u7684\u4ec7\u4eba\uff08\u5c31\u662f\u670b\u53cb\uff09\u5408\u5e76\u3002\n        f[find(e[f2])]=f1;\n        i++;\n    }\n        //\u6ca1\u6709\u51b2\u7a81\uff1a\n    cout<<\"0\";\n    return 0;\n}\n\n```",
        "postTime": 1507543230,
        "uid": 28007,
        "name": "Lance1ot",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u89e3\u51b3\u65b9\u6848\uff1a\n\n1.\u6309\u7167\u51b2\u7a81\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\n2.\u4f18\u5148\u4fdd\u8bc1\u6700\u5927\u51b2\u7a81\u4e0d\u53d1\u751f(\u5bf9\uff0c\u6240\u4ee5\u662f\u8d2a\u5fc3)\n\n3.\u5f00\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u7ef4\u62a4\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u4e2d\u548c\u5fc5\u987b\u4e0d\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u4e2d\u7684\u7f6a\u72af\n\n4.\u7b49\u7b49\uff0c\u4e24\u4e2a\u5e76\u67e5\u96c6\n\n5.\u6240\u4ee5\u8981\u67092\u500d\u7684\u4eba\n\n6.x\u53d8\u6210x\u548cx+n\n\n7.x-y+n\uff1ax\u548cy\u5fc5\u987b\u4e0d\u5728\u4e00\u8d77\n\n8.x-y\uff1ax\u548cy\u5fc5\u987b\u5728\u4e00\u8d77\n\n9.\u5f00\u59cb\u5904\u7406\n\n10.\u5047\u8bbe\u76ee\u524d\u5904\u7406\u5230x\u548cy\n\n11.\u82e5\u5728\u4e4b\u524d\u7684\u5904\u7406\u4e2dx\u548cy\u5df2\u7ecf\u88ab\u5224\u8981\u5728\u4e00\u8d77\n\n12.\u8f93\u51fa\u5373\u53ef\uff0creturn 0\n\n13.\u82e5\u6ca1\u6709\uff0c\u4f1a\u53d1\u73b0\u4e4b\u524d\u7684\u4e1c\u897f\u6709\u7528\u4e86\n\n14.\u6240\u6709\u548cx\u4e0d\u5728\u4e00\u8d77\u7684\u5fc5\u987b\u548cy\u5728\u4e00\u8d77\uff0c\u6240\u6709\u548cy\u4e0d\u5728\u4e00\u8d77\u7684\u5fc5\u987b\u548cx\u5728\u4e00\u8d77\n\n15.\u5408\u5e76\u4e00\u4e0b\n\n16.\u63d0\u4ea4\uff0c\u4f1a\u53d1\u73b0\u7b2c\u4e00\u4e2a\u70b9\u9519\u4e86\n\n17.\u6700\u540e\u8981\u8f93\u51fa0\n\n18.\u63d0\u4ea4\uff0cAC\n\n\u5949\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<algorithm> \nusing namespace std;\nint n,m;\nint ans;\nint f[40001];\nstruct edge\n{\n    int a;\n    int b;\n    int c;\n}h[100001];\nbool cmp(edge x,edge y)\n{\n    return x.c>y.c;\n}\nint find(int x)\n{\n    if(x==f[x])return x;\n    return find(f[x]);\n```\n}//\u627e\u7956\u5148\uff0c\u7528\u4e8e\u5408\u5e76\n```cpp\nvoid unite(int x,int y)\n{\n    f[find(y)]=find(x);\n    return;\n```\n}//\u5408\u5e76\n```cpp\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)f[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>h[i].a>>h[i].b>>h[i].c;\n    }\n    sort(h+1,h+m+1,cmp);\n    for(int i=n+1;i<=2*n;i++)f[i]=i;\n    for (int i=1;i<=m;i++)\n    {\n        int j=find(h[i].a);\n        int k=find(h[i].b);\n        if (j==k)\n        {\n            cout<<h[i].c;\n            return 0;\n        }\n        if (j==find(h[i].b+n)||k==find(h[i].a+n))continue;\n        unite(j,k+n);\n        unite(k,j+n);\n    }\n    cout<<0;\n    return 0;\n}\n//\u4f3c\u4e4e\u5f88\u7b80\u5355\n```",
        "postTime": 1507004019,
        "uid": 26905,
        "name": "\u9648\u6636\u65ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u4e8c\u5206+\u4e8c\u5206\u67d3\u8272\n\n\n\u628a\u4e24\u4e2a\u76d1\u72f1\u91cc\u7684\u4eba\u4fdd\u8bc1\u4e0d\u51b2\u7a81\uff0c\u6c42\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5c31\u662f\u4e8c\u5206\n\n\u4e8c\u5206\u6700\u5927\u7684\u6028\u6c14\u503c\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u6028\u6c14\u503c\u67d3\u8272\uff0c\u6bd4\u8fd9\u4e2a\u6028\u6c14\u503c\u5c0f\u7684\uff0c\u53ef\u4ee5\u770b\u505a\u6ca1\u6709\u8fb9\uff0c\u56e0\u4e3a\u4e24\u4e2a\u4eba\u5728\u4e0d\u5728\u4e00\u4e2a\u76d1\u72f1\u91cc\u65e0\u6240\u8c13~~~\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nstruct nodo{\n    int b;\n    int w;\n};\nvector <nodo> tu[20010];\nint wc[100010];\nint color[20020];\nint n,m;\nbool pan;\nint readin(){\n    int yi=0;\n    char c=getchar();\n    while(!isdigit(c)){\n        c=getchar();\n    }\n    for(;isdigit(c);c=getchar()){\n        yi=yi*10+c-'0';\n    }\n    return yi;\n}\nbool cmp(int u,int v){\n    return u<v;\n}\nvoid dfs(int u,int le){\n    for(int i=0;i<tu[u].size();i++){\n        if(!pan){\n            return ;\n        }\n        if(tu[u][i].w>le){\n            if(color[tu[u][i].b]){\n                if(color[tu[u][i].b]+color[u]==3){\n                    continue;\n                }\n                else{\n                    pan=false;\n                    return;\n                }\n            }\n            else{\n                color[tu[u][i].b]=3-color[u];\n                dfs(tu[u][i].b,le);\n            }\n        }\n    }\n}\nbool spfa(int ll){\n    for(int i=1;i<=n;i++){\n        color[i]=0;\n    }\n    pan=true;\n    for(int i=1;i<=n;i++){\n        if(!color[i]){\n            color[i]=1;\n            dfs(i,ll);\n            if(!pan){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nvoid erfen(){\n    sort(wc+1,wc+m+1,cmp);\n    int l=0;\n    int r=m;\n    int mid;\n    while(l<r){\n        mid=(l+r)/2;\n        if(spfa(wc[mid])){\n            r=mid-1;\n        }\n        else{\n            l=mid+1;\n        }\n    }\n    for(int i=max(r-3,0);i<=min(r+3,m);i++){\n        if(spfa(wc[i])){\n            cout<<wc[i]<<endl;\n            return ;\n        }\n    }\n}\nint main(){\n    n=readin();\n    m=readin();\n    for(int i=1;i<=m;i++){\n        int xi=readin(),yi=readin(),wi=readin();\n        nodo ti;\n        ti.b=yi;\n        ti.w=wi;\n        tu[xi].push_back(ti);\n        ti.b=xi;\n        tu[yi].push_back(ti);\n        wc[i]=wi;\n    }\n    erfen();\n}\n```",
        "postTime": 1506262674,
        "uid": 26988,
        "name": "\u50da\u673a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u603b\u4f53\u6765\u8bb2\u8fd9\u662f\u4e00\u4e2a\u5e76\u67e5\u96c6\u7684\u9898\uff0c\u6211\u4eec\u628a\u6a21\u578b\u62bd\u8c61\u51fa\u6765\uff0c\u5c31\u662f\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u6309\u7167\u6761\u4ef6\u5c06\u56fe\u4e2d\u7684\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4f7f\u5f97\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6700\u5927\u8fb9\u6700\u5c0f\n\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u662f\u4e00\u9053\u57fa\u4e8e\u5e76\u67e5\u96c6\u7684\u9898\uff0c\u800c\u4e14\u4e00\u5b9a\u4f1a\u628a\u5927\u7684\u8fb9\u5272\u65ad\u4f7f\u8fd9\u6761\u8fb9\u4e0d\u5b58\u5728\uff0c\u53ea\u662f\u4e00\u4e2a\u5c0f\u8d2a\u5fc3\uff0c\u4f46\u662f\u666e\u901a\u7684\u5e76\u67e5\u96c6\u601d\u60f3\u53c8\u4e0d\u662f\u5f88\u597d\u505a\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u4e86\u4ee5\u4e0b\u5206\u6790\uff1a\n\n\n\u65e2\u7136\u662f\u8d2a\u5fc3\uff0c\u6211\u4eec\u4f1a\u6839\u636e\u8fb9\u7684\u5927\u5c0f\u6765\u6392\u5e8f\uff0c\u7531\u5927\u5230\u5c0f\u6392\uff1b\n\n\n\u5047\u8bbe\u5f53\u524d\u70b9\u7ebf\u662fA\u2014B\uff0c\u5219\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n\n<1> A\uff0cB\u90fd\u5206\u522b\u8fd8\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u4e2a\u76d1\u72f1\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u65f6\u5019\u628aA\uff0cB\u5206\u522b\u653e\u5165\u4e24\u4e2a\u5bf9\u7acb\u7684\u76d1\u72f1\uff0c\u81f3\u4e8e\u5bf9\u7acb\u7684\u76d1\u72f1\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u4ee3\u7801\u5b9e\u73b0\uff0c\u5c31\u5b9a\u4e49\u4efb\u610f\u4e00\u4e2a\u76d1\u72f1\u7f16\u53f7\u4e3aX\uff0c\u5219X^1\u4e3a\u76d1\u72f1X\u7684\u5bf9\u7acb\u76d1\u72f1\uff1b\n\n\n<2>A\uff0cB\u4e2d\u6709\u4e00\u4e2a\u4ebaA\u5df2\u7ecf\u5728\u76d1\u72f1\u4e2d\u4e86\uff0c\u800c\u53e6\u4e00\u4e2a\u4ebaB\u6ca1\u6709\uff0c\u5219\u6211\u4eec\u628aB\u653e\u5165A\u6240\u5728\u76d1\u72f1\u7684\u5bf9\u7acb\u76d1\u72f1\uff1b\n\n\n<3>A\uff0cB\u90fd\u5728\u76d1\u72f1\u4e2d\uff0c\u4f46\u4e24\u6240\u76d1\u72f1\u4e0d\u662f\u5bf9\u7acb\u7684\uff0c\u6211\u4eec\u628aA\u653e\u5728B\u76ee\u524d\u7684\u76d1\u72f1\u7684\u5bf9\u7acb\u76d1\u72f1\uff0c\u6b64\u65f6A\u7684\u76d1\u72f1\u7f16\u53f7\u5df2\u7ecf\u6539\u53d8\uff0c\u6211\u4eec\u628a\u539fA\u6240\u5728\u7684\u76d1\u72f1\u7684\u5bf9\u7acb\u76d1\u72f1\u7684\u4eba\u653e\u5728\u73b0\u5728B\u6240\u5728\u7684\u76d1\u72f1\uff1b\n\n\n<4>A\uff0cB\u90fd\u5728\u76d1\u72f1\u4e2d\uff0c\u4e14\u6240\u5728\u76d1\u72f1\u76f8\u540c\uff0c\u5219\u8fd9\u6761\u8fb9\u5c31\u662f\u7b54\u6848\uff1b\n\n\n\u653e\u76d1\u72f1\u8fd9\u4e2a\u6b65\u9aa4\u5c31\u662f\u5e76\u67e5\u96c6\uff0c\u6392\u5e8f\u662f\u8d2a\u5fc3\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u662f\u8d2a\u5fc3+\u5e76\u67e5\u96c6\uff1b\n\n\n\u6211\u7684\u535a\u5ba2\uff1a http://blog.csdn.net/pretend\\_fal\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define II int\n#define R register\n#define I 123456\nusing namespace std;\n\n\nstruct node {\n    II x,y;\n    II w;\n}aa[I];\n\n\nII fa[I];\n\nII n,m,ans,_tot;\n\n\nbool maP(node a1,node a2)\n{\n    return a1.w>a2.w;\n}\n\n\nII find(R II x)\n{\n    if(fa[x]==x) return x;\n      else return fa[x]=find(fa[x]);\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    _tot=22001;\n    //\u76d1\u72f1\u7f16\u53f7\u5728>n\u65f6\u8ba4\u4e3a\u5df2\u7ecf\u653e\u5230\u76d1\u72f1\u4e2d\u4e86\n    //\u6240\u4ee5\uff0c\u4e3a\u4e86\u907f\u514d\u4e0e\u521d\u59cb\u72b6\u6001\u91cd\u590d\uff0c\u6211\u4eec\u4ee4\u6700\u5c0f\u7684\u76d1\u72f1\u7f16\u53f7\u4e3an\u8303\u56f4\u4e4b\u5916\n    for(R II i=1;i<=40000;i++) fa[i]=i;\n    for(R II i=1;i<=m;i++) scanf(\"%d%d%d\",&aa[i].x,&aa[i].y,&aa[i].w);\n    sort(aa+1,aa+m+1,maP);\n    ans=0;\n    for(R II i=1;i<=m;i++)\n    {\n        R II X=find(aa[i].x);\n        R II Y=find(aa[i].y);\n        if(X<=n&&Y<=n) fa[X]=++_tot,fa[Y]=++_tot;\n        //\u60c5\u51b5<1>\uff1b\n          else if(X<=n&&Y>n) fa[X]=fa[Y]^1;\n          //\u60c5\u51b5<2>\u4e4b\u4e00\uff1b\n            else if(X>n&&Y<=n) fa[Y]=fa[X]^1;\n            //\u60c5\u51b5<2>\u4e4b\u4e8c\uff1b\n              else if(X>n&&Y>n){\n                  if(X==Y) {\n                      printf(\"%d\\n\",aa[i].w);\n                      return 0;\n                  }\n                  //\u60c5\u51b5<4>;\n                  if(X!=(Y^1)){\n                      R II XXOR=X^1;\n                      R II YXOR=Y^1;\n                      fa[Y]=XXOR;\n                      fa[YXOR]=X;\n                  }\n                  //\u60c5\u51b5<3>\uff1b\n              }\n    }\n    cout<<0<<endl;\n    return 0;\n}\n```",
        "postTime": 1506121460,
        "uid": 36716,
        "name": "wuzhoupei",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[http://www.cnblogs.com/OIerShawnZhou/](http://www.cnblogs.com/OIerShawnZhou/)\n\n\uff08\u6211\u5e73\u5e38\u5199\u7684\u9898\u89e3\u90fd\u4f1a\u5f80\u535a\u5ba2\u91cc\u53d1\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u524d\u6765\u62cd\u7816\uff09\n\n\u6b63\u5e38\u5411\u7684\u8865\u96c6\u6cd5\u3002\n\n\u65e2\u7136\u8981\u8ba9\u6700\u5927\u7684\u51b2\u7a81\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u62c6\u51b2\u7a81\u6700\u9ad8\u7684\u4e24\u4e2a\u4eba\uff0c\u628a\u8fd9\u4e24\u4e2a\u4eba\u653e\u5230\u4e0d\u540c\u7684\u76d1\u72f1\u91cc\u624d\u53ef\u4ee5\u6ee1\u8db3\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5148\u628a\u6240\u6709\u51b2\u7a81\u7a0b\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u4ece\u5927\u5230\u5c0f\u53d6\uff0c\u5982\u679c\u5f53\u524d\u53d6\u5230\u7684\u4e24\u4e2a\u4eba\u6ca1\u6cd5\u5b89\u6392\u5230\u4e0d\u540c\u7684\u76d1\u72f1\uff0c\u90a3\u4e48\u4ed6\u4fe9\u7684\u51b2\u7a81\u7a0b\u5ea6\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848\u4e86\uff0c\u800c\u4e14\u56e0\u4e3a\u4e4b\u524d\u6392\u5e8f\u8fc7\uff0c\u6240\u4ee5\u89e3\u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n\n\u8865\u96c6\u6cd5\u5b9e\u9645\u4e0a\u662f\u8bb0\u5f55i\u7684\u53cd\u9762\uff0c\u8981\u5e76\u67e5\u96c6\u7684\u6570\u7ec4\u5f00\u4e8c\u500d\u5927\u3002\n\n\u5982\u679c\u7528i\u8868\u793ai\u53f7\u7f6a\u72af\uff0c\u90a3\u4e48\u6211\u4eec\u7528i+n\u8868\u793a\u4e0d\u80fd\u548ci\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\u7684\u7f6a\u72af\u3002\u5982\u679c\u4e24\u4e2a\u7f6a\u72af\u4f4d\u4e8e\u540c\u4e00\u5e76\u67e5\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7f6a\u72af\u5c31\u4e00\u5b9a\u8981\u4f4d\u4e8e\u540c\u4e00\u4e2a\u76d1\u72f1\u3002\n\n\u5728\u67e5\u627e\u51b2\u7a81\u65f6\u53d1\u73b0\u51b2\u7a81\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\uff0c\u5982\u679c\u4e0d\u51b2\u7a81\uff0c\u5219\u628aj\u4e0ek+n\u5408\u5e76\uff0ck\u4e0ej+n\u5408\u5e76\u3002\n\n\u6700\u540e\u522b\u5fd8\u4e86\u65e0\u51b2\u7a81\u7684\u60c5\u51b5\uff0c\u90a3\u6837\u76f4\u63a5\u8f93\u51fa0\u5c31\u597d\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define maxn 200005\n#define maxm 1000005\nusing namespace std;\nstruct Edge{\n    int from,to,dis;\n    \n    bool operator<(const Edge &r)const{\n        return dis > r.dis;\n    }\n};\nEdge edge[maxm];\nint father[maxn];\nint n,m;\ninline int read(){\n    int num = 0;\n    char c;\n    bool flag = false;\n    while ((c = getchar())==' ' || c=='\\n' || c== '\\r');\n    if (c=='-')\n        flag = true;\n    else num = c-'0';\n    while (isdigit(c = getchar()))\n        num = num *10 +c-'0';\n    return (flag?-1:1)*num;\n    \n}\n\nint find(int x){\n    if (father[x] == x)\n        return father[x];\n    father[x] = find(father[x]);\n    return father[x];\n}\n\nvoid merge(int x,int y){\n    x = find(x);\n    y = find(y);\n    father[y] = x;\n}\n\nint main(){\n    n = read();\n    m = read();\n    for (int i=1; i<=n*2 ;i++)\n        father[i] = i;\n\n    for (int i=1;i<=m;i++){\n        edge[i].from = read();\n        edge[i].to = read();\n        edge[i].dis = read();\n    }\n\n    sort(edge+1,edge+m+1);\n\n    for (int i=1;i<=m;i++){\n        int j = find(edge[i].from);\n        int k = find(edge[i].to);\n        if (j == k){\n            cout << edge[i].dis << endl;\n            return 0;\n        }\n        if (j == find(edge[i].to + n) || k == find(edge[i].from + n))\n            continue;\n\n        merge(j,k+n);\n        merge(k,j+n);\n    }\n    cout << \"0\" << endl;\n    return 0;\n}\n```",
        "postTime": 1505754851,
        "uid": 20197,
        "name": "ShawnZhou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u5e76\u67e5\u96c6\uff0c\u5e76\u67e5\u96c6\u662f\u4e00\u4e2a\u5f88\u7b80\u5355\u4f46\u662f\u975e\u5e38\u597d\u7528\u7684\u7b97\u6cd5\u3002\n\n\u501f\u7528\u5c71\u4e1c2017\u590f\u4ee4\u8425\u7684\u4e00\u53e5\u8bdd\uff0c\u8fd9\u9053\u9898\u662f\u7b7e\u5230\u9898\uff08\u521a\u5f00\u59cb\u505a\u9898\u987a\u624bAC\u4e00\u4e0b\uff09\u3002\n\n\u7531\u4e8e\u6570\u636e\u91cf\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u4f7f\u7528\u52a8\u6001\u6570\u7ec4vector\uff0c\u5f53\u7136\uff0c\u4f7f\u7528\u5176\u4ed6\u5bb9\u5668\u4e5f\u53ef\u3002\n\n\u7528\u5230\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u81ea\u5b9a\u4e49\u6bd4\u8f83\uff0c\u6700\u540e\u8f93\u51fa\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\u3002\n\n```cpp\n#include<iomanip>\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<ctime>\n#include<stack>\n#include<queue>\n#include<deque>\nusing namespace std;\nint p[100500];\nint find(int x) {\n    return p[x]==x?x:p[x]=find(p[x]);\n}\nstruct node {\n    int a,b,c;\n    node(int a,int b,int c):a(a),b(b),c(c) {}\n    bool operator<(const node&rhs)const {\n        return c>rhs.c;\n    }\n};\nvector<node>vec;\nint main() {\n    int n,m;\n    cin>>n>>m;\n    for(int i=1; i<=2*n; i++)p[i]=i;\n    while(m--) {\n        int a,b,c;\n        cin>>a>>b>>c;\n        vec.push_back(node(a,b,c));\n    }\n    sort(vec.begin(),vec.end());\n    for(int i=0;; i++) {\n        node t(vec[i]);\n        if(find(t.a)==find(t.b)){\n            cout<<t.c;\n            return 0;\n        }\n        p[find(t.a+n)]=find(t.b);\n        p[find(t.b+n)]=find(t.a);\n    }\n    return 0;\n}\n```",
        "postTime": 1503201196,
        "uid": 39922,
        "name": "vinvor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u4e00\u9053\u5e76\u67e5\u96c6\u7684\u597d\u9898\uff0c\u8fde\u6211\u4eec\u8001\u5e08\u90fd\u662f\u5f53\u505a\u4f8b\u9898\u6765\u8ba9\u6211\u4eec\u505a\u7684\n\n\n\u7b2c\u4e00\u6b21\u4ea4\u5c45\u7136\u5f88\u5e78\u8fd0\u7684\u78b0\u4e0a\u4e86\u6d1b\u8c37\u7684\u8bc4\u6d4b\u673a\u7206\u70b8\uff0c\u76f4\u63a5UKE\uff0c\u7b2c\u4e8c\u6b21\u4ea4\u5c31\u76f4\u63a5AK\u4e86\u3002\n\n\n\u73b0\u5728\u6765\u8bb2\u4e00\u8bb2\u9898\uff0c\u6211\u4eec\u9996\u5148\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u81ea\u5b9a\u4e49CMP\u51fd\u6570\u3002\u7136\u540e\u7528\u5230\u4e86\u5e76\u67e5\u96c6\u7684\u8865\u96c6\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u5faa\u73af\u8981\u52302\\*N\uff0c\u5982\u679c\u662f\u7f6a\u72af\u5c31\u8fdb\u5165\u4e24\u4e2a\u96c6\u5408\uff0c\u82e5\u662f\u76f8\u540c\u7684\u6839\uff0c\u5373\u654c\u4eba\u7684\u654c\u4eba\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u8981\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u3002\n\n\n\u9644\u4e0a\u4ee3\u7801\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>                     //\u5934\u6587\u4ef6\n#define maxn 2000100              //\u65e0\u8111define\nusing namespace std;\nint m,n,x,y;\nint f[maxn];\nstruct ren                    //\u7ed3\u6784\u4f53\n{\n    int x;\n    int y;\n    int z;\n}a[maxn];\nint cmp(ren a,ren b)              //\u6bd4\u8f83\u51fd\u6570\uff0c\u4f5c\u4e3aSORT\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\n{\n    return a.z>b.z;\n}\nint find(int i)                     //\u5e76\u67e5\u96c6\u7684\u67e5\u627e\u51fd\u6570\n{\n    if(f[i]!=i)                //\u9012\u5f52\n      f[i]=find(f[i]);\n    return f[i];\n}\nint main()              //\u4e3b\u51fd\u6570\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n      scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);                 //\u8f93\u5165\n    for(int i=1;i<=n*2;i++)\n      f[i]=i;                                                     //\u521d\u59cb\u5316\uff0c\u4e3b\u610f\u4e00\u5b9a\u8981\u52302*N\n    sort(a+1,a+1+m,cmp);                   //\u6392\u5e8f\n    for(int i=1;i<=m;i++)                  //\u4e00\u4e2a\u4e00\u4e2a\u7684\u67e5\u627e\n      {\n          x=find(a[i].x);\n          y=find(a[i].y);\n          if(x==y)                         //\u5982\u679c\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u7531\u4e8e\u662f\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u6240\u4ee5\u5c31\u662f\u6700\u4f18\u89e3\n            {\n                cout<<a[i].z;              //\u76f4\u63a5\u8f93\u51fa\n                return 0;\n            }\n          f[x]=find(a[i].y+n);                          //\u628a\u865a\u62df\u654c\u4eba\u5408\u5e76\n          f[y]=find(a[i].x+n);\n      }\n    cout<<\"0\";                                       //\u7279\u52240\u7684\u60c5\u51b5\n    return 0;\n}\n```",
        "postTime": 1503044880,
        "uid": 16864,
        "name": "\u4e52\u4e53\u9ad8\u624b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u7c7b\u4f3c\u98df\u7269\u94fe\u7684\u505a\u6cd5\uff0c\u5e26\u6743\u503c\u7684\u5e76\u67e5\u96c6\u3002\n\n\u8fb9\u6743\u4e3a0\u8868\u793a\u540c\u76d1\u72f1\uff0c\u4e3a1\u7684\u8868\u793a\u8981\u653e\u5728\u4e0d\u540c\u7684\u76d1\u72f1\u3002\n\n\n\u5904\u7406\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u6392\u5e8f\uff0c\u4ece\u51b2\u7a81\u503c\u6700\u5927\u7684\u5148\u5904\u7406\u3002\n\n\u5224\u65ad\u7684\u65f6\u5019\uff1a\n\n\u5982\u679c\u4e24\u4eba\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5c31\u770b\u5b83\u4eec\u5404\u81ea\u5230\u7956\u5148\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u5b83\u4eec\u4e8b\u5148\u5df2\u7ecf\u88ab\u5b89\u6392\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u90a3\u4e48\u51b2\u7a81\u4e0d\u53ef\u907f\u514d\uff0c\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u5982\u679c\u8ddd\u79bb\u4e0d\u7b49\uff0c\u5219\u8bf4\u660e\u4e0d\u4f1a\u6709\u51b2\u7a81\u3002\n\n\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5219\u5408\u5e76\u3002\n\n\n\n\n    \n    \n    \n        \n        \n        \n    \n    \n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct hen{\n    int a;\n    int b;\n    long long int c;\n};\nhen data[100005];\nint n,m;\nint dis[20005];\nint father[20005];\nvoid anc(int node){\n    if (node==father[node])return;\n    else {\n        anc(father[node]);\n        dis[node]=(dis[node]%2+dis[father[node]]%2)%2;//\u8fd9\u6761\u8bed\u53e5\u5fc5\u987b\u5148\u4e8e\u4e0b\u4e00\u884c\u7684\u8bed\u53e5 \n        father[node]=father[father[node]];\n        return;\n    }\n}\nbool cmp(hen d,hen e){\n    return d.c>=e.c;\n}\nint main(){\n    cin>>n>>m;\n    for (int i=1;i<=m;i++){\n        cin>>data[i].a>>data[i].b>>data[i].c;\n    }\n    sort(data+1,data+(m+1),cmp);\n    for (int i=1;i<=n;i++)father[i]=i;\n    for (int i=1;i<=m;i++){\n        int a,b,c;\n        a=data[i].a;\n        b=data[i].b;\n        c=data[i].c;\n        if (a==b){\n            cout<<c;\n            return 0;\n        }\n//        cout<<endl;\n//        cout<<a<<\"  \"<<b<<\"  \";\n        int dada,dadb,lena,lenb,z;\n        anc(a);\n        anc(b);\n        dada=father[a];\n        dadb=father[b];\n        lena=dis[a];\n        lenb=dis[b];\n        if (dada==dadb){\n            if (lena%2==lenb%2){\n                cout<<c;\n                return 0;\n            }\n            else continue;\n        }\n        z=(lenb+1)%2-lena;\n        while (z<0)z+=2;\n        while (z>=2)z-=2;\n        father[dada]=dadb;\n        dis[dada]=z;\n    } \n    cout<<0;\n    return 0;\n}\n```",
        "postTime": 1479295460,
        "uid": 25048,
        "name": "thegranddesigner",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\n\n```cpp\n#include <algorithm>\n#include <iostream>\nusing namespace std;\nint n,m,f[40001],x,y;\nstruct data{int a,b,c;} e[100001];\nbool gz(const data &a,const data &b) {return a.c > b.c;}\nint find(int x) {return f[x]==x?x:f[x]=find(f[x]);}\nint main() \n{\ncin>>n>>m;\n    for(int i=1;i<=m;i++)\n        cin>>e[i].a>>e[i].b>>e[i].c;\n    for(int i=1;i<=n*2;i++)\n        f[i]=i;//\u521d\u59cb\u5316 \n    //\u6709\u4e24\u4e2a\u96c6 i\u53cb \u4e0e i\u654c \u7528i+n\u8868\u793a\n    sort(e+1,e+m+1,gz);//\u72af\u7f6a\u503c\u964d\u5e8f \n    //\u56e0\u4e3a\u8981\u4f7f\u6700\u5927\u51b2\u7a81\u5c3d\u53ef\u80fd\u5c0f\uff0c\u6240\u4ee5\u5148\u5206\u914d\u5927\u7684(\u5206\u79bb\u673a\u4f1a\u5927) \n    for(int i=1;i<=m;i++) \n{\n        x=find(e[i].a);//\u627e\u81ea\u5df1\u7684\u5b97\u65cf \n        y=find(e[i].b);\n        if(x==y) \n{\n            cout<<e[i].c;\n            return 0;\n        }\n        //\u56e0\u4e3a\u53ea\u6709\u4e24\u4e2a\u76d1\u72f1\uff0c\u90a3\u4e48\u5bf9\u4e00\u4e2a\u4eba\u53ea\u6709\u53cb\u65cf\u4e0e\u654c\u65cf \n        f[y] = find(e[i].a + n);//b\u670b\u53cb\u7684\u5b97\u65cf==a\u654c\u4eba\u7684\u5b97\u65cf\uff1b \n        f[x] = find(e[i].b + n);//\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u670b\u53cb \n    }\n    cout<<0;//\u5b8c\u5168\u65e0\u51b2\u7a81 \n    return 0;\n}\n```",
        "postTime": 1477387694,
        "uid": 18364,
        "name": "LoganC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": ">\u8fd9\u662f\u4e00\u9053\u5f88\u6df3\u6734\u7684\u5e76\u67e5\u96c6\u7684\u95ee\u9898\n>\u603b\u7684\u4e0a\u6765\u770b\uff0c\u53ea\u8981\u52a0\u4e0a\u654c\u4eba\u7684\u5408\u5e76\u5c31\u884c\n>\u5373\u201c\u654c\u4eba\u7684\u654c\u4eba\u4e5f\u662f\u6211\u7684\u670b\u53cb\u201d\n>\u7ecf\u5178\u554a\n>\u4e0a\u4ee3\u7801\n\n>\u7ecf\u5178\u7684\u5feb\u62cd\n\n\n\n```cpp\nprogram P1525;\nvar\n  n,m,i,t:longint;\n  a,b,c,d,fa:array[1..500002] of longint;\n  f:array[1..20000] of boolean;\n//-----------------\nprocedure qsort(l,r:longint);\n  var\n    i,j,m,t:longint;\n  begin\n    i:=l; j:=r;\n    m:=c[(l+r) div 2];\n    repeat\n      while c[i]>m do inc(i);\n      while c[j]<m do dec(j);\n      if i<=j then\n        begin\n          t:=a[i]; a[i]:=a[j]; a[j]:=t;\n          t:=b[i]; b[i]:=b[j]; b[j]:=t;\n          t:=c[i]; c[i]:=c[j]; c[j]:=t; _\u90fd\u8981\u4ea4\u6362\u54e6_\n          inc(i); dec(j);\n        end;\n    until i>j;\n    if j>l then qsort(l,j);\n    if i<r then qsort(i,r);\n  end;\nprocedure csh;\n  var\n    i:longint;\n  begin\n    readln(n,m);\n    for i:= 1 to m do\n      readln(a[i],b[i],c[i]);\n    fillchar(f,sizeof(f),false);\n    for i:= 1 to n do\n      fa[i]:=i;\n  end;\nfunction getfather(v:longint):longint;\n  begin\n    if fa[v]=v then exit(v);\n    fa[v]:=getfather(fa[v]);\n    getfather:=fa[v];\n  end;\nprocedure merge(x,y:longint);\n  begin\n    if fa[x]=y then exit;\n    x:=getfather(x);\n    y:=getfather(y);\n    fa[x]:=y;\n  end;\nfunction judge(x,y:longint):boolean;\n  begin\n    x:=getfather(x);\n    y:=getfather(y);\n    if x=y\n      then\n        exit(true)\n      else exit(false);\n  end;\nbegin\n  csh;\n  qsort(1,m);\n  //for i:= 1 to m do\n    //writeln(a[i],' ',b[i],' ',c[i]);\n  for i:= 1 to m do\n    begin\n      if (getfather(a[i])=getfather(b[i]))\n        then break;\n      if d[a[i]]=0 then d[a[i]]:=b[i]\n        else merge(d[a[i]],b[i]);\n      if d[b[i]]=0 then d[b[i]]:=a[i]\n        else merge(d[b[i]],a[i]);\n      if i=m then c[i]:=0;\n    end;\n  writeln(c[i]);\n  readln;\nend.\n\n```",
        "postTime": 1477101559,
        "uid": 22841,
        "name": "Right",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u9996\u5148\u628a\u8fb9\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6309\u987a\u5e8f\u626b\u63cf\n\n\u5bf9\u4e8e\u5f53\u524d\u7684\u8fb9(u,v)\n\n\u82e5u\u5df2\u7ecf\u5728\u4e00\u4e2a\u76d1\u72f1\u4e2d\uff0cv\u4e0d\u5728\u76d1\u72f1\u4e2d\uff0c\u5219\u628av\u52a0\u5165\u5230\u4e0eu\u5bf9\u7acb\u7684\u76d1\u72f1\u4e2d\n\n\u82e5u\u4e0d\u5728\u76d1\u72f1\u4e2d\uff0cv\u5728\u4e00\u4e2a\u76d1\u72f1\u4e2d\uff0c\u5219\u628au\u52a0\u5165\u5230\u4e0ev\u5bf9\u7acb\u7684\u76d1\u72f1\u4e2d\n\n\u82e5u,v\u90fd\u4e0d\u5728\u76d1\u72f1\u4e2d\uff0c\u5219\u628au,v\u5404\u81ea\u653e\u8fdb\u4e00\u7ec4\u6ca1\u4eba\u4f4f\u7684\u5bf9\u7acb\u7684\u76d1\u72f1\n\n\u82e5u,v\u5728\u76f8\u540c\u76d1\u72f1\u4e2d\uff0c\u77db\u76fe\uff0c\u5219\u5f53\u524d\u8fd9\u6761\u8fb9\u5c31\u662f\u6700\u4f18\u89e3\n\n\u82e5u,v\u5728\u5bf9\u7acb\u76d1\u72f1\u4e2d\uff0c\u76f8\u5b89\u65e0\u4e8b\n\n\u82e5u,v\u90fd\u5728\u76d1\u72f1\u4e2d\uff0c\u4e14v\u4e0d\u5728u\u7684\u5bf9\u7acb\u76d1\u72f1\u4e2d\uff0c\u5219\u628av\u6240\u5728\u7684\u76d1\u72f1\u5e76\u5230u\u7684\u5bf9\u7acb\u76d1\u72f1\u4e2d\uff0c\u628av\u7684\u5bf9\u7acb\u76d1\u72f1\u5e76\u5230u\u7684\u76d1\u72f1\u4e2d\n\n\u76d1\u72f1\u7684\u5408\u5e76\u4f7f\u7528\u5e76\u67e5\u96c6\n\n\u00b7\u00b7\u00b7cpp\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <cstring>\nusing namespace std;\ntypedef long long ll;\nconst int INF = 1e8;\nstruct edge\n{\n    int u,v,w;\n    edge(){}\n    edge( int u , int v , int w ):u(u),v(v),w(w){};\n};\nint n,m;\nedge edges[200010];\nint prsn[20010]; // \u72af\u4eba\u4f4f\u5728\u54ea\u4e2a\u76d1\u72f1\uff0c\u4e0d\u5b58\u57280,1\u53f7\u76d1\u72f1\uff0cn\u53f7\u76d1\u72f1\u7684\u5bf9\u7acb\u76d1\u72f1\u662fn^1\u53f7\u76d1\u72f1\nint nowprsn = 2;\nint prsnpa[20010]; // \u76d1\u72f1\u7684\u5e76\u67e5\u96c6 \nint r[200010]; // \u7528\u4e8e\u8fb9\u7684\u6392\u5e8f \nbool cmp_w( int a , int b )\n{\n    return edges[a].w > edges[b].w;\n}\nvoid init()\n{\n    cin >> n >> m;\n    for( int i = 0 ; i < m ; ++i )\n    {\n        cin >> edges[i].u >> edges[i].v >> edges[i].w;\n        r[i] = i;\n    }\n    for( int i = 2 ; i <= n+1 ; ++i ) // \u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n    {\n        prsnpa[i] = i;\n    }\n    sort( r , r+m , cmp_w );\n}\nint findset( int u )\n{\n    return prsnpa[u]==u ? u : prsnpa[u]=findset(prsnpa[u]);\n}\nvoid unionset( int u , int v )\n{\n    int upa = findset(u);\n    int vpa = findset(v);\n    if( upa != vpa ) prsnpa[upa] = vpa;\n}\nint main()\n{\n    init();\n    int rst = 0;\n    for( int i = 0 ; i < m ; ++i )\n    {\n        edge e = edges[r[i]];\n        if( prsn[e.u] == 0 && prsn[e.v] == 0 ) // \u90fd\u4e0d\u5728\u76d1\u72f1\u4e2d \n        {\n            prsn[e.u] = nowprsn;\n            prsn[e.v] = nowprsn+1;\n            nowprsn += 2;\n            //printf( \"%d lives in %d and %d lives in %d\\n\" , e.u , findset( prsn[e.u] ) , e.v , findset( prsn[e.v] ) );\n        }\n        else if( prsn[e.u] != 0 && prsn[e.v] == 0 ) // u\u5728\u76d1\u72f1\u4e2d\uff0cv\u4e0d\u5728\u76d1\u72f1\u4e2d \n        {\n            prsn[e.v] = ( findset( prsn[e.u] )^1 );\n        }\n        else if( prsn[e.v] != 0 && prsn[e.u] == 0 ) // v\u5728\u76d1\u72f1\uff0cu\u4e0d\u5728 \n        {\n            prsn[e.u] = ( findset( prsn[e.v] )^1 );\n        }\n        else if( findset( prsn[e.u] ) == findset( prsn[e.v] ) ) // u,v\u5728\u76f8\u540c\u76d1\u72f1 \n        {\n            rst = e.w;\n            break;\n        }\n        else if( findset( prsn[e.u] ) == ( findset( prsn[e.v] )^1 ) ) // u,v\u5728\u5bf9\u7acb\u76d1\u72f1 \n        {\n            continue;\n        }\n        else // \u6700\u540e\u4e00\u79cd\u60c5\u51b5 \n        {\n            int uprsn = findset( prsn[e.u] );\n            int vprsn = findset( prsn[e.v] );\n            unionset( uprsn , vprsn^1 );\n            unionset( vprsn , uprsn^1 );\n        }\n    }\n    cout << rst << endl;\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1476435974,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "###\u6700\u4f18\u89e3\uff1a\u5e76\u67e5\u96c6\n\n###\u6700\u52a3\u89e3\uff1a\u4e8c\u5206\u56fe\n\n\n\\_\u5e76\u67e5\u96c6\u53c8\u5feb\u53c8\u597d\u5199\\_\n\n\n\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u8d2a\u5fc3\u5730\u4f18\u5148\u9009\u62e9\u6028\u6c14\u6700\u5927\u7684\u4e24\u4eba\n\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint fa[55555];\n\nstruct S {\n    int a, b, c;\n    friend inline bool operator < (S a, S b) {\n        return a.c > b.c;\n    }\n} dat[100000];\n\nint find(int x) {\n    return fa[x] == x ? x : (fa[x] = find(fa[x]));\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    for (int i(0); i < m; ++i)\n        cin >> dat[i].a >> dat[i].b >> dat[i].c;\n    sort(dat, dat + m);\n    for (int i(0); i < 2 * n; ++i)\n        fa[i] = i;\n    for (int i(0); i < m; ++i) {\n        int fx(find(dat[i].a)), fy(find(dat[i].b));\n        if (fx == fy) {\n            cout << dat[i].c << endl;\n            return 0;\n        }\n        fa[fx] = find(dat[i].b + n);\n        fa[fy] = find(dat[i].a + n);\n    }\n    cout << 0 << endl;\n    return 0;\n}\n```\n\\_\u4e8c\u5206\u56fe\u53c8\u6162\u53c8\u96be\u5199\\_\n\n\n\u4e8c\u5206\u6028\u6c14\u503c\uff0c\u5224\u65ad\u6bd4\u7b54\u6848\u5927\u7684\u8fb9\u80fd\u5426\u6784\u6210\u4e8c\u5206\u56fe\n\n```cpp\n// CodeVS 1069\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn(200000);\n\nstruct Edge {\n    int next, to, weight;\n\n    Edge(int u = 0, int v = 0, int w = 0) : next(u), to(v), weight(w) {\n    }\n} edges[maxn << 1];\n\nint n, m, weight[maxn], head[maxn];\nbool flag[maxn << 1], visit[maxn]; // \u56fe\u4e2d\u7684\u8fb9\uff0c\u67d3\u7684\u989c\u8272\n\nbool dfs(int u) { // \u4e8c\u5206\u56fe\u67d3\u8272\n    for (int i(head[u]); ~i; i = edges[i].next) // \u904d\u5386u\u7684\u51fa\u5ea6\n        if (flag[i]) { // \u5982\u679c\u662f\u5f53\u524d\u56fe\u4e2d\u7684\u8fb9\n            int v(edges[i].to);\n            if (!visit[v]) {\n                visit[v] = !visit[u]; // \u67d3\u6210\u76f8\u53cd\u7684\u989c\u8272\n                if (!dfs(v))\n                    return false;\n            }\n            else if (visit[v] == visit[u]) // \u4e0d\u80fd\u67d3\u6210\u4e8c\u5206\u56fe\n                    return false;\n        }\n    return true;\n}\n\nbool check(int a, int b) {\n    for (int i(0); i < m << 1; ++i)\n        flag[i] = edges[i].weight > b; // \u5c06\u6028\u6c14\u503c\u5927\u4e8e\u4e8c\u5206\u5230\u7684\u7b54\u6848\u7684\u8fb9\u52a0\u5165\u56fe\n    memset(visit, false, sizeof visit);\n    for (int i(0); i < n; ++i)\n        if (!visit[i] && !dfs(i)) // \u4e0d\u662f\u4e8c\u5206\u56fe\n                return false;\n    return true;\n}\n\nint main() {\n    cin >> n >> m;\n    memset(head, -1, sizeof head);\n    for (int i(0); i < m; ++i) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        edges[i << 1] = Edge(head[u], v, w);\n        head[u] = i << 1;\n        edges[i << 1 | 1] = Edge(head[v], u, w);\n        head[v] = i << 1 | 1; // i*2+1\n        weight[i] = w;\n    }\n    sort(weight, weight + m + 1); // \u5305\u62ec\u7b54\u6848\u4e3a0\u7684\u60c5\u51b5\n    cout << *upper_bound(weight, weight + m + 1, 1, check) << endl; // \u4e2d\u95f4\u90a3\u4e2a1\u6ca1\u7528\n    return 0;\n}\n```\nNone",
        "postTime": 1476191257,
        "uid": 22214,
        "name": "wffms69_8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\n```cpp\n//\u8fd9\u9898\u548c\u56e2\u4f19\u90fd\u662f\u5e76\u67e5\u96c6\u7684\u597d\u9898\uff0c\u503c\u5f97\u4e00\u5237\n//\u8fd9\u9898\u601d\u8def\u548c\u56e2\u4f19\u5f88\u50cf\uff0c\u90fd\u662f\u7528\u4e00\u4e2ay\u6570\u7ec4\u5b58\u67d0\u4e2a\u70b9\u7684\u654c\u4eba\u96c6\u5408\u7684\u6839\u8282\u70b9\uff0c\u53ea\u662f\u8fd9\u9898\u3002\u3002\u3002\u3002\u5168\u662f\u654c\u4eba\uff01\n//\u4e8e\u662f\u8fd9\u9898\u662f\u5148\u4ece\u5927\u5230\u5c0f\u5feb\u6392\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u679a\u4e3e\u6bcf\u4e00\u961f\uff0c\u82e5\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u5206\u522b\u5408\u5e76\u5bf9\u65b9\u7684\u5df2\u77e5\u654c\u4eba\u96c6\u5408\uff0c\u5426\u5219\u8f93\u51fa\u8be5\u5bf9\n//\u7684\u77db\u76fe\u503c\uff0cbreak\u6389\uff0c\u5373\u8fd9\u4e24\u5bf9\u4e0d\u80fd\u518d\u88ab\u62c6\u5f00\u3002\n//\u6362\u53e5\u8bdd\u8bf4\uff0cfor\u5bfb\u627e\u5f53\u524d \u7684\u77db\u76fe\u503c\uff0c\u548c\u81ea\u5df1\u7684\u77db\u76fe\u503c\u5927\u4e8e\u8fd9\u4e2a\u503c\u7684\u662f\u654c\u4eba\uff08\u4e0d\u80fd\u5728\u4e00\u4e2a\u96c6\u5408\uff09\uff0c\u5c0f\u4e8e\u7684\u6682\u65f6\u662f\u670b\u53cb\u5173\u7cfb\uff08\u53c2\u89c1\u56e2\u4f19\uff09\n//\u4e0b\u9762\u770b\u4ee3\u7801\nvar sf,fa,a,x,y,f,ans:array[0..150000]of longint;\ni,j,k,m,n,g:longint;\nfunction ask(x:longint):longint;\nbegin\n  if fa[x]=x then exit(x)\n  else ask:=ask(fa[x]);\n  fa[x]:=ask;\nend;\nprocedure bcj(x,y:longint);\nvar i,j:longint;\nbegin\n  i:=ask(x);j:=ask(y);\n  if i<>j then fa[j]:=i;\nend;\nbegin\n//assign(input,'prison.in');\n//assign(output,'prison.out');\n//reset(input);rewrite(output);\n  read(n,m);\n  for i:=1 to m do read(x[i],y[i],a[i]);\n  for i:=1 to n do fa[i]:=i;\n  sort(1,m) ;\n  for i:=m downto 1 do\n  begin\n    if ask(x[i])=ask(y[i])then break;\n    if f[x[i]]=0 then f[x[i]]:=y[i]\n    else bcj(f[x[i]],y[i]);//\u5408\u5e76\u53e6\u4e00\u70b9\u7684\u654c\u4eba\u96c6\u5408\n    if f[y[i]]=0 then f[y[i]]:=x[i]\n    else bcj(f[y[i]],x[i]);\n    if i=1 then a[1]:=0;;\n  end;\n  write(a[i]);\n//close(input);close(output);\nend.\n\n```",
        "postTime": 1471597410,
        "uid": 6063,
        "name": "NephrenRuq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\n\u57fa\u672c\u6ca1\u4eba\u5199   \u4e8c\u5206+\u4e8c\u5206\u56fe\u5224\u65ad\uff0c\u6211\u6765\u5199\u4e86\u4e00\u4e0b\uff0c\u8fd9\u9898\u5e94\u8be5\u8fd9\u79cd\u505a\u6cd5\u662f\u6b63\u89e3\uff0c\u4f46\u5bf9\u4e8e\u5e76\u67e5\u96c6\u6162\u4e86\u4e00\u500d\uff0c\u8bad\u7ec3\u4e8c\u5206\u56fe\u53ef\u4ee5\u5199\u4e00\u5199\uff0c\n\n\u56e0\u4e3a\u672c\u9898\u8fb9\u592a\u591a\u6240\u4ee5\u7528\u7279\u6b8a\u7684\u65b9\u5f0f\u5b58\u8fb9\uff0c\u6839\u672c\u4e0d\u80fd\u7528\u4e8c\u7ef4\u6570\u7ec4\u5b58\u56fe\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define N 200050\nusing namespace std;\nint n,m,tot=0,ans,l,mid,r,w[N],v[N],first[N],next[N],vis[N];\nstruct node{int from,to,weight;}E[100005];\nbool cmp(node x,node y){return x.weight<y.weight;}//\u5c06\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \nvoid add(int x,int y,int z){\n    w[tot]=z;v[tot]=y;\n    next[tot]=first[x];first[x]=tot++;\n}\nbool dfs(int x,int fa){\n    if(vis[x]==vis[fa]&&vis[x]!=-1)return false;\n    if(vis[x]==!vis[fa])return true;\n    vis[x]=!vis[fa];\n    for(int i=first[x];~i;i=next[i])\n        if(v[i]!=fa&&E[mid].weight<w[i])if(!dfs(v[i],x))return 0;\n    return true;\n}\nbool check(){\n    memset(vis,-1,sizeof(vis));\n    for(int i=1;i<=n;i++)\n        if(vis[i]==-1)\n            if(!dfs(i,0))return false;\n    return true;\n}\nint main(){\n    memset(first,-1,sizeof(first));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        int xx,yy,zz;\n        scanf(\"%d%d%d\",&xx,&yy,&zz);\n        add(xx,yy,zz);add(yy,xx,zz);\n        E[i].from=xx;E[i].to=yy;E[i].weight=zz;\n    }\n    sort(E+1,E+1+m,cmp);\n    l=0;r=m;\n    while(l<=r){\n        mid=(l+r)/2;\n        if(!check())l=mid+1;\n        else ans=E[mid].weight,r=mid-1;\n    }\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1470282430,
        "uid": 17964,
        "name": "yzz2016",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u65e2\u7136\u6ca1\u4eba\u5199\u4e8c\u5206\uff0c\u90a3\u4e48\u6211\u6765\u5427= =\n\n\u770b\u5230\u6700\u5927\u503c\u7684\u6700\u5c0f\u4f30\u8ba1\u4e00\u822c\u662f\u4e8c\u5206\uff0c\u4e8e\u662f\u4e8c\u5206\u7b54\u6848\uff0c\u5bf9\u6bcf\u4e2a\u4e8c\u5206\u503c\u8fdb\u884c\u80fd\u5426\u4f7f\u6700\u5927\u5f71\u54cd\u503c\u5c0f\u4e8e\u8be5\u503c\u7684\u5224\u65ad\uff0c\u5982\u679c\u53ef\u4ee5\uff0cr=mid,\u5426\u5219l=mid+1\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u5224\u65ad\u80fd\u5426\u4f7f\u6700\u5927\u5f71\u54cd\u503c\u5c0f\u4e8e\u4e8c\u5206\u503c\uff0c\u6211\u9009\u62e9\u4e86\u5e26\u6743\u5e76\u67e5\u96c6\u3002\u628a\u6743\u503c\u5927\u4e8emid\u7684\u8fb9\u90fd\u52a0\u5165\u5e76\u67e5\u96c6\u5224\u65ad\u903b\u8f91\u4e0a\u662f\u5426\u6210\u7acb\u3002\u8fd9\u91cc\u7684\u5e76\u67e5\u96c6\u7528\u6743\u503c0\u8868\u793ax\u4e0efa[x]\u5728\u540c\u4e00\u76d1\u72f1\uff0c1\u8868\u793ax\u4e0efa[x]\u4e0d\u5728\u540c\u4e00\u76d1\u72f1\u3002\n\n```cpp\n\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nstruct edge\n{\n    int u,v,w;\n}e[100001];\n\nint n,m;\n\nint fa[20001],va[20001]={0};\n\nint find(int x)\n{\n    if(fa[x]==x)return x;\n    int f=fa[x];\n    fa[x]=find(fa[x]);\n    va[x]=(va[x]+va[f])%2;\n    return fa[x];\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int maxs=0;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n        maxs=max(maxs,e[i].w);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        fa[i]=i;\n    }\n    int l=0,r=maxs,mid;\n    while(l<r)\n    {\n        mid=(l+r)/2;\n        for(int i=1;i<=n;i++)\n        {\n            fa[i]=i;\n        }\n        memset(va,0,sizeof(va));\n        bool b=true;\n        for(int i=1;i<=m;i++)\n        {\n            if(e[i].w>mid)\n            {\n                int t1=find(e[i].u),t2=find(e[i].v);\n                if(t1==t2)\n                {\n                    if(va[e[i].u]==va[e[i].v])//\u663e\u7136\u6b64\u65f6\u8fd9\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u76d1\u72f1\uff0c\u77db\u76fe\n                    {\n                        b=false;\n                        break;\n                    }\n                }\n                else\n                {\n                    va[t2]=(va[e[i].u]+va[e[i].v]+1)%2;\n                    fa[t2]=fa[t1];\n                }\n            }\n        }\n        if(b)\n        {\n            r=mid;\n        }\n        else\n        {\n            l=mid+1;\n        }\n    }\n    printf(\"%d\",l);\n    return 0;\n}\n\n```",
        "postTime": 1466508465,
        "uid": 14815,
        "name": "crowworks695",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "**\n\u597d\u9898\u554a= =\n\n\u8c8c\u4f3c\u4e24\u79cd\u53ef\u4ee5\u641e\n\n\u4e00\u79cd\u662f\u4e8c\u5206\u7b54\u6848  \u628a\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u4e8c\u5206\u5230\u7684\u6700\u5927\u503c\u7ec4\u6210\u4e00\u5f20\u56fe  \u5224\u6709\u65e0\u5947\u73af\uff08\u5076\u73af\u4e0d\u5f71\u54cd\uff09\n\nwoc\u8bf4\u5230\u8fd9\u91cc\u53c8\u60f3\u8d77\u53ef\u601c\u7684day1T2\u4e86   QAQ\n\n\u6709\u5947\u73af\u5c31\u5f80\u4e0a\u4e00\u534a\u641c \u6ca1\u6709\u5c31\u5f80\u4e0b\u4e00\u534a\n\n\u4e00\u79cd\u662f\u5e76\u67e5\u96c6\n\n\u6bcf\u4e2a\u70b9\u7ed9\u4e00\u4e2a\u5f71\u5b50  \u5047\u8bbe\u4e3ai+n  \u90a3\u4e48i\u548ci+n\u5728\u4e0d\u540c\u76d1\u72f1\n\n\u5148\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f  \u4e00\u76f4\u5408\u5e76\u96c6\u5408\n\n\u5982\u679cfindset(u[i])==findset(v[i])\u5219\u8f93\u51fa\u5f53\u524d\u8fb9\u6743\uff1b\n\n\u5426\u5219\u5408\u5e76u[i]\u548cv[i]+n  \u4e0ev[i]\u4e0eu[i]+n\n\n\u610f\u601d\u5c31\u662fa\u5bf9b\u662f\u654c\u4eba  b\u5bf9c\u662f\u654c\u4eba  \u90a3\u4e48a c\u5c31\u662f\u670b\u53cb = =\n\n\u5927\u6982\u5c31\u8fd9\u6837\u4e86\u5427\n\n\u636e\u8bf4\u51fa\u9898\u4eba\u60f3\u8003\u7684\u662f\u7b2c\u4e00\u79cd\u89e3\u6cd5\n\n\u4e0d\u77e5\u9053\u7b2c\u4e8c\u79cd\u662f\u54ea\u4e2a\u5927\u795e\u60f3\u51fa\u6765\u7684\n\n\u6211\u7684\u4ee3\u7801\u662f\u7b2c\u4e8c\u79cd\u65b9\u6cd5\n\n**\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=20000+10;\nconst int maxm=100000+10;\n\nint n,m;\nint w[maxm],u[maxm],v[maxm],id[maxm],p[maxn*2];\nint cmp(int a,int b){return w[a]>w[b];}\nvoid init_data()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n      id[i]=i,scanf(\"%d%d%d\",u+i,v+i,w+i);\n    for(int i=1;i<=2*n;i++) p[i]=i;\n    sort(id+1,id+m+1,cmp);\n}\n\nint findset(int x)\n{\n    if(p[x]==x) return x;\n    else return p[x]=findset(p[x]);\n}\n\nint solve()\n{\n    for(int k=1;k<=m;k++)\n    {\n        int i=id[k];\n        int x=findset(u[i]);   //\n        int y=findset(v[i]);\n        if(x==y) return w[i];\n        int x1=findset(u[i]+n);\n        int y1=findset(v[i]+n);\n        p[x]=y1;p[y]=x1;\n    }\n    return 0;\n}\n\nint main()\n{\n    init_data();\n    printf(\"%d\",solve());\n    return 0;\n}\n\n\n```",
        "postTime": 1452584961,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\n```cpp\nprogram prison;\nconst\n  maxn=20000; maxm=100000;\nvar\n  n,m:longint;\n  f,s:array[0..maxn+1] of longint;\n  a,b,c:array[0..maxm+1] of longint;\nfunction findsets(k:longint):longint;\nvar\n  y:longint;\nbegin\n  if f[k]<>k then\n    begin\n    y:=f[k]; f[k]:=findsets(y);  {\u8def\u5f84\u7684\u538b\u7f29}\n    s[k]:=(s[k]+s[y]) mod 2;  {\u5728\u8def\u5f84\u538b\u7f29\u4e2d\u6b63\u786e\u7684\u5efa\u7acb\u4e0e\u65b0\u7684\u7236\u4eb2\u7684\u65b0\u7684\u5173\u7cfb}\n    end;\n  exit(f[k]);\nend;\nprocedure combinesets(a,b:longint);\nbegin\n  s[f[a]]:=(s[a]+1) mod 2;  {\u5efa\u7acba\u7684\u7236\u4eb2\u4e0eb\u7684\u5173\u7cfb\uff0c1\u4e3a\u654c\u4eba\uff0c0\u4e3a\u670b\u53cb}\n  f[f[a]]:=b;  {\u6539\u53d8a\u7684\u7236\u4eb2\u7684\u5bf9\u8c61\uff0c\u4e3ab}\nend;\nprocedure work;\nvar\n  i,sa,sb:longint;\nbegin\n  for i:=m downto 1 do  {\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u8fdb\u884c\u4e8c\u5206\u56fe\u7684\u5224\u65ad}  \n    begin\n    sa:=findsets(a[i]); sb:=findsets(b[i]);\n    if sa=sb then\n      begin\n      if s[a[i]]=s[b[i]] then  {\u5f53\u4e8c\u8005\u4e4b\u524d\u53d1\u751f\u8fc7\u5173\u7cfb\uff0c\u5e76\u4e14\u73b0\u5728\u7684\u5173\u7cfb\u548c\u4e4b\u524d\u7684\u5173\u7cfb\u76f8\u77db\u76fe\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7684\u4e3a\u8f93\u51fa\u89e3}\n        begin\n        writeln(c[i]);\n        exit;\n        end;\n      end\n    else combinesets(a[i],b[i]);  {\u5426\u5219\u5c06\u4e8c\u8005\u5408\u5e76\uff0c\u5efa\u7acb\u5173\u7cfb}\n    end;\n  writeln(0);{\u5220\u53bb\u6240\u6709\u7684\u8fb9\u540e\u4ecd\u7136\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u8bf4\u660e\u6b64\u65f6\u5e94\u5f53\u8f93\u51fa0}\nend;\nprocedure qsort(l,r:longint);  {\u5c06\u8bfb\u5165\u7684\u8fb9\u6309\u7167\u5927\u5c0f\u6392\u5e8f}\nvar\n  i,j,x,y:longint;\nbegin\n  i:=l; j:=r; x:=c[(l+r) div 2];\n  repeat\n    while c[i]<x do inc(i);\n    while c[j]>x do dec(j);\n    if not (i>j) then\n      begin\n      y:=a[i]; a[i]:=a[j]; a[j]:=y;\n      y:=b[i]; b[i]:=b[j]; b[j]:=y;\n      y:=c[i]; c[i]:=c[j]; c[j]:=y;\n      inc(i); dec(j);\n      end;\n  until i>j;\n  if j>l then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nprocedure makesets;  {\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5e76\u67e5\u96c6}\nvar\n  i:longint;\nbegin\n  for i:=1 to n do f[i]:=i;\nend;\nprocedure reads;  {\u8bfb\u5165\u6570\u636e}\nvar\n  i:longint;\nbegin\n  readln(n,m);\n  makesets;\n  for i:=1 to m do readln(a[i],b[i],c[i]);\nend;\nbegin\n  assign(input,'prison.in');\n  reset(input);\n  assign(output,'prison.out');\n  rewrite(output);\n  reads; \n  qsort(1,m);\n  work;\n  close(input);\n  close(output);\nend.\n\u5c31\u662f\u4e2a\u56fe\u8bba\u5e76\u67e5\u96c6\u3002\u3002\n```",
        "postTime": 1387883086,
        "uid": 1338,
        "name": "Nekonata",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "# \u4e8c\u5206\u56fe\n## Bipartite Graph\n### \u4e8c\u5206\u56fe\u5b9a\u4e49\n\u5bf9\u4e8e\u65e0\u5411\u56feG\uff0c\u5982\u6240\u6709\u9876\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u6240\u6709\u8fb9\u90fd\n\u4e0d\u51fa\u73b0\u5728\u6bcf\u90e8\u5206\u5185\u90e8\uff0c\u5219\u79f0\u56feG\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\n### \u4e8c\u5206\u56fe\u4e3e\u4f8b\n\u7fbd\u6bdb\u7403\u6df7\u5408\u53cc\u6253\uff1a\u6bcf\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u7403\u5458\uff0c\u6bcf\u6761\u8fb9\u4ee3\u8868\u4e00\u4e2a\u6df7\u5408\u53cc\u6253\u7ec4\u5408\n\n\u7535\u89c6\u76f8\u4eb2\u7c7b\u8282\u76ee\uff1a\u6bcf\u4e2a\u70b9\u4ee3\u8868\u4e00\u4f4d\u5609\u5bbe\uff0c\u6bcf\u6761\u8fb9\u4ee3\u8868\u4e00\u5bf9\u5609\u5bbe\u914d\u5bf9\u6210\u529f\n\n## \u4e8c\u5206\u56fe\u5224\u5b9a- \u4e24\u79cd\u7b97\u6cd5\n1. \u9ed1\u767d\u67d3\u8272 DFS/BFS\n2. \u53cd\u7269\u8d28\u56fe \u5e76\u67e5\u96c6\n\n![DFS\u9ed1\u767d\u67d3\u8272](C:\\Users\\lenvoo\\Desktop\\hehe)\n\n![\u53cd\u7269\u8d28\u56fe- \u5e76\u67e5\u96c6](C:\\Users\\lenvoo\\Desktop\\haha)\n\n![DFS-\u9ed1\u767d\u67d3\u8272 \u5bf9\u6bd4 \u5e76\u67e5\u96c6-\u53cd\u7269\u8d28\u56fe](C:\\Users\\lenvoo\\Desktop\\kiki)\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define N 20009\nusing namespace std;\nint n,m,a,b,c,x,BiG,vst[N];\nvector<int> to[N],w[N];\nvoid dfs(int u,int color){//u\u5c06\u67d3\u8272color \n\tif(!BiG)return;\n\tvst[u]=color;\n\tfor(int i=0;i<to[u].size();i++)\n\t\tif(w[u][i]>x){\n\t\t\tif(!vst[to[u][i]])dfs(to[u][i],3-color);\n\t\t\telse if(vst[to[u][i]]==color)BiG=0; //\u90bb\u5c45\u67d3\u8272\u76f8\u540c\u4e3a\u975e\u6cd5 \n\t\t}\n}\nbool OK(int mid){//\u80fd\u5426\u4e0d\u770b\u5230mid\u4ee5\u4e0a\u51b2\u7a81,\u5927\u8fb9\u9700\u8981\u8fdb\u4e8c\u5206\u56fe \n\tx=mid;  BiG=1;\n\tfill(vst,vst+n+1,0);\n\tfor(int i=1;i<=n&&BiG;i++)\n\t\tif(!vst[i])\tdfs(i,1);\n\treturn BiG;\n}\nint main(){\n\tcin>>n>>m;\n\tint l=0,r=0;\n\tfor(int i=0;i<m;i++){\n\t\tcin>>a>>b>>c;\n\t\tto[a].push_back(b);w[a].push_back(c);\n\t\tto[b].push_back(a);w[b].push_back(c);\n\t\tr=max(r,c);\n\t}\n\tint ans=r;\n\twhile(l<=r){\n\t\tint mid=l+(r-l)/2;\n\t\tif(OK(mid))ans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tcout<<ans<<endl;\t\n\treturn 0;\n}\n```\n",
        "postTime": 1566895072,
        "uid": 185092,
        "name": "Frainstak",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5982\u4f55\u5206\u914d\u7684\u601d\u8def\u975e\u5e38\u660e\u663e\uff0c\u628a\u5c3d\u53ef\u80fd\u5927\u7684\u62b5\u6d88\uff08\u5373\u653e\u5728\u4e0d\u540c\u7684\u76d1\u72f1\uff09\u7136\u540e\u7b49\u5230\u5b9e\u5728\u4e0d\u80fd\u62b5\u6d88\u65f6\u518d\u8f93\u51fa\n\nBingo\uff01\u5feb\u6392\uff01\n\n\u90a3\u600e\u4e48\u7ef4\u62a4\u4e24\u4e2a\u7f6a\u72af\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f\n\nBingo\uff01\u5e76\u67e5\u96c6\uff01\n\n\u5230\u6b64\u4e3a\u6b62\uff0c\u5927\u81f4\u7684\u601d\u8def\u5df2\u7ecf\u6c34\u843d\u77f3\u51fa\uff1a\u5148\u5feb\u6392\uff0c\u7136\u540e\u4e00\u5bf9\u5bf9\u5224\u65ad\uff0c\u8fd9\u65f6\u7684father\u8bb0\u5f55\u7684\u662f\u4e24\u4e2a\u7f6a\u72af\u662f\u5426\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\n\n\u5f88\u50cf\u975e\u5e38\u88f8\u7684\u8d2a\u5fc3+\u5e76\u67e5\u96c6\n\n\u4f46\u662f\uff0c\u673a\uff08wu\uff09\u667a\uff08chi\uff09\u7684\u6211\u6ce8\u610f\u5230\u4e86\u5b83\u7684**\u666e\u53ca+/\u63d0\u9ad8**\n\n\u600e\u4e48\u53ef\u80fd\u628a\u4e00\u9053\u88f8\u9898\u6446\u5728\u8fd9\u4e2a\u4f4d\u7f6e\uff1f\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u7c7b\u4f3c\u4e8eP1892\u56e2\u4f19\u8fd9\u9053\u9898\uff0c\u6709\u4e00\u79cd\u201c\u6211\u654c\u4eba\u7684\u654c\u4eba\u662f\u6211\u7684\u670b\u53cb\u201d\u7684\u5173\u7cfb\n\n\u4e3e\u4e2a\u6817\u5b50:\n\n\u7f6a\u72afA\u4e0e\u7f6a\u72afB\u6709\u4ec7\uff08\u4ec7\u6068\u503c666\uff09\uff0c\u7f6a\u72afB\u4e0e\u7f6a\u72afC\u6709\u4ec7\uff08\u4ec7\u6068\u503c233\uff09\n\n\u4f46\u5728\u6392\u5e8f\u5b8c\u540e\uff0c\u53d1\u73b0\u7f6a\u72afA\u4e0e\u7f6a\u72afB\u5904\u7406\u7684\u4f18\u5148\u7ea7\u6bd4\u7f6a\u72afB\u4e0e\u7f6a\u72afC\u5904\u7406\u7684\u4f18\u5148\u7ea7\u8981\u9ad8\uff08\u5373\u5148\u5faa\u73afA,B\u540e\u5faa\u73afB,C\uff09\n\n\u6240\u4ee5\u6211\u9009\u62e9\u628aA\u653e\u5230\u76d1\u72f1\u4e00\u53f7\uff0cB\u653e\u5230\u76d1\u72f1\u4e8c\u53f7\uff0c\u90a3\u4e48\u6b64\u65f6C\u4e5f\u8981\u653e\u5230\u76d1\u72f1\u4e00\u53f7\uff0c\u6709\u56e0\u4e3a\u4e0a\u6587\u63d0\u8fc7father\u5b58\u50a8\u7684\u662f\u4e24\u4e2a\u7f6a\u72af\u662f\u5426\u5728\u540c\u4e00\u4e2a\u76d1\u72f1\uff0c\u6240\u4ee5A\u7684father\u662fC\uff08\u5012\u8fc7\u6765\u4e5f\u53ef\u4ee5\uff09\n\n\u8fd9\u65f6\u5019\u5c31\u80fd\u770b\u51fa\u6765\u201c\u6211\u654c\u4eba\u7684\u654c\u4eba\u662f\u6211\u7684\u670b\u53cb\u201d\u4e86\u5427\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```Pascal\nvar\n\tfather,enemy,a,b,c:array[0..200010]of longint;\n\tn,m,i,j,x,y:longint;\n\t//enemy\u8868\u793a\u4ec7\u4eba\n    \nfunction getfather(p:longint):longint;\nbegin \t\n\tif father[p]<>p then father[p]:=getfather(father[p]);\n\texit(father[p]);\nend; \n\nprocedure sort(l,r: longint);\nvar\n\ti,j,x,y: longint;\nbegin\n\ti:=l;\n\tj:=r;\n\tx:=c[(l+r) div 2];\n\trepeat\n\t\twhile c[i]>x do inc(i);\n\t\twhile x>c[j] do dec(j);\n\t\tif not(i>j) then\n\t\t\tbegin\n                y:=a[i];\n                a[i]:=a[j];\n                a[j]:=y;\n\t\t\t\ty:=b[i];\n\t\t\t\tb[i]:=b[j];\n\t\t\t\tb[j]:=y;\n\t\t\t\ty:=c[i];\n\t\t\t\tc[i]:=c[j];\n\t\t\t\tc[j]:=y;\n                inc(i);\n\t\t\t\tdec(j);\n\t\t\tend;\n\tuntil i>j;\n\tif l<j then sort(l,j);\n\tif i<r then sort(i,r);\nend;\n\nbegin \n\treadln(n,m);\n\tfor i:= 1 to n do father[i]:=i;\n\tfor i:= 1 to m do readln(a[i],b[i],c[i]);\n\tsort(1,m);\n\tfor i:= 1 to m do \n\t\tbegin \n\t\t\tx:=getfather(a[i]);\n\t\t\ty:=getfather(b[i]);\n\t\t\tif x=y then \n\t\t\t\tbegin\n\t\t\t\t\twriteln(c[i]);\n\t\t\t\t\thalt;\n\t\t\t\tend; \n\t\t\tif enemy[a[i]]=0 then enemy[a[i]]:=b[i] else father[y]:=getfather(enemy[a[i]]);\n\t\t\tif enemy[b[i]]=0 then enemy[b[i]]:=a[i] else father[x]:=getfather(enemy[b[i]]);\n            //\u91cd\u70b9\u4f53\u4f1a\u4e00\u4e0b\n\t\tend;\n\twriteln(0);\nend. \n```",
        "postTime": 1517663833,
        "uid": 51508,
        "name": "\u96c5\u513f\u8d1d\u5fb7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    },
    {
        "content": "\u6c42\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u4e8c\u5206\u8003\u8651\u3002\u9996\u5148\u4e8c\u5206\u6700\u5927\u5f71\u54cd\u529bx\uff0c\u4e4b\u540e\u53bb\u9664\u5c0f\u7b49\u4e8ex\u7684\u8fb9\u3002\u7531\u4e8e\u6700\u5927\u5f71\u54cd\u529b\u4e3ax\uff0c\u800c\u7559\u4e0b\u6765\u7684\u8fb9\u7684\u8fb9\u6743\u90fd\u662f\u5927\u4e8ex\u7684\u3002\u6240\u4ee5\uff0c\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0d\u80fd\u5206\u5728\u4e00\u8d77\u3002\u8fd9\u662f\u4e00\u4e2a\u660e\u663e\u7684\u9ed1\u767d\u67d3\u8272\u6a21\u578b\u3002\u6211\u4eec\u5bf9\u53bb\u9664\u8fb9\u540e\u7684\u56fe\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u5982\u679c\u67d3\u8272\u6ca1\u6709\u77db\u76fe\u8bf4\u660e\u53ef\u884c\uff0c\u5426\u5219\u4e0d\u53ef\u884c\u3002\n",
        "postTime": 1438262991,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1525 \u3010\u5173\u62bc\u7f6a\u72af\u3011"
    }
]