[
    {
        "content": "\u8fd9\u9898\u76ee\u5176\u5b9e\u4e00\u770b\u5c31\u5e94\u8be5\u77e5\u9053\u662f\u4e00\u4e2a\u6bd4\u8f83\u57fa\u672c\u7684 DP \u6a21\u578b\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u4e0d\u5b58\u5728 \"\u5982\u679c Barica \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u91cf\uff0c\u5979\u5c31\u4e0d\u80fd\u8fdb\u884c\u8df3\u8dc3\u3002\" \u7684\u6761\u4ef6\u4e0b\u3002\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a Barica \u53ea\u80fd\u662f\u5411\u4e0b\u6216\u8005\u5411\u53f3\u8d70\u3002\n\n\u7136\u540e\u6211\u4eec\u53c8\u53d1\u73b0\u8fd9\u4e2a $n$ \u6bd4\u8f83\u5927\uff0c\u5750\u6807\u4e0d\u53ef\u80fd\u4e00\u4e2a\u4e00\u4e2a\u679a\u4e3e\u8fc7\u53bb\u3002\n\n\u7531\u6b64\u660e\u767d\uff0c\u590d\u6742\u5ea6\u5927\u6982\u662f\u4f9d\u8d56\u4e8e $n$ \u7684\uff0c\u5e76\u4e14\u72b6\u6001\u5927\u6982\u662f $f_i$ \u8868\u793a\u5f53\u524d\u5230\u8fbe\u8fd9\u4e2a\u5750\u6807\u6240\u6709\u7684\u80fd\u91cf\u7684\u6700\u5927\u3002\n\n\u5f80\u8fd9\u8fb9\u53bb\u5411\uff0c\u53d1\u73b0\u5bf9\u4e8e\u90a3\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u53ea\u9700\u8981\u53d6\u4e00\u4e2a\u524d\u7f00\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5f53\u7136\u6211\u4eec\u8981\u5bf9\u521d\u59cb\u7684\u6570\u7ec4\u8fdb\u884c\u5750\u6807\u4e0b\u7684\u6392\u5e8f\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u6765\u8003\u8651 \"\u5982\u679c Barica \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u91cf\uff0c\u5979\u5c31\u4e0d\u80fd\u8fdb\u884c\u8df3\u8dc3\u3002\" \u3002\n\n\u60f3\u5230\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u5728\u6bcf\u4e00\u4e2a\u8f6c\u79fb\u4e0b\u90fd\u7279\u5224\u4e00\u4e0b\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $K$\u3002\n\n\u4e8e\u662f\u8fd9\u6837\u5c31\u5199\u6389\u4e86\u3002\n\n\u8fd9\u8fb9\u8981\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int INF=3e5+5;\nstruct _node_data {\n        int x,y,z,id;\n} aa[INF];\nint n,k,f[INF],fx[INF][2],fy[INF][2],f1[INF],tot,ans[INF][5];\nbool cmp(_node_data xx,_node_data yy) {\n        if (xx.x!=yy.x) return xx.x<yy.x;\n        else return xx.y<yy.y;\n}\nvoid updata(int x,int y,int z,int p) {\n        if (fx[x][0]<p)\n                fx[x][0]=p,fx[x][1]=z;\n        if (fy[y][0]<p)\n                fy[y][0]=p,fy[y][1]=z;\n        return;\n}\nvoid print(int x) {\n        if (!x) return;\n        print(f1[x]);\n        tot++;\n        ans[tot][0]=aa[x].x;\n        ans[tot][1]=aa[x].y;\n        return;\n}\nsigned main()\n{\n        memset(fx,-63,sizeof fx);\n        memset(fy,-63,sizeof fy);\n        scanf(\"%d %d\",&n,&k);\n        for (int i=1; i<=n; i++) {\n                scanf(\"%d %d %d\",&aa[i].x,&aa[i].y,&aa[i].z);\n                aa[i].z-=k; aa[i].id=i;\n        }\n        sort(aa+1,aa+1+n,cmp);\n        int ii=0;\n        for (int i=1; i<=n; i++)\n                if (aa[i].id==1)\n                        f[i]=aa[i].z+k,\n                        fx[aa[i].x][0]=aa[i].z+k,\n                        fy[aa[i].y][0]=aa[i].z+k,\n                        fx[aa[i].x][1]=i,\n                        fy[aa[i].y][1]=i,ii=i;\n        for (int i=ii+1; i<=n; i++) {\n                int xx=fx[aa[i].x][0],yy=fx[aa[i].x][1];\n                if (xx<fy[aa[i].y][0])\n                        xx=fy[aa[i].y][0],yy=fy[aa[i].y][1];\n                f1[i]=yy;\n                if (xx<k) {f[i]=-1e9; continue;}\n                f[i]=xx+aa[i].z;\n                updata(aa[i].x,aa[i].y,i,f[i]);\n        }\n        int fl=0;\n        // cout<<f[5]<<\"\\n\";\n        for (int i=1; i<=n; i++)\n                if (aa[i].id==n && f[i]>0) {\n                        cout<<f[i]<<\"\\n\";\n                        print(i); fl=1;\n                }\n        // if (!fl) cout<<\"-1000000000\\n\";\n        cout<<tot<<\"\\n\";\n        for (int i=1; i<=tot; i++)\n                cout<<ans[i][0]<<\" \"<<ans[i][1]<<\"\\n\";\n        return 0;\n}\n\n```\n\n\u5982\u679c\u6709\u95ee\u9898\uff0c\u8fd8\u8bf7\u6307\u51fa\u3002",
        "postTime": 1636805401,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "P7936 \u9898\u89e3"
    },
    {
        "content": "# \u7ebf\u6027dp && \u7ef4\u62a4\u524d\u7f00\u548c\n\n\n\n------------\n\n## \u9898\u610f\n- \u544a\u8bc9\u4f60 $n$ \u4e2a\u70b9\u7684\u70b9\u6743\u3001\u5750\u6807\u3002\n- \u4f60\u53ef\u4ee5\u4ece $(x,y)$ \u79fb\u52a8\u5230 $(x + i, y)$ \u6216 $(x, y + i)$ , $i$ > 0\u3002\n- \u6bcf\u6b21\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u70b9\u9700\u8981\u6d88\u8017 $k$ \u70b9\u80fd\u91cf\u3002\n- \u79fb\u52a8\u540e\u53ef\u4ee5\u8865\u5145\u8be5\u70b9\u70b9\u6743\u7684\u80fd\u91cf\u3002\n\n\u6c42\u4ece\u70b9 $1$ \u5230\u70b9 $n$ \u7684\u4e00\u6761\u8def\u5f84\uff0c\u5e76\u6253\u5370\u8def\u5f84\u3002\n\n\n\n------------\n\n## \u601d\u8def\n1. \u7ebf\u6027dp\n\t- \u65e0\u540e\u6548\u6027\uff1a\u6bcf\u6b21\u79fb\u52a8\uff0c\u6a2a\u7eb5\u5750\u6807\u53ea\u4f1a\u53d8\u5927\u6216\u4e0d\u53d8\u3002\n\t- \u6700\u4f18\u5b50\u7ed3\u6784\uff1a \u663e\u7136\u3002\n\n1. \u524d\u7f00\u548c\n\t- $ n < 10 ^ 5$\uff0c\u6240\u4ee5 $n^2$ \u679a\u4e3e\u8d85\u65f6\u3002\n\n1. \u6392\u5e8f\n\t- \u4fdd\u8bc1dp\u987a\u5e8f\u3002\n\t- \u7ef4\u62a4\u524d\u7f00\u548c\u3002\n\n## \u5b9e\u73b0\n- $f[i]$ : \u79fb\u52a8\u5230\u8282\u70b9 $i$ \u7684\u6700\u5927\u5269\u4f59\u80fd\u91cf\u3002\n- $pre[i]$ : \u6700\u4f18\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u8282\u70b9 $i$ \u7684\u524d\u9a71\u3002\n- $prex[i]$ : \u5f53\u524d\u72b6\u6001\u4e0b\uff0c\u7b2c $i$ \u884c\u7684\u524d\u7f00\u4e2d\uff0c\u4f7f $f[i]$ \u6700\u5927\u7684\u4e0b\u6807\u3002\n- $prey[i]$ : \u5f53\u524d\u72b6\u6001\u4e0b\uff0c\u7b2c $i$ \u5217\u7684\u524d\u7f00\u4e2d\uff0c\u4f7f $f[i]$ \u6700\u5927\u7684\u4e0b\u6807\u3002\n\n\u4e8e\u662f\u6709\uff1a\n## $f[i] = max(f[j] - cost + w[i])$\n\n## \u4ee3\u7801\n\n```cpp\n// https://www.luogu.com.cn/problem/P7936\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nusing ll = long long;\nconst int inf = 0x3f3f3f3f;\n#define rf(i, n) for (int i = 1; i <= (n); ++i)\nint rad(); // read int\nconst int max_size = 5 + 1e5;\nconst int maxn = 5 + 3e5;\n\nint n, cost;\nstruct Pos {\n    int x, y, w, id;\n    bool operator<(const Pos &other) const {\n        if (x != other.x) return x < other.x;\n        return y < other.y;\n    }\n} pos[maxn];\n\nint pre[maxn];              // pre[i]: \u5230\u8fbe node i  \u7684\u6700\u4f18\u89e3\u7684\u524d\u4e00\u6b65\nint f[maxn];                // \u5230\u8fbe\u8282\u70b9 i \u6240\u5269\u80fd\u91cf\u7684\u6700\u5927\u503c\nint prex[maxn], prey[maxn]; //\n// f[i] = max(f[j] - cost + w[i]), j to i\n\nvoid show(int now, int dep = 0) {\n    if (now == 0) {\n        printf(\"%d\\n\", dep);\n        return;\n    };\n    show(pre[now], dep + 1);\n    printf(\"%d %d\\n\", pos[now].x, pos[now].y);\n}\n\nvoid update(int now, int from) {\n    if (from == 0 || f[from] < cost) return;\n    if (f[now] < f[from] - cost + pos[now].w) {\n        f[now] = f[from] - cost + pos[now].w;\n        pre[now] = from;\n    }\n}\n\nint main() {\n    n = rad(), cost = rad();\n    rf(i, n) {\n        pos[i].x = rad(), pos[i].y = rad(), pos[i].w = rad();\n        pos[i].id = i;\n    }\n    sort(pos + 1, pos + 1 + n);\n    int start = 1, finish = 1; // \u627e\u5230\u8d77\u70b9\uff0c\u7ec8\u70b9\n    while (pos[start].id != 1)\n        start++;\n    while (pos[finish].id != n)\n        finish++;\n\n    f[start] = pos[start].w, prex[pos[start].x] = start, prey[pos[start].y] = start;\n    for (int i = start + 1; i <= finish; ++i) {\n        update(i, prex[pos[i].x]);\n        update(i, prey[pos[i].y]);\n        if (f[i] > f[prex[pos[i].x]]) prex[pos[i].x] = i;\n        if (f[i] > f[prey[pos[i].y]]) prey[pos[i].y] = i;\n    }\n    printf(\"%d\\n\", f[finish]);\n    show(finish);\n}\n\nint rad() {\n    int back = 0, ch = 0, neg = 0;\n    for (; ch < '0' || ch > '9'; ch = getchar())\n        neg = ch == '-';\n    for (; ch >= '0' && ch <= '9'; ch = getchar())\n        back = (back << 1) + (back << 3) + (ch & 0xf);\n    return (back ^ -neg) + neg;\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1646634506,
        "uid": 577620,
        "name": "helium347",
        "ccfLevel": 0,
        "title": "P7936 \u9898\u89e3"
    }
]