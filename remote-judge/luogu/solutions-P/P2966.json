[
    {
        "content": "#### Description\n\n> [P2966](https://www.luogu.com.cn/problem/P2966)     \n> \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42 $q$ \u7ec4\u8be2\u95ee\uff0c$s_i$ \u5230 $t_i$ \u7684\u8fb9\u6743\u4e4b\u548c\u4e0e\u70b9\u6743\u7684\u6700\u5927\u503c\u7684\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n#### Solution\n\nFloyd\u3002\n\n\u9996\u5148\u662f\u5bf9\u70b9\u6743\u8fdb\u884c\u6392\u5e8f\uff08\u8bb0\u5f97\u8981\u8bb0\u539f\u6765\u7684\u987a\u5e8f\uff0c\u4ee5\u4fbf\u4e4b\u540e\u8dd1 floyd\uff09\u3002\n\n\u7136\u540e\u90bb\u63a5\u8868\u5b58\u8fb9\uff0cfloyd \u7684\u7ecf\u5178\u64cd\u4f5c\u3002\n\n\u7136\u540e\u5c31\u4e09\u91cd\u5faa\u73af\u8dd1 floyd \u5373\u53ef\uff0c\u6ce8\u610f $dist$ \u662f\u8dd1\u8fb9\u6743\uff0c$ans$ \u662f\u8fb9\u6743\u4e0e\u70b9\u6743\u3002\n\n\u6211\u4eec\u7528\u4e0a floyd \u7684\u8f6c\u79fb\u516c\u5f0f\uff1a\n\n$$dist_{i,j}=\\min\\{dist_{i,j},dist_{i,k}+dist_{k,j}\\}$$\n\n\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u7528 $i,j,k$\uff0c\u56e0\u4e3a\u70b9\u6743\u662f\u6392\u8fc7\u5e8f\u7684\uff0c\u6240\u4ee5\u90fd\u8981\u8f6c\u53d8\u6210 $c_i.dis$\uff0c$c_j.dis$\uff0c$c_k.dis$\u3002\n\n\u6700\u540e $ans$ \u7684\u8f6c\u79fb\u516c\u5f0f\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6309\u7167\u9898\u76ee\u6240\u8bf4\u7684\uff1a\n\n$$ans_{i,j}=\\min\\{ans_{i,j},dist_{i,j}+\\max\\{c_i.val,c_j.val,c_k.val\\}\\}$$\n\n\u8ddf\u4e0a\u9762 $dist$ \u7684\u8f6c\u79fb\u516c\u5f0f\u4e00\u6837\uff0c$i,j,k$ \u8fd8\u662f\u8981\u8f6c\u53d8\u4e3a $c_i.dis$\uff0c$c_j.dis$\uff0c$c_k.dis$\u3002\n\n\u6700\u540e\u8f93\u51fa $ans_{a,b}$ \u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u4e0a\u9762\u7684 $dis$ \u548c $val$ \u4ee3\u8868\u7684\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u770b\u4e0b\u65b9\u7684\u4ee3\u7801\u3002\n\n#### Code 1\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, q;\nint ans[1005][1005], dist[1005][1005]; \nconst int inf = 0x3f3f3f3f;\n\nstruct node {\n\tint val, dis;\n} c[1005];\n\nbool cmp (node x, node y) {\n\treturn x.val < y.val;\n}\n\nint main () {\n\tscanf(\"%d%d%d\", &n, &m, &q);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &c[i].val);\n\t\tc[i].dis = i;\n\t}\n\tsort(c + 1, c + n + 1, cmp);\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++) \n\t\t\tif (i == j) dist[i][j] = 0;\n\t\t\telse dist[i][j] = inf;\n\tmemset(ans, 0x3f, sizeof(ans));\n\tfor (int i = 1, u, v, w; i <= m; i++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tdist[u][v] = w;\n\t\tdist[v][u] = w;\n\t}\n\tfor (int k = 1; k <= n; k++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tdist[c[i].dis][c[j].dis] = min(dist[c[i].dis][c[j].dis], dist[c[i].dis][c[k].dis] + dist[c[k].dis][c[j].dis]);\n\t\t\t\tans[c[i].dis][c[j].dis] = min(ans[c[i].dis][c[j].dis], dist[c[i].dis][c[j].dis] + max(c[i].val, max(c[j].val, c[k].val)));\n\t\t\t}\n\twhile (q--) {\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tprintf(\"%d\\n\", ans[a][b]);\n\t}\n\treturn 0;\n}\n\n```\n\n\u9884\u6d4b\u5f97\u5206\uff1a$50$ \u5206    \n\u4e3a\u4ec0\u4e48\u53ea\u6709 $50$ \u5206\u5462 \u2026\u2026 \u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u4e86\u53ef\u80fd\u8981\u6709\u91cd\u8fb9   \n\u6240\u4ee5\u6211\u4eec\u8981\u5904\u7406\u4e00\u4e0b\u91cd\u8fb9\n\n#### Code 2\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, q;\nint ans[1005][1005], dist[1005][1005]; \nconst int inf = 0x3f3f3f3f;\n\nstruct node {\n\tint val, dis;\n} c[1005];\n\nbool cmp (node x, node y) {\n\treturn x.val < y.val;\n}\n\nint main () {\n\tscanf(\"%d%d%d\", &n, &m, &q);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &c[i].val);\n\t\tc[i].dis = i;\n\t}\n\tsort(c + 1, c + n + 1, cmp);\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++) \n\t\t\tif (i == j) dist[i][j] = 0;\n\t\t\telse dist[i][j] = inf;\n\tmemset(ans, 0x3f, sizeof(ans));\n\tfor (int i = 1, u, v, w; i <= m; i++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tdist[u][v] = min(dist[u][v], w);\n\t\tdist[v][u] = min(dist[v][u], w);\n\t}\n\tfor (int k = 1; k <= n; k++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\tdist[c[i].dis][c[j].dis] = min(dist[c[i].dis][c[j].dis], dist[c[i].dis][c[k].dis] + dist[c[k].dis][c[j].dis]);\n\t\t\t\tans[c[i].dis][c[j].dis] = min(ans[c[i].dis][c[j].dis], dist[c[i].dis][c[j].dis] + max(c[i].val, max(c[j].val, c[k].val)));\n\t\t\t}\n\twhile (q--) {\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tprintf(\"%d\\n\", ans[a][b]);\n\t}\n\treturn 0;\n}\n\n```\n\n\u9884\u6d4b\u5f97\u5206\uff1a$100$ \u5206    \n[AC Link!](https://www.luogu.com.cn/record/35264285)\n\nBy Shuchong    \n2020.7.17",
        "postTime": 1594963713,
        "uid": 114914,
        "name": "\u4e00\u53ea\u4e66\u866b\u4ed4",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]Cow Toll Paths G\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u697c\u4e0a\u51e0\u4f4d\u8bb2\u7684\u597d\u50cf\u786e\u5b9e\u5f88\u7384\u5b66\u3002\u3002\u8fd8\u6709\u591a\u8dd1\u51e0\u904d\u8fd9\u79cd\u505a\u6cd5\u3002\u3002\uff08\u4e00\u822c\u597d\u50cf\u662f\u7528\u6765\u9a97\u5206\u7684\uff09\n\n\u4e3a\u4e86\u4e0d\u4f7f\u8fd9\u4e2a\u9898\u53d8\u5f97\u5f88\u7384\u5b66\uff0c\u9996\u5148\u6211\u4eec\u5e94\u5f53\u6309\u70b9\u6743\u6392\u5e8f\u3002\n\n\u4e4b\u540e\u5f53\u7136\u662f\u8dd1floyd\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u7ec4\u8ba1\uff0cd\u6570\u7ec4\u8ba1\u4e0d\u8ba1\u70b9\u6743\u7684\uff0cdist\u6570\u7ec4\u8ba1\u5e26\u70b9\u6743\u7684\u3002\uff08\u6df7\u5728\u4e00\u5757\u5f88\u96be\u5904\u7406\uff09\n\n\u6309\u70b9\u6743\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u679a\u4e3e\u4e2d\u8f6c\u70b9\uff0c\u4f46\u4e24\u7aef\u4e0d\u80fd\u53ea\u679a\u4e3e\u5230k\uff0c\u5426\u5219\u6700\u77ed\u8def\u4f1a\u9519\u3002\n\n\u7531\u4e8ek\u662f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u53bb\u6700\u540e\u7684k\u4f5c\u4e3ai->j\u7684\u8def\u5f84\u4e0a\u9664i,j\u5916\u70b9\u6743\u7684\u6700\u5927\u503c\uff0c\n\n\u4f46\u7531\u4e8ei,j\u4ece1\u5230n\u679a\u4e3e\uff0c\u6240\u4ee5\u518d\u548ci,j\u53d6max\u5c31\u662f\u8def\u5f84\u4e0a\u6700\u5927\u7684\u70b9\u6743\u3002\n\n\u5bf9\u4e8edist\u6570\u7ec4\uff0c\u52a0\u4e0a\u70b9\u6743\u53d6\u6700\u5927\u5c31\u597d\u4e86\uff0c\u76ee\u6d4b\u53ea\u8981\u4e00\u8d9ffloyd\u8dd1\u5b8c\u3002\n\n\u4e0b\u9762\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=255,INF=0x3f3f3f3f;\nint n,m,q,u,v,w,s,t;\nint rank[N],dist[N][N],d[N][N];\nstruct node\n{\n    int d;\n    int id;\n}nm[N];\nbool cmp(node a,node b)\n{\n    if(a.d==b.d)\n        return a.id<b.id;\n    return a.d<b.d;\n}\ninline void get(int &a)//\u5feb\u8bfb\n{\n    char c=getchar();\n    a=0;\n    for(;c<'0'||c>'9';c=getchar());\n    a=c-'0';\n    for(c=getchar();c>='0'&&c<='9';c=getchar())\n        a=a*10+c-'0';\n}\nint main()\n{\n    get(n);get(m);get(q);\n    for(int i=1;i<=n;i++)\n    {\n        get(nm[i].d);\n        nm[i].id=i;\n    }\n    sort(nm+1,nm+1+n,cmp);//\u6309\u70b9\u6743\u6392\u5e8f\n    for(int i=1;i<=n;i++)\n        rank[nm[i].id]=i;//\u56e0\u4e3a\u8be2\u95ee\u662f\u7528\u539f\u59cb\u7f16\u53f7\uff0c\u8fd9\u91cc\u5b58\u4e00\u4e0b\n    memset(d,0x3f,sizeof(d));\n    for(int i=1;i<=n;i++)\n        d[i][i]=0;\n    for(int i=1;i<=m;i++)\n    {\n        get(u);get(v);get(w);\n        d[rank[v]][rank[u]]=d[rank[u]][rank[v]]=min(d[rank[u]][rank[v]],w);\n    }\n    memset(dist,0x3f,sizeof(dist));\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n            {\n                if(i==j)\n                    continue;\n                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n                dist[i][j]=min(dist[i][j],d[i][j]+max(nm[k].d,max(nm[i].d,nm[j].d)));\n            }\n    while(q--)\n    {\n        get(s);get(t);\n        printf(\"%d\\n\",dist[rank[s]][rank[t]]);\n    }\n    return 0;\n}\n```",
        "postTime": 1509799769,
        "uid": 17502,
        "name": "Jouna_Kasa_Hasinele",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u53e6\u4e00\u79cd\u7a7a\u95f4\u590d\u6742\u5ea6$O(n^3)$\u7684$Floyd$\u601d\u8def\u3002\n\n\u770b\u5230\u8fd9\u9898\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u601d\u8def\uff0c\u5c31\u662f\u5982\u679c\u6211\u4eec\u94a6\u5b9a\u6700\u77ed\u8def\u4e0a\u70b9\u6743\u6700\u5927\u7684\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6700\u77ed\u8def\u5373\u53ef\uff0c\u7136\u540e\u6211\u4eec\u5f88\u81ea\u7136\u7684\u5c31\u53ef\u4ee5\u60f3\u5230$Floyd$\uff0c\u6211\u4eec\u77e5\u9053$Floyd$\u5b9e\u8d28\u4e0a\u662f\u4e00\u4e2a\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u7684$dp$\uff0c\u5373$dp[i][j][k]$\u4e3a\u7ecf\u8fc7$[1,k]$\u7684\u4e2d\u8f6c\u70b9\uff08\u6ce8\u610f\u4e0d\u4e00\u5b9a\u5305\u62ec$i,j$\uff09\u7684$i->j$\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u4e2d\u8f6c\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4e0d\u8ba9\u8fd9\u4e2a$dp$\u6570\u7ec4\u6eda\u52a8\uff0c\u5c31\u8fbe\u5230\u4e86\u94a6\u5b9a\u6700\u5927\u7684\u4e2d\u8f6c\u70b9\u7684\u6548\u679c\uff0c\u6211\u4eec\u53ea\u9700\u628a\u6700\u77ed\u8def\u52a0\u4e0a$a_k$\u5373\u53ef\u2014\u2014\u5417\uff1f\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u4e2d\u8f6c\u70b9\u662f\u4e0d\u5305\u62ec$i,j$\u7684\uff0c\u6240\u4ee5\u5e94\u8be5\u52a0\u4e0a$max(a_i,a_j,a_k)$\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int get() {//\u6211\u7684\u5783\u573e\u5feb\u8bfb \n\tint n=0;\n\tchar c;\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')break;\n\t\tif(c=='-')goto s;\n\t}\n\tn=c-'0';\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')n=n*10+c-'0';\n\t\telse return(n);\n\t}\ns:\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')n=n*10-c+'0';\n\t\telse return(n);\n\t}\n}\nvoid print(int num) {\n\tif(num>=10)print(num/10);\n\tputchar(num%10+'0');\n}\nint G[251][251][251];//\u4e0d\u6eda\u52a8\u7684dp\u6570\u7ec4 \ntypedef struct _n {//\u7528\u4e8e\u6392\u5e8f\u7684\u7ed3\u6784\u4f53 \n\tint pt;\n\tint v;\n\tfriend bool operator <(const _n &a,const _n &b) {\n\t\treturn(a.v<b.v);\n\t}\n} node;\nnode memchi[251];\nint ref[251];\nint main() {\n\tmemset(G,0x3f,sizeof(G));\n\tint n=get(),m=get(),q=get();\n\tfor(register int i=1; i<=n; i++) {\n\t\tmemchi[i].pt=i;\n\t\tmemchi[i].v=get();\n\t\tG[i][i][0]=0;\n\t}\n\tsort(memchi+1,memchi+1+n);\n\tfor(register int i=1; i<=n; i++)ref[memchi[i].pt]=i;\n\tfor(register int i=1; i<=m; i++) {\n\t\tint s=ref[get()],t=ref[get()],l=get();\n\t\tG[s][t][0]=min(G[s][t][0],l);\n\t\tG[t][s][0]=G[s][t][0];\n\t}\n\tfor(register int k=1; k<=n; k++) {//Floyd \n\t\tfor(register int i=1; i<=n; i++) {\n\t\t\tfor(register int j=1; j<=n; j++) {\n\t\t\t\tG[i][j][k]=min(G[i][j][k],G[i][k][k-1]+G[k][j][k-1]);\n\t\t\t\tG[i][j][k]=min(G[i][j][k],G[i][j][k-1]);\n\t\t\t}\n\t\t}\n\t}\n\twhile(q) {\n\t\tq--;\n\t\tint s=ref[get()],t=ref[get()];\n\t\tint minn=0x7f7f7f7f;\n\t\tfor(register int i=1; i<=n; i++) {//\u679a\u4e3e\u6700\u5927\u4e2d\u8f6c\u70b9 \n\t\t\tminn=min(minn,G[s][t][i]+max(max(memchi[s].v,memchi[t].v),memchi[i].v));\n\t\t}\n\t\tprint(minn);\n\t\tputchar('\\n');\n\t}\n\treturn(0);\n}\n```",
        "postTime": 1540292011,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2966)   \n\u6211\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6709\u4e0d\u5bf9\u7684\u5730\u65b9\u8bf7\u6307\u6b63\u3002\n### \u672c\u7bc7\u9898\u89e3\u7684\u76ee\u7684\n- \u8fd9\u9898\u4f7f\u6211\u9677\u5165\u4e86\u591a\u4e2a\u8bef\u533a\uff0c\u82b1\u4e86\u5f88\u4e45\u7684\u65f6\u95f4\uff0c\u503c\u5f97\u7528\u6211\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u6765\u7eaa\u5ff5\u3002\u540c\u65f6\u7ec3\u4e60 Markdown \u4e0e Latex \u3002\n- \u4e0d\u50cf\u5176\u4ed6\u9898\u89e3\u6240\u8bf4\u7684\uff0c\u201c\u70b9\u6743\u548c\u8fb9\u6743\u4e0d\u80fd\u6df7\u5728\u4e00\u8d77\u201d\uff0c\u5176\u5b9e\u662f\u6709\u529e\u6cd5\u5904\u7406\u7684\u3002\n- \u201c\u4e3a\u4ec0\u4e48\u8981\u5bf9\u4e2d\u8f6c\u70b9\u6309\u70b9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u201d\u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u4f3c\u4e4e\u4e0d\u662f\u5f88\u6e05\u695a\u3002 ~~\u8bf4\u5f97\u597d\u50cf\u6211\u80fd\u8bb2\u6e05\u695a\u4e00\u6837~~   \n\n### \u601d\u8def\n\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4\uff1a$ N \\leq 250 $\uff0c$K \\leq 10000 $\u3002\u70b9\u6570\u8f83\u5c0f\uff0c\u8be2\u95ee\u6570\u8f83\u591a\uff0c\u53ef\u4ee5\u4f7f\u7528 Floyd \u7b97\u6cd5\u5c06\u6bcf\u5bf9\u8349\u5730\u95f4\u7684\u8ddd\u79bb\u7b97\u51fa\u6765\u3002   \n\u8bbe\u8def\u5f84 i -> j \u7684\u8d39\u7528\uff08\u540c\u9898\u610f\uff09\u4e3a $ f(i,j) $\uff0c\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u56de\u7b54\u7684\u7b54\u6848\u5c31\u662f $ f(s,t) $\u3002\u7531\u4e8e\u8def\u5f84\u4e2d\u5305\u542b\u4e00\u4e2a\u6700\u5927\u7684\u8349\u5730\u8fc7\u8def\u8d39\uff08\u70b9\u6743\uff09\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u8d39\u7528\u6700\u5c11\u7684 i -> j \u8def\u5f84\u4e0a\uff0c\u6700\u5927\u7684\u70b9\u6743\u4e3a $ pm(i,j) $\uff08\u5305\u62ec i, j \uff09\u3002   \n\u8003\u8651\u8def\u5f84 i -> h -> j\uff0c\u600e\u4e48\u901a\u8fc7\u4e2d\u8f6c\u70b9 h \u66f4\u65b0 $ f(i,j) $ \u5462\uff1f\u53ef\u4ee5\u77e5\u9053\u8def\u5f84\u4e0a\u6700\u5927\u7684\u70b9\u6743\u4e3a $ \\max(pm(i,h),pm(h,j)) $\u3002\u5148\u5728\u4e24\u8fb9\u8def\u5f84\u7684\u8d39\u7528\u4e2d\u51cf\u53bb\u6700\u5927\u7684\u70b9\u6743\u5e76\u6c42\u548c\uff0c\u7136\u540e\u52a0\u4e0a\u8fde\u8d77\u6765\u8def\u5f84\u4e0a\u6700\u5927\u70b9\u6743\uff0c\u5f97\u5230\u65b0\u8def\u5f84   \n$ l=f(i,h)+f(h,j)-pm(i,h)-pm(h,j)+\\max(pm(i,h),pm(h,j)) $\n\u5982\u679c l \u6bd4 $ f(i,j) $ \u5c0f\uff0c\u5219\u66f4\u65b0 f \u548c pm\u3002   \n\u521d\u59cb\u5316\uff1a\u5982\u679c\u5b58\u5728\u4e00\u6761\u9053\u8def (a, b) \u8fc7\u8def\u8d39\u4e3a l\uff0c\u90a3\u4e48\u8def\u5f84 a -> b \u4e0a\u7684\u6700\u5927\u70b9\u6743\u4e3a $ \\max(c_a,c_b) $\uff0c\u8d39\u7528\u4e3a l \u52a0\u4e0a\u6700\u5927\u70b9\u6743\u3002\n### \u4ee3\u7801\uff08WA\uff0c30\u5206\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n,m,k,c[251],a,b,l,s,t,f[251][251],pm[251][251];\n// \u53d8\u91cf\u7684\u542b\u4e49\u4e0e\u9898\u76ee\u6216\u9898\u89e3\u4e2d\u7684\u76f8\u540c\n\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tmemset(f,0x3f,sizeof f);\n\t// \u5c06 f \u6570\u7ec4\u6240\u6709\u503c\u521d\u59cb\u5316\u4e3a0x3f3f3f3f\uff0c\u4f7f\u5f97\u5b83\u8fd1\u4f3c\u65e0\u7a77\u5927\uff0c\u800c\u4e24\u4e2a\u8fd9\u6837\u5927\u7684\u6570\u76f8\u52a0\u540e\u53c8\u4e0d\u4f1a\u8d85\u8fc7 int \u8303\u56f4 \n\t// \u8bfb\u5165\u6240\u6709\u70b9\u6743\n\tfor(int i=1; i<=n; i++)\n\t\tscanf(\"%d\",&c[i]);\n\t// \u8bfb\u5165\u6240\u6709\u9053\u8def\u53ca\u5176\u8fc7\u8def\u8d39\uff08\u8fb9\u6743\uff09\u5e76\u521d\u59cb\u5316\n\tfor(int i=1; i<=m; i++) {\n\t\tscanf(\"%d%d%d\",&a,&b,&l);\n\t\tpm[b][a]=pm[a][b]=max(c[a],c[b]);\n\t\tf[b][a]=f[a][b]=min(f[a][b],l+pm[a][b]);\n\t\t// \u6ce8\u610f\u4f1a\u6709\u91cd\u8fb9\u3002\u6211\u5728\u8fd9\u91cc\u5361\u4e86\u5f88\u4e45\uff0c\u4e5f\u662f\u770b\u4e86\u5176\u4ed6\u9898\u89e3\u624d\u6539\u8fc7\u6765\u7684\u3002\u6709\u91cd\u8fb9\u65f6\u8981\u53d6\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\n\t}\n\t// \u4e0b\u9762\u662f Floyd \u7b97\u6cd5\n\tfor(int h=1; h<=n; h++) // \u679a\u4e3e\u4e2d\u8f6c\u70b9\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tif(j!=h) for(int i=1; i<=n; i++) {\n\t\t\t\tif(i==j||i==h) continue;\n\t\t\t\tl=f[j][h] + f[h][i] - pm[j][h] - pm[h][i] + max(pm[j][h],pm[h][i]);\n\t\t\t\tif(l<=f[j][i])\n\t\t\t\t\tf[j][i]=l,\n\t\t\t\t\tpm[j][i]=max(pm[j][h],pm[h][i]);\n\t\t\t}\n\t// \u8bfb\u5165\u6bcf\u4e2a\u8be2\u95ee\u5e76\u56de\u7b54 \n\tfor(int i=1; i<=k; i++) {\n\t\tscanf(\"%d%d\",&s,&t);\n\t\tprintf(\"%d\\n\",f[s][t]);\n\t}\n\treturn 0;\n}\n```\n\n### \u6539\u8fdb\n\u7136\u800c\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u4ee3\u7801\u53ea\u670930\u5206\u3002  \n\u53c2\u8003\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\uff0c\u53d1\u73b0\u9700\u8981\u5bf9\u4e2d\u8f6c\u70b9 _\u6309\u70b9\u6743_ **\u4ece\u5c0f\u5230\u5927**\u6392\u5e8f\u3002  \n\u7531\u4e8e\u6211 ~~\u61d2\uff0c~~ \u5e0c\u671b\u6539\u52a8\u6700\u5c11\uff0c\u4e8e\u662f   \n- \u7528\u4f18\u5148\u961f\u5217\u6765\u786e\u5b9a\u4e2d\u8f6c\u70b9\u7684\u987a\u5e8f\u3002\u5728 main \u51fd\u6570\u524d\u9762\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\uff1a\n```cpp\ntypedef pair<int,int> node; // first: c, second: i\n// STL\u4e4bpair\u771f\u597d\u7528\u3002\u4f7f\u7528\u65f6\u5efa\u8bae\u5c06first\uff0csecond\u4ee3\u8868\u7684\u610f\u4e49\u8bb0\u5f55\u5728\u65c1\u8fb9\u4ee5\u514d\u5fd8\u8bb0\u3002\npriority_queue<node,vector<node>,greater<node> > q;\n```\n- \u8bfb\u5165\u6bcf\u70b9\u70b9\u6743\u65f6\u987a\u4fbf\u5c06\u5176\u52a0\u5165\u4f18\u5148\u961f\u5217\u3002\n```\n\t\tq.push(node(c[i],i));\n```\n- \u5c06\u679a\u4e3e\u4e2d\u8f6c\u70b9\u7684\u5faa\u73af\u6539\u4e3a\u5982\u4e0bwhile\u5faa\u73af\uff0c\u5e76\u5c06\u63a5\u4e0b\u6765\u679a\u4e3e j \u7684\u5faa\u73af\u653e\u5165```*|*```\u5904\n\n```cpp\n\twhile(!q.empty()) {\n\t\tint h=q.top().second; q.pop();\n\t\t*|*\n\t}\n\n```\n\n### \u7591\u95ee\n\u4e3a\u4ec0\u4e48\u8981\u5bf9\u4e2d\u8f6c\u70b9 _\u6309\u70b9\u6743_ **\u4ece\u5c0f\u5230\u5927**\u6392\u5e8f\uff1f\u4e3a\u4e86\u5e2e\u52a9\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u8bbe\u6cd5\u753b\u51fa\u4e86\u8fd9\u5e45\u56fe\uff1a\n[![](https://cdn.luogu.com.cn/upload/image_hosting/3w7tlhjx.png)](https://www.luogu.com.cn/paste/kpeywhum)   \n\u8f6c\u6298\u70b9\u6309\u70b9\u6743\u4ece\u5c0f\u5230\u5927\u904d\u5386\uff1a   \n\u901a\u8fc7h=3\uff08\u70b9\u6743\u4e3a3\uff09\uff0c$ f(1,2)=7+8=15,\\;f(1,4)=14+6=20 $   \n\u901a\u8fc7h=2\uff08\u70b9\u6743\u4e3a8\uff09\uff0c$ f(1,4)=f(1,2)+11-8-8+8=18 $   \n\u8f6c\u6298\u70b9\u4ece1\u5230n\uff1a   \n\u901a\u8fc7h=2\uff0c$ l=8+4=12>11=3+8=f(3,4) $ \u4e8e\u662f\u4e0d\u901a\u8fc7 2\uff1b   \n\u901a\u8fc7h=3\uff0c$ f(1,4)=f(1,3)-6+f(3,4)-3+6=20 $   \n30\u5206\u4ee3\u7801\uff1a\uff1f\uff1f\uff1f   \n\n---\n\u5176\u4ed6\u9898\u89e3\u6709\u7684\u8bf4\u7384\u5b66\uff0c\u591a\u8dd1\u51e0\u904d\u5c31\u8fc7\u4e86\uff1b\u6709\u7684\u89e3\u91ca\u4e86\u65b9\u4fbf\u6027\uff08\u8fd9\u6837\u5c31\u80fd\u77e5\u9053\u4e00\u6761\u8def\u5f84\u7684\u6700\u5927\u70b9\u6743\u662f\u4e09\u4e2a\u70b9\u7684max\uff09\u3002\u76ee\u524d\u6211\u4e5f\u4e0d\u80fd\u4e25\u8c28\u5730\u8bf4\u6e05\u695a\u5b83\u7684\u6b63\u786e\u6027\uff0c\u4e8e\u662f\u53bb\u770b\u4e86[USACO\u5b98\u7f51\u7684Analysis](https://contest.usaco.org/TESTDATA/DEC09.toll.htm)\u3002\u5927\u610f\u662f\uff0c\u56e0\u4e3a\u603b\u8d39\u7528\u5206\u4e3a\u8fb9\u6743\u548c\u548c\u6700\u5927\u70b9\u6743\uff0c\u4e0d\u59a8\u5148\u9650\u5b9a\u70b9\u6743\u4e3a\u67d0\u4e00\u7279\u5b9a\u503c\uff0c\u6c42\u7ecf\u8fc7\u6240\u6709\u70b9\u7684\u70b9\u6743\u4e0d\u8d85\u8fc7\u4e00\u7279\u5b9a\u503c\u7684\u6700\u4f18\u8def\u5f84\u7684\u8d39\u7528\u3002\u5bf9\u4e8e\u6240\u6709N\u4e2a\u9876\u70b9\uff0c\u53ef\u4ee5\u6bcf\u6b21\u7528 $O(n^3)$ \u7684\u7b97\u6cd5\u6c42\u7ecf\u8fc7\u6240\u6709\u7684\u70b9\u4e0d\u8d85\u8fc7\u8be5\u9876\u70b9\u6743\u503c\u7684\u6700\u4f18\u8def\u5f84\uff0c\u7136\u540e\u53d6\u5f97\u5230\u7684N\u4e2a\u8d39\u7528\u7684\u6700\u5c0f\u503c\u4f5c\u4e3a\u7b54\u6848\u3002   \n\u7136\u800c\u8fd9\u6837\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^4)$\uff0c\u53ef\u4ee5\u5728 Floyd \u7684\u57fa\u7840\u4e0a\u4f18\u5316\u3002\u56e0\u4e3a Floyd \u7684\u662f\u57fa\u4e8e\u4e2d\u8f6c\u70b9\u7684\u677e\u5f1b\u64cd\u4f5c\u7684\uff0c\u7b97\u6cd5\u7b97\u5230\u4e2d\u9014\u65f6\uff0c\u6bcf\u5bf9\u70b9\u7684\u8d39\u7528\u5c31\u662f\u53ea\u901a\u8fc7\u90a3\u4e9b\u5df2\u679a\u4e3e\u8fc7\u7684\u4e2d\u8f6c\u70b9\u7684\u8def\u5f84\u7684\u6700\u5c0f\u8d39\u7528\u3002\u56e0\u6b64\u5c06\u4e2d\u8f6c\u7684\u987a\u5e8f\u6309\u70b9\u6743\u6392\u5e8f\u540e\uff0c\u4e0e\u4e0a\u9762\u7684\u7b97\u6cd5\u6548\u679c\u7b49\u540c\uff1a\u7b2ci\u6b21\u5faa\u73af\u7b97\u51fa\u4e86\u6bcf\u5bf9\u70b9\u53ea\u7ecf\u8fc7\u90a3\u4e9b\u70b9\u6743\u4e0d\u8d85\u8fc7 _\u70b9\u6743\u7b2ci\u5c0f\u7684\u70b9_ \u7684\u70b9\u7684\u8def\u5f84\u7684\u6700\u5c0f\u8d39\u7528\u3002\uff08\u4ee5\u4e0a\u4e3a\u7ffb\u8bd1\uff09   \n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cFloyd \u7b97\u6cd5\u662f\u57fa\u4e8e\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u7684\uff0c\u6570\u7ec4 $ f(i,j) $ \u9690\u85cf\u4e86\u4e2d\u8f6c\u70b9\uff08\u52a8\u89c4\u9636\u6bb5\uff09\u90a3\u4e00\u7ef4\uff0c\u53d8\u4e3a\u4e86\u6eda\u52a8\u6570\u7ec4\u3002\u5982\u679c\u4e0d\u6392\u5e8f\uff0c\u90a3\u4e48\u8fd9\u4e00\u7ef4\u5ea6\u662f\u5426\u8fd8\u6709\u610f\u4e49\uff1f\u8fdd\u80cc\u4e86\u52a8\u6001\u89c4\u5212\u7684\u54ea\u6761\u9002\u7528\u6761\u4ef6\uff1f\u4f7f30\u5206\u4ee3\u7801\u4e0d\u901a\u8fc7\u7684\u67d0\u4e9b\u56fe\u7684\u5171\u540c\u6027\u8d28\u80fd\u5426\u7528\u4e00\u4e9b\u4e0d\u7b49\u5f0f\u5173\u7cfb\u63cf\u8ff0\uff1f\u53ef\u4ee5\u8bd5\u7740\u4ece\u8fd9\u4e9b\u89d2\u5ea6\u5426\u5b9a30\u5206\u7684\u4ee3\u7801\u3002\u7136\u800c\u6211\u592a\u83dc\u4e86\uff0c\u60f3\u4e86\u4e00\u6574\u5929\u4e5f\u60f3\u4e0d\u51fa\u600e\u6837\u4e25\u8c28\u5730\u8bf4\u660e\u8fd9\u4e2a\u7684\u6b63\u786e\u6027\uff0c\u90a3\u4e2a\u7684\u9519\u8bef\u3002If someone could give me better explanations, I would appreciate it very much.",
        "postTime": 1581852531,
        "uid": 267933,
        "name": "Zjl37",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": " [USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fb9\u6743\u548c\u52a0\u4e0a\u70b9\u6743\u548c\u6700\u5c0f\uff0c\u591a\u7ec4\u8be2\u95ee\n\nn<=250 m<=10000\n\n\u591a\u7ec4\u8be2\u95ee\uff0c\u6570\u636e\u8303\u56f4\u8fd9\u4e48\u5c0f\uff0c\u5f88\u663e\u7136\u5c31\u662ffloyd\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a\u70b9\u6743\u7740\u5b9e\u8ba9\u4eba\u8ba8\u538c\u54c7\u3002\u3002\u3002\n\n\u6211\u4eec\u91cd\u65b0\u56de\u60f3\u4e00\u904dfloyd\u7b97\u6cd5\u7684\u539f\u7406\uff1ai\u5230j\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\u76f4\u63a5\u5230\u548c\u501f\u52a9\u4e2d\u95f4\u63a5\u53e3k\uff0c\u6240\u4ee5\u53d6\u4e00\u4e2amin\u5c31\u884c\u4e86\n\n\u6211\u4eec\u518d\u5f80\u4e0b\u7ec6\u7ec6\u7684\u60f3\u4e00\u4e0b\uff0ck\u4ee3\u8868\u7684\u662f\u4e2d\u95f4\u7684\u63a5\u53e3\uff0c\u800c\u4e14k\u7684\u679a\u4e3e\u987a\u5e8f\u662f\u4efb\u610f\u7684\uff1f\n\n\u663e\u7136\u662f\u4efb\u610f\u7684\uff01\u7a81\u7834\u53e3\u5c31\u5728\u8fd9\uff1a\u6211\u4eec\u53ef\u4ee5\u8086\u610f\u7684\u4fee\u6539k\u7684\u679a\u4e3e\u987a\u5e8f\uff01\n\n\u6240\u4ee5\uff0c\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u6211\u4eec\u53ea\u8981\u4ece\u5c0f\u5230\u5927\u679a\u4e3ek\uff0c\u8dd1flyod\uff0c\u70b9\u6743\u6700\u5927\u503c\u5229\u7528min(c[i],c[j],c[k])\u6765\u7ef4\u62a4\u5c31\u884c\u4e86\uff01\n\n\u6b63\u786e\u6027\uff1f\n\n\u5f53\u6211\u4eec\u679a\u4e3e\u5230\u4e00\u4e2ak\u7684\u65f6\u5019\uff0c\u5c31\u4ee3\u8868\u8def\u5f84\u4e2d\u9664\u4e86i\uff0cj\u4ee5\u5916\u6ca1\u6709\u4efb\u4f55\u6570\u53ef\u80fd\u6bd4k\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4e09\u4e2a\u4e2d\u53d6\u4e00\u4e2amin\u5c31\u884c\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6:O(n^3)\n\n\u6ce8\u610f\u5904\u7406\u7ec6\u8282\uff1a\u4f8b\u5982\u679a\u4e3e\u540e\u987a\u5e8f\u6539\u53d8\u7b49\n\n\u6700\u540e\uff0c\u9644\u4e0a\u672c\u9898\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<iostream>\nusing namespace std;\n//Debug Yufenglin\n#define dej printf(\"Running\\n\");\n#define dep1(x) cout<<#x<<\"=\"<<x<<endl;\n#define dep2(x,y) cout<<#x<<\"=\"<<x<<' '<<#y<<\"=\"<<y<<endl;\n#define dep3(x,y,z) cout<<#x<<\"=\"<<x<<' '<<#y<<\"=\"<<y<<' '<<#z<<\"=\"<<z<<endl;\n\n//Standfor Yufenglin\n#define LL long long\n#define LB long double\n#define reg register\n#define il inline\n#define inf 1000000000\n#define maxn 250\n#define maxm 1005\n\nstruct pot\n{\n    int v,id;\n};\nint n,m,q;\npot c[maxn+5];\nint dis[maxn+5][maxn+5],f[maxn+5][maxn+5],pre[maxn+5];\n\nbool cmp(pot x,pot y)\n{\n    if(x.v==y.v) return x.id<y.id;\n    return x.v<y.v;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&c[i].v);\n        c[i].id=i;\n    }\n    sort(c+1,c+n+1,cmp);\n    for(int i=1;i<=n;i++)\n    {\n        pre[c[i].id]=i;\n    }\n    memset(dis,0x1f,sizeof(dis));\n    memset(f,0x1f,sizeof(f));\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        dis[pre[x]][pre[y]]=dis[pre[y]][pre[x]]=min(dis[pre[x]][pre[y]],z);\n    }\n    for(int i=1;i<=n;i++) dis[i][i]=0;\n    for(int k=1;k<=n;k++)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=1;j<=n;j++)\n            {\n                if(i==j) continue;\n                dis[i][j]=min(dis[i][k]+dis[k][j],dis[i][j]);\n                f[i][j]=min(f[i][j],dis[i][j]+max(c[i].v,max(c[j].v,c[k].v)));\n            }\n        }\n    }\n    for(int i=1;i<=q;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",f[pre[x]][pre[y]]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1555162192,
        "uid": 133227,
        "name": "\u4e8e\u4e30\u6797",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "\u5c45\u7136\u53d1\u73b0\u6ca1\u6709\u4eba\u5199dijkstra\u7684\u7b97\u6cd5\u8fc7\u8fd9\u4e2a\u9898\n\n\u90a3\u6211\u8fd9\u4e2a\u6c34\u8fc7\u7684\u849f\u84bb\u5c31\u6765\u8bb2\u8bb2dijkstra\u600e\u4e48\u505a\n\n\u5982\u679c\u4e0d\u4f1adijkstra \u8bf7\u5148\u8fdb[\u8fd9\u4e2a\u9898](https://www.luogu.org/problemnew/show/P3371)\u8fdb\u884c\u5b66\u4e60qwq\n\n\u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u6e05\u5947\n\n\u9996\u5148 \u6211\u4eec\u8fd9\u4e2a\u9898\u76ee\u4e2d\u6709\u4e2a\u5751\u70b9 \u5c31\u662f\u8bf4 \u6bcf\u4e00\u6b21\u8981\u52a0\u4e0a\u8d70\u8fc7\u8def\u5f84\u4e4b\u4e2d\u70b9\u6743\u6700\u5927\u7684\u70b9\n\n\u5176\u5b9e\u5f88\u597d\u60f3\u7684\u5c31\u662f\u6bcf\u4e00\u6b21\u5904\u7406\u7684\u65f6\u5019\u5b58\u4e00\u4e0b\u6700\u5927\u70b9\u6743 \u7136\u540e\u5c31\u53d1\u73b0 \u4e0d\u662fTLE\u5373MLE\n\n------------\n\n\n\u7136\u540e \u6211\u4eec\u5c31\u6709\u4e86\u8fd9\u4e2a\u601d\u8def\uff1a\n\n1 \u4e00\u91cd\u5faa\u73afk \u8868\u793a\u5f53\u524d\u6211\u4eec\u8fd9\u6761\u8def\u4e0a\u7684\u6700\u5927\u70b9\u6743 \u5373\u6240\u6709\u53ef\u7ecf\u8fc7\u70b9\u7684\u70b9\u6743\u2264\u70b9k\u7684\u6743\u503c\n\n2 \u5728\u5faa\u73afk\u91cc\u9762\u505adijkstra \u6ce8\u610f\u7ecf\u8fc7\u7684\u70b9\u53ea\u80fd\u662f\u70b9\u6743\u2264k\u70b9\u7684 \u4e0d\u7136\u5c31\u9519\u4e86\n\n3 \u5728\u66f4\u65b0\u5b8cdist\u540e \u8ba1\u7b97\u7b54\u6848 \u8ba1\u7b97\u5f0f\u8981\u52a0\u4e0ak\u70b9\u7684\u70b9\u6743\n\n\u8fd9\u6837\u4e00\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\u0398\uff08$n^3$)   **\u7f8e\u5999**~~\u5361\u8fc7~~\n\n------------\n\n\n\u6700\u540e\u6765\u4e0a\u4e00\u53d1\u4ee3\u7801\uff08~~\u8981\u6284~~\u4e5f\u5f97\u5148**\u7406\u89e3\u601d\u8def**\uff09\n```cpp\n//\u8fd9\u91cc\u5199\u4e00\u7b14 \u6211\u7684\u6807\u7a0b\u6ca1\u6709\u5199\u94fe\u5f0f\u524d\u5411\u661f \u7528\u7684\u662f\u90bb\u63a5\u77e9\u9635\n#include<bits/stdc++.h>\nusing namespace std;\n// n,m,query \u5c31\u662fn,m,k\n// p\u4ee3\u8868\u70b9\u7684\u6743\u503c maze\u662f\u90bb\u63a5\u77e9\u9635 dist\u662f\u5904\u7406\u51fa\u6765\u7684\u67d0\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u6700\u5c0f\u503c(dijkstra) vis\u6807\u8bb0 ans\u4e0d\u5fc5\u591a\u8bf4 \u50a8\u5b58\u7b54\u6848 \nint n,m,query;\nint p[260],maze[260][260],dist[260],ans[260][260],vis[260]; \nvoid dijkstra(int k){\n//\u5f53\u7136 \u6570\u7ec4\u4e0d\u6e05\u7a7a \u4ea4\u9898\u89c1\u7956\u5b97 \n    memset(vis,0,sizeof(vis));\n    memset(dist,0x3f,sizeof(dist));\n    //\u4ee5\u4e0b\u662fdisjktra\u6b63\u5e38\u64cd\u4f5c \n    dist[k]=0; \n    for(int i=1;i<=n;i++){\n        int v=-1;\n        /*\u770b\u5230\u8fd9\u91cc\u4f60\u53ef\u80fd\u4f1a\u5947\u602a (p[u]<=p[k]) \u4ec0\u4e48\u9b3c\n\t\u5176\u5b9e\u5f88\u597d\u7406\u89e3\u7684 \u6211\u628a\u6211\u6bcf\u4e00\u6b21\u505adijkstra\u7684\u70b9\u62c9\u51fa\u6765 \u505a\u4e3a\u5f53\u524d\u7684\u6700\u5927\u70b9\u6743 \u90a3\u5f53\u7136\u4e0d\u53ef\u4ee5\u8fdb\u5165\u6bd4\u6700\u5927\u70b9\u6743\u6743\u503c\u8fd8\u8981\u5927\u7684\u70b9\u4e86 */ \n        for(int u=1;u<=n;u++) if(((dist[u]<dist[v])||(v==-1))&&(p[u]<=p[k])&&(!vis[u])) v=u;\n        if(v==-1) break;\n        vis[v]=true;\n        //\u5176\u5b9e\u8fd9\u91cc(p[u]>p[k])\u8ddf\u4e0a\u9762\u90a3\u4e2a\u4e00\u6837\u7684 \u7136\u540e\u5c31dijkstra\u6b63\u5e38\u8d70\u4e00\u6ce2 \n        for(int u=1;u<=n;u++){\n            if(p[u]>p[k]) continue;\n            dist[u]=min(dist[u],dist[v]+maze[v][u]);\n        }\n    }\n}\nint main(){\n\t//\u6e05\u7a7a\u8d4b\u503c\u8bfb\u5165 \u8fd9\u91cc\u5c31\u4e0d\u591a\u8bb2\u4e86\n    memset(ans,0x3f,sizeof(ans));\n    memset(maze,0x3f,sizeof(maze));\n    cin>>n>>m>>query;\n    for(int i=1;i<=n;i++) cin>>p[i];\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        cin>>a>>b>>c;\n        maze[a][b]=maze[b][a]=min(maze[a][b],c);\n    }\n    //\u8fd9\u91cc\u7684k\u4ee3\u8868\u7684\u662f\u5f53\u524d\u6211\u9009\u4e2d\u7684\u70b9 \u8fd9\u4e2a\u70b9\u4ee3\u8868\u4e86\u5f53\u524d\u7684\u6700\u5927\u70b9\u6743 \u5373\u5728\u672c\u6b21\u6211dijkstra\u4e2d\u9009\u51fa\u53ef\u7528\u7684\u70b9\u7684\u70b9\u6743\u4e0d\u53ef\u4ee5\u6709\u5927\u4e8e\u5b83\u7684 \n    for(int k=1;k<=n;k++){\n        dijkstra(k);//\u8fdb\u51fd\u6570\n\t\t//\u4e0b\u9762\u662f\u8ba1\u7b97ans \u8fd9\u91cc\u8ba1\u7b97ans\u662f\u7531\u9009\u51fa\u7684\u6700\u5927\u70b9\u6743\u7684\u70b9\u5230\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb \u522b\u5fd8\u4e86\u52a0\u4e0a\u6700\u5927\u70b9\u6743 \n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                ans[i][j]=min(ans[i][j],dist[i]+dist[j]+p[k]);\n    }\n    //\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee \u6211\u4eec\u5904\u7406\u51fa\u5b83\u7684\u7b54\u6848:) \n    for(int i=1;i<=query;i++){\n        int a,b;\n        cin>>a>>b;\n        cout<<ans[a][b]<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1560683929,
        "uid": 60560,
        "name": "\u9003\u8bfe\u5c0f\u59d0MS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "\u4e00\u9053\u9002\u5408\u521d\u5b66\u8005\u7684\u56fe\u8bba\u9898\r\n\r\n\u9898\u76ee\u610f\u601d\u5c31\u662f\u6c42\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u548c$+$\u70b9\u6743\u6700\u5927\u503c \u7684\u6700\u5c0f\u503c\u3002\u770b\u5230$n$\u7684\u8303\u56f4\u5e76\u4e0d\u5927\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528$Floyd$\u6765\u505a\u3002\r\n\r\n\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u70b9\u6743\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6700\u7ec8\u7b54\u6848\u4e00\u5b9a\u662f\u6700\u5c0f\u503c\u3002\r\n\r\n \u6545\u6211\u4eec\u4e00\u8fb9\u8dd1\u6700\u77ed\u8def\uff0c\u4e00\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\u52a0\u4e0a\u5f53\u524d$i,j,k$\u4e09\u4e2a\u70b9\u4e2d\u70b9\u6743\u6700\u5927\u7684\uff0c\u6bcf\u6b21\u66f4\u65b0\u5728$dis[i][j]$\u4e2d\u5373\u53ef\u3002\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff1a\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nconst ll N=510;\r\nll n,m,Q,dis[N][N],cro[N],to[N][N];\r\nstruct Edge{ll c,id;}pro[N];\r\ninline ll read()\r\n{\r\n    ll s=0,w=1;char ch;ch=getchar();\r\n    while(ch<'0'||ch>'9') {if(ch=='-') w=-1; ch=getchar();}\r\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\r\n    return s*w;\r\n}\r\nbool cp(Edge a,Edge b){return a.c==b.c?a.id<b.id:a.c<b.c;}\r\nint main()\r\n{\r\n    scanf(\"%lld%lld%lld\",&n,&m,&Q);\r\n    for(ll i=1;i<=n;i++) scanf(\"%lld\",&pro[i].c),pro[i].id=i; \r\n    sort(pro+1,pro+1+n,cp);\r\n    for(ll i=1;i<=n;i++) cro[pro[i].id]=i;\r\n    for(ll i=1;i<=n;i++) for(ll j=1;j<=n;j++) dis[i][j]=to[i][j]=1e11;\r\n    for(ll i=1;i<=n;i++) to[i][i]=0;\r\n    for(ll i=1,x,y,z;i<=m;i++) \r\n    {\r\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\r\n        x=cro[x];y=cro[y];\r\n        to[x][y]=min(to[x][y],z);to[y][x]=to[x][y];\r\n    }\r\n    for(ll k=1;k<=n;k++) \r\n        for(ll i=1;i<=n;i++) \r\n            for(ll j=1;j<=n;j++) \r\n            {\r\n                to[i][j]=min(to[i][j],to[i][k]+to[k][j]);\r\n                dis[i][j]=min(to[i][j]+max(pro[i].c,max(pro[j].c,pro[k].c)),dis[i][j]);\r\n            }\r\n    for(ll i=1,ax,ay;i<=Q;i++) \r\n    {\r\n        scanf(\"%lld%lld\",&ax,&ay);\r\n        ax=cro[ax];ay=cro[ay];\r\n        printf(\"%lld\\n\",dis[ax][ay]);\r\n    }\r\n    return 0;\r\n}\r\n```\r\n",
        "postTime": 1569753348,
        "uid": 98618,
        "name": "Provicy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2966"
    },
    {
        "content": "\u5f88\u5999\u7684\u4e00\u9053\u9898\uff0c\u6211\u4e4b\u524d\u4e00\u76f4\u662f\u7528\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u7684\u505a\u6cd5\n\n\u5c31\u662f\u679a\u4e3e\u70b9\u6743\u8dd1\u5806\u4f18\u5316dijkstra\n\n\u4f46\u662f\u8be2\u95ee\u6b21\u6570\u592a\u591a\u4e86\n\n\u4e8e\u662f\u4e00\u76f4\u53ea\u670950\u5206\n\n\u4eca\u5929\u7ec8\u4e8e~~\u6284~~\u505a\u4e86\u8fd9\u9053\u9898\uff0c\u4e0d\u8d34\u4ee3\u7801\u4e86\uff0c\u53ea\u8bf4\u4e00\u4e0b\u5bf9\u8fd9\u9053\u9898\u7684\u7406\u89e3\n\n\u9996\u5148\u70b9\u6743\u548c\u8fb9\u6743\u4e0d\u80fd\u6df7\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u516c\u8ba4\u7684\uff0c\u6bd5\u7adf\u8fd9\u4e2a\u6837\u5b50\u5b8c\u5168\u6ca1\u6709\u529e\u6cd5\u5904\u7406\n\n\u90a3\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u6392\u5e8f\u5462\uff0c\u53d1\u73b0\u5176\u4f59\u51e0\u7bc7\u9898\u89e3\u597d\u50cf\u4e5f\u6ca1\u8bb2\u6e05\u695a\n\n~~\u8bf4\u5f97\u597d\u50cf\u6211\u80fd\u8bb2\u6e05\u695a\u4e00\u6837~~\n\n\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u70b9\u6309\u70b9\u6743\u8fdb\u884c\u4e86\u4e00\u4e2a\u6392\u5e8f\uff0c\u8fd9\u4e00\u70b9\u5f88\u4ee4\u4eba\u73a9\u5473\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\n\n\u9996\u5148\u6211\u4eec\u7684floyd\u7684\u679a\u4e3e\u662f\u957f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n```cpp\nfor(re int k=1;k<=n;k++)\nfor(re int i=1;i<=n;i++)\nfor(re int j=1;j<=n;j++)\n```\n\n\u6700\u5916\u5c42\u679a\u4e3e\u7684$k$\u662f\u679a\u4e3e\u7684\u4ec0\u4e48\n\n\u4e2d\u8f6c\u70b9\u554a\n\n\u90a3\u6211\u4eec\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\u8bf4\u660e\u4ec0\u4e48\n\n\u8bf4\u660e\u6211\u4eec\u4e2d\u8f6c\u70b9\u52a0\u5165\u7684\u987a\u5e8f\u662f\u4ece\u5c0f\u5230\u5927\u7684\n\n\u4e8e\u662f\u6211\u4eec\u5728\u627e$i$,$j$\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u4e2d\u8f6c\u70b9\u5982\u679c\u53ea\u662f\u679a\u4e3e\u5230\u4e86$k1$\n\n\u90a3\u4e48\u8fd9\u53c8\u8bf4\u660e\u4e86\u4ec0\u4e48\n\n\u8fd9\u8bf4\u660e\u4e86\u6211\u4eec\u5f53\u524d\u7684$i$,$j$\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u4e2d\u5e76\u6ca1\u6709\u70b9\u6743\u8d85\u8fc7$k1$\u7684\u70b9\n\n\u4e8e\u662f\u5f53\u524d\u8fd9\u6761\u6700\u77ed\u8def\u4e0a\u9664\u53bb\u8d77\u70b9\u548c\u7ec8\u70b9\u70b9\u6743\u6700\u5927\u7684\u4e5f\u5c31\u662f$k1$\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u66f4\u65b0\u4e86\n\n```cpp\ndist[i][j]=min(dist[i][j],d[i][j]+max(nm[k].d,max(nm[i].d,nm[j].d)))\n```\n\n\u8fd9\u662f\u4ece\u697c\u4e0b\u7684\u90a3\u4f4d\u5927\u4f6c\u4ee3\u7801\u91cc\u6284\u6765\u7684\n\n\u600e\u4e48\u8bf4\u5462\n\n\u6211\u4eec\u5f53\u524d\u7684k\u8d8a\u5927\uff0c\u8bf4\u660e\u6211\u4eec\u7684\u6700\u77ed\u8def\u4e2d\u53ef\u80fd\u7684\u4e2d\u8f6c\u70b9\u8d8a\u591a\uff0c\u6700\u77ed\u8def\u4e5f\u5c31\u8d8a\u77ed\uff08\u5c3d\u7ba1\u53ef\u80fd\u968f\u7740$k$\u589e\u5927\u6700\u77ed\u8def\u5e76\u4e0d\u4f1a\u53d8\u77ed\uff0c\u800c\u662f\u4e0d\u53d8\uff09\uff0c\u4f46\u662f\u540c\u65f6\u6211\u4eec\u52a0\u5165\u7684\u4e2d\u8f6c\u70b9\u7684\u70b9\u6743\u4e5f\u8d8a\u6765\u8d8a\u5927\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6bcf\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a\u4e2d\u8f6c\u70b9\uff0c\u53ef\u80fd\u6700\u77ed\u8def\u662f\u53d8\u77ed\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u7684\u70b9\u6743\u6700\u5927\u503c\u4e5f\u589e\u52a0\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u4e0e\u524d\u9762\u7684dist\u503c\u53d6\u4e00\u4e2a\u6700\u5c0f\u4e86\n\n\u4e8e\u662f\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86",
        "postTime": 1530920892,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "\u7528floyed\u8dd1\u51e0\u904d\u7684\u505a\u6cd5\u5f88\u7384\u5b66\uff0c\u6211\u7684\u601d\u8def\u548c\u90a3\u4e2a\u4e00\u6837\n\n\u4e3a\u4e86\u8ba9\u5b83\u53d8\u5f97\u4e0d\u518d\u7384\u5b66,\u6211\u4fbf\u9644\u4e0a\u4e86\u81ea\u5df1\u7684\u60f3\u6cd5\uff1a\u4e3a\u4ec0\u4e48\u591a\u8dd1\u51e0\u904d\u5c31\u5bf9\u4e86\n\nAC\u4ee3\u7801:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=20040915;\nint n,m,Q;\nint d[250][250],w[250][250];\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=n;j++){\n\t\t\td[i][j]=d[j][i]=w[i][j]=w[j][i]=INF;\n\t\t}\n\t\td[i][i]=0;\n\t}\n\tfor(register int i=1;i<=n;i++) scanf(\"%d\",&w[i][i]);\n\tfor(register int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\td[x][y]=d[y][x]=min(d[x][y],z);\n\t\tw[x][y]=w[y][x]=max(w[x][x],w[y][y]);\n\t}\n\tbool op=1;\n\twhile(op){\n\t\top=0;\n\t\tfor(register int k=1;k<=n;k++){\n\t\t\tfor(register int i=1;i<=n;i++){\n\t\t\t\tfor(register int j=1;j<=n;j++){\n\t\t\t\t\tif(d[i][j]+w[i][j]>d[i][k]+d[k][j]+max(w[i][k],w[k][j])){\n\t\t\t\t\t\td[j][i]=d[i][j]=d[i][k]+d[k][j];\n\t\t\t\t\t\tw[i][j]=w[j][i]=max(w[i][k],w[k][j]);\n\t\t\t\t\t\top=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\twhile(Q--){\n\t\tint s,t;\n\t\tscanf(\"%d%d\",&s,&t);\n\t\tprintf(\"%d\\n\",d[s][t]+w[s][t]);\n\t}\n\treturn 0;\n}\n```\n\u8fd9\u5c31\u662fAC\u4ee3\u7801\uff0c\u5982\u679c\u8fdb\u884c\u4e86\u677e\u5f1b\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\u8dd1floyed\n\n\u5426\u5219\u5c31\u9000\u51fa\u4e86\n\n\u90a3\u4e48\u8bc1\u660e\u4e00\u6b21loyed\u662f\u4e0d\u4e00\u5b9a\u80fd\u627e\u5230\u5b83\u7684\u6700\u4f18\u89e3\u7684\n\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u539f\u56e0\u80af\u5b9a\u5728\u8fd9\u70b9\u6743\u4e0a\u9762\n\n\u800c\u81f3\u4e8e\u627e\u5230\u5177\u4f53\u4ec0\u4e48\u4f7ffloyed\u65e0\u6cd5\u4e00\u6b21\u627e\u5230\u5b83\u7684\u6700\u4f18\u89e3\uff0c\u5c31\u7b49\u4e0b\u4e00\u4f4d\u5927\u4f6c\u6765\u5427\n\n",
        "postTime": 1593162378,
        "uid": 117658,
        "name": "Space_Gold_Trash",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]Cow Toll Paths G\u3011"
    },
    {
        "content": "\u7384\u5b66\u3002\u3002\u3002\n\n\u6bcf\u4e2aa[i][j]\u5b58\u7684\u662fi\u5230 j\u6240\u9700\u8def\u5f84\u6700\u5927\u82b1\u8d39\u6570 \u52a0\u4e0a\u6700\u5927\u70b9\u7684\u82b1\u8d39\n\n\u7136\u540e\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u591a\u8dd1\u51e0\u6b21floyd\u3002\u3002\n\n\u6ce8\u610f\uff01\uff01\uff01\u4e00\u76f4\u5361\u5728\u4e94\u5341\u5206\uff01\uff01\uff01\n\n\u4ed6\u4f1a\u6709\u91cd\u8fb9\u3002\u3002\u3002\u3002\u5224\u4e00\u4e0b\n\n\n\n        \n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int INF=10086110;\nint w[255];\nint a[255][255];\nint maxn[255][255];\nint n,m,k;\nint readin(){\n    int yi=0;\n    char c=getchar();\n    while(!isdigit(c)){\n        c=getchar();\n    }\n    for(;isdigit(c);c=getchar()){\n        yi=yi*10+c-'0';\n    }\n    return yi;\n}\nint main(){\n    cin>>n>>m>>k;\n    for(int i=1;i<=n;i++){\n        w[i]=readin();\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if(i==j) continue;\n            a[i][j]=INF;\n        }\n    }\n    for(int i=1;i<=m;i++){\n        int xi=readin(),yi=readin(),zi=readin();\n        if(a[xi][yi]>zi+max(w[xi],w[yi])){\n            a[xi][yi]=zi+max(w[xi],w[yi]);\n            a[yi][xi]=zi+max(w[xi],w[yi]);\n            maxn[xi][yi]=max(w[xi],w[yi]);\n            maxn[yi][xi]=max(w[xi],w[yi]);\n        }\n    }\n    for(int k=1;k<=n;k++){\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                if(i==j||j==k||i==k) continue;\n                if(a[i][j]>a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j])){\n                    a[i][j]=a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j]);\n                    maxn[i][j]=max(maxn[i][k],maxn[k][j]);\n                }\n            }\n        }\n    }\n    for(int k=1;k<=n;k++){\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                if(i==j||j==k||i==k) continue;\n                if(a[i][j]>a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j])){\n                    a[i][j]=a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j]);\n                    maxn[i][j]=max(maxn[i][k],maxn[k][j]);\n                }\n            }\n        }\n    }\n    for(int k=1;k<=n;k++){\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                if(i==j||j==k||i==k) continue;\n                if(a[i][j]>a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j])){\n                    a[i][j]=a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j]);\n                    maxn[i][j]=max(maxn[i][k],maxn[k][j]);\n                }\n            }\n        }\n    }\n    for(int k=1;k<=n;k++){\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                if(i==j||j==k||i==k) continue;\n                if(a[i][j]>a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j])){\n                    a[i][j]=a[i][k]+a[k][j]-min(maxn[i][k],maxn[k][j]);\n                    maxn[i][j]=max(maxn[i][k],maxn[k][j]);\n                }\n            }\n        }\n    }\n    for(int i=1;i<=k;i++){\n        int ai=readin();\n        int bi=readin();\n        printf(\"%d\\n\",a[ai][bi]);\n    }\n    return 0;\n}\n```",
        "postTime": 1509259128,
        "uid": 26988,
        "name": "\u50da\u673a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    },
    {
        "content": "\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u7528\u6392\u5e8f\u5c31\u80fdAC\u7684\u65b9\u6cd5\n\n\uff08\u6392\u5e8f\u7684\u65b9\u6cd5\u8bf7\u770b\u8fd9\u4f4d\u5927\u795e\u7684\u535a\u5ba2\uff1ahttp://www.cnblogs.com/peter-le/p/6014643.html\uff09\n\n\n\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8bb0\u5f55\u4e0b\u4ece\u70b9x\u5230\u70b9y \u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u548c\u5728\u6700\u77ed\u8def\u4e0a\u7684\u82b1\u8d39\n\n\u7136\u540e\u5c31\u662f\u5957Floyd\u7684\u6a21\u677f\u3002\n\n\u4f46\u662f\u6ce8\u610f\uff0c\u56e0\u4e3a\u4f60\u7684\u957f\u5ea6\u548c\u82b1\u8d39\u662f\u5206\u5f00\u8bb0\u5f55\u7684\n\n\u6240\u4ee5\u4e00\u904dFloyd\u8dd1\u51fa\u6765\u7684\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u503c\n\n\u6211\u4eec\u53ef\u4ee5\u591a\u8dd1\u51e0\u904d\u8bd5\u8bd5\n\n    \n            \n    \n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int MAXN=251;\nconst int maxn=0x7ffffff;\nvoid read(int & n)\n{\n    char c='+';int x=0;    \n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-48;\n        c=getchar();\n    }\n    n=x;\n}\nint a[MAXN][MAXN];\nint spend[MAXN][MAXN];\nint b[MAXN];\nint n,m,q;\nvoid floyd()\n{\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n            {\n                int p=a[i][k]+a[k][j]+max(spend[i][k],spend[k][j]);\n                if((p<a[i][j]+spend[i][j])&&a[i][k]<maxn&&a[k][j]<maxn)\n                {\n                    //a[i][j]=a[i][j]-max(spend[i],spend[j]);\n                    a[i][j]=a[i][k]+a[k][j];\n                    spend[i][j]=max(spend[i][k],spend[k][j]);\n                }            \n            }\n}\nint main()\n{\n    read(n);read(m);read(q);\n    for(int i=1;i<=n;i++)\n        read(b[i]);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        {\n            if(i==j)\n            a[i][j]=0;\n            else\n            a[i][j]=maxn;\n        }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        read(x);read(y);read(z);\n        if(a[x][y]>z)\n        {\n            a[x][y]=z;\n            a[y][x]=z;\n            spend[x][y]=max(b[x],b[y]);\n            spend[y][x]=max(b[x],b[y]);\n        }\n    }\n    floyd();\n    floyd();\n    floyd();            \n    for(int i=1;i<=q;i++)\n    {\n        int x,y;\n        read(x);read(y);\n        printf(\"%d\\n\",a[x][y]+spend[x][y]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1498036706,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2966 \u3010[USACO09DEC]\u725b\u6536\u8d39\u8def\u5f84Cow Toll Paths\u3011"
    }
]