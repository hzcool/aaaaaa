[
    {
        "content": "**\u770b\u5230\u697c\u4e0a\u6709$dalao$\u7528$tarjan$\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f+$dp$\u7684\uff0c\u4e5f\u6709\u7528$spfa$\u53cc\u5411\u5e7f\u641c\u7684\uff0c\u90fd\u7528\u4e86\u5c06\u8fd1$100$\u884c\u4ee3\u7801\u3002**\r\n\r\n**\u4f46\u662f\u6211\u53ea\u7528\u4e86\u66b4\u529b+\u52a8\u89c4\u3002**\r\n\r\n\u5927\u4f6c\u8f7b\u55b7\u3002\r\n\r\n\r\n**\u63a5\u4e0b\u6765\u8bb2\u5177\u4f53\u89e3\u6cd5\u3002**\r\n\r\n\r\n**\u7b2c\u4e00**\u3001\u8f93\u5165\u3002\u5b58\u90bb\u63a5\u8868\r\n\r\n\r\n**\u7b2c\u4e8c**\u3001\u6211\u4eec\u9700\u8981\u505a\u6df1\u641c\u3002\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u505a\uff0c\u540c\u65f6\u505a\u52a8\u89c4\uff1a\r\n\r\n\u51fd\u6570\u5982\u4e0b\uff08\u8d34\u4e86\u6ce8\u91ca\uff09.\r\n\r\n```cpp\r\nvoid dfs(int x,int minx,int pre) {                           //x\u8868\u793a\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\u7f16\u53f7\uff0cminx\u8868\u793a\u76ee\u524d\u4e3a\u6b62\u7684\u6700\u5c0f\u7684\u5546\u54c1\u4ef7\u683c\uff0cpre\u8868\u793a\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\r\n    int flag=1;                                          //\u7528\u4e8e\u5224\u65ad\u662f\u5426\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u9700\u8981\u7ec8\u6b62\r\n    minx=min(c[x],minx);                                 //\u5224\u65ad\u672c\u6b21\u7684\u5546\u54c1\u4ef7\u683c\u662f\u5426\u662f\u6700\u5c0f\u503c\r\n    if (mi[x]>minx) mi[x]=minx,flag=0;                   //\u5224\u65admi\u6570\u7ec4\uff08\u8bb0\u5f55\u4e86\u6bcf\u6b21\u7684\u6700\u5c0f\u503c\uff09\u5e76\u66f4\u65b0\uff0c\u5728\u66f4\u65b0\u7684\u540c\u65f6\u628aflag\u8bbe\u4e3a0\uff08\u4e0d\u7528\u9000\u51fa\u4e86\uff09\r\n    \u505a\u52a8\u6001\u89c4\u5212\uff1b                                         //\u522b\u7740\u6025flag\u8fd8\u4f1a\u7ee7\u7eed\u66f4\u65b0\u7684\r\n    if (flag) return;                                    //\u9000\u51fa\uff0c\u5343\u4e07\u4e0d\u80fd\u9732\uff0c\u4e0d\u7136\u7a0b\u5e8f\u5c31\u4f1a\u653e\u98de\u81ea\u6211\uff0c\u5806\u6808\u6ea2\u51fa->\u5b8c\u7f8eMLE\u53ea\u670910\u5206\u3002\r\n    for (int i=0;i<g[x].size();i++) dfs(g[x][i],minx,x); //\u7ee7\u7eed\u8fdb\u884c\u9012\u5f52\u8c03\u7528\uff0c\u8bbf\u95ee\u76ee\u524d\u8282\u70b9\u80fd\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u3002\r\n}\r\n\r\n```\r\n**\u7b2c\u4e09**\u3001\u52a8\u6001\u89c4\u5212\uff1a\r\n\r\n\u72b6\u6001$f[x]$\u7684\u542b\u4e49\u5982\u4e0b\uff1a\u8d70\u5230\u7b2cx\u4e2a\u8282\u70b9\u4e3a\u6b62\u6700\u591a\u8d5a\u7684\u65c5\u8d39\u3002\r\n\r\n\u65b9\u7a0b\u5982\u4e0b\uff1a$f[x]=\\max(f[prev],c[x]-minx)$\r\n\r\n\u6700\u7ec8\u8f93\u51fa\u7684\u662f\uff1a\u8d70\u5230\u7b2c$N$\u4e2a\u8282\u70b9\u4e3a\u6b62\u6700\u5927\u65c5\u8d39\uff0c\u5373$f[n]$\u3002\r\n\r\n\u518d\u6b21\u5c55\u793a\u4e00\u4e0b\u6211\u7684\u534e\u4e3d\u7684\u4ee3\u7801\uff08\u5c31\u662fvoid dfs\u7684\u201c\u505a\u52a8\u6001\u89c4\u5212\u201d\uff09\u3002\u8bb2\u5f97\u592a\u6e05\u695a\u4e86\u8fde\u6ce8\u91ca\u90fd\u4e0d\u9700\u8981\u4e86:)\r\n\r\n    int maxx=max(f[pre],c[x]-minx);\r\n    if (f[x]<maxx) f[x]=maxx,flag=0;\r\n\r\n**\u7b2c\u56db**\u3001\u53d8\u91cf\u8bf4\u660e\u4e0e\u521d\u59cb\u5316\uff1a\r\n```cpp\r\nvector<int> g[MAXN];\r\nint n,m,f[MAXN],mi[MAXN],c[MAXN];\r\n```\r\ng\u662f\u90bb\u63a5\u8868\uff0cn,m\u5982\u9898\u76ee\u6240\u793a\uff1b\r\n\r\nc\u662f\u5546\u54c1\u4ef7\u503c\uff0cmi\u662f\u6700\u5c0f\u5546\u54c1\u4ef7\u503c\uff0cf\u662f\u52a8\u89c4\u72b6\u6001\u53d8\u91cf\u3002\r\n\r\n\u521d\u59cb\u5316\uff1ami\u90fd\u4e3a\u65e0\u7a77\u5927\u3002\r\n\r\n\r\n**\u7b2c\u4e94**\u3001\u4e3b\u7a0b\u5e8f\r\n\r\n```cpp\r\nint main() {\r\n    scanf(\"%d%d\",&n,&m);                               //\u8f93\u5165\r\n    for (int i=0;i<MAXN;i++) mi[i]=INF;                //\u521d\u59cb\u5316\r\n    for (int i=1;i<=n;i++) scanf(\"%d\",&c[i]);          //\u8f93\u5165\r\n    for (int i=1;i<=m;i++) {                           //\u8f93\u5165\r\n        int t1,t2,t3;                                  //\u8f93\u5165\r\n        scanf(\"%d%d%d\",&t1,&t2,&t3);                   //\u8f93\u5165\r\n        g[t1].push_back(t2);                           //\u90bb\u63a5\u8868\r\n        if (t3==2) g[t2].push_back(t1);                //\u90bb\u63a5\u8868\r\n    }                                                  //\u5927\u62ec\u53f7\r\n    dfs(1,INF,0);                                      //\u5173\u952e\u53ea\u6709\u4e00\u884c\r\n    printf(\"%d\\n\",f[n]);                               //\u8f93\u5165\r\n    return 0;                                          //\u518d\u89c1\r\n}                                                      //\u5927\u62ec\u53f7\r\n\r\n\r\n```\r\n**\u6700\u540e\uff0c\u6574\u4e2a\u53ea\u670932\u884c\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\uff1a**\r\n```cpp\r\n\r\n#include<bits/stdc++.h>\r\n#define INF 0x7f7f7f7f\r\n#define MAXN 100005\r\nusing namespace std;\r\n\r\nvector<int> g[MAXN];\r\nint n,m,f[MAXN],mi[MAXN],c[MAXN];\r\n\r\nvoid dfs(int x,int minx,int pre) {\r\n    int flag=1; \r\n    minx=min(c[x],minx);\r\n    if (mi[x]>minx) mi[x]=minx,flag=0;\r\n    int maxx=max(f[pre],c[x]-minx);\r\n    if (f[x]<maxx) f[x]=maxx,flag=0;\r\n    if (flag) return;\r\n    for (int i=0;i<g[x].size();i++) dfs(g[x][i],minx,x);\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d%d\",&n,&m);\r\n    for (int i=0;i<MAXN;i++) mi[i]=INF;\r\n    for (int i=1;i<=n;i++) scanf(\"%d\",&c[i]);\r\n    for (int i=1;i<=m;i++) {\r\n        int t1,t2,t3;\r\n        scanf(\"%d%d%d\",&t1,&t2,&t3);\r\n        g[t1].push_back(t2);\r\n        if (t3==2) g[t2].push_back(t1);\r\n    }\r\n    dfs(1,INF,0);\r\n    printf(\"%d\\n\",f[n]);\r\n    return 0;\r\n}\r\n\r\n```",
        "postTime": 1516972715,
        "uid": 41537,
        "name": "HY\u55b5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u5206\u5c42\u56fe\u72b6\u6001\u8f6c\u79fb + SPFA\n\n\u5176\u5b9e\u6b64\u9898\u53ef\u4ee5**\u4e0d\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9**\uff0c\u8fd8\u6709\u66f4\u4f18\u7f8e\u7684\u89e3\u6cd5\uff0c**\u53ea\u970040\u884c\u4ee3\u7801**\u3002\n\n\u4e3b\u8981\u601d\u60f3\u662f\u7c7b\u4f3c\u201c\u5206\u5c42\u56fe\u201d\uff0c\u6216\u8005\u7c7b\u4f3c\u201cDAG\u201d\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u7684\u72b6\u6001\u8f6c\u79fb\u601d\u60f3\uff0c\u7279\u522b\u662f\u9488\u5bf9\u8fd9\u79cd\u72b6\u6001\u91cf\u76f8\u4e92\u5f71\u54cd\u7684\u95ee\u9898\uff0c\u5206\u5c42\u56fe\u601d\u60f3\u5f88\u5b9e\u7528\u3002\n\n## \u5206\u6790\n\n\u8bfb\u5b8c\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u7684\u4e8b\u5b9e\uff1a\n\n- \u4f60\u53ef\u4ee5\u5728\u56fe\u4e0a\u4efb\u610f\u8d70\u52a8\n\n- \u6700\u7ec8\u7b54\u6848\u53ea\u4e0e\u4f60\u7684\u4e70\u5165\u4e0e\u5356\u51fa\u4ef7\u683c\u6709\u5173\uff08\u6211\u4eec\u5c31\u628a\u4e70\u5165\u5356\u51fa\u4ef7\u503c\u4f5c\u4e3a\u8fb9\u6743\uff09\n\n- \u5982\u679c\u4f60\u4e70\u5165\u4e86\u4e00\u4e2a\u6c34\u6676\u7403\uff0c\u4f60\u662f\u6ca1\u6709\u4e0d\u5356\u5b83\u7684\u9053\u7406\u7684\uff08\u663e\u7136\u54af\uff0c\u4e70\u4e86\u4e0d\u5356\u8840\u4e8f...\uff09\n\n\u66b4\u529b\u7b97\u6cd5\u4e0d\u96be\u5f97\u51fa\uff1a\n\n\u6211\u53ea\u5173\u5fc3\u6211\u5728\u54ea\u91cc\u4e70\u4e86\u8fd9\u4e2a\u6c34\u6676\u7403\uff0c\u5728\u54ea\u91cc\u628a\u5b83\u5356\u51fa\u53bb\uff0c\u5e76\u4e14\uff0c\u6211\u80fd\u5426\u4ece\u8d77\u70b9\u8d70\u5230\u6211\u7684\u4e70\u5165\u70b9\uff0c\u4ece\u4e70\u5165\u70b9\u8d70\u5230\u5356\u51fa\u70b9\uff0c\u7136\u540e\u5728\u8d70\u5230 $n$ \n\n\u56e0\u6b64\uff0c\u5148\u679a\u4e3e\u4e24\u4e2a\u70b9\u518dbfs\u68c0\u67e5\u80fd\u5426\u5230\u8fbe\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002\n\n\u800c\u6b64\u9898\u7684\u96be\u70b9\u5728\u4e0e\u4f60\u5982\u4f55\u77e5\u9053\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u4e70\u5165\uff0c\u5356\u51fa\uff0c\u7ec8\u70b9\uff08\u5373\u4e0a\u4e24\u884c \u5e76\u4e14 \u540e\u9762\u6211\u8bf4\u7684\u8bdd\uff09\uff0c\u548c\u4f60\u80fd\u5426\u628a\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u8003\u8651\u5728\u5185\u3002\n\n\u5206\u5c42\u56fe\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\n\u7531\u4e8e\u53ef\u4ee5\u4efb\u610f\u8d70\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u5f20\u56fe\uff0c\u4ee4\u56fe\u4e0a\u7684\u8fb9\u5168\u90fd\u662f $0$ \uff0c\u8868\u793a\u6211\u7684\u8d70\u52a8\u5bf9\u6211\u6700\u7ec8\u7684\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\u3002\n\n\n\u8003\u8651\u67d0\u4e2a\u70b9 $i$ \uff0c\u5b83\u4e70\u5165\u6216\u8005\u5356\u51fa\u6c34\u6676\u7403\u7684\u82b1\u8d39\u662f $v_i$ \u3002\n\n\u90a3\u4e48\uff1a\n**\u5f53\u6211\u4eec\u8fdb\u884c\u4e70\u5165\u64cd\u4f5c**\uff0c\u6211\u4eec\u5c31\u5efa\u7acb\u4e00\u6761**\u6709\u5411\u8fb9**\u8f6c\u79fb\u5230\u4e00\u5f20\u65b0\u56fe\u4e0a\uff0c\u8fb9\u7684\u5927\u5c0f\u4e3a $-v_i$ \uff0c\u5b83\u4ece\u7b2c\u4e00\u5c42\u7684\u70b9 $i_{0}$  ~~\u6307\u5411\u70b9 $i$ \u6240\u80fd\u5230\u8fbe\u7684\u70b9\uff08\u5728\u7b2c\u4e8c\u5c42\u56fe\u4e0a\uff09~~  _\u6307\u5411\u7b2c\u4e8c\u5c42\u7684\u70b9 $i_{1}$_  \u3002\u800c\u8fd9\u5f20\u65b0\u56fe\u5c31\u662f\u6211\u4eec\u7684\u7b2c\u4e8c\u5c42\u56fe\u3002\n\n\u5b83\u8868\u793a\uff1a\u5047\u5982\u6211\u9009\u62e9\u8d70\u4e86\u8fd9\u6761\u8fb9\uff0c\u5c31\u662f\u6211\u5728\u8fd9\u4e2a\u70b9\u4e70\u4e86\u8fd9\u4e2a\u6c34\u6676\u7403\uff0c\u6211\u4e0d\u4f1a\u53cd\u6094\uff0c\u5e76\u4e14\u6211\u63a5\u4e0b\u6765\u8003\u8651\u5728\u67d0\u4e2a\u70b9\u5356\u5b83\u3002\n\n**\u5f53\u6211\u4eec\u8fdb\u884c\u5356\u51fa\u64cd\u4f5c**\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u6761\u6709\u5411\u8fb9\u8f6c\u79fb\u5230\u7b2c\u4e09\u5c42\u56fe\u4e0a\uff0c\u8fb9\u7684\u5927\u5c0f\u4e3a $v_i$\uff0c\u5b83\u4ece\u7b2c\u4e8c\u5c42\u7684\u70b9 $i_{1}$  ~~\u6307\u5411\u70b9 $i$ \u6240\u80fd\u5230\u8fbe\u7684\u70b9\uff08\u5728\u7b2c\u4e8c\u5c42\u56fe\u4e0a\uff09~~  _\u6307\u5411\u7b2c\u4e09\u5c42\u7684\u70b9 $i_{2}$_  \u3002\n\n\u5b83\u8868\u793a\uff1a\u5047\u5982\u6211\u9009\u62e9\u8d70\u4e86\u8fd9\u6761\u8fb9\uff0c\u5c31\u662f\u6211\u5728\u8fd9\u4e2a\u70b9\u5356\u4e86\u8fd9\u4e2a\u6c34\u6676\u7403\uff0c\u6211\u4e0d\u4f1a\u53cd\u6094\uff0c\u5e76\u4e14\u6211\u63a5\u4e0b\u6765\u8003\u8651\u8d70\u5411\u7ec8\u70b9\u3002\n\n> \u6ce8\uff1a\u4e0d\u80fd\u6307\u5411 $i$ \u4e0b\u4e00\u5c42\u5230\u8fbe\u7684\u70b9\uff0c\u56e0\u4e3a\u8fd9\u6837\u610f\u601d\u5c31\u53d8\u6210\u4e86\uff1a\u6211\u5728\u8fd9\u4e2a\u70b9\u4e70\u5165\u4e86\u6c34\u6676\u7403\uff0c*\u5e76\u4e14\u6211\u4e00\u5b9a\u4ece\u8fd9\u4e2a\u70b9\u8d70\u51fa\u53bb*\u3002\u591a\u4e86\u4e00\u5c42\u610f\u601d\u5c31\u4e0d\u4e00\u6837\u4e86\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u7b2c\u4e00\u5c42\u56fe\u8d70\u5230\u7b2c\u4e8c\u5c42\u56fe\u8d70\u5230\u7b2c\u4e09\u5c42\u56fe\u8d70\u5230\u7ec8\u70b9\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u51b3\u7b56\u3002\n\n\u5bf9\u4e8e**\u4efb\u4f55**\u4e00\u79cd\u51b3\u7b56\u90fd\u53ef\u4ee5\u62bd\u8c61\u4e3a\u6211\u4ece $1$\u70b9 \u8d70\u5230\u70b9 $x$ \u4e70\u5165\uff0c\u7136\u540e\u8d70\u5230\u70b9 $y$ \u5356\u51fa, \u7136\u540e\u8d70\u5230\u70b9 $n$\u3002\u800c\u6bcf\u4e00\u79cd\u51b3\u7b56\u90fd\u5728\u56fe\u4e2d\u5bf9\u5e94\u4e86\u4e00\u6761\u4ece $1_0$ \u5230 $x_0$ \u5230 $x_1$ \u5230 $y_1$ \u5230 $y_2$ \u5230 $n_2$ \u7684\u8def\u5f84\u3002   \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0hulu3d3.png)\n\n\u6240\u4ee5\u5206\u5c42\u56fe\u628a\u6240\u6709\u5408\u6cd5\u7684\u51b3\u7b56\u90fd\u8003\u8651\u5230\u4e86\u3002\u800c\u6211\u4eec\u8981\u6c42\u7684\u6700\u5927\u6536\u76ca\u5c31\u6b63\u597d\u5bf9\u5e94\u4e86\u56fe\u4e0a\u7684\u4ece $1_0$ \u5230 $n_2$ \u6700\u957f\u7684\u8def\u5f84\u3002\n\n> \u6ce8\uff1a\u5f53\u7136\u4e5f\u53ef\u4ee5\u628a\u8fb9\u6743\u90fd\u6539\u6210\u8d1f\u7684\u6c42\u4e2a\u6700\u77ed\u8def(\u56e0\u4e3a\u4e0d\u5b58\u5728\u8d1f\u73af\u4e5f\u662f\u53ef\u4ee5\u7684)\n\n### \u6700\u540e\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5206\u5c42\uff1a\n\n\u56e0\u4e3a\u5f53\u4f60\u5206\u4e86\u5c42\uff0c\u4f60\u5c31\u53ef\u4ee5\u4ece\u8fd8\u672a\u4e70\u5165\u8fd9\u4e2a\u72b6\u6001\uff0c\u8f6c\u79fb\u5230\u5df2\u7ecf\u4e70\u5165\u51c6\u5907\u5356\u51fa\u8fd9\u4e2a\u72b6\u6001\uff0c\u7136\u540e\u5728\u8f6c\u79fb\u5230\u4ece\u5356\u51fa\u70b9\u8d70\u5411\u7ec8\u70b9\u7684\u72b6\u6001\u3002\u7531\u4e8e\u6709\u5411\u8fb9\u7684\u5efa\u7acb\uff0c\u4f60\u4e0d\u80fd\u4ece\u7b2c\u4e8c/\u4e09\u5c42\u8d70\u56de\u7b2c\u4e00\u5c42\u56fe\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u4f60\u53ea\u505a\u4e00\u6b21\u4e70\u5356\uff0c\u800c\u4e0d\u662f\u65e0\u9650\u505a\u4e70\u5356\uff0c\u7b26\u5408\u4e86\u9898\u76ee\u7684\u8981\u6c42\n\n\n\u800c\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u5c31\u662f\u6c42\u4ece\u7b2c\u4e00\u5c42\u56fe\u7684 $1$ \u53f7\u70b9\uff0c\u8d70\u9053\u7b2c\u4e09\u5c42\u56fe\u7684 $n$ \u53f7\u70b9\u7684\u6700\u957f\u8def,\u5982\u56fe\u6240\u793a\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fxq0pi14.png)\n\n\u5230\u6b64\uff0c\u8fd9\u9053\u9898\u5c31\u89e3\u5b8c\u4e86\u3002\n\n### UPDATE 2020.10.6\n\n\u5176\u5b9e2\u5e74\u524d\u6211\u5df2\u7ecf\u9000\u5f79\uff0c\u62b1\u6b49\u9e3d\u4e86\u8fd9\u4e48\u4e45\u624d\u66f4\u65b0\u3002\u611f\u8c22\u5728\u8bc4\u8bba\u4e2d\u5e2e\u6211\u6307\u51fa\u9519\u8bef\uff0c\u63d0\u51fa\u5efa\u8bae\u7684\u5927\u4f6c\u4eec\u3002\u8fd9\u6b21\u66f4\u65b0\u4fee\u6539\u4e86\u5efa\u6a21\uff0c\u7b26\u53f7\u52a0\u5165\u4e86LaTeX, \u4f18\u5316\u4e86\u4ee3\u7801\u3002Hack\u6570\u636e\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7\u4e86\u3002\u5982\u679c\u53d1\u73b0\u4e86\u5176\u4ed6\u95ee\u9898\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u4e2d\u8ba8\u8bba\uff0c\u611f\u8c22\u5404\u4f4d\u7684\u652f\u6301\u3002\n\n# \u4ee3\u7801\u5982\u4e0b\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5 + 5;\n\nint n, m, d[maxn*3], inq[maxn*3];\nvector<pair<int, int>> G[maxn*3];\n\n#define t(x,i) (x+i*n)  // t(x,i) \u8868\u793a\u7b2ci\u5c42\u7684x\n// \u5efa\u7acbx->y\u8fb9\u7684\u51fd\u6570, \u4e0d\u7528\u52a0 make_pair\u662f C++11\u7279\u6027\n#define add(x, y) G[t(x,0)].push_back({t(y,0), 0}), G[t(x,1)].push_back({t(y,1),0}), G[t(x,2)].push_back({t(y,2),0})\n\nvoid spfa(int s) {\n    for(int i = 1;i <= n*3;i++) d[i] = INT_MIN; // \u8fd9\u91ccn*3\u522b\u6f0f\u4e86, INT_MIN \u662fC++\u5185\u7f6e\u6700\u5c0f\u503c\u5e38\u91cf\n    d[s] = 0; \n    queue<int> Q; inq[s] = true; Q.push(s);\n    while(!Q.empty()) {\n        int x = Q.front(); Q.pop(); inq[x] = false;\n        for(auto [v, len] : G[x])  // C++17 \u7279\u6027, \u7b49\u4ef7\u4e8e int v = G[x][i].first, len = G[x][i].second;\n            if(d[v] < d[x] + len) {\n                d[v] = d[x] + len;\n                if(!inq[v]) { Q.push(v); inq[v] = true; }\n            } \n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0); // \u52a0\u901fcin, cout\n    cin >> n >> m;\n    for(int i = 1, v;i <= n; ++i) {\n        cin >> v;\n        G[t(i,0)].push_back({t(i,1), -v});\n        G[t(i,1)].push_back({t(i,2), v});\n    }\n    for(int i = 1,x,y,z;i <= m; ++i) {\n        cin >> x >> y >> z; add(x, y);\n        if(z == 2) add(y, x);\n    }\n    spfa(t(1,0));\n    cout << d[t(n,2)] << endl;\n    return 0;\n}\n```",
        "postTime": 1509526780,
        "uid": 15019,
        "name": "fy1234567ok",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u5230\u597d\u591a\u9898\u89e3\u53c8\u662f $SPFA$ \u53c8\u662f $DP$ \u7684\uff0c\u6211\u6ca1\u60f3\u901a\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u590d\u6742\uff1f$BFS$ \u4e0d\u9999\u561b\uff1f\u3002\u3002\n\n#### \u9898\u76ee\u5206\u6790\uff1a\n\n\u9898\u9762\u7b80\u610f\u662f\uff1a\u6c42\u4e00\u6761\u70b9\u548c\u8fb9\u90fd\u53ef\u91cd\u590d\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u5b58\u5728\u4e24\u70b9 $a,b$ \uff0c\u4f7f\u5f97 $a$ \u5148\u6bd4 $b$ \u8bbf\u95ee\u4e14 $V_b-V_a$ \u5c3d\u53ef\u80fd\u5730\u5927\u3002\n\n\u6211\u5148\u60f3\u5230\u8d2a\u5fc3\uff0c\u5c3d\u91cf\u53d6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u6765\u76f8\u51cf\u5f97\u5230\u6700\u5927\u5229\u6da6\uff0c\u7136\u540e\u5c31\u662f **\u662f\u5426\u5b58\u5728\u5408\u6cd5\u8def\u5f84** \u7684\u95ee\u9898\u3002\n\n\u80af\u5b9a\u4e0d\u4e00\u5b9a\u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u8f6c\u70b9\u90fd\u80fd\u6ee1\u8db3\uff1a\u80fd\u4ece\u8d77\u70b9\u5230\u8fbe\u6700\u5c0f\u503c\uff0c\u4ece\u6700\u5c0f\u503c\u5230\u8fbe\u4e2d\u8f6c\u70b9\uff0c\u4ece\u4e2d\u8f6c\u70b9\u5230\u8fbe\u6700\u5927\u503c\uff0c\u4ece\u6700\u5927\u503c\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u7684\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u80fd\u591f\u5230\u7684\u6700\u5c0f\u503c\uff08$minv[i]$\uff09\uff0c\u4ece\u8fd9\u4e2a\u70b9\u5230\u7ec8\u70b9\u80fd\u591f\u5230\u7684\u6700\u5927\u503c\uff08$maxv[i]$\uff09\u3002\n\n\u7136\u800c\u7ef4\u62a4 **\u67d0\u4e2a\u70b9\u80fd\u5230\u8fbe\u54ea\u4e9b\u70b9** \u6216\u8005 **\u54ea\u4e9b\u70b9\u80fd\u5230\u8fbe\u67d0\u4e2a\u70b9**\uff08\u5efa\u53cd\u56fe\uff09\u662f\u5f88\u5bb9\u6613\u7528 $BFS$ \u5b8c\u6210\u7684\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5$DFS$\uff09\u3002\n\n\u6240\u4ee5\u5c06 \u80fd\u4ece\u8d77\u70b9\u904d\u5386\u5230\u7684\u70b9\u6309\u4ef7\u503c\u5347\u5e8f\u6392\u5e8f\uff0c\u4e00\u4e2a\u4e2a\u5c3d\u91cf\u53bb\u5f71\u54cd\u5176\u4ed6\u70b9\u7684 $minv[]$, \u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u6309\u4ef7\u503c\u964d\u5e8f\u6392\u5e8f\uff0c\u4e00\u4e2a\u4e2a\u5c3d\u91cf\u53bb\u5f71\u54cd\u5176\u4ed6\u70b9\u7684 $maxv[]$\uff0c\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002\n\n\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u65e2\u80fd\u4ece\u8d77\u70b9\u904d\u5386\u5230\uff0c\u4e5f\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u5c31\u7528\u8fd9\u4e2a\u70b9\u7684 $maxv_i - minv_i$ \u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\u3002\n\n\u56e0\u4e3a $V[]$ \u6bd4\u8f83\u5c0f\uff0c\u5982\u679c\u662f\u6876\u6392\u5e8f\u5219\u53ef\u4ee5\u505a\u5230 $O(n+m)$ \u7684\u4f18\u79c0\u590d\u6742\u5ea6 ~~\uff08\u6bd4\u4e0d\u9760\u8c31\u7684SPFA\u597d\u591a\u4e86\uff09~~ \u3002\n\n#### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define N 100005\n#define M 1000005\nusing namespace std;\n\nint n, m, v[N], minv[N], maxv[N];\nint sa[N], ans;\nqueue <int> q;\n\nstruct GRAPH {//\u56fe\n\tint head[N], to[M], nxt[M], cnt = 1;//\u524d\u5411\u661f\n\tbool toab[N];//\u80fd\u88ab\u5230\u8fbeor\u80fd\u5230\u8fbe\n\n\tvoid addedge(int u, int v) {\n\t\tto[cnt] = v;\n\t\tnxt[cnt] = head[u];\n\t\thead[u] = cnt++;\n\t}\n\n\tvoid bfs(int s) {//\u80fd\u88ab\u5230\u8fbeor\u80fd\u5230\u8fbe \u5224\u65ad\n\t\ttoab[s] = 1; q.push(s);\n\t\twhile(q.size()) {\n\t\t\tint p = q.front(); q.pop();\n\t\t\tfor(int i = head[p];i;i = nxt[i])\n\t\t\t\tif(!toab[to[i]])\n\t\t\t\t\ttoab[to[i]] = 1, q.push(to[i]);\n\t\t}\n\t}\n\n\tvoid mark(int s, int* a, int v) {//\u6807\u8bb0\u5176\u4ed6\u70b9\u4fe1\u606f\n\t\ta[s] = v; q.push(s);\n\t\twhile(q.size()) {\n\t\t\tint p = q.front(); q.pop();\n\t\t\tfor(int i = head[p];i;i = nxt[i])\n\t\t\t\tif(!a[to[i]])//\u9898\u9762\u4fdd\u8bc1v>=1\uff0c\u5c31\u4e0d\u5fc5\u521d\u59cb\u5316\u6210\u5176\u4ed6\u503c\u3002\n\t\t\t\t\ta[to[i]] = v, q.push(to[i]);\n\t\t}\n\t}\n} mp, fmp;//\u56fe\u548c\u53cd\u56fe\n\nstruct OP {//\u70b9\u6392\u5e8f\u89c4\u5219\n\tbool operator() (int a, int b) const {\n\t\treturn v[a] < v[b];\n\t}\n};\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tint a, b, op;\n\tfor(int i = 1;i <= n;i++)\t\n\t\tscanf(\"%d\", v + i);\n\twhile(m--) {\n\t\tscanf(\"%d%d%d\", &a, &b, &op);\n\t\tmp.addedge(a, b);\n\t\tfmp.addedge(b, a);\n\t\tif(op == 2) {//\u5b58\u56fe\n\t\t\tmp.addedge(b, a);\n\t\t\tfmp.addedge(a, b);\n\t\t}\n\t}\n\tmp.bfs(1); fmp.bfs(n);//\u80fd\u88ab\u5230\u8fbeor\u80fd\u5230\u8fbe \u6267\u884c\u5224\u65ad\n\tfor(int i = 1;i <= n;i++) sa[i] = i;\n\tsort(sa + 1, sa + n + 1, OP());\n\tfor(int i = 1;i <= n;i++)//\u6807\u8bb0minv\n\t\tif(!minv[sa[i]] && mp.toab[sa[i]])//\u80fd\u88ab\u8d77\u70b9\u5230\u8fbe \u4e14 \u6ca1\u88ab\u6807\u8bb0\n\t\t\tmp.mark(sa[i], minv, v[sa[i]]);\n\tfor(int i = n;i;i--)//\u6807\u8bb0maxv\n\t\tif(!maxv[sa[i]] && fmp.toab[sa[i]])//\u80fd\u5230\u8fbe\u7ec8\u70b9 \u4e14 \u6ca1\u88ab\u6807\u8bb0\n\t\t\tfmp.mark(sa[i], maxv, v[sa[i]]);\n\t/*=================\u8c03\u8bd5\u7528=================\n\tputs(\"ok now\");\n\tfor(int i = 1;i <= n;i++)\n\t\tprintf(\"%d: max: %d min: %d\\n\", i, maxv[i], minv[i]);\n\tputs(\"\");\n\t===================\u8c03\u8bd5\u7528=================*/\n\tfor(int i = 1;i <= n;i++)//\u66f4\u65b0\u7b54\u6848\n\t\tif(mp.toab[i] && fmp.toab[i])//\u5b58\u5728\u5408\u6cd5\u8def\u5f84\n\t\t\tans = max(ans, maxv[i] - minv[i]);//\u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```\n\n#### \u540e\u8bb0\uff1a\n\n\u4e00\u9053\u4e0d\u9519\u7684\u56fe\u8bba\uff0c\u5c0f\u5c0f\u7684\u601d\u7ef4\u8fc7\u540e\u57fa\u672c\u5c31\u662f\u534a\u4e2a\u7801\u519c\u9898\uff0c\u6211\u5199\u4e86 $80$ \u884c\uff0c\u6bd4\u8f83\u591a\uff0c$bfs()$ \u5176\u5b9e\u53ef\u4ee5\u7528 $mark()$ \u66ff\u4ee3\uff0c\u51cf\u5c0f\u7801\u91cf\u4e4b\u7c7b\u7684\u3002",
        "postTime": 1572011961,
        "uid": 133236,
        "name": "saxiy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5728\u7ecf\u8fc7\u5343\u8f9b\u4e07\u82e6.\u7ec8\u4e8e\u7528\u591a\u79cd\u65b9\u6cd5\u505a\u4e86\u51fa\u6765,\u6211\u4f1a\u5728\u4e0b\u9762\u4e00\u4e00\u5206\u4eabQwQ\n\n## \u62d3\u625150\u5206\uff1a\n\n\u7531\u4e8e\u6570\u636e\u4e2d\u5df2\u660e\u786e\u5199\u51fa\u670950%\u6570\u636e\u6ca1\u6709\u73af.\u6240\u4ee5\u670950%\u6570\u636e\u53ef\u62d3\u6251\n\n\u4ee5\u4e0b\u4e3a50\u5206\u4ee3\u7801(\u633a\u597d\u7406\u89e3\u7684\u5c31\u4e0d\u8d34\u56fe\u4e86~~\u7801\u98ce\u6e05\u5947\u5c31\u4e0d\u8981\u55b7\u4e86~~):\n\n```cpp\n\n#include <iostream>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\nint r[100001],minf[100001],maxf[1000001],a[100001],c[100001];\n\nbool visa[100001],visb[100001];\n\nvector<int> g[100001],gf[100001];\n\nint main()\n{\n    //freopen(\"a.txt\",\"r\",stdin);\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i];\n        minf[i]=a[i];\n        maxf[i]=a[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        g[x].push_back(y);\n        gf[y].push_back(x);\n        r[y]++;\n        c[x]++;\n        if(z==2)\n        {\n            g[y].push_back(x);\n            gf[x].push_back(y);\n            c[y]++;\n            r[x]++;\n        }\n    }\n    queue<int> q;\n    q.push(1);\n    visa[1]=true;\n    \n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int l=g[t].size();\n        for(int i=0;i<l;i++)\n        {\n            int ne=g[t][i];\n            r[ne]--;\n            visa[ne]=true;\n            minf[ne]=min(minf[ne],minf[t]);\n            if(r[ne]==0)\n            {\n                q.push(ne);\n            }\n        }\n    }\n    q.push(n);\n    visb[n]=true;\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int l=gf[t].size();\n        for(int i=0;i<l;i++)\n        {\n            int ne=gf[t][i];\n            c[ne]--;\n            visb[ne]=true;\n            maxf[ne]=max(maxf[ne],maxf[t]);\n            if(c[ne]==0)\n            {\n                q.push(ne);\n            }\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(visa[i] && visb[i])\n            ans=max(ans,maxf[i]-minf[i]);\n    }\n    cout<<ans;\n}\n\n\n```\n\n## DFS/BFS+DFS/BFS+DFS/BFS 70-100\u5206:\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u795e\u5947.\u4e09\u8f6e\u641c\u7d22\n\n\u7b2c\u4e00\u8f6e\u627e\u52301\u80fd\u5230\u7684\u70b9\n\n\u7b2c\u4e8c\u8f6e\u627e\u5230\u80fd\u5230n\u7684\u70b9\n\n\u5c06\u6570\u7ec4\u6c42\u5e76\u96c6.\n\n\u7b2c\u4e09\u8f6e\u5728\u5e76\u96c6\u4e2d\u627e\u5230\u6700\u5927\u503c\n\n\u6b63\u5e38\u5e94\u8be5100\u5206.~~(\u4f46\u6211\u592a\u83dc\u4e86\u6240\u4ee5\u53ea\u62ff\u4e8670\u5206QwQ)~~\n\n\u4ee3\u7801:\n```cpp\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nint a[50001];\n\nvector<int> g[50001],gf[50001];\n\nbool visa[50001],visb[50001],visc[50001];\n\nint con=0;\n\nstruct edge\n{\n    int x;\n    int z;\n}vis[50001];\n\nbool cmp(edge x,edge y)\n{\n    return x.z<y.z;\n}\n\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        g[x].push_back(y);\n        gf[y].push_back(x);\n        if(z==2)\n        {\n            g[y].push_back(x);\n            gf[x].push_back(y);\n        }\n    }\n    queue<int> q;\n    q.push(1);\n    visa[1]=true;\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int l=g[t].size();\n        for(int i=0;i<l;i++)\n        {\n            int ne=g[t][i];\n            if(!visa[ne])\n            {\n                visa[ne]=true;\n                q.push(ne);\n            }\n        }\n    }\n\n    q.push(n);\n    visb[n]=true;\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        int l=gf[t].size();\n        for(int i=0;i<l;i++)\n        {\n            int ne=gf[t][i];\n            if(!visb[ne])\n            {\n                visb[ne]=true;\n                q.push(ne);\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(visa[i] && visb[i])\n        {\n            con++;\n            vis[con].x=i;\n            vis[con].z=a[i];\n        }\n    }\n\n    sort(vis+1,vis+1+con,cmp);\n    int ans=0;\n    for(int i=1;i<=con;i++)\n    {\n        memset(visc,0,sizeof(visc));\n        q.push(vis[i].x);\n        int tx=vis[i].z;\n        visc[i]=true;\n        while(!q.empty())\n        {\n            int t=q.front();\n            q.pop();\n            ans=max(ans,a[t]-tx);\n            int l=g[t].size();\n            for(int i=0;i<l;i++)\n            {\n                int ne=g[t][i];\n                if(visb[ne] && !visc[ne])\n                {\n                    visc[ne]=true;\n                    q.push(ne);\n                }\n            }\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n\n```\n\n## SPFA\u7b97\u6cd5 \u6807\u51c6100\u5206\n\n\u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u660e\u786e\n\n\u7b2cv[i]\u70b9\u4e3a\u4ece1\u5230i\u4e00\u8def\u4e0a\u6700\u5c0f\u503c\n\nt[i]\u8868\u793a\u4ecei\u5230n\u7684\u6700\u5927\u503c\n\n\u4ee3\u7801\u5982\u4e0b:\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstring>\n\nusing namespace std;\n\nint a[100001],tb[100001],ta[100001];\n\nvector<int> g[100001],gf[100001];\n\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;++i)\n    {\n        cin>>a[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        g[x].push_back(y);\n        gf[y].push_back(x);\n        if(z==2)\n        {\n            g[y].push_back(x);\n            gf[x].push_back(y);\n        }\n    }\n    queue<int> q;\n    q.push(1);\n    memset(ta,127,sizeof(ta));\n    ta[1]=2147483647;\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        ta[t]=min(ta[t],a[t]);\n        int l=g[t].size();\n        for(int i=0;i<l;i++)\n        {\n            if(ta[t]<ta[g[t][i]])\n            {\n                ta[g[t][i]]=ta[t];\n                q.push(g[t][i]);\n            }\n        }\n    }\n    q.push(n);\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        tb[t]=max(tb[t],a[t]);\n        int l=gf[t].size();\n        for(int i=0;i<l;i++)\n        {\n            if(tb[t]>tb[gf[t][i]])\n            {\n                tb[gf[t][i]]=tb[t];\n                q.push(gf[t][i]);\n            }\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        ans=max(ans,tb[i]-ta[i]);\n    }\n    cout<<ans;\n    return 0;\n}\n\n```\n\n\u70b9\u5b8c\u8d5e\u518d\u8d70\u5427QwQ",
        "postTime": 1562340140,
        "uid": 99640,
        "name": "smallfang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "/\\*\n\\* P:1073\n\n\\* Au:Small\\_Ash\n\n\\* \u505a\u6cd5\uff1a\u7f29\u70b9+DP\n\n\\* \u7528\u7684\u662f\u697c\u4e0b\u548c\u697c\u4e0b\u4e0b\u7684\u7b97\u6cd5\uff0c\u5408\u5e76\u4ee5\u540e\u5b9e\u73b0\u7684\uff08\u5462\u5416  QWsin\uff09\n\n\\* \u6bd5\u7adf\u6211\u60f3\u51fa\u7f29\u70b9\u4ee5\u540e\u5374\u60f3\u4e0d\u51fa\u600e\u4e48DP\u3002\n\n\\* \u7136\u540eQWsin\u540c\u5b66\u7684\u9898\u89e3\u7ed9\u4e86\u6211\u7075\u611f \uff0c\u63a5\u7740\u53ea\u670960\uff1f\uff1f\uff1f\uff1f\n\n\\* \u7136\u540e\u624d\u53d1\u73b0\u6211\u6570\u7ec4\u5f00\u7684\u8303\u56f4\u5f00\u5c0f\u4e86\uff0c\u8bd5\u4e86\u597d\u51e0\u6b21\u7684\u8303\u56f4\u66f4\u6539\uff0c\u624d\u53d1\u73b0\u89811000000\u624d\u884c\u3002\n\n\\* \u7136\u540eAC\u540e\u56de\u6765\u770b\u9898\u76ee\u624d\u53d1\u73b0\uff0cm\u662f500000\uff0c\u4e0d\u662f100000\u3002\u3002\u3002(\u800c\u4e14\u90bb\u63a5\u8868\u8981\u53cc\u5411\u3002\u3002\u3002)\n\n\\* \u4e8e\u662f\uff0c\u6ca1\u6709\u7136\u540e\u4e86\u3002\u3002\u3002\u3002\n\n\\* \u8be6\u7ec6\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n\\*/\n    \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nconst int MAXN=200005;\nint maxx[MAXN],minn[MAXN];//minn\u662f\u4ece\u7f29\u70b9\u540e\u7684\u8d77\u70b9\u5230\u5f53\u524d\u70b9\u7684\u6700\u5c0f\u8d2d\u5165\u4ef7\uff0cmaxx\u662f\u4ece\u8d77\u70b9\u5f53\u524d\u70b9\u7684\u6700\u5927\u6536\u76ca \nint n,m,en,dfn[MAXN],low[MAXN],in;\nint head[MAXN],next[1000005],to[1000005],w[MAXN];\nint nhead[MAXN],nnext[1000005],nto[1000005],nmax[MAXN],nmin[MAXN];\n//\u6ca1n\u7684\u662f\u65e7\u56fe\uff0c\u5e26n\u5f00\u5934\u7684\u662f\u7f29\u70b9\u540e\u7684\u65b0\u56fe \nint zhan[MAXN],zr,sd[MAXN],sdn,start,end;\nbool v[MAXN],zv[MAXN],over;\nint q[1000005],ql,qr;\nstruct edge{\n    int x,y;\n    bool operator < (edge b)const{\n        return x<b.x||(x==b.x&&y<b.y);\n    }\n    bool operator==(const edge&b)const{\n    return x==b.x&&y==b.y;\n    }\n}e[MAXN];//\u6784\u9020\u65b0\u56fe\u7528\uff0c\u8fb9\u96c6\uff1b \nvoid tarjan(int x){\n    in++;zhan[zr]=x;zv[x]=true;zr++;\n    dfn[x]=in;low[x]=in;\n    for (int i=head[x];i!=-1;i=next[i]){\n        if (dfn[to[i]]==-1){\n            tarjan(to[i]);\n            low[x]=min(low[x],low[to[i]]);\n        }\n        else if (zv[to[i]])\n            low[x]=min(low[x],dfn[to[i]]);    \n    }\n    if (dfn[x]==low[x]){\n        int y;\n        do{\n            zr--;y=zhan[zr];\n            zv[y]=false;\n            sd[y]=sdn;\n        }while(y!=x);\n        sdn++;\n    }\n    return;\n```\n}//\u8457\u540d\u7684 tarjan\u7b97\u6cd5\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\uff0c\u7f29\u70b9\u5fc5\u5907\n```cpp\nint main(){\n    memset(head,-1,sizeof(head));\n    memset(dfn,-1,sizeof(dfn));\n    memset(nhead,-1,sizeof(nhead));\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)\n        scanf(\"%d\",&w[i]);\n    for (int i=1;i<=m;i++){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        next[en]=head[a];\n        head[a]=en;\n        to[en]=b;en++;\n        if (c==2){\n            next[en]=head[b];\n            head[b]=en;\n            to[en]=a;en++;\n        }\n```\n}//\u8f93\u5165\u5904\u7406\n```cpp\n    in=0;m=en;en=0;sdn=1;\n    for (int i=1;i<=n;i++)\n        if (dfn[i]==-1) tarjan(i);//\u7f29\u70b9 \n    memset(nmin,100,sizeof(nmin));\n    for (int i=1;i<=n;i++){\n        nmax[sd[i]]=max(nmax[sd[i]],w[i]);\n        nmin[sd[i]]=min(nmin[sd[i]],w[i]);\n```\n}//\u66f4\u6539\u65b0\u70b9\u7684\u6700\u5927\u6700\u5c0f\u503c\n```cpp\n    start=sd[1];\n    end=sd[n];\n    for (int i=1;i<=n;i++){\n        for (int j=head[i];j!=-1;j=next[j]){\n            if (sd[i]!=sd[to[j]]){\n                e[en].x=sd[i];\n                e[en].y=sd[to[j]];\n                en++;\n            }\n        }\n```\n}//\u8bb0\u5f55\u6709\u7528\u8fb9\uff08\u540c\u70b9\u5185\u7684\u8fb9\u65e0\u89c6\uff09\n```cpp\n    sort(e,e+en);m=0;//\u6392\u5e8f\u8fb9 \n    en=unique(e,e+en)-e;//\u53bb\u91cd\u8fb9 \n    for (int i=0;i<en;i++){\n            nnext[m]=nhead[e[i].x];\n            nhead[e[i].x]=m;\n            nto[m]=e[i].y;m++;\n            v[e[i].y]=true;\n```\n}//\u751f\u6210\u65b0\u56fe\n```cpp\n    q[qr]=start;qr++;\n    for (int i=1;i<sdn;i++){\n        maxx[i]=nmax[i]-nmin[i];\n        minn[i]=nmin[i];\n    }//dp\u521d\u59cb\u5316 \n    while (ql<qr){\n        int k=q[ql];ql++;\n        for (int i=nhead[k];i!=-1;i=nnext[i]){\n            minn[nto[i]]=min(minn[nto[i]],minn[k]);\n            maxx[nto[i]]=max(max(maxx[k],maxx[nto[i]]),nmax[nto[i]]-minn[nto[i]]);\n            q[qr]=nto[i];qr++;\n        }\n    }//dp\u8fc7\u7a0b \n    if (maxx[end]>0) printf(\"%d\",maxx[end]);\n    else printf(\"0\\n\");\n    return 0;\n}\n```",
        "postTime": 1476782233,
        "uid": 745,
        "name": "dph754132771",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u6211\u535a\u5ba2\u770b\uff1ahttp://www.cnblogs.com/bingdada/p/7699611.html\n\n\n\u601d\u8def\uff1a\n\n\n\u4e00\u5f00\u59cb\u8bfb\u9898\u76ee\u60f3\u5230\u7684\u5c31\u662f\u8ddf\u5f3a\u8054\u901a\u5206\u91cf\u6709\u5173\u3002\n\n\n\u7136\u800c\u4e8b\u5b9e\u4e0a\uff0c\u597d\u591a\u4eba\u7528\u7684\u662f\u4e24\u904dSPFA\uff0c \u4f46\u4ed4\u7ec6\u60f3\u60f3....... \u6211\u8fd8\u662f\u7528\u6211\u4e00\u5f00\u59cb\u7684\u601d\u8def\u5427\u3002\n\n\n\u6211\u7684\u505a\u6cd5\u5c31\u662f\u5148\u5c06\u9898\u76ee\u7ed9\u51fa\u7684\u56fe\u8fdb\u884ctarjan\u7f29\u70b9\uff0c\u7136\u540e\u518d\u62d3\u6251\u6392\u5e8f\uff0c\u4e4b\u540e\u518dDP\u3002\n\n\n\u5f88\u660e\u663e\u7684\uff0c\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u9762\u7684\u6bcf\u4e2a\u57ce\u5e02\u90fd\u662f\u53ef\u4ee5\u591a\u6b21\u7ecf\u8fc7\u7684\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u5728\u6c42\u5f3a\u8054\u901a\u5206\u91cf\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u5f53\u524d\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u70b9\u7684\u6700\u5927\u503c\uff08maxx\uff09\uff0c\u6700\u5c0f\u503c\uff08minx)\uff0c\u4e0e\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\uff08\u5229\u6da6\uff09(maxcost)\u3002\n\n\n\u5728\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9\u56fe\u8fdb\u884c\u7f29\u70b9\uff0c\u7f29\u70b9\u4e4b\u540e\u65b0\u56fe\u662fDAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\uff0c\u4e4b\u540e\u5c31\u8fdb\u884cDP\u3002\n\n\n\u6211\u4eec\u8bbedp[i]\u4e3a \u65b0\u56fe\u4e2d1\u6240\u5bf9\u5e94\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7f16\u53f7\u5230 \u5f3a\u8054\u901a\u5206\u91cf\u7f16\u53f7\u4e3ai\u7684\u70b9\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002\n\n\n\u8bbemincost[i]\u4e3a\u65b0\u56fe\u4e2d1\u6240\u5bf9\u5e94\u7684\u5f3a\u8054\u901a\u5206\u91cf\u7f16\u53f7\u5230 \u5f3a\u8054\u901a\u5206\u91cf\u7f16\u53f7\u4e3ai\u7684\u70b9\u7684\u6700\u5c0f\u70b9\u503c\u3002\n\n\n\u5219\u5728\u66f4\u884cdp\u524d\u6211\u4eec\u5148\u66f4\u65b0mincost (\u5047\u8bbe\u5f53\u524d\u662f\u4ecej\u70b9\u5230i\u70b9) \uff1amincost[i] = min(mincost[j],minx[i]);\n\n\n\u4e4b\u540e\u518d\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\uff1a dp[i] = max( max(dp[i],dp[j]) , max(maxcost[i],maxx[i]-mincost[i]) );\n\n\n\u5728\u6700\u540e\u8fd4\u56de\u539f\u56fe\u8282\u70b9n\u6240\u5c5e\u7684\u5f3a\u8054\u901a\u8282\u70b9\u7f16\u53f7 \u7684dp\u503c\u5c31\u884c\u3002\n\n\n \n\n\u4e0b\u9762\u8d34\u4ee3\u7801\uff0c\u4e3b\u8981\u7ec6\u8282\u5df2\u6ce8\u91ca\uff0c\u6709\u95ee\u9898\u7ed9\u6211\u7559\u8a00\u3002\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\n      \n           \n    \n    \n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 100009\n#define M 700009\nusing namespace std;\nint en,en1,n;\nstruct edge{\n    int e;\n    edge *next;\n}*v[N],*v1[N],ed[M],ed1[M];\nvoid add_edge(int s,int e){                                //\u65e7\u56fe \n    en++;\n    ed[en].next = v[s],v[s] = ed+en,v[s]->e =e;\n}\nvoid add_edge1(int s,int e){                            //\u65b0\u56fe \n    en1++;\n    ed1[en1].next = v1[s],v1[s] = ed1+en1,v1[s]->e =e;\n}\nint t,cnt,low[N],dfn[N],belong[N],minx[N],maxx[N],sta[N],stop = 1;        //tarjan\u7ec4\u4ef6 \nbool instack[N];\nint top[N],si = 0,in[N];                                            //top\u6392\u5e8f\u7ec4\u4ef6 \nint mincost[N],maxcost[N],dp[N];                            //\u52a8\u6001\u89c4\u5212\u7ec4\u4ef6 \nint node[N];                                                //\u539f\u70b9\u503c \nvoid dfs(int now){\n    t++;\n    low[now] = dfn[now] = t;\n    instack[now] = true;\n    sta[++stop] = now;\n    for(edge *e = v[now];e;e=e->next)\n      if(!dfn[e->e]){\n          dfs(e->e);\n          low[now] = min(low[now],low[e->e]);\n      }    \n      else if(instack[e->e])low[now] = min(low[now],dfn[e->e]);\n    if(dfn[now] == low[now]){\n        cnt++;\n        int miz = 123456789,mx = -1;\n        while(sta[stop] != now){\n            int j = sta[stop--];\n            belong[j] = cnt;\n            instack[j] = false;\n            miz = min(miz,node[j]);\n            mx = max(mx,node[j]);\n        }\n        stop--;\n        instack[now] = false;\n        belong[now] = cnt;\n        miz = min(miz,node[now]);\n        mx = max(mx,node[now]);\n        minx[cnt] = miz;\n        maxx[cnt] = mx;\n        maxcost[cnt] = mx-miz;\n    }\n}\nint tarjan(){\n    for(int a = 1; a <= n; a++)                    //tarjan\u4e3b\u8fc7\u7a0b \n      if(!dfn[a])dfs(a);\n    for(int a = 1; a <= n; a++)                    //\u7f29\u70b9 \n      for(edge *e = v[a];e;e=e->next)\n        if(belong[a] != belong[e->e])\n           add_edge1(belong[a],belong[e->e]);\n    for(int a = 1; a <= cnt; a++)                //top\u6392\u5e8f \n      for(edge *e = v1[a];e;e=e->next)\n        in[e->e]++;\n    for(int a = 1; a<= cnt; a++)\n      if(in[a] == 0)top[++si] = a;\n    for(int a = 1; a <= si; a++){\n        int now = top[a];\n        for(edge *e = v1[now];e;e=e->next){\n            in[e->e]--;\n            if(!in[e->e])top[++si] = e->e;\n        }\n    }\n    mincost[top[1]] = minx[top[1]];                    //\u52a8\u6001\u89c4\u5212 \n    for(int a = 1; a <= cnt; a++){\n        int now = top[a];\n        for(edge *e = v1[now];e;e=e->next){\n            mincost[e->e] = min(mincost[now],min(minx[e->e],mincost[now]));\n            dp[e->e] = max(max(dp[e->e],dp[now]),max(maxcost[e->e],maxx[e->e]-mincost[e->e]));\n        }\n    }\n    return dp[belong[n]];\n}\nint main(){\n    int m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1; i <= n; i++)scanf(\"%d\",&node[i]);\n    for(int i = 1; i <= m; i++){\n        int u,v,k;\n        scanf(\"%d%d%d\",&u,&v,&k);\n        add_edge(u,v);\n        if(k == 2)add_edge(v,u);\n    }\n    int ans = tarjan();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1508483486,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u79c1\u8ba4\u4e3a\u8fd9\u9053\u9898\u51fa\u7684\u5f88\u597d\uff0c\u7efc\u5408\u4e86spfa\u7684\u601d\u60f3\uff08\u4f46\u662f\u4e0d\u662f\u7b97\u6700\u77ed\u8def\uff09\uff0c\u7efc\u5408\u4e86\u4e00\u70b9\u70b9\u7b80\u5355dp\u7684\u601d\u60f3\uff0c\u751a\u81f3\u8fd8\u6709\u8d2a\u5fc3\uff08\u5927\u96fe\uff09\u8fd8\u8054\u7cfb\u4e86\u53cd\u5411\u5efa\u56fe\n\n\u662f\u4e00\u9053\u5168\u65b9\u4f4d\u8054\u7cfb\u7801\u529b\u548c\u601d\u7ef4\u7684\u597d\u9898\n\n\u7efc\u5408\u4e86\u697c\u4e0b\u5144\u5f1f\u7684\u9898\u89e3\uff0c\u8bb2\u7684\u8be6\u7ec6\u4e00\u70b9\uff0c\u5e0c\u671b\u80fd\u7ed9\u5927\u5bb6\u5e26\u6765\u5e2e\u52a9\n\n\u9996\u5148\u6211\u4eec\u5148\u6765\u5206\u6790\u6700\u4f18\u8d38\u6613\u662f\u5982\u4f55\u4ea7\u751f\u7684\n\n\u5728\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u5728\u8fd9\u4e2a\u70b9\u7684\u524d\u5f00\u540e\u95ed\u533a\u95f4\u91cc\u4e70\u5165\uff0c\u5e76\u4e14\u5728\u524d\u95ed\u540e\u5f00\u533a\u89c1\u91cc\u629b\u51fa\uff0c\u6700\u5927\u7684\u5dee\u4ef7\u5373\u4e3a\u6700\u4f18\u8d38\u6613\n\n\u81ea\u7136\u60f3\u5230\u4e86spfa\uff08\u5927\u96fe\uff09\u4f46\u662fspfa\u662f\u4f9d\u8d56\u8fb9\u6743\u8fdb\u884c\u8ba1\u7b97\u7684\uff0c\u90a3\u600e\u4e48\u529e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u70b9\u6743\u8d4b\u7ed9\u76f8\u90bb\u7684\u8fb9\u6743\uff08\u5411\u524d\u5411\u540e\u90fd\u6ca1\u5173\u7cfb\u54e6\uff09\n\n\u5e73\u65f6\u7684spfa\u662f\u6700\u77ed\u8def\uff0c\u4f46\u8fd9\u91cc\u7684spfa\u662f\u7528\u6765\u7b97\u5230\u5f53\u524d\u70b9\u7684\u6700\u4f4e\u4e70\u5165\u4ef7\u548c\u6700\u9ad8\u552e\u51fa\u4ef7\u683c\uff08dp\u601d\u60f3\uff09\n\n\u5751\u70b9\uff1a1.\u5efa\u56fe\u662f\u9519\u7efc\u590d\u6742\uff0c\u52a1\u5fc5\u8981\u68c0\u67e5\u6e05\u695a\uff0c\u5982\u679c\u60a8\u903b\u8f91\u5206\u6790\u80fd\u529b\u8d85\u5f3a\uff0c\u80fd\u591f\u7406\u987a\u5173\u7cfb\u7684\u8bdd\uff0c\u79c1\u4ee5\u4e3a\u5efa\u4e00\u4e2a\u56fe\u53cd\u7740\u7528\u4e5f\u662f\u53ef\u4ee5\u7684\n\n2.\u672c\u56fe\u662f\u6709\u73af\u7684\uff01\uff01\uff01\u5224\u65ad\u6761\u4ef6\u5728\u91cc\u9762\u5c06\u4f1a\u5c06spfa\u5361\u4f4f\n\n3.\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff08\u6bcf\u4e00\u6761\u8fb9\uff09\u90fd\u5e94\u8be5\u57281.\u8be5\u8fb9\u8fb9\u6743 2.\u8d77\u70b9\u503c 3.\u7ec8\u70b9\u503c\u91cc\u9762\u7b5b\u9009min\n\n4.\u521d\u59cb\u5316\u501f\u9274\u697c\u4e0b\u5144\u5f1f\u5f88\u5751\uff0c\u4e0d\u7136\u4f1a\u8fdb\u5165\u4f4e\u4ef7\u7684\u6b7b\u8def\n\n\u9ecf\u4e0a\u5f88\u597d\u770b\u7684\u4ee3\u7801\uff0c\u4e00\u884c\u4e00\u884c\u6e05\u6670\u660e\u4e86\uff0c\u5c31\u4e0d\u6253\u6ce8\u91ca\u4e86\uff0c\u770b\u7684\u773c\u775b\u75db\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\nusing namespace std;\nint a[100005];\nstruct node{\n    int b,next,v;\n}st[1000005],nd[1000005];\nint minl[100005],maxl[100005];\nint n,m;\nint head1[100005],head2[100005];\nint now1,now2;\nint vis1[100005],vis2[100005];\nvoid add(int x,int y,int z){\n    now1++;\n    st[now1].b=y;\n    st[now1].v=z;\n    st[now1].next=head1[x];\n    head1[x]=now1;\n}\nvoid add2(int x,int y,int z){\n    now2++;\n    nd[now2].b=y;\n    nd[now2].v=z;\n    nd[now2].next=head2[x];\n    head2[x]=now2;\n}\nqueue<int>q1;\nqueue<int>q2;\nvoid spfa1(){\n    for(int i=1;i<=n;i++)\n      minl[i]=7777;                                 \n    q1.push(1);              //\u521d\u59cb\u5316\u501f\u9274\u9898\u89e3\n    vis1[1]=1;\n    while(!q1.empty()){\n        int t=q1.front();\n        q1.pop();\n        vis1[t]=0;\n        for(int i=head1[t];i!=0;i=st[i].next){\n            int b=st[i].b;    \n            if(minl[b]>min(minl[t],st[i].v)){//\u662f\u5728\u4e09\u8005\u4e2d\u627e\u6700\u5c0f\u503c\uff0c\u4e00\u5b9a\u8981\u628a\u5224\u65ad\u6253\u5728\u5916\u9762\u4e0d\u7136\u5f62\u6210\u73afspfa\u4f1a\u5361\u4f4f \n               minl[b]=min(minl[t],st[i].v);    \n               if(vis1[b]==0){\n                   q1.push(b); \n                   vis1[b]=1;\n               }                \n            }\n        }\n    }\n}\nvoid spfa2(){\n    for(int i=1;i<=n;i++)\n       maxl[i]=0;\n    q2.push(n);\n    vis2[n]=1;\n    while(!q2.empty()){\n        int t=q2.front();\n        q2.pop();\n        vis2[t]=0;\n        for(int i=head2[t];i!=0;i=nd[i].next){\n            int b=nd[i].b;\n            if(maxl[b]<max(maxl[t],nd[i].v)){\n                maxl[b]=max(maxl[t],nd[i].v);\n                if(vis2[b]==0){\n                    q2.push(b);\n                    vis2[b]=1; \n                }\n            }\n        }\n    } \n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n      scanf(\"%d\",&a[i]);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if(z==2){\n            add(x,y,a[y]);\n            add(y,x,a[x]);\n            add2(x,y,a[y]);\n            add2(y,x,a[x]);            \n        }\n        else{\n            add2(y,x,a[x]);\n            add(x,y,a[y]);\n        }\n    }\n    spfa1();\n    spfa2();\n    int ans=0;\n    for(int i=1;i<=n;i++){\n        ans=max(ans,maxl[i]-minl[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1509594129,
        "uid": 47378,
        "name": "\u67cf\u6728\u7531\u7eaaAKB48",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "## \u4e0d\u5e26\u4efb\u4f55\u9ad8\u7ea7\u6280\u5de7\u7684\u641c\u7d22+\u4e71\u641e\u54c8\u5e0c\n## \u9002\u5408\u849f\u84bb\u9605\u8bfb\n\n### First:\n### \u6211\u4e0d\u4f1a\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u4f46\u662f\u90bb\u63a5\u77e9\u9635\u80af\u5b9a\u4f1a\u7206\uff0c\u6240\u4ee5\u7528\u4e86\u5f88\u795e\u5947\u7684\u7ed3\u6784\u4f53\u5b58\u56fe\n~~~\nstruct point{\n    int val;\n    int tox;//\u70b9\u7684\u51fa\u5ea6\n    int to[500];//\u6240\u8fde\u63a5\u7684\u70b9\u6570\u7ec4\n}q[100000];\n~~~\n\u53ea\u5b58\u4e86\u6700\u591a500\u4e2a\u70b9\uff0c\u6015\u7206\u7a7a\u95f4\uff0c\u53ef\u4ee5\u6c34\u8fc7\u3002\n\n### Second:\n### \u641c\u7d22\u7684\u65f6\u5019\u7528\u4e00\u4e2asta\u53d8\u91cf\u8868\u793a\u9636\u6bb5\u3002\n### \u901a\u8fc7\u9605\u8bfb\u53ef\u5f97\uff0c\u8d38\u6613\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a\n## \u4e70\u73e0\u5b9d\u3001\u5356\u73e0\u5b9d\u3001\u53bb\u7ec8\u70b9\n###  \u7531\u4e8e\u4e09\u4e2a\u9636\u6bb5\u662f\u987a\u5e8f\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u522b\u641c\u7d22\n\n### \u6700\u540e\u5173\u4e8e\u5224\u91cd\uff1a\u4e71\u641e\u54c8\u5e0c\n#### \u6211\u641c\u7d22\u65f6\u7528\u5230\u7684\u4e09\u4e2a\u53d8\u91cf\uff1a\u73b0\u5728\u6240\u5728\u7684\u5730\u70b9now\uff0c\u62e5\u6709\u7684\u94b1money\uff0c\u4ee5\u53ca\u73b0\u5904\u9636\u6bb5sta\u3002\u4e8e\u662f\u5c31\u4e71\u641e\u4e86\u8fd9\u4e2a\u5224\u91cd\u8bed\u53e5\uff1a\n~~~\n int hash(int a,int b,int c)\n{\n    return (a*133%MOD+b*97%MOD+c*17%MOD)%MOD;\n}//\u54c8\u5e0c\u51fd\u6570\nvoid dfs(int now,int money,int sta)\n{\n    int ha=hash(now,money,sta);\n    if(HASH[ha]) return ;\n    HASH[ha]=true;\n    ......\n}\n~~~\n#\u5b8c\u6574AC\u7a0b\u5e8f\n~~~\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nstruct point{\n    int val;\n    int tox;\n    int to[500];\n}q[100000];\nint i,n,m,ans;\nint MOD=9999990;\nbool HASH[9999990];//\u54c8\u5e0c\u5224\u91cd\n\nvoid add(int x,int y)\n{\n    q[x].tox++;q[x].to[q[x].tox]=y;\n}\nint hash(int a,int b,int c)\n{\n    return (a*133%MOD+b*97%MOD+c*17%MOD)%MOD;\n}\nvoid dfs(int now,int money,int sta)\n{\n    int j,k;\n    int ha=hash(now,money,sta);\n    if(HASH[ha]) return ;\n    HASH[ha]=true;\n    if(now==n&&sta==3)\n    {\n        if(money>ans) ans=money;\n        return ;\n    }//\u5230\u8fbe\u7ec8\u70b9\n    if(sta==1)\n    {\n        for(j=1;j<=q[now].tox;j++)\n        {\n            //\u5728\u8fd9\u91cc\u4e70\n            dfs(q[now].to[j],q[now].val,2);\n            //\u4e0d\u5728\u8fd9\u91cc\u4e70 \n            dfs(q[now].to[j],money,1);\n        }\n    }\n    else if(sta==2) //\u5356 \n    {\n        for(j=1;j<=q[now].tox;j++)\n        {\n            //\u5728\u8fd9\u91cc\u5356 \n            if(q[now].val-money>ans) \n            dfs(q[now].to[j],q[now].val-money,3);\n            //\u4e0d\u5356 \n            dfs(q[now].to[j],money,2);\n        }\n    }\n    else\n    {\n        for(j=1;j<=q[now].tox;j++)\n        dfs(q[now].to[j],money,3);\n    }//\u53bb\u7ec8\u70b9\n    return ;\n}\nint main()\n{\n    cin>>n>>m;\t\n    for(i=1;i<=n;i++)\n    cin>>q[i].val;\n    for(i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        add(x,y);\n        if(z==2) add(y,x); \n    }\n\n    dfs(1,0,1);\n    cout<<ans;\n}\n~~~",
        "postTime": 1531126328,
        "uid": 86210,
        "name": "Fellyhosn",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u9898\u89e3\u91cc\u90fd\u662f\u4e24\u904dspfa\uff0c\u52a0\u5806\u4f18\u5316\u7684dijkstra\u4e5f\u80fd\u8fc7\uff0c\u8fd9\u9053\u9898\u5176\u5b9e\u6c42\u51fa\u4e24\u4e2a\u70b9a b\u8981b-a\u6700\u5927\uff0c\u800c\u4e14b\u7684\u904d\u5386\u987a\u5e8f\u8981\u5728a\u540e\u9762\uff0c\u53ef\u4ee5\u8003\u8651\u4e24\u6b21dijkstra\u6765\u7ef4\u62a4d\u4e0ev\u4e24\u6570\u7ec4\u5904\u7406\uff0cd\u8868\u793a\u8d70\u5230\u8fd9\u4e2a\u8282\u70b9\u524d\u9762\u80fd\u4e70\u5230\u7684\u6700\u4fbf\u5b9c\u7684\u8d27\uff0cf\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u5f80\u540e\u8d70\u6700\u5927\u53ef\u4ee5\u5356\u51fa\u591a\u5c11\u94b1\uff0c\u5f53\u7136\u8fd9\u7b97\u662f\u5e7f\u4e49\u7684dijkstra\uff0c\u5176\u5b9e\u662f\u7528\u5b83\u6765\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u89c4\u5212$\\begin{cases}d[v]=min(d[u],w[v])\\\\f[v]=max(f[u],w[v])\\end{cases}$\nd\u5728\u6b63\u5411\u56fe\u8dd1\uff0c\u540c\u65f6\u5efa\u4e00\u4e2a\u53cd\u5411\u8fb9\u56fe\u8dd1f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1a\u70b9\u4e00\u5b9a\u5728b\u4e4b\u524d\uff0c\u8fd9\u6837\u5bf9\u4e8e\u4e00\u4e2a\u6bcf\u70b9\u7b97\u51fa$f[i]-d[i]$\u540e\u53d6\u6700\u5927\u503c\u5373\u53ef\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500005;\ntypedef pair<int,int> p;\nint head1[maxn],num1=0,num2=0,head2[maxn];\nint n,m,wi[maxn];\nint f[maxn],d[maxn];\nint vis[maxn];\ninline int read()\n{\n\tint x=0,t=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')t=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x*t;\n}\nstruct node{\n\tint v,w,nex;\n}e1[maxn],e2[maxn];\nvoid add1(int u,int v,int w)\n{\n\te1[++num1].v=v;\n\te1[num1].w=wi[v];\n\te1[num1].nex=head1[u];\n\thead1[u]=num1;\n}\nvoid add2(int u,int v,int w)\n{\n\te2[++num2].v=v;\n\te2[num2].w=wi[v];\n\te2[num2].nex=head2[u];\n\thead2[u]=num2;\n}\nvoid dij1()\n{\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue<p,vector<p>,greater<p> > q1;\n\td[1]=wi[1];\n\tq1.push(make_pair(wi[1],1));\n\twhile(!q1.empty())\n\t{\n\t\tint u=q1.top().second;\n\t\tq1.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head1[u];i;i=e1[i].nex)\n\t\t{\n\t\t\tint v=e1[i].v;\n\t\t\td[v]=min(d[u],wi[v]);\n\t\t\tq1.push(make_pair(d[v],v));\n\t\t}\n\t}\n}\nvoid dij2()\n{\n\tmemset(f,-0x3f,sizeof(f));\n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue<p,vector<p>,greater<p> > q2;\n\tf[n]=wi[n];\n\tq2.push(make_pair(wi[n],n));\n\twhile(!q2.empty())\n\t{\n\t\tint u=q2.top().second;\n\t\tq2.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head2[u];i;i=e2[i].nex)\n\t\t{\n\t\t\tint v=e2[i].v;\n\t\t\tf[v]=max(f[u],wi[v]);\n\t\t\tq2.push(make_pair(f[v],v));\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++) wi[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tx=read(),y=read(),z=read();\n\t\tif(z==1) add1(x,y,z),add2(y,x,z);\n\t\telse add1(x,y,z),add1(y,x,z),add2(x,y,z),add2(y,x,z);\n\t}\n\tdij1();\n\tdij2();\n\tint ans=0;\n\tfor(int i=1;i<=n;i++) ans=max(ans,f[i]-d[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1525103285,
        "uid": 50976,
        "name": "songhn",
        "ccfLevel": 0,
        "title": "P1073 \u6700\u4f18\u8d38\u6613"
    },
    {
        "content": "\n**\u611f\u8c22QWK\u540c\u5b66\u5de8\u4f6c\u63d0\u4f9b\u89e3\u9898\u601d\u8def\u3002**@Qin_Wei_Kai_MISAKI\n\n\u672c\u849f\u84bb\u4e0d\u4f1a\u5206\u5c42\u56fe\uff0cdp\u849f\u84bb\uff0ctarjan\u4e0d\u4f1a\uff08\u6ed1\u7a3d\uff09\n\n\u770b\u5230\u6ca1\u6709\u540c\u7c7b\u9898\u89e3\uff0c\u6765\u53d1\u4e00\u53d1\uff0c~~\u987a\u4fbf\u6d4b\u4e86\u4e00\u4e0bhack\u6570\u636e\uff0c\u53d1\u73b0\u4f3c\u4e4e\u8fd8\u53ef\u4ee5~~\n\n\u4e0d\u559c\u52ff\u55b7\n\n------------\n\u4e0b\u9762\u5f00\u59cb\u8bb2\u601d\u8def\uff1a\n\n\u65b9\u6cd5\uff1abfs+spfa\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u7b5b\u51fa\u6765\u4ece1\u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u5230\u8fben\u7684\u70b9\u3002\u5e76\u5c06\u5b83\u4eec\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u53ea\u6709\u5b83\u4eec\u662f\u53ef\u4ee5\u8d70\u7684\uff08\u5f88\u597d\u7406\u89e3\u5427\uff0c\u5982\u679c\u4ece\u51fa\u53d1\u70b9\u5230\u4e0d\u4e86\u8fd9\u4e2a\u70b9\u6216\u8005\u8fd8\u5230\u4e0d\u4e86\u7ec8\u70b9\uff0c\u8fd9\u4e2a\u70b9\u5c31\u662f\u65e0\u610f\u4e49\u7684\uff09\u3002\n\n\u5982\u4f55\u6253\u6807\u8bb0\u5462\uff1f\u4e24\u904d\u5efa\u56fe\u8dd1bfs\u3002\u5148\u6b63\u5411\u5efa\u56fe\uff0c\u4e4b\u540e\u53cd\u5411\u5efa\u56fe\u3002\n\n\u5904\u7406\u5b8c\u6bd5\u4e4b\u540e\uff0c\u5c31\u6765\u5230\u4e86\u8fd9\u4e2a\u601d\u60f3\u7684\u6838\u5fc3\u90e8\u5206\u2014\u2014spfa\n\n\u6709\u4eba\u770b\u4e86\u53ef\u80fd\u4e00\u5934\u96fe\u6c34\uff0cspfa\u4e0d\u662f\u8dd1\u6700\u77ed\u8def\u7684\u5417\uff0c\u8fd9\u9898\u4e5f\u6ca1\u6709\u8fb9\u6743\u554a\u3002\n\n\u8bf4\u662fspfa\uff0c\u5176\u5b9e\u662f\u4f2a\u7684spfa\uff0c\u53ea\u662f\u501f\u9274\u4e86spfa\u7684\u601d\u8def\u3002\n\n******\u91cd\u70b9\u6765\u4e86\uff01\u6572\u9ed1\u677f**********\n\n\u9996\u5148\u5c06\u6240\u6709\u7684\u6807\u8bb0\u7684\u70b9\u5168\u90e8\u6254\u8fdb\u961f\u5217\u4e2d\uff0c\u7528\u4e00\u4e2adis\u6570\u7ec4\u6765\u8bb0\u5f55\u3002\ndis\u6570\u7ec4\u8bb0\u5f55\u7684\u662f\u4ec0\u4e48\u5462\uff1f\u662f\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u6240\u80fd\u4e70\u8fdb\u7684\u6700\u5c0f\u4ef7\u503c\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8d77\u70b9\u7684\u70b9\u6743\uff08\u5c31\u662f\u4e70\u5356\u4ef7\u503c\uff09\u4e3a6\uff0c\u63a5\u7740\u8fde\u7740\u70b9\u6743\u4e3a2\u7684\u503c\uff0c\u4e4b\u540e\u4e3a4\uff0c\u90a3\u4e48\u70b9\u6743\u4e3a4\u7684\u70b9\u8fde\u63a5\u7684\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u503c\u5927\u4e8e2\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u53d8\u4e3a2\u3002\n\nif(dis[to]>dis[t]) dis[to] = dis[t];\n\n\u8fd9\u6837\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u503c\u88ab\u66f4\u65b0\u5e76\u4e14\u8fd9\u4e2a\u70b9\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5c31\u5c06\u8fd9\u4e2a\u70b9\u63a8\u8fdb\u961f\u5217\uff08spfa\uff09\uff1b\n\n\u6700\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u7528\u5f53\u524d\u70b9\u7684\u5356\u51fa\u503c\uff08\u70b9\u6743\u503c\uff09\u51cf\u53bb\u8fd9\u4e2a\u70b9\u7684dis\u503c\uff08\u4e70\u8fdb\uff09\u503c\uff0c\u7136\u540e\u53d6\u6700\u5927\u7684\u5c31\u662f\u7b54\u6848\u3002\n\n\u591a\u8bf4\u65e0\u76ca\uff0c\u4e0a\u4ee3\u7801\u3002\n\n~~~~\u4e2a\u4eba\u7801\u98ce\u5947\u7279\uff0c\u4ec5\u5f53\u53c2\u8003\u3002\u4e0d\u559c\u52ff\u55b7\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<string>\n#include<vector>\n#include<map>\n#include<cmath>\nusing namespace std;\nint vis[100005];\nint vis2[100005];\nint a[100005];\nint head[100005];\nint cnt = 1;\nint v[100005];\nint dis[100005];\nint n,m;\nint x2[100005];\nint y2[100005];\nint z2[100005];\nstruct edge\n{\n\tint to;\n\tint next;\n}eg[500005];\nvoid add(int x,int y)\n{\n\teg[cnt].to = y;\n\teg[cnt].next = head[x];\n\thead[x] = cnt++;\n}\nvoid ycl1(int start)\n{\n\tqueue <int> Q;\n\tQ.push(start);\n\tvis[start] = 1;\n\twhile(!Q.empty())\n\t{\n\t\tint t = Q.front();\n\t\tQ.pop();\n\t\tfor(int  i = head[t];i;i = eg[i].next)\n\t\t{\n\t\t\tint to = eg[i].to;\n\t\t\tif(!vis[to])\n\t\t\t{\n\t\t\t\tvis[to] = 1;\n\t\t\t\tQ.push(to);\n\t\t\t}\n\t\t}\t\n\t}\n}\nvoid ycl2(int start)\n{\n\tqueue <int> Q;\n\tQ.push(start);\n\tvis2[start] = 1;//\u8fd9\u4e2a\u6570\u7ec4\u4ee3\u8868\u672c\u6b21\uff08\u7b2c\u4e8c\u6b21\uff09\u54ea\u4e2a\u80fd\u5230\n\tvis[start]++;\n\twhile(!Q.empty())\n\t{\n\t\tint t = Q.front();\n\t\tQ.pop();\n\t\tfor(int  i = head[t];i;i = eg[i].next)\n\t\t{\n\t\t\tint to = eg[i].to;\n\t\t\tif(!vis2[to])\n\t\t\t{\n\t\t\t\tvis2[to] = 1;\n\t\t\t\tvis[to]++;\n\t\t\t\tQ.push(to);\n\t\t\t}\n\t\t}\t\n\t}\n}\nvoid spfa(int start)\n{\n\tqueue <int> Q;\n\tfor(int i = 1;i<=n;i++)//\u5148\u628a\u80fd\u5230\u7684\u63a8\u8fdb\u53bb\uff0cdis\u503c\u4ee3\u8868\u4e70\u8fdb\u6700\u5c0f\u503c\n\t{\n\t\tif(vis[i]==2)\n\t\t{\n\t\t\tQ.push(i);\n\t\t\tdis[i] = a[i];\n\t\t} \n\t}\n\tv[start] = 1;\n\twhile(!Q.empty())\n\t{\n\t\tint t = Q.front();\n\t\tQ.pop();\n\t\tv[t] = 0;\n\t\tfor(int i = head[t];i;i = eg[i].next)\n\t\t{\n\t\t\tint to = eg[i].to;\n\t\t\tif(dis[to]>dis[t]&&vis[to]==2)//\u5173\u952e\u5904\uff0cspfa\u7684\u601d\u60f3\n\t\t\t{\n\t\t\t\tdis[to] = dis[t];\n\t\t\t\tif(!v[to])\n\t\t\t\t{\n\t\t\t\t\tQ.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);//\u8bfb\u8fdb\u6765\n\t}\n\tfor(int i = 1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tx2[i] = x;//\u7b2c\u4e00\u904d\u5efa\u56fe\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5148\u5b58\u8d77\u6765\uff0c\u7b2c\u4e8c\u6b21\u518d\u8c03\u51fa\u6765\n\t\ty2[i] = y;\n\t\tz2[i] = z;\n\t\tif(z==1)\n\t\t{\n\t\t\tadd(y,x);//\u52a0\u8fb9\u54af\n\t\t}else\n\t\t{\n\t\t\tadd(y,x);\n\t\t\tadd(x,y);\n\t\t}\n\t}\n\tycl1(n);//\u4ecen\u5f00\u59cb\u641c\u7d22\uff0c\u770b\u5230\u54ea\u4e2a\u70b9\u80fd\u5230\n\tcnt = 1;\n\tmemset(head,0,sizeof(head));\n\tmemset(eg,0,sizeof(eg));\n\tfor(int i = 1;i<=m;i++)//\u6b63\u5411\u5efa\u56fe\n\t{\n\t\tif(z2[i]==1)\n\t\t{\n\t\t\tadd(x2[i],y2[i]);\n\t\t}else\n\t\t{\n\t\t\tadd(y2[i],x2[i]);\n\t\t\tadd(x2[i],y2[i]);\n\t\t}\n\t}\n\tycl2(1);//\u4ece1\u5f00\u59cb\u8dd1\u4e00\u904d\n\tspfa(1);\n\tint ma = -1;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tif(vis[i]==2)\n\t\t{\n\t\t\tma = max(ma,a[i]-dis[i]);//\u6700\u540e\u7b54\u6848\uff0c\u5356\u51fa-\u4e70\u5165\uff0c\u53d6\u6700\u5927\u503c\n\t\t}\n\t}\t\n\tprintf(\"%d\",ma);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1540809122,
        "uid": 120949,
        "name": "lizitong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u76f8\u5173\u8bc1\u660e\uff0c\u5199\u7684\u6bd4\u8f83\u4e71\uff0c\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u88ab\u6253QwQ\n\n\u5982\u679c\u6709\u95ee\u9898\u5927\u5bb6\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u4e0a\u63d0\u51fa(\u56e0\u4e3a\u6d1b\u8c37\u7684\u9898\u89e3\u4e5f\u6ca1\u6cd5\u8bc4\u8bba\u554a)\uff0c\u987a\u624b\u5b89\u5229\u4e2a\u4eba\u535a\u5ba2<http://my.csdn.net/As\\_A\\_Kid>\n\n#Solution\n\n##\u601d\u8def\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6d1b\u8c37\u4e0a\u6709\u5173\u8fd9\u9898\u7684\u9898\u89e3\u7279\u522b\u591a\uff0c~~\u7136\u540e\u6211\u5168\u90e8\u90fd\u7ffb\u4e86\u4e00\u904d~~\uff0c\u800c\u4e14\u6211\u53d1\u73b0\u5927\u591a\u6570\u4eba\u548c\u6211\u7684\u60f3\u6cd5\u90fd\u4e0d\u4e00\u6837\u3002\u6982\u62ec\u8d77\u6765\uff0c\u4e3b\u8981\u7684\u4e24\u79cd\u89e3\u9898\u601d\u8def\u5c31\u662ftarjan\u7f29\u70b9+DP\u548c\u4e24\u904dSPFA\u3002\n\n\u6211\u7684\u601d\u8def\u548c **@\u8587\u8587\u4e00\u7b11 ** \u8fd8\u6709 **@Lerbon23james** \u7684\u9898\u89e3\u601d\u8def\u6bd4\u8f83\u63a5\u8fd1\u3002\u53ea\u4e0d\u8fc7\u4ed6\u4eec\u7528\u4e86SPFA\u89e3\u51b3\u540e\u6548\u6027\uff0c\u6211\u7528\u4e86\u7c7b\u4f3c\u7684\u601d\u60f3\u6765\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u601d\u8def\u4e5f\u6bd4\u8f83\u76f4\u63a5\u5427\uff0c\u6838\u5fc3\u4ee3\u7801\u4e5f\u6bd4\u8f83\u77ed\uff0c24\u884c\u3002\n\nmi[x]\u4fdd\u5b58\u8d70\u5230x\u8282\u70b9\u65f6\u7684\u6700\u5c0f\u4e70\u5165\u503c\uff0cf[x]\u4fdd\u5b58\u8d70\u5230x\u8282\u70b9\u65f6\u7684\u6700\u5927\u5229\u6da6\u3002\u4e3a\u4e86\u5229\u6da6\u6700\u5927\uff0c\u90a3\u4e48\u80af\u5b9a\u5c31\u8981\u4ee5mi[x]\u7684\u4ef7\u683c\u4e70\u5165\u6700\u4f18\uff0c\u7136\u540e\u5bf9\u4e8ex\u8282\u70b9\uff0c\u6211\u4eec\u6709\u5356\u4e0e\u4e0d\u5356(\u56e0\u4e3a\u5df2\u7ecf\u5356\u8fc7\u4e86)\u7684\u4e24\u79cd\u9009\u62e9\uff0c\u4e0d\u5356f[x]\u5c31\u76f4\u63a5\u4ece\u524d\u9a71\u8282\u70b9\u7ee7\u627f\uff0c\u5356\u53ef\u4ee5\u83b7\u5f97\u7684\u5229\u6da6\u5c31\u662fc[x]-mi[x]\uff0c\u90a3\u4e48\u5728\u8fd9\u4e24\u4e2a\u4e4b\u95f4\u53d6\u6700\u5927\u3002\u7136\u540e\u4e5f\u4e0d\u4f1a\u53d7\u56f0\u4e8e\u73af\uff0c\u56e0\u4e3a\u5982\u82e5\u5bf9\u4e8e\u67d0\u8282\u70b9\uff0cf[x]\u548cmi[x]\u90fd\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48\u518d\u7ee7\u7eed\u641c\u7d22\u5fc5\u5b9a\u4e0d\u4f1a\u83b7\u5f97\u66f4\u4f18\u7684\u7b54\u6848\uff08\u8bc1\u660e\u89c1\u4e0b\uff09\u3002\n\n##\u76f8\u5173\u8bc1\u660e\n\n\u4e3a\u4e86\u65b9\u4fbf\u8868\u8fbe\uff0c\u5c06\u505c\u6b62\u5904\u8bbe\u4e3av\uff0c\u6700\u4f18\u4e70\u5165\u70b9\u4e3ax\u3002\n\n\n1. \u6b64\u65f6\u5df2\u7ecf\u904d\u5386\u8fc7\u6574\u4e2a\u73af\uff0c\u5bf9\u4e8e\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u70b9mi[x]\u90fd\u5df2\u7ecf\u53d6\u5230\u4e86\u6700\u5c0f\u503c\u4e14\u90fd\u76f8\u7b49\uff0c\u4e14\u8fd9\u4e2a\u6700\u5c0f\u503c\u4e3ac[v]\u3002\u56e0\u6b64\uff0c\u5fc5\u5b9a\u5b58\u5728mi[v]\u65e0\u6cd5\u66f4\u65b0\u3002\n\n2. f[v]\u8868\u793a\u5728x\u4e00\u76f4\u7ecf\u8fc7\u5230v\u7684\u8def\u5f84\u4e0a\u5356\u51fa\u7684\u5229\u6da6\uff0c\u540c(1)\u53ef\u4ee5\u63a8\u77e5\uff0c\u904d\u5386\u5b8c\u6210\u4e4b\u540emax\u4e5f\u662f\u786e\u5b9a\u7684\uff0c\u90a3\u4e48\u5fc5\u5b9a\u5b58\u5728f[v]\u65e0\u6cd5\u66f4\u65b0\u3002**(1)(2)\u8868\u660e\u8fd9\u4e2a\u641c\u7d22\u5fc5\u5b9a\u4f1a\u505c\u4e0b\u3002**\n\n3.  **\u6b63\u786e\u6027\u8bc1\u660e\uff1a** mi[v]\u4ec5\u8868\u793a\u5728\u6b64\u8282\u70b9\u53ef\u4ee5\u9009\u53d6\u7684\u6700\u4f18\u4e70\u5165\u70b9\uff0c\u4ee5\u5728\u540e\u6765\u7684\u8282\u70b9\u8fdb\u884c\u5356\u51fa\u65f6\u72b6\u6001\u8f6c\u79fb\uff0c\u4f46\u4e0ef[v]\u5e76\u4e0d\u76f8\u4e92\u5e72\u6270\uff0c\u5f53\u540e\u7ee7\u8282\u70b9\u7684\u5356\u51fa\u503c\u65e0\u6cd5\u8fbe\u5230\u8db3\u591f\u5927\u65f6\uff0cf[v]\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u5176\u603b\u4fdd\u5b58\u6700\u4f18\u7b54\u6848\u4e14\u5f97\u5230\u4e86\u6240\u6709\u7684\u65b9\u6848\u3002\n\n\n**\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u8bc1\u660e\uff0c\u5199\u7684\u6bd4\u8f83\u4e71\uff0c\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u88ab\u6253QwQ**\n\n#Code\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\nconst int INF=0x3f3f3f3f;\nconst int maxn=100010,maxm=500010;\nstruct data{\n    int v,nxt;\n}edge[maxm<<1];\nint n,m,p,head[maxn],c[maxn],f[maxn],mi[maxn];\ntemplate <typename Tp> inline void read(Tp &x)\n{\n    x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n}\nvoid insert(int u,int v)\n{\n    edge[++p].v=v;\n    edge[p].nxt=head[u];\n    head[u]=p;\n}\nvoid input()\n{\n    int u,v,k;\n    read(n),read(m);\n    for(int i=1;i<=n;i++)\n      read(c[i]);\n    for(int i=1;i<=m;i++)\n    {\n        read(u),read(v);\n        insert(u,v);\n        read(k);\n        if(k==2)\n          insert(v,u);\n    }\n}\nvoid dfs(int x,int minx,int pre)\n{\n    bool b=true;\n    if(minx>c[x])\n      minx=c[x];\n    if(mi[x]>minx)\n      mi[x]=minx,b=false;\n    int maxx=(c[x]-minx>f[pre]?c[x]-minx:f[pre]);\n    if(f[x]<maxx)\n      f[x]=maxx,b=false;\n    if(b)\n      return ;\n    for(int i=head[x];i;i=edge[i].nxt)\n      dfs(edge[i].v,minx,x);\n}\nint main()\n{\n    input();\n    memset(mi,0x3f,sizeof(mi));\n    dfs(1,INF,0);\n    printf(\"%d\\n\",f[n]);\n    return 0;\n}\n```",
        "postTime": 1508384886,
        "uid": 20602,
        "name": "Rayment",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u5206\u5c42\u56fe+dijkstra\n------------\n\u6709\u4eba\u7528\u5206\u5c42\u56fe+SPFA\uff0c\u4f46\u51fa\u9898\u4eba\u5361\u4f60\u7684\u8bdd\uff0c\u4f60\u5c31\u53ea\u6709\u51c9\u51c9\u4e86\uff0c\u90a3\u4e48\u6211\u7528dijkstra\u5c31\u6bd4\u8f83\u4fdd\u9669\uff0c\u4f46DIJKSTRA\u53ea\u80fd\u8dd1\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u5c06\u82b1\u94b1\u8bb0\u6210\u6b63\u6570\uff0c\u5356\u51fa\u8bb0\u6210\u8d1f\u6570\uff0c\u6700\u540e\u6bd4\u76f8\u53cd\u503c\uff1b\n\n### \u5206\u4e09\u5c42\uff0c\u7b2c\u4e00\u5c42\u53ea\u65c5\u6e38\u4e0d\u4e70\u4e0d\u5356\uff0c\u7b2c\u4e8c\u5c42\u5728\u5f53\u524d\u70b9\u4e70\uff0c\u7b2c\u4e09\u5c42\u5728\u5f53\u524d\u70b9\u5356\uff1b\n```c\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100050;\nconst int M = 500050;\nint head[M*3],cnt,n,m;\nbool vis[N*3];\nstruct Edge{\n    int to;\n    int w;\n    int next;\n}edge[M*3];\nint dist[N*3];\nvoid add(int x,int y,int d)\n{\n    cnt++;\n    edge[cnt].next = head[x];\n    edge[cnt].to = y;\n    edge[cnt].w = d;\n    head[x] = cnt;\n} \nstruct node{\n    int pos;\n    int dist;\n    bool operator <(const node& that)const{\n    return dist > that.dist;\n    }\n};\nint su[N];\npriority_queue<node> q;\nvoid djs()\n{\n    memset(dist,0x3f,sizeof(dist));\n    dist[1]=0;\n    q.push((node){1,0});\n    while(!q.empty())\n    {\n        int x = q.top().pos;q.pop();\n        for(int i = head[x];i;i = edge[i].next)\n        {\n            int y = edge[i].to;\n            if(dist[y]>dist[x]+edge[i].w)\n            {\n                //cout<<\"en\"<<endl;\n                dist[y]=dist[x]+edge[i].w;\n                q.push((node){y,dist[y]});\n            }\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    int n,m;\n    cin>>n>>m;\n    for(int i = 1;i <= n;i++)\n    cin>>su[i];\n    for(int i = 1;i <= m;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;//\u5f00\u59cb\u5efa\u56fe\n        if(c==1)\n        {\n            for(int j = 0;j < 3;j++)\n            {\n                add(a+j*n,b+j*n,0);//\u4e0d\u4e70\u5356\n            }\n            add(a,b+n,su[a]);//\u4e70\u5165\n            add(a+n,b+n+n,-su[a]);//\u5356\u51fa\n        }\n        else\n        {\n            for(int j = 0;j < 3;j++)\n            {\n                add(a+j*n,b+j*n,0);//\u53cc\u5411\u5efa\u8fb9\n                add(b+j*n,a+j*n,0);\n            }\n            add(a,b+n,su[a]);\n            add(b,a+n,su[b]);\n            add(a+n,b+n+n,-su[a]);\n            add(b+n,a+n+n,-su[b]);\n        }//\u5f53\u7136\u4fdd\u9669\u8d77\u89c1\u53ef\u4ee5\u518d\u5728n\u70b9\u4e0e3*n\u70b9\u8fde\u4e00\u6761\u6743\u503c0\u7684\u8fb9\n    }\n    djs();\n    int ans=0;\n    ans=max(ans,-dist[n*3]);\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\u5206\u5c42\u56fe\u8fd8\u6709\u51e0\u4e2a\u53ef\u79f0\u4e3a\u6a21\u677f\u7684\u7d2b\u9898\uff0c\u5982[](https://www.luogu.org/problem/P4822#submit)\uff0c\u90fd\u662f\u7d2b\u9898\u5c31\u8fd9\u4e00\u9053\u662f\u84dd\u9898",
        "postTime": 1568955598,
        "uid": 228395,
        "name": "\u5b64\u53f6\u6b8b\u5f71",
        "ccfLevel": 4,
        "title": "\u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "### \u6b64\u9898\u4e3a\u4ec0\u4e48\u6ca1\u6709\u6a21\u62df\u9000\u706b\u9898\u89e3???\u6211\u6765\u6c34\u4e00\u53d1\u6a21\u62df\u9000\u706b.\n#### \u5e9f\u8bdd:\u8fd9\u4e2a\u9898\u6211\u4eec\u7ec4\u5185\u521a\u8003\u8bd5\u4e86,\u5f53\u65f6\u6a21\u62df\u9000\u706b\u548cSPFA\u662f\u5199\u5bf9\u4e86,\u4f46\u9898\u76ee\u8bfb\u6210\u4e86\u6700\u5dee\u8d38\u6613(\u6700\u5927\u4e8f\u635f\u5229\u6da6)...~~\u7136\u540eA\u4e86\u4e00\u4e2a\u70b9,WA\u4e86\u4e00\u5806???~~\u4e0b\u8f7d\u4e86\u6570\u636e\u70b9\u4e0d\u61c2\u95ee\u5927\u4f6c,\u7ed3\u679c\u662f\u81ea\u5df1\u8bfb\u9519\u9898\u4e86...\n### \u5148\u770b\u9898\u76ee\u91cd\u8981\u5185\u5bb9:\n#### \u963f\u9f99\u51b3\u5b9a\u4ece 1 \u53f7\u57ce\u5e02\u51fa\u53d1\uff0c\u5e76\u6700\u7ec8\u5728 n \u53f7\u57ce\u5e02\u7ed3\u675f\u81ea\u5df1\u7684\u65c5\u884c\n#### \u4efb\u4f55\u57ce\u5e02\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u591a\u6b21\uff0c\u4f46\u4e0d\u8981\u6c42\u7ecf\u8fc7\u6240\u6709 n \u4e2a\u57ce\u5e02\n#### \u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u7ecf\u8fc7\u7684\u57ce\u5e02\u4e70\u5165\u6c34\u6676\u7403\uff0c\u5e76\u5728\u4e4b\u540e\u7ecf\u8fc7\u7684\u53e6\u4e00\u4e2a\u57ce\u5e02\u5356\u51fa\u8fd9\u4e2a\u6c34\u6676\u7403\uff0c\u7528\u8d5a\u53d6\u7684\u5dee\u4ef7\u5f53\u505a\u65c5\u8d39\u3002\n#### \u4ed6\u51b3\u5b9a\u8fd9\u4e2a\u8d38\u6613\u53ea\u8fdb\u884c\u6700\u591a\u4e00\u6b21\uff0c\u5728\u8d5a\u4e0d\u5230\u5dee\u4ef7\u7684\u60c5\u51b5\u4e0b\u4ed6\u5c31\u65e0\u9700\u8fdb\u884c\u8d38\u6613\n### \u6211\u7684\u5206\u6790\u5982\u4e0b:\n#### \u963f\u9f99\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u4e70\u5165\u57ce\u5e02\u548c\u5356\u51fa\u57ce\u5e02,\u5e76\u4e14\u7b2c 1 \u53f7\u57ce\u5e02\u4e00\u5b9a\u80fd\u5230\u8fbe\u4e70\u5165\u57ce\u5e02,\u5356\u51fa\u57ce\u5e02\u4e00\u5b9a\u80fd\u5230\u8fbe\u7b2c n \u53f7\u57ce\u5e02,\u800c\u4e14\u4e70\u5165\u57ce\u5e02\u4e00\u5b9a\u80fd\u5230\u8fbe\u5356\u51fa\u57ce\u5e02\n#### \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u6a21\u62df\u9000\u706b\u8bbe\u7f6e\u4e70\u5165\u548c\u5356\u51fa\u57ce\u5e02,\u53ea\u8981\u6ee1\u8db3\u8fd9\u4e09\u4e2a\u6761\u4ef6,\u90a3\u4e48\u5c31\u66f4\u65b0\u7b54\u6848.\n#### \u65e2\u7136\u7b2c 1 \u53f7\u57ce\u5e02\u548c\u7b2c n \u53f7\u57ce\u5e02\u6781\u4e3a\u91cd\u8981,\u56e0\u6b64\u5728\u8f93\u5165\u5b8c\u6570\u636e\u540e,\u5148\u7528SPFA\u6b63\u5411\u8dd1\u7b2c 1 \u53f7\u57ce\u5e02\u80fd\u5230\u8fbe\u7684\u57ce\u5e02\u5e76\u5b58\u5230bool\u6570\u7ec4\u91cc,\u518d\u7528SPFA\u53cd\u5411\u8dd1\u7b2c 2 \u53f7\u57ce\u5e02\u80fd\u5230\u8fbe\u7684\u57ce\u5e02\u5e76\u5b58\u5230bool\u6570\u7ec4\u91cc(\u6ce8\u610f\u8981\u662f\u53cd\u5411)\n#### \u5728\u8f93\u5165\u65f6,\u6211\u7528\u4e86\u8d2a\u5fc3\u7684\u601d\u60f3,\u8bb0\u5f55\u4ef7\u683c\u6700\u5927\u57ce\u5e02\u548c\u4ef7\u683c\u6700\u5c0f\u57ce\u5e02,\u5148\u5224\u65ad\u4e00\u4e0b\u80fd\u4e0d\u80fd\u4ece\u8fd9\u4e24\u4e2a\u57ce\u5e02\u4e70,\u4e00\u5b9a\u662f\u6700\u5927\u7684\u5dee\u4ef7,\u4fdd\u8bc1\u4e86\u4e00\u70b9\u6b63\u786e\u7387.\n#### \u5728\u6bcf\u6b21\u68c0\u6d4b\u4e2d,\u90fd\u4ee5\u4e70\u5165\u57ce\u5e02\u4e3a\u8d77\u70b9\u8dd1\u4e00\u904dSPFA,\u68c0\u6d4b\u662f\u5426\u5230\u8fbe\u5356\u51fa\u57ce\u5e02.(\u6ca1\u8bd5\u80fd\u4e0d\u80fd\u8bb0\u5fc6\u5316\u4f18\u5316\u4e00\u4e0b)\n#### \u5982\u679c\u8fd8\u4e0d\u61c2,\u8bf7\u770b\u4ee3\u7801\u8bb2\u89e3\n### \u4ee3\u7801\u5b9e\u73b0:\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <limits.h>\n#include <math.h>\n#include <queue>\n#include <string.h>\n#define filename(a) freopen(a \".in\", \"r\", stdin), freopen(a \".out\", \"w\", stdout);\nusing namespace std;\ntemplate < typename T >\nvoid quickin(T &a) {\n\ta= 0;\n\tT f= 1, c= getchar();\n\twhile(c < '0' || c > '9') {\n\t\tif(c == '-') f= -1;\n\t\tc= getchar();\n\t}\n\twhile(c >= '0' && c <= '9') a= a * 10 + c - '0', c= getchar();\n\ta= a * f;\n\treturn;\n}\n//\u8003\u573a\u4e0a\u624b\u6253\u7684\u8bfb\u5165,\u6709\u70b9\u5f31\nint head[100001], fhead[100001], edptr, fedptr;\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\nstruct edge {\n\tint to;\n\tint nexty;\n} eds[1000001], feds[1000001];\n//eds\u5b58\u6b63\u5411\u8fb9,feds\u5b58\u53cd\u5411\u8fb9\nvoid add(int x, int y) {\n\tedptr++;\n\teds[edptr].to= y;\n\teds[edptr].nexty= head[x];\n\thead[x]= edptr;\n\n\tfedptr++;\n\tfeds[fedptr].to= x;\n\tfeds[fedptr].nexty= fhead[y];\n\tfhead[y]= fedptr;\n}\nbool canarrivensrc[100001], canarriven[100001], walkpast[100001];\n//canarrivensrc \u8868\u793a\u7b2c 1 \u53f7\u57ce\u5e02\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u67d0\u57ce\u5e02\n//canarriven \u8868\u793a\u67d0\u57ce\u5e02\u662f\u5426\u53ef\u4ee5\u5230\u8fbe n \u53f7\u57ce\u5e02\n//walkpast\u8fd9\u4e2a\u662fcanarrive\u51fd\u6570\u4e2d\u7528\u7684,\u8bb0\u5f55\u4ece\u67d0\u57ce\u5e02\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u67d0\u57ce\u5e02\nbool canarrive(int _src, int _to) {\n//canarrive\u51fd\u6570\u662f\u5224\u65ad\u4e70\u5165\u57ce\u5e02\u662f\u5426\u80fd\u5230\u8fbe\u5356\u51fa\u57ce\u5e02\n\tmemset(walkpast, 0, sizeof(walkpast));\n\tqueue< int > nodes;\n\twalkpast[_src]= true;\n\tnodes.push(_src);\n\twhile(!nodes.empty()) {\n\t\tint nown= nodes.front();\n\t\tnodes.pop();\n\t\tfor(int i= head[nown]; i; i= eds[i].nexty) {\n\t\t\tint to= eds[i].to;\n\t\t\tif(!walkpast[to]) {\n\t\t\t\twalkpast[to]= true;\n\t\t\t\tnodes.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn walkpast[_to];\n}\nvoid InitSPFA(int _src, int _fsrc) {\n//\u5728\u8f93\u51fa\u540e\u8c03\u7528\n//\u5904\u7406canarrivensrc\u548ccanarriven\n//\u6b63\u5411\u8dd1\u548c\u53cd\u5411\u8dd1SPFA\n\tqueue< int > nodes;\n\tcanarrivensrc[_src]= true;\n\tnodes.push(_src);\n\twhile(!nodes.empty()) {\n\t\tint nown= nodes.front();\n\t\tnodes.pop();\n\t\tfor(int i= head[nown]; i; i= eds[i].nexty) {\n\t\t\tint to= eds[i].to;\n\t\t\tif(!canarrivensrc[to]) {\n\t\t\t\tcanarrivensrc[to]= true;\n\t\t\t\tnodes.push(to);\n\t\t\t}\n\t\t}\n\t}\n\tcanarriven[_fsrc]= true;\n\tnodes.push(_fsrc);\n\twhile(!nodes.empty()) {\n\t\tint nown= nodes.front();\n\t\tnodes.pop();\n\t\tfor(int i= fhead[nown]; i; i= feds[i].nexty) {\n\t\t\tint to= feds[i].to;\n\t\t\tif(!canarriven[to]) {\n\t\t\t\tcanarriven[to]= true;\n\t\t\t\tnodes.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint n, m, maxp= INT_MIN, minp= INT_MAX, maxpi, minpi, v[100001], tmpx, tmpy, tmpz, bans= 0;\n//maxp\u548cmaxpi\u8bb0\u5f55\u8f93\u5165\u4e2d\u6700\u5927\u4ef7\u683c\u548c\u6700\u5927\u4ef7\u683c\u7684\u57ce\u5e02,minp\u548cminpi\u8bb0\u5f55\u6700\u5c0f\n//v\u8bb0\u5f55\u6240\u6709\u57ce\u5e02\u7684\u4ef7\u683c\n//bans\u8bb0\u5f55\u6700\u4f18\u7b54\u6848\ndouble get_time() {\n\treturn clock() / (double)CLOCKS_PER_SEC;\n}\nconst double BeginT= 1000, EndT= 1e-5, ChangeT= 0.98;\nint tmpbegin, tmpend, tmpc;\nvoid SA(int times) {\n\ttmpbegin= minpi;\n\ttmpend= maxpi;\n    //\u6bcf\u6b21\u5148\u9009\u62e9\u5dee\u4ef7\u6700\u5927\u7684\u4e24\u4e2a\u57ce\u5e02,\u4e0d\u8fc7\u81ea\u6211\u611f\u89c9\u6ca1\u7528\u4e0a\u554a\n\twhile(times--) {\n\t\tfor(double T= BeginT; T > EndT; T*= ChangeT) {\n\t\t\tif(canarrivensrc[tmpbegin] && canarriven[tmpend] && canarrive(tmpbegin, tmpend)) {\n            //\u5224\u65ad\u662f\u5426\u7b2c 1 \u53f7\u57ce\u5e02\u80fd\u5230\u8fbe\u4e70\u5165\u57ce\u5e02,\u662f\u5426\u5356\u51fa\u57ce\u5e02\u80fd\u5230\u8fbe\u7b2c n \u53f7\u57ce\u5e02,\u662f\u5426\u4e70\u5165\u57ce\u5e02\u80fd\u5230\u8fbe\u5356\u51fa\u57ce\u5e02\n\t\t\t\ttmpc= v[tmpend] - v[tmpbegin];\n\t\t\t\tif(tmpc > bans) {\n\t\t\t\t\tbans= tmpc;\n                    //\u66f4\u65b0\u7b54\u6848\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmpbegin= rand() % n + 1;\n\t\t\ttmpend= rand() % n + 1;\n            //\u91cd\u65b0\u968f\u673a\u9009\u62e9\u57ce\u5e02,\u4e5f\u53ef\u4ee5\u52a0while(tmpbegin==tmpend);\n\t\t}\n\t}\n    //\u611f\u89c9\u662f\u4f2aSA,\u4e0d\u8fc7\u7ed3\u679c\u90fd\u4e00\u6837,\u8003\u573a\u4e0a\u5199\u7684\u4e25\u683cSA\u5728\u6b64\u6bb5\u4ee3\u7801\u540e\n}\nint main() {\n\tsrand(time(0));\n\t// filename(\"atree\");\n\tquickin(n), quickin(m);\n\tif(n == 1) {\n    //\u7279\u5224\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tfor(int i= 1; i <= n; i++) {\n\t\tquickin(v[i]);\n\t\tif(v[i] > maxp) {\n\t\t\tmaxp= v[i];\n\t\t\tmaxpi= i;\n\t\t}\n\t\tif(v[i] < minp) {\n\t\t\tminp= v[i];\n\t\t\tminpi= i;\n\t\t}\n        //\u8f93\u5165\u65f6\u8bb0\u5f55\u6700\u5927\u6700\u5c0f\u4ef7\u683c\u57ce\u5e02\n\t}\n\tfor(int i= 1; i <= m; i++) {\n\t\tquickin(tmpx), quickin(tmpy), quickin(tmpz);\n\t\tadd(tmpx, tmpy);\n\t\tif(tmpz == 2) add(tmpy, tmpx);\n\t}\n\tInitSPFA(1, n);\n    //\u521d\u59cb\u5316\n\twhile(get_time() < 0.62) {\n    //\u5361\u65f6(\u4e0d\u8fc7\u7528\u5904\u4e0d\u5927)\n\t\tSA(1);\n\t}\n\tprintf(\"%d\\n\", bans);\n\treturn 0;\n}\n\n```\n### \u8f83\u4e3a\u4e25\u683c\u7684SA(\u5176\u5b9e\u7ed3\u679c\u90fd\u4e00\u6837):\n```cpp\n\t\tfor(double T= BeginT; T > EndT; T*= ChangeT) {\n            if(canarrivensrc[tmpbegin] && canarriven[tmpend] && canarrive(tmpbegin, tmpend)) {\n                tmpc= v[tmpend] - v[tmpbegin];\n                if(tmpc > bans) {\n                    bans= tmpc;\n                }\n                else if(exp((tmpc - bans) / T) < (double)rand() / RAND_MAX) {\n                //\u6839\u636e\u6e29\u5ea6\u5927\u5c0f\u968f\u673a\u63a5\u53d7\u6b64\u6b21\u8f83\u5dee\u89e3\n                    if(rand() % 2) {\n                    //\u968f\u673a\u6539\u53d8\u4e70\u5165\u57ce\u5e02\u6216\u5356\u51fa\u57ce\u5e02\u5176\u4e2d\u4e00\u4e2a\n                        do {\n                            tmpend= rand() % n + 1;\n                        } while(tmpbegin == tmpend);\n                    }\n                    else {\n                        do {\n                            tmpbegin= rand() % n + 1;\n                        } while(tmpbegin == tmpend);\n                    }\n                }\n                else {\n                //\u4e0d\u63a5\u53d7\u6b64\u6b21\u8f83\u5dee\u89e3\n                    do {\n                        tmpbegin= rand() % n + 1;\n                        tmpend= rand() % n + 1;\n                    } while(tmpbegin == tmpend);\n                }\n            }\n            else {\n            //\u8fd9\u4e09\u4e2a\u57ce\u5e02\u8fde\u63a5\u4e0d\u4e86,\u968f\u673a\u66f4\u6539\n                do {\n                    tmpbegin= rand() % n + 1;\n                    tmpend= rand() % n + 1;\n                } while(tmpbegin == tmpend);\n            }\n        }\n```\n#### \u8fd9\u6837~~\u4e25\u683c\u7684SA~~\u4f3c\u4e4e\u5224\u65ad\u591a\u4e86\u4f1a\u53d8\u6162(\u5176\u5b9e\u662f\u8003\u573a\u4e0a\u968f\u4fbf\u5199\u7684)\n### \u66f4\u591a~~\u5e9f\u8bdd~~:\n#### \u8fd9\u4e2a\u6570\u636e\u8fd8\u662f\u4e0d\u90a3\u4e48\u6bd2\u7624,\u4f46\u662f\u4e0d\u5f00O2\u5c31\u4f1a\u53c8WA\u53c8TLE,\u5f00\u4e86\u600e\u4e48\u90fd\u80fd\u8fc7...\n#### \u62ff\u5c0f\u53f7\u8bd5\u4e86\u5f88\u957f\u65f6\u95f4,\u600e\u4e48\u8bbe\u53c2\u6570\u548c\u5361\u65f6,\u53ea\u8981\u4e0d\u5f00O2\u90fd\u6709WA\u6216\u8005TLE,\u771f\u7684\u662fWAWA\u5927\u54ed...\n#### \u4e0d\u5f00O2\u7528\u6a21\u62df\u9000\u706b\u80fd\u8fc7\u7684\u5927\u4f6c\u771f\u7684\u592a\u795e\u4e86!\n### \u8bc4\u6d4b\u4fe1\u606f(\u5f00O2)(\u5361\u65f6\u96500.62s):\n### Accepted  100\n### \u7528\u65f6: 6153ms / \u5185\u5b58: 9372KB",
        "postTime": 1540729796,
        "uid": 109815,
        "name": "Ciyang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\u53d1\u73b0\u662f\u6709\u73af\u800c\u4e14\u662f\u8981\u6c42\u6700\u5927\u503c\u7684 \u60f3\u5230$tarjan + dp$\n\n\u5148\u8003\u8651$DAG$\u4e0a\u7684$DP$ \n\n$f[i]$\u8868\u793a\u5728\u7b2c$i$\u4e2a\u70b9\u5356\u51fa\u5546\u54c1\u6240\u5f97\u7684\u6700\u5927\u5229\u606f\n\n\u8f6c\u79fb\u65b9\u7a0b\u5f0f\u4e5f\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\n\n\u9884\u5904\u7406\u51fa\u6765$minn[v] = min (minn[u], a[u])$\n\n$f[i] = max(f[i], a[i] - minn[i]);$\n\n\u80fd\u8fc7 $50%$\n\n\u7136\u540e\u5f00\u59cb\u60f3\u6b63\u89e3\n\n### \u5148\u7f29\u70b9 \u5728$DAG$\u4e0adp\n\n\u7136\u540e\u5c31\u662f\u6a21\u677f\u9898\u4e86\u5427 \u6bd4\u8f83\u7684easy\n\n\u7f29\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u73af\u4e0a\u7684\u6700\u5c0f\u503c & \u6700\u5927\u503c\n\n\u8bb0\u4e3a$minn[i]$  $maxx[i]$\n\n\u5728$tarjan$\u7f29\u70b9\u7684\u65f6\u5019\u53ea\u8981\u52a0\u4e00\u6b65\u64cd\u4f5c\u5373\u53ef\n\n```cpp\n   if (low[u] == dfn[u]) {\n        scc_cnt ++ ;\n        while (s[top + 1] != u) {\n            scc_num[s[top]] = scc_cnt;\n            minn[scc_cnt] = min(minn[scc_cnt], a[s[top]]);\n            maxx[scc_cnt] = max(maxx[scc_cnt], a[s[top]]);\n            vis[s[top -- ]] = 0;\n        }\n    }\n```\n\n\u7136\u540e\u8fd9\u4e2a$dp$\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5f0f\u4e5f\u9700\u8981\u53d8\u5316\u4e00\u4e0b\n\n$f[i] = max(f[i], max[scc_num[i]] - minn[i])$\n\n\u7136\u540e\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u53ef\u4ee5\u5e38\u6570\u4f18\u5316\u4e00\u4e0b ~~\u4e0d\u77e5\u9053\u7b97\u4e0d\u7b97~~\n\n$f[i]$\u987a\u4fbf\u8bb0\u5f55\u4e0b\u524d\u7f00\u6700\u5927\u503c \u90a3\u4e48\u7b54\u6848\u5c31\u662f$f[scc_num[i]]$\n\n\u5b9e\u73b0\u8d77\u6765\u5b8c\u5168\u5c31\u662f$tarjan$\u6a21\u677f\u9898\n\n# code\n\n```cpp\n//\n//  P1073 \u6700\u4f18\u8d38\u6613 trade.cpp\n//  Tarjan\n//\n//  Created by Hock on 2019/10/2.\n//  Copyright \u00a9 2019 Hock. All rights reserved.\n//\n\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <queue>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\n\ntypedef unsigned long long ll;\n\nconst int INF = 2139062143;\n\n#define DEBUG(x) std::cerr << #x << ' = ' << x << std::endl\n\ninline int read() {\n    int f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nconst int MAX_M = 500000 + 5;\n\nstruct EDGE {\n    int to, next;\n} edge[MAX_M];\n\nint head[MAX_M], cnt;\n\nvoid addedge (int u, int v) {\n    edge[++cnt].to = v;\n    edge[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nint dfn[MAX_M], low[MAX_M], vis[MAX_M], s[MAX_M], top, f[MAX_M];\n\nint n, m, scc_num[MAX_M], in[MAX_M], out[MAX_M], scc_cnt;\n\nint minn[MAX_M], maxx[MAX_M], a[MAX_M], x[MAX_M], y[MAX_M];\n\nvoid tarjan (int u) {\n    dfn[u] = low[u] = ++cnt;\n    vis[u] = 1;\n    s[++top] = u;\n    for (int i = head[u]; i; i = edge[i].next) {\n        int v = edge[i].to;\n        if (!dfn[v]) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (vis[v]) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (low[u] == dfn[u]) {\n        scc_cnt ++ ;\n        while (s[top + 1] != u) {\n            scc_num[s[top]] = scc_cnt;\n            minn[scc_cnt] = min(minn[scc_cnt], a[s[top]]);\n            maxx[scc_cnt] = max(maxx[scc_cnt], a[s[top]]);\n            vis[s[top -- ]] = 0;\n        }\n    }\n}\n\nvoid DP (int s) {\n    queue < int > q;\n    q.push(scc_num[s]);\n    f[scc_num[s]] = max(f[scc_num[s]], maxx[scc_num[s]] - minn[scc_num[s]]);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = edge[i].next) {\n            int v = edge[i].to;\n            in[v] -- ;\n            minn[v] = min(minn[v], minn[u]);//\u524d\u7f00\u6700\u5c0f\u503c\n            f[v] = max(max(f[u], maxx[v] - minn[v]), f[v]);\n            if (!in[v])\n                q.push(v);\n        }\n    }\n}\n\nint main () {\n    n = read(); m = read();\n    for (int i = 1; i <= n; i ++ ) a[i] = read();\n    for (int i = 1; i <= m; i ++ ) {\n        int u = read(), v = read(), opt = read();\n        if (opt == 1) {\n            addedge (u, v);\n            x[cnt] = u;\n            y[cnt] = v;\n        }\n        if (opt == 2) {\n            addedge (u, v);\n            addedge (v, u);\n        }\n    }\n    m = cnt;\n    memset (minn, 127, sizeof(minn));\n    memset (maxx, -127, sizeof(maxx));\n    cnt = 0;\n    for (int i = 1; i <= n; i ++ )\n        if (!dfn[i]) tarjan(i);\n    cnt = 0;\n//    puts(\"\");\n//    cout << \"scc_cnt = \" << scc_cnt << endl;\n    memset (head, 0, sizeof(head));\n    memset (edge, 0, sizeof(edge));\n    for (int i = 1; i <= m; i ++ ) {\n        if (scc_num[x[i]] != scc_num[y[i]]) {\n            addedge (scc_num[x[i]], scc_num[y[i]]);\n            in[scc_num[y[i]]] ++ ;\n        }\n    }\n//    for (int i = 1; i <= n; i ++ ) {\n//        cout << minn[scc_num[i]] << \" \" << maxx[scc_num[i]] << \"\\n\";\n//    }\n    DP(1);\n//    if (f[scc_num[n]] < 0) f[scc_num[n]] = 0;\n    cout << f[scc_num[n]] << endl;\n    return 0;\n}\n\n```",
        "postTime": 1570005565,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u662f\u4e24\u904dSPFA\u5417(\u6216\u662ftarjan)\uff1f\u6211\u8fd9\u91cc\u5c31\u662f\u4e00\u904ddp\u554a\uff1b\n\n\u9996\u5148\u5224\u65ad\u5bf9\u4e8e\u4e00\u4e2a\u70b9u\uff0c\u662f\u5426\u53ef\u4ee5\u4ece\u4e00\u53f7\u70b9\u8d70\u5230\u8fd9\u91cc\uff0c\u5e76\u4e14\u53ef\u4ee5\u4eceu\u8d70\u5230n\u53f7\u70b9\uff1b \u5bf9\u4e8e\u8fd9\u6837\u7684\u70b9\u6211\u4eec\u6253\u4e0a\u6807\u8bb0\uff1b\n\n\u90a3\u4e48\u629b\u51fa\u6c34\u6676\u7403\u7684\u70b9\u4e00\u5b9a\u662f\u4ece\u6253\u4e0a\u6807\u8bb0\u7684\u70b9\u4e2d\u9009\u51fa\u4e00\u4e2a\uff1b(\u81ea\u5df1\u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b)\n\n\u7136\u540e\u8dd1\u4e00\u904ddp\uff0cdp[i]\u8868\u793a\u4ece\u70b91\u5230\u70b9i\u7684\u82e5\u5e72\u6761\u8def\u5f84\u4e2d\uff0c\u6240\u7ecf\u8fc7\u7684\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u503c\uff1b\n\n\u6bd4\u8f83\u660e\u663e\u7684\u53d1\u73b0dp[v]\u53ef\u4ee5\u4ecedp[u]\u7ee7\u627f\u8fc7\u6765(v\u662fu\u7684\u513f\u5b50),\u6240\u4ee5\u5177\u6709\u4f18\u7f8e\u7684DP\u6027\u8d28\uff1b\n\n\u6700\u540eans=max(w[i]-dp[i]);\n\ndp\u53ef\u4ee5\u901a\u8fc7bfs\u6765\u5b9e\u73b0\uff1b\n\n```cpp\n#include <bits/stdc++.h>\n#define cin std::ios::sync_with_stdio(false); cin\n#define cout std::ios::sync_with_stdio(false); cout\nusing namespace std;\nint n,m;\nstruct littlestar{\n\tint to;\n\tint nxt;\n}star[1000010],star2[1000010];\nint head[1000010],cnt,head2[1000010],cnt2;\ninline void add(int u,int v)\n{\n\tstar[++cnt].to=v;\n\tstar[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\ninline void add2(int u,int v)\n{\n\tstar2[++cnt].to=v;\n\tstar2[cnt].nxt=head2[u];\n\thead2[u]=cnt;\n}\nint w[1000010];\nqueue<int> q;\nint bo1[1000010],bo2[1000010];\nvoid bfs1(int s)\n{\n\twhile(q.size()) q.pop();\n\tq.push(s);\n\tbo1[s]=1;\n\twhile(q.size()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[u];i;i=star[i].nxt){\n\t\t\tint v=star[i].to;\n\t\t\tif(!bo1[v]){\n\t\t\t\tbo1[v]=1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nvoid bfs2(int s)\n{\n\twhile(q.size()) q.pop();\n\tq.push(s);\n\tbo2[s]=1;\n\twhile(q.size()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head2[u];i;i=star2[i].nxt){\n\t\t\tint v=star2[i].to;\n\t\t\tif(!bo2[v]){\n\t\t\t\tbo2[v]=1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nint f[1000010];\nint vis[1000010];\nvoid SPFA()\n{\n\twhile(q.size()) q.pop();\n\tfor(register int i=1;i<=n;i++) f[i]=999999999;\n\tq.push(1);\n\tf[1]=w[1];\n\tvis[1]=1;\n\twhile(q.size()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(register int i=head[u];i;i=star[i].nxt){\n\t\t\tint v=star[i].to;\n\t\t\tif(!vis[v]){\n\t\t\t\tvis[v]=1;\n\t\t\t\tif(f[v]==999999999){\n\t\t\t\t\tf[v]=min(f[u],w[v]);\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(f[u]<f[v]){\n\t\t\t\t\t\tf[v]=f[u];\n\t\t\t\t\t\tq.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(register int i=1;i<=n;i++){\n\t\tcin>>w[i];\n\t}\n\tfor(register int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tif(w==1){\n\t\t\tadd(u,v);\n\t\t\tadd2(v,u);\n\t\t}\n\t\telse{\n\t\t\tadd(u,v);\n\t\t\tadd2(v,u);\n\t\t\tadd(v,u);\n\t\t\tadd2(u,v);\t\t\n\t\t}\n\t}\n\tbfs1(1);\n\tbfs2(n);\n\tSPFA();\n\tint ans=0;\n\tfor(register int i=1;i<=n;i++){\n\t\tif(bo1[i]&&bo2[i]){\n\t\t\tans=max(w[i]-f[i],ans);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n}\n```\n",
        "postTime": 1566374385,
        "uid": 119189,
        "name": "\u795e\u4e4b\u53f3\u5927\u81e3",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5b89\u5229 [Blog](https://www.cnblogs.com/acfunction/p/10060606.html)\n\n### Solution\n\n\u8003\u8651\u539f\u56fe\u662f DAG \u65f6\u600e\u4e48\u505a\u3002\n\n\u62d3\u6251\u6392\u5e8f + dp \uff0c\u4ee4 dp[i] \u8868\u793a $1$ \u5230 $i$ \u7684\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u5356\u51fa\u4ef7\u683c\u3002\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\u5bf9\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684 dp \u53d6\u4e2a min \uff0c\u8ba1\u7b97\u7b54\u6848\u4fbf\u662f $\\max \\limits _{i} \\{val_i - dp_i \\}$ \uff0c\u5176\u4e2d val \u662f\u5546\u54c1\u4ef7\u683c\u3002dp \u5728\u62d3\u6251\u5e8f\u4e0a\u968f\u4fbf\u8f6c\u79fb\u4e00\u4e0b\u5c31\u597d\n\n\u8003\u8651\u9898\u76ee\u600e\u4e48\u505a\u4fbf\u5341\u5206\u663e\u7136\uff0c\u76f4\u63a5\u7f29\u70b9\u5f97\u5230\u4e00\u5f20 DAG \uff0c\u8d2a\u5fc3\u7684\u8ba9\u7f29\u5b8c\u7684\u70b9\u7684\u5356\u51fa\u4ef7\u683c\u662f\u8be5\u70b9\u4e2d\u4ef7\u503c\u6700\u5927\u7684\uff0c\u5356\u5165\u7684\u662f\u8be5\u70b9\u4e2d\u4ef7\u503c\u6700\u5c0f\u7684\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u5728 DAG \u4e0a\u8f6c\u79fb\u7684\u65b9\u6cd5\u6765\u505a\u5c31\u53ef\u4ee5\u4e86\n\n`A Very Important Thing` :\n\n\u5728\u66f4\u65b0\u7b54\u6848\u7684\u65f6\u5019\uff0c\u9700\u8981\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u80fd\u5230\u8fbe n \u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u5728 \u53cd\u56fe\u4e0a dfs \u4e00\u904d\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u90a3\u4e9b\u70b9\u80fd\u591f\u5230\u8fbe\u7ec8\u70b9\u3002\n\n### Code \n\n```cpp\n#include <bits/stdc++.h>\n#define INF 1000000000\nusing namespace std;\nconst int N = 100100;\nconst int M = 500500; \nint n, m, val[N], cnt, dfn[N], low[N], tot, U[N], V[N], ind[N], ins[N], vis[N]; \nint scc, bel[N], Max[N], Min[N], List[N], ans, dp[N], sta[N], top, z[N]; \nstruct edge {\n  int v; edge *next; \n}pool[M * 6], *head[N], *h[N], *hh[N];\ninline void addd(int u, int v) {\n  edge *p = &pool[++cnt];\n  p->v = v, p->next = hh[u], hh[u] = p;\n}\ninline void add(int u, int v) {\n  edge *p = &pool[++cnt];\n  p->v = v, p->next = h[u], h[u] = p; \n}\ninline void addedge(int u, int v) {\n  edge *p = &pool[++cnt];\n  p->v = v, p->next = head[u], head[u] = p; \n}\ninline void tarjan(int u) {\n  dfn[u] = low[u] = ++tot; ins[u] = 1, sta[++top] = u; \n  for(edge *p = head[u]; p; p = p->next) {\n    int v = p->v; \n    if(!dfn[v]) tarjan(v), low[u] = min(low[u], low[v]);\n    else if(ins[v]) low[u] = min(low[u], dfn[v]); \n  } if(low[u] == dfn[u]) {\n    ++scc;\n    while(sta[top + 1] != u) {\n      Max[scc] = max(Max[scc], val[sta[top]]);\n      Min[scc] = min(Min[scc], val[sta[top]]); \n      bel[sta[top]] = scc; ins[sta[top--]] = 0; \n    }\n  }\n}\ninline void toposort() {\n  tot = 0; queue <int> Q; \n  while(!Q.empty()) Q.pop();\n  for(int i = 1; i <= scc; i++)\n    if(!ind[i]) Q.push(i);\n  while(!Q.empty()) {\n    int u = Q.front(); Q.pop();\n    List[++tot] = u;\n    for(edge *p = h[u]; p; p = p->next) {\n      int v = p->v; ind[v]--;\n      if(ind[v] == 0) Q.push(v); \n    }\n  }\n}\ninline void dfs(int u) {\n  if(vis[u]) return ; vis[u] = 1; \n  for(edge *p = hh[u]; p; p = p->next) dfs(p->v); \n}\nint main() {\n  scanf(\"%d %d\", &n, &m); \n  for(int i = 1; i <= n; i++) scanf(\"%d\", &val[i]);\n  for(int i = 1; i <= n; i++) Min[i] = INF, Max[i] = -INF;\n  for(int i = 1; i <= m; i++) {\n    scanf(\"%d %d %d\", &U[i], &V[i], &z[i]);\n    addedge(U[i], V[i]); \n    if(z[i] == 2) addedge(V[i], U[i]); \n  } \n  for(int i = 1; i <= n; i++) \n    if(!dfn[i]) tarjan(i); \n  for(int i = 1; i <= m; i++) {\n    int x = bel[U[i]], y = bel[V[i]];\n    if(x != y) { add(x, y), ind[y]++, addd(y, x); \n      if(z[i] == 2) add(y, x), ind[x]++, addd(x, y); \n    }\n  } toposort(); dfs(bel[n]); \n  for(int i = 1; i <= scc; i++) dp[i] = Min[i]; \n  for(int i = 1; i <= scc; i++) {\n    int u = List[i]; \n    if(vis[u]) ans = max(ans, Max[u] - dp[u]);\n    for(edge *p = h[u]; p; p = p->next) {\n      int v = p->v; dp[v] = min(dp[v], dp[u]); \n    }\n  } \n  printf(\"%d\\n\", ans);\n  return 0; \n} \n```",
        "postTime": 1543839413,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5982\u679c\u9898\u610f\u83ab\u540d\u5176\u5999\uff0c\u90a3\u4e48\u83ab\u540d\u5176\u5999\u7684\u4e0d\u662f\u51fa\u9898\u4eba\u7684\u8111\u888b\u5c31\u662f\u6211\u4eec\u7684\u8111\u888b\u3002\u2014\u2014zrt\n\n------------\n**\u4e2a\u4eba\u601d\u8def\uff1a**\n\n- \u6ce8\u610f\u5230**\u8fdb\u884c\u6700\u591a\u4e00\u6b21\u3001\u6700\u591a\u80fd\u8d5a\u53d6**\u548c\u8f93\u5165\u683c\u5f0f\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\u5047\u8bbe\u6211\u4eec\u662f\u963f\u9f99 \u7684\u8bdd\uff0c\u5f53\u7136\u4f1a\u5728\u8def\u5f84\u4e0a\u9009\u62e9\u6700\u4fbf\u5b9c\u7684\u5730\u65b9\u4e70\u7269\u54c1\uff0c\u6700\u8d35\u7684\u5730\u65b9\u552e\u51fa\u7269\u54c1\u3002\n- \u5982\u679c\u5bf9Dijkstra\u7684\u66f4\u65b0\u65b9\u5f0f\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u4ece\u6e90\u70b9\u5230\u6bcf\u4e00\u4e2a\u70b9\u8d2d\u5165\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u3002**\uff08\u5bf9Dijkstra\u7684\u7406\u89e3\uff09**\n- \u5f62\u8c61\u5730\u8bf4\uff0c\u6211\u4eec\u5982\u679c\u662f\u963f\u9f99\u7684\u8bdd\uff0c\u7b49\u4e8e\u5c1d\u8bd5\u8d70\u5230\u6bcf\u4e2a\u70b9\uff0c\u5e76\u770b\u4ece\u6e90\u70b9\u5230\u6bcf\u4e2a\u70b9\u65f6\uff0c\u80fd\u8d2d\u5165\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u3002\n- \u5230\u8fd9\u91cc\uff0c\u5c31\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\u4e86\u3002\u65e2\u7136\u6c42\u5f97\u8d2d\u5165\u4ef7\u683c\u53ef\u4ee5\u6b63\u7740\u8d70\uff0c\u90a3\u4e48\u662f\u5426\u6c42\u552e\u51fa\u4ef7\u683c\u53ef\u4ee5\u53cd\u7740\u8d70\u5462\uff1f\n- ![img](https://img-blog.csdnimg.cn/20190605131150288.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5NzIwMzE=,size_16,color_FFFFFF,t_70)\n- \u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002\n- \u6700\u7ec8\uff0c\u8fdb\u884c\u4e24\u6b21Dijkstra\uff0c\u518d\u679a\u4e3eans=max(\u552e\u51fa\u4ef7\u683c[i]-\u8d2d\u5165\u4ef7\u683c[i])\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002\u6ce8\u610f\uff0c\u7b2c\u4e8c\u6b21Dijkstra\u8981\u6c42\u8fdb\u884c\u5728\u53cd\u56fe\u4e0a\u3002\n\n------------\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int MAXN=1000010,MAXM=1000010;\nint n;\nstruct Edge_Low{\n\tint from,to,nxt;\n}e_Low[MAXM];\nint head_Low[MAXN],edgeCnt_Low=0;\nvoid addEdge_Low(int u,int v){\n\te_Low[++edgeCnt_Low].from=u;\n\te_Low[edgeCnt_Low].to=v;\n\te_Low[edgeCnt_Low].nxt=head_Low[u];\n\thead_Low[u]=edgeCnt_Low;\n}\nint price[MAXN];//\u5404\u4e2a\u70b9\u7684\u4ef7\u683c \nconst int INF=2100000000;\nstruct Node{\n\tint nowPoint,nowValue;\n\tbool operator <(const Node &a)const{\n\t\treturn a.nowValue<nowValue;\n\t}\n};\nint s_Low;\nint dis_Low[MAXN];\nvoid dijkstra_Low(){//\u6536\u8d2d\u5c3d\u91cf\u4f4e\u4ef7 \n\tfor(int i=1;i<=n;i++)dis_Low[i]=INF;\n\tpriority_queue<Node> q;\n\tq.push(Node{s_Low,price[s_Low]});dis_Low[s_Low]=price[s_Low];\n\twhile(!q.empty()){\n\t\tNode nowNode=q.top();q.pop();\n\t\tint nowPoint=nowNode.nowPoint,nowValue=nowNode.nowValue;\n\t\tif(dis_Low[nowPoint]!=nowValue)continue;\n\t\tfor(int i=head_Low[nowPoint];i;i=e_Low[i].nxt){\n\t\t\tint nowV=e_Low[i].to;\n\t\t\tif(dis_Low[nowV]>dis_Low[nowPoint]){\n\t\t\t\tdis_Low[nowV]=min(dis_Low[nowPoint],price[nowV]);\n\t\t\t\tq.push(Node{nowV,dis_Low[nowV]});\n\t\t\t}\n\t\t}\n\t}\n}\nstruct Edge_High{\n\tint from,to,nxt;\n}e_High[MAXM];\nint head_High[MAXN],edgeCnt_High=0;\nvoid addEdge_High(int u,int v){\n\te_High[++edgeCnt_High].from=u;\n\te_High[edgeCnt_High].to=v;\n\te_High[edgeCnt_High].nxt=head_High[u];\n\thead_High[u]=edgeCnt_High;\n}\nint s_High;\nint dis_High[MAXN];\nvoid dijkstra_High(){//\u552e\u51fa\u5c3d\u91cf\u9ad8\u4ef7 \n\tfor(int i=1;i<=n;i++)dis_High[i]=-INF;\n\tpriority_queue<Node> q;\n\tq.push(Node{s_High,price[s_High]});dis_High[s_High]=price[s_High];\n\twhile(!q.empty()){\n\t\tNode nowNode=q.top();q.pop();\n\t\tint nowPoint=nowNode.nowPoint,nowValue=nowNode.nowValue;\n\t\tif(dis_High[nowPoint]!=nowValue)continue;\n\t\tfor(int i=head_High[nowPoint];i;i=e_High[i].nxt){\n\t\t\tint nowV=e_High[i].to;\n\t\t\tif(dis_High[nowV]<dis_High[nowPoint]){\n\t\t\t\tdis_High[nowV]=max(dis_High[nowPoint],price[nowV]);\n\t\t\t\tq.push(Node{nowV,dis_High[nowV]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tint m;\n\tscanf(\"%d%d\",&n,&m);\n\ts_Low=1,s_High=n;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&price[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,z;\n\t\tscanf(\"%d%d%d\",&u,&v,&z);\n\t\taddEdge_Low(u,v);\n\t\taddEdge_High(v,u);\n\t\tif(z==2){\n\t\t\taddEdge_Low(v,u);\n\t\t\taddEdge_High(u,v);\n\t\t}\n\t}\n\tdijkstra_Low();\n\tdijkstra_High();\n\tint ans=-INF;\n\tfor(int i=1;i<=n;i++)ans=max(ans,dis_High[i]-dis_Low[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1570540046,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "### BFS\u641c\u7d22\uff0c\u9884\u5904\u7406\u526a\u679d\u3002\n\nFirst and foremost, \u6211\u4eec\u8981\u628a\u4ece\u7ec8\u70b9\u5f80\u56de\u8d70\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u7edf\u7edf\u5220\u6389\u3002\u6b64\u4e4b\u8c13\u9884\u5904\u7406\u3002\u6b64\u6cd5\u4f18\u52bf\u6709\u4e8c\uff1a\n- \u4e0d\u518d\u9700\u8981\u5bf9\u90a3\u4e9b\u4e0d\u80fd\u62b5\u8fbe\u7684\u70b9\u8fdb\u884c\u641c\u7d22\n- \u5728\u6240\u6709\u8fdb\u884c\u641c\u7d22\u7684\u70b9\uff0c\u6211\u90fd\u53ef\u4ee5\u62b5\u8fbe\u7ec8\u70b9\uff0c\u56e0\u6b64\u505a\u5b8c\u4ea4\u6613\u6211\u5c31\u53ef\u4ee5\u66f4\u65b0\u6700\u5927\u5229\u6da6\uff0c\u800c\u4e0d\u7528\u7ee7\u7eed\u8d70\u4e86\n\n\n\u5728\u8fd9\u9053\u9898\u91cc\uff0c\u5546\u4eba\u4e00\u5171\u53ef\u4ee5\u6709\u4e09\u79cd\u72b6\u6001\uff1a\u8fd8\u6ca1\u4e70\uff0c\u4e70\u4e86\u8fd8\u6ca1\u5356\uff0c\u5356\u4e86\u5728\u627e\u7ec8\u70b9\u3002\u4f46\u662f\u56e0\u4e3a\u6211\u4eec\u505a\u4e86\u9884\u5904\u7406\uff0c\u6240\u4ee5\u7b2c\u4e09\u79cd\u72b6\u6001\u5c31\u6d88\u5931\u4e86\u3002\u56e0\u6b64\u72b6\u6001\u7684\u5b9a\u4e49\u662f\uff1a\n- pos\uff1a\u5546\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\n- val\uff1a\u5982\u679c\u6ca1\u4e70\uff0c\u7b49\u4e8e0\uff1b\u5982\u679c\u4e70\u4e86\u6ca1\u5356\uff0c\u7b49\u4e8e\u8fdb\u4ef7\u3002\n\n\u4e00\u4e2a\u72b6\u6001\u4e0d\u80fd\u641c\u7d22\u4e24\u6b21\u3002\u8fd9\u5229\u7528vis\u6570\u7ec4\u89e3\u51b3\u3002\uff08\u5e78\u800c\u8fd9\u9898\u7684\u6570\u636e\u89c4\u6a21\u8fd8\u662f\u53ef\u4ee5\u5f00\u7684\u4e0b\u7684\u3002\uff09\n\n\u72b6\u6001\u7684\u8f6c\u79fb\uff1a\n- \u8d70\n- \u5982\u679c\u6ca1\u4e70\uff0c\u4e70\n- \u5982\u679c\u4e70\u4e86\u6ca1\u5356\uff0c\u5356\n\n\u526a\u679d\uff1a\n\n- \u9884\u5904\u7406\u4e2d\u53d1\u73b0\u4e0d\u80fd\u8d70\u5230\u7684\u70b9\uff0c\u4e0d\u8d70\n- //\u4e4b\u524d\u6ca1\u6709\u505a\u9884\u5904\u7406\uff0c\u6709\u4e00\u4e2a\u526a\u679d\u662f\uff1a\u5728\u5356\u4e86\u5728\u627e\u7ec8\u70b9\u7684\u72b6\u6001\u4e0b\uff0c\u5982\u679c\u5229\u6da6\u6ca1\u6709\u76ee\u524d\u6700\u9ad8\u5229\u6da6\u5927\uff0c\u6211\u5c31\u4e0d\u627e\u7ec8\u70b9\u4e86\n- //\u60f3\u4e86\u4e00\u4e2a\u526a\u679d\uff0c\u4f46\u662f\u6ca1\u6709\u505a\uff1a\u7edf\u8ba1\u6240\u6709\u70b9\u6700\u8d35\u7684\u4ef7\u683c\uff0c\u5982\u679c\u5728\u6b64\u5904\u4e70\uff0c\u5e76\u4ee5\u6700\u8d35\u7684\u4ef7\u683c\u51fa\u552e\uff0c\u4ecd\u7136\u4e0d\u8d85\u8fc7\u76ee\u524d\u7684\u6700\u9ad8\u5229\u6da6\uff0c\u526a\u679d\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100010\n#define M 1000010\n#define P 110\n\nint price[N];\n\nstruct GRAPH{\n\tint head[N];\n\tint next[M];\n\tint to[M];\n\tint tot;\n\t\n\tvoid add(int u, int v){\n\t\ttot++;\n\t\tnext[tot]=head[u];\n\t\thead[u]=tot;\n\t\tto[tot]=v;\n\t}\n};\n\nGRAPH g, revg;\n\nbool reach[N];\nbool vis[N][P];\n\nint n, m;\nint best;\n\nstruct STATE{\n\tint pos;\n\tint val; //\u6ca1\u4e70=0\uff1b\u6c42\u5584\u5f85\u6cbd=\u8fdb\u4ef7\uff1b\n};\n\nint read(){\n\tint x=0; int sign=1;\n\tchar c=getchar();\n\twhile(c>'9' || c<'0') {\n\t\tif (c=='-') sign=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0' && c<='9'){\n\t\tx=(x<<3)+(x<<1); \n\t\tx+=c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*sign;\n}\n\nvoid prework(){\n\tqueue<int> q;\n\tq.push(n);\n\treach[n]=1;\n\twhile(q.size()){\n\t\tint u=q.front(); q.pop();\n\t\tfor (int i=revg.head[u]; i; i=revg.next[i]){\n\t\t\tint v=revg.to[i];\n\t\t\tif (reach[v]) continue;\n\t\t\tq.push(v);\n\t\t\treach[v]=1;\n\t\t}\n\t}\n}\n\nvoid bfs(){\n\tqueue<STATE> q;\n\tq.push((STATE){1, 0});\n\twhile(q.size()){\n\t\tSTATE u=q.front(); q.pop();\n\t\t//printf(\"pos=%d, val=%d, sold=%d\\n\", u.pos, u.val, u.sold);\n\t\t//\u4e0d\u9b3b\uff0c\u8d70 \n\t\tfor (int i=g.head[u.pos]; i; i=g.next[i]){\n\t\t\tSTATE v; \n\t\t\tv.pos=g.to[i]; \n\t\t\tv.val=u.val;\n\t\t\tif (!reach[v.pos]) continue;\n\t\t\tif (vis[v.pos][v.val]) continue;\n\t\t\tq.push(v);\n\t\t\tvis[v.pos][v.val]=1;\n\t\t}\n\t\t\n\t\t\n\t\tif(!u.val){ //\u6ca1\u4e70 \n\t\t\tSTATE v;\n\t\t\tv.pos=u.pos;\n\t\t\tv.val=price[u.pos];\n\t\t\t\n\t\t\tif (vis[v.pos][v.val]) continue;\n\t\t\tq.push(v);\n\t\t\tvis[v.pos][v.val]=1;\n\t\t}\n\t\t\n\t\tif (u.val){ //\u51fa\u552e \n\t\t\tint profit=price[u.pos]-u.val;\n\t\t\tbest=max(best, profit);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=read(); m=read();\n\tfor (int i=1; i<=n; i++) price[i]=read();\n\tfor (int i=1; i<=m; i++){\n\t\tint x=read(), y=read(), z=read();\n\t\tg.add(x, y);\n\t\tif (z==2) g.add(y, x);\n\t\trevg.add(y, x);\n\t\tif (z==2) revg.add(x, y);\n\t}\n\tprework();\n\tbfs();\n\tcout<<best;\n\treturn 0;\n}\n```",
        "postTime": 1540001192,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7b80\u5355\u7684\u5f97\u5230\u7b54\u6848\u3002\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u51fa\uff0c\u7531\u53cc\u5411\u8fb9\u4e32\u8054\u800c\u6210\u7684\u70b9\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u81ea\u7531\u7684\u5728\u8fd9\u4e9b\u70b9\u4e0a\u6765\u56de\u3002\n\n\u56e0\u6b64\uff0c\u5728\u8bfb\u5165\u8fb9\u7684\u65f6\u5019\uff0c\u5982\u679c\u8bfb\u5165\u53cc\u5411\u8fb9\u5219\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5e76\u8bb0\u5f55\u8be5\u96c6\u5408\u91cc\u7684\u6700\u5c0f\u548c\u6700\u5927\u4ef7\u683c\uff0c\u5426\u5219\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\n\n\u7b49\u5230\u6240\u6709\u70b9\u90fd\u88ab\u8bfb\u5165\u4ee5\u540e\uff0c\u518d\u5411\u56fe\u4e2d\uff0c\u6b64\u65f6\u6240\u6709\u7684\u8fb9\u90fd\u662f\u5355\u5411\u8fb9\uff0c\u76f4\u63a5\u4ece\u8d77\u70b9\u5411\u7ec8\u70b9BFS\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define MAXN 100000\n#define MAXM 500000\nusing namespace std;\nstruct road{\n    int tv,next;\n}roads[MAXM*2+10];\nint v[MAXN+10];\nint n,m,x,y,z;\nint minb,ans,cnt=0;\nint list[MAXN+10];\nstruct n1{\n    int v,mi,ma;    \n}f[MAXN+10];\nvoid add(int u,int v){\n    if (u==v) return;\n    cnt++;\n    roads[cnt].tv=v;\n    roads[cnt].next=list[u];\n    list[u]=cnt;\n}\nstruct node{\n    int minb,pos,ans;\n}queue[10000000+10];\nint gf(int x){\n    if (f[x].v==x) return x;\n    int df=gf(f[x].v);\n    f[x].v=df;\n    return df;\n}\nvoid uni(int x,int y){\n    int dfx=gf(x);\n    int dfy=gf(y);\n    f[dfy].mi=min(f[dfy].mi,f[dfx].mi);\n    f[dfy].ma=max(f[dfx].ma,f[dfy].ma);\n    f[dfx].v=dfy;\n}\nint flag[MAXM+10];\nint rx[MAXM+10],ry[MAXM+10];\nint tot=0;\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d\",&v[i]);\n        f[i].v=i;\n        f[i].mi=f[i].ma=v[i];\n    }\n    for (int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if (z==2) uni(x,y);else{\n            tot++;rx[tot]=x;ry[tot]=y;\n        }\n    }\n    for (int i=1;i<=tot;i++){\n        add(gf(rx[i]),gf(ry[i]));\n    }\n    int h=1,t=1;\n    memset(flag,0,sizeof(flag));\n    int df=gf(1);\n    flag[df]=1;\n    queue[1].minb=f[df].mi;queue[1].pos=df;queue[1].ans=f[df].ma-f[df].mi;\n    while (h<=t){\n        if (queue[h].pos==gf(n)) {\n            ans=max(ans,queue[h].ans);\n            h++;continue;\n        }\n        int w=list[queue[h].pos];\n        while (w){\n            if ((flag[roads[w].tv]<100)||roads[w].tv==n){\n                t++;\n                flag[roads[w].tv]++;\n                queue[t].pos=roads[w].tv;\n                int df=gf(queue[t].pos);\n                queue[t].minb=min(queue[h].minb,f[df].mi);\n                queue[t].ans=max(queue[h].ans,f[df].ma-queue[t].minb);\n            }\n            w=roads[w].next;\n        }\n        h++;\n    }\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1507776531,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u89e3\u6cd5\u82b1\u6837\u767e\u51fa\uff0c\u4e2a\u4eba\u611f\u89c9**\u5206\u5c42\u56fe+\u6700\u77ed\u8def**\u6700\u7b80\u5355\u3002\n\n\n------------\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8bb2\u8bb2\u4ec0\u4e48\u662f\u5206\u5c42\u56fe\u3002\n\n\u5206\u5c42\u56fe\u5c31\u662f\u628a\u4e00\u4e2a\u56fe\u5206\u6210\u5f88\u591a\u5f88\u591a\u7684\u5c42\uff0c\u6bcf\u4e00\u5c42\u90fd\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u7136\u540e\u611f\u89c9\u9898\u76ee\u6240\u8ff0\uff0c\u628a\u67d0\u4e9b\u5c42\u95f4\u8fde\u63a5\u8d77\u6765\uff0c\u7136\u540e\uff0c\u7528\u56fe\u8bba\u7684\u7b97\u6cd5\u5c31\u53ef\u4ee5\u628a\u9898\u76ee\u89e3\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u4ee3\u7801\u5b9e\u73b0\u8d77\u6765\u4e5f\u5f88\u7b80\u5355\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a\u6240\u4ee5\u7684\u70b9\u539f\u6837\u590d\u5236\uff0c\u5373\u7b2c$i$\u5c42\u7684\u7b2c$j$\u4e2a\u70b9\u4e3a$n \\times i +j$\u3002\n\n------------\n\u56de\u5230\u672c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u56fe\u5206\u6210\u4e09\u4efd\uff0c\u7b2c\u4e00\u5c42\u8868\u793a\u6ca1\u4e70\u4e5f\u6ca1\u5356\uff0c\u7b2c\u4e8c\u5c42\u8868\u793a\u8fdb\u884c\u4e86\u4e70\uff0c\u7b2c\u4e09\u5c42\u8868\u793a\u5373\u8fdb\u884c\u4e86\u4e70\u548c\u5356\u3002\n\n\u7136\u540e\uff0c\u540c\u4e00\u5c42\u7684\u56fe\u95f4\u4e92\u76f8\u8fde\u8fb9\uff0c\u56e0\u4e3a\u79fb\u52a8\u4e0d\u9700\u8981\u82b1\u8d39\uff0c\u6240\u4ee5\u8fb9\u6743\u6052\u4e3a$0$\u3002\n\n\u6700\u540e\uff0c\u8003\u8651\u5c42\u4e0e\u5c42\u95f4\u5982\u4f55\u79fb\u52a8\u3002\u5f88\u663e\u7136\u53ea\u80fd\u4ece\u7b2c\u4e00\u5c42\u8f6c\u79fb\u5230\u7b2c\u4e8c\u5c42\uff08\u5fc5\u987b\u5148\u4e70\u518d\u5356\u5bf9\u5427\uff01\uff09\uff0c\u8fb9\u6743\u4e3a$-cost[i]$\uff08$cost[i]$\u8868\u793a\u7b2c$i$\u70b9\u7684\u82b1\u8d39\uff09\uff0c\u7b2c\u4e8c\u5c42\u8f6c\u79fb\u5230\u7b2c\u4e09\u5c42\uff08\u5426\u5219\u5c31\u4f1a\u4e0d\u4e70\u5c31\u5356\uff01\uff09\uff0c\u8fb9\u6743\u4e3a$cost[i]$\u3002\n\n\u6700\u540e\uff0c\u8dd1\u4e00\u904d\u6700**\u957f**\u8def\u5c31\u53ef\u4ee5\u4e86\u3002\u7b54\u6848\u53ef\u4ee5\u4e3a$d[3\\times n]$\uff0c\u4e5f\u53ef\u4ee5\u662f$max\\{d[n],d[3\\times n]\\}$\n\n\n\n------------\n**\u3010\u4ee3\u7801\u3011\uff1a**\n```cpp\n\u672c\u4ee3\u7801\u4ec5\u4ec5\u7565\u53bb\u5934\u6587\u4ef6\uff0c\u5176\u4f59\u7686\u6b63\u786e\uff01\n#define gc getchar()\n#define g(c) isdigit(c)\ninline int read(){\n\tchar c=0;int x=0;bool f=0;\n\twhile (!g(c)) f=c=='-',c=gc;\n\twhile (g(c)) x=x*10+c-48,c=gc;\n\treturn f?-x:x;\n}//\u5feb\u8bfb\nconst int N=100100;\nconst int M=500100;\nstruct node{\n\tint next,to,len;\n}e[M*6+N*2];int h[N*3],tot;\ninline void add(int a,int b,int w){\n\te[++tot]=(node){h[a],b,w};h[a]=tot;\n}\nint d[N*3];bool vis[N*3];\ninline void spfa_algorithm(int s){\n\tmemset(d,128,sizeof(d));\n\tmemset(vis,1,sizeof(vis));\n\tqueue<int> q;q.push(s);d[s]=0;\n\twhile (q.size()){\n\t\tint u=q.front();q.pop();vis[u]=true;\n\t\tfor(int i=h[u];i;i=e[i].next){\n\t\t\tregister int to=e[i].to;\n\t\t\tif (d[to]<d[u]+e[i].len){\n\t\t\t\td[to]=d[u]+e[i].len;\n\t\t\t\tif (vis[to]){\n\t\t\t\t\tvis[to]=false;\n\t\t\t\t\tq.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}//\u56e0\u4e3a\u6709\u8d1f\u8fb9\u6240\u4ee5\u5fc5\u987b\u8981spfa\nint n,m,cost[N];\ninline void read_the_date(){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tcost[i]=read();\n\t\tadd(i,i+n,-cost[i]);\n\t\tadd(i+n,i+2*n,cost[i]);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tregister int u=read(),v=read(),z=read();\n\t\tadd(u,v,0);add(u+n,v+n,0);add(u+2*n,v+2*n,0);\n\t\tif (z==2) add(v,u,0),add(v+n,u+n,0),add(v+2*n,u+2*n,0);\n\t}\n}//\u6ce8\u610f\u5982\u4f55\u5efa\u8fb9\ninline int HPXXZYY(){\n\tread_the_date();\n\tspfa_algorithm(1);\n\tcout<<max(d[n],d[3*n]);\n\treturn 0;\n}\nint main(){\n\treturn HPXXZYY();\n}\n```",
        "postTime": 1574240613,
        "uid": 95624,
        "name": "HPXXZYY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4ddalao\u90fd\u505a\u5f97\u90a3\u4e48\u9ebb\u70e6\uff0c\u5176\u5b9e\u6839\u672c\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\u554a\u3002\u3002\u3002\u66b4\u529b\u5c31\u53ef\u4ee5AC\u4e86\u3002\n\u6211\u4eec\u8003\u8651\u5982\u679c\u76f4\u63a5DFS\uff0c\u90a3\u4e48\u6709\u4e9b\u70b9\u53ef\u80fd\u4f1a\u88ab\u91cd\u590d\u8d70\u8fc7\u5bfc\u81f4TLE\uff0c\u4f46\u662f\u6211\u4eec\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\u53d1\u73b0\u4e00\u4e2a\u70b9\u6700\u591a\u88ab\u8d703\u6b21\uff0c\u7b2c\u4e00\u6b21\u4e70\u7684\u65f6\u5019\u7ecf\u8fc7\u5b83\uff0c\u7b2c\u4e8c\u6b21\u8d70\u56de\u53bb\u5356\u7684\u65f6\u5019\u7ecf\u8fc7\u5b83\uff0c\u4e70\u5b8c\u4e86\u8d70\u5230\u7ec8\u70b9\u518d\u8d70\u4e00\u6b21\uff0c\u4e00\u5171\u4e09\u6b21\uff0c\u6240\u4ee5\u5f53\u4e00\u4e2a\u70b9\u8d70\u4e86\u8d85\u8fc7\u4e09\u6b21\uff0c\u5c31\u80af\u5b9a\u662f\u591a\u4f59\u7684\u4e86\uff0c\u76f4\u63a5\u4e0d\u641c\u4e86\u8fd4\u56de\u5c31\u884c\u3002\n\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c2\u4e2adfs,\u4e00\u6b21\u8d70\u51fa\u6700\u5927\u503c\uff0c\u7b2c\u4e8c\u6b21\u8d70\u51fa\u6700\u5c0f\u503c\uff0c\u5b8c\u4e8b\u4e86\uff0c\u66b4\u529bAC\u3002\n```cpp\n#include <iostream>\n#include <queue>\n#include <cstring>\n#include <vector>\nusing namespace std;\nconst int MAXN = 100010;\nvector<int> edges[MAXN];\nvector<int> reedges[MAXN];\nint mn[MAXN],mx[MAXN];\nint vis[MAXN];\nint price[MAXN];\nint n,m;\nvoid dfs1(int x,int minn){\n\tvis[x]++;\n\tmn[x] = min(minn,price[x]);\n\tfor(int i = 0;i<edges[x].size();i++){\n\t\tint t = edges[x][i];\n\t\tif(vis[t]>3)continue;\n\t\tdfs1(t,mn[x]);\n\t}\n} \nvoid dfs2(int x,int maxx){\n\tvis[x]++;\n\tmx[x] = max(price[x],maxx);\n\tfor(int i = 0;i<reedges[x].size();i++){\n\t\tint t = reedges[x][i];\n\t\tif(vis[t]>3)continue;\n\t\tdfs2(t,mx[x]);\n\t}\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i = 1;i<=n;i++)cin>>price[i];\n\tint x,y,z;\n\tfor(int i = 1;i<=m;i++){\n\t\tcin>>x>>y>>z;\n\t\tif(z==1){\n\t\t\tedges[x].push_back(y);\n\t\t\treedges[y].push_back(x);\n\t\t}else{\n\t\t\tedges[x].push_back(y),edges[y].push_back(x);\n\t\t\treedges[x].push_back(y),reedges[y].push_back(x);\n\t\t}\n\t}\n\tdfs1(1,0x3f3f3f3f);\n\tmemset(vis,0,sizeof(vis));\n\tdfs2(n,0);\n\tint ans = 0;\n\tfor(int i = 1;i<=n;i++){\n\t\tif(mn[i]!=0&&mx[i]!=0){\n\t\t\tans = max(ans,mx[i]-mn[i]);\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n\n```",
        "postTime": 1572251187,
        "uid": 61493,
        "name": "BeyondStars",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e0b\u9898\u89e3\uff0c\u53d1\u73b0\u8bf4\u7684tarjan+dagdp\u2026\u2026\n\n\u7136\u540e\u7ffb\u5230\u7b2c\u4e09\u9875\u624d\u53d1\u73b0\u4e00\u4e2adagdp\n\n\u7136\u540e\u5462\uff0c\u611f\u89c9\u8bb2\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u800c\u4e14\u538b\u884c\uff0c\u7528\u4e86\u597d\u591a\u7384\u5b66\u64cd\n\u4f5c\u3002\u3002\n\n\u5173\u952e\u662f\u8fd8\u6ca1\u6709\u6ce8\u91ca\uff0c\u4e8e\u662f\u679c\u65ad\u81ea\u5df1\u6765\u4e00\u53d1\n\n\u559c\u6b22\u6211\u7684\u535a\u5ba2\u5c31\u6765[\u5eb7\u5eb7](https://www.cnblogs.com/zsx6/)\n\n\u53e6\u5916\u5173\u4e8e\u540e\u6548\u6027\u7684\u8ba8\u8bba\uff1a\n\n##### \u9996\u5148\u8fd9\u4e2a\u56fe\u4e0d\u5b58\u5728\u73af\u4e86\uff0c\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\uff0c\u8be5\u70b9\u5165\u961f\u6b21\u6570\u5fc5\u7136\u9ad8\u4e8e\u8be5\u70b9\u5165\u5ea6\uff0c\u8fd9\u4e2a\u62ff\u6765\u7528\u5c31\u597d\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<cstring>\n#include<vector>\n#include<stack>\n#include<algorithm>\n\nusing namespace std;\n\nint n,m,head[100050],size;\nint bd[100050],a[100050],zd[100050],zx[100500],mmx=-1,dt,cnt;\nint dfn[100050],low[100050],ins[100050],ind[100500]; \nint f[100050];\n\nstack <int> s;\n\nstruct edge{\n\tint next,to;\n}e[1008600],looker[1008600];\n\nvoid addedge(int next,int to)\n{\n\te[++size].next=head[next];\n\te[size].to=to;\n\thead[next]=size;\n}\n\nvoid tarjan(int t)  //tarjan\u7f29\u70b9 \n{\n\tdfn[t]=low[t]=++dt;\n\ts.push(t);\n\tins[t]=1;\n\tint i,j;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(!dfn[j]) tarjan(j),low[t]=min(low[t],low[j]);\n\t\telse if(ins[j]) low[t]=min(low[t],dfn[j]);\n\t}\n\tj=0;  //j\u4e00\u5b9a\u8981\u6e05\u96f6\u4e0d\u7136\u6709\u4e9b\u60c5\u51b5\u8981\u70b8 \u6bd4\u5982 \u81ea\u73af\u4e4b\u7c7b\u7684  \n\tif(dfn[t]==low[t])\n\t{\n\t\tcnt++;\n\t\twhile(t!=j)\n\t\t{\n\t\t\tj=s.top();\n\t\t\ts.pop();\n\t\t\tins[j]=0;\n\t\t\tbd[j]=cnt;\n\t\t}\n\t}\n}\n\nvoid dagdp(int s)\n{\n\tqueue <int> q;\n\tq.push(bd[s]);\n\tf[bd[s]]=max(f[bd[s]],zd[bd[s]]-zx[bd[s]]);  //\u8fd9\u4e2a\u5237\u4e0d\u5237\u90fd\u4e0d\u7528\u7ba1\u53cd\u6b63\u90fd\u662f0 \n\twhile(!q.empty())\n\t{\n\t\tint t=q.front();\n\t\tq.pop();\n\t\tint i,j; \n\t\tfor(i=head[t];i;i=e[i].next)\n\t\t{\n\t\t\tj=e[i].to;\n\t\t\tind[j]--; \n            zx[j]=min(zx[j],zx[t]);//\u4fdd\u7559\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u4e70\u7684\u65f6\u5019\u53ef\u4ee5\u4ece\u4e00\u4e2a\u4ef7\u683c\u4f4e\u7684\u5730\u65b9\u5e26\u8fc7\u6765\u3002 \n            f[j]=max(f[j],max(zd[j]-zx[j],f[t]));//\u5224\u65ad\u4e00\u4e0b\uff0c\u6709\u4e09\u79cd\u60c5\u51b5 \uff1a \u4ece\u53e6\u5916\u7684\u70b9\u5e26\u8fc7\u6765\uff0c\u8fd9\u4e2a\u70b9\u5356\uff0c\u4e0a\u4e2a\u70b9\u5356 \n\t\t\tif(!ind[j])\n\t\t\t{\n\t\t\t\tq.push(j);  //\u5f53\u6bcf\u4e2a\u80fd\u5237\u65b0\u8be5\u70b9\u7684\u70b9\u90fd\u88ab\u5b8c\u6210\u5237\u65b0\u540e\u624d\u53ef\u4ee5\u5237\u8fd9\u4e2a\u70b9[\u65e0\u540e\u6548\u6027\u539f\u5219] \n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\nint main()\n{\n\tint i,j;\n\tscanf(\"%d %d\",&n,&m);\n\tfor(i=1;i<=n;i++)\n\tscanf(\"%d\",&a[i]);\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tint t1,t2,t3;\n\t\tscanf(\"%d %d %d\",&t1,&t2,&t3);\n\t\tif(t3==1) \n\t\t{\n\t\taddedge(t1,t2);\n\t\tlooker[size].next=t1;\n\t\tlooker[size].to=t2;\t  //\u4fdd\u7559\u4e00\u4e2a\u8fb9\u96c6\u7684\u5907\u4efd\uff0c\u4ee5\u4fbf\u4ece\u65b0\u5efa\u8fb9 \n\t\t}\n\t\tif(t3==2)\n\t\t{\n\t\taddedge(t2,t1);\n\t\taddedge(t1,t2);  //\u53cc\u5411\u8fb9\u4e0d\u8003\u8651\uff0c\u56e0\u4e3a\u5b83\u4eec\u5fc5\u7136\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762 \n\t\t} \n\t}\n\tfor(i=1;i<=n;i++)\n\tif(!dfn[i]) tarjan(i);\n\tmemset(zd,-1,sizeof(zd));  //\u6700\u5927\u503c\u8d4b\u4e3a-1\uff0c\u6700\u5c0f\u503c\u8d4b\u4e3a0x3f3f3f3f \n\tmemset(zx,0x3f,sizeof(zx));\n\tint sz=size;\n\tmemset(head,0,sizeof(head));\n\tsize=0;\n\tfor(i=1;i<=sz;i++)\n\t{\n\t\tint aa,bb;\n\t\taa=looker[i].next;\n\t\tbb=looker[i].to;\n\t\taa=bd[aa];\n\t\tbb=bd[bb];\n\t\tif(aa==bb) continue;\n\t\taddedge(aa,bb);  \n\t\tind[bb]++; //\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u5c31\u662f\u8be5\u70b9\u6700\u5927\u80fd\u88ab\u5237\u65b0\u7684\u6b21\u6570 \n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tzd[bd[i]]=max(zd[bd[i]],a[i]);\n\t\tzx[bd[i]]=min(zx[bd[i]],a[i]);    //\u56e0\u4e3a\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u4e92\u76f8\u901a\u8fbe\uff0c\u56e0\u6b64\u8bb0\u5f55\u552e\u4ef7\u7684\u6700\u9ad8\u548c\u6700\u4f4e\u5c31\u53ef\u4ee5\u4e86 \n\t}\n\tdagdp(1);\n\tprintf(\"%d\",f[bd[n]]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1562035030,
        "uid": 38636,
        "name": "\u5bd2\u51b0\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u8868\u793a\u4e0d\u4f1aspfa,\u5e73\u751f\u53ea\u4f1adp\n```cpp\ncin>>x>>y>>z;\nc[y-1].push_back(x-1);\nif(z==2)c[x-1].push_back(y-1);\n```\n\u5bf9\u4e8e\u6837\u4f8b\u8f93\u5165\uff0c\u6211\u662f\u53cd\u8fc7\u6765\u5b58\u50a8\u7684\uff08y\u5728\u524d\uff09\uff0c\u8868\u793a\u4ece\u54ea\u4e2a\u57ce\u5e02\u53ef\u4ee5\u628a\u4e1c\u897f\u4e70\u8fc7\u6765\u5356\u6389\uff0c\n**\u4f8b\u59821 2 1\uff0c\u5c31\u8bf4\u660e2\u57ce\u5e02\u53ef\u4ee5\u4ece1\u57ce\u5e02\u628a\u4e1c\u897f\u4e70\u8fc7\u6765\u5356\u6389**\n\n\n```cpp\nm[i]=max(m[i],v[i]-v[*it]+m[*it]);\n```\n- \u4ee52\u53f7\u57ce\u5e02\u4e3a\u4f8b\u5b50\uff1a\u53ef\u4ee5\u4ece1\u30013\u53f7\u57ce\u5e02\u4e70\u4e1c\u897f\u8fc7\u6765\u5356\u6389\uff0c\n\u5982\u679c2\u57ce\u5e02\u7684\u4ef7\u683c\u5927\u4e8e1\u57ce\u5e02\u7684\u4ef7\u683c\uff0c\u5c31\u53ef\u4ee5\u4ea4\u6613\uff0c\u5229\u76ca\u5b58\u5230m\u91cc\u9762\uff0c\n\n- \u6700\u7ec82\u57ce\u5e02\u4ece3\u57ce\u5e02\u4e70\u4e1c\u897f\u8fc7\u6765\u5356\u6389\u53ef\u4ee5\u83b7\u5f97\u6700\u5927\u5229\u76ca2.\n\u5bf9\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\uff1a\n```cpp\n3 2\n1 3 5\n1 2 1\n2 3 1\n```\n\u5e94\u8be5\u4ece1\u57ce\u5e02\u4e70\uff0c3\u57ce\u5e02\u5356\u6389\u3002\n\n\u5f00\u59cb\u7684\u65f6\u5019\uff0c2\u57ce\u5e02\u83b7\u5229\u4e3a2\uff0c\u8ba1\u7b973\u57ce\u5e02\u7684\u65f6\u5019\u8981\u52a0\u4e0a2\u57ce\u5e02\u83b7\u5229\uff0c3\u57ce\u5e02\u83b7\u52294\uff0c\n\u6240\u4ee5\u5f0f\u5b50\u91cc\u9762\u8981\u52a0\u4e0am[*it]\n\n```cpp\nans[i]=max(ans[i],max(ans[*it],m[*it]));\n```\n- ans\u6570\u7ec4\u4fdd\u5b58\u4ece1-N\u57ce\u5e02\u6240\u83b7\u5229\u6da6\u7684\u603b\u548c\n\n\u6700\u540e\u732e\u4e0a22\u884c\u4ee3\u7801(534ms, 5432KB)\uff0c~~**\u538b\u884c\u771f\u723d**~~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint v[100005],m[100005],ans[100005];\nvector<int> c[100005];\nvector<int>::iterator it;\nint main()\n{\n\tint i=0,N,M,x,y,z;\t\n\tfor(cin>>N>>M;i<N;i++)cin>>v[i];\n\tfor(i=0;i<M;i++){\n\t\tcin>>x>>y>>z;\n\t\tc[y-1].push_back(x-1);\n\t\tif(z==2)c[x-1].push_back(y-1);\n\t}\n\tfor(i=0;i<N;i++)\n\t\tfor(it=c[i].begin();it!=c[i].end();it++){\n\t\t\tm[i]=max(m[i],v[i]-v[*it]+m[*it]);\n\t\t\tans[i]=max(ans[i],max(ans[*it],m[*it]));\n\t\t}\n\tcout<<ans[N-1]<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1556995072,
        "uid": 101534,
        "name": "90182si",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4e3b\u8981\u60f3\u6cd5\uff1aspfa*2        \n\u5148\u7528\u4e00\u6b21spfa\u53cd\u5411\u8dd1\u4e00\u6b21~~\u6700\u77ed\u8def~~\uff0c\u68c0\u67e5\u6bcf\u4e2a\u70b9\u80fd\u5426\u8d70\u5230\u7ec8\u70b9   \n\u518d\u7528\u4e00\u6b21spfa\u6b63\u5411\u8dd1\u4e00\u6b21~~\u6700\u77ed\u8def~~\uff0cf[i]\u8868\u793a\u8d70\u5230\u7b2ci\u4e2a\u70b9\u8d2d\u4e70\u6c34\u6676\u7403\u7684\u6700\u5c0f\u503c\uff0c\u5047\u8bbe\u4e0a\u4e00\u6b65\u6240\u5728\u70b9\u7f16\u53f7\u4e3al\uff0c\u5f53\u524d\u6240\u5728\u70b9\u7f16\u53f7\u4e3ak,\u9012\u63a8\u5f0f\u4e3af[k]=max(f[i],ball[k])(ball[k]\u8868\u793a\u7b2ck\u4e2a\u57ce\u5e02\u7684\u6c34\u6676\u7403\u4ef7\u683c\uff09  \n\u73b0\u5728\u53ea\u6709\u4e00\u4e2a\u95ee\u9898\u4e86\uff1a\u5982\u4f55\u89e3\u51b3spfa\u7528\u90bb\u63a5\u8868\u4f1a\u70b8\u7a7a\u95f4\u7684\u95ee\u9898\u4e86  \n\u7528next\u8868\u793a\u4e0b\u4e00\u6761\u5f00\u59cb\u4f4d\u7f6e\u76f8\u540c\u7684\u8fb9(\u8d77\u6307\u9488\u4f5c\u7528),ls[i][0]\u8868\u793a\u5f00\u59cb\u4f4d\u7f6e\u4e3ai\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0cls[i][1]\u4e3a\u6700\u540e\u4e00\u6761(\u5176\u5b9e\u53ea\u662f\u4e2d\u95f4\u8f85\u52a9\u7528\u7684)  \n\u4e0b\u9762\u4e0a\u4ee3\u7801(\u6709\u4e9b\u5947\u602a\u7684\u53d8\u91cf\u540d\u4e0d\u7528\u7406\u5b83)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint to,next;\n};\nbool arrive[100001],at[100001];\nnode side[1000001],fside[1000001];\n//side\u662f\u6b63\u56fe\uff0cfside\u662f\u53cd\u56fe \nint ls1[100001][2],ls2[100001][2];\nint dl[100001],tzz,wzz;\nint n,m,ball[100001],ans;\nint f[100001];\nint read()//\u5feb\u8bfb \n{\n\tint o_o=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9'){o_o=o_o*10+ch-'0';ch=getchar();}\n\treturn o_o;\n}\nvoid ltsc()//\u53cd\u5411spfa \n{\n\tarrive[n]=true;\n\ttzz=0;wzz=1;dl[1]=n;\n\twhile(tzz<wzz)\n\t{\n\t\t++tzz;\n\t\tint o_o=ls2[dl[tzz]][0];\n\t\twhile(o_o!=0)\n\t\t{\n\t\t\tif(!arrive[fside[o_o].to])\n\t\t\t{\n\t\t\t\tarrive[fside[o_o].to]=true;\n\t\t\t\t++wzz;\n\t\t\t\tdl[wzz]=fside[o_o].to;\n\t\t\t}\n\t\t\to_o=fside[o_o].next;\n\t\t}\n\t}\n}\nvoid spfa()//\u6b63\u5411spfa \n{\n\tmemset(dl,0,sizeof(dl));\n\tfor(int i=1;i<=n;i++)f[i]=1000000000;\n\tf[1]=ball[1];\n\ttzz=0;wzz=1;dl[1]=1;at[1]=true;\n\twhile(tzz!=wzz)\n\t{\n\t\t++tzz;\n\t\tif(tzz==100001)tzz=1;\n\t\tat[dl[tzz]]=false;\n\t\tint o_o=ls1[dl[tzz]][0];\n\t\twhile(o_o!=0)\n\t\t{\n\t\t\tint where=side[o_o].to;\n\t\t\tif(arrive[where])\n\t\t\t{\n\t\t\t\tans=max(ans,ball[where]-f[dl[tzz]]);\n\t\t\t\tif(min(ball[where],f[dl[tzz]])<f[where])\n\t\t\t\t{\n\t\t\t\t\tf[where]=min(ball[where],f[dl[tzz]]);\n\t\t\t\t\tif(!at[where])\n\t\t\t\t\t{\n\t\t\t\t\t\t++wzz;\n\t\t\t\t\t\tif(wzz==100001)wzz=1;\n\t\t\t\t\t\tdl[wzz]=where;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\to_o=side[o_o].next;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)ball[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tx=read();y=read();z=read();\n\t\tif(z==1)//\u5355\u5411\u8fb9\u53ea\u7528\u5b58\u4e00\u6b21\uff0c\u53cc\u5411\u8fb9\u5219\u8981\u5b58\u4e24\u6b21 \n\t\t{\n\t\t\tside[i].to=y;fside[i].to=x;\n\t\t\tif(ls1[x][0]==0)ls1[x][0]=i;\n\t\t\tif(ls1[x][1]!=0)side[ls1[x][1]].next=i;\n\t\t\tls1[x][1]=i;\n\t\t\tif(ls2[y][0]==0)ls2[y][0]=i;\n\t\t\tif(ls2[y][1]!=0)fside[ls2[y][1]].next=i;\n\t\t\tls2[y][1]=i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tside[i].to=y;fside[i].to=x;\n\t\t\tif(ls1[x][0]==0)ls1[x][0]=i;\n\t\t\tif(ls1[x][1]!=0)side[ls1[x][1]].next=i;\n\t\t\tls1[x][1]=i;\n\t\t\tif(ls2[y][0]==0)ls2[y][0]=i;\n\t\t\tif(ls2[y][1]!=0)fside[ls2[y][1]].next=i;\n\t\t\tls2[y][1]=i;\n\t\t\t++i;++m;\n\t\t\tside[i].to=x;fside[i].to=y;\n\t\t\tif(ls1[y][0]==0)ls1[y][0]=i;\n\t\t\tif(ls1[y][1]!=0)side[ls1[y][1]].next=i;\n\t\t\tls1[y][1]=i;\n\t\t\tif(ls2[x][0]==0)ls2[x][0]=i;\n\t\t\tif(ls2[x][1]!=0)fside[ls2[x][1]].next=i;\n\t\t\tls2[x][1]=i;\n\t\t}\n\t}\n\tltsc();\n\tspfa();\n\tprintf(\"%d\",ans);\n}\n```\n(\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\uff0c\u6709\u4e0d\u597d\u7684\u5730\u65b9\u53ef\u4ee5\u968f\u65f6\u6307\u51fa\uff0cthanks)",
        "postTime": 1541389977,
        "uid": 104581,
        "name": "kkk\u7684\u5c0f\u8214\u72d7",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "[**\u9898\u76ee\u4f20\u9001\u95e8**](https://www.luogu.org/problem/P1073)\n\n[**cnblog\u5ba3\u4f20**](https://www.cnblogs.com/Paranoid-LS)\n\n\u9898\u610f\uff1a$n$\u4e2a\u57ce\u5e02\uff0c$m$\u6761\u8fb9\uff08\u5355\u5411\u6216\u53cc\u5411\uff09\n\n\u3000\u3000\u3000\u6bcf\u4e2a\u57ce\u5e02\u5bf9\u4e8e\u6c34\u6676\u7403\u6709\u4e00\u4e2a\u4ef7\u683c\uff08\u4e70\u7684\u4ef7\u683c\u4e0e\u5356\u7684\u4ef7\u683c\u76f8\u7b49\uff09\n\n\u3000\u3000\u3000\u73b0\u5728\u4ece$1$\u8d70\u5230$n$\uff0c\u53ef\u91cd\u590d\u7ecf\u8fc7\u57ce\u5e02\uff0c\n\n\u3000\u3000\u3000\u95ee\u80fd\u8d5a\u5230\u7684\u6700\u5927\u5dee\u4ef7\uff08\u5728\u6700\u5c0f\u7684\u5730\u65b9\u4e70\uff0c\u6700\u5927\u7684\u5730\u65b9\u5356\uff0c\u4e14\u53ea\u8fdb\u884c\u4e00\u6b21\u4e70\u5356\uff09\n\n\u3000\u3000\u3000\u8f93\u5165\u8fb9$a, b, c$\u8868\u793aa\u5230b\u6709($c=1$ \u5355\u5411 $c=2$\u53cc\u5411)\u200b\u8fb9\n\n\u9898\u89e3:\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u53ea\u7528\u5230DFS\u7684\u7b97\u6cd5\n\n\u9898\u76ee\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u56fe\u4e2d\u627e\u4e24\u4e2a\u70b9\u6743\u5dee\u503c\u6700\u5927\u7684\u70b9\n\n\u8fd9\u4e24\u4e2a\u70b9\u8981\u4fdd\u8bc1\u4ece$1$\u5230$n$\u904d\u5386\u65f6\u5148\u904d\u5386\u5230\u70b9\u6743\u5c0f\u7684\u70b9\uff0c\u518d\u904d\u5386\u5230\u70b9\u6743\u5927\u7684\u70b9\u3002\n\n\u8bbe$maxl[i]$\u4ee3\u8868\u4ecei\u5230\u7ec8\u70b9\u80fd\u5230\u7684\u6700\u5927\u7684\u70b9\n\n\u8bbe$minl[i]$\u4ee3\u8868\u4ece\u8d77\u70b9\u5230i\u80fd\u8d70\u5230\u7684\u6700\u5c0f\u7684\u70b9\n\n\u6b63\u5411\u5efa\u56feDFS\u6c42$minl$\n\n\u53cd\u5411\u5efa\u56feDFS\u6c42$maxl$\n\n\u6700\u540e$ans = max^n_{i=1}(maxl[i]-minl[i])$\n\n> \u6ce8\uff1a\u5728\u5efa\u56fe\u65f6\uff0c\u91c7\u7528\u7684\u662f\u4e00\u79cd\u6bd4\u8f83\u7279\u522b\u7684\u65b9\u5f0f\u3002\n>\n> \u5c06\u6240\u6709\u7684\u8fb9\u5efa\u6210\u53cc\u5411\u8fb9\u3002\n>\n> \u5176\u4e2d\u7ed9\u4e0d\u540c\u7684\u8fb9\u9644\u4e0a\u4e0d\u540c\u7684\u6743\u503c\u3002\n>\n> \u6b63\u5411\u8fb9\u8fb9\u6743\u9644$1$\uff0c\u53cd\u5411\u8fb9\u8fb9\u6743\u9644$2$\u3002\n>\n> \u53cc\u5411\u8fb9\u8fb9\u6743\u9644$3$\u3002\n>\n> \u5728DFS\u65f6\u8fdb\u884c\u5224\u65ad\u6b21\u8fb9\u662f\u5426\u53ef\u8d70\u5373\u53ef\n\ncode:\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int N = 1e5 + 5, M = 5e5 + 5;\nint ans, z, n, m, cnt;\nint head[N], to[M], nxt[M], maxl[N], minl[N], vis[N], tag[M];\nvoid add(int u, int v, int t) {\n\tto[++ cnt] = v;\n\ttag[cnt] = t;\n\tnxt[cnt] = head[u];\n\thead[u] = cnt;\n}\nvoid dfs1(int x, int v) {\n\tif(vis[x] == 1) return;\n\tvis[x] = 1;\n\tminl[x] = min(minl[x], v);\n\tfor(int i = head[x]; i ;i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif(vis[v] == 1||tag[i] == 2) continue;\n\t\tdfs1(v, minl[x]);\n\t}\n}\nvoid dfs2(int x, int v) {\n\tif(vis[x] == 1) return;\n\tvis[x] = 1;\n\tmaxl[x] = max(maxl[x], v);\n\tfor(int i = head[x]; i ;i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif(vis[v] == 1 || tag[i] == 1) continue;\n\t\tdfs2(v, maxl[x]);\n\t}\n\tans = max(ans, maxl[x] - minl[x]);\n}\nint main() {\n\tcin >> n >> m;\n\tfor(int i = 1;i <= n;i ++) cin >> minl[i], maxl[i] = minl[i];\n\tfor(int i = 1, x, y;i <= m;i ++) {\n\t\tcin >> x >> y >> z;\n\t\tif(z == 1) add(x, y, 1), add(y, x, 2);\n\t\tif(z == 2) add(x, y, 3), add(y, x, 3);\n\t}\n\tdfs1(1, minl[1]);\n\tmemset(vis, 0, sizeof(vis));\n\tdfs2(n, maxl[n]);\n\tcout << ans << endl;\n\treturn 0;\n} \n```\n\n",
        "postTime": 1568117719,
        "uid": 151852,
        "name": "Paranoid\u4e36\u79bb\u6b87",
        "ccfLevel": 6,
        "title": "P1073 \u6700\u4f18\u8d38\u6613 DFS"
    },
    {
        "content": "\u76ee\u524d\u9ad8\u8d5e\u9898\u89e3\u4f7f\u7528\u7684\u662fdp\u89e3\u6cd5\uff0c\u4f46\u662f\u4e2a\u4eba\u611f\u89c9\u5199\u7684\u4e0d\u662f\u5f88\u6e05\u695a\u3002\u56e0\u6b64\u5c1d\u8bd5\u505a\u4e00\u4e2a\u66f4\u4e3a\u660e\u4e86\u7684\u89e3\u91ca\u3002\n\n---\n\n### \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u6709\u5355\u5411\u8fb9\u4e5f\u6709\u53cc\u5411\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u4ece$1$\u5230$n$\u7684\u8def\u5f84\uff0c\u90fd\u4f1a\u6709\u4e00\u4e2a\u9014\u5f84\u7684\u6700\u5927\u6743\u503c$C_{max}$\u548c\u4e00\u4e2a\u6700\u5c0f\u6743\u503c$C_{min}$\u3002\u95ee\uff1a\u5bf9\u4e8e\u6240\u6709$(C_{max},C_{min})$\uff0c\u6700\u5927\u7684$C_{max}-C_{min}$\uff1f\n\n\uff08\u540c\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u591a\u6b21\u7ecf\u8fc7\uff09\n\n### \u601d\u8def\n\n\u6734\u7d20\u7684\u601d\u8def\u662f\u5728\u56fe\u4e0a\u7528dfs\u8fdb\u884cdp\u8f6c\u79fb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4ece1\u5230\u8be5\u8282\u70b9\u6240\u6709\u8def\u5f84\u7684\u6700\u5927\u5dee\u503c\uff0c\u7136\u540e\u6700\u540e\u8f93\u51fan\u5373\u53ef\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u67d0\u4e2a\u4e0d\u662fn\u7684\u8282\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u6761\u53cc\u5411\u8fb9\u65f6\uff0c\u5b83\u7684\u503c\u65e0\u6cd5\u8d21\u732e\u5230\u7b54\u6848\u5f53\u4e2d\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8003\u8651\u6539\u8fdb\u601d\u8def\u3002\n\n\u53ef\u4ee5\u8fdb\u4e00\u6b65\u60f3\u5230\uff0c\u4ecd\u7136\u4f7f\u7528dfs\uff0c\u4f46\u662f\u6839\u636e\u6570\u636e\u662f\u5426\u88ab\u66f4\u65b0\u6765\u51b3\u5b9a\u662f\u5426\u6269\u5c55\u5f53\u524d\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u641c\u5230\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u90fd\u68c0\u67e5\u4e00\u4e0b\u5f53\u524d\u8282\u70b9\u4f1a\u4e0d\u4f1a\u5bf9\u7b54\u6848\u505a\u51fa\u8d21\u732e\uff0c\u6216\u662f\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u9700\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u7136\u540e\u518d\u51b3\u5b9a\u662f\u5426\u6269\u5c55\u3002\n\n\u8fd9\u4e2a\u601d\u8def\u9700\u8981\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4$mina[N]$\uff0c\u8868\u793a\u4e0a\u4e00\u6b21\u6211\u4eec\u5230\u8fbe\u67d0\u4e2a\u8282\u70b9\u65f6\u7684\u6700\u5c0f\u6743\u503c\u3002\n\n\u5982\u679c\u76ee\u524d\u7684\u6700\u5c0f\u6743\u503c\u5c0f\u4e8e\u8fd9\u4e2a\u503c\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u91cd\u65b0\u6269\u5c55\u8fd9\u4e2a\u8282\u70b9\u3002\n\n\u540c\u65f6\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u503c\u51cf\u53bb\u6700\u5c0f\u6743\u503c\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u91cd\u65b0\u6269\u5c55\u3002\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u663e\u7136\u7684\u3002\n\n---\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO {\n\n\ttemplate<typename T>inline void read (T &x) {\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor (; c<'0'||c>'9'; c=getchar()) if (c=='-') f=-1;\n\t\tfor (; c>='0'&&c<='9'; c=getchar()) x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write (T x) {\n\t\tif (x<0) putchar('-'),x*=-1;\n\t\tif (x>=10) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace Project {\n\t\n\tconst int N=500500;\n\tconst int INF=2147483647;\n\t\n\tint n,m;\n\tint a[N];\n\tint cnt;\n\tint head[N];\n\tstruct node {\n\t\tint to,next;\n\t} edge[N<<1];\n\tint f[N],mina[N];\n\t\n\tinline void add (int a,int b) {\n\t\tedge[++cnt].to=b,edge[cnt].next=head[a],head[a]=cnt;\n\t}\n\tvoid dfs (int now,int fa,int minn) {\n\t\tint flag=1;\n\t\tminn=min(minn,a[now]);\n\t\tif (mina[now]>minn) mina[now]=minn,flag=0;\n\t\tif (f[now]<max(f[fa],a[now]-minn)) f[now]=max(f[fa],a[now]-minn),flag=0;\n\t\tif (flag) return;\n\t\tfor (register int i=head[now]; i; i=edge[i].next) {\n\t\t\tint to=edge[i].to;\n\t\t\tdfs(to,now,minn);\n\t\t}\n\t}\n\n\tinline void MAIN () {\n\t\tread(n),read(m);\n\t\tfor (register int i=1; i<=n; ++i) read(a[i]),mina[i]=INF;\n\t\tfor (register int i=1; i<=m; ++i) {\n\t\t\tint x,y,z;\n\t\t\tread(x),read(y),read(z);\n\t\t\tadd(x,y);\n\t\t\tif (z==2) add(y,x);\n\t\t}\n\t\tdfs(1,0,INF);\n\t\twrite(f[n]);\n\t}\n\t\n}\n\nint main () {\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tProject::MAIN();\n}\n\n```",
        "postTime": 1563265897,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e0btarjan\u7684\u9898\u89e3\uff0c\u611f\u89c9\u5927\u5bb6\u5199\u7684\u597d\u50cf\u90fd\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u6765\u8bf4\u4e0b\u6211\u7684\u601d\u8def\uff0c~~\u4ee3\u7801\u53bb\u6389\u5feb\u8bfb\u4e0d\u523070\u884c\u3002\u3002\u3002~~\n\n\u9996\u5148\u6211\u4eec\u660e\u786e\u9898\u610f\uff0c\u9898\u76ee\u8981\u6c42\u627e\u5230\u4e00\u6761\u4ece\u70b91\u5f00\u59cb\u7684\u4e00\u5b9a\u5230\u70b9n\u7684\u8def\u7ebf\u8d5a\u53d6\u65c5\u8d39\u6700\u591a\uff0c\u7531\u4e8e\u56fe\u6709\u73af\uff0c\u6211\u4eec\u9700\u8981\u7f29\u5b8c\u70b9\u518dDP\uff0c\u7f29\u70b9\u540e\u7b54\u6848\u5c31\u53d8\u6210\u4e86\u518dDAG\u4e0a\u627e\u4e00\u6761\u4ece\u70b91\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u5230\u70b9n\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u8def\u5f84\u8d5a\u53d6\u7684\u65c5\u8d39\u6700\u591a\u3002\n\n\u9996\u5148\u6211\u4eec\u627e\u5230\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u8def\u5f84\u5fc5\u987b\u4ece\u70b91\u5f00\u59cb\u5230\u70b9n\u7ed3\u675f\uff0c\u6240\u4ee5\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u503c\u53ef\u4ee5\u7531\u5b83\u524d\u9762\u7684\u4ece\u70b91\u8fc7\u6765\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u66ff\u4ee3\u3002\n\n\u8fd9\u6837\u62d3\u6251\u6392\u5e8f\u65f6 dp\u516c\u5f0f\u5c31\u53d8\u6210\u4e86\uff08x\u662f\u5f53\u524d\u70b9\uff0cy\u662fx\u6307\u5411\u7684\u70b9\uff09\uff1a\n\nif\uff08x\u662f\u4ece\u70b91\u8fc7\u6765\u7684\u8def\u5f84\uff09{\n\n\t    y\u6700\u5c0f\u503c=min\uff08x\u6700\u5c0f\u503c\uff0cy\u6700\u5c0f\u503c\uff09\uff1b\n\n\t    dp[y]=max(dp[x],y\u6700\u5927\u503c-y\u6700\u5c0f\u503c\uff0cdp[y]);\n\n}\n\n\u521d\u59cb\u5316\n\ndp[1\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cfid]=\uff08\"1\"\u6700\u5927\u503c-\"1\"\u6700\u5c0f\u503c\uff09\n\n\u56e0\u4e3a\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c~~\u524d\u9762\u7684tarjan\u9898\u89e3\u6ca1\u7279\u5224\u8fd9\u4e2a\u3002\u3002\u3002~~\u3002\n\n\u8fd8\u6709\u5c31\u662f\u5b58\u8fb9\u7684\u5904\u7406\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rg register\ninline int read(){\n\trg char ch=getchar();\n\trg int x=0,f=0;\n\twhile(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nint head[100010],ver[1000050],nxt[1000050],tot,ans;\nint dfn[100010],low[100010],sccnum[100010],cnt,scccnt,maxn[100010],minn[100010];\nint s[100010],stop,a[100010],n,m;\nint du[100010],xl[1000010],yl[1000010];\nint work[100010],dp[100010];\ninline void add(int &x,int &y){\n\tver[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++cnt;s[stop++]=x;\n\tfor(int y,i=head[x];i;i=nxt[i]){\n\t\ty=ver[i];\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}else if(!sccnum[y]) low[x]=min(low[x],dfn[y]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\t++scccnt;\n\t\tdo{\n\t\t\tsccnum[s[--stop]]=scccnt;\n\t\t\tmaxn[scccnt]=max(maxn[scccnt],a[s[stop]]);\n\t\t\tminn[scccnt]=min(minn[scccnt],a[s[stop]]);\n\t\t}while(s[stop]!=x);\n\t}\n}\nvoid topu(){\n\tqueue<int> q;\n\twork[sccnum[1]]=1;\n\tdp[sccnum[1]]=max(dp[sccnum[1]],maxn[sccnum[1]]-minn[sccnum[1]]);\n\tfor(int i=1;i<=scccnt;++i) if(!du[i]) q.push(i);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int y,i=head[x];i;i=nxt[i]){\n\t\t\ty=ver[i];\n\t\t\t--du[y];\n\t\t\tif(work[x]){\n\t\t\t\tminn[y]=min(minn[y],minn[x]);\n\t\t\t\twork[y]=1;\n\t\t\t\tdp[y]=max(dp[y],max(maxn[y]-minn[y],dp[x]));\n\t\t\t}\n\t\t\tif(!du[y]) q.push(y);\n\t\t}\n\t}\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;++i) a[i]=read();\n\tint now=m;\n\tfor(int x,y,op,j=1;j<=m;++j){\n\t\txl[j]=read(),yl[j]=read();op=read();\n\t\tadd(xl[j],yl[j]);\n\t\tif(op==2) add(yl[j],xl[j]),++now,xl[now]=yl[j],yl[now]=xl[j];\n\t}\n\tm=now;\n\tmemset(minn,0x3f,sizeof minn);\n\tfor(int i=1;i<=n;++i) if(!dfn[i]) tarjan(i);\n\tmemset(head,0,sizeof head);tot=0;\n\tfor(int i=1;i<=m;++i) if(sccnum[xl[i]]!=sccnum[yl[i]]) add(sccnum[xl[i]],sccnum[yl[i]]),++du[sccnum[yl[i]]];\n\ttopu();\n\tcout<<dp[sccnum[n]]<<endl;\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1557809502,
        "uid": 121618,
        "name": "Accoty_AM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011Tarjan\u7f29\u70b9+DP\uff08\u8d85\u77ed\uff09"
    },
    {
        "content": "\u505a\u8fd9\u4e2a\u9898\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u66b4\u529b\u679a\u4e3e\u70b9bfs\uff0c\u663e\u7136\u884c\u4e0d\u901a\u3002\n\u6c42\u52a9\u5bf9\u9762\u673a\u623f\u5218\u961f\u5927\u795e\uff0c\u5218\u961f\u8f7b\u63cf\u6de1\u5199\u51e0\u53e5\u8bdd\uff0c\u70b9\u7834\u4e86\u8fd9\u9053\u9898\u7684\u7384\u673a\u3002\n\n\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e9b\u70b9\u548c\u70b9\u6743\u8fd8\u6709\u4e00\u4e9b\u8fb9\uff08\u53cc\u5411\u5355\u5411\u90fd\u6709\uff09\uff0c\u95ee\u600e\u4e48\u8d70\u4f7f\u5927\u51cf\u5c0f\u7684\u503c\u6700\u5927\uff1f\n\n\u6b63\u89e3Tarjan\u6216\u8005dp\uff0c\u4f46\u663e\u7136\u6211\u8fd9\u79cd\u849f\u84bb\u90fd\u4e0d\u4f1a(\u6bd5\u7adf\u6211\u624d\u662f\u5b66OI\u534a\u5e74\u7684\u840c\u65b0\uff09\uff0c\u7ecf\u8fc7\u5218\u961f\u7684\u6307\u70b9\uff0c\u60f3\u51fa\u4e00\u79cd\u53ef\u884c\u7684\u529e\u6cd5\uff1a\u53cc\u5411spfa\u3002\n\n\u601d\u8def\uff1a\u7b2c\u4e00\u904d\u6b63\u7740\u8dd1\uff0c\u627e\u51fa\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u5c3d\u53ef\u80fd\u5f97\u5c0f\uff0c\u7528\u6570\u7ec4minv\u50a8\u5b58\u3002\u7b2c\u4e8c\u904d\u53cd\u5411\u8dd1\uff0c\u627e\u51fa\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u5c3d\u53ef\u80fd\u5f97\u5927\uff0c\u7528\u6570\u7ec4maxv\u50a8\u5b58\u3002\n\n\u5b58\u56fe\u4ec0\u4e48\u7684\u4e0d\u592a\u4f1a\u7528vector\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u5c31vans\u4e86\u3002\u6709\u4e00\u70b9\u6bd4\u8f83\u5751\u7684\u662f\u5b58\u56fe\u4e00\u5b9a\u8981\u6ce8\u610ffrom\u548cto\uff01\n\nCode:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint ans=0;\nqueue<int> q;\nstruct edge\n{\n\tint next,to;\n};\nint head1[1000005],cnt1;\nedge e1[1000100];\ninline void add1(int from,int to)\n{\n\te1[++cnt1].next=head1[from];\n\te1[cnt1].to=to;\n\thead1[from]=cnt1;\n}\nint head2[1000005],cnt2;\nedge e2[1000100];\ninline void add2(int from,int to)\n{\n\te2[++cnt2].next=head2[from];\n\te2[cnt2].to=to;\n\thead2[from]=cnt2;\n}\nint v[1000005];\nint maxv[1000005],minv[1000005];\ninline void spfa1()\n{\n\tqueue<int> q;\n\tfor (int i=1;i<=n;i++) minv[i]=0x3f3f3f3f;\n\tq.push(1);\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tminv[now]=min(minv[now],v[now]);\n\t\tfor (int i=head1[now];i;i=e1[i].next)\n\t\t{\n\t\t\tif (minv[now]<minv[e1[i].to])\n\t\t\t\tminv[e1[i].to]=minv[now],q.push(e1[i].to);\n\t\t}\n\t}\n}\ninline void spfa2()\n{\n\tqueue<int> q;\n\tq.push(n);\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tmaxv[now]=max(maxv[now],v[now]);\n\t\tfor (int i=head2[now];i;i=e2[i].next)\n\t\t{\n\t\t\tif (maxv[now]>maxv[e2[i].to])\n\t\t\t\tmaxv[e2[i].to]=maxv[now],q.push(e2[i].to);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor (int i=1;i<=n;i++) cin>>v[i];\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint fr,to,f;\n\t\tcin>>fr>>to>>f;\n\t\tif (f==1)\n\t\tadd1(fr,to),add2(to,fr);\n\t\tif (f==2)\n\t\tadd1(fr,to),add2(fr,to),add1(to,fr),add2(to,fr);\n\t}\n\tspfa1();spfa2();\n\tfor (int i=1;i<=n;i++)\n\t\tans=max(ans,maxv[i]-minv[i]);\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1577706203,
        "uid": 235013,
        "name": "OceanLiu",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P1073 \u6700\u4f18\u8d38\u6613"
    },
    {
        "content": "\n2018.11.3\u66f4\u65b0\n\n\u7ecf[xunzhen](https://www.luogu.org/space/show?uid=9612)\u5927\u4f6c\u6307\u51fa\u9519\u8bef\uff0c\u53d1\u73b0\u5728\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u7701\u7565\u4e86\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\uff1aflag[y]=0\uff0c\u76ee\u524d\u5df2\u66f4\u6b63\u3002\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u6307\u51fa\u9519\u8bef\uff0c\u4e00\u8d77\u63a2\u8ba8\uff0c\u8fdb\u6b65\n\n-------------\n2019.9.30\u66f4\u65b0\n\n\u52a0\u5165latex\uff0c\u4f18\u5316\u89c2\u611f\uff08\u867d\u7136\u6ca1\u4eba\u770b\uff09\n\n---------\n\n\u8fd9\u9053\u9898\u662f\u6211\u4eec\u521a\u5b66**\u6700\u77ed\u8def**\u548c**\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf**\u7684\u8003\u8bd5\u9898\uff0c\u6240\u4ee5\u60f3\u7684\u65f6\u5019\u76f4\u63a5\u5c31\u5954\u7740\u8fd9\u4e2a\u65b9\u5411\u53bb\u4e86\u3002\u4e0b\u9762\u662f\u672c\u849f\u84bb\u7684\u601d\u8def\uff08\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u6392\u7248\u592a\u4e11\uff0c\u8fd8\u8bf7\u5404\u4f4d\u795e\u7287\u89c1\u8c05\uff09\n\n------------\n### 1. \u9884\u5904\u7406\n\u8981\u8dd1\u6700\u77ed\u8def\uff08\u8fd9\u9053\u9898\u5b9e\u9645\u662f\u6700\u957f\u8def\uff09\uff0c\u9996\u5148\u6211\u4eec\u8981\u5efa\u4e00\u4e2a\u56fe\u3002\u800c\u8fd9\u9053\u9898\u6ca1\u6709\u8fb9\u6743\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u5efa\u8fb9\u3002\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u57ce\u5e02\u7684\u6c34\u6676\u7403\u6709\u81ea\u5df1\u7684\u4ef7\u683c\uff0c\u6240\u4ee5\u5982\u679c\u662f\u4ece\u4f4e\u4ef7\u8d70\u5230\u9ad8\u4ef7\uff0c\u6211\u4eec**\u53ef\u4ee5\u8d5a\u94b1\uff0c\u90a3\u4e48\u5c31\u5efa\u4e00\u6761\u6b63\u8fb9**\uff0c\u800c\u5982\u679c**\u4e0d\u80fd\u8d5a\u94b1\uff0c\u90a3\u5c31\u5efa\u4e00\u6761\u4e3a0\u7684\u8fb9**\u3002\n```cpp\nvoid addedge(int x,int y,int z){\n    e[++cnt].next=h[x];\n    e[cnt].to=y;\n    e[cnt].value=z;\n    h[x]=cnt;\n}//\u524d\u5411\u661f\u6807\u51c6\u5199\u6cd5\n```\n```cpp\nfor(int i=1;i<=n;i++) v[i]=read();\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        a=read();\n        b=read();\n        c=read();\n        addedge(a,b,max(0,v[b]-v[a]));//\u53ef\u4ee5\u8d5av[b]-v[a]\u7684\u94b1\u6216\u8005\u8d5a\u4e0d\u4e86\u7403\n        if(c==2) addedge(b,a,max(0,v[a]-v[b]));//\u540c\u4e0a\n    }\n```\n### 2. \u6838\u5fc3\u7b97\u6cd5\uff08spfa\uff09\n\u73b0\u5728\u56fe\u5df2\u7ecf\u5efa\u597d\u4e86\uff0c\u73b0\u5728\u5e94\u8be5\u8dd1\u4e00\u904d~~\u6700\u77ed\u8def~~\u6700\u957f\u8def\u4e86\u3002\u800c\u6b64\u9898\u9700\u8981\u6ce8\u610f\u7684\u662f**\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\u8d38\u6613**\uff0c\u8fd9\u4e5f\u662f\u548c\u666e\u901a\u7684\u6700\u957f\u8def\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u591a\u5f00\u4e86\u4e00\u4e2a$flag$**\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u8fdb\u884c\u8d38\u6613**\u3002\u5f53\u5df2\u7ecf\u8fdb\u884c\u4e86\u8d38\u6613\uff0c\u4e5f\u5c31\u662f$flag[]==1$\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u6309\u7167~~\u6700\u77ed\u8def~~\u6700\u957f\u8def\u7684\u5199\u6cd5\uff08$d[y]=d[x]+e[i].value$),\u800c\u662f\u5728$d[x]$\u548c$e[i].value$\u4e4b\u95f4\u505a\u51fa\u6289\u62e9\uff0c\u9009\u62e9\u6700\u5927\u503c\u7ee7\u627f\u4e0b\u6765\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c**\u9009\u62e9\u4e86$e[i].value$\u5c31\u610f\u5473\u7740\u9009\u62e9\u4e86\u65b0\u7684\u8d38\u6613**\uff0c\u800c\u6b64\u65f6\u53ef\u4ee5\u770b\u4f5c\u6ca1\u6709\u5356\u51fa\uff0c$flag[y]=0$\uff0c\u800c\u82e5\u662f\u9009\u62e9\u4e86$d[x]$,**\u8bf4\u660e\u662f\u7ee7\u627f\u4e4b\u524d\u7684\u8d38\u6613\uff0c\u5df2\u7ecf\u5356\u6389**\uff08\u7ee7\u627f\u662f\u4e3a\u4e86\u4f20\u4e0b\u53bb\u5230\u7ec8\u70b9\uff09\uff0c\u6240\u4ee5$flag[y]=1$\u3002\n### 3. \u5b8c\u7f8e\u6536\u5c3e\n\u5230\u4e86\u73b0\u5728\uff0c\u56fe\u5df2\u7ecf\u5efa\u597d\u4e86\uff0cspfa\u4e5f\u5199\u597d\u4e86\uff0c\u62fc\u8d77\u6765\u6700\u540e$d[n]$\u5c31\u662f\u6211\u4eec\u7684\u7b54\u6848\u3002\u6700\u540e\u6765\u4e00\u6ce2\u5b8c\u6574\u4ee3\u7801\u3002\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#define inf 0x7fffffff/2\nusing namespace std;\ninline int read(){\n    char c;\n    int x=0,flag=1;\n    for(c=getchar();c<'0'||c>'9';c=getchar()) if(c=='-') flag=-1;\n    for(;c<='9'&&c>='0';c=getchar()) x=x*10+c-'0';\n    return x*flag;\n}//\u5feb\u8bfb\nstruct edge{\n    int to,next,value;\n};\nedge e[1000005];\nint n,m,v[100005],cnt,h[100005],vis[100005],flag[100005],d[100005];\nvoid addedge(int x,int y,int z){\n    e[++cnt].next=h[x];\n    e[cnt].to=y;\n    e[cnt].value=z;\n    h[x]=cnt;\n}\nqueue<int> q;\nvoid Spfa(){\n    for(int i=1;i<=n;i++) d[i]=-inf;\n    d[1]=0;\n    q.push(1);\n    vis[1]=1;\n    while(!q.empty()){\n        int k=q.front();\n        vis[k]=0;\n        for(int i=h[k];i;i=e[i].next){\n            int y=e[i].to;\n            if(!flag[k]){\n                if(d[y]<d[k]+e[i].value){\n                    d[y]=d[k]+e[i].value;\n                    if(!vis[y]){vis[y]=1;q.push(y);}\n                    if(v[y]<v[k]) flag[y]=1;\n                }\n            }\n            else{\n                if(d[y]<d[k]){\n                    d[y]=d[k];\n                    if(!vis[y]){vis[y]=1;q.push(y);}\n                    flag[y]=1;//\u7ee7\u627f\u524d\u9762\u7684\u8d38\u6613\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6c34\u6676\u7403\u5728\u524d\u9762\u5df2\u7ecf\u5356\u6389\uff0c\u6ca1\u6709\u4f20\u5230\u8fd9\u91cc\n                }\n                if(d[y]<e[i].value){\n                    d[y]=e[i].value;//\u5f00\u59cb\u65b0\u7684\u8d38\u6613\n                    flag[y]=0;\n                    if(!vis[y]){vis[y]=1;q.push(y);}\n                }\n            }\n        }\n        q.pop();\n    }\n}\nint main(){\n    n=read();\n    m=read();\n    for(int i=1;i<=n;i++) v[i]=read();\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        a=read();\n        b=read();\n        c=read();\n        addedge(a,b,max(0,v[b]-v[a]));\n        if(c==2) addedge(b,a,max(0,v[a]-v[b]));\n    }\n    Spfa();\n    cout<<d[n];\n}\n```\n\n\n\n",
        "postTime": 1535533733,
        "uid": 85350,
        "name": "\u5e84\u5e84\u5e84\u5e84\u4e5c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "## # **\u9898\u76ee\u63cf\u8ff0**## \n\nC \u56fd\u6709 n \u4e2a\u5927\u57ce\u5e02\u548c m \u6761\u9053\u8def\uff0c\u6bcf\u6761\u9053\u8def\u8fde\u63a5\u8fd9 n \u4e2a\u57ce\u5e02\u4e2d\u7684\u67d0\u4e24\u4e2a\u57ce\u5e02\u3002\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6700\u591a\u53ea\u6709\u4e00\u6761\u9053\u8def\u76f4\u63a5\u76f8\u8fde\u3002\u8fd9 m \u6761\u9053\u8def\u4e2d\u6709\u4e00\u90e8\u5206\u4e3a\u5355\u5411\u901a\u884c\u7684\u9053\u8def\uff0c\u4e00\u90e8\u5206\u4e3a\u53cc\u5411\u901a\u884c\u7684\u9053\u8def\uff0c\u53cc\u5411\u901a\u884c\u7684\u9053\u8def\u5728\u7edf\u8ba1\u6761\u6570\u65f6\u4e5f\u8ba1\u4e3a 1 \u6761\u3002\n\nC \u56fd\u5e45\u5458\u8fbd\u9614\uff0c\u5404\u5730\u7684\u8d44\u6e90\u5206\u5e03\u60c5\u51b5\u5404\u4e0d\u76f8\u540c\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u540c\u4e00\u79cd\u5546\u54c1\u5728\u4e0d\u540c\u57ce\u5e02\u7684\u4ef7\u683c\u4e0d\u4e00\u5b9a\u76f8\u540c\u3002\u4f46\u662f\uff0c\u540c\u4e00\u79cd\u5546\u54c1\u5728\u540c\u4e00\u4e2a\u57ce\u5e02\u7684\u4e70\u5165\u4ef7\u548c\u5356\u51fa\u4ef7\u59cb\u7ec8\u662f\u76f8\u540c\u7684\u3002\n\n\u5546\u4eba\u963f\u9f99\u6765\u5230 C \u56fd\u65c5\u6e38\u3002\u5f53\u4ed6\u5f97\u77e5\u540c\u4e00\u79cd\u5546\u54c1\u5728\u4e0d\u540c\u57ce\u5e02\u7684\u4ef7\u683c\u53ef\u80fd\u4f1a\u4e0d\u540c\u8fd9\u4e00\u4fe1\u606f\u4e4b\u540e\uff0c\u4fbf\u51b3\u5b9a\u5728\u65c5\u6e38\u7684\u540c\u65f6\uff0c\u5229\u7528\u5546\u54c1\u5728\u4e0d\u540c\u57ce\u5e02\u4e2d\u7684\u5dee\u4ef7\u8d5a\u56de\u4e00\u70b9\u65c5\u8d39\u3002\u8bbe C \u56fd n \u4e2a\u57ce\u5e02\u7684\u6807\u53f7\u4ece 1~ n\uff0c\u963f\u9f99\u51b3\u5b9a\u4ece 1 \u53f7\u57ce\u5e02\u51fa\u53d1\uff0c\u5e76\u6700\u7ec8\u5728 n \u53f7\u57ce\u5e02\u7ed3\u675f\u81ea\u5df1\u7684\u65c5\u884c\u3002\u5728\u65c5\u6e38\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u57ce\u5e02\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u591a\u6b21\uff0c\u4f46\u4e0d\u8981\u6c42\u7ecf\u8fc7\u6240\u6709 n \u4e2a\u57ce\u5e02\u3002\u963f\u9f99\u901a\u8fc7\u8fd9\u6837\u7684\u8d38\u6613\u65b9\u5f0f\u8d5a\u53d6\u65c5\u8d39\uff1a\u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u7ecf\u8fc7\u7684\u57ce\u5e02\u4e70\u5165\u4ed6\u6700\u559c\u6b22\u7684\u5546\u54c1\u2015\u2015\u6c34\u6676\u7403\uff0c\u5e76\u5728\u4e4b\u540e\u7ecf\u8fc7\u7684\u53e6\u4e00\u4e2a\u57ce\u5e02\u5356\u51fa\u8fd9\u4e2a\u6c34\u6676\u7403\uff0c\u7528\u8d5a\u53d6\u7684\u5dee\u4ef7\u5f53\u505a\u65c5\u8d39\u3002\u7531\u4e8e\u963f\u9f99\u4e3b\u8981\u662f\u6765 C \u56fd\u65c5\u6e38\uff0c\u4ed6\u51b3\u5b9a\u8fd9\u4e2a\u8d38\u6613\u53ea\u8fdb\u884c\u6700\u591a\u4e00\u6b21\uff0c\u5f53\u7136\uff0c\u5728\u8d5a\u4e0d\u5230\u5dee\u4ef7\u7684\u60c5\u51b5\u4e0b\u4ed6\u5c31\u65e0\u9700\u8fdb\u884c\u8d38\u6613\u3002\n\n\u5047\u8bbe C \u56fd\u6709 5 \u4e2a\u5927\u57ce\u5e02\uff0c\u57ce\u5e02\u7684\u7f16\u53f7\u548c\u9053\u8def\u8fde\u63a5\u60c5\u51b5\u5982\u4e0b\u56fe\uff0c\u5355\u5411\u7bad\u5934\u8868\u793a\u8fd9\u6761\u9053\u8def\u4e3a\u5355\u5411\u901a\u884c\uff0c\u53cc\u5411\u7bad\u5934\u8868\u793a\u8fd9\u6761\u9053\u8def\u4e3a\u53cc\u5411\u901a\u884c\u3002\n\n\n\n\u5047\u8bbe 1~n \u53f7\u57ce\u5e02\u7684\u6c34\u6676\u7403\u4ef7\u683c\u5206\u522b\u4e3a 4\uff0c3\uff0c5\uff0c6\uff0c1\u3002\n\n\u963f\u9f99\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u4e00\u6761\u7ebf\u8def\uff1a1->2->3->5\uff0c\u5e76\u5728 2 \u53f7\u57ce\u5e02\u4ee5 3 \u7684\u4ef7\u683c\u4e70\u5165\u6c34\u6676\u7403\uff0c\u5728 3\u53f7\u57ce\u5e02\u4ee5 5 \u7684\u4ef7\u683c\u5356\u51fa\u6c34\u6676\u7403\uff0c\u8d5a\u53d6\u7684\u65c5\u8d39\u6570\u4e3a 2\u3002\n\n\u963f\u9f99\u4e5f\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u4e00\u6761\u7ebf\u8def 1->4->5->4->5\uff0c\u5e76\u5728\u7b2c 1 \u6b21\u5230\u8fbe 5 \u53f7\u57ce\u5e02\u65f6\u4ee5 1 \u7684\u4ef7\u683c\u4e70\u5165\u6c34\u6676\u7403\uff0c\u5728\u7b2c 2 \u6b21\u5230\u8fbe 4 \u53f7\u57ce\u5e02\u65f6\u4ee5 6 \u7684\u4ef7\u683c\u5356\u51fa\u6c34\u6676\u7403\uff0c\u8d5a\u53d6\u7684\u65c5\u8d39\u6570\u4e3a 5\u3002\n\n\u73b0\u5728\u7ed9\u51fa n \u4e2a\u57ce\u5e02\u7684\u6c34\u6676\u7403\u4ef7\u683c\uff0cm \u6761\u9053\u8def\u7684\u4fe1\u606f\uff08\u6bcf\u6761\u9053\u8def\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u57ce\u5e02\u7684\u7f16\u53f7\u4ee5\u53ca\u8be5\u6761\u9053\u8def\u7684\u901a\u884c\u60c5\u51b5\uff09\u3002\u8bf7\u4f60\u544a\u8bc9\u963f\u9f99\uff0c\u4ed6\u6700\u591a\u80fd\u8d5a\u53d6\u591a\u5c11\u65c5\u8d39\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b 2 \u4e2a\u6b63\u6574\u6570 n \u548c m\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u57ce\u5e02\u7684\u6570\u76ee\u548c\u9053\u8def\u7684\u6570\u76ee\u3002\n\n\u7b2c\u4e8c\u884c n \u4e2a\u6b63\u6574\u6570\uff0c\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u6309\u6807\u53f7\u987a\u5e8f\u5206\u522b\u8868\u793a\u8fd9 n \u4e2a\u57ce\u5e02\u7684\u5546\u54c1\u4ef7\u683c\u3002\n\n\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u6709 3 \u4e2a\u6b63\u6574\u6570\uff0cx\uff0cy\uff0cz\uff0c\u6bcf\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u5982\u679c z=1\uff0c\u8868\u793a\u8fd9\u6761\u9053\u8def\u662f\u57ce\u5e02 x \u5230\u57ce\u5e02 y \u4e4b\u95f4\u7684\u5355\u5411\u9053\u8def\uff1b\u5982\u679c z=2\uff0c\u8868\u793a\u8fd9\u6761\u9053\u8def\u4e3a\u57ce\u5e02 x \u548c\u57ce\u5e02y \u4e4b\u95f4\u7684\u53cc\u5411\u9053\u8def\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u6587\u4ef6 trade.out \u5171 1 \u884c\uff0c\u5305\u542b 1 \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u591a\u80fd\u8d5a\u53d6\u7684\u65c5\u8d39\u3002\u5982\u679c\u6ca1\u6709\u8fdb\u884c\u8d38\u6613\uff0c\u5219\u8f93\u51fa 0\u3002\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \n5 5 \n4 3 5 6 1 \n1 2 1 \n1 4 1 \n2 3 2 \n3 5 1 \n4 5 2 \n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a\n5\n\u8bf4\u660e\n\n\u3010\u6570\u636e\u8303\u56f4\u3011\n\n\u8f93\u5165\u6570\u636e\u4fdd\u8bc1 1 \u53f7\u57ce\u5e02\u53ef\u4ee5\u5230\u8fbe n \u53f7\u57ce\u5e02\u3002\n\n\u5bf9\u4e8e 10%\u7684\u6570\u636e\uff0c1\u2264n\u22646\u3002\n\n\u5bf9\u4e8e 30%\u7684\u6570\u636e\uff0c1\u2264n\u2264100\u3002\n\n\u5bf9\u4e8e 50%\u7684\u6570\u636e\uff0c\u4e0d\u5b58\u5728\u4e00\u6761\u65c5\u6e38\u8def\u7ebf\uff0c\u53ef\u4ee5\u4ece\u4e00\u4e2a\u57ce\u5e02\u51fa\u53d1\uff0c\u518d\u56de\u5230\u8fd9\u4e2a\u57ce\u5e02\u3002\n\n\u5bf9\u4e8e 100%\u7684\u6570\u636e\uff0c1\u2264n\u2264100000\uff0c1\u2264m\u2264500000\uff0c1\u2264x\uff0cy\u2264n\uff0c1\u2264z\u22642\uff0c1\u2264\u5404\u57ce\u5e02\n\n\u6c34\u6676\u7403\u4ef7\u683c\u2264100\u3002\n\n### NO.1 SPFA\n\n\t\u9996\u5148\u660e\u786e\u7684\u662f\u5148\u4e70\u518d\u5356\uff0c\u6240\u4ee5\u8981\u627e\u5230dis1[i] \u70b91\u5230i\u6700\u4fbf\u5b9c\u7684\u4e70\u5165\u4ef7\uff0c\n    dis2 \u70b9i\u5230n\u6700\u8d35\u7684\u5356\u51fa\u4ef7\uff0c\u6700\u540e\u7b54\u6848\u4e3a  max(dis2[i] - dis1[i])\n    \n###### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<stack>\n#define MAXN 1000000\n#define ri register int\nusing namespace std;\n\nint v[MAXN];\nint head[MAXN],nxt[2*MAXN],cnt = 0;\nint head1[MAXN],nxt1[2*MAXN];\nint a,b,c,n,m;\nint vis[MAXN],dis1[MAXN],dis2[MAXN];\n\nstruct edge\n{\n\tint f,to,c;\n}qwq[2*MAXN],pre[2*MAXN];\n\nvoid re(int &x)\n{\n\tx = 0;\n\tchar ch = getchar();\n\tint b = 0;\n\twhile(ch < '0' || ch > '9'){\n\t\tif(ch == '-') b = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9'){\n\t\tx = (x << 1) + (x << 3) + ch - '0';\n\t\tch = getchar();\n\t}\n\tif(b == -1)\n\t\tx *= -1;\n}\nvoid build(int ff,int tt,int cc)\n{\n\tqwq[++ cnt] = (edge){ff,tt,cc};\n\tnxt[cnt] = head[ff];\n\thead[ff] = cnt;\n\t\n\tpre[cnt] = (edge){tt,ff,cc};\n\tnxt1[cnt] = head1[tt];\n\thead1[tt] = cnt;\n}\nvoid spfa1()\n{\n\tqueue<int>q;\n\tdis1[1] = v[1];\n\tq.push(1);\n\tvis[1] = 1;\n\twhile(!q.empty()){\n\t\tint x = q.front();\n\t\tvis[x] = 0; q.pop();\n\t\tfor(ri i = head[x];i;i = nxt[i]){\n\t\t\tedge u = qwq[i];\n\t\t\tif(dis1[u.to] > min(dis1[x],u.c)){\n\t\t\t\tdis1[u.to] = min(dis1[x],u.c);\n\t\t\t\tif(!vis[u.to]){\n\t\t\t\t\tvis[u.to] = 1;\n\t\t\t\t\tq.push(u.to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid spfa2()\n{\n\tmemset(vis,0,sizeof(vis));\n\tqueue<int>q;\n\tdis2[n] = v[n];\n\tq.push(n);\n\tvis[n] = 1;\n\twhile(!q.empty()){\n\t\tint x = q.front();\n\t\tvis[x] = 0; q.pop();\n\t\tfor(ri i = head1[x];i;i = nxt1[i]){\n\t\t\tedge u = pre[i];\n\t\t\tif(dis2[u.to] < max(dis2[x],u.c)){\n\t\t\t\tdis2[u.to] = max(dis2[x],u.c);\n\t\t\t\tif(!vis[u.to]){\n\t\t\t\t\tvis[u.to] = 1;\n\t\t\t\t\tq.push(u.to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tre(n),re(m);\n\tfor(ri i = 1;i <= n;i ++)\n\t\tre(v[i]);\n\tfor(ri i = 1;i <= m;i ++){\n\t\tre(a),re(b),re(c);\n\t\tif(c == 1) build(a,b,v[b]);\n\t\tif(c == 2) build(a,b,v[b]),build(b,a,v[a]);\n\t}\n\tfor(ri i = 1;i <= n;i ++){\n\t\tdis1[i] = 10000;\n\t\tdis2[i] = -10000;\n\t}\n\tspfa1();\n\tspfa2();\n\tint ans = 0;\n\tfor(ri i = 1;i <= n;i ++)\n\t\tans = max(ans,dis2[i] - dis1[i]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```\n\n### NO.2 tarjan + \u62d3\u6251 + dp\n\n\t\u7531\u4e8e\u6709\u53cc\u5411\u8fb9\u7684\u5b58\u5728\uff0c\u5373\u67d0\u4e9b\u57ce\u5e02\u53ef\u4ee5\u7ecf\u8fc7\u591a\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u57ce\u5e02\u7684\u6700\u5927\u5229\u6da6\u7b97\u51fa\uff0c\u5219\u53d8\u6210\u4e86DAG\uff0cdp\u5373\u53ef\n##### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<stack>\n#include<cmath>\n#define MAXN 500000\n#define ri register int\nusing namespace std;\n\nstruct edge\n{\n\tint f,to;\n}qwq1[2*MAXN],qwq2[2*MAXN];\nint n,m,v[MAXN],a,b,c;\nint head1[MAXN],nxt1[2*MAXN],cnt1;\nint head2[MAXN],nxt2[2*MAXN],cnt2;\nint scc,col[MAXN],dfn[MAXN],low[MAXN],vis[MAXN],instack;\nint in[MAXN],dep[MAXN],cntt;\nint dp[MAXN],minc[MAXN],maxc[MAXN],mx[MAXN],mn[MAXN],maxx[MAXN];\nstack<int>s;\nqueue<int>q;\n\ninline void re(int &x)\n{\n\tx = 0;\n\tchar ch = getchar();\n\tint b = 0;\n\twhile(ch < '0' || ch > '9'){\n\t\tif(ch == '-') b = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9'){\n\t\tx = (x << 1) + (x << 3) + ch - '0';\n\t\tch = getchar();\n\t}\n\tif(b == -1)\n\t\tx *= -1;\n}\ninline void build1(int ff,int tt)\n{\n\tqwq1[++ cnt1] = (edge){ff,tt};\n\tnxt1[cnt1] = head1[ff];\n\thead1[ff] = cnt1; \n}\ninline void build2(int ff,int tt)\n{\n\tqwq2[++ cnt2] = (edge){ff,tt};\n\tnxt2[cnt2] = head2[ff];\n\thead2[ff] = cnt2; \n}\nvoid tarjan(int x)\n{\n\tdfn[x] = low[x] = ++ instack;\n\ts.push(x);\n\tvis[x] = 1;\n\tfor(ri i = head1[x];i;i = nxt1[i]){\n\t\tedge u = qwq1[i];\n\t\tif(!dfn[u.to]){\n\t\t\ttarjan(u.to);\n\t\t\tlow[x] = min(low[x],low[u.to]);\n\t\t}\n\t\telse if(vis[u.to]){\n\t\t\tlow[x] = min(low[x],dfn[u.to]);\n\t\t}\n\t}\n\tif(dfn[x] == low[x]){\n\t\tscc ++;\n\t\tint o;\n\t\twhile(s.top() != x){\n\t\t\to = s.top();\n\t\t\tvis[o] = 0;\n\t\t\tcol[o] = scc;\n\t\t\ts.pop();\n\t\t}\n\t\tvis[x] = 0;\n\t\tcol[x] = scc;\n\t\ts.pop();                   \n\t}\n}\ninline void DP()\n{\n\tmemset(minc,0x3f,sizeof(minc));\n\tminc[dep[1]] = mn[dep[1]];\n\tfor(ri i = 1;i <= cntt;i ++){\t\t//\u679a\u4e3e\u70b9\u7684\u904d\u5386\u987a\u5e8f \n\t\t\tint x = dep[i];\n\t\tfor(ri j = head2[x];j;j = nxt2[j]){\n\t\t\tint u = qwq2[j].to;\n\t\t\tminc[u] = min(minc[u],min(minc[x],mn[x]));\n\t\t\tdp[u] = max(dp[u],max(dp[x],max(maxx[u],mx[u] - minc[u])));\n\t\t}\n\t}\n\t\t\n\tprintf(\"%d\\n\",dp[col[n]]);\n}\ninline void topu()\n{\n\tfor(ri i = 1;i <= scc;i ++){\t\t//\u62d3\u6251\u6392\u5e8f\u786e\u5b9a\u70b9\u7684\u904d\u5386\u987a\u5e8f \n\t\tif(!in[i]) q.push(i);\n\t}\n\twhile(!q.empty()){\n\t\tint x = q.front();\n\t\tq.pop(); dep[++ cntt] = x;\n\t\tfor(ri i = head2[x];i;i = nxt2[i]){\n\t\t\tedge u = qwq2[i];\n\t\t\tin[u.to] --;\n\t\t\tif(!in[u.to])\n\t\t\t\tq.push(u.to);\n\t\t}\n\t}\n\tDP();\n}\nint main()\n{\n\tre(n),re(m);\n\tmemset(mn,0x3f,sizeof(mn));\n\tfor(ri i = 1;i <= n;i ++)\n\t\tre(v[i]);\n\tfor(ri i = 1;i <= m;i ++){\n\t\tre(a),re(b),re(c);\n\t\tif(c == 1) build1(a,b);\n\t\tif(c == 2) build1(a,b),build1(b,a);\n\t}\n\tfor(ri i = 1;i <= n;i ++)\n\t\tif(!dfn[i]) tarjan(i);\t\t//tarjan\u627e\u73af \n\t\t\n\t\t\n\tfor(ri i = 1;i <= n;i ++)\n\t\tfor(ri j = head1[i];j;j = nxt1[j]){\t\t//\u7f29\u70b9\uff0c\u91cd\u65b0\u5efa\u8fb9 \n\t\t\tint u = qwq1[j].to;\n\t\t\tif(col[i] != col[u]){\n\t\t\t\tbuild2(col[i],col[u]);\n\t\t\t\tin[col[u]] ++;\n\t\t\t}\n\t\t}\n\tfor(ri i = 1;i <= n;i ++){\n\t\tmx[col[i]] = max(mx[col[i]],v[i]);\t\t//\u5904\u7406\u65b0\u56fe\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u548c\u6700\u5927\u5356\u51fa\u4ef7 \n\t\tmn[col[i]] = min(mn[col[i]],v[i]);\n\t}\n\tfor(ri i = 1;i <= scc;i ++)\t\t\t\t\t \n\t\tmaxx[i] = mx[i] - mn[i];\n\ttopu();\n\t\n\treturn 0;\n}\n\n```",
        "postTime": 1526215503,
        "uid": 57687,
        "name": "littlechai",
        "ccfLevel": 0,
        "title": "P1073 \u6700\u4f18\u8d38\u6613 SPFA or tarjan + \u62d3\u6251 + dp"
    },
    {
        "content": "\u6ce8\u610f\u5230\u6c34\u6676\u7403\u4ef7\u683c\u53ea\u6709100\u79cd\uff0c\u53ef\u4ee5\u5ffd\u7565\u57ce\u5e02\uff0c**\u53ea\u5173\u6ce8\u4ef7\u683c\u4e4b\u95f4\u7684\u5173\u7cfb**\n\n\u5982\u679c\u6211\u4eec\u77e5\u9053\u67d0\u4e00\u4ef7\u683ca\uff08\u7684\u57ce\u5e02i\uff09\u6709\u5230\u8fbe\u53e6\u4e00\u4ef7\u683cb\uff08\u7684\u57ce\u5e02j\uff09\u7684\u8def\u5f84P\uff0c\u5728\u4e0d\u8003\u8651P\u662f\u5426\u7b26\u5408\u9898\u610f\u7684\u60c5\u51b5\u4e0b\uff0c\u5b58\u5728\u4e70\u5165\u4ef7\u683c\u4e3aa\u7684\u6c34\u6676\u7403\uff0c\u5356\u51fa\u4ef7\u683c\u4e3ab\u7684\u6c34\u6676\u7403\u7684\u65b9\u6848\n\n\u82e5\u8981\u8ba9\u57ce\u5e021\u5230\u57ce\u5e02n\u6709\u8def\u5f84\u7ecf\u8fc7P\uff0c\u5219\u89811\u53ef\u8fbei,j\u53ef\u8fben\uff0c\u53ef\u7528dfs\u5728\u539f\u56fe\u548c\u53cd\u56fe\u4e0a\u6c42\u51fa1\u53ef\u8fbe\u7684\u70b9\u548c\u53ef\u8fben\u7684\u70b9\n\n\u4f9d\u636e\u539f\u56fe\u4ee5\u4ef7\u683c\u4e3a\u8282\u70b9\u5efa\u7acb\u65b0\u56fenG\uff0c\u56e0\u4e3a\u53ea\u5173\u5fc3\u4ef7\u683c\uff0c1\u53ef\u8fbe\u7684\u57ce\u5e02\u65e0\u8bba\u662f\u54ea\u4e2a\uff0c\u53ea\u8981\u4ef7\u683c\u76f8\u540c\uff0c\u4fbf\u53ef\u89c6\u4e3a\u540c\u4e00\u79cd\uff0c \u53ef\u8fben\u7684\u540c\u7406\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c**1\u53ef\u8fbe\uff08\u6216\u53ef\u8fben\uff09\u7684\u4ef7\u683c\u76f8\u540c\u7684\u57ce\u5e02\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u70b9\uff0c\u5b83\u4eec\u6240\u8fde\u7684\u8fb9\u4e5f\u8981\u5408\u5e76**\u3002\n\n\u5982\u679c1\u53ef\u8fbe\u7684\u4ef7\u683c\u4e3aa\u7684\u57ce\u5e02\u901a\u5f80\u53ef\u8fben\u4ef7\u683c\u4e3ab\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u5728nG\u4e0a\u5bf9\u4ef7\u683ca\u5411\u4ef7\u683cb\u8fde\u8fb9\n\n\u5177\u4f53\u64cd\u4f5c\uff1a\u4f8b\u5982\u6709\u57ce\u5e021\u53ef\u8fbe\u4ef7\u683c\u4e3a3\u7684\u57ce\u5e02\u901a\u5f80\u53ef\u8fbe\u57ce\u5e02N\u4ef7\u683c\u4e3a2\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u5728\u65b0\u56fe\u4e2d\u8282\u70b93\u5411\u8282\u70b9100 + 2\uff08100+\u8868\u793a\u53ef\u8fbe\u57ce\u5e02n\uff09\u8fde\u8fb9\uff0c\u8868\u793a\u5b58\u5728 \u57ce\u5e021 -> \u4ef7\u683c\u4e3a2 -> \u4ef7\u683c\u4e3a3 -> \u57ce\u5e02n \u7684\u8def\u5f84\u3002\n\n\u5728nG\u4e0a\u8dd1floyd\u6c42\u4f20\u9012\u95ed\u5305\uff0c\u6c42\u51fa\u6bcf\u4e2a\u4ef7\u683c\u53ef\u4ee5\u5230\u8fbe\u54ea\u4e9b\u4ef7\u683c\u3002\u679a\u4e3e\u4ef7\u683c\uff0c\u6c42\u51fa\u7b54\u6848\n\n\u4e0b\u9762\u7528\u753b\u56fe\u8f6f\u4ef6\u753b\u51fa\u7684\u56fe\u6765\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n![\u539f\u56fe\uff0c\u7ea2\u8272\u8868\u793a\u4ef7\u683c](https://cdn.luogu.com.cn/upload/image_hosting/5b15gnc9.png)\n![\u65b0\u56fe\uff0c\u7ea2\u8272\u8868\u793a\u4ef7\u683c](https://cdn.luogu.com.cn/upload/image_hosting/rkdjhmw3.png)\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <vector>\n\nstatic const int maxn = 100005;\n\nint get()\n{\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') c = getchar();\n\t\n\tint x = c - '0'; c = getchar();\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x;\n}\n\nint N, M;\nint A[maxn];\nint vis1[maxn], visN[maxn];\nstd::vector<int> G[maxn], uG[maxn];\nint f[203][203];\n\nvoid dfs(int k, int* vis, std::vector<int>* G)\n{\n\tvis[k] = 1;\n\tfor (int i = 0; i < (int)G[k].size(); i++)\n\t    if (!vis[G[k][i]]) dfs(G[k][i], vis, G);\n}\n\nvoid floyd()\n{\n\tfor (int k = 1; k <= 200; k++)\n\t\tfor (int i = 1; i <= 200; i++)\n\t\t    for (int j = 1; j <= 200; j++)\n\t\t        f[i][j] = (f[i][j] || (f[i][k] && f[k][j]));\n}\n\nint main()\n{\n\tN = get(); M = get();\n\tfor (int i = 1; i <= N; i++) A[i] = get();\n\tfor (int i = 1; i <= M; i++)\n\t{\n\t\tint u, v, t; \n\t\tu = get(); v = get(); t = get();\n\t\tif (t == 1) G[u].push_back(v);\n\t\telse        G[u].push_back(v), G[v].push_back(u);\n\t\t\n\t\tif (t == 1) uG[v].push_back(u);\n\t\telse        uG[u].push_back(v), uG[v].push_back(u);\n\t}\n\tdfs(1, vis1, G);\n\tdfs(N, visN,uG);\n\t\n\tfor (int i = 1; i <= 200; i++) f[i][i] = 1;\n\tfor (int i = 1; i <= N; i++) if (vis1[i])\n\t    for (int j = 0; j < (int)G[i].size(); j++) if (visN[G[i][j]])\n\t    {\n\t    \tint u = A[i], v = A[G[i][j]] + 100;\n\t    \tf[u][v] = 1;\n\t    }\n\t    \n\tfloyd();\n\tint ans = 0;\n\tfor (int i = 1; i <= 100; i++)\n\t    for (int j = 101; j <= 200; j++)\n\t        if (f[i][j]) ans = std::max(ans, j - i - 100);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1574862310,
        "uid": 73562,
        "name": "0x80mem",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u6781\u7b80\u4e3b\u4e49~~\u61d2\u5f97\u7f8e\u5316~~\n\n\u4e3b\u8981\u63d0\u4f9b\u4e00\u79cd\u65b0\u505a\u6cd5\u3002\n\n\u6211\u4eec\u60f3\u4e00\u60f3\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u5356\u51fa\uff0c\u90a3\u5c31\u8981\u6c42\u5f97\u80fd\u5230\u8fbe\u5b83\u7684\u70b9\u4e2d\u4e70\u5165\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u7531\u6b64\u53ef\u4ee5\u7528spfa\u6162\u6162\u62d3\u5c55\uff0cspfa\u4e2dd[]\u5c31\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u4e86\uff0c\u800c\u662f\u8def\u5f84\u6700\u5c0f\u503c\u4e86\u3002\n\n------------\n\u5177\u4f53\u64cd\u4f5c\uff1a\n\n\u5f00\u59cb\u5148\u5c06d[]\u521d\u59cb\u5316\u4e3a\u8fd9\u4e2a\u70b9\u4e70\u5165\u5356\u51fa\u7684\u4ef7\u683c\uff08\u8bbe\u4e3aval[]\uff09\uff0cn\u4e2a\u70b9\u90fd\u5165\u961f\u51c6\u5907\u53bb\u62d3\u5c55\u3002\n```cpp\nfor(int i=1;i<=n;i++)\n{\n\td[i]=val[i]=read();\n\tq.push(i);v[i]=true;\n}\n```\n\u7136\u540e\u8dd1spfa\uff0c\u6c42\u5f97d[]\u3002\n```cpp\nwhile(!q.empty())\n{\n\tint x=q.front();\n\tq.pop();\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(d[y]>d[x])\n\t\t{\n\t\t\td[y]=d[x];\n\t\t\tif(!v[y])\n\t\t\t{\n\t\t\t\tv[y]=true;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n\tv[x]=false;\n}\n```\n\u6700\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u7b97\u5728\u8fd9\u91cc\u5356\u51fa\u83b7\u76ca\u7684\u6700\u5927\u503c\uff0c\u6c42max\uff08val[i]-d[i]\uff09(1<=i<=n)\u5c31\u884c\u4e86\u3002\n```cpp\nint ans=0;\nfor(int i=1;i<=n;i++)if(v[i])ans=max(ans,val[i]-d[i]);\n```\n\n------------\n### **\u771f\u7684\u884c\u4e86\u5417\uff1f**\n\u56de\u987e\u9898\u9762\uff1a\n\n**\u201c\u963f\u9f99\u51b3\u5b9a\u4ece 1 \u53f7\u57ce\u5e02\u51fa\u53d1\uff0c\u5e76\u6700\u7ec8\u5728 n \u53f7\u57ce\u5e02\u7ed3\u675f\u81ea\u5df1\u7684\u65c5\u884c\u3002\u201d**\n\n\u4e5f\u5c31\u662f\u8bf4\u5356\u5b8c\u540e\u8981\u56de\u5230\u70b9n\uff0c\u7136\u800c\u9898\u76ee\u5e76\u6ca1\u6709\u4fdd\u8bc1\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\u80fd\u53bb\u5230\u70b9n\uff01\n\n\u800c\u4e14\u4e0d\u662f\u6240\u6709\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u77e5\u9053\u54ea\u4e9b\u70b9\u4e0d\u80fd\u53bb\u5230\u70b9n\uff0c\n\n\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe\uff0c\u5728\u8fd9\u5f20\u56fe\u4ee5n\u4e3a\u8d77\u70b9\u770b\u80fd\u5230\u8fbe\u54ea\u4e9b\u70b9\u3002\n\n------------\n\u5177\u4f53\u505a\u6cd5\uff1a\n\nv[]\u8868\u793an\u5728\u7b2c\u4e8c\u5f20\u56fe\u80fd\u5230\u8fbe\u7684\u70b9\uff0ctrue\u4e3a\u80fd\u5230\u8fbe\uff0cfalse\u4e3a\u4e0d\u80fd\u5230\u8fbe\uff0c\u5f00\u59cb\u5148\u521d\u59cb\u5316\u4e3afalse\u3002\n\nn\u5148\u5165\u961f\uff0cv[n]\u8bb0\u4e3atrue\u3002\n\n\u6bcf\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u679a\u4e3e\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u8fb9\uff0c\u5982\u679c\u8fb9\u7684\u7ec8\u70b9\uff08\u8bbe\u4e3ay\uff09\uff0cv[y]\u4e3afalse\uff0c\n\u5219v[y]\u6807\u8bb0\u4e3atrue\uff0c\u5e76\u628a\u5b83\u5165\u961f\u51c6\u5907\u53bb\u62d3\u5c55\u3002\n\n\u56e0\u4e3a\u70b9n\u80fd\u8fbe\u5230\u8fd9\u4e2ay\uff0c\u6240\u4ee5y\u80fd\u5230\u8fbe\u7684\u70b9\uff0cn\u4e5f\u80fd\u5230\u8fbe\u3002\n\n\u961f\u5217\u4e3a\u7a7a\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u56e0\u4e3a\u662f\u53cd\u5411\u5efa\u56fe\uff0cn\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u662f\u539f\u56fe\u4e2d\u80fd\u5230\u8fben\u7684\u70b9\u4e86\u3002\n\n\uff08\u8fd9\u91cc\u4ee3\u7801\u548cspfa\u7684\u5f88\u50cf\u5462~\uff09\n```cpp\nq.push(n);\nv[n]=true;\nwhile(!q.empty())\n{\n\tint x=q.front();\n\tq.pop();\n\tfor(int k=last[x][1];k;k=a[k][1].next)//[0]\u662f\u539f\u56fe\n\t{\n\t\tint y=a[k][1].y;\n\t\tif(!v[y])\n\t\t{\n\t\t\tv[y]=true;\n\t\t\tq.push(y);\n\t\t}\n\t}\n}\n```\n\u5728\u8fd9\u4e9b\u70b9\u6c42\u5f97\u7b54\u6848\u5373\u53ef~\n```cpp\nint ans=0;\nfor(int i=1;i<=n;i++)if(v[i])ans=mymax(ans,val[i]-d[i]);\n```\n\n------------\n\u5949\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint ri()\n{\n\tchar c=getchar();int s=0;\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9')s=(s<<1)+(s<<3)+c-'0',c=getchar();\n\treturn s;\n}\nint mymax(int x,int y){return x>y?x:y;}\nint n,m,val[110000];\nstruct bian\n{\n\tint y,next;\n}a[1110000][2];int last[110000][2],len[2];\nvoid ins(int x,int y,int w)\n{\n\ta[++len[w]][w].y=y;\n\ta[len[w]][w].next=last[x][w];last[x][w]=len[w];\n}\nint d[110000];\nbool v[110000];\nqueue<int>q;\nint main()\n{\n\tn=ri();m=ri();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\td[i]=val[i]=ri();\n\t\tq.push(i);v[i]=true;\n\t}\n\tmemset(last,0,sizeof(last));len[0]=len[1]=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=ri(),y=ri(),z=ri();\n\t\tins(x,y,0);ins(y,x,1);\n\t\tif(z==2)ins(y,x,0),ins(x,y,1);\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int k=last[x][0];k;k=a[k][0].next)\n\t\t{\n\t\t\tint y=a[k][0].y;\n\t\t\tif(d[y]>d[x])\n\t\t\t{\n\t\t\t\td[y]=d[x];\n\t\t\t\tif(!v[y])\n\t\t\t\t{\n\t\t\t\t\tv[y]=true;\n\t\t\t\t\tq.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv[x]=false;\n\t}\n\tq.push(n);v[n]=true;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int k=last[x][1];k;k=a[k][1].next)\n\t\t{\n\t\t\tint y=a[k][1].y;\n\t\t\tif(!v[y])\n\t\t\t{\n\t\t\t\tv[y]=true;\n\t\t\t\tq.push(y);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)if(v[i])ans=mymax(ans,val[i]-d[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\uff08\u6709\u9519\u8bef\u671b\u7ea0\u6b63\uff0c\u56e0\u4e3a\u4e0d\u662f\u4e3b\u6d41\u601d\u8def\u3002\uff09",
        "postTime": 1573283469,
        "uid": 119032,
        "name": "L_key",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "#  _********\u6ca1\u4eba\u5199spea********_ \n\u90a3\u6211\u6765\u6c34\u4e00\u53d1\uff01\n\n\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n//\u672c\u9898\u662f\u60f3\u627e\u5230 \u4e00\u4e2a\u4ef7\u683c\u6700\u4f4e\u548c\u4e00\u4e2a\u4ef7\u683c\u6700\u9ad8\u70b9\uff08\u6ee1\u8db3\u8d77\u70b9\u80fd\u5230\u8fbe\uff0c\u4e14\u53c8\u53ef\u987a\u5e8f\u5230\u8fbe\u7ec8\u70b9\uff09\n//\u4ece\u8d77\u70b9\u5f00\u59cb\uff0c\u627e\u5bfb\u4ece\u8d77\u70b9\u5230i\u70b9\u80fd\u83b7\u5f97\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u7528d[i]\u8868\u793a \n#include<cstdio>\n#include<cstring>\nusing namespace std;\nstruct node{           //\u7528\u90bb\u63a5\u8868\u5b58\u653e\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u8fb9\u7684\u53e6\u4e00\u4e2a\u7ed3\u70b9 \n\tint x,next;        //x\u5b58\u653e\u7ed3\u70b9\u7f16\u53f7\uff0cnext\u6307\u5411\u4e0b\u4e00\u6761\u8fb9 \n}a[1000005];\nint w[100005],h[100005];         //w[i]\u8868\u793a\u7b2ci\u70b9\u6c34\u6676\u7403\u7684\u4ef7\u683c\uff0ch[i]\u8868\u793ai\u7ed3\u70b9\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u7ed3\u70b9\u5b58\u653e\u5728a\u90bb\u63a5\u8868\u4e2d\u7684\u4f4d\u7f6e \nint d[100005],max[100005];   //max[i]\u8868\u793a\u4ece\u8d77\u70b9\u5230i\u70b9\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 \nint n,m;\nvoid init(){                //\u8f93\u5165\u6570\u636e \n\tint i,k,xi,yi,zi;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;++i){\n\t\tscanf(\"%d\",&w[i]);      //\u8bfb\u5165\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6c34\u6676\u7403\u4ef7\u683c \n        h[i]=0;\n\t}\n\tk=0;\n\tfor(i=1;i<=m;++i){    //\u8bfb\u5165\u6bcf\u4e00\u6761\u8fb9\uff0c\u5b58\u653e\u5728\u90bb\u63a5\u8868\u4e2d \n\t\tscanf(\"%d%d%d\",&xi,&yi,&zi);\n\t\tif(zi==1){     \n\t\t   a[++k].x=yi;                //\u7ed3\u6784\u4f53a\u4e2d\u65b0\u589e\u52a0\u4e00\u4e2a\u7ed3\u70b9k\uff0c\u5176x\u503c\u7684\u90e8\u5206\u4e3a\u8fb9\u7684\u7ed3\u70b9\u53f7yi \n\t\t   a[k].next=h[xi];            //\u7ed3\u70b9\u4f53a\u7684next\u6307\u5411\u4ee5xi\u4e3a\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u4f4d\u7f6e\u53f7 \n\t\t   h[xi]=k;                    //\u5c06\u65b0\u7684\u4f4d\u7f6e\u53f7k\u5b58\u653e\u5728h[xi]\u4e2d \n\t\t}\n\t\telse{\n\t\t   a[++k].x=yi;a[k].next=h[xi];h[xi]=k;\n\t\t   a[++k].x=xi;a[k].next=h[yi];h[yi]=k;\n\t\t}\n\t}\n}\nvoid spea(){      //SPEA\u7b97\u6cd5\uff0c\u6c42\u6700\u77ed\u8def\u5f84\u7684\u4e00\u79cd\u7b97\u6cd5\uff0cP434\u9875 \n\tint i,j,u,head,tail;\n\tint team[100005];        //\u8be5\u8bbf\u95ee\u7684\u961f\u5217 \n\tbool f[100005];          //f[i]\u6807\u8bb0i\u7ed3\u70b9\u662f\u5426\u5165\u961f \n    memset(f,false,sizeof(f));     //\u521d\u59cb\u6240\u6709\u7ed3\u70b9\u90fd\u672a\u5165\u961f \n    for(i=1;i<=n;++i){ \n\t   d[i]=w[i];           //\u521d\u59cbi\u7ed3\u70b9\u80fd\u83b7\u5f97\u7684\u6700\u4f4e\u4ef7\u683cd[i]=\u5176\u672c\u8eab\u4ef7\u683cw[i] \n\t   max[i]=-1;           //i\u7ed3\u70b9\u7684\u6700\u5927\u5229\u6da6\u4e3a-1\uff0c\u521d\u59cb\u503c \n\t}\n    team[1]=1;f[1]=true;max[1]=0;   //\u4ece\u7ed3\u70b91\u51fa\u53d1\uff0c\u5c061\u5165\u961f\uff0c\u6807\u8bb0\u4e3a\u5df2\u5165\u961f\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u4e3a0 \n\thead=0;tail=1;          //\u961f\u5217\u7684\u9996\u6307\u9488head\uff0c\u5c3e\u6307\u9488tail \n\twhile(tail!=head){\n\t\t++head;              //\u51fa\u961f \n\t\tif(head>100000)  head=1;     //\u4e3a\u6709\u6548\u5229\u7528\u7a7a\u95f4\uff0c\u961f\u5217\u8bbe\u4e3a\u5faa\u73af\u961f\u5217\uff0c\u5f53head\u8d85\u8fc7\u6700\u5927\u8303\u56f4100000\u65f6\uff0c\u91cd\u65b0\u6307\u5411\u524d\u9762\u5df2\u7ecf\u7a7a\u95f2\u7684team[1] \n\t   \tu=team[head];        //u\u8bb0\u5f55\u51fa\u961f\u7684\u8fd9\u4e2a\u7ed3\u70b9\u7f16\u53f7 \n\t   \tf[u]=false;          //\u7ed3\u70b9u\u6807\u8bb0\u4e3a\u5df2\u51fa\u961f \n\t   \tfor(i=h[u];i;i=a[i].next){      //\u7a77\u4e3eu\u6307\u5411\u7684\u6240\u6709\u7ed3\u70b9 \n\t   \t   j=a[i].x;\n\t   \t   if(d[j]>d[u]||max[j]<max[u]){    //\u5982\u679cj\u7ed3\u70b9\u7684\u6700\u4f4e\u4ef7\u683cd[j]\u6216\u6700\u5927\u5229\u6da6max[j]\u53ef\u4ee5\u6539\u53d8\uff0c\u5219\u4f5c\u51fa\u76f8\u5e94\u6539\u53d8\uff0c\u5e76\u5c06j\u5165\u961f \n\t   \t   \t  if(d[j]>d[u])  d[j]=d[u];     //\u5982\u679c\u6700\u4f4e\u4ef7\u683cd[j]\u5927\u4e8e\u524d\u9762\u7684\u70b9\u83b7\u5f97\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5219\u6539\u53d8 \n\t   \t   \t  if(max[j]<max[u])  max[j]=max[u];    //\u5982\u679c\u6700\u5927\u5229\u6da6max[j]\u5c0f\u4e8e\u524d\u9762\u7684\u70b9\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\uff0c\u5219\u6539\u53d8\n\t   \t   \t  if(w[j]-d[j]>max[j])  max[j]=w[j]-d[j];    //\u5982\u679cj\u70b9\u7684\u4ef7\u683c\u51cf\u53bb\u5230\u8fbej\u70b9\u80fd\u83b7\u5f97\u7684\u6700\u4f4e\u4ef7\u683c\uff0c\u5373\u5f53\u524d\u7684\u5229\u6da6\u5927\u4e8emax[j]\uff0c\u5219\u6539\u53d8 \n\t   \t   \t  if(f[j]==false){      //\u5982\u679cj\u70b9\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5165\u961f \n\t   \t   \t  \t tail++;\n\t   \t   \t  \t if(tail>100000)  tail=1;\n\t   \t   \t  \t team[tail]=j;                             //\u5165\u961f \n\t   \t   \t  \t f[j]=true;                                //\u6807\u8bb0\u4e3a\u5df2\u5165\u961f \n\t   \t   \t  }\n\t   \t   }\n\t   \t}\t   \t\n\t}\n}\nint main(){\n\t//freopen(\"trade.in\",\"r\",stdin);freopen(\"trade.out\",\"w\",stdout);\n\tinit();\n\tspea();   \n    printf(\"%d\",max[n]);               //\u8f93\u51fa\u7ec8\u70b9n\u70b9\u7684\u6700\u5927\u5229\u6da6 \n\t//fclose(stdin);fclose(stdout);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1573089821,
        "uid": 119049,
        "name": "\u5929\u6708\u5c06\u767d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u597d\u9898\u3002\n\n\u521a\u5f00\u59cb\u7b2c\u4e00\u773c\u611f\u89c9\u662f$tarjan+topo$\u3002\n\n\u7136\u540e\u5f00\u59cb\u7801\u7801\u7801\uff0c\u7f29\u70b9\u4e4b\u540e\u53d1\u73b0$topo$\u597d\u50cf\u4e0d\u597d\u5199\uff0c\u81ea\u66b4\u81ea\u5f03\u5199\u4e86\u4e2a$dag$\u4e0a\u7684\u5927\u7206\u641c\u3002$70pts.$\uff08\u7f29\u70b9\u4e4b\u540e\u5199\u7206\u641c\u7684\u6211\u4f30\u8ba1\u53ea\u6709\u6211\u4e86...\uff09\n\n\u7136\u540e\u601d\u8003\u6709\u6ca1\u6709\u66f4\u52a0\u7b80\u5355\u7684\u505a\u6cd5\uff0c\u7a81\u7136\u60f3\u8d77\u4e86\u4e4b\u524d\u505a\u8fc7\u7684\u4e00\u9053\u9898\uff0c\u5b64\u5c9b\u8425\u6551\u95ee\u9898\uff0c\u597d\u50cf\u8fd9\u9053\u9898\u6709\u70b9\u7c7b\u4f3c\uff0c\u5e76\u4e14\u662f\u7b80\u5316\u7248\u3002\n\n\u7136\u540e\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u5206\u5c42\u5efa\u56fe\uff0c\u7b2c\u4e00\u5c42\u56fe\u7684\u8fb9\u6743\u90fd\u4e3a\u96f6\uff0c\u7b2c\u4e00\u5c42\u7684\u5404\u70b9\u5411\u7b2c\u4e8c\u5c42\u56fe\u8fde\u4e00\u6761\u8d1f\u4ee3\u4ef7\u7684\u8fb9\uff0c\u4ee3\u8868\u4e70\u5165\uff0c\u7b2c\u4e8c\u5c42\u7684\u5404\u70b9\u5411\u7b2c\u4e09\u5c42\u8fde\u4e00\u5c42\u4ee3\u4ef7\u7684\u8fb9\uff0c\u4ee3\u8868\u5356\u51fa\uff0c\u6700\u540e\u8dd1\u4e00\u8fb9\u6700\u957f\u8def\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5f88\u597d\u5199\uff0c\u4ee5\u540e\u8fd8\u662f\u8981\u591a\u601d\u8003\u4e4b\u540e\u518d\u5199\u4ee3\u7801...\n\n$Code:$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 5000000 + 10;\n\nint head[N] , cnt , n , m , a[N];\n\nstruct Edge {\n\tint to , nxt , w;\n}e[N]; \n\nvoid add(int u , int v, int w) {\n\te[++ cnt].to = v;\n\te[cnt].w = w;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nint dis[N];\nbool inq[N];\n\n#define inf 0x7fffffff\nint Spfa() {\n\tfor(int i = 2 ; i <= n ; ++ i) dis[i] = -inf;\n\tqueue <int> q;\n\tq.push(1); inq[1] = 1;\n\twhile(! q.empty()) {\n\t\tint now = q.front(); q.pop();\n\t\tinq[now] = 0;\n\t\tfor(int i = head[now] ; i ; i = e[i].nxt) {\n\t\t\tint v = e[i].to , w = e[i].w;\n\t\t\tif(dis[v] < dis[now] + w) {\n\t\t\t\tdis[v] = dis[now] + w;\n\t\t\t\tif(!inq[v]) inq[v] = 1 , q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn max(dis[n] , dis[3 * n]);\n}\n\nint main () {\n\tscanf(\"%d %d\" , &n , &m);\n\tfor(int i = 1 ; i <= n ; ++ i) scanf(\"%d\" , a + i);\n\twhile(m --) {\n\t\tint u , v , z;\n\t\tscanf(\"%d %d %d\" ,&u , &v , &z);\n\t\tadd(u , v , 0) , add(u + n , v + n , 0) , add(u + 2 * n , v + 2 * n , 0);\n\t\tif(z == 2) add(v , u , 0) , add(v + n , u + n , 0) , add(v + 2 * n , u + 2 * n , 0);\n\t}\n\tfor(int i = 1 ; i <= n ; ++ i) {\n\t\tadd(i , n + i , - a[i]); add(n + i , 2 *n + i , a[i]);\n\t}\n\tn = n * 3;\n\tprintf(\"%d\\n\" , Spfa());\n\treturn 0;\n} \n```",
        "postTime": 1572503220,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "**\u8fd9\u9898\u6709\u70b9\u4e1c\u897f\uff0c\u628a\u5b83\u60f3\u5f97\u5f88\u96be\u5c31\u96be\u505a\uff0c\u60f3\u5f97\u5f88\u7b80\u5355\u5c31\u771f\u7684\u5f88\u7b80\u5355**\n\n\u5176\u5b9e\u51b7\u9759\u5206\u6790\u4e00\u4e0b\uff0c\u627e\u5230\u70b9\u548c\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\n\n\u9996\u5148\u4e00\u5b9a\u662f\u4f4e\u4e70\u9ad8\u5356\uff0c\u8d8a\u4f4e\u4e70\u5165\u8d8a\u9ad8\u5356\u51fa\u5c31\u8d8a\u8d5a\uff08\u5e9f\u8bdd\uff09\n\n\u4f46\u662f\u4ef7\u683c\u6700\u4f4e\u70b9\u4e0d\u4e00\u5b9a\u5728\u4ef7\u683c\u6700\u9ad8\u70b9\u4e4b\u524d\u3002\u5e76\u4e14\u627e\u5230\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\u8fd8\u8981\u5728\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5c1d\u8bd5SPFA\uff0c\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u5e26\u7740\u6cbf\u9014**\u6700\u5927\u5dee\u4ef7**\u548c**\u6700\u4f4e\u4ef7\u683c**\u4e00\u76f4\u5f80\u4e0b\u63a8\uff0c\u63a8\u5b8c\u6574\u4e2a\u56fe\uff0c\u6700\u540eN\u70b9\u7684\u6700\u5927\u5dee\u4ef7\u5c31\u662f\u7b54\u6848\u3002\n\n~~\u867d\u7136\u662fSPFA\u4f46\u662f\u4e3a\u4ec0\u4e48\u603b\u6709\u4e00\u79cdDP\u7684\u65e2\u89c6\u611f\u2026\u2026~~\n\n\u53e6\u5916\u56e0\u4e3a\u80fd\u6765\u56de\u8d70\uff0c\u6240\u4ee5\u8981\u8bb0\u4e00\u4e2aflag\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u80fd\u88ab\u524d\u4e00\u4e2a\u70b9\u66f4\u65b0\u6700\u5927\u5dee\u4ef7\u548c\u6700\u4f4e\u4ef7\u683c\u624d\u5165\u961f\u3002\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int MAX=100010;\nint n,m,a[MAX],vis[MAX],min1[MAX],max1[MAX];\n\nstruct edge{\n    int u,v;\n    edge(){}\n    edge(int _u,int _v){u=_u;v=_v;}\n}e[10*MAX];\n\nstruct index{\n    int op=0,ed=-1;\n}h[MAX];\n\nbool cmp(edge x,edge y){\n    return x.u<y.u;\n}\n\nint min2(int x,int y,int z){\n    int ans=min(x,y);\n    ans=min(ans,z);\n    return ans;\n}\n\nint max2(int x,int y,int z){\n    int ans=max(x,y);\n    ans=max(ans,z);\n    return ans;\n}\n\nint main(){\n    //\u8bfb\u5165&\u5efa\u56fe\n    cin >> n >> m;\n    for (int i=1 ; i<=n ; i++){\n        cin >>a[i];\n    }\n    int k=0;//\u6700\u7ec8k\u4e3a\u6709\u5411\u8fb9\u6570\n    for (int i=1 ; i<=m ; i++){\n        int u,v,z;\n        cin >> u >> v >> z;\n        if (z==1) e[++k]=edge(u,v);\n        else{\n            e[++k]=edge(u,v);\n            e[++k]=edge(v,u);\n        }\n    }\n    //\u524d\u5411\u661f\n    sort(e+1,e+k+1,cmp);\n    h[e[1].u].op=1;\n    h[e[k].u].ed=k;\n    for (int i=2 ; i<=k ; i++){\n        if (e[i-1].u!=e[i].u){\n            h[e[i-1].u].ed=i-1;\n            h[e[i].u].op=i;\n        }\n    }\n\n    //\u521d\u59cb\u5316\n    memset(vis,0,sizeof vis);//0\u8868\u793a\u672a\u8bbf\u95ee\uff0c1\u8868\u793a\u8bbf\u95ee\u8fc7\n    memset(min1,0x3f,sizeof min1);\n    memset(max1,0,sizeof max1);\n    int u=1;\n    min1[u]=a[u];\n    queue <int> q;\n    q.push(u);\n    //SPFA\n    while (!q.empty()){\n        u=q.front();\n        q.pop();\n        vis[u]=0;\n        for (int i=h[u].op ; i<=h[u].ed ; i++){\n            int v=e[i].v;\n            int flag=0;\n            //cout << min1[v]<<\" \"<<a[v]<<\" \" <<min1[u]<<\"\\n===============\\n\";\n            if (min1[v]!=min2(min1[v],a[v],min1[u])) {min1[v]=min2(min1[v],a[v],min1[u]);flag=1;}\n            if (max1[v]!=max2(max1[v],a[v]-min1[v],max1[u])) {max1[v]=max2(max1[v],a[v]-min1[v],max1[u]);flag=1;}\n            if (flag && !vis[v]){\n                q.push(v);\n                vis[v]=1;\n            }\n        }\n    }\n    cout << max1[n];\n    return 0;\n}\n```\n",
        "postTime": 1564546542,
        "uid": 160200,
        "name": "PidSS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011SPFA"
    },
    {
        "content": "\u65b9\u6cd5\uff1a\u52a8\u89c4+spfa\uff08\u52a8\u89c4\u7684\u601d\u7ef4\u5c24\u4e3a\u91cd\u8981\uff09\n\n\u9996\u5148\u8981\u8ba4\u8bc6\u5230\uff0c\u963f\u9f99\u6cbf\u7740\u67d0\u6761\u8def\u5f84\u4ece1-n\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u662f\u5148\u4e70\u540e\u5356\uff08\u5e9f\u8bdd\uff09\uff0c\u90a3\u4e48\u5047\u8bbe\u5728u\u8282\u70b9\u4e70\uff0c\u5728v\u8282\u70b9\u5356,\u4e00\u5b9a\u662f\u5148\u7ecf\u8fc7u\u518d\u7ecf\u8fc7v\u3002\u90a3\u4e48\u6700\u4f18\u7684\u7b56\u7565\u4e00\u5b9a\u662f\u5728\u5f53\u524d\u8def\u5f84\u4e0b\u5bfb\u627e\u6700\u5c0f\u7684u,\u6700\u5927\u7684v\u3002\n\u8fd9\u53e5\u8bdd\u8bf7\u8bb0\u4f4f\u3002\n\n\u73b0\u5728\u8bbe\u4e24\u4e2a\u6570\u7ec4,d[i]\u548cf[i],d\u8868\u793a\u4ece\u539f\u70b9\u5230i\u6240\u6709\u8def\u5f84\u4e2d\u4ef7\u683c\u6700\u5c0f\u7684\u662f\u591a\u5c11\uff0cf\u8868\u793a\u4ecei\u5230n\u6240\u6709\u8def\u5f84\u4e2d\u4ef7\u683c\u6700\u5927\u7684\u662f\u591a\u5c11\u3002\n\n\u90a3\u4e48\u6700\u4f18\u7b56\u7565\u5c31\u85cf\u5728f[i]-d[i]\u4e2d\u4e86\u3002\u5982\u679cf[i],d[i]\u88ab\u8ba1\u7b97\u51fa\u6765\uff0c\u90a3\u4e48\u53ea\u9700\u904d\u5386\u4e00\u904d\u5c31\u80fd\u6c42\u51fa\u6700\u7ec8\u7b54\u6848\u4e86\u3002\n\n\u90a3\u4e48\u5047\u5982\u70b9u\u5230v\u94fe\u63a5 \u90a3\u4e48\u6709\n **_d[v]=min(d[u],d[v],price[v])**  _ \n\u5176\u4e2dprice\u662f\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u4ef7\u683c\u7684\u6570\u7ec4\u3002\n\uff08\u5148\u4e0d\u7740\u6025\u7b97f\u6570\u7ec4\uff09\u3002\n**\u5176\u5b9espfa\u6a21\u677f\u4e2dd[x]+w(x,y)\u5bf9\u6700\u77ed\u8def\u7684\u66f4\u65b0\uff0c\u4e2a\u4eba\u7406\u89e3\u662f\u52a8\u89c4\u7684\u53d8\u4f53\uff0c\u662f\u5229\u7528spfa\u6765\u8fdb\u884c\u52a8\u89c4\u64cd\u4f5c\u3002\u5982\u4eca\u6211\u4eec\u9700\u8981\u7528spfa\u6765\u8fdb\u884c\u53e6\u5916\u4e00\u4e2a\u52a8\u89c4\u64cd\u4f5c\uff0c\u5c31\u662f\u7528spfa\u6765\u8ba1\u7b97\u4e0a\u8ff0\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5728\u56fe\u4e2d\u8fdb\u884c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f20\u7edf\u7684\u7528for\u5faa\u73af\u7684\u52a8\u89c4\u662f\u5f88\u96be\u8fdb\u884c\u7684\uff0c\u800c\u4e14\u5f88\u53ef\u80fd\u6709\u540e\u6548\u6027(\u53cc\u5411\u8fb9\u4ec0\u4e48\u7684)\uff0c\u800c\u7528spfa\u8fdb\u884c\uff0c\u8ba9\u4e00\u4e2a\u72b6\u6001\u66f4\u65b0\u5230\u4e0d\u80fd\u518d\u66f4\u65b0\uff0c\u90a3\u5c31\u4e00\u5b9a\u662f\u6211\u4eec\u60f3\u8981\u7684\u4e86**\n```cpp\nvoid spfa1(){\n\tmemset(d,0x3f,sizeof(d));\n\tqueue<int> q;\n\tbool vis[100002];\n\tmemset(vis,false,sizeof(vis));\n\tq.push(1);\n\td[1]=price[1];\n\tvis[1]=true;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=0;i<g1[u].size();i++){\n\t\t\tint v=g1[u][i];\n\t\t\tif(d[v]>min(price[v],d[u])){\n\t\t\t\td[v]=min(price[v],d[u]);\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u539f\u6765\u7684spfa\u6a21\u677f\u57fa\u7840\u4e0a\u53ea\u6539\u53d8\u4e86\u51e0\u53e5\u8bdd\u3002\n\n\u90a3\u4e48\u4e0b\u4e00\u4e2a\u95ee\u9898\uff0c\u600e\u4e48\u7b97f\u6570\u7ec4\uff1f\n\u6211\u4eec\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u8282\u70b9\u5230n \u4e2d\u6240\u6709\u8def\u5f84\u4e2d\u6700\u5927\u7684\u4ef7\u683c\u3002\u4f3c\u4e4e\u4e0e\u8ba1\u7b97d\u6570\u7ec4\u5dee\u4e0d\u591a\u3002\u552f\u4e00\u4e0d\u540c\u70b9\uff1a\u8ba1\u7b97d\u6570\u7ec4\u8d77\u70b9\u662f\u539f\u70b9\uff0c\u7ec8\u70b9\u662fi\uff0c\u800c\u8ba1\u7b97f\u6570\u7ec4\u8d77\u70b9\u662fi\u7ec8\u70b9\u662fn\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u5f20\u53cd\u56fe\uff0c\u53cd\u5411\u56fe\uff0c\u65e2\u7136i\u80fd\u5230n\uff0c\u90a3\u4e48\u5728\u53cd\u56fe\u4e2d\uff0cn\u4e5f\u80fd\u5230i\uff0c\u4ece\u800cf\u6570\u7ec4\u8981\u4ecen\u5f00\u59cb\u7b97\u8d77\u3002\n\n```cpp\nvoid spfa2(){\n\tmemset(f,0,sizeof(f));\n\tbool vis[100002];\n\tmemset(vis,false,sizeof(vis));\n\tqueue<int> q;\n\tq.push(n);\n\tf[n]=price[n];\n\tvis[n]=true;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=0;i<g2[u].size();i++){\n\t\t\tint v=g2[u][i];\n\t\t\tif(f[v]<max(price[v],f[u])){\n\t\t\t\tf[v]=max(price[v],f[u]);\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u90a3\u4e48\u5168\u90e8\u4ee3\u7801\u5c31\u662f\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m;\nvector<int> g1[100002];\nvector<int> g2[100002];//g1\u662f\u539f\u56fe\uff0c g2\u662f\u53cd\u56fe \nint price[100002];\nint d[100002];\nint f[100002];\nvoid spfa1(){\n\tmemset(d,0x3f,sizeof(d));\n\tqueue<int> q;\n\tbool vis[100002];\n\tmemset(vis,false,sizeof(vis));\n\tq.push(1);\n\td[1]=price[1];\n\tvis[1]=true;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=0;i<g1[u].size();i++){\n\t\t\tint v=g1[u][i];\n\t\t\tif(d[v]>min(price[v],d[u])){\n\t\t\t\td[v]=min(price[v],d[u]);\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n}\nvoid spfa2(){\n\tmemset(f,0,sizeof(f));\n\tbool vis[100002];\n\tmemset(vis,false,sizeof(vis));\n\tqueue<int> q;\n\tq.push(n);\n\tf[n]=price[n];\n\tvis[n]=true;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=0;i<g2[u].size();i++){\n\t\t\tint v=g2[u][i];\n\t\t\tif(f[v]<max(price[v],f[u])){\n\t\t\t\tf[v]=max(price[v],f[u]);\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n//\u4e24\u4e2a\u57fa\u672c\u4e00\u6837\u7684spfa \nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>price[i];\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tif(z==1){\n\t\t\tg1[x].push_back(y);\n\t\t\tg2[y].push_back(x);\n\t\t}\n\t\telse if(z==2){\n\t\t\tg1[x].push_back(y);\n\t\t\tg1[y].push_back(x);\n\t\t\tg2[x].push_back(y);\n\t\t\tg2[y].push_back(x);\n\t\t}\n\t}\n\tspfa1();spfa2();\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tans=max(ans,f[i]-d[i]);\n\t}//\u904d\u5386f,d\u3002\u8bb0\u5f55\u7b54\u6848 \n\tcout<<ans;\n\t\n}\n```\n",
        "postTime": 1549511991,
        "uid": 103136,
        "name": "kqnan00",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "Tarjan + \u62d3\u6251 + \u8d2a\u5fc3\n\n\u53ef\u80fd\u4f1a\u6709\u70b9\u590d\u6742\u3002\n\n\u901a\u8fc7\u8d2a\u5fc3\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5047\u8bbe\u5546\u4eba\u5728\u8be5\u5730\u4e70\u4e86\u5546\u54c1\uff0c\u90a3\u4e48\u4ed6\u5e94\u8be5\u5230**\u4ed6\u6240\u80fd\u5230\u8fbe\u7684\u80fd\u5356\u6700\u591a\u94b1\u7684\u5730\u65b9**\u5c06\u4e70\u4e0b\u7684\u5546\u54c1\u5356\u6389\u3002\u90a3\u4e48\u57fa\u672c\u601d\u8def\u5c31\u6765\u4e86\uff0c\u679a\u4e3e\u5728\u67d0\u4e2a\u70b9\u4e70\u4e0b\u5546\u54c1\uff0c\u7136\u540e\u627e\u51fa\u80fd\u5356\u6700\u591a\u94b1\u7684\u5730\u65b9\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6211\u4eec\u60f3\u529e\u6cd5\u9884\u5904\u7406\u8fd9\u4e2a\u80fd\u5356\u6700\u591a\u94b1\u7684\u5730\u65b9\u3002\n\n\u663e\u7136\u7ed9\u5b9a\u7684\u56fe\u53ef\u80fd\u6784\u6210\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8003\u8651\u7f29\u70b9\u3002\u5f3a\u8fde\u901a\u5206\u91cf\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u90fd\u53ef\u4e92\u76f8\u5230\u8fbe\uff0c\u6240\u4ee5\u6309\u7167\u8d2a\u5fc3\u539f\u5219\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4ef7\u503c\u6700\u5c0f\u503c\uff08\u7528\u4e8e\u4e70\u8fdb\uff09\u548c\u4ef7\u503c\u6700\u5927\u503c\uff08\u7528\u4e8e\u5356\u51fa\uff09\u3002\n\n\u7136\u540e\u8fd9\u5f20\u56fe\u5c31\u6784\u6210\u4e86\u4e00\u5f20DAG\u3002\u663e\u7136\u4eceDAG\u4e0a\u67d0\u4e2a\u70b9\u51fa\u53d1\u5230\u7ec8\u70b9\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5356\u51fa\u4ef7\u94b1\u6700\u5927\u503c\u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u5e8fdp\u6c42\u51fa\u3002\u7136\u540e\u6211\u4eec\u53ea\u8981\u5728\u62d3\u6251\u5e8f\u4f5cdp\u7684\u540c\u65f6\u987a\u4fbf\u6c42\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n**\u4f46\u662f**\uff0c\u8be5\u9898\u8fd8\u6709\u4e2a\u5751\u3002\u56e0\u4e3a\u5176\u4f5c\u51fa\u8981\u6c42\uff0c**\u8d77\u70b9\u5fc5\u987b\u4e3a1**\uff0c**\u7ec8\u70b9\u5fc5\u987b\u4e3an**\u3002\u5426\u5219\u5728\u67d0\u4e9b\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u9053\u8def\u4e0a\uff0c\u4f60\u53ef\u80fd\u6c42\u5f97\u4e00\u4e2a\u9519\u89e3\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6280\u5de7\u6765\u89e3\u51b3\u6389\u8fd9\u4e2a\u95ee\u9898\u3002\u8bbe\u7f6e\u4e00\u4e2a\u8fb9\u5168\u90e8\u53cd\u8fc7\u6765\u7684\u65b0\u56fe\uff0c\u7136\u540e\u5206\u522b\u4ece1,n\u5f00\u59cbBFS\u30021\u6309\u539f\u56fe\u904d\u5386\uff0cn\u6309\u53cd\u8fc7\u6765\u7684\u65b0\u56fe\u904d\u5386\u30021\u548cn\u90fd\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u65e2\u662f1\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u4e5f\u662f\u80fd\u5230\u8fben\u7684\u70b9\u3002\u6211\u4eec\u5728\u6574\u4e2a\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u53ea\u9700\u8981\u5bf9\u8fd9\u4e9b\u70b9\u8fdb\u884c\u5904\u7406\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u6392\u9664\u6389\u4e86\u5176\u5b83\u7684\u65e0\u7528\u70b9\u3002\n\n\u6700\u540e\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u5bf9\u540e\u9762\u7684\u62d3\u6251dp\u662f\u5426\u6709\u5f71\u54cd\uff1f\u5e76\u6ca1\u6709\u3002\u56e0\u4e3a\u4eceDAG\u56fe\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u662f**1\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\uff0c\u4e5f\u53ef\u4ee5\u5230\u8fben\u7684\u70b9**\uff0c\u5b83\u7b26\u5408\u6761\u4ef6\uff0c\u6240\u4ee5\u4e0d\u5fc5\u518d\u4f5c\u66f4\u591a\u7684\u5904\u7406\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define sclear(x) memset(x,0,sizeof(x))\ntypedef long long ll;\nusing namespace std;\n\ntemplate <typename T>void gn(T &x){\n    x=0;\n    T pl=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')pl=(ch=='-'?-1:1),ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    x*=pl;\n}\n\nconst int N=100010,M=3e6+10;\nbool A[N],B[N],del[N]; // \u4e00\u5f00\u59cb\u4e24\u904dBFS\u80fd\u5230\u8fbe\u7684\u70b9\u548c\u65e0\u7528\u70b9\nint buy[N]; // \u4e70\u524d\u7684\u6bcf\u4e2a\u70b9\u7684\u4ef7\u503c\nint nb[N],ns[N]; // \u4e70\u540e\u7684\u6bcf\u4e2aSCC\u7684\u6700\u5c0f\u4ef7\u503c\u548c\u6700\u5927\u4ef7\u503c\nint h[N],ht[N],hc[N],to[M],nexp[M],p=1; // \u94fe\u5f0f\u524d\u5411\u661f \u6302\u4e86\u4e09\u4e2a\u56fe\ninline void ins(int h[],int a,int b){\n    nexp[p]=h[a],h[a]=p,to[p]=b,p++;\n}\n\ninline void BFS(int s,bool vis[],int h[]){\n    queue<int> qu;\n    qu.push(s);\n    vis[s]=1;\n    int na;\n    while(!qu.empty()){\n        na=qu.front(),qu.pop();\n        for(int u=h[na];u;u=nexp[u]){\n            if(!vis[to[u]]){\n                vis[to[u]]=1;\n                qu.push(to[u]);\n            }\n        }\n    }\n    return;\n} // BFS\u8fdb\u884c\u904d\u5386\nint ans; // \u7b54\u6848\n/* Tarjan */\nint idx,sidx;\nint dfn[N],low[N],scc[N],stk[N],top;\nbool instk[N];\ninline void Tarjan(int x){\n    dfn[x]=low[x]=++idx;\n    stk[top++]=x;\n    instk[x]=1;\n    for(int u=h[x];u;u=nexp[u]){\n        if(del[to[u]])continue;\n        if(!dfn[to[u]]){\n            Tarjan(to[u]);\n            low[x]=min(low[x],low[to[u]]);\n        }\n        else if(instk[to[u]]) low[x]=min(low[x],dfn[to[u]]);\n    }\n    if(dfn[x]==low[x]){\n        ++sidx;\n        do{\n            top--;\n            instk[stk[top]]=0;\n            scc[stk[top]]=sidx;\n        }while(stk[top]!=x);\n    }\n    return;\n}\n\nint f[N],in[N]; // dp\u4e0e\u5165\u5ea6\n\nint main(){\n    int n,m;\n    gn(n),gn(m);\n    for(int i=1;i<=n;i++)gn(buy[i]);\n    int a,b,c;\n    for(int i=0;i<m;i++){\n        gn(a),gn(b),gn(c);\n        ins(h,a,b),ins(ht,b,a);\n        if(c==2)ins(h,b,a),ins(ht,a,b);\n    }\n    /* \u6392\u9664\u65e0\u7528\u70b9 */\n    BFS(1,A,h);\n    BFS(n,B,ht);\n\n    for(int i=1;i<=n;i++) del[i]=!(A[i]&&B[i]);\n    /* Tarjan */\n\n    for(int i=1;i<=n;i++)\n        if(!del[i] && !dfn[i]) Tarjan(i);\n    \n    /* \u5904\u7406\u5f3a\u8fde\u901a\u5206\u91cf */\n    memset(nb,-1,sizeof(nb));\n    for(int i=1;i<=n;i++){\n        if(nb[scc[i]]==-1||nb[scc[i]]>buy[i])nb[scc[i]]=buy[i]; \n        ns[scc[i]]=max(buy[i],ns[scc[i]]); \n    } \n    for(int i=1;i<=n;i++){\n        if(del[i])continue;\n        for(int u=h[i];u;u=nexp[u]){\n            if(del[to[u]])continue;\n            if(scc[to[u]]!=scc[i]){\n                ins(hc,scc[to[u]],scc[i]); // \u6ce8\u610f\u5efa\u53cd\u8fb9\n                in[scc[i]]++;\n            }\n        }\n    }\n    \n    /* \u5904\u7406\u62d3\u6251\u6392\u5e8f */ \n    queue<int> qu;\n    for(int i=1;i<=sidx;i++)\n        if(!in[i])qu.push(i);\n    while(!qu.empty()){\n        a=qu.front(),qu.pop();\n        f[a]=max(f[a],ns[a]);\n        ans=max(ans,f[a]-nb[a]); // \u66f4\u65b0\u7b54\u6848\n        for(int u=hc[a];u;u=nexp[u]){\n            in[to[u]]--;\n            f[to[u]]=max(f[a],f[to[u]]);\n            if(!in[to[u]])qu.push(to[u]);\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1508249521,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[http://www.cnblogs.com/OIerShawnZhou/](http://www.cnblogs.com/OIerShawnZhou/)\n\n\uff08\u6211\u5e73\u5e38\u5199\u7684\u9898\u89e3\u90fd\u4f1a\u5f80\u535a\u5ba2\u91cc\u53d1\uff0c\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u524d\u6765\u62cd\u7816\uff09\n\n\u5751\u70b9\u7565\u591a\u5c31\u662f\u4e86\u3002\u3002\u6709\u4e9b\u5730\u65b9\u5fc5\u987b\u7528\u5947\u602a\u7684\u5199\u6cd5\u624d\u53ef\u4ee5\uff0c\u5426\u5219\u7edd\u5bf9\u72060\u3002\u3002\u3002\u3002\n\n\u8fd9\u9898\u9898\u610f\u8981\u6c42\u6211\u4eec\u6c42\u51fa\u80fd\u8d5a\u53d6\u7684\u6700\u5927\u5dee\u4ef7\u3002\u8bf4\u5230\u5dee\u4ef7\u5f88\u597d\u60f3\u4e86\uff0c\u80af\u5b9a\u662f\u5356\u51fa\u4ef7-\u4e70\u5165\u4ef7=\u5dee\u4ef7\u3002\n\n\u9898\u76ee\u89c4\u5b9a\u4e86\u4ece\u70b91\u51fa\u53d1\u5230\u70b9n\uff0c\u6211\u7684\u505a\u6cd5\u662f\uff0c\u4ece\u8d77\u70b9\u6b63\u5411\u8dd1\u4e00\u6b21spfa\uff0c\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u7684\u4e70\u5165\u4ef7\u7684\u6700\u5c0f\u503c\u3002\u7136\u540e\u4ece\u7ec8\u70b9\u53cd\u5411\u8dd1\u4e00\u6b21spfa\uff0c\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u5356\u51fa\u4ef7\u7684\u6700\u5927\u503c\u3002\u6700\u540e\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u5dee\u4ef7\u4fbf\u662f\u7b54\u6848\u3002\n\n\u7a0d\u5fae\u60f3\u4e00\u4e0b\u4fbf\u80fd\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u6b63\u786e\u6027\u662f\u663e\u7136\u7684\u3002\u81f3\u5c11\u6211\u8fd9\u4e48\u8ba4\u4e3a\u3002\n\n\u5efa\u56fe\u7684\u65f6\u5019\u6709\u5355\u5411\u8fb9\u6709\u53cc\u5411\u8fb9\uff0c\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\uff08\u6211\u4e00\u76f4\u5f04\u4e0d\u660e\u767d\u5224\u65ad\u4e3a\u5565if\u4e0d\u884cswicth\u53ef\u4ee5\u3002\u3002\u3002\uff09\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <cstring>\n#include <cstdio>\n#define maxn 500001\n#define INF 0x7fffffff / 2\n#define debug cout << \"OK\" << endl;\nusing namespace std;\nstruct Edge{\n    int from,to,dis;\n};\nint ball_val[maxn];\nint n,m,u,v,dir,w;\nint ans = -INF;\nEdge pos_edge[maxn];\nEdge nag_edge[maxn];\nint pos_head[maxn],pos_tot=0;\nint nag_head[maxn],nag_tot = 0;\nint pos_dis[maxn];\nint nag_dis[maxn];\nbool inq[maxn];\nint read(){\n    int num = 0;\n    char c;\n    bool flag = false;\n    while ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n    if (c == '-')\n        flag = true;\n    else\n        num = c - '0';\n    while (isdigit(c = getchar()))\n        num = num * 10 + c - '0';\n    return (flag ? -1 : 1) * num;\n}\nvoid pos_add_edge(int from,int to,int dis){\n    pos_edge[++pos_tot].from=pos_head[from];\n    pos_edge[pos_tot].to = to;\n    pos_edge[pos_tot].dis = dis;\n    pos_head[from] = pos_tot;\n}\n\nvoid nag_add_edge(int from,int to,int dis){\n    nag_edge[++nag_tot].from=nag_head[from];\n    nag_edge[nag_tot].to = to;\n    nag_edge[nag_tot].dis = dis;\n    nag_head[from] = nag_tot;\n}\nvoid pos_spfa(int s){\n    queue<int> q;\n    memset(inq,false,sizeof(inq));\n    q.push(s);\n    inq[s] = true;\n    pos_dis[1] = ball_val[1];\n    for (register int i=2;i<=m;i++)\n        pos_dis[i] = INF;\n    while (!q.empty()){\n        int u = q.front();\n        q.pop();\n        inq[u] = false;\n        for (register int i=pos_head[u];i!=0;i=pos_edge[i].from){\n            int v = pos_edge[i].to;\n            int w = pos_edge[i].dis;\n            if (pos_dis[v]>w || pos_dis[v]<pos_dis[u]){\n                pos_dis[v] = min(w,pos_dis[u]);\n                if (!inq[v]){\n                    inq[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nvoid nag_spfa(int s){\n    queue<int> q;\n    memset(inq,false,sizeof(inq));\n    q.push(s);\n    inq[s] = true;\n    nag_dis[m] = ball_val[m];    \n    for (register int i=1;i<m;i++)\n        nag_dis[i] = -INF;\n\n    while (!q.empty()){\n        int u = q.front();\n        q.pop();\n        inq[u] = false;\n        for (register int i=nag_head[u];i!=0;i=nag_edge[i].from){\n            int v = nag_edge[i].to;\n            int w = nag_edge[i].dis;\n            if (nag_dis[v]<w || nag_dis[v]<nag_dis[u]){\n                nag_dis[v] = max(w,nag_dis[u]);\n                if (!inq[v]){\n                    inq[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nint main(){\n    n = read();m = read();\n    for (register int i=1;i<=n;i++)\n        ball_val[i] = read();\n    for (int i=1;i<=m;i++){\n        u =read();v = read();dir = read();\n        switch(dir){\n            case 1:\n                pos_add_edge(u,v,ball_val[v]);\n                nag_add_edge(v,u,ball_val[u]);\n                break;\n            case 2:\n                pos_add_edge(u,v,ball_val[v]);\n                nag_add_edge(v,u,ball_val[u]);\n                pos_add_edge(v,u,ball_val[u]);\n                nag_add_edge(u,v,ball_val[v]);\n                break;\n        }\n    }\n    pos_spfa(1);nag_spfa(n);\n    for (register int i=1;i<=n;i++){\n        w = nag_dis[i] - pos_dis[i];\n        ans = max(ans,w);\n    }    \n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1507453562,
        "uid": 20197,
        "name": "ShawnZhou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "![](https://cdn.luogu.com.cn/upload/pic/27.png)\n\n\u5176\u5b9e\u65b9\u6cd5\u548c\u5fae\u5fae\u4e00\u7b11\u4e00\u6837\u7684\uff0c\u4f46\u662f\u6211\u60f3\u7ed9\u5927\u5bb6\u770b\u770b\u6211\u7528printf\u5982\u4f55\u5c42\u5c42\u7f29\u5c0f\u9519\u8bef\u8303\u56f4\uff0c\u5e76\u6700\u7ec8\u7406\u89e3\u5230\u6211\u7684\u903b\u8f91\u9519\u8bef\uff0c\u5e76\u4e14\u575a\u5b9a\u5fae\u5fae\u4e00\u7b11\u662f\u5bf9\u7684\u3002\n\nprintf\u68c0\u9519\u5723\u5668\u867d\u7136\u5927\u591a\u90fd\u8bf4\u662f\u8f93\u51fa\u4e2d\u95f4\u503c\uff0c\u4f46\u5177\u4f53\u600e\u4e48\u8f93\u5165\uff0c\u786e\u5b9e\u4e0d\u660e\u3002\u4f46\u6211\u60f3\u5230\u4e00\u4e2a\u6280\u5de7\uff08\u4e5f\u8bb8\u662f\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u5c0f\u5c0f\u8fdb\u9636\u5427\uff09\u3002\n\n\u6280\u5de7\uff1a\u5c42\u65ad\u6cd5\u3002\uff08\u53c8\u81ea\u5df1\u521b\u8bcd(\uff40\u30fb\u03c9\u30fb\u00b4)\uff09\n\n\u9996\u5148\u9884\u89c8\u603b\u4f53\uff0c\u60f3\u51fa\u6700\u6709\u53ef\u80fd\u51fa\u9519\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6211\u7684\u5c31\u662fspfa\u90e8\u5206\uff0c\u5728\u6253\u4ee3\u7801\u662f\u5c31\u6709\u4e2a\u7b2c\u516d\u611f\uff1a(\u03a9\u0414\u03a9)\u8fd9\u91cc\u4e00\u5b9a\u6709\u95ee\u9898\uff0c\u7279\u522b\u6613\u9519\u3002\n\n\u4f46\u8fd8\u662f\u6709\u7591\u60d1\uff0c\u4e8e\u662f\u5c31\u4e86debug no.1\u9996\u5148\u68c0\u67e5\u4e00\u4e0b\u624b\u52a8\u961f\u5217\u6307\u9488\u7684\u6570\u91cf\u4ee5\u53ca\u8d4b\u503c\u95ee\u9898\u6765\u5224\u65ad\u662f\u5426\u628a\u6574\u4e2a\u56fe\u7ed9\u904d\u5386\u4e86\u4e00\u904d\uff0c\u7ed3\u679c\u53d1\u73b0\u53ea\u5165\u4e86\u7b2c\u4e00\u4e2a\u70b9\u5c31\u6302\u4e86\uff0c\u65ad\u6b7b\u4e86\u3002\n\n\u4e8e\u662f\u5c31\u7acb\u9a6c\u56de\u53bb\u518d\u6b21\u9884\u89c8\u4e00\u4e0b\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u3002\u786e\u4fdd\u540e\uff0c\u5f80debug no.2\u7684\u90a3\u4e00\u5c42\u8d70\uff0c\u7acb\u9a6c\u627e\u51fa\u4e86\u7b2c\u4e00\u4e2a\u9519\u201c]\u201d\u4e66\u5199\u7684\u95ee\u9898\u3002\u66f4\u6539\u540e\u6d4b\u8bd5\u6837\u4f8b\u3002\u9519\u7684\uff08(\u2565\u256f^\u2570\u2565)\uff09\u3002\n\n\u4e8e\u662f\u4e0d\u653e\u5f03\u7684\u6211\uff08\u0cb0\\_\u0cb0 ...\u5fc3\u585e\uff09\u7ee7\u7eed\u4e86debug no.3\u68c0\u9a8c\u4ed6\u4eec\u7684\u5177\u4f53\u5728\u8fd0\u4f5c\u524d\u540e\u7684\u53d8\u5316\u3002\u7ed3\u679c\u8ddf\u7740\u6570\u636e\u904d\u5386\u56fe\u770b\u4e86\u770b\uff0c\u53d1\u73b0\u5230\u4e865\u90a3\u4e2a\u70b9\u65f6\uff0c\u6700\u5c0f\u503c\u66f4\u4e3a4\uff08\u524d\u63d0\u4e3a\u4e86\u4fdd\u8bc1\u81f3\u5c11\u5165\u961f\u4e00\u6b21\u6700\u5c0f\u503c\u96641\u70b9\u5916\u5168\u4e3a\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u7684\u6570\uff09\uff0c\u4f46\u662f\u6211\u60f3\u4e86\u60f3\u6570\u636e5\u90a3\u4e2a\u5e94\u8be5\u4e3a1\uff0c\u7ed3\u679c\u53c8\u770b\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u6d41\u7a0b\u4e2d\u6211\u6839\u672c\u5c31\u6ca1\u6709\u6d89\u53ca\u5230\u5f53\u524d\u70b9\u4f4d\u672c\u6765\u7684\u503c\uff08\u8fd9\u4e2a\u5c0f\u81ed\u866b\uff09\u8054\u60f3\u5230\u4e86\u628a\u5b83\u518d\u6765\u6bd4\u8f83\u4e00\u6b21\u7684\u60f3\u6cd5\uff0c\u56e0\u6b64\u5c31\u6539\u4e86\u6539\u4ee3\u7801\uff0c\u5c31\u8fc7\u4e86\u3002\n\n\n\u8fd8\u6709\u8fd9\u9053\u9898\u6211\u505a\u4e86\u4e24\u5929\uff0c\u7ec8\u4e8eA\u4e86\uff08(\u2565\u256f^\u2570\u2565)\u5624\u5624\u5624\uff09\n\n############\n\n\u5177\u4f53\u6d41\u7a0b\u8f93\u51fa\uff1a\n\n5 5\n4 3 5 6 1\n\n1 2 1\n1 4 1\n2 3 2\n3 5 1\n4 5 2\nwhen q[first]=1, now in: first=0 last=1\n\nbefore the if :ans[1]=0,x=2,dp[]=2\n\nI am in the part's body\n\n```cpp\nbefore work:ans[4]=0,x=2,dmin[1]=4,dmin[4]=1073741823\nafter work:ans[4]=2,x=2,dmin[1]=4,dmin[4]=4\npast the if :ans[4]=2,x=2,dp[]=2\nbefore the if :ans[1]=0,x=0,dp[]=-1\n```\nI am in the part's body\n\n```cpp\nbefore work:ans[2]=0,x=0,dmin[1]=4,dmin[2]=1073741823\nafter work:ans[2]=0,x=0,dmin[1]=4,dmin[2]=3\npast the if :ans[2]=0,x=0,dp[]=-1\nwhen q[first]=4, now out: first=1 last=3\nwhen q[first]=4, now in: first=1 last=3\nbefore the if :ans[4]=2,x=2,dp[]=-3\n```\nI am in the part's body\n\n```cpp\nbefore work:ans[5]=0,x=2,dmin[4]=4,dmin[5]=1073741823\nafter work:ans[5]=2,x=2,dmin[4]=4,dmin[5]=1\npast the if :ans[5]=2,x=2,dp[]=-3\nwhen q[first]=2, now out: first=2 last=4\nwhen q[first]=2, now in: first=2 last=4\nbefore the if :ans[2]=0,x=2,dp[]=2\n```\nI am in the part's body\n\n```cpp\nbefore work:ans[3]=0,x=2,dmin[2]=3,dmin[3]=1073741823\nafter work:ans[3]=2,x=2,dmin[2]=3,dmin[3]=3\npast the if :ans[3]=2,x=2,dp[]=2\nwhen q[first]=5, now out: first=3 last=5\nwhen q[first]=5, now in: first=3 last=5\nbefore the if :ans[5]=2,x=5,dp[]=5\n```\nI am in the part's body\n\n```cpp\nbefore work:ans[4]=2,x=5,dmin[5]=1,dmin[4]=4\nafter work:ans[4]=5,x=5,dmin[5]=1,dmin[4]=1\npast the if :ans[4]=5,x=5,dp[]=5\nwhen q[first]=3, now out: first=4 last=6\nwhen q[first]=3, now in: first=4 last=6\nbefore the if :ans[3]=2,x=2,dp[]=-2\npast the if :ans[5]=2,x=2,dp[]=-2\nbefore the if :ans[3]=2,x=2,dp[]=0\n```\nI am in the part's body\n\n```cpp\nbefore work:ans[2]=0,x=2,dmin[3]=3,dmin[2]=3\nafter work:ans[2]=2,x=2,dmin[3]=3,dmin[2]=3\npast the if :ans[2]=2,x=2,dp[]=0\nwhen q[first]=4, now out: first=5 last=7\nwhen q[first]=4, now in: first=5 last=7\nbefore the if :ans[4]=5,x=5,dp[]=0\n```\nI am in the part's body\n\n\n\n```cpp\nbefore work:ans[5]=2,x=5,dmin[4]=1,dmin[5]=1\nafter work:ans[5]=5,x=5,dmin[4]=1,dmin[5]=1\npast the if :ans[5]=5,x=5,dp[]=0\nwhen q[first]=2, now out: first=6 last=8\nwhen q[first]=2, now in: first=6 last=8\nbefore the if :ans[2]=2,x=2,dp[]=2\npast the if :ans[3]=2,x=2,dp[]=2\nwhen q[first]=5, now out: first=7 last=8\nwhen q[first]=5, now in: first=7 last=8\nbefore the if :ans[5]=5,x=5,dp[]=5\npast the if :ans[4]=5,x=5,dp[]=5\nwhen q[first]=0, now out: first=8 last=8\nans[5]=5\n```\n#########\n\u4ee3\u7801\uff1a\n\n```cpp\n//\u6700\u4f18\u8d38\u6613-\u6d1b\u8c37-p1073 \n//\u7b2c\u4e09\u6b21\u4e66\u5199+\u6d4b\u9a8c,\u60f3\u60f3\u5982\u4f55\u9ad8\u6548\u68c0\u9519 \n//spfa\u4e00\u6b21\u8dd1\u8fc7\uff0c\u60f3\u60f3\u8fd9\u8d27\u5230\u5e95\u6709\u6ca1\u6709\u6309\u903b\u8f91\u8ddf\u7740\u8d70\uff0c\u5e76\u4e14\u662f\u5bf9\u7684 \n//\u8bb0\u5fc6\u903b\u8f91,\u627e\u51fa\u95ee\u9898\uff0c\u5e76\u60f3\u529e\u6cd5\u628a\u4ed6\u5904\u7406\u6389 \n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nconst int maxn=1e5;\nvoid init();\nint n,m,dmax[maxn+11],dmin[maxn+11];\nvoid add(int,int);\nint head[maxn],cnt;\nstruct node{int v,next;}e[maxn*10];\nvoid spfa();\nint q[maxn+11],vis[maxn+11],ans[maxn+11],first,last;\nvoid debug();\nint main()\n{\n//    freopen(\"std.out\",\"w\",stdout);\n    init();//put the data in this\n    spfa();//there is only one main work struct,it can print the ans\n    return 0;\n}\nvoid init()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&dmax[i]);\n        dmin[i]=(1<<30)-1;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,j;\n        scanf(\"%d %d %d\",&u,&v,&j);\n        add(u,v);if(j==2)add(v,u);\n    }\n}\nvoid add(int u,int v)\n{\n    e[++cnt].v=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nvoid spfa()\n{\n    q[last++]=1;//\u4e0d\u6e05\u6670\u6613\u9519 \n    vis[1]=1;\n    dmin[1]=dmax[1];\n    while(last!=first)\n    {\n        int u=q[first]; vis[u]=0;\n        printf(\"\\nwhen q[first]=%d, now in: first=%d last=%d\\n\",q[first],first,last);//debug No.1\u67e5\u770b\u662f\u5426\u6709\u5934\u5c3e\u6307\u9488\u51fa\u9519 \n        for(int i=head[u];i;i=e[i].next)\n        {\n            int x=ans[u]>(dmax[e[i].v]-dmin[u])?ans[u]:dmax[e[i].v]/*\u8fd9\u91cc\u5c11\u5199\u4e86\"]\"\u5bfc\u81f4\u8d4b\u503c\u51fa\u9519*/-dmin[u]/*\u8fd9\u91cc\u53c8\u591a\u6253\u4e86\"]\"\u5bfc\u81f4\u7f16\u8bd1\u5668\u672a\u62a5\u9519*/;//\u8003\u8651\u6700\u4f18\uff0c\u5f53\u524d\u503c\u4e0e\u5728\u5f53\u524d\u4e70\u4e0b\u4e00\u4e2a\u70b9\u5356\u503c\u83b7\u5f97 \n            printf(\"before the if :ans[%d]=%d,x=%d,dp[]=%d\\n\",u,ans[u],x,dmax[e[i].v]-dmin[u]);//debug No.2\n            if(x>ans[e[i].v]||dmin[u]<dmin[e[i].v])\n            {\n                printf(\"I am in the part's body\\n\");\n                printf(\"before work:ans[%d]=%d,x=%d,dmin[%d]=%d,dmin[%d]=%d\\n\",e[i].v,ans[e[i].v],x,u,dmin[u],e[i].v,dmin[e[i].v]);//debug no.3        \n                ans[e[i].v]=ans[e[i].v]>x?ans[e[i].v]:x;\n                dmin[e[i].v]=dmin[u]>dmin[e[i].v]?dmin[e[i].v]:dmin[u];\n                dmin[e[i].v]=dmin[u]>dmax[e[i].v]?dmax[e[i].v]:dmin[u];//\u8fd9\u91cc\u662f\u6700\u540e\u8865\u4e0a\u7684\u64cd\u4f5c \n                printf(\"after work:ans[%d]=%d,x=%d,dmin[%d]=%d,dmin[%d]=%d\\n\",e[i].v,ans[e[i].v],x,u,dmin[u],e[i].v,dmin[e[i].v]);//debug no.3\n                if(!vis[e[i].v]) vis[e[i].v]=1,q[last++]=e[i].v;\n            }\n            printf(\"past the if :ans[%d]=%d,x=%d,dp[]=%d\\n\",e[i].v,ans[e[i].v],x,dmax[e[i].v]-dmin[u]);//debug No.3\n        }\n        ++first;\n        printf(\"when q[first]=%d, now out: first=%d last=%d\\n\",q[first],first,last);//debug No.1\n    }\n    printf(\"%d\",ans[n]); \n}\n```",
        "postTime": 1503232970,
        "uid": 26231,
        "name": "\u65e0\u4e50\u9e26",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u5bb6\u7684\u9898\u89e3\u90fd\u6ca1\u6709\u7f29\u70b9DP\u7684\uff0c\u6211\u5c31\u4e71\u5199\u4e86\u4e00\u4e2a\u3002\u7531\u4e8e\u672c\u4eba\u6c34\u5e73\u592a\u6e23\uff0c\u76f4\u63a5\u6df1\u641c\uff0c\u6709\u70b9\u7206\u6808\uff0c\u53ea\u670990\u5206\uff0c\u4e0d\u8fc7\u636e\u8bf4linux\u6808\u4f1a\u7565\u5927\u4e00\u70b9\uff0c\u6216\u8bb8\u5c31\u53ef\u4ee5\u6c34\u8fc7\u4e86\u3002\u6240\u4ee5\u672c\u9898\u89e3\u5e76\u4e0d\u9002\u5408\u590d\u5236\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n\n\u601d\u8def\u6bd4\u8f83\u597d\u60f3\uff1a\u5f3a\u8054\u901a\u5206\u91cf\u4e4b\u95f4\u662f\u62d3\u6251\u7684\uff0c\u518d\u52a0\u4e0a50%\u7684\u6570\u636e\u6ca1\u6709\u73af\uff0c\u8fd9\u5c31\u6697\u793a\u6211\u4eec\uff0c\u53ef\u4ee5\u7f29\u70b9DP\u3002\u6211\u5728\u8fd9\u91cc\u91c7\u7528\u4e86tarjan\u7b97\u6cd5\u6765\u6c42\u51fa\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u5206\u522b\u8bb0\u5f55\u6700\u5c0f\u548c\u6700\u5927\u4ef7\u683c\u3002\u7136\u540e\u7f29\u70b9\u65f6\uff0c\u6211\u4e0d\u77e5\u9053\u6709\u4ec0\u4e48\u597d\u65b9\u6cd5\uff0c\u5c31\u76f4\u63a5\u5efa\u4e86\u4e00\u4e2a\u65b0\u56fe\uff0c\u7136\u540eDP,\u65b9\u7a0b\u5927\u4f53\u7c7b\u4f3cSPFA\u3002\n\n```delphi\nprogram trade;\nconst maxn=100001;\n      maxm=500001;\n      maxq=200000;\nvar h,h2,dfn,low,stack,naive,big,small,rd,new,money:array[1..maxn] of longint;\n    queue:array[1..200003] of longint;\n    visit,f:array[1..maxn] of boolean;\n    v,v2,next,nt:array[1..maxm] of longint;\n    n,p,hd,tl,i,s,t,deep,d,m,qs,z,num:longint;\nfunction min(a,b:longint):longint;\nbegin\n    if a>b then exit(b) else exit(a);\nend;\nfunction max(a,b:longint):longint;\nbegin\n    if a>b then exit(a) else exit(b);\nend;\nprocedure print(x:longint);\nbegin\n    while stack[deep]<>x do\n    begin\n        new[stack[deep]]:=x;\n        big[x]:=max(big[x],naive[stack[deep]]);\n        small[x]:=min(small[x],naive[stack[deep]]);\n        f[stack[deep]]:=false;\n        dec(deep);\n    end;\n    new[stack[deep]]:=x;\n    big[x]:=max(big[x],naive[stack[deep]]);\n    small[x]:=min(small[x],naive[stack[deep]]);\n    f[stack[deep]]:=false;\n    dec(deep);\nend;\nprocedure dfs(x:longint);\nvar i,qs:longint;\nbegin\n    inc(d);\n    dfn[x]:=d;\n    low[x]:=d;\n    inc(deep);\n    stack[deep]:=x;\n    f[x]:=true;\n    qs:=h[x];\n    while qs>0 do\n    begin\n        if not visit[v[qs]] then\n        begin\n            visit[v[qs]]:=true;\n            dfs(v[qs]);\n            low[x]:=min(low[x],low[v[qs]]);\n        end\n        else\n            if f[v[qs]] then low[x]:=min(low[x],dfn[v[qs]]);\n        qs:=next[qs];\n    end;\n    if dfn[x]=low[x] then print(x);\nend;\n\nbegin\n\n    fillchar(visit,sizeof(visit),false);\n    fillchar(f,sizeof(f),false);\n    fillchar(h,sizeof(h),0);\n    fillchar(h2,sizeof(h2),0);\n    fillchar(new,sizeof(new),0);\n    fillchar(big,sizeof(big),0);\n    fillchar(small,sizeof(small),1);\n    fillchar(rd,sizeof(rd),0);\n    fillchar(money,sizeof(money),0);\n    read(n,m);\n    p:=0;\n    for i:=1 to n do read(naive[i]);\n    for i:=1 to m do\n    begin\n        read(s,t,z);\n        inc(p);\n        v[p]:=t;\n        next[p]:=h[s];\n        h[s]:=p;\n        if z=2 then\n        begin\n            inc(p);\n            v[p]:=s;\n            next[p]:=h[t];\n            h[t]:=p;\n        end;\n    end;\n    for i:=1 to n do if not visit[i] then\n    begin\n        visit[i]:=true;\n        dfs(i);\n    end;\n    p:=0;\n    for i:=1 to n do\n    begin\n        qs:=h[i];\n        while qs>0 do\n        begin\n            t:=v[qs];\n            if new[t]<>new[i] then\n            begin\n            inc(p);\n            inc(rd[new[t]]);\n            v2[p]:=new[t];\n            nt[p]:=h2[new[i]];\n            h2[new[i]]:=p;\n            end;\n            qs:=next[qs];\n        end;\n    end;\n    hd:=0;\n    tl:=0;\n    num:=0;\n    for i:=1 to n do if (rd[i]=0)and(i=new[i]) then\n    begin\n        tl:=tl mod maxq +1;\n        queue[tl]:=i;\n        inc(num);\n    end;\n    while num>0  do\n    begin\n        hd:=hd mod maxq+1;\n        qs:=h2[queue[hd]];\n        dec(num);\n        while qs>0 do\n        begin\n            t:=v2[qs];\n            dec(rd[t]);\n            small[t]:=min(small[t],small[queue[hd]]);\n            money[t]:=max(money[queue[hd]],big[t]-small[t]);\n            if rd[t]=0 then\n            begin\n                tl:=tl mod maxq +1;\n                queue[tl]:=t;\n                inc(num);\n            end;\n            qs:=nt[qs];\n        end;\n    end;\n    if (money[new[n]])>0 then\n    writeln(money[new[n]]) else writeln(0);\nend.\n```",
        "postTime": 1446204073,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u6211\u521a\u5f00\u59cb\u60f3\u5f97\u504f\u7b80\u5355\u4e86\uff0c\u6211\u7684\u60f3\u6cd5\u662f\uff1a\u6309\u6bcf\u4e2a\u70b9\u5411\u5176\u4ed6\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u6269\u5230\u5c31\u5165\u961f\uff0c\u5165\u961f\u5c31\u8bb0\u5f55\u524d\u9a71\uff0c\u6700\u540e\u628a\u6bcf\u6761\u8def\u5b9e\u8df5\u4e00\u904d\u3002\u7136\u800c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6302\u4e86\u3002\n\n\u540c\u5176\u4ed6\u51e0\u4f4d\u5927\u795e\u8bf4\u7684\uff0c\u6b64\u9898\u53ef\u7528\u4e24\u6b21spfa\u89e3\u51b3\uff0c\u7136\u800c\u8fd9\u5bf9\u6700\u77ed\u8def\u6e23\u6e23\u7684\u6211\u6765\u8bf4\u65e0\u7591\u662f\u4e00\u6b21\u6311\u6218\uff08\u672c\u4eba\u9db8\uff0c\u5927\u795e\u52ff\u55b7\uff09\uff0c\u7b2c\u4e00\u6b21\uff0c\u4ece1\u5f00\u59cb\u8d70\uff0c\u8d70\u5230\u7ec8\u70b9\uff0c\u6c42\u51famin[i]\uff0c\u5373\u4ece1\u5230i\u7684\u6700\u5c0f\u8fdb\u4ef7\uff0c\u7136\u540e\u5982\u6cd5\u70ae\u5236\u5730\u4ecen\u8d70\u56de\u6765\uff0c\u6c42\u51famax[i]\uff0c\u5373\u4ecei\u5230n\u7684\u6700\u5927\u51fa\u552e\u4ef7\uff0c\u8fd9\u4e2a\u5176\u4ed6\u51e0\u4f4d\u5927\u795e\u4e5f\u63d0\u5230\u4e86\uff08\u7136\u800c\u6211\u5c45\u7136\u5b9e\u73b0\u4e86\u5c06\u8fd13\u4e2a\u5c0f\u65f6\uff01\uff01\uff01\uff09\u3002\u90a3\u4e48\uff0c\u5269\u4e0b\u7684\u6211\u5728\u4ee3\u7801\u91cc\u4f1a\u8fdb\u884c\u6279\u6ce8\n\n```delphi\n\nvar\n  i,j,n,m,x,y,z,num,maxn,num2:longint;\n  a,max,min:array[0..100001] of integer;\n  que,head,head2:array[0..100001] of longint;\n  inque:array[0..100001] of boolean;\n  vet,next,vet2,next2:array[0..500001] of longint;\nprocedure add(x,y:longint);\nbegin\n  inc(num);\n  next[num]:=head[x];\n  head[x]:=num;\n  vet[num]:=y;\nend;\nprocedure add2(x,y:longint);//\u4ecen\u56de\u6765\u7684\u8fb9\uff0c\u4ece\u7ec8\u70b9\u8d70\u56de\u6765\u662f\u9006\u5411\u601d\u7ef4\uff0c\u6240\u4ee5\u8def\u7ebf\u8981\u76f8\u53cd\uff08\u8fd9\u6837\u5199\u7684\u8bdd\u5176\u5b9e\u672c\u8d28\u5c31\u662f\u4ecei\u8d70\u5230n\uff0c\u53ea\u662f\u4e3a\u4e86spfa\u662f\u5355\u6e90\u6700\u77ed\u8def\u800c\u5012\u8fc7\u6765\uff09\nbegin\n  inc(num2);\n  next2[num2]:=head2[x];\n  head2[x]:=num2;\n  vet2[num2]:=y;\nend;\nprocedure spfamin;//1\u5230i\u7684\u6700\u5c0f\u8fdb\u4ef7\nvar h,t,u,v,e:longint;\nbegin\n  fillchar(inque,sizeof(inque),false);\n  h:=1;t:=1;que[1]:=1;inque[1]:=true;\n  while h<=t do\n    begin\n      u:=que[(h-1) mod n+1];\n      inc(h);e:=head[u];\n      inque[u]:=false;\n      while e<>-1 do\n        begin\n          v:=vet[e];\n          if min[v]>min[u] then\n            begin\n              min[v]:=min[u];\n              if not inque[v] then\n                begin\n                  inc(t);\n                  que[(t-1) mod n+1]:=v;\n                  inque[v]:=true;\n                end;\n            end;\n          if min[v]>a[v] then//\u4fdd\u8bc1\u6bcf\u4e2a\u641c\u5230\u7684\u70b9\u90fd\u81f3\u5c11\u8fdb\u4e00\u6b21\u961f\u5217\n            begin\n              min[v]:=a[v];\n              if not inque[v] then\n                begin\n                  inc(t);\n                  que[(t-1) mod n+1]:=v;\n                  inque[v]:=true;\n                end;\n            end;\n          e:=next[e];\n        end;\n    end;\nend;\nprocedure spfamax;//i\u5230n\uff08n\u5230i\uff09\u7684\u6700\u5927\u51fa\u552e\u4ef7\nvar h,t,u,v,e:longint;\nbegin\n  fillchar(inque,sizeof(inque),false);\n  h:=1;t:=1;que[1]:=n;inque[n]:=true;\n  while h<=t do\n    begin\n      u:=que[(h-1) mod n+1];\n      inc(h);e:=head2[u];\n      inque[u]:=false;\n      while e<>-1 do\n        begin\n          v:=vet2[e];\n          if max[v]<max[u] then\n            begin\n              max[v]:=max[u];\n              if not inque[v] then\n                begin\n                  inc(t);\n                  que[(t-1) mod n+1]:=v;\n                  inque[v]:=true;\n                end;\n            end;\n          if max[v]<a[v] then//\u4fdd\u8bc1\u6bcf\u4e2a\u641c\u5230\u7684\u70b9\u90fd\u81f3\u5c11\u8fdb\u4e00\u6b21\u961f\u5217\n            begin\n              max[v]:=a[v];\n              if not inque[v] then\n                begin\n                  inc(t);\n                  que[(t-1) mod n+1]:=v;\n                  inque[v]:=true;\n                end;\n            end;\n          e:=next2[e];\n        end;\n    end;\nend;\nbegin\n  read(n,m);\n  for i:=1 to n do begin read(a[i]);head[i]:=-1;head2[i]:=-1;min[i]:=10000;max[i]:=0;end;\n  num:=0;num2:=0;\n  for i:=1 to m do\n    begin\n      read(x,y,z);\n      if z=2 then begin add(x,y);add(y,x);add2(x,y);add2(y,x);end \n             else begin add(x,y);add2(y,x);end;//\u6ce8\u610f\u8fd9\u91cc\uff01\u4ece\u7ec8\u70b9\u5f80\u56de\u5efa\u8fb9\u7684\u9006\u5411\u601d\u7ef4\u5b9e\u73b0\u65b9\u6cd5\uff01\u5f88\u5bb9\u6613\u641e\u9519\uff01\n    end;\n  spfamin;spfamax;\n  maxn:=0;\n  for i:=1 to n do\n    if maxn<max[i]-min[i] then maxn:=max[i]-min[i];//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5dee\u4ef7\uff0c\u7b97\u51fa\u6700\u5927\u503c\n  write(maxn);//\u56e0\u4e3a\u521d\u59cb\u5316\u662f0\u6240\u4ee5\u5982\u679c\u90fd\u4e0d\u5408\u7b97\u90a3\u4e48\u4e5f\u4e0d\u4f1a\u8d4b\u503c\nend.\n\n```",
        "postTime": 1441543750,
        "uid": 8496,
        "name": "twy847727884",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u4ece1\u5230n\u7684\u8def\u5f84\u4e2d\uff0c\u627e\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u6c34\u6676\u7403\u4e70\u5165\u4ef7\u683c\uff0c\u518d\u627e\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u4e70\u5165\u4ef7\u683c\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f7f\u5f97\u5dee\u4ef7\u6700\u5927\uff0c\u8d5a\u53d6\u7684\u65c5\u8d39\u6700\u591a\uff0c\u6700\u540e\u56de\u5230n\u70b9\u3002\n\n\n\u672c\u9898\u53ef\u4ee5\u7528SPFA\u6765\u505a\uff0c\u7528\u4e24\u4e2a\u6570\u7ec4f\u548cg\u6570\u7ec4\u5206\u522b\u6765\u8bb0\u5f55\u5230i\u70b9\u7684\u6700\u5927\u8d5a\u53d6\u7684\u65c5\u8d39\u548c\u5230i\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u683c\uff0c\u90a3\u4e48f[y]:=min(f[x] , f[y] , a[y]-g[x]) \u53ef\u4ee5\u662f\u4ecey\u70b9\u5356\u4ece\u5230x\u7684\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u4e70\u5165\u4ef7\u683c\u4e70\u5165\uff0c\u6216\u8005\u5c31\u662fx\u7684\u6700\u5927\u5dee\u4ef7\u3002 g[x]:=min(a[y] , g[x])\n\n\n\n```cpp\nvar tot,n,m,x,y,d,i,j,t,head,tail:longint;\n    que,a,first,g,f,next,y1:array[0..101001] of longint;\n    b:array[0..100100] of boolean;\nbegin\n  read(n,m);\n  fillchar(first,sizeof(first),0);\n  fillchar(f,sizeof(f),200);\n  for i:=1 to n do begin read(a[i]);g[i]:=a[i];end;\n  for i:=1 to m do begin\n    read(x,y,d);\n    inc(tot);\n    y1[tot]:=y;\n    next[tot]:=first[x];\n    first[x]:=tot;\n    if d=2 then begin\n      inc(tot);\n      y1[tot]:=x;\n      next[tot]:=first[y];\n      first[y]:=tot;\n    end;\n  end;\n  head:=1;tail:=1;b[1]:=true;que[1]:=1;f[1]:=0;\n  while head<=tail do begin\n    x:=que[head mod 100000];\n    t:=first[x];\n    while t>0 do begin\n      y:=y1[t];\n      if (f[x]>f[y])or(g[x]<g[y])or(a[y]-g[x]>f[y]) then begin\n        if f[x]>f[y] then f[y]:=f[x];\n        if a[y]-g[x]>f[y] then f[y]:=a[y]-g[x];\n        if g[x]<g[y] then g[y]:=g[x];\n        if b[y]=false then begin\n          b[y]:=true;inc(tail);\n          que[tail mod 100000]:=y;\n        end;\n      end;\n      t:=next[t];\n    end;\n    inc(head);\n    b[x]:=false;\n  end;\n  if f[n]=f[0] then writeln(0) else writeln(f[n]);\nend.\n\n```",
        "postTime": 1396867329,
        "uid": 605,
        "name": "\u8e66\u6781\u50f5\u5c38",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u5230\u5f88\u591a\u5927\u4f6c\u5199\u7684\u9898\u89e3\u7528\u4e86\u5404\u79cd\u7b97\u6cd5\uff0c\u8ba9\u6211\u4e0d\u7981\u6000\u7591\u6211\u662f\u4e0d\u662f\u8bfb\u9519\u9898\u76ee\u4e86\uff0c\u6216\u8005\u8bf4\u6211\u628a\u9898\u76ee\u60f3\u7b80\u5355\u4e86\uff0c\u6211\u7684\u60f3\u6cd5\u5f88\u76f4\u63a5\u660e\u4e86\uff1a\n\n\u9898\u76ee\u8981\u6c42\u4ece\u8d77\u70b91\u51fa\u53d1\u6700\u7ec8\u56de\u5230\u7ec8\u70b9n,\u4e8e\u662f\u53d8\u6210\u4e86\u5728\u56fe\u4e2d\u627e\u4e24\u4e2a\u70b9u\u548cv\uff0c\u6ee1\u8db3\u9876\u70b91\u5230\u9876\u70b9u\u53ef\u8fbe\uff0c\u9876\u70b9u\u5230\u9876\u70b9v\u53ef\u8fbe\uff0c\u9876\u70b9v\u5230\u9876\u70b9n\u53ef\u5230\uff0c\u7136\u540e\u627e\u51fa\u6700\u5927\u7684p[v]-p[u],(\u5728\u9876\u70b9u\u5904\u4e70\u8fdb\uff0c\u5728\u9876\u70b9v\u51fa\u5356\u51fa),\u5c31\u884c\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u6807\u8bb0\u54ea\u4e9b\u70b9\u662f\u9876\u70b91\u6700\u7ec8\u53ef\u4ee5\u5230\u8fbe\u7684\uff0c\u54ea\u4e9b\u70b9\u662f\u53ef\u4ee5\u5230\u8fbe\u9876\u70b9n\u7684\uff0c\u7136\u540e\u628a\u6240\u6709\u9876\u70b91\u53ef\u4ee5\u5230\u8fbe\u7684\u9876\u70b9\u6309\u7167\u5f53\u5730\u7684\u6c34\u6676\u7403\u4ef7\u683c\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u9876\u70b9\u4f5c\u4e3a\u6e90\u70b9\u8fdb\u884cbfs\u5904\u7406\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e9b\u70b9\u4f5c\u4e3a\u6e90\u70b9\u7684\u6c34\u6676\u7403\u4ef7\u683c\u4e00\u5b9a\u6bd4\u81ea\u8eab\u5927\uff0c\u7136\u540e\u5728\u904d\u5386\u5230\u67d0\u4e2a\u9876\u70b9\u4e5f\u662f\u6ee1\u8db3\u53ef\u4ee5\u5230\u8fbe\u9876\u70b9n\u7684\uff0c\u5c31\u505a\u4e00\u6b21max(p[v]-p[u])\u5904\u7406\uff0c\u8f93\u51fa\u7b54\u6848\u3002\n\n\u9488\u5bf9\u54ea\u4e9b\u8282\u70b9\u53ef\u4ee5\u5230\u8fbe\u8282\u70b9n,\u53ef\u4ee5\u5355\u72ec\u53cd\u5411\u5efa\u8fb9\uff0c\u7136\u540e\u4ee5\u8282\u70b9n\u4f5c\u4e3a\u6e90\u70b9\u8dd1BFS\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100000+10;\nconst int M=500000+10;\nvector<int>edge[N],adge[N];\nint p[N];\nbool vis[10][N];\nqueue<int>q;\nvoid bfs(int x,int key)\n{\n\twhile(!q.empty())\n\tq.pop();\n\tq.push(x);\n\tvis[key][x]=true;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tif(key==1)\n\t\t{\n\t\t\tfor(int i=0;i<edge[u].size();i++)\n\t\t\t{\n\t\t\t\tint v=edge[u][i];\n\t\t\t\tif(vis[key][v])continue;\n\t\t\t\tvis[key][v]=true;\n\t\t\t\tq.push(v);\n\t\t\t}\t\t\t\n\t\t}\n\t\telse if(key==2)\n\t\t{\n\t\t\tfor(int i=0;i<adge[u].size();i++)\n\t\t\t{\n\t\t\t\tint v=adge[u][i];\n\t\t\t\tif(vis[key][v])continue;\n\t\t\t\tvis[key][v]=true;\n\t\t\t\tq.push(v);\n\t\t\t}\t\t\n\t\t}\n\t}\n}\nint mx;\nvoid solve(int x,int key)\n{\n\twhile(!q.empty()) q.pop();\n\tq.push(x);\n\tvis[key][x]=true;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=0;i<edge[u].size();i++)\n\t\t{\n\t\t\tint v=edge[u][i];\n\t\t\tif(vis[key][v])continue;\n\t\t\tif(vis[2][v])\n\t\t\tmx=max(mx,p[v]-p[x]);\n\t\t\t\n\t\t\tvis[key][v]=true;\n\t\t\tq.push(v);\n\t\t}\n\t}\n}\nint a[N];\nbool cmp(int a1,int a2)\n{\n\treturn p[a1]<p[a2];\n}\nint main()\n{\n\tint n,m;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&p[i]);\n\t\ta[i]=i;\n\t}\n\tfor(int i=1;i<=n;i++)\n\tedge[i].clear(),adge[i].clear();\n\twhile(m--)\n\t{\n\t\tint u,v,k;\n\t\tscanf(\"%d%d%d\",&u,&v,&k);\n\t\tedge[u].push_back(v);\n\t\tadge[v].push_back(u);\n\t\tif(k==2)\n\t\t{\n\t\t\tedge[v].push_back(u);\n\t\t\tadge[u].push_back(v);\n\t\t}\n\t}\n\tmemset(vis,0,sizeof(vis));\n\t//\u8dd1\u9876\u70b91\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\uff0c\u5e76\u6807\u8bb0 \n\tbfs(1,1);\n\t//\u8dd1\u80fd\u5230\u8fbe\u9876\u70b9n\u7684\u6240\u6709\u8282\u70b9\uff0c\u5e76\u6807\u8bb0 \n\tbfs(n,2);\n\t//\u6309\u4ef7\u683c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\tsort(a+1,a+n+1,cmp);\n\tmx=0;\n\t//\u5f00\u59cb\u505a\u4e00\u904dBFS\u5904\u7406 \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\t//vis[3]\u8868\u793a\u5728\u8fd9\u6b21\u7684bfs\u4e2d\u88ab\u5904\u7406\u8fc7\u7684\u70b9\uff0c\u53ef\u4ee5\u4e0d\u518d\u904d\u5386\u4e86 \n\t\tif(vis[1][a[i]]&&vis[3][a[i]]==false)\n\t\t{\n\t\t\tsolve(a[i],3);\n\t\t}\n\t}\n\tcout<<mx<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1572440672,
        "uid": 118570,
        "name": "lql123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "#### \u5728\u5b66\u6821\u5237\u9898\u6ca1\u5565\u4e8b\u5e72,\u90a3\u5c31\u6765\u5199\u9898\u89e3\u5427!\n\n\u4e0d\u8981\u6700\u77ed\u8def,\u4e0d\u8981dfs.\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7f29\u70b9+topo+dp.\u5c31\u80fdAC\u672c\u9898.~~\u662f\u4e0d\u662f\u7279\u522b\u5f00\u5fc3~~.\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662ftarjan\u677f\u5b50.\u56e0\u4e3a\u4f60\u8981\u8d5a\u6700\u591a\u7684\u94b1\u5e76\u4e14\u4eces\u5230t,\u6240\u4ee5~~\u5f88\u660e\u663e~~\u662f\u8981\u7f29\u70b9\u7684.\u7f29\u70b9\u65f6\u8981\u8bb0\u4f4f\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5927\u6700\u5c0f\u503c.\n\n\u7f29\u5b8c\u540e,\u4f60\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2aDAG,\u5b83\u4e00\u5b9a\u662f\u56de\u4e0d\u5230\u4e4b\u524d\u7684\u70b9\u7684,\u6240\u4ee5\u6211\u4eec\u51e0\u4e2adp[i][0]\u4e3a\u5f53\u524d\u8def\u5f84\u6240\u9047\u5230\u7684\u6700\u5c0f\u503c,dp[i][1]\u4e3a\u6700\u5927\u7684\u7b54\u6848.\u7531\u4e8e\u6211\u4eec\u4e0d\u53ef\u80fd\u8bbf\u95ee\u4e4b\u524d\u7684\u70b9,\u6240\u4ee5\u4e0d\u7528\u8bb0\u4f4f\u6700\u5927\u503c.\u6211\u4eec\u53ea\u9700\u8981\u7528\u5f53\u524d\u70b9\u7684\u6700\u5927\u503c-dp[i][0]\u5c31\u884c\u4e86.\n\n\u8fd8\u6709\u79cd\u60c5\u51b5,\u5c31\u662f\u53ef\u80fds\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5165\u5ea6\u4e0d\u4e3a\u96f6,\u6211\u4eec\u53ea\u9700\u5c06dp\u6570\u7ec4\u7684\u521d\u59cb\u503c,\u8bbe\u6210\u6781\u5927\u6781\u5c0f\u503c\u5c31\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898.\n\n\u5176\u5b9e\u4f60\u4e0d\u7528dp[i][1]\u76f4\u63a5\u5bf9ans\u53d6max\u4e5f\u884c,\u4e0d\u8fc7\u5f53\u65f6\u505a\u7684\u65f6\u5019\u6ca1\u60f3\u5230.\n\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500005;\nvector<int> v1[maxn],v2[maxn];\nint dp[maxn][2],in[maxn];\nint dfn[maxn],low[maxn],st[maxn],bl[maxn];\nint tot,pos,dis[maxn],n,m,co[maxn][2],s,t;//c[i][0]\u4e3a\u5f3a\u8054\u901a\u5206\u91cf\u6700\u5c0f\u503c,co[i][1]\u4e3a\u6700\u5927\u503c. \nbool vis[maxn];\nvoid tarjan(int x)//\u7f29\u70b9\n{\n\tdfn[x]=low[x]=++tot,st[++pos]=x;\n\tvis[x]=1;\n\tfor(int i=0;i<v1[x].size();i++)\n\t{\n\t\tint nxt=v1[x][i];\n\t\tif(!dfn[nxt])\n\t\t{\n\t\t\ttarjan(nxt);\n\t\t\tlow[x]=min(low[x],low[nxt]);\n\t\t}else if(vis[nxt])\n\t\t{\n\t\t\tlow[x]=min(low[x],dfn[nxt]);\n\t\t}\n\t}\n\tif(low[x]==dfn[x])\n\t{\n\t\tint y=st[pos--];\n\t\tco[x][0]=dis[y];\n\t\tco[x][1]=dis[y];\n\t\tvis[y]=0;\n\t\tbl[y]=x;\n\t\tif(x==y)return;\n\t\t\n\t\twhile(y=st[pos--])\n\t\t{\n\t\t\tbl[y]=x;\n\t\t\tco[x][0]=min(co[x][0],dis[y]);\n\t\t\tco[x][1]=max(co[x][1],dis[y]);\n\t\t\tvis[y]=0;\n\t\t\tif(x==y)break;\n\t\t}\n\t}\n}\nvoid topu()\n{\n\tqueue<int> q;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(bl[i]!=i) continue;\n\t\tif(!in[i]) q.push(i);\n\t}\n\tdp[s][0]=co[s][0];\n\tdp[s][1]=co[s][1]-co[s][0];\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();q.pop();\n\t\tin[now]=-1;//\u5c06\u5165\u5ea6\u8d4b\u4e3a-1,\u9632\u6b62\u5728\u63a8\u4e00\u6b21.\n\t\tfor(int i=0;i<v2[now].size();i++)\n\t\t{\n\t\t\tint nxt=v2[now][i];\n\t\t\tdp[nxt][0]=min(min(dp[now][0],co[nxt][0]),dp[nxt][0]);\n\t\t\tdp[nxt][1]=max(dp[nxt][1],co[nxt][1]-dp[nxt][0]);\n\t\t\tdp[nxt][1]=max(dp[nxt][1],dp[now][1]);\n\t\t\tin[nxt]--;\n\t\t\tif(!in[nxt]) q.push(nxt);\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&dis[i]);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);z--;\n\t\tv1[x].push_back(y);\n\t\tif(z) v1[y].push_back(x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdp[i][0]=1e9;dp[i][1]=-1e9;\n\t\tif(!dfn[i])\n\t\t{\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\ts=bl[1];\n\tt=bl[n];\n\tif(s==t)\n\t{\n\t\tprintf(\"%d\",co[s][1]-co[s][0]);\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<v1[i].size();j++)\n\t\t{\n\t\t\tint x=bl[i],y=bl[v1[i][j]];\n\t\t\tif(x!=y)\n\t\t\t{\n\t\t\t\tv2[x].push_back(y);\n\t\t\t\tin[y]++;\n\t\t\t}\n\t\t}\n\t}\n\ttopu();\n\tdp[t][1]=max(dp[t][1],0);\n\tprintf(\"%d\",dp[t][1]);\n}\t\n```\n",
        "postTime": 1571195153,
        "uid": 53852,
        "name": "\u5f26\u5dfb\u3053\u3053\u308d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u9996\u5148\uff0c**SPFA\u5927\u6cd5\u6ca1\u6b7b\uff01\uff01\uff01**\n\n\n\n# \u6b65\u5165\u6b63\u9898\n\n## \u5f00\u59cb\n\u56e0\u4e3a\u6211\u521a\u5b66\u5b8c\u6700\u77ed\u8def\u6ca1\u591a\u4e45\uff08\u6240\u4ee5\u8fd9\u5e94\u8be5\u4f1a\u662f\u4e00\u7bc7\u5bf9\u65b0\u624b\u6bd4\u8f83\u53cb\u597d\u7684\u9898\u89e3QAQ\uff09\uff0c\u8fd9\u9898\u6d89\u53ca\u5230\u4e86\u8d39\u7528\u95ee\u9898\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u6700\u77ed\u8def\uff0c\u4f46\u662f\u6211\u53ea\u4f1aFloyd\uff0cdijkstra\u8fd8\u6709SPFA\uff0c\u4f46\u662f\u4e00\u60f3\u5230\u4e70\u548c\u5356\uff0c\u5f53\u7136\u662f\u4e00\u4e2a\u6b63\u6570\u4e00\u4e2a\u8d1f\u6570\uff0c\u4e8e\u662f\u679c\u65ad\u9009\u62e9SPFA\uff08\u8bfe\u4e0a\u8bf4\u4e00\u6709\u8d1f\u6743\u8fb9\u5c31\u7528SPFA\uff0cQAQ\uff09\n\n## \u6838\u5fc3\u601d\u60f3\n\n### \u5f15\u5165\n\u8bfe\u4e0a\u8bb2\u4e86\u8fd9\u9053\u9898\u7684\u5927\u6982\u8f6e\u5ed3\uff0c\u6838\u5fc3\u601d\u60f3\u662f**\u5206\u5c42\u56fe**\uff0c\n>>\u901a\u4fd7\u6765\u8bb2\u5c31\u662f\u628a\u4e0d\u540c\u7684**\u72b6\u6001**\u7528**\u4e0d\u540c\u5c42\u7684\u56fe**\u6765\u8868\u8fbe~~\u611f\u89c9\u5176\u5b9e\u70b9\u90fd\u4e0d\u901a\u4fd7~~\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u9053\u7b80\u5355\u7684\u6c42\u6700\u77ed\u8def\u7684\u9898\u76ee\uff0c\u5b83\u786c\u662f\u52a0\u4e0a\u4e86\u67d0\u4e9b~~\u82b1\u91cc\u80e1\u54e8\u7684~~\u6761\u4ef6\uff0c\u8ba9\u4f60\u4e0d\u80fd\u90a3\u4e48\u987a\u5229\u7684\u6c42\u6700\u77ed\u8def,\u8fd9\u65f6\u5c31\u53ef\u4ee5\u5c06\u9650\u5236\u6761\u4ef6\u8f6c\u53d8\u6210\u67d0\u79cd\u72b6\u6001\u5e76\u5355\u72ec\u4f5c\u4e3a\u4e00\u5c42\u56fe\n\n\u5c31\u6bd4\u5982\u8fd9\u9898\uff0c\u672c\u6765\u53ef\u4ee5\u662f\u4e00\u4e2a\u65c5\u8005\u627e\u524d\u5f80\u67d0\u4e2a\u57ce\u5e02\u7684\u6700\u77ed\u8def\u52b2\uff0c\u4f46\u662f\u5b83\u53c8\u52a0\u4e0a\u4e86balabala\u6c34\u6676\u7403\u8d38\u6613\u6c34\u6676\u7403\u4ec0\u4e48\u7684\uff0c\u8fd8\u8981\u4f60\u6c42\u6700\u5927\u6536\u76ca\u3002\n\n\u53ef\u80fd\u53ef\u80fd\u5f88\u5bb9\u6613\u60f3\u5230\u5efa\u4e00\u5f20\u56fe\uff0c\u7528\u57ce\u5e02\u4e0e\u57ce\u5e02\u4e4b\u95f4\u7684\u6743\u503c\u6765\u8868\u793a\uff0c\u4f46\u8bd5\u95ee\u5982\u4f55\u7528\u4e00\u6761\u8fb9\u6765\u9009\u62e9\u8d2d\u4e70\uff0c\u51fa\u552e\uff0c\u8fd8\u662f\u76f4\u63a5\u8def\u8fc7\u5462\uff1f\n\n\u5047\u5982\u65c5\u884c\u8005\u4e00\u5f00\u59cb\u6709\u4e00\u4e2a\u9762\u5305\uff0c\u6cbf\u9014\u7ecf\u8fc7\u67d0\u4e2a\u57ce\u5e02\u9700\u8981\u5403\u4e00\u5b9a\u91cf\u7684\u9762\u5305\uff0c\u8fd9\u65f6\u4e0a\u8ff0\u7684\u505a\u6cd5\u5c31\u5f88\u65b9\u4fbf\u4e86\uff0c\u5c06\u5403\u7684\u9762\u5305\u91cf\u4f5c\u4e3a\u6743\u503c\u6c42\u6700\u77ed\u8def\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u5219\u4e0d\u7136\uff0c\u8fd9\u65f6\u5206\u5c42\u56fe\u7684\u4f18\u52bf\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\u2014\u2014\u5c06\u4e0d\u540c\u72b6\u6001\u5206\u522b\u4f5c\u4e3a\u4e00\u5f20\u56fe\u3002\n\n## \u5b9e\u64cd\n\n\u9996\u5148\u6211\u7528\u4e00\u7ec4~~\u4e71\u6253\u7684~~\u7b80\u5355\u7684\u6570\u636e\u6765\u4e3e\u4f8b\n\n```c\n3 3\n3 4 5\n1 2 1\n1 3 1\n2 3 1\n```\n\n### \u5efa\u56fe\uff08\u90bb\u63a5\u8868\uff09\n\n#### \u5173\u4e8e\u5c42\n\u56e0\u4e3a\u9898\u76ee\u8bf4\u53ea\u4f1a\u4e70\u5356\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u4ec0\u4e48\u90fd\u6ca1\u6709\u4f5c\u4e3a\u4e00\u5c42\uff0c\u8d2d\u4e70\u4e86\u6c34\u6676\u7403\u4f5c\u4e3a\u4e00\u5c42\uff0c\u51fa\u552e\u4e86\u6c34\u6676\u7403\u4f5c\u4e3a\u4e00\u5c42\uff0c\u518d\u8003\u8651\u5230\u662f\u5148\u8d2d\u4e70\u518d\u51fa\u552e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u5411\u4e0b\u5206\u522b\u4f5c\u4e3a1\uff0c2\uff0c3\u5c42\uff08\u987a\u5e8f\u4e0d\u91cd\u8981\uff09\u3002\n\n\u5982\u4e0b\n\n![](https://cdn.luogu.com.cn/upload/pic/73213.png\n)\n\n\u6211\u4eec\u5c06\u8de8\u5c42\u7684\u64cd\u4f5c\u5bf9\u5e94\u5230\u72b6\u6001\u7684\u53d8\u5316\u6216\u8f6c\u79fb\uff0c\u4e5f\u5c31\u662f\u4ece\u7b2c\u4e00\u5c42\u5230\u7b2c\u4e8c\u5c42\u5c31\u662f\u8d2d\u4e70\uff0c\u7b2c\u4e8c\u5c42\u5230\u7b2c\u4e09\u5c42\u5c31\u662f\u51fa\u552e\u3002\n\n##### \u4ee3\u7801\u5b9e\u73b0\n```cpp\nvoid ins_self(int node,int val){\n\tG[node].push_back(make_edge(node+n,-val));\n\tG[node+n].push_back(make_edge(node+2*n,val));\n}\n\nfor (int i = 1; i <= n; i++) {\n\tcin>> v[i];\n\tins_self(i,v[i]);\n}\n//\u5728\u4e00\u5f00\u59cb\u8f93\u5165\u6570\u636e\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5b8c\u6210\u5c42\u4e4b\u95f4\u7684\u8fde\u901a\n//G[N]\u662f\u7528\u4e8e\u5b58\u56fe\u7684\uff0cn\u662f\u57ce\u5e02\u7684\u6570\u91cf\uff0cv[i]\u662f\u4e0d\u540c\u57ce\u5e02\u7684\u6807\u4ef7\n//make_edge\u51fd\u6570\u662f\u5c06\u67d0\u6761\u8fb9\u7684\u7ec8\u70b9\u548c\u8fb9\u6743\u6253\u5305\u6210\u7ed3\u6784\u4f53\u4ee5\u65b9\u4fbf\u5b58\u5165G[N]\u4e2d\n//N\u662f\u67d0\u4e2a\u5e38\u6570\n```\n\n#### \u5173\u4e8e\u8fb9\n\u5b9e\u73b0\u7684\u65b9\u5f0f\u8fd8\u662f\u5229\u7528\u8fb9\u7684\u6743\u503c\uff0c\u6211\u4eec\u5728\u5c42\u4e0e\u5c42\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5bf9\u5e94\u7684\u6743\u503c\u5c31\u662f\u5230\u67d0\u4e2a\u57ce\u5e02\u8d2d\u4e70\u6216\u51fa\u552e\u7684\u8d39\u7528\u3002\n\n\u4f8b\u5982\u6211\u8981\u5728\u4e00\u53f7\u57ce\u5e02\u8d2d\u4e70\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4ece\u7b2c\u4e00\u5c42\u7684\u4e00\u53f7\u70b9\u8d70\u5411\u7b2c\u4e8c\u5c42\u7684\u4e00\u53f7\u70b9\uff0c\u7528\u67d0\u79cd\u624b\u6bb5\uff08\u4e00\u4e2a\u8bb0\u5f55\u70b9i\u5230\u8d77\u70b9\u8ddd\u79bb\u7684\u6570\u7ec4dis[ i ]\uff09\u6765\u8bb0\u5f55\u6743\u503c\u7684\u53d8\u5316\u3002\u53e6\u5916\u7531\u4e8e\u79fb\u52a8\u4e0d\u9700\u8981\u8d39\u7528\uff0c\u6240\u4ee5\u5c42\u5185\u90e8\u8fb9\u4e4b\u95f4\u7684\u8fb9\u6743\u90fd\u662f0\u3002\n\n##### \u4ee3\u7801\u5b9e\u73b0\n```cpp\nvoid ins(int node,int next,int val) {\n\tG[node].push_back(make_edge(next,val));\n\tG[node+n].push_back(make_edge(next+n,val));\n\tG[node+2*n].push_back(make_edge(next+2*n,val));\n}\n//\u5c42\u5185\u90e8\u7684\u70b9\u4e4b\u95f4\u7684\u5efa\u8fb9\nfor (int i = 1; i <= l; i++) {\n\tcin>> a>> b>> c;\n\tif (c == 1)\n\t\tins(a,b,0); \n\telse if (c == 2) {\n\t\tins(a,b,0);\n\t\tins(b,a,0);\n\t}\n}\n// l \u662f\u9053\u8def\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u8fb9\u7684\u6570\u91cf\n```\n\n#### \u5173\u4e8e\u70b9\n\u5728\u8fd9\u91cc\u5e76\u4e0d\u9700\u8981\u771f\u7684\u53bb\u5efa\u4e09\u5f20\u56fe\uff0c\u800c\u662f\u7ed9\u4e0d\u540c\u5c42\u70b9\u4ee5\u4e0d\u540c\u7684\u7f16\u53f7\uff0c\u76f4\u63a5\u4e3e\u4f8b\u5c31\u5f88\u5bb9\u6613\u660e\u767d\u7684\u4e86\n![](https://cdn.luogu.com.cn/upload/pic/73214.png\n)\n\u6bcf\u4e00\u5c42\u56fe\u7684\u8282\u70b9\u7f16\u53f7\u5c31\u662f\u5b83\u4e0a\u4e00\u5c42\u5bf9\u5e94\u7684\u70b9\u7684\u7f16\u53f7\u52a0\u4e0a\u70b9\u7684\u4e2a\u6570\u3002\n\n### SPFA\u7684\u5b9e\u73b0\n\u5f88\u660e\u663e\u6211\u4eec\u5e0c\u671b\u5728\u4ece\u7b2c\u4e00\u5c42\u5230\u7b2c\u4e8c\u5c42\u7684\u65f6\u5019\u8fb9\u6743\u80fd\u5c3d\u91cf\u5c0f\uff0c\u7b2c\u4e8c\u5230\u7b2c\u4e09\u5c42\u7684\u8fb9\u6743\u80fd\u5c3d\u91cf\u5927\uff0c\u90a3\u8fd9\u6837\u6211\u4eec\u5c31\u9700\u8981\u6c42\u51fa1\u53f7\u70b9\u52309\u53f7\u70b9\u7684**\u6700\u957f\u8def**\u5c31\u597d\u4e86\uff01\n\n\u53ef\u662f\u6211\u6ca1\u5b66\u8fc7\u6700\u957f\u8defQAQ\uff08\u540e\u6765\u53d1\u73b0\u6700\u957f\u8def\u597d\u50cf\u66f4\u7b80\u5355\uff09\uff0c\u4e8e\u662f\uff0c\u91cd\u70b9\uff01\u7cbe\u9ad3\uff01\u6211\u5f00\u4e86\u4e2a\u8111\u6d1e\uff0c\u80fd\u5426**\u628a\u4e70\u5f53\u4f5c\u5356\uff0c\u628a\u5356\u5f53\u4f5c\u4e70\uff0c\u628a\u4e00\u5f00\u59cb\u6ca1\u6709\u53d8\u6210\u4e00\u5f00\u59cb\u6709**\uff0c\u76ee\u7684\u662f\u5728\u9014\u4e2d\u4ee5\u5ec9\u4ef7\u5356\u6389\uff0c\u6700\u540e\u9ad8\u4ef7\u8d2d\u4e70\uff0c\u8fd9\u6837\u539f\u6765**\u8d5a\u7684\u94b1\u6700\u591a**\uff0c\u53cd\u8fc7\u6765\u4e4b\u540e\u4e0d\u4e45\u53d8\u6210\u4e86**\u4e8f\u7684\u94b1\u6700\u591a\u5417**\uff01\u6bd4\u5982\u6211\u7684\u4f8b\u5b50\u4e2d\u663e\u7136\u6700\u8d5a\u662f\uff0c1\u70b9\u4e703\u70b9\u5356\uff0c\u8d5a\u4e24\u5757\u94b1\uff0c\u8981\u662f\u53cd\u8fc7\u6765\uff0c1\u70b9\u5356\uff0c3\u70b9\u4e70\uff0c\u90a3\u4e48\u5c31\u662f\u4e8f\u4e86\u4e24\u5757\uff0c\u6b63\u597d\u5c31\u662f\u539f\u6b63\u89e3\u7684\u76f8\u53cd\u6570\uff01\n\n\u8fd9\u6837\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u6700\u77ed\u8def\u7684\u95ee\u9898\uff0c~~\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u677f\u590d\u5236\u4e0a\u53bb\u4e86~~\uff0c\u8fd9\u91cc\u9644\u4e0a\u6211\u7684\u6a21\u677f\n#### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\nqueue<int> Q;\nint spfa(int ed){\n\tQ.push(1);\n\tinq[1] = true;\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1] = 0;\n\twhile (!Q.empty()){\n\t\tint now = Q.front();\n\t\tQ.pop();\n\t\tinq[now] = false;\n\t\tfor (int i = 0;i < G[now].size();i++){\n\t\t\tedge e = G[now][i];\n\t\t\tif (dis[e.next]>dis[now]+e.val){\n\t\t\t\tdis[e.next] = dis[now] + e.val;\n\t\t\t\tif (inq[e.next] == false) {\n\t\t\t\t\tQ.push(e.next);\n\t\t\t\t\tinq[e.next] = true;\n\t\t\t\t} \n\t\t\t}\n\t\t} \n\t} \n\treturn dis[ed]==INF ? 0 : dis[ed];\n}\n```\n\n### \u6700\u540e\n\u6700\u540e\u8f93\u51faspfa\uff083*n\uff09\uff0c\u4e5f\u5c31\u662f1\u53f7\u57ce\u5e02\u7ecf\u8fc7\u8d2d\u4e70\u548c\u51fa\u552e\u4e24\u6b65\u64cd\u4f5c\u540e\u5230n\u53f7\u57ce\u5e02\uff08\u5bf9\u5e94\u7b2c\u4e09\u5c42\u76843n\u53f7\uff09\u7684\u7ed3\u679c\u7684\u7684\u76f8\u53cd\u6570\u5c31\u597d\u4e86\uff01\uff01\uff01\u6ca1\u4e86\uff01\uff01\uff01\n## \u7ed3\u5c3e\n\u7528\u4e86\u8fd9\u4e48\u4e00\u79cd\u8be1\u5f02\u7684\u505a\u6cd5\u8fd8\u662f\u6709\u70b9\u5fc3\u865a\u7684\uff0c\u770b\u5230\u8fd9\u4e48\u591adalao\u7684\u795e\u5947\u505a\u6cd5\uff0c\u8fd8\u662f\u6253\u7b97\u5b66\u4e60\u4e00\u4e0b\uff0c\u6539\u8fdb\u6539\u8fdb\uff0c\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u80fd\u5e2e\u5230\u4e00\u4e9b\u50cf\u6211\u4e00\u6837\u521a\u5b66\u7684\u5c0f\u767dQAQ\uff0c\u6700\u540e\u6211\u7684\u4ee3\u7801\u9644\u4e0a\uff08\u65f6\u95f4\u548c\u7a7a\u95f4\u597d\u50cf\u90fd\u4e0d\u662f\u5f88\u597d\u7684\u4e9a\u5b50\uff09\u3002\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\nconst int N = 210011;//\u8fd9\u91cc\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u662f200011\uff0c\u6709dalao\u770b\u5230\u6c42\u6559\u6559\u600e\u4e48\u5b9a\u6570\u7ec4\u5927\u5c0fQAQ\nconst int INF = 0x3f3f3f3f;\nint n,l,v[N];//\u8282\u70b9\uff0c\u8fb9\u6570 ,\u6743\u503c\nint dis[N];\nbool inq[N];\nstruct edge {\n\tint next,val;\n};\nvector<edge> G[N];\nedge make_edge(int next, int val) {\n\tedge cum;\n\tcum.next=next;\n\tcum.val=val;\n\treturn cum;\n}\nvoid ins(int node,int next,int val) {\n\tG[node].push_back(make_edge(next,0));\n\tG[node+n].push_back(make_edge(next+n,0));\n\tG[node+2*n].push_back(make_edge(next+2*n,0));\n}\nvoid ins_self(int node,int val){\n\tG[node].push_back(make_edge(node+n,val));\n\tG[node+n].push_back(make_edge(node+2*n,-val));\n}\nqueue<int> Q;\nint spfa(int ed){\n\tQ.push(1);\n\tinq[1] = true;\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1] = 0;\n\twhile (!Q.empty()){\n\t\tint now = Q.front();\n\t\tQ.pop();\n\t\tinq[now] = false;\n\t\tfor (int i = 0;i < G[now].size();i++){\n\t\t\tedge e = G[now][i];\n\t\t\tif (dis[e.next]>dis[now]+e.val){\n\t\t\t\tdis[e.next] = dis[now] + e.val;\n\t\t\t\tif (inq[e.next] == false) {\n\t\t\t\t\tQ.push(e.next);\n\t\t\t\t\tinq[e.next] = true;\n\t\t\t\t} \n\t\t\t}\n\t\t} \n\t} \n\treturn dis[ed]==INF ? 0 : dis[ed];\n}\nint main(void) {\n\tint a,b,c;\n\tcin>> n>> l;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin>> v[i];\n\t\tins_self(i,v[i]);\n\t}//\u81ea\u5df1\u5efa\u81ea\u5df1\uff08\u5c42\u4e0e\u5c42\uff09\n\tfor (int i = 1; i <= l; i++) {\n\t\tcin>> a>> b>> c;\n\t\tif (c == 1) {\n\t\t\tins(a,b,0);\n\t\t} \n\t\telse if (c == 2) {\n\t\t\tins(a,b,0);\n\t\t\tins(b,a,0);\n\t\t}//\u81ea\u5df1\u5efa\u522b\u4eba\uff08\u5c42\u5185\u90e8\uff09\n\t}\n\tspfa(3*n);\n\tcout << -dis[n*3]<<endl;\n\treturn 0;\n}\n```\n## \u795d\u5927\u5bb6AC IOI\uff01\n",
        "postTime": 1565682631,
        "uid": 50484,
        "name": "tsrigo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u9898\u89e3\u771f\u662f\u7fa4\u9b54\u4e71\u821e\n\n\u6700\u9ad8\u8d5e\u53ef\u4ee5\u88ab\u5361\u6210\u5e73\u65b9\u7ea7\uff0c\u8fd8\u6709\u4e00\u7fa4\u60e8\u906dhack\uff08\u90a3\u4e2a\u7537\u4eba\uff01\uff09\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4efd\u7406\u8bba\u590d\u6742\u5ea6\u80fd\u8fc7\uff0c\u601d\u7ef4\u96be\u5ea6\u5c0f\uff0c\u867d\u7136\u4ee3\u7801\u957f\u4e86\u70b9\u4f46\u5927\u591a\u662f\u8dd1\u677f\u5b50\uff0c\u5199\u8d77\u6765\u5f88\u723d\uff0c\u80fd\u901a\u8fc7\u6240\u6709hack\u6570\u636e\uff0c\u5728\u9694\u58c1loj\u4e5f\u80fd\u6ee1\u5206\u901a\u8fc7\u7684\u7a0b\u5e8f\u3002\n\n\u601d\u8def\u662f\u8fd9\u6837\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6beb\u65e0\u7591\u95ee\u6211\u4eec\u53ef\u4ee5\u5728\u91cc\u9762\u81ea\u7531\u7a7f\u68ad\uff0c\u4e0d\u5e72\u6270\u7ed3\u679c\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u5904\u7406\u5f53\u524d\u5206\u91cf\u7684\u6700\u5927\u548c\u6700\u5c0f\u91d1\u94b1\u3002\u5bf9\u4e8e\u4e0d\u540c\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u6211\u4eec\u53ea\u8981\u8bb0\u5f55fi\u4e3a\u5206\u91cfi\u5728\u904d\u5386\u65f6\u6240\u66fe\u7ecf\u9047\u5230\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7684\u6700\u5c0f\u91d1\u94b1\uff0c\u7528\u5206\u91cf\u6700\u5927\u51cf\u53bb\uff0c\u518d\u6253\u64c2\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8981\u6c42\u5fc5\u987b\u4ece\u8d77\u70b9\u5f00\u59cb\u56de\u5230\u7ec8\u70b9\uff0c**\u8fd9\u4e5f\u662f\u5927\u91cf\u9898\u89e3\u88abhack\u7684\u539f\u56e0**\uff0c\u76f4\u63a5\u627e\u5165\u5ea6\u4e3a0\u7684\u70b9\u662f\u4e0d\u884c\u7684\uff01\u56e0\u6b64\u6211\u4eec\u5728\u7f29\u70b9\u65f6\u5982\u679c\u9047\u5230\u4e861\u548cn\uff0c\u5c31\u8981\u76f8\u5e94\u5730\u628a\u4ed6\u4eec\u7684\u5206\u91cf\u53f7\u6807\u8bb0\u4e3areal1\u548crealn\uff0c\u518d\u901a\u8fc7\u4e00\u6b21dfs\uff0c\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u6807\u8bb0\u597d\u3002\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u65b0\u7684\u56fe\uff0c\u518d\u8f6c\u79fb\u65f6\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u6240\u6709\u524d\u9a71\u90fd\u5df2\u7ecf\u5b8c\u6210\u8ba1\u7b97\uff0c\u6240\u4ee5\u8981\u5148\u8dd1\u62d3\u6251\u3002\n\n**\u90a3\u4e48\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a**\n\n1\u3001\u7f29\u70b9\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5206\u91cf\u7684\u6700\u503cmaxval,minval\uff0c\u8d77\u70b9\u7ec8\u70b9\u6240\u5728\u5206\u91cfreal1,realn\n\n2\u3001\u62d3\u6251\u6392\u5e8f\uff0c\u8bb0\u5f55\u62d3\u6251\u5e8f\u5217\n\n3\u3001\u4ecereal1->realn\uff0c\u4f5c\u4e00\u6b21\u904d\u5386\uff0c\u7528\u6570\u7ec4if1,ifn\u8bb0\u5f55\u5f53\u524d\u5206\u91cf\u80fd\u5426\u4ece\u8d77\u70b9\u6765\u3001\u5230\u8fbe\u7ec8\u70b9\n\n4\u3001\u6309\u7167\u62d3\u6251\u5e8f\u5217\u8f6c\u79fb\uff0c\u5bf9\u4e8e\u53ef\u884c\u8fb9x,v,ans=max(ans,maxval[x]-f[x]);\u5bf9\u4e8ev\uff0cf[v]=min(minval[v],f[pre]);\n\n5\u3001\u540c\u65f6\uff0c\u6bcf\u4e2a\u53ef\u884c\u5206\u91cf\uff0c\u90fd\u8981\u5185\u90e8\u76f8\u51cf\u8bb0\u5f55\u3002\n\n\u603b\u590d\u6742\u5ea6\u4e3atarjan\u7684\u590d\u6742\u5ea6n+m\u3002\n\n\u7801\u98ce\u6781\u5ea6\u6e05\u65b0\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nstruct line{int fr,to,data,next;}q[300001];\nconst int maxn=150000,INF=1000001;\nint head[maxn],kl,n,x,y,z,m,ans,b[maxn],top,mon[maxn],f[maxn],ind[maxn],beg,vis[maxn];\nint stac[maxn],dfn[maxn],low[maxn],indec,maxcol,col[maxn],maxval[maxn],minval[maxn];\nint filo[maxn],c[maxn],bo[maxn],ifn[maxn],realn,real1,if1[maxn],g[maxn];\nvoid pushline(int f,int t)\n{\n\tind[t]++;\n    q[++kl].next=head[f];head[f]=kl;q[kl].to=t;q[kl].fr=f;\n}\nvoid tarjan(int x)\n{\n\tstac[++top]=x;\n\tb[x]=1;\n\tdfn[x]=low[x]=++indec;\n\tfor(int p=head[x];p;p=q[p].next)\n\t{\n\t\tint v=q[p].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[x]=min(low[x],low[v]);\n\t\t}\n\t\telse if(b[v])low[x]=min(low[x],low[v]);\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\t++maxcol;\n\t\twhile(stac[top]!=x)\n\t\t{\n\t\t\t\n\t\tint u=stac[top];\n\t\t\tif(u==n)realn=maxcol;\t\n\t\t\tif(u==1)real1=maxcol;\u8bb0\u5f55\u8d77\u7ec8\u70b9\u6240\u5728\u5206\u91cf\n\t\t\tb[u]=0;col[u]=maxcol;\n\t\t\tminval[maxcol]=min(minval[maxcol],mon[u]);\n\t\t\tmaxval[maxcol]=max(maxval[maxcol],mon[u]);\u8bb0\u5f55\u5206\u91cf\u6700\u503c\n\t\t\ttop--;\n\t\t}\n\t\tb[x]=0;col[x]=maxcol;\n\t\tif(x==n)realn=maxcol;\n\t\tif(x==1)real1=maxcol;\n\t\tminval[maxcol]=min(minval[maxcol],mon[x]);\n\t\tmaxval[maxcol]=max(maxval[maxcol],mon[x]);\n\t\ttop--;\n\t}\n}\nvoid topsort()\n{\n\tint num=0;\n\twhile(top!=0)\n\t{\n\t\tint x=filo[top--];\t\n\t\tc[++num]=x;\u8dd1\u677f\u5b50\uff0c\u8bb0\u5f55\u5e8f\u5217\n\t\tfor(int p=head[x];p;p=q[p].next)\n\t\t{\n\t\t\tint v=q[p].to;\n\t\t\tif(bo[v])continue;\n\t\t\tind[v]--;\n\t\t\tif(ind[v]==0)filo[++top]=v;\n\t\t}\n\t}\n}\nbool dfs(int x)\n{\n\tif(vis[x])return g[x];\u5982\u679c\u5f53\u524d\u70b9\u5230\u8fc7\uff0c\u7528\u8bb0\u641c\u601d\u60f3\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u5426\u5219\u4f1aT\n\tvis[x]=1;\n\tif1[x]=1;\u56e0\u4e3a\u4ece\u771f\u5b9e\u8d77\u70b9\u5f00\u59cb\uff0c\u4e8e\u662f\u53ea\u8981\u5230\u8fc7\u5c31\u6807\u8bb0\n\tif(x==realn){ifn[x]=1;g[x]=1;}\u5982\u679c\u5230\u8fbe\u771f\u5b9e\u91cd\u70b9\uff0c\u8bb0\u5f55\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\uff0c\u540e\u9762\u7684\u70b9\u4e5f\u8981\u904d\u5386\n\tfor(int p=head[x];p;p=q[p].next)\n\t{\n\t\tint v=q[p].to;\n\t\tif(dfs(v)==1){ifn[x]=1;g[x]=1;}\u53ea\u8981\u6709\u4e00\u4e2a\u513f\u5b50\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u5f53\u524d\u70b9\u4e5f\u53ef\u4ee5\u5230\n\t}\n\treturn g[x];\n}\nint main()\n{\n//\tfreopen(\"trade3.in\",\"r\",stdin);\n//\tfreopen(\"trade3.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tmemset(minval,127/3,sizeof(minval));\n\tfor(int i=1;i<=n;i++)cin>>mon[i];\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>x>>y>>z;\n\t\tpushline(x,y);\n\t\tif(z==2)pushline(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(!dfn[i])tarjan(i);\n\tmemset(head,0,sizeof(head));\n\tmemset(ind,0,sizeof(ind));\n\tmemset(f,127/3,sizeof(f));\n\tm=kl;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=col[q[i].fr],y=col[q[i].to];\n\t\tif(x!=y)pushline(x,y);\n\t}\u91cd\u65b0\u5efa\u56fe\n\ttop=0;\n\tfor(int i=1;i<=maxcol;i++)\n\t{\n\t\tif(ind[i]==0)filo[++top]=i,bo[i]=1;\u5148\u628a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u585e\u8fdb\u53bb\uff0cbo\u4e3a\u62d3\u6251\u6392\u5e8f\u6240\u7528\u6570\u7ec4\n\t}\n\ttopsort();\n\tdfs(real1);\u8bb0\u5f55\u662f\u5426\u53ef\u884c\n\t\n\tfor(int i=1;i<=maxcol;i++)\n\t{\n\t\tint x=c[i];\n\t\tif(!ifn[x]||!if1[x])continue;\u4e0d\u7b26\u5408\u8981\u6c42\u5c31\u53c9\u51fa\u53bb\n\t\tans=max(ans,maxval[x]-minval[x]);\u8bb0\u5f55\u672c\u5206\u91cf\u5185\u90e8\u7ed3\u679c\n\t\tf[x]=min(f[x],minval[x]);\u6240\u6709\u7684\u524d\u9a71\u90fd\u5df2\u7ecf\u904d\u5386\uff0c\u76f4\u63a5\u53ef\u4ee5\u7528\n\t\tans=max(ans,maxval[x]-f[x]);\u8bb0\u5f55\u7b54\u6848\n\t\tfor(int p=head[x];p;p=q[p].next)\n\t\t{\n\t\t\tint v=q[p].to;\n\t\t\tf[v]=min(f[v],f[x]);\u5237\u8868\u6cd5\u8f6c\u79fb\n\t\t}\n\t}\n\tcout<<ans;\n}\n```\n",
        "postTime": 1563366467,
        "uid": 87316,
        "name": "Asuka\u4e8c\u53f7\u673a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u7531\u4e8e\u61d2\u5f97\u6253\u4e00\u4e2a\u5224\u65ad\u5165\u70b9\u7684bfs\uff0c\u76f4\u63a5\u6b3a\u8d1f\u6c34\u6570\u636e\u5207\u6389\u8fd9\u9898\u3002\n\ntarjan+dp\uff1f+spfa+\u5e76\u67e5\u96c6\u3002\n\n\u5173\u4e8e\u771f\u6b63\u5b8c\u7f8e\u7684\u505a\u6cd5\u5c31\u662f\u518d\u52a0\u4e00\u4e2abfs\u52241\u53f7\u5230\u7684\u6240\u6709\u70b9\u52a0\u4e0a\u5165\u5ea6\u518d\u62d3\u6251\u6392\u5e8fdp\u4e00\u4e0b\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<stack>\nusing namespace std;\nconst int maxn=100005;\nstack<int>ql;\nint n,m,to[maxn],nxt[maxn],head[maxn],f[maxn],tot,mx[maxn],mn[maxn],dfn[maxn],low[maxn],a[maxn],b[maxn],c[maxn],ansl[maxn];\nint p[maxn];\nvoid add(int x,int y)\n{\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nint find(int x)\n{\n\tif(f[x]==x)return x;\n\tmx[f[x]]=max(mx[f[x]],mx[x]);//\u628a\u81ea\u5df1\u7684\u6700\u503c\u4f20\u9012\u4e0a\u53bb \n\tmn[f[x]]=min(mn[f[x]],mn[x]);\n\treturn f[x]=find(f[x]);\n}\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++tot;p[x]=1;ql.push(x);//\u6734\u7d20\u7f29\u70b9 \n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint g=to[i];\n\t\tif(!dfn[g])\n\t\t{\n\t\t\ttarjan(g);low[x]=min(low[x],low[g]);\n\t\t}\n\t\telse if(p[g])low[x]=min(low[x],low[g]);\n\t}\n\tif(dfn[x]==low[x])\n\t{\n\t\twhile(ql.top()!=x)\n\t\t{\n\t\t\tint g=ql.top();\n\t\t\tp[g]=0;f[g]=x;ql.pop();\n\t\t}\n\t\tql.pop();p[x]=0;\n\t}\n}\nint spfa()\n{\n\tmemset(p,0,sizeof(p));\n     queue<int>q;\n     for(int i=1;i<=n;i++)find(i);\n     q.push(f[1]);\n     while(!q.empty())//\u6734\u7d20spfa \n     {\n     \tint u=f[q.front()];q.pop();\n     \tfor(int i=head[u];i;i=nxt[i])\n     \t{\n     \t\tint g=f[to[i]];\n     \t\tmn[g]=min(mn[u],mn[g]);//\u66f4\u65b0\u76ee\u524d\u4e70\u5165\u6700\u5c0f \n     \t\tansl[g]=max(max(ansl[u],mx[g]-mn[g]),ansl[g]);//\u7528\u4e4b\u524d\u4e70\u7684\u6700\u5c11\u7684\u5728\u8fd9\u91cc\u5356\u6700\u9ad8\u4ef7\u770b\u770b\u53ef\u4e0d\u53ef\u4ee5\u6bd4\u4e4b\u524d\u5356\u7684\u591a \n\t\t\t if(p[g]<=8)//\u7531\u4e8e\u6570\u636e\u8fc7\u6c34\u8d708\u6b21\u90fd\u7ef0\u7ef0\u6709\u4f59\u3002\u3002\u3002 \n     \t\t{\n     \t\t\tp[g]++;q.push(g);\n\t\t\t}\n\t\t }\n\t }\n\t return ansl[f[n]];\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>mx[i];f[i]=i;mn[i]=mx[i];\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>a[i]>>b[i]>>c[i];\n\t}\n\tfor(int i=1;i<=m;i++)if(c[i]==2)f[find(a[i])]=find(b[i]);//\u5148\u628a\u53cc\u5411\u8fb9\u8fde\u5230\u4e00\u8d77 \n\tfor(int i=1;i<=m;i++)if(c[i]==1)add(find(a[i]),find(b[i]));//\u8fde\u8fb9 \n\ttot=0;\n\tfor(int i=1;i<=n;i++)if(!dfn[find(i)])tarjan(find(i));//\u6ce8\u610f\u64cd\u4f5c\u7684\u662f\u6bcf\u4e00\u4e2a\u70b9\u7684\u7956\u5148 \n\tcout<<topo();\n}\n```\n",
        "postTime": 1555762450,
        "uid": 121612,
        "name": "\u5728\u60f3Peach",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "## \u5206\u5c42\u56fe\u5165\u95e8\n\u5728\u4e00\u4e9b\u56fe\u8bba\u9898\u4e2d,\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u72b6\u6001,\u5982[\u6b64\u9898](https://www.luogu.org/problemnew/show/P1073),\u6b64\u65f6**\u5206\u5c42\u56fe**\u5f88\u6709\u6548\n\n\u5206\u5c42\u56fe,\u5c31\u662f\u5c06\u540c\u4e00\u4e2a\u56fe\u590d\u5236\u591a\u6b21,\u7528\u4e00\u4e9b\u8fb9\u5c06\u8fd9\u4e9b\u56fe\u8fde\u63a5\uff0c\u518d\u628a\u8fd9\u4e9b\u56fe\u770b\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u5728\u8fd9\u4e2a\u6574\u4f53\u4e0a\u8dd1\u4e00\u4e9b\u7b97\u6cd5\u3002\n\n\u6b64\u9898\u5c31\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n1.\u5efa\u7acb\u539f\u56fe\uff08\u8fb9\u6743\u4e3a0\uff09\u540c\u65f6\u5728\u590d\u5236\u7684\u56fe\uff08\u590d\u5236\u4e24\u4e2a\uff0c\u4e00\u4e2a\u79f0\u4e3a\u201c\u4e70\u56fe\u201d\uff0c\u4e00\u4e2a\u79f0\u4e3a\u201c\u5356\u56fe\u201d\uff09\u4e2d\u4e5f\u8fd9\u6837\u505a\uff1b  \n2.\u5c06\u539f\u56fe\u4e0e\u201c\u4e70\u56fe\u201d\u7684\u5bf9\u5e94\u70b9\u8fde\u63a5\uff0c\u8fb9\u6743\u4e3a\u4e70\u5165\u4ef7\uff08\u6b63\u6570\u6570\uff09\uff1b  \n3.\u5c06\u201c\u4e70\u56fe\u201d\u4e0e\u201c\u5356\u56fe\u201d\u7684\u5bf9\u5e94\u70b9\u8fde\u63a5\uff0c\u8fb9\u6743\u4e3a\u5356\u51fa\u4ef7\uff08\u8d1f\u6570\uff09\uff1b  \n4.\u4ece\u539f\u56fe\u4e2d\u7684\u70b91\u5f00\u59cb\u8dd1\u6700\u77ed\u8def\uff0c\u5230\u201c\u5356\u56fe\u201d\u7684\u70b9n\u7684\u8ddd\u79bb\u7684\u76f8\u53cd\u6570\u5373\u4e3a\u7b54\u6848  \n\n**\u7531\u4e8e\u6709\u8d1f\u8fb9\u6743\uff0c\u6240\u4ee5\u5fc5\u987b\u7528SPFA**\n\n\u8fd8\u662f\u6709\u4e00\u5b9a\u601d\u7ef4\u96be\u5ea6\u7684\uff0c\u590d\u6742\u5ea6$O(m)-O(nm)$\uff08SPFA\u5c31\u662f\u8fd9\u6837..\u4e0d\u8fc7\u4eb2\u6d4b\u53ef\u8fc7\uff09\n\n```cpp\n//by wh\n//time O(km)~O(nm)\n#include<iostream>\n#include<cstdio>\ntypedef long long ll;\n#define maxn 400004\n#define maxm 2000004\nll n,m;\nstruct Edge//\u90bb\u63a5\u8868\u5b58\u56fe\n{\n\tll v,w,nxt;\n}e[maxm];\nll cnt=0,last[maxn];\nvoid adde(ll u,ll v)//\u5728\u4e09\u4e2a\u56fe\u4e2d\u589e\u52a0u->v\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a0\n{\n\t++cnt;\n\te[cnt].v=v;e[cnt].w=0;\n\te[cnt].nxt=last[u];last[u]=cnt;\n\t++cnt;\n\te[cnt].v=(v+n);e[cnt].w=0;\n\te[cnt].nxt=last[u+n];last[u+n]=cnt;\n\t++cnt;\n\te[cnt].v=(v+n*2);e[cnt].w=0;\n\te[cnt].nxt=last[u+n*2];last[u+n*2]=cnt;\n}\n\nll dis[maxn];//\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nbool inq[maxn];\nstruct que//queue \u624b\u6253\u961f\u5217\n{\n\tll a[maxn],h,t;\n\tvoid start()\n\t{\n\t\th=t=1;\n\t}\n\tvoid push(ll x)\n\t{\n\t\ta[t++]=x;\n\t\tif(t>maxn)t=1;\n\t}\n\tvoid pop()\n\t{\n\t\t++h;\n\t\tif(h>maxn)h=1;\n\t}\n\tll front()\n\t{\n\t\treturn a[h];\n\t}\n\tbool empty()\n\t{\n\t\treturn h==t;\n\t}\n}q;\nvoid SPFA()\n{\n\tfor(ll i=1;i<=n*3;++i)dis[i]=1ll<<60;\n\tdis[1]=0;\n\tq.start();\n\tq.push(1);inq[1]=1;\n\tll u,v,w;\n\twhile(!q.empty())\n\t{\n\t\tu=q.front();\n\t\tq.pop();inq[u]=0;\n\t\tfor(ll i=last[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tv=e[i].v,w=e[i].w;\n\t\t\tif(dis[v]>dis[u]+w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif(!inq[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);inq[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tll t,u,v;\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%lld\",&t);\n\t\t++cnt;//\u8de8\u56fe\u8fde\u8fb9\uff0c\u5373\u6b65\u9aa42&3\n\t\te[cnt].v=(i+n);e[cnt].w=t;\n\t\te[cnt].nxt=last[i];last[i]=cnt;\n\t\t++cnt;\n\t\te[cnt].v=(i+n*2);e[cnt].w=-t;\n\t\te[cnt].nxt=last[i+n];last[i+n]=cnt;\n\t}\n\tfor(ll i=1;i<=m;++i)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&t);\n\t\tadde(u,v);\n\t\tif(t==2)adde(v,u);\n\t}\n\tSPFA();\n\tprintf(\"%lld\",-dis[n*3]);\n\treturn 0;\n}\n```\n\n\u6bd4\u8f83\u5947\u5999\u7684",
        "postTime": 1548858607,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u4ecb\u7ecd\u4e00\u79cd\u66b4\u529b\u5730\u4e0d\u80fd\u518d\u66b4\u529b\u7684\u7b97\u6cd5\n\n# \u5206\u5c42\u56fe\u5927\u6cd5\u597d\uff01\uff01\uff01\n\n\u5206\u5c42\u56fe\uff0c\u5c31\u662f\u5728\u56fe\u4e0a\u6709\u4e00\u4e9b\u4e0d\u53ef\u9006\u64cd\u4f5c\uff0c\u6216\u5faa\u73af\u64cd\u4f5c\u65f6\uff0c\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u591a\u4e2a\u70b9\uff0c\u4ee5\u8868\u793a\u4e0d\u540c\u72b6\u6001\u7684\u65b9\u6cd5\u3002\uff08\u81ea\u5df1yy\u7684\u5b9a\u4e49\uff0cdalao\u52ff\u55b7\uff09\n\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u5728\u4e00\u5f20\u6709\u56fe\u4e0a\u8dd1\u6700\u77ed\u8def\uff0c\u53ef\u9006\u9006\u884c\u4e00\u6b21\u3002\n\n\u6216\u8005\u6ca1\u8d70\u4e00\u6761\u8def\uff0c\u6240\u6709\u8def\u7684\u6743\u503c\u5c31\u53d8\u6210\u76f8\u53cd\u6570\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u6709\u4e09\u4e2a\u72b6\u6001\n\n\uff081\uff09 \u8fd8\u6ca1\u4e70\u6c34\u6676\u7403\n\n\uff082\uff09 \u4e70\u4e86\u4f46\u662f\u6ca1\u6709\u5356\n\n\uff083\uff09 \u5df2\u7ecf\u5356\u4e86\n\n\u90a3\u4e48\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u8bf4\u7b2c\u4e09\u4e2a\u72b6\u6001\u4e0d\u5fc5\u8981\uff0c\u4f46\u662f\u6709\u4e2a\u6761\u4ef6\uff0c\u90a3\u5c31\u662f\u5fc5\u987b\u5728n\u53f7\u70b9\u7ed3\u675f\u3002\u6240\u4ee5\u4e0d\u4e00\u5b9a\u5356\u6389\u4e86\u5c31\u4e07\u4e8b\u5927\u5409\uff0c\u6709\u53ef\u80fd\u4e3a\u4e86\u5356\u9ad8\u4ef7\u8dd1\u5230\u4e86\u4e00\u4e2a\u5230\u4e0d\u4e86n\u7684\u70b9\uff0c\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u8981\u820d\u5f03\u3002\n\n\u6211\u5c06\u4e00\u4e2a\u70b9\u7684\u4e09\u5c42\u5206\u522b\u8bbe\u4e3ax, x + n, x + 2 * n\u3002\u6211\u8ba4\u4e3a\u5206\u5c42\u6bd4\u8f83\u597d\u7406\u89e3\n\n\n\u5c31\u662f\u8fd9\u6837\uff0c\u8dd1\u4e00\u4e2aSPFA\u5c31\u884c\u5566\u3002\n\n\u5177\u4f53\u7684\u5728\u4ee3\u7801\u91cc\u5566(\u4ee3\u7801\u5199\u6cd5\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u5927\u6982\u770b\u770b\u5427\uff09\n\n```\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nint p[100005];\nvector <pair <int, int> > V[300005];\nbool inq[300005];\nint d[300005];\nqueue <int> q;\nint main(int argc, char **argv)\n{\n\tint n, m, i;\n\tint x, y, z;\n\tint t;\n\tpair <int, int> r;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(i = 1; i <= n; i++)\n\t  scanf(\"%d\", &p[i]);\n\tfor(i = 1; i <= m; i++)\n\t{\n\t  scanf(\"%d%d%d\", &x, &y, &z);\n\t  V[x].push_back(make_pair(y, 0));//\u7b2c\u4e00\u5c42\u95f4\u79fb\u52a8\n\t  V[x].push_back(make_pair(y + n, -p[x]));//\u4e70\u4e86x\u7684\u6c34\u6676\u7403\n\t  V[x + n].push_back(make_pair(y + n, 0));//\u7b2c\u4e8c\u5c42\u95f4\u79fb\u52a8\n\t  V[x + n].push_back(make_pair(y + 2 * n, p[x]));//\u5728x\u5356\u4e86\u6c34\u6676\u7403\n\t  V[x + 2 * n].push_back(make_pair(y + 2 * n, 0));//\u7b2c\u4e09\u5c42\u95f4\u79fb\u52a8\n\t  if(z == 2)//\u53cc\u5411\u8fb9\n\t  {\n\t    V[y].push_back(make_pair(x, 0));\n\t    V[y].push_back(make_pair(x + n, -p[y]));\n\t    V[y + n].push_back(make_pair(x + n, 0));\n\t    V[y + n].push_back(make_pair(x + 2 * n, p[y]));\n\t    V[y + 2 * n].push_back(make_pair(x + 2 * n, 0));\n\t  }\n\t}\n\tfor(i = 1; i <= 3 * n; i++)\n\t  d[i] = -1e9;\n\td[1] = 0;\n\tinq[1] = 1;\n\tq.push(1);\n\twhile(q.size())\n\t{\n\t  t = q.front();\n\t  inq[t] = 0;\n\t  q.pop();\n\t  for(i = 0; i < V[t].size(); i++)\n\t  {\n\t    r = V[t][i];\n\t    if(d[r.first] < d[t] + r.second)\n\t    {\n\t      d[r.first] = d[t] + r.second;\n\t      if(!inq[r.first])\n\t      {\n\t        inq[r.first] = 1;\n\t        q.push(r.first);\n\t\t  }\n\t\t}\n\t  }\n\t}\n\tcout << max(d[3 * n], 0) << endl;\n\treturn 0;\n}\n```\n\n\u6700\u540e\u8bf4\u4e00\u53e5\uff0c\u5728\u6781\u9650\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5f20\u56fe\u6709\u53ef\u80fd\u662f300000\u4e2a\u70b9\uff0c5000000\u6761\u8fb9\u7684\uff0c\u6b63\u5e38\u6700\u77ed\u8def\u662f\u4e0d\u53ef\u80fd\u8dd1\u8fc7\u53bb\u7684\u3002\u4f46\u662fSPFA\u7684\u7279\u70b9\u5c31\u662f\uff0c\u6548\u7387\u4e0e\u56fe\u7684\u5f62\u5f0f\u6709\u5f88\u5927\u7684\u5173\u7cfb\uff0c\u8fd9\u4e2a\u56fe\u5927\u591a\u6570\u8fb9\u90fd\u662f0\uff0c\u5e76\u4e14\u6bd4\u8f83\u6709\u89c4\u5f8b\uff0c\u6240\u4ee5\u80fd\u8fc7\u3002\uff08\u8fd8\u662f\u611f\u89c9\u6570\u636e\u6bd4\u8f83\u6c34\uff09\n\n\u8fd9\u4e2a\u6700\u5927\u4e00\u70b9200\u591ams\uff0c\u5171900\u591ams\u3002\n",
        "postTime": 1541759707,
        "uid": 47140,
        "name": "\u65af\u8302",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "[blog](https://www.cnblogs.com/sun123zxy/p/noip2009t3.html)\n\n\u697c\u4e0adalao\u4eec\u90fd\u7528\u7684tarjan\u554a\u62d3\u6251\u6392\u5e8f\u554a\u4e4b\u7c7b\u7684\u73a9\u610f\u513f\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u4e0d\u4f1a\uff0c\u53ea\u60f3\u5230\u4e86\u6781\u5176\u66b4\u529b\u7684**\u5206\u5c42\u56fe\u6700\u77ed\u8def**\n\n**\u8bbe\u4e09\u4e2a\u72b6\u6001**\n\n0\u8868\u793a\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u4e70\u5356\u7684\u60c5\u51b5\n\n1\u8868\u793a\u4e70\u4e86\u6ca1\u6709\u5356\u7684\u60c5\u51b5\n\n2\u8868\u793a\u5df2\u7ecf\u5356\u4e86\u7684\u60c5\u51b5\n\n\u8fd9\u6837\u5efa\u51fa\u6765\u4e00\u4e2a3\u5c42\u7684\u56fe\uff0c\u7528**dis[i][j]**\u8868\u793a\u4ece\u8d77\u70b9\u5230i\u70b9\uff0c\u5904\u5728j\u72b6\u6001\u4e0b\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a//id\u5c31\u662f\u4ece\u54ea\u4e2a\u70b9\u6765\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u72b6\u6001\uff0c\u90fd\u53ef\u4ee5\u5728\u540c\u72b6\u6001\u4e0b\u76f8\u4e92\u66f4\u65b0dis\u503c\uff0c\u6240\u4ee5\n**dis[to][sit]=max(dis[to][sit],dis[id][sit])**\n\n\u72b6\u60011\u53ef\u4ee5\u7531\u72b6\u60010\u65f6\u8d2d\u4e70\u6c34\u6676\u7403\u5f97\u5230\uff0c\u8d2d\u4e70\u662f\u51cf\u6536\u76ca\uff0c\u6240\u4ee5\n**dis[to][1]=max(dis[to][1],dis[id][0]-pri[to])**\n\n\u72b6\u60012\u53ef\u4ee5\u7531\u72b6\u60011\u65f6\u5356\u51fa\u6c34\u6676\u7403\u5f97\u5230\uff0c\u5356\u51fa\u589e\u52a0\u4e86\u6536\u76ca\uff0c\u6240\u4ee5\n**dis[to][2]=max(dis[to][2],dis[id][1]+pri[to])**\n\n\u6ce8\u610f\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u4e70\u4e0d\u5356\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u67d0\u4e00\u70b9\u4e70\u4e86\u9a6c\u4e0a\u53c8\u5356\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u52a0\u4e2a\u81ea\u73af\u5c31\u53ef\u4ee5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u4e86\n\n\u89c2\u5bdf\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u53d1\u73b0\u6709\u8d1f\u6743\u8fb9\uff0c\u4e0d\u80fd\u7528dijkstra\uff0c\u6240\u4ee5spfa\u8d70\u8d77\n\n\u6700\u540e\u8f93\u51fadis[n][2]\uff0c\u7ec8\u70b9\u7684\u72b6\u60012\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\nconst int INF=1147483647;\nint n,m=0;\nstruct star{//\u94fe\u5f0f\u524d\u5411\u661f \n    int u,v;\n}edge[1000005];\nint last[1000005],next[1000005];\nvoid addedge(int u,int v){//\u52a0\u8fb9 \n    m++;\n    edge[m]=(star){u,v};\n}\nvoid starinit(){//\u524d\u5411\u661f\u521d\u59cb\u5316 \n    for(int i=1;i<=n;i++) last[i]=-1;\n    for(int i=1;i<=m;i++){\n        int flag=edge[i].u;\n        next[i]=last[flag];\n        last[flag]=i;\n    }\n}\nint pri[1000005];//\u6bcf\u4e2a\u70b9\u6c34\u6676\u7403\u7684\u4ef7\u683c \n\nstruct mem{\n    int id,sit;\n}que[5000005];\nint head,tail;\nvoid push(mem pig){\n    que[tail]=pig;tail++;\n}\nvoid pop(){head++;}\n\nint dis[1000005][5],book[1000005][5];\nvoid spfa(int sta){\n    head=0;tail=0;\n    for(int i=1;i<=n;i++){dis[i][0]=-INF;dis[i][1]=-INF;dis[i][2]=-INF;book[i][0]=0;book[i][1]=0;book[i][2]=0;}\n    dis[1][0]=0;\n    book[sta][0]=1;\n    push((mem){sta,0});\n    for(;head<tail;){\n        \n        int id=que[head].id;\n        int sit=que[head].sit;\n        for(int i=last[id];i!=-1;i=next[i]){\n            int to=edge[i].v;\n            if(dis[to][sit]<dis[id][sit]){//\u901a\u7528\u8f6c\u79fb\u65b9\u7a0b \n                dis[to][sit]=dis[id][sit];\n                if(book[to][sit]==0){\n                    book[to][sit]=1;\n                    push((mem){to,sit});\n                }\n            }\n            switch(sit){\n                case 0:{\n                    if(dis[to][1]<dis[id][0]-pri[to]){//0->1\n                        dis[to][1]=dis[id][0]-pri[to];\n                        if(book[to][1]==0){\n                            book[to][1]=1;\n                            push((mem){to,1});\n                        }\n                    }\n                    break;\n                }\n                case 1:{\n                    if(dis[to][2]<dis[id][1]+pri[to]){//1->2\n                        dis[to][2]=dis[id][1]+pri[to];\n                        if(book[to][2]==0){\n                            book[to][2]=1;\n                            push((mem){to,2});\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        book[id][sit]=0;\n        pop();\n    }\n}\n\nint main(){\n    m=0;\n    int cirno;\n    cin>>n>>cirno;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&pri[i]);\n    }\n    for(int i=1;i<=cirno;i++){\n        int u,v,type;\n        scanf(\"%d%d%d\",&u,&v,&type);\n        addedge(u,v);\n        if(type==2) addedge(v,u);\n    }\n    for(int i=1;i<=n;i++) addedge(i,i);//\u52a0\u81ea\u73af \n    starinit();\n    spfa(1);\n    cout<<dis[n][2];\n    return 0;\n}\n/*\n\u81ea\u6d4b \n7 8\n9 2 3 2 10 1 7\n1 2 1\n2 3 1\n3 7 1\n7 6 1\n6 3 1\n7 4 1\n4 5 1\n5 3 1\n*/\n```",
        "postTime": 1541683990,
        "uid": 23632,
        "name": "sun123zxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "### \u9898\u76ee\u89e3\u6790\uff1a\u5bfb\u627e\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e00\u4e2a\u7ec8\u70b9\uff0c\u4f7f\u4ed6\u4eec\u4e24\u4e2a\u5dee\u4ef7\u6700\u5927\u3002\u5176\u4e2d\u8981\u6c42\uff1a\u8d77\u70b9\u53ef\u4ee5\u4ece1\u62b5\u8fbe\uff0c\u7ec8\u70b9\u53ef\u4ee5\u62b5\u8fbeN\u53f7\u70b9\u3002\n\n\uff08\u671b\u7ba1\u7406\u5458\u901a\u8fc7\uff0c\u76ee\u524d\u6211\u4f3c\u4e4e\u6ca1\u770b\u5230\u6211\u8fd9\u6837\u7684\u89e3\u6cd5qwq\uff09\n\n# **\u89e3\u6cd5\uff1a\u8d2a\u5fc3+\u526a\u679d\u4f18\u5316**\n## \u6838\u5fc3\u539f\u7406\uff1a\uff08\u66f4\u65b0\u4e86\u4e00\u4e0b\u539f\u7406\uff0c\u5176\u5b9e\u539f\u7406\u5e94\u8be5\u662f\u8fd9\u4e2a\uff09\u4ece\u4ef7\u683c\u6700\u9ad8\u7684\u70b9\u4e3a\u5356\u51fa\u70b9\u5f00\u59cb\u679a\u4e3e\uff0c\u90a3\u4e48\u6700\u6709\u53ef\u80fd\u83b7\u5f97\u6700\u9ad8\u5dee\u4ef7\u3002\n## \u90a3\u4e48\u6211\u7684\u89e3\u6cd5\u662f\uff1a\n#### 1.\u5148\u904d\u5386\u6240\u6709\u70b9\uff0c\u786e\u5b9a\u8fd9\u4e2a\u70b9\u662f\u5426\u53ef\u4ee5\u62b5\u8fbe\u7ec8\u70b9\u3002\n#### 2.\u518d\u904d\u5386\u4e00\u904d\uff0c\u786e\u5b9a\u8fd9\u4e2a\u70b9\u53ef\u5426\u4ece\u8d77\u70b9\u62b5\u8fbe\u3002\n#### 3.\u5bf9\u6240\u6709\u70b9\u4ef7\u683c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002\u95f4\u63a5\u6392\u5e8f\u4e0b\u6807\u6570\u7ec4\uff1apai\n#### 4.\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u70b9\u6700\u591a\u53ef\u4ee5\u83b7\u5f97\u7684\u5dee\u4ef7maxget\u6570\u7ec4=\u8fd9\u4e2a\u70b9\u7684\u4ef7\u683c-\u6700\u4f4e\u4ef7\u683c\u3002\n#### 5.\u5c06maxget\u4e0b\u6807\u6570\u7ec4Pai2\u964d\u5e8f\u6392\u5e8f\u3002\uff08\u95f4\u63a5\u6392\u5e8f\uff09\n#### 6.\u63a5\u4e0b\u6765\u5f00\u59cb\u4ecepai2[0]\u5f00\u59cb\uff0c\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cbbfs\u904d\u5386\u6240\u6709\u53ef\u4ee5\u62b5\u8fbe\u8fd9\u4e2a\u70b9\u7684\u70b9\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u83b7\u5f97\u7684\u5dee\u4ef7\u3002\uff08\u6ce8\u610f\uff0cpai2\u6570\u7ec4\u5b58\u50a8\u7684\u662f\u4e0b\u6807\uff08\u95f4\u63a5\u6392\u5e8f\uff09\uff09\n##  \u91cd\u70b9\u4f18\u5316\u6765\u4e86\uff01\uff08\u6ca1\u4f18\u5316\u524d80\u5206\u4e24\u4e2a\u8d85\u65f6\uff0c\u4e00\u4f18\u5316\u76f4\u63a5\u603b\u65f6\u95f4\u6d88\u8017\u53d8\u6210220ms\uff09\n ### \u5728\u904d\u5386\u7684\u540c\u65f6\uff0c\u8fd9\u4e2a\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u63a5\u4e0b\u6765\u6309\u7167pai2\u5411\u4e0b\u7ee7\u7eed\u627e\u70b9\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u5728\u6b64\u524d\u7684\u904d\u5386\u4e2d\u88ab\u6253\u4e0a\u4e86\u6807\u8bb0\uff0c\u76f4\u63a5\u8df3\u8fc7\uff01\u8fd9\u91cc\u8bf4\u7684\u5411\u4e0b\u627e\u70b9\u6307\u7684\u662f\u627epai2\u6570\u7ec4\u91cc\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807\u70b9\u3002\n \n \u56e0\u4e3a\u63a5\u4e0b\u6765\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u7ec8\u70b9\u65f6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u627e\u5230\u66f4\u9ad8\u7684\u5356\u5bb6\uff01\n####  7.\u76ee\u524d\u7684\u5dee\u4ef7ans\u5982\u679c\u5df2\u7ecf\u9ad8\u8fc7\u4e86\u4e0b\u4e00\u4e2amaxget[pai2[i+1]]\u7684\u8bdd\uff0c\u76f4\u63a5\u8f93\u51fa\uff08\u56e0\u4e3a\u63a5\u4e0b\u6765\u4e0d\u53ef\u80fd\u6709\u66f4\u9ad8\u7684\u5dee\u4ef7\u4e86\uff09(\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u4f18\u5316\uff0c\u8fd9\u4e2a\u5bb9\u6613\u60f3\u5230qwq)\n\u5168\u90e8\u7ed3\u675f\u7684\u65f6\u5019\u4e5f\u8f93\u51fa\u4e00\u4e0bans\u3002\n\n\n\u63a5\u4e0b\u6765\u653e\u4ee3\u7801\uff1a\n```\n#include <cstdio>\n#include <cstdlib>\n\nusing namespace std;\n\nlong long int n,m;\nlong long int ans=0;\nlong long int *p;\nlong long int * maxget;\n \n\nint cmp1(const void *a,const void *b)\n{\n\t\n\treturn(p[*(long long int*)a]-p[*(long long int*)b]);\n\t\n}\n\nint cmp2(const void *a,const void *b)\n{\n\t\n\treturn(maxget[*(long long int*)b]-maxget[*(long long int*)a]);\n\t\n}\n\nint main(void)\n{\n\t//freopen(\"trade.in\",\"r\",stdin);\n\t//freopen(\"trade.out\",\"w\",stdout);\n\tscanf(\"%lld %lld\",&n,&m);\t\n\tp=(long long int*)calloc(n,sizeof(long long int ));\n\tlong long int **r=(long long int **)calloc(n,sizeof(long long int*));\n\tbool* reachable=(bool*)calloc(n,sizeof(bool));\n\tfor(long long int i=0;i<n;i++)\n\t{\n\t\tr[i]=(long long int *)calloc(1,sizeof(long long int));\n\t\tr[i][0]=0;\n\t\tscanf(\"%lld\",&p[i]);\n\t}\n\treachable[0]=1;\n\tfor(long long int i=0;i<m;i++)\n\t{\n\t\tlong long int a,b,c;\n\t\tscanf(\"%lld %lld %lld\",&a,&b,&c);\n\t\ta--;b--;\n\t\tif(c==1)\n\t\t{\n\t\t\tif(reachable[a])reachable[b]=1;\n\t\t\tr[b][0]++;\n\t\t\tr[b]=(long long int*)realloc(r[b],sizeof(long long int)*(r[b][0]+1));\n\t\t\tr[b][r[b][0]]=a;\n\t\t}\n\t\telse if(c==2)\n\t\t{\n\t\t\tif(reachable[a])reachable[b]=1;\n\t\t\tif(reachable[b])reachable[a]=1;\n\t\t\tr[a][0]++;\n\t\t\tr[a]=(long long int*)realloc(r[a],sizeof(long long int)*(r[a][0]+1));\n\t\t\tr[a][r[a][0]]=b;\n\t\t\tr[b][0]++;\n\t\t\tr[b]=(long long int*)realloc(r[b],sizeof(long long int)*(r[b][0]+1));\n\t\t\tr[b][r[b][0]]=a;\n\t\t}\n\t}\n\tmaxget=(long long int*)calloc(n,sizeof(long long int));\n\tlong long int * pai=(long long int*)calloc(n,sizeof(long long int));\n\tfor(long long int i=0;i<n;i++)\n\t{\n\t\tpai[i]=i;\n\t}\n\tqsort(pai,n,sizeof(long long int),cmp1);\n\tfor(long long int i=0;i<n;i++)\n\t{\n\t\tmaxget[i]=p[i]-p[pai[0]];\n\t}\n\tlong long int * pai2=(long long int*)calloc(n,sizeof(long long int));\n\tfor(long long int i=0;i<n;i++)\n\t{\n\t\tpai2[i]=i;\n\t}\n\tqsort(pai2,n,sizeof(long long int),cmp2);\n\tlong long int * dui=(long long int*)calloc(n,sizeof(long long int));\n\tlong long int head=0;\n\tlong long int tail=1;\n\tbool* flag=(bool*)calloc(n,sizeof(bool));\n\tdui[0]=n-1;\n\twhile(head!=tail)\n\t{\n\t\tfor(long long int i=1;i<=r[dui[head]][0];i++)\n\t\t{\n\t\t\tif(!flag[r[dui[head]][i]])\n\t\t\t{\n\t\t\t\tdui[tail]=r[dui[head]][i];\n\t\t\t\ttail++;\n\t\t\t\tif(tail==n)tail=0;\n\t\t\t\tflag[r[dui[head]][i]]=1;\n\t\t\t}\n\t\t}\n\t\thead++;\n\t\tif(head==n)head=0;\n\t}\n\tbool* found=(bool*)calloc(n,sizeof(bool));\n\tbool* pflag=(bool*)calloc(n,sizeof(bool));\n\tfor(long long int i=0;i<n;i++)\n\t{\n\t\tif(flag[pai2[i]]&&reachable[pai2[i]]&&!found[pai2[i]])\n\t\t{\n\t\t\thead=0;tail=1;\n\t\t\tdui[0]=pai2[i];\n\t\t\twhile(head!=tail)\n\t\t\t{\n\t\t\t\tfor(long long int i2=1;i2<=r[dui[head]][0];i2++)\n\t\t\t\t{\n\t\t\t\t\t//printf(\"Searching%lld:%lld\\n\",i2,r[dui[head]][i2]);\n\t\t\t\t\tif(!pflag[r[dui[head]][i2]]&&reachable[r[dui[head]][i2]])\n\t\t\t\t\t{\n\t\t\t\t\t\tdui[tail]=r[dui[head]][i2];\n\t\t\t\t\t\ttail++;\n\t\t\t\t\t\tif(tail==n)tail=0;\n\t\t\t\t\t\tpflag[r[dui[head]][i2]]=1;\n\t\t\t\t\t\tfound[r[dui[head]][i2]]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\thead++;\n\t\t\t\tif(head==n)head=0;\n\t\t\t}\n\t\t\tfor(long long int i2=0;i2<n;i2++)\n\t\t\t{\n\t\t\t\tif(pflag[pai[i2]])\n\t\t\t\t{\n\t\t\t\t\tans=ans>p[pai2[i]]-p[pai[i2]]?ans:p[pai2[i]]-p[pai[i2]];\n\t\t\t\t\tif(ans>=maxget[pai2[i+1]])\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"%lld\",ans);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\tfor(long long int i=0;i<n;i++)\n\tfree(r[i]);\n\tfree(r);\n\tfree(p);\n\tfree(maxget);\n\tfree(pai);\n\tfree(dui);\n\tfree(flag);\n\tfree(pflag);\n\tfree(pai2);\n\tfree(reachable);\n\tfree(found);\n\t//fclose(stdin);fclose(stdout);\n\treturn 0;\n}\n```",
        "postTime": 1541637743,
        "uid": 67498,
        "name": "renxiaoyao36",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "# \u6765\u4e00\u7bc7DP\u89e3\u6cd5\n\n\u7ecf\u5178DP\u6a21\u677f\u90fd\u662f\n\n```cpp\nfor(int i=1;i<=n;i++)\n{\n\tf[i][j]=max / min (\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b)\n    f[\u72b6\u6001]=\u6700\u4f18\u89e3\n\t\n}\n\nans=f[\u6700\u7ec8\u72b6\u6001]\uff1b\n```\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cdp\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u5927\u95ee\u9898\u5316\u4e3a\u5c0f\u95ee\u9898\uff0c\u901a\u8fc7\u5bfb\u627e\uff08for\u5faa\u73af\uff09\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3/\u679a\u4e3e\u5404\u4e2a\u72b6\u6001\u7684\u6700\u4f18\u89e3\uff0c\u9012\u63a8\u5f97\u5230\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u800c\u5b9e\u73b0\u5bfb\u627e\u7684\u5de5\u5177\uff0c\u65e0\u975e\u5c31\u662f\u641c\u7d22\n\n### \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u641c\u7d22\u4ee3\u66fffor\u5faa\u73af\uff0c\u4e00\u6b65\u4e00\u6b65\u5bfb\u627e/\u9012\u63a8\u95ee\u9898\u7684\u591a\u79cd\u72b6\u6001/\u53ef\u80fd\u89e3/\u5c0f\u95ee\u9898\u6700\u4f18\u89e3\uff0c\u6700\u540e\u89e3\u51b3\u95ee\u9898\u3002\n\n\u641c\u7d22+DP\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u53ea\u662f\u628afor\u5faa\u73af\u6362\u6210DFS/BFS\u800c\u5df2\u3002\u6211\u4eec\u53ef\u4ee5\u5427\u9700\u8981\u8bb0\u5f55\u7684\u72b6\u6001\uff0c\u6682\u65f6\u89e3\u7b49\u7528\u6570\u7ec4\u6216\u9012\u5f52\u7a0b\u5e8f\u7684\u5f62\u53c2\u4fdd\u5b58\uff0c\u9700\u8981\u65f6\u7528IF\u5224\u65ad\n\n\u5f53\u7136\u8fd9\u7528\u65b9\u6cd5\u7684\u96be\u70b9\u548cDP\u662f\u4e00\u6837\u7684\uff0c\u601d\u8003\u600e\u6837\u9012\u63a8\u5927\u95ee\u9898/\u5bfb\u627e\u4ec0\u4e48\u72b6\u6001/\u5c0f\u95ee\u9898\u662f\u4ec0\u4e48\u624d\u662f\u7cbe\u9ad3\n\n\u56de\u5230\u672c\u9898\uff0c\u5206\u6790\u540e\u6211\u4eec\u77e5\u9053\uff0c\u963f\u9f99\u6bcf\u6b21\u6765\u5230\u4e00\u4e2a\u70b9\uff0c\u4ed6\u5e94\u8be5\u5173\u5fc33\u4e2a\u95ee\u9898\uff1a\n\n1.\u6211\u5728\u54ea\uff08\u5e9f\u8bdd\uff09\n\n2.\u8fd9\u4e2a\u57ce\u5e02\u7269\u4ef7\u5982\u4f55\n\n3.\u82e5\u6211\u5728\u66fe\u7ecf\u7ecf\u8fc7\u7684\u57ce\u5e02\u4e70\u6c34\u6676\u7403\uff0c\u5728\u8fd9\u91cc\u5356\u4e86\uff0c\u6211\u80fd\u8d5a\u6700\u591a\u94b1\u5417\uff1f\n\n\u663e\u7136\u4e86\uff01\u524d\u4e24\u4e2a\u95ee\u9898\u4f60\u53ef\u4ee5\u5341\u5206\u786e\u5b9a\u7684\u544a\u8bc9\u4ed6\uff0c\u4f46\u7b2c\u4e09\u4e2a\u95ee\u9898\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u6240\u4ee5\u6211\u4eec\u7684\u641c\u7d22+DP\u5c06\u8981\u8ba8\u8bba\u7684\u5c31\u662f\u8fd9\u4e2a\u95ee\u9898\n\n\u521d\u6b65\u7684\u601d\u8def\uff1a\u6211\u4eec\u53ef\u4ee5\u8bbef[i]\u4e3a\u5728i\u57ce\u65f6\uff0c\u963f\u9f99\u66fe\u7ecf\u7ecf\u8fc7\u7684\u57ce\u5e02\u4e2d\u7269\u4ef7\u6700\u5c0f\u503c\u3002\u4f46\u662f\uff01\u6211\u4eec\u53bbi\u57ce\u7684\u8def\u7ebf\u7edd\u4e0d\u53ef\u80fd\u53ea\u6709\u4e00\u79cd\uff0c\u6240\u4ee5\u4f60\u8981\u4e8c\u7ef4\u6570\u7ec4f[i][j]\u6765\u8bb0\u5f55\u7b2cj\u79cd\u60c5\u51b5\u3002\u53ef\u53c8\u4f46\u662f\uff01\u4f60\u5e76\u4e0d\u77e5\u9053j\u4f1a\u6709\u591a\u5927\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4f60\u65e0\u6cd5\u5f00\u6570\u7ec4\uff1b\u6211\u4eec\u89c2\u5bdf\u9898\u76ee\u6761\u4ef6\u4e2d\uff0c\u6c34\u6676\u7403\u4ef7\u683c\u2264100\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u5f88\u5de7\u7684\u65b9\u6cd5\uff1a\n\n\u8bbebool\u6570\u7ec4f[i][j]\u8868\u793a\u5728i\u57ce\u65f6\uff0c\u66fe\u7ecf\u7ecf\u8fc7\u7684\u57ce\u5e02\u4e2d\u7269\u4ef7\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u4f7f\u7528BFS\u8fdb\u884c\u641c\u7d22\u3002\u5f53f[i][j]==1\u65f6\uff0c\u8868\u793a\u8fd9\u79cd\u72b6\u6001\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\uff0c\u4ee5\u8fd9\u79cd\u72b6\u6001\u5f80\u4e0b\u7684\u8ba8\u8bba\u53ea\u4f1a\u6709\u76f8\u540c\u7ed3\u679c\uff0c\u4e0d\u518d\u52a0\u5165BFS\u7684\u961f\u5217\u3002\u5f53f[i][j]==0\u65f6\uff0c\u518d\u7ee7\u7eed\u8ba8\u8bba\u8fd9\u79cd\u72b6\u6001\u5728\u5f80\u540e\u9762\u8d70\u7684\u65b0\u7ed3\u679c\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u57ce\u5e02\u7684\u53ef\u80fd\u6027\u8fdb\u884c\u8ba8\u8bba\uff0c\u6211\u4eec\u5c31\u80fd\u641c\u51fa\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e86\uff1b\n\n\u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u57ce\u5e02\uff0c\u53ef\u80fd\u8fdb\u53bb\u4e4b\u540e\u963f\u9f99\u5c31\u4e0d\u80fd\u518d\u8d70\u5230\u7ec8\u70b9n\u4e86\uff0c\u800c\u4ed6\u5fc5\u987b\u5728n\u57ce\u7ed3\u675f\u65c5\u884c\u3002\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\uff0c\u628a\u8fd9\u4e9b\u57ce\u5e02\u53bb\u6389\uff0c\u4e0d\u7eb3\u5165\u4e0a\u9762\u7684\u8ba8\u8bba\u8303\u56f4\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u5730\u56fe\u53cd\u5411\u5b58\u4e00\u904d\uff0c\u7136\u540e\u4ee5n\u57ce\u4e3a\u8d77\u70b9\u53cd\u5411\u641c\u7d22\uff0c\u6b64\u65f6\u65e0\u6cd5\u5230\u8fbe\u7684\u70b9\uff0c\u5728\u6b63\u5411\u65f6\u5fc5\u5b9a\u4e0d\u80fd\u4ece\u90a3\u91cc\u5230n\u57ce\u3002\n\n\n\u4e0a\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint price[100001];\nint next[500001],to[500001],x[500001];//\u6b63\u5411\u6784\u56fe\nint next_re[500001],to_re[500001],x_re[500001];//\u53cd\u5411\u6784\u56fe\nint n,m;\nint queue[3000000];//\u53cd\u5411BFS\u7528\u5355\u5c42\u961f\u5217\u591f\u4e86\nbool vis[100001];\nbool f[100001][102];\nint q[3000000][2];//\u6b63\u5411BFS\u9700\u8981\u50a8\u5b58\u961f\u5217\u4e2d\u5143\u7d20\u7684\u989d\u5916\u72b6\u6001\uff0c\u7528\u53cc\u5c42\u961f\u5217\uff08\u672c\u8d28\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\uff09\nint main()\n{\nstd::ios::sync_with_stdio(false);//\u8bfb\u5165\u4f18\u5316\u7b80\u5355\u7248\ncin>>n>>m;\nfor(int i=1;i<=n;i++)cin>>price[i];\nint cnt=0;\nint a,b,c;\nfor(int i=1;i<=m;i++)\n{\ncin>>a>>b>>c;\nif(c==1)//\u53cc\u5411\u6784\u5efa\u8fb9\n{\n\tcnt++;\n\tto[cnt]=b;\n\tnext[cnt]=x[a];\n\tx[a]=cnt;//\u6b63\n\t\n\tto_re[cnt]=a;\n\tnext_re[cnt]=x_re[b];\n\tx_re[b]=cnt;//\u53cd\n}\nelse if(c==2)\n{\n\tcnt++;\n\tto[cnt]=b;\n\tnext[cnt]=x[a];\n\tx[a]=cnt;\n\t\n\tto_re[cnt]=a;\n\tnext_re[cnt]=x_re[b];\n\tx_re[b]=cnt;\n\t\n\t//----------------------\n\t\n\tcnt++;\n\tto[cnt]=a;\n\tnext[cnt]=x[b];\n\tx[b]=cnt;\n\t\n\tto_re[cnt]=b;\n\tnext_re[cnt]=x_re[a];\n\tx_re[a]=cnt;\n}\n}\n\n//\u53cd\u5411BFS\nint h=1,t=1;\nqueue[1]=n;\nvis[n]=1;//\u9996\u5143\u7d20\u8fdb\u961f\nwhile(h<=t)//\u5f53\u961f\u4e0d\u7a7a\u65f6\n{\nint k=queue[h];h++;//\u53d6\u5934\u5143\u7d20\uff0c\u51fa\u961f\nfor(int j=x_re[k];j!=0;j=next_re[j])//\u904d\u5386\u5176\u51fa\u8fb9\n{\n\tif(vis[to_re[j]]==0)\n\t{\n\t\tvis[to_re[j]]=1;//vis\u5b58\u50a8\u662f\u5426\u8bbf\u95ee\u8fc7(\u7b49\u4ef7\u4e8e\u662f\u5426\u53ef\u4ee5\u7531\u7ec8\u70b9\u8bbf\u95ee)\n\t\tqueue[++t]=to_re[j];//\u8fdb\u961f\n\t}\n\t\n}\n}\n\n\n\n\n\n//\u6b63\u5411BFS\nh=1;t=1;\nq[1][0]=1;\nq[1][1]=price[1];//\u9996\u5143\u7d20\u8fdb\u961f\nf[1][price[1]]=1;\nint ans=-1;\nwhile(h<=t)\n{\nint k=q[h][0];//\u53cc\u5c42\u961f\u5217\nint mini=q[h][1];//[o]\u5b58\u70b9  [1]\u5b58\u8be5\u70b9\u5bf9\u5e94\u72b6\u6001\u7684\u6700\u5c0f\u4ef7\u503c\nh++;\n\n//ans=std::max(ans,price[k]-mini);\n\nans=ans>price[k]-mini?ans:price[k]-mini;//\u5148\u66f4\u65b0\u7b54\u6848\nfor(int j=x[k];j!=0;j=next[j])\n{\n\tif(vis[to[j]]==1)//\u82e5\u70b9\u53ef\u4ee5\u5230\u7ec8\u70b9\n\t{\n\t\tint m=mini<price[to[j]]?mini:price[to[j]];//\u66f4\u65b0\u6700\u5c0f\u503c\n\t\tif(f[to[j]][m]==0)//\u82e5\u8fd9\u4e2a\u72b6\u6001\u6ca1\u6709\u88ab\u8bb0\u5f55\u8fc7\n\t\t{\n\t\t\tq[++t][0]=to[j];//\u8be5\u70b9\u8fdb\u961f\n\t\t\tq[t][1]=m;\n\t\t\tf[to[j]][m]=1;\n\t\t}\n\t}\n}\n\n}\n\n\n\n\ncout<<ans;\n\nreturn 0;\n}\n\n\n```\n\n\n\n\u6700\u540e\u611f\u8c22\u795e\u7287 SPiCa  \u7684\u601d\u8def\n\n",
        "postTime": 1540209320,
        "uid": 110873,
        "name": "Coding\u7684\u4e8c\u8425\u957f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u5230dalao\u4eectarjan DP spfa\n\n\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u6df1\u611f\u65e0\u529b\uff0c\u56e0\u4e3a\u6211\u5f31\u5230\u53ea\u80fd\u60f3\u51fa\u4e00\u4e2adfs\u7684\u505a\u6cd5\n\n\n------------\n\n\u57fa\u672c\u601d\u8def\u5c31\u662f\u7528dfs\u5904\u7406\u51fa\u5230\u5f53\u524d\u70b9\u7684\u8def\u5f84\u4e0a\u524d\u9762\u7684\u6700\u5c0f\u503c\u548c\u540e\u9762\u7684\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u8981\u4f4e\u8fdb\u9ad8\u51fa\n\n\u53cc\u5411\u8fb9\u662f\u7279\u522b\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u5c31\u6bd4\u8f83\u5bb9\u6613\u5904\u7406\uff0c\u5f53\u7136\u4e0d\u7279\u522b\u7ed9\u51fa\u4e5f\u6709\u529e\u6cd5\uff0c\u6211\u60f3\u7684\u662f\u79bb\u7ebf\u52a0\u8fb9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86\n\n\u5f53\u7136\u662f\u4ece1\u5f00\u59cbdfs\uff0c\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\n\n\u7ef4\u62a4\u4e86preMin\u548cnextMax\uff0c\u8868\u793a\u524d\u9762\u8def\u5f84\u7684\u6700\u5c0f\u503c\u548c\u540e\u9762\u8def\u5f84\u7684\u6700\u5927\u503c\n\n\u5982\u679c\u662f\u53cc\u5411\u8fb9\uff0c\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u6210\u4e3a\u5b83\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u6216\u662f\u5f53\u524d\u8282\u70b9\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6210\u4e3a\u5b83\u7684\u524d\u9a71\u8282\u70b9\uff0c\u641c\u5b8c\u53cc\u5411\u8fb9\u7684\u8fde\u5230\u7684\u8282\u70b9\u4e4b\u540e\u9012\u5f52\u56de\u6765\u4e4b\u540e\u8ba9\n$p[now].preMin=min(p[now].preMin,p[next].preMin)$\n$p[next].nextMax=max(p[now].nextMax,p[next].nextMax)$\n\u5373\u53ef\uff0c\u8fd9\u6837preMin\u5e94\u8be5\u662f\u5904\u7406\u7684\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662fnextMax\u5904\u7406\u7684\u5e94\u8be5\u662f\u4e0d\u5b8c\u5168\u7684\uff0c\u8003\u8651\u4e00\u4e0b\u8fde\u7eed\u591a\u4e2a\uff08\u6bd4\u5982\u4e24\u4e2a\uff09\u53cc\u5411\u8fb9\u5c31\u53ef\u4ee5\u77e5\u9053\n\n\u4f46\u662f\u6ca1\u6709\u8fde\u7eed\u53cc\u5411\u8fb9\u7684\u90e8\u5206\u90fd\u662f\u5b8c\u5168ok\u7684\uff0c\u800c\u4e14\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u4e3a\u8fde\u7eed\u53cc\u5411\u8fb9\u7684\u8d77\u70b9\u7684preMin\u548cnextMax\u5904\u7406\u5b8c\u5168\u4e86\uff0c\u4ece\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\u4e86\n\n\u7136\u540e\u518d\u904d\u5386\u6240\u6709\u70b9\uff0c\u627e\u5bfb\u80fd\u591f\u5230\u8fbe\u7b2cn\u4e2a\u70b9\u7684\u70b9\uff0c\u6267\u884c\u4e0b\u9762\u8fd9\u53e5\uff1aans=max(ans,p[now].nextMax-p[now].preMin)\n\n\u5f53\u7136\uff0c\u6bcf\u4e2a\u70b9\u53ea\u9700\u8981\u641c\u5230\u4e00\u904d\uff0c\u56e0\u4e3a\u4ed6\u540e\u9762\u7684\u8def\u5f84\u662f\u786e\u5b9a\u7684\uff0c\u4e0d\u786e\u5b9a\u7684\u662f\u80fd\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u7684\n\n\u7ed3\u5408\u4ee3\u7801\u4f1a\u66f4\u597d\u7406\u89e3\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec\u4e86\u4e00\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982\u600e\u4e48\u5904\u7406\u80fd\u4e0d\u80fd\u5230\u70b9n(struct Node\u91cc\u7684yes)\uff0c\u4ee5\u53cadfs\u540e\u7ee7\u3001\u5904\u7406preMin\u548cnextMax\u7684\u987a\u5e8f\u7b49\u7b49\n\n\u590d\u6742\u5ea6\u6211\u5206\u6790\u51fa\u6765\u662fO(n+m)\uff0c\u5982\u679c\u6709\u9519\u8bef\u8fd8\u5e0c\u671bdalao\u6307\u51fa\u3002\u3002\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\n#define For(i,l,r) for(int i=l;i<=r;++i)\n#define MAXN 100010\n#define MAXNN 500010\nusing namespace std;\ninline int read()\n{\n    char c;\n    bool t=0;\n    int a=0;\n    while((c=getchar())==' '||c=='\\n'||c=='\\r');\n    if(c=='-')\n    {\n        t=1;\n        c=getchar();\n    }\n    while(isdigit(c))\n    {\n        a*=10;\n        a+=(c-'0');\n        c=getchar();\n    }\n    return a*(t?-1:1);\n}\nstruct Node{\n    int v,preMin,nextMax,last;\n    bool yes;\n}p[MAXN];\nstruct Edge{\n    int to,next;\n    bool id;\n}e[MAXNN*2];\nint n,m,cnt;\nbool vis[MAXN];\nvoid add(int from,int to,bool id)\n{\n    e[++cnt].to=to;\n    e[cnt].next=p[from].last;\n    p[from].last=cnt;\n    e[cnt].id=id;\n}\nvoid dfs(int now,int pre)\n{\n    vis[now]=1;\n    if(pre)\n     p[now].preMin=min(p[now].preMin,p[pre].preMin);\n    int temp=p[now].last;\n    while(temp)\n    {\n        if(!vis[e[temp].to])\n         dfs(e[temp].to,now);\n        p[now].yes=(p[now].yes|p[e[temp].to].yes);\n        p[now].nextMax=max(p[e[temp].to].nextMax,p[now].nextMax);\n        if(e[temp].id)\n        {\n            p[now].preMin=min(p[now].preMin,p[e[temp].to].preMin);\n            p[e[temp].to].nextMax=max(p[e[temp].to].nextMax,p[now].nextMax);\n        }\n        temp=e[temp].next;\n    }\n}\nint main()\n{\n    int tx,ty,tz,ans=0;\n    n=read();m=read();\n    p[n].yes=1;\n    For(i,1,n)\n    {\n        p[i].v=read();\n        p[i].preMin=p[i].v;\n        p[i].nextMax=p[i].v;\n    }\n    For(i,1,m)\n    {\n        tx=read();ty=read();tz=read();\n        if(tz==1)\n         add(tx,ty,0);\n        else\n        {\n            add(tx,ty,1);\n            add(ty,tx,1);\n        }\n    }\n    dfs(1,0);\n    For(i,1,n)\n    {\n        if(p[i].yes)\n         ans=max(ans,p[i].nextMax-p[i].preMin);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1534950660,
        "uid": 36194,
        "name": "EightSixSun",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "> \u4ee5\u524d\u5728\u522b\u7684OJ\u4e0a\u505a\u8fc7\u8fd9\u4e2a\u9898, \u90fd\u5fd8\u4e86  \n> \u6700\u8fd1\u6709\u4eba\u95ee\u8d77\u6211, \u627e\u6765\u4ee3\u7801, \u5e76\u770b\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48A\u4e86  \n> \u4ea4\u5230luogu\u4e0a\u4e5fA\u4e86, \u54ea\u4f4d\u6709\u7f18\u4eba\u5e2e\u6211\u77a7\u77a7, \u6b63\u786e\u6027\u4f55\u5728..?\n\n\u666e\u901a\u7684\u4e24\u6b21dfs  \n\u7b2c\u4e00\u6b21\u6b63\u5411, \u6c42\u51faminv[i], \u8868\u793a\u4ece1\u8d70\u5230i\u8def\u7ecf\u7684\u6700\u5c0f\u503c  \n\u7b2c\u4e8c\u6b21\u9006\u5411, \u6c42\u51famaxv[i], \u8868\u793a\u4ecei\u8d70\u5230n\u8def\u7ecf\u7684\u6700\u5927\u503c  \n\n\u7136\u540e\u5faa\u73af\u4e00\u904d\u6c42\u51famax{maxv[i]-minv[i]}\n\n\u603b\u89c9\u5f97\u6709\u4ec0\u4e48\u53cd\u4f8b\u80fd\u63a8\u7ffb\u8fd9\u4e2a\u505a\u6cd5..\n\n```C++\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <cstring>\nusing namespace std;\n\nvector <int> G[100005], fG[100005]; \nint maxn[100005], minv[100005], v[100005];\nint n, m;\nbool vis[100005];\n\nvoid init(){\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1; i <= n; i++)\n\t\tscanf(\"%d\", v+i);\n\tfor(int i = 1; i <= m; i++){\n\t\tint x, y, z;\n\t\tscanf(\"%d %d %d\", &x, &y, &z);\n\t\tG[x].push_back(y);\n\t\tfG[y].push_back(x);\n\t\tif(z > 1) G[y].push_back(x), fG[x].push_back(y);    \n\t}\n}\n\nvoid dfs1(int now){\n\tvis[now] = 1;\n\tfor(int i = 0; i < G[now].size(); i++){\n\t\tint nex = G[now][i];\n\t\tif(vis[nex]) continue;\n\t\tminv[nex] = min(minv[now], v[nex]);\n\t\tdfs1(nex);\n\t}\n}\n\nvoid dfs2(int now){\n\tvis[now] = 1;\n\tfor(int i = 0; i < fG[now].size(); i++){\n\t\tint nex = fG[now][i];\n\t\tif(vis[nex]) continue;\n\t\tmaxn[nex] = max(maxn[now], v[nex]);\n\t\tdfs2(nex);\n\t}\n}\n\nvoid solve(){\n\tmemset(minv, 0x3f, sizeof minv);\n\tminv[1] = v[1];\n\tdfs1(1);\n\tmemset(vis, 0, sizeof vis);\n\tdfs2(n);\n\tint ans = 0;\n\tfor(int i = 1; i <= n; i++)\n\t\tans = max(ans, maxn[i] - minv[i]);\n\tprintf(\"%d\", ans);\t\n}\n\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1528875916,
        "uid": 6146,
        "name": "Skyo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u968f\u4fbf\u770b\u4e86\u770b\uff0c\u8c8c\u4f3c\u6ca1\u6709\u4eba\u7684\u9898\u89e3\u548c\u6211\u5199\u7684\u76f8\u4f3c\u7684\u3002\u3002\u3002~~\uff08\u4e8e\u662f\u6765\u6c34\u7bc7\u9898\u89e3\uff09~~\n\nemmm...\u597d\u4e86\u6211\u4e5f\u4e0d\u8bf4\u592a\u591a\u5e9f\u8bdd\u3002\u8bb2\u8bb2\u9898\u76ee\u5427\u3002\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u7ed9\u6211\u7684\u7b2c\u4e00\u5370\u8c61\u5c31\u662f\uff1a\u597d\u50cf\u505a\u8fc7\u7c7b\u4f3c\u7684\uff0c\u8d77\u7801\u662f\u53ef\u4ee5\u7528\u5927\u81f4\u76f8\u540c\u7684\u505a\u6cd5\u505a\u7684\u9898\u76ee\u3002\u4e8e\u662f\u771f\u7684\u7528\u5dee\u4e0d\u591a\u7684\u601d\u8defA\u4e86\u6b64\u9898\uff08\u5c31\u662f\u8fc7\u7a0b\u4e2d\u6709\u70b9\u5c0f\u6ce2\u6298\uff1a\u5fd8\u4e86\u5148pop\u6389\u5165\u5ea6\u4e3a0\u7684\u4f1a\u5bf9\u7b97\u6cd5\u4ea7\u751f\u5e72\u6270\u7684\u6ca1\u7528\u7684\u70b9\uff0c\u7136\u540eWA\u4e867\u4e2a\u70b9\u5413\u6b7b\u6211\u4e86\u8fd8\u4ee5\u4e3a\u6211\u601d\u8def\u6709\u95ee\u9898\uff09\u3002\u603b\u4e4b\u7ed3\u5c40\u8fd8\u662f\u597d\u7684\u3002\u6bd5\u7adfA\u4e86\u3002\u3002\u3002\n\n\u672c\u9898\u601d\u8def\u5176\u5b9e\u6982\u62ec\u4e00\u4e0b\u5c31\u662ftarjan\u5148\u7f29\u7f29\u70b9\uff0c \u7136\u540e\u518d\u53cd\u5411\u5efa\u56fe\uff08\u5176\u5b9e\u6b63\u5411\u4e5f\u53ef\u4ee5\uff0c\u90fd\u5dee\u4e0d\u591a\u5427\uff09\u3002\u518d\u7136\u540e\u5c31\u662ftopo\u4e00\u4e0b\uff0c\u5728\u5f39\u70b9\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4fe1\u606f\u7684\u4f20\u9012\u3002\u6700\u540eans[blg[1]]\u4e2d\u5b58\u7684\u5c31\u662fresult\u4e86\uff01OK\u4e0a\u4ee3\u7801\u3002\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int M=1e5+100;\ninline int read(){  //\u65e5\u5e38\u8bfb\u4f18\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\nint n,m,tim,top,cnt,pat;\nint dfn[M],low[M],blg[M];\nint pri[M],mx[M],mn[M],ans[M];\nint head[M],last[M],stk[M],du[M];\nbool ins[M];\nstruct Edge{\n\tint v,next;\n}e[M*10],g[M*10];\ninline void add(int u,int v) //\u8fde\u8fb91\n{ e[++pat].v=v; e[pat].next=head[u]; head[u]=pat; }\ninline void add2(int u,int v) //\u8fde\u8fb92\n{ g[++pat].v=v; g[pat].next=last[u]; last[u]=pat; }\ninline void tarjan(int u){  //tarjan\u7f29\u70b9\u4e0d\u89e3\u91ca\n\tdfn[u]=low[u]=++tim;\n\tstk[++top]=u; ins[u]=true;\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(!dfn[v]) tarjan(v), low[u]=min(low[u] , low[v]);\n\t\telse if(ins[v]) low[u]=min(low[u] , dfn[v]);\n\t}\n\tif(dfn[u]==low[u]){\n\t\tint j; ++cnt;\n\t\tdo{\n\t\t\tj=stk[top--];\n\t\t\tins[j]=false; blg[j]=cnt;\n\t\t\tmx[cnt]=max(mx[cnt] , pri[j]);\n\t\t\tmn[cnt]=min(mn[cnt] , pri[j]);\n   //\u4e5f\u5c31\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e0b\u5f53\u524d\u8054\u901a\u5757\u7684\u4ef7\u683c\u6700\u5927\u6700\u5c0f\u503c\u4fe1\u606f\uff0c\u5176\u4ed6\u5c31\u662f\u6a21\u677f\n\t\t}while(j!=u);\n\t}\n}\n\ninline void topo(){\n\tqueue<int> Q;\n\tfor(int i=1;i<=cnt;++i)  //\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8054\u901a\u5757\uff08n\u6240\u5728\u8054\u901a\u5757\u4e0d\u7b97\uff09\n\t\tif(!du[i] && i!=blg[n]) Q.push(i);\n\twhile(!Q.empty()){ //\u5f39\u5230\u6ca1\u7528\u7684\u70b9\u90fd\u6d88\u5931\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6709\u7528\u7684\u70b9\u4e86\n\t\tint u=Q.front(); Q.pop();\n\t\tfor(int i=last[u];i;i=g[i].next){\n\t\t\tint v=g[i].v;\n\t\t\t--du[v];\n\t\t\tif(!du[v]) Q.push(v);\n\t\t}\n\t}\n\t\n\tQ.push(blg[n]); //\u7531\u4e8e\u662f\u53cd\u5411\u5efa\u56fe\uff0c\u628an\u6240\u5728\u7684\u8054\u901a\u5757\u585e\u8fdb\u961f\u5217\n\twhile(!Q.empty()){\n\t\tint u=Q.front(); Q.pop();\n\t\tans[u]=max(ans[u] , mx[u]-mn[u]); //\u81ea\u6211\u66f4\u65b0\n\t\tfor(int i=last[u];i;i=g[i].next){\n\t\t\tint v=g[i].v; --du[v];\n\t\t\tif(!du[v]) Q.push(v);\n\t\t\tmx[v]=max(mx[v] , mx[u]); //\u8fd9\u91cc\u53ea\u9700\u8981\u8fdb\u884c\u6700\u5927\u4ef7\u683c\u7684\u4f20\u9012\n            //\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6ca1\u6709\u6700\u5c0f\u4ef7\u683c\u7684\u4f20\u9012\u540c\u5b66\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\n\t\t\tans[v]=max(ans[v] , ans[u]); //\u8fdb\u884c\u4e00\u4e2a\u7b54\u6848\u7684\u4f20\u9012\n\t\t}\n\t}\n}\n\nint main(){\n\tn=read(); m=read();\n\tmemset(mn , 0x3f , sizeof(mn));\n\tfor(int i=1;i<=n;++i) //\u8bfb\u5165\u6bcf\u4e2a\u70b9\u7684\u4ef7\u683c\n\t\tpri[i]=read();\n\tfor(int i=1;i<=m;++i){  //\u8bfb\u8fb9\n\t\tint u=read(),v=read(),z=read();\n\t\tadd(u,v); if(z==2) add(v,u);\n\t} pat=0;\n\tfor(int i=1;i<=n;++i) //\u7f29\u70b9\u4e0d\u89e3\u91ca\n\t\tif(!dfn[i]) tarjan(i);\n    \n\tfor(int u=1;u<=n;++u) //\u53cd\u5411\u5efa\u56fe\n\tfor(int j=head[u];j;j=e[j].next){\n\t\tint v=e[j].v;\n\t\tif(blg[u]==blg[v] || blg[v]==blg[1] || blg[u]==blg[n])\n        \tcontinue; //\u4e0d\u6ee1\u8db3\u4efb\u610f\u4e00\u4e2a\u6761\u4ef6\u5219continue\n\t\tadd2(blg[v],blg[u]); ++du[blg[u]];\n\t}\n\ttopo();\n\tprintf(\"%d\\n\",ans[blg[1]]); //\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u5b8c\u4e8b\n\treturn 0;\n}\n```\n\n\n\u6c34\u5b8c\u4e00\u7bc7\u9898\u89e3\u5fc3\u91cc\u7f8e\u6ecb\u6ecb ( *** ^\u25bd^ **  * )",
        "postTime": 1524017980,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u67d0\u4e9b\u65f6\u5019\u8fd8\u662f\u8981\u76f8\u4fe1\u81ea\u5df1\u3002\n\n\u8fd9\u9898\u660e\u663e\uff08\u5bf9\u4e8e\u6211\u6765\u8bf4\uff09\uff0c\u4e00\u770b\u5c31\u662ftarjan\u7f29\u70b9\uff0c\u81f3\u4e8e\u540e\u9762\u600e\u4e48\u5904\u7406\u8fd8\u6ca1\u60f3\u597d\uff0c\u4e8e\u662f\u6211\u5c31\u5199\u4e86\u3002\u5199\u5b8c\u7f29\u70b9\u540e\uff0c\u53d1\u73b0\u6709\u4e00\u4e1d\u8ff7\u832b\uff0c\u540e\u9762\u8c8c\u4f3c\u4e0d\u592a\u597d\u5904\u7406\uff0c\u7136\u540e\u770b\u4e86\u770b\u8ba8\u8bba\uff0c\u53d1\u73b0\u90fd\u662f\u4ec0\u4e48dfs\uff0c\u4e24\u904dSPFA\u3002\u7136\u540e\u53d1\u73b0\u8c8c\u4f3c\u6ca1\u6709tarjan\u7f29\u70b9\u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u4e4e\u6211\u5f00\u59cb\u60f3\u8fd9\u9053\u9898\u600e\u4e48\u7528SPFA\u505a\uff0c\u53ef\u662f\u5462\uff0c\u6211\u5c31\u662f\u653e\u4e0d\u4e0b\u539f\u6765\u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u60f3\u4e86\u60f3\uff0c\u53d1\u73b0\u9700\u8981topo\\_sort\u4e00\u4e0b\uff0c\u7136\u540eDP\u5373\u53ef\uff0c\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002**\u53ef\u89c1\u4e00\u5b9a\u8981\u76f8\u4fe1\u81ea\u5df1\uff01**\n\n\n**\u5206\u6790\uff1a**\n\n\u8fd9\u9053\u9898\u56e0\u4e3a\u6709\u7684\u70b9\u5b83\u80fd\uff08\u88ab\uff09\u7ecf\u8fc7\u597d\u51e0\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\uff1a**\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe**\uff0c\u6362\u8a00\u4e4b\uff0c\u5c31\u662f\u80fd\u6765\u56de\u8d70\u65e0\u6570\u6b21\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528tarjan\u7f29\u70b9\uff0c\u7136\u540e\u91cd\u65b0\u5efa\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u56fe\u4e2d\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e0b\u5b83\u7684$max_w$\u548c$min_w$\u548c$(max_w - min_w)$\uff0c\u7136\u540e\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\uff0c\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7f29\u70b9\u540e\u7684\u8fd9\u4e2aDAG\u4e0a\u7684\u70b9\u88ab\u7ecf\u8fc7\u7684\u987a\u5e8f\uff0c\u663e\u7136\u6211\u4eec\u5f97\u5148\u4e70\u518d\u5356\uff0c\u8fd9\u6837\u4e5f\u4e3a\u540e\u9762\u7684DP\u6253\u4e0b\u4e86\u57fa\u7840\u3002\n\n\u8fd9\u9053\u9898\u7684DP\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c$f[i]$\u8868\u793a\u5230\u4e86i\u70b9\uff08\u65b0\u56fe\uff09\u7684\u53ef\u4ee5\u8d5a\u5230\u7684\u6700\u591a\u94b1\u6570\uff0c\u7136\u540e\u6211\u4eec\u5728\u7ef4\u62a4\u4e00\u4e2a\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u4e2dw\u503c\u6700\u5c0f\u7684\uff0c\u5c31\u53ef\u4ee5\u7528$minco[i]$\u6765\u8868\u793a\u3002\u90a3\u4e48$minco[i]=min(minco[i],minco[i\u7684father],min_w[i])$\uff0c$f[i]=max(f[i],f[i\u7684father],(max_w[i]-min_w[i]),max_w[i]-minco[i])$\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u7ed3\u675f\u4e86\uff0c\u662f\u4e0d\u662f\u7279\u522b\u5f31\u667a\u3002\u3002\u3002\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include <bits/stdc++.h>\n\n#define REP(i, n) for(int i = 1; i <= n; i ++)\n#define REPG(i, x) for(int i = head[x]; i; i = g[i].nxt)\n\n#define mem(x, y) memset(x, y, sizeof(x));\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef double DB;\n\nLL Max(LL a, LL b){return a > b ? a : b;}\nLL Min(LL a, LL b){return a < b ? a : b;}\n\nconst int MAXN = 1e5 + 15;\nconst int MAXM = 1e6 + 15;\n\nstruct Edge{int to, nxt;}g[MAXM], e[MAXN];\nint head[MAXN], cnt = 0, w[MAXN], dfn[MAXN], low[MAXN], sta[MAXN], tot = 0, tmp = 0, st, en, hh[MAXN], orzcfz = 0;\nint head_sd[MAXN], cnt_sd = 0, w_sd_max[MAXN], w_sd_min[MAXN], belong[MAXN], n, m, ans = 0, in[MAXN];\nint maxco[MAXN], minco[MAXN], f[MAXN], mm[MAXN], cnt_cfz = 0;\nbool instack[MAXN];\nqueue <int> q;\nvoid add(int u, int v){g[++ cnt] = (Edge){v, head[u]}; head[u] = cnt;}\nvoid add_sd(int u, int v){e[++ cnt_sd] = (Edge){v, head_sd[u]}; head_sd[u] = cnt_sd;}\nvoid add_edge(int u, int v){add(u, v); add(v, u);}\n\ninline int read(){\n    int r = 0, z = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){if(ch == '-') z = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9'){r = r * 10 + ch - '0'; ch = getchar();}\n    return r * z;\n}\n\nvoid fre(){\n    freopen(\".in\", \"r\", stdin);\n    freopen(\".out\", \"w\", stdout);\n}\n\nvoid tarjan(int u){\n    dfn[u] = low[u] = ++ tmp; sta[++ tot] = u; instack[u] = 1;\n    for(int i = head[u]; i; i = g[i].nxt){\n        int v = g[i].to;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if(instack[v]) low[u] = min(low[u], dfn[v]);\n    }\n    if(dfn[u] == low[u]){\n        ans ++;\n        while(sta[tot] != u){\n            int gg = sta[tot]; tot --;\n            instack[gg] = 0; belong[gg] = ans;\n        }\n        tot --; instack[u] = 0; belong[u] = ans;\n    }\n}\n\nvoid DP(){\n    memset(minco, 0x3f, sizeof(minco));\n    minco[hh[1]] = w_sd_min[hh[1]];\n    for(int i = 1; i <= n; i ++){\n        int x = hh[i];\n        for(int j = head_sd[x]; j; j = e[j].nxt){\n            int y = e[j].to;\n            minco[y] = min(minco[y], min(minco[x], w_sd_min[x]));\n            f[y] = max(f[y], max(f[x], max(mm[y], w_sd_max[y] - minco[y])));\n        }\n    }\n    printf(\"%d\\n\", f[en]);\n}\n\nvoid topo(){\n    for(int i = 1; i <= ans; i ++) if(!in[i]){q.push(i); hh[++ cnt_cfz] = i;}\n    while(!q.empty()){\n        int u = q.front(); q.pop(); hh[++ orzcfz] = u;\n        for(int i = head_sd[u]; i; i = e[i].nxt){\n            int v = e[i].to;\n            in[v] --;\n            if(!in[v]) q.push(v);\n        }\n    }\n    DP();\n}\n\nvoid suodian(){\n    for(int i = 1; i <= n; i ++) if(!belong[i]) belong[i] = ++ ans;\n    for(int i = 1; i <= n; i ++){\n        int u1 = belong[i];\n        for(int j = head[i]; j; j = g[j].nxt){\n            int v1 = belong[g[j].to];\n            if(u1 != v1){add_sd(u1, v1); in[v1] ++;}\n        }\n    }\n    for(int i = 1; i <= n; i ++){\n        w_sd_max[belong[i]] = max(w_sd_max[belong[i]], w[i]);\n        w_sd_min[belong[i]] = min(w_sd_min[belong[i]], w[i]);\n    }\n    for(int i = 1; i <= ans; i ++) mm[i] = w_sd_max[i] - w_sd_min[i];\n    st = belong[1], en = belong[n];\n    topo();\n}\n\nvoid solve(){\n    for(int i = 1; i <= n; i ++){\n        if(!dfn[i]) tarjan(i);\n    }\n    suodian();\n}\n\nvoid init(){\n    n = read(), m = read();\n    memset(w_sd_min, 0x3f, sizeof(w_sd_min));\n    for(int i = 1; i <= n; i ++) w[i] = read();\n    for(int i = 1; i <= m; i ++){\n        int u = read(), v = read(), z = read();\n        if(z == 1) add(u, v);\n        else add_edge(u, v);\n    }\n    solve();\n}\n\nint main(){\n    //fre();\n    init();\n    return 0;\n}\n\n```",
        "postTime": 1509352385,
        "uid": 25436,
        "name": "stevenzheng2002",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "emmmmmmmm\u770b\u5230\u4e0b\u9762dalao\u4eec\u7684tarjan\u8fd8\u6709\u5e76\u67e5\u96c6\u89e3\u6cd5\u4e86\uff0c\u7136\u800c\u8822\u7b28\u7684\u6211\u53ea\u4f1a\u4e24\u904dspfa\n\n\u5982\u679c\u7528\u4e24\u904dspfa\u7684\u8bdd\u601d\u8def\u5e94\u8be5\u662f\u5f88\u6e05\u6670\u7684\uff1a\u7b2c\u4e00\u904dspfa\u7528\u6765\u5904\u7406\u4ece\u8d77\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u4f4e\u4e70\u5165\u4ef7\uff0c\u7b2c\u4e8c\u904dspfa\u7528\u6765\u5904\u7406\u4ece\u7ec8\u70b9\u5230\u5176\u4f59\u5404\u70b9\u7684\u6700\u5927\u5356\u51fa\u4ef7\u3002\n\n\u8fd9\u6837\u5c31\u9700\u8981\u5728\u5b58\u56fe\u65f6\u5b58\u4e24\u5f20\u56fe\uff0c\u4e00\u5f20\u6b63\u56fe\u7528\u6765\u5904\u7406\u4e70\u5165\u4ef7\uff0c\u4e00\u5f20\u53cd\u56fe\u7528\u6765\u5904\u7406\u5356\u51fa\u4ef7\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053spfa\u662f\u5904\u7406\u6700\u77ed\u8def\u95ee\u9898\u7684\uff0c\u6240\u4ee5\u8981\u5728\u5efa\u56fe\u65f6\u5c06\u70b9\u6743\u5316\u4e3a\u8fb9\u6743\uff0c\u5373\u5c06\u5f53\u524d\u8fd9\u6761\u8def\u7684\u8fb9\u6743\u8d4b\u6210\u201c\u5f53\u524d\u8def\u7684\u7ec8\u70b9\u7684\u4ea4\u6613\u4ef7\u503c\u201d\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u4e0d\u80fd\u5c06\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u4e70\u5165\u503c\u8bbe\u6210\u81ea\u5df1\uff0c\u56e0\u4e3a\u8fd9\u6837\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u67d0\u4e2a\u70b9\u4e70\u5165\u4ef7\u6781\u4f4e\u4f46\u8fdb\u5165\u8fd9\u4e2a\u70b9\u540e\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\uff0c\u5373\u8fdb\u5165\u6b7b\u8def\u3002\u5c06\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u503c\u90fd\u521d\u59cb\u5316\u6210\u4e00\u4e2a\u6781\u5927\u503c\u5373\u53ef\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\nmaxn\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u201c\u4ece\u7ec8\u70b9\u5230\u67d0\u70b9\u95f4\u7684\u6700\u5927\u5356\u51fa\u4ef7\u201d\uff0c\u800cminn\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u201c\u4ece\u8d77\u70b9\u5230\u67d0\u70b9\u95f4\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u201d\u3002\u4e24\u904dspfa\u8dd1\u5b8c\u4e4b\u540e\u679a\u4e3e\u6bcf\u4e00\u5bf9maxn\u4e0eminn\u627e\u5230\u6700\u5927\u7684\u5dee\u503c\u5373\u53ef\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u5168\u90e8\u5206\u5757\u4e0d\u559c\u8bf7\u55b7\u5c31\u597d\n\n\n        \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#include<queue>\nusing namespace std;\nstruct edge\n{\n    int to,v;\n};//\u5b58\u8fb9 \nvector <edge> a[1000010],b[1000010];\nedge mmp;\nqueue <int> d;\nint vis[1000010],minn[1000010]/*\u7528\u6765\u5b58\u50a8\u201c\u4ece\u8d77\u70b9\u5230\u67d0\u70b9\u95f4\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u201d*/,maxn[1000010]/*\u7528\u6765\u5b58\u50a8\u201c\u4ece\u7ec8\u70b9\u5230\u67d0\u70b9\u95f4\u7684\u6700\u5927\u5356\u51fa\u4ef7\u201d*/,val[1000010];\nint n,m,x,y,z,ans;\nvoid getedge()//\u8f93\u5165 \n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&val[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        mmp.to=y;\n        mmp.v=val[y];\n        a[x].push_back(mmp);//\u5efa\u7acb\u6b63\u56fe\uff0c\u7528\u6765\u8ba1\u7b97\u4ece1\u5230\u67d0\u70b9\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u503c \n        mmp.to=x;\n        mmp.v=val[x];\n        b[y].push_back(mmp);//\u5efa\u7acb\u53cd\u56fe\uff0c\u7528\u6765\u8ba1\u7b97\u4ecen\u5230\u67d0\u70b9\u7684\u6700\u5927\u5356\u51fa\u4ef7\u503c \n        if(z==2)//\u5982\u679c\u662f\u53cc\u5411\u8fb9\u5c31\u53cd\u7740\u5b58\u4e00\u6b21 \n        {\n            a[y].push_back(mmp);\n            mmp.to=y;\n            mmp.v=val[y];\n            b[x].push_back(mmp);\n        } \n    }\n}\nvoid init()//\u521d\u59cb\u5316 \n{            //\u4e0d\u80fd\u5c06\u6bcf\u4e2a\u70b9\u7684\u503c\u90fd\u9884\u5904\u7406\u6210\u81ea\u5df1\uff0c\u9632\u6b62\u6709\u4e00\u4e9b\u70b9\u8fdb\u53bb\u51fa\u4e0d\u6765\u8fd8\u88ab\u8ba1\u7b97\uff08\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\u4e14\u4e70\u5165\u503c\u6700\u5c0f\u6216\u5356\u51fa\u503c\u6700\u5927 \n    for(int i=1;i<=n;i++)\n    {\n        minn[i]=0x7fffffff;\n        maxn[i]=0;\n    }\n    minn[1]=val[1];\n    maxn[n]=val[n]; \n}\nvoid sipafa1()//\u8ba1\u7b97\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u4e70\u5165\u503c \n{\n    memset(vis,0,sizeof(vis));\n    d.push(1);\n    vis[1]=1;\n    while(!d.empty())\n    {\n        int nowp=d.front();\n        d.pop();\n        vis[nowp]=0;\n        for(int i=0;i<a[nowp].size();i++)\n        {\n            if(minn[a[nowp][i].to]>min(minn[nowp],a[nowp][i].v))//\u5982\u679c\u6709\u66f4\u4fbf\u5b9c\u7684\uff0c\u66f4\u65b0 //\u9519\u8bef\u70b9  \u539f\u7801\uff1aif(minn[a[nowp][i].to]>minn[nowp]+a[nowp][i].v||minn[a[nowp][i].to]==-1) \n            {\n                minn[a[nowp][i].to]=min(minn[nowp],a[nowp][i].v);//\u63a5\u4e0a\u9519\u8bef\u70b9  \u539f\u7801\uff1a minn[a[nowp][i].to]=minn[nowp]+a[nowp][i].v; \n                if(vis[a[nowp][i].to]!=1)//\u9519\u8bef\u70b9  \u539f\u7801\uff1a if(vis[a[nowp][i].to!=1])\n                {\n                    d.push(a[nowp][i].to);\n                    vis[a[nowp][i].to]=1;\n                }\n            }\n        }\n    }\n}\nvoid sipafa2()//\u8ba1\u7b97\u7ec8\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u5356\u51fa\u503c \n{\n    memset(vis,0,sizeof(vis));\n    d.push(n);\n    vis[n]=1;\n    while(!d.empty())\n    {\n        int nowp=d.front();\n        d.pop();\n        vis[nowp]=0;\n        for(int i=0;i<b[nowp].size();i++)\n        {\n            if(maxn[b[nowp][i].to]<max(maxn[nowp],b[nowp][i].v))//\u5982\u679c\u80fd\u5356\u7684\u66f4\u8d35\uff0c\u66f4\u65b0 //\u9519\u8bef\u70b9   \u539f\u7801\uff1aif(maxn[b[nowp][i].to]<maxn[nowp]+b[nowp][i].v||maxn[b[nowp][i].to]==-1) \n            {\n                maxn[b[nowp][i].to]=max(maxn[nowp],b[nowp][i].v);//\u63a5\u4e0a\u9519\u8bef\u70b9  \u539f\u7801\uff1amaxn[b[nowp][i].to]=maxn[nowp]+b[nowp][i].v; \n                if(vis[b[nowp][i].to]!=1)//\u9519\u8bef\u70b9  \u539f\u7801\uff1a if(vis[a[nowp][i].to!=1])\n                {\n                    d.push(b[nowp][i].to);\n                    vis[b[nowp][i].to]=1;\n                }\n            }\n        }\n    }\n}\nvoid solve()//\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u627e\u6700\u5927\u5dee\u503c \n{\n    for(int i=1;i<=n;i++)\n    {\n        ans=max(ans,maxn[i]-minn[i]);\n    }\n    printf(\"%d\",ans);\n    if(ans<0)  ans=0;\n}\nint main()\n{\n    getedge();\n    init();\n    sipafa1();\n    sipafa2();\n    solve();\n}\n```",
        "postTime": 1508403610,
        "uid": 27166,
        "name": "hxn2228",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "80\u5206\u89e3\u6cd5\n\nbfs+Hash\u5224\u91cd\n\n\u8bbe\u72b6\u6001\u4e3a\u5f53\u524d\u70b9set\uff0c\u4e70\u5165\u70b9x\uff0c\u5356\u51fa\u70b9y\n\n\u5229\u7528Hash\u8fdb\u884c\u5224\u91cd\uff0cHash \u7684\u65f6\u5019\u5c3d\u91cf\u4f7f\u7528\u8d28\u6570\uff0c\u800c\u4e14\u4e0d\u5b9c\u592a\u5927\uff0c\u6211\u8bd5\u8fc7\u752817,57,107\u76f4\u63a5TLE\u4e86\uff0c\u4e5f\u4e0d\u5b9c\u592a\u5c0f\uff0c\u50cf11,13,17\u53ef\u80fd\u5c31\u4f1aWA\u7684\u66f4\u591a\uff0c\u6240\u4ee5\u6700\u540e\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u768413,31,47\uff08\u5177\u4f53\u89c1\u4e00\u4e0b\u4ee3\u7801\uff09\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u526a\u679d\uff1a\u5982\u679c\u6700\u5927\u7684\u4ef7\u683c-\u5f53\u524d\u7b54\u6848\uff08\u5373\u4e70\u5165\u7684\u4ef7\u683c\uff09\u5927\u4e8e\u8be5\u57ce\u5e02\u7684\u4ef7\u683c\uff0c\u624d\u52a0\u5165\u8be5\u57ce\u5e02\u53bb\u66f4\u65b0\u7b54\u6848\n\n\u95ee\u9898\uff1a\n\n\u5bf9\u4e8e\u67d0\u4e9b\u60c5\u51b5\u65e0\u6cd5\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\u4e0d\u540c\u7684\u72b6\u6001\u4f1a\u6709\u76f8\u540c\u7684hash\u503c\uff0c\u6240\u4ee5\u5c31\u53ef\u80fd\u4f1a\u4e0d\u524d\u5f80\u8be5\u5730\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<queue>\nusing namespace std;\nconst int MAXN=100010;\nconst int M=10000007;\nstruct node\n{\n    int next;\n    int to;\n}t[MAXN*10];\nstruct task\n{\n    int set;\n    int x,y;\n};\nbool vis[10000007];\nint head[MAXN],num;\nint v[MAXN];\nint n,m,maxn;\nint ans;\nvoid add(int u,int v)\n{\n    t[++num]=(node){ head[u],v };\n    head[u]=num;\n}\nint Hash(task tmp)\n{\n    return (tmp.set*13%M+tmp.x*31%M+tmp.y*47%M)%M;\n}\nvoid bfs()\n{\n    queue<task> q;\n    task tmp,temp;\n    q.push( (task){ 1,0,0 } ),q.push( (task){ 1,1,0 } );\n    while( !q.empty() )\n    {\n        tmp=q.front(),q.pop();\n        if( maxn-v[tmp.x]<=ans || vis[Hash( tmp )] )    continue ;\n        vis[Hash( tmp )]=1;\n        if( tmp.set==n && tmp.x && tmp.y )\n        {\n            ans=max( ans,v[tmp.y]-v[tmp.x] );\n            continue ;\n        }\n        for(int i=head[tmp.set],x; i ;i=t[i].next)\n        {\n            x=t[i].to;\n            temp=tmp,temp.set=x;\n            q.push( temp );\n            if( !tmp.x && maxn-ans>v[x] )   temp.x=x,q.push( temp );\n            else\n                if( tmp.x && !tmp.y && v[x]-v[tmp.x]>ans )\n                    temp.y=x,q.push( temp );\n        }\n    }\n}\nint main()\n{\n    freopen(\"trade.in\",\"r\",stdin);\n    freopen(\"trade.out\",\"w\",stdout);\n    int x,y,d;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)   scanf(\"%d\",&v[i]),maxn=max( maxn,v[i] );\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&d);\n        add( x,y );\n        if( d==2 )   add( y,x );\n    }\n    bfs();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u6b63\u89e3\uff1a spfa+dfs\n\u52a0\u8fb9\u65f6\u8981\u52a0\u53cd\u8fb9\n\n\u7528\u6570\u7ec4minn\u3010i\u3011\u8bb0\u5f55\u4ece1\u5230i\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u4ef7\u683c\n\n\u53ef\u4ee5\u4f7f\u7528spfa\u6c42\u51fa\n\n\u4e24\u904dSPFA\uff0c\u7a0d\u5fae\u4e00\u4e9b\u5c0f\u5c0f\u7684\u6539\u52a8\n\n\u4e00\u904d\u6b63\u5411\u5b58\u8fb9\uff0c\u8d70\u4e00\u904d\u627e\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u4ece1\u51fa\u53d1\u53ef\u5230\u7684\u70b9\uff0c\u4fdd\u5b58\u5176\u8def\u7ebf\u4e0a\u7684\u6700\u5c0f\u503c\n\n\u53e6\u4e00\u904d\u53cd\u5411\u5b58\u8fb9\uff0c\u627e\u51fa\u5bf9\u4e8e\u4ecen\u51fa\u53d1\u53ef\u5230\u7684\u6240\u6709\u70b9\uff0c\u4fdd\u5b58\u5176\u7ebf\u8def\u4e0a\u7684\u6700\u5927\u503c\uff08\u5176\u5b9e\u4e5f\u5c31\u662f\u53ef\u4ee5\u5230\u8fben\u7684\u6240\u6709\u70b9\uff0c\u5b58\u50a8\u5b83\u4eec\u6700\u591a\u80fd\u5356\u591a\u5c11\u94b1\uff09\n\n\u7b2c\u4e8c\u4e2aSPFA\u4e2d\u8981\u8fdb\u884c\u70b9\u7684\u6807\u8bb0\uff0c\u4fbf\u4e8e\u5728\u540e\u9762\u77e5\u9053\u54ea\u4e9b\u70b9\u53ef\u5230n\n\n\u6700\u540e\u904d\u5386\u4ece1\u5230n\u7684\u6240\u6709\u70b9\uff0c\u627e\u51fa\u53ef\u5230\u8fben\u7684\u6700\u5927\u7684dmax-dmin\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<queue>\nusing namespace std;\nconst int MAXN=100010;\nconst int M=10000007;\nstruct node\n{\n    int next;\n    int to;\n}t[MAXN*10],e[MAXN*10];\nbool vis[MAXN];\nint head_e[MAXN],num_e;\nint head[MAXN],num;\nint minn[MAXN],v[MAXN];\nint n,m;\nint ans;\nvoid add(int u,int v)\n{\n    t[++num]=(node){ head[u],v };\n    head[u]=num;\n}\nvoid add_e(int u,int v)\n{\n    e[++num_e]=(node){ head_e[u],v };\n    head_e[u]=num_e;\n}\nvoid spfa()\n{\n    queue<int> q;\n    int tmp;\n    memset( minn,0x3f3f3f3f,sizeof minn );\n    minn[1]=v[1],q.push( 1 );\n    while( !q.empty() )\n    {\n        tmp=q.front(),q.pop();\n        vis[tmp]=0;\n        for(int i=head[tmp],x; i ;i=t[i].next)\n        {\n            x=t[i].to;\n            if( minn[x]>min( minn[tmp],v[x] ) )\n            {\n                minn[x]=min( minn[tmp],v[x] );\n                if( !vis[x] )   vis[x]=1,q.push( x );\n            }\n        }\n    }\n}\nvoid work(int k)\n{\n    ans=max( ans,v[k]-minn[k] ),vis[k]=1;\n    for(int i=head_e[k],x; i ;i=e[i].next)\n    {\n        x=e[i].to;\n        if( !vis[x] )   work( x );\n    }\n}\nint main()\n{\n    freopen(\"trade.in\",\"r\",stdin);\n    freopen(\"trade.out\",\"w\",stdout);\n    int x,y,d;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)   scanf(\"%d\",&v[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&d);\n        add( x,y ),add_e( y,x );\n        if( d==2 )   add( y,x ),add_e( x,y );\n    }\n    spfa();\n    memset( vis,0x0,sizeof vis );\n    work( n );\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1507365500,
        "uid": 25098,
        "name": "QJLYH",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4e24\u904dSPFA\uff0c\u7a0d\u5fae\u4e00\u4e9b\u5c0f\u5c0f\u7684\u6539\u52a8\n\n\u4e00\u904d\u6b63\u5411\u5b58\u8fb9\uff0c\u8d70\u4e00\u904d\u627e\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u4ece1\u51fa\u53d1\u53ef\u5230\u7684\u70b9\uff0c\u4fdd\u5b58\u5176\u8def\u7ebf\u4e0a\u7684\u6700\u5c0f\u503c\n\n\u53e6\u4e00\u904d\u53cd\u5411\u5b58\u8fb9\uff0c\u627e\u51fa\u5bf9\u4e8e\u4ecen\u51fa\u53d1\u53ef\u5230\u7684\u6240\u6709\u70b9\uff0c\u4fdd\u5b58\u5176\u7ebf\u8def\u4e0a\u7684\u6700\u5927\u503c\uff08\u5176\u5b9e\u4e5f\u5c31\u662f\u53ef\u4ee5\u5230\u8fben\u7684\u6240\u6709\u70b9\uff0c\u5b58\u50a8\u5b83\u4eec\u6700\u591a\u80fd\u5356\u591a\u5c11\u94b1\uff09\n\n\u7b2c\u4e8c\u4e2aSPFA\u4e2d\u8981\u8fdb\u884c\u70b9\u7684\u6807\u8bb0\uff0c\u4fbf\u4e8e\u5728\u540e\u9762\u77e5\u9053\u54ea\u4e9b\u70b9\u53ef\u5230n\n\n\u6700\u540e\u904d\u5386\u4ece1\u5230n\u7684\u6240\u6709\u70b9\uff0c\u627e\u51fa\u53ef\u5230\u8fben\u7684\u6700\u5927\u7684dmax-dmin\n\nPS:\u524d\u9762\u6709\u5927\u725b\u8bf4\u4e0d\u53ef\u628a\u6bcf\u4e2a\u70b9\u9644\u4e0a\u81ea\u5df1\u7684\u503c\uff0c\u4f1a\u70b8\uff0c\u6ca1\u592a\u61c2\u4ec0\u4e48\u610f\u601d\uff0c\u53ef\u80fd\u662f\u65b9\u6cd5\u4e0d\u592a\u4e00\u6837\uff0c\u53cd\u6b63\u672c\u6e23\u6e23\u76f4\u63a5\u9644\u4e86\u3002\u3002\u3002\n\nPPS:\u9644\u4e00\u904d\u8fc7\u7684\u6ee1\u5206\u7a0b\u5e8f\uff0c\u54c8\u54c8\u54c8\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#define fr(k) edge[k].from\n#define to(k) edge[k].to\n#define nx(k) edge[k].next\n#define fr1(k) edge1[k].from\n#define to1(k) edge1[k].to\n#define nx1(k) edge1[k].next\nconst int maxn=500010;\nint hd[maxn],hd1[maxn],vl[maxn],q,n,x,y,z,k,ans,c[maxn],dmin[maxn],dmax[maxn];\nbool m[maxn],mark[maxn];\nstruct edge\n{\n    int from,to,next;\n}edge[maxn<<1];\nstruct edge1\n{\n    int from,to,next;\n}edge1[maxn<<1];\nint min(int p,int q)\n{\n    if (p>q) return q;\n      else return p;\n}\nint max(int p,int q)\n{\n    if (p>q) return p;\n      else return q;\n}\nvoid add(int x,int y,int k)\n{\n    fr(k)=x;\n    to(k)=y;\n    nx(k)=hd[x];\n    hd[x]=k;\n}\nvoid add1(int x,int y,int k)\n{\n    fr1(k)=x;\n    to1(k)=y;\n    nx1(k)=hd1[x];\n    hd1[x]=k;\n}\nvoid spfa(int s)\n{\n    memset(m,false,sizeof(m));\n    int l,r;\n    l=1;\n    r=1;\n    c[l]=s;\n    m[s]=true;\n    for (int i=1;i<=n;i++)\n        dmin[i]=vl[i];\n    while (l<=r)\n    {\n        for (int i=hd[c[l]];i!=0;i=nx(i))\n        {\n            if (dmin[to(i)]>dmin[c[l]]) dmin[to(i)]=dmin[c[l]];\n            if (m[to(i)]==false)\n            {\n                r++;\n                c[r]=to(i);\n                m[to(i)]=true;\n            }\n        }\n        l++;\n    }\n    for (int i=1;i<=n;i++) dmin[i]=min(vl[i],dmin[i]);\n}\nvoid spfa1(int s)\n{\n    memset(m,false,sizeof(m));\n    int l,r;\n    l=1;\n    r=1;\n    c[l]=s;\n    m[s]=true;\n    mark[s]=true;\n    for (int i=1;i<=n;i++)\n        dmax[i]=vl[i];\n    while (l<=r)\n    {\n        for (int i=hd1[c[l]];i!=0;i=nx1(i))\n        {\n            mark[to(i)]=true;\n            if (dmax[to1(i)]<dmax[c[l]]) dmax[to1(i)]=dmax[c[l]];\n            if (m[to1(i)]==false)\n            {\n                r++;\n                c[r]=to1(i);\n                m[to1(i)]=true;\n            }\n        }\n        l++;\n    }\n    for (int i=1;i<=n;i++) dmax[i]=max(vl[i],dmax[i]);\n}\nint main()\n{\n    freopen(\"sum.in\",\"r\",stdin);\n    freopen(\"sum.out\",\"w\",stdout);\n    memset(mark,false,sizeof(mark));\n    scanf(\"%d%d\",&n,&q);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&vl[i]);\n    k=0;\n    for (int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if (z==1)\n        {\n            k++;\n            add(x,y,k);\n            add1(y,x,k);\n        }\n        else\n        {\n            k++;\n            add(x,y,k);\n            add1(x,y,k);\n            k++;\n            add(y,x,k);\n            add1(y,x,k);\n        }\n    }\n    spfa(1);\n    spfa1(n);\n    ans=0;\n    for (int i=1;i<=n;i++)\n        if (mark[i]==true && ans<dmax[i]-dmin[i]) ans=dmax[i]-dmin[i];\n    printf(\"%d\",ans);\n    fclose(stdin);\n    fclose(stdout);\n    return 0;\n}",
        "postTime": 1506613957,
        "uid": 8352,
        "name": "\u5982\u6211\u897f\u6c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4e24\u904d\u7c7bspfa\uff0c\u8ba4\u771f\u6765\u8bb2\u5e94\u8be5\u4e0d\u7b97\uff0c\u7b2c\u4e00\u904d\u6b63\u7740\u5efa\u56fe\u7136\u540e\u5f97\u51faminn[]\uff0cminn[i]\u8868\u793a\u5230i\u70b9\u6700\u5c0f\u7684\u4ef7\u683c\uff0c\u7b2c\u4e8c\u904d\u9006\u7740\u5efa\u56fe\u5f97\u51famaxx[]\uff0cmaxx[i]\u8868\u793a\u4ecei\u53ef\u4ee5\u8d70\u5230n\u8def\u9014\u4e2d\u6700\u5927\u7684\u4ef7\u683c\uff0cmax(minn[i]-maxx[i])\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n\u00b7\u00b7\u00b7cpp\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint q[100005],minn[100002],maxx[100002],num,a[100002],m,n,x,y,z;\nint to[500002],pre[500005],to1[500005],pre1[500005],las[100005],las1[100005];\nbool vis[100005];\nvoid add(int a,int b)\n{\n    to[++num]=b;\n    pre[num]=las[a];\n    las[a]=num;\n    to1[num]=a;\n    pre1[num]=las1[b];\n    las1[b]=num;\n}\nvoid spfa()//\u6b63\u7740\n{\n    q[1]=1;\n    int qh=0,qt=1,hh=0,tt=0;\n    vis[1]=true;\n    while((hh*100001+qh)<(tt*100001+qt))//\u8fd9\u91cc\u5927\u6982\u662f\u4e2a\u5047\u7684\u5faa\u73af\u961f\u5217\uff0c\u8282\u7ea6\u7a7a\u95f4\n    {\n        qh++;\n        if(qh>100001)qh=1,hh++;\n        int v=q[qh];\n        int p=las[v];\n        vis[v]=false;\n        while(p)\n        {\n            if(minn[v]<minn[to[p]]||minn[to[p]]>a[to[p]])\n            {\n                minn[to[p]]=min(minn[v],a[to[p]]);\n                if(!vis[to[p]]){\n                    if(qt+1>100001)qt=0,tt++;\n                    q[++qt]=to[p];\n                    vis[to[p]]=true;\n                }\n            }\n            p=pre[p];\n        }\n    }\n}\nvoid spfa1()//\u9006\u7740\n{\n    memset(q,0,sizeof(q));\n    memset(vis,false,sizeof(vis));\n    int qh=0,qt=1,hh=0,tt=0;\n    vis[n]=true;q[1]=n;\n    while((hh*100001+qh)<(tt*100001+qt))\n    {\n        qh++;\n        if(qh>100001)qh=1,hh++;\n        int v=q[qh];\n        int p=las1[v];\n        vis[v]=false;\n        while(p)\n        {\n            if(maxx[v]>maxx[to1[p]]||maxx[to1[p]]<a[to1[p]])\n            {\n                maxx[to1[p]]=max(maxx[v],a[to1[p]]);\n                if(!vis[to[p]])\n                {\n                    if(qt+1>100001)qt=0,tt++;\n                    q[++qt]=to1[p];\n                    vis[to1[p]]=true;\n                }\n            }\n            p=pre1[p];\n        }\n    }\n}\nint main()\n{\n    memset(minn,63,sizeof(minn));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y);\n        if(z==2)add(y,x);\n    }\n    spfa();spfa1();\n    int ans=0;\n    minn[1]=a[1];maxx[n]=a[n];\n    for(int i=1;i<=n;i++)\n    {\n        ans=max(ans,maxx[i]-minn[i]);\n    }\n    cout<<ans;\n} \n```\n\u00b7\u00b7\u00b7",
        "postTime": 1506347928,
        "uid": 8167,
        "name": "AtlasDelRey",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u6211\u4e5f\u6765\u5360\u4e2a\u4f4d\u7f6e\n\n\n\u7531\u6837\u4f8b\u53ef\u77e5\u4ed6\u5c31\u7b97\u53bbn\u70b9\u4e00\u8d9f\u518d\u56de\u53bb\u5356\u518d\u56de\u5230n\u70b9\u4e5f\u6ca1\u4e8b\uff0c\u6240\u4ee5\u7b2c\u4e00\u904d\u5230\u7ec8\u70b9\u7684\u8def\u4e0a\u6709\u4fbf\u5b9c\u7684\u5c31\u4e70\uff0c\u53bb\u80fd\u5230\u7ec8\u70b9\u7684\u70b9\u5356\uff08\u6709\u53ef\u80fd\u8d70\u8fdb\u6b7b\u80e1\u540c\uff0c\u770b\u7740\u5356\u7684\u8d35\u5374\u56de\u4e0d\u5230n\u4e86\u3010\u8d2a\u5a6a\u8138\u3011\uff09\u6240\u4ee5\u9700\u8981\u7b97\u4e00\u4e0b\u8c01\u80fd\u5230\u7ec8\u70b9\uff0c\u6211\u770b\u697c\u4e0b\u7684\u697c\u4e0b\u5199\u7684dfs\uff0c\u6211\u5c31\u5199\u4e86\u4e2abfs\u73a9\u73a9\u3002\n\n\n\u7136\u800c\u8001\u5e08\u6559\u8fd9\u4e2a\u9898\u7528\u4e24\u904dspfa \uff0c\u6211\u89c9\u5f97\u592a\u6d6a\u8d39\u4e86\uff0cdfs\u3001bfs\u5c31\u53ef\u4ee5\u4ee3\u66ff\u4e00\u904d\u3010\u4ee3\u66ff\u4e24\u904d\u4e5f\u5b8c\u5168\u53ef\u4ee5bfs\u627e\u6700\u77ed\u8def\uff0c\u4f46\u597d\u50cf\u8fd8\u662fspfa\u6548\u7387\u9ad8\u4e00\u4e9b\n\n###\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N=1e5+5,M=5*1e5+5,INF=2147483647;\nint n,m,t1,t2,t3,ans;\nint w[N];\nint fmin(int x,int y){\n    if(x>y) return y;\n    else return x;\n}\nbool vis[N],in[N];\nint minn[N];\nvector<int> e[M];\nvector<int> g[M];\nvoid bfs(int x){\n    queue<int> q;\n    q.push(x);\n    vis[x]=1;\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        for(int i=0;i<g[now].size();i++){\n            if(!vis[g[now][i]]){\n                q.push(g[now][i]);\n                vis[g[now][i]]=1;\n            }\n        }\n    }\n}\nvoid spfa(){\n    fill(minn,minn+N,INF);\n    queue<int> q;\n    q.push(1);\n    minn[1]=w[1];\n    in[1]=1;\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        in[now]=0;\n        for(int i=0;i<e[now].size();i++){\n            int to=e[now][i];\n            if(minn[to]>fmin(w[to],minn[now])){\n                minn[to]=fmin( w[to] , minn[now] );\n                if(!in[to]){\n                    q.push(to);\n                    in[to]=1;\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>w[i];\n    for(int i=1;i<=m;i++){\n        cin>>t1>>t2>>t3;\n        if(t3==1){\n            e[t1].push_back(t2);\n            g[t2].push_back(t1);\n        }\n        else if(t3==2){\n            e[t1].push_back(t2);\n            e[t2].push_back(t1);\n            g[t1].push_back(t2);\n            g[t2].push_back(t1);\n        }\n    }\n    bfs(n);\n    spfa();\n    for(int i=1;i<=n;i++){\n        if(vis[i]) ans=max(ans,w[i]-minn[i]);\n    }\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1506344825,
        "uid": 27495,
        "name": "bymlg001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5e76\u4e0d\u7528\u4e24\u904dSPFA\u3002\u5982\u679c\u4ed6\u60f3\u5728i\u70b9\u5356\u51fa\uff0c\u90a3\u4e48\u5c31\u8981\u5728\u4ece1\u70b9\u51fa\u53d1\u5230i\u70b9\u7684\u8def\u5f84\u91cc\u627e\u4e2a\u6700\u4fbf\u5b9c\u7684\u4e70\u5165\uff0c\u7528SPFA\u6c42\u51fa\u8fd9\u6837\u6700\u4fbf\u5b9c\u7684\u4e70\u5165\u4ef7\u8bb0\u4e3aminp[i]\u3002\u4ed6\u80fd\u83b7\u5f97\u7684\u5229\u6da6\u5c31\u662fprice[i]-minp[i]\u3002\n\n\u4f46\u662f\u5e76\u4e0d\u662f\u53ef\u4ee5\u5728\u6240\u6709\u7684\u70b9\u90fd\u53ef\u4ee5\u5356\u51fa\uff0c\u56e0\u4e3a\u4ed6\u6700\u7ec8\u8981\u8d70\u5230N\uff0c\u6240\u4ee5\u53ea\u6709\u5728\u548cN\u8054\u901a\u7684\u70b9\u624d\u80fd\u5356\u51fa\u3002\u7528\u4eceN\u70b9\u51fa\u53d1\u5012\u7740\u7684DFS/BFS\u8bb0\u5f55\u70b9i\u662f\u5426\u80fd\u5230\u8fbeN\u70b9\u3002\n\n\u6545\u7b54\u6848\u4e3amax{price[i]-minp[i] (i\u70b9\u4e0eN\u70b9\u8054\u901a)}\n\n\nAC\u4ee3\u7801\uff1a\n\n\n\n            \n\n    \n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#define maxn 100005\nusing namespace std;\nconst int inf=10000;\nint n,m,price[maxn];\nvector<int> g[maxn],gt[maxn];\nint minp[maxn];\nbool inque[maxn];\nqueue<int> q;\nvoid spfa()\n{\n    for(int i=1;i<=n;i++)\n        minp[i]=inf;\n    minp[1]=price[1];\n    q.push(1);\n    inque[1]=true;\n    while(!q.empty())\n    {\n        int v=q.front();\n        q.pop();\n        inque[v]=false;\n        for(int i=0;i<g[v].size();i++)\n        {\n            int w=g[v][i];\n            if(minp[w]>min(minp[v],price[w]))\n            {\n                minp[w]=min(minp[v],price[w]);\n                if(!inque[w])\n                {\n                    inque[w]=true;\n                    q.push(w);\n                }\n            }\n        }\n    }\n}\nbool avai[maxn];\nvoid dfs(int v)\n{\n    avai[v]=true;\n    for(int i=0;i<gt[v].size();i++)\n    {\n        int w=gt[v][i];\n        if(!avai[w])\n            dfs(w);\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        cin>>price[i];\n    int u,v,z;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>u>>v>>z;\n        g[u].push_back(v);\n        gt[v].push_back(u);\n        if(z==2)\n        {\n            g[v].push_back(u);\n            gt[u].push_back(v);\n        }\n    }\n    spfa();    \n    dfs(n);\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(avai[i])\n            ans=max(ans,price[i]-minp[i]);\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1504797751,
        "uid": 22890,
        "name": "huangwenlong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u770b\u770b\u697c\u4e0a\u7684\u9ad8\u7aef\u7b97\u6cd5\uff0c\u849f\u84bb\u9ed8\u9ed8\u89c9\u5f97\u7528\u7c7b\u4f3cSPFA\u7684\u961f\u5217\u6a21\u62df\u5c31\u80fd\u8fc7\u3002\n\n\u4ee4f[i]\u8868\u793a\u5230i\u70b9\u6700\u5927\u8d5a\u53d6\u65c5\u8d39\uff0cg[i]\u8868\u793a\u5230i\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u683c \uff0c\u7528\u961f\u5217\u6a21\u62df\uff0cf\u53ef\u66f4\u65b0\u5c31\u66f4\u65b0f\uff0cg\u53ef\u66f4\u65b0\u5c31\u66f4\u65b0g\uff0c\u66f4\u65b0\u5b8c\u4e4b\u540ev[i]\u5c31\u6709\u4e86\u5229\u7528\u4ef7\u503c\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u961f\u5217\u6a21\u62df\u5566\uff0c\u601d\u8def\u8fd8\u662f\u633a\u597d\u7406\u89e3\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <iostream>\n#include <cstring>\n#define N 100005\n#define M 1000005\nusing namespace std;\nint f[N],g[N],tot,nxt[M],point[M],v[M],w[N];\nbool c[N];\n//f[i]\u8868\u793a\u5230i\u70b9\u6700\u5927\u8d5a\u53d6\u65c5\u8d39\uff0cg[i]\u8868\u793a\u5230i\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\u683c \nvoid addline(int x,int y){++tot; nxt[tot]=point[x]; point[x]=tot; v[tot]=y;}\nint main()\n{\n    int n,m,i;\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)\n      scanf(\"%d\",&w[i]);\n    for (i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if (z==1) addline(x,y);\n        else addline(x,y),addline(y,x);\n    }\n    queue<int>q;\n    memset(c,0,sizeof(c)); c[1]=1;\n    memset(f,0,sizeof(f));\n    memset(g,0x7f,sizeof(g)); g[1]=w[1];\n    q.push(1);\n    while (!q.empty())\n    {\n        int now=q.front(); q.pop();\n        c[now]=false;\n        for (i=point[now];i;i=nxt[i])\n          if (f[v[i]]<max(f[now],w[v[i]]-g[now]) || g[v[i]]>min(g[now],w[v[i]]))\n          {\n              f[v[i]]=max(max(f[v[i]],f[now]),w[v[i]]-g[now]);\n              g[v[i]]=min(min(g[now],g[v[i]]),w[v[i]]);\n              if (!c[v[i]]) c[v[i]]=true,q.push(v[i]);\n          }\n    }\n    printf(\"%d\",f[n]);\n}\n```",
        "postTime": 1502709892,
        "uid": 17774,
        "name": "wwyx2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "- \u9898\u76ee\u4e0a\u8bf4\u8981\u627e\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u5dee\u503c\u6700\u5927\uff0c\u6240\u4ee5\u5e94\u8be5\u60f3\u5230\u5efa\u4e24\u4e2a\u56fe\u627e\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\n\n- \u6240\u4ee5\u5c31\u60f3\u5230\u8981\u627e\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u53ef\u5230\u8fbe\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\n\n- \u6211\u8fd9\u91cc\u7528\u7684\u662f\u4e24\u4e2aBFS\uff0c\u4e00\u4e2a\u6b63\u5411\u7684BFS\u627e\u6700\u5c0f\u503c\uff0c\u4e00\u4e2a\u53cd\u5411\u7684BFS\u627e\u6700\u5927\u503c\n\n- BFS\u4e2d\u6bcf\u4e00\u6b21\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0e\u8fd9\u4e2a\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c(\u6700\u5927\u503c)\n\n###\u9700\u8981\u6ce8\u610f\u7684\u662f\u5c31\u7b97\u4e4b\u524d\u5df2\u7ecf\u8d70\u8fc7\u8fd9\u4e2a\u8282\u70b9\u4e5f\u9700\u8981\u518d\u6bd4\u8f83\u662f\u5426\u9700\u8981\u66f4\u65b0\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6709\u53cc\u5411\u8fb9\n\n\nPS\uff1a\u849f\u84bb\u7684\u4ee3\u7801 \u5199\u7684\u5f88\u5570\u55e6\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int maxn=100000+5;\nconst int maxm=500000+5;\n\nstruct e{\n    int to;\n    int next;\n}edge1[maxm],edge2[maxm];\nint head1[maxn],edge_len1=0; //\u6b63\u5411\u56fe\nint head2[maxn],edge_len2=0; //\u53cd\u5411\u56fe\nint w[maxn];\nint n,m;\nint minx[maxn],maxx[maxn]; //\u5f53\u524d\u8282\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n\nvoid edge_add1(int u,int v) //\u6b63\u5411\u5efa\u56fe\n{\n    edge1[++edge_len1].to=v;\n    edge1[edge_len1].next=head1[u];\n    head1[u]=edge_len1;\n}\nvoid edge_add2(int u,int v) //\u53cd\u5411\u5efa\u56fe\n{\n    edge2[++edge_len2].to=v;\n    edge2[edge_len2].next=head2[u];\n    head2[u]=edge_len2;\n}\nint m_max(int a,int b,int c)\n{\n    if(a>b && a>c) return a;\n    if(b>a && b>c) return b;\n    return c;\n}\nint m_min(int a,int b,int c)\n{\n    if(a<b && a<c) return a;\n    if(b<a && b<c) return b;\n    return c;\n}\nbool visit[maxn];\nvoid bfs1() //\u6b63\u5411BFS\u627e\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\n{\n    memset(minx,0x7f7f,sizeof(minx));\n    queue<int> q;\n    q.push(1);\n    minx[1]=w[1];\n    while(!q.empty())\n    {\n        int node=q.front();q.pop();\n        for(int i=head1[node];i;i=edge1[i].next)\n        {\n            int now=edge1[i].to;\n            minx[now]=m_min(minx[node],w[now],minx[now]);\n            if(!visit[now])\n            {\n                q.push(now);\n                visit[now]=true;\n            }\n        }\n    }\n}\nvoid bfs2() //\u53cd\u5411BFS\u627e\u4e00\u6761\u8def\u5f84\u7684\u6700\u5927\u503c\n{\n    memset(visit,false,sizeof(visit));\n    queue<int> q;\n    q.push(n);\n    maxx[n]=w[n];\n    while(!q.empty())\n    {\n        int node=q.front();q.pop();\n        for(int i=head2[node];i;i=edge2[i].next)\n        {\n            int now=edge2[i].to;\n            maxx[now]=m_max(maxx[node],maxx[now],w[now]);\n            if(!visit[now])\n            {\n                q.push(now);\n                visit[now]=true;\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&w[i]);\n    int x,y,z;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if(z==1)\n        {\n            edge_add1(x,y); //\u6b63\u53cd\u5efa\u56fe\n            edge_add2(y,x);\n        }\n        if(z==2)\n        {\n            edge_add1(x,y);\n            edge_add1(y,x);\n            edge_add2(x,y);\n            edge_add2(y,x);\n        }\n    }\n    bfs1();\n    bfs2();\n    int ans=0;\n    for(int i=1;i<=n;i++) //\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u627e\u8282\u70b9\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u5dee\u7684\u6700\u5927\u503c\n    {\n        ans=max(ans,maxx[i]-minx[i]);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1496667920,
        "uid": 25340,
        "name": "compile_error",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "/\\*\u7136\u800c\u5e76\u4e0d\u9700\u8981\u5199\u4e24\u904dspfa\n\n\u6211\u521a\u5f00\u59cb\u7684\u601d\u8def\u662f\uff0c\u7ef4\u62a4ms[i]\u548cmb[i]\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u4ece\u539f\u70b9\u5230i\u8def\u5f84\u4e2d\u6700\u5927\u5356\u51fa\u4ef7\u548c\u6700\u5c0f\u4e70\u5165\u4ef7\uff08\u5c31\u662f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff09\uff0c\u7136\u540e\u8dd1spfa\uff0c\u7528dis[e.from]\u66f4\u65b0\u8282\u70b9e.to\u65f6\u987a\u4fbf\u66f4\u65b0ms[]\u548cmb[]\uff0c\u7136\u800c\u53eaA\u4e86\u4e00\u7ec4\u6570\u636e\n\n\n\u7136\u540e\u6211\u4ed4\u7ec6\u60f3\u4e86\u4e00\u4e0b\uff0cms\u8fd9\u4e2a\u6570\u7ec4\u5728\u4e00\u6b21spfa\u4e2d\u662f\u65e0\u6cd5\u66f4\u65b0\u7684\uff0c\u56e0\u4e3a\u6c34\u6676\u7403\u7684\u6700\u5927\u5356\u51fa\u4ef7\u4e00\u5b9a\u8981\u5012\u7740\u8dd1\u4e00\u8fb9spfa\u66f4\u65b0\uff0c\u7136\u800c\u6211\u61d2\u5f97\u5199\u4e86\u3002\u3002\u3002\n\n\n\u4e8e\u662f\u6211\u60f3\uff0c\u80fd\u4e0d\u80fd\u4e0d\u66f4\u65b0ms\u6570\u7ec4\uff0c\u76f4\u63a5\u628a\u5c06\u6bcf\u4e2a\u70b9\u7684\u5356\u51fa\u4ef7\u683c\u5f53\u4f5cms\u6765\u7528\u5462\uff1f\u4e8b\u5b9e\u8bc1\u660e\u662f\u53ef\u884c\u7684\u3002\u53ef\u4ee5\u5728spfa\u65f6\u62ffdis[e.from]\u548cms[e.to]-mb[e.from]\u66f4\u65b0\u8282\u70b9e.to\uff0c\u7c7b\u4f3cDP\u7684\u611f\u89c9\uff0c\n\n\u5373dis[e.from]=max(dis[e.to],ms[e.to]-mb[e.from]);\n\n\u7136\u540e\u83ab\u540d\u5176\u5999\u5c31A\u4e86\u3002\u3002\n\n\\*/\n```cpp\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<queue>\n#define maxn 100000+5\nusing namespace std;\nstruct Edges{\n    int from,to;\n};\nvector<int>G[maxn];\nvector<Edges>edge;\nint n,m,dis[maxn],mb[maxn],ms[maxn];\nbool vis[maxn];\ninline void addedge(int u,int v){\n    Edges e;\n    e.from=u;e.to=v;\n    edge.push_back(e);\n    int m=edge.size();\n    G[u].push_back(m-1);\n}\nint spfa(int U,int V){\n    for(int i=1;i<=n;i++)dis[i]=-maxn;\n    dis[U]=0;\n    vis[U]=1;\n    queue<int>q;\n    q.push(U);\n    Edges e;int u;\n    while(!q.empty()){\n        u=q.front();\n        q.pop();\n        vis[u]=0;\n        for(int i=0;i<G[u].size();i++){\n            e=edge[G[u][i]];bool mark=0;\n            if(dis[e.to]<ms[e.to]-mb[e.from]){\n                dis[e.to]=ms[e.to]-mb[e.from];\n                mb[e.to]=min(mb[e.to],mb[e.from]);\n                mark=1;\n            }\n            if(dis[e.to]<dis[e.from]){\n                dis[e.to]=dis[e.from];\n                mb[e.to]=min(mb[e.to],mb[e.from]);\n                mark=1;\n            }\n            if(mark){\n                if(!vis[e.to])\n                    q.push(e.to);\n            }\n        }\n    }\n    if(dis[V]>0)\n        return dis[V];\n    return 0;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    int x,y,z;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        cin>>mb[i];\n        ms[i]=mb[i];\n    }\n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>z;\n        addedge(x,y);\n        if(z==2) addedge(y,x);\n    }\n    cout<<spfa(1,n);\n}\n```",
        "postTime": 1478253806,
        "uid": 20695,
        "name": "DreamDraw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u601d\u8def\u662f\u627e\u51fa\u6700\u5927\u548c\u6700\u5c0f\u503c \u90fd\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u7136\u540e\u4f7f\u5dee\u503c\u6700\u5927\uff0c\u6240\u4ee5\u5c31\u8981\u6269\u5c55 \u6700\u5927\u503c \u548c \u6700\u5c0f\u503c \u628a\u5b83\u80fd\u8d70\u7684\u70b9\u90fd\u8d70\u4e00\u904d  \u6700\u540e\u679a\u4e3e\u6c42\u5dee\n\n\u6700\u5927\u503c\u662f\u53cd\u641c\uff0c\u6700\u5c0f\u503c\u662f\u6b63\u641c \u4f7f\u8fbe\u5230\u4e70\u7684\u4ef7\u683c\u5c3d\u91cf\u4f4e\uff0c\u5356\u7684\u5c3d\u91cf\u9ad8\u7684\u6548\u679c\u3002\n\n\n \n \n \n \n \n \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\nconst int INF=99999988;\nint pay[100005];int n,m;\nvector<int>a[100005];\nvector<int>b[100005];\nint gs[100005*3];int minn[100005];int maxn[100005];bool v[100005];\nint getint()\n{\n    int str=0;\n    char ch;\n    for(ch=getchar();ch>'9' || ch<'0' ;ch=getchar());\n    for(;ch>='0' && ch<='9' ; ch=getchar())str=str*10+ch-'0';\n    return str;\n}\nint min(int a,int b)\n{\n    return a<b?a:b;\n}\nint max(int a,int b)\n{\n    return a>b?a:b;\n}\nvoid bfs1()\n{\n    gs[1]=1;v[1]=1;minn[1]=pay[1];\n    int sum=1,t=0,u,p,temp;\n    while(t<sum)\n    {\n        t++;\n        u=gs[t];\n        //cout<<\"FUCK!\";\n        for(int i=0;i<a[u].size();i++)\n        {\n            p=a[u][i];\n            temp=min(pay[p],min(minn[u],pay[u]));\n            if(minn[p]>temp)\n            {\n                minn[p]=temp;\n                if(!v[p])\n                {\n                    v[p]=1;\n                    gs[++sum]=p;\n                }\n            }\n        }\n    }\n}\nvoid bfs2()\n{\n    gs[1]=n;v[n]=1;maxn[n]=pay[n];\n    int t=0,sum=1,temp,u,p;\n    while(t<sum)\n    {\n        t++;\n        u=gs[t];\n        for(int i=0;i<b[u].size();i++)\n        {\n            p=b[u][i];\n            temp=max(pay[p],max(maxn[u],pay[u]));\n            if(maxn[p]<temp)\n            {\n                maxn[p]=temp;\n                if(!v[p])\n                {\n                    v[p]=1;\n                    gs[++sum]=p;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    n=getint();\n    m=getint();\n    for(int i=1;i<=n;i++)\n    {\n        pay[i]=getint();minn[i]=INF;\n    }\n    int x,y,z;\n    for(int i=1;i<=m;i++)\n    {\n        x=getint();y=getint();z=getint();\n        if(z==1)\n        {\n            a[x].push_back(y);\n            b[y].push_back(x);\n        }\n        else\n        {\n            a[x].push_back(y);\n            a[y].push_back(x);\n            b[x].push_back(y);\n            b[y].push_back(x);\n        }\n    }\n    //cout<<\"cc\";\n    bfs1();\n    memset(gs,0,sizeof(gs));\n    memset(v,0,sizeof(v));\n    //cout<<\"aa\";\n    bfs2();\n    //cout<<\"bb\";\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        ans=max(ans,maxn[i]-minn[i]);\n    }\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1477794742,
        "uid": 22873,
        "name": "Hank",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "SPFA~\n\nSPFA\u6b63\u53cd\u5404\u904d\u5386\u4e00\u904d\uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u4ee5\u524d\u7684\u6700\u5c0f\u503cminn[i]\u548c\u6bcf\u4e2a\u70b9\u4ee5\u540e\u7684\u6700\u5927\u503cmaxx[i]\uff0c\u7136\u540e\u8ba1\u7b97\u6700\u5927\u7684maxx[i]-minn[i]\u503c~\n\n\n\u8981\u6ce8\u610f\u7684\u662f\u6bcf\u6b21\u66f4\u65b0\u70b9\u7684\u503c\u540e\u90fd\u8981\u4e0e\u539f\u503ca[i]\u6bd4\u8f83\uff0c\u5426\u5219\u4f1a\u51fa\u9519\u3002\n\n\n\uff08\u5b58\u56fe\u7684\u65f6\u5019\u6b63\u53cd\u5404\u5b58\u4e00\u904d\u3002\uff09\n\n\n\n\n\n\n          \n          \n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,m,x,y,z,a[100001],fi1[100001],ne1[1000001],w1[1000001],cnt1;\nint fi2[100001],ne2[1000001],w2[1000001],cnt2,maxx[100001],minn[100001],ans;\nbool b[100001];\nqueue<int> q;\nvoid add1(int u,int v)\n{\n    w1[++cnt1]=v;ne1[cnt1]=fi1[u];fi1[u]=cnt1;\n}\nvoid add2(int u,int v)\n{\n    w2[++cnt2]=v;ne2[cnt2]=fi2[u];fi2[u]=cnt2;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);minn[i]=999999999;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add1(x,y);add2(y,x);\n        if(z==2) add1(y,x),add2(x,y);\n    }\n    q.push(1);b[1]=1;minn[1]=a[1];\n    while(!q.empty())\n    {\n        int k=q.front();q.pop();b[k]=0;\n        for(int i=fi1[k];i;i=ne1[i])\n        {\n            if(minn[w1[i]]>minn[k])\n              {\n                minn[w1[i]]=minn[k];\n                if(!b[w1[i]])\n                {\n                    b[w1[i]]=1;q.push(w1[i]);\n                }\n              }\n              if(minn[w1[i]]>a[w1[i]])\n              {\n                  minn[w1[i]]=a[w1[i]];\n                  if(!b[w1[i]])\n                {\n                    b[w1[i]]=1;q.push(w1[i]);\n                }\n            }\n        }\n    }\n    q.push(n);b[n]=1;maxx[n]=a[n];\n    while(!q.empty())\n    {\n        int k=q.front();q.pop();b[k]=0;\n        for(int i=fi2[k];i;i=ne2[i])\n        {\n            if(maxx[w2[i]]<maxx[k])\n              {\n                maxx[w2[i]]=maxx[k];\n                if(!b[w2[i]])\n                {\n                    b[w2[i]]=1;q.push(w2[i]);\n                }\n              }\n              if(maxx[w2[i]]<a[w2[i]])\n              {\n                  maxx[w2[i]]=a[w2[i]];\n                  if(!b[w2[i]])\n                {\n                    b[w2[i]]=1;q.push(w2[i]);\n                }\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n      if(maxx[i]-minn[i]>ans) ans=maxx[i]-minn[i];\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1476953788,
        "uid": 16334,
        "name": "licone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u7684\u9898\u89e3\u90fd\u8fd9\u4e48\u5947\u602a\u3002\n\n\u6211\u4e0d\u8ba4\u4e3a\u4ed6\u4eec\u662f\u5f88\u597d\u7684\u505a\u6cd5\n\n\u6211\u7684\u505a\u6cd5\u662f\uff0c\u5148\u7f29\u70b9\uff0c\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u9762\u6700\u5c0f\u7684\u4e70\u5165\u4ef7\u5c31\u662f\u7f29\u70b9\u7684\u4e70\u5165\u4ef7\uff0c\u6700\u5927\u7684\u5356\u51fa\u4ef7\u5c31\u662f\u7f29\u70b9\u7684\u5356\u51fa\u4ef7\n\n\u7136\u540e\u8fd9\u4e00\u4e2a\u56fe\u5c31\u662f\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u7c7b\u4f3c\u4e8e\u62d3\u8865\u6392\u5e8f\u7684\u7c7b\u4f3c\u4e8edp\u7684\u4e1c\u897f\n\n\u8bb0\u4e00\u4e0b\u6700\u5c0f\u82b1\u8d39\uff0c\u8bb0\u4e00\u4e0b\u6700\u5927\u6536\u76ca\u3002\u5c31\u505a\u5b8c\u4e86\u3002\n",
        "postTime": 1475135609,
        "uid": 18896,
        "name": "\u5462\u5416",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "**\n\u597d\u4e0d\u5bb9\u6613\u6709\u9053\u81ea\u5df1\u72ec\u7acb\u5199\u51fa\u6765\u7684\u9898\n\n\u8fd9\u9898\u6211\u4e00\u5f00\u59cb\u6ca1\u6ce8\u610f\u5230\u8981\u5230n\u3002\n\n\u5f00\u59cb\u8981\u4ecen\u70b9\u53cd\u5411BFS\u4e00\u6b21\u6807\u8bb0\u53ef\u4ee5\u9009\u62e9\u7684\u70b9\n\n\u7136\u540e\u7528\u7c7b\u4f3cDP\u7684\u65b9\u6cd5 dp[i][0]\u8868\u793a\u4ece\u8d77\u70b9\u5230\u8fd9\u91cc\u7684\u6700\u5c0f\u4e70\u5165\u4ef7\n\ndp[i][1]\u8868\u793a\u4ece\u8d77\u70b9\u5230\u8fd9\u91cc\u7684\u6700\u5927\u5229\u6da6\n\n\u8f6c\u79fb\u65b9\u7a0b\uff1a\uff08\u5047\u8bbe\u5f53\u524d\u70b9\u4e3au\uff0c\u51fa\u8fb9\u7684\u70b9\u4e3av\uff09\n\ndp[v][0]=min( dp[v][0] , min( dp[u][0] , w[u] ) )\u8981\u4e48\u662f\u4e4b\u524d\u70b9\u7684\u4ef7\u683c\uff0c\u8981\u4e48\u662f\u5f53\u524d\u70b9\u7684\u4ef7\u683c\n\ndp[v][1]=max( dp[v][1] , w[u]-dp[u][0] ) \u5728u\u70b9\u5356\u51fa\n\n\u7b2c\u4e00\u6b21\u5bf9\u6c42\u51fadp\u6570\u7ec4\u7684\u505a\u6cd5\u662fDFS\n\nTLE 3\u4e2a\u70b9 RE 4\u4e2a\n\n\u60f3\u4e86\u4e00\u4e0b\uff0c\u89c9\u5f97\u7206\u6808\u7684\u53ef\u80fd\u6bd4\u8f83\u5927\uff0c\u6bd5\u7adf\u6709\u73af\uff0c\u800c\u4e14\u521a\u5f00\u59cb\u7684DFS\u91cc\u9762\u904d\u5386\u67d0\u4e00\u4e2a\u70b9\u904d\u5386\u5230\u7b2c\u4e09\u6b21\uff08\u56e0\u4e3a\u6709\u53ef\u80fd\u4f1a\u56de\u6765\u5356\u51fa\uff0c\u6837\u4f8b\u5c31\u662f\u8fd9\u6837\uff09\u624dreturn\n\n\u3002\u3002\u600e\u4e48\u7834\u554a\uff0c\u53ea\u6709\u7528queue\u4e86\u5457\n\n\u6211\u53c8\u60f3\u4e86\u4e00\u4e0b\uff0cDFS\u4e2d\u6211\u662f\u7528u\u6765\u66f4\u65b0\u5b83\u7684\u51fa\u8fb9\u70b9v\u7684dp\u503c\n\n\u53ea\u6709dp\u503c\u66f4\u4f18\u7684\u65f6\u5019\uff0c\u4ee5v\u4e3a\u8d77\u59cb\u70b9\u7ee7\u7eedDFS\u624d\u6709\u610f\u4e49\uff0c\u800c\u539f\u6765\u7684DFS\u592a\u7b28\uff0c\u65e0\u8bba\u600e\u6837\u90fd\u7ee7\u7eedDFS\n\n\u3002\u3002\u5224\u65ad\u3002\u3002\u5224\u65ad\u3002\u3002\u5224\u65ad\u66f4\u4f18\u624d\u52a0\u5165\u8282\u70b9\u3002\u3002\u3002\u961f\u5217\u3002\u3002\n\n\u5047\u5982\u8fd9\u4e2a\u8282\u70b9\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u9762\u4e86\u5462\uff1f\u989d\uff0c\u90a3\u5c31\u6765\u4e2ainq\u6570\u7ec4\u9632\u6b62\u91cd\u590d\n\n\u6211\u7075\u5149\u4e00\u95ea\uff0cinq\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\n\u539f\u6765\u8fd9\u4e2a\u5c31\u50cfSPFA\u4e00\u6837\uff01\uff01\uff01\uff01\n\n\u987a\u7740SPFA\u7684\u601d\u8def\u5199\u4e0b\u53bb\uff0c\u5c45\u7136A\u4e86= =\n\n\n**\n```cpp\n\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100000+10;\nconst int maxm=2*(500000+10);\nconst int INF=(1<<30);\nstruct Edge{\n    int u,v;\n    Edge(){}\n    Edge(int u,int v):u(u),v(v){}\n}e[maxm*2];\n\nint first[maxn],next[maxm*2],w[maxn],dp[maxn][2],_first[maxn],n,m;\nint ecnt=0;\nint read()\n{\n    int ret=0;char ch=getchar();\n    while(ch>'9'||ch<'0') ch=getchar();\n    for(;ch>='0'&&ch<='9';ch=getchar())ret=ret*10+ch-'0';\n    return ret;\n}\n\nvoid add_edge(int u,int v)\n{\n    next[ecnt]=first[u];first[u]=ecnt;e[ecnt++]=Edge(u,v);\n    next[ecnt]=_first[v];_first[v]=ecnt;e[ecnt++]=Edge(v,u);//\u8fd9\u91cc\u7684 _first\u5b58\u7684\u662f\u53cd\u5411\u8fb9\uff0c\u6240\u4ee5e\u6570\u7ec4\u548cnext\u6570\u7ec4\u8981\u5f00\u4e24\u500d\u5927\u5c0f\uff0c\u7528\u6765\u652f\u6301\u7b2c\u4e00\u6b21BFS\n}\n\nint can[maxn];\nvoid init_data()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) \n    {\n        w[i]=read();can[i]=-1;\n        first[i]=_first[i]=-1;\n        dp[i][0]=INF;dp[i][1]=-INF;\n    }\n    for(int i=1,u,v,ins;i<=m;i++)\n    {\n        u=read();v=read();ins=read();\n        add_edge(u,v);\n        if(ins==2) add_edge(v,u);\n    }\n}\n\nint cnt[maxn],inq[maxn];\nvoid bfs()\n{\n    queue<int>q;\n    q.push(1);\n    inq[1]=1;\n    \n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        inq[x]=0;\n        if(can[x]==-1) continue;\n        \n        for(int i=first[x];i!=-1;i=next[i])\n        {\n            if(can[e[i].v]==-1) continue;\n            int &d0=dp[e[i].v][0];\n            int &d1=dp[e[i].v][1];\n            if((d0>w[x] || d0>dp[x][0]) || (d1<w[x]-dp[x][0]))\n            {\n                d0=min(d0,min(w[x],dp[x][0]));\n                d1=max(d1,w[x]-dp[x][0]);\n                if(!inq[e[i].v]) q.push(e[i].v);\n            }\n        }\n    }\n    return ;\n}\n\nint vis[maxn];\nvoid BFS()\n{\n    queue<int>q;\n    q.push(n);\n    \n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        if(can[x]!=-1) continue;\n        can[x]=1;\n        for(int i=_first[x];i!=-1;i=next[i])\n            q.push(e[i].v);\n    }\n}\n\nint main()\n{\n    init_data();\n    BFS();             //\u6807\u8bb0\u53ef\u9009\u62e9\u7684\u70b9\n    bfs();              //\u6c42DP\u6570\u7ec4\n    int ans=-INF;\n    for(int i=1;i<=n;i++)\n      if(can[i]!=-1)\n        ans=max(ans,dp[i][1]);\n    if(ans<0) printf(\"0\");\n    else cout<<ans;\n    return 0;\n}\n\n\n```",
        "postTime": 1456643798,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u6069\u3002\u3002\u3002\u8fd9\u9053\u9898\u6570\u636e\u6709\u70b9\u6c34\u3002\u3002\u672c\u5730\u5bf9\u62cd\u6709\u95ee\u9898\u4f46\u662f\u5c45\u7136AC\u60f9\u3002\u5bb3\u7684\u6211\u627e\u4e86\u534a\u5929BUG\u3002\n\n\u601d\u8def\u5c31\u662fspfa\uff0c\u7b2c\u4e00\u6b21\u4ee5\u540e\u53cd\u5411\uff0c\u4ecen\u5f00\u59cbspfa\u3002\u7136\u540e\u5f00\u59cb\u627e\u4e24\u4e2a\u503c\u76f8\u5dee\u6700\u5927\u7684\u8f93\u51fa\u3002\n\n```cpp\n\n#include<math.h>\n#include<iostream>\n#include<algorithm>\n#include<stdio.h>\n#include<cstdlib>\n#include<queue>\n#include<cstring>\nusing namespace std;\nstruct map\n{\n    int to,next,w;\n}e[1000001][2];\nint read()\n{\n    int a=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')  \n    {\n      if(ch=='-')\n        f=-1;\n      ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n      a=a*10+ch-'0';\n      ch=getchar();\n    }\n    return a*f;\n}\nint n,m;\nint tot[2];\nint head[100001][2];\nint visit[100001];\nvoid add(int x,int y,int w)\n{\n    e[tot[w]][w].to=y;\n    e[tot[w]][w].next=head[x][w];\n    head[x][w]=tot[w]++;\n}\nint cost[100001];\nint f[100001][2];\nint vt[100001][2];\nint ma=0;\nqueue<int >q;\nvoid spfa(int a,int w)\n{\n    q.push(a);\n    while(!q.empty())\n    {\n      int u=q.front();\n      q.pop();\n      int i;\n      for(i=head[u][w];i!=-1;i=e[i][w].next)\n      {\n          int v=e[i][w].to;\n          visit[v]=1;\n          if(f[v][w]<f[u][w])\n            f[v][w]=f[u][w];\n        if(vt[v][w]<=100)\n        {\n          q.push(v);\n          vt[v][w]++;\n        }\n      }\n    }\n    return ;\n}\nint main()\n{\n    freopen(\"test.in\",\"r\",stdin);\n    freopen(\"test.out\",\"w\",stdout);\n    memset(head,-1,sizeof(head));\n    n=read(),m=read();\n    int i;\n    for(i=1;i<=n;i++)\n      cost[i]=read();\n    for(i=1;i<=n;i++)\n    {\n      f[i][1]=cost[i];\n      f[i][0]=-cost[i];\n    }\n    for(i=1;i<=m;i++)\n    {\n      int a=read(),b=read(),c=read();\n      add(a,b,0);\n      add(b,a,1);\n      if(c==2)\n      {\n          add(b,a,0);\n          add(a,b,1);\n      }\n    }\n    spfa(1,0);\n    if(visit[n])\n    {\n      memset(visit,0,sizeof(visit));\n      spfa(n,1);\n      for(i=1;i<=n;i++)\n      {\n          if(visit[i])\n            ma=max(ma,f[i][1]+f[i][0]);\n      }\n    }\n    else ma=0;\n    printf(\"%d\\n\",ma);\n    return 0;\n}\n\n```",
        "postTime": 1446683799,
        "uid": 9729,
        "name": "timetravler",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    },
    {
        "content": "\u4ece\u8d77\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u5e76\u4e0d\u65ad\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u503c\uff1b\n\n\u518d\u4ece\u7ec8\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u6700\u5927\u503c\n\n\u518d\u6c42\u6700\u5927\u5dee\u503cmaxn-minn\n\n  \n  \n  \n  \n  \n  \n  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<vector>\nint sz=1000005;\nusing namespace std;\nint n,m,u,v,w,minn[100005],maxn[100005],p[100005];\nint ans=0;\nvector<int>a[100005];\nvector<int>b[100005];\nvoid dfs1(int x,int k)\n{\n    int j,h;\n  minn[x]=min(minn[x],k);\n  for(j=0;j<a[x].size();j++)\n {\n     h=a[x][j];\n     if(minn[h]>k) dfs1(h,min(p[h],k));\n }\n}\nvoid dfs2(int x,int k)\n{\n    int j,h;\n  maxn[x]=max(maxn[x],k);\n   for(j=0;j<b[x].size();j++)\n  {\n      h=b[x][j];\n      if(maxn[h]<k) dfs2(h,max(p[h],k));\n  }\n}\nint main()\n{\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n     int i;\n   scanf(\"%d%d\",&n,&m);\n   for(i=1;i<=n;i++) scanf(\"%d\",&p[i]);\n   for(i=1;i<=m;i++)\n {\n     scanf(\"%d%d%d\",&u,&v,&w);\n     a[u].push_back(v);\n     b[v].push_back(u);\n     if(w==2)\n       {\n            a[v].push_back(u);\n            a[u].push_back(v);\n      }\n }\n   for(i=1;i<=n;i++) \n  {  minn[i]=100005; maxn[i]=-100005;  }\n  dfs1(1,p[1]);\n  dfs2(n,p[n]);\n  for(i=1;i<=n;i++)\n  if(minn[i]!=sz&&maxn[i]!=-sz&&ans<maxn[i]-minn[i])\n  ans=maxn[i]-minn[i];\n  cout<<ans;\n  fclose(stdin);\n  fclose(stdout);\n  return 0;\n}\n\n```",
        "postTime": 1446428611,
        "uid": 7427,
        "name": "\u5979\u8bf4123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1073 \u3010\u6700\u4f18\u8d38\u6613\u3011"
    }
]