[
    {
        "content": "### \u672c\u7bc7\u9898\u89e3\u8bb2\u8ff0\u7684\u4e3a\u975e\u5b8c\u7f8e\u505a\u6cd5\uff0c\u4f46\u662f\u53ef\u4ee5\u9a97\u523096\u5206\n\n[$\\huge\\text{\u5728\u672c\u4ebablog\u98df\u7528\u66f4\u4f73}$](http://dilute.coding.me/2019/02/21/Solutions/Solution-Luogu2892)\n\n\u8bf4\u5b9e\u8bdd\u6211\u5728\u7f51\u4e0a\u627e\u4e86\u597d\u4e45\u7ed3\u679c\u90fd\u662f\u8fd9\u4e2a$O(n^2)$\u7684\u975e\u6b63\u89e3\u6811\u578b$DP$\n\n\u542c\u8bf4\u6709\u4e2a$O(N)$\u7684\u6b63\u89e3\u5728\u67d0\u7bc7\u8bba\u6587\u91cc\uff1f\n\n\u7b97\u4e86\u53cd\u6b63\u6211\u4e5f\u770b\u4e0d\u61c2\n\n\u6240\u4ee5\u6211\u63a5\u4e0b\u6765\u5c31\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4e2a$O(n^2)$\u7684\u6811\u578b$DP$\u5427QwQ\n\n\u987a\u624b\u4e22\u4e00\u4e0b\u6211\u5b66\u4e60\u7684\u8fd9\u7bc7[$blog$](https://www.cnblogs.com/qilinart2/articles/3416266.html)\u5427\n\n## \u9884\u5904\u7406\n\n\u9996\u5148\u6211\u4eec\u5148\u7528$f[i]$\u8868\u793a\u5360\u9886\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u6240\u9700\u8981\u7684\u4eba\u6570\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f88\u663e\u7136\u5730\u5217\u51fa\u4e00\u4e2a\u65b9\u7a0b$f[u] = \\max\\{f[v]\\}$\n\n\u7136\u540e\u6211\u4eec\u8fd8\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u5982\u679c\u6709\u591a\u4e2a$f[v] = max\\{f[v]\\}$\uff0c\u90a3\u4e48\u5f97$f[u]$\u5f97\u518d\u52a0\u4e0a1\n\n\u56e0\u4e3a\u5728\u6211\u4eec\u8fdb\u884c\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684\u5360\u9886\u7684\u65f6\u5019\u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u4eba\u5f85\u5728root\u5904\uff08\u5177\u4f53\u53ef\u4ee5\u770b\u540e\u9762\u7684\u4ee3\u7801\uff09\n\n## \u6784\u9020\u65b9\u6848\n\n\u9996\u5148\uff0c\u6211\u4eec\u9884\u5904\u7406$n$\u6b21\uff0c\u5206\u522b\u4ee51~n\u4e3a\u6839\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u7b54\u6848\u6700\u5c0f\u7684\u6839\u3002\n\n\u786e\u8ba4\u6839\u4e4b\u540e\uff0c\u6211\u4eec\u663e\u7136\u8981\u5148\u5411\u6839\u4e22\u4e00\u4e2a\u4eba\uff0c\u7136\u540e\u4ee5\u4e3a\u524d\u9762\u6240\u8bf4\uff0c\u6211\u4eec\u5f97\u5148\u628a$f[v]$\u4e0d\u662f\u6700\u5927\u7684$v$\u7ed9\u5148\u5904\u7406\u6389\uff0c\u7136\u540e\u518d\u505a$f[v]$\u6700\u5927\u7684$v$\u3002\n\n\u800c\u6211\u4eec\u8bbf\u95ee\u4e00\u68f5\u5b50\u6811\u7684\u987a\u5e8f\u5982\u4e0b\uff1a\n\n- \u5728$u$\u8282\u70b9\u653e\u4e00\u4e2a\u8b66\u63a2\n- \u5c06$u$\u8282\u70b9\u7684\u5176\u4e2d\u4e00\u4e2a\u8b66\u63a2\u8d70\u5411$v$\u8282\u70b9\uff08\u4e3a\u4e86\u9632\u6b62\u76ee\u6807\u5f85\u5728$u \\rightarrow v$\u7684\u8fb9\u4e0a\u8d56\u7740\u4e0d\u8d70\uff09\n- \u9012\u5f52\u505a$v$\u8282\u70b9\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define INF 2147483647\n\ninline int inp(){\n    char c = getchar();\n    while(c < '0' || c > '9')\n        c = getchar();\n    int sum = 0;\n    while(c >= '0' && c <= '9'){\n        sum = sum * 10 + c - '0';\n        c = getchar();\n    }\n    return sum;\n}\n\nint head[100010];\nint nxt[20010];\nint end[20010];\nchar type[100000];\nint num1[100000], num2[100000];\nint cnt = 0;\nint cou = 0;\nint f[20010];\n\nvoid link(int a, int b){\n    nxt[++cou] = head[a];\n    head[a] = cou;\n    end[cou] = b;\n}\n\nvoid dfs(int cur, int last){\n    int max = 0;\n    bool mt = true;\n    for(int x = head[cur]; x != -1; x = nxt[x]){\n        if(end[x] != last){\n            dfs(end[x], cur);\n            if(f[end[x]] > max){\n                max = f[end[x]];\n                mt = false;\n            } else if(f[end[x]] == max)\n                mt = true;\n        }\n    }\n    if(mt)\n        f[cur] = max + 1;\n    else\n        f[cur] = max;\n}\n\nvoid dfs2(int cur, int last){\n    int max = 0;\n    bool mt = true;\n    int degree = 0;\n    int pos;\n    for(int x = head[cur]; x != -1; x = nxt[x]){\n        if(end[x] != last){\n            dfs(end[x], cur);\n            if(f[end[x]] > max){\n                max = f[end[x]];\n                mt = false;\n                pos = end[x];\n            } else if(f[end[x]] == max)\n                mt = true;\n            degree++;\n        }\n    }\n    // printf(\"%d %d pos = %d\\n\", cur, last, pos);\n    if(degree == 0){\n        type[++cnt] = 'B';\n        num1[cnt] = cur;\n        return ;\n    }\n    for(int x = head[cur]; x != -1; x = nxt[x]){\n        if(end[x] != pos && end[x] != last){\n            type[++cnt] = 'L';\n            num1[cnt] = cur;\n            type[++cnt] = 'M';\n            num1[cnt] = cur;\n            num2[cnt] = end[x];\n            dfs2(end[x], cur);\n        }\n    }\n    type[++cnt] = 'M';\n    num1[cnt] = cur;\n    num2[cnt] = pos;\n    dfs2(pos, cur);\n    if(mt)\n        f[cur] = max + 1;\n    else\n        f[cur] = max;\n}\n\nint main(){\n    memset(head, -1, sizeof(head));\n    int n = inp();\n    for(int i = 1; i < n; i++){\n        int u = inp();\n        int v = inp();\n        link(u, v);\n        link(v, u);\n    }\n    int root = 0;\n    int min = INF;\n    for(int i = 1; i <= n; i++){\n        dfs(i, 0);\n        if(f[i] < min){\n            min = f[i];\n            root = i;\n        }\n    }\n    dfs2(root, 0);\n    printf(\"%d\\n%d\\n\", min, cnt + 1);\n    printf(\"L %d\\n\", root);\n    for(int i = 1; i <= cnt; i++){\n        putchar(type[i]);\n        printf(\" %d\", num1[i]);\n        if(type[i] == 'M')\n            printf(\" %d\", num2[i]);\n        putchar('\\n');\n    }\n}\n```\n\n",
        "postTime": 1550744666,
        "uid": 36362,
        "name": "Dilute",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2892 \u3010[NOI2007]\u8ffd\u6355\u76d7\u8d3c\u3011"
    }
]