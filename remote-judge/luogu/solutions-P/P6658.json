[
    {
        "content": "[~~\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c~~](https://www.cnblogs.com/sapphire162/p/15941274.html)\n\n\u8fd9\u9898\u4ec5\u6709\u7684\u9898\u89e3\u662f\u4e00\u4e2a\u53eb\u505a Absorb-Eject \u7684\u7b97\u6cd5\uff0c\u4f46\u5176\u5b9e\u5bf9\u4e8e\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u6709\u4e00\u4e2a\u66f4\u7ecf\u5178\u4e5f\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u505a\u6cd5\uff08HDU6431 NewNippori\uff09\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\n\n- tarjan \u6c42\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n- \u5bf9 dfs \u6811\u7684\u4e00\u5b9a\u7406\u89e3\n\n\u4f7f\u7528 tarjan \u7b97\u6cd5\u6c42\u51fa\u5272\u8fb9\u4e4b\u540e\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff08\u4e0d\u5728\u540c\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u663e\u7136\u4e5f\u4e0d\u5728\u540c\u4e00\u4e2a\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u4e2d\uff09\u3002\n\n\u9996\u5148\uff0c\u6c42\u51fa\u4e00\u9897 dfs \u6811\uff0c\u539f\u56fe\u4e2d\u7684\u8fb9\u53ef\u4ee5\u5206\u4e3a\u6811\u8fb9\u548c\u975e\u6811\u8fb9\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u6811\u8fb9\u4e00\u5b9a\u53ea\u6709\u540e\u5411\u8fb9\u800c\u6ca1\u6709\u524d\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u3002\u6bcf\u6761\u975e\u6811\u8fb9\u53ef\u4ee5\u770b\u4f5c\u662f\u8986\u76d6\u4e86\u4e00\u4e9b\u6811\u8fb9\uff0c\u800c\u7531\u4e8e\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u6bcf\u6761\u6811\u8fb9\u81f3\u5c11\u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\u3002\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5272\u6389\u4e24\u6761\u8fb9\u4f7f\u8fd9\u4e24\u70b9\u4e0d\u518d\u8fde\u901a\uff0c\u6211\u4eec\u8003\u8651\u600e\u6837\u9009\u62e9\u8981\u5272\u7684\u4e24\u6761\u8fb9\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5272\u6389\u4e00\u6761\u6811\u8fb9\u548c\u4e00\u6761\u975e\u6811\u8fb9\u3002\u5982\u679c\u4e00\u6761\u6811\u8fb9\u4ec5\u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5272\u6389\u8fd9\u6761\u6811\u8fb9\u4ee5\u53ca\u8986\u76d6\u5b83\u7684\u975e\u6811\u8fb9\u4f7f\u56fe\u5206\u6210\u4e24\u90e8\u5206\u3002\n2. \u5272\u6389\u4e24\u6761\u6811\u8fb9\u3002\u5982\u679c\u8986\u76d6\u4e24\u6761\u6811\u8fb9\u7684\u975e\u6811\u8fb9\u96c6\u5408\u76f8\u540c\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u5272\u6389\u8fd9\u4e24\u6761\u6811\u8fb9\u4f7f\u56fe\u5206\u6210\u4e24\u90e8\u5206\uff08\u53ef\u4ee5\u53c2\u8003\u4e0b\u56fe\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dngvrs0u.png)\n\n\u56fe\u4e2d\u84dd\u8272\u7684\u8fb9\u662f\u6811\u8fb9\uff0c\u7ea2\u8272\u7684\u8fb9\u662f\u975e\u6811\u8fb9\uff0c\u800c\u8986\u76d6 $1$ \u53f7\u8fb9\u548c $3$ \u53f7\u8fb9\u7684\u975e\u6811\u8fb9\u96c6\u5408\u76f8\u540c\uff08\u90fd\u662f\u88ab $6$ \u53f7\u8fb9\u548c $7$ \u53f7\u8fb9\u8986\u76d6\uff09\uff0c\u6240\u4ee5\u5272\u6389 $1$ \u53f7\u8fb9\u548c $3$ \u53f7\u8fb9\u4e4b\u540e\u56fe\u4f1a\u5206\u5272\u6210\u4e24\u4e2a\u90e8\u5206\uff08\u7eff\u8272\u5708\u51fa\u7684\u90e8\u5206\u548c\u5176\u4f59\u90e8\u5206\uff09\u3002\u5f53\u7136\uff0c\u8986\u76d6 $2$ \u53f7\u8fb9\u7684\u975e\u6811\u8fb9\u4e5f\u662f $6$ \u548c $7$\uff0c\u6240\u4ee5\u5272\u6389 $1$ \u53f7\u8fb9\u548c $2$ \u53f7\u8fb9\uff0c\u6216\u5272\u6389 $2$ \u53f7\u8fb9\u548c $3$ \u53f7\u8fb9\u4e5f\u80fd\u5c06\u56fe\u5206\u6210\u4e24\u90e8\u5206\u3002\n\n\u5728\u8003\u8651\u5177\u4f53\u600e\u4e48\u5272\u4e4b\u524d\uff0c\u5148\u8bb2\u4e00\u4e0b\u5982\u4f55\u5224\u65ad\u8986\u76d6\u4e00\u6761\u6811\u8fb9\u7684\u975e\u6811\u8fb9\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u6761\u975e\u6811\u8fb9\u968f\u673a\u4e00\u4e2a $[0,2^{64})$ \u5185\u7684\u6743\u503c\u3002\u4ee4\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e3a\u6240\u6709\u4ece\u8be5\u70b9\u51fa\u53d1\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\uff0c\u8fd9\u6837\u4e00\u4e2a\u70b9\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u6743\u503c\u5f02\u6216\u548c\u5c31\u662f\u8986\u76d6\u4e86\u8fd9\u4e2a\u70b9\u7684\u7236\u8fb9\u7684\u6240\u6709\u975e\u6811\u8fb9\u7684\u6743\u503c\u5f02\u6216\u548c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 Hash \u8868\u5feb\u901f\u5224\u65ad\u4e00\u6761\u6811\u8fb9\u662f\u5426\u53ea\u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\uff0c\u4e24\u6761\u8986\u76d6\u4e24\u6761\u6811\u8fb9\u7684\u975e\u6811\u8fb9\u96c6\u5408\u662f\u5426\u76f8\u540c\u3002\n\n\u6211\u4eec\u628a\u6240\u6709\u8fb9\u7684\u6743\u503c\u63d2\u5165\u4e00\u4e2a Hash \u8868\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6761\u6811\u8fb9\uff0c\u5982\u679c\u8986\u76d6\u4e86\u5b83\u7684\u975e\u6811\u8fb9\u6743\u503c\u5f02\u6216\u548c\u5728 Hash \u8868\u4e2d\uff0c\u90a3\u4e48\u5b83\u4ec5\u88ab\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\uff0c\u6211\u4eec\u76f4\u63a5\u5272\u6389\u8fd9\u4e9b\u8fb9\uff0c\u56fe\u88c2\u6210\u5f88\u591a\u8fde\u901a\u5757\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8003\u8651\u60c5\u51b5 $2$\u3002\n\n\u5f53\u524d\u7684\u8fde\u901a\u5757\u91cc\u4f1a\u6709\u5f88\u591a\u80fd\u6309\u7167\u60c5\u51b5 $2$ \u914d\u5bf9\u7684\u6811\u8fb9\uff0c\u5b83\u4eec\u914d\u5bf9\u7684\u65b9\u5f0f\u4e00\u5b9a\u662f\u5f62\u5982\u4e0b\u56fe\u5de6\u9762\u90a3\u79cd\u6837\u5b50\uff0c\u5373\u914d\u5bf9\u7684\u6811\u8fb9\u90fd\u5728\u4e00\u6761\u7956\u5b59\u94fe\u4e0a\uff0c\u4e14\u4e0d\u4f1a\u51fa\u73b0\u53f3\u9762\u4e24\u79cd\u7684\u60c5\u51b5\uff08\u56fe\u662f\u81ea\u5df1\u753b\u7684\uff0c\u6709\u70b9\u4e11\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/i5g4g4d9.png)\n\n\u56fe\u4e2d\u7684\u8fb9\u90fd\u8868\u793a\u6811\u8fb9\uff0c\u989c\u8272\u76f8\u540c\u7684\u8fb9\u662f\u53ef\u4ee5\u914d\u5bf9\u7684\u8fb9\u3002\n\n\u8fd8\u53ef\u80fd\u4f1a\u6709\u591a\u6761\u6811\u8fb9\u4e4b\u95f4\u90fd\u80fd\u4e24\u4e24\u914d\u5bf9\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u6211\u4eec\u8981\u9009\u62e9\u6700\u8fd1\u7684\u914d\u5bf9\uff0c\u8fd9\u6837\u624d\u80fd\u8ba9\u62c6\u51fa\u7684\u8fde\u901a\u5757\u4e2d\u4e0d\u518d\u5b58\u5728\u914d\u5bf9\u7684\u6811\u8fb9\uff0c\u5373\u4e09\u8fde\u901a\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u5728 dfs \u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u4e00\u4e2a Hash \u8868\uff0c\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u6761\u6811\u8fb9\uff0c\u6211\u4eec\u80fd\u5feb\u901f\u6c42\u51fa\u5b83\u4e0b\u65b9\u4e0e\u5b83\u914d\u5bf9\u7684\u53e6\u4e00\u6761\u6811\u8fb9\uff0c\u7136\u540e\u76f4\u63a5\u5220\u6389\u4e24\u6761\u8fb9\u4e4b\u95f4\u7684\u8fde\u901a\u5757\uff0c\u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u4e00\u5b9a\u4e0d\u5b58\u5728\u53ef\u4ee5\u914d\u5bf9\u7684\u8fb9\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u5b58\u5728\uff0c\u4e5f\u5728\u4e4b\u524d\u7684\u8fc7\u7a0b\u4e2d\u5220\u5b8c\u4e86\u3002\u8fd9\u4e5f\u5c31\u662f\u8bf4\uff0c\u5220\u6389\u7684\u8fd9\u4e2a\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u3002\u5220\u6389\u6240\u6709\u914d\u5bf9\u8fb9\u4e4b\u95f4\u90e8\u5206\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u4e5f\u662f\u4e00\u4e2a\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u4ee5 $O(n+m)$ \u7684\u590d\u6742\u5ea6\u627e\u51fa\u4e86\u6240\u6709\u4e09\u8fde\u901a\u5206\u91cf\u3002\n\n\u4ee3\u7801\uff08\u611f\u89c9\u8fd8\u662f\u633a\u77ed\u7684\uff08\uff1f\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cctype>\n#include <vector>\n#include <random>\n#include <ctime>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n\ninline int read() {\n    int x = 0;\n    char c = getchar();\n    while (!isdigit(c)) c = getchar();\n    while (isdigit(c)) x = x * 10 + (c ^ '0'), c = getchar();\n    return x;\n}\n\nconst int maxn = 5e5 + 10;\nconst int maxm = 2e6 + 10;\n\nstruct Edge {\n    int to, next;\n} edge[maxm];\nint head[maxn], cnt = 1;\ninline void addedge(int u, int v) { edge[++cnt] = (Edge){ v, head[u] }, head[u] = cnt; }\n\nint n, m;\nvector<vector<int> > ans;\n\nint dfn[maxn], low[maxn], idx, cut[maxm];\nvoid tarjan(int x, int fr) {\n    dfn[x] = low[x] = ++idx;\n    for (int i = head[x]; i; i = edge[i].next) {\n        if (i == (fr ^ 1))\n            continue;\n        int y = edge[i].to;\n        if (!dfn[y]) {\n            tarjan(y, i);\n            low[x] = min(low[x], low[y]);\n            if (low[y] >= dfn[y])\n                cut[i] = cut[i ^ 1] = true;\n        } else\n            low[x] = min(low[x], dfn[y]);\n    }\n}\n\nvoid dfs1(int, int);\nvoid dfs2(int, int);\nvoid dfs3(int, int, vector<int> &);\n\ntypedef unsigned long long ull;\n\nmt19937 rnd(time(NULL));\ninline ull get_rnd() { return rnd() | 1ull * rnd() << 32; }\n\null w[maxn];\ngp_hash_table<ull, bool> st;\ngp_hash_table<ull, int> mp;\n\nint _dfn[maxn], _idx;\nbool on_tree[maxm], cut1[maxm];\nint fa[maxn];\nvoid dfs1(int x, int fr) {\n    _dfn[x] = ++_idx;\n    for (int i = head[x]; i; i = edge[i].next) {\n        if (i == (fr ^ 1) || cut[i])\n            continue;\n        int y = edge[i].to;\n        if (_dfn[y]) {\n            if (_dfn[y] > _dfn[x])\n                continue;\n            ull val = get_rnd();\n            w[x] ^= val, w[y] ^= val;\n            st[val] = true;\n        } else {\n            on_tree[i] = true, fa[y] = x;\n            dfs1(y, i);\n            w[x] ^= w[y];\n        }\n    }\n    if (st.find(w[x]) != st.end())\n        cut1[fr] = cut1[fr ^ 1] = true;\n    if (cut1[fr] || !fr) {\n        mp.clear();\n        dfs2(x, 0);\n        vector<int> tmp;\n        dfs3(x, 0, tmp);\n        ans.push_back(tmp);\n    }\n}\n\nvoid dfs2(int x, int fr) {\n    for (int i = head[x]; i; i = edge[i].next) {\n        int y = edge[i].to;\n        if (cut[i] || cut1[i] || !on_tree[i])\n            continue;\n        dfs2(y, i);\n    }\n    if (mp.find(w[x]) != mp.end()) {\n        int y = mp[w[x]];\n        vector<int> tmp;\n        dfs3(x, y, tmp);\n        ans.push_back(tmp);\n        on_tree[fr] = false;\n        addedge(fa[x], y);\n        on_tree[cnt] = true, fa[y] = fa[x];\n        mp[w[x]] = y;\n    } else\n        mp[w[x]] = x;\n}\n\nvoid dfs3(int x, int t, vector<int> &v) {\n    v.push_back(x);\n    for (int i = head[x]; i; i = edge[i].next) {\n        int y = edge[i].to;\n        if (cut[i] || cut1[i] || !on_tree[i] || y == t)\n            continue;\n        dfs3(y, t, v);\n    }\n}\n\nint main() {\n    n = read(), m = read();\n    for (int i = 1; i <= m; i++) {\n        int u = read(), v = read();\n        addedge(u, v), addedge(v, u);\n    }\n\n    for (int i = 1; i <= n; i++)\n        if (!dfn[i])\n            tarjan(i, 0);\n\n    for (int i = 1; i <= n; i++)\n        if (!_dfn[i])\n            dfs1(i, 0);\n\n    for (vector<int> &v : ans) sort(v.begin(), v.end());\n    sort(ans.begin(), ans.end());\n\n    printf(\"%d\\n\", ans.size());\n    for (vector<int> v : ans) {\n        for (int x : v) printf(\"%d \", x);\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\u53c2\u8003\u8d44\u6599\uff1a \n\n- <https://blog.csdn.net/weixin_45313881/article/details/104032690>",
        "postTime": 1645891953,
        "uid": 176569,
        "name": "iMya_nlgau",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6658 \u8fb9\u4e09\u8fde\u901a\u5206\u91cf"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/U119667)\n\n> \u7ed9\u51fa\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u53ef\u80fd\u4e0d\u8fde\u901a\u3001\u6709\u91cd\u8fb9\u3001\u6709\u81ea\u73af\u3001\u6709\u5272\u8fb9\u3002\u6c42\u5176\u6240\u6709\u6781\u5927\u7684\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u3002\n>\n> $n, m \\le 5 \\times 10 ^ 5$\u3002\n\n\u8bba\u6587\u592a\u957f\u4e86\uff0c\u8fd8\u6ca1\u770b\u5b8c\uff0c\u76ee\u524d\u53ea\u770b\u61c2\u4e86\u7b97\u6cd5\u6b65\u9aa4\uff0c\u4e00\u4e9b\u8bc1\u660e\u8fd8\u5495\u5728\u540e\u9762\u3002\u5c31\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6b65\u9aa4\uff0c\u6b63\u786e\u6027\u8bc1\u660e\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\u7b49\u6211\u770b\u61c2\u4ee5\u540e\u8865\u4e0a\u6765\u3002\u9644\u4e00\u4e2a\u8bba\u6587\u539f\u5730\u5740\uff1a[A Simple 3-Edge-Connected Component Algorithm](https://xueshu.baidu.com/usercenter/paper/show?paperid=5a791af706fa9836a86af59d6778ff2f)\uff0c\u6765\u6e90\u9009 ResearchGate \u90a3\u4e2a\u53ef\u4ee5\u514d\u8d39\u4e0b\u8f7d\u3002\u672c\u6587\u5185\u56fe\u7247\u5747\u51fa\u81ea\u8fd9\u7bc7\u8bba\u6587\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e\u5176\u4e2d\u7684 Absort-Eject \u64cd\u4f5c\uff0c\u6211\u4e60\u60ef\u79f0\u5176\u4e3a Absorb-Eject \u7b97\u6cd5\u3002Absorb-Eject \u7b97\u6cd5\u7684\u601d\u60f3\u4e0e\u6c42\u70b9\u53cc\u3001\u8fb9\u53cc\u7684 Tarjan \u7b97\u6cd5\u7c7b\u4f3c\uff0c\u90fd\u662f\u5229\u7528\u7b97\u6cd5\u8fc7\u7a0b\u4e2d\u5efa\u51fa\u7684 dfs \u6811\uff0c\u6c42\u51fa\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u60c5\u51b5\u3002\u6545\u4e3a\u4e86\u66f4\u6e05\u6670\u5730\u5f04\u61c2\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6700\u597d\u5bf9\u70b9\u53cc\u3001\u8fb9\u53cc\u7684 Tarjan \u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002\n\n\u4e3a\u4e86\u51cf\u5c11\u8ba8\u8bba\uff0c\u6211\u4eec\u9700\u8981\u5148\u5220\u9664\u6389\u539f\u56fe\u4e0a\u4e00\u4e9b\u53ef\u6709\u53ef\u65e0\uff0c\u4f46\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u9ebb\u70e6\u7684\u5206\u7c7b\u60c5\u51b5\u7684\u8fb9\uff1a\u81ea\u73af\u548c\u5272\u8fb9\u3002\n\n- \u81ea\u73af\uff1a\u663e\u7136\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u65b9\u6848\u4f7f\u5f97\u8fde\u901a\u7684\u4e09\u6761\u8def\u5f84\u90fd\u4e0d\u5305\u542b\u81ea\u73af\uff0c\u6545\u81ea\u73af\u53ef\u5220\u3002\n- \u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u4e00\u5b9a\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u6b64\u5272\u8fb9\u4e24\u7aef\u7684\u8fb9\u4e0d\u53ef\u80fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\uff0c\u6545\u5272\u8fb9\u53ef\u5220\u3002\n\n\u7ecf\u8fc7\u8fd9\u6837\u9884\u5904\u7406\u8f6c\u5316\u540e\uff0c\u6211\u4eec\u5c06\u539f\u56fe\u53d8\u6210\u4e86\u82e5\u5e72\u65e0\u81ea\u73af\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u8fde\u901a\u5757\u3002\u90a3\u4e48\u4ee5\u4e0b\u7684\u7b97\u6cd5\u8fc7\u7a0b\uff0c\u5747\u5728\u8fd9\u6837\u7684\u8fb9\u53cc\u4e2d\u8fdb\u884c\u3002\n\n\u9996\u5148\uff0c\u5bf9\u9650\u5236\u6761\u4ef6\u8fdb\u884c\u4e00\u5b9a\u7684\u89c2\u5bdf\uff1a\u4e24\u4e2a\u70b9 $u, v$ \u5728\u76f8\u540c\u7684\u8fb9\u4e09\u5185\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0d\u5b58\u5728\u4e00\u4e2a\u8fb9\u5bf9 $(e_1, e_2)$\uff0c\u6ee1\u8db3\u5c06\u539f\u56fe\u7684 $e_1, e_2$ \u5272\u5f00\u4ee5\u540e\uff0c$u$ \u4e0e $v$ \u4e0d\u8fde\u901a\u3002\n\n\u518d\u52a0\u4e0a\u8fd9\u5f20\u56fe\u5185\u6ca1\u6709\u5272\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c\u5272\u8fb9\u7684\u5b9a\u4e49\uff1a\u5207\u8fb9\u3002\u6211\u4eec\u79f0\u4e00\u6761\u8fb9 $e$ \u662f\u5207\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u80fd\u591f\u4e0e\u53e6\u5916\u4e00\u6761\u8fb9 $e'$ \u914d\u5408\uff0c\u628a\u539f\u56fe\u5272\u6210\u4e24\u4e2a\u8fde\u901a\u5757\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9 $e = (u, v)$\uff0c\u82e5 $e$ \u662f\u4e00\u6761\u5207\u8fb9\uff0c\u5219 $u, v$ \u4e00\u5b9a\u4e0d\u5728\u4e00\u4e2a\u76f8\u540c\u7684\u8fb9\u4e09\u5185\uff1b\u82e5 $e$ \u4e0d\u662f\u4e00\u6761\u5207\u8fb9\uff0c\u5219 $u, v$ \u4e00\u5b9a\u5728\u4e00\u4e2a\u76f8\u540c\u7684\u8fb9\u4e09\u5185\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u539f\u56fe\u4e2d\u6240\u6709\u5207\u8fb9\u5220\u53bb\uff0c\u5269\u4e0b\u7684\u8fb9\u5c31\u5c06\u539f\u56fe\u8fde\u6210\u4e86\u82e5\u5e72\u8fb9\u4e09\u3002\n\n\u4e8e\u662f\u6211\u4eec\u660e\u786e\u4e86\u7b97\u6cd5\u7684\u76ee\u7684\uff1a\u786e\u5b9a\u6bcf\u6761\u8fb9\u662f\u5426\u4e3a\u5207\u8fb9\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3\u6b65\u9aa4\u662f Absorb-Eject \u64cd\u4f5c\uff0c\u53ef\u8bd1\u4e3a\u541e\u5410\u64cd\u4f5c\u3002Absorb \u4f1a\u5728\u4e00\u6761\u8fb9 $(w, u)$ \u4e0a\u8fdb\u884c\uff0c\u8868\u793a $w$ \u5c06 $u$ \u541e\u5e76\u3002\u541e\u5e76\u65f6\uff0c$u$ \u6d88\u5931\uff0c\u6240\u6709\u4e0e $u$ \u76f8\u90bb\u7684\u8fb9 $(x, u)$\uff08\u9664\u4e86 $(w, u)$ \u4ee5\u5916\uff09\uff0c\u90fd\u53d8\u6210\u4e0e $w$ \u76f8\u90bb\u7684\u8fb9 $(x, w)$\u3002\u7279\u6b8a\u5730\uff0c\u5982\u679c $u$ \u7684\u70b9\u5ea6\u4e3a $2$ \uff08\u6ce8\u610f\u6b64\u65f6\u7684\u70b9\u5ea6\u662f\u541e\u5e76\u540e\u5f62\u6210\u7684\u65b0\u56fe\u7684\u70b9\u5ea6\uff0c\u800c\u70b9 $u$ \u4e5f\u53ef\u80fd\u5df2\u541e\u5e76\u4e86\u82e5\u5e72\u4e2a\u70b9\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u5272\u5f00\u8fd9\u4e24\u6761\u8fb9\u4f7f\u5f97 $u$ \u4e0e\u5916\u754c\u4e0d\u8fde\u901a\uff0c\u8bf4\u660e $u$ \u53ca $u$ \u5df2\u541e\u5e76\u8fc7\u7684\u70b9\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8fb9\u4e09\uff0c\u5c31\u8ba9 $w$ \u5c06 $u$ \u5410\u51fa\u6765\uff0c\u800c\u5410\u51fa\u6765\u7684 $u$ \u5931\u53bb\u6240\u6709\u76f8\u90bb\u7684\u8fb9\u3002\n\n\u5f62\u5f0f\u5316\u6765\u8bb2\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$\uff0c\u5b9a\u4e49\u5176\u5df2\u541e\u5e76\u70b9\u96c6\u4e3a $\\sigma(u)$\uff0c\u521d\u59cb\u65f6\uff0c$\\sigma(u) = \\{u\\}$\u3002\u8fdb\u884c\u5230\u76ee\u524d\u7684\u56fe\u4e3a $G' = (V', E')$\uff0c\u8fdb\u884c\u541e\u5410\u7684\u8fb9\u4e3a $(w, u)$\u3002\u90a3\u4e48\u8fdb\u884c\u4e00\u6b21 Absorb-Eject \u64cd\u4f5c\u540e\uff0c\u56fe\u4f1a\u53d8\u6210 $G' / e = (V'', E'')$\u3002\u5176\u4e2d $E'' = E' \\setminus E_u \\cup E_{w ^ +}$\uff0c\u5176\u4e2d $E_u$ \u8868\u793a $G'$ \u4e2d\u4e0e $u$ \u76f8\u90bb\u7684\u8fb9\uff0c$E_{w ^ +} = \\{ f' = (w, z) \\mid \\exists f \\in E_u,\\text{ such that } f = (u, z) \\text{ for some } z \\in V' - \\{w\\} \\}$\u3002\u800c $V''$ \u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u82e5 $deg_{G'}(u) = 2$\uff0c\u5219 $u$ \u4f1a\u88ab $w$ \u5410\u51fa\u6765\uff0c\u90a3\u4e48 $V'$ \u6ca1\u53d8\uff1b\u82e5 $deg_{G'}(u) \\neq 2$\uff0c\u5219 $u$ \u88ab $w$ \u5438\u6536\uff0c$V'' = V' - \\{u\\}$\uff0c$\\sigma(w) = \\sigma(w) \\cup \\sigma(u)$\u3002\n\n\u7531\u4e8e\u53ef\u4ee5\u8bc1\u660e\uff08\u7b2c\u4e00\u4e2a\u5f85\u8865\u8bc1\u660e\u7684\u5751\uff09\uff0c\u82e5 $deg_{G'}(u) \\neq 2$\uff0c\u5219 $(w, u)$ \u4e00\u5b9a\u4e0d\u662f\u5207\u8fb9\uff0c\u4e5f\u5c31\u662f $w, u$ \u4e00\u5b9a\u5728\u4e00\u4e2a\u8fb9\u4e09\u5185\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f $\\sigma(w)$ \u5c31\u662f $w$ \u6240\u4ee3\u8868\u7684\u4e00\u4e2a\u539f\u56fe\u4e0a\u7684\u4e00\u4e2a\u8fb9\u4e09\u3002\u5728\u8fdb\u884c\u82e5\u5e72\u6b21\u541e\u5e76\u540e\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u6d88\u5931\u4e86\uff0c\u53d8\u6210\u82e5\u5e72\u72ec\u7acb\u7684\u70b9\u3002\u5219\u6bcf\u4e2a\u72ec\u7acb\u7684\u70b9\u5c31\u4ee3\u8868\u7740\u539f\u56fe\u4e0a\u4e00\u4e2a\u6781\u5927\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\uff0c\u5c31\u662f\u6211\u4eec\u60f3\u6c42\u7684\u4e1c\u897f\u3002\n\n![pic1.png](https://i.loli.net/2020/06/18/A5lvqOF8IwCYpVc.png)\n\n\u4ee5\u4e0a\u662f\u6838\u5fc3\u6b65\u9aa4 Absorb-Eject\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u7528\u4e00\u4e2a\u7c7b\u4f3c Tarjan \u7b97\u6cd5\u7684 dfs \u8fc7\u7a0b\uff0c\u914d\u5408\u7740 Absorb \u64cd\u4f5c\uff0c\u5c06\u539f\u56fe\u4e00\u6b65\u6b65\u53d8\u6210\u8fd9\u6837\u6ca1\u6709\u8fb9\u7684\u56fe\uff0c\u5f97\u5230\u6bcf\u4e00\u4e2a\u8868\u793a\u6781\u5927\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u7684\u72ec\u7acb\u70b9\u3002\n\n\u53c8\u6709\u4e00\u4e2a\u5947\u602a\u7684\u7ed3\u8bba\uff08\u7b2c\u4e8c\u4e2a\u5f85\u8865\u8bc1\u660e\u7684\u5751\uff09\uff1a\u9012\u5f52\u5b8c\u4e00\u4e2a\u5b50\u6811 $u$ \u7ed3\u675f\u56de\u6eaf\u540e\uff0c\u5b50\u6811 $u$ \u5185\u6240\u6709\u4ecd\u672a\u786e\u5b9a\u662f\u5426\u4e3a\u5207\u8fb9\u7684\u8fb9\u5f62\u6210\u4e86\u4e00\u6761\u4e00\u7aef\u4e3a $u$ \u7684\u8def\u5f84\uff0c\u4e5f\u5373\u4fee\u6539\u540e\u7684\u56fe\u5f62\u6210\u4e86\u4e00\u6761\u4e00\u7aef\u4e3a $u$ \u7684\u8def\u5f84\u548c\u82e5\u5e72\u4ee3\u8868\u8005\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u7684\u72ec\u7acb\u70b9\u3002\u6211\u4eec\u79f0 $u$ \u4e0a\u6302\u7740\u7684\u8fd9\u6761\u8def\u5f84\u4e3a $u$ - path\uff0c\u8bb0 $P_u$\uff0c\u6211\u4eec\u9700\u8981\u5728 dfs \u7684\u8fc7\u7a0b\u4e2d\u7ef4\u62a4 $P_u$\uff0c\u6700\u7ec8\u5230\u8fbe\u6839 $r$ \u65f6\u7684 $P_r$ \u4f1a\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662f\u518d\u6ca1\u6709\u672a\u786e\u5b9a\u662f\u5426\u4e3a\u5207\u8fb9\u7684\u8fb9\uff0c\u5c31\u7ed3\u675f\u4e86\u6211\u4eec\u7684\u7b97\u6cd5\u8fc7\u7a0b\u3002\n\ndfs \u8fc7\u7a0b\u4e2d\uff0c\u540c\u6837\u8bb0\u5f55 $low$ \u548c $dfn$\uff0c$dfn(u)$ \u8868\u793a\u70b9 $u$ \u5728 dfs \u5e8f\u4e2d\u7684\u7f16\u53f7\uff0c$low(u)$ \u8868\u793a $u$ \u7ecf\u8fc7\u6700\u591a\u4e00\u6761\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684 $dfn$ \u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6709 $low(w) = \\min(\\{low(u) \\mid u \\text{ is a child of } w\\} \\cup \\{ dfn(w') \\mid (w, w') \\text{ is a back-edge} \\} \\cup \\{dfn(w)\\})$\u3002\u6211\u4eec\u4ee4\u6b64\u65f6 dfs \u5230\u4e86\u4e00\u4e2a\u70b9 $w$\uff0c\u679a\u4e3e\u5176\u76f8\u90bb\u8fb9\uff0c\u5206\u7c7b\u8ba8\u8bba\u66f4\u65b0 $low$ \u548c $P_w$\u3002\n\n- $(w, u)$ \u662f\u4e00\u6761\u6ca1\u7528\u7684\u8fb9\uff0c\u5373 $w = u$\uff0c\u6216 $(w, u)$ \u4e3a\u5272\u8fb9\uff0c\u6216 $u$ \u662f $w$ \u7684\u7236\u4eb2\u4e14 $w$ \u662f\u4ece $u$ \u7684\u8fd9\u6761\u8fb9\u8fc7\u6765\uff08\u5c31\u662f\u7236\u8fb9\uff09\u3002\u4e0d\u7ba1\uff0ccontinue\u3002\n- $(w, u)$ \u662f\u4e00\u6761\u6811\u8fb9\u3002\u9012\u5f52\u6267\u884c $dfs(u)$\u3002\u9996\u5148\u5224\u65ad\u4e00\u4e0b $deg_{G'}(u)$ \u662f\u5426\u4e3a $2$\uff0c\u5982\u679c\u7b49\u4e8e $2$ \u90a3\u4e48\u8981\u5148\u628a $u$ \u72ec\u7acb\u5410\u51fa\u6765\u5f62\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u8fb9\u4e09\uff0c\u540c\u65f6\u628a $u$ \u4ece $P_u$ \u4e2d\u53bb\u6389\uff0c$P_u = P_u - u$\u3002\u63a5\u7740\u770b $low(u)$ \u662f\u5426\u4f1a\u5bf9 $low(w)$ \u4ea7\u751f\u8d21\u732e\uff1a\n  - \u82e5 $low(u) < low(w)$\uff0c\u5927\u6982\u7531\u4e8e\u589e\u52a0\u4e86\u4e00\u6761 $u \\to low(u) \\to low(w) \\to P_w$ \u7684\u8def\u5f84\uff0c\u539f\u672c\u8fd8\u672a\u786e\u5b9a\u7684 $P_w$ \u53ef\u4ee5\u786e\u5b9a\u4e3a\u4e0d\u662f\u5207\u8fb9\u4e86\uff0c\u4e8e\u662f\u8ba9 $w$ \u5c06\u539f\u672c\u7684 $P_w$ \u541e\u5e76\u6389\uff0c\u7136\u540e\u7528 $w + P_u$ \u628a $P_w$ \u66ff\u6362\u6389\u3002  \n    ![pic2.png](https://i.loli.net/2020/06/18/mUMyX8fBFRup2Iz.png)\n  - \u82e5 $low(u) \\ge low(w)$\uff0c\u7c7b\u4f3c\u4e0a\u4e00\u6761\uff0c\u539f\u672c\u8fd8\u672a\u786e\u5b9a\u7684 $P_u$ \u53ef\u4ee5\u786e\u5b9a\u4e3a\u4e0d\u662f\u5207\u8fb9\u4e86\uff0c\u8ba9 $w$ \u628a $P_u$ \u541e\u5e76\u6389\uff0c\u4fdd\u6301 $P_w$ \u4e0d\u53d8\u3002\n- $(w, u)$ \u662f\u4e00\u6761\u8fd4\u7956\u8fb9\u3002\u82e5\u518d\u6ee1\u8db3 $dfn(u)$ \u53ef\u4ee5\u66f4\u65b0 $low(w)$\uff0c\u90a3\u4e48 $P_w$ \u53ef\u4ee5\u786e\u5b9a\u4e3a\u4e0d\u662f\u5207\u8fb9\u4e86\uff0c\u8fd9\u65f6\u8ba9 $w$ \u628a $P_w$ \u541e\u5e76\u6389\uff0c\u7136\u540e $P_w$ \u6e05\u7a7a\u3002\n- $(w, u)$ \u662f\u4e00\u6761\u524d\u5411\u8fb9\u3002\u7531\u4e8e $(w, u)$ \u8fd9\u6761\u8fb9\u7684\u5b58\u5728\uff0c$u$ \u4e00\u5b9a\u843d\u5728 $P_w$ \u4e0a\u3002\u90a3\u4e48\u8fd9\u65f6 $P_w$ \u7684 $[w \\cdots u]$ \u90e8\u5206\u53ef\u4ee5\u786e\u5b9a\u4e3a\u4e0d\u662f\u5207\u8fb9\u4e86\uff0c\u5c31\u8ba9 $u$ \u628a $P_w$ \u7684 $[w \\cdots u]$ \u90e8\u5206\u541e\u5e76\u6389\uff0c\u526a\u6389 $P_w$ \u7684\u8fd9\u6bb5\u524d\u7f00\u3002  \n  ![pic3.png](https://i.loli.net/2020/06/18/HpRz4GuFPEQBhgo.png)\n\n\u7531\u4e8e $low(r) = 1$\uff0c\u6240\u6709\u7684\u6811\u8fb9\u90fd\u4f1a\u5230 $low(u) \\ge low(w)$ \u8fd9\u6761\uff0c\u56e0\u6b64 $P_r$ \u4fdd\u6301\u4e3a\u7a7a\u3002\u4e5f\u5c31\u662f\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u9012\u5f52\u5230\u6839\u7ed3\u675f\u540e\uff0c\u5c31\u786e\u5b9a\u4e86\u6bcf\u6761\u8fb9\u662f\u5426\u4e3a\u5207\u8fb9\uff0c\u7b97\u6cd5\u987a\u5229\u5b8c\u6210\u3002\n\n\u8d34\u4e0a\u8bba\u6587\u4e2d\u7ed9\u51fa\u7684\u4f2a\u4ee3\u7801\uff1a\n\n![pic4.png](https://i.loli.net/2020/06/18/qVdRD27mG6vJchF.png)\n\n\u6700\u540e\uff0c\u6ce8\u610f\u5230\u56fe\u53d8\u5316\u7684\u65f6\u5019\u8fb9\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u7ef4\u62a4\uff0c\u53ea\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u76f8\u90bb\u70b9\u5ea6\u5c31\u597d\u4e86\u3002\u4ee3\u7801\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5199\u51fa\u6765\u3002\n\n\u6211\u7528\u4e86\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((n + m) \\log n)$\u3002\u5b9e\u73b0\u7ec6\u81f4\u4e00\u70b9\u53ef\u4ee5\u628a\u5e76\u67e5\u96c6\u6254\u6389\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n + m)$\u3002\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <utility>\n#include <vector>\n\nconst int MaxN = 500000, MaxM = 500000;\n\nstruct graph_t {\n  int cnte;\n  int head[MaxN + 5], to[MaxM * 2 + 5], next[MaxM * 2 + 5];\n\n  graph_t() { cnte = 1; }\n\n  inline void addEdge(int u, int v) {\n    cnte++; to[cnte] = v;\n    next[cnte] = head[u]; head[u] = cnte;\n  }\n};\n\nstruct union_find {\n  int par[MaxN + 5];\n  union_find() { memset(par, -1, sizeof par); }\n\n  int find(int x) { return par[x] < 0 ? x : par[x] = find(par[x]); }\n\n  inline void merge(int u, int v) {\n    int p = find(u), q = find(v);\n    if (p == q) return;\n    par[p] += par[q];\n    par[q] = p;\n  }\n};\n\nint N, M;\ngraph_t Gr;\n\nclass two_edge_connect {\nprivate:\n  int low[MaxN + 5], dfn[MaxN + 5], dfc;\n  int stk[MaxN + 5], tp;\n  int bel[MaxN + 5], s;\n\n  void dfs(int u, int fe) {\n    low[u] = dfn[u] = ++dfc;\n    stk[++tp] = u;\n    for (int i = Gr.head[u]; i; i = Gr.next[i]) {\n      if ((i ^ fe) == 1) continue;\n      int v = Gr.to[i];\n      if (dfn[v] == 0) {\n        dfs(v, i);\n        low[u] = std::min(low[u], low[v]);\n      } else\n        low[u] = std::min(low[u], dfn[v]);\n    }\n    if (low[u] == dfn[u]) {\n      s++;\n      for (;;) {\n        int v = stk[tp--];\n        bel[v] = s;\n        if (u == v) break;\n      }\n    }\n  }\n\npublic:\n  void init() {\n    memset(dfn, 0, sizeof dfn);\n    dfc = tp = s = 0;\n    for (int i = 1; i <= N; ++i)\n      if (dfn[i] == 0) dfs(i, 0);\n  }\n\n  inline bool isbridge(int u, int v) {\n    return bel[u] != bel[v];\n  }\n};\n\nclass three_edge_connect {\nprivate:\n  two_edge_connect bcc;\n  union_find uf;\n  int low[MaxN + 5], dfn[MaxN + 5], end[MaxN + 5], dfc;\n  int deg[MaxN + 5];\n\n  inline bool insubtree(int u, int v) {\n    if (dfn[u] <= dfn[v] && dfn[v] <= end[u]) return true;\n    else return false;\n  }\n\n  inline void absorb(std::vector<int> &path, int u, int w = 0) {\n    while (path.empty() == false) {\n      int v = path.back();\n      if (w > 0 && insubtree(v, w) == false) break;\n      path.pop_back();\n      deg[u] += deg[v] - 2;\n      uf.merge(u, v);\n    }\n  }\n\n  void dfs(int u, int fe, std::vector<int> &pu) {\n    low[u] = dfn[u] = ++dfc;\n    for (int i = Gr.head[u]; i; i = Gr.next[i]) {\n      int v = Gr.to[i];\n      if (u == v || bcc.isbridge(u, v) == true) continue;\n      deg[u]++;\n      if ((i ^ fe) == 1) continue;\n      if (dfn[v] == 0) {\n        std::vector<int> pv;\n        dfs(v, i, pv);\n        if (deg[v] == 2) pv.pop_back();\n        if (low[v] < low[u]) {\n          low[u] = low[v];\n          absorb(pu, u);\n          pu = pv;\n        } else absorb(pv, u);\n      } else {\n        if (dfn[v] > dfn[u]) {\n          absorb(pu, u, v);\n          deg[u] -= 2;\n        } else if (dfn[v] < low[u]) {\n          low[u] = dfn[v];\n          absorb(pu, u);\n        }\n      }\n    }\n    end[u] = dfc;\n    pu.push_back(u);\n  }\n\npublic:\n  void init() {\n    memset(dfn, 0, sizeof dfn);\n    memset(deg, 0, sizeof deg);\n    dfc = 0;\n    bcc.init();\n    for (int i = 1; i <= N; ++i) {\n      if (dfn[i] == 0) {\n        std::vector<int> pi;\n        dfs(i, 0, pi);\n      }\n    }\n  }\n\n  std::vector< std::vector<int> > getall() {\n    std::vector< std::vector<int> > res(N), ans;\n    for (int i = 1; i <= N; ++i) {\n      int x = uf.find(i);\n      res[x - 1].push_back(i);\n    }\n    for (int i = 0; i < N; ++i)\n      if (res[i].empty() == false) ans.push_back(res[i]);\n    return ans;\n  }\n};\n\nvoid init() {\n  scanf(\"%d %d\", &N, &M);\n  for (int i = 1; i <= M; ++i) {\n    int u, v;\n    scanf(\"%d %d\", &u, &v);\n    Gr.addEdge(u, v);\n    Gr.addEdge(v, u);\n  }\n}\n\ninline bool cmp(const std::vector<int> &x, const std::vector<int> &y) { return x[0] < y[0]; }\n\nvoid solve() {\n  static three_edge_connect tcc;\n  tcc.init();\n  std::vector< std::vector<int> > ans = tcc.getall();\n  for (int i = 0; i < (int) ans.size(); ++i)\n    std::sort(ans[i].begin(), ans[i].end());\n  std::sort(ans.begin(), ans.end(), cmp);\n  printf(\"%d\\n\", (int) ans.size());\n  for (int i = 0; i < (int) ans.size(); ++i) {\n    int s = (int) ans[i].size();\n    for (int j = 0; j < s; ++j)\n      printf(\"%d%c\", ans[i][j], \" \\n\"[j == s - 1]);\n  }\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n\n```\n",
        "postTime": 1592465885,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u8fb9\u4e09\u8fde\u901a\u5206\u91cf\u7b97\u6cd5"
    }
]