[
    {
        "content": "\u4e00\u770b\u4efb\u52a1\u8ddf\u8f93\u5165\u5c31\u53ef\u4ee5\u8ba4\u5b9a\u662f\u4e2a\u6570\u636e\u7ed3\u6784\u9898\n\n\u518d\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c\u5c31\u53ef\u4ee5\u731c\u5230\u5927\u6982\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5f97\u5206\u6790\u9898\u76ee\u6765\u786e\u5b9a\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u4ec0\u4e48\u3001\u600e\u4e48\u7ef4\u62a4\u4e86\n\n\u9996\u5148\u6211\u4eec\u8981\u786e\u5b9a\u4e00\u4e2a\u56db\u9762\u4f53\uff0c\u6211\u4eec\u80fd\u7528\u54ea\u4e9b\u4fe1\u606f\u6765\u63cf\u8ff0\u5b83\n\n\u6700\u91cd\u8981\u7684\u4fe1\u606f\u5c31\u5e94\u8be5\u662f A \u9762\u7684\u4f4d\u7f6e\u4e86\n\n\u6211\u4eec\u8981\u8bb0\u5f55\u56db\u9762\u4f53\u5411\u524d\u7684\u65b9\u5411\u5417\uff1f\u5b9e\u9645\u4e0a\u662f\u4e0d\u9700\u8981\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u4e00\u4e2a\u56db\u9762\u4f53\u7ffb\u8f6c\u5b8c\u4e86\u4e4b\u540e\uff0c\u7acb\u5373\u53c8\u628a\u6539\u53d8\u4e86\u65b9\u5411\u7684\u201c\u5411\u524d\u65b9\u5411\u201d\u5bf9\u51c6\u4e86\u671d\u5317\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e48\u505a\u662f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\n\n\u56db\u9762\u4f53\u6709\u56db\u4e2a\u9762\uff0c\u4e09\u7ef4\u7684\u4e0d\u597d\u8003\u8651\uff0c\u6211\u4eec\u628a\u5b83\u201c\u964d\u7ef4\u6253\u51fb\u201d\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5beejjg7.png)\n\n\u7bad\u5934\u65b9\u5411\u5c31\u662f\u201c\u5411\u524d\u65b9\u5411\u201d\n\n\u4e2d\u95f4\u7684\u4e09\u89d2\u5f62\u4e3a\u4e09\u9762\u4f53\u4e0e\u5730\u9762\u63a5\u89e6\u7684\u4e00\u9762\n\nA \u53ef\u4ee5\u653e\u7f6e\u5728\u56db\u4e2a\u9762\u7684\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u90a3\u4e48\u56db\u9762\u4f53\u5c31\u6709\u56db\u79cd\u72b6\u6001\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2rtm7p2k.png)\n\n\u4e0b\u9762\u7684\u7ea2\u5b57\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\u7684\u7f16\u53f7\n\n\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\u8fdb\u884c L R B \u64cd\u4f5c\u4f1a\u5f97\u5230\u5982\u4e0b\u8868\u683c\n\n| \u7ffb\u8f6c | 0 | 1 | 2 | 3 |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| L | 3 | 0 | 2 | 1 |\n| R | 3 | 1 | 0 | 2 |\n| B | 3 | 2 | 1 | 0 |\n\n[ \u8fc7\u7a0b\u6bd4\u8f83\u7e41\u7410\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u63a8\u5bfc ]\n\n\u8fd9\u662f\u8fdb\u884c\u4e00\u6b21\u7ffb\u8f6c\u64cd\u4f5c\u83b7\u5f97\u7684\u6700\u7ec8\u72b6\u6001\u7684\u8868\u683c\n\n\u4e0d\u7528\u627e\u89c4\u5f8b\uff0c\u56e0\u4e3a\u627e\u5230\u4e86\u4e5f\u6ca1\u5565\u7528~~\u6ca1\u6709\u4ea4\u6362\u5f8b~~\n\n\u5bf9\u4e8e\u6ca1\u6709\u4ea4\u6362\u5f8b\u7684\u8fd0\u7b97\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5904\u7406\u51fa\u6bcf\u4e2a\u72b6\u6001\u7ecf\u8fc7\u65f6\u95f4 $ [L,R] $ \u6240\u6709\u64cd\u4f5c\u83b7\u5f97\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\u83b7\u5f97 $ f_{L,R}(x) $\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u7b26\u5408\u7ed3\u5408\u5f8b\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u5408\u5e76 $ [L,mid],[mid+1,R] $ \u4ece\u800c\u5f97\u5230 $ [L,R] $ \u7684\u7ed3\u679c\n\n\u4e5f\u5c31\u662f\u6ee1\u8db3\u5982\u4e0b\u516c\u5f0f\n\n$ f_{L,R}(x)=f_{mid+1,R}(ope_{mid}(f_{L,mid}(x))) $\n\n\u72b6\u6001\u5904\u7406\u597d\u4e86\uff0c\u90a3 A \u5b57\u9762\u671d\u4e0b\u7684\u6b21\u6570\u600e\u4e48\u7edf\u8ba1\u5462\uff1f\n\n\u7528\u51fd\u6570 $ sum_{L,R}(x) $ \u8868\u793a\u72b6\u6001 x \u7ecf\u8fc7 $ [L,R] $ \u6240\u6709\u64cd\u4f5c\u65f6 A \u5b57\u9762\u671d\u4e0b\u7684\u6b21\u6570\uff0c\u4e5f\u5c31\u662f\u5f97\u5230\u72b6\u6001 0 \u7684\u6b21\u6570\n\n\u540c\u6837\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u90a3\u4e48\u6700\u7ec8\uff0c\u6211\u4eec\u53ea\u8981\u5148\u7b97\u51fa $ beg=f_{1,L}(0) $ \u518d\u4ee3\u5165\u5f97\u51fa $ sum_{L,R}(beg) $ \u5c31\u884c\u4e86\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define mid ((L+R)>>1)\n#define Lson (now<<1)\n#define Rson (now<<1|1)\nusing namespace std;\n\nconst int MAXN=6e4;\nconst int MAXM=15e4;\n\nstruct SegTree\n{\n\tint f[4];\n\tint sum[4];\n\tvoid Clean()\n\t{\n\t\tfor(int i=0;i<4;i++) f[i]=i;\n\t\tsum[0]=1;\n\t\tfor(int i=1;i<4;i++) sum[i]=0;\n\t}\n}node[(MAXN<<2)+5];\n\nint n,m;\nint A[MAXN+5];\nint mapn[4][3];\n\nint Code(char x)\n{\n\tif(x=='L') return 0;\n\tif(x=='R') return 1;\n\treturn 2;\n}\n\nSegTree PushUp(SegTree a,int x,SegTree b)\n{\n\tSegTree cnt;cnt.Clean();\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tcnt.f[i]=b.f[mapn[a.f[i]][A[x]]];\n\t\tcnt.sum[i]=a.sum[i]+b.sum[mapn[a.f[i]][A[x]]];\n\t}\n\treturn cnt;\n}\n\nvoid Build(int now,int L,int R)\n{\n\tif(L==R)\n\t{\n\t\tnode[now].Clean();\n\t\treturn;\n\t}\n\tBuild(Lson,L    ,mid);\n\tBuild(Rson,mid+1,R  );\n\tnode[now]=PushUp(node[Lson],mid,node[Rson]);\n}\n\nvoid Change(int now,int L,int R,int x)\n{\n\tif(L==R) return;\n\tif(x<=mid) Change(Lson,L,mid,x);\n\telse Change(Rson,mid+1,R,x);\n\tnode[now]=PushUp(node[Lson],mid,node[Rson]);\n}\n\nvoid Assis(int x,int v)\n{\n\tA[x]=v;\n\tChange(1,1,n+1,x);\n}\n\nSegTree Ask(int now,int L,int R,int QL,int QR)\n{\n\tif(QL<=L && R<=QR) return node[now];\n\tif(QL<=mid && mid<QR) return PushUp(Ask(Lson,L,mid,QL,mid),mid,Ask(Rson,mid+1,R,mid+1,QR));\n\tif(QR<=mid) return Ask(Lson,L,mid,QL,QR);\n\treturn Ask(Rson,mid+1,R,QL,QR);\n}\n\nint main()\n{\n\tmapn[0][0]=mapn[0][1]=mapn[0][2]=3;\n\tmapn[1][1]=mapn[2][2]=mapn[3][0]=1;\n\tmapn[1][2]=mapn[2][0]=mapn[3][1]=2;\n\tscanf(\"%d\",&n);\n\tchar c;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>c;\n\t\tA[i]=Code(c);\n\t}\n\tBuild(1,1,n+1);\n\tscanf(\"%d\",&m);\n\tbool t;\n\tfor(int L,R,beg;m--;)\n\t{\n\t\tcin>>t;\n\t\tif(t)\n\t\t{\n\t\t\tscanf(\"%d %d\",&L,&R);\n\t\t\tbeg=Ask(1,1,n+1,1,L).f[0];\n\t\t\tprintf(\"%d\\n\",Ask(1,1,n+1,L,R).sum[beg]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&L);\n\t\t\tcin>>c;\n\t\t\tAssis(L,Code(c));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1594025087,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4627 \u3010[SHOI2010]\u6eda\u52a8\u7684\u6b63\u56db\u9762\u4f53\u3011"
    }
]