[
    {
        "content": "# \u3010POI2001\u3011Goldmine\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P8370)\n\n\u626b\u63cf\u7ebf\u677f\u5b50\u9898\uff0c\u672c\u8d28\u4e0a\u8fd9\u4e2a\u9898\u8ddf[\u7a97\u53e3\u7684\u661f\u661f](https://www.luogu.com.cn/problem/P1502)\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u628a\u6743\u503c $k$ \u90fd\u6362\u6210 $1$ \u5c31\u884c\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u53e5\u8bdd\uff1a\n\n`\uff08\u82e5\u77ff\u77f3\u4f4d\u4e8e\u8fd9\u5757\u5730\u7684\u8fb9\u7f18\uff0c\u6211\u4eec\u540c\u6837\u8ba4\u4e3a\u4ed6\u662f\u5c5e\u4e8e\u8fd9\u4e2a\u533a\u57df\u7684\uff09`\n\n\u56e0\u6b64\u6211\u4eec\u5728\u5904\u7406\u77e9\u5f62\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u7f29\u5c0f\u7684\u64cd\u4f5c\u3002\u5269\u4e0b\u7684\u5c31\u90fd\u4e00\u6837\u4e86\uff0c\u8fd9\u4e2a\u9898 $x$ \u548c $y$ \u7684\u8303\u56f4\u5230\u8d1f\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u7136\u540e\u5c06\u6bcf\u4e2a\u201c\u91d1\u77ff\u201d\u8f6c\u5316\u6210\u77e9\u5f62\uff0c\u6392\u5e8f\u6a2a\u5750\u6807\uff0c\u5bf9\u7eb5\u5750\u6807\u5efa\u7acb\u626b\u63cf\u7ebf\u3002\n\n\u8fd9\u8fb9\u9898\u89e3\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u662f\u626b\u63cf\u7ebf\u4f7f\u7528\u5206\u5757\u7ef4\u62a4\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u5305\u62ec\u533a\u95f4\u52a0\u548c\u533a\u95f4\u6700\u5927\u503c\uff0c\u5206\u5757\u540c\u6837\u53ef\u4ee5\u505a\u5230\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u7528\u7ebf\u6bb5\u6811\u3002\u7ef4\u62a4\u6574\u5757 $tag$ \u52a0\u6cd5\u6807\u8bb0\uff0c\u539f\u59cb\u5e8f\u5217 $c$ \u548c\u6574\u5757 $maxx$ \u6570\u7ec4\uff0c\u5728\u6574\u5757\u76f4\u63a5\u53d6 $maxx$ \u4e2d\u7684\u503c\uff0c\u6563\u5757\u66b4\u529b\u627e\u5373\u53ef\u3002\n\n~~\u5927\u5e38\u6570\u9009\u624b\u8dd1\u5f97\u5947\u6162\u65e0\u6bd4\uff0c\u559c\u63d0\u6700\u52a3\u89e3\u3002~~\n\n$Code$\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MAX 100010\nusing namespace std;\n\ninline int read()\n{\n\tint s=0,w=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)) {if(c=='-') w=-1;c=getchar();}\n\twhile(isdigit(c)) s=(s<<1)+(s<<3)+(c^48),c=getchar();\n\treturn s*w;\n}\n\nint n,w,h;\nint ans,cnt;\n\nstruct scanline\n{\n\tint x,yup,ydown,k;\n}a[MAX<<1];\ninline bool cmp(scanline a,scanline b)\n{\n\tif (a.x!=b.x) return a.x<b.x;\n\telse return a.k>b.k;\n}\n\nint d[MAX<<1];\nint x,y;\ninline void discrete()\n{\n\tw=read(),h=read();\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tx=read(),y=read();\n\t\ta[++cnt].x=x,a[cnt].yup=y+h,a[cnt].ydown=y,a[cnt].k=1; d[cnt]=y;\n\t\ta[++cnt].x=x+w,a[cnt].yup=y+h,a[cnt].ydown=y,a[cnt].k=-1; d[cnt]=y+h;\n\t}\n\tsort(d+1,d+cnt+1);\n\tcnt=unique(d+1,d+cnt+1)-d-1;\n\tn<<=1;\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++)\n\t\ta[i].yup=lower_bound(d+1,d+cnt+1,a[i].yup)-d,\n\t\ta[i].ydown=lower_bound(d+1,d+cnt+1,a[i].ydown)-d;\n\treturn;\n}\n\nint blo,bn;\nint l[MAX],r[MAX],pos[MAX],c[MAX],tag[MAX],maxx[MAX];\ninline void block()\n{\n\tblo=sqrt(cnt),bn=(cnt-1)/blo+1;\n\tfor(int i=1;i<=bn;i++)\n\t\tl[i]=(i-1)*blo+1,r[i]=blo*i;\n\tr[bn]=cnt;\n\tfor(int i=1;i<=bn;i++)\n\t\tfor(int j=l[i];j<=r[i];j++)\n\t\t\tpos[j]=i;\n\treturn;\n}\ninline void check(int x)\n{\n\tmaxx[x]=0;\n\tfor(int i=l[x];i<=r[x];i++)\n\t\tmaxx[x]=max(maxx[x],c[i]);\n\treturn;\n}\ninline void add(int L,int R,int k)\n{\n\tint p=pos[L],q=pos[R];\n\tif(p==q)\n\t{\n\t\tfor(int i=L;i<=R;i++)\n\t\t\tc[i]+=k,maxx[p]=max(maxx[p],c[i]);\t\t\n\t\tif(k==-1) check(p);\n\t}\n\telse\n\t{\n\t\tfor(int i=p+1;i<=q-1;i++)\n\t\t\ttag[i]+=k;\n\t\tfor(int i=L;i<=r[p];i++)\n\t\t\tc[i]+=k,maxx[p]=max(maxx[p],c[i]);\n\t\tif(k==-1) check(p);\n\t\tfor(int i=l[q];i<=R;i++)\n\t\t\tc[i]+=k,maxx[q]=max(maxx[q],c[i]);\n\t\tif(k==-1) check(q);\n\t}\n\treturn;\n}\ninline int getmax(int L,int R)\n{\n\tint p=pos[L],q=pos[R],anss=0;\n\tif(p==q)\n\t{\n\t\tfor(int i=L;i<=R;i++)\n\t\t\tanss=max(anss,c[i]+tag[q]);\n\t}\n\telse\n\t{\n\t\tfor(int i=p+1;i<=q-1;i++)\n\t\t\tanss=max(anss,maxx[i]+tag[i]);\n\t\tfor(int i=L;i<=r[p];i++)\n\t\t\tanss=max(anss,c[i]+tag[p]);\n\t\tfor(int i=l[q];i<=R;i++)\n\t\t\tanss=max(anss,c[i]+tag[q]);\n\t}\n\treturn anss;\n}\n\nsigned main()\n{\n\tdiscrete();\n\tblock();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(a[i].ydown,a[i].yup,a[i].k);\n\t\tans=max(ans,getmax(1,cnt));\n\t}\n\tcout<<ans<<endl;\n\treturn (0-0);\n}\n```",
        "postTime": 1660554723,
        "uid": 739297,
        "name": "forqprever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\uff1a\u3010POI2001\u3011Goldmine"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5f88\u8003\u601d\u7ef4\u7684\u8f6c\u6362\u3002\n\n\u9700\u8981\u8003\u8651\u5982\u4f55\u5c06\u5e73\u9762\u8f6c\u6362\u4e3a\u7ebf\u6bb5\uff0c\u4ece\u800c\u4f7f\u7528\u7ebf\u6bb5\u6811\uff1f\n\n\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u4e0d\u8bb2\u4e86\uff0c\u53ef\u4ee5\u53bb\u7f51\u4e0a\u641c\uff0c\u518d\u505a\u505a\u6a21\u677f\u9898\u3002[\u677f\u5b50](https://whitesails.blog.luogu.org/mu-ban-xian-duan-shu)\n\n---\n\n\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\n\u679a\u4e3e $x$ \u8f74\uff0c\u7c7b\u4f3c\u56fa\u5b9a\u957f\u5ea6\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u5de6\u70b9\u662f $i$\uff0c\u53f3\u70b9\u5219\u662f $i+s$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/kq4j0tox.png)\n\n\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u9ad8\u5ea6\uff0c\u5c06\u8fd9\u4e2a\u56fe\u5316\u4e3a\u4e00\u7ef4\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/319uz4g3.png)\n\n\u8fd9\u4e2a\u7a97\u53e3\uff08$i$ \u4e0b\u6807\uff09\u4ece $-30000$ \u5f00\u59cb\u79fb\u52a8\uff0c\u79fb\u52a8\u5230 $30000-s$ \n\n\u6211\u4eec\u53ea\u9700\u8981\u770b\u7684\u662f\u7a97\u53e3\u5185\u7684\u70b9\u6570\uff0c\u5219\u5fc5\u7136\u4f1a\u6709\u53bb\u9664\u548c\u52a0\u5165\u7684\u64cd\u4f5c\u3002\u53bb\u9664\u548c\u52a0\u5165\u7684\u64cd\u4f5c\u4e5f\u9700\u8981\u5de6\u53f3\u53d8\u91cf\u6765\u5b9e\u73b0\u3002\n\n\u8fd9\u6837\u679a\u4e3e\u5b8c\uff0c\u53ea\u9700\u8981\u7b97\u6bcf\u4e00\u6b21 $i+1$ \u66f4\u65b0\u4e4b\u540e\u8986\u76d6\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\uff01\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u533a\u95f4\u7684\u8986\u76d6\u6700\u5927\u503c\u600e\u4e48\u7b97\u5462\uff1f\u90a3\u5f88\u663e\u7136\uff0c\u7528\u7ebf\u6bb5\u6811\u561b\u3002\n\n\u8fd9\u4e2a\u6811\uff0c\u5219\u9700\u8981\u5efa\u5728 $y$ \u8f74\u4e0a\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gjanx0yr.png)\n\n\u56fe\u4e2d\u4e24\u6761\u84dd\u8272\u7ad6\u7ebf\u5373\u7ebf\u6bb5\u6811\u7684\u6709\u6548\u4fdd\u7559\u4f4d\u7f6e\u3002\u5728\u84dd\u8272\u533a\u95f4\u5185\u7684\u8fd9\u4e9b\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684 $y$ \u5230 $y+w$ \u90fd\u662f\u6709\u6548\u8986\u76d6\u8303\u56f4\uff0c\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u7ebf\u6bb5\u5728\u7ebf\u6bb5\u6811\u4e0a \u52a0\u4e00\u3002\u7136\u540e\u6211\u5708\u8d77\u6765\u7684\u90a3\u6761\u7ebf\u6bb5\uff0c\u5df2\u7ecf\u4e0d\u5728\u84dd\u8272\u533a\u95f4\u5185\uff0c\u6240\u4ee5\u9700\u8981\u53bb\u9664\uff0c\u5219\u5728\u7ebf\u6bb5\u6811\u4e0a\u628a\u90a3\u6761\u7ebf\u6bb5 \u51cf\u4e00\uff01\u8fd9\u79cd\u533a\u95f4\u4fee\u6539\uff0c\u9700\u8981\u61d2\u64cd\u4f5c\u3002\u4e0d\u4f1a\u7684\u8981\u5b66\u5b66\u3002\n\n\u4ee5\u4e0a\u7684\u64cd\u4f5c\u79f0\u4e3a\u4e00\u6b21\u66f4\u65b0\u5427\uff0c\u4e00\u6b21\u66f4\u65b0\u4f1a\u51fa\u73b0\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u6bcf\u4e00\u6b21\u66f4\u65b0\u6700\u540e\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u6700\u5927\u8986\u76d6\u6570\uff01\u56e0\u4e3a\u6709\u91cd\u53e0\u7684\u7ebf\u6bb5\u4f1a\u91cd\u590d\u8986\u76d6\uff0c\u6bd4\u5982\u4e24\u6761\u7ebf\u6bb5\u6709\u4e00\u4e2a\u8986\u76d6\u90e8\u5206\uff0c\u90a3\u4e48\u8fd9\u4e24\u6761\u7ebf\u6bb5\u7684\u6700\u5927\u503c\u90fd\u662f 2\u3002\u55ef\u5927\u6982\u5c31\u662f\u8fd9\u4e2a\u610f\u601d\uff08\u89e3\u91ca\u4e0d\u6e05\u695a\uff0c\u9003\uff09\n\n\u8fd9\u9053\u9898\u4e0d\u9700\u8981\u79bb\u6563\u5316\uff0c\u5982\u679c\u6570\u636e\u91cf\u8db3\u591f\u5927\uff0c\u6bd4\u5982P1502\uff0c\u5c31\u9700\u8981\u79bb\u6563\u5316\u7f29\u5c0f\u7a7a\u95f4\u3002\n\n\u4ee3\u7801\u5c31\u6765\u4e86\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n#define MAXN 60000\n#define LL long long\nconst int Delta = 30001;\n\nstruct Tree\n{\n    int l, r;\n    LL maxv;\n    LL tag;\n};\nTree tree[4 * MAXN];\npair<int, int> a[15000];\nint s, w, n;\nvoid build(int p, int l, int r)\n{\n    tree[p].l = l;\n    tree[p].r = r;\n    tree[p].tag = 0;\n    if (l == r)\n    {\n        tree[p].maxv = 0;\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(2 * p, l, mid);\n    build(2 * p + 1, mid + 1, r);\n    tree[p].maxv = max(tree[2 * p].maxv, tree[2 * p + 1].maxv);\n}\nvoid pushdown(int p)\n{\n    int l = 2 * p, r = 2 * p + 1;\n    if (tree[p].tag != 0)\n    {\n        tree[l].tag += tree[p].tag;\n        tree[l].maxv += tree[p].tag;\n        tree[r].tag += tree[p].tag;\n        tree[r].maxv += tree[p].tag;\n        tree[p].tag = 0;\n    }\n}\nvoid update(int p, int l, int r, LL v)\n{\n    if (l <= tree[p].l && tree[p].r <= r)\n    {\n        tree[p].tag += v;\n        tree[p].maxv += v;\n        return;\n    }\n    pushdown(p);\n    int mid = (tree[p].l + tree[p].r) / 2;\n    if (l <= mid)\n        update(2 * p, l, r, v);\n    if (r >= mid + 1)\n        update(2 * p + 1, l, r, v);\n    tree[p].maxv = max(tree[2 * p].maxv, tree[2 * p + 1].maxv);\n}\nLL ask(int p, int l, int r)\n{\n    if (l <= tree[p].l && tree[p].r <= r)\n        return tree[p].maxv;\n    pushdown(p);\n    int mid = (tree[p].l + tree[p].r) / 2;\n    LL ret = 0;\n    if (l <= mid)\n        ret = max(ret, ask(2 * p, l, r));\n    if (r >= mid + 1)\n        ret = max(ret, ask(2 * p + 1, l, r));\n    return ret;\n}\nint main()\n{\n    cin >> s >> w;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        cin >> a[i].first >> a[i].second;\n    }\n    build(1, -30000 + Delta, 30000 + Delta);\n    sort(a, a + n, cmp); // sorting of pair array is accord '.first' from small to big\n    int l = 0, r = -1;\n    int ans = 0;\n    for (int x = -30000; x <= 30000; x++)\n    {\n        int xx = x + s;\n        while (l < n && a[l].first < x)\n        {\n            update(1, a[l].second + Delta, a[l].second + w + Delta, -1);\n            l++;\n        }\n        while (r + 1 < n && a[r + 1].first <= xx)\n        {\n            update(1, a[r + 1].second + Delta, a[r + 1].second + w + Delta, 1);\n            r++;\n        }\n        int tmp = tree[1].maxv;\n        ans = max(ans, tmp);\n        // cout << \"ok\" << x << \" \";\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1658819475,
        "uid": 285414,
        "name": "Swiftie_wyc22",
        "ccfLevel": 5,
        "title": "P8370 \u9898\u89e3 \uff08\u5df2\u7ecf\u662f\u6211\u7684\u753b\u56fe\u6c34\u5e73\u5dc5\u5cf0\u4e86\uff09"
    },
    {
        "content": "# \u9898\u610f\n\u5e73\u9762\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u7ed9\u51fa\u4e00\u4e2a\u77e9\u5f62\uff0c\u95ee\u6700\u591a\u80fd\u8986\u76d6\u591a\u5c11\u4e2a\u70b9\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u9898\u6d1b\u8c37\u4e0a\u6709\u4e2a\u5dee\u4e0d\u591a\u7684\uff1a [\u7a97\u53e3\u7684\u661f\u661f](https://www.luogu.com.cn/problem/P1502)\uff0c\u4f46\u6211\u8fd8\u662f\u539a\u989c\u65e0\u803b\u7684\u5199\u4e86\u9898\u89e3\u3002\n\n# \u601d\u8def\n\u548c\u90a3\u4e2a\u9898\u4e00\u6837\uff0c\u4f7f\u7528\u626b\u63cf\u7ebf\u6765\u505a\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u91d1\u77ff\u7406\u89e3\u4e3a\u4e00\u4e2a\u957f\u4e3a $s $ \uff0c\u5bbd\u4e3a $w$ ,\u5de6\u4e0b\u89d2\u4e3a\u91d1\u77ff\u6240\u5728\u70b9\u7684\u77e9\u5f62\uff0c\u90a3\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u5e73\u9762\u4e0a\u77e9\u5f62\u5806\u53e0\u6700\u591a\u7684\u5c42\u6570\u662f\u591a\u5c11\uff0c\u7136\u540e\u5c31\u662f\u7ecf\u5178\u626b\u63cf\u7ebf\u95ee\u9898\u4e86\uff0c\u5982\u679c\u4e0d\u4f1a\u53ef\u4ee5\u53bb\u90a3\u4e2a\u9898\u9898\u89e3\u53bb\u5b66\u4e60\u3002\n\n\u6211\u4eec\u5c06\u4e00\u4e2a\u77e9\u5f62\u62c6\u4e3a\u4e24\u6761\u7ebf\u6bb5\uff0c\u5206\u522b\u5bf9\u5e94\u77e9\u5f62\u7684\u4e0b\u8fb9\u548c\u4e0a\u8fb9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u6761\u626b\u63cf\u7ebf\uff0c\u4ece\u4e0b\u5411\u4e0a\u626b\u63cf\uff0c\u9047\u5230\u4e00\u6761\u4e0b\u8fb9\uff0c\u6211\u4eec\u5c31\u5c06\u4e0b\u8fb9\u5bf9\u5e94\u7684\u533a\u95f4\u6574\u4f53\u52a0\u4e00\uff0c\u8868\u793a\u73b0\u5728\u8fd9\u91cc\u6709\u4e00\u5c42\u77e9\u5f62\u8986\u76d6\uff1b\u800c\u9047\u5230\u4e86\u4e0a\u8fb9\uff0c\u5c31\u6574\u4f53\u51cf\u4e00\uff0c\u8868\u793a\u5f53\u524d\u77e9\u5f62\u5df2\u7ecf\u4e0d\u80fd\u8986\u76d6\u5230\u8fd9\u4e9b\u70b9\u4e86\uff0c\u800c\u7ebf\u6bb5\u6811\u91cc\u9762\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\uff0c\u8868\u793a\u626b\u63cf\u7ebf\u4e0a\u6700\u591a\u7684\u8986\u76d6\u5c42\u6570\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u53d6\u6700\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n# \u4ee3\u7801\n\n\u6bd4\u8f83\u4e11\uff0c\u51d1\u5408\u7740\u770b\u770b\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define lsh(x) (lower_bound(d.begin(),d.end(),x)-d.begin())\ntypedef long long ll;\nconst int MAXN=1e6+10;\nll mmax[MAXN],add[MAXN];\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define mid ((l+r)>>1)\nvoid bt(int p,int l,int r)\n{\n\tmmax[p]=add[p]=0;\n\tif(l==r)return;\n\tbt(ls,l,mid),bt(rs,mid+1,r);\n}\ninline void push_up(int p){mmax[p]=max(mmax[ls],mmax[rs]);}\ninline void ADD(int p,ll k){mmax[p]+=k,add[p]+=k;}\ninline void push_down(int p){if(add[p])ADD(ls,add[p]),ADD(rs,add[p]),add[p]=0;}\ninline void update(int p,int ql,int qr,int l,int r,ll k)\n{\n\tif(ql<=l&&r<=qr)return ADD(p,k);\n\tpush_down(p);\n\tif(ql<=mid)update(ls,ql,qr,l,mid,k);\n\tif(qr>mid)update(rs,ql,qr,mid+1,r,k);\n\tpush_up(p);\n}\nstruct node{int x,l,r,w;};\ninline bool operator<(const node& a,const node& b){return a.x<b.x||a.x==b.x&&a.w>b.w;}\nsigned main()\n{\n\tios::sync_with_stdio(0),cin.tie(0);\n\tint n,w,h,x,y,l;cin>>w>>h>>n;\n\tvector<int>d;vector<node>v;d.push_back(0);\n\tfor(int i=1;i<=n;i++)cin>>x>>y,\n\td.push_back(y),d.push_back(y+h),v.push_back((node){x,y,y+h,1}),v.push_back((node){x+w,y,y+h,-1});\n\tsort(d.begin(),d.end()),d.erase(unique(d.begin(),d.end()),d.end());\n\tll ans=0;bt(1,1,n*2);sort(v.begin(),v.end());\n\tfor(const node& p:v)update(1,lsh(p.l),lsh(p.r),1,n<<1,p.w),ans=max(ans,mmax[1]);\n\tcout<<ans<<'\\n';\n\treturn 0;\n}\n```\n",
        "postTime": 1655712696,
        "uid": 571229,
        "name": "__stick",
        "ccfLevel": 7,
        "title": "solution"
    }
]