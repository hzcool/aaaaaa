[
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u6a21\u677f\u9898\u8fd9\u9898\u592a\u8650\u5fc3\u4e86\uff0c\u7136\u800c\u4e0d\u5f97\u4e0d\u627f\u8ba4\u786e\u5b9e\u5728\u505a\u5b8c\u4e4b\u540e\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u638c\u63e1\u7684\u6df1\u5165\u4e86\u5f88\u591a\u3002\n\n\n\u9996\u5148\u5148\u8bf4\u660e\u672c\u9898\u7684\u601d\u8def\u3002\u9898\u76ee\u8981\u6c42\u6709\u4e09\u79cd\u64cd\u4f5c\uff0c\u4e24\u79cd\u662f\u4e0d\u540c\u7684\u5728\u7ebf\u4fee\u6539\uff0c\u8fd8\u6709\u4e00\u79cd\u662f\u5728\u67e5\u8be2\u53d6\u6a21\u540e\u7684\u7ed3\u679c\u3002\u800c\u8fd9\u4e24\u79cd\u64cd\u4f5c\u53c8\u662f\u533a\u95f4\u4e58\u6cd5\u548c\u533a\u95f4\u52a0\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u60ca\u559c\u7684\u53d1\u73b0\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5bf9\u4e8e\u53d6\u6a21\u8fd0\u7b97\u6765\u8bf4\u90fd\u662f\u81ea\u7531\u7684\uff01\u4f46\u662f\u9762\u5bf9\u975e\u5e38\u5927\u7684\u6570\u636e\uff0c\u6211\u4eec\u5fc5\u987b\u601d\u8003\u600e\u4e48\u6837\u7528\u7ebf\u6bb5\u6811\u4f18\u96c5\u7684\u8dd1\u8fc7\u8fd9\u9053\u9898\u76ee\u3002\n\n\n\u9762\u5bf9\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8054\u60f3\u5230\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u529f\u80fd\u5c31\u662flazytag\uff0c\u53ea\u8ba1\u7b97\u51fa\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u7684\u533a\u95f4\u7684\u771f\u5b9e\u503c\uff0c\u5176\u4ed6\u7684\u4fdd\u5b58\u5728lazytag\u91cc\u9762\uff0c\u8fd9\u6837\u53ef\u4ee5\u8fd1\u4f3cO(NlogN)\u7684\u8fd0\u884c\u8d77\u6765\u3002\u5728\u5c1d\u8bd5\u7740\u5199\u4e86\u53ea\u6709\u4e00\u4e2alazetag\u7684\u7a0b\u5e8f\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\u4e00\u4e2alazytag\u662f\u4e0d\u80fd\u591f\u89e3\u51b3\u95ee\u9898\u7684\uff0c\u90a3\u5c31\u4e0a\u4e24\u4e2a\uff0c\u5206\u522b\u8868\u793a\u4e58\u6cd5\u610f\u4e49\u4e0a\u7684lazytag\u548c\u52a0\u6cd5\u610f\u4e49\u4e0a\u7684lazytag\u3002\u7d27\u63a5\u7740\u60f3\u5230pushdown\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u53c8\u53d1\u73b0\u5fc5\u987b\u5728\u5411\u4e0b\u4f20\u9012lazytag\u7684\u65f6\u5019\u4eba\u4e3a\u5730\u4e3a\u8fd9\u4e24\u4e2alazytag\u89c4\u5b9a\u4e00\u4e2a\u5148\u540e\u987a\u5e8f\uff0c\u6392\u5217\u7ec4\u5408\u4e00\u4e0b\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\n\u2460\u52a0\u6cd5\u4f18\u5148\uff0c\u5373\u89c4\u5b9a\u597dsegtree[root\\*2].value=((segtree[root\\*2].value+segtree[root].add)\\*segtree[root].mul)%p\uff0c\u95ee\u9898\u662f\u8fd9\u6837\u7684\u8bdd\u975e\u5e38\u4e0d\u5bb9\u6613\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5047\u5982\u6539\u53d8\u4e00\u4e0badd\u7684\u6570\u503c\uff0cmul\u4e5f\u8981\u8054\u52a8\u53d8\u6210\u5947\u5947\u602a\u602a\u7684\u5206\u6570\u5c0f\u6570\u635f\u5931\u7cbe\u5ea6\uff0c\u6211\u4eec\u5185\u5fc3\u662f\u5f88\u62d2\u7edd\u7684\uff1b\n\n\n\u2461\u4e58\u6cd5\u4f18\u5148\uff0c\u5373\u89c4\u5b9a\u597dsegtree[root\\*2].value=(segtree[root\\*2].value\\*segtree[root].mul+segtree[root].add\\*(\u672c\u533a\u95f4\u957f\u5ea6))%p\uff0c\u8fd9\u6837\u7684\u8bdd\u5047\u5982\u6539\u53d8add\u7684\u6570\u503c\u5c31\u53ea\u6539\u53d8add\uff0c\u6539\u53d8mul\u7684\u65f6\u5019\u628aadd\u4e5f\u5bf9\u5e94\u7684\u4e58\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u7cbe\u5ea6\u635f\u5931\uff0c\u770b\u8d77\u6765\u5f88\u4e0d\u9519\u3002\n\n\n\u63a5\u7740\u8d34\u4e0a\u8be6\u7ec6\u6ce8\u91ca\u7248\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\n//\u9898\u76ee\u4e2d\u7ed9\u7684p\nint p;\n//\u6682\u5b58\u6570\u5217\u7684\u6570\u7ec4\nlong long a[100007];\n//\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\uff0cv\u8868\u793a\u6b64\u65f6\u7684\u7b54\u6848\uff0cmul\u8868\u793a\u4e58\u6cd5\u610f\u4e49\u4e0a\u7684lazytag\uff0cadd\u662f\u52a0\u6cd5\u610f\u4e49\u4e0a\u7684\nstruct node{\n    long long v, mul, add;\n}st[400007];\n//buildtree\nvoid bt(int root, int l, int r){\n//\u521d\u59cb\u5316lazytag\n    st[root].mul=1;\n    st[root].add=0;\n    if(l==r){\n        st[root].v=a[l];\n    }\n    else{\n        int m=(l+r)/2;\n        bt(root*2, l, m);\n        bt(root*2+1, m+1, r);\n        st[root].v=st[root*2].v+st[root*2+1].v;\n    }\n    st[root].v%=p;\n    return ;\n}\n//\u6838\u5fc3\u4ee3\u7801\uff0c\u7ef4\u62a4lazytag\nvoid pushdown(int root, int l, int r){\n    int m=(l+r)/2;\n//\u6839\u636e\u6211\u4eec\u89c4\u5b9a\u7684\u4f18\u5148\u5ea6\uff0c\u513f\u5b50\u7684\u503c=\u6b64\u523b\u513f\u5b50\u7684\u503c*\u7238\u7238\u7684\u4e58\u6cd5lazytag+\u513f\u5b50\u7684\u533a\u95f4\u957f\u5ea6*\u7238\u7238\u7684\u52a0\u6cd5lazytag\n    st[root*2].v=(st[root*2].v*st[root].mul+st[root].add*(m-l+1))%p;\n    st[root*2+1].v=(st[root*2+1].v*st[root].mul+st[root].add*(r-m))%p;\n//\u5f88\u597d\u7ef4\u62a4\u7684lazytag\n    st[root*2].mul=(st[root*2].mul*st[root].mul)%p;\n    st[root*2+1].mul=(st[root*2+1].mul*st[root].mul)%p;\n    st[root*2].add=(st[root*2].add*st[root].mul+st[root].add)%p;\n    st[root*2+1].add=(st[root*2+1].add*st[root].mul+st[root].add)%p;\n//\u628a\u7236\u8282\u70b9\u7684\u503c\u521d\u59cb\u5316\n    st[root].mul=1;\n    st[root].add=0;\n    return ;\n}\n//update1\uff0c\u4e58\u6cd5\uff0cstdl\u6b64\u523b\u533a\u95f4\u7684\u5de6\u8fb9\uff0cstdr\u6b64\u523b\u533a\u95f4\u7684\u53f3\u8fb9\uff0cl\u7ed9\u51fa\u7684\u5de6\u8fb9\uff0cr\u7ed9\u51fa\u7684\u53f3\u8fb9\nvoid ud1(int root, int stdl, int stdr, int l, int r, long long k){\n//\u5047\u5982\u672c\u533a\u95f4\u548c\u7ed9\u51fa\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\n    if(r<stdl || stdr<l){\n        return ;\n    }\n//\u5047\u5982\u7ed9\u51fa\u7684\u533a\u95f4\u5305\u542b\u672c\u533a\u95f4\n    if(l<=stdl && stdr<=r){\n        st[root].v=(st[root].v*k)%p;\n        st[root].mul=(st[root].mul*k)%p;\n        st[root].add=(st[root].add*k)%p;\n        return ;\n    }\n//\u5047\u5982\u7ed9\u51fa\u7684\u533a\u95f4\u548c\u672c\u533a\u95f4\u6709\u4ea4\u96c6\uff0c\u4f46\u662f\u4e5f\u6709\u4e0d\u4ea4\u53c9\u7684\u90e8\u5206\n//\u5148\u4f20\u9012lazytag\n    pushdown(root, stdl, stdr);\n    int m=(stdl+stdr)/2;\n    ud1(root*2, stdl, m, l, r, k);\n    ud1(root*2+1, m+1, stdr, l, r, k);\n    st[root].v=(st[root*2].v+st[root*2+1].v)%p;\n    return ;\n}\n//update2\uff0c\u52a0\u6cd5\uff0c\u548c\u4e58\u6cd5\u540c\u7406\nvoid ud2(int root, int stdl, int stdr, int l, int r, long long k){\n    if(r<stdl || stdr<l){\n        return ;\n    }\n    if(l<=stdl && stdr<=r){\n        st[root].add=(st[root].add+k)%p;\n        st[root].v=(st[root].v+k*(stdr-stdl+1))%p;\n        return ;\n    }\n    pushdown(root, stdl, stdr);\n    int m=(stdl+stdr)/2;\n    ud2(root*2, stdl, m, l, r, k);\n    ud2(root*2+1, m+1, stdr, l, r, k);\n    st[root].v=(st[root*2].v+st[root*2+1].v)%p;\n    return ;\n}\n//\u8bbf\u95ee\uff0c\u548cupdate\u4e00\u6837\nlong long query(int root, int stdl, int stdr, int l, int r){\n    if(r<stdl || stdr<l){\n        return 0;\n    }\n    if(l<=stdl && stdr<=r){\n        return st[root].v;\n    }\n    pushdown(root, stdl, stdr);\n    int m=(stdl+stdr)/2;\n    return (query(root*2, stdl, m, l, r)+query(root*2+1, m+1, stdr, l, r))%p;\n}\nint main(){\n    int n, m;\n    scanf(\"%d%d%d\", &n, &m, &p);\n    for(int i=1; i<=n; i++){\n        scanf(\"%lld\", &a[i]);\n    }\n    bt(1, 1, n);\n    while(m--){\n        int chk;\n        scanf(\"%d\", &chk);\n        int x, y;\n        long long k;\n        if(chk==1){\n            scanf(\"%d%d%lld\", &x, &y, &k);\n            ud1(1, 1, n, x, y, k);\n        }\n        else if(chk==2){\n            scanf(\"%d%d%lld\", &x, &y, &k);\n            ud2(1, 1, n, x, y, k);\n        }\n        else{\n            scanf(\"%d%d\", &x, &y);\n            printf(\"%lld\\n\", query(1, 1, n, x, y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1511186209,
        "uid": 41707,
        "name": "zhuwanman",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "upd\uff1a9.28 \u8865\u4e86\u4e00\u4e2a\u9505 \u611f\u8c22@\u6708\u79bb\u7684\u63d0\u9192\n\n# **\u8fd9\u7bc7\u9898\u89e3\u80fd\u5e2e\u52a9\u6211\u4ec0\u4e48\uff1f**\n\n\uff11\uff0e\u8fd9\u7bc7\u9898\u89e3\u662f**\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u5148\u4e58\u540e\u52a0**\u7684\uff0c\u5f88\u591a\u4eba\u6284\u5b8c\u9898\u89e3\u5c31\u8d70\u5566\u5e76\u6ca1\u6709\u7406\u89e3\u4e3a\u4ec0\u4e48\u8981\u5148\u4e58\u540e\u52a0\u3002\n\n\uff12\uff0e\u8fd9\u7bc7\u9898\u89e3\u7684\u4ee3\u7801\u4e0e\u7ebf\u6bb5\u6811\uff11\u5341\u5206\u76f8\u50cf\uff0c\u53ef\u4ee5**\u5e2e\u52a9\u5927\u5bb6\u8c03\u8bd5**\u3002\n\n3.(\u9644\u52a0\u529f\u80fd)\u672c\u7bc7\u9898\u89e3\u529b\u6c42\u8f7b\u677e\u5e7d\u9ed8\u8001\u5c11\u7686\u5b9c\u3002\n \n---\n\n## \u524d\u8a00:\n**\u6240\u8c13\u5148\u4e58\u540e\u52a0\u5c31\u662f\u5728\u505a\u4e58\u6cd5\u7684\u65f6\u5019\u628a\u52a0\u6cd5\u6807\u8bb0\u4e5f\u4e58\u4e0a\u8fd9\u4e2a\u6570\uff0c\u5728\u540e\u9762\u505a\u52a0\u6cd5\u7684\u65f6\u5019\u76f4\u63a5\u52a0\u5c31\u884c\u4e86\u3002**\n\n```\n\u5148\u4e58\u540e\u52a0\u53ef(\u91d1)\u597d(\u5777)\u5566(\u5783)\u597d\u5904\u90fd\u6709\u5565?\u8c01\u8bf4\u5bf9\u4e86\u5c31\u7ed9\u4ed6\uff01\n\n\u5148\u4e58\u540e\u52a0\u53ef(\u91d1)\u597d(\u5777)\u5566(\u5783)\uff0c\u4e00\u9898\u80fd\u9876\u4e24\u9898\u5566\uff01\n\n\u5148\u4e58\u540e\u52a0\u53ef(\u91d1)\u597d(\u5777)\u5566(\u5783)\uff0cNOIP\u4e00\u5343\u516b\uff01\n\n\u5148\u4e58\u540e\u52a0\u5566\uff0c\u65f6\u95f4\u4e0d\u2f69\u6492\uff1b\u5148\u52a0\u540e\u4e58\u5440\uff0c\u6492\u4e86\u4e5f\u2f69\u642d\n\n\u5148\u4e58\u540e\u52a0\u53ef(\u91d1)\u597d(\u5777)\u5566(\u5783)\uff0c\u4e0d\u8d39\u65f6~\uff01\u4e0d\u6015Wa~\uff01\n\n\u51fa\u9898\u4eba\uff0c\u771f\u4e0d\u50bb\uff01\u65f6\u95f4\u7ed9\u4e86\u4ed6\uff0c\u5bf9\u7ade\u8d5b\u4f53\u9a8c\u5371\u5bb3\u5927\uff0c\u7edd\u4e0d\u80fd\u7ed9\u4ed6\uff01\n\n\u7ebf\u6bb5\u68112\u6bd2(\u4e0d)\u7624(\u53d1)\u554a(\u8fbe)\uff0c\u6211\u4eec\u90fd\u8981\u5207(\u652f)\u6389(\u63f4)\u4ed6\u3002\u5148\u4e58\u540e\u52a0\uff0c\u6bd2(\u4f60)\u7624(\u4eec)\u6570(\u65e5)\u636e(\u672c)\u522b~\uff01\u60f3~\uff01\u5566~\uff01\n\n```\n## **\u9539\u9ed1\u677f\uff1a**\n\n\u9996\u5148\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u7ebf\u6bb5\u6811\uff11\u7684\u52a0\u6cd5\u6807\u8bb0**\u4ed6\u5176\u5b9e\u662f\u6253\u5728\u7236\u4eb2\u8282\u70b9\u4e0a\u7684\u6807\u8bb0\u513f\u5b50\u52a0\u591a\u5c11\u7684**\uff0c\u6253\u5b8c\u6807\u8bb0\u7684\u540c\u65f6\u7236\u4eb2\u7684sum\u5176\u5b9e\u5df2\u7ecf\u52a0\u4e0a\u4e86$add*len$\n\n\u90a3\u6211\u4eec\u56de\u5230\u8fd9\u9053\u9898\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u5728\u52a0\u6570\u7684\u540c\u65f6**\u8fd8\u8981\u533a\u95f4\u4e58**\n\n\u6bd4\u5982\u73b0\u5728\u67093\u4e2a\u6570$1,2,3$\n\n```\n            1~3(1)\n           /     \\\n      1~2(2)      3(3)\n     /      \\\n  1(4)      2(5)\n```\n**\u6211\u4eec\u5148\u7ed91~3\u52a0\u4e0a2**,\u753b\u4e2a\u5c0f\u5c0f\u5c0f\u5c0f\u7684\u56fe\uff0c**\u8282\u70b9\u540e\u9762\u7684\u62ec\u53f7\u4ee3\u8868\u8282\u70b9\u4e0b\u6807**\n\n\u6240\u4ee5\n\n$t[1].add+=2;$\n\n$t[1].sum+=((3-1)+1)*2;$\n\n\n**\u6211\u4eec\u518d\u7ed91~3\u4e58\u4e0a3**\n\n\u6240\u4ee5\n\n$t[1].mu*=3;$\n\n**\u6211\u4eec\u518d\u7ed91~3\u52a0\u4e0a4\uff0c\u90a3\u662f\u4e0d\u662f\u5148\u52a0\u518d\u4e58**\n\n$t[1].add+=4;$\n\nobviously\u6211\u4eec\u53d1\u73b0\u4e0d\u80fd\u5148\u52a0\uff1a\n```\n\u64cd\u4f5c2\u4e4b\u540e\u7684\u5f0f\u5b50\u662f:\nsum=(a[1]+2)*3+(a[2]+2)*3+(a[3]+2)*3;\n```\n\u5982\u679c\u76f4\u63a5\u52a0:\n```\n\u5f0f\u5b50\u662f:\nsum=(a[1]+2+4)*3+(a[2]+2+4)*3+(a[3]+2+4)*3;\n   =(a[1]+2)*3+4*3+(a[2]+2)*3+4*3+(a[3]+2)*3+4*3;\n```\n\u6211\u4eec\u53d1\u73b0\u8fd9\u548c\n```\nsum=(a[1]+2)*3+4+(a[2]+2)*3+4+(a[3]+2)*3+4;\n```\n\u5e76\u4e0d\u7b49\u4ef7\n\n\u800c\u8981\u7b49\u4ef7\u5fc5\u987b\u8fd9\u6837\n```\nsum=(a[1]+2+4/3)*3+(a[2]+2+4/3)*3+(a[3]+2+4/3)*3;\n```\n**\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5c31\u6210\u4e86\u5b9e\u6570\u8fd0\u7b97\u4e86,\u8fd8\u6709\u53ef\u80fd\u9664\u6210\u65e0\u9650\u5c0f\u6570**\n\n\u800c\u5148\u4e58\u540e\u52a0:\n\n```\nsum=(a[1]*3+2*3+4)+(a[2]*3+2*3+4)+(a[3]*3+2*3+4);\n```\n\n**\u55ef \u8001\u94c1\u6ca1\u6bdb\u75c5\uff5e\uff5e\uff5e**\n\n\n## \u7ed9\u4ee3\u7801\u5566\n```cpp\n#include<bits/stdc++.h>\n#define ll long long \nusing namespace std;\nint n,m,a[1000005],mod;\nstruct node{\n\tll sum,l,r,mu,add;\n}t[1000005];\nll read(){\n\tll x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn x;\n}\nvoid build(ll p,ll l,ll r){\n\tt[p].l=l,t[p].r=r;t[p].mu=1;\n\tif(l==r){t[p].sum=a[l]%mod;return ;}\n\tll mid=(l+r)>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\tt[p].sum=(t[p*2].sum+t[p*2+1].sum)%mod;\n}\nvoid spread(ll p){\n    t[p*2].sum=(ll)(t[p].mu*t[p*2].sum+((t[p*2].r-t[p*2].l+1)*t[p].add)%mod)%mod;\n    t[p*2+1].sum=(ll)(t[p].mu*t[p*2+1].sum+(t[p].add*(t[p*2+1].r-t[p*2+1].l+1))%mod)%mod;//add\u5df2\u7ecf\u4e58\u8fc7mu\u5566\n\t\n    t[p*2].mu=(ll)(t[p*2].mu*t[p].mu)%mod;\n    t[p*2+1].mu=(ll)(t[p*2+1].mu*t[p].mu)%mod;\n\n\tt[p*2].add=(ll)(t[p*2].add*t[p].mu+t[p].add)%mod;\n    t[p*2+1].add=(ll)(t[p*2+1].add*t[p].mu+t[p].add)%mod;\n    \n    t[p].mu=1,t[p].add=0;\n}\nvoid add(ll p,ll l,ll r,ll k){\n\tif(t[p].l>=l&&t[p].r<=r){\n\t\tt[p].add=(t[p].add+k)%mod;\n\t\tt[p].sum=(ll)(t[p].sum+k*(t[p].r-t[p].l+1))%mod;//\u53ea\u8981\u52a0\u4e0a\u589e\u52a0\u7684\u5c31\u597d\n\t\treturn ;\n\t}\n\tspread(p);\n\tt[p].sum=(t[p*2].sum+t[p*2+1].sum)%mod;\n\tll mid=(t[p].l+t[p].r)>>1;\n\tif(l<=mid)add(p*2,l,r,k);\n\tif(mid<r)add(p*2+1,l,r,k);\n\tt[p].sum=(t[p*2].sum+t[p*2+1].sum)%mod;\n\t\n}\nvoid mu(ll p,ll l,ll r,ll k){\n\tif(t[p].l>=l&&t[p].r<=r){\n\t\tt[p].add=(t[p].add*k)%mod;//\u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u6b65,add\u8981\u5728\u8fd9\u91cc\u4e58\u4e0ak,\u56e0\u4e3a\u540e\u9762\u53ef\u80fd\u8981\u52a0\u5176\u4ed6\u7684\u6570\u800c\u90a3\u4e9b\u6570\u5176\u5b9e\u662f\u4e0d\u7528\u4e58k\u7684\n\t\tt[p].mu=(t[p].mu*k)%mod;\n\t\tt[p].sum=(t[p].sum*k)%mod;\n\t\treturn ;\n\t}\n\tspread(p);\n    t[p].sum=t[p*2].sum+t[p*2+1].sum;\n\tll mid=(t[p].l+t[p].r)>>1;\n\tif(l<=mid)mu(p*2,l,r,k);\n\tif(mid<r)mu(p*2+1,l,r,k);\n\tt[p].sum=(t[p*2].sum+t[p*2+1].sum)%mod;\n}\nll ask(ll p,ll l,ll r){\n\tif(t[p].l>=l&&t[p].r<=r){\n\t\treturn t[p].sum;\n\t}\n\tspread(p);\n\tll val=0;\n\tll mid=(t[p].l+t[p].r)>>1;\n\tif(l<=mid)val=(val+ask(p*2,l,r))%mod;\n\tif(mid<r)val=(val+ask(p*2+1,l,r))%mod;\n\treturn val;\n}\nint main(){\n\tcin>>n>>m>>mod;\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=read();\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint ty=read();\n\t\tif(ty==1){\n\t\t\tll cn=read(),cm=read(),cw=read();\n\t\t\tmu(1,cn,cm,cw);\n\t\t}else if(ty==2){\n\t\t\tll cn=read(),cm=read(),cw=read();\n\t\t\tadd(1,cn,cm,cw);\n\t\t}else {\n\t\t\tll cn=read(),cm=read();\n\t\t\tcout<<ask(1,cn,cm)<<endl;\n\t\t}\n    }\n}\n```\n\u66f4\u591a\u8d44\u8baf\u8bf7\u8fdb\n**[BLOG](https://www.cnblogs.com/lqhsr)**",
        "postTime": 1568259098,
        "uid": 111197,
        "name": "lqhsr",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "### update 2020.3.5 \u4fee\u6539\u540e\u7b26\u5408\u4e86\u6d1b\u8c37\u9898\u89e3\u89c4\u8303\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3373)\n\n\u6211\u53c8\u6765\u53d1\u6559\u79d1\u4e66\u822c\u7684\u4ee3\u7801\u4e86\u3002\n\n\u770b\u770b\u5176\u4ed6\u9898\u89e3\uff0c\u53d1\u73b0\u7ebf\u6bb5\u6811\u5199\u7684\u597d\u4e71\u554a\uff0c\u4e8e\u662f\u53d1\u4e86\u7bc7\u798f\u5229\u6587\u3002\n\n\u76f8\u6bd4\u8f83\u4e8eP3372\uff0c\u6b64\u9898\u591a\u4e86\u4e2a\u533a\u95f4\u4e58\u6cd5\u3002\n\n\u4e00\u4e2a `tag` \u4f3c\u4e4e\u5e94\u4ed8\u4e0d\u4e86\u4e86\uff0c\u90a3\u4e48\u6765\u4e24\u4e2a `tag` \u554a\uff1a `add` \u548c `mul` \u3002\n\n##### \u524d\u7f6e\u77e5\u8bc6\uff1a\u901a\u8fc7 P3372\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u68111\n\n## 1. \u533a\u95f4\u52a0\u6cd5\n\n\u8fd8\u662f\u4e00\u6837\u3002\n\n```cpp\ns[pos].add = (s[pos].add + k) % mod;\ns[pos].sum = (s[pos].sum + k * (s[pos].r - s[pos].l + 1)) % mod;\n```\n\n## 2. \u533a\u95f4\u4e58\u6cd5\n\n\u8fd9\u91cc\u5c31\u6709\u70b9\u4e0d\u4e00\u6837\u4e86\u3002\n\n\u5148\u628a `mul` \u548c `sum` \u4e58\u4e0a `k` \u3002\n\n\u5bf9\u4e8e\u4e4b\u524d\u5df2\u7ecf\u6709\u7684 `add` \uff0c\u628a\u5b83\u4e58\u4e0a `k` \u5373\u53ef\u3002**\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u628a\u4e58\u4e4b\u540e\u7684\u503c\u76f4\u63a5\u66f4\u65b0add\u7684\u503c\u3002**\n\n\u4f60\u60f3\uff0c `add` \u5176\u5b9e\u5e94\u8be5\u52a0\u5230 `sum` \u91cc\u9762\uff0c\u6240\u6709\u4e58\u4e0a `k` \u540e\uff0c\u8fd0\u7528\u4e58\u6cd5\u5206\u914d\u5f8b\uff0c `(sum + add) * k == sum * k + add * k` \u3002\n\n\u8fd9\u6837\u6765\u5b9e\u73b0 `add` \u548c `sum` \u6709\u5e8f\u8fdb\u884c\u3002\n\n```cpp\ns[pos].add = (s[pos].add * k) % mod;\ns[pos].mul = (s[pos].mul * k) % mod;\ns[pos].sum = (s[pos].sum * k) % mod;\n```\n\n## 3. pushdown\u7684\u7ef4\u62a4\n\n\u73b0\u5728\u8981\u4e0b\u4f20\u4e24\u4e2a\u6807\u8bb0\uff1a `add` \u548c `mul` \u3002\n\n`sum` \uff1a\u56e0\u4e3a `add` \u4e4b\u524d\u5df2\u7ecf\u4e58\u8fc7\uff0c\u6240\u4ee5\u5728\u5b50\u5b69\u5b50\u4e58\u8fc7 `mul` \u540e\u76f4\u63a5\u52a0\u5c31\u884c\u3002\n\n`mul` \uff1a\u76f4\u63a5\u4e58\u3002\n\n`add` \uff1a\u56e0\u4e3a `add` \u7684\u503c\u662f\u8981\u5305\u62ec\u4e58\u4e4b\u540e\u7684\u503c\uff0c\u6240\u4ee5\u5b50\u5b69\u5b50\u8981\u5148\u4e58\u4e0a `mul` \u3002\n\n```cpp\ns[pos << 1].sum = (s[pos << 1].sum * s[pos].mul + s[pos].add * (s[pos << 1].r - s[pos << 1].l + 1)) % mod;\n\ns[pos << 1].mul = (s[pos << 1].mul * s[pos].mul) % mod;\n\ns[pos << 1].add = (s[pos << 1].add * s[pos].mul + s[pos].add) % mod;\n```\n\n\n## \u4ee3\u7801\n\n\u5728\u6b64\u6ce8\u91ca\uff1a `<<` \u548c `|` \u662f\u4f4d\u8fd0\u7b97\uff0c`n << 1 == n * 2`\uff0c`n << 1 | 1 == n * 2 + 1`\uff08\u518d\u5177\u4f53\u7684\u81ea\u5df1\u767e\u5ea6\uff09\u3002\n\n\n```cpp\n#include <bits/stdc++.h>\n\n#define MAXN 100010\n#define ll long long\n\nusing namespace std;\n\nint n, m, mod;\nint a[MAXN];\n\nstruct Segment_Tree {\n\tll sum, add, mul;\n\tint l, r;\n}s[MAXN * 4];\n\nvoid update(int pos) {\n\ts[pos].sum = (s[pos << 1].sum + s[pos << 1 | 1].sum) % mod;\n    return;\n}\n\nvoid pushdown(int pos) { //pushdown\u7684\u7ef4\u62a4\n\ts[pos << 1].sum = (s[pos << 1].sum * s[pos].mul + s[pos].add * (s[pos << 1].r - s[pos << 1].l + 1)) % mod;\n\ts[pos << 1 | 1].sum = (s[pos << 1 | 1].sum * s[pos].mul + s[pos].add * (s[pos << 1 | 1].r - s[pos << 1 | 1].l + 1)) % mod;\n\t\n\ts[pos << 1].mul = (s[pos << 1].mul * s[pos].mul) % mod;\n\ts[pos << 1 | 1].mul = (s[pos << 1 | 1].mul * s[pos].mul) % mod;\n\t\n\ts[pos << 1].add = (s[pos << 1].add * s[pos].mul + s[pos].add) % mod;\n\ts[pos << 1 | 1].add = (s[pos << 1 | 1].add * s[pos].mul + s[pos].add) % mod;\n\t\t\n\ts[pos].add = 0;\n\ts[pos].mul = 1;\n\treturn; \n}\n\nvoid build_tree(int pos, int l, int r) { //\u5efa\u6811\n\ts[pos].l = l;\n\ts[pos].r = r;\n\ts[pos].mul = 1;\n\t\n\tif (l == r) {\n\t\ts[pos].sum = a[l] % mod;\n\t\treturn;\n\t}\n\t\n\tint mid = (l + r) >> 1;\n\tbuild_tree(pos << 1, l, mid);\n\tbuild_tree(pos << 1 | 1, mid + 1, r);\n\tupdate(pos);\n\treturn;\n}\n\nvoid ChangeMul(int pos, int x, int y, int k) { //\u533a\u95f4\u4e58\u6cd5\n\tif (x <= s[pos].l && s[pos].r <= y) {\n\t\ts[pos].add = (s[pos].add * k) % mod;\n\t\ts[pos].mul = (s[pos].mul * k) % mod;\n\t\ts[pos].sum = (s[pos].sum * k) % mod;\n\t\treturn;\n\t}\n\t\n\tpushdown(pos);\n\tint mid = (s[pos].l + s[pos].r) >> 1;\n\tif (x <= mid) ChangeMul(pos << 1, x, y, k);\n\tif (y > mid) ChangeMul(pos << 1 | 1, x, y, k);\n\tupdate(pos);\n\treturn;\n}\n\nvoid ChangeAdd(int pos, int x, int y, int k) { //\u533a\u95f4\u52a0\u6cd5\n\tif (x <= s[pos].l && s[pos].r <= y) {\n\t\ts[pos].add = (s[pos].add + k) % mod;\n\t\ts[pos].sum = (s[pos].sum + k * (s[pos].r - s[pos].l + 1)) % mod;\n\t\treturn;\n\t}\n\t\n\tpushdown(pos);\n\tint mid = (s[pos].l + s[pos].r) >> 1;\n\tif (x <= mid) ChangeAdd(pos << 1, x, y, k);\n\tif (y > mid) ChangeAdd(pos << 1 | 1, x, y, k);\n\tupdate(pos);\n\treturn;\n}\n\nll AskRange(int pos, int x, int y) { //\u533a\u95f4\u8be2\u95ee\n\tif (x <= s[pos].l && s[pos].r <= y) {\n\t\treturn s[pos].sum;\n\t}\n\t\n\tpushdown(pos);\n\tll val = 0;\n\tint mid = (s[pos].l + s[pos].r) >> 1;\n\tif (x <= mid) val = (val + AskRange(pos << 1, x, y)) % mod;\n\tif (y > mid) val = (val + AskRange(pos << 1 | 1, x, y)) % mod;\n\treturn val;\n}\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &mod);\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t}\n\t\n\tbuild_tree(1, 1, n);\n\t\n\tfor (int i = 1; i <= m; i++) {\n\t\tint opt, x, y;\n\t\tscanf(\"%d%d%d\", &opt, &x, &y);\n\t\tif (opt == 1) {\n\t\t\tint k;\n\t\t\tscanf(\"%d\", &k);\n\t\t\tChangeMul(1, x, y, k);\n\t\t}\n\t\tif (opt == 2) {\n\t\t\tint k;\n\t\t\tscanf(\"%d\", &k);\n\t\t\tChangeAdd(1, x, y, k);\n\t\t}\n\t\tif (opt == 3) {\n\t\t\tprintf(\"%lld\\n\", AskRange(1, x, y));\n\t\t}\n\t}\n    \n\treturn 0;\n}\n```\n\n> \u65e5\u62f1\u4e00\u5352\uff0c\u529f\u4e0d\u5510\u6350",
        "postTime": 1570284513,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2"
    },
    {
        "content": "# \u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u5c31~~\u5438\u6c27~~\u7528\u5206\u5757\u8fc7\u4e86\u8fd9\u9053\u9898\n\n\u5927\u4f53\u601d\u8def\u4e0e\u7ebf\u6bb5\u6811\u505a\u6cd5\u7c7b\u4f3c\uff0c\u4ecd\u7136\u662f\u5206\u522b\u7ef4\u62a4\u52a0\u6cd5\u6807\u8bb0\u548c\u4e58\u6cd5\u6807\u8bb0\n\n\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u65f6 \u6574\u5757\u6253\u6807\u8bb0 \u96f6\u6563\u5757\u5148\u4e0b\u4f20\u6807\u8bb0\u7136\u540e\u66b4\u529b\u4fee\u6539\n\n\u4e0b\u4f20\u6807\u8bb0\u65f6\u5148\u4e58\u540e\u52a0 \u533a\u95f4\u4e58\u65f6\u8981\u4e58\u4e00\u4e0b\u6574\u5757\u7684\u52a0\u6cd5\u6807\u8bb0\n\n\u67e5\u8be2\u533a\u95f4\u548c\u7684\u65f6\u5019\u96f6\u6563\u5757\u6ca1\u6709\u5fc5\u8981\u4e0b\u4f20\u6807\u8bb0 \u76f4\u63a5\u66b4\u529b\u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u503c\u5373\u53ef\n\n\u590d\u6742\u5ea6nsqrt(n) ~~\u5e38\u6570\u7565\u5927~~\n\n\u5bf9\u4e8e\u4e0d\u5fc5\u8981\u7684\u53d6\u6a21\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389 \u7136\u540e\u5361\u4e00\u5361~~\u518d\u5438\u6c27~~\u5c31\u8fc7\u4e86\n\n### \u6211\u6c38\u8fdc\u559c\u6b22\u5206\u5757\uff01\n\n```c\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define rg register\n#define ll long long\nconst int N=1e5+5;\nint n,m;\nll block,val[N],mul[N],add[N],k,ans,p,a[N];\nint belong[100005],l[100005],r[100005];\ninline void reset(int x){\n    for(int i=l[x];i<=r[x];i++)\n        a[i]=(a[i]*mul[x]+add[x])%p;\n    mul[x]=1,add[x]=0;\n}\nint main(){\n    scanf(\"%d%d%lld\",&n,&m,&p); block=sqrt(n);\n    for(rg int i=1;i<=n;i++) belong[i]=i/block;\n    for(rg int i=n;i>=1;i--) l[belong[i]]=i;\n    for(rg int i=1;i<=n;i++) r[belong[i]]=i;\n    for(rg int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n    for(rg int i=1;i<=n;i++) val[belong[i]]+=a[i];\n    for(rg int i=belong[1];i<=belong[n];i++) mul[i]=1;\n    for(int i=1;i<=m;i++){\n    \tint opt,x,y;\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        if(opt==1){\n            scanf(\"%lld\",&k);\n            reset(belong[x]);\n            int temp=min(y,r[belong[x]]);\n            for(int j=x;j<=temp;j++)\n                val[belong[x]]+=(k-1)*a[j]%p,a[j]*=k,a[j]%=p;\n            if(belong[x]!=belong[y]){\n                reset(belong[y]);\n                for(int j=y;j>=l[belong[y]];j--)\n                    val[belong[y]]+=(k-1)*a[j]%p,a[j]=a[j]*k%p;\n            }\n            for(int j=belong[x]+1;j<=belong[y]-1;j++)\n                mul[j]*=k,mul[j]%=p,add[j]*=k,add[j]%=p,val[j]*=k,val[j]%=p;\n        }\n        if(opt==2){\n            scanf(\"%lld\",&k);\n            reset(belong[x]);\n            val[belong[x]]=(val[belong[x]]+(min(y,r[belong[x]])-x+1)*k)%p;\n            int temp=min(y,r[belong[x]]);\n            for(int j=x;j<=temp;j++)\n                a[j]+=k;\n            if(belong[x]!=belong[y]){\n                reset(belong[y]);\n                val[belong[y]]=(val[belong[y]]+((y-l[belong[y]]+1)*k))%p;\n                for(int j=y;j>=l[belong[y]];j--)\n                    a[j]+=k;\n                for(int j=belong[x]+1;j<=belong[y]-1;j++)\n                    add[j]+=k,val[j]=(val[j]+block*k)%p;\n            }\n        }\n        if(opt==3){\n            ans=0;int temp=min(y,r[belong[x]]);\n            for(int j=x;j<=temp;j++)\n                ans+=(a[j]*mul[belong[x]]+add[belong[x]])%p;\n            if(belong[x]!=belong[y]){\n                for(int j=y;j>=l[belong[y]];j--)\n                    ans+=(a[j]*mul[belong[y]]+add[belong[y]])%p;\n                for(int j=belong[x]+1;j<=belong[y]-1;j++)\n                    ans+=val[j];\n            }\n            printf(\"%lld\\n\",ans%p);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1519640316,
        "uid": 65376,
        "name": "\u6829\u7b19\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u5f31\u5f31\u7684\u840c\u65b0\u4e0d\u4f1a\u7528\u8bfb\u5165\u4f18\u5316\u53ea\u597d\u8001\u8001\u5b9e\u5b9escanf\u3002\u3002\u3002\n\n\u8fdb\u5165\u6b63\u9898\uff1a\uff08\u4ee5\u4e0b\u5185\u5bb9\u5747\u5728sgt\u7ed3\u6784\u4f53\u5185\uff09\n\n\u6b64\u9898\u76f8\u5bf9\u4e8e\u6a21\u677f\u4e00\uff0c\u52a0\u4e86\u4e2a\u533a\u95f4\u4e58\uff0c\u4e8e\u662f\u5728\u6a21\u677f\u4e00\u7684\u57fa\u7840\u4e0a\u9700\u8981\u591a\u5f00\u4e2a\u6570\u7ec4\uff08\u8bb0\u5f55\u4e58\u6cd5\u61d2\u6807\u8bb0\uff09\u3001\u591a\u5199\u4e2a\u51fd\u6570\uff08\u533a\u95f4\u4e58\uff09\uff0c\u8fd8\u6709\u8981\u628a\u61d2\u6807\u8bb0\u4e0b\u653e\u51fd\u6570\u505a\u4e9b\u4fee\u6539\u3002\n\n\n##\u53d8\u91cf\u5b9a\u4e49\uff1a\n\nsum[]\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u5143\u7d20\u603b\u548c\uff1b\n\naddv[]\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u5f85\u52a0\u7684\u503c\uff08\u61d2\u6807\u8bb0\uff09\uff0c\u521d\u503c\u5168\u90e8\u8bbe\u4e3a0\uff1b\n\nmulv[]\uff1a\u7ebf\u6bb5\u6811\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u5f85\u4e58\u7684\u503c\uff08\u61d2\u6807\u8bb0\uff09\uff0c\u521d\u503c\u5168\u90e8\u8bbe\u4e3a1\u3002\n\n\n##\u8fc7\u7a0b\u8bf4\u660e\uff1a\n\n\n###\u5efa\u6811\uff08Build\uff09\uff1a\n\n\u540c\u6a21\u677f\u4e00\u3002\u3002\u3002\n\n\n###\u61d2\u6807\u8bb0\u4e0b\u653e\uff08Push\\_down\uff09\uff1a\n\n\u539f\u7406\u89e3\u91ca\uff1a\n\n1.\u5f53\u5bf9\u67d0\u533a\u95f4\u6267\u884c\u52a0\u6cd5\u64cd\u4f5c\u65f6\uff0c\u7531\u4e8e\u52a0\u6cd5\u4f18\u5148\u7ea7\u4f4e\uff0c\u4e0d\u4f1a\u5bf9\u4e58\u6cd5\u64cd\u4f5c\u4ea7\u751f\u5f71\u54cd\uff0c\u6545\u76f4\u63a5\u76f8\u52a0\u5373\u53ef\uff1b\n\n2.\u5f53\u5bf9\u67d0\u533a\u95f4\u6267\u884c\u4e58\u6cd5\u64cd\u4f5c\u65f6\uff0c\u7531\u4e8e\u4e58\u6cd5\u4f18\u5148\u7ea7\u9ad8\uff0c\u4f1a\u5bf9\u4e4b\u524d\u7684\u52a0\u6cd5\u64cd\u4f5c\u4ea7\u751f\u5f71\u54cd\uff0c\u6545\u9700\u8981\u5728\u76f8\u4e58\u65f6\u4e0d\u4ec5\u5bf9sum\u548cmulv\u76f8\u4e58\uff0c\u4e5f\u9700\u8981\u5bf9addv\u76f8\u4e58\uff1b\n\n3.\u7531\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u6545\u9700\u8981\u5148\u7b97\u4e58\u6cd5\u518d\u7b97\u52a0\u6cd5\u3002\n\n\n\u7ec6\u8282\u5b9e\u73b0\uff1a\n\n1.\u5b50\u6811\u7684sum\u3001mulv\u3001addv\u503c\u5206\u522b\u4e58\u4e0a\u5f53\u524d\u8282\u70b9\u7684mulv\u503c\uff1b\n\n2.\u5f53\u524d\u8282\u70b9\u7684mulv\u503c\u8fd8\u539f\uff0c\u5373\u7f6e\u4e3a1\uff1b\n\n3.\u5b50\u6811\u7684addv\u503c\u52a0\u4e0a\u5f53\u524d\u8282\u70b9\u7684addv\u503c\uff1b\n\n4.\u5b50\u6811\u7684sum\u503c\u52a0\u4e0a\uff08\u5b50\u6811\u5305\u542b\u5143\u7d20\u6570\u91cf\\*\u5f53\u524d\u8282\u70b9\u7684addv\u503c\uff09\uff1b\n\n5.\u5f53\u524d\u8282\u70b9\u7684addv\u503c\u8fd8\u539f\uff0c\u5373\u7f6e\u4e3a0\u3002\n\n\n\u7279\u522b\u8bf4\u660e\uff1a\n\n1.\u4f7f\u7528\u524d\u5224\u65ad\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u4e3a\u7a7a\u5219\u4e0d\u9700\u6267\u884c\u6b64\u4e0b\u653e\u51fd\u6570\u3002\u867d\u7136\u6267\u884c\u4e86\u4e5f\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u4f46\u6d6a\u8d39\u65f6\u95f4\uff1b\n\n2.\u4e3a\u5c3d\u91cf\u8282\u7701\u65f6\u95f4\uff0c\u8981\u5c06\u5224\u65ad\u653e\u5728\u6b64\u51fd\u6570\u5916\u800c\u4e0d\u662f\u51fd\u6570\u5185\u3002\n\n\n###\u533a\u95f4\u52a0\uff08Addall\uff09\uff1a\n\n\u540c\u6a21\u677f\u4e00\u3002\u3002\u3002\n\n\n###\u533a\u95f4\u4e58\uff08Mulall\uff09\uff1a\n\n\u82e5\u5f53\u524d\u8282\u70b9\u5b8c\u5168\u5305\u542b\u5728\u5f85\u66f4\u65b0\u533a\u95f4\u5185\uff0c\u5219\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684mulv\u3001addv\u3001sum\u503c\u5373\u53ef\uff08\u53c2\u8003\u4e0b\u653e\u51fd\u6570\u8bf4\u660e\uff09\uff1b\n\n\u5426\u5219\u6267\u884c\u4e0e\u533a\u95f4\u52a0\u7c7b\u4f3c\u7684\u64cd\u4f5c\u5373\u53ef\u3002\n\n\n###\u533a\u95f4\u67e5\u8be2\uff08Query\uff09\uff1a\n\n\u540c\u6a21\u677f\u4e00\u3002\u3002\u3002\n\n\n##\u63d0\u793a\uff1a\u4e0d\u8981\u5fd8\u8bb0\u53d6\u6a21\u3002\u3002\u3002\n\n\n##\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n\n    \n        \n        \n            \n            \n    \n        \n        \n        \n    \n        \n            \n            \n            \n    \n        \n            \n            \n            \n    \n        \n            \n            \n            \n            \n\n\n\n    \n    \n    \n        \n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<string>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<map>\nusing namespace std;\nlong long c[500010];\nlong long p;\nstruct sgt{\n    long long sum[2000010];\n    long long addv[2000010];\n    long long mulv[2000010];\n    void build(int o,int l,int r){\n        addv[o]=0;\n        mulv[o]=1;\n        if(l==r)sum[o]=c[l];\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            build(lson,l,mid);\n            build(rson,mid+1,r);\n            sum[o]=(sum[lson]+sum[rson])%p;\n        }\n    }    \n    void push_down(int o,int l,int r,int mid,int lson,int rson){\n        mulv[lson]=(mulv[lson]*mulv[o])%p;\n        mulv[rson]=(mulv[rson]*mulv[o])%p;\n        addv[lson]=(addv[lson]*mulv[o])%p;\n        addv[rson]=(addv[rson]*mulv[o])%p;\n        sum[lson]=(sum[lson]*mulv[o])%p;\n        sum[rson]=(sum[rson]*mulv[o])%p;\n        mulv[o]=1;\n        addv[lson]=(addv[lson]+addv[o])%p;\n        addv[rson]=(addv[rson]+addv[o])%p;\n        sum[lson]=(sum[lson]+(mid-l+1)*addv[o])%p;\n        sum[rson]=(sum[rson]+(r-mid)*addv[o])%p;\n        addv[o]=0;\n    }\n    void addall(int o,int l,int r,int a,int b,int x){\n        if(l>=a && r<=b){\n            addv[o]=(addv[o]+x)%p;\n            sum[o]=(sum[o]+(r-l+1)*x)%p;\n            return;\n        }\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            if(mulv[o]!=1 || addv[o])push_down(o,l,r,mid,lson,rson);\n            if(a<=mid)addall(lson,l,mid,a,b,x);\n            if(b>mid)addall(rson,mid+1,r,a,b,x);\n            sum[o]=(sum[lson]+sum[rson])%p;\n        }\n    }\n    void mulall(int o,int l,int r,int a,int b,int x){\n        if(l>=a && r<=b){\n            mulv[o]=(mulv[o]*x)%p;\n            addv[o]=(addv[o]*x)%p;\n            sum[o]=(sum[o]*x)%p;\n            return;\n        }\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            if(mulv[o]!=1 || addv[o])push_down(o,l,r,mid,lson,rson);\n            if(a<=mid)mulall(lson,l,mid,a,b,x);\n            if(b>mid)mulall(rson,mid+1,r,a,b,x);\n            sum[o]=(sum[lson]+sum[rson])%p;\n        }\n    }\n    long long query(int o,int l,int r,int a,int b){\n        if(l>=a && r<=b)return sum[o]%p;\n        else{\n            int mid=(l+r)>>1;\n            int lson=o<<1;\n            int rson=lson|1;\n            long long ans=0;\n            if(mulv[o]!=1 || addv[o])push_down(o,l,r,mid,lson,rson);\n            if(a<=mid)ans+=query(lson,l,mid,a,b);\n            if(b>mid)ans+=query(rson,mid+1,r,a,b);\n            return ans%p;\n        }\n    }\n};\nsgt tree;\nint n,m,i,f;\nint x,y;\nlong long k;\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for(i=1;i<=n;i++)scanf(\"%d\",&c[i]);\n    tree.build(1,1,n);\n    for(i=1;i<=m;i++){\n        scanf(\"%d\",&f);\n        switch(f){\n            case 1:{\n                scanf(\"%d%d%d\",&x,&y,&k);\n                tree.mulall(1,1,n,x,y,k);\n                break;\n            }\n            case 2:{\n                scanf(\"%d%d%d\",&x,&y,&k);\n                tree.addall(1,1,n,x,y,k);\n                break;\n            }\n            case 3:{\n                scanf(\"%d%d\",&x,&y);\n                printf(\"%lld\\n\",tree.query(1,1,n,x,y));\n                break;\n            }    \n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1495604267,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "# \u7adf\u7136\u6ca1\u6709\u77e9\u9635\u4e58\u6cd5\u7684\u9898\u89e3\n\u8003\u8651\u7ebf\u6bb5\u6811\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5411\u91cf(x,y)\uff0c\u5176\u4e2dx\u4e3a\u533a\u95f4\u548c\uff0cy\u4e3a\u533a\u95f4\u5927\u5c0f\u3002\n\n### \u64cd\u4f5c\u4e00\n\u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf(a,b)\uff0c\u6211\u4eec\u8981\u8ba9\u5b83\u6210\u4e3a(a*x,b)\uff0c\u76f8\u5f53\u4e8e\u8ba9\u8fd9\u4e2a\u5411\u91cf\u4e58\u4ee5\u5982\u4e0b\u77e9\u9635\u3002\n\n$A=\\begin{bmatrix}x&0\\\\0&1\\end{bmatrix}$\n\n### \u64cd\u4f5c\u4e8c\n\u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf(a,b)\uff0c\u6211\u4eec\u8981\u8ba9\u5b83\u6210\u4e3a(a+x*b,b)\uff0c\u76f8\u5f53\u4e8e\u8ba9\u8fd9\u4e2a\u5411\u91cf\u4e58\u4ee5\u5982\u4e0b\u77e9\u9635\u3002\n\n$B=\\begin{bmatrix}1&0\\\\x&1\\end{bmatrix}$\n\n\u8fd9\u6837\u4fee\u6539\u64cd\u4f5c\u5c31\u7b49\u4ef7\u4e8e\u8ba9\u4e00\u4e2a\u533a\u95f4\u4e58\u4ee5\u4e00\u4e2a\u77e9\u9635\u3002\n\n\u4e8e\u662f\u6bcf\u4e2a\u8282\u70b9\u7684Lazytag\u5c31\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\u5373\u53ef\u3002\n\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define N 100010\nusing namespace std;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T sig=1;\n\tfor (;!isdigit(c);c=getchar()) if (c=='-') sig=-1;\n\tfor (; isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n\tx*=sig;\n}\nll Mod;\nstruct matrix{\n\tll a[2][2];\n\tvoid crt(){\n\t\ta[0][0]=a[1][1]=1;\n\t\ta[0][1]=a[1][0]=0;\n\t\treturn;\n\t}\n\tvoid clear(){\n\t\ta[0][0]=a[0][1]=a[1][0]=a[1][1]=0;\n\t\treturn;\n\t}\n\tvoid crt1(ll x){\n\t\tclear();\n\t\ta[0][0]=x;\n\t\ta[1][1]=1;\n\t\treturn;\n\t}\n\tvoid crt2(ll x){\n\t\tclear();\n\t\ta[0][0]=1;\n\t\ta[1][0]=x;\n\t\ta[1][1]=1;\n\t\treturn;\n\t}\n};\nstruct tree{\n\tint l,r;\n\tll w[2];\n\tmatrix tag;\n\tbool flag;\n};\ntree tr[N<<2];\nll a[N];\nint n,k;\nvoid timesA(tree &x,matrix y){\n\ttree res;\n\tres.w[0]=(x.w[0]*y.a[0][0]+x.w[1]*y.a[1][0])%Mod;\n\tres.w[1]=(x.w[0]*y.a[0][1]+x.w[1]*y.a[1][1])%Mod;\n\tx.w[0]=res.w[0];\n\tx.w[1]=res.w[1];\n\treturn;\n}\nvoid timesB(matrix &x,matrix y){\n\tmatrix z;\n\tz.a[0][0]=(x.a[0][0]*y.a[0][0]+x.a[0][1]*y.a[1][0])%Mod;\n\tz.a[0][1]=(x.a[0][0]*y.a[0][1]+x.a[0][1]*y.a[1][1])%Mod;\n\tz.a[1][0]=(x.a[1][0]*y.a[0][0]+x.a[1][1]*y.a[1][0])%Mod;\n\tz.a[1][1]=(x.a[1][0]*y.a[0][1]+x.a[1][1]*y.a[1][1])%Mod;\n\tx=z;\n\treturn;\n}\nvoid pushup(int i){\n\ttr[i].w[0]=(tr[i<<1].w[0]+tr[i<<1|1].w[0])%Mod;\n\ttr[i].w[1]=(tr[i<<1].w[1]+tr[i<<1|1].w[1])%Mod;\n\treturn;\n}\nvoid build(int i,int L,int R){\n\ttr[i].l=L;\n\ttr[i].r=R;\n\ttr[i].tag.crt();\n\ttr[i].flag=false;\n\tif (L==R){\n\t\ttr[i].w[0]=a[L];\n\t\ttr[i].w[1]=1;\n\t\treturn;\n\t}\n\tint mid=(L+R)>>1;\n\tbuild(i<<1,L,mid);\n\tbuild(i<<1|1,mid+1,R);\n\tpushup(i);\n\treturn;\n}\nvoid pushdown(int i){\n\tif (tr[i].flag){\n\t\ttr[i].flag=false;\n\t\ttr[i<<1].flag=true;\n\t\ttr[i<<1|1].flag=true;\n\t\ttimesB(tr[i<<1].tag,tr[i].tag);\n\t\ttimesB(tr[i<<1|1].tag,tr[i].tag);\n\t\ttimesA(tr[i<<1],tr[i].tag);\n\t\ttimesA(tr[i<<1|1],tr[i].tag);\n\t\ttr[i].tag.crt();\n\t}\n\treturn;\n}\nvoid add(int i,int L,int R,matrix s){\n\tif (L<=tr[i].l&&tr[i].r<=R){\n\t\ttimesA(tr[i],s);\n\t\ttimesB(tr[i].tag,s);\n\t\ttr[i].flag=true;\n\t\treturn;\n\t}\n\tpushdown(i);\n\tif (L<=tr[i<<1].r) add(i<<1,L,R,s);\n\tif (R>=tr[i<<1|1].l) add(i<<1|1,L,R,s);\n\tpushup(i);\n\treturn;\n}\nll query(int i,int L,int R){\n\tif (L<=tr[i].l&&tr[i].r<=R) return tr[i].w[0];\n\tpushdown(i);\n\tll res=0;\n\tif (L<=tr[i<<1].r) res=query(i<<1,L,R);\n\tif (R>=tr[i<<1|1].l) res+=query(i<<1|1,L,R);\n\tres%=Mod;\n\treturn res;\n}\nint main(){\n\tread(n);read(k);read(Mod);\n\tfor (int i=1;i<=n;i++) read(a[i]);\n\tbuild(1,1,n);\n\twhile (k--){\n\t\tint opt,L,R;\n\t\tread(opt);read(L);read(R);\n\t\tif (opt==3) printf(\"%lld\\n\",query(1,L,R));\n\t\telse{\n\t\t\tll x;\n\t\t\tread(x);\n\t\t\tmatrix type;\n\t\t\tif (opt==1) type.crt1(x);else type.crt2(x);\n\t\t\tadd(1,L,R,type);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566550895,
        "uid": 72598,
        "name": "logwzc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4$a$\uff0c\u8981\u6c42\u5b9e\u73b0\u5bf9\u6570\u7ec4\u8fdb\u884c\u4e24\u7c7b\u64cd\u4f5c\uff1a\n\n\u7b2c\u4e00\u7c7b\uff0c\u7ed9\u51fa\u533a\u95f4$[x,y]$\uff0c\u5bf9\u533a\u95f4\u5185\u7684\u6bcf\u4e2a$a_i$\u52a0\u4e0a$z$/\u4e58$z$\u7b49\n\n\u7b2c\u4e8c\u7c7b\uff0c\u7ed9\u51fa\u533a\u95f4$[x,y]$\uff0c\u67e5\u8be2\u533a\u95f4\u5185\u6240\u6709\u5143\u7d20\u7684\u548c/\u6700\u5927\u503c/\u6700\u5c0f\u503c\u7b49\n\n\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5904\u7406\uff0c\u6bcf\u6b21\u5904\u7406\u590d\u6742\u5ea6$O(n)$\uff0c$n$\u6b21\u5904\u7406\u590d\u6742\u5ea6\u5c31\u662f$O(n^2)$\uff0c\u5982\u679c$n$\u7684\u8303\u56f4\u6269\u5927\u5230$1e5$\u4e43\u81f3$1e6$\uff0c\u8fd9\u6837\u7684\u901f\u5ea6\u663e\u7136\u662f\u6211\u4eec\u65e0\u6cd5\u627f\u53d7\u7684\n\n\u8fd8\u6709\u6ca1\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u529e\u6cd5\u5462\uff1f\n\n\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5462\uff1f\u5bf9\u4e8e\u533a\u95f4\u52a0\u4ee5\u53ca\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5199\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4eca\u5929\u6211\u4eec\u7528\u4e00\u79cd\u65b0\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u2014\u2014\n\n<center>\n <font size=\"6\" >\u7ebf\u6bb5\u6811\uff01\uff01</font>   \n</center>\n\n\u6240\u8c13\u7ebf\u6bb5\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u7531\u4e00\u6761\u6761\u7ebf\u6bb5\u7ec4\u6210\u7684\u6811\u3002\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6211\u4eec\u6765\u770b\u56fe\u3002\n\n![](https://i.loli.net/2019/09/21/8ZGMzeY14iLN2u3.png)\n\n\u8fd9\u4e2a\u56fe\u4ece\u4e0b\u5f80\u4e0a\u770b\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u521d\u7684\u4e00\u4e2a\u4e00\u4e2a\u70b9\u4e0d\u65ad\u5730\u4e24\u4e24\u5408\u5e76\u6700\u7ec8\u53d8\u6210\u4e86\u4e00\u6761\u957f\u7ebf\u6bb5\uff0c\u800c\u5982\u679c\u53ea\u6ce8\u610f\u7ea2\u7ebf\u7684\u8bdd\uff0c\u660e\u663e\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u800c\u4e14\u597d\u50cf\u5e94\u8be5\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u8fd9\u6837\u7684\u7ed3\u6784\u6765\u5b58\u50a8\u533a\u95f4\u548c\uff0c\u5f53\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u770b\u5f53\u524d\u533a\u95f4\u662f\u5426\u5c5e\u4e8e\u67e5\u8be2\u533a\u95f4\uff0c\u5c5e\u4e8e\u5219\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u82e5\u662f\u4e0d\u5c5e\u4e8e\uff0c\u6211\u4eec\u5c31\u67e5\u770b\u5b83\u7684\u5de6\u53f3\u533a\u95f4\uff0c\u5bf9\u4e8e\u8ddf\u67e5\u8be2\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\u7684\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22\uff0c\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u6700\u5dee\u662f$\\lg n$\u7684\uff08\u8bc1\u660e\u5c31\u7701\u7565\u4e86\uff0c\u5927\u5bb6\u4e5f\u77e5\u9053\uff0c\u6211\u4e0d\u64c5\u957f\u8bc1\u660e233\uff09\n\n\u90a3\u4e48\u8fd9\u6837\u7684\u4e00\u68f5\u6811\u7684\u521b\u5efa\u6211\u4eec\u5e94\u5f53\u5982\u4f55\u901a\u8fc7\u4ee3\u7801\u6765\u5b9e\u73b0\u5462\uff1f\u590d\u6742\u5ea6\uff1a$O(n)$\n\n```cpp\nvoid build(int p,int l,int r){ //p\u662f\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\uff0cl,r\u8868\u793a\u5f53\u524d\u8282\u70b9\u8bb0\u5f55\u7684\u662f\u533a\u95f4[l,r]\u7684\u4fe1\u606f\n\tif(l==r){t[p]=a[l];return;}  //\u5982\u679c\u533a\u95f4\u957f\u5ea6\u4e3a1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u6570\u7ec4\u7684\u503c\u5b58\u8fdb\u6765\uff0c\u7136\u540e\u8fd4\u56de\n\tint m=l+r>>1;  //\u8fd9\u91cc\u7684m\u662f\u4e8c\u5206\u6240\u7528\uff0c\u770b\u56fe\u5e94\u8be5\u4e5f\u80fd\u660e\u767d\n\tbuild(lc,l,m);build(rc,m+1,r);  //\u8fd9\u91cc\u7684lc\u548crc\u4ee3\u8868\u7684\u662fp\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u8ba9p\u7684\u5de6\u5b50\u8282\u70b9\u7f16\u53f7\u4e3ap\u76842\u500d\uff0c\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e3ap\u76842\u500d+1\u3002\u8fd9\u91cc\u7684\u64cd\u4f5c\u5c31\u662f\u521b\u5efa\u5de6\u53f3\u5b50\u6811\n\tpushup(p);  //\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u6839\u636e\u5de6\u53f3\u5b50\u6811\u6765\u4fee\u6539\u5f53\u524d\u8282\u70b9\u4fe1\u606f\u7684\u51fd\u6570\uff0c\u6839\u636e\u9898\u76ee\u8981\u6c42\u7684\u4e0d\u540c\uff0c\u5199\u6cd5\u4e5f\u4e0d\u540c\uff0c\u6211\u4eec\u4e0b\u9762\u4f1a\u63d0\u5230\uff0c\u8fd9\u91cc\u5148\u628a\u5b83\u5f53\u505a\u4e00\u4e2a\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u7cfb\u7edf\u81ea\u5e26\u51fd\u6570\u5373\u53ef\n}\n```\n\n<center>\uff08\u77ed\u77ed\u7684\u51e0\u884c\u4ee3\u7801\uff0c\u6d53\u7f29\u4e86\u5927\u91cf\u7684\u7cbe\u534e\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8ba4\u771f\u9605\u8bfb\u6211\u7684\u6ce8\u91ca\uff0c\u4e0d\u7136\u53ef\u80fd\u4e0d\u597d\u7406\u89e3\uff09</center>\n\n\u8fd9\u68f5\u6811\u88ab\u521b\u5efa\u597d\u4e86\uff0c\u67e5\u8be2\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u4f46\u662f\u4fee\u6539\u64cd\u4f5c\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6309\u7167\u521b\u5efa\u7684\u65b9\u6cd5\u6765\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(n)$\uff0c\u8fd9\u5c31\u53c8\u6210$n^2$\u7b97\u6cd5\u4e86\uff0c\u8d39\u534a\u5929\u52b2\u590d\u6742\u5ea6\u6ca1\u53d8\u5c82\u4e0d\u662f\u5f88\u4e8f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u3002\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u5927\u4f53\u4e0e\u67e5\u8be2\u64cd\u4f5c\u7684\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u5018\u82e5\u4e0d\u628a\u4fee\u6539\u8fdb\u884c\u5230\u5e95\uff0c\u4e0b\u6b21\u67e5\u8be2\u5230\u8fd9\u6b21\u4fee\u6539\u533a\u95f4\u7684\u5b50\u533a\u95f4\uff0c\u53ef\u80fd\u5c31\u4f1a\u8f93\u51fa\u672a\u4fee\u6539\u7684\u72b6\u6001\uff0c\u8fd9\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u8282\u70b9\u505a\u4e00\u4e2a\u61d2\u60f0\u6807\u8bb0\u3002\u4e3a\u4ec0\u4e48\u53eb\u61d2\u60f0\u6807\u8bb0\u5462\uff1f\u56e0\u4e3a\u5b83\u771f\u7684\u5f88\u61d2\u60f0\uff0c\u4f60\u8e39\u5b83\u4e00\u811a\u5b83\u632a\u4e00\u6b65\u3002\u5f53\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u8fdb\u884c\u5230\u5c5e\u4e8e\u4fee\u6539\u533a\u95f4\u7684\u533a\u95f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u5b83\u7684\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\uff0c\u7136\u540e\u7528\u61d2\u60f0\u6807\u8bb0\u8bb0\u5f55\u4e0b\u6765\u4fee\u6539\u5185\u5bb9\uff0c\u7136\u540e\u8fd4\u56de\u3002\u5f53\u540e\u9762\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u6216\u662f\u67e5\u8be2\u64cd\u4f5c\u8bbf\u95ee\u5230\u8fd9\u4e2a\u533a\u95f4\u65f6\uff0c\u6211\u4eec\u5148\u5c06\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\uff08\u4e5f\u5c31\u662f\u7528\u61d2\u60f0\u6807\u8bb0\u4fee\u6539\u5176\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u628a\u61d2\u60f0\u6807\u8bb0\u4f20\u9012\u7ed9\u5b83\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u7136\u540e\u5220\u9664\u81ea\u5df1\u8eab\u4e0a\u7684\u61d2\u60f0\u6807\u8bb0\uff09\u7136\u540e\u518d\u7ee7\u7eed\u8fdb\u884c\u4e4b\u524d\u8981\u7ee7\u7eed\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u5c31\u4ece$O(n)$\u88ab\u4f18\u5316\u6210$O(n\\lg n)$\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u4ee5\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\u4e3a\u4f8b\uff09\n\n```cpp\nvoid update(int p,int l,int r,int L,int R,int z){  //L,R\u8868\u793a\u7684\u662f\u8981\u6c42\u4fee\u6539\u7684\u533a\u95f4\uff0cz\u8868\u793a\u8981\u6c42\u52a0\u4e0a\u7684\u6570\n\tif(l>R||r<L)return;  //\u5982\u679c\u6ca1\u6709\u4ea4\u96c6\u5c31\u76f4\u63a5\u9000\u51fa\uff0c\u8282\u7ea6\u65f6\u95f4\n\tif(L<=l&&r<=R){t[p].v+=(r-l+1)*z;t[p].lz+=z;return;}  //\u5982\u679c\u5c5e\u4e8e\u4fee\u6539\u533a\u95f4\u5c31\u4fee\u6539\u503c\uff0c\u4fee\u6539\u61d2\u60f0\u6807\u8bb0\uff0c\u8fd4\u56de\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);  //pushdown\u64cd\u4f5c\u662f\u7528\u6765\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\u7684\u51fd\u6570\uff0c\u4e0b\u9762\u4f1a\u63d0\u5230\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5148\u5f53\u6210\u4e00\u4e2a\u7cfb\u7edf\u81ea\u5e26\u7684\u51fd\u6570\n\tupdate(lc,l,m,L,R,z);update(rc,m+1,r,L,R,z);  //\u5148\u4fee\u6539\u5de6\u53f3\u5b50\u6811\n\tpushup(p);  //\u6839\u636e\u5de6\u53f3\u5b50\u6811\u4fee\u6539\u540e\u7684\u503c\u66f4\u65b0\u5f53\u524d\u8282\u70b9\n}\n```\n\n\u77e5\u9053\u4e86\u4fee\u6539\u64cd\u4f5c\u600e\u4e48\u5199\uff0c\u5176\u5b9e\u67e5\u8be2\u64cd\u4f5c\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\u5427(\u8fd8\u662f\u4ee5\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\u4e3a\u4f8b)\n\n```cpp\nint query(int p,int l,int r,int L,int R){  //\u5982\u4e0a\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;  //\u5982\u679c\u5f53\u524d\u533a\u95f4\u5c5e\u4e8e\u67e5\u8be2\u533a\u95f4\uff0c\u8fd4\u56de\u533a\u95f4\u548c\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);  //\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\n\treturn query(lc,l,m,L,R)+query(rc,m+1,r,L,R);  //\u4e0d\u65ad\u67e5\u8be2\u5de6\u53f3\u5b50\u6811\n}\n```\n\n\u4e0b\u9762\u5c31\u8be5\u8c08\u8c08\u6211\u4eec\u7684$pushup$\u51fd\u6570\u4e86\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u9700\u6c42\u5199\u6cd5\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5176\u5b9e\u4e00\u822c\u6765\u8bf4\u90fd\u5f88\u7b80\u5355\n\n```cpp\ninline void pushup(int p){  //\u533a\u95f4\u6c42\u548c\n\tt[p].v=t[lc].v+t[rc].v;\n}\ninline void pushup(int p){  //\u533a\u95f4\u6700\u503c\n\tt[p].v=min(t[lc].v,t[rc].v);\n}\ninline void pushup(int p){  //\u533a\u95f4\u79ef\uff08\u8fd9\u73a9\u610f\u4e00\u822c\u7528\u4e0d\u4e0a\uff0c\u56e0\u4e3a\u592a\u5927\u4e00\u822c\u9700\u8981\u53d6\u6a21\uff0c\u53bb\u819c\u540e\u9664\u6cd5\u8981\u53d8\u6210\u9006\u5143\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff09\n\tt[p].v=t[lc].v*t[rc].v;\n}\n```\n\n\u76f8\u6bd4\u4e8e$pushup$\u51fd\u6570\uff0c$pushdown$\u51fd\u6570\u8981\u9ebb\u70e6\u8bb8\u591a\n\n```cpp\ninline void pushdown(int p,int l,int r){  //\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\n\tint m=l+r>>1,&lz=t[p].lz;\n\tt[lc].v+=(m-l+1)*lz;t[lc].lz+=lz;\n\tt[rc].v+=(r-m)*lz;t[rc].lz+=lz;\n\tlz=0;\n}\ninline void pushdown(int p,int l,int r){  //\u533a\u95f4\u4e58\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\n\tint m=l+r>>1,&lz1=t[p].lz1,&lz2=t[p].lz2;\n\tif(t[p].lz1!=1){\n\t\tt[lc].v*=lz1,t[rc].v*=lz1;\n\t\tt[lc].lz1*=lz1,t[rc].lz1*=lz1;\n\t\tt[lc].lz2*=lz1,t[rc].lz2*=lz1;\n\t\tlz1=1;\n\t}\n\tif(t[p].lz2){\n\t\tt[lc].v+=(m-l+1)*lz2;t[lc].lz2+=lz2;\n\t\tt[rc].v+=(r-m)*lz2;t[rc].lz2+=lz2;\n\t\tlz2=0;\n\t}\n}\n```\n\n----\n\n\u7ebf\u6bb5\u6811\u7684\u5404\u90e8\u5206\u7ec4\u6210\u5927\u5bb6\u5df2\u7ecf\u90fd\u770b\u660e\u767d\u4e86\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u628a\u5b83\u8fde\u6210\u4e00\u4e2a\u6574\u4f53\n\n[\u6a21\u677f1](https://www.luogu.org/problem/P3372)\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc getchar\n#define maxn 100005\nusing namespace std;\n\ninline ll read(){\n\tll a=0;int f=0;char p=gc();\n\twhile(!isdigit(p)){f|=p=='-';p=gc();}\n\twhile(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n\treturn f?-a:a;\n}int n,m;\n\nstruct ahaha{\n\tll v,lz;\n}t[maxn<<2];\n#define lc p<<1\n#define rc p<<1|1\ninline void pushup(int p){\n\tt[p].v=t[lc].v+t[rc].v;\n}\ninline void pushdown(int p,int l,int r){\n\tint m=l+r>>1;ll &lz=t[p].lz;\n\tt[lc].v+=(m-l+1)*lz;t[lc].lz+=lz;\n\tt[rc].v+=(r-m)*lz;t[rc].lz+=lz;\n\tlz=0;\n}\nvoid build(int p,int l,int r){\n\tif(l==r){t[p].v=read();return;}\n\tint m=l+r>>1;\n\tbuild(lc,l,m);build(rc,m+1,r);\n\tpushup(p);\n}\nvoid update(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){t[p].v+=(r-l+1)*z;t[p].lz+=z;return;}\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);\n\tupdate(lc,l,m,L,R,z);update(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nll query(int p,int l,int r,int L,int R){\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;\n\tint m=l+r>>1;if(t[p].lz)pushdown(p,l,r);\n\treturn query(lc,l,m,L,R)+query(rc,m+1,r,L,R);\n}\n\ninline void solve_1(){\n\tint x=read(),y=read();ll z=read();\n\tupdate(1,1,n,x,y,z);\n}\ninline void solve_2(){\n\tint x=read(),y=read();\n\tprintf(\"%lld\\n\",query(1,1,n,x,y));\n}\n\nint main(){\n\tn=read();m=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint zz=read();\n\t\tswitch(zz){\n\t\t\tcase 1:solve_1();break;\n\t\t\tcase 2:solve_2();break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n[\u6a21\u677f2](https://www.luogu.org/problem/P3373)\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define ll long long\n#define gc getchar\n#define maxn 100005\nusing namespace std;\n\ninline ll read(){\n\tll a=0;int f=0;char p=gc();\n\twhile(!isdigit(p)){f|=p=='-';p=gc();}\n\twhile(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=gc();}\n\treturn f?-a:a;\n}int n,m;ll mo;\n\nstruct ahaha{\n\tll v,lz1=1,lz2;\n}t[maxn<<2];\n#define lc p<<1\n#define rc p<<1|1\ninline void pushup(int p){\n\tt[p].v=(t[lc].v+t[rc].v)%mo;\n}\ninline void pushdown(int p,int l,int r){\n\tint m=l+r>>1;ll &lz1=t[p].lz1,&lz2=t[p].lz2;\n\tif(lz1!=1){\n\t\tt[lc].lz2=t[lc].lz2*lz1%mo,t[rc].lz2=t[rc].lz2*lz1%mo;\n\t\tt[lc].lz1=t[lc].lz1*lz1%mo,t[rc].lz1=t[rc].lz1*lz1%mo;\n\t\tt[lc].v=t[lc].v*lz1%mo,t[rc].v=t[rc].v*lz1%mo;\n\t\tlz1=1;\n\t}\n\tif(lz2){\n\t\tt[lc].v=(t[lc].v+(m-l+1)*lz2)%mo,t[lc].lz2=(t[lc].lz2+lz2)%mo;\n\t\tt[rc].v=(t[rc].v+(r-m)*lz2)%mo,t[rc].lz2=(t[rc].lz2+lz2)%mo;\n\t\tlz2=0;\n\t}\n}\nvoid build(int p,int l,int r){\n\tif(l==r){t[p].v=read()%mo;return;}\n\tint m=l+r>>1;\n\tbuild(lc,l,m);build(rc,m+1,r);\n\tpushup(p);\n}\nvoid update1(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){\n\t\tt[p].lz1=t[p].lz1*z%mo;t[p].lz2=t[p].lz2*z%mo;\n\t\tt[p].v=t[p].v*z%mo;return;\n\t}\n\tint m=l+r>>1;pushdown(p,l,r);\n\tupdate1(lc,l,m,L,R,z);update1(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nvoid update2(int p,int l,int r,int L,int R,ll z){\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){t[p].lz2=(t[p].lz2+z)%mo;t[p].v=(t[p].v+(r-l+1)*z)%mo;return;}\n\tint m=l+r>>1;pushdown(p,l,r);\n\tupdate2(lc,l,m,L,R,z);update2(rc,m+1,r,L,R,z);\n\tpushup(p);\n}\nll query(int p,int l,int r,int L,int R){\n\tif(l>R||r<L)return 0;\n\tif(L<=l&&r<=R)return t[p].v;\n\tint m=l+r>>1;pushdown(p,l,r);\n\treturn (query(lc,l,m,L,R)+query(rc,m+1,r,L,R))%mo;\n}\n\ninline void solve_1(){\n\tint x=read(),y=read();ll z=read();\n\tupdate1(1,1,n,x,y,z);\n}\ninline void solve_2(){\n\tint x=read(),y=read();ll z=read();\n\tupdate2(1,1,n,x,y,z);\n}\ninline void solve_3(){\n\tint x=read(),y=read();\n\tprintf(\"%lld\\n\",query(1,1,n,x,y));\n}\n\nint main(){\n\tn=read();m=read();mo=read();\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint zz=read();\n\t\tswitch(zz){\n\t\t\tcase 1:solve_1();break;\n\t\t\tcase 2:solve_2();break;\n\t\t\tcase 3:solve_3();break;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n----\n\n### \u9898\u76ee\u63a8\u8350\n\n[\u65b9\u5dee](https://www.luogu.org/problem/P1471)\n\n[\u8272\u6591\u6e38\u620f](https://www.luogu.org/problem/P1558)\n\n[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)\n\n[\u7ef4\u62a4\u5e8f\u5217](https://www.luogu.org/problem/P2023)\n\n[\u4f1a\u8bae\u4e2d\u5fc3](https://www.luogu.org/problem/P3626)\n\n[\u5e8f\u5217](https://www.luogu.org/problem/P3863)\n\n[\u7b7e\u5230\u9898IV](https://www.luogu.org/problem/P3794)\n\n\u4f60\u7406\u89e3\u7ebf\u6bb5\u6811\u4e86\u5417\uff1f\u5982\u679c\u8fd9\u7bc7\u535a\u5ba2\u80fd\u591f\u7ed9\u4f60\u4e9b\u8bb8\u5e2e\u52a9\u7684\u8bdd\uff0c\u4e0d\u59a8\u70b9\u4e2a\u63a8\u8350\u5427",
        "postTime": 1569072630,
        "uid": 34530,
        "name": "\u5b50\u8c26\u3002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "~~\u8bdd\u8bf4\u5b66\u7ebf\u6bb5\u6811\u8fd9\u4e48\u4e45\u73b0\u5728\u624d\u505a\u8fd9\u4e2a\u9898 \u6211\u597d\u83dc\u554a~~\n\n\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\u8fd8\u662f\u51b3\u5b9a\u7801\u4e00\u4e0b\u8fd9\u4e2a\u7ebf\u6bb5\u68112\n\n\u7ebf\u6bb5\u6811plus\u5728\u6807\u51c6\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u4e0a\u989d\u5916\u589e\u52a0\u4e86**\u533a\u95f4\u4e58\u6cd5**\n\n\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u5199\u51fa\u5982\u4e0b\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\n\n- \u533a\u95f4\u4e58\n- \u533a\u95f4\u52a0\n- \u67e5\u8be2\u533a\u95f4\u548c\n\n\u5f88\u660e\u663e\u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\uff0c\u8fd9\u91cc\u7684lazytag\u9700\u8981\u641e\u4e24\u4e2a\u3002\n\n**\u4e58\u6cd5lazytag\uff1a**\n\n\n![u=3334926887,3973409725&fm=173&app=49&f=JPEG.jpg](https://i.loli.net/2019/02/20/5c6d0e955456b.jpg)\n\n\u672c\u7740\u5bf9\u4e24\u4e2a\u6807\u8bb0\u4e00\u89c6\u540c\u4ec1\u7684\u6001\u5ea6\uff0c\u6211\u4eec\u8981\u7ed9\u52a0\u548c\u4e58\u90fd\u8981\u6574\u4e00\u4e2alazytag\n\n\n```\nstruct P{\n    int add,mul;//\u4e58\u6cd5\u6807\u8bb0\u548c\u52a0\u6cd5\u6807\u8bb0\n}tag[N*4];\n```\n\n**\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u4e58\u6cd5\u6807\u8bb0\u9700\u8981\u521d\u59cb\u5316\u4e3a1**\n\n## \u4e00\u3001\u6807\u8bb0\u4f20\u9012\n\u548c\u4e00\u822c\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u6709$pushdown$\u548c$pushup$\u4e24\u4e2a\u4f20\u9012\u51fd\u6570\n\n\u5176\u4e2d\uff0c$pushup$\u662f\u5bf9\u533a\u95f4\u548c\u8fdb\u884c\u4e0a\u4f20\uff0c\u548c\u4e00\u822c\u7ebf\u6bb5\u6811\u6ca1\u6709\u533a\u522b\n```\nvoid pushup(int x){\n    sum[x]=(sum[x<<1]+sum[x<<1|1])%p;\n}\n```\n\u4f46$pushdown$\u5219\u4e0d\u540c\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u6807\u8bb0\u6211\u4eec\u9700\u8981\u5bf9\u4e24\u4e2a\u6807\u8bb0\u8fdb\u884c\u4f18\u5148\u7ea7\u8003\u8651\n\n\n\u4e58\u6cd5\u6807\u8bb0\u5e94\u5f53\u4f18\u5148\u4e0b\u4f20\uff0c\u7406\u7531\u662f\u5148\u4e58\u6cd5\u540e\u52a0\u6cd5\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u7684\u7cbe\u5ea6\u3002\n\n1. \u5bf9\u4e8e$sum$\u533a\u95f4\u548c\uff0c\u6211\u4eec\u5148\u5bf9\u513f\u5b50\u8282\u70b9\u533a\u95f4\u548c$\u00d7$\u4e58\u6cd5\u6807\u8bb0$+$\u52a0\u6cd5\u6807\u8bb0 $\u00d7$\u533a\u95f4\u957f\u5ea6\n1. \u5bf9\u4e8e\u4e58\u6cd5\u6807\u8bb0\uff0c\u6211\u4eec\u5bf9\u513f\u5b50\u8282\u70b9\u76f4\u63a5$\u00d7$\u4e58\u6cd5\u6807\u8bb0\n1. \u5bf9\u4e8e\u52a0\u6cd5\u6807\u8bb0\uff0c\u6211\u4eec\u5bf9\u513f\u5b50\u8282\u70b9\u5148$\u00d7$\u4e58\u6cd5\u6807\u8bb0$+$\u52a0\u6cd5\u6807\u8bb0\n```\nvoid pushdown(int x,int l,int r){\n    int ls=x<<1,rs=x<<1|1,mid=(l+r)>>1;\n    //\u5de6\u513f\u5b50\n    sum[ls]=(sum[ls]*tag[x].mul%p+tag[x].add*(mid-l+1)%p)%p;\n    tag[ls].mul=(tag[ls].mul*tag[x].mul)%p;\n    tag[ls].add=(tag[ls].add*tag[x].mul+tag[x].add)%p;\n    //\u53f3\u513f\u5b50\n    sum[rs]=(sum[rs]*tag[x].mul%p+tag[x].add*(r-(mid+1)+1)%p)%p;\n    tag[rs].mul=(tag[rs].mul*tag[x].mul)%p;\n    tag[rs].add=(tag[rs].add*tag[x].mul+tag[x].add)%p;\n    //\u6807\u8bb0\u521d\u59cb\u5316\n    tag[x].add=0;tag[x].mul=1;\n    return;\n}\n```\n\n\n## \u4e8c\u3001\u52a0\u6cd5\u533a\u95f4\u4fee\u6539\n\n\u7136\u540e\u6211\u4eec\u7684\u533a\u95f4\u4fee\u6539$updata$\u4e5f\u9700\u8981\u5199\u6210\u4e24\u4e2a\u51fd\u6570\n\n\u5bf9\u4e8e\u52a0\u6cd5$updata$\u6211\u4eec\u8981\n\n1. \u5bf9\u52a0\u6cd5\u6807\u8bb0\u52a0\u4e0a$k$\uff0c\n1. \u533a\u95f4\u548c\u52a0\u4e0a $k\u00d7l$\uff08$l$\u662f\u533a\u95f4\u957f\u5ea6\uff09\n\n\n\u5176\u4f59\u7684\u5199\u6cd5\u548c\u6807\u51c6\u7ebf\u6bb5\u6811\u4e00\u6a21\u4e00\u6837\n```\nvoid updata_add(int x,int l,int r,int ll,int rr,int k){\n    if(r<ll || l>rr) return;//\u5f53\u524d\u533a\u95f4\u5728\u76ee\u6807\u533a\u95f4\u4e4b\u5916\uff0c\u76f4\u63a5\u8fd4\u56de\n    if(l>=ll && r<=rr){//\u5f53\u524d\u533a\u95f4\u88ab\u76ee\u6807\u533a\u95f4\u5305\u542b\uff0c\u6807\u8bb0\u4fee\u6539\n        sum[x]=(sum[x]+k*(r-l+1)%p)%p;\n        tag[x].add=(tag[x].add+k)%p;\n        return;\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;//\u5bf9\u5de6\u53f3\u513f\u5b50\u8fdb\u884c\u4fee\u6539\n    updata_add(x<<1,l,mid,ll,rr,k);\n    updata_add(x<<1|1,mid+1,r,ll,rr,k);\n    pushup(x);\n}\n```\n## \u4e09\u3001\u4e58\u6cd5\u533a\u95f4\u4fee\u6539\n\n\u4e58\u6cd5$updata$\u5176\u4f59\u5199\u6cd5\u548c\u52a0\u6cd5\u4e00\u6837\uff0c\u552f\u4e00\u4e0d\u540c\u662f\u5f53\u524d\u533a\u95f4\u88ab\u67e5\u8be2\u533a\u95f4\u8986\u76d6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4e24\u4e2a\u6807\u8bb0\u90fd\u8fdb\u884c\u4fee\u6539\uff0c\u6ca1\u6709\u7591\u95ee\uff0c\u5168\u90e8\u4e58\u4ee5k\n\n1. \u5bf9\u4e58\u6cd5\u6807\u8bb0\u4e58\u4ee5$k$\n1. \u5bf9\u52a0\u6cd5\u6807\u8bb0\u4e58\u4ee5$k$\n1. \u5bf9\u533a\u95f4\u548c\u4e58\u4ee5$k$\n\n```\nvoid updata_mul(int x,int l,int r,int ll,int rr,int k){\n    if(r<ll || l>rr) return;\n    if(l>=ll && r<=rr){\n        sum[x]=(sum[x]*k)%p;\n        tag[x].mul=(tag[x].mul*k)%p;\n        tag[x].add=(tag[x].add*k)%p;\n        return;\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;\n    updata_mul(x<<1,l,mid,ll,rr,k);\n    updata_mul(x<<1|1,mid+1,r,ll,rr,k);\n    pushup(x);\n}\n```\n## \u56db\u3001\u533a\u95f4\u548c\u67e5\u8be2\n\n\u548c\u6807\u51c6\u7ebf\u6bb5\u6811\u4e00\u6a21\u4e00\u6837\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u6ce8\u610f\u4e0b\u4f20\u6807\u8bb0\u3002\n```\nint query(int x,int l,int r,int ll,int rr){\n    if(r<ll || l>rr) return 0;//\u5f53\u524d\u533a\u95f4\u5728\u76ee\u6807\u533a\u95f4\u5916\uff0c\u4e0d\u5f71\u54cd\u533a\u95f4\u548c\n    if(l>=ll && r<=rr){//\u5f53\u524d\u533a\u95f4\u88ab\u76ee\u6807\u671f\u95f4\u5305\u542b\uff0c\u76f4\u63a5\u8fd4\u56de\u533a\u95f4\u548c\n        return sum[x];\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;\n    return (query(x<<1,l,mid,ll,rr)+query(x<<1|1,mid+1,r,ll,rr))%p;\n}\n```\n\n\n------------\n\n**$p.s.$**\n\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\uff0c\u6bd4\u5982\u5bf9\u4e8ep\u7684\u53d6\u6a21\uff0c\u8bb0\u5f97\u8981\u5f00longlong\uff0c\u7a7a\u95f4\u5f00\u56db\u500d\u7b49\u7b49... ...\n\n~~\uff08\u5341\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00longlong\u89c1\u7956\u5b97\uff09~~\n\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\n#define N 100100\n#define int long long//\u7b2c\u4e00\u6b21\u5199\u6ca1\u5f00longlong\u7684\u672c\u849f\u84bb\nusing namespace std;\nint n,m,p;\nint a[N*4];\nint sum[N*4];\nstruct P{\n    int add,mul;\n}tag[N*4];\nvoid pushup(int x){\n    sum[x]=(sum[x<<1]+sum[x<<1|1])%p;\n}\nvoid build(int x,int l,int r){//\u5efa\u6811\n    if(l==r){\n        sum[x]=a[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    pushup(x);\n}\nvoid pushdown(int x,int l,int r){\n    int ls=x<<1,rs=x<<1|1,mid=(l+r)>>1;\n    sum[ls]=(sum[ls]*tag[x].mul%p+tag[x].add*(mid-l+1)%p)%p;\n    tag[ls].mul=(tag[ls].mul*tag[x].mul)%p;\n\ttag[ls].add=(tag[ls].add*tag[x].mul+tag[x].add)%p;\n\t\n    sum[rs]=(sum[rs]*tag[x].mul%p+tag[x].add*(r-(mid+1)+1)%p)%p;\n    tag[rs].mul=(tag[rs].mul*tag[x].mul)%p;\n    tag[rs].add=(tag[rs].add*tag[x].mul+tag[x].add)%p;\n    \n    tag[x].add=0;tag[x].mul=1;\n    return;\n}\nvoid updata_mul(int x,int l,int r,int ll,int rr,int k){\n    if(r<ll || l>rr) return;\n    if(l>=ll && r<=rr){\n        sum[x]=(sum[x]*k)%p;\n        tag[x].mul=(tag[x].mul*k)%p;\n        tag[x].add=(tag[x].add*k)%p;\n        return;\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;\n    updata_mul(x<<1,l,mid,ll,rr,k);\n    updata_mul(x<<1|1,mid+1,r,ll,rr,k);\n    pushup(x);\n}\nvoid updata_add(int x,int l,int r,int ll,int rr,int k){\n    if(r<ll || l>rr) return;\n    if(l>=ll && r<=rr){\n        sum[x]=(sum[x]+k*(r-l+1)%p)%p;\n        tag[x].add=(tag[x].add+k)%p;\n        return;\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;\n    updata_add(x<<1,l,mid,ll,rr,k);\n    updata_add(x<<1|1,mid+1,r,ll,rr,k);\n    pushup(x);\n}\nint query(int x,int l,int r,int ll,int rr){\n    if(r<ll || l>rr) return 0;\n    if(l>=ll && r<=rr){\n        return sum[x];\n    }\n    pushdown(x,l,r);\n    int mid=(l+r)>>1;\n    return (query(x<<1,l,mid,ll,rr)+query(x<<1|1,mid+1,r,ll,rr))%p;\n}\nsigned main(){\n    scanf(\"%lld %lld %lld\",&n,&m,&p);\n    for(int i=1;i<=4*n;i++) tag[i].mul=1;//\u6ce8\u610f\u4e58\u6cd5\u6807\u8bb0\u521d\u59cb\u5316\u4e3a1\n    for(int i=1;i<=n;i++){\n        scanf(\"%lld\",&a[i]);\n    }\n    build(1,1,n);\n    int opt,x,y,k;\n    while(m--){\n        scanf(\"%lld\",&opt);\n        if(opt==1){\n            scanf(\"%lld %lld %lld\",&x,&y,&k);\n            updata_mul(1,1,n,x,y,k);\n        }\n        if(opt==2){\n            scanf(\"%lld %lld %lld\",&x,&y,&k);\n            updata_add(1,1,n,x,y,k);\n        }\n        if(opt==3){\n            scanf(\"%lld %lld\",&x,&y);\n            cout<<query(1,1,n,x,y)%p<<endl;\n        }\n        \n    }\n    return 0;\n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1550651083,
        "uid": 83903,
        "name": "\u975b\u6d9f",
        "ccfLevel": 0,
        "title": "P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2"
    },
    {
        "content": "\u63a5\u4e0b\u6765\u6211\u5c06\u7ed3\u5408$\\sf{gif}$\u56fe\u5177\u4f53\u8bb2\u8bb2\u7ebf\u6bb5\u6811\n\n> \u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log N)$ \u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $2N$ \uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\n\n### \u7528\u9014\n\n\u5728 $\\sf\\ O(\\log N)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b9e\u73b0\uff1a\n\n\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2$\\sf\\ etc.$\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u9700\u8981\u6ee1\u8db3`\u53ef\u52a0\u6027`\uff0c\u5982\u679c\u4f7f\u7528\u6807\u8bb0\uff0c\u6807\u8bb0\u4e5f\u8981\u6ee1\u8db3\u53ef\u52a0\u6027\u3002\n\n### \u5b9e\u73b0\u8fc7\u7a0b\n\n**\u57fa\u672c\u7ed3\u6784\u4e0e\u5efa\u6811**\n\n\u6709\u4e2a\u6570\u7ec4 $\\sf\\ a=\\{10,11,12,13,14\\}$ \u8981\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u64cd\u4f5c\n\n\u600e\u4e48\u628a\u8fd9\u4e2a\u6570\u7ec4\u5b58\u5230\u7ebf\u6bb5\u6811\u4e2d\u5462\uff1f\n\n* \u8bbe\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u4e3a $1$ \n\n* \u7528\u6570\u7ec4 $d$ \u6765\u4fdd\u5b58\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\n\n* $d[i]$ \u7528\u6765\u4fdd\u5b58\u7f16\u53f7\u4e3a $i$ \u7684\u8282\u70b9\u7684\u503c\uff08\u8fd9\u91cc\u8282\u70b9\u7684\u503c\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u603b\u548c\uff09\n\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://ww1.sinaimg.cn/large/007i4MEmgy1g24xita4czg31280lk7wo.gif)\n\n\u8bbe$\\sf\\ d[i]$\u662f\u7ebf\u6bb5\u6811\u4e2d\u7684\u7ed3\u70b9\u3002\n\n* $\\sf\\ d[i]$ \u7684\u5de6\u8282\u70b9\u662f $\\sf\\ d[ls(i)]$\n\n* $\\sf\\ d[i]$ \u7684\u53f3\u8282\u70b9\u662f $\\sf\\ d[rs(i)]$\n\n>\u5982\u679c $\\sf\\ d[i]$ \u8868\u793a\u7684\u662f\u533a\u95f4 $\\sf\\ [l,r]$\n\n>$\\sf\\ d[i]$ \u7684\u5de6\u513f\u5b50\u8282\u70b9\u8868\u793a\u7684\u662f\u533a\u95f4 $\\sf\\ [l, \\frac{l+r}{2} ]$ \n\n>$\\sf\\ d[i]$ \u7684\u53f3\u513f\u5b50\u8868\u793a\u7684\u662f\u533a\u95f4 $\\sf\\ [ \\frac{l+r}{2} +1,r]$ \u3002\n\n**\u5982\u4f55\u5b9e\u73b0\uff1f**\n\n\u5982\u56fe\n![](http://wx4.sinaimg.cn/large/0060lm7Tly1g24xhz05idg31280lkhdz.gif)\n\n```cpp\n#define leaf (l==r)\nvoid build(int l,int r,int p)\n{\n\tif(leaf)\n\t{\n\t\td[p]=a[s];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls(p));\n\tbuild(mid+1,r,rs(p));\n\td[p]=d[ls(p)]+d[rs(p)];\n}\n```\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4: \n\n\u5982\u679c\u91c7\u7528$\\sf\\ 2p$ \u662f $\\sf\\ p$ \u7684\u5de6\u513f\u5b50\uff0c$\\sf\\ 2p+1$ \u662f $\\sf\\ p$ \u7684\u53f3\u513f\u5b50\u7684\u5b58\u50a8\u65b9\u5f0f(`\u5806\u5b58\u50a8`)\uff0c\u5219$\\sf\\  d $\u6570\u7ec4\u7684\u957f\u5ea6\u5e94\u4e3a$\\sf\\ 2^{\\left\\lceil\\log{n}\\right\\rceil+1}$\uff0c\u4ea6\u5373\u53d6 $2$ \u7684\u5e42\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $\\sf\\ n$ \u7684\u5e42\u5e76\u5c06\u5176\u4e58\u4e8c\u4f5c\u4e3a$\\sf\\ d$\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5f00\u56db\u500d\u662f\u600e\u4e48\u6837\u90fd\u591f\u4e86\u7684\uff0c\u4f46\u662f\u5728\u5361\u7a7a\u95f4\u7684\u9898\u91cc\u8981\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u52a8\u6001\u5f00\u70b9\u7684\u64cd\u4f5c\u3002\n\n**\u533a\u95f4\u67e5\u8be2**\n\n\u533a\u95f4\u67e5\u8be2\uff0c\u6bd4\u5982\u6c42\u533a\u95f4 $\\sf\\ [l,r]$ \u7684\u548c\u7684\u64cd\u4f5c\u3002\n\n![](http://wx2.sinaimg.cn/large/0060lm7Tly1g24xhlgj9ng31280lk1l2.gif)\n\n\u6bd4\u5982\u67e5\u8be2\u533a\u95f4$\\sf\\ [3,5]$\uff0c\u628a $\\sf\\ [3,5]$ \u62c6\u6210 $\\sf\\ [3,3]$ \u548c $\\sf\\ [4,5]$ \u5c31\u884c\u4e86\u3002\n\n```cpp\nint getsum(int l,int r,int l_now,int r_now,int p)\n{\n\t//[l,r]\u4e3a\u67e5\u8be2\u533a\u95f4,[l_now,r_now]\u4e3a\u5f53\u524d\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4,p\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\n\tif(l<=l_now&&r_now<=r)\n\t{\n\t\treturn d[p];//\u5f53\u524d\u533a\u95f4\u4e3a\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6\u65f6\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u548c\n\t}\n\tint mid=(l_now+r_now)>>1;\n\tint sum=0;\n\tif(l<=mid)\n\t{\n\t\tsum+=getsum(l,r,l_now,mid,ls(p));\n\t}\n\t//\u5982\u679c\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4[l,m]\u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6,\u5219\u9012\u5f52\u67e5\u8be2\u5de6\u513f\u5b50\n\tif(r>mid)\n\t{\n\t\tsum+=getsum(l,r,mid+1,r_now,rs(p));\n\t}\n\t//\u5982\u679c\u53f3\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4[m+1,r]\u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6,\u5219\u9012\u5f52\u67e5\u8be2\u53f3\u513f\u5b50\n\treturn sum;\n}\n```\n\u4e3b\u8981\u601d\u8def\u662f\u628a\u533a\u95f4\u62c6\u6210\u5de6\u53f3\u533a\u95f4\uff0c\u518d\u5206\u522b\u5904\u7406\u3002(\u5206\u6cbb)\n\n**\u533a\u95f4\u4fee\u6539&\u61d2\u6807\u8bb0**\n\n\u4fee\u6539\u533a\u95f4$\\sf\\ [l , r]$\u9700\u8981\u8fdb\u884c**\u6253\u61d2\u6807\u8bb0**\u7684\u64cd\u4f5c\u6765\u51cf\u5c11\u65f6\u95f4\u6d88\u8017\u3002\n\n\u8bbe\u4e00\u4e2a\u6570\u7ec4 $\\sf\\ laz$ \uff0c $\\sf\\ laz[i]$ \u8868\u793a\u7f16\u53f7\u4e3a $\\sf\\ i$ \u7684\u8282\u70b9\u7684**\u61d2\u6807\u8bb0**\u3002\n\n**\u533a\u95f4\u4fee\u6539\uff08\u533a\u95f4\u52a0\uff09:**\n\n```cpp\nvoid interval_add(int l,int r,int val,int l_now,int r_now,int p)\n{\n\t//[l,r]\u4e3a\u4fee\u6539\u533a\u95f4,val\u4e3a\u88ab\u4fee\u6539\u7684\u5143\u7d20\u7684\u53d8\u5316\u91cf,[l_now,r_now]\u4e3a\u5f53\u524d\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4,p\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\n\tif(l<=l_now&&r_now<=r)\n\t{\n\t\td[p]+=(r_now-l_now+1)*val;\n\t\tlaz[p]+=val;\n\t\treturn;\n\t}//\u5f53\u524d\u533a\u95f4\u4e3a\u4fee\u6539\u533a\u95f4\u7684\u5b50\u96c6\u65f6\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684\u503c,\u7136\u540e\u6253\u6807\u8bb0,\u7ed3\u675f\u4fee\u6539\n\tint mid=(l_now+r_now)/2;\n\tif(laz[p]&&!leaf)\n\t{\n\t\t//\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u61d2\u6807\u8bb0\u975e\u7a7a,\u5219\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u6807\u8bb0\u503c\n\t\td[ls(p)]+=laz[p]*(mid-l_now+1);\n\t\td[rs(p)]+=laz[p]*(r_now-mid);\n\t\t\n\t\tlaz[ls(p)]+=laz[p];\n\t\tlaz[rs(p)]+=laz[p];//\u5c06\u6807\u8bb0\u4e0b\u4f20\u7ed9\u5b50\u8282\u70b9\n\t\tlaz[p]=0;//\u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u6807\u8bb0\n\t}\n\tif(l<=mid)\n\t{\n\t\tinterval_add(l,r,val,l_now,mid,ls(p));\n\t}\n\tif(r>mid)\n\t{\n\t\tinterval_add(l,r,val,mid+1,r_now,rs(p));\n\t}\n\td[p]=d[ls(p)]+d[rs(p)];\n}\n```\n\n**\u533a\u95f4\u67e5\u8be2\uff08\u6c42\u548c\uff09:**\n\n```cpp\nint getsum(int l,int r,int l_now,int r_now,int p)\n{\n\t//[l,r]\u4e3a\u67e5\u8be2\u533a\u95f4,[l_now,r_now]\u4e3a\u5f53\u524d\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4,p\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\n\tif(l<=l_now&&r_now<=r)\n\t{\n\t\treturn d[p];//\u5f53\u524d\u533a\u95f4\u4e3a\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6\u65f6\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u548c\n\t}\n\tint mid=(l_now+r_now)>>1;\n\tint sum=0;\n\tif(l<=mid)\n\t{\n\t\tsum+=getsum(l,r,l_now,mid,ls(p));\n\t}\n\t//\u5982\u679c\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4[l,m]\u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6,\u5219\u9012\u5f52\u67e5\u8be2\u5de6\u513f\u5b50\n\tif(r>mid)\n\t{\n\t\tsum+=getsum(l,r,mid+1,r_now,rs(p));\n\t}\n\t//\u5982\u679c\u53f3\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4[m+1,r]\u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6,\u5219\u9012\u5f52\u67e5\u8be2\u53f3\u513f\u5b50\n\treturn sum;\n}\n```\n\n\u5982\u679c\u8981\u5b9e\u73b0\u533a\u95f4\u8d4b\u503c\uff0c\u628a\u6240\u6709 `+=` \u66ff\u6362\u6210 `=` \u5373\u53ef\n\n(\u9664$sum+=getsum(l,r,mid+1,r,rs(p)$ )\n\n```cpp\nvoid interval_value(int l,int r,int val,int l_now,int r_now,int p)\n{\n\tif(l<=l_now&&r_now<=r)\n\t{\n\t\td[p]=(r_now-l_now+1)*val;\n\t\tlaz[p]=val;\n\t\treturn ;\n\t}\n\tint mid=(l_now+r_now)>>1;\n\tif(laz[p])\n\t{\n\t\td[ls(p)]=laz[p]*(mid-l_now+1);\n\t\td[rs(p)]=laz[p]*(r_now-mid);\n\t\tlaz[ls(p)]=laz[rs(p)]=laz[p];\n\t\tlaz[p]=0;\n\t}\n\tif(l<=mid)\n\t{\n\t\tinterval_value(l,r,val,l_now,mid,ls(p));\n\t}\n\tif(r>mid)\n\t{\n\t\tinterval_value(l,r,val,mid+1,r_now,rs(p));\n\t}\n\td[p]=d[ls(p)]+d[rs(p)];\n}\nint getsum(int l,int r,int l_now,int r_now,int p)\n{\n\tif(l<=l_now&&r_now<=r)return d[p];\n\tint mid=(l_now+r_now)>>1;\n\tif(laz[p])\n\t{\n\t\td[ls(p)]=laz[p]*(mid-l_now+1);\n\t\td[rs(p)]=laz[p]*(r_now-mid);\n\t\tlaz[ls(p)]=laz[rs(p)]=laz[p];\n\t\tlaz[p]=0;\n\t}\n\tint sum=0;\n\tif(l<=mid)\n\t{\n\t\tsum=getsum(l,r,l_now,mid,ls(p));\n\t}\n\tif(r>mid)\n\t{\n\t\tsum+=getsum(l,r,mid+1,r_now,rs(p));\n\t}\n\treturn sum;\n}\n```\n\n**\u4f18\u5316**\n\n* \u4f4d\u8fd0\u7b97\u4f18\u5316\n\n* \u9012\u5f52\u5230\u53f6\u8282\u70b9\u7684\u65f6\u5019\u53f6\u8282\u70b9\u4e00\u5b9a\u5305\u542b\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u5728\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u524d\u5c31\u5904\u7406\u5b8c$\\sf\\ return $\uff0c\u6240\u4ee5\u53f6\u8282\u70b9\u61d2\u6807\u8bb0\u4e0b\u653e\u4e0d\u4f1a\u5bfc\u81f4\u6570\u7ec4\u8d8a\u754c\uff0c\u4e5f\u4e0d\u7528\u6bcf\u6b21\u68c0\u67e5\u662f\u5426\u4e3a\u53f6\u8282\u70b9\u4e86\u3002\n\n* \u5982\u679c\u61d2\u6807\u8bb0\u4e0d\u4f1a\u8d85\u51fa\u6570\u636e\u8303\u56f4\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u6c38\u4e45\u5316\u53ef\u4ee5\u907f\u514d\u4e0b\u4f20\u6807\u8bb0\uff0c\u964d\u4f4e\u7a0b\u5e8f\u5e38\u6570\u3002\n\n\u5c0f\u7ec31.[LuoGu3372:\u7ebf\u6bb5\u68111](https://www.luogu.org/problem/show?pid=3372)\n\n\u5c0f\u7ec32.[LuoGu3373:\u7ebf\u6bb5\u68112](https://www.luogu.org/problem/show?pid=3372)\n\n------------",
        "postTime": 1555205881,
        "uid": 126484,
        "name": "first_fan",
        "ccfLevel": 0,
        "title": "[\u6570\u636e\u7ed3\u6784]\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u9898\uff0c\u5177\u4f53\u89c1\u6ce8\u91ca\n\n/\\*\nID: ylx14271\n\nPROG: \u7ebf\u6bb5\u68112\n\nLANG: C++\n\n\\*/\n```cpp\n#include<set>  \n#include<map>  \n#include<list>  \n#include<queue>  \n#include<stack>  \n#include<string>  \n#include<math.h>  \n#include<time.h>  \n#include<vector>  \n#include<bitset>  \n#include<memory>  \n#include<utility>  \n#include<stdio.h>  \n#include<sstream>  \n#include<iostream>  \n#include<stdlib.h>  \n#include<string.h>  \n#include<algorithm> \n#define LL unsigned long long  \n#define LO long long \nusing namespace std;\nstruct node\n{\n    long long l,r;//\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9 \n    long long jia;//\u52a0 \n    long long ch;//\u4e58 \n    long long s;\n} t[300100];\nlong long a[300100];\nlong long n,m,x,y,k,c,i,j;\nlong long sum,p; //\u819c\u6570 \nvoid bt(long long l,long long r,long long u)//\u5efa\u6811 \n{\n    t[u].l=l;//\u5de6\u7aef\u70b9 \n    t[u].r=r;//\u53f3\u7aef\u70b9 \n    t[u].jia=0;\n    t[u].ch=1;//\u521d\u59cb\u5316 \n    if (l==r)//\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4 \n    {\n        t[u].s=a[l];\n        return;\n    }\n    bt(l        ,(l+r)/2,u*2);//\u5de6\u5b50\u6811 \n    bt((l+r)/2+1,r      ,u*2+1);//\u53f3\u5b50\u6811\n    t[u].s=(t[u*2].s+t[u*2+1].s)%p;//\u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u7684\u503c\n}\nvoid down(LO x)\n{\n    t[x*2].jia=(t[x*2].jia*t[x].ch+t[x].jia)%p;//\u52a0 \n    t[x*2+1].jia=(t[x*2+1].jia*t[x].ch+t[x].jia)%p;\n    t[x*2].ch=(t[x*2].ch*t[x].ch)%p;//\u4e58 \n    t[x*2+1].ch=(t[x*2+1].ch*t[x].ch)%p;\n    t[x*2].s=(t[x].jia*(t[x*2].r-t[x*2].l+1)%p+t[x*2].s*t[x].ch%p)%p;//\u6c42\u548c \n    t[x*2+1].s=(t[x].jia*(t[x*2+1].r-t[x*2+1].l+1)%p+t[x*2+1].s*t[x].ch%p)%p;//\u6c42\u548c \n    t[x].jia=0;t[x].ch=1; \n}\nvoid cheng(LO l,LO r,LO x,LO d)\n{\n    if (l<=t[x].l&&t[x].r<=r)//\u5168\u90e8\u5305\u62ec \n```\n{//\u4e09\u4e2a\u503c\u5168\u90e8\u90fd\u8981\u4e58\u4e0a\u53bb\n```cpp\n        t[x].s=t[x].s*d%p;\n        t[x].jia=t[x].jia*d%p;\n        t[x].ch=t[x].ch*d%p;\n    } else\n    {\n        down(x);//\u5411\u4e0b\u4f20\u9012\u503c \n        LO mid=(t[x].l+t[x].r)/2;\n        if (l<=mid) cheng(l,r,x*2,d);//\u7ee7\u7eed\u5f80\u4e0b\u641c\n        if (r>mid)cheng(l,r,x*2+1,d);\n        t[x].s=(t[x*2+1].s+t[x*2].s)%p;//\u66f4\u65b0sum \n    }\n    return;\n}\nvoid jf(LO l,LO r,LO x,LO d)\n{\n    if (l<=t[x].l&&t[x].r<=r)//\u5168\u90e8\u5305\u62ec \n    {\n        t[x].jia=(t[x].jia+d)%p;\n        t[x].s=(t[x].s+d*(t[x].r-t[x].l+1))%p;\n    } else\n    {\n        down(x);//\u5411\u4e0b\u4f20\u9012\u503c \n        LO mid=(t[x].l+t[x].r)/2;\n        if (l<=mid) jf(l,r,x*2,d);\n        if (r>mid)jf(l,r,x*2+1,d);\n        t[x].s=(t[x*2+1].s+t[x*2].s)%p;//\u66f4\u65b0sum \n    }\n    return;\n} \nlong long qh(LO l,LO r,LO x)\n{\n    if (l<=t[x].l&&t[x].r<=r) //\u6c42\u5f97\u533a\u95f4\u6709\u8fd9\u4e00\u90e8\u5206\uff0c\u76f4\u63a5\u8fd4\u56de\n         return t[x].s%p;\n    else\n    {\n        down(x);//\u5411\u4e0b\u4f20\u9012\u503c \n        LO ans=0;\n        LO mid=(t[x].l+t[x].r)/2;\n        if (l<=mid) ans=qh(l,r,x*2)%p;\n        if (r>mid)ans=ans+qh(l,r,x*2+1);\n        return ans%p;\n    }\n}\nint main() \n{\n    //freopen(\"1.in\",\"r\",stdin);\n    //freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%lld%lld%lld\",&n,&m,&p);\n    for (i=1;i<=n;i++)\n    scanf(\"%lld\",&a[i]);\n    bt(1,n,1);//\u5efa\u6811 \n    for (i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&c);//\u8bfb\u5165 \n        if (c==1)//\u4e58\n        {\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            cheng(x,y,1,k);\n        }\n        if (c==3)//\u6c42\u548c \n        {\n            scanf(\"%lld%lld\",&x,&y);\n            sum=qh(x,y,1)%p;//\u6c42\u548c \n            printf(\"%lld\\n\",sum);//\u7ed3\u679c \n        }\n        if (c==2)//\u52a0 \n        {\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            jf(x,y,1,k);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1498825829,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\n### \u5f15\u5165\u95ee\u9898\n\n*   \u5df2\u77e5\u4e00\u4e2a\u6570\u5217\n*   \u8fdb\u884c\u4e0b\u9762\u56db\u79cd\u64cd\u4f5c\n*   1.\u533a\u95f4\u8d4b\u503c\u6210 $x$\n*   2.\u533a\u95f4\u4e58\u4e0a\u4e00\u4e2a\u6570 $x$\n*   3.\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u6570 $x$\n*   4.\u6c42\u51fa\u533a\u95f4\u6bcf\u4e00\u4e2a\u6570\u7684\u548c\n\n[\u6d1b\u8c37P3373](https://www.luogu.org/problem/P3373) (\u53ea\u6709\u540e\u9762\u4e09\u79cd\u64cd\u4f5c)\n\n### \u77e9\u9635\u5165\u95e8\n\n\u53ef\u4ee5\u770b\u770b\u6211\u5199\u7684[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/Lskkkno1/p/11686341.html)\n\n### \u6b63\u6587\n\n#### \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f\u5e26\u6709\u7ed3\u5408\u5f8b\u7684\u4e1c\u897f\n\n\u5047\u5982\u7ef4\u62a4\u7684\u4e1c\u897f\u4e0d\u5b58\u5728**\u7ed3\u5408\u5f8b**\n\n\u90a3\u4e48\u6bcf\u6b21\u4e00\u4e2a\u65b0\u7684\u6807\u8bb0\u5c31\u4f1a\u628a\u65e7\u7684\u6807\u8bb0\u6324\u4e0b\u53bb\n\n\u6bcf\u4e00\u4e2a\u6807\u8bb0\u90fd\u8981\u904d\u5386\u6574\u68f5\u6811\uff0c\u590d\u6742\u5ea6\u53d8\u6210 $O(nm)$\n\n### \u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\n\n\u4f17\u6240\u5468\u77e5\uff0c\u77e9\u9635\u4e58\u6cd5\u662f\u6709**\u7ed3\u5408\u7387**\u7684\n\n\u5373 : \n\n$A(B C) = (AB)C$\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a**\u77e9\u9635**\u6765\u8868\u793a\u4e00\u4e9b**\u4fe1\u606f**\n\n\u90a3\u4e48\u6211\u4eec\u7684\u6bcf\u4e00\u6b21**\u64cd\u4f5c**\u90fd\u60f3\u65b9\u8bbe\u6cd5\u628a\u5b83\u53d8\u6210\"\u4e58\u4e0a\u4e00\u4e2a\u77e9\u9635\"\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u6cd5\uff0c\u6765\u8868\u793a\u4e00\u4e9b**\u7ed3\u5408\u5f8b**\u4e0d\u662f\u90a3\u4e48\u660e\u663e\u7684\u4fe1\u606f\n\n\u6ce8\u610f : \u7531\u4e8e\u77e9\u9635\u4e58\u6cd5\u4e0d\u5177\u6709**\u4ea4\u6362\u5f8b**\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u53ea\u80fd**\u5de6\u4e58**\uff0c\u6216\u53ea\u80fd**\u53f3\u4e58**\u4e00\u4e2a**\u8f6c\u79fb\u77e9\u9635**\n\n**\u5de6\u4e58** \u548c **\u53f3\u4e58** \u5206\u522b\u770b\u4e2a\u4eba\u5b9e\u73b0\u7684\u662f\u4e00\u4e2a\u5217\u77e9\u9635\uff0c\u8fd8\u662f\u4e00\u4e2a\u884c\u77e9\u9635\n\n#### \u77e9\u9635\u6a21\u62df\u53d8\u5316\n\n\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7528\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837\n\n$$\\begin{bmatrix}v\\\\s\\end{bmatrix}$$\n\n$v$ \u8868\u793a\u7ef4\u62a4\u7684\u6743\u503c(\u533a\u95f4\u548c)\uff0c$s$ \u8868\u793a\u7ed3\u70b9\u7684\u5927\u5c0f\n\n***\n\n\u6309\u9898\u76ee\u4e2d\u7684\u610f\u601d\u6a21\u62df\n\n\u628a\u539f\u77e9\u9635**\u5de6\u4e58**\u4e00\u4e2a\u77e9\u9635\u6765\u5f97\u5230\u6211\u4eec\u8981\u7684\u65b0\u77e9\u9635\n\n#### \u533a\u95f4\u52a0 $x$\n\n$$\\begin{bmatrix}1&x\\\\0&1\\end{bmatrix}\\times\\begin{bmatrix}v\\\\s\\end{bmatrix}=\\begin{bmatrix}v + s \\times x\\\\s\\end{bmatrix}$$\n\n#### \u533a\u95f4\u4e58 $x$\n\n$$\\begin{bmatrix}x&0\\\\0&1\\end{bmatrix}\\times\\begin{bmatrix}v\\\\s\\end{bmatrix}=\\begin{bmatrix}v \\times x\\\\s\\end{bmatrix}$$\n\n#### \u533a\u95f4\u8d4b\u503c\u4e3a x\n\n$$\\begin{bmatrix}0&x\\\\0&1\\end{bmatrix}\\times\\begin{bmatrix}v\\\\s\\end{bmatrix}=\\begin{bmatrix}s \\times x\\\\s\\end{bmatrix}$$\n\n#### \u533a\u95f4\u6c42\u548c\n\n\u5373\u6309**\u666e\u901a**\u7684\u7ebf\u6bb5\u6811\u90a3\u6837\n\n\u628a\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684**\u77e9\u9635**\u52a0\u5728\u4e00\u8d77\u5373\u53ef\n\n***\n\n\u5bf9\u4e86\uff0c\u6700\u597d\u5199\u4e00\u4e2a\u77e9\u9635\u7c7b\uff0c\u5f04\u4e2a\u77e9\u9635**\u4e58\u6cd5**\uff0c**\u52a0\u6cd5**\u4e4b\u7c7b\u7684\n\n\u7531\u4e8e\u77e9\u9635\u8fd0\u7b97\u6709\u4e00\u4e2a $8$ \u7684\u5c0f\u5e38\u6570\uff0c\u6211\u5438\u6c27\u540e\u624d\u52c9\u5f3a\u901a\u8fc7\n\n\n[$\\color {DeepSkyBlue} Code$](https://www.luogu.org/paste/t41gxp83)\n\n```cpp\n#include <bits/stdc++.h>\n#define N 100005\n\nusing namespace std;\n\nint n, m, mod;\n\nstruct matrix {\n\tint r, c;\n\tlong long a[2][2];\n\tinline matrix(int _r = 0, int _c = 0) {\n\t\tr = _r, c = _c;\n\t\tmemset(a, 0, sizeof a);\n\t}\n\tinline bool operator != (const matrix &rhs) const {\n\t\tif(r != rhs.r || c != rhs.c) return true;\n\t\tfor(int i = 0; i < r; ++i)\n\t\t  for(int j = 0; j < c; ++j)\n\t\t  \tif(a[i][j] != rhs.a[i][j])\n\t\t  \t  return true;\n\t\treturn false;\n\t}\n\t/*\n\tfor debug\n\tinline void print() {\n\t\tfor(int i = 0; i < r; ++i) {\n\t\t  for(int j = 0; j < c; ++j)\n\t\t\tprintf(\"%lld \", a[i][j]);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n\t*/\n}e(2, 2), delta(2, 2);\ninline matrix mul(matrix A, matrix B) {\n\tmatrix C(A.r, B.c);\n\tfor(int i = 0; i < A.r; ++i)\n\t  for(int j = 0; j < B.c; ++j)\n\t\tfor(int k = 0; k < A.c; ++k)\n\t\t  C.a[i][j] += A.a[i][k] * B.a[k][j], C.a[i][j] %= mod;\n\treturn C;\n}\ninline matrix add(matrix A, matrix B) {\n\tmatrix C(A.r, A.c);\n\tfor(int i = 0; i < A.r; ++i)\n\t  for(int j = 0; j < A.c; ++j)\n\t  \tC.a[i][j] = A.a[i][j] + B.a[i][j], C.a[i][j] %= mod;\n\treturn C;\n}\n\ntemplate <typename T> inline void read(T &x) {\n\tx = 0; char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n}\n\nstruct SMT {\n#define ls(x) (x << 1)\n#define rs(x) (x << 1 | 1)\n\tmatrix sum[N << 2], tag[N << 2];\n\tinline void update(int u) { sum[u] = add(sum[ls(u)], sum[rs(u)]); }\n\tinline void pushdown(int u) {\n\t\tif(tag[u] != e) {\n\t\t\tint l = ls(u), r = rs(u);\n\t\t\tsum[l] = mul(tag[u], sum[l]), tag[l] = mul(tag[u], tag[l]);\n\t\t\tsum[r] = mul(tag[u], sum[r]), tag[r] = mul(tag[u], tag[r]);\n\t\t\ttag[u] = e;\n\t\t}\n\t}\n\tinline void build(int l, int r, int u) {\n\t\ttag[u] = e;\n\t\tsum[u].r = 2, sum[u].c = 1;\n\t\tif(l == r) {\n\t\t\tread(sum[u].a[0][0]);\n\t\t\tsum[u].a[1][0] = 1;\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(l, mid, ls(u)), build(mid + 1, r, rs(u));\n\t\tupdate(u);\n\t\treturn;\n\t}\n\tinline void modify(int ll, int rr, int l, int r, int u) {\n\t\tif(ll <= l && r <= rr) {\n\t\t\tsum[u] = mul(delta, sum[u]);\n\t\t\ttag[u] = mul(delta, tag[u]);\n\t\t\treturn;\n\t\t}\n\t\tpushdown(u);\n\t\tint mid = l + r >> 1;\n\t\tif(ll <= mid) modify(ll, rr, l, mid, ls(u));\n\t\tif(mid < rr) modify(ll, rr, mid + 1, r, rs(u));\n\t\tupdate(u);\n\t\treturn;\n\t}\n\tinline matrix query(int ll, int rr, int l, int r, int u) {\n\t\tif(ll <= l && r <= rr) return sum[u];\n\t\tpushdown(u);\n\t\tint mid = l + r >> 1;\n\t\tif(rr <= mid) return query(ll, rr, l, mid, ls(u));\n\t\telse if(mid < ll) return query(ll, rr, mid + 1, r, rs(u));\n\t\telse return add(query(ll, rr, l, mid, ls(u)), query(ll, rr, mid + 1, r, rs(u)));\n\t}\n#undef ls\n#undef rs\n}Lsk;\n\nint main() {\n\te.a[0][0] = e.a[1][1] = 1;\n\tread(n), read(m), read(mod);\n\tLsk.build(1, n, 1);\n\n\tint opt, l, r;\n\twhile(m--) {\n\t\tread(opt), read(l), read(r);\n\t\tif(opt == 3) {\n\t\t\tprintf(\"%lld\\n\", Lsk.query(l, r, 1, n, 1).a[0][0]);\n\t\t} else {\n\t\t\tdelta = e;\n\t\t\tif(opt == 1) {\n\t\t\t\tread(delta.a[0][0]);\n\t\t\t\t/*\n\t\t\t\t\tmul\n\t\t\t\t\t|x  0| |v|   |x * v|\n\t\t\t\t\t|    |*| | = |     |\n\t\t\t\t\t|0  1| |1|   |  1  |\n\t\t\t\t*/\n\t\t\t} else if(opt == 2) {\n\t\t\t\tread(delta.a[0][1]);\n\t\t\t\t/*\n\t\t\t\t\tadd\n\t\t\t\t\t|1  x| |v|   |v + x|\n\t\t\t\t\t|    |*| | = |     |\n\t\t\t\t\t|0  1| |1|   |  1  |\n\t\t\t\t*/\n\t\t\t}\n\t\t\tLsk.modify(l, r, 1, n, 1);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571218572,
        "uid": 88471,
        "name": "Lskkkno1",
        "ccfLevel": 7,
        "title": "\u7528\u77e9\u9635\u8868\u793a\u53d8\u5316&&\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635"
    },
    {
        "content": "# \u6765\u7bc7\u6e05\u65b0\u7684\u9898\u89e3\n\u6211\u611f\u89c9\u697c\u4e0a\u5404\u4f4d$dalao$\u7684\u4ee3\u7801\uff0c**\u4e9b\u8bb8\u6709\u4e9b\u4e0d\u9002\u5408\u6211\u4eec\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u840c\u65b0**\n\n\u7ebf\u6bb5\u6811\u8fd9\u79cd~~\u7b80\u6d01\u800c\u53c8\u660e\u4e86~~\u7684\u6570\u636e\u7ed3\u6784\uff0c\u663e\u7136\u8fd8\u662f**\u7528\u6570\u7ec4\u6765\u5b58\u6811\u548ctag**\u6bd4\u8f83\u597d\u554aqwq\n\n## \u6570\u7ec4\u4ecb\u7ecd\n\n- $tr[]$:\u7ebf\u6bb5\u6811\u672c\u6811(\u76f8\u5f53\u4e8e$tree[].value$)\n\n- $leaf[]$:\u53f6\u5b50\u8282\u70b9\u6682\u5b58\u6570\u7ec4\n\n- $mag(multag)[]$:\u4e58\u6cd5\u7684$LazyTag$(\u76f8\u5f53\u4e8e$tree[].mul$)\n\n- $agg(addtag)[]$:\u52a0\u6cd5\u7684$LazyTag$(\u76f8\u5f53\u4e8e$tree[].add$)\n\n## \u89e3\u6cd5\u4ecb\u7ecd\uff1a\n\n**~~\u6211\u4eec\u53c2\u80038848\u7684\u5e7f\u544a~~**\n\nA.\u6839\u636e\u4e58\u6cd5\u548c\u52a0\u6cd5\u7684\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u6240\u4ee5\u4f20$tag$\u65f6\uff0c\u5e94\u5f53\u4e24\u4e2a$tag$\u5206\u522b\u4f20\n**(\u4e24\u4e2a\u7a7a\u95f4\uff0c\u5206\u522b\u5b58\u50a8\uff0c\u4e92\u4e0d\u5e72\u6270)**\n\nB.\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5e94\u5f53\u968f\u65f6\u4fdd\u6301\u52a0\u6cd5$tag$\u548c\u4e58\u6cd5$tag$\u7684\u76f8\u5bf9\u5173\u7cfb\uff0c\u4e58\u53d8\u52a0\u4e5f\u53d8\n**\uff08\u4eba\u673a\u5206\u79bb\u5341\u7c73\u81ea\u52a8\u62a5\u8b66\uff09**\n\nC.\u8f83\u957f\u4ee3\u7801\u7684\u5c0f\u6280\u5de7\uff1a\u5c3d\u91cf\u628a\u53d6\u503c\u3001\u4f20\u503c\u7b49\u5206\u652f\u64cd\u4f5c\u52a0\u5230\u5c0f\u51fd\u6570\u91cc\uff0c\u5f53\u5199$pushdown$\u7b49\u5927\u51fd\u6570\u65f6\u76f4\u63a5\u8c03\u7528\u96c6\u6210\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5230\u5904\u662f\u4f4d\u8fd0\u7b97\u5f88\u6742\u5f88\u4e71\u7684\u60c5\u51b5\uff0c\u663e\u5f97\u7b80\u6d01\u6e05\u65b0\u8bb8\u591a\uff0c~~\u4f46\u662f\u4e0d\u538b\u884c\u4f1a\u589e\u5927\u5e38\u6570~~**\uff08\u5f88\u597d\u4e0e\u4f18\u79c0\u53ea\u5dee\u4e00\u70b9\u70b9\u8ddd\u79bb\uff0c\u8fd9\u6bb5\u8ddd\u79bb\uff0c\u53eb\u7801\u98ce\uff09**\n## \u4ee3\u7801\u89e3\u6790(\u5df2AC)\n```cpp\n//\u76f8\u4fe1\u6211\uff0c\u4f4d\u8fd0\u7b97\u771f\u7684\u4f1a\u5feb\uff01\uff01\u771f\u7684\u4e0d\u662f\u88c5B\uff01\uff01\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define il inline\n#define Maxn 100100\nusing namespace std;\nll tr[Maxn<<2],mag[Maxn<<2],aag[Maxn<<2],leaf[Maxn],n,m,md;\nll Q;\nll s,e,z;\nll ans;\nll ls(ll p)\n{\n\treturn p<<1;\n}//\u53d6\u5de6\u513f\u5b50\nll rs(ll p)\n{\n\treturn p<<1|1;\n}//\u53d6\u53f3\u513f\u5b50\nil void pushup(ll p)\n{\n\ttr[p]=(tr[ls(p)]+tr[rs(p)])%md;\n}//\u5e26\u6a21\u6570\u7684\u5411\u4e0a\u4f20\u503c\nil void pushup1(ll p)\n{\n\ttr[p]=tr[ls(p)]+tr[rs(p)];\n}//\u5efa\u6811\u4e13\u7528\uff0c\u4e0d\u5e26\u6a21\u6570\u7684\u5411\u4e0a\u4f20\u503c\nvoid build(ll p,ll l,ll r)\n{\n\tmag[p]=1;\n\tll m=(l+r)>>1;\n\tif(l==r)\n\t{\n\t\ttr[p]=leaf[l];//tr[p]=leaf[r];\n\t\treturn;\n\t}\n\tbuild(ls(p),l,m);\n\tbuild(rs(p),m+1,r);\n\tpushup1(p);\n\ttr[p]%=md;\n\treturn;\n}//\u5efa\u6811\uff0c\u6709\u4e86\u53d6\u5b50\u51fd\u6570\u975e\u5e38\u7b80\u6d01qwq\nil void pushdown(ll p,ll l,ll r)\n{\n\tll m=(l+r)>>1;\n\ttr[ls(p)]=(tr[ls(p)]*mag[p]+aag[p]*(m-l+1))%md;//\u5411\u5de6\u513f\u5b50\u4f20\u7ed3\u679c\n\ttr[rs(p)]=(tr[(rs(p))]*mag[p]+aag[p]*(r-m))%md;//\u5411\u53f3\u513f\u5b50\u4f20\u7ed3\u679c\n\tmag[ls(p)]=(mag[ls(p)]*mag[p])%md;//\u5411\u5de6\u513f\u5b50\u4f20\u4e58\u6cd5tag\n\tmag[rs(p)]=(mag[rs(p)]*mag[p])%md;//\u5411\u53f3\u513f\u5b50\u4f20\u4e58\u6cd5tag\n\taag[ls(p)]=(aag[ls(p)]*mag[p]+aag[p])%md;//\u5411\u5de6\u513f\u5b50\u4f20\u52a0\u6cd5tag\n\taag[rs(p)]=(aag[rs(p)]*mag[p]+aag[p])%md;//\u5411\u53f3\u513f\u5b50\u4f20\u52a0\u6cd5tag\n\tmag[p]=1;\n\taag[p]=0;\n}//\u552f\u4e00\u4e00\u4e2a\u7565\u663e\u590d\u6742\u7684\u51fd\u6570\uff0c\u5411\u4e0b\u4f20tag\nil void updmul(ll p,ll l,ll r,ll gl,ll gr,ll k)\n{\n\tif(gr<l||gl>r)return;//\u82e5\u4e0d\u5728\u6b64\u533a\u95f4\u5c31\u8fd4\u56de\u4e0a\u4e00\u5c42\uff0c\u4e0b\u540c\n\tif(gl<=l&&gr>=r)\n\t{\n\t\ttr[p]=(tr[p]*k)%md;\n\t\tmag[p]=(mag[p]*k)%md;\n\t\taag[p]=(aag[p]*k)%md;\n\t\treturn;\n\t}\n\tpushdown(p,l,r);\n\tll m=(l+r)>>1;\n\tupdmul(ls(p),l,m,gl,gr,k);\n\tupdmul(rs(p),m+1,r,gl,gr,k);\n\tpushup(p);\n}//\u5e38\u89c4\u64cd\u4f5c\uff0c\u533a\u95f4\u4e58\u6cd5\nil void updadd(ll p,ll l,ll r,ll gl,ll gr,ll k)\n{\n\tif(gl>r||gr<l)return;\n\tif(gl<=l&&gr>=r)\n\t{\n\t\ttr[p]=(tr[p]+(r-l+1)*k)%md;\n\t\taag[p]=(aag[p]+k)%md;\n\t\treturn;\n\t}\n\tpushdown(p,l,r);\n\tll m=(l+r)>>1;\n\tupdadd(ls(p),l,m,gl,gr,k);\n\tupdadd(rs(p),m+1,r,gl,gr,k);\n\tpushup(p);\n}//\u5e38\u89c4\u64cd\u4f5c\uff0c\u533a\u95f4\u52a0\u6cd5\nll Question(ll p,ll l,ll r,ll gl,ll gr)\n{\n\tif(gl>r||gr<l)return 0;\n\tif(gl<=l&&gr>=r)\n\t{\n\t\treturn tr[p];\n\t}\n\tpushdown(p,l,r);\n\tll m=(l+r)>>1;\n\treturn (Question(ls(p),l,m,gl,gr)+Question(rs(p),m+1,r,gl,gr))%md;\n}//\u4e2a\u4eba\u559c\u6b22\u7528Question,\u4e5f\u53ef\u4ee5\u7528query\uff0c\u533a\u95f4\u67e5\u8be2\nint main()\n{\n\tscanf(\"%lld%lld%lld\",&n,&m,&md);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&leaf[i]);\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld\",&Q);\n\t\tif(Q==1)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&s,&e,&z);\n\t\t\tupdmul(1,1,n,s,e,z);\n\t\t}\n\t\tif(Q==2)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld\",&s,&e,&z);\n\t\t\tupdadd(1,1,n,s,e,z);\n\t\t}\n\t\tif(Q==3)\n\t\t{\n\t\t\tscanf(\"%lld%lld\",&s,&e);\n\t\t\tprintf(\"%lld\\n\",Question(1,1,n,s,e));\n\t\t}\n\t}\n\treturn ~~(0-0);//(\u6c42\u8fc7)\n}\n```\n\u6211\u7684\u8fd9\u7bc7\u9898\u89e3\u867d\u7136\u89e3\u6cd5\u666e\u901a\uff0c\u4f46\u662f\u6211\u76f8\u4fe1\u8fd9\u7bc7\u9898\u89e3**\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u7406\u89e3**\uff0c\u6240\u4ee5\u8bf7\u7ba1\u7406\u5458\u6b27\u5c3c\u6851\u4eec\u8fc7\u4e00\u4e0b\u5427qwq\uff08~-\u25b3-~\uff09",
        "postTime": 1564643214,
        "uid": 93292,
        "name": "\u79bb\u5b50\u952eIonic_Bond",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u505a\u5b8c\u540eCry\u4e86\uff0c\u545c\u545c\u545c\uff0c\u64e6\u5e72\u773c\u6cea\u5199\u9898\u89e3~\n\n\u54b3\u54b3...\n\n**\u672c\u4ee3\u7801\u975e\u7ed3\u6784\u4f53~**\n\n# \u6572\u9ed1\u677f\u5566\uff01\n### \u4eca\u5929\u5c31\u8ba9\u672c **\u849f\u84bb** \u5e26\u9886\u60a8 \u5b8c\u5168\u89e3\u8bfb\u4ee3\u7801\u5427\uff08\u7528 \u849f\u84bb \u7684\u601d\u7ef4\u770b\u4e16\u754c~\uff09\n1. \u524d\u8a00\uff1a\u770b\u4e86\u4e00\u4e0b\u5404\u4f4d\u5927\u4f6c\u5199\u7684\u4ee3\u7801\u6211\u662f\u975e\u5e38\u975e\u5e38\u7684\u4f69\u670d\uff0c\u4f46\u6211\u770b\u4e86\u4e00\u4e0b\u5927\u591a\u6570\u90fd\u4f7f\u7528\u4e86\u201c\u7ed3\u6784\u4f53\u201d\uff08struct..\uff09\u6240\u4ee5\u6211\u5c31\u5199\u4e86\u4e00\u4efd\u4e0d\u7528\u201c\u7ed3\u6784\u4f53\u201d\u7684\u4ee3\u7801\uff0c\u7b80\u4ecb\u6613\u61c2\uff0c\u9002\u7528\u4e8e\uff08\u57281s\u524d\u521a\u521a\u5b66\u4f1a\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811(\u5373\u533a\u95f4\u6c42\u548c\u548c\u533a\u95f4\u8be2\u95ee\uff0c\u4ec5\u4ec5\u662f\u5bf9\u4e8e\u67d0\u533a\u95f4\u52a0\u6cd5\u7684\u8fa3\u79cd\uff09\uff09\n1. \u51c6\u5907\u9636\u6bb5\uff1a\u82e5\u60a8**\u4e00\u70b9**\u90fd\u4e0d\u4e86\u89e3\u201c\u7ebf\u6bb5\u6811\u201d\u7684\u8bdd\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u5148\u628a\u6b64\u9898\u76ee\u505a\u51fa\u6765\uff1ahttps://www.luogu.org/problemnew/show/P3372  \u3002\u60a8\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u6863\u5165\u95e8\uff08\u8bf7\u770b\u6700\u524d\u9762\u70b9\u8d5e\u6570\u8d85\u8fc71000+\u7684\u8fa3\u4e00\u4f4d\uff0c\u4f5c\u8005\uff1a_\u768e\u6708\u534a\u6d12\u82b1\uff09\uff1ahttps://www.luogu.org/problemnew/solution/P3372\n\n\n### \u518d\u8c08\u7ebf\u6bb5\u6811\uff1a\n\u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u4e00\u5f00\u59cb\u6211\u89c9\u5f97\u6700\u96be\u7684\u5c31\u662f\uff08lazy_tag\u5ef6\u8fdf\u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u60a8\u770b\u5230\u7684add\u6570\u7ec4\uff0cmul\u6570\u7ec4\uff09\uff0c\u8fd9\u662f\u4ec0\u4e48\u4e1c\u897f\u554a\uff0c\u5185\u5fc3\u662f\u62d2\u7edd\u7684\uff0c\u6211\u60f3\uff1a**\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u987a\u4fbf\u628a\u6240\u6709\u7684\u5b50\u8282\u70b9\u5168\u90e8\u66f4\u65b0\u4e0d\u5c31OK\u4e86\u5417**\uff1f\u4f46\u662f\u540e\u6765\u518d\u60f3\u60f3\uff0c\u8fd9\u6837\u505a\u662f\u5f88\u6d6a\u8d39\u6ef4\uff08\u6d6a\u8d39\u662f\u53ef\u803b\u7684\u54e6~\uff09\uff0c\u56e0\u4e3a\u60a8\u770b\uff08\u89c1\u4e0b\u56fe\uff09\uff0c\u5f53\u6211\u4eec\u60f3\u8981\u77e5\u9053sum[1..6]\u7684\u65f6\u5019\uff0c\u60a8\u53ea\u9700\u8981\u8be2\u95ee1\u53f7\u8282\u70b9\u5373\u53ef\uff0c\u65e0\u8bba\u662f\u4fee\u6539\u8fd8\u662f\u8be2\u95ee\uff0c\u5176\u5b9e\u5f88\u591a\u5b50\u8282\u70b9\u5982\u679c\u4e0d\u9700\u8981\uff0c**\u60a8\u662f\u6ca1\u6709\u5fc5\u8981\u53bb\u4fee\u6539\u5b83\u7684**\uff0c\u60a8\u53ef\u4ee5\u7528\u6570\u7ec4\uff08add\u6570\u7ec4\uff0cmul\u6570\u7ec4\uff0c\u5373\u5ef6\u8fdf\u6807\u8bb0\uff09\u628a\u5b83\u4eec\u6682\u65f6\u5b58\u50a8\u8d77\u6765\uff0c\u5f53\u60a8\u60f3\u8981\u7528\u9053\u7684\u65f6\u5019\uff0c\u5728\u4e00\u8d77\u66f4\u65b0\u5b50\u8282\u70b9\uff0c\u751a\u81f3\u5bf9\u4e8e\u591a\u6b21\u4fee\u6539\u65f6\u5019\u66f4\u52a0\u5de7\u5999\uff0c\u82e5\u60a8\u60f3\u4e24\u6b21\u4fee\u6539\u533a\u95f4\u540c\u4e00\u4e2a\u533a\u95f4[1..2]\u65f6\uff0c\u5373\u6253\u4e86\u4e24\u6b21\u5ef6\u8fdf\u6807\u8bb0\uff0c\u5373\u66f4\u52a0\u8282\u7701\u65f6\u95f4\uff0c\u66f4\u80fd\u4f53\u73b0\u5b83\u7684\u4f5c\u7528\uff0c\u5728\u5f80\u4e0b\u63a8\u5e7f\uff0c\u5373\u591a\u4e2a\u533a\u95f4\u4e2d\u6709\u4ea4\u96c6\uff0c\u5219\u5176\u4e2d\u6709\u7ebf\u6bb5\u6811\u8282\u70b9\u662f\u88ab\u91cd\u590d\u4fee\u6539\u7684\uff0c\u6240\u4ee5\u4f7f\u7528\u5ef6\u8fdf\u6807\u8bb0**\u7b49\u4e0b\u6b21\u7528\u5230\u7684\u65f6\u5019\u518d\u66f4\u65b0**\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u5ef6\u8fdf\u6807\u8bb0\u6765\u907f\u514d\u591a\u6b21\u66f4\u65b0\uff0c\u51cf\u5c11\u6d6a\u8d39\u3002\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a**\u52a8\u6001**\uff08\u8fd9\u4e2a\u8bcd\u662f\u5728\u672c\u849f\u84bb\u7ede\u5c3d\u8111\u6c41\u60f3\u51fa\u6765\u7684\uff0c\u672a\u77e5\u662f\u5426\u89c4\u8303\uff09\u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/41831.png )\n\n### \u518d\u8c08\u6b64\u9898\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u9053\u7684\u662f\uff0c\u9898\u76ee\u4e2d\u591a\u4e86\u4e00\u4e2a\u8ba9\u533a\u95f4\u4e58\u6cd5\u7684\u64cd\u4f5c\uff0cWhat?\u4ec0\u4e48\u73a9\u610f\uff0c\u5934\u8111\u987f\u65f6\u5931\u4e86\u667a~\n\n\u7b49\u51b7\u9759\u4e0b\u6765\u60a8\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u4e8b\u5b9e\uff1a\uff08\u89c1\u4e0b\u56fe\uff09\n![](https://cdn.luogu.com.cn/upload/pic/41841.png)\n\u6700\u540e\u60a8\u9700\u8981\u66f4\u65b0\u5bf9\u5e94\u7684\u8282\u70b9\u503c\uff1atr[p]=( tr[p]Xmulk+(r-l+1)Xsumk)%mo;\uff08\u201cX\u201d\u662f\u4e58\u6cd5\u7684\u610f\u601d\uff09\n\n\u5f53\u7136\u60a8\u4f1a\u53d1\u73b0\uff1a\n```\nll query(ll p,ll l,ll r,ll x,ll y){\n    if (x<=l&&r<=y) return tr[p] ;\n    pushdown(p,l,r);\n    ll mid=(l+r)/2,res=0;\n    if (x<=mid) res+=query(p*2,l,mid,x,y);\n    if (mid<y) res+=query(p*2+1,mid+1,r,x,y);\n    return res%mo;\n}\n```\n\u5728\u6700\u540e\u6ca1\u6709\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684\u503c\uff08\u201ctr[p]=( tr[p]Xmulk+(r-l+1)Xsumk)%mo;\uff08\u201cX\u201d\u662f\u4e58\u6cd5\u7684\u610f\u601d\uff09\u201d\uff09\uff1a\u8fd9\u662f\u56e0\u4e3a\u60a8\u5e76\u6ca1\u6709\u4fee\u6539\u5b50\u8282\u70b9\uff0c\u6545\u65e0\u9700\u91cd\u65b0\u8ba1\u7b97\u3002\n\nADD\u51fd\u6570\u5373\u7b97\u51fa\u5bf9\u5e94\u8282\u70b9\u5e94\u8be5\u6709\u7684\u503c\uff0c\u548c\u5bf9\u5e94\u7684add\uff0cmul\uff08\u5ef6\u8fdf\u6807\u8bb0\uff09\u6ce8\u610f\uff0c\u6b64\u51fd\u6570\u4e0d\u4ec5\u5728pushdown\u4e2d\u88ab\u4f7f\u7528\u4e86\u4e00\u6b21\uff0c\u5728\u4ee5change\u5f00\u5934\u7684\u51fd\u6570\u4e2d\u5747\u6709\u8c03\u7528\u3002\nchangesum\u662f\u7b97\u52a0\u6cd5\uff1bchangemul\u7b97\u7684\u662f\u4e58\u6cd5\u3002\n\n\u603b\u517184\u884c\uff0c**~~\u56e0\u4e3a\u601d\u8def\u8fc7\u4e8e\u6e05\u6670\uff0c\u4ee3\u7801\u8fc7\u4e8e\u7b80\u6d01\u65e0\u9700\u6ce8\u91ca~~**\u3002\n\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define N 10000005 \nusing namespace std;\nll a[N],tr[N*4],mo,mul[N*4],add[N*4],n,m;\nvoid build(ll p,ll l,ll r){//\u6211\u4e0d\u662f\u6ce8\u91ca\uff1a\u5efa\u9020\n\tmul[p]=1;\n\tif (l==r){\n\t\ttr[p]=a[l];\n\t\treturn ;\n\t}\n\tll mid=(l+r)/2;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\ttr[p]=(tr[p*2]+tr[p*2+1])%mo;\n\treturn ;\n}\nvoid ADD(ll p,ll l,ll r,ll mulk,ll sumk){\n\ttr[p]=(tr[p]*mulk+(r-l+1)*sumk)%mo;\n\tadd[p]=(add[p]*mulk+sumk)%mo;\n\tmul[p]=(mul[p]*mulk)%mo;\n\treturn ;\n}\nvoid pushdown(ll p,ll l,ll r){\n\tll mid=(l+r)/2;\n\tADD(p*2,l,mid,mul[p],add[p]);//\u6211\u4e0d\u662f\u6ce8\u91ca\uff1a\u4e0b\u4f20\u9012\u4e24\u4e2a\u5b57\u8282\u70b9\n\tADD(p*2+1,mid+1,r,mul[p],add[p]);\n\tadd[p]=0;\n\tmul[p]=1;\n\treturn ;\n}\nvoid changemul(ll p,ll l,ll r,ll x,ll y,ll v){\n\tif (x<=l&&r<=y){\n\t\tADD(p,l,r,v,0);\n\t\treturn ;\n\t}\n\tpushdown(p,l,r);\n\tll mid=(l+r)/2;\n\tif (x<=mid) changemul(p*2,l,mid,x,y,v);//\u6211\u4e0d\u662f\u6ce8\u91ca\uff1a\u770b\u662f\u5426\u8fd8\u6709\u5305\u542b\u7684\u4ea4\u96c6\uff0c\u4e0b\u540c\u7406\n\tif (mid<y) changemul(p*2+1,mid+1,r,x,y,v);\n\ttr[p]=(tr[p*2]+tr[p*2+1])%mo;\n}\nvoid changesum(ll p,ll l,ll r,ll x,ll y,ll v){\n\tif (x<=l&&r<=y){\n\t\tADD(p,l,r,1,v);\n\t\treturn ;\n\t}\n\tpushdown(p,l,r);\n\tll mid=(l+r)/2;\n\tif (x<=mid) changesum(p*2,l,mid,x,y,v);\n\tif (mid<y) changesum(p*2+1,mid+1,r,x,y,v);\n\ttr[p]=(tr[p*2]+tr[p*2+1])%mo;\n}\nll query(ll p,ll l,ll r,ll x,ll y){//\u6211\u4e0d\u662f\u6ce8\u91ca\uff1a\u533a\u95f4\u8be2\u95ee\n    if (x<=l&&r<=y) return tr[p] ;\n    pushdown(p,l,r);\n    ll mid=(l+r)/2,res=0;\n    if (x<=mid) res+=query(p*2,l,mid,x,y);\n    if (mid<y) res+=query(p*2+1,mid+1,r,x,y);\n    return res%mo;\n}\nint main(){\n    scanf(\"%lld %lld %lld\",&n,&m,&mo);//\u6211\u4e0d\u662f\u6ce8\u91ca\uff1a\u6ce8\u610f%lld\n\tfor (ll i=1;i<=n;i++)\n\tscanf(\"%lld\",&a[i]);\n\tbuild(1,1,n);\n\tfor (ll i=1;i<=m;i++){\n\t\tll n1=0;ll x,y,k;\n\t\tscanf(\"%lld\",&n1);\n\t    if (n1==1){\n\t    \tscanf(\"%lld %lld %lld\",&x,&y,&k);\n\t    \tchangemul(1,1,n,x,y,k);\n\t\t}\n\t\tif (n1==2){\n\t\t\tscanf(\"%lld %lld %lld\",&x,&y,&k);\n\t\t\tchangesum(1,1,n,x,y,k);\n\t\t}\n\t\tif (n1==3){\n\t\t\tscanf(\"%lld %lld\",&x,&y);\n\t\t\tprintf(\"%lld\\n\",query(1,1,n,x,y));\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\n\u87f9\u87f9\uff0cmomoda~",
        "postTime": 1541256671,
        "uid": 28764,
        "name": "\u5343\u68a6\u7fbd\u7ffc",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5b9e\u5728\u6076\u5fc3\uff0c2 9 10\u4e09\u4e2a\u6570\u636e\u70b9\u7b80\u76f4\u4e27\u5fc3\u75c5\u72c2\uff0c\u5f3a\u884c\u5361\u5e38\u7ec8\u4e8e\u8fc7\u4e86\u3002\u770b\u5230\u6ca1\u6709splay\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u5c31\u6765\u5f00\uff08hua\uff09\u5fc3\uff08ji\uff09\u5730\u53d1\u4e00\u6ce2\u9898\u89e3\u3002\n\n\u5173\u4e8esplay\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u6ca1\u5fc5\u8981\u8bb2\u4e86\u5427\u3002\u7136\u540e\u8fd9\u9053\u9898\u662f\u8981\u533a\u95f4\u4fee\u6539\u7684\uff0c\u548c\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\u7684\u601d\u8def\uff0c\u7528\u4e24\u4e2a\u6807\u8bb0\uff1a\u52a0\u6cd5\u6807\u8bb0\u548c\u4e58\u6cd5\u6807\u8bb0\uff0c\u65cb\u8f6c\u524d\u4e0b\u4f20\u6807\u8bb0\u5c31\u884c\u4e86\u3002\u81f3\u4e8e\u600e\u4e48\u65cb\u8f6c\u624d\u80fd\u8fdb\u884c\u4fee\u6539\uff0c\u6211\u662f\u8fd9\u6837\u505a\u7684\u3002\u6bd4\u5982\u8981\u8bbf\u95ee\u7684\u533a\u95f4\u662f[l,r],\u6211\u5c31\u628al-1\u65cb\u5230\u6839\uff0cr+1\u65cb\u5230\u6839\u7684\u53f3\u8282\u70b9\uff0c\u8fd9\u6837\u5b50r+1\u73b0\u5728\u4f4d\u7f6e\u7684\u5de6\u5b50\u6811\u521a\u597d\u5c31\u662f\u6211\u4eec\u8981\u8bbf\u95ee\u7684\u533a\u95f4\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u968f\u4fbf\u778e\u641e\u4e86\u3002\u56e0\u4e3a\u662f\u8981\u65cbl-1,r+1,\u6240\u4ee5\u8981\u5f001\u7684\u4f4d\u7f6e\u548cn+2\u7684\u4f4d\u7f6e\u3002\uff08\u8fd9\u91cc\u6211\u5f00\u7684\u662f0\u548cn+1\u7684\u4f4d\u7f6e\uff0c\u4f46\u539f\u7406\u4e00\u6837\uff09\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\u3002\uff08\u7136\u540e\u6211\u6709\u70b9\u61d2\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u6240\u6709int\u6539\u6210long long\uff09\n\nval\u662f\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0ctag1\u662f\u4e58\u6cd5\u6807\u8bb0\uff0ctag2\u662f\u52a0\u6cd5\u6807\u8bb0\uff0cson\u8bb0\u5f55\u513f\u5b50\uff0cfa\u8bb0\u5f55\u7236\u4eb2\uff0csize\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u4e0b\u9762\u7684\u603b\u8282\u70b9\u6570\uff08\u4fee\u6539\u533a\u95f4\u7528\u7684\uff09\uff0ctot\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u4e0b\u9762\u7684\u603b\u8282\u70b9\u503c\u7684\u548c\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define LL long long\n#define res register LL\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline LL read(){\n    res s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}//\u5feb\u8bfb\uff0c\u80fd\u5361\u591a\u5c11\u662f\u591a\u5c11\ninline void write(res x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\nconst int N=1e6+10;\nstruct mdzz{\n    LL val,tag1,tag2,son[2],fa,size,tot;\n}tr[N];\nLL root,a[N],sum,p;\ninline void add1(res x,res ll){\n    if(!x)return;\n    tr[x].val=(tr[x].val*ll)%p;\n    tr[x].tag2=(tr[x].tag2*ll)%p;//\u4e58\u6cd5\u4e0b\u4f20\u65f6\u8981\u6ce8\u610f\u52a0\u6cd5\u6807\u8bb0\u4e5f\u8981\u4fee\u6539\n    tr[x].tag1=(tr[x].tag1*ll)%p;\n    tr[x].tot=tr[x].tot*ll%p;\n}//\u4e58\u6cd5\u6807\u8bb0\u4e0b\u4f20\ninline void add2(res x,res ll){\n    if(!x)return;\n    tr[x].val=(tr[x].val+ll)%p;\n    tr[x].tag2=(tr[x].tag2+ll)%p;\n    tr[x].tot=(tr[x].tot+ll*tr[x].size)%p;\n}//\u52a0\u6cd5\u6807\u8bb0\u4e0b\u4f20\ninline void pushdown(res x){\n    if(tr[x].tag1!=1){\n        add1(tr[x].son[0],tr[x].tag1);\n        add1(tr[x].son[1],tr[x].tag1);\n        tr[x].tag1=1;//\u6ce8\u610f\u8fd9\u4e2a1\uff0c\u6211\u521a\u5f00\u59cb\u6253\u6210\u4e860\uff0c\u8c03\u4e86\u534a\u5929\n    }//\u770b\u770b\u6709\u6ca1\u6709\u4e58\u6cd5\u6807\u8bb0\uff0c\u6709\u5c31\u4f20\n    if(tr[x].tag2){\n        add2(tr[x].son[0],tr[x].tag2);\n        add2(tr[x].son[1],tr[x].tag2);\n        tr[x].tag2=0;\n    }//\u770b\u6709\u6ca1\u6709\u52a0\u6cd5\u6807\u8bb0\uff0c\u6709\u5c31\u4f20\n}\ninline LL kth(res k){\n    res x=root,tmp;\n    while(true){\n        pushdown(x);\n        tmp=tr[tr[x].son[0]].size+1;\n        if(k==tmp)return x;\n        if(k<tmp)x=tr[x].son[0];\n        else k-=tmp,x=tr[x].son[1];\n    }\n}//\u627e\u539f\u5e8f\u5217\u7684\u6570\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\ninline void pushup(res x){\n    tr[x].size=1;\n    tr[x].tot=tr[x].val;\n    if(tr[x].son[0]){\n        tr[x].tot=(tr[x].tot+tr[tr[x].son[0]].tot)%p;\n        tr[x].size+=tr[tr[x].son[0]].size;\n    }\n    if(tr[x].son[1]){\n        tr[x].tot=(tr[x].tot+tr[tr[x].son[1]].tot)%p;\n        tr[x].size+=tr[tr[x].son[1]].size;\n    }\n}//\u65e5\u5e38\u4e0a\u4f20\ninline void rotate(res x){\n    res y=tr[x].fa,w=tr[y].son[1]==x;\n    tr[y].son[w]=tr[x].son[w^1];\n    if(tr[x].son[w^1])tr[tr[x].son[w^1]].fa=y;\n    if(tr[y].fa){\n        LL z=tr[y].fa;\n        if(tr[z].son[0]==y)tr[z].son[0]=x;\n        if(tr[z].son[1]==y)tr[z].son[1]=x;\n    }\n    tr[x].fa=tr[y].fa;\n    tr[x].son[w^1]=y;\n    tr[y].fa=x;\n    pushup(y);\n}//\u65e5\u5e38\u65cb\u8f6c\ninline void splay(res x,res w){\n    res s=1,i=x,y;\n    a[1]=x;\n    while(tr[i].fa)a[++s]=i=tr[i].fa;\n    while(s)pushdown(a[s--]);\n    while(tr[x].fa!=w){\n        y=tr[x].fa;\n        if(tr[y].fa!=w){\n            if((tr[tr[y].fa].son[0]==y)^(tr[y].son[0]==x))rotate(x);\n            else rotate(y);\n        }\n        rotate(x);\n    }\n    if(!w)root=x;\n    pushup(x);\n}//\u65e5\u5e38splay\ninline LL build(res l,res r,res father){\n    res x=++sum,mid=(l+r)>>1;\n    tr[x].fa=father;\n    tr[x].val=a[mid];\n    tr[x].tag1=1;\n    if(l<mid)tr[x].son[0]=build(l,mid-1,x);\n    if(r>mid)tr[x].son[1]=build(mid+1,r,x);\n    pushup(x);\n    return x;\n}//\u5efa\u6811\uff0c\u8fd9\u91cc\u76f4\u63a5\u5efa\u4e86\u4e00\u68f5\u5b8c\u7f8e\u7684\u6811\uff08\u5e73\u65f6\u6211\u90fd\u662f\u76f4\u63a5insert\u7684\uff09\nint main(){\n    res n,m,opt,le,ri,v;\n    n=read();m=read();p=read();\n    for(res i=1;i<=n;i++)a[i]=read();\n    root=build(0,n+1,0);//\u591a\u5f00\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u6211\u5f00\u7684\u662f0\u548cn+1\n    while(m--){\n        opt=read();\n        if(opt==1){\n            le=read();ri=read();v=read();\n            le=kth(le);ri=kth(ri+2);\n//\u56e0\u4e3a\u6211\u5f00\u7684\u662f0\u548cn+1\uff0c\u6240\u4ee5\u8fd9\u91ccl-1\u548cr+1\u90fd\u8981\u52a0\u4e00\uff0c\u6240\u4ee5\u662fkth(le)\u548ckth(ri+2)\n            splay(le,0);splay(ri,le);//\u4e0b\u9762\u90fd\u662f\u540c\u7406\u7684\n            add1(tr[ri].son[0],v);\n        }\n        if(opt==2){\n            le=read();ri=read();v=read();\n            le=kth(le);ri=kth(ri+2);\n            splay(le,0);splay(ri,le);\n            add2(tr[ri].son[0],v);\n        }\n        if(opt==3){\n            le=read();ri=read();\n            le=kth(le);ri=kth(ri+2);\n            splay(le,0);splay(ri,le);\n            write(tr[tr[ri].son[0]].tot%p),puts(\"\");\n        }\n    }\n    return 0;\n}\n```\n\n\u66b4\u529b\u5361\u8fc7\u53bb\u4e86......",
        "postTime": 1523180677,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "LG P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011\uff08splay\u5927\u6cd5\u597d\uff09"
    },
    {
        "content": "\u770b\u9898\u89e3\u91cc\u5199\u5206\u5757\u7684\u6bd4\u8f83\u5c11\uff0c\u597d\u4e0d\u5bb9\u6613\u770b\u5230\u4e00\u4f4d\u8fd8\u6709\u70b9\u96be\u61c2\uff0c\u4e8e\u662f\u6211\u4e0b\u5b9a\u51b3\u5fc3\u514b\u670d\u4e00\u5207\u56f0\u96be\u4e5f\u8981\u628a\u5206\u5757\u7ed9\u8c03\u51fa\u6765\uff01\n\n\u7136\u540e\u5c31\u8c03\u51fa\u6765\u4e86......\n\n\u5982\u679c\u6709\u5174\u8da3\u8005\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u672c\u9898\u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c~~\u8fd8\u4e0d\u600e\u4e48\u60e8\u70c8\u3002~~\u90a3\u53eb\u4e00\u4e2a\u60e8\u554a\uff01\n\n~~\u8c01\u53eb\u6211\u5199\u5206\u5757\u5462......\u597d\u50cf\u662fzhangchi......~~\n\n\u611f\u8c22zhangchi\u5bf9\u6211\u7cbe\u795e\u4e0a\u7684\u652f\u6301\u3002\n\n\u7528\u5206\u5757\u5c31\u6bd4\u8f83\u597d\u5199\u4e86\uff0c\u57fa\u672c\u4e0a\u65e0\u96be\u70b9\uff0c\u53ea\u9700\u7a0d\u7a0d\u6ce8\u610f\u4e0b\u6574\u4e2a\u5757\u7684\u6807\u8bb0\uff0c\u9002\u5ea6\u5c06\u6807\u8bb0\u4e0b\u4f20\u5373\u53ef\u3002\n\n\u90a3\u4e3a\u4ec0\u4e48\u6211\u8fd9\u9898\u8c03\u4e86\u4e24\u5929\u534a\u5462\uff1f\n\n\u5e9f\u8bdd\u5f53\u7136\u662f\u5de8\u5927\u7684\u5e38\u6570\u4e86......\n\n\u8fd9\u91cc\u5c31\u5341\u5206\u8003\u9a8c\u6211\u4eec\u7684~~\u5361\u5e38\u6280\u5de7~~\u5199\u9898\u4e60\u60ef\u4e86\u3002\u591a\u52a0inline\u3001register\uff0c\u5c11\u53d6\u6a21\uff0c\u9002\u5ea6\u4e0b\u4f20\u6807\u8bb0\uff0c~~\u518d\u624b\u52a8\u5f00O3......~~\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8fd9\u9898\u5c31\u7b97\u4f60\u52a0\u4e0a\u518d\u591a\u4f18\u5316\uff0c\u8fd8\u662f\u6ca1\u6cd5\u8fc7\u3002\n\n\u8fd8\u80fd\u600e\u4e48\u529e\uff1f\u5438\u6c27\u554a\uff01~~\u6c27\u6c14\u5c31\u662f\u751f\u547d\u554a\uff01~~\n\n~~\u770b\u6211\u5982\u4f55\u5361\u5e38\uff01~~\u9644\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define f(x) ((x-1)/p+1)//\u5224\u65ad\u5728\u7b2c\u51e0\u4e2a\u5757\u5185\nusing namespace std;\nchar buf[70000000];\nint n,m,tot[1000010],p,mod,cnt=0;//tot\u4e3a\u5404\u5757\u5185\u5143\u7d20\u6570\u91cf\nlong long a[1000010],lzta[1000010],lztm[1000010],sum[1000010],ans;//a\u4e3a\u539f\u59cb\u6570\u7ec4\uff0clzta\u4e3a\u52a0\u6807\u8bb0\uff0clztm\u4e3a\u4e58\u6807\u8bb0\uff0csum\u4e3a\u5404\u4e2a\u5757\u7684\u548c\u3002\ntemplate<typename T> inline T read(T a){\n\tT w=0,l=1;char ch=buf[cnt++];\n\twhile(!isdigit(ch)){if(ch=='-') l=-1;ch=buf[cnt++];}\n\twhile(isdigit(ch)){w=(w<<3)+(w<<1)+ch-48;ch=buf[cnt++];}\n\treturn w*l;\n}\ntemplate<typename T> inline void writing(T x){\n    if(x<0) {putchar('-');writing(-x);return;}\n    if(x>9) writing(x/10);\n    putchar(x%10+48);\n}\ninline void pushdown(int x){//\u6807\u8bb0\u4e0b\u4f20\uff08\u7528\u91cf\u9002\u5ea6\uff09\n    for(register int i=x;f(x)==f(i);i++)\n        a[i]=(a[i]*lztm[f(x)]+lzta[f(x)])%mod;\n    for(register int i=x-1;f(x)==f(i);i--)\n        a[i]=(a[i]*lztm[f(x)]+lzta[f(x)])%mod;\n    lztm[f(x)]=1,lzta[f(x)]=0;\n}\nint main(){\n    fread(buf,1,70000000,stdin);//\u4e3a\u4e86\u5361\u5e38\u6211\u90fd\u628a\u7ec8\u6781\u8bfb\u5165\u4f18\u5316\u7528\u4e0a\u4e86\uff01\n    n=read(n);m=read(m);mod=read(mod);\n    p=sqrt(n);\n    for(register int i=1;i<=n;i++){\n        a[i]=read(a[i]);\n        sum[f(i)]+=a[i],tot[f(i)]++,lztm[f(i)]=1;\n    }\n    \n    while(m--){\n        int odr=read(odr);\n        if(odr==1){\n            int x=read(x);\n            int y=read(y);\n            long long w=read(w);\n            pushdown(x);\n            if(f(x)==f(y)){//\u5982\u679c\u5728\u540c\u4e00\u5757\u5185\u5c31\u66b4\u529b\n                for(register int i=x;i<=y;i++){\n                    sum[f(i)]+=a[i]*(w-1),a[i]*=w,a[i]%=mod;\n                }\n                sum[f(x)]%=mod;\n            }\n            else{//\u4e0d\u5728\u540c\u4e00\u5757\u5185\u5c31\u628a\u6574\u5757\u7684\u90fd\u8ba1\u7b97\u5b8c\u4e86\u518d\u66b4\u529b\u5269\u4e0b\u7684\n                pushdown(y);\n                for(register int i=x;f(i)==f(x);i++){\n                    sum[f(i)]+=a[i]*(w-1),a[i]*=w,a[i]%=mod;\n                }\n                sum[f(x)]%=mod;\n                for(register int i=y;f(i)==f(y);i--){\n                    sum[f(i)]+=a[i]*(w-1),a[i]*=w,a[i]%=mod;\n                }\n                sum[f(y)]%=mod;\n                for(register int i=f(x)+1;i<f(y);i++){\n                    sum[i]*=w,sum[i]%=mod,lztm[i]*=w,lztm[i]%=mod,lzta[i]*=w,lzta[i]%=mod;\n                }\n            }\n        }\n        if(odr==2){\n            int x=read(x);\n            int y=read(y);\n            long long w=read(w);\n            pushdown(x);\n            if(f(x)==f(y)){\n                for(register int i=x;i<=y;i++){\n                    a[i]+=w,sum[f(i)]+=w;\n                }\n                sum[f(x)]%=mod;\n            }\n            else{\n                pushdown(y);\n                for(register int i=x;f(i)==f(x);i++){\n                    a[i]+=w,sum[f(i)]+=w;\n                }\n                sum[f(x)]%=mod;\n                for(register int i=y;f(i)==f(y);i--){\n                    a[i]+=w,sum[f(i)]+=w;\n                }\n                sum[f(y)]%=mod;\n                for(register int i=f(x)+1;i<f(y);i++){\n                    sum[i]+=w*tot[i],lzta[i]+=w;\n                }\n            }\n        }\n        if(odr==3){\n            int x=read(x);\n            int y=read(y);\n            ans=0;\n            if(f(x)==f(y)){\n                for(register int i=x;i<=y;i++){\n                    ans+=(a[i]*lztm[f(i)]+lzta[f(i)]);\n                }\n            }\n            else{\n                for(register int i=x;f(i)==f(x);i++){\n                    ans+=(a[i]*lztm[f(i)]+lzta[f(i)]);\n                }\n                for(register int i=y;f(i)==f(y);i--){\n                    ans+=(a[i]*lztm[f(i)]+lzta[f(i)]);\n                }\n                for(register int i=f(x)+1;i<f(y);i++){\n                    ans+=sum[i];\n                }\n            }\n            writing(ans%mod);\n            putchar('\\n');\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1534750802,
        "uid": 30094,
        "name": "Ultraman_Z",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "###    \u4e24\u4e2alazy_tag\u7684\u539f\u56e0\u4e3b\u8981\u662f\u52a0\u6cd5\u548c\u4e58\u6cd5\u96be\u4ee5\u540c\u65f6\u7ef4\u62a4\uff0c\u5e76\u4e14\u4f18\u5148\u7ea7\u4e0d\u540c\uff1b\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\u4e00\u4e0b \n   \n    #include<bits/stdc++.h>\n    #define lson (o<<1)\n    #define rson (o<<1|1)\n    using namespace std;\n    int n,m,p,x,y,ch;\n    long long k,a[100007];\n    struct node{\n    long long v, mul, add;\n    }st[400007];\n    void build(int o, int l, int r){\n        st[o].mul=1;//\u521d\u59cb\u72b6\u6001 \n        st[o].add=0;\n        if(l==r){st[o].v=a[l];return;}//\u8d4b\u503c \n\t    int m=(l+r)>>1; \n\t    build(lson,l,m);//\u5efa\u5de6\u53f3\u5b50\u6811 \n        build(rson,m+1,r);\n        st[o].v=st[lson].v+st[rson].v;//\u6c42\u548c \n        st[o].v%=p;\n    }\n    void pushdown(int o,int l,int r){//\u4e0b\u653elazy_tag \n        int m=(l+r)>>1; \n        st[lson].v=(st[lson].v*st[o].mul+st[o].add*(m-l+1))%p;//\u4e0b\u653e \n        st[rson].v=(st[rson].v*st[o].mul+st[o].add*(r-m))%p; \n        st[lson].mul=(st[lson].mul*st[o].mul)%p;//\u4fee\u6539\u4e58\u6cd5\u6807\u8bb0 \n        st[rson].mul=(st[rson].mul*st[o].mul)%p;\n        st[lson].add=(st[lson].add*st[o].mul+st[o].add)%p;//\u4fee\u6539\u52a0\u6cd5\u6807\u8bb0 \n        st[rson].add=(st[rson].add*st[o].mul+st[o].add)%p;\n        st[o].mul=1;//\u6062\u590d\u521d\u59cb\u72b6\u6001 \n        st[o].add=0;\n    }\n    void update(int o,int l,int r,int left,int right,long long k){//\u533a\u95f4\u4e58\n    if(l>=left&&r<=right){//\u4fee\u6539\u533a\u95f4\u548c\u3001\u52a0\u6cd5\u548c\u4e58\u6cd5\u6807\u8bb0 \n        st[o].v=(st[o].v*k)%p;\n        st[o].mul=(st[o].mul*k)%p;\n        st[o].add=(st[o].add*k)%p;\n        return;\n    }\n    pushdown(o,l,r);//\u4e0b\u653e \n    int m=(l+r)>>1;\n    if(m>=left)update(lson,l,m,left,right,k); //\u7b26\u5408\u6761\u4ef6\u5c31\u7ee7\u7eed\u9012\u5f52 \n    if(m<right)update(rson,m+1,r,left,right,k);\n    st[o].v=(st[lson].v+st[rson].v)%p;\n    }\n    void update1(int o,int l,int r,int left,int right,long long k){//\u533a\u95f4\u52a0 \n    if(l>=left&&r<=right){//\u4fee\u6539\u533a\u95f4\u548c\u548c\u52a0\u6cd5\u6807\u8bb0 \n        st[o].add=(st[o].add+k)%p;\n        st[o].v=(st[o].v+k*(r-l+1))%p;\n        return;\n    }\n    pushdown(o,l,r);//\u4e0b\u653e \n    int m=(l+r)>>1;\n\tif(m>=left)update1(lson,l,m,left,right,k); //\u7b26\u5408\u6761\u4ef6\u5c31\u7ee7\u7eed\u9012\u5f52 \n    if(m<right)update1(rson,m+1,r,left,right,k);\n    st[o].v=(st[lson].v+st[rson].v)%p;\n    }\n    long long query(int o,int left,int right,int l,int r){//\u533a\u95f4\u6c42\u548c \n    if(r<left||right<l)return 0;\n    if(l<=left&&right<=r)return st[o].v;\n    pushdown(o,left,right);\n    int m=(left+right)/2;\n    return (query(lson,left,m,l,r)+query(rson,m+1,right,l,r))%p;\n    }\n    int main(){\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for(int i=1;i<=n;i++)\n        scanf(\"%lld\",&a[i]);\n    build(1,1,n);\n    while(m--){\n        scanf(\"%d\",&ch);\n        if(ch==1){\n            scanf(\"%d%d%lld\",&x,&y,&k);\n            update(1,1,n,x,y,k);\n        }\n        else if(ch==2){\n            scanf(\"%d%d%lld\",&x,&y,&k);\n            update1(1,1,n,x,y,k);\n        }\n        else{\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%lld\\n\",query(1,1,n,x,y));\n        }\n    }\n    return 0;\n    }",
        "postTime": 1565262523,
        "uid": 160113,
        "name": "Oliver_Heldens",
        "ccfLevel": 4,
        "title": "\u7ebf\u6bb5\u68112"
    },
    {
        "content": "### \u501f\u8fd9\u9053\u633a\u96be\u7684\u6a21\u677f\u9898\u6d45\u8c08\u7ebf\u6bb5\u6811\u5165\u95e8\u5fc5\u987b\u7684\u51e0\u79cd\u6280\u5de7\n\n### **1.\u57fa\u7840\u7684\u5efa\u6811**  \n\n\u7406\u89e3\uff1asum\u6570\u7ec4\u7528\u6765\u5b58\u8fd9\u68f5\u6811\uff0c\u524d\u8fb9\u5206\u6bb5\u7684\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u642d\u5efa\u6811\u7684\u5efa\u6784\uff0c\u628a\u6811\u5bf9\u5e94\u7684\u6bcf\u4e2a\u5750\u6807\u7684\u683c\u5b50\u7a7a\u4e0b\u7528\u6765\u88c5\u503c\u3002\u6321\u62c6\u5230\u5355\u70b9\u65f6\u5c06\u9700\u8981\u8fdb\u884c\u6811\u72b6\u5904\u7406\u7684\u6570\u7ec4\u586b\u8fdb\u53bb\uff0c\u7136\u540e\u6309\u7167\u81ea\u5df1\u7684\u9700\u8981\u4e0a\u63a8\u6240\u9700\u8981\u7684\u503c\uff0c\u7ebf\u6bb5\u6811\u5c31\u6784\u9020\u5b8c\u6210\u4e86 \n\n[![\u7ebf\u6bb5\u6811\u6784\u9020.png](https://i.loli.net/2019/02/17/5c68ca7d87a3c.png)](https://i.loli.net/2019/02/17/5c68ca7d87a3c.png)\n\n\u4ee3\u7801\u5927\u81f4\u5982\u4e0b(\u5341\u5206\u7b80\u5355)\uff1a\n\n```cpp\nvoid build(int x,int l,int r)\n{\n    if(l==r)\n    {\n        sum[x]=a[l];//\u627e\u5230\u5355\u70b9\n        return;//\u8bb0\u5f97return!!!!!!!!!!!!!\u8981\u4e0d\u7136\u4f1a\u6bd2\u7624 \n    } \n    int mid=(l+r)/2;\n    build(x*2,l,mid);//\u62c6\u5206\n    build(x*2+1,mid+1,r);\n    push_up(x);//\u5f80\u4e0a\u63a8\u56de\u6eaf\n}\n```\n\n### **2.\u57fa\u7840\u7684\u67e5\u8be2**\n\u5148\u53bb\u505aI HATE IT\u548c\u6a21\u677f1\uff0c\u6d89\u53ca\u7b80\u5355\u7684\u67e5\u8be2\n\n\u7406\u89e3\uff1a\n\n\uff081\uff09\u5355\u70b9\u67e5\u627e\u3010\u66ff\u6362\u3011\n\n\u6700\u7b80\u5355\u7684\u7406\u89e3\u662f\uff1a ** \u4e8c\u5206\u67e5\u627e\uff01**\n\n\u4e0e\u5efa\u6811\u7684\u8fc7\u7a0b\u5927\u81f4\u76f8\u540c\uff1a\u4e8c\u5206\u5728\u5de6\u53f3\u513f\u5b50\u4e2d\u627e\u9700\u8981\u7684\u627e\u5230\u9700\u8981\u7684\u5355\u70b9\u65f6\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\n\n\u4ee3\u7801\n\n```cpp\nvoid max_updata(int x,int l,int r,int a,int b)//\u628aa\u7684\u6210\u7ee9\u6539\u4e3ab,b\u662f\u4e2a\u6570\u5b57 \n{\n    if(l==r)//\u627e\u5230\u5355\u70b9a \n    {\n        sum[x]=max(sum[x], b);//\u66ff\u6362 \n        return;\n    }\n    int mid=(l+r)/2;//\u6807\u51c6\u4e14\u7ecf\u5178\u7684\u4e8c\u5206\u67e5\u627e \n    if(a<=mid) max_updata(x*2,l,mid,a,b);\n    else max_updata(x*2+1,mid+1,r,a,b);\n    push_up(x);//\u522b\u5fd8\u4e86\u5728\u6539\u52a8\u6700\u4e0b\u8fb9\u7684\u503c\u4e4b\u540epushup\u56de\u6eaf\u6539\u53d8\u4e0a\u8fb9\u7684\u503c \n}\n```\n\n\uff082\uff09\u6700\u5927\u6700\u5c0f\u503c\u67e5\u8be2\n\n\u8fd9\u4e2a\u4ee3\u7801\u5c31\u66f4\u5f1f\u5f1f\u4e86\uff0c\u4e8c\u5206\u67e5\u627e\u5de6\u53f3\u513f\u5b50\u4e2d\u6700\u5927/\u6700\u5c0f\u7684\u90a3\u4e2a\n\n\u7279\u522b\u8bf4\u660e\uff1a**1.** \u6c42\u6700\u5927\u6700\u5c0f\u503c\u65f6\uff0c\u56e0\u4e3a\u9009\u62e9\u65b9\u6cd5\u7684\u6539\u53d8\uff0c\u4e0a\u63a8\u6761\u4ef6\u53d8\u6210\u4e86\u6bd4\u5927\u5c0f\uff0cpush_up\u51fd\u6570\u9700\u8981\u4fee\u6539\uff1b**2.** \u6c42\u6700\u5c0f\u503c\u65f6\uff0c\u4e0d\u5728\u754c\u5185\u6700\u597d\u8fd4\u56de\u4e00\u4e2a\u6781\u5927\u7684\u503c\uff0c\u4e0d\u8981\u968f\u624b\u8fd4\u56de0~~\uff08\u672c\u4eba\u5728\u8fd9\u4e2a\u70b9\u4e0a\u5361\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\uff09~~\n\n\u4ee3\u7801\n\n```cpp\nint min_update(int x,int l,int r,int lx,int ly)\n{\n\tif(l>ly||r<lx) return 0x7f7f7f7f;///\u53c8\u89c1\u6bd2\u7624 \n//\tprintf(\"%d %d %d %d %d %d\\n\",x,l,r,lx,ly,sum[x]);\n\tif(l>=lx&&r<=ly) return sum[x];\n\tint mid=(l+r)/2;\n\tint t= min(min_update(x*2,l,mid,lx,ly),min_update(x*2+1,mid+1,r,lx,ly));/////////\n//\tprintf(\"    %d\\n\",t);\n\treturn t;\n}\n```\n\uff083\uff09\u533a\u95f4\u67e5\u627e\u6c42\u548c\n\n\u8fd9\u91cc\u8981\u5f15\u8fdb\u4e00\u4e2a\u4e2a\u4eba\u4e00\u76f4\u7528\u7684~~\uff08\u66b4\u529b\u7684\uff09~~\u8ba8\u8bba\u65b9\u5f0f\uff1a\u4e09\u6bb5\u5206\u7c7b\u8ba8\u8bba\n\n1.\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u4e0d\u5728\u8981\u6c42\u7684\u533a\u95f4\u4e2d\uff0c\u5f53\u524d\u533a\u95f4\u7684SUM\u503c\u5b8c\u5168\u4e0e\u8981\u6c42\u7684\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd4\u56de0\uff1b 2.\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5728\u8981\u6c42\u7684\u533a\u95f4\u4e4b\u5185\uff0c\u5373\u4f7f\u8fd8\u6ca1\u6c42\u5b8c\u4e5f\u4e0d\u7528\u5f53\u524d\u7684\u533a\u95f4\u7ba1\u4e86\uff0c\u4e4b\u95f4\u8fd4\u56de\u5f53\u524dsum\u503c\u5c31\u597d\u3002\n3.\u5982\u679c\u5f53\u524d\u533a\u95f4\u8d85\u51fa\u4e86\u8981\u6c42\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u5c31\u4e8c\u5206\u62c6\u5206\u5b83\u76f4\u5230\u62c6\u5230\u5728\u754c\u5185\u4e3a\u6b62\u3010\u671f\u95f4\u5fc5\u5b9a\u5c31\u820d\u53bb\u4e86\u754c\u5916\u7684\u90e8\u5206\u3011\n\n[![\u7ebf\u6bb5\u6811\uff082\uff09.png](https://i.loli.net/2019/02/17/5c69074548a85.png)](https://i.loli.net/2019/02/17/5c69074548a85.png)\n\n\u4ee3\u7801\n\n```cpp\nint query(int x,int l,int r,int lx,int ly)//////////\n{\n    if(l>ly||r<lx) return 0;\n    if(lx<=l&&r<=ly) return sum[x];\n    int mid=(l+r)/2;\n    //push_down_multiply(x,l,r);//\u6ca1\u533a\u95f4\u66ff\u6362\u4e0d\u7528\u4e0b\u79fblazy_tag \n    //push_down_add(x,l,r);\n    int summ=query(x*2,l,mid,lx,ly)+query(x*2+1,mid+1,r,lx,ly);\n    return summ;\n}\n```\n\n### **3.\u57fa\u7840\u7684\u533a\u95f4\u4fee\u6539**\n\n\u8fd9\u91cc\u6d89\u53ca\u4e00\u4e2alazy_tag\u7684\u6982\u5ff5\uff0c\u5176\u4ed6dalao\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u53ea\u7b80\u5355\u63d0\u4e00\u4e0b\uff1a\n\nlazy_tag\u4e0e\u4e4b\u524d\u7684push_up\u6b63\u597d\u76f8\u53cd\uff0c\u4fee\u6539\u533a\u95f4\u65f6\u8fd8\u4fee\u6539\u513f\u5b50\uff0c\u90a3\u4e3a\u5565\u8fd8\u8981\u7528\u7ebf\u6bb5\u6811\uff1f\uff01\u8dd1\u5f97\u6bd4\u66b4\u529b\u8fd8\u6162\u3002\u3002\u3002\u4e8e\u662f\u6211\u4eec\u4fee\u6539\u7238\u7238\uff0c\u5229\u7528\u7238\u7238\u524d\u6eaf\u4fee\u6539\u513f\u5b50\uff0c\u5c31\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\n\n\u90a3\u4e48lazy_tag\u5230\u5e95\u662f\u5565\u5462\uff1f\u5c31\u662f\u5bf9\u7238\u7238\uff08\u5176\u5b9e\u5c31\u5305\u62ec\u4e86\u513f\u5b50\uff09\u7684\u64cd\u4f5c\u6807\u8bb0\uff0c\u6bcf\u6b21\u4e0b\u79fb\u4e00\u5c42\uff08\uff01\uff01\uff09\u5c31\u50cf\u4f20\u5bb6\u5b9d\u4e00\u6837\uff0c\u4e00\u4ee3\u4e00\u4ee3\u5f80\u4e0b\u4f20\uff0c\u8d8a\u6512\u8d8a\u591a\uff08\u522b\u5fd8\u4e86\u513f\u5b50\u81ea\u5df1\u4e5f\u6709tag\uff09,\u4f20\u5230\u6700\u540e\u4e00\u4ee3\u5c31\u5b8c\u6210\u4e86\u4fee\u6539\u3002\n\n[![\u7ebf\u6bb5\u6811\uff083\uff09.png](https://i.loli.net/2019/02/17/5c690e2aaa58d.png)](https://i.loli.net/2019/02/17/5c690e2aaa58d.png)\n\n\u4ee3\u7801\uff08\u6ce8\u610f\u4e8b\u9879\u5728\u5176\u4e2d\uff09\n\n```cpp\nvoid push_down(int x,int l,int r)\n{\n    if(add[x])\n    {\n        int leftson=x*2,rightson=x*2+1;\n        int mid=(l+r)/2; \n        add[leftson]+=add[x];//\u6ce8\u610f\u8fd9\u91cc\u7684+= \n        add[rightson]+=add[x];\n        sum[leftson]+=add[x]*(mid-l+1);//\u540c\u65f6\u4fee\u6539\u603b\u503c\uff0c\u6807\u8bb0*\u957f\u5ea6\u5373\u53ef \n        sum[rightson]+=add[x]*(r-(mid+1)+1);\n        add[x]=0;//\u5f52\u96f6\u8981\u4e0d\u7136\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u591a\u52a0\u4e00\u904d \n        return;\t\t\n    }\n}\n```\n## \u6700\u540e\u8bb2\u8bb2\u8fd9\u9053\u9898\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n\u96be\u70b9\u5728\u4e8e\uff1a1.\u591a\u4e86\u4e00\u4e2a\u4e58\u6cd5\u6807\u8bb0\uff0c\u8fd9\u79cd\u4fee\u6539\u662f\u7275\u4e00\u53d1\u800c\u52a8\u5168\u8eab\u7684\uff0c\u5728\u4e0b\u79fb\u4e58\u6cd5\u6807\u8bb0\u7684\u65f6\u5019\u8981\u5148\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0 2.\u987b\u77e5\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\n\n\uff08a+b\uff09*c!=a*c+b;\u6240\u4ee5\u505a\u533a\u95f4\u4e58\u6cd5\u65f6\u8981\u5148\u4e0b\u79fb\u4e58\u6cd5\u6807\u8bb0\uff0c\u518d\u4e0b\u79fb\u52a0\u6cd5\u6807\u8bb0\uff1b  3.\u8fd9\u9053\u9898\u6570\u5b57\u4f1a\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97\u4e2d\u5343\u4e07\u8bb0\u5f97\u8981\u628a\u8be5\u53d6\u6a21\u7684\u90fd\u53d6\u4e0a\uff0c\u8981\u4e0d\u7136\u4e5f\u4f1a\u6bd2\u7624 4.multiply\u6807\u8bb0\u662f \u4e58\u6cd5\uff01\uff01\u5728\u4e0b\u4ee5\u540e\u8981\u5f52\u4e3a1\uff01\uff01\uff01\u5728\u521d\u59cb\u65f6\u4e5f\u8981\u5148\u8d4b\u62101\uff01\uff01\u4e0d\u7136\u4e5f\u4f1a\u6bd2\u7624\uff01\uff01\n\nAC\u4ee3\u7801\u9644\u4e0a\uff1a\n\n```cpp\n///ORZ ZWH\n#include<bits/stdc++.h>\n#define int long long\n#define MAXN 100010\nusing namespace std;\nint n,m,p;\nint a[MAXN],tree[MAXN*4],sum[MAXN*4],add[MAXN*4],multiply[MAXN*4];\n\nvoid push_up(int x)//////////\n{\n    sum[x]=sum[x*2]+sum[x*2+1];\n}\n\nvoid push_down_add(int x,int l,int r)/////////\n{\n    if(add[x])\n    {\n        int leftson=x*2,rightson=x*2+1;\n        int mid=(l+r)/2;\n        add[leftson]=(add[leftson]%p+add[x]%p)%p;\n        add[rightson]=(add[rightson]%p+add[x]%p)%p;\n        sum[leftson]=(sum[leftson]%p+add[x]%p*(mid-l+1)%p)%p;\n        sum[rightson]=(sum[rightson]%p+add[x]%p*(r-(mid+1)+1)%p)%p;\n        add[x]=0;\n        return;\n    }\n}\n\nvoid push_down_multiply(int x,int l,int r)\n{\n    if(multiply[x]!=1)\n    {\n        int leftson=x*2,rightson=x*2+1;\n        multiply[leftson]=(multiply[leftson]*multiply[x])%p;\n        multiply[rightson]=(multiply[rightson]*multiply[x])%p;\n        add[leftson]=(add[leftson]*multiply[x])%p;\n        add[rightson]=(add[rightson]*multiply[x])%p;\n        sum[leftson]=(sum[leftson]*multiply[x])%p;\n        sum[rightson]=(sum[rightson]*multiply[x])%p;\n        multiply[x]=1;\n        return;\n    }\n}\n\nvoid build(int x,int l,int r)/////////////\n{\n    if(l==r)\n    {\n        sum[x]=a[l];\n        return;//\u8bb0\u5f97return!!!!!!!!!!!!!\u8981\u4e0d\u7136\u4f1a\u6bd2\u7624 \n    } \n    int mid=(l+r)/2;\n    build(x*2,l,mid);\n    build(x*2+1,mid+1,r);\n    push_up(x);\n}\n\nvoid add_update(int x,int l,int r,int lx,int ly,int k)\n{\n    if(l>ly||r<lx) return;\n    if(l>=lx&&r<=ly) \n    {\n        sum[x]+=k*(r-l+1)%p;\n        add[x]+=k;\n        return;\n    }\n    push_down_multiply(x,l,r);\n    push_down_add(x,l,r);\n    int mid=(l+r)/2;\n    add_update(x*2,l,mid,lx,ly,k);\n    add_update(x*2+1,mid+1,r,lx,ly,k);\n    push_up(x);\n    return;\n}\n\nvoid multiply_update(int x,int l,int r,int lx,int ly,int k)\n{\n    if(l>ly||r<lx) return;\n    if(l>=lx&&r<=ly)\n    {\n        sum[x]=(sum[x]*k)%p;\n        add[x]=(add[x]*k)%p;\n        multiply[x]=(multiply[x]*k)%p;\n        return;\n    }\n    push_down_multiply(x,l,r);\n    push_down_add(x,l,r);\n    int mid=(l+r)/2;\n    multiply_update(x*2,l,mid,lx,ly,k);\n    multiply_update(x*2+1,mid+1,r,lx,ly,k);\n    push_up(x);\n    return;\n}\n\nint query(int x,int l,int r,int lx,int ly)\n{\n    if(l>ly||r<lx) return 0;\n    if(lx<=l&&r<=ly) return sum[x];\n    int mid=(l+r)/2;\n    push_down_multiply(x,l,r);//\u6ca1\u533a\u95f4\u66ff\u6362\u4e0d\u7528\u4e0b\u79fblazy_tag \n    push_down_add(x,l,r);\n    int summ=query(x*2,l,mid,lx,ly)+query(x*2+1,mid+1,r,lx,ly);\n    return summ;\n}\n\nsigned main()\n{\n    fill(multiply,multiply+MAXN*4,1);// \n    cin>>n>>p;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i];\n    }\n    build(1,1,n);\n    cin>>m; \n    while(m--)\n    {\n        int z,x,y,k;\n        cin>>z;\n        if(z==1)\n        {\n            cin>>x>>y>>k;\n            multiply_update(1,1,n,x,y,k);\n        }\n        if(z==2)\n        {\n            cin>>x>>y>>k;\n            add_update(1,1,n,x,y,k);\n        }\n        if(z==3)\n        {\n            cin>>x>>y;\n            cout<<query(1,1,n,x,y)%p<<endl;\n        }\n    }\n    return 0;\n} \n```\n\n## **\u7ed3\u8bed**\n\u8fd9\u662f\u4e00\u9053\u5176\u5b9e\u5f88\u6bd2\u7624\u7684\u9898\uff0c\u4f46\u5176\u5b9e\u53ea\u8981\u907f\u8fc7\u4e86\u90a3\u4e9b\u6613\u9519\u7684bug\u70b9\uff0c\u8fd9\u9053\u9898\u5c31\u4e5f\u53ea\u662f\u6a21\u677f\u4e00\u591a\u4e86\u4e2atag\u800c\u5df2\u3002\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u5927\u6982\u4e5f\u5c31\u8fd9\u4e48\u591a\uff0c\u4ec5\u4e3a\u4e2a\u4eba\u7406\u89e3\uff0c\u4e00\u5b9a\u4e0e\u4e66\u4e0a\u4e0d\u540c\uff0c\u4e0d\u559c\u52ff\u55b7\n\n\u6700\u540e\u795d\u5927\u5bb6debug\u6109\u5feb\u3010\u624b\u52a8\u6ed1\u7a3d\u3011",
        "postTime": 1550390092,
        "uid": 157496,
        "name": "ksydom",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\uff082\uff09\u2014\u2014\u5176\u5b9e\u662f\u603b\u9898\u89e3"
    },
    {
        "content": "## \u4e00\u4e9b\u8fd9\u9053\u9898\u5fc5\u5907\u7684\u601d\u8def ##\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u8981\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\u7684\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u521a\u597d\u88ab\u5b8c\u5168\u5305\u542b\u4e86\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u6253\u4e0a\u6807\u8bb0\uff08\u8981\u6539\u6210\u591a\u5c11\uff09\uff0c\u90a3\u4e48\u4e0b\u6b21\u8981\u7528\u5b50\u8282\u70b9\u7684\u65f6\u5019\u5c06\u6807\u8bb0\u4e0b\u4f20\u5373\u53ef\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u672c\u9898\u8981\u6253\u4e24\u4e2atag,\u90a3\u4e48sum[o] = sum[o] \\* mul[o] + add[o],sum\u4e3a\u548c\uff0cmul\u4e3a\u4e58\u7684\u6570\uff0cadd\u4e3a\u52a0\u7684\u6570\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u4e58\u4e00\u4e2a\u6570c,sum[o] = sum[o] \\* mul[o] \\* c + add[o] \\* c,\u5c06mul[o] \\* c\u548cadd[o] \\* c\u770b\u4f5c\u4e24\u4e2a\u6574\u4f53\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u4e58\u4e00\u4e2a\u6570c\u7684\u8bdd\uff0cadd\u6570\u7ec4\u8981\\*c,mul\u6570\u7ec4\u4e5f\u8981\\*c,\u540c\u7406\uff0c\u5982\u679c\u52a0\u4e00\u4e2a\u6570c,\u90a3\u4e48\u53ea\u9700\u8981add\u6570\u7ec4+c\u5373\u53ef\uff0c\u56e0\u4e3a\u5728\u4e0b\u4f20\u6807\u8bb0\u7684\u65f6\u5019\u65e2\u6709\u52a0\uff0c\u53c8\u6709\u51cf\uff08\u53ef\u80fd\u4e3a0\uff09\uff0c\u6240\u4ee5add\u548cmul\u6570\u7ec4\u7684\u8ba1\u7b97\u4e00\u5b9a\u8981\u5c06\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u8ba1\u7b97\u5230.\u5982\u679c\u5728\u7ebf\u6bb5\u6811\u4e0a\u51e0\u4e2a\u533a\u95f4\u64cd\u4f5c\u7684\u6027\u8d28\u76f8\u540c\u7684\uff0c\u5148\u628a\u8981\u6c42\u7684\u6570\u7528\u64cd\u4f5c\u9700\u8981\u7684\u91cf\u7ed9\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u64cd\u4f5c\u770b\u770b\u9700\u8981\u7ef4\u62a4\u7684\u6807\u8bb0\u7684\u53d8\u5316\uff0c\u6700\u540e\u5408\u5e76\u4e00\u4e0b\u5373\u53ef.\n\n\u58f0\u660e\n--\n\n\u5728\u4e0a\u6a21\u677f\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u7528\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\n```\n\u8fd9\u4e24\u4e2a\u5b8f\u5b9a\u4e49\uff1a\n\n\n```cpp\n#define le l,mid,o*2\n#define re mid+1,r,o*2+1\n```\nn\u7528\u6765\u5b58\u50a8\u539f\u6570\u5217\u7684\u4e2a\u6570\uff0cm\u7528\u6765\u5b58\u50a8\u64cd\u4f5c\u7684\u4e2a\u6570\uff0cp\u7528\u6765\u5b58\u50a8\u9700\u8981mod\u7684\u6570\uff0ca\u6570\u7ec4\u7528\u6765\u5b58\u539f\u6570\u5217\uff0cadd\u6570\u7ec4\u7528\u6765\u5b58\u52a0\u6cd5\u7684lazy\u6807\u8bb0\uff0cmul\u7528\u6765\u5b58\u4e58\u6cd5\u7684lazy\u6807\u8bb0\uff0csum\u7528\u6765\u5b58\u7d2f\u52a0\u548c\uff08\u6216\u5bf9p\u53d6\u6a21\u540e\u7684\u503c\uff09\uff1bx\u548cy\u4ee3\u8868\u9700\u8981\u66f4\u6539\u7684\u533a\u95f4\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\n\n## \u5efa\u6811 ##\n\n```cpp\nvoid build(long long l,long long r,long long o)\n{\n    mul[o]=1;//\u4e58\u6cd5\u57fa\u65701\n    add[o]=0;//\u52a0\u6cd5\u57fa\u65700\n    if(l==r)//\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u4e24\u7aef\u70b9\u91cd\u5408\u5566\uff0c\u5c31\u662f\u9501\u5b9a\u5355\u70b9\u4e86\uff0c\u8fd9\u4e2a\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\n    {\n        sum[o]=a[l];//\u8fd9\u4e2a\u533a\u95f4\u7684\u603b\u548c\u5c31\u662f\u5143\u7d20\u81ea\u8eab\u4e86\n        return;\n    }\n    int mid=(l+r)>>1;//\u83b7\u53d6\u4e2d\u95f4\u70b9\n    build(le);//\u7ee7\u7eed\u9020\u6811\n    build(re);//\u5341\u5e74\u6811\u6728\u767e\u5e74\u6811\u4eba\n    sum[o]=(sum[o*2]+sum[o*2+1])%p;//\u7b2co\u4e2a\u70b9\u7684\u7d2f\u52a0\u548c\u662f\u4e24\u4e2a\u5b69\u5b50\u7684\u7d2f\u52a0\u548c\u4e4b\u548c\n}\n```\n\n\u4f20\u9012lazy\u6807\u8bb0\n\n--------\n\n```cpp\nvoid pushdown(int o,int k\uff09\n{\n    sum[o*2]=(sum[o*2]*mul[o]+add[o]*(k-(k>>1)))%p;//\u5de6\u5b50\u6811\u7684\u7d2f\u52a0\u548c\u66f4\u65b0\n    sum[o*2+1]=(sum[o*2+1]*mul[o]+add[o]*(k>>1))%p;//\u53f3\u5b50\u6811\u7684\u7d2f\u52a0\u548c\u66f4\u65b0\n    //\u66f4\u65b0\u7684\u987a\u5e8f\uff1a\u5148\u4e58\u6cd5\u6807\u8bb0\u7684\u66f4\u65b0\uff0c\u518d\u52a0\u4e0a\u7d2f\u52a0\u6807\u8bb0\u7684\u66f4\u65b0\u3002\u5e76\u4e14\u7d2f\u52a0\u6807\u8bb0\u7684\u66f4\u65b0\u8fd8\u8981\u6ce8\u610f\u7d2f\u52a0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u662f(k-(k>>1))\uff0c\u53e6\u4e00\u4e2a\u662f\uff08k>>1\uff09\u3002\n    mul[o*2]=mul[o*2]*mul[o]%p\n    mul[o*2+1]=mul[o*2+1]*mul[o]%p;\n    //\u4e58\u6cd5\u6807\u8bb0\u4e5f\u8981\u66f4\u65b0\u7684\u3002\u5343\u4e07\u522b\u5fd8\u8bb0\n    add[o*2]=(add[o*2]*mul[o]+add[o])%p;\n    add[o*2+1]=(add[o*2+1]*mul[o]+add[o])%p;\n    //\u52a0\u6cd5\u6807\u8bb0\u66f4\u65b0\u7684\u65f6\u5019\u8981\u5148\u8003\u8651\u4e58\u6cd5\u6807\u8bb0\u7684\u66f4\u65b0\u3002\n    mul[o]=1;\n    add[o]=0;\n    //\u6807\u8bb0\u6e05\u7a7a\u3002\n}\n```\n\n\u533a\u95f4\u81ea\u52a0\n\n----\n\n```cpp\nvoid jia(int l,int r,int o)//\u4e09\u4e2a\u53c2\u6570\uff0cl\u548cr\u4ee3\u8868\u5f53\u524d\u5728\u67e5\u627e\u7684\u533a\u95f4\u7684\u4e24\u4e2a\u7aef\u70b9\uff0co\u4ee3\u8868\u5f53\u524d\u67e5\u627e\u7684\u533a\u95f4\u7684\u6839\u7ed3\u70b9\n{\n    if(x<=l&&r<=y)//\u5982\u679c\u533a\u95f4\u5b8c\u5168\u88ab\u8986\u76d6\n    {\n        add[o]=(add[o]+v)%p;//\u5bf9lazy\u6807\u8bb0\u76f4\u63a5\u7d2f\u52a0v\uff0c\u5e76\u4e14\u6a21p\uff08\u4e00\u6b65\u4e00\u6a21\u53ef\u4ee5\u907f\u514d\u6700\u540elong long\u6ea2\u51fa\u7684\u95ee\u9898\uff09\n        sum[o]=(sum[o]+v*(r-l+1))%p;//\u5bf9\u4e8e\u8be5\u70b9\u7684\u7d2f\u52a0\u548c\u4e5f\u8981\u76f8\u5e94\u52a0\u4e0a\u6bcf\u4e00\u4e2a\u5355\u70b9\u7684\u6539\u53d8\u91cf\n        return;//lazy\u6807\u8bb0\u7684\u521d\u8877\uff0c\u76f4\u63a5\u9000\u51fa\n    }\n    pushdown(o,r-l+1);//\u4f20\u9012lazy\u6807\u8bb0\n    int mid=(l+r)>>1;//\u83b7\u53d6\u533a\u95f4\u4e2d\u70b9\n    if(x<=mid)\n    jia(le);//\u5982\u679cx\u5728\u4e2d\u70b9\u5de6\u8fb9\uff0c\u5c31\u8bf4\u660e\u6709\u5fc5\u8981\u641c\u7d22\u5de6\u5b50\u6811\n    if(y>mid)\n    jia(re);//\u5982\u679cy\u5728\u4e2d\u70b9\u53f3\u8fb9\uff0c\u5c31\u8bf4\u660e\u6709\u5fc5\u8981\u641c\u7d22\u53f3\u5b50\u6811\n    sum[o]=(sum[o*2]+sum[o*2+1])%p;\n//\u662f\u65f6\u5019\u66f4\u65b0\u6839\u7ed3\u70b9\u7684\u7d2f\u52a0\u548c\u4e86\u3002\n```\n## \u533a\u95f4\u4e58\u6cd5 ##\n\n```cpp\nvoid cheng(int l,int r,int o)\n{\n    if(x<=l&&r<=y)\n    //\u5982\u679c\u533a\u95f4\u5b8c\u5168\u5305\u542b\n    {\n        add[o]=(add[o]*v)%p;\n        mul[o]=(mul[o]*v)%p;\n        sum[o]=(sum[o]*v)%p;\n            //\u7d2f\u52a0\u548c\u3001\u4e58\u6cd5\u6807\u8bb0\u3001\u52a0\u6cd5\u6807\u8bb0\u5168\u90e8\u66f4\u65b0\u3002\n        return;//\u66f4\u65b0\u5b8c\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u7528\u591a\u8bf4\u8bdd\u3002\n    }\n    pushdown(o,r-l+1);//\u4f20\u9012\u6807\u8bb0\n    int mid=(l+r)>>1;\n    if(x<=mid)\n    cheng(le);\n    if(y>mid)\n    cheng(re);\n    sum[o]=(sum[o*2]+sum[o*2+1])%p;\n    //\u8fd9\u4e00\u6bb5\u540c\u4e0a\u6587\u52a0\u6cd5\u3002\n}\n```\n## \u533a\u95f4\u67e5\u627e ##\n\n\n```cpp\nlong long query(int l,int r,int o)\n{\n    if(x<=l&&r<=y)\n    return sum[o]%p;\n    //\u5982\u679c\u5b8c\u5168\u5305\u542b\uff0c\u76f4\u63a5\u8fd4\u56de\u503c\uff08lazy\u6807\u8bb0\u5df2\u7ecf\u88abpushdown\u4e86\uff09\n    int mid=(l+r)>>1;//\u53d6\u4e2d\u70b9\n    pushdown(o,r-l+1);//\u4f20\u9012\u6807\u8bb0\n    long long temp=0;\n    if(x<=mid)\n    temp=(temp+query(le))%p;\n    //\u5de6\u5b50\u6811\u7684\u7d2f\u52a0\u548c\n    if(y>mid)\n    temp=(temp+query(re))%p;\n    //\u53f3\u5b50\u6811\u7684\u7d2f\u52a0\u548c\n    sum[o]=(sum[o*2]+sum[o*2+1])%p;\n    //\u66f4\u65b0\u6839\u7ed3\u70b9\n    return temp%p;\n    //\u8fd4\u56de\u6700\u540e\u503c\n}\n```\n\n\u4e3b\u51fd\u6570\u7684\u4e00\u4e9b\u8fb9\u7f18\u64cd\u4f5c\n\n----------\n\n\n```cpp\nint main()\n{\n    n=read();\n    m=read();\n    p=read();\n    //\u5feb\u8bfb\uff08\u89c1\u4e0b\uff09\n    for(int i=1;i<=n;i++)\n    a[i]=read();\n    //\u8bfb\u5165\u6570\u636e\n    build(1,n,1);\n    //\u6784\u9020\u6811\n    for(int i=1;i<=m;i++)\n    {\n        pattern=read();\n        //\u8bfb\u5165\u64cd\u4f5c\u7c7b\u578b\n        if(pattern==1)\n        {\n            x=read();\n            y=read();\n            v=read();\n            cheng(1,n,1);\n        }//1\u5c31\u662f\u4e58\u6cd5\n        if(pattern==2)\n        {\n            x=read();\n            y=read();\n            v=read();\n            jia(1,n,1);\n        }//2\u5c31\u662f\u52a0\u6cd5\n        if(pattern==3)\n        {\n            x=read();\n            y=read();\n            printf(\"%lld\\n\",query(1,n,1)%p);\n        }//3\u5c31\u662f\u67e5\u627e\u533a\u95f4\u7d2f\u52a0\u548c\u5e76\u53d6\u6a21\n    }\n    return 0;\n}\n```\n## \u5feb\u8bfb ##\n\n\u8fd9\u662f\u4e2a\u597d\u6280\u80fd\u3002\u5e0c\u671b\u5927\u5bb6get\u5230\n\n```cpp\ninline long long read()\n{\n    long long num=0;\n    char c=getchar();\n    for(;c<'0'||c>'9';c=getchar());\n    for(;c>='0'&&c<='9';c=getchar())num=num*10+c-'0';\n    return num;\n}\n```",
        "postTime": 1506432108,
        "uid": 24081,
        "name": "Hydra_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\u7ebf\u6bb5\u6811    \n\u5927\u90e8\u5206\u7684\u5730\u65b9\u662f\u548c\u7ebf\u6bb5\u68111\u8fd9\u9053\u9898\u4e00\u6837\u7684    \n\u6211\u53ea\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u4e0d\u540c\u7684\u5730\u65b9    \n\n### \u3010\u53d6\u6a21\u3011\n\u5728\u6bcf\u4e00\u6b21\u6709\u52a0\u6cd5\u6216\u8005\u6709\u4e58\u6cd5    \n\u6d89\u53ca\u5230\u8fd0\u7b97\u7684\u5730\u65b9\u80fd\u6a21\u7684\u90fd\u6a21\u4e00\u4e0b\u5c31\u597d\u4e86   \n\n### \u3010\u4e58\u6cd5\u548c\u52a0\u6cd5\u3011\n\u539f\u6765\u7ebf\u6bb5\u68111\u6a21\u677f\u91cc\u9762\u6709\u4e00\u4e2alazy    \n\u90a3\u662f\u56e0\u4e3a\u6709\u52a0\u6cd5\u8fd9\u79cd\u8fd0\u7b97     \n\u73b0\u5728\u6709\u52a0\u6cd5\u548c\u4e58\u6cd5\u8fd9\u4e24\u79cd\u8fd0\u7b97    \n\u90a3\u5c31\u5f00\u4e24\u4e2a\u7c7b\u4f3clazy\u7684\u4e1c\u897f\u50a8\u5b58\u5c31\u597d\u4e86    \n\n### \u3010lazy\u6807\u8bb0\u7684\u4fee\u6539\u3011\n\u5728\u4fee\u6539\u52a0\u6cd5lazy\u6807\u8bb0\u7684\u65f6\u5019\u5c31\u6b63\u5e38\u4fee\u6539\u5c31\u597d\u4e86    \n\u4f46\u662f\u4fee\u6539\u4e58\u6cd5\u7684\u65f6\u5019\u5c31\u4e0d\u884c\u4e86   \n\u56e0\u4e3a\u524d\u9762\u53ef\u80fd\u6709\u52a0\u8fc7\u7684\u6570    \n\u6240\u4ee5\u8fd8\u8981\u8fde\u5e26\u7740\u4e00\u8d77\u4fee\u6539\u4e00\u4e0b\u52a0\u6cd5\u7684lazy\u6807\u8bb0   \n\u56e0\u4e3a\u5165\u8fc7\u524d\u9762\u52a0\u8fc7\u67d0\u4e2a\u6570   \n\u90a3\u73b0\u5728\u5c31\u662f   \n(a + b)   \n\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4e58\u4e0a\u4e00\u4e2a\u6570c    \n(a +\uff42) * c = ac + bc    \na\u4e58\u4e86c\uff0c\u52a0\u6cd5\u7684lazy\u6807\u8bb0\u4e5f\u4e58\u4e86c\u6240\u4ee5\u8981\u4fee\u6539\u52a0\u6cd5\u7684\u6807\u8bb0     \n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#define int long long\n#define lson (k << 1)\n#define rson (k << 1 | 1)\n\nusing namespace std;\nconst int Max = 100005;\nint read()\n{\n\tint sum = 0,fg = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9')\n\t{\n\t\tif(c == '-')fg = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9')\n\t{\n\t\tsum = sum * 10 + c - '0';\n\t\tc = getchar(); \n\t}\n\treturn sum * fg;\n}\nint n,m,p;\nint opl,opr,opx;\nint ans;\nstruct node\n{\n\tint l,r;\n\tint sum;\n\tint cheng,jia;\n}a[Max << 2];\n\nvoid build(int k,int l,int r)\n{\n\ta[k].cheng = 1;\n\ta[k].jia = 0;\n\ta[k].l = l,a[k].r = r;\n\tif(l == r)\n\t{\n\t\ta[k].sum = read();\n\t\ta[k].sum %= p;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid + 1,r);\n\ta[k].sum = a[lson].sum + a[rson].sum;\n\ta[k].sum %= p;\n}\n\nvoid down(int k)\n{\n\tif(a[k].jia != 0 || a[k].cheng != 1)\n\t{\n\t\ta[rson].cheng = (a[rson].cheng * a[k].cheng) % p;\n\t\ta[lson].cheng = (a[lson].cheng * a[k].cheng) % p;\n\t\ta[rson].jia = (a[rson].jia * a[k].cheng + a[k].jia) % p;\n\t\ta[lson].jia = (a[lson].jia * a[k].cheng + a[k].jia) % p;\n\t\ta[rson].sum = (a[rson].sum * a[k].cheng % p + a[k].jia * (a[rson].r - a[rson].l + 1)) % p;\n\t\ta[lson].sum = (a[lson].sum * a[k].cheng % p + a[k].jia * (a[lson].r - a[lson].l + 1)) % p;\n\t\ta[k].cheng = 1;\n\t\ta[k].jia = 0;\n\t}\n}\n\nvoid change1(int k)\n{\n\tif(opl <= a[k].l && opr >= a[k].r)\n\t{\n\t\ta[k].cheng = (a[k].cheng * opx) % p;\n\t\ta[k].jia = (a[k].jia * opx) % p;\n\t\ta[k].sum = (a[k].sum * opx) % p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint mid = (a[k].l + a[k].r) >> 1;\n\tif(opl <= mid)change1(lson);\n\tif(opr > mid)change1(rson);\n\ta[k].sum = (a[lson].sum + a[rson].sum) % p;\n}\n\nvoid change2(int k)\n{\n\tif(opl <= a[k].l && opr >= a[k].r)\n\t{\n\t\ta[k].jia = (a[k].jia + opx) % p;\n\t\ta[k].sum = (a[k].sum + (a[k].r - a[k].l + 1) * opx % p) % p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint mid = (a[k].l + a[k].r) >> 1;\n\tif(opl <= mid)change2(lson);\n\tif(opr > mid)change2(rson);\n\ta[k].sum = (a[lson].sum + a[rson].sum) % p;\n} \n\nvoid query(int k)\n{\n\tif(opl <= a[k].l && opr >= a[k].r)\n\t{\n\t\tans += a[k].sum;\n\t\tans %= p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint mid = (a[k].l + a[k].r) >> 1;\n\tif(opl <= mid)query(lson);\n\tif(opr > mid)query(rson);\n}\n\nsigned main()\n{\n\tn = read(),m = read(),p = read();\n\tbuild(1,1,n);\n\tfor(register int i = 1;i <= m;++ i)\n\t{\n\t\tint qwq = read();\n\t\tif(qwq == 1)\n\t\t{\n\t\t\topl = read(),opr = read(),opx = read();\n\t\t\tchange1(1);\n\t\t}\n\t\telse\n\t\tif(qwq == 2)\n\t\t{\n\t\t\topl = read(),opr = read(),opx = read();\n\t\t\tchange2(1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\topl = read(),opr = read();\n\t\t\tans = 0;\n\t\t\tquery(1);\n\t\t\tcout << ans % p << endl; \n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573458609,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": " \u8bf4\u5b9e\u8bdd\uff0c\u6211\u89c9\u5f97\u7ebf\u6bb5\u6811\u7684\u7801\u91cf\u6bd4\u8f83\u5927\uff0c\u5bb9\u6613\u51fa\u73b0\u7ec6\u8282\u9519\u8bef\uff0c\u5c24\u5176\u662f\u8fd9\u4e2a\u6709\u52a0\u4e5f\u6709\u4e58~~\uff08\u6211\u5c31\u56e0\u4e3a\u628a\u67d0\u4e00\u4e2al\u5199\u6210\u4e86r\u800c\u60e8\u70c8\u5730wa\u4e86\u597d\u4e45\uff09~~  \n \n \u770b\u5230\u9898\u89e3\u5f88\u591a\u5927\u4f6c\u662f\u76f4\u63a5\u8d34\u4ee3\u7801\u4ec0\u4e48\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u7801\u98ce\u90fd\u4e0d\u592a\u4e00\u6837\u770b\u8d77\u6765\u4f1a\u6bd4\u8f83\u6655\uff0c\u6211\u60f3\u7b80\u5355\u8bb2\u8bb2\u600e\u4e48\u6837\u8ba9\u4e58\u6cd5\u548c\u52a0\u6cd5\u7684lazy tag\u517c\u5bb9\u4ee5\u53ca\u4e00\u4e9b\u7ec6\u8282\uff0c**\u4ee3\u7801\u4e0d\u91cd\u8981**\uff0c\u5927\u4f6c\u4eec\u5df2\u7ecf\u7ed9\u51fa\u5f88\u591a\u4e86\u3002\n \n 1. \u56e0\u4e3a\u4e58\u6cd5\u5b9e\u9645\u4e0a\u53ef\u4ee5\u89c6\u4e3a\u591a\u6b21\u7684\u52a0\u6cd5\uff0c\u6240\u4ee5lazy tag\u4f9d\u7136\u9002\u7528\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e58\u6cd5\u5206\u914d\u5f8b\u6765\u7406\u89e3\uff1a  \n $sum[l,r]*k=(a[l]+...+a[r])*k$\n \n     >\u5982\u4f55\u53c8\u52a0\u53c8\u4e58\u5462\uff1f \u5728\u8fd9\u91cc\u6211\u5b9a\u4e49\u52a0\u6cd5lazy tag\u4e3a**add**\uff0c\u4e58\u6cd5\u4e3a**mul**\uff0c\u521d\u59cb\u5316add=0\uff0cmul=1\n 2. \u7531\u4e8e\u4e58\u7684\u4f18\u5148\u7ea7\u6bd4\u8f83\u9ad8\uff0c\u6211\u4eec\u8003\u8651\u5728**\u5904\u7406/\u4f20\u9012lazy tag\u7684\u65f6\u5019**\u8981\u5148\u7528**mul**\u3002\u56e0\u4e3a\u8fd9\u6837\u5c31\u4e0d\u4f1a\u4f7f**add**\u5f71\u54cd\u5230\u4f18\u5148\u7ea7\u8f83\u9ad8\u7684**mul**\u3002 \u518d\u8003\u8651\u4e00\u4e2a\u987a\u5e8f\u95ee\u9898\uff1a\u5982\u679c\u5148\u6253\u4e0a**mul**\uff0c\u90a3\u4e48\u540e\u9762\u52a0\u7684\u6807\u8bb0\u4e0d\u4f1a\u5bf9\u4e4b\u524d\u9020\u6210\u5f71\u54cd\uff1b\u5982\u679c\u5148\u6253\u4e0a**add**\uff0c\u5728\u5904\u7406lazy tag\u7684\u65f6\u5019\u662f\u5148\u4e58\u7684\uff0c\u5c31**\u5bfc\u81f4\u52a0\u7684\u90e8\u5206\u6ca1\u6709\u4e00\u8d77\u4e58\u4e0a\u53bb**\u3002\u6240\u4ee5\uff0c\u5f53 \u6253\u4e0a/\u4e58\u4e0a \u65b0\u7684**mul**\u7684\u65f6\u5019\uff0c\u8981\u5bf9**add**\u8fdb\u884c\u4e00\u4e2a\u66f4\u65b0\uff0c\u4e58\u4ee5\u8fd9\u4e2a**mul**,\u8fd9\u6837\u7ed3\u679c\u624d\u4f1a\u6b63\u786e\u3002\u6240\u4ee5\u5bf9**mul**\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u8981\u4e00\u5e76\u66f4\u65b0**add**\n\n[p3372\u7ebf\u6bb5\u68111\u7406\u89e3\u53ca\u4ee3\u7801](https://111528.blog.luogu.org/dui-yu-xian-duan-shu-di-li-xie)\n```\n//\u66f4\u65b0\u90e8\u5206\u4ee3\u7801\uff0c\u9664\u4e86\u5173\u952e\u90e8\u5206\u548c\u53d6\u6a21\u51e0\u4e4e\u548c\u7ebf\u6bb5\u68111\u90fd\u662f\u4e00\u6837\u7684\nconst int maxn=10000+10;\nint a[maxn];\nstruct SegmentTree\n{\n\tint l,r;//\u5de6\u53f3\u7aef\u70b9\n\tint L,R;//\u5de6\u53f3\u513f\u5b50\n\tll dat,mul,add;//\u5b58\u50a8\u7684\u6570\u636e\u3001\u4e58\u7684\u6807\u8bb0\u3001\u52a0\u7684\u6807\u8bb0\n\t#define l(x) b[x].l\n\t#define r(x) b[x].r\n\t#define L(x) b[x].L\n\t#define R(x) b[x].R\n\t#define dat(x) b[x].dat\n\t#define mul(x) b[x].mul\n\t#define add(x) b[x].add\n\tSegmentTree(){mul=1;add=0;}\n}b[maxn*4];\n//\u6b64\u5904\u7701\u7565\u521d\u59cb\u5316\u51fd\u6570\nvoid spread(int pos)//\u5148\u770b\u4e0b\u9762\u7684\u51fd\u6570\n{\n    if (mul(pos)!=1)\n\t{\n\t\tdat(L(pos))=(dat(L(pos))*mul(pos))%p;\n\t\tdat(R(pos))=(dat(R(pos))*mul(pos))%p;\n\t\tmul(L(pos))=(mul(L(pos))*mul(pos))%p;\n\t\tmul(R(pos))=(mul(R(pos))*mul(pos))%p;\n\t\tmul(pos)=1;\n\t}\n    //\u5173\u952e\uff1a\u66f4\u65b0add\n    if (add(pos))//\u8fd9\u90e8\u5206\u7531\u4e8e\u8981\u53d6\u6a21\u6709\u70b9\u4e71\uff0c\u5b9e\u9645\u4e0a\u8ddf\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u53ea\u662f\u52a0\u4e86\u4e2a\u53d6\u6a21\uff0c\u53ef\u4ee5\u4e0d\u770b\n    {\n        dat(L(pos))=(dat(L(pos))+add(pos)*(r(L(pos))-l(R(pos))+1))%p;\n\t\tdat(R(pos))=(dat(R(pos))+add(pos)*(r(R(pos))-l(R(pos))+1))%p;\n\t\tadd(L(pos))=(add(L(pos))+add(pos))%p;\n\t\tadd(R(pos))=(add(R(pos))+add(pos))%p;\n\t\tadd(pos)=0;\n    }\n}\nvoid change(int pos,int l,int r,ll val,int opt)\n{\n\tif (l<=l(pos)&&r(pos)<=r)//\u5982\u679c\u5904\u5728\u88ab\u4fee\u6539\u7684\u533a\u95f4\u4e2d\u5c31\u8fdb\u5165\u4fee\u6539\n\t{\n\t\tif (opt==1)//\u4fee\u6539mul\n\t\t{\n\t\t\tadd(pos)*=val;\n\t\t\tdat(pos)*=val;\n\t\t\tmul(pos)*=val;\n\t\t\tadd(pos)%=p;\n\t\t\tdat(pos)%=p;\n\t\t\tmul(pos)%=p;\n\t\t}//\u5173\u952e\uff1a\u66f4\u65b0add\uff08\u5982\u679c\u524d\u9762\u6ca1\u6709add\u4e5f\u4e0d\u5f71\u54cd\uff0c\u4f9d\u7136\u662f0\uff09\n\t\telse//\u4fee\u6539add\n\t\t{\n\t\t\tadd(pos)+=val;\n\t\t\tdat(pos)+=val*(r(pos)-l(pos)+1);\n\t\t\tadd(pos)%=p;\n\t\t\tdat(pos)%=p;\n\t\t}\n\t\treturn ;\n\t}\n\tspread(pos);\n\tint mid=(l(pos)+r(pos))>>1;\n\tif (l<=mid)\n\t\tchange(L(pos), l, r, val, opt);\n\tif (r>mid)\n\t\tchange(R(pos), l, r, val, opt);\n\tdat(pos)=(dat(L(pos))+dat(R(pos)))%p;\n}\n```\n",
        "postTime": 1535294047,
        "uid": 111528,
        "name": "hkr04",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u6211\u8fd9\u4e2a\u89e3\u6cd5\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u7ebf\u6bb5\u6811\u4e0a\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u611f\u89c9\u8fd9\u6837\u903b\u8f91\u4f1a\u66f4\u6e05\u6670\u4e00\u70b9\u3002\n\n\u8fd8\u6709\u89c9\u5f97\u697c\u4e0bmilkfilling\u8bf4\u7684\u4e0d\u5bf9\uff0c\u8003\u8651\u52a0\u6cd5\u4f18\u5148\u7684\u8bdd\u5e94\u8be5\u662ftag2\uff08\u4ed6\u7684add\uff09\u4f1a\u51fa\u73b0\u7cbe\u5ea6\u95ee\u9898\uff0c\u4f46tag1\uff08\u4ed6\u7684mul\uff09\u4e0d\u4f1a\uff0c\u4ed6\u6b63\u597d\u8bf4\u53cd\u4e86\u3002\n\n1.\u6211\u4eec\u5728\u3010\u6a21\u677f1\u3011\u7684\u57fa\u7840\u4e0a\u8003\u8651\u5728\u533a\u95f4\u4e0a\u4e58x 2.\u76f4\u63a5\u60f3\u5230\u52a0\u4e00\u4e2atag2\u6765\u8868\u793a\u4e58\u591a\u5c11 3.\u8003\u8651\u4f60\u6bcf\u4e2anode\u6709d,tag1,tag2\u8fd9\u4e09\u4e2a\u5c5e\u6027\uff0c\u5982\u4f55\u7ef4\u62a4\u8be5\u533a\u95f4\u7684\u503c\u3002\n\na)\u5148\u4e58\u518d\u52a0\uff1a\u60f3\u5230\u533a\u95f4\u548c=dtag1+tag2len\uff08\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u6837\u7ef4\u62a4tag1\u548ctag2\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\u5462\uff09\uff0c\u4e00\u4e2a\u975e\u5e38\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u6bcf\u6b21\u3010\u4e58\u6cd5\u4fee\u6539\u3011tag1=x\u3002\u4f46\u8fd9\u6837\u662f\u4e0d\u5bf9\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6\u4f60\u8be5\u533a\u95f4\u548c\u4e0a\u4e58\u4e2ax\uff0c\u5373\u533a\u95f4\u548c=x\uff0c\u5e94\u5f53\u662f\uff08dtag1+tag2len)x\uff0c\u6240\u4ee5\u4fee\u6539\u5e94\u8be5\u662ftag1=x\u548ctag2*=x\uff1b\u5bf9\u4e8e\u6bcf\u6b21\u3010\u52a0\u6cd5\u4fee\u6539\u3011\uff0c\u6211\u4eec\u5e94\u5f53\u4e0d\u6539\u53d8tag1\uff0ctag2+=x\u3002\n\nb)\u5148\u52a0\u518d\u4e58\uff1a\u8fd8\u6709\u53e6\u4e00\u79cd\u7ef4\u62a4\u533a\u95f4\u548c\u7684\u65b9\u5f0f\u5373\uff0c\u533a\u95f4\u548c=(d+tag2len)tag1\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u601d\u8003\u5e94\u8be5\u600e\u6837\u4fee\u6539tag1,tag2\u4fdd\u8bc1\u5176\u7b54\u6848\u6b63\u786e\u3002\u5bf9\u4e8e\u6bcf\u6b21\u3010\u4e58\u6cd5\u4fee\u6539\u3011,tag1=x\uff0ctag2\u4e0d\u53d8\uff1b\u5bf9\u4e8e\u6bcf\u6b21\u3010\u52a0\u6cd5\u4fee\u6539\u3011(d+tag2len)tag1+xlen=(d+len(x/tag1+tag2))tag1\uff0c\u5373tag2+=x/tag1\uff0ctag1\u4e0d\u53d8\u3002\n\n\u4ee5\u4e0a\u662f\u8fd9\u9053\u9898\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u9644\u4e0a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<iostream>\n#define MAXN 100000 \n#define LL long long\nusing namespace std;\n\nint top;\nstruct node{\n    int l,r;\n    LL d,tag1,tag2;//tag1\u4e58\uff0ctag2\u52a0\n    node *ls,*rs;\n}pool[4*MAXN];\nLL a[MAXN+5],N,M,P; \n\nnode* buildT(int l,int r){\n    node* p=pool+(++top);\n    if(l==r){\n        p->l=p->r=l;\n        p->d=a[l]%P;\n        p->tag1=1;\n        return p;\n    }\n    p->tag1=1;\n    p->l=l; p->r=r;\n    p->ls=buildT(l,(l+r)/2); p->rs=buildT((r+l)/2+1,r);\n    p->d=(p->ls->d+p->rs->d)%P;\n    return p;\n}\n\nLL getData(node *p){\n    return (p->d*p->tag1%P+p->tag2*(p->r-p->l+1)%P)%P;\n}\n\n//pushdown\u7684\u672c\u8d28\u662f\u6839\u636e\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\uff0c\u7ef4\u62a4\u7b97\u6cd5\u6b63\u786e\u6027\n//\u533a\u57df\u52a0\u6cd5\u5728query\u65f6pushdown\u53ef\u4ee5\u56e0\u4e3a+3 +5 \u5148\u52a03\u8fd8\u662f\u5148\u52a05\u5bf9\u7b54\u6848\u6ca1\u6709\u533a\u522b\uff1b\u4f46\u533a\u57df\u4e58\u6cd5\u5728update\u65f6\u5c31\u8981pushdown\u56e0\u4e3a+3 *5 \u5148\u540e\u987a\u5e8f\u6709\u533a\u522b \nvoid pushdown(node *p){\n    if(p->tag1==1 && p->tag2==0) return;\n    p->d=getData(p);\n    //\u5982\u679c\u8fd9\u4e2a\u65f6\u5019rs\u6216ls\u7684tag\u4e0a\u6709\u503c\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5728p\u4e0a\u6709\u64cd\u4f5c\u4e4b\u524d\u7684\uff08\u56e0\u4e3a\u4e4b\u524d\u4e00\u76f4\u6709push down\uff09\u3002\u6240\u4ee5\u4ed6\u4eec\u4eab\u6709\u88abtag1\u4e58\u7684\u6743\u5229 \n    p->rs->tag1=p->rs->tag1*p->tag1%P;\n    p->rs->tag2=(p->rs->tag2*p->tag1%P+p->tag2)%P;\n\n    p->ls->tag1=p->ls->tag1*p->tag1%P;\n    p->ls->tag2=((p->ls->tag2*p->tag1)%P+p->tag2)%P;\n\n    p->tag1=1; p->tag2=0;\n    return;\n}\n\nLL query(node* p,int l,int r){\n    if(p->l==l && p->r==r){\n        return getData(p);\n    }\n    pushdown(p);\n    int mid=(p->l+p->r)/2;\n    if(r<=mid)   return query(p->ls,l,r);\n    if(l>mid)    return query(p->rs,l,r);\n    return  (query(p->ls,l,mid)+query(p->rs,mid+1,r))%P;  \n}\n\nvoid changePlus(node* p,int l,int r,LL dv){\n        if(p->l==l && p->r==r){\n            p->tag2=(p->tag2+dv)%P;\n            return;\n        }\n        pushdown(p);\n        int mid=(p->l+p->r)/2;\n        if(r<=mid) changePlus(p->ls,l,r,dv);\n        else if(l>mid) changePlus(p->rs,l,r,dv);\n        else{\n            changePlus(p->ls,l,mid,dv);\n            changePlus(p->rs,mid+1,r,dv);\n        }\n        p->d=(getData(p->ls)+getData(p->rs))%P;\n}\n\nvoid changeTimes(node* p,int l,int r,LL dv){\n\n        if(p->l==l && p->r==r){\n            p->tag1=p->tag1*dv%P;\n            p->tag2=p->tag2*dv%P;\n            return;\n        }\n        pushdown(p);\n        int mid=(p->l+p->r)/2;\n        if(r<=mid) changeTimes(p->ls,l,r,dv);\n        else if(l>mid) changeTimes(p->rs,l,r,dv);\n        else{\n            changeTimes(p->ls,l,mid,dv);\n            changeTimes(p->rs,mid+1,r,dv);\n        }\n        p->d=( getData(p->ls)+getData(p->rs) )%P;\n}\n\nint main(){\n    cin>>N>>M>>P;\n    for(int i=1;i<=N;i++) cin>>a[i];\n    node* root=buildT(1,N);\n\n    for(int i=1;i<=M;i++){\n        int op,x,y; cin>>op>>x>>y;\n        if(op==1){\n            LL k; cin>>k;\n            changeTimes(root,x,y,k);\n        }\n        else if(op==2){\n            LL k; cin>>k;\n            changePlus(root,x,y,k);\n        }\n        else cout<<query(root,x,y)<<endl;\n    }\n    return 0;\n}\n\n```",
        "postTime": 1523343101,
        "uid": 36788,
        "name": "4396\u778e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u6a21\u677f \u6ce8\u610f\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\u4e0e\u52a0\u6cd5\u4e2a\u6807\u8bb0\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u5148\u4e58\u540e\u52a0\n\n\u6ce8\u610f\uff1a\n\n1\u3001\u5f00long long\n\n\n2\u3001\u5f00\u56db\u500d\u7a7a\u95f4 <<2\n\n\u4ee3\u7801\u6bd4\u8f83\u597d\u7406\u89e3 \u800c\u4e14\u662f\u4e0d\u662f\u597d\u770b\u5f88\u591a\uff1f\n\n/\\*----------------------------------------------------------------------\\*/\n\n    \n    \n    \n    \n    \n    \n    \n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define L(x) x<<1    //\u5de6\u513f\u5b50 x*2 \n#define R(x) x<<1|1 //\u53f3\u513f\u5b50  x*2+1\nconst int maxn =1e5+5;\nusing namespace std;\nLL n,m,modd,num[maxn];\ninline LL read() {\n    LL x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') f=(ch=='-')?-1:1,ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n    return x*f;\n}\nstruct T {\n    LL l,r;\n    LL sum,add,mul;\n} tree[maxn<<2];//\u6ce8\u610f\u5f00long long \u548c\u56db\u500d\u7a7a\u95f4 \ninline void update(LL p) {\n    tree[p].sum=tree[L(p)].sum+tree[R(p)].sum;\n    return;\n}\ninline void spread(LL p) {\n    LL mid=(tree[p].l+tree[p].r)>>1;\n    if(tree[p].mul!=1) {\n        tree[L(p)].mul=tree[L(p)].mul*tree[p].mul%modd;\n        tree[R(p)].mul=tree[R(p)].mul*tree[p].mul%modd;\n        tree[L(p)].add=tree[L(p)].add*tree[p].mul%modd;\n        tree[R(p)].add=tree[R(p)].add*tree[p].mul%modd;\n        tree[L(p)].sum=tree[L(p)].sum*tree[p].mul%modd;\n        tree[R(p)].sum=tree[R(p)].sum*tree[p].mul%modd;\n        tree[p].mul=1;\n    }\n    if(tree[p].add) {\n        tree[L(p)].add=(tree[L(p)].add+tree[p].add)%modd;\n        tree[R(p)].add=(tree[R(p)].add+tree[p].add)%modd;\n        tree[L(p)].sum=(tree[L(p)].sum+tree[p].add*(mid-tree[p].l+1)%modd)%modd;\n        tree[R(p)].sum=(tree[R(p)].sum+tree[p].add*(tree[p].r-mid)%modd)%modd;//tree[p].r-mid\u4e0d\u52a01 \n        tree[p].add=0;\n    }\n    return;\n}\ninline void build(LL l,LL r,LL p) {//\u5efa\u6811 \n    tree[p].l=l,tree[p].r=r,tree[p].mul=1;\n    if(l==r) {\n        tree[p].sum=num[l];\n        tree[p].mul=1;\n        return;\n    }\n    LL mid=(tree[p].l+tree[p].r)>>1;\n    build(l,mid,L(p));\n    build(mid+1,r,R(p));\n    update(p);\n    return;\n}\ninline void change1(LL l,LL r,LL p,LL v) {//\u533a\u95f4\u589e\u503c \n    if(tree[p].l==l&&tree[p].r==r) {\n        tree[p].add=(tree[p].add+v);\n        tree[p].sum=(tree[p].sum+v*(r-l+1));\n        return;\n    }\n    spread(p);\n    LL mid=(tree[p].l+tree[p].r)>>1;\n    if(r<=mid) change1(l,r,L(p),v);\n    else if(l>mid) change1(l,r,R(p),v);\n    else change1(l,mid,L(p),v),change1(mid+1,r,R(p),v);\n    update(p);\n    return;\n}\ninline void change2(LL l,LL r,LL p,LL v) {//\u533a\u95f4\u4e58\u6cd5 \n    if(tree[p].l==l&&tree[p].r==r) {\n        tree[p].add=(tree[p].add*v)%modd;//\u6807\u8bb0\u4e5f\u8981\u4e58\u4e0av \n        tree[p].sum=(tree[p].sum*v)%modd;\n        tree[p].mul=(tree[p].mul*v)%modd;\n        return;\n    }\n    spread(p);\n    LL mid=(tree[p].l+tree[p].r)>>1;\n    if(r<=mid) change2(l,r,L(p),v);\n    else if(l>mid) change2(l,r,R(p),v);\n    else change2(l,mid,L(p),v),change2(mid+1,r,R(p),v);\n    update(p);\n    return;\n}\ninline LL ask_sum(LL l,LL r,LL p) {\n    if(tree[p].l==l&&tree[p].r==r) {\n        return tree[p].sum;\n    }\n    spread(p);\n    LL mid=(tree[p].l+tree[p].r)>>1;\n    if(r<=mid) return ask_sum(l,r,L(p));\n    else if(l>mid) return ask_sum(l,r,R(p));\n    else  return ask_sum(l,mid,L(p))+ask_sum(mid+1,r,R(p));\n}\nLL opt,l,r,v;\nint main() {\n    n=read(),m=read(),modd=read();\n    for(int i=1; i<=n; i++) num[i]=read();\n    build(1,n,1);\n    while(m--) {\n        opt=read();\n        if(opt==1) {\n            l=read(),r=read(),v=read();\n            change2(l,r,1,v);\n        }\n        if(opt==2) {\n            l=read(),r=read(),v=read();\n            change1(l,r,1,v);\n        }\n        if(opt==3) {\n            l=read(),r=read();\n            printf(\"%lld\\n\",ask_sum(l,r,1)%modd);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1510046330,
        "uid": 48611,
        "name": "_NoOne",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u4e00\u3001\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u6982\u5ff5\uff1a\n\n1.\u5b9a\u4e49\n\n\u4ee5\u4e0b\u662f\u767e\u5ea6\u767e\u79d1\u7684\u5b9a\u4e49\u2460\uff1a\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9[a,b]\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u8868\u793a\u7684\u533a\u95f4\u4e3a[a,(a+b)/2]\uff0c\u53f3\u513f\u5b50\u8868\u793a\u7684\u533a\u95f4\u4e3a[(a+b)/2+1,b]\u3002\u56e0\u6b64\u7ebf\u6bb5\u6811\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6700\u540e\u7684\u5b50\u8282\u70b9\u6570\u76ee\u4e3aN\uff0c\u5373\u6574\u4e2a\u7ebf\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\u3002\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN\uff09\u3002\u800c\u672a\u4f18\u5316\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a2N\uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\u7ebf\u6bb5\u6811\u81f3\u5c11\u652f\u6301\u4e0b\u5217\u64cd\u4f5c\uff1aInsert(t,x\uff09\uff1a\u5c06\u5305\u542b\u5728\u533a\u95f4 int \u7684\u5143\u7d20 x \u63d2\u5165\u5230\u6811t\u4e2d\uff1bDelete(t,x\uff09\uff1a\u4ece\u7ebf\u6bb5\u6811 t \u4e2d\u5220\u9664\u5143\u7d20 x\uff1bSearch(t,x\uff09\uff1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6811 t \u4e2d\u5143\u7d20 x \u7684\u6307\u9488\u3002\n\n\u4f46\u662f\u767e\u79d1\u7684\u5b9a\u4e49\u5f80\u5f80\u8ba9\u4eba\u671b\u800c\u5374\u6b65\uff0c\u6b64\u5904\u6211\u7528\u4e00\u79cd\u7f51\u4e0a\u7684\u8f83\u4e3a\u201c\u7b80\u6d01\u201d\u7684\u5b9a\u4e49\uff1a\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u9488\u5bf9\u4e8e\u6570\u636e\u89c4\u6a21\u8f83\u5927\u7684\u533a\u95f4\u67e5\u8be2\u548c\u64cd\u4f5c\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u5b8c\u5168\u4e8c\u53c9\u6811\u2461\uff09\uff0c\u57fa\u4e8e\u7ebf\u6bb5\u6811\u7684\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u5bf9\u5b83\u7684\u6bcf\u6b21\u67e5\u8be2\u6216\u8005\u6539\u53d8\u7684\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u53ef\u89c6\u4e3aO(logn)\u3002\u5e76\u4e14\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u56fa\u5b9a\u7684\u533a\u95f4\u3002\u7531\u4e8e\u7ebf\u6bb5\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u957f\u5ea6\u662f\u6700\u77ed\u7684\uff0c\u53ef\u4ee5\u89c6\u4e3a\u662f\u7ebf\u6bb5\u6811\u7684\u201c\u5e95\u5c42\u201d\uff08\u6309\u6811\u7684\u5b9a\u4e49\u6765\u8bf4\u5e94\u8be5\u662f\u6700\u9ad8\u5c42\uff09\u3002\n\n2.\u57fa\u672c\u601d\u60f3\uff1a\u9012\u5f52\u3001\u4e8c\u5206\n\n\u4ee5\u4e8c\u5206\u7684\u65b9\u5f0f\u67e5\u8be2\u3001\u4fee\u6539\uff0c\u4ee5\u9012\u5f52\u7684\u65b9\u5f0f\u5efa\u6811\u3001\u67e5\u8be2\u56de\u6eaf\u3001\u4fee\u6539\u56de\u6eaf\u3002\n\n3.\u6570\u636e\u7ed3\u6784\u7c7b\u578b\uff1a\u6811\uff08\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\n\n\u5b8c\u5168\u4e8c\u53c9\u6811\u5b9a\u4e49\uff1a\n\n\u82e5\u8bbe\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3ah\uff0c\u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u8fd9\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u7531\u6ee1\u4e8c\u53c9\u6811\u800c\u5f15\u51fa\u6765\u7684\u3002\u5bf9\u4e8e\u6df1\u5ea6\u4e3aK\u7684\uff0c\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u4e0e\u6df1\u5ea6\u4e3aK\u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4ece1\u81f3n\u7684\u7ed3\u70b9\u4e00\u4e00\u5bf9\u5e94\u65f6\u79f0\u4e4b\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u81f3\u591a\u53ea\u6709\u6700\u4e0b\u9762\u7684\u4e00\u5c42\u4e0a\u7684\u7ed3\u70b9\u7684\u5ea6\u6570\u53ef\u4ee5\u5c0f\u4e8e2\uff0c\u5e76\u4e14\u6700\u4e0b\u5c42\u4e0a\u7684\u7ed3\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u4e0a\uff0c\u800c\u5728\u6700\u540e\u4e00\u5c42\u4e0a\uff0c\u53f3\u8fb9\u7684\u82e5\u5e72\u7ed3\u70b9\u7f3a\u5931\u7684\u4e8c\u53c9\u6811\uff0c\u5219\u6b64\u4e8c\u53c9\u6811\u6210\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\n\n4.\u6027\u8d28\uff1a\n\n1\u2019\u5bf9\u4e8e\u5f53\u524d\u7684\u8282\u70b9root\uff0c\u5176\u5de6\u5b69\u5b50\u7684\u4e0b\u6807\u4e3aroot\\*2\uff0c\u53f3\u5b69\u5b50\u7684\u4e0b\u6807root\\*2+1\n\n2\u2019\u5de6\u5b69\u5b50\u7ba1\u8f96\u7684\u533a\u95f4\u8303\u56f4\u4e3a\u3010L\uff0cMID\u3011\uff0c\u53f3\u5b69\u5b50\u7ba1\u8f96\u7684\u533a\u95f4\u8303\u56f4\u4e3a\u3010MID+1\uff0cR\u3011\n\n3\u2019\u6709\u7740\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u3002\n\n\n\u4e8c\u3001\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\n\n\u4e0b\u9762\u6211\u4eec\u4ee5\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u6a21\u677f\u9898\u5f15\u5165\u3010\u533a\u95f4\u4fee\u6539\u8be2\u95ee\u6c42\u548c\u95ee\u9898\u3011\uff0c\u6765\u6e90\uff1a\u6d1b\u8c37\u2461\uff1b\n\n\u9898\u76ee\u5927\u610f\uff1a\u5df2\u77e5\u4e00\u4e2a\u6570\u5217\uff0c\u4f60\u9700\u8981\u591a\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6709\u4e24\u79cd\uff0c\u4e00\u4e2a\u662f\u5c06\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u52a0\u4e0aX\uff0c\u4e00\u4e2a\u662f\u8be2\u95ee\u67d0\u4e2a\u533a\u95f4\u5185\u6240\u6709\u6570\u7684\u548c\uff1b\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN<=100000\uff0cM<=100000\n\n\u64cd\u4f5c1\uff1a         \u683c\u5f0f\uff1a1 x y k \u542b\u4e49\uff1a\u5c06\u533a\u95f4[x,y]\u5185\u6bcf\u4e2a\u6570\u52a0\u4e0ak\n\n\u64cd\u4f5c2\uff1a      \u683c\u5f0f\uff1a2 x y \u542b\u4e49\uff1a\u8f93\u51fa\u533a\u95f4[x,y]\u5185\u6bcf\u4e2a\u6570\u7684\u548c\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a5 5        //n\u4e2a\u6570\u548cm\u6b21\u64cd\u4f5c\n\n1 5 4 2 3    //\u5df2\u77e5\u6570\u5217\n\n2 2 4\n1 2 3 2\n\n2 3 4\n1 1 5 1\n\n2 1 4\n\u8f93\u51fa\u6837\u4f8b#1\uff1a11\n\n8\n20\n\u89e3\u6cd51\uff1a\u6bcf\u6b21\u6a21\u62df\uff0c\u663e\u7136\u65f6\u95f4\u662f\u4f1a\u7206\u70b8\u7684\uff0cO(100000\\*100000)>1s\n\n\u89e3\u6cd52\uff1a\u6811\u72b6\u6570\u7ec4\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u52a8\u6001\u67e5\u8be2\u4fee\u6539\u7684\uff0c\u5bfc\u81f4\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u7ef4\u62a4\u9700\u8981\u6d6a\u8d39\u6389\u975e\u5e38\u591a\u7684\u65f6\u95f4\n\n\u89e3\u6cd53\uff1a\u7ebf\u6bb5\u6811\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\u9884\u5904\u7406\u8017\u65f6O(n)\uff0c\u67e5\u8be2\u3001\u66f4\u65b0\u64cd\u4f5cO(logn)\uff0c\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4O(n)\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u7236\u8282\u70b9\u533a\u95f4\u662f\u5e73\u5747\u5206\u5272\u5230\u5de6\u53f3\u5b50\u6811\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5bf9\u4e8e\u5305\u542bn\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5b83\u4e00\u5b9a\u6709n-1\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u603b\u51712n-1\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u5b58\u50a8\u7ebf\u6bb5\u662f\u9700\u8981\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(n)\u3002\u2462\n\n\u53f6\u5b50\u8282\u70b9\u662f\u539f\u59cb\u7ec4\u6570a\u4e2d\u7684\u5143\u7d20\n\n\u975e\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u5b83\u7684\u6240\u6709\u5b50\u5b59\u53f6\u5b50\u8282\u70b9\u6240\u5728\u533a\u95f4\u4e4b\u548c\n\n \n\u6211\u4eec\u5982\u56fe\u521b\u5efa\u597d\u7ebf\u6bb5\u6811\uff08\u8fd9\u4e2a\u662f\u521d\u59cb\u5316\u7248\u7684\uff09\uff0c\u4ece\u800c\u8fdb\u884c\u67e5\u8be2\uff01\n\n1.\u521b\u5efa\u7ebf\u6bb5\u6811\uff08\u4e07\u4e8b\u5f00\u5934\u96be\uff0c\u8fd9\u5173\u8fc7\u4e86\u540e\u9762\u76f8\u5bf9\u4e5f\u5c31\u7b80\u5355\u4e86\uff09\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u548c\u666e\u901a\u4e8c\u53c9\u6811\u4e00\u6837\u7684\u94fe\u5f0f\u7ed3\u6784\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u6570\u7ec4\u6765\u5b58\u50a8\uff0c\u4e0b\u9762\u7684\u8ba8\u8bba\u53ca\u4ee3\u7801\u90fd\u662f\u8fd0\u7528\u7ed3\u6784\u4f53\u7684\u6570\u7ec4\u6765\u5b58\u50a8\u7ebf\u6bb5\u6811\uff0c\u8282\u70b9\u7ed3\u6784\u5982\u4e0b\uff08\u6ce8\u610f\u5230\u7528\u6570\u7ec4\u5b58\u50a8\u65f6\uff0c\u6709\u6548\u7a7a\u95f4\u4e3a2n-1,\u5b9e\u9645\u7a7a\u95f4\u786e\u4e0d\u6b62\u8fd9\u4e48\u591a\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u7ebf\u6bb5\u6811\u4e2d\u6211\u4eec\u6709\u603b\u51714\u4e2a\u70b9\u7684\u7a7a\u95f4\u867d\u7136\u662f0\u7684\u521d\u59cb\u503c\uff0c\u4f46\u662f\u786e\u5b9e\u5360\u636e\u4e86\u4e00\u5b9a\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7684\u7a7a\u95f4\u662f\u6ee1\u4e8c\u53c9\u6811\u6240\u9700\u8981\u7684\u603b\u7a7a\u95f4\uff0c\u6240\u4ee5\u7ecf\u5e38\u505a\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u90fd\u4f1a\u542c\u5230\u4eba\u5bb6\u8bf4\uff1a\u7ebf\u6bb5\u6811\u5f00\u4e2a4\u500d\u7a7a\u95f4\u7a33\u7a33\u8fc7\u5c31\u662f\u8fd9\u4e2a\u610f\u601d \uff09\u3002\n\n\u5b9a\u4e49\u5f53\u524d\u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a\n\n\n```cpp\nstruct fkt{\n    int left;    //\u8bb0\u5f55\u5de6\u533a\u95f4\u7684\u4f4d\u7f6e\n    int right;    //\u8bb0\u5f55\u53f3\u533a\u95f4\u7684\u4f4d\u7f6e\n    int tot;    //\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u7684\u548c\n}tree[MAXN];        //\u5b9a\u4e49\u4e00\u68f5\u7ebf\u6bb5\u6811\nvoid build(int lef,int rig,int root){\n//\u4ecelef\u5230rig\u7684\u8ddd\u79bb\u4ee5root\u4e3a\u6839\u5efa\u6811\uff08\u524d\u63d0\u662f\u8981\u6c42rig-lef+1\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff09 \n            tree[root].left=lef;        //\u8bb0\u5f55\u5de6\u533a\u95f4\u7684\u4f4d\u7f6e\n            tree[root].right=rig;     //\u8bb0\u5f55\u53f3\u533a\u95f4\u7684\u4f4d\u7f6e\n            if(lef==rig){tree[root].tot=a[lef];}    //\u5230\u8fbe\u5e95\u7aef\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u6570\u7ec4\u4e2d\u5b58\u4e0b\u7684\u6570\u590d\u5236\u7ed9\u7ebf\u6bb5\u6811\n            else{    \n//\u5426\u5219\u9012\u5f52\u7684\u53bb\u6784\u9020\u5de6\u53f3\u5b50\u6811\n                int mid=(lef+rig)>>1;\n                build(lef,mid,root<<1);\n                build(mid+1,rig,root<<1|1);\n                //\u5e76\u4e14\u6839\u636e\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\u6765\u66f4\u65b0\u6211\u5f53\u524d\u7684\u6839\u8282\u70b9\u7684\u503c\n                tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n            }\n        }\n```\n2.\u67e5\u8be2\u7ebf\u6bb5\u6811\u7684\u5404\u4e2a\u533a\u95f4\n\u6784\u5efa\u597d\u7ebf\u6bb5\u6811\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e0a\u56fe\u7684\u90a3\u79cd\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8981\u5982\u4f55\u8fdb\u884c\u67e5\u8be2\u5462\uff1f\n\n\u6211\u4eec\u524d\u9762\u6709\u63d0\u5230\uff0c\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u601d\u60f3\u662f\u9012\u5f52\u548c\u4e8c\u5206\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u4e0d\u80fd\u7528\u9012\u5f52\u3001\u4e8c\u5206\u7684\u601d\u60f3\u67e5\u8be2\u5462\uff1f\n\n\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff01\n\n\u5047\u8bbe\u6211\u4eec\u8981\u67e5\u627e\u533a\u95f4[3,7]\u7684\u503c\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\u5982\u56fe\uff1a\n\n\u6211\u4eec\u5148\u5c06\u6240\u8981\u67e5\u8be2\u7684\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u8fdb\u884c\u6bd4\u8f83\uff0c\u663e\u7136[3,7]\u662f\u5728[1,8]\u7684\u91cc\u9762\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53bb\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u91cc\u627e\u81ea\u5df1\u6240\u9700\u8981\u7684\u6c42\u503c\n\n \n\n\u7136\u540e\u6211\u4eec\u5c06\u5206\u5f00\u540e\u7684\u533a\u95f4\u7ee7\u7eed\u6bd4\u8f83\u3002\n\n\u663e\u7136,[3,4]\u5728[1,4]\u5185\uff0c\u6240\u4ee5\u76f4\u63a5\u7ee7\u7eed\u53bb\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u91cc\u627e\u81ea\u5df1\u6240\u9700\u8981\u7684\u6c42\u503c\n\n\u663e\u7136,[5,7]\u5728[5,8]\u5185\uff0c\u6240\u4ee5\u76f4\u63a5\u7ee7\u7eed\u53bb\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u91cc\u627e\u81ea\u5df1\u6240\u9700\u8981\u7684\u6c42\u503c\n\n\u6700\u540e\u627e\u5230\u6839\u8282\u70b9\u7684\u65f6\u5019\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u662f\u6709\u503c\u7684\uff0c\u6240\u4ee5\u8fdb\u884c\u8fd4\u56de\u64cd\u4f5c\uff0c\u5c06\u503c\u4f20\u56de\u53bb\u7ed9\u81ea\u5df1\u7684\u7236\u8282\u70b9\u3002\n\n\u6700\u540e\u8f93\u51fa9\u5373\u4e3a[3,7]\u67e5\u8be2\u7684\u6b63\u89e3\n\n\u90a3\u6211\u4eec\u4ee3\u7801\u5b9e\u73b0\u5c31\u7b80\u5355\u591a\u4e86\uff01\n\n\u663e\u7136\uff0c\u6211\u4eec\u5728\u505a\u7684\u65f6\u5019\u662f\u6709\u4e00\u4e9b\u591a\u4f59\u7684\u64cd\u4f5c\u7684\uff0c\u6bcf\u4e00\u6b21\u90fd\u8981\u8bbf\u95ee\u5230\u5e95\u624d\u8fd4\u56de\u3002\u8fd9\u6837\u7ebf\u6bb5\u6811\u7684\u4f18\u52bf\u53c8\u5728\u54ea\u91cc\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff1a    \u5bf9\u4e8e[3,4]\u7684\u8fd9\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5df2\u7ecf\u9884\u5904\u7406\u8fc7\u5b83\u7684\u503c\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u7ee7\u7eed\u8bbf\u95ee\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u5bf9\u4e8e[5,6]\u7684\u533a\u95f4\uff0c\u540c\u6837\u662f\u56e0\u4e3a\u5168\u90e8\u76f8\u7b49\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u5bf9\u4e8e[7,8]\u7684\u533a\u95f4\uff0c\u56e0\u4e3a[7,7]\u5e76\u4e0d\u80fd\u5b8c\u5168\u8986\u76d6[7,8]\uff0c\u6362\u4e2a\u610f\u601d\u8bb2\u5c31\u662f[7,8]\u5e76\u4e0d\u662f[7,7]\u7684\u5b50\u533a\u95f4\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u80fd\u7ee7\u7eed\u9012\u5f52\u5230\u6b63\u597d\u6ee1\u8db3\u5f53\u524d\u67e5\u8be2\u533a\u95f4\u4e3a\u76ee\u6807\u533a\u95f4\u7684\u5b50\u533a\u95f4\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\n\n\u5b9e\u9645\u4e0a\u8fd9\u6837\u7684\u5de5\u4f5c\u6548\u7387\u5c31\u4f1a\u975e\u5e38\u7684\u9ad8\u3002\n\n\u67e5\u8be2\u7684\u601d\u60f3\u662f\u9009\u51fa\u4e00\u4e9b\u533a\u95f4\uff0c\u4f7f\u4ed6\u4eec\u76f8\u8fde\u540e\u6070\u597d\u6db5\u76d6\u6574\u4e2a\u67e5\u8be2\u533a\u95f4\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u9002\u5408\u89e3\u51b3\u201c\u76f8\u90bb\u7684\u533a\u95f4\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u5408\u5e76\u6210\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\u533a\u95f4\u7684\u4fe1\u606f\u201d\u7684\u95ee\u9898\u3002\n\n\u7ebf\u6bb5\u6811\u67e5\u8be2\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n/\\*\n[nl,nr]\u8868\u793a\u6b64\u6b21\u6240\u67e5\u8be2\u7684\u533a\u95f4\n\nroot\u8868\u793a\u6211\u5f53\u524d\u6240\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u7f16\u53f7\n\n\u2235\u6211\u524d\u9762\u66fe\u7ecf\u5b58\u50a8\u8fc7\u6811\u7684\u5de6\u53f3\u5b69\u5b50\n\n\u6240\u4ee5\u6211\u5f53\u524d\u7684\u533a\u95f4\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528[tree[root].left,tree[root].right]\u8868\u793a\n\n\\*/\n```cpp\nint query(int nl,int nr,int root){\n        if(tree[root].left>nr||tree[root].right<nl)    return 0;    //\u5982\u679c\u4e8c\u8005\u6ca1\u6709\u4ea4\u96c6\u5219\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u7684\u503c \n        if(tree[root].left>=nl&&tree[root].right<=nr)        return tree[root].tot;\n        //\u5982\u679c\u8fd9\u4e2a\u5f53\u524d\u533a\u95f4\u672c\u8eab\u5c31\u662f\u5c5e\u4e8e\u6211\u8981\u6c42\u7684\u90a3\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u5c31\u4e0d\u7ee7\u7eed\u9012\u5f52\u4e86\uff0c\u76f4\u63a5\u56de\u6eaf\n        //\u5b9e\u9645\u4e0a\u56fe\u89e3\u4e2d\u662f\u4ecd\u65e7\u9012\u5f52\u5230\u6700\u540e\u7684\uff0c\u6240\u4ee5\u4e0d\u514d\u4f1a\u591a\u4e00\u4e9b\u64cd\u4f5c\uff0c\u8017\u8d39\u65f6\u95f4\n        //\u50cf\u8fd9\u6837\u5c31\u6bd4\u8f83\u7b80\u4fbf\u3002\n        return query(nl,nr,root<<1)+query(nl,nr,root<<1|1);\n    }\n```\n3.\u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\n\u663e\u7136\uff0c\u5982\u679c\u66f4\u65b0\u5355\u8282\u70b9\u7684\u8bdd\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u2463\uff0c\n\n\u800c\u9898\u76ee\u8981\u6c42\u7684\u662f\u533a\u95f4\u6027\u7684\u4fee\u6539\u548c\u67e5\u8be2\u8bbf\u95ee\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u7684\u4e8c\u8fdb\u5236\u5e94\u7528\u662f\u884c\u4e0d\u901a\u7684\u3002\n\n\uff08\u6211\u81ea\u8ba4\u4e3a\uff09\u7ebf\u6bb5\u6811\u6700\u9ad8\u660e\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u61d2\u60f0\u6807\u8bb0(lazy\\_tag)\n\n\u56e0\u4e3a\u6709\u4e86\u61d2\u60f0\u6807\u8bb0\uff08lazy\\_tag\uff09\u624d\u4f7f\u5f97\u7ebf\u6bb5\u6811\u53d8\u5f97\u9ad8\u6548\uff0c\u65b9\u4fbf\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5bf9\u4e8e\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\u7684\u4fee\u6539\uff0c\u663e\u7136\u5982\u679c\u9010\u4e2a\u9012\u5f52\u56de\u6eaf\u4fee\u6539\uff0c\u628a\u6bcf\u4e00\u6b21\u7684\u533a\u95f4\u66f4\u65b0\u5b8c\uff0c\u662f\u6781\u5176\u8017\u8d39\u65f6\u95f4\u7684\uff08\u663e\u7136\u4e0d\u53ef\u80fd\u662fO(logn)\uff09\uff0c\u7ebf\u6bb5\u6811\u5f15\u5165\u61d2\u60f0\u6807\u8bb0\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u201c\u53ea\u62ff\u8fd9\u6b21\u5bf9\u6211\u6709\u7528\u7684\uff0c\u8fd9\u6b21\u5bf9\u6211\u6709\u7528\u7684\u4e00\u6b21\u6027\u62ff\u5149\uff0c\u6682\u65f6\u6ca1\u7528\u7684\u5148\u4e0d\u7ba1\u4ed6\uff0c\u53ef\u4ee5\u5148\u5b58\u7740\u201d\u3002\n\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ee5add\u8868\u793alazy\\_tag\uff0c\u540c\u65f6\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ef4\u62a4\u7ebf\u6bb5\u6811\u7684\u51fd\u6570update\u3001\u4e00\u4e2a\u5411\u4e0b\u4f20\u9012\u61d2\u60f0\u6807\u8bb0(lazy\\_tag)\u7684\u51fd\u6570pushdown\u3001\u4e00\u4e2a\u5411\u4e0a\u4f20\u9012\u503c\u7684\u51fd\u6570pushup\u6765\u66f4\u65b0\u3002\n\n\u61d2\u60f0\u6807\u8bb0\u7684\u542b\u4e49\u5373\u5bf9\u4e8e\u6211\u5f53\u524d\u7684[tree[root].left,tree[root].right]\uff0c\u6682\u65f6\u6709lazy\\_tag\u7684\u6570\u8fd8\u6ca1\u52a0\u4e0a\u53bb\uff0c\u6211\u4eec\u4e0d\u6025\u7740\u52a0\uff0c\u7b49\u5230\u8981\u7528\u6216\u8005\u8bbf\u95ee\u67e5\u8be2\u7684\u65f6\u5019\u624d\u7528\u5b83\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u64cd\u4f5c\uff0c\u8fd9\u5c31\u662f\u7ebf\u6bb5\u6811\u80fd\u505a\u5230O\uff08nlogn\uff09\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0\uff01\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n    \n\n    \n    \n    \n```cpp\n    //\u4ece\u5efa\u6811\u5f00\u59cb\u91cd\u65b0\u8bf4\u8d77\n    void build(int lef,int rig,int root){\n        tree[root].left=lef;\n        tree[root].right=rig;\n        tree[root].add=0;    //\u61d2\u60f0\u6807\u8bb0lazy_tag\n        if(lef==rig){tree[root].tot=a[lef];}\n        else{\n            int mid=(lef+rig)>>1;\n            build(lef,mid,root<<1);\n            build(mid+1,rig,root<<1|1);\n            tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n//\u8981\u8bb0\u5f97\u628a\u7ebf\u6bb5\u6811\u5148\u521d\u59cb\u5316\u4e00\u4e0b\n        }\n    }\n    //\u5411\u4e0b\u4f20\u9012\u61d2\u60f0\u6807\u8bb0(lazy_tag)\uff08\u8bf4\u660e\u81ea\u5df1\u73b0\u5728\u9700\u8981\u5f53\u524d\u7684\u6839\u52a0\u4e0a\u61d2\u60f0\u6807\u8bb0\u4e86\uff0c\u800c\u6211\u4e0d\u60f3\u6d6a\u8d39\u65f6\u95f4\u5730\u53bb\u9012\u5f52\u628a\u5269\u4e0b\u7684\u7ed9\u4e00\u6b21\u6027\u66f4\u65b0\u5b8c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u4f20\u9012\u61d2\u60f0\u6807\u8bb0\uff0c\u4e0d\u66f4\u65b0\u5de6\u53f3\u5b69\u5b50\uff0c\u9664\u975e\u6211\u9700\u8981\u3002\uff09\n    void pushdown(int root){\n        if(tree[root].add){\n            tree[root<<1].add+=tree[root].add;\n            tree[root<<1|1].add+=tree[root].add;\n            //\u5f53\u524d\u533a\u95f4\u52a0\u4e0a\u4e86\u61d2\u60f0\u6807\u8bb0\u7684\u503c\u5b9e\u9645\u4e0a\u52a0\u7684\u503c\u662flazy_tag*\u533a\u95f4\u957f\u5ea6\n            //\u753b\u4e00\u4e0b\u56fe\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\n            tree[root<<1].tot+=tree[root].add*(tree[root<<1].right-tree[root<<1].left+1);\n            tree[root<<1|1].tot+=tree[root].add*(tree[root<<1|1].right-tree[root<<1|1].left+1);\n            tree[root].add=0;\n        }\n    } \n    //\u5411\u4e0a\u63a8\u4f20\u9012\u503c\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u5237\u65b0\u4e00\u4e0b\u81ea\u8eab\u7684\u503c\uff08\u4fdd\u8bc1\u4e0b\u9762\u7684\u503c\u6539\u53d8\u7684\u65f6\u5019\u81ea\u5df1\u4e5f\u4f1a\u6539\u53d8\uff09\n    void pushup(int root){\n        tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n    }     \n```\n/\\*\u533a\u95f4\u66f4\u65b0\uff0c\u610f\u601d\uff1a\n\u5f53\u524d\u7684\u66f4\u65b0\u533a\u95f4\u4e3a[tree[root].left,tree[root].right]\n\n\u76ee\u6807\u7684\u66f4\u65b0\u533a\u95f4\u4e3a[nl,nr]\n\n\u663e\u7136\u5982\u679c\u6ca1\u4ea4\u96c6\u5c31\u4e0d\u7ba1\u4ed6\u3002\n\n\u5982\u679c\u4e8c\u8005\u533a\u95f4\u6709\u4ea4\u96c6\u6211\u4eec\u518d\u8be6\u7ec6\u5904\u7406\n\n\u5982\u679c\u5f53\u524d\u67e5\u627e\u7684\u533a\u95f4\u662f\u6211\u4eec\u76ee\u6807\u533a\u95f4\u7684\u5176\u4e2d\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u81ea\u7136\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002\n\n\uff08\u5f53\u521d\u6211\u8fd9\u91cc\u4e5f\u662f\u641e\u5f97\u4e71\u4e71\u7684\uff0c\u63a8\u8350\u5927\u5bb6\u53ef\u4ee5\u505a\u56fe\u4e00\u4e0b\uff0c\u753b\u4e2a\u56fe\u4e00\u4e0b\u5c31\u770b\u51fa\u6765\u4e86\u3002\uff09\n\n\\*/\n    \n    \n```cpp\n    void update(int nl,int nr,int root,int c){\n        if(tree[root].left>nr||tree[root].right<nl)    return;\n        if(tree[root].left>=nl&&tree[root].right<=nr){\n            tree[root].add+=c;\n            tree[root].tot+=c*(tree[root].right-tree[root].left+1);\n            return;\n        }\n        pushdown(root);\n        int mid=(tree[root].left+tree[root].right)>>1;\n        if(nl<=mid)        update(nl,nr,root<<1,c);\n        if(mid+1<=nr)    update(nl,nr,root<<1|1,c);\n        pushup(root);\n    } \n    //\u67e5\u8be2\u5de5\u4f5c,\u5728[nl,nr]\u7684\u533a\u95f4\u5185\u67e5\u627e\uff0c\u5f53\u524d\u67e5\u627e[tree[root].left,tree[root].right]\u533a\u95f4 \n    int query(int nl,int nr,int root){\n        if(tree[root].left>nr||tree[root].right<nl)    return 0;    //\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u7684\u503c \n        if(tree[root].left>=nl&&tree[root].right<=nr)        return tree[root].tot;\n        pushdown(root);    //\u5411\u4e0b\u4f20\u9012\u624d\u80fd\u8ba1\u7b97\u6c42\u548c\u3002\n        return query(nl,nr,root<<1)+query(nl,nr,root<<1|1);    //\u8fd4\u56de\u6240\u8ba1\u7b97\u7684\u6c42\u548c\n    }\n```\n\u5b9e\u9645\u4e0a\u8fd9\u9898\u5c31\u5b8c\u6210\u4e86\uff01\u800c\u4e14\u6211\u4eec\u4e5f\u5b66\u4f1a\u4e86\u7ebf\u6bb5\u6811\u7684\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\uff01\n\u6807\u7a0b\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nLL op,n,m,x,y,k,a[300005],low_bit,tempt,p;\nstruct fkt{\n    LL left;\n    LL right;\n    LL tot;\n    LL multi;\n    LL add;\n}tree[300005];\nnamespace qaq{\n    LL change(LL test){LL ans=0;while(test){test>>=1;ans++;}test=1;while(ans--)test*=2;return test;}//\u4e3a\u4e86\u5efa\u7acb\u5b8c\u5168\u6811 \n    //\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811 \n    void build(LL lef,LL rig,LL root){//\u4ecelef\u5230rig\u7684\u8ddd\u79bb\u4ee5root\u4e3a\u6839\u5efa\u6811\uff08\u524d\u63d0\u662f\u8981\u6c42rig-lef+1\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u5b8c\u5168\u6811\uff09 \n        tree[root].left=lef;\n        tree[root].right=rig;\n        if(lef==rig){tree[root].tot=a[lef]%p;}\n        else{\n            LL mid=(lef+rig)>>1;\n            build(lef,mid,root<<1);\n            build(mid+1,rig,root<<1|1);\n            tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n            tree[root].tot%=p;\n        }\n    }\n    //\u5411\u4e0b\u4f20\u9012\u5ef6\u8fdf\u6807\u8bb0\n    void pushdown(LL root){\n        if(tree[root].multi!=1){\n            tree[root<<1].add*=tree[root].multi;\n            tree[root<<1].add%=p;\n            tree[root<<1|1].add*=tree[root].multi;\n            tree[root<<1|1].add%=p;\n            tree[root<<1].multi*=tree[root].multi;\n            tree[root<<1].multi%=p;\n            tree[root<<1|1].multi*=tree[root].multi;\n            tree[root<<1|1].multi%=p;\n            tree[root<<1].tot*=tree[root].multi;\n            tree[root<<1].tot%=p;\n            tree[root<<1|1].tot*=tree[root].multi;\n            tree[root<<1|1].tot%=p;\n            tree[root].multi=1;\n        }\n        if(tree[root].add){\n            tree[root<<1].add+=tree[root].add;\n            tree[root<<1].add%=p;\n            tree[root<<1|1].add+=tree[root].add;\n            tree[root<<1|1].add%=p;\n            tree[root<<1].tot+=tree[root].add*(tree[root<<1].right-tree[root<<1].left+1);\n            tree[root<<1].tot%=p;\n            tree[root<<1|1].tot+=tree[root].add*(tree[root<<1|1].right-tree[root<<1|1].left+1);\n            tree[root<<1|1].tot%=p;\n            tree[root].add=0;\n        }\n    } \n    //\u5411\u4e0a\u63a8\u4f20\u9012\u503c\n    void pushup(LL root){\n        tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n    }     \n    //\u533a\u95f4\u66f4\u65b0\n    void update(LL nl,LL nr,LL root,LL c,bool cc){\n        //bool cc\uff1a1\u8868\u793a\u4e58\u6cd5\uff0c0\u8868\u793a\u52a0\u6cd5 \n        if(tree[root].left>nr||tree[root].right<nl)    return;\n        if(tree[root].left>=nl&&tree[root].right<=nr){\n            if(cc==0){\n                tree[root].add+=c;\n                tree[root].add%=p;\n                tree[root].tot+=c*(tree[root].right-tree[root].left+1);\n                tree[root].tot%=p;\n            }\n            else{\n                tree[root].multi*=c;\n                tree[root].multi%=p;\n                tree[root].add*=c;\n                tree[root].add%=p;\n                tree[root].tot*=c;\n                tree[root].tot%=p;\n            }\n            return;\n        }\n        LL mid=(tree[root].left+tree[root].right)>>1;\n        pushdown(root);\n        if(nl<=mid)        update(nl,nr,root<<1,c,cc);\n        if(mid+1<=nr)    update(nl,nr,root<<1|1,c,cc);\n        pushup(root);\n    } \n    //\u67e5\u8be2\u5de5\u4f5c,\u5728[nl,nr]\u7684\u533a\u95f4\u5185\u67e5\u627e\uff0c\u5f53\u524d\u67e5\u627e[l,r]\u533a\u95f4 \n    LL query(LL nl,LL nr,LL root){\n        if(tree[root].left>nr||tree[root].right<nl)    return 0;//\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u7684\u503c \n        if(tree[root].left>=nl&&tree[root].right<=nr)    return tree[root].tot;\n        pushdown(root);//\u5411\u4e0b\u4f20\u9012\u624d\u80fd\u8ba1\u7b97\u6c42\u548c\u3002\n        LL x=query(nl,nr,root<<1)%p;\n        LL y=query(nl,nr,root<<1|1)%p;\n        pushup(root);\n        return (x+y)%p;\n    }\n    int main(){\n        scanf(\"%lld%lld%lld\",&n,&m,&p);\n        for(LL i=1;i<=300000;i++){\n            tree[i].multi=1;\n            tree[i].add=0;\n        }\n        for(LL i=1;i<=n;i++){\n            scanf(\"%lld\",&a[i]);\n            a[i]%=p;\n        }    \n        tempt=change(n);\n        build(1,tempt,1);\n        /*for(int i=tempt;i<=tempt*2;i++)\n        cout<<tree[i].tot<<\"  \";\n        cout<<endl;*/\n        while(m--){\n/* void update(LL nl,LL nr,LL root,LL c,bool cc){\n```\nbool cc\uff1a1\u8868\u793a\u4e58\u6cd5\uff0c0\u8868\u793a\u52a0\u6cd5\n\n\\*/\n\n```cpp\n            scanf(\"%lld\",&op);\n            if(op==1){//\u4e58\u6cd5 \n                scanf(\"%lld%lld%lld\",&x,&y,&k);\n                update(x,y,1,k,1);\n            }\n            else if(op==2){//\u52a0\u6cd5 \n                scanf(\"%lld%lld%lld\",&x,&y,&k);\n                update(x,y,1,k,0);\n            }\n            else{\n                scanf(\"%lld%lld\",&x,&y);\n                printf(\"%lld\\n\",query(x,y,1)%p);\n            }\n            /*for(int i=tempt;i<=tempt*2;i++)\n            cout<<tree[i].tot<<\"  \";\n            cout<<endl;*/\n        }\n        /*for(int i=tempt;i<=tempt*2;i++)\n        cout<<tree[i].tot<<\"  \";\n        cout<<endl;*/\n        return 0;\n    }\n}\nint main(){\n    //freopen(\"3373.in\",\"r\",stdin);\n    //freopen(\"3373.out\",\"w\",stdout);\n    qaq::main();\n    return 0;\n}\n\n```",
        "postTime": 1508667273,
        "uid": 28939,
        "name": "Lyrics",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u5173\u4e8e\u61d2\u6807\u8bb0\u7684\u7406\u89e3\n\n1.\u82e5\u8282\u70b9node\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\uff0c\u4e0d\u8bba\u4e58\u8fd8\u662f\u52a0\uff0c\u5219\u8fd9\u4e2a\u8282\u70b9\u672c\u8eab\u7684sum\u503c\u5df2\u7ecf\u5b8c\u6210\u4fee\u6539\uff0c\u4f46\u5176\u5b50\u6811\u6240\u6709\u7684\u8282\u70b9\u8fd8\u6ca1\u6709\u4fee\u6539\n\n2.\u5728\u67e5\u8be2\u65f6\uff0c\u7531\u4e8e\u6709\u4e9b\u8282\u70b9\u7684sum\u503c\u8fd8\u6ca1\u6709\u4fee\u6539\uff0c\u56e0\u6b64\u8981\u4f18\u5148\u6839\u636e\u61d2\u6807\u8bb0\u66f4\u65b0\u6bcf\u4e00\u4e2anode\u7684\u5b50\u8282\u70b9\u7684sum\u503c\u3002\u5373\u5148\u5b8c\u6210\u66f4\u65b0\uff0c\u518d\u67e5\u8be2\uff0c\u624d\u80fd\u4fdd\u8bc1\u7ed3\u679c\u7684\u6b63\u786e\u6027\u3002\n\n3.\u82e5\u67d0\u4e00\u8282\u70b9node\u7684add_tag\u6709\u6807\u8bb0\uff0c \u90a3\u4e48\u8868\u793a\u5176\u5b50\u8282\u70b9\u90fd\u9700\u8981\u8fdb\u884c\u5bf9\u5e94\u7684\u52a0\u6cd5\u64cd\u4f5c\u3002\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u8fdb\u884c\u533a\u95f4\u4e58\u6cd5\u7684\u66f4\u65b0\uff0c\u5bf9\u4e8e\u5176\u5b50\u8282\u70b9\u9700\u8981\u5148\u4e58\u5176add_tag[son]\uff0c sum[son], mul_tag[son], \u7136\u540e\u518d\u52a0node\u8282\u70b9\u7684add_tag\uff0c \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u5148\u52a0\u540e\u4e58\u7684\u66f4\u65b0\u4fee\u6539.\u6ee1\u8db3\u4e58\u6cd5\u7ed3\u5408\u5f8b\u3002\n\n4\u5bf9\u4e8e\u5148\u4e58\u540e\u52a0\u64cd\u4f5c\u4e5f\u540c\u7406\uff0c\u5982\u679cnode\u8282\u70b9\u5df2\u7ecf\u6709\u4e86mul_tag\uff0c\u90a3\u4e48\u76f4\u63a5\u66f4\u65b0node\u7684add_tag\u5c31\u53ef\u4ee5\u4e86\uff0c \u9996\u5148\u5bf9\u4e8enode\u6ee1\u8db3\u4e4b\u524d\u7684\u4e58\u6cd5\u6ca1\u6709\u5f71\u54cd\u672c\u6b21\u52a0\u6cd5\uff0c \u5176\u6b21\u5bf9\u4e8enode\u7684\u5b50\u8282\u70b9\u6ee1\u8db3\u5148\u4e58\u4e4b\u524d\u7684\u4e58\u6cd5\uff0c \u518d\u52a0\u672c\u6b21\u52a0\u6cd5\uff0c \u6240\u4ee5\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\n\n5 \u7efc\u4e0a\u6240\u8ff0 push_down\u51fd\u6570\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u8981\u6c42\n\t```\n//\u5148\u4e58\nsum[node*2] *= mul_tag[node];\nsum[node*2+1] *= mul_tag[node];\n\nadd_tag[node*2] *= mul_tag[node];\nadd_tag[node*2+1] *= mul_tag[node];\n\nmul_tag[node*2] *= mul_tag[node];\nmul_tag[node*2+1] *= mul_tag[node];\n\n//\u518d\u52a0\nadd_tag[node*2] += add_tag[node];\nadd_tag[node*2+1] += add_tag[node];\n\nint mid = (l+r)/2;\n\nsum[node*2] += add_tag[node] * (mid-l+1);\nsum[node*2+1] += add_tag[node] * (r-mid);\n//\u8fd9\u91cc\u56e0\u4e3aadd_tag\u5df2\u7ecf\u4e58\u8fc7\u4e86\uff0c\u6240\u4ee5\u4ee3\u7801\u5b9e\u73b0\u5b9e\u9645\u4e0a\u662f\u5206\u522b\u4e58\u5b8c\u518d\u52a0\uff0c \u7b49\u4ef7\u4e8e\u5148\u52a0\u5b8c\u4e86\u4e00\u8d77\u4e58\n\nadd_tag[node] = 0;\nmul_tag[node] = 1;\n```\n",
        "postTime": 1570631917,
        "uid": 184681,
        "name": "cscy",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.cnblogs.com/pyyyyyy/p/11114293.html)\n\n#\u9898\u76ee\u94fe\u63a5\n\n[P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2](https://www.luogu.org/problemnew/show/P3373)\n\n#\u601d\u8def\n\n\u8fd9\u9898\u4e4d\u4e00\u770b\u89c9\u5f97\u597d\u96be\u554a\uff0c\u7136\u540e\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u9898\u76ee\n\n\u9898\u76ee\u8bf4\u6709\u4e24\u79cd\u4fee\u6539\u64cd\u4f5c\n\n>1.\u533a\u95f4\u52a0\u67d0\u4e00\u503c\n>2.\u533a\u95f4\u4e58\u67d0\u4e00\u503c\n\n\u9996\u5148\u60f3\u5230\u7684\u601d\u8def\u4e00\u5b9a\u662f\u6253\u4e24\u4e2a$lazymark$\n**\u7537**\u5c31**\u7537**\u5728\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6709\u5148\u540e\uff0c\u6211$ri$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5e94\u8be5\u6765\u4ed4\u7ec6\u770b\u4e00\u4e0b\u5148\u540e\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u7684\u5f71\u54cd\n\n\u987a\u5e8f\u65e0\u975e\u5c31\u662f\u4e24\u79cd:\n\n1.\u5148\u4e58\u540e\u52a0\n\n\u5148\u4e58\u540e\u52a0\u548c\u6570\u5b66\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u5148\u770b\u4e00\u4e0b\u8fd9\u79cd\n\n$tree[ls].date=(tree[ls].date\\times tree[x].cheng\\ \\%\\ p+tree[x].jia\\times (r-l+1)\\ \\%\\ p)\\ \\%\\ p $\n\n\u5982\u6b64\u770b\u6765\u6211\u4eec\u6539\u53d8$cheng$\u7684\u503c\u65f6\uff0c\u53ea\u9700\u8981\u628a$jia$\u53bb\u4e58\u4e00\u4e0b$cheng$\u5c31\u884c\u4e86\n\u8fd9\u6837\u6765\u770b\u597d\u50cf\u5f88\u5bf9.........\u5176\u5b9e\u5c31\u662f\u5f88\u5bf9\n\n2.\u5148\u52a0\u540e\u4e58\n\n \u90a3\u4e48\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\n \n$tree[ls].date=(tree[ls].date+ tree[x].jia)\\cdot tree[root].cheng\\ \\%\\ p $\n\n\u8fd9\u6837\u5b50\u7684\u5316\u5c31\u6ca1\u6cd5\u5411\u4e0a\u9762\u7684\u4ee3\u7801\u4e00\u6837\u66f4\u65b0$cheng$\u65f6\u53bb\u7ef4\u62a4$jia$\u4e86\n\n\u770b\u5b8c\u8fd9\u91cc\u5c31\u6ca1\u4ec0\u4e48\u96be\u7684\u4e86\uff0c\u5c31\u662f\u8981\u5199\u4e24\u4e2a$update$\u53bb\u5206\u522b\u7ef4\u62a4$cheng,jia$\u4e24\u4e2a$lazymark$\n\n#\u53e3\u80e1\n\u6765\u8be6\u7ec6\u89e3\u91ca~~\uff08\u53e3\u80e1\uff09~~\u4e00\u6ce2:\n**\u4ee5\u4e0b\u89e3\u91ca\u4e0d\u9488\u5bf9\u9898\u76ee\u53ea\u662f\u53e3\u80e1\u4e00\u6ce2**\n\n\u73b0\u5728\u6211\u4eec\u8981\u5bf9\u533a\u95f4$[l,r]$\u8fdb\u884c\u4e00\u5768\u7684\u52a0\u548c\u4e58\u7684\u64cd\u4f5c\n\n\u5148\u628a\u5b83\u770b\u6210\u52a0\u6cd5\u4f18\u5148\u7684\u60c5\u51b5\n\n$(sum+lazy_{jia}) \\times lazy_{cheng}$\n\n\u5f88\u5bb9\u6613\u770b\u51fa\u6765\n\u5982\u679c\u6211\u66f4\u65b0\u4e86$ lazy_{cheng}$\u90a3\u4e48$lazy_{jia}$\u4e5f\u8981\u6539\u53d8\u6240\u4ee5\u6211\u4eec\u53d8\u5f62\u4e00\u4e0b\n\n$(sum \\times lazy_{cheng})+lazy_{jia}*lazy_{cheng}$\n\n\u8bbe$sjpnb=lazy_{jia}*lazy_{cheng}$\n\n\u90a3\u4e48\u5c31\u53d8\u6210\u4e86;\n\n$(sum \\times lazy_{cheng})+sjpnb$\n\n\u5982\u6b64\u6765\u770b$lazy_{cheng}$\u6539\u53d8\u5c31\u4e0d\u4f1a\u5bfc\u81f4$lazy_{jia}$\u53d8\u4e86\n\u6211\u4eec\u628a$sjpnb$\u770b\u6210$lazy_{jia}$\u4e0d\u5c31ok\u4e86\uff1f\n\n\u53e3\u80e1\u5b8c\u6210\u6709\u4ec0\u4e48\u9519\u8bef\u8bf7\u89c1\u8c05\uff0c\u6bd5\u7adf\u4eba\u5bb6\u662f\u83dc\u9e21\u5417\n\n#\u4ee3\u7801\n\n\u4ee3\u7801\u5199\u7684\u53ef\u80fd\u590d\u6742\u4e86\u4e9b\uff0c$putdown$\u51fd\u6570\u5199\u7684\u6709\u70b9\u590d\u6742\u4e86\uff0c\u5176\u5b9e\u6ca1\u5fc5\u8981\u50cf\u6211\u8fd9\u6837\u5199\uff0c\u53ef\u4ee5\u53bb\u770b\u770b\u5176\u4ed6\u5927\u4f6c\u7684\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<stack>\n#include<vector>\n#include<map>\n#include<string>\n#include<cstring>\n#define int long long int\n#define lowbit(x) x & -x\nconst int N=100000;\nusing namespace std;\ninline int read() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\twhile(c < '0' || c > '9') {\n\t\tif(c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\nint n,m,p,a[N*4];\nstruct node {\n\tint date;\n\tint cheng;\n\tint jia;\n} tree[N*4+10];\nvoid pushup(int root) {\n\ttree[root].date=(tree[root<<1].date+tree[root<<1|1].date)%p;\n}\nvoid build(int root,int l,int r) {\n\ttree[root].cheng=1;\n\tif(l==r) {\n\t\ttree[root].date=a[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(root<<1,l,mid);\n\tbuild(root<<1|1,mid+1,r);\n\tpushup(root);\n}\nvoid pushdown(int x,int l,int r) {\n\tint ls=x<<1,rs=x<<1|1,mid=(l+r)>>1;\n\ttree[ls].date=(tree[ls].date*tree[x].cheng%p+tree[x].jia*(mid-l+1)%p)%p;\n\ttree[ls].cheng=(tree[ls].cheng*tree[x].cheng)%p;\n\ttree[ls].jia=(tree[ls].jia*tree[x].cheng+tree[x].jia)%p;\n\ttree[rs].date=(tree[rs].date*tree[x].cheng%p+tree[x].jia*(r-(mid+1)+1)%p)%p;\n\ttree[rs].cheng=(tree[rs].cheng*tree[x].cheng)%p;\n\ttree[rs].jia=(tree[rs].jia*tree[x].cheng+tree[x].jia)%p;\n\ttree[x].jia=0;\n\ttree[x].cheng=1;\n\treturn;\n}\nvoid update_cheng(int root,int l,int r,int x,int y,int k) {\n\tif(r<x || l>y) return ;\n\tif(l>=x & r<=y) {\n\t\ttree[root].date=(tree[root].date*k)%p;\n\t\ttree[root].cheng=(tree[root].cheng*k)%p;\n\t\ttree[root].jia=(tree[root].jia*k)%p;\n\t\treturn;\n\t}\n\tpushdown(root,l,r);\n\tint mid=(l+r)>>1;\n\tupdate_cheng(root<<1,l,mid,x,y,k);\n\tupdate_cheng(root<<1|1,mid+1,r,x,y,k);\n\tpushup(root);\n}\nvoid update_jia(int root,int l,int r,int x,int y,int k) {\n\tif(r<x || l>y) return ;\n\tif(l>=x & r<=y) {\n\t\ttree[root].date=(tree[root].date+k*(r-l+1)%p)%p;\n\t\ttree[root].jia=(tree[root].jia+k)%p;\n\t\treturn;\n\t}\n\tpushdown(root,l,r);\n\tint mid=(l+r)>>1;\n\tupdate_jia(root<<1,l,mid,x,y,k);\n\tupdate_jia(root<<1|1,mid+1,r,x,y,k);\n\tpushup(root);\n}\nint query(int root,int l,int r,int x,int y) {\n\tif(r<x || l>y) return 0;\n\tif(l>=x && r<=y) {\n\t\treturn tree[root].date;\n\t}\n\tpushdown(root,l,r);\n\tint mid=(l+r)>>1;\n\treturn (query(root<<1,l,mid,x,y)+query(root<<1|1,mid+1,r,x,y))%p;\n}\nsigned main() {\n\tscanf(\"%lld %lld %lld\",&n,&m,&p);\n\tfor(int i=1; i<=4*n; i++) tree[i].cheng=1;\n\tfor(int i=1; i<=n; i++) {\n\t\tscanf(\"%lld\",&a[i]);\n\t}\n\tbuild(1,1,n);\n\tint opt,x,y,k;\n\twhile(m--) {\n\t\tscanf(\"%lld\",&opt);\n\t\tif(opt==1) {\n\t\t\tscanf(\"%lld %lld %lld\",&x,&y,&k);\n\t\t\tupdate_cheng(1,1,n,x,y,k);\n\t\t}\n\t\tif(opt==2) {\n\t\t\tscanf(\"%lld %lld %lld\",&x,&y,&k);\n\t\t\tupdate_jia(1,1,n,x,y,k);\n\t\t}\n\t\tif(opt==3) {\n\t\t\tscanf(\"%lld %lld\",&x,&y);\n\t\t\tcout<<query(1,1,n,x,y)%p<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1562035295,
        "uid": 122557,
        "name": "pyyyyyy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u4e48\u597d\u7684\u533a\u95f4\u64cd\u4f5c\u6a21\u677f\u9898\uff0c\u5f53\u7136\u7f3a\u4e0d\u4e86\u4e00\u7bc7$fhqTreap$\u9898\u89e3\u4e86\uff01~~\uff08\u9003~~  \n\n\u4eca\u5929\u521a\u521a\u67e5\u51fa\u4e86\u81ea\u5df1\u6587\u827a\u5e73\u8861\u6811\u7684\u9519\uff0c\u4e8e\u662f\u5174\u81f4\u52c3\u52c3\u8dd1\u6765\u53cc(san)\u500d\u7ecf\u9a8c  \n\n~~\u7136\u540e\u88ab\u4e27\u5fc3\u75c5\u72c2\u7684#2,#9,#10\u6441\u5728\u5730\u4e0a\u6469\u64e6~~  \n\n\u6700\u540e\u4e0d\u5f97\u5df2\u5438\u4e86\u4e00\u53e3\u6c27\u6c14\uff0c~~\u4ee5950ms+~~\u5361\u8fc7\u4e86\u8fd9\u9898  \n\n\u4e8e\u662f\u5c31\u5f00\u5fc3\u5730\u6765\u53d1\u9898\u89e3\u4e86\uff01\uff01\uff01  \n\n\u4e0d\u77e5\u9053$fhqTreap$\uff1f~~\u51fa\u95e8\u5de6\u8f6c[\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\uff0c\u53f3\u8f6c[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3391)\uff0c\u5305\u60a8\u6ee1\u610f~~  \n\n\u8fd9\u91cc\u4ec5\u7b80\u5355\u8bf4\u660e\u601d\u60f3\uff1a\u628a\u7b2c$1$\u81f3$l-1$\u548c$r+1$\u81f3$n$\u7684\u5143\u7d20\u5206\u88c2\u51fa\u53bb\uff0c\u4e2d\u95f4\u5269\u4e0b\u7684\u5c31\u662f\u8981\u64cd\u4f5c\u7684\u533a\u95f4\uff0c\u5728\u6839\u4e0a\u6253\u6807\u8bb0\u5c31\u884c\u4e86  \n\n\u66f4\u8be6\u7ec6\u7684\u6ce8\u91ca\u89c1\u4ee3\u7801  \n\n\u7531\u4e8e\u6211\u5f3a\u884c\u5c01\u88c5\uff0c\u4ee3\u7801\u6781\u5176\u5197\u957f\uff0c\u56e0\u6b64\u5c06\u5404\u4e2a\u90e8\u5206\u5206\u5f00\u8bb2\n\n\u9996\u5148\u662f\u5bf9$fhqTreap$\u7c7b\u7684\u5b9a\u4e49  \n\n```cpp\ntemplate<typename T>\nclass fhq_treap\n{\n    private:\n        struct Node;//\u6240\u6709\u5143\u7d20\u5b58\u5165\u7ed3\u70b9\n        Node* _root;//\u6839\u6307\u9488\n        Node* merge(Node*,Node*);//\u5408\u5e76\u4e24\u68f5\u6811\n        void ranksplit(Node*,const int&,Node*&,Node*&);//\u6309\u6392\u540d\u5c06\u6811\u5206\u88c2\n        void dfs(Node*);//\u8f93\u51fa\u5168\u6811\u4e2d\u5e8f\u904d\u5386\uff0c\u65b9\u4fbf\u8c03\u8bd5\n    public:\n        struct iterator;//\u5047\u88c5\u5199\u4e2a\u8fed\u4ee3\u5668\uff0c\u5176\u5b9e\u51e0\u4e4e\u5168\u5e9f\n        void addchange(int,int,const T&);//\u533a\u95f4\u52a0\u6cd5\n        void mulchange(int,int,const T&);//\u533a\u95f4\u4e58\u6cd5\n        T query(int,int);//\u533a\u95f4\u6c42\u548c\n        iterator insert(const T&);//\u63d2\u5165\u5143\u7d20\n        void vis();//dfs\u5bf9\u5916\u7684\u63a5\u53e3\n};\n```\n\n\u7136\u540e\u662f\u7ed3\u70b9...  \n\n```cpp\ntemplate<typename T>\nstruct fhq_treap<T>::Node\n{\n\tT val;\n\tint pri;//\u968f\u673a\u4f18\u5148\u7ea7\n\tNode* lc;//\u5de6\u513f\u5b50\n\tNode* rc;//\u53f3\u513f\u5b50 //fhqTreap\u6ca1\u6709\u65cb\u8f6c\uff0c\u7236\u6307\u9488\u53ef\u4ee5\u4e0d\u7ef4\u62a4\n\tint s;//\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n\tT addflag;//\u52a0\u6cd5\u6807\u8bb0\n    T mulflag;//\u4e58\u6cd5\u6807\u8bb0\n    T sum;//\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5143\u7d20\u4e4b\u548c\n\tNode(const T& v=T(),//\u6784\u9020\u51fd\u6570\uff0c\u7531\u4e8e\u8981\u5b58\u7684\u4fe1\u606f\u591a\uff0c\u56e0\u6b64\u6bd4\u8f83\u957f\n        Node *l=NULL,\n        Node *r=NULL,\n        int ss=1,\n        const T& aff=T(0),\n        const T& mff=T(1)):\n        val(v),\n        sum(v),\n        pri(rand()),\n        lc(l),\n        rc(r),\n        s(ss),\n        addflag(aff),\n        mulflag(mff) {}\n\tstatic int size(Node* ptr)//\u8fd9\u6837\u5c31\u53ef\u4ee5\u514d\u53bb\u5bf9\u7a7a\u6307\u9488\u7684\u5224\u65ad\n\t{\n\t\treturn ptr!=NULL?ptr->s:0;\n\t}\n\tvoid maintain()//\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\u3001\u5b50\u6811\u5143\u7d20\u548c\n\t{\n\t\ts=size(lc)+size(rc)+1;\n    \tsum=val;\n    \tif(lc!=NULL)sum=(sum+lc->sum*lc->mulflag+lc->s*lc->addflag)%P;\n    \tif(rc!=NULL)sum=(sum+rc->sum*rc->mulflag+rc->s*rc->addflag)%P;\n\t}\n\tvoid pushdown()//\u533a\u95f4\u64cd\u4f5c\u7684\u6838\u5fc3:\u6807\u8bb0\u4e0b\u4f20\n\t{\n\t\tsum=(sum*mulflag+s*addflag)%P;//\u5148\u4fee\u6539\u5f53\u524d\u7ed3\u70b9\u7684\u5143\u7d20\u3001\u5143\u7d20\u548c\n        val=(val*mulflag+addflag)%P;//\u7531\u4e8e\u5f00long long\uff0c\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u53d6\u6a21\u53ef\u4ee5\u7701\u7565\n        if(lc!=NULL)\n        {\n            lc->addflag=(lc->addflag*mulflag+addflag)%P;//\u6ce8\u610f\u987a\u5e8f\uff01\u52a0\u6cd5\u6807\u8bb0\u5148\u4e58\u518d\u52a0\n            lc->mulflag=lc->mulflag*mulflag%P;\n        }\n        if(rc!=NULL)\n        {\n            rc->addflag=(rc->addflag*mulflag+addflag)%P;\n            rc->mulflag=rc->mulflag*mulflag%P;\n        }\n        addflag=T(0);//\u5f53\u524d\u7ed3\u70b9\u52a0\u6cd5\u6807\u8bb0\u5f52\u96f6\uff0c\u4e58\u6cd5\u6807\u8bb0\u5f52\u4e00\n        mulflag=T(1);\n\t}\n};\n```\n\n~~\u4f2a~~\u8fed\u4ee3\u5668\uff08\u6ca1\u4ec0\u4e48\u7528\u5904\uff0c\u4e0d\u89e3\u91ca\u4e86\uff09  \n\n```cpp\ntemplate<typename T>\nstruct fhq_treap<T>::iterator\n{\n\tprivate:\n\t\tNode* _real_node;\n\tpublic:\n\t\tT operator*()const{return _real_node->val;}\n\t\titerator(Node* ptr=NULL):_real_node(ptr) {}\n\t\titerator(const fhq_treap<T>::iterator& iter):_real_node(iter._real_node) {}\n};\n```\n\n\u904d\u5386\u7684\u4ee3\u7801\uff0c\u5f88\u597d\u5199\u7684\u8fa3\uff01\n\n```cpp\ntemplate<typename T>\nvoid fhq_treap<T>::dfs(Node* ptr)\n{\n\tif(!ptr)return;\n\tptr->pushdown();\n\tdfs(ptr->lc);\n\tcout<<ptr->val<<' ';//\u8fd9\u4ee3\u7801\u5199\u4e86\u672c\u6765\u662f\u5e0c\u671b\u9002\u914d\u5404\u79cd\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u7528\u6d41\u8f93\u51fa\n\tdfs(ptr->rc);\n}\ntemplate<typename T>\nvoid fhq_treap<T>::vis()\n{\n\tdfs(_root);\n\tcout<<endl;\n}\n```\n\n\u63a5\u4e0b\u6765\u662f$fhqTreap$\u7279\u6709\u7684\u64cd\u4f5c\n\n```cpp\ntemplate<typename T>\ntypename\nfhq_treap<T>::Node* fhq_treap<T>::merge(Node* x,Node* y)//\u5408\u5e76\u4ee5x\u3001y\u4e3a\u6839\u7684\u6811\uff0c\u8fd4\u56de\u65b0\u6811\u7684\u6839\n{\n\tif(!x)return y;\n\tif(!y)return x;\n\tif(x->pri<y->pri)//\u5982\u679cx\u4f18\u5148\u7ea7\u9ad8\u4e8ey\uff0c\u5c31\u628ay\u5408\u5e76\u5230x\u7684\u53f3\u513f\u5b50\u91cc\n\t{\n\t\tx->pushdown();//\u65e0\u8bba\u5e72\u4ec0\u4e48\uff0c\u90fd\u522b\u5fd8\u4e86\u4f20\u6807\u8bb0\u3001\u6539\u5927\u5c0f\u3001\u6c42\u548c\n\t\tx->rc=merge(x->rc,y);\n\t\tx->maintain();\n\t\treturn x;\n\t}\n\telse//\u5426\u5219\uff0c\u628ax\u5408\u5e76\u5230y\u7684\u5de6\u513f\u5b50\u91cc\n\t{\n\t\ty->pushdown();\n\t\ty->lc=merge(x,y->lc);\n\t\ty->maintain();\n\t\treturn y;\n\t}\n};\n\n\n\ntemplate<typename T>\nvoid fhq_treap<T>::ranksplit(Node* nroot,const int& k,Node*& ltree,Node*& rtree)\n{//\u6309\u6392\u540d\u5206\u88c2\u4ee5nroot\u4e3a\u6839\u7684\u5b50\u6811 //\u672c\u6765\u662f\u6309\u6743\u503c\u5206\u88c2\uff0c\u4f46\u8fd9\u91cc\u7528\u4e0d\u4e0a\n\tif(!nroot)\n\t{\n\t\tltree=NULL;\n\t\trtree=NULL;\n\t\treturn;\n\t}\n\tnroot->pushdown();\n\tint s=Node::size(nroot->lc);\n\tif(s>=k)//\u5f53\u524d\u5143\u7d20\u6392\u540d\u5927\u4e8ek\uff0c\u5219\u5206\u88c2\u5176\u5de6\u5b50\u6811\n\t{\n\t\trtree=nroot;\n\t\tranksplit(nroot->lc,k,ltree,nroot->lc);\n\t}\n\telse//\u5426\u5219\u5206\u88c2\u53f3\u5b50\u6811\n\t{\n\t\tltree=nroot;\n\t\tranksplit(nroot->rc,k-s-1,nroot->rc,rtree);\n\t}\n\tnroot->maintain();\n}\n```\n\n\u6709\u4e86$merge$\u548c$split$\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u5c31\u53d8\u5f97\u65e0\u8111\u4e86QAQ  \n\n\u63d2\u5165\uff1a\n\n```cpp\ntemplate<typename T>\ntypename\nfhq_treap<T>::iterator fhq_treap<T>::insert(const T& v)\n{\n\tNode* ptr=new Node(v);\n\tif(!_root)\n\t{\n\t\t_root=ptr;\n\t\treturn ptr;\n\t}\n/*\tNode *ptr1,*ptr2;//\u672c\u6765\u8981\u6309\u6743\u503c\u5206\u88c2\u5408\u5e76\uff0c\u4f46\u8fd9\u91cc\u76f4\u63a5\u6309\u63d2\u5165\u987a\u5e8f\u64cd\u4f5c\u5c31\u884c\u4e86\n\tsplit(_root,v,ptr1,ptr2);\n\t_root=merge(merge(ptr1,ptr),ptr2);\n\tvis();*/\n\t_root=merge(_root,ptr);//\u5343\u4e07\uff0c\u5343\u4e07\uff0c\u5343\u4e07\u8981\u8bb0\u5f97\u628a\u6839\u91cd\u7f6e\uff0c\u5426\u5219\u5341RE\uff01\uff01\uff01\n\treturn ptr;\n}\n```\n\n\u5220\u9664\u6ca1\u7528\uff0c\u8df3\u8fc7  \n\n\u533a\u95f4\u52a0\u6cd5\uff1a  \n\n```cpp\ntemplate<typename T>\nvoid fhq_treap<T>::addchange(int l,int r,const T& v)\n{\n\tNode *ptr,*ptr1,*ptr2;\n\tranksplit(_root,l-1,ptr1,ptr);//\u5c061\u81f3l-1\u7684\u90e8\u5206\u5206\u88c2\u51fa\u53bb\n\tranksplit(ptr,r-l+1,ptr,ptr2);//\u5c06r+1\u4ee5\u540e\u7684\u90e8\u5206\u5206\u88c2\u51fa\u53bb\n\tptr->addflag=(ptr->addflag+v)%P;//\u5728\u4e2d\u95f4\u90e8\u5206\u7684\u6839\u4e0a\u6253\u6807\u8bb0 //\u672c\u6765\u60f3\u6253\u4e00\u4e2a\u6a21P\u540c\u4f59\u7c7b\uff0c\u65f6\u95f4\u7d27\u5f20\u6ca1\u6765\u5f97\u53ca\n\t_root=merge(ptr1,merge(ptr,ptr2));//\u540c\u6837\u8981\u91cd\u7f6e\u6839\n}\n```\n\n\u533a\u95f4\u4e58\u6cd5\uff1a  \n\n```cpp\ntemplate<typename T>\nvoid fhq_treap<T>::mulchange(int l,int r,const T& v)//\u7c7b\u4f3c\u7684\u601d\u8def\uff0c\u4e0d\u518d\u8d58\u8ff0\n{\n\tNode *ptr,*ptr1,*ptr2;\n\tranksplit(_root,l-1,ptr1,ptr);\n\tranksplit(ptr,r-l+1,ptr,ptr2);\n\tptr->addflag=(ptr->addflag*v)%P;//\u4f46\u8981\u6ce8\u610f\u8fd9\u91cc\u9700\u628a\u52a0\u6cd5\u6807\u8bb0\u4e00\u5e76\u4fee\u6539\n    ptr->mulflag=(ptr->mulflag*v)%P;\n\t_root=merge(ptr1,merge(ptr,ptr2));\n}\n```\n\n\u533a\u95f4\u6c42\u548c\uff1a  \n\n```cpp\ntemplate<typename T>\nT fhq_treap<T>::query(int l,int r)//\u66f4\u7b80\u5355\u4e86\u6709\u6728\u6709\uff01\uff01\uff01\n{\n\tNode *ptr,*ptr1,*ptr2;\n\tranksplit(_root,l-1,ptr1,ptr);\n\tranksplit(ptr,r-l+1,ptr,ptr2);\n    ptr->pushdown();//\u76f4\u63a5\u4e0b\u4f20\u6807\u8bb0\u4ee5\u53d6\u5f97\u5f53\u524d\u533a\u95f4\u7684\u548c\n    T ans=ptr->sum;\n\t_root=merge(ptr1,merge(ptr,ptr2));\n    return ans;\n}\n```\n\n\u5feb\u8bfb\u5feb\u5199\uff0c\u4e0d\u5f00\u5219T  \n\n```cpp\ntemplate<typename T>\nvoid read(T& x)\n{\n    x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')x=x*10+(c^48),c=getchar();\n}\ntemplate<typename T>\nvoid write(const T& x)\n{\n    if(x>=10)write(x/10);\n    putchar((x%10)^48);\n}\n```\n\n\u4e3b\u7a0b\u5e8f\n\n```cpp\n\nint n,m;\nint op,l,r,v;\nfhq_treap<long long> my_tree;//\u6ce8\u610f\u5f00long long\uff0c\u5426\u5219\u4e58\u6cd5\u6ea2\u51fa\uff0c\u5168WA\n\nint main()//\u6709\u4e86\u5c01\u88c5\u597d\u7684\u677f\u5b50\uff0c\u4e3b\u7a0b\u5e8f\u5c31\u7b80\u5355\u591a\u4e86\uff01\uff01\uff01\n{\n//\tios::sync_with_stdio(0);\n//  cin>>n>>m>>P;//cin\u518d\u600e\u4e48\u52a0\u901f\u4e5f\u4f1aT\n    srand(20381314);//\u8fd9\u53e5\u5176\u5b9e\u4e0d\u52a0\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u5f00\u59cb\u5c31\u5fd8\u8bb0\u4e86\n    read(n);\n    read(m);\n    read(P);\n    for(int i=0;i<n;++i)read(op),my_tree.insert(op);\n    for(int i=0;i<m;++i)\n    {\n    \tread(op);\n        read(l);\n        read(r);\n        if(op!=3)read(v);\n        \n        switch (op)\n        {\n            case(1):\n                my_tree.mulchange(l,r,v);\n                break;\n            case(2):\n                my_tree.addchange(l,r,v);\n                break;\n            case(3):\n                write(my_tree.query(l,r));\n                putchar('\\n');\n                break;\n            default:\n                break;\n        }\n\t}\n}\n\n```\n\n$fhqTreap$\u4f5c\u4e3a\u4e00\u79cd\u5e73\u8861\u6811\uff0c\u597d\u5199\u597d\u7528\uff0c\u529f\u80fd\u5f3a\u5927\uff08\u5728\u4e0d\u4f1a$LCT$\u7684\u849f\u84bb\u773c\u91cc\u53ef\u7b97\u6700\u5f3a\u6570\u636e\u7ed3\u6784\u4e86QWQ\uff09\uff0c\u8fd8\u662f\u5f88\u9002\u5408\u65b0\u624b\u5b66\u4e60\u7684\u3002\u5148\u524d\u5b66$Treap$~~\u548c\u7ea2\u9ed1\u6811~~\uff0c\u90fd\u4e0d\u5982$fhqTreap$\u597d\u4f7f\u3002\u7528\u5b83\u505a\u533a\u95f4\u64cd\u4f5c\uff0c\u4e5f\u6bd4\u7ebf\u6bb5\u6811\u66f4\u81ea\u7136\uff08\u4e2a\u4eba\u770b\u6cd5\uff09\u3002\u4f5c\u8005\u662f\u4e2a~~\u666e\u53ca\u521d\u8d5b\u8fde\u6302\u4e09\u5e74\u7684~~\u849f\u84bb\uff0c\u4ee3\u7801\u53ef\u80fd\u6709\u7eb0\u6f0f\uff0c\u82e5\u6709\u5927\u4f6c\u53d1\u73b0\u671b\u79c1\u4fe1\u6307\u6b63\uff0c~~\u52ff\u55b7QAQ~~\u2026\u2026  \n\n\u624b\u6253\u4e94\u5341\u884c\u6ce8\u91ca\u4e0d\u5bb9\u6613\uff0c\u7ba1\u7406\u5458\u6c42\u8fc7",
        "postTime": 1547513512,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "Segment fhqTreap"
    },
    {
        "content": "### \u4e00\u4e2a\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\n\u91cd\u70b9\u5728\u5982\u4f55\u5904\u7406\u4e58\u6cd5\uff0c\u7a0d\u4e0d\u6ce8\u610f\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\n\n\t\u4e58\u6cd5\u7684\u64cd\u4f5c\u8fd1\u4f3c\u4e8e\u52a0\u6cd5\uff0c\u5355\u4e2a\u5256\u6790\u51fa\u6765\u4e58\u6cd5\u4ec5\u4ec5\u662f\u4e0d\u7528\u77e5\u9053\u533a\u95f4\u957f\u5ea6\n    \u53ef\u662f\u4e24\u4e2a\u5728\u4e00\u8d77\u7684\u65f6\u5019\u5c31\u8981\u5c06\u8981\u52a0\u7684\u503c\u4e58\u4e00\u904d\n\u8bb0\u5f97\u5f00long long\uff0c\u539f\u672c\u6211\u4ee5\u4e3a\u4e0d\u50cf\u7ebf\u6bb5\u68111\u8981\u5f00long long\uff0c\u8981\u8bb0\u5f97modp\n    \ncode\uff1a\n```cpp\n#include <iostream>\n#define ll long long\n#define pushup(pos) tree[pos]=(tree[pos<<1]+tree[pos<<1|1])%p\nusing namespace std;\nll tree[100000<<2],add[100000<<2],mul[100000<<2],p;\nint n,m;\nvoid pushdown1(int pos){//\u4e58\u6cd5\u4e0b\u63a8\n    mul[pos<<1]=(mul[pos<<1]*mul[pos])%p;mul[pos<<1|1]=(mul[pos<<1|1]*mul[pos])%p;//\u4e58\u6cd5\u76f8\u4e58\n    add[pos<<1]=(add[pos<<1]*mul[pos])%p;add[pos<<1|1]=(add[pos<<1|1]*mul[pos])%p;//\u52a0\u6cd5\u76f8\u4e58\n    tree[pos<<1]=(tree[pos<<1]*mul[pos])%p;tree[pos<<1|1]=(tree[pos<<1|1]*mul[pos])%p;//\u503c\u76f8\u4e58\n    mul[pos]=1;//\u6e051\uff08\u8fd9\u91cc\u4e0d\u662f0\uff0c\u4e0d\u7136\u500d\u6570\u90fd\u53d80\u4e86\uff09\n}\nvoid pushdown2(int ls,int rs,int pos){//\u52a0\u6cd5\u4e0b\u63a8\n    add[pos<<1]=(add[pos<<1]+add[pos])%p;add[pos<<1|1]=(add[pos<<1|1]+add[pos])%p;//\u52a0\u6cd5\u76f8\u52a0\n    tree[pos<<1]=(tree[pos<<1]+add[pos]*ls)%p;tree[pos<<1|1]=(tree[pos<<1|1]+add[pos]*rs)%p;//\u503c\u76f8\u52a0\n    add[pos]=0;//\u52a0\u6cd5\u6e050\n}\nvoid build(int l,int r,int pos){//\u5efa\u6811\n    if(l==r) {cin>>tree[pos];tree[pos]%=p;return;}\n    int mid=(l+r)>>1;\n    build(l,mid,pos<<1);build(mid+1,r,pos<<1|1);\n    pushup(pos);\n}\nvoid update1(int L,int R,int l,int r,ll k,int pos){//\u4e58\u6cd5\n    if(l>=L&&r<=R) {tree[pos]=(tree[pos]*k)%p;mul[pos]=(mul[pos]*k)%p;add[pos]=(add[pos]*k)%p;return;}\n    int mid=(l+r)>>1;\n    pushdown1(pos);pushdown2(mid-l+1,r-mid,pos);\n    if(L<=mid) update1(L,R,l,mid,k,pos<<1);\n    if(R>mid) update1(L,R,mid+1,r,k,pos<<1|1);\n    pushup(pos);\n}\nvoid update2(int L,int R,int l,int r,ll k,int pos){//\u52a0\u6cd5\n    if(l>=L&&r<=R) {tree[pos]=(tree[pos]+k*(r-l+1))%p;add[pos]=(add[pos]+k)%p;return;}\n    int mid=(l+r)>>1;\n    pushdown1(pos);pushdown2(mid-l+1,r-mid,pos);\n    if(L<=mid) update2(L,R,l,mid,k,pos<<1);\n    if(R>mid) update2(L,R,mid+1,r,k,pos<<1|1);\n    pushup(pos);\n}\nll query(int L,int R,int l,int r,int pos){//\u6c42\u548c\n    if(l>=L&&r<=R) return tree[pos];\n    int mid=(l+r)>>1;\n    pushdown1(pos);pushdown2(mid-l+1,r-mid,pos);\n    return ((mid>=L?query(L,R,l,mid,pos<<1):0)+(R>mid?query(L,R,mid+1,r,pos<<1|1):0))%p;\n}\nint main(){\n    for(register int i=1;i<100000<<2;i++) mul[i]=1;//\u6e051\n    cin>>n>>m>>p;\n    build(1,n,1);\n    while(m--)\n    {\n        int t,l,r;\n        ll k;\n        cin>>t>>l>>r;\n        if(t==1) {cin>>k;k%=p;update1(l,r,1,n,k,1);}\n        else if(t==2) {cin>>k;k%=p;update2(l,r,1,n,k,1);}\n        else cout<<query(l,r,1,n,1)<<endl;\n    }\n    return 0;\n}\n```\n~~\u7ba1\u7406\u5458\u5927\u5927\uff0c\u6211\u89c9\u5f97\u8fd9\u9898\u53ef\u4ee5\u62d3\u5c55\u4e2axx\u533a\u95f4\u76f8\u4e58\u7684\u79ef~~",
        "postTime": 1544744814,
        "uid": 80679,
        "name": "Register",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811\u95ee\u9898\uff0c\u5927\u53d7$\\mathrm{OIer}$\u7684\u6b22\u8fce\uff08\u8bdd\u8bf4\u52302018-11-6 17:02:24\u4e3a\u6b62\u4eca\u5929\u5df2\u7ecf\u4ea4\u4e8611\u9875$\\mathfrak{QAQ}$\uff09\n\n\u57fa\u7840\u7684\u601d\u60f3\u4e0e\u524d\u9762\u7684$\\mathcal{DALAO}$\u4eec\u4e00\u6837\uff08\u53ef\u4ee5\u9009\u62e9\u8df3\u8fc7\uff09\uff1a\n```\n\u3000\u3000\u4e3a\u4e86\u907f\u514d\u66b4\u529b\u5730\u53bb\u5904\u7406\uff0c\u6211\u4eec\u5229\u7528lazy_tag\u6765\u5b58\u50a8\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u64cd\u4f5c\uff0c\u5f53\u5904\u7406\u6216\u8bbf\u95ee\u8be5\u533a\u95f4\u65f6\u4e0b\u653e\u6807\u8bb0\uff0c\u5c06\u533a\u95f4\u7684\u503c\u5904\u7406\u4e3a\u4fee\u6539\u540e\u7684\u771f\u5b9e\u503c\u3002\n\u3000\u3000\u4f46\u662f\u9898\u76ee\u4e2d\u6709\u52a0\u3001\u4e58\u4e24\u79cd\u8fd0\u7b97\uff0c\u6211\u4eec\u5728\u7528\u4e24\u79cd\u6807\u8bb0\u5206\u522b\u5b58\u50a8\u4e24\u79cd\u64cd\u4f5c\u7684\u540c\u65f6\uff0c\u8fd8\u5e94\u5904\u7406\u597d\u4e24\u79cd\u8fd0\u7b97\u4e4b\u95f4\u7684\u5173\u7cfb\u2014\u2014\u4e58\u6cd5\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u52a0\u6cd5\uff0c\u67d0\u6b21\u4e58\u6cd5\u64cd\u4f5c\u7684\u4e58\u6570k\u4f1a\u5f71\u54cd\u5230\u4e4b\u524d\u6240\u6709\u52a0\u4e0a\u7684\u503c\uff0c\u56e0\u6b64\u8981\u5bf9\u533a\u95f4\u7684\u503c\u548c\u4e4b\u524d\u7684\u52a0\u6cd5\u64cd\u4f5c\u6807\u8bb0\u90fd\u4e58\u4e0ak\u3002\n\u3000\u3000\u5728\u4e0b\u653e\u6807\u8bb0\u65f6\uff0c\u5982\u679c\u5148\u5904\u7406\u52a0\u6cd5\u6807\u8bb0\u518d\u5904\u7406\u4e58\u6cd5\uff0c\u4f1a\u5bfc\u81f4\u52a0\u6cd5\u6807\u8bb0\u88ab\u591a\u4e58\u4e00\u904d\u4f7f\u7b54\u6848\u504f\u5927\uff1b\u6211\u4eec\u5e94\u5148\u4e0b\u653e\u4e58\u6cd5\u7684\u6807\u8bb0\u4f7f\u5b50\u533a\u95f4\u539f\u6765\u7684\u503c\u548c\u52a0\u6cd5\u6807\u8bb0\u4e58k\uff0c\u518d\u4ece\u539f\u533a\u95f4\u7684\u52a0\u6cd5\u6807\u8bb0\u5904\u7406\u5b50\u533a\u95f4\u7684\u52a0\u6cd5\u64cd\u4f5c\u3002\n\u3000\u3000\u5bf9\u67d0\u51e0\u6b21\u64cd\u4f5c\u7684\u6f14\u793a\uff1a\n\u533a\u95f4\u539f\u503c\n--\u52a0\u6cd5\u64cd\u4f5c-> \u533a\u95f4\u539f\u503c+\u52a0\u6cd5\u6807\u8bb01*\u533a\u95f4\u957f\u5ea6\n--\u4e58\u6cd5\u64cd\u4f5c-> (\u533a\u95f4\u539f\u503c+\u52a0\u6cd5\u6807\u8bb01*\u533a\u95f4\u957f\u5ea6)*\u4e58\u6cd5\u6807\u8bb0\n--\u52a0\u6cd5\u64cd\u4f5c-> (\u533a\u95f4\u539f\u503c+\u52a0\u6cd5\u6807\u8bb01*\u533a\u95f4\u957f\u5ea6)*\u4e58\u6cd5\u6807\u8bb0+\u52a0\u6cd5\u6807\u8bb02*\u533a\u95f4\u957f\u5ea6\n```\n\u5728\u8fd9\u4e9b\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u7279\u522b\u7684\u4f18\u5316\uff1a\n\n1. \u5728\u533a\u95f4\u7684\u52a0\u6cd5\u6807\u8bb0\u4e3a0\u3001\u4e58\u6cd5\u6807\u8bb0\u4e3a1\uff08\u5373\u8be5\u533a\u95f4\u6ca1\u6709\u8fdb\u884c\u8fc7\u4efb\u4f55\u64cd\u4f5c\uff09\u65f6\uff0c\u53ef\u4ee5\u4e0d\u8fdb\u884c\u4e0b\u653e\u6807\u8bb0\u7684\u64cd\u4f5c\uff1b\n\n2. \u5f53\u88ab\u64cd\u4f5c\u6570\u5c0f\u4e8e\u6a21\u6570\u65f6\uff0c\u53d6\u6a21\u64cd\u4f5c\u53ef\u4ee5\u4e0d\u8fdb\u884c\uff0c\u5728\u6b64\u53ef\u4ee5\u8fdb\u884c\u5224\u65ad\uff08**\u4f46\u6700\u540e\u5343\u4e07\u4e0d\u8981\u5fd8\u5199\u53d6\u6a21\u64cd\u4f5c\uff01**\uff09\n\n3. \u6211\u4eec\u628a\u6574\u68f5\u7ebf\u6bb5\u6811\u5c01\u88c5\u8d77\u6765\uff0c\u5c06\u4e00\u4e9b\u5e38\u7528\u64cd\u4f5c\u5904\u7406\u6210\u4e13\u95e8\u7684\u51fd\u6570\uff08\u53ef\u4ee5\u4f7f\u7528$\\mathrm{inline}$\u9002\u5f53\u52a0\u5feb\u901f\u5ea6\uff09\uff0c\u66f4\u80fd\u63d0\u5347\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u4fbf\u4e8e\u4ee3\u7801\u7684\u4fee\u6539\u3002\n\n\u8fd9\u6837\uff0c\u4e00\u7bc7~~\u522b\u5177\u98ce\u683c\u7684~~\u7ebf\u6bb5\u6811\u4ee3\u7801\u5c31\u6572\u597d\u5566~\n\n$\\mathrm{Code:}$\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#define PBCWZCC\nusing namespace std;\n#define MAXN 100000\n#define LL long long\n#define DEBUG\n#define MODIT\ntemplate<class T>inline void read(T&X)\n{\n    X=0;\n    char symbol('\\0'),ch(getchar());\n    for(;ch<'0'||'9'<ch;(ch=='-')?(symbol='\\1'):(1),ch=getchar());\n    for(;'0'<=ch&&ch<='9';X=(X<<3)+(X<<1)+(ch^48),ch=getchar());\n\t(symbol)?(X=-X):(1); // \u539f\u8c05\u6211\u7684\u9b3c\u755c\u7801\u98ce\uff0c\n//\u5728\u6211\u7684\u7a0b\u5e8f\u91cc\u6ca1\u6709while()\uff0c\u8fd9\u91cc\u7684\u5c55\u5f00\u53ea\u662f\u4e3a\u4e86\u6e05\u6670Q.Q \n} // \u987a\u4fbf\u6709\u4e2a\u5feb\u8bfb\u677f\u5b50\uff1fQ.Q \nint n,m;\nLL Modit; // \u6a21\u6570 \nnamespace seg{ // \u7ebf\u6bb5\u6811\u6240\u5728\u7684\u540d\u7a7a\u95f4 \n\tLL A[MAXN|3];\n\tclass sgt{ // \u6574\u68f5\u7ebf\u6bb5\u6811 \n\t  private:\n\t  \tinline int fa(const int x) // \u7236\u4eb2\uff08\u5728\u8fd9\u91cc\u6ca1\u7528\uff09 \n\t\t{\n\t\t  \treturn x>>1;\n\t\t} \n\t\tinline int lc(const int x) // \u5de6\u5b69\u5b50 \n\t\t{\n\t\t\treturn x<<1;\n\t\t}\n\t\tinline int rc(const int x) // \u53f3\u5b69\u5b50 \n\t\t{\n\t\t\treturn x<<1|1;\n\t\t}\n\t  public:\n\t  \tLL val[MAXN<<2|3], // \u533a\u95f4\u548c \n\t\t\ttag[MAXN<<2|3], // \u52a0\u6cd5\u6807\u8bb0 \n\t\t\ttag2[MAXN<<2|3]; // \u4e58\u6cd5\u6807\u8bb0 \n\t  \tinline void pushup(const int p)\n\t  \t{\n\t  \t\tval[p] = val[lc(p)] + val[rc(p)]; \n\t\t// \u9996\u6b21/\u91cd\u65b0\u6574\u5408\u533a\u95f4\u7684\u4fe1\u606f\n\t\t// \u5728\u66f4\u65b0\u5b8c\u5de6\u53f3\u533a\u95f4\u540e\uff0c\u6574\u5408\u5230\u7236\u533a\u95f4 \n\t\t}\n\t\tvoid build(const int p,const int l,const int r)\n\t\t{\n\t\t\ttag2[p] = 1; \n\t\t// \u6ce8\u610f\u4e0d\u80fd\u662f 0 \uff0c\u56e0\u4e3a\u8fd9\u4e2a\u662f\u4e58\u6cd5\u6807\u8bb0\uff0c\u8868\u793a\n\t\t// \u8fd9\u6bb5\u533a\u95f4\u6ca1\u4e58\u8fc7\u4efb\u4f55\u6570\uff08\u6216\u8005\u4e58\u8fc7 1 \uff09 \n\t\t\tif(l==r)\n\t\t\t{\n\t\t\t\ttag[p] = 0; // \u52a0\u6cd5\u6807\u8bb0 \n\t\t\t\tval[p] = A[l];\n\t\t\t// \u5c06\u5355\u4e2a\u5143\u7d20\u7684\u503c\u8d4b\u5230\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9 \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tint mid((l+r)>>1);\n\t\t\tbuild(lc(p),l,mid);\n\t\t\tbuild(rc(p),mid+1,r);\n\t\t\tpushup(p); // \u6574\u5408\u5b50\u533a\u95f4\u4fe1\u606f \n\t\t}\n\t\tinline void F1(const int p,const int l,const int r,const LL k)\n\t\t{ // \u6307\u5b9a\u533a\u95f4\u7684\u52a0\u6cd5\u64cd\u4f5c \n\t\t\ttag[p] += k;\n\t\t// \u5728\u52a0\u6cd5\u6807\u8bb0\u52a0\u4e0a k  \n\t\t\t(Modit<=tag[p])?(tag[p]%=Modit):(1);\n\t\t// \u7531\u4e8e\u53d6\u6a21\u8fd0\u7b97\u5e38\u6570\u8f83\u5927\uff0c\u8fd9\u91cc\u7279\u5224\u662f\u5426\u9700\u8981\u53d6\u6a21 \n\t\t\tval[p] += k * (r-l+1);\n\t\t// \u8fd9\u6bb5\u533a\u95f4\u52a0\u4e0a\u7684 k \u7684\u4e2a\u6570\u7b49\u4e8e\u533a\u95f4\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 \n\t\t\t(Modit<=val[p])?(val[p]%=Modit):(1);\n\t\t}\n\t\tinline void F2(const int p,const int l,const int r,const LL k)\n\t\t{ // \u6307\u5b9a\u533a\u95f4\u7684\u4e58\u6cd5\u64cd\u4f5c \n\t\t\ttag2[p] *= k;\n\t\t// \u4e58\u6cd5\u6807\u8bb0\u7d2f\u4e58 \n\t\t\t(Modit<=tag2[p])?(tag2[p]%=Modit):(1);\n\t\t\ttag[p] *= k; \n\t\t\t(Modit<=tag[p])?(tag[p]%=Modit):(1);\n\t\t\tval[p] *= k;\n\t\t\t(Modit<=val[p])?(val[p]%=Modit):(1);\n\t\t// \u533a\u95f4\u7684\u503c\u548c\u52a0\u6cd5\u6807\u8bb0\u90fd\u8981\u4e58\u4e0a k \n// (\u533a\u95f4\u539f\u503c+\u52a0\u6cd5\u64cd\u4f5c\u7684\u503c)*k -> \u533a\u95f4\u65b0\u503c1*k -> \u533a\u95f4\u65b0\u503c2 \n\t\t}\n\t\tinline void pushdown(const int p,const int l,const int r)\n\t\t{\n\t\t\tint mid((l+r)>>1);\n\t\t\tF2(lc(p),l,mid,tag2[p]);\n\t\t\tF2(rc(p),mid+1,r,tag2[p]);\n// \u5e94\u4f18\u5148\u4e0b\u653e\u4e58\u6cd5\u6807\u8bb0\uff0c\u5982\u679c\u5148\u4e0b\u653e\u52a0\u6cd5\u6807\u8bb0\u4f1a\u5bfc\u81f4\u5b83\u88ab\u591a\u4e58\u4e00\u904d \n\t\t\tF1(lc(p),l,mid,tag[p]);\n\t\t\tF1(rc(p),mid+1,r,tag[p]);\n\t\t\ttag2[p] = 1;\n\t\t\ttag[p] = 0;\n\t\t// \u6807\u8bb0\u5b8c\u6210\u4e0b\u653e\u540e\uff0c\u8981\u8bb0\u5f97\u8fd8\u539f \n\t\t}\n\t\tvoid update1(const int x,const int y,const int p,const int l,const int r,const LL k)\n\t\t{ // \u52a0\u6cd5\u64cd\u4f5c\u5168\u8fc7\u7a0b \n\t\t\tif(x<=l&&r<=y)\n\t\t\t{\n\t\t\t\tF1(p,l,r,k);\n\t\t// \u5f53\u524d\u533a\u95f4\u88ab\u5305\u542b\u5728\u5f85\u4fee\u6539\u533a\u95f4\u91cc\uff0c\u76f4\u63a5\u5904\u7406\u8fd9\u6bb5\u533a\u95f4\u5bf9\u5e94\u7684\u503c \n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(tag[p]||(tag2[p]^1)) pushdown(p,l,r);\n\t\t// \u5728\u6807\u8bb0\u975e\u7a7a\u7684\u65f6\u5019\u4e0b\u653e\u6807\u8bb0 \n\t\t\tint mid((l+r)>>1);\n\t\t\tif(x<=mid) update1(x,y,lc(p),l,mid,k);\n\t\t\tif(mid+1<=y) update1(x,y,rc(p),mid+1,r,k);\n\t\t\tpushup(p);\n\t\t// \u5904\u7406\u5b8c\u5b50\u533a\u95f4\uff0c\u6574\u5408 \n\t\t}\n\t\tvoid update2(const int x,const int y,const int p,const int l,const int r,const LL k)\n\t\t{ // \u4e58\u6cd5\u64cd\u4f5c\u5168\u8fc7\u7a0b\uff0c\u57fa\u672c\u4e0e\u4e0a\u9762\u76f8\u540c \n\t\t\tif(x<=l&&r<=y)\n\t\t\t{\n\t\t\t\tF2(p,l,r,k);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(tag[p]||(tag2[p]^1)) pushdown(p,l,r);\n\t\t\tint mid((l+r)>>1);\n\t\t\tif(x<=mid) update2(x,y,lc(p),l,mid,k);\n\t\t\tif(mid+1<=y) update2(x,y,rc(p),mid+1,r,k);\n\t\t\tpushup(p);\n\t\t}\n\t\tLL query(const int x,const int y,const int p,const int l,const int r)\n\t\t{ // \u533a\u95f4\u548c\u7684\u67e5\u8be2 \n\t\t\tif(x<=l&&r<=y)\n\t\t\t{\n\t\t\t\treturn val[p];\n\t\t// \u5f53\u524d\u533a\u95f4\u88ab\u5305\u542b\u5728\u5f85\u67e5\u8be2\u533a\u95f4\u91cc\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u6bb5\u533a\u95f4\u5bf9\u5e94\u7684\u503c\n\t\t\t}\n\t\t\tif(tag[p]||(tag2[p]^1)) pushdown(p,l,r);\n\t\t\tint mid((l+r)>>1);\n\t\t\tLL qq(0); // \u5f85\u8fd4\u56de\u503c \n\t\t\tif(x<=mid) qq += query(x,y,lc(p),l,mid);\n\t\t\tif(mid+1<=y) qq += query(x,y,rc(p),mid+1,r);\n\t\t\treturn qq%Modit; // \u6700\u540e\u8fd4\u56de\u7684\u65f6\u5019\u8bb0\u5f97\u53d6\u6a21\uff08\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u4e2a qq \u4f1a\u6bd4\u6a21\u6570\u5927\uff09 \n\t\t}\n\t};\n\tsgt T; // \u4e00\u68f5\u8302\u76db\u7684\uff08\u5212\uff09\u7ebf\u6bb5\u6811 \n}\nusing namespace seg;\nint main()\n{\n\tint i,t,x,y;\n\tLL z;\n\tread(n);\n\tread(m);\n\tread(Modit);\n\tfor(i=1;i<=n;++i)\n\t{\n\t\tread(A[i]);\n\t}\n\tT.build(1,1,n);\n\tfor(i=1;i<=m;++i)\n\t{\n\t\tread(t);\n\t\tread(x);\n\t\tread(y);\n\t\tif(!(t^1))\n\t\t{\n\t\t\tread(z);\n\t\t\tT.update2(x,y,1,1,n,z);\n\t\t}\n\t\telse if(!(t^2))\n\t\t{\n\t\t\tread(z);\n\t\t\tT.update1(x,y,1,1,n,z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%lld\\n\",T.query(x,y,1,1,n));\n\t\t}\n\t}\n\treturn 0;\n}\n// \u672c\u4eba\u6253\u8fd9\u4efd\u4ee3\u7801\u5e73\u5747\u8981\u7528 14 min \u6211\u771f\u662f\u592a\u83dc\u4e86TAT\n\n```\n\n",
        "postTime": 1541503309,
        "uid": 28004,
        "name": "PBCWZCC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u4e00\u68f5\u5c01\u88c5\u597d\u7684\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u81ea\u5df1\u7684\u535a\u5ba2\uff1a[](https://www.cnblogs.com/ifmyt/p/9338344.html)https://www.cnblogs.com/ifmyt/p/9338344.html\n\u8fd9\u91cc\u9605\u8bfb\u4f53\u9a8c\u4f1a\u66f4\u597d\u5662\n\n\u8fd9\u9053\u9898\u4e0e\u4e4b\u524d\u7684\u90a3\u4e9b\u7ebf\u6bb5\u6811\u6c34\u9898\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u7528\u5230\u4e86\u533a\u95f4\u4e58\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u67d0\u4e00\u6bb5\u533a\u95f4\u8fdb\u884c\u4e58\u6cd5\u64cd\u4f5c\u3002\n\n\u770b\u5230\u8fd9\u9898\u6211\u7684\u6f5c\u610f\u8bc6\u5c31\u544a\u8bc9\u6211\uff0c\u9700\u8981\u4e24\u4e2a\u4e0b\u4f20\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u4e24\u4e2apushdown\u51fd\u6570\uff08\u5728\u4ee3\u7801\u91cc\u4e3a\u4e86\u7b80\u5355\u5c31\u76f4\u63a5\u5199\u4e86down\uff09\uff0c\u7136\u540e\u8bbe\u7f6e\u4e24\u4e2a\u61d2\u6807\u8bb0\uff0c\u5e94\u8be5\u662f\u53ef\u4ee5\u76f4\u63a5\u8fc7\u8fd9\u9053\u9898\u3002\u53ef\u662f\u6211\u53c8\u8f6c\u5ff5\u4e00\u60f3\uff0c\u6211\u53ef\u4e0d\u53ef\u4ee5\u653e\u5728\u4e00\u4e2apushdown\u51fd\u6570\u91cc\u5199\u5462\uff1f\u8fd9\u6837\u65e2\u65b9\u4fbf\u53c8\u5feb\u6377\u3002\u4e8e\u662f\u3002\u3002\u3002\u6211\u60f3\u4e0d\u51fa\u6765\u4e86\u3002\n\n\u5728\u7ecf\u8fc7\u770b\u9898\u89e3\u540e\u7684\u53cd\u590d\u63a8\u6572\u4e0e\u7422\u78e8\u4e4b\u540e\uff0c\u6211\u603b\u7b97\u662f\u61c2\u5f97\u4e86\u8fd9\u4e2a\u601d\u8def\u3002\n\n\u9996\u5148\u5927\u5bb6\u77e5\u9053\u4e58\u6cd5\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u52a0\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u987a\u5e8f\u4e0a\u5e94\u8be5\u6709\u4e2a\u5148\u540e\uff0c\u7b97\u4e58\u6cd5\u65f6\u9700\u8981\u5148\u7b97\u4e58\u6cd5\u518d\u7b97\u52a0\u6cd5\uff0c\u800c\u7b97\u52a0\u6cd5\u76f4\u63a5\u7b97\u52a0\u6cd5\u5373\u53ef\u3002\u8fd9\u6bb5\u8bdd\u4f60\u4eec\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u7406\u89e3\u5f88\u91cd\u8981\u3002\u5982\u679c\u771f\u7684\u4e0d\u61c2\uff0c\u4e0d\u6025\uff0c\u5f80\u4e0b\u6162\u6162\u8bfb\u4e00\u8bfb\u4f60\u5c31\u4f1a\u81ea\u7136\u800c\u7136\u7684\u660e\u767d\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5f00\u59cb\u4e00\u4e2a\u51fd\u6570\u4e00\u4e2a\u51fd\u6570\u7684\u8bb2\u89e3\u4e86\u3002\n\n\u9996\u5148\u662f\u5efa\u6811\u51fd\u6570\uff0c\u8fd9\u4e2a\u5e76\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n\n\u5176\u6b21\u5c31\u662fpushdown\u51fd\u6570\u4e86\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u8fd9\u4e00\u9053\u9898\u76ee\u7684\u5173\u952e\u3002\n\n\u9996\u5148\u6bcf\u4e00\u4e2a\u5b69\u5b50\u7684\u61d2\u6807\u8bb0\u8981\u7ee7\u627f\u7236\u4eb2\u7684\u61d2\u6807\u8bb0\uff08\u4e58\u6cd5\u6807\u8bb0\u521d\u503c\u4e3a1\uff0c\u52a0\u6cd5\u6807\u8bb0\u521d\u503c\u4e3a0\uff09\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u7ee7\u627f\u5462\uff1f\u8fd9\u8981\u5206\u522b\u6765\u8ba8\u8bba\uff1a\n\n1.\u4e58\u6cd5\u6807\u8bb0 \u3002\u56e0\u4e3a\u4e58\u6cd5\u7684\u4f18\u5148\u7ea7\u662f\u5927\u4e8e\u52a0\u6cd5\u7684\uff0c\u6240\u4ee5\u4e58\u6cd5\u6807\u8bb0\u4e0d\u4f1a\u53d7\u5230\u52a0\u6cd5\u6807\u8bb0\u7684\u5f71\u54cd\u3002\u6240\u4ee5\u5c31\u76f4\u63a5\u4e58\u4e0a\u7236\u4eb2\u7684\u4e58\u6cd5\u6807\u8bb0\n\n2.\u52a0\u6cd5\u6807\u8bb0 \u3002\u56e0\u4e3a\u52a0\u6cd5\u662f\u53d7\u5230\u4e58\u6cd5\u7684\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u52a0\u6cd5\u6807\u8bb0\u7684\u589e\u52a0\u91cf\u4e3a\u5148\u524d\u52a0\u6cd5\u7684\u6807\u8bb0\u7684\u7236\u4eb2\u4e58\u6cd5\u6807\u8bb0\u500d\u7136\u540e\u5728\u589e\u52a0\u7236\u4eb2\u7684\u52a0\u6cd5\u6807\u8bb0\u500d\u3002\u5982\u679c\u4f60\u4e0d\u61c2\uff0c\u8bf7\u52a1\u5fc5\u770b\u4e0a\u9762\u7684\u63a8\u8350\u535a\u5ba2\uff0c\u91cc\u9762\u6709\u61d2\u6807\u8bb0\u7684\u4e13\u95e8\u8bb2\u89e3\uff0c\u8bf7\u52a1\u5fc5\u5b66\u4f1a\uff01\uff01\n\n\u4ee5\u4e0a\u662f\u4e00\u79cd\u7406\u89e3\u7684\u65b9\u6cd5\uff0c\u4e0b\u9762\u8fd8\u6709\u53e6\u4e00\u79cd\n\n![](https://cdn.luogu.com.cn/upload/pic/24355.png)\n\n\uff08\u4ee5\u4e0a\u56fe\u7247\u6765\u81ea\u6e05\u5317\u5b66\u5802\uff09\n\n\u597d\u4e86\uff0c\u61d2\u6807\u8bb0\u7684\u50a8\u5b58\u5df2\u7ecf\u8bb2\u5b8c\u4e86\uff0c\u4e0b\u9762\u5f00\u59cb\u8bb2\u61d2\u6807\u8bb0\u7684\u5e94\u7528\uff1a\u8bbe\u8fd9\u6bb5\u533a\u95f4\u7684\u548c\u4e3as\uff0c\u5219\u7236\u4eb2\u7684\u4e58\u6cd5\u6807\u8bb0\u4e3amul\uff0c\u8fd9\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\u4e3alen\uff0c\u7236\u4eb2\u7684\u52a0\u6cd5\u6807\u8bb0\u4e3aadd\uff0c\u90a3\u4e48\u533a\u95f4\u7684s=s*mul+add*len\uff0c\u4e5f\u5c31\u662f\u533a\u95f4\u5148\u6269\u5927mul\u500d\u7136\u540e\u518d\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6\u7684add\u500d\uff0c\u8fd9\u770b\u8d77\u6765\u5f88\u663e\u7136\uff0c\u4e5f\u5f88\u597d\u7406\u89e3\u3002\u90a3\u4e48\u6709\u4eba\u95ee\u4e86\uff0c\u5982\u679c\u662f\u5148\u52a0\u6cd5\u540e\u4e58\u6cd5\u8fd9\u53ef\u548b\u6574\uff1f\u8bf6\uff0c\u8fd9\u53ef\u95ee\u5230\u5730\u65b9\u4e86\uff0c\u4e0d\u6025\uff0c\u6211\u4eec\u6162\u6162\u6765\uff0c\u540e\u6587\u4f1a\u6709\u89e3\u7b54\u3002\n\n\u4e0b\u9762\u6211\u4eec\u5c31\u5f00\u59cb\u8bb2\u4e58\u6cd5\u64cd\u4f5c\uff08mul_interval\uff09\uff1a\n\n\u4e58\u6cd5\u64cd\u4f5c\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u8ddf\u5176\u4ed6\u51fd\u6570\u957f\u5f97\u7c7b\u4f3c\u552f\u4e00\u4e0e\u4f17\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u5c31\u662f\u5b83\u7684\u61d2\u6807\u8bb0\u53e0\u52a0\u90e8\u5206\u3002\u9996\u5148\u4e58\u6cd5\u6807\u8bb0\u5148\u4e58\u4e0a\u500d\u6570\u8fd9\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7136\u540e\u540e\u9762\u662f\u52a0\u6cd5\u6807\u8bb0\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e58\u6cd5\u4f1a\u5f71\u54cd\u5230\u52a0\u6cd5\uff0c\u8fd9\u4e2a\u89c2\u70b9\u5df2\u7ecf\u5728\u524d\u9762\u8bf4\u8fc7\u4e86\uff0c\u6240\u4ee5add\u4e5f\u5e94\u8be5\u4e58\u4e0a\u500d\u6570\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u5c31\u770b\u4e00\u4e0b\u4e0a\u9762\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f1a\u6709\u63d0\u793a\u3002\u4e4b\u540e\u4e58\u6cd5\u64cd\u4f5c\u5c31\u8bb2\u5b8c\u4e86\u3002\n\n\u4e0b\u9762\u6211\u4eec\u5c31\u5f00\u59cb\u8bb2\u52a0\u6cd5\u64cd\u4f5c\uff08add_interval\uff09\uff1a\n\n\u9996\u5148\u52a0\u6cd5\u4e0d\u4f1a\u5f71\u54cd\u4e58\u6cd5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u64cd\u4f5c\u57fa\u672c\u6ca1\u6709\u53d8\u5316\u3002\n\n\u6700\u540e\u5c31\u662f\u52a0\u548c\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5728\u4e0a\u9762\u63a8\u8350\u7684\u535a\u5ba2\u91cc\u9762\u6709\u3002\n\n\u6700\u540e\u5c31\u662f\u4ee3\u7801\u4e86\uff0c\u4e0d\u61c2\u5f97\u53ef\u4ee5\u81ea\u5df1\u6df1\u5165\u7684\u7814\u7a76\u4e00\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 100001\n#define LL long long\nusing namespace std;\nstruct edge\n{\n\tLL l,r,w,add=0,mul=1;\n} tree[N<<2];\nint a,b,ans,y,n,m,p;\nvoid build(int k,int ll,int rr)\n{\n\ttree[k].l=ll,tree[k].r=rr;\n\tif(ll==rr)\n\t{\n\t\tcin >> tree[k].w;\n\t\ttree[k].w%=p;\n\t\treturn;\n\t}\n\tint m=(ll+rr)>>1;\n\tbuild(k<<1,ll,m);\n\tbuild(k<<1|1,m+1,rr);\n\ttree[k].w=(tree[k<<1].w+tree[k<<1|1].w)%p;\n\treturn;\n}\nvoid down(int k)\n{\n\ttree[k<<1].mul=tree[k<<1].mul*tree[k].mul%p;\n\ttree[k<<1|1].mul=tree[k<<1|1].mul*tree[k].mul%p;\n\ttree[k<<1].add=(tree[k].mul*tree[k<<1].add+tree[k].add)%p;\n\ttree[k<<1|1].add=(tree[k].mul*tree[k<<1|1].add+tree[k].add)%p;\n\ttree[k<<1].w=(tree[k<<1].w*tree[k].mul%p+tree[k].add*(tree[k<<1].r-tree[k<<1].l+1)%p)%p;\n\ttree[k<<1|1].w=(tree[k<<1|1].w*tree[k].mul%p+tree[k].add*(tree[k<<1|1].r-tree[k<<1|1].l+1)%p)%p;\n\ttree[k].mul=1;\n\ttree[k].add=0;\n\treturn;\n}\nvoid mul_interval(int k)\n{\n\tif(tree[k].l>=a&&tree[k].r<=b)\n\t{\n\t\ttree[k].w=(tree[k].w*y)%p;\n\t\ttree[k].mul=(tree[k].mul*y)%p;\n\t\ttree[k].add=(tree[k].add*y)%p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint m=(tree[k].l+tree[k].r)>>1;\n\tif(a<=m)mul_interval(k<<1);\n\tif(b>m)mul_interval(k<<1|1);\n\ttree[k].w=(tree[k<<1].w+tree[k<<1|1].w)%p;\n\treturn;\n}\nvoid add_interval(int k)\n{\n\tif(tree[k].l>=a&&tree[k].r<=b)\n\t{\n\t\ttree[k].add=tree[k].add+y;\n\t\ttree[k].w=(tree[k].w+(tree[k].r-tree[k].l+1)*y)%p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint m=(tree[k].r+tree[k].l)>>1;\n\tif(a<=m)add_interval(k<<1);\n\tif(b>m)add_interval(k<<1|1);\n\ttree[k].w=(tree[k<<1].w+tree[k<<1|1].w)%p;\n\treturn;\n}\nvoid ask_interval(int k)\n{\n\tif(tree[k].l>=a&&tree[k].r<=b)\n\t{\n\t\tans+=tree[k].w;\n\t\tans%=p;\n\t\treturn;\n\t}\n\tdown(k);\n\tint m=(tree[k].r+tree[k].l)>>1;\n\tif(a<=m)ask_interval(k<<1);\n\tif(b>m)ask_interval(k<<1|1);\n}\nint main()\n{\n\tcin >> n >> m >> p;\n\tbuild(1,1,n);\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tint c;\n\t\tcin >> c;\n\t\tif(c==1)\n\t\t{\n\t\t\tcin >> a >> b >> y;\n\t\t\tmul_interval(1);\n\t\t}\n\t\tif(c==2)\n\t\t{\n\t\t\tcin >> a >> b >> y;\n\t\t\tadd_interval(1);\n\t\t}\n\t\tif(c==3)\n\t\t{\n\t\t\tans=0;\n\t\t\tcin >> a >> b;\n\t\t\task_interval(1);\n\t\t\tcout<<ans%p<<endl;\n\t\t}\n\t}\n}\n```\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7",
        "postTime": 1532005025,
        "uid": 78228,
        "name": "\u6211\u6ca1\u6709\u5c0f\u767d",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u770b\u5230dalao\u4eec\u5199\u7684\u57fa\u672c\u4e0a\u90fd\u662f\u6570\u7ec4\u7248\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u5c31\u5199\u4e00\u4e2a\u94fe\u8868\u7248\u7684\u7ebf\u6bb5\u6811\u5427\uff08\u771f\u7684\u6bd4\u6570\u7ec4\u7b80\u5355\uff0c\u6211\u5c31\u662f\u770b\u5230\u94fe\u8868\u7248\u7684\u7ebf\u6bb5\u6811\u624d\u771f\u6b63\u4f1a\u7ebf\u6bb5\u6811\u7684\uff09\u3002\n\n\u8fd9\u9053\u9898\u6bd4\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u4e5f\u6709\u6240\u4e0d\u540c,\u591a\u4e86\u4e00\u4e2a\u4e58\u6cd5\u800c\u5df2\u3002\u5bf9\u4ed8\u7684\u529e\u6cd5\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5c31\u662f\u591a\u5f00\u4e00\u4e2amul\u7684\u6807\u8bb0\uff0cpushdown\u7684\u65f6\u5019\u5c31\u662f\u5148\u4e0b\u4f20mul\u518d\u4e0b\u4f20add\u5c31\u53ef\u4ee5\u4e86\uff08\u4e58\u6cd5\u6bd4\u52a0\u6cd5\u4f18\u5148\u7ea7\u8981\u9ad8\uff09\u3002\n\n\u5177\u4f53\u7684\u4e58\u6cd5cover\u5c31\u662f\u628a\u5f53\u524d\u8282\u70b9\u7684sum\uff0cadd\u548cmul\u90fd\u4e58\u4e0a\u4e00\u4e2a\u6570\u3002\n\u52a0\u6cd5cover\u548c\u539f\u6765\u4e00\u6837\uff08add\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0csum\u52a0\u4e0aadd\u4e58\u533a\u95f4\u957f\u5ea6\uff09\u3002\n\n\u6765\u4e00\u53d1~~\u60ca\u4e16\u9a87\u4fd7\u7684~~\u597d\u73a9\u7684\u94fe\u8868\u7ebf\u6bb5\u6811\u3002\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<vector> \nint n, m, p, a[100005];\nstruct Segtree {  \n    int l, r;  \n    Segtree *lc, *rc;  \n    long long sum, add, mul;  \n    Segtree(int l, int r, Segtree *lc, Segtree *rc) //\u6784\u9020\u51fd\u65701\uff0c\u91cc\u9762\u5c01\u88c5\u4e86build\u65f6\u5019\u8981\u7528\u7684pushup()\n        : l(l), r(r), lc(lc), rc(rc), sum(lc->sum + rc->sum), add(0), mul(1) {}  \n    Segtree(int l, int r, Segtree *lc, Segtree *rc, int sum)  //\u6784\u9020\u51fd\u65702\uff0c\u5bf9\u5b50\u8282\u70b9\u4f7f\u7528\n        : l(l), r(r), lc(lc), rc(rc), sum(sum), add(0), mul(1) {}  \n    void covermul(long long rhs) { //\u4e58\u6cd5cover\n    \tsum = sum * rhs % p;\n    \tmul = mul * rhs % p;\n    \tadd = add * rhs % p;\n\t}\n    void coveradd(long long rhs) {  //\u52a0\u6cd5cover\n        add = (add + rhs) % p;  \n        sum = (sum + rhs * (r - l + 1)) % p;   \n    }  \n    void pushup() {  \n        sum = (lc->sum + rc->sum) % p;   \n    }  \n    void pushdown() {  //\u5148cover\u4e58\u6cd5\u518dcover\u52a0\u6cd5\n    \tlc->covermul(mul); lc->coveradd(add);\n    \trc->covermul(mul); rc->coveradd(add);\n    \tmul = 1; add = 0;\n    }  \n    void multiply(int l, int r, long long rhs) {  //\u4e58\u6cd5updata\n        if (l > this->r || r < this->l) return;  \n        else if (l <= this->l && this->r <= r) covermul(rhs);  \n        else {  \n            pushdown();  \n            lc->multiply(l, r, rhs);  \n            rc->multiply(l, r, rhs);  \n            pushup();  \n        }  \n        return;  \n    }  \n    void addition(int l, int r, long long rhs) {  //\u52a0\u6cd5updata\n        if (l > this->r || r < this->l) return;  \n        else if (l <= this->l && this->r <= r) coveradd(rhs);  \n        else {  \n            pushdown();  \n            lc->addition(l, r, rhs);  \n            rc->addition(l, r, rhs);  \n            pushup();  \n        }  \n        return;  \n    }  \n    long long query(int l, int r) {  \n        if (l > this->r || r < this->l) return 0;  \n        if (l <= this->l && this->r <= r) return sum;  \n        pushdown();  \n        return (lc->query(l, r) + rc->query(l, r)) % p;  \n    }  \n    static Segtree *build(int l, int r) {  //\u6709\u8da3\u7684build\n        if (l > r) return NULL;  \n        else if (l == r) return new Segtree(l, r, NULL, NULL, a[l]);  \n        else {  \n            int mid = (l + r) >> 1;  \n            return new Segtree(l, r, build(l, mid), build(mid + 1, r));  \n        }  \n    }  \n}*root;  \nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &p);\n\tfor (int i = 1; i <= n; i++) \n\t\tscanf(\"%d\", &a[i]);\n\troot = Segtree::build(1, n); //\u94fe\u8868\u7684\u4e13\u5c5ebuild\n\tfor (int i = 1; i <= m; i++) {\n\t\tint opt;\n\t\tscanf(\"%d\", &opt);\n\t\tif (opt == 1) {\n\t\t\tint l, r, k;\n\t\t\tscanf(\"%d%d%d\", &l, &r, &k);\n\t\t\troot->multiply(l, r, k);\n\t\t}\n\t\telse if (opt == 2) {\n\t\t\tint l, r, k;\n\t\t\tscanf(\"%d%d%d\", &l, &r, &k);\n\t\t\troot->addition(l, r, k);\n\t\t}\n\t\telse if (opt == 3) {\n\t\t\tint l, r;\n\t\t\tscanf(\"%d%d\", &l, &r);\n\t\t\tprintf(\"%lld\\n\", root->query(l, r));\n\t\t}\n\t} \n\treturn 0;\n}\n```",
        "postTime": 1524998572,
        "uid": 12472,
        "name": "Nekroz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "//\u672c\u9898\u8981\u52a0\u4e5f\u8981\u4e58\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5fc5\u987b\u8981\u6709\u4e24\u4e2alazy\uff0c\u4e00\u4e2a\u4fdd\u5b58\u52a0\u6cd5\uff0c\u4e00\u4e2a\u4fdd\u5b58\u4e58\u6cd5\n\n//\u6bcf\u6b21\u8bbf\u95ee\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6807\u8bb0\u8981\u5148\u4e0b\u4f20\n\n```cpp\n//\u5982\u679c\u662f\u4e58\u6cd5\uff0c\u90a3\u4e48\u52a0\u6cd5\u7684\u6807\u8bb0\u4e5f\u8981\u66f4\u65b0\n//\u52a0\u6cd5\u662f+=\u6570\u5b57*\u533a\u95f4\u957f\u5ea6\n//\u4e58\u6cd5\u662f\u76f4\u63a5\u4e58\n//\u5148\u66f4\u65b0\u4e58\u6cd5\uff0c\u518d\u66f4\u65b0\u52a0\u6cd5\uff0c\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\n//\u6700\u540e\u4e0d\u8981\u5fd8\u4e86\u66f4\u65b0\u7ed3\u70b9\u7684\u6743\u503c\n//\u4ee3\u7801\u6781\u5176\u7b80\u6d01\uff0c77line\u6ca1\u6709\u538b\u884c\uff0c1.6k\u5927\u5c0f\uff0c\u6781\u6613\u61c2\n#include <cstdio>\nusing namespace std;\ntypedef long long ll;\nll n,m,mod,num,typ,x,y,k,ans;\nstruct nod\n{\n    ll l,r,w,add,mul;\n}s[1000005];//\u56db\u500d\u7a7a\u95f4\u4ee5\u4e0a\nll build(ll x,ll L,ll R)\n{\n    s[x]=nod{L,R,0,0,1};//\u6784\u9020\u51fd\u6570\uff0c\u7528\u6765\u8ba9\u4ee3\u7801\u66f4\u7b80\u6d01\n    if(L==R)\n    {\n        scanf(\"%lld\",&num);\n        return s[x].w=num%mod;//\u7279\u8272\u5efa\u6811\uff0c\u5230\u4e86\u53f6\u5b50\u8282\u70b9\u65f6\u518d\u8f93\u5165\uff0c\u7136\u540e\u4f20\u4e0a\u53bb\n    }\n    ll mid=(L+R)/2;\n    return s[x].w=(build(x*2,L,mid)+build(x*2+1,mid+1,R))%mod;\n}\nvoid down(ll x)\n```\n{//\u5177\u4f53\u7684\u6807\u8bb0\u4e0b\u4f20\n```cpp\n    s[x*2].add=(s[x].add+s[x*2].add*s[x].mul)%mod;\n    s[x*2+1].add=(s[x].add+s[x*2+1].add*s[x].mul)%mod;\n    s[x*2].mul=(s[x*2].mul*s[x].mul)%mod;\n    s[x*2+1].mul=(s[x*2+1].mul*s[x].mul)%mod;\n    s[x*2].w=(s[x*2].w*s[x].mul+s[x].add*(s[x*2].r-s[x*2].l+1))%mod;\n    s[x*2+1].w=(s[x*2+1].w*s[x].mul+s[x].add*(s[x*2+1].r-s[x*2+1].l+1))%mod;\n    s[x].add=0;\n    s[x].mul=1;\n}\nll query(ll x,ll L,ll R)\n{\n    down(x);\n    if(s[x].l>=L&&s[x].r<=R)//\u5305\u542b\u7684\u8bdd\u76f4\u63a5\u8fd4\u56de\n        return s[x].w%mod;\n    ll mid=(s[x].l+s[x].r)/2;//\u54ea\u8fb9\u6709\u8be2\u95ee\u5c31\u52a0\u4e0a\u54ea\u8fb9\u7684\u8be2\u95ee\u503c\n    return ((L<=mid?query(x*2,L,R):0)+(R>mid?query(x*2+1,L,R):0))%mod;\n}\nvoid update(ll x,ll v,ll typ,ll L,ll R)\n{\n    down(x);\n    if(typ==1&&s[x].l>=L&&s[x].r<=R)//\u5305\u542b\u5173\u7cfb\n    {\n        s[x].mul=(s[x].mul*v)%mod;\n        s[x].add=(s[x].add*v)%mod;\n        s[x].w=(s[x].w*s[x].mul)%mod;//\u5148\u4e58\u518d\u52a0\n        return;\n    }\n    if(typ==2&&s[x].l>=L&&s[x].r<=R)\n    {\n        s[x].add=(s[x].add+v)%mod;\n        s[x].w=(s[x].w+s[x].add*(s[x].r-s[x].l+1))%mod;\n        return;\n    }\n    ll mid=(s[x].l+s[x].r)/2;\n    if(L<=mid)\n        update(x*2,v,typ,L,R);\n    if(R>mid)\n        update(x*2+1,v,typ,L,R);\n    s[x].w=s[x*2].w+s[x*2+1].w;//\u6700\u540e\u66f4\u65b0\u7236\u4eb2\u8282\u70b9\n}\nmain()\n{\n    scanf(\"%lld%lld%lld\",&n,&m,&mod);\n    build(1,1,n);\n    for(ll i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld%lld\",&typ,&x,&y);\n        if(typ!=3)\n        {\n            scanf(\"%lld\",&k);\n            update(1,k,typ,x,y);\n        }\n        else\n            printf(\"%lld\\n\",query(1,x,y));\n    }\n}\n```",
        "postTime": 1511628639,
        "uid": 70545,
        "name": "Awar3ness",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u773c\u770b\u4e0a\u53bb\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u591a\u4e86\u4e2a\u533a\u95f4\u4e58\u548c\u6a21\u7684\u64cd\u4f5c\uff0c\u7ed3\u679c\u5199\u4e86\u534a\u5c0f\u65f6\uff0c\u8c03\u4e862\u4e2a\u5c0f\u65f6\u624d\u8c03\u51fa\u6765\u2026\u2026\u6700\u4e3b\u8981\u7684\u95ee\u9898\u5c31\u662f\u533a\u95f4\u4e58\u6807\u8bb0\u548c\u533a\u95f4\u52a0\u6807\u8bb0\u4e4b\u95f4\u7684\u5173\u7cfb\u548c\u76f8\u4e92\u5f71\u54cd\uff08\u521a\u5f00\u59cb\u6ca1\u6ce8\u610f\uff0c\u4e00\u76f4WA\uff09\u3002\u5bf9\u4e8e\u6bcf\u6b21\u4e0b\u653e\u6807\u8bb0\uff0c\u4e0d\u96be\u53d1\u73b0\u52a0\u6807\u8bb0\u5bf9\u4e58\u6807\u8bb0\u65e0\u5f71\u54cd\uff0c\u800c\u4e58\u6807\u8bb0\u4f1a\u5f71\u54cd\u52a0\u6807\u8bb0\uff0c\u5e94\u8be5\u5148\u4e0b\u653e\u4e58\u6807\u8bb0\uff0c\u540c\u65f6\u628a\u52a0\u6807\u8bb0\u4e58\u4e0a\u4e58\u6807\u8bb0\u3002\u6ce8\u610f\u52a0\u6807\u8bb0\u6bcf\u6b21\u4e0b\u653e\u540e\u8fd4\u56de0\uff0c\u800c\u4e58\u6807\u8bb0\u8fd4\u56de1\uff08\u8fd4\u56de0\u4f1a\u9519\u7684\u5f88\u60e8\uff0c\u4e00\u76f4\u4e3a0\uff09\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u6a21\uff0c\u5426\u5219\u5f88\u5bb9\u6613\u7206\u3002\u8fd8\u6709\u5c31\u662f\u628a\u7a7a\u95f4\u5f00\u591f\uff0c\u4e0d\u7136\u4f1aRE\u3002\u5176\u4ed6\u7684\u5c31\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u6a21\u677f\u4e00\u6837\u3002\n\n\u4ee5\u4e0b\u4e3aC++AC\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define lid (id<<1)\n#define rid (id<<1|1)\nusing namespace std;\ntypedef long long ll;\ninline ll read()\n{\n    ll x=0;char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return x;\n```\n}//\u542c\u8bf4\u4e0d\u5199\u8bfb\u5165\u4f18\u5316\u4f1aTLE\n \n```cpp\nll n,m,p;\nstruct tree\n{\n    ll l,r,sum,x,y;//x\u4e3a\u52a0\u6807\u8bb0\uff0cy\u4e3a\u4e58\u6807\u8bb0 \n}tr[800100];\nll a[200100];\nvoid build(ll id,ll l,ll r)\n{\n    tr[id].l=l,tr[id].r=r;\n    tr[id].x=0,tr[id].y=1;\n    if(tr[id].l==tr[id].r)\n    {\n        tr[id].sum=a[l];\n        return;\n    }\n    ll mid=(l+r)>>1;\n    build(lid,l,mid);\n    build(rid,mid+1,r);\n    tr[id].sum=(tr[lid].sum+tr[rid].sum)%p;\n    return ;\n}\ninline void pushdownx(ll id)//\u4e0b\u653e\u52a0\u6807\u8bb0 \n{\n    if(tr[id].x==0) return;\n    tr[lid].x=(tr[lid].x+tr[id].x)%p;\n    tr[rid].x=(tr[rid].x+tr[id].x)%p;\n    tr[lid].sum=(tr[lid].sum+(tr[lid].r-tr[lid].l+1)*tr[id].x%p)%p;\n    tr[rid].sum=(tr[rid].sum+(tr[rid].r-tr[rid].l+1)*tr[id].x%p)%p;\n    tr[id].x=0;\n    return;\n}\ninline void pushdowny(ll id)//\u4e0b\u653e\u4e58\u6807\u8bb0 \n{\n    if(tr[id].y==1) return;\n    tr[lid].y=(tr[lid].y*tr[id].y)%p;\n    tr[rid].y=(tr[rid].y*tr[id].y)%p;\n    tr[lid].x=(tr[lid].x*tr[id].y)%p;//\u52a0\u6807\u8bb0\u4e5f\u8981\u4e58 \n    tr[rid].x=(tr[rid].x*tr[id].y)%p;//\u52a0\u6807\u8bb0\u4e5f\u8981\u4e58\n    tr[lid].sum=tr[lid].sum*tr[id].y%p;\n    tr[rid].sum=tr[rid].sum*tr[id].y%p;\n    tr[id].y=1;\n    return;\n}\nvoid updatex(ll id,ll l,ll r,ll val)//\u533a\u95f4\u52a0 \n{\n    if(tr[id].l>r||tr[id].r<l) return;\n    if(tr[id].l>=l&&tr[id].r<=r)\n    {\n        pushdowny(id);\n        pushdownx(id);//\u5148\u4e0b\u653e\u4e58\u6807\u8bb0\uff0c\u518d\u4e0b\u653e\u52a0\u6807\u8bb0\uff0c\u4e0b\u540c \n        tr[id].x=(tr[id].x+val)%p;\n        tr[id].sum=(tr[id].sum+(tr[id].r-tr[id].l+1)*val%p)%p;\n        return;\n    }    \n    pushdowny(id);\n    pushdownx(id);\n    updatex(lid,l,r,val);\n    updatex(rid,l,r,val);\n    tr[id].sum=(tr[lid].sum+tr[rid].sum)%p;\n    return;\n}\nvoid updatey(ll id,ll l,ll r,ll val)//\u533a\u95f4\u4e58 \n{\n    if(tr[id].l>r||tr[id].r<l) return;\n    if(tr[id].l>=l&&tr[id].r<=r)\n    {\n        pushdowny(id);\n        pushdownx(id);\n        tr[id].y=tr[id].y*val%p;\n        tr[id].sum=tr[id].sum*val%p;\n        return;\n    }    \n    pushdowny(id);\n    pushdownx(id);\n    updatey(lid,l,r,val);\n    updatey(rid,l,r,val);\n    tr[id].sum=(tr[lid].sum+tr[rid].sum)%p;\n    return;\n}\nll query(ll id,ll l,ll r) \n{\n    if(tr[id].l>r||tr[id].r<l) return 0;\n    if(tr[id].l>=l&&tr[id].r<=r)\n    {\n        return tr[id].sum%p;\n    }    \n    pushdowny(id);\n    pushdownx(id);    \n    tr[id].sum=(tr[lid].sum+tr[rid].sum)%p;\n    return (query(lid,l,r)+query(rid,l,r))%p;\n}\nint main()\n{\n    n=read();m=read();p=read();\n    for(ll i=1;i<=n;i++)\n    a[i]=read();\n    build(1,1,n);\n    ll judge,l,r,val;\n    for(ll i=1;i<=m;i++)\n    {\n        judge=read();l=read();r=read();\n        if(judge==1)\n        {\n            val=read();\n            updatey(1,l,r,val%p);\n        }\n        if(judge==2)\n        {\n            val=read();\n            updatex(1,l,r,val%p);\n        }\n        if(judge==3)\n        {\n            ll ans=query(1,l,r)%p;\n            printf(\"%lld\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1508574192,
        "uid": 54721,
        "name": "chengjintao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u6bd2\u554a\uff0c\u6572\u4e86\u6211**\u4e00\u665a\u4e0a\u52a0\u4e00\u65e9\u4e0a**\uff0c\u603b\u7b97A\u4e86\u3002\n\n\u7531\u4e8e\u6709\u52a0\u548c\u4e58\u4e24\u4e2a\u64cd\u4f5c\uff0c\u8981\u75282\u4e2alazy\u6570\u7ec4\u3002\n\n\u6838\u5fc3\u96be\u70b9\u5c31\u662f2\u4e2alazy\u6570\u7ec4\u4f1a\u76f8\u4e92\u5f71\u54cd\u3002\n\n\u56e0\u4e3a\u4e58\u5f71\u54cd\u52a0\uff0c\u52a0\u4e0d\u5f71\u54cd\u4e58\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u7b97\u4e58\u3002\n\n\u770b\u4ee3\u7801\u6ce8\u91ca\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <list>\n#define rep(i,m,n) for(int i=m;i<=n;i++)\n#define dop(i,m,n) for(int i=m;i>=n;i--)\n#define lowbit(x) (x&(-x)) \n#define ll long long\n#define INF 2147483647\nusing namespace std;\ninline int read(){        //\u4e0d\u5199\u5feb\u8bfb\u636e\u8bf4\u53ef\u80fdTLE\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<='0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nconst int maxn=100000;\nll a[maxn+10],sum[(maxn<<2)+10],n,m,b,c,d,e,add[(maxn<<2)+10],mul[(maxn<<2)+10],mod;      //\u5b89\u5168\u8d77\u89c1\uff0c\u90fd\u5f00long long\nvoid PushDown(int now,int m){    //now:\u7ebf\u6bb5\u7f16\u53f7\uff0cm:\u7ebf\u6bb5\u957f\u5ea6\n    if(mul[now]!=1){                        //\u4e58\u6cd5lazy\u6570\u7ec4\u90fd\u8d4b\u503c\u4e3a1\n      mul[now<<1]*=mul[now];\n      mul[now<<1|1]*=mul[now];\n      sum[now<<1]*=mul[now];\n      sum[now<<1|1]*=mul[now];\n      add[now<<1]*=mul[now];\n      add[now<<1|1]*=mul[now];\n      mul[now<<1]%=mod;\n      mul[now<<1|1]%=mod;\n      sum[now<<1]%=mod;\n      sum[now<<1|1]%=mod;\n      add[now<<1]%=mod;\n      add[now<<1|1]%=mod;\n      mul[now]=1;\n    }\n    if(add[now]){\n      add[now<<1]+=add[now];\n      add[now<<1|1]+=add[now];\n      sum[now<<1]+=add[now]*(m-(m>>1));\n      sum[now<<1|1]+=add[now]*(m>>1);\n      add[now<<1]%=mod;        //\u591amod\u51e0\u4e0b\uff0c\u4e0d\u4f1a\u9519\n      add[now<<1|1]%=mod;\n      sum[now<<1]%=mod;\n      sum[now<<1|1]%=mod;\n      add[now]=0;\n    }\n}\nvoid Build(int now,int l,int r){   //\u5efa\u6811\n    mul[now]=1;\n    if(l==r) sum[now]=a[l];\n    else{\n      int mid=(l+r)>>1;\n      Build(now<<1,l,mid);\n      Build(now<<1|1,mid+1,r);\n      sum[now]=sum[now<<1]+sum[now<<1|1];\n    }\n}\nll Query(int now,int l,int r,int wl,int wr){  //\u67e5\u8be2\n    if(l>wr||r<wl) return 0;\n    if(l>=wl&&r<=wr) return sum[now];\n    PushDown(now,r-l+1);\n    int mid=(l+r)>>1;\n    return (Query(now<<1,l,mid,wl,wr)%mod+Query(now<<1|1,mid+1,r,wl,wr)%mod)%mod;\n}\nvoid Change(int now,int l,int r,int wl,int wr,int p,int mode){   //\u6539\u503c\uff0cmode=1:\u52a0\u6cd5\uff0cmode=2:\u4e58\u6cd5\n    if(l>wr||r<wl) return;          //\u5982\u679c\u5f53\u524d\u533a\u95f4\u4e0d\u5728\u9700\u8981\u6539\u503c\u7684\u533a\u95f4\u5185\uff0c\u8fd4\u56de\n    if(l>=wl&&r<=wr){          //\u5982\u679c\u5f53\u524d\u533a\u95f4\u5305\u62ec\u5728\u9700\u8981\u6539\u503c\u7684\u533a\u95f4\u5185\uff0c\u6539\u8fd9\u6bb5\u7684\u503c\uff0c\u5e76\u6807\u8bb0lazy\n      if(mode) add[now]+=p,sum[now]+=p*(r-l+1),add[now]%=mod,sum[now]%=mod;        \n      else mul[now]*=p,sum[now]*=p,add[now]*=p,add[now]%=mod,sum[now]%=mod,mul[now]%=mod;    //\u5982\u679c\u662f\u4e58\u6cd5\uff0c\u8981\u628a\u52a0\u6cd5lazy\u7684\u503c\u4e5f\u6539\u6389\uff08\u4e58\u6cd5\u5206\u914d\u7387\uff09\n      return;\n    }\n    PushDown(now,r-l+1);\n    int mid=(l+r)>>1;\n    Change(now<<1,l,mid,wl,wr,p,mode);\n    Change(now<<1|1,mid+1,r,wl,wr,p,mode);\n    sum[now]=(sum[now<<1]+sum[now<<1|1])%mod;\n}\nint main(){\n    n=read();m=read();mod=read();\n    rep(i,1,n) a[i]=read();\n    Build(1,1,n);\n    rep(i,1,m){\n       b=read();\n       if(b==1){\n         c=read();d=read();e=read();\n         Change(1,1,n,c,d,e,0);\n       }\n       if(b==2){\n         c=read();d=read();e=read();\n         Change(1,1,n,c,d,e,1);\n       }\n       if(b==3){\n         c=read();d=read();\n         printf(\"%lld\\n\",Query(1,1,n,c,d));\n       }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1505526081,
        "uid": 54636,
        "name": "Riven_Yasuo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u4eca\u5929\u5148\u7528cnt\u5206\u914d\u6807\u53f7\u5199\u7ebf\u6bb5\u6811\u505a\u4e86\u8fd9\u9053\u9898\uff0cT\u6210\u72d7\uff0c\u4e00\u8138\u61f5\u903c\u3002\u4e8e\u662f\u6362\u6210rt\\*2,rt\\*2+1\u53c8T\u6210\u72d7\uff0c70\u5206\n\n\u597d\uff0c\u90a3\u4e48\u7a76\u7adf\u600e\u4e48\u624d\u80fd\u4e0dT\uff1f\u5f88\u6c14\u554a\uff0c\u7136\u540e\u5220\u4e86\u51e0\u4e2a\u53d6\u6a21\u5c45\u713680\u5206\u4e86\u3002\u4e8e\u662f\u8c41\u7136\u5f00\u6717\uff0c\u53ea\u5728\u6700\u540e\u53d6\u6a21\uff0cAC\u3002\n\n\u8fd9\u9053\u9898\u544a\u8bc9\u6211\u4eec\u53d6\u6a21\u4e0d\u8981\u4e71\u53d6\u7684\u91cd\u8981\u6027\u3002\n\n\n\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int maxn = 100005;\nint p;\nint data[maxn];\n#define gadd(a, b) ((((a)%p) + ((b)%p))%p)\n#define gtimes(a, b) ((((a)%p) * ((b)%p))%p)\ninline int read() {\n    int ret = 0, f = 1;\n    char c = getchar();\n    while(c > '9' || c < '0') {\n        if(c == '-') f = -1;\n        c = getchar();\n    }\n    while(c <= '9' && c >= '0') ret = ret * 10 + c - '0', c = getchar();\n    return ret * f;\n}\nnamespace Segtree{\n    struct node {\n        long long lazy[2], sum;\n        int l, r;\n    }tree[maxn << 2];\n    void push_up(int rt) {\n        tree[rt].sum = (tree[rt << 1].sum + tree[rt << 1 | 1].sum) % p;\n    }\n    void push_down(int rt) {\n        if(tree[rt].lazy[0] == 0 && tree[rt].lazy[1] == 1) return;\n        (tree[rt << 1].lazy[0] *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1].lazy[0] += tree[rt].lazy[0]) %= p;\n        (tree[rt << 1 | 1].lazy[0] *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1 | 1].lazy[0] += tree[rt].lazy[0]) %= p;\n        (tree[rt << 1].lazy[1] *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1 | 1].lazy[1] *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1].sum *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1].sum += gtimes((tree[rt << 1].r - tree[rt << 1].l + 1), tree[rt].lazy[0])) %= p;\n        (tree[rt << 1 | 1].sum *= tree[rt].lazy[1]) %= p;\n        (tree[rt << 1 | 1].sum += gtimes((tree[rt << 1 | 1].r - tree[rt << 1 | 1].l + 1), tree[rt].lazy[0])) %= p;\n        tree[rt].lazy[0] = 0;\n        tree[rt].lazy[1] = 1;\n    }\n    void build(int rt, int l, int r) {\n        tree[rt].l = l, tree[rt].r = r;\n        tree[rt].lazy[1] = 1;\n        if(l == r) {\n            tree[rt].sum = data[l] % p;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(rt << 1, l, mid);\n        build(rt << 1 | 1, mid + 1, r);\n        push_up(rt);\n    }\n    long long query(int rt, int l, int r) {\n        int tl = tree[rt].l, tr = tree[rt].r;\n        if(l == tl && r == tr) return tree[rt].sum;\n        push_down(rt);\n        int mid = (tl + tr) >> 1;\n        if(r <= mid) return query(rt << 1, l, r) % p;\n        else if(l > mid) return query(rt << 1 | 1, l, r) % p;\n        else return gadd(query(rt << 1, l, mid), query(rt << 1 | 1, mid + 1, r));\n    }\n    void add(int rt, int l, int r, int dt) {\n        int tl = tree[rt].l, tr = tree[rt].r;\n        if(l == tl && r == tr) {\n            (tree[rt].sum += (tr - tl + 1) * (dt % p)) %= p;\n            (tree[rt].lazy[0] += dt) %= p;\n            return;\n        }\n        push_down(rt);\n        int mid = (tl + tr) >> 1;\n        if(r <= mid) add(rt << 1, l, r, dt);\n        else if(l > mid) add(rt << 1 | 1, l, r, dt);\n        else add(rt << 1, l, mid, dt), add(rt << 1 | 1, mid + 1, r, dt)    ;\n        push_up(rt);\n    }\n    void times(int rt, int l, int r, int dt) {\n        int tl = tree[rt].l, tr = tree[rt].r;\n        if(l == tl && r == tr) {\n            (tree[rt].sum *= dt) %= p;\n            (tree[rt].lazy[1] *= dt) %= p;\n            (tree[rt].lazy[0] *= dt) %= p;\n            return;\n        }\n        push_down(rt);\n        int mid = (tl + tr) >> 1;\n        if(r <= mid) times(rt << 1, l, r, dt);\n        else if(l > mid) times(rt << 1 | 1, l, r, dt);\n        else times(rt << 1, l, mid, dt), times(rt << 1 | 1, mid + 1, r, dt)    ;\n        push_up(rt);\n    }\n}\nint main() {\n    int n, m;\n    scanf(\"%d%d%d\", &n, &m, &p);\n    for(register int i = 1; i <= n; ++i) data[i] = read();\n    Segtree::tree[0].lazy[1] = 1;\n    Segtree::build(1, 1, n);\n    int opt, a, b, c;\n    for(register int i = 1; i <= m; ++i) {\n        opt = read();\n        if(opt != 3) {\n            a = read(), b = read(), c = read();\n            if(opt == 2)    Segtree::add(1, a, b, c);\n            else Segtree::times(1, a, b, c);\n        }else {\n            a = read(), b = read();\n            printf(\"%d\\n\", Segtree::query(1, a, b));\n        }\n    }    \n     return 0;\n}\n```",
        "postTime": 1504949404,
        "uid": 39907,
        "name": "Rockdu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "- \u533a\u95f4\u4fee\u6539\u7ebf\u6bb5\u6811 \u9898\u76ee\u4e2d\u8981\u6c42\u4e09\u4e2a\u64cd\u4f5c\n\n1 \u90fd\u4e58\n\n2 \u90fd\u52a0\n\n3 \u6c42\u533a\u95f4\u548c\u6a21p\u7684\u503c\n\n \n\u6211\u770b\u524d\u9762\u9898\u89e3\u6ca1\u6709\u628a\u52a0\u6cd5\u548c\u4e58\u6cd5\u5199\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u7684\uff0c\u6211\u5c31\u628a\u6574\u4e2a\u4fee\u6539\u5199\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u3002\n\n\u4ee3\u7801\u5982\u4e0b \u89c1\u6ce8\u91ca:\n\n\n\n \n\n\n\n\n\n     \n     \n\n```cpp\n#include<bits/stdc++.h>\n#define lson l,m,rt<<1  //\u7701\u529b\u7701\u65f6\u95f4\n#define rson m+1,r,rt<<1|1\nusing namespace std;\nlong long z[1000005<<2|1],sum[1000005<<2|1],add[1000005<<2|1],mul[1000005<<2|1]; //\u4e00\u822c\u8981\u5f00\u52304\u500d \u4e0d\u7136\u53ef\u80fd\u7206\nlong long n,m,a,p;\nvoid update(int rt)//rt\u8868\u793a\u5f53\u524d\u7684\u8282\u70b9\n{\n    sum[rt] = (sum[rt<<1]+sum[rt<<1|1])%p; //sum\u8868\u793a\u7ebf\u6bb5\u6811\u8be5\u8282\u70b9\uff08\u8868\u793a\u4e00\u4e2a\u533a\u95f4\uff09\u7684\u548c\uff0c\u7531\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u7ec4\u6210\n    return;//\u6015\u5728\u4e2d\u95f4\u8fc7\u7a0b\u7206int \u6240\u4ee5\u6240\u6709\u53d8\u91cf\u5f00\u6210long long \u7136\u540e\u968f\u65f6\u53d6%\n} \nvoid color(int l,int r,int rt,int x,int y)  //\u6807\u8bb0\u66f4\u65b0 \u6211\u4eec\u6bcf\u4e00\u6b21\u90fd\u770b\u6210\u628a\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u6570 *a + b\uff08\u4e58a\u7136\u540e\u52a0\u4e0ab\uff09\n{                                                     //\u7b97\u52a0\u6cd5\u65f6 y\u53d8\u62101  \uff1b\u7b97\u4e58\u6cd5\u65f6 x=0\n    sum[rt] = ((sum[rt]*y)+(1ll*(r-l+1)*x))%p; //\u66f4\u65b0sum \n    mul[rt] = (mul[rt]*y)%p; //\u66f4\u65b0\u4e58\u6cd5\u6807\u8bb0\n    add[rt] = (add[rt]*y+x)%p;//\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0 \u522b\u5fd8\u4e86\u4e58\u4e0a\n    return;\n} \nvoid push_col(int l,int r,int rt)//\u4e0b\u653e\u6807\u8bb0 rt\u8868\u793a\u5f53\u524d\u7684\u8282\u70b9\n{\n    if(mul[rt]!=1 || add[rt]!=0)//\u5224\u65ad\u662f\u5426\u6709\u6807\u8bb0\n    {\n        int m = (l+r)>>1;//\u5206\u4e00\u534a \u7ebf\u6bb5\u6811\u601d\u60f3\n        color(lson,add[rt],mul[rt]); //\u5fd8\u4e86\u7684\u770b\u6700\u4e0a\u9762define\n        color(rson,add[rt],mul[rt]);\n        add[rt] = 0; //\u4e0b\u653e\u5b8c\u6807\u8bb0\u540e \u6062\u590d\u521d\u59cb\u72b6\u6001\n        mul[rt] = 1; \n    } \n    return;\n} \nvoid build(int l,int r,int rt)//\u5efa\u6811 \u5343\u4e07\u6ce8\u610f\u521d\u59cb\u5316\u5e94\u8be5\u5728if\u7684\u5916\u9762 \u8c03\u4e86\u4e00\u4e2a\u665a\u4e0a\u5c31\u56e0\u4e3a\u8fd9\u4e2a\n{\n    mul[rt]=1; \n    add[rt]=0;\n    if(l==r)\n    { \n        sum[rt] = z[l];//\u6700\u4e0b\u9762\u7684\u8282\u70b9=z[\u6700\u4e0b\u9762\u7684\u5de6\u7aef\u70b9] \u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u753b\u4e00\u4e2a\u56fe\u770b\u4e0b z\u7684\u8f93\u5165\u5728main \u51fd\u6570\u91cc\n        return;\n    }\n    int m = (l+r)>>1;//(l+r)/2 \n    build(lson);//\u9012\u5f52\u5efa\u6811\n    build(rson);\n    update(rt); //\u8ba1\u7b97\u6700\u521d\u7684sum\n} \nvoid modify(int l,int r,int rt,int nowl,int nowr,int x,int y) //\u4fee\u6539\u51fd\u6570 nowl \u548c nowr\u5c31\u662f\u8981\u4fee\u6539\u7684\u533a\u95f4 x,y \u540c\u4e0a\n{ \n    if(nowl<=l && r<=nowr)//\u5982\u679c\u8986\u76d6\u7684\u8bdd \u5c31\u53ef\u4ee5\u5168\u90e8\u53d6\u51fa \u533a\u95f4\u4fee\u6539\u601d\u60f3\n    {\n        color(l,r,rt,x,y); \n        return; \n    } \n    if(mul[rt]!=1 || add[rt]!=0) //\u4e0b\u653e\n        push_col(l,r,rt); \n    int m=(l+r)>>1;\n    if(nowl<=m) //\u548c\u5de6\u513f\u5b50\u6709\u4ea4\u96c6 \u5f80\u5de6\u513f\u5b50\u627e\n        modify(lson,nowl,nowr,x,y);\n    if(m<nowr) //\u548c\u53f3\u513f\u5b50\u6709\u4ea4\u96c6 \u5f80\u53f3\u513f\u5b50\u627e\n        modify(rson,nowl,nowr,x,y); \n    update(rt);//\u66f4\u65b0\n} \nlong long query(int l,int r,int rt,int nowl,int nowr)//\u67e5\u8be2\u51fd\u6570\n{\n    if(nowl<=l && r<=nowr)//\u8986\u76d6\u5c31\u8fd4\u56de\n    {\n        return (sum[rt])%p; \n    }\n    if(mul[rt]!=1 || add[rt]!=0) //\u6709\u6807\u8bb0\u7684\u8bdd\u9700\u8981\u4e0b\u653e \u5426\u5219\u8be5\u70b9\u5c31\u662f\u6ca1\u6709\u66f4\u65b0\u8fc7\u7684\n        push_col(l,r,rt);\n    int m=(l+r)>>1;\n    long long ans = 0;//\u5f00long long \u9632\u6b62\u7206\n    if(nowl<=m) ans+=query(lson,nowl,nowr)%p;//\u5f88\u597d\u7406\u89e3 \u627e\u5230\u4e86\u5c31\u52a0\u4e0a %p\u4e3a\u4e86\u9632\u7206\n    if(m<nowr) ans+=query(rson,nowl,nowr)%p;\n    return ans%p; \n} \nint main()\n{\n    long long x,y,k;\n    scanf(\"%lld %lld %lld\",&n,&m,&p);//\u8bfb\u5165 n m p\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&z[i]); //\u8f93\u5165\u5e8f\u5217\n    } \n    build(1,n,1);//\u5efa\u6811\n    for(int i=1;i<=m;i++)//while(m--) \u4e5f\u4e00\u6837\n    { \n        scanf(\"%d\",&a);//\u7528 case \u4e5f\u884c\n        if(a==1)//\u4e58\u6cd5 \n        { \n            scanf(\"%lld %lld %lld\",&x,&y,&k);\n            modify(1,n,1,x,y,0,k); //\u52a0\u6cd5\u5904 \u7f6e0\n        } \n        if(a==2)//\u52a0\u6cd5 \n        {\n            scanf(\"%lld %lld %lld\",&x,&y,&k);\n            modify(1,n,1,x,y,k,1);//\u4e58\u6cd5\u5904 \u7f6e1\uff01\uff01\uff01\n        } \n        if(a==3)\n        {\n            scanf(\"%lld %lld\",&x,&y); \n            printf(\"%lld\\n\",(query(1,n,1,x,y))%p);//\u67e5\u8be2 \u8f93\u51fa\n        } \n    } \n    return 0; \n} \n\u6709\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\u8fd8\u8bf7\u6307\u6559\uff01\n```",
        "postTime": 1502369322,
        "uid": 38945,
        "name": "jimmylijiaji",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u5206\u5757\n\n\n\u5173\u4e8e\u5206\u5757\u7684\u6807\u8bb0\u53ef\u4ee5\u53c2\u8003\u7ebf\u6bb5\u6811\u7684\uff0c\u5176\u5b9e\u5dee\u4e0d\u591a\n\n\n\u4e3b\u8981\u7684\u5206\u5757\u59ff\u52bf\u90fd\u5728[blog](http://www.yhzq-blog.cc/\u5206\u5757\u7b97\u6cd5\u603b\u7ed3/)\u91cc\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int maxn = 500000;\nint n,m,num,mod,q,belong[maxn],block,l[maxn],r[maxn];\nLL a[maxn],add[maxn],mul[maxn],d[maxn],x,com,y,z;\nchar s[10];\nLL inline read()\n{\n    LL x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n//void debug()\n//{\n//    for (int i=1;i<=n;i++)\n//        printf(\"%lld \",a[i]+add[belong[i]]);\n//    puts(\"\");\n//    for (int i=1;i<=num;i++,puts(\"\"))\n//        printf(\"Bolck%lld: l:%lld r:%lld sum:%lld\",i,l[i],r[i],d[i]+add[i]*block);\n//}\nvoid build()\n{\n    block=sqrt(n);\n    num=n/block;if (n%block) num++;\n    for (int i=1;i<=num;i++)\n        l[i]=(i-1)*block+1,r[i]=i*block,mul[i]=1;\n    for (int i=1;i<=n;i++)\n        belong[i]=(i-1)/block+1;\n    for (int i=1;i<=n;i++)\n        d[belong[i]]+=a[i];\n}\nvoid update_add(int L,int R,LL x)\n{\n    int bl=belong[L],br=belong[R];\n    if (bl==br)\n    {\n        if (add[bl]||mul[bl]!=1)\n        {\n            for (int i=l[bl];i<=r[bl];i++)\n                a[i]=(a[i]*mul[bl]+add[bl])%mod;\n            d[bl]=(d[bl]*mul[bl]+add[bl]*block)%mod;\n            add[bl]=0,mul[bl]=1;\n        }\n        for (int i=L;i<=R;i++)\n            a[i]+=x;\n        d[bl]=(d[bl]+(R-L+1)*x)%mod;\n        return;\n    }\n    if (add[bl]||mul[bl]!=1)\n    {\n        for (int i=l[bl];i<=r[bl];i++)\n            a[i]=(a[i]*mul[bl]+add[bl])%mod;\n        d[bl]=(d[bl]*mul[bl]+add[bl]*block)%mod;\n        add[bl]=0,mul[bl]=1;    \n    }\n    for (int i=L;i<=r[bl];i++)\n        a[i]=(a[i]+x)%mod;\n    d[bl]=(d[bl]+(r[bl]-L+1)*x)%mod;\n    if (add[br]||mul[br]!=1)\n    {\n        for (int i=l[br];i<=r[br];i++)\n            a[i]=(a[i]*mul[br]+add[br])%mod;\n        d[br]=(d[br]*mul[br]+add[br]*block)%mod;\n        add[br]=0,mul[br]=1;    \n    }\n    for (int i=l[br];i<=R;i++)\n        a[i]=(a[i]+x)%mod;\n    d[br]=(d[br]+(R-l[br]+1)*x)%mod;\n    for (int i=bl+1;i<br;i++)\n        add[i]=(add[i]+x)%mod;\n}\nvoid update_mul(int L,int R,LL x)\n{\n    int bl=belong[L],br=belong[R];\n    if (bl==br)\n    {\n        if (add[bl]||mul[bl]!=1)\n        {\n            for (int i=l[bl];i<=r[bl];i++)\n                a[i]=(a[i]*mul[bl]+add[bl])%mod;\n            d[bl]=(d[bl]*mul[bl]+add[bl]*block)%mod;\n            add[bl]=0,mul[bl]=1;\n        }\n        int more=0;\n        for (int i=L;i<=R;i++)\n            more=(more+a[i]*(x-1))%mod,a[i]=(a[i]*x)%mod;\n        d[bl]=(d[bl]+more)%mod;\n        return;\n    }\n    if (add[bl]||mul[bl]!=1)\n    {\n        for (int i=l[bl];i<=r[bl];i++)\n            a[i]=(a[i]*mul[bl]+add[bl])%mod;\n        d[bl]=(d[bl]*mul[bl]+add[bl]*block)%mod;\n        add[bl]=0,mul[bl]=1;    \n    }\n    int more=0;\n    for (int i=L;i<=r[bl];i++)\n        more=(more+a[i]*(x-1))%mod,a[i]=(a[i]*x)%mod;\n    d[bl]=(d[bl]+more)%mod;\n    if (add[br]||mul[br]!=1)\n    {\n        for (int i=l[br];i<=r[br];i++)\n            a[i]=(a[i]*mul[br]+add[br])%mod;\n        d[br]=(d[br]*mul[br]+add[br]*block)%mod;\n        add[br]=0,mul[br]=1;    \n    }\n    more=0;\n    for (int i=l[br];i<=R;i++)\n        more=(more+a[i]*(x-1))%mod,a[i]=(a[i]*x)%mod;\n    d[br]=(d[br]+more)%mod;\n    for (int i=bl+1;i<br;i++)\n        mul[i]=(mul[i]*x)%mod,\n        add[i]=(add[i]*x)%mod;\n}\nvoid query(int L,int R)\n{\n    LL ans=0;\n    int bl=belong[L],br=belong[R];\n    if (bl==br)\n    {\n        for (int i=L;i<=R;i++)\n            ans=(ans+a[i])%mod;\n        printf(\"%d\\n\",(ans*mul[bl]+(R-L+1)*add[bl])%mod);\n        return;\n    }\n    for (int i=L;i<=r[bl];i++)\n        ans=(ans+a[i])%mod;\n    ans=(ans*mul[bl]+(r[bl]-L+1)*add[bl])%mod;\n    int temp=0;\n    for (int i=l[br];i<=R;i++)\n        temp=(temp+a[i])%mod;\n    temp=(temp*mul[br]+(R-l[br]+1)*add[br])%mod;\n    ans=(ans+temp)%mod;\n    for (int i=bl+1;i<br;i++)\n        ans=(ans+d[i]*mul[i]+add[i]*block)%mod;\n    printf(\"%lld\\n\",ans);\n}\nint main()\n{\n    n=read(),q=read(),mod=read();\n    for (int i=1;i<=n;i++)\n        a[i]=read();\n    build();\n    for (int i=1;i<=q;i++)\n    {\n        com=read(),x=read(),y=read();\n        if (com==3)\n            query(x,y);\n        else\n        if (com==1)\n            z=read(),update_mul(x,y,z);\n        else\n            z=read(),update_add(x,y,z);\n    }\n}\n```",
        "postTime": 1494413548,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6709\u4e24\u79cd\u66f4\u65b0\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0b\u4f20\u6807\u8bb0\u53ef\u4ee5\u8bbe\u4e24\u4e2a\uff0c\u4e00\u4e2a\u52a0\u6cd5\uff0c\u4e00\u4e2a\u4e58\u6cd5\uff0c\u6839\u636e\u4e58\u6cd5\u5206\u914d\u7387\uff0c\u53ef\u4ee5\u5f97\u51fa\uff08\u81ea\u5df1\u8bc1\u660e\u6216\u8005\u770b\u697c\u4e0b\uff09\uff1a\n\n\uff081\uff09\u5f53\u67d0\u6bb5\u533a\u95f4\u4e58\u4e00\u4e2a\u6570\u65f6\uff0c\u4e24\u4e2a\u4e0b\u4f20\u6807\u8bb0\u90fd\u8981\u4e58\u8fd9\u4e2a\u6570\n\n\uff082\uff09\u5f53\u67d0\u6bb5\u533a\u95f4\u52a0\u4e00\u4e2a\u6570\u65f6\uff0c\u52a0\u6cd5\u4e0b\u4f20\u6807\u8bb0\u52a0\u4e0a\u8fd9\u4e2a\u6570\n\n\u4e0b\u4f20\u65f6\uff0c\u5e94\u8be5\u5148\u4e58\u518d\u52a0\u3002\n\n\u597d\u50cf\u5f88\u5bb9\u6613\u7684\u6837\u5b50\uff0c\u7ed3\u679c\u6211\u4e00\u5f00\u59cb\u603b\u662f30\u5206\uff0c\u67e5\u4e86\u534a\u5929\u53d1\u73b0\u521d\u59cb\u5316\u641e\u9519\u4e86\u3002\n\n\u63a5\u7740\u4e00\u76f470\u5206\uff0c\u5f04\u4e86\u534a\u5929\u8fd8\u662fWA 3\u4e2a\u70b9\uff0c\u4f30\u8ba1\u6211\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u53eaWA \u6700\u540e3\u4e2a\u70b9\u7684\u3002\n\n\u540e\u6765\u4e00\u751f\u6c14\uff0c\u628a\u4e0b\u4f20\u64cd\u4f5c\u7684\u6761\u4ef6\u5220\u4e86\uff0c\u5c31...\u8fc7\u4e86\u3002\u3002\u3002\n\n\u731b\u7136\u60f3\u8d77\u6709\u53ef\u80fd\u4e58\u4e00\u4e2a\u8d1f\u6570\u62160\uff0c\u8fd8\u6709\u53ef\u80fd\u52a0\u8d1f\u6570\u62160\n\n~~\u5509\uff0c\u53ea\u80fd\u8bf4\u6211\u592a\u5f31\u4e86~~\n\n\u9644\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nlong long n,m,mod,a,x,y,k,s[100002];\ntypedef struct{\n    long long g,fc,fj;\n}P;\nP p[400002];\nvoid pushdown(int root,int begin,int end,int mid){\n    p[root*2].g*=p[root].fc;p[root*2+1].g*=p[root].fc;\n    p[root*2].g+=p[root].fj*(mid-begin+1);p[root*2+1].g+=p[root].fj*(end-mid);\n    p[root*2].fc*=p[root].fc;p[root*2+1].fc*=p[root].fc;\n    p[root*2].fj*=p[root].fc;p[root*2+1].fj*=p[root].fc;\n    p[root*2].fj+=p[root].fj;p[root*2+1].fj+=p[root].fj;\n    p[root].fc=1;p[root].fj=0;\n    p[root*2].g%=mod;p[root*2].fc%=mod;p[root*2].fj%=mod;\n    p[root*2+1].g%=mod;p[root*2+1].fc%=mod;p[root*2+1].fj%=mod;\n}\nvoid gengxinc(int root,int begin,int end,int begin2,int end2,long long z){\n    if (begin>end2 || end<begin2)return;\n    if (begin>=begin2 && end<=end2)\n    {\n        p[root].g=p[root].g*z%mod;\n        p[root].fc=p[root].fc*z%mod;\n        p[root].fj=p[root].fj*z%mod;\n        return;\n    }\n    int mid=(begin+end)/2;pushdown(root,begin,end,mid);\n    gengxinc(root*2,begin,mid,begin2,end2,z);\n    gengxinc(root*2+1,mid+1,end,begin2,end2,z);\n    p[root].g=(p[root*2].g+p[root*2+1].g)%mod;\n}\nvoid gengxinj(int root,int begin,int end,int begin2,int end2,long long z){\n    if (begin>end2 || end<begin2)return;\n    if (begin>=begin2 && end<=end2)\n    {\n        p[root].g=(p[root].g+z*(end-begin+1))%mod;\n        p[root].fj=(p[root].fj+z)%mod;\n        return;\n    }\n    int mid=(begin+end)/2;pushdown(root,begin,end,mid);\n    gengxinj(root*2,begin,mid,begin2,end2,z);\n    gengxinj(root*2+1,mid+1,end,begin2,end2,z);\n    p[root].g=(p[root*2].g+p[root*2+1].g)%mod;\n}\nlong long query(int root,int begin,int end,int begin2,int end2){\n    if (begin>end2 || end<begin2)return 0;\n    if (begin>=begin2 && end<=end2)return p[root].g;\n    int mid=(begin+end)/2;pushdown(root,begin,end,mid);\n    return (query(root*2,begin,mid,begin2,end2)+query(root*2+1,mid+1,end,begin2,end2))%mod;\n}\nvoid csh(int root,int begin,int end){\n    p[root].fc=1;p[root].fj=0;\n    if (begin==end)\n    {\n        p[root].g=s[begin];\n        return;\n    }\n    int mid=(begin+end)/2;\n    csh(root*2,begin,mid);csh(root*2+1,mid+1,end);\n    p[root].g=p[root*2].g+p[root*2+1].g;\n}\nint main()\n{\n    scanf(\"%lld%lld%lld\",&n,&m,&mod);\n    for (int i=1;i<=n;i++)\n    scanf(\"%lld\",&s[i]);\n    csh(1,1,n);\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%lld%lld%lld\",&a,&x,&y);\n        if (a==1)\n        {\n            scanf(\"%lld\",&k);\n            gengxinc(1,1,n,x,y,k);\n        }\n        else if (a==2)\n        {\n            scanf(\"%lld\",&k);\n            gengxinj(1,1,n,x,y,k);\n        }\n        else printf(\"%lld\\n\",query(1,1,n,x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1494081570,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7ec3\u4e60\u554a.....\u867d\u7136\u6709\u4e24\u4e2alazy\u6807\u8bb0\uff0c\u4f46\u662f\u53ea\u8981\u6211\u4eec\u786e\u5b9a\u5b83\u4eec\u7684\u5148\u540e\u987a\u5e8f\u5c31\u6ca1\u6709\u90a3\u4e48\u96be\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u5728\u66f4\u65b0\u4e58\u6cd5\u6807\u8bb0\u65f6\u4e5f\u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0\uff0c\u7136\u540e\u6807\u8bb0\u4e0b\u653e\u65f6\u5148\u653e\u4e58\u6cd5\u6807\u8bb0\uff0c\u518d\u653e\u52a0\u6cd5\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b2c\u4e00\u6b21\u6ca1\u6709A\u662f\u56e0\u4e3a\u53d6\u6a21\u7684\u95ee\u9898\uff0c\u6539\u4e86\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u53d6\u6a21\u4e0d\u8981\u592a\u9891\u7e41\u3002\n\n\u9898\u89e3\u91cc\u6709\u4eba\u8bf4\u9664\u975e\u662f\u7384\u5b66\u5927\u4f6c\u4e0d\u7136\u4f1aT....\u4e0d\u8fc7\u771f\u7684\u4e0d\u7528\u7384\u5b66\u5927\u4f6c\u554a\uff0c\u52a0\u4e2a\u8bfb\u5165\u4f18\u5316\u5c31\u8fc7\u4e86.....\u8bfb\u5165\u4f18\u5316\u662f\u795e\u5668\uff0c\u53ef\u4ee5\u8fc5\u901f\u7f29\u77ed\u65f6\u95f4\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<climits>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nll read(){\n    ll w=1,q=0;char ch=' ';\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')w=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')q=(ll)q*10+ch-'0',ch=getchar();\n    return (ll)w*q;\n}\nint n,m;\nll mod;\nll a[100005],sum[400005],mul[400005],laz[400005];\nvoid up(int i){sum[i]=(sum[(i<<1)]+sum[(i<<1)|1])%mod;}\nvoid pd(int i,int s,int t){//\u7cbe\u9ad3\u6240\u5728\uff0c\u5148\u653e\u4e58\u6cd5\u518d\u653e\u52a0\u6cd5\n    int l=(i<<1),r=(i<<1)|1,mid=(s+t)>>1;\n    if(mul[i]!=1){\n    mul[l]*=mul[i];mul[l]%=mod;mul[r]*=mul[i];mul[r]%=mod;\n    laz[l]*=mul[i];laz[l]%=mod;laz[r]*=mul[i];laz[r]%=mod;\n    sum[l]*=mul[i];sum[l]%=mod;sum[r]*=mul[i];sum[r]%=mod;\n    mul[i]=1;\n    }\n    if(laz[i]){\n    sum[l]+=laz[i]*(mid-s+1);sum[l]%=mod;\n    sum[r]+=laz[i]*(t-mid);sum[r]%=mod;\n    laz[l]+=laz[i];laz[l]%=mod;\n    laz[r]+=laz[i];laz[r]%=mod;\n    laz[i]=0;\n    }return;\n}\nvoid build(int s,int t,int i){\n    mul[i]=1;if(s==t){sum[i]=a[s];return;}\n    int mid=(s+t)>>1;\n    build(s,mid,i<<1);build(mid+1,t,(i<<1)|1);up(i);\n}\nvoid chen(int l,int r,int s,int t,int i,ll z){\n    int mid=(s+t)>>1;\n    if(l<=s&&t<=r){\n        mul[i]*=z;mul[i]%=mod;laz[i]*=z;laz[i]%=mod;//\u66f4\u65b0\u4e58\u6cd5\u7684\u540c\u65f6\u66f4\u65b0\u52a0\u6cd5\n        sum[i]*=z;sum[i]%=mod;return;\n    }\n    pd(i,s,t);\n    if(mid>=l)chen(l,r,s,mid,(i<<1),z);\n    if(mid+1<=r)chen(l,r,mid+1,t,(i<<1)|1,z);\n    up(i);\n}\nvoid add(int l,int r,int s,int t,int i,ll z){\n    int mid=(s+t)>>1;\n    if(l<=s&&t<=r){\n        sum[i]+=z*(t-s+1);sum[i]%=mod;laz[i]+=z;laz[i]%=mod;\n        return;\n    }\n    pd(i,s,t);\n    if(mid>=l)add(l,r,s,mid,(i<<1),z);\n    if(mid+1<=r)add(l,r,mid+1,t,(i<<1)|1,z);\n    up(i);\n}\nll getans(int l,int r,int s,int t,int i){\n    int mid=(s+t)>>1;ll tot=0;\n    if(l<=s&&t<=r){return sum[i];}\n    pd(i,s,t);\n    if(mid>=l)tot+=getans(l,r,s,mid,(i<<1));\n    tot%=mod;\n    if(mid+1<=r)tot+=getans(l,r,mid+1,t,(i<<1)|1);\n    return tot%mod;\n}\nint main()\n{\n    int i,j,x,y,bh;\n    ll z;\n    n=read();m=read();mod=read();\n    for(i=1;i<=n;i++)a[i]=read();\n    build(1,n,1);\n    for(i=1;i<=m;i++){\n        bh=read();\n        if(bh==1){\n            x=read();y=read();z=read();\n            chen(x,y,1,n,1,z);\n        }\n        else if(bh==2){\n            x=read();y=read();z=read();\n            add(x,y,1,n,1,z);\n        }\n        else if(bh==3){\n            x=read();y=read();\n            printf(\"%lld\\n\",getans(x,y,1,n,1));\n        }\n    }\n       return 0;\n} \n```",
        "postTime": 1493295224,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "//\u86e4\u86e4\u86e4\u86e4\u86e4\u86e4\uff0c\u5404\u79cd\u5e38\u6570\u4f18\u5316\u61d2\u6807\u4f18\u5316\u53f2\u4e0a\u6700\u5feb\uff01\uff01!\uff08\u4f17\u4eba\uff1a\u4e0d\u5bf9\u554a\u8fd8\u6709\u6307\u9488\u5462\uff1f\u6211\uff1a\u3002\u3002\u3002\u54b1\u6253\u4e2a\u9898\u89e3\u4e0d\u5bb9\u6613\u80fd\u4e0d\u80fd\u5ffd\u7565\u4e00\u4e0b\u7ec6\u8282\u3002\u3002\u3002\u800c\u4e14\u641e\u4e86\u4e00\u4e2a\u591a\u6708\u3002\u3002\u3002\uff09\n\n//\u641e\u4e861\u4e2a\u591a\u6708\uff0c\u7ec8\u4e8e\u641e\u5b8c\u4e86\u545c\u545c\u545c~~~\n\n//\u8981\u6ce8\u610f\u4e58\u6cd5\u5206\u914d\u5f8b\uff0c\u56e0\u4e3a\u5728\u61d2\u60f0\u6807\u8bb0\u4e2d\u4e58\u6cd5\u4f1a\u5f71\u54cd\u52a0\u6cd5\uff0c\u800c\u52a0\u6cd5\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4e58\u6cd5\uff08\u5047\u88c5\u4e25\u8083\u3002\u3002\u3002\uff09\n\n//\u6700\u6700\u91cd\u8981\u7684\u4e00\u70b9\uff08\u6211\u641e\u4e86\u4e00\u4e2a\u591a\u6708\u5c31\u662f\u56e0\u4e3a\u5b83\u545c\u545c\u545c~~~\uff09\uff0c\u65e0\u8bba\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff08\u5efa\u6811\u9664\u5916\uff09\uff0c\u6267\u884c\u4e4b\u524d\u4e00\u5b9a\u4e00\u5b9a\u5343\u4e07\u5343\u4e07mustmust\u628a\u5f53\u524d\u8282\u70b9\u7684\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\uff0c\u56e0\u4e3a\u67e5\u8be2\u65f6\u662f\u4ece\u4e0a\u5411\u4e0b\u5bfb\u627e\u61d2\u60f0\u6807\u8bb0\u7684\uff0c\u5982\u679c\u5728\u6bcf\u6b21\u67e5\u8be2\u4e0d\u6267\u884c\u4e0b\u653e\u64cd\u4f5c\u52a0\u6cd5\u4e58\u6cd5\u5148\u540e\u6b21\u5e8f\u5c31\u51fa\u4e8b\u4e86\uff08\u6211\u5c31\u662f\u9519\u5728\u8fd9\u91cc\u7684\u3002\u3002\u3002\u545c\u545c\u545c~~~\uff09\n\n\u9644\u4e0a\u6211V587\u7684\u4ee3\u7801\uff08\u86e4\u86e4\u86e4\u86e4\u86e4\u86e4\uff09\n\n#pra\\\ngma GCC optimize(\"O3\")//\u8fd9\u662f\u4f20\u8bf4\u4e2d\u7684O3\u4f18\u5316\uff08\u5c0f\u5c0f\u5410\u69fd\u4e00\u4e0b\u6d1b\u8c37\uff0c#pragma\u5173\u952e\u5b57\u5c45\u7136\u4e0d\u8ba9\u7528\uff0c\u5f04\u5f97\u6211\u8fd8\u5f97\u6253\u4e2a\u201c\\\"\uff0c\u8fd8\u5f97\u6253\u4e2a\u6362\u884c\u3002\u3002\u3002\uff09\n\n```cpp\n#include<stdio.h>\nusing namespace std;\nint n,m;\nunsigned long long p,vv[1000020],ll[2000050],rr[2000050],mm[2000050],k,jia[2000050],cheng[2000050];\nchar ch;\ninline void iin(int &kk){\n    ch=getchar();\n    for(;ch!='-'&&(ch<48||ch>57);){\n        ch=getchar();\n    }\n    if(ch=='-'){\n        ch=getchar();\n        for(;ch>=48&&ch<=57;){\n            kk=(kk<<1)+(kk<<3)+ch-48;\n            ch=getchar();\n        }\n        kk=-kk;\n        return;\n    }\n    for(;ch>=48&&ch<=57;){\n        kk=(kk<<1)+(kk<<3)+ch-48;\n        ch=getchar();\n    }\n}\ninline void lin(unsigned long long &kk){\n    ch=getchar();\n    for(;ch!='-'&&(ch<48||ch>57);){\n        ch=getchar();\n    }\n    if(ch=='-'){\n        ch=getchar();\n        for(;ch>=48&&ch<=57;){\n            kk=(kk<<1)+(kk<<3)+ch-48;\n            ch=getchar();\n        }\n        kk=-kk;\n        return;\n    }\n    for(;ch>=48&&ch<=57;){\n        kk=(kk<<1)+(kk<<3)+ch-48;\n        ch=getchar();\n    }\n}\nunsigned long long build(int l,int r,int id){\n    cheng[id]=1;\n    if(l==r){\n        lin(vv[id]);//\u5efa\u6811\u65f6\u7684\u795e\u5947\u4f18\u5316\uff0c\u8282\u7ea6\u7a7a\u95f4\u86e4\u86e4\u86e4\u86e4\u86e4\u86e4\n        vv[id]%=p;\n        ll[id]=rr[id]=mm[id]=l;\n        return vv[id];\n    }\n    ll[id]=l;\n    rr[id]=r;\n    int mid=(l+r)>>1;\n    mm[id]=mid;\n    return vv[id]=(build(l,mid,id<<1)+build(mid+1,r,(id<<1)|1))%p;\n}\ninline void low(int id){\n    vv[id]=(cheng[id]*vv[id]%p+jia[id]*(rr[id]-ll[id]+1)%p)%p;\n    int lid=id<<1,rid=(id<<1)|1;\n    if(cheng[id]!=1){\n        cheng[lid]*=cheng[id],cheng[lid]%=p;\n        cheng[rid]*=cheng[id],cheng[rid]%=p;\n        jia[lid]*=cheng[id],jia[lid]%=p;\n        jia[rid]*=cheng[id],jia[rid]%=p;\n        cheng[id]=1;\n    }\n    if(jia[id]){\n        jia[lid]+=jia[id],jia[lid]%=p;\n        jia[rid]+=jia[id],jia[rid]%=p;\n        jia[id]=0;\n    }\n```\n}//\u795e\u5947\u7684\u4e0b\u653e\u64cd\u4f5c\nunsigned long long chengg(int l,int r,unsigned long long change,int id){\n\n```cpp\n    low(id);\n//    printf(\"cheng%d %d %d %d\\n\",l,r,id,mm[id]);\n    int mmm=mm[id];\n    if(l==ll[id]&&r==rr[id]){\n        unsigned long long uu=cheng[id];\n        cheng[id]=(cheng[id]*change)%p;\n        unsigned long long u=jia[id];\n        jia[id]=(jia[id]*change)%p;\n        return ((cheng[id]-uu)*vv[id]%p+(jia[id]-u)*(r-l+1)%p)%p;\n    }\n    if(mmm>=r){\n        unsigned long long u=chengg(l,r,change,id<<1)%p;\n        u%=p;\n        vv[id]=(vv[id]+u)%p;\n        return u;\n    }\n    if(mmm<l){\n        unsigned long long u=chengg(l,r,change,(id<<1)|1)%p;\n        u%=p;\n        vv[id]=(vv[id]+u)%p;\n        return u;\n    }\n    unsigned long long u=(chengg(l,mmm,change,id<<1)+chengg(mmm+1,r,change,(id<<1)|1))%p;\n    vv[id]=(vv[id]+u)%p;\n    return u;\n}\nvoid jiaa(int l,int r,unsigned long long change,int id){\n    low(id);\n    int lll=ll[id],rrr=rr[id];\n    if(l==lll&&r==rrr){\n        jia[id]=(jia[id]+change)%p;\n        return;\n    }\n    int mmm=mm[id];\n    vv[id]=(vv[id]%p+(r-l+1)*change%p)%p;\n//    printf(\"jia%d %d %d %d \",l,r,id,mm[id]);\n//    printf(\"%lld\\n\",vv[id]);\n    if(mmm>=r){\n        jiaa(l,r,change,id<<1);\n        return;\n    }\n    if(mmm<l){\n        jiaa(l,r,change,(id<<1)|1);\n        return;\n    }\n    jiaa(l,mmm,change,id<<1);\n    jiaa(mmm+1,r,change,(id<<1)|1);\n}\nunsigned long long out(int l,int r,int id){\n//    printf(\"out%d %d %d\\n\",l,r,id);\n    low(id);\n//    printf(\"a%lld \",cheng[id]);\n//    printf(\"s%lld\\n\",jia[id]);\n//    printf(\"%d %d %d %d\\n\",l,r,id,vv[id]);\n    if(l==ll[id]&&r==rr[id]){\n        return vv[id];\n    }\n    int mid=mm[id],lid=id<<1,rid=(id<<1)|1;;\n    if(mid>=r){\n        return out(l,r,lid);\n    }\n    if(mid<l){\n        return out(l,r,rid);\n    }\n    return (out(l,mid,lid)+out(mid+1,r,rid))%p;\n}\nint main(){\n    iin(n),iin(m),lin(p);\n    build(1,n,1);\n    int num=0,x=0,y=0;\n    for(int i=0;i<m;i++){\n        iin(num),iin(x),iin(y);\n        if(num>>1){\n            if(num&1){\n                printf(\"%llu\\n\",out(x,y,1)%p);\n            }\n            else{\n                lin(k);\n                jiaa(x,y,k%p,1);\n                k=0;\n            }\n        }\n        else{\n            lin(k);\n            chengg(x,y,k%p,1);\n            k=0;\n        }\n        num=x=y=0;\n    }\n    for(int i=1;i<=9;i++){\n//        printf(\"%lld \",vv[i]*cheng[i]+jia[i]*(rr[i]-ll[i]+1));\n    }\n    return 0;\n}\n```",
        "postTime": 1493118451,
        "uid": 27138,
        "name": "mrkrnblsa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u601d\u8def\u8ddf\u697c\u4e0bdalao\u516c\u5f0f\u4e00\u6837        \u4e58\u6cd5\u5206\u914d\u7387\n\n\u8bb0\u5f97\u4e58\u6cd5\u6807\u7b7e\u8981\u819c\uff01\uff01\uff01\uff01\uff01\u5426\u5219\u4f1a\u7206\n\n\u975e\u6307\u9488\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<iostream>\n#define ls (2*n)\n#define rs (2*n+1)\n#define mid ((l+r)/2)\n#define LL long long\n#include<cstring>\n#include<stack>\nusing namespace std;\nLL tree[1000000],a[1000000],lazy[1000000],tag[1000000];\nLL x,y,k,mod,n,m;\nvoid collect(LL n){tree[n]=tree[ls]+tree[rs];tree[n]%=mod;}\nvoid pushdown(LL n,LL l,LL r)\n{\n    if(tag[n]!=1)\n    {\n        tree[ls]*=tag[n];tree[ls]%=mod;\n        tree[rs]*=tag[n];tree[rs]%=mod;\n        lazy[ls]*=tag[n];lazy[ls]%=mod;\n        lazy[rs]*=tag[n];lazy[rs]%=mod;\n        tag[ls]*=tag[n];tag[ls]%=mod;\n        tag[rs]*=tag[n];tag[rs]%=mod;\n        tag[n]=1;\n    }\n    if(lazy[n]!=0)\n    {\n        tree[ls]+=lazy[n]*(mid-l+1);tree[ls]%=mod;\n        tree[rs]+=lazy[n]*(r-mid);tree[rs]%=mod;\n        lazy[ls]+=lazy[n];lazy[ls]%=mod;\n        lazy[rs]+=lazy[n];lazy[rs]%=mod;\n        lazy[n]=0;\n        return;\n    }\n    return;\n}\nvoid build(LL n,LL l,LL r)\n{\n   tag[n]=1;lazy[n]=0;\n   if(l==r){tree[n]=a[l];return;}\n   build(ls,l,mid);\n   build(rs,mid+1,r);\n   collect(n);\n}\nvoid multy(LL n,LL l,LL r,LL mul,LL mur,LL x)\n{\n    //printf(\"->%lld %lld %lld %lld\\n\",l,r,mul,mur);\n    if(mul==l&&mur==r){lazy[n]*=x;lazy[n]%=mod;tag[n]*=x;tag[n]%=mod;tree[n]*=x;tree[n]%=mod;return;}\n    pushdown(n,l,r);\n    if(mur<=mid)multy(ls,l,mid,mul,mur,x);\n    else if(mul>=mid+1)multy(rs,mid+1,r,mul,mur,x);\n    else\n    {\n        multy(ls,l,mid,mul,mid,x);\n        multy(rs,mid+1,r,mid+1,mur,x);\n    }\n    collect(n);\n}\nvoid add(LL n,LL l,LL r,LL addl,LL addr,LL x)\n{\n    if(addl==l&&addr==r){lazy[n]+=x;lazy[n]%=mod;tree[n]+=(r-l+1)*x;tree[n]%=mod;return;}\n    pushdown(n,l,r);\n    if(addr<=mid)add(ls,l,mid,addl,addr,x);\n    else if(addl>=mid+1)add(rs,mid+1,r,addl,addr,x);\n    else\n    {\n        add(ls,l,mid,addl,mid,x);\n        add(rs,mid+1,r,mid+1,addr,x);\n    }\n    collect(n);\n}\nLL ask(LL n,LL l,LL r,LL askl,LL askr)\n{\n    if(askl==l&&askr==r)\n    {\n        return tree[n];\n    }\n    pushdown(n,l,r);\n    LL res;\n    if(askr<=mid)res=ask(ls,l,mid,askl,askr)%mod;\n    else if(askl>=mid+1)res=ask(rs,mid+1,r,askl,askr)%mod;\n    else\n    {\n        res=ask(ls,l,mid,askl,mid)%mod+ask(rs,mid+1,r,mid+1,askr)%mod;\n    }\n    return res%mod;\n}\n/*void print(LL n,LL l,LL r)\n{\n    printf(\"l:%lld r:%lld node:%lld tag:%lld lazy:%lld num:%lld\\n\",l,r,n,tag[n],lazy[n],tree[n]);\n    if(l==r) return;\n    print(ls,l,mid);\n    print(rs,mid+1,r);\n}*/\nint main()\n{\n    cin>>n>>m>>mod;\n    for(int i=1;i<=n;i++)cin>>a[i];\n    build(1,1,n);\n    for(int i=1;i<=m;i++)\n    {\n        int tmpa;\n        cin>>tmpa;\n        if(tmpa==1){cin>>x>>y>>k;multy(1,1,n,x,y,k);}\n        else if(tmpa==2){cin>>x>>y>>k;add(1,1,n,x,y,k);}\n        else {cin>>x>>y;cout<<ask(1,1,n,x,y)<<endl;}\n        //print(1,1,n);\n    }\n}\n```",
        "postTime": 1492491519,
        "uid": 23388,
        "name": "kgrox",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u975e\u5e38\u6076\u5fc3\u7684debug\u4e2a\u4e86\u4e00\u4e2a\u5468\uff0c\u6700\u540e\u53d1\u73b0\u662f\u52a0\u4e58\u5408\u5e76\u7684\u65f6\u5019\u5c11\u5199\u4e86\uff01\uff01\uff01QWQ\n\n(ax+b)\\*c+d=a\\*c\\*x+b\\*c+d\uff0c\u533a\u95f4\u548c\u7684\u66f4\u65b0\u7565\u8fc7\uff0c\u4e58\u6cd5\u6807\u8bb0\\*c\uff0c\u52a0\u6cd5\u6807\u8bb0\\*c+d!!!\n\n\u9644\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n//luogu P3373\n#include<cstdio>\n#include<cstring>\n#define ull long long int\nusing namespace std;\nstruct segment{\n    ull plus_tag,times_tag,sumn;\n    int lef,rig;\n    segment *tc,*rc;\n}*root;\nint n,m;ull mod;\ninline int push_up(segment* &rt)\n{\n    rt->sumn=(rt->tc->sumn+rt->rc->sumn)%mod;\n    return 0;\n}\ninline int update_tags(segment* &rt,ull ptag,ull ttag)\n{\n    int s=rt->lef,t=rt->rig;\n    rt->times_tag=rt->times_tag*ttag%mod;\n    rt->plus_tag=(rt->plus_tag*ttag+ptag)%mod;\n    rt->sumn=(rt->sumn*ttag+ptag*(t-s+1))%mod;\n    return 0;\n}\ninline int push_down(segment* &rt)\n{\n    update_tags(rt->tc,rt->plus_tag,rt->times_tag);\n    update_tags(rt->rc,rt->plus_tag,rt->times_tag);\n    rt->plus_tag=0;rt->times_tag=1;return 0;\n}\nint build_segment(segment* &rt,int lef,int rig)\n{\n    rt=new segment;\n    rt->lef=lef;rt->rig=rig;\n    rt->plus_tag=0;rt->times_tag=1;\n    if(lef==rig)\n    {\n        scanf(\"%lld\",&rt->sumn);\n        return 0;\n    }\n    int mid=(lef+rig)/2;\n    build_segment(rt->tc,lef,mid);\n    build_segment(rt->rc,mid+1,rig);\n    push_up(rt);return 0;\n}\nint plus_segment(segment* &rt,int s,int t,ull val)\n{\n    int lef=rt->lef,rig=rt->rig;\n    if(s<=lef&&rig<=t)\n    {\n        rt->plus_tag=(rt->plus_tag+val)%mod;\n        rt->sumn=((ull)(rig-lef+1)*val%mod+rt->sumn)%mod;\n        return 0;\n    }\n    if(rt->plus_tag!=0||rt->times_tag!=1) push_down(rt);\n    int mid=(lef+rig)/2;\n    if(s<=mid) plus_segment(rt->tc,s,t,val);\n    if(mid<t) plus_segment(rt->rc,s,t,val);\n    push_up(rt);return 0;\n}\nint times_segment(segment* &rt,int s,int t,ull val)\n{\n    int lef=rt->lef,rig=rt->rig;\n    if(s<=lef&&rig<=t)\n    {\n        rt->times_tag=val*rt->times_tag%mod;\n        rt->plus_tag=val*rt->plus_tag%mod;\n        rt->sumn=rt->sumn*val%mod;\n        return 0;\n    }\n    if(rt->plus_tag!=0||rt->times_tag!=1) push_down(rt);\n    int mid=(lef+rig)/2;\n    if(s<=mid) times_segment(rt->tc,s,t,val);\n    if(mid<t) times_segment(rt->rc,s,t,val);\n    push_up(rt);return 0;\n}\null query_segment(segment* &rt,int s,int t)\n{\n    int lef=rt->lef,rig=rt->rig;\n    if(s<=lef&&rig<=t) return rt->sumn%mod;\n    if(rt->plus_tag!=0||rt->times_tag!=1) push_down(rt);\n    int mid=(lef+rig)/2;ull ans=0;\n    if(s<=mid) ans=(ans+query_segment(rt->tc,s,t))%mod;\n    if(mid<t) ans=(ans+query_segment(rt->rc,s,t))%mod;\n    push_up(rt);return ans%mod;\n}\nint main()\n{\n    scanf(\"%d%d%lld\",&n,&m,&mod);\n    build_segment(root,1,n);\n    int opt,u,v;\n    ull val;\n    while(m--)\n    {\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            scanf(\"%d%d%lld\",&u,&v,&val);\n            times_segment(root,u,v,val);\n        }\n        else if(opt==2)\n        {\n            scanf(\"%d%d%lld\",&u,&v,&val);\n            plus_segment(root,u,v,val);\n        }\n        else{\n            scanf(\"%d%d\",&u,&v);\n            printf(\"%lld\\n\",query_segment(root,u,v)%mod);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1489756011,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u591a\u4e2alazy\u6807\u8bb0\u7684\u5e94\u7528\u3002\n\n\u6bcf\u4e2a\u70b9\u4e0a\u7684\u6807\u8bb0\u8868\u793a\u81ea\u5df1\u513f\u5b50\u8981\u4e58\u6216\u52a0\u4e0a\u591a\u5c11\u3002\n\n\u6807\u8bb0\u4e0b\u653e\u65f6\uff0c\u513f\u5b50\u8282\u70b9\u7684add\u6807\u8bb0\u5148\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7684\u4e58\u6807\u8bb0\u518d\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u7684\u52a0\u6807\u8bb0\uff08\u56e0\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u52a0\u6807\u8bb0\u5df2\u7ecf\u4e58\u4e0a\u4e86\u4e00\u4e9b\u4e58\u6807\u8bb0\u4e86\uff0c\u4e0d\u9700\u8981\u518d\u4e58\u4e00\u6b21\uff09\n\n\u513f\u5b50\u8282\u70b9\u7684\u503c\u540c\u4e0a\u3002\n\n\u513f\u5b50\u8282\u70b9\u7684\u4e58\u6807\u8bb0\u76f4\u63a5\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7684\u4e58\u6807\u8bb0\u3002\n\n\u4fee\u6539\u503c\u7684\u65f6\u5019\u8981\u6839\u636e\u4e0b\u653e\u6807\u8bb0\u4e0e\u4fee\u6539\u503c\u7684\u5148\u540e\u6b21\u5e8f\u8fdb\u884c\u5fae\u8c03\u3002\n\n\u5c31\u662f\u8fd9\u6837\u3002\n\n\uff08\u4f60\u62f7\u8d1d\u4ee3\u7801\u4f1aWA\u7684\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct xds{\n    int l,r;\n    long long val,add,time;\n};\nint n,m,p,i,opt,x,y,k,ans;\nlong long a[100001];\nxds t[400001];\nvoid make(int l,int r,int k){\n    t[k].time=1;\n    t[k].l=l;\n    t[k].r=r;\n    if (l==r){\n        t[k].val=a[l];\n        return;\n    }\n    int mid=(l+r)/2;\n    make(l,mid,k*2);\n    make(mid+1,r,k*2+1);\n    t[k].val=(t[k*2].val+t[k*2+1].val)%p;\n}\nvoid down(int k){\n    if (t[k].l<t[k].r){\n        t[k*2].add=(t[k*2].add*t[k].time+t[k].add)%p;\n        t[k*2+1].add=(t[k*2+1].add*t[k].time+t[k].add)%p;\n        t[k*2].time=(t[k*2].time*t[k].time)%p;\n        t[k*2+1].time=(t[k*2+1].time*t[k].time)%p;\n        t[k*2].val=(t[k*2].val*t[k].time+t[k].add*(t[k*2].r-t[k*2].l+1))%p;\n        t[k*2+1].val=(t[k*2+1].val*t[k].time+t[k].add*(t[k*2+1].r-t[k*2+1].l+1))%p;\n    }\n    t[k].add=0;\n    t[k].time=1;\n}\nvoid ch_a(int k,int a){\n    if (t[k].r<x||t[k].l>y) return;\n    if (t[k].l>=x&&t[k].r<=y){\n        t[k].add=(t[k].add+a)%p;\n        t[k].val=(t[k].val+a*(t[k].r-t[k].l-1))%p;\n        return;\n    }\n    if (t[k].add!=0||t[k].time!=1) down(k);\n    ch_t(k*2,a);\n    ch_t(k*2+1,a);\n    t[k].val=(t[k*2].val+t[k*2+1].val)%p;\n}\nvoid ch_t(int k,int a){\n    if (t[k].r<x||t[k].l>y) return;\n    if (t[k].l>=x&&t[k].r<=y){\n        t[k].time=(t[k].time*a)%p;\n        t[k].add=(t[k].add*a)%p;\n        t[k].val=(t[k].val*a)%p;\n        return;\n    }\n    if (t[k].add!=0||t[k].time!=1) down(k);\n    ch_t(k*2,a);\n    ch_t(k*2+1,a);\n    t[k].val=(t[k*2].val+t[k*2+1].val)%p;\n}\nvoid ask(int k){\n    if (t[k].r<x||t[k].l>y) return;\n    if (t[k].l>=x&&t[k].r<=y){\n        ans=(ans+t[k].val)%p;\n        return;\n    }\n    if (t[k].add!=0||t[k].time!=1) down(k);\n    ask(k*2);\n    ask(k*2+1);\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for (i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    make(1,n,1);\n    for (i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        switch (opt){\n            case 1:{\n                scanf(\"%d\",&k);\n                ch_t(1,k%p);\n                break;\n            }\n            case 2:{\n                scanf(\"%d\",&k);\n                ch_a(1,k%p);\n                break;\n            }\n            case 3:{\n                ans=0;\n                ask(1);\n                printf(\"%d\\n\",ans);\n                break;\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1489579342,
        "uid": 13940,
        "name": "pupuvovovovovo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u6211\u6765\u53d1\u4e00\u4e2aC++\u9898\u89e3\u5427\uff0c\n\n\u4e5f\u662f\u53d7\u4e86p\u515a\u9898\u89e3\u7684\u542f\u53d1\uff0c\u7528\u4e86**\u4e24\u4e2alazy\u6807\u8bb0\u5404\u5b58\u52a0\u6cd5\u548c\u4e58\u6cd5\u7ed3\u679c**\n\n\u5927\u5bb6\u53ef\u80fd\u89c9\u5f97pushdown()\u90e8\u5206\u8fc7\u4e8e\u5197\u957f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a**%p**\u4e3a\u4e86\u9632\u70b8\uff0c\u800c\u4e14lazy1,lazy2\u66f4\u65b0\u65f6\uff0c\u90fd\u9700\u8981\u8c03\u7528\u7238\u7238\u8282\u70b9\u7684lazy1,lazy2\uff0c\u6240\u4ee5\u4e0d\u80fd\u5199\u6210\u5355\u72ec\u7684\u52a0\u6cd5\u66f4\u65b0\u548c\u4e58\u6cd5\u66f4\u65b0\uff0c\u4e0d\u7136\u4f1aWA\uff08\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff09\u3002\n\n\u7136\u800c\u5efa\u8bae\u628a**\u52a0\u6cd5\u4fee\u6539\u548c\u4e58\u6cd5\u4fee\u6539\u5206\u5f00\u5199**\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\n\n\u6700\u540e\u4e00\u6761\u2014\u2014\n\n**\\_\u4e0d\u8981\u8bd5\u56fe\u63d0\u4ea4\u672c\u9898\u89e3\u6240\u63d0\u4f9b\u7684\u4ee3\u7801\uff0c\u9664\u975e\u60a8\u662f\u7384\u5b66\u5927\u4f6c\uff08\u8bef\uff09\uff0c\u5426\u5219\u6781\u6709\u53ef\u80fd\u4f1aT\u6389\u6700\u540e\u4e09\u4e2a\u70b9\uff08\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff09\\_**\n\n```cpp\n//%std\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,p;\n\nlong long a[500200],f[500200];\n\nstruct tree\n{\n    long long l,r,sum,lazy1,lazy2;\n} t[500200];\n\nvoid buildtree(int l,int r,int i)\n{\n    int zuo=i<<1;\n    t[i].l=l;\n    t[i].r=r;\n    t[i].lazy1=0;\n    t[i].lazy2=1;\n    if(l==r)\n        t[i].sum=a[l];\n    else\n    {\n        int mid=(l+r)>>1;\n        buildtree(l,mid,zuo);\n        buildtree(mid+1,r,zuo|1);\n        t[i].sum=t[zuo].sum+t[zuo|1].sum;\n    }\n    return;\n}\n\nvoid pushdown(int i)\n{\n    int zuo=i<<1;\n    if(t[i].lazy1==0&&t[i].lazy2==1)    return;\n    if(t[i].l==t[i].r)\n    {\n        t[i].lazy2=1;\n        t[i].lazy1=0;\n        return;\n    }\n    t[zuo].sum=(t[zuo].sum*t[i].lazy2+t[i].lazy1*(t[zuo].r-t[zuo].l+1))%p;\n    t[zuo|1].sum=(t[zuo|1].sum*t[i].lazy2+t[i].lazy1*(t[zuo|1].r-t[zuo|1].l+1))%p;\n    t[zuo].lazy2=t[zuo].lazy2*t[i].lazy2%p;\n    t[zuo].lazy1=(t[zuo].lazy1*t[i].lazy2+t[i].lazy1)%p;\n    t[zuo|1].lazy2=t[zuo|1].lazy2*t[i].lazy2%p;\n    t[zuo|1].lazy1=(t[zuo|1].lazy1*t[i].lazy2+t[i].lazy1)%p;\n    t[i].lazy2=1;\n    t[i].lazy1=0;\n    return;\n}\n\nvoid xiu_1(int i,int l,int r,long long add)\n{\n    pushdown(i);\n    int zuo=i<<1;\n    if(l<=t[i].l&&r>=t[i].r)\n    {\n        t[i].sum+=(t[i].r-t[i].l+1)*add%p;\n        t[i].lazy1=add%p;\n        return;\n    }\n    if(l>t[i].r||r<t[i].l)\n        return;\n    xiu_1(zuo,l,r,add);\n    xiu_1(zuo|1,l,r,add);\n    t[i].sum=(t[zuo].sum+t[zuo|1].sum)%p;\n    return;\n}\n\nvoid xiu_2(int i,int l,int r,long long add)\n{\n    int zuo=i<<1;\n    pushdown(i);\n    if(l<=t[i].l&&r>=t[i].r)\n    {\n        t[i].sum=t[i].sum*add%p;\n        t[i].lazy2=add%p;\n        return;\n    }\n    if(l>t[i].r||r<t[i].l)\n        return;\n    xiu_2(zuo,l,r,add);\n    xiu_2(zuo|1,l,r,add);\n    t[i].sum=(t[zuo].sum+t[zuo|1].sum)%p;\n    return;\n}\n\nlong long query(int i,int l,int r)\n{\n    int zuo=i<<1;\n    if(l<=t[i].l&&r>=t[i].r)\n        return t[i].sum;\n    if(l>t[i].r||r<t[i].l)\n        return 0;\n    pushdown(i);\n    return query(zuo,l,r)+query(zuo|1,l,r);\n}\n\nlong long lread()\n{\n    long long f=1,n=0;\n    char c=getchar();\n    while(c>'9'||c<'0')\n    {\n        if(c=='-')\n            f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0')\n    {\n        n*=10;\n        n+=c-'0';\n        c=getchar();\n    }\n    return n*f;\n}\n\nint read()\n{\n    int f=1,n=0;\n    char c=getchar();\n    while(c>'9'||c<'0')\n    {\n        if(c=='-')\n            f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0')\n    {\n        n*=10;\n        n+=c-'0';\n        c=getchar();\n    }\n    return n*f;\n}\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for(int i=1; i<=n; i++)\n        a[i]=lread();\n    buildtree(1,n,1);\n    for(int i=1; i<=m; i++)\n    {\n        int key;\n        scanf(\"%d\",&key);\n        if(key==1)\n        {\n            int x=read(),y=read(),k=read();\n            xiu_2(1,x,y,k);\n        }\n        else if(key==2)\n        {\n            int x=read(),y=read(),k=read();\n            xiu_1(1,x,y,k);\n        }\n        else\n        {\n            int x=read(),y=read();\n            printf(\"%d\\n\",query(1,x,y)%p);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1489214127,
        "uid": 22108,
        "name": "Leoo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u7528\u7ebf\u6bb5\u6811\uff0c\u5ef6\u8fdf\u4fee\u6539lazy-tag\n\n\u7528\u4e24\u4e2a\u533a\u95f4\u6807\u8bb0\uff0c\u4e58\u6cd5\u6807\u8bb0\u548c\u52a0\u6cd5\u6807\u8bb0\n\n\u6ce8\u610fc(ax+b)=acx+bc\u5c31\u884c\u4e86\n\n\u8fd8\u6709\uff0c\u8fb9\u505a\u8fb9mod p\uff0c\u4e0d\u7136\u4e5f\u8bb8\u4f1a\u7206\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u7206\uff09\n\n\u6211\u53ef\u662fpascal\n\n\u4ee3\u7801:\n\n```cpp\nprogram rrr(input,output);\ntype\n  tree=record\n     l,r,sum,mul,plus:longint;   //sum\u533a\u95f4\u548c\uff0cmul\u4e58\u6807\u8bb0\uff0cplus\u52a0\u6807\u8bb0\n  end;\nvar\n  n,m,p,i,t,x,y,d:longint;\n  a:array[0..400040]of tree;\n  num:array[0..100010]of longint;\nprocedure build(k,l,r:longint);        //\u5efa\u6811\nvar\n  i,mid:longint;\nbegin\n   a[k].l:=l;a[k].r:=r;a[k].mul:=1;a[k].plus:=0;\n   if l=r then begin a[k].sum:=num[l];exit; end;\n   i:=k<<1;mid:=(l+r)>>1;\n   build(i,l,mid);\n   build(i+1,mid+1,r);\n   a[k].sum:=a[i].sum+a[i+1].sum;\nend;\nprocedure pushdown(k:longint);   //\u6807\u8bb0\u4e0b\u4f20\nvar\n  i:longint;\nbegin\n   if (a[k].mul=1) and (a[k].plus=0) then exit;\n   if a[k].l=a[k].r then begin a[k].mul:=1;a[k].plus:=0;exit; end;\n   i:=k<<1;\n   a[i].sum:=(a[i].sum*a[k].mul+a[k].plus*(a[i].r-a[i].l+1)) mod p;\n   a[i+1].sum:=(a[i+1].sum*a[k].mul+a[k].plus*(a[i+1].r-a[i+1].l+1)) mod p;\n   a[i].mul:=a[i].mul*a[k].mul mod p;\n   a[i].plus:=(a[i].plus*a[k].mul+a[k].plus) mod p;\n   a[i+1].mul:=a[i+1].mul*a[k].mul mod p;\n   a[i+1].plus:=(a[i+1].plus*a[k].mul+a[k].plus) mod p;\n   a[k].mul:=1;a[k].plus:=0;\nend;\nprocedure changemul(k:longint);   //\u4e58\u6cd5\u4fee\u6539\nvar\n  i,mid:longint;\nbegin\n   pushdown(k);\n   if (x<=a[k].l) and (a[k].r<=y) then\n       begin\n          a[k].sum:=a[k].sum*d mod p;\n          a[k].mul:=d mod p;\n          exit;\n       end;\n   mid:=(a[k].l+a[k].r)>>1;i:=k<<1;\n   if x<=mid then changemul(i);\n   if mid<y then changemul(i+1);\n   a[k].sum:=(a[i].sum+a[i+1].sum) mod p;\nend;\nprocedure changeplus(k:longint);   //\u52a0\u6cd5\u4fee\u6539\nvar\n  i,mid:longint;\nbegin\n   pushdown(k);\n   if (x<=a[k].l) and (a[k].r<=y) then\n       begin\n          a[k].sum:=(a[k].sum+d*(a[k].r-a[k].l+1)) mod p;\n          a[k].plus:=d mod p;\n          exit;\n       end;\n   mid:=(a[k].l+a[k].r)>>1;i:=k<<1;\n   if x<=mid then changeplus(i);\n   if mid<y then changeplus(i+1);\n   a[k].sum:=(a[i].sum+a[i+1].sum) mod p;\nend;\nfunction ask(k:longint):longint;   //\u8be2\u95ee\nvar\n  i,mid:longint;\nbegin\n   pushdown(k);\n   if (x<=a[k].l) and (a[k].r<=y) then exit(a[k].sum);\n   ask:=0;\n   mid:=(a[k].l+a[k].r)>>1;i:=k<<1;\n   if x<=mid then ask:=ask(i);\n   if mid<y then ask:=ask+ask(i+1);\n   exit(ask mod p);\nend;\nbegin\n   //assign(input,'r.in');assign(output,'r.out');reset(input);rewrite(output);\n   readln(n,m,p);\n   for i:=1 to n do read(num[i]);\n   build(1,1,n);\n   //for i:=1 to 10 do writeln(a[i].l,' ',a[i].r,' ',a[i].sum,' ',a[i].mul,' ',a[i].plus);writeln;\n   for i:=1 to m do\n       begin\n          read(t,x,y);\n          //writeln(t,' ',x,' ',y);\n          if t=1 then begin read(d);changemul(1); end;\n          if t=2 then begin read(d);changeplus(1); end;\n          if t=3 then writeln(ask(1));\n          //for j:=1 to 10 do writeln(a[j].l,' ',a[j].r,' ',a[j].sum,' ',a[j].mul,' ',a[j].plus);writeln;\n       end;\n   //close(input);close(output);\nend.\n```",
        "postTime": 1483101999,
        "uid": 28023,
        "name": "McGrady",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "~~\uff08\u8fd9\u662f\u4e00\u9053\u8d85\u7ea7\u6c34\u7684\u6a21\u677f\u9898\uff09~~\n\n\u770b\u5230\u597d\u591a\u7528\u8fd0\u7b97\u4f18\u5148\u7ea7\u5f3a\u5236\u8f6c\u5316\u7684\u9898\u89e3\uff0c\u611f\u89c9\u633a\u5de7\u5999\u7684\uff0c\u4f46\u662f\u6211\u770b\u5230\u8fd9\u4e2a\u9898\u7684\u65f6\u5019\uff0c\u5b8c\u5168\u6ca1\u5f80\u8fd9\u4e0a\u9762\u60f3\n\n~~\uff08\u5c31\u662f\u5b8c\u5168\u6ca1\u60f3\u5230\uff09~~\n\n\u7136\u540e\u6211\u60f3\u8d77\u4e86\u4e00\u6761\u4ee5\u524d\u505a\u7684\u7cbe(sang)\u5999(xin)\u7edd(bing)\u4f26(kuang)\u7684\u9898\u76ee\uff0c\u90a3\u6761\u9898\u76ee\u8981\u7ef4\u62a4\u4e09\u4e2a\u533a\u95f4\u548c\uff0c\u597d\u591a\u4fee\u6539\u64cd\u4f5c\uff0c\u5929\u771f\u7684\u6211\u7ebf\u6bb5\u6811WA\u6210\u4e86**......\n\n\u8a00\u5f52\u6b63\u4f20\u6765\u8bb2\u8bb2\u8fd9\u9053\u9898\n\n\u5b9e\u9645\u4e0a\uff0c\u672c\u9898\u7684\u96be\u70b9\u5728\u4e8e\u52a0\u6cd5\u64cd\u4f5c\u4e0e\u4e58\u6cd5\u64cd\u4f5c\u4ea4\u66ff\u8fdb\u884c\u65f6\u7684\u8fd0\u7b97\u987a\u5e8f\u4f1a\u4e71\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u8fd0\u7b97\u4f18\u5148\u7ea7\u89c4\u5b9a\u7684\u60f3\u6cd5\n\n\u4f46\u662f\u2014\u2014\n\n\u5047\u5982\u518d\u6765\u51e0\u4e2a\u64cd\u4f5c\u4e0d\u5c31\u5f88\u96be\u5904\u7406\u4e86\u5417\n\n\u6240\u4ee5\uff0c\u6211\u8981\u505a\u7684\u662f\u2014\u2014\u5c06\u64cd\u4f5c\u7edf\u4e00\uff01\n\n\u600e\u4e48\u7edf\u4e00\uff1f\n\n# \u77e9\u9635\u4e58\u6cd5\uff01\n\n\n\n-----------------------------------------------\u5206\u5272\u7ebf----------------------------------------------\n\n\n\u524d\u7f6e\u77e5\u8bc6\u65f6\u95f4\uff1a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\n\n\n\u57fa\u672c\u6982\u5ff5\u8bf7\u53f3\u8f6c[P1939 \u77e9\u9635\u52a0\u901f](https://www.luogu.org/problem/P1939)\uff08\u53c8\u662f\u6a21\u677f\u9898.jpg\uff09\n\n\n\u597d\u4e86\uff0c\u5b66\u5b8c\u77e9\u9635\u4e58\u6cd5\u7684\u4f60\u5e94\u8be5\u660e\u767d\u4e86\u5b83\u7684\u57fa\u672c\u6027\u8d28\uff0c\u90a3\u4e48\uff0c\u7ebf\u6bb5\u6811\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\u5462\uff1f\n\n\u7531\u4e8e\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u6bb5\u6811\u4e2d\u7684\u4fe1\u606f\uff0c\u61d2\u6807\u8bb0\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u90fd\u6539\u4e3a\u4ee5\u77e9\u9635\u5b9e\u73b0\n\n\u4e3e\u4e2a\u4f8b\u5b50\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u8868\u683c\n\n| s1| s2 |\n| -----------: | -----------:    \n| s3| s4 |\n\n\u8868(1)\n\n\u800c\u6bcf\u6b21\u7684\u4fee\u6539\u64cd\u4f5c\u4e3a\u533a\u95f4\u4e58\u4e0a\n\n|  a1| a2 |\n| -----------: | -----------: |\n| a3 | a4 |\n\n\u8868(2)\n\n\u90a3\u4e48\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u8fd9\u6837\u4e3a\u7684\u4e00\u4e2a\u8868\u683c\n\n\n| laz1|laz2 |\n| -----------: | -----------: |\n|laz3| laz4|\n\n\u8868(3)\n\n\u5f53\u6574\u4f53\u4fee\u6539\u533a\u95f4\u65f6\u7528(1)\u4e0e(2)\u5206\u522b\u4e58(3)\n\n\u800c\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u5373\u540c\u6837\u7c7b\u4f3c\u4e8e\u4fee\u6539\u64cd\u4f5c\u8fdb\u884c\u4e58\u6cd5\n\n\u4e0a\u4f20\u5b50\u8282\u70b9\u4fe1\u606f\u76f4\u63a5\u628a\u5b50\u8282\u70b9\u4fe1\u606f\u52a0\u7ed9\u7236\u4eb2\u8282\u70b9\u5373\u53ef\n\n\uff08\u5176\u5b9e\u8bf4\u767d\u4e86\u5c31\u662f\u628a\u539f\u6765\u7684\u52a0\u6cd5\u7b49\u64cd\u4f5c\u6539\u6210\u77e9\u9635\u4e58\u6cd5\u5373\u53ef\uff09\n\n\u81f3\u4e8e\u6b63\u786e\u6027\uff0c\u7531\u4e8e\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u90a3\u4e48\u5728\u77e9\u9635\u4e58\u6cd5\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5c06\u591a\u4e2a\u77e9\u4e58\u7684\u64cd\u4f5c\u5148\u4e58\u5728\u6807\u8bb0\u4e0a\uff0c\u7136\u540e\u4e0b\u4f20\u7684\u65f6\u5019\u518d\u4e58\u5728\u7ebf\u6bb5\u6811\u7684\u5b50\u8282\u70b9\u4e0a\uff0c\u8fd9\u6837\u5b50\u4e0e\u66b4\u529b\u5904\u7406\u65f6\uff0c\u4e00\u4e2a\u4e00\u4e2a\u4e58\u6bd4\u8f83\uff0c\u663e\u7136\u5c31\u662f\u8fd0\u7528\u4e86\u4e00\u4e2a\u7ed3\u5408\u5f8b\n\n\n-----------------------------------------------\u5206\u5272\u7ebf----------------------------------------------\n\n\n\u6eda\u56de\u6765\u8bb2\u8fd9\u9053\u9898\n\n\u4e0a\u6587\u8bf4\u5230\u6211\u4eec\u8981\u7edf\u4e00\u64cd\u4f5c\uff0c\u8bb2\u4e86\u8fd9\u4e48\u591a\u60f3\u6cd5\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\n\n# \u6784\u9020\u77e9\u9635\uff01\n\n\n\u89c2\u5bdf\u5230\u672c\u9898\u7531\u4e58\u6cd5\u4e0e\u52a0\u6cd5\u6784\u6210\uff0c\u56e0\u6b64\u6211\u4eec\u8ba1\u7b97\u65f6\u7528\u5230\u7684\u503c\u4e3a\u539f\u6765\u7684\u533a\u95f4\u548c\u4ee5\u53ca\u533a\u95f4\u957f\u5ea6 ~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u90a3\u4e48\u6211\u4eec\u6784\u9020\u77e9\u9635\n\n| s|l|\n| -----------: | -----------: |\n\n\ns\u4ee3\u8868\u7ef4\u62a4\u7684\u533a\u95f4\u548c\uff0cl\u4ee3\u8868\u8be5\u533a\u95f4\u7684\u957f\u5ea6\n\n\n\u800c\u6bcf\u6b21\u7684\u4fee\u6539\u64cd\u4f5c\u4e5f\u662f\u4e58\u4e0a\u4e00\u4e2a\u77e9\u9635\n\n\u4f8b\u5982\u52a0\u6cd5\n\n| 1| 0|\n| -----------: | -----------: |\n| x| 1|\n\n\u800c\u4e58\u6cd5\u7684\u77e9\u9635\u957f\u8fd9\u6837\n\n| x| 0|\n| -----------: | -----------: |\n| 0| 1|\n\n\u6bcf\u4e2a\u70b9\u7684\u61d2\u6807\u8bb0\u4e5f\u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u521d\u59cb\u5982\u4e0b\n\n| 1|0  |\n| -----------: | -----------: |\n| 0 | 1 |\n\n\n\uff08\u4e3a\u4e86\u4fdd\u8bc1\u8be5\u77e9\u9635\u4e3a\u4e00\u4e2a\u201c1\u201d\u503c\uff0c\u5373\u4e58\u4e0a\u4ee5\u540e\u4e0d\u53d8\uff09\n\n\uff08\u4e0a\u9762\u51e0\u4e2a\u77e9\u9635\u4e58\u4e0b\u6765\u7684\u7ed3\u679c\u8bf7\u8bfb\u8005\u81ea\u884c\u9a8c\u8bc1\uff09\n\n\u90a3\u4e48\u6309\u7167\u4e0a\u6587\u6240\u8bf4\u628a\u5e38\u89c4\u7684\u7ebf\u6bb5\u6811\u52a0\u6cd5\u6539\u6210\u77e9\u9635\u4e58\u6cd5\u5373\u53ef\n\n\u8fd9\u79cd\u505a\u6cd5\u7ef4\u62a4\u4e4b\u540e\u5c31\u53ef\u4ee5\u5c06\u64cd\u4f5c\u5b8c\u5168\u7edf\u4e00\u5566\uff0c\u8fd9\u6837\u5b50\u5c31\u518d\u4e5f\u4e0d\u7528\u70e6\u5148\u52a0\u8fd8\u662f\u5148\u4e58\u4e86\uff0c\u5927\u5bb6\u90fd\u662f\u77e9\u4e58\uff0c\u5e73\u7b49\u5bf9\u5f85 ~~(\u8fd8\u53ef\u4ee5\u5c11\u5199\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c)~~\n\n### \uff08\u6ce8\u610f\uff1a\u5728\u5b50\u8282\u70b9\u4fe1\u606f\u5408\u5e76\u65f6\u5f53\u7136\u662f\u76f4\u63a5\u76f8\u52a0\u4e0a\u4f20\u4e86\uff0c\u522b\u60f3\u592a\u591a......\uff09\n\nPS\uff1a1.\u77e9\u4e58\u5e38\u6570\u5de8\u5927\uff0c\u7528\u5faa\u73af\u8fc7\u4e0d\u4e86\uff0c\u6240\u4ee5\u5f97\u628a\u5faa\u73af\u62c6\u5f00,\u8be6\u89c1\u4ee3\u7801\n\n   ~~2.\u7801\u98ce\u7565\u4e11\u5c06\u5c31\u7740\u770b\u770b~~\n\n# \u5b8c\u7ed3\u6492\u82b1\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010 \n#define ll long long\n#define inf 0x3f3f3f3f\nusing namespace std;\nstruct node{\n\tint l,r;\n\tll s[2],p[2][2];\n};\nnode tr[maxn<<2];\nll a[maxn];\nint n,m,p;\nvoid build(int x,int l,int r)\n{\n\ttr[x].l=l;\n\ttr[x].r=r;\n\ttr[x].p[0][0]=1,tr[x].p[0][1]=0,tr[x].p[1][0]=0,tr[x].p[1][1]=1;\n\tif(l==r)\n\t{\n\t\ttr[x].s[0]=a[l];\n\t\ttr[x].s[1]=1;\n\t\treturn;\n\t}\n\tint mid=l+r>>1,lc=x<<1,rc=x<<1|1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\ttr[x].s[0]=(tr[lc].s[0]+tr[rc].s[0])%p;\n\ttr[x].s[1]=r-l+1;\n}\nvoid calc1(ll a[2],ll b[2][2])\n{\n\tll tmp[2]={0,0};\n\ttmp[0]=(a[0]*b[0][0]+a[1]*b[1][0])%p;\n\ttmp[1]=(a[0]*b[0][1]+a[1]*b[1][1])%p;\n\ta[0]=tmp[0];\n\ta[1]=tmp[1];\n}\nvoid calc2(ll a[2][2],ll b[2][2])\n{\n\tll tmp[2][2];\n\ttmp[0][0]=(a[0][0]*b[0][0]+a[0][1]*b[1][0])%p;\n\ttmp[0][1]=(a[0][0]*b[0][1]+a[0][1]*b[1][1])%p;\n\ttmp[1][0]=(a[1][0]*b[0][0]+a[1][1]*b[1][0])%p;\n\ttmp[1][1]=(a[1][0]*b[0][1]+a[1][1]*b[1][1])%p;\n\ta[0][0]=tmp[0][0];\n\ta[0][1]=tmp[0][1];\n\ta[1][0]=tmp[1][0];\n\ta[1][1]=tmp[1][1];\n}\nvoid down(int x)\n{\n\tif(tr[x].p[0][0]==1&&tr[x].p[0][1]==0&&tr[x].p[1][0]==0&&tr[x].p[1][1]==1) return;\n\tint mid=tr[x].l+tr[x].r>>1,lc=x<<1,rc=x<<1|1;\n\tcalc1(tr[lc].s,tr[x].p);\n\tcalc1(tr[rc].s,tr[x].p);\n\tcalc2(tr[lc].p,tr[x].p);\n\tcalc2(tr[rc].p,tr[x].p);\n\ttr[x].p[0][0]=1,tr[x].p[0][1]=0,tr[x].p[1][0]=0,tr[x].p[1][1]=1;\n}\nvoid add(int x,int l,int r,ll v[2][2])\n{\n\tif(l<=tr[x].l&&tr[x].r<=r)\n\t{\n\t\tcalc1(tr[x].s,v);\n\t\tcalc2(tr[x].p,v);\n\t\treturn;\n\t}\n\tdown(x);\n\tint mid=tr[x].l+tr[x].r>>1,lc=x<<1,rc=x<<1|1;\n\tif(l<=mid) add(lc,l,r,v);\n\tif(mid<r) add(rc,l,r,v);\n\ttr[x].s[0]=(tr[lc].s[0]+tr[rc].s[0])%p;\n}\nll query(int x,int l,int r)\n{\n\tif(l<=tr[x].l&&tr[x].r<=r) return tr[x].s[0];\n\tdown(x);\n\tint mid=tr[x].l+tr[x].r>>1,lc=x<<1,rc=x<<1|1;\n\tll tmp=0;\n\tif(l<=mid) tmp=query(lc,l,r);\n\tif(mid<r) tmp+=query(rc,l,r);\n\treturn tmp%p;\n}\nint main()\n{\n\tscanf(\"%d%d%lld\",&n,&m,&p);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint op,l,r;\n\t\tll x;\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tscanf(\"%d%d%lld\",&l,&r,&x);\n\t\t\tll v[2][2]={x,0,0,1};\n\t\t\tadd(1,l,r,v);\n\t\t}\n\t\tif(op==2)\n\t\t{\n\t\t\tscanf(\"%d%d%lld\",&l,&r,&x);\n\t\t\tll v[2][2]={1,0,x,1};\n\t\t\tadd(1,l,r,v);\n\t\t}\n\t\tif(op==3)\n\t\t{\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",query(1,l,r));\n\t\t}\n\t}\n}\n\n```\n",
        "postTime": 1573047983,
        "uid": 41542,
        "name": "egret",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u672c\u9898\u7684\u6284\u9898\u89e3\u73b0\u8c61\u975e\u5e38\u4e25\u91cd\uff0c\u56e0\u4e3a\u6211\u786e\u5b9e\u770b\u5230\u8fc7\u4e0d\u5c11\u7ebf\u6bb5\u6811\u6a21\u677f\u90fd\u9ed8\u4e0d\u51fa\u6765\u7684\u4ebaAC\u4e86\u8fd9\u9053\u9898\uff0c\u800c\u672c\u9898\u7684\u96be\u5ea6\u663e\u7136\u662f\u8981\u9ad8\u4e0a\u4e0d\u5c11\u7684\n\n* \u5efa\u6811\n\n\u548c\u7ebf\u6bb5\u68111\u4e00\u6837\uff0c\u4e0d\u8fc7\u5efa\u8bae\u5904\u7406\u4e00\u4e2alen\uff0c\u8868\u793a\u533a\u95f4\u957f\u5ea6\uff0c\u8fd9\u6837pushdown\u7684\u65f6\u5019\u5199\u8d77\u6765\u8212\u670d\u3002\u53e6\u5916\uff0c\u672c\u9898\u9700\u8981\u4e24\u4e2alazy\uff0c**\u4e58lazy\u4e00\u5f00\u59cb\u662f1**\n\n* \u533a\u95f4\u52a0\n\n\u8fd9\u4e2a\u64cd\u4f5c\u4e0e\u4e58\u663e\u7136\u6ca1\u6709\u5173\u7cfb\uff0c\u53ea\u8981\u627e\u5230\u6307\u5b9a\u533a\u95f4\u6253\u4e2alazy\uff0c\u5176\u4ed6\u533a\u95f4\u76f4\u63a5\u66f4\u65b0\u503c\u5c31\u884c\u4e86\n\n* \u67e5\u8be2\n\n\u8fd9\u4e2a\u64cd\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u548c\u7ebf\u6bb5\u68111\u4e00\u6837\uff0c\u4e0d\u591a\u8bb2\n\n* pushdown\n\n\u6bd2\u7624\u64cd\u4f5c\uff0c\u770b\u4e00\u773c\u5c31\u77e5\u9053\u8981\u4e0b\u4f20\u533a\u95f4\u548c\uff0c\u4e24\u4e2alazy\n\n**\u533a\u95f4\u548c:**\n\n\u672c\u6765\u8fd9\u4e2a\u533a\u95f4\u7684\u503c\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u8fdb\u884c\u7236\u8282\u70b9\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u6240\u4ee5\u5c31\u662f\uff1a\n\n$tree[ls].val = tree[ls].val * tree[rt].lazy[0] + tree[rt].lazy[1] * tree[ls].len$\n\n$tree[rs].val = tree[rs].val * tree[rt].lazy[0] + tree[rt].lazy[1] * tree[rs].len$\n\n$lazy[0]$\u662f\u4e58\u6cd5\uff0c$lazy[1]$\u662f\u52a0\u6cd5\n\n\u6ce8\u610f\u52a0\u662f\u8981\u4e58\u4e0a\u957f\u5ea6\u7684\uff0c\u8fd9\u91cc\u6700\u5bb9\u6613\u9519\n\n**\u4e58\u6cd5lazy**\n\n\u672c\u6765\u8fd9\u4e2a\u533a\u95f4\u7684\u4e58lazy\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u8fdb\u884c\u8fc7\u7236\u8282\u70b9\u7684\u4e58\uff0c\u6240\u4ee5\uff1a\n\n$tree[ls].lazy[0] = tree[ls].lazy[0] * tree[rt].lazy[0]$\n\n$tree[rs].lazy[0] = tree[rs].lazy[0] * tree[rt].lazy[0]$\n\n**\u52a0\u6cd5lazy**\n\n\u672c\u6765\u8fd9\u4e2a\u533a\u95f4\u7684\u52a0lazy\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u6ca1\u6709\u8fdb\u884c\u8fc7\u7236\u8282\u70b9\u7684\u4e58\u548c**\u52a0**\uff1a\n\n$tree[ls].lazy[1] = tree[ls].lazy[1] * tree[rt].lazy[0] + tree[rt].lazy[1]$\n\n$tree[rs].lazy[1] = tree[rs].lazy[1] * tree[rt].lazy[0] + tree[rt].lazy[1]$\n\n* \u533a\u95f4\u4e58\n\n\u7565\u52a0\u601d\u8003\uff0c\u663e\u7136\u662f\u6ca1\u6709\u529e\u6cd5\u5728\u4e0d\u5b8c\u5168\u5305\u542b$[x,y]$\uff08\u5373\u5e94\u8be5\u4fee\u6539\u7684\u533a\u95f4)\u7684\u65f6\u5019\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u533a\u95f4\u4e58\u5b8c\u4e4b\u540e\u7684\u503c\uff0c\u53ea\u80fd\u4fee\u6539\u5b8c\u5de6\u53f3\u533a\u95f4pushup\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u5de6\u53f3\u5b50\u533a\u95f4\u7684\u503c\uff0c\u6240\u4ee5\u8fd8\u8981pushdown\n\n\u8fd9\u91cc\u63a8\u8350\u5728\u6253lazy\u524dpushdown\uff0c\u8fd9\u6837lazy\u662f\u552f\u4e00\u7684\uff0c\u4e0d\u7528\u591a\u8003\u8651\n\n\u5e94\u8be5\u4fee\u6539\u7684\u533a\u95f4\u503c\u76f4\u63a5\u4e58k\uff0c**\u4e0d\u7528\u4e58\u957f\u5ea6**\n\n\u7136\u540e\u7ed3\u675f\u4e86\uff0c\u672c\u9898\u5927\u5e38\u6570\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u8fc7\uff0c\u4e0d\u7528\u5361\u5e38\n\n```cpp\n#include <cstdio>\n#define ll long long\n#define ls (rt * 2)\n#define rs (rt * 2 + 1)\nint n,m,p;\n\nstruct node{\n\tint len;\n\tll val,lazy[2];\n}tree[800005];\n\nvoid pushup(int rt){\n\ttree[rt].val = (tree[ls].val + tree[rs].val) % p;\n}\n\nvoid pushdown(int rt){\n    tree[ls].lazy[0] = (tree[ls].lazy[0] * tree[rt].lazy[0]) % p;\n\ttree[rs].lazy[0] = (tree[rs].lazy[0] * tree[rt].lazy[0]) % p;\n\t\n\ttree[ls].lazy[1] = (tree[ls].lazy[1] * tree[rt].lazy[0] + tree[rt].lazy[1]) % p;\n\ttree[rs].lazy[1] = (tree[rs].lazy[1] * tree[rt].lazy[0] + tree[rt].lazy[1]) % p;\n\t\n\ttree[ls].val = (tree[ls].val * tree[rt].lazy[0] + tree[rt].lazy[1] * tree[ls].len) % p;\n\ttree[rs].val = (tree[rs].val * tree[rt].lazy[0] + tree[rt].lazy[1] * tree[rs].len) % p;\n\t\n\ttree[rt].lazy[0] = 1;\n\ttree[rt].lazy[1] = 0;\n}\n\nvoid build(int rt,int l,int r){\n\ttree[rt].len = r - l + 1;\n\ttree[rt].lazy[0] = 1;\n\ttree[rt].lazy[1] = 0;\n\tif(l == r){\n\t\tscanf(\"%lld\",&tree[rt].val);\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tpushup(rt);\n}\n\nvoid upload(int rt,int l,int r,int L,int R,int C){\n\tpushdown(rt);\n\tif(l == L && r == R){\n\t\ttree[rt].val = (tree[rt].val * C) % p;\n\t\ttree[rt].lazy[0] = C;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(R <= mid){\n\t\tupload(ls,l,mid,L,R,C);\n\t}else if(L > mid){\n\t\tupload(rs,mid+1,r,L,R,C);\n\t}else{\n\t\tupload(ls,l,mid,L,mid,C);\n\t\tupload(rs,mid+1,r,mid+1,R,C);\n\t}\n\tpushup(rt);\n}\n\nvoid slove(int rt,int l,int r,int L,int R,int C){\n    pushdown(rt);\n\tif(l == L && r == R){\n\t\ttree[rt].val = (tree[rt].val + C * tree[rt].len) % p;\n\t\ttree[rt].lazy[1] = C;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(R <= mid){\n\t\tslove(ls,l,mid,L,R,C);\n\t}else if(L > mid){\n\t\tslove(rs,mid+1,r,L,R,C);\n\t}else{\n\t\tslove(ls,l,mid,L,mid,C);\n\t\tslove(rs,mid+1,r,mid+1,R,C);\n\t}\n\tpushup(rt);\n}\n\nint query(int rt,int l,int r,int L,int R){\n    pushdown(rt);\n    if(l == L && r == R){\n    \treturn tree[rt].val;\n\t}\t\n\tint mid = l + r >> 1;\n\tif(R <= mid){\n\t\treturn query(ls,l,mid,L,R);\n\t}else if(L > mid){\n\t\treturn query(rs,mid+1,r,L,R);\n\t}else{\n\t\treturn (query(ls,l,mid,L,mid) + query(rs,mid+1,r,mid+1,R)) % p;\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&p);\n\tbuild(1,1,n);\n\tscanf(\"%d\",&m);\n\tint opt,x,y;\n\tll k;\n\tfor(int i = 1;i <= m;i++){\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt == 1){\n\t\t\tscanf(\"%lld\",&k);\n\t\t\tupload(1,1,n,x,y,k % p);\n\t\t}else if(opt == 2){\n\t\t\tscanf(\"%lld\",&k);\n\t\t\tslove(1,1,n,x,y,k % p);\n\t\t}else{\n\t\t\tprintf(\"%d\\n\",query(1,1,n,x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5f008\u500d\uff1a\u56e0\u4e3a\u8fd9\u6837pushdown\u53ef\u80fd\u4f1apush\u5230\u795e\u79d8\u7a7a\u95f4\uff08\u957f\u5ea6\u4e3a0\u7684\u533a\u95f4\uff09\uff0c\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u4f46\u662f\u4f1aRE\uff0c\u6240\u4ee5\u518d\u5f00\u4e24\u500d\n\n\u672c\u4eba\u5f88\u61d2\uff0c\u6240\u4ee5\u52a0\u6cd5\u662f\u4ece\u4e58\u6cd5\u6539\u7684\uff0c\u7528\u4e86\u5927\u5e38\u6570\u5199\u6cd5",
        "postTime": 1571906822,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u6761\u4ef6\uff1a\u7ebf\u6bb5\u68111 \uff0c \u4e00\u5b9a\u7684\u624b\u63a8\u80fd\u529b\uff0c~~\u5c0f\u5b66\u6570\u5b66~~\n\n\n\u76f8\u6bd4\u7ebf\u6bb5\u68111\u591a\u51fa\u4e86\u4e58\u7684\u64cd\u4f5c\uff0c\u53ea\u8981\u5728push\u4e0b\u653e\u4e2d\u591a\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u4fbf\u53ef...\n\n\u597d\u5427\uff0c\u8be6\u7ec6\u4e00\u70b9\n\n## \u7ebf\u6bb5\u6811\u8fdb\u884c\u4e58\u6cd5\u4f18\u5148\u8fd0\u7b97  \n\n~~\u56e0\u4e3a\u4e0d\u4f1a\u52a0\u6cd5\u4f18\u5148~~\n\n\u4e3a\u795e\u9a6c\u8fdb\u884c\u4e58\u6cd5\u4f18\u5148\u5462\uff1f~~\u56e0\u4e3a\u5c0f\u5b66\u6570\u5b66\u4e2d\u4e58\u6cd5\u7684\u4f18\u5148\u5ea6\u6bd4\u52a0\u6cd5\u9ad8~~\n\n\u660e\u663e\uff0c\u82e5\u8fdb\u884c\u52a0\u6cd5\u4f18\u5148\u7684\u8bdd\uff0c\u5f88\u96be\u7ef4\u62a4\u4e58\u548c\u52a0\u4e24\u4e2a\u64cd\u4f5c.......\n\n\u597d\u5427\uff0c\u8fd9\u91cc\u5b9e\u5728\u662f\u89e3\u91ca\u4e0d\u597d\uff0c\u5982\u679c\u4e0d\u660e\u767d\u8fd8\u662f\u770b\u697c\u4e0a\u5927\u4f6c\u7684\u5427\n\n## \u8fdb\u884c\u8fd0\u7b97\n\n\u5f88\u660e\u663e\uff0c\u6bcf\u4e2a\u533a\u95f4\u5728\u5efa\u7acb\u65f6\u4e58\u7684tag\u5fc5\u987b\u4e3a1   ~~\u4e0d\u7136\u8fdb\u884c\u8fd0\u7b97\u65f6\u5c31\u4e00\u76f4\u662f0\u4e86~~\n\n\t\u8fdb\u884c\u4e0b\u653e\u64cd\u4f5c\u65f6\n\n>tag\u52a0 = tag\u52a0 * tag\u7236\u4eb2\u4e58 + tag\u52a0\n\n>tag\u4e58 = tag\u4e58 * tag\u7236\u4eb2\u4e58\n\n~~\u4e0d\u660e\u767d\u7684\u8bdd\u81ea\u5df1\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u5427~~\n\n\t\u8ba1\u7b97\u65f6\u7684\u516c\u5f0f\u4e5f\u5f88\u5bb9\u6613\u80fd\u591f\u63a8\u51fa\n\n>value = value * tag\u4e58 + tag\u52a0 * \u8be5\u533a\u95f4\u7684\u8303\u56f4\n\n\u6700\u540e\u5728\u8ba1\u7b97\u65f6\u62fc\u547d\u6a21\u4fbf\u597d\u4e86\n\n## \u5751\u70b9\n\n\t\tlong long\n\n\n## \u4ee3\u7801\n\n~~\u6307\u9488\u771f\u597d\u5199~~\n\n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#define MAXN 500010\n#define int long long\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile( c > '9' || c < '0' ){if( c == '-' )f = -1;c = getchar();}\n\twhile( c <='9' && c >= '0' ){x = (x<<3) + (x<<1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nint a[ MAXN ] , n , m , p , cnt;\n\nstruct Node{\n\tint l , r , tag1 , tag2 , value;    //tag1\u4e3a\u4e58 tag2\u4e3a\u52a0\n\tNode *left , *right;\n}pool[ 2 * MAXN ];\n\nvoid build( int l , int r , Node *co )\n{\n\tco -> l = l;\n\tco -> r = r;\n\tco -> tag1 = 1;\n\tif( l == r )\n\t{\n\t\tco -> l = co -> r = l;\n\t\tco -> value = a[ l ] % p;\n\t\tco -> tag1 = 1;\n\t\treturn;\n\t}\n\tco -> left = &pool[ ++ cnt ];\n\tco -> right = &pool[ ++ cnt ];\n\tint mid = ( l + r ) / 2;\n\tbuild( l , mid , co -> left );\n\tbuild( mid + 1 , r , co -> right );\n\tco -> value = ( co -> right -> value + co -> left -> value ) % p;\n}\n\nint get( Node *cur )\n{\n\treturn ( cur -> value * cur -> tag1 % p + cur -> tag2 * ( cur -> r - cur -> l + 1 ) % p ) % p;\n}\n\nvoid push( Node *cur )\n{\n\tif( cur -> tag1 ==1 && cur -> tag2 == 0 ) return;\n\tcur -> value = get( cur );\n\tcur -> right -> tag1 = cur -> right -> tag1 * cur -> tag1 % p;\n\tcur -> right -> tag2 = ( cur -> right -> tag2 * cur -> tag1 % p + cur -> tag2 ) % p;\n\tcur -> left -> tag1 = cur -> left -> tag1 * cur -> tag1 % p;\n\tcur -> left -> tag2 = ( cur -> left -> tag2 * cur -> tag1 % p + cur -> tag2 ) % p;\n\tcur -> tag1 = 1;\n\tcur -> tag2 = 0;\n}\n\nint find( int l , int r , Node *cur )\n{\n\tif(cur -> l == l && cur -> r == r )\n\t{\n\t\treturn get( cur );\n\t}\n\tpush( cur );\n\tint mid = ( cur -> l + cur -> r ) / 2;\n\tif( r <= mid ) return find( l , r , cur -> left );\n\tif( l > mid ) return find( l , r , cur -> right );\n\treturn ( find( l , mid , cur -> left ) + find( mid + 1 , r , cur -> right ) ) % p;\n}\n\nvoid addP( int l , int r , int v , Node *cur )\n{\n\tif( cur -> l == l && cur -> r == r )\n\t{\n\t\tcur -> tag2 = ( cur -> tag2 + v ) % p;\n\t\treturn;\n\t}\n\tpush ( cur );\n\tint mid = ( cur -> r + cur -> l ) / 2;\n\tif( r <= mid ) addP( l , r , v , cur -> left );\n\telse if( l > mid ) addP( l , r , v , cur -> right );\n\telse\n\t{\n\t\taddP( l , mid , v , cur -> left );\n\t\taddP( mid + 1 , r , v , cur -> right );\n\t}\n\tcur -> value = ( get( cur -> right ) + get( cur -> left ) ) % p;\n}\n\nvoid addT( int l , int r , int v , Node *cur )\n{\n\n\tif( cur -> l == l && cur -> r == r )\n\t{\n\t\tcur -> tag1 = cur -> tag1 * v % p;\n\t\tcur -> tag2 = cur -> tag2 * v % p;\n\t\treturn;\n\t}\n\tpush ( cur );\n\tint mid = ( cur -> r + cur -> l ) / 2;\n\tif( r <= mid ) addT( l , r , v , cur -> left );\n\telse if( l > mid ) addT( l , r , v , cur -> right );\n\telse\n\t{\n\t\taddT( l , mid , v , cur -> left );\n\t\taddT( mid + 1 , r , v , cur -> right );\n\t}\n\tcur -> value = ( get( cur -> right ) + get( cur -> left ) ) % p;\n}\n\n\nsigned main()\n{\n\tn = read() , m = read() , p = read();\n\tfor( int i = 1 ; i <= n ; i ++ )\n\t{\n\t\ta[ i ] = read();\n\t}\n\tbuild( 1 , n , pool );\n\t// Node* root=buildT(1,n);\n\twhile( m -- )\n\t{\n\t\tint q = read() , l = read() , r = read();\n\t\tif( q == 1 )\n\t\t{\n\t\t\tint v = read();\n\t\t\taddT( l , r , v , pool );\n\t\t}\n\t\tif( q == 2 )\n\t\t{\n\t\t\tint v = read(); \n\t\t\taddP( l , r , v , pool );\n\t\t}\n\t\tif( q == 3 )\n\t\t{\n\t\t\tcout << find( l , r , pool ) << endl;\n\t\t}\n\t}\n\treturn 0;\n}",
        "postTime": 1562054026,
        "uid": 118869,
        "name": "dead_gun",
        "ccfLevel": 0,
        "title": "P3373 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2"
    },
    {
        "content": "\u849f\u84bb\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3==\n\u672c\u9898\u548c\u4e0a\u4e00\u9053\u6a21\u677f\u98983373\u8fd8\u662f\u6709\u5f88\u5927\u4e0d\u540c\u7684\n\u5f53\u7136\u52a0\u6cd5\u6ca1\u6709\u53d8\n\u4e58\u6cd5\u7684\u8bdd\u8981\u6ce8\u610f\uff0c\u4e4b\u524d\u52a0\u7684\u503c\u5b9e\u9645\u4e0a\u5df2\u7ecf\u7b97\u5728\u539f\u533a\u95f4\u91cc\u4e86\uff0c\u6240\u4ee5\u4e58\u6cd5\u662f\u8981\u5bf9\u8fd9\u4e2a\u8fdb\u884c\u64cd\u4f5c\u7684\n\u4f9d\u65e7\u662f\u4e0d\u7528\u7ed3\u6784\u4f53\u7684\u6570\u7ec4\n\u8fd8\u8981\u6ce8\u610f\u4e58\u6cd5\u7684tag\u8981\u521d\u5b9a\u4e49\u4e3a1\n\u4ee5\u53ca\uff0c\u5728\u4e58\u6cd5\u64cd\u4f5c\u65f6\u5df2\u7ecf\u5c06\u52a0\u6cd5\u4e58\u4e86\uff0c\u6240\u4ee5\u4e0d\u8981\u518d\u4e58\u4e00\u6b21\uff0c\u6240\u4ee5\u5148\u4e58\u518d\u52a0\n\u4e0a\u4ee3\u7801~~\u6c42\u8fc7\u5ba1~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,t,x,y,cnt,z,p,c;\nconst int MAXN=100001;\nlong long sum[MAXN*4],a[MAXN];\nlong long tag[MAXN*4],tag2[MAXN*4];\nvoid build(int now,int l,int r){\n    if(l==r){cnt++;sum[now]=a[cnt];}else{\n        int mid=(l+r)/2;\n        build(now<<1,l,mid);\n        build(now<<1|1,mid+1,r);\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n}\nvoid push_down1(int now){//*\n    if(tag[now]!=1){\n        sum[now<<1]=sum[now<<1]*tag[now]%p;\n        sum[now<<1|1]=sum[now<<1|1]*tag[now]%p;\n        tag[now<<1]=tag[now<<1]*tag[now]%p;\n        tag[now<<1|1]=tag[now<<1|1]*tag[now]%p;\n        tag2[now<<1]=tag2[now<<1]*tag[now]%p;\n        tag2[now<<1|1]=tag2[now<<1|1]*tag[now]%p;\n        tag[now]=1;\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n}\nvoid push_down2(int now,int l,int r){//+\n    if(tag2[now]!=0){\n        int mid=(l+r)/2;\n        sum[now<<1]=(sum[now<<1]+(mid-l+1)*tag2[now]*tag[now])%p;\n        sum[now<<1|1]=(sum[now<<1|1]+(r-mid)*tag2[now]*tag[now])%p;\n        tag2[now<<1]=(tag2[now<<1]+tag2[now])%p;\n        tag2[now<<1|1]=(tag2[now<<1|1]+tag2[now])%p;\n        tag2[now]=0;\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n}\nvoid update1(int now,int l,int r,int q_l,int q_r,long long x){//**\n    if(q_l<=l&&q_r>=r){\n        sum[now]=(sum[now]*x)%p;\n        tag2[now]=(tag2[now]*x)%p;\n        tag[now]=(tag[now]*x)%p;\n    }else{push_down1(now);\n        push_down2(now,l,r);\n        int mid=(l+r)/2;\n        if(q_l<=mid)update1(now<<1,l,mid,q_l,q_r,x);\n        if(q_r>mid)update1(now<<1|1,mid+1,r,q_l,q_r,x);\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n}\nvoid update2(int now,int l,int r,int q_l,int q_r,long long x){//++\n    if(q_l<=l&&q_r>=r){\n        sum[now]=(sum[now]+(r-l+1)*x)%p;\n        tag2[now]=(tag2[now]+x)%p;\n    }else{push_down1(now);\n        push_down2(now,l,r);\n        int mid=(l+r)/2;\n        if(q_l<=mid)update2(now<<1,l,mid,q_l,q_r,x);\n        if(q_r>mid)update2(now<<1|1,mid+1,r,q_l,q_r,x);\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n}\nlong long get_sum(int now,int l,int r,int q_l,int q_r){\n    long long re=0;\n    if(q_l<=l&&q_r>=r)re+=sum[now];else{\n        push_down1(now);\n        push_down2(now,l,r);\n        int mid=(l+r)/2;\n        if(q_l<=mid)re+=get_sum(now<<1,l,mid,q_l,q_r);\n        if(q_r>mid)re+=get_sum(now<<1|1,mid+1,r,q_l,q_r);\n        sum[now]=(sum[now<<1]+sum[now<<1|1])%p;\n    }\n    return re;\n}\nint main(){\n    cin>>n>>m>>p;\n    for(int i=1;i<=n;i++)cin>>a[i];\n    for(int i=0;i<=MAXN*4;i++)tag[i]=1;\n\tbuild(1,1,n);\n    while(m!=0){\n        cin>>t;\n        if(t==1){\n            cin>>x>>y>>z);\n            update1(1,1,n,x,y,z);}\n        if(t==2){cin>>x>>y>>z);\n            update2(1,1,n,x,y,z);}\n        if(t==3){\n\t\t\tcin>>x>>y;\n\t\t\tcout<<get_sum(1,1,n,x,y)%p<<endl;\n        }\n        m--;\n    }\n}\n```",
        "postTime": 1545444420,
        "uid": 116388,
        "name": "SFWR",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u975e\u5e38\u597d\u60f3\uff0c\u53ea\u9700\u8981\u628a\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u7684\u5ef6\u8fdf\u8bb0\u53f7\u589e\u52a0\u4e00\u4e2a\u4e58\u6cd5\u8fd0\u7b97\u5373\u53ef\u3002\n\n\u4e0b\u9762\u4ece\u4e00\u6b21\u51fd\u6570\u590d\u5408\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u6b64\u9898\u3002\n\nspread\u64cd\u4f5c\u76f8\u5f53\u4e8e\u662f\uff1a\n\n- p\u7684\u513f\u5b50\u8282\u70b9\u539f\u6765\u7684\u5ef6\u8fdf\u8bb0\u53f7\u662fmx+n\uff0c\u8868\u793a\u628a\u6bcf\u4e2aa[i]\u4e58m\u540e\u52a0n\uff0c\u8bb0\u4e3af(x)=mx+n.\n\n- \u800c\u4ecap\u7684\u5ef6\u8fdf\u8bb0\u53f7\u662fkx+b\uff0c\u8bb0\u4e3ag(x)=kx+b. \n\n- \u628ap\u7684\u5ef6\u8fdf\u8bb0\u53f7\u4f20\u9012\u7ed9\u5b83\u7684\u513f\u5b50\u3002\u90a3\u4e48\u5bf9\u4e8ep\u7684\u513f\u5b50\u800c\u8a00\uff0c\u76f8\u5f53\u4e8e\u9700\u8981\u8ba1\u7b97g(f(x))\uff0c \u4e5f\u5c31\u662f\uff1a\n\n- **g(f(x))=g(mx+n)=k(mx+n)+b=(km)x+(kn+b)**\uff0c\u8868\u660ep\u7684\u513f\u5b50\u8981\u628a\u539f\u6765\u7684mul\u4e58p\u7684mul\uff0c\u628a\u81ea\u5df1\u7684add\u4e58p\u7684mul\u540e\u518d\u52a0p\u7684add\u3002\n\n\n\u51e0\u70b9\u6ce8\u610f\uff1a\n\n1. mul\u7684\u521d\u503c\u662f1\uff0c\u4e0d\u662f0.\n\n2. \u8981\u7528\u4f4d\u79fb\u8fd0\u7b97\u52a0\u901f\n\n3. \u5584\u7528define\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u770b\u8d77\u6765\u5f88\u76f4\u89c2\uff0c\u751a\u81f3\u4e0d\u7528\u5199\u6ce8\u91ca\u4e86\n\n4. \u8fd0\u7b97\u4e0d\u59a8\u5206\u5e03\u8fdb\u884c\uff0c\u770b\u7740\u8212\u670d\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i, x) for(register int i=1; i<=x; i++)\n#define l(x) tree[x].l\n#define r(x) tree[x].r\n#define sum(x) tree[x].sum\n#define add(x) tree[x].add\n#define mul(x) tree[x].mul\n#define mid(x) ((l(x)+r(x))/2)\n#define len(x) (r(x)-l(x)+1)\n#define lson(x) (x<<1)\n#define rson(x) (x<<1|1)\nusing namespace std;\ntypedef long long ll;\ninline ll read(){\n    ll x=0; ll sign=1; char c=getchar();\n    while(c>'9' || c<'0') {if (c=='-') sign=-1;c=getchar();}\n    while(c>='0' && c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    return x*sign;\n}\nconst int N=102000;\nll a[N];\nstruct Segment_Tree{\n    int l, r;\n    ll sum, add, mul;\n}tree[N<<2];\n\nint n, m, mod;\n\nvoid build(int p, int l, int r){\n    l(p)=l, r(p)=r, mul(p)=1;\n    if (l==r) {\n        sum(p)=a[l]; \n        sum(p)%=mod;\n        return;\n    }\n    int mid=(l+r)/2;\n    build(lson(p), l, mid);\n    build(rson(p), mid+1, r);\n    sum(p)=sum(lson(p))+sum(rson(p));\n    sum(p)%=mod;\n}\n\nvoid spread(int p){\n    if (add(p)==0 && mul(p)==1) return;\n    \n    sum(lson(p))*=mul(p);\n    sum(lson(p))+=add(p)*len(lson(p));\n    sum(lson(p))%=mod;\n    add(lson(p))=add(lson(p))*mul(p)+add(p);\n    add(lson(p))%=mod;\n    mul(lson(p))*=mul(p);\n    mul(lson(p))%=mod;\n    \n\tsum(rson(p))*=mul(p);\n    sum(rson(p))+=add(p)*len(rson(p));\n    sum(rson(p))%=mod;\n    add(rson(p))=add(rson(p))*mul(p)+add(p);\n    add(rson(p))%=mod;\n    mul(rson(p))*=mul(p);\n    mul(rson(p))%=mod;\n    \n    add(p)=0;\n    mul(p)=1;\n}\n\nvoid change(int p, int l, int r, ll d, int op){\n    if (l<=l(p) && r(p)<=r){\n        if (op==2){\n            sum(p)+=(ll)d*len(p);\n            add(p)+=d;\n        } else{\n            sum(p)*=d;\n            add(p)*=d;\n            mul(p)*=d;\n        }\n        sum(p)%=mod;\n        add(p)%=mod;\n        mul(p)%=mod;\n        return;\n    }\n    spread(p);\n    if (l<=mid(p))   change(lson(p), l, r, d, op);\n    if (mid(p)+1<=r) change(rson(p), l, r, d, op);\n    sum(p)=sum(lson(p))+sum(rson(p));\n    sum(p)%=mod;\n}\n\nll ask(int p, int l, int r){\n    if (l<=l(p) && r(p)<=r) return sum(p);\n    spread(p);\n    ll val=0;\n    if (l<=mid(p))   val+=ask(lson(p), l, r);\n    val%=mod;\n    if (mid(p)+1<=r) val+=ask(rson(p), l, r);\n    val%=mod; val+=mod; val%=mod;\n    return val;\n}\n\n\nint main(){\n    n=read(), m=read(), mod=read();\n    For(i, n) a[i]=read();\n    build(1, 1, n);\n    For(i, m){\n        int w=read(), x=read(), y=read();\n        if (w!=3){\n            ll z=read();\n            change(1, x, y, z, w);\n        } else \n            printf(\"%lld\\n\", ask(1, x, y));\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1540999055,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "```pascal\n**Orz\u5199\u9898\u89e3\u7684\u540c\u65f6\u987a\u4fbf\u8bf4\u8bf4\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u54ea\u91cc\u4e0d\u5bf9\u7684\u5730\u65b9\u6c42\u5927\u4f6c\u65a7\u6b63orz**\n~~\u4f5c\u4e3a\u4e00\u4e2a\u5feb\u88ab\u6dd8\u6c70\u7684Pascal\u9009\u624b\uff08\u9003\uff09\n\u4e00\u672c\u6b63\u7ecf\u7684\u5199\u4e0b\u8fd9\u4e2aPascal\u9898\u89e3\uff08\u9003\uff09~~\n\u4e0b\u9762\u662f\u4ee3\u7801,\u9898\u89e3\u4f1a\u6807\u5728\u4ee3\u7801\u4e0a...\n\n------------\n\nprogram ex1;\nvar i,j,k,n,m,p,x,y,data,cnt,size:longint;\n    a:array[0..100000] of int64;\n    tree,mul,lazy:array[0..400007] of int64;   f1:text;\n//\u8bb0\u5f97\u5f00int64\uff0c\u4e5f\u5c31\u662fC++\u4e2d\u7684long long \u4e0d\u7136\u4f1a\u7b97\u672f\u4e0a\u6ea2\uff0c\u8fd9\u4e5f\u662fRE\u7684\u9519\u8bef\u4e4b\u4e00\u4e86~~\uff08\u4eb2\u8eab\u7ecf\u5386233\uff09~~\nProcedure pushdown(p,l,r:longint);//\u6807\u8bb0\u4e0b\u4f20\uff0c\u6ce8\u610f\u5148\u4e58\u540e\u52a0\nvar mid:longint;\nbegin\n  if (mul[p]=1)and(lazy[p]=0)then exit;\n  if (l=r) then\n  begin\n    mul[p]:=1;\n    lazy[p]:=0;\n    exit;\n  end;\n\n  mid:=(l+r) shr 1;\n  tree[p shl 1]:=(tree[p shl 1]*mul[p]+lazy[p]*(mid-l+1)) mod size;//mid-l+1\u4e0er-l+1\u540c\u7406\n  tree[p shl 1 or 1]:=(tree[p shl 1 or 1]*mul[p]+lazy[p]*(r-mid)) mod size;//r-mid\u5c31\u662f\u533a\u95f4\u957f\u5ea6\uff0c\u4e0d\u7528\u52a01\u7684\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684mid\u7684\u4f4d\u7f6e\u662f\u4e0d\u7b97\u6ef4\uff01\n\n  mul[p shl 1]:=(mul[p]*mul[p shl 1]) mod size;\n  mul[p shl 1 or 1]:=(mul[p]*mul[p shl 1 or 1]) mod size;//\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\n\n  lazy[p shl 1]:=(lazy[p shl 1]*mul[p]+lazy[p])mod size;\n  lazy[p shl 1 or 1]:=(lazy[p shl 1 or 1]*mul[p]+lazy[p]) mod size;//\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\uff0c\u540c\u6837\u8fd8\u662f\u5148\u4e58\u518d\u52a0\n\n  mul[p]:=1;\n  lazy[p]:=0;//\u5c06\u6807\u8bb0\u521d\u59cb\u5316\u3002\nend;\n\nProcedure change(p,l,r,x,y:longint);//\u4e58\u6cd5\u8fd0\u7b97\nvar mid:longint;\nbegin\n  if (r<x) or (l>y) then exit;\n  if (l>=x) and (r<=y) then\n  begin\n    tree[p]:=(tree[p]*data) mod size;\n    mul[p]:=(mul[p]*data) mod size;\n    lazy[p]:=(lazy[p]*data) mod size;//mul\u6570\u7ec4\u4ee3\u8868\u4e58\u7684\u6807\u8bb0\uff0clazy\u5c31\u662f\u52a0\u7684\u6807\u8bb0\uff0c\u4e58\u6cd5\u8fd0\u7b97\u91cc\u4e8c\u8005\u90fd\u8981\u66f4\u65b0\n    exit;\n  end;\n\n  pushdown(p,l,r);\n  mid:=(l+r) shr 1;\n  if x<=mid then change(p shl 1,l,mid,x,y);//\u8d70\u5de6\u513f\u5b50\n  if y>mid then change(p shl 1 or 1,mid+1,r,x,y);//\u8d70\u53f3\u513f\u5b50\n\n  tree[p]:=(tree[p shl 1]+tree[p shl 1 or 1]) mod size;\nend;\n\nProcedure add(p,l,r,x,y:longint);//\u52a0\u6cd5\u8fd0\u7b97\nvar mid:longint;\nbegin\n  if (r<x) or (l>y) then exit;\n  if (l>=x) and (r<=y) then\n  begin\n    lazy[p]:=(lazy[p]+data) mod size;\n    tree[p]:=(tree[p]+(r-l+1)*data) mod size;//\u6b64\u65f6\u533a\u95f4\u4e3a[l,r]\u90a3\u4e48\u533a\u95f4\u957f\u5ea6\u5c31\u662fr-l+1\uff0c\u6240\u4ee5\u5f53\u524d\u533a\u95f4\u548c\u4e3a\u539f\u6765\u7684\u548ctree[P]\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6r-l+1\u4e58\u6bcf\u4e00\u4f4d\u8981\u52a0\u7684data\u5c31\u662f\u66f4\u65b0\u7684tree[p]\u3002\n    exit;\n  end;\n\n  pushdown(p,l,r);\n  mid:=(l+r) shr 1;\n  if x<=mid then add(p shl 1,l,mid,x,y);\n  if y>mid then add(p shl 1 or 1,mid+1,r,x,y);\n  tree[p]:=(tree[p shl 1]+tree[p shl 1 or 1]) mod size;//\u8981\u5fc3\u5fc3\u5ff5\u5ff5mod size\nend;\n\nFunction count(p,l,r,x,y:longint):longint;\nvar mid:longint;\nbegin\n  count:=0;\n  if (r<x) or (l>y) then exit;//\u8fb9\u754c\u6761\u4ef6\n  if (l>=x) and (r<=y) then\n    exit(tree[p]);\n\n  pushdown(p,l,r);\n  mid:=(l+r) shr 1;//\u8fd9\u53e5\u8bdd\u76f8\u5f53\u4e8e\uff08l+r) div 2\uff0c\u67d0\u7287\u7287\u8bf4\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u52a0\u901f\u6240\u4ee5\u6211\u5c31\u5199\u4e86\n  exit(count(p shl 1,l,mid,x,y)+count(p shl 1 or 1,mid+1,r,x,y) mod size);\nend;\n\nProcedure build(p,l,r:longint);\nvar mid:longint;\nbegin\n  mul[p]:=1;\n  lazy[p]:=0;//mul\u6570\u7ec4\u7684\u521d\u59cb\u5316\u7279\u522b\u91cd\u8981\uff0c\u5373\u4e58\u6cd5\u6807\u8bb0\u521d\u59cb\u8981\u7f6e\u4e3a1\u624d\u80fd\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\n  if l=r then\n  begin\n    tree[p]:=a[l];\n\n  end  else\n  begin\n    mid:=(l+r) shr 1;\n    build(p shl 1,l,mid);\n    build(p shl 1 or 1,mid+1,r);\n    tree[p]:=tree[p shl 1]+tree[p shl 1 or 1];\n  end;\n  tree[p]:=tree[p] mod size;//\u65f6\u523bmod size Orz\nend;\n\nbegin//\u4e3b\u7a0b\u5e8f\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684Orz\n  readln(n,m,size);\n\n\n  for i:=1 to n do read(a[i]);\n   build(1,1,n);\n//\u6211n\u5929\u6ca1\u8fc7\uff08\u5e76\u4e14\u627e\u4e86\u5f88\u591a\u5927\u7287\u770b\u90fd\u6ca1\u53d1\u73b0\u95ee\u9898\uff09\u7684\u5730\u65b9\u5c31\u5728\u8fd9\u91cc...\u4f5c\u4e3a\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u6211\u5c45\u7136...\u5148build\uff08\u5efa\u6811\uff09\u518dread\uff08\u8bfb\u5165\uff09\u4e86\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\n  for i:=1 to m do\n  begin\n    read(cnt);\n    case cnt of\n    1:begin\n        readln(x,y,data);\n        change(1,1,n,x,y);\n      end;\n    2:begin\n        readln(x,y,data);\n        add(1,1,n,x,y);\n      end;\n    3:begin\n        readln(x,y);\n        writeln(count(1,1,n,x,y) mod size);\n      end;\n    end;\n  end;\nend.\n\n```\n~~\u795d\u5927\u5bb6AC\u5feb\u4e50~~~",
        "postTime": 1533210589,
        "uid": 71463,
        "name": "Agumon_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u77e5\u9053\u8fd9\u662f\u7ebf\u6bb5\u6811\n\n\u4f5c\u4e3a\u4e00\u9053\u7801\u519c\u9898\uff0c\u8bf4\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879\n\n\u7ebf\u6bb5\u6811\u4e4b\u6240\u4ee5\u662fO(nlogn)\u5c31\u662f\u56e0\u4e3a\u4ed6\u6709\u61d2\u6807\u8bb0\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u56e0\u4e3a\u4e00\u4e2a\u533a\u95f4\u603b\u662f\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3alogn\u4e2a\u533a\u95f4\n\n\u6240\u4ee5\u64cd\u4f5c\u90fd\u662flogn\u7684\n\n\u90a3\u4e48\u5728\u7ebf\u6bb5\u6811\u4e0a\u5fc5\u987b\u8981\u6709\u4e24\u4e2a\u7b49\u5f0f\u6210\u7acb\n\n1.\u61d2\u6807\u8bb0\u7ed3\u7b97\u540e\u5b9e\u9645\u503c=\u771f\u5b9e\u503c\n\n2.\u7236\u8282\u70b9**\u771f\u5b9e\u503c**=\u5b50\u8282\u70b9**\u771f\u5b9e\u503c**\u4e4b\u548c\n\n\u7b49\u5f0f1\u4e0d\u6210\u95ee\u9898\uff0c\u95ee\u9898\u662f\u5982\u4f55\u7ef4\u62a4\u7b49\u5f0f2\n\n\u5728sum\u65f6\u662f\u663e\u7136\u4e0d\u884c\u7684\uff0c\u4f1a\u7531\u4e8e\u4e0d\u77e5\u9053\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u662f\u5426\u6709\u61d2\u6807\u8bb0\u800c\u5bfc\u81f4\u975enlogn\n\n\u6240\u4ee5\u4e00\u5b9a\u662fsetlazy\u65f6\u4e86\uff0c\u5177\u4f53\u6765\u8bb2\u6211\u4eec\u540c\u65f6\u7ef4\u62a4\u6027\u8d281\u548c\u6027\u8d282\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6bcf\u6b21setlazy\u9012\u5f52\u65f6\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c\n\n\u53e6\u5916\u7531\u7b49\u5f0f1\u53ef\u4ee5\u89e3\u51fa\u6765\n\n(rval\\*rmult+rplus)\\*nmult+nplus=rval\\*amult+aplus\n\naplus=rplus\\*nmult+nplus;\n\namult=rmult\\*nmult;\n\n\u5176\u4e2dr--\u8868\u793a\u5b50\u8282\u70b9\u7684\u503c\u548c\u61d2\u6807\u8bb0\n\nn--\u8868\u793a\u7236\u8282\u70b9\u7684\u503c\u548c\u61d2\u6807\u8bb0\n\na--\u8868\u793apushdown\u540e\u5b50\u8282\u70b9\u7684\u61d2\u6807\u8bb0\n\n\u8fd8\u6709\u5c31\u662f\u8fd9\u4e2a\u7248\u672c\u7684\u533a\u95f4\u62c6\u5206\u8fd8\u662f\u6bd4\u8f83\u4eb2\u6c11\u7684\n\n\u4e0d\u7528\u5206\u60c5\u51b5\u8ba8\u8bba\u4e86\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n;int m;int mod;\nstruct linetree\n{\n     long long val[400010];//\u5fc5\uff01\u987b\uff01\u5f00\uff01long\uff01long\uff01\n     long long lazp[400010];\n     long long lazm[400010];\n     inline void update(int p,int l,int r)\n     {\n         val[p]*=lazm[p];val[p]%=mod;val[p]+=lazp[p]*(r-l);val[p]%=mod;return;\n        //\u66f4\u65b0\u8282\u70b9\u503c\uff0c\u5148\u4e58\u540e\u52a0\n     }\n     inline void pushdown(int p,int l,int r)\n     {\n         update(p,l,r);//\u5148\u66f4\u65b0 \n         if(r-l>1)//\u975e\u53f6\u5b50\u8282\u70b9\n         {\n             lazp[2*p]*=lazm[p];lazp[2*p]+=lazp[p];lazp[2*p]%=mod;//\u66f4\u65b0\n             lazm[2*p]*=lazm[p];lazm[2*p]%=mod;\n             lazp[2*p+1]*=lazm[p];lazp[2*p+1]+=lazp[p];lazp[2*p+1]%=mod;\n             lazm[2*p+1]*=lazm[p];lazm[2*p+1]%=mod;\n        }lazp[p]=0;lazm[p]=1;return;\n     }\n     int build(int p,int l,int r)//\u5efa\u6811\n     {\n         lazm[p]=1;\n         if(r-l==1)//\u5982\u679c\u662f\u53f6\u5b50\n         {\n             scanf(\"%lld\",&val[p]);val[p]%=mod;return val[p];\n        }\n        int mid=(l+r)/2;\n        if(mid>l)val[p]+=build(2*p,l,mid);\n        if(mid<r)val[p]+=build(2*p+1,mid,r);\n        val[p]%=mod;return val[p];\n     }\n     void setplus(int p,int l,int r,int dl,int dr,long long plus)//\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\uff0c\u76ee\u6807\u5de6\uff0c\u76ee\u6807\u53f3\n     {\n         if(lazp[p]!=0||lazm[p]!=1)pushdown(p,l,r);\n        //\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0b\u9762\u7684\u70b9\u4f1a\u56de\u53bb\u66f4\u4e0a\u6765\uff0c\n        //\u8fd9\u6837\u4f60\u7684\u503c\u5c31\u4e0d\u51c6\u4e86\uff0c\u7ef4\u62a4\u7b49\u5f0f2\u7684\u540c\u65f6\u7834\u574f\u4e86\u7b49\u5f0f1\n        //\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u61d2\u6807\u8bb0\n         if(l==dl&&r==dr){lazp[p]+=plus;lazp[p]%=mod;pushdown(p,l,r);return;}\n         int mid=(l+r)/2;\n         if(mid>dl)setplus(2*p,l,mid,dl,min(mid,dr),plus);//\u65e0\u8bba\u5982\u4f55\u5fc5\u987b\u4fdd\u8bc1\u5b69\u5b50\u8282\u70b9\u7684\u503c\u662f\u51c6\u7684\n         else pushdown(2*p,l,mid);\n         if(mid<dr)setplus(2*p+1,mid,r,max(mid,dl),dr,plus);\n         else pushdown(2*p+1,mid,r);\n         val[p]=val[2*p]+val[2*p+1];//\u56de\u66f4\uff0c\u7ef4\u62a4\u7b49\u5f0f2\n        return;\n     }\n     void setmult(int p,int l,int r,int dl,int dr,long long mult)//\u540c\u4e0a\n     {\n         if(lazm[p]!=1||lazp[p]!=0)pushdown(p,l,r); \n         if(l==dl&&r==dr)\n        {lazp[p]*=mult;lazm[p]*=mult;lazp[p]%=mod;lazm[p]%=mod;pushdown(p,l,r);return;}\n        int mid=(l+r)/2;\n        if(mid>dl)setmult(2*p,l,mid,dl,min(mid,dr),mult);\n        else pushdown(2*p,l,mid);\n        if(mid<dr)setmult(2*p+1,mid,r,max(mid,dl),dr,mult);\n        else pushdown(2*p+1,mid,r);\n        val[p]=val[2*p]+val[2*p+1];\n        return;\n     }\n     int sum(int p,int l,int r,int dl,int dr)//\u6807\u51c6sum\n     {\n         if(lazp[p]!=0||lazm[p]!=1)pushdown(p,l,r);\n         if(l==dl&&r==dr)return val[p];\n         int mid=(l+r)/2;int res=0;\n         if(mid>dl)res+=sum(2*p,l,mid,dl,min(mid,dr));//\u8fd9\u4e2a\u533a\u95f4\u62c6\u5206\u53ef\u4ee5\u907f\u514d\u5206\u60c5\u51b5\n         if(mid<dr)res+=sum(2*p+1,mid,r,max(mid,dl),dr);\n         res%=mod;return res;\n     }\n}lt;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&mod);\n    lt.build(1,0,n);\n    for(int i=1;i<=m;i++)\n    {\n        int opt;int u;int v;\n        scanf(\"%d%d%d\",&opt,&u,&v);\n        if(opt==1)\n        {\n            int t;scanf(\"%d\",&t);\n            lt.setmult(1,0,n,u-1,v,t);    \n        }\n        else if(opt==2)\n        {\n            int t;scanf(\"%d\",&t);\n            lt.setplus(1,0,n,u-1,v,t);\n        }\n        else if(opt==3)\n        {\n            printf(\"%d\\n\",lt.sum(1,0,n,u-1,v));\n        }\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n\n```",
        "postTime": 1512715653,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u8003\u8651\u5bf9\u4e8ex,\u5982\u679c\u5148\u4e58k1\u518d\u52a0k2,k2\u5bf9k1\u65e0\u5f71\u54cd\u3002\u5982\u679c\u5148\u52a0k1,\u518d\u4e58k2,\uff08x+k1\uff09\\*k2\u7b49\u4ef7\u4e8e(x\\*k2)+(k1\\*k2)\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b65\u7684\u4e58\u4f1a\u5bf9\u7b2c\u4e00\u6b65\u7684\u52a0\u4ea7\u751f\u5f71\u54cd\u3002\u4e3a\u4e86\u6a21\u62df\u51fa\u8fd9\u4e2a\u5f71\u54cd\uff0c\u6211\u4eec\u5728\u533a\u95f4\u4e58\u7684\u65f6\u5019\u5e94\u8be5\u628a\u533a\u95f4\u52a0\u7684lazy\u6570\u7ec4\u4e5f\u4e58\u4e0a\u76f8\u5e94\u7684\u6570\u3002\n\n\uff08\u4ee3\u7801\u4e2d\u4ed8\u4e86\u8c03\u8bd5\u4ee3\u7801\u4fbf\u4e8e\u7406\u89e3lazy\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n            \n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#define ll long long\nusing namespace std;\nconst ll maxn = 1e6;\nll n,m,p;\nll tree[maxn*4],lazy1[maxn],lazy2[maxn];\ninline ll read();\nvoid pushdown1(ll,ll,ll);\nvoid pushdown2(ll,ll,ll);\nvoid build(ll node,ll l,ll r)\n{\n    if(l == r) {\n        tree[node] = read();\n        return;\n    }\n    ll mid = (l + r) >> 1;\n    build(node<<1,l,mid);\n    build(node<<1|1,mid+1,r);\n    tree[node] = (tree[node<<1] + tree[node<<1|1])%p; \n}\nvoid pushdown1(ll node,ll l,ll r)\n{\n    if(lazy1[node] == 1) return;\n    ll mid = (l + r) >> 1;\n    lazy1[node<<1] = (lazy1[node<<1]*lazy1[node])%p;\n    lazy1[node<<1|1] = (lazy1[node<<1|1]*lazy1[node])%p;\n    lazy2[node<<1] = (lazy2[node<<1]*lazy1[node])%p;\n    lazy2[node<<1|1] = (lazy2[node<<1|1]*lazy1[node])%p;\n    tree[node<<1] = (tree[node<<1]*lazy1[node])%p;\n    tree[node<<1|1] = (tree[node<<1|1]*lazy1[node])%p;\n    lazy1[node] = 1;//\u4e00\u5b9a\u8981\u91cd\u7f6e \n}\nvoid pushdown2(ll node,ll l,ll r)\n{\n    if(lazy2[node] == 0) return;\n    ll mid = (l + r) >> 1;\n    lazy2[node<<1] = (lazy2[node<<1] + lazy2[node])%p;\n    lazy2[node<<1|1] = (lazy2[node<<1|1] + lazy2[node])%p;\n    tree[node<<1] = (tree[node<<1] + (mid - l + 1)*lazy2[node]%p)%p;\n    tree[node<<1|1] = (tree[node<<1|1] + (r - mid)*lazy2[node]%p)%p;\n    lazy2[node] = 0;//\u4e00\u5b9a\u8981\u91cd\u7f6e \n}\nvoid update1(ll node,ll l,ll r,ll x,ll y,ll k)\n{\n    if(x > r || l > y) return;\n    if(x <= l && r <= y) {\n        pushdown1(node,l,r);\n        pushdown2(node,l,r);\n        lazy1[node] = (lazy1[node]*k)%p;\n        tree[node] = (tree[node]*k)%p;\n        return;\n    }\n    pushdown1(node,l,r);\n    pushdown2(node,l,r);\n    ll mid = (l + r) >> 1;\n    update1(node<<1,l,mid,x,y,k);\n    update1(node<<1|1,mid+1,r,x,y,k);\n    tree[node] = (tree[node<<1] + tree[node<<1|1])%p;\n}\nvoid update2(ll node,ll l,ll r,ll x,ll y,ll k)\n{\n    if(x > r || l > y) return;\n    if(x <= l && r <= y) {\n        pushdown1(node,l,r);\n        pushdown2(node,l,r);\n        lazy2[node] = (lazy2[node] + k)%p;\n        tree[node] = (tree[node] + (r - l + 1)*k%p)%p;\n        return;\n    }\n    pushdown1(node,l,r);\n    pushdown2(node,l,r);\n    ll mid = (l + r) >> 1;\n    update2(node<<1,l,mid,x,y,k);\n    update2(node<<1|1,mid+1,r,x,y,k);\n    tree[node] = (tree[node<<1] + tree[node<<1|1])%p;\n}\nll Query(ll node,ll l,ll r,ll x,ll y)\n{\n    if(x > r || l > y) return 0;\n    if(x <= l && r <= y) return tree[node];\n    ll mid = (l + r) >> 1;\n    pushdown1(node,l,r);\n    pushdown2(node,l,r);\n    return (Query(node<<1,l,mid,x,y) + Query(node<<1|1,mid+1,r,x,y))%p;\n}\nint main()\n{\n    n = read();m = read();p = read();\n    for(ll i=0;i<maxn;i++) lazy1[i] = 1;\n    build(1,1,n);\n//    cout<<\" \"<<tree[8]<<\" \"<<tree[9]<<\" \"<<tree[5]<<\" \"<<tree[6]<<\" \"<<tree[7]<<endl;\n    ll p,x,y,k;\n    while(m-- && scanf(\"%lld\",&p)) {\n        if(p == 1) {\n            x = read();y = read();k = read();\n            update1(1,1,n,x,y,k);\n/*    cout<<\"lazy1:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy1[i]<<\" \";\n    cout<<endl;\n    cout<<\"lazy2:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy2[i]<<\" \";\n    cout<<endl;\n    cout<<\"tree:\"<<\" \"<<tree[8]<<\" \"<<tree[9]<<\" \"<<tree[5]<<\" \"<<tree[6]<<\" \"<<tree[7]<<endl;*/\n        }\n        else if(p == 2) {\n            x = read();y = read();k = read();\n            update2(1,1,n,x,y,k);\n/*    cout<<\"lazy1:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy1[i]<<\" \";\n    cout<<endl;\n    cout<<\"lazy2:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy2[i]<<\" \";\n    cout<<endl;\n    cout<<\"tree:\"<<\" \"<<tree[8]<<\" \"<<tree[9]<<\" \"<<tree[5]<<\" \"<<tree[6]<<\" \"<<tree[7]<<endl;*/\n        }\n        else {\n            x = read();y = read();\n            printf(\"%lld\\n\",Query(1,1,n,x,y));\n/*    cout<<\"lazy1:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy1[i]<<\" \";\n    cout<<endl;\n    cout<<\"lazy2:\"<<\" \";\n    for(int i=1;i<=9;i++) cout<<lazy2[i]<<\" \";\n    cout<<endl;\n    cout<<\"tree:\"<<\" \"<<tree[8]<<\" \"<<tree[9]<<\" \"<<tree[5]<<\" \"<<tree[6]<<\" \"<<tree[7]<<endl;*/\n        }\n    }\n    return 0;\n}\ninline ll read()\n{\n    ll w=1,x=0;\n    char ch = getchar();\n    while(ch < '0' || ch > '9') {\n        if(ch == '-') w = -1;\n        ch = getchar();\n    }\n    while(ch <= '9' && ch >= '0') {\n        x = (x<<1) + (x<<3) + ch - '0';\n        ch = getchar();\n    }\n    return x*w;\n}\n```",
        "postTime": 1510024578,
        "uid": 17326,
        "name": "\u6797\u5fd7\u6770",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "**\u63a53372\u6211\u9898\u89e3\u7684\u677f\u5b50\u4fee\u6539\uff0c\u4f9d\u65e7\u53c2\u8003will\u5927\u4f6c\u548cCSDN\uff1ahttp://www.cnblogs.com/TenosDoIt/p/3453089.html**\n\n\u5173\u4e8e3373\uff0c\u6709\u51e0\u4e2a\u7ec6\u8282\u8981\u63d0\u4e00\u4e0b\u3002\n\n1\uff1atag2\u7684\u521d\u59cb\u503c\u4e3a1\uff1b\n\n2\uff1apushdown\u91cc\u5148tag2\u540etag1\uff08\u5148\u4e58\u540e\u52a0\uff09\uff1b\n\n3\uff1a\u5bf9tag2\u8fdb\u884cpush\u9700\u8981\u5148\u628atag1\\*tag2\uff0ctag2\\*tag2\uff0cval\\*tag2\uff0c\u6700\u540e\u522b\u5fd8\u4e86tag2=1\uff1b\n\n4\uff1atag2\u4e0d\u9700\u8981\u4e58\u533a\u95f4\uff1b\n\n\n\u4e0b\u9762\u662fcode\uff1a\n\n        \n        \n        \n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct node{\n    long long val,lazytag,lazytag2;\n}segTree[100000*4+5];\nlong long a[100005];\nlong long n,m,t,x,y,k,p;\nvoid build(int root,long long arr[],int istart,int iend){//\u5efa\u6811\n    segTree[root].lazytag=0;\n    segTree[root].lazytag2=1;\n    if(istart==iend){\n        segTree[root].val=arr[istart];\n    }else{\n        int mid=(istart+iend)/2;\n        build(root*2,arr,istart,mid);\n        build(root*2+1,arr,mid+1,iend);\n        segTree[root].val=segTree[root*2].val+segTree[root*2+1].val;\n    }\n}\nvoid pushDown(int root,int start,int end){//\u63d2\u5165\u61d2\u6807\u8bb0\n    **if(segTree[root].lazytag2!=1){**\n        segTree[root*2].lazytag=(segTree[root*2].lazytag*segTree[root].lazytag2)%p;\n        segTree[root*2+1].lazytag=(segTree[root*2+1].lazytag*segTree[root].lazytag2)%p;\n        segTree[root*2].lazytag2=(segTree[root*2].lazytag2*segTree[root].lazytag2)%p;\n        segTree[root*2+1].lazytag2=(segTree[root*2+1].lazytag2*segTree[root].lazytag2)%p;\n        int midd=(end+start)/2;\n        segTree[root*2].val=(segTree[root*2].val*(segTree[root].lazytag2))%p;\n        segTree[root*2+1].val=(segTree[root*2+1].val*(segTree[root].lazytag2))%p;\n        segTree[root].lazytag2=1;\n    } \n    if(segTree[root].lazytag!=0){\n        segTree[root*2].lazytag+=segTree[root].lazytag;\n        segTree[root*2+1].lazytag+=segTree[root].lazytag;\n        int mid=(end+start)/2;\n        segTree[root*2].val+=segTree[root].lazytag*(mid-start+1);\n        segTree[root*2+1].val+=segTree[root].lazytag*(end-mid);\n        segTree[root].lazytag=0;\n    }\n}\nlong long query(int root,int nstart,int nend,int qstart,int qend){//\u67e5\u8be2\u533a\u95f4\n    if(qstart>nend||qend<nstart){\n        return 0; \n    }if(qstart<=nstart&&qend>=nend){\n        return segTree[root].val;\n    }\n    pushDown(root,nstart,nend);\n    int mid=(nstart+nend)/2;\n    return query(root*2,nstart,mid,qstart,qend)+query(root*2+1,mid+1,nend,qstart,qend);\n}\nvoid update(int root,int nstart,int nend,int ustart,int uend,int addval){//\u8d4b\u503c\n    if(ustart>nend||uend<nstart){\n        return;\n    }if(ustart<=nstart&&uend>=nend){\n        segTree[root].lazytag+=addval;\n        segTree[root].val+=addval*(nend-nstart+1);\n        return;\n    }\n    pushDown(root,nstart,nend);\n    int mid=(nstart+nend)/2;\n    update(root*2,nstart,mid,ustart,uend,addval);\n    update(root*2+1,mid+1,nend,ustart,uend,addval);\n    segTree[root].val=segTree[root*2].val+segTree[root*2+1].val;\n}\n**void tupdate(int root,int nstart,int nend,int ustart,int uend,int addval){//\u8d4b\u503c(chengfa**\n    if(ustart>nend||uend<nstart){\n        return;\n    }if(ustart<=nstart&&uend>=nend){\n        segTree[root].lazytag=(segTree[root].lazytag*addval)%p;\n        segTree[root].lazytag2=(segTree[root].lazytag2*addval)%p;\n        segTree[root].val=(segTree[root].val*addval)%p;\n        return;\n    }\n    pushDown(root,nstart,nend);\n    int mid=(nstart+nend)/2;\n    tupdate(root*2,nstart,mid,ustart,uend,addval);\n    tupdate(root*2+1,mid+1,nend,ustart,uend,addval);\n    segTree[root].val=segTree[root*2].val+segTree[root*2+1].val;\n}\nint main(){\n    scanf(\"%lld%lld%lld\",&n,&m,&p);\n    for(int i=1;i<=n;i++){\n        scanf(\"%lld\",&a[i]);\n    }\n    build(1,a,1,n);\n    for(int i=1;i<=m;i++){\n        scanf(\"%lld\",&t);\n        if(t==2){\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            update(1,1,n,x,y,k);\n        }if(t==3){\n            scanf(\"%lld%lld\",&x,&y);\n            printf(\"%lld\\n\",query(1,1,n,x,y)%p);\n        }if(t==1){\n            scanf(\"%lld%lld%lld\",&x,&y,&k);\n            tupdate(1,1,n,x,y,k);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1509624041,
        "uid": 20609,
        "name": "\u6e21\u6d77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    },
    {
        "content": "\u6807\u51c6\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u6700\u57fa\u7840\u7684\u5e94\u7528\u770b\u7740\u7b80\u5355\u7136\u800c\u6709\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\n\n\u7279\u522b\u8981\u6ce8\u610f\u51e0\u70b9\uff08\u90fd\u662f\u81ea\u5df1\u5199\u65f6\u6539\u4e86\u5f88\u591a\u904d\u7684\u5730\u65b9\uff09\uff1a\n\n\n1\u3001\u5f00long long\n\n\n2\u3001\u5982\u679c\u5b9a\u4e49mid\u7684\u8bdd\u4e00\u5b9a\u8981\u52a0()\n\n\n3\u3001\u4e0b\u4f202\u4e2a\u6807\u8bb0\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u5148\u4e58\u540e\u52a0 \uff0c \u4e0d\u7136\u4e00\u5b9a\u9519\n\n\n\u5173\u4e8e\u5e38\u6570\u4f18\u5316\uff0c\u9664\u4e86\u4f4d\u8fd0\u7b97\uff0c\u4e5f\u53ef\u4ee5\u5c11 MOD \u51e0\u6b21\uff0c\u4f3c\u4e4e\u80fd\u52a0\u5feb\uff08\u7136\u800c\u6211\u5e76\u7528\u4e0d\u6765\uff09\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,j,n) for(int i=j;i<=n;i++)\nusing namespace std;\ntypedef long long ll;\nconst int N=100010;\nint n,m,type,x,y , mod;\nll tree[N<<2],addv[N<<2],mul[N<<2],c[N], k;   //\u56db\u500d\u7a7a\u95f4\n#define lson o<<1\n#define rson o<<1|1\n#define mid (l+r>>1)  //\u4e3a\u4e86\u5077\u61d2\u3002\u3002\ninline void up(int o) { tree[o]=tree[lson]+tree[rson] ; }  //\u5408\u5e76\u533a\u95f4\u4fe1\u606f\ninline void build(int o,int l,int r) {\n    mul[o]=1;\n    if(l==r) { tree[o]=c[l]%mod; return ;}\n    build(lson,l,mid) ; build(rson,mid+1,r) ; up(o);\n}\ninline void down(int o,int l,int r,int ls,int rs) {  //\u4e0b\u4f202\u4e2alazytag\n    if(mul[o]!=1) {   //\u6ce8\u610f\u5148\u4e58\u540e\u52a0\n        ll x=mul[o] ; mul[o]=1;  //\u8fd9\u91cc\u7684\u4e2d\u95f4\u53d8\u91cf\u4e5f\u4e00\u5b9a\u8981\u5f00long long \n        (addv[ls]*=x) %=mod ; (mul[ls]*=x) %=mod ; (tree[ls]*=x) %=mod;\n        (addv[rs]*=x) %=mod ; (mul[rs]*=x) %=mod ; (tree[rs]*=x) %=mod;\n    }\n    if(addv[o]!=0) {\n        ll x=addv[o] ; addv[o]=0;\n        (addv[ls]+=x) %=mod ; (tree[ls]+=x*(mid-l+1)) %=mod;\n        (addv[rs]+=x) %=mod ; (tree[rs]+=x*(r - mid)) %=mod;\n    }\n}\ninline void update(int o,int l,int r,int L,int R ,ll x, int type) {\n    if(L<=l && r<=R ) {\n        if(type==2) (addv[o]+=x)%=mod , (tree[o]+=x*(r-l+1)) %=mod ;\n        else (addv[o]*=x) %=mod , (mul[o]*=x) %=mod , (tree[o]*=x) %=mod; return ;\n    }\n    down(o,l,r,lson,rson) ;\n    if(L<=mid) update(lson,l,mid,L,R,x,type); \n    if(R>mid) update(rson,mid+1,r,L,R,x,type);\n    up(o) ;\n}\ninline ll query(int o,int l,int r,int L,int R ){\n    if(L<=l && r<=R ) return tree[o] ;\n    down(o,l,r,lson,rson) ; ll ret =0 ;\n    if(L<=mid)  (ret+=query(lson,l,mid,L,R) ) %=mod;\n    if(R>mid) (ret+=query(rson,mid+1,r,L,R) ) %=mod;\n    return ret; \n}\nint main() {\n    scanf(\"%d%d%d\",&n,&m,&mod);\n    rep(i,1,n) scanf(\"%lld\",&c[i]) ;\n    build(1,1,n) ;\n    while(m--) {\n        scanf(\"%d\",&type);\n        if(type==3) scanf(\"%d%d\",&x,&y) , printf(\"%lld\\n\",query(1,1,n,x,y)) ;\n        else scanf(\"%d%d%lld\",&x,&y,&k) , update(1,1,n,x,y,k,type);\n    }\n    return 0;\n}\n```",
        "postTime": 1508724806,
        "uid": 27276,
        "name": "\u738b\u5c06\u98de\u626cCliffly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3373 \u3010\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 2\u3011"
    }
]