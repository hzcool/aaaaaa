[
    {
        "content": "[\u63d0\u4ea4\u8bb0\u5f55\u4fe1\u606f](https://www.luogu.com.cn/record/104003469) / [\u5b98\u65b9\u6570\u636e\u96c6](https://github.com/THUSAAC/THUPC2023-Pre/tree/master/day0/I) / [\u539f\u9898\u4f20\u9001](https://www.luogu.com.cn/problem/P9141)\n\n\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u9053\u9898\u76ee\u6254\u5230\u4e00\u4e2a 4.5 \u5c0f\u65f6\u7684 ACM \u7ade\u8d5b\u91cc\u9762\u786e\u5b9e\u6709\u4e9b\u4e27\u5c3d\u5929\u826f\u4e86.jpg\n\n## 0x00 \u9898\u610f\n\n\u4f60\u9700\u8981\u6a21\u62df\u4e00\u7cfb\u5217\u975e\u5e38\u590d\u6742\u7684\u7a7a\u4e2d\u6218\u4e89\u7cfb\u7edf\uff0c\u5177\u4f53\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u539f\u9898\u4fe1\u606f\u3002\n\n## 0x01 \u5411\u91cf\n\n\u8fd9\u9053\u9898\u76ee\u7684\u72b6\u6001\u7ed5\u4e0d\u5f00\u4e09\u7ef4\u5411\u91cf\uff0c\u6545\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u57fa\u7840\u7684\u4e09\u7ef4\u5411\u91cf\u7c7b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u57fa\u7840\u7684\u6570\u5b66\u51fd\u6570\uff1a\n\n```cpp\nconst double PI = -acos(-1.0);\nconst double EPS = 1e-9;\n\nbool isZero (double x) {\n  return abs(x) < EPS;\n}\n\ndouble clamp (double x) {\n  return max(-1.0, min(x, 1.0));\n}\n\nstruct Vec3 {\n  double x, y, z;\n  Vec3 (double x, double y, double z)\n    :x(x), y(y), z(z) {}\n  Vec3 () {\n    x = y = z = 0;\n  }\n  double Dot (Vec3 v) {\n    return x * v.x + y * v.y + z * v.z;\n  }\n  Vec3 Cross (Vec3 v) {\n    return Vec3(\n      y * v.z - z * v.y,\n      z * v.x - x * v.z,\n      x * v.y - y * v.x\n    );\n  }\n  double Length () {\n    return sqrt(x * x + y * y + z * z);\n  }\n  Vec3 operator - () {\n    return Vec3 (-x, -y, -z);\n  }\n  Vec3 operator + (Vec3 v) {\n    return Vec3 (\n      x + v.x, y + v.y, z + v.z\n    );\n  }\n  Vec3 operator * (double len) {\n    return Vec3 (x * len, y * len, z * len);\n  }\n  Vec3 operator / (double len) {\n    return *this * (1 / len);\n  }\n  Vec3 Norm () {\n    return (*this) / (*this).Length();\n  }\n  Vec3 operator - (Vec3 v) {\n    return *this + (-v);\n  }\n  double Angle (Vec3 v) {\n    return acos(clamp(Dot(v)));\n  }\n  bool _isZero () {\n    return isZero(Length());\n  }\n  void init () {\n    scanf(\" %lf %lf %lf\", &x, &y, &z);\n  }\n};\n```\n\n\u6ce8\u610f\u5728\u5c06\u70b9\u4e58\u7ed3\u679c\u5957\u5165 `acos()` \u51fd\u6570\u524d\uff0c\u9700\u8981\u5148 `clamp()` \u4e00\u4e0b\uff0c\u9632\u6b62\u7ed3\u679c\u5c0f\u4e8e -1 \u5bfc\u81f4\u8fd4\u56de `nan`\u3002\n\n\u8fd9\u9053\u9898\u6d89\u53ca\u5230\u70b9\u5230\u7ebf\u6bb5\u7684\u8ddd\u79bb\uff0c\u4ee5\u53ca\u4e09\u7ef4\u5411\u91cf\u5230\u9762\u7684\u6620\u5c04\u3002\u524d\u8005\u53ef\u4ee5\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba\u89e3\u51b3\uff0c\u540e\u8005\u53ea\u9700\u8981\u901a\u8fc7\u70b9\u4e58\u8ba1\u7b97\u51fa\u5728\u5355\u4f4d\u5411\u91cf\u7684\u5206\u5411\u91cf\uff0c\u6545\u6709\uff1a\n\n```cpp\ndouble minLength (Vec3 a, Vec3 b, Vec3 c) {\n  Vec3 ca = a - c, cb = b - c, ab = b - a;\n  if (ca.Dot(ab) > 0)\n    return ca.Length();\n  if (ab.Dot(cb) < 0)\n    return cb.Length();\n  return ca.Cross(cb).Length() / ab.Length();\n}\n\npair<double, double> Alpha (Vec3 x, Vec3 y, Vec3 p) {\n  return make_pair(x.Dot(p), y.Dot(p));\n}\n```\n\n## 0x02 \u65e0\u4eba\u673a\n\n\u5148\u5b9a\u4e49\u7c7b\uff1a\n\n```cpp\nstruct Plane {\n  Vec3 p, d, u, l;\n  int id, from;\n  bool crashed;\n  int target;\n  double tu, td, gm, v, lx, hy;\n  Vec3 strategy;\n};\n```\n\n\u8003\u8651\u8ba1\u7b97\u5c06\u98de\u673a\u79fb\u52a8\u5230\u4e00\u4e2a\u4f4d\u7f6e\u65f6\u7684\u4ee3\u4ef7\u3002\u6839\u636e\u9898\u76ee\u6761\u4ef6\uff0c\u663e\u7136\u53ef\u4ee5\u5f97\u5230\uff1a\u4e00\u4e2a\u5408\u6cd5\u79fb\u52a8\u5e94\u8be5\u662f\u6240\u6709\u5230\u8fbe\u540c\u7b49\u4f4d\u7f6e\u7684\u79fb\u52a8\u4e2d\u6700\u5feb\u7684\uff0c\u6545\u4e0d\u4f1a\u505c\u505c\u8d70\u8d70\uff0c\u800c\u662f\u8fde\u7eed\u8fdb\u884c\u64cd\u4f5c\u5230\u8fbe\u76ee\u7684\u5730\u3002\u4ee3\u4ef7\u9700\u8981\u5206\u4e09\u90e8\u5206\u8ba1\u7b97\uff1a\n\n- **\u6eda\u52a8**\uff1a\u8003\u8651\u5230\u5728\u6eda\u52a8\u540e $\\vec{l}$ \u9700\u8981\u5782\u76f4\u4e8e $\\vec{d}$ \u548c $\\vec{d'}$ \u5f62\u6210\u7684\u9762\u4e0a\uff0c\u6545\u5148\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u9762\u7684\u6cd5\u5411\u91cf\uff08\u53ea\u9700\u8981\u4e00\u6b21\u53c9\u4e58\uff09\uff0c\u5224\u65ad\u662f\u5426\u9700\u8981\u7ffb\u8f6c\u540e\u8ba1\u7b97\u548c $\\vec{l}$ \u7684\u5939\u89d2\u5373\u53ef\u3002\u6b64\u5904\u9700\u8981\u7279\u5224 $\\vec{d}$ \u548c $\\vec{d'}$ \u5e73\u884c\u7684\u60c5\u51b5\uff0c\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4e0d\u6eda\u52a8\u3002\n- **\u4fef\u4ef0**\uff1a\u76f4\u63a5\u8ba1\u7b97 $\\vec{d}$ \u548c $\\vec{d'}$ \u7684\u5939\u89d2\u5373\u53ef\u3002\n- **\u76f4\u7ebf\u79fb\u52a8**\uff1a\u76f4\u63a5\u8ba1\u7b97\u4f4d\u7f6e\u8ddd\u79bb\u5373\u53ef\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4f30\u4ef7\u548c\u79fb\u52a8\u4ee3\u7801\uff1a\n\n```cpp\ndouble planeMoveCost (Plane &p, Vec3 delta) {\n  Vec3 dir = delta.Norm();\n  Vec3 L = p.d.Cross(dir);\n  if (L._isZero())\n    L = p.l;\n  else {\n    L = L.Norm();\n    if (L.Dot(p.l) < 0)\n      L = - L;\n  }\n  double SpinTo = L.Angle(p.l);\n  double RotateTo = p.d.Angle(dir);\n  return SpinTo / p.gm + RotateTo / (p.u.Dot(dir) >= 0 ? p.tu : p.td) + delta.Length() / p.v;\n}\n\nvoid planeMoveTo (Plane &p, Vec3 delta) {\n  if (delta._isZero()) {\n    swap(p.u, p.d);\n    p.u = - p.u;\n    return;\n  }\n  p.p = p.p + delta;\n  Vec3 dir = delta.Norm();\n  Vec3 L = p.d.Cross(dir);\n  if (L._isZero())\n    L = p.l;\n  else {\n    L = L.Norm();\n    if (L.Dot(p.l) < 0)\n      L = - L;\n  }\n  p.d = dir;\n  p.l = L;\n  p.u = p.d.Cross(p.l);\n}\n```\n\n## 0x03 \u5bfc\u5f39\n\n\u4f9d\u7136\u5148\u5b9a\u4e49\u7c7b\uff1a\n\n```cpp\nstruct Missle {\n  Vec3 p, d;\n  double tr, v, ds, dp, bs;\n  bool activated;\n  bool explosive;\n  bool used;\n  bool lost;\n  int target;\n  int tz;\n  int id;\n  Vec3 strategy;\n};\n```\n\n\u5bfc\u5f39\u7684\u4ee3\u4ef7\u8ba1\u7b97\u76f8\u5bf9\u7b80\u5355\uff0c\u504f\u822a\u89d2\u5ea6\u5c31\u662f\u4e24\u4e2a\u98de\u884c\u65b9\u5411\u7684\u5939\u89d2\uff0c\u957f\u5ea6\u4e5f\u5f88\u597d\u7b97\uff0c\u6545\u6709\uff1a\n\n```cpp\ndouble missleMoveCost (Missle& m, Vec3 delta) {\n  Vec3 dir = delta.Norm();\n  double SpinTo = m.d.Angle(dir);\n  return SpinTo / m.tr + delta.Length() / m.v;\n}\n\nvoid missleMoveTo (Missle &m, Vec3 delta) {\n  m.p = m.p + delta;\n  Vec3 dir = delta.Norm();\n  m.d = dir;\n  -- m.tz;\n}\n\n```\n\n## 0x04 \u7b56\u7565\n\n\u65e0\u4eba\u673a\u9700\u8981\u5728\u65f6\u523b\u5f00\u59cb\u65f6\u786e\u5b9a\u76ee\u6807\u3002\u6839\u636e\u9898\u76ee\u7684\u5206\u5e03\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\uff0c\u4ece\u800c\u5feb\u901f\u5b9e\u73b0\u3002\n\n\u5176\u4e2d\uff0c\u5224\u5b9a\u89c6\u91ce\u76f4\u63a5\u5229\u7528\u9898\u76ee\u516c\u5f0f\u70b9\u4e58\u5224\u65ad\u5373\u53ef\uff0c\u5224\u65ad\u96f7\u8fbe\u4e5f\u53ef\u4ee5\u5229\u7528\u524d\u9762\u5b9e\u73b0\u7684 `Alpha()` \u51fd\u6570\u8ba1\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u201c\u9700\u4e0d\u9700\u8981\u6362 -> \u6709\u6ca1\u6709\u96f7\u8fbe\u533a\u5185\u7684 -> \u6709\u6ca1\u6709\u89c6\u91ce\u5185\u7684\u201d\u7684\u987a\u5e8f\u679a\u4e3e\u5e76\u5224\u65ad\u3002\n\n```cpp\nbool inView (Plane &p, Plane &q) {\n  return p.d.Dot(q.p - p.p) > EPS;\n}\n\nbool detective (Plane &p, Plane &q) {\n  if (! inView(p, q))\n    return false;\n  pair<double, double> loc = Alpha(p.l, p.u, q.p - p.p);\n  return abs(loc.first) <= p.lx + EPS && abs(loc.second) <= p.hy + EPS;\n}\n\nvoid planeChoose (Plane &p) {\n  if (p.target != 0 && !planes[p.target].crashed && inView(p, planes[p.target]))\n    return;\n  p.target = 0;\n  double q1 = 1e18;\n  int id = -1;\n  for (int i = 1; i <= 2 * N; i ++) {\n    if (i == p.id || planes[i].crashed || planes[i].from == p.from)\n      continue;\n    if (detective (p, planes[i])) {\n      double val = (p.p - planes[i].p).Length();\n      if (q1 - val > EPS) {\n        q1 = val;\n        id = i;\n      }\n    }\n  }\n  if (id != -1) {\n    p.target = id;\n    return;\n  }\n  q1 = 1e18, id = -1;\n  for (int i = 1; i <= 2 * N; i ++) {\n    if (i == p.id || planes[i].crashed || planes[i].from == p.from)\n      continue;\n    if (inView (p, planes[i])) {\n      pair<double, double> loc = Alpha(p.l, p.u, planes[i].p - p.p);\n      double val = min(abs(loc.first - p.lx), abs(loc.first + p.lx))\n                  + min(abs(loc.second - p.hy), abs(loc.second + p.hy));\n      if (q1 - val > EPS) {\n        q1 = val;\n        id = i;\n      }\n    }\n  }\n  if (id != -1) {\n    p.target = id;\n    return;\n  }\n}\n```\n\n\u968f\u540e\u5c31\u662f\u7b56\u7565\u9009\u62e9\u3002\u8003\u8651\u5230\u6bcf\u4e2a\u65f6\u523b\u524d\u540e\u65e0\u4eba\u673a\u53ea\u4f1a\u51fa\u73b0\u5728\u6574\u70b9\u5904\uff0c\u800c $v_m$ \u8303\u56f4\u5e76\u4e0d\u5927\uff0c\u6545\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u9644\u8fd1\u7684\u6574\u70b9\uff0c\u5224\u65ad\u4ee3\u4ef7\u540e\u501f\u52a9\u9898\u76ee\u63d0\u4f9b\u7684\u6d41\u7a0b\u7ffb\u8bd1\u6210\u5bf9\u5e94\u4ee3\u7801\u5c31\u597d\u4e86\u3002\u76f8\u4fe1\u6765\u5230\u8fd9\u4e00\u6b65\uff0c\u4f60\u5bf9\u9898\u76ee\u8bbe\u8ba1\u7684\u4e13\u4e1a\u540d\u8bcd\u5df2\u7ecf\u5f88\u719f\u6089\u4e86\uff01\n\n\u4ee3\u7801\u4e2d `Vec(0, 0, 0)` \u4ee3\u8868\u773c\u955c\u86c7\u673a\u52a8\u6807\u8bc6\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u673a\u52a8\u5fc5\u7136\u9700\u8981\u79fb\u52a8\u3002\n\n```cpp\nvoid planeStrategy (Plane &p) {\n  if (!p.target)\n    p.strategy = Vec3 (0, 0, 0);\n  else {\n    Plane q = planes[p.target];\n    int P = floor(p.v);\n    Vec3 cur;\n    double q1 = 1e18, q2 = 1e18;\n    vector<pair<Vec3, Plane> > vs;\n    for (int i = - P; i <= P; i ++)\n      for (int j = - P; j <= P; j ++)\n        for (int k = - P; k <= P; k ++)\n          if ((i != 0 || j != 0 || k != 0) && (cur = Vec3(i, j, k)).Length() <= p.v) {\n            Plane np = p;\n            double l = (p.p + cur - q.p).Length();\n            if (planeMoveCost(np, cur) <= 1.0 + EPS) {\n              planeMoveTo(np, cur);\n              if (inView(np, q)) {\n                if (q1 - l > EPS)\n                  vs.clear(), q1 = l;\n                if (isZero(q1 - l))\n                  vs.emplace_back(cur, np);\n              }\n            }\n          }\n    q1 = 1e18; int id = -1;\n    bool det = false;\n    for (int i = 0; i < (int)vs.size(); i ++) {\n      Plane np = vs[i].second;\n      pair<double, double> loc = Alpha(np.l, np.u, q.p - np.p);\n      if (detective(np, q)) {\n        det = true;\n        double val = sqrt(loc.first * loc.first + loc.second * loc.second);\n        if (q1 - val > EPS)\n          q1 = val, id = i;\n      }\n      else if (! det) {\n        double val = min(abs(loc.first - np.lx), abs(loc.first + np.lx))\n                  + min(abs(loc.second - np.hy), abs(loc.second + np.hy));\n        if (q2 - val > EPS)\n          q2 = val, id = i;\n      }\n    }\n    if (id != -1)\n      p.strategy = vs[id].first;\n    else {\n      Vec3 exp = p.d * p.v;\n      Vec3 str = Vec3(0, 0, 0);\n      for (int i = - P; i <= P; i ++)\n        for (int j = - P; j <= P; j ++)\n          for (int k = - P; k <= P; k ++)\n            if ((i != 0 || j != 0 || k != 0) && (cur = Vec3(i, j, k)).Length() <= p.v) {\n              if (planeMoveCost(p, cur) <= 1.0 + EPS) {\n                double val = (exp - cur).Length();\n                if (q1 - val > EPS)\n                  q1 = val, str = cur;\n              }\n            }\n      p.strategy = str;\n    }\n  }\n}\n```\n\n\u5bfc\u5f39\u4e5f\u9700\u8981\u5b9e\u73b0\u7b56\u7565\u3002\u5728\u5b9e\u73b0\u9501\u5b9a\u89d2\u76f8\u5173\u7684\u8f85\u52a9\u51fd\u6570\u540e\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u4e5f\u4e0d\u96be\u5199\u51fa\uff0c\u4e5f\u4e0d\u96be\u53d1\u73b0\u548c\u65e0\u4eba\u673a\u7b56\u7565\u4ee3\u7801\u7c7b\u4f3c\u3002\n\n```cpp\ndouble missleAngle (Missle &m, Plane &p) {\n  Vec3 v = (p.p - m.p).Norm();\n  return v.Angle(m.d);\n}\n\nbool missleDetective (Missle &m, Plane &p) {\n  if (p.crashed)\n    return false;\n  if (m.d.Dot(p.p - m.p) <= 0)\n    return false;\n  return missleAngle(m, p) <= m.bs;\n}\n\nvoid missleStrategy (Missle &m) {\n  int P = floor(m.v);\n  Vec3 cur;\n  double q1 = 1e18;\n  if (m.target) {\n    if (!m.lost) {\n      Plane q = planes[m.target];\n      planeMoveTo(q, q.strategy);\n      vector<pair<Vec3, Missle> > vs;\n      for (int i = - P; i <= P; i ++)\n        for (int j = - P; j <= P; j ++)\n          for (int k = - P; k <= P; k ++)\n            if ((i != 0 || j != 0 || k != 0) && (cur = Vec3(i, j, k)).Length() <= m.v) {\n              Missle nm = m;\n              double l = (m.p + cur - q.p).Length();\n              if (missleMoveCost(nm, cur) <= 1.0 + EPS) {\n                missleMoveTo(nm, cur);\n                if (isZero(l) || missleDetective(nm, q)) {\n                  if (q1 - l > EPS)\n                    q1 = l, vs.clear();\n                  if (isZero(q1 - l))\n                    vs.emplace_back(cur, nm);\n                }\n              }\n            }\n      if (isZero(q1)) {\n        m.strategy = vs[0].first;\n        return;\n      }\n      q1 = 1e18; int id = -1;\n      for (int i = 0; i < (int)vs.size(); i ++) {\n        double val = missleAngle(vs[i].second, q);\n        if (q1 - val > EPS)\n          q1 = val, id = i;\n      }\n      if (id != -1) {\n        m.strategy = vs[id].first;\n        return;\n      }\n    }\n  }\n\n  Vec3 exp = m.d * m.v;\n  Vec3 str = Vec3(0, 0, 0);\n\n  for (int i = - P; i <= P; i ++)\n    for (int j = - P; j <= P; j ++)\n      for (int k = - P; k <= P; k ++)\n        if ((i != 0 || j != 0 || k != 0) && (cur = Vec3(i, j, k)).Length() <= m.v) {\n          if (missleMoveCost(m, cur) <= 1.0 + EPS) {\n            double val = (exp - cur).Length();\n            if (q1 - val > EPS)\n              q1 = val, str = cur;\n          }\n        }\n  m.strategy = str;\n}\n```\n\n## 0x05 \u53d1\u5c04\u5bfc\u5f39\n\n\u65e0\u4eba\u673a\u5728\u7a7a\u95f2\u60c5\u51b5\u4e0b\u4f1a\u671d\u7740\u654c\u65b9\u53d1\u5c04\u5bfc\u5f39\u3002\u8fd9\u4e00\u90e8\u5206\u5176\u5b9e\u76f8\u5f53\u5bb9\u6613\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u65b0\u589e\u4e00\u4e2a\u7a7a\u95f2\u6570\u7ec4\u5373\u53ef\u3002\n\n```cpp\nvoid launchMissle (Plane &p) {\n  if (p.target != 0 && detective(p, planes[p.target]) && !idle[p.id]) {\n    Vec3 _p = planes[p.target].p;\n    Missle m = missleOpts[p.id];\n    m.p = p.p;\n    m.d = (_p - p.p).Norm();\n    m.target = p.target;\n    missles.push_back(m);\n    idle[p.id] = true;\n  }\n}\n```\n\n## 0x06 \u4e8b\u4ef6\u6574\u7406\n\n\u6700\u540e\u6839\u636e\u9898\u76ee\u63d0\u4f9b\u65f6\u523b\u4e8b\u4ef6\u8868\uff0c\u5c06\u6240\u6709\u7684\u6b65\u9aa4\u53d8\u6210\u5bf9\u5e94\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e3b\u51fd\u6570\uff1a\n\n```cpp\nvector<int> killList[210];\n\nvoid generateKillMessage (vector<pair<int, int> > kills) {\n  for (int i = 1; i <= 2 * N; i ++)\n    killList[i].clear();\n  for (auto l: kills)\n    killList[l.second].push_back(l.first);\n  for (int i = 1; i <= 2 * N; i ++) if (killList[i].size() != 0) {\n    printf(\"%d %d \", i, (int)killList[i].size());\n    sort(killList[i].begin(), killList[i].end());\n    for (auto x: killList[i])\n      printf(\"%d \", x);\n    printf(\"\\n\");\n  }\n}\n\nint main() {\n  scanf(\"%d %d\", &N, &T);\n  for (int i = 1; i <= 2 * N; i ++) {\n    planes[i].p.init();\n    planes[i].d.init();\n    planes[i].u.init();\n    planes[i].l = planes[i].u.Cross(planes[i].d);\n    scanf(\" %lf %lf %lf %lf %lf %lf\", &planes[i].tu, &planes[i].td, &planes[i].gm, &planes[i].v, &planes[i].lx, &planes[i].hy);\n    scanf(\" %lf %lf %lf %lf %lf %d\", &missleOpts[i].tr, &missleOpts[i].v, &missleOpts[i].ds, &missleOpts[i].dp, &missleOpts[i].bs, &missleOpts[i].tz);\n    planes[i].id = missleOpts[i].id = i;\n    planes[i].from = i <= N;\n    ++ missleOpts[i].tz;\n  }\n  while (T --) {\n    vector<pair<int, int> > kills1(0);\n    vector<pair<int, int> > kills2(0);\n    vector<vector<int> > group(0);\n    int ANS1 = 0, ANS2 = 0;\n    // \u6240\u6709\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5f53\u524d\u65f6\u523b\u5185\u7684\u98de\u884c\u7b56\u7565\n    for (int i = 1; i <= 2 * N; i ++) {\n      if (planes[i].crashed)\n        continue;\n      planeChoose(planes[i]);\n      planeStrategy(planes[i]);\n    }\n    // \u6240\u6709\u80fd\u53d1\u5c04\u5bfc\u5f39\u7684\u65e0\u4eba\u673a\u53d1\u5c04\u5bfc\u5f39\n    for (int i = 1; i <= 2 * N; i ++) {\n      if (planes[i].crashed)\n        continue;\n      launchMissle(planes[i]);\n    }\n    // \u6240\u6709\u5bfc\u5f39\u786e\u5b9a\u98de\u884c\u7b56\u7565\u5e76\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\n    for (auto &m: missles) {\n      missleStrategy(m);\n      Vec3 f = m.p, t = m.p + m.strategy;\n      missleMoveTo(m, m.strategy);\n      if (!m.activated) {\n        for (int i = 1; i <= 2 * N; i ++) {\n          if (!planes[i].crashed && (planes[i].p - m.p)._isZero()) {\n            kills1.emplace_back(m.id, i);\n            m.explosive = true;\n          }\n        }\n      }\n      else {\n        for (int i = 1; i <= 2 * N; i ++) {\n          if (!planes[i].crashed && minLength(f, t, planes[i].p) <= m.dp) {\n            kills1.emplace_back(m.id, i);\n            m.explosive = true;\n          }\n        }\n      }\n    }\n    for (auto l: kills1) {\n      if (! planes[l.second].crashed) {\n        planes[l.second].crashed = true;\n        ++ ANS1;\n      }\n    }\n    // \u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n    for (auto &m: missles) {\n      if (m.explosive && !m.used) {\n        m.used = true;\n        idle[m.id] = false;\n      }\n    }\n    // \u6240\u6709\u65e0\u4eba\u673a\u6309 1. \u4e2d\u786e\u5b9a\u7684\u98de\u884c\u7b56\u7565\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\n    for (int i = 1; i <= 2 * N; i ++) {\n      if (planes[i].crashed)\n        continue;\n      Vec3 f = planes[i].p, t = planes[i].p + planes[i].strategy;\n      planeMoveTo(planes[i], planes[i].strategy);\n      for (auto &m: missles) {\n        if (m.activated && !m.used && minLength(f, t, m.p) <= m.dp) {\n          kills2.emplace_back(m.id, i);\n          m.explosive = true;\n        }\n        else if (!m.activated && !m.used && (m.p - planes[i].p)._isZero()) {\n          kills2.emplace_back(m.id, i);\n          m.explosive = true;\n        }\n      }\n    }\n    for (auto l: kills2) {\n      if (! planes[l.second].crashed) {\n        planes[l.second].crashed = true;\n        ++ ANS2;\n      }\n    }\n    // \u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n    for (auto &m: missles) {\n      if (m.explosive && !m.used) {\n        m.used = true;\n        idle[m.id] = false;\n      }\n    }\n    // \u6240\u6709\u4f4d\u7f6e\u76f8\u540c\u7684\u65e0\u4eba\u673a\u53d1\u751f\u78b0\u649e\u5e76\u5760\u6bc1\n    for (int i = 1; i <= 2 * N; i ++) {\n      if (planes[i].crashed)\n        continue;\n      vector<int> v(0);\n      v.push_back(i);\n      for (int j = i + 1; j <= 2 * N; j ++) {\n        if (!planes[j].crashed && (planes[j].p - planes[i].p)._isZero())\n          v.push_back(j);\n      }\n      if (v.size() > 1) {\n        group.push_back(v);\n        for (auto p: v)\n          planes[p].crashed = true;\n      }\n    }\n    // \u6240\u6709\u8d85\u8fc7\u5236\u5bfc\u65f6\u957f\u548c\u8131\u9501\u4e14\u5df2\u6fc0\u6d3b\u7684\u5bfc\u5f39\u6d88\u5931\n    for (auto &m: missles) {\n      if (!m.used) {\n        if (!missleDetective(m, planes[m.target]))\n          m.lost = true;\n        if (m.tz == 0 || (m.activated && m.lost)) {\n          m.used = true;\n          idle[m.id] = false;\n        }\n      }\n    }\n    // \u6240\u6709\u53ef\u6fc0\u6d3b\u7684\u5bfc\u5f39\u88ab\u6fc0\u6d3b\n    vector<Missle> nms;\n    for (auto &m: missles) {\n      if (!m.used) {\n        if (planes[m.id].crashed || (m.p - planes[m.id].p).Length() > m.ds)\n          m.activated = true;\n        nms.push_back(m);\n      }\n    }\n    missles = nms;\n\n    printf(\"%d %d %d\\n\", ANS1, ANS2, (int)group.size());\n    generateKillMessage(kills1);\n    generateKillMessage(kills2);\n    for (auto v: group) {\n      printf(\"%d \", (int)v.size());\n      for (auto x: v)\n        printf(\"%d \", x);\n      printf(\"\\n\");\n    }\n  }\n  return 0;\n}\n```\n\n\u6574\u5408\u540e\u5f97\u5230\u6700\u7ec8\u4ee3\u7801\uff1a[\u8fd9\u91cc](https://www.luogu.com.cn/paste/ewhkj68t)\u3002\n\n## 0x07 \u7ed3\u675f\u4e86\u2026\u2026\uff1f\n\n\u5f53\u7136\u6ca1\u6709\u3002\u8fd9\u9053\u9898\u76ee\u8bbe\u7acb\u4e86\u76f8\u5f53\u591a\u7684\u5751\u70b9\uff0c\u7a0d\u6709\u4e0d\u614e\u5c31\u4f1a\u8bef\u5165\u6b67\u9014\u3002\n\n- \u9898\u76ee\u4e2d\u7684\u5236\u5bfc\u65f6\u957f $t_z$ \u4ee3\u8868 \u5bfc\u5f39\u53ef\u4ee5\u64cd\u4f5c\u8fdb\u884c **\u6700\u591a $t_z + 1$ \u6b21** \u63a7\u5236\uff0c\u800c\u4e0d\u662f $t_z$ \u6b21\u3002\u5982\u679c\u4f60\u5728\u6bcf\u4e00\u6b21\u63a7\u5236\u540e\u5c06\u5bff\u547d\u51cf\u53bb 1\uff0c\u5343\u4e07\u8981\u4e3b\u610f\u8fd9\u70b9\u3002\n- \u8bf7\u6ce8\u610f\u4ee3\u7801\u4e2d $\\epsilon$ \u7684\u4f7f\u7528\uff01\u5982\u679c\u4f60\u5728\u4e00\u4e9b\u5730\u65b9\u7f3a\u5931\u4e86\u6d6e\u70b9\u6570\u5224\u65ad\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u5bfc\u81f4\u76ee\u6807\u8ba1\u7b97\u9519\u8bef\u800c\u5bfc\u81f4\u504f\u822a\uff01\n- \u5bfc\u5f39\u4e8b\u4ef6\u7684\u89e6\u53d1\u673a\u5236\u6bd4\u8f83\u590d\u6742\uff0c\u8bf7\u4e0d\u8981\u9ed8\u8ba4\u4e00\u4e9b\u64cd\u4f5c\u7684\u6761\u4ef6\u3002\n- \u8fd9\u9053\u9898\u76ee\u8bbe\u8ba1\u4e86\u591a\u4e2a\u51fd\u6570\u5bf9\u4e00\u4e2a\u51fd\u6570\u7684\u590d\u7528\u3002\u8bf7\u6ce8\u610f\u590d\u7528\u65f6\u88ab\u8c03\u7528\u51fd\u6570\u5185\u90e8\u53d8\u91cf\u662f\u5426\u7b26\u5408\u9884\u671f\u3002\n\n## 0xff \u8da3\u95fb \n\n1. \u8fd9\u4efd\u4ee3\u7801\u6211\u82b1\u4e86\u4e00\u4e2a\u665a\u4e0a\uff083 \u5c0f\u65f6\uff09\u5199\u5b8c\uff0c\u53c8\u82b1\u4e86\u4e00\u4e2a\u665a\u4e0a\uff084 \u5c0f\u65f6\uff09\u8c03\u8bd5\u5b8c\u6bd5\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u6211\u76f8\u4fe1\u5927\u5bb6\u4e5f\u90fd\u77e5\u9053\u4e86\u3002\n2. \u8fd9\u4efd\u4ee3\u7801\u540e\u534a\u90e8\u5206\u8c03\u8bd5\u8fd0\u7528\u5230\u4e86\u5b98\u65b9\u6570\u636e\u96c6\u7684\u6b63\u786e\u4ee3\u7801\u548c\u6570\u636e\u3002std \u53ef\u8bfb\u6027\u6bd4\u6211\u7684\u4ee3\u7801\u5dee\u5f97\u591a\u4e86\uff01\n3. \u6211\u5728\u5b98\u65b9\u6570\u636e\u96c6\u4e0b\u627e\u5230\u4e86\u4e09\u4efd std\uff0c\u968f\u540e\u6254\u5230\u4e86 Lemonlime \u4e00\u8d77\u6d4b\u8bd5\uff0c\u4e8e\u662f\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/21soj4hi.png)",
        "postTime": 1678208962,
        "uid": 60864,
        "name": "tiger2005",
        "ccfLevel": 7,
        "title": "P9141 [THUPC 2023 \u521d\u8d5b] \u4e71\u897f\u661f\u4e0a\u7684\u7a7a\u6218"
    },
    {
        "content": "\u5927\u5bb6\u597d\u6211\u53c8\u6765\u4e86\uff0c\u8fd9\u6b21\u5e26\u7ed9\u5927\u5bb6\u7684\u4f9d\u7136\u662f THUPC \u7684\u4f20\u7edf\u827a\u80fd\u5927\u6a21\u62df~\n\n\u4e2a\u4eba\u70b9\u8bc4\uff1a\u8fd9\u9898\u662f\u6211\u4e2a\u4eba\u5199\u5b8c\u5e76\u901a\u8fc7\u7684\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u5927\u6a21\u62df\u9898\u4e2d\u6700\u957f\u7684\u4e00\u9053\uff0c\u4f46\u53ef\u80fd\u5e76\u975e\u6700\u96be\u5199\u7684\u3002\u751a\u81f3\u5728\u6211\u770b\u6765\uff0c\u5728\u4f60\u6709\u4e00\u4e2a\u76f8\u5bf9\u5b8c\u6574\u7684\u4e09\u7ef4\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\u7684\u60c5\u51b5\u4e0b\uff0c\u7801\u957f\u53ea\u6709\u8fd9\u9898\u4e09\u5206\u4e4b\u4e00\u7684 [P7147 [THUPC2021 \u521d\u8d5b] \u9ebb\u5c06\u6a21\u62df\u5668](https://www.luogu.com.cn/problem/P7147) \u7684\u5b9e\u73b0\u96be\u5ea6\u90fd\u4e0d\u4f4e\u4e8e\u8fd9\u9898\u3002\n\n\u7a76\u5176\u539f\u56e0\uff0c\u8fd9\u9898\u7684\u6a21\u5757\u5316\u7279\u522b\u5f3a\uff0c\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u57fa\u672c\u4e0a\u76f8\u5bf9\u72ec\u7acb\uff0c\u7279\u522b\u9002\u5408\u8fdb\u884c\u62bd\u8c61\u53ca\u4f7f\u7528\u5404\u79cd oop \u6280\u5de7\uff0c\u5c24\u5176\u662f\u5728\u9898\u76ee\u5df2\u7ecf\u5929\u7136\u5730\u7ed9\u4f60\u5212\u5206\u597d\u9636\u6bb5\u7684\u524d\u63d0\u4e0b\u3002\u8fd9\u6837\u4e0b\u6765\u7684\u6574\u4e2a\u7f16\u7801\u903b\u8f91\u662f\u5341\u5206\u6e05\u6670\u7684\uff0c\u5c24\u5176\u4e0d\u4f1a\u51fa\u73b0\u50cf\u6211\u5199 [P7610 [THUPC2021] \u7fa4\u661f\u8fde\u7ed3](https://www.luogu.com.cn/problem/P7610) \u65f6\u5404\u79cd\u903b\u8f91\u7ebf\u6405\u4e71\u5728\u4e00\u8d77\u6839\u672c\u4e0d\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u5f00\u54ea\u4e00\u6761\u7684\u73b0\u8c61\u3002\n\n\u751a\u81f3\u4e8e\u6211\u5728\u8d5b\u524d\u9884\u6d4b\uff0c\u8bf4\u4e0d\u5b9a\u4f1a\u6709\u961f\u4f0d\u4e13\u95e8\u6765\u5199\u8fd9\u9898\u3002\u5982\u679c\u961f\u53cb\u4eec\u80fd\u6709\u6548\u5730\u5e76\u884c\u5de5\u4f5c\uff0c\u6bcf\u4eba\u5199\u4e00\u4e2a\u6a21\u5757\u7684\u8bdd\uff0c\u5e94\u8be5\u662f\u6709\u5e0c\u671b\u5728\u8d5b\u65f6\u5199\u5b8c\u5e76\u8c03\u8fc7\u7684\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6ca1\u6709\u961f\u8fd9\u4e48\u5e72\u5462 qwq\u3002\n\n\u6211\u4eec\u4e00\u70b9\u70b9\u6765\u770b\u5427\uff1a\n\n\u9996\u5148\uff0c\u6b63\u5982\u9ebb\u5c06\u6a21\u62df\u5668\u90a3\u9898\u7684\u771f\u6b63\u96be\u70b9\u5728\u4e8e dp\uff0c\u8fd9\u9898\u7684\u771f\u6b63\u96be\u70b9\u5927\u6982\u5728\u4e8e\u8ba1\u7b97\u51e0\u4f55\u90e8\u5206\u5427\u3002\u9664\u4e86\u5e38\u89c4\u7684\u7a7a\u95f4\u5411\u91cf\u8fd0\u7b97\u5916\uff0c\u8fd8\u6709\u70b9\u5230\u7ebf\u6bb5\u7684\u8ddd\u79bb\u3001\u70b9\u5728\u5e73\u9762\u4e0a\u7684\u6295\u5f71\u7b49\u3002\u5982\u679c\u7b2c\u4e00\u6b21\u5199\u53ef\u80fd\u4f1a\u7ed5\u4e0d\u8fc7\u5f2f\u6765\uff0c\u4f46\u662f\u719f\u7ec3\u4e86\u6216\u8005\u6709\u73b0\u6210\u6a21\u677f\u7684\u8bdd\u5e94\u8be5\u95ee\u9898\u4e0d\u5927\u3002\n\n\u8fd9\u91cc\u4e00\u4e2a\u81f4\u547d\u7684\u5c0f\u7ec6\u8282\u662f\u6211\u8c03\u8bd5\u65f6\u624d\u53d1\u73b0\u7684\uff1a\u4e00\u5f00\u59cb\u8bef\u4ee5\u4e3a\u5168\u90fd\u662f\u6574\u70b9\u7684\u60c5\u51b5\u4e0b\u5e94\u8be5\u6709\u529e\u6cd5\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\uff0c\u56e0\u6b64\u81ea\u4fe1\u5730\u76f4\u63a5\u5199\u5b9e\u6570\u6bd4\u8f83\uff0c\u7ed3\u679c\u5206\u5206\u949f\u88ab\u6559\u505a\u4eba\u4e86\u3002\u540e\u6765\u53d1\u73b0\u4e3b\u8981\u539f\u56e0\u51fa\u81ea\u6c42\u89d2\u5ea6\u65f6\u7684 `acos` \u51fd\u6570\uff0c\u5373\u4f7f\u53ea\u6709\u673a\u5668\u7cbe\u5ea6\u7ea7\u522b\u7684\u8bef\u5dee\uff0c\u5728\u540e\u9762\u5224\u76f8\u7b49\u4e4b\u7c7b\u7684\u5730\u65b9\u90fd\u662f\u81f4\u547d\u7684\u3002\u6240\u4ee5\u4e0d\u8be5\u5077\u61d2\u7684\u5730\u65b9\u5343\u4e07\u522b\u5077\u61d2\u554a\u3002\n\n```cpp\nnamespace geometry{\n#define EPS 1e-12l\n\tinline ldb my_acosl(ldb x){return acosl(max(-1.0l,min(1.0l,x)));}\n\tinline bool chkeq(ldb x,ldb y){return fabsl(x - y) < EPS;}\n\tstruct vec2{\n\t\tldb x,y;\n\t\tldb dis()const {return sqrtl(x * x + y * y);} //\u957f\u5ea6\n\t\tldb dis2()const {return x * x + y * y;} //\u957f\u5ea6\u7684\u5e73\u65b9\n\t\tldb dot(const vec2 &p)const {return x * p.x + y * p.y;}\n\t\tldb cross(const vec2 &p)const {return x * p.y - y * p.x;}\n\t\tldb dis_to_rectangle(ldb lx,ldb hy)const {return min(fabsl(x - lx),fabsl(x + lx)) + min(fabsl(y - hy),fabsl(y + hy));}\n\t};\n\tstruct vec3{\n\t\tldb x,y,z;\n\t\tvec3 to_int(){x = round(x);y = round(y);z = round(z);return *this;}\n\t\tldb dis()const {return sqrtl(x * x + y * y + z * z);} \n\t\tldb dis2()const {return x * x + y * y + z * z;} \n\t\tvec3 get_norm()const {ldb d = dis();return {x / d,y / d,z / d};}//\u83b7\u53d6\u5411\u91cf\u5355\u4f4d\u5316\u540e\u7684\u7ed3\u679c\uff0c\u4f46\u5411\u91cf\u672c\u8eab\u4e0d\u5355\u4f4d\u5316\n\t\tvec3 norm(){ldb d = dis();x /= d;y /= d;z /= d;return *this;}//\u83b7\u53d6\u5411\u91cf\u5355\u4f4d\u5316\u540e\u7684\u7ed3\u679c\u5e76\u5c06\u5411\u91cf\u672c\u8eab\u5355\u4f4d\u5316\n\t\tldb dot(const vec3 &p)const {return x * p.x + y * p.y + z * p.z;}\n\t\tvec3 cross(const vec3 &p)const {return {y * p.z - z * p.y,z * p.x - x * p.z,x * p.y - y * p.x};}\n\t\tldb get_angle(const vec3 &p)const {return my_acosl(dot(p) / dis() / p.dis());}\n\t\tvoid input(){x = read_ldb();y = read_ldb();z = read_ldb();}\t\n\t};\n\tvec3 operator + (const vec3 &a,const vec3 &b){return {a.x + b.x,a.y + b.y,a.z + b.z};}\n\tvec3 operator - (const vec3 &a,const vec3 &b){return {a.x - b.x,a.y - b.y,a.z - b.z};}\n\tvec3 operator * (ldb k,const vec3 &a){return {k * a.x,k * a.y,k * a.z};}\n\tbool operator == (const vec3 &a,const vec3 &b){return chkeq(a.x,b.x) && chkeq(a.y,b.y) && chkeq(a.z,b.z);}\n\tstruct line{\n\t\tvec3 p,v;\n\t\tvec3 projection(const vec3 &x)const {return p + v.dot(x - p) * v;}\n\t\tldb get_min_dis(const vec3 &x)const {return (x - projection(x)).dis();}\n\t};\n\tstruct segment{\n\t\tvec3 p,q;\n\t\tldb len()const {return (p - q).dis();} //\u957f\u5ea6\n\t\tldb len2()const {return (p - q).dis2();} //\u957f\u5ea6\u7684\u5e73\u65b9\n\t\tldb get_min_dis(const vec3 &x)const {//\u6c42\u70b9\u5230\u7ebf\u6bb5\u7684\u6700\u8fd1\u8ddd\u79bb\n\t\t\tif(p == q) return (x - p).dis();\n\t\t\tldb tmp = (x - p).dot(q - p);\n\t\t\tif(tmp <= 0) return (x - p).dis();\n\t\t\tif(tmp >= len2()) return (x - q).dis();\n\t\t\tline y = {p,(q - p).norm()};\n\t\t\treturn y.get_min_dis(x);\n\t\t}\n\t};\n\tstruct plain{\n\t\tvec3 p,n;\n\t\tvec3 projection(const vec3 &x)const {return x - n.dot(x - p) * n;}\n\t};\n};\n```\n\n\u63a5\u4e0b\u6765\u662f\u65e0\u4eba\u673a\u7684\u5b9a\u4e49\u3002\u56e0\u4e3a\u8981\u9884\u5224\u65e0\u4eba\u673a\u7684\u8d70\u4f4d\uff0c\u8fd9\u91cc\u91c7\u7528\u7684\u65b9\u6cd5\u662f\u5728\u4e00\u4e2a\u5bf9\u8c61\u91cc\u5206\u522b\u5b9a\u4e49\u4e86\u65e0\u4eba\u673a\u5f53\u524d\u7684\u8fd0\u52a8\u72b6\u6001\u548c\u9884\u5224\u7684\u8fd0\u52a8\u72b6\u6001\u3002\u6bd4\u8f83\u9ebb\u70e6\u7684\u90e8\u5206\u5927\u6982\u5c31\u662f\u6c42\u654c\u673a\u5728\u81ea\u5df1\u96f7\u8fbe\u5e73\u9762\u4e0a\u7684\u6295\u5f71\uff0c\u4ee5\u53ca\u5224\u65ad\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u98de\u5230\u3002\u524d\u8005\u5728\u5df2\u6709\u7684\u8ba1\u7b97\u51e0\u4f55\u677f\u5b50\u4e0b\u4e5f\u5e76\u4e0d\u96be\uff0c\u540e\u8005\u4e3b\u8981\u5c31\u662f\u628a\u5404\u79cd\u662f\u5426\u8981\u6eda\u8f6c\u3001\u5411\u54ea\u4e2a\u65b9\u5411\u6eda\u8f6c\uff0c\u4ee5\u53ca\u5230\u5e95\u662f\u6b63\u6746\u8fd8\u662f\u8d1f\u6746\u641e\u6e05\u695a\u5c31\u597d\u3002\n\n```cpp\nstruct plane{\n\tint id;\n\tint status;\n\tbool team;\n\tvec3 p,d,u,l; //\u5f53\u524d\u7684\u8fd0\u52a8\u72b6\u6001\u5411\u91cf \n\tvec3 nxtp,nxtd,nxtu,nxtl; //\u8fd9\u4e00\u56de\u5408\u5373\u5c06\u79fb\u52a8\u5230\u7684\u8fd0\u52a8\u72b6\u6001\u5411\u91cf \n\tldb tu,td,r,vm,lx,hy;\n\tint target;\n\tbool tar_in_radar;\n\tvector<int> exploded;\n\tvoid getl(){l = u.cross(d);}\n\tvoid input(int _id,bool _team){\n\t\tid = _id;\n\t\tteam = _team;\n\t\tp.input();d.input();u.input();getl();\n\t\ttu = read_ldb();td = read_ldb();r = read_ldb();\n\t\tvm = read_ldb();lx = read_ldb();hy = read_ldb();\n\t\tstatus = ALIVE;\n\t\ttarget = 0;\n\t\texploded.clear();\n\t}\n\tbool in_horizon(const plane &x)const {return d.dot(x.p - p) > EPS;}\n\tbool in_nxt_horizon(const plane &x)const {return nxtd.dot(x.p - nxtp) > EPS;}\n\tvec2 get_radar_r(const plane &x)const {//\u6c42x\u5728\u81ea\u5df1\u7684\u96f7\u8fbe\u5e73\u9762\u4e0a\u7684\u6295\u5f71\n\t\tplain pl = {p,d};\n\t\tvec3 nd = pl.projection(x.p);\n\t\treturn {l.dot(nd - p),u.dot(nd - p)};\n\t}\n\tvec2 get_nxt_radar_r(const plane &x)const {//\u6c42\u79fb\u52a8\u540ex\u5728\u81ea\u5df1\u7684\u96f7\u8fbe\u5e73\u9762\u4e0a\u7684\u6295\u5f71\n\t\tplain pl = {nxtp,nxtd};\n\t\tvec3 nd = pl.projection(x.p);\n\t\treturn {nxtl.dot(nd - p),nxtu.dot(nd - p)};\n\t}\n\tbool in_radar_r(const vec2 &r)const {return fabsl(r.x) <= lx + EPS && fabsl(r.y) <= hy + EPS;}\n\tbool can_reach(const vec3 &x){//\u98de\u673a\u80fd\u5426\u98de\u884cx\u8ddd\u79bb\uff08\u98de\u5230p+x\u4f4d\u7f6e\uff09\uff0c\u80fd\u7684\u8bdd\u66f4\u65b0nxtp,nxtu,nxtd\n\t\tnxtp = p + x;\n\t\tnxtd = x.get_norm();\n\t\tif(d == nxtd) nxtl = l;//\u4e0d\u9700\u8981\u6eda\u8f6c\n\t\telse if(d == -1 * nxtd) return 0;\n\t\telse{//\u9700\u8981\u6eda\u8f6c\n\t\t\tnxtl = d.cross(nxtd).norm();//\u8981\u901a\u8fc7\u6eda\u8f6c\u628al\u8f6c\u5230\u4e0ed\u548cnxtd\u6240\u5728\u7684\u5e73\u9762\u5782\u76f4\u7684\u65b9\u5411\n\t\t\tif(l.dot(nxtl) < 0) nxtl = -1 * nxtl;//\u6eda\u8f6c\u53ea\u80fd\u572890\u5ea6\u4ee5\u5185\n\t\t}\n\t\tnxtu = nxtd.cross(nxtl);\n\t\treturn l.get_angle(nxtl) / r //\u6eda\u8f6c\n\t\t\t+ d.get_angle(nxtd) / (u.dot(nxtd) >= 0 ? tu : td) //\u4fef\u4ef0\n\t\t\t+ x.dis() / vm <= 1 + EPS; //\u76f4\u7ebf\u98de\u884c\n\t}\n}a[210]; \n```\n\n\u5bfc\u5f39\u7684\u5b9a\u4e49\u4e0e\u65e0\u4eba\u673a\u7c7b\u4f3c\uff0c\u9274\u4e8e\u540c\u4e00\u65f6\u523b\u5b58\u5728\u7684\u6765\u81ea\u4e8e\u540c\u4e00\u67b6\u65e0\u4eba\u673a\u7684\u5bfc\u5f39\u6700\u591a\u53ea\u4f1a\u5b58\u5728\u4e00\u679a\uff0c\u6211\u8fd9\u91cc\u7684\u5199\u6cd5\u662f\u4e00\u4e2a\u5bfc\u5f39\u5bf9\u8c61\u5c31\u662f\u56fa\u5b9a\u7531\u67d0\u67b6\u65e0\u4eba\u673a\u53d1\u5c04\u7684\uff0c\u90a3\u4e48\u9700\u8981\u6ce8\u610f\u591a\u6b21\u521d\u59cb\u5316\u7684\u95ee\u9898\uff1b\u53e6\u5916\u5bfc\u5f39\u4f1a\u6bd4\u65e0\u4eba\u673a\u591a\u4e00\u4e2a\u529f\u80fd\uff0c\u5373\u9884\u5224\u662f\u5426\u9501\u5b9a\u76ee\u6807\u53ca\u76f8\u5e94\u7684\u9501\u5b9a\u89d2\uff0c\u4e0d\u8fc7\u8fd9\u4e0d\u96be\u5199\u3002\n\n```cpp\nstruct missile{\n\tint id;\n\tint status;\n\tbool team;\n\tvec3 p,d; //\u5f53\u524d\u7684\u8fd0\u52a8\u72b6\u6001\u5411\u91cf \n\tvec3 nxtp,nxtd; //\u8fd9\u4e00\u56de\u5408\u5373\u5c06\u79fb\u52a8\u5230\u7684\u8fd0\u52a8\u72b6\u6001\u5411\u91cf \n\tldb tr,vm,ds,dp,bs;\n\tint tz,timer,target;\n\tvoid input(int _id,bool _team){\n\t\tid = _id;\n\t\tteam = _team;\n\t\ttr = read_ldb();vm = read_ldb();ds = read_ldb();\n\t\tdp = read_ldb();bs = read_ldb();tz = read();\n\t\tstatus = DEAD;\n\t\ttimer = target = 0;\n\t}\n\tvoid init(const vec3 &_p,const vec3 &_d,int _target){\n\t\tp = _p;d = _d;\n\t\ttimer = 0;\n\t\ttarget = _target;\n\t\tstatus = INACTIVE;\n\t}\n\tbool nxt_can_lock(const plane &x,ldb &angle){//\u5bfc\u5f39\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\u80fd\u5426\u9501\u5b9a\u76ee\u6807\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\uff0c\u80fd\u7684\u8bdd\u9501\u5b9a\u89d2\u662f\u591a\u5c11\uff08\u4f20\u7ed9angle\uff09\n\t\tif(x.nxtp == nxtp){//\u4e24\u8005\u76ee\u6807\u4f4d\u7f6e\u76f8\u540c\n\t\t\tangle = 0;\n\t\t\treturn 1;\n\t\t}\n\t\tldb dott = nxtd.dot(x.nxtp - nxtp); \n\t\tangle = nxtd.get_angle(x.nxtp - nxtp);//\u9501\u5b9a\u89d2\n\t\treturn dott > 0 && angle <= bs + EPS;//\u5728\u524d\u65b9\u4e14\u9501\u5b9a\u89d2\u4e0d\u8d85\u8fc7\u6700\u5927\u9501\u5b9a\u89d2\n\t}\n\tbool can_reach(const vec3 &x){//\u5bfc\u5f39\u80fd\u5426\u98de\u884cx\u8ddd\u79bb\uff08\u98de\u5230p+x\u4f4d\u7f6e\uff09\uff0c\u80fd\u7684\u8bdd\u66f4\u65b0nxtp,nxtd\n\t\tnxtp = p + x;\n\t\tnxtd = x.get_norm();\n\t\treturn d.get_angle(nxtd) / tr //\u504f\u822a\n\t\t\t+ x.dis() / vm <= 1 + EPS; //\u76f4\u7ebf\u98de\u884c\n\t}\n}b[210];\n```\n\n\u63a5\u4e0b\u6765\uff0c\u62bd\u8c61\u51fa\u51e0\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u6b65\u9aa4\uff1a\n\n\u65e0\u4eba\u673a\u76ee\u6807\u9009\u62e9\uff1a\u8fd9\u4e00\u90e8\u5206\u9700\u8981\u6ce8\u610f\u4f18\u5148\u7ea7\u4e3a\u201c\u5148\u524d\u9009\u5b9a\u7684\u76ee\u6807\u2014\u2014\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u7684\u76ee\u6807\uff08\u6309\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u6392\u5e8f\uff09\u2014\u2014\u5728\u89c6\u91ce\u8303\u56f4\u5185\u4f46\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u7684\u76ee\u6807\uff08\u6309\u5230\u96f7\u8fbe\u8303\u56f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6392\u5e8f\uff09\u201d\uff0c\u7136\u540e\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\u4e3a\u4e86\u540e\u7eed\u5b9e\u73b0\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5728\u65e0\u4eba\u673a\u5bf9\u8c61\u91cc\u8bb0\u5f55\u8fd9\u4e00\u6b65\u6c42\u51fa\u7684\u201c\u76ee\u6807\u654c\u673a\u662f\u5426\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u201d\u4fe1\u606f\u3002\n\n```cpp\nvoid find_target(plane &x){//\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\n\tif(x.status != ALIVE) return;\n\tint last_target = x.target;x.target = 0;x.tar_in_radar = 0;\n\tldb min_dis = INF,min_dis_r = INF;\n\tfor(int i = 1;i <= m;++i){\n\t\tplane &y = a[i];\n\t\tif(y.status != ALIVE || y.team == x.team || !x.in_horizon(y)) continue;\n\t\tvec2 r = x.get_radar_r(y);\n\t\tif(last_target == i){//\u5148\u524d\u7684\u9501\u5b9a\u76ee\u6807\uff0c\u73b0\u5728\u8fd8\u80fd\u9501\u5b9a \n\t\t\tx.target = i;\n\t\t\tx.tar_in_radar = x.in_radar_r(r);\n\t\t\treturn;\n\t\t}\n\t\tif(x.in_radar_r(r)){//\u5728\u96f7\u8fbe\u8303\u56f4\u5185\uff0c\u4f18\u5148\u9009 \n\t\t\tldb nw_dis = (x.p - y.p).dis2();\n\t\t\tif(nw_dis < min_dis - EPS){//\u53d6\u8ddd\u79bb\u81ea\u5df1\u6700\u8fd1\u7684 \n\t\t\t\tx.target = i;\n\t\t\t\tmin_dis = nw_dis;\n\t\t\t\tx.tar_in_radar = 1;\n\t\t\t}\n\t\t}\n\t\telse{//\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185 \n\t\t\tif(min_dis < INF) continue;\n\t\t\tldb nw_dis = r.dis_to_rectangle(x.lx,x.hy);\n\t\t\tif(nw_dis < min_dis_r - EPS){//\u53d6\u8ddd\u79bb\u96f7\u8fbe\u8303\u56f4\u6700\u8fd1\u7684 \n\t\t\t\tx.target = i;\n\t\t\t\tmin_dis_r = nw_dis;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u65e0\u4eba\u673a\u548c\u5bfc\u5f39\u7684\u4e0b\u4e00\u6b65\u98de\u884c\u7b56\u7565\uff1a\u8fd9\u91cc\u51fa\u9898\u4eba\u671f\u5f85\u7684\u505a\u6cd5\u5c31\u662f\u5927\u529b\u679a\u4e3e\u6240\u6709\u9644\u8fd1\u7684\u6574\u70b9\uff0c\u56e0\u4e3a\u672c\u8eab\u60c5\u51b5\u7279\u522b\u591a\uff0c\u60f3\u7ed9\u51fa\u4e00\u4e2a\u6bd4\u8f83\u65b9\u4fbf\u7684\u6392\u9664\u6389\u5927\u91cf\u70b9\u7684\u65b9\u6848\u8fd8\u662f\u5f88\u56f0\u96be\u7684\u3002\u672c\u9898\u65f6\u9650\u4e4b\u6240\u4ee5\u5f00\u5f97\u5f88\u5927\u4e5f\u6b63\u662f\u5e0c\u671b\u786e\u4fdd\u6240\u6709\u5728\u8fd9\u91cc\u5373\u4f7f\u662f\u6700\u66b4\u529b\u679a\u4e3e\u800c\u4e0d\u52a0\u4efb\u4f55\u4f18\u5316\u7684\u5b9e\u73b0\u4e5f\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u800c\u4e0d\u5361\u5e38\u3002\n\n\u5728\u679a\u4e3e\u7ec8\u70b9\u540e\uff0c\u662f\u5426\u53ef\u8fbe\u7531\u5148\u524d\u5b9a\u4e49\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u7684\u51fd\u6570\u6765\u5224\u65ad\uff1b\u7136\u540e\u662f\u4f18\u5148\u7ea7\uff0c\u8fd9\u91cc\u5343\u4e07\u8981\u770b\u6e05\u695a\uff0c\u6bd4\u5982\u65e0\u4eba\u673a\u7684\u79fb\u52a8\u5728\u201c\u76ee\u6807\u654c\u673a\u90fd\u4ecd\u843d\u5728\u89c6\u91ce\u5185\u201d\u7684\u524d\u63d0\u4e0b\uff0c\u5e94\u5f53\u5148\u6bd4\u8f83\u201c\u4e0e\u76ee\u6807\u654c\u673a\u7684\u8ddd\u79bb\u201d\u800c\u975e\u201c\u76ee\u6807\u654c\u673a\u662f\u5426\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u201d\u3002\n\n```cpp\nvoid get_plane_fly_info(plane &x){//\u6c42\u51fa\u65e0\u4eba\u673a\u7684\u98de\u884c\u7b56\u7565\n\tif(x.status != ALIVE) return;\n\tif(x.target){//\u5982\u679c\u65e0\u4eba\u673a\u6709\u9009\u5b9a\u76ee\u6807\n\t\tint vi = floor(x.vm);\n\t\tvec3 nxtp = {0,0,0},nxtd = {0,0,0},nxtu = {0,0,0};\n\t\tldb min_tar_dis = INF,min_len_rq = INF,min_dis_radar = INF,min_straight_fly = INF;\n\t\tfor(int i = -vi;i <= vi;++i){\n\t\t\tfor(int j = -vi;j <= vi;++j){\n\t\t\t\tfor(int k = -vi;k <= vi;++k){\n\t\t\t\t\tif(!i && !j && !k) continue;//\u4e0d\u80fd\u539f\u5730\u4e0d\u52a8\n\t\t\t\t\tif(i * i + j * j + k * k > x.vm * x.vm) continue;\n\t\t\t\t\tvec3 np = {(ldb)i,(ldb)j,(ldb)k};\n\t\t\t\t\tif(!x.can_reach(np)) continue;//\u5fc5\u987b\u8981\u5408\u6cd5\u5230\u8fbe\n\t\t\t\t\tif(x.in_nxt_horizon(a[x.target])){//\u76ee\u6807\u5728\u89c6\u91ce\u5185\n\t\t\t\t\t\tldb ds = (x.p + np - a[x.target].p).dis2();//\u5230\u76ee\u6807\u7684\u8ddd\u79bb\n\t\t\t\t\t\tif(ds - EPS > min_tar_dis) continue;\n\t\t\t\t\t\tvec2 r = x.get_nxt_radar_r(a[x.target]);\n\t\t\t\t\t\tldb tmp1 = INF,tmp2 = INF;\n\t\t\t\t\t\tif(x.in_radar_r(r)) tmp1 = r.dis();//\u5728\u96f7\u8fbe\u8303\u56f4\u5185\n\t\t\t\t\t\telse tmp2 = r.dis_to_rectangle(x.lx,x.hy);//\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185\n\t\t\t\t\t\tif((ds < min_tar_dis - EPS) //\u4f18\u5148\uff1a\u8ddd\u79bb\u6700\u5c0f\n\t\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && tmp1 < min_len_rq - EPS) //\u5176\u6b21\uff1a\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u4e14\u8ddd\u89c6\u91ce\u4e2d\u5fc3\u5c3d\u53ef\u80fd\u8fd1\n\t\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && min_len_rq == INF && tmp2 < min_dis_radar - EPS)){ //\u518d\u6b21\uff1a\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185\uff0c\u8ddd\u96f7\u8fbe\u8303\u56f4\u5c3d\u53ef\u80fd\u8fd1\n\t\t\t\t\t\t\tmin_tar_dis = ds;\n\t\t\t\t\t\t\tmin_len_rq = tmp1;\n\t\t\t\t\t\t\tmin_dis_radar = tmp2;\n\t\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t\t\tnxtu = x.nxtu;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{//\u76ee\u6807\u4e0d\u5728\u89c6\u91ce\u5185\n\t\t\t\t\t\tif(min_tar_dis < INF) continue;\n\t\t\t\t\t\tldb ds = (np - x.vm * x.d).dis();\n\t\t\t\t\t\tif(ds < min_straight_fly - EPS){//\u627e\u8ddd\u79bb\u76f4\u98de\u6700\u8fd1\u7684\u6574\u70b9\n\t\t\t\t\t\t\tmin_straight_fly = ds;\n\t\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t\t\tnxtu = x.nxtu;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tx.nxtp = nxtp;\n\t\tx.nxtd = nxtd;\n\t\tx.nxtu = nxtu;\n\t}\n\telse{//\u773c\u955c\u86c7\u673a\u52a8\n\t\tx.nxtp = x.p;\n\t\tx.nxtd = x.u;\n\t\tx.nxtu = -1 * x.d;\n\t}\n}\n                                                \nvoid get_missile_fly_info(missile &x){//\u6c42\u51fa\u5bfc\u5f39\u7684\u98de\u884c\u7b56\u7565 \n\tif(x.status == DEAD) return;\n\tint vi = floor(x.vm);\n\tvec3 nxtp = {0,0,0},nxtd = {0,0,0};\n\tldb min_tar_dis = INF,min_lock_angle = INF,min_straight_fly = INF;\n\tfor(int i = -vi;i <= vi;++i){\n\t\tfor(int j = -vi;j <= vi;++j){\n\t\t\tfor(int k = -vi;k <= vi;++k){\n\t\t\t\tif(!i && !j && !k) continue;//\u4e0d\u80fd\u539f\u5730\u4e0d\u52a8\n\t\t\t\tif(i * i + j * j + k * k > x.vm * x.vm) continue;\n\t\t\t\tvec3 np = {(ldb)i,(ldb)j,(ldb)k};\n\t\t\t\tif(!x.can_reach(np)) continue;//\u5fc5\u987b\u8981\u5408\u6cd5\u5230\u8fbe\n\t\t\t\tldb tmp_angle = INF;\n\t\t\t\t\n\t\t\t\tif(x.target && x.nxt_can_lock(a[x.target],tmp_angle)){//\u6709\u76ee\u6807\uff0c\u4e14\u4f4d\u79fb\u4e4b\u540e\u4ecd\u80fd\u9501\u5b9a\n\t\t\t\t\tldb ds = (x.p + np - a[x.target].nxtp).dis2();//\u5230\u76ee\u6807\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\u7684\u8ddd\u79bb\n\t\t\t\t\tif((ds < min_tar_dis - EPS) //\u4f18\u5148\uff1a\u8ddd\u79bb\u6700\u5c0f\n\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && tmp_angle < min_lock_angle - EPS)){//\u5176\u6b21\uff1a\u9501\u5b9a\u89d2\u6700\u5c0f\n\t\t\t\t\t\tmin_tar_dis = ds;\n\t\t\t\t\t\tmin_lock_angle = tmp_angle;\n\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{//\u6ca1\u6709\u76ee\u6807\uff0c\u6216\u4f4d\u79fb\u4e4b\u540e\u8131\u9501\n\t\t\t\t\tif(min_tar_dis < INF) continue;\n\t\t\t\t\tldb ds = (np - x.vm * x.d).dis();\n\t\t\t\t\tif(ds < min_straight_fly - EPS){//\u627e\u8ddd\u79bb\u76f4\u98de\u6700\u8fd1\u7684\u6574\u70b9\n\t\t\t\t\t\tmin_straight_fly = ds;\n\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(min_tar_dis == INF) x.target = 0;//\u8131\u9501\n\tx.nxtp = nxtp;\n\tx.nxtd = nxtd;\n}\n                                 \n```\n\n\u63a5\u4e0b\u6765\u662f\u5bf9\u5404\u4e2a\u9636\u6bb5\u7684\u62c6\u89e3\uff1a\n\n\n\u7b2c\u4e00\u9636\u6bb5\uff0c\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\u5e76\u786e\u5b9a\u98de\u884c\u7b56\u7565\uff1a\u5df2\u7ecf\u641e\u5b9a\u4e86\u3002\n\n```cpp\nvoid stage1(){//\u6240\u6709\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5f53\u524d\u65f6\u523b\u5185\u7684\u98de\u884c\u7b56\u7565\n\tfor(int i = 1;i <= m;++i) find_target(a[i]);\n\tfor(int i = 1;i <= m;++i) get_plane_fly_info(a[i]);\n}\n```\n\n\u7b2c\u4e8c\u9636\u6bb5\uff0c\u6240\u6709\u80fd\u53d1\u5c04\u5bfc\u5f39\u7684\u65e0\u4eba\u673a\u53d1\u5c04\u5bfc\u5f39\uff1a\u7b80\u5355\u5224\u65ad\u5373\u53ef\u3002\n\n```cpp\nvoid launch_missile(plane &x){//\u53d1\u5c04\u5bfc\u5f39\n\tif(x.status != ALIVE || !x.tar_in_radar) return;\n\tif(b[x.id].status != DEAD) return;\n\tb[x.id].init(x.p,(a[x.target].p - x.p).norm(),x.target);\n}\nvoid stage2(){//\u6240\u6709\u80fd\u53d1\u5c04\u5bfc\u5f39\u7684\u65e0\u4eba\u673a\u53d1\u5c04\u5bfc\u5f39\n\tfor(int i = 1;i <= m;++i) launch_missile(a[i]);\n}\n```\n\n\u7b2c\u4e09\u9636\u6bb5\uff0c\u6240\u6709\u5bfc\u5f39\u786e\u5b9a\u98de\u884c\u7b56\u7565\u5e76\u4f4d\u79fb\uff1a\u6ce8\u610f\u5224\u65ad\u662f\u5426\u6709\u5bfc\u5f39\u4f1a\u7206\u70b8\uff0c\u8fd9\u91cc\u8981\u7528\u5230\u70b9\u5230\u7ebf\u6bb5\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd8\u8981\u6ce8\u610f\u5bfc\u5f39\u662f\u5426\u6fc0\u6d3b\uff0c\u4ee5\u53ca\u76f4\u63a5\u649e\u4e0a\u53bb\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u5efa\u8bae\u628a\u9700\u8981\u5224\u65ad\u7684\u5185\u5bb9\u90fd\u653e\u5728\u8fd9\u91cc\u8fdb\u884c\uff0c\u8fd9\u6837\u63a5\u4e0b\u6765\u5904\u7406\u5bfc\u5f39\u7206\u70b8\u5c31\u4f1a\u5f88\u5bb9\u6613\u3002\n\n```cpp\nbool chk_missile_explode(const vec3 &st,const vec3 &ed,const vec3 &tar,ldb dp){\n\t//\u4ecest\u98de\u5230ed\uff0c\u8ddd\u79bbtar\u7684\u6700\u8fd1\u8ddd\u79bb\u662f\u5426\u4e0d\u8d85\u8fc7dp\n\tif(st == ed) return (tar - st).dis2() <= dp * dp;\n\tsegment seg = {st,ed};\n\treturn seg.get_min_dis(tar) <= dp;\n}\nvoid missile_fly(missile &x){//\u5bfc\u5f39\u98de\u884c\n\tif(x.status == DEAD) return;\n\tfor(int i = 1;i <= m;++i){\n\t\tplane &y = a[i];\n\t\tif(y.status == DEAD) continue;\n\t\tif(x.nxtp == y.p //\u5bfc\u5f39\u76f4\u63a5\u649e\u5230\u98de\u673a\u4e0a\uff0c\u65e0\u8bba\u662f\u5426\u6fc0\u6d3b\u90fd\u6467\u6bc1 \n\t\t\t|| (x.status == ACTIVE && chk_missile_explode(x.p,x.nxtp,y.p,x.dp))){//\u5224\u65ad\u6fc0\u6d3b\u7684\u5bfc\u5f39x\u80fd\u5426\u6467\u6bc1\u98de\u673ay\n\t\t\ty.status = HANDLING;\n\t\t\ty.exploded.pb(x.id);\n\t\t}\n\t}\n\tx.p = x.nxtp;\n\tx.d = x.nxtd;\n}\nvoid stage3(){//\u6240\u6709\u5bfc\u5f39\u786e\u5b9a\u98de\u884c\u7b56\u7565\u5e76\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\uff1b\n\tfor(int i = 1;i <= m;++i) get_missile_fly_info(b[i]);\n\tfor(int i = 1;i <= m;++i) missile_fly(b[i]);\n}\n```\n\n\u7b2c\u56db\u9636\u6bb5\uff0c\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\uff1a\u8fd9\u91cc\u53ef\u4ee5\u4e0e\u7b2c\u516d\u9636\u6bb5\u4e00\u8d77\u5199\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u96be\u5ea6\u4e0d\u5927\uff0c\u4e3b\u8981\u5728\u4e8e\u51c6\u5907\u8f93\u51fa\u4fe1\u606f\u7684\u90e8\u5206\u3002\n\n```cpp\nvoid crash(plane &x,bool flag){//\u98de\u673a\u5760\u6bc1\n\tif(x.status != HANDLING) return;\n\tif(!flag){\n\t\t++out_en.p1;\n\t\tout_en.q1.pb(mp(x.id,x.exploded));\n\t}\n\telse{\n\t\t++out_en.p2;\n\t\tout_en.q2.pb(mp(x.id,x.exploded));\n\t}\n\tx.status = DEAD;\n\tfor(int i = 0;i < x.exploded.size();++i) b[x.exploded[i]].status = DEAD;\n\tfor(int i = 1;i <= m;++i){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\tif(b[i].target == x.id) b[i].target = 0;\n\t} \n}\nvoid stage4(){//\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n\tfor(int i = 1;i <= m;++i) crash(a[i],0);\n}\n```\n\n\u7b2c\u4e94\u9636\u6bb5\uff0c\u6240\u6709\u65e0\u4eba\u673a\u6309\u7b2c\u4e00\u9636\u6bb5\u4e2d\u786e\u5b9a\u7684\u98de\u884c\u7b56\u7565\u4f4d\u79fb\uff1a\u4e0e\u7b2c\u4e09\u9636\u6bb5\u7c7b\u4f3c\uff0c\u8981\u5904\u7406\u5bfc\u5f39\u5f15\u7206\u7684\u95ee\u9898\u3002\n\n```cpp\nvoid plane_fly(plane &x){//\u65e0\u4eba\u673a\u98de\u884c\n\tif(x.status == DEAD) return;\n\tfor(int i = 1;i <= m;++i){//\u68c0\u67e5\u98de\u673a\u80fd\u5426\u88ab\u522b\u7684\u5bfc\u5f39\u6467\u6bc1 \n\t\tmissile &y = b[i];\n\t\tif(y.status == DEAD) continue; \n\t\tif(x.nxtp == y.p //\u5bfc\u5f39\u76f4\u63a5\u649e\u5230\u98de\u673a\u4e0a\uff0c\u65e0\u8bba\u662f\u5426\u6fc0\u6d3b\u90fd\u6467\u6bc1  \n\t\t\t|| (y.status == ACTIVE && chk_missile_explode(x.p,x.nxtp,y.p,y.dp))){//\u5224\u65ad\u6fc0\u6d3b\u7684\u5bfc\u5f39y\u80fd\u5426\u6467\u6bc1\u98de\u673ax\n\t\t\tx.status = HANDLING;\n\t\t\tx.exploded.pb(i);\n\t\t}\n\t}\n\tx.p = x.nxtp;\n\tx.d = x.nxtd;\n\tx.u = x.nxtu;\n\tx.getl();\n}\nvoid stage5(){//\u6240\u6709\u65e0\u4eba\u673a\u6309 1. \u4e2d\u786e\u5b9a\u7684\u98de\u884c\u7b56\u7565\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\uff1b\n\tfor(int i = 1;i <= m;++i) plane_fly(a[i]);\n}\n```\n\n\u7b2c\u516d\u9636\u6bb5\uff0c\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\uff1a\u5df2\u7ecf\u641e\u5b9a\u4e86\u3002\n\n```cpp\nvoid stage6(){//\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n\tfor(int i = 1;i <= m;++i) crash(a[i],1);\n}\n```\n\n\u7b2c\u4e03\u9636\u6bb5\uff0c\u6240\u6709\u4f4d\u7f6e\u76f8\u540c\u7684\u65e0\u4eba\u673a\u53d1\u751f\u78b0\u649e\u5e76\u5760\u6bc1\uff1a\u8fd9\u91cc\u4e3b\u8981\u662f\u4e00\u4e2a\u78b0\u649e\u68c0\u6d4b\uff0c\u96be\u5ea6\u5e76\u4e0d\u5927\uff0c\u4e3b\u8981\u662f\u51c6\u5907\u8f93\u51fa\u5185\u5bb9\uff0c\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u7edf\u8ba1\u5c31\u597d\u3002\n\n```cpp\nvoid chk_collide(plane &x){//\u78b0\u649e\u68c0\u6d4b\n\tif(x.status != ALIVE) return;\n\tbool flag = 0;\n\tvector<int> vt;vt.clear();\n\tfor(int j = x.id + 1;j <= m;++j){\n\t\tplane &y = a[j];\n\t\tif(y.status != ALIVE) continue;\n\t\tif(y.p == x.p){\n\t\t\tx.status = y.status = DEAD;\n\t\t\tif(!flag){\n\t\t\t\tflag = 1;\n\t\t\t\tvt.pb(x.id);\n\t\t\t\tfor(int k = 1;k <= m;++k){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\t\t\t\tif(b[k].target == x.id) b[k].target = 0;\n\t\t\t\t} \n\t\t\t}\n\t\t\tvt.pb(j);\n\t\t\tfor(int k = 1;k <= m;++k){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\t\t\tif(b[k].target == j) b[k].target = 0;\n\t\t\t} \n\t\t}\n\t}\n\tif(flag){\n\t\t++out_en.p3;\n\t\tout_en.q3.pb(mp(x.id,vt));\n\t}\n}\nvoid stage7(){//\u6240\u6709\u4f4d\u7f6e\u76f8\u540c\u7684\u65e0\u4eba\u673a\u53d1\u751f\u78b0\u649e\u5e76\u5760\u6bc1\n\tfor(int i = 1;i <= m;++i) chk_collide(a[i]);\n}\n```\n\n\u7b2c\u516b\u9636\u6bb5\uff0c\u5bfc\u5f39\u6d88\u5931\uff1a\u56e0\u4e3a\u5bfc\u5f39\u6d88\u5931\u4e0d\u4f1a\u5e26\u8d70\u522b\u7684\u98de\u673a\uff0c\u56e0\u6b64\u7b80\u5355\u5224\u65ad\u5c31\u597d\u3002\n\n```cpp\nvoid self_explosion(missile &x){//\u5bfc\u5f39\u81ea\u7206\n\tif(x.status == DEAD) return;\n\tif(x.timer++ == x.tz //\u8d85\u65f6 \n\t\t|| (!x.target && x.status == ACTIVE)) //\u8131\u9501\u5e76\u4e14\u5df2\u7ecf\u6fc0\u6d3b \n\t\t\tx.status = DEAD;\n}\nvoid stage8(){//\u6240\u6709\u8d85\u8fc7\u5236\u5bfc\u65f6\u957f\u548c\u8131\u9501\u4e14\u5df2\u6fc0\u6d3b\u7684\u5bfc\u5f39\u6d88\u5931\u3002\n\tfor(int i = 1;i <= m;++i) self_explosion(b[i]);\n}\n```\n\n\u7b2c\u4e5d\u9636\u6bb5\uff0c\u5bfc\u5f39\u6fc0\u6d3b\uff1a\u8981\u6ce8\u610f\u5bfc\u5f39\u6fc0\u6d3b\u7684\u524d\u63d0\u9664\u4e86\u8fdc\u79bb\u53d1\u5c04\u5b83\u7684\u65e0\u4eba\u673a\u5916\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u53d1\u5c04\u5b83\u7684\u65e0\u4eba\u673a\u5df2\u7ecf\u5760\u6bc1\u4e86\u3002\u4e5f\u90fd\u4e0d\u96be\u5224\u65ad\u3002\n\n```cpp\nvoid activate(missile &x){//\u5bfc\u5f39\u6fc0\u6d3b\n\tif(x.status != INACTIVE) return;\n\tif(a[x.id].status == DEAD || (x.p - a[x.id].p).dis2() > x.ds * x.ds) x.status = ACTIVE;\n}\nvoid stage9(){//\u6240\u6709\u53ef\u6fc0\u6d3b\u7684\u5bfc\u5f39\u88ab\u6fc0\u6d3b\n\tfor(int i = 1;i <= m;++i) activate(b[i]);\n}\n```\n\n\u5927\u529f\u544a\u6210\uff01\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b8c\u6574\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define gc getchar()\n#define pc putchar\n#define li long long\n#define uli unsigned li\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define pii pair<int,int>\n#define md int mid = l + r >> 1\n#define ls q << 1\n#define rs q << 1 | 1\n#define ln ls,l,mid\n#define rn rs,mid + 1,r\n#define ldb long double\n#define INF 1e18l\nusing namespace std;\ninline li read(){\n\tli x = 0;\n\tint y = 0,c = gc;\n\twhile(c < '0' || c > '9') y = c,c = gc;\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0',c = gc;\n\treturn y == '-' ? -x : x;\n}\ninline ldb read_ldb(){\n\tdouble x;scanf(\"%lf\",&x);return (ldb)x;\n}\ninline void prt(li x){\n\tif(x >= 10) prt(x / 10);\n\tpc(x % 10 + '0');\n}\ninline void print(li x){\n\tif(x < 0) pc('-'),x = -x;\n\tprt(x);\n}\nint n,m,t;\n\n/**************************GEOMETRY BEGIN********************************/\nnamespace geometry{\n#define EPS 1e-12l\n\tinline ldb my_acosl(ldb x){return acosl(max(-1.0l,min(1.0l,x)));}\n\tinline bool chkeq(ldb x,ldb y){return fabsl(x - y) < EPS;}\n\tstruct vec2{\n\t\tldb x,y;\n\t\tldb dis()const {return sqrtl(x * x + y * y);} //\u957f\u5ea6\n\t\tldb dis2()const {return x * x + y * y;} //\u957f\u5ea6\u7684\u5e73\u65b9\n\t\tldb dot(const vec2 &p)const {return x * p.x + y * p.y;}\n\t\tldb cross(const vec2 &p)const {return x * p.y - y * p.x;}\n\t\tldb dis_to_rectangle(ldb lx,ldb hy)const {return min(fabsl(x - lx),fabsl(x + lx)) + min(fabsl(y - hy),fabsl(y + hy));}\n\t};\n\tstruct vec3{\n\t\tldb x,y,z;\n\t\tvec3 to_int(){x = round(x);y = round(y);z = round(z);return *this;}\n\t\tldb dis()const {return sqrtl(x * x + y * y + z * z);} \n\t\tldb dis2()const {return x * x + y * y + z * z;} \n\t\tvec3 get_norm()const {ldb d = dis();return {x / d,y / d,z / d};}//\u83b7\u53d6\u5411\u91cf\u5355\u4f4d\u5316\u540e\u7684\u7ed3\u679c\uff0c\u4f46\u5411\u91cf\u672c\u8eab\u4e0d\u5355\u4f4d\u5316\n\t\tvec3 norm(){ldb d = dis();x /= d;y /= d;z /= d;return *this;}//\u83b7\u53d6\u5411\u91cf\u5355\u4f4d\u5316\u540e\u7684\u7ed3\u679c\u5e76\u5c06\u5411\u91cf\u672c\u8eab\u5355\u4f4d\u5316\n\t\tldb dot(const vec3 &p)const {return x * p.x + y * p.y + z * p.z;}\n\t\tvec3 cross(const vec3 &p)const {return {y * p.z - z * p.y,z * p.x - x * p.z,x * p.y - y * p.x};}\n\t\tldb get_angle(const vec3 &p)const {return my_acosl(dot(p) / dis() / p.dis());}\n\t\tvoid input(){x = read_ldb();y = read_ldb();z = read_ldb();}\t\n\t};\n\tvec3 operator + (const vec3 &a,const vec3 &b){return {a.x + b.x,a.y + b.y,a.z + b.z};}\n\tvec3 operator - (const vec3 &a,const vec3 &b){return {a.x - b.x,a.y - b.y,a.z - b.z};}\n\tvec3 operator * (ldb k,const vec3 &a){return {k * a.x,k * a.y,k * a.z};}\n\tbool operator == (const vec3 &a,const vec3 &b){return chkeq(a.x,b.x) && chkeq(a.y,b.y) && chkeq(a.z,b.z);}\n\tstruct line{\n\t\tvec3 p,v;\n\t\tvec3 projection(const vec3 &x)const {return p + v.dot(x - p) * v;}\n\t\tldb get_min_dis(const vec3 &x)const {return (x - projection(x)).dis();}\n\t};\n\tstruct segment{\n\t\tvec3 p,q;\n\t\tldb len()const {return (p - q).dis();} //\u957f\u5ea6\n\t\tldb len2()const {return (p - q).dis2();} //\u957f\u5ea6\u7684\u5e73\u65b9\n\t\tldb get_min_dis(const vec3 &x)const {//\u6c42\u70b9\u5230\u7ebf\u6bb5\u7684\u6700\u8fd1\u8ddd\u79bb\n\t\t\tif(p == q) return (x - p).dis();\n\t\t\tldb tmp = (x - p).dot(q - p);\n\t\t\tif(tmp <= 0) return (x - p).dis();\n\t\t\tif(tmp >= len2()) return (x - q).dis();\n\t\t\tline y = {p,(q - p).norm()};\n\t\t\treturn y.get_min_dis(x);\n\t\t}\n\t};\n\tstruct plain{\n\t\tvec3 p,n;\n\t\tvec3 projection(const vec3 &x)const {return x - n.dot(x - p) * n;}\n\t};\n};\nusing namespace geometry;\n/**************************GEOMETRY END**********************************/\n\n/**************************DEFINITION BEGIN******************************/\nstruct out_entry{\n\tint p1,p2,p3;\n\tvector<pair<int,vector<int> > >q1,q2,q3;\n\tvoid init(){\n\t\tq1.clear();q2.clear();q3.clear();\n\t\tp1 = p2 = p3 = 0;\n\t}\n\tvoid out_sort(){\n\t\tfor(int i = 0;i < p1;++i) sort(q1[i].second.begin(),q1[i].second.end());\n\t\tsort(q1.begin(),q1.end());\n\t\tfor(int i = 0;i < p2;++i) sort(q2[i].second.begin(),q2[i].second.end());\n\t\tsort(q2.begin(),q2.end());\n\t\tfor(int i = 0;i < p3;++i){\n\t\t\tsort(q3[i].second.begin(),q3[i].second.end());\n\t\t\tq3[i].first = q3[i].second[0];\n\t\t}\n\t\tsort(q3.begin(),q3.end());\n\t}\n\tvoid output(){\n\t\tout_sort();\n\t\tprint(p1);pc(' ');print(p2);pc(' ');print(p3);pc('\\n');\n\t\tfor(int i = 0;i < p1;++i){\n\t\t\tprint(q1[i].first);pc(' ');print(q1[i].second.size());\n\t\t\tfor(int j = 0;j < q1[i].second.size();++j) pc(' '),print(q1[i].second[j]);\n\t\t\tpc('\\n');\n\t\t}\n\t\tfor(int i = 0;i < p2;++i){\n\t\t\tprint(q2[i].first);pc(' ');print(q2[i].second.size());\n\t\t\tfor(int j = 0;j < q2[i].second.size();++j) pc(' '),print(q2[i].second[j]);\n\t\t\tpc('\\n');\n\t\t}\n\t\tfor(int i = 0;i < p3;++i){\n\t\t\tprint(q3[i].second.size());\n\t\t\tfor(int j = 0;j < q3[i].second.size();++j) pc(' '),print(q3[i].second[j]);\n\t\t\tpc('\\n');\n\t\t}\n\t\tinit();\n\t}\n}out_en;\n#define DEAD 0\n#define ALIVE 1\n#define INACTIVE 2\n#define ACTIVE 3\n#define HANDLING 4\nstruct plane{\n\tint id;\n\tint status;\n\tbool team;\n\tvec3 p,d,u,l;\n\tvec3 nxtp,nxtd,nxtu,nxtl;\n\tldb tu,td,r,vm,lx,hy;\n\tint target;\n\tbool tar_in_radar;\n\tvector<int> exploded;\n\tvoid getl(){l = u.cross(d);}\n\tvoid input(int _id,bool _team){\n\t\tid = _id;\n\t\tteam = _team;\n\t\tp.input();d.input();u.input();getl();\n\t\ttu = read_ldb();td = read_ldb();r = read_ldb();\n\t\tvm = read_ldb();lx = read_ldb();hy = read_ldb();\n\t\tstatus = ALIVE;\n\t\ttarget = 0;\n\t\texploded.clear();\n\t}\n\tbool in_horizon(const plane &x)const {return d.dot(x.p - p) > EPS;}\n\tbool in_nxt_horizon(const plane &x)const {return nxtd.dot(x.p - nxtp) > EPS;}\n\tvec2 get_radar_r(const plane &x)const {//\u6c42x\u5728\u81ea\u5df1\u7684\u96f7\u8fbe\u5e73\u9762\u4e0a\u7684\u6295\u5f71\n\t\tplain pl = {p,d};\n\t\tvec3 nd = pl.projection(x.p);\n\t\treturn {l.dot(nd - p),u.dot(nd - p)};\n\t}\n\tvec2 get_nxt_radar_r(const plane &x)const {//\u6c42\u79fb\u52a8\u540ex\u5728\u81ea\u5df1\u7684\u96f7\u8fbe\u5e73\u9762\u4e0a\u7684\u6295\u5f71\n\t\tplain pl = {nxtp,nxtd};\n\t\tvec3 nd = pl.projection(x.p);\n\t\treturn {nxtl.dot(nd - p),nxtu.dot(nd - p)};\n\t}\n\tbool in_radar_r(const vec2 &r)const {return fabsl(r.x) <= lx + EPS && fabsl(r.y) <= hy + EPS;}\n\tbool can_reach(const vec3 &x){//\u98de\u673a\u80fd\u5426\u98de\u884cx\u8ddd\u79bb\uff08\u98de\u5230p+x\u4f4d\u7f6e\uff09\uff0c\u80fd\u7684\u8bdd\u66f4\u65b0nxtp,nxtu,nxtd\n\t\tnxtp = p + x;\n\t\tnxtd = x.get_norm();\n\t\tif(d == nxtd) nxtl = l;//\u4e0d\u9700\u8981\u6eda\u8f6c\n\t\telse if(d == -1 * nxtd) return 0;\n\t\telse{//\u9700\u8981\u6eda\u8f6c\n\t\t\tnxtl = d.cross(nxtd).norm();//\u8981\u901a\u8fc7\u6eda\u8f6c\u628al\u8f6c\u5230\u4e0ed\u548cnxtd\u6240\u5728\u7684\u5e73\u9762\u5782\u76f4\u7684\u65b9\u5411\n\t\t\tif(l.dot(nxtl) < 0) nxtl = -1 * nxtl;//\u6eda\u8f6c\u53ea\u80fd\u572890\u5ea6\u4ee5\u5185\n\t\t}\n\t\tnxtu = nxtd.cross(nxtl);\n\t\treturn l.get_angle(nxtl) / r //\u6eda\u8f6c\n\t\t\t+ d.get_angle(nxtd) / (u.dot(nxtd) >= 0 ? tu : td) //\u4fef\u4ef0\n\t\t\t+ x.dis() / vm <= 1 + EPS; //\u76f4\u7ebf\u98de\u884c\n\t}\n}a[210]; \nstruct missile{\n\tint id;\n\tint status;\n\tbool team;\n\tvec3 p,d;\n\tvec3 nxtp,nxtd;\n\tldb tr,vm,ds,dp,bs;\n\tint tz,timer,target;\n\tvoid input(int _id,bool _team){\n\t\tid = _id;\n\t\tteam = _team;\n\t\ttr = read_ldb();vm = read_ldb();ds = read_ldb();\n\t\tdp = read_ldb();bs = read_ldb();tz = read();\n\t\tstatus = DEAD;\n\t\ttimer = target = 0;\n\t}\n\tvoid init(const vec3 &_p,const vec3 &_d,int _target){\n\t\tp = _p;d = _d;\n\t\ttimer = 0;\n\t\ttarget = _target;\n\t\tstatus = INACTIVE;\n\t}\n\tbool nxt_can_lock(const plane &x,ldb &angle){//\u5bfc\u5f39\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\u80fd\u5426\u9501\u5b9a\u76ee\u6807\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\uff0c\u80fd\u7684\u8bdd\u9501\u5b9a\u89d2\u662f\u591a\u5c11\uff08\u4f20\u7ed9angle\uff09\n\t\tif(x.nxtp == nxtp){//\u4e24\u8005\u76ee\u6807\u4f4d\u7f6e\u76f8\u540c\n\t\t\tangle = 0;\n\t\t\treturn 1;\n\t\t}\n\t\tldb dott = nxtd.dot(x.nxtp - nxtp); \n\t\tangle = nxtd.get_angle(x.nxtp - nxtp);//\u9501\u5b9a\u89d2\n\t\treturn dott > 0 && angle <= bs + EPS;//\u5728\u524d\u65b9\u4e14\u9501\u5b9a\u89d2\u4e0d\u8d85\u8fc7\u6700\u5927\u9501\u5b9a\u89d2\n\t}\n\tbool can_reach(const vec3 &x){//\u5bfc\u5f39\u80fd\u5426\u98de\u884cx\u8ddd\u79bb\uff08\u98de\u5230p+x\u4f4d\u7f6e\uff09\uff0c\u80fd\u7684\u8bdd\u66f4\u65b0nxtp,nxtd\n\t\tnxtp = p + x;\n\t\tnxtd = x.get_norm();\n\t\treturn d.get_angle(nxtd) / tr //\u504f\u822a\n\t\t\t+ x.dis() / vm <= 1 + EPS; //\u76f4\u7ebf\u98de\u884c\n\t}\n}b[210];\n/**************************DEFINITION END*********************************/\n\n/**************************STAGE 1 BEGIN**********************************/\nvoid find_target(plane &x){//\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\n\tif(x.status != ALIVE) return;\n\tint last_target = x.target;x.target = 0;x.tar_in_radar = 0;\n\tldb min_dis = INF,min_dis_r = INF;\n\tfor(int i = 1;i <= m;++i){\n\t\tplane &y = a[i];\n\t\tif(y.status != ALIVE || y.team == x.team || !x.in_horizon(y)) continue;\n\t\tvec2 r = x.get_radar_r(y);\n\t\tif(last_target == i){//\u5148\u524d\u7684\u9501\u5b9a\u76ee\u6807\uff0c\u73b0\u5728\u8fd8\u80fd\u9501\u5b9a \n\t\t\tx.target = i;\n\t\t\tx.tar_in_radar = x.in_radar_r(r);\n\t\t\treturn;\n\t\t}\n\t\tif(x.in_radar_r(r)){//\u5728\u96f7\u8fbe\u8303\u56f4\u5185\uff0c\u4f18\u5148\u9009 \n\t\t\tldb nw_dis = (x.p - y.p).dis2();\n\t\t\tif(nw_dis < min_dis - EPS){//\u53d6\u8ddd\u79bb\u81ea\u5df1\u6700\u8fd1\u7684 \n\t\t\t\tx.target = i;\n\t\t\t\tmin_dis = nw_dis;\n\t\t\t\tx.tar_in_radar = 1;\n\t\t\t}\n\t\t}\n\t\telse{//\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185 \n\t\t\tif(min_dis < INF) continue;\n\t\t\tldb nw_dis = r.dis_to_rectangle(x.lx,x.hy);\n\t\t\tif(nw_dis < min_dis_r - EPS){//\u53d6\u8ddd\u79bb\u96f7\u8fbe\u8303\u56f4\u6700\u8fd1\u7684 \n\t\t\t\tx.target = i;\n\t\t\t\tmin_dis_r = nw_dis;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid get_plane_fly_info(plane &x){//\u6c42\u51fa\u65e0\u4eba\u673a\u7684\u98de\u884c\u7b56\u7565\n\tif(x.status != ALIVE) return;\n\tif(x.target){//\u5982\u679c\u65e0\u4eba\u673a\u6709\u9009\u5b9a\u76ee\u6807\n\t\tint vi = floor(x.vm);\n\t\tvec3 nxtp = {0,0,0},nxtd = {0,0,0},nxtu = {0,0,0};\n\t\tldb min_tar_dis = INF,min_len_rq = INF,min_dis_radar = INF,min_straight_fly = INF;\n\t\tfor(int i = -vi;i <= vi;++i){\n\t\t\tfor(int j = -vi;j <= vi;++j){\n\t\t\t\tfor(int k = -vi;k <= vi;++k){\n\t\t\t\t\tif(!i && !j && !k) continue;//\u4e0d\u80fd\u539f\u5730\u4e0d\u52a8\n\t\t\t\t\tif(i * i + j * j + k * k > x.vm * x.vm) continue;\n\t\t\t\t\tvec3 np = {(ldb)i,(ldb)j,(ldb)k};\n\t\t\t\t\tif(!x.can_reach(np)) continue;//\u5fc5\u987b\u8981\u5408\u6cd5\u5230\u8fbe\n\t\t\t\t\tif(x.in_nxt_horizon(a[x.target])){//\u76ee\u6807\u5728\u89c6\u91ce\u5185\n\t\t\t\t\t\tldb ds = (x.p + np - a[x.target].p).dis2();//\u5230\u76ee\u6807\u7684\u8ddd\u79bb\n\t\t\t\t\t\tif(ds - EPS > min_tar_dis) continue;\n\t\t\t\t\t\tvec2 r = x.get_nxt_radar_r(a[x.target]);\n\t\t\t\t\t\tldb tmp1 = INF,tmp2 = INF;\n\t\t\t\t\t\tif(x.in_radar_r(r)) tmp1 = r.dis();//\u5728\u96f7\u8fbe\u8303\u56f4\u5185\n\t\t\t\t\t\telse tmp2 = r.dis_to_rectangle(x.lx,x.hy);//\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185\n\t\t\t\t\t\tif((ds < min_tar_dis - EPS) //\u4f18\u5148\uff1a\u8ddd\u79bb\u6700\u5c0f\n\t\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && tmp1 < min_len_rq - EPS) //\u5176\u6b21\uff1a\u5728\u96f7\u8fbe\u8303\u56f4\u5185\u4e14\u8ddd\u89c6\u91ce\u4e2d\u5fc3\u5c3d\u53ef\u80fd\u8fd1\n\t\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && min_len_rq == INF && tmp2 < min_dis_radar - EPS)){ //\u518d\u6b21\uff1a\u4e0d\u5728\u96f7\u8fbe\u8303\u56f4\u5185\uff0c\u8ddd\u96f7\u8fbe\u8303\u56f4\u5c3d\u53ef\u80fd\u8fd1\n\t\t\t\t\t\t\tmin_tar_dis = ds;\n\t\t\t\t\t\t\tmin_len_rq = tmp1;\n\t\t\t\t\t\t\tmin_dis_radar = tmp2;\n\t\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t\t\tnxtu = x.nxtu;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{//\u76ee\u6807\u4e0d\u5728\u89c6\u91ce\u5185\n\t\t\t\t\t\tif(min_tar_dis < INF) continue;\n\t\t\t\t\t\tldb ds = (np - x.vm * x.d).dis();\n\t\t\t\t\t\tif(ds < min_straight_fly - EPS){//\u627e\u8ddd\u79bb\u76f4\u98de\u6700\u8fd1\u7684\u6574\u70b9\n\t\t\t\t\t\t\tmin_straight_fly = ds;\n\t\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t\t\tnxtu = x.nxtu;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tx.nxtp = nxtp;\n\t\tx.nxtd = nxtd;\n\t\tx.nxtu = nxtu;\n\t}\n\telse{//\u773c\u955c\u86c7\u673a\u52a8\n\t\tx.nxtp = x.p;\n\t\tx.nxtd = x.u;\n\t\tx.nxtu = -1 * x.d;\n\t}\n}\nvoid stage1(){//\u6240\u6709\u65e0\u4eba\u673a\u9009\u5b9a\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5f53\u524d\u65f6\u523b\u5185\u7684\u98de\u884c\u7b56\u7565\n\tfor(int i = 1;i <= m;++i) find_target(a[i]);\n\tfor(int i = 1;i <= m;++i) get_plane_fly_info(a[i]);\n}\n/**************************STAGE 1 END************************************/\n\n/**************************STAGE 2 BEGIN**********************************/\nvoid launch_missile(plane &x){//\u53d1\u5c04\u5bfc\u5f39\n\tif(x.status != ALIVE || !x.tar_in_radar) return;\n\tif(b[x.id].status != DEAD) return;\n\tb[x.id].init(x.p,(a[x.target].p - x.p).norm(),x.target);\n}\nvoid stage2(){//\u6240\u6709\u80fd\u53d1\u5c04\u5bfc\u5f39\u7684\u65e0\u4eba\u673a\u53d1\u5c04\u5bfc\u5f39\n\tfor(int i = 1;i <= m;++i) launch_missile(a[i]);\n}\n/**************************STAGE 2 END************************************/\n\n/**************************STAGE 3 BEGIN**********************************/\nbool chk_missile_explode(const vec3 &st,const vec3 &ed,const vec3 &tar,ldb dp){\n\t//\u4ecest\u98de\u5230ed\uff0c\u8ddd\u79bbtar\u7684\u6700\u8fd1\u8ddd\u79bb\u662f\u5426\u4e0d\u8d85\u8fc7dp\n\tif(st == ed) return (tar - st).dis2() <= dp * dp;\n\tsegment seg = {st,ed};\n\treturn seg.get_min_dis(tar) <= dp;\n}\nvoid get_missile_fly_info(missile &x){//\u6c42\u51fa\u5bfc\u5f39\u7684\u98de\u884c\u7b56\u7565 \n\tif(x.status == DEAD) return;\n\tint vi = floor(x.vm);\n\tvec3 nxtp = {0,0,0},nxtd = {0,0,0};\n\tldb min_tar_dis = INF,min_lock_angle = INF,min_straight_fly = INF;\n\tfor(int i = -vi;i <= vi;++i){\n\t\tfor(int j = -vi;j <= vi;++j){\n\t\t\tfor(int k = -vi;k <= vi;++k){\n\t\t\t\tif(!i && !j && !k) continue;//\u4e0d\u80fd\u539f\u5730\u4e0d\u52a8\n\t\t\t\tif(i * i + j * j + k * k > x.vm * x.vm) continue;\n\t\t\t\tvec3 np = {(ldb)i,(ldb)j,(ldb)k};\n\t\t\t\tif(!x.can_reach(np)) continue;//\u5fc5\u987b\u8981\u5408\u6cd5\u5230\u8fbe\n\t\t\t\tldb tmp_angle = INF;\n\t\t\t\t\n\t\t\t\tif(x.target && x.nxt_can_lock(a[x.target],tmp_angle)){//\u6709\u76ee\u6807\uff0c\u4e14\u4f4d\u79fb\u4e4b\u540e\u4ecd\u80fd\u9501\u5b9a\n\t\t\t\t\tldb ds = (x.p + np - a[x.target].nxtp).dis2();//\u5230\u76ee\u6807\u5373\u5c06\u98de\u5230\u7684\u4f4d\u7f6e\u7684\u8ddd\u79bb\n\t\t\t\t\tif((ds < min_tar_dis - EPS) //\u4f18\u5148\uff1a\u8ddd\u79bb\u6700\u5c0f\n\t\t\t\t\t\t|| (chkeq(ds,min_tar_dis) && tmp_angle < min_lock_angle - EPS)){//\u5176\u6b21\uff1a\u9501\u5b9a\u89d2\u6700\u5c0f\n\t\t\t\t\t\tmin_tar_dis = ds;\n\t\t\t\t\t\tmin_lock_angle = tmp_angle;\n\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{//\u6ca1\u6709\u76ee\u6807\uff0c\u6216\u4f4d\u79fb\u4e4b\u540e\u8131\u9501\n\t\t\t\t\tif(min_tar_dis < INF) continue;\n\t\t\t\t\tldb ds = (np - x.vm * x.d).dis();\n\t\t\t\t\tif(ds < min_straight_fly - EPS){//\u627e\u8ddd\u79bb\u76f4\u98de\u6700\u8fd1\u7684\u6574\u70b9\n\t\t\t\t\t\tmin_straight_fly = ds;\n\t\t\t\t\t\tnxtp = x.nxtp;\n\t\t\t\t\t\tnxtd = x.nxtd;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(min_tar_dis == INF) x.target = 0;//\u8131\u9501\n\tx.nxtp = nxtp;\n\tx.nxtd = nxtd;\n}\nvoid missile_fly(missile &x){//\u5bfc\u5f39\u98de\u884c\n\tif(x.status == DEAD) return;\n\tfor(int i = 1;i <= m;++i){\n\t\tplane &y = a[i];\n\t\tif(y.status == DEAD) continue;\n\t\tif(x.nxtp == y.p //\u5bfc\u5f39\u76f4\u63a5\u649e\u5230\u98de\u673a\u4e0a\uff0c\u65e0\u8bba\u662f\u5426\u6fc0\u6d3b\u90fd\u6467\u6bc1 \n\t\t\t|| (x.status == ACTIVE && chk_missile_explode(x.p,x.nxtp,y.p,x.dp))){//\u5224\u65ad\u6fc0\u6d3b\u7684\u5bfc\u5f39x\u80fd\u5426\u6467\u6bc1\u98de\u673ay\n\t\t\ty.status = HANDLING;\n\t\t\ty.exploded.pb(x.id);\n\t\t}\n\t}\n\tx.p = x.nxtp;\n\tx.d = x.nxtd;\n}\nvoid stage3(){//\u6240\u6709\u5bfc\u5f39\u786e\u5b9a\u98de\u884c\u7b56\u7565\u5e76\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\uff1b\n\tfor(int i = 1;i <= m;++i) get_missile_fly_info(b[i]);\n\tfor(int i = 1;i <= m;++i) missile_fly(b[i]);\n}\n/**************************STAGE 3 END************************************/\n\n/**************************STAGE 4 BEGIN**********************************/\nvoid crash(plane &x,bool flag){//\u98de\u673a\u5760\u6bc1\n\tif(x.status != HANDLING) return;\n\tif(!flag){\n\t\t++out_en.p1;\n\t\tout_en.q1.pb(mp(x.id,x.exploded));\n\t}\n\telse{\n\t\t++out_en.p2;\n\t\tout_en.q2.pb(mp(x.id,x.exploded));\n\t}\n\tx.status = DEAD;\n\tfor(int i = 0;i < x.exploded.size();++i) b[x.exploded[i]].status = DEAD;\n\tfor(int i = 1;i <= m;++i){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\tif(b[i].target == x.id) b[i].target = 0;\n\t} \n}\nvoid stage4(){//\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n\tfor(int i = 1;i <= m;++i) crash(a[i],0);\n}\n/**************************STAGE 4 END************************************/\n\n/**************************STAGE 5 BEGIN**********************************/\nvoid plane_fly(plane &x){//\u65e0\u4eba\u673a\u98de\u884c\n\tif(x.status == DEAD) return;\n\tfor(int i = 1;i <= m;++i){//\u68c0\u67e5\u98de\u673a\u80fd\u5426\u88ab\u522b\u7684\u5bfc\u5f39\u6467\u6bc1 \n\t\tmissile &y = b[i];\n\t\tif(y.status == DEAD) continue; \n\t\tif(x.nxtp == y.p //\u5bfc\u5f39\u76f4\u63a5\u649e\u5230\u98de\u673a\u4e0a\uff0c\u65e0\u8bba\u662f\u5426\u6fc0\u6d3b\u90fd\u6467\u6bc1  \n\t\t\t|| (y.status == ACTIVE && chk_missile_explode(x.p,x.nxtp,y.p,y.dp))){//\u5224\u65ad\u6fc0\u6d3b\u7684\u5bfc\u5f39y\u80fd\u5426\u6467\u6bc1\u98de\u673ax\n\t\t\tx.status = HANDLING;\n\t\t\tx.exploded.pb(i);\n\t\t}\n\t}\n\tx.p = x.nxtp;\n\tx.d = x.nxtd;\n\tx.u = x.nxtu;\n\tx.getl();\n}\nvoid stage5(){//\u6240\u6709\u65e0\u4eba\u673a\u6309 1. \u4e2d\u786e\u5b9a\u7684\u98de\u884c\u7b56\u7565\u4f4d\u79fb\uff0c\u8be5\u8fc7\u7a0b\u4e2d\u90e8\u5206\u65e0\u4eba\u673a\u53ef\u80fd\u88ab\u6467\u6bc1\uff1b\n\tfor(int i = 1;i <= m;++i) plane_fly(a[i]);\n}\n/**************************STAGE 5 END************************************/\n\n/**************************STAGE 6 BEGIN**********************************/\nvoid stage6(){//\u6240\u6709\u53ef\u7a7a\u7206\u7684\u5bfc\u5f39\u7206\u70b8\u5e76\u6d88\u5931\n\tfor(int i = 1;i <= m;++i) crash(a[i],1);\n}\n/**************************STAGE 6 END************************************/\n\n/**************************STAGE 7 BEGIN**********************************/\nvoid chk_collide(plane &x){//\u78b0\u649e\u68c0\u6d4b\n\tif(x.status != ALIVE) return;\n\tbool flag = 0;\n\tvector<int> vt;vt.clear();\n\tfor(int j = x.id + 1;j <= m;++j){\n\t\tplane &y = a[j];\n\t\tif(y.status != ALIVE) continue;\n\t\tif(y.p == x.p){\n\t\t\tx.status = y.status = DEAD;\n\t\t\tif(!flag){\n\t\t\t\tflag = 1;\n\t\t\t\tvt.pb(x.id);\n\t\t\t\tfor(int k = 1;k <= m;++k){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\t\t\t\tif(b[k].target == x.id) b[k].target = 0;\n\t\t\t\t} \n\t\t\t}\n\t\t\tvt.pb(j);\n\t\t\tfor(int k = 1;k <= m;++k){//\u7784\u51c6\u5b83\u7684\u5bfc\u5f39\u7acb\u523b\u8131\u9501 \n\t\t\t\tif(b[k].target == j) b[k].target = 0;\n\t\t\t} \n\t\t}\n\t}\n\tif(flag){\n\t\t++out_en.p3;\n\t\tout_en.q3.pb(mp(x.id,vt));\n\t}\n}\nvoid stage7(){//\u6240\u6709\u4f4d\u7f6e\u76f8\u540c\u7684\u65e0\u4eba\u673a\u53d1\u751f\u78b0\u649e\u5e76\u5760\u6bc1\n\tfor(int i = 1;i <= m;++i) chk_collide(a[i]);\n}\n/**************************STAGE 7 END************************************/\n\n/**************************STAGE 8 BEGIN**********************************/\nvoid self_explosion(missile &x){//\u5bfc\u5f39\u81ea\u7206\n\tif(x.status == DEAD) return;\n\tif(x.timer++ == x.tz //\u8d85\u65f6 \n\t\t|| (!x.target && x.status == ACTIVE)) //\u8131\u9501\u5e76\u4e14\u5df2\u7ecf\u6fc0\u6d3b \n\t\t\tx.status = DEAD;\n}\nvoid stage8(){//\u6240\u6709\u8d85\u8fc7\u5236\u5bfc\u65f6\u957f\u548c\u8131\u9501\u4e14\u5df2\u6fc0\u6d3b\u7684\u5bfc\u5f39\u6d88\u5931\u3002\n\tfor(int i = 1;i <= m;++i) self_explosion(b[i]);\n}\n/**************************STAGE 8 END************************************/\n\n/**************************STAGE 9 BEGIN**********************************/\nvoid activate(missile &x){//\u5bfc\u5f39\u6fc0\u6d3b\n\tif(x.status != INACTIVE) return;\n\tif(a[x.id].status == DEAD || (x.p - a[x.id].p).dis2() > x.ds * x.ds) x.status = ACTIVE;\n}\nvoid stage9(){//\u6240\u6709\u53ef\u6fc0\u6d3b\u7684\u5bfc\u5f39\u88ab\u6fc0\u6d3b\n\tfor(int i = 1;i <= m;++i) activate(b[i]);\n}\n/**************************STAGE 9 END************************************/\n\nint main(){\n\tint i;\n\tn = read();t = read();m = n + n;\n\tfor(i = 1;i <= m;++i){\n\t\ta[i].input(i,i <= n);b[i].input(i,i <= n);\n\t}\n\tout_en.init();\n\tfor(i = 1;i <= t;++i){\n\t\tstage1();\n\t\tstage2();\n\t\tstage3();\n\t\tstage4();\n\t\tstage5();\n\t\tstage6();\n\t\tstage7();\n\t\tstage8();\n\t\tstage9();\n\t\tout_en.output();\n\t}\n\treturn 0;\n}\n```\n\n\u540e\u8bb0\uff1a\n\n\u4ece\u9020\u9898\u8005\u7684\u89d2\u5ea6\u8bb2\uff0c\u6700\u5927\u7684\u96be\u70b9\u5927\u6982\u4e0d\u662f\u5199\u51fa\u5b8c\u6574\u4ee3\u7801\uff0c\u800c\u662f\u786e\u4fdd\u4ee3\u7801\u7684\u6b63\u786e\u6027\u4e0e\u9898\u9762\u7684\u51c6\u786e\u548c\u65e0\u6b67\u4e49\u6027\u3002\u56e0\u4e3a\u8fd9\u79cd\u9898\u76ee\u5373\u4f7f\u662f\u51fa\u9898\u4eba\u4e5f\u5f88\u96be\u4fdd\u8bc1\u4ee3\u7801\u4e00\u5f00\u59cb\u5c31\u662f\u5bf9\u7684\u800c\u4e14\u5b8c\u7f8e\u5951\u5408\u9898\u610f\u7684\uff0c\u8bb8\u591a bug\uff0c\u65e0\u8bba\u662f\u7a0b\u5e8f\u4e0a\u7684\u8fd8\u662f\u9898\u76ee\u53d9\u8ff0\u4e0a\u7684\uff0c\u90fd\u662f\u51fa\u9898\u4eba\u548c\u9a8c\u9898\u4eba\u53cd\u590d\u5bf9\u62cd\u3001\u8c03\u8bd5\u3001\u78e8\u5408\u540e\u624d\u80fd\u53d1\u73b0\u7684\u3002\u4f5c\u4e3a\u9a8c\u9898\u4eba\uff0c\u5199\u5b8c\u6574\u4e2a\u4ee3\u7801\u5927\u6982\u53ea\u6709\u96f6\u96f6\u788e\u788e\u7684\u51e0\u4e2a\u5c0f\u65f6\uff0c\u4f46\u662f\u201c\u4e0e\u51fa\u9898\u4eba\u62cd\u8fc7+\u68c0\u9a8c\u9898\u9762\u6b63\u786e\u6027\u201d\u8fd9\u4e8b\u82b1\u4e86\u6211\u4eec\u6574\u6574\u4e00\u4e2a\u665a\u4e0a\u2026\u2026\n\n\u7b97\u4e86\uff0c\u5fc3\u7d2f\u4e86\uff0c\u4ee5\u540e\u4e0d\u641e\u8fd9\u73a9\u610f\u4e86\uff08\u5927\u6982\u7387\u4e0b\u6b21\u4f1a\u771f\u9999\u5427\uff09\u3002",
        "postTime": 1678297728,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P9141 \u3010[THUPC 2023 \u521d\u8d5b] \u4e71\u897f\u661f\u4e0a\u7684\u7a7a\u6218\u3011"
    }
]