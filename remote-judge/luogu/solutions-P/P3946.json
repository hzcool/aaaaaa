[
    {
        "content": "spfa\u3002\u5148\u628a\u65f6\u95f4\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u3010tt\u3011\u4e3a\u6700\u65e9\u5c01\u8def\u7684\u65f6\u95f4\uff0c\u53ea\u9700\u5728spfa\u66f4\u6362\u8def\u5f84\u7684\u65f6\u5019\u518d\u52a0\u4e2a\u5224\u65ad\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u3002\n\n\u6709\u4e00\u4e2a\u5751\u7684\u5730\u65b9\uff0c\u5728\u5230\u7ec8\u70b9\u7684\u65f6\u5019\u4e0d\u7528\u8003\u8651\u96ea\u7684\u6df1\u5ea6\uff0c\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u3002\n\n```cpp\n#include<bits/stdc++.h>//\u53d8\u91cf\u540d\u8ddf\u9898\u76ee\u4e2d\u4e00\u6a21\u4e00\u6837\u54e6\uff0c\u4e0d\u9700\u8981\u6ce8\u91ca\u4e86\u5427\n#define inf 1e9\nusing namespace std;\nint n,m,s,t,g,q,l[1000001],head[1000001],h[1000001],cnt=1,ans,dis[1000001],vis[1000001],tt[1000001];\nstring no_answer=\"wtnap wa kotori no oyatsu desu!\";\nstruct node{\n\tint next,v,w;\n}edge[1000001];\nvoid add(int from,int to,int w){\n\tedge[cnt].w=w;\n\tedge[cnt].v=to;\n\tedge[cnt].next=head[from];\n\thead[from]=cnt;\n\tcnt++;\n}\nbool spfa(){\n\tqueue<int>q;\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i]=inf;\n\t\tvis[i]=0;\n\t}\n\tq.push(s);\n\tvis[s]=1;\n\tdis[s]=0;\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tvis[now]=0;\n\t\tfor(int i=head[now];i;i=edge[i].next){\n\t\t\tint next=edge[i].v;\n\t\t\tif((dis[next]>dis[now]+edge[i].w&&dis[now]+edge[i].w<tt[next]&&next!=t)||(dis[next]>dis[now]+edge[i].w&&next==t)) \n\t\t\t{\n\t\t\t\tdis[next]=dis[now]+edge[i].w;\n\t\t\t\tif(!vis[next]){\n\t\t\t\t\tvis[next]=1;\n\t\t\t\t\tq.push(next);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tans=dis[t];\n\tif(ans==inf) return 0;\n\telse return 1;\n}\nint main(){\n\tcin>>n>>m>>s>>t>>g>>q;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>h[i]>>l[i];\n\t}\n\tint u,v,w;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>u>>v>>w;\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(q==0) {\n\t\t\ttt[i]=inf+1;\n\t\t\tcontinue;\n\t\t}\n\t\ttt[i]=int((double)(l[i]-h[i])/(double)(q));\n\t}\n\tif(spfa()&&ans<=g) cout<<ans;\n\telse cout<<no_answer;\n\treturn 0;\n}\n```\n\n~~\u5077\u5077\u62b1\u8d70\u5357\u5c0f\u9e1f~~",
        "postTime": 1525672519,
        "uid": 48744,
        "name": "TLE\u81ea\u52a8\u673a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    },
    {
        "content": "## **\u9898\u76ee**\n[\u70b9\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P3946)\n## **\u601d\u8def**\n\u770b\u5b8c\u4e86\u9898\uff0c\u8fd9\u4e0d\u5c31\u662f\u6700\u77ed\u8def\u5417\uff1f\n\n\u6000\u7740\u5bf9SPFA\u7684\u70ed\u7231\u4e4b\u5fc3\u53bb\u7801\u4e86\u4e00\u904d\uff0c\u4e00\u904dAC\uff01\uff01\uff01\uff08\u8fd9\u7adf\u7136\u6ca1\u5361SPFA\uff09\n\n\u8fd9\u91cc\u5c31\u662f\u5728\u677e\u5f1b\u4e4b\u540e\uff0c\u5411\u961f\u5217\u52a0\u70b9\u65f6\u52a0\u4e00\u70b9\u5224\u65ad\uff0c\u770b\u770b\u6b64\u65f6\u8fd9\u70b9\u7684\u96ea\u662f\u5426\u592a\u539a\u800c\u88ab\u56f0\u4f4f\uff0c\u5982\u679c\u4e0d\u4f1a\u5c31\u52a0\u5165\u961f\u5217\uff0c\u5426\u5219\u4e0d\u52a0\u3002\n\n## **\u4ee3\u7801**\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500001;\nint n,m,s,t,g,q,h[maxn],l[maxn],cnt,head[maxn],dis[maxn];\nbool vis[maxn];\nstruct node{\n\tint nxt,to,w;\n}edge[maxn<<2];\nvoid add(int x,int y,int w){\n\tedge[++cnt]=(node){head[x],y,w};\n\thead[x]=cnt;\n}\nvoid SPFA(){\n\tmemset(dis,63,sizeof(dis));//\u79bb\u51fa\u53d1\u70b9\u4e00\u5f00\u59cb\u90fd\u8bbe\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\n\tdis[s]=0; vis[s]=1;//SPFA\u57fa\u672c\u64cd\u4f5c\n\tqueue<int>que; que.push(s);\n\twhile(que.size()){\n\t\tint d=que.front();que.pop();vis[d]=0;//\u522b\u5fd8\u4e86\u6807\u8bb0\u53bb\u6389\n\t\tfor(int i=head[d];i;i=edge[i].nxt){\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[d]+edge[i].w){//\u677e\u5f1b\u64cd\u4f5c\n\t\t\t\tdis[y]=dis[d]+edge[i].w;\n\t\t\t\tif(!vis[y]&&l[y]>=h[y]+dis[y]*q) que.push(y),vis[y]=1;\n                //\u5c31\u662f\u5728\u8fd9\u91cc\u52a0\u5224\u65ad\uff0c\u4ece\u51fa\u53d1\u5f00\u59cb\u5230\u8fd9\u91cc\u7684\u8fd9\u6bb5\u65f6\u95f4\u4e2d\u4e0b\u7684\u96ea\u52a0\u4e0a\u539f\u6765\u7684\u96ea\u662f\u5426\u5927\u4e8e\u9650\u5236\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d%d%d%d\",&n,&m,&s,&t,&g,&q);\n\tfor(int i=1;i<=n;i++) scanf(\"%d%d\",&h[i],&l[i]);\n\tint x,y,z;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z),add(y,x,z);//\u6ce8\u610f\u8fd9\u91cc\u662f\u53cc\u5411\u8fb9\n\t}\n\tSPFA();\n\tif(dis[t]<=g) cout<<dis[t]<<endl;//\u5982\u9898\u610f\uff0c\u8f93\u51fa\n\telse cout<<\"wtnap wa kotori no oyatsu desu!\"<<endl;\n\treturn 0;\n}\n```\n\u8fd9\u9898\u5c31\u662f\u8fd9\u6837\uff0c\u8c22\u8c22\u6d4f\u89c8\u3002\n",
        "postTime": 1547643295,
        "uid": 47757,
        "name": "dunko",
        "ccfLevel": 6,
        "title": "\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09"
    },
    {
        "content": "$\\text{Dijkstra}$\u3002\u6709\u53e5\u8001\u8bdd\u8bf4\u5f97\u597d\uff0c\u201c\u5341\u5e74 $\\text{OI}$ \u4e00\u573a\u7a7a\uff0c\u6570\u7ec4\u5f00\u5c0f\u89c1\u7956\u5b97\u201d\uff0c\u800c\u4eca\u5929\uff0c\u6211\u4e5f\u4f53\u4f1a\u4e86\u4e00\u628a\u201c\u89c1\u7956\u5b97\u201d\u7684\u5feb\u611f\u3002\n\n\u8fd9\u9898\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728 $\\text{Dijkstra}$ \u589e\u5e7f\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u4e00\u4e0b\u5230\u8fbe\u65f6\u523b\u79ef\u96ea\u662f\u5426\u5927\u4e8e $lim[v]$ \u5373\u53ef\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6211\u534a\u5e74\u524d\u7528\u57fa\u672c\u4e00\u6837\u7684\u601d\u60f3\u5199\u7684 $\\text{Spfa}$ \u4e00\u76f4\u8fc7\u4e0d\u53bb\uff0c\u4e00\u76f4 $\\text{WA}$ \u7684 $\\text{\\#16}$\uff0c\u4e8e\u662f\u6211\u5728\u534a\u5e74\u4e4b\u540e\u7ec8\u4e8e\u60f3\u8d77\u6765\uff0c\u5e76\u4e14\u5199\u4e86\u4e00\u4e2a $\\text{Dijkstra}$\uff0c\u4f46\u662f\u6ca1\u60f3\u5230\u56e0\u4e3a\u6570\u7ec4\u5f00\u5c0f\u4e86\uff0c\u7ed3\u679c\u4e00\u76f4 $\\text{WA\\#20}$\uff0c\u6570\u7ec4\u8c03\u5927\u5c31 $\\text{AC}$ \u4e86\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4f1a\u5f00\u5c0f\uff1f\u4f60\u6709\u4f53\u9a8c\u8fc7\u628a $\\text{MAXN}$ \u548c $\\text{MAXM}$ \u5199\u6df7\u7684\u611f\u53d7\u5417\uff1f\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 200005\n#define MAXM 500005\n#define ll long long\nusing namespace std;\nstruct Node\n{\n    int u;\n    ll dis;\n    bool operator < (const Node &x) const\n    {\n        return x.dis<dis;\n    }\n};\npriority_queue <Node> q;\nint cnt,fst[MAXN],nxt[MAXM<<1],to[MAXM<<1];\nint n,m,S,T;\nll Q,g,w[MAXM<<1],hei[MAXN],lim[MAXN],dis[MAXN];\nbool fg;\nvoid AddEdge(int u,int v,ll c)\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n    w[cnt]=c;\n}\nvoid Dijkstra()\n{\n    memset(dis,60,sizeof(dis));\n    q.push((Node){S,0});\n    dis[S]=0;\n    while(!q.empty())\n    {\n        Node now=q.top();\n        q.pop();\n        int u=now.u;\n        ll d=now.dis;\n        if(d!=dis[u]) continue;\n        for(int i=fst[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            ll len=dis[u]+w[i];\n            if(dis[v]>dis[u]+w[i] && (hei[v]+len*Q<=lim[v] || v==S || v==T))\n            {\n                if(v==T) fg=1;\n                dis[v]=dis[u]+w[i];\n                q.push((Node){v,dis[v]});\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d %d %d %lld %lld\",&n,&m,&S,&T,&g,&Q);\n    for(int i=1;i<=n;i++) scanf(\"%lld %lld\",&hei[i],&lim[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        ll z;\n        scanf(\"%d %d %lld\",&x,&y,&z);\n        AddEdge(x,y,z);\n        AddEdge(y,x,z);\n    }\n    if(S==T) return puts(\"0\"),0;\n    Dijkstra();\n    if(!fg || dis[T]>g) puts(\"wtnap wa kotori no oyatsu desu!\");\n    else printf(\"%lld\\n\",dis[T]);\n    return 0;\n}\n```",
        "postTime": 1547644037,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    },
    {
        "content": "~~\u849f\u84bb\u5febNOIP\u60f3\u7ec3\u4e60\u4e00\u4e0b\u4e00\u5411\u5f88\u5dee\u7684\u56fe\u8bba\uff0c\u968f\u4fbf\u7ffb\u4e86\u7ffb\u9898\u5c31\u627e\u5230\u4e86\u8fd9\u4e2a\u4e00\u770b\u5c31\u5f88\u60f3\u505a\u7684\u9898\uff0c\u672c\u4eba\u62c9\u62c9\u4eba~~\n\n\u8fd9\u9898\u88f8\u7684spfa\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u6ce8\u610f\u51e0\u4e2a\u7279\u522b\u5224\u5b9a\u70b9\u5c31\u884c\uff0c\u56e0\u4e3a\u4e00\u904dA\u4e86\u5c31\u6765\u53d1\u4e2a\u9898\u89e3\n\n~~\u611f\u89c9\u7b97\u4e0d\u4e0a\u84dd\u9898\u5427\uff0c\u7eff\u9898\u5c01\u9876~~\n\n## - \u6ce8\u610f\u4e8b\u9879\n\n\n           \u4e00\u5f00\u59cb\u8f93\u5165\u65f6\u5224\u5b9a\u79ef\u96ea\u5df2\u7ecf\u6ee1\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u8fd9\u4e2a\u70b9\u76f8\u5f53\u4e8e\u65e0\u6548\u70b9\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\uff0c\u6253\u4e2a\u6807\u8bb0\n           \u518d\u662f\u5728bfs\u6700\u77ed\u8def\u65f6\u52a0\u5165\u7279\u6b8a\u5224\u5b9a\uff0c\n           (h[v]+(dis[u]+edge[i].w)*qq<=l[v]||v==ed)\n           \u4e0d\u9700\u8981\u7279\u5224q=0\u7684\u60c5\u51b5\n           \u7136\u540e\u5c31\u662f\u666e\u901a\u7684spfa()\uff0c\u4e8e\u662f\u5c31\u4e00\u904dA\u4e86\n ```\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N =1000010 ;\nint n,m,st,ed,dis[N],vis[N],flag[N],t[N],g,qq,head[N],cnt,h[N],l[N];\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct node\n{\n    int nt=-1,w,to;\n}edge[N*2];\nvoid add(int x,int y,int z)//\u8fd9\u4e9b\u90fd\u4e0d\u7528\u89e3\u91ca\n{\n    cnt++;\n    edge[cnt].to=y;\n    edge[cnt].w=z;\n    edge[cnt].nt=head[x];\n    head[x]=cnt;\n}\nvoid spfa()//\u666e\u901aspfa\u64cd\u4f5c\n{\n    for(int i=1;i<=n;i++)dis[i]=(1<<30);\n    queue<int>q;\n    q.push(st);\n    dis[st]=0;\n    vis[st]=1;//\u5165\u961f\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        vis[u]=0;\n        for(int i=head[u];i!=-1;i=edge[i].nt)\n        {\n            int v=edge[i].to;\n            if(!flag[v]&&dis[v]>dis[u]+edge[i].w)//\u6ce8\u610f\u5224\u5b9a\u65e0\u6548\u70b9\u548c\u66f4\u65b0dis\n            {\n                if(h[v]+(dis[u]+edge[i].w)*qq<=l[v]||v==ed)//dis[u]+edge[i].w\u4ece\u5f00\u59cb\u5230v\u70b9\u7ecf\u5386\u7684\u65f6\u95f4*q\u5c31\u662f\u589e\u52a0\u7684\u79ef\u96ea\n                {//\u6ce8\u610f\u4e0d\u7528\u8003\u8651\u7ec8\u70b9\u65f6\u7684\u79ef\u96ea\uff0c\u8fd9\u9700\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u7136\u540e\u5c31\u6ca1\u4ec0\u4e48\u4e86\n                    dis[v]=dis[u]+edge[i].w;\n                    if(!vis[v])\n                    {\n                        vis[v]=1;\n                        q.push(v);\n                    }\n                }\n\n            }\n        }\n    }\n}\nint main()\n{\n    n=read();m=read();st=read();ed=read();g=read();qq=read();\n    for(int i=1;i<=n;i++)\n    {\n       h[i]=read();l[i]=read();\n        if(h[i]==l[i])flag[i]=1;//\u6ce8\u610f\u5224\u5b9a\u65e0\u6548\u70b9\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n       x=read();y=read();z=read();\n        add(x,y,z);add(y,x,z);\n    }\n    spfa();\n    if(dis[ed]>g)printf(\"wtnap wa kotori no oyatsu desu!\");//\u8bdd\u8bf4\u8fd9\u53e5\u8bdd\u5565\u610f\u601d\u55b5\u55b5\u55b5\uff0c\u662fwtnap\u88ab\u5c0f\u9e1f\u5403\u4e86\uff1f\uff1f\n    //\u8fd9\u91cc\u8ba8\u8bba\u4e86\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u662fdis[ed]=(1<<30),\u5c31\u662f\u6ca1\u6709\u8d70\u5230ed\u7684\u60c5\u51b5\u548cdis[ed]>g\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u90fd\u6ee1\u8db3dis[ed]>g\u5c31\u5408\u5728\u4e00\u8d77\u4e86\n    else printf(\"%d\",dis[ed]);\n\n    return 0;\n}\n\n```\n           \n\n\n         ",
        "postTime": 1531444810,
        "uid": 55501,
        "name": "Aoki_\u704f",
        "ccfLevel": 0,
        "title": "\u56fe\u8bba\u2014\u2014SPFA\u884d\u751f\u9898"
    },
    {
        "content": "\u9898\u76ee\u603b\u7ed3\uff1a\u4e00\u4e2a\u4eba\u8981\u9009\u62e9\u6700\u77ed\u8def\uff0c\u5e76\u4e14\u8981\u907f\u514d\u96ea\u707e\n\n\u7b97\u6cd5\u603b\u7ed3\uff1aSPFA+\u7279\u5224+\u5c0f\u6280\u5de7\n\n\u5206\u6790\uff1a\u9996\u5148\u770b\u5230\u6570\u636e\uff0c\u8ba9\u6211\u60f3\u8d77\u4e86\u5df2\u6b7b\u7684SPFA\uff0c\u4f46\u662f\u6bd4\u5e73\u5e38\u7684SPFA\u4e0d\u540c\u7684\u662f\uff0c\u5728\u677e\u5f1b\u5224\u65ad\u8bed\u53e5\u4e2d\uff0c\u8981\u770b\u4e00\u4e0b\u8fd9\u6761\u8def\u5728\u8d70\u7684\u65f6\u5019\u6709\u6ca1\u6709\u88ab\u96ea\u63a9,\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7528\u96ea\u8fd8\u53ef\u4e0a\u6da8\u9ad8\u5ea6\u9664\u4ee5\u4e0a\u6da8\u901f\u5ea6\u5f97\u51fa\u4e0a\u6da8\u65f6\u95f4\uff0c\u5728\u4e0e\u8d70\u8fd9\u6761\u8def\u65f6\u7684\u603b\u5171\u7528\u65f6\u8fdb\u884c\u6bd4\u8f83\uff0c\u80fd\u5426\u5b89\u5168\u901a\u8fc7\u3002\n\n     \u4f46\u4f17\u6240\u5468\u77e5\uff0c\u7528\u9664\u6cd5\u662f\u6709\u7cbe\u5ea6\u8bef\u5dee\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4f8b\n     (li-hi)/q>du+cost;\n     \u76f8\u7b49\u4e8e li-hi>(di+cost)*q\n     \u6240\u4ee5\u53ef\u4ee5\u8bbe\u4e00\u6570\u7ec4k[i]=l[i]-h[i],\u7136\u540e\u7528\u3010k[i]>(d[u]+cost)*q\u3011\n     (\u70b9\u775b\u4e4b\u7b14\uff09\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u8bef\u5dee\n     \n     \u9644\u4e0a\u4ee3\u7801\n     \n\n\n------------\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500000+10;\nconst int MAXN=100000+10;\nconst int oo=1e9;\nint n,m,s,t,g,q2,num;\nint head[MAXN],v[MAXN],d[MAXN],k[MAXN],h[MAXN],l[MAXN]; \n\nstruct edge{\n\tint to,next,cost;\n}e[maxn*2];\n\nvoid Add(int from,int to,int cost)\n{\n\tnum++;\n\te[num].to=to;\n\te[num].cost=cost;\n\te[num].next=head[from];\n\thead[from]=num;\n}\n\nvoid spfa()\n{\n\tqueue<int> q;\n\tfor(int i=1;i<=n;i++) d[i]=oo;\n\tmemset(v,0,sizeof(v));\n\td[s]=0;v[s]=1;\n\tq.push(s);\n\twhile(q.size())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tv[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tint cost=e[i].cost;\n\t\t\tif((d[to]>d[u]+cost&&(d[u]+cost)*q2<k[to]&&to!=t)||(d[to]>d[u]+cost&&to==t)) \n\t\t\t{\n\t\t\t\td[to]=d[u]+cost;\n\t\t\t\tif(!v[to])\n\t\t\t\t{\n\t\t\t\t\tq.push(to);\n\t\t\t\t\tv[to]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m>>s>>t>>g>>q2;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>h[i]>>l[i];\n\t\tif(q2==0) k[i]=oo+1;\n        else k[i]=l[i]-h[i];\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tAdd(a,b,c);\n\t    Add(b,a,c);\n\t}\n\tspfa();\n\tif(d[t]<oo&&d[t]<=g) cout<<d[t];\n\telse cout<<\"wtnap wa kotori no oyatsu desu!\";\n\treturn 0;\n}\n```\n\u8fd9\u662f\u4e45\u522b\u91cd\u9022\u7684\u4e00\u7247\u9898\u89e3\uff0c\u671b\u901a\u8fc7\n",
        "postTime": 1579526968,
        "uid": 173239,
        "name": "\u9ec4\u6c5d\u9e4f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    },
    {
        "content": "# Dijkstra \u6a21\u677f\u9898\n\n\u7531\u9898\u610f\u6613\u77e5\uff0c\u6211\u4eec\u53ea\u7528\u5224\u65ad\u5230\u8fbe\u76ee\u7684\u5730\u7684\u6700\u77ed\u65f6\u95f4\u662f\u5426\u8d85\u9650\u3002\n\n\u9650\u5236\u4e00\u5171\u6709\u4e24\u4e2a\uff1a\n\n1\u3001\u5728\u8d70\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u96ea\u5df2\u7ecf\u591a\u5230\u4e0d\u80fd\u8d70\u4e86\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\n\n\u5728\u54ea\u4e2a\u65f6\u95f4\u70b9\u540e\u4e0d\u80fd\u901a\u884c\uff0c\u5982\u679c\u5230\u90a3\u4e2a\u70b9\u8d85\u8fc7\u8be5\u65f6\u95f4\u70b9\uff0c\u5219\u7f6e\u4e3a\u65e0\u6cd5\u5230\u8fbe\n\n2\u3001\u6700\u7ec8\u65f6\u95f4\u70b9\uff0c\u53ea\u7528\u5728\u8dd1\u5b8c\u4e4b\u540e\u5224\u65ad\u4e00\u6b21\n\n\u56e0\u4e3aspfa\u6709\u6982\u7387\u88ab\u5361\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u66f4\u7a33\u5b9a\u7684Dijkstra\n\n\u5907\u6ce8\uff1a\u6ce8\u610fq=0\u7684\u60c5\u51b5\uff0c\u907f\u514dRE\n\n\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nstruct node {\n\tLL v , w;\n\tnode() {}\n\tnode(LL V , LL W) {\n\t\tv = V;\n\t\tw = W;\n\t}\n};\nstruct place {\n\tLL h , l , _max;\n}p[1000005];\nLL dp[1000005] , n , r , cnt , _minsec[1000005];\nvector <node> G[1000005];\nbool vis[1000050];\nvoid read(LL &x) {\n\tLL f = 1;x = 0;char s = getchar();\n\twhile(s < '0' || s > '9') {if(s == '-') f = -1;s = getchar();}\n\twhile(s >= '0' && s <= '9') {x = x * 10 + s - '0'; s = getchar();}\n\tx *= f;\n}\nstruct cmp1 {\n\tbool operator() (node &x , node &y) {\n\t\treturn x.w > y.w;\n\t}\n};\npriority_queue <node , vector <node> , cmp1> q;\nvoid dijkstra(LL s) {\n\tfor (LL i = 1; i <= n; ++i) dp[i] = 1e16;\n\tdp[s] = 0;\n\tq.push(node(s , 0));\n\twhile(!q.empty()) {\n\t\tnode now = q.top();\n\t\tq.pop();\n\t\tLL x = now.v;\n\t\tif(vis[x]) continue;\n\t\tvis[x] = 1;\n\t\tif(now.w >= p[x]._max) continue; // \u8d85\u8fc7\u6700\u5927\u65f6\u95f4\uff0c\u4e0d\u80fd\u8d70\n\t\tfor (LL i = 0; i < G[x].size(); ++i) {\n\t\t\tif(dp[x] + G[x][i].w < dp[G[x][i].v]) {\n\t\t\t\tdp[G[x][i].v] = dp[x] + G[x][i].w;\n\t\t\t\tq.push(node(G[x][i].v , dp[G[x][i].v]));\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tLL s , t , g , q;\n\tread(n);\n\tread(r);\n\tread(s);\n\tread(t);\n\tread(g);\n\tread(q);\n\tfor (LL i = 1; i <= n; ++i) {\n\t\tread(p[i].h);read(p[i].l);\n\t\tif(q != 0) p[i]._max = (p[i].l - p[i].h + q - 1) / q; // \u8ba1\u7b97\u4e0d\u80fd\u901a\u884c\u7684\u65f6\u95f4\n\t\telse p[i]._max = 1e9; // \u7f6e\u4e3a\u4efb\u610f\u65f6\u523b\u80fd\u901a\u884c\n\t}\n\tfor (LL i = 1; i <= r; ++i) {\n\t\tLL x , y , w;\n\t\tread(x);read(y);read(w);\n\t\tG[x].push_back(node(y , w));\n\t\tG[y].push_back(node(x , w));//\u65e0\u5411\u56fe\uff0c\u53cc\u8fb9\n\t}\n\tdijkstra(s);\n\tif(dp[t] > g) printf(\"wtnap wa kotori no oyatsu desu!\"); \n\telse printf(\"%lld\" , dp[t]); // \u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```",
        "postTime": 1571635312,
        "uid": 171554,
        "name": "Reanap",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u6700\u77ed\u8def\u6a21\u578b\uff0c\u4e0d\u8fc7\u4ed6\u6709\u4e00\u4e2a\u9650\u5236\u5c31\u662f\u5728\u5230\u8fbe\u8282\u70b9i\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u8be5\u8282\u70b9\uff0c\u6211\u770b\u89c1\u9898\u89e3\u4e2d\u5927\u591a\u6570\u4eba\u90fd\u662f\u5728\u677e\u5f1b\u4e4b\u524d\u5c31\u5224\u65ad\u7684\uff0c\u53ef\u662f\u8fd9\u6837\u5c31\u4f1a\u6709\u5927\u5927\u5c0f\u5c0f\u7684\u5751\u70b9\uff0c\u9700\u8981\u5224\u65ad\u8282\u70b9\u662f\u5426\u4e3aS\u548cT\u3002\u90a3\u4e48\u6211\u4eec\u4e0d\u5982\u53cd\u8fc7\u6765\u60f3\uff0c\u677e\u5f1b\u7684\u65f6\u5019\u4e0d\u8fdb\u884c\u5224\u65ad\uff0c\u5148\u5230\u8fbe\u8ba1\u7b97dis\u518d\u8bf4\uff0c\u5982\u679cdis\u4e58\u4ee5Q\u52a0\u4e0a\u539f\u96ea\u5c42\u5927\u4e8elimit\uff0c\u6211\u4eec\u5c31\u4e0d\u5c06\u5176\u5165\u961f\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u4f1a\u7b80\u5355\u5f88\u591a\u3002\u800c\u4e14\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u901a\u8fc7\u8be5\u70b9\u7684\u51fa\u8fb9\u90fd\u662f\u4e0d\u4f1a\u7ecf\u8fc7\u677e\u5f1b\u7684\uff08\u56e0\u4e3a\u4e0d\u4f1a\u5165\u961f\uff09\u3002\n\n\u6ce8\u610f\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u591f\n\nAC\u4ee3\u7801\n\n\n```cpp\n#pragma warning (disable:4996)\n#include <cctype>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <vector>\n#define run(a,b,c) for(a=b;a<=c;a++)\n#define INF 0x3f3f3f3f\nusing namespace std;\nnamespace fast\n{\n    inline int read()\n    {\n        int num = 0, w = 1; char c = 0;\n        while (c != '-' && !isdigit(c)) c = getchar();\n        if (c == '-') w = -1, c = getchar();\n        while (isdigit(c)) num = num * 10 + c - '0', c = getchar();\n        return num * w;\n    }\n\n    inline void write(int x)\n    {\n        if (x < 0) putchar('-'), x = -x;\n        if (x / 10) write(x / 10);\n        putchar(x % 10 + '0');\n    }\n}\nusing namespace fast;\n\nconst int MAXN = 1000005, MAXM = 5000005;\n\n\n\nstruct EDGE\n{\n    int _next, to, w;\n}; EDGE edge[MAXM];\n\nint _count, head[MAXN], dis[MAXN], vis[MAXN], _array[MAXM << 1];\nvoid Add_Line(int a, int b, int c)\n{\n    _count++;\n    edge[_count]._next = head[a];\n    edge[_count].to = b;\n    edge[_count].w = c;\n    head[a] = _count;\n}\n\nvoid _Init()\n{\n    memset(dis, INF, sizeof(dis));\n    memset(vis, false, sizeof(vis));\n}\n\nint N, M, S, T, G, Q;\nint H[MAXN], L[MAXN];\nint main()\n{\n    _Init();\n    N = read();\n    M = read();\n    S = read();\n    T = read();\n    G = read();\n    Q = read();\n    for (int i = 1; i <= N; i++)\n    {\n        int a, b;\n        a = read();\n        b = read();\n        H[i] = a;\n        L[i] = b;\n    }\n    for (int i = 1; i <= M; i++)\n    {\n        int a, b, c;\n        a = read();\n        b = read();\n        c = read();\n        Add_Line(a, b, c);\n        Add_Line(b, a, c);\n    }\n    dis[S] = 0;\n    vis[S] = true;\n    int l = 0, r = 1;\n    _array[r] = S;\n    while(l < r)\n    {\n        l++;\n        int NowNode = _array[l];\n        vis[NowNode] = false;\n        for (int i = head[NowNode]; i; i = edge[i]._next)\n        {\n            int NextNode = edge[i].to;\n            if (dis[NextNode] > dis[NowNode] + edge[i].w)\n            {\n                dis[NextNode] = dis[NowNode] + edge[i].w;\n                if (!vis[NextNode]&&(H[NextNode]+dis[NextNode]*Q) <= L[NextNode])\n                {\n                    _array[++r] = NextNode;\n                    vis[NextNode] = true;\n                }\n                if (!vis[NextNode] && NextNode==T)\n                {\n                    _array[++r] = NextNode;\n                    vis[NextNode] = true;\n                }\n            }\n        }\n    }\n    if (dis[T] <= G)\n    {\n        printf(\"%d\", dis[T]);\n    }\n    else\n    {\n        printf(\"wtnap wa kotori no oyatsu desu!\");\n    }\n    getchar();\n    getchar();\n    return 0;\n}\n\n\n```\n\n\u62b1\u8d70\u6d77\u672a",
        "postTime": 1550851912,
        "uid": 78367,
        "name": "CloudStroll",
        "ccfLevel": 7,
        "title": "P3946 \u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u9898\u89e3"
    },
    {
        "content": "\u5b89\u5229\u4e00\u53d1\u6211\u7684\u535a\u5ba2\uff1ahttp://www.fankerwang.com/?p=74\n\n\u5148\u6765\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\n\n- \u5f88\u5bb9\u6613\u770b\u51fa\u6765\u8fd9\u662f\u5355\u6e90\u6700\u77ed\u8def\u7684\u9001\u5206\uff08ming\uff09\u9898\uff0c\u79fb\u52a8\u901f\u5ea6\u6052\u4e3a1m/s\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u65f6\u95f4\u8f6c\u5316\u4e3a\u8ddd\u79bb\u8003\u8651\u3002\n\n- \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u201c\u5982\u679c\u5230\u8fbe\u8fd9\u4e2a\u5730\u70b9\u7684\u65f6\u5019\uff0c\u8fd9\u91cc\u7684\u96ea\u7684\u9ad8\u5ea6\u9ad8\u4e8eli\u5219\u4f1a\u88ab\u56f0\u5728\u8fd9\u4e2a\u70b9\u8d70\u4e0d\u51fa\u53bb\u201d\uff0c\u63a8\u7406\u5f97\u5230\u7b2c i \u4e2a\u70b9\u96ea\u9ad8\u5ea6\u9ad8\u5230\u4e0d\u80fd\u901a\u8fc7\u7684\u7ecf\u5386\u65f6\u95f4\u4e3a t = ( hi \u2013 li ) / q \uff0c\u8f6c\u5316\u4e3a\u80fd\u901a\u8fc7\u70b9 i \u7684\u6761\u4ef6\uff1a\u5230\u8fbe\u70b9 i \u65f6\u5df2\u7ecf\u8d70\u8fc7\u7684\u6700\u5927\u8def\u7a0b\u4e3at\u3002\n\n- \u7136\u540e\u4f60RE\u4e8640\u5206\u7684\u70b9\uff0c\u53d1\u73b0\u5b58\u5728\u4e0d\u4e0b\u96ea\uff08q=0\uff09\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u52a0\u4e0a\u5bf9q=0\u7684\u7279\u5224\u3002\n\n- \u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u201c\u3053\u3068\u308a\u60f3\u5728g\u79d2\u5185\u56de\u5230\u5bb6\u5403\u70b9\u5fc3\uff0c\u8d8a\u5feb\u8d8a\u597d\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u677e\u5f1b\u64cd\u4f5c\u65f6\u9009\u62e9\u8d70\u67d0\u6761\u8def\u540e\u7684\u603b\u8def\u7a0b\u5927\u4e8eg\uff0c\u5c31\u4e0d\u9700\u8981\u5bf9\u8fd9\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u4e86\uff0c\u56e0\u4e3a\u8d70\u8fd9\u6761\u8fb9\u80af\u5b9a\u5f97\u4e0d\u5230\u6b63\u89e3\u3002\n\n- SPFA\u4e00\u904d\u540e\u5bdf\u770b\u76ee\u6807\u70b9\u8ddd\u79bb\u662f\u5426\u88ab\u66f4\u65b0\uff0c\u5982\u679c\u88ab\u66f4\u65b0\u8fc7\uff0c\u66f4\u65b0\u8fc7\u7684\u503c\u5c31\u662f\u7b54\u6848\u3002\u5982\u679c\u6ca1\u88ab\u66f4\u65b0\u8fc7\uff0c\u8bf4\u660e\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\uff0c\u8f93\u51fa\u65e0\u89e3\u5373\u53ef\u3002\n\n- \u7136\u540e\u4f60WA\u4e86#19\uff0c\u53d1\u73b0\u4e0d\u9700\u8981\u8003\u8651\u7ec8\u70b9\u4f1a\u4e0d\u4f1a\u96ea\u592a\u539a\u88ab\u56f0\u4f4f\uff08\u628a\u6211\u56f0\u5728\u5bb6\u91cc\u5427\u6211\u4e0d\u60f3\u4e0a\u5b66(\u252c\uff3f\u252c)\uff09\u3002\n\n- \u4fee\u6539\u7ec8\u70b9\u9650\u5236\u4e3a\u65e0\u7a77\u5927\uff0cAC\u4e86\u3002\n\n- \u4f18\u5316\u601d\u8def\uff1a\u90bb\u63a5\u8868\u5b58\u8fb9\u7528list\u7684\u597d\u5c11\uff0c\u4e3b\u8981\u662fSTL\u5f88\u6162...\u4e0d\u8fc7\u8fd9\u9053\u9898\u8fd8\u662f\u80fd\u8fc7\u7684\uff0clist\u770b\u8d77\u6765\u4e5f\u66f4\u4f18\u96c5\u5bf9\u5427...\u5982\u679c\u7528\u5806\u4f18\u5316Dijkstra\uff0c\u4f46\u662f\u7531\u4e8e\u80fd\uff08wo\uff09\u8fc7\uff08lan\uff09\uff0c\u6240\u4ee5\u5c31\u6ca1\u7528\uff0c\u60f3\u770bDijkstra\u89e3\u6cd5\u7684\u770b\u6807\u7a0b\u5427\u3002\n\n\u8d34\u4ee3\u7801\uff1a\n\n\u00b7\u00b7\u00b7cpp\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<list>\n#include<climits>\nusing namespace std;\nconst int MAXN = 100000 + 100;\nint lim[MAXN]; //\u5230\u8fbe\u6bcf\u4e2a\u8282\u70b9\u65f6\u6700\u5927\u5141\u8bb8\u5df2\u7ecf\u8d70\u8fc7\u7684\u8def\u7a0b\nint dis[MAXN]; //\u5b58\u50a8\u6e90\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\nint n, m, s, t, g, q;\nbool inP[MAXN]; //SPFA\u4e2d\u7528\u5230\uff0c\u662f\u5426\u5728\u96c6\u5408P\u4e2d\nstruct edge{ int to, length; };\nlist<edge> edges[MAXN];\nvoid addedge( int u, int v, int w ){ edges[u].push_back( (edge){ v,w } ); }\nvoid spfa(){\n    //\u521d\u59cb\u5316dis\u4e3a\u65e0\u7a77\u5927\n    for( int i=1; i<=n; i++ ) dis[i] = INT_MAX; \n    queue<int> q;\n    q.push(s);\n    dis[s] = 0;\n    inP[s] = true;\n    while( !q.empty() ){\n        int cur = q.front(); q.pop();\n        inP[cur] = false;\n        //\u677e\u5f1b\u64cd\u4f5c\uff0c\u904d\u5386cur\u7684\u6bcf\u6761\u51fa\u8fb9\n        for( list<edge>::iterator it = edges[cur].begin(); it != edges[cur].end(); it++ )\n            //\u5224\u65ad\u677e\u5f1b\u64cd\u4f5c\u80fd\u5426\u8fdb\u884c\u7684\u7279\u6b8a\u6761\u4ef6\n            if( dis[cur] + it->length <= lim[it->to] && dis[cur] + it->length < g )\n                //\u786e\u8ba4\u53ef\u4ee5\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5c1d\u8bd5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c \n                if( dis[cur] + it->length < dis[it->to] ){\n                    dis[it->to] = dis[cur] + it->length;\n                    if( !inP[it->to] ) q.push( it->to ) , inP[it->to] = true;\n                }\n    }\n}\nint main(){\n    scanf( \"%d %d %d %d %d %d\", &n, &m, &s, &t, &g, &q );\n    for( int i=1; i<=n; i++ ){\n        int li, hi; scanf( \"%d %d\", &hi, &li );\n        //\u6ce8\u610fq\u53ef\u80fd\u4e3a\u96f6\uff0c\u8981\u7279\u5224\uff0c\u4e0d\u7136\u4f1aRE\u7684\uff01\n        if( q == 0 ){ lim[i] = li - hi; continue; }\n        lim[i] = ( li - hi ) / q;\n    } \n    //\u628a\u7ec8\u70b9\u7684\u96ea\u5ffd\u7565\u6389\n    lim[t] = INT_MAX; \n    for( int i=1; i<=m; i++ ){\n        int tu, tv, tw; scanf( \"%d %d %d\", &tu, &tv, &tw );\n        addedge( tu, tv, tw );\n        addedge( tv, tu, tw );\n    }\n    spfa();\n    if( dis[t] == INT_MAX ) //\u5230\u4e0d\u4e86\u5bb6 \n        printf( \"wtnap wa kotori no oyatsu desu!\\n\" );\n     else\n         printf( \"%d\\n\", dis[t] );\n    return 0;\n}\n```\n\u00b7\u00b7\u00b7\n\u6709\u4efb\u4f55\u7591\u95ee\u6b22\u8fce\u53bb\u6211\u7684\u535a\u5ba2\u63d0\u95ee\uff08\u9003\n",
        "postTime": 1509853924,
        "uid": 43666,
        "name": "UnknownUserAgent",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    },
    {
        "content": "\u9898\u76ee&\u6570\u636eby @Pantw +\\_+\n\n\n\u9898\u89e3\uff1a\n\n\n\u9996\u5148\uff0c\u5982\u679cq\u4e3a0\uff0c\u90a3\u4e48\u672c\u9898\u5c31\u662f\u88f8\u7684\u6700\u77ed\u8def\uff0c\u5c06h[i]>l[i]\u7684\u70b9\u53bb\u6389\u5373\u53ef\u3002\n\n\n\u8003\u8651q\u4e0d\u4e3a0\u7684\u60c5\u51b5\u3002\u8bbe\u5230\u8fbe\u70b9i\u7684\u8ddd\u79bb\u4e3adist[i]\u90a3\u4e48\u80fd\u4ece\u8be5\u70b9\u8d70\u51fa\u53bb\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a\n\n\n\nh[i] + dist[i]\\*q <= l[i]\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u65f6\u5c06\u8d70\u4e0d\u51fa\u53bb\u7684\u70b9\u505c\u6b62\u62d3\u5c55\u5373\u53ef\u3002 \u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u5982\u6709\u7591\u95ee\u8be6\u89c1\u9898\u76ee\u9875\u9762\u4e0b\u7aef\u7684\u6807\u7a0b\u3002\n\n\nWA 19\u53ef\u80fd\u662f\u56e0\u4e3a\u6ca1\u6709\u5ffd\u7565\u7ec8\u70b9\u7684\u96ea\u3002\n\n\n~~\u6bd4\u8d5b\u65f6RE 20\u662f\u51fa\u9898\u4eba\u7684\u9505\uff0c\u9898\u9762\u5199\u7684\u6570\u636e\u8303\u56f4\u662fm<=2e5\u4f46#20\u7684m=5e5\u3002~~\n\n\nQAQ\uff08~~\u597d\u50cf\u5361\u4e86\u65e0\u6570\u4eba\u7684AC\uff1f~~\uff09\n\n\n\u5927\u5bb6\u4e0d\u8981\u6253\u6211\u554aemmm\n",
        "postTime": 1509635887,
        "uid": 21421,
        "name": "pantw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3946 \u3010\u3053\u3068\u308a\u306e\u304a\u3084\u3064\uff08\u5c0f\u9e1f\u7684\u70b9\u5fc3\uff09\u3011"
    }
]