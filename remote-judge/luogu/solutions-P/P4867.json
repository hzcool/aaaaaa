[
    {
        "content": "# \u9898\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u6709 n \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u5bf9\u8be5\u5e8f\u5217\u6709 m \u4e2a\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u8f93\u51fa\u533a\u95f4 $[l,r]$ \u5185,\u6743\u503c\u5728\u533a\u95f4 $[a,b]$ \u4e2d\u7684\u6743\u503c\u7684\u79cd\u7c7b\u6570\u3002    \n# \u601d\u8def\n\u4e00\u4e2a\u533a\u95f4\u5185\u67d0\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u96be\u4ee5\u7528\u6811\u578b\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\uff0c\u4f46\u79bb\u7ebf\u7b97\u6cd5\u2014\u2014\u83ab\u961f\u53ef\u4ee5\u8f7b\u677e\u7ef4\u62a4\u3002    \n\u5982\u679c\u5e73\u8861\u6811\u6216\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6743\u503c\uff0c\u90a3\u4e48\u6bcf\u8fdb\u884c\u4e00\u6b21 \u533a\u95f4\u8c03\u6574\uff08\u4e00\u6b21 add \u6216 \u4e00\u6b21 del\uff09\uff0c\u90fd\u9700\u8981 $O(\\log n)$\u7684\u590d\u6742\u5ea6\u6765\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u8fbe\u5230 $O(n \\sqrt{n}\\log n)$ ,\u7531\u4e8e $N,M\u22641000000$ \uff0c\u6240\u4ee5\u65e0\u6cd5AC\u6b64\u9898\u3002   \n\u89c2\u5bdf\u83ab\u961f\u7b97\u6cd5\u548c\u6570\u636e\u8303\u56f4\uff0c\u4f1a\u53d1\u73b0\u63d2\u5165\u6216\u5220\u9664\u64cd\u4f5c\u6b21\u6570\u5373\u533a\u95f4\u8c03\u6574\u6b21\u6570,\u4e3a $O(n \\sqrt{n})$ \u7ea7\u522b\uff0c\u67e5\u8be2\u64cd\u4f5c\u7684\u6b21\u6570\u4e3a n \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a $O(1)$ \u63d2\u5165/\u5220\u9664, $O(\\sqrt{n})$ \u6216\u4f4e\u4e8e $O(\\sqrt{n})$ \u7684\u590d\u6742\u5ea6\u67e5\u8be2\u5728\u533a\u95f4 $[a,b]$ \u4e2d\u7684\u6743\u503c\u7684\u6570\u636e\u7ed3\u6784/\u7b97\u6cd5\u3002   \n\u503c\u57df\u5206\u5757\u4fbf\u53ef\u4ee5 $O(1)$ \u63d2\u5165/\u5220\u9664, $O(\\sqrt{n})$ \u67e5\u8be2\uff0c\u82e5\u7528\u83ab\u961f+\u503c\u57df\u5206\u5757\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\sqrt{n})$ ,\u7531\u4e8e $N,M\u22641000000$ \uff0c\u6240\u4ee5\u53ef\u4ee5AC\u6b64\u9898\u3002   \n**\u8840\u7684\u6559\u8bad\uff1a**  \n**1. \u672c\u9898 $1\u2264s_i\u2264n$ ,\u53ef\u4ee5\u4e0d\u79bb\u6563\u5316\uff1b\u4f46\u5982\u679c\u79bb\u6563\u5316\u4e86\uff0c\u8981\u8bb0\u5f97\u628a\u8be2\u95ee\u91cc\u7684 a \u548c b \u8f6c\u5316\u4e3a\u79bb\u6563\u5316\u540e\u7684\u6570\u3002**    \n**2. \u5982\u679cTLE\uff0c\u90a3\u5c31\u5361\u5361\u5e38\u3002**\n# \u4ee3\u7801\n\u7801\u98ce\u4e11\u964b\uff0c\u8bf7\u89c1\u8c05\u3002   \n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1000005,sqrn=1005;\nstruct query{\n\tint l,r,A,B,id;\n}q[maxn];\nint a[maxn],cnt[maxn],num[sqrn],b[maxn],bl[sqrn],br[sqrn],ls=1,rs,size,f[maxn],n,m;\nbool cmp(query x,query y){\n    return (x.l-1)/size==(y.l-1)/size?(((x.l-1)/size)&1?x.r<y.r:x.r>y.r ):(x.l-1)/size<(y.l-1)/size; \n}\ninline void add(int k){\n\tcnt[a[k]]++;\n\tif(cnt[a[k]]==1)num[b[a[k]]]++;\n}\ninline void del(int k){\n\tcnt[a[k]]--;\n\tif(!cnt[a[k]])num[b[a[k]]]--;\n}\ninline void query(int d){\n\tint x=q[d].A,y=q[d].B,k=q[d].id;\n\tfor(int i=x;i<=y&&i<=br[b[x]];i++)\n\t\tif(cnt[i])f[k]++;\n\tif(b[x]!=b[y])\n\t\tfor(int i=bl[b[y]];i<=y;i++)\n\t\t \tif(cnt[i])f[k]++;\n\tfor(int i=b[x]+1;i<b[y];i++)\n\t\tf[k]+=num[i];\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%d\",a+i);//lsh[i].id=i,scanf(\"%d\",&lsh[i].data);\n\t//sort(lsh+1,lsh+n+1,cmp1);\n//\tfor(int i=1;i<=n;i++){\n\t//\tif(lsh[i].data!=lsh[i-1].data||i==1)num[0]++;\n//\t\ta[lsh[i].id]=num[0];\n//\t}//\u60e8\u75db\u7684\u6559\u8bad\n\tfor(size=1;size*size<n;size++);\n\tfor(register int i=1;i<=m;++i)\n\t\tq[i].id=i,scanf(\"%d%d%d%d\",&q[i].l,&q[i].r,&q[i].A,&q[i].B );\n\tsort(q+1,q+m+1,cmp),num[0]=0;\n\tfor(register int i=1;i<=n;i++)b[i]=(i-1)/size+1;\n    for(register int i=1;i<=b[n];i++)bl[i]=(i-1)*size+1,br[i]=i*size;\n    br[b[n]]=n;\n\tfor(register int i=1;i<=m;++i){\n\t\tint nl=q[i].l ,nr=q[i].r ;\n\t\twhile(rs<nr)rs++,add(rs);\n\t\twhile(ls>nl)ls--,add(ls);\n\t\twhile(ls<nl)ls++,del(ls-1);\n\t\twhile(rs>nr)rs--,del(rs+1);\n\t\tquery(i);\n\t}for(register int i=1;i<=m;++i)printf(\"%d\\n\",f[i]);\n\treturn 0;\n}\n```\n# \u4e3e\u4e00\u53cd\u4e09\n\u51e0\u9053\u5176\u4ed6\u7684\u83ab\u961f+\u503c\u57df\u5206\u5757\u7684\u9898\n1. [P4396 [AHOI2013]\u4f5c\u4e1a](https://www.luogu.com.cn/problem/P4396) \n1. [\t\nP3730 \u66fc\u54c8\u987f\u4ea4\u6613](https://www.luogu.com.cn/problem/P3730)   \n1. \u5495\u5495\u5495\n\n",
        "postTime": 1585957886,
        "uid": 212187,
        "name": "VTloBong",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u622a\u81f3\u76ee\u524d\uff082020.7.21\uff09\u672c\u9898\u6240\u6709\u9898\u89e3\u90fd\u662f\u83ab\u961f + \u503c\u57df\u5206\u5757 / \u503c\u57df\u6811\u72b6\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u662f\u6709 poly log \u89e3\u6cd5\u7684\n\n- **\u5206\u6790**\n\n  \u6ce8\u610f\u5230\u8fd9\u9898\u662f\u4e00\u4e2a\u5e26\u6709\u503c\u57df\u9650\u5236\u7684\u533a\u95f4\u6570\u989c\u8272\uff0c\u800c\u533a\u95f4\u6570\u989c\u8272\u662f\u6709 poly log \u89e3\u6cd5\u7684\uff0c\u53ef\u4ee5\u770b [\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P1972) \u7684\u9898\u89e3\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u8fd8\u662f\u7a0d\u5fae\u4ecb\u7ecd\u4e00\u4e0b\n  \n  \u90a3\u9898\u5e38\u6570\u8f83\u5c0f ~~\u4e5f\u662f\u552f\u4e00\u80fd\u8fc7\u7684~~ \u7684\u505a\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n  \n  \u5bf9\u4e8e\u6240\u6709\u8be2\u95ee\u6309\u53f3\u7aef\u70b9 $r$ \u6392\u5e8f\uff0c\u7136\u540e\u5c06 $i$ \u4ece $1$ \u5230 $n$ \u626b\u4e00\u904d\uff0c\u6bcf\u6b21\u5728\u4e00\u4e2a\u4ee5\u539f\u6570\u7ec4\u4e0b\u6807\u4e3a\u7f16\u53f7\u7684\u6811\u72b6\u6570\u7ec4\u4e0a\uff0c\u5728 $i$ \u7684\u4f4d\u7f6e\u52a0 $1$\uff0c\u5728 $[1,i - 1]$ \u4e2d\u6700\u540e\u4e00\u4e2a\u4e0e $i$ \u540c\u8272\u7684\u4f4d\u7f6e\u51cf $1$\uff0c$i$ \u79fb\u52a8\u5230 $r$ \u65f6\uff0c\u67e5 $[l,r]$ \u7684\u548c\u5c31\u662f\u989c\u8272\u6570\n  \n  \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd \u201c\u540c\u8272\u70b9\u53ea\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a\u201d \u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u5f53 $i$ \u51fa\u73b0\u65f6\uff0c$[1,i - 1]$ \u4e2d\u4e0e $i$ \u540c\u8272\u7684\u70b9\u5fc5\u5b9a\u4e0d\u662f\u6700\u53f3\u8fb9\u4e00\u4e2a\u4e86\n  \n  \u63a5\u4e0b\u6765\u8003\u8651\u628a\u8fd9\u4e2a\u505a\u6cd5\u642c\u5230\u8fd9\u9053\u9898\u4e0a\n  \n  \u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u505a\u592a\u5927\u7684\u6539\u52a8\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528 \u201c\u540c\u8272\u70b9\u53ea\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a\u201d \u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u5728\u9047\u5230\u4e00\u4e2a\u65b0\u7684 $a_i$ \u65f6\u52a0\u5165 $a_i$\uff0c\u5220\u53bb\u4e0e $a_i$ \u503c\u76f8\u540c\u7684\u4e0a\u4e00\u4e2a\u70b9\n  \n  \u539f\u6765\u7684\u505a\u6cd5\u662f\u7ef4\u62a4\u4e00\u4e2a\u53ea\u6709 (\u4e0b\u6807) \u4e00\u7ef4\u4fe1\u606f\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6539\u4e3a\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f (\u4e0b\u6807,\u503c)\uff0c\u7136\u540e\u6bcf\u6b21\u67e5\u8be2\u4e0b\u6807\u5728 $[l,r]$ \u5185\uff0c\u4e14\u503c\u5728 $[a,b]$ \u5185\u6709\u591a\u5c11\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e86\n  \n  \u6ce8\u610f\u5230\u8fd9\u9898\u8981\u6c42\u7ebf\u6027\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 cdq\u5206\u6cbb \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\n  \n  \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n + m) \\log ^ 2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n + m)$\n  \n  \u4ee3\u7801\uff1a\u83ab\u5f97\n  \n  \u56e0\u4e3a\u8fd9\u9898\u5b9e\u5728\u662f\u592a\u5361\u7a7a\u95f4\u4e86\u2026\u2026 \u8fde\u7a7a\u95f4\u6d88\u8017\u8f83\u5c0f\u7684\u83ab\u961f\u90fd\u662f\u8d34\u7740\u8fb9\u8fc7\u7684\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u7a7a\u95f4\u6d88\u8017\u80af\u5b9a\u66f4\u5927\uff0c\u516b\u6210\u8fc7\u4e0d\u4e86\u2026\u2026",
        "postTime": 1595313963,
        "uid": 330759,
        "name": "\u56e7\u4ed9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "## \u4e00\u773c\u83ab\u961f\n\u7b49\u7b49\uff0c\u597d\u50cf\u4e0d\u592a\u5bf9\u52b2\uff0c\u8fd8\u8ba9\u6211\u4eec\u7ef4\u62a4$~[a,b]~$\u7684\u79cd\u7c7b\u6570\uff0c\u80bf\u4e48\u529e\u5462?\n\n\u53d1\u73b0$~a,b~\\in[1,n]$\uff0c\u8fd9\u597d\u50cf\u662f\u4e2a\u5f88\u597d\u7684\u4e1c\u897f\u3002\n\n\u518d\u60f3\u60f3\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\n\n\u53d1\u73b0\u5b58\u5728\u4e00\u4e2a\u53eb\u503c\u57df\u5206\u5757\u7684\u4e1c\u897f~~\u5206\u5757\u5927\u6cd5\u543c\u554a~~\u3002\n\n\u54c8\u54c8\u54c8\uff0c\u8fd9\u4e0d\u5c31\u662f\u4e2a\u88f8\u9898\u4e86\u561b\u3002  \u5207\u6389\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <cmath>\nusing namespace std;\nconst int N = 1000010;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , len;\nint a[N] , L[1010] , R[1010] , pos[N] , sum[1010] , c[N] , ans[N];\nstruct node\n{\n\tint l , r , x , y , id;\n\tfriend bool operator < (const node & a,const node & b) {return pos[a.l] == pos[b.l] ? a.r < b.r : pos[a.l] < pos[b.l];}\n}e[N];\ninline void add(int x) {if(++ c[x] == 1) sum[pos[x]] ++;}\ninline void del(int x) {if(-- c[x] == 0) sum[pos[x]] --;}\ninline int query(int l,int r)\n{\n\tint res = 0;\n\tif(pos[l] == pos[r]) \n\t{\n\t\tfor(int i = l;i <= r;i ++)\tres += (c[i] > 0);\n\t\treturn res;\n\t}\n\tfor(int i = l;i <= R[pos[l]];i ++)\tres += (c[i] > 0);\n\tfor(int i = L[pos[r]];i <= r;i ++)\tres += (c[i] > 0);\n\tfor(int i = pos[l] + 1;i < pos[r];i ++)\tres += sum[i];\n\treturn res;\n}\nint main()\n{\n\tn = read(); m = read(); len = sqrt(n);\n\tmemset(L,127,sizeof L);\n\tfor(int i = 1;i <= n;i ++)\t\n\t{\n\t\ta[i] = read();\n\t\tpos[i] = (i - 1) / len + 1;\n\t\tL[pos[i]] = min(L[pos[i]],i);\n\t\tR[pos[i]] = max(R[pos[i]],i);\n\t}\n\tfor(int i = 1;i <= m;i ++)\n\t{\n\t\te[i].l = read(); e[i].r = read();\n\t\te[i].x = read(); e[i].y = read(); e[i].id = i;\n\t}\n\tsort(e+1,e+1+m);\n\tint l = 1 , r = 0;\n\tfor(int i = 1;i <= m;i ++)\n\t{\n\t\twhile(r < e[i].r) add(a[++r]);\n\t\twhile(r > e[i].r) del(a[r--]);\n\t\twhile(l < e[i].l) del(a[l++]);\n\t\twhile(l > e[i].l) add(a[--l]);\n\t\tans[e[i].id] = query(e[i].x,e[i].y);\n\t}\n\tfor(int i = 1;i <= m;i ++)\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1568936712,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u6211\u4eec\u8981\u7ef4\u62a4\u533a\u95f4\u5185\u5143\u7d20\u79cd\u6570\u3002\n\n\u5148\u8003\u8651\u4e00\u822c\u60c5\u51b5\uff0c\u95ee\u9898\u53d8\u4e3a\u533a\u95f4\u5185\u5143\u7d20\u79cd\u6570\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u83ab\u961f\u95ee\u9898\uff0c\u53ef\u4ee5\u7528 $O(n\\sqrt n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u95ee\u9898\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5143\u7d20\u6709\u4e00\u5b9a\u9650\u5236\uff1a\u6211\u4eec\u8981\u6c42 $val \\in [a,b]$ \u7684\u79cd\u6570\u3002\u9996\u5148\u5bb9\u65a5\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u6c42\u51fa $val \\in [1,b]$ \u7684\u79cd\u6570 $p$\uff0c\u518d\u6c42\u51fa $val \\in [1,a-1]$ \u7684\u79cd\u6570 $q$\uff0c\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u5373\u4e3a $p-q$\u3002\n\n\u518d\u56de\u53bb\u770b\u503c\u57df\uff0c\u53ea\u6709 $10^5$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt n \\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint pos[1000005],n,p,m,a[100005],gr,cnt[100005],ans[1000005];\nstruct queries{\n    int l,r,a,b,id;\n    queries(){l=r=a=b=id=0;}\n    queries(int L,int R,int A,int B,int ID){l=L,r=R,a=A,b=B,id=ID;}\n    bool operator < (queries another) const {\n        if(pos[l]==pos[another.l])  return r<another.r;\n        return l<another.l;\n    }\n}que[1000005];\nstruct BinaryIndexedTree{\n    int a[100005];\n    int lowbit(int x){return x&(-x);}\n    void modify(int x,int val){for(int i=x;i<=n;i+=lowbit(i))   a[i]+=val;}\n    int query(int x)\n    {\n        int ans=0;\n        while(x)    ans+=a[x],x-=lowbit(x);\n        return ans;\n    }\n}bit;\nvoid add(int x)\n{\n\tx=a[x];\n\tif(!cnt[x])\tbit.modify(x,1);\n\t++cnt[x];\n}\nvoid sub(int x)\n{\n\tx=a[x];\n\t--cnt[x];\n\tif(!cnt[x])\tbit.modify(x,-1);\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tp=sqrt(n);\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&a[i]),pos[i]=(i-1)/p+1;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint l,r,a,b;\n\t\tscanf(\"%d %d %d %d\",&l,&r,&a,&b);\n\t\tque[i]=queries(l,r,a,b,i);\n\t}\n\tsort(que+1,que+1+m);\n\tfor(int i=1,l=1,r=0;i<=m;++i)\n\t{\n\t\twhile(l>que[i].l)\tadd(--l);\n\t\twhile(l<que[i].l)\tsub(l++);\n\t\twhile(r<que[i].r)\tadd(++r);\n\t\twhile(r>que[i].r)\tsub(r--);\n\t\tans[que[i].id]=bit.query(que[i].b)-bit.query(que[i].a-1);\n\t}\n\tfor(int i=1;i<=m;++i)\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1595925395,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u9898\u4e00\u770b\u76f4\u63a5\u83ab\u961f\u554a\n\n\u4f46\u662f\u6211\u4eec\u8981\u60f3\u60f3\u600e\u4e48\u4fee\u6539\n\n\u4e00\u5f00\u59cb\u6211\u60f3\u6811\u72b6\u6570\u7ec4\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u5199o((\u2299\ufe4f\u2299))o\n\n\u540e\u6765\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u53d1\u73b0\u53ef\u4ee5\u5c06\u503c\u57df\u5206\u5757\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u67e5\u8be2$O(\\sqrt n)$\uff0c\u4fee\u6539$O(1)$\u4e86\n\n\u603b\u590d\u6742\u5ea6$O(m \\sqrt n)$\n\n\uff08\u4ee3\u7801\u7684$ask$\u90e8\u5206\u53c2\u8003\u4e86\u4e00\u4e0b\u6807\u7a0b\uff0c\u601d\u8def\u53c2\u8003\u4e86\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u8bf7\u89c1\u8c05\uff09\n```cpp\n#include <bits/stdc++.h>\n#define getindex(x) ((x - 1) * block + 1)\n#define getpos(x) ((x - 1) / block + 1)\nconst int MaxN = 1e5 + 10, MaxM = 1e6 + 10;\nstruct query\n{\n    int id, pos;\n    int l, r, a, b;\n};\nquery q[MaxM];\nint n, m, size, block;\nint a[MaxN], ans[MaxM], cnt[MaxN], sum[MaxN];\ninline int cmp(query a, query b)\n{\n    if (a.pos != b.pos)\n        return a.pos < b.pos;\n    return a.r < b.r;\n}\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\ninline void ins(int x)\n{\n    ++cnt[a[x]];\n    if (cnt[a[x]] == 1)\n        ++sum[getpos(a[x])];\n}\ninline void del(int x)\n{\n    --cnt[a[x]];\n    if (cnt[a[x]] == 0)\n        --sum[getpos(a[x])];\n}\ninline int ask(int a, int b, int l, int r)\n{\n    int ans = 0, Posl = getpos(l), Posr = getpos(r);\n    for (int i = Posl + 1; i < Posr; i++)\n        ans += sum[i];\n    if (Posl == Posr)\n    {\n        for (int i = l; i <= r; i++)\n            if (cnt[i])\n                ++ans;\n    }\n    else\n    {\n        int L = getindex(Posr), R = getindex(Posl + 1) - 1;\n        for (int i = l; i <= R; i++)\n            if (cnt[i])\n                ++ans;\n        for (int i = L; i <= r; i++)\n            if (cnt[i])\n                ++ans;\n    }\n    return ans;\n}\ninline void solve()\n{\n    int l = 1, r = 0;\n    for (int i = 1; i <= m; i++)\n    {\n        while (l > q[i].l)\n            l--, ins(l);\n        while (r < q[i].r)\n            r++, ins(r);\n        while (l < q[i].l)\n            del(l), l++;\n        while (r > q[i].r)\n            del(r), r--;\n        ans[q[i].id] = ask(q[i].l, q[i].r, q[i].a, q[i].b);\n    }\n}\nint main()\n{\n    n = read(), m = read();\n    size = pow(n, 0.55), block = sqrt(n);\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    for (int i = 1; i <= m; ++i)\n    {\n        q[i].l = read(), q[i].r = read();\n        q[i].a = read(), q[i].b = read();\n        q[i].id = i, q[i].pos = (q[i].l - 1) / size + 1;\n    }\n    std::sort(q + 1, q + m + 1, cmp);\n    solve();\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1549254377,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u83ab\u961f\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u9898\uff0c\u63d2\u5165\u548c\u5220\u9664\u90fd\u662f$O(n\\sqrt{m})$\u7684\uff0c\u800c\u8be2\u95ee\u53ea\u6709$O(m)$\uff0c\u6240\u4ee5\u50cf\u7b2c\u4e00\u7bc7\u9898\u89e3\u90a3\u6837\u7528\u6811\u72b6\u6570\u7ec4\u662f\u975e\u5e38\u6d6a\u8d39\u7684\uff0c\u6211\u4eec\u8003\u8651\u5e73\u8861\u4e00\u4e0b\u63d2\u5165\u5220\u9664\u548c\u8be2\u95ee\u7684\u65f6\u95f4\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u6743\u503c\u5206\u5757\uff0c\u8fd9\u6837\u63d2\u5165\u5220\u9664\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(1)$\u7684\uff0c\u800c\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u53d8\u6210\u4e86$O(\\sqrt{n})$\u7684\uff0c\u8fd9\u6837\u603b\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(n\\sqrt{m}+m\\sqrt{n})$\u7684\u4e86\u3002\n\n\u6709\u4eba\u89c9\u5f97\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e0d\u5bf9\uff0c\u4f46\u7b97\u4e00\u4e0b\uff0c\u5176\u5b9e\u8fd9\u4e2a\u590d\u6742\u5ea6\u975e\u5e38\u5bf9\u3002\n\n```\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#define mxn 100010\n#define mxm 1000010\nusing namespace std;\nint n,m,Q,sl,fh,s[mxn],pos[mxn],sum[320],num[mxn],ans[mxm];\nstruct ask\n{\n    int l,r,a,b,id;\n    bool operator <(const ask &x)const {return pos[l]<pos[x.l]||(pos[l]==pos[x.l]&&r<x.r);}\n}q[mxm];\nint rd()\n{\n    sl=0;fh=1;\n    char ch=getchar();\n    while(ch<'0'||'9'<ch) {if(ch=='-') fh=-1; ch=getchar();}\n    while('0'<=ch&&ch<='9') sl=sl*10+ch-'0',ch=getchar();\n    return sl*fh;\n}\nvoid add(int i)\n{\n    num[s[i]]++;\n    sum[pos[s[i]]]+=num[s[i]]==1;\n}\nvoid del(int i)\n{\n    num[s[i]]--;\n    sum[pos[s[i]]]-=num[s[i]]==0;\n}\nint query(int l,int r)\n{\n    int cnt=0,L=pos[l],R=pos[r];\n    if(L==R)\n    {\n        for(int i=l;i<=r;++i) cnt+=num[i]>0;\n        return cnt;\n    }\n    for(int i=L+1;i<R;++i) cnt+=sum[i];\n    for(int i=l;i<=(L+1)*m;++i) cnt+=num[i]>0;\n    for(int i=R*m+1;i<=r;++i) cnt+=num[i]>0;\n    return cnt;\n}\nint main()\n{\n    n=rd();Q=rd();m=sqrt(n);\n    for(int i=1;i<=n;++i) s[i]=rd(),pos[i]=(i-1)/m;\n    for(int i=1;i<=Q;++i)\n    {\n        q[i].l=rd();q[i].r=rd();\n        q[i].a=rd();q[i].b=rd();\n        q[i].id=i;\n    }\n    sort(q+1,q+Q+1);int l=1,r=0;\n    for(int i=1;i<=Q;++i)\n    {\n        while(l>q[i].l) add(--l);\n        while(l<q[i].l) del(l++);\n        while(r<q[i].r) add(++r);\n        while(r>q[i].r) del(r--);\n        ans[q[i].id]=query(q[i].a,q[i].b);\n    }\n    for(int i=1;i<=Q;++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1548465538,
        "uid": 27677,
        "name": "day_dream",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u83ab\u961f\u66b4\u529b\u8fc7\u767e\u4e07\u7cfb\u5217233333\n\n\u8fd9\u9898\u548cAHOI2013\u4f5c\u4e1a\u7b2c\u4e8c\u95ee\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u6570\u636e\u8303\u56f4\u592710\u500d\u3002\n\n\u4f46\u662f\u7a7a\u95f4\u5c45\u7136\u53ea\u670930M\uff0c\uff0c\uff0c\uff0c\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define R register int\n#define AC 100100\n#define ac 1000010\n\nint n, m, cnt, block;\nint ans[ac], s[AC], tot[AC];\n\nstruct node{\n    int l, r, a, b, id;\n}q[ac];\n\ninline int lowbit(int x)\n{\n    return x & (-x);\n}\n\nstruct kkk{\n    int a[AC];\n    \n    void add(int x, int y)\n    {\n        for(R i = x; i <= n; i += lowbit(i)) a[i] += y;\n    }\n    \n    int find(int x)\n    {\n        int rnt = 0;\n        for(R i = x; i; i -= lowbit(i)) rnt += a[i];\n        return rnt;\n    }\n}c2;\n\ninline int read()\n{\n    int x = 0;char c = getchar();\n    while(c > '9' || c < '0') c = getchar();\n    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x;\n}\n\ninline bool cmp(node a, node b)\n{\n    if(a.l / block != b.l / block) return a.l < b.l;\n    else return a.r < b.r;//\u5206\u5757\u6392\u5e8f\n}\n\nvoid pre()\n{\n    n = read(), m = read(), block = sqrt(n);\n    for(R i = 1; i <= n; i ++) s[i] = read();\n    for(R i = 1; i <= m; i ++)\n    {\n        q[i].l = read(), q[i].r = read(), q[i].id = i;\n\t\tq[i].a = read(), q[i].b = read();\n    }\n    sort(q + 1, q + m + 1, cmp);\n}\n\nvoid add(int x)\n{\n    if(!tot[x]) c2.add(x, 1);\n    ++ tot[x];\n}\n\nvoid del(int x)\n{\n    -- tot[x];\n    if(!tot[x]) c2.add(x, -1);\n}\n\nvoid work()//\u8fd9\u91cc\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u4e0e\u533a\u95f4\u65e0\u5173\uff0c\u76f8\u5bf9\u72ec\u7acb\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u987a\u5e8f\u95ee\u9898\n{\n    int l, r;\n    for(R i = q[1].l; i <= q[1].r; i ++) add(s[i]);\n    ans[q[1].id] = c2.find(q[1].b) - c2.find(q[1].a - 1);\n    l = q[1].l, r = q[1].r;\n    for(R i = 2; i <= m; i ++)\n    {\n        int ll = q[i].l, rr = q[i].r;\n        while(ll < l) -- l, add(s[l]);\n        while(ll > l) del(s[l]), ++ l;\n        while(rr > r) ++ r, add(s[r]);\n        while(rr < r) del(s[r]), -- r;\n        ans[q[i].id] = c2.find(q[i].b) - c2.find(q[i].a - 1);\n    }\n    for(R i = 1; i <= m; i ++) printf(\"%d\\n\", ans[i]);\n}\n\nint main()\n{\n\tfreopen(\"in.in\", \"r\", stdin);\n    pre();\n    work();\n\tfclose(stdin);\n    return 0;\n}\n\n```",
        "postTime": 1536039838,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u770b\u89c1\u8fd9\u9898\u5185\u5b58\u53ea\u5f00\u4e86`30MiB`\uff0c\u6211\u4eec\u53ea\u80fd\u8003\u8651\u4f7f\u7528\u83ab\u961f\u3002\n\n\u7531\u4e8e\u9700\u8981\u5728\u503c\u57df\u533a\u95f4\u67e5\u8be2\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u80fd$O(1)$\u4fee\u6539\uff0c$O(\\sqrt n)$\u4ee5\u5185\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u503c\u57df\u5206\u5757\u3002\n\n\u503c\u57df\u5206\u5757\u7684\u5757\u5927\u5c0f\u5f00$\\sqrt n$\u6700\u4f18\u6bcb\u5eb8\u7f6e\u7591\uff0c\u4f46\u662f\u770b\u5f88\u591a\u9898\u89e3\u83ab\u961f\u7684\u5757\u5f00\u7684$\\sqrt m$\uff0c\u4e2a\u4eba\u611f\u89c9\u6709\u70b9\u8349\u7387\u3002\n\n\u8003\u8651$n$\u548c$m$\u7684\u6570\u91cf\u7ea7\u7565\u6709\u5dee\u5f02\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u89e3\u5747\u503c\u4e0d\u7b49\u5f0f\u3002\n\n\u6211\u4eec\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a$l$\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a$n$\uff0c\u8be2\u95ee\u4e2a\u6570\u4e3a$m$\n\n\u83ab\u961f\u7684\u5de6\u7aef\u70b9\u6bcf\u6b21\u8be2\u95ee\u90fd\u5728\u4e00\u4e2a\u5757\u5185\u6765\u56de\u6e9c\u8fbe\uff0c\u6bcf\u6b21\u6700\u574f\u79fb\u52a8\u957f\u5ea6\u4e3a$l$\uff0c\u90a3\u4e48\u5de6\u7aef\u70b9\u79fb\u52a8\u603b\u590d\u6742\u5ea6\u4e3a$ml$\n\n\u5bf9\u4e8e\u5de6\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u7684\u8be2\u95ee\uff0c\u53f3\u7aef\u70b9\u4f1a\u5355\u8c03\u671d\u4e00\u4e2a\u65b9\u5411\u8d70\uff0c\u6700\u574f\u79fb\u52a8$n$\uff0c\u6211\u4eec\u6709$\\frac{n}{l}$\u5757\uff0c\u6240\u4ee5\u53f3\u7aef\u70b9\u79fb\u52a8\u603b\u590d\u6742\u5ea6\u4e3a$\\frac{n^2}{l}$\n\n\u90a3\u4e48\u83ab\u961f\u7684\u603b\u590d\u6742\u5ea6\u4e3a$O(ml + \\frac{n^2}{l})$\uff0c\u7531\u4e8e$m$\u548c$n$\u5728\u8f93\u5165\u65f6\u5c31\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48$mn^2$\u5c31\u786e\u5b9a\u4e86\u3002\u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c\u4e0a\u9762\u7684\u5f0f\u5b50\u5728$ml = \\frac{n^2}{l}$\u65f6\u6700\u5c0f\uff0c\u89e3\u5f97$l=\\sqrt {\\frac{n^2}{m}}$\u3002\u4e5f\u5c31\u662f\u8bf4\u5757\u5f00\u5230\u8fd9\u4e48\u5927\u65f6\u590d\u6742\u5ea6\u6700\u4f18\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\nconst int MAXN = 2e5 + 5;\nconst int MAXM = 2e6 + 5;\n\nint n, m;\nint a[MAXN];\nint blo[MAXM], block;\nint ans[MAXM];\n\nstruct Query{\n\tint l, r, mn, mx, id;\n}qs[MAXM];\n\nint Comp(const Query &a, const Query &b) {\n\tif (blo[a.l] == blo[b.l]) {\n\t\tif (blo[a.l] & 1) return a.r < b.r;\n\t\telse return a.r > b.r;\n\t}\n\treturn a.l < b.l;\n}\n\nnamespace Blocks{\n\tint num[MAXN], vis[MAXN];\n\tint block, blo[MAXN];\n\tint sum[1000];\n\t\n\tvoid Init() {\n\t\tblock = sqrt(n);\n\t\tfor (int i = 1; i <= n; i++) blo[i] = (i - 1) / block + 1;\n\t}\n\t\n\tvoid Add(int x) {\n\t\tif (!num[x]) {\n\t\t\tsum[blo[x]]++;\n\t\t\tvis[x] = 1;\n\t\t}\t\n\t\tnum[x]++;\n\t}\n\t\n\tvoid Del(int x) {\n\t\tnum[x]--;\n\t\tif (!num[x]) {\n\t\t\tsum[blo[x]]--;\n\t\t\tvis[x] = 0;\n\t\t}\n\t}\n\t\n\tint Query(int l, int r) {\n\t\tint res = 0;\n\t\twhile (l % block != 1 && l <= r) res += vis[l++];\n\t\twhile (r % block != 0 && l <= r) res += vis[r--];\n\t\twhile (l <= r) {\n\t\t\tres += sum[blo[l]];\n\t\t\tl += block;\n\t\t}\n\t\treturn res;\n\t}\n}\n\nvoid Prework() {\n\tblock = sqrt(1.0 * n * n / m);\n\tfor (int i = 1; i <= m; i++) blo[i] = (i - 1) / block + 1;\n\tBlocks::Init();\n}\n\nvoid CaptainMo() {\n\tint nl = 1, nr = 0;\n\tusing Blocks::Add;\n\tusing Blocks::Del;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint l = qs[i].l, r = qs[i].r, mn = qs[i].mn, mx = qs[i].mx, id = qs[i].id;\n\t\twhile (nr < r) Add(a[++nr]);\n\t\twhile (nr > r) Del(a[nr--]);\n\t\twhile (nl < l) Del(a[nl++]);\n\t\twhile (nl > l) Add(a[--nl]);\n\t\tans[id] = Blocks::Query(mn, mx);\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(NULL);\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++) cin >> a[i];\n\tPrework();\n//\tcerr << \"*\";\n\tfor (int i = 1; i <= m; i++) {\n\t\tcin >> qs[i].l >> qs[i].r >> qs[i].mn >> qs[i].mx;\n\t\tqs[i].id = i;\n\t}\n\tsort(qs + 1, qs + m + 1, Comp);\n\tCaptainMo();\n\tfor (int i = 1; i <= m; i++) cout << ans[i] << '\\n';\n\treturn 0;\n}\n```\n\n\u4f60\u4ea4\u4e0a\u53bb\u4e0d\u4f1aAC\uff0c\u597d\u597d\u770b\u770b\u5e94\u8be5\u6539\u54ea",
        "postTime": 1576488097,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u63a8\u5e7f](https://www.vixbob-lwc.pw)\n\n\u9274\u4e8e\u8fd9\u9053\u9898\u7684\u552f\u4e00\u4e00\u7bc7\u9898\u89e3\u7684\u590d\u6742\u5ea6\u90fd\u6709\u95ee\u9898\n\n\u6240\u4ee5\u6211\u6765\u53d1\u4e00\u7bc7\u590d\u6742\u5ea6\u6bd4\u8f83\u6b63\u786e\u7684\u9898\u89e3\u5427\n\n\u9996\u5148\u83ab\u961f\u80af\u5b9a\u662f\u53ef\u4ee5\u641e\u7684\uff0c \u800c\u4e14\u6bd2\u7624\u7684\u51fa\u9898\u4eba\u53ea\u7ed9\u4e86 $30MB$ \u7a7a\u95f4\uff0c \u83ab\u961f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\uff0c \u4e5f\u6bd4\u8f83\u7b26\u5408\u8fd9\u4e00\u70b9\n\n\u4e0e\u4ee5\u5f80\u4e0d\u4e00\u6837\u7684\u662f\uff0c \u6211\u4eec\u5728\u79fb\u52a8\u83ab\u961f\u7684\u6307\u9488\u65f6\u8981\u652f\u6301\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u548c\uff0c \u8003\u8651\u5230\u4fee\u6539\u7684\u6b21\u6570\u548c\u79fb\u52a8\u7684\u6b21\u6570\u4e0d\u5728\u4e00\u4e2a\u6570\u91cf\u7ea7\u4e0a\uff0c \u4fee\u6539\u7684\u6b21\u6570\u8981\u6bd4\u67e5\u8be2\u7684\u6b21\u6570\u8981\u591a\u5f97\u591a\uff0c \u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u652f\u6301 $O(1)$ \u4fee\u6539\uff0c \u4f46\u67e5\u8be2\u590d\u6742\u5ea6\u6ca1\u90a3\u4e48\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784\n\n\u6211\u4eec\u8003\u8651\u5206\u5757\uff01\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u4fee\u6539\u7684\u590d\u6742\u5ea6\u964d\u5230 $O(1)$ \u4e86, \u4f46\u67e5\u8be2\u662f $O(\\sqrt{n})$\n\n\u603b\u590d\u6742\u5ea6\u4e3a $O(m\\sqrt{n})$ \u7684\uff0c \u76f8\u6bd4\u7528\u6811\u72b6\u6570\u7ec4\u7684\u590d\u6742\u5ea6 $O(m \\sqrt{n} \\cdot logn)$ \u8fd8\u662f\u8981\u4f18\u79c0\u5f88\u591a\u7684",
        "postTime": 1543411990,
        "uid": 50971,
        "name": "ViXbob",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u663e\u7136\u662f\u5f04\u4e2a\u83ab\u961f\u7136\u540e\u5957\u4e2a\u53ef\u4ee5\u7ef4\u62a4\u57df\u503c\u4e0a\u7684\u533a\u95f4\u52a0\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u60f3\u5230\u6811\u72b6\u6570\u7ec4\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u7684 $m$ \u8fc7\u5927\uff0c\u4ee5\u81f3\u4e8e\u6811\u72b6\u6570\u7ec4\u7684 $O(n\\sqrt m \\log n)$ \u5f88\u96be\u8fc7\u3002\n\n\u5f53\u7136\u7528\u5947\u5076\u6392\u5e8f+\u5757\u957f\u53d6 $\\sqrt n$ \u662f\u73c2\u4ee5\u8fc7\u7684\u3002\n\n\u7136\u540e\u53e6\u4e00\u4e2a\u505a\u6cd5\u662f\u7528\u5206\u5757\u505a\u3002\n\n\u56e0\u4e3a\u6dfb\u52a0\u70b9\u7684\u590d\u6742\u5ea6\u662f $O(1)$ \u7136\u540e\u6c42\u533a\u95f4\u52a0\u662f $O(\\sqrt n)$\u3002\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\sqrt m+m\\sqrt n)$\u3002\n\n\u7136\u540e\u4ecb\u7ecd\u4e00\u4e0b\u5206\u5757\u7684\u7b80\u5355\u505a\u6cd5\u3002\n\n\u56e0\u4e3a\u8fd9\u4e2a\u6709\u533a\u95f4\u53ef\u51cf\u6027\u6240\u4ee5\u5f04\u4e2a\u6c42 $sum$ \u7684\u51fd\u6570\u76f4\u63a5\u6c42 $sum(r)-sum(l-1)$ \u5c31\u597d\u3002\n\n\u4e5f\u4e0d\u7528\u7ef4\u62a4\u4ec0\u4e48\u5757\u8fb9\u7684\uff0c\u76f4\u63a5\u968f\u4fbf\u641e\uff0c\u957f\u5ea6\u548c\u6811\u72b6\u6570\u7ec4\u5dee\u4e0d\u591a\u3002\n\n\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u6bd4\u8f83\u7b80\u5355\u5c31\u4e0d\u653e\u4e86\u3002\n\n\u653e\u4e00\u4e0b\u8fd9\u4e2a\u5206\u5757\u79d1\u6280\u3002\n\n```cpp\nint len;\nint t1[10005];\nint t2[100005];\nvoid insert(int w,int v)\n{\n\tt1[w/len]+=v;\n\tt2[w]+=v;\n}\nint sum(int k)\n{\n\tint i,sum=0;\n    for(i=0;(i+1)*len<k;i++)\n    \tsum+=t1[i];\n    for(i=i*len;i<=k;i++)\n    \tsum+=t2[i];\n    return sum;\n}\n```\n",
        "postTime": 1587813268,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\uff0c\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u7528\u83ab\u961f\u5904\u7406\u533a\u95f4\u4e0a\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4ece\u533a\u95f4$[L,R]$\u6269\u81f3\u533a\u95f4$[L,R+1]$\u65f6\u589e\u52a0\u7684\u8d21\u732e\u7684\u5904\u7406\u6709\u4e24\u79cd\u601d\u8def\uff1a\n### \u6cd51$(O(n\\sqrt n\\log n))$\uff1a\n\u6211\u4eec\u7528~~\u5e38\u6570\u5c0f\u7684~~\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e2a$f$\u6570\u7ec4\uff0c$f[i]$\u8868\u793a\u7f8e\u4e3d\u5ea6\u5728$[1,i]$\u4e2d\u7684\u7f8e\u4e3d\u5ea6\u7684\u79cd\u7c7b\u6570\u3002\n\n\u67e5\u8be2\u65f6\u5c06\u533a\u95f4$[a,b]$\u62c6\u4e3a$[1,a-1]$\u4e0e$[1,b]$\uff0c\u65b0\u52a0\u5165\u4e00\u4e2a\u6570$x$\u65f6\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u5c06$f[x]$\u5230$f[b]$\u7684\u503c\u5168\u90e8$+1$\uff0c\u67e5\u8be2\u65f6\u7edf\u8ba1\u5373\u53ef\u3002\n### \u6cd52:$(O(n\\sqrt n))$\uff1a\n\u7528\u503c\u57df\u5206\u5757\uff0c\u5199\u6cd5\u8fd8\u662f\u8bb0\u5f55\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u601d\u60f3\u540c[HH\u7684\u9879\u94fe](https://www.lydsy.com/JudgeOnline/problem.php?id=1878)\uff0c\u5982\u679c\u65b0\u51fa\u73b0\u4e86\u4e00\u4e2a\u6570\u5c31$O(1)$\u4fee\u6539\u8fd9\u4e2a\u6570\u6240\u5728\u7684\u5757\u51fa\u73b0\u7684\u603b\u79cd\u7c7b\u6570\uff0c\u6700\u540e\u518d$O(\\sqrt n)$\u7edf\u8ba1\u5373\u53ef\u3002\n\n\u533a\u95f4\u6536\u7f29\u65f6\u51cf\u53bb\u8d21\u732e\u5373\u53ef\u3002\n## Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint Read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')  f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,m,a[100005],base,L[1005],R[1005],belong[100005],cnt=0,ans[1000005];\nint sum[100005],s[100005],ss[100005];\nstruct que{\n\tint l,r,a,b,id;\n}q[1000005];\nbool operator < (que x,que y){\n\tif(belong[x.l]!=belong[y.l])  return belong[x.l]<belong[y.l];\n\treturn x.r<y.r;\n}\nvoid Del(int pos){\n\ts[a[pos]]--;\n\tif(s[a[pos]]==0)  sum[belong[a[pos]]]--,ss[a[pos]]=0;\n}\nvoid Ins(int pos){\n\ts[a[pos]]++;\n\tif(s[a[pos]]==1)  sum[belong[a[pos]]]++,ss[a[pos]]=1;\n}\nint calc(int l,int r){\n\tint l1=belong[l],r1=belong[r],res=0;\n\tfor(int i=l1+1;i<=r1-1;i++){\n\t\tres+=sum[i];\n\t}\n\tfor(int i=l;i<=min(R[l1],r);i++){\n\t\tres+=ss[i];\n\t}\n\tif(r<=R[l1])  return res;\n\tfor(int i=L[r1];i<=r;i++)  res+=ss[i];\n\treturn res;\n}\nvoid solve(){\n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++){\n\t\twhile(q[i].l>l)  Del(l++);\n\t\twhile(q[i].l<l)  Ins(--l);\n\t\twhile(q[i].r<r)  Del(r--);\n\t\twhile(q[i].r>r)  Ins(++r);\n\t\tans[q[i].id]=calc(q[i].a,q[i].b);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tcout<<ans[i]<<endl;\n\t}\n}\nint main(){\n\tn=Read(),m=Read();\n\tfor(int i=1;i<=n;i++)  a[i]=Read();\n\tfor(int i=1;i<=m;i++){\n\t\tq[i].l=Read(),q[i].r=Read();\n\t\tq[i].a=Read(),q[i].b=Read();\n\t\tq[i].id=i;\n\t}\n\tbase=sqrt(n);\n\tfor(int i=1;i<=n;i+=base){\n\t\tL[++cnt]=i,R[cnt]=i+base-1;\n\t}\n\tR[cnt]=n;\n\tfor(int i=1;i<=cnt;i++){\n\t\tfor(int j=L[i];j<=R[i];j++){\n\t\t\tbelong[j]=i;\n\t\t}\n\t}\n\tsort(q+1,q+m+1);\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1579576867,
        "uid": 48257,
        "name": "wlj_55",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4867 \u3010Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217\u3011"
    }
]