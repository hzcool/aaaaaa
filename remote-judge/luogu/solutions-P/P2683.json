[
    {
        "content": "\u88f8\u7684\u6700\u77ed\u8def\u6a21\u677f\uff0c\u6570\u636e\u8303\u56f4\u5c0f\uff0c\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u5728\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u884c\uff0c\u5982\u679c\u62c5\u5fc3\u65f6\u95f4\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u5806\u4f18\u5316\u7684dijkstra,\u5b8c\u5168\u53ef\u4ee5\u8fc7\uff0c\u5806\u53ef\u4ee5\u624b\u6253\uff0c\u4f46\u4f5c\u4e3astl\u515a\uff0c\n\u6211\u4eec\u53ef\u662f\u6709\u9ed1\u79d1\u6280\u7684\u3002\u4f18\u5148\u961f\u5217\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528stl\u7684pair\u4f7f\u4ed6\u6210\u4e3a\u5c0f\u6839\u5806\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd0\u7b97\u7b26\u88c5\u8f7d\u5c06\u5176\u91cd\u8f7d\u4e3a\u5c0f\u6839\u5806\u3002\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nstruct node{//\u5c0f\u6839\u5806\u91cd\u8f7d\n    int now,x;//now\u4ee3\u8868\u70b9\u7684\u4f4d\u7f6e\uff0cx\u4ee3\u8868\u8ddd\u79bb\n    bool operator <(const node &tmp) const\n    {\n        return x>=tmp.x;\n    }\n}cur;\nint head[110],to[10010],nxt[10010],v[10010],num,dis[10010],e,n,m,x,y,k;\nbool vis[110];\nconst int inf=2147483647; \nvoid add(int x,int y,int z)//\u524d\u5411\u661f\u5efa\u56fe\uff0c\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u5b58\u4e24\u6761\u8fb9\n{\n    to[++num]=y;\n    v[num]=z;\n    nxt[num]=head[x];\n    head[x]=num;\n    to[++num]=x;\n    v[num]=z;\n    nxt[num]=head[y];\n    head[y]=num;\n}\nvoid dij(int s)\n{\n    priority_queue<node>q;\n    fill(dis+1,dis+n+1,inf);//\u521d\u59cb\u5316\uff0c\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff0c\u4e0d\u7136\u5b83\u4f1a\u4e0e\u4e0a\u6b21\u67e5\u8be2\u6709\u51b2\u7a81\u3002\n    fill(vis+1,vis+n+1,0);\n    dis[s]=0;\n    q.push((node){\n        s,dis[s]\n    });\n    while(!q.empty())\n    {\n        cur=q.top();\n        q.pop();\n        if(vis[cur.now]) continue;\n        vis[cur.now]=1;\n        for(int i=head[cur.now];i;i=nxt[i])\n        {\n            if(dis[to[i]]>dis[cur.now]+v[i])//\u8def\u5f84\u538b\u7f29\n            {\n                dis[to[i]]=dis[cur.now]+v[i];\n                q.push((node){\n                    to[i],dis[to[i]]\n                });\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&k);\n        if(k==0)\n        {\n            scanf(\"%d%d\",&x,&y);\n            dij(x);//\u904d\u5386\u6700\u77ed\u8def\n            printf(\"%d\\n\",dis[y]==inf?-1:dis[y]);\n        }\n        else \n        {\n            scanf(\"%d%d%d\",&x,&y,&e);\n            add(x,y,e);//\u52a0\u8fb9\n        }\n    }\n    return 0;\n}\t\n```\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7\u3002",
        "postTime": 1544256452,
        "uid": 113773,
        "name": "\u516c\u4e3b\u6bbf\u4e0bMIKU",
        "ccfLevel": 0,
        "title": "\u5c0f\u5c9b"
    },
    {
        "content": "# GR \u82f9\u679c\u53f6\uff08AHOI\u521d\u4e2d\u7ec4\u547d\u9898\u8005&&\u94bb\u77f3\u6559\u7ec3\uff09\u6b63\u7248\u6388\u6743\n### \u672c\u9898\u6b63\u89e3Floyed\uff08\u4f46\u662f\u548c\u524d\u51e0\u4f4d\u5199\u7684Floyed\u601d\u8def\u4e0d\u540c\uff09\n\n\u8003\u8651\u4e00\u6b21\u4fee\u6539\u8fb9\u7684\u64cd\u4f5c\uff0c\u5c06\u53d7\u5230\u8fd9\u6761\u8fb9\u5f71\u54cd\u7684\u70b9\u679a\u4e3e\u51fa\u6765\u3002\uff08\u8fd9\u6761\u8fb9\u76f8\u5f53\u4e8e\u679a\u4e3e\u4e2d\u7684K\uff09\u3002\n\u6709\u4ee5\u4e0b\u4fee\u6539\u6700\u77ed\u8def\u7684\u65b9\u5f0f\uff1a\n\n### f[i][j]=f[i][s]+f[s][d]+f[d][j];\n###### \uff08\u5176\u4e2df[s][d]\u8868\u793a\u521a\u521a\u8bfb\u5165\u7684\u8fdb\u884c\u4fee\u6539\u7684\u8fb9\uff09\n\n\n\u5bf9\u6bcf\u6b21\u8bfb\u5165\u6700\u65b0\u4fee\u6539\u7684\u8fb9\u679a\u4e3ei,j\u66f4\u65b0\u6700\u77ed\u8def\u8fd9\u6837\u505am\u6b21\u5c31\u5b8c\u4e86\u3002\uff08\u7b80\u4e0d\u7b80\u5355\uff1f\uff09\n\n\n\n\n\n\u8d34\u4e0a\u6b63\u89e3\u6807\u7a0b\uff1a\n\n\n\n```cpp\n#include<cstdio>\nconst int inf=199999990;\nint n,m,f[101][101];\nint main(){\n\tint a,s,d,e;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(i!=j)f[i][j]=inf;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&a,&s,&d);\n\t\tif(a==0){\n\t\t\tif(f[s][d]!=inf)printf(\"%d\\n\",f[s][d]);\n\t\t\telse printf(\"-1\\n\");\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d\",&e);\n\t\t\tif(e<f[d][s]){\n\t\t\t    f[d][s]=f[s][d]=e;\n\t\t\t    for(int k=1;k<=n;k++){\n\t\t\t    \tfor(int l=1;l<=n;l++){\n\t\t\t    \t\tif(f[k][s]+f[s][d]+f[d][l]<f[k][l])\n\t\t\t\t\t\t    f[k][l]=f[l][k]=f[k][s]+f[s][d]+f[d][l];//\u6838\u5fc3\u8bed\u53e5\u66f4\u65b0f[k][l]\u7684\u6700\u77ed\u8def \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t}\n\treturn 0;\n}\n//\u590d\u6742\u5ea6O((n^2)*m) \n```\n\u6700\u6162\u768452ms\u5c31\u8fc7\u4e86\uff0c\u8fd8\u662f\u6bd4\u8f83\u9ad8\u6548\u7b80\u4fbf\u7684",
        "postTime": 1565707502,
        "uid": 31621,
        "name": "\u8ffd\u98ce\u5c11\u5e74\u03c3\u03c7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "~~\u5199\u4e00\u4e2a\u6548\u7387\u5dee\u4e00\u70b9\u4f46\u8fd0\u884c\u8d77\u6765\u6548\u679c\u4e0d\u9519\u7684\u65b9\u6cd5\u5427~~\n\n\u8fd8\u8bb0\u5f97[P1119 \u707e\u540e\u91cd\u5efa](https://www.luogu.org/problemnew/show/P1119)\u4e2d\uff0c\u6bcf\u6b21\u589e\u52a0\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u8be2\u95ee\u5168\u6e90\u6700\u77ed\u8def\u3002\u90a3\u9053\u9898\u5e94\u8be5\u7528$Floyd$\u7b97\u6cd5\u7684\u6765\u641e\u3002\n\n$Floyd$\u7b97\u6cd5\u4e2d\uff0c$dist[k][i][j]$ \u7684\u542b\u4e49\u662f\u4ee5 $i,j$ \u4e3a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8def\u5f84\u4e0a\u7684\u4e2d\u95f4\u70b9\u7f16\u53f7**\u4e0d\u8d85\u8fc7** $k$ \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u8fd9\u9053\u9898\u7684\u601d\u60f3**\u7c7b\u4f3c $Floyd$ \u7b97\u6cd5**\uff0c\u53ea\u4e0d\u8fc7 $Floyd$ \u6bcf\u6b21\u679a\u4e3e\u4e2d\u95f4\u70b9\u677e\u5f1b\u8def\u5f84\uff0c\u6211\u4eec\u679a\u4e3e\u4e2d\u95f4\u8fb9\u6765\u677e\u5f1b\u8def\u5f84\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u589e\u52a0\u7684\u8fb9 $(a->b,c)$ \uff0c\u679a\u4e3e\u4efb\u610f\u4e24\u4e2a\u70b9 $i,j$ \uff0c\u8003\u8651\u5230\u65b0\u589e\u8fb9\u540e\uff0c\u8def\u5f84\u65b9\u6848\u5fc5\u987b\u6ee1\u8db3\uff1a\n\n$dist[i][j]<=min(dist[i][a]+dist[b][j]+c,dist[i][b]+dist[a][j]+c)$\n\n\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u677e\u5f1b\u6765\u641e\u5566~\n\n\u6ce8\u610f\u8fd9\u91cc\u65b0\u589e\u7684\u8fb9\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u5fc5\u987b\u6309\u4e24\u4e2a\u65b9\u5411\u8fdb\u884c\u677e\u5f1b\n\n\u6548\u7387 $O(n^2m)$ \u770b\u8d77\u6765\u597d\u50cf\u6ca1\u6709$Dijkstra$~~\u66b4\u529b~~\u7b97\u6cd5\u7684 $O(mnlogn+m^2)$ \u597d\uff0c\u4f46\u662f\u8fd9\u79cd\u7b97\u6cd5\u7684\u5e38\u6570\u6bd4\u8f83\u5c0f\uff0c\u5199\u8d77\u6765\u4e5f\u597d\u5199\uff0c\u800c\u4e14\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684\u6570\u636e $(n<=100,m<=5000)$ \uff0c\u8fd9\u79cd\u65b9\u6cd5\u8dd1\u8d77\u6765\u8fd8\u662f\u6bd4\u8f83\u5feb\u7684\u3002\n\n\u4f46\u662f\u5427\uff0c\u8fd9\u79cd\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u6211\u8fd8\u6ca1\u627e\u5230\u597d\u7684\u8bc1\u660e\u65b9\u6cd5\uff0c\u5982\u679c\u5404\u4f4d\u5927\u4f6c\u6709\u8bc1\u660e\u6216\u8005\u6709\u53cd\u4f8b\u8bf7\u8054\u7cfb\u7b14\u8005\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint myp[107][107];//\u5c31\u662fmap...\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            if(i==j)myp[i][j]=0;\n            else myp[i][j]=1e9;\n        }\n    }\n    int op,a,b,c;\n    while(m--)\n    {\n        cin>>op;\n        if(op==0)\n        {\n            cin>>a>>b;\n            if(myp[a][b]>=1e9)cout<<-1<<endl;\n            else cout<<myp[a][b]<<endl;\n        }\n        else\n        {\n            cin>>a>>b>>c;\n            myp[a][b]=min(c,myp[a][b]);\n            myp[b][a]=min(c,myp[b][a]);\n            for(int i=1;i<=n;i++)\n            {\n                for(int j=1;j<=n;j++)\n                {\n                    myp[i][j]=min(myp[i][j],myp[i][a]+myp[a][b]+myp[b][j]);\n                    myp[i][j]=min(myp[i][j],myp[i][b]+myp[b][a]+myp[a][j]);\n                }\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1539941505,
        "uid": 36221,
        "name": "Chen_Py",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011 P2683 \u5c0f\u5c9b"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e5f\u7b97\u662ffloyd\u7b97\u6cd5\u7684\u4e00\u4e2a\u7ecf\u5178\u53d8\u5f62\uff1a\u589e\u8fb9\u591a\u6e90\u6700\u77ed\u8def\u3002\u9664\u4e86\u4f20\u7edf\u7684\u4e24\u70b9\u95f4\u8ddd\u79bb\u5916\uff0c\u8fd8\u4f1a\u52a8\u6001\u5730\u52a0\u8fb9\u3002\u5982\u679c\u6bcf\u52a0\u4e00\u6761\u8fb9\u90fd\u8981\u8dd1\u4e00\u6574\u904dfloyd\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u660e\u663e\u96be\u4ee5\u63a5\u53d7\u3002\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002\u56de\u5fc6floyd\u7b97\u6cd5\u7684\u539f\u7406\uff0c\u6bcf\u6b21\u90fd\u4ee5\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u6765\u66f4\u65b0\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u589e\u8fb9\uff0c\u53ea\u4f1a\u6d89\u53ca\u5230\u4e24\u4e2a\u70b9\uff0c\u53ef\u4ee5\u5148\u5224\u65ad\u662f\u5426\u9700\u8981floyd\u4fee\u6539\uff08\u6bd4\u5982\u6ca1\u52a0\u6b64\u8fb9\u524d\u7684\u4e24\u70b9\u6700\u77ed\u8def\u5df2\u7ecf\u5c0f\u4e8e\u8fb9\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u660e\u663e\u52a0\u4e86\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff0c\u53ef\u5ffd\u7565\uff09\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c31\u53ea\u4ee5\u5b83\u4fe9\u4e3a\u4e2d\u8f6c\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u6837\u5c31\u4f18\u591a\u4e86\u3002floyd\u7b97\u6cd5\u7684\u884d\u751f\u529f\u80fd\u5b9e\u9645\u4e0a\u662f\u5f88\u591a\u7684\uff0c\u5efa\u8bae\u628a\u5b83\u7684\u7cbe\u9ad3\u641e\u61c2\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=0x3f3f3f3f;int n,dis[105][105];\nvoid floyd(int x,int y){\n\tfor(int i=1;i<=n;i++)\n\t    for(int j=1;j<=n;j++)dis[i][j]=min(dis[i][j],dis[i][x]+dis[x][j]);\n\tfor(int i=1;i<=n;i++)\n\t    for(int j=1;j<=n;j++)dis[i][j]=min(dis[i][j],dis[i][y]+dis[y][j]);    \n}\nint main(){\n\tint m;scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t    for(int j=1;j<=n;j++)if(i-j)dis[i][j]=INF;\n\tfor(int i=1;i<=m;i++){\n\t\tint type,a,b;scanf(\"%d%d%d\",&type,&a,&b);\n\t\tif(!type)printf(\"%d\\n\",dis[a][b]==INF?-1:dis[a][b]);\n\t\telse{\n\t\t\tint q_edge;scanf(\"%d\",&q_edge);\n\t\t\tif(dis[a][b]>q_edge){dis[a][b]=dis[b][a]=q_edge;floyd(a,b);}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1589693514,
        "uid": 313892,
        "name": "sukimo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9bDijkstra+Heap\n\n\u88f8\u6700\u77ed\u8def\n\n\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u8dd1\u4e00\u904d\n\n```cpp\n#include<queue>\n#include<cstdio>\n#define reg register\nusing namespace std;\nconst int N=101,M=5001,INF=2147483647;\ninline void read(reg int &x)\n{\n    reg int out=0;reg char ch=getchar();\n    while (ch<48||ch>57)ch=getchar();\n    while (ch>47&&ch<58)\n        out=out*10+ch-48,ch=getchar();\n    x=out;\n}\nint num,n,m,head[N];\nstruct edge{int to,w,next;}e[2*M];  //\u5b9a\u4e49\u90bb\u63a5\u8868\ninline void add(reg int a,reg int b,reg int c)  //\u5efa\u8fb9\n{\n    e[++num].next=head[a];\n    head[a]=num;\n    e[num].to=b;\n    e[num].w=c;\n}\nstruct heap    //\u5806\u4f18\u5316\n{\n    int id,dis;\n    bool operator<(const heap &hh)const\n    {\n        return dis>hh.dis;\n    }\n};\ninline int dijkstra(int a,int b)\n{\n    reg int d[N],f[N];\n    for (reg int i=1;i<=n;i++)d[i]=INF,f[i]=0;d[a]=0;  //\u521d\u59cb\u5316\n    priority_queue<heap>q;q.push((heap){a,0});\n    while (q.size())\n    {\n        reg int p=q.top().id;q.pop();\n        if (f[p])continue;f[p]=1;\n        for (reg int i=head[p];i;i=e[i].next)\n        {\n            reg int v=e[i].to;\n            if (d[p]+e[i].w<d[v])\n                d[v]=d[p]+e[i].w,\n                q.push((heap){v,d[v]});\n        }\n    }\n    return d[b]==INF?-1:d[b];  //\u5982\u679c\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u5c31\u662f-1\n}\nint main()\n{\n    read(n);read(m);\n    while (m--)\n    {\n        reg bool flag;scanf(\"%d\",&flag);\n        reg int a,b;read(a);read(b);\n        if (flag) //\u5efa\u8fb9\u64cd\u4f5c\n        {\n            reg int c;read(c);\n            add(a,b,c),add(b,a,c);\n        }\n        else  //\u8be2\u95ee\u64cd\u4f5c\n            printf(\"%d\\n\",dijkstra(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1505291170,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4e0d\u77e5\u9053\u8fd9\u9898\u76ee\u4e3a\u4f55\u4f1a\u88ab\u653e\u5230\u4e3b\u9898\u5e93\u91cc\u6bd5\u7adf\u6700\u77ed\u8def\u7684\u9898\u5728\u9898\u5e93\u91cc\u5df2\u7ecf\u4e0d\u5c11\u4e86\uff0c\u7b2c\u4e8c\uff0c\u8fd9\u9053\u9898\u7684\u9898\u9762\u975e\u5e38\u88f8\uff0c\u4e00\u773c\u5c31\u770b\u51fa\u6765\u662f\u9053\u6700\u77ed\u8def\uff0c\u4e0d\u50cf\u53bb\u5e74\u7684$ pj $\u6700\u540e\u4e00\u9898[\u52a0\u5de5\u96f6\u4ef6](https://www.luogu.com.cn/problem/P5663)\uff0c\u53cd\u6b63\u6211\u662f\u6ca1\u770b\u51fa\u6765\u662f\u6700\u77ed\u8def\u5f84\u3002\n\n\u597d\uff0c\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u56db\u5927\u91d1\u521a\uff1a\n\n$floyd $ $dijkstra$ $bellman-ford $ \u548c $spfa$\u90fd\u80fd\u8fc7\u3002\n\n\u7531\u4e8e\u7b14\u8005**\u6700\u8fd1**\u4e0d\u600e\u4e48\u6253\u5806\u4f18\u5316\u7684$ dij $\uff0c\u53ea\u6253~~\u5df2\u7ecf\u6b7b\u4e86\u7684~~$ spfa $\uff0c\u4e8e\u662f\u8fd9\u7bc7\u9898\u89e3\u4ee5 $spfa $\u4e3a\u4e3b\u7ebf\u3002\n\n\u5982\u679c\u5927\u5bb6\u4e0d\u4e86\u89e3 $ spfa $\u7684\u5c31\u53ef\u4ee5\u770b\u8fd9\u7bc7\u65e5\u62a5\uff0c\u7279\u522b\u7684\u8be6\u7ec6\uff0c\u4f5c\u8005\u4e5f\u662f\u975e\u5e38\u7cbe\u5fc3\uff1a[\u6700\u77ed\u8def\u5f84](https://www.luogu.com.cn/blog/wym483739/xue-tu-lun-ni-zhen-di-liao-xie-zui-duan-lu-ma-post)\n\n\u8fd8\u662f\u7b80\u5355\u7684\u4ecb\u7ecd\u4e00\u4e0b $ spfa $\u5427\uff1a\n\n$ spfa $\uff0c\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u662f$bellman-ford $ \u7684\u961f\u5217\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $ O(VE)$,$ V $\u4e3a\u70b9\u6570,$ E $\u4e3a\u8fb9\u6570\uff08\u611f\u8c22\u7ba1\u7406\u5458\u63d0\u9192\uff09\uff08\u6709\u65f6\u4f1a\u88ab\u5361\uff0c\u5177\u4f53\u53c2\u7167$ noi 2018$T1\uff09\n\n\u4e3b\u8981\u601d\u60f3\uff1a\n\n\u521d\u59cb\u628a\u8d77\u70b9\u52a0\u5165\u961f\u5217\uff0c\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u6240\u6709\u4e0e\u5b83\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u82e5\u67d0\u4e2a\u70b9\u4fee\u6539\u6210\u529f\uff0c\u5219\u5c06\u5176\u5165\u961f\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u65f6\u7b97\u6cd5\u7ed3\u675f\u3002\n\n\u5177\u4f53\u8fd8\u662f\u770b\u4e0a\u9762\u90a3\u7bc7\u535a\u5ba2\u5427\uff0c\u81f3\u4e8e\u8d1f\u73af\u4ec0\u4e48\u7684\u5e94\u8be5\u90fd\u6709\u3002\n\n\u8fd9\u9053\u9898\u5c31\u662f\u5bf9\u6bcf\u4e00\u4e2a\u8be2\u95ee\u8dd1\u4e00\u6b21 $ spfa $,\u80af\u5b9a\u4e0d\u4f1a\u88ab\u5361\uff08~~floyd\u90fd\u8fc7\u4e86~~\uff09 \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 2010;\nconst int M=6010;\nconst int INF = 0x3f3f3f3f;\nstruct ed{\n\tint next,to,dis;\n}\nedge[M];\nint dist[M];\nbool visit[M];\nint in[M];\nint n, m;\nint cnt;\nint head[M];\nvoid addedge(int u,int v,int w)\n{\n\tedge[++cnt].next=head[u];\n\tedge[cnt].to=v;\n\tedge[cnt].dis=w;\n\thead[u]=cnt;\n}\nvoid spfa(int start)\n{\n\tqueue<int> Q;\n\tint i, now;\n\tmemset(visit, false, sizeof(visit));\n\tfor (i = 1; i <= n; i++)\n\t\tdist[i] = INF;\n\tdist[start] = 0;\n\tQ.push(start);\n\tvisit[start]= true;\n\twhile (!Q.empty())\n\t{\n\t\tnow = Q.front();\n\t\tQ.pop();\n\t\tvisit[now] = false;\n\n\t\tfor (i = head[now]; i; i=edge[i].next)\n\t\t{\n\t\t\tif (dist[edge[i].to] > dist[now] + edge[i].dis)\n\t\t\t{\n\t\t\t\tdist[edge[i].to] = dist[now] + edge[i].dis;\n\t\t\t\tif (visit[edge[i].to] == 0)\n\t\t\t\t{\n\t\t\t\t\tQ.push(edge[i].to);\n\t                visit[edge[i].to] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\t\t\tfor(int i=1;i<=m;i++)\n\t\t\t{\n\t\t\t\tint a,b,c,v;\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tif(a==0){\n\t\t\tspfa(b);\n\t\t\tif(dist[c]!=INF)printf(\"%d\\n\",dist[c]);\n\t\t\telse printf(\"-1\\n\");\n\t\t}\n\t\t\telse if(a==1)\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&v);\n\t\t\taddedge(b,c,v);\n\t\t\taddedge(c,b,v);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1584547955,
        "uid": 46354,
        "name": "\u8ff7\u6b8b\u4e91",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u8fd8\u6ca1\u6709\u88f8\u7684$dijkstra$?\u6211\u6765\u5199\u4e00\u7bc7\u5427\u3002\n\n\u5176\u5b9e\u7531\u4e8e\u6570\u636e\u592a\u6c34\uff0c\u8fde\u88f8$dijkstra$\u7684$O(n^2m)$\uff0c\u6211\u4e5f\u662f\u9189\u4e86\u3002\u3002\n\n\u7a0d\u5fae\u8bb2\u4e00\u4e0b\u601d\u8def\u5427\uff08~~\u6709\u5565\u597d\u8bb2\u7684~~)\n\n\u5bf9\u4e8e$0$\u7684\u64cd\u4f5c\uff0c\u76f4\u63a5\u8dd1$dijkstra$\uff0c\u5982\u679c$d[t]=INF$\u7684\u8bdd\uff0c\u8981\u8f93\u51fa$-1$\u3002\n\n\u5bf9\u4e8e$1$\u7684\u64cd\u4f5c\uff0c\u76f4\u63a5\u5efa\u8fb9\uff0c\u4f46\u6709\u91cd\u8fb9\u7684\u53ef\u80fd\uff0c\u8bb0\u5f97\u5224\u65ad\u54ea\u4e2a\u66f4\u5c0f\u3002\n\n$AC$ $Code$\n\n```cpp\n#include <iostream>\n#define INF 1e8\nusing namespace std;\n\nint n,m;\n\nlong long d[1010],G[1010][1010];\n\nbool used[1010];\n\nvoid init(){\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tG[i][j]=INF;\n}//\u521d\u59cb\u5316\u8981\u8bb0\u5f97\n\nvoid dijkstra(int s){\n\tfill(d,d+1+n,INF);//\u8bb0\u5f97\u521d\u59cb\u5316\n\tfill(used,used+1+n,false);//\u8bb0\u5f97\u521d\u59cb\u5316\n\td[s]=0;\n\twhile(true){\n\t\tint v=-1;\n\t\tfor(int u=1;u<=n;u++)\n\t\t\tif(!used[u]&&(v==-1||d[u]<d[v]))\n\t\t\t\tv=u;\n\t\tif(v==-1)\n\t\t\tbreak;\n\t\tused[v]=true;\n\t\tfor(int u=1;u<=n;u++)\n\t\t\tif(d[v]+G[v][u]<d[u]&&G[v][u]!=INF)\n\t\t\t\td[u]=d[v]+G[v][u];\n\t}\n}//dijkstra\n\nint main(){\n\tcin>>n>>m;\n\tinit();//\u522b\u5fd8\u8c03\u7528\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,c;\n\t\tint k;\n\t\tcin>>k;\n\t\tif(k==0){\n\t\t\tcin>>u>>v;\n\t\t\tdijkstra(u);\n\t\t\tif(d[v]==INF)\n\t\t\t\tcout<<-1<<endl;//\u8bb0\u5f97\u7279\u5224\n\t\t\telse\n\t\t\t\tcout<<d[v]<<endl;\n\t\t}//\u5bf9\u4e8e0\u7684\u64cd\u4f5c\n\t\telse{\n\t\t\tcin>>u>>v>>c;\n\t\t\tif(c<G[u][v]){\n\t\t\t\tG[u][v]=G[v][u]=c;\n\t\t\t}//\u8bb0\u5f97\u5224\u65ad\u91cd\u8fb9\n\t\t}//\u5bf9\u4e8e1\u7684\u64cd\u4f5c\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1551109999,
        "uid": 88213,
        "name": "zhangyuhan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u4eab\u53d7\u6700\u4f73\u9605\u8bfb\u4f53\u9a8c\u8bf7\u8fdb\u5165[\u4f20\u9001\u95e8](https://lu-anlai.github.io/2019/02/07/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%E3%80%90%E6%B4%9B%E8%B0%B7-P2683%E3%80%91-%E5%B0%8F%E5%B2%9B/)\u3002\n\n## \u539f\u9898\n\n\u9898\u9762\u8bf7\u67e5\u770b[\u6d1b\u8c37 P2683 \u5c0f\u5c9b](https://www.luogu.org/problemnew/show/P2683)\u3002\n\n## \u9898\u89e3\n\n$\\text{Dijkstra}$\n\n### \u601d\u8def\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u90fd\u8fdb\u884c\u4e00\u904d$\\text{Dijkstra}$\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\n#### \u7b97\u6cd5\u7684\u4f18\u5316\n\n1. `fread();`\u8bfb\u5165\u4f18\u5316\uff0c\u5927\u7ea6\u53ef\u8282\u7701$100\\text{ms}$\u7684\u65f6\u95f4\uff1b\n2. \u5b58\u56fe\u5e94\u4f7f\u7528**\u94fe\u5f0f\u524d\u5411\u661f**\uff1b\n3. \u4f7f\u7528\u5806\uff08\u6216\u8005`std::priority_queue`\uff09\u4f18\u5316\uff1b\n\n\u7ecf\u8fc7\u4f18\u5316\u540e\uff0c\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\text{O}(mnlog_{2}n+m^{2})$\u3002\n\n### \u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing std::less;\nusing std::priority_queue;\nusing std::vector;     //\u5934\u6587\u4ef6\u548c\u5f15\u7528\n#define INF 0X3F3F3F3F //\u5b9a\u4e49\u6b63\u65e0\u7a77\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++)\nstatic char buf[100000], *p1 = buf, *p2 = buf; //fread();\u8bfb\u5165\u4f18\u5316\n\ninline int read(void)\n{\n    register char ch = getchar();\n    register int sum = 0;\n    while (!(ch >= '0' && ch <= '9'))\n        ch = getchar();\n    while (ch >= '0' && ch <= '9')\n        sum = sum * 10 + ch - 48, ch = getchar();\n    return sum;\n}\n\nstruct Node\n{\n    int ID, dis;\n    bool operator<(const Node &a) const\n    {\n        return dis > a.dis;\n    }\n};\n\nbool vis[101];\nint cnt, head[101], to[10001], w[10001], Next[10001];\nint dis[101];\npriority_queue<Node, vector<Node>, less<Node>> Q; //\u4f18\u5148\u961f\u5217\n\nvoid Add_Edge(int, int, int);\nvoid Dijkstra(int);\n\nint main(void)\n{\n    register int m, op, s, t, u, v, e; //register\u53d8\u91cf\u66f4\u5feb\u4e9b\n    read();                            //n\u5728\u672c\u9898\u4e2d\u6ca1\u6709\u7528\uff0c\u4e5f\u65e0\u8d85\u8fc7n\u7684\u6bd2\u7624\u6570\u636e\uff0c\u65e0\u9700\u8bfb\u5165\n    m = read();                        //\u8bfb\u5165m\n    while (m--)\n    {\n        op = read();\n        if (op == 0)\n        {\n            s = read(), t = read();\n            Dijkstra(s);\n            printf(\"%d\\n\", (dis[t] == INF) ? (-1) : (dis[t]));\n        }\n        if (op == 1)\n        {\n            u = read(), v = read(), e = read();\n            Add_Edge(u, v, e);\n            Add_Edge(v, u, e); //\u53cc\u5411\u8fb9\n        }\n    }\n    return 0;\n}\n\nvoid Add_Edge(int f, int t, int val) //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n{\n    Next[++cnt] = head[f];\n    to[cnt] = t;\n    w[cnt] = val;\n    head[f] = cnt;\n    return;\n}\n\nvoid Dijkstra(int s)\n{\n    register int i, ID, To;\n    Node temp;\n    memset(vis, false, sizeof(vis));\n    memset(dis, 0X3F, sizeof(dis));\n    dis[s] = 0; //\u6bcf\u6b21\u8fd0\u884c\u524d\u8981\u8bb0\u5f97\u521d\u59cb\u5316\n    temp.ID = s, temp.dis = 0;\n    Q.push(temp);\n    while (!Q.empty())\n    {\n        temp = Q.top();\n        Q.pop();\n        ID = temp.ID;\n        if (vis[ID])\n            continue;\n        vis[ID] = true;\n        for (i = head[ID]; i; i = Next[i])\n        {\n            To = to[i];\n            if (dis[To] > dis[ID] + w[i])\n            {\n                dis[To] = dis[ID] + w[i]; //\u677e\u5f1b\u64cd\u4f5c\n                temp.ID = To, temp.dis = dis[To];\n                Q.push(temp);\n            }\n        }\n    }\n    return; //\u8fd4\u56de\n}\n```\n\n### \u6211\u7684\u8bc4\u6d4b\u8bb0\u5f55\n\n- [\u6d1b\u8c37 R16112574](https://www.luogu.org/recordnew/show/16112574)\u3002\n",
        "postTime": 1549598495,
        "uid": 38502,
        "name": "agicy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u7528spfa\u66b4\u529b\u6c42\u6700\u77ed\u8def\uff0c\u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8fb9\n\n```cpp\n#include<iostream>//long long\u4e0d\u80fd\u505a\u6570\u7ec4\u4e0b\u6807 \n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m;\nint u,v,d;\nint s,e;//\u8d77\u70b9 \u7ec8\u70b9 \nint pd;\nint exist[1000];//\u8bb0\u5f55\u662f\u5426\u5165\u961f \nint team[10000001];//\u961f\u5217 \nint dis[1001];//\u6700\u77ed\u8def \nint g[101][101];//\u90bb\u63a5\u77e9\u9635\u5b58\u56fe \nint head,tail;\nint spfa()\n{\n    memset(dis,0x7f,sizeof(dis));\n    dis[s]=0;\n    memset(exist,false,sizeof(exist));\n    team[1]=s;\n    head=0;\n    tail=1;\n    exist[s]=true;//\u4ee5\u4e0a\u4e3aspfa\u521d\u59cb\u5316 \n    do\n    {\n        ++head;\n        u=team[head];\n        exist[u]=false;//\u53d6\u51fa\u4e00\u4e2a\u70b9 \n        for(v=1;v<=n;++v)\n        {\n            if(dis[v]>dis[u]+g[u][v])\n            {\n                dis[v]=dis[u]+g[u][v];//\u677e\u5f1b\u64cd\u4f5c\uff0c\u66f4\u65b0 \n                if(!exist[v])\n                {\n                    ++tail;\n                    team[tail]=v;\n                    exist[v]=true;//\u5982\u679c\u88ab\u66f4\u65b0\u7684\u70b9\u6ca1\u5728\u961f\u5217\u91cc\u5c31\u5165\u961f \n                } \n            }\n        }\n    }while(head<tail);\n}\nint main()\n{\n    cin>>n>>m;\n    memset(g,0x7f,sizeof(g));//\u90bb\u63a5\u77e9\u9635\u521d\u59cb\u5316 \n    for(int i=1;i<=m;++i)\n    {\n        cin>>pd;\n        if(pd==1)\n        {\n            cin>>u>>v>>d;\n            if(d<g[u][v])\n            {\n                g[u][v]=g[v][u]=d;//\u66f4\u65b0\u8fb9\u7684\u4fe1\u606f \n            }\n        }\n        else\n        {\n            cin>>s>>e;\n            spfa();//\u6c42s\u5230e\u7684\u6700\u77ed\u8def \n            if(dis[e]>10000000) cout<<-1<<endl;//\u5982\u679cs\u5230e\u7684\u8ddd\u79bb\u592a\u5927\u5219\u4e0d\u5b58\u5728\u8def \n            else cout<<dis[e]<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1478394063,
        "uid": 20635,
        "name": "\u5411\u91d1\u724c\u51b2\u523a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u52a8\u6001\u7684\u53bb\u66f4\u65b0\u5f53\u524d\u7684\u5f97\u8ddd\u79bb\u5373\u53ef\uff0c\u56e0\u4e3a\u6bcf\u6b21\u52a0\u8fb9\u540e\u53ea\u4f1a\u5bf9\u8ddf\u8fd9\u6761\u8fb9\u6709\u5173\u7cfb\u5f97\u8def\u5f84\u53d1\u751f\u6539\u53d8\uff0c\u800c\u4e0d\u662f\u53bb\u6bcf\u4e00\u6b21\u8dd1\u4e00\u8fb9dij\u8fd9\u6837\u53ef\u4ee5\u8fc7\u662f\u56e0\u4e3a\u6570\u636e\u592a\u6c34\uff0c\u800c\u4e14\u5185\u5b58\u5360\u7528\u8981\u591a\u4e8e\u6b63\u89e3  \n\u90a3\u4e48\u6211\u4eec\u600e\u6837\u53bb\u66f4\u65b0floyd\u5462\uff0c\u539f\u672c\u7684Floyd\u662f\u4e09\u91cd\u5faa\u73af\u5206\u522b\u679a\u4e3e\u4e2d\u95f4\u8282\u70b9\uff0c\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u90a3\u4e48\u5df2\u77e5\u53ea\u6539\u53d8\u67d0\u4e00\u6761\u8def\u5f97\u957f\u5ea6\uff0c\u5219\u53bb\u6389\u7b2c\u4e00\u91cd\u5faa\u73af\u4e5f\u5c31\u662f\u5c06k\u786e\u5b9a\u4e0b\u6765\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4ee5\u8fd9\u6761\u8fb9\u4e3a\u4e2d\u95f4\u8fb9\u5f97\u60c5\u51b5\u5373\u53ef.\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<vector>\nusing namespace std;\nconst int N=105;\nconst int M=5005;\nstruct node\n{\n    int s;\n    int to;\n    int e;\n};\nnode G[N][N];//\u58f0\u660e\nint n,m;\nint main()\n{   \n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=n;j++)\n    {\n        G[i][j].e=0xf3f3f3f;//\u521d\u59cb\u5316\n        if(i==j)\n        G[i][j].e=0;\n    }\n    for(int i=1;i<=m;i++)\n    {    int u,v;\n        int p;\n        scanf(\"%d%d%d\",&p,&u,&v);\n        if(p==1)\n        {\n           \n            int w;\n            scanf(\"%d\",&w);\n            if(G[u][v].e>w)//\u5982\u679c\u6bd4\u539f\u6765\u5f97\u5c0f\u624d\u503c\u5f97\u53bb\u6539\u53d8\n            {   \n        \n            G[u][v].e=w;\n            G[v][u].e=w;\n        for(int k=1;k<=n;k++)\n        for(int l=1;l<=n;l++)\n        {\n            if(G[k][l].e>=G[k][u].e+G[u][v].e+G[v][l].e)\n            {\n                G[k][l].e=G[l][k].e=G[k][u].e+G[u][v].e+G[v][l].e;//\u66f4\u65b0\n            }\n        }\n    }\n            \n        }\n        if(p==0)\n        {   \n            \n            printf(\"%d\\n\",G[u][v].e>=0xf3f3f3f?-1:G[u][v].e);//\u8f93\u51fa\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1586668190,
        "uid": 235796,
        "name": "TechZ",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "## Description\n[\u9898\u76ee](https://www.luogu.com.cn/problem/P2683)\n\n## Solution\n\u4e00\u773c\u9898\u554a\uff0c\u5f88\u88f8\u7684\u6700\u77ed\u8def\u677f\u5b50\u9898\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5c0\uff0c\u4ece$s$\u70b9\u8dd1\u4e00\u904d\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5982\u679c$t$\u7684$dis$\u4e0d\u4e3a$inf$\uff08$inf$\u4e3a$dis$\u521d\u59cb\u503c\uff09\u5c31\u8f93\u51fa\n- \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u6ce8\u610f\u9898\u76ee\u8bf4\u7684\u662f\u53cc\u5411\u822a\u7ebf\uff0c\u5373**\u65e0\u5411\u8fb9**\uff0c\u5b58\u4e24\u6b21\u5373\u53ef\u3002\n\n\u6700\u77ed\u8def\u7167\u9053\u7406\u662f\u5199$dij$\u6bd4\u8f83\u7a33\u5b9a\uff0c~~\u56e0\u4e3aSPFA\u5df2\u7ecf\u6b7b\u4e86~~\uff0c\u4f46\u662f\u672c\u84bb\u5199\u4e86$SPFA$\u5c45\u7136\u4e5f\u80fd\u8fc7\u3002\n\n\u636e\u8bf4\u8fd8\u6709\u5de8\u4f6c\u7528$Floyed$\u8fc7\u53bb\uff0c~~\u53ef\u80fd\u6570\u636e\u6c34~~\uff0c\u672c\u84bb\u5148\u819c\u62dc\u4e3a\u656cOrz\n\n## Code\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#define maxm 5005\n#define inf 233333333\nusing namespace std;\n\nstruct node\n{\n\tint next, to, dis;\n}edge[maxm];\n\nint n, m, cnt;\nint dis[maxm], head[maxm];\nbool vis[maxm];\n\nvoid addedge(int u, int v, int w)\n{\n\tedge[++cnt].next = head[u];\n\tedge[cnt].to = v;\n\tedge[cnt].dis = w;\n\thead[u] = cnt;\n}//\u6807\u51c6\u524d\u5411\u661f\u5b58\u8fb9\n\nvoid spfa(int s)\n{\n\tqueue<int> q;\n    memset(vis, false, sizeof(vis));\n    for(int i=1;i<=n;i++)\n    \tdis[i] = inf;\n    \n    dis[s] = 0;\n    vis[s] = true;\n    q.push(s);\n    \n    while (!q.empty())\n    {\n        int u = q.front();\n        vis[u] = false;\n        q.pop();\n\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            if(dis[edge[i].to]>dis[u]+edge[i].dis)\n            {\n                dis[edge[i].to]=dis[u]+edge[i].dis;\n                if(!vis[edge[i].to])\n                {\n                    q.push(edge[i].to);\n                    vis[edge[i].to] = true;\n                }\n            }\n        }\n    }\n}//\u6807\u51c6SPFA\n\nvoid work()\n{\n\tscanf(\"%d%d\", &n, &m);\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint f;\n\t\tscanf(\"%d\", &f);\n\t\t\n\t\tif(f == 0)\n\t\t{\n\t\t\tint s, t;\n\t\t\tscanf(\"%d%d\", &s, &t);\n\t\t\tspfa(s);//\u8dd1\u6700\u77ed\u8def\n\t\t\t\n\t\t\tif(dis[t] != inf)\n\t\t\t\tprintf(\"%d\\n\", dis[t]);\n\t\t\telse\n\t\t\t\tprintf(\"-1\\n\");\n\t\t}\n\t\telse \n\t\t{\n\t\t\tint u, v, w;\n\t\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\t\taddedge(u, v, w);\n\t\t\taddedge(v, u, w);//\u53cc\u5411\u5b58\u8fb9\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\twork();\n\treturn 0;\n}\n```\n",
        "postTime": 1586232499,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u6a21\u677f\u9898\uff0c\u5982\u679c\u5bf9\u6700\u77ed\u8def\u4e0d\u662f\u5f88\u719f\u6089\u7684\u540c\u5b66\u8bf7\u79fb\u6b65\uff1a\n[\u4f20\u9001\u95e8](https://www.luogu.org/blog/156001/zui-duan-lu)\n\n## \u8fdb\u5165\u6b63\u9898\n\n\u6b64\u9898\u4e0e\u5176\u4ed6\u9898\u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u65b0\u589e\u6761\u8fb9\uff0c\u5c31\u5fc5\u987b\u5b58\u50a8\uff0c\u7136\u540e\u7b491\u64cd\u4f5c\u5230\u8fbe\u65f6\u8dd1\u6700\u77ed\u8def\uff0c\u4e8e\u662f\u6211\u4eec\u6709dijkstra\u548cSPFA\u4e24\u79cd\u8dd1\u6700\u77ed\u8def\u7684\u65b9\u6cd5\uff1a\n\n\u5176\u6b21\uff0c\u5982\u4f55\u5904\u7406\u65e0\u6cd5\u5230\u8fbe\u5462\u3002\u53ea\u9700\u8981if(dis[]==inf)\u5c31\u884c\u4e86\u3002\n\n\u56e0\u4e3a\u6211\u4eecdis\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u4e3ainf\uff0c\u5982\u679c\u5728\u63a5\u4e0b\u6765\u7684\u8dd1\u6700\u77ed\u8def\u4e2d\u6ca1\u6709\u88ab\u66f4\u65b0\uff08\u4e5f\u5c31\u662fdis==inf\uff09\uff0c\u8bf4\u660e\u7531\u5f53\u524d\u8d77\u70b9\u662f\u5230\u4e0d\u4e86\u8fd9\u4e2a\u70b9\u7684\u3002\n\n### dinjkstra:\n\ndijkstra\u7684\u6838\u5fc3\u5c31\u5728\u4e8e\u5b83\u7684\u7b97\u6cd5\u6b65\u9aa4\uff1a\n```\n\u7b97\u6cd5\u6b65\u9aa4:\n1. \u627e\u79bb\u8d77\u70b9x\u6700\u8fd1\u7684\u672a\u8ba8\u8bba\u8fc7\u7684\u70b9k\u3002\n2. \u5224\u65ad\u7ecf\u8fc7k\u70b9\uff0c\u8d77\u70b9x\u5230\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u7f29\u77ed\uff0c\u5982\u7f29\u77ed\n\u5219\u66f4\u65b0\u3002\u5c06k\u70b9\u6807\u8bb0\u4e3a\u5df2\u8ba8\u8bba\u3002\n3. \u91cd\u590d\u8fdb\u884c\u7b2c1\u6b65\uff0c\u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u8ba8\u8bba\u8fc7\u4e3a\u6b62\u3002\n\n```\n\u6240\u4ee5dijkstra\u7684\u5b9e\u8d28\u662f\u8d2a\u5fc3\uff0c\u4f46\u662f\u5728\u4e0a\u8ff0\u6b65\u9aa41\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5927\u7684stl\u4e2d\u7684\u4f18\u5148\u961f\u5217\u6765\u5feb\u901f\u67e5\u627e\u3002\n\n\u6240\u4ee5dijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlog_n)$\n\n$code$:\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=10005;\nconst ll inf=1e15;\nstruct node{    \u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u5c06dis\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tint num;\n\tll dis;\n\tbool operator < (const node &a) const{\n\t\treturn dis>a.dis;\n\t}\n};\nint n,m;\nll dis[N];\nbool mark[N];\nint Last[N],End[N],len[N],Next[N],tot;\nvoid cb(int x,int y,int z){\n\tEnd[++tot]=y;\n\tlen[tot]=z;\n\tNext[tot]=Last[x];\n\tLast[x]=tot;\n}\nvoid dijkstra(int s){\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i]=inf;\n\t\tmark[i]=false;\n\t}\n\tdis[s]=0;\n\t//mark[s]=true;\n\tpriority_queue<node> q;\t   \u4ee5dis\u4f5c\u4e3a\u5173\u952e\u5b57\u7684\u5c0f\u6839\u5806\n\tq.push((node){s,0});\n\twhile(q.size()){\n\t\tint u=q.top().num;     \u53d6\u51fa\u8ddd\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u70b9\n\t\tq.pop();\n\t\tif(mark[u])\n\t\t\tcontinue;\n\t\tmark[u]=true;\n\t\tfor(int i=Last[u];i;i=Next[i]){   \u94fe\u5f0f\u524d\u5411\u661f\n\t\t\tint v=End[i];\n\t\t\tif(!mark[v] && dis[v]>dis[u]+len[i]){  \u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\n\t\t\t\tdis[v]=dis[u]+len[i];\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt,x,y,z;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt){   opt==1 \u8bb0\u5f55\u8fb9\n\t\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\t\tcb(x,y,z);\n\t\t\tcb(y,x,z);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tdijkstra(x);     \u8dd1\u6700\u77ed\u8def\n\t\t\tif(dis[y]!=inf)   \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\n\t\t\t\tprintf(\"%lld\\n\",dis[y]);\n\t\t\telse\n\t\t\t\tputs(\"-1\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### SPFA(bellman-ford)\n\n\n\u7b97\u6cd5\u6d41\u7a0b:\n\n\u7528\u4e00\u4e2a\u961f\u5217\u6765\u8fdb\u884c\u7ef4\u62a4\u3002\u521d\u59cb\u65f6\u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217\u3002\n\n\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u4ed6\u6240\u8fde\u63a5\u7684\u70b9\u8fdb\u884c\u677e\u5f1b\uff0c\u82e5\u67d0\u4e2a\u70b9\u677e\u5f1b\u6210\u529f\uff08\u5219\u901a\u8fc7\u90a3\u4e2a\u70b9\u5230\u8d77\u70b9\u8ddd\u79bb\u7f29\u77ed\uff09\uff0c\u5219\u5c06\u5176\u5165\u961f\u3002\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\n\n\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u961f\u5217\u4f18\u5316\u7684bellman-ford\uff0c\u5229\u7528\u4e86\u6bcf\u4e2a\u70b9\u4e0d\u4f1a\u66f4\u65b0\u6b21\u6570\u592a\u591a\u7684\u7279\u70b9\n\nSPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(kE)\uff0ck\u4e00\u822c\u53d62\u5de6\u53f3\uff08k\u662f\u589e\u957f\u5f88\u5feb\u7684 \u51fd\u6570ackermann\u7684\u53cd\u51fd\u6570,2^65536\u6b21\u65b9\u4e5f\u5c315\u4ee5\u4e0b \uff09\uff0c\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u3002\n\n$code$:(\u5176\u5b9e\u8ddfdijkstra\u5dee\u4e0d\u591a\uff09\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=10005;\nconst ll inf=1e15;\nint n,m;\nll dis[N];\nbool mark[N];\nint Last[N],End[N],len[N],Next[N],tot;\nvoid cb(int x,int y,int z){\n\tEnd[++tot]=y;\n\tlen[tot]=z;\n\tNext[tot]=Last[x];\n\tLast[x]=tot;\n}\nvoid spfa(int s){\n\tfor(int i=1;i<=n;i++){\n\t\tdis[i]=inf;\n\t\tmark[i]=false;\n\t}\n\tdis[s]=0;\n\tmark[s]=true;\n\tqueue<int> q;\n\tq.push(s);\n\twhile(q.size()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tmark[u]=false;\n\t\tfor(int i=Last[u];i;i=Next[i]){\n\t\t\tint v=End[i];\n\t\t\tif(dis[v]>dis[u]+len[i]){\n\t\t\t\tdis[v]=dis[u]+len[i];\n\t\t\t\tif(!mark[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tmark[v]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt,x,y,z;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt){\n\t\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\t\tcb(x,y,z);\n\t\t\tcb(y,x,z);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tspfa(x);\n\t\t\tif(dis[y]!=inf)\n\t\t\t\tprintf(\"%lld\\n\",dis[y]);\n\t\t\telse\n\t\t\t\tputs(\"-1\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### SPFA\u5224\u65ad\u8d1f\u73af\u53ef\u4ee5\u770b\u6587\u7ae0\u4e0a\u65b9\u4f20\u9001\u95e8\n\n#### \u5176\u5b9e\u8fd9\u9053\u9898\u8fd8\u80fd\u7528floyd\n\n\u662f\u4e0d\u662f\u5f88\u60ca\u8bb6\uff0cfloyd\u7684\u65f6\u95f4\u590d\u6742\u5ea6$O(N^3M)$\u600e\u4e48\u53ef\u80fd\u8fc7\u7684\u4e86\uff01\uff01\uff1f\n\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8fb9\u8bb0\u5f55\u8fb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u6837\u8fd9\u9053\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(N^2M)$\u4e86\uff01\uff01\uff01\n\n\u9898\u89e3\u533a\u91cc\u6709\u5927\u4f6c\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u6211\u5c31\u4e0d\u7ec6\u8bb2\u4e86\u3002\u3002\u3002\n\n\n### \u603b\u7ed3\uff1a\n\u8fd9\u9053\u9898\u5176\u5b9e\u8fd8\u662f\u4e00\u9053\u5f88\u4e0d\u9519\u7684\u9898\uff0c\u53ef\u4ee5\u4e3a\u5de9\u56fa\u6700\u77ed\u8def\u6765\u7528\uff01",
        "postTime": 1572668738,
        "uid": 156001,
        "name": "TheAutumnGlory",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "n<=100 Floyed\u5373\u53ef\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\n#define LL long long\n#define dou 0\n#define mod 10000\ninline void read(LL &x){\n    LL f=1;x=0;char s=getchar();\n    while(s>'9'||s<'0'){if(s=='-')f=-1;s=getchar();}\n    while(s<='9'&&s>='0'){x=x*10+s-'0';s=getchar();}\n    x=x*f;\n}\ninline void write(LL x){\n     if(x<0) putchar('-'),x=-x;\n     if(x>9) write(x/10);\n     putchar(x%10+'0');\n}\nLL n,m;\nbool flag;\nLL dis[1020][1020];\nint main(){\n    // #ifndef hammer\n    // freopen(\"a.in\",\"r\",stdin);\n    // freopen(\"a.out\",\"w\",stdout);\n    // #endif\n    //ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);//cin cout\u4f18\u5316\n    scanf(\"%lld%lld\",&n,&m);\n    for(LL i=1;i<=n;i++)\n        for(LL j=1;j<=n;j++)\n            dis[i][j]=2147483647;\n    for(LL i=1;i<=m;i++){\n        LL x,y,z,opr;\n        scanf(\"%lld\",&opr);\n        if(opr==0){\n            scanf(\"%lld%lld\",&x,&y);\n            if(flag==1){\n            //\u5224\u65ad\u4e4b\u524d\u662f\u5426\u5efa\u8fc7\u8fb9\uff0c\u5728\u67e5\u8be2\u65f6\u5224\u65ad\u6bd4\u5728\u52a0\u8fb9\u540e\u66f4\u65b0\u51cf\u5c11\u5f88\u591a\u590d\u6742\u5ea6\n                if(dis[x][y]!=2147483647)\n                    printf(\"%lld\\n\",dis[x][y]);\n                else printf(\"-1\\n\");\n            }\n            else{\n                for(LL k=1;k<=n;k++)\n                    for(LL i=1;i<=n;i++)\n                        for(LL j=1;j<=n;j++)\n                            if(dis[i][j]>dis[i][k]+dis[k][j])\n                                dis[i][j]=dis[i][k]+dis[k][j];\n                if(dis[x][y]!=2147483647)\n                    printf(\"%lld\\n\",dis[x][y]);\n                else printf(\"-1\\n\");\n                flag=1;\n                //\u6807\u8bb0\u4e3a\u5df2\u7ecf\u66f4\u65b0\u8fc7\uff0c\u5982\u679c\u4e4b\u540e\u4e0d\u518d\u52a0\u8fb9\u800c\u53ea\u662f\u67e5\u8be2\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\n            }\n        }\n        else if(opr==1){\n            flag=0;\n            scanf(\"%lld%lld%lld\",&x,&y,&z);\n            dis[y][x]=min(dis[y][x],z);//\u4f1a\u6709\u91cd\u8fb9\uff0c\u4e0d\u52a0\u8fd9\u4e2a\u53ea\u670925\u5206\n            dis[x][y]=min(dis[x][y],z);\n        }\n    }\n    fclose(stdin);\n    fclose(stdout);\n    return dou;\n}\n```\n \n~~\u6211\u77e5\u9053O(n*n*n)\u4e0d\u5982O(nlogn)   \n\u849f\u84bb\u7684\u9898\u89e3 \u8f7b\u70b9\u55b7~~",
        "postTime": 1536277727,
        "uid": 87929,
        "name": "Swing_YL",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u88f8\u7684\u6700\u77ed\u8def\uff0c\u6700\u77ed\u8def\u53ea\u4f1aspfa\u8f93\u5165\u6839\u636e\u9898\u76ee\u8981\u6c42\u6a21\u62df\u4e00\u8fb9\uff0c\u6700\u540e\u67e5\u8be2\u7684\u65f6\u5019\u5728\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nqueue<int>q;\nstruct edge\n{\n\tint next,to,dist;\n} e[500007];\nint head[500007],tot;\ninline void add(int x,int y,int z)\n{\n\te[++tot].next=head[x];\n\te[tot].to=y;\n\te[tot].dist=z;\n\thead[x]=tot;\n}\nint n,m;\nint f,g,w;\nint vis[500007],dis[500010];\nvoid spfa(int s)\n{\n\twhile(!q.empty())q.pop();\n\tfor(int i=1; i<=n; i++)dis[i]=2147483647;\n\tdis[s]=0;\n\tq.push(s);\n\tvis[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u],v; v=e[i].to,i; i=e[i].next)\n\t\t\tif(e[i].dist+dis[u]<dis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].dist;\n\t\t\t\tif(!vis[v])\n\t\t\t\t\tvis[v]=1,q.push(v);\n\t\t\t}\n\t}\n}//\u4ece\u8fd9\u5f80\u4e0a\u662f\u88f8\u7684spfa\u677f\u5b50\uff0c\u6bcf\u6b21\u6253spfa\u90fd\u8981\u6253\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5c31\u4e0d\u591a\u8bb2\u4e86 \nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tint o;//\u8fd9\u4e2ao\u662f\u7528\u6765\u5224\u65ad\u8f93\u5165\u6216\u8005\u67e5\u8be2\u7684 \n\t\tcin>>o;\n\t\tif(o)\n\t\t{\n\t\t\tcin>>f>>g>>w;\n\t\t\tadd(f,g,w);\n\t\t\tadd(g,f,w);\n\t\t}//\u56e0\u4e3a\u8bf4\u8fd9\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u53cc\u8fb9 \n\t\tif(!o)\n\t\t{\n\t\t\tcin>>f>>g;\n\t\t\tspfa(f);\n\t\t\tif(dis[g]==2147483647)\n\t\t\t\tcout<<-1<<endl;\n\t\t\telse cout<<dis[g]<<endl;//\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u4e2a\u503c \n\t\t}\n\t}\n}\n```\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7\uff0c\u5c0f\u59b9\u8c22\u8c22\u54af",
        "postTime": 1524277794,
        "uid": 78228,
        "name": "\u6211\u6ca1\u6709\u5c0f\u767d",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u6570\u636e\u5176\u5b9e\u5e76\u4e0d\u5f3a\uff0c\u5927\u6982\u662f\u60f3\u8ba9\u5927\u5bb6\u8bd5\u8bd5Floyd\u5427\u3002\u4e0d\u8fc7\u867d\u7136\u662f\u591a\u6e90\u591a\u6c47\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3aSSSP\u95ee\u9898\uff0c\u7531\u4e8e\u6ca1\u6709\u8d1f\u6743\u8fb9\uff0c\u4f7f\u7528Dijkstra\u89e3\u51b3\u8f83\u4e3a\u7b80\u5355\u3002  \n\u5982\u679c\u6ca1\u6709\u5b66\u8fc7Dijkstra,\u53ef\u4ee5\u770b\u770b\u672c\u4eba\u7684\u8fd9\u7bc7\u535a\u5ba2  [\u4f20\u9001\u95e8](https://www.luogu.com.cn/blog/Steven371/xue-xi-bi-ji-dijkstra)\u3002  \n#### \u9898\u610f\u7b80\u8ff0\n\u9898\u76ee\u5df2\u7ecf\u8bf4\u5f97\u5f88\u660e\u767d\u4e86\uff0c\u6c42\u6700\u77ed\u8def\u3002  \n#### \u9898\u76ee\u5206\u6790\n\u6309\u7167\u6b63\u5e38\u65b9\u6cd5\u5b58\u50a8\u8fb9\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u4ee5$s$\u4e3a\u8d77\u70b9\u505a\u4e00\u6b21Dijkstra\u5373\u53ef\u3002\n#### \u4ee3\u7801\n\u5148\u628a\u6846\u67b6\u5199\u597d\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100005\n#define INF 1e12\n#define ll long long\nll d[N];\nint num;\nbool done[N];\nstruct edge { int u,v,w; } x;\nvector <edge> edges;\nvector <ll> G[N];\nstruct node\n{\n\tll d;\n\tint u;\n\tbool operator < (const node& x) const\n\t{ \n\t\treturn d > x.d;\n\t} \n} t;\nvoid insert(int x,int y,int e);\nvoid Dijkstra(int n,int s);\nint main(){\n\tint n,m,u,v,w,k;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(ll i = 0;i < m;i ++){\n\t\tscanf(\"%d%d%d\",&k,&u,&v);\n\t\tif(!k)\n\t\t{\n\t\t\tDijkstra(n,u);\n\t\t\tprintf(\"%lld\\n\",d[v] == INF ? -1 : d[v]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&w);\n\t\t\tinsert(u,v,w);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u5199$insert$\u51fd\u6570  \n\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u53ea\u662f\u8981\u6ce8\u610f\u9898\u4e2d\u7ed9\u7684\u662f\u53cc\u5411\u8fb9\uff1a\n```cpp\nvoid insert(int x,int y,int e)\n{\n\tedges.push_back({x,y,e});\n\tedges.push_back({y,x,e});\n\tG[x].push_back(num); \n\t++ num;\n\tG[y].push_back(num);\n\t++ num;\t\n}\n```\n\u672c\u4eba\u8fd9\u91cc\u91c7\u7528\u7684\u662f **\u8fb9\u7f16\u53f7+\u70b9\u5bf9\u8fb9** \u5b58\u50a8\u65b9\u6cd5\uff0c\u53ef\u80fd\u4e0d\u90a3\u4e48\u5bb9\u6613\u7406\u89e3\uff0c\u4e0d\u8fc7\u4ed4\u7ec6\u5206\u6790\u6bcf\u6761\u8bed\u53e5\u7684\u76ee\u7684\u5c31\u80fd\u660e\u767d\u5b83\u7684\u7528\u610f\u3002  \n\n$Dijkstra$\u51fd\u6570\u5c31\u5f88\u597d\u5199\u4e86\uff0c\u76f4\u63a5\u4e0a\u6a21\u677f\uff1a\n```cpp\nvoid Dijkstra(int n,int s)\n{\n\tint size;\n\tpriority_queue <node> pq;\n\tfill(d + 1,d + n + 1,INF);\n\tfill(done,done + n + 1,0);\n\td[s] = 0;\n\tpq.push({0,s});\n\twhile(!pq.empty())\n\t{\n\t\tt = pq.top();\n\t\tpq.pop();\n\t\tif(done[t.u]) continue;\n\t\tdone[t.u] = 1;\n\t\tsize = G[t.u].size();\n\t\tfor(int i = 0;i < size;i ++)\n\t\t{\n\t\t\tx = edges[G[t.u][i]];\n\t\t\tif(d[x.v] > d[t.u] + x.w)\n\t\t\t{\n\t\t\t\td[x.v] = d[t.u] + x.w;\n\t\t\t\tpq.push({d[x.v],x.v});\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7531\u4e8e\u67e5\u627e\u6709\u591a\u6b21\uff0c\u6bcf\u6b21\u67e5\u627e\u90fd\u8981\u5bf9\u6570\u7ec4\u521d\u59cb\u5316\uff0c\u800c\u4e14\u5c3d\u91cf\u5c06\u8fb9\u6570\u3001\u8d77\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\uff0c\u4f7f\u5176\u5c01\u88c5\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u51fd\u6570\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u65b9\u4fbf\u3002\n\n\u5168\u90e8\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100005\n#define INF 1e12\n#define ll long long\nll d[N];\nint num;\nbool done[N];\nstruct edge { int u,v,w; } x;\nvector <edge> edges;\nvector <ll> G[N];\nstruct node\n{\n\tll d;\n\tint u;\n\tbool operator < (const node& x) const\n\t{ \n\t\treturn d > x.d;\n\t} \n} t;\nvoid insert(int x,int y,int e)\n{\n\tedges.push_back({x,y,e});\n\tedges.push_back({y,x,e});\n\tG[x].push_back(num); \n\t++ num;\n\tG[y].push_back(num);\n\t++ num;\t\n}\nvoid Dijkstra(int n,int s)\n{\n\tint size;\n\tpriority_queue <node> pq;\n\tfill(d + 1,d + n + 1,INF);\n\tfill(done,done + n + 1,0);\n\td[s] = 0;\n\tpq.push({0,s});\n\twhile(!pq.empty())\n\t{\n\t\tt = pq.top();\n\t\tpq.pop();\n\t\tif(done[t.u]) continue;\n\t\tdone[t.u] = 1;\n\t\tsize = G[t.u].size();\n\t\tfor(int i = 0;i < size;i ++)\n\t\t{\n\t\t\tx = edges[G[t.u][i]];\n\t\t\tif(d[x.v] > d[t.u] + x.w)\n\t\t\t{\n\t\t\t\td[x.v] = d[t.u] + x.w;\n\t\t\t\tpq.push({d[x.v],x.v});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tint n,m,u,v,w,k;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(ll i = 0;i < m;i ++){\n\t\tscanf(\"%d%d%d\",&k,&u,&v);\n\t\tif(!k)\n\t\t{\n\t\t\tDijkstra(n,u);\n\t\t\tprintf(\"%lld\\n\",d[v] == INF ? -1 : d[v]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\",&w);\n\t\t\tinsert(u,v,w);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u6700\u540e\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u5faa\u73af$O(m)$\uff0cDijkstra+\u5806\u4f18\u5316$O(n\\ log\\ n)$\uff0c\u603b\u5171$O(m\\times n\\ log\\ n)$\uff0c\u6700\u5927\u7ea6\u4e3a$3.5\\times10^6$\uff0c\u8fdc\u5c0f\u4e8e\u65f6\u95f4\u9650\u5236\u3002(\u5b9e\u6d4b\u7ed3\u679c\uff1a\u6240\u6709\u6570\u636e\u70b9\u7528\u65f6\u4e4b\u548c\u4e3a$2.52s$\uff09\u3002  \n$\\mathrm{The\\ end.}$",
        "postTime": 1590673410,
        "uid": 270791,
        "name": "WanderingTrader",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    },
    {
        "content": "\u770b\u5b8c\u9898\u89e3\u540e\uff0c\u53d1\u73b0\uff1a\n\n\u4e3a\u5565\u90fd\u662f $ \\rm Dijkstra, SPFA $ \u5565\u7684\uff0c\u800c\u6211\u5374\u5199\u4e86\u4e2a $ \\text  {O(\u7406\u8bba\u4e0a\u8fc7\u4e0d\u53bb)} $ \u7684 $ \\rm Floyd $ \u554a...\n\n\u5361\u4e86\u4e00\u6ce2\u5e38\u624d A \u6389...\n\n\u9996\u5148\uff0c\u6211\u7684\u601d\u8def\u548c[\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.org/blog/wyl020527/solution-p2683)\u662f\u4e00\u6837\u7684\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u4f4d\u5927\u4f6c\u7684\u4ee3\u7801\u603b\u7528\u65f6\u662f $ 5.63s $\uff0c\u4f46\u662f\u6211\u7684\u4ee3\u7801\u7684\u603b\u7528\u65f6\u5374~~\u53ea\u6709~~ $ 4.31s $\u3002\u539f\u56e0\u5c31\u662f\u6211\u5bf9\u4e8e\u51e0\u4e2a\u5c0f\u5730\u65b9\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n\n\u4f18\u53160: $ \\rm O2,O3,Ofast! $\n\n\u7ed3\u679c\uff1aFail.\n\n\u4f18\u53161: $ \\rm IO $ \u4f18\u5316\u6765\u4e00\u6ce2!\n\n\u7ed3\u679c\uff1aFail.\n\n\u4f18\u53162: \u4fee\u6539\u8f93\u51fa\u4f18\u5316\u5bf9\u4e8e\u8f93\u51fa $ -1 $ \u65f6\u7684\u505a\u6cd5\uff01\n\n\u7ed3\u679c\uff1aFail.\n\n\u4f18\u53163: $ \\rm register $ \u5927\u6cd5\u597d\uff01\n\n\u7ed3\u679c\uff1aFail.\n\n\u4f18\u53164: \u5c06`while(m--)`\u53d8\u6210`for(;m;--m)`\uff0c\u5f3a\u884c\u4f18\u5316\u5e38\u6570!\n\n\u7ed3\u679c\uff1aFail.\n\n\u4f18\u53165: \u5728\u8dd1 $ \\rm Floyd $ \u65f6\uff0c\u5982\u679c $ \\rm dis[k][i]=INF $\uff0c\u76f4\u63a5 $ \\rm continue! $\n\n\u7ed3\u679c\uff1aFail.\n\n> \u8bf4\u53e5\u5b9e\u8bdd\uff0c\u6211\u5361\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u771f\u7684\u5f88\u60f3\u5f03\u7597\u4e86\n\n\u4f46\u662f\uff0c\u6240\u8c13\u6700\u72e0\u7684\u4f18\u5316\u5728\u6700\u540e\uff0c\n\n\u4f18\u53166: \u589e\u52a0\u4e00\u4e2a\u6807\u8bb0\uff0c\u907f\u514d\u91cd\u590d\u8dd1 $ \\rm Floyd! $\n\n\u89e3\u91ca\uff1a\u5b9a\u4e49\u4e00\u4e2a\u6211\u547d\u540d\u4e3a $ \\rm flag $ \u7684 $ \\rm bool $ \u53d8\u91cf\uff0c\u521d\u59cb\u503c\u4e3a $ \\rm true $\u3002\u5982\u679c\u8bfb\u5165\u7684 $ \\rm opt=0 $\uff0c\u76f4\u63a5\u5224\u65ad $ \\rm flag $ \u662f\u5426\u4e3a\u771f\u3002\u82e5\u4e3a\u771f\uff0c\u76f4\u63a5\u8f93\u51fa\u9898\u76ee\u4e2d $ s $ \u5230 $ t $ \u7684\u8ddd\u79bb\u3002\u5426\u5219\u624d\u8dd1 $ \\rm Floyd $\u3002\u82e5 $ \\rm opt=1 $\uff0c\u5219\u8f93\u51fa\u8ddd\u79bb\uff0c\u7136\u540e $ \\rm flag=false $\u3002\n\n\u7ed3\u679c\uff1a\u5361\u8fc7\u53bb\u5566\uff01\u6700\u6162\u7684\u4e00\u4e2a\u70b9\u4e5f~~\u53ea~~\u6709 $ 786ms $\uff0c\u8fd8\u662f\u4e0d\u9519\u554a\u3002\n\n> \u5176\u5b9e\u8fd9\u4e2a\u4f18\u5316\u5728\u4e0a\u6587\u4e2d\u8bb2\u5230\u7684\u90a3\u7bc7\u9898\u89e3\u4e2d\u4e5f\u662f\u6709\u7684\n\n\u8bb2\u5b8c\u4e86\u3002\n\n$ \\rm code $\n\n```cpp\n# pragma GCC optimize(2)\n# pragma GCC optimize(3)\n# pragma GCC optimize(\"Ofast\")\n// \u4f18\u53160\n# include <bits/stdc++.h>\nconst int maxN = 105;\nconst int INF = 0x3f3f3f3f;\n# define min(a, b) (a) < (b) ? (a) : (b)\nint n, m, dis[maxN][maxN];\nint read();\nvoid write(int);\nint main() {\n\tn = read(), m = read();\n\tmemset(dis, INF, sizeof dis);\n\tbool flag = true;\n\tfor(; m; --m) { // \u4f18\u53164\n\t\tint opt = read(), u = read(), v = read();\n\t\tif(opt == 0) {\n\t\t\tif(flag) write(dis[u][v] == INF ? -1 : dis[u][v]), puts(\"\"); // \u4f18\u53166\n\t\t\telse {\n\t\t\t\tfor(register int k = 1; k <= n; ++k)\n\t\t\t\t\tfor(register int i = 1; i <= n; ++i) {\n\t\t\t\t\t\tif(dis[k][i] == INF) continue; // \u4f18\u53165\n\t\t\t\t\t\tfor(register int j = 1; j <= n; ++j) // \u4f18\u53163\n\t\t\t\t\t\t\tdis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n\t\t\t\t}\n\t\t\t\tflag = true, write(dis[u][v] == INF ? -1 : dis[u][v]), puts(\"\"); \n\t\t\t}\n\t\t} else {\n\t\t\tint e = read();\n\t\t\tdis[u][v] = dis[v][u] = min(e, dis[u][v]), flag = false;\n\t\t}\n\t} \n\treturn 0;\n}\nint read() {\n\tint x = 0;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + ch - 48, ch = getchar();\n\treturn x;\n}\nvoid write(int x) {\n\tif(x < 0) { std::cout << -1; return; } // \u4f18\u53162\n\tif(x > 9) write(x / 10);\n\tputchar(x % 10 + 48);\n}\n// \u4f18\u53161\n```\n\n\u5927\u6982\u9664\u4e86\u4ee3\u7801\u6253\u4e86\u4e00\u5343\u591a\u5b57\u7684\u6837\u5b50\uff0c~~\u7ba1\u7406\u5458\u5927\u4f6c\u6c42\u8fc7\u554a~~\u3002",
        "postTime": 1564120939,
        "uid": 46747,
        "name": "Aehnuwx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2683 \u3010\u5c0f\u5c9b\u3011"
    }
]