[
    {
        "content": "## \u5f15\u5165\n\n\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\uff0c\u662f\u4e24\u4e2a\u5341\u5206\u76f8\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u3002\u4ed6\u4eec\u80fd\u4f7f\u5bf9\u4e00\u4e2a\u533a\u95f4\u7684\u6570\u4fee\u6539\u4ee5\u53ca\u67e5\u8be2\u7684\u901f\u5ea6\u63d0\u5347\u8bb8\u591a\u3002\u4e24\u4e2a\u7ed3\u6784\u672c\u8d28\u76f8\u540c\uff0c\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u4eca\u5929\u6211\u4eec\u6765\u4ece\u5355\u70b9\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u3002\n\n## \u6982\u5ff5\n\n###### \u7ebf\u6bb5\u6811\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logN\uff09\u3002\n\n\u6bd4\u5982\u8bb2\u4e00\u4e2a\u67094\u4e2a\u6570\u7684\u7ebf\u6bb5\u6811\uff0c\u662f\u957f\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a\n\n![](http://images2017.cnblogs.com/blog/987049/201708/987049-20170818161013115-871509071.png)\n\n\u4e00\u53f7\u8282\u70b9\uff0c\u4ee3\u8868\u7740\u533a\u95f41~4\n\n\u4e8c\u53f7\u8282\u70b9\uff0c\u4ee3\u8868\u533a\u95f41~2\n\n\u4e09\u53f7\u8282\u70b9\uff0c\u4ee3\u8868\u533a\u95f43~4\n\n\u4ee5\u6b64\u7c7b\u63a8\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8en\u53f7\u8282\u70b9\u6765\u8bf4\uff0cn\u00d72\u4ee3\u8868\u7740\u5b83\u7684\u533a\u95f4\u7684\u524d\u534a\u6bb5\uff0cn\u00d72+1\u4ee3\u8868\u7740\u5b83\u7684\u533a\u95f4\u7684\u540e\u534a\u6bb5\u3002\n\n###### \u6811\u72b6\u6570\u7ec4\n\n\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u5f88\u5947\u7279\u7684\u6811\uff0c\u5b83\u7684\u8282\u70b9\u4f1a\u6bd4\u7ebf\u6bb5\u6811\u5c11\u4e00\u4e9b\uff0c\u4e5f\u80fd\u8868\u793a\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\u6bd4\u5982\u4e00\u4e2a\u6570\u7ec4\u53eb\u505aa\u67098\u4e2a\u6570\uff0c\u90a3\u4e48\u5b83\u7684\u6811\u72b6\u6570\u7ec4\u6837\u5b50\u5c31\u957f\u8fd9\u6837\n\n![](http://img2.imgtn.bdimg.com/it/u=2402068639,1966957079&fm=27&gp=0.jpg)\n\nc\u6570\u7ec4\u5c31\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u80fd\u770b\u51fa\u6765\n\n```cpp\nc1=a1;\nc2=a1+a2;\nc3=a3;\nc4=a1+a2+a3+a4;\n```\n\u4ee5\u6b64\u7c7b\u63a8\u3002\u3002\u3002\u3002\u3002\u3002\n\u5f88\u96be\u8bf4\u51fa\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u5982\u679c\u628a\u5b83\u4eec\u53d8\u4e3a\u4e8c\u8fdb\u5236\n\n```cpp\nc0001=a0001\nc0010=a0001+a0010\nc0011=a0011\nc0100=a0001+a0010+a0011+a0100\n```\n\u4f60\u4f1a\u53d1\u73b0\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\uff0c\u53bb\u6389\u6240\u6709\u9ad8\u4f4d1\uff0c\u53ea\u7559\u4e0b\u6700\u4f4e\u4f4d\u76841\uff0c\u7136\u540e\u4ece\u90a3\u4e2a\u6570\u4e00\u76f4\u52a0\u52301\uff0c\u770b\u4e00\u770b\u662f\u4e0d\u662f\u8fd9\u6837\u3002\n## \u7ebf\u6bb5\u6811\u6784\u9020\n\n\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u4e0d\u9700\u8981\u6784\u9020\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u6240\u4ee5\u5148\u8bb2\u7ebf\u6bb5\u6811\u7684\u6784\u9020\n\n\u5c31\u662f\u7528\u5230\u9012\u5f52\uff1a\u5148\u8bbeleft=1,right=n\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u9012\u5f52\uff0cleft\u3001mid\u548cmid+1\u3001right\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```cpp\n    void build(int left,int right,int index)\n    {\n        tree[index].left=left;\n        tree[index].right=right;\n           if(left==right)\n            return ;\n        int mid=(right+left)/2;\n        build(left,mid,index*2);\n        build(mid+1,right,index*2+1);\n    }\n```\n``\n## \u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\n\n\u5355\u70b9\u4fee\u6539\u5c31\u662f\u6bcf\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u770b\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7740\u7684\u533a\u95f4\u5305\u62ec\u4e0d\u5305\u62ec\u8fd9\u4e2a\u70b9\uff0c\u5305\u62ec\u5c31\u52a0\u4e0a\u3002\n\n\n```cpp\n    void my_plus(int index,int dis,int k)\n    {\n        tree[index].num+=k;\n        if(tree[index].left==tree[index].right)\n            return ;\n        if(dis<=tree[index*2].right)\n            my_plus(index*2,dis,k);\n        if(dis>=tree[index*2+1].left)\n            my_plus(index*2+1,dis,k);\n    }\n```\n## \u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4e1c\u897f\uff0c\u53eb\u505alowbit\uff0clowbit\u662f\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7684\u6240\u6709\u9ad8\u4f4d\u4e00\u90fd\u53bb\u6389\uff0c\u53ea\u7559\u4e0b\u6700\u4f4e\u4f4d\u76841\uff0c\u6bd4\u5982lowbit\uff085\uff09=lowbit\uff080101\uff08\u4e8c\u8fdb\u5236\uff09\uff09=0001\uff08\u4e8c\u8fdb\u5236\uff09\n\n\u800c\u5982\u679c\u6539\u53d8x\u7684\u503c\uff0c\u5c31\u8981\u52a0\u4e0a\u81ea\u5df1\u7684lowbit\uff0c\u4e00\u76f4\u52a0\u5230n\uff0c\u8fd9\u4e9b\u8282\u70b9\u90fd\u8981\u52a0\uff0c\u6bd4\u5982\u4e00\u5171\u67098\u4e2a\u6570\u7b2c3\u4e2a\u6570\u8981\u52a0\u4e0ak\uff0c\u90a3\u4e48c[0011]+=k;\n\nc[0011+0001] (c[0100])+=k;\n\nc[0100+0100] (c[1000])+=k;\n\n\u8fd9\u6837\u5c31\u80fd\u7ef4\u62a4\u6811\u72b6\u6570\u7ec4\n\n\n```cpp\n    void add(int x,int k)\n    {\n        while(x<=n)\n        {\n            tree[x]+=k;\n            x+=lowbit(x);\n        }\n    }\n```\n## \u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\n\u533a\u95f4\u67e5\u8be2\u5c31\u662f\uff0c\u6bcf\u67e5\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u6709\u4e09\u79cd\u9009\u62e9\uff1a\n\n1\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u5b8c\u5168\u5305\u62ec\u5728\u76ee\u6807\u533a\u95f4\u5185\uff0c\u90a3\u4e48\u52a0\u4e0a\u8fd9\u4e2a\u533a\u95f4\u7684\u548c\uff0c\u7136\u540ereturn\uff1b\n\n2\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684right>\u76ee\u6807\u533a\u95f4\u7684left\uff0c\u90a3\u4e48\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\uff1b\n\n3\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684left<\u76ee\u6807\u533a\u95f4\u7684right\uff0c\u4e5f\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4;\n\n\n```cpp\n    void search(int index,int l,int r)\n    {\n        if(tree[index].left>=l && tree[index].right<=r)\n        {\n            ans+=tree[index].num;\n            return ;\n        }\n        if(tree[index*2].right>=l)\n            search(index*2,l,r);\n        if(tree[index*2+1].left<=r)\n            search(index*2+1,l,r);\n    }\n```\n## \u6811\u72b6\u6570\u7ec4\u533a\u95f4\u67e5\u8be2\n\u5c31\u662f\u524d\u7f00\u548c\uff0c\u6bd4\u5982\u67e5\u8be2x\u5230y\u533a\u95f4\u7684\u548c\uff0c\u90a3\u4e48\u5c31\u5c06\u4ece1\u5230y\u7684\u548c-\u4ece1\u5230x\u7684\u548c\u3002\n\n\u4ece1\u5230y\u7684\u548c\u6c42\u6cd5\u662f\uff0c\u5c06y\u8f6c\u4e3a2\u8fdb\u5236\uff0c\u7136\u540e\u4e00\u76f4\u51cf\u53bblowbit(y)\uff0c\u4e00\u76f4\u52300\n\n\u6bd4\u5982\u6c421\u52307\u7684\u548c\n\n\n```cpp\nans+=c[0111];\nans+=c[0111-0001(0110)];\nans+=c[0110-0010(0100)];\nans+=c[0100-0100(c[0]\u65e0\u610f\u4e49\uff0c\u7ed3\u675f)]\n    int sum(int x)\n    {\n        int ans=0;\n        while(x!=0)\n        {\n            ans+=tree[x];\n            x-=lowbit(x);\n        }\n        return ans;\n    }\n```\n## \u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\n\u548c\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u7c7b\u4f3c\uff0c\u5206\u4e3a\u4e09\u79cd\n\n1\u3001\u5982\u679c\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5c5e\u4e8e\u8981\u52a0\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u8282\u70b9\u52a0\u4e0a\uff0c\u7136\u540ereturn\uff1b\n\n2\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684right>\u76ee\u6807\u533a\u95f4\u7684left\uff0c\u90a3\u4e48\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\uff1b\n\n3\u3001\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684left<\u76ee\u6807\u533a\u95f4\u7684right\uff0c\u4e5f\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4;\n\n\n```cpp\n    void pls(int index,int l,int r,int k)\n    {\n        if(tree[index].left>=l && tree[index].right<=r)\n        {\n            tree[index].num+=k;\n            return ;\n        }\n        if(tree[index*2].right>=l)\n           pls(index*2,l,r,k);\n        if(tree[index*2+1].left<=r)\n           pls(index*2+1,l,r,k);\n    }\n```\n##\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u4fee\u6539\n\u8fd9\u5c31\u4f1a\u53d8\u7684\u5f88\u597d\u73a9\u3002\u5982\u679c\u5c06x\u5230y\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2ak\uff0c\u90a3\u5c31\u662f\u4ecex\u5230n\u90fd\u52a0\u4e0a\u4e00\u4e2ak\uff0c\u518d\u4ecey+1\u5230n\u52a0\u4e0a\u4e00\u4e2a-k\n\n\u52a0\u7684\u79fb\u52a8\u8fd8\u662fi+=lowbit(i);\n\n\n```cpp\n    void add(int x,int k)\n    {\n        while(x<=n)\n        {\n            tree[x]+=k;\n            x+=lowbit(x);\n        }\n    }\n```\n## \u7ebf\u6bb5\u6811\u5355\u70b9\u67e5\u8be2\n\u5c31\u662f\u4ece\u6839\u8282\u70b9\uff0c\u4e00\u76f4\u641c\u7d22\u5230\u76ee\u6807\u8282\u70b9\uff0c\u7136\u540e\u4e00\u8def\u4e0a\u90fd\u52a0\u4e0a\u5c31\u597d\u4e86\u3002\n\n\n    \n```cpp\n    void search(int index,int dis)\n    {\n        ans+=tree[index].num;\n        if(tree[index].left==tree[index].right)\n            return ;\n        if(dis<=tree[index*2].right)\n            search(index*2,dis);\n        if(dis>=tree[index*2+1].left)\n            search(index*2+1,dis);\n    }\n```\n## \u6811\u72b6\u6570\u7ec4\u5355\u70b9\u67e5\u8be2\n\u4ecex\u70b9\uff0c\u4e00\u76f4x-=lowbit(x)\uff0c\u6cbf\u9014\u90fd\u52a0\u4e0a\u5c31\u597d\u5566\n\n\n    \n```cpp\n    int search(int x)\n    {\n        int ans=0;\n        while(x!=0)\n        {\n            ans+=tree[x];\n            x-=lowbit(x);\n        }\n        return ans;\n    }\n```\n\u4e0b\u9762\u7ed9\u5927\u5bb6\u5206\u522b\u53d1\u4e00\u4e0b\u843d\u8c37\u6811\u72b6\u6570\u7ec41\u30012\u7684AC\u4ee3\u7801\n\uff08\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u90fd\u53ef\u4ee5\u505a\u8fd9\u4e9b\u9898\uff09\n\n[\u6811\u72b6\u6570\u7ec41](https://www.luogu.org/problemnew/show/3374 \"\u6811\u72b6\u6570\u7ec41\")\n\n###### \u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a\n\n\n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <cstdio>\n    #include <cstring>\n    #include <cmath>\n    #include <queue>\n    using namespace std;\n    int n,m;\n    int ans;\n    int he=0;\n    int input[500010];\n    struct node\n    {\n        int left,right;\n        int num;\n    }tree[2000010];\n    void build(int left,int right,int index)\n    {\n        he++;\n        tree[index].left=left;\n        tree[index].right=right;\n           if(left==right)\n            return ;\n        int mid=(right+left)/2;\n        build(left,mid,index*2);\n        build(mid+1,right,index*2+1);\n    }\n    int add(int index)\n    {\n        if(tree[index].left==tree[index].right)\n        {\n            //cout<<index<<\" \"<<input[tree[index].right]<<endl;\n            tree[index].num=input[tree[index].right];\n            return tree[index].num;\n        }\n        tree[index].num=add(index*2)+add(index*2+1);\n        return tree[index].num;\n    }\n    void my_plus(int index,int dis,int k)\n    {\n        tree[index].num+=k;\n        if(tree[index].left==tree[index].right)\n            return ;\n        if(dis<=tree[index*2].right)\n            my_plus(index*2,dis,k);\n        if(dis>=tree[index*2+1].left)\n            my_plus(index*2+1,dis,k);\n    }\n    void search(int index,int l,int r)\n    {\n        //cout<<index<<\" \";\n        if(tree[index].left>=l && tree[index].right<=r)\n        {\n            ans+=tree[index].num;\n            return ;\n        }\n        if(tree[index*2].right>=l)\n            search(index*2,l,r);\n        if(tree[index*2+1].left<=r)\n            search(index*2+1,l,r);\n    }\n    int main()\n    {\n        cin>>n>>m;\n        for(int i=1;i<=n;i++)\n            scanf(\"%d\",&input[i]);\n        build(1,n,1);\n        add(1);\n        for(int i=1;i<=m;i++)\n        {\n            int a,b,c;\n            scanf(\"%d%d%d\",&a,&b,&c);\n            if(a==1)\n            {\n                my_plus(1,b,c);\n            }\n            if(a==2)\n            {\n                ans=0;\n                search(1,b,c);\n                printf(\"%d\\n\",ans);\n            }\n        }\n    }\n```\n###### \u6811\u72b6\u6570\u7ec4\u4ee3\u7801\uff1a\n\n```cpp\n    #include <iostream>\n    #include <cstdio>\n    #include <algorithm>\n    #include <cmath>\n    #include <cstring>\n    using namespace std;\n    int n,m,tree[2000010];\n    int lowbit(int k)\n    {\n        return k & -k;\n    }\n    void add(int x,int k)\n    {\n        while(x<=n)\n        {\n            tree[x]+=k;\n            x+=lowbit(x);\n        }\n    }\n    int sum(int x)\n    {\n        int ans=0;\n        while(x!=0)\n        {\n            ans+=tree[x];\n            x-=lowbit(x);\n        }\n        return ans;\n    }\n    int main()\n    {\n        cin>>n>>m;\n        for(int i=1;i<=n;i++)\n        {\n            int a;\n            scanf(\"%d\",&a);\n            add(i,a);\n        }\n        for(int i=1;i<=m;i++)\n        {\n            int a,b,c;\n            scanf(\"%d%d%d\",&a,&b,&c);\n            if(a==1)\n                add(b,c);\n            if(a==2)\n                cout<<sum(c)-sum(b-1)<<endl;\n        }\n    }\n```\n[\u6811\u72b6\u6570\u7ec42](https://www.luogu.org/problemnew/show/3368 \"\u6811\u72b6\u6570\u7ec42\")\n###### \u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a\n\n\n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <cstdio>\n    #include <cstring>\n    #include <cmath>\n    #include <queue>\n    using namespace std;\n    int n,m;\n    int ans;\n    int input[500010];\n    struct node\n    {\n        int left,right;\n        int num;\n    }tree[2000010];\n    void build(int left,int right,int index)\n    {\n        tree[index].num=0;\n        tree[index].left=left;\n        tree[index].right=right;\n           if(left==right)\n            return ;\n        int mid=(right+left)/2;\n        build(left,mid,index*2);\n        build(mid+1,right,index*2+1);\n    }\n    /*int add(int index)\n    {\n        if(tree[index].left==tree[index].right)\n        {\n            tree[index].num=input[tree[index].right];\n            return tree[index].num;\n        }\n        tree[index].num=add(index*2)+add(index*2+1);\n        return tree[index].num;\n    }\n```\n\\*/\n    \n```cpp\n    void pls(int index,int l,int r,int k)\n    {\n        if(tree[index].left>=l && tree[index].right<=r)\n        {\n            tree[index].num+=k;\n            return ;\n        }\n        if(tree[index*2].right>=l)\n           pls(index*2,l,r,k);\n        if(tree[index*2+1].left<=r)\n           pls(index*2+1,l,r,k);\n    }\n    void search(int index,int dis)\n    {\n        ans+=tree[index].num;\n        if(tree[index].left==tree[index].right)\n            return ;\n        if(dis<=tree[index*2].right)\n            search(index*2,dis);\n        if(dis>=tree[index*2+1].left)\n            search(index*2+1,dis);\n    }\n    int main()\n    {\n        int n,m;\n        cin>>n>>m;\n        build(1,n,1);\n        for(int i=1;i<=n;i++)\n            scanf(\"%d\",&input[i]);\n        for(int i=1;i<=m;i++)\n        {\n            int a;\n            scanf(\"%d\",&a);\n            if(a==1)\n            {\n                int x,y,z;\n                scanf(\"%d%d%d\",&x,&y,&z);\n                pls(1,x,y,z);\n            }\n            if(a==2)\n            {\n                ans=0;\n                int x;\n                scanf(\"%d\",&x);\n                search(1,x);\n                printf(\"%d\\n\",ans+input[x]);\n            }\n        }\n    }\n```\n###### \u6811\u72b6\u6570\u7ec4\u4ee3\u7801\uff1a\n\n    \n```cpp\n    #include <iostream>\n    #include <algorithm>\n    #include <cstdio>\n    #include <cstring>\n    #include <cmath>\n    #include <queue>\n    using namespace std;\n    int n,m;\n    int input[500010];\n    int tree[500100];\n    int lowbit(int x)\n    {\n        return x & -x;\n    }\n    void add(int x,int k)\n    {\n        while(x<=n)\n        {\n            tree[x]+=k;\n            x+=lowbit(x);\n        }\n    }\n    int search(int x)\n    {\n        int ans=0;\n        while(x!=0)\n        {\n            ans+=tree[x];\n            x-=lowbit(x);\n        }\n        return ans;\n    }\n    int main()\n    {\n        cin>>n>>m;\n        for(int i=1;i<=n;i++)\n            cin>>input[i];\n        for(int i=1;i<=m;i++)\n        {\n            int a;\n            scanf(\"%d\",&a);\n            if(a==1)\n            {\n                int x,y,z;\n                scanf(\"%d%d%d\",&x,&y,&z);\n                add(x,z);\n                add(y+1,-z);\n            }\n            if(a==2)\n            {\n                int x;\n                scanf(\"%d\",&x);\n                printf(\"%d\\n\",input[x]+search(x));\n            }\n        }\n    }\n```\n## \u603b\u7ed3\n\u6700\u540e\uff0c\u518d\u6765\u603b\u7ed3\u4e00\u4e0b\n\n###### \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u867d\u7136\u5b83\u4eec\u90fd\u662fnlogn\uff0c\u4f46\u662f\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5728\u67e5\u8be2\u65f6\uff0c\u6811\u72b6\u6570\u7ec4\u6700\u574f\u60c5\u51b5\u662flogn\uff08\u6bd4\u59828\u4e2a\u6570\uff0c\u7136\u540e\u67e5\u8be28\uff09\uff0c\u4f46\u662f\u7ebf\u6bb5\u6811\u662f\u6240\u6709\u60c5\u51b5\u90fd\u662fnlogn\uff0c\u7a0d\u6162\u4e8e\u6811\u72b6\u6570\u7ec4\u3002\n\n\n######\u7a7a\u95f4\u590d\u6742\u5ea6\n\n\u6811\u72b6\u6570\u7ec4\u5b8c\u80dc\u4e8e\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u8981\u5f002\u500d\u52304\u500d\u5185\u5b58\uff08\u63a8\u83504\u500d\uff09\uff0c\u4f46\u662f\u6811\u72b6\u6570\u7ec4\u4e00\u500d\u5c31\u591f\u4e86\u3002\n\n\n######\u9002\u7528\u8303\u56f4\n\n\u7ebf\u6bb5\u6811\u4e4b\u6240\u4ee5\u5b58\u5728\u7684\u7406\u7531\u662f\u56e0\u4e3a\u5b83\u80fd\u9002\u7528\u4e8e\u5f88\u591a\u65b9\u9762\uff0c\u4e0d\u4ec5\u4ec5\u662f\u533a\u95f4\u3001\u5355\u70b9\u7684\u67e5\u8be2\u4fee\u6539\uff0c\u8fd8\u6709\u6807\u8bb0\u7b49\u7b49\uff0c\u53ef\u4ee5\u7528\u4e8e\u6a21\u62df\u3001DP\u7b49\u7b49\uff0c\u800c\u4e14\u7a7a\u95f4\u7ecf\u8fc7\u79bb\u6563\u5316\u4ee5\u540e\u4e5f\u53ef\u4ee5\u76f8\u5bf9\u538b\u7f29\uff0c\u6240\u4ee5\u9002\u7528\u8303\u56f4\u7ebf\u6bb5\u6811\u66f4\u52a0\u5e7f\u4e00\u4e9b\u3002\n",
        "postTime": 1512827396,
        "uid": 39942,
        "name": "TJor",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811\u4e0e\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "# \u4e00\u3001\u6d45\u6790\u6570\u636e\u7ed3\u6784\u4e4b\u7528\u5904\u548c\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e4b\u7279\u6027\n\n\u6570\u636e\u7ed3\u6784\u8005\uff0c\u8c13\u4e4b**\u6570\u636e\u4e4b\u5173\u7cfb**\u3002\u5355\u8bba\u6570\u636e\u7279\u6027\uff0c\u4e5f\u4e0d\u8fc7\u662f\u6570\u636e\u4e4b\u95f4\u7684\u5b58\u50a8\u65b9\u5f0f\u7f62\u3002\u4f46\u8981\u8bf4\u66f4\u6df1\u5c42\u6b21\u4e4b\u4f5c\u7528\uff0c\u662f**\u8fd0\u7528\u5176\u5b58\u50a8\u4e4b\u7279\u6027\uff0c\u5efa\u7acb\u6570\u5b66\u4e4b\u6a21\u578b\uff0c\u66f4\u65b9\u4fbf\u5730\u624d\u5904\u7406\u6570\u636e\u5c14**\u3002\n\n\u4ee5\u4e0a\u662f\u9c81\u8fc5\u540c\u5fd7\u8bf4\u7684\uff08\u9c81\u8fc5\uff1a$exm$\uff1f\uff1f\uff1f\uff09\uff0c\u5176\u5b9e\u4e00\u5207\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u8fc7\u5c31\u662f\u4e00\u79cd**\u7528\u4e8e\u5904\u7406\u6570\u636e\u7684\u3001\u6210\u719f\u7684\u3001\u5408\u7406\u7684\u7ed3\u6784\u5c01\u88c5**\u3002\u8f83\u4f4e\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u4f1a\u652f\u6301\u4ec0\u4e48\u64cd\u4f5c\uff0c\u4ec5\u662f\u7ef4\u62a4\u81ea\u8eab\u7684\u5b58\u50a8\u79e9\u5e8f\uff1b\u800c\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u5219\u53ef\u4ee5\u652f\u6301\u8bb8\u591a\u64cd\u4f5c\u2014\u2014\u5176\u5b9e\u4e5f\u4e0d\u8fc7\u662f\u7ef4\u62a4\u81ea\u8eab\u6570\u636e\u7684\u79e9\u5e8f\u800c\u5df2\uff0c\u53ea\u4e0d\u8fc7\u5728\u7ef4\u62a4\u5176\u81ea\u8eab\u79e9\u5e8f\u7684\u540c\u65f6\uff0c\u7531\u4e8e\u5176\u672c\u8eab\u7ed3\u6784\u590d\u6742\u4e14\u7279\u70b9\u9c9c\u660e\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u8bb8\u591a\u5f88\u4f18\u5316\u7684\u7b97\u6cd5\u3002\n\uff08\u9c81\u8fc5\uff1a\u770b\u5728\u4f60\u8bb2\u5f97\u8fd9\u4e48\u597d\u9976\u4e86\u4f60\uff01\uff09\n\n\u800c\u4eca\u5929\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u6709\u5173 RMQ\u3001RSQ \u95ee\u9898\u7684\u3001\u8f83\u4e3a\u57fa\u7840\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u3002\n\n# \u4e8c\u3001\u5148\u6765\u4ecb\u7ecd\u5206\u5757\u601d\u60f3\u5427\n\n## \uff08\u4e00\uff09\u57fa\u672c\u6027\u8d28\u4e0e\u8bc1\u660e\n\n\u5176\u5b9e\u4ece\u672c\u8d28\u4e0a\u6765\u8bb2\uff0c\u5206\u5feb\u66f4\u50cf\u662f\u4e00\u79cd\u601d\u60f3\u3002\u5206\u5757\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u533a\u95f4\u5206\u6210\u51e0\u5757\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6574\u5408\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u751a\u81f3\u5168\u90e8\u533a\u95f4\u7684\u4fe1\u606f\u3002\u4f46\u662f\u5728\u8fd9\u79cd\u6574\u5408\u4e0d\u662f\u968f\u4fbf\u6574\u5408\uff0c\u5fc5\u987b\u8981\u6709\u6280\u5de7\u3001\u6709\u76ee\u7684\u5730\u6574\u5408\uff0c\u624d\u4f1a\u51cf\u5c0f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u5148\u770b\u4e00\u9053\u4f8b\u9898\uff1a\n\n\u73b0\u5728\u4f60\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u6709 $m$ \u4e2a\u64cd\u4f5c\uff1a\n\n1.\u4fee\u6539\u67d0\u4f4d\u7f6e\u7684\u5143\u7d20\u7684\u503c\u3002\n\n2.\u5c06\u4e00\u6bb5\u533a\u95f4\u7684\u5143\u7d20\u52a0\u4e0a\u6216\u51cf\u53bb\u4e00\u4e2a\u503c\u3002\n\n3.\u6c42\u4e00\u6bb5\u533a\u95f4\u7684\u5143\u7d20\u7684\u6700\u5927\u503c\u3002\n\n$n,m\\leq 50000$\u3002\n\n\u8ba9\u6211\u4eec\u8003\u8651\u5206\u5757:\n\u9996\u5148\u7b2c\u4e00\u6b65\uff0c\u8fdb\u884c\u533a\u95f4\u5212\u5206\uff0c\u5728\u8fd9\u4e00\u6b65\u6211\u4eec\u8003\u8651\u5c06\u6574\u4e2a\u5e8f\u5217\u5212\u5206\u6210 $\\sqrt{n}$ \u5757\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u5176\u603b\u67e5\u8be2\u65f6\u95f4\u6700\u5feb\n\n\u8bc1\u660e\uff1a\n\n\u5bf9\u4e8e\u641c\u67e5\u6574\u4e2a\u5e8f\u5217\u4e2d\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u8bbe\u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u5b8c\u6574\u5206\u5757\u5757\u6570\u662f $C$ \u5757\uff0c\u6bcf\u4e00\u6bb5\u5747\u5300\u7684\u5206\u5757\u90fd $S$ \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u590d\u6742\u5f62\u5f0f\u4e3a:\u6709 $C$ \u4e2a\u5b8c\u6574\u533a\u95f4\uff0c\u5e76\u4e14\u95ed\u533a\u95f4 [$l$,$r$] \u8fd8\u5728\u4e24\u7aef\u5305\u62ec\u6709\u4e0d\u5b8c\u6574\u7684\u5206\u597d\u7684\u5757\uff1a\n\n```cpp\n\u2014\u2014|\u2014\u3010\u2014\u2014\u2014\u2014|\u2014\u2014\u2014\u2014\u2014\u2014|\u2014\u2014\u2014\u2014\u2014\u2014|\u2014\u2014\u2014\u2014\u3011\u2014|\u2014\u2014\u2014\u2014\n```\n\n\u4e0a\u56fe\u4e2d\u3010\u3011\u8868\u793a\u533a\u95f4\uff0c| \u4e0e | \u4e4b\u95f4\u8868\u793a\u5206\u597d\u7684\u5747\u5300\u5757\uff08\u535a\u4e3b\u4e0d\u77e5\u9053\u600e\u4e48\u753b\u7cbe\u7f8e\u7684\u56fe\u5566\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8be5\u533a\u95f4\u5185\u6709 $C$ \u6bb5\u5b8c\u6574\u533a\u95f4\uff0c$2$ \u6bb5\u4e0d\u5b8c\u6574\u533a\u95f4\uff1b\u800c\u540c\u65f6\uff0c\u4e0d\u5b8c\u6574\u533a\u95f4\u7684\u5143\u7d20\u6570\u91cf\u4e4b\u548c\uff0c\u7edd\u5bf9\u5c0f\u4e8e\u7b49\u4e8e $2S$\uff1b\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u533a\u95f4\u800c\u8a00\uff0c\u5171\u9700\u8981\u8fdb\u884c\u6700\u591a $C+2S$ \u6b21\u67e5\u8be2\u2014\u2014\u56e0\u4e3a\u4e00\u4e2a\u5206\u5757\u53ef\u4ee5\u4f9b\u7ed9\u5757\u5185\u6240\u6709\u5143\u7d20\u7684\u4fe1\u606f\u3002\u90a3\u4e48\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4fbf\u662f $O(C+2S)$\u3002\u4ece\u6e10\u8fdb\u610f\u4e49\u4e0a\u6765\u8bb2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(C+S)$\uff0c\u6e10\u8fdb\u6574\u5408\u540e\u4fbf\u662f $O(\\max\\{C,S\\})$\uff08**\u6e10\u8fdb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u7b49\u4e8e\u5bf9\u6570\u503c\u6539\u53d8\u5f71\u54cd\u6700\u5927\u7684\u6570\u503c\u7684\u590d\u6742\u5ea6**\uff09\u3002\n\n\u5728\u77e5\u9053\u8fd9\u4e00\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u60f3\uff1a\n\n\u56e0\u4e3a \n\n$$\nC\\times{S}+2S\\geq r-l+1\n$$\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd1\u4f3c\u5730\u770b\u505a\u6709\n\n$$\nC\\times{S}=r-l+1\n$$\n\n\u6240\u4ee5\u5728\u540c\u4e00\u533a\u95f4\u5185 $C\u00d7S$ \u4e4b\u79ef\u53ef\u4ee5\u770b\u4f5c\u662f\u4e2a\u5b9a\u503c\u3002\u90a3\u4e48\u5f53\u4e14\u4ec5\u5f53 $S=C$ \u65f6\uff0c\u624d\u4f1a\u4f7f\u5f97 $\\max\\{C,S\\}$ \u6700\u5c0f\uff0c\u6b64\u65f6 $S=C=\\sqrt{n}$\u3002\n\n## \uff08\u4e8c\uff09\u5206\u5757\u7684\u8fd0\u884c\u673a\u5236\n\n\u9996\u5148\u5c31\u662f\u786e\u7acb\u6240\u5206\u7684\u5757\u4e0e\u88ab\u5305\u542b\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u5728\u6b64\u7528\u4e00\u4e2a `belong` \u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u4e0e\u6240\u5206\u7684\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u540c\u65f6\u8fdb\u884c\u533a\u95f4\u8bb0\u5f55\u3002\n\n```cpp\n\tint n,a[MAXN],belong[MAXN];\n\tint S,C=0,st[MAXN],ed[MAXN];//sum[MAXN],ma_x[MAXN],mi_n[MAXN]; \n\t/*\n\tn:\u5143\u7d20\u4e2a\u6570\uff0ca[]\uff1a\u5143\u7d20\uff0cbelong[]:\u6bcf\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u5757\u7684\u7f16\u53f7 \n\tS:\u6bcf\u4e2a\u5757\u6709\u591a\u5c11\u5143\u7d20 C:\u5206\u5757\u4e2a\u6570 st/ed:\u6bcf\u4e2a\u5757\u7684\u5de6\u8fb9\u754c\u3001\u53f3\u8fb9\u754c \n\tsum[MAXN]/ma_x[MAXN]/mi_n[MAXN]\u7528\u4e8e\u8bb0\u5f55\u533a\u95f4\u4fe1\u606f \n\t*/ \n\tvoid pretreat()\n\t{\n\t\tS=int(sqrt(double(n)));\n\t\tfor(int i=1;i<=n;i+=S){\n\t\t\tst[++C]=i;\n\t\t\ted[C]=min(i+S-1,n);//\u6709\u53ef\u80fd\u4f1a\u8d8a\u754c\uff08sqrt\u5fc5\u7136\u6709\u7cbe\u5ea6\u8bef\u5dee\uff09 \n\t\t}\n\t\tfor(int i=1;i<=C;i++)\n\t\t\tfor(int j=st[i];j<=ed[i];j++)\n\t\t\t\t{\n\t\t\t\tbelong[j]=i;//\u521d\u59cb\u5316belong \n\t\t\t\t/*\n    //\u533a\u95f4\u64cd\u4f5c  sum[i]+=a[j];\n\t\t\t\tma_x[i]=max(ma_x[i],j);\n\t\t\t\t*/\n\t\t\t\t}\n\t}\n```\n\n\u5176\u6b21\u4fbf\u662f\u533a\u95f4\u4fee\u6539 & \u5355\u70b9\u4fee\u6539\uff1a\u7531\u4e8e\u533a\u95f4\u64cd\u4f5c\u53ea\u80fd\u9488\u5bf9\u4e8e\u67d0\u4e2a\u5df2\u7ecf\u88ab\u5206\u597d\u7684\u5757\uff0c\u6240\u4ee5\u5bf9\u4e8e\u67d0\u4e9b\u4e0d\u5b8c\u6574\u533a\u95f4\u7684\u6539\u52a8\uff0c\u9700\u8981\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u4fee\u6539\uff0c\u8fd8\u6709\u4e00\u70b9\uff0c\u4e3a\u4e86\u5e2e\u52a9\u6211\u4eec\u5bf9\u533a\u95f4\u8baf\u606f\u7684\u6574\u5408\uff0c\u6240\u4ee5\u4f1a\u5f15\u8fdb\u4e00\u4e2a`delta mark`\uff0c\u8bb0\u5f55\u67d0\u4e2a\u533a\u95f4\u6574\u4f53\u7684\u53d8\u5316\u60c5\u51b5\u3002\n\n\u6ce8\u610f\uff1a**\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u5757\u88ab\u7edf\u4e00\u4fee\u6539\uff0c\u624d\u4f1a\u6539\u53d8\u8fd9\u4e2a\u5757\u7684 `delta` \u503c\u3002**\n\n```cpp\n//\u533a\u95f4\u5355\u70b9\u4fee\u6539 \uff0c\u6b64\u5904\u4ee5\u6c42\u533a\u95f4\u548c\u4e3a\u4f8b \n\tinline void updata_single(int x,int k)\n\t{\n\t\ta[x]+=k;\n\t\tsum[belong[x]]+=k;\n\t}\n\t\n\t//\u533a\u95f4\u4fee\u6539\uff0c\u540c\u4e0a\n\tint delta[MAXN];//\u7528\u4e8e\u8bb0\u5f55\u4e00\u4e2a\uff01\u5b8c\u6574\uff01\u533a\u95f4\u7684\u4fee\u6539 \n\tvoid updata_range(int x,int y,int k)\n\t{\n\t    int l=belong[x],r=belong[y];\n\t\tif(l==r&&st[l]==x&&st[r]==y)\n\t\t{delta[l]=k; return ;}//ma_x[]\n\t\t//\u8fd9\u4e2aif\u7eaf\u7cb9\u662f\u4e3a\u4e86\u51cf\u5c11\u5e95\u4e0b\u7684\u8fd0\u7b97\uff0c\u6bd5\u7adf\u5224\u65ad\u53ea\u6709O(1) qwq\n\t\telse\n\t\t{\n\t\t\tfor(int i=x;i<=ed[l];i++)\n\t\t\t\tupdata_single(i,k);//\u5982\u679c\u4e0d\u662f\u5b8c\u6574\u533a\u95f4\uff0c\u5c31\u5355\u70b9\u4fee\u6539 \n\t\t\tif(st[l]>x&&st[r]<y)return ; \n\t\t\t//\u5982\u679c\u67e5\u8be2\u533a\u95f4\u88ab\u67d0\u4e2a\u5757\u5b8c\u5168\u5305\u542b\u4e14\u4e0d\u76f8\u7b49\uff0c\n\t\t\t//\u4e0d\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c \n\t\t\tfor(int i=st[r];i<=y;i++)\n\t\t\t\tupdata_single(i,k);\n\t\t\t//\u5982\u679c\u6240\u67e5\u8be2\u533a\u95f4\u4e0e\u5757\u6709\u4ea4\u96c6\u4e14\u4e0d\u60f3\u7b49\n\t\t\t//\u4e0d\u9700\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c \n\t\t\tfor(int i=l+1;i<r;i++)\n\t\t\t\tdelta[i]+=k;;\n\t\t}\n\t}\n\t\n```\n\n\u7d27\u63a5\u7740\u5c31\u662f\u533a\u95f4\u8be2\u95ee\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u7684 `delta` \u5c31\u6d3e\u4e0a\u7528\u573a\u5566\uff01\n```cpp\n\tint query(int x,int y)//\u4f9d\u7136\u4e3a\u533a\u95f4\u548c \n\t{\n\t\tint l=belong[x],r=belong[y],ans=0;\n\t\tif(l==r){\n\t\t\tfor(int i=x;i<=y;i++)\n\t\t\t\tans+=a[i]+delta[belong[i]];\n\t\t}\n\t\telse{\n\t\t\tfor(int i=x;i<=ed[l];i++)\n\t\t\t\tans+=a[i]+delta[belong[i]];\n\t\t\tfor(int i=l+1;i<r;i++)\n\t\t\t\tans+=sum[i]+delta[i]*(ed[i]-st[i]+1);\n\t\t\t\t//\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u7684O(1)\u8fd0\u7b97 \n\t\t\tfor(int i=st[r];i<=y;i++)\n\t\t\t\tans+=a[i]+delta[belong[i]];\n\t\t}\n\t\treturn ans;\n\t}\n```\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5206\u5757\u7a0b\u5e8f\u6765\u8bf4\uff0c\u671f\u671b\u7684\u65f6\u95f4\u603b\u590d\u6742\u5ea6\u4e3a\uff1a$O(m\\sqrt n)$\uff0c\u5bf9\u4e8e $50000$ \u6765\u8bf4\u5b8c\u5168\u80fd\u8dd1\u5f00\u3002\n\n# \u4e09\u3001\u6811\u72b6\u6570\u7ec4\u6d45\u8c08\n \n## \uff08\u4e00\uff09\u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u6b63\u786e\u91ca\u4e49\n\n\u9996\u5148\u8981\u77e5\u9053\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\uff1a\n\n**\u6811\u72b6\u6570\u7ec4\u7528\u7684\u662f\u6811\u7ed3\u6784\u7684\u601d\u60f3(\u4e5f\u5c31\u662f\u6811\u578b\u903b\u8f91\u7ed3\u6784)\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684\u201c\u6811\u5f62\u7ed3\u6784\u201d**\uff0c\u521d\u5b66\u8005\u4e0d\u8981\u88ab\u5f3a\u884c\u62c9\u5165\u5751\u554a\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u6811\u72b6\u6570\u7ec4\u8ddf\u6811\u5176\u5b9e\u2014\u2014\u2014\u2014\u2014\u2014\u6ca1\u6709\u7279\u522b\u5927\u7684\u5173\u7cfb\uff09\u3002\n\n\u90a3\u5b83\u4e3a\u4ec0\u4e48\u88ab\u53eb\u4f5c\u6811\u72b6\u6570\u7ec4\u5462\uff1f\n\n## \uff08\u4e8c\uff09\u6811\u72b6\u6570\u7ec4\u7684\u5b58\u50a8\u7279\u70b9\n\n\u9996\u5148\u89e3\u91ca\uff0c\u6811\u72b6\u6570\u7ec4\u652f\u6301\u7684\u64cd\u4f5c\uff1a\n\n1\u3001\u533a\u95f4\u548c\u3001\u533a\u95f4\u5f02\u6216\u548c\u3001\u533a\u95f4\u4e58\u79ef\u548c RMQ\uff08**\u663e\u7136\uff0c\u652f\u6301\u7684\u64cd\u4f5c\u90fd\u5177\u6709\u4ea4\u6362\u5f8b\uff0c\u8fd9\u4e5f\u7b97\u662f\u6811\u72b6\u6570\u7ec4\u7684\u4e00\u5927\u7279\u6027\u5427**\uff09\n\n2\u3001\u5355\u70b9\u4fee\u6539\uff08**\u6734\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u7ed3\u6784\u4e0d\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u666e\u53ca\u6210\u533a\u95f4\u4fee\u6539\u7ed3\u6784\u4f46\u6211\u4eec\u5148\u4e0d\u63d0**\uff09\n\n\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528\u524d\u7f00\u548c\u6216\u8005\u5dee\u5206\u6570\u7ec4\u5462\uff1f\n\n\u6211\u4eec\u77e5\u9053\uff0c\u524d\u7f00\u548c\u6570\u7ec4\u7684\u7ef4\u62a4\u662f $O(n)$ \u7684\uff0c\u67e5\u8be2\u3001\u4fee\u6539\u662f $O(1)$ \u7684\u3002\u7136\u800c\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u7ef4\u62a4\u5374\u662f $O(\\log n)$ \u7684\u3002\u5e76\u4e14\u67e5\u8be2\u3001\u4fee\u6539\u4e5f\u662f $O(1)$ \u7684\u2014\u2014\u8fd9\u4fbf\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u4f18\u5316\u3002\n\n\u7b49\u7b49\uff0c$\\log n$\uff1f\u6709\u70b9\u773c\u719f\u8bf6\u3002\u518d\u63d0\u793a\u63d0\u793a\uff0c\u8fd9\u4e2a $\\log$ \u5b9e\u9645\u610f\u4e49\u5176\u5b9e\u662f $\\log$ \u4ee5 $2$ \u4e3a\u5e95\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u5bf9\uff0c\u6ca1\u731c\u9519\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\uff0c\u4e5f\u5c31\u662f\u4e8c\u53c9\u6811\u4e0a\u6570\u636e\u4e4b\u95f4\u7684\u7279\u6b8a\u903b\u8f91\u5173\u7cfb\uff01\n\n\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a i\uff0c\u5176\u5b9e\u9645\u610f\u4e49\u5e94\u8be5\u4e3a\uff1a\n\n**\u7b97\u4e0a\u5176\u672c\u8eab\u7684\u8baf\u606f\uff0c\u603b\u5171\u5b58\u50a8\u4e86 $2^k$ \u4e2a\u5143\u7d20\u7684\u4fe1\u606f\uff0c\u5176\u4e2d $k$ \u8868\u793a $i$ \u5728\u4e8c\u8fdb\u5236\u4e0b\uff0c\u672b\u5c3e\u96f6\u7684\u4e2a\u6570\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8868\u793a\u6700\u5c0f\u7684\u542b 1 \u4f4d\u7684\u4e8c\u8fdb\u5236\u6743\u503c\u2014\u2014\u6362\u53e5\u8bdd\u8bb2\uff0c$2^k$ \u5373\u53ef\u8868\u793a\u6210\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u610f\u4e49\u4e0b\u7684 $i$\uff0c\u4ece\u6700\u672b\u4f4d\u6570 $k+1$ \u4f4d\uff0c\u4fdd\u7559\u8fd9 $k+1$ \u4f4d\u5e76\u5220\u9664 $k+1$ \u4f4d\u4ee5\u5de6\u7684\u6240\u6709\u6570\u4f4d\u4e0a\u7684\u6570\uff0c\u7559\u4e0b\u7684\u65b0\u4e8c\u8fdb\u5236\u6570\u7684\u5b9e\u9645\u5927\u5c0f\u3002**\n\n\u800c\u5bf9\u4e8e\u6bcf\u4e00\u4e2ax\u7684\u6700\u4f4e\u542b\u4e00\u4f4d\uff0c\u5373\u4e0a\u6587\u4e2d\u7684 $2^k$\uff0c\u53ef\u4ee5\u501f\u52a9\u4e00\u4e2a $\\rm lowbit$ \u51fd\u6570\u5b9e\u73b0\u2014\u2014\u800c\u8fd9\u4e2a\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u5f88\u7384\u5b66\u7684\uff1a\n\n```cpp\n\tinline int lowbit(int x)\n\t{\n\t\t//return (x^(x-1))&x;\n\t\treturn x&(-x);\n\t}\n```\n\u4e0a\u6587\u4ee3\u7801\u4e2d\u7ed9\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u800c\u8fd9\u4e24\u79cd\u4e2d\uff0c\u6709\u4e00\u79cd\u662f\u901a\u8fc7\u6570\u5b66+\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u5f97\u51fa\uff0c\u53e6\u4e00\u79cd\u5219\u662f\u901a\u8fc7\u8ba1\u7b97\u673a\u7f16\u7801\u7279\u6027\u5f97\u51fa\u2014\u2014\u6211\u5b9e\u5728\u61d2\u5f97\u8bc1\u4e86\u3002\n\n\uff08\u4e09\uff09\u6811\u72b6\u6570\u7ec4\u7684\u5efa\u7acb\u3001\u7ef4\u62a4\u548c\u67e5\u8be2\n\n\u5efa\u7acb\uff1a\u6b64\u5904\u62ff\u6c42\u533a\u95f4\u548c\u4e3a\u6837\u4f8b\n\n```\nvoid build() \n{\nfor(int i=1;i<=n;i++)       \n{cin>>a[i];tree[i]=i;}//\u4e00\u5f00\u59cb\u5148\u8d4b\u521d\u503c\n}\n```\n\n\u7ef4\u62a4\uff1a\u770b\u6ce8\u91ca\n```cpp\nvoid updata(int x,int k)\n{\n\tfor(;x<=n;x+=lowbit(x))\n\t\ttree[x]+=k;\n//\u6b64\u5904\u53ef\u4ee5\u5982\u662f\u60f3\uff1alowbit\u53d6\u51fa\u7684\u662f\u5f53\u524dx\u7684\u6700\u4f4e\u542b\u4e00\u4f4d\n//\u6743\u503c\u4f4d\uff0c\u76f8\u52a0\u540e\u7b49\u4e8e\u5411\u9ad8\u4f4d\u8fdb\u4f4d\uff0c\u5e76\u4e14\u5df2\u6709\u7684\u6570\u4f4d\u6c38\u8fdc\u4e3a\u96f6\n//\u8fd9\u5c31\u53ef\u4ee5\u63a8\u51fa\uff1a\u6bcf\u5f53x\u503c+=lowbit(x)\u65f6\uff0c\u90fd\u4f1a\u6709\u8fdb\u4f4d\uff0c\u5e76\u4e14\n//\u8fdb\u4f4d\u540e\u7684\u65b0x\u503c\u4e00\u5b9a\u5305\u542b\u6240\u6709\u539f\u6765\u7684x\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e00\u6b65\n//\u5145\u5206\u5730\u5411\u4e0a\u8fdb\u4f4d\uff0c\u8fbe\u5230\u533a\u95f4\u548c\u66f4\u65b0\u7684\u76ee\u7684\u3002 \n}\n```\n\n\u8be2\u95ee\uff1a\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n```cpp\n\tlong long query(int x){\n\t\tint ans;\n\t\tfor(;x;x-=lowbit(x))\n\t\t\tans=ans+tree[x];\n\t\treturn ans;\n\t}\n```\n\n\u6574\u5408\uff1a\u76f8\u51cf\u5373\u53ef\u3002\n\n```cpp\n    inline long long my_union(int x,int y)\n\t{\n\t\treturn query(x)-query(y-1);\n     }\n```\n\n\u56e0\u6b64\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5747\u4e3a\u5355\u6b21 $O(\\log n)$\u3002\n\n\n\n",
        "postTime": 1518470006,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "Senior Data Structure\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u521d\u6b65\u00b7\u8be6\u89e3\u5206\u5757\u601d\u60f3\u4e0e\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u7bc7 **CDQ\u5206\u6cbb** \u7684\u9898\u89e3\uff01\n\nCDQ\u5206\u6cbb\u7684\u57fa\u672c\u601d\u60f3\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a\u628a\u8fd9\u4e9b\u8be2\u95ee\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\uff08\u79bb\u7ebf\uff09\uff0c\u9012\u5f52\u5904\u7406\u76f8\u5bf9\u4e8e\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\u7684\u8be2\u95ee\uff0c\u5728\u8ba1\u7b97\u7b54\u6848\u65f6\uff0c**\u5408\u5e76\u4e24\u4e2a\u5b50\u95ee\u9898\uff08\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\uff09\uff0c\u5373\u8003\u8651\u5de6\u534a\u533a\u95f4\u5185\u7684\u4fee\u6539\u5bf9\u53f3\u534a\u533a\u95f4\u5185\u7684\u8be2\u95ee\u4ea7\u751f\u7684\u5f71\u54cd**\u3002\u4e5f\u5c31\u662f\uff0c\u7528\u5de6\u8fb9\u7684\u5b50\u95ee\u9898\u6765\u5e2e\u52a9\u89e3\u51b3\u53f3\u8fb9\u7684\u5b50\u95ee\u9898\u3002\u56e0\u6b64\uff0cCDQ\u5206\u6cbb\u53ef\u4ee5\u652f\u6301\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u628a\u4e24\u4e2a\u64cd\u4f5c\u62c6\u6210\u4e09\u4e2a\u64cd\u4f5c\uff1a\n1. \u4fee\u6539\u3002\n2. \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c $[l,r]$ \u7684 $[1,l-1]$ \u67e5\u8be2\u524d\u7f00\u548c\u3002\u5728\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u628a\u6b64\u6b21\u67e5\u8be2\u7684\u7ed3\u679c**\u51cf\u53bb**\u5f53\u524d\u524d\u7f00\u548c\u3002\n3. \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c $[l,r]$ \u7684 $[1,r]$ \u67e5\u8be2\u524d\u7f00\u548c\u3002\u5728\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u628a\u6b64\u6b21\u67e5\u8be2\u7684\u7ed3\u679c**\u52a0\u4e0a**\u5f53\u524d\u524d\u7f00\u548c\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6574\u4e2a**\u8be2\u95ee\u5e8f\u5217**\u8fdb\u884cCDQ\u5206\u6cbb\uff0c\u5373\u53ef\u51fa\u89e3\u3002\u76f8\u6bd4\u4e8e\u6811\u72b6\u6570\u7ec4\uff0c\u5e38\u6570\u8f83\u5927\uff0c\u6700\u5927\u7684\u70b9\u8dd1\u4e86540ms\u3002\u82e5\u6709\u4e0d\u7406\u89e3\u7684\u5730\u65b9\u53ef\u81ea\u884c\u5bf9\u7167\u4ee3\u7801\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nstruct Query{\n    int type,id,val;\n    bool operator <(const Query sasa) const {\n        return id==sasa.id?type<sasa.type:id<sasa.id;\n    }\n}a[2000005];\nint qid,ans[2000005];\nint aid=0;\nQuery tmp[2000005];\nvoid CDQ(int l,int r){\n    if(l==r)return ;\n    int mid=(l+r)>>1;\n    CDQ(l,mid);\n    CDQ(mid+1,r);\n    int sum=0,p=l,q=mid+1,o=l;\n    while(p<=mid&&q<=r){\n        if(a[p]<a[q]){\n            if(a[p].type==1)sum+=a[p].val;\n            tmp[o++]=a[p++];\n        }\n        else {\n            if(a[q].type==2)ans[a[q].val]-=sum;\n            if(a[q].type==3)ans[a[q].val]+=sum;\n            tmp[o++]=a[q++];\n        }\n    }\n    while(p<=mid)tmp[o++]=a[p++];\n    while(q<=r){\n        if(a[q].type==2)ans[a[q].val]-=sum;\n        if(a[q].type==3)ans[a[q].val]+=sum;\n        tmp[o++]=a[q++];\n    }\n    for(int i=l;i<=r;i++)a[i]=tmp[i];\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        int t;\n        scanf(\"%d\",&t);\n        a[++qid].type=1;\n        a[qid].id=i;\n        a[qid].val=t;//\u628a\u6700\u521d\u7684N\u4e2a\u6570\u4e5f\u770b\u6210\u4fee\u6539\u64cd\u4f5c\n    }\n    for(int i=1;i<=m;i++){\n        int opt,x,y;\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        if(opt==1){\n            a[++qid].type=1;\n            a[qid].id=x;\n            a[qid].val=y;\n        }\n        else {\n            a[++qid].type=2;\n            a[qid].id=x-1;\n            a[qid].val=++aid;\n            a[++qid].type=3;\n            a[qid].id=y;\n            a[qid].val=aid;\n        }\n    }\n    CDQ(1,qid);\n    for(int i=1;i<=aid;i++)printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1546065721,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "# \u5206\u5757\u5927\u6cd5\n\n## 1.1 \u6982\u5ff5\n\u5206\u5757\u662f\u4e00\u79cd~~\u66b4\u529b~~\u6570\u636e\u7ed3\u6784\u3002\u5206\u5757\u7684\u57fa\u672c\u601d\u60f3\u662f\u628a\u4e00\u4e2a\u6574\u4f53\u6570\u5217\u5206\u6210\u591a\u5757\uff0c\u4f7f\u5f97\u67e5\u8be2\u65f6\u53ef\u4ee5\u8c03\u7528\u5df2\u7ecf\u5904\u7406\u597d\u7684\u6bcf\u5757\u7684\u4fe1\u606f\u3002\u5b83\u7684\u67e5\u8be2\u590d\u6742\u5ea6\u4e00\u822c\u4e3a$ O(\\sqrt{n}) $\u3002\u4fee\u6539\u590d\u6742\u5ea6\u4e0d\u4e00\u5b9a\uff0c\u5728\u8fd9\u4e00\u9898\u4e2d\u4fee\u6539\u590d\u6742\u5ea6\u4e3a$ O(1) $\u3002\n\n## 1.2 \u4e3a\u4f55\u9009\u62e9\u5206\u5757\uff1f\u4f55\u65f6\u4f7f\u7528\u5206\u5757\uff1f\n\u5f53\u7136\u662f\u56e0\u4e3a\u5b83\u6bd4\u8f83\u597d\u60f3\u597d\u5199\u4e86\uff01\u5f53\u9898\u76ee\u4e2d\u51fa\u73b0\u5404\u79cd~~\u50bb\u903c\u6bd2\u7624\u4e00\u822c~~\u6bd4\u8f83\u96be\u4ee5\u5b9e\u73b0\u7684\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u7684\u66f4\u65b0\u64cd\u4f5c\u5747\u9700\u8fdb\u884c\u8f83\u5927\u6539\u52a8\u624d\u53ef\u4f7f\u7528\u65f6\uff0c\u5c31\u662f\u5206\u5757\u6d3e\u4e0a\u7528\u573a\u7684\u65f6\u5019\uff01\n\n~~\u8fd9\u9053\u9898\u597d\u50cf\u66f4\u65b0\u5f88\u597d\u5b9e\u73b0\u554a\uff0c\u4f60\u662f\u4e0d\u662f\u5728\u6253\u81ea\u5df1\u7684\u8138\u554a?~~\n\n## 2.1 \u4e00\u5207\u7684\u5f00\u59cb\n\u8981\u5206\u5757\uff0c\u9996\u5148\u8981\u786e\u5b9a\u5757\u7684\u5927\u5c0f\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5757\u7684\u5927\u5c0f\u90fd\u4e3a$\\sqrt{n}$\u3002\u8fd9\u6837\u5927\u5c0f\u7684\u5757\u53ef\u4ee5\u4fdd\u8bc1\u6574\u4e2a\u5e8f\u5217\u88ab\u5206\u6210$\\sqrt{n}$\u5757\u3002\u8fd9\u6837\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230\u5e73\u5747\u3002\n\n\u5206\u5757\u7b97\u6cd5\u4e2d\u9700\u8981\u8bb0\u5f55\u7684\u4fe1\u606f\u6709\uff1a\n```\nint sum[maxn];//\u4e00\u4e2a\u5757\u7684\u548c\nint l[maxn];//\u4e00\u4e2a\u5757\u7684\u5de6\u7aef\u70b9\uff08\u8d77\u59cb\u70b9\uff09\nint r[maxn];//\u4e00\u4e2a\u5757\u7684\u53f3\u7aef\u70b9\uff08\u7ec8\u7ed3\u70b9\uff09\nint a[maxn];//\u539f\u6570\u7ec4\nint belong[maxn];//\u7b2ci\u4e2a\u5143\u7d20\u5c5e\u4e8e\u7b2cbelong[i]\u4e2a\u5757\nint block,num;//block\u8868\u793a\u5757\u7684\u5927\u5c0f\uff0cnum\u8868\u793a\u5757\u7684\u6570\u91cf\u3002\n```\n\n\u5206\u5757\u7684build\u51fd\u6570\u4ee3\u7801\u4e3a\uff1a\n```\nvoid build()\n{\n    block=sqrt(n);//\u5757\u7684\u5927\u5c0f\u662f\u6839\u53f7n\n    num=n/block;if (n%block) num++;//\u6709\u53ef\u80fdn\u4e0d\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u8fd9\u65f6\u5757\u6570\u9700\u8981\u52a0\u4e00\n    for(int i=1;i<=num;i++)\n    {\n        l[i]=(i-1)*block+1;r[i]=i*block;\n    }//\u5bf9\u4e8e\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u5904\u7406\n    for(int i=1;i<=n;i++) belong[i]=(i-1)/block+1;\n    r[num]=n;//\u6700\u540e\u4e00\u4e2a\u5757\u7684\u53f3\u7aef\u70b9\u4e00\u5b9a\u4e3an\n    for(int i=1;i<=num;i++)\n        for(int j=l[i];j<=r[i];j++)\n            sum[i]+=a[j];//\u9884\u5904\u7406\u51fa\u6240\u6709\u5757\u7684\u548c\n}\n```\n\n## 2.2 \u66f4\u65b0\u64cd\u4f5c\n\u5f88\u7b80\u5355\uff0c\u65e0\u987b\u8d58\u8ff0\uff0c\u57fa\u672c\u4e0a\u4ee3\u7801\u4e00\u770b\u5c31\u61c2\u3002\n```\ninline void updata(int x,int y)//\u7b2cx\u4e2a\u5143\u7d20\u52a0\u4e0ay\n{\n    a[x]+=y;\n    sum[belong[x]]+=y;//\u7b2cx\u4e2a\u5143\u7d20\u6240\u5728\u7684\u5757\u7684\u603b\u548c\u4e5f\u8981\u52a0\u4e0ay\n}\n```\n\n## 2.3 \u67e5\u8be2\u64cd\u4f5c\n\u8fd9\u57fa\u672c\u4e0a\u662f\u5206\u5757\u6700\u96be\u7684\u70b9\u3002\u4f46\u5b9e\u9645\u4e5f\u5f88\u7b80\u5355\u3002\n\n\u67e5\u8be2\u5171\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n### A. \u533a\u95f4\u88ab\u4e00\u4e2a\u5757\u5b8c\u6574\u5305\u542b\n\u76f4\u63a5\u66b4\u529b\u6c42\u89e3\u3002\u56e0\u4e3a\u5757\u7684\u5927\u5c0f\u6700\u5927\u4e3a$\\sqrt{n}$\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a$O(\\sqrt{n})$\u3002\n```\nif (belong[x]==belong[y])\n{\n    for(int i=x;i<=y;i++) ans+=a[i];\n    return ans;\n}\n```\n\n### B. \u533a\u95f4\u6a2a\u8de8\u591a\u4e2a\u5757\n\u8fd9\u662f\u6211\u4eec\u8bb2\u8ff0\u7684\u91cd\u70b9\u3002\u8bf7\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n![\u67e5\u8be2\u533a\u95f4](https://cdn.luogu.com.cn/upload/pic/16820.png)\n\n\u5982\u56fe\uff0c\u6211\u4eec\u9700\u8981\u67e5\u8be2x\u81f3y\u7684\u533a\u95f4\u548c\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u66b4\u529b\u6c42\u51fax\u5230\u5b83\u6240\u5c5e\u7684\u5757\u7684\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u548c\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![\u4e0a\u8ff0\u64cd\u4f5c\u5373\u4e3a\u66b4\u529b\u6c42\u89e3\u56fe\u4e2d\u9ed1\u7bad\u5934\u5230\u7ea2\u7bad\u5934\u4e4b\u95f4\u7684\u533a\u95f4\u548c](https://cdn.luogu.com.cn/upload/pic/16827.png)\n\n\u4e0a\u8ff0\u64cd\u4f5c\u5373\u4e3a\u66b4\u529b\u6c42\u89e3\u56fe\u4e2d\u9ed1\u7bad\u5934\u5230\u7ea2\u7bad\u5934\u4e4b\u95f4\u7684\u533a\u95f4\u548c\u3002\u4ee3\u7801\u5982\u4e0b\n\uff1a\n```\nfor(int i=x;i<=r[belong[x]];i++) ans+=a[i];\n```\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/16830.png)\n\n** \u4ecex\u6240\u5c5e\u7684\u4e0b\u4e00\u4e2a\u5757\u5f00\u59cb\uff0c\u5230y\u4e4b\u524d\u7684\u4e00\u4e2a\u5757\u7684\u533a\u95f4\u5185\uff0c\u6240\u6709\u5757\u90fd\u662f\u5b8c\u6574\u7684 **\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528\u4e4b\u524d\u5904\u7406\u51fa\u6765\u7684\u5757\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u5566\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nfor(int i=belong[x]+1;i<=belong[y]-1;i++) ans+=sum[i];\n```\n\u7136\u540e\u91cd\u590d\u7c7b\u4f3c\u5f00\u59cb\u7684\u64cd\u4f5c\uff0c\u66b4\u529b\u6c42\u89e3\u9014\u4e2d\u84dd\u7bad\u5934\u81f3y\u90a3\u4e00\u6bb5\u5373\u53ef\u3002\n```\nfor(int i=l[belong[y]];i<=y;i++) ans+=a[i];\n```\n\u6240\u4ee5\u5206\u5757\u4e2d\u67e5\u8be2\u7684\u51fd\u6570\u90e8\u5206\u5982\u4e0b\uff1a\n```\ninline int query(int x,int y)\n{\n    int ans=0;\n    if (belong[x]==belong[y])\n    {\n        for(int i=x;i<=y;i++) ans+=a[i];\n        return ans;\n    }\n    for(int i=x;i<=r[belong[x]];i++) ans+=a[i];\n    for(int i=belong[x]+1;i<=belong[y]-1;i++) ans+=sum[i];\n    for(int i=l[belong[y]];i<=y;i++) ans+=a[i];\n    return ans;\n}\n```\n\n## 3.1 \u5b8c\u6574code\n\u5206\u5757\u7684\u4ee3\u7801\u8fd8\u662f\u5f88\u597d\u5199\u7684\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u9898\u6570\u636e\u6709\u70b9\u5927\uff0c\u6240\u4ee5\u8981\u7528\u8bfb\u4f18+\u5185\u8054\u5361\u5e38\u8fc7\u3002\n```\n#include<bits/stdc++.h>\n#define maxn 500007\nusing namespace std;\nint sum[maxn],r[maxn],l[maxn],a[maxn],belong[maxn],block,num,n,m;\ninline void write(int x)\n{\n    if(x<0) x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\ninline int read()\n{\n    int x=0,f=1;char ch;\n    for(;!isdigit(ch);ch=getchar()) f=ch=='-'?-1:1;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n    return x*f;\n}\ninline int query(int x,int y)\n{\n    int ans=0;\n    if (belong[x]==belong[y])\n    {\n        for(int i=x;i<=y;i++) ans+=a[i];\n        return ans;\n    }\n    for(int i=x;i<=r[belong[x]];i++) ans+=a[i];\n    for(int i=belong[x]+1;i<=belong[y]-1;i++) ans+=sum[i];\n    for(int i=l[belong[y]];i<=y;i++) ans+=a[i];\n    return ans;\n}\ninline void updata(int x,int y)\n{\n    a[x]+=y;\n    sum[belong[x]]+=y;\n    //for(int i=1;i<=num;i++) printf(\"l: %d,r: %d,sum: %d\\n\",l[i],r[i],sum[i]);\n    //putchar('\\n');\n}\ninline void build()\n{\n    block=sqrt(n);\n    num=n/block;if (n%block) num++;\n    for(int i=1;i<=num;i++)\n    {\n        l[i]=(i-1)*block+1;r[i]=i*block;\n    }\n    for(int i=1;i<=n;i++) belong[i]=(i-1)/block+1;\n    r[num]=n;\n    for(int i=1;i<=num;i++)\n        for(int j=l[i];j<=r[i];j++)\n            sum[i]+=a[j];\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n    {\n        a[i]=read();\n    }\n    build();\n    //for(int i=1;i<=num;i++) printf(\"l: %d,r: %d,sum: %d\\n\",l[i],r[i],sum[i]);\n    for(int i=1;i<=m;i++)\n    {\n        int mode=read(),x=read(),y=read();\n        if (mode==1) updata(x,y);\n        else\n        {\n            write(query(x,y));\n            putchar('\\n');\n        }\n    }\n    return 0;\n}\n```\n\u5c31\u8fd9\u4e48\u591a\u5566\u3002\u6bd4\u8d5b\u4e34\u8fd1\uff0c\u591a\u5199\u70b9\u9898\u89e3\u6512RP\u3002* Feather-Sea *\u795d\u60a8\u5728\u6d1b\u8c37\u597d\u8fd0\u8fde\u8fde\uff01",
        "postTime": 1522927211,
        "uid": 41953,
        "name": "\u5188\u5d0e\u68a6\u7f8e",
        "ccfLevel": 0,
        "title": "\u5206\u5757\u5927\u6cd5"
    },
    {
        "content": "**\u6811\u72b6\u6570\u7ec4** \u662f\u4ec0\u4e48\u5462\uff1f\n\u5176\u5b9e\u5c31\u662f\u4e00\u68f5\u957f\u6b6a\u7684\u7ebf\u6bb5\u6811\u5427 \u5176\u4e2dc[]\u6570\u7ec4\u8868\u793a\u81ea\u5df1\u6240\u7ba1\u8f96\u7684a[]\u6570\u7ec4\u7684\u6570\u7684\u548c \u6bd4\u5982 \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765 c[4]=a[1]+a[2]+a[3]+a[4]; c[6]=c[5]+c[6];\n\n\u7136\u540e\u6211\u4eec\u770b\u4e00\u4e0b4\u548c6\u7684\u4e8c\u8fdb\u5236\u6570 4 ->100   6->110 \u6211\u4eec\u53d1\u73b0 \u4e8c\u8fdb\u5236\u7684\u6700\u4f4e\u4f4d\u76841\u8f6c\u6210\u5341\u8fdb\u5236\u540e\uff08\u6211\u4eec\u8bbe\u8f6c\u6210\u5341\u8fdb\u5236\u540e\u662fx\uff09 \u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u6240\u7ba1\u8f96\u7684\u4e2a\u6570 \u5373c[4]\u7ba14\u4e2a c[6]\u7ba12\u4e2a \u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u4ed4\u7ec6\u770b\u4e00\u4e0b\u8fd9\u4e2a\u56fe \u770b\u4e00\u4e0b\u6bcf\u4e2a c[]\u6570\u7ec4\u7ba1\u8f96\u7684\u7279\u70b9.........\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2ac[]\u7ba1\u8f96\u7684\u6570\u90fd\u662f\u8fde\u7eed\u7684 \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u8bf4 \u6bcf\u4e2ac[]\u7ba1\u4ece\u81ea\u5df1\u5f00\u59cb\u5f80\u524dx\u4e2a\u8fde\u7eed\u7684\u6570 \uff08\u55ef...\u610f\u5473\u7740\u641c\u4e86\u4e00\u4e2ac[]\u5c31\u7b49\u4e8e\u641c\u4e86x\u4e2aa[]\uff09 \n![](https://cdn.luogu.com.cn/upload/pic/32832.png)\n\u90a3\u4e48\u53ef\u4ee5\u770b\u51fa\u6765 \u8fd9\u4e2ax\u975e\u5e38\u91cd\u8981 \u90a3\u4e48\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u8f6c\u5341\u8fdb\u5236\u600e\u4e48\u7b97\u5462\uff1f\n\n\u4ee3\u7801\u5728\u8fd9\u91cc\uff1a\n\n```cpp\nlong long lowbit(int x)\n{\nreturn x&-x;\n}\n```\n\u5177\u4f53\u89e3\u91ca\uff0c\u9700\u8981\u5229\u7528\u8ba1\u7b97\u673a\u5b58\u50a8\u539f\u7406\u7684\u8865\u7801\u7684\u76f8\u5173\u77e5\u8bc6\n\u4e8c\u8fdb\u5236\u5b58\u50a8\uff1f\n\u539f\u7801\u2192\u53cd\u7801\u2192\u8865\u7801\uff1f\n\u4f4d\u8fd0\u7b97\uff1f\n\n\u6211\u4eec\u6709\u524d\u9762\u7684\u94fa\u57ab\u5f88\u5bb9\u6613\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff1a\u8282\u70b9\u7f16\u53f7+\u533a\u95f4\u957f\u5ea6=\u7236\u4eb2\u7f16\u53f7\n\n\n\n------------\n\u6839\u636e\u8fd9\u4e9b\u90a3\u4e48\u8fd9\u4e2a \u6811\u72b6\u6570\u7ec4\u4e00\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\n\n\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\n\n1.\u5728\u7b2cx\u4e2a\u6570\u4e0a\u52a0k\n2.\u6c42[x,y]\u533a\u95f4\u7684\u548c\n\n1.\u8981\u5c06a[x]+=w\uff0c\u5c31\u8981\u5728c[]\u4e2d\u6240\u6709\u8986\u76d6\u5230x\u7684\u4f4d\u7f6e\u5168\u90e8\u52a0\u4e0aw ,\u7b2c\u4e00\u4e2a\u8986\u76d6x\u7684\u6070\u597d\u5c31\u662fc[x],\u8282\u70b9\u7f16\u53f7+\u533a\u95f4\u957f\u5ea6=\u7236\u4eb2\u7f16\u53f7\n\u90a3\u5c31\u4ecex\u5f00\u59cb\uff0c\u6bcf\u6b21x+=lowbit(x)\u5411\u4e0a\u722c\u5c31\u597d\u4e86\n2.\u6c42[x,y]\u7684\u548c\uff0c\u53ef\u4ee5\u7528[1,y]\u7684\u548c\u51cf\u6389[1\uff0cx-1]\u7684\u548c\uff1b\n\u4f8b\u5982\u6c42[1,7]\u7684\u548c \u90a3\u4e48ans=c[4]+c[6]+c[7]\n\n\u6211\u4eec\u4ecec[7]\u5f00\u59cb\uff0c\u9996\u5148\u4f7fans+=c[7]\n\u7531\u4e8ec[7]\u5305\u542b\u4e86\u4e00\u6bb5\u533a\u95f4\u7684\u603b\u548c\uff0c\u6211\u4eec\u4ee47\u51cf\u53bblowbit(7)\uff0c\u5f97\u52306\uff0c\u63a5\u4e0b\u6765\u53ea\u8981\u6c42a[1..6]\n\u540c\u6837\uff0cans+=c[6]\n6-lowbit(6)=4 \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u76f4\u5230\u4f4d\u7f6e\u53d8\u4e3a0\u3002\n\n\u90a3\u4e48 \u4ee3\u7801\u5c31\u597d\u770b\u591a\u4e86\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint const maxn=500005;\nint n,m,p,x,y;\nlong long a,c[maxn];\nlong long lowbit(int x)//lowbit\u662f\u6c42\u5f97\u533a\u95f4\u8303\u56f4 \n{\nreturn x&-x;\n}\nvoid add(int u,int v)\n{\nfor(int i=u;i<=n;i+=lowbit(i))\nc[i]+=v;\n}//\u5728u\u4f4d\u7f6eadd\u4e0av  \u4ece\u8d4b\u503c\u5904\u5f80\u4e0a\u4fee\u6539 u+lowbit(u) \nlong long sum(int u)\n{\nint ans=0;\nfor(int i=u;i>0;i-=lowbit(i))\nans+=c[i];\nreturn ans;\n}//\u4ece\u672b\u5f00\u59cb\u5f80\u524d\u627e \u6bcf\u6b21\u52a0\u4e0a\u81ea\u5df1\u6240\u7ba1\u8f96\u7684\u6570\n//\u6bd4\u5982\u641c\u7d22sum(7)\u5219 sum=c[7]+c[6]+c[4] \nint main()\n{\nscanf(\"%d %d\",&n,&m);\nfor(int i=1;i<=n;i++)\n{\n  scanf(\"%lld\",&a);\n  add(i,a);\n}\nfor(int i=1;i<=m;i++)\n{\n  scanf(\"%d%d%d\",&p,&x,&y);\n  if(p==1)\n  {\n   add(x,y);\n  }\n  if(p==2)\n  {\n   printf(\"%lld\\n\",sum(y)-sum(x-1));\n  }\n}\nreturn 0;\n}\n```\n\u4f9d\u4f9d\u4e0d\u820d\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3.......(*^\u25bd^*)",
        "postTime": 1536920739,
        "uid": 87299,
        "name": "\u4f55\u5176\u6240\u5e78",
        "ccfLevel": 0,
        "title": "\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "\u81ea\u5df1\u5199\u5e93\u7684\u65f6\u5019\u65e0\u804a\uff0c\u60f3\u5c01\u88c5\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u8d77\u6765\uff0c\u4f46\u662f\u5199\u7740\u5199\u7740\u6211\u5c31\u611f\u89c9\u4e0d\u8212\u670d\uff0c\u4ee3\u7801\u91cc\u4f1a\u51fa\u73b0\u5f88\u591a\u7c7b\u4f3c\u4e8e\n```\na.add(1);\na.get_sum(1,3);\n```\n\u8fd9\u6837\u7684\u4e1c\u897f\u3002\u6211\u5c31\u89c9\u5f97\u603b\u50cf\u662f\u5728\u5199Java\u4e00\u6837\uff0c\u6839\u672c\u4e0d\u50cf\u662f\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\u6211\u60f3\u8981\u6211\u7684\u6570\u7ec4\u80fd\u591f\u8fd9\u4e48\u73a9\n```\nvoid test(){\n\ttree_array<int>a(10);//\u5b9a\u4e49\u4e00\u4e2aint\u6570\u7ec4\uff0c\u6700\u591a\u8bbf\u95eea[10]\n\ta[2]=3;//\u8d4b\u503c\n\tint b=a[2];//\u4e5f\u53ef\u4ee5\u8bfb\u53d6\n\ta[3]+=a[2][5];//a[2][5]\u8868\u793aa.get_sum(2,5)\uff0c\u533a\u95f4\u67e5\u8be2\n}\n```\n\u4e8e\u662f\u5c31\u8bde\u751f\u4e86\u8fd9\u4e2a\u75af\u72c2\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u8fd9\u4e2a\u4e1c\u897f\n```#include<cstdio>\ntemplate < typename data_type >\n//\u6570\u7ec4\u7c7b\u578b\u4e3adata_type\uff0c\u8bf7\u4f20\u5165\u4e00\u4e2a\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u7c7b\u578b \nclass tree_array{\n\tprivate:\n\t\tstatic int lowbit(int x){\n\t\t\treturn x&-x;\n\t\t}\n\t\tclass iterator{//\u7528\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5bf9\u8c61\u6765\u5b8c\u6210\u5404\u79cd\u9ed1\u79d1\u6280 \n\t\t\tprivate:\n\t\t\t\ttree_array *arr;//\u4fdd\u5b58\u8fed\u4ee3\u5668\u6307\u5411\u7684\u6570\u7ec4 \n\t\t\t\tint n;//\u4fdd\u5b58\u8fed\u4ee3\u5668\u6307\u5411\u7684\u4f4d\u7f6e \n\t\t\tpublic:\n\t\t\t\titerator(tree_array *arr_,int n_):arr(arr_),n(n_){\n\t\t\t\t}\n\t\t\t\toperator const data_type(){//\u76f4\u63a5\u8fd4\u56de\u6570\u7ec4\u7684\u503c\uff0c\u4f46\u4e0d\u5141\u8bb8\u4fee\u6539 \n\t\t\t\t\treturn arr->data[n];\n\t\t\t\t}\n\t\t\t\tdata_type operator[](int n_){//\u91cd\u8f7d\u8fed\u4ee3\u5668\u7684[]\u8fd0\u7b97\u7b26\uff0c\u4ee5\u5b8c\u6210\u533a\u95f4\u67e5\u8be2 \n\t\t\t\t\treturn arr->get_sum(n,n_);\n\t\t\t\t}\n\t\t\t\tdata_type operator+=(data_type x){ \n\t\t\t\t\tarr->add(n,x);\n\t\t\t\t\treturn arr->data[n];\n\t\t\t\t}\n\t\t\t\tdata_type operator=(data_type x){//\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u4ee5\u91cd\u8f7d-=,*=,/=,%=\u7b49\u8fd0\u7b97\u7b26 \n\t\t\t\t\tarr->add(n,x-arr->data[n]);\n\t\t\t\t\treturn arr->data[n];\n\t\t\t\t}\n\t\t};\n\t\tdata_type *data;//\u50a8\u5b58\u539f\u6570\u7ec4\uff0c\u4e3b\u8981\u7528\u4e8e\u652f\u6301\u8fed\u4ee3\u5668\u7684\u8d4b\u503c\u64cd\u4f5c \n\t\tdata_type *sum;//\u50a8\u5b58\u6811\u72b6\u6570\u7ec4 \n\t\tint size;\n\t\tvoid add(int pos,data_type data_){//\u5e38\u89c4\u64cd\u4f5c \n\t\t\tdata[pos]+=data_;\n\t\t\twhile(pos<=size){\n\t\t\t\tsum[pos]=sum[pos]+data_;\n\t\t\t\tpos+=lowbit(pos);\n\t\t\t}\n\t\t}\n\t\tdata_type get_sum(int begin,int end){//\u5e38\u89c4\u64cd\u4f5c \n\t\t\tdata_type ret=0;\n\t\t\twhile(end){\n\t\t\t\tret=ret+sum[end];\n\t\t\t\tend-=lowbit(end);\n\t\t\t}\n\t\t\t--begin;\n\t\t\twhile(begin){\n\t\t\t\tret=ret-sum[begin];\n\t\t\t\tbegin-=lowbit(begin);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\tpublic:\n\t\ttree_array(int size_,data_type zero):\n\t\t//\u6ce8\u610f\u4f20\u51650\u6765\u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u76840\u662f\u6307\u6ee1\u8db30+0=0\u7684data_type\u5bf9\u8c61 \n\t\tdata(new data_type[size_+1]),sum(new data_type[size_+1]),size(size_){\n\t\t\tfor(int i=0;i<=size;i++){\n\t\t\t\tsum[i]=data[i]=zero;\n\t\t\t}\n\t\t}//\u591a\u5f00\u4e00\u4f4d\uff0c\u800c\u4e14\u4e0d\u80fd\u8bbf\u95ee\u6570\u7ec4\u7684\u7b2c0\u4f4d\uff0c\u60f3\u5fc5\u5927\u5bb6\u90fd\u61c2\n\t\t/*\u5173\u4e8e\u5b89\u5168\u4f7f\u7528\u7684\u90e8\u5206\uff0c\u65e2\u7136\u662f\u5728\u6d1b\u8c37\u7684\u673a\u5b50\u4e0a\u8dd1\uff0c\u800c\u4e14\u8c03\u7528\u90fd\u662f\u81ea\u5df1\uff0c\u8fd9\u91cc\u5c31\u6ce8\u91ca\u6389\u4e86\n\t\ttree_array(const tree_array &arr):\n\t\tdata(new data_type[arr.size+1]),sum(new data_type[arr.size+1]),size(arr.size){\n\t\t\tfor(int i=0;i<=size;i++){\n\t\t\t\tdata[i]=arr.data[i];\n\t\t\t\tsum[i]=arr.sum[i];\n\t\t\t}\n\t\t}\n\t\ttree_array operator=(const tree_array &arr){\n\t\t\tdelete data,sum;\n\t\t\tdata=new data_type[arr.size+1];\n\t\t\tsum=new data_type[arr.size+1];\n\t\t\tsize=arr.size;\n\t\t\tfor(int i=0;i<=size;i++){\n\t\t\t\tdata[i]=arr.data[i];\n\t\t\t\tsum[i]=arr.sum[i];\n\t\t\t}\n\t\t}\n\t\t~tree_array(){\n\t\t\tdelete data,sum;\n\t\t}\n\t\t*/\n\t\titerator operator[](int n){//\u8fd4\u56de\u4e00\u4e2a\u6b64\u6570\u7ec4\u7b2cn\u4f4d\u7684\u8fed\u4ee3\u5668 \n\t\t\treturn iterator(this,n);\n\t\t}\n\t\t/*\u60f3\u8981cin\u8f93\u5165\u7684\u5c31\u91cd\u8f7d\u8fd9\u4e2a\u8fd0\u7b97\u7b26 \n\t\tfriend std::istream &operator>>(std::istream &in,iterator it){\n\t\t\tdata_type data_;\n\t\t\tin>>data_;\n\t\t\tit.operator=(data_);\n\t\t\treturn in;\n\t\t}\n\t\t*/\n};\nint main(){\n\tint n,m;\n\tint p1,p2,p3;\n\tscanf(\"%d%d\",&n,&m);\n\ttree_array<long long>a(n,0);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&p1);//\u5e76\u4e0d\u80fd\u76f4\u63a5scanf\uff0c\u4f46\u662f\u53ef\u4ee5\u91cd\u8f7d\u6d41\u8f93\u5165 \n\t\ta[i]=p1;\n/*\na[i]\u8fd4\u56de\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\n\u7531\u4e8e\u8fed\u4ee3\u5668\u91cd\u8f7d\u4e86\u8d4b\u503c\u8fd0\u7b97\u7b26\n\u5c31\u53ef\u4ee5\u76f4\u63a5\u5b8c\u6210\u6811\u72b6\u6570\u7ec4\u7684\u4fee\u6539\n*/ \n\t}\n\tfor(int i=0;i<m;i++){\n\t\tscanf(\"%d%d%d\",&p1,&p2,&p3);\n\t\tif(p1==1){\n\t\t\ta[p2]+=p3;\n\t\t}else{\n\t\t\tprintf(\"%lld\\n\",a[p2][p3]);\n/*\n\u539f\u7406\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5229\u7528\u4e86\u8fed\u4ee3\u5668\u7684[]\u8fd0\u7b97\u7b26,\u5b8c\u6210\u533a\u95f4\u67e5\u8be2\n\u4e5f\u53ef\u4ee5\u7528(long long)a[p2]\u7684\u65b9\u5f0f\u5355\u70b9\u67e5\u8be2 \n\u6bd4\u5982\n\nprintf(\"%lld\",(long long)a[p2]);\nlong long l=a[p2]; \n*/ \n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u6709\u6728\u6709\u611f\u89c9\u8fd9\u624d\u662f\u4e00\u4e2a\u6570\u7ec4\u8be5\u6709\u7684\u5199\u6cd5\u3002\u6709\u5173const\u7684\u5199\u6cd5\u8fd8\u6ca1\u6709\u5b8c\u5584\uff08\u6bd5\u7adf\u662f\u4e00\u4e24\u4e2a\u5c0f\u65f6\u641e\u51fa\u6765\u7684\u534a\u6210\u54c1\uff09\uff0c\u6709\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e0b\u5b8c\u6574\u7684\u5c01\u88c5\u7c7b\u3002",
        "postTime": 1538965099,
        "uid": 81705,
        "name": "\u5bc6\u671f\u671b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "#### \u672c\u4eba\u6811\u72b6\u6570\u7ec4\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff08~~\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6559\u7a0b~~\uff09\n\u9898\u76ee\u94fe\u63a5\uff1a[Link](https://www.luogu.org/problemnew/show/P3374)\n## 1.\u601d\u8def\n\n~~\u770b\u4e00\u4e0b\u9898\u76ee\u540d\u5b57\u4f60\u5c31\u77e5\u9053\u4e86~~   \n\u5176\u5b9e\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u88f8\u9898\uff08 _~~\u4e5f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684~~_   \n\u4e0a\u56fe\uff1a\n\n![\u6811\u72b6\u6570\u7ec4](https://res.jisuanke.com/img/upload/20180503/a0d62ec5fe7ada70fb95cea10e943b6642ab1b41.png)\n\u5176\u4e2dlowbit\u6307\uff1a\n> **lowbit \u4e3a\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u53f3\u8fb9 11 \u6240\u5bf9\u5e94\u7684\u503c**   \n> \u6216\u8005\u8bf4\uff1a   \n> **lowbit=$2^k$,k\u4e3a\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u672b\u5c3e0\u7684\u4e2a\u6570** \n\nlowbit\u770b\u8d77\u6765\u4e0d\u597d\u6c42\uff0c**\u4f46\u662f**\uff0c\u6709\u4e00\u79cd\u7b80\u5355\u7248\u7684~~\u65e0\u8111~~\u64cd\u4f5c\uff1a\n```\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\n```\n~~\u4e3a\u4ec0\u4e48\u4e0d\u65e9\u70b9\u8bf4~~\n\n   \u6811\u72b6\u6570\u7ec4\u5c31\u662f\u7531lowbit\u5206\u6bb5\u7684\u4e00\u79cd~~\u5b9e\u7528\u7684~~\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ba1\u4e00\u4e2a\u533a\u95f4\uff0c\u5b58\u7684\u662f\u8fd9\u4e2a\u8282\u70b9\u7ba1\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\n## 2:\u5206\u6790\n\u770b\u5230\u9898\u76ee\u7684\u8981\u6c42\uff1a\n> 1.\u5c06\u67d0\u4e00\u4e2a\u6570\u52a0\u4e0ax\n\n> 2.\u6c42\u51fa\u67d0\u533a\u95f4\u6bcf\u4e00\u4e2a\u6570\u7684\u548c\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u652f\u6301\u4fee\u6539\u548c\u67e5\u8be2\u64cd\u4f5c\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u8bbe\u539f\u6570\u7ec4\u4e3as\uff0c\u6811\u72b6\u6570\u7ec4\u4e3ac\n\n### \u4fee\u6539\uff1a\n\u4fee\u6539\u5373\u5728x\u4f4d\u7f6e\u52a0\u4e0ad   \n\u60f3\u60f3\u770b\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u7684\u662f\u5b83\u7ba1\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4fee\u6539\u6700\u5e95\u5c42\u7684\u4e00\u4e2a\u70b9\u7684\u503c\uff0c\u53d7\u5f71\u54cd\u7684\u662f\u4e0d\u662f\u4e00\u6761\u94fe\uff1f\n\n\u4fee\u6539\u8282\u70b911\u7684\u503c\uff08\u7ea2\u7ebf\u5373\u4e3a\u53d7\u5f71\u54cd\u7684\uff09\n![\u6811\u72b6\u6570\u7ec42](https://cdn.luogu.com.cn/upload/pic/62210.png)\n\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa\u6b64\u4ee3\u7801\uff1a\n```cpp\nvoid add(int x,int d)\n{\n\ts[x]+=d;\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\tc[i]+=d;\n}\n```\n### \u67e5\u8be2\uff1a\n\n\u67e5\u8be2\u6bd4\u8f83\u590d\u6742\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u533a\u95f4[L,R]\u7684\u548c     \n\u90a3\u6211\u4eec\u53ef\u4ee5\u7531[1,r]\u7684\u548c-[1,L]\u7684\u548c\u6c42\u51fa\u6b21\u7ed3\u679c    \n\u95ee\u9898\u5c31\u5728\u4e8e\u600e\u4e48\u6c42[1,X]\u7684\u548c\n\n\u5176\u5b9e\u5f88\u7b80\u5355\n> 1. \u8bbesum\u4e3a\u548c\u503c\n> 2. sum\u52a0\u4e0a\u533a\u95f4[X-lowbit(X)**+1**,X]\u7684\u503c\uff08\u8bb0\u4f4f\u4e00\u5b9a\u8981+1\uff09\n> 3. x=X-lowbit(X)\n> 4. \u5982\u679c(x==0)\u5219\u7ed3\u675f\uff0c\u5426\u5219\u56de\u5230\u6b65\u9aa42\n\n~~\u6ca1\u6bdb\u75c5~~      \n\u6240\u4ee5\u4ee3\u7801\u6765\u4e86\uff1a\n```\nint sum(int x)\n{\n\tint ans=0;\n\tfor(int i=x;i>0;i-=lowbit(i))\n\t\tans+=c[i];\n\treturn ans;\n}\n```\n## 3.\u6574\u4f53\u4ee3\u7801\n\u6811\u72b6\u6570\u7ec4\u5b8c\u5168\u53ef\u4ee5\u88ab\u5c01\u88c5\u4e3a\u4e00\u4e2a\u7c7b   \n\u5728\u8fd9\u91cc\u6211\u5b9e\u73b0\u4e00\u4e0b\u3002\n\n\u5176\u4ed6\u4ee3\u7801\uff1a   \n```\n//\u521d\u59cb\u5316\nvoid init()\n{\n\tmemset(c,0,sizeof(c));\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i-lowbit(i)+1;j<=i;j++)\n\t\t\tc[i]=c[i]+s[j];\n}\n```\n```\n//\u8c03\u8bd5\u7528\u7684\u8f93\u51fa\nvoid print()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",s[i]);\n\tcout <<\"     \";\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",c[i]);\n\tcout << endl;\n}\n```\n\n### \u6574\u4f53 ~~(\u7ec8\u4e8e\u8981\u5199\u5b8c\u4e86\u554a\u554a\u554a\uff09~~\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Maxn=500005;\nint n,s[Maxn],m;\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\nstruct node\n{\n\tint c[Maxn];\n\tvoid add(int x,int d)//\u4fee\u6539\n\t{\n\t\ts[x]+=d;\n\t\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\t\tc[i]+=d;\n\t}\n\tint sum(int x)//\u67e5\u8be2\n\t{\n\t\tint ans=0;\n\t\tfor(int i=x;i>0;i-=lowbit(i))\n\t\t\tans+=c[i];\n\t\treturn ans;\n\t}\n\tvoid init()//\u521d\u59cb\u5316\n\t{\n\t\tmemset(c,0,sizeof(c));\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=i-lowbit(i)+1;j<=i;j++)\n\t\t\t\tc[i]=c[i]+s[j];\n\t}\n\tvoid print()//\u7528\u6765\u8c03\u8bd5\u7684\u8f93\u51fa\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",s[i]);\n\t\tcout <<\"     \";\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tprintf(\"%d \",c[i]);\n\t\tcout << endl;\n\t}\n}a;\nint main()\n{\n\tcin >> n >> m;\n\tfor(int i=1;i<=n;i++)//\u8f93\u5165\n\t\tscanf(\"%d\",&s[i]);\n\ta.init();//\u521d\u59cb\u5316\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\t//a.print();//\u8c03\u8bd5\n\t\tint b,x,y;\n\t\tscanf(\"%d%d%d\",&b,&x,&y);\n\t\tif(b==1)//\u64cd\u4f5c1\n\t\t\ta.add(x,y);//\u628ax\u4e3a\u52a0\u4e0ay\n\t\telse//\u64cd\u4f5c2\n\t\t\tprintf(\"%d\\n\",a.sum(y)-a.sum(x-1));//\u5982\u4e0a\u201c\u67e5\u8be2\u201d\u7ae0\u6240\u8bf4\n\t}\n\t//a.print();//\u8c03\u8bd5\n\treturn 0;\n}\n```\n\u8fd9\u5e94\u8be5\u662f\u6211\u6700\u957f\u7684\u4e00\u7bc7\u9898\u89e3~~~QWQ",
        "postTime": 1562309796,
        "uid": 34500,
        "name": "\u849f\u84bblxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "~~\u4f5c\u4e3a\u521a\u5b66oi\u7684\u840c\u65b0~~  \n\u5199\u4e00\u7bc7\u8f83\u4e3a\u8be6\u7ec6\u7684$cdq$\u5206\u6cbb\u9898\u89e3\uff08\u524d\u9762\u5199\u8fc7\u4f46\u662f\u5199\u7684\u4e0d\u662f\u5f88\u8be6\u7ec6\u554a\uff09\u3002\n\u6709\u95ee\u9898\u8bf7\u6307\u51fa\uff01\n\n### 1. \u9884\u5904\u7406\n\n\u9996\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\u3002\uff08\u5f3a\u5236\u5728\u7ebf\uff1f\u51fa\u95e8\u53f3\u8f6c~~\u6811\u5957\u6811~~\u6811\u72b6\u6570\u7ec4\n\n\u5bf9\u4e8e\u4e00\u4e2a\u67e5\u8be2\u533a\u95f4\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u8d21\u732e\u8003\u8651\u62c6\u6210\u4e24\u4e2a\u3002\u67e5\u8be2$[l,r]$\u7b49\u4ef7\u4e8e\u67e5\u8be2$[1,l-1],[1,r]$ \u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u67e5\u8be2\u548c\u4fee\u6539\u5b58\u4e0b\u6765\u5566\n```cpp\nstruct query{ll x,c,opt,cnt,ct;}q[MAXN*3],t[MAXN*3];\n```\nx\uff1a\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u7684\u4f4d\u7f6e\u3002\u663e\u7136\uff0c\u524d\u9762\u628a\u4e00\u4e2a\u8be2\u95ee\u62c6\u6210\u4e24\u4e2a\u540e\uff0c\u6bcf\u4e2a\u8be2\u95ee\u53ea\u9700\u8981\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u5176\u64cd\u4f5c\u4f4d\u7f6e\n\nopt \u8868\u793a\u8fd9\u662f\u4e2a\u67e5\u8be2\u8fd8\u662f\u4e2a\u4fee\u6539\n\n\u5f53opt == 1  \u5219\u8fd9\u662f\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5176\u4e2dc\u5b58\u4fee\u6539\u7684\u503c\n\n\u5f53opt == 0  \u5219\u8fd9\u662f\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5982\u679cc=-1 \u5219\u8868\u793a\u67e5\u8be2\u540e\u7684\u503c\u5e94\u8be5\u4e58\u4ee5-1.\u6bd4\u5982\u8bf4\u5bf9\u4e8e\u67e5\u8be2$[l,r]$\u663e\u7136\u67e5\u8be2$[1,l-1]$\u540e\u5f97\u5230\u7684\u503c\u5e94\u5f53\u4e58\u4ee5-1\u518d\u52a0\u5230\u8fd9\u4e2a\u67e5\u8be2\u6700\u540e\u7684ans\u91cc\u9762\u3002\u800c\u5bf9\u4e8e$[1,r]$\u663e\u7136\u4e0d\u7528\u4e58\u76f4\u63a5\u653e\u8fdb\u53bb\u3002\n\ncnt\uff1a\u8fd9\u662f\u7b2c\u51e0\u4e2a**\u64cd\u4f5c** \uff0c\u6bcf\u8fdb\u884c\u4e00\u6b21\u67e5\u8be2\u6216\u4fee\u6539\u90fd++\n\nct: \u8fd9\u662f\u7b2c\u51e0\u4e2a**\u8be2\u95ee** \uff0c \u4e00\u4e2a\u8be2\u95ee\u62c6\u6210\u4e86\u4e24\u4e2aquery\uff0c\u8fd9\u4e24\u4e2a\u70b9ct\u5fc5\u987b\u76f8\u7b49\uff0c\u7528\u4ee5\u7edf\u8ba1\u7b54\u6848\u3002\n\n### \u600e\u4e48\u5206\u6cbb\uff1f\n\n\u73b0\u5728\u6211\u4eec\u5c31\u53c8\u4e86\u5f88\u591a\u5f88\u591a\u5f88\u591a\u5f88\u591a\u5f88\u591a\u5f88\u591a\u5f88\u591a\u7684\u64cd\u4f5c\u4e86,\u4f46\u662f\u600e\u4e48\u89e3\u51b3\u8fd9\u4e9b\u64cd\u4f5c\uff1f\n\n\u6211\u4eec\u77e5\u9053\u6bcf\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u4f1a\u5bf9\u6240\u6709$cnt$\u5728\u5176\u4e4b\u540e\uff0c\u4e14$x$\u5728\u5176\u4e4b\u540e\u7684\u8be2\u95ee\u4ea7\u751f\u8d21\u732e\u3002\n\n\u90a3\u4e48\u8003\u8651\u8fd9\u6837\u5206\u6cbb\uff1a\n\n\u9996\u5148\u628a\u6240\u6709\u64cd\u4f5c**\u6309\u7167x\u8fdb\u884c\u6392\u5e8f**\uff0c\uff08x\u4f4d\u7f6e\u4e00\u6837\u5219\u6309\u7167\u5148\u4fee\u6539\uff0c\u518d\u67e5\u8be2\u7684\u987a\u5e8f\u6392\uff09\n\n\u7136\u540e**\u5bf9\u8be2\u95ee\u5206\u6cbb**\u3002\n\n\u73b0\u5728\u95ee\u9898\u662f\uff1a \u5bf9\u4e8el\u5230r\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5df2\u77e5\u5173\u4e8ex\u6392\u5e8f\u4e86\u7684\u5e8f\u5217\uff0c\u7136\u540e\u8003\u8651\u6240\u6709$cnt<=m(=l+r>>1)$\u5de6\u8fb9\uff08\u5373\u5728\u4e2d\u70b9\u5de6\u8fb9\uff09\u7684**\u4fee\u6539**\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6240\u6709$cnt>m$\uff08\u5373\u5728\u4e2d\u70b9\u53f3\u8fb9\uff09\u7684\u8be2\u95ee\u7684\u5f71\u54cd\u3002\n\n### \u6ce8\u610f:\u8fd9\u91cc\u53ea\u8003\u8651**\u5de6\u8fb9\u7684\u4fee\u6539**\u5bf9\u4e8e**\u53f3\u8fb9\u7684\u67e5\u8be2**\u7684\u5f71\u54cd\n\n\u7136\u540e\u8003\u8651\u5408\u5e76\uff0c\u76f4\u63a5\u4ecel\u5230r\uff0c\u5982\u679c$cnt<=m$ \u5219\u653e\u5728\u5de6\u534a\u8fb9\uff0c\u5982\u679c$cnt>m$\u5219\u653e\u5728\u53f3\u534a\u8fb9\u3002\u7531\u4e8e\u539f\u5e8f\u5217\u5173\u4e8ex\u6709\u5e8f\uff0c\u8fd9\u6837\u9009\u51fa\u6765\u7684\u4e24\u534a\u7684\u5e8f\u5217\u4e5f\u4e00\u5b9a\u5173\u4e8ex\u6709\u5e8f\uff08\u5f88\u663e\u7136\u5427\uff0c\u662f\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9009\u7684\uff09\n\n\u7136\u540e\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff1a\u5173\u4e8ex\u6709\u5e8f\uff0c\u8003\u8651\u8d21\u732e\u3002\n\n\u8d21\u732e\u7b97\u5b8c\u4e86\u7684\u8fc7\u7a0b\u5c31\u5f88\u65e0\u8111\u4e86\uff0c\u9884\u5904\u7406ans\u4e3a\u8be2\u95ee\u533a\u95f4\u7684\u548c\uff08\u5229\u7528\u524d\u7f00\u548c\uff09\u7136\u540eans+\u8d21\u732e\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u5206\u6790\u5f88\u663e\u7136\u4e86$O(nlogn)$\n\n### \u6709\u4ec0\u4e48\u7528\uff1f\n\n#### \u201c\u8fd9\u9898\u663e\u7136\u6811\u72b6\u6570\u7ec4\u5c31\u597d\u4e86\u554aQAQ \u6015\u4e0d\u662f\u60f3\u53d8\u6210\u4e0b\u4e00\u4e2aa+b\u201d\n\n= =\u7136\u800c\u5e76\u4e0d\u662f\u3002cdq\u5206\u6cbb\u591a\u6570\u65f6\u5019\u5e76\u4e0d\u662f\u5728\u8fd9\u79cd\u65f6\u5019\u7528\u3002\n\n\u800c\u662f\u5728\u5f88\u591a\u5f88\u9ebb\u70e6\u7684\u65f6\u5019\u9876\u66ff\u4e00\u4e9b\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u3002\uff08~~\u5f3a\u5236\u5728\u7ebf\u8bf7\u51fa\u95e8\u53f3\u8f6c~~\n\n\u7ecf\u5e38\u51fa\u73b0\u5f88\u591a\u6811\u5957\u6811\u7684\u9898\u76ee\u53ef\u4ee5\u7528cdq\u5206\u6cbb\u5957\u4e00\u5c42\u6811\u72b6\u6570\u7ec4\u8fc7\u3002\u800c\u4e14\u6709\u5f88\u591a\u4f18\u70b9\uff1a\u5e38\u6570\u5c0f\uff0c\u7f16\u7801\u590d\u6742\u5ea6\u5c0f\u3002\u3002\n\n\u4e0b\u9762\u63a8\u8350\u51e0\u4e2acdq\u7684\u9898QAQ \u8fd9\u4e9b\u4f60\u5c31\u4e0d\u80fd\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u538b\u8fc7\u53bb\u4e86\n\n~~\u5f53\u7136\u4f60\u8bf4\u4f60\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\u5957\u6811\u72b6\u6570\u7ec4\u90a3\u6211\u4e5f\u6ca1\u529e\u6cd5\u4e86~~\n\n[BZOJ1176 Mokia](https://www.lydsy.com/JudgeOnline/problem.php?id=1176)  \n[luogu3810 \u4e09\u7ef4\u504f\u5e8f](https://www.luogu.org/problemnew/show/P3810)\n\n\u8fd8\u662f\u7ed9\u4e2a\u4ee3\u7801\u5427\uff0c\u90fd\u8bf4\u4e0d\u7ed9\u4ee3\u7801\u7684\u9898\u89e3\u4e0d\u662f\u597d\u9898\u89e3\u3002\u3002  \n\u7565\u5fae\u538b\u884c\u5f88\u7b80\u77ed\n```cpp\n/*Heroes Never Die!*/\n#include \"cstdio\"\n#include \"algorithm\"\nusing namespace std;\ntypedef long long ll;\n#define MAXN 500006\nstruct query{ll x,c,opt,cnt,ct;}q[MAXN*3],t[MAXN*3];\nll n,m,A[MAXN],cnt,ct,ans[MAXN],S[MAXN];\nbool cmp(query a,query b){ return a.x != b.x ? a.x < b.x : a.opt > b.opt; }\nvoid cdq(ll l,ll r);\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(ll i=1;i<=n;++i) scanf(\"%lld\",&A[i]),S[i] = S[i-1] + A[i];\n    for(ll i=1,opt,x,x2,c;i<=m;++i){\n        scanf(\"%lld\",&opt);\n        if(opt == 1) ++cnt,scanf(\"%lld%lld\",&q[cnt].x,&q[cnt].c),q[cnt].opt=1,q[cnt].cnt=cnt;\n        else scanf(\"%lld%lld\",&x,&x2),++ct,++cnt,q[cnt] = {x-1,-1,0,cnt,ct},++cnt,q[cnt] = {x2,1,0,cnt,ct},ans[ct] = S[x2] - S[x-1];\n    }\n    sort(q+1,q+1+cnt,cmp);\n    cdq(1,cnt);\n    for(ll i=1;i<=ct;++i) printf(\"%lld\\n\",ans[i]);\n}\nvoid cdq(ll l,ll r){\n    if(l == r) return;\n    ll m = l + r >> 1,s = 0;\n    for(ll i=l;i<=r;++i)\n        if(q[i].cnt <= m && q[i].opt) s += q[i].c;\n        else if(q[i].cnt > m && !q[i].opt) ans[q[i].ct] += s * q[i].c;\n    ll l1 = l , l2 = m + 1;\n    for(ll i=l;i<=r;++i) if(q[i].cnt <= m) t[l1++] = q[i]; else t[l2++] = q[i];\n    for(ll i=l;i<=r;++i) q[i] = t[i];\n    cdq(l,m),cdq(m+1,r);\n}\n```\n\n\u5e7f\u544a\uff1ablog\uff1a[yihan.ac.cn](yihan.ac.cn)\u6b22\u8fce\u4e92\u6362\u53cb\u8054",
        "postTime": 1540284261,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "### \u4e3b\u8981\u601d\u8def\uff1azkw\u7ebf\u6bb5\u6811\n\u6700\u7b80\u5355\u7684zkw\u7ebf\u6bb5\u6811\u5c31\u5341\u5206\u9002\u5408\u8fd9\u9053\u9898\uff0c\u4e3a\u4ec0\u4e48\u7528zkw\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee5\u4e0b\u7cbe\u7b80\u4ee3\u7801\uff1a\n\n\u6211\u4eec\u53ea\u9700\u8981\u7528\u5230\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#define go(i,j,n,k) for(int i=j;i<=n;i+=k)\n#define fo(i,j,n,k) for(int i=j;i>=n;i-=k)\n#define mn 500010\n#define ll long long\ninline ll read(){int x=0,f=1;char ch=getchar();while(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n\t\t\t\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}return x*f;}\nll z[mn << 2], M, n, m;\ninline void update(int rt){z[rt] = z[rt<<1] + z[rt<<1|1];}\ninline void build(){for(M=1;M<n+2;M<<=1);go(i,M+1,M+n,1)z[i]=read();fo(i,M,1,1) update(i);}\ninline void modify(int now,ll v){for(z[now+=M]+=v,now>>=1;now;now>>=1)update(now);}\ninline ll query(int l,int r){int ans=0;for(--l+=M,++r+=M;l^r^1;l>>=1,r>>=1){if(~l&1)ans+=z[l^1];if(r&1)ans+=z[r^1];}return ans;}\nint main(){\n\tn=read(),m=read();build();\n\tgo(i,1,m,1){\n\t\tint s=read(),x=read(),y=read();\n\t\tif(s==1)modify(x,y);else printf(\"%lld\\n\",query(x,y));\n\t}\n}\n```\n\n\u4e0d\u7528\u6570\uff0c\u53ea\u670919\u884c\uff08\u4e0d\u5f3a\u5236\u6362\u884c\uff09\uff0c\uff0c\uff0c\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u7b80\u5355\uff1f\u5b9e\u6d4b\u6811\u72b6\u6570\u7ec41004ms\uff0c\u800czkw\u7ebf\u6bb5\u6811\u53ea\u6709562ms\uff1a\n\n[text:lowbit](https://www.luogu.org/record/show?rid=8721834)\n\n[text:zkw](https://www.luogu.org/record/show?rid=11376007)",
        "postTime": 1538463294,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u5199cdq\u5206\u6cbb\u7684\u9898\u89e3\u3002\n\n~~cdq\u5206\u6cbb\u5c31\u4e0d\u8fc7\u591a\u4ecb\u7ecd\u4e86~~\n\n1.\u628a\u521d\u503c\u53d8\u6210\u4fee\u6539\u3002\n\n2.\u628a\u4fee\u6539\u52a0\u8fdb\u53bb\n\n3.\u628a\u8be2\u95ee\u62c6\u6210\u4e24\u4e2a\u524d\u7f00\u5f62\u5f0f\u52a0\u8fdb\u53bb\n\n\u6309\u7167\u64cd\u4f5c\u7684\u4f4d\u7f6e\u6392\u5e8f\u3002\n\n\u7136\u540e\u5904\u7406\u6240\u6709\u64cd\u4f5c\u7684\u524d\u4e00\u534a\u7684\u4fee\u6539\u5bf9\u540e\u4e00\u534a\u7684\u67e5\u8be2\u7684\u8d21\u732e\u3002\n\n\u7136\u540e\u5206\u6cbb\u524d\u4e00\u534a\u3001\u540e\u4e00\u534a\u3002\n\n~~\u8fd9\u4e0d\u662f\u5f52\u5e76\u6392\u5e8f\uff1f~~\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<ctype.h>\n#include<string.h>\nusing namespace std;\n#define ll long long\n#define rt register int\n#define reep(i,x,y) for(rt i=(x);i<(y);++i)\n#define per(i,x,y) for(rt i=(x);i>=(y);--i)\n#define rep(i,x,y) for(rt i=(x);i<=(y);++i)\n#define travel(i,x) for(rt i=h[x];i;i=pre[i])\nnamespace fast_IO {\n    inline char read() {\n        //return getchar();\n        static const int IN_LEN = 1000000;\n        static char buf[IN_LEN], *s, *t;\n        if (s == t) {\n            t = (s = buf) + fread(buf, 1, IN_LEN, stdin);\n            if (s == t) return -1;\n        }\n        return *s++;\n    }\n    template<class T>\n    inline void read(T &x) {\n        static bool iosig;\n        static char c;\n        for (iosig = false, c = read(); !isdigit(c); c = read()) {\n            if (c == '-') iosig = true;\n            if (c == -1) return;\n        }\n        for (x = 0; isdigit(c); c = read())\n            x = ((x + (x << 2)) << 1) + (c ^ '0');\n        if (iosig) x = -x;\n    }\n    const int OUT_LEN = 10000000;\n    char obuf[OUT_LEN], *ooh = obuf;\n    inline void print(char c) {\n        if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf;\n        *ooh++ = c;\n    }\n    template<class T>\n    inline void print(T x) {\n        static int buf[30], cnt;\n        if (x == 0) {\n            print('0');\n        }\n        else {\n            if (x < 0) print('-'), x = -x;\n            for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48;\n            while (cnt) print((char)buf[cnt--]);\n        }\n    }\n    inline void flush() {\n        fwrite(obuf, 1, ooh - obuf, stdout);\n    }\n}\nusing namespace fast_IO;\nconst int N = 500005, M = 1500005;\nint n, cnt, m, totans, ans[M];\nstruct querys{\n    int x, pos, val, id;\n    inline querys(){}\n    inline querys(int x_, int pos_, int val_, int id_){\n        x=x_, pos=pos_, val=val_, id=id_;\n    }\n    inline bool operator <(const querys &rhs)const{\n        return x<rhs.x || x==rhs.x && pos<rhs.pos;\n    }\n}q[M], tmp[M];\nvoid cdq(int l, int r){\n    if(l==r) return;\n    int mid=l+r>>1, tot=0;\n    rep(i, l, r) if(!q[i].pos && q[i].id<=mid) tot+=q[i].val; else if(q[i].pos && q[i].id>mid) ans[q[i].pos]+=q[i].val*tot;\n    int h1=l, h2=mid+1;\n    rep(i, l, r) if(q[i].id<=mid) tmp[h1++]=q[i]; else tmp[h2++]=q[i];\n    rep(i, l, r) q[i]=tmp[i];\n    cdq(l, mid), cdq(mid+1, r);\n}\nint main() {\n    read(n), read(m);\n    rep(i, 1, n){\n        static int tmp;\n        read(tmp);\n        ++cnt,     q[cnt]=querys(i, 0, tmp, cnt); \n    }\n    rep(i, 1, m){\n        static int opt, x, y;\n        read(opt), read(x), read(y);\n        if(opt==1) ++cnt, q[cnt]=querys(x, 0, y, cnt);\n        else\n            ++cnt, q[cnt]=querys(x-1, ++totans, -1, cnt),\n            ++cnt, q[cnt]=querys(y, totans, 1, cnt);\n    }\n    sort(q+1, q+cnt+1);\n    cdq(1, cnt);\n    rep(i, 1, totans) print(ans[i]), print('\\n');\n    flush();\n    return 0;\n}\n```",
        "postTime": 1515588549,
        "uid": 21856,
        "name": "Cekavis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6700\u8fd1\u8fd9\u51e0\u5929\u88ab\u6811\u72b6\u6570\u7ec4\u6298\u78e8\u7684\u4e0d\u8f7b\uff0c\u53d1\u535a\u5ba2\u6765\u5e2e\u81ea\u5df1\u7406\u987a\u4e00\u4e0b\u601d\u8def\u3002\n\n\n## \u4e00.\u5f15\u5165\u3002\n\n## \u95ee\u98981\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217\uff0c\u5982\u4f55\u5b8c\u6210\u5feb\u901f\u7684\u5355\u70b9\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2\uff1f\uff08\u4f8b\u9898luoguP3374\uff09\n\n#### 1.\u5355\u70b9\u4fee\u6539\u6307\u7684\u662f\uff1a\u628a\u67d0\u4e2a\u70b9\u7684\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u4e14\u4ec5\u6d89\u53ca\u8fd9\u4e00\u4e2a\u70b9\u7684\u503c\u7684\u53d8\u5316\u3002\n\n#### 2.\u800c\u533a\u95f4\u67e5\u8be2\u6307\u7684\u662f\u67e5\u8be2\u533a\u95f4\u503c\u7684\u548c\u3002\n\n\n\n\u597d\u4e86\uff0c\u4ee5\u4e0a\uff0c\u6211\u4eec\u5c31\u987a\u5229\u7684\u628a\u9898\u76ee\u8bfb\u61c2\u4e86\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u4ee5\u4e0b\u7684\u601d\u8def\u3002\n\n#### \uff081\uff09\u66b4\u529b\u76f8\u52a0\u6cd5\u3002\n\n\u76f4\u63a5\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u7684\u64cd\u4f5c$ O(1)$ \u8fdb\u884c\u4fee\u6539\uff0c\u67e5\u8be2\u65f6\u66b4\u529b\u76f8\u52a0\u3002\n    \n\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3a$O(n)$\uff0c\u5355\u70b9\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a$O(1)$.\n    \n\u663e\u7136\uff0c\u5982\u679c\u67e5\u8be2\u6b21\u6570\u5f88\u591a\uff0c\u4f1a\u8d85\u65f6\u3002\n\n#### \uff082\uff09\u524d\u7f00\u548c\u6570\u7ec4\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u524d\u7f00\u548c\u7684\u7ef4\u62a4\u4e3a$O(n)$,\u67e5\u8be2\u4e3a$O(1)$\uff0c\u4f46\u662f\u5982\u679c\u8981\u662f\u4fee\u6539\uff0c\u5c31\u9700\u8981$O(n)$\u91cd\u65b0\u7ef4\u62a4\uff0c\u6709\u4e9b\u60c5\u51b5\u8fd8\u662f\u4f1a\u8d85\u65f6\u3002\n\n\u56e0\u6b64\uff0c\u4e24\u79cd\u66b4\u529b\u7b97\u6cd5\u90fd\u5404\u6709\u5229\u5f0a\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4e2d\u548c\u4e00\u4e0b\u4ed6\u4eec\uff0c\u5f97\u5230\u4e00\u4e2a\u66f4\u52a0\u5feb\u6377\u7684\u65b9\u6cd5\u5462\uff1f\n\n\u6811\u72b6\u6570\u7ec4\u5c31\u56e0\u6b64\u8bde\u751f\u4e86\u3002\n## \u4e8c.\u6811\u72b6\u6570\u7ec4\u5165\u95e8\u3002\n\n#### \u4ec0\u4e48\u662f\u6811\u72b6\u6570\u7ec4\uff1f\n\n\u987e\u540d\u601d\u5f02\uff0c\u6811\u72b6\u6570\u7ec4\u662f\u4ee5\u6811\u5f62\u7ed3\u6784\u4e3a\u601d\u60f3\u7684\u4e00\u7c7b\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e0d\u662f\u6811\u5f62\u7ed3\u6784\uff01\uff01\uff0c\u548c\u7ebf\u6bb5\u6811\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u6bd4\u7ebf\u6bb5\u6811\u66f4\u4f18\u3002\n\n\u6811\u72b6\u6570\u7ec4\u6bd4\u524d\u9762\u7684\u4e24\u79cd\u66b4\u529b\u7b97\u6cd5\u4e4b\u6240\u4ee5\u66f4\u4f18\uff0c\u662f\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u4fee\u6539\u64cd\u4f5c\u5747\u4e3a$O(logn)$\u3002\n\n\u8fd9\u6837\u770b\u6765\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u786e\u6bd4\u4e4b\u524d\u4e24\u79cd\u65b9\u6cd5\u5feb\u4e0a\u4e0d\u5c11\u3002\n\n\uff08\u8bf7\u81ea\u884c\u767e\u5ea6\u6811\u72b6\u6570\u7ec4\u56fe\u7247\uff0c\u849f\u84bb\u4e0d\u4f1a\u63d2\u56fe\u3002\u3002\uff09\n\n#### 1.\u6811\u72b6\u6570\u7ec4\u7684\u6784\u5efa\n\n\u6211\u4eec\u5047\u8bbea[]\u4e3a\u539f\u6570\u7ec4\uff0cc[]\u4e3a\u6811\u72b6\u6570\u7ec4\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u5927\u81f4\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\n\n$c[1]=a[1];$\n\n$c[2]=a[1]+a[2];$\n\n$c[3]=a[3];$\n\n$c[4]=a[1]+a[2]+a[3]+a[4];$\n\n$......$\n\n\u6811\u72b6\u6570\u7ec4\u4e0e\u539f\u6570\u7ec4\u5b8f\u89c2\u4e4b\u95f4\u7684\u5173\u7cfb\u5f88\u96be\u8bf4\uff0c\u6211\u4eec\u6765\u89c2\u5bdf\u4e00\u4e0b\u4ed6\u4eec\u4e8c\u8fdb\u5236\u4e0b\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\n\n$c[0001]=a[0001]$\n\n$c[0010]=a[0001]+a[0010]$\n\n$c[0011]=a[0011]$\n\n$c[0100]=a[0001]+a[0010]+a[0011]+a[0100]$\n\n$......$\n\n\u9996\u5148\uff0c\u5148\u6254\u4e0a\u4e00\u6ce2\u5b9a\u4e49\uff1a\n\n\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2ac[i]\uff0c\u5176\u5b9e\u9645\u610f\u4e49\u4e3a\uff1a\n\n> \u7b97\u4e0a\u5176\u672c\u8eab\u7684\u8baf\u606f\uff0c\u603b\u5171\u5b58\u50a8\u4e86$2^k$\u4e2a\u5143\u7d20\u7684\u4fe1\u606f\uff0c\n> \u5176\u4e2dk\u8868\u793ai\u5728\u4e8c\u8fdb\u5236\u4e0b\uff0c\u672b\u5c3e\u96f6\u7684\u4e2a\u6570.\n\n\n\u770b\u4e0d\u61c2\uff1f\u518d\u591a\u8bfb\u51e0\u904d\u8bd5\u8bd5\uff1f\n\n\u8fd8\u662f\u770b\u4e0d\u61c2\uff1f\n\n\u6ca1\u5173\u7cfb\uff0c\u4e0b\u9762\u6211\u4eec~~\u7b80\u5355\u7684\u63cf\u8ff0\u4e00\u4e0b~~\u3002\n\n#### \u7531\u4e8e\u5b58\u50a8\u7684\u4fe1\u606f\u6570\u91cf\u4e3a\u4e8c\u8fdb\u5236\u4e0b\u6700\u540e\u4e00\u4e2a1\u6240\u5728\u4f4d\u7f6e\u51b3\u5b9a\uff0c\n#### \u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6700\u540e\u4e00\u4e2a1\u5728\u5012\u6570\u7b2c$i$\u4e2a\u4f4d\u7f6e\n\n#### \u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff0c\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u4e2d$C[n]$,\u6240\u5b58\u50a8\u7684\u533a\u95f4\u4fe1\u606f\u4e3a\uff1a\n\n### $C[n] = a[n-2^i] +a[n-2^i+1]+......+a[n].$\n\n### \u5373$C[n] = \\sum_{k=n-2^i}^n{a[k]}.$\n\n\u4e0b\u9762\u6211\u4eec\u4e3e\u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4fbf\u4e8e\u7406\u89e3\u3002\n\n\u5982$C[4]=C[0100]$\n\n\u7531\u4e8e\u6700\u540e\u4e00\u4e2a1\u5728\u7b2c\u4e09\u4f4d\uff0c\u6240\u4ee5\u8bf4\u8be5\u6570\u7ec4\u4e2d\u5b58\u50a8$2^2=4$\u4e2a\u6570\u3002\n\n\u4e14\u5b58\u50a8\u7684\u533a\u95f4\u4e3a$a[1]+a[2]+a[3]+a[4]$\n\n\u53c8\u6bd4\u5982$C[9]=C[1001]$\n\n\u6700\u540e\u4e00\u4e2a1\u5728\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u8be5\u6570\u7ec4\u5b58\u50a8$2^0=1$\u4e2a\u6570\u3002\n\n\u5373$C[9] = a[9].$\n\n\u7406\u89e3\u4e86\u8fd9\u4e2a\uff0c\u6811\u72b6\u6570\u7ec4\u5e94\u8be5\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u4e0d\u8fc7\uff0c\u6211\u4eec\u5982\u4f55\u83b7\u5f97\u6700\u540e\u4e00\u4f4d1\u6240\u5728\u4f4d\u7f6e\u7684\u503c\u5462\uff1f\n\n\u8fd9\u65e9\u5df2\u7ecf\u88ab\u5927\u725b\u4eec\u6240\u7814\u7a76\u51fa\u6765\u4e86\uff0c\u5373\n\nlowbit(x)=x&-x.\n\n\u8fd9\u79cd\u65b9\u6cd5\u5f88\u7384\u5b66\uff0c\u4f46\u662f\u53ef\u4ee5\u8bc1\u660e\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\u3002\n\n```cpp\n//\u5199\u6cd51\ninline int lowbit (int x)\n{\n\treturn x&(-x);\n} \n\u8fd9\u91cc\uff0c\u8fd4\u56de\u7684\u5c31\u662fx\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4e2d\u6700\u540e\u76841\u7684\u503c\u3002\n\n//\u5199\u6cd52\n\ninline int lowbit(int x)\n{\n\treturn (x^(x-1))&x;\n}\n```\n\u4e24\u79cd\u5199\u6cd5\u6ca1\u6709\u672c\u8d28\u7684\u533a\u522b\uff0c\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u5199\u7b2c\u4e00\u79cd\uff08\u53ea\u662f\u56e0\u4e3a\u597d\u8bb0..\n\n\u638c\u63e1\u4e86\u6811\u72b6\u6570\u7ec4\u4e0e\u539f\u6570\u7ec4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e0b\u9762\u6211\u4eec\u8981\u5bf9\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u4fee\u6539\u548c\u67e5\u8be2\u4e86\u3002\n\n\u5355\u70b9\u4fee\u6539\u51fd\u6570\u5982\u4e0b:\n\u7531\u4e8e\u6211\u4eec\u8981\u628a\u6240\u6709\u5305\u62ec x \u7684\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u6bcf\u6b21\u5411\u4e0a\u627e\u4e00\u4e2alowbit\uff0c\u627e\u5230\u6700\u540e\u4e00\u4f4dn\u7684\u65f6\u5019\u505c\u6b62\u3002\n\n```cpp\ninline void add(int x,int k)\n{\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\ttree[i]+=k;\n}\n\n```\n\n\u533a\u95f4\u67e5\u8be2\u51fd\u6570\u5982\u4e0b\uff1a\n\n\u548c\u5355\u70b9\u4fee\u6539\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9700\u8981\u5411\u4e0b\u627e\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u4e00\u70b9\u70b9\u7684\u52a0\u8d77\u6765\u3002\n\n```cpp\ninline int sum(int x)\n{\n\tint ans=0;\n\tfor(int i=x;i;i-=lowbit(i))\n\t{\n\t\tans+=tree[i]; \n\t}\n\treturn ans;\n}\n\n```\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint tree[3000000],n,m;\n\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\n\ninline void add(int x,int y)\n{\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t{\n\t\ttree[i]+=y;\n\t}\n}\n\ninline int sum(int x)\n{\n\tif(x==0) return 0;\n\tint ans=0;\n\tfor(int i=x;i>0;i-=lowbit(i))\n\t{\n\t\tans+=tree[i]; \n\t}\n\treturn ans;\n}\n\nint main ()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint a;\n\t\tscanf(\"%d\",&a);\n\t\tadd(i,a);\n\t}\n\t\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tif(x==1)\n\t\t{\n\t\t\tadd(y,z); \n\t\t}\n\t\tif(x==2)\n\t\t{\n\t\t\tint end=sum(z)-sum(y-1);\n\t\t\tprintf(\"%d\\n\",end);\n\t\t}\n\t\t \n\t}\n\treturn 0;\n } \n ```\n \n \u603b\u4e4b\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e38\u6570\u5f88\u5c0f\uff0c\u4e0d\u8fc7\u6709\u7684\u65f6\u5019\u9002\u7528\u7684\u8303\u56f4\u53ef\u80fd\u4e0d\u662f\u5f88\u5e7f\u3002\n \n",
        "postTime": 1551440572,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u6811\u72b6\u6570\u7ec4\u6d45\u8c08"
    },
    {
        "content": " **~~~\u597d\u50cf\u6ca1\u4eba\u53d1pascal\u7684\u9898\u89e3~~~~**\n\n1\u3001\u5b9a\u4e49\n\u6811\u72b6\u6570\u7ec4(Binary Indexed Tree(B.I.T), Fenwick \u3001\u3001\nTree)\u3001\u662f\u4e00\u4e2a\u67e5\u8be2\u548c\u4fee\u6539\u590d\u6742\u5ea6\u90fd\u4e3alog(n)\u7684\u6570\u636e\u7ed3\u6784\u3002\n\u4e3b\u3001\u8981\u7528\u4e8e\u67e5\u8be2\u4efb\u610f\u4e24\u4f4d\u4e4b\u95f4\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u4f46\u662f\u6bcf\u6b21\u53ea\u80fd\n\u4fee\u6539\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff1b\u7ecf\u8fc7\u7b80\u5355\u4fee\u6539\u53ef\u4ee5\u5728log(n)\u7684\u590d\u6742\u5ea6\u4e0b\n\u8fdb\u884c\u8303\u56f4\u4fee\u6539\u3002\n\n\n\u5047\u8bbeA[]\u6570\u7ec4\u4e3a\u5b58\u50a8\u539f\u6765\u7684\u503c\u7684\u6570\u7ec4\uff0cC[]\u4e3a\u6811\u72b6\u6570\u7ec4\u3002\u6211\u4eec\n\u5b9a\u4e49\uff1aC[i] = A[i - 2^k + 1] + ..... + A[i]  \u5176\u4e2dk\n\u4e3ai\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u65f6\u7684\u672b\u5c3e0\u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff1ai= 10100,\u5219k = \n2\uff0ci = 11000\uff0c\u5219k = 3\uff1bC[i] \u5b83\u91cc\u9762\u5305\u542b\u4e862^k\u4e2aA[]\u5143\n\u7d20\uff0c\u8fd92^k\u4e2a\u5143\u7d20\u662f\u4eceA[i]\u5f80\u540e\u4e00\u76f4\u9012\u51cf\u76842^k\u4e2a\u5143\u7d20\u3002Cn = \nA(n \u2013 2^k + 1) + ... + An\u3002K\u7684\u8ba1\u7b97\u4e3a2^k=lowbit\uff08x \nand (-x)\uff09\u3002\n\n\n\u5f53\u7136\uff0c\u5229\u7528\u4f4d\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa2^k=i&(i^(i-1)) \uff09\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u53d1\n\u73b0\uff0c\u8fd9\u4e2ak\u5c31\u662f\u8be5\u8282\u70b9\u5728\u6811\n\u4e2d\u7684\u9ad8\u5ea6\uff0c\u56e0\u800c\u8fd9\u4e2a\u6811\u7684\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7logn\u3002\n\u6240\u4ee5,\u5f53\u6211\u4eec\u4fee\u6539A[i]\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u4eceC[i]\u5f80\u6839\u8282\u70b9\u4e00\u8def\u4e0a\n\u6eaf\uff0c\u8c03\u6574\u8fd9\u6761\u8def\u4e0a\u7684\u6240\u6709C[]\u5373\u53ef\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u5728\u6700\u574f\n\u60c5\u51b5\u4e0b\u5c31\u662f\u6811\u7684\u9ad8\u5ea6\u5373O(logn)\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u6c42\u6570\u5217\u7684\u524dn\u9879\n\u548c\uff0c\u53ea\u9700\u627e\u5230n\u4ee5\u524d\u7684\u6240\u6709\u6700\u5927\u5b50\u6811\uff0c\u628a\u5176\u6839\u8282\u70b9\u7684C\u52a0\u8d77\u6765\u5373\n\u53ef\u3002\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u4e9b\u5b50\u6811\u7684\u6570\u76ee\u662fn\u5728\u4e8c\u8fdb\u5236\u65f61\u7684\u4e2a\u6570\uff0c\u6216\n\u8005\u8bf4\u662f\u628an\u5c55\u5f00\u62102\u7684\u5e42\u65b9\u548c\u65f6\u7684\u9879\u6570, \u5bf9\u4e8e\u6570\u7ec4\u5143\u7d20x\uff0cx\u7684\n\u7236\u4eb2\u662fx+lowbit(x)\u3002 x\u7684\u5b50\u6811\u662f(x-lowbit(x)\u3002\n\n\n2\u3001\u7b97\u6cd5\u63cf\u8ff0\n\u5f53\u60f3\u8981\u67e5\u8be2\u4e00\u4e2aSUM(n)(\u6c42a[n]\u7684\u548c\uff09\uff0c\u53ef\u4ee5\u4f9d\u636e\u5982\u4e0b\u7b97\u6cd5\u5373\n\u53ef\uff1a\nstep1:\u3000\u4ee4sum = 0\uff0c\u8f6c\u7b2c\u4e8c\u6b65\uff1b\nstep2:\u3000\u5047\u5982n <= 0\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u8fd4\u56desum\u503c\uff0c\u5426\u5219sum = sum + Cn\uff0c\u8f6c\u7b2c\u4e09\u3001\n\u6b65\uff1b\nstep3: \u4ee4n = n \u2013 lowbit(n)\uff0c\u8f6c\u7b2c\u4e8c\u6b65\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e00\u4e2a\u4e2a\n\u533a\u95f4\u7684\u548c\u5168\u90e8\u52a0\u8d77\u6765\uff0c\u4e3a\u4ec0\u4e48\u662f\u6548\u7387\u662flog(n)\u7684\u5462\uff1f\u4ee5\u4e0b\u7ed9\u51fa\u8bc1\u660e\uff1a n = n\u2013\nlowbit(n)\u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u5c06n\u7684\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4e2a1\u51cf\u53bb\u3002\u800cn\u7684\u4e8c\u8fdb\u5236\u91cc\u6700\n\u591a\u6709log(n)\u4e2a1\uff0c\u6240\u4ee5\u67e5\u8be2\u6548\u7387\u662flog(n)\u7684\u3002\u90a3\u4e48\u4fee\u6539\u5462\uff0c\u4fee\u6539\u4e00\u4e2a\u8282\u70b9\uff0c\u5fc5\u987b\u4fee\n\u6539\u5176\u6240\u6709\u7956\u5148\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a\u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6700\u591a\u6709log(n)\u7684\u7956\u5148\u3002\u6240\u4ee5\u4fee\u6539\n\u7b97\u6cd5\u5982\u4e0b\uff08\u7ed9\u67d0\u4e2a\u7ed3\u70b9i\u52a0\u4e0ax\uff09\uff1a\n\nstep1: \u5f53i > n\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u5426\u5219\u8f6c\u7b2c\u4e8c\u6b65\uff1b\nstep2: Ci = Ci + x\uff0c i = i + lowbit(i)\u8f6c\u7b2c\u4e00\u6b65\u3002i = i +lowbit(i)\u8fd9\n\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u4e5f\u53ea\u662f\u4e00\u4e2a\u628a\u672b\u5c3e1\u8865\u4e3a\u7684\u8fc7\u7a0b\u3002\n\u5bf9\u4e8e\u6570\u7ec4\u6c42\u548c\u6765\u8bf4\u6811\u72b6\u6570\u7ec4\u7b80\u76f4\u592a\u5feb\u4e86!\n \n ~~\u8bdd\u4e0d\u591a\u8bf4~~\n \n \u4e0a\u4ee3\u7801AC\uff1a\n ```pascal\nvar \n  i,n,m,tt,x,y:longint;\n  c:array[0..500010] of longint;\n  function lowbit(x:longint):longint;\nbegin\n  exit(x and (-x));\nend;\nprocedure add(x,v:longint);\nbegin\n  while (x<=n) do\n   begin\n     inc(c[x],v);\n     inc(x,lowbit(x));\n   end;\nend;\n\nfunction sum(x:longint):longint;\nvar \nans:longint;\nbegin\n  ans:=0;\n  while (x>0) do\n   begin\n     inc(ans,c[x]);\n     dec(x,lowbit(x));\n   end;\n   exit(ans)\uff1b\nend;\n//\u4e3b\u7a0b\u5e8f\nbegin\n  read(n,m);\n   for i:=1 to n do\n   begin\n     read(x);\n      add(i,x);\n   end;\n   for i:=1 to m do\nbegin\n    read(tt,x,y);\n    if (tt=1) then add(x,y) else writeln(sum(y)-sum(x-1));\n end;\nend.\n```\n~~\u8bf7\u7ba1\u7406\u5458\u5927\u4eba\u624b\u4e0b\u7559\u60c5~~",
        "postTime": 1534039467,
        "uid": 53011,
        "name": "dl__hh6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "#\u65e2\u7136\u662f\u6a21\u677f\uff0c\u90a3\u4e48\u5c31\u5f97\u628a\u76f8\u5173\u64cd\u4f5c\u5217\u6e05\u695a\u3002\n\n\u4e00\u5207\u6309\u7167\u6811\u72b6\u6570\u7ec4\u7684\u5e38\u7528\u5957\u8def\u8d70\u5c31\u884c\uff0c\u5177\u4f53\u8be6\u89c1\u4ee3\u7801\n\n\ncode\uff1a\n\n\n\n\n\n\n\n\n\n```cpp\n//\u6811\u72b6\u6570\u7ec4\u6c42\u548c,\u53d8\u503c,\u52a0\u503c\n//Time:2017/11/1\nconst maxn=500005;\nvar a,c:array[1..maxn] of longint;\n    n,m,i,tot,l,r:longint;\nfunction Lowbit(x:longint):longint;\nbegin\n  exit(x and (-x));\nend;\nProcedure Build(x,w:longint);  //\u5efa\u6811(\u5c06w\u653e\u5165x\u4f4d\u7f6e)\nbegin\n  while x<=n do\n   begin\n    inc(c[x],w);\n    inc(x,lowbit(x));\n   end;\nend;\nProcedure Sum(i:longint);  //\u8ba1\u7b971-i\u7684\u603b\u548c\nbegin\n  if i<=0 then exit\n   else\n    begin\n     inc(tot,c[i]);\n     Sum(i-lowbit(i));\n    end;\nend;\nProcedure Add(i,x:longint); //\u5c06\u7b2ci\u4e2a\u6570+x\nbegin\n  if i>n then exit\n   else\n    begin\n     c[i]:=c[i]+x;\n     Add(i+lowbit(i),x);\n    end;\nend;\nFunction SumLR(l,r:longint):longint; //\u83b7\u5f97\u533a\u95f4[l,r]\u7684\u548c\nvar temp1,temp2:longint;\nbegin\n  tot:=0; Sum(L-1); temp1:=tot;\n  tot:=0; Sum(R);   temp2:=tot;\n  exit(temp2-temp1);\nend;\nProcedure Change(i,x:longint); //\u5c06\u7b2ci\u4e2a\u6570\u6539\u53d8\u4e3ax\nbegin\n  if i>n then exit\n   else \n    begin\n     c[i]:=c[i]+x-a[i];\n     Change(i+lowbit(i),x);\n    end;\nend;\nvar v,s1,s2:longint;\nbegin\n  readln(n,m);\n  for i:=1 to n do \n   begin\n    read(a[i]);\n    Build(i,a[i]);\n   end;\n  readln;\n  for i:=1 to m do\n   begin\n    readln(v,s1,s2);\n    if v=1 then Add(s1,s2);\n    if v=2 then writeln(SumLR(s1,s2));\n   end;\nend.\n```",
        "postTime": 1509535933,
        "uid": 15700,
        "name": "zsj123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "### cdq\u5206\u6cbb\u5ef6\u7eed\n\u8fd9\u9053\u9898\u628acdq\u5206\u6cbb\u53ef\u4ee5\u4ee3\u66ff\u4e00\u5c42\u6570\u636e\u7ed3\u6784\u7684\u4f5c\u7528\u4f53\u73b0\u7684\u6dcb\u6f13\u5c3d\u81f4\u3002\n\n\u7ee7\u7eed\u91c7\u7528\u5206\u6cbb\u601d\u60f3\uff0c\u628a\u6240\u6709\u7684\u64cd\u4f5c\u62ff\u51fa\u6765\uff0c\u505a\u5206\u6cbb\uff0c\u9012\u5f52\u628a\u533a\u95f4\u5206\u6210\u4e24\u534a$(l,mid)$ $(mid+1,l)$\uff1b\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u5206\u6cbb\uff0c\u6211\u4eec\u5728\u7edf\u8ba1\u6bcf\u4e2a\u533a\u95f4\u65f6\uff0c\u6ca1\u529e\u6cd5\u8003\u8651\u5230\u522b\u7684\u533a\u95f4\u7684\u8d21\u732e\uff0c\u5728\u540e\u9762\u7684\u533a\u95f4\u5185\u7684\u67e5\u8be2\u4f1a\u88ab\u5728\u524d\u9762\u7684\u4fee\u6539\u5f71\u54cd\uff0c\u6240\u4ee5\u7b54\u6848\u663e\u7136\u6709\u95ee\u9898\u3002\n\n\u6545\u6b64\uff0c\u9700\u8981cdq\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5728\u5206\u6cbb\u65f6\uff0c\u540c\u65f6\u8003\u8651\u524d\u9762\u533a\u95f4\u5185\u7684\u64cd\u4f5c\uff08\u4fee\u6539\uff09\u5bf9\u540e\u9762\u533a\u95f4\u5185\u7684\u64cd\u4f5c\uff08\u67e5\u8be2\uff09\u7684\u5f71\u54cd\u3002\u7136\u540e\uff0c\u5c31\u80fd\u4fdd\u8bc1\u4e86\u67e5\u8be2\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u3002\n\n\u5206\u6cbb\u663e\u7136\u6ca1\u529e\u6cd5\u521d\u59cb\u5316\uff0c\u6545\u6b64\u628a\u6700\u5f00\u59cb\u7684$n$\u4e2a\u6570\uff0c\u8f6c\u6362\u6210$n$\u6b21\u4fee\u6539\u3002\n\n\u5177\u4f53\u7ec6\u8282\u6458\u81ea\u53ef\u7231\u7684std_call\u59d0\u59d0\u7684\u535a\u5ba2~:\n\n _\"\u6211\u4eec\u5b9a\u4e49\u7ed3\u6784\u4f53Query\u5305\u542b3\u4e2a\u5143\u7d20\uff1atype\uff0cidx\uff0cval\uff0c\u5176\u4e2didx\u8868\u793a\u64cd\u4f5c\u7684\u4f4d\u7f6e\uff0ctype\u4e3a1\u8868\u793a\u4fee\u6539\uff0cval\u8868\u793a\u201c\u52a0\u4e0a\u7684\u503c\u201d\u3002\u800c\u5bf9\u4e8e\u67e5\u8be2\uff0c\u6211\u4eec\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u628a\u4ed6\u5206\u89e3\u6210\u4e24\u4e2a\u64cd\u4f5c\uff1asum[1,y]-sum[1,x-1]\uff0c\u5373\u5206\u89e3\u6210\u4e24\u6b21\u524d\u7f00\u548c\u7684\u67e5\u8be2\u3002\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0ctype\u4e3a2\u8868\u793a\u9047\u5230\u4e86\u4e00\u4e2a\u67e5\u8be2\u7684\u5de6\u7aef\u70b9x-1\uff0c\u9700\u8981\u628a\u8be5\u67e5\u8be2\u7684\u7ed3\u679c\u51cf\u53bb\u5f53\u524d\u201c\u52a0\u4e0a\u7684\u503c\u7684\u524d\u7f00\u548c\u201d\uff0ctype\u4e3a3\u8868\u793a\u9047\u5230\u4e86\u4e00\u4e2a\u67e5\u8be2\u7684\u53f3\u7aef\u70b9y\uff0c\u9700\u8981\u628a\u67e5\u8be2\u7684\u7ed3\u679c\u52a0\u4e0a\u5f53\u524d\u201c\u52a0\u4e0a\u7684\u503c\u7684\u524d\u7f00\u548c\u201d\uff0cval\u8868\u793a\u201c\u662f\u7b2c\u51e0\u4e2a\u67e5\u8be2\u201d\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u6bcf\u4e2a\u64cd\u4f5c\u8f6c\u6362\u6210\u4e86\u5e26\u6709\u9644\u52a0\u4fe1\u606f\u7684\u6709\u5e8f\u5bf9(\u65f6\u95f4\uff0c\u4f4d\u7f6e)\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u5e8f\u5217\u8fdb\u884cCDQ\u5206\u6cbb\u3002\"_ \n \n- \u4f46\u662fstd_call\u59d0\u59d0\u6ca1\u6709\u89e3\u91ca\u5728cdq\u5206\u6cbb\uff08\u5f52\u5e76\u6392\u5e8f\uff09\u65f6\u7684\u6bd4\u8f83\u662f\u6309\u4ec0\u4e48\u6bd4\u8f83\u7684\uff08emmm\u5176\u5b9e\u5927\u6982\u662f\u56e0\u4e3a\u89c9\u5f97\u592a\u663e\u7136\u4e86\u5427\uff09\uff0c\u8ba9\u6211\u5361\u4e86\u5f88\u4e45\u3002\uff08\u592a\u5f31\u4e86\u600e\u4e48\u529e\u5440\u545c\u545c\u545c\u545c\uff09\n```cpp\nbool operator < (const query &rhs) const{\n        return id<rhs.id || (id==rhs.id && ty<rhs.ty); \n    }\n```\n\u6839\u636e\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u770b\u51fa\u6211\u4eec\u662f\u5148\u6309\u7167$id$\uff08\u64cd\u4f5c\u4f4d\u7f6e\uff09\u6392\u5e8f\uff0c\u518d\u6309\u7167\u7c7b\u578b\u6392\u5e8f\u8ba9\u4fee\u6539\u64cd\u4f5c\u653e\u5728\u524d\u9762\u3002\n\n\u6211\u4eec\u90fd\u80fd\u7406\u89e3\u4fee\u6539\u64cd\u4f5c\u5728\u524d\u9762\u6765\u5b8c\u6210\u628a\u6240\u6709\u7684**\u4fee\u6539\u64cd\u4f5c\u5148\u5b8c\u6210**\u3002\u4f46\u662f\uff0c\u4e3a\u4ec0\u4e48\u8981\u201c**\u5148**\u201d\u6309$id$\u5462\uff1f\n\n\u56e0\u4e3a\uff0c**\u6211\u4eec\u8981\u6ee1\u8db3\u524d\u7f00\u548c\u3002**\n\n\u5bf9\u4e8e$sum$\uff0c\u6211\u4eec\u5fc5\u987b\u6309\u7167\u4ece\u524d\u5230\u540e\u7ef4\u62a4\u51fa\u6b63\u786e\u7684\u524d\u7f00\u548c\uff0c\uff08\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\u7684\u64cd\u4f5c\u5e76\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u53ea\u662f\u4e0d\u8d21\u732e$sum$\uff0c\u628a\u524d\u7f00\u548c\u7ee7\u7eed\u4f20\u4e0b\u53bb\u5c31\u597d\u4e86\u3002\uff09\uff0c\u53ea\u6709\u8fd9\u6837\uff0c\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u624d\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7b54\u6848\u3002\u800c\u4e0d\u4f1a\u9020\u6210\u4e00\u4e9b\u660e\u660e\u5728\u5bf9\u540e\u9762\u7684\u4f4d\u7f6e\u4fee\u6539\u7684\u4fee\u6539\u64cd\u4f5c\u4e71\u5165\u5230\u4e86\u524d\u9762\u7684\u67e5\u8be2\u91cc\u3002\n\n- ### \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u66f4\u7b80\u5355\u5730\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898 ~~\uff08\u7eaf\u7cb9\u662f\u535a\u4e3b\u7a81\u7136\u7c7b\u6bd4\u4e86\u4e00\u4e0b\u504f\u5e8f\u53d1\u73b0\u539f\u6765\u771f\u7684\u662f\u201c\u663e\u7136\u201d\u3002\u3002\u3002\uff09~~\n\n\u628a\u8fd9\u4e2a\u9898\u5f53\u6210\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\uff0c\u90a3\u4e48\uff0c\u7b2c\u4e00\u7ef4\u662f\u65f6\u95f4\uff0c\u7b2c\u4e8c\u7ef4\u662f\u64cd\u4f5c\u4f4d\u7f6e\u3002\n\n**\u5f88\u663e\u7136\uff0c\u5bf9$X$\uff08\u67e5\u8be2\uff09\u6709\u5f71\u54cd\u7684\u4fee\u6539\u64cd\u4f5c\u7684\u4f4d\u7f6e\u4e00\u5b9a\u5728$X$\u4e4b\u524d\u3002\u3002**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500001; // \u539f\u6570\u7ec4\u5927\u5c0f\nconst int maxm=500001; // \u64cd\u4f5c\u6570\u91cf\nconst int maxq=(maxm<<1)+maxn;\nstruct query{\n    int id,ty;int val;\n    bool operator < (const query &rhs) const{\n        return id<rhs.id || (id==rhs.id && ty<rhs.ty); \n    }\n}q[maxq],tmp[maxq];\nint ans[maxq],aid,qid,n,m;\nvoid cdq(int l,int r){\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    cdq(l,mid),cdq(mid+1,r);\n    int sum=0;\n    int i=l,j=mid+1,k=l;\n    while(i<=mid && j<=r){\n        if(q[i]<q[j]){\n            if(q[i].ty==1) sum+=q[i].val;\n            tmp[k++]=q[i++];\n        }\n        else{\n            if(q[j].ty==2) ans[q[j].val]-=sum;\n            else if(q[j].ty==3) ans[q[j].val]+=sum;\n            tmp[k++]=q[j++]; \n        } \n    }\n    while(i<=mid) tmp[k++]=q[i++];\n    while(j<=r){\n        if(q[j].ty==2) ans[q[j].val]-=sum;\n        else if(q[j].ty==3) ans[q[j].val]+=sum;\n        tmp[k++]=q[j++]; \n    }\n    for(int i=l;i<=r;i++) q[i]=tmp[i];\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&q[i].val);\n        q[i].id=i,q[i].ty=1;\n    }\n    qid=n;\n    for(int i=1,t,x,y;i<=m;i++){\n        scanf(\"%d%d%d\",&t,&x,&y);\n        q[++qid].ty=t;\n        if(t==1) q[qid].id=x,q[qid].val=y;\n        else{\n            q[qid].id=x-1,q[qid].val=++aid;\n            q[++qid].ty=3;q[qid].id=y;q[qid].val=aid;\n        }\n    }\n//\tsort(q+1,q+1+qid);\u5df2\u7ecf\u6700\u5f00\u59cb\u6309\u65f6\u95f4\u6392\u5e8f\u4e86 \n    cdq(1,qid);\n    for(int i=1;i<=aid;i++){\n        printf(\"%d\\n\",ans[i]);\n    }\n    return 0;\n} \n```",
        "postTime": 1551764085,
        "uid": 64611,
        "name": "\u4eba\u6b87\u7269\u5df2\u975e",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u6ce5\u840c\u6b3a\u8d1f$cdq$\u5206\u6cbb\uff0c\u545c\u545c\u545c\n\n\u6ce5\u840c\u90fd\u4e0d\u5199$cdq$\uff01\n\n\u8fd9\u4e48\u597d\u7684\u4e8c\u7ef4\u504f\u5e8f\u6a21\u677f\u9898\u600e\u4e48\u80fd\u6ca1\u6709$cdq$\u5462\uff0c\u662f\u65f6\u5019\u6765\u7bc7\u641e\u641e\u4e86\n\n----\n\n\u6211\u4eec\u90fd\u77e5\u9053\uff0c$cdq$\u5206\u6cbb\u5728\u5904\u7406\u64cd\u4f5c\u9898\uff08\u975e\u6a21\u677f\u504f\u5e8f\u9898\uff09\u662f\u57fa\u4e8e\u65f6\u95f4\u7684\u5206\u6cbb\u7b97\u6cd5\uff0c\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u7ef4--\u65f6\u95f4\u5df2\u7ecf\u6709\u5e8f\n\n\u90a3\u4e48\u5408\u5e76\u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u6309\u7167\u4fee\u6539\u4f4d\u7f6e\u5408\u5e76\u5c31\u597d\u4e86\n\n\u7136\u540e\u628a\u8be2\u95ee\u64cd\u4f5c\u62c6\u6210\u4e24\u4e2a\u524d\u7f00\u67e5\u8be2\uff0c$S[r] - S[l -1]$\n\n\u81f3\u4e8e\u5177\u4f53\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u641e\n\n\n```\nstruct Node{\n\tint opt , id , v;\n\tNode(int opt = 0 , id = 0 , v = 0) {}\n};\n```\n\n$opt = 1$\u65f6\uff0c$id$\u4ee3\u8868\u4fee\u6539\u7684\u4f4d\u7f6e\uff0cv\u4ee3\u8868\u52a0\u4e0a\u7684\u503c\n\n$opt = 2$\u65f6\uff0c$id$\u4ee3\u8868\u9047\u4e0a\u4e86\u4e00\u4e2a\u5de6\u7aef\u70b9\uff0c\u4e5f\u5c31\u662f$L - 1$\uff0c\u800c$v$\u4ee3\u8868\u5b83\u662f\u7b2c\u51e0\u4e2a\u8be2\u95ee\n\n$opt = 3$\u65f6\uff0c$id$\u4ee3\u8868\u9047\u4e0a\u4e86\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u4e5f\u5c31\u662f$R$\uff0c\u800c$v$\u4ee3\u8868\u5b83\u662f\u7b2c\u51e0\u4e2a\u8be2\u95ee\n\n---\n\n\u90a3\u4e48\u6211\u4eec\u5982\u679c\u6309\u7167$id$\u5408\u5e76\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5b83\u524d\u9762\u7684\u6240\u6709\u70b9\u90fd\u5e94\u5f53\u662f\u6ee1\u8db3\u65f6\u95f4\u8f74\u4e0a\u5728\u5b83\u524d\u9762\uff0c\u64cd\u4f5c\u7684\u4f4d\u7f6e\u4e5f\u5728\u5b83\u524d\u9762\u3002\u6240\u4ee5\u5bf9\u4e8e\u70b9$i$\uff0c\u5982\u679c\u5b83\u662f$1$\u64cd\u4f5c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u64cd\u4f5c\u7684\u7b54\u6848\u90fd\u5e94\u5f53\u52a0\u4e0a$v$\u3002$2$\uff0c$3$\u64cd\u4f5c\u6ce5\u840c\u53ef\u4ee5\u81ea\u5df1\u60f3\u60f3\u3002\u56e0\u4e3a\u662f\u6700\u91cd\u8981\u7684\u3002\n\n\u60f3\u5b8c\u518d\u770b\u4e0b\u53bb\u54e6\uff01\n\n$2$\u64cd\u4f5c\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u7b2c$v$\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u51cf\u53bb\u5b83\u524d\u9762\u7684\u589e\u52a0\n\n$3$\u64cd\u4f5c\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u628a\u7b2c$v$\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u52a0\u4e0a\u4ed6\u524d\u9762\u7684\u589e\u52a0\n\n---\n\n$Code$\n\n```\n#include<iostream>\n#include<cstdio>\n#define mid ((l + r) >> 1)\nusing namespace std;\n\nconst int MAXN = 5e5 + 5;\n\nstruct Node{\n\tint opt , id , v;\n\tNode(int opt = 0 , int id = 0 , int v = 0) : opt(opt) , id(id) , v(v) {}\n\t#define opt(i) A[i].opt\n\t#define id(i) A[i].id\n\t#define v(i) A[i].v\n};\n\nint n , m , cnt , qry , ans[MAXN];\nNode A[MAXN << 1] , tmp[MAXN << 1];\n\ninline void insert(int opt , int id , int v) {A[++cnt] = Node(opt , id , v);}\n\nvoid cdq(int l , int r) {\n\tif(l >= r) return ;\n\tcdq(l , mid); cdq(mid + 1 , r);\n\tint pos1 = l , pos2 = mid + 1 , sum = 0;\n\tfor(int tot = l ; tot <= r ; ++tot) {\n\t\t//pos1 \u5165\u961f \n\t\tif((id(pos1) <= id(pos2) && pos1 <= mid) || pos2 > r) {\n\t\t\tif(opt(pos1) == 1) //\u90a3\u4e48\u540e\u9762\u7684\u6240\u6709\u8be2\u95ee\u64cd\u4f5c\u90fd\u5e94\u8be5\u53d7\u5230\u5b83\u7684\u5f71\u54cd \n\t\t\t\tsum += v(pos1);\n\t\t\t//\u81f3\u4e8e\u5176\u5b83\u7684opt\uff0c\u8bc1\u660e\u5b83\u662f\u8be2\u95ee\uff0c\u4e00\u4e2a\u8be2\u95ee\u5bf9\u540e\u9762\u5e94\u8be5\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd \n\t\t\ttmp[tot] = A[pos1++];\n\t\t}\n\t\t//pos2 \u5165\u961f  \n\t\telse {\n\t\t\tif(opt(pos2) == 2)//\u5b83\u5165\u961f\u4e86\uff0c\u8bc1\u660e\u540e\u9762\u7684\u65e0\u8bba\u6240\u6709\u4e1c\u897f\u90fd\u5bf9\u6211\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u4e86\uff0c\u56e0\u4e3aid\u4e00\u5b9a\u6bd4\u6211\u5c0f\uff0c\u65f6\u95f4\u8f74\u4e5f\u5728\u6211\u540e\u9762\uff0c\u6211\u80af\u5b9a\u4e0d\u4f1a\u88ab\u90a3\u4e9b\u4fee\u6539\u800c\u5f71\u54cd \n\t\t\t\tans[v(pos2)] -= sum;\n\t\t\telse if(opt(pos2) == 3)//\u540c\u4e0a\n\t\t\t\tans[v(pos2)] += sum; \n\t\t\t//\u81f3\u4e8e\u5176\u5b83\u7684opt\uff0c\u8bc1\u660e\u5b83\u662f\u4fee\u6539\uff0c\u90a3\u4e48\u4fee\u6539\u5bf9\u5b83\u524d\u9762 \n\t\t\ttmp[tot] = A[pos2++];\n\t\t}\n \t}\n \tfor(int i = l ; i <= r ; ++i) A[i] = tmp[i];\n}\n\nint main() {\n\tscanf(\"%d %d\" , &n , &m);\n\tfor(int i = 1 , x ; i <= n ; ++i) {\n\t\tscanf(\"%d\" , &x);\n\t\tinsert(1 , i , x);\n\t}\n\tfor(int i = 1 , opt , x , k ; i <= m ; ++i) {\n\t\tscanf(\"%d %d %d\" , &opt , &x , &k);\n\t\tif(opt == 1) insert(1 , x , k);\n\t\telse {\n\t\t\tinsert(2 , x - 1 , ++qry);\n\t\t\tinsert(3 , k , qry);\n\t\t}\t\n\t}\n\tcdq(1 , cnt);\n\tfor(int i = 1 ; i <= qry ; ++i) printf(\"%d\\n\" , ans[i]);\n\treturn 0;\n} \n```\n---\n\n\u6700\u540e\u8bf4\u4e00\u53e5\uff0c\u5de6\u95ed\u53f3\u95ed\u5927\u6cd5\u597d\uff01",
        "postTime": 1545471069,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6069\uff0c\u8fd9\u662fAC\u7684\u7b2c\u4e00\u9053\u6811\u72b6\u6570\u7ec4\u5462\u3002\n\n\u672c\u849f\u84bb\u4ee5\u524d\u9047\u5230RMQ\u95ee\u9898\u4e00\u822c\u90fd\u7528\u7ebf\u6bb5\u6811\u6216ST\u8868\uff0c\u53ef\u60dcST\u8868\u4e0d\u652f\u6301\u5728\u7ebf\u4fee\u6539\uff0c\u800c\u7ebf\u6bb5\u6811\u4ee3\u7801\u91cf\u53c8\u592a\u5927\u3002\u3002\n\n\u5982\u4eca\u7ec8\u4e8e\u627e\u5230\u4e86\u6298\u4e2d\u65b9\u6848\uff1a**\u6811\u72b6\u6570\u7ec4\uff01\uff01\uff01\uff01**\n###### \u4ee3\u7801\u91cf\u5c0f\uff0c\u8fd8\u652f\u6301\u4fee\u6539\uff01\n\n\n------------\n\n**\u6811\u72b6\u6570\u7ec4**\u4e5f\u5c31\u662f**\u4e8c\u53c9\u7d22\u5f15\u6811**\uff0c\u53c8\u88ab\u79f0\u4e3a**Fenwick\u6811**\uff0c\u7136\u800c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5b83\u4e0d\u80fd\u88ab\u4e25\u8c28\u5730\u6210\u4e3a\u6811\uff0c\u56e0\u4e3a\u5145\u5176\u91cf\u53ea\u662f\u501f\u7528\u7684\u6811\u5f62\u7ed3\u6784\u7684\u601d\u60f3\uff0c\u4e8e\u5b9e\u73b0\u4e0a\u6709\u7740\u8f83\u5927\u7684\u533a\u522b\u3002\n\n\u6811\u72b6\u6570\u7ec4\u867d\u7136\u8fd0\u7528\u8303\u56f4\u6ca1\u6709\u7ebf\u6bb5\u6811\u90a3\u4e48\u5e7f\uff0c\u4f46\u662f\u5b83\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u662fnlogn\uff0c\u4f46\u6811\u72b6\u6570\u7ec4\u662flogn\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u533a\u95f4\u67e5\u8be2\uff0c\u4f46\u4e0d\u80fd\u8fd0\u7528\u4e8e\u4efb\u610f\u533a\u95f4\u67e5\u8be2\u3002\u8fd9\u4e00\u70b9\u5728\u540e\u9762\u4f1a\u63d0\u5230\u3002\n\n\n------------\n\n\u90a3\u4e48\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\n\n![](http://p0.so.qhimgs1.com/bdr/_240_/t01b3cd94b11782f024.png)\n\n\u7528\u8282\u70b9ci\u50a8\u5b58\u548c\uff0c\u6bd4\u5982\uff1a\n\n- c1=a1\n- c2=a1+a2\n- c3=a3\n- c4=a1+a2+a3+a4\n- c5=a5\n- c6=a5+a6\n- c7=a7\n- c8=a1+...+a8\n\n\u5f53\u7136\u8fd9\u6837\u5b50\u53ef\u80fd\u4e0d\u662f\u5f88\u5bb9\u6613\u770b\u51fa\u5185\u5728\u7684\u8054\u7cfb\uff0c\u56e0\u6b64\u4e0d\u59a8\u5c06\u5176\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u6765\u89c2\u5bdf\uff1a\n\n- c0001=a0001\n- c0010=a0001+a0010\n- c0011=a0011\n- c0100=a0001+a0010+a0011+a0100\n- c0101=a0101\n- c0110=a0101+a0110\n- c0111=a0111\n- c1000=a0001+...+a1000\n\n\u662f\u4e0d\u662f\u53d1\u73b0\u4e86\u4ec0\u4e48\uff1f\n\n\u6ca1\u6709\u5417\uff1f\u597d\u5427\u3002\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u91cc\u7684\u89c4\u5f8b\u5c31\u662f**cn=a(n\u20132^k+1)+...+an**\uff0c\u8fd9\u91cc\u7684k\u6307\u7684\u662f**n\u4e8c\u8fdb\u5236\u672b\u5c3e0\u7684\u6570\u91cf**\u3002\n\n\u83b7\u53d62^k\u7684\u64cd\u4f5c\u6211\u4eec\u79f0\u4e4b\u4e3alowbit\uff0c\u5176\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\nint lowbit(int k){\n\treturn k&(-k);\n}\n```\n\n\u6709\u4e86lowbit\u64cd\u4f5c\u4e4b\u540e\uff0c\u6c42\u548c\u5c31\u5f88\u597d\u5199\u4e86\uff1a\n\n```cpp\nint query(int x){\n\tint ans=0;\n\twhile(x!=0){\n\t\tans+=tree[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\n```\n\n\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u8fd9\u91cc\u6c42\u7684ans\u662f\u533a\u95f4[1,x]\u7684\u548c\uff0c\u60f3\u8981[y,x]\u7684\u548c\u53ea\u80fdquery(x)-query(y-1)\u3002\n\n\u56e0\u6b64\u6211\u4eec\u56de\u5230\u4e86\u4e4b\u524d\u90a3\u4e2a\u95ee\u9898\uff1a\u6811\u72b6\u6570\u7ec4\u4e0d\u80fd\u89e3\u51b3\u6240\u6709\u533a\u95f4\u67e5\u8be2\uff0c**\u5b83\u53ea\u80fd\u89e3\u51b3\u5982\u4e0a\u7684\u6709\u5173\u8054\u7684\u533a\u95f4\u67e5\u8be2\u3002**\n\nemmmm.....\u8fd8\u6709update\u64cd\u4f5c\uff1a\n\n```cpp\nvoid update(int x,int k){\n\twhile(x<=n){\n\t\ttree[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\n```\n\n\u8fd9\u4e2a\u5728\u660e\u767d\u4e86\u6811\u72b6\u6570\u7ec4\u7684\u672c\u8d28\u4e4b\u540e\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u4e0d\u591a\u505a\u53d9\u8ff0\u4e86\u3002\n\n\n------------\n\n\u603b\u7684\u6765\u8bf4\uff0c\u6811\u72b6\u6570\u7ec4\u633a\u597d\u7528\u7684\uff0c\u503c\u5f97\u4e00\u5b66\u3002\u4f46\u5207\u8bb0\uff0c**\u65e0\u8bba\u5982\u4f55\u90fd\u5fc5\u987b\u638c\u63e1\u7ebf\u6bb5\u6811**\uff0c\u56e0\u4e3a\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u90fd\u80fd\u7528\u7ebf\u6bb5\u6811\uff0c\u800c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u5982\u6b64\u3002\n\n\u53e6\u9644AC\u4ee3\u7801\u89c1\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nconst int maxn=500500;\n\nint n,m;\nint tree[maxn<<2];\n\nint lowbit(int k){\n\treturn k&(-k);\n}\n\nvoid update(int x,int k){\n\twhile(x<=n){\n\t\ttree[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\n\nint query(int x){\n\tint ans=0;\n\twhile(x!=0){\n\t\tans+=tree[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tint a;\n\t\tscanf(\"%d\",&a);\n\t\tupdate(i,a);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tif(a==1)update(b,c);\n\t\telse printf(\"%d\\n\",query(c)-query(b-1));\n\t}\n}\n```",
        "postTime": 1528006087,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\u4e4b\u524d\u505a\u8fc7\u73b0\u5728\u662f\u62ff\u51fa\u6765\u590d\u4e60\u4e00\u4e0b\uff0c\u6ca1\u60f3\u5230\u7531\u4e8e\u592a\u4e45\u4e0d\u5199\u5bfc\u81f4\u751f\u758f\u5230\u4ec0\u4e48\u4e1c\u897f\u90fd\u5fd8\u6389\u4e86\u3002\u3002    \n\u53ea\u80fd\u91cd\u5b66\u6811\u72b6\u6570\u7ec4    \n\u8be6\u7ec6\u7684\u8bb2\u89e3\u5f88\u591a\u9898\u89e3\u548c\u535a\u5ba2\u90fd\u5199\u5f97\u5f88\u597d\u4e86\uff0c    \n\u6240\u4ee5\u6211\u53ea\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u6613\u9519\u6216\u8005\u96be\u61c2\u7684\u5730\u65b9     \n\n### \u3010\u9898\u76ee\u5927\u610f\u3011\n\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2     \n\n### \u3010\u6811\u72b6\u6570\u7ec4\u590d\u6742\u5ea6\u3011\n\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u548c\u4fee\u6539\u7684\u590d\u6742\u5ea6\u90fd\u662f\u6700\u574f\u60c5\u51b5nlogn    \n\u6bd4\u7ebf\u6bb5\u6811\u8981\u5c11\u800c\u4e14\u6bd4\u666e\u901a\u6570\u7ec4\u8981\u597d\u5199      \n \n### \u3010\u4ec0\u4e48\u662flowbit\u3011\nlowbit\u6c42\u7684\u662f\u8fd9\u4e2a\u6570\u5728\u4e8c\u8fdb\u5236\u7684\u60c5\u51b5\u4e0b\u6700\u4f4e\u4f4d\u76841\u8868\u793a\u7684\u6570    \n\u6bd4\u59826\uff1a      \n\u5148\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u2014\u2014 110    \n\u6700\u4f4e\u4f4d\u76841\u8868\u793a\u7684\u6570\u5c31\u662f10,   \n\u8f6c\u5316\u4e3a\u5341\u8fdb\u5236\u5c31\u662f2    \n\n### \u3010lowbit\u6709\u4ec0\u4e48\u7528\u3011\n\u77e5\u9053\u4e86\u4e00\u4e2a\u6570\u7684lowbit\u8fd9\u4e2a\u6570\u4fee\u6539\u4e4b\u540e\u4f1a\u5f71\u54cd\u7684\u6570\u662f\u54ea\u4e00\u4e2a    \n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u597d   \n\u8fd8\u662f\u6bd4\u59826\uff1a   \nlowbit(6) = 2,     \n\u6240\u4ee5\u4fee\u6539\u4e866\u4e4b\u540e\u4f1a\u5f71\u54cd\u7684\u4e0b\u4e00\u4e2a\u6570\u5c31\u662f6 + 2 = 8      \n\u7136\u540e8\u5728\u7ee7\u7eed\u5f71\u54cd8 + lowbit(8) \u4e4b\u540e\u7684\u6570     \n\u76f4\u8fbe\u5230\u8fben     \n\n### \u3010\u6c421-i\u7684\u503c\u3011\n\u4e5f\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u4e2dsum\u51fd\u6570\u7684\u4f5c\u7528    \n\u6c42\u51fa1-i\u7684\u503c    \n\u56e0\u4e3aa[i]\u4ee3\u8868\u7684\u4e0d\u4e00\u5b9a\u662fi\u4f4d\u7f6e\u7684\u6570    \n\u8fd8\u6709\u53ef\u80fd\u662f\u548c\u524d\u9762\u7684\u67d0\u4e9b\u6570\u6570\u52a0\u8d77\u6765\u7684\u548c      \n\u6240\u4ee5\u8981\u4e0d\u91cd\u590d\u7684\u627e\u51fa1-i\u4e2d\u7684\u67d0\u4e9ba[i]     \n\u4f7f\u4ed6\u4eec\u4ee3\u8868\u7684\u6570\u521a\u597d\u662f\u4e0d\u91cd\u590d\u800c\u4e14\u4e0d\u5c11\u7684\u51fa\u73b01-i\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570        \n\u51cf\u53bblowbit\u5c31\u662f\u8df3\u8fc7\u90a3\u4e9b\u5b83\u5305\u62ec\u7684\u6570    \n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u597d      \n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#define int long long\n\nusing namespace std;\n\nint read()\n{\n\tint sum = 0,fg = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9'){if(c == '-')fg = -1;c = getchar();}\n\twhile(c >= '0' && c <= '9'){sum = sum * 10 + c - '0';c = getchar();}\n\treturn sum * fg;\n}\nconst int Max = 500005;\nint a[Max];\nint n,m;\n\nint lowbit(int x)\n{\n\treturn x & -x;\n}\n\nvoid add(int x,int y)\n{\n\twhile(x <= n)\n\t{\n\t\ta[x] += y;\n\t\tx += lowbit(x);\n\t}\n}\n\nint sum(int x)\n{\n\tint ans = 0;\n\twhile(x > 0)\n\t{\n\t\tans += a[x];\n\t\tx -= lowbit(x);\n\t}\n\treturn ans;\n}\n\nsigned main()\n{\n\tn = read(),m = read();\n\tfor(register int i = 1;i <= n;++ i)\n\t{\n\t\tint qwq = read();\n\t\tadd(i,qwq);\n\t}\n\tfor(register int i = 1;i <= m;++ i)\n\t{\n\t\tint x = read(),y = read(),z = read();\n\t\tif(x == 1)\n\t\t\tadd(y,z);\n\t\telse\n\t\t\tcout << sum(z) - sum(y - 1) << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573561356,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "# \u849f\u84bb\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff1a\n\u5e9f\u8bdd\u4e0d\u8bf4\uff0c\u62631\u5f00\u8f66\n\n\u64cd\u4f5c1\uff1a \u683c\u5f0f\uff1a1 x k \u542b\u4e49\uff1a\u5c06\u7b2cx\u4e2a\u6570\u52a0\u4e0ak \n\n\u64cd\u4f5c2\uff1a \u683c\u5f0f\uff1a2 x y \u542b\u4e49\uff1a\u8f93\u51fa\u533a\u95f4[x,y]\u5185\u6bcf\u4e2a\u6570\u7684\u548c\n\n\u90a3\u4e48\u8fd9\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\n### \u64cd\u4f5c1\uff1a\n### a[x]\u52a0Y\u4ee5\u540e\uff0c\u7ef4\u62a4\u6240\u6709\u5305\u542bx\u8fd9\u4e00\u9879\u7684c \n```\nvoid add(int x, int y){\n\tfor (; x <= n; x += x & -x) c[x] += y;\t\n}\n```\n### \u64cd\u4f5c2\uff1a\n### \u6c42a[1]\u5230a[n]\u4e4b\u95f4\u7684\u548c\n```\nint sum(int n){\n\tint ret = 0;\n\tfor ( ; n ; n ^= n & -n) ret += c[n];  \n        // n ^= n & -n \u5c31\u662fn\u51cf\u53bbn\u7684\u4e8c\u8fdb\u5236\u6700\u540e1\u4e2a1 \n\treturn ret;\n} \n```\n\u8fd9\u6837\u4ee3\u7801\u5c31\u57fa\u672c\u597d\u4e86\n\n# AC\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n, m;//\u9898\u76ee\u4e2d\u7684\u53d8\u91cf\nint c[500005];\nvoid add(int x, int y){\n    for (; x <= n; x += x & -x) c[x] += y;\t\n}\nint sum(int n){\n    int ret = 0;\n    for ( ; n ; n ^= n & -n) ret += c[n];\n    return ret;\n}\nint main(){\n    cin>>n>>m;//\u8bfb\u5165\n    for (int i=1;i<=n;i++){\n        int x;\n        cin>>x;//\u8bfb\u5165\u6570\u5217\u7b2ci\u9879\u7684\u521d\u59cb\u503c\n        add(i, x);//a[i]=x \n    }\n    for (int i=1;i<=m;i++){\n        int ope,x,y;\n        cin>>ope>>x>>y;//\u8bfb\u5165\u64cd\u4f5c\n        if (ope == 1) add(x, y);//\u64cd\u4f5c1\u7684\u64cd\u4f5c\n        else cout<<sum(y)-sum(x - 1)<<endl;//\u64cd\u4f5c2\u7684\u64cd\u4f5c\n    }\n    return\n}\n```\n\n## \u7ba1\u7406\u5458\u6c42\u901a\u8fc7\n# \u5c31\u6b64\u4e3a\u6b62\u4e86,\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\u54e6~",
        "postTime": 1569597070,
        "uid": 119949,
        "name": "\u6797\u6631\u51ef",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u54b1\u8981\u6765\u8d21\u732e\u4e00\u7bc7 PY \u9898\u89e3\uff0c\u6ca1\u60f3\u5230\u5427\uff01\n\n\u5c45\u7136\u4e0d\u4f1a\u6253\u6811\u72b6\u6570\u7ec4\u4e86\u6211...\n\n\n\u7406\u8bba\u4e0a\u7684\u73a9\u610f\u513f\u4e0d\u7528\u8bf4\u592a\u591a\uff1f\u53cd\u6b63\u6811\u72b6\u6570\u7ec4\u5927\u5bb6\u90fd\u4f1a\uff1f\n\n\n\u54b1\u6765\u8c08\u8c08\u8bed\u8a00\u597d\u4e86\uff01\n\n\u9996\u5148\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf f \u6570\u7ec4\uff0c\u6211\u4eec\u600e\u4e48\u5f00\u5462\uff1f\n\n\u4e0a\u7f51\u641c\u7d22\u53ef\u5f97\uff1a $f=[0 ~for~ i ~in~ range(500005)]$ \u5c31\u662f\u4ee3\u7801\u6253\u5f00\u7684\u6b63\u786e\u65b9\u5f0f\n\n\u5176\u4ed6\u7684\u53d8\u91cf\u7684\u8bdd\uff0c\u5176\u5b9e\u5199\u5728\u524d\u9762\uff0c\u7136\u540e\u4ed8\u4e2a\u521d\u503c 0 \u5c31\u597d\u4e86\uff08\u867d\u8bf4\u54b1\u5e76\u6ca1\u6709\u8fd9\u4e48\u505a\uff0c\u4ee5\u81f3\u4e8e\u4f20\u53c2\u6570 +1 \uff09\n\n\u81f3\u4e8e\u522b\u7684\u64cd\u4f5c\u8c8c\u4f3c\u548c c++ \u6ca1\u4ec0\u4e48\u533a\u522b\n\n\u6ce8\u610f split \u5c31\u662f\u4e86\uff08~~\u5c24\u5176\u662f $A+B~ problem$ WA \u6389\u7684\u540c\u5b66\uff0c\u7279\u6307\u81ea\u5df1~~\uff09\n\n# Code \n\n\u8fd9\u4efd\u4ee3\u7801\u8fd8\u662f\u80a5\u80a0\u4f18\u79c0\u7684\uff0c\u5c3d\u7ba1\u5b83 T \u4e0a\u4e86\u5929\n\n```\n\nf=[0 for i in range(500005)]\n\n\ndef lowbit(x):\n    return x&(-x)\n\ndef add(x, n, k):\n    while x<=n :\n        f[x]+=k\n        x+=lowbit(x)\n\ndef ask(x):\n    Res=0\n    while x>0:\n        Res+=f[x]\n        x-=lowbit(x)\n    return Res\n\n\n\ns=input().split()\nn=int(s[0])\nm=int(s[1])\ns=input().split()\nfor i in range(1,n+1):\n    add(i, n, int(s[i-1]))\n\nwhile m>0:\n    s=input().split()\n    op=int(s[0])\n    x=int(s[1])\n    y=int(s[2])\n    if op==1:\n        add(x, n, y)\n    else:\n        print(ask(y)-ask(x-1))\n    m=m-1\n\n```\n\n\n\n\n",
        "postTime": 1571296767,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "~~\u5bf9\u4e8e\u8fd9\u79cd\u660e\u663e\u5c31\u662f\u3010\u6811\u72b6\u6570\u7ec4 or \u7ebf\u6bb5\u6811\u3011\u7684\u9898\u76ee\uff0c\u5f53\u7136\u5c31\u8981\u7528\u5206\u5757\u641e\u641e\u4e86~~\uff0c\n\u6ca1\u60f3\u5230\uff0c\u5206\u5757\u771f\u7684\u6c34\u8fc7\u53bb\u4e86\u3002\u3010\\\u6ed1\u7a3d\u3011\n\n\n\n------------\n\n[\u70b9\u51fb\u8fd9\u91cc\uff0c\u83b7\u5f97\u66f4\u597d\u7684\u89c2\u8d4f\u4f53\u9a8c](https://www.luogu.org/blog/113613/ti-xie-p3374-shu-zhuang-shuo-zu-yi)\n\n### 0\u3001\u5206\u5757\u7528\u9014\n\n\u5206\u5757\u7684\u7528\u9014\u5f88\u5e7f\u6cdb\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u662f\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u7528\u5206\u5757\u8bd5\u8bd5\u770b\uff0c~~\u4f46\u5f88\u5bb9\u6613\u8d85\u65f6\uff0c\u614e\u7528\uff01\uff01\uff01~~\u8fd8\u6709\u4e00\u4e9b\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u96be\u4ee5\u66f4\u65b0\u7684\u9898\u76ee\uff08\u4f8b\u5982\u533a\u95f4\u4f17\u6570\uff09\uff0c\u7528\u5206\u5757\u4e5f\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u3002\u5f53\u7136\uff0c\u5206\u5757\u4e00\u5b9a\u8981\u614e\u7528\uff01\n\u6211\u53ea\u6709\u5728\u90a3\u4e9b\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u8c03\u4e0d\u51fa\u6765\u6216\u65f6\u95f4\u4e0d\u591f\u65f6\u624d\u4f1a\u6253\u5206\u5757\u3002\n\n### 1\u3001Lv.1 \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\n\n\u8fd9\u90e8\u5206\u5341\u5206\u7b80\u5355\uff0c\u5bf9\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u5c31\u8ddf\u66b4\u529b\u6ca1\u5565\u4e24\u6837\uff0c\u76f4\u63a5\u6539\u5c31\u884c\u4e86\u3002\u770b\u4ee3\u7801\n```cpp\nvoid change(int x,int k)\n{\n  int p=pos[x];//pos\u50a8\u5b58\u7684\u662f\u8fd9\u4e2a\u8282\u70b9\u50a8\u5b58\u5728pos[x]\u8fd9\u4e2a\u5757\u4e2d\n  sum[p]+=k;//\u7ef4\u62a4\u533a\u95f4\u52a0\u548c\n  a[x]+=k;//\u66b4\u529b\u4fee\u6539\n}\n```\n\u770b\u5230\u6ca1\u6709\uff0c\u771f\u7684\u53ea\u8981$O(1)$\uff01\uff01\uff01\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u662f\u533a\u95f4\u4fee\u6539\u4e86\u3002\u5bf9\u4e8e\u5206\u5757\uff0c\u6709\u4e00\u70b9\u601d\u60f3\u975e\u5e38\u91cd\u8981\uff0c\u90a3\u5c31\u662f**\u201c\u5927\u6bb5\u7ef4\u62a4\uff0c\u5c0f\u6bb5\u66b4\u529b\u201d**\u3002\u4efb\u4f55\u5206\u5757\u7b97\u6cd5\u90fd\u662f\u6ee1\u8db3\u4e0a\u8ff0\u601d\u60f3\u7684\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u533a\u95f4$(l,r)$\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1\u3001$pos[l]==pos[r]$ \u4e5f\u5c31\u662f\u8bf4$l,r$\u5728\u540c\u4e00\u4e2a\u5757\u5185\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u76f4\u63a5\u66b4\u529b\u6c42\u89e3$O(l-r+1)$\u7b97\u51fa\u7b54\u6848\u3002\n\n2\u3001$pos[l]!=pos[r]$ \u5373$l,r$\u4e0d\u5728\u540c\u4e00\u4e2a\u5757\u5185\u3002\u90a3\u6211\u4eec\u76f4\u63a5\u7d2f\u52a0\u4e2d\u95f4\u6ee1\u8db3\u6574\u5757\u7684\u533a\u95f4\uff0c\u7528\u7ef4\u62a4\u597d\u7684\u533a\u95f4\u548c\u7d2f\u52a0\u8d77\u6765\u3002\u5bf9\u4e8e\u5de6\u53f3\u4e24\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\uff0c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u6c42\u89e3\u3002\n```cpp\nint ask(int l,int r)\n{\n  int p=pos[l],q=pos[r];\n  int s=0;\n  if(p==q)//\u60c5\u51b51\n  {\n  \tfor(int i=l;i<=r;i++)\n  \t{\n  \t\ts+=a[i];//\u66b4\u529b\n  \t}\n  \treturn s;\n  }\n  else//\u60c5\u51b52\n  {\n  \tfor(int i=p+1;i<=q-1;i++)//\u5927\u6bb5\u7ef4\u62a4\n  \t{\n  \t\t\ts+=sum[i];\n  \t}\n  \tfor(int i=l;i<=R[p];i++)//\u5c0f\u6bb5\u66b4\u529b\n  \t{\n  \t\t\ts+=a[i];\n  \t}\n  \tfor(int i=L[q];i<=r;i++)\n  \t{\n  \t\t\ts+=a[i];\n  \t}\n\treturn s;\n  }\n}\n```\n\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\sqrt n)$,\u56e0\u4e3a\u6bcf\u6b21\u67e5\u8be2\u6700\u591a\u5c31\u662f\u7528\u5230\u6240\u6709\u7684\u5757\uff0c\u4e5f\u5c31\u662f$\\sqrt n$\u4e2a\u5757\uff0c\u6240\u4ee5\u662f\u8fd9\u6837\u3002\u4f46\u76f8\u6bd4$log_2 n$\u6765\u8bf4\uff0c\u8fd8\u662f\u7a0d\u5fae\u900a\u8272\u7684\u3002\n\n### 3\u3001Lv.2 \u533a\u95f4\u4fee\u6539\u3001\u533a\u95f4\u8be2\u95ee\n\n\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811**\u201c\u61d2\u6807\u8bb0\u201d**\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5206\u5757\u4e5f\u4f1a\u4e13\u95e8\u7528\u4e00\u4e2a\u6570\u7ec4\uff0c\u6765\u8bb0\u5f55**\u6574\u4e2a\u533a\u95f4\u4e00\u8d77\u52a0\u7684\u503c**\u3002\u6ce8\u610f\uff01\u662f\u6574\u4e2a\u533a\u95f4\u4e00\u8d77\u52a0\u7684\u503c\uff0c\u5982\u679c\u662f\u4fee\u6539\u65f6\u5de6\u53f3\u4e24\u8fb9\u4e0d\u5b8c\u6574\u7684\u5757\u65f6\uff0c\u6211\u4eec\u8fd8\u662f\u66b4\u529b\u4fee\u6539\u3002\n```cpp\nvoid change(int l,int r,long long d)\n{\n\tint p=pos[l],q=pos[r];\n\tif(p==q){\n\t\tfor(int i=l;i<=r;i++) a[i]+=d;\n\t\tsum[p]+=d*(r-l+1);//\u7ef4\u62a4\u533a\u95f4\u548c\n\t}\n\telse{\n\t\tfor(int i=p+1;i<=q-1;i++)//\u5927\u6bb5\u66b4\u529b\n\t\t{\n\t\t\tadd[i]+=d;//\u7ef4\u62a4\u533a\u95f4\u52a0\u503c\n\t\t}\n\t\tfor(int i=l;i<=R[p];i++)//\u5c0f\u6bb5\u66b4\u529b\n\t\t{\n\t\t\ta[i]+=d;\n\t\t}\n\t\tsum[p]+=d*(R[p]-l+1);\n\t\tfor(int i=L[q];i<=r;i++) a[i]+=d;\n\t\t\n\t\tsum[q]+=d*(r-L[q]+1);\n\t}\n}\n```\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u533a\u95f4\u4fee\u6539\u662f\u4e00\u6837\u7684\uff0c\u8bc1\u660e\u4e5f\u5dee\u4e0d\u591a\uff0c\u90fd\u662f$O(\\sqrt n)$\u3002\n\n\u533a\u95f4\u67e5\u8be2\u5c31\u548c\u4e4b\u524d\u5dee\u4e0d\u591a\u4e86\u3002\n```cpp\nlong long ask(int l,int r)\n{\n\tint p=pos[l],q=pos[r];\n\tlong long ans=0;\n\tif(p==q) {\n\t\tfor(int i=l;i<=r;i++) ans+=a[i];\n\t\tans+=add[p]*(r-l+1);//\u6ce8\u610f\u8981\u52a0app\n\t}\n\telse{\n\t\tfor(int i=p+1;i<=q-1;i++)\n\t\t{\n\t\t\tans+=sum[i]+add[i]*(R[i]-L[i]+1);\n\t\t}\n\t\tfor(int i=l;i<=R[p];i++)\n\t\t{\n\t\t\tans+=a[i];\n\t\t}\n\t\tans+=add[p]*(R[p]-l+1);\n\t\tfor(int i=L[q];i<=r;i++)\n\t\t{\n\t\t\tans+=a[i];\n\t\t}\n\t\tans+=add[q]*(r-L[q]+1);\n\t}\n\treturn ans;\n}\n```\n\n### 3\u3001\u521d\u59cb\u5316\n\n\u521d\u59cb\u5316\u5c31\u662f\u8981\u7ed9\u6bcf\u4e00\u4e2a\u5757\u8bbe\u7f6e\u5de6\u53f3\u8fb9\u754c\uff0c\u6bcf\u4e00\u4e2a\u70b9\u8bbe\u7f6e\u5b83\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u5757\uff0c\u5e76\u4e14\u5f04\u597d\u533a\u95f4\u52a0\u548c\u7684\u521d\u59cb\u503c\u5c31OK\u4e86\uff01\n\n```cpp\nvoid build()\n{\n  int t=sqrt(n);//\u5171\u6709t\u4e2a\u5757\n  for(int i=1;i<=t;i++)//\u8bbe\u7f6e\u5de6\u53f3\u8fb9\u754c\n  {\n\t  L[i]=(i-1)*t+1;\n\t  R[i]=i*t;\n  }\n  if(R[t]<=n)//\u7279\u76d8\u6700\u540e\u4e00\u4e2a\u5feb\uff08\u53ef\u80fd\u4e0d\u5b8c\u6574\uff09\n  {\n\t  t++;\n\t  L[t]=R[t-1]+1;\n\t  R[t]=n;\n  }\n  for(int i=1;i<=t;i++)//\u521d\u59cb\u5316\u533a\u95f4\u52a0\u503c\u548c\u8fd9\u4e2a\u70b9\u5c5e\u4e8e\u90a3\u4e2a\u5757\n  {\n\t for(int j=L[i];j<=R[i];j++)\n\t {\n\t  \tpos[j]=i;\n\t  \tsum[i]+=a[j];\n\t  }\n  }\n}\n```\n\u521d\u59cb\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6**\u5e94\u8be5**\u662f$O(n)$\u3002\n\n\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(n\\sqrt{n})$\u3002\n\n### 4\u3001\u5206\u5757\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\u7684\u6bd4\u8f83\n##### 1\u3001\u65f6\u95f4\u590d\u6742\u5ea6\n\u6811\u72b6\u6570\u7ec4<=\u7ebf\u6bb5\u6811\uff08\u770b\u5e38\u6570\uff0c\u4e00\u822c\u7ebf\u6bb5\u6811\u6bd4\u8f83\u5927\uff09<\u5206\u5757\n##### 2\u3001\u8c03\u8bd5\u96be\u5ea6\uff08\u4e2a\u4eba\u89c2\u70b9\uff09\n\u5206\u5757<\u6811\u72b6\u6570\u7ec4<\u7ebf\u6bb5\u6811\n##### 3\u3001\u53ef\u6269\u5c55\u6027\uff08\u4e2a\u4eba\u89c2\u70b9\uff09\n\u5206\u5757>=\u7ebf\u6bb5\u6811>\u6811\u72b6\u6570\u7ec4\n##### 4\u3001\u7801\u957f\n\u7ebf\u6bb5\u6811>\u5206\u5757>\u6811\u72b6\u6570\u7ec4\n\n### 5\u3001\u5206\u5757\u7684\u5178\u578b\u4f8b\u9898\n1\u3001P4168 [\u84b2\u516c\u82f1](https://www.luogu.org/problemnew/show/P4168)\n\u7b80\u8981\u6982\u62ec:\u79bb\u6563\u5316+\u533a\u95f4\u4f17\u6570\n\n2\u3001\u5176\u4ed6\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u6a21\u677f\u9898\u3002(P3372~P3374\uff0cP3368)\n\n### 6\u3001\u672c\u9898\u4ee3\u7801\n\u89e3\u91ca\u5206\u6e05\u695a\u4e86\uff0c~~\u4e0d\u7528\u518d\u6ce8\u91ca\u4e86\u5427~~\u3002\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,a[10000001],L[10000001],R[10000001],pos[10000001],sum[10000001];\ninline void read(int &x){\n    x=0; bool z=0; char c=getchar();\n    while (!isdigit(c)){\n        if (c=='-') z=1;\n        c=getchar();\n    }\n    while (isdigit(c)) x=x*10+c-'0',c=getchar();\n    if (z) x=-x;\n}\ninline void write(int x){\n    int y=10;\n    if (x<0) putchar('-'),x=-x;\n    while (x>=y) y*=10;\n    y/=10;\n    while (y) putchar(x/y%10+'0'),y/=10;\n    putchar('\\n');\n}\nnamespace ILoveKKK{\n  void build()\n  {\n\t  int t=sqrt(n);\n\t  for(int i=1;i<=t;i++)\n\t  {\n\t  \tL[i]=(i-1)*t+1;\n\t  \tR[i]=i*t;\n\t  }\n\t  if(R[t]<=n)\n\t  {\n\t  \tt++;\n\t\tL[t]=R[t-1]+1;\n\t  \tR[t]=n;\n\t  }\n\t  for(int i=1;i<=t;i++)\n\t  {\n\t  \tfor(int j=L[i];j<=R[i];j++)\n\t  \t{\n\t  \t\tpos[j]=i;\n\t  \t\tsum[i]+=a[j];\n\t  \t}\n\t  }\n  }\n  void change(int x,int k)\n  {\n  \tint p=pos[x];\n  \tsum[p]+=k;\n  \ta[x]+=k;\n  }\n  int ask(int l,int r)\n  {\n  \tint p=pos[l],q=pos[r];\n  \tint s=0;\n  \tif(p==q)\n  \t{\n  \t\tfor(int i=l;i<=r;i++)\n  \t\t{\n  \t\t\ts+=a[i];\n  \t\t}\n  \t\treturn s;\n  \t}\n  \telse{\n  \t\tfor(int i=p+1;i<=q-1;i++)\n  \t\t{\n  \t\t\ts+=sum[i];\n  \t\t}\n  \t\tfor(int i=l;i<=R[p];i++)\n  \t\t{\n  \t\t\ts+=a[i];\n  \t\t}\n  \t\tfor(int i=L[q];i<=r;i++)\n  \t\t{\n  \t\t\ts+=a[i];\n  \t\t}\n\t\treturn s;\n  \t}\n  \t\n  }\n}\nint main()\n{\n\tread(n);read(m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tread(a[i]);\n\t}\n\tILoveKKK::build();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint xx;\n\t\tread(xx);\n\t\tif(xx==1)\n\t\t{\n\t\t\tint aa,bb;\n\t\t\tread(aa);read(bb);\n\t\t\tILoveKKK::change(aa,bb);\n\t\t}\n\t\telse{\n\t\t\tint ll,rr;\n\t\t\tread(ll);read(rr);\n\t\t\twrite(ILoveKKK::ask(ll,rr));\n\t\t}\n\t}\n}\n```\n\u6700\u540e\u63d0\u9192\u5927\u5bb6:**\u5206\u5757\u867d\u597d\uff0c\u4f46\u4f7f\u7528\u9700\u8c28\u614e**\uff01\uff01\uff01",
        "postTime": 1550102238,
        "uid": 113613,
        "name": "ACgod",
        "ccfLevel": 6,
        "title": "\u9898\u89e3\u3010P3374\u3011\u6811\u72b6\u6570\u7ec4\u4e00"
    },
    {
        "content": "[P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1](https://www.luogu.org/problemnew/show/P3374)\n\n\u6811\u72b6\u6570\u7ec4\n\n\u6811\u72b6\u6570\u7ec4\uff0c\u662f\u4e00\u4e2a\u67e5\u8be2\u548c\u4fee\u6539\u590d\u6742\u5ea6\u90fd\u4e3alog(n)\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e3b\u8981\u7528\u4e8e\u67e5\u8be2\u4efb\u610f\u4e24\u4f4d\u4e4b\u95f4\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u4f46\u662f\u6bcf\u6b21\u53ea\u80fd\u4fee\u6539\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u3002\n\n\u7ecf\u8fc7\u7b80\u5355\u4fee\u6539\u53ef\u4ee5\u5728log(n)\u7684\u590d\u6742\u5ea6\u4e0b\u8fdb\u884c\u8303\u56f4\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u65f6\u53ea\u80fd\u67e5\u8be2\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u503c(\u5982\u679c\u52a0\u5165\u591a\u4e2a\u8f85\u52a9\u6570\u7ec4\u5219\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2)\u3002\n\n\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff08\u7b97\u6cd5\uff09\u5e76\u6ca1\u6709C++\u548cJava\u7684\u5e93\u652f\u6301\uff0c\u9700\u8981\u81ea\u5df1\u624b\u52a8\u5b9e\u73b0\u3002\n\n\u5728Competitive Programming\u7684\u7ade\u8d5b\u4e2d\u88ab\u5e7f\u6cdb\u7684\u4f7f\u7528\u3002\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u5f88\u50cf\uff0c\u4f46\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u57fa\u672c\u4e0a\u90fd\u80fd\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u800c\u7ebf\u6bb5\u6811\u80fd\u89e3\u51b3\u7684\u6811\u72b6\u6570\u7ec4\u4e0d\u4e00\u5b9a\u80fd\u89e3\u51b3\u3002\n\n\u76f8\u6bd4\u8f83\u800c\u8a00\uff0c\u6811\u72b6\u6570\u7ec4\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002\n\n\u6811\u72b6\u6570\u7ec4\u6982\u5ff5\n\n\u5047\u8bbe\u6570\u7ec4a[1..n]\uff0c\u90a3\u4e48\u67e5\u8be2a[1]+...+a[n]\u7684\u65f6\u95f4\u662flog\u7ea7\u522b\u7684\uff0c\u800c\u4e14\u662f\u4e00\u4e2a\u5728\u7ebf\u7684\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u968f\u65f6\u4fee\u6539\u67d0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u590d\u6742\u5ea6\u4e5f\u4e3alog\u7ea7\u522b\u3002\n\n![](http://odwv9d2u8.bkt.clouddn.com/17-10-22/33371936.jpg)\n\n\u4ee4\u8fd9\u68f5\u6811\u7684\u7ed3\u70b9\u7f16\u53f7\u4e3aC1\uff0cC2...Cn\u3002\u4ee4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u4e3a\u8fd9\u68f5\u6811\u7684\u503c\u7684\u603b\u548c\uff0c\u90a3\u4e48\u5bb9\u6613\u53d1\u73b0\uff1a\n\nC1 = A1\n\nC2 = A1 + A2\n\nC3 = A3\n\nC4 = A1 + A2 + A3 + A4\n\nC5 = A5\n\nC6 = A5 + A6\n\nC7 = A7\n\nC8 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8\n\n...\n\nC16 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8 + A9 + A10 + A11 + A12 + A13 + A14 + A15 + A16\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u6027\u8d28\uff1a\n\n\u8bbe\u8282\u70b9\u7f16\u53f7\u4e3ax\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7ba1\u8f96\u7684\u533a\u95f4\u4e3a2^k\uff08\u5176\u4e2dk\u4e3ax\u4e8c\u8fdb\u5236\u672b\u5c3e0\u7684\u4e2a\u6570\uff09\u4e2a\u5143\u7d20\u3002\u56e0\u4e3a\u8fd9\u4e2a\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5fc5\u7136\u4e3aAx\uff0c\n\n\u6240\u4ee5\u5f88\u660e\u663e\uff1aCn = A(n \u2013 2^k + 1) + ... + An\n\n\u7b97\u8fd9\u4e2a2^k\u6709\u4e00\u4e2a\u5feb\u6377\u7684\u529e\u6cd5\u3002\n\nlowbit\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u6c42\u67d0\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u4f4e\u7684\u4e00\u4f4d1\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0cx = 6\uff0c\u5b83\u7684\u4e8c\u8fdb\u5236\u4e3a110\uff0c\u90a3\u4e48lowbit(x)\u5c31\u8fd4\u56de2\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4f4d1\u8868\u793a2\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5982\u4e0b\u5373\u53ef\uff1a\n```\nint lowbit(int x)\n{\n\treturn x&(x^(x-1));\n}\n```\n\n\u5229\u7528\u673a\u5668\u8865\u7801\u7279\u6027\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210\n```\nint lowbit(int x)\n{\n\treturn x&-x;\n}\n```\n\n\u5f53\u60f3\u8981\u67e5\u8be2\u4e00\u4e2aSUM(n)(\u6c42a[n]\u7684\u548c\uff09\uff0c\u53ef\u4ee5\u4f9d\u636e\u5982\u4e0b\u7b97\u6cd5\u5373\u53ef\uff1a\n\nstep1:\u3000\u4ee4sum = 0\uff0c\u8f6c\u7b2c\u4e8c\u6b65\uff1b\nstep2:\u3000\u5047\u5982n <= 0\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u8fd4\u56desum\u503c\uff0c\u5426\u5219sum = sum + Cn\uff0c\u8f6c\u7b2c\u4e09\u6b65\uff1b\nstep3: \u4ee4n = n \u2013 lowbit(n)\uff0c\u8f6c\u7b2c\u4e8c\u6b65\u3002\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e00\u4e2a\u4e2a\u533a\u95f4\u7684\u548c\u5168\u90e8\u52a0\u8d77\u6765\uff0c\u4e3a\u4ec0\u4e48\u662f\u6548\u7387\u662flog(n)\u7684\u5462\uff1f\u4ee5\u4e0b\u7ed9\u51fa\u8bc1\u660e\uff1a\n\nn = n \u2013 lowbit(n)\u8fd9\u4e00\u6b65\u5b9e\u9645\u4e0a\u7b49\u4ef7\u4e8e\u5c06n\u7684\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4e2a1\u51cf\u53bb\u3002\u800cn\u7684\u4e8c\u8fdb\u5236\u91cc\u6700\u591a\u6709log(n)\u4e2a1\uff0c\u6240\u4ee5\u67e5\u8be2\u6548\u7387\u662flog(n)\u7684\u3002\n\n\u90a3\u4e48\u4fee\u6539\u5462\uff0c\u4fee\u6539\u4e00\u4e2a\u8282\u70b9\uff0c\u5fc5\u987b\u4fee\u6539\u5176\u6240\u6709\u7956\u5148\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a\u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6700\u591a\u6709log(n)\u7684\u7956\u5148\u3002\n\n\u6240\u4ee5\u4fee\u6539\u7b97\u6cd5\u5982\u4e0b\uff08\u7ed9\u67d0\u4e2a\u7ed3\u70b9i\u52a0\u4e0ax\uff09\uff1a\n\nstep1: \u5f53i > n\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u5426\u5219\u8f6c\u7b2c\u4e8c\u6b65\uff1b\nstep2: Ci = Ci + x\uff0c i = i + lowbit(i)\u8f6c\u7b2c\u4e00\u6b65\u3002\ni = i +lowbit(i)\u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u4e5f\u53ea\u662f\u4e00\u4e2a\u628a\u672b\u5c3e1\u8865\u4e3a0\u7684\u8fc7\u7a0b\u3002\n\n\u5bf9\u4e8e\u6570\u7ec4\u6c42\u548c\u6765\u8bf4\u6811\u72b6\u6570\u7ec4\u7b80\u76f4\u592a\u5feb\u4e86!\n```\n\u6ce8\uff1a\n\u6c42lowbit(x)\u7684\u5efa\u8bae\u516c\u5f0f\uff1a\n\nlowbit(x):=x&-x;\nlowbit(x):=x&(x^(x-1));\nlowbit(x)\u5373\u4e3a2^k\u7684\u503c\u3002\n```\n\u5145\u5206\u6027\n\n\u5f88\u5bb9\u6613\u77e5\u9053C8\u8868\u793aA1\uff5eA8\u7684\u548c\uff0c\u4f46\u662fC6\u5374\u662f\u8868\u793aA5\uff5eA6\u7684\u548c\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u4ea7\u751f\u8fd9\u6837\u7684\u533a![]\u522b\u7684\u5462\uff1f\u6216\u8005\u8bf4\u53d1\u660e\u5979\u7684\u4eba\u4e3a\u4ec0\u4e48\u8fd9\u6837\u533a\u522b\u5bf9\u5f85\u5462\uff1f\n\n\u7b54\u6848\u662f\uff0c\u8fd9\u6837\u4f1a\u4f7f\u64cd\u4f5c\u66f4\u7b80\u5355\uff01\u770b\u5230\u8fd9\u76f8\u4fe1\u6709\u4e9b\u4eba\u5c31\u6709\u4e9b\u611f\u89c9\u4e86\uff0c\u4e3a\u4ec0\u4e48\u590d\u6742\u5ea6\u88ablog\u4e86\u5462\uff1f\n\n\u53ef\u4ee5\u770b\u5230\uff0cC8\u53ef\u4ee5\u770b\u4f5cA1\uff5eA8\u7684\u5de6\u534a\u8fb9\u548c+\u53f3\u534a\u8fb9\u548c\uff0c\u800c\u5176\u4e2d\u5de6\u534a\u8fb9\u548c\u662f\u786e\u5b9a\u7684C4\uff0c\u53f3\u534a\u8fb9\u5176\u5b9e\u4e5f\u662f\u540c\u6837\u7684\u89c4\u5219\u628aA5\uff5eA8\u4e00\u5206\u4e3a\u4e8c\u2026\u2026\u7ee7\u7eed\u4e0b\u53bb\u90fd\u662f\u4e00\u5206\u4e3a\u4e8c\u76f4\u5230\u4e0d\u80fd\u5206\u6811\u72b6\u6570\u7ec4\u5de7\u5999\u5730\u5229\u7528\u4e86\u4e8c\u5206\uff0c\u6811\u72b6\u6570\u7ec4\u5e76\u4e0d\u795e\u79d8\uff0c\u5173\u952e\u662f\u5de7\u5999\uff01\n(https://s1.ax1x.com/2018/08/09/PyKpDg.png)\n\n```\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#include<cstdio>\n#include<cstdlib>\n#include<set>\n#include<map>\n#include<queue>\n#include<stack>\n#include<vector>\nusing namespace std; \nconst int N = 5*1e5 +100;\nint arr[N],c[N],n;\n\nint lowbit(int x)\n{\n    return x & (-x);\n}\nvoid update(int id,int x)\n{\n    while(id<=n)\n    {\n        c[id]+=x;\n        id += lowbit(id);\n    }\n}\n\nint query(int id)\n{\n    int ans = 0;\n    while(id!=0)\n    {\n        ans+=c[id];\n        id-=lowbit(id);\n    }\n    return ans;\n}\n\nint main()\n{\n    int m;\n    cin >> n >> m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>arr[i];\n        update(i,arr[i]);\n    }\n    while(m--)\n    {\n       int op,x,y;\n       cin >> op >> x >> y;\n       if(op==1)\n        update(x,y);\n       if(op==2)\n        cout << query(y) - query(x-1) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1533814698,
        "uid": 107307,
        "name": "\u5f7c\u5cb8\u6731\u7802",
        "ccfLevel": 0,
        "title": "\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "# \u6811\u72b6\u6570\u7ec4\uff08Binary Index Tree\uff09\n\n\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u79cd\u6811\u72b6\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u533a\u95f4\u67e5\u8be2\uff0c\u5355\u70b9\u4fee\u6539\u3002\n\n## \u6982\u89c8\n\n\u7ea6\u5b9a\u8282\u70b9`Node`\u5982\u4e0b\u3002\n\n```c++\nstruct Node {\n  int num; \n  int key;\n};\n```\n\n\u5c06\u6811\u72b6\u6570\u7ec4\uff08Binary Index Tree\uff09\u4f5c\u4e3a\u4e00\u7c7b\u3002\n\n```c++\nclass BIT {\n public:\n  int n;\n  Node a[maxn], c[maxn];\n  int lowbit(int x);\n  void update(int k, int x);\n  int getSum(int x);\n  int ask(int l, int r);\n  int findKth(int k);\n};\n```\n\n## lowbit\n\n`lowbit`\u662f\u4e00\u79cd\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u4e3a1\u7684bit\u4f4d\u7684\u64cd\u4f5c\u3002\n\n```c++\ninline int lowbit(int x) {\n  return x & (-x);\n}\n```\n\n## update\n\n\u66f4\u65b0\u64cd\u4f5c\uff0c\u4fee\u6539\u5355\u70b9\u7684\u6570\u636e\u3002\n\n\u5355\u6b21\u66f4\u65b0\u7684\u590d\u6742\u5ea6\u662f$log N$\u7ea7\u522b\u7684\u3002\n\n```c++\nvoid BIT::update(int k, int x) {\n  for (int i = k; i <= n; i += lowbit(i)) {\n    c[i].key += x;\n  }\n}\n```\n\n## getSum\n\n\u67e5\u8be2\u64cd\u4f5c\uff0c\u83b7\u5f97$[1, x]$\u7684\u503c\u3002\n\n\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\u662f$log N$\u7ea7\u522b\u7684\u3002\n\n```c++\nint BIT::getSum(int x) {\n  int ans = 0;\n  for (int i = x; i; i -= lowbit(i)) {\n    ans += c[i].key;\n  }\n  return ans;\n}\n```\n\n## ask\n\n\u67e5\u8be2\u64cd\u4f5c\uff0c\u83b7\u5f97$[l, r]$\u7684\u503c\u3002\n\n\u5b9e\u73b0\u65b9\u6cd5\u662f\u6c42\u4e24\u6b21`getSum`\u7684\u5dee\u3002\n\n```c++\nint BIT::ask(int l, int r) {\n  return getSum(r) - getSum(l - 1);\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 500005;\n\nstruct Node {\n  int num;\n  int key;\n};\n\nclass BIT {\n public:\n  unsigned int n;\n  Node a[maxn], c[maxn];\n  int lowbit(int x);\n  void update(int k, int x);\n  int getSum(int x);\n  int ask(int l, int r);\n}; \n\nBIT t;\n\nint main() {\n  ios::sync_with_stdio(false);  \n  unsigned int m;\n  cin >> t.n >> m;\n  for (int i = 1; i <= t.n; i++) {\n    cin >> t.a[i].key;\n    t.update(i, t.a[i].key);\n  }\n  int opt, x, y;\n  for (int i = 1; i <= m; i++) {\n    cin >> opt;\n    if (opt == 1) {\n      cin >> x >> y;\n      t.update(x, y);\n    }\n    if (opt == 2) {\n      cin >> x >> y; \n      cout << t.ask(x, y) << endl; \n    }\n  }\n}\n\ninline int BIT::lowbit(int x) {\n  return x & (-x);\n}\n\nvoid BIT::update(int k, int x) {\n  for (int i = k; i <= n; i += lowbit(i)) {\n    c[i].key += x;\n  }\n}\n\nint BIT::getSum(int x) {\n  int ans = 0;\n  for (int i = x; i; i -= lowbit(i)) {\n    ans += c[i].key;\n  }\n  return ans;\n}\n\nint BIT::ask(int l, int r) {\n  return getSum(r) - getSum(l - 1);\n}\n\n```\n\n",
        "postTime": 1529765304,
        "uid": 53067,
        "name": "YuntianZhao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "~~\u8fd9\u4e48\u597d\u7684\u4e8c\u7ef4\u504f\u5e8f\u88f8\u9898\u5c45\u7136\u6ca1\u4eba\u6c34\u4e00\u53d1\u3002~~\n\n\n\u8be2\u95ee$[x,y]$\u533a\u95f4\u5185\u7684\u6570\u5b57\u548c\u5176\u5b9e\u7b49\u4ef7\u4e8e\u8be2\u95ee$[1,x-1]$\u548c$[1,y]$\u533a\u95f4\u5185\u7684\u6570\u5b57\u548c\u3002\n\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u6216\u8be2\u95ee\u64cd\u4f5c\u90fd\u53ef\u4ee5\u662f\u770b\u505a\u4e00\u4e2a\u4e8c\u5143\u7ec4$(a,b)$\uff0c\u5176\u4e2d$a$\u662f\u65f6\u95f4\u5e8f\uff0c$b$\u662f\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u5177\u4f53\u7684\u8868\u793a\u53ef\u4ee5\u770b\u7a0b\u5e8f\u3002\n\n\n\u7136\u540e\u5bf9$a$\u6392\u5e8f(\u9ed8\u8ba4\u6709\u5e8f)\uff0c$b$\u8fdb\u884cCDQ\u5206\u6cbb\u5c31\u597d\u4e86\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n\n---\n\n\u5bf9\u4ee3\u7801\u505a\u70b9\u89e3\u91ca\u3002\n\n\n1\u3001\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u7528$query$\u8fd9\u4e2a\u6570\u7ec4\u4fdd\u5b58\uff0c\u4e0b\u9762\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u4f5c\u7528\u3002\n\n\n> type: 1\u8868\u793a\u4fee\u6539\uff0c2\u8868\u793a\u52a0\u4e0a\uff0c3\u8868\u793a\u51cf\u53bb\n>\n> idx: \u8fd9\u4e2a\u662f\u4e8c\u5143\u7ec4\u7684$b$\uff0cCDQ\u5206\u6cbb\u65f6\u7684\u5173\u952e\u5b57\u3002\n>\n> val: \u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0cval\u662f\u4fee\u6539\u7684\u6570\uff1b\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0cval\u662f\u7b54\u6848\u5b58\u50a8\u7684\u4f4d\u7f6e(\u6216\u8005\u53ef\u4ee5\u7406\u89e3\u4e3a\u8be2\u95ee\u7684\u4e0b\u6807)\u3002\n\n2\u3001\u5bf9\u4e8e\u4f4d\u7f6e\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u5e94\u8be5\u5148\u4fee\u6539\u540e\u8be2\u95ee\u3002\u56e0\u6b64\u6bd4\u8f83\u7684cmp\u51fd\u6570\u662fquery[x].idx <= query[y].idx\u3002\n\n\n3\u3001\u5408\u5e76\u5b50\u95ee\u9898\u65f6\uff0c\u5de6\u534a\u90e8\u5206\u53ea\u7528\u7d2f\u52a0\uff0c\u800c\u53f3\u534a\u90e8\u5206\u53ea\u7528\u7edf\u8ba1\u7b54\u6848\u3002\n\n\nAC\u4ee3\u7801\uff1a\n\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n\nconst int MAX_N = 5e5 + 10 ;\n\nstruct data {\n    int type , idx , val ;\n}query[MAX_N << 2] , temp[MAX_N << 2] ;\n\nint n , m , qt , tot , ans[MAX_N] ;\n\nbool cmp(int x , int y) {\n    return query[x].idx <= query[y].idx ;\n}\n\nvoid cdq(int x , int y) {\n    if (x == y) return ;\n    int mid = (x + y) >> 1 ;\n    cdq(x , mid) ; cdq(mid + 1 , y) ;\n\n    int p1 = x , p2 = mid + 1 , sum = 0 , t = 0 ;\n    while (p1 <= mid && p2 <= y) {\n        if (cmp(p1 , p2)) {\n            data *p = &query[p1] ;\n            if (p->type == 1) sum += p->val ;\n            temp[t++] = *p ; ++p1 ;\n        }\n        else {\n            data *p = &query[p2] ;\n            if (p->type == 2) ans[p->val] += sum ;\n            else if (p->type == 3) ans[p->val] -= sum ;\n            temp[t++] = *p ; ++p2 ;\n        }\n    }\n\n    for (; p1 <= mid ; ++p1) temp[t++] = query[p1] ;\n    for (; p2 <= y ; ++p2) {\n        data *p = &query[p2] ;\n        if (p->type == 2) ans[p->val] += sum ;\n        else if (p->type == 3) ans[p->val] -= sum ;\n        temp[t++] = *p ;\n    }\n\n    for (int i = 0 ; i < t ; ++i) query[i + x] = temp[i] ;\n}\n\nint main() {\n    scanf(\"%d %d\" , &n , &m) ;\n    for (int i = 1 ; i <= n ; ++i) {\n        int a ; scanf(\"%d\" , &a) ;\n        query[++tot] = (data){1 , i , a} ;\n    }\n    for (int i = 0 ; i < m ; ++i) {\n        int ty , x , y ;\n        scanf(\"%d %d %d\" , &ty , &x , &y) ;\n\n        if (ty == 1) query[++tot] = (data){1 , x , y} ;\n        else {\n            if (x - 1 > 0) query[++tot] = (data){3 , x - 1 , qt} ;\n            query[++tot] = (data){2 , y , qt} ;\n            ++qt ;\n        }\n    }\n\n    ///\n    \n    cdq(1 , tot) ;\n    for (int i = 0 ; i < qt ; ++i)\n        printf(\"%d\\n\" , ans[i]) ;\n\n    return 0 ;\n}\n```",
        "postTime": 1508409749,
        "uid": 42109,
        "name": "CSHwang",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "## \u8868\u793a\u76f4\u63a5\u628a\u7ebf\u6bb5\u6811\u6a21\u677fcopy\u8fc7\u6765(\u8fd9\u6837\u662f\u4e0d\u662f\u6709\u70b9\u5bf9\u4e0d\u8d77\u6811\u72b6\u6570\u7ec4) ##\n\n### \u76f4\u63a5\u628a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u52a0\u7684\u5de6\u53f3\u7aef\u70b9\u91cd\u5408\u5373\u53ef~~(\u5176\u5b9e\u662f\u6211\u61d2\u5f97\u6539)~~ ###\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\nconst int maxn = 500000;\nll a[maxn << 2], c[maxn << 2], n, m, x, y, k, d;\nvoid push_up(ll h); //\u66f4\u65b0\u5f53\u524d\u8282\u70b9 \nvoid push_down(ll h, ll len); //\u4e0b\u653elazy tag \nvoid build(ll h, ll l, ll r); //\u5efa\u6811 \nvoid update(ll h, ll l, ll r, ll x, ll y, ll k); //\u533a\u95f4\u52a0(\u5927\u6750\u5c0f\u7528\u554a) \nll query(ll h, ll l, ll r, ll x, ll y); //\u67e5\u8be2 \nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    build(1, 1, n);\n    for (ll i = 1; i <= m; ++i)\n    {\n        scanf(\"%d%d%d\", &d, &x, &y);\n        if (d == 1)    update(1, 1, n, x, x, y); //l == r\n        else printf(\"%d\\n\", query(1, 1, n, x, y));\n    }\n}\nvoid push_up(ll h)\n{\n    a[h] = a[h << 1] + a[h << 1 | 1];\n}\nvoid push_down(ll h, ll len)\n{\n    a[h << 1] += c[h] * (len - (len >> 1));\n    a[h << 1 | 1] += c[h] * (len >> 1);\n    c[h << 1] += c[h];\n    c[h << 1 | 1] += c[h];\n    c[h] = 0; //\u7136\u800c\u6211\u7b2c\u4e00\u6b21\u4ea4\u7684\u65f6\u5019\u6ca1\u6253 \n}\nvoid build(ll h, ll l, ll r)\n{\n    if (l == r)\n    {\n        scanf(\"%d\", &a[h]);\n        return;\n    }\n    ll mid = l + r >> 1;\n    build(h << 1, l, mid);\n    build(h << 1 | 1, mid + 1, r); //\u2235h << 1\u5fc5\u4e3a\u5076\u6570 \u2234h << 1 | 1 == h * 2 + 1\n    push_up(h);\n}\nvoid update(ll h, ll l, ll r, ll x, ll y, ll k)\n{\n    if ((x <= l) && (r <= y))\n    {\n        a[h] += k * (r - l + 1); //\u603b\u503c\u52a0 \n        c[h] += k; //lazy tag\n        return;\n    }\n    if (c[h]) push_down(h, r - l + 1);\n    ll mid = l + r >> 1;\n    if (x <= mid) update(h << 1, l, mid, x, y, k);\n    if (y > mid) update(h << 1 | 1, mid + 1, r, x, y, k); //\u5de6\u8fb9\u548c\u53f3\u8fb9 \n    push_up(h);\n}\nll query(ll h, ll l, ll r, ll x, ll y)\n{\n    if ((x <= l) && (r <= y))\n        return a[h];\n    if (c[h]) push_down(h, r - l + 1);\n    ll mid = l + r >> 1, s = 0;\n    if (x <= mid) s += query(h << 1, l, mid, x, y);\n    if (y > mid) s += query(h << 1 | 1, mid + 1, r, x, y); //\u67e5\u8be2\u7684\u662f\u5de6\u53f3\u4e24\u533a\u95f4\u7684\u548c \n    return s;\n}\n```",
        "postTime": 1500108061,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6a21\u677f\u57fa\u672c\u4e0d\u7528\u89e3\u91ca\u2026\u2026\n\nmdify\u5c31\u662f\u52a0\u64cd\u4f5c\u2026\u2026\n\nsum\u5c31\u662f\u6c42\u548c\u2026\u2026\n\nlowbit\u7528\u6765\u7b97\u5c42\u2026\u2026\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,a[500009],c[500009],k,x,y,t,ans;\nint lowbit(int x)\n{\n    return x&(-x);\n}\nint sum(int x)\n{\n    ans=0;\n    for(int i=x;i>0;i=i-lowbit(i)){ans=ans+c[i];}\n    return ans;\n}\nvoid modify(int x,int d)\n{\n    for(int i=x;i<=n;i=i+lowbit(i)){c[i]=c[i]+d;}\n    return;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        modify(i,a[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&k,&x,&y);\n        if(k==1){modify(x,y);}\n        if(k==2){printf(\"%d\\n\",sum(y)-sum(x-1));}\n    }\n    return 0;\n}\n```",
        "postTime": 1483327257,
        "uid": 14378,
        "name": "doby",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "### \u5f15\u5165\n**\u6811\u72b6\u6570\u7ec4\u662f\u4ec0\u4e48\uff1f**\n\n\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u67e5\u8be2\u548c\u4fee\u6539\u590d\u6742\u5ea6\u90fd\u4e3alog(n)\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e3b\u8981\u7528\u4e8e\u67e5\u8be2\u4efb\u610f\u4e24\u4f4d\u4e4b\u95f4\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u4f46\u662f\u6bcf\u6b21\u53ea\u80fd\u4fee\u6539\u4e00\u4e2a\u5143\u7d20\u7684\u503c;\u7ecf\u8fc7\u7b80\u5355\u4fee\u6539\u53ef\u4ee5\u5728log(n)\u7684\u590d\u6742\u5ea6\u4e0b\u8fdb\u884c\u8303\u56f4\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u65f6\u53ea\u80fd\u67e5\u8be2\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u503c(\u5982\u679c\u52a0\u5165\u591a\u4e2a\u8f85\u52a9\u6570\u7ec4\u5219\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2)\u3002\uff08by \u767e\u5ea6\u767e\u79d1\uff09\n\n\u7b80\u5355\u70b9\u8bf4\uff0c\u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u5f88\u5feb\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u5355\u70b9\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\n\n\u9898\u5916\u8bdd\uff1a\u5176\u5b9e\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u6bd4\u6811\u72b6\u6570\u7ec4\u53ef\u5b9e\u73b0\u7684\u4e1c\u897f\u591a\u5f97\u591a\uff0c\u4f46\u662f\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7b80\u5355\u597d\u5199\uff0c\u4e14\u6548\u7387\u8fd8\u8981\u9ad8\u4e9b\uff0c\u6240\u4ee5\u5728\u8fd9\u9898\u6211\u4eec\u5199\u6811\u72b6\u6570\u7ec4\n\n### \u600e\u4e48\u505a\uff1f\n\n\u9065\u60f3\u6211\u5f53\u5e74\u4e00\u9053\u9ec4\u9898\u6ca1\u505a\u8fc7\u5c31\u70b9\u5f00\u4e86\u8fd9\u9898\uff0c\u6b38\uff1f\u8fd9\u4e48\u7b80\u5355\uff1f\u96be\u9053\u4eba\u751f\u7b2c\u4e00\u9053\u9ec4\u9898\u5c31\u662f\u8fd9\u9053\u4e86\u5417\uff1f\u7136\u540e\u6211\u5c31\u4ea4\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u7a0b\u5e8f\uff1a\n```\nfor(int j=l;j<=r;j++) a[j]+=k;\n```\n\u6b38\uff0c\u600e\u4e48\u4e0d\u5bf9\uff1f\u70b9\u5f00\u9898\u89e3\u4e24\u5206\u949f\u540e\uff0c\u6211\u9ed8\u9ed8\u5730\u5173\u6389\u4e86\u9875\u9762...\n\n\u626f\u8fdc\u4e86\uff0c\u8bb2\u6b63\u7ecf\u7684,\u5176\u5b9e\u6811\u72b6\u6570\u7ec4\u8ddf\u6811\u7684\u5173\u7cfb\u5e76\u4e0d\u592a\u5927\uff0c\u5f53n=8\u65f6\uff0c\u5b83\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a\n(A\u662f\u8f93\u5165\u7684\u6570\u7ec4\uff0cC\u662f\u6211\u4eec\u7684\u6811\u72b6\u6570\u7ec4\uff09\n![](http://images.cnblogs.com/cnblogs_com/wxl-Ezio/1173002/o_QQ%e6%88%aa%e5%9b%be20180412203826.png)\n\u5176\u4e2d\n\n$C[1]=A[1]$\n\n$C[2]=A[1]+A[2]$\n\n$C[3]=A[3]$\n\n$C[4]=A[1]+A[2]+A[3]+A[4]$\n\n$C[5]=A[5]$\n\n$C[6]=A[5]+A[6]$\n\n$C[7]=A[7]$\n\n$C[8]=A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8]$\n\n\u4ee5\u6b64\u7c7b\u63a8\n\n\u90a3\u4e48\u8fd9\u9897\u6811\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u5047\u8bbe\u6211\u4eec\u8981\u7ed9$A[1]$\u52a0\u4e0a1\uff0c\u54ea\u4e9b\u6570\u503c\u4f1a\u88ab\u6539\u53d8\uff1f\n\n$C[1],C[2],C[4],C[8],C[16]...$\n\n$A[2]$\u5462\uff1f\n\n$C[2],C[4],C[8],C[16]$\n\n$A[3]$\n\n$C[3],C[4],C[8],C[16]$\n\n$A[5]$\n\n$C[5],C[6],C[8],C[16]$\n\n\u6211\u76f8\u4fe1\u4f60\u770b\u51fa\u89c4\u5f8b\u4e86\uff0c\u5bf9\u5427\uff08\u9003\n\n\u597d\u5427\u4f60\u53ea\u8981\u77e5\u9053\uff0c\u5982\u679c\u7ed9$A[I]+K$\uff0c\u8bbe$I$\u4e8c\u8fdb\u5236\u6700\u540e\u4e00\u4f4d$1$\u6240\u5728\u7684\u4f4d\u7f6e\u662f$q$,\u90a3\u4e48$C[I]$\u548c$C[I+q]$\u90fd\u4f1a$+K$\u5c31\u884c\u4e86\uff08$I$\u548c$q$\u4e0d\u65ad\u66f4\u65b0\uff09\n\n//\u8fd9LATEX\u7ed9\u6211\u5199\u5410\u4e86\n\n\u6bd4\u5982\u8bf4$A[5]$\n\n$5$\u7528\u4e8c\u8fdb\u5236\u662f$101$,\u6240\u4ee5$C[5]+=k$\u7684\u503c\u4f1a\u4f7f$C[101+1]$\u5373$C[6]+=k$\n\n\u800c$C[6]+=k$\u65f6,\u56e0\u4e3a$6=110$\u540c\u65f6\u53c8\u4f1a\u4f7f$C[110+10]$\u5373$C[8]+=k$\n\n\u7136\u540e$C[8]+=k$\u53c8\u4f1a\u4f7f$C[16]+=k$\n\n\u4ee5\u6b64\u7c7b\u63a8,\u76f4\u5230\u8981\u8d85\u8fc7$n$\n\n//\u5455~\u5478\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u9996\u5148\uff0c**\u5355\u70b9\u4fee\u6539**\u600e\u4e48\u505a\uff1f\n\n\u4ecb\u7ecd\u4e00\u4e2a\u4e1c\u897f\u53eb$lowbit$\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u7528\u6765\u6c42\u51fa\u4e00\u4e2a\u6570\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u540e\uff0c\u6700\u540e\u4e00\u4e2a1\u6240\u5728\u7684\u4f4d\u7f6e\n\n\u522b\u60f3\u4e86\uff0c\u4e0d\u662f\u7cfb\u7edf\u81ea\u5e26\u7684\u51fd\u6570\uff0c\u8981\u81ea\u5df1\u5199\u7684\n\n\u5b83\u7684\u5199\u6cd5\u662f\n\n```\nint lowbit(int k){\n\treturn k&-k;\n}\n```\n\u795e\u5947\u5417\uff1f\u4e3a\u4ec0\u4e48\u5462\uff1f\u9996\u5148\uff0c&\u7b26\u53f7\u662f\u4e0e\uff0c-k\u56e0\u4e3a\u8865\u7801\u7684\u539f\u56e0\uff0c\u4ece\u53f3\u5411\u5de6\u9047\u5230\u7b2c\u4e00\u4e2a1\u4e3a\u6b62\uff0c\u8fd9\u4e2a1\u524d\u9762\u7684\u4f4d\u53d6\u53cd\uff0c\u9996\u4f4d\u4e0d\u52a8\n\n\u90a3\u4e48\u518d\u5229\u7528\u4e0e\u8fd0\u7b97\u53ea\u53d6\u4e24\u4e2a1\u7684\u7279\u6027\uff0c\u6211\u4eec\u5c31\u8fd4\u56de\u4e86\n$2^p$(\u5176\u4e2d$p: k$ \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6570\u4e2d\uff0c \u53f3\u5411\u5de6\u6570\u7b2c\u4e00\u4e2a1\u7684\u4f4d\u7f6e)\n\n\u597d\u4e86\uff0c\u90a3\u4e48\u600e\u4e48add\u5462\uff1f\u521a\u521a\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u5982\u679c\u7ed9$A[I]+K$\uff0c\u8bbe$I$\u4e8c\u8fdb\u5236\u6700\u540e\u4e00\u4f4d$1$\u6240\u5728\u7684\u4f4d\u7f6e\u662f$q$,\u90a3\u4e48$C[I]$\u548c$C[I+q]$\u90fd\u4f1a$+K$\n\n\u4ee3\u7801\u5c31\u662f\n```\nvoid add(int x,int q){\n\twhile(x<=n){\n\t\ta[x]+=q;\n\t\tx+=lowbit(x);\n\t}\n}\n```\n\u5f88\u7b80\u5355\uff0c\u4e0d\u662f\u5417\n\n\u90a3\u4e48\u7b2c\u4e8c\u4e2a\uff0c**\u533a\u95f4\u67e5\u8be2**\u5462\uff1f\n\n\u6211\u4eec\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c$x$\u5230$y$\u7684\u548c\uff0c\u90a3\u4e48\u5c31\u5c06\u4ece$1$\u5230$y$\u7684\u548c\u51cf\u53bb\u4ece$1$\u5230$x-1$\u7684\u548c\u3002\n\n$1$\u5230$x$\u7684\u548c\u6c42\u6cd5\u662f\uff0c\u5c06$x$\u8f6c\u4e3a$2$\u8fdb\u5236\uff0c\u7136\u540e\u4e00\u76f4\u51cf\u53bb$lowbit(x)$\uff0c\u76f4\u5230$0$\n\n```\nint sum(int x){\n\tans=0;\n\twhile(x){\n\t\tans+=a[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\n```\n\u597d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5ACP3374\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u8981ACP3368\n\n\u90a3\u4e48\u5c31\u8981\u8bb2\u5230\u5dee\u5206\n\n\u5dee\u5206\u662f\u4ec0\u4e48\uff1f\u8bbe\u6570\u7ec4$a=${$1,2,3,6,4$}\uff0c\u90a3\u4e48\u5dee\u5206\u6570\u7ec4$b=${$1,1,1,3,-2$}\uff0c$b[i]=a[i]-a[i-1]$,\u90a3\u4e48\u5f88\u663e\u7136\uff0c\u6c42$a[i]$\u5c31\u662f$b[1]+b[2]+...+b[i]$\n\n\u5047\u8bbe\u6211\u4eec\u4f4d\u533a\u95f4{2\uff0c4}\u90fd+3\uff0c\u90a3\u4e48\u6570\u7ec4$a$\u53d8\u4e3a{$1,5,6,9,4$},$b$\u53d8\u4e3a{$1,4,1,3,-5$}\n\n\u770b\uff0c\u53ea\u6709$b[2]$\u548c$b[5]$\u53d8\u4e86\uff0c\u8fd9\u662f\u56e0\u4e3a2\u52304\u90fd\u52a0\u4e862\uff0c\u90a3\u4e48\u5dee\u5e76\u4e0d\u4f1a\u53d8\n\n\u6240\u4ee5\u600e\u6837\u7ed9\u533a\u95f4\u52a0\u548c\u5462\uff1f\u6211\u4eec\u5148\u628a\u6811\u72b6\u6570\u7ec4\u53d8\u4e3a\u5dee\u5206\u6570\u7ec4\uff0c\u7136\u540e\u518d\u52a0\u65f6\u76f4\u63a5\u52a0b[x-1]\u548cb[y]\uff0c\u8fd9\u9898\u5c31\u89e3\u51b3\u4e86\n\nP3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1 \u4ee3\u7801\n```\n#include<bits/stdc++.h>\nint n,m,a[500005],ans,w,xx,yy,zz; \nusing namespace std;\nint lowbit(int k){\n\treturn k&-k;\n}\nvoid add(int x,int q){\n\twhile(x<=n){\n\t\ta[x]+=q;\n\t\tx+=lowbit(x);\n\t}\n}\nint sum(int x){\n\tans=0;\n\twhile(x){\n\t\tans+=a[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>w;\n\t\tadd(i,w);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>xx>>yy>>zz;\n\t\tif(xx==1) add(yy,zz);\n\t\telse cout<<sum(zz)-sum(yy-1)<<endl;\n\t}\n\treturn 0;\n}\n\n```\nP3368 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 2 \u4ee3\u7801\n```\n#include<bits/stdc++.h>\nint n,m,a[500005],ans,w,xx,yy,zz,kk,lst; \nusing namespace std;\nint lowbit(int k){\n\treturn k&-k;\n}\nvoid add(int x,int q){\n\twhile(x<=n){\n\t\ta[x]+=q;\n\t\tx+=lowbit(x);\n\t}\n}\nint cx(int x){\n\tans=0;\n\twhile(x){\n\t\tans+=a[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>w;\n\t\tadd(i,w-lst);\n\t\tlst=w;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>xx;\n\t\tif(xx==1){\n\t\t\tcin>>yy>>zz>>kk;\n\t\t\tadd(yy,kk);\n\t\t\tadd(zz+1,-kk);\n\t\t} \n\t\telse{\n\t\t\tcin>>yy;\n\t\t\tcout<<cx(yy)<<endl;\n\t\t} \n\t}\n\treturn 0;\n}\n\n```\n\u5199\u4e86\u975e\u5e38\u4e45\uff0c\u751a\u81f3\u4e27\u5fc3\u75c5\u72c2\u7684\u628a\u6240\u6709\u6570\u5b57\u548c\u5b57\u6bcd\u90fd\u52a0\u4e86LATEX\n\n\u6211\u75af\u4e86\uff0c\u7ba1\u7406\u5458\u8fc7\u5427",
        "postTime": 1571843329,
        "uid": 123936,
        "name": "hfee",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "reviewing for csp\n\n\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u5b9e\u73b0\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u5982\u679c\u4ee5\u6b64\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\u3002\n\nlowbit\u8fd4\u56de\u8fd9\u4e2a\u4f4d\u7f6e\u4e0b\u6807\u4e8c\u8fdb\u5236\u62c6\u5206\u540e\u7684\u6700\u5c0f\u503c\uff0c\u6bd4\u5982lowbit(4)=4,\u4e8c\u8fdb\u5236100\uff1blowbit(5)=1,\u4e8c\u8fdb\u5236101.\n\nupdate\u4fee\u6539\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u6bcf\u6b21\u52a0\u4e0a\u81ea\u5df1\u7684lowbit\u503c\u6b63\u597d\u8fd4\u56de\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\n\nsum\u6c42\u7684\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a\u672b\u5c3e\u7684\u524d\u7f00\u548c\uff0c\u6bcf\u6b21\u51cf\u53bb\u81ea\u5df1\u7684lowbit\u503c\u53ef\u4ee5\u5230\u5b83\u4e4b\u524d\u7684\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u8986\u76d6\u5f88\u591a\u6570\uff0c\u662f\u5f88\u591a\u6570\u7684\u548c\uff0c\u56e0\u6b64\u53ef\u4ee5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570\uff0c\u800c\u5f53\u8fd9\u4e2a\u6570\u51cf\u53bb\u81ea\u5df1\u7684lowbit\u503c\u65f6\uff0c\u6b63\u597d\u8df3\u8fc7\u81ea\u5df1\u6240\u5305\u542b\u7684\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u5efa\u6811\u7684\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539\u52a0\u4e0a\u6240\u9700\u7684\u6570\u3002\n\n```cpp\n#include<iostream>\nusing namespace std;\nint a[500010],c[500010],n,m;\ninline int lowbit(int p)\n{\n\treturn (p)&(-p);\n}\ninline void update(int x,int p)\n{\n\twhile(p<=n)\n\t{\n\t\tc[p]+=x;\n\t\tp+=lowbit(p);\n\t}\n}\ninline int sum(int p)\n{\n\tint ans=0;\n\twhile(p>0)\n\t{\n\t\tans+=c[p];\n\t\tp-=lowbit(p);\n\t}\n\treturn ans;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint x;\n\t\tcin>>x;\n\t\tupdate(x,i);\n\t}\n\twhile(m--)\n\t{\n\t\tint judge;\n\t\tcin>>judge;\n\t\tif(judge==1)\n\t\t{\n\t\t\tint p,x;\n\t\t\tcin>>p>>x;\n\t\t\tupdate(x,p);\n\t\t}\n\t\telse if(judge==2)\n\t\t{\n\t\t\tint l,r;\n\t\t\tcin>>l>>r;\n\t\t\tcout<<sum(r)-sum(l-1)<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570879655,
        "uid": 115652,
        "name": "littlegagaduck",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u8be5\u7ed3\u6784\u6ee1\u8db3\u4e00\u4e0b\u6027\u8d28\uff1a\n\n1. \u6bcf\u4e2a\u7ed3\u70b9 $c[x]$ \u4fdd\u5b58\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u6240\u6709\u53f6\u8282\u70b9\u7684\u548c\n\n1. \u6bcf\u4e2a\u8282\u70b9 $c[x]$ \u7684\u5b50\u8282\u70b9\u4e2a\u6570\u7b49\u4e8e $lowbit(x)$ \u7684\u5927\u5c0f\n\n1. \u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 $c[x]$ \u7684\u7236\u8282\u70b9\u662f $c[x+lobit(x)]$\n\n1. \u4ece\u4e00\u4e2a\u5b50\u6811\u6839\u7ed3\u70b9\u5230\u53e6\u4e00\u4e2a $x-lowbit(x)$\n\n**\u5176\u5b9e $lowbit(x)$ \u53ef\u4ee5\u8868\u793a\u8fd9\u68f5\u5b50\u6811\u7684\u5bbd\u5ea6**\n \n\n```\n#include<cstdio>\n  \nusing namespace std;\n\nint n,m,c[500010];\n\nint lowbit(int x){return x&(-x);}\n\nint ask(int x){\n\n        int sum=0;\n        while(x){\n            sum+=c[x];\n            x-=lowbit(x);\n        }\n        return sum;\n}\n\nvoid add(int i,int x){\n\n        while(i<=n){\n            c[i]+=x;\n            i+=lowbit(i);\n        }\n        return;\n}\n\nint main(){\n\n        scanf(\"%d%d\",&n,&m);\n        for(int i=1;i<=n;i++){\n            int a;\n            scanf(\"%d\",&a);\n            add(i,a);\n        }\n        for(int i=1;i<=m;i++){\n            int w,y,z;\n            scanf(\"%d%d%d\",&w,&y,&z);\n            if(w==1)\n                add(y,z);\n            else\n                printf(\"%d\\n\",ask(z)-ask(y-1));\n        }\n        return 0;\n}\n```",
        "postTime": 1538729188,
        "uid": 90615,
        "name": "opened",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u5b9a\u4e49\uff1a\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0e\u533a\u95f4\u6811\u76f8\u4f3c\uff0c\u5b83\u5c06\u4e00\u4e2a\u533a\u95f4\u5212\u5206\u6210\u4e00\u4e9b\u5355\u5143\u533a\u95f4\uff0c\u6bcf\u4e2a\u5355\u5143\u533a\u95f4\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5feb\u901f\u7684\u67e5\u627e\u67d0\u4e00\u4e2a\u8282\u70b9\u5728\u82e5\u5e72\u6761\u7ebf\u6bb5\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 \u4e3aO(logN)\u3002\n\n\u800c\u672a\u4f18\u5316\u7684 \u7a7a\u95f4\u590d\u6742\u5ea6 \u4e3a2N\uff0c\u5b9e\u9645\u5e94\u7528\u65f6\u4e00\u822c\u8fd8\u8981\u5f004N\u7684\u6570\u7ec4\u4ee5\u514d\u8d8a\u754c\uff0c\u56e0\u6b64\u6709\u65f6\u9700\u8981\u79bb\u6563\u5316\u8ba9\u7a7a\u95f4\u538b\u7f29\u3002\n\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u80fd\u591f\u6709\u6548\u5904\u7406\u533a\u95f4\u64cd\u4f5c\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u5229\u7528\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u80fd\u591f\u8bbe\u8ba1\u51fa\u9488\u5bf9\u4e0a\u8ff0\u95ee\u9898\u66f4\u52a0\u9ad8\u6548\u7684\u7b97\u6cd5\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u9898\u76ee\u901a\u5e38\u6bd4\u8f83\u660e\u663e\uff0c\u4e00\u822c\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u7279\u5f81\u662fm\u6b21\u5bf9\u67d0\u4e00\u533a\u95f4\u957f\u5ea6\u7684\u67e5\u8be2\u3002\u6216\u8005\u662f\u4fee\u6539\u3002\u6240\u4ee5\u6211\u4eec\u901a\u5e38\u9700\u8981\u7684\u53ea\u662f\u5c06\u7ebf\u6bb5\u6811\u7684\u6a21\u578b\u7a0d\u52a0\u4fee\u6539\uff0c\u8fdb\u800c\u5957\u5165\u9898\u76ee\u4e2d\u5373\u53ef\u3002\n![](https://s1.ax1x.com/2018/08/10/P690HK.png)\n\u5e94\u7528\uff1a\n\n\u4e0a\u9762\u7684\u90fd\u662f\u4e9b\u57fa\u672c\u7684\u7ebf\u6bb5\u6811\u7ed3\u6784\uff0c\u4f46\u53ea\u6709\u8fd9\u4e9b\u5e76\u4e0d\u80fd\u505a\u4ec0\u4e48\uff0c\u5c31\u597d\u6bd4\u4e00\u4e2a\u7a0b\u5e8f\u6709\u8f93\u5165\u6ca1\u8f93\u51fa\uff0c\u6839\u672c\u6ca1\u6709\u4efb\u4f55\u7528\u5904\u3002\n\n\u6700\u7b80\u5355\u7684\u5e94\u7528\u5c31\u662f\u8bb0\u5f55\u7ebf\u6bb5\u662f\u5426\u88ab\u8986\u76d6\uff0c\u968f\u65f6\u67e5\u8be2\u5f53\u524d\u88ab\u8986\u76d6\u7ebf\u6bb5\u7684\u603b\u957f\u5ea6\u3002\u90a3\u4e48\u6b64\u65f6\u53ef\u4ee5\u5728\u7ed3\u70b9\u7ed3\u6784\u4e2d\u52a0\u5165\u4e00\u4e2a\u53d8\u91cfint count;\u4ee3\u8868\u5f53\u524d\u7ed3\u70b9\u4ee3\u8868\u7684\u5b50\u6811\u4e2d\u88ab\u8986\u76d6\u7684\u7ebf\u6bb5\u957f\u5ea6\u548c\u3002\u8fd9\u6837\u5c31\u8981\u5728\u63d2\u5165(\u5220\u9664)\u5f53\u4e2d\u7ef4\u62a4\u8fd9\u4e2acount\u503c\uff0c\u4e8e\u662f\u5f53\u524d\u7684\u8986\u76d6\u603b\u503c\u5c31\u662f\u6839\u8282\u70b9\u7684count\u503c\u4e86\u3002\n\n\u53e6\u5916\u4e5f\u53ef\u4ee5\u5c06count\u6362\u6210bool cover;\u652f\u6301\u67e5\u627e\u4e00\u4e2a\u7ed3\u70b9\u6216\u7ebf\u6bb5\u662f\u5426\u88ab\u8986\u76d6\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7\u5728\u7ed3\u70b9\u4e0a\u8bb0\u5f55\u4e0d\u540c\u7684\u6570\u636e\uff0c\u7ebf\u6bb5\u6811\u8fd8\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u662f\u5728\u4e00\u6761\u7ebf\u6bb5\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e\u5747\u52a0k\uff0c\u800c\u67e5\u8be2\u64cd\u4f5c\u662f\u8ba1\u7b97\u4e00\u6761\u7ebf\u6bb5\u4e0a\u7684\u603b\u548c\uff0c\u90a3\u4e48\u5728\u7ed3\u70b9\u4e0a\u9700\u8981\u8bb0\u5f55\u7684\u503c\u4e3asum\u3002\n\n\u8fd9\u91cc\u4f1a\u9047\u5230\u4e00\u4e2a\u95ee\u9898:\u4e3a\u4e86\u4f7f\u6240\u6709sum\u503c\u90fd\u4fdd\u6301\u6b63\u786e\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u53ef\u80fd\u8981\u66f4\u65b0O(N)\u4e2asum\u503c\uff0c\u4ece\u800c\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6\u9000\u5316\u4e3aO(N)\u3002\n\n\u89e3\u51b3\u65b9\u6848\u662fLazy\u601d\u60f3:\u5bf9\u6574\u4e2a\u7ed3\u70b9\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u5148\u5728\u7ed3\u70b9\u4e0a\u505a\u6807\u8bb0\uff0c\u800c\u5e76\u975e\u771f\u6b63\u6267\u884c\uff0c\u76f4\u5230\u6839\u636e\u67e5\u8be2\u64cd\u4f5c\u7684\u9700\u8981\u5206\u6210\u4e24\u90e8\u5206\u3002\n\n\u6839\u636eLazy\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u4ee3\u8868\u539f\u7ebf\u6bb5\u7684\u7ed3\u70b9\u4e0a\u589e\u52a0\u4e00\u4e2a\u503ctoadd\uff0c\u5373\u4e3a\u5bf9\u8fd9\u4e2a\u7ed3\u70b9\uff0c\u7559\u5f85\u4ee5\u540e\u6267\u884c\u7684\u63d2\u5165\u64cd\u4f5ck\u503c\u7684\u603b\u548c\u3002\u5bf9\u6574\u4e2a\u7ed3\u70b9\u63d2\u5165\u65f6\uff0c\u53ea\u66f4\u65b0sum\u548ctoadd\u503c\u800c\u4e0d\u5411\u4e0b\u8fdb\u884c\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8bc1\u660e\u4e3aO(logN)\u3002\n\n\u5bf9\u4e00\u4e2atoadd\u503c\u4e3a0\u7684\u7ed3\u70b9\u6574\u4e2a\u8fdb\u884c\u67e5\u8be2\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u5b58\u50a8\u5728\u5176\u4e2d\u7684sum\u503c;\u800c\u82e5\u5bf9toadd\u4e0d\u4e3a0\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u67e5\u8be2\uff0c\u5219\u8981\u66f4\u65b0\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684sum\u503c\uff0c\u7136\u540e\u628atoadd\u503c\u4f20\u9012\u4e0b\u53bb\uff0c\u518d\u5bf9\u8fd9\u4e2a\u67e5\u8be2\u672c\u8eab\uff0c\u5de6\u53f3\u5b50\u7ed3\u70b9\u5206\u522b\u9012\u5f52\u4e0b\u53bb\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u4e5f\u662fO(nlogN)\u3002\n\n\u6a21\u677f\uff1a\n\n\u5bf9\u5355\u4e2a\u70b9\u7684\u4fee\u6539\uff0c\u548c\u5bf9\u4e00\u6bb5\u533a\u95f4\u7684\u67e5\u8be2\uff1a\n```\n//\u7ebf\u6bb5\u6811\u5355\u4e2a\u70b9\u4fee\u6539&\u533a\u95f4\u67e5\u8be2\n#include<iostream>\n#include<iomanip>\n#include<cstring>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<string>\n#include<memory>\nusing namespace std;\n\nconst int e=100006;\nstruct qq\n{\n    int maxx;\n}tree[4*e];//\u7ebf\u6bb5\u6811\u8981\u5f004\u500d\u7684\u70b9\u7684\u4e2a\u6570\nint n,t,a,b;\n\nvoid updata(int l,int r,int root)\n{\n    if(r<a || l>a)    return;\n    if(r==l)\n    {\n        tree[root].maxx=b;\n        return;\n    }\n\n    int mid=(l+r)/2;\n    updata(l,mid,root*2);\n    updata(mid+1,r,root*2+1);\n    tree[root].maxx=max(tree[root*2].maxx,tree[root*2+1].maxx);\n}\n\nint search(int l,int r,int root)\n{\n    if(l>b || r<a)    return(-999999999);\n\n    if(l>=a && r<=b)    return(tree[root].maxx);\n\n    int mid=(l+r)/2;\n    return(max( search(l,mid,root*2), search(mid+1,r,root*2+1)));\n}\n\nint main()\n{\n    memset(tree,0,sizeof(tree));\n    cin>>n;\n\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&t,&a,&b);\n\n        if(t==1)    updata(1,n,1);//\u5c06\u70b9a\u7684\u503c\u6539\u4e3ab\n        if(t==2)    cout<< search(1,n,1) << endl;//\u67e5\u627e\u533a\u95f4a(\u542b)\u5230b(\u542b)\u7684\u6700\u5927\u503c;\n    }\n\n    return 0;\n}\n```\n\n\u5bf9\u4e00\u6bb5\u533a\u95f4\u7684\u4fee\u6539\u548c\u67e5\u8be2\uff1a\n```\n//\u7ebf\u6bb5\u6811 \u533a\u95f4 \u4fee\u6539&\u67e5\u8be2\n#include<iostream>\n#include<iomanip>\n#include<cstring>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<string>\n#include<memory>\nusing namespace std;\n\nconst int e=100006;\nstruct qq\n{\n    int maxx,delta;\n}tree[4*e];//\u7ebf\u6bb5\u6811\u8981\u5f004\u500d\u7684\u70b9\u7684\u4e2a\u6570\nint n,t,a,b;\n\nvoid updata(int l,int r,int root)//\u66f4\u65b0\u6570\u636e\n{\n    if(b<l || r<a)    return;\n\n    if(l>=a && r<=b)//\u8fd9\u53e5\u662f\u6838\u5fc3\uff0c\u82e5\u5f53\u524d\u533a\u95f4\u5305\u542b\u4e8e\u4fee\u6539\u533a\u95f4\uff0c\u5c31\u4e0d\u5f80\u4e0b\u4f20,(\u672a\u4f20\u5230\u53f6\u5b50\u8282\u70b9)\uff1b\n    {\n        tree[root].maxx++;\n        tree[root].delta++;\n        return;\n    }\n\n    int mid=(l+r)/2,delta=tree[root].delta;\n    tree[root*2].maxx+=delta;\n    tree[root*2].delta+=delta;\n    tree[root*2+1].maxx+=delta;\n    tree[root*2+1].delta+=delta;\n    tree[root].delta=0;//\u8fd9\u53e5\u5f88\u5173\u952e\uff0c\u6839\u7684\u504f\u79fb\u91cf\u4f20\u9012\u5230\u5b50\u6811\u540e\u6e05\u96f6\n    updata(l,mid,root*2);\n    updata(mid+1,r,root*2+1);\n    tree[root].maxx=max( tree[root*2].maxx, tree[root*2+1].maxx);\n    return;\n}\n\nint search(int l,int r,int root)\n{\n    if(l>b || r<a)    return(-99999999);\n\n    if(l>=a && r<=b)    return(tree[root].maxx);\n\n    int mid=(l+r)/2,delta=tree[root].delta;\n    tree[root*2].maxx+=delta;\n    tree[root*2].delta+=delta;\n    tree[root*2+1].maxx+=delta;\n    tree[root*2+1].delta+=delta;\n    tree[root].delta=0;      //\u8fd9\u53e5\u5f88\u5173\u952e\uff0c\u6839\u7684\u504f\u79fb\u91cf\u4f20\u9012\u5230\u5b50\u6811\u540e\u6e05\u96f6\n    return(max( search(l,mid,root*2), search(mid+1,r,root*2+1)));\n}\n\nint main()\n{\n    memset(tree,0,sizeof(tree));\n    cin>>n;\n\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&t,&a,&b);\n\n        if(t==1)    updata(1,n,1);\n        if(t==2)    cout<< search(1,n,1) << endl;\n    }\n\n    return 0;\n}\n```\n\n[ P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1](https://www.luogu.org/problemnew/show/P3374)\n```\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 5*1e5 + 100;\nint tree[N*4],ans;\n\nvoid built(int id,int l,int r,int x,int val)\n{\n    if(l==r && l == x)\n    {\n        tree[id] += val;\n        return;\n    }\n    int mid = (l+r) / 2;\n    if(x<=mid) built(id*2,l,mid,x,val);\n    if(x>mid) built(id*2+1,mid+1,r,x,val);\n    tree[id] = tree[id*2] + tree[id*2+1];\n    return;\n}\n\nvoid query(int id,int l,int r,int x,int y)\n{\n    if(l>=x && r <=y)\n    {\n        ans += tree[id];\n        return;\n    }\n    int mid = (l+r)/ 2;\n    if(x<=mid) query(id*2,l,mid,x,y);\n    if(y>mid) query(id*2+1,mid+1,r,x,y);\n}\n\nint main()\n{\n    int n,m;\n    cin >> n >> m;\n    for(int i=1;i<=n;i++)\n    {\n        int x;\n        cin >> x;\n        built(1,1,n,i,x);\n    }\n    while(m--)\n    {\n        int op,x,y;\n        cin >> op >> x >> y;\n        if(op==1) built(1,1,n,x,y);\n        else\n        {\n            ans = 0;\n            query(1,1,n,x,y);\n            cout << ans << endl;\n        }\n    }\n    return 0;\n}\n\n```\n\n[ P3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1](https://www.luogu.org/problemnew/show/P3372#sub)\n```\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdio> \nusing namespace std;\n\nconst int N=1e5+100;\nlong long tr[N*4],flag[N*4],ans;\n\nvoid built(int i,int l,int r,int x,long long val)\n{\n    if(l==r)//\u627e\u5230\u4e86\u53f6\u5b50\u8282\u70b9 \n    {\n        tr[i]+=val;//\u628a\u53f6\u5b50\u8282\u70b9\u7684\u521d\u59cb\u66f4\u65b0 \n        return;\n    }\n    int mid=(l+r)/2;\n    if(x<=mid) built(i*2,l,mid,x,val);//\u5de6\u5b50\u6811 \n    if(x>mid) built(i*2+1,mid+1,r,x,val);//\u53f3\u5b50\u6811 \n    tr[i]=tr[i*2]+tr[i*2+1];//\u56de\u6eaf\u65f6\u66f4\u65b0\u8282\u70b9 \n    return;\n}\nvoid pushdown(int i,int l,int r)//lazy\u64cd\u4f5c,\u7528\u5230\u624d\u66f4\u65b0 \n{\n    int mid=(l+r)/2;\n    tr[i*2]+=flag[i]*(mid-l+1);//mid-l+1\u662f\u533a\u95f4\u5185\u5143\u7d20\u7684\u4e2a\u6570,flag[i]\u662f\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u4e0b\u7684\u8282\u70b9\u6bcf\u4e2a\u5143\u7d20\u5e94\u66f4\u65b0\u7684\u503c //\u5de6\u5b50\u6811 \n    tr[i*2+1]+=flag[i]*(r-mid);//\u672c\u662fr-(mid+1)+1,\u5316\u7b80\u540e\u662fr-mid//\u53f3\u5b50\u6811 \n    flag[i*2]+=flag[i];\n    flag[i*2+1]+=flag[i];//\u5e94\u4e3a\u6211\u4eec\u7528\u8fc7\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u6807\u8bb0\u8fc7,\u6240\u4ee5\u6807\u8bb0\u4e00\u4e0b \n    flag[i]=0;//\u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86,\u6e05\u7a7a\u6807\u8bb0 \n    return;\n}\nvoid update(int i,int l,int r,long long x,long long y,long long k)//\u66f4\u65b0//\u64cd\u4f5c\u4e00 \n{\n    if(l>=x&&r<=y)//\u5982\u679c(l,r)\u5728(x,y)//\u4f53\u4f1a\u4e00\u4e0b,\u4e5f\u4e0d\u77e5\u751f\u4e0d\u751f\u52a8{X(l,r)Y}//\u8868\u660e\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u70b9 \n    {\n        tr[i]+=k*(r-l+1);//\u56e0\u4e3alazy\u64cd\u4f5c,\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0\u6211\u4eec\u8981\u6c42\u7684\u70b9 ,\u6ca1\u66f4\u65b0\u7684\u7528\u5230\u624d\u66f4\u65b0 \n        flag[i]+=k;//\u6807\u8bb0\u5f53\u524d\u8282\u70b9\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6bcf\u4e2a\u503c\u90fd\u9700\u8981\u52a0\u4e0aflag[i],\u73b0\u5728\u4e0d\u52a0,\u8981\u7528\u5230\u624d\u66f4\u65b0 \n        return;\n    }\n    if(flag[i]>0) pushdown(i,l,r);//\u56e0\u4e3a\u4e48\u6709\u6ee1\u8db3if,\u8bf4\u660e\u8981\u7528\u5f53\u524d\u8282\u70b9\u4ee5\u53ca\u5b83\u7684\u5b50\u8282\u70b9,\u6240\u4ee5\u8981\u66f4\u65b0\n    /*\u8fd9\u91cc\u53ef\u80fd\u4f1a\u770b\u4e0d\u61c2,\u5982\u679c\u7b2c\u4e00\u6b21\u6211\u4eec\u66f4\u65b0\u4e86(5,8)\u4f46\u5b83\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u66f4\u65b0,\u5982\u679c\u4e0b\u6b21\u8981\u66f4\u65b0(5,6),\u4f46\u539f\u6765(5,6)\u5c31\u6709\u503c\u6ca1\u66f4\u65b0\u6240\u4ee5\u4f1a\u5c11\u52a0,\u6240\u4ee5\u628a\u539f\u6765\n    \u7684\u503c\u66f4\u65b0,\u518d\u66f4\u65b0\u5f53\u524d\u503c*/ \n    int mid=(l+r)/2;\n    if(mid>=x) update(i*2,l,mid,x,y,k);//\u4e00\u76f4dfs,\u76f4\u5230\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u503c//\u5de6\u5b50\u6811 \n    if(mid<y) update(i*2+1,mid+1,r,x,y,k);//\u53f3\u5b50\u6811 \n    tr[i]=tr[i*2]+tr[i*2+1];\n    return;\n}\nvoid query(int i,int l,int r,long long x,long long y)//\u64cd\u4f5c\u4e8c \n{\n    if(l>=x&&r<=y)//\u5982\u679c(l,r)\u5728(x,y)//\u4f53\u4f1a\u4e00\u4e0b,\u4e5f\u4e0d\u77e5\u751f\u4e0d\u751f\u52a8{X(l,r)Y}//\u8868\u660e\u662f\u6211\u4eec\u8981\u66f4\u65b0\u7684\u70b9(\u540c\u4e0aupdate\u867d\u7136\u8fd8\u662f\u6253\u4e86\u4e00\u904d) \n    {\n        ans+=tr[i];//\u66f4\u65b0ans\u628a\u533a\u95f4\u5185\u7684\u503c\u52a0\u4e0a \n        return;\n    }\n    if(flag[i]>0) pushdown(i,l,r);//\u56e0\u4e3alazy\u64cd\u4f5c,\u5f53\u524d\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u66f4\u65b0,\u6240\u4ee5\u8981\u66f4\u65b0\u4e00\u904d \n    int mid=(l+r)/2;\n    if(mid>=x) query(i*2,l,mid,x,y);//\u4e00\u76f4dfs,\u76f4\u5230\u662f\u6211\u4eec\u8981\u52a0\u7684\u503c//\u5de6\u5b50\u6811 \n    if(mid<y) query(i*2+1,mid+1,r,x,y);//\u53f3\u5b50\u6811 \n}\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        long long x;//\u9898\u76ee\u8bf4\u4e86\u8981\u7528long long \n        cin>>x;\n        built(1,1,n,i,x);\n    }\n    while(m--)\n    {\n        int op;\n        cin>>op;\n        if(op==1)//\u64cd\u4f5c\u4e00 \n        {\n            long long x,y,k;\n            cin>>x>>y>>k;\n            update(1,1,n,x,y,k);\n        }\n        if(op==2)//\u64cd\u4f5c\u4e8c \n        {\n            long long x,y;\n            cin>>x>>y;\n            ans=0;\n            query(1,1,n,x,y);\n            cout<<ans<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1534076194,
        "uid": 107307,
        "name": "\u5f7c\u5cb8\u6731\u7802",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u8fd9\u91cc\u662fFenwick Tree Lite Edition!\uff08C\uff0c236B\uff0cAccepted 2017-11-09 16:08:23\uff09\n\n\uff08\u538b\u4ee3\u7801\u4ec5\u4f9b\u5a31\u4e50\uff0c\u8bf7\u52ff\u6c89\u8ff7\u538b\u4ee3\u7801\uff09\n\nC\u8bed\u8a00\u7684\u4e00\u4e9b\u7279\u6027\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u53d8\u5f97\u7b80\u77ed\u3002\n\n1. \u53d8\u91cf\u7c7b\u578b\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd8\u6709\u53c2\u6570\u7c7b\u578b\u9ed8\u8ba4\u4e3aint\n\n2. \u4e09\u76ee\u8fd0\u7b97\u53ca\u5176\u77ed\u8def\u6027\n\n3. \u9017\u53f7\u8fd0\u7b97\u7b26\u53ef\u4ee5\u8282\u7701\u4e00\u5bf9\u5927\u62ec\u53f7\n\n\n\n4. 200010\u6539\u62101<<19\u80fd\u7701\u4e00\u4e2a\u5b57\u7b26QAQ\n\n\u6211\u4f30\u8ba1\u8fd9\u4e2a\u8fd8\u80fd\u7f29emmm\u4f46\u662f\u6211\u6682\u65f6\u60f3\u4e0d\u51fa\u6765\u4e86QAQ\n\n\u5949\u4e0a\u672c\u84bb\u7684\u4ee3\u7801QAQ\n\n\uff08\u5f97\u7528C\u8bed\u8a00\u63d0\u4ea4\u54e6\uff09\n\n\uff08\u6211\u4f30\u8ba1\u7528\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u53ef\u4ee5\u66f4\u77ed\uff1f\uff09\n\n\n```c\nn,c[1<<19],m,i=1,t,x,y;\nA(p,q){for(;p<=n;p+=p&-p)c[p]+=q;}\nP(p){for(t=0;p;p-=p&-p)t+=c[p];return t;}\nmain(){\n    for(scanf(\"%d%d\",&n,&m);i<=n;i++)scanf(\"%d\",&t),A(i,t);\n    for(;m--;)scanf(\"%d%d%d\",&t,&x,&y),t-1?printf(\"%d\\n\",P(y)-P(x-1)):A(x,y);\n}\n```",
        "postTime": 1511526882,
        "uid": 21421,
        "name": "pantw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "/\\*\n\u770b\u5230\u90a3\u4e48\u591a\u795e\u7287\n\n\u5404\u79cd\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7684\u9012\u5f52\n\n\u624b\u52a8\u6a21\u62df\u597d\u9ebb\u70e6\n\n\u4e8e\u662f\u6211\u6765\u4e00\u53d1\u7b80\u5316\u7248\u7684\n\nZKW\u7ebf\u6bb5\u6811\u5427\n\n\u975e\u9012\u5f52\u54e6\n\n\\*/\n```cpp\n#include<cstdio>\nusing namespace std;\ninline bool bin(){register char c=getchar();while(c<49||c>50)c=getchar();return c&1;}\ninline int intin(){register char c=getchar();while(c!=45&&(c<48||c>57))c=getchar();register int a=0;register bool b=0;if(c==45){c=getchar();b=1;}while(c>47&&c<58){a=(a<<1)+(a<<3)+c-48;c=getchar();}if(b)a*=(-1);return a;}\ninline void intot(int a){if(a<0){putchar(45);a*=(-1);}if(a>9)intot(a/10);putchar(a%10+48);}\nint n,ljj[22]={1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152},zyh[2097155];\nint main()\n{\n    int m=intin(),q=intin();\n    for(int i=0;i<22;i++)if(m<ljj[i]){n=ljj[i];i=23;}//\u76f4\u63a5\u89c6\u4e3a\u6ee1\u4e8c\u53c9\u6811 \n    for(int i=1;i<=m;i++)zyh[i+n]=intin();//\u8bfb\u5165\u6570\u7ec4 \n    for(int i=n;i>0;i--)zyh[i]=zyh[i<<1]+zyh[i<<1|1];//\u5efa\u6811 \n    while(q--)if(bin())//\u4fee\u6539\u64cd\u4f5c \n    {\n        int k=intin()+n,x=intin();\n        while(k>0)\n        {\n            zyh[k]+=x;\n            k=k>>1;\n        }\n    }else{//\u67e5\u8be2\u64cd\u4f5c \n        int l=intin()+n-1,r=intin()+n,a=0,b=0,h=n;\n        while(r!=h)\n        {\n            if(r%2==0)a+=zyh[r];\n            r=(r-1)>>1;h=h>>1;\n        }\n        a+=zyh[r];\n        h=n;\n        while(l!=h)\n        {\n            if(l%2==0)b+=zyh[l];\n            l=(l-1)>>1;h=h>>1;\n        }\n        b+=zyh[l];\n        a-=b;\n        intot(a);\n        putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1508851775,
        "uid": 31890,
        "name": "\u516b\u91cd\u6a31",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\uff08\u53d1\u73b0\u6ca1\u6709\u4eba\u53d1\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\uff0c\u90a3\u6211\u5c31\u6765\u4e00\u6ce2\u7ebf\u6bb5\u6811\u9898\u89e3\u5427\uff01\uff09\n\n\u7ebf\u6bb5\u6811\u6559\u7a0b\u8be6\u7ec6\u89e3\u6790\uff08\u672c\u4eba\u7684\u535a\u5ba2\u54e6\uff09\uff1a http://www.cnblogs.com/ACworker/p/7703537.html\n\nCODE\uff1a\n\n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nLL op,n,m,x,y,k,a[1500005],low_bit,tempt;\nstruct fkt{\n    LL left;\n    LL right;\n    LL tot;\n    LL add;\n}tree[1500005];\nnamespace qaq{\n    LL change(LL test){LL ans=0;while(test){test>>=1;ans++;}test=1;while(ans--)test*=2;return test;}//\u4e3a\u4e86\u5efa\u7acb\u5b8c\u5168\u6811 \n    //\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811 \n    void build(LL lef,LL rig,LL root){//\u4ecelef\u5230rig\u7684\u8ddd\u79bb\u4ee5root\u4e3a\u6839\u5efa\u6811\uff08\u524d\u63d0\u662f\u8981\u6c42rig-lef+1\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u5b8c\u5168\u6811\uff09 \n        tree[root].left=lef;\n        tree[root].right=rig;\n        tree[root].add=0;//\u5ef6\u8fdf\u6807\u8bb0 \n        if(lef==rig){tree[root].tot=a[lef];}\n        else{\n            LL mid=(lef+rig)>>1;\n            build(lef,mid,root<<1);\n            build(mid+1,rig,root<<1|1);\n            tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n        }\n    }\n    //\u5411\u4e0b\u4f20\u9012\u5ef6\u8fdf\u6807\u8bb0\n    void pushdown(LL root){\n        if(tree[root].add){\n            tree[root<<1].add+=tree[root].add;\n            tree[root<<1|1].add+=tree[root].add;\n            tree[root<<1].tot+=tree[root].add*(tree[root<<1].right-tree[root<<1].left+1);\n            tree[root<<1|1].tot+=tree[root].add*(tree[root<<1|1].right-tree[root<<1|1].left+1);\n            tree[root].add=0;\n        }\n    } \n    //\u5411\u4e0a\u63a8\u4f20\u9012\u503c\n    void pushup(LL root){\n        tree[root].tot=tree[root<<1].tot+tree[root<<1|1].tot;\n    }     \n    //\u533a\u95f4\u66f4\u65b0\n    void update(LL nl,LL nr,LL root,LL c){\n        if(tree[root].left>nr||tree[root].right<nl)    return;\n        if(tree[root].left>=nl&&tree[root].right<=nr){\n            tree[root].add+=c;\n            tree[root].tot+=c*(tree[root].right-tree[root].left+1);\n            return;\n        }\n        pushdown(root);\n        LL mid=(tree[root].left+tree[root].right)>>1;\n        if(nl<=mid)        update(nl,nr,root<<1,c);\n        if(mid+1<=nr)    update(nl,nr,root<<1|1,c);\n        pushup(root);\n    } \n    //\u67e5\u8be2\u5de5\u4f5c,\u5728[nl,nr]\u7684\u533a\u95f4\u5185\u67e5\u627e\uff0c\u5f53\u524d\u67e5\u627e[l,r]\u533a\u95f4 \n    LL query(LL nl,LL nr,LL root){\n        if(tree[root].left>nr||tree[root].right<nl)    return 0;//\u8fd4\u56de\u4e00\u4e2a\u6781\u5c0f\u7684\u503c \n        if(tree[root].left>=nl&&tree[root].right<=nr)    return tree[root].tot;\n        pushdown(root);//\u5411\u4e0b\u4f20\u9012\u624d\u80fd\u8ba1\u7b97\u6c42\u548c\u3002\n        return query(nl,nr,root<<1)+query(nl,nr,root<<1|1);\n    }\n    int main(){\n        scanf(\"%lld%lld\",&n,&m);\n        for(LL i=1;i<=n;i++)    scanf(\"%lld\",&a[i]);\n        tempt=change(n);\n        build(1,tempt,1);\n        while(m--){\n            scanf(\"%lld\",&op);\n            if(op==1){\n                scanf(\"%lld%lld\",&x,&k);\n                update(x,x,1,k);\n            }\n            else{\n                scanf(\"%lld%lld\",&x,&y);\n                printf(\"%lld\\n\",query(x,y,1));\n            }\n        }\n        return 0;\n    }\n}\nint main(){\n    qaq::main();\n    return 0;\n}\n```",
        "postTime": 1508568266,
        "uid": 28939,
        "name": "Lyrics",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u8c01\u628a\u6211\u7684\u9898\u89e3\u4e3e\u62a5\u4e86quq, \u6211\u5199\u7684\u6ce8\u91ca\u90a3\u4e48\u8ba4\u771f(\u54c7.., \u800c\u4e14\u6211\u624d\u662f\u7b2c\u4e00\u7bc7zkw\u9898\u89e3\u554aquq\n\n\u4f5c\u4e3azkw\u7ebf\u6bb5\u6811\u7684\u5165\u95e8\u9898\u5427\uff0c\u5176\u4e2d\u6bd4\u8f83\u96be\u61c2\u7684\u533a\u95f4\u67e5\u8be2\u90e8\u5206\u5efa\u8bae\u914d\u5408 \u7edf\u8ba1\u7684\u529b\u91cf\u91cc\u7684\u4ee3\u7801\u548c**\u6211\u7684\u6ce8\u91ca** ![](http://218.28.19.228/upload/image/20170508/20170508190124\\_55300.png) \u7136\u540e\u7c98\u4ee3\u7801qwq\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\ninline int get_num() {\n    int k = 0, f = 1;\n    char c = getchar();\n    for(; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n    for(; isdigit(c); c = getchar()) k = k * 10 + c - '0';\n    return k * f;\n}\nint n, m;\nstruct zkw_segtree{\n    int M, nd[1500001];\n    inline zkw_segtree(){\n        M = 1;\n        memset(nd, 0, sizeof(nd));\n    }\n    inline void push_up(int x) { // \u4e0a\u4f20\u51fd\u6570\n        nd[x] = nd[x << 1] + nd[x << 1 | 1];\n    }\n    inline void build() {\n        for(M = 1; M <= n + 1; M <<= 1);// M\u53ef\u4ee5\u7b49\u4e8en \u6240\u4ee5\u8981M <= n + 1\n        for(int i = M + 1; i <= M + n; i++) { // \u5904\u7406\u53f6\u5b50\u8282\u70b9\n            nd[i] = get_num();\n        }\n        for(int i = M; i >= 1; i--) { // \u5904\u7406\u7236\u8282\u70b9\n            push_up(i);\n        }\n    }\n    inline void change_one_point(int x , int k) {\n        x += M;\n        nd[x] += k;\n        for(x >>= 1; x; x >>= 1) {\n            push_up(x);\n        }\n    }\n    inline int query(int l, int r) {\n        int ans = 0;\n        for(l = M + l - 1, r = M + r + 1; l ^ r ^ 1; l >>= 1, r >>= 1) { // l = M + l - 1, r = M + r + 1, \u610f\u601d\u662f\u5c06l \u548c r \u53d8\u6210\u5f00\u533a\u95f4\uff0cl ^ r ^ 1  -->  not l ^ r == 1  -->  l \u548c r\u4e0d\u662f\u540c\u4e00\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\n            if(~l & 1) ans += nd[l + 1];// l\u662f\u5de6\u5b50\u533a\u95f4                       \n            if(r & 1) ans += nd[r - 1]; // r\u662f\u53f3\u5b50\u533a\u95f4                       \n        }\n        return ans;\n    }\n}T;\nint main() {\n    n = get_num();\n    m = get_num();\n    T.build();\n    while(m--) {\n        int opr = get_num();\n        int x = get_num();\n        int y = get_num();\n        if(opr & 1) { // \u5176\u5b9e\u5c31\u662fopr == 1.....\n            T.change(x, y);\n        } else {\n            printf(\"%d\\n\", T.query(x, y));\n        }\n    }\n}\n```\n\u6ce8\u91ca\u5f88\u826f\u5fc3\u54e6quq\n\n\u987a\u4fbf\u9644\u8d60\u4e00\u4e2a\u4e00\u7bc7\u535a\u5ba2\n\n<http://kzime.xyz/2017/05/08/zkw/>\n\n",
        "postTime": 1505133163,
        "uid": 39849,
        "name": "kZime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u4eba\u7528zkw\u7684\u7ebf\u6bb5\u6811\u90a3\u6211\u5c31\u6765\u53d1\u4e00\u6ce2\u4e86\n\n\n\u5927\u81f4\u601d\u8def\u662f\u5404\u79cd\u4e8c\u8fdb\u5236\u4f18\u5316\n\n\nupdate\u662f\u66f4\u65b0\n\nquer\u662f\u67e5\u8be2\n\nfirstbit\u662f\u8f6c\u6210\u6ee1\u4e8c\u53c9\u6811\n\n\n\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u53bb\u770bzkw\u7684ppt\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint tree[1050005],n,m;\nint firstbit(int x){\nint k=0;\n    while(x)k++,x>>=1;\n    return 1<<k;\n}\nint query(int l,int r){\nint ans=0;\n    for(l=l+m-1,r=r+m+1;l^r^1;l>>=1,r>>=1){\n        if(~l&1)ans+=tree[l^1];\n        if( r&1)ans+=tree[r^1];\n    }\n    return ans;\n}\nint update(int n,int v){\n    for(tree[n+=m]+=v,n>>=1;n;n>>=1)\n        tree[n]=tree[n<<1]+tree[n<<1|1];\n}\nint main(){\nint k;\n    ios::sync_with_stdio(false);\n    cin>>n>>k;\n    m=firstbit(n);\n    for(int i=1;i<=n;i++)\n        cin>>tree[i+m];\n    for(int i=m-1;i>=1;i--)\n        tree[i]=tree[i<<1]+tree[i<<1|1];\n    while(k--){\n        int flag;\n        cin>>flag;\n        if(flag==1){\n            int a,b;\n            cin>>a>>b;\n            update(a,b);\n        }\n        else {\n            int a,b;\n            cin>>a>>b;\n            cout<<query(a,b)<<endl;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1503897649,
        "uid": 30694,
        "name": "Little_Jian",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u9898\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u6a21\u677f\uff0c\u5305\u542b2\u4e2a\u64cd\u4f5c\uff1a\u5355\u70b9\u4fee\u6539\uff0c\u6c42\u524d\u7f00\u548c\n\n\u5982\u679ctreearray\u7684data\u5b58\u50a8\u7684\u662f\u539f\u6570\u636e\uff0c\u5219\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u548c\uff08\u533a\u95f4\u6c42\u548c\u662f\u524d\u7f00\u548c\u76f8\u51cf\uff09\n\n\u5982\u679ctreearray\u7684data\u5b58\u50a8\u7684\u662f\u6e90\u6570\u636e\u7684\u5dee\u5206\uff08\u5373\uff1a\u82e5\u662f\u8ba9\u6e90\u6570\u636e\u7684\u7b2c2~5\u4e2a\u70b9+1\uff0c\u5219\u5728t\u7684data\u57df\u4e2d\uff1at.data[2]++;t.data[6]--;)\u5219\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff08\u5355\u70b9\u67e5\u8be2\u5c31\u662f\u628a\u6807\u8bb0\u90fd\u6536\u96c6\u8d77\u6765\uff09\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define N 500003\nstruct treearray{\n    #define lowbit(x) ((x)&(-x))\n    int data[N],n;\n    treearray(){\n        memset(data,0,sizeof(data));\n    }\n    void add(int x,int p){\n        for (int i=x;i<=n;i+=lowbit(i)) data[i]+=p;\n    }\n    int query(int x){\n        int ans=0;\n        for (int i=x;i>=1;i-=lowbit(i)) ans+=data[i];\n        return ans;\n    }\n}t;\nint m;\nint main(){\n    scanf(\"%d%d\",&t.n,&m);\n    for (int i=1,w;i<=t.n;i++){\n        scanf(\"%d\",&w);\n        t.add(i,w);\n    }\n    for (int i=1,c,x,y;i<=m;i++){\n        scanf(\"%d%d%d\",&c,&x,&y);\n        if (c==1) t.add(x,y);\n        if (c==2) printf(\"%d\\n\",t.query(y)-t.query(x-1));\n    }\n    return 0;    \n}\n```",
        "postTime": 1500043817,
        "uid": 29176,
        "name": "2\u5230\u6b63\u65e0\u7a77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u7684\u6a21\u7248\u9898\n\n\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4tree[]\n\n\u5176\u4e2dtree[i]\u8868\u793a\n\n[i-(i&(-i))+1,i]\u8fd9\u4e2a\u533a\u95f4\u5185a\u6570\u7ec4\u5143\u7d20\u7684\u548c\n\n\u6267\u884c\u7684\u6b21\u6570\u548c\u4e8c\u8fdb\u5236\u4e2d\u20181\u2019\u7684\u4f4d\u6570\u6709\u5173\n\nread(int pos) \u6c42 sum[1,pos]\u7684\u7b54\u6848\n\nupdate(int pos,int v) \u628aa[pos]\u52a0\u4e0av\n\n\u67e5\u8be2sum[l,r]  \uff1a read(r)-read(l-1)\n\n\n\n\u8fd9\u4e9b\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u7684\u4e00\u822c\u89e3\u6cd5\u4e86\uff01\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N = 500000+5;\nint n,M,tree[N];\nint read(int pos)\n{\n        int ans=0;\n        while (pos>0)\n        {\n            ans+=tree[pos];\n            pos-=pos&-pos;\n        }\n        return ans;\n}\nvoid update(int pos,int val)\n{\n    while(pos<=n)\n    {\n        tree[pos]+=val;\n        pos+=pos&-pos;\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&M);\n    for(int i=0;i<n;i++)\n    {\n        int num;\n        scanf(\"%d\",&num);\n        update(i+1,num);\n    }\n    for(int i=0;i<M;i++)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        if(a==1) update(b,c);\n        else printf(\"%d\\n\",read(c)-read(b-1));\n    }\n    return 0;\n}\n```",
        "postTime": 1483077664,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "**\u8fd9\u5c31\u662f\u4e00\u9053\u88f8\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u9002\u5408\u975e\u5e38\u65b0\u624b\u7ec3\u9898\uff0c\u5b8c\u5168\u5c31\u662f\u6a21\u677f\uff0c\u6ca1\u6709\u4ec0\u4e48\u597d\u89e3\u91ca\u7684**\n\n\\_\u4ee3\u7801\u5982\u4e0b\uff1a\\_\n\n>\u8fd8\u662f\u5927\u6982\u63d0\u4e00\u4e0b\u6ce8\u91ca\u4e00\u4e0b\uff0c\u65b9\u4fbf\u65b0\u624b\uff0c\u591a\u7684\u5c31\u4e0d\u89e3\u91ca\u4e86>\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,q;\nint c[1000000];\nint lowbit(int x)//\u6811\u72b6\u6570\u7ec4\u7684\u6838\u5fc3 \n{\n    return x&(-x);\n}\nvoid add(int p,int x)\n{\n    while(p<=n) \n    {\n        c[p]+=x;\n        p+=lowbit(p);//\u56e0\u4e3a\u662f\u6dfb\u52a0\u5e94\u8be5\u4ece\u4e0b\u81f3\u4e0a,\u6545\u4e0d\u505c+lowbit \n    }\n}\nint ask(int p)\n{\n    int ans=0;\n    while(p>0)\n    {\n        ans+=c[p];\n        p-=lowbit(p);//\u56e0\u4e3a\u662f\u67e5\u8be2\u6240\u4ee5\u5e94\u8be5\u4ece\u4e0a\u81f3\u4e0b\uff0c\u6545\u4e0d\u505c\u5730-lowbit \u8fdb\u884c\u7edf\u8ba1 \n    }\n    return ans;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n    for(int i=1;i<=n;i++)\n    {\n        int a;\n        scanf(\"%d\",&a);\n        add(i,a);//\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e00\u4e2a\u5730\u6dfb\u52a0\u5143\u7d20 \n    }\n    for(int i=1;i<=q;i++)\n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if(x==1) add(y,z);//\u6dfb\u52a0\u5143\u7d20 \n        else printf(\"%d\\n\",ask(z)-ask(y-1));//\u5229\u7528\u524d\u7f00\u548c\u601d\u60f3\u5206\u522b\u6c42\u51fa1~y-1\u548c1~z\u7684\u548c\u7136\u540e\u518d\u76f8\u51cf \n    }\n    return 0;\n}\n\u5f53\u7136\uff0c\u5982\u6709\u4e0d\u59a5\uff0c\u8bf7\u591a\u6307\u6559\uff01\n```",
        "postTime": 1475669018,
        "uid": 25151,
        "name": "traceson",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "##\u8fd9\u4e2a\u8fd9\u4e48\u597d\u7684\u6a21\u677f\u7adf\u7136\u6ca1\u6709\u9898\u89e3\uff0c\u5bfc\u81f4\u6211\u60f3\u5165\u6811\u72b6\u6570\u7ec4\u5751\u7684\u4eba\u90fd\u65e0\u6240\u9002\u4ece\u2026\u2026\n\n##\u6240\u4ee5\u6253\u5b8c\u677f\u5b50\u5c31\u60f3\u9020\u798f\u5927\u4f17\u5462~\n\n###\u6240\u4ee5\u5c31\u628a\u6211\u7684\u677f\u5b50\u6253\u8fc7\u6765\u4e86~\n\n\u6811\u72b6\u6570\u7ec4\u5176\u5b9e\u672c\u8eab\u597d\u50cf\u5e76\u4e0d\u662f\u591a\u4e48\u592a\u96be\u3002\u3002\n\n\u4f46\u521d\u59cb\u5316\u5374\u53c8\u8d39\u4e86\u6211\u597d\u957f\u65f6\u95f4\n\n\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u6ca1\u521d\u59cb\u5316\u8d39\u4e86\u6211\u4e00\u665a\u4e0a\u6765\u8c03\u3002\u3002\n\n\u8fd9\u4e2a\u6a21\u677f\u7684\u7801\u98ce\u6709\u70b9\u6e05\u5947\u5927\u5bb6\u51d1\u5408\u7740\u770b \u4e0d\u559c\u52ff\u55b7\n\n\n//\u6811\u72b6\u6570\u7ec4\u6a21\u677f 2016.09.26 By Zyan\n\n//==================================================== \n\n//\u5934\u6587\u4ef6\u53canamespace \n\n\u3010\u8fd9\u91cc\u7684\u4e95\u53f7\u611f\u4eba\u554a\u3011include<iostream>\n\n```cpp\nusing namespace std;\n//lowbit\n#define lowbit(i) (i&(-i))   //lowbit\u63d0\u51fa\u4e8c\u8fdb\u5236\u4f4d\u6700\u5c0f\u7684\u4e00\u4e2a1\u3010\u80fd\u7406\u89e3\u5427\n//\u5168\u5c40\u53d8\u91cf \nint c[1000001];                //\u6811\u72b6\u6570\u7ec4  \nint n=0;                      //\u6811\u72b6\u6570\u7ec4\u7684\u5143\u7d20\u603b\u4e2a\u6570  \n//\u64cd\u4f5c \nvoid init(void);              //\u521d\u59cb\u5316\nvoid add(int,int);            //\u5355\u70b9\u52a0\nint sum(int);                 //\u533a\u95f4\u6c42\u548c\nint main() \n{\n    init();\n}\n//\u521d\u59cb\u5316\u3010\u8bf7\u968f\u9898\u76ee\u6539\u52a8\u3011\nvoid init()\n{\n    int m,k;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>k;\n        add(i,k);\n    }\n    while(m--)\n    {\n        int i,j,k;\n        cin>>i>>j>>k;\n        if(i-1) cout<<sum(k)-sum(j-1)<<endl;\n        else add(j,k);\n    }\n}\n//\u7b2cx\u4f4d\u7684\u5143\u7d20 +data\nvoid add(int x,int data)      \n{\n    while(x<=n)\n    {\n        c[x]+=data;\n        x+=lowbit(x);\n    }\n}\n//\u524dx\u4f4d\u7684\u548c \nint sum(int x)\n{\n    int s=0;                         \n    //mdzz\u8bb0\u4f4f\u8fd9\u91cc\u7684\u81ea\u5df1 \u5c40\u90e8\u53d8\u91cf\u4e00\u5b9a\u8981\u521d\u59cb\u5316\n    while(x>0)\n    {\n        s+=c[x];\n        x-=lowbit(x);\n    }\n    return s;\n}\n```",
        "postTime": 1474973614,
        "uid": 18455,
        "name": "Enzymii",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "/\\*\n\\* P3374\n\n\\* Au:Small\\_Ash\n\n\\* \u672c\u9898\u5c31\u662f\u88f8\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u4e5f\u5c31\u662fBIT\uff0c\u5173\u4e8eBIT\u7684\u5b9e\u73b0\u539f\u7406\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\u6216\u8005\u770b\u6211\u7684\u7a0b\u5e8f\u7406\u89e3\n\n\\* \u672c\u9898\u89e3\u4e3b\u8981\u662f\u5982\u4f55\u5c06\u601d\u8def\u8f6c\u6362\u4e3a\u5b9e\u73b0\u3002\n\n\\* \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u6ce8\u91ca\n\n\\*/\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint tree[500005],n,m;//tree \u5c31\u662f\u4f20\u8bf4\u4e2d\u7684BIT\u5566\uff0c\u662f\u4e0d\u662f\u5f88\u60ca\u8bb6 \nvoid add(int k,int num)//\u7ed9k\u8282\u70b9\u52a0\u4e0anum \n{  \n    while(k<=n)// \n    {  \n        tree[k]+=num;//k\u8282\u70b9\u5305\u62ec\u5176\u4ee5\u4e0a\u7684\u7236\u8282\u70b9\u7684sum\u90fd\u9700\u8981\u52a0\u4e0anum \n        k+=k&-k;//\u8fd9\u5c31\u662fBIT\u6700\u795e\u5947\u7684\u5b9e\u73b0\u90e8\u5206\u4e86\uff0c\u4e5f\u5c31\u662flowbit\u3002lowbit\u5c31\u662f\u8282\u70b9\u5728\u6811\u4e2d\u7684\u5c42\u7ea7\u3002\n```\n/\\* \u8fd9\u91cc\u7684\u8ba1\u7b97\u662f\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u8865\u7801\u7684\u6027\u8d28\u3002\n\u4f8b\u5982      000001111  (15)\n\n\u8865\u7801\u5c31\u662f  111110001\n\n\u53d6\u4e0e\u5c31\u662f  000000001 \u6240\u4ee515\u7684lowbit\u5c31\u662f1\u5566\uff08\u5173\u4e8elowbit\u7684\u610f\u4e49\u8be6\u89c1\u767e\u5ea6\uff09\n\n\\*/\n```cpp\n         //  k+=k&-k; \u5c31\u662f\u5411\u4e0a\u8d70\u5566 \n    }  \n}\nint find(int k)//\u8ba1\u7b97\u4ece1\u5230k\u7684\u8282\u70b9\u7684\u603b\u6570 \n{  \n    int sum=0;//\u7d2f\u8ba1\u5668 \n    while(k)  \n    {  \n        sum+=tree[k];// \u6bcf\u4e00\u4e2a\u4e0b\u7ea7\u90fd\u8981\u52a0\u5165 \n        k-=k&-k;// \u5c31\u662f\u5411\u4e0b\u8d70\u5566 \n    }  \n    return sum;  \n}  \nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        int a;\n        scanf(\"%d\",&a);\n        add(i,a);\n    }\n    for (int i=1;i<=m;i++){\n        int k,a,b;\n        scanf(\"%d\",&k);\n        if (k==1){\n            scanf(\"%d%d\",&a,&b);\n            add(a,b);\n        }\n        if (k==2){\n            scanf(\"%d%d\",&a,&b);\n            printf(\"%d\\n\",find(b)-find(a-1));//\u524d\u7f00\u548c\u601d\u60f3\uff0cd[y]-d[x-1]=x\u5230y\u7684\u603b\u548c\u3002 \n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1474942487,
        "uid": 745,
        "name": "dph754132771",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6ca1\u4eba\u8d34pascal\u7684\u4ee3\u7801\uff0c\u90a3\u6211\u5c31\u8d34\u4e00\u4e0b\u5427\n\n\u7b97\u6cd5\u601d\u60f3\u767e\u5ea6\u8fd8\u662f\u633a\u591a\u7684\n\n\u4ee3\u7801\uff1a\n\n\n\n\n\n```cpp\nconst maxn=600000;\nvar tree,a:array [0..maxn] of longint;\n    n,m,i,x,y,k:longint;\nfunction lowbit(x:longint):longint;   //\u6811\u72b6\u6570\u7ec4\u6c42\u5b50\u7236\u8282\u70b9\u7684\u7cbe\u9ad3\uff0c\u8868\u793ax\u4e8c\u8fdb\u5236\u4e0b\u6700\u4f4e\u4f4d\u76841\u7684\u4f4d\u6743\n  begin\n    exit(x and -x);\n  end;\nprocedure add(x,y:longint);     //\u7ed9\u7b2cx\u4e2a\u6570\u589e\u52a0y\n  begin\n    while x<=n do\n    begin\n      inc(tree[x],y);\n      inc(x,lowbit(x));\n    end;\n  end;\nfunction sum(x:longint):longint;    //\u6c421~x\u7684\u548c\n  begin\n    sum:=0;\n    while x>0 do\n    begin\n      inc(sum,tree[x]);\n      dec(x,lowbit(x));\n    end;\n  end;\nBegin\n  fillchar(tree,sizeof(tree),0);\n  readln(n,m);\n  for i:=1 to n do read(a[i]);\n  for i:=1 to n do add(i,a[i]);    //\u5efa\u6811\n  for i:=1 to m do\n  begin\n    readln(k,x,y);\n    case k of\n      1:add(x,y);\n      2:writeln(sum(y)-sum(x-1));      //\u524d\u7f00\u548c\u601d\u60f3\n    end;\n  end;\nEnd.\n```",
        "postTime": 1480217907,
        "uid": 582,
        "name": "zty61211",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u6a21\u677f\u9898\u5c31\u8be5\u6bd4\u8c01\u7684\u4ee3\u7801\u77ed\uff01\n\n```cpp\n#include<cstdio>\n#include<cstring>\nconst int MAXN=500010;\ninline int lowbit(int x){return x&-x;}\nint a[MAXN],n,m;\nvoid add(int p,int v){\n    while(p<=n) a[p]+=v,p+=lowbit(p);\n}\nint pre(int p){\n    if(!p) return 0;\n    int s;\n    for(s=0;p;p-=lowbit(p)) s+=a[p];\n    return s;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    int t,x,y;\n    for(int i=1;i<=n;i++) scanf(\"%d\",&t),add(i,t);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&t,&x,&y);\n        if(t==1) add(x,y);\n        else printf(\"%d\\n\",pre(y)-pre(x-1));\n    }\n}\n```",
        "postTime": 1475310771,
        "uid": 15183,
        "name": "Rapiz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    },
    {
        "content": "\u4ee3\u7801\u597d\u8bb0\u5440\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define lowbit(x) (-(x)&(x))\n\nint n, c[666666];\n\nvoid update(int pos, int val) {\n    for (; pos <= n; pos += lowbit(pos))\n        c[pos] += val;\n}\n\nint query(int pos) {\n    int ans(0);\n    for (; pos; pos -= lowbit(pos))\n        ans += c[pos];\n    return ans;\n}\n\nint main() {\n    int m;\n    cin >> n >> m;\n    for (int i(1); i <= n; ++i) {\n        int v;\n        cin >> v;\n        update(i, v);\n    } \n    for (int i(0); i < m; ++i) {\n        int a, b, c;\n        cin >> a >> b >> c;\n        if (a == 1)\n            update(b, c);\n        else\n            cout << query(c) - query(b - 1) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1475118032,
        "uid": 22214,
        "name": "wffms69_8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3374 \u3010\u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1\u3011"
    }
]