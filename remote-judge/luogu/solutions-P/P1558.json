[
    {
        "content": "\u9898\u89e3\u91cc\u9762\u597d\u50cf\u90fd\u662f\u538b\u4f4d\u4ec0\u4e48\u7684\uff0c\n\n\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u771f\u7684\u4e0d\u4f1a\uff0c\n\n\u6240\u4ee5\u5c31\u6765\u8c08\u8c08\u6211\u768430\u9897\u7ebf\u6bb5\u6811\u8822\u65b9\u6cd5\u5427\uff01\n\n\u8fd9\u9898\u521d\u770b\u6ca1\u6709\u5934\u7eea\u3002\n\n\u7136\u540e\u53d1\u73b0\u989c\u8272\u8303\u56f4\u597d\u50cf\u53ea\u670930\uff1b\n\n\u6240\u4ee5\uff0c\u6211\u5c31\u60f3\u5230\u4e00\u79cdsao\u64cd\u4f5c\uff0c\u641e30\u9897\u7ebf\u6bb5\u6811\u3002\n\n\u6bcf\u9897\u7ebf\u6bb5\u6811\u4ee3\u8868\u4e00\u79cd\u989c\u8272\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u9898\u4e2d\u7684\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1.\u4fee\u6539\u3002\u6211\u4eecfor\u5faa\u73af\u626b\u4e00\u904d\u6240\u6709\u989c\u8272\uff0c\u628a\u5176\u4ed6\u989c\u8272\u7684\u7ebf\u6bb5\u6811l->r\u4fee\u6539\u62100\uff0c\u8981\u4fee\u6539\u7684\u989c\u8272\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u6539\u62101\u3002\n\n2.\u8be2\u95ee\u3002\u4e5f\u662ffor\u5faa\u73af\uff0c\u5982\u679cl->r\u8fd9\u4e2a\u533a\u95f4\u7684\u7b2ck\u79cd\u989c\u8272\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u6709\u503c\uff0c\u5219ans++\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5f88\u4f4e\uff0c\u5927\u6982\u662f(MLlog(L)*T).\n\n\u732e\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define ll(x) ((x)<<1)\n#define rr(x) ((x)<<1|1)\nusing namespace std;\n\nconst int T=31,N=100010;\nint n,t,m;\nint laz[T][N<<2],sum[T][N<<2];\n\nvoid pushup(int i,int x)\n{\n\tsum[i][x]=sum[i][ll(x)]+sum[i][rr(x)];\n}\n\nvoid build(int i,int x,int l,int r)\n{\n\tif (l==r) {\n\t\tsum[i][x]=1;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(i,ll(x),l,mid);\n\tbuild(i,rr(x),mid+1,r);\n\tpushup(i,x);\n}\n\nvoid pushdown(int i,int x)\n{\n\tif (laz[i][x]==-1) {\n\t\tsum[i][ll(x)]=sum[i][rr(x)]=0;\n\t\tlaz[i][ll(x)]=laz[i][rr(x)]=-1;\n\t}\n\telse {\n\t\tsum[i][ll(x)]=sum[i][rr(x)]=laz[i][x];\n\t\tlaz[i][ll(x)]=laz[i][rr(x)]=laz[i][x];\n\t}\n\tlaz[i][x]=0;\n}\n\nvoid change(int i,int x,int l,int r,int ls,int rs,int v)\n{\n\tif (l>rs||r<ls) return;\n\tif (l>=ls&&r<=rs) {\n\t\tsum[i][x]=v;\n\t\tif (!v) laz[i][x]=-1;\n\t\telse laz[i][x]=v;\n\t\treturn;\n\t}\n\tif (laz[i][x]) pushdown(i,x);\n\tint mid=l+r>>1;\n\tif (ls<=mid) change(i,ll(x),l,mid,ls,rs,v);\n\tif (rs>mid) change(i,rr(x),mid+1,r,ls,rs,v);\n\tpushup(i,x);\n}\n\nint ask(int i,int x,int l,int r,int ls,int rs)\n{\n\tif (l>rs||r<ls) return 0;\n\tif (l>=ls&&r<=rs) return sum[i][x];\n\tif (laz[i][x]) pushdown(i,x);\n\tint mid=l+r>>1;\n\treturn ask(i,ll(x),l,mid,ls,rs)+ask(i,rr(x),mid+1,r,ls,rs);\n}\n\nint main()\n{\n\tcin>>n>>t>>m;\n\tbuild(1,1,1,n);\n\tchar s[3];int l,r,v;\n\tfor (int i=1;i<=m;++i) {\n\t\tscanf(\"%s%d%d\",s,&l,&r);\n\t\tif (l>r) swap(l,r);\n\t\tif (s[0]=='C') {\n\t\t\tscanf(\"%d\",&v);\n\t\t\tfor (int k=1;k<=t;++k)\n\t\t\t\tif (k!=v)\n\t\t\t\t\tchange(k,1,1,n,l,r,0);\n\t\t\t\telse change(k,1,1,n,l,r,1);\n\t\t}\n\t\telse {\n\t\t\tint ans=0;\n\t\t\tfor (int k=1;k<=t;++k)\n\t\t\t\tif (ask(k,1,1,n,l,r))\n\t\t\t\t\t++ans;\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1532433651,
        "uid": 45781,
        "name": "fyfy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "# \u60f3\u8981\u8bd5\u8bd5\u66f4\u52a0\u7b80\u5355\u76f4\u767d\u7684\u7ebf\u6bb5\u6811\u5417\uff1f\n\n## PS\uff1a\u98df\u7528\u672c\u7bc7\u9898\u89e3\u9700\u8981\u4e00\u5b9a\u7ebf\u6bb5\u6811\u57fa\u7840\n\n\uff08\u5c0f\u58f0\uff1a\u8bf4\u8d77\u6765\u4f60\u4eec\u5e94\u8be5\u90fd\u6ce8\u610f\u5230\u5230\u8bfb\u5165\u65f6l\u548cr\u53ef\u4ee5\u662f\u53cd\u7740\u7684\u4e86\u5427\uff09\n\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\uff0c\u533a\u95f4\u66f4\u65b0\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u5230\u7ebf\u6bb5\u6811\u7684\u3002\u5177\u4f53\u5728\u4e8e\u600e\u4e48\u5efa\u6811\uff0c\u6811\u91cc\u8981\u7ef4\u62a4\u4ec0\u4e48\uff0c\u600e\u4e48\u7ef4\u62a4\u3002\n\n## \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u76f4\u767d\u7684\u601d\u8def\uff0c\u6ca1\u9519\uff0c\u5c31\u662f\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u4e0a\u662f\u4ec0\u4e48\u989c\u8272\uff01\n\n\u8fd9\u4e2a\u601d\u8def\u80af\u5b9a\u5927\u5bb6\u90fd\u8fdb\u884c\u8fc7\u5c1d\u8bd5\uff0c\u4f46\u662f\u5374\u4e0d\u597d\u60f3\u5230\u600e\u4e48\u7ef4\u62a4\uff0c\u6bd5\u7adf\u4e00\u6bb5\u533a\u95f4\u91cc\u53ef\u4ee5\u662f\u4e94\u989c\u516d\u8272\u7684\uff08\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u72b6\u538b\u6d41\u6d3e\uff0c\u76f4\u63a5\u538b\u7f29\u72b6\u6001\u7ef4\u62a4\u4e94\u989c\u516d\u8272\u533a\u95f4\uff09\uff0c\u4e0d\u597d\u76f4\u63a5\u6c42\u5230\uff0c\u4f46\u5982\u679c\u5f80\u201c\u6df1\u201d\u5904\u60f3\uff0c\u8fd9\u4e2a\u533a\u95f4\u4e94\u989c\u516d\u8272\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684\u513f\u5b50\u4eec\u5462\uff1f\u513f\u5b50\u4eec\u7684\u513f\u5b50\u4eec\u5462\uff1f\u6240\u4ee5\u5411\u4e0b\u627e\u603b\u4f1a\u9047\u5230\u5b8c\u6574\u533a\u95f4\u7684\uff0c\u5927\u4e0d\u4e86\u4e00\u76f4\u627e\u5230\u53f6\u8282\u70b9\u53bb\u3002\n\n\u6240\u4ee5\u6211\u4eec\u7684\u601d\u8def\u5c31\u662f\u4ece\u4e0a\u5f80\u4e0b\u627e\uff0c\u627e\u5230\u989c\u8272\u5b8c\u6574\u7684\u533a\u95f4\u5c31\u505c\u6b62\u5411\u4e0b\u5e76\u7edf\u8ba1\u7b54\u6848\u3002\n\n(\u8fd9\u79cd\u65b9\u6cd5\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3\u989c\u8272\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u4e0a\u7565\u900a\u4e8e\u72b6\u538b\uff0c\u4f46\u9002\u7528\u8303\u56f4\u66f4\u5e7f\uff09\n\n\u7ec6\u8282\u65b9\u9762\uff1a\n\n\u7ef4\u62a4\u4ec0\u4e48\uff1a\u989c\u8272+\u662f\u5426\u53ea\u6709\u4e00\u79cd\u989c\u8272\uff08\u5982\u679c\u540e\u8005\u4e0d\u6ee1\u8db3\u5219\u524d\u8005\u7684\u503c\u6ca1\u6709\u610f\u4e49\uff09\n\n\u5efa\u6811\uff1a\u6b63\u5e38\u5efa\u6811\uff0c\u5e76\u5c06\u6240\u6709\u8282\u70b9\u7684\u989c\u8272\u6d82\u4e3a1\u5e76\u6807\u8bb0\u4e3a\u5b8c\u6574\u533a\u95f4\u3002\n\n\u4fee\u6539\uff1a\u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684\u533a\u95f4\u4e0d\u662f\u4fee\u6539\u533a\u95f4\u7684\u5b50\u96c6\u5219\u5f53\u524d\u533a\u95f4\u7684\u5b8c\u6574\u6027\u88ab\u7834\u574f\uff08\u53ef\u80fd\u4f60\u4f1a\u95ee\u5982\u679c\u90a3\u4e2a\u533a\u95f4\u539f\u672c\u5c31\u662fA\u989c\u8272\uff0c\u53c8\u88ab\u6d82\u4e0aA\u989c\u8272\u600e\u4e48\u529e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e0a\u4f20\u64cd\u4f5c\u5b9e\u73b0\uff0c\u7b49\u4f1a\u513f\u4f1a\u63d0\u5230\uff09\uff0c\u4e00\u76f4\u627e\u5230\u88ab\u4fee\u6539\u533a\u95f4\u5b8c\u5168\u5305\u542b\u7684\u533a\u95f4\uff0c\u540c\u65f6\u4e2d\u9014\u4f1a\u6709\u4e0b\u653e\u64cd\u4f5c\u4ee5\u4fdd\u8bc1\u533a\u95f4\u5185\u6570\u636e\u7684\u6b63\u786e\u6027\n\n\u67e5\u8be2\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u627e\uff0c\u4e00\u76f4\u627e\u5230\u5b8c\u6574\u533a\u95f4\u4e3a\u6b62\uff0c\u4e2d\u9014\u548c\u6b63\u5e38\u7ebf\u6bb5\u6811\u4e00\u6837\u4f1a\u6709\u4e0b\u653e\u64cd\u4f5c\u4ee5\u4fdd\u8bc1\u533a\u95f4\u5185\u6570\u636e\u7684\u6b63\u786e\u6027\uff0c\u6ce8\u610f\u8981\u6709\u989c\u8272\u5224\u91cd\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u66b4\u529b\u7684bool\u6807\u8bb0\u5224\u65ad\uff0c\u8bb0\u5f97\u6bcf\u6b21\u67e5\u8be2\u8981\u521d\u59cb\u5316\u4e00\u904d\uff08\u8981\u662f\u6ca1\u8fd9\u4e2a\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u79cd\u989c\u8272\u6211\u90fd\u80fd\u8dd1\uff08\u5c0f\u4f18\u8d8a\uff09\uff09\n\n\u4e0a\u4f20\uff1a(\u672c\u4eba\u559c\u6b22\u53eb\u505aupdate,\u4f46\u4e3b\u6d41\u53eb\u6cd5\u597d\u50cf\u662fpushup?)\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u90fd\u662f\u5b8c\u6574\u7684\uff0c\u5e76\u4e14\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5c31\u662f\u5b8c\u6574\u7684\uff0c\u989c\u8272\u4e0e\u5de6\u513f\u5b50/\u53f3\u513f\u5b50\u76f8\u540c\u3002\n\n\u4e0b\u653e\uff1a(\u672c\u4eba\u559c\u6b22\u53eb\u505aspread,\u4f46\u4e3b\u6d41\u53eb\u6cd5\u597d\u50cf\u662fpushdown?)\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u5b8c\u6574\uff0c\u90a3\u4e48\u4ed6\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u4e5f\u53ef\u4ee5\u88ab\u67d3\u6210\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u989c\u8272\u4e0e\u8fd9\u4e2a\u533a\u95f4\u76f8\u540c\u3002\n\n\u66f4\u7ec6\u7684\u7ec6\u8282\u770b\u4ee3\u7801\u5427\n\n```cpp\n#include <bits/stdc++.h>\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1\n#define mx 100005\nusing namespace std;\nstruct node//\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22\u7ed3\u6784\u4f53\u7248\u7684\u7ebf\u6bb5\u6811\n{\n    int l, r, clr;//\u5de6\u53f3\u7aef\u70b9\u4ee5\u53ca\u533a\u95f4\u91cc\u662f\u4ec0\u4e48\u989c\u8272\n    bool all;//\u533a\u95f4\u5b8c\u6574\u6027\n};\ninline int FS()//\u4ee5\u8001\u5a46\u540d\u5b57\u547d\u540d\u7684\u6807\u51c6\u5feb\u8bfb\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (!isdigit(ch))\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (isdigit(ch))\n    {\n        x = (x << 3) + (x << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nnode tree[mx << 2];\nbool mark[35];//\u63d0\u5230\u7684\u5224\u91cd\u6807\u8bb0\nvoid spread(int p)//\u4e0b\u653e\n{\n    tree[ls(p)].clr = tree[p].clr;\n    tree[rs(p)].clr = tree[p].clr;\n    tree[ls(p)].all = tree[rs(p)].all = 1;\n}\nvoid update(int p)//\u4e0a\u4f20\n{\n    if (tree[ls(p)].all && tree[rs(p)].all && tree[ls(p)].clr == tree[rs(p)].clr)\n    {\n        tree[p].clr = tree[ls(p)].clr;\n        tree[p].all = 1;\n    }\n}\nvoid build(int l, int r, int p)//\u5efa\u6811\n{\n    tree[p].l = l;\n    tree[p].r = r;\n    tree[p].all = 1;\n    tree[p].clr = 1;//\u4e00\u5f00\u59cb\u65f6\uff0c\u6240\u4ee5\u533a\u95f4\u90fd\u662f\u5b8c\u6574\u7684\u5e76\u4e14\u989c\u8272\u4e3a1\n    if (l == r)\n        return;\n    int mid = (l + r) >> 1;\n    build(l, mid, ls(p));\n    build(mid + 1, r, rs(p));\n}\nvoid change(int l, int r, int c, int p)//\u67d3\u8272\n{\n    if (l <= tree[p].l && tree[p].r <= r)//\u5982\u679c\u88ab\u5b8c\u5168\u5305\u542b\n    {\n        tree[p].all = 1;//\u533a\u95f4\u4f1a\u5b8c\u5b8c\u6574\u6574\u5730\u88ab\u67d3\u6210c\u53f7\u989c\u8272\n        tree[p].clr = c;\n        return;\n    }\n    if (tree[p].all)//\u5982\u679c\u662f\u5b8c\u6574\u7684\u5c31\u9700\u8981\u4e0b\u653e\u4ee5\u7ef4\u62a4\u6b63\u786e\u6027\uff08\u4e0d\u5b8c\u6574\u7684\u4e0d\u80fd\u4e0b\u653e\uff0c\u56e0\u4e3a\u4e0d\u5b8c\u6574\u7684\u533a\u95f4\u7684\u989c\u8272\u6839\u672c\u6ca1\u6709\u610f\u4e49\uff09\n        spread(p);\n    tree[p].all = 0;//\u80fd\u8d70\u5230\u8fd9\u4e00\u6b65\u6765\uff0c\u8bf4\u660e\u5f53\u524d\u533a\u95f4\u80af\u5b9a\u4e0d\u662f\u67d3\u8272\u533a\u95f4\u7684\u5b50\u96c6\uff0c\u540c\u65f6\u53c8\u542b\u6709\u90e8\u5206\u67d3\u8272\u533a\u95f4\uff0c\u90a3\u4e48\u5b83\u7684\u5b8c\u6574\u6027\u4f1a\u88ab\u7834\u574f\n    int mid = (tree[p].l + tree[p].r) >> 1;\n    if (l <= mid)\n        change(l, r, c, ls(p));\n    if (mid + 1 <= r)\n        change(l, r, c, rs(p));\n    update(p);//\u4e0a\u4f20\u66f4\u65b0\u64cd\u4f5c\n}\nint ans;//\u7528\u4e8e\u7d2f\u8ba1\u67e5\u8be2\u7684\u989c\u8272\u6570\u91cf\nvoid qry(int l, int r, int p)//\u67e5\u8be2\n{\n    if (tree[p].all)//\u4e00\u76f4\u627e\u5230\u533a\u95f4\u5b8c\u6574\u4e3a\u6b62\n    {\n        if (!mark[tree[p].clr])//\u5224\u91cd\n        {\n            mark[tree[p].clr] = 1;\n            ans++;\n            return;\n        }\n        return;\n    }\n    if (tree[p].all)\n        spread(p);\n    int mid = (tree[p].l + tree[p].r) >> 1;\n    if (l <= mid)\n        qry(l, r, ls(p));\n    if (mid + 1 <= r)\n        qry(l, r, rs(p));\n    update(p);\n}\nint main()\n{\n    int L, T, O;\n    L = FS();\n    T = FS();\n    O = FS();\n    build(1, L, 1);\n    for (int i = 1, c1, c2, c3; i <= O; i++)\n    {\n        char ch;\n        do\n        {\n            ch = getchar();\n        } while (ch != 'C' && ch != 'P');//\u9632\u6b62\u8bfb\u5165\u7a00\u5947\u53e4\u602a\u7684\u7a7a\u683c\u4e4b\u7c7b\u7684\u4e1c\u897f\n        if (ch == 'C')\n        {\n            c1 = FS();\n            c2 = FS();\n            c3 = FS();\n            if(c1 > c2) swap(c1 ,c2);//\u8bf4\u51fa\u6765\u4f60\u53ef\u80fd\u4e0d\u4fe1\uff0c\u8fd9\u4e1c\u897f\u8c03\u4e86\u6211\u4e00\u4e2a\u5c0f\u65f6\n            change(c1, c2, c3, 1);\n        }\n        else\n        {\n            c1 = FS();\n            c2 = FS();\n            memset(mark, 0, sizeof(mark));//\u522b\u5fd8\u4e86\u8981\u5148\u6e05\u6807\u8bb0\u54e6~\n            ans = 0;\n            if(c1 > c2) swap(c1 ,c2);\n            qry(c1, c2, 1);\n            cout << ans << endl;\n        }\n    }\n    return 0;//\u6536\u5de5~\n}\n```\n(\u8fd9\u53ef\u80fd\u662f\u6211\u6d1b\u8c37\u4e0a\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u4e86\u5427)",
        "postTime": 1573659240,
        "uid": 114732,
        "name": "Derpy",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u9898\u770b\u4e0a\u53bb\u597d\u5413\u4eba\u554a\uff0c\u4f46\u7b2c\u4e8c\u773c\u770b\u5c31\u53ef\u4ee5\u53d1\u73b0t<=30\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u72b6\u6001\u538b\u7f29\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u4e8c\u8fdb\u5236\u7684\u7b2ci\u4f4d\u4e3a1\uff0c\u5219\u8fd9\u4e2a\u6570\u4ee3\u8868\u7684\u533a\u95f4\u91cc\u6709\u7b2ci\u4e2a\u989c\u8272\u7684\u683c\u5b50\u3002\n\u72b6\u538b\u5b8c\u6bd5\u3002\n\u4e4b\u540e\u6211\u4eec\u518d\u6765\u770b\u600e\u4e48\u5957\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u65e0\u975e\u5c31\u662f\u786e\u5b9a\u4e0a\u63a8\u548c\u4e0b\u63a8\u89c4\u5219\uff0c\u5148\u770b\u4e0a\u63a8\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6309\u4f4d\u4e8e\u4e00\u4e0b\uff08\u56e0\u4e3a\u53ea\u8981\u6c42\u5de6\u53f3\u533a\u95f4\u4e00\u4e2a\u6709\u8fd9\u79cd\u989c\u8272\uff09\uff0c\u518d\u6765\u4e0b\u63a8\uff0c\u7531\u4e8e\u989c\u8272\u53ef\u4ee5\u8986\u76d6\uff0c\u90a3\u4e48\u76f4\u63a5\u628a\u539f\u6765\u7684\u503c\u7ed9\u8986\u76d6\u6389\uff0clazy\u6807\u8bb0\u4e5f\u662f\u5982\u6b64\u3002\n\u4e0a\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<iostream>\n#define ll long long\nusing namespace std;\nll sum[400001],n,t,c,i,ad[400001];\ninline void pushup(ll rt){\n\tsum[rt]=sum[rt<<1]|sum[rt<<1|1];\n}\ninline void build(ll rt,ll l,ll r){\n\tif (l==r){\n\t\tsum[rt]=1<<1;\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(rt<<1,l,m);\n\tbuild(rt<<1|1,m+1,r);\n\tpushup(rt);\n}\ninline void pushdown(ll rt,ll l,ll r){\n\tif (ad[rt]){\n\t\tsum[rt<<1]=(1<<ad[rt]);\n\t\tsum[rt<<1|1]=(1<<ad[rt]);\n\t\tad[rt<<1]=ad[rt];\n\t\tad[rt<<1|1]=ad[rt];\n\t\tad[rt]=0;\n\t}\n}\ninline void update(ll rt,ll l,ll r,ll x,ll y,ll k){\n\tif (l>y||x>r) return;\n\tif (x<=l&&r<=y){\n\t\tsum[rt]=(1<<k);\n\t\tad[rt]=k;\n\t\treturn;\n\t}\n\tpushdown(rt,l,r);\n\tll m=(l+r)>>1;\n\tif (m>=x) update(rt<<1,l,m,x,y,k);\n\tif (m<y) update(rt<<1|1,m+1,r,x,y,k);\n\tpushup(rt);\n}\ninline int query(ll rt,ll l,ll r,ll x,ll y){\n\tif (l>y||x>r) return 0;\n\tif (x<=l&&r<=y)\treturn sum[rt];\n\tpushdown(rt,l,r);\n\tll m=(l+r)>>1,ans=0;\n\tif (m>=x) ans|=query(rt<<1,l,m,x,y);\n\tif (m<y) ans|=query(rt<<1|1,m+1,r,x,y);\n\treturn ans;\n}\nint main(){\n\tchar u; ll x,y,k;\n\tscanf(\"%lld%lld%lld\",&n,&c,&t);\n\tbuild(1,1,n);\n\twhile (t--){\n\t\tcin>>u;\n\t\tif(u=='C'){\n\t\t\tscanf(\"%lld%lld%lld\",&x,&y,&k);\n\t\t\tif (x>y) swap(x,y);\n\t\t\tupdate(1,1,n,x,y,k);\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%lld%lld\",&x,&y);\n\t\t\tif (x>y) swap(x,y);\n\t\t\tll p=query(1,1,n,x,y),ans=0;\n\t\t\tfor (i=1; i<=c; i++) if (p&(1<<i)) ans++;\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1534928477,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "** \u7ebf\u6bb5\u6811\u901a\u4fd7\u6613\u61c2\u7684\u9898\u89e3\u54c7\u5566\u5566**\n\n**\u601d\u8def\u4e3b\u8981\u5c31\u662f\u628a\u6bcf\u4e2a\u533a\u95f4\u7684\u72b6\u6001\u7528\u4e8c\u8fdb\u5236\u6570\u8868\u793a**\n\n**\u56e0\u4e3a\u662f\u67d3\u8272color\u51fd\u6570\u5c31\u76f4\u63a5\u8986\u76d6**\n\n**lazy\u6807\u5411\u4e0bpushdown\u4e5f\u662f\u76f4\u63a5\u8986\u76d6**\n\n**\u770b\u6ce8\u91ca\u5566**\n\n```cpp\n#include<stdio.h>\n#include<string.h>\nint    l,t,o;\nint a[1000005]={0},lazy[1000005]={0};\nlong long lala(int x){\n    long long temp=1;\n    for(int lmq=0;lmq<x;lmq++){\n        temp*=2;\n    }\n    return temp;\n}\nvoid pushdown(int num){\n    if(lazy[num]){\n        lazy[num*2]=lazy[num];\n        lazy[num*2+1]=lazy[num];\n        a[num*2]=lazy[num];\n        a[num*2+1]=lazy[num];\n        lazy[num]=0;\n    }\n}\nvoid pushup(int num){\n    a[num]=a[num*2]|a[num*2+1];\n}\nvoid build(int left,int right,int num){\n    if(left==right){\n        a[num]=1;\n        return;\n    }\n    int mid=(left+right)/2;\n    build(left,mid,num*2);\n    build(mid+1,right,num*2+1);\n    pushup(num);\n}\nvoid color(int l,int r,int c,int left,int right,int num){\n    if(l<=left&&r>=right){//\u627e\u5230\u7b26\u5408\u533a\u95f4\u76f4\u63a5\u8986\u76d6\n        pushdown(num);\n        long long tmp=lala(c-1);\n        a[num]=tmp;\n        lazy[num]=tmp;\n        return ;\n    }\n    pushdown(num);\n    int mid=(left+right)/2;\n    if(l<=mid){\n        color(l,r,c,left,mid,num*2);\n    }\n    if(mid<r){\n        color(l,r,c,mid+1,right,num*2+1);\n    }\n    pushup(num);\n}\nlong long ask(int l,int r,int left,int right,int num){\n    if(l<=left&&right<=r){\n        return a[num];\n    }\n    pushdown(num);\n    int mid=(left+right)/2;\n    long long temp=0;\n    if(l<=mid){\n        temp=temp|ask(l,r,left,mid,num*2);//\u4e24\u4e2a\u72b6\u6001\u7528\u6216\u8fd0\u7b97\u5408\u5728\u4e00\u8d77\n    }\n    if(mid<r){\n        temp=temp|ask(l,r,mid+1,right,num*2+1);\n    }\n    return temp;\n}\nvoid f(long long x){\n    int res=0;\n    for(;x!=0;){\n        if(x%2==1)    res++;\n        x=x/2;\n    }\n    printf(\"%d\\n\",res);\n    return;\n}\nint main(){//\u4e3b\u51fd\u6570\n    scanf(\"%d%d%d\",&l,&t,&o);\n    build(1,l,1);//\u8f93\u5165\u5b8c\u5efa\u6811\n    for(int i=0;i<o;i++){\n        char q[3];\n        scanf(\"%s\",q);\n        if(q[0]=='C'){\n            int c1,c2,c3;\n            scanf(\"%d%d%d\",&c1,&c2,&c3);\n            if(c1>c2){\n                int chicken=c1;\n                c1=c2;\n                c2=chicken;\n            }\n            color(c1,c2,c3,1,l,1);//color\u8986\u76d6\u67d3\u8272\n        }\n        else{\n            int c1,c2;\n            scanf(\"%d%d\",&c1,&c2);\n            if(c1>c2){\n                int chicken=c1;\n                c1=c2;\n                c2=chicken;\n            }\n            long long ans=ask(c1,c2,1,l,1);//\u8be2\u95ee\u533a\u95f4\u67d3\u8272\u72b6\u6001\n            f(ans);//\u5c06\u4e8c\u8fdb\u5236\u6570\u8f6c\u5316\u4e3a\u989c\u8272\u79cd\u7c7b\u6570\u5e76\u8f93\u51fa\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1510797685,
        "uid": 18035,
        "name": "MindyY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u770b\u5927\u4f6c\u4eec\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f3c\u4e4e\u5bf9\u4e8e\u672c\u849f\u84bb\u6765\u8bf4\u6709\u4e9b\u96be\u61c2\uff1b\n###### \u6211\u6765\u7ed9\u521d\u5b66\u8005\u4eec\u4ecb\u7ecd\u4e00\u4e0bSTL\u7684bitset\u3002\n\n\u9996\u5148\uff0c\u9700\u8981<bitset>\u5934\u6587\u4ef6\u3002\n  \n ```cpp\n#include<bitset>\nusing namespace std;\n```\nbitset\u76f8\u5f53\u4e8e\u4e00\u4e2abool\u6570\u7ec4\uff0c\u4f46\u662f\u4f18\u70b9\u662f\u4e24\u4e2abitset\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u6309\u4f4d\u8fd0\u7b97\u3002\n\n \u5b9a\u4e49\u65b9\u5f0f\u5982\u4e0b\uff1a\n ```cpp\nbitset<1000>a\n```\n  \u521d\u59cb\u503c\u662f\u5168\u90e8\u8bbe\u4e3a 0 \u7684\u3002\n  \n\u6216\u8005\n```cpp\nstring s=\"1010101\"\nbitset <1000>a1(s);\n ```\n\u524d\u9762\u4e0d\u8db3\u4f4d\u7528 0 \u8865\u8db3\uff1b\u82e5\u5b57\u7b26\u4e32\u957f\u5ea6\u957f\u4e8e\u5b9a\u4e49\u957f\u5ea6\uff0c\u53ea\u53d6\u524d\u9762\u90e8\u5206\u3002\n\n\u4e4b\u540e\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u505a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u8fdb\u884c\u4e0e\u3001\u6216\u3001\u975e\u3001\u5f02\u6216\u3001\u5de6\u53f3\u79fb\u8fd0\u7b97\u4e86\u3002\n```cpp\nbitset<4> foo (string(\"1001\"));\nbitset<4> bar (string(\"0011\"));\nfoo^=bar; //1010(foo\u5bf9bar\u6309\u4f4d\u5f02\u6216\u540e\u8d4b\u503c\u7ed9foo)\nfoo&=bar; //0010(\u6309\u4f4d\u4e0e\u540e\u8d4b\u503c\u7ed9foo)\nfoo|=bar; //0011(\u6309\u4f4d\u6216\u540e\u8d4b\u503c\u7ed9foo)\nfoo<<=2;  //1100(\u5de6\u79fb2\u4f4d\uff0c\u4f4e\u4f4d\u88650\uff0c\u6709\u81ea\u8eab\u8d4b\u503c)\nfoo>>=1;  //0110(\u53f3\u79fb1\u4f4d\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u81ea\u8eab\u8d4b\u503c)\n```\n\u53e6\u5916\u4ed6\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u7684\u4e00\u4e9b\u529f\u80fd\u3002\n```cpp\na.set() //\u5c06\u6240\u6709\u4f4d\u53d8\u62101\na.set(k) //\u5c06\u7b2ck\u4f4d\u53d8\u62101\uff0c\u8d85\u9650\u4f1a\u62a5\u9519\na.reset() //\u6e05\u7a7abitset\na.reset(k) //\u628a\u7b2ck\u4f4d\u53d8\u62100\na.flip() //\u5c06\u6240\u6709\u4f4d\u6309\u4f4d\u53d6\u53cd\na.flip(k) //\u5c06\u7b2ck\u4f4d\u6309\u4f4d\u53d6\u53cd\na.count() //\u8fd4\u56debitset\u4e2d1\u7684\u4e2a\u6570\na.all() //\u82e5bitset\u5185\u5168\u662f1\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\n```\n\u6bd4\u5982\u672c\u9898\uff0c\u6b63\u597d\u53ef\u4ee5\u5229\u7528\u6216\u7684\u6027\u8d28\uff1a\u4e24\u4e2a\u6570\u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u8be5\u4f4d\u4e0a\u662f1\uff0c\u7ed3\u679c\u7684\u8fd9\u4f4d\u4e0a\u5c31\u662f1\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\nint X,W;char ch;\ninline int read()\n{\n\tX=0,W=1;ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')W=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){X=(X<<1)+(X<<3)+ch-48;ch=getchar();}\n\treturn X*W;\n}\nstruct tree{\n\tint l;\n\tint r;\n\tint lazy;\n\tbitset<30>p;\n}tr[400001];\nbitset<30>ans;\nint a[100001];\nvoid pushdown(int k)\n{\n\tif(tr[k].lazy==0)return;\n\ttr[k<<1].lazy=tr[k].lazy;\n\ttr[k<<1].p.reset();\n\ttr[k<<1].p.set(tr[k].lazy,1);\n\ttr[k<<1|1].lazy=tr[k].lazy;\n\ttr[k<<1|1].p.reset();\n\ttr[k<<1|1].p.set(tr[k].lazy,1);\n\ttr[k].lazy=0;\n}\nvoid build(int k)\n{\n\ttr[k].p.set(1,1);\n\tif(tr[k].l==tr[k].r)return;\n\tint mid=(tr[k].l+tr[k].r)>>1;\n\ttr[k<<1].l=tr[k].l;\n\ttr[k<<1].r=mid;\n\ttr[k<<1|1].l=mid+1;\n\ttr[k<<1|1].r=tr[k].r;\n\tbuild(k<<1),build(k<<1|1);\n}\nvoid change(int k,int l,int r,int c)\n{\n\tif(tr[k].l==l&&tr[k].r==r){\n\t\ttr[k].lazy=c;\n\t\ttr[k].p.reset();\n\t\ttr[k].p.set(c,1);\n\t\treturn;\n\t}\n\tpushdown(k);\n\tif(l>tr[k<<1].r)change(k<<1|1,l,r,c);\n\telse if(r<tr[k<<1|1].l)change(k<<1,l,r,c);\n\telse change(k<<1,l,tr[k<<1].r,c),change(k<<1|1,tr[k<<1|1].l,r,c);\n\ttr[k].p=(tr[k<<1].p|tr[k<<1|1].p);\n}\nvoid ask(int k,int l,int r)\n{\n\tif(tr[k].l==l&&tr[k].r==r){\n\t\tans|=tr[k].p;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tif(l>tr[k<<1].r)ask(k<<1|1,l,r);\n\telse if(tr[k<<1|1].l>r)ask(k<<1,l,r);\n\telse ask(k<<1,l,tr[k<<1].r),ask(k<<1|1,tr[k<<1|1].l,r);\n}\nint main()\n{\n\tint n=read(),t=read(),m=read();\n\ttr[1].l=1,tr[1].r=n;\n\tbuild(1);\n\tchar op;int u,v,w;\n\twhile(m--){\n\t\tscanf(\" %c\",&op);\n\t\tu=read(),v=read();\n\t\tif(u>v)swap(u,v);\n\t\tswitch(op){\n\t\t\tcase 'C':{\n\t\t\t\tw=read();\n\t\t\t\tchange(1,u,v,w);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'P':{\n\t\t\t\task(1,u,v);\n\t\t\t\tprintf(\"%d\\n\",ans.count());\n\t\t\t\tans.reset();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1548864995,
        "uid": 145240,
        "name": "wasked",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u5206\u5757\u4e5f\u53ef\u4ee5\u6c34\u8fc7\n\n\u5c06\u8272\u677f\u5206\u6210 $\\sqrt(N)$ \u5757\uff0c\u5757\u5185\u7ef4\u62a4\u662f\u5426\u88ab\u6807\u8bb0\u548c\u6d82\u6709\u51e0\u79cd\u989c\u8272\n\n\u6bcf\u6b21\u66f4\u65b0\u548c\u67e5\u8be2\u65f6\u6574\u5757\u76f4\u63a5\u67e5\u8be2\uff0c\u5757\u5185\u66b4\u529b\u67e5\u8be2\uff0c\u590d\u6742\u5ea6 $M\\sqrt(N) \\T$\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <cstring>\n#include <cstdlib>\n#include <string>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\n\nstruct block\n{\n    int l;\n    int r;\n    int v;\n    bool c[40];\n};\n\nconst int MAXN = 1e5 + 100;\nint n, m, T, size;\nint a[MAXN], g[MAXN];\nblock b[500];\n\nvoid update(int p)\n{\n    int l = b[p].l, r = b[p].r;    \n    memset(b[p].c, 0, sizeof b[p].c);\n    if (b[p].v != 0)\n    {\n        for (int i = l; i < r + 1; ++i)\n            a[i] = b[p].v;\n        b[p].v = 0;\n    }\n    for (int i = l; i < r + 1; ++i)\n        b[p].c[a[i]] = true;\n    return;\n}\n\nvoid paint(int l, int r, int x)\n{\n    int beg = g[l], end = g[r];\n    if (beg == end)\n    {\n        update(beg);\n        for (int i = l; i < r + 1; ++i)\n            a[i] = x;\n        update(beg);\n    }\n    else\n    {\n        update(beg);\n        for (int i = l; i < beg * size + 1; ++i)\n            a[i] = x;        \n        update(beg);\n        update(end);\n        for (int i = (end - 1) * size + 1; i < r + 1; ++i)\n            a[i] = x;\n        update(end);\n        for (int i = beg + 1; i < end; ++i)\n            b[i].v = x;\n\n    }\n    return;\n}\n\nint query(int l, int r)\n{\n    int beg = g[l], end = g[r], ret = 0;\n    bool h[40];\n    memset(h, 0, sizeof h);\n    if (beg == end)\n    {\n        update(beg);\n        for (int i = l; i < r + 1; ++i)\n        {\n            if (!h[a[i]])\n                h[a[i]] = true;\n        }\n    }\n    else\n    {\n        update(beg);\n        for (int i = l; i < beg * size + 1; ++i)\n        {\n            if (!h[a[i]])\n                h[a[i]] = true;\n        }\n        update(end);\n        for (int i = (end - 1) * size + 1; i < r + 1; ++i)\n        {\n            if (!h[a[i]])\n                h[a[i]] = true;\n                ++ret;\n        }\n        for (int i = beg + 1; i < end; ++i)\n        {\n            if (b[i].v == 0)\n            {\n                for (int j = 1; j < T + 1; ++j)\n                {\n                    if (b[i].c[j] && !h[j])\n                        h[j] = true;\n                }\n            }\n            else if (!h[b[i].v])\n                h[b[i].v] = true;\n        }\n    }\n    ret = 0;\n    for (int i = 1; i < T + 1; ++i)\n    {\n        if (h[i])\n            ++ret;\n    }\n    return ret;\n}\n\ninline int read()\n{\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n        ch = getchar();\n    int x = 0;\n    while (ch >= '0' && ch <= '9')\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\n\nint main()\n{\n    n = read();\n    T = read();\n    m = read();\n    size = sqrt(n) + 1;\n    for (int i = 1; i < n + 1; ++i)\n    {\n        a[i] = 1;\n        g[i] = (i - 1) / size + 1;\n    }\n    for (int i = 1; i < size + 1; ++i)\n    {\n        b[i].v = 0;\n        b[i].c[1] = true; \n        b[i].l = (i - 1) * size + 1;\n        b[i].r = i * size;\n    }\n    for (int i = 0; i < m; ++i)\n    {\n        char ch = getchar();\n        while (ch != 'C' && ch != 'P')\n            ch = getchar();\n        if (ch == 'C')\n        {\n            int l = read(), r = read(), x = read();\n            if (l > r)\n                swap(l, r);\n            paint(l, r, x);\n        }\n        else if (ch == 'P')\n        {\n            int l = read(), r = read();\n            if (l > r)\n                swap(l, r);\n            printf(\"%d\\n\", query(l, r));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1511875307,
        "uid": 25739,
        "name": "scallop",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "#### \u521a\u521a\u7acb\u4e86\u4e2aflag\uff1a\u4eca\u540e\u9898\u89e3\u7edd\u4e0d\u8bf4\u5e9f\u8bdd  \n### ~~\u771f\u9999~~  \n\u9898\u76ee\u5e94\u8be5\u4e0d\u662f\u5f88\u96be\uff0c\u601d\u8def\u4e5f\u6bd4\u8f83\u88f8\uff0c\u6ce8\u610f\u4e00\u4e0b\u91cc\u9762\u7684\u533a\u95f4\u53ef\u80fd\u662f\u5012\u7740\u7ed9\u7684\n\n\n------------\n## \u6b65\u5165\u6b63\u9898\n- \u9898\u76ee\u7684\u5927\u610f\u5f88\u7b80\u5355\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\uff0c\u7ed9\u5b50\u533a\u95f4\u6d82\u4e00\u79cd\u989c\u8272\uff0c\u6216\u8005\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185\u6709\u591a\u5c11\u79cd\u989c\u8272\n- \u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\u4e14\u8981\u6c42\u590d\u6742\u5ea6\u4e3a(nlogn),\u5f88\u663e\u7136\u662f\u4e00\u9897\u7ebf\u6bb5\u6811\u4e86\n- \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7684data\u548ctag\uff0c\u6211\u4eec\u56fa\u7136\u53ef\u4ee5\u5f00\u4e00\u4e2a**bool[30]\u7684\u6570\u7ec4**,\u4f46\u662f\u8fd9\u6837\u505a\u5408\u5e76\u548c\u67e5\u8be2\u90fd\u5c06\u8981\u4ed8\u51fa\u989d\u5916\u7684\u590d\u6742\u5ea6\uff0c\u53ef\u80fd\u628a\u6b63\u89e3T\u6389\u3002\u663e\u7136\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c**\u72b6\u6001\u538b\u7f29**(\u5728\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u4e3a\u4e00\u8868\u793a\u6709\u7b2ci\u79cd\u989c\u8272)\uff0c\u989c\u8272\u5c0f\u4e8e30\u79cd\u5219\u6211\u4eec\u76f4\u63a5\u5f00\u4e00\u4e2aint\u53d8\u91cf\u5373\u53ef\uff0c\u5408\u5e76\u65f6\u76f4\u63a5\u5c06\u4e24\u4e2a\u53d8\u91cf**\u6309\u4f4d\u6216**\u5373\u53ef\uff08\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684data\u7b49\u4e8e\u5de6\u53f3\u5b50\u8282\u70b9\u7684data**\u6309\u4f4d\u6216**\u7684\u7ed3\u679c\uff09\n\n\n-----------\n## \u4ee3\u7801\u90e8\u5206\n```\n\u6574\u4f53\u6846\u67b6\u5c31\u662f\u7ebf\u6bb5\u6811\u6a21\u677f\uff0c\u4ee5\u53ca\u4f4d\u8fd0\u7b97\u6a21\u677f\uff0c\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u770b\u7a0b\u5e8f\n```\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint data;\n\tint l,r;\n\tint tag;\n}a[100010*4];\nvoid build(int p,int l,int r){\n\ta[p].tag=0;a[p].l=l;a[p].r=r;\n\ta[p].data=1;\n\tif(l==r)\n\t\treturn;\n\tint mid=(l+r)>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n}\nint count(int x){\n\tint sum=0;\n\twhile(x){\n\t\tsum+=x%2;\n\t\tx/=2;\n\t}\n\treturn sum;\n}\nint go(int x){\n\tint sum=1;\n\tx--;\n\twhile(x)\n\t  sum*=2,x--;\n\treturn sum;\n}\nvoid down(int p){\n\ta[p*2].data=a[p].tag;\n\ta[p*2+1].data=a[p].tag;\n\ta[p*2].tag=a[p].tag;\n\ta[p*2+1].tag=a[p].tag;\n\ta[p].tag=0;\n}\nint ask(int p,int l,int r){\n\tif(a[p].l>=l&&a[p].r<=r)\n\t  return a[p].data;\n\tif(a[p].tag)down(p);\n\tint mid=(a[p].l+a[p].r)>>1;\n\tint x=0;\n\tif(mid>=l)x=x|ask(p*2,l,r);\n\tif(mid<r)x=x|ask(p*2+1,l,r);\n\treturn x;\n}\nvoid change(int p,int l,int r,int x){\n\tif(a[p].l>=l&&a[p].r<=r){\n\t\ta[p].data=x;\n\t\ta[p].tag=x;\n\t\treturn;\n\t}\n\tif(a[p].tag)down(p);\n\tint mid=(a[p].l+a[p].r)>>1;\n\tif(mid>=l)change(p*2,l,r,x);\n\tif(mid<r)change(p*2+1,l,r,x);\n\ta[p].data=a[p*2].data|a[p*2+1].data;\n}\nint main()\n{\n\tint l,t,m;\n\tscanf(\"%d%d%d\",&l,&t,&m);\n\tbuild(1,1,l);\n\tfor(int i=1;i<=m;i++){\n\t\tchar k[10];\n\t\tint x,y,z;\n\t\tscanf(\"%s\",k);\n\t\tif(k[0]=='C'){\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tif(x>y)swap(x,y);\n\t\t\tchange(1,x,y,go(z));\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(x>y)swap(x,y);\n\t\t\tprintf(\"%d\\n\",count(ask(1,x,y)));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543639190,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u989c\u8272\u6bd4\u8f83\u5c11\uff0c\u538b\u4f4d\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679cT\u518d\u5927\u4e00\u4e9b\uff0c\u538b\u4f4d\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u4e00\u79cd\u53eb\u505a**bitset**\u7684\u4e1c\u897f\n\nbitset\u505a\u8fd9\u79cd\u9898\u76f8\u5f53\u65b9\u4fbf\uff0c\u4e24\u4e2abitset\u53ef\u4ee5\u76f4\u63a5**\u6216**\u8d77\u6765\uff0c\u7edf\u8ba11\u7684\u4e2a\u6570\u65f6\u4f7f\u7528\u5185\u90e8\u51fd\u6570**.count()**\uff0c\u8f93\u51fa\u5f88\u65b9\u4fbf\n\n\u4e0a\u4ee3\u7801\u2193\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<string>\n#include<bitset>\n#include<algorithm>\nusing namespace std;\n\nbitset<31> bist[1<<19];\nint chg[1<<19];\nint n,t,o,l,r,c1,c;\nchar ch;\n\nvoid po(int k,int l,int r){\n\tif(chg[k]==0) return;\n\tif(l==r){\n\t\tchg[k]=0;\n\t\treturn;\n\t}\n\tint i=k<<1;\n\tchg[i]=chg[i|1]=chg[k];\n\tbist[i].reset();\n\tbist[i|1].reset();\n\tbist[i|1][chg[k]]=bist[i][chg[k]]=1;\n\tchg[k]=0;\n}\n\nvoid cchg(int c,int k,int l,int r,int le,int ri){\n\tpo(k,l,r);\n\tif(le<=l&&r<=ri){\n\t\tbist[k].reset();\n\t\tbist[k][c]=1;\n\t\tchg[k]=c;\n\t\treturn;\n\t}\n\tint i=k<<1,mid=(l+r)>>1;\n\tif(le<=mid) cchg(c,i,l,mid,le,ri);\n\tif(mid<ri) cchg(c,i|1,mid+1,r,le,ri);\n\tbist[k]=bist[i]|bist[i|1];\n}\nbitset<31> ask(int k,int l,int r,int le,int ri){\n\tpo(k,l,r);\n\tif(le<=l&&r<=ri) return bist[k];\n\tint i=k<<1,mid=(l+r)>>1;\n\tbitset<31> sum; \n\tif(le<=mid) sum=ask(i,l,mid,le,ri);\n\tif(mid<ri) sum|=ask(i|1,mid+1,r,le,ri);\n\treturn sum;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&t,&o);\n\tfor(int i=1;i<=n<<2;++i) bist[i][1]=1;\n\twhile(o--){\n\t\tscanf(\"\\n%c%d%d\",&ch,&l,&r);\n\t\tif(l>r) swap(l,r);\n\t\tif(ch=='C'){\n\t\t\tscanf(\"%d\",&c);\n\t\t\tcchg(c,1,1,n,l,r);\n\t\t}else{\n\t\t\tprintf(\"%d\\n\",ask(1,1,n,l,r).count());\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1520900260,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1558)\n\n---\n\n\u5206\u5757\u771f\u662f\u4e07\u80fd\u2026\u2026\n\n\u8fd9\u9053\u9898\u5404\u4f4d\u5de8\u4f6c\u7528\u4e86\u5404\u79cd\u65b9\u5f0f\uff0c\u6211\u5c31\u5728\u8fd9\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u7684\u5206\u5757\u65b9\u6cd5\u3002\n\n\u5206\u5757\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u7684\u989c\u8272\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u7a33\u5b9a\uff0c\u5c31\u7b97\u989c\u8272\u589e\u52a0\uff0c\n\n\u4f1a\u53d8\u7684\u53ea\u6709$\\texttt{memset(vis,0,sizeof vis)}$\u3002\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd8\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u3002\n\n---\n\n$\\texttt{vis}$\u662f\u770b\u989c\u8272\u51fa\u73b0\u8fc7\u4e86\u5417\uff0c$\\texttt{sum}$\u5176\u5b9e\u662f$\\texttt{tag}$\uff0c\u5176\u4ed6\u7684\u6bd4\u8f83\u660e\u663e\u3002\n\n---\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntemplate<typename T>void read(T &x) {\n\tT f = 1;x = 0;char s = getchar();\n\twhile(s < '0' || s > '9') {if(s == '-')f = -1;s = getchar();}\n\twhile(s >= '0' && s <= '9') {x = x * 10 + s - '0';s = getchar();}\n\tx *= f;\n}\ntemplate<typename T>void print(T x) {\n\tif(x < 0) putchar('-'),x = -x;\n\tif(x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int maxn = 100005;\n\nint n,t,m;\nint pos[maxn],res[maxn * 10],L[maxn],R[maxn];\nint vis[40],sum[maxn],a[maxn];\n\nvoid update(int l,int r,int z) {\n\tint p = pos[l],q = pos[r];\n\tif (sum[p]) for (int i = L[p] ; i <= R[p] ; ++ i) a[i] = sum[p];\n\tsum[p] = 0;\n\tif (sum[q]) for (int i = L[q] ; i <= R[q] ; ++ i) a[i] = sum[q];\n\tsum[q] = 0;\n\tif (p == q) for (int i = l ; i <= r ; ++ i) a[i] = z;\n\telse {\n\t\tfor (int i = l ; i <= R[p] ; ++ i) a[i] = z;\n\t\tfor (int i = L[q] ; i <= r ; ++ i) a[i] = z;\n\t\tfor (int i = p + 1 ; i <= q - 1 ; ++ i) sum[i] = z;\n\t}\n}\n\nint solve(int x) {\n\tint res = 0;\n\tfor (int i = L[x] ; i <= R[x] ; ++ i) res += vis[a[i]] ++ == 0;\n\treturn res;\n}\n\nint query(int l,int r) {\n\tint p = pos[l],q = pos[r],res = 0;\n\tif (sum[p]) for (int i = L[p] ; i <= R[p] ; ++ i) a[i] = sum[p];\n\tsum[p] = 0;\n\tif (sum[q]) for (int i = L[q] ; i <= R[q] ; ++ i) a[i] = sum[q];\n\tsum[q] = 0;\n\tif (p == q) for (int i = l ; i <= r ; ++ i) res += vis[a[i]] ++ == 0;\n\telse {\n\t\tfor (int i = l ; i <= R[p] ; ++ i) res += vis[a[i]] ++ == 0;\n\t\tfor (int i = L[q] ; i <= r ; ++ i) res += vis[a[i]] ++ == 0;\n\t\tfor (int i = p + 1 ; i <= q - 1 ; ++ i) if (!sum[i]) res += solve(i);else res += vis[sum[i]] ++ == 0;\n\t}\n\treturn res;\n}\n\nint main() {\n\tread(n);read(t);read(m);\n\tint t = sqrt(n);\n\tfor (int i = 1 ; i <= t ; ++ i) {\n\t\tL[i] = R[i - 1] + 1;\n\t\tR[i] = i * t;\n\t}\n\tif (R[t] != n) ++ t,L[t] = R[t - 1] + 1,R[t] = n;\n\tfor (int i = 1 ; i <= t ; ++ i) for (int j = L[i] ; j <= R[i] ; ++ j) pos[j] = i;\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\ta[i] = 1;\n\t\tsum[pos[i]] = 1;\n\t}\n\tchar s[4];\n\tint x,y,z;\n\tfor (int i = 1 ; i <= m ; ++ i) {\n\t\tscanf(\"%s\",s);\n\t\tread(x);read(y);\n\t\tif (x > y) swap(x,y);\n\t\tif (*s == 'C') {\n\t\t\tread(z);\n\t\t\tupdate(x,y,z);\n\t\t}\n\t\telse {\n\t\t\tmemset(vis,0,sizeof vis);\n\t\t\tprintf(\"%d\\n\",query(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596118055,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u9996\u5148\u732e\u7ed9\u67d0\u4e9b\u8ff7\u4e4b0\u5206\u7684\u7ae5\u978b\u9898\u76ee\u8bf4\u660e\uff1a**\uff08\u53ef\u80fdA> B\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u5047\u5982\u51fa\u73b0A>B\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u628aAB\u53cd\u8fc7\u6765\u8be2\u95ee\u6216\u4fee\u6539\uff01**\n\n\n##\u597d\uff0c\u8fd9\u9053\u9898\u662f\u4e00\u9053\u660e\u663e\u7684**\u7ebf\u6bb5\u6811**\u3002\n\n\n- \u56e0\u4e3aT\u5f88\u5c0f\u53ea\u670930\uff0c\u5b8c\u5168\u53ef\u4ee5**\u72b6\u6001\u538b\u7f29\u5904\u7406\u989c\u8272**\u3002\n\n- **\u533a\u95f4\u52a0\u6cd5**\u7684\u65f6\u5019\u7528**\u6309\u4f4d\u6216\u8fd0\u7b97**\u3002\n\n- **\u8f93\u51fa\u7684\u65f6\u5019\u5faa\u73afcolor\u6709\u591a\u5c11\u4e2a1\u5c31\u597d\u4e86**\uff0c\u6211\u662f\u7528lowbit\u5904\u7406\u7684\uff0c\uff08\u53ef\u80fd\u6bd4\u76f4\u63a5for\u4e00\u904d\u5feb\u4e00\u70b9\uff1f\u4e0d\u8fc7\u8fd9\u4e0d\u91cd\u8981\n\n###\u4ee5\u4e0a\u662f\u4e3b\u4f53\u601d\u8def\uff0c\u4ee5\u4e0b\u662f\u6211\u5904\u7406\u7684\u51e0\u4e2a\u4f18\u5316\u3002\n\n- \u8fd9\u9053\u9898\u7684**lazy-tag\u4e0d\u9700\u8981\u5b58\u989c\u8272**\uff0c\u56e0\u4e3a\u5047\u5982\u6709\u9700\u8981\u7528\u5230lazy-tag\u7684change/modify\u7684\u8bdd\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e00\u7247\u5168\u90e8\u641e\u6210\u67d0\u4e2a\u989c\u8272\u7684\uff0c\u6240\u4ee5\u5728\u6709tag\u800c\u4e14update\uff08\u4e0b\u4f20tag\uff09\u4e4b\u524d\uff0ccurrent\u533a\u95f4\u91cc\u9762\u7684\u989c\u8272\u4e00\u5b9a\u662f\u7eaf\u8272\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4update\u7684\u65f6\u5019\u4e0d\u9700\u8981tag\u7684\u4fe1\u606f\uff0c\u76f4\u63a5\u628achild\u5168\u90e8\u641e\u6210\u4e0ecurrent\u4e00\u6837\u7684\u989c\u8272\u5c31\u597d\u4e86\uff0c\u6240\u4ee5**tag\u7684\u552f\u4e00\u5b58\u5728\u76ee\u7684\u5c31\u662f\u4e00\u4e2abool\u53d8\u91cf\u800c\u5df2**\uff08\u6709\u65e0tag\uff09\u3002\n\n- \u8fd8\u6709\u5c31\u662f\u5728\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u50cf\u5e73\u65f6\u4e00\u6837\uff0c\u4e0b\u4f20tag\u4e4b\u540e\u7ee7\u7eed\u9012\u5f52\u8be2\u95ee\u533a\u95f4\u3002\u56e0\u4e3a\u5f53\u4f60tag\u4e0d\u7b49\u4e8efalse\u65f6\uff08\u5c31\u662f\u8bf4\u9700\u8981\u4e0b\u4f20tag\uff09\uff0c\u76ee\u524d\u533a\u95f4\u7684\u5b69\u5b50\u91cc\u9762\u7684\u989c\u8272\u548c\u76ee\u524d\u533a\u95f4\u7684\u989c\u8272\u4e00\u5b9a\u662f\u4e00\u6837\u7684\u800c\u4e14\u662f\u7eaf\u8272\uff08\u56e0\u4e3a\u5047\u5982\u51fa\u73b0\u6709\u4e0d\u662f\u7eaf\u8272\uff0c\u90a3\u4e48\u4f60\u80af\u5b9a\u5728\u6b64\u533a\u95f4\u5b69\u5b50\u4e2d\u6267\u884c\u8fc7change/modify\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u4e00\u5b9aupdate\u8fc7\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5b9e\u4f60**\u5728\u8be2\u95ee\u7684\u65f6\u5019\u6839\u672c\u5c31\u4e0d\u9700\u8981update\uff0c\u89c1\u5230tag=true\u76f4\u63a5return \u76ee\u524d\u989c\u8272\u5c31\u597d\u4e86**\u3002\n\n- \u6700\u540e\u5c31\u662f\u4e00\u4e2a\u5927\u5bb6\u90fd\u5e38\u5ffd\u89c6\u7684\u4e00\u4e2a\u70b9\uff0c\u5c31\u662f\u5728\u7528\u5806\u50a8\u5b58\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u5927\u5bb6\u4e60\u60ef\u5f004\u500d\u7a7a\u95f4\uff0c\u5b9e\u9645\u4e0a\u662f\u5bf9\u7a7a\u95f4\u7684\u6781\u5927\u6d6a\u8d39\uff08\u800c\u4e14\u6709\u7684\u4eba\u8fd8\u57284\u500d\u7a7a\u95f4\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e865-10\u4e2a\u4ee5\u9632\u4e07\u4e00\u3002\u3002\u5176\u5b9e\u672c\u8eab\u5c31\u5b8c\u5168\u4e0d\u53ef\u80fd\u8fbe\u52304\u500d\u7a7a\u95f4\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u662f\u6bd44\u500d\u7a7a\u95f4\u5c0f4\u768423333\uff09\u800c\u6211\u4f5c\u4e3a\u4e00\u4e2a\u5f3a\u8feb\u75c7\u60a3\u8005\uff0c\u5e73\u65f6\u603b\u662f\u559c\u6b22\u5361\u6570\u636e\u8303\u56f4\uff08\u4f60\u7ed9\u6211\u6700\u5927\u591a\u5c11\u6211\u5c31\u53ea\u5f00\u591a\u5c11\uff09\u7684\u8bbe\u6570\u7ec4\uff08\u574f\u4e60\u60ef\u5927\u5bb6\u522b\u6a21\u4eff\uff09\uff0c\u81ea\u7136\u4e5f\u4f1a\u5148\u7b97\u51fa\u6765\u6700\u5927\u7684\u7a7a\u95f4\u662f\u591a\u5c11\u4e86\uff0c**\u672c\u9898\u6570\u7ec4\u6700\u5927\u4e2a\u6570\u53ea\u7528\u5f00\u5230262145**\u3002\u4e0d\u591a\u4e0d\u5c11\u3002\n\n###\u4e0b\u9762\u662f\u4ee3\u7801\u65f6\u95f4\uff0c\u6b63\u597d\u6ca1\u6709pascal\u7684\u9898\u89e3\uff08\u867d\u7136\u8fc7\u51e0\u5e74pascal\u8fdeNOIP\u90fd\u4e0a\u4e0d\u4e86\u4e86\uff09\uff0c\u6211\u5c31\u8fc7\u6765\u653e\u4e2a= =\u3002\n\n[P.S.]\u6211\u7684\u7ebf\u6bb5\u6811\u662f\u7ee7\u627f\u4e86\u6211\u770b\u7684\u6570\u636e\u7ed3\u6784\u4e66\u91cc\u9762\u7684\u5199\u6cd5\uff0c\u6240\u4ee5\u5b58\u7684\u533a\u95f4\u662f[l,r)\u8fd9\u6837\u7684\uff08\u8fd9\u5c31\u662f\u4e3a\u5565\u5efa\u7684\u65f6\u5019\u6211\u5efa\u7684\u662f(1,n+1)\uff09\uff0c\u800c\u4e14\u5728change\u548cquery\u7684\u65f6\u5019\u4e5f\u6709\u70b9\u4e0d\u5927\u4e00\u6837\uff0c\u5e0c\u671b\u4e0d\u8981\u4ecb\u610f\u3002\n\n```cpp\nprogram P1558;\nconst maxt=262145;\ntype\n    node=record\n    left:longint;\n    right:longint;\n    color:longint;\n    delta:boolean;\n    end;\n\nvar n,tot,m,i,le,ri,col:longint;\n    c:char;\n    a:array[1..maxt]of node;\n\nfunction lowbit(x:longint):longint;\nbegin\n    exit(x and (-x));\nend;\n\nfunction count(x:longint):longint;\nbegin\n    count:=0;\n    while x<>0 do\n    begin\n        inc(count);\n        dec(x,lowbit(x));\n    end;\nend;\n\nprocedure update(cur:longint);\nvar left,right:longint;\nbegin\n    left:=cur shl 1;\n    right:=left+1;\n    a[left].color:=a[cur].color;\n    a[right].color:=a[cur].color;\n    a[left].delta:=true;\n    a[right].delta:=true;\n    a[cur].delta:=false;\nend;\n\nprocedure change(cur,l,r,delta:longint);\nvar left,right,mid:longint;\nbegin\n    if (l<=a[cur].left)and(a[cur].right<=r) then\n    begin\n        a[cur].color:=1 shl (delta-1);\n        a[cur].delta:=true;\n    end\n    else\n    begin\n        left:=cur shl 1;\n        right:=left+1;\n        mid:=(a[cur].left+a[cur].right)shr 1;\n        if a[cur].delta then\n        update(cur);\n        if l<mid then\n        change(left,l,r,delta);\n        if r>mid then\n        change(right,l,r,delta);\n        a[cur].color:=a[left].color or a[right].color;\n    end;\nend;\n\nfunction query(cur,l,r:longint):longint;\nvar left,right,mid:longint;\nbegin\n    if ((l<=a[cur].left)and(a[cur].right<=r))or(a[cur].delta) then\n    exit(a[cur].color)\n    else\n    begin\n        left:=cur shl 1;\n        right:=left+1;\n        mid:=(a[cur].left+a[cur].right)shr 1;\n        query:=0;\n        if l<mid then\n        query:=query or query(left,l,r);\n        if r>mid then\n        query:=query or query(right,l,r);\n    end;\nend;\n\nprocedure built(cur,l,r:longint);\nvar left,right,mid:longint;\nbegin\n    a[cur].left:=l;\n    a[cur].right:=r;\n    a[cur].color:=1;\n    a[cur].delta:=false;\n    if l+1<r then\n    begin\n        left:=cur shl 1;\n        right:=left+1;\n        mid:=(l+r)shr 1;\n        built(left,l,mid);\n        built(right,mid,r);\n    end;\nend;\n\nbegin\n    readln(n,tot,m);\n    built(1,1,n+1);\n    for i:=1 to m do\n    begin\n        read(c);\n        if c='C' then\n        begin\n            readln(le,ri,col);\n            if le<=ri then\n            change(1,le,ri+1,col)\n            else\n            change(1,ri,le+1,col);\n        end\n        else\n        begin\n            readln(le,ri);\n            if le>ri then\n            writeln(count(query(1,ri,le+1)))\n            else\n            writeln(count(query(1,le,ri+1)));\n        end;\n    end;\nend.\n```",
        "postTime": 1510770027,
        "uid": 2009,
        "name": "wmxwmx",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u7531\u4e8e\u989c\u8272\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5\u5bf9\u989c\u8272\u7684\u5904\u7406\u53ef\u4ee5\u538b\u4f4d\u6765\u641e\u3002\n\n\u7136\u540e\u5c31\u662f\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u5566~\n\n```cpp\n\n#include <cstdio>  \n#include <algorithm>  \n  \nusing namespace std;  \n  \nvoid Get_Val(int &Ret)  \n{  \n    Ret = 0;  \n    char ch;  \n    while ((ch = getchar()), (ch > '9' || ch < '0'))  \n        ;  \n    do  \n    {  \n        (Ret *= 10) += ch - '0';  \n    }  \n    while ((ch = getchar()), (ch >= '0' && ch <= '9'));  \n}  \n  \nconst int Max_L(100050);  \n  \nstruct node  \n{  \n    int l, r;  \n    unsigned int Colour;  \n    unsigned int Tag;  \n};  \n  \nstruct Segment_Tree  \n{  \n    node segt[Max_L << 2];  \n    void build_tree(const int&, const int&, const int&);  \n    void pushdown(const int&);  \n    void pushup(const int&);  \n    void Set(const int&, const int&, const int&, const unsigned int&);  \n    unsigned int Ask(const int&, const int&, const int&);  \n};  \nSegment_Tree Wood;  \n  \nint L, T;  \nint O;  \n  \nvoid Segment_Tree::build_tree(const int &cur, const int &l, const int &r)  \n{  \n    segt[cur].l = l, segt[cur].r = r, segt[cur].Tag = 0;  \n    segt[cur].Colour = (1 << 1);  \n    int mid = l + ((r - l) >> 1);  \n    if (l != r)  \n    {  \n        build_tree(cur << 1, l, mid);  \n        build_tree((cur << 1) | 1, mid + 1, r);  \n    }  \n}  \n  \ninline  \nvoid Segment_Tree::pushdown(const int &cur)  \n{  \n    if (segt[cur].Tag == 0)  \n        return;  \n    segt[cur << 1].Tag = segt[(cur << 1) | 1].Tag = segt[cur].Tag;  \n    segt[cur << 1].Colour = segt[(cur << 1) | 1].Colour = (1 << segt[cur].Tag);  \n    segt[cur].Tag = 0;  \n}  \n  \ninline  \nvoid Segment_Tree::pushup(const int &cur)  \n{  \n    segt[cur].Colour = (segt[cur << 1].Colour | segt[(cur << 1) | 1].Colour);  \n}  \n  \nvoid Segment_Tree::Set(const int &cur, const int &l, const int &r, const unsigned int &c)  \n{  \n    if (l <= segt[cur].l && r >= segt[cur].r)  \n    {  \n        segt[cur].Colour = (1 << c);  \n        segt[cur].Tag = c;  \n        return;  \n    }  \n    int mid = segt[cur].l + ((segt[cur].r - segt[cur].l) >> 1);  \n    pushdown(cur);  \n    if (r <= mid)  \n        Set(cur << 1, l, r, c);  \n    else  \n        if (l > mid)  \n            Set((cur << 1) | 1, l, r, c);  \n        else  \n        {  \n            Set(cur << 1, l, mid, c);  \n            Set((cur << 1) | 1, mid + 1, r, c);  \n        }  \n    pushup(cur);  \n}  \n  \nunsigned int Segment_Tree::Ask(const int &cur, const int &l, const int &r)  \n{  \n    if (l <= segt[cur].l && r >= segt[cur].r)  \n        return segt[cur].Colour;  \n    int mid = segt[cur].l + ((segt[cur].r - segt[cur].l) >> 1);  \n    pushdown(cur);  \n    if (r <= mid)  \n        return Ask(cur << 1, l, r);  \n    else  \n        if (l > mid)  \n            return Ask((cur << 1) | 1, l, r);  \n        else  \n            return Ask(cur << 1, l, mid) | Ask((cur << 1) | 1, mid + 1, r);  \n}  \n  \nchar op[3];  \nint A, B, C;  \nunsigned int Ans, Cnt;  \n  \nint main()  \n{  \n    Get_Val(L), Get_Val(T), Get_Val(O);  \n    Wood.build_tree(1, 1, L);  \n    while (O--)  \n    {  \n        scanf(\"%s\", op);  \n        if (op[0] == 'C')  \n        {  \n            Get_Val(A), Get_Val(B), Get_Val(C);  \n            if (A > B)  \n                swap(A, B);  \n            Wood.Set(1, A, B, C);  \n        }  \n        else  \n        {  \n            Get_Val(A), Get_Val(B);  \n            if (A > B)  \n                swap(A, B);  \n            Ans = Wood.Ask(1, A, B);  \n            Cnt = 0;  \n            while (Ans)  \n            {  \n                if (Ans & 1)  \n                    ++Cnt;  \n                Ans >>= 1;  \n            }  \n            printf(\"%u\\n\", Cnt);  \n        }  \n    }  \n    return 0;   \n} \n\n```",
        "postTime": 1453445141,
        "uid": 3182,
        "name": "Created_equal1",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u53d1\u73b0 $1\\leq t\\leq 30$\uff0c$t$ \u7684\u503c\u975e\u5e38\u5c0f\u3002\n\n\u8003\u8651\u5efa $t$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u9897\u7ebf\u6bb5\u6811\u7ef4\u62a4\u662f\u5426\u6709\u8fd9\u79cd\u989c\u8272\uff0c\u9700\u8981\u533a\u95f4\u5168\u90e8\u6e05\u96f6\u548c\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u3002\n\n\u6211\u4f7f\u7528\u7684\u662f\u5c01\u88c5\u6570\u636e\u7ed3\u6784\uff0c\u6ce8\u91ca\u5199\u7684\u5f88\u6e05\u695a\u4e86\n\n```cpp\n#include <bits/stdc++.h>\n#define ls num<<1\n#define rs num<<1|1\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T>inline void read(T &FF){\n\tT RR=1;FF=0;char CH=getchar();\n\tfor(;!isdigit(CH);CH=getchar())if(CH=='-')RR=-1;\n\tfor(;isdigit(CH);CH=getchar())FF=(FF<<1)+(FF<<3)+(CH^48);\n\tFF*=RR;\n}\nconst int MAXN=1e5+10;\nint a[MAXN];\nstruct Line_Tree{\n\tstruct Tree{\n\t\tint l,r,lazy;//lazy:1\u4e3a\u533a\u95f4\u8d4b\u503c\uff0c2\u4e3a\u533a\u95f4\u6e05\u96f6\n\t\tbool f;\n\t}t[MAXN<<2];\n\tvoid pushup(int num){\n\t\tt[num].f=(t[ls].f||t[rs].f);//\u53ea\u8981\u6709\u4e00\u4e2a\u90e8\u5206\u6709\u8fd9\u79cd\u989c\u8272\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u6709\u8fd9\u79cd\u989c\u8272\u3002\n\t}\n\tvoid pushdown(int num){\n\t\tif(t[num].lazy){\n\t\t\tt[ls].lazy=t[rs].lazy=t[num].lazy;//lazy\u7684\u4f20\u9012\uff0c\u7531\u4e8e\u662f\u533a\u95f4\u8986\u76d6\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\n\t\t\tt[ls].f=t[rs].f=(t[num].lazy==1);//1\u4e3a\u533a\u95f4\u8d4b\u503c\uff0c2\u4e3a\u533a\u95f4\u6e05\u96f6\n\t\t\tt[num].lazy=0;\n\t\t}\n\t}\n\tvoid build(int num,int l,int r,int x){\n\t\tt[num].l=l;t[num].r=r;t[num].lazy=false;\n\t\tif(l==r){\n\t\t\tt[num].f=(a[l]==x);//\u663e\u7136QAQ\n\t\t\treturn;//\u76f4\u63a5return\n\t\t}int mid=(l+r)>>1;\n\t\tbuild(ls,l,mid,x);\n\t\tbuild(rs,mid+1,r,x);\n\t\tpushup(num);//\u6ce8\u610fpushup\n\t}\n\tvoid change1(int num,int l,int r){\n\t\tif(t[num].l>=l&&t[num].r<=r){\n\t\t\tt[num].lazy=1;//\u6253\u6807\u8bb0\n\t\t\tt[num].f=true;//\u76f4\u63a5\u64cd\u4f5c\n\t\t\treturn;//\u76f4\u63a5return\n\t\t}pushdown(num);//\u6ce8\u610f\u6807\u8bb0\u4e0b\u4f20\n\t\tif(t[ls].r>=l)change1(ls,l,r);\n\t\tif(t[rs].l<=r)change1(rs,l,r);\n\t\tpushup(num);//\u6ce8\u610fpushup\n\t}\n\tvoid change2(int num,int l,int r){\n\t\tif(t[num].l>=l&&t[num].r<=r){\n\t\t\tt[num].lazy=2;//\u6253\u6807\u8bb0\n\t\t\tt[num].f=false;//\u76f4\u63a5\u64cd\u4f5c\n\t\t\treturn;//\u76f4\u63a5return\n\t\t}pushdown(num);//\u6ce8\u610f\u6807\u8bb0\u4e0b\u4f20\n\t\tif(t[ls].r>=l)change2(ls,l,r);\n\t\tif(t[rs].l<=r)change2(rs,l,r);\n\t\tpushup(num);//\u6ce8\u610fpushup\n\t}\n\tbool query(int num,int l,int r){\n\t\tif(t[num].l>=l&&t[num].r<=r)return t[num].f;//\u76f4\u63a5\u770b\n\t\tpushdown(num);//\u6ce8\u610f\u6807\u8bb0\u4e0b\u4f20\n\t\tif(t[ls].r<l)return query(rs,l,r);\n\t\tif(t[rs].l>r)return query(ls,l,r);\n\t\treturn (query(ls,l,r)||query(rs,l,r));//\u53ea\u8981\u6709\u4e00\u4e2a\u662f\u5c31\u662f\u4e86\n\t}\n}T[32];//\u7ebf\u6bb5\u6811\nint main(){\n\tint n,t,E;read(n);read(t);read(E);\n\tfor(int i=1;i<=n;i++)a[i]=1;//\u521d\u59cb\u5316\n\tfor(int i=1;i<=t;i++)T[i].build(1,1,n,i);//\u521d\u59cb\u5316\n\twhile(E--){\n\t\tchar f=getchar();int a,b,c;\n\t\tfor(;f!='C'&&f!='P';)f=getchar();\n\t\tread(a);read(b);if(a>b)swap(a,b);\n\t\tif(f=='C'){\n\t\t\tread(c);\n\t\t\tfor(int i=1;i<=t;i++)//\u679a\u4e3e\u989c\u8272\n\t\t\t\tif(i==c)T[i].change1(1,a,b);//\u533a\u95f4\u8d4b\u503c\n\t\t\t\telse T[i].change2(1,a,b);//\u533a\u95f4\u6e05\u96f6\n\t\t}else{\n\t\t\tint s=0;//\u8ba1\u6570\u5668\n\t\t\tfor(int i=1;i<=t;i++)//\u679a\u4e3e\u989c\u8272\n\t\t\t\tif(T[i].query(1,a,b))s++;//\u5982\u679c\u6709\u8fd9\u79cd\u989c\u8272\n\t\t\tprintf(\"%d\\n\",s);//\u8f93\u51fa\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1592128947,
        "uid": 180242,
        "name": "orzdevinwang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u8ba9\u6211\u4eec\u770b\u770b\u6570\u636e\u8303\u56f4\uff1a100000\u548c30\n100000\u610f\u5473\u7740\u6211\u4eec\u8981\u7528O(nlogn^k)\u7684\u6548\u7387\n\u90a3\u4e48\u6211\u4eec\u5c31\u7528\u6700\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\n```cpp\n\u6ed1\u7a3d\n```\n\u90a3\u4e48\u600e\u4e48\u6c42\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u4e2a\u6570\u5462\uff1f\n```\n\u6ed1\u7a3d\n```\n\u6211\u4eec\u53ef\u4ee5\u7528\u72b6\u6001\u8f6c\u79fb\n\u7528c[i]\u5b58\u533a\u95f4[l,r]\u7684\u72b6\u6001\n\u5047\u8bbec[i]\u7b49\u4e8e13\n```\nc[i]=13\n\u5b83\u7684\u4e8c\u8fdb\u5236\u5c31\u662f1101\n\u5012\u6570\u7b2c\u4e00\u4f4d1\u4ee3\u8868\u542b\u6709\u7b2c\u4e00\u79cd\u989c\u8272\n\u5012\u6570\u7b2c\u4e8c\u4f4d0\u4ee3\u8868\u4e0d\u542b\u6709\u7b2c\u4e8c\u79cd\u989c\u8272\n\u5012\u6570\u7b2c\u4e09\u4f4d1\u4ee3\u8868\u542b\u6709\u7b2c\u4e09\u79cd\u989c\u8272\n\u5012\u6570\u7b2c\u56db\u4f4d1\u4ee3\u8868\u542b\u6709\u7b2c\u56db\u79cd\u989c\u8272\n```\n\u4e3a\u4ec0\u4e48\u7528\u72b6\u6001\u8f6c\u79fb\u5462\uff1f\n\u56e0\u4e3a\u7231\u60c5\uff08\n```\n\u5047\u8bbec[i<<1]=5=(0101)\nc[(i<<1)+1]=9=(1001)\n\u90a3\u4e48c[i]=c[i<<1]|c[(i<<1)+1]=0101|1001=1101=13\n\u6309\u4f4d\u4e0e\u5b8c\u7f8e\u5730\u89e3\u51b3\u4e86\u72b6\u6001\u8f6c\u79fb\u7684\u5408\u5e76\u95ee\u9898\n```\n\u6709\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u95ee\uff1a\u72b6\u6001\u8f6c\u79fb\u600e\u4e48\u7b97\u4e2a\u6570\u5185\uff1f\n\u4ee3\u7801\u5982\u4e0b\n```\nvoid deal(int x){\n\tint i=0;\n\twhile(x){\n\t\ti++;\n\t\tx=x&(x-1);\n\t}\n\tcout<<i<<endl;\n\treturn;\n}\n\n\n\n\u4f8b\u5982\uff1a1111\n1111|1110=1110\n1110|1101=1100\n1100|1011=1000\n1000|0111=0000\n\u5b8c\u7f8e\n```\n\u63a5\u4e0b\u6765\u8be5\u5904\u7406\u7ebf\u6bb5\u6811\u60f9\n```\nvoid up(int e,int f,int k,int l,int r,int x){\n\tif(e<=l&&r<=f){\n\t\tlazy[x]=k;\n\t\tc[x]=1<<(k-1);\n\t\treturn;\n\t} \n\tif(l>f||r<e){\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1; \n\tif(lazy[x]){\n\t\tlazy[x<<1]=lazy[x];\n\t\tlazy[(x<<1)+1]=lazy[x];\n\t\tc[x<<1]=1<<(lazy[x]-1);\n\t\tc[(x<<1)+1]=1<<(lazy[x]-1);\n\t\tlazy[x]=0;\n\t}\n\tup(e,f,k,l,mid,x<<1);\n\tup(e,f,k,mid+1,r,(x<<1)+1);\n\tc[x]=c[x<<1]|c[(x<<1)+1];\n\t//cout<<l<<\" \"<<r<<\" \"<<c[x]<<\" \"<<lazy[x]<<endl; \n\treturn;\n}\n\u8fd9\u4e2a\u662f\u6539\u8272\nc[x]=1<<(k-1);\u8bb2\u7684\u662f\u533a\u95f4\u5185\u5168\u90e8\u6539\u8272\n\u81ea\u5df1\u7406\u89e3\n```\n```\n\nint que(int e,int f,int l,int r,int x){\n\tif(e<=l&&r<=f){\n\t\treturn c[x];\n\t}\n\tif(l>f||r<e){\n\t\treturn 0;\n\t}\n\tif(lazy[x]!=0){\n\t\tlazy[x<<1]=lazy[x];\n\t\tlazy[(x<<1)+1]=lazy[x];\n\t\tc[x<<1]=1<<(lazy[x]-1);\n\t\tc[(x<<1)+1]=1<<(lazy[x]-1);\n\t}\n\tint mid=(l+r)>>1,ans=que(e,f,l,mid,x<<1)|que(e,f,mid+1,r,(x<<1)+1);\n\tc[x]=c[x<<1]|c[(x<<1)+1];\n\tlazy[x]=0;\n\t//cout<<l<<\" \"<<r<<\" \"<<c[x]<<\" \"<<c[x<<1]<<\" \"<<c[(x<<1)+1]<<\" \"<<lazy[x]<<endl; \n\treturn ans;\n}\n```\n\u987a\u5e26\u8bf4\u4e00\u4e0b\uff1a\u8be2\u95ee\u533a\u95f4\u53ef\u80fdl>r\n\u81ea\u5df1\u8981\u4ea4\u6362\uff08\u6211\u88ab\u5361\u4e86\u4e00\u6b21\u5624\u5624\u5624\uff09\n\u4e0a\u4ee3\u7801\n```cpp\n#include<iostream>\nusing namespace std;\nint c[1000000],n,m,t,i,lazy[1000000],o,p,q;\nchar cc;\nvoid build(int l,int r,int x){\n\tc[x]=1;\n\tlazy[x]=0;\n\tif(l!=r){\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,x<<1);\n\t\tbuild(mid+1,r,(x<<1)+1);\n\t}\n\treturn;\n}\nvoid up(int e,int f,int k,int l,int r,int x){\n\tif(e<=l&&r<=f){\n\t\tlazy[x]=k;\n\t\tc[x]=1<<(k-1);\n\t\treturn;\n\t} \n\tif(l>f||r<e){\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1; \n\tif(lazy[x]){\n\t\tlazy[x<<1]=lazy[x];\n\t\tlazy[(x<<1)+1]=lazy[x];\n\t\tc[x<<1]=1<<(lazy[x]-1);\n\t\tc[(x<<1)+1]=1<<(lazy[x]-1);\n\t\tlazy[x]=0;\n\t}\n\tup(e,f,k,l,mid,x<<1);\n\tup(e,f,k,mid+1,r,(x<<1)+1);\n\tc[x]=c[x<<1]|c[(x<<1)+1];\n\t//cout<<l<<\" \"<<r<<\" \"<<c[x]<<\" \"<<lazy[x]<<endl; \n\treturn;\n}\nint que(int e,int f,int l,int r,int x){\n\tif(e<=l&&r<=f){\n\t\treturn c[x];\n\t}\n\tif(l>f||r<e){\n\t\treturn 0;\n\t}\n\tif(lazy[x]!=0){\n\t\tlazy[x<<1]=lazy[x];\n\t\tlazy[(x<<1)+1]=lazy[x];\n\t\tc[x<<1]=1<<(lazy[x]-1);\n\t\tc[(x<<1)+1]=1<<(lazy[x]-1);\n\t}\n\tint mid=(l+r)>>1,ans=que(e,f,l,mid,x<<1)|que(e,f,mid+1,r,(x<<1)+1);\n\tc[x]=c[x<<1]|c[(x<<1)+1];\n\tlazy[x]=0;\n\t//cout<<l<<\" \"<<r<<\" \"<<c[x]<<\" \"<<c[x<<1]<<\" \"<<c[(x<<1)+1]<<\" \"<<lazy[x]<<endl; \n\treturn ans;\n}\nvoid deal(int x){\n\tint i=0;\n\twhile(x){\n\t\ti++;\n\t\tx=x&(x-1);\n\t}\n\tcout<<i<<endl;\n\treturn;\n}\nint main(){\n\tcin>>n>>m>>t;\n\tbuild(1,n,1);\n\tfor(i=0;i<t;i++){\n\t\tcin>>cc;\n\t\tif(cc=='C'){\n\t\t\tcin>>o>>p>>q;\n\t\t\tif(o>p){\n\t\t\t\tint w=o;\n\t\t\t\to=p;\n\t\t\t\tp=w;\n\t\t\t}\n\t\t\tup(o,p,q,1,n,1);\n\t\t}\n\t\telse{\n\t\t\tcin>>o>>p;\n\t\t\tif(o>p){\n\t\t\t\tint w=o;\n\t\t\t\to=p;\n\t\t\t\tp=w;\n\t\t\t}\n\t\t\tdeal(que(o,p,1,n,1));\n\t\t}\n\t}\n} \n```\n\u7136\u540e\u6ca1\u6709\u4e86\n\u522b\u5fd8\u4e86\u70b9\u8d5e",
        "postTime": 1572174848,
        "uid": 67820,
        "name": "GHJhandsome",
        "ccfLevel": 7,
        "title": "P1558\u8272\u677f\u6e38\u620f"
    },
    {
        "content": "# P1558 \u8272\u677f\u6e38\u620f \u9898\u89e3\n\u601d\u8def\uff1a\u72b6\u6001\u538b\u7f29+\u7ebf\u6bb5\u6811\n### \u5982\u4f55\u72b6\u538b\n\u5047\u8bbep\u8fd9\u6bb5\u533a\u95f4\u6709a\u53f7\u8272\uff0c\u5219res[p]=(1<<a)\uff0c\u770b\u9898\u76ee$1 <= T <= 30$\uff0c $ 2^{30} $\u4fdd\u9669\u8d77\u89c1\uff0c\u5f00$ long  long $\u5427\n### \u6d45\u8c08\u7ebf\u6bb5\u6811\n![\u767e\u5ea6\u4e0a\u7684\u793a\u610f\u56fe](https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=0f98b25f542c11dfded1b8255b1c05ed/bd3eb13533fa828bcb5fe85ffe1f4134970a5a09.jpg)\n\n\u7ebf\u6bb5\u6811->\u7528\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u6bb5\u7ebf\u6bb5\u7684\u6811\n\n#### \u5efa\u6811\u64cd\u4f5c\n\n\u5f00\u59cb\u65f6\u8272\u677f\u4e0a\u539f\u6709\u7684\u989c\u8272\u5c31\u4e3a1\u53f7\u8272\uff0c\u5148\u628a\u6bcf\u4e2a\u70b9\u90fd\u6d82\u4e0a1\u53f7\u8272\uff0c\u5373\u8d4b\u503c$1<<1$,\u4e5f\u5c31\u662f2\n\nres[p]\u8868\u793ap\u533a\u95f4\u5185\u51fa\u73b0\u8fc7\u7684\u72b6\u6001\uff08\u989c\u8272\u72b6\u538b\uff09\n```cpp\nvoid pushup(int p){\n\tres[p]=res[p<<1]|res[p<<1|1];\n}\nvoid build(int p,int l,int r){\n    if(l==r){\n        res[p]=2;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    pushup(p);\n}\n```\n### \u4e0b\u653e\u61d2\u6807\u8bb0\n#### \u4e3a\u4ec0\u4e48\u8981\u61d2\u6807\u8bb0\uff1f\n\u7531\u4e8e\u6211\u4eec\u8981\u505a\u7684\u64cd\u4f5c\u662f\u533a\u95f4\u52a0\u4e00\u4e2a\u6570\u6216\u4e58\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5728\u533a\u95f4\u8fdb\u884c\u4fee\u6539\u65f6\u4e3a\u8be5\u533a\u95f4\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u5c31\u4e0d\u5fc5\u518d\u4fee\u6539\u4ed6\u7684\u513f\u5b50\u6240\u7ef4\u62a4\u533a\u95f4\uff0c\u7b49\u5230\u8981\u4f7f\u7528\u8be5\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u503c\u65f6\uff0c\u518d\u5c06\u61d2\u6807\u8bb0\u4e0b\u653e\u5373\u53ef\uff0c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u5c06\u61d2\u6807\u8bb0\u4e0b\u4f20\uff0c\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\n\n**\u4e0b\u4f20\u610f\u5473\u7740\u6574\u4e2a\u533a\u95f4\u88ab\u8986\u76d6**\uff0c\u76f4\u63a5\u8d4b\u503c\uff0c\u4e0d\u7528or\uff08|\uff09\n```cpp\nvoid pushdown(int p){\n\tif(tag[p]==0) return ;\n\tres[p<<1]=tag[p];\n\tres[p<<1|1]=tag[p];\n\ttag[p<<1]=tag[p];\n\ttag[p<<1|1]=tag[p];\n\ttag[p]=0;//\u61d2\u6807\u8bb0\u8bb0\u5f97\u6e05\u7a7a\n}\n```\n\n#### \u66f4\u65b0\u989c\u8272\n\n\u6d82\u4e0a\u65b0\u989c\u8272\uff0c\u539f\u6709\u989c\u8272\u88ab\u8986\u76d6\n```cpp\n\nvoid updata(int p,int l,int r,int L,int R,int c){\n\tif(l>=L&&r<=R){\n\t\tres[p]=(1<<c);\n\t\ttag[p]=(1<<c);//\u66f4\u65b0\u61d2\u6807\u8bb0\n\t\treturn ;\n\t}\n\tpushdown(p);\n\tint mid=l+r>>1;\n\tif(mid>=L) updata(p<<1,l,mid,L,R,c);\n\tif(mid<R) updata(p<<1|1,mid+1,r,L,R,c);//\u51cf\u5c11\u65e0\u610f\u4e49\u7684\u9012\u5f52\n\tpushup(p);\n} \n```\n#### \u67e5\u8be2\n\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0a\u4ee3\u7801\n```cpp\nlong long query(int p,int l,int r,int L,int R){\n\tif(l>=L&&r<=R){\n\t\treturn res[p];\n\t}\n\tpushdown(p);\n\tlong long ans=0;\n\tint mid=l+r>>1;\n\tif(mid>=L) ans|=query(p<<1,l,mid,L,R);\n\tif(mid<R) ans|=query(p<<1|1,mid+1,r,L,R);\n\treturn ans;\n}\n```\n\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\n\n\n~~\u5176\u5b9e\u5c31\u662f\u7ec4\u5408\u8d77\u6765~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<iomanip>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint inline read(){//\u6c34\u4e00\u6ce2\u5feb\u8bfb\n\tint num=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){if(c=='-')neg=-1;c=getchar();}\n\twhile(isdigit(c)){num=(num<<3)+(num<<1)+(c^48);c=getchar();}\n\treturn num*neg;\n}\nint n,t,m;\nlong long res[400010],tag[400010];\nvoid pushup(int p){\n\tres[p]=res[p<<1]|res[p<<1|1];\n}\nvoid pushdown(int p){\n\tif(tag[p]==0) return ;\n\tres[p<<1]=tag[p];\n\tres[p<<1|1]=tag[p];\n\ttag[p<<1]=tag[p];\n\ttag[p<<1|1]=tag[p];\n\ttag[p]=0;\n}\nvoid build(int p,int l,int r){\n    if(l==r){\n        res[p]=2;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    pushup(p);\n}\nvoid updata(int p,int l,int r,int L,int R,int c){\n\tif(l>=L&&r<=R){\n\t\tres[p]=(1<<c);\n\t\ttag[p]=(1<<c);\n\t\treturn ;\n\t}\n\tpushdown(p);\n\tint mid=l+r>>1;\n\tif(mid>=L) updata(p<<1,l,mid,L,R,c);\n\tif(mid<R) updata(p<<1|1,mid+1,r,L,R,c);\n\tpushup(p);\n} \nlong long query(int p,int l,int r,int L,int R){\n\tif(l>=L&&r<=R){\n\t\treturn res[p];\n\t}\n\tpushdown(p);\n\tlong long ans=0;\n\tint mid=l+r>>1;\n\tif(mid>=L) ans|=query(p<<1,l,mid,L,R);\n\tif(mid<R) ans|=query(p<<1|1,mid+1,r,L,R);\n\treturn ans;\n}\nint main(){\n\tn=read(),t=read(),m=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tchar c=getchar();\n\t\twhile(c!='C'&&c!='P') c=getchar();\n\t\tswitch(c){\n\t\t\tcase 'C':{\n\t\t\t\tint a=read(),b=read(),c=read();\n\t\t\t\tif(a>b) swap(a,b);//\u5751\u70b9\uff0c\u4e0d\u4e00\u5b9aa<b\n\t\t\t\tupdata(1,1,n,a,b,c);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'P':{\n\t\t\t\tint a=read(),b=read();\n\t\t\t\tif(a>b) swap(a,b);\n\t\t\t\tlong long ans=query(1,1,n,a,b),sum=0;\n\t\t\t\tfor(int i=1;i<=t;i++) if(ans&(1<<i)) sum++;\n\t\t\t\tprintf(\"%lld\\n\",sum);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1572006605,
        "uid": 131933,
        "name": "sunzh",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "~~\u5df2\u7ecf\u5fd8\u8bb0\u7ebf\u6bb5\u6811\u7684\u5e73\u8861\u6811\u9009\u624b\u62a5\u5230~~\n\n\u6b64\u9898\u989c\u8272\u6570\u6781\u5c11\uff0c\u663e\u7136\u53ef\u4ee5\u5bf9\u6bcf\u79cd\u989c\u8272\u66b4\u529b\u7ef4\u62a4\n\n\u4f46\u662f\u5199\u597d\u51e0\u9897\u6811\u5f88\u9ebb\u70e6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u628a\u989c\u8272\u538b\u4f4d\n\n\u7136\u540e\u5c31\u5f97\u51fa\u533a\u95f4\u5408\u5e76\u7684\u65b9\u6cd5\uff0c`sum=lc->sum|rc->sum`\n\n\u4e3a\u4e86\u51cf\u5c11\u9700\u8981\u52a0\u4e00\u51cf\u4e00\u7684\u8fb9\u754c\u7ec6\u8282\uff0c\u7528\u5e73\u8861\u6811\u6765\u5b9e\u73b0\u533a\u95f4\u64cd\u4f5c\n\n~~fhqtxdy!~~\n\n\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u533a\u95f4\u53ef\u80fd$l>r$\uff0c\u9700\u8981\u5224\u65ad\n\n\u771f\u5fc3\u611f\u89c9fhq\u597d\u5199\uff0c\u4ee3\u7801\u91cf\u8ddf\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\u751a\u81f3\u5c11\u4e8e\u7ebf\u6bb5\u6811\n\n\u800c\u4e14\u7ef4\u62a4\u4e0d\u540c\u7684\u4fe1\u606f\u53ea\u9700\u8981\u4fee\u6539`pushdown`\u548c`maintain`\u5c31\u884c\u4e86\n\n~~\u5e38\u6570\u4e5f\u53ef\u4ee5\u63a5\u53d7~~\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n\nstruct Node\n{\n    int val,sum,size,tag,pri;\n    Node *lc,*rc;\n    Node(int v):\n        val(v),\n        sum(v),\n        size(1),\n        tag(0),\n        pri(rand()),\n        lc(NULL),\n        rc(NULL)\n    {}\n    void push_down()\n    {\n        if(tag==0)return;\n        val=tag;\n        sum=tag;\n        if(lc!=NULL)lc->tag=tag;\n        if(rc!=NULL)rc->tag=tag;\n        tag=0;\n    }\n    void maintain()\n    {\n        size=1;\n        sum=val;\n        if(lc!=NULL)\n        {\n            lc->push_down();\n            size+=lc->size;\n            sum|=lc->sum;\n        }\n        if(rc!=NULL)\n        {\n            rc->push_down();\n            size+=rc->size;\n            sum|=rc->sum;\n        }\n    }\n};\nNode *root;\n\nNode *merge(Node *l,Node *r)\n{\n    if(l==NULL)return r;\n    if(r==NULL)return l;\n    if(l->pri<r->pri)\n    {\n        l->push_down();\n        l->rc=merge(l->rc,r);\n        l->maintain();\n        return l;\n    }\n    else\n    {\n        r->push_down();\n        r->lc=merge(l,r->lc);\n        r->maintain();\n        return r;\n    }\n}\n\nvoid split(Node *rt,int k,Node *&l,Node *&r)\n{\n    if(rt==NULL)\n    {\n        l=r=NULL;\n        return;\n    }\n    int s=0;\n    if(rt->lc!=NULL)s=rt->lc->size;\n    rt->push_down();\n    if(s+1<k)\n    {\n        l=rt;\n        split(l->rc,k-s-1,l->rc,r);\n    }\n    else\n    {\n        r=rt;\n        split(r->lc,k,l,r->lc);\n    }\n    rt->maintain();\n}\n\nvoid paint(int l,int r,int c)\n{\n    Node *p1,*p2,*p3;\n    split(root,r+1,p2,p3);\n    split(p2,l,p1,p2);\n    p2->tag=1<<c;\n    root=merge(merge(p1,p2),p3);\n}\n\nint bit_count(int x)\n{\n    int res=0;\n    while(x)\n    {\n        res+=x&1;\n        x>>=1;\n    }\n    return res;\n}\n\nint query(int l,int r)\n{\n    Node *p1,*p2,*p3;\n    split(root,r+1,p2,p3);\n    split(p2,l,p1,p2);\n    p2->push_down();\n    int res=bit_count(p2->sum);\n    root=merge(merge(p1,p2),p3);\n    return res;\n}\n\nint n,m;\n\nchar readc()\n{\n    char c=getchar();\n    while(c<'A'||c>'Z')c=getchar();\n    return c;\n}\n\nint main()\n{\n    scanf(\"%d%*d%d\\n\",&n,&m);\n    for(int i=0;i<n;++i)\n    {\n        root=merge(root,new Node(2));\n    }\n    while(m--)\n    {\n        char op;\n        int l,r,c;\n        op=readc();\n        scanf(\"%d%d\",&l,&r);\n        if(l>r)std::swap(l,r);\n        if(op=='C')\n        {\n            scanf(\"%d\",&c);\n            paint(l,r,c);\n        }\n        if(op=='P')\n        {\n            printf(\"%d\\n\",query(l,r));\n        }\n    }\n}\n```",
        "postTime": 1569755420,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "# \u95f2\u626f\n\n\u4e00\u9053\u7ebf\u6bb5\u6811\u597d\u9898~~\u88f8\u9898~~\n\n\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\u51fa\u9898\u4eba\u7684\u6570\u636e\u3002\u3002\u3002\n\n\u6700\u5f00\u59cb\u6ca1\u770b\u5230 $A$ \u53ef\u80fd\u5927\u4e8e $B$ \uff0c\u7ed3\u679c $WA$ \u4e86\u3002\u3002\n\n# \u9898\u9762\n\n[\u9898\u9762](https://www.luogu.org/problem/P1558)\n\n# Solution\n\n\u770b\u8303\u56f4\uff0c $T\\leq30$ \uff0c\u53d1\u73b0\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u662f\u5426\u5305\u542b\u6bcf\u4e00\u79cd\u989c\u6599\uff0c\u63a5\u4e0b\u6765\u7684\u4e8b\u5c31\u597d\u529e\u4e86\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $1$ \uff0c\u662f\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\uff0c\u76f4\u63a5\u5c06 $s$ \u53d8\u6210 $1<<(C-1)$ \uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u73b0\u5728\u53ea\u542b\u6709 $C$ \u8fd9\u79cd\u989c\u6599\uff0c\u61d2\u6807\u8bb0\u6362\u4e00\u4e0b\u3002\n\n\u4e0b\u653e\u4e5f\u662f\u4e00\u6837\u7684\u64cd\u4f5c\u3002\n\n\u5411\u4e0a\u7edf\u8ba1\u7684\u65f6\u5019\u76f4\u63a5\u7528\u5de6\u533a\u95f4\u7684 $s$ \u6216\u4e0a\u53f3\u533a\u95f4\u7684 $s$ \u5373 $T[cur].s=T[lc].s\\mid T[rc].s$ \u3002\n\n\u6bcf\u4e00\u6b21\u67e5\u8be2\u65f6\u627e\u5230\u8868\u793a\u8fd9\u6bb5\u533a\u95f4\u7684 $s$ \uff0c\u7136\u540e\u76f4\u63a5\u67e5\u770b\u6709\u5305\u542b\u51e0\u4e2a $1$ \u5373\u53ef\u3002\n\n# Code\n\n```c++\n#include<bits/stdc++.h>\n#define del(a,i) memset(a,i,sizeof(a))\n#define ll long long\n#define inl inline\n#define il inl void\n#define it inl int\n#define ill inl ll\n#define re register\n#define ri re int\n#define rl re ll\n#define mid ((l+r)>>1)\n#define lowbit(x) (x&(-x))\n#define INF 0x3f3f3f3f\nusing namespace std;\ntemplate<class T>il read(T &x){\n\tint f=1;char k=getchar();x=0;\n\tfor(;k>'9'||k<'0';k=getchar()) if(k=='-') f=-1;\n\tfor(;k>='0'&&k<='9';k=getchar()) x=(x<<3)+(x<<1)+k-'0';\n\tx*=f;\n}\ntemplate<class T>il print(T x){\n\tif(x/10) print(x/10);\n\tputchar(x%10+'0');\n}\nll mul(ll a,ll b,ll mod){long double c=1.;return (a*b-(ll)(c*a*b/mod)*mod)%mod;}\nit qpow(int x,int m,int mod){\n\tint res=1,bas=x%mod;\n\twhile(m){\n\t\tif(m&1) res=(res*bas)%mod;\n\t\tbas=(bas*bas)%mod,m>>=1;\n\t}\n\treturn res%mod;\n}\nconst int MAXN = 1e5+5;\nint n,m,k,x,y,z;\nchar opt;\n#define lc (cur<<1)\n#define rc (cur<<1|1)\nstruct Seg_Tree{\n\tint tag,s;\n}T[MAXN<<2];\nil pushup(int cur){T[cur].s=T[lc].s|T[rc].s;}\nil pushdown(int cur,int l,int r){\n\tif(!T[cur].tag) return ;\n\tT[lc].tag=T[rc].tag=T[cur].tag;\n\tT[lc].s=T[rc].s=1<<(T[cur].tag-1);\n\tT[cur].tag=0;\n}\nil build_tree(int cur,int l,int r){\n\tT[cur].s=1;\n\tif(l==r) return ;\n\tbuild_tree(lc,l,mid),build_tree(rc,mid+1,r);\n}\nit query(int cur,int l,int r,int L,int R){\n\tif(l>=L&&r<=R) return T[cur].s;\n\tpushdown(cur,l,r);ri res=0;\n\tif(mid>=L) res|=query(lc,l,mid,L,R);\n\tif(R>mid) res|=query(rc,mid+1,r,L,R);\n\treturn res;\n}\nil updata(int cur,int l,int r,int L,int R,int k){\n\tif(l>=L&&r<=R) T[cur].s=1<<(k-1),T[cur].tag=k;\n\telse{\n\t\tpushdown(cur,l,r);\n\t\tif(mid>=L) updata(lc,l,mid,L,R,k);\n\t\tif(R>mid) updata(rc,mid+1,r,L,R,k);\n\t\tpushup(cur);\n\t}\n}\nit count(int x){\n\tri res=0;\n\twhile(x){\n\t\tif(x&1) res++;\n\t\tx>>=1;\n\t}\n\treturn res;\n}\nint main()\n{\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tread(n),read(k),read(m);\n\tbuild_tree(1,1,n);\n\tfor(ri i=1;i<=m;++i){\n\t\tcin>>opt;read(x),read(y);\n\t\tif(x>y) swap(x,y);\n\t\tif(opt=='C') read(z),updata(1,1,n,x,y,z);\n\t\telse{\n\t\t\tri tmp=query(1,1,n,x,y);\n\t\t\tprint(count(tmp)),puts(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u849f\u84bb\u9893\u4e86\u4e00\u665a\u4e0a\u8fd8\u662f\u505a\u70b9\u9898\u5427\u3002\u3002\n\n\u9a6c\u4e0a $NOIP$ \u4e86~~\u867d\u7136\u5b83\u5df2\u7ecf\u6b7b\u4e86~~\uff0c\u611f\u89c9\u597d\u614c\u5440 $qwq$ \u3002\n\n\u8fd9\u6837\u7684\u6a21\u677f\u9898\u8981\u8ffd\u6c42\u901f\u5ea6\uff0c\u540c\u65f6\u8fd8\u8981\u4fdd\u8bc1\u6b63\u786e\u7387\uff0c\u4e0d\u7136\u8003\u573a\u4e0a\u4e00\u614c\u5c31 $GG$ \u3002",
        "postTime": 1566912143,
        "uid": 122273,
        "name": "TheShadow",
        "ccfLevel": 0,
        "title": "P1558 \u8272\u677f\u6e38\u620f \u9898\u89e3"
    },
    {
        "content": "\u53c8\u662f\u4e00\u9053\u82b1\u5f0f\u7ebf\u6bb5\u6811   \n\u663e\u7136\u672c\u9898\u9700\u8981\u5408\u5e76\u7684\u662f\u533a\u95f4\u989c\u8272\u6570\u76ee   \n~~\u770b\u8d77\u6765\u597d\u96be\u554a~~    \n\u8001\u8bdd\u8bf4\u5f97\u597d\uff0c\u770b\u6570\u636e\u89c4\u6a21\u77e5\u7b97\u6cd5  \n\u6211\u4eec\u7a81\u7136\u53d1\u73b0\uff0c\u989c\u8272\u7684\u6570\u76ee\u53ea\u670930   \n\u8fd9\u4e2a\u8be1\u5f02\u7684\u6570\u5b57\u8ba9\u6211\u7acb\u5373\u60f3\u5230\u4e86\u4e8c\u8fdb\u5236\u8868\u793a   \n\u7ef4\u62a4sum\uff0c\u5176\u6bcf\u4e00\u4f4d\u8868\u793a\u662f\u5426\u6709\u8be5\u79cd\u989c\u8272\u5728\u6b64\u533a\u95f4   \n\u5177\u4f53\u8bf7\u89c1\u4ee3\u7801    \n```cpp\n#include<bits/stdc++.h>\n#define lc (p<<1)\n#define rc (p<<1|1)\nusing namespace std;\nstruct Node{\n\tint l,r,sum,lazy;\n}T[400010];\ninline void pushup(int p){\n\tT[p].sum=T[lc].sum|T[rc].sum;//\u5c06\u533a\u95f4\u7684\u4fe1\u606f\u7528\u6309\u4f4d\u4e0e\u5408\u5e76 \n}\nvoid build(int p,int l,int r){\n\tT[p].l=l;T[p].r=r;\n\tif(l==r){\n\t\tT[p].sum=1;return;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(p);\n}\ninline void pushnow(int p,int v){//\u5c06\u533a\u95f4\u76f4\u63a5\u8986\u76d6,\u6240\u4ee5\u4e0d\u9700\u8981\u7ef4\u62a4\u5176\u4ed6\u4fe1\u606f\u7684\u51b2\u7a81 \n\tT[p].sum=v;T[p].lazy=v;\n}\nvoid pushdown(int p){\n\tif(T[p].lazy){\n\t\tpushnow(lc,T[p].lazy);\n\t\tpushnow(rc,T[p].lazy);\n\t\tT[p].lazy=0;\n\t}\n}\nvoid update(int p,int ql,int qr,int v){\n\tif(ql<=T[p].l&&T[p].r<=qr){\n\t\tpushnow(p,v);\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid)update(lc,ql,qr,v);\n\tif(qr>mid)update(rc,ql,qr,v);\n\tpushup(p);\n}\nint query(int p,int ql,int qr){\n\tif(ql<=T[p].l&&T[p].r<=qr)\n\t\treturn T[p].sum;\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1,ans=0;\n\tif(ql<=mid)ans=ans|query(lc,ql,qr);\n\tif(qr>mid)ans=ans|query(rc,ql,qr);//\u540cpushup \n\treturn ans;\n}\nint main(){\n\t//freopen(\"testdata.in\",\"r\",stdin);\n\t//freopen(\"my.out\",\"w\",stdout);\n\tint n,m,q;\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=q;++i){\n\t\tchar ch=getchar();\n\t\twhile(ch!='C'&&ch!='P')ch=getchar();\n\t\tif(ch=='C'){\n\t\t\tint x,y,z;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tif(x>y)swap(x,y);\n\t\t\tint v=1;\n\t\t\tfor(int j=1;j<z;++j)v<<=1;//\u5c06\u8fd9\u79cd\u989c\u8272\u8f6c\u5316\u5230\u5b83\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u6570\u4f4d\u4e0a \n\t\t\tupdate(1,x,y,v);\n\t\t}\n\t\tif(ch=='P'){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(x>y)swap(x,y);\n\t\t\tint q=query(1,x,y),ans=0;\n\t\t\twhile(q){\n\t\t\t\tans+=q&1;q>>=1;//\u63d0\u53d6\u51faans\u4e2d\u6240\u6709\u6709\u503c\u7684\u6570\u4f4d\uff0c\u5373\u4e0d\u540c\u7684\u989c\u8272 \n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565574557,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811-2"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73~](https://tle666.github.io/2019/03/06/[luogu1558]%20%E8%89%B2%E6%9D%BF%E6%B8%B8%E6%88%8F/)\n\n# **Description**\n\n\u5bf9\u4e8e\u957f\u5ea6\u4e3a$n$\u7684\u6570\u7ec4$a$\u521d\u59cb\u503c\u90fd\u4e3a$1$\uff0c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u64cd\u4f5c\uff1a\n\n- \u5c06$a[l]$\u5230$a[r]$\u8d4b\u503c\u4e3a$d$\uff1b\n- \u8be2\u95ee$a[l]$\u5230$a[r]$\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u6570\u3002\n\n\u64cd\u4f5c$m$\u6b21\uff0c$d \\in [1,\\ t]$\n\n\u5bf9\u4e8e$100$%\u7684\u6570\u636e\uff0c\n\n$1 \\leq n \\leq 100000$\uff0c$1 \\leq t \\leq 30$\uff0c$1 \\leq m \\leq 100000$\n\n[\u9898\u76ee\u94fe\u63a5\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P1558)\n\n# **Solution**\n\n\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u9898 ~~\u7136\u540e\u6211\u9519\u4e869\u904d~~\n\n\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\uff0c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u89e3\u6cd5\n\n## **\u89e3\u6cd5\u4e00**\n\n\u6bd4\u8f83\u66b4\u529b\uff0c\u5efa$t$\u68f5\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u7b2c$i$\u68f5\u7ebf\u6bb5\u6811\u53ea\u5b58\u503c\u4e3a$i$\u7684\u6570\u7ec4\u6709\u54ea\u4e9b\u3002\n\n**\u5e38\u6570\u6bd4\u8f83\u5927\u3002**\n\n$6$\u6b21\u63d0\u4ea4\uff0c\u4e0d\u5f00$O2$\u6700\u9ad8\u53ea\u80fd$80$\u5206\uff0c\u5c31\u7b97\u5f00\u4e86$O2$\u4e5f\u53ea\u80fd$90$\u3002\u3002\n\n\u4f60\u4eec\u81ea\u5df1\u60f3\u5361\u5e38\u5c31\u5361\u53bb\u5427\u3002\u3002\n\n\u6211\u7684$80$\u5206\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\nusing namespace std;\n#define MAXN 100100\nint n, m, t;\nchar ch[2];\ninline int read() {\n    int s = 0, w = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') { if(ch == '-') w = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') s = s * 10 + ch - '0', ch = getchar();\n    return s * w;\n}\nstruct node {\n    int left, right, mx, tag;\n    node *ls, *rs;\n    inline void seta(int x) { tag = x, mx = (x == 1 ? 1 : 0);}\n    inline void upd() { mx = max(ls->mx, rs->mx);}\n    inline void push() {\n        if(tag) {\n            if(ls) ls->seta(tag);\n            if(rs) rs->seta(tag);\n            tag = 0;\n        }\n    }\n} pool[MAXN << 8], *root[35], *cnt = pool;\ninline void build1(node *r, int left, int right) {\n    r->left = left, r->right = right;\n    if(left == right) {\n        r->mx = 1; return ;\n    } int mid = (left + right) >> 1;\n    node *ls = ++cnt, *rs = ++cnt;\n    r->ls = ls, r->rs = rs;\n    build1(ls, left, mid), build1(rs, mid + 1, right);\n    r->upd();\n}\ninline void build(node *r, int left, int right) {\n    r->left = left, r->right = right;\n    if(left == right) return ;\n    int mid = (left + right) >> 1;\n    node *ls = ++cnt, *rs = ++cnt;\n    r->ls = ls, r->rs = rs;\n    build(ls, left, mid), build(rs, mid + 1, right);\n}\ninline void change(node *r, int left, int right, int d) {\n    if(r->left == left && r->right == right) {\n        r->seta(d); return ;\n    } r->push();\n    if(r->ls->right >= right) change(r->ls, left, right, d);\n    else if(r->rs->left <= left) change(r->rs, left, right, d);\n    else change(r->ls, left, r->ls->right, d),\n         change(r->rs, r->rs->left, right, d);\n    r->upd();\n}\ninline int query(node *r, int left, int right) {\n    r->push();\n    if(r->left == left && r->right == right) return r->mx;\n    if(r->ls->right >= right) return query(r->ls, left, right);\n    else if(r->rs->left <= left) return query(r->rs, left, right);\n    else return max(query(r->ls, left, r->ls->right),\n                    query(r->rs, r->rs->left, right));\n}\nint main() {\n    int A, B, C, ans;\n    n = read(), t = read(), m = read();\n    build1(root[1] = cnt, 1, n);\n    for(int i = 2; i <= t; i++)\n        build(root[i] = ++cnt, 1, n);\n    while(m--) {\n        scanf(\"%s\", ch);\n        A = read(), B = read();\n        if(A > B) swap(A, B);\n        if(ch[0] == 'C') {\n            C = read();\n            for(int i = 1; i <= t; i++)\n                if(i != C) change(root[i], A, B, -1);\n                else change(root[C], A, B, 1);\n        }\n        else {\n            ans = 0;\n            for(int i = 1; i <= t; i++)\n                ans += query(root[i], A, B);\n            printf(\"%d\\n\", ans);\n        }\n    }\n    return 0;\n}\n```\n\n## **\u89e3\u6cd5\u4e8c**\n\n$100$%\u7684\u6b63\u89e3\u3002\n\n\u7528\u4e8c\u8fdb\u5236\u6765\u8868\u793a\u533a\u95f4\u7684\u53d6\u503c\u60c5\u51b5\u3002\n\n\u6bd4\u5982$a_1 = 1,\\ a_2 = 2,\\ a_3 = 3,\\ a_4 = 2$\uff0c\n\n\u6211\u4eec\u4e0d\u59a8\u8bbe\u6570\u503c$i$\u662f$2^{i - 1}$\n\n\u52191,2\u5408\u8d77\u6765\u5c31\u662f0011\uff1b\n\n1,3\u5408\u8d77\u6765\u5c31\u662f0101\uff1b\n\n\u6ce8\u610f\uff1a**2,3,4\u5408\u8d77\u6765\u662f0110\u800c\u4e0d\u662f0120\uff01**\n\n\u5927\u4f53\u4e0a\u548c\u89e3\u6cd5\u4e00\u6bd4\u8f83\u7c7b\u4f3c\n\n# **Code**\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\nusing namespace std;\n#define MAXN 100100\nint n, m, t;\nchar ch[2];\ninline int read() {\n    int s = 0, w = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') { if(ch == '-') w = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') s = s * 10 + ch - '0', ch = getchar();\n    return s * w;\n}\nstruct node {\n    int left, right, s, tag; // s \u5c31\u662f\u5b58\u538b\u4f4d\u7684\u90a3\u4e2a\u3002\n    node *ls, *rs;\n    inline void seta(int x) { s = (1 << (x - 1)), tag = x;}\n    inline void upd() { s = (ls->s | rs->s);}\n    inline void push() {\n        if(tag) {\n            if(ls) ls->seta(tag);\n            if(rs) rs->seta(tag);\n            tag = 0;\n        }\n    }\n} pool[MAXN << 3], *root, *cnt = pool;\ninline void build(node *r, int left, int right) {\n    r->left = left, r->right = right;\n    if(left == right) {\n        r->s = 1; return ;\n    } int mid = (left + right) >> 1;\n    node *ls = ++cnt, *rs = ++cnt;\n    r->ls = ls, r->rs = rs;\n    build(ls, left, mid), build(rs, mid + 1, right);\n    r->upd();\n}\ninline void change(node *r, int left, int right, int d) {\n    if(r->left == left && r->right == right) {\n        r->seta(d); return ;\n    } r->push();\n    if(r->ls->right >= right) change(r->ls, left, right, d);\n    else if(r->rs->left <= left) change(r->rs, left, right, d);\n    else change(r->ls, left, r->ls->right, d),\n         change(r->rs, r->rs->left, right, d);\n    r->upd();\n}\ninline int query(node *r, int left, int right) {\n    r->push();\n    if(r->left == left && r->right == right) return r->s;\n    if(r->ls->right >= right) return query(r->ls, left, right);\n    else if(r->rs->left <= left) return query(r->rs, left, right);\n    else return (query(r->ls, left, r->ls->right) |\n                query(r->rs, r->rs->left, right));\n}\ninline int count(int x) {\n    int res = 0;\n    for(int i = 30; i >= 0; i--)\n        if(x >= (1 << i))\n            x -= (1 << i), res++;\n    return res;\n}\nint main() {\n    int left, right, d;\n    n = read(), t = read(), m = read();\n    build(root = cnt, 1, n);\n    while(m--) {\n        scanf(\"%s\", ch),\n        left = read(), right = read();\n        if(left > right) swap(left, right);\n        if(ch[0] == 'C') {\n            d = read();\n            change(root, left, right, d);\n        }\n        else\n            printf(\"%d\\n\", count(query(root, left, right)));\n    }\n    return 0;\n}\n/*\n2 2 4\nC 1 1 2\nP 1 2\nC 2 2 2\nP 1 2\n\n*/\n```\n\n",
        "postTime": 1551881706,
        "uid": 54628,
        "name": "eros1on",
        "ccfLevel": 0,
        "title": "P1558 \u8272\u677f\u6e38\u620f"
    },
    {
        "content": "### P1558 \u8272\u677f\u6e38\u620f\n\n\u601d\u8def\uff1a\u4f4d\u8fd0\u7b97\uff0c\u72b6\u6001\u538b\u7f29\uff0c\u7ebf\u6bb5\u6811\n\n1. #### \u5206\u6790\u601d\u8def\n\n   * \u6c42\u67d0\u4e2a\u533a\u95f4\u7684\u989c\u8272\u96c6\u5408\u7684\u8fd0\u7b97\u65f6\u652f\u6301 **\u7ed3\u5408\u5f8b**\u7684 \uff1b\n   * \u770b\u5230 $T\u226430$ \u80fd\u60f3\u5230 **\u72b6\u6001\u538b\u7f29** \uff1b\n   * \u6240\u4ee5\u53ef\u4ee5\u8bbe\u7f6e\u72b6\u6001\uff1a$\\text{X}$\u7684\u4e8c\u8fdb\u5236\u4e0b\u7684\u7b2c$\\text{i}$\u4f4d\u4e3a$\\text{1}$\u8868\u793a\u6709\u7b2c$\\text{i}$\u79cd\u989c\u8272\uff0c\u5426\u5219\u6ca1\u6709 \uff1b\n   * \u5408\u5e76\u4e24\u4e2a\u72b6\u6001\u7528\u5230\u4e86\u6309\u4f4d\u6216\u8fd0\u7b97 \uff1b\n\n\n2. #### \u7ebf\u6bb5\u6811\n\n   * $\\text{Pushup}$ \u64cd\u4f5c\u76f4\u63a5\u6c42\u6216\u8fd0\u7b97\u5373\u53ef\n   * \u5176\u4ed6\u64cd\u4f5c\u7167\u5e38\n\n\n3. #### Code\n\n   ```c++\n   #include <stdio.h>\n   #include <string.h>\n   #define Clean(X) memset(X,0,sizeof(X))\n   #define LS RT*2\n   #define RS RT*2+1\n   const int MaxL = 100005 , MaxK = 30;\n   unsigned L , K , O ;\n   inline unsigned QRead () {\n   \tunsigned X = 0;\n   \tchar C = getchar() ;\n   \twhile (C > '9' || C < '0') C = getchar() ;\n   \twhile (C >='0' && C <='9') {\n   \t\tX = X * 10 + C -'0' ;\n   \t\tC = getchar() ;\n   \t}\n   \treturn X ;\n   }\n   /*\n   \u5934\u6587\u4ef6\u548c\u51c6\u5907\u5de5\u4f5c\n   */\n   unsigned Cnt(unsigned X) {\n   \tunsigned Ans = 0 ;\n   \twhile (X) {\n   \t\t++Ans ;\n   \t\tX -= (X&(-X)) ;\n   \t}\n   \treturn Ans ;\n   }\n   /*\n   Cnt\u51fd\u6570\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u79cd\u6240\u542b\u6709\u76841\u7684\u4e2a\u6570\u3002\n   \u6bcf\u6b21\u8fdb\u884cLowbit\u8fd0\u7b97\uff0c\u90fd\u6d88\u9664\u4e86\u4e00\u4e2a1\u548c\u5b83\u540e\u9762\u76840\u3002\n   */\n   unsigned Date[MaxL * 4] , Left[MaxL * 4] , Right [MaxL * 4] , Tag[MaxL * 4] ;\n   void Plant (unsigned RT , unsigned L , unsigned R) {\n   \tLeft[RT] = L , Right[RT] = R ;\n   \tDate[RT] = 1 ;\n   \tTag[RT] = 0 ;\n   \tif (L == R) return  ;\n   \tunsigned Mid = (L + R) >> 1 ;\n   \tPlant (LS , L , Mid) , Plant (RS , Mid + 1 , R) ;\n   }\n   inline void Spd (unsigned RT) {\n   \tTag[LS] = Tag[RS] = Date[LS] = Date[RS] = Tag[RT];\n   \tTag[RT] = 0 ;\n   }\n   unsigned Ask (unsigned RT , unsigned L , unsigned R) {\n   \tif (Left[RT] >= L && Right[RT] <= R) return Date[RT] ;\n   \tunsigned Mid = (Left[RT] + Right[RT] ) >> 1 , Al = 0 , Ar = 0;\n   \tif (Tag[RT])Spd(RT) ;\n   \tif (L <= Mid) Al = Ask (LS , L , R) ;\n   \tif (R >  Mid) Ar = Ask (RS , L , R) ;\n   \treturn Al | Ar ;\n   }\n   void Add (unsigned RT , unsigned L , unsigned R,unsigned K) {\n   \tif (Left[RT] >= L && Right[RT] <= R) {\n   \t\tDate[RT] = Tag[RT] = K ;\n   \t\treturn  ;\n   \t}\n   \tunsigned Mid = (Left[RT] + Right[RT] ) >> 1 ;\n   \tif (Tag[RT] )Spd (RT) ;\n   \tif (L <= Mid) Add (LS , L , R , K) ;\n   \tif (R >  Mid) Add (RS , L , R , K) ;\n   \tDate[RT] = Date[LS] | Date[RS] ;\n   }\n   /*\n   \u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u51fd\u6570\n   */\n   void Swap(unsigned int &X, unsigned int &Y) {\n   \tint T = X ;\n   \tX = Y ;\n   \tY = T ;\n   }\n   int main () {\n   //\tfreopen (\"P1558.in\" , \"r\" , stdin) ;\n   \tL = QRead () , K = QRead () , O = QRead () ;\n   \tPlant (1 , 1 , L) ;\n   \tfor (register unsigned i = 1 ;  i <= O ; ++ i) {\n   \t\tchar C = getchar() ;\n   \t\twhile (C != 'P' && C != 'C') C = getchar() ;\n   \t\tif (C == 'C') {\n   \t\t\tunsigned L = QRead () , R = QRead () , Cl = QRead () - 1 ;\n   \t\t\tif (L > R) Swap (L , R) ;\n   \t\t\tAdd (1 , L , R , 1 << Cl) ;\n   \t\t} else {\n   \t\t\tunsigned L = QRead () , R = QRead () ;\n   \t\t\tif (L > R) Swap (L , R) ;\n   \t\t\tprintf (\"%d\\n\" , Cnt (Ask (1 , L , R)));\n   \t\t}\n   \t}\n   \tfclose (stdin) ;\n   \tfclose (stdout);\n   \treturn 0;\n   }\n   ```\n\n#### Thanks!",
        "postTime": 1547192137,
        "uid": 35219,
        "name": "Baihua",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\t\t\u4e3a\u4e86\u52a0\u6df1\u5bf9\u7ebf\u6bb5\u6811\u7684\u8bb0\u5fc6\uff0c\u7136\u540e\u5f00\u59cb\u641e\u8fd9\u9053\u9898\u3002\n\n\u3000\u3000TM\u7684WA\u4e86\u4e00\u4e0b\u5348\u5c31\u662f\u53d1\u73b0x\u53ef\u80fd\u5927\u4e8ey\uff08\u7136\u800c\u9898\u76ee\u91cc\u8bf4\u7684\u8fd8\u5f88\u6e05\u695a\uff0c\u6211TM\u6ca1\u770b\u89c1\uff09\n\n\u3000\u3000\u8fd9\u9053\u9898\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u4e0a\u6539\u4e00\u4e9b\u5730\u65b9\u5c31\u53ef\u4ee5\u4e86\uff1a\n\n\u3000\u30001.\u5b58\u50a8\u65f6\u4e0d\u662f\u5b58\u50a8\u989c\u8272\uff0c\u800c\u662f\u5c06\u5b83\u72b6\u538b\u6210\u4e00\u4e2a\u6574\u6570\uff08\u5982\u5e8f\u53f7\u4e3a3\u7684\u989c\u8272\u5b58\u4e3a1<<3=8\uff09\n\n\u3000\u30002.\u56de\u6eaf\u65f6\u4e0d\u662f\u53d6\u548c\u76f8\u52a0\uff0c\u800c\u662f\u76f4\u63a5\u6309\u4f4d\u6216\uff08|\uff09\uff0c\u539f\u7406\u7b49\u4e0b\u8bb2\n\n\u3000\u30003.\u6700\u540e\u7684\u67e5\u8be2\u5b8c\u6bd5\u7684\u503c\u7edf\u8ba1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u4e0b\u6709\u591a\u5c11\u4e2a1\u5c31\u662fans\n\n\u3000\u3000\u6700\u540e\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981| \n\n\u3000\u3000\u5047\u59823\u79cd\u989c\u8272 2,3,3\uff0c\u5728\u6811\u4e0a\u8bb0\u4e3a4,8,8\uff0c\u5b83\u4eec\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5c31\u662f\uff08100,1000,1000\uff09\n\n\u3000\u3000\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u6bcf\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4e0b\u90fd\u53ea\u6709\u4e00\u4f4d\u4e0a\u67091\uff0c\u800c\u4e14\u4e0d\u540c\u989c\u8272\u7684\u65701\u7684\u4f4d\u7f6e\u4e0d\u540c\n\n\u3000\u3000\u56e0\u6b64\u5728|\u7684\u65f6\u5019\uff0c\u53ea\u8981\u8fd9\u4e00\u4f4d\u4e0a\u67091\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u6709\u8fd9\u79cd\u989c\u8272\n\n\u3000\u3000\u7ebf\u6bb5\u6811\u5c31\u662f\u677f\u5b50\uff0c\u5957\u4e00\u5957\u5c31\u597d\u4e86\n  \n\t\tCODE\n```        \n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int N=100005;\nint tree[N*4],add[N*4],l,t,o,x,y,z;\nchar ch;\ninline void read(int &x)\n{\n    x=0; char ch=getchar(); int flag=1;\n    while (ch<'0'||ch>'9') { if (ch=='-') flag=-1; ch=getchar(); }\n    while (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n    x*=flag;\n}\ninline void write(int x)\n{\n    if (x/10) write(x/10);\n    putchar(x%10+'0');\n}\ninline void up(int root) //\u9012\u5f52\u56de\u6eaf\uff0c\u6ce8\u610f\u662f|\u4e0d\u662f+\n{\n    tree[root]=tree[root*2]|tree[root*2+1];\n}\ninline void down(int root) //\u6807\u8bb0\u4e0b\u4f20\uff0c\u76f4\u63a5\u8986\u76d6\u5373\u53ef\n{\n    if (add[root])\n    {\n        tree[root*2]=add[root];\n        tree[root*2+1]=add[root];\n        add[root*2]=add[root];\n        add[root*2+1]=add[root];\n        add[root]=0;\n    }\n}\ninline void build(int root,int l,int r) //\u9012\u5f52\u5efa\u6811\n{\n    if (l==r)\n    {\n        tree[root]=2;\n        return;\n    }\n    int mid=l+r>>1;\n    build(root*2,l,mid);\n    build(root*2+1,mid+1,r);\n    up(root);\n}\ninline void change(int root,int l,int r,int beg,int end,int col) //\u533a\u95f4\u4fee\u6539\uff0c\u6ce8\u610f\u65e2\u9700\u8981\u6807\u8bb0\u4e0b\u4f20\u4e5f\u9700\u8981\u66f4\u65b0\u56de\u6eaf\n{\n    if (l>=beg&&r<=end)\n    {\n        tree[root]=1<<col;\n        add[root]=1<<col;\n        return;\n    }\n    down(root);\n    int mid=l+r>>1;\n    if (beg<=mid) change(root*2,l,mid,beg,end,col);\n    if (end>mid) change(root*2+1,mid+1,r,beg,end,col);\n    up(root);\n}\ninline int query(int root,int l,int r,int beg,int end) //\u533a\u95f4\u67e5\u8be2\uff0c\u540c\u6837\u6ce8\u610f\u662f|\u4e0d\u662f+\n{\n    if (l>=beg&&r<=end) return tree[root];\n    down(root);\n    int mid=l+r>>1,res=0;\n    if (beg<=mid) res|=query(root*2,l,mid,beg,end);\n    if (end>mid) res|=query(root*2+1,mid+1,r,beg,end);\n    up(root);\n    return res;\n}\ninline int calc(int x) //\u5f97\u5230\u4e8c\u8fdb\u5236\u6570\u540e\u518d\u7edf\u8ba11\u7684\u4e2a\u6570\n{\n    int res=0;\n    while (x) \n    {\n        if (x%2==1) res++;\n        x>>=1;\n    }\n    return res;\n}\nint main()\n{\n    read(l); read(t); read(o);\n    build(1,1,l);\n    while (o--)\n    {\n        cin>>ch;\n        if (ch=='C') \n        {\n            read(x); read(y); read(z);\n            if (x>y) swap(x,y);\n            change(1,1,l,x,y,z); \n        }else\n        {\n            read(x); read(y);\n            if (x>y) swap(x,y);\n            write(calc(query(1,1,l,x,y))); putchar('\\n');\n        }\n    }\n    return 0;\n}\n  ```",
        "postTime": 1519624872,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u7ed9\u4e2a\u8be6\u7ec6\u70b9\u7684\u9898\u89e3\uff08\u8868\u793a\u697c\u4e0b\u7684\u6709\u70b9\u7b80\u5355\uff09\n\n\u3010\u9898\u76ee\u5927\u610f\u3011\n\n\u8272\u677f\u957f\u5ea6\u4e3aL\uff0cL\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5747\u5300\u5730\u5c06\u5b83\u5212\u5206\u6210L\u57571\u5398\u7c73\u957f\u7684\u5c0f\u65b9\u683c\u3002\u5e76\u4ece\u5de6\u5230\u53f3\u6807\u8bb0\u4e3a1, 2, ... L\u3002\u73b0\u5728\u8272\u677f\u4e0a\u53ea\u6709\u4e00\u4e2a\u989c\u8272\uff0c\u8001\u5e08\u544a\u8bc9\u963f\u5b9d\u5728\u8272\u677f\u4e0a\u53ea\u80fd\u505a\u4e24\u4ef6\u4e8b\uff1a1. \"C A B C\" \u6307\u5728A\u5230 B \u53f7\u65b9\u683c\u4e2d\u6d82\u4e0a\u989c\u8272C\u30022. \"P A B\" \u6307\u8001\u5e08\u7684\u63d0\u95ee\uff1aA\u5230B\u53f7\u65b9\u683c\u4e2d\u6709\u51e0\u79cd\u989c\u8272\u3002\u5b66\u6821\u7684\u989c\u6599\u76d2\u4e2d\u4e00\u5171\u6709 T \u79cd\u989c\u6599\u3002\u4e3a\u7b80\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u4ed6\u4eec\u6807\u8bb0\u4e3a1,2, ...T.\u5f00\u59cb\u65f6\u8272\u677f\u4e0a\u539f\u6709\u7684\u989c\u8272\u5c31\u4e3a1\u53f7\u8272\u3002\n\n\u3010\u7b97\u6cd5\u8ba8\u8bba\u3011\n\n\u8fd9\u9053\u9898\u8fd0\u7528\u7ebf\u6bb5\u6811\u6210\u6bb5\u66f4\u65b0\u7684\u7b97\u6cd5\u3002\u7528sum[i]\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u989c\u8272\u7684\u603b\u6570\uff1b\u7528color[i][1\u2026T]\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u91cc\u989c\u8272\u7684\u60c5\u51b5\uff0c\u5f53color[i][j]==true\u65f6\uff0c\u5219\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u4e2d\u6709j\u8fd9\u79cd\u989c\u8272\uff0c\u5f53color[i][j]==false\u65f6\uff0c\u5219\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u4e2d\u6ca1\u6709j\u8fd9\u79cd\u989c\u8272\uff1b\u7528col[i]\u8868\u793a\u7b2ci\u4e2a\u533a\u95f4\u662f\u5426\u6709\u8fdb\u884c\u8fc7\u66f4\u6539\u3002\n\n1\uff09\u5f53\u8bfb\u5165\u201cC A B C\u201d\u65f6\uff0c\u5219\u5c06\u533a\u95f4[A,B]\u4e2d\u7684sum\u8d4b\u503c\u4e3a1\uff08\u5373\u8be5\u533a\u95f4\u5171\u6709\u4e00\u79cd\u989c\u8272\uff09\uff0c\u628acolor\u8d4b\u503c\u6210false\uff08\u989c\u8272C\u9664\u5916\uff09\uff0c\u628acol\u8d4b\u503c\u6210C\uff08\u8868\u793a\u8be5\u533a\u95f4\u7684\u989c\u8272\u5747\u6539\u4e3aC\uff09\u3002\n\n2\uff09\u5f53\u8bfb\u5165\u201cP A B\u201d\u65f6\uff0c\u5219\u5c06\u533a\u95f4[A,B]\u4e2d\u7684\u989c\u8272\u8fdb\u884c\u6c47\u603b\uff0c\u8f93\u51fa\u989c\u8272\u7684\u603b\u6570\u3002\n\n\u5f97\u5206\uff1a100\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(MlogL)\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(L\\*12)\n\n\u3010C++\u4ee3\u7801\u3011\n\n```cpp\n\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cmath>\n#include<ctime>\n#include<cstring>\n#define maxn 100001\n#define lson l,mid,rt<<1\n#define rson mid+1,r,rt<<1|1\nusing namespace std;\nbool color[maxn<<2][31],query[31];\nint col[maxn<<2],sum[maxn<<2],n,t,m;\nvoid build(int l,int r,int rt)\n{\n    sum[rt]=1;\n    color[rt][1]=true;\n    if (l==r)return;\n    int mid=(l+r)>>1;\n    build(lson);\n    build(rson);\n}\nvoid pushup(int rt)\n{\n    sum[rt]=0;\n    for (int b=1;b<=t;++b)\n    {\n        color[rt][b]=false;\n        if (color[rt<<1][b] || color[rt<<1|1][b])\n        {\n            color[rt][b]=true;\n            sum[rt]++;\n        }\n    }\n}\nvoid pushdown(int rt)\n{\n    col[rt<<1]=col[rt<<1|1]=col[rt];\n    for (int b=1;b<=t;++b)color[rt<<1][b]=false;\n    color[rt<<1][col[rt]]=true;sum[rt<<1]=1;\n    for (int b=1;b<=t;++b)color[rt<<1|1][b]=false;\n    color[rt<<1|1][col[rt]]=true;sum[rt<<1|1]=1;\n    col[rt]=0;\n}\nvoid update(int l,int r,int rt,int i,int j,int k)\n{\n    \n    if (i<=l && r<=j)\n    {\n        col[rt]=k;\n        for (int b=1;b<=t;++b)color[rt][b]=false;\n        color[rt][k]=true;\n        sum[rt]=1;\n        return;\n    }\n    if (col[rt])pushdown(rt);\n    int mid=(l+r)>>1;\n    if (i<=mid)update(lson,i,j,k);\n    if (mid<j)update(rson,i,j,k);\n    pushup(rt);\n}\nvoid Query(int l,int r,int rt,int i,int j)\n{\n    if (i<=l && r<=j)\n    {\n        for (int b=1;b<=t;++b)if (color[rt][b])query[b]=true;\n        return;\n    }\n    if (col[rt])pushdown(rt);\n    int mid=(l+r)>>1;\n    if (i<=mid)Query(lson,i,j);\n    if (mid<j)Query(rson,i,j);\n}\nint main()\n{\n    scanf (\"%d%d%d\",&n,&t,&m);\n    build(1,n,1);\n    for (int b=1;b<=m;++b)\n    {\n        char c;\n        int i,j,k;\n        cin >>c;\n        if (c=='C')\n        {\n            scanf (\"%d%d%d\",&i,&j,&k);\n            if (i>j){int g=i;i=j;j=g;}\n            update(1,n,1,i,j,k);\n        }\n        else\n        {\n            scanf (\"%d%d\",&i,&j);\n            if (i>j){int g=i;i=j;j=g;}\n            Query(1,n,1,i,j);\n            int ans=0;\n            for (int b=1;b<=t;++b){ans+=query[b];query[b]=0;}\n            printf (\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1438008184,
        "uid": 171,
        "name": "Timothy",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "# Luogu 1558 \u8272\u677f\u6e38\u620f\n\n\u8fd9\u662f\u7ebf\u6bb5\u6811\u4e2d\u5f88\u57fa\u7840\u7684\u67d3\u8272\u95ee\u9898\uff0c\u50cf\u6211\u7b49(JuRuo)\u7b2c\u4e00\u79d2\u80af\u5b9a\u662f30\u68f5\u5927\u6811\u5efa\u597d\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\n\n~~\u8fd9\u6837\u65e2\u5feb\u901f\u53c8\u7b80\u6d01~~\n\n\u4f46\u662f\u8fd9\u597d\u50cf\u6ca1\u6709\u4e1d\u6beb\u4e50\u8da3\uff0c\u611f\u53d7\u4e0d\u5230\u84dd\u9898\u7684\u611f\u89c9\uff0c\u4e0d\u628a\u4e09\u5341\u68f5\u6811\u5408\u6210\u5c31\u4e0d\u723d\uff0c\u63a5\u4e0b\u6765\u63a5\u7740\u601d\u8003\u5982\u4f55\u4f18\u5316\u7a7a\u95f4(\u91cd\u70b9\uff09\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\n\u9898\u76ee\u4e2d\u6709\u8981\u6c42\u989c\u6599\u79cd\u7c7b$T$\u7684\u8303\u56f4\u5728$1-30$\u95f4\uff0c\u8981\u538b\u7a7a\u95f4\u7684\u8bdd\u5c31\u7528\u538b\u4f4d\n\n\u90a3\u4e48\u5c31\u82e5\u662f\u4e00\u4f4d\u4e00\u4e2a\u989c\u8272\uff0c\u90a3\u4e48\u4e00\u4e2a$int$\u521a\u597d\u591f\uff0c\u5c06\u4e8c\u8fdb\u5236\u4e0b\u7684\u7b2c$i$\u4f4d\u8868\u662f\u8be5\u7ebf\u6bb5\u4e2d\u662f\u5426\u5b58\u5728\u7b2c$i$\u4e2a\u989c\u8272\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u7ef4\u62a4\u7684\u95ee\u9898\u4e86\n\n$step \\ 1$ \u5efa\u6811\n\n\u628a\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u8d4b\u503c\u4e3a`1<<1`\uff0c\u8868\u793a\u5b58\u5728\u7b2c\u4e00\u79cd\u989c\u8272\n\n\u5c06`push_up`\u4e2d\u7684\u8fd0\u7b97\u7b26\u6539\u4e3a`or`\u6216\u662f`|`\n\n[\u4e0d\u4f1a\u4f4d\u8fd0\u7b97\u7684\u70b9\u8fd9\u91cc](https://www.cnblogs.com/flying_bat/archive/2008/06/17/1224178.html)\n\n$code$\n\n```cpp\ninline void push_up(int p) {\n\tt[p] = t[lc(p)] | t[rc(p)];\n}\ninline void build(int p,int l,int r) {\n\ttag[p] = 0;\n\tif(l == r) {\n\t\tt[p] = 1<<1;\n\t\treturn ;\n\t}\n\tint mid = (l+r)>>1;\n\tbuild(lc(p),l,mid);\n\tbuild(rc(p),mid+1,r);\n\tpush_up(p);\n}\n```\n\n$step \\ 2$ \u66f4\u65b0\n\n\u8bf4\u4e24\u4e2a\u6613\u9519\u70b9\n\n\u4e00\u3001\u56e0\u4e3a\u662f\u8986\u76d6\u989c\u8272\uff0c\u6240\u4ee5\u53ea\u8981\u5bf9`tag`\u6216\u8005\u8282\u70b9\u4e4b\u95f4\u8d4b\u503c\u5c31\u884c\u4e86\n\n\u4e8c\u3001`tag==0`\u65f6\u5343\u4e07\u4e0d\u8981`push_down`,\u4e0d\u7136\u4f60\u61c2\u7684\n\n$code$\n\n```cpp\ninline void f(int p,int k) {\n\ttag[p] = k;\n\tt[p] = k;\n}\ninline void push_down(int p) {\n\tif(!tag[p]) return ;\n\tf(lc(p),tag[p]);\n\tf(rc(p),tag[p]);\n\ttag[p] = 0;\n}\ninline void updata(int p,int l,int r,int x,int nl,int nr) {  //\u53d8\u91cf\u8bf4\u660e(\u4ece\u5de6\u5411\u53f3):\u73b0\u5728\u8282\u70b9\u7f16\u53f7 \u9700\u8981\u4fee\u6539\u7684\u5de6\u53f3\u7aef\u70b9 \u4fee\u6539\u540e\u7684\u989c\u8272 \u73b0\u5728\u7f16\u53f7\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\n\tif(nr<l||nl>r) return ;\n\tif(l<=nl&&nr<=r) {\n\t\tt[p] = (1<<x);\n\t\ttag[p] = (1<<x);\n\t\treturn ;\n\t}\n\tpush_down(p);\n\tint mid = (nl+nr)>>1;\n\tif(mid>=l) updata(lc(p),l,r,x,nl,mid);\n\tif(mid<r)  updata(rc(p),l,r,x,mid+1,nr);\n\tpush_up(p);\n}\n```\n\n$step\\ 3$ \u6c42\u503c\n\n\u8fd9\u91cc\u5c31\u6ca1\u4ec0\u4e48\u8981\u70b9\u4e86\uff0c\u6bd5\u7adf\u4e0a\u9762\u90fd\u63d0\u8fc7\u4e86\n\n$code$\n\n```cpp\ninline int query(int p,int l,int r,int nl,int nr) {  //\u53d8\u91cf\u7684\u542b\u4e49\u540c\u4e0a\n\tif(nr<l||nl>r) return 0;\n\tif(l<=nl&&nr<=r) return t[p];\n\tpush_down(p);\n\tint mid = (nl+nr)>>1;\n\tint ans = 0;\n\tif(mid>=l) ans |= query(lc(p),l,r,nl,mid);\n\tif(mid<r)  ans |= query(rc(p),l,r,mid+1,nr);\n\treturn ans;\n}\n```\n\n$step\\ 4$ \u5904\u7406\u6570\u636e\n\n\u672c(JuRuo)\u6709\u559c\u6b22\u8fd9\u79cd\u65b9\u5f0f\n\n`for(int i=n;i;i-=lowbit(i)) ans++;`\n\n\u5176\u4e2d`n`\u4e3a\u4ece\u7ebf\u6bb5\u6811\u4e2d\u6240\u53d6\u5f97\u7684\u7ed3\u679c\uff0c`ans`\u4e3a\u6700\u7ec8\u7b54\u6848\n\n\u4e0d\u77e5\u9053`lowbit`\u4ec0\u4e48\u610f\u601d\u7684\u8bf7\u53f3\u8f6cbaidu\n\n$step\\ 5$ \u7ec6\u8282\u5904\u7406\n\n\u76f4\u63a5\u5f15\u5165\u9898\u76ee\u539f\u8bdd\u5427`(\u8fd9\u91cc A, B, C \u4e3a\u6574\u6570, \u53ef\u80fdA> B\uff0c\u8fd9\u6837\u7684\u8bdd\u9700\u8981\u4f60\u4ea4\u6362A\u548cB)`",
        "postTime": 1578910011,
        "uid": 223884,
        "name": "AxDea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u95ee\u533a\u95f4\u91cc\u9762\u4e00\u5171\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002\n\u601d\u8def\uff1a\u5c31\u662f\u7528lzay\u6807\u8bb0\uff0c\u7136\u540e\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\u91cc\u6709\u51e0\u4e2a\u4e0d\u540c\u7684lazy\u6807\u8bb0\u3002\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u5b57\u6765\u8868\u793a\u67d0\u4e2a\u533a\u95f4\u7684\u72b6\u6001\uff0c\u548c\u6211\u4eec\u7528dp\u65f6\u5019\u7684\u72b6\u6001dp\u662f\u4e00\u6837\u7684\u3002\u5f97\u6ce8\u610f\u61d2\u4eba\u6807\u8bb0\u4ec0\u4e48\u65f6\u5019\u4e0b\u653e\u3002\u7b2c\u4e00\u70b9\uff1a\u6211\u4eec\u5728\u66f4\u65b0\u7684\u65f6\u5019\u9700\u8981\u4e0b\u653e\uff0c\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u5728\u67e5\u627e\u7684\u65f6\u5019\u4e5f\u9700\u8981\u4e0b\u653e\uff08\u5728\u8fd9\u91ccwrong\u4e86\u597d\u591a\u6b21\uff0c\u8fd8\u662f\u57fa\u7840\u4e0d\u624e\u5b9e\uff09\u3002\u5176\u4ed6\u7684\u4e5f\u6ca1\u4ec0\u4e48\u3002\u7ed9\u51fa\u4ee3\u7801\uff1b\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 100005\n#define maxnode 50010\n#define sigma_size 26\n#define md 1000000007\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long LL;\n\nstruct node\n{\n    int l,r;\n    LL laz,ss;\n}tr[MAXN<<2];\n\nlong long opop(int x)     //\u8f6c\u5316\u6210\u72b6\u6001\n{\n    long long temp=1;\n    for(int i=0;i<x;i++)\n    {\n        temp*=2;\n    }\n    return temp;\n}\n\n\nvoid build(int id,int l,int r)     //\u5efa\u6811\n{\n    tr[id].l=l,tr[id].r=r;\n    if(l==r)\n    {\n        tr[id].laz=1;\n        tr[id].ss=1;\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(id<<1,l,mid);\n    build(id<<1|1,mid+1,r);\n    tr[id].ss=(tr[id<<1].ss|tr[id<<1|1].ss);\n}\n\nvoid pushdown(int id)                       //\u5c06\u61d2\u4eba\u6807\u8bb0\u4e0b\u653e\uff0c\uff08\u6ce8\u610f\uff1a\u8981\u5224\u5b9a\u61d2\u4eba\u6807\u8bb0\u662f\u4e0d\u662f\u4e3a0\uff0c\u4e0d\u7136\u5c31\u9519\u4e86\uff09\n{\n    if(tr[id].laz)\n    {\n        tr[id<<1].laz=tr[id<<1|1].laz=tr[id].laz;\n        tr[id<<1].ss=tr[id<<1|1].ss=tr[id].laz;\n        tr[id].laz=0;\n    }\n}\n\nvoid update(int id,int l,int r,int val)   //\u5c06\u533a\u95f4l\u548cr\u7684\u503c\u6539\u4e3aval\n{\n    if(tr[id].l>=l&&tr[id].r<=r)\n    {\n        long long  ttmp=opop(val-1);\n        tr[id].laz=ttmp,tr[id].ss=ttmp;\n        return ;\n    }\n    pushdown(id);\n    int mid=(tr[id].l+tr[id].r)>>1;\n    if(l<=mid)\n        update(id<<1,l,r,val);\n    if(r>mid)\n        update(id<<1|1,l,r,val);\n    tr[id].ss=(tr[id<<1].ss|tr[id<<1|1].ss);\n}\n\nlong long query(int id,int l,int r)       //\u67e5\u8be2\u67d0\u4e2a\u533a\u95f4\u7684\u4e0d\u540c\u7684\u503c\u5f97\u4e2a\u6570\n{\n    if(tr[id].l>=l&&tr[id].r<=r)\n        return tr[id].ss;\n    pushdown(id);\n    int mid=(tr[id].l+tr[id].r)>>1;\n    long long ans=0;\n    if(r<=mid)\n       return query(id<<1,l,r);\n    else if(l>mid)\n        return query(id<<1|1,l,r);\n    else \n        return (query(id<<1,l,r)|query(id<<1|1,l,r));\n}\n\nvoid ssum(long long x)   //\u67e5\u8be2\u67d0\u4e2a\u72b6\u6001\uff0c\u770b\u8fd9\u4e2a\u72b6\u6001\u4e00\u5171\u6709\u51e0\u4e2a1\uff0c\u4e5f\u5c31\u662f\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u989c\u8272\n{\n    int res=0;\n    while(x)\n    {\n        if(x%2)\n            res++;\n        x/=2;\n    }\n   printf(\"%d\\n\",res);\n   return ;\n}\n\nint main()\n{\n    int n,t,o;\n    scanf(\"%d%d%d\",&n,&t,&o);\n    build(1,1,n);//\u5efa\u6811\u64cd\u4f5c\n    for(int i=0;i<o;i++){\n        char q[3];\n        cin>>q;\n        if(q[0]=='C'){\n            int u,v,w;\n            scanf(\"%d%d%d\",&u,&v,&w);\n            if(u>v){\n                int cc=u;\n                u=v;\n                v=cc;\n            }\n            update(1,u,v,w);//\u66f4\u65b0\u67d0\u4e2a\u533a\u95f4\n        }\n        else{\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            if(u>v){\n                int cc=u;\n                u=v;\n                v=cc;\n            }\n            long long ans=query(1,u,v);//\u8fd4\u56de\u67d0\u4e2a\u533a\u95f4\u7684\u72b6\u6001\n            ssum(ans);      //\u5c06\u67d0\u4e2a\u533a\u95f4\u72b6\u6001\u8f6c\u5316\u4e3a\u6570\u5b57\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u68c0\u67e51\u7684\u4e2a\u6570\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1575554267,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u6559\u7ec3\uff1a\u5b9e\u5728\u6ca1\u6709\u4ec0\u4e48\u4f18\u5316\uff0c\u7eaflazy\u6807\u8bb0 \u7ebf\u6bb5\u6811\u6a21\u677f\u3002\u3002\u8fd9\u4e1c\u897f\u968f\u624b\u5c31\u80fd\u6572\u51fa\u6765 \u6211\uff1a\uff1f\uff1f\uff1f\uff1f\uff1f@#\u2026\u2026#\uff01\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint l,r;\n\tint num;\n\tint lazy;\n}tree[1000100];\nint ls(int x)\n{\n\treturn x<<1;\n}\nint rs(int x)\n{\n\treturn x<<1|1;\n}\nvoid update(int index)\n{\n\ttree[index].num=tree[ls(index)].num|tree[rs(index)].num;\n}\nvoid pushdown(int index)\n{\n\tif (tree[index].lazy==0) return;\n\ttree[ls(index)].lazy=tree[index].lazy;\n\ttree[rs(index)].lazy=tree[index].lazy;\n\ttree[ls(index)].num=tree[index].lazy;\n\ttree[rs(index)].num=tree[index].lazy;\n\ttree[index].lazy=0;\n}\nvoid build(int l,int r,int index)\n{\n\ttree[index].l=l;\n\ttree[index].r=r;\n\ttree[index].num=2;\n\tif (l==r) \n\t{\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls(index));\n\tbuild(mid+1,r,rs(index));\n}//\u66f4\u65b0\u5efa\u6811\nvoid change(int l,int r,int x,int index)\n{\n\tint L=tree[index].l,R=tree[index].r;\n\tif (l<=L and R<=r)\n\t{\n\t\ttree[index].num=(1<<x);\n\t\ttree[index].lazy=(1<<x);\n\t\treturn;\n\t}\n\tif (L>r or l>R) return;\n\tpushdown(index);\n\tchange(l,r,x,ls(index));\n\tchange(l,r,x,rs(index));\n\tupdate(index); \n}//\u6a21\u677fupdate\nint ans=0;\nvoid ask(int l,int r,int index)\n{\n\tint L=tree[index].l,R=tree[index].r;\n\tif (l<=L and R<=r)\n\t{\n\t\tans|=tree[index].num;\n\t\treturn;\n\t}\n\tif (L>r or l>R) return;\n\tpushdown(index);\n\task(l,r,ls(index));\n\task(l,r,rs(index));\n}\nint n,T,m;\nint cnt_1(int x)\n{\n\tint tot=0;\n\twhile(x!=0)\n\t{\n\t\ttot+=x&1;\n\t\tx>>=1;\n\t}\n\treturn tot;\n} //\u9898\u610f\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&T,&m);\n\tbuild(1,n,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar t[5];\n\t\tscanf(\"%s\",t);\n\t\tif (t[0]=='C')\n\t\t{\n\t\t\tint l,r,x;\n\t\t\tscanf(\"%d%d%d\",&l,&r,&x);\n\t\t\tif (l>r) swap(l,r);\n\t\t\tchange(l,r,x,1);\n\t\t}\n\t\tif (t[0]=='P')\n\t\t{\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tif (l>r) swap(l,r);\n\t\t\tans=0;\n\t\t\task(l,r,1);\n\t\t\tprintf(\"%d\\n\",cnt_1(ans));\n\t\t}\n\t} \n}\n\n```",
        "postTime": 1542442349,
        "uid": 104458,
        "name": "\u6211\u5f88\u8fa3ji\u770b\u5934\u50cf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u5df2\u7ecf\u6709\u597d\u4e45\u6ca1\u53d1\u8fc7\u9898\u89e3\u4e86.....\n\n\n\u8fd9\u4e2a\u9898\u6211\u60f3\u7684\u5c31\u662f\u7ebf\u6bb5\u6811  \n\n\u81f3\u4e8e\u5927\u4f6c\u4eec\u7684\u4ec0\u4e48\u72b6\u6001\u538b\u7f29\u4e4b\u7c7b\u7684 \uff0c \u6211\u8fd9\u79cd\u849f\u84bb\u5f53\u7136\u662f\u4e0d\u4f1a\u7684\u3002\n\n\u6240\u4ee5\u5e72\u8106\u66b4\u529b\u4e00\u70b9 \uff1a \u5c31\u662f\u5bf9\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a30\u7684bool\u6570\u7ec4\uff08\u4ee5\u4e0b\u79f0\u4e3ac\u6570\u7ec4\uff09   \u7528\u6765\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u662f\u5426\u6709\u8fd9\u4e2a\u989c\u8272\uff081\u4e3a\u51fa\u73b0  0\u4e3a\u6ca1\u6709\uff09\n\n\u5199\u8d77\u6765\u4e5f\u5f88\u597d\u5199 \u6ce8\u610f\u4e00\u4e0b\u5728\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u5c06\u4e24\u4e2a\u533a\u95f4\u7684\u989c\u8272\u603b\u6570\u52a0\u8d77\u6765\uff0c\u56e0\u4e3a\u53ef\u80fd\u4e24\u4e2a\u533a\u95f4\u91cc\u6709\u540c\u4e00\u79cd\u989c\u8272\u3002\n\n\u540c\u65f6\u518d\u4fee\u6539\u7684\u65f6\u5019\u4e5f\u4e0d\u8981\u5fd8\u8bb0\u4e86\u5148\u5c06\u539f\u533a\u95f4\u7684c\u6570\u7ec4\u6e05\u96f6 \u518d\u6dfb\u52a0\u8bb0\u5f55\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define LL long long\n#define RE register\nusing namespace std ;\ninline int read() {\n    int x = 0,f = 1;char k = getchar() ;\n\twhile(k < '0'||k > '9') {if(k == '-') f = -1;k = getchar();}\n\twhile(k >= '0'&& k<= '9') {x = x * 10 + k - '0';k = getchar();}\n\treturn x * f;\n}\nconst int maxn = 100005 ;\nint n,m,Q,c[maxn],tnum = 1,ans ;\nstruct Tree {int lc,rc,sum,tag; bool c[35];}a[maxn << 1];\nbool col[35] ;\nvoid pushup(int u) {\n\tint sum = 0;\n\tfor(RE int i = 1;i <= m ;++i)\n\t    a[u].c[i] = 0;\n    for(RE int i = 1;i <= m ;++i)\n        if(a[a[u].lc].c[i] || a[a[u].rc].c[i])\n          a[u].c[i] = 1,sum++ ;\n    a[u].sum = sum ;\n}\nvoid build(int u,int l,int r) {\n    if(l == r) {a[u].c[1] = 1;a[u].sum = 1;return ;}\n    int mid = (l + r) >> 1;\n    a[u].lc = ++tnum;build(a[u].lc,l,mid) ;\n    a[u].rc = ++tnum;build(a[u].rc,mid+1,r) ;\n    pushup(u) ; \n}\nvoid pushdown(int u) {\n\tif(a[u].tag) {\n\t    a[a[u].lc].tag = a[u].tag ;\n\t    a[a[u].rc].tag = a[u].tag ;\n\t    a[a[u].lc].sum = 1;\n\t    a[a[u].rc].sum = 1;\n\t    for(RE int i = 1;i <= m ;++i) \n     \t    a[a[u].rc].c[i] = a[a[u].lc].c[i] = 0;\n\t    a[a[u].lc].c[a[u].tag] = a[a[u].rc].c[a[u].tag] = 1;\n\t}\n\ta[u].tag = 0;/* **************** */\n}\nvoid update(int u,int l,int r,int ll,int rr,int w) {\n    if(l == ll && r == rr) {\n\t    for(RE int i = 1;i <= m ;++i) a[u].c[i] = 0;\n\t    a[u].c[w] = 1;a[u].sum = 1;a[u].tag = w;return ;\n\t}\n\tint mid = (l + r) >> 1;\n\tpushdown(u) ;\n\tif(rr <= mid) update(a[u].lc,l,mid,ll,rr,w) ;\n\telse if(ll > mid) update(a[u].rc,mid+1,r,ll,rr,w) ;\n\telse {\n\t    update(a[u].lc,l,mid,ll,mid,w) ;\n\t    update(a[u].rc,mid+1,r,mid+1,rr,w) ;\n\t}\n\tpushup(u) ;\n}\nvoid query(int u,int l,int r,int ll,int rr) {\n    if(l == ll && r == rr) {\n    \tint sum = 0;\n\t    for(RE int i = 1;i <= m ;++i) \n\t       if(!col[i] && a[u].c[i]) ++sum,col[i] = 1 ;\n\t    ans += sum ;\n        return ;\n\t}\n    int mid = (l + r) >> 1;\n    pushdown(u) ;\n    if(rr <= mid) query(a[u].lc,l,mid,ll,rr) ;\n    else if(ll > mid) query(a[u].rc,mid+1,r,ll,rr) ;\n    else {\n\t    query(a[u].lc,l,mid,ll,mid) ;\n\t    query(a[u].rc,mid+1,r,mid+1,rr) ;\n\t}\n\tpushup(u) ;\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&Q) ;\n\tbuild(1,1,n) ;\n\twhile(Q--) {\n\t    char flag;cin >> flag; \n\t    int x,y;x = read();y = read() ;\n\t    if(x > y) swap(x,y) ;\n\t    if(flag == 'C') {\n\t\t    int w;w = read() ;\n\t\t    update(1,1,n,x,y,w) ;\n\t\t}\n\t\telse {\n\t\t    ans = 0;memset(col,0,sizeof(col)) ;\n\t\t    query(1,1,n,x,y) ;\n\t\t    printf(\"%d\\n\",ans) ;\n\t\t}\n\t}\n//\tcout << sizeof(a) / 1024 / 1024<<endl;\n    return 0;\n}\n```",
        "postTime": 1541418140,
        "uid": 88340,
        "name": "Tiffany_Tendering",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u597d\u4e45\u4e0d\u53d1\u9898\u89e3\u4e86\uff5e\uff5e\uff5e\n\n\u8fd9\u9898\u5176\u5b9e\u662f**\u7ebf\u6bb5\u6811**\u7684\u5927\u6c34\u9898\u554a\uff0c\u505a\u8fd9\u9898\u672c\u662f\u60f3\u8c03\u8282\u5fc3\u60c5\u7684\uff0c\u6ca1\u6599\u5230RE\u4e00\u5927\u5806\u3002\u3002\u3002\n\n**\u9898\u76ee\u6709\u5267\u6bd2\uff1a**\n\n**\u201c (\u8fd9\u91cc A, B, C \u4e3a\u6574\u6570, \u53ef\u80fdA>B) \u201d** \u5bfc\u81f4\u65e0\u9650RE\uff0c\u8fd8\u6709\u5c31\u662f\u6211\u7528\u4e86getchar\u7136\u540e\u7ee7\u7eed\u8c1c\u4e4bRE\u4e86\u3002\u3002\u3002\n\n\u4e0d\u8fc7\u5f97\u5230\u8fd9\u662fPOJ 2777 \u7684\u9898\uff0c\u53bb\u4ea4\u4e86\u4e00\u53d1\uff0c\u60ca\u559c\u7684AC\u4e86\uff0c\u4e8e\u662f\u6539\u4e86\u534a\u5929\uff0c\u628agetchar\u6362\u6210scanf\u5c31\u5728\u6d1b\u8c37\u4e5fAC\u4e86\u3002\u3002\u3002\n\n\u4e0b\u9762\u6765\u8bb2\u4e00\u4e0b**\u601d\u8def**\uff1a\n\n\u9996\u5148\u8fd9\u9898\u4e0e\u6700\u4f20\u7edf\u7ebf\u6bb5\u6811\u533a\u522b\u5728\u4e8e\uff1a**\u7edf\u8ba1\u533a\u95f4\u4e0d\u540c\u6570\u5b57\u4e2a\u6570**\u3002\u4e0d\u8fc7\u4f60\u53ef\u4ee5\u770b\u5230\u4fee\u6539\u7684\u989c\u8272\u662f**\u8fde\u7eed**\u7684\uff0c\u4e14**\u4e0d\u8d85\u8fc730**.\n\n\u8fd9\u5c31\u975e\u5e38\u597d\u529e\u4e86\uff0c\u76f4\u63a5**\u72b6\u6001\u538b\u7f29**\u8981\u4fee\u6539\u7684\u989c\u8272\u3002\u7136\u540e\u7ebf\u6bb5\u6811\u4e0a\u4f20\u7edf\u8ba1\u65f6\u628a\u5de6\u53f3\u5b69\u5b50**\u6309\u4f4d\u6216**\u8d77\u6765\u4fbf\u662f\u3002\n\n\u6700\u540e\u533a\u95f4\u7b54\u6848\u4e2d\u8f6c\u6210\u4e8c\u8fdb\u5236\u91cc**\u201c1\u201d\u7684\u4e2a\u6570**\u4fbf\u662f\u4e0d\u540c\u6570\u5b57\u4e2a\u6570\u3002\n\n**\u53e6\u5916\u610f\u5916\u7684\u662f\uff1a\u6211\u7684\u4ee3\u7801\u76ee\u6d4b\u6d1b\u8c37RK1\uff0c\u8dd1\u5f97\u98de\u5feb\uff01196MS.**\n\n**\u9644\u4ee3\u7801\uff1a**\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<fstream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<vector>\n#include<queue>\n#include<deque>\n#include<utility>\n#include<map>\n#include<set>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<functional>\n#include<sstream>\n#include<cstring>\n#include<bitset>\n#include<stack>\nusing namespace std;\nint n,k,q,x,y,z;\nchar c;\nint lef[400005],rig[400005],sum[400005],tag[400005];\nint read()\n{\n    int x=0;char c=getchar();\n    while(c<48||c>57)c=getchar();\n    while(c>47&&c<58)x*=10,x+=c-48,c=getchar();\n    return x;\n}\nvoid build(int p,int l,int r)\n{\n    tag[p]=-1;\n    lef[p]=l;\n    rig[p]=r;\n    if(l==r)\n    {\n        sum[p]=1;\n        return ;\n    }\n    int mid=(l+r)>>1;\n    build(p<<1,l,mid);\n    build(p<<1|1,mid+1,r);\n    sum[p]=sum[p<<1]|sum[p<<1|1];\n}\nvoid push_down(int p)\n{\n    if(tag[p]==-1)return ;\n    tag[p<<1]=tag[p];sum[p<<1]=tag[p];\n    tag[p<<1|1]=tag[p];sum[p<<1|1]=tag[p];\n    tag[p]=-1;\n}\nvoid modify(int p,int l,int r,int x)\n{\n    if(l==lef[p] && r==rig[p])\n    {\n        tag[p]=x;\n        sum[p]=x;\n        return ;\n    }\n    push_down(p);\n    int mid=(lef[p]+rig[p])>>1;\n    if(r<=mid)modify(p<<1,l,r,x);\n    else if(l>mid)modify(p<<1|1,l,r,x);\n    else \n    {\n        modify(p<<1,l,mid,x);\n        modify(p<<1|1,mid+1,r,x);\n    }\n    sum[p]=sum[p<<1]|sum[p<<1|1];\n}\nint query(int p,int l,int r)\n{\n    if(l==lef[p] && rig[p]==r)return sum[p];\n    push_down(p);\n    int mid=(lef[p]+rig[p])>>1,v;\n    if(r<=mid)v=query(p<<1,l,r);\n    else if(l>mid)v=query(p<<1|1,l,r);\n    else v=query(p<<1,l,mid)|query(p<<1|1,mid+1,r);\n    sum[p]=sum[p<<1]|sum[p<<1|1];\n    return v;\n}\nint main()\n{\n    n=read();k=read();q=read();\n    build(1,1,n);\n    for(int i=1;i<=q;i++)\n    {\n        scanf(\"%s\",&c);\n        if(c=='C')\n        {\n            x=read();y=read();z=read();\n            if(x>y)swap(x,y);\n            modify(1,x,y,1<<(z-1));\n        }\n        else\n        {\n            x=read();y=read();\n            if(x>y)swap(x,y);\n            int v=query(1,x,y);\n            int ans=0;\n            while(v)\n            {\n                ans+=v&1;\n                v>>=1;\n            }\n            printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\nhttp://0x9.me/eqdMy\n```",
        "postTime": 1502266016,
        "uid": 16817,
        "name": "winmt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u96be\u5c31\u662f\u6709\u5751\uff0cre\u7684\u4f60\u81ea\u5df1\u4ed4\u7ec6\u770b\u6570\u636e\u8303\u56f4a\u53ef\u4ee5\u5c0f\u4e8eb\u4e5f\u5c31\u662f\u8bf4\u8303\u56f4\u8981\u6539\u3002\u518d\u4e00\u4e2a\u5c31\u662f\u6570\u7ec4\u8303\u56f4\u5c3d\u91cf\u5927\u4e9b\u3002\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u672c\u4eba\u83dc\uff0c\u8bed\u8a00\u8868\u8fbe\u4e0d\u597d\u5927\u6982\u5c31\u8fd9\u6837\u5b50\u4e86\u3002\n\nac\u4ee3\u7801#include<iostream>\n\n     \n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstruct tree{\n    int z;\n    int y;\n    int mark;\n    int ys[35];\n};\ntree xd[100010];\nint js[35];\nint ls,t,cz;\nvoid bd(int node,int r,int l)\n{\n    int m;\n    xd[node].ys[1]=1;\n    xd[node].z=r;\n    xd[node].y=l;\n    if(r==l) return;\n    int mid=(r+l)/2;\n    bd(node*2,r,mid);\n    bd(node*2+1,mid+1,l);\n}\nvoid cg(int node,int r,int l,int va)\n{\n    if(xd[node].z==r&&xd[node].y==l)\n    {\n    xd[node].mark=va;\n    for(int i=1;i<=t;i++)\n    xd[node].ys[i]=0;\n    xd[node].ys[va]=1;\n    return;\n    }\n    int mid=(xd[node].z+xd[node].y)/2;\n    if(xd[node].mark!=0)\n    {\n    for(int i=1;i<=t;i++)\n    {\n    xd[2*node].ys[i]=0;\n    xd[2*node+1].ys[i]=0;\n    }\n    xd[2*node].ys[xd[node].mark]=1;\n    xd[2*node+1].ys[xd[node].mark]=1;\n    xd[2*node].mark=xd[node].mark;\n    xd[2*node+1].mark=xd[node].mark;\n    xd[node].mark=0;\n    }\n    if(xd[node].z<=r&&l<=mid)\n    {\n    cg(node*2,r,l,va);\n    for(int i=1;i<=t;i++)\n    {\n       xd[node].ys[i]=0;\n       if(xd[2*node].ys[i]||xd[2*node+1].ys[i])\n       xd[node].ys[i]=1;\n    }\n    }\n    else\n    if(r>=mid+1&&xd[node].y>=l)\n    {\n     cg(node*2+1,r,l,va);\n     for(int i=1;i<=t;i++)\n    {\n       xd[node].ys[i]=0;\n       if(xd[2*node].ys[i]||xd[2*node+1].ys[i])\n       xd[node].ys[i]=1;\n    }\n    }\n else\n    {\n    cg(node*2,r,mid,va);\n    cg(node*2+1,mid+1,l,va);\n    for(int i=1;i<=t;i++)\n    {\n       xd[node].ys[i]=0;\n       if(xd[2*node].ys[i]||xd[2*node+1].ys[i])\n       {\n       xd[node].ys[i]=1;\n    }\n    }\n    }\n}\nvoid fd(int node,int r,int l)\n{\n    if(xd[node].mark!=0)\n    {\n    js[xd[node].mark]=1;\n    return;\n    }\n if(xd[node].z==r&&xd[node].y==l)\n   {\n     for(int i=1;i<=t;i++)\n     if(xd[node].ys[i])\n     js[i]=1;\n     return;\n   }\n     else\n {\n    int mid=(xd[node].z+xd[node].y)/2;\n    if(xd[node].z<=r&&l<=mid)\n    {\n    fd(node*2,r,l);\n    }\n    else\n    if(r>=mid+1&&xd[node].y>=l)\n    fd(node*2+1,r,l);\n    else\n    {\n    fd(node*2,r,mid);\n    fd(node*2+1,mid+1,l);\n    }\n}\n}\nint main()\n{\n    char a;\n    int b,c,d;\n    scanf(\"%d %d %d\",&ls,&t,&cz);\n    bd(1,1,ls);\n    for(int j=1;j<=cz;j++)\n    {\n    scanf(\"%s\",&a);\n    if(a=='C')\n    {\n    scanf(\"%d %d %d\",&b,&c,&d);\n        if(b<=c)\n        {\n        cg(1,b,c,d);\n        }\n        else\n        {\n      cg(1,c,b,d);\n          }\n    }\n    else\n    {\n        scanf(\"%d %d\",&b,&c);\n        for(int i=1;i<=t;i++)\n        js[i]=0;\n        if(b<=c)\n        fd(1,b,c);\n        else\n        fd(1,c,b);\n        int sum=0;\n        for(int i=1;i<=t;i++)\n        {\n            if(js[i])\n            {\n            sum++;\n            }\n        }\n        cout<<sum<<\"\\n\";\n       }\n    }\n    return 0;\n}\n```",
        "postTime": 1491733726,
        "uid": 37146,
        "name": "mochenbo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1558 \u3010\u8272\u677f\u6e38\u620f\u3011"
    }
]