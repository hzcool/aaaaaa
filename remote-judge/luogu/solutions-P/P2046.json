[
    {
        "content": "\u672c\u6587\u4ec5\u7528\u4e8e\u8865\u5145\u5176\u4ed6\u9898\u89e3\u3002\u5176\u4ed6\u9898\u89e3\u672a\u8be6\u7ec6\u8bf4\u660e\u7ed3\u8bba\u300c\u5b58\u5728\u81f3\u5c11\u4e00\u7ec4\u6700\u4f18\u65b9\u6848\u4f7f\u5f97\u6bcf\u4e2a\u4ea4\u53c9\u8def\u53e3\u6d77\u62d4\u90fd\u4e3a $0$ \u6216 $1$\uff0c\u4e14\u6d77\u62d4\u90fd\u4e3a $0$ \u548c $1$ \u7684\u4ea4\u53c9\u8def\u53e3\u5206\u522b\u4ec5\u6784\u6210\u4e00\u4e2a\u6781\u5927\u56db\u8fde\u901a\u5757\u300d\uff0c\u672c\u6587\u4e88\u4ee5\u7b80\u8981\u8bc1\u660e\u3002\u672c\u6587\u7531\u8ba8\u8bba\u4e2d\u5355\u72ec\u63d0\u51fa\uff0c\u5e94@yurzhang \u8981\u6c42\u63d0\u4ea4\u4e3a\u9898\u89e3\uff08\u8be6\u89c1\u539f\u8ba8\u8bba[\u6b64\u9898\u9898\u89e3\u5b58\u5728\u5171\u540c\u95ee\u9898](/discuss/411844)\uff09\u3002\n\n---\n\n\u4e0b\u6587\u300c\u8fde\u901a\u5757\u300d\u6307\u300c\u5185\u90e8\u70b9\u9ad8\u5ea6\u76f8\u540c\u7684\u6781\u5927\u56db\u8fde\u901a\u5757\u300d\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65b9\u6848\uff0c\u82e5\u5b58\u5728\u9ad8\u5ea6\u5c0f\u4e8e $0$ \u7684\u70b9\uff0c\u5219\u4ee4\u6240\u6709\u8fd9\u4e9b\u70b9\u7684\u9ad8\u5ea6\u4e3a $0$ \u66f4\u4f18\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u4e4b\u95f4\u7684\u8d21\u732e\u51cf\u5c0f\u4e3a $0$\uff0c\u800c\u5176\u4ed6\u70b9\u7684\u9ad8\u5ea6\u65e0\u8bba\u5728\u8c03\u6574\u524d\u540e\u90fd\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e9b\u70b9\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u70b9\u4e0e\u5176\u4ed6\u70b9\u7684\u8d21\u732e\u4e00\u5b9a\u51cf\u5c0f\u4e86\u3002\u540c\u7406\u82e5\u5b58\u5728\u9ad8\u5ea6\u5927\u4e8e $1$ \u7684\u70b9\uff0c\u5219\u4ee4\u6240\u6709\u8fd9\u4e9b\u70b9\u7684\u9ad8\u5ea6\u4e3a $1$ \u66f4\u4f18\u3002\n\n\u73b0\u5728\u6bcf\u4e2a\u70b9\u9ad8\u5ea6\u5728 $[0,1]$ \u533a\u95f4\u5185\uff0c\u5047\u8bbe\u5176\u4e0d\u5168\u4e3a $0$ \u6216 $1$\u3002\u5bf9\u4e8e\u6240\u6709\u4e0d\u5305\u542b\u897f\u5317\u89d2\u7684\u8fde\u901a\u5757\uff0c\u627e\u5230\u9ad8\u5ea6\u6700\u5c0f\u7684\u4e00\u4e2a\uff08\u79f0\u4e3a $S$\uff09\uff0c\u8fd9\u4e2a\u8fde\u901a\u5757\u4e00\u5b9a\u5b58\u5728\u4e14\u4e0d\u5305\u542b\u4e1c\u5357\u89d2\u3002\n\n- \u82e5 $S$ \u4e0d\u4e0e\u897f\u5317\u89d2\u6240\u5728\u7684\u8fde\u901a\u5757\u76f8\u90bb\uff0c\u5219\u5c06\u5176\u9ad8\u5ea6\u8c03\u6574\u4e3a\u4e0e\u5176\u76f8\u90bb\u7684\u70b9\u4e2d\u7684\u6700\u5c0f\u9ad8\u5ea6\u4e00\u5b9a\u66f4\u4f18\uff0c\u56e0\u4e3a $S$ \u5185\u70b9\u4e4b\u95f4\u7684\u8d21\u732e\u4e0d\u53d8\u4e3a $0$\uff0c\u800c\u76f8\u90bb\u70b9\u7684\u9ad8\u5ea6\u65e0\u8bba\u5728\u8c03\u6574\u524d\u540e\u90fd\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e9b\u70b9\u7684\uff0c\u6240\u4ee5 $S$ \u5185\u7684\u70b9\u4e0e\u5176\u76f8\u90bb\u70b9\u7684\u8d21\u732e\u4e00\u5b9a\u51cf\u5c0f\u4e86\u3002\n- \u82e5 $S$ \u4e0e\u897f\u5317\u89d2\u6240\u5728\u7684\u8fde\u901a\u5757\u76f8\u90bb\uff0c\u5219\u627e\u5230\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u4e2d\u9ad8\u5ea6\u4e0d\u4e3a $0$ \u4e14\u6700\u5c0f\u7684\uff08\u5047\u8bbe\u9ad8\u5ea6\u4e3a $h$\uff09\uff0c$S$ \u7684\u9ad8\u5ea6\u4e00\u5b9a\u5728 $0$ \u4e0e $h$ \u4e4b\u95f4\u3002\u5982\u679c\u5c06 $S$ \u7684\u9ad8\u5ea6\u770b\u4f5c\u81ea\u53d8\u91cf $x\\in[0,h]$\uff0c\u90a3\u4e48\u4ee4 $x=0$ \u6216 $x=h$ \u4e00\u5b9a\u4e0d\u66f4\u52a3\uff0c\u56e0\u4e3a $S$ \u5185\u70b9\u4e4b\u95f4\u7684\u8d21\u732e\u4e0d\u53d8\u4e3a $0$\uff0c\u800c $S$ \u5185\u7684\u70b9\u4e0e\u5176\u76f8\u90bb\u70b9\u7684\u8d21\u732e\u662f\u7ebf\u6027\u51fd\u6570\uff0c\u6700\u5c0f\u503c\u4e00\u5b9a\u80fd\u5728\u4e24\u7aef\u53d6\u5230\u3002\n\n\u65e0\u8bba\u662f\u54ea\u79cd\u60c5\u51b5\uff0c\u90fd\u5b58\u5728\u4e00\u79cd\u4e0d\u66f4\u52a3\u7684\u3001\u8fde\u901a\u5757\u66f4\u5c11\u7684\u65b9\u6848\u3002\u4e0d\u65ad\u8fdb\u884c\u8c03\u6574\uff0c\u6700\u7ec8\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\u4e00\u5b9a\u4f1a\u505c\u4e8e $0$ \u6216 $1$\u3002\u4ece\u800c\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u7ec4\u6700\u4f18\u65b9\u6848\u4f7f\u5f97\u70b9\u7684\u9ad8\u5ea6\u90fd\u4e3a $0$ \u6216 $1$\u3002",
        "postTime": 1645428235,
        "uid": 55251,
        "name": "Daniel13265",
        "ccfLevel": 10,
        "title": "\u5173\u952e\u7ed3\u8bba\u8bc1\u660e P2046 \u3010[NOI2010] \u6d77\u62d4\u3011"
    },
    {
        "content": "\u9996\u5148\u8fdb\u884c\u8d2a\u5fc3\uff0c\u53d1\u73b0\u6d77\u62d4\u6709\u68af\u5ea6\u65f6\u4e00\u5b9a\u662f\u4e0d\u4f18\u7684\uff0c\u6700\u4f18\u7684\u60c5\u51b5\u662f\u6d77\u62d4\u50cf\u65ad\u5d16\u4e00\u6837\u4e0a\u5347\uff0c\u4e5f\u5c31\u662f\u5de6\u4e0a\u89d2\u6709\u4e00\u7247\u6d77\u62d4\u9ad8\u5ea6\u4e3a$0$\uff0c\u53f3\u4e0b\u89d2\u6709\u4e00\u7247\u6d77\u62d4\u9ad8\u5ea6\u4e3a$1$\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u7684\u6027\u8d28\u540e\uff0c\u4e0d\u96be\u60f3\u5230\u7528\u6700\u5c0f\u5272\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u6570\u636e\u89c4\u6a21\u8fc7\u5927\uff0c\u9700\u8981\u8fdb\u884c\u4f18\u5316\u3002\n\n\u8003\u8651\u5230\u7f51\u683c\u56fe\u662f\u7279\u6b8a\u7684\u5e73\u9762\u56fe\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u5e73\u9762\u56fe\u8f6c\u5316\u4e3a\u5bf9\u5076\u56fe\uff0c\u901a\u8fc7\u5bf9\u5076\u56fe\u6c42\u6700\u77ed\u8def\u6765\u6c42\u5e73\u9762\u56fe\u7684\u6700\u5c0f\u5272\u3002\n\n\u4e0b\u9762\u5206\u6790\u5982\u4f55\u8f6c\u5316\u4e3a\u5bf9\u5076\u56fe\uff1a\n\n\u6211\u7684\u505a\u6cd5\u662f\u5148$n++$\uff0c\u4f7f$n\u00d7n$\u4e2a\u533a\u57df\u8f6c\u5316\u4e3a$n\u00d7n$\u4e2a\u70b9\u3002\n\n![](https://s2.ax1x.com/2019/12/24/lPwO6x.png)\n\n\u4e00\u4e2a\u533a\u57df\u7528\u5176\u5de6\u4e0a\u89d2\u70b9\u7684\u5750\u6807\u6765\u8868\u793a\u3002\uff08\u56fe\u4e2d\u7684\u7ea2\u70b9\uff09\n\n\u5e73\u9762\u56fe\u4e2d\u7684\u6709\u5411\u8fb9\u987a\u65f6\u9488\u65cb\u8f6c$90\u00b0$\u540e\u4f5c\u4e3a\u5bf9\u5076\u56fe\u4e2d\u7684\u8fb9\uff0c\u4f8b\u5982\u5f53\u539f\u56fe\u7684\u6709\u5411\u8fb9\u4e3a\u81ea\u897f\u5411\u4e1c\uff08\u4ece\u5de6\u5230\u53f3\uff09\u65f6\uff0c\u8fde\u8fb9\u60c5\u51b5\u5e94\u4e3a\uff1a\n\n![](https://s2.ax1x.com/2019/12/24/lPDeYQ.png)\n\n\u9ec4\u8272\u7bad\u5934\u8868\u793a\u539f\u5e73\u9762\u56fe\u4e2d\u7684\u8fb9\uff0c\u84dd\u8272\u7bad\u5934\u8868\u793a\u5bf9\u5076\u56fe\u4e2d\u7684\u8fb9\uff0c\u5176\u4ed6\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002\n\n\u5efa\u5b8c\u5bf9\u5076\u56fe\u540e\uff0c\u4ece$S$\u5230$T$\u7684\u6700\u77ed\u8def\u5373\u4e3a\u7b54\u6848\u3002\n\n\u5b9e\u73b0\u7ec6\u8282\u5c31\u770b\u4ee3\u7801\u5427\n\n$code:$\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1200000\n#define inf 2000000000\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag) x=-x;\n}\nint n,s,t;\nstruct edge\n{\n    int to,nxt,v;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to,int val)\n{\n    e[++edge_cnt]=(edge){to,head[from],val};\n    head[from]=edge_cnt;\n}\nint num(int x,int y)\n{\n\treturn y+(x-1)*n;\n}\nstruct node\n{\n    int val,num;\n    friend bool operator <(const node &x,const node &y)\n    {\n        return x.val>y.val;\n    }\n};  \npriority_queue<node> q;\nint dis[maxn];\nbool vis[maxn];\nvoid dijkstra()\n{\n    for(int i=s;i<=t;++i) dis[i]=inf;\n    dis[s]=0;\n    q.push((node){0,s});\n    while(!q.empty())\n    {\n        node tmp=q.top();\n        q.pop();\n        int x=tmp.num;\n        if(vis[x]) continue;\n        vis[x]=true;\n        for(int i=head[x];i;i=e[i].nxt)\n        {\n            int y=e[i].to,v=e[i].v;\n            if(dis[y]>dis[x]+v)\n            {\n                dis[y]=dis[x]+v;\n                q.push((node){dis[y],y});\n            }\n        }\n    }\n}\nint main()\n{\n\tread(n),n++;\n    t=n*n+1;\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<n;++j)\n        {\n            int val;\n            read(val);\n            if(i==1) add(s,num(i,j),val);\n            else if(i==n) add(num(i-1,j),t,val);\n            else add(num(i-1,j),num(i,j),val);\n        }\n    }\n    for(int i=1;i<n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int val;\n            read(val);\n            if(j==1) add(num(i,j),t,val);\n            else if(j==n) add(s,num(i,j-1),val);\n            else add(num(i,j),num(i,j-1),val);\n        }\n    }\n    for(int i=1;i<=n;++i)\n    {\n        for(int j=1;j<n;++j)\n        {\n            int val;\n            read(val);\n            if(i==1) add(num(i,j),s,val);\n            else if(i==n) add(t,num(i-1,j),val);\n            else add(num(i,j),num(i-1,j),val);\n        }\n    }\n    for(int i=1;i<n;++i)\n    {\n        for(int j=1;j<=n;++j)\n        {\n            int val;\n            read(val);\n            if(j==1) add(t,num(i,j),val);\n            else if(j==n) add(num(i,j-1),s,val);\n            else add(num(i,j-1),num(i,j),val);\n        }\n    }\n    dijkstra();\n    printf(\"%d\",dis[t]);\n\treturn 0;\n}\n```\n",
        "postTime": 1577194222,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2046 \u3010[NOI2010]\u6d77\u62d4\u3011"
    },
    {
        "content": "\u7adf\u7136\u6ca1\u6709\u9898\u89e3\u2026\u2026\n\n\n\u663e\u7136\uff08\u62b1\u6b49\uff09\uff0cH\u4e0d\u53ef\u80fd\u662f\u5c0f\u6570\uff0c\u4e00\u5b9a\u662f0\u62161\uff0c\u800c\u4e140\u548c1\u4e00\u5b9a\u5404\u81ea\u8054\u901a\n\n\n\u4ece\u6837\u4f8b\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u5272->\u6700\u5927\u6d41->\u6700\u77ed\u8def \uff08\u5e73\u9762\u56fe\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41\u7b49\u4e8e\u5bf9\u5076\u56fe\u7684\u6700\u77ed\u8def\uff09\n\n![](http://t.williamgates.net/image-7CDE\\_5322E041.gif)\n\n\uff08\u4ee5\u4e0a\u56fe\u7247\u6765\u81ea\u7f51\u7edc\uff09\n\n\n\u7136\u540e\u5c31\u662f\u4e86\uff0c\u5bf9\u5076\u56fe\u5efa\u51fa\u6765\uff0c\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u3002\u672c\u4eba\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\u539f\u56fe\u5de6\u4e0a\u89d2\u662f\uff081\uff0c1\uff09\uff0c\u5bf9\u5076\u56fe\u5de6\u4e0a\u89d2\u662f\uff081\uff0c1\uff09\uff0c\u5bf9\u5076\u56fe\u6700\u5c0f\u6807\u53f7\u662f0\uff0c\u5750\u6807\u5230\u5bf9\u5076\u56fe\u70b9\u53f7\u7684\u8f6c\u6362\uff1a\n\n\n\n#define P(x,y) (~-(x)\\*N+~-(y))\n\n\u672c\u4eba\u4ee3\u7801\u5e76\u6ca1\u6709\u5efa\u539f\u56fe\uff0c\u76f4\u63a5\u5efa\u7acb\u5bf9\u5076\u56fe\uff0c\u539f\u56fe\u548c\u5bf9\u5076\u56fe\u7684\u5750\u6807\u8f6c\u6362\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n\u5bf9\u4e86\uff0c\u65b9\u5411\u771f\u7684\u7279\u522b\u4e71\uff01**\u8fb9\u90fd\u662f\u5148\u4ece\u5de6\u5230\u53f3\u540e\u4ece\u4e0a\u5230\u4e0b\u7684\uff01\u662f\u7684\uff01\u6211\u6ca1\u6253\u9519\uff01\u8fb9\u90fd\u662f\u5148\u4ece\u5de6\u5230\u53f3\u540e\u4ece\u4e0a\u5230\u4e0b\u7684\uff01**\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 300000\n#define MAXM 2000000\n#define MEMINF 0x3f\n#define ll long long\n#define P(x,y) (~-(x)*N+~-(y))\nstruct Edge\n{\n    int to,nex,w;\n    Edge(){}\n    Edge(int _to, int _nex, int _w):to(_to),nex(_nex),w(_w){}    \n};\nEdge e[MAXM+5];\nint first[MAXN+5], q[MAXN+5], tot, n, v, N, S, T;\nll dis[MAXN+5]; \nbool book[MAXN+5];\nvoid Add(int a, int b, int w)\n{\n    e[tot] = Edge(b,first[a],w);\n    first[a] = tot++;\n    return;\n}\nvoid SPFA()\n{\n    memset(dis,MEMINF,sizeof(dis));\n    q[0] = S, dis[S] = 0, book[S] = true;\n    for(register int head = 0, tail = 1, u, t; head != tail; book[t] = false) \n        for(t = q[head++], head %= MAXN, u = first[t]; u+1; u = e[u].nex)\n            if(dis[e[u].to] > dis[t] + e[u].w)\n            {\n                dis[e[u].to] = dis[t] + e[u].w;\n                if(!book[e[u].to])\n                    book[e[u].to] = true, q[tail++] = e[u].to, tail %= MAXN; \n            }\n    return;\n}\nint main()\n{\n    scanf(\"%d\",&n), n++, N = -~n, S = P(1,N), T = P(N,1);\n    memset(first,-1,sizeof(first));\n    //x'(/N) = x(/n), y'(modN) = y(modn)\n    //(x,y)->(x,y+1)    ==>        (x',y'+1)->(x'+1,y'+1)\n    for(register int x = 1, y = 1, nx, ny; x <= n; y = y%(n-1)+1, x += (y==1))\n        scanf(\"%d\",&v), Add(P(x,y+1),P(x+1,y+1),v); \n    //(x,y)->(x+1,y)    ==>        (x'+1,y'+1)->(x'+1,y')\n    for(register int x = 1, y = 1, nx, ny; x < n; y = y%n+1, x += (y==1))\n        scanf(\"%d\",&v), Add(P(x+1,y+1),P(x+1,y),v); \n    //(x,y)->(x,y-1)    ==>        (x'+1,y')->(x',y')\n    for(register int x = 1, y = 2, nx, ny; x <= n; y = y%n+1, x += (y==1), y += (y==1))\n        scanf(\"%d\",&v), Add(P(x+1,y),P(x,y),v); \n    //(x,y)->(x-1,y)    ==>        (x',y')->(x',y'+1)\n    for(register int x = 2, y = 1, nx, ny; x <= n; y = y%n+1, x += (y==1))\n        scanf(\"%d\",&v), Add(P(x,y),P(x,y+1),v); \n    for(register int i = 2; i < N; i++)\n        Add(S,P(1,i),0), Add(S,P(i,N),0), Add(P(i,1),T,0), Add(P(N,i),T,0);\n    SPFA(), printf(\"%lld\\n\",dis[T]);\n     return 0;\n}\n\n```",
        "postTime": 1485248335,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2046 \u3010\u6d77\u62d4\u3011"
    },
    {
        "content": "\u5728 [\u535a\u5ba2\u56ed\u98df\u7528](https://www.cnblogs.com/2020gyk080/p/solution-luogu-p2046.html) \u4ee5\u83b7\u53d6\u66f4\u597d\u7684\u4f53\u9a8c\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- SPFA\n- \u7f51\u7edc\u6d41\n- \u5e73\u9762\u56fe\u8f6c\u5bf9\u5076\u56fe\n\n## \u5206\u6790\n\n\u5c1d\u8bd5\u8d2a\u5fc3\u4e4b\u540e\u53d1\u73b0\uff0c\u53ef\u4ee5\u7528\u6700\u5c0f\u5272\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u7136\u800c\u76f4\u63a5\u5957\u7528\u7ecf\u5178\u7b97\u6cd5\u53d1\u73b0\uff1aTLE\uff01\n\n### \u6700\u5927\u6d41\u2014\u6700\u5c0f\u5272\u5b9a\u7406\n\n> \u5b9a\u7406\uff1a\u5728\u4e00\u4e2a\u7f51\u7edc\u6d41\u4e2d\uff0c\u80fd\u591f\u4ece\u6e90\u70b9\u5230\u8fbe\u6c47\u70b9\u7684\u6700\u5927\u6d41\u91cf\u7b49\u4e8e\u5982\u679c\u4ece\u7f51\u7edc\u4e2d\u79fb\u9664\u5c31\u80fd\u591f\u5bfc\u81f4\u7f51\u7edc\u6d41\u4e2d\u65ad\u7684\u8fb9\u7684\u96c6\u5408\u7684\u6700\u5c0f\u5bb9\u91cf\u548c\u3002\u5373\u5728\u4efb\u4f55\u7f51\u7edc\u4e2d\uff0c\u6700\u5927\u6d41\u7684\u503c\u7b49\u4e8e\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u3002\n\n### \u8bc1\u660e\n\n\u5b9a\u4e49 $s-t$ \u5e73\u9762\u56fe\u4e3a\u6e90\u70b9 $s$ \u548c\u6c47\u70b9 $t$ \u90fd\u5728\u56fe\u4e2d\u65e0\u754c\u9762\u7684\u8fb9\u754c\u4e0a\u3002\n\n\u5df2\u77e5\u5e73\u9762\u56fe\u7684\u6027\u8d28\u6709\uff1a\n\n1. \u6b27\u62c9\u516c\u5f0f\uff0c\u4e00\u4e2a\u8fde\u901a\u7684\u5e73\u9762\u56fe\u6709 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u548c $f$ \u4e2a\u9762\uff0c\u5219 $f=m-n+2$\u3002\n2. \u6bcf\u4e2a\u5e73\u9762\u56fe $\\text{G}$ \u90fd\u6709\u4e0e\u5176\u5bf9\u5076\u7684\u5e73\u9762\u56fe $\\text{G*}$\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e $\\text{G}$ \u4e2d\u7684\u6bcf\u6761\u8fb9 $e$\uff0c\u82e5\u5b83\u5c5e\u4e8e\u4e24\u4e2a\u9762 $f_1,f_2$\uff0c\u5219\u52a0\u5165\u8fb9 $\\operatorname{edge}(f_1^*,f_2^*)$\uff1b\n\n![\u5bf9\u5076\u56fe1](https://cdn.luogu.com.cn/upload/image_hosting/x37mt59x.png)\n\n\u82e5\u5b83\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u9762 $f$\uff0c\u52a0\u5165\u56de\u8fb9 $\\operatorname{edge}(f^*,f^*)$\u3002\n\n![\u5bf9\u5076\u56fe2](https://cdn.luogu.com.cn/upload/image_hosting/hfxc98n7.png)\n\n\u5e73\u9762\u56fe $\\text{G}$ \u4e0e\u5176\u5bf9\u5076\u56fe $\\text{G*}$ \u6709\u5982\u4e0b\u5173\u7cfb\uff1a\n \n- $\\text{G}$ \u7684\u9762\u6570\u7b49\u4e8e $\\text{G*}$ \u7684\u70b9\u6570\uff0c$\\text{G}$ \u7684\u70b9\u6570\u7b49\u4e8e $\\text{G*}$ \u7684\u9762\u6570\uff0c$\\text{G}$ \u7684\u8fb9\u6570\u4e0e $\\text{G*}$ \u7684\u8fb9\u6570\u76f8\u7b49\u3002\n- $\\text{G*}$ \u4e2d\u7684\u73af\u4e0e $\\text{G}$ \u4e2d\u7684\u5272\u4e00\u4e00\u5bf9\u5e94\u3002\n\n### \u5e94\u7528\n\n\u76f4\u63a5\u6c42\u89e3\u4ecd\u7136\u56f0\u96be\uff0c\u4e0d\u5982\u5229\u7528\u8f6c\u5316\u601d\u60f3\uff0c\u60f3\u529e\u6cd5\u6c42\u51fa\u6700\u5c0f\u5272\u3002\u800c\u5f53\u957f\u5ea6\u7b49\u4e8e\u5bb9\u91cf\u65f6\uff0c\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u7b49\u4e8e\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8dd1\u6700\u77ed\u8def\u6765\u5b9e\u73b0\u4e86\u3002\n\n## \u5b9e\u73b0\u7ec6\u8282\n\n\u53ef\u4ee5\u4e0d\u7528\u5efa\u539f\u56fe\uff0c\u76f4\u63a5\u5728\u5bf9\u5076\u56fe\u4e0a\u8dd1 SPFA\uff0c\u4f46 #6 \u7684\u65f6\u95f4\u5371\u9669\uff0c\u4e0d\u5438\u6c27\uff08\u5f00 O2\uff09\u53ef\u80fd TLE\u3002\n\n\u6ce8\u610f\u7ec6\u8282\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u65b9\u5411\uff09\u3002\n\n## Talk is cheap, show me the code. \n\n```cpp\nnamespace LZX\n{\n    using namespace std;\n    typedef long long i64;\n    const int MAXN=300005;\n    struct Edge\n    {\n        int to,nxt,w;\n    }e[2000005];\n    int head[MAXN],cnt=-1,n,v,base,s,t;\n    i64 dis[MAXN];\n    bool vis[MAXN];\n    queue<int> que;\n    #define pos(x,y) (~-(x)*base+~-(y))\n    void g_addedge(int x,int y,int z)\n    {\n        e[++cnt].nxt=head[x];\n        head[x]=cnt;\n        e[cnt].to=y;\n        e[cnt].w=z;\n        return;\n    }\n    void g_sp_SPFA()\n    {\n        int x,y;\n        memset(dis,0x3f,sizeof(dis));\n        dis[s]=0;\n        que.push(s);\n        vis[s]=true;\n        do\n        {\n            x=que.front();\n            que.pop();\n            vis[x]=false;\n            for(int i=head[x];~i;i=e[i].nxt)\n            {\n                y=e[i].to;\n                if(dis[y]>dis[x]+e[i].w)\n                {\n                    dis[y]=dis[x]+e[i].w;\n                    if(!vis[y])\n                    {\n                        que.push(y);\n                        vis[y]=true;\n                    }\n                }\n            }\n        }\n        while(!que.empty());\n        return;\n    }\n    int _main()\n    {\n        scanf(\"%d\",&n);\n        n++;\n        base=-~n;\n        s=pos(1,base);\n        t=pos(base,1);\n        memset(head,-1,sizeof(head));\n        for(int i=1,j=1;i<=n;j=j%(n-1)+1,i+=(j==1))\n        {\n            scanf(\"%d\",&v);\n            g_addedge(pos(i,j+1),pos(i+1,j+1),v);\n        }\n        for(int i=1,j=1;i<n;j=j%n+1,i+=(j==1))\n        {\n            scanf(\"%d\",&v);\n            g_addedge(pos(i+1,j+1),pos(i+1,j),v);\n        }\n        for(int i=1,j=2;i<=n;j=j%n+1,i+=(j==1),j+=(j==1))\n        {\n            scanf(\"%d\",&v);\n            g_addedge(pos(i+1,j),pos(i,j),v);\n        }\n        for(int i=2,j=1;i<=n;j=j%n+1,i+=(j==1))\n        {\n            scanf(\"%d\",&v);\n            g_addedge(pos(i,j),pos(i,j+1),v);\n        }\n        for(int i=2;i<base;i++)\n        {\n            g_addedge(s,pos(1,i),0);\n            g_addedge(s,pos(i,base),0);\n            g_addedge(pos(i,1),t,0);\n            g_addedge(pos(base,i),t,0);\n        }\n        g_sp_SPFA();\n        printf(\"%lld\\n\",dis[t]);\n        return 0;\n    }\n}\n```\n\n\u53c2\u8003\u6587\u732e\uff1a\u5468\u51ac\u300a\u4e24\u6781\u76f8\u901a\u2014\u2014\u6d45\u6790\u6700\u5927\u2014\u6700\u5c0f\u5b9a\u7406\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528\u300b\u3002",
        "postTime": 1650254588,
        "uid": 470638,
        "name": "Steven_lzx",
        "ccfLevel": 5,
        "title": "P2046 [NOI2010] \u6d77\u62d4 \u9898\u89e3"
    },
    {
        "content": "# Solution P2046 [NOI2010] \u6d77\u62d4\n\n### \u4e00\u3001\u7406\u6e05\u601d\u8def\n\n\u6839\u636e\u9898\u76ee\uff0c\u6211\u4eec\u6240\u6c42\u7684\u6bcf\u4e2a\u4eba\u7684\u4f53\u529b\u4e3a $\\max\\{0,h\\}$\uff0c\u53c8\u56e0\u4e3a\u8d77\u70b9\u9ad8\u5ea6\u4e3a $0$\uff0c\u7ec8\u70b9\u9ad8\u5ea6\u4e3a $1$\uff0c\u7531\u8d2a\u5fc3\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n\n1. \u5176\u4ed6\u70b9\u8981\u4e48\u662f $1$\uff0c\u8981\u4e48\u662f $0$\u3002\u56e0\u4e3a\u8ba9\u4f53\u529b\u548c\u6700\u5c11\u7684\u6700\u597d\u529e\u6cd5\u5c31\u662f\u51cf\u5c11\u9ad8\u5ea6\u5dee\uff0c\u5f88\u660e\u663e\uff0c\u5206\u5c42\u5f0f\u7684\u5761\u4e0d\u5982\u4e00\u4e2a\u5927\u5761\u3002\n\n1. \u4e3a\u4e86\u8ba9\u9ad8\u5ea6\u5dee\u6700\u5c0f\uff0c\u6211\u4eec\u5e94\u8be5\u8ba9 $0$ \u548c $1$ \u5206\u6210\u4e24\u90e8\u5206\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5728\u6bcf\u90e8\u5206\u7684\u5185\u90e8\u662f\u6ca1\u6709\u9ad8\u5ea6\u5dee\u7684\uff0c\u8fdb\u800c\u964d\u4f4e\u603b\u4f53\u529b\n\n1. \u8fd8\u6709\uff0c\u6211\u4eec\u9700\u8981\u8ba9 $0$ \u7684\u90a3\u90e8\u5206\u9760\u8fd1\u8d77\u70b9\uff0c\u53e6\u4e00\u90e8\u5206\u9760\u8fd1\u7ec8\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u6d88\u9664\u8d77\u7ec8\u70b9\u9644\u8fd1\u4ea7\u751f\u7684\u9ad8\u5ea6\u5dee\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5c06\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u73b0\u5728\u6709\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u60f3\u8981\u5206\u6210\u4e24\u90e8\u5206\uff0c\u6c42\u4e0d\u8ba9\u4ed6\u4eec\u8054\u901a\u7684\u9700\u8981\u5272\u6389\u7684\u8fb9\u6743\u503c\u548c\u3002\n\n\u8fd9\u662f\u4ec0\u4e48\uff1f**\u6700\u5c0f\u5272**\n\n### \u4e8c\u3001\u8fdb\u9636\u601d\u8003\n\n\u8fd0\u7528\u6700\u5c0f\u5272\u7684\u65b9\u6cd5\u5df2\u7ecf\u53ef\u4ee5\u521d\u6b65\u89e3\u51b3\u6211\u4eec\u7684\u95ee\u9898\uff0c\u8fd0\u7528dinic\u7b97\u6cd5\u5c31\u53ef\u4ee5\u5728 $O(n^2m)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u7b97\u51fa\u7ed3\u679c\uff0c\u9884\u8ba1\u53ef\u4ee5\u83b7\u5f97 $80$ \u5206\u3002\n\n\u4f46\u662f $n$ \u662f\u6bd4\u8f83\u5927\u7684\uff0c\u6570\u636e\u8303\u56f4\u4e3a $1\\leq n\\leq 500$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406 $2.5\\times10^5$ \u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u5272\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u8fdb\u884c\u4e00\u79cd\u8f6c\u6362\uff1a**\u5e73\u9762\u56fe\u8f6c\u5bf9\u5076\u56fe**\n\n### \u4e09\u3001\u89e3\u51b3\u65b9\u6848\n\n\u5982\u679c\u4f60\u8fd8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5bf9\u5076\u56fe\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u535a\u5ba2\u65b9\u4fbf\u5b66\u4e60\uff1a\n\n- [\u5173\u4e8e\u5e73\u9762\u56fe\u5230\u5bf9\u5076\u56fe\u7684\u8f6c\u5316](https://blog.csdn.net/MaxMercer/article/details/77976666)\n\n- [\u5bf9\u5076\u56fe\u5bf9\u4e8e\u5e73\u9762\u56fe\u6700\u5c0f\u5272\u7684\u6c42\u89e3](https://blog.csdn.net/MaxMercer/article/details/77977447)\n\n\u6839\u636e\u535a\u5ba2\u4e2d\u7684\u8bf4\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5e73\u9762\u56fe\u8f6c\u5316\u4e3a\u5bf9\u5076\u56fe\u8fdb\u884c\u89e3\u51b3\u3002\u56e0\u4e3a\u5728\u5bf9\u5076\u56fe\u4e2d\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8fde\u7ebf\u5c31\u662f\u5bf9\u5e94\u5e73\u9762\u56fe\u7684\u5272\uff0c\u5728\u5bf9\u5076\u56fe\u4e2d\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5c31\u662f\u5bf9\u5e94\u5e73\u9762\u56fe\u7684\u6700\u5c0f\u5272\u3002\n\n\u5728\u77e5\u9053\u8fd9\u4e9b\u7279\u6027\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u65cb\u8f6c $90^\\circ$ \u7684\u65b9\u6cd5\u8fdb\u884c\u53d8\u6362\uff08\u4e3a\u4ec0\u4e48\uff1f\u4ed4\u7ec6\u60f3\u60f3\uff09\n\n\u6700\u540e\uff0c\u8fd8\u9700\u8981\u6709\u4e00\u70b9\u63d0\u793a\uff1a\n\n1. \u4e0d\u8981\u7528spfa\uff0c\u4f1a\u8fbe\u5230\u548c\u6700\u5c0f\u5272\u4e00\u6837\u7684\u6548\u679c\u3002\n\n1. \u6570\u7ec4\u4e0d\u8981\u5f00\u7684\u592a\u5927\uff0c\u5bb9\u6613MLE\uff0c\u4e5f\u522b\u5f00\u7684\u592a\u5c0f\uff0c\u5efa\u8bae\u76f4\u63a5\u5f00 $505\\times505$ \u7684\u6570\u7ec4\u3002\n\n### \u56db\u3001\u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<vector>\n#include<cstring>\nusing namespace std;\n#define MAXM 4000005\n#define MAXN 505\nstruct node{\n    int to,w;\n    bool operator<(const node &a) const{\n        return w>a.w;\n    }\n};\nvector<node> v[MAXM];\nint n,s,t,id[MAXN][MAXN],d[MAXM];\nbool vis[MAXM];\ninline int read(){\n\tint x=0,f=1;\n    char ch=getchar();\n\twhile(!isdigit(ch)){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n\twhile(isdigit(ch)){\n        x=x*10+ch-48;\n        ch=getchar();\n    }\n\treturn x*f;\n}\nint dij(){\n    memset(d,0x3f,sizeof(d));\n    d[s]=0;\n    priority_queue<node> q;\n    q.push(node{s,0});\n    while(q.size()){\n        node nd=q.top();\n        q.pop();\n        int x=nd.to;\n        if(vis[x]) continue;\n        vis[x]=1;\n        for(int i=0;i<v[x].size();i++){\n            int y=v[x][i].to;\n            if(d[y]>d[x]+v[x][i].w){\n                d[y]=d[x]+v[x][i].w;\n                q.push(node{y,d[y]});\n            }\n        }\n    }\n    return d[t];\n}\nint main(){\n    n=read();\n    n++;\n    s=n*n+1;\n    t=n*n+2;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            id[i][j]=(i-1)*n+j;\n        }\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<n;j++){\n            int x;\n            x=read();\n            if(i==1) v[s].push_back(node{id[i][j],x});\n            else if(i==n) v[id[i-1][j]].push_back(node{t,x});\n            else v[id[i-1][j]].push_back(node{id[i][j],x});\n        }\n    }\n    for(int i=1;i<n;i++){\n        for(int j=1;j<=n;j++){\n            int x;\n            x=read();\n            if(j==1) v[id[i][j]].push_back(node{t,x});\n            else if(j==n) v[s].push_back(node{id[i][j-1],x});\n            else v[id[i][j]].push_back(node{id[i][j-1],x});\n        }\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<n;j++){\n            int x;\n            x=read();\n            if(i==1) v[id[i][j]].push_back(node{s,x});\n            else if(i==n) v[t].push_back(node{id[i-1][j],x});\n            else v[id[i][j]].push_back(node{id[i-1][j],x});\n        }\n    }\n    for(int i=1;i<n;i++){\n        for(int j=1;j<=n;j++){\n            int x;\n            x=read();\n            if(j==1) v[t].push_back(node{id[i][j],x});\n            else if(j==n) v[id[i][j-1]].push_back(node{s,x});\n            else v[id[i][j-1]].push_back(node{id[i][j],x});\n        }\n    }\n    cout<<dij();\n    return 0;\n}\n```\n\n### \u4e94\u3001\u7ed3\u675f\u8bed\n\n\u5bf9\u4ee5\u4e0a\u8fc7\u7a0b\u5982\u6709\u9519\u8bef\u8bf7\u6307\u6b63\uff0c\u8bf7\u60a8\u6307\u6559\n\n\u5982\u6709\u7591\u95ee\u53ef\u4ee5\u5206\u4eab\u5728 `\u8bc4\u8bba\u533a` \u54c8\n\n\u611f\u8c22\u89c2\u770b",
        "postTime": 1642511971,
        "uid": 166234,
        "name": "Aiopr_2378",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2046 [NOI2010] \u6d77\u62d4"
    },
    {
        "content": "\u8fd9\u9053\u9898 \u6211\u5f88\u4e45\u4e4b\u524d\u5c31\u770b\u4e86\u4f46\u662f\u4e00\u76f4\u6ca1\u60f3\u505a\u3002(~~\u5bf9\u5076\u56fe\u6700\u77ed\u8def\u4e0d\u4f1a\u8dd1~~\u3002\u3002\n\n\u8fd9\u9053\u9898\u5751\u70b9\u8fd8\u662f\u5f88\u591a\u7684:\n\n1. \u6211\u4eec\u9700\u8981\u770b\u51fa\u6d77\u62d4\u591a\u9ad8\u90fd\u662f\u6ca1\u7528\u76840 1 \u6d77\u62d4\u8db3\u4ee5\u3002\u8bc1\u660e\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u4e00\u4e0b\u3002\n\n2. \u6700\u5c0f\u5272\u662f\u53ef\u80fd\u62d0 \u5f88\u591a\u5708\u7684 \u6240\u4ee5 \u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u4e00\u4e9b\u8fb9\u7684\u8fb9\u6743\u6709\u4e9b\u90fd\u662f\u5fc5\u8981\u7684\uff01\uff08\u6211\u66fe\u4ee5\u4e3a\u7531\u897f\u5230\u4e1c\u662f\u4e0d\u5fc5\u8981\u7684\n\n3. \u5efa\u56fe\u6bd4\u8f83\u590d\u6742 \u5c3d\u91cf \u8bdd\u4e00\u5f20\u56fe\u6765\u5206\u6790\u4e00\u4e0b\u3002\n\n4. \u6570\u7ec4\u5f00\u56db\u500d\u3002\n\n\u7136\u540e\u5bf9\u5076\u56fe\u6700\u77ed\u8def\u8dd1\u4e00\u4e0b\u5373\u53ef\u3002\n\n```cpp\n//#include<bits/stdc++.h>\n#include<iomanip>\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<deque>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<stack>\n#include<algorithm>\n#include<vector>\n#include<cctype>\n#include<utility>\n#include<set>\n#include<bitset>\n#include<map>\n#define INF 1000000000\n#define ll long long\n#define min(x,y) (x>y?y:x)\n#define max(x,y) (x>y?x:y)\n#define RI register ll\n#define up(p,i,n) for(ll i=p;i<=n;++i)\n#define db double\nusing namespace std;\nchar buf[1<<15],*fs,*ft;\ninline char getc()\n{\n    return (fs==ft&&(ft=(fs=buf)+fread(buf,1,1<<15,stdin),fs==ft))?0:*fs++;\n}\ninline int read()\n{\n    int x=0,f=1;char ch=getc();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getc();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n    return x*f;\n}\n//\u6216\u8bb8\u662f\u56e0\u4e3a\u68a6\u7684\u7f18\u6545 \u7409\u7483\u4e4b\u4eba\u8ffd\u9010\u5e7b\u5f71 ---\u9f99\u65cf\nconst int MAXN=510;\nint n,S,T,len;\nint lin[MAXN*MAXN],nex[MAXN*MAXN<<2],ver[MAXN*MAXN<<2],e[MAXN*MAXN<<2];\nint dis[MAXN*MAXN],vis[MAXN*MAXN];\npriority_queue<pair<int,int> > q;\ninline void add(int x,int y,int z)\n{\n    ver[++len]=y;\n    nex[len]=lin[x];\n    lin[x]=len;\n    e[len]=z;\n}\ninline void get_horizen(int x,int y,int z)//\u7531\u897f\u5230\u4e1c \u7531\u5de6\u5230\u53f3\u5efa \u5355\u5411\u8fb9\n{\n    int flag=0;\n \tif(x==1){add(S,(x-1)*n+y,z);flag=1;}\n    if(x==n){add((x-2)*n+y,T,z);flag=1;}\n    if(flag)return;\n    add((x-2)*n+y,(x-1)*n+y,z);return;\n}\ninline void get_horizen1(int x,int y,int z)//\u7531\u4e1c\u5230\u897f\n{\n    int flag=0;\n    if(x==1){add((x-1)*n+y,S,z);flag=1;}\n    if(x==n){add(T,(x-2)*n+y,z);flag=1;}\n    if(flag)return;\n    add((x-1)*n+y,(x-2)*n+y,z);return;\n}\ninline void get_list(int x,int y,int z)//\u7531\u5317\u5230\u5357 \u7531\u4e0a\u5230\u4e0b\u5efa \u5355\u5411\u8fb9\n{\n    int flag=0;\n    if(y==1){add((x-1)*n+y,T,z);flag=1;}\n    if(y==n){add(S,(x-1)*n+y-1,z);flag=1;}\n    if(flag)return;\n    add((x-1)*n+y,(x-1)*n+y-1,z);return;\n}\ninline void get_list1(int x,int y,int z)\n{\n    int flag=0;\n    if(y==1){add(T,(x-1)*n+y,z);flag=1;}\n    if(y==n){add((x-1)*n+y-1,S,z);flag=1;}\n    if(flag)return;\n    add((x-1)*n+y-1,(x-1)*n+y,z);return;\n}\ninline void dij(int x)\n{\n    memset(dis,10,sizeof(dis));\n    dis[x]=0;q.push(make_pair(dis[x],x));\n    while(q.size())\n    {\n        int te=q.top().second;\n        q.pop();\n        if(vis[te])continue;\n        vis[te]=1;\n        for(int i=lin[te];i;i=nex[i])\n        {\n            int tn=ver[i];\n            if(vis[tn])continue;\n            if(dis[tn]>dis[te]+e[i])\n            {\n                dis[tn]=dis[te]+e[i];\n                q.push(make_pair(-dis[tn],tn));\n            }\n        }\n    }\n}\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    n=read();++n;S=n*n+1;T=S+1;\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=n-1;++j)get_horizen(i,j,read());\n    for(int i=1;i<=n-1;++i)\n        for(int j=1;j<=n;++j)get_list(i,j,read());\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=n-1;++j)get_horizen1(i,j,read());\n    for(int i=1;i<=n-1;++i)\n        for(int j=1;j<=n;++j)get_list1(i,j,read());\n    dij(S);printf(\"%d\\n\",dis[T]);\n    return 0;\n}\n\n```\n~~\u5176\u5b9e\u4e5f\u5c31\u662f\u6700\u77ed\u8def\u6c34\u9898~~",
        "postTime": 1561983164,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2046 \u3010[NOI2010]\u6d77\u62d4\u3011"
    },
    {
        "content": "## P2046 [NOI2010] \u6d77\u62d4\n\n[My blog](https://www.cnblogs.com/linghuabaobao/p/15733233.html)\n\n### \u9898\u76ee\u63cf\u8ff0\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2046)\n\nYT \u5e02\u662f\u4e00\u4e2a\u89c4\u5212\u826f\u597d\u7684\u57ce\u5e02\uff0c\u57ce\u5e02\u88ab\u4e1c\u897f\u5411\u548c\u5357\u5317\u5411\u7684\u4e3b\u5e72\u9053\u5212\u5206\u4e3a $n \\times n$ \u4e2a\u533a\u57df\u3002\u7b80\u5355\u8d77\u89c1\uff0c\u53ef\u4ee5\u5c06 YT \u5e02\u770b\u4f5c \u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u6bcf\u4e00\u4e2a\u533a\u57df\u4e5f\u53ef\u770b\u4f5c\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\u4ece\u800c\uff0cYT \u57ce\u5e02\u4e2d\u5305\u62ec $(n+1) \\times (n+1)$ \u4e2a\u4ea4\u53c9\u8def\u53e3\u548c $2n \\times (n+1)$ \u6761\u53cc\u5411\u9053\u8def\uff08\u7b80\u79f0\u9053\u8def\uff09\uff0c\u6bcf\u6761\u53cc\u5411\u9053\u8def\u8fde\u63a5\u4e3b\u5e72\u9053\u4e0a\u4e24\u4e2a\u76f8\u90bb\u7684\u4ea4\u53c9\u8def\u53e3\u3002\n\n\u5c0f Z \u4f5c\u4e3a\u8be5\u5e02\u7684\u5e02\u957f\uff0c\u4ed6\u6839\u636e\u7edf\u8ba1\u4fe1\u606f\u5f97\u5230\u4e86\u6bcf\u5929\u4e0a\u73ed\u9ad8\u5cf0\u671f\u95f4 YT \u5e02\u6bcf\u6761\u9053\u8def\u4e24\u4e2a\u65b9\u5411\u7684\u4eba\u6d41\u91cf\uff0c\u5373\u5728\u9ad8\u5cf0\u671f\u95f4\u6cbf\u7740\u8be5\u65b9\u5411\u901a\u8fc7\u8fd9\u6761\u9053\u8def\u7684\u4eba\u6570 $w_i$\u3002\u6bcf\u4e00\u4e2a\u4ea4\u53c9\u8def\u53e3\u90fd\u6709\u4e0d\u540c\u7684\u6d77\u62d4\u9ad8\u5ea6\u503c\uff0cYT \u5e02\u5e02\u6c11\u8ba4\u4e3a\u722c\u5761\u662f\u4e00\u4ef6\u975e\u5e38\u7d2f\u7684\u4e8b\u60c5\uff0c\u6bcf\u5411\u4e0a\u722c $h$ \u7684\u9ad8\u5ea6\uff0c\u5c31\u9700\u8981\u6d88\u8017 $h$ \u7684\u4f53\u529b\u3002\u5982\u679c\u662f\u4e0b\u5761\u7684\u8bdd\uff0c\u5219\u4e0d\u9700\u8981\u8017\u8d39\u4f53\u529b\u3002\u56e0\u6b64\u5982\u679c\u4e00\u6bb5\u9053\u8def\u7684\u7ec8\u70b9\u6d77\u62d4\u51cf\u53bb\u8d77\u70b9\u6d77\u62d4\u7684\u503c\u4e3a $h$\uff08\u6ce8\u610f $h$ \u53ef\u80fd\u662f\u8d1f\u6570\uff09\uff0c\u90a3\u4e48\u4e00\u4e2a\u4eba\u7ecf\u8fc7\u8fd9\u6bb5\u8def\u6240\u6d88\u8017\u7684\u4f53\u529b\u662f $\\max\\{0,h\\}$\u3002\n\n\u5c0f Z \u8fd8\u6d4b\u91cf\u5f97\u5230\u8fd9\u4e2a\u57ce\u5e02\u897f\u5317\u89d2\u7684\u4ea4\u53c9\u8def\u53e3\uff08\u4e5f\u5c31\u662f\u8d77\u70b9\uff09\u6d77\u62d4\u4e3a $0$\uff0c\u4e1c\u5357\u89d2\u7684\u4ea4\u53c9\u8def\u53e3\u6d77\u62d4\uff08\u4e5f\u5c31\u662f\u7ec8\u70b9\uff09\u4e3a $1$\uff0c\u4f46\u5176\u5b83\u4ea4\u53c9\u8def\u53e3\u7684\u6d77\u62d4\u9ad8\u5ea6\u90fd\u65e0\u6cd5\u5f97\u77e5\u3002\u5c0f Z \u60f3\u77e5\u9053\u5728\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff08\u5373\u4f60\u53ef\u4ee5\u4efb\u610f\u5047\u8bbe\u5176\u4ed6\u8def\u53e3\u7684\u6d77\u62d4\u9ad8\u5ea6\uff09\uff0c\u6bcf\u5929\u4e0a\u73ed\u9ad8\u5cf0\u671f\u95f4\u6240\u6709\u4eba\u722c\u5761\u6d88\u8017\u7684\u603b\u4f53\u529b\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 500,0\\le w_i \\le 10^6$\uff0c\u4e14\u6240\u6709\u6d41\u91cf\u5747\u4e3a\u6574\u6570\u3002\n\n### \u89e3\u6cd5\uff1a\n\n\u7531\u9898\uff0c\u8981\u6c42\u603b\u4f53\u529b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u4e00\u4ef6\u975e\u5e38\u663e\u7136\u7684\u4e8b\u60c5\u5c31\u662f\uff0c\u6240\u6709\u57ce\u5e02\u7684\u6d77\u62d4\u53ea\u4f1a\u662f $0$ \u6216 $1$\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u5176\u4ed6\u7684\u503c\uff0c\u90a3\u722c\u4e0b\u53bb\u4e0d\u6d88\u8017\u4f53\u529b\uff0c\u4f46\u662f\u722c\u4e0a\u6765\u8981\u6d88\u8017\u66f4\u591a\u7684\u4f53\u529b\uff0c\u6240\u4ee5\u80af\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u8bf4\u53ea\u6709 $0$ \u548c $1$ \u7684\u8bdd\uff0c\u90a3\u4e48\u663e\u7136\u662f\u8ba9\u4ed6\u5728\u6bcf\u6761\u8def\u5f84\u4e0a\u53ea\u53d8\u5316\u4e00\u6b21\uff0c\u5373 $0$ \u548c $1$ \u7684\u5206\u754c\u7ebf\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6574\u4e2a\u56fe\u4e0a\u6240\u6709\u7684\u8def\u5f84\u53ea\u6709\u4e00\u4e2a\u5206\u754c\u7ebf\uff0c\u90a3\u4e48\u5c31\u610f\u5473\u7740\u5728\u8fd9\u6837\u56fe\u4e0a\u6709\u4e00\u6761 $01$ \u7684\u5206\u754c\u7ebf\u5c06\u56fe\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u8fde\u63a5\u8d77\u70b9\uff0c\u4e00\u90e8\u5206\u8fde\u63a5\u7ec8\u70b9\u3002\n\n\u60f3\u5230\u8fd9\u91cc\uff0c\u6b63\u89e3\u5c31\u51fa\u6765\u4e00\u534a\u4e86\uff0c\u8fd9\u663e\u7136\u5c31\u662f\u6c42\u6700\u5c0f\u5272\u7684\u677f\u5b50\u3002\u4f46\u662f\u76f4\u63a5\u6c42\u6700\u5c0f\u5272\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a $n$ \u7684\u8303\u56f4\u5728 $500$\uff0c $n^2$ \u7684\u8303\u56f4\u5c31\u662f $250000$\uff0c\u5982\u679c\u76f4\u63a5\u8dd1\u6700\u5c0f\u5272\u663e\u7136\u4f1a\u7206\u6389\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u53eb\u5bf9\u5076\u56fe\u7684\u4e1c\u897f\u3002\n\n\u6211\u4eec\u6b63\u5e38\u6c42\u6700\u5c0f\u5272\uff0c\u90fd\u662f\u5bf9\u7740\u5e73\u9762\u56fe\u8dd1\u7684\uff0c\u800c\u4e14\u90fd\u7528\u5230\u4e86\u5b9a\u7406\u201c\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\u201d\uff0c\u8fd9\u4e9b\u6240\u6709\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u90fd\u662f\u4e09\u6b21\u65b9\u7ea7\u522b\u5de6\u53f3\u7684\uff0c\u5728\u6570\u636e\u8303\u56f4\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\uff0c\u4f46\u662f\u6570\u636e\u8303\u56f4\u4e00\u5927\u5c31\u4e0d\u597d\u4f7f\u4e86\uff0c\u8fd9\u65f6\u5019\u4e00\u79cd\u5bf9\u6700\u5c0f\u5272\u6c42\u6cd5\u7684\u4f18\u5316\uff0c\u5bf9\u5076\u56fe\u5c31\u5e94\u8fd0\u800c\u751f\u3002\n\n\u5bf9\u5e73\u9762\u56fe\u6c42\u6700\u5c0f\u5272\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u4e00\u6761\u80fd\u591f\u5c06\u539f\u56fe\u5272\u6210\u4e24\u534a\u7684\u4e00\u6761\u8def\u5f84\uff08\u5373\u539f\u9898\u76ee\u7684\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5e73\u9762\u4e0a\u6bcf\u4e2a\u8282\u70b9\u56f4\u6210\u7684\u4e00\u4e2a\u9762\u5f53\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u9762\u80af\u5b9a\u4f1a\u6709\u4e00\u6761\u8fb9\u5c06\u5176\u5206\u5f00\uff0c\u90a3\u8fd9\u4e24\u4e2a\u9762\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u5c31\u4f1a\u76f8\u5e94\u7684\u6709\u4e00\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u8fd9\u6761\u5c06\u8fd9\u4e24\u4e2a\u9762\u5206\u5f00\u7684\u8fb9\u7684\u5bb9\u91cf\u3002\n\n\u5728\u6700\u5916\u5c42\uff0c\u5982\u679c\u8981\u6c42\u80fd\u5c06\u56fe\u5272\u6210\u4e24\u534a\u7684\u8def\u5f84\u7684\u8bdd\uff0c\u90a3\u4e48\u663e\u7136\u8981\u5c06\u539f\u56fe\u6700\u5916\u5c42\u7684\u90e8\u5206\u5206\u6210\u4e24\u90e8\u5206\uff0c\u88ab\u8d77\u70b9\u548c\u7ec8\u70b9\u9694\u5f00\u3002\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mwrea7x9.png)\n\n\u5728\u8fd9\u4e2a\u56fe\u4e2d\u9ed1\u8272\u7684\u70b9\u8868\u793a\u539f\u56fe\u7684\u70b9\uff0c\u7ea2\u8272\u7684\u8868\u793a\u539f\u56fe\u5efa\u6210\u7684\u5bf9\u5076\u56fe\u6240\u5bf9\u5e94\u7684\u70b9\u3002\u9ed1\u8272\u7684\u7ebf\u6761\u8868\u793a\u539f\u56fe\u4e2d\u7684\u8def\u5f84\uff0c\u84dd\u8272\u7684\u8868\u793a\u5bf9\u5076\u56fe\u4e2d\u7684\u8fb9\uff0c\u7070\u8272\u7684\u8868\u793a\u8f85\u52a9\u8fb9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e0a\u56fe\u4e2d $S-T$ \u7684\u6700\u5c0f\u503c\u5c31\u662f\u7ea2\u8272\u8282\u70b9 $1-6$ \u7684\u6700\u77ed\u8def\u3002\u5bf9\u4e8e\u6b64\u9898\u7684\u8bdd\uff0c\u7528 Dijkstra \u5c31\u884c\u3002\n\n### Code\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std ;\n\nconst int N = 2500005 ;\nint n , s , t , dis[N] ;\n\nstruct Edge\n{\n\tint nxt , to , len ;\n} edge[N*10] ;\n\nint cnt = 1 , head[N] , cur[N] ;\nvoid insert ( int u , int v , int w )\n{\n\tedge [ ++ cnt ] .nxt = head [ u ] ;\n\tedge [ cnt ] .to = v ;\n\tedge [ cnt ] .len = w ;\n\thead [ u ] = cnt ;\n}\n\nstruct Dist\n{\n\tint x , dist ;\n\tDist ( int _x = 0 , int _dist = -1 ) : x ( _x ) , dist ( _dist ) { }\n\tbool operator ( ) ( Dist u , Dist v )\n\t{\n\t\treturn u .dist > v .dist ;\n\t}\n} ;\n\npriority_queue < Dist , vector < Dist > , Dist > q ;\n\nvoid Dijkstra ( )\n{\n\tmemset ( dis , 0x3f , sizeof ( dis ) ) ;\n\tdis [ s ] = 0 ;\n\tq .push ( Dist ( s , 0 ) ) ;\n\twhile ( ! q .empty ( ) )\n\t{\n\t\tDist tmp = q .top ( ) ; q .pop ( ) ;\n\t\tint x = tmp .x ;\n\t\tif ( dis [ x ] != tmp .dist )\n\t\t\tcontinue ;\n\t\tfor ( int i = head [ x ] ; i ; i = edge [ i ] .nxt )\n\t\t{\n\t\t\tint y = edge [ i ] .to ;\n\t\t\tif ( dis [ y ] > dis [ x ] + edge [ i ] .len )\n\t\t\t{\n\t\t\t\tdis [ y ] = dis [ x ] + edge [ i ] .len ;\n\t\t\t\tq .push ( Dist ( y , dis [ y ] ) ) ;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint id ( int x , int y )\n{\n\treturn ( x - 1 ) * ( n + 1 ) + y ;\n}\n\nsigned main ( )\n{\n\tcin >> n ;\n\tt = ( n + 1 ) * ( n + 1 ) + 1 ;\n\tint x ;\n\tfor ( int i = 1 ; i <= n + 1 ; ++ i )\n\t\tfor ( int j = 1 ; j <= n ; ++ j )\n\t\t{\n\t\t\tcin >> x ;\n\t\t\tif ( i == 1 )\n\t\t\t\tinsert ( s , id ( i , j ) , x ) ;\n\t\t\telse if ( i == n + 1 )\n\t\t\t\tinsert ( id ( i - 1 , j ) , t , x ) ;\n\t\t\telse\n\t\t\t\tinsert ( id ( i - 1 , j ) , id ( i , j ) , x ) ;\n\t\t}\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= n + 1 ; ++ j )\n\t\t{\n\t\t\tcin >> x ;\n\t\t\tif ( j == 1 )\n\t\t\t\tinsert ( id ( i , j ) , t , x ) ;\n\t\t\telse if ( j == n + 1 )\n\t\t\t\tinsert ( s , id ( i , j - 1 ) , x ) ;\n\t\t\telse\n\t\t\t\tinsert ( id ( i , j ) , id ( i , j - 1 ) , x ) ;\n\t\t}\n\tfor ( int i = 1 ; i <= n + 1 ; ++ i )\n\t\tfor ( int j = 1 ; j <= n ; ++ j )\n\t\t{\n\t\t\tcin >> x ;\n\t\t\tif ( i == 1 )\n\t\t\t\tinsert ( id ( i , j ) , s , x ) ;\n\t\t\telse if ( i == n + 1 )\n\t\t\t\tinsert ( t , id ( i - 1 , j ) , x ) ;\n\t\t\telse\n\t\t\t\tinsert ( id ( i , j ) , id ( i - 1 , j ) , x ) ;\n\t\t}\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= n + 1 ; ++ j )\n\t\t{\n\t\t\tcin >> x ;\n\t\t\tif ( j == 1 )\n\t\t\t\tinsert ( t , id ( i , j ) , x ) ;\n\t\t\telse if ( j == n + 1 )\n\t\t\t\tinsert ( id ( i , j - 1 ) , s , x ) ;\n\t\t\telse\n\t\t\t\tinsert ( id ( i , j - 1 ) , id ( i , j ) , x ) ;\n\t\t}\n\tDijkstra ( ) ;\n\tcout << dis [ t ] << '\\n' ;\n\treturn 0 ;\n}\n```\n\n\u76f8\u4f3c\u5bf9\u5076\u56fe\u4f8b\u9898\uff1a[\u72fc\u6293\u5154\u5b50](https://www.luogu.com.cn/problem/P4001)\n\nupdate:22.1.12:\u4fee\u6b63\u4e86\u56fe\u7684\u95ee\u9898",
        "postTime": 1640506006,
        "uid": 68882,
        "name": "\u7075\u534e",
        "ccfLevel": 6,
        "title": "P2046 \u6d77\u62d4"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u9700\u8981\u80fd\u591f\u5206\u6790\u51fa\u4e0b\u9762\u4e24\u4e2a\u7ed3\u8bba\uff1a\n1. \u90090/1\u5916\u7684\u503c\u4f5c\u4e3a\u6d77\u62d4\u6ca1\u6709\u5fc5\u8981\n- \u5c0f\u4e8e0\u7684\u503c\u6539\u4e3a0\uff0c\u5927\u4e8e1\u7684\u503c\u6539\u4e3a1\uff0c\u7b54\u6848\u4e0d\u4f1a\u66f4\u5dee\u3002\n- \u5bf9(0, 1)\u4e4b\u95f4\u7684\u503c\uff0c\u4e0d\u5982\u90090/1\u66f4\u4f18\u3002\n2. \u6d77\u62d4\u4e3a0/1\u7684\u5206\u522b\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\n- \u5982\u679c\u6d77\u62d4\u4e3a1\u7684\u70b9\u6709\u22652\u4e2a\u8fde\u901a\u5757\uff0c\u628a\u4e0d\u5305\u542b \uff08n,n\uff09\u7684\u8fde\u901a\u5757\u5168\u90e8\u53d8\u4e3a0\uff0c\u7b54\u6848\u4e0d\u4f1a\u66f4\u5dee\u3002\n\n\u6240\u4ee5\u6700\u7ec8\u80af\u5b9a\u662f\u4e0e\u5de6\u4e0a\u89d2\u8fde\u901a\u7684\u4e00\u90e8\u5206\u70b9\u6d77\u62d4\u4e3a0\uff0c\u4e0e\u53f3\u4e0b\u89d2\u8fde\u901a\u7684\u4e00\u90e8\u5206\u70b9\u7684\u6d77\u62d4\u4e3a1\u3002\u800c\u4e0a\u73ed\u7684\u4eba\u6d88\u8017\u7684\u4f53\u529b\uff0c\u5c31\u662f\u6d77\u62d4\u4e3a0\u7684\u70b9\u4e0e\u6d77\u62d4\u4e3a1\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u4e4b\u548c\u3002\n\n\u8fd9\u4e0d\u5c31\u662f\u5272\u7684\u5b9a\u4e49\u5417\uff0c\u6211\u4eec\u628a\u6d77\u62d4\u4e3a0\u7684\u70b9\u770b\u4f5c\u662f\u70b9\u96c6S \uff0c\u628a\u6d77\u62d4\u4e3a1\u7684\u70b9\u770b\u4f5c\u662f\u70b9\u96c6 T\uff0c (S,T)\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5272\u3002\u800c\u672c\u9898\u7684\u8981\u6c42\u5219\u6070\u6070\u662f\u8ba9\u8fd9\u4e2a\u5272\u6700\u5c0f\uff0c\u5373\u8981\u6c42\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u6700\u5c0f\u5272\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5c06\u7ed9\u51fa\u7684\u5e73\u9762\u56fe\u8f6c\u5316\u6210\u5b83\u7684\u5bf9\u5076\u56fe\uff0c\u518d\u7528 Dijkstra\u7b97\u6cd5\u8dd1\u5bf9\u5076\u56fe\u7684s' \u548ct' \u6700\u77ed\u8def\u5373\u4e3a\u7b54\u6848\u3002\n\n```\n#include <bits/stdc++.h>\n#define fst first\n#define scd second\n#define mp make_pair\n#define rep(i, x) for(int i = 1; i <= (x); i++)\nusing namespace std;\ntypedef pair<int, int> HeapNode;\nstruct Edge { int v, len, next; };\nconst int MAXN = 3e5, MAXM = 2e6;\nint n, s, t, e_ptr = 1, dist[MAXN+10], head[MAXN+10]; Edge E[(MAXM+10)<<1];\ninline int idx(int i, int j) { return (i-1) * n + j; }\ninline bool valid(int i, int j) { return i >= 1 && i <= n && j >= 1 && j <= n; }\ninline void AddEdge(int u, int v, int len) {\n\tE[++e_ptr] = (Edge) { v, len, head[u] }; head[u] = e_ptr;\n}\nint Dijkstra() {\n\tpriority_queue<HeapNode, vector<HeapNode>, greater<HeapNode> > pq;\n\tmemset(dist, 0x3f, sizeof(dist));\n\tdist[s] = 0; pq.push(mp(dist[s], s));\n\twhile(!pq.empty()) {\n\t\tHeapNode p = pq.top(); pq.pop();\n\t\tint u = p.scd;\n\t\tif(dist[u] != p.fst) continue;\n\t\tfor(int j=head[u]; j; j=E[j].next) {\n\t\t\tint v = E[j].v, len = E[j].len;\n\t\t\tif(dist[v] > dist[u] + len) {\n\t\t\t\tdist[v] = dist[u] + len;\n\t\t\t\tpq.push(mp(dist[v], v));\n\t\t\t}\n\t\t}\n\t}\n\treturn dist[t];\n}\ninline int readint() {\n\tint f=1, r=0; char c=getchar();\n\twhile(!isdigit(c)) { if(c=='-')f=-1; c=getchar(); }\n\twhile(isdigit(c)) { r=r*10+c-'0'; c=getchar(); }\n\treturn f*r;\n}\nvoid Init() {\n\tn = readint(); s = MAXN - 1; t = MAXN;\n\trep(i, n+1) rep(j, n) {\n\t\tint x = readint();\n\t\tif(i == 1)\n\t\t\tAddEdge(idx(i, j), t, x);\n\t\telse if(i == n+1)\n\t\t\tAddEdge(s, idx(i-1, j), x);\n\t\telse\n\t\t\tAddEdge(idx(i, j), idx(i-1, j), x);\n\t}\n\trep(i, n) rep(j, n+1) {\n\t\tint x = readint();\n\t\tif(j == 1)\n\t\t\tAddEdge(s, idx(i, j), x);\n\t\telse if(j == n+1)\n\t\t\tAddEdge(idx(i, j-1), t, x);\n\t\telse\n\t\t\tAddEdge(idx(i, j-1), idx(i, j), x);\n\t}\n\trep(i, n+1) rep(j, n) {\n\t\tint x = readint();\n\t\tif(i == 1)\n\t\t\tAddEdge(t, idx(i, j), x);\n\t\telse if(i == n+1)\n\t\t\tAddEdge(idx(i-1, j), s, x);\n\t\telse\n\t\t\tAddEdge(idx(i-1, j), idx(i, j), x);\n\t}\n\trep(i, n) rep(j, n+1) {\n\t\tint x = readint();\n \t\tif(j == 1)\n \t\t\tAddEdge(idx(i, j), s, x);\n \t\telse if(j == n+1)\n \t\t\tAddEdge(t, idx(i, j-1), x);\n\t\telse\n\t\t\tAddEdge(idx(i, j), idx(i, j-1), x);\n\t}\n}\nvoid Work() {\n \tcout << Dijkstra();\n}\nint main() {\n\tInit(); Work();\n \treturn 0;\n}\n```\n\n",
        "postTime": 1589615989,
        "uid": 324858,
        "name": "\u26a1114514_zzm\u26a1",
        "ccfLevel": 5,
        "title": "P2046 [NOI2010]\u6d77\u62d4"
    }
]