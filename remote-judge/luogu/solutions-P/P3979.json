[
    {
        "content": "\u8fd9\u9053\u9898\u5982\u679c\u4e0d\u8003\u8651\u6362\u6839\u64cd\u4f5c\uff0c\u5f53\u7136\u5c31\u662f\u4e00\u9053\u88f8\u7684\u6811\u94fe\u5256\u5206\u3002\n\n\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u5bf9\u4e8e\u6362\u6839\uff0c\u600e\u4e48\u5904\u7406\u3002\n\n\u6362\u4e00\u4e2a\u6839\u5c31\u91cd\u65b0\u5256\u4e00\u6b21\u5f53\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\n\n\u4e0d\u59a8\u5c31\u5148\u4ee51\u53f7\u8282\u70b9\u4e3a\u6839\u5256\u4e00\u4e0b\u3002\n\n\u6811\u94fe\u4fee\u6539\u503c\u5f53\u7136\u76f4\u63a5\u6309\u7167\u91cd\u94fe\u5728\u7ebf\u6bb5\u6811\u4e0a\u6539\u5c31\u597d\u4e86\u3002\n\n\u4e3b\u8981\u5c31\u662f\u8be2\u95eex\u5b50\u6811\u6700\u5c0f\u503c\u5728\u5bf9\u4e8e\u4e0d\u540c\u7684\u6839\u65f6\u7684\u5404\u79cd\u72b6\u51b5\u3002\n\n\u90a3\u4e48\u8bbe\u5f53\u524d\u7684\u6839\u662froot\u3002\n\n\u2460\uff1ax==root\uff1a\u5f53\u7136\u5c31\u662f\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u2461\uff1ax\u662froot\u5728\u4ee51\u4e3a\u6839\u60c5\u51b5\u4e0b\u7684\u5b50\u6811\uff1aroot\u4e3a\u6839\u6216\u662f1\u4e3a\u6839\u5bf9x\u5b50\u6811\u6765\u8bf4\u90fd\u4e00\u6837\uff0c\u6240\u4ee5\u4e5f\u76f4\u63a5\u6309\u7167\u6b63\u5e38\u64cd\u4f5c\u67e5\u8be2\u5c31\u597d\u4e86\u3002\n\n\u2462\uff1ax\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u60c5\u51b5\uff0c\u4f46\u4e5f\u4e0d\u57281\u5230root\u7684\u94fe\u4e0a\uff0c\u5728\u5176\u4ed6\u7684\u652f\u53c9\u4e0a\uff1aroot\u4e3a\u6839\u6216\u662f1\u4e3a\u6839\u8fd8\u662f\u6ca1\u6709\u5f71\u54cd\uff0c\u4e5f\u76f4\u63a5\u67e5\u8be2\u3002\n\n\u2463\uff1ax\u57281\u5230root\u7684\u94fe\u4e0a\uff1a\u8fd9\u5c31\u662f\u8981\u5904\u7406\u7684\u91cd\u70b9\u4e86\u3002\n\n\u600e\u4e48\u5904\u7406\u5148\u653e\u4e00\u653e\uff0c\u5148\u601d\u8003\u5bf9\u4e8e\u8fd9\u51e0\u79cd\u60c5\u51b5\uff0c\u5982\u4f55\u5224\u65ad\uff1a\n\n\u2460x==root\u5f53\u7136\u597d\u5224\u65ad\uff0c\u2461\u2462\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u53ea\u8981\u5224\u65ad\u662f\u4e0d\u662f\u60c5\u51b5\u2463\u5373\u53ef\u3002\n\n\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u6211\u662f\u5229\u7528\u4e86\u6811\u4e0a\u500d\u589e\u7684\u65b9\u6cd5\u3002\u9996\u5148x\u57281\u5230root\u7684\u94fe\u4e0a\uff0c\u5fc5\u7136\u6709\u6df1\u5ea6d[x]<d[root]\uff0c\u90a3\u4e48**\u5f53x\u662froot\u7684\u7956\u5148\u65f6\uff0cx\u5c31\u5fc5\u7136\u662f\u57281\u5230root\u7684\u94fe\u4e0a**\u4e86\uff0c\u90a3\u4e48\u5373\u53ef\u5224\u65adroot\u7684d[root]-d[x]\u500d\u7956\u5148\uff0c\u662f\u4e0d\u662fx\uff0c\u8fd9\u91cc\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u500d\u589e\u6c42LCA\u91cc\u7528\u5230\u7684\u90a3\u79cd2\u7684\u5e42\u6b21\u500d\u589e\u7ef4\u62a4\u7684\u7956\u5148\uff0c\u6bcf\u6b21\u67e5\u8be2\u7956\u5148\u7528\u500d\u589e\u6765\u67e5\u8be2\u5c31\u597d\u4e86\u3002\n\n\u5224\u65ad\u597d\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5904\u7406\u4e86\uff0c\u6211\u6765\u753b\u4e00\u4e2a\u4e11\u56fe\uff1a\n\n![](https://i.loli.net/2018/10/13/5bc13a1a2a00e.jpg)\n\n\u56fe\u4e2d\u84dd\u8272\u7684\u6807\u53f7\u5c31\u662f\u6839\u636e\u8f7b\u91cd\u94fe\u5256\u5206\u8fdb\u884c\u7684\u6811\u4e0a\u8282\u70b9\u518d\u6807\u53f7id\uff0c\u7ea2\u8272\u7b14\u8ff9\u6807\u51fa\u7684\u6bcf\u4e00\u6761\u6811\u94fe\u5c31\u662f\u4e00\u6761\u91cd\u94fe\uff0c\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u56fe\u6765\u611f\u6027\u7406\u89e3\u4e00\u4e0bx\u4e0d\u57281\u5230root\u94fe\u4e0a\u65f6\u7684\u90a3\u79cd\u60c5\u51b5\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u3002\n\n![](https://i.loli.net/2018/10/13/5bc13aefdf03e.jpg)\n\n\u4e0a\u56fe\u4e2d\u7d2b\u8272\u5708\u51fa\u7684\u8282\u70b9\u5373\u662f\u5f53\u524droot\uff0c\u7eff\u8272\u5708\u51fa\u7684\u8282\u70b9\u5373\u662f\u8981\u67e5\u8be2\u7684\u5b50\u6811\u7684\u6839x\uff0c\u90a3\u4e48\u53ef\u4ee5\u770b\u51fa\u5f53\u524dx\u57281\u5230root\u7684\u94fe\u4e0a\u3002\u601d\u8003\u73b0\u5728x\u7684\u5b50\u6811\uff0c\u5176\u5b9e\u5c31\u662f**\u9664\u53bbx\u5f80root\u65b9\u5411\u7684\u90a3\u4e2a\u5b50\u6811\u5916\uff0c\u6240\u6709\u7684\u8282\u70b9**\u3002\u90a3\u4e48\u5177\u4f53\u7684\u9700\u8981\u7684\u8282\u70b9\u7684id\u8981\u600e\u4e48\u627e\u51fa\u6765\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u5230\u6240\u6709\u4e0d\u9700\u8981\u7684\u8282\u70b9\uff0c\u7136\u540e\u53bb\u6389\u8fd9\u4e9b\u8282\u70b9\uff0c\u5c31\u662f\u9700\u8981\u7684\u8282\u70b9\u4e86\u3002\u627e\u5230root\u7684d[root]-d[x]-1\u500d\u7956\u5148\uff0c\u4e5f\u5c31\u662froot\u6240\u5728\u7684x\u7684\u5b50\u6811\u7684\u6839\u8282\u70b9y\uff0c\u90a3\u4e48id[y]~id[y]+siz[y]-1\uff08siz[i]\uff1a\u4ee51\u4e3a\u6839\u65f6\uff0c\u4ee5i\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff09\u90a3\u4e481~id[y]-1\u662f\u9700\u8981\u7684\u8282\u70b9\uff0cid[y]+siz[y]~n\u4e5f\u662f\u9700\u8981\u7684\u8282\u70b9\uff0c\u4e24\u90e8\u5206\u5206\u522b\u6c42\u4e00\u4e0b\u6700\u5c0f\u503c\uff0c\u6700\u540e\u5408\u8d77\u6765\u6c42\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u4e0b\u8fb9\u653e\u4e0a\u4ee3\u7801\uff0c\u6ce8\u91ca\u4e2d\u4e5f\u66f4\u8be6\u7ec6\u7684\u5199\u4e86\u8fc7\u7a0b\u3002\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long ll;\n#define rg register\n\nconst int N=100010;\nconst ll inf=9000000000000000000;\nint n,m,tot,hed[N],ver[N<<1],nex[N<<1],d[N],f[N][25],son[N],siz[N],tp[N],\n\tcnt,id[N],root,T;\nll a[N],vid[N],lz[N<<2],mi[N<<2],p,q;\n\ninline char gc()\n{\n\tstatic char buf[1000001],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2) ? EOF : *p1++;\n}\n\ntemplate <class T> inline void re(T &x)\n{\n\tx=0;\n\tchar ch=gc();\n\twhile(ch<'0'||ch>'9') ch=gc();\n\twhile(ch>='0'&&ch<='9') x=x*10+(ch^48), ch=gc();\n}\n\ninline void add(int x,int y)\n{\n\tver[++tot]=y; nex[tot]=hed[x]; hed[x]=tot;\n}\n\nvoid dfs1(int x)\n{\n\trg int i,y,sonsiz=-1;\n\tsiz[x]=1;\n\tfor(i=1;i<=T;++i)//\u5904\u7406\u500d\u589e\u6570\u7ec4 \n\t{\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t\tif(!f[x][i]) break;\n\t}\n\tfor(i=hed[x];i;i=nex[i])\n\t{\n\t\ty=ver[i];\n\t\tif(siz[y]) continue;\n\t\tf[y][0]=x;\n\t\td[y]=d[x]+1;\n\t\tdfs1(y);\n\t\tsiz[x]+=siz[y];//\u5904\u7406\u7236\u8282\u70b9f[][0]\uff0c\u6df1\u5ea6d\uff0c\u5b50\u6811\u5927\u5c0fsiz\uff0c\u91cd\u513f\u5b50son \n\t\tif(siz[y]>sonsiz) sonsiz=siz[y], son[x]=y;\n\t}\n}\n\nvoid dfs2(int x,int thtp)\n{\n\ttp[x]=thtp;//\u8bb0\u5f55\u6240\u5728\u91cd\u94fe\u94fe\u9876 \n\tid[x]=++cnt;//\u8bb0\u5f55\u518d\u6807\u53f7 \n\tvid[cnt]=a[x];//\u8bb0\u5f55\u6bcf\u4e2a\u6807\u53f7\u5bf9\u5e94\u7684\u503c \n\tif(!son[x]) return;\n\tdfs2(son[x],thtp);//\u5148\u5904\u7406\u91cd\u513f\u5b50 \n\trg int i,y;\n\tfor(i=hed[x];i;i=nex[i])\n\t{\n\t\ty=ver[i];\n\t\tif(y==f[x][0]||y==son[x]) continue;\n\t\tdfs2(y,y);//\u6bcf\u4e2a\u8f7b\u513f\u5b50\u90fd\u662f\u4e00\u4e2a\u91cd\u94fe\u7684\u94fe\u9876 \n\t}\n}\n\ninline void update(int rt)\n{\n\tmi[rt]=min(mi[rt<<1],mi[rt<<1|1]);\n}\n\nvoid build(int l,int r,int rt)\n{\n\tif(l==r) {mi[rt]=vid[l]; return;}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,rt<<1); build(mid+1,r,rt<<1|1);\n\tupdate(rt);\n}\n\ninline void pushdown(int rt)//\u7ebf\u6bb5\u6811\u4e0b\u63a8\u61d2\u6807\u8bb0 \n{\n\tmi[rt<<1]=mi[rt<<1|1]=lz[rt];\n\tlz[rt<<1]=lz[rt<<1|1]=lz[rt];\n\tlz[rt]=0;\n}\n\nvoid modify(int l,int r,int L,int R,int k,int rt)//\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539 \n{\n\tif(R<l||r<L) return;\n\tif(L<=l&&r<=R) {mi[rt]=k; lz[rt]=k; return;}\n\tint mid=(l+r)>>1;\n\tif(lz[rt]) pushdown(rt);\n\tmodify(l,mid,L,R,k,rt<<1); modify(mid+1,r,L,R,k,rt<<1|1);\n\tupdate(rt);\n}\n\nll query(int l,int r,int L,int R,int rt)//\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c \n{\n\tif(R<l||r<L) return inf;\n\tif(L<=l&&r<=R) return mi[rt];\n\tint mid=(l+r)>>1;\n\tif(lz[rt]) pushdown(rt);\n\treturn min(query(l,mid,L,R,rt<<1),query(mid+1,r,L,R,rt<<1|1));\n}\n\ninline void adl(int x,int y,int k)\n{\n\twhile(tp[x]!=tp[y])\n\t{\n\t\tif(d[tp[x]]<d[tp[y]]) swap(x,y);//\u6bcf\u6b21\u66f4\u65b0\u94fe\u9876\u6df1\u5ea6\u5927\u7684 \n\t\tmodify(1,n,id[tp[x]],id[x],k,1);//\u66f4\u65b0\u5f53\u524d\u70b9\u5230\u94fe\u9876 \n\t\tx=f[tp[x]][0];//\u8df3\u5230\u94fe\u9876\u7684\u7236\u4eb2 \n\t}\n\tif(d[x]<d[y]) swap(x,y);\n\tmodify(1,n,id[y],id[x],k,1);//\u6700\u540e\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\u4e86\uff0c\u76f4\u63a5\u66f4\u65b0 \n}\n\ninline int getfa(int x,int k)\n{\n\tfor(rg int i=T;i>=0;--i)\n\t\tif(k>=(1<<i))\n\t\t\tx=f[x][i], k-=(1<<i);\n\treturn x;\n}\n\nint main()\n{\n\trg int i,x,y,k,opt;\n\tre(n); re(m);\n\tT=(int)log2(n)+1;\n\tfor(i=1;i<n;++i)\n\t{\n\t\tre(x); re(y);\n\t\tadd(x,y); add(y,x);\n\t}\n\tfor(i=1;i<=n;++i) re(a[i]);\n\td[1]=1;//\u76f4\u63a5\u4ee51\u4e3a\u6839\u8dd1\u6811\u5256 \n\tdfs1(1);\n\tdfs2(1,1);\n\tre(root);//\u8bfb\u5165\u5f53\u524d\u6839 \n\tbuild(1,n,1);//\u5efa\u6811 \n\twhile(m--)\n\t{\n\t\tre(opt);\n\t\tswitch(opt)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tre(root);//\u8bfb\u5165\u65b0\u6839 \n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tre(x); re(y); re(k);\n\t\t\t\tadl(x,y,k);//\u94fe\u66f4\u6539 \n\t\t\t\tbreak;a's'd \n\t\t\tcase 3:\n\t\t\t\tre(x);\n\t\t\t\tif(x==root) printf(\"%lld\\n\",mi[1]);//\u662f\u5f53\u524d\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u8f93\u51fa\u5168\u5c40\u6700\u5c0f\u503c \n\t\t\t\telse\n\t\t\t\t\tif(d[x]<d[root]&&f[y=getfa(root,d[root]-d[x]-1)][0]==x)//\u5982\u679cx\u662froot\u7684\u7956\u5148\u7684\u8bdd \n\t\t\t\t\t{//\u5148\u627e\u5230\u4e86root\u5728\u7684x\u7684\u5b50\u6811\u7684\u90a3\u4e2a\u6839 \n\t\t\t\t\t\tp=query(1,n,1,id[y]-1,1);//1~id[y]\u7684\u90e8\u5206 \n\t\t\t\t\t\tif(id[y]+siz[y]<=n) q=query(1,n,id[y]+siz[y],n,1);//id[y]+siz[y]~n\u7684\u90e8\u5206 \n\t\t\t\t\t\telse q=inf;\n\t\t\t\t\t\tprintf(\"%lld\\n\",min(p,q));//\u53d6min \n\t\t\t\t\t}\n\t\t\t\t\telse//\u5426\u5219\u76f4\u63a5\u66f4\u6539x\u5b50\u6811 \n\t\t\t\t\t\tprintf(\"%lld\\n\",query(1,n,id[x],id[x]+siz[x]-1,1));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539350712,
        "uid": 60085,
        "name": "L__A",
        "ccfLevel": 7,
        "title": "\u5904\u7406\u5e26\u6362\u6839\u64cd\u4f5c\u7684\u6811\u94fe\u5256\u5206\uff08luogu P3979 \u9065\u8fdc\u7684\u56fd\u5ea6\uff09"
    },
    {
        "content": "\u6811\u5256\u6362\u6839\u554a,,zz\u7684\u6211zz\u7684\u8bf7\u6559lxl,\u5927\u5e08\u62cd\u6848\u5927\u7b11,\u4e0d\u8bed,\u5c11\u9877,\u6211\u5927\u547c:\"\u6211\u662fzz!\"\u5475\u5475,\u592a\u5c34\u5c2c\u4e86...\n\n+ \u8bb0\u5f53\u524d\u6839\u4e3art,\u67e5\u8be2\u8282\u70b9u,\u6362\u6839\u65e0\u975e\u4e09\u79cd\u60c5\u51b5:\n\t+ 1:u==rt,return minn[1];\n\t+ 2:u\u4e0d\u662frt\u7684\u7956\u5148,\u5373u\u4e0d\u57281->rt\u8fd9\u6761\u8def\u5f84\u4e0a,\u65e0\u6240\u8c13,\u76f4\u63a5\u6309u\u4e3a\u6839\u7684\u5b50\u6811\u8fd4\u56de\n\t+ 3:u\u662frt\u7684\u7956\u5148,\u5373u\u57281->rt\u8fd9\u6761\u8def\u5f84\u4e0a,**\u6700\u7279\u6b8a\u7684\u60c5\u51b5**\n\n\u4e3b\u8981\u5c31\u662f\u7b2c3\u79cd\u561b,\u5176\u5b9e\u4e5f\u5f88\u597d\u60f3\n\n*\u627e\u5230\u8def\u5f84u->rt\u4e0a\u7684u\u7684\u76f4\u7cfb\u513f\u5b50v*,\n\n\u5c31\u4f1a\u53d1\u73b0rt\u4e3a\u6839\u65f6,u\u5b50\u6811\u8986\u76d6\u4e0d\u5230\u7684\u5730\u65b9\u662f**v\u53cav\u7684\u5b50\u6811**\t\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u90a3\u4e00\u6bb5\u62a0\u51fa\u6765,\u56e0\u4e3a**\u5b50\u6811\u7684\u91cd\u513f\u5b50\u5e8f\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u561b!**\u4e4b\u540e\u8ba1\u7b97\u5269\u4f59\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x7fffffff\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\nconst int N=1e5+5;\nint rt,n,m,dep[N],f[N],num[N],son[N],top[N],tpos[N],pre[N],tot,cnt,bj[N<<2],minn[N<<2],first[N],w[N];\nstruct edge{int nt,to;}e[N<<1];\nvoid add(int u,int v){e[++cnt]=(edge){first[u],v};first[u]=cnt;}\nvoid dfs1(int u,int fa)\n{\n\tnum[u]=1;\n\tfor(int i=first[u];i;i=e[i].nt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tf[v]=u,dep[v]=dep[u]+1;\n\t\tdfs1(v,u);\n\t\tnum[u]+=num[v];\n\t\tif(num[v]>num[son[u]]) son[u]=v;\n\t}\n}\nvoid dfs2(int u,int tp)\n{\n\ttop[u]=tp,tpos[u]=++tot,pre[tot]=u;\n\tif(son[u]) dfs2(son[u],tp);\n\tfor(int i=first[u];i;i=e[i].nt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==f[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\nvoid pushup(int rt){minn[rt]=min(minn[rt<<1],minn[rt<<1|1]);}\nvoid pushdown(int rt)\n{\n\tif(bj[rt])\n\t{\n\t\tbj[rt<<1]=bj[rt<<1|1]=bj[rt];\n\t\tminn[rt<<1]=minn[rt<<1|1]=bj[rt];\n\t\tbj[rt]=0;\n\t}\n}\nvoid build(int l,int r,int rt)\n{\n\tif(l==r)\n\t{\n\t\tminn[rt]=w[pre[l]];\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(lson),build(rson);\n\tpushup(rt);\n}\nvoid modify(int l,int r,int rt,int nowl,int nowr,int c)\n{\n\tif(nowl<=l&&r<=nowr)\n\t{\n\t\tminn[rt]=bj[rt]=c;\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tpushdown(rt);\n\tif(nowl<=m) modify(lson,nowl,nowr,c);\n\tif(nowr>m) modify(rson,nowl,nowr,c);\n\tpushup(rt);\n}\nint query(int l,int r,int rt,int nowl,int nowr)\n{\n\tif(nowl<=l&&r<=nowr) return minn[rt];\n\tint m=(l+r)>>1,ans=INF;\n\tpushdown(rt);\n\tif(nowl<=m) ans=min(ans,query(lson,nowl,nowr));\n\tif(nowr>m) ans=min(ans,query(rson,nowl,nowr));\n\tpushup(rt);\n\treturn ans;\n}\nvoid chain_modify(int u,int v,int w)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tmodify(1,n,1,tpos[top[u]],tpos[u],w);\n\t\tu=f[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tmodify(1,n,1,tpos[u],tpos[v],w);\n}\nint find(int u)\n{\n\tif(u==rt) return -1;\n\tif(tpos[u]>=tpos[rt]||tpos[u]+num[u]-1<tpos[rt]) return 0;\n\tint now=rt;\n\twhile(top[now]!=top[u])\n\t{\n\t\tif(f[top[now]]==u) return top[now];\n\t\tnow=f[top[now]];\n\t}\n\treturn son[u];\n}\nint tree_query(int u)\n{\n\tint bo=find(u);\n\tif(bo==-1) return minn[1];\n\tif(bo==0) return query(1,n,1,tpos[u],tpos[u]+num[u]-1);\n\telse\n\t{\n\t\tint ans=query(1,n,1,1,tpos[bo]-1);\n\t\tif(tpos[bo]+num[bo]-1!=n) ans=min(ans,query(1,n,1,tpos[bo]+num[bo],n));\n\t\treturn ans;\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u,v;i<n;++i) scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",&w[i]);\n\tdfs1(1,0),dfs2(1,1),build(1,n,1);\n\tscanf(\"%d\",&rt);\n\tfor(int i=1,bo,u,v,w;i<=m;++i)\n\t{\n\t\tscanf(\"%d\",&bo);\n\t\tif(bo==1) scanf(\"%d\",&rt);\n\t\tif(bo==2) scanf(\"%d%d%d\",&u,&v,&w),chain_modify(u,v,w);\n\t\tif(bo==3) scanf(\"%d\",&u),printf(\"%d\\n\",tree_query(u));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541391725,
        "uid": 54211,
        "name": "\u5bd2\u9165",
        "ccfLevel": 0,
        "title": "\u6811\u5256\u6362\u4e2a\u6839(\u88ablxl\u5632\u7b11\u796d)"
    },
    {
        "content": "$$\\text{\u524d\u8a00}$$\n\n$\\quad$\u53ef\u4ee5\u770b\u770b\u6211\u7684\u4e00\u7bc7blog[\u5173\u4e8e\u6811\u94fe\u5256\u5206\"\u6362\u6839\u64cd\u4f5c\"\u7b14\u8bb0](https://www.luogu.com.cn/blog/Farkas/guan-yu-shu-lian-pou-fen-huan-gen-cao-zuo-bi-ji)(\u5185\u5bb9\u90fd\u5dee\u4e0d\u591a)\n\n$\\quad$\u53e6\u5916\u6d1b\u8c37\u4e0a\u8fd8\u6709\u4e00\u9053\u5173\u4e8e\u6362\u6839\u64cd\u4f5c\u7684\u9898\u76ee\uff1a[CF916E Jamie and Tree](https://www.luogu.com.cn/problem/CF916E)([\u6211\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/Farkas/solution-cf916e))\n\n$$\\text{\u5173\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u64cd\u4f5c}$$\n\n1. \u6362\u6839\uff0c\u76f4\u63a5\u6362\u5373\u53ef\n\n2. \u8def\u5f84\u4fee\u6539\uff0c\u5c31\u548c\u666e\u901a\u6811\u5256\u4e00\u6837\u3002\n\n3. \u5b50\u6811\u4fee\u6539\uff0c\u8fd9\u4e2a\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u3002(\u4e0b\u9762\u4f1a\u7ec6\u8bb2)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gmu2iblr.png))\n\n$$\\text{\u6362\u6839}$$\n\n$\\quad$\u56e0\u4e3a\u6bcf\u6362\u4e00\u6b21\u6839\uff0c\u6811\u4e2d\u7684\u5f88\u591a\u4fe1\u606f\u90fd\u4f1a\u6539\u53d8\uff0c\u4e0d\u53ef\u80fd\u6bcf\u6b21\u6362\u6839\u90fd\u8dd1\u4e24\u4fbf $dfs$ \u9884\u5904\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5176\u4ed6\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u5355\u7eaf\u7684\u6362\u6839\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf $root$ \u6765\u5b58\u50a8\u6839\u7684\u7f16\u53f7( $root$ \u521d\u59cb\u5316\u4e3a $1$ \uff0c\u9ed8\u8ba4\u4ee5 $1$ \u4e3a\u6839)\uff0c\u5bf9\u4e8e\u5176\u4ed6\u64cd\u4f5c\uff0c\u518d\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba $root$ \u7684\u4f4d\u7f6e\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\n\n$$\\text{\u5b50\u6811\u4fee\u6539(\u67e5\u8be2)}$$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4ar4m3w5.png)\n\n$\\quad$ \u60c5\u51b5 $1$ \uff1a\u5f53 $x=root$ \u65f6\uff0c $x$ \u5c31\u662f\u6b64\u65f6\u6574\u68f5\u6811\u7684\u6839\uff0c\u90a3\u4e48\u5c31\u662f\u5168\u5c40\u4fee\u6539(\u67e5\u8be2)\u3002\n\n$\\quad$ \u60c5\u51b5 $2$ \uff1a\u5f53 $root$ \u5728x\u5b50\u6811\u4e2d\u65f6\uff0c\u5c31\u9700\u8981\u7279\u522b\u5224\u65ad\u4e86\uff0c\u6839\u636e\u56fe\u50cf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6x\u7684\u771f\u6b63\u5b50\u6811\u662f\u5305\u62ec\u9664\u4e86 $root$ \u65b9\u5411\u4e0a\u7684\u5b50\u6811\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u8282\u70b9\u3002\n\n$\\quad$ \u5bf9\u4e8e\u6c42\u6700\u5c0f\u503c\uff0c\u9700\u8981\u53bb\u9664root\u8fd9\u9897\u5b50\u6811\u4e0a\u7684\u8303\u56f4\uff0c\u6240\u4ee5\u6211\u6253\u4e86\u4e00\u4e2a\u7279\u522b\u7684\u7ebf\u6bb5\u6811\u67e5\u8be2\uff0c\u53e6\u5916\u8fd8\u9700\u8981\u4e00\u4e2afind\u64cd\u4f5c\u6765\u5bfb\u627ex\u4e2droot\u6240\u5728\u7684\u513f\u5b50\u8282\u70b9\u3002\n```cpp\nil int query2(int k,int l,int r,int x,int y)\n{\n  if(l>y||r<x)return sum[k];\n  if(x<=l&&y>=r)return inf;\n  int mid=l+r>>1,res=inf;\n  if(c[k])pushdown(k,l,r,mid);\n  res=min(res,query2(k<<1,l,mid,x,y));\n  res=min(res,query2(k<<1|1,mid+1,r,x,y));\n  return res;\n}\nil int find(int x,int y)\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      if(father[fx]==y)return top[x];\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return son[x];\n}\nil int query1(int x)\n{\n  int res=0;\n  if(x==root){return query(1,1,n,1,n);}\n  if(seg[root]>=seg[x]&&seg[root]<=seg[x]+size[x]-1){//\u5224\u65adroot\u5728x\u7684\u5b50\u6811\u4e2d\n    int y=find(x,root);\n    res=query2(1,1,n,seg[y],seg[y]+size[y]-1);\n    return res;\n  }\n  return query(1,1,n,seg[x],seg[x]+size[x]-1);\n}\n```\n\n$\\quad$ \u60c5\u51b5 $3$ \uff1a\u5176\u4ed6\u60c5\u51b5\u4e0b $x$ \u7684\u5b50\u6811\u4ee5 $root$ \u4e3a\u6839\u548c\u4ee5 $1$ \u4e3a\u6839\u662f\u4e00\u6837\u7684\u3002\n\n\n$$\\text{\u5b8c\u6574\u4ee3\u7801}$$\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<stack>\nusing namespace std;\n#define int long long\n#define next neee\n#define re register int\n#define il inline\n#define inf 1e18\nil int read()\n{\n\tint x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return x*f;}\nil void print(int x)\n{\n\tif(x<0)putchar('-'),x=-x;\n    if(x/10)print(x/10);\n    putchar(x%10+'0');}\nconst int N=1e6+5;\nint n,m,next[N<<1],go[N<<1],head[N],tot,a[N],top[N],root;\nint sum[N<<2],seg[N],rev[N],son[N],size[N],dep[N],father[N],c[N<<2];\nil void Add(int x,int y)\n{next[++tot]=head[x];head[x]=tot;go[tot]=y;}\nil void dfs1(int x,int fa)\n{\n  father[x]=fa;dep[x]=dep[fa]+1;size[x]=1;\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(y==fa)continue;\n      dfs1(y,x);\n      size[x]+=size[y];\n      if(size[y]>size[son[x]])son[x]=y;\n    }\n}\nil void dfs2(int x,int topf)\n{\n  top[x]=topf;seg[x]=++seg[0];rev[seg[x]]=x;\n  if(!son[x])return;\n  dfs2(son[x],topf);\n  for(re i=head[x],y;i,y=go[i];i=next[i])\n    {\n      if(top[y])continue;\n      dfs2(y,y);\n    }\n}\nil void build(int k,int l,int r)//\u5efa\u6811\n{\n  if(l==r){sum[k]=a[rev[l]];return;}\n  int mid=l+r>>1;\n  build(k<<1,l,mid);build(k<<1|1,mid+1,r);\n  sum[k]=min(sum[k<<1],sum[k<<1|1]);\n}\nil void ADD(int k,int l,int r,int v){sum[k]=c[k]=v;}//\u4fee\u6539\nil void pushdown(int k,int l,int r,int mid)//\u4e0b\u4f20\u61d2\u6807\u8bb0\n{\n  if(l==r){c[k]=0;return;}\n  ADD(k<<1,l,mid,c[k]);ADD(k<<1|1,mid+1,r,c[k]);\n  c[k]=0;}\nil void change1(int k,int l,int r,int x,int y,int z)//\u533a\u95f4\u4fee\u6539\n{\n  if(x<=l&&y>=r){ADD(k,l,r,z);return;}\n  int mid=l+r>>1;\n  if(c[k])pushdown(k,l,r,mid);\n  if(x<=mid)change1(k<<1,l,mid,x,y,z);\n  if(y>mid)change1(k<<1|1,mid+1,r,x,y,z);\n  sum[k]=min(sum[k<<1],sum[k<<1|1]);\n}\nil int query(int k,int l,int r,int x,int y)//\u533a\u95f4\u8be2\u95ee\n{\n  if(x<=l&&y>=r)return sum[k];\n  int mid=l+r>>1,res=inf;\n  if(c[k])pushdown(k,l,r,mid);\n  if(x<=mid)res=query(k<<1,l,mid,x,y);\n  if(y>mid)res=min(res,query(k<<1|1,mid+1,r,x,y));\n  return res;\n}\nil int query2(int k,int l,int r,int x,int y)//\u7279\u6b8a\u7684\u533a\u95f4\u8be2\u95ee\n{\n  if(l>y||r<x)return sum[k];\n  if(x<=l&&y>=r)return inf;\n  int mid=l+r>>1,res=inf;\n  if(c[k])pushdown(k,l,r,mid);\n  res=min(res,query2(k<<1,l,mid,x,y));\n  res=min(res,query2(k<<1|1,mid+1,r,x,y));\n  return res;\n}\nil int find(int x,int y)//\u627eroot\u6240\u5728\u7684\u513f\u5b50\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      if(father[fx]==y)return top[x];\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  return son[x];\n}\nil void change2(int x,int y,int z)//\u8def\u5f84\u4fee\u6539\n{\n  int fx=top[x],fy=top[y];\n  while(fx!=fy)\n    {\n      if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n      change1(1,1,n,seg[fx],seg[x],z);\n      x=father[fx];fx=top[x];\n    }\n  if(dep[x]>dep[y])swap(x,y);\n  change1(1,1,n,seg[x],seg[y],z);\n}\nil int query1(int x)//\u5b50\u6811\u4fee\u6539\n{\n  int res=0;\n  if(x==root){return query(1,1,n,1,n);}\n  if(seg[root]>=seg[x]&&seg[root]<=seg[x]+size[x]-1){\n    int y=find(x,root);\n    res=query2(1,1,n,seg[y],seg[y]+size[y]-1);\n    return res;\n  }\n  return query(1,1,n,seg[x],seg[x]+size[x]-1);\n}\nsigned main()\n{\n  n=read();m=read();\n  for(re i=1;i<n;i++){re x=read(),y=read();Add(x,y);Add(y,x);}\n  for(re i=1;i<=n;i++)a[i]=read();\n  root=read();dfs1(root,0);dfs2(root,root);build(1,1,n);\n  while(m--)\n    {\n      re k=read();\n      if(k==1)root=read();\n      if(k==2){re x=read(),y=read(),z=read();change2(x,y,z);}\n      if(k==3){re x=read();print(query1(x));putchar('\\n');}\n    }\n  return 0;\n}\n\n```\n\n$\\quad$ \u4ee5\u4e0a\u5c31\u662f\u5168\u90e8\u5185\u5bb9\u4e86\uff0c\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u4e0d\u59a8\u70b9\u4e2a\u8d5e\u5427\uff01",
        "postTime": 1604495938,
        "uid": 109220,
        "name": "Farkas_W",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u505a\u5b8c\u8fd9\u9898\u60f3\u5fc5\u4f1a\u5bf9$LCT$\u6709\u4e00\u4e2a\u65b0\u7684\u8ba4\u8bc6\u5427\u3002\n\n\u66fe\u7ecf\u6709\u4eba\u8bf4\u8fc7\u6811\u5256\u80fd\u505a\u7684\u9898$LCT$\u90fd\u80fd\u505a\uff08\u867d\u7136\u53ef\u80fd\u4f1a\u5f88\u9ebb\u70e6\uff09\n\n\u5148\u770b\u8fd9\u9898\u7684\u64cd\u4f5c\uff1a\n\n- \u6362\u6839\n- \u94fe\u4fee\u6539\n- \u5b50\u6811\u6c42\u6700\u5c0f\u503c\n\n\u82e5\u6ca1\u6709$3$\u64cd\u4f5c\u663e\u7136\u4f18\u5148\u8003\u8651$LCT$\u3002\n\n\u90a3\u5982\u4f55\u5904\u7406$3$\u64cd\u4f5c\u5462\n\n\u6211\u4eec\u8003\u8651\u5206\u5f00\u5904\u7406\u5b50\u6811\u4e0e\u94fe\u7684\u8d21\u732e\uff0c\u8bb0\u5b50\u6811\u7684\u6700\u5c0f\u503c\u4e3a$ts$\uff0c\u94fe\u7684\u6700\u5c0f\u503c\u4e3a$tc$\n\n\u90a3\u4e48\u663e\u7136$min(ts,tc)$\u5373\u4e3a\u6240\u6c42\n\n\u94fe\u7684\u6700\u5c0f\u503c\u975e\u5e38\u597d\u5904\u7406\uff0c\u5c31\u662f$LCT$\u7684\u677f\u5b50\uff0c\u4e0d\u591a\u52a0\u8d58\u8ff0\u4e86\n\n\u4e3b\u8981\u8003\u8651\u5b50\u6811\u7684\u8d21\u732e\n\n\u8003\u8651\u4e0e\u6bcf\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\uff0c\u4e0d\u662f\u5b9e\u8fb9\u5c31\u662f\u865a\u8fb9\uff0c\u5b9e\u8fb9\u7684\u4fe1\u606f\u7531\u94fe\u5904\u7406\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8981\u8003\u8651\u7684\u53ea\u6709\u865a\u8fb9\uff0c\u7531\u8bb0\u5f55\u865a\u5b50\u6811\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8054\u60f3\u5230\u7528\u67d0\u79cd\u4e1c\u897f\u7ef4\u62a4\u865a\u5b50\u6811\n\n\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5f53\u7136\u662f\u5e73\u8861\u6811\u4e86\n\n\u8fd9\u91cc\u5077\u61d2\u4f7f\u7528\u4e86$multiset$\uff08\u7b2c\u4e00\u904d$splay$\u5199\u6302\u4e86\uff0c\u5199\u4e86200+\u884c\uff0c\u53c8\u4e11\u53c8\u957f\uff09\n\n\u6ce8\u610f\u672c\u9898\u6700\u5927\u7684\u7ec6\u8282\u5c31\u5728\u4e8e\u5bf9\u4e8e\u6839\u7684\u5904\u7406\uff0c\u7531\u4e8e\u94fe\u4fee\u6539\u4f1a\u6362\u6839\uff0c\u6240\u4ee5\u9700\u8981\u5728\u94fe\u4fee\u6539\u540e\u628a\u6839\u6362\u56de\u6765\n\n\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u7684\u6839\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e$makeroot$\n\ncode\uff1a\uff08\u7801\u98ce\u5e94\u8be5\u8fd8\u7b97\u6b63\u5e38\uff09\n\n```cpp\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define inl inline\n#define re register int\n#define lowbit(x) ((x) & (-x))\n#define ll long long\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define fa(x) t[x].fa\nconst int inf = 0x7fffffff;\nusing namespace std;\ntemplate < class Read >\ninl Read read() {\n\tRead x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\nstruct node {\n\tint child[2], fa, w, tot, tc, ts;\n\tbool filp, modify;\n\tmultiset<int>s;\n} t[200001];\nbool vis[200001];\ninl void upd(int x) {\n\tt[x].tc = t[x].tot = t[x].w, t[x].ts = inf;\n\tt[x].tc = min(min(t[ls(x)].tc, t[rs(x)].tc), t[x].tc);//\u94fe\n\tt[x].ts = min(min(t[ls(x)].ts, t[rs(x)].ts), *t[x].s.begin());//\u5b50\u6811\n\tt[x].tot = min(t[x].tc, t[x].ts);\n}\ninl void reverse(int x) {\n\tswap(ls(x), rs(x));\n\tt[x].filp ^= 1;\n}\ninl void change(int x, int w) {\n\tif (!x)return;\n\tt[x].tc = t[x].w = w, t[x].modify = 1, t[x].tot = min(t[x].tc, t[x].ts);\n}\ninl void pushdown(int x) {\n    //\u6ce8\u610f\u8fd9\u91cc\u7684\u4fee\u6539\u4e0d\u80fd\u6e05\u7a7afilp\u6807\u8bb0\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684filp\u5e76\u4e0d\u662f\u94fe\u7ffb\u8f6c\n\tif (t[x].modify) {\n\t\tif (ls(x))change(ls(x), t[x].w);\n\t\tif (rs(x))change(rs(x), t[x].w);\n\t\tt[x].modify = 0;\n\t}\n\tif (t[x].filp) {\n\t\tif (ls(x))reverse(ls(x));\n\t\tif (rs(x))reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n}\ninl bool poi(int x) {\n\treturn rs(fa(x)) == x;\n}\ninl bool nroot(int x) {\n\treturn ls(fa(x)) == x || rs(fa(x)) == x;\n}\ninl void rotate(int x) {\n\tint f = fa(x), gf = fa(f);\n\tbool fs = poi(x), gfs = poi(f);\n\tint s = t[x].child[fs ^ 1];\n\tif (nroot(f))t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\tfa(x) = gf, fa(f) = x;\n\tif (s)fa(s) = f;\n\tupd(f);\n}\ninl void push(int x) {\n\tif (nroot(x))push(fa(x));\n\tpushdown(x);\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tupd(x);\n}\ninl void access(int x) {\n\tfor (re i = 0; x; x = t[i = x].fa) {\n\t\tsplay(x);\n\t\tif (i) t[x].s.erase(t[x].s.lower_bound(t[i].tot));\n\t\tif (rs(x))t[x].s.insert(t[rs(x)].tot);\n\t\trs(x) = i, upd(x);\n\t}\n}\ninl void makeroot(int x) {\n\taccess(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n\tmakeroot(y), access(x), splay(x);\n}\nstruct edge {\n\tint next, to;\n}e[5000001];\nint tot, head[5000001];\ninl void add(int x, int y) {\n\te[++tot] = edge{ head[x],y }, head[x] = tot;\n}\nvoid dfs(int x, int fa) {\n\tt[x].s.insert(inf);\n\tt[x].fa = fa;\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (e[i].to != fa) {\n\t\t\tdfs(e[i].to, x);\n\t\t\tt[x].s.insert(t[e[i].to].tot);\n\t\t}\n\t}\n\tupd(x);\n}\nsigned main() {\n\tt[0].tc = t[0].ts = t[0].tot = inf;\n\tt[0].s.insert(inf);//\u7531\u4e8e0\u8282\u70b9\u662f\u6bcf\u4e2a\u8282\u70b9\u521d\u59cb\u65f6\u7684\u513f\u5b50\uff0c\u4e3a\u4e86\u5c11\u52a0\u51e0\u53e5if\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\u6210inf;\n\tre n = read<int>(), m = read<int>(), x, y, w, root, op;\n\tfor (re i = 1; i < n; i++) {\n\t\tx = read<int>(), y = read<int>();\n\t\tadd(x, y), add(y, x);\n\t}\n\tfor (re i = 1; i <= n; i++)t[x].tot = t[x].tc = t[i].w = read<int>(), t[x].ts = inf;//\u521d\u59cb\u5316\n\troot = read<int>();\n\tdfs(root, 0);\n\tmakeroot(root);\n\twhile (m--) {\n\t\top = read<int>();\n\t\tif (op == 1) {\n\t\t\tmakeroot(root = read<int>());\n\t\t}\n\t\telse if (op == 2) {\n\t\t\tx = read<int>(), y = read<int>(), w = read<int>();\n\t\t\tsplit(x, y), change(x, w), makeroot(root);\n\t\t}\n\t\telse {\n\t\t\tx = read<int>();\n\t\t\taccess(x), splay(x), printf(\"%d\\n\", min(t[x].w, *t[x].s.begin()));\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1553511561,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P3979 \u9065\u8fdc\u7684\u56fd\u5ea6 LCT\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f"
    },
    {
        "content": "\u6211\u4eec\u8003\u8bd5T3 \u521d\u4e00\u849f\u84bb\u83ab\u540d\u4f1a\u505a\n\n**\u5927\u96fe**\n___\n### \u4e00\u3001\u57fa\u672c\u5206\u6790\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\u64cd\u4f5c\n\n- \u8def\u5f84\u4fee\u6539\n\n- \u67e5\u8be2\u5b50\u6811\u6700\u503c\n\n\u5982\u679c\u53ea\u6709\u6b64\u4e8c\u64cd\u4f5c\u80af\u5b9a\u662f\u6811\u5256\u88f8\u9898\u4e00\u9053\n\n**\u4f46\u662f**\n\n*\u201c\u5982\u679c opt=1\uff0c\u63a5\u4e0b\u6765\u6709\u4e00\u4e2a\u6574\u6570 id\uff0c\u4ee3\u8868\u628a\u9996\u90fd\uff08\u6811\u6839\uff09\u4fee\u6539\u4e3a id\u201d*\n\n**\u6709\u6362\u6839\u64cd\u4f5c**\n\n\u88f8\u6811\u5256\u77ac\u95f4\u5d29\u584c\uff08\u603b\u5256\u5206\u590d\u6742\u5ea6\u90fd\u5df2\u7ecf$\\Theta(nq)$\u4e86...)\n\n\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u6362\u6839\n\n### \u4e8c\u3001\u6362\u6839\u7684\u5b9e\u73b0\n\n\u5047\u8bbe\u6709\u4e00\u9897~~\u7f8e\u4e3d\u7684~~\u6811\uff0c\u5b83\u957f\u8fd9\u6837\uff1a\n\n![](https://s2.ax1x.com/2019/09/18/nTRYWV.png)\n\n\u9996\u5148\u4ee5 **1** \u4e3a\u6839\u5256\u4e00\u4e0b\n\n\u8003\u8651\u6362\u6839\u4e3a **5**\n\n\u6811\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\n\n![](https://s2.ax1x.com/2019/09/18/nT4lcV.png)\n\n\u5bf9\u73b0\u5728\u800c\u8a00\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u6240\u6709\u70b9\u5148\u540e\u7684\u7b54\u6848\n\n- \u7b54\u6848\u4e00\u6837\u7684 \uff1a 2\uff0c 3\uff0c 4\uff0c 6\n\n- \u4e0d\u540c\u7684\uff1a\n\n\u2014\u2014\u2014\u2014\u2014\u2014**1**\uff1a\u7b54\u6848\u53d8\u4e3a\u9664 **5** \u5b50\u6811\u5916\u7684\u7b54\u6848\n\n\u2014\u2014\u2014\u2014\u2014\u2014**5**\uff1a\u7b54\u6848\u53d8\u4e3a\u5168\u6811\n\n\u770b\u51fa\u4ec0\u4e48\u6ca1\u6709\uff1f\n\n\u82e5\u8bbe\u5f53\u524d\u6839\u8282\u70b9\u4e3a**root**,\u8be2\u95ee\u8282\u70b9\u4e3a**id**\uff1b\n\n\u65b9\u6848 \uff1a \n\n- \u82e5**root==id**\uff0c\u7b54\u6848\u4e3a\u5168\u6811\uff08\u8fd9\u4e0d\u7528\u7406\u89e3\u5427\uff09\n\n- \u82e5**root\u4e0eid\u4e0d\u5728\u540c\u4e00\u5b50\u6811** \u6216 **dep[id] < dep[root]** \u7b54\u6848\u4e0d\u53d8\uff08\u5f71\u90fd\u5f71\u54cd\u4e0d\u5230\uff09\n\n- \u82e5**id\u5728 root-->1 \u8fd9\u6761\u8def\u5f84\u4e0a** \u7b54\u6848\u5c31\u662f **\u5168\u6811\u7684\u7b54\u6848\u51cf\u53bbroot\u6240\u5728\u7684id\u7684\u5b50\u6811\u4e2d\u7684\u7b54\u6848**\n\n\u60c5\u51b5 3 \u5199\u6210\u5224\u65ad\u5c31\u662f\n```cpp\ndep[x] < dep[root] && fa[temp=LCAson(x,root)] == x//LCAson\u662flca\u4e8eroot\u65b9\u5411\u7684\u513f\u5b50\n```\n\u7136\u540e\n\n\u5c31\u662f\u51e0\u4e4e\u88f8\u7684\u6811\u5256\u4e86\u3002\u3002\u3002\n\n### \u4e09\u3001$\\mathfrak{Code}$\n\n\u5982\u679c\u4e0d\u61c2\u6811\u5256\u8bf7\u53f3\u8f6c [P3384](https://www.luogu.org/problem/P3384)\n\n\u6700\u540e\u9644\u4e0a\u6211\u4e11\u964b\u7684\u8003\u573a\u4ee3\u7801\n\n```cpp\n//\u6811\u5256\u6362\u6839\uff08\u5927\u96fe\uff09\n#include <cstdio>\nconst int maxn = 1e5+5;\ninline int re() {\n\tchar c;\n\tint w=1;\n\twhile((c=getchar())<'0'||c>'9')if(c=='-')w=-1;\n\tint res = c-'0';\n\twhile((c=getchar())>='0' && c<='9')res = (res<<3) + (res<<1) + c - '0';\n\treturn res * w;\n}\ninline long long min(long long a,long long b) {\n\treturn a<b?a:b;\n}\ninline void swap(int &x,int &y){\n\tx ^= y,y ^= x,x ^= y;\n}\nint n,m,root;\nint head[maxn],tot;\nstruct Edge {\n\tint next,to;\n} e[maxn<<1];\ninline void add_edge(int x,int y) {\n\te[++tot].next = head[x];\n\te[tot].to = y;\n\thead[x] = tot;\n}\n//\u6811\u5256\nlong long val[maxn];\nint fa[maxn],dep[maxn],son[maxn],siz[maxn],top[maxn],tid[maxn],rank[maxn],time;\ninline void dfs1(int u,int fath) {\n\tint maxson = -1;\n\tdep[u] = dep[fath] + 1;\n\tfa[u] = fath;\n\tsiz[u] = 1;\n\tfor(int i=head[u],v; v=e[i].to,i; i=e[i].next) {\n\t\tif(v == fath)continue;\n\t\tdfs1(v,u);\n\t\tsiz[u] += siz[v];\n\t\tif(siz[v] > maxson)maxson = siz[v],son[u] = v;\n\t}\n\treturn ;\n}\ninline void dfs2(int u,int topf) {\n\ttid[u] = ++time;\n\trank[time] = u;\n\ttop[u] = topf;\n\tif(!son[u])return ;\n\tdfs2(son[u],topf);\n\tfor(int i=head[u],v; v=e[i].to,i; i=e[i].next) {\n\t\tif(v == fa[u] || v == son[u])continue;\n\t\tdfs2(v,v);\n\t}\n\treturn ;\n}\n//Segment tree\nlong long MIN[maxn << 2];\nlong long lazy[maxn << 2];\ninline void markdown(int k,int l,int r,int mid){\n\tif(!lazy[k])return;\n\tif(l==r)lazy[k] = 0;\n\tMIN[k<<1] = MIN[k<<1|1] = lazy[k<<1] = lazy[k<<1|1] = MIN[k];\n\tlazy[k] = 0;\n}\ninline void build(int k,int l,int r) {\n\tif(l == r) {\n\t\tMIN[k] = val[rank[l]];//bg\n\t\treturn;\n\t}\n\tint mid = l+r >> 1;\n\tbuild(k<<1,l,mid),build(k<<1|1,mid+1,r);\n\tMIN[k] = min(MIN[k<<1],MIN[k<<1|1]);\n\treturn ;\n}\ninline void update(int k,int l,int r,int x,int y,int v) {\n\tif(l>y||r<x)return ;\n\tif(l>=x&&r<=y){\n\t\tMIN[k] = v;\n\t\tlazy[k] = v;\n\t\treturn ;\n\t}\n\tint mid = l+r >> 1;\n\tmarkdown(k,l,r,mid);\n\tupdate(k<<1,l,mid,x,y,v),update(k<<1|1,mid+1,r,x,y,v);\n\tMIN[k] = min(MIN[k<<1],MIN[k<<1|1]);\n\treturn ;\n}\ninline long long query(int k,int l,int r,int x,int y) {\n\tif(l>y||r<x)return 0x7ffffffffff;\n\tif(l>=x&&r<=y)return MIN[k];\n\tint mid = l+r>>1;\n\tmarkdown(k,l,r,mid);\n\treturn min(query(k<<1,l,mid,x,y),query(k<<1|1,mid+1,r,x,y));\n}\n//\u7ee7\u7eed\u6811\u5256\ninline void path_modify(int x,int y,int v){\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tupdate(1,1,n,tid[top[x]],tid[x],v);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tupdate(1,1,n,tid[x],tid[y],v);\n\treturn ;\n}\ninline int LCAson(int x,int y){\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tif(fa[top[x]] == y)return top[x];\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\treturn son[x];\n}\ninline long long Query(int x){\n\tint temp;\n\tif(x == root)return MIN[1];\n\telse if(dep[x] >= dep[root])return query(1,1,n,tid[x],tid[x] + siz[x] - 1);\n\telse if(dep[x] < dep[root] && fa[temp=LCAson(x,root)] == x){\n\t\treturn min(query(1,1,n,1,tid[temp]-1),query(1,1,n,tid[temp] + siz[temp]/* - 1 + 1*/,n));\n\t}\n\telse return query(1,1,n,tid[x],tid[x] + siz[x] - 1);\n}\nint main() {\n//\tfreopen(\"country.in\",\"r\",stdin);\n//\tfreopen(\"country.out\",\"w\",stdout);\n\tn=re(),m=re();\n\tfor(int i=1,u,v;i<n;++i)u = re(),v = re(),add_edge(u,v),add_edge(v,u);\n\tfor(int i=1;i<=n;++i)scanf(\"%lld\",&val[i]);\n\troot = re();\n\tdfs1(1,0),dfs2(1,1);\n\tbuild(1,1,n);\n/*\tfor(int i=1;i<=n;++i)printf(\"%d \",siz[i]);\n\tputs(\"\");*/\n\tfor(int i=1,opt,p1,p2,v;i<=m;++i){\n\t\topt = re();\n\t\tif(opt == 1)root = re();\n\t\tif(opt == 2)p1 = re(),p2 = re(),v = re(),path_modify(p1,p2,v);\n\t\tif(opt == 3)printf(\"%lld\\n\",Query(re()));\n\t}\n\treturn 0;\n}\n```\n~~\u5b8c\u7ed3\u4e0d\u6492\u82b1~~\n\n",
        "postTime": 1568785220,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "```\n//\u8fd9\u9053\u9898\u7ed9\u5b83\u6253\u666e\u53ca+\u7684\u6807\u7b7e\u5b9e\u5728\u662f\u4e8f\u4e86\u8fd9\u9053\u9898\n//\u9664\u4e86\u6362\u6839\u4e4b\u5916\uff0c\u522b\u7684\u64cd\u4f5c\u597d\u50cf\u5c31\u662f\u6811\u5256\u7684\u57fa\u672c\u64cd\u4f5c\u4e86\n//\u6362\u6839\u600e\u4e48\u641e\u5462\uff1f\u4e0d\u80fd\u6362\u8fc7\u6765\u7136\u540e\u91cd\u65b0\u6c42dfs\u5e8f\u7136\u540e\u5efa\u6811\u5427\n//\u753b\u4e00\u4e0b\u56fe\uff0c\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6362\u6839\u4e4b\u540e\u6811\u7684\u5f62\u6001\u662f\u4f1a\u6539\u53d8\u7684\uff0c\u5728\u65b0\u6811\u6839\u4e0a\u8fb9\u7684\u70b9\uff0c\u4ed6\u4eec\u7684\u7238\u7238\u5144\u5f1f\u53d8\u6210\u4e86\u81ea\u5df1\u7684\u513f\u5b50\n//\u4f46\u662f\uff0c\u65b0\u6811\u6839\u7684\u513f\u5b50\u4eec\u7684\u5f62\u6001\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u548c\u65b0\u6811\u6839\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u70b9\u7684\u5b50\u6811\u4e5f\u662f\u6ca1\u6709\u53d8\u7684\n//\u53d8\u4e86\u7684\u53ea\u662f\u65b0\u6811\u6839\u5230\u4e00\u5f00\u59cb\u7684\u6811\u6839\u90a3\u6761\u94fe\u4e0a\u7684\u70b9\n//\u6240\u4ee5\uff0c\u5982\u679c\u8981\u67e5\u8be2\u7684\u70b9\u662f\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\n//\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u67e5\u8be2\u7684\u70b9\u7684\u7238\u7238\u53d8\u6210\u4e86\u548c\u4ed6\u7528\u5c5e\u4e8e\u8fd9\u6761\u94fe\u4e0a\u7684\u90a3\u4e2a\u513f\u5b50\uff0c\n//\u6240\u4ee5\u8fd9\u4e2a\u70b9\u6240\u638c\u7ba1\u7684\u5b50\u6811\u5c31\u662f\u6574\u68f5\u6811\u6316\u53bb\u4e86\u8fd9\u4e2a\u513f\u5b50\u7684\u5b50\u6811 \n//\u90a3\u4e48\u5b83\u7684\u65b0\u513f\u5b50\u4eec\u5728\u7ebf\u6bb5\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u662f\u54ea\u4e00\u5757\u5462\uff1f\n//\u5c31\u662f1->fa_s-1  fa_t+1->n\uff0c \n//\u6240\u4ee5\u6211\u4eec\u6c42\u51fa\u5b83\u7684\u8fd9\u6761\u94fe\u4e0a\u7684\u513f\u5b50\uff0c\u7136\u540equery\u4e0a\u8fb9\u7684\u90a3\u4e24\u4e2a\u533a\u95f4\u5c31\u884c\u4e86\u3002\n//\u4f46\u662f\u600e\u4e48\u627e\u8fd9\u4e2a\u513f\u5b50\u5462\uff1f\u6211\u4eec\u77e5\u9053\u5b83\u4e00\u5b9a\u5728\u8fd9\u6761\u94fe\u4e0a\uff0c\u90a3\u4e48\u6811\u5256\u5904\u7406\u7684top\u662f\u4e0d\u80fd\u627e\u5230\u8fd9\u4e2a\u513f\u5b50\u7684\n//\u90a3\u6211\u4eec\u8981\u6cbf\u7740now_root\u7684father\u4e00\u4e2a\u4e00\u4e2a\u5411\u4e0a\u8df3\uff1f\n//\u4e0d\u53ef\u80fd\u7684   \u6211\u4eec\u53ef\u4ee5\u5728\u5904\u7406\u4e00\u4e2a\u500d\u589e\u6570\u7ec4\uff0c\u7528\u8fd9\u4e2a\u500d\u589e\u6570\u7ec4\u6765\u627e\u513f\u5b50\u3002\n//\u7136\u540e\u95ee\u9898\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u3002 \n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N=1e5+5;\nconst int INF=2147483647;\n\nint n,m,id;\nint opt,p1,p2,v,now_root;\nint w[N];\nint fa[N][17];\nint head[N],num_edge;\nstruct Edge\n{\n\tint v,nxt;\n}edge[N<<1];\nstruct Node\n{\n\tint fa,son;\n\tint dep;\n\tint top;\n\tint size;\n\tint s,t;\n}node[N];\nstruct TREE\n{\n\tTREE *lson,*rson;\n\tint l,r,mid;\n\tint minn,lazy;\n}tree[N<<2];\n\ntypedef TREE* Tree;\nTree Root,now_node=tree;\n\ninline int read()\n{\n\tchar c=getchar();int num=0;\n\tfor(;!isdigit(c);c=getchar());\n\tfor(;isdigit(c);c=getchar())\n\t\tnum=num*10+c-'0';\n\treturn num;\n}\n\ninline void add_edge(int u,int v)\n{\n\tedge[++num_edge].v=v;\n\tedge[num_edge].nxt=head[u];\n\thead[u]=num_edge;\n}\n\nvoid dfs1(int u)\n{\n\tfor(int i=1;i<=17;++i)\t//\u5904\u7406\u500d\u589e\u6570\u7ec4 \n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t\tif(!fa[u][i])\n\t\t\tbreak;\n\t}\n\tnode[u].size=1;\n\tfor(int i=head[u],v;i;i=edge[i].nxt)\n\t{\n\t\tv=edge[i].v;\n\t\tif(v==node[u].fa)\n\t\t\tcontinue;\n\t\tnode[v].fa=u;\n\t\tnode[v].dep=node[u].dep+1;\n\t\tfa[v][0]=u;\t\t//\u7238\u7238 \n\t\tdfs1(v);\n\t\tnode[u].size+=node[v].size;\n\t\tif(node[v].size>node[node[u].son].size)\n\t\t\tnode[u].son=v;\t\t//\u91cd\u513f\u5b50 \n\t}\n}\n\nint bound;\nvoid dfs2(int u,int top)\n{\n\tnode[u].top=top;\n\tnode[u].s=++bound;\t\t//\u7ebf\u6bb5\u6811\u5bf9\u5e94\u533a\u95f4\u7684\u5de6\u7aef\u70b9 \n\tif(node[u].son)\n\t{\n\t\tdfs2(node[u].son,top);\n\t\tfor(int i=head[u],v;i;i=edge[i].nxt)\n\t\t{\n\t\t\tv=edge[i].v;\n\t\t\tif(v==node[u].fa||v==node[u].son)\n\t\t\t\tcontinue;\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n\tnode[u].t=bound;\t//\u7ebf\u6bb5\u6811\u5bf9\u5e94\u533a\u95f4\u7684\u53f3\u7aef\u70b9 \n}\n\nvoid build(Tree &root,int l,int r)\n{\n\troot=++now_node;\n\troot->l=l,root->r=r,root->mid=l+r>>1;\n\troot->lazy=-1;\n\tif(l==r)\n\t\treturn;\n\tbuild(root->lson,l,root->mid);\n\tbuild(root->rson,root->mid+1,r);\n}\n\ninline void pushdown(Tree root)\n{\n\tif(root->lazy!=-1)\n\t{\n\t\troot->lson->lazy=root->lazy;\n\t\troot->rson->lazy=root->lazy;\n\t\troot->lson->minn=root->lazy;\n\t\troot->rson->minn=root->lazy;\n\t\troot->lazy=-1;\n\t}\n}\n\nvoid update(Tree root,int l,int r,int val)\t\t//\u7ebf\u6bb5\u6811\u4fee\u6539 \n{\n\tif(l<=root->l&&root->r<=r)\n\t{\n\t\troot->minn=val;\n\t\troot->lazy=val;\n\t\treturn;\n\t}\n\tpushdown(root);\n\tif(r<=root->mid)\n\t\tupdate(root->lson,l,r,val);\n\telse if(l>root->mid)\n\t\tupdate(root->rson,l,r,val);\n\telse\n\t{\n\t\tupdate(root->lson,l,root->mid,val);\n\t\tupdate(root->rson,root->mid+1,r,val);\n\t}\n\troot->minn=min(root->lson->minn,root->rson->minn);\n}\n\nint query(Tree root,int l,int r)\t//\u7ebf\u6bb5\u6811\u67e5\u8be2 \n{\n\tif(l<=root->l&&root->r<=r)\n\t\treturn root->minn;\n\tpushdown(root);\n\tif(r<=root->mid)\n\t\treturn query(root->lson,l,r);\n\telse if(l>root->mid)\n\t\treturn query(root->rson,l,r);\n\telse\n\t\treturn min(query(root->lson,l,root->mid),query(root->rson,root->mid+1,r));\n}\n\ninline void Modify(int x,int y,int val)\t\t//\u6811\u5256\u7684modify\u64cd\u4f5c \n{\n\tint fx=node[x].top,fy=node[y].top;\n\twhile(fx!=fy)\n\t{\n\t\tif(node[fx].dep>node[fy].dep)\n\t\t{\n\t\t\tupdate(Root,node[fx].s,node[x].s,val);\n\t\t\tx=node[fx].fa;\n\t\t\tfx=node[x].top;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(Root,node[fy].s,node[y].s,val);\n\t\t\ty=node[fy].fa;\n\t\t\tfy=node[y].top;\n\t\t}\n\t}\n\tif(node[x].dep>node[y].dep)\n\t\tupdate(Root,node[y].s,node[x].s,val);\n\telse\n\t\tupdate(Root,node[x].s,node[y].s,val);\n}\n\ninline bool judge(int Y)\t//\u5224\u65ad\u4e00\u4e0b\u5728\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a \n{\n\tint x=now_root,y=Y;\n\tif(node[x].dep<node[y].dep)\n\t\tswap(x,y);\n\tint cha=node[x].dep-node[y].dep;\n\tfor(int i=0;i<=17;++i)\n\t{\n\t\tif(cha&(1<<i))\n\t\t\tx=fa[x][i];\n\t}\n\tif(x!=y)\n\t{\n\t\tfor(int i=17;i>=0;--i)\n\t\t{\n\t\t\tif(fa[x][i]!=fa[y][i])\n\t\t\t\tx=fa[x][i],y=fa[y][i];\n\t\t}\n\t\tx=fa[x][0];\n\t}\n\tif(x==Y)\n\t\treturn 1;\n\treturn 0;\n}\n\ninline int jump(int x,int dep)\t\t//\u500d\u589e\u5f80\u4e0a\u8df3\uff0c\u627e\u513f\u5b50 \n{\n\tfor(int i=0;i<=17;++i)\n\t\tif(dep&(1<<i))\n\t\t\tx=fa[x][i];\n\treturn x;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tint u,v;\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tu=read(),v=read();\n\t\tadd_edge(u,v);\n\t\tadd_edge(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tw[i]=read();\n\tid=read(),now_root=id;\n\tdfs1(id);\n\tdfs2(id,id);\n\tbuild(Root,1,n);\n\tfor(int i=1;i<=n;++i)\n\t\tupdate(Root,node[i].s,node[i].s,w[i]);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\topt=read();\n       \tif(opt==1)\n\t\t{\n\t\t\tid=read();\n\t\t\tnow_root=id;\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tp1=read(),p2=read(),v=read();\n\t\t\tModify(p1,p2,v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tp1=read();\n\t\t\tif(p1==now_root)\t//\u5f53\u524d\u70b9\u662f\u6811\u6839\uff0c\u67e5\u8be2\u6574\u68f5\u6811 \n\t\t\t\tprintf(\"%d\\n\",query(Root,1,n));\n\t\t\telse if(node[p1].s>=node[now_root].s&&node[p1].s<=node[now_root].t)\t\t//\u5f53\u524d\u70b9\u662f\u5f53\u524d\u6811\u6839\u7684\u513f\u5b50\u6216\u8005\u7b49\u4e8e\u5f53\u524d\u6811\u6839 \n\t\t\t\tprintf(\"%d\\n\",query(Root,node[p1].s,node[p1].t));\n\t\t\telse if(judge(p1))\t\t//\u5f53\u524d\u70b9\u548c\u6811\u6839\u5728\u4e00\u6761\u94fe\u4e0a \n\t\t\t{\n//\t\t\t\tint minn=INF;\n//\t\t\t\tminn=min(minn,query(Root,1,node[now_root].s-1));\n//\t\t\t\tif(node[now_root].t<n)\n//\t\t\t\t\tminn=min(minn,query(Root,node[now_root].t+1,n));\n//\t\t\t\tprintf(\"%d\\n\",minn);\n\t\t\t\tint dep=node[now_root].dep-node[p1].dep-1;\n\t\t\t\tint tmp=jump(now_root,dep);\n\t\t\t\tint minn=INF;\n\t\t\t\tif(node[tmp].s>1)\n\t\t\t\t\tminn=min(minn,query(Root,1,node[tmp].s-1));\n\t\t\t\tif(node[tmp].t<n)\n\t\t\t\t\tminn=min(minn,query(Root,node[tmp].t+1,n));\n\t\t\t\tprintf(\"%d\\n\",minn);\n\t\t\t}\n\t\t\telse\t//\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u6ca1\u5f71\u54cd \n\t\t\t\tprintf(\"%d\\n\",query(Root,node[p1].s,node[p1].t));\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n8 100\n1 2\n1 3\n2 4\n2 5\n5 8\n3 6\n6 7\n7 5 3 2 4 1 8 6\n1\n1 3\n3 1\n*/\n```",
        "postTime": 1520749679,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "  ~~\u597d\u50cf\u9664\u4e86\u6362\u6839\u64cd\u4f5c\u4e4b\u5916\u5c31\u662f\u677f\u5b50~~\n  \n  ##### \u90a3\u6211\u4eec\u5c31\u8bb2\u4e0b\u6362\u6839\u5427 \n  \n  ###### \u6362\u6839  \uff1a \u6211\u4eec\u52063\u79cd\u60c5\u51b5\u8ba8\u8bba\n\n1  . \u5982\u679cnow \u548c root \u91cd\u5408 \uff0c\u90a3\u5c31\u662f\u67e5\u8be2\u6574\u68f5\u6811 \uff0c\u76f4\u63a5\u8f93\u51fatmin[1]\u5c31\u597d\u4e86\n\n2  . \u5982\u679cLCA\uff08now\uff0croot\uff09 != now \n     \u8fd9\u65f6\u6839\u4e0enow\u6ca1\u6709\u5173\u7cfb\uff0c\u76f4\u63a5\u67e5\u8be2now\u7684\u5b50\u6811\u5373\u53ef\n     \n3  . \u5982\u679cLCA\uff08now,root) = now\n\n   ~~\u8fd9\u65f6\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86~~\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u4e00\u4e0bnow\u7684\u6240\u6709\u513f\u5b50\n\t\n   ###### \u7531\u4e8e \u4e00\u4e2a\u5b50\u6811\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\n    \n\t\u6240\u4ee5 \u5982\u679c\u8fd9\u4e2a\u513f\u5b50\u7684id\u5927\u4e8e\u7b49\u4e8eroot\n\t\n    \u5e76\u4e14\u8fd9\u4e2a\u5b50\u6811\u4e2d\u7684\u6700\u5927dfs\u5e8f\uff08id[son]+size[son]-1\uff09\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684root\n\t\n    \u90a3\u4e48\u5c31\u53ef\u4ee5\u5224\u65ad\u51faroot\u5728\u8fd9\u4e2a\u513f\u5b50\u4e2d\u6216\u8005\u5c31\u662f\u8fd9\u4e2a\u513f\u5b50,\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u513f\u5b50\n    \n\t\u8fd8\u662f\u90a3\u53e5\u8bdd \uff1a\u4e00\u4e2a\u5b50\u6811\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\n    \n\t\u8fd9\u65f6now\u7684\u5b50\u6811\u5c31\u662f\u53bb\u9664\u5305\u542broot\u7684\u90a3\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u7684\u6574\u68f5\u6811\u4e86 \n \n~~\u7136\u800c\u6211\u8bb2\u7684\u5e76\u4e0d\u6e05\u695a\uff0c\u8981\u662f\u5b9e\u5728\u4e0d\u61c2\u53ef\u4ee5\u624b\u80e1\u4e00\u4e0b\u5bf9\u5427~~\n \n \u653e\u4e00\u4e0b\u4ee3\u7801\uff0c\u5e2e\u52a9\u5404\u4f4ddalao\u7406\u89e3\u4e0b\u5427\n \n    \n  ```\n  #include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n# define ls now<<1\n# define rs now<<1|1\nconst int M = 100005 ;\nconst int inf = 2100000000 ;\nusing namespace std;\ninline int read(){\n\tchar c=getchar(); int x=0,w=1;\n\twhile(c>'9'||c<'0'){if(c=='-') w=-1 ;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0'; c=getchar();}\n\treturn x*w;\n}\nint n,m;\nstruct E{\n\tint nex,to;\n}edge[M<<1];\nint hea[M],num;\ninline void add_edge(int from,int to){\n\tedge[++num].nex=hea[from];\n\tedge[num].to=to;\n\thea[from]=num;\n}\nint fa[M],dep[M],size[M],son[M];\nint val[M],root;\nvoid dfs1(int u,int father,int deep){\n\tdep[u]=deep; \n\tfa[u]=father;\n\tsize[u]=1 ;\n\tint Maxson=-1;\n\tfor(int i=hea[u];i;i=edge[i].nex){\n\t\tint v=edge[i].to;\n\t\tif(v==father) continue ;\n\t\tdfs1(v,u,deep+1);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>Maxson){\n\t\t\tMaxson=size[v];\n\t\t\tson[u]=v;\n\t\t\t\n\t\t}\n\t}\n}\nint id[M],cnt,top[M],p[M];\nvoid dfs2(int u,int topf){\n\ttop[u]=topf; \n\tid[u]=++cnt;\n\tp[cnt]=val[u];\n\tif(!son[u]) return ;\n\tdfs2(son[u],topf);\n\tfor(int i=hea[u];i;i=edge[i].nex){\n\t\tint v=edge[i].to;\n\t\tif(!id[v])\n\t\t  dfs2(v,v);\n\t}\n}\ninline int LCA(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<=dep[y]?x:y;\n}\nint tmin[M<<2],tag[M<<2];\ninline void pushup(int now){\n\ttmin[now]=min(tmin[ls],tmin[rs]);\n}\ninline void pushdown(int now){\n\tif(tag[now]!=-1){\n\t\ttmin[ls]=tmin[rs]=tag[now];\n\t\ttag[ls]=tag[rs]=tag[now];\n\t\ttag[now]=-1;\n\t}\n}\nvoid Build(int l,int r,int now){\n\ttag[now]=-1;\n\tif(l==r){\n\t\ttmin[now]=p[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(l,mid,ls);\n\tBuild(mid+1,r,rs);\n\tpushup(now);\n}\nvoid change(int L,int R,int C,int l,int r,int now){\n\tif(l==L&&r==R){\n\t\ttmin[now]=C;\n\t\ttag[now]=C;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tpushdown(now);\n\tif(mid>=R) change(L,R,C,l,mid,ls);\n\telse if(mid<L) change(L,R,C,mid+1,r,rs);\n\telse{\n\t\tchange(L,mid,C,l,mid,ls);\n\t\tchange(mid+1,R,C,mid+1,r,rs);\n\t}\n\tpushup(now);\n}\nvoid change1(int x,int y,int C){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tchange(id[top[x]],id[x],C,1,n,1);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tchange(id[x],id[y],C,1,n,1);\n}\nint query(int L,int R,int l,int r,int now){\n\tif(l>R||r<L) return inf;\n\tif(l>=L&&r<=R) return tmin[now];\n\tint mid=(l+r)>>1;\n\tpushdown(now);\n\tint Ans=query(L,R,l,mid,ls);\n\tAns=min(Ans,query(L,R,mid+1,r,rs));\n\treturn Ans;\n}\nint main(){\n\tn=read(); m=read();\n\tint u,v;\n\tfor(int i=1;i<n;i++){\n\t\tu=read(); v=read();\n\t\tadd_edge(u,v);\n\t    add_edge(v,u);\n\t}\n\tfor(int i=1;i<=n;i++) val[i]=read();\n\troot=read();\n\tdfs1(1,1,1);\n\tdfs2(1,1);\n\tBuild(1,n,1);\n\twhile(m--){\n\t\tint opt=read();\n\t\tif(opt==1){\n\t\t\tint x=read();\n\t\t\troot=x;\n\t\t}\n\t\telse if(opt==2){\n\t\t\tint u=read(),v=read(),w=read();\n\t\t\tchange1(u,v,w);\n\t\t}\n\t\telse{\n\t\t\tint x=read();\n\t\t\tif(x==root) printf(\"%d\\n\",tmin[1]);\n\t\t\telse{\n\t\t\t\tint lca=LCA(x,root);\n\t\t\t\tif(lca==x){\n\t\t\t\t\tint y;\n\t\t\t\t\tfor(int i=hea[x];i;i=edge[i].nex){\n\t\t\t\t\t\tint v=edge[i].to;\n\t\t\t\t\t\tif(id[v]<=id[root]&&id[v]+size[v]-1>=id[root]){\n\t\t\t\t\t\t\ty=v;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint Ans=query(1,id[y]-1,1,n,1);\n\t\t\t\t\tAns=min(Ans,query(id[y]+size[y],n,1,n,1));\n\t\t\t\t    printf(\"%d\\n\",Ans);\n\t\t\t\t}\n\t\t\t\telse printf(\"%d\\n\",query(id[x],id[x]+size[x]-1,1,n,1));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1522407518,
        "uid": 53884,
        "name": "beretty",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "~~\u770b\u8d77\u6765\u50cf\u9897LCT\u53ef\u6211\u4e0d\u4f1a\u7ef4\u62a4\u5b50\u6811~~\n\n\u6811\u94fe~~\u751f\u758f~~\u5256\u5206+\u5206\u7c7b\u8ba8\u8bba\n\n~~\u957f\u8005\u7684\u9898\u5c31\u662f\u597d~~\n\n\u5982\u679c\u6ca1\u6709\u6362\u6839\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u88f8\u9898\uff0c\u6709\u4e86\u6362\u6839\u5462\uff1f\n\n\u4e0d\u59a8\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff08\u753b\u753b\u56fe\u627e\u627e\u89c4\u5f8b\uff09\u3002\n\n\u9996\u5148\u8bbe\u6839\u4e3arot\uff0c\u8be2\u95eex\u7684\u5b50\u6811\u3002\n\n1> rot==x\n\n\u663e\u7136\u5c31\u662f\u6574\u68f5\u6811\u7684\u6700\u5c0f\u503c\u3002\n\n2> lca(rot,x)!=x\n\n\u6b64\u65f6rot\u4e0ex\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u5982\u679crot\u4e0d\u5728x\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48rot\u5728\u54ea\u91cc\uff0cx\u7684\u5b50\u6811\u8fd8\u662f\u90a3\u4e00\u5768\u3002\n\n\u7531\u6b643> lca(rot,x)==x\n\nrot\u5728x\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u5c31\u5f97\u626d\u4e00\u4e0b\u3002\u6b64\u65f6\u627e\u5230x\u7684rot\u65b9\u5411\u4e0a\u7684\u513f\u5b50\uff0c\u9664\u53bb\u8fd9\u4e2a\u513f\u5b50\u5728\u539f\u6811\u91cc\u7684\u5b50\u6811\uff0c\u5269\u4e0b\u7684\u90fd\u5c5e\u4e8e\u73b0\u5728x\u7684\u5b50\u6811\u3002\n\n\u7531\u6b64\u6811\u5256+\u8ba8\u8bba\u4e00\u6ce2\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\n```cpp\n#define inf (1<<30)\n#include<iostream>\n#include<cstdio>\n#define N 100005\n#define M N*2\nusing namespace std;\nint head[N],to[M],Next[M],e,st[N][25],a[N];\nvoid buid(int u,int v)\n{\n    Next[++e]=head[u];head[u]=e;to[e]=v;\n}\nint dep[N],wson[N],siz[N],fa[N];\nvoid dfs(int now)\n{\n    st[now][0]=fa[now];\n    dep[now]=dep[fa[now]]+1;\n    siz[now]=1;\n    for(int i=head[now];i;i=Next[i])\n    {\n        int j=to[i];if(j==fa[now]) continue;\n        fa[j]=now;dfs(j);\n        siz[now]+=siz[j];\n        if(siz[j]>siz[wson[now]]) wson[now]=j; \n    }\n}\nint top[N],id[N],who[N],knt;\nvoid dfs(int now,int fl)\n{\n    top[now]=fl;\n    id[now]=++knt;who[knt]=now;\n    if(!wson[now]) return;\n    dfs(wson[now],fl); \n    for(int i=head[now];i;i=Next[i])\n    {\n        int j=to[i];\n        if(j==fa[now]||j==wson[now]) continue;\n        dfs(j,j);\n    }\n}\nstruct node\n{\n    int lazy,mi;\n    node()\n    {\n        lazy=0;mi=inf;\n    }\n}tre[N*5];\nvoid down(int now,int lson,int rson)\n{\n    if(tre[now].lazy)\n    {\n        int it=tre[now].lazy;tre[now].lazy=0;\n        tre[lson].mi=tre[lson].lazy=it;\n        tre[rson].mi=tre[rson].lazy=it;\n    }\n}\nvoid update(int now,int lson,int rson)\n{\n    tre[now].mi=min(tre[lson].mi,tre[rson].mi);\n}\nvoid change(int u,int v,int l,int r,int now,int it)\n{\n    if(u<=l&&v>=r)\n    {\n        tre[now].lazy=tre[now].mi=it;\n        return;\n    }\n    int mid=(l+r)>>1,lson=now<<1,rson=lson|1;\n    down(now,lson,rson);\n    if(v<=mid) change(u,v,l,mid,lson,it);\n    else if(u>mid) change(u,v,mid+1,r,rson,it);\n    else change(u,mid,l,mid,lson,it),change(mid+1,v,mid+1,r,rson,it);\n    update(now,lson,rson);\n}\nint ask(int u,int v,int l,int r,int now)\n{\n    if(u>v) return inf;\n    if(u<=l&&v>=r) return tre[now].mi;\n    int mid=(l+r)>>1,lson=now<<1,rson=lson|1;\n    down(now,lson,rson);\n    if(v<=mid) return ask(u,v,l,mid,lson);\n    else if(u>mid) return ask(u,v,mid+1,r,rson);\n    else return min(ask(u,mid,l,mid,lson),ask(mid+1,v,mid+1,r,rson));\n}\nvoid buid(int l,int r,int now)\n{\n    if(l==r)\n    {\n        tre[now].mi=a[who[l]];\n        return;\n    }\n    int mid=(l+r)>>1,lson=now<<1,rson=lson|1;\n    buid(l,mid,lson);\n    mid++;\n    buid(mid,r,rson);\n    update(now,lson,rson); \n}\nint n,m,rot;\nvoid buid_st()\n{\n    for(int i=1;i<20;++i)\n    for(int now=1;now<=n;++now)\n    st[now][i]=st[st[now][i-1]][i-1];\n}\nvoid C()\n{\n    int u,v,it;scanf(\"%d%d%d\",&u,&v,&it);\n    int tu=top[u],tv=top[v];\n    while(tu!=tv)\n    {\n        if(dep[tu]<dep[tv]) swap(u,v),swap(tu,tv);\n        change(id[tu],id[u],1,n,1,it);\n        u=fa[tu],tu=top[u];\n    }\n    if(dep[u]<dep[v]) swap(u,v);\n    change(id[v],id[u],1,n,1,it);\t\n}\nint lca(int u,int v)\n{\n    if(dep[u]<dep[v]) swap(u,v);\n    int c=dep[u]-dep[v];\n    for(int i=0;i<20;++i)\n    if(c&(1<<i)) u=st[u][i];\n    if(u==v) return u;\n    for(int i=19;i>=0;--i)\n    if(st[u][i]!=st[v][i])\n    u=st[u][i],v=st[v][i];\n    return st[u][0];\n}\nvoid A()\n{\n    int x;scanf(\"%d\",&x);\n    if(x==rot)\n    {\n        printf(\"%d\\n\",tre[1].mi);\n        return;\n    }\n    int lt=lca(x,rot);\n    if(lt==x)\n    {\n        int c=dep[rot]-dep[x]-1;\n        int v=rot;\n        for(int i=0;i<20;++i)\n        if(c&(1<<i)) v=st[v][i];\n        int ans=min(ask(1,id[v]-1,1,n,1),ask(id[v]+siz[v],n,1,n,1));\n        printf(\"%d\\n\",ans);\n    }\n    else printf(\"%d\\n\",ask(id[x],id[x]+siz[x]-1,1,n,1));\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;++i)\n    {\n        int u,v;scanf(\"%d%d\",&u,&v);\n        buid(u,v);buid(v,u);\n    }\n    for(int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n    dfs(1);dfs(1,1);\n    buid(1,n,1);buid_st();\n    scanf(\"%d\",&rot);\n    while(m--)\n    {\n        int fl;scanf(\"%d\",&fl);\n        if(fl==1) scanf(\"%d\",&rot);\n        else if(fl==2) C();\n        else A();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1517747484,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u8d77\u6765\u50cf\u4e00\u9053\u6811\u5256~~\uff08\u663e\u7136\u5c31\u662f\u6811\u5256\uff09~~\n\n\u4e0e\u666e\u901a\u6811\u5256\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\u6709\u4e00\u79cd\u64cd\u4f5c\u53eb\u6362\u6839\n\n\u7136\u800c\u6211\u4eec\u5e76\u4e0d\u80fd\u5728\u6362\u6839\u7684\u65f6\u5019\u91cd\u6784\u6574\u68f5\u6811~~\uff08\u663e\u7136\u4f1aT\uff09~~\n\n\u6240\u4ee5\u5c31\u9700\u8981\u8003\u8651\u5176\u4ed6\u5bf9\u7b56\uff08\u5206\u7c7b\u8ba8\u8bba\uff01\uff09\n\n\u4e00\u5f00\u59cb\u5148\u4ee51\u4e3a\u6839\u628a\u6811\u5efa\u597d\n\n\u7136\u540e\u518d\u67e5\u8be2\u5b50\u6811\u6700\u5c0f\u503c\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\n\n\u5982\u679c\u5f53\u524d\u6839\u8282\u70b9\u4e0d\u5728\u67e5\u8be2\u7684\u5b50\u6811\u4e2d\uff0c\u5b83\u5bf9\u8fd9\u68f5\u5b50\u6811\u662f\u6ca1\u6709\u5f71\u54cd\u7684\n\n\u6240\u4ee5\u5c31\u67e5\u8be2idx[x]\u5230idx[x]+tot[x]-1\u5c31\u597d\u4e86\n\n\u4f46\u5982\u679c\u6839\u8282\u70b9\u5728\u67e5\u8be2\u7684\u8fd9\u68f5\u5b50\u6811\u4e2d\uff0c\n\n\u90a3\u6211\u4eec\u771f\u6b63\u8981\u67e5\u8be2\u7684\u5b50\u6811\u5176\u5b9e\u662f\u539f\u5b50\u6811\u53bb\u6389\u6839\u8282\u70b9\u6240\u5728\u7684\u90e8\u5206\u4ee5\u5916\u7684\u90e8\u5206\n\n~~\uff08\u597d\u50cf\u6709\u70b9\u62d7\u53e3\uff09~~\u5177\u4f53\u89c1\u4ee3\u7801\n\n\u8fd9\u4e2a\u9898\u7684\u7cbe\u9ad3\u4e5f\u5c31\u5728\u8fd9\u91cc\u4e86\uff0c\u5176\u4f59\u64cd\u4f5c\u540c\u6811\u5256\u6a21\u677f\n\n\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=1e5+5;\nstruct edge\n{\n\tint to,nxt;\n}edge[N<<1];\nint n,q,num,head[N],w[N],fa[N],son[N],tot[N];\nint root,cnt,idx[N],top[N],dep[N],a[N];\nint minn[N<<2],tag[N<<2];\ninline int read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile (!isdigit(c)&&c!='-') c=getchar();\n\tif (c=='-') c=getchar(),w=-1;\n\twhile (isdigit(c))\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w;\n}\ninline void add_edge(int from,int to)\n{\n\tedge[++num].nxt=head[from];\n\tedge[num].to=to;\n\thead[from]=num;\n}\nvoid dfs(int k,int father,int deep)\n{\n\tint bigson=0;\n\tfa[k]=father; dep[k]=deep; tot[k]=1;\n\tfor (reg int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (v==father) continue;\n\t\tdfs(v,k,deep+1); tot[k]+=tot[v];\n\t\tif (bigson<tot[v])\n\t\t{\n\t\t\tbigson=tot[v]; son[k]=v;\n\t\t}\n\t}\n}\nvoid dfs(int k,int tp)\n{\n\tidx[k]=++cnt; top[k]=tp; a[cnt]=w[k];\n\tif (!son[k]) return; dfs(son[k],tp);\n\tfor (reg int i=head[k];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (!idx[v]) dfs(v,v);\n\t}\n}\ninline void pushup(int now)\n{\n\tminn[now]=min(minn[now<<1],minn[now<<1|1]);\n}\ninline void pushdown(int now)\n{\n\tif (tag[now]==-1) return;\n\ttag[now<<1]=tag[now<<1|1]=tag[now];\n\tminn[now<<1]=minn[now<<1|1]=tag[now];\n\ttag[now]=-1;\n}\nvoid build(int l,int r,int now)\n{\n\ttag[now]=-1;\n\tif (l==r)\n\t{\n\t\tminn[now]=a[l]; return;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,now<<1);\n\tbuild(mid+1,r,now<<1|1);\n\tpushup(now);\n}\nvoid inchange(int L,int R,int l,int r,int now,int c)\n{\n\tif (l>R||r<L) return;\n\tif (l>=L&&r<=R)\n\t{\n\t\tminn[now]=c; tag[now]=c; return;\n\t}\n\tint mid=(l+r)>>1; pushdown(now);\n\tif (mid>=R) inchange(L,R,l,mid,now<<1,c);\n\telse if (mid<L) inchange(L,R,mid+1,r,now<<1|1,c);\n\telse\n\t{\n\t\tinchange(L,mid,l,mid,now<<1,c);\n\t\tinchange(mid+1,R,mid+1,r,now<<1|1,c);\n\t}\n\tpushup(now);\n}\nint getmin(int L,int R,int l,int r,int now)\n{\n\tif (l>R||r<L) return 2e9;\n\tif (l>=L&&r<=R) return minn[now];\n\tint mid=(l+r)>>1; pushdown(now);\n\tif (mid>=R) return getmin(L,R,l,mid,now<<1);\n\tif (mid<L) return getmin(L,R,mid+1,r,now<<1|1);\n\treturn min(getmin(L,mid,l,mid,now<<1),getmin(mid+1,R,mid+1,r,now<<1|1));\n}\ninline void treechange(int x,int y,int val)\n{\n\twhile (top[x]!=top[y])\n\t{\n\t\tif (dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tinchange(idx[top[x]],idx[x],1,n,1,val);\n\t\tx=fa[top[x]];\n\t}\n\tif (dep[x]>dep[y]) swap(x,y);\n\tinchange(idx[x],idx[y],1,n,1,val);\n}\ninline bool check(int root,int v)\n{\n\treturn idx[root]>=idx[v]&&idx[root]<=idx[v]+tot[v]-1;\n}\nint main()\n{\n\tn=read(),q=read();\n\tfor (reg int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tfor (reg int i=1;i<=n;w[i++]=read());\n\tdfs(1,0,1); dfs(1,1); build(1,n,1);\n\tfor (root=read();q;q--)\n\t{\n\t\tint opt=read();\n\t\tif (opt==1) root=read();\n\t\tif (opt==2)\n\t\t{\n\t\t\tint x=read(),y=read(),z=read();\n\t\t\ttreechange(x,y,z);\n\t\t}\n\t\tif (opt==3)\n\t\t{\n\t\t\tint x=read();\n\t\t\tif (x==root) printf(\"%d\\n\",minn[1]);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint now=0;\n\t\t\t\tfor (reg int i=head[x];i&&!now;i=edge[i].nxt)\n\t\t\t\t{\n\t\t\t\t\tint v=edge[i].to;\n\t\t\t\t\tif (v==fa[x]) continue;\n\t\t\t\t\tif (check(root,v)) now=v;\n\t\t\t\t}\n\t\t\t\tif (now)\n\t\t\t\t{\n\t\t\t\t\tint l=getmin(1,idx[now]-1,1,n,1),r=2e9;\n\t\t\t\t\tif (idx[now]+tot[now]<=n)\n\t\t\t\t\t  r=getmin(idx[now]+tot[now],n,1,n,1);\n\t\t\t\t\tint ans=getmin(idx[x],idx[x],1,n,1);\n\t\t\t\t\tprintf(\"%d\\n\",min(ans,min(l,r)));\n\t\t\t\t}\n\t\t\t\telse printf(\"%d\\n\",getmin(idx[x],idx[x]+tot[x]-1,1,n,1));\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1522309781,
        "uid": 43471,
        "name": "Captain_Paul",
        "ccfLevel": 0,
        "title": "P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "### Self-adjusting Top Trees\n\n\u89c2\u5bdf\u9898\u9762:1.\u6362\u6839 2.\u8def\u5f84\u8986\u76d6 3.\u5b50\u6811\u6700\u5c0f\u503c\n\n\u505a\u6cd5\uff1a\n\n1.\u6811\u5256\u7ebf\u6bb5\u6811\n\n\u4e0d\u770b\u6362\u6839\u636e\u88f8\u6811\u5256\uff0c\u57fa\u4e8edfs\u5e8f\uff0c\u6362\u6839\u8003\u8651\u4e00\u4e0b\u505a\u4e00\u70b9\u5c0f\u53d8\u6362\u5c31\u505a\u5b8c\u4e86\n\n\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6:$O(n \\log n)$\n\n\u4fee\u6539\u65f6\u95f4\u590d\u6742\u5ea6:$O(n \\log^2 n)$\n\n2.lct\u5957multiset\n\n\u5b50\u6811\u4fe1\u606f\u7684\u7ef4\u62a4\u9700\u8981\u6bcf\u4e2a\u8282\u70b9\u6302\u4e00\u4e2amultiset\u88c5\u8f7b\u5b50\u6811\u4fe1\u606f\uff0caccess\u5207\u6362\u865a\u5b9e\u66f4\u65b0\u4e00\u4e0b\u5c31\u5b8c\u4e8b\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$O(n \\log^2 n)$\n\n3.top tree\n\n\u5b66\u4e60\u89c1\uff1a[negiizhao\u7684\u535a\u5ba2](http://negiizhao.blog.uoj.ac/blog/4912)\n\n\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7c07\u8def\u5f84\u6700\u5c0f\u503c\uff0c\u7c07\u4e2d\u7c07\u8def\u5f84\u4ee5\u5916\u7684\u5185\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u4ee5\u53ca\u8def\u5f84\u7684\u67d3\u8272\u6807\u8bb0\n\n\u677f\u5b50\u9898\uff0c\u505a\u5b8c\u4e86\n\n\u4e0d\u516c\u5f00\u5b8c\u6574satt\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstddef>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());bool f(0);\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\tconst type c(a);a=b;b=c;\n}\ntemplate<class type>inline const type min(const type &a,const type &b)\n{\n\treturn a<b?a:b;\n}\nconst int N(1e5+10),inf(2147483647);\nnamespace Self_Adjusting_Top_Trees\n{\n}using namespace Self_Adjusting_Top_Trees;\nint n,m,u[N],v[N];\nint main()\n{\n\tread(n);read(m);\n\tnode0=new tree[n+1];\n\tfor (int i(1);i<n;i++)read(u[i]),read(v[i]);\n\tfor (int i(1);i<=n;i++)read(node(i)->val),node(i)->path_min=node(i)->val;\n\tfor (int i(1);i<n;i++)link(node(u[i]),node(v[i]));\n\tint rt;read(rt);makeroot(node(rt));\n\tfor (int opt,x,y,z;m--;)\n\t\tswitch (read(opt),read(x),opt)\n\t\t{\n\t\t\tcase 1:makeroot(node(x));break;\n\t\t\tcase 2:read(y);read(z);cover(node(x),node(y),z);break;\n\t\t\tcase 3:printf(\"%d\\n\",query(node(x)));break;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1578461291,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a\u6811\u7684dfs\u5e8f\uff0c\u7ebf\u6bb5\u6811\n\n\u8fd9\u9053\u9898\uff0c\u600e\u4e48\u8bf4\u5462\uff0c\u662f\u4e00\u9053\u975e\u5e38\u9002\u5408\u5165\u95e8\u6811\u5256\u7684\u4e00\u9053\u9898\uff0c\u56e0\u4e3a\u5b83\u6bd4\u8f83\u6a21\u677f\u5427\u3002\u89c2\u5bdf\u9898\u610f\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u6c42\u7684\u662f\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff1a\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1.\u5c06\u6839\u6539\u53d8\u4e3aroot.\n\n2.\u5c06x\uff0cy\u8def\u5f84\u4e4b\u95f4\u7684\u70b9\u6743\u4fee\u6539\u4e3aval.\n\n3.\u67e5\u8be2x\u5b50\u6811\u5185\u7684\u6700\u5c0f\u70b9\u6743.\n\n\u89c2\u5bdf2,3\u4e24\u4e2a\u64cd\u4f5c\uff0c\u53d1\u73b0\u8fd9\u662f\u6811\u94fe\u5256\u5206\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u4e0d\u719f\u6089\u7684\u540c\u5b66\u53ef\u4ee5\u505a\u4e00\u4e0b\u8fd9\u9053\u9898\uff1a[\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206](https://www.luogu.org/problem/P3384) \n\n\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u64cd\u4f5c1\u7684\u6362\u6839\u3002\u7ffb\u4e86\u5f88\u591a\u535a\u5ba2\uff0c\u53d1\u73b0\u4ed6\u4eec\u90fd\u6ca1\u6709\u628a\u8fd9\u4e2a\u6700\u91cd\u8981\u7684\u90e8\u5206\u8bf4\u660e\u767d\uff0c\u90a3\u4e48\u6211\u5c31\u6309\u7167\u81ea\u5df1\u7684\u7406\u89e3\u8be6\u7ec6\u53d9\u8ff0\u4e00\u4e0b\u5427\uff0c\u5e0c\u671b\u80fd\u5e2e\u5230\u5927\u5bb6\uff08\u5982\u6709\u9519\u8bef\u4e4b\u5904\u8bf7\u591a\u591a\u6307\u6559\uff09\u3002\n\n\u7531\u4e8e\u6362\u6839\uff0c\u6709\u8bb8\u591a\u70b9\u7684\u5b50\u6811\u5185\u7684\u4fe1\u606f\u90fd\u8981\u53d8\u5316\uff0c\u8fd9\u4e2a\u9700\u8981\u600e\u4e48\u53bb\u7ef4\u62a4\u5462\uff1f\n\n\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u6362\u6839\u7684\u6027\u8d28.\n\n\u4e0b\u56fe\u662f\u4e00\u68f5\u5df2\u7ecf\u8fdb\u884c\u8f7b\u91cd\u94fe\u5256\u5206\u7684\u6811\uff1a\n\n![](https://s2.ax1x.com/2019/10/15/KCuuTS.png)\n\n\u6b64\u65f6\u5b83\u7684\u6839\u8282\u70b9\u4e3aA. \u597d\uff0c\u6211\u4eec\u5c06\u5b83\u6362\u6839\u4e3aB.\n\n\u90a3\u4e48\u6811\u7684\u5f62\u6001\u5c06\u4f1a\u957f\u8fd9\u6837\uff08\u7565\u4e11\uff0c\u539f\u8c05\u6211\u7684\u753b\u56fe\u6280\u672fQAQ\uff09\uff1a\n\n![](https://s2.ax1x.com/2019/10/15/KCus61.png)\n\n\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u5404\u4e2a\u5b50\u6811\u95f4\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8282\u70b9C\uff0cD\uff0cE\uff0cF\uff0cH\u7684\u5b50\u6811\u7684\u4fe1\u606f\u5e76\u672a\u6539\u53d8\uff0c\u6539\u53d8\u53ea\u662f\u8282\u70b9A\uff0cB\u7684\u4fe1\u606f\uff0c\u7531\u4e8eB\u53d8\u4e3a\u4e86\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u7684\u5b50\u6811\u4e3a\u6574\u68f5\u6811\uff0c\u4e0b\u5c5e\u8282\u70b9\u7531CED -> CEADFH\uff0c\u800c\u6211\u4eec\u89c2\u5bdfA\uff0c\u53d1\u73b0A\u7684\u4e0b\u5c5e\u8282\u70b9\u7531BFCEHD -> FH\u3002\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u800c\u6613\u89c1\u5730\u53d1\u73b0\uff0c\u539f\u6839\u8282\u70b9\u548c\u6362\u6839\u540e\u7684\u8282\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e4b\u5916\u7684\u70b9\u5728\u6362\u6839\u524d\u540e\u7684\u5b50\u6811\u4fe1\u606f\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u6362\u6839\u4f1a\u5bf9\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u5b50\u6811\u4fe1\u606f\u4f1a\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd.\n\n\u8fd9\u4e2a\u60c5\u51b5\u6bd4\u8f83\u597d\u5224\u65ad\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3e\u4e2a\u4f8b\u5b50,\u753b\u4e00\u6761\u94fe\u6765\u770b\u770b\uff08\u52a0\u7c97\u7684\u7ebf\u4e3a\u4e24\u4e2a\u6839\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff09\uff1a\n\n![](https://s2.ax1x.com/2019/10/15/KCKScn.png)\n\n\u4e0a\u9762\u7684\u56fe\u662f\u539f\u6765\u7684\u94fe\uff0cA\u4e3a\u6839\u8282\u70b9\uff0c\u73b0\u5c06\u5b83\u6362\u6839\u4e3aE.\n\n![](https://s2.ax1x.com/2019/10/15/KCuWkD.png) \n\n\u4e8e\u662f\uff0c\u7531\u4e0a\u9762\u7684\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8def\u5f84\u4e2d\uff0cE\u8282\u70b9\u7684\u5b50\u6811\u53d8\u4e3a\u6574\u68f5\u6811\uff0cC\uff0cD\u8282\u70b9\u7684\u5b50\u6811\u6539\u53d8\u6210\u6574\u68f5\u6811\u51cf\u53bb\u539f\u5b50\u6811\u7684\u90e8\u5206\uff0c\u800cA\u70b9\u7684\u5b50\u6811\u7531\u539f\u6574\u68f5\u6811\u53d8\u4e3a\u9664AE\u8def\u5f84\u7684\u53e6\u4e00\u7aef\u5b50\u6811\u4e0a\uff0c\u4e5f\u5c31\u662fA\u70b9\u91cd\u513f\u5b50\u4ee5\u4e0b\u7684\u8282\u70b9\u4e0d\u518d\u5f52\u5c5e\u4e8eA\uff0c\u5e76\u4e3aE\u7684\u5b50\u6811\u4e0a\u53bb\u4e86\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u5341\u5206\u7684\u6e05\u6670\u4e86.\n\n\u5bf9\u4e8e\u6362\u6839\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u4ee5\u4e0b\u89c4\u5f8b\uff1a\n\n1.\u6362\u6839\u524d\u540e\u4e24\u4e2a\u6839\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u4e4b\u5916\u7684\u70b9\u5b50\u6811\u4fe1\u606f\u4e0d\u53d8.,\n\n2.\u5bf9\u4e8e\u8def\u5f84\u4e2d\u7684\u70b9\uff0c\u65b0\u6839\u8282\u70b9\u7684\u7684\u5b50\u6811\u53d8\u4e3a\u6574\u68f5\u6811\u3002\n\n3.\u5bf9\u4e8e\u8def\u5f84\u4e0a\u5176\u4ed6\u7684\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u53d8\u6210\u4e86\u6574\u68f5\u6811\u51cf\u53bb\u4e00\u68f5\u5b50\u6811\uff0c\u51cf\u53bb\u7684\u5b50\u6811\u5c31\u662f\u4ed6\u7684\u5305\u542broot\u7684\u91cd\u513f\u5b50\u7684\u5b50\u6811\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u8be2\u95ee\u70b9\u548c\u6839\u8282\u70b9\u6709\u6ca1\u6709\u5728\u4e00\u6761\u8def\u5f84\u4e0a\u5462\uff1f \u8fd9\u4e5f\u5341\u5206\u597d\u5224\u65ad\uff0c\u76f4\u63a5\u8be2\u95ee\u4ed6\u4eec\u7684\u7956\u5148\u662f\u4e0d\u662froot\u5373\u53ef\u3002\u8be2\u95ee\u91cd\u513f\u5b50\u4e5f\u5f88\u7b80\u5355\uff0c\u8fd4\u56deLCA\u7684\u91cd\u513f\u5b50\u5373\u4e3a\u6240\u6c42\u3002 \n\n\u64cd\u4f5c3\u8be2\u95ee\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nint treequery(int x) {\n\tif(x == root) return ask(1, 1, n); // \u60c5\u51b5\u4e8c\uff0c\u8be2\u95ee\u70b9\u4e3a\u73b0\u6839\u8282\u70b9\uff0c\u8fd9\u65f6\u5b83\u7684\u5b50\u6811\u5373\u4e3a\u6574\u68f5\u6811\u3002 \n\tint p = lca(x, root);\n\tif(p != x) return ask(1, id[x], id[x] + size[x] - 1);  //\u60c5\u51b5\u4e00 \uff0c\u8be2\u95ee\u70b9\u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u5b50\u6811\u7684\u4fe1\u606f\u3002 \n\telse { //\u60c5\u51b5\u4e09\uff0c\u627e\u5230root\u5305\u542b\u7684\u91cd\u513f\u5b50\u3002 \n\t\tint q = find(x, root);\n\t\treturn min(ask(1, 1, id[q]-1), ask(1, id[q] + size[q], cont));//\u9664\u53bbroot\u5305\u542b\u91cd\u513f\u5b50\u5b50\u6811\u7684\u90e8\u5206\u5373\u4e3a\u6240\u6c42\u3002 \n\t}\n}\n```\n\u6811\u94fe\u5256\u5206\u4ee5\u53ca\u6c42dfs\u5e8f\u7684\u4ee3\u7801:\n```cpp\nint size[N], son[N], f[N], dep[N];\nvoid dfs1(int x, int fa) {// \u5904\u7406\u6811\u7684\u57fa\u672c\u4fe1\u606f \n\tf[x] = fa; size[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tdep[y] = dep[x] + 1;\n\t\tdfs1(y, x);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > size[son[x]]) son[x] = y;\n\t}\n}\nint id[N], b[N], cont = 0, top[N];\nvoid dfs2(int x, int topf) {\n  \tid[x] = ++cont; b[cont] = a[x]; // \u5efa\u7acb\u6811\u7684dfs\u5e8f \n\ttop[x] = topf; if(!son[x]) return;\n\tdfs2(son[x], topf); // \u91cd\u94fe\u5256\u5206 \n\tfor(int i = head[x]; i; i = e[i].next) {\n\t  \tint y = e[i].to;\n\t  \tif(y == f[x] || y == son[x]) continue;\n\t  \tdfs2(y, y); // \u8f7b\u94fe\u5256\u5206 \n\t}\n}\n```\n\u7ebf\u6bb5\u6811\u7ef4\u62a4dfs\u5e8f\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid build(int p, int l, int r) { //\u5efa\u6811 \n\tt[p].l = l; t[p].r = r;\n\tif(l == r) { t[p].mn = b[l]; return; }\n\tint mid = (l + r) >> 1;\n\tbuild(p<<1, l, mid);\n\tbuild(p<<1|1, mid+1, r);\n\tt[p].mn = min(t[p<<1].mn, t[p<<1|1].mn);\n}\nvoid spread(int p){ // \u4e0b\u4f20\u6807\u8bb0 \n\tif(t[p].ad) {\n\t   t[p<<1].mn = t[p<<1|1].mn = t[p].ad;\n\t\tt[p<<1].ad = t[p<<1|1].ad = t[p].ad;\n\t\tt[p].ad = 0;\n\t}\n}\nvoid change(int p, int l, int r, int d) { // \u533a\u95f4\u4fee\u6539 \n\tif(t[p].l >= l && t[p].r <= r) { t[p].mn = d; t[p].ad = d; return; }\n\tspread(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif(l <= mid) change(p<<1, l, r, d);\n\tif(r > mid) change(p<<1|1, l, r, d);\n\tt[p].mn = min(t[p<<1].mn, t[p<<1|1].mn); \n}\nint ask(int p, int l, int r) { // \u533a\u95f4\u6700\u5c0f\u503c\u67e5\u8be2 \n\tif(t[p].l >= l && t[p].r <= r) return t[p].mn;\n\tspread(p);\n\tint mid = (t[p].l + t[p].r) >> 1, val = 1<<30;\n\tif(l <= mid) val = min(val, ask(p<<1, l, r));\n\tif(r > mid) val = min(val, ask(p<<1|1, l, r));\n\treturn val;\n}\n```\n\u64cd\u4f5c\u4e8c\u4fee\u6539\u94fe\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid treechange(int x, int y, int val) {\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tchange(1, id[top[x]], id[x], val);\n\t\tx = f[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x, y);\n\tchange(1, id[x], id[y], val);\n}\n```\n\u6c42lca\u4ee5\u53ca\u5176\u91cd\u513f\u5b50\u7684\u4ee3\u7801\uff1a\n```cpp\nint lca(int x, int y) { // \u6c42x, y \u7684 LCA\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tx = f[top[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\nint find(int x, int y) { // \u8fd4\u56de\u4e24\u8005\u94fe\u9876\u7684\u91cd\u513f\u5b50 \n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tif(f[top[x]] == y) return top[x];\n\t\tx = f[top[x]];\n\t} \n\tif(dep[x] < dep[y]) swap(x, y);\n\treturn son[y];\n} \n```\n\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u4e3b\u8981\u505a\u6cd5\u5c31\u5230\u8fd9\u91cc\u4e86.\n\n\u8d34\u4e00\u4e0b\u5b8c\u6574\u7684\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define mp make_pair\n#define rep(i, a, b) for(int i = (a); i <= (b); i++)\n#define per(i, a, b) for(int i = (a); i >= (b); i--)\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\ntypedef double db;\nconst int N = 1e6 + 50;\nint n, m, root, a[N];\nint head[N], cnt = 0;\nstruct node { int to, next; } e[N]; \nstruct tree { int l, r, mn, sum, ad; } t[N];\ninline int read(){\n\tint x = 0, f = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') { if(ch == '-') f = -1; ch = getchar();}\n\twhile(ch >='0' && ch <='9') { x = (x<<3)+(x<<1)+(ch^48); ch = getchar();}\n\treturn x*f;\n}\nvoid add(int x, int y) { e[++cnt].to = y; e[cnt].next = head[x]; head[x] = cnt; }\nint size[N], son[N], f[N], dep[N];\nvoid dfs1(int x, int fa) {// \u5904\u7406\u6811\u7684\u57fa\u672c\u4fe1\u606f \n\tf[x] = fa; size[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == fa) continue;\n\t\tdep[y] = dep[x] + 1;\n\t\tdfs1(y, x);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > size[son[x]]) son[x] = y;\n\t}\n}\nint id[N], b[N], cont = 0, top[N];\nvoid dfs2(int x, int topf) {\n\tid[x] = ++cont; b[cont] = a[x]; // \u5efa\u7acb\u6811\u7684dfs\u5e8f \n\ttop[x] = topf; if(!son[x]) return;\n\tdfs2(son[x], topf); // \u91cd\u94fe\u5256\u5206 \n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint y = e[i].to;\n\t\tif(y == f[x] || y == son[x]) continue;\n\t\tdfs2(y, y); // \u8f7b\u94fe\u5256\u5206 \n\t}\n}\nvoid build(int p, int l, int r) { //\u5efa\u6811 \n\tt[p].l = l; t[p].r = r;\n\tif(l == r) { t[p].mn = b[l]; return; }\n\tint mid = (l + r) >> 1;\n\tbuild(p<<1, l, mid);\n\tbuild(p<<1|1, mid+1, r);\n\tt[p].mn = min(t[p<<1].mn, t[p<<1|1].mn);\n}\nvoid spread(int p){ // \u4e0b\u4f20\u6807\u8bb0 \n\tif(t[p].ad) {\n\t\tt[p<<1].mn = t[p<<1|1].mn = t[p].ad;\n\t\tt[p<<1].ad = t[p<<1|1].ad = t[p].ad;\n\t\tt[p].ad = 0;\n\t}\n}\nvoid change(int p, int l, int r, int d) { // \u533a\u95f4\u4fee\u6539 \n\tif(t[p].l >= l && t[p].r <= r) { t[p].mn = d; t[p].ad = d; return; }\n\tspread(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif(l <= mid) change(p<<1, l, r, d);\n\tif(r > mid) change(p<<1|1, l, r, d);\n\tt[p].mn = min(t[p<<1].mn, t[p<<1|1].mn); \n}\nint ask(int p, int l, int r) { // \u533a\u95f4\u6700\u5c0f\u503c\u67e5\u8be2 \n\tif(t[p].l >= l && t[p].r <= r) return t[p].mn;\n\tspread(p);\n\tint mid = (t[p].l + t[p].r) >> 1, val = 1<<30;\n\tif(l <= mid) val = min(val, ask(p<<1, l, r));\n\tif(r > mid) val = min(val, ask(p<<1|1, l, r));\n\treturn val;\n}\nint lca(int x, int y) { // \u6c42x, y \u7684 LCA\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tx = f[top[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\nint find(int x, int y) { // \u8fd4\u56dey\u7684\u91cd\u513f\u5b50 \n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tif(f[top[x]] == y) return top[x];\n\t\tx = f[top[x]];\n\t} \n\tif(dep[x] < dep[y]) swap(x, y);\n\treturn son[y];\n} \nvoid treechange(int x, int y, int val) {\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tchange(1, id[top[x]], id[x], val);\n\t\tx = f[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x, y);\n\tchange(1, id[x], id[y], val);\n}\nint treequery(int x) {\n\tif(x == root) return ask(1, 1, n); // \u60c5\u51b5\u4e8c\uff0c\u8be2\u95ee\u70b9\u4e3a\u73b0\u6839\u8282\u70b9\uff0c\u8fd9\u65f6\u5b83\u7684\u5b50\u6811\u5373\u4e3a\u6574\u68f5\u6811\u3002 \n\tint p = lca(x, root);\n\tif(p != x) return ask(1, id[x], id[x] + size[x] - 1);  //\u60c5\u51b5\u4e00 \uff0c\u8be2\u95ee\u70b9\u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u5b50\u6811\u7684\u4fe1\u606f\u3002 \n\telse { //\u60c5\u51b5\u4e09\uff0c\u627e\u5230root\u5305\u542b\u7684\u91cd\u513f\u5b50\u3002 \n\t\tint q = find(x, root);\n\t\treturn min(ask(1, 1, id[q]-1), ask(1, id[q] + size[q], cont));//\u9664\u53bbroot\u5305\u542b\u91cd\u513f\u5b50\u7684\u90e8\u5206\u5373\u4e3a\u6240\u6c42\u3002 \n\t}\n}\nvoid init(){\n\tn = read(); m = read();\n\trep(i, 1, n-1) { int xx = read(), yy = read(); add(xx, yy); add(yy, xx); }\n\trep(i, 1, n) a[i] = read(); root = read();\n\tdfs1(root, 0); dfs2(root, root); build(1, 1, n);\n\trep(i, 1, m) {\n\t\tint op = read();\n\t\tif(op == 1) root = read();\n\t\tif(op == 2) {\n\t\t\tint x = read(), y = read(), z = read();\n\t\t\ttreechange(x, y, z);\n\t\t}\n\t\tif(op == 3) {\n\t\t\tint x = read(); \n\t\t\tprintf(\"%d\\n\", treequery(x));\n\t\t}\n\t}\n} \nint main(){ init(); return 0; }\n\n```\n",
        "postTime": 1570793105,
        "uid": 170183,
        "name": "smilke",
        "ccfLevel": 0,
        "title": "P3979 \u9065\u8fdc\u7684\u56fd\u5ea6 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n\u524d\u7f6e\u77e5\u8bc6\uff0c\u6811\u94fe\u5256\u5206\u3002\n\n\u9644\u4e0a\u8bb2\u89e3\u94fe\u63a5\uff1a\n\n[\u6d45\u8c08\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/fusiwei/p/11519470.html)\n\n\u5b66\u4e60\u5b8c\u6811\u94fe\u5256\u5206\u6211\u4eec\u53ef\u4ee5\u5b8c\u7f8e\u5730\u89e3\u51b3\u94fe\u4e0a\u4fee\u6539\u64cd\u4f5c\u548c\u5b50\u6811\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u5c31\u662f\u8fd9\u4e2a\u6362\u6839\uff0c\u771f\u7684\u70e6\u4eba\u3002\n\n\u601d\u8003\u6362\u6839\u7684\u5904\u7406\u65b9\u6cd5\uff1a\n\n\u5982\u679c\u6bcf\u6b21\u66b4\u529b\u91cd\u6784\u6811\uff0c\u91cd\u65b0\u8fdb\u884c\u6811\u94fe\u5256\u5206\u7684\u8bdd\uff0c\u663e\u7136\u4e0d\u884c\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u53ea\u80fd\u652f\u6301\u6211\u4eec\u8fdb\u884c\u4e00\u6b21\u6811\u94fe\u5256\u5206\u7684\u9884\u5904\u7406\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u8003\u8651\u5982\u4f55\u7528\u4e00\u6b21\u9884\u5904\u7406\uff0c\u53ea\u5728\u67e5\u8be2\u4e0a\u4e0b\u4e9b\u529f\u592b\uff0c\u6765\u89e3\u51b3\u6389\u8fd9\u4e2a\u6362\u6839\u95ee\u9898\u3002\n\n\u901a\u8fc7\u6362\u6839DP\u7684\u542f\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u63a2\u7a76\u6027\u8d28\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\u968f\u4fbf\u624b\u753b\u51e0\u4e2a\u56fe\u3002\u53d1\u73b0\uff0c\u6539\u5b8c\u6839\u4e4b\u540e\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u8282\u70b9\u7684\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\n\n\u6240\u4ee5\u60f3\u5230\u5206\u7c7b\u8ba8\u8bba\uff1a\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u3002\n\n* \u60c5\u51b51\uff1a\u8be2\u95ee\u70b9`idx`\u4e0e\u5f53\u524d\u6839`now`\u91cd\u5408\u3002\u6b64\u65f6\u5373\u4e3a\u5168\u5c40\u6700\u5c0f\u503c\u3002\n\n* \u60c5\u51b52\uff1a\u8be2\u95ee\u70b9\u4e0e\u5f53\u524d\u6839\u79bb\u5f97\u5f88\u8fdc\uff0c\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u6216\u8005\u4ece1\u5230`now`\u4e0d\u5305\u62ec\u8be2\u95ee\u70b9`idx`\u3002\u6b64\u65f6\u5bf9\u7b54\u6848\u4e0d\u5f71\u54cd\uff0c\u76f4\u63a5\u6811\u5256\u8be2\u95ee\u5b50\u6811\u8f93\u51fa\u5373\u53ef\u3002\n\n* \u60c5\u51b53\uff1a\u8be2\u95ee\u70b9\u57281\u5230`now`\u7684\u94fe\u4e0a\uff0c\u6b64\u65f6\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\u968f\u4fbf\u624b\u753b\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u65f6\u8be2\u95ee\u70b9\u7684\u7b54\u6848\u53ea\u4e0d\u5305\u62ec\u8be2\u95ee\u70b9\u5230\u5f53\u524d\u6839\u8fd9\u6574\u6761\u8def\u5f84\uff08\u4e00\u76f4\u5230\u5e95\uff09\u8fd9\u90e8\u5206\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6c42\u4e24\u4e2a\u6700\u5c0f\u503c\uff0c\u518d\u6c42\u4e00\u6b21\u6700\u5c0f\u3002\u7c7b\u4f3c\u4e8e\u5bb9\u65a5\u539f\u7406\u7684\u601d\u60f3\u3002\n\n\u6240\u4ee5\u6709\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define lson pos<<1\n#define rson pos<<1|1\nusing namespace std;\nconst int maxn=1e5+10;\nconst int INF=2147483647;\nint n,m;\nint tot,to[maxn<<1],nxt[maxn<<1],head[maxn],a[maxn];\nint size[maxn],deep[maxn],fa[maxn],son[maxn],top[maxn],id[maxn],cnt,w[maxn];\nint tree[maxn<<2],lazy[maxn<<2];\nint now;\nint tmp;\nbool flag;\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n    deep[x]=deep[f]+1;\n    fa[x]=f;\n    size[x]=1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n        if(!son[x]||size[y]>size[son[x]])\n            son[x]=y;\n    }\n}\nvoid dfs2(int x,int t)\n{\n    top[x]=t;\n    id[x]=++cnt;\n    w[cnt]=a[x];\n    if(!son[x])\n        return;\n    dfs2(son[x],t);\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x]||y==son[x])\n            continue;\n        dfs2(y,y);\n    }\n}\nvoid build(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    if(l==r)\n    {\n        tree[pos]=w[l];\n        return;\n    }\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    tree[pos]=min(tree[lson],tree[rson]);\n}\nvoid mark(int pos,int l,int r,int k)\n{\n    tree[pos]=k;\n    lazy[pos]=k;\n}\nvoid pushdown(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    mark(lson,l,mid,lazy[pos]);\n    mark(rson,mid+1,r,lazy[pos]);\n    lazy[pos]=0;\n}\nvoid update(int pos,int l,int r,int x,int y,int k)\n{\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n    {\n        mark(pos,l,r,k);\n        return;\n    }\n    if(lazy[pos])\n        pushdown(pos,l,r);\n    if(x<=mid)\n        update(lson,l,mid,x,y,k);\n    if(y>mid)\n        update(rson,mid+1,r,x,y,k);\n    tree[pos]=min(tree[lson],tree[rson]);\n}\nvoid upd_chain(int x,int y,int k)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        update(1,1,n,id[top[x]],id[x],k);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    update(1,1,n,id[y],id[x],k);\n}\nint goal(int x,int y)\n{\n\twhile(top[x]!=top[y])\n    {\n\t\tif(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n\t\tif(fa[top[x]]==y)\n            return top[x];\n\t\tx=fa[top[x]];\n\t}\n\tif(deep[x]>deep[y])\n        swap(x,y);\n\treturn son[x];\n}\nint query(int pos,int l,int r,int x,int y)\n{\n    int ret=INF;\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n        return tree[pos];\n    if(lazy[pos])\n        pushdown(pos,l,r);\n    if(x<=mid)\n        ret=min(ret,query(lson,l,mid,x,y));\n    if(y>mid)\n        ret=min(ret,query(rson,mid+1,r,x,y));\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,1,n);\n    scanf(\"%d\",&now);\n    while(m--)\n    {   \n        int opt,idx,x,y,v;\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            scanf(\"%d\",&idx);\n            now=idx;\n        }\n        else if(opt==2)\n        {\n            scanf(\"%d%d%d\",&x,&y,&v);\n            upd_chain(x,y,v);\n        }\n        else\n        {\n            scanf(\"%d\",&idx);\n            if(idx==now)\n                printf(\"%d\\n\",tree[1]);\n            else if(deep[idx]<deep[now]&&fa[tmp=goal(idx,now)]==idx)\n            {\n                int a,b,c;\n                a=query(1,1,n,1,id[tmp]-1);\n                b=query(1,1,n,id[tmp]+size[tmp],n);\n                printf(\"%d\\n\",min(a,b));\n            }\n            else\n                printf(\"%d\\n\",query(1,1,n,id[idx],id[idx]+size[idx]-1));\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1602244716,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u4e00\u9053\u6811\u94fe\u5256\u5206~~\u4e0d~~\u597d\u9898\u3002\n\n> \u7206\u96f6\u5c0f\u6280\u5de7\uff1a\u8bbe\u7f6e\u6700\u5927\u503c\u6bd4\u7ed9\u51fa\u5e8f\u5217\u7684\u6700\u5927\u503c\u8fd8\u5c0f\n\n\u5982\u679c\u6ca1\u6709\u4fee\u6539\u6839\u7684\u64cd\u4f5c\uff0c\u90a3\u5fc5\u5b9a\u662f\u4e2a\u6811\u94fe\u5256\u5206\u677f\u5b50\u9898\uff0c\u53ea\u9700\u8981\u6c42\u7ebf\u6bb5\u6811\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4ee5\u53ca\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n\u4f46\u662f\uff0c\u6709\u4e86\u6362\u6839\u64cd\u4f5c\u5c31\u6709\u4e86\u9ebb\u70e6\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5c0f\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u4e0d\u7ba1\u6839\u662f\u4ec0\u4e48\uff0c\u4e00\u4e2a\u70b9 $x$ \u5230\u53e6\u4e00\u70b9 $y$ \u7684\u8def\u5f84\u90fd\u662f\u4e0d\u53d8\u7684\u3002\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ee5$1$\u4e3a\u6839\u8fdb\u884c\u6811\u5256\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u50cf\u666e\u901a\u6811\u5256\u4e00\u6837\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5904\u7406\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u8bbe\u5f53\u524d\u8981\u67e5\u8be2\u7684\u8282\u70b9\u4e3a $x$\uff0c\u5f53\u524d\u7684\u6839\u4e3a $root$\uff0c\u5728\u67e5\u8be2\u65f6\u5206\u591a\u79cd\u60c5\u51b5\uff1a\n\n- $root$ \u7b49\u4e8e $x$ \u65f6\uff0c\u76f4\u63a5\u8f93\u51fa\u5168\u5c40\u6700\u5c0f\u503c\n- $root$ \u4e0d\u5728 $x$ \u7684\u5b50\u6811\u4e2d\u65f6\uff0c$x$ \u7684\u5b50\u6811\u8fd8\u662f\u4ee5 $1$ \u4e3a\u6839\u65f6\u7684\u5b50\u6811\uff0c\u76f4\u63a5\u5bf9 $x$ \u8fdb\u884c\u67e5\u8be2\n- $root$ \u5728 $x$ \u7684\u5b50\u6811\u5f53\u4e2d\u65f6\uff0c$x$ \u7684\u5b50\u6811\u4e2d\u4e0d\u80fd\u8bbf\u95ee\u5230\u7684\u662f $root$ \u6240\u5728\u652f\u94fe\uff0c\u6c42\u51fa $x$ \u5728 $root$ \u652f\u94fe\u5904\u7684\u513f\u5b50 $sonn$\uff0c\u56e0\u4e3a\u5728 $dfn$ \u5e8f\u4e2d\uff0c\u4e00\u4e2a\u70b9\u4ee5\u53ca\u5176\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u6c42$1\\sim dfn[sonn]-1$ \u4e2d\u7684\u6700\u5c0f\u503c\u548c $dfn[sonn] + siz[sonn]\\sim n$\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u53d6 $\\min$ \u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\n\n## \u4ee3\u7801\n\n```cpp\n/*\nAuthor:loceaner\n*/\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int A = 2e5 + 11;\nconst int B = 1e6 + 11;\nconst int mod = 1e9 + 7;\nconst int inf = 0x7fffffff;\n\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  for ( ; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n  for ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n  return x * f;\n}\n\nint n, m, root, cnt, pre[A], val[A], head[A]; \nstruct node { int to, nxt; } e[A << 1];\n\ninline void add(int from, int to) {\n  e[++cnt].to = to;\n  e[cnt].nxt = head[from];\n  head[from] = cnt;\n}\n\nnamespace Seg {\n  #define lson rt << 1\n  #define rson rt << 1 | 1\n  \n  struct tree { int l, r, minn, lazy; } t[A << 2];\n  \n  inline void pushup(int rt) {\n    t[rt].minn = min(t[lson].minn, t[rson].minn);\n  }\n  \n  inline void pushdown(int rt) {\n    t[lson].minn = t[rt].lazy;\n    t[rson].minn = t[rt].lazy;\n    t[lson].lazy = t[rt].lazy;\n    t[rson].lazy = t[rt].lazy;\n    t[rt].lazy = 0;\n  }\n  \n  void build(int rt, int l, int r) {\n    t[rt].l = l, t[rt].r = r, t[rt].lazy = 0;\n    if (l == r) {\n      t[rt].minn = val[pre[l]];\n      return;\n    }\n    int mid = (l + r) >> 1;\n    build(lson, l, mid), build(rson, mid + 1, r);\n    pushup(rt);\n  }\n\n  void update(int rt, int l, int r, int k) {\n    if (l <= t[rt].l && t[rt].r <= r) {\n      t[rt].lazy = t[rt].minn = k; \n      return;\n    }\n    if (t[rt].lazy) pushdown(rt);\n    int mid = (t[rt].l + t[rt].r) >> 1;\n    if (l <= mid) update(lson, l, r, k);\n    //debug: l, r \u5199\u6210 l, mid \n    if (r > mid) update(rson, l, r, k);\n    //debug: l, r \u5199\u6210 mid + 1, r \n    pushup(rt);\n  }\n  \n  int query(int rt, int l, int r) {\n    if (l <= t[rt].l && t[rt].r <= r) return t[rt].minn;\n    if (t[rt].lazy) pushdown(rt);\n    int mid = (t[rt].l + t[rt].r) >> 1, ans = inf;\n    if (l <= mid) ans = min(ans, query(lson, l, r));\n    //debug: l, r \u5199\u6210 l, mid \n    if (r > mid) ans = min(ans, query(rson, l, r));\n    //debug: l, r \u5199\u6210 mid + 1, r \n    return ans;\n    //\u7206\u96f6\u5c0f\u6280\u5de7\uff1a\u5728\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e2d\u4e0d\u52a0return \n  }\n}\n\nint dfscnt, dep[A], fa[A], siz[A], son[A], dfn[A], top[A];\n\nvoid prepare(int x, int f) {\n  siz[x] = 1, fa[x] = f, dep[x] = dep[f] + 1;\n  for (int i = head[x]; i; i = e[i].nxt) {\n    int to = e[i].to;\n    if (to == f) continue;\n    prepare(to, x), siz[x] += siz[to];\n    if (siz[to] > siz[son[x]]) son[x] = to;\n  }\n}\n\nvoid dfs(int x, int tp) {\n  dfn[x] = ++dfscnt, pre[dfscnt] = x, top[x] = tp;\n  if (son[x]) dfs(son[x], tp);\n  for (int i = head[x]; i; i = e[i].nxt) {\n    int to = e[i].to;\n    if (to == fa[x] || to == son[x]) continue;\n    dfs(to, to);\n  } \n} \n\ninline void upd(int x, int y, int val) {\n  while (top[x] != top[y]) {\n    if (dep[top[x]] < dep[top[y]]) swap(x, y);\n    Seg::update(1, dfn[top[x]], dfn[x], val);\n    x = fa[top[x]];\n  }\n  if (dep[x] > dep[y]) swap(x, y);\n  Seg::update(1, dfn[x], dfn[y], val); return;\n}\n\ninline int prove(int x) {\n  if (root == x) return 1;\n  if (dfn[root] <= dfn[x] || dfn[root] > dfn[x] + siz[x] - 1) return 2;\n  return 0;\n}\n\ninline void solve(int x) {\n  int flag = prove(x);\n//  cout << flag << \" \";\n  if (flag == 1) cout << Seg::t[1].minn << '\\n';\n  else if (flag == 2) cout << Seg::query(1, dfn[x], dfn[x] + siz[x] - 1) << '\\n';\n  else {\n    int now = root, sonn = 0;\n    while (top[now] != top[x]) {\n      if (fa[top[now]] == x) { sonn = top[now]; break; }\n      now = fa[top[now]]; \n    }\n    if (!sonn) sonn = son[x];\n    int ans = Seg::query(1, 1, dfn[sonn] - 1);\n    if (dfn[sonn] + siz[sonn] - 1 != n) \n      ans = min(ans, Seg::query(1, dfn[sonn] + siz[sonn], n));\n    cout << ans << '\\n';\n  }\n}\n\nint main() {\n//  freopen(\"a.in\", \"r\", stdin);\n//  freopen(\"1.out\", \"w\", stdout);\n  n = read(), m = read();\n  for (int i = 1; i < n; i++) {\n    int x = read(), y = read();\n    add(x, y), add(y, x);\n  }\n  for (int i = 1; i <= n; i++) val[i] = read();\n  prepare(1, 0), dfs(1, 1), Seg::build(1, 1, n);\n  root = read();\n  while (m--) {\n    int opt = read(), x = read(), y, val;\n    if (opt == 1) root = x;\n    else if (opt == 2) y = read(), val = read(), upd(x, y, val);\n    else if (opt == 3) solve(x);\n  }\n  return 0;\n}\n```",
        "postTime": 1597719147,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3979)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u663e\u7136\u662f\u4e00\u9053\u6811\u5256\u7684\u9898\uff0c\u8003\u8651\u5982\u4f55\u5b9e\u73b0\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u64cd\u4f5c$opt=2$\uff1a\u6811\u5256\u7684\u6a21\u677f\uff0c\u4e0d\u8bf4\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u64cd\u4f5c$opt=1$\uff1a\u6211\u4eec\u7528\u4e00\u4e2a\u53d8\u91cf$t$\u5b58\u4e0b\u6765\u5f53\u524d\u7684\u6839\u7684\u7f16\u53f7\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u91cd\u65b0\u8bfb\u5165$t$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e\u64cd\u4f5c$opt=3$\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6211\u4eec\u6709\u4e09\u79cd\u5904\u7406\u65b9\u6cd5\u2014\u2014  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$1.LCT$\uff08\u4e0d\u4f1a\u5440$QaQ$\uff09  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$2.$\u6bcf\u6b21\u6362\u6839\u5c31\u91cd\u65b0\u5256\u5206\uff0c\u65f6\u95f4\u53ef\u4ee5\u8fbe\u5230......\u4f18\u79c0\u7684$O(nm)$\u3002~~\u8ddf\u6a21\u62df\u4e00\u6837\u4e86~~  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$3.$\u4f7f\u7528\u6280\u5de7\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u68f5\u6811\uff1a  \n![](https://i.loli.net/2019/09/15/dXcjowv3iHRQlBu.png)  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5047\u5982\u6700\u521d\u7684\u6839\u4e3a$t_0$\uff0c\u5f53\u524d\u7684\u6839\u4e3a$t$\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c$t_0=1,t=6$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u90a3\u4e48\u6211\u4eec\u5728\u5904\u7406\u64cd\u4f5c$3$\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u70b9\u5206\u6210\u4e09\u7c7b\u70b9\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$1.A=\\{t\\}$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$2.B=\\{v|v\\text{\u5728}t- t_0\\text{\u7684\u8def\u5f84\u4e0a\u4e14} v\\not=t\\}$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$3.C=\\{v|v\\text{\u4e0d\u5728}t-t_0\\text{\u7684\u8def\u5f84\u4e0a}\\}$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e$1$\u7c7b\u70b9\uff0c\u8fd9\u76f8\u5f53\u4e8e\u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e$3$\u7c7b\u70b9\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u5728\u4ee5$t$\u4e3a\u6839\u7684\u6811\u4e0a\uff0c\u5b83\u4eec\u7684**\u5b50\u6811\u4e2d\u7684\u70b9\u548c\u4ee5$t_0$\u4e3a\u6839\u65f6\u662f\u4e00\u6837\u7684**\uff0c\u6240\u4ee5\u6b63\u5e38\u67e5\u8be2\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e$2$\u7c7b\u70b9\uff0c\u5b83\u4eec\u7684\u5b50\u6811\u53d1\u751f\u4e86\u53d8\u5316\u3002\u6bd4\u5982\uff0c\u5728\u4f8b\u5b50\u91cc\uff0c$1$\u5728$t_0$\u4e3a\u6839\u65f6\uff0c\u5b50\u6811\u4e2d\u7684\u70b9\u4e3a$V$\uff08\u6240\u6709\u70b9\uff09\uff1b\u5728$t$\u4e3a\u6839\u65f6\uff0c\u5b50\u6811\u4e2d\u7684\u70b9\u4e3a$\\{1,2,8,9,4,7\\}$\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e$V-\\{3,5,6,10,11,12\\}$\u3002\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a$V-\\{3\\text{\u7684\u5b50\u6811\u7684\u70b9}\\}$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8bbe$s(u)$\u4e3a$u$\u5728\u4ee5$t_0$\u4e3a\u6839\u65f6\u5b50\u6811\u4e2d\u70b9\u7684\u96c6\u5408,$s'(u)$\u4e3a$u$\u5728\u4ee5$t$\u4e3a\u6839\u65f6\u5b50\u6811\u4e2d\u70b9\u7684\u96c6\u5408\uff0c$dep(u)$\u4e3a$u$\u5728\u4ee5$t_0$\u4e3a\u6839\u65f6\u7684\u6df1\u5ea6\uff08$dep(t_0)=0$\uff09\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u7684\u89c4\u5f8b\u2014\u2014  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5bf9\u4e8e$u\\in B$\uff0c\u627e\u51fa\u5728$u-t$\u7684\u8def\u5f84\u4e0a$dep$\u6700\u5c0f\u4e14$\\not=u$\u7684\u70b9$v$\uff0c\u90a3\u4e48\u5728\u65b0\u6811\u4e0a\u7684$u$\u7684\u5b50\u6811\u7684\u70b9$s'(u)=V-s(v)$** \u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6bd4\u5982\uff0c\u5728\u4e0a\u4f8b\u4e2d\uff0c\u82e5$u=1$\uff0c\u5219$v=3$\uff0c$s'(u)=V-s(3)$\uff0c\u4e0e\u6211\u4eec\u7684\u7ed3\u679c\u662f\u543b\u5408\u7684\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e8e\u662f\u5c31\u53ef\u4ee5\u5728\u5904\u7406\u64cd\u4f5c$3$\u7684\u65f6\u5019\u5206\u7c7b\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u603b\u65f6\u95f4$O(m\\log_2^2n)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n\ntypedef unsigned int ui;\n\nconst ui INF = ( 1u << 31 ) + 1;\nconst int MAXN = 100005, MAXM = 100005, MAXLOG = 20;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar(); int f = 1;\n\twhile( s < '0' || '9' < s ){ f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ){ x = ( x << 3 ) + ( x << 1 ) + s - '0', s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ), x = -x; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt;\n}Graph[MAXN << 1];\n\nstruct segmentTreeNode\n{\n\tui mn, tag;\n\t#define mn( a ) ( segTree[a].mn )\n\t#define tag( a ) ( segTree[a].tag )\n}segTree[MAXN << 2];\n\nint f[MAXN][MAXLOG];\nint seq[MAXN], LTail[MAXN];\nui def[MAXN];\nint head[MAXN], siz[MAXN], dep[MAXN], heavy[MAXN], bel[MAXN], LPos[MAXN];\nint N, M, rt, cnt, ID, tot, lg2;\n\nvoid setVal( const int u, const ui v ) { mn( u ) = v, tag( u ) = v; }\nvoid upt( const int u ) { mn( u ) = MIN( mn( u << 1 ), mn( u << 1 | 1 ) ); }\nvoid addEdge( const int from, const int to ) { Graph[++ cnt].to = to, Graph[cnt].nxt = head[from], head[from] = cnt; }\nvoid normalize( const int u ) { if( ~ tag( u ) ) setVal( u << 1, tag( u ) ), setVal( u << 1 | 1, tag( u ) ), tag( u ) = -1; }\nvoid balance( int &u, const int steps ) { for( int i = 0 ; ( 1 << i ) <= steps ; i ++ ) if( steps & ( 1 << i ) ) u = f[u][i]; }\n\nvoid build( const int u, const int l, const int r )\n{\n\tif( l > r ) return ; tag( u ) = -1;\n\tif( l == r ) { mn( u ) = def[seq[l]]; return; }\n\tint mid = l + r >> 1;\n\tbuild( u << 1, l, mid ), build( u << 1 | 1, mid + 1, r );\n\tupt( u );\n}\n\nvoid update( const int u, const int l, const int r, const int segL, const int segR, const ui v )\n{\n\tint mid = l + r >> 1;\n\tif( segL <= l && r <= segR ) { setVal( u, v ); return ; }\n\tif( l == r ) return ; normalize( u );\n\tif( segL <= mid ) update( u << 1, l, mid, segL, segR, v );\n\tif( segR > mid ) update( u << 1 | 1, mid + 1, r, segL, segR, v );\n\tupt( u );\n}\n\nui query( const int u, const int l, const int r, const int segL, const int segR )\n{\n\tif( segL > segR ) return INF;\n\tint mid = l + r >> 1; ui ret = INF;\n\tif( segL <= l && r <= segR ) return mn( u );\n\tif( l == r ) return INF; normalize( u );\n\tif( segL <= mid ) ret = MIN( ret, query( u << 1, l, mid, segL, segR ) );\n\tif( segR > mid ) ret = MIN( ret, query( u << 1 | 1, mid + 1, r, segL, segR ) );\n\treturn ret;\n}\n\nvoid DFS1( const int u, const int fa )\n{\n\tdep[u] = dep[fa] + 1, f[u][0] = fa, siz[u] = 1, heavy[u] = -1;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ( v = Graph[i].to ) ^ fa )\n\t\t{\n\t\t\tDFS1( v, u ), siz[u] += siz[v];\n\t\t\tif( heavy[u] == -1 || siz[heavy[u]] < siz[v] ) heavy[u] = v;\n\t\t}\n}\n\nvoid DFS2( const int u, const int fa )\n{\n\tseq[++ ID] = u, LPos[u] = ID;\n\tif( ~ heavy[u] ) DFS2( heavy[u], u ), bel[u] = bel[heavy[u]];\n\telse bel[u] = ++ tot;\n\tLTail[bel[u]] = u;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ( v = Graph[i].to ) ^ fa && v ^ heavy[u] )\n\t\t\tDFS2( v, u );\n}\n\nvoid init()\n{\n\tlg2 = log2( N );\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n}\n\nint LCA( int u, int v )\n{\n\tif( dep[u] > dep[v] ) balance( u, dep[u] - dep[v] );\n\tif( dep[v] > dep[u] ) balance( v, dep[v] - dep[u] );\n\tif( u == v ) return u;\n\tfor( int i = lg2 ; ~ i ; i -- ) if( f[u][i] ^ f[v][i] ) u = f[u][i], v = f[v][i];\n\treturn f[u][0];\n}\n\nvoid change( int u, int v, const int nVal )\n{\n\tint lca = LCA( u, v );\n\twhile( bel[lca] ^ bel[u] ) update( 1, 1, N, LPos[LTail[bel[u]]], LPos[u], nVal ), u = f[LTail[bel[u]]][0];\n\twhile( bel[lca] ^ bel[v] ) update( 1, 1, N, LPos[LTail[bel[v]]], LPos[v], nVal ), v = f[LTail[bel[v]]][0];\n\tupdate( 1, 1, N, LPos[lca], LPos[u], nVal ), update( 1, 1, N, LPos[lca], LPos[v], nVal );\n}\n\nui query( const int u )\n{\n\tif( u == rt ) return query( 1, 1, N, 1, N );\n\tint lca = LCA( rt, u );\n\tif( lca ^ u ) return query( 1, 1, N, LPos[u], LPos[u] + siz[u] - 1 );\n\telse\n\t{\n\t\tint del = rt; balance( del, dep[rt] - dep[u] - 1 );\n\t\treturn MIN( query( 1, 1, N, 1, LPos[del] - 1 ), query( 1, 1, N, LPos[del] + siz[del], N ) );\n\t}\n}\n\nint main()\n{\n\tint u, v, opt, nVal;\n\tread( N ), read( M );\n\tfor( int i = 1 ; i < N ; i ++ ) read( u ), read( v ), addEdge( u, v ), addEdge( v, u );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( def[i] );\n\tread( rt );\n\tDFS1( rt, 0 ), DFS2( rt, 0 ), init();\n\tbuild( 1, 1, N );\n\twhile( M -- )\n\t{\n\t\tread( opt );\n\t\tif( opt == 1 ) read( rt );\n\t\tif( opt == 2 ) read( u ), read( v ), read( nVal ), change( u, v, nVal );\n\t\tif( opt == 3 ) read( u ), write( query( u ) ), putchar( '\\n' );\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1578460332,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[LG P3979]\u9065\u8fdc\u7684\u56fd\u5ea6"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65e0\u6307\u9488AAA\u6811\u7684\u5199\u6cd5\n\nAAA\u6811\u5c5e\u4e8e\u9b54\u6539\u7248LCT\uff0c\u5177\u6709\u53ef\u4ee5\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u6027\u8d28\uff0c\u5e94\u8be5\u5c5e\u4e8e\u7c7bTop tree\u7684\u4e00\u79cd\u3002\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u7ef4\u62a4\u6362\u6839\u64cd\u4f5c\uff0c\u540c\u65f6\u7ef4\u62a4\u94fe\u4e0a\u8d4b\u503c\u548c\u5b50\u6811\u6700\u5c0f\u503c\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u8981\u6c42\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\uff0c\u666e\u901a\u7684LCT\u96be\u4ee5\u7ef4\u62a4\uff0c\u56e0\u6b64\u8003\u8651\u4f7f\u7528AAA\u6811\u540c\u65f6\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\n\n\u5b9e\u73b0\u65f6\u5b50\u6811\u4fee\u6539\u6807\u8bb0\u548c\u94fe\u7684\u4fee\u6539\u6807\u8bb0\u9700\u8981\u5206\u522b\u4e0b\u4f20\uff0c\u6700\u540e\u5b8c\u6210\u7edf\u8ba1\u3002\n\n\u9898\u76ee\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(logn)$\uff0c\u4f46\u5e38\u6570\u8fdc\u8fdc\u5927\u4e8eLCT\u548c\u6811\u5256\u5199\u6cd5\uff0c\u5e76\u4e14\u5b9e\u73b0\u96be\u5ea6\u5f88\u5927\uff0c\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u4e5f\u6bd4\u8f83\u591a\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint x=0; int f=1; char ch=getchar();\n\twhile(!isdigit(ch)) {if(ch=='-')f=-1; ch=getchar();}\n\twhile(isdigit(ch)) {x=x*10+ch-'0'; ch=getchar();}\n\treturn x*f;\n}\n\nstruct Tag\n{\n\tint mul,add;\n\n\tTag(int mulv=1,int addv=0)\n\t{mul=mulv,add=addv;}\n\n\tbool emp() {return mul==1 && add==0;}\n\n\tfriend Tag operator + (Tag u,Tag v)\n\t{return Tag(u.mul*v.mul,u.add*v.mul+v.add);}\n};\n\nstruct Data\n{\n\tint mx,mn,sm,sz;\n\n\tData(int mxv=0,int mnv=0,int smv=0,int szv=0)\n\t{mx=mxv,mn=mnv,sm=smv,sz=szv;}\n\n\tfriend Data operator + (Data u,Tag v)\n\t{\n\t\tif(u.sz)\n\t\t{\n\t\t\tint mxv=u.mx*v.mul+v.add;\n\t\t\tint mnv=u.mn*v.mul+v.add;\n\t\t\tint smv=u.sm*v.mul+v.add*u.sz;\n\t\t\treturn Data(mxv,mnv,smv,u.sz);\n\t\t}\n\t\treturn u;\n\t}\n\n\tfriend Data operator + (Data u,Data v)\n\t{\n\t\tint mxv=max(u.mx,v.mx);\n\t\tint mnv=min(u.mn,v.mn);\n\t\tint smv=u.sm+v.sm;\n\t\tint szv=u.sz+v.sz;\n\t\treturn Data(mxv,mnv,smv,szv);\n\t}\n};\n\nconst int MAXN = 200005;\nstruct Edge { int from,to; } e[MAXN];\nint fa[MAXN],ch[MAXN][4],val[MAXN];\nTag stag[MAXN],xtag[MAXN];\nData sld[MAXN],vir[MAXN],all[MAXN];\nbool rev[MAXN],isx[MAXN];\nint bin[MAXN],cnt,ft;\nint rt,n,m;\n\ninline void pushr(int x)\n{swap(ch[x][0],ch[x][1]),rev[x]^=1;}\n\ninline void tagsld(int x,Tag w)\n{\n\tstag[x]=stag[x]+w; sld[x]=sld[x]+w;\n\tval[x]=val[x]*w.mul+w.add;\n\tall[x]=sld[x]+vir[x];\n}\n\ninline void tagvir(int x,Tag w,bool fg=1)\n{\n\txtag[x]=xtag[x]+w; all[x]=all[x]+w;\n\tvir[x]=vir[x]+w;\n\tif(fg) tagsld(x,w);\n}\n\ninline void pushup(int x)\n{\n\tsld[x]=vir[x]=all[x]=Data(-(1<<30),1<<30,0,0);\n\tif(!isx[x]) all[x]=sld[x]=Data(val[x],val[x],val[x],1);\n\tfor (int i = 0; i < 2; ++i)\n\t{\n\t\tif(ch[x][i])\n\t\t{\n\t\t\tsld[x]=sld[x]+sld[ch[x][i]];\n\t\t\tvir[x]=vir[x]+vir[ch[x][i]];\n\t\t}\n\t}\n\tfor (int i = 0; i < 4; ++i)\n\t\tif(ch[x][i]) all[x]=all[x]+all[ch[x][i]];\n\tfor (int i = 2; i < 4; ++i)\n\t\tif(ch[x][i]) vir[x]=vir[x]+all[ch[x][i]];\n}\n\ninline void pushdown(int x)\n{\n\tif(rev[x])\n\t{\n\t\tif(ch[x][0]) pushr(ch[x][0]);\n\t\tif(ch[x][1]) pushr(ch[x][1]);\n\t\trev[x]=0;\n\t}\n\tif(!xtag[x].emp())\n\t{\n\t\tfor (int i = 0; i < 4; ++i)\n\t\t\tif(ch[x][i]) tagvir(ch[x][i],xtag[x],i>=2);\n\t\txtag[x]=Tag(1,0);\n\t}\n\tif(!stag[x].emp())\n\t{\n\t\tfor (int i = 0; i < 2; ++i)\n\t\t\tif(ch[x][i]) tagsld(ch[x][i],stag[x]);\n\t\tstag[x]=Tag(1,0);\n\t}\n}\n\ninline int son(int x,int y)\n{\n\tif(ch[x][y]) pushdown(ch[x][y]);\n\treturn ch[x][y];\n}\n\ninline int find(int x)\n{\n\tfor (int i = 0; i < 4; ++i)\n\t\tif(ch[fa[x]][i]==x) return i;\n\treturn -1;\n}\n\ninline void sets(int x,int w,int tp)\n{if(w) fa[w]=x; ch[x][tp]=w;}\n\ninline bool chk(int x,int tp=0)\n{\n\tif(!tp)\n\t\treturn !fa[x] || ch[fa[x]][0]!=x && ch[fa[x]][1]!=x;\n\treturn !fa[x] || !isx[x] || !isx[fa[x]];\n}\n\ninline void rotate(int x,int tp)\n{\n\tif(chk(x,tp)) return;\n\tint y=fa[x];\n\tif(fa[y]) sets(fa[y],x,find(y));\n\telse fa[x]=0; fa[y]=x;\n\tif(ch[y][tp]==x)\n\t{\n\t\tch[y][tp]=ch[x][tp+1];\n\t\tch[x][tp+1]=y;\n\t\tif(ch[y][tp])\n\t\t\tfa[ch[y][tp]]=y;\n\t}\n\telse\n\t{\n\t\tch[y][tp+1]=ch[x][tp];\n\t\tch[x][tp]=y;\n\t\tif(ch[y][tp+1])\n\t\t\tfa[ch[y][tp+1]]=y;\n\t}\n\tpushup(y); pushup(x);\n}\n\ninline void update(int x)\n{if(fa[x]) update(fa[x]); pushdown(x);}\n\ninline void split(int x,int tp=0)\n{\n\tpushup(x);\n\twhile(!chk(x,tp))\n\t{\n\t\tint y=fa[x];\n\t\tif(chk(y,tp)) rotate(x,tp);\n\t\telse\n\t\t{\n\t\t\tif((ch[fa[y]][tp]==y)^(ch[y][tp]==x))\n\t\t\t\trotate(x,tp);\n\t\t\telse rotate(y,tp);\n\t\t\trotate(x,tp);\n\t\t}\n\t}\n}\n\ninline int newnode()\n{\n\tint x=ft ? bin[ft--] : ++cnt;\n\tfor (int i = 0; i < 4; ++i)\n\t\tch[x][i]=0;\n\tfa[x]=0; stag[x]=xtag[x]=Tag(1,0);\n\tsld[x]=vir[x]=all[x]=Data(-(1<<30),1<<30,0,0);\n\tisx[x]=1; rev[x]=val[x]=0;\n\treturn x;\n}\n\ninline void recycle(int x)\n{ bin[++ft]=x; }\n\ninline void add(int x,int w)\n{\n\tfor (int i = 2; i < 4; ++i)\n\t\tif(!ch[w][i]) { sets(w,x,i); return;}\n\tint y=newnode(),u;\n\tfor (u = w; isx[ch[u][2]]; u = son(u,2));\n\tsets(y,ch[u][2],2); sets(y,x,3);\n\tsets(u,y,2); split(y,2);\n}\n\ninline void del(int x)\n{\n\tif(isx[fa[x]])\n\t{\n\t\tsets(fa[fa[x]],ch[fa[x]][5-find(x)],find(fa[x]));\n\t\trecycle(fa[x]); split(fa[fa[x]],2);\n\t}\n\telse sets(fa[x],0,find(x));\n\tfa[x]=0;\n}\n\ninline void access(int x)\n{\n\tint y; update(x); split(x);\n\tif(ch[x][1])\n\t{\n\t\ty=ch[x][1]; ch[x][1]=0;\n\t\tadd(y,x); pushup(x);\n\t}\n\twhile(fa[x])\n\t{\n\t\tfor(y = fa[x]; isx[y]; y = fa[y]);\n\t\tsplit(y);\n\t\tif(ch[y][1])\n\t\t{\n\t\t\tsets(fa[x],ch[y][1],find(x));\n\t\t\tsplit(fa[x],2);\n\t\t}\n\t\telse del(x); sets(y,x,1);\n\t\tpushup(y); x=y;\n\t}\n}\n\ninline void makeroot(int x)\n{access(x),split(x),pushr(x);}\n\ninline int findroot(int x)\n{\n\taccess(x); split(x); x=son(x,0);\n\twhile(x && ch[x][1])\n\t\tx=son(x,1);\n\treturn x;\n}\n\ninline int getroot(int x)\n{\n\twhile(fa[x]) x=fa[x];\n\treturn x;\n}\n\ninline int cut(int x)\n{\n\tint y=findroot(x);\n\tif(y)\n\t{\n\t\taccess(y); split(y);\n\t\tdel(x); pushup(y);\n\t}\n\treturn y;\n}\n\ninline void link(int x,int w)\n{\n\tint y=cut(x);\n\tif(getroot(x)!=getroot(w))\n\t\ty=w;\n\tif(y)\n\t{\n\t\taccess(y); split(y);\n\t\tadd(x,y); pushup(y);\n\t}\n}\n\ninline void update_chain_sum(int u)\n{\n\tmakeroot(u); access(read()); split(u);\n\ttagsld(u,Tag(0,read()));\n\tmakeroot(rt);\n}\n\ninline void change_root(int u)\n{makeroot(u),rt=u;}\n\ninline int query_subtree(int u)\n{\n\taccess(u); split(u);\n\tint ans=val[u];\n\tfor (int j = 2; j < 4; ++j)\n\t{\n\t\tif(ch[u][j])\n\t\t{\n\t\t\tData p=all[ch[u][j]];\n\t\t\tans=min(ans,p.mn);\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main(int argc, char const *argv[])\n{\n\tn=read(); m=read(); rt=1;\n\tfor (int i = 1; i < n; ++i)\n\t\te[i].from=read(),e[i].to=read();\n\tfor (int i = 1; i <= n; ++i)\n\t\tval[++cnt]=read(),pushup(cnt);\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tmakeroot(e[i].from);\n\t\tmakeroot(e[i].to);\n\t\tlink(e[i].from,e[i].to);\n\t}\n\trt=read(); makeroot(rt);\n\tint opt,u,w;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\topt=read(); u=read();\n\t\tif(opt==1) change_root(u);\n\t\tif(opt==2) update_chain_sum(u);\n\t\tif(opt==3) printf(\"%d\\n\", query_subtree(u));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574511261,
        "uid": 107735,
        "name": "shiroi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u6ca1\u4eba\u5199top tree\u5462\uff1f~~\u662f\u592a\u6bd2\u7624\u4e86\u5417~~\n\n\u8fd9\u9053\u9898\u6709\u6362\u6839\u64cd\u4f5c\u4e0e\u94fe\u4fee\u6539\u64cd\u4f5c\uff0c\u8003\u8651\u7528lct\uff0c\u4f46\u6709\u5b50\u6811\u67e5\u8be2\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7528\u4e00\u79cd\u66f4\u5f3a\u5927\u7684\u6570\u636e\u7ed3\u6784 top tree\n\n\u5bf9\u4e8etop tree \u6211\u63a8\u8350\u4e00\u7bc7[\u535a\u5ba2](https://blog.csdn.net/u012732945/article/details/43494481)\u4f9b\u5927\u5bb6\u5b66\u4e60 \n\n- \u5bf9\u4e8e1\u64cd\u4f5c \u6211\u4eec\u76f4\u63a5\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55root\u662f\u8c01\u5c31\u884c\u4e86\n- \u5bf9\u4e8e2\u64cd\u4f5c \u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2atag\uff0ctag\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u4e58\u548c\u4e00\u4e2a\u52a0\uff0c\u8fd9\u6837\u533a\u95f4\u8d4b\u503c\u5c31\u76f8\u5f53\u4e8e **\u539f\u6765\u7684\u6743\u503c*0+\u65b0\u7684\u6743\u503c**\u3002\n- \u5bf9\u4e8e3\u64cd\u4f5c \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5Access \u7136\u540e\u67e5\u4e00\u4e0b\u4ed6\u7684\u865a\u94fe\u4e0a\u7684\u6743\u503c\n- \u6ce8\u610f2\u64cd\u4f5csplit\u662f\u4f1a\u6539\u53d8\u6839\u7684 \u6240\u4ee5\u8bb0\u5f97\u6bcf\u6b21\u64cd\u4f5c\u540emakeroot\u56de\u53bb\n\n\u611f\u89c9top tree\u5f88\u5f3a\uff0c\u4e0d\u8fc7\u677f\u5b50\u6709\u70b9\u957f\uff0c\u800c\u4e14\u5e38\u6570\u5de8\u5927\uff0c\u590d\u6742\u5ea6\u548c\u6811\u5256\u662f\u4e00\u6837\u7684\uff0c\u8003\u573a\u4e0a\u5e94\u8be5\u6ca1\u6709\u673a\u4f1a\u5199\u5427\u3002\n\n### code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define LL long long\n#define R register\nconst int N=2e5+5;\nint n,m;\nstruct ccf\n{\n    int ma,mi,sum,siz;\n    ccf(){}\n    ccf(int a,int b,int c,int d):ma(a),mi(b),sum(c),siz(d){}\n};\nstruct tag\n{\n    int mul,add;\n    tag(){mul=1;add=0;};\n    tag(int a,int b):mul(a),add(b){}\n    inline bool empty(){return mul==1&&add==0;} \n};\nccf operator+(const ccf&a,const ccf&b)\n{\n    return ccf(max(a.ma,b.ma),min(a.mi,b.mi),a.sum+b.sum,a.siz+b.siz);\n}\nccf operator+(const ccf&a,const tag&b)\n{\n    if(!a.siz)return a;\n    return ccf(a.ma*b.mul+b.add,a.mi*b.mul+b.add,a.sum*b.mul+b.add*a.siz,a.siz);\n}\ntag operator+(const tag&a,const tag&b)\n{\n    return tag(a.mul*b.mul,a.add*b.mul+b.add);\n}\nstruct lct\n{\n    lct *ch[4],*par;\n    tag CHAIN,ALL;\n    ccf cha,sub,all;\n    int rev,inr,val;\n    inline void filp(){rev^=1;swap(ch[0],ch[1]);}\n    inline void pushshi(const tag&a)\n    {\n        cha=cha+a;\n        CHAIN=CHAIN+a;\n        val=val*a.mul+a.add;\n        all=cha+sub;\n    }\n    inline void pushxu(const tag&a,bool fff=1)\n    {\n        ALL=ALL+a;\n        all=all+a;\n        sub=sub+a;\n        if(fff)pushshi(a);\n    }\n    inline void rz()\n    {\n        cha=all=sub=ccf(-(1<<30),1<<30,0,0);\n        if(!inr)all=cha=ccf(val,val,val,1);\n        for(int i=0;i<2;i++)if(ch[i])cha=cha+ch[i]->cha,sub=sub+ch[i]->sub;\n        for(int i=2;i<4;i++)if(ch[i])sub=sub+ch[i]->all;\n        for(int i=0;i<4;i++)if(ch[i])all=all+ch[i]->all;\n    }\n    inline void pushdown()\n    {\n        if(rev)\n        {\n            if(ch[0])ch[0]->filp();\n            if(ch[1])ch[1]->filp();\n            rev=0;\n        }\n        if(!ALL.empty())\n        {\n            for(int i=0;i<4;i++)\n                if(ch[i])ch[i]->pushxu(ALL,i>=2);\n            ALL=tag(1,0);\n        }\n        if(!CHAIN.empty())\n        {\n            for(int i=0;i<2;i++)\n                if(ch[i])ch[i]->pushshi(CHAIN);\n            CHAIN=tag(1,0);\n        }\n    }\n    inline lct *CH(int now){if(ch[now])ch[now]->pushdown();return ch[now];}\n    inline bool CHK(int now){return par->ch[now+1]==this;}\n    inline int chk(){for(int i=0;i<4;i++)if(par->ch[i]==this)return i;return 0;}\n    inline void sets(lct *now,int d){if(now)now->par=this;ch[d]=now;}\n    inline bool get(int ty)\n    {\n        if(!ty)return !par||(par->ch[0]!=this&&par->ch[1]!=this);\n        return !par||!par->inr||!inr;\n    }\n}tr[N<<1],*cur=tr+N,*pool[N],**CUR=pool;\nint totcnt=0;\ninline lct *newlct()\n{\n    ++totcnt;\n    lct *now=(CUR==pool)?cur++:*(--CUR);\n    for(int i=0;i<4;i++)now->ch[i]=0;\n    now->par=0;\n    now->ALL=now->CHAIN=tag(1,0);\n    now->all=now->cha=ccf(-(1<<30),1<<30,0,0);\n    now->inr=1;now->rev=0;now->val=0;\n    return now;\n}\ninline void deld(lct *now){*(CUR++)=now;}\ninline void zhuan(lct *now,int ty)\n{\n    lct *p=now->par;int d=now->CHK(ty);\n    if(!p->par)now->par=0;\n    else p->par->sets(now,p->chk());\n    p->sets(now->ch[!d+ty],d+ty);\n    now->sets(p,!d+ty);\n    p->rz();\n}\ninline void splay(lct *now,int ty=0)\n{\n    while(!now->get(ty))\n    {\n        if(now->par->get(ty))zhuan(now,ty);\n        else if(now->CHK(ty)==now->par->CHK(ty))zhuan(now->par,ty),zhuan(now,ty);\n        else zhuan(now,ty),zhuan(now,ty);   \n    }\n    now->rz();\n}\ninline void add(lct *a,lct *b)\n{\n    b->pushdown();\n    for(int i=2;i<4;i++)\n        if(!b->ch[i]){b->sets(a,i);return;}\n    lct *x=newlct(),*v;\n    for(v=b;v->ch[2]->inr;v=v->CH(2));\n    x->sets(v->ch[2],2);x->sets(a,3);\n    v->sets(x,2);splay(x,2);\n}\ninline void del(lct *now)\n{\n    if(now->par->inr)\n    {\n        now->par->par->sets(now->par->ch[5-now->chk()],now->par->chk());\n        deld(now->par);\n        splay(now->par->par,2);\n    }\n    else now->par->sets(0,now->chk());\n    now->par=0;\n}\nlct *sta[N];\ninline void Access(lct *now)\n{\n    int top=0;\n    lct *v=now,*u;\n    for(u=now;u;u=u->par)sta[++top]=u;\n    while(top)sta[top--]->pushdown();\n    splay(now);\n    if(now->ch[1])\n    {\n        u=now->ch[1];\n        now->ch[1]=0;\n        add(u,now);\n        now->rz();\n    }\n    while(now->par)\n    {\n        //cout<<\"f=\"<<now->par->val<<endl;\n        for(u=now->par;u->inr;u=u->par);\n        splay(u);\n        if(u->ch[1])\n        {\n            now->par->sets(u->ch[1],now->chk());\n            splay(now->par,2);\n        }\n        else del(now);\n        u->sets(now,1);\n        (now=u)->rz();\n    }\n    splay(v);\n}\ninline void makeroot(lct *now)\n{\n    Access(now);\n    now->filp();\n}\ninline lct *findpar(lct *now)\n{\n    Access(now);\n    now=now->CH(0);\n    while(now&&now->ch[1])now=now->CH(1);\n    return now;\n}\ninline lct *findrt(lct *now)\n{\n    for(;now->par;now=now->par);\n    return now;\n}\ninline lct *cut(lct *now)\n{\n    lct *v=findpar(now);\n    if(v)\n    {\n        Access(v);\n        del(now);\n        v->rz();\n    }\n    return v;\n}\ninline void link(lct *a,lct *b)\n{\n    lct *now=cut(a);\n    if(findrt(a)!=findrt(b))now=b;\n    if(now)\n    {\n        //cout<<now->val<<endl;\n        Access(now);\n        //cout<<666<<endl;\n        add(a,now);\n        now->rz();\n    }\n}\ninline void split(lct *a,lct *b)\n{\n    makeroot(a);\n    Access(b);\n    splay(a);\n}\nint U[N],V[N],root;\ninline int rd()\n{\n    char p=getchar();int x=0,f=1;\n    while(p>'9'||p<'0')\n    {\n        if(p=='-')f=-1;\n        p=getchar();\n    }\n    while(p<='9'&&p>='0')x=(x<<1)+(x<<3)+(p^48),p=getchar();\n    return x*f;\n}\nint main()\n{\n\t//freopen(\"666.in\",\"r\",stdin);\n    n=rd();m=rd();\n    for(int i=1;i<n;i++)\n    \tU[i]=rd(),V[i]=rd();\n\tfor(int i=1;i<=n;i++)\n    {\n        tr[i].val=rd();\n        //cout<<\"tr=\"<<tr[i].val<<endl;\n        tr[i].rz();\n    }\n\tfor(int i=1;i<n;i++)\n    {\n        makeroot(tr+U[i]);\n        //cout<<U[i]<<\" \"<<V[i]<<endl; \n        link(tr+U[i],tr+V[i]);\n    }\n    root=rd();\n    makeroot(tr+root);\n    int x,op,y,z;\n    lct *u;\n    //cout<<\"fuck\"<<endl;\n    while(m--)\n\t{\n\t\top=rd();x=rd();u=tr+x;\n\t\t//printf(\"op=%d x=%d\\n\",op,x);\n\t\tmakeroot(tr+root);\n\t\tif(op==1)root=x;\n\t\telse if(op==2)\n\t\t{\n\t\t\ty=rd();z=rd();\n\t\t\tsplit(u,tr+y);\n\t\t\tu->pushshi(tag(0,z));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu=tr+x;\n\t\t\tAccess(u);\n            int ans=u->val;\n            for(int i=2;i<4;i++)if(u->ch[i])\n            {\n                ccf res=u->ch[i]->all;                    \n                ans=min(ans,res.mi);\n            }\n            printf(\"%d\\n\",ans);\n\t\t}\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1572491698,
        "uid": 132952,
        "name": "Goldia",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u770b\u5230\u94fe\u8d4b\u503c\uff0c\u4e0d\u96be\u60f3\u5230\u533a\u95f4\u8d4b\u503c\u3002\n\n$ODT$ \u53ef\u4ee5\u9ad8\u6548\u5730\u89e3\u51b3\u8fd9\u4e00\u7c7b\u95ee\u9898\u3002\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u5b58\u5728\u6bcf\u6b21\u4fee\u6539\u7684\u8282\u70b9\u4e0d\u8d85\u8fc7 $1$ \u4ee5\u53ca\u6811\u7684\u5f62\u6001\u662f\u4e00\u6761\u94fe\u7684\u90e8\u5206\u5206\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u6211\u4eec\u7ef4\u62a4\u7684\u6811\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u79cd\u6027\u8d28\u7684\u65f6\u5019\uff0c$ODT$ \u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u7ef4\u62a4\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u5f53\u6811\u662f\u4e00\u6761\u94fe\u7684\u65f6\u5019\uff0c\u6811\u5256\u7b49\u4e8e\u6ca1\u6709\u5256\uff0c\u6bcf\u6b21\u4fee\u6539\u53c8\u662f\u5355\u70b9\u4fee\u6539\uff0c\u8fd9\u5c31\u7b49\u4ef7\u4e8e\u6211\u4eec\u5728\u6570\u7ec4\u4e0a\u4f5c $for$ \u5faa\u73af\u66b4\u529b\uff0c\u663e\u7136\u662f\u4f1a\u8d85\u65f6\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7279\u5224\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\u5373\u53ef\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T>\ninline void write(T x)\n{\n    if(x>9)\n    {\n        write(x/10);\n    }\n    putchar(x%10+'0');\n}\n\ninline char nc()\n{\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void read(int &sum)\n{\n    char ch=nc();\n    int tf=0;\n    sum=0;\n    while((ch<'0'||ch>'9')&&(ch!='-')) ch=nc();\n    tf=((ch=='-')&&(ch=nc()));\n    while(ch>='0'&&ch<='9') sum=sum*10+(ch-48),ch=nc();\n    (tf)&&(sum=-sum);\n}\n\nconst int MAXN=1e6+10;\nconst long long INF=0x3f3f3f3f;\n\nstruct edge\n{\n    int u,v,nex;\n};\n\nedge e[MAXN<<1];\nint n,m,root,T;\nint head[MAXN],cnt=0;\nint a[MAXN];\n\ninline void add(int u,int v)\n{\n    e[++cnt].u=u;\n    e[cnt].v=v;\n    e[cnt].nex=head[u];\n    head[u]=cnt;\n}\n\nint dep[MAXN],fa[MAXN][30],son[MAXN],sz[MAXN],top[MAXN],id[MAXN],rk[MAXN],tot=0;\n\nvoid dfs1(int u)\n{\n    sz[u]=1;\n    for(int i=1;i<=T;++i)\n    {\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n        if(!fa[u][i]) break;\n    }\n    for(int i=head[u];i;i=e[i].nex)\n    {\n        int v=e[i].v;\n        if(dep[v]) continue;\n        fa[v][0]=u;\n        dep[v]=dep[u]+1;\n        dfs1(v);\n        sz[u]+=sz[v];\n        if(sz[v]>sz[son[u]])\n            son[u]=v;\n    }\n}\n\nvoid dfs2(int u,int tp)\n{\n    top[u]=tp;\n    id[u]=++tot;\n    rk[tot]=u;\n    if(!son[u]) return;\n    dfs2(son[u],tp);\n    for(int i=head[u];i;i=e[i].nex)\n    {\n        int v=e[i].v;\n        if(v!=fa[u][0]&&v!=son[u]) dfs2(v,v);\n    }\n}\n\ninline int getfa(int u,int k)\n{\n    for(int i=T;i>=0;--i)\n    {\n        if(k>=(1<<i))\n            u=fa[u][i],k-=(1<<i);\n    }\n    return u;\n}\n\nstruct qnode\n{\n    int lx,x,y,z;\n};\n\nqnode q[MAXN];\n\nnamespace solve1\n{\n    long long tre[MAXN],s[MAXN];\n\n    inline int lowbit(int x)\n    {\n        return x&(-x);\n    }\n\n    inline void update(int x)\n    {\n        while(x<=n)\n        {\n            tre[x]=s[x];\n            int t=lowbit(x);\n            for(int i=1;i<t;i<<=1)\n                tre[x]=min(tre[x],tre[x-i]);\n            x+=lowbit(x);\n        }\n    }\n\n    inline long long query(int l,int r)\n    {\n        long long ret=INF;\n        while(r>=l)\n        {\n            ret=min(ret,s[r]);\n            --r;\n            for(;r-lowbit(r)>=l;r-=lowbit(r))\n                ret=min(ret,tre[r]);\n        }\n        return ret;\n    }\n\n    void main()\n    {\n        memset(tre,INF,sizeof(tre));\n        for(int i=1;i<=n;++i)\n            s[i]=a[rk[i]];\n        for(int i=1;i<=n;++i)\n            update(i);\n        for(int i=1;i<=m;++i)\n        {\n            int op=q[i].lx;\n            if(op==1)\n                root=q[i].x;\n            else if(op==2)\n            {\n                s[id[q[i].x]]=q[i].z;\n                update(id[q[i].x]);\n            }\n            else\n            {\n                int x=q[i].x;\n                long long ret;\n                if(x==root)\n                    ret=query(1,n);\n                else\n                {\n                    int cc=getfa(root,dep[root]-dep[x]-1);\n                    if(dep[x]<dep[root]&&fa[cc][0]==x)\n                    {\n                        ret=query(1,id[cc]-1);\n                        if(id[cc]+sz[cc]<=n)\n                            ret=min(ret,query(id[cc]+sz[cc],n));\n                    }\n                    else\n                        ret=query(id[x],id[x]+sz[x]-1);\n                }\n                write(ret);\n                putchar('\\n');\n            }\n        }\n    }\n}\n\nnamespace solve2\n{\n    struct node\n    {\n        int l,r,v;\n        node(){}\n        node(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n        bool operator <(const node &o) const\n        {\n            return l<o.l;\n        }\n    };\n\n    set<node> s;\n\n    inline set<node>::iterator split(int pos)\n    {\n        set<node>::iterator it=s.lower_bound(node(pos));\n        if(it!=s.end()&&it->l==pos) return it;\n        --it;\n        int L=it->l,R=it->r,V=it->v;\n        s.erase(it);\n        s.insert(node(L,pos-1,V));\n        return s.insert(node(pos,R,V)).first;\n    }\n\n    inline void assignval(int l,int r,int v)\n    {\n        set<node>::iterator itr=split(r+1),itl=split(l);\n        s.erase(itl,itr);\n        s.insert(node(l,r,v));\n    }\n\n    inline int query(int l,int r)\n    {\n        int ret=INT_MAX;\n        set<node>::iterator itr=split(r+1),itl=split(l);\n        for(;itl!=itr;++itl)\n            ret=min(ret,itl->v);\n        return ret;\n    }\n\n    inline void change(int x,int y,int val)\n    {\n        while(top[x]!=top[y])\n        {\n            if(dep[top[x]]<dep[top[y]]) swap(x,y);\n            assignval(id[top[x]],id[x],val);\n            x=fa[top[x]][0];\n        }\n        if(id[x]>id[y]) swap(x,y);\n        assignval(id[x],id[y],val);\n    }\n\n    void main()\n    {\n        for(int i=1;i<=n;++i)\n            s.insert(node(i,i,a[rk[i]]));\n        for(int i=1;i<=m;++i)\n        {\n            int op=q[i].lx;\n            if(op==1)\n                root=q[i].x;\n            else if(op==2)\n                change(q[i].x,q[i].y,q[i].z);\n            else\n            {\n                int x=q[i].x,ret;\n                if(x==root)\n                    ret=query(1,n);\n                else\n                {\n                    int cc=getfa(root,dep[root]-dep[x]-1);\n                    if(dep[x]<dep[root]&&fa[cc][0]==x)\n                    {\n                        ret=query(1,id[cc]-1);\n                        if(id[cc]+sz[cc]<=n)\n                            ret=min(ret,query(id[cc]+sz[cc],n));\n                    }\n                    else\n                        ret=query(id[x],id[x]+sz[x]-1);\n                }\n                write(ret);\n                putchar('\\n');\n            }\n        }\n    }\n}\n\nint main()\n{\n    bool flag1=true,flag2=true;\n    read(n),read(m);\n    T=(int)(log(n)/log(2))+1;\n    for(int i=1;i<n;++i)\n    {\n        int x,y;\n        read(x),read(y);\n        add(x,y);\n        add(y,x);\n        if(abs(x-y)!=1)\n            flag2=false;\n    }\n    for(int i=1;i<=n;++i)\n        read(a[i]);\n    read(root);\n    for(int i=1;i<=m;++i)\n    {\n        read(q[i].lx);\n        if(q[i].lx==1)\n            read(q[i].x);\n        else if(q[i].lx==2)\n        {\n            read(q[i].x),read(q[i].y),read(q[i].z);\n            if(q[i].x!=q[i].y)\n                flag1=false;\n        }\n        else\n            read(q[i].x);\n    }\n    dep[1]=1;\n    dfs1(1);\n    dfs2(1,1);\n    if(flag1&&flag2)\n        solve1::main();\n    else\n        solve2::main();\n    return 0;\n}\n```\n",
        "postTime": 1571366908,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u9700\u8981\u60f3\u4e00\u4e0b\u7684\u6811\u5256\u9898\uff0c\u5bf9\u4e8e\u8be2\u95ee\u4e09\u9700\u8981\u5904\u7406\u6362\u8ddf\u540e\u7684\u60c5\u51b5\u3002\u6211\u4eec\u4ee51\u4e3a\u6811\u6839\u8dd1\u4e00\u904d\u5256\u5206\uff0c\u5bf9\u4e8e\u6362\u8ddf\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff0c\u7b97\u51fa\u5b9e\u9645\u7b54\u6848\u3002\u8ba8\u8bba\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n\n\uff08\u4ee51\u4e3a\u6811\u6839\u7684\u6811\u4e0a\uff09\n\n- \u8ddf\u5728\u8be2\u95ee\u8282\u70b9\u7684\u7956\u5148\u4e0a\uff1a\u56e0\u4e3a\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u76f4\u63a5\u6c42\u5b50\u6811\u6700\u5c0f\u503c\n\n- \u8ddf\u5373\u8be2\u95ee\u8282\u70b9\uff1a\u76f4\u63a5\u67e5\u5168\u6811\n\n- \u8ddf\u5728\u8be2\u95ee\u8282\u70b9\u5b50\u6811\u4e2d\uff1a\u753b\u56fe\u5bb9\u6613\u5f97\u51fa\uff0c**\u6b64\u65f6\u8be2\u95ee\u8282\u70b9\u8303\u56f4\u5305\u542b\u5168\u6811\u9664\u4e86$son$\u7684\u5b50\u6811**\uff0c\u5176\u4e2d$son$\u4e3a\u8ddf\u5411\u4e0a\u8df3\u8fbe\u5230\u8be2\u95ee\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u9664\u53bb\u7ebf\u6bb5\u6811\u533a\u95f4$[idx[son], idx[son]+sz[son]-1]$\u5206\u5de6\u53f3\u533a\u95f4\u8ba8\u8bba\u5c31\u597d\u4e86\u3002\n\n\n### \u4f8b\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 100010\n#define ll long long\n#define sl (x<<1)\n#define sr (x<<1|1)\nusing namespace std;\nint head[MAXN],vv[MAXN*2],nxt[MAXN*2],tot;\nconst int INF=0x3fffffff;\ninline void add_edge(int u, int v){\n    vv[++tot]=v;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint nod_val[MAXN];\nint mxs[MAXN],sz[MAXN],dep[MAXN];\nint f[MAXN][20];\nvoid dfs1(int u, int fa){\n    dep[u]=dep[fa]+1;\n    f[u][0]=fa;\n    for(int i=1;i<=17;++i)\n        f[u][i]=f[f[u][i-1]][i-1];\n    sz[u]=1;\n    int mxsz=-1;\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==fa) continue;\n        dfs1(v, u);\n        sz[u]+=sz[v];\n        if(mxsz<sz[v]){\n            mxsz=sz[v];\n            mxs[u]=v;\n        }\n    }\n}\nint idx[MAXN],topf[MAXN],cnt,wnew[MAXN];\nvoid dfs2(int u, int top){\n    idx[u]=++cnt;\n    topf[u]=top;\n    wnew[cnt]=nod_val[u];\n    if(mxs[u]==0) return;\n    dfs2(mxs[u], top);\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        if(v==f[u][0]||v==mxs[u]) continue;\n        dfs2(v, v);\n    }\n}\nstruct nod{\n    int l, r;\n    int val,lazy;\n} tre[MAXN*4];\n\nvoid buildt(int x, int l, int r){\n    tre[x].l=l,tre[x].r=r,tre[x].lazy=0;\n    if(l==r){\n        tre[x].val=wnew[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    buildt(sl, l, mid);\n    buildt(sr, mid+1, r);\n    tre[x].val=min(tre[sl].val, tre[sr].val);\n}\nvoid push_down(int x){\n    if(tre[x].lazy==0) return;\n    tre[sl].lazy=tre[sl].val=tre[x].lazy;\n    tre[sr].lazy=tre[sr].val=tre[x].lazy;\n    tre[x].lazy=0;\n}\nvoid change(int x, int l, int r, int val){\n    if(l<=tre[x].l&&tre[x].r<=r){\n        tre[x].lazy=tre[x].val=val;\n        return;\n    }\n    push_down(x);\n    int mid=(tre[x].l+tre[x].r)>>1;\n    if(l<=mid) change(sl, l, r, val);\n    if(mid<r) change(sr, l, r, val);\n    tre[x].val=min(tre[sl].val, tre[sr].val);\n}\nint query(int x, int l, int r){\n    if(l<=tre[x].l&&tre[x].r<=r){\n        return tre[x].val;\n    }\n    push_down(x);\n    int mid=(tre[x].l+tre[x].r)>>1;\n    int ans=INF;\n    if(l<=mid) ans=min(query(sl, l, r), ans);\n    if(mid<r) ans=min(query(sr, l, r), ans);\n    return ans;\n}\nvoid tre_change(int a, int b, int val){\n    while(topf[a]!=topf[b]){\n        if(dep[topf[a]]<dep[topf[b]]) swap(a,b);\n        change(1, idx[topf[a]], idx[a], val);\n        a=f[topf[a]][0];\n    }\n    if(dep[a]<dep[b]) swap(a,b);\n    change(1, idx[b], idx[a], val);\n}\nint tre_lca(int a, int b){\n    while(topf[a]!=topf[b]){\n        if(dep[topf[a]]<dep[topf[b]]) swap(a,b);\n        a=f[topf[a]][0];\n    }\n    if(dep[a]<dep[b]) return a;\n    return b;\n}\nint tre_query(int a){\n    return query(1, idx[a], idx[a]+sz[a]-1);\n}\nint get_son(int a, int b){\n    for(int i=17;i>=0;--i)\n        if(dep[f[b][i]]>dep[a]) b=f[b][i];\n    return b;\n}\nint n,q,cap;\nint main()\n{\n    scanf(\"%d %d\", &n, &q);\n    for(int i=1;i<n;++i){\n        int a,b;\n        scanf(\"%d %d\", &a, &b);\n        add_edge(a, b);\n        add_edge(b, a);\n    }\n    for(int i=1;i<=n;++i) scanf(\"%d\", &nod_val[i]);\n    scanf(\"%d\", &cap);\n    dfs1(1, 1);\n    dfs2(1, 1);\n    buildt(1, 1, n);\n    while(q--){\n        int opt;\n        scanf(\"%d\", &opt);\n        if(opt==1){\n            scanf(\"%d\", &cap);\n        }else if(opt==2){\n            int l,r,v;\n            scanf(\"%d %d %d\", &l, &r, &v);\n            tre_change(l, r, v);\n        }else if(opt==3){\n            int t;\n            scanf(\"%d\", &t);\n            int lca=tre_lca(t, cap);\n            if(t==cap) printf(\"%d\\n\", query(1, 1, n));\n            else if(lca!=t) printf(\"%d\\n\", tre_query(t));\n            else{\n                int son=get_son(t, cap);\n                int ans=min(query(1, 1, idx[son]-1), query(1, idx[son]+sz[son], n)); // \u9664\u53bb\u4e2d\u95f4\u90a3\u4e2a\u533a\u95f4\uff0c\u5206\u5de6\u53f3\u533a\u95f4\u6c42\n                printf(\"%d\\n\", ans);\n            }\n        }else puts(\"Erro!\");\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1565156744,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u4e00\u9053\u6362\u6839\u6811\u5256\u597d\u9898\uff0c\u601d\u7ef4\u5f88\u5de7\u5999\n\n\u53bb\u98df\u5802\u65f6\u5f00\u73a9\u7b11\u8ddf\u673a\u623f\u6570\u636e\u7ed3\u6784\u4e4b\u795e\u8bf4\u6811\u5256\u53ef\u4ee5\u6362\u6839\uff0c\u4ed6\u4e00\u672c\u6b63\u7ecf\u7684\u8bf4\uff1a\u201c\u6811\u5256\u771f\u7684\u53ef\u4ee5\u6362\u6839\u3002\u201d\u7136\u540e\u5f53\u665a\u8003\u8bd5\u5c31\u8003\u4e86\u8fd9\u9053\u9898\u3002~~\uff08\u4e00\u53e3\u6bd2\u5976\uff09~~\n\n\u672c\u9898\u8981\u6c42:\u6362\u6839+\u94fe\u4fee\u6539+\u5b50\u6811min\n\n\u6362\u6839\u548c\u94fe\u4fee\u6539\u9996\u5148\u53ef\u4ee5\u60f3\u5230LCT\uff0c\u7136\u800cLCT\u5f31\u4e8e\u7ef4\u62a4\u5b50\u6811\uff0c\u8fd9\u79cd\u7ef4\u62a4\u5b50\u6811\u6700\u503c\u66f4\u662f\u9ebb\u70e6\u3002\n\n\u8003\u8651\u6811\u5256\u3002\u6362\u6839\u80af\u5b9a\u4e0d\u80fd\u91cd\u6784\u6811\u5256\u3002\u90a3\u5c31\u8f6c\u5316\u4e00\u4e0b\uff1f\n\n\u753b\u4e2a\u56fe\u770b\u770b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/51549.png)\n\n\u6362\u5b8c\u540e\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/51551.png) \n\n\uff08x\u4e3a\u539f\u6811\u6839\uff0cy\u4e3a\u8981\u6362\u7684\u6839\uff09\n\n\u62bd\u8c61\u70b9\u7406\u89e3\uff0c\u5c31\u662f**\u628ay\u62ce\u4e86\u8d77\u6765**\uff08\u53ef\u4ee5\u5728\u8111\u4e2dyy\u4e00\u4e2aGIF\uff09\n\n\u6ce8\u610f\u5230\uff0c\u70b91\u548c\u70b9x\u5b50\u6811\u53d8\u4e86\uff0c\u5176\u4ed6\u7684\u90fd\u6ca1\u53d8\u3002\u8fd9\u4e24\u4e2a\u70b9\u90fd\u662fy\u7684\u7956\u5148\uff0c\u4e5f\u5c31\u662f\u8bf4\u539f\u6811\u4e2d\u4e3ay\u7684\u7956\u5148\u7684\u70b9\u5b50\u6811\u53d8\u4e86\n\n\u62bd\u8c61\u6765\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u70b9\uff0cy\u672c\u6765\u5728\u5b83\u4e0b\u9762\u3002\u73b0\u5728\u8981\u628a\u5728\u5b83\u4e0b\u9762\u7684\u70b9y\u62ce\u5230\u4e0a\u9762\u53bb\u53d8\u6210\u6839\uff0c\u90a3\u4e48\u672c\u6765\u5728\u5b83\u4e0a\u9762\u7684\u70b9\u5c31\u8981\u5760\u4e0b\u53bb\u53d8\u6210\u5b83\u7684\u5b50\u6811\uff0c\u800c\u672c\u6765\u5728\u5b83\u4e0b\u9762\u7684\u70b9\u5c31\u8981\u8dd1\u5230\u4e0a\u9762\u53bb\uff0c\u4ece\u5b83\u7684\u5b50\u6811\u4e2d\u5206\u5f00\u3002\uff08\u53ef\u80fd\u5f88\u7ed5\u53e3\u3002\u3002\u3002\uff09\n\n\u90a3\u5b83\u7684\u5b50\u6811\u53d8\u6210\u5565\u4e86\uff1f\u5728\u539f\u6811\u4e2d\u4ecey\u5411\u4e0a\u8df3\uff0c\u4e00\u76f4\u5230\u5b83\u7684\u67d0\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48**\u6574\u68f5\u6811-\u8fd9\u4e2a\u513f\u5b50\u7684\u5b50\u6811=\u5b83\u7684\u65b0\u5b50\u6811**\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u5047\u8bbey\u5411\u4e0a\u8df3\u5230\u7684\u5b83\u7684\u513f\u5b50\u4e3az\uff0cz\u7684\u5b50\u6811\u90fd\u4f1a\u8dd1\u5230\u5b83\u7684\u4e0a\u9762\uff0c\u800c\u5b83\u4e0a\u9762\u7684\u70b9\u6210\u4e86\u5b83\u7684\u65b0\u5b50\u6811\uff0c\u518d\u52a0\u4e0a\u5b83\u539f\u5b50\u6811\u4e2d\u5269\u4e0b\u7684\u70b9\u5c31\u662f\u65b0\u5b50\u6811\n\n\uff08z\u7684\u5b50\u6811+\u5b83\u539f\u5b50\u6811\u4e2d\u4e0d\u662fz\u7684\u5b50\u6811\u7684\u70b9+\u5b83\u4e0a\u9762\u7684\u70b9\u3010\u4e0d\u662f\u5b83\u5b50\u6811\u4e2d\u7684\u70b9\u3011=\u6574\u68f5\u6811\uff0c\u5b83\u539f\u5b50\u6811\u4e2d\u4e0d\u662fz\u7684\u5b50\u6811\u7684\u70b9+\u5b83\u4e0a\u9762\u7684\u70b9=\u65b0\u5b50\u6811->\u6574\u68f5\u6811-z\u7684\u5b50\u6811=\u5b83\u7684\u65b0\u5b50\u6811\uff09\n\n\u7136\u540e\u5c31\u662f\u600e\u4e48\u8df3\u4e86\u3002\u5f53\u7136\u53ef\u4ee5\u7528\u500d\u589eLCA\u3002\u4e0d\u8fc7\u6811\u5256\u5199\u90fd\u5199\u4e86\uff0c\u600e\u4e48\u80fd\u4e0d\u597d\u597d\u7528\u7528\u6811\u5256\u5462\uff1f\u8003\u8651\u76f4\u63a5\u8df3\u91cd\u94fe\uff08\u5047\u8bbe\u4ecex\u8df3\u5230y\u7684\u513f\u5b50z\uff09\uff1a\n\n1.\u5982\u679cz\u662fy\u7684\u91cd\u513f\u5b50\uff0c\u4e00\u5b9a\u4f1a\u6709\u67d0\u4e00\u65f6\u523btop[x]==top[y]\uff08\u56e0\u4e3a\u5b83\u4eec\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\uff09\uff0c\u90a3\u5c31\u8fd4\u56dey\u7684\u91cd\u513f\u5b50\n\n2.\u5982\u679cz\u662fy\u7684\u8f7b\u513f\u5b50\uff0c\u4e00\u5b9a\u4f1a\u6709\u67d0\u4e00\u65f6\u523btop[x]\u7684\u7236\u4eb2\u662fy\uff0c\u90a3\u5c31\u8fd4\u56detop[x]\uff08\u53ef\u4ee5\u753b\u4e2a\u56fe\u7406\u89e3\uff09\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u6539\u53d8\u6811\u7684\u7ed3\u6784\u6362\u6839\u4e86QwQ\n\n\u6700\u540e\u8bf4\u4e00\u4e0b\u5c0f\u7ec6\u8282\uff1a\n\n1.\u6570\u636e\u8303\u56f4\u662f\u5c0f\u4e8e**\u7b49\u4e8e**$2^{31}$\uff0c\u7b49\u4e8e\u7684\u8bdd\u4f1a\u7206int\u554a\uff0c\u4e5f\u4e0d\u8981\u50cf\u6211\u4e00\u6837inf\u53ea\u5f00\u52300x3f3f3f3f\uff0cWA\u8c03\u4e86\u4e00\u5c0f\u65f6\u3002\u3002\u3002\n\n2.\u53ef\u4ee5\u7528LCA\u6765\u5224\u65ad\u662f\u5426\u662f\u5f53\u524d\u6811\u6839\u7684\u7956\u5148\u3002\u800c\u4e14\u6811\u5256\u90fd\u5199\u4e86\uff0c\u6b63\u597d\u7528\u6811\u5256\u6c42LCA\uff0c\u7701\u7a7a\u95f4\u7701\u65f6\u95f4\u7701\u7801\u91cf\uff08\u800c\u4e14\u636e\u8bf4\u6811\u5256LCA\u6bd4\u500d\u589e\u5e38\u6570\u5c0f\uff09\n\n3.\u6811\u5256\u5927\u6cd5\u597d\uff01\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 100005\n#define inf 0x3f3f3f3f\n\nconst long long INF = 1e11;\n\nusing namespace std;\n\ninline int read(){\n    int x=0,y=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return y?-x:x;\n}\ntemplate<class T>\ninline T read(){\n    T x=0;\n    int y=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar()\uff1b}\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return y?-x:x;\n}//\u5feb\u8bfb\nint head[maxn],num;\nstruct edge{\n    int pre,to;\n}e[maxn<<1];\ninline void add(int from,int to){\n    e[++num].pre=head[from],head[from]=num,e[num].to=to;\n}//\u90bb\u63a5\u8868\nlong long a[maxn];\nint seg[maxn],top[maxn],pos[maxn],deep[maxn],fa[maxn],son[maxn],siz[maxn],cap;\n//seg\u5c31\u662f\u6811\u5256\u7b2c\u4e8c\u6b21dfs\u6253\u7684\u6807\u8bb0\uff0ccap\u662f\u5f53\u524d\u9996\u90fd\nstruct Segment_Tree{\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n    long long dat[maxn<<2];\n    int tag[maxn<<2];\n    inline void update(int node){\n        dat[node]=min(dat[ls(node)],dat[rs(node)]);\n    }\n    inline void pushdown(int node){\n        dat[ls(node)]=dat[rs(node)]=dat[node];\n        tag[ls(node)]=tag[rs(node)]=1;\n        tag[node]=0;\n    }\n    void build(int l,int r,int node){\n        if(l==r){\n            dat[node]=a[pos[l]];\n            return;\n        }\n        int mid=l+r>>1;\n        build(l,mid,ls(node));\n        build(mid+1,r,rs(node));\n        update(node);\n    }\n    void change(int L,int R,int l,int r,int node,long long d){\n        if(L<=l&&R>=r){\n            dat[node]=d,tag[node]=1;\n            return;\n        }\n        if(tag[node])pushdown(node);\n        int mid=l+r>>1;\n        if(L<=mid)change(L,R,l,mid,ls(node),d);\n        if(R>mid)change(L,R,mid+1,r,rs(node),d);\n        update(node);\n    }\n    long long ask(int L,int R,int l,int r,int node){\n        if(L<=l&&R>=r)return dat[node];\n        if(tag[node])pushdown(node);\n        int mid=l+r>>1;\n        long long ans=INF;\n        if(L<=mid)ans=ask(L,R,l,mid,ls(node));\n        if(R>mid)ans=min(ans,ask(L,R,mid+1,r,rs(node)));\n        return ans;\n    }\n};//\u7ebf\u6bb5\u6811\nstruct Tree_Chain_Spilt{\n//\u95ee\u4e00\u53e5\uff0c\u6709\u8c01\u77e5\u9053\u6811\u5256\u771f\u6b63\u7684\u82f1\u6587\u540d\u662f\u5565\u5417\u3002\u3002\u3002\u6211\u5f3a\u8feb\u75c7\u53d7\u4e0d\u4e86\u554a\u3002\u3002\u3002\n    Segment_Tree st;\n    void dfs1(int node){\n        siz[node]=1;\n        for(register int i=head[node];i;i=e[i].pre){\n            if(!siz[e[i].to]){\n                fa[e[i].to]=node;\n                deep[e[i].to]=deep[node]+1;\n                dfs1(e[i].to);\n                if(siz[e[i].to]>siz[son[node]])son[node]=e[i].to;\n                siz[node]+=siz[e[i].to];\n            }\n        }\n    }\n    void dfs2(int node){\n        seg[node]=++seg[0];\n        pos[seg[0]]=node;\n        if(son[node]){\n            top[son[node]]=top[node];\n            dfs2(son[node]);\n            for(register int i=head[node];i;i=e[i].pre)\n                if(!seg[e[i].to]){\n                    top[e[i].to]=e[i].to;\n                    dfs2(e[i].to);\n                }\n        }\n    }\n    int lca(int x,int y){\n        while(top[x]!=top[y]){\n            if(deep[top[x]]<deep[top[y]])swap(x,y);\n            x=fa[top[x]];\n        }\n        return deep[x]<deep[y]?x:y;\n    }//\u6811\u5256\u6c42LCA\n    void change(int x,int y,int d){\n        while(top[x]!=top[y]){\n            if(deep[top[x]]<deep[top[y]])swap(x,y);\n            st.change(seg[top[x]],seg[x],1,seg[0],1,d);\n            x=fa[top[x]];\n        }\n        if(deep[x]<deep[y])swap(x,y);\n        st.change(seg[y],seg[x],1,seg[0],1,d);\n    }\n    int Get(int x,int y){\n        while(top[x]!=top[y]&&fa[top[y]]!=x)y=fa[top[y]];\t\n        if(fa[top[y]]==x)return top[y];\n        return son[x];\n    }//\u5411\u4e0a\u8df3\u7684\u51fd\u6570\n    long long ask(int x){\n        if(x==cap)return st.dat[1];//\u6ce8\u610f\u7279\u5224\u67e5\u8be2\u9996\u90fd\n        else if(lca(cap,x)==x){//\u7528LCA\u5224\u65adx\u662f\u5426\u662fcap\u7684\u7956\u5148\n            int k=Get(x,cap);\n            long long ans=INF;\n            if(seg[k]>1)ans=st.ask(1,seg[k]-1,1,seg[0],1);\n            if(seg[k]+siz[k]<=seg[0])ans=min(ans,st.ask(seg[k]+siz[k],seg[0],1,seg[0],1));\n            //\u6ce8\u610f\u5224\u4e00\u4e0bseg\u7684\u8fb9\u754c\uff0c\u4e0d\u8fc7\u597d\u50cf\u4e0d\u5224\u4e5f\u884c\u3002\u3002\n            return ans;\n        }\n        else return st.ask(seg[x],seg[x]+siz[x]-1,1,seg[0],1);\n    }\n}tcs;\nint main(){\n    int n=read(),m=read();\n    for(register int i=1;i<n;++i){\n        int x=read(),y=read();\n        add(x,y),add(y,x);\n    }\n    for(register int i=1;i<=n;++i)\n        a[i]=read<long long>();\n    cap=read();\n    tcs.dfs1(cap);\n    tcs.dfs2(cap);\n    tcs.st.build(1,seg[0],1);\n    while(m--){\n        int s=read();\n        if(s==1)cap=read();\n        else if(s==2){\n            int x=read(),y=read();\n            long long d=read<long long>();\n            tcs.change(x,y,d);\n        }\n        else {\n            int x=read();\n            printf(\"%lld\\n\",tcs.ask(x));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1550038220,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u68f5\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u63d0\u4f9b\u4e09\u79cd\u64cd\u4f5c\uff1a \n\n1. \u5c06x\u8282\u70b9\u53d8\u4e3a\u6839\u8282\u70b9 \n2. \u5c06x\u5230y\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6743\u503c\u5168\u90e8\u6539\u4e3av \n\n3. \u8be2\u95eex\u7684\u5b50\u6811\u4e2d\u70b9\u6743\u7684\u6700\u5c0f\u503c\n\n\u8fd9\u79cd\u9898\u4e00\u770b\u5c31\u662f\u6811\u94fe\u5256\u5206\uff0c\u53ea\u4e0d\u8fc7\u5f00\u59cb\u6ca1\u521d\u59cb\u5316WA\u4e86\u4e00\u6b21\n\n\u5206\u7c7b\u5c0f\u8ba8\u8bba\u4e00\u6ce2\uff0c\u5bb9\u6613\u53d1\u73b0\uff0crt=x\u7684\u65f6\u5019\u5c31\u662f\u6574\u4e2a\u5b50\u6811\uff0cx\u5728rt\u5230\u6839\u7684\u8def\u5f84\u4e0a\u65f6\u5c31\u662f\u6574\u4e2a\u6811\u53bb\u6389x\u5230rt\u65b9\u5411\u4e0a\u7b2c\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\uff0c\u8fd9\u4e2a\u5728\u6811\u5256\u4e0a\u8dd1\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u4e0d\u5728\u91cd\u94fe\u4e0a\u76f4\u63a5\u8df3\uff0c\u5426\u5219\u7528dfs\u5e8f\u53d6\u51fa\u91cd\u94fe\u4e0a\u7684\u67d0\u4e2a\u8ddd\u79bb\u4e0a\u7684\u70b9\u3002\u7136\u540e\u5c31\u662f\u628adfs\u5e8f\u5206\u62102\u4e2a\u533a\u95f4\u6c42\u89e3\u3002\u5426\u5219\u5c31\u662f\u6b63\u5e38\u7684\u6c42\u5b50\u6811\u3002 \n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u6743\u503c\u80fd\u662f0\uff0c\u7f51\u4e0a\u641e\u4e86\u4e00\u4efd\u4ee3\u7801\u4e0b\u6765\u62cd\uff0c\u628atag\u503c\u6539\u62101e15\uff0c\u7ed3\u679c\u6807\u8bb0\u4e0b\u653e\u5b8ctag=0,\u8c03\u4e867days\u53ef\u4ee5\u8bf4\u662f\u5f88\u7075\u6027\u4e86\u3002\n\n\u53ef\u7231\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N=1e5+5;\nint n,m,a[N],cnt,ans[N<<2],mar[N<<2],head[N];\nint d[N],f[N],son[N],size[N],top[N],id[N],rk[N];\nstruct edge{\n    int v,nex;\n}e[N<<2];\nvoid addedge(int u,int v){\n    e[++cnt]=(edge){v,head[u]};\n    head[u]=cnt;\n}\nvoid dfs(int u){\n    size[u]=1;\n    for(int i=head[u];i;i=e[i].nex){\n        int v=e[i].v;\n        if(v==f[u])continue;\n        d[v]=d[u]+1;\n        f[v]=u;\n        dfs(v);\n        size[u]+=size[v];\n        if(size[son[u]]<size[v])son[u]=v;\n    }\n}\nvoid dfs2(int u,int t){\n    top[u]=t;id[u]=++cnt;rk[cnt]=u;\n    if(son[u])dfs2(son[u],t);\n    for(int i=head[u];i;i=e[i].nex){\n        int v=e[i].v;\n        if(v==f[u]||v==son[u])continue;\n        dfs2(v,v);\n    }\n}\nvoid build(int l,int r,int id){\n    if(l==r){\n        ans[id]=a[rk[l]];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,id<<1);\n    build(mid+1,r,id<<1|1);\n    ans[id]=min(ans[id<<1],ans[id<<1|1]);\n}\nbool get(int x,int y){\n    if(id[x]>id[y]||id[x]+size[x]-1<id[y])return 0;\n    return 1;\n}\nvoid pushdown(int l,int r,int id){\n    if(!mar[id])return;\n    ans[id<<1]=ans[id<<1|1]=mar[id<<1]=mar[id<<1|1]=mar[id];\n    mar[id]=0;\n}\nvoid add(int nl,int nr,int k,int l,int r,int id){\n    if(nl<=l&&r<=nr){\n        ans[id]=mar[id]=k;\n        return;\n    }\n    pushdown(l,r,id);\n    int mid=(l+r)>>1;\n    if(nl<=mid)add(nl,nr,k,l,mid,id<<1);\n    if(nr>mid)add(nl,nr,k,mid+1,r,id<<1|1);\n    ans[id]=min(ans[id<<1],ans[id<<1|1]);\n}\nvoid change(int x,int y,int k){\n    while(top[x]!=top[y]){\n        if(d[top[x]]<d[top[y]])swap(x,y);\n        add(id[top[x]],id[x],k,1,n,1);\n        x=f[top[x]];\n    }\n    if(d[x]>d[y])swap(x,y);\n    add(id[x],id[y],k,1,n,1);\n}\nint found(int nl,int nr,int l,int r,int id){\n    if(nl<=l&&r<=nr)return ans[id];\n    pushdown(l,r,id);\n    int mid=(l+r)>>1,res=0x7fffffff;\n    if(nl<=mid)res=min(res,found(nl,nr,l,mid,id<<1));\n    if(nr>mid)res=min(res,found(nl,nr,mid+1,r,id<<1|1));\n    return res;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        addedge(u,v);\n        addedge(v,u);\n    }\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    cnt=0,dfs(1),dfs2(1,1);\n    build(1,n,1);\n    int r;\n    scanf(\"%d\",&r);\n    int op,x,y,k;\n    while(m--){\n        scanf(\"%d%d\",&op,&x);\n        if(op==1)r=x;\n        else if(op==2){\n            scanf(\"%d%d\",&y,&k);\n            change(x,y,k);\n        }\n        else{\n            if(x==r)printf(\"%d\\n\",ans[1]);\n            else if(get(x,r)){\n                int fa=0;\n                for(int i=head[x];i;i=e[i].nex){\n                    if(get(e[i].v,r)){\n                        fa=e[i].v;\n                        break;\n                    }\n                }\n                int res=found(1,id[fa]-1,1,n,1);\n                if(id[fa]+size[fa]<=n)res=min(res,found(id[fa]+size[fa],n,1,n,1));\n                printf(\"%d\\n\",res);\n            }\n            else printf(\"%d\\n\",found(id[x],id[x]+size[x]-1,1,n,1));\n        }\n    }\n}\n```",
        "postTime": 1545112143,
        "uid": 125109,
        "name": "\u767d\u3044\u30d0\u30e9\u306e\u591c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5982\u679c\u6ca1\u6709\u64cd\u4f5c$1$\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u6811\u94fe\u5256\u5206\uff1a\u64cd\u4f5c$2$\u8def\u5f84\u4fee\u6539\uff0c\u64cd\u4f5c$3$\u7ef4\u62a4\u5b50\u6811\u548c\u3002\n\n\u90a3\u4e48\u5728\u52a0\u5165\u4e86\u64cd\u4f5c$1$\u4e4b\u540e\uff0c\u64cd\u4f5c$2$\u7684\u90e8\u5206\u663e\u7136\u6ca1\u6709\u53d1\u751f\u53d8\u5316\n\u4ee3\u7801\uff1a\n```\ninline void change(int x,int y,long long v){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tupdate(1,num[top[x]],num[x],v);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])swap(x,y);\n\tupdate(1,num[y],num[x],v);\n}\n```\n\u5176\u4e2d$update$\u662f\u6307\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c$num$\u6570\u7ec4\u8bb0\u5f55$dfs$\u5e8f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6362\u6839\u5bf9\u7ef4\u62a4\u5b50\u6811\u548c\u4fe1\u606f\u7684\u5f71\u54cd\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u4e00\u6ce2\uff1a\n\n\u6211\u4eec\u8bbe\u5f53\u524d\u8be2\u95ee\u7684\u5b50\u6811\u7684\u6839\u4e3a$u$,\u5f53\u524d\u7684\u6839\u8282\u70b9\u4e3a$root$\u3002\n\n**\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a$lca$($u$,$root$)\uff01=$u$**\uff0c\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5728\u4ee5$root$\u4e3a\u6839\u65f6$u$\u539f\u6765\u7684\u5b50\u6811\u5c31\u662f\u73b0\u5728\u7684\u5b50\u6811\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u3002\n\n**\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a$u$==$root$**\uff0c\u90a3\u4e48\u6b64\u65f6$u$\u5c31\u662f\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u7684$maxn$\u503c\n\n**\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a$root$\u5728$u$\u539f\u6765\u7684\u5b50\u6811\u5185,\u5373$lca$($root$,$u$)==$u$&&$u$!=$root$**,\u600e\u4e48\u505a\u5462\uff1f\n\u6211\u4eec\u627e\u5230$u$\u5728$root$->$u$\u8fd9\u6761\u94fe\u4e0a$u$\u7684\u513f\u5b50$s$\uff0c\u90a3\u4e48\u5b50\u6811$s$\u7684\u8865\u96c6\u5c31\u662f\u6211\u4eec\u67e5\u8be2\u7684\u533a\u95f4\u3002\n\n\u6ca1\u6709\u5176\u4ed6\u60c5\u51b5\u4e86\n\n\u8d34\u4e00\u53d1\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define N 100005\n#define lc (p<<1)\n#define rc (p<<1|1)\n#define mid (T[p].l+T[p].r>>1)\nusing namespace std;\ninline long long read(){\n\tlong long ans=0;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))ans=(ans<<3)+(ans<<1)+ch-'0',ch=getchar();\n\treturn ans;\n}\nstruct Node{int l,r;long long minn,lz;}T[N<<2];\nstruct node{int v,next;}e[N<<1];\nlong long a[N];\nint first[N],dep[N],top[N],fa[N],hson[N],siz[N],num[N],pred[N],root,n,m,cnt=0,tot=0;\ninline void add(int u,int v){e[++cnt].v=v,e[cnt].next=first[u],first[u]=cnt;}\ninline void dfs1(int p){\n\tsiz[p]=1,hson[p]=0;\n\tfor(int i=first[p];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(v==fa[p])continue;\n\t\tfa[v]=p,dep[v]=dep[p]+1,dfs1(v),siz[p]+=siz[v];\n\t\tif(siz[v]>siz[hson[p]])hson[p]=v;\n\t}\n}\ninline void dfs2(int p,int tp){\n\ttop[p]=tp,num[p]=++tot,pred[tot]=p;\n\tif(hson[p])dfs2(hson[p],tp);\n\tfor(int i=first[p];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(v!=fa[p]&&v!=hson[p])dfs2(v,v);\n\t}\n}\ninline long long min(long long a,long long b){return a<b?a:b;}\ninline void pushup(int p){T[p].minn=min(T[lc].minn,T[rc].minn);}\ninline void pushnow(int p,long long v){T[p].minn=v,T[p].lz=v;}\ninline void pushdown(int p){\n\tif(T[p].lz==0)return;\n\tpushnow(lc,T[p].lz),pushnow(rc,T[p].lz),T[p].lz=0;\n}\ninline void build(int p,int l,int r){\n\tT[p].l=l,T[p].r=r,T[p].lz=0;\n\tif(l==r){T[p].minn=a[pred[l]];return;}\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(p);\n}\ninline void update(int p,int ql,int qr,long long v){\n\tif(T[p].l>qr||T[p].r<ql)return;\n\tif(ql<=T[p].l&&T[p].r<=qr){pushnow(p,v);return;}\n\tpushdown(p);\n\tif(qr<=mid)update(lc,ql,qr,v);\n\telse if(ql>mid)update(rc,ql,qr,v);\n\telse update(lc,ql,mid,v),update(rc,mid+1,qr,v);\n\tpushup(p);\n}\ninline long long query(int p,int ql,int qr){\n\tif(T[p].l>qr||T[p].r<ql)return 1e16;\n\tif(ql<=T[p].l&&T[p].r<=qr)return T[p].minn;\n\tpushdown(p);\n\tif(qr<=mid)return query(lc,ql,qr);\n\tif(ql>mid)return query(rc,ql,qr);\n\treturn min(query(lc,ql,mid),query(rc,mid+1,qr));\n}\ninline void change(int x,int y,long long v){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tupdate(1,num[top[x]],num[x],v);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])swap(x,y);\n\tupdate(1,num[y],num[x],v);\n}\ninline int lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\ninline int fid(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tif(fa[top[x]]==y)return top[x];\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y])swap(x,y);\n\treturn hson[y];\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<n;++i){\n\t\tint u=read(),v=read();\n\t\tadd(u,v),add(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)a[i]=read();\n\troot=read();\n\tdfs1(root);\n\tdfs2(root,root);\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint op=read(),u=read();\n\t\tif(op==1){root=u;continue;}\n\t\tif(op==2){int v=read();long long w=read();change(u,v,w);continue;}\n\t\tif(u==root){printf(\"%lld\\n\",T[1].minn);continue;}\n\t\tint t=lca(u,root);\n\t\tif(t!=u){printf(\"%lld\\n\",query(1,num[u],num[u]+siz[u]-1));continue;}\n\t\tint s=fid(u,root);\n\t\tprintf(\"%lld\\n\",min(query(1,1,num[s]-1),query(1,num[s]+siz[s],n)));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1529898580,
        "uid": 47765,
        "name": "ldxcaicai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    },
    {
        "content": "\u6211\u6765\u4e00\u7bc7\u5e26\u56fe\u7684\n\n\u9065\u8fdc\u7684\u884c\u661f\uff1f \u795e\u5947\u7684\u56fd\u5ea6\uff1f\n\nNO\uff0c\u9065\u8fdc\u7684\u56fd\u5ea6.\n\n\u8fd9\u9898\u771f\u76aeOVO\n\n\u8003\u8651\u6362\u6839\u4e4b\u540e\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\u7b54\u6848\u4f1a\u53d8\n\n\u4e00\u662f\u6839\u4e0e\u8be2\u95ee\u70b9\u91cd\u5408 \u7b54\u6848\u6574\u68f5\u6811\n\n\u4e8c\u662f\u5728\u8be2\u95ee\u70b9\u7684\u5b50\u6811\u5185\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u2026\u2026\u679a\u4e3e\u5b50\u6811\u6811\u6839\uff01\n\n\u7136\u540e\u7528dfs\u5e8f\u6765\u5224\u65ad\uff0c\u8fd9\u73a9\u610f\u662f\u8fde\u7eed\u7684\uff08\u55ef\u2026\u2026\uff1f\uff09\uff0c\u800c\u4e14\u5728\u6bcf\u4e2a\u5b50\u6811\u5185\u4e5f\u662f\u8fde\u7eed\u7684\uff08\uff01\uff09\n\n\u9501\u5b9a\u5728\u54ea\u9897\u5b50\u6811\u5185\uff01\n\n```cpp\nif (dfn[child]<=dfn[croot] && dfn[child]+tsize[child]-1>=dfn[croot])\n```\n\n\u7136\u540e\u4f60\u6293\u7740\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u628a\u5b83\u62ce\u8d77\u6765\uff0c\u8fd9\u6574\u68f5\u6811\u5176\u4f59\u7684\u90e8\u5206\u5c31\u8037\u62c9\u5230\u4e0b\u9762\u4e86\n\n\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u65f6\u5019\u5b9e\u9645\u662f\u8be2\u95ee\u8fd9\u4e2a\u7ea2\u8272\u7684\u90e8\u5206\n\n\u7136\u540e\u5c31\u884c\u4e86\u3002\n![](https://cdn.luogu.com.cn/upload/pic/16702.png)\n\n\u753b\u98ce\u5947\u602a\uff1f\uff1f\n\n[\u67e5\u770b\u5b8c\u6574\u4ee3\u7801](https://fancydreams.ink/2018/04/03/bzoj3083-%E9%81%A5%E8%BF%9C%E7%9A%84%E5%9B%BD%E5%BA%A6/)",
        "postTime": 1522742066,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3979 \u3010\u9065\u8fdc\u7684\u56fd\u5ea6\u3011"
    }
]