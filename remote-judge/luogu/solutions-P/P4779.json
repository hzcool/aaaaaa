[
    {
        "content": "### \u524d\u8a00\n\n*   $SPFA$\u7b97\u6cd5\u7531\u4e8e\u5b83\u4e0a\u9650 $O(NM) = O(VE)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6,\u88ab\u5361\u6389\u7684\u51e0\u7387\u5f88\u5927.\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d,\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u7a33\u5b9a\u7684\u7b97\u6cd5:$dijkstra$.\n\n### \u4ec0\u4e48\u662f$dijkstra$?\n\n*   $dijkstra$\u662f\u4e00\u79cd\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5,\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u9650\u4e3a$O(n^2)$(\u6734\u7d20),\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8f83\u4e3a\u7a33\u5b9a$;$\u52a0\u4e0a\u5806\u4f18\u5316\u4e4b\u540e\u66f4\u662f\u5177\u6709$O((n+m)\\log_{2}n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6,\u5728\u7a20\u5bc6\u56fe\u4e2d\u6709\u4e0d\u4fd7\u7684\u8868\u73b0.\n\n### $dijkstra$\u7684\u539f\u7406/\u6d41\u7a0b?\n\n*   $dijkstra$\u672c\u8d28\u4e0a\u7684\u601d\u60f3\u662f\u8d2a\u5fc3,\u5b83\u53ea\u9002\u7528\u4e8e\u4e0d\u542b\u8d1f\u6743\u8fb9\u7684\u56fe.\n*   \u6211\u4eec\u628a\u70b9\u5206\u6210\u4e24\u7c7b,\u4e00\u7c7b\u662f\u5df2\u7ecf\u786e\u5b9a\u6700\u77ed\u8def\u5f84\u7684\u70b9,\u79f0\u4e3a\"\u767d\u70b9\",\u53e6\u4e00\u7c7b\u662f\u672a\u786e\u5b9a\u6700\u77ed\u8def\u5f84\u7684\u70b9,\u79f0\u4e3a\"\u84dd\u70b9\"\n*   $dijkstra$\u7684\u6d41\u7a0b\u5982\u4e0b$:$\n*   $1.$ \u521d\u59cb\u5316$dis[start] = 0,$\u5176\u4f59\u8282\u70b9\u7684$dis$\u503c\u4e3a\u65e0\u7a77\u5927.\n*   $2.$ \u627e\u4e00\u4e2a$dis$\u503c\u6700\u5c0f\u7684\u84dd\u70b9$x,$\u628a\u8282\u70b9$x$\u53d8\u6210\u767d\u70b9.\n*   $3.$ \u904d\u5386$x$\u7684\u6240\u6709\u51fa\u8fb9$(x,y,z),$\u82e5$dis[y] > dis[x] + z,$\u5219\u4ee4$dis[y] = dis[x] + z$\n*   $4.$ \u91cd\u590d$2,3$\u4e24\u6b65,\u76f4\u5230\u6240\u6709\u70b9\u90fd\u6210\u4e3a\u767d\u70b9$.$\n*   \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^2)$\n\n### $dijkstra$\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\n\n*   \u5f53\u6240\u6709\u8fb9\u957f\u90fd\u662f\u975e\u8d1f\u6570\u7684\u65f6\u5019,\u5168\u5c40\u6700\u5c0f\u503c\u4e0d\u53ef\u80fd\u518d\u88ab\u5176\u4ed6\u8282\u70b9\u66f4\u65b0.\u6240\u4ee5\u5728\u7b2c$2$\u6b65\u4e2d\u627e\u51fa\u7684\u84dd\u70b9$x$\u5fc5\u7136\u6ee1\u8db3$:dis[x]$\u5df2\u7ecf\u662f\u8d77\u70b9\u5230$x$\u7684\u6700\u77ed\u8def\u5f84$.$\u6211\u4eec\u4e0d\u65ad\u9009\u62e9\u5168\u5c40\u6700\u5c0f\u503c\u8fdb\u884c\u6807\u8bb0\u548c\u62d3\u5c55,\u6700\u7ec8\u53ef\u4ee5\u5f97\u5230\u8d77\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\n\n### \u56fe\u89e3\n\n*   (\u4ee4$start = 1$)\n*   \u5f00\u59cb\u65f6\u6211\u4eec\u628a$dis[start]$\u521d\u59cb\u5316\u4e3a$0$,\u5176\u4f59\u70b9\u521d\u59cb\u5316\u4e3a$inf$\n![\u521d\u59cb\u5316](https://i.loli.net/2018/07/25/5b583277e47e9.png)\n*   \u7b2c\u4e00\u8f6e\u5faa\u73af\u627e\u5230$dis$\u503c\u6700\u5c0f\u7684\u70b9$1$,\u5c06$1$\u53d8\u6210\u767d\u70b9,\u5bf9\u6240\u6709\u4e0e$1$\u76f8\u8fde\u7684\u84dd\u70b9\u7684$dis$\u503c\u8fdb\u884c\u4fee\u6539,\u4f7f\u5f97$dis[2]=2,dis[3]=4,dis[4]=7$\n![1](https://i.loli.net/2018/07/25/5b58347b9a37b.png)\n*   \u7b2c\u4e8c\u8f6e\u5faa\u73af\u627e\u5230$dis$\u503c\u6700\u5c0f\u7684\u70b9$2$,\u5c06$2$\u53d8\u6210\u767d\u70b9,\u5bf9\u6240\u6709\u4e0e$2$\u76f8\u8fde\u7684\u84dd\u70b9\u7684$dis$\u503c\u8fdb\u884c\u4fee\u6539,\u4f7f\u5f97$dis[3]=3,dis[5]=4$\n![2](https://i.loli.net/2018/07/25/5b586fa8de335.png)\n*   \u7b2c\u4e09\u8f6e\u5faa\u73af\u627e\u5230$dis$\u503c\u6700\u5c0f\u7684\u70b9$3$,\u5c06$3$\u53d8\u6210\u767d\u70b9,\u5bf9\u6240\u6709\u4e0e$2$\u76f8\u8fde\u7684\u84dd\u70b9\u7684$dis$\u503c\u8fdb\u884c\u4fee\u6539,\u4f7f\u5f97$dis[4]=4$\n![3](https://i.loli.net/2018/07/25/5b58703e8d0d6.png)\n*   \u63a5\u4e0b\u6765\u4e24\u8f6e\u5faa\u73af\u5206\u522b\u5c06$4,5$\u8bbe\u4e3a\u767d\u70b9,\u7b97\u6cd5\u7ed3\u675f,\u6c42\u51fa\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\n*   \u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\n\n### \u4e3a\u4ec0\u4e48$dijkstra$\u4e0d\u80fd\u5904\u7406\u6709\u8d1f\u6743\u8fb9\u7684\u60c5\u51b5?\n*    \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\n![4](https://i.loli.net/2018/07/25/5b58724845b8d.png)\n*   $2$\u5230$3$\u7684\u8fb9\u6743\u4e3a$-4$,\u663e\u7136\u4ece$1$\u5230$3$\u7684\u6700\u77ed\u8def\u5f84\u4e3a$-2$ $(1->2->3).$\u4f46\u5728\u5faa\u73af\u5f00\u59cb\u65f6\u7a0b\u5e8f\u4f1a\u627e\u5230\u5f53\u524d$dis$\u503c\u6700\u5c0f\u7684\u70b9$3$,\u5e76\u6807\u8bb0\u5b83\u4e3a\u767d\u70b9.\n*   \u8fd9\u65f6\u7684$dis[3]=1,$\u7136\u800c$1$\u5e76\u4e0d\u662f\u8d77\u70b9\u5230$3$\u7684\u6700\u77ed\u8def\u5f84.\u56e0\u4e3a$3$\u5df2\u7ecf\u88ab\u6807\u4e3a\u767d\u70b9,\u6240\u4ee5$dis[3]$\u4e0d\u4f1a\u518d\u88ab\u4fee\u6539\u4e86.\u6211\u4eec\u5728\u8fb9\u6743\u5b58\u5728\u8d1f\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e86\u9519\u8bef\u7684\u7b54\u6848.\n\n### $dijkstra$\u7684\u5806\u4f18\u5316?\n\n*   \u89c2\u5bdf$dijkstra$\u7684\u6d41\u7a0b,\u53d1\u73b0\u6b65\u9aa4$2$\u53ef\u4ee5\u4f18\u5316\n*   \u600e\u4e48\u4f18\u5316\u5462?\n*   ~~\u6211\u4f1azkw\u7ebf\u6bb5\u6811!\u6211\u4f1a\u6590\u6ce2\u90a3\u5951\u5806!~~\n*   \u6211\u4f1a\u5806!\n*   \u6211\u4eec\u53ef\u4ee5\u7528\u5806\u5bf9$dis$\u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4,\u7528$O(\\log_{2}n)$\u7684\u65f6\u95f4\u53d6\u51fa\u5806\u9876\u5143\u7d20\u5e76\u5220\u9664,\u7528$O(\\log_{2}n)$\u904d\u5386\u6bcf\u6761\u8fb9,\u603b\u590d\u6742\u5ea6$O((n+m)\\log_{2}n)$\n\n*  \u8303\u4f8b\u4ee3\u7801:\n\n``` cpp\n#include<bits/stdc++.h>\n\nconst int MaxN = 100010, MaxM = 500010;\n\nstruct edge\n{\n    int to, dis, next;\n};\n\nedge e[MaxM];\nint head[MaxN], dis[MaxN], cnt;\nbool vis[MaxN];\nint n, m, s;\n\ninline void add_edge( int u, int v, int d )\n{\n    cnt++;\n    e[cnt].dis = d;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nstruct node\n{\n    int dis;\n    int pos;\n    bool operator <( const node &x )const\n    {\n        return x.dis < dis;\n    }\n};\n\nstd::priority_queue<node> q;\n\n\ninline void dijkstra()\n{\n    dis[s] = 0;\n    q.push( ( node ){0, s} );\n    while( !q.empty() )\n    {\n        node tmp = q.top();\n        q.pop();\n        int x = tmp.pos, d = tmp.dis;\n        if( vis[x] )\n            continue;\n        vis[x] = 1;\n        for( int i = head[x]; i; i = e[i].next )\n        {\n            int y = e[i].to;\n            if( dis[y] > dis[x] + e[i].dis )\n            {\n                dis[y] = dis[x] + e[i].dis;\n                if( !vis[y] )\n                {\n                    q.push( ( node ){dis[y], y} );\n                }\n            }\n        }\n    }\n}\n\n\nint main()\n{\n    scanf( \"%d%d%d\", &n, &m, &s );\n    for(int i = 1; i <= n; ++i)dis[i] = 0x7fffffff;\n    for( register int i = 0; i < m; ++i )\n    {\n        register int u, v, d;\n        scanf( \"%d%d%d\", &u, &v, &d );\n        add_edge( u, v, d );\n    }\n    dijkstra();\n    for( int i = 1; i <= n; i++ )\n        printf( \"%d \", dis[i] );\n    return 0;\n}\n\n```\n### \u4f8b\u9898\n*   \u5165\u95e8\u6a21\u677f:P3371\n*   \u8fdb\u9636\u6a21\u677f:P4779\n*   \u5176\u4f59\u4f8b\u9898\u8bf7\u53f3\u8f6c\u6d1b\u8c37\u9898\u5e93,\u641c\u7d22\"\u6700\u77ed\u8def\"\n\n### \u540e\u8bb0\n*   \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6458\u81ea\u674e\u715c\u4e1c\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\u548c\u300a\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e00\u672c\u901a\u300b\n*   \u53cb\u60c5\u63d0\u793a:\u6b63\u6743\u56fe\u8bf7\u4f7f\u7528$dijkstra$\u7b97\u6cd5,\u8d1f\u6743\u56fe\u8bf7\u4f7f\u7528$SPFA$\u7b97\u6cd5\n*   \u611f\u8c22\u6d1b\u8c37\u5404\u4f4d\u7ba1\u7406\u5458\u63d0\u4f9b\u7684\u5e73\u53f0\n### [\u535a\u5ba2\u4f20\u9001\u95e8](https://www.cnblogs.com/little-sun0331/p/9484730.html)\n### [\u4e2a\u4eba\u535a\u5ba2](https://www.cnblogs.com/little-sun0331/)",
        "postTime": 1532429725,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "dijkstra \u8be6\u89e3"
    },
    {
        "content": "\u5176\u5b9e Dijkstra \u7684\u672c\u8d28\u5c31\u662f\uff0c\u6bcf\u6b21\u627e\u4e00\u4e2a $dis$ \u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u53bb\u66f4\u65b0\u5468\u56f4\u7684\u70b9\u3002\n\n\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\u662f\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u66f4\u65b0\u4e00\u6b21\u5176\u5b83\u7684\u70b9\u3002\n\n\u6bcf\u6b21\u66b4\u529b\u627e $dis$ \u6700\u5c0f\u7684\u70b9\u662f $\\mathcal{O}(n^2+m)$ \u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u5806\u5b58\u4e0b\u6240\u6709 $(u,dis)$ \u4e8c\u5143\u7ec4\uff0c\u6bcf\u6b21\u627e\u4e00\u4e2a $dis$ \u6700\u5c0f\u7684\u5373\u53ef\u3002\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u5c31\u4f18\u5316\u5230\u4e86 $\\mathcal{O}((n+m)\\log m)$\u3002\n\nA \u6389\u8fd9\u9898\u5c31\u53ef\u4ee5\u987a\u4fbf\u5207\u6389 P3371 \u4e86\u3002~~\u53cc\u500d\u7ecf\u9a8c~~\n\n----\n\nupd:\uff082018.11.8\uff09\n\n\u5f88\u591a\u4eba\u95ee `if (dis[u]!=d) continue` \u7684\u610f\u601d\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u540e\uff0c\u8981\u5220\u9664\u5806\u4e2d\u539f\u6709\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u5f88\u4e0d\u65b9\u4fbf\uff0c\u6240\u4ee5\u5c31\u52a0\u4e0a\u8fd9\u4e00\u53e5\u8bdd\u5224\u65ad\u662f\u5426\u88ab\u5220\u9664\u8fc7\u3002\n\n\u8fd8\u4e0d\u61c2\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u201c\u61d2\u60f0\u5220\u9664\u201d\u3002\n\n---\n\n\u4ee3\u7801\uff1a(\u8fd9\u4efd\u4ee3\u7801\u662f\u5f88\u4e45\u4e4b\u524d\u5199\u7684\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define re register\nusing namespace std;\n\ninline int read() {\n    int X=0,w=1; char c=getchar();\n    while (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n    while (c>='0'&&c<='9') X=(X<<3)+(X<<1)+c-'0',c=getchar();\n    return X*w;\n}\n\nstruct Edge { int v,w,nxt; };\nEdge e[500010];\nint head[100010],cnt=0;\n\ninline void addEdge(int u,int v,int w) {\n    e[++cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\n\nint n,m,s;\nint dis[100010];\n\nstruct node { //\u5806\u8282\u70b9\n    int u,d;\n    bool operator <(const node& rhs) const {\n        return d>rhs.d;\n    }\n};\n\ninline void Dijkstra() {\n    for (re int i=1;i<=n;i++) dis[i]=2147483647;\n    dis[s]=0;\n    priority_queue<node> Q; //\u5806\n    Q.push((node){s,0});\n    while (!Q.empty()) {\n        node fr=Q.top(); Q.pop();\n        int u=fr.u,d=fr.d;\n        if (d!=dis[u]) continue;\n        for (re int i=head[u];i;i=e[i].nxt) {\n            int v=e[i].v,w=e[i].w;\n            if (dis[u]+w<dis[v]) {\n                dis[v]=dis[u]+w;\n                Q.push((node){v,dis[v]});\n            }\n        }\n    }\n}\n\nint main() {\n    n=read(),m=read(),s=read();\n    for (re int i=1;i<=m;i++) {\n        int X=read(),Y=read(),Z=read();\n        addEdge(X,Y,Z);\n    }\n    Dijkstra();\n    for (re int i=1;i<=n;i++) printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n\nupd2\uff1a\uff082020.10.14\uff09\n\n\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528 `pair` \u6765\u4ee3\u66ff\u4e0a\u9762\u624b\u5199\u7684 `node`\uff1a\n\n```cpp\n// ====================================\n//   author: M_sea\n//   website: https://m-sea-blog.com/\n// ====================================\n#include <bits/stdc++.h>\n#define file(x) freopen(#x\".in\",\"r\",stdin); freopen(#x\".out\",\"w\",stdout)\nusing namespace std;\ntypedef long long ll;\n\nint read() {\n\tint X=0,w=1; char c=getchar();\n\twhile (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n\twhile (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n\treturn X*w;\n}\n\nconst int N=100000+10,M=200000+10;\n\nint n,m,s,t;\nstruct edge { int v,w,nxt; } e[M];\nint head[N];\nvoid addEdge(int u,int v,int w) {\n\tstatic int cnt=0;\n\te[++cnt]=(edge){v,w,head[u]},head[u]=cnt;\n}\n\n// \u8fd9\u662f\u4e00\u4e2a\u4ee5 dis \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u7684\u5c0f\u6839\u5806\npriority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> Q; \nint dis[N];\nvoid dijkstra(int s) {\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0,Q.push(make_pair(0,s));\n\twhile (!Q.empty()) {\n\t\tint u=Q.top().second,d=Q.top().first; Q.pop();\n\t\tif (d!=dis[u]) continue;\n\t\tfor (int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].v,w=e[i].w;\n\t\t\tif (dis[u]+w<dis[v]) dis[v]=dis[u]+w,Q.push(make_pair(dis[v],v));\n\t\t}\n\t}\n}\n\nint main() {\n\tn=read(),m=read(),s=read();\n\tfor (int i=1;i<=m;++i) {\n\t\tint u=read(),v=read(),w=read();\n\t\taddEdge(u,v,w);\n\t}\n\tdijkstra(s);\n\tfor (int i=1;i<=n;++i) printf(\"%d%c\",dis[i],\" \\n\"[i==n]);\n\treturn 0;\n}\n```\n\n---\n\nupd2\uff1a\uff082020.10.14\uff09\n\n\u8fc7\u4e86\u5f88\u4e45\uff0c\u8865\u4e00\u4e0b\u7ebf\u6bb5\u6811\u4f18\u5316 Dijkstra \u3002\n\n\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n- \u4fee\u6539\u67d0\u4e2a\u70b9\u7684 `dis`\uff1b\n- \u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u62ff\u51fa\u6765\u8fc7\u7684 `dis` \u6700\u5c0f\u7684\u70b9\uff1b\n- \u6807\u8bb0\u67d0\u4e2a\u70b9\u5df2\u7ecf\u88ab\u62ff\u51fa\u6765\u8fc7\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 `dis` \u7684\u6700\u5c0f\u503c\u548c\u8fd9\u4e2a\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u5b50\u5982\u679c\u4e00\u4e2a\u70b9\u5df2\u7ecf\u88ab\u62ff\u51fa\u6765\u8fc7\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u628a\u5b83\u6539\u6210 $+\\infty$\uff0c\u8fd9\u6837\u5b50\u5b83\u4e4b\u540e\u5c31\u4e0d\u4f1a\u88ab\u62ff\u51fa\u6765\u4e86\u3002\n\n```cpp\n// ====================================\n//   author: M_sea\n//   website: https://m-sea-blog.com/\n// ====================================\n#include <bits/stdc++.h>\n#define file(x) freopen(#x\".in\",\"r\",stdin); freopen(#x\".out\",\"w\",stdout)\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nusing namespace std;\ntypedef long long ll;\n\nint read() {\n\tint X=0,w=1; char c=getchar();\n\twhile (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n\twhile (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n\treturn X*w;\n}\n\nconst int N=100000+10,M=200000+10;\nconst int inf=0x3f3f3f3f;\n\nint n,m,s;\n\nstruct edge { int v,w,nxt; } e[M];\nint head[N];\nvoid addEdge(int u,int v,int w) {\n\tstatic int cnt=0;\n\te[++cnt]=(edge){v,w,head[u]},head[u]=cnt;\n}\n\n#define ls (o<<1)\n#define rs (o<<1|1)\nint minv[N<<2],minp[N<<2];\nvoid pushup(int o) {\n\tif (minv[ls]<=minv[rs]) minv[o]=minv[ls],minp[o]=minp[ls];\n\telse minv[o]=minv[rs],minp[o]=minp[rs];\n}\nvoid build(int o,int l,int r) {\n\tif (l==r) { minv[o]=inf,minp[o]=l; return; }\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid),build(rs,mid+1,r);\n\tpushup(o);\n}\nvoid modify(int o,int l,int r,int p,int w) {\n\tif (l==r) { minv[o]=w; return; }\n\tint mid=(l+r)>>1;\n\tif (p<=mid) modify(ls,l,mid,p,w);\n\telse modify(rs,mid+1,r,p,w);\n\tpushup(o);\n}\n#undef ls\n#undef rs\n\nint dis[N];\nvoid dijkstra(int s) {\n\tbuild(1,1,n); modify(1,1,n,s,0);\n\tmemset(dis,0x3f,sizeof(dis)),dis[s]=0;\n\twhile (minv[1]!=inf) {\n\t\tint u=minp[1]; modify(1,1,n,u,inf);\n\t\tfor (int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].v,w=e[i].w;\n\t\t\tif (dis[u]+w<dis[v]) \n\t\t\t\tdis[v]=dis[u]+w,modify(1,1,n,v,dis[v]);\n\t\t}\n\t}\n}\n\nint main() {\n\tn=read(),m=read(),s=read();\n\tfor (int i=1;i<=m;++i) {\n\t\tint u=read(),v=read(),w=read();\n\t\taddEdge(u,v,w);\n\t}\n\tdijkstra(s);\n\tfor (int i=1;i<=n;++i) printf(\"%d%c\",dis[i],\" \\n\"[i==n]);\n\treturn 0;\n}\n```",
        "postTime": 1532389537,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "**\u4e3a\u4ec0\u4e48\u6d1b\u8c37\u8981\u51fa\u4e24\u9053\u6a21\u677f\u9898\uff1f\uff1f**\n\n\u636e\u8bf4\u8fd9\u9053\u9898\u6570\u636e\u6709\u6bd2\uff0c\u5361SPFA\uff0c\u5e78\u597d\u6211\u66f4\u559c\u6b22dijstra\uff0c\u53ef\u770b\u6570\u636e\u8303\u56f4\uff0c\u5f88\u4e0d\u53cb\u597d\u7684n\u548cm\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u51fa\u73b0\u5427 \u5806\u4f18\u5316 **priority_queue**\uff08STL\u5927\u6cd5\u597d\uff09~~\u624b\u6253\u5806\u592a\u9ebb\u70e6~~\n\n\u597d\u5427\uff0c\u6211\u4e3b\u8981\u60f3\u8bf4\u7684\u662f\u7b2c\u4e09\u4e2a\u6570\u636e\u70b9\uff0c\u8fd9\u4e2a\u70b9\u771f\u7684\u6709\u6bd2\n\n\u6570\u636e\u8303\u56f4\u7ea6\u5b9a \n\n0<wi<1*10^9\n\n\u2211wi<1*10^9\n\n\u5b8c\u5168\u6728\u6709\u5fc5\u8981\u5f00long long\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528memset\u521d\u59cb\u5316\u6700\u5927\u503c0x3f\u62160x7f\n\n\u4e2a\u4eba\u66f4\u559c\u6b220x3f\u56e0\u4e3a\u4e0d\u4f1a\u52a0\u7206\u51faint\uff0c\u53ef\u662f\u7b2c\u4e09\u4e2a\u70b9WA\u4e86\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u4e8e\u662f\u75280x7f\n\n\u53c8WA\uff08\u6342\u8138\uff09~~\u8fd9\u6b21\u5e94\u8be5\u662f\u7206\u4e86~~\n\n\u95ee\u9898\u51fa\u5728\u54ea\u5462\uff1f\n\n\u770b\u8ba8\u8bba\u91cc\u8bf4\u6570\u636e\u662f\u4e0d\u8fde\u901a\u7684\uff0c\u6211\u89c9\u5f97\u4e0d\u662f\uff0c\u66f4\u6709\u53ef\u80fd\u662f\u90a3\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f88\u5927\uff0c0x3f\u4e0d\u591f\uff0c\u800c0x7f\u4f1a\u7206\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u4e56\u4e56for\u5faa\u73af\u5427\uff01\uff01\n\nfor\u5faa\u73af\u8d4b\u503c\u62101e10\uff0c\u7edd\u5bf9\u6ca1\u95ee\u9898\u4e86\n\n\u4e8b\u5b9e\u8bc1\u660e\uff0csi\u8fd9\u6837di\n\nAC\u4ee3\u7801\u8d34\u4e0a\n\n```\n#include<bits/stdc++.h>\n#define M(x,y) make_pair(x,y)\nusing namespace std;\nint fr[100010],to[200010],nex[200010],v[200010],tl,d[100010];\nbool b[100010];\nvoid add(int x,int y,int w){\n    to[++tl]=y;\n    v[tl]=w;\n    nex[tl]=fr[x];\n    fr[x]=tl;\n}\npriority_queue< pair<int,int> > q;\nint main(){\n    int n,m,x,y,z,s;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n    }\n    for(int i=1;i<=n;i++) d[i]=1e10;\n    d[s]=0;\n    q.push(M(0,s));\n    while(!q.empty()){\n        int x=q.top().second;\n        q.pop(); \n        if(b[x]) continue;\n        b[x]=1;\n        for(int i=fr[x];i;i=nex[i]){\n            int y=to[i],l=v[i];\n            if(d[y]>d[x]+l){\n                d[y]=d[x]+l;\n                q.push(M(-d[y],y));//\u61d2\u5f97\u91cd\u8f7d\u8fd0\u7b97\u7b26\n            }\n        }\n    }\n    for(int i=1;i<=n;i++) printf(\"%d \",d[i]);\n    return 0;\n}\n```\n\n~~\u81ea\u8ba4\u4ee3\u7801\u98ce\u683c\u5f88\u597d~~",
        "postTime": 1532433596,
        "uid": 56916,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dU56916",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\n\n# \u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u2014\u2014Dijkstra\n\n\n------------\n\n## \u5b9e\u73b0\u65b9\u6cd5\uff1a\n**1.**\u5b9a\u4e49ans[100000]\uff0cans[i]\u4ee3\u8868\u5230\u8fbei\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\n\n**2.**\u5b9a\u4e49bool\u6570\u7ec4visit\uff0c\u4ee3\u8868\u662f\u5426\u6765\u8fc7\u8fd9\u91cc\n\n**2.**ans[\u8d77\u70b9]=0,\u5176\u4f59\u7684\u8d4b\u503c\u4e3ainf\n\n**3.**\u5b9a\u4e49\u4e00\u4e2acurr\u53d8\u91cf\uff0cvisit[current]=1\uff08\u8bbf\u95ee\u8fc7\uff09\uff0c\u4ee3\u8868\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u503c\u4e3a\u8d77\u70b9\u3002\n\n**4.**\u5217\u4e3e\u6240\u6709\u4e0ecurr\u76f8\u8054\u901a\u7684\u7684\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9(i)\u7684ans\u503c\u66f4\u65b0\uff1a\n\n$ ans[i]=min(ans[i],ans[curr]+ $\u5230\u8fd9\u4e9b\u70b9\u9700\u8981\u7684\u82b1\u8d39 $)$\n\n**5.** \u5217\u4e3e\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u7684\u70b9\uff0c\u627e\u5230ans\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u8d4b\u503c\u7ed9curr\uff0cvisit[current]=1\uff08\u8bbf\u95ee\u8fc7\uff09\n\n**6** \u6240\u6709\u70b9\u90fd\u8bbf\u95ee\u8fc7\uff08visit[i]\u90fd==1\uff09\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002\u6b64\u65f6\uff0cans[i]\u4ee3\u8868\u4ece\u8d77\u70b9\u5230i\u7684\u6700\u77ed\u8def\u5f84\n\n\n------------\n\n## \u4f2a\u4ee3\u7801\n```cpp\nbool vis[1000000];//\u662f\u5426\u8bbf\u95ee\u8fc7\nint ans[1000000];\nint curr=\u8d77\u70b9;\nmemset(ans,0x7fffffff,sizeof(ans))\nwhile(vis[curr]==0)\n{\n\tvis[curr]=1;\n\tfor(int i;\u5217\u4e3e\u6240\u6709curr\u8fde\u901a\u7684\u70b9\uff09\n    {\n    \tans[i]=min(ans[i],ans[curr]+k)//k\u4ee3\u8868\u4ececurr\u70b9\u5230i\u70b9\u7684\u6700\u77ed\u8def\n    }\n    int minn=2147483647;\n    for(int i=1;i<=m;i++)//\u5217\u4e3e\u6240\u6709\u70b9\n    {\n    \tif(vis[i]==1&&ans[i]<minn)//\u8bbf\u95ee\u8fc7\u4e14\u5c0f\n        {\n        \tminn=ans[i];//\u66f4\u65b0\u6700\u5c0f\u503c\n            curr=i;//\u66f4\u65b0\u4e0b\u4e00\u4e2a\u70b9\n        }\n    }\n}\n\n```\n\n\n------------\n\n## \u5b58\u56fe\u65b9\u5f0f\n\u94fe\u5f0f\u524d\u5411\u661f\n**\u4ee5\u4e0b\u662f\u5173\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u7684\u4ecb\u7ecd \uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7\uff1a**\n \n\n\n## \u8fb9\u7684\u5b58\u50a8\n\n\u8fd9\u79cd\u5b58\u56fe\u65b9\u5f0f\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u70b9\u5f15\u51fa\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5b58\u50a8\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\u7684\u6bcf\u6761\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\n\n\u5728\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1a\n```cpp\nstruct EDGE \n{\n    int next;\n    int to;\n}edge[1000000];\n```\n\u548c\u4e00\u4e2a\u6570\u7ec4\uff1a\n```cpp\nint head[1000000];\n```\n\u548c\u4e00\u4e2a\u53d8\u91cf\uff1a\n```cpp\nint cnt=0;//\u6307\u9488\n```\n\u4f60\u4f1a\u53d1\u73b0\u7adf\u7136\u6ca1\u5b58\u8d77\u70b9\uff01\uff01\u5176\u5b9e\u8d77\u70b9\u662f\u7528$head$\u5b58\u7684\n ### \u4e3e\u4f8b\uff1a\n ![](https://cdn.luogu.com.cn/upload/pic/43957.png   )\n\n\n\u5982\u56fe\uff1a\u8fd9\u6837\u7684\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8f93\u5165\u662f\uff1a\n\n```\n1 2\n1 3\n1 4\n2 3\n```\n\n### \u9010\u6b65\u5206\u6790\uff1a\n\n#### 1.\u8f93\u51651 2\uff0c\u4ee3\u88681\u8fde\u54112\u3002\n```cpp\ncnt++;//\u4f5c\u4e3a\u7ed3\u6784\u4f53\u4e0b\u6807\uff0c\u6ca1\u6709\u610f\u4e49\nhead[1]=cnt;//\u7ed3\u70b91\u7684\u7b2c\u4e00\u4e2a\u513f\u5b50\u5b58\u5728\u4e86edge[cnt]\u91cc\u9762\nedge[cnt].to=2;\u7ed3\u70b91\u7684\u513f\u5b50\u662f2\n```\n\u6b64\u65f6\uff1a\n$cnt=1$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $0$| $ 0$| $0$ |\n|  $next$|$ 0 $|$0 $ | $0$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $1 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n\n#### 2.\u8f93\u51651 3\uff0c\u4ee3\u88681\u8fde\u54113\u3002\n```cpp\ncnt++;\nhead[1]=cnt;\nedge[cnt].to=3;\u7ed3\u70b91\u7684\u513f\u5b50\u662f3\n//\u8fd9\u65f6,3\u6210\u4e3a\u4e86\u7ed3\u70b91\u7684\u513f\u5b50\uff0c\u4e0d\u8fc72\u88ab\u6324\u4e86\u4e0b\u53bb...\n//\u6240\u4ee5\u8981\u5f15\u5165\u7ed3\u6784\u4f53\u4e2dnext\u5143\u7d20\uff0c\u8bb0\u5f55\uff1a3\u8fd8\u6709\u4e2a\u5144\u5f1f\uff08next\uff09\u662f2\n//\u6240\u4ee5\u4ee3\u7801\u8981\u6362\u6210\uff1a\ncnt++;\nedge[cnt].to=3;//\u7ed3\u70b91\u8fde\u54113\nedge[cnt].next=head[1];//3\u7684\u5144\u5f1f\u662f2\nhead[1]=cnt;//\u66f4\u65b0head\n```\n\n\u6b64\u65f6\uff1a\n$cnt=2$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 0$| $0$ |\n|  $next$|$ 0 $|$1 $ | $0$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $2 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n\n#### 3.\u8f93\u51651 4\uff0c\u4ee3\u88681\u8fde\u54114\u3002\n\n\u6b64\u65f6\uff1a\n$cnt=3$\n\n\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 4$| $0$ |\n|  $next$|$ 0 $|$1 $ | $2$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $3 $|$ 0 $|$ 0 $|$ 0 $|\n\n\n#### 4.\u8f93\u51652 3\uff0c\u4ee3\u88682\u8fde\u54113\u3002\n\n\u6b64\u65f6\uff1a\n$cnt=4$\n\n| $edge$| $cnt=1$ | $cnt=2$ |$ cnt=3$ |$cnt=4$  |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| $to $| $2$ |  $3$| $ 4$| $3$ |\n|  $next$|$ 0 $|$1 $ | $2$ | $0$|\n\n| $head $| \u4e0b\u6807$=1 $| \u4e0b\u6807$=2$ |\u4e0b\u6807$=3 $ | \u4e0b\u6807$=4 $|\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n|  \u503c| $3 $|$ 4 $|$ 0 $|$ 0 $|\n\n\n\n### \u6ce8\u610f\uff1a$edge[cnt].next$ \u548c$head[1]$\u5b58\u8d2e\u7684\u90fd\u662f\u7ed3\u6784\u4f53\u4e0b\u6807\uff08\u5373$cnt$\u7684\u503c\uff09\u82e5\u8981\u8bbf\u95ee\u6307\u5411\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u5206\u522b\u7528$edge[edge[cnt].next].to$\uff0c$edge[head[1]].to$\n\n\n#### \u82e5\u9700\u8981\u8bb0\u5f55\u6743\u503c\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\n\n\u4ee3\u7801\uff1a(\u5e26\u6743\u503c\uff09\n```cpp\n#include<iostream>\nusing namespace std;\nstruct edge \n{ \n    int next;\n    int to;\n    int wei;\n}edge[MAXM];\nint head[MAXN];//head[i]\u4e3ai\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\nint cnt=0;\nvoid addedge(int u,int v,int w) //\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u6743\u503c \n{\n    edge[++cnt].next=head[u];//\u66f4\u65b0cnt\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\nint main()\n{\n\tint n;\n    for(int i=1;i<=n;i++)\n    {\n    \tint a,b,wei;\n        addedge(a,b,wei);\n        //\u5982\u679c\u662f\u65e0\u5411\u56fe\uff0c\u8fd8\u8981addedge(b,a,wei);\n    }\n}\n```\n \n#### \u6ce8\u610f\uff1a\n \n \u8fd9\u91cc\u7684next\u6307\u7684\u662f\u904d\u5386\u65f6\u7684\u4e0b\u4e00\u6761\u8fb9\uff0chead\u6307\u7684\u662f\u904d\u5386\u65f6\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u800c\u5b58\u8fb9\u65f6\u76f8\u5f53\u4e8e\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u6240\u4ee5next\u8bb0\u5f55\u4e0a\u4e00\u6761\u8fb9\uff0c\u800chead\u8bb0\u5f55\u6700\u540e\u4e00\u6761\u8fb9\u3002\n\n\n\n------------\n\n## \u8fb9\u7684\u904d\u5386\n\n\u5728\u904d\u5386\u4ee5x\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u65f6\uff0c\u53ea\u9700\u8981\u8fd9\u6837\u5c31\u884c\n\n\t\tfor(int i=head[x];i!=0;i=edge[i].next)\n\n\u8fd9\u4e2a\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u662fi\u7b49\u4e8e0\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u5b58\u8fb9\u65f6\u7b2c\u4e00\u6761\u8fb9\uff0c\u5728\u628ahead\u503c\u5b58\u8fdbnext\u65f6\uff0chead\u8fd8\u6ca1\u6709\u66f4\u65b0\u8fc7\uff0c\u4e5f\u5c31\u662f0\u3002\u6240\u4ee5\u5f53next\u8fd4\u56de0\u65f6\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e9b\u8fb9\u904d\u5386\u5b8c\u6bd5\u4e86\u3002\n\n\n\n\n------------\n\n## \u4f18\u52bf\u4e0e\u7279\u70b9\n\n\n\u65e2\u53ef\u4ee5\u5b58\u56fe\uff0c\u4e5f\u53ef\u4ee5\u5b58\u6811\uff0c\u6bd4\u8d77\u90bb\u63a5\u77e9\u9635\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO\uff08n\uff09\uff0c\u5927\u5927\u8282\u7701\u4e86\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6309\u8fb9\u5b58\u50a8\u7701\u6389\u4e86\u5f88\u591a\u4e24\u70b9\u65e0\u8fb9\u7684\u7a7a\u95f4\u3002\u5e76\u4e14\u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u90a3\u4e9b\u4e0e\u8d77\u70b9\u65e0\u8fb9\u76f8\u8fde\u7684\u70b9\u4e5f\u4e0d\u9700\u8981\u8fdb\u884c\u5904\u7406\uff0c\u53ef\u4ee5\u8bf4\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u5360\u4f18\u52bf\uff0c\u8fd9\u5c31\u662f\u88abOIer\u4eec\u5e7f\u6cdb\u4f7f\u7528\u7684\u539f\u56e0\u3002\n\n \n\n------------\n\n## \u4ee3\u7801\n```cpp\n#include<iostream>\nusing namespace std;\nint head[100000],cnt;\nlong long ans[1000000];\nbool vis[1000000];\nint m,n,s;\nstruct edge\n{\n\tint to;\n\tint nextt;\n\tint wei;\n}edge[1000000];\nvoid addedge(int x,int y,int z)\n{\n\tedge[++cnt].to=y;\n\tedge[cnt].wei=z;\n\tedge[cnt].nextt=head[x];\n\thead[x]=cnt;\n}\nint main()\n{\n\tcin>>m>>n>>s;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans[i]=2147483647;\n\t}\n\tans[s]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\taddedge(a,b,c);\n\t}\n\tint pos=s;\n\twhile(vis[pos]==0)\n\t{\n\t\tlong long minn=2147483647;\n\t\tvis[pos]=1;\n\t\tfor(int i=head[pos];i!=0;i=edge[i].nextt)\n\t\t{\n\t\t\tif(!vis[edge[i].to]&&ans[edge[i].to]>ans[pos]+edge[i].wei)\n\t\t\t{\n\t\t\t\tans[edge[i].to]=ans[pos]+edge[i].wei;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tif(ans[i]<minn&&vis[i]==0)\n\t\t\t{\n\t\t\t\tminn=ans[i];\n\t\t\t\tpos=i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcout<<ans[i]<<' ';\n\t}\n}\n```\n\u4ee5\u4e0a\u662fDijkstra\u7684\u57fa\u7840\u4ecb\u7ecd\uff0c\u4e0a\u9762\u7684\u8fd9\u4efd\u4ee3\u7801\u662f\u4e0d\u52a0\u4f18\u5316\u7684Dijkstra\uff0c\u80fd\u901a\u8fc7\n[P3371\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09](https://www.luogu.org/problemnew/show/P3371)\n\u4e0d\u8fc7\u5728\u8fd9\u9053\u9898\u4e2d\u4f1aTLE\u3002\n\n### \u4f18\u5316\n\n\n\u5728\u4e0a\u9762\u7b2c\u4e94\u6b65\u4e2d\uff1a\n`5. \u5217\u4e3e\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u7684\u70b9\uff0c\u627e\u5230ans\u503c\u6700\u5c0f\u7684\u70b9`\n\n\u8fd9\u4e00\u6b65\u7531\u4e8e\u6bcf\u6b21\u90fd\u8981\u904d\u5386\u4e00\u904d\u6240\u6709\u70b9\uff0c\u590d\u6742\u5ea6\u4e3a$O(n)$\n\n\u4e0d\u8fc7\u53ef\u4ee5\u7528\u5806\uff08STL\uff1a\u4f18\u5148\u961f\u5217\uff09\u8fdb\u884c\u4f18\u5316\uff0c\u590d\u6742\u5ea6\u4e3a$O(logn)$\n\n#### \u7b80\u5355\u4ecb\u7ecd\u4f18\u5148\u961f\u5217\n\n\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u627e\u51fa\u6570\u5217\u4e2d\u6700\u5927\u503c\uff0c\u5f39\u51fa\u6700\u5927\u503c\n\n\u91cd\u8f7d\u8fd0\u7b97\u7b26\u540e\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u6700\u5c0f\u503c\n\n\n- \u4ee3\u7801\uff1a\n\n\u5934\u6587\u4ef6\n```cpp\n#include<queue>\n```\n\n\u5b9a\u4e49\n```cpp\npriority_queue<int> q;\n```\n\n\u52a0\u5165\n```cpp\nq.push(a);\n```\n\u5f39\u51fa\u6700\u5927\u503c\n```cpp\nq.pop()\n```\n\n\u67e5\u8be2\u6700\u5927\u503c\n```\nq.top()\n```\n\n\u8be6\u7ec6\u7684\u53ef\u770b[P3378 \u3010\u6a21\u677f\u3011\u5806](https://www.luogu.org/problemnew/show/P3378)\n\n### \u4ee3\u7801\n\n\u5bf9\u4ee5\u4e0a\u4ee3\u7801\u52a0\u5165\u5806\u4f18\u5316\uff1a\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u503c\u9700\u8981\u5b58\u50a8\uff08$ans$\u503c\uff0c\u70b9\u7684\u7f16\u53f7\uff09,\u6240\u4ee5\u8981\u7528\u7ed3\u6784\u4f53\n\n\u7531\u4e8e\u8981\u627e\u6700\u5c0f\u7684\u70b9\uff0c\u6240\u4ee5\u7528\u4f18\u5148\u961f\u5217\u65f6\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff1a\n```cpp\nstruct node\n{\n    int ans;//ans\u503c\n    int id;//\u70b9\u7f16\u53f7\n    bool operator <(const node &x)const//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n    {\n        return x.ans<ans;\n    }\n};\n```\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint head[100000],cnt;\nlong long ans[1000000];\nbool vis[1000000];\nint m,n,s;\nstruct edge\n{\n\tint to;\n\tint nextt;\n\tint wei;\n}edge[1000000];\nstruct priority\n{\n    int ans;\n    int id;\n    bool operator <(const priority &x)const\n    {\n        return x.ans<ans;\n    }\n};\nvoid addedge(int x,int y,int z)\n{\n\tedge[++cnt].to=y;\n\tedge[cnt].wei=z;\n\tedge[cnt].nextt=head[x];\n\thead[x]=cnt;\n}\n\npriority_queue<priority> q;\n\nint main()\n{\n\tcin>>m>>n>>s;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans[i]=2147483647;\n\t}\n\tans[s]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\taddedge(a,b,c);\n\t}\n\tint u;\n\tq.push((priority){0,s});\n    while(!q.empty())\n    {\n        priority temp=q.top();\n        q.pop();\n        u=temp.id;\n        if(!vis[u])\n        {\n        \tvis[u]=1;\n\t        for(int i=head[u];i;i=edge[i].nextt)\n\t        {\n\t            int v=edge[i].to;\n\t            if(ans[v]>ans[u]+edge[i].wei)\n\t            {\n\t                ans[v]=ans[u]+edge[i].wei;\n\t                if(!vis[v])\n\t                {\n\t                    q.push((priority){ans[v],v});\n\t                }\n\t            }\n\t        }\n\t\t}\n    }\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcout<<ans[i]<<' ';\n\t}\n}\n```\n\n\n#### \u611f\u8c22\u6536\u770b..\n",
        "postTime": 1551676720,
        "uid": 113401,
        "name": "2018\u4e00\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# spfa\u7684\u590d\u6d3b\u4e4b\u8def\n\n## \u8b66\u544a\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b66\u4f1a\u7528dijkstra\u5806\u4f18\u5316\u4e0d\u5efa\u8bae\u770b\u6b64\u7bc7\u9898\u89e3\n\n### ~~\u4e00\u7bc7\u8be1\u5f02\u7684\u975e\u6b63\u89e3~~\n\n### \u56e0\u4e3a\u672c\u4eba\u5f88\u5f31\uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u81ea\u4ee5\u4e3a\u662f\u7684\u5730\u65b9\uff0c\u5e0c\u671b\u5927\u5bb6\u6307\u51fa\uff0c\u4f46\u662f\u4e0d\u8981\u4e71\u55b7...,\u6211\u4f1a\u6539\u7684\n\n\u5728\u4e09\u9875\u7684\u63d0\u4ea4\u540e\u7ec8\u4e8e\u7528spfa\u5207\u6389\u4e86\u8fd9\u9053\u9898\u3002\u3002\u3002\n\n\u9996\u5148\u6211\u5148\u5c1d\u8bd5\u4f7f\u7528\u4e86~~\u7384\u5b66(LLL,SLF?)~~\u4f18\u5316\uff0c\u5747\u53ea\u670968~48\u5206\uff0c\u65e0\u610f\u4e2d\u53d1\u73b0\n\n# [\u8fd9\u4e2a](https://www.luogu.org/record/show?rid=8793733)\n\n\u53d1\u73b0\u6570\u636e\u90fd\u7279\u610f\u5361\u6389\u4e86\n\n\u90a3\u5c31\u53ea\u80fd\u81ea\u98df\u5176\u529b\u4e86\n\n\u6211\u4eec\u53d1\u73b0\u6240\u6709\u5361\u6389spfa\u7684\u6570\u636e\uff0c\u5c31\u662f\u8bf1\u5bfc\u7b97\u6cd5\u8fdb\u5165\u4e00\u4e2a\u6301\u7eed\u66f4\u65b0\u7684\u5730\u65b9\n\n\u4e8e\u662f\u6211\u5c1d\u8bd5\u65b0\u52a0\u5165\u7684\u70b9\u5165\u961f\u5934\uff08dfs\u7248\uff09.\n\n\u540c\u65f6\u5982\u679cdis[head]>dis[tail],\u5219\u4ea4\u6362head\u4e0etail\n\n[\u4f3c\u4e4e\u591a\u8fc7\u4e86\u4e00\u4e2a\u8bf6](https://www.luogu.org/recordnew/show/11854571)\n\n\u4e4b\u540e\u6211\u53d1\u73b0\u7b2c\u4e00\u4e2a\u6570\u636e\u975e\u5e38\u6bd2\u7624\uff0c\u6b7b\u6d3b\u5361\u4e0d\u8fc7\u53bb\uff0c\u56e0\u4e3a\u6570\u636e\u592a\u5927\uff0c\u4e0b\u4e0d\u4e0b\u6765\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4e0b\u8f7d\u8f93\u51fa\u554a!\n\n\u7ecf\u8fc7\u4e00\u756a\u89c2(xia)\u5bdf(gao)\n\n\u4e4b\u6240\u4ee5\u5361\u6389\u524d\u9762\u7684\u4ea4\u6362\u7684\u7a0b\u5e8f\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u5934dis>\u5c3edis\u7684\u5f88\u591a\u3002\n\n\u4e8e\u662f\u6211\u4ee50.01%\u7684\u6982\u7387\u6392\u5e8f\u6574\u4e2a\u961f\u5217\uff0c\u6211\u4eec\u60ca\u559c\u7684\u53d1\u73b0\uff0c[\u70b91\u8fc7\u4e86!](https://www.luogu.org/record/show?rid=11854835)\n\n\u4f46\u662f\u70b93T\u98de\n\n\u540e\u6765\u53d1\u73b0\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\uff0c\u88abdijkstra\u7206\u8e29\n\n\u4e8e\u662f\u6211\u4eec\u4ee5$1\\div(tail-head+1)$\u7684\u6982\u7387\u6392\u5e8f\u961f\u5217\uff0c\u8fd9\u4e2a\u7684\u671f\u671b\u590d\u6742\u5ea6\u662flog\u7684\n\n\u56e0\u4e3asort\u7684\u901f\u5ea6\u5feb\u4e8e\u5806\u6392\uff08\u8bef\n\n\u6240\u4ee5\u597d\u50cf\u901f\u5ea6\u6bd4dijkstra \u7684\u914d\u5bf9\u5806\u4f18\u5316\u8981\u5feb80ms\n\n[\u7384\u5b66spfa](https://www.luogu.org/recordnew/show/11855010)\n\n[pairing_heap_dijkstra](https://www.luogu.org/record/show?rid=11846688)\n\n\u8fd0\u7528\u4e86fread\u548c\u4e0d\u5f00long long\u540e\u4f3c\u4e4e\u53ef\u4ee5\u62a2rank?\n\n210ms\u5de6\u53f3\n\ndijkstra\n\n```cpp\n// luogu-judger-enable-o2\n/*\n@Date    : 2018-10-13 17:42:26\n@Author  : Adscn (1349957827@qq.com)\n@Link    : https://www.cnblogs.com/LLCSBlog\n*/\n#define FASTER\n#ifdef FASTER\n#pragma GCC diagnostic error \"-std=c++11\"\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n#endif\n#include<bits/stdc++.h>\n#include<bits/extc++.h>\nusing namespace std;\n#define IL inline\n#define RG register\n#define gi getint()\n#define gc getchar()\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nIL int getint()\n{\n    RG int xi=0;\n    RG char ch=gc;\n    bool f=0;\n    while(ch<'0'|ch>'9')ch=='-'?f=1:f,ch=gc;\n    while(ch>='0'&ch<='9')xi=(xi<<1)+(xi<<3)+ch-48,ch=gc;\n    return f?-xi:xi;\n}\nIL void pi(int k,char ch=0)\n{\n    if(k<0)k=-k,putchar('-');\n    if(k>=10)pi(k/10,0);\n    putchar(k%10+'0');\n    if(ch)putchar(ch);\n}\nIL unsigned int LOG2(unsigned int x)\n{\n    unsigned int ret;\n    __asm__ __volatile__ (\"bsrl %1, %%eax\":\"=a\"(ret):\"m\"(x));\n    return ret;\n}\ntypedef long long ll;\nclass graph{\nprivate:\n    struct edge{\n        int v;\n        edge *next;\n        int w;\n    }e[200007],*head[200007];\n    int cnt;\npublic:\n    graph(){cnt=0;}\n    void add(int u,int v,int w=0)\n    {\n        e[cnt]=((edge){v,head[u],w});\n        head[u]=&e[cnt++];\n    }\n    edge* begin(int u){return head[u];}\n    edge* end(){return NULL;}\n    class iterator{\n    public:\n        friend class graph;\n        iterator(edge* p=NULL):__ptr(p){}\n        iterator (const iterator &p):__ptr(p.__ptr){}\n        iterator& operator ++()\n        {\n            __ptr=__ptr->next;\n            return *this;\n        }\n        iterator operator ++(int)\n        {\n            iterator __tmp=(*this);\n            ++(*this);\n            return __tmp;\n        }\n        edge* operator ->(){return __ptr;}\n        edge& operator * (){return *__ptr;}\n        bool operator ==(const iterator &p){return __ptr==p.__ptr;}\n        bool operator != (const iterator &p){return __ptr!=p.__ptr;}\n    private:\n        edge *__ptr;\n    };\n}g;\nconst int MAXN=100000+7;\ntypedef pair<ll,int> pii;\n__gnu_pbds::priority_queue<pii,greater<pii> >q;\nint n,m,s;\nll dis[MAXN];\nbool vis[MAXN];\nvoid dijkstra()\n{\n    memset(dis,0x7f7f7f,sizeof dis);\n    q.push(make_pair(0,s));\n    dis[s]=0;\n    while(!q.empty())\n    {\n        int now=q.top().second;q.pop();\n        if(vis[now])continue;\n        vis[now]=1;\n        for(graph::iterator i=g.begin(now);i!=g.end();++i)\n        {\n            int v=i->v;\n            if(dis[v]>dis[now]+i->w)dis[v]=dis[now]+i->w,q.push(make_pair(dis[v],v));\n        }\n    }\n}\nint main(void)\n{\n\tn=gi,m=gi,s=gi;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=gi,v=gi,w=gi;\n\t\tg.add(u,v,w);\n\t}\n    dijkstra();\n\tfor(int i=1;i<=n;i++)pi(dis[i],' ');\t\n    return 0;\n}\n```\n\n\u4f2adfs\u7248spfa\n```cpp\n#include<bits/stdc++.h>\n#include<bits/extc++.h>\nusing namespace std;\n#define IL inline\n#define RG register\n#define gi getint()\n#define gc getchar()\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nIL int getint()\n{\n    RG int xi=0;\n    RG char ch=gc;\n    bool f=0;\n    while(ch<'0'|ch>'9')ch=='-'?f=1:f,ch=gc;\n    while(ch>='0'&ch<='9')xi=(xi<<1)+(xi<<3)+ch-48,ch=gc;\n    return f?-xi:xi;\n}\nIL void pi(int k,char ch=0)\n{\n    if(k<0)k=-k,putchar('-');\n    if(k>=10)pi(k/10,0);\n    putchar(k%10+'0');\n    if(ch)putchar(ch);\n}\nIL unsigned int LOG2(unsigned int x)\n{\n    unsigned int ret;\n    __asm__ __volatile__ (\"bsrl %1, %%eax\":\"=a\"(ret):\"m\"(x));\n    return ret;\n}\ntypedef long long ll;\nclass graph{\nprivate:\n    struct edge{\n        int v;\n        edge *next;\n        int w;\n    }e[200007],*head[200007];\n    int cnt;\npublic:\n    graph(){cnt=0;}\n    void add(int u,int v,int w=0)\n    {\n        e[cnt]=((edge){v,head[u],w});\n        head[u]=&e[cnt++];\n    }\n    edge* begin(int u){return head[u];}\n    edge* end(){return NULL;}\n    class iterator{\n    public:\n        friend class graph;\n        iterator(edge* p=NULL):__ptr(p){}\n        iterator (const iterator &p):__ptr(p.__ptr){}\n        iterator& operator ++()\n        {\n            __ptr=__ptr->next;\n            return *this;\n        }\n        iterator operator ++(int)\n        {\n            iterator __tmp=(*this);\n            ++(*this);\n            return __tmp;\n        }\n        edge* operator ->(){return __ptr;}\n        edge& operator * (){return *__ptr;}\n        bool operator ==(const iterator &p){return __ptr==p.__ptr;}\n        bool operator != (const iterator &p){return __ptr!=p.__ptr;}\n    private:\n        edge *__ptr;\n    };\n}g;\nconst int MAXN=100000+7;\nint q[20000000];\nint n,m,s;\nll dis[MAXN];\nbool vis[MAXN];\nvoid dijkspfa()\n{\n    memset(dis,0x7f7f7f,sizeof dis);\n    int l=0,r=0;\n    q[l]=s;\n    dis[s]=0;\n    while(l<=r)\n    {\n        if(dis[q[l]]>dis[q[r]])swap(q[l],q[r]);\n        int now=q[l++];\n        vis[now]=0;\n        for(graph::iterator i=g.begin(now);i!=g.end();++i)\n        {\n            int v=i->v;\n            if(dis[v]>dis[now]+i->w)\n            {\n                dis[v]=dis[now]+i->w;\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    if(l>1&&rand()%10)q[--l]=v;\n                    else q[++r]=v;\n                }\n            }\n        }\n    }\n}\nint main(void)\n{\n       srand(time(0));\n   \tn=gi,m=gi,s=gi;\n   \tfor(int i=1;i<=m;i++)\n   \t{\n   \t\tint u=gi,v=gi,w=gi;\n   \t\tg.add(u,v,w);\n   \t}\n   \tdijkspfa();\n   \tfor(int i=1;i<=n;i++)pi(dis[i],' ');\n       return 0;\n}\n```\n#AC spfa\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n#include<bits/stdc++.h>\n#include<bits/extc++.h>\nusing namespace std;\n#define IL inline\n#define RG register\n#define gi getint()\n#define gc getchar()\n#define File(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\nIL int getint()\n{\n    RG int xi=0;\n    RG char ch=gc;\n    bool f=0;\n    while(ch<'0'|ch>'9')ch=='-'?f=1:f,ch=gc;\n    while(ch>='0'&ch<='9')xi=(xi<<1)+(xi<<3)+ch-48,ch=gc;\n    return f?-xi:xi;\n}\nIL void pi(int k,char ch=0)\n{\n    if(k<0)k=-k,putchar('-');\n    if(k>=10)pi(k/10,0);\n    putchar(k%10+'0');\n    if(ch)putchar(ch);\n}\nIL unsigned int LOG2(unsigned int x)\n{\n    unsigned int ret;\n    __asm__ __volatile__ (\"bsrl %1, %%eax\":\"=a\"(ret):\"m\"(x));\n    return ret;\n}\ntypedef long long ll;\nclass graph{\nprivate:\n    struct edge{\n        int v;\n        edge *next;\n        int w;\n    }e[200007],*head[200007];\n    int cnt;\npublic:\n    graph(){cnt=0;}\n    void add(int u,int v,int w=0)\n    {\n        e[cnt]=((edge){v,head[u],w});\n        head[u]=&e[cnt++];\n    }\n    edge* begin(int u){return head[u];}\n    edge* end(){return NULL;}\n    class iterator{\n    public:\n        friend class graph;\n        iterator(edge* p=NULL):__ptr(p){}\n        iterator (const iterator &p):__ptr(p.__ptr){}\n        iterator& operator ++()\n        {\n            __ptr=__ptr->next;\n            return *this;\n        }\n        iterator operator ++(int)\n        {\n            iterator __tmp=(*this);\n            ++(*this);\n            return __tmp;\n        }\n        edge* operator ->(){return __ptr;}\n        edge& operator * (){return *__ptr;}\n        bool operator ==(const iterator &p){return __ptr==p.__ptr;}\n        bool operator != (const iterator &p){return __ptr!=p.__ptr;}\n    private:\n        edge *__ptr;\n    };\n}g;\nconst int MAXN=100000+7;\nint q[30000000];\nint n,m,s;\nll dis[MAXN];\nbool vis[MAXN];\nbool cmp(int l,int r){return dis[l]<dis[r];}\nvoid spfa()\n{\n    memset(dis,0x7f7f7f,sizeof dis);\n    RG int l=0,r=0;\n    q[l]=s;\n    dis[s]=0;\n    while(l<=r)\n    {\n        if(rand()%((r-l+1>>3)+1)==0)sort(q+l,q+r+1,cmp);\n        int now=q[l++];\n        vis[now]=0;\n        for(RG graph::iterator i=g.begin(now);i!=g.end();++i)\n        {\n            int v=i->v;\n            if(dis[v]>dis[now]+i->w)\n            {\n                dis[v]=dis[now]+i->w;\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    if(l>1)q[--l]=v;\n                    else q[++r]=v;\n                }\n            }\n        }\n    }\n}\nint main(void)\n{\n    srand(19260817);\n    n=gi,m=gi,s=gi;\n    for(int i=1;i<=m;i++)\n    {\n        int u=gi,v=gi,w=gi;\n        g.add(u,v,w);\n    }\n    spfa();\n    for(int i=1;i<=n;i++)pi(dis[i],' ');\n    return 0;\n}\n```",
        "postTime": 1539497495,
        "uid": 19607,
        "name": "ACA\u306d",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "### \u672c\u9898\u89e3\u5df2\u66f4\u65b0 2018.11.18\n\n\u662f\u65f6\u5019\u6765\u4e00\u7bc7**\u7ebf\u6bb5\u6811**\u7684\u9898\u89e3\u4e86\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6548\u7387\u8fd8\u662f\u633a\u4f18\u79c0\u7684\uff0c\u81f3\u5c11\u6211\u81ea\u5df1\u6d4b\u4e0b\u6765\u6bd4\u6211\u539f\u6765\u5199\u7684\u4f18\u5148\u961f\u5217\u5feb\u3002\n\n\u5148\u8003\u8651\u4e00\u4e0b\u5982\u679c\u8981\u4f18\u5316dijkstra\u7b97\u6cd5\uff0c\u4f18\u5148\u961f\u5217\u9700\u8981\u54ea\u4e9b\u64cd\u4f5c\uff0c\u8ba9\u7ebf\u6bb5\u6811\u6765\u5b9e\u73b0\u5b83\u4eec\u3002\n\n- \u67e5\u8be2\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u5373\u8fd8\u6709\u6ca1\u6709\u8981\u7528\u6765\u677e\u5f1b\u5176\u5b83\u70b9\u7684\u70b9\u3002\n\n- \u53d6\u51fadist\u503c\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5e76\u5220\u9664\n\n- \u4fee\u6539\u4e00\u4e2a\u70b9\u7684dist\u503c\n\n\u5982\u679c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4dist\u6570\u7ec4\uff0c\u90a3\u4e48\u4fee\u6539\u64cd\u4f5c\u5c31\u662f\u975e\u5e38\u7b80\u5355\u7684\u5355\u70b9\u4fee\u6539\u3002\u6211\u4eec\u53ea\u8981\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4dist\u6700\u5c0f\u5143\u7d20\u662f\u8c01(minpos\uff0c\u7b80\u79f0mp)\u5373\u53ef\u3002\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u662f\u4e0d\u652f\u6301\u5220\u9664\u5143\u7d20\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628adist[0]\u8bbe\u7f6e\u4e3a\u6052\u4e3ainf\uff0c\u5982\u679c\u8981\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u53ea\u8981\u8ba9\u5b83\u5bf9\u5e94\u7684\u53f6\u8282\u70b9mp\u503c=0\u5373\u53ef\u3002\u8fd9\u6837\u7684\u8bdd\u5c31\u4f1a\u4fdd\u8bc1\u67e5\u8be2dist\u6700\u5c0f\u5143\u7d20\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u4f1a\u67e5\u5230\u5b83\uff1b\u5982\u679c\u67e5\u5230\u5b83\u5c31\u8bf4\u660e\u201c\u4f18\u5148\u961f\u5217\u201d\u5df2\u7ecf\u7a7a\u4e86\u3002\n\n\u8fd9\u662f\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u7248\u672c\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define dwn(I, A, B) for (int I = (A); I >= (B); --I)\n#define erp(I, X) for (int I = head[X]; I; I = next[I])\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...); \n}\ntemplate <typename T> void write(T x) {\n    if (x < 0) x = -x, putchar('-');\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T> void writeln(T x) {\n    write(x);\n    puts(\"\");\n}\ntemplate <typename T> inline bool chkMin(T& x, const T& y) { return y < x ? (x = y, true) : false; }\ntemplate <typename T> inline bool chkMax(T& x, const T& y) { return x < y ? (x = y, true) : false; }\n\nconst int maxn = 1e5 + 207, maxm = 2e5 + 207, inf = INT_MAX;\nint v[maxm], w[maxm], head[maxn], next[maxm], tot;\nint dist[maxn], mp[maxn << 2];\nint n, m, s;\n\ninline void ae(int x, int y, int z) {\n    v[++tot] = y; w[tot] = z; next[tot] = head[x]; head[x] = tot;\n}\ninline int cmp(int a, int b) { return dist[a] < dist[b] ? a : b; }\ninline void upd(int x) { mp[x] = cmp(mp[x << 1], mp[x << 1 | 1]); }\nvoid modify(int o, int l, int r, int pos, int val) {\n    if (l == r) { mp[o] = val; return; }\n    int mid = (l + r) >> 1;\n    if (pos <= mid) modify(o << 1, l, mid, pos, val);\n    else modify(o << 1 | 1, mid + 1, r, pos, val);\n    upd(o);\n}\ninline void dijkstra(int s) {\n    rep(i, 0, n) dist[i] = inf;\n    dist[s] = 0; modify(1, 1, n, s, s);\n    rep(t, 1, n - 1) {\n        int x = mp[1]; modify(1, 1, n, x, 0);\n        // \u6ce8\u610fchkMin\u51fd\u6570\u4e2d\u5df2\u5bf9dist[v[i]]\u8d4b\u503c\u3002\n        erp(i, x) if (chkMin(dist[v[i]], dist[x] + w[i]))\n            modify(1, 1, n, v[i], v[i]);\n    }\n}\n\nint main() {\n    read(n, m, s);\n    rep(i, 1, m) {\n        int x, y, z; read(x, y, z); ae(x, y, z);\n    }\n    dijkstra(s);\n    rep(i, 1, n) write(dist[i]), putchar(' ');\n    puts(\"\");\n    return 0;\n}\n```\n\n\u4e0b\u9762\u662fzkw\u7ebf\u6bb5\u6811\u7684\u7248\u672c\uff0c\u6bd4\u666e\u901a\u7ebf\u6bb5\u6811\u5feb\u3002\uff08\u957f\u8fbe30\u884c\u7684\u7a0b\u5e8f\u5934\u5df2\u7565\u53bb\uff09\n\n\u53c2\u8003\u4e86@Kelin\u5927\u4f6c\u7684\u5199\u6cd5\uff0c\u5728\u8fd9\u91cc\u8868\u793a\u611f\u8c22\u548c\u819c\u62dc\u3002\n\n```cpp\nconst int maxn = 1e5 + 207, maxm = 2e5 + 207, inf = INT_MAX;\nint v[maxm], w[maxm], head[maxn], next[maxm], tot;\nint dist[maxn], mp[maxn << 2], M = 1;\nint n, m, s;\n\ninline void ae(int x, int y, int z) { v[++tot] = y; w[tot] = z; next[tot] = head[x]; head[x] = tot; }\ninline int cmp(int a, int b) { return dist[a] < dist[b] ? a : b; }\ninline void build(int n) {\n\twhile (M < n + 2) M <<= 1;\n    mp[0] = n + 1;\n}\ninline void modify(int x, int nv) {\n\tfor (int i = x + M; dist[mp[i]] > nv; i >>= 1)\n    \tmp[i] = x;\n    dist[x] = nv;\n}\ninline void del(int x) {\n\tfor (mp[x += M] = 0, x >>= 1; x; x >>= 1)\n    \tmp[x] = cmp(mp[x << 1], mp[x << 1 | 1]);\n}\ninline void dijkstra(int s) {\n    rep(i, 0, n) dist[i] = inf;\n    build(n); modify(s, 0);\n    rep(t, 1, n - 1) {\n        int x = mp[1]; del(x);\n        // \u8fd9\u91cc\u6ca1\u6709\u5bf9dist[v[i]]\u8d4b\u503c\uff0c\u8d4b\u503c\u64cd\u4f5c\u5728modify\u51fd\u6570\u91cc\u8fdb\u884c\uff0c\u4e0e\u4e0a\u4e00\u4e2a\u4ee3\u7801\u6709\u6240\u533a\u522b\n        erp(i, x) if (dist[v[i]] > dist[x] + w[i])\n            modify(v[i], dist[x] + w[i]);\n    }\n}\n\nint main() {\n    read(n, m, s);\n    rep(i, 1, m) {\n        int x, y, z; read(x, y, z); ae(x, y, z);\n    }\n    dijkstra(s);\n    rep(i, 1, n) write(dist[i]), putchar(' ');\n    puts(\"\");\n    return 0;\n}\n```\n\n\u53e6\u9644\u5f3a\u52bf\u538b\u884c\u7248\u672c\u3002~~4\u884c\u7ebf\u6bb5\u6811\u4f60\u6ca1\u6709\u770b\u9519~~\n\n```cpp\nconst int maxn = 1e5 + 207, maxm = 2e5 + 207, inf = INT_MAX;\nint v[maxm], w[maxm], head[maxn], next[maxm], tot;\nint dist[maxn], mp[maxn << 2], M = 1;\nint n, m, s;\n\ninline void ae(int x, int y, int z) { v[++tot] = y; w[tot] = z; next[tot] = head[x]; head[x] = tot; }\ninline int cmp(int a, int b) { return dist[a] < dist[b] ? a : b; }\ninline void build(int n) { while (M < n + 2) M <<= 1; mp[0] = n + 1; }\ninline void modify(int x, int nv) { for (int i = x + M; dist[mp[i]] > nv; i >>= 1) mp[i] = x; dist[x] = nv; }\ninline void del(int x) { for (mp[x += M] = 0, x >>= 1; x; mp[x] = cmp(mp[x << 1], mp[x << 1 | 1]), x >>= 1); }\ninline void dijkstra(int s) {\n    rep(i, 0, n) dist[i] = inf;\n    build(n); modify(s, 0);\n    rep(t, 1, n - 1) {\n        int x = mp[1]; del(x);\n        erp(i, x) if (dist[v[i]] > dist[x] + w[i])\n            modify(v[i], dist[x] + w[i]);\n    }\n}\n\nint main() {\n    read(n, m, s);\n    rep(i, 1, m) {\n        int x, y, z; read(x, y, z); ae(x, y, z);\n    }\n    dijkstra(s);\n    rep(i, 1, n) write(dist[i]), putchar(' ');\n    puts(\"\");\n    return 0;\n}\n```\n\n~~\u7ebf\u6bb5\u6811\u5927\u6cd5\u597d~~",
        "postTime": 1534235404,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "**updated. 2019.11.3**  \n\nDijkstra\u662f\u7528\u4e8e\u6c42\u89e3\u6b63\u6743\u56fe\u4e0a\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84(SSSP)\u95ee\u9898\u7684\u7b97\u6cd5  \n\n\u5728\u8fd9\u91cc\u6211\u4e5f\u60f3\u8bf4\u4e00\u4e0b\u5173\u4e8eSPFA\u548cDij Dij\u662f\u4e00\u4e2a\u6c42**\u6ca1\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def**\u7684\u7b97\u6cd5 SPFA\u662f\u4e00\u4e2a\u6c42**\u5b58\u5728\u8d1f\u6743\u8fb9\u7684\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def**\u4ee5\u53ca\u5224\u8d1f\u73af\u7684\u7b97\u6cd5 \u770b\u4f3c\u4e00\u5b57\u4e4b\u5dee \u5199\u8d77\u6765\u4e5f\u5f88\u50cf \u4f46\u5176\u5b9eDij\u548cSPFA\u5b8c\u5168\u662f\u4e0d\u540c\u7684\u601d\u60f3 Dij\u662f\u8d2a\u5fc3\u601d\u60f3 \u5229\u7528\u4e86\u4e00\u4e2a\u53ea\u6709\u6ca1\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u624d\u62e5\u6709\u7684\u6027\u8d28 \u800cSPFA\u66f4\u50cf\u662f\u4e00\u4e2a\"\u66b4\u529b\"\u7b97\u6cd5  \n\n\u53e6\u5916 SPFA\u6ca1\u6b7b  \n\u4e0b\u9762\u662f\u6b63\u6587  \n\n## \u7b97\u6cd5\u6d41\u7a0b\nDijkstra\u7b97\u6cd5\u5176\u5b9e\u662f\u4e00\u4e2a\u57fa\u4e8e\u8d2a\u5fc3\u7684\u8fc7\u7a0b  \n\u6b63\u786e\u6027\u4f1a\u5728\u540e\u9762\u63d0\u53ca  \n\n\u8bbe\u8d77\u70b9\u662f$s$  \n$dis_u$\u8868\u793a\u76ee\u524d\u4ece$s$\u5230$u$\u7684\u6700\u77ed\u8def\u5f84  \n$vis_u$\u8868\u793a$u$\u70b9\u7684\u6700\u77ed\u8def\u662f\u5426\u5df2\u7ecf\u88ab\u786e\u5b9a  \n\n$1.$\u521d\u59cb\u5316\u8d77\u70b9\u7684\u8ddd\u79bb$dis_s$\u4e3a0 \u5176\u5b83\u8282\u70b9\u90fd\u662f\u6b63\u65e0\u7a77  \n$2.$\u627e\u5230\u6240\u6709\u672a\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u4e2d \u4e0e\u8d77\u70b9\u7684\u8ddd\u79bb$dis_u$\u6700\u5c0f\u7684\u70b9$u$  \n$3.dis_u$\u4e00\u5b9a\u662f\u8d77\u70b9\u5230$u$\u6700\u77ed\u8def\u7684\u957f\u5ea6\u4e86 $u$\u7684\u6700\u77ed\u8def\u53d8\u4e3a\u5df2\u786e\u5b9a  \n$4.$\u626b\u63cf$u$\u7684\u6240\u6709\u51fa\u8fb9 \u5982\u679c$s\\to u\\to v$\u8fd9\u6761\u8def\u5f84\u66f4\u4f18(\u5373$dis_u+w(u,v)<dis_v$) \u5c31\u628a$dis_v$\u66f4\u65b0\u4e3a$dis_u+w(u,v)$  \n$5.$\u91cd\u590d2~4\u76f4\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u90fd\u88ab\u786e\u5b9a  \n\n\u8fd9\u91cc\u653e\u5f20\u56fe\u7406\u89e3  \n\u4ee3\u7801\u5728\u540e\u9762  \n\u4e4b\u524d\u753b\u7684\u56fe\u592a\u4e11\u4e86 \u6240\u4ee5\u81ea\u5df1\u624b\u753b\u4e86\u4e00\u5e45  \n\u84dd\u70b9\u8868\u793a\u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u77ed\u8def \u6253$\\sqrt{}$\u7684\u4ee3\u8868\u6309\u8ddd\u79bb\u7684\u5c0f\u6839\u5806\u7684\u5806\u9876  \n![](https://s2.ax1x.com/2019/11/03/KORp1e.jpg)\n\n\n~~\u6700\u540e\u653e\u4e00\u5f20\u52a8\u56fe~~  \n\u52a8\u56fe\u70b8\u4e86 \u6240\u4ee5\u70b9[\u8fd9\u91cc](https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html)\u5427/kk\n\n## \u6b63\u786e\u6027\nDijkstra\u662f\u57fa\u4e8e\u8d2a\u5fc3\u601d\u60f3\u5b9e\u73b0\u7684  \n\n\u5728\u6bcf\u4e00\u8f6e\u66f4\u65b0\u540e \u8fd8\u672a\u8bbf\u95ee\u5230\u8fc7\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u4f18\u4e8e\u5df2\u7ecf\u8bbf\u95ee\u5230\u8fc7\u7684\u8282\u70b9  \n\u800c\u5728\u5df2\u7ecf\u8bbf\u95ee\u5230\u8fc7\u7684\u8282\u70b9\u4e2d \u627e\u51fa\u672a\u786e\u5b9a\u6700\u77ed\u8def\u4e14\u5f53\u524d$dis_u$\u6700\u5c0f\u7684$u$  \n\u7531\u4e8e\u5176\u5b83\u70b9\u7684$dis$\u672c\u6765\u5c31\u5df2\u7ecf\u6bd4$dis_u$\u5927 \u8fb9\u6743\u8fd8\u662f\u975e\u8d1f\u6570 \u5b83\u4eec\u4e0d\u53ef\u80fd\u66f4\u65b0$dis_u$ \u6240\u4ee5$dis_u$\u5df2\u7ecf\u88ab\u786e\u5b9a\u4e86 $u$\u7684\u6700\u77ed\u8def\u5c31\u786e\u5b9a\u4e86 \u8fd9\u6837\u4e00\u6b65\u4e00\u6b65\u4e0b\u6765\u53ef\u4ee5\u786e\u5b9a\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def  \n\n## \u4f18\u5316\n\u5bfb\u627e\u5168\u5c40\u6700\u5c0f\u503c\u8fd9\u4e00\u6b65\u662f\u53ef\u4ee5\u4f18\u5316\u7684  \n\n\u52a0\u5165\u5143\u7d20\u3001\u67e5\u627e\u6700\u5c0f\u503c\u3001\u5220\u9664\u6700\u5c0f\u503c  \n\u7528\u5806\u6765\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u975e\u5e38\u5408\u9002  \n\n\u6240\u4ee5\u5c31\u6709\u4e86\u5806\u4f18\u5316\u7684Dijkstra  \n\u5806\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5b58\u4e24\u4e2a\u503c \u7ed3\u70b9\u7f16\u53f7$x$\u548c\u5165\u5806\u662f\u8be5\u70b9\u88ab\u66f4\u65b0\u6210\u7684\u8ddd\u79bb$dis$  \n$dis$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57(\u5373\u6309dis\u7684\u5c0f\u6839\u5806)\n\u4e3b\u8981\u601d\u60f3\u4e0d\u53d8 \u6bcf\u6b21\u627e\u8ddd\u79bb\u6700\u5c0f\u70b9\u662f\u76f4\u63a5\u53d6\u51fa\u5806\u9876\u5e76\u5220\u9664\u5806\u9876  \n\u66f4\u65b0\u6700\u77ed\u8def\u7684\u65f6\u5019 \u5c06\u66f4\u65b0\u540e\u7684\u8282\u70b9\u5165\u5806  \n\n\u6ce8\u610f\u4e00\u4e2a\u70b9\u53ef\u80fd\u4f1a\u88ab\u66f4\u65b0\u591a\u6b21\u800c\u5165\u5806\u591a\u6b21 \u4f46\u662f\u53ea\u6709**\u6700\u540e\u4e00\u6b21\u5165\u5806\u624d\u662f\u6b63\u786e\u7684dis** \u540c\u65f6**\u4e5f\u4e00\u5b9a\u662f\u5728\u6240\u6709\u5165\u5806\u64cd\u4f5c\u7ed3\u675f\u540e\u624d\u4f1a\u51fa\u5806** \u6240\u4ee5\u76f4\u63a5\u5f00\u4e2a\u6570\u7ec4\u5224\u65ad\u6709\u6ca1\u6709\u51fa\u5806\u8fc7\u5c31\u597d\u4e86 \u5f53\u7136\u4e5f\u53ef\u4ee5\u6839\u636e\u5806\u4e2d\u5143\u7d20\u7684\u8ddd\u79bb\u5927\u5c0f\u548c\u70b9\u7684\u6700\u77ed\u8def\u5927\u5c0f\u76f4\u63a5\u5224\u65ad  \n\n\u76f4\u63a5\u7ed9\u51fa\u5806\u4f18\u5316Dijkstra\u4ee3\u7801:  \n```cpp\nstruct node{\n\tLL dis,x;\n\tbool operator < (const node &nd)const{ return nd.dis < dis; }\n\t// \u91cd\u8f7d\u8fd0\u7b97\u7b26 \u6ce8\u610fpq\u7684\u91cd\u8f7d\u662f\u53cd\u7684\n}h;\n\npriority_queue <node> q; // \u8fd9\u53eb\u5806\n\nvoid add_edge(int f,int t,int C){\n\t++ ec; to[ec] = t; cst[ec] = C; nxt[ec] = hed[f]; hed[f] = ec;\n}\n\nvoid dijkstra(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[s] = 0; h.x = s; h.dis = 0; q.push(h);\n\twhile(!q.empty()){\n\t\th = q.top(); q.pop();\n\t\tint u = h.x,v;\n\t\tif(vis[u]) continue; vis[u] = 1;\n\t\tfor(int i = hed[u];i;i = nxt[i]){\n\t\t\tv = to[i];\n\t\t\tif(dis[v] > dis[u] + cst[i]){\n\t\t\t\tdis[v] = dis[u] + cst[i];\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\th.x = v; h.dis = dis[v];\n\t\t\t\t\tq.push(h);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i ++) printf(\"%d \",dis[i]);\n}\n\nint main(){\n\tscanf(\"%d %d %d\",&n,&m,&s);\n\twhile(m --){\n\t\tscanf(\"%d %d %d\",&a,&b,&c);\n\t\tadd_edge(a,b,c);\n\t}\n\tdijkstra();\n\treturn 0;\n}\n```\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e:\n\n\u7531\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53ea\u4f1a\u51fa\u5806\u4e00\u6b21(\u4e25\u683c\u6765\u8bf4\u662f\u53ea\u6269\u5c55\u8fd9\u4e2a\u8282\u70b9\u4e00\u6b21)  \n\u6240\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u548c\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ea\u4f1a\u8bbf\u95ee\u4e00\u6b21  \n\u5806\u4f18\u5316Dijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((N+M)logM)$  \n\n\u53e6\u5916 \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u8fb9 \u5373\u4f7f\u6ca1\u6709\u8d1f\u73af Dijkstra \u4e5f\u4f1a\u6709\u9519\u8bef  \n\u5982\u679c\u4e0d\u7528\u65b0\u6570\u7ec4\u5224\u65ad\u800c\u7528\u8ddd\u79bb$dis$\u6765\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5165\u5806\u8fc7 \u90a3\u4e48\u4f1a\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6  \n\n## \u7b80\u5355\u5e94\u7528\n\u5728\u6c42\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u540c\u65f6\u7ef4\u62a4\u4e00\u4e9b\u5176\u4ed6\u4fe1\u606f  \n\u8fd9\u4e9b\u4fe1\u606f\u4e5f\u5e94\u8be5\u80fd\u591f\u4f20\u9012  \n**1.\u8bb0\u5f55\u8def\u5f84**  \n\u6bcf\u6b21\u66f4\u65b0\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u4e00\u4e2apre\u5373\u53ef \u4ee3\u8868\u8fd9\u6761\u8def\u5f84\u662f\u7531\u54ea\u4e2a\u70b9\u8fc7\u6765\u7684  \n\u6700\u540e\u76f4\u63a5\u4ece\u6700\u540e\u4e00\u4e2a\u70b9\u4e0d\u65ad\u53d6pre \u8f93\u51fa\u8def\u5f84  \n```cpp\nvoid dijkstra(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[s] = 0; t.x = s; t.dis = 0; q.push(t);\n\twhile(!q.empty()){\n\t\th = q.top(); q.pop();\n\t\tint u = h.x,v;\n\t\tif(vis[u]) continue; vis[u] = 1;\n\t\tfor(int i = hed[u];i;i = nxt[i]){\n\t\t\tv = to[i];\n\t\t\tif(dis[v] > dis[u] + cst[i]){\n\t\t\t\tdis[v] = dis[u] + cst[i];\n           pre[v] = u;\n\t\t\t\tt.x = v; t.dis = dis[v];\n\t\t\t\tq.push(t);\n\t\t\t}\n\t\t}\n\t}\n}\nwhile(now){\n\tprintf(\"%d \",now);\n   now = pre[now];\n}\n```\n**2.\u6700\u77ed\u8def\u8ba1\u6570**  \n\u8bb0\u5f55\u4e00\u4e2a$cnt_u$\u4ee3\u8868\u8d77\u70b9\u5230u\u7684\u6700\u77ed\u8def\u6709\u591a\u5c11\u6761  \n\u5728$dis_v=dis_u+w(u,v)$\u65f6 \u52a0\u4e0a\u6765\u81ea$u$\u7684\u65b9\u6848\u6570  \n```cpp\nvoid dijkstra(int s){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tmemset(cnt,0,sizeof(cnt));\n\tdis[s] = 0; cnt[s] = 1; t.x = s; t.dis = 0; q.push(t);\n\twhile(!q.empty()){\n\t\th = q.top(); q.pop();\n\t\tint u = h.x; if(vis[u]) continue; vis[u] = 1;\n\t\tfor(int i = hed[u];i;i = nxt[i]){\n\t\t\tint v = to[i];\n\t\t\tif(dis[v] > dis[u] + w[i]){\n\t\t\t\tdis[v] = dis[u] + w[i]; cnt[v] = cnt[u];\n\t\t\t\tt.x = v; t.dis = dis[v];\n\t\t\t\tq.push(t);\n\t\t\t}\n\t\t\telse if(dis[v] == dis[u] + w[i]){\n\t\t\t\tcnt[v] += cnt[u];\n\t\t\t\tcnt[v] %= N;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n**3.\u6b21\u77ed\u8def**  \n\u8bb0\u5f55\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u548c\u6b21\u77ed\u8def  \n\u8fd9\u91cc\u7531\u4e8e\u8fb9\u80fd\u591f\u91cd\u590d\u8d70 \u5c31\u4e0d\u80fd\u591f\u4f7f\u7528\u662f\u5426\u51fa\u8fc7\u5806\u5224\u65ad \u4e00\u4e2a\u70b9\u53ef\u80fd\u8981\u66f4\u65b0\u5176\u5b83\u70b9\u591a\u6b21  \n\u8fd9\u91cc\u53ea\u8981\u7528\u8def\u7a0b\u5224\u65ad \u5c31\u662f\u5806\u4e2d\u5143\u7d20$\\{x,dis\\}$\u7684$dis$\u6bd4\u6b21\u77ed\u8def$dis2_x$\u8fd8\u5927 \u5c31\u629b\u5f03\u8fd9\u4e2a\u5143\u7d20 \u53d6\u4e0b\u4e00\u4e2a  \n\n\u8fd8\u6709\u4e00\u79cd\u795e\u5947\u7684\u89e3\u6cd5 \u628a\u6bcf\u4e00\u6761\u8fb9\u518d\u52a0\u4e00\u6761\u8fb9 \u8d77\u70b9\u7ec8\u70b9\u76f8\u540c \u8fb9\u6743\u4e3a\u539f\u6765\u7684**\u4e09\u500d** \u4ee3\u8868$u\\to v\\to u\\to v$  \n```cpp\nvoid dijkstra(int fr){\n\tmemset(dis,0x3f,sizeof(dis)); dis[fr] = 0;\n\tmemset(ds2,0x3f,sizeof(ds2));\n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue <node> q;\n\tt.x = fr; t.dis = 0; q.push(t);\n\twhile(!q.empty()){\n\t\th = q.top(); q.pop();\n\t\tint u = h.x; if(vis[u]) continue; vis[u] = 1;\n\t\tfor(int i = hed[u];i;i = nxt[i]){\n\t\t\tint v = to[i];\n\t\t\tif(dis[v] > dis[u] + w[i]){\n\t\t\t\tds2[v] = dis[v];\n\t\t\t\tdis[v] = dis[u] + w[i];\n\t\t\t\tt.x = v; t.dis = dis[v];\n\t\t\t\tq.push(t);\n\t\t\t}\n\t\t\telse if(ds2[v] > dis[u] + w[i] && dis[v] != dis[u] + w[i]) ds2[v] = dis[u] + w[i];\n\t\t\tif(ds2[v] > ds2[u] + w[i]) ds2[v] = ds2[u] + w[i];\n\t\t}\n\t}\n}\nfor(int i = 1;i <= m;i ++){\n\tscanf(\"%d %d %d\",&a,&b,&c);\n\tadd_edge(a,b,c);\n\tadd_edge(b,a,c);\n\tadd_edge(a,b,3 * c);\n\tadd_edge(b,a,3 * c);\n}\n```",
        "postTime": 1571283058,
        "uid": 31440,
        "name": "installb",
        "ccfLevel": 8,
        "title": "[\u7b97\u6cd5\u7b14\u8bb0] Dijkstra"
    },
    {
        "content": "## \u65e2\u7136\u5361SPFA\uff0c\u90a3\u5c31\u7528Dijkstra + \u5806\u4f18\u5316\n\n#### ~~\u6211\u592a\u83dc\u4e86\u5c31\u4e0d\u4f1aSPFA~~\n\n\u5c31\u662f\u8981\u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u4e9b\u540c\u5b66\u4f1a\u8bf4\uff1a\n\n\u201c\u6211\u4eec\u53c8\u4e0d\u662f\u4e0d\u4f1aDijkstra + \u5806\u4f18\u5316\u201d\n\n\u4e8e\u662f\u81ea\u4fe1\u6ee1\u6ee1\u7684\u4ea4\u4e0a\uff0c\u4e00\u770b\u5c31\u50bb\u773c\u4e86\uff0c\uff0c\uff0c\n\n60\u5206\uff1f\uff01  #2 #3 TLE\uff1f\uff01\n\n\u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u4e86\n\n\u8fc7\u4e0d\u53bb\u53ef\u80fd\u662f\u56e0\u4e3a\u6ca1\u6709\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\uff1a\uff08\u4e0b\u9762\u622a\u53d6\u4e00\u90e8\u5206\u4ee3\u7801\uff09\n\n```cpp\nwhile (q.size()){\n        int u = q.top().v;\n        int d = q.top().u;\n        q.pop();\n        if(d!=dis[u])//\u8fd9\u91cc\u662f\u4f18\u5316\u54e6\n            continue;//QAQ\n        rep(i,u){\n            int v = e[i].v;\n            int w = e[i].w;\n            if (dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w;\n                node p;\n                p.u = dis[v], p.v = v;\n                q.push(p);\n            }\n        }\n    }\n```\n\n\u8fd9\u4e2a\u4f18\u5316\u628a\u4e00\u4e9b\u4e0d\u53ef\u884c\u7684\u8def\u5f84\u76f4\u63a5\u8df3\u8fc7\u53bb\uff0c\u4f1a\u51cf\u5c11\u4e00\u4e9b\u65f6\u95f4\n\n\u6ca1\u6709\u8fd9\u53e5\u662f2500+ms\n\n\u6709\u8fd9\u53e5\u53ea\u9700208msQAQ\n\n\u90a3\u4e48Dijkstra\u662f\u4e0d\u9700\u8981\u8bb2\u7684\uff08\u5982\u679c\u4f60\u505a\u8fc7\u5f31\u5316\u7248\uff09\n\n\u5806\u4f18\u5316\u4f3c\u4e4e\u4e5f\u4e0d\u96be\uff0c\u5c31\u662f\u62ff\u5806\u4f18\u5316\u627e\u6700\u77eddis\u5c31\u597d\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define inf 1 << 30\n#define ll long long\n#define ld long double\n#define fi first\n#define se second\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\ninline int read(){\n    int f = 1, x = 0;char ch = getchar();\n    while (ch > '9' || ch < '0'){if (ch == '-')f = -f;ch = getchar();}\n    while (ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return x * f;\n}\ninline void write(int x){\n    if (x < 0)putchar('-');x = -x;\n    if (x > 9)write(x / 10);\n    putchar(x % 10 + '0');\n}\n//This is AC head above...\nstruct edge{\n    int v, nxt, w;\n} e[mn<<1];\nint h[mn],p;\ninline void add(int a,int b,int c){\n    p++;\n    e[p].nxt = h[a];\n    h[a] = p;\n    e[p].v = b;\n    e[p].w = c;\n}\nstruct node{\n    int u,v;\n    bool operator <(const node &b) const{\n        return u > b.u;\n    }\n};\n/*\nbool operator <(const node &a,const node &b) {\n        return a.u > b.u;\n};\n*/\nint n,m,s;\nint dis[mn];\npriority_queue<node> q;\ninline void Dij(int s){\n    go(i, 0, n, 1)\n        dis[i] = inf;\n    dis[s] = 0;\n    node o;\n    o.u = 0;\n    o.v = s;\n    q.push(o);\n    while (q.size()){\n        int u = q.top().v;\n        int d = q.top().u;\n        q.pop();\n        if(d!=dis[u])\n            continue;\n        rep(i,u){\n            int v = e[i].v;\n            int w = e[i].w;\n            if (dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w;\n                node p;\n                p.u = dis[v], p.v = v;\n                q.push(p);\n            }\n        }\n    }\n}\nint main(){\n    n=read(),m=read(),s=read();\n    go(i,1,m,1){\n        int u = read(), v = read(), w = read();\n        add(u, v, w);\n    }\n    Dij(s);\n    go(i,1,n,1){\n        cout << dis[i] << \" \";\n    }\n    cout << \"\\n\";\n    return 0;\n}\n```\n\n### \u7b2c\u4e94\u6b21\u53d1\u9898\u89e3\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u4e00\u76f4\u720660\u7684\u540c\u5b66",
        "postTime": 1532827767,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u76f4\u63a5\u8fdb\u5165\u6b63\u9898\u5427\n\n _**PART 1**_  \u4e3a\u4ec0\u4e48\u8981\u9009\u62e9Dijkstra\uff1f~~(Dijkstra\uff0c\u4f60\u503c\u5f97\u62e5\u6709)~~\n```cpp\n\u9996\u5148\u5206\u6790\u4e00\u4e0b\u6700\u5e38\u89c1\u7684\u4e09\u79cd\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u60c5\u51b5\n\n\u7b97\u6cd5\u540d\u79f0   \u65f6\u95f4\u590d\u6742\u5ea6(\u6700\u597d)   \u65f6\u95f4\u590d\u6742\u5ea6(\u6700\u574f)   \u7a7a\u95f4\u590d\u6742\u5ea6   \u7528\u9014\nDijkstra       O(N^2)             O(N^2)            O(N)      \u5355\u6e90\nSPFA        O(KM)(k\u4e3a\u5e38\u6570)        O(NM)             O(N)      \u5355\u6e90\nFloyd          O(N^3)             O(N^3)           O(N^2)     \u591a\u6e90\n\n\u53ef\u4ee5\u77e5\u9053\uff0cSPFA\u662f\u6bd4\u8f83\u4e0d\u7a33\u5b9a\u7684(\u6bd4\u5982\u8bf4\u5728NOI\u7684\u5f52\u7a0b\u4e2d)\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981Dijkstra\nDijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u5728O(N^2)\uff0c\u662f\u4e00\u79cd\u975e\u5e38\u7406\u60f3\u7684\u65f6\u95f4\u590d\u6742\u5ea6(\u4e3b\u8981\u662f\u7a33\u5b9a)\n```\n\n _**PART 2**_  Dijkstra\u7684\u4f18\u5316\n\n\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u666e\u901a\u7684Dijkstra\u4e86\uff0c\u5982\u6709\u9700\u8981\uff0c\u51fa\u95e8\u5de6\u8f6c\u81f3P3371\u4e86\u89e3\u60c5\u51b5\n\nDijkstra\u7684\u4f18\u5316\u4e3b\u8981\u5c31\u51fa\u5728\u627e\u6700\u5c0f\u503c\u4e0a\uff0c\u5916\u5c42O(N)\u7684\u5faa\u73af\u662f\u65e0\u6cd5\u4f18\u5316\u7684\uff0c\u56e0\u4e3aDijkstra\u4e00\u5b9a\u8981\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u8fdb\u884c\u6269\u6563\u624d\u80fd\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\n\n\u7ef4\u62a4\u6700\u5c0f\u503c\u4e3b\u8981\u5c31\u662f\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u7ebf\u6bb5\u6811\u548c\u5c0f\u6839\u5806\n\n\u672c\u7bc7\u9898\u89e3\u53ea\u8bb2\u8ff0\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4~~(\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u8fd9\u662f\u56e0\u4e3a\u6211\u7528\u5806\u6572\u4e86\u51e0\u904d\u90fd\u6ca1\u8fc7)~~\n\n\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u53ea\u7528\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u5373\u53ef\uff0c\u5982\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff0c\u8bf7\u627ebaidu.com\u6216\u5176\u4ed6\u5927\u4f6c\n\n\u7ef4\u62a4\u6700\u5c0f\u503c\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u4e86\uff0c\u800c\u7ef4\u62a4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u53ea\u9700\u8c03\u6574\u4e00\u4e0bupdate\u5373\u53ef\n\n _**PART**_  3 \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=200010,M=500010;\nstruct stt//\u7ebf\u6bb5\u6811\u8981\u7ef4\u62a4\u7684min\u548cmin\u7684\u4f4d\u7f6ew\n{\n\tint m,w;\n}t[N<<2];\nstruct node//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n\tint to,la,v;\n}e[M];\nint n,m,tot=0,a,b,c,s;\nint dis[N],st[N],bz[N];\nint read()//\u5feb\u8bfb\n{\n\tint p=0;\n\tchar c=getchar();\n\twhile (c<'0' || c>'9') c=getchar();\n\twhile (c>='0' && c<='9') p=p*10+(c-'0'),c=getchar();\n\treturn p;\n}\nvoid write(int l)//\u5feb\u8f93\n{\n\tif (l>=10) write(l/10);\n\tputchar(l%10+'0');\n}\nint ls(int x){return x<<1;}//\u4f4d\u8fd0\u7b97\u52a0\u901f\u83b7\u5f97\u5de6\u513f\u5b50(\u7b49\u540c\u4e8ereturn x*2;)\nint rs(int x){return x<<1|1;}//\u4f4d\u8fd0\u7b97\u52a0\u901f\u83b7\u5f97\u53f3\u513f\u5b50(\u7b49\u540c\u4e8ereturn x*2+1;)\nvoid add(int uu,int vv,int value)//\u94fe\u5f0f\u524d\u5411\u661f\u6807\u51c6\u64cd\u4f5c\n{\n\ttot++;\n\te[tot].to=vv;\n\te[tot].v=value;\n\te[tot].la=st[uu];\n\tst[uu]=tot;\n}\nvoid update(int x)//\u7a0d\u5fae\u4fee\u6539\u8fc7\u7684update\n{\n\tif (t[ls(x)].m<t[rs(x)].m)//\u6bd4\u8f83\u5de6\u53f3\u513f\u5b50\u7684\u6700\u5c0f\u503c\n\t{\n\t\tt[x].m=t[ls(x)].m;//\u5982\u679c\u5de6\u5b50\u533a\u95f4\u7684\u6700\u5c0f\u503c\u5c0f\n\t\tt[x].w=t[ls(x)].w;//\u5219\u5f53\u524d\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u662f\u5de6\u5b50\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n\t}\n\telse\n\t{\n\t\tt[x].m=t[rs(x)].m;//\u5982\u679c\u53f3\u5b50\u533a\u95f4\u7684\u6700\u5c0f\u503c\u5c0f\n\t\tt[x].w=t[rs(x)].w;//\u5219\u5f53\u524d\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u662f\u53f3\u5b50\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n\t}\n}\nvoid add(int l,int r,int x,int y,int z,int now)//\u4fee\u6539\u503c\n{\n\tif (l>=x && r<=y)\n\t{\n\t\tt[now].m=z;\n\t\treturn;\n\t}\n\tif (r<x || l>y) return;\n\tint mid=(l+r)>>1;\n\tadd(l,mid,x,y,z,ls(now));\n\tadd(mid+1,r,x,y,z,rs(now));\n\tupdate(now);\n}\nvoid build(int l,int r,int now)//\u5efa\u6811\n{\n\tif (l==r)\n\t{\n\t\tt[now].m=dis[l];\n\t\tt[now].w=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls(now));\n\tbuild(mid+1,r,rs(now));\n\tupdate(now);\n}\nvoid dij()//Dijkstra\n{\n\tint cnt=0;\n\twhile (cnt<n-1)\n\t{\n\t\tint mn=t[1].m,mnl=t[1].w;\n\t\tadd(1,n,mnl,mnl,2147483647,1);//\u6269\u6563\u8fc7\u7684\u70b9\u4e0d\u80fd\u8fdb\u884c\u518d\u6269\u6563\n\t\tbz[mnl]=1;\n\t\tfor (int i=st[mnl];i!=-1;i=e[i].la)//\u6807\u51c6Dijkstra\u6253\u6cd5\n\t\t{\n\t\t\tif (dis[e[i].to]>dis[mnl]+e[i].v)\n\t\t\t{\n\t\t\t\tdis[e[i].to]=dis[mnl]+e[i].v;\n\t\t\t\tif (bz[e[i].to]==0) add(1,n,e[i].to,e[i].to,dis[e[i].to],1);\n\t\t\t\t//\u6211\u61d2\uff0c\u6240\u4ee5\u628a\u533a\u95f4\u4fee\u6539\u7684\u61d2\u6807\u8bb0\u5220\u9664\u540e\u5f04\u6210\u4e86\u7c7b\u4f3c\u5355\u70b9\u4fee\u6539\u7684\u4e1c\u4e1c\n\t\t\t}\t\n\t\t}\n\t\tcnt++;\n\t}\n}\nint main()\n{\n\tn=read(),m=read(),s=read();\n\tmemset(st,-1,sizeof st);\n\tmemset(dis,0x3f,sizeof dis);\n\tdis[s]=0;\n\tbuild(1,n,1);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\ta=read(),b=read(),c=read();\n\t\tadd(a,b,c);\n\t}\n\tdij();\n\tfor (int i=1;i<=n;i++) write(dis[i]),putchar(' ');\n\treturn 0;//\u7ed3\u675f\u4e86\n}\n```\n\n",
        "postTime": 1548406697,
        "uid": 79131,
        "name": "Silvermoon",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "Update: 2018-10-20\n\n\u66f4\u65b0\u4e00\u6ce2\u9898\u89e3\u3002\n\nDijkstra\u662f\u76ee\u524d\u8dd1\u7684\u6700\u5feb\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u3002\n\nDijkstra\u7684\u9002\u7528\u8303\u56f4\uff1a\u6ca1\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u3002\n\n\u4f7f\u7528\u5806\u4f18\u5316\u7684Dijkstra\u65f6\u95f4\u590d\u6742\u5ea6~~\u5927\u7ea6\u7684\u786e\u662f~~$O((m+n)\\log{n})$\u3002\u5982\u6709\u4e0d\u540c\u610f\u89c1\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u7559\u8a00\u3002\n\nDijkstra\u7b97\u6cd5\u7684\u5b9e\u8d28\u662f\u8d2a\u5fc3\uff0c\u901a\u8fc7\u5f53\u524d\u5df2\u7ecf\u6c42\u5f97\u6700\u77ed\u8def\u7684\u8282\u70b9\u53bb\u677e\u5f1b\u5176\u4ed6\u8282\u70b9\uff0c\u4ece\u800c\u6c42\u5f97\u6700\u77ed\u8def\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u6f14\u793a\u52a8\u753b\uff0c\u5e2e\u52a9\u7406\u89e3Dijkstra\u7b97\u6cd5\u7684\u539f\u7406\u3002\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Dijkstra_Animation.gif/220px-Dijkstra_Animation.gif)\n\n(\u56fe\u7247\u6765\u81eaWikipedia)\n\n\u672c\u7bc7\u9898\u89e3\u4f7f\u7528\u4e86\u6307\u9488\u5f0f\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u5bf9\u7167\u4e0b\u9762\u7684\"\u7ffb\u8bd1\"\u3002\n\n~~\u8334\u9999\u8c46~~**\u524d\u5411\u661f**\u6709\u56db\u79cd\u5199\u6cd5\n\n```cpp\n// \u7248\u672c1:\n// \u5b9a\u4e49:\nstruct edge { edge* nxt = NULL; int to, w; }e[M << 1], *h[M];\n// h[]\u662f\u5934\u6307\u9488\uff0ce[]\u5b58\u8fb9\n// \u52a0\u8fb9:\ninline void add_edge(int u, int v, int w) {\n\te[++tot].nxt = h[u];\n    h[u] = e + tot;\n    h[u] -> to = v, h[u] -> w = w;\n}\n// \u904d\u5386:\nfor(edge* i = h[x]; i != NULL; i = i -> nxt) {\n\ti -> to // \u8fde\u63a5\u5230\u7684\u70b9\n    i -> w // \u8fb9\u6743\n}\n// \u7248\u672c2:\n// \u6570\u7ec4\u7248\nint h[maxn], nxt[maxn], to[maxn], w[maxn], tot;\nvoid add_edge(int u, int v, int wi) {\n\tnxt[++tot] = h[u];\n   \tto[tot] = v;\n    w[tot] = wi;\n    h[u] = tot;\n}\nfor(int i = h[x]; i; i = nxt[i]) {\n\tto[i] // \u8fde\u63a5\u5230\u7684\u70b9\n    w[i] // \u8fb9\u6743\n}\n// \u7248\u672c3:\n// \u7ed3\u6784\u4f53\nstruct edge {int nxt, to, w;}e[maxn];\nint h[maxn], tot;\nvoid add_edge(int u, int v, int w) {\n\te[++tot] = (edge) {h[u], v, w};\n    h[u] = tot;\n}\nfor(int i = h[x]; i; i = e[i].nxt) {\n\te[i].to // \u8fde\u63a5\u5230\u7684\u70b9\n   \te[i].w // \u8fb9\u6743\n}\n\n```\n\n======\u4ee5\u4e0b\u4e3a\u66f4\u65b0\u524d\u5185\u5bb9=======\n\n\u600e\u4e48\u5168\u90fd\u7528\u4f18\u5148\u961f\u5217\uff08~~\u6b3a\u8d1f\u6211STL\u5b66\u7684\u5dee~~\uff09\n\n\u6211\u6765\u53d1\u4e00\u4e2a **\u624b\u5199\u5806 + \u6307\u9488\u7248\u94fe\u5f0f\u524d\u5411\u661f**\u7684\u9898\u89e3\uff0c\u6765\u7167\u987eSTL\u6ca1\u6709\u5b66\u597d\u7684dalao\u4eec\u3002\n\n**\u5173\u4e8e\u5806\u4f18\u5316Dijkstra\uff0c\u5927\u5bb6\u4e00\u5b9a\u5f88\u719f\u6089\uff0c\u5c31\u4e0d\u591a\u505a\u4ecb\u7ecd\u4e86**\n\n\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\u65f6\u95f4\n\n```cpp\n#include <bits/stdc++.h>\n// \u4e0b\u9762\u662f\u8ddf\u522b\u4eba\u5b66\u7684\u5feb\u8bfb\u5feb\u5199\n#define gr() (S == T && (T = (S = BB) + fread(BB, 1, 1<<15, stdin), S == T) ? EOF : *S++)\nchar BB[1 << 20], *S = BB, *T = BB;\n// fread & fwrite \u8dd1\u5f97\u5feb\ninline int read() {\n\tchar c;\n\twhile(!isdigit(c = gr())); int x = c ^ 48;\n\twhile(isdigit(c = gr())) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn x;\n}\nchar pbuf[10000000], *pp = pbuf;\ninline void write(int x) {\n\tstatic int sta[35];\n\tregister int top = 0;\n\tif(!x) sta[++top] = 0;\n\twhile(x) sta[++top] = x % 10, x /= 10;\n\twhile(top) *pp++ = sta[top--] ^ 48;\n}\nconst int M = 1e5 + 5;\nint n, m, s, tot, d[M], t;\n// edge \u524d\u5411\u661f\nstruct edge { edge* nxt = NULL; int to, w; }e[M << 1], *h[M];\n// node \u5f80\u5806\u91cc\u653e\u7528 \u4e8c\u5143\u7ec4 \u5b58\u8fb9\u6743\u548c\u7f16\u53f7\nstruct node { int w, id; };\n// \u91cd\u8f7d\u5c0f\u4e8e\u53f7\nint operator <(node a, node b) { return a.w < b.w; }\n// \u624b\u5199\u5806\nnamespace heap {\n\tnode hp[M << 1]; // \u4e00\u4e2a\u5c0f\u6839\u5806\n\tint sum;\n    // \u76f8\u5f53\u4e8e\u4f18\u5148\u961f\u5217\u7684push\n\tinline void push(node x) {\n\t\thp[++sum] = x;\n\t\tfor(int i = sum, j = i >> 1; j; i = j, j = i >> 1)\n\t\t\tif(hp[i] < hp[j]) std::swap(hp[i], hp[j]);\n\t}\n    // \u76f8\u5f53\u4e8e\u4f18\u5148\u961f\u5217\u7684pop\n\tinline void pop() {\n\t\thp[1] = hp[sum--];\n\t\tfor(int i = 1, j = i << 1; j <= sum; i = j, j = i << 1) {\n\t\t\tif(j + 1 <= sum && hp[j + 1] < hp[j]) ++j;\n\t\t\tif(hp[i] < hp[j]) break;\n\t\t\telse std::swap(hp[i], hp[j]);\n\t\t}\n\t}\n    // \u76f8\u5f53\u4e8e\u4f18\u5148\u961f\u5217\u7684top\u548csize\n\tinline node top() { return hp[1]; }\n\tinline int size() { return sum; }\n}\n// \u52a0\u8fb9 \u5355\u5411\u8fb9\ninline void add_edge(int u, int v, int w) {\n\te[++tot].nxt = h[u], h[u] = e + tot, h[u] -> to = v, h[u] -> w = w;\n}\n// \u5806\u4f18\u5316dij \uff08\u867d\u7136\u51fd\u6570\u540d\u53ebspfa\uff09\ninline void spfa() {\n\theap::push((node) {0, s}); // \u628a\u6e90\u70b9\u6254\u8fdb\u5806\u91cc\n\tmemset(d, 0x7f, sizeof(d)); // \u8d4b\u521d\u503cINF\n\td[s] = 0; // \u8d4b\u521d\u503c s\u5230s\u7684\u8ddd\u79bb\u4e3a0\n\twhile(heap::size()) { // \u5806\u4e0d\u7a7a\n\t\tnode now = heap::top(); // \u53d6\u5806\u9876\n\t\theap::pop(); // \u5f39\u5806\n\t\tint x = now.id;\n\t\tif(now.w ^ d[x]) continue; // ^ \u548c != \u4e00\u6837\n\t\tfor(edge* i = h[x]; i != NULL; i = i -> nxt)\n\t\t\tif(d[i -> to] > d[x] + i -> w) {\n\t\t\t\td[i -> to] = d[x] + i -> w; // \u677e\u5f1b\u64cd\u4f5c\n\t\t\t\theap::push((node) {d[i -> to], i -> to});\n\t\t\t}\n\t}\n}\nint main() {\n\tn = read(), m = read(), s = read();\n\tfor(register int i = 1, x, y, z; i <= m; ++i) {\n\t\tx = read(), y = read(), z = read();\n\t\tadd_edge(x, y, z); // \u52a0\u5355\u5411\u8fb9\n\t}\n\tspfa(); // \u6700\u77ed\u8def\u8d70\u8d77\n\tfor(register int i = 1; i <= n; ++i)\n\t\twrite(d[i]), *pp++ = ' ';\n\tfwrite(pbuf, 1, pp - pbuf, stdout); // fwrite\u8dd1\u7684\u5feb\n\treturn 0;\n}\n```\nAccepted\n\u7528\u65f6152ms\n\n\n**\u5173\u4e8espfa \u4ed6\u6b7b\u4e86**\n\n~~\uff08\u8fd9\u5e74\u5934\u8d39\u7528\u6d41\u90fd\u80fd\u7528Dijkstra\u8dd1\uff09~~",
        "postTime": 1538819368,
        "uid": 52082,
        "name": "Delta_Rain",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5806\u4f18Dij\uff09 \u9898\u89e3\n\n## \u9898\u610f\u5206\u6790\n\n\u7ed9\u51fan\u3001m\u3001s\uff0c\u548cm\u6761**\u6709\u5411\u8fb9**\uff0c\u4fdd\u8bc1\u8fd9\u4e2as\u70b9\u80fd\u591f\u5230\u8fbe\u8fd9\u5f20\u56fe\u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\nn\u4ee3\u8868\u8fd9\u5f20\u56fe\u4e0a\u70b9\u7684\u6570\u91cf\uff0cm\u4ee3\u8868\u8fd9\u5f20\u56fe\u4e0a\u8fb9\u7684\u6570\u91cf\uff0cs\u4ee3\u8868\u6e90\u70b9\uff08\u5728\u8fd9\u9898\u91cc\u9762\uff0cs\u6c38\u8fdc\u7b49\u4e8e1\uff09\n\n\u968f\u540e\u7ed9\u51fa\u7684**\u6709\u5411\u8fb9**\uff0c\u6709u\u3001v\u3001w\uff0c\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u8ddd\u79bb\u3002\n\n**\u6c42\u6e90\u70b9s\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff08\u81ea\u5df1\u5230\u81ea\u5df1\u662f0\uff09**\n\n$n\\leq 100000,m\\leq 200000,\\sum{w[i]}\\leq10^9$\u3002\n\n**spfa\u88ab\u5361\u3002**\n\n## \u89e3\u9898\u601d\u8def\n\nSPFA\u4e0d\u80fd\u901a\u8fc7\uff0c\u6240\u4ee5\u8f6c\u5411Dijkstra\u3002\u4f46\u662fDijkstra\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u9ad8\u8fbe$O(n^2)$\uff0c\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u5b83\u901a\u8fc7\u8fd9\u4e2a100000\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u6709\u4e86\u201c\u5806\u4f18Dijkstra\u201d\u3002\n\n- Prob.1 \u5806\u4f18Dijkstra\u662f\u4ec0\u4e48\uff1f\n  - \u548c\u666e\u901a\u7684Dijkstra\u539f\u7406\u4e0a\u76f8\u540c\uff0c\u90fd\u662f\u4ece\u539f\u70b9\u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u3002\n  - \u5806\u4f18Dijkstra\u7684\u4e0d\u540c\u5728\u4e8e\uff0c\u6bcf\u6b21Dijkstra\u5728\u9009\u62e9bfs\u4e0b\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u80fd\u5f88\u5feb\u627e\u51fa\u201c\u8ddd\u79bb\u6700\u5c0f\u201d\u7684\u90a3\u4e2a\u70b9\u3002\n\n- Prob.2 **\u5806**\u4f18\u81f4\u529b\u4e8e\u5b9e\u73b0\u4ec0\u4e48\uff1f\uff08\u5f04\u5806\u6765\u5e72\u561b\uff1f\uff09\n\n  - \u4f8b\u5b50\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/sg7ejnln.png)\n  - \u4f8b\u5982\u73b0\u5728A\u662f\u6e90\u70b9\u3002\n  - \u70b9A\u5230B\u7684\u8fde\u8fb9\u8ddd\u79bb\u4e3a2\uff0c\u70b9A\u5230C\u7684\u8fde\u8fb9\u8ddd\u79bb\u4e3a1\u3002\n  - \u5219\u4ece\u6e90\u70b9\u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u904d\u5386\u7684\u6709B\u548cC\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u8bb0\u5f55\u67092\u79cd\u72b6\u6001\uff0c\u201c\u6e90\u70b9\u5230\u8be5\u70b9\u201d\u7684\u8ddd\u79bb\u5206\u522b\u662f0+2\u548c0+1\uff0c\u8fd9\u91cc\u76840\u4ee3\u8868\u7684\u662fdis[A]\uff0c**\u4ee5\u540e\u4ece\u4e00\u4e2a\u70b9\u5bbd\u5ea6\u904d\u5386\u5230\u522b\u7684\u70b9\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u5148\u7528dis[\u8fd9\u4e2a\u70b9]\u52a0\u5230\u76ee\u6807\u70b9\u7684\u8fb9\u7684\u8ddd\u79bb\u3002\u4f8b\u5982\u4ece\u6e90\u70b9\u5230X\u70b9\u7684dis\u662f10000\uff0cX\u5230Y\u70b9\u7684\u8fde\u8fb9\u8ddd\u79bb\u662f10000\uff0c\u5219(Y,10000+10000)\u8fd9\u4e2a\u72b6\u6001\u88ab\u8bb0\u5f55\u3002**\n  - \u4e8e\u662f(B,2)\u548c(C,1)\u88ab\u8ba1\u5165\u72b6\u6001\u4e2d\uff0c\u5206\u522b\u4ee3\u8868\u201c\u6e90\u70b9\u5230B\u70b9\u7684\u4e00\u4e2a\u8ddd\u79bb\u65b9\u6848\u662f2\u201d\u201c\u6e90\u70b9\u5230C\u70b9\u7684\u4e00\u4e2a\u8ddd\u79bb\u65b9\u6848\u662f3\u201d\u3002\n  - \u6309\u7167\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u4ece\u6700\u77ed\u7684\u5f00\u59cb\u8d70\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2abfs\u7684\u72b6\u6001\u4f1a\u662f(C,1)\u3002\n  - \u800c\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u72b6\u6001\u88ab\u538b\u5165bfs\u72b6\u6001\u6570\u7ec4\uff0c\u627e\u5230\u201c\u6e90\u70b9\u5230x\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u201d\u4f1a\u53d8\u5f97\u5f88\u56f0\u96be\uff0c**\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u5806**\u6765\u76f4\u63a5\u62ff\u51fa\u6bcf\u6b21**\u201c\u6e90\u70b9\u5230x\u70b9\u8ddd\u79bb\u6700\u77ed\u7684\u201d**\u3002\n\n- Prob.3 \u600e\u4e48\u5b9e\u73b0\u5806\u4f18Dij\u5462\uff1f\n\n  - \u548c\u4e00\u822c\u7684bfs\u51e0\u4e4e\u4e00\u6837\uff0c\u5148\u5c06\u6e90\u70b9\u653e\u5165\u72b6\u6001\u6570\u7ec4\uff0c\u63a5\u4e0b\u6765\u5047\u8bbeA\u662f\u6e90\u70b9\uff0c\u901a\u8fc7\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u8be6\u7ec6\u89e3\u6790\u4e00\u4e0b\u3002\n\n  - | \u6267\u884c\u6b65\u9aa4                                                     | \u72b6\u6001\u6570\u7ec4   |\n    | ------------------------------------------------------------ | ---------- |\n    | \u6e90\u70b9A\u88ab\u538b\u5165\u72b6\u6001\u6570\u7ec4                                          | (A,0)      |\n    | \u6e90\u70b9A\u662f\u5806\u5934\uff0c\u88ab\u5f39\u51fa\uff1b\u904d\u5386\u5230B\u3001C\u70b9\u88ab\u538b\u5165\u72b6\u6001\u6570\u7ec4(dist[B]=2,dist[C]=1) | (C,1)(B,2) |\n    | (C,1)\u662f\u5806\u5934\uff0c\u88ab\u5f39\u51fa\uff1b\u904d\u5386\u5230D\u70b9\u88ab\u538b\u5165\u72b6\u6001\u6570\u7ec4(dist[D]=4)      | (B,2)(D,4) |\n    | (B,2)\u662f\u5806\u5934\uff0c\u88ab\u5f39\u51fa\uff1b\u904d\u5386\u5230D\u70b9\u88ab\u538b\u5165\u72b6\u6001\u6570\u7ec4(dist[D]\u4ece4\u88ab\u66f4\u65b0\u52303)**\uff08\u8bf7\u6ce8\u610f\u6b64\u5904\u7684\u72b6\u6001\u6570\u7ec4\uff09** | (D,3)(D,4) |\n    | (D,3)\u662f\u5806\u5934\uff0c\u88ab\u5f39\u51fa\uff1b\u5b83\u6ca1\u6709\u8fde\u7740\u4efb\u4f55\u70b9\u3002                      | (D,4)      |\n    | (D,4)\u662f\u5806\u5934\uff0c\u88ab\u5f39\u51fa\uff1b\u5b83\u6ca1\u6709\u8fde\u7740\u4efb\u4f55\u70b9\u3002                      | --         |\n    \n- \u8fd9\u6837\u7684bfs\u662f\u4e0d\u96be\u5199\uff0c\u6574\u7406\u4e00\u756a\u601d\u8def\u540e\u5f88\u5feb\u5c31\u80fd\u5f97\u51fa\u7a0b\u5e8f\u6838\u5fc3\u90e8\u5206\u3002\n  \n- ```cpp\n    q.push(\u6e90\u70b9\uff0c0);\n    while(!q.empty())\n    \t{\n        \t\u62ff\u51fa\u5806\u5934\uff0c\u4e34\u65f6\u653e\u5728x;\n        \tint u=x.first;//\u6e90\u70b9\u7f16\u53f7\u627e\u51fa\u6765\n        \t\u5806\u5934\u88ab\u5f39\u51fa;\n        \tfor(int i\u2208\u5806\u5934\u90a3\u4e2a\u70b9\u80fd\u53bb\u7684\u6240\u6709\u70b9)\n            \t{\n                \tint v=e[i].EndPoint;//\u8981\u53bb\u7684\u70b9\u7f16\u53f7\u627e\u51fa\u6765\n                \tint w=e[i].Value;//\u6e90\u70b9 \u5230 \u8981\u53bb\u7684\u70b9\u7684\u8fb9\u8ddd\u79bb\u627e\u51fa\u6765\n                \tif(dis[u]+w<dis[v])\n                    \t{\n                        \tdis[v]=dis[u]+w;\n                        \tq.push(v,dis[u]+w);\n    \t\t\t\t\t}\t\n                        //\u677e\u5f1b\u5927\u5bb6\u90fd\u4f1a\n    \t\t\t}\n    \t}\n    ```\n  \n- \u73b0\u5728\u8bf7\u56de\u5934\u770b\u4e0a\u9762\u90a3\u4e2a\u5730\u65b9\u52a0\u7c97\u6807\u8bb0\u7684\u72b6\u6001\u6570\u7ec4\u3002\u6709\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u5730\u65b9\u4e0d\u5bf9\uff1f\u8fd9\u91cc\u51fa\u73b0(D,3)(D,4)\u7684\u539f\u56e0\uff0c\u5176\u5b9e\u662f\u6211\u4eec\u5728(D,3)(D,4)\u540c\u65f6\u51fa\u73b0\u65f6\u6ca1\u6709\u628a(D,4)\u8fd9\u4e2a\u72b6\u6001\u5220\u9664\u6389\uff0c\u540c\u6837\u90fd\u662f**\u6e90\u70b9\u5230\u8fd9\u4e2a\u70b9**\uff0c\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u8ddd\u79bb\u662f\u8d8a\u5c0f\u8d8a\u597d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u4e2a(D,4)\uff0c\u7406\u5e94\u5c06\u5176\u5220\u9664\uff0c\n  \n- \u4f46\u662f\u6211\u4eec\u5982\u679c\u8981\u63ea\u51fa\u8fd9\u4e2a\u70b9\uff0c\u628a\u5b83\u5220\u4e86\uff0c\u7740\u5b9e\u662f\u8d39\u65f6\u95f4\u3002\n  \n- \u6211\u4eec\u4ece\u7a0b\u5e8f\u7684\u8fd0\u884c\u8fc7\u7a0b\u4e86\u89e3\u5230\u2014\u2014dis[D]\u5728\u4e24\u4e2a\u72b6\u6001(D,3)(D,4)\u8fd8\u6ca1\u5f00\u59cbbfs\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u662f3\u3002\n  \n- \u90a3\u4e48\u53ea\u8981\u6bcf\u6b21bfs\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e0b\u5806\u5934\u8fd9\u4e2a\u70b9\uff08\u4e5f\u5c31\u662f3,4\uff09\u662f\u5426\u5927\u4e8edis[D]\uff0c\u5982\u679c\u5927\u4e8edis[D]\uff0c\u5c31\u4e0d\u80fd\u8ba9\u5b83\u7ee7\u7eeddfs\u3002\n  \n- \u5177\u4f53\u5b9e\u73b0\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a\n  \n- ```cpp\n    if(x.d>dis[u])//x\u662f\u6211\u4eec\u53d6\u51fa\u6765\u7684\u5806\u5934\uff0cu\u4ee3\u8868\u5806\u5934x\u7684\u70b9\u7f16\u53f7\u3002\n    \tcontinue;\n    //\u9632\u6b62\u52a3\u503c\u66ff\u6362\u4f18\u503c\n    ```\n    \n  - **\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u5e76\u4e0d\u4f1a\u8ba9\u4f60WA\uff0c\u4f46\u662f\u5f88\u5bb9\u6613TLE\u3002**\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4e0d\u526a\u679d\u7684\u8bdd \u4e0b\u9762\u90a3\u4e2a\u6839\u672c\u65e0\u7528\u7684for\u5faa\u73af\u4ecd\u5728\u8fd0\u884c\uff0c\u5b83\u5728\u538b\u5165\u65e0\u7528\u7684\u72b6\u6001\u5230\u5806\u91cc\uff08\u56e0\u4e3a\u8fd9\u4e9b\u72b6\u6001\u6839\u672c\u518d\u600e\u4e48bfs\u4e5f\u66f4\u65b0\u4e0d\u4e86\u7b54\u6848\uff0c\u4e0d\u662f\u5417\uff1f\uff09\n  \n- Prob.4 \u53ef\u6709\u53ef\u65e0\u7684\u4e1c\u897f\uff1a**\u94fe\u5f0f\u524d\u5411\u661f**\u66ff\u4ee3vector\u5b9e\u73b0\u94fe\u8868\n\n  - \u5f53\u6211\u4eec\u60f3\u5feb\u901f\u5efa\u56fe\u627e\u51fa\u4e00\u4e2a\u70b9\u8fde\u7740\u591a\u5c11\u6761\u8fb9\uff0c\u61d2\u7684\u65f6\u5019\u6211\u90fd\u7528\u7684vector\u3002\n\n  - \u5982\u4e0b\u968f\u4fbf\u4e00\u4e2a\u56fe\uff1a\n\n  - | G[A] | B    | C    |\n    | ---- | ---- | ---- |\n    | G[B] | D    | --   |\n    | G[C] | D    | --   |\n    | G[D] | E    | --   |\n    | G[E] | --   | --   |\n\n  - \u50cf\u8fd9\u6837\u7b2c\u4e00\u5217\u4ee3\u8868\u6bcf\u4e2a\u70b9\uff0c\u7136\u540e\u53f3\u8fb9\u7684\u6bcf\u4e2a\u6570\u4ee3\u8868\u5b83\u80fd\u8fde\u63a5\u5230\u54ea\u4e9b\u8fb9\uff0c\u76f4\u63a5\u5f04vector G[\u70b9\u6570];\n\n  - \u8fd9\u662f\u9ad8\u624b\u4e0d\u5c51\u4e8e\u4f7f\u7528\u7684\uff0c\u5946\u4f6c\u8ba4\u4e3a\u94fe\u5f0f\u524d\u5411\u661f\u53ef\u4ee5\u505avector\u505a\u4e0d\u5230\u7684\u4e8b\u60c5\u3002\n\n  - \u5176\u5b9e\u94fe\u5f0f\u524d\u5411\u661f\u662f\u4e0d\u592a\u56f0\u96be\u7684\uff08\u4f46\u662f\u6211\u5f88\u8ba8\u538c\uff09\uff0c\u65e0\u975e\u662f\u5bf9\u4e8e\u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5c31\u597d\u50cfA\u80fd\u8fde\u63a5\u5230B\u3001C\u3002\u6211\u4eec\u5c31\u628aC\u8ddfB\u8fde\uff0cB\u8ddfA\u8fde\u3002\u5982\u679c\u6211\u4eec\u8981\u904d\u5386\u4e00\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8fb9\uff0c\u53ea\u9700\u8981\u5f00\u4e2afront\u6570\u7ec4\u2026\u2026\n\n    - front\u6570\u7ec4\u662f\u4ec0\u4e48\uff1f\n\n      - \u5047\u5982\u6211\u4eec\u8981\u904d\u5386\u8ddfA\u8fde\u7740\u7684\u6240\u6709\u8fb9\uff0c\u524d\u9762\u8bf4\u94fe\u5f0f\u524d\u5411\u661f\u5df2\u7ecf\u5c06**C\u8ddfB\u8fde\uff0cB\u8ddfA\u8fde**\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8bb0\u4f4f\u90a3\u4e2a\u201cC\u201d\u7684\u4f4d\u7f6e\u3002\n\n      - \u6240\u4ee5front[\u70b9\u6570]\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u70b9\u8fde\u63a5\u7684\u201c\u6700\u540e\u4e00\u4e2a\u70b9\u201d\u662f\u54ea\u4e00\u4e2a\u70b9\u3002\u904d\u5386\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5\u4ece\u201c\u6700\u540e\u4e00\u4e2a\u70b9\u201d\u5f00\u59cb\u5f80\u524d\u8df3\u8f6c\u3002\n\n      - \uff08\u5c0f\u7ec6\u8282\uff09\u8df3\u8f6c\u5230\u6700\u540e\uff0c\u5b83\u7ec8\u7a76\u4f1a\u8df3\u8f6c\u5b8c\uff0c\u4e0d\u80fd\u518d\u8df3\u8f6c\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u7a0b\u5e8f\u4e00\u5f00\u59cb\u7684\n\n      - ```cpp\n        memset(front,-1,sizeof(front));\n        ```\n\n      - \u5c31\u663e\u5f97\u975e\u5e38\u91cd\u8981\u3002\u904d\u5386\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5224\u65ad\u5f53\u524d\u8fb9\u662f\u5426\u662f-1\u5c31\u53ef\u3002\n\n    - \u94fe\u5f0f\u524d\u5411\u661f\u904d\u5386\u548c\u666e\u901avector\u904d\u5386\u7684\u533a\u522b\n\n      - \u5047\u5982\u73b0\u5728\u8fd9\u4e2a\u70b9\u662fu\u70b9\u3002\n\n      - \u94fe\u5f0f\u524d\u5411\u661f\uff1a\n\n      - ```cpp\n        for(int i=front[u];i>0;i=e[i].next)\n            {\n                int v=e[i].to;\n                int w=e[i].value;\n                //\u6ce8\u610f\u8fd9\u91cc\u80fd\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff1a\u4e0d\u65ad\u66f4\u6362\u7740\u7684i\u76f4\u63a5\u4ee3\u8868\u7740\u8fb9\u7f16\u53f7\u3002\n                if(dis[u]+w<dis[v])\u2026\u2026\n            }\n        ```\n\n      - \u4e3a\u4e86\u8ba9\u4e0d\u65ad\u66f4\u6362\u7740\u7684i\u662f\u8fb9\u7684\u7f16\u53f7\uff0c\u6211\u4eec\u9700\u8981\u8fd9\u6837\u52a0\u8fb9\uff1a\n\n      - ```cpp\n        void add(int u,int v,int w)\n        {\n        \tedg_cnt++;\n        \te[edg_cnt].to=v;\n        \te[edg_cnt].value=w;\n        \te[edg_cnt].next=front[u];\n            //\u8ddf\u4e0a\u4e00\u4e2a\u8fb9\u8fde\u8fb9\n        \tfront[u]=edg_cnt;\n            //\u66f4\u6362front\uff0cfront\u53d8\u4e3a\u201c\u8fb9\u7f16\u53f7\u201d\uff08\u4e3a\u4e86\u8ba9\u904d\u5386\u65f6\u7684i\u662f\u201c\u8fb9\u7f16\u53f7\u201d\uff0cfront\u53d8\u4e3a\u201c\u8fb9\u7f16\u53f7\u201d\u5f88\u91cd\u8981\uff09\n        }\n        ```\n\n      - vector\uff1a\n\n      - ```cpp\n        for(int i=0;i<G[u].size();i++)\n        \t{\n            \tint v=G[u][i].to;\n            \tint w=G[u][i].value;\n            \tif(dis[u]+w<dis[v])\u2026\u2026\n        \t}\n        ```\n\n## \u53c2\u8003\u7a0b\u5e8f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct OneEdge\n{\n\tint to,value,next;\n} e[500005];\nint edg_cnt,front[110005];\nint n,edg,source;\n\nvoid add(int u,int v,int w)\n{\n\tedg_cnt++;\n\te[edg_cnt].to=v;\n\te[edg_cnt].value=w;\n\te[edg_cnt].next=front[u];\n\tfront[u]=edg_cnt;\n\t//\u94fe\u5f0f\u524d\u5411\u661f\u5f0f\u5efa\u8fb9 \n}\n\nstruct Heap\n{\n\tint u,d;//\u53f7\u7801\u3001\u8ddd\u79bb \n};\n\npriority_queue<Heap> q;\nbool operator < (const Heap& now,const Heap& rhs)\n{\n\treturn now.d>rhs.d;\n}\n//\u7528pq\u5f04\u5c0f\u6839\u5806\u9700\u8981\u91cd\u5b9a\u4e49\u5c0f\u4e8e\u53f7\u3002\n\nint dis[100005];\nvoid dij()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=2147483647;\n\tdis[source]=0;\n\t//\u5148\u628a\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927\uff0c\u7136\u540e\u628a\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u8bbe\u4e3a0\n    \n\tq.push((Heap){source,dis[source]});\n\twhile(!q.empty())\n\t\t{\n\t\t\tHeap x=q.top();\n\t\t\tq.pop();\n\t\t\tint u=x.u;\n        \t//\u5148\u53d6\u51fa\u5f53\u524d\u70b9\n\t\t\t\n\t\t\tif(x.d>dis[u])\n\t\t\t\tcontinue;\n\t\t\t//\u9632\u6b62\u52a3\u503c\u66ff\u6362\u4f18\u503c \n\t\t\t\n\t\t\tfor(int i=front[u];i>0;i=e[i].next)\n\t\t\t\t{\n\t\t\t\t\tint v=e[i].to;\n\t\t\t\t\tint w=e[i].value;\n                \t  //\u786e\u5b9a\u4e0b\u4e00\u4e2a\u8981\u53bb\u7684\u70b9\u662f\u54ea\u4e2a\u70b9\uff0c\u4ee5\u53ca\u53bb\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\n\t\t\t\t\tif(dis[u]+w<dis[v])\n                      \t  //\u677e\u5f1b\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\t\t\t\tq.push((Heap){v,dis[v]});\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n}\nint main()\n{\n\tmemset(front,-1,sizeof(front));\n    //\u4e3a\u4e86\u904d\u5386\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u8ba9\u904d\u5386\u5728\u201c\u65e0\u8def\u53ef\u8d70\u201d\u65f6\u505c\u6b62\uff0c\u6211\u4eec\u8981\u8ba9\u6700\u540e\u4e00\u4e2a\u70b9\u8fde\u63a5\u7ed9-1\n    \n\tscanf(\"%d%d%d\",&n,&edg,&source);\n\tint u,v,w;\n\tfor(int i=1;i<=edg;i++)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\t\tadd(u,v,w);\n\t\t\t//\u6709\u5411\u8fb9\t\n    \t}\n\tdij();\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dis[i]);\n\treturn 0;\n} \n\n```",
        "postTime": 1569734811,
        "uid": 30391,
        "name": "milk_candy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5982\u679c\u4f60\u6ca1\u6709\u5b66\u4e60\u8fc7\u5806\u4f18\u5316\u7684dij\u7b97\u6cd5\uff0c\u4e0d\u5efa\u8bae\u770b\u6b64\u7bc7\u9898\u89e3\n\n\u771f\u6b63\u7684dij\u7b97\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u4f18\u5316\u7684dij\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662fO\uff08m+nlogn\uff09\uff0c\u7136\u800c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684dij\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662fO\uff08(n+m)logm)\n\n\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684STL\u4e2d\u7684\u4e8c\u53c9\u5806\u63d2\u5165\u64cd\u4f5c\u662flog\u7ea7\u522b\u7684\uff0c\u800c\u4e14\u8fd8\u4e0d\u652f\u6301\u4fee\u6539\u67d0\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5806\u4e2d\u6709\u5f88\u591a\u65e0\u7528\u7684\u5143\u7d20\uff0c\u800c\u4e14\u4f1a\u6709\u5f88\u591a\u65e0\u7528\u7684pop\u64cd\u4f5c\uff0c\u5f92\u589e\u4e86\u590d\u6742\u5ea6\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u652f\u6301\u4fee\u6539\u6743\u503c\u7684\uff0c\u5feb\u901f\u63d2\u5165\u7684\u5806\uff0c\u914d\u5bf9\u5806\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\n\u914d\u5bf9\u5806\u7684\u63d2\u5165\u590d\u6742\u5ea6\u662f\u4e25\u683cO(1),pop\u590d\u6742\u5ea6\u662f\u5747\u644aO(log),\u4fee\u6539\u6743\u503c\u7684\u64cd\u4f5c\u6bd4\u8f83\u7384\u5b66\uff0c\u5b66\u672f\u754c\u597d\u50cf\u6ca1\u6709\u5b9a\u8bba\uff0c\u5927\u6982\u6bd4O\uff08logn\uff09\u8981\u5c0f\u4e00\u4e9b\u3002\n\n\u914d\u5bf9\u5806\u7684\u539f\u7406\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u8bb2\u89e3\uff0c\u6709\u5174\u8da3\u7684dalao\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\n\nc++\u4e2d\u7684pbds\u5e93\u5c01\u88c5\u4e86\u73b0\u6210\u7684\u914d\u5bf9\u5806\uff0c\u5177\u4f53\u7528\u6cd5\u53ef\u4ee5\u770b\u4ee3\u7801\n\n\u6ce8\u610f\u4e00\u4e0b\u4e07\u80fd\u5934\u6587\u4ef6\u5e76\u6ca1\u6709\u5305\u542bpbds\u5e93\uff0c\u8fd8\u6709pbds\u5e93\u5728NOI\u7cfb\u5217\u8d5b\u4e8b\u4e2d\u7684\u4f7f\u7528\u597d\u50cf\u6709\u70b9\u95ee\u9898\uff0c\u56e0\u4e3a\u6709\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u7a7a\u95f4\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<algorithm>\n# include<queue>\n# include<ext/pb_ds/priority_queue.hpp>//\u5934\u6587\u4ef6 \ninline int read()\n{\n\tint x=0;\n\tchar ch=getchar();\n\twhile(ch>'9' || ch<'0') ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x;\n}\nusing namespace std;\nusing namespace __gnu_pbds;\ntypedef __gnu_pbds::priority_queue< pair<int,int> ,greater< pair<int,int> >,pairing_heap_tag > heap; \n//pairing_heap_tag\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u914d\u5bf9\u5806 \nconst int mn = 100005;\nconst int maxn = 200005 ;\nconst int inf = 2147483647;\nheap q;\nheap::point_iterator id[mn];//\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u7684\u8fed\u4ee3\u5668 \nstruct edge{int to,next,dis;};\nedge e[maxn * 2];\nint head[mn],edge_max;\nvoid add(int x,int y,int z)\n{\n\te[++edge_max].to=y;\n\te[edge_max].dis=z;\n\te[edge_max].next=head[x];\n\thead[x]=edge_max;\n}\nint n,m,s,dis[mn];\nvoid dij(int x)\n{\n\tfor(int i=1;i<=n;i++) dis[i]=inf;\n\tdis[x]=0;\n\tid[x]=q.push(make_pair(0,x));//\u6bcf\u6b21push\u4f1a\u8fd4\u56de\u65b0\u52a0\u5165\u70b9\u7684\u8fed\u4ee3\u5668 \n\twhile(!q.empty())\n\t{\n\t\tint now=q.top().second;\n\t\tq.pop();\n\t\tfor(int i=head[now];i;i=e[i].next)\n\t\t{\n\t\t\tif(e[i].dis+dis[now]<dis[e[i].to])\n\t\t\t{\n\t\t\t\tdis[e[i].to]=dis[now]+e[i].dis;\n\t\t\t\tif(id[e[i].to]!=0) //\u5982\u679c\u5728\u5806\u4e2d \n\t\t\t\t    q.modify(id[e[i].to],make_pair(dis[e[i].to],e[i].to));//\u4fee\u6539\u6743\u503c \n\t\t\t\telse id[e[i].to]=q.push(make_pair(dis[e[i].to],e[i].to));//\u52a0\u5165\u5806 \n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint x,y,z;\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t}\n\tdij(s);\n\tfor(int i=1;i<=n;i++)\n\t   printf(\"%d \",dis[i]);\n\treturn 0; \n}\n```",
        "postTime": 1532489325,
        "uid": 58931,
        "name": "logeadd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u611f\u89c9\u5927\u4f6c\u7684\u9898\u89e3\u90fd\u6709\u70b9\u770b\u4e0d\u61c2\u3002\u3002\u3002\u6211\u5c31\u6765\u5199\u4e00\u4e0b\u6838\u5fc3\u4ee3\u7801\u4e3a **\u516d\u884c**\u7684dij+\u5806\u4f18\u5316qwq \u53ef\u80fd\u4f1a\u597d\u61c2\u4e00\u4e9b.. \n```cpp\n#include<bits/stdc++.h>\n#define MAXN 2147483647//\u521d\u59cb\u5316\u6700\u5927\u503c\nusing namespace std;\nstruct Node{\n    int dis,head,num;\n    friend bool operator < (Node s,Node t){ //\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u4e3a\u4e86\u7528\u5c0f\u6839\u5806\n        return s.dis>t.dis;//\u8bb0\u4f4f\uff0c\u5c0f\u4e8e\u5728\u91cc\u9762\u8981\u53d8\u6210\u5927\u4e8e\uff0c\u4e0d\u7136\u4f1a\u5361\u4f4f\n    }\n};\nNode a[1000001];\nint nxt[2000001],to[2000001],d[2000001],top,dist[1000001];\nbool used[1000001];\npriority_queue <Node> q;//\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\nint main(){\n    int n,m,s,x,y,k;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(register int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&x,&y,&k);\n        nxt[++top]=a[x].head;\ta[x].head=top;\t  to[top]=y; \n        d[top]=k; a[i].num=i;\ta[i].dis=MAXN;//\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u94fe\u5f0f\u524d\u5411\u661f\n    }\n    a[s].dis=0;\tq.push(a[s]);//\u52a0\u5165\u7b2c\u4e00\u4e2a\u70b9\n    while(!q.empty()){//\u6838\u5fc3\u4ee3\u7801\u4e0a\u573aqwq\n        Node v=q.top();q.pop();//\u53d6\u51fa\u8fd9\u4e2a\u70b9\n        if(v.dis>dist[v.num])\tcontinue;//\u5982\u679c\u8fd9\u4e2a\u6570\u5728\u4ed6\u653e\u5165\u961f\u5217\u88ab\u66f4\u65b0\u540e\u7684\u8bdd\uff0c\u90a3\u4e48\u5728\u5b83\u4e4b\u540e\u80af\u5b9a\u6709\u4e00\u4e2a\u6bd4\u5b83\u6743\u503c\u66f4\u5c0f\u7684\u70b9\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n        for(register int i=v.head;i;i=nxt[i])\n            if(a[to[i]].dis>v.dis+d[i])      dist[to[i]]=a[to[i]].dis=v.dis+d[i],q.push(a[to[i]]);//\u677e\u5f1b\u64cd\u4f5c\n    }\n    for(register int i=1;i<=n;i++)\n        printf(\"%d \",a[i].dis);//\u8f93\u51fa\u5c31ok\u4e86\n    return 0;\n}\n.....\n```",
        "postTime": 1535111605,
        "uid": 20780,
        "name": "\u5357\u57ce\u5fc6\u6f47\u6e58",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5351\u5fae\u7684\u849f\u84bb\u601d\u8003\u4e86\u4e00\u5929\u518d\u8bf7\u6559\u6821\u91cc\u7684dalao\u540e\u5199\u51fa\u7684\u5e26\u6709\u5f88\u5168\u6ce8\u91ca\u7684\u9898\u89e3\n```cpp\n#include<bits/stdc++.h>\n#define INF 2147483647\n#define MAXN 500010\n#define MAXM 10010\nusing namespace std;\nint N,M,S;\nint p;\nint dis[MAXN],vis[MAXN];\nint head[MAXN];//head\u6570\u7ec4\u8868\u793a\u4ee5i\u4e3a\u8d77\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u50a8\u5b58\u4f4d\u7f6e \nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f\uff0cnext\u8868\u793a\u4e0e\u7b2ci\u6761\u8fb9\u540c\u8d77\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5b58\u50a8\u4f4d\u7f6e \n{\n\tint next;//\u4e0b\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u6307\u9488 \n\tint to;\n\tint cost;\n}edge[MAXN];\nstruct node\n{\n\tint dis;\n\tint pos;\n};\nstruct cmp{\n  bool operator ()(node &x,node &y){\n    return x.dis>y.dis;//\u5c0f\u6839\u5806\u91cd\u8f7d \n  }\n}; \nvoid addline(int a,int b,int c)\n{\t\n\t//a\u662f\u8d77\u70b9 \n\tedge[++p].next=head[a];//++p\u8868\u793ap\u7684\u7f16\u53f7\uff0c\u5176\u4e0a\u4e00\u6761\u8fb9\u7684\u50a8\u5b58\u4f4d\u7f6e\u662fhead[a] \n\thead[a]=p; //a\u4e3a\u8d77\u70b9\uff0c\u6b64\u65f6\u4ee5a\u4e3a\u8d77\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\u662f\u7b2cp\u6761 \n\tedge[p].to=b;\n\tedge[p].cost=c;\n\t/*\n\tedge[\u7f16\u53f7++].\u4e0a\u4e00\u6761\u8fb9=head[\u8d77\u70b9]head\u4ee3\u8868\u4e86\u4ee5n\u4e3a\u8d77\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7 \n\thead[\u7b2c\uff1f\u4e2a\u8d77\u70b9]=\u7f16\u53f7//\u628a\u8fd9\u6761\u8fb9\u66f4\u65b0\u4e3a\u4e0a\u4e00\u6761\u8fb9 \n\t*/\t\t \n}\npriority_queue<node,vector<node>,cmp>q;\nvoid Dijkstra(int s)\n{\n\tdis[s]=0;\n\tq.push((node){0,s});\n\twhile(!q.empty())\n\t{\n\t\tnode tmp=q.top();//tmp\u662f\u4f18\u5148\u961f\u5217q\u4e2d\u6808\u9876\u5143\u7d20\uff0c\u7531\u4e8eq\u662f\u5c0f\u6839\u5806\u6240\u4ee5\u662f\u6700\u5c0f\u7684\u5143\u7d20 \n\t\tq.pop();\n\t\tint x=tmp.pos,d=tmp.dis;// x\u662f\u6808\u9876\u5143\u7d20\u7684\u4f4d\u7f6e\uff0cd\u662f\u6808\u9876\u5143\u7d20\u79bbs\u7684\u8ddd\u79bb \n\t\t//x\u5c31\u662f\u8ddd\u79bb\u6700\u8fd1\u7684\u90a3\u6761\u8fb9\u7684\u4f4d\u7f6e\uff0cd\u5c31\u662f\u8ddd\u79bb\u6700\u8fd1\u7684\u8fb9\u7684\u82b1\u8d39 \n\t\tif(vis[x])continue;//\u5982\u679cvis\u4e2d\u5b58\u4e86\uff08\u8bbf\u95ee\u8fc7\uff09\uff0c\u8df3\u8fc7\n\t\tvis[x]=1;//\u8bb0\u5f55\n\t\tfor(int i=head[x];i;i=edge[i].next) //\u8bbf\u95ee\u4ecei\u51fa\u53d1\u7684\u6240\u6709\u8fb9//\u904d\u5386\u94fe\u5f0f\u524d\u5411\u661f \n\t\t{\n\t\t\t//head[x]\u662fx\u8fde\u5230\u7684\u7b2c\u4e00\u6761\u8fb9\n\t\t\t//edge[i].next\u662f\u4e0b\u4e00\u6761\u8fb9 \n\t\t\t//i\u4e0d\u7b49\u4e8e0\u65f6\u7ee7\u7eed\u8fdb\u884c \t\t\t\t\n\t\t\t//i\u662f\u79bb\u76ee\u524d\u96c6\u5408\u6700\u8fd1\u8fb9\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u50a8\u5b58\u4f4d\u7f6e \n\t\t\t//cout<<x; \n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[x]+edge[i].cost)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+edge[i].cost;\n\t\t\t\tif(!vis[y])//\u5982\u679c\u5230\u7684\u70b9y\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 \n\t\t\t\t{\n\t\t\t\t\tq.push((node){dis[y],y});//\u5c31\u628ay\u4e22\u5230\u5806\u91cc \n\t\t\t\t}\n\t\t\t}\n\t\t\t//cout<<i<<\" \";\n\t\t } \n\t}\n\t\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&N,&M,&S);\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\taddline(a,b,c);\n\t}\n\tDijkstra(S);\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tprintf(\"%d \",dis[i]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570116975,
        "uid": 135065,
        "name": "preqzhor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n>* ## \u5173\u4e8eSPFA\n>* ## \u5b83\u5e76\u6ca1\u6709\u6b7b\n\n------------\n\u770b\u5230\u4e86\u5f88\u591aDalao\u5bf9SPFA\u4e0a\u7684\u5806\u4f18\u5316\u3002\n\n\u4e00\u4f4d\u76f4\u63a5\u628a\u7f16\u53f7\u4e22\u5230STL\u7684\u4f18\u5148\u961f\u5217\u4e0d\u7b97\u9519\u4f46\u80af\u5b9a\u4e0d\u662f\u6700\u4f18\uff0c\u56e0\u4e3aSTL\u7684\u4f18\u5148\u961f\u5217\u4e0d\u4f1a\u968f\u7740\u7f16\u53f7\u6240\u5bf9\u5e94\u7684\u6743\u503c\u7684\u5927\u5c0f\u800c\u6539\u53d8\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u6709\u5f88\u591a\u6ca1\u6709\u7528\u7684\u72b6\u6001\u88ab\u53d6\u51fa\u3002\n\n\u5176\u4ed6\u7684\u8c8c\u4f3c\u90fd\u6ca1\u6709\u8fd9\u4e2a\u64cd\u4f5c\uff1a\n```cpp\n\t\twhile (!Q.empty() && Q.top().first > dis[Q.top().second])\n            Q.pop();\n        if (Q.empty())\n            break;\n```\n\uff08\u8fd9\u91cc\u6211\u7684\u4f18\u5148\u961f\u5217\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0cfirst\u662f\u6743\u503c\uff0csecond\u662f\u70b9\u53f7\uff0c\u8be6\u89c1\u4ee3\u7801\uff09\n\n\u662f\u4e0d\u662f\u6709\u70b9\u773c\u719f\uff1f\u8fd9\u4e2a\u597d\u50cf\u662fDijkstra\u91cc\u7684\uff1f\n\n\u5bf9\uff0c\u5176\u5b9e\u5806\u4f18\u5316\u7684SPFA\u4e5f\u53ef\u4ee5\u50cfDijkstra\u4e00\u6837\u4f18\u5316\u51fa\u961f\u7684\u5143\u7d20\u3002\u539f\u7406\u5176\u5b9e\u5c31\u662f\u5982\u679c\u51fa\u961f\u70b9\u7684\u67d0\u6b21\u6269\u5c55\u7684\u6743\u503c\uff08\u5c31\u662f\u51fa\u961f\u65f6\u7684first\uff09\u5982\u679c\u5927\u4e8e\u73b0\u5728\u5df2\u7ecf\u62d3\u5c55\u5b8c\u7684\u6743\u503c\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u4e0d\u9700\u8981\u88ab\u6269\u5c55\u4e86\uff0c\u56e0\u4e3a\u5728\u4ed6\u4e4b\u524d\u5df2\u7ecf\u7528\u66f4\u5c0f\u7684\u6269\u5c55\u8fc7\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5pop\u6389\u3002\u8fd9\u4e2a\u5bf9\u7167\u4e0a\u9762\u51e0\u884c\u4ee3\u7801\u5e94\u8be5\u662f\u5f88\u597d\u7406\u89e3\u7684\u3002\n\n\u7528\u4e86\u8fd9\u4e2a\u4f18\u5316\u4ee5\u540e\uff0c\u6700\u5927\u70b9400ms\uff0c\u8fd8\u7279\u610f\u62ff\u4e86cin\u6d4b\u8bd5\u3002\n\n## \u518d\u8bf4\u4e00\u6b21\uff0c\u8fd9\u4e2a\u662f\u4f18\u5316\u961f\u5217\u7684SPFA\uff0c\u800c\u4e0d\u662f\u62ab\u7740Dijkstra\u5916\u8863\u7684SPFA\u3002\u3002\u3002qwq\n\n------------\n## Code\n\n```cpp\n#include <iostream>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1e6 + 5, MAXM = 2e6 + 5;\n\ntypedef pair<int, int> pii;\n\nint head[MAXM], nxt[MAXM], v[MAXM], w[MAXM], cnt;\n\nint dis[MAXN];\n\nint n, m, s;\n\ninline void Addline(int x, int y, int z)\n{\n    v[cnt] = y, w[cnt] = z;\n    nxt[cnt] = head[x], head[x] = cnt++;\n\n    return;\n}\n\ninline void SPFA(int s)\n{\n    memset(dis, 0x3f, sizeof dis);\n\n    priority_queue<pii, vector<pii>, greater<pii>> Q;\n    Q.push(make_pair(0, s)), dis[s] = 0;\n\n    while (!Q.empty())\n    {\n        while (!Q.empty() && Q.top().first > dis[Q.top().second])\n            Q.pop();\n        if (Q.empty())\n            break;\n\n        int x = Q.top().second;\n        Q.pop();\n\n        for (int i = head[x]; ~i; i = nxt[i])\n            if (dis[v[i]] > dis[x] + w[i])\n            {\n                dis[v[i]] = dis[x] + w[i];\n                Q.push(make_pair(dis[v[i]], v[i]));\n            }\n    }\n\n    return;\n}\n\nsigned main(void)\n{\n    memset(head, -1, sizeof head);\n\n    cin >> n >> m >> s;\n    for (int i = 1, x, y, z; i <= m; i++)\n        cin >> x >> y >> z, Addline(x, y, z);\n\n    SPFA(s);\n\n    for (int i = 1; i <= n; i++)\n        cout << dis[i] << \" \";\n\n    return 0;\n}\n```\n",
        "postTime": 1540956109,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u9010\u884c\u6ce8\u91ca\u7248\u5806\u4f18\u5316Dj\n\u9002\u5408\u521d\u5b66\u8005\uff01\uff01\uff01\n\n```\n//4779 //\u5806\u4f18\u5316\u7684\u8fea\u6770\u65af\u7279\u62c9 \n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cstdio>\nusing namespace std;\nint n,m,t,tot=0;                    //\u57fa\u672c\u53d8\u91cf\u7684\u5b9a\u4e49 \nint dis[200001],last[200001];       \n//dis\u6570\u7ec4\u4e0b\u6807\u8868\u793a\u8282\u70b9\u7f16\u53f7\uff0c\u6570\u503c\u8868\u793a\u5230\u5b9a\u70b9\u7684\u8ddd\u79bb\n//last\u6570\u7ec4\u7528\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u4e0b\u6807\u8868\u793a\u8282\u70b9\u7f16\u53f7\uff0c\u6570\u503c\u8868\u793a\u6b64\u8282\u70b9\u7684\u6700\u540e\u4e00\u6761\u51fa\u8fb9 \nbool mark[200001];    \n//mark\u7528\u4e8edj\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u4e0b\u6807\u8868\u793a\u8282\u70b9\u7f16\u53f7\uff0c\u6570\u503ctrue\u8868\u793a\u8be5\u8282\u70b9\u7684dis\u6570\u7ec4\u503c\u4e3a\u6700\u77ed\u8def \nstruct edge{\n\tint to,prev,v;   //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u6cd5 \n}e[200001];          //e\u6570\u7ec4\u4e0b\u6807\u8868\u793a\u8fb9\u7684\u5e8f\u53f7\uff0c\u503c\u5206\u522b\u4e3a\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u524d\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u548c\u8fb9\u6743 \nvoid add(int a,int b,int c){\n\te[++tot]=(edge){b,last[a],c}; //\u5148\u52a0\u540e\u7528\uff0c\u5b58\u8fb9\u65f6\u4f9d\u6b21\u4fdd\u5b58\u7684\u662f\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7b\uff0c\u524d\u4e00\u6761\u8fb9\u7684\u7f16\u53f7last[a]\u548c\u8fb9\u6743c  \n\tlast[a]=tot;\n}\nstruct node            //dj\u7b97\u6cd5\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\uff0c\u5b58\u50a8\u7684\u5206\u522b\u662f\u70b9\u7684\u7f16\u53f7\u548c\u70b9\u8ddd\u79bb\u5b9a\u70b9\u7684\u8ddd\u79bb \n{\n    int id;\n    int dis;\n    bool operator <( const node &x )const      //\u7ed3\u6784\u4f53\u4f18\u5148\u961f\u5217\u6bd4\u8f83\u51fd\u6570\uff08\u80cc\u4e0b\u6765\u5427\uff09 \n    {\n        return x.dis < dis;\n    }\n};\npriority_queue<node> q;      //\u7ed3\u6784\u4f53\u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49 \nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&t);        //\u63a5\u6536\u6570\u636e \n\tint a,b,c;                       //\u5b9a\u4e49\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe \n\tfor(int i=1;i<=m;i++){           //\u63a5\u6536\u6570\u636e\u5efa\u56fe \n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t}\n\tfor(int i=1;i<=n;i++){           //\u6570\u7ec4\u521d\u59cb\u5316\uff0cdis\u6570\u7ec4\u8981\u8bbe\u4e3a\u6700\u5927\uff0c\u4ee5\u4fbf\u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb \n\t\tdis[i]=0x3f3f3f3f;\n\t\tmark[i]=0;\n\t}\n\tdis[t]=0;                        //\u8d77\u59cb\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a0\uff08\u9898\u76ee\u8981\u6c42\uff09 \n\tq.push((node){t,dis[t]});        //\u8d77\u59cb\u70b9\u7684\u7f16\u53f7\u548c\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u5206\u522b\u653e\u5165\u961f\u5217 \n\twhile(!q.empty()){               //dj \n\t\tint x=q.top().id;            //\u53d6\u51fa\u961f\u5217\u4e2d\u8ddd\u79bb\u5b9a\u70b9\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9 \n\t\tint i=last[x];               //\u4fdd\u5b58\u4ece\u6b64\u70b9\u53d1\u51fa\u7684\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u4e4b\u540e\u6765\u904d\u5386 \n\t\tq.pop();                     //\u53ef\u4ee5\u51fa\u961f\u4e86 \n\t\tif(mark[x]){                 //\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u51fa\u961f\uff08\u5df2\u7ecf\u4e3a\u6700\u5c0f\u503c\uff09\u5219\u53d6\u4e0b\u4e00\u4e2a \n\t\t\tcontinue;\n\t\t}\n\t\tmark[x]=1;                   //\u51fa\u961f\u540emark\u6570\u7ec4\u6253\u4e0a\u6807\u8bb0\uff0c\u8868\u793a\u6b64\u4e0b\u6807\u70b9\u7f16\u53f7\u5df2\u7ecf\u6c42\u51fa\u6700\u5c0f\u8ddd\u79bb \n\t\twhile(i){                    //\u5199\u6210for\u5faa\u73af\u4e5f\u884c\uff0c\u53ef\u53c2\u8003spfa\u7684\u5199\u6cd5 \n\t\t\tif(!mark[e[i].to]&&dis[e[i].to]>(dis[x]+e[i].v)){   \n\t\t\t//\u82e5\u7f16\u53f7\u4e3ai\u7684\u8fb9\u5230\u8fbe\u7684\u70b9\u672a\u6c42\u51fa\u6700\u5c0f\u8ddd\u79bb\n\t\t\t//\u5e76\u4e14\u5b58\u5728\u7ecf\u8fc7\u6b64\u8fb9\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6bd4\u5230\u8fbe\u70b9\u4e0a\u7684\u5230\u5b9a\u70b9\u7684\u8ddd\u79bb\u77ed\uff08\u540e\u534a\u90e8\u5206\u548cspfa\u76f8\u540c\uff09 \n\t\t\t\tdis[e[i].to]=dis[x]+e[i].v;     //\u66f4\u65b0 \n\t\t\t\tq.push((node){e[i].to,dis[e[i].to]});  //\u5c06\u66f4\u65b0\u5b8c\u7684\u70b9\u5165\u961f\t\n\t\t\t}\n\t\t\ti=e[i].prev;      \n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d \",dis[i]);      //\u5206\u522b\u6253\u5370\u5230\u5b9a\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb \n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1564563063,
        "uid": 126986,
        "name": "Gtr12180916",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "## \u672c\u9898\u89e3\u8f83\u9002\u5408\u5806\u4f18\u5316\u91cd\u8f7d\u62ec\u53f7\u8fd0\u7b97\u7b26\u7684\u540c\u5b66\u770b\n\u4f17\u6240\u5468\u77e5\uff0c $Dijkstra$ \u662f\u4e00\u4e2a\u5e38\u7528\u6765\u6c42\u6ca1\u6709\u8d1f\u73af\u7684\u6700\u77ed\u8def\u7684\u65b9\u6cd5  \n\u4e00\u79cd\u5e38\u89c1\u7684\u4f18\u5316\uff0c\u5c31\u662f\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u4f18\u5316 $Dijkstra$  \n\u4f18\u5148\u961f\u5217\u7684\u5199\u6cd5\u5bf9\u6bcf\u4e2a\u4eba\u6765\u8bf4\u4e5f\u662f\u5404\u4e0d\u76f8\u540c  \n\u9488\u5bf9\u4e00\u79cd\u91cd\u8f7d\u62ec\u53f7\u8fd0\u7b97\u7b26\u7684\u5199\u6cd5\uff0c\u6211\u60f3\u8c08\u4e00\u8c08\u6211\u7684\u770b\u6cd5\n\n\u4ee3\u7801\uff1a\n```cpp\nstruct cmp{\n    bool operator()(const int &x,const int &y)\n    const\n    {\n        return dis[x]>dis[y];\n    }\n};\npriority_queue<int,vector<int>,cmp>q;\nvoid dijkstra(){\n    int u,v,w;\n    for(int i=1;i<=n;++i) d[i]=2147483647;\n    dis[s]=0;q.push(s);\n    while(!q.empty()){\n        u=q.top();\n        q.pop();\n        if(vis[u]) continue;\n        vis[u]=true;\n        for(int i=head[u];i;i=p[i].nxt){\n            v=p[i].to;w=p[i].w;\n            if(dis[u]+w<dis[v])\n            {\n                dis[v]=dis[u]+w;\n                q.push(v);\n            }\n        }\t\t\t\t\t\n    }\t\n}\n```\n\n\u8fd9\u79cd\u5199\u6cd5\u4fdd\u7559\u4e86 $priority\\_queue$ \u4e2d\u5c0f\u6839\u5806\u539f\u6765\u7684\u5199\u6cd5\uff0c\u66f4\u5bb9\u6613\u7406\u89e3  \n\u5e76\u4e14\u8fd9\u79cd\u5199\u6cd5\u5728\u67d0\u672c\u8457\u540d\u7684\u4e66\u4e2d\u4e5f\u51fa\u73b0\u4e86  \n\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u771f\u7684\u6ca1\u6709\u95ee\u9898\u5417\uff1f  \n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u5982\u679c\u5728\u66f4\u65b0\u5176\u4ed6\u8282\u70b9\u7684\u65f6\u5019\uff0c\u67d0\u4e00\u4e2a\u8282\u70b9\u88ab\u591a\u6b21\u66f4\u65b0\uff0c\u90a3\u4e48\u5b83\u6bcf\u6b21\u7684 $dis$ \u503c\u90fd\u662f\u4f1a\u51cf\u5c0f\u7684  \n\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u66f4\u65b0\u7684\u6b21\u6570\u8db3\u591f\u591a\u65f6\uff0c\u5b83\u603b\u6709\u4e00\u6b21\u4f1a\u8ddf\u81ea\u5df1\u8fdb\u884c\u6bd4\u8f83\uff0c\u90a3\u4e48\u5b83\u4f1a\u56e0\u4e3a\u81ea\u5df1\u4e0e\u81ea\u5df1\u7684 $dis$ \u503c\u76f8\u7b49\u800c\u7559\u5728\u8fd9\u4e2a\u4f4d\u7f6e   \n\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u5806\u4e2d\u5f62\u6210\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u201c\u8def\u969c\u201d\u7684\u4e1c\u897f\u5c06\u5806\u7684\u67d0\u4e9b\u90e8\u5206\u201c\u5835\u4f4f\u201d  \n\u800c\u8fd9\u79cd\u5199\u6cd5\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u4e5f\u7834\u574f\u4e86\u5806\u539f\u6709\u7684\u6027\u8d28\uff0c\u5c31\u4f1a\u4f7f\u7b97\u6cd5\u51fa\u73b0\u9519\u8bef  \n\u5982\u4e0b\u56fe\uff1a  \n\n$q.push$ \u8868\u793a\u677e\u5f1b\u65f6\u7684\u5165\u5806\u64cd\u4f5c\uff0c $1(10)$ \u8868\u793a\u5c06\u8282\u70b9\u7f16\u53f7\u4e3a $1$ \u7684 $dis$ \u503c\u4fee\u6539\u4e3a $10$\n$cmp\\quad$ \u662f\u91cd\u8f7d\u62ec\u53f7\u8fd0\u7b97\u7b26\u7684\u5199\u6cd5  \n$node\\quad$ \u662f\u5c06\u8282\u70b9\u7f16\u53f7\u548c $dis$ \u503c\u5408\u5e76\u4e4b\u540e\u7684\u5199\u6cd5\uff08\u4e0b\u9762\u6709\u4ee3\u7801\uff09  \n\u6ce8\uff1a $pair$ \u5199\u6cd5\u4e0e $node$ \u5199\u6cd5\u5927\u81f4\u7c7b\u4f3c\uff0c\u5728\u6b64\u4e0d\u518d\u9610\u8ff0  \n\n![](https://cdn.luogu.com.cn/upload/pic/32719.png)\n\n\u5f88\u660e\u663e\uff0c\u5f53\u7f16\u53f7\u4e3a $2$ \u7684\u8282\u70b9\u591a\u6b21\u5165\u5806\u4e4b\u540e\uff0c\u5806\u5185\u5143\u7d20\u5df2\u7ecf\u4ea7\u751f\u4e86\u95ee\u9898  \n\u6240\u4ee5\uff0c\u5982\u679c\u4e00\u5f20\u56fe\u4e2d\u6709\u5927\u91cf\u7684\u91cd\u8fb9\uff0c\u5c31\u5f88\u5bb9\u6613\u4f1a\u5bfc\u81f4\u8fd9\u6837\u7684\u95ee\u9898\u53d1\u751f  \n\n\u9644\u4e0a $node$ \u5199\u6cd5\u4ee3\u7801\n```cpp\nstruct node\n{\n    int u,d;\n    bool operator<(const node& rhs)\n    const\n    {\n        return d>rhs.d;\n    }\n};\n\nvoid Dijkstra()\n{\n    priority_queue<node> q;\n    for(int i=1;i<=n;++i) d[i]=2147483647;\n    q.push((node){s,d[s]});\n    d[s]=0;\n    while(!q.empty())\n    {\n        node x=q.top();\n        int u=x.u;\n        q.pop();\n        if(vis[u]) continue;\n        vis[u]=1;\n        for(int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].v,w=e[i].w;\n            if(d[u]+w<d[v])\n            {\n                d[v]=d[u]+w;\n                q.push((node){v,d[v]});\n            }\n        }\n    }\n}\n```\n\u5982\u679c\u6709\u4ec0\u4e48\u66f4\u597d\uff08\u7384\u5b66\uff09\u7684\u91cd\u8f7d\u62ec\u53f7\u8fd0\u7b97\u7b26\u7684\u5199\u6cd5\u53ef\u4ee5\u79c1\u4fe1\u6211qwq",
        "postTime": 1536766481,
        "uid": 53164,
        "name": "WorldBest\u4e36\u725b\u987f",
        "ccfLevel": 3,
        "title": "Dijkstra\u5806\u4f18\u5316\u7684\u5199\u6cd5\u8ba8\u8bba"
    },
    {
        "content": "### \u7b97\u6cd5\u7b80\u6790\uff1a\u4e3b\u8981\u662fDijkstra\u52a0\u4e0a\u5806\u4f18\u5316\u5c31AC\u4e86\u3002\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```c++\n#include<stdio.h>\n#include<string.h>\n#include<iostream>\n#define inf 2147483647\nusing namespace std;\nint heap_size;\nconst int maxn = 100000+10;//\u70b9\u7684\u6700\u5927\u6570\u91cf \nconst int maxm = (200000  + 10) * 2;//\u8fb9\u7684\u6700\u5927\u6570\u91cf \nint cnt, head[maxn],  s[maxn];// cnt \u8fb9\u7684\u6570\u91cf\u3002 head\u3010\u70b9\u3011\u8fde\u63a5\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002 s\u96c6\u5408\u662f\u4ee3\u8868\u786e\u5b9a\u6700\u77ed\u7684\u70b9 \nstruct node{\n    int to, nxt, val;// to \u8fd9\u6761\u8fb9\u6307\u5411\u7684\u70b9 nxt\u8fd9\u6761\u8fb9\u7684\u4e0b\u4e00\u6761\u8fb9\u3002val\u6743\u503c \n}edge[maxm];\nint min(int a,int b){\n    return a<= b ? a : b;\n}\nstruct node1{\n    int dist;//\u8ddd\u79bb \n    int idx;//\u70b9\u7684\u7f16\u53f7 \n}dist[maxm],dist1[maxm];\nvoid shiftdown(int rt){//\u4e0b\u653e \n    int l=rt<<1;\n    int r=rt<<1|1;\n    int minest;\n    if(l<=heap_size&&dist1[l].dist<dist1[rt].dist)\n        minest=l;\n    else\n        minest=rt;\n    if(r<=heap_size&&dist1[r].dist<dist1[minest].dist)\n        minest=r;\n    if(minest!= rt){\n        swap(dist1[rt],dist1[minest]);\n        shiftdown(minest);\n    }\n}\nvoid shiftup(int rt){\n    while(dist1[rt].dist<dist1[rt>>1].dist&&rt!=1){\n        swap(dist1[rt],dist1[rt>>1]);\n        rt=rt>>1;\n    }\n}\nvoid init(){//\u521d\u59cb\u5316 \n    cnt = 0;\n    heap_size = 0;\n    memset(head, -1, sizeof head);\n}\nvoid add(int u, int v, int w){\n    edge[cnt].to = v;//\u6307\u5411V\u70b9 \n    edge[cnt].val = w;//\u6743\u503c \n    edge[cnt].nxt = head[u];//\u4e0b\u4e00\u6761\u8fb9 \n    head[u] = cnt++;//\u7b2c\u4e00\u6761\u8fb9 \n}\nvoid Dijkstra(int n,int st){\n    int mindis, u;\n    memset(s, 0, sizeof s);\n    for(int i =1;i <=n;i++) dist[i].dist = inf,dist[i].idx = i;// \u521d\u59cb\u5316 \n//\tprintf(\"%d\\n\", dist[2]);\n    for(int i = head[st];~i;i = edge[i].nxt){//~i  i!=-1 \n        int v = edge[i].to;\n        dist[v].dist = min(dist[v].dist,edge[i].val);//\u521d\u59cbdist\u6570\u7ec4 \n    }\n    s[st] = 1;  //\u8d77\u70b9\u52a0\u5165 \n    dist[st].dist = 0;  // \u8d77\u70b9\u7684\u8ddd\u79bb\u662f0\n    heap_size=0; //\u521d\u59cb\u5806   \u6ca1\u6709\u5143\u7d20 \n    for(int i = 1;i <= n;i++){\n        if(i==st) continue;//\u8df3\u8fc7\u8d77\u59cb\u70b9 \n        heap_size++;\n        dist1[heap_size] = dist[i];\n        shiftup(heap_size);\n    }\n    //\u5806\u4e2d\u6709n-1\u4e2a\u70b9 \n    for(int i = 1; i <= n-1; i++){  \n        mindis = inf;\n       \tmindis = dist1[1].dist;// \u5c0f\u9876\u5806 \n       \t\n       \tu = dist1[1].idx;// idx\u4ee3\u8868\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7 \n       \twhile(s[u]==1){// \u82e5\u9009\u62e9\u7684\u70b9\u5df2\u7ecf\u518dS\u6570\u7ec4\u4e2d \uff0c \u6211\u4eec\u5c31\u91cd\u65b0\u518d\u627e\u4e00\u4e2a \n            u = dist1[1].idx;\n            swap(dist1[1],dist1[heap_size]);\n       \t\theap_size--;\n       \t\tshiftdown(1);\n        }\n\n  \t\ts[u]=1;// \u653e\u5230S\u6570\u7ec4\u4e2d \n  \t\tfor(int j = head[u];~j;j = edge[j].nxt){//\u904d\u5386u\u70b9\u8fde\u63a5\u7684\u6240\u6709\u7684\u8fb9 \n  \t\t\tint v = edge[j].to;//u\u70b9\u6240\u6307\u5411\u7684\u70b9  \n  \t\t\tif(s[v]==0 && dist[u].dist + edge[j].val < dist[v].dist && edge[j].val < inf){\n  \t\t\t\tdist[v].dist = dist[u].dist + edge[j].val;\n  \t\t\t\theap_size++;\n  \t\t\t\tdist1[heap_size] = dist[v];\n  \t\t\t\tshiftup(heap_size);\n  \t\t\t\t//\u91cd\u65b0\u52a0\u5165\u5230\u5806\u4e2d \n            }\n        }\n \t}\n}\nint main(){\n    init();\n    int N, M, S;//n\u4e2a\u70b9 \uff0c m\u6761\u8fb9 \uff0c s\u4ee3\u8868\u8d77\u70b9 \n    scanf(\"%d%d%d\", &N ,&M, &S);\n    while(M--){\n        int u, v, w;\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);//  \u52a0\u5165u\u5230v\u7684\u6743\u503c\u4e3aw\u7684\u8fb9 \n    }\n    Dijkstra(N, S);//\u5355\u6e90\u6700\u77ed\u8def \n    for(int i = 1;i <= N;i++){\n        printf(\"%d \",dist[i]);//\u8f93\u51fa\u6240\u6709\u7684\u6700\u77ed\u8ddd\u79bb \n    }\n}\n```",
        "postTime": 1534121446,
        "uid": 25006,
        "name": "zhangjiacheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5f00\u5934\u63d0\u793a\uff1a\u672c\u505a\u6cd5\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u5355\u6e90\u6700\u77ed\u8def\u3002\u7531\u4e8e\u8fc7\u4e8e\u7384\u5b66\uff0c\u8bf7\u914c\u60c5\u4f7f\u7528\u3002\u6211\u73b0\u5728\u5df2\u7ecf\u5fd8\u8bb0\u8fd9\u4e2a\u505a\u6cd5\u662f\u6211\u81ea\u5df1YY\u7684\u8fd8\u662f\u5ad6\u6765\u7684\u4e86\uff0c\u5982\u679c\u5728\u5176\u4ed6\u5730\u65b9\u89c1\u5230\uff0c\u4e14\u65f6\u95f4\u6bd4\u6211\u8fd9\u4e2a\u65e9\uff0c\u8bf7\u544a\u77e5\u51fa\u5904\uff0c\u8c22\u8c22\u3002  \n\n\u4f7f\u7528SPFA\u7684\u76ae\uff0cDijkstra\u7684\u7075\u9b42\u3002  \n\n\u548c\u6b63\u5e38SPFA\u7684\u533a\u522b\uff1a  \n- \u4f7f\u7528\u53cc\u7aef\u961f\u5217\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6027\u8d28\u4e00\u6837\u7684STL\u94fe\u8868\u3002  \n- \u5bf9\u9891\u7e41\u51fa\u5165\u961f\u7684\u70b9\u548c\u8f83\u8fdc\u7684\u70b9\u505a\u5ef6\u540e\u5904\u7406\u3002\u4e00\u822c\u7684\u70b9\u4ece\u5de6\u8fb9\u5165\u961f\uff0c\u8fd9\u79cd\u70b9\u4ece\u53f3\u8fb9\u5165\u961f\u3002  \n\n\u7136\u540e\u556a\u53fd\u556a\u53fd\u5c31\u8fc7\u4e86OAO  \n\n\u8bb0\u4e00\u4e2a\u70b9\u51fa\u5165\u961f\u6b21\u6570\u4e3acnt\uff0c\u5982\u679ccnt\u5c0f\u4e8eR\u90a3\u4e48\u4f18\u5148\u5904\u7406\u3002\u5982\u679cdis\u6bd4\u5de6\u7aef\u961f\u9996\u7684dis\u5c0f\u90a3\u4e48\u4f18\u5148\u5904\u7406\u3002\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\u56e0\u4e3a\u5176\u4ed6\u5730\u65b9\u662f\u6807\u51c6SPFA\u6240\u4ee5\u4e0d\u4e0a\u6ce8\u91ca\u3002\u4f7f\u7528\u5feb\u8bfb\u3002O2\u53ef\u4f18\u531655%\u7684\u65f6\u95f4\u3002\u4ee3\u7801\u9644\u8d60\u4e00\u6bb5Dijkstra\u6a21\u677f\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <list>\nusing namespace std;\n\nconst int maxn = 1e5 + 5;\nconst int inf = 0x3f3f3f3f;\nint n, m, s;\nstruct Edge {\n\tint u, v, w;\n\tEdge(int uu, int vv, int ww) : u(uu), v(vv), w(ww){}\n};\nvector<Edge> E;\nvector<int> G[maxn];\nint read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\nint dis[maxn];\nbool vis[maxn];\n\nstruct node {\n\tint d, dis;\n\tnode(int dd, int ddis) : d(dd), dis(ddis) {}\n\tfriend bool operator < (const node &a, const node &b) {\n\t\treturn a.dis > b.dis;\n\t}\n};\nvoid dijkstra(int s) {\n\tmemset(dis, inf , sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tdis[s] = 0;\n\tpriority_queue<node> q;\n\tq.push(node(s, dis[s]));\n\twhile (!q.empty()) {\n\t\tint u = q.top().d;\n\t\tq.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = 0; i < G[u].size(); i++) {\n\t\t\tEdge e = E[G[u][i]];\n\t\t\tif (dis[e.v] > dis[u] + e.w) {\n\t\t\t\tdis[e.v] = dis[u] + e.w;\n\t\t\t\tif (!vis[e.v]) q.push(node(e.v, dis[e.v]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst int R = 200;\nconst int V = 40;\nint cnt[maxn];\nvoid spfa(int s) {\n\tmemset(dis, inf, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(cnt, 0, sizeof(cnt));\n\tdis[s] = 0;\n\tlist<int> q;\n\tq.push_front(s);\n\twhile (!q.empty()) {\n\t\tint u = *(q.begin()); q.pop_front();\n\t\tvis[u] = 0;\n\t\tfor (int i = 0; i < G[u].size(); i++) {\n\t\t\tEdge e = E[G[u][i]];\n\t\t\tif (dis[e.v] > dis[u] + e.w) {\n\t\t\t\tdis[e.v] = dis[u] + e.w;\n\t\t\t\tif (!vis[e.v]) {\n\t\t\t\t\tvis[e.v] = 1;\n\t\t\t\t\tif (cnt[e.v] > 0 && cnt[e.v] < R || q.size() && dis[*(q.begin())] >= dis[e.v] - V) {\n\t\t\t\t\t\tq.push_front(e.v);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tq.push_back(e.v);\n\t\t\t\t\t}\n\t\t\t\t\tcnt[e.v]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n//\tfreopen(\"testdata.in\", \"r\", stdin);\n//\tfreopen(\"t.out\", \"w\", stdout);\n\tn = read(), m = read(), s = read();\n\tint tu, tv, tw;\n\tfor (int i = 1; i <= m; i++) {\n\t\ttu = read(), tv = read(), tw = read();\n\t\tE.push_back(Edge(tu, tv, tw));\n\t\tG[tu].push_back(E.size() - 1);  \n\t}\n//  dijkstra(s);\n\tspfa(s);\n\tfor (int i = 1; i <= n; i++) printf(\"%d \", dis[i]);\n\treturn 0;\n}\n```\n  \n\u4ee5\u4e0a\u3002",
        "postTime": 1571589183,
        "uid": 41536,
        "name": "wuyuema",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u4eec\u90fd\u662f\u7528**\u524d\u5411\u661f**\u5b58\u56fe\uff0c\uff0c\u6211\u611f\u5230\u5341\u5206\u96be\u4ee5\u7406\u89e3\u3002\u5bf9\u4e8e\u50cf\u6211\u8fd9\u6837\u7684\u56fe\u8bba\u521d\u5b66\u8005\u6765\u8bf4\uff0c$vector$\u5e94\u8be5\u8981\u6bd4**\u524d\u5411\u661f**\u8981\u5bb9\u6613\u7406\u89e3\u4e00\u4e9b\uff0c~~\u6211\u592a\u83dc\u4e86\u5c31\u4e0d\u4f1a\u524d\u5411\u661f...~~,\u4e8e\u662f\u6211\u5c31\u53d1\u4e00\u7bc7\u7528$vector$\u5b58\u56fe\u7684\u9898\u89e3\u3002       \n\u9996\u5148\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53$edge$,$edge$\u91cc\u5b58\u7684\u662f\u4e24\u4e2a\u6570$w,v$\u5176\u4e2d$w$\u8868\u793a\u8fd9\u6761\u8fb9\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c$v$\u4ee3\u8868\u4ece\u6b64\u70b9\u5230\u4e0b\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002                 \n\u4e8e\u662f\u6211\u4eec\u7684$vector$\u5c31\u53ef\u4ee5\u5f00$MAXN$\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d$v[i]$\u8868\u793a\u4e0e\u7b2c$i$\u53f7\u8282\u70b9\u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\uff0c\u5176\u4e2d\u6743\u4e3a$val$\u3002                 \n### \u597d\u7684\uff0c\u77e5\u9053\u4e86\u5982\u4f55\u5b58\u56fe\uff0c\u6211\u4eec\u5f00\u59cb\u8bb2\u7b97\u6cd5\uff1a   \n$0\\sim30$\u5206\u7b97\u6cd5:$O(n^3)$\u7684$Floyed$...$Floyed$\u7684\u7a0b\u5e8f\u5f88\u77ed\uff0c\u5f88\u5bb9\u6613\u8bb0\uff0c\u7528\u7684\u662f\u4e00\u79cd\u7c7b\u4f3c$dp$\u7684\u601d\u60f3\uff0c\u5176\u4e2d\uff1a       \n$$g[i][j]=g[i][k]+g[k][j]$$           \n\u7136\u540e\u5f00$3$\u4e2a\u5faa\u73af$i,j,k$\u5373\u53ef\uff0c$Floyed$\u7a0b\u5e8f\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5217\u4e3e\u3002                \n$30\\sim50$\u5206\u7b97\u6cd5\uff1a$spfa$,\u6b64\u9898\u5199\u4e00\u4e2a$spfa$\u53ef\u4ee5\u8fc7\u4e24\u4e2a\u70b9\uff0c\u4eb2\u6d4b\u6709\u6548\u3002$spfa$\u7684\u7b97\u6cd5\u5efa\u8bae\u53bb[\u8fd9\u91cc](https://www.luogu.org/problemnew/solution/P3371)\u770b\u770b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u63cf\u8ff0\u4e86\u3002~~\u5173\u4e8espfa---\u5b83\u6b7b\u4e86~~    \n$100$\u5206\u7b97\u6cd5\uff0c$Dijkstra$+\u5806\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n log n),$\u5176\u4e2d\uff0c$Dijkstra$+\u5806\u4f18\u5316\u7684\u601d\u60f3\u662f\uff1a\u904d\u5386\u7b2c$i$\u53f7\u8282\u70b9\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u8282\u70b9\uff0c\u5224\u65ad\u5f53\u524d\u8d70\u7684\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5728\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u4e2d\u5e76\u4e14\u5224\u65ad\u73b0\u5728\u8d70\u8fc7\u7684\u8def\u7a0b\u662f\u5426\u6bd4\u8be5\u8282\u70b9\u5f53\u524d\u8d70\u8fc7\u7684\u8def\u7a0b\u66f4\u77ed\uff0c\u5982\u679c\u66f4\u77ed\uff0c\u5219\u66f4\u65b0\u6700\u77ed\u8def\u7a0b\uff0c\u5e76\u5c06\u8fd9\u4e2a\u70b9\u6254\u8fdb\u5806\u4e2d\u7136\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u4e00\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u4e3a\u6b62\u3002                   \n### \u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\uff1a       \n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100010 //\u5b9a\u4e49\u6700\u5927\u503c\n#define INF 2147483647\n//\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u5077\u61d2\u7684\u5199\u6cd5\uff0c\u628a\u6700\u5927\u503c\u5b9a\u4e49\u6210\u4e0d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u6240\u8981\u8f93\u51fa\u7684\u6570\uff0c\u5728\u8f93\u51fa\u65f6\u5c31\u4e0d\u9700\u8981\u7279\u5224\u4e86\u3002\n#define ll long long\nusing namespace std;\nstruct edge{ll w,v;};\nll n,i,j,beg,end,x,y,z,m;\nvector<edge> g[MAXN];\nedge E,E1;\nll dis[MAXN],vis[MAXN];\nstruct Node{\n    ll w,v;\n    bool operator < (const Node& x) const{\n        return v>=x.v;\n    }\n};\npriority_queue<Node> q;\nNode node;\nnamespace Fastio{\n    inline ll read(){//\u5feb\u901f\u8f93\u5165\n        ll x=0;char c=getchar();\n        while(!isdigit(c)) c=getchar();\n        while(isdigit(c)) {x=x*10+c-48;c=getchar();}\n        return x;\n    }\n    void write(ll x){//\u5feb\u901f\u8f93\u51fa\n        if(x/10>0) write(x/10);\n        putchar(x%10+48);\n        return;\n    }\n}\nusing namespace Fastio;\ninline void Dijkstra(){//Dijkstra \n    while(!q.empty()){//\u5f53\u961f\u5217\u975e\u7a7a\u65f6\n        ll ww=q.top().w;q.pop();\n        //\u53d6\u51fa\u961f\u5217\u9996\u5143\u7d20\uff0c\u961f\u5217\u653e\u51fa\u5143\u7d20\n        if(vis[ww]) continue;\n        //\u5982\u679c\u8bbf\u95ee\u8fc7\u6b64\u8282\u70b9\uff0c\u76f4\u63a5continue\n        vis[ww]=1;//\u5c06\u8be5\u8282\u70b9\u8bbe\u7f6e\u4e3a\u8d70\u8fc7\n        for(i=0;i<g[ww].size();i++){\n            ll w=g[ww][i].w; ll v=g[ww][i].v;\n            //\u53d6\u51fa\u4e0e\u8be5\u70b9\u6240\u6709\u76f8\u8fde\u7684\u70b9      \n            //\u53d6\u51fa\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u70b9\u7684\u8fb9\u6743\u503c\n            if(v+dis[ww]<dis[w]){//\u5982\u679c\u6bd4\u5f53\u524d\u8282\u70b9\u6240\u7528\u8fc7\u7684\u6700\u77ed\u8def\u5f84\u8981\u5c0f\n                dis[w]=dis[ww]+v;//\u66f4\u65b0\u6700\u5c0f\u503c\n                node.w=w;node.v=dis[w];\n                q.push(node);//\u6254\u8fdb\u5806\u91cc\n            }\n        }\n    }\n}\nint main(){\n    n=read();m=read();beg=read();//\u8f93\u5165\n    for(i=1;i<=m;i++){\n        x=read();y=read();z=read();//\u8f93\u5165\n        E.w=y;E.v=z;\n        g[x].push_back(E);\n    // \u5c06\u8fd9\u70b9x\u7684\u4e0b\u4e00\u4e2a\u70b9\u8bbe\u6210y,\u6743\u503c\u4e3az,\u653e\u8fdbvector\u4e2d\u3002\u6ce8\u610f\u662f\u6709\u5411\u56fe...\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u4ee5\u4e3a\u662f\u65e0\u5411\u56fe\u800cWA\u4e86n\u6b21= =   \n    }\n    for(i=1;i<=n;i++) dis[i]=INF; \n    //\u6ce8\u610f\uff0c\u5982\u679c\u5077\u61d2\u7684\u8bdd\u5fc5\u987b\u8981\u5199\u4e00\u4e2afor\u5faa\u73af\uff0c\u4f7f\u7528memset\u4f1a\u51fa\u95ee\u9898\n    dis[beg]=0;\n    node.w=beg;node.v=0;\n    q.push(node);\n    Dijkstra();\n    for(i=1;i<=n;i++){write(dis[i]);putchar(' ');}\n}\n```\n\n",
        "postTime": 1536833983,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5148\u8d34\u4ee3\u7801\uff08~~\u5c0f\u5c0f\u5730\u52a0\u4e86\u4e2a\u5c01\u88c5~~\uff09\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\nusing namespace std;\ntypedef long long int ll;\nconst int maxsize = 200100;\nconst int maxl = 500100;\nint head[maxsize];\nbool isdigit(char ch)\n{\n\tif(ch >= '0' && ch <= '9')\n\t\treturn 1;\n\treturn 0;\n}\ninline int Read()\n{\n\tint data = 0;\n\tchar ch = getchar();\n\twhile(!isdigit(ch))\n\t\tch = getchar();\n\twhile(isdigit(ch))\n\t\tdata = (data << 3) + (data << 1) + ch - '0',ch = getchar();\n\treturn data;\n}\ninline void Display(const int data)\n{\n\tif(data / 10)\n\t\tDisplay(data / 10);\n\tputchar(data % 10 + '0');\n}\nstruct E\n{\n\tint next;\n\tint to;\n\tint val;\n}edge[maxl];\nint c_edge;\nvoid addedge(int u,int v,int val)\n{\n\tedge[++c_edge].next = head[u];\n\tedge[c_edge].to = v;\n\tedge[c_edge].val = val;\n\thead[u] = c_edge;\n}\nint n,m,s;\nint dist[maxsize];\nclass Dijstra\n{\n\tprivate :\n\t\tstruct node\n\t\t{\n\t\t\tint u,dis;\n\t\t\tbool operator <(const node& __comp) const\n\t\t\t{\n\t\t\t\treturn dis > __comp.dis;\n\t\t\t}\n\t\t};\n\t\tbool vis[maxsize];\n\t\tpriority_queue<node> Q;\n\tpublic :\n\t\tvoid Query_min_dist(int pos)\n\t\t{\n\t\t\tdist[pos] = 0;\n\t\t\tQ.push((node){pos,0});\n\t\t\twhile(!Q.empty())\n\t\t\t{\n\t\t\t\tnode H = Q.top();\n\t\t\t\tQ.pop();\n\t\t\t\tint u = H.u,dis = H.dis;\n\t\t\t\tif(vis[u])\n\t\t\t\t\tcontinue;\n\t\t\t\tvis[u] = 1;\n\t\t\t\tfor(int i = head[u];i;i = edge[i].next)\n\t\t\t\t{\n\t\t\t\t\tint To = edge[i].to;\n\t\t\t\t\tif(dist[To] > dist[u] + edge[i].val)\n\t\t\t\t\t{\n\t\t\t\t\t\tdist[To] = dist[u] + edge[i].val;\n\t\t\t\t\t\tif(!vis[To])\n\t\t\t\t\t\t\tQ.push((node){To,dist[To]});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n}Plan_of_Dijstra;\nclass Shortest_Path_Faster_Algorithm\n{\n\tprivate :\n\t\tbool in[maxsize];\n\tpublic :\n\t\tvoid Query_min_dist(int x)\n\t\t{\n\t\t\tfor(int i = 1;i <= n;i++)\n\t\t\t\tdist[i] = 2147483647;\n\t\t\tqueue<int> Q;\n\t\t\tQ.push(x);\n\t\t\tdist[x] = 0;\n\t\t\tin[x] = 1;\n\t\t\twhile(!Q.empty())\n\t\t\t{\n\t\t\t\tint H = Q.front();\n\t\t\t\tQ.pop();\n\t\t\t\tin[H] = 0;\n\t\t\t\tfor(int i = head[H];i;i = edge[i].next)\n\t\t\t\t{\n\t\t\t\t\tint T = edge[i].to;\n\t\t\t\t\tif(dist[T] > dist[H] + edge[i].val)\n\t\t\t\t\t{\n\t\t\t\t\t\tdist[T] = dist[H] + edge[i].val;\n\t\t\t\t\t\tif(in[T] == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tQ.push(T);\n\t\t\t\t\t\t\tin[T] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}Plan_of_SPFA;\nclass Floyd\n{\n\tpublic :\n\t\tll alldist[1010][1010];\n\t\tvoid Query_min_dist(int pos)\n\t\t{\n\t\t\tfor(int k = 1;k <= n;k++)\n\t\t\t\tfor(int i = 1;i <= n;i++)\n\t\t\t\t\tfor(int j = 1;j <= n;j++)\n\t\t\t\t\t\tif(i != j)\n\t\t\t\t\t\t\talldist[i][j] = min(alldist[i][j],alldist[i][k] + alldist[k][j]);\n\t\t\tfor(int i = 1;i <= n;i++)\n\t\t\t\tdist[i] = alldist[pos][i];\n\t\t}\n}Plan_of_Floyd;\nint main()\n{\n\tn = Read();m = Read();s = Read();\n\tfor(int i = 0;i <= n;i++)\n\t\tdist[i] = 2147483647;\n\tif(n <= 1000)\n\t\tfor(int i = 1;i <= n;i++)\n\t\t\tfor(int j = 1;j <= n;j++)\n\t\t\t\tif(i != j)\n\t\t\t\t\tPlan_of_Floyd.alldist[i][j] = 2147483647;\n\tfor(register int i = 1;i <= m;i++)\n\t{\n\t\tint u = Read(),v = Read(),val = Read();\n\t\taddedge(u,v,val);\n\t\tif(n <= 1000)\n\t\t\tPlan_of_Floyd.alldist[u][v] = val;\n\t}\n\tPlan_of_Dijstra.Query_min_dist(s);\n\tPlan_of_SPFA.Query_min_dist(s);\n\tPlan_of_Floyd.Query_min_dist(s);\n\tfor(register int i = 1;i <= n;i++)\n\t\tDisplay(dist[i]),putchar(' ');\n}\n```  \n![](https://cdn.luogu.com.cn/upload/image_hosting/ddan5f5q.png)\n\u8ddd\u79bbCSP-S\u8fd8\u670954\u5929  \n\u849f\u84bb~~\u6000\u7740\u656c\u754f\u7684\u5fc3\u60c5~~\u6765\u590d\u4e60\u6700\u77ed\u8def  \n\u5bf9\u4e8e\u6700\u77ed\u8def  \u5b83\u7684\u5b9a\u4e49\u901a\u8fc7\u767e\u5ea6\u6211\u4eec\u53ef\u77e5\n```\n\u4e24\u8282\u70b9\uff08\u901a\u5e38\u662f\u6e90\u8282\u70b9\u548c\u9631\u8282\u70b9\uff09\u4e4b\u95f4\u603b\u6743\u548c\u6700\u5c0f\u7684\u8def\u5f84\u5c31\u662f\u6700\u77ed\u8def\n```\n# 1.Dijkstra\u7b97\u6cd5  \n\u8be5\u7b97\u6cd5\u4ee5\u7a33\u5b9a\u8457\u79f0\uff0c\u8fd8\u6709\u5b83\u7684\u4f18\u5316\u7248\u6d77\u65af\u7b97\u6cd5  \n\u7eafDij\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u70b9\u5c0f\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u5bf9\u5b83\u7684\u4f18\u5316  \n\uff08\u770b\u5230\u5176\u5b83\u9898\u89e3\u7684\u5404\u79cd\u4f18\u5316\u7b97\u6cd5\uff0c\u4e0d\u89c9\u611f\u53f9\u771f\u7684\u90fd\u592a\u5f3a\u4e86\uff09  \n\u7136\u800c\u6211\u53ea\u4f1a\u5806\u4f18\u5316\n## \u539f\u7406\uff1a  \n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u521d\u59cb\u7684dij\u7b97\u6cd5\uff0c\u65f6\u95f4\u4e3b\u8981\u662f\u6d88\u8017\u5728\u5bf9\u4e8edist\u6570\u7ec4\u7684\u66f4\u65b0  \n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u6570\u7ec4\u538b\u8fdb\u4e00\u4e2a\u5806\u5f53\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230O(logn)\u7684\u65f6\u95f4\u6765\u67e5\u8be2\u8fd9\u4e2adist\u6570\u7ec4  \n\u5176\u5b9e\u9898\u89e3\u699c\u4e00\u5df2\u7ecf\u8bb2\u7684\u5f88\u660e\u767d\u4e86  \n## \u7f3a\u70b9\uff1a\n\u4e0d\u80fd\u8dd1\u8d1f\u6743\u56fe\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u591f\u4e8b\u5148\u201c\u9884\u6d4b\u201d\u5230\u4e0b\u4e00\u4e2a\u70b9\u518d\u8dd1\u4e0b\u4e00\u4e2a\u8fb9\u662f\u5426\u662f\u4e00\u6761\u8d1f\u6743\u8def\uff0c\u53ea\u80fd\u591f\u8d2a\u5fc3\u8d2a\u5230\u5f53\u524d\u8d70\u5230\u7684\u6700\u4f18\u503c\n# 2.SPFA\n\u8be5\u7b97\u6cd5\u4ee5\u5199\u5f97\u5feb\uff0c\u597d\u7406\u89e3\u8457\u79f0\uff0c\u662f\u897f\u5357\u4ea4\u5927\u7684\u6bb5\u51e1\u4e01\u6559\u6388\u57281994\u63d0\u51fa\u7684\u540d\u5b57\uff0c\u4f46\u662f\u56fd\u9645\u4e0a\u57281957\u5e74\u5df2\u7ecf\u6709\u63d0\u51fa\u7528\u961f\u5217\u4f18\u5316SPFA\u7684\u524d\u8eabBellman-Ford\u7b97\u6cd5  \n## \u539f\u7406\uff1a\n\u81ea\u5df1\u8ba4\u4e3a\u662f\u53ef\u4ee5\u7528\u4e00\u70b9\u70b9DP\u7684\u601d\u60f3\u6765\u7406\u89e3\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u653e\u5165\u961f\u5217\u4e2d\uff0c\u5c31\u53ef\u4ee5\u518d\u6b21\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5bf9\u4e8eSPFA\u7684\u5404\u79cd\u4f18\u5316\uff0c\u5176\u5b9e\u6838\u5fc3\u601d\u60f3\u4e5f\u5c31\u662f\u628adist\u653e\u5230\u5806\u7b49\u5404\u79cd\u6570\u636e\u7ed3\u6784\u91cc\uff0c\u8fd9\u6837SPFA\u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u5165\u961f\u7684dij\u7b97\u6cd5  \n## \u7f3a\u70b9\uff1a\n\u5bb9\u6613\u88ab\u201c\u83ca\u82b1\u56fe\u201d\u5361\u6389\uff0c\u83ca\u82b1\u56fe\u53ef\u4ee5\u8ba4\u4e3a\u5c31\u662f\u50cf\u83ca\u82b1\u4e00\u6837\u7684\u4e00\u5f20\u56fe\uff0c\u5c31\u662f\u4e00\u70b9\u591a\u8fb9\uff0c\u8fd9\u6837\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u90fd\u4f1a\u88ab\u6d88\u8017\u5728\u5bf9\u4e8e\u677e\u5f1b\u64cd\u4f5c\u7684\u67e5\u8be2  \n# 3.Floyd\n\u8be5\u7b97\u6cd5\u4ee5\u5199\u5f97\u6700\u5feb\uff0c\u6700\u597d\u7406\u89e3\u95fb\u540d\uff0c\u662f\u7f57\u4f2f\u7279\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u8fd9\u4f4d\u5de8\u4f6c\u63d0\u51fa\u7684  \n\u4ee3\u7801\u53ea\u6709\u77ed\u77ed\u4e94\u884c\uff0c\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u7528\u6765\u6c42\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5bf9\u4e8e\u56fe\u5185\u5404\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u53ef\u4ee5\u6c42\u51fa\u6765\n## \u539f\u7406\uff1a\n\u771f\u6b63\u7684DP\u601d\u60f3\uff0c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5c31\u662f\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u8d70\u5230\u53e6\u5916\u4e00\u4e2a\u70b9\uff0c\u662f\u600e\u6837\u8d70\u6700\u77ed\u7684\u64cd\u4f5c\u90a3\u4e48\u53cd\u8fc7\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u5230\u5e95\u53ef\u4ee5\u677e\u5f1b\u591a\u5c11\u4e2a\u70b9\u5bf9\uff0c\u4e8e\u662fFloyd\u7b97\u6cd5\u5c31\u8fd9\u6837\u51fa\u6765\u4e86\n## \u7f3a\u70b9\uff1a\n\u7a7a\u95f4\u6700\u5927\uff0c\u65f6\u95f4\u6700\u5927\uff0c\u867d\u7136\u62ab\u7740\u52a8\u6001\u89c4\u5212\u7684\u5916\u8863\uff0c\u4f46\u786e\u786e\u5b9e\u5b9e\u662f\u6700\u66b4\u529b\u7684\u5199\u6cd5  \n\u4f46\u662f\u5bf9\u4e8e\u5c0f\u6570\u636e\u5e38\u5e38\u6709\u5947\u6548  \n# \u603b\u7ed3\uff1a\n\u5bf9\u4e8e\u4e09\u79cd\u5e38\u7528\u7684\u7b97\u6cd5\u6211\u4eecOier\u90fd\u8981\u638c\u63e1\u5f97\u719f\u7ec3\uff0c\u9898\u76ee\u4e2d\u90fd\u8981\u8ba4\u771f\u7684\u52a0\u4ee5\u8fa8\u522b\uff0c\u4e2a\u4eba\u63a8\u8350\u523715\u5e74\u4ee5\u524d\u7684\u9898\u76ee\u5927\u591a\u90fd\u53ef\u4ee5\u7528SPFA\u7b97\u6cd5\uff0c\u7136\u800c\u4e4b\u540e\u201cSPFA\u5df2\u6b7b\u201d\uff0c\u6700\u597d\u8fd8\u662f\u7528dij\u7b97\u6cd5\u5566  \n# \u6700\u540e\n```\nwhile (1)\nCSP2019.rp++,CSP2019.score++;\n```\n",
        "postTime": 1569151920,
        "uid": 181870,
        "name": "\u70b3\u6e90",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "## \u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff01\n\u6c42\u6700\u77ed\u8def\u6838\u5fc3\u6b65\u9aa4\uff1arelax\u677e\u5f1b\u64cd\u4f5c\n\n\n![](https://i.loli.net/2019/06/27/5d145b659fbf762565.png)\n\n```\nif(map[A][B]+map[B][C]<map[A][C])\n{\n\tmap[A][C]=map[A][B]+map[B][C];\n}\n```\n\u8fd9\u91cc\u4ecb\u7ecd3\u79cd\u7b97\u6cd5\uff1a\n\n\n------------\n\n### 1.dijkstra:\n\u7b97\u6cd5\u6b65\u9aa4\uff1a\n1.\u627e\u5230\u79bb\u8d77\u70b9x**\u6700\u8fd1**\u7684**\u672a\u8ba8\u8bba**\u7684\u70b9k\n\n**2.\u5224\u65ad\u7ecf\u8fc7k\u70b9\uff0c \u8d77\u70b9x\u5230\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u662f\u5426\n\u7f29\u77ed\uff0c \u5982\u7f29\u77ed\u5219\u66f4\u65b0\u3002 \u5c06k\u70b9\u6807\u8bb0\u4e3a\u5df2\u8ba8\u8bba\u3002(relax)**\n\n3.\u8fd4\u56de\u7b2c1\u6b65\uff0c \u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u8ba8\u8bba\u8fc7\u3002\n\n##### \u4e0d\u80fd\u5904\u7406\u8d1f\u6743\uff01\uff01\uff01\n#### \u4e0d\u80fd\u5904\u7406\u8d1f\u6743\uff01\uff01\uff01\n### \u4e0d\u80fd\u5904\u7406\u8d1f\u6743\uff01\uff01\uff01\n#### \u6734\u7d20\u7248\uff1a\n\n### O\uff08n*n\uff09\n```\n#include<iostream>\nusing namespace std;\nconst int inf=100000001;int mini,k;\nint map[101][101],dis[101],mark[101];\nvoid dijkstra(int x)//\u6c42\u4ecex\u70b9\u51fa\u53d1\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n{\n\t////////\u521d\u59cb\u5316////////\n\tfor(i=1; i<=n; i++)//\u521d\u59cb\u5316\u6570\u636e \n\t{\n\t\tdis[i]=map[x][i];//mark\u8bb0\u5f55\u7b2ci\u53f7\u8282\u70b9\u662f\u5426\u8ba8\u8bba\u8fc7 \n\t\tmark[i]=false;//\u521d\u59cb\u5316dis\u6570\u7ec4\uff0cdis\u3010i\u3011\u8bb0\u5f55\u8d77\u70b9x\u5230\u70b9i\u7684\u8ddd\u79bb \n\t}\n\tmark[x]=1;//\u8ba8\u8bba\u8d77\u70b9\n\t////////\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b////////\n\twhile(1)\n\t{\n\t\tmini=inf;//inf\u4e3a\u81ea\u5b9a\u4e49\u5e38\u91cf\u8868\u793a\u65e0\u7a77\u5927\uff0c\u4f8b\u5982const int inf=999999999 \n\t\tk=0;//k\u8bb0\u5f55\u79bbx\u6700\u8fd1\u7684\u7f16\u53f7 \n\t\tfor(i=1; i<=n; i++)//\u5bfb\u627e\u5f53\u524d\u79bbx\u6700\u8fd1\u4e14\u672a\u8ba8\u8bba\u7684\u70b9 \n\t\t{\n\t\t\tif(mark[i]==0&&dis[i]<mini)\n\t\t\t{\n\t\t\t\tmini=dis[i]; \n\t\t\t\tk=i;\n\t\t\t}\n\t\t}\n\t\t//\u8ba8\u8bbak\u4e3a\u4e2d\u8f6c\u70b9\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u70b9\u5230x\u7684\u8ddd\u79bb\u7f29\u77ed\n\t\tif(k>0)\n\t\t{\n\t\tmark[k]=1;//\u70b9k\u5df2\u8ba8\u8bba\u8fc7 \n\t\t\tfor(i=1; i<=n; i++)//\u8ba8\u8bba\u6bcf\u4e2a\u70b9\uff0c\u82e5\u8ddd\u79bb\u7f29\u77ed\u66f4\u65b0dis\u3010i\u3011\n\t\t\t{\n\t\t\t\tif(dis[k]+map[k][i]<dis[i])\n\t\t\t\t{\n\t\t\t\t\tdis[i]=dis[k]+map[k][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse break;//k==0\u8868\u662f\u5168\u90e8\u8ba8\u8bba\u8fc7\u4e86 \n\t}\n}\nint main()\n{\n\tint i,j,n,m,x,y,a,b,c;\n\tcin>>n>>m;\n\tfor(i=1; i<=n; i++)\n\t{\n\t\tfor(j=1; j<=n; j++)\n\t\t{\n\t\t\tif(i==j)\n\t\t\t{\n\t\t\t\tmap[i][j]=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmap[i][j]=inf;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1; i<=m; i++)\n\t{\n\t\tcin>>a>>b>>c;\n\t\tmap[a][b]=c;\n\t}\n\tcin>>x>>y;\n\tdis[x]=0;\n\tdijkstra(x);\n\tcout<<dis[y];\n\treturn 0;\n}\n```\n#### \u4f18\u5316\u7248\uff1a\n\n\u5806\u4f18\u5316+vector\n\nvector\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u52a8\u6001\u6570\u7ec4\u3002\u968f\u673a\u5b58\u53d6\u4efb\u4f55\u5143\u7d20\u90fd\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5b8c\u6210\u3002\n\u5728\u5c3e\u7aef\u589e\u5220\u5143\u7d20\u5177\u6709\u8f83\u4f73\u7684\u6027\u80fd,\u4f46\u5728\u4e2d\u95f4\u63d2\u5165\u6162\u3002\u5b83\u91cc\u9762\u5b58\u50a8\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002\n\n#include<vector>\n\u5e38\u7528\u51fd\u6570\uff1a\npush_back()\uff0d\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20e,\u6570\u7ec4\u957f\u5ea6\u81ea\u52a8+1\n\npop_back()\uff0d\u5220\u9664\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20,\u4f46\u65e0\u8fd4\u56de\u503c,\u6570\u7ec4\u957f\u5ea6\u81ea\u52a8-1\n  \nfront()\uff0d\u5f97\u5230\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\n  \nback()-\u5f97\u5230\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n  \nsize()-\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\n  \nempty()-\u5224\u65ad\u6570\u7ec4\u662f\u5426\u4e3a\u7a7a\n  \nclear()-\u6e05\u7a7a\u6574\u4e2a\u6570\u7ec4\n\n\u53ef\u7528\u4e0b\u6807\u6765\u4fee\u6539**\u5df2\u5b58\u5728**\u7684\u5143\u7d20\n\n### O\uff08n*logn\uff09\n**\u5e38\u6570\u7565\u5927**\n```\n#include<stdio.h>\n#include<vector>\n#include<queue>\n#define maxn 101\n#define I inline\n#define R register\n#define inf 0x7ffff\nusing namespace std;\nint n,m,x,y,z,dis[maxn];\nbool mark[maxn];\nstruct node\n{\n\tint num,dis;\n\tbool operator<(const node &a) const\n\t{\n\t\treturn a.dis<dis;\n\t}\n};\nstruct map\n{\n\tint end;\n\tint len;\n} edge;\nvector<map> g[maxn];\nI void dijkstra(int s)\n{\n\tint t;\n\tpriority_queue<node> q;\n\tnode tmp;\n\ttmp.num=s;\n\ttmp.dis=0;\n\tq.push(tmp);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().num;\n\t\tq.pop();\n\t\tif(mark[u])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tmark[u]=true;\n\t\tfor(int i=0; i<g[u].size(); i++)\n\t\t{\n\t\t\tint v=g[u][i].end;\n\t\t\tint l=g[u][i].len;\n\t\t\tif(dis[v]>dis[u]+l)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+l;\n\t\t\t\ttmp.num=v;\n\t\t\t\ttmp.dis=dis[v];\n\t\t\t\tq.push(tmp);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(R int i=1; i<=n; i++)\n\t{\n\t\tdis[i]=inf;\n\t}\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tedge.end=y;\n\t\tedge.len=z;\n\t\tg[x].push_back(edge);\n\t}\n\tscanf(\"%d%d\",&x,&y);\n\tdis[x]=0;\n\tdijkstra(x);\n\tprintf(\"%d\",dis[y]);\n\treturn 0;\n}\n```\n\n\u5806\u4f18\u5316+\u94fe\u5f0f\u524d\u5411\u661f\n\n### O\uff08n*logn\uff09\n\n\u4ee3\u7801\u7c7b\u4f3c\uff0c\u8bb2\u4e00\u4e0b\u94fe\u5f0f\u524d\u5411\u661f\u3002\n```\n#define maxm 1000000\n#define maxn 10000\nint Next[maxm],end[maxm],len[maxm],last[maxn];\n//Next[i]\u8868\u793a\u8ddf\u7b2ci\u6761\u8fb9\u6709\u76f8\u540c\u8d77\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\n//last[x]\u8868\u793a\u4ee5x\u4e3a\u8d77\u70b9\u7684\u8fb9\u6700\u65b0\u4e00\u6761\u7684\u8fb9\u7684\u7f16\u53f7\ncin>>n>>m;\nfor(int i=1; i<=m; i++)\n{\n\tscanf(\"%d%d%d\",&x,&y,&z);\n\tend[i]=y;\n\tlen[i]=z;\n\tNext[i]=last[x];\n\tLast[x]=i;\n}\n```\n\n\n------------\n                      \n### 2.SPFA\n                  \nspfa\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u3002\n                      \nSPFA\u662fBellman-Ford\u7b97\u6cd5\u7684\u4e00\u79cd\u961f\u5217\u5b9e\u73b0\uff0c\u51cf\u5c11\u4e86\u4e0d\u5fc5\u8981\u7684\u5197\n\u4f59\u8ba1\u7b97\u3002\n                  \n\u7b97\u6cd5\u6d41\u7a0b:\n                  \n\u7528\u4e00\u4e2a\u961f\u5217\u6765\u8fdb\u884c\u7ef4\u62a4\u3002\u521d\u59cb\u65f6\u5c06\u8d77\u70b9\u52a0\u5165\u961f\u5217\u3002\u6bcf\u6b21\u4ece\u961f\n\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u5bf9\u6240\u6709\u4e0e\u4ed6\u76f8\u90bb\u7684\u70b9\u8fdb\u884c\u677e\u5f1b\uff0c\u82e5\u67d0\u4e2a\u76f8\n\u90bb\u7684\u70b9\u677e\u5f1b\u6210\u529f\uff08\u5230\u8d77\u70b9\u8ddd\u79bb\u7f29\u77ed\uff09\uff0c\u5219\u5c06\u5176\u5165\u961f\u3002\u76f4\u5230\u961f\u5217\u4e3a\n\u7a7a\u65f6\u7b97\u6cd5\u7ed3\u675f\u3002\n                  \n\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u961f\u5217\u4f18\u5316\u7684bellman-ford,\u5229\u7528\u4e86\u6bcf\u4e2a\u70b9\u4e0d\u4f1a\u66f4\u65b0\u6b21\u6570\u592a\u591a\u7684\u7279\u70b9\u3002\n                  \nSPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(kE) k\u4e00\u822c\u53d62\u5de6\u53f3\uff08k\u662f\u589e\u957f\u5f88\u5feb\u7684\u51fd\u6570ackermann\u7684\u53cd\u51fd\u6570,2^65536\u6b21\u65b9\u4e5f\u5c315\u4ee5\u4e0b \uff09,\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u3002\n                  \nSPFA\u7684\u5b9e\u73b0\u751a\u81f3\u6bd4Dijkstra\u6216\u8005 Bellman_Ford\u8fd8\u8981\u7b80\u5355\u3002\n                      \n```\n#include<stdio.h>\n#include<queue>\n#define maxn 101\n#define R register\n#define inf 0x7ffffff\nusing namespace std;\nint n,m,x,y,z;\nqueue<int> q;\nint dis[maxn],map[maxn][maxn];\nbool f[maxn];\nvoid spfa(int s)\n{\n\tfor(R int i=1; i<=n; i++)\n\t{\n\t\tdis[i]=inf;\n\t}\n\tq.push(s);\n\tf[s]=true;\n\tdis[s]=0;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tf[x]=false;\n\t\tfor(R int i=1; i<=n; i++)\n\t\t{\n\t\t\tif(dis[x]+map[x][i]<dis[i])\n\t\t\t{\n\t\t\t\tdis[i]=dis[x]+map[x][i];\n\t\t\t\tif(!f[i])\n\t\t\t\t{\n\t\t\t\t\tq.push(i);\n\t\t\t\t\tf[i]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(R int i=1; i<=n; i++)\n\t{\n\t\tfor(R int j=1; j<=n; j++)\n\t\t{\n\t\t\tmap[i][j]=inf;\n\t\t}\n\t}\n\tfor(R int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tmap[x][y]=z;\n\t}\n\tscanf(\"%d%d\",&x,&y);\n\tspfa(x);\n\tprintf(\"%d\",dis[y]);\n\treturn 0;\n}\n```\nmap\u53ef\u4ee5\u4f18\u5316\uff0c\u4e0edijkstra\u7c7b\u4f3c\u3002\n###### (~~\u6211\u5c31\u4e0d\u8d34\u4e86~~)\n  \n**\u7528spfa\u5224\u8d1f\u6743\u56de\u8def\uff1a\u5982\u679c\u4efb\u610f\u4e00\u6761\u8fb9\u88ab\u4fee\u6539\u5927\u4e8en-1\u6b21\uff0c\u5c31\u4ee3\u8868\u8fd9\u4e2a\u56fe\u5185\u4e00\u5b9a\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u8d1f\u6743\u56de\u8def\u3002**\n  \nspfa\u5bb9\u6613\u88ab\u5361\uff0c\u5361spfa\u7684\u56fe\u53eb\u83ca\u82b1\u56fe\u3002\n  \n\u4f8b\u5982\uff1a\n  \n![](https://i.loli.net/2019/06/27/5d14656e5d50368069.png)\n  \nfloyd:\n  \nfloyd\u80cc\u540e\u662f\u77e9\u9635\u4e58\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u8bb2\u4e86\u3002\n  \nfloyd\u662f\u6c42\u591a\u6e90\u6700\u77ed\u8def\u5f84\u3002\n  \n\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u3002\n  \n### O(n* n *n);\n```\nfor(k=1; k<=n; k++)\n\t{\n\t\tfor(i=1; i<=n; i++)\n\t\t{\n\t\t\tfor(j=1; j<=n; j++)\n\t\t\t{\n\t\t\t\tif(m[i][j]>m[i][k]+m[k][j])\n\t\t\t\t{\n\t\t\t\t\tm[i][j]=m[i][k]+m[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\u662f\u5426\u53ef\u4ee5\u8c03\u6362k\u7684\u4f4d\u7f6e\uff1f\u5199\u6210\u4e0b\u5217\u5f62\u5f0f\uff1a\n```\nfor(i=1; i<=n; i++)\n\t{\n\t\tfor(j=1; j<=n; j++)\n\t\t{\n\t\t\tfor(k=1; k<=n; k++)\n\t\t\t{\n\t\t\t\tif(m[i][j]>m[i][k]+m[k][j])\n\t\t\t\t{\n\t\t\t\t\tm[i][j]=m[i][k]+m[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}  \n```\n\u95ee\u9898\u51fa\u5728\u6211\u4eec\u592a\u65e9\u7684\u628ai\u2014k\u2014j\u7684\u8ddd\u79bb\u786e\u5b9a\u4e0b\u6765\u4e86\uff0c\u5047\u8bbe\u4e00\u65e6k=p\u65f6\uff0c\u627e\u5230\u4e86i\u2014p\u2014j\u4e3a\u6700\u77ed\u7684\u8ddd\u79bb\u540e\uff0ci\u5230j\u5c31\u76f8\u5f53\u5904\u7406\u5b8c\u4e86\uff0c\u4ee5\u540e\u4e0d\u4f1a\u518d\u6539\u53d8\u4e86\uff0c\u4e00\u65e6\u4ee5\u540e\u6709\u4f7fi\u5230j\u7684\u66f4\u77ed\u7684\u8ddd\u79bb\u65f6\u4e5f\u4e0d\u80fd\u518d\u53bb\u66f4\u65b0\u4e86\uff0c\u6240\u4ee5\u7ed3\u679c\u4e00\u5b9a\u662f\u4e0d\u5bf9\u7684\u3002\n\nfloyd\u592a\u6162,\u6b64\u9898\u4e0d\u7528\u3002",
        "postTime": 1561617821,
        "uid": 164437,
        "name": "yeaDonaby",
        "ccfLevel": 0,
        "title": "P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09"
    },
    {
        "content": "\u505a\u8fd9\u5230\u9898\u524d\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0bdijkstra\u7b97\u6cd5\u601d\u8def\u548c\u4ee3\u7801\n![](https://img-blog.csdn.net/20170519112913377?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbWFqb3Jfemhhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\u5982\u4e0a\u56fe\uff0c\u4ece\u70b9A->\u70b9F\uff0c\u6700\u77ed\u8def\u5f84\u4e3aA->C->D->F\uff0cMin=3+3+3=9\n\ndfs\u5728\u56fe\u8bba\u4e2d\u4e00\u76f4\u5360\u636e\u7740\u91cd\u8981\u7684\u89d2\u8272\u3002\u53ef\u6269\u5c55\u5230\u56fe\u8bba\u4e2d\u5272\u9876\uff0c\u6865\uff0c\u62d3\u6251\uff0c\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u95ee\u9898\u7684\u89e3\u51b3\u4e0a\u3002\u5728\u505a\u4e00\u4e9b\u7b97\u6cd5\u9898\u76ee\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6df1\u641c\u611f\u89c9\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u641c\u7d22\u7c7b\u9898\u76ee\u4e86\uff0c\u4f46\u662f\u6df1\u641c\u96be\u5728\u526a\u679d\uff0c\u526a\u679d\u53ef\u4ee5\u51cf\u5c11\u5927\u91cf\u4e0d\u5fc5\u8981\u7684\u641c\u7d22\u8fc7\u7a0b\u3002\n\n## \u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684Dijkstra\u7b97\u6cd5\u7684\u4ee3\u7801\uff1a\n[P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09](https://www.luogu.org/problemnew/show/P3371)\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint n,m,s;\nint st[11000],tot=0;\nstruct node\n{\n    int to,last,val;\n}e[510000];\nqueue<int> q;\nint dis[11000];\nbool judge[11000];\nvoid dij()\n{\n    memset(dis,0x7f,sizeof(dis));\n    dis[s]=0;\n    int u=s;\n    while(!judge[u])\n    {\n    \tjudge[u]=true;\n    \tfor(int i=st[u];i!=0;i=e[i].last)\n    \t{\n    \t\tint v=e[i].to;\n    \t\tif(dis[v]>dis[u]+e[i].val)\n    \t\t\tdis[v]=dis[u]+e[i].val;\n        }\n        int minn=2147483647;\n        for(int i=1;i<=n;i++)\n            if(!judge[i]&&dis[i]<minn)\n            {\n                u=i;\n                minn=dis[i];\n            }\n    }\n}\nvoid add(int a,int b,int c)\n{\n    e[++tot].to=b;\n    e[tot].val=c;\n    e[tot].last=st[a];\n    st[a]=tot;\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&s);\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,w;\n        scanf(\"%d %d %d\",&a,&b,&w);\n        add(a,b,w);\n    }\n    dij();\n    for(int i=1;i<=n;i++)\n        if(dis[i]==2139062143)\n            printf(\"2147483647 \");\n        else\n            printf(\"%d \",dis[i]); \n    return 0;\n}\n```\nDij\u7b97\u6cd5\u662f\u57fa\u4e8e\u5e7f\u641c\uff0c\u677e\u5f1b\u7684\u65f6\u5019\u6709\u70b9\u8d2a\u5fc3\u548c\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u3002\n\n\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u5b9e\u73b0\u7684dijkstra\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662fO(V\u00b2)\u3002\u4f7f\u7528\u90bb\u63a5\u8868\u7684\u8bdd\uff0c\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\u53ea\u9700\u8981\u8bbf\u95ee\u6bcf\u6761\u8fb9\u4e00\u6b21\u5373\u53ef\uff0c\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662fO(E).\u4f46\u662f\u6bcf\u6b21\u8981\u679a\u4e3e\u6240\u6709\u7684\u9876\u70b9\u6765\u67e5\u627e\u4e0b\u4e00\u4e2a\u4f7f\u7528\u7684\u9876\u70b9\uff0c\u56e0\u6b64\u6700\u7ec8\u590d\u6742\u5ea6\u8fd8\u662fO(V\u00b2)\u3002\u5728|E|\u6bd4\u8f83\u5c0f\u65f6\uff0c\u5927\u90e8\u5206\u7684\u65f6\u95f4\u90fd\u82b1\u5728\u4e86\u67e5\u627e\u4e0b\u4e00\u4e2a\u4f7f\u7528\u7684\u9876\u70b9\u4e0a\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4f18\u5316\u3002\n\n\u5806\u4f18\u5316+dijkstra\u7b97\u6cd5\n\n\u5806\u7684\u5b9e\u73b0\u539f\u7406\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u4e86\uff0c\u5728\u5f88\u591a\u4e66\u91cc\u9762\u90fd\u6709\u8be6\u7ec6\u4ecb\u7ecd\u3002\n\n\u4e0b\u9762\u662f\u624b\u6253\u5806\u5b9e\u73b0\u3002\u5728\u6bcf\u6b21\u66f4\u65b0\u65f6\u5f80\u5806\u91cc\u63d2\u5165\u5f53\u524d\u6700\u77ed\u8ddd\u79bb\u548c\u9876\u70b9\u7684\u503c\u5bf9\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define N 110000\n#define M 1000000\nusing namespace std;\nint n,m,s;\nint st[N+1],tot;\nstruct edge\n{\n    int to,last,val;\n}e[M+1];\nvoid add(int a,int b,int c)\n{\n    e[++tot].to=b;\n    e[tot].val=c;\n    e[tot].last=st[a];\n    st[a]=tot;\n}\nint num;\nstruct node\n{\n    int pos,dis;\n}heap[5*N+1];\nvoid up(int x)\n{\n    while(x!=1&&heap[x].dis<heap[x/2].dis)\n    {\n        swap(heap[x],heap[x/2]);\n        x/=2;\n    }\n}\nvoid down(int x)\n{\n    while(heap[x].dis>heap[2*x].dis&&2*x<=num||heap[x].dis>heap[2*x+1].dis&&2*x+1<=num)\n    {\n        int y=2*x;\n        if(heap[y+1].dis<heap[y].dis&&y+1<=num)\n            y++;\n        swap(heap[x],heap[y]);\n        x=y;\n    }\n}\nvoid insert(int x,int b)\n{\n    heap[++num].dis=x;\n    heap[num].pos=b;\n    up(num);\n}\nint dis[N+1];\nbool judge[N+1];\nvoid dij()\n{\n    for(int i=1;i<=n;i++)\n        dis[i]=2147483647;\n    dis[s]=0;\n    insert(0,s);\n    while(num!=0)\n    {\n        node p=heap[1];\n        heap[1]=heap[num--];\n        down(1);\n        int u=p.pos;\n        if(judge[u]||dis[u]!=p.dis)\n            continue;\n        judge[u]=true;\n        for(int i=st[u];i!=0;i=e[i].last)\n        {\n            int v=e[i].to;\n            if(dis[v]>dis[u]+e[i].val)\n            {\n                dis[v]=dis[u]+e[i].val;\n                if(!judge[v])\n\t                insert(dis[v],v);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&s);\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        scanf(\"%d %d %d\",&a,&b,&c);\n        add(a,b,c);\n    }\n    dij();\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n\u540e\u8bb0\n\n\u672c\u6587\u90e8\u5206\u5185\u5bb9\u6458\u81ea[https://blog.csdn.net/major_zhang/article/details/72519233](https://blog.csdn.net/major_zhang/article/details/72519233)",
        "postTime": 1548682991,
        "uid": 111475,
        "name": "doctorZ_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "## \u3010pascal\u9898\u89e3\u3011\n\u4e0a\u6b21\u90a3\u4e2a\u5f31\u5316\u7248\u7684\u5806\u4f18\u5316\u52a0\u4e86\u4f3c\u4e4e\u8ddf\u6ca1\u52a0\u4e00\u6837[\u5f31\u5316\u7248](https://www.luogu.org/problemnew/show/P3371)\uff08\u539f\u8c05\u6211\u4e00\u4e2a\u849f\u84bb\u6311\u4e86\u51e0\u4e2a\u665a\u4e0a\u624d\u8c03\u51fa\u6765\u2026\u2026\uff09\u5176\u5b9e\u5c31\u662f\u628a\u6570\u7ec4\u5f00\u5927\uff0c\u5728\u5f31\u5316\u7248\u7684\u57fa\u7840\u4e0a\u7ef4\u62a4\u5c0f\u6839\u5806\u65f6\u5224\u65ad\u70b9\u662f\u5426\u5df2\u7ecf\u5728\u5806\u4e2d\u5373\u53ef\uff0c\u5982\u679c\u5728\u5806\u4e2d\uff0c\u5219\u66f4\u6539heap\u503c\uff0c\u5426\u5219\u52a0\u5165\u961f\u5217\u3010\u8be6\u89c1\u4ee3\u7801\u3011\u3002\n\n\u4ee3\u7801\uff1a\n```\n  var n,m,k,ledge,i,b,x,y,z:longint;\n      ff,head,num:array[0..200001]of longint;\n      //\u6bd4\u4e0a\u6b21\u591a\u4e86\u4e2aff\u8bb0\u5f55\u662f\u5426\u5728\u5806\u4e2d\n      heap,dis:array[0..200001]of int64;\n      edge:array[0..200001]of record\n        y,nxt,z:longint;\n      end;\n  procedure swap(var a,b:longint);\n  var t:longint;\n  begin\n        t:=a;a:=b;b:=t;\n  end;\n\n\n  procedure swap1(var a,b:int64);\n  var t:int64;\n  begin\n        t:=a;a:=b;b:=t;\n  end;\n\n\n  procedure add(x,y,z:longint);\n  begin\n        inc(ledge);\n        edge[ledge].y:=y;\n        edge[ledge].z:=z;\n        edge[ledge].nxt:=head[x];\n        head[x]:=ledge;\n  end;  //\u94fe\u5f0f\u524d\u5411\u661f\u50a8\u5b58\n\n\n  procedure insert(a,x:longint);\n  var i:longint;\n  begin\n        if ff[x]<>0 then  //\u5982\u679c\u5df2\u7ecf\u5728\u5806\u4e2d\uff0c\u8fd4\u56de\u5806\u4e2d\u4f4d\u7f6e\n        begin\n                heap[ff[x]]:=a;\n                i:=ff[x];\n        end\n        else\n        begin\n                inc(heap[0]);\n                heap[heap[0]]:=a;\n                num[heap[0]]:=x;\n                i:=heap[0];\n                ff[x]:=heap[0];\n        end;\n        while (i div 2>0)and(heap[i]<heap[i div 2]) do\n        begin\n                swap(ff[num[i]],ff[num[i div 2]]);\n                swap1(heap[i],heap[i div 2]);\n                swap(num[i],num[i div 2]);\n                i:=i div 2;\n        end;\n  end;\n\n\n  procedure del;\n  var mid,i:longint;\n  begin\n        ff[num[1]]:=0;  //\u5f39\u51fa\u5806\u9876\u5143\u7d20\n        heap[1]:=heap[heap[0]];\n        num[1]:=num[heap[0]];\n        dec(heap[0]);\n        i:=1;\n        if (heap[i*2]<heap[i*2+1])or(i*2=heap[0]) then mid:=i*2\n        else mid:=i*2+1;\n        while (mid<=heap[0])and(heap[mid]<heap[i]) do\n        begin\n                swap(ff[num[i]],ff[num[mid]]);\n                swap1(heap[i],heap[mid]);\n                swap(num[i],num[mid]);\n                i:=mid;\n                if (heap[i*2]<heap[i*2+1])or(i*2=heap[0]) then mid:=i*2\n                else mid:=i*2+1;\n        end;\n  end;\n\n\n  begin\n        readln(n,m,k);\n        for i:=1 to m do\n        begin\n                readln(x,y,z);\n                add(x,y,z);\n        end;\n        fillchar(dis,sizeof(dis),$7f);\n        dis[k]:=0;\n        b:=k;\n        heap[0]:=1;heap[1]:=0;num[1]:=k;\n        while heap[0]<>0 do\n        begin\n                i:=head[b];\n                while i<>0 do\n                begin\n                        if dis[b]+edge[i].z<dis[edge[i].y] then\n                        begin\n                                dis[edge[i].y]:=dis[b]+edge[i].z;\n                                insert(dis[edge[i].y],edge[i].y);\n                        end;\n                        i:=edge[i].nxt;\n                end;\n                del;\n                b:=num[1];\n        end;\n        for i:=1 to n do\n                write(dis[i],' ');\n        writeln;\n  end.\n```\n\n\n\u63a8\u5e7f\uff1a[\u3010\u849f\u84bb\u7684\u535a\u5ba2 \u6b22\u8fce\u6765\u8e29\u3011](https://www.luogu.org/blog/czxshenshen/)",
        "postTime": 1534455533,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u5b66\u4e60\u7b14\u8bb0\u3011Dijkstra\u5806\u4f18\u5316"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u96be\u5ea6~~\u84dd\u7684\u6709\u70b9\u8fc7\u5206\u4e86\u5427~~\n\n\u53ea\u8981\u5806\u4f18\u5316\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u5c31\u53ef\u4ee5\u8fc7\u4e86,\u8bf4\u767d\u4e86\u5e94\u8be5\u4e5f\u5c31\u662f\u9053~~\u7eff\u9898~~\n\n==================\u95f2\u8bdd\u5206\u5272\u7ebf,\u5fd9\u7684\u540c\u5b66\u53ef\u76f4\u63a5\u8df3\u8fc7\n\nNOI Day return\u524d\u51e0\u5929\u6bd4\u8d5b\u65f6\u6253\u4e86\u4e2a\u66b4\u529b(\u8fea\u6770\u65af\u7279\u62c9+\u5e76\u67e5\u96c6+LCA),\u672c\u4ee5\u4e3a\u53ef\u4ee5\u6c34\u81f3\u5c1150\u5206\u7684,\u7ed3\u679c\u6587\u4ef6\u8f93\u5165\u540d\u6253\u9519\u4e86,\u76f4\u63a5\u72060,\u4ea4\u5230\u6d1b\u8c37\u6765\u597d\u6b79\u4e5f\u670965\u5206(woc\u6211\u768465\u5206\u554a)\n\n\u597d\u7684,~~\u95f2\u8bdd\u626f\u5b8c\u4e86~~,\u73b0\u5728\u6765\u56de\u5230\u6b63\u9898~~\u662f\u8c01\u6ca1\u4e8b\u5728\u54ea\u626f\u95f2\u8bdd~~,\u8fd9\u9898\u53ea\u8981\u7528\u90bb\u63a5\u94fe\u8868\u5b58\u56fe,\u7136\u540e\u5806\u4f18\u5316\u5c31\u53ef\u4ee5\u4e86(~~\u4e0d\u77e5\u9053\u9898\u9762\u91cc\u7684\u5de8\u4f6c\u662f\u600e\u4e48\u6253\u7684~~,\u4e5f\u8bb8\u4ed6\u7528\u7684\u662fSPFA,\u8bdd\u8bf4SPFA\u6700\u6162\u53ef\u4ee5\u5361\u5230O(n^2)\u6ca1\u4eba\u53d1\u73b0\u5417),~~\u8fd9\u6b21\u51fa\u9898\u4eba\u5c31\u76f4\u63a5\u5728\u5c06\u9898\u65f6\u76f4\u63a5\u8bf4SPFA\u6b7b\u4e86~~\n\n================\u5f3a\u884c\u62c9\u56de\u6b63\u9898\n\n\u6240\u4ee5\u8bf4\u6bd4\u8d5b\u65f6\u5982\u679c\u6c42\u7a33(\u65f6\u95f4\u590d\u6742\u5ea6\u5141\u8bb8)\u7684\u8bdd\u8fd8\u662f\u5c3d\u91cf\u4f7f\u7528\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\n\n\u4e0b\u9762\u662fA\u6389\u7684\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<long long,int>P;\nint n,m,s,head[100001],next[200001],v[200001],w[200001];//\u90bb\u63a5\u94fe\u8868\u5b58\u8fb9\n//v[i]\u4e3a\u7b2ci\u6761\u8fb9\u5bfc\u5411\u7684\u70b9,w[i]\u4e3a\u7b2ci\u6761\u8fb9\u7684\u6743\u503c\nlong long _min[100001];//\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\npriority_queue<P,vector<P>,greater<P> >que;//\u5806\u4f18\u5316\nint read()\n{\n    char ch=getchar();\n    int x=0,f=1;\n    while(ch>'9'||ch<'0')\n    {\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n        {\n        x=(x<<3)+(x<<1)+(ch^48);\n        ch=getchar();\n        }\n    return x*f;\n}\nint main()\n{\n    n=read();\n    m=read();\n    s=read();\n    for(int i=1;i<=m;i++)\n    {\n        int x=read(),y=read(),z=read();//\u8f93\u5165\u5b58\u8fb9\n        next[i]=head[x];\n        head[x]=i;\n        v[i]=y;\n        w[i]=z;\n    }\n    fill(_min+1,_min+n+1,100000000000);//\u521d\u59cb\u5316\n    _min[s]=0;\n    que.push(P(0,s));\n    while(!que.empty())\n    {\n        P x=que.top();\n        que.pop();\n        if(x.first>_min[x.second])\n            continue;//\u5927\u4e8e\u5c31\u76f4\u63a5\u8df3\u8fc7,\u56e0\u4e3a\u8fd9\u80af\u5b9a\u4e0d\u662f\u6700\u77ed\u8def\u4e86\n        for(int i=head[x.second];i!=0;i=next[i])\n        {\n            if(x.first+w[i]<_min[v[i]])\n            {\n                _min[v[i]]=x.first+w[i];\n                que.push(P(_min[v[i]],v[i]));//\u66f4\u65b0\n            }\n        }\n    }\n    for(int i=1;i<=n;i++)\n        printf(\"%lld \",_min[i]);\u8f93\u51fa\n    return 0;//\u5b8c\u7f8e\u6492\u82b1\n}\n```\n============\n\u9898\u5916\u8bdd: \u672c\u6b21NOI\u96be\u5ea6\u9002\u4e2d,\u4ee3\u7801\u957f\u5ea6\u4e2d\u7b49,\u9898\u76ee\u8c28\u9632AK\u4e0e\u72060,\u8003\u8651\u4eba\u7fa4\u5e7f,\u4e3a\u51fa\u9898\u4eba\u70b9\u4e2a\u8d5e.",
        "postTime": 1532352502,
        "uid": 88567,
        "name": "lzk5627",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "dijkstra\u7684\u9898\u89e3\u633a\u591a\u7684\u6211\u5c31\u4e0d\u63d0\u4ea4\u89e3\u91ca\u4e86\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u4f7f\u7528template\u6765\u91cd\u5b9a\u4e49stl\u7684\u60f3\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053priority_queue\u9ed8\u8ba4\u5927\u6839\u5806\uff0c\u4f46\u662f\u4e5f\u7ed9\u4e86\u4e00\u79cd\u5b9a\u4e49\u5c0f\u6839\u5806\u7684\u65b9\u6cd5\n```cpp\npriority_queue<int,vector<int>,greater<int> > q;\n```\n\u90a3\u6211\u5c31\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u5b9a\u4e49greater\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u5bf9struct\u7684\u6392\u5e8f\uff08\u5176\u4ed6\u9898\u89e3\u90fd\u5728struct\u91cc\u91cd\u5b9a\u4e49\u5c0f\u4e8e\u53f7\uff09\n\n\u5148\u627e\u5230stl\u91cc\u7684greater\n```cpp\n template<typename _Tp>\n    struct greater : public binary_function<_Tp, _Tp, bool>\n    {\n      bool\n      operator()(const _Tp& __x, const _Tp& __y) const\n      { return __x > __y; }\n    };\n```\n\u4eff\u7167\u4ed6\u7684\u5199\u6cd5\u5199\u4e00\u4efd\n```cpp\ntemplate <typename _t> struct QAQ\n{\n\tbool operator ()(const _t &x,const _t &y)\n\tconst {return x.dis>y.dis;}\n};\n```\n\u7136\u540e\u50cf\u521a\u624d\u90a3\u6837\u5f00\u4f18\u5148\u961f\u5217\n```cpp\npriority_queue<node,vector<node>,QAQ<node> > q;\n```\n\u5982\u4e1d\u822c\u987a\u6ed1\u7684\u5b8c\u6210\u4e86\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u6837\u64cd\u4f5c\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u8981\u6c42\u66f4\u6362\u4e0d\u540c\u7684\u6392\u5217\u65b9\u5f0f\uff08\u867d\u7136\u60f3\u4e0d\u5230\u4ec0\u4e48\u65f6\u5019\u8981\u66f4\u636223333\uff09\n\n\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+5;\nconst int maxm=2e5+5;\nconst int INF=1<<30;\nstruct edge\n{\n\tint n,v,d;\n} e[maxm];\nint h[maxn],p=0;\nvoid ac(int u,int v,int d)\n{\n\te[++p].n=h[u];\n\te[p].v=v;\n\te[p].d=d;\n\th[u]=p;\n}\nint N=0,M=0,S=0;bool vis[maxn];\nstruct node\n{\n\tint dis,id;\n} tt[maxn];\ntemplate <typename _t> struct QAQ\n{\n\tbool operator ()(const _t &x,const _t &y)\n\tconst {return x.dis>y.dis;}\n};\npriority_queue<node,vector<node>,QAQ<node> > q;\nvoid dijkstra()\n{\n\twhile(!q.empty())\n\t{\n\t\tnode xx=q.top();q.pop();\n\t\tif(vis[xx.id]) continue;\n\t\tint u=xx.id;\n\t\tvis[u]=1;\n\t\tfor(int i=h[u];i!=-1;i=e[i].n)\n\t\t{\n\t\t\tif(tt[u].dis+e[i].d<tt[e[i].v].dis)\n\t\t\t{\n\t\t\t\ttt[e[i].v].dis=tt[u].dis+e[i].d;\n\t\t\t\tq.push(tt[e[i].v]);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(h,-1,sizeof(h));\n\tscanf(\"%d%d%d\",&N,&M,&S);\n\tint u=0,v=0,d=0;\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&d);\n\t\tac(u,v,d);\n\t}\n\tfor(int i=1;i<=N;i++) tt[i].dis=INF,tt[i].id=i;\n\ttt[S].dis=0;\n\tq.push(tt[S]);\n\tdijkstra();\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tprintf(\"%d \",tt[i].dis);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1573108544,
        "uid": 152183,
        "name": "brnhbrnh",
        "ccfLevel": 3,
        "title": "P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09"
    },
    {
        "content": "\u4e3b\u8981\u662f\u6765\u770b\u770b\u94fe\u5f0f\u524d\u5411\u661f\n```cpp\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f \n{\n\tint to;//\u76ee\u6807\u70b9 \n\tint w;//\u6743\u503c \n\tint next;//\t\u4e0a\u4e00\u6761\u540c\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7 \n}edge[1500000];\n\nint head[1500000];//\u6700\u540e\u8f93\u5165\u7684\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7 \nint cnt=0;\nvoid add(int u,int v,int d)//\u6dfb\u52a0\u51fd\u6570 \n{\n\tcnt++;//\u5f53\u524d\u7f16\u53f7 \n\tedge[cnt].w = d;\n    edge[cnt].to = v;\n    edge[cnt].next = head[u];//\u540c\u8d77\u70b9\u7684\u4e0a\u4e00\u4e2a\u8fb9\u7684\u7f16\u53f7 \n    head[u] = cnt;\n}            \n```[](https://cdn.luogu.com.cn/upload/image_hosting/jzblpeuc.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\u94fe\u5f0f\u524d\u5411\u661f\u89c1\u4e0a\uff0c\u73b0\u5728\u76f4\u63a5\u4e0a\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int inf=2147483647;\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f \n{\n\tint to;//\u76ee\u6807\u70b9 \n\tint w;//\u6743\u503c \n\tint next;//\t\u4e0a\u4e00\u6761\u540c\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7 \n}edge[1500000];\nint head[1500000];//\u6700\u540e\u8f93\u5165\u7684\u8d77\u70b9\u7684\u8fb9\u7684\u7f16\u53f7 \nint dis[6000000];//\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb \nbool pd[6000000];//\u5224\u65ad\u6269\u5c55\u8fc7\u6ca1 \nint cnt=0,N,M,S;\nstruct node{\n\tint p;//\u76ee\u6807\u70b9 \n\tint dist;//\u73b0\u8ddd\u79bb \n\tbool operator < (const node& x) const//\u91cd\u8f7d\u8fd0\u7b97\u7b26 \n\t{\n\t\treturn x.dist < dist;\n\t}\n};\npriority_queue<node> q;\nvoid add(int u,int v,int d)//\u6dfb\u52a0\u51fd\u6570 \n{\n\tcnt++;//\u5f53\u524d\u7f16\u53f7 \n\tedge[cnt].w = d;\n    edge[cnt].to = v;\n    edge[cnt].next = head[u];//\u540c\u8d77\u70b9\u7684\u4e0a\u4e00\u4e2a\u8fb9\u7684\u7f16\u53f7 \n    head[u] = cnt;\n}                  \nvoid dj(int s)     \n{\n\tnode aa;\n\tdis[s]=0;\n\taa.dist=0;\n\taa.p=s;\n\tq.push(aa);//\u521d\u59cb\u5316 \n\twhile(!q.empty())//\u51fd\u6570\u4e3b\u4f53 \n\t{\n\t\tnode now,next;\n\t\tnow=q.top();q.pop();//dist\u6700\u5c0f\u7684\u8fb9 \n\t\tint x=now.p;\n\t\tif(pd[now.p]) continue;\n\t\tpd[now.p]=true;//\u5df2\u62d3\u5c55 \n\t\tfor(int i=head[x];~i;i=edge[i].next)//\u540c\u8d77\u70b9\u7684\u8fb9\u679a\u4e3e\u76f4\u5230\u5230\u6700\u540e\u4e00\u6761\u8fb9\u9000\u51fa \n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[x]+edge[i].w)//\u662f\u5426\u66f4\u5c0f \n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+edge[i].w;\n\t\t\t\tif(!pd[y])//\u672a\u88ab\u62d3\u5c55 \n\t\t\t\t{\n\t\t\t\t\tnext.dist=dis[y];\n\t\t\t\t\tnext.p=y;\n\t\t\t\t\tq.push(next);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(pd,false,sizeof(pd));\n\tmemset(head,-1,sizeof(head));//\u521d\u59cb\u5316 \n\tcin>>N>>M>>S;\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tdis[i]=inf;//\u521d\u59cb\u5316\n\t}\n\tfor(int i=1;i<=M;i++)//\u8f93\u5165\u8fb9 \n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t}\n\tdj(S);\n\tfor(int i=1;i<=N;i++)\n\tcout<<dis[i]<<' ';//\u8f93\u51fa\u7ed3\u679c \n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1568192060,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "p4779"
    },
    {
        "content": "[\u4e8c\u500d\u7ecf\u9a8c](https://www.luogu.org/problem/P3371) P3371\n\n\n~~\u8bdd\u8bf4\u8fd9\u9898\u597d\u50cf\u548cP3371\u6ca1\u5565\u533a\u522b~~\n\n\u597d\u5427\uff0c\u8fd9\u9053\u9898\u8f83P3371\u6765\u8bf4\u6570\u636e\u6bd4\u8f83~~\u6bd2\u7624~~\uff0c\u7a0d\u4e0d\u6ce8\u610f\u5c31\u4f1aTLE...\n\n\u6807\u51c6\u7684\u5806\u4f18\u5316Dij\u5c31\u53ef\u4ee5\u628a\u8fd9\u79cd~~\u6bd2\u7624\u9898~~\u5361\u8fc7\u53bb\u5566\uff01\uff01\uff01\n\n\u4ee3\u7801\uff1a\uff08\u5806\u4f18\u5316dij\uff09\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n,m,s,tot;\nlong long dis[1000010<<1],h[2000010<<1];\nbool used[2000010<<1];\n\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;//\u5806\u4f18\u5316\n//\u522b\u5fd8\u4e86\u52a0\u7a7a\u683c\uff0c\u8981\u4e0d\u7136\u5728\u7f16\u8bd1\u5668\u773c\u91cc\u548c\u53f3\u79fb\u6ca1\u4ec0\u4e48\u4e24\u6837\n//So\uff0c\u4f60\u53ef\u4ee5\u6536\u83b7\u4e00\u7247\u9ec4\u8272...\n//\u5e0c\u671b\u4f60\u522b\u201c\u6d89\u9ec4\u201d\n\nstruct Node {\n\tlong long to,w,next;\n}e[2000010<<1];\n\nvoid add_edge(long long x,long long y,long long z) {\n\t++tot;\n\te[tot].to=y;\n\te[tot].next=h[x];\n\te[tot].w=z;\n\th[x]=tot;\n}\n\nvoid input() {\n\tlong long u,v,w;\n\tcin>>n>>m>>s;\n\tfor(long long i=1;i<=m;i++) {\n\t\tcin>>u>>v>>w;\n\t\tadd_edge(u,v,w);\n\t}\n}\n\nvoid Dijkstra() {\n\twhile(q.size()) {\n\t\tlong long u=q.top().second;\n\t\tq.pop();\n\t\tif(used[u]) continue;\n\t\tused[u]=1;\n\t\tfor(int i=h[u];i;i=e[i].next) {\n\t\t\tlong long v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].w) {\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.push(make_pair(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid output() {\n\tfor(int i=1;i<=n;i++) {\n\t\tcout<<dis[i]<<\" \";\n\t}\n}\n\nint main() {\n\tinput();\n\tfor(int i=1;i<=n;i++) {\n\t\tdis[i]=2147483647;//\u521d\u59cb\u5316\n\t}\n\tdis[s]=0;//\u8d77\u70b9\n\tq.push(make_pair(0,s));\n\tDijkstra();\n\toutput();\n}\n```",
        "postTime": 1566178971,
        "uid": 99430,
        "name": "Leaved_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u6e29\u99a8\u63d0\u793a\uff1a$SPFA$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f**\u58f0\u79f0**O(m)\uff0c\u6700\u574f\u60c5\u51b5O(nm)\uff0c**\u5bb9\u6613\u88ab\u5361\u5230\u6700\u574f**\u3002\u6240\u4ee5\u2026\u2026\u60f3\u5b66$SPFA$\u7684\u8bf7\u79fb\u6b65[\u8fd9\u91cc](https://www.luogu.org/blog/yhdhg1395754790/)\u7684[\u8fd9\u91cc](https://www.luogu.org/blog/yhdhg1395754790/solution-p3371)  \n\u6240\u4ee5\u8fd9\u9898\u7684\u6b63\u89e3\u5e94\u8be5\u662f$dijkstra!$  \n\u90a3\u4e48\u6211\u4eec\u8bb2\u8bb2$dijkstra$\u600e\u4e48\u5199\uff1a\u9996\u5148\uff0c\u662f\u548c$SPFA$\u4e00\u6837\u7684\u521d\u59cb\u5316\u3002\u7136\u540e\uff0c\u628a\u8d77\u70b9\u6807\u8bb0\u4e3a\u8bbf\u95ee\u3002\u7136\u540e\u66f4\u65b0\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\u7684\u6700\u77ed\u8def\u7684\u503c\uff08\u5c31\u662f\u677e\u5f1b\uff09\u3002\u518d\u627e\u5230\u672a\u8bbf\u95ee\u7684\u70b9\u4e2d\u6700\u77ed\u8def\u7684\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002  \n\u5177\u4f53\u5b9e\u73b0\u8d77\u6765\u5c31\u662f\u8fd9\u4e2a\u4e9a\u5b50\uff1a  \n![](https://cdn.luogu.com.cn/upload/pic/71301.png)  \n\u8bb2\u5b8c\u57fa\u7840\u7684\uff0c\u518d\u6765\u8bb2\u4e00\u4e0b\u7ec6\u8282\u95ee\u9898\uff1a\u8fd9\u4e2a\u7ec6\u8282\u51b3\u5b9a\u4e86**\u65f6\u95f4\u590d\u6742\u5ea6**\uff01  \n\u8fd9\u4e2a\u7ec6\u8282\u5c31\u662f\u201c\u627e\u5230\u672a\u8bbf\u95ee\u7684\u70b9\u4e2d\u6700\u77ed\u8def\u7684\u503c\u6700\u5c0f\u7684\u70b9\u201d\u3002  \n\u4e24\u79cd\u65b9\u6cd5\uff1a  \n\u7b2c\u4e00\u79cd\uff1a\u9ad8\u7aef\u9738\u6c14\u4e0a\u6863\u6b21\uff0c\u975e\u5e38\u5b9e\u7528\u2026\u2026\uff08\u6b64\u5904\u7701\u756510000\u5b57\uff09\u7684**\u7206\u626b**\uff01[\u6ed1\u7a3d]\u3002\u7206\u626b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO($n^2$)\uff0c\u4e2a\u4eba\u611f\u89c9\u548c$SPFA$\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002  \n\u7b2c\u4e8c\u79cd\uff1a~~\u9ad8\u7aef\u9738\u6c14\u4e0a\u6863\u6b21\u7684~~\u4f18\u5148\u961f\u5217\uff01\u8be5\u65b9\u6cd5\u662f\u5f53\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u7684\u503c\u88ab\u66f4\u65b0\u540e\uff0c\u5c31\u5c06\u5176\u52a0\u5165\u5c0f\u6839\u5806\u3002\u8fd9\u65f6\u5c0f\u6839\u5806\u91cc\u4f1a\u51fa\u73b0\u591a\u4e2a\u76f8\u540c\u7684\u70b9\u3002\u4f46\u662f\u6211\u4eec\u7528\u8fc7\u4e00\u4e2a\u70b9\u4e4b\u540e\u5c31\u4f1a\u5c06\u5176\u6807\u8bb0\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(mlogn)  \n\u4ec0\u4e48\uff1f\u4f60\u4e0d\u77e5\u9053\u5c0f\u6839\u5806\u662f\u4ec0\u4e48\uff1f\u6233[\u8fd9\u91cc](https://www.luogu.org/blog/yhdhg1395754790/solution-p3378)  \n\u4f46\u6211\u4eec\u662f\u4e0d\u4f1a\u624b\u6253\u5c0f\u6839\u5806\u7684\uff0c\u592a\u9ebb\u70e6\u4e86\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u8981\u7528\u5230`priority_queue`\u3002\u4ed6\u662f\u7cfb\u7edf\u81ea\u5e26\u4f18\u5148\u961f\u5217\uff0c\u4f46\u662f\u662f\u5927\u6839\u5806\u3002\u6240\u4ee5\u6211\u4eec\u8981\u8fd9\u6837\u505a\uff1a\n```cpp\npriority_queue<int, vector<int>, greater<int> >//\u6ce8\u610f\uff0c\u8fd9\u91cc\u8981\u6709\u7a7a\u683c\uff0c\u4e0d\u7136\u7cfb\u7edf\u4f1a\u5224\u4e3a\u4f4d\u8fd0\u7b97\u7b26\n```\n\u73b0\u5728\u662f\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u662f\u8981\u6309\u7167\u6bcf\u4e2a\u70b9\u7684\u503c\u6765\u6392\u5e8f\u7684\u3002\u4f46\u6211\u4eec\u540c\u65f6\u4e5f\u8981\u8bb0\u5f55\u4ed6\u7684\u7f16\u53f7\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981`pair`\u3002\u4e0d\u77e5\u5230\u7684\u5c31\u81ea\u884c\u767e\u5ea6\u5427\u2026\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5b9a\u4e49\uff1a\n```cpp\npriority_queue<pair<int,int>, vector<pair<int,int> >, greater<pair<int,int> > >\n```\n\u6240\u6709\u95ee\u9898\u90fd\u89e3\u51b3\u4e86\uff0c\u90a3\u4e48\u4e0a\u4ee3\u7801\u5427\u3002  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s;\nvector<int>g[200005];\nvector<int>d[200005];\nint v[100005];\nbool f[100005];\npriority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;\nint main()\n{\n\tcin>>n>>m>>s;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint ff,tt,dd;\n\t\tcin>>ff>>tt>>dd;\n\t\tg[ff].push_back(tt);\n\t\td[ff].push_back(dd);//\u5efa\u56fe\n\t}\n\tfor(int i=1;i<=n;i++) v[i]=1e10;//\u521d\u59cb\u5316\n\tq.push(make_pair(0,s));//\u538b\u5165\u8d77\u70b9\uff0cmake_pair\u662f\u8fd4\u56de\u4e00\u4e2apair\u503c\u3002\n\tv[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint xx=q.top().second;//psir\u6709\u4e24\u4e2a\u503c\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u662f.first\uff0c\u7b2c\u4e8c\u4e2a\u662f.second\u3002\u5c0f\u6839\u5806\u4ee5\u7b2c\u4e00\u4e2a\u503c\u6392\u5e8f\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u653e\u503c\uff0c\u7b2c\u4e8c\u4e2a\u653e\u7f16\u53f7\n\t\tq.pop();//\u8bb0\u5f97\u8c08\u51fa\uff01\uff01\uff01\n\t\tif(!f[xx])//\u5224\u65ad\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n\t\t{\n\t\t\tf[xx]=true;//\u8bb0\u5f97\u6807\u8bb0\uff01\uff01\uff01\n\t\t\tfor(int i=0;i<g[xx].size();i++)\n\t\t\t if(v[g[xx][i]]>v[xx]+d[xx][i])//\u677e\u5f1b\n\t\t \t {\n\t\t\t \tv[g[xx][i]]=v[xx]+d[xx][i];\n\t\t\t \tq.push(make_pair(v[g[xx][i]],g[xx][i]));//\u52a0\u5165\u5c0f\u6839\u5806\n\t\t\t }\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++) cout<<v[i]<<' ';\n\treturn 0;\n}\n```",
        "postTime": 1565527871,
        "uid": 195331,
        "name": "Mine_King",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# SPFA\u6b7b\u4e86\uff1f\u4e0d\u5b58\u5728\u7684\uff01\n\n\u6211\u4e0d\u559c\u6b22\u5e26log\u7684\u590d\u6742\u5ea6\u3002\u6211\u7231SPFA\u3002\n\n\u4f46SPFA\u88ab\u5361\u5df2\u6210\u4e8b\u5b9e\uff0c\u600e\u4e48\u529e\uff1f\n\n\u770b\u770b\u5927\u5bb6\u90fd\u600e\u4e48\u505a\u7684\u2014\u2014priority_queue\u6765\u51cf\u5c11\u5165\u961f\u6b21\u6570\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7384\u5b66\u7684\u4e1c\u897f\uff0c**\u4f7fSPFA\u4e2d\u7684\u961f\u5217\u66f4\u63a5\u8fd1\u4f18\u5148\u961f\u5217**\n\n\u4ed6\u6765\u4e86\u2014\u2014\n\n## deque\u4f18\u5316SPFA\n\n\u6211\u4eec\u5f00\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u5b9e\u65f6\u7ef4\u62a4\u9996\u5c3e\uff0c\u4fdd\u8bc1\u9996 < \u5c3e\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\n\n\u6253\u4e71\u7cbe\u5fc3\u8bbe\u8ba1\u7684hack\u6570\u636e\uff0c\u4f7f\u5404\u70b9\u5165\u961f\u6b21\u6570\u51cf\u5c11\uff0c\u5e76\u4f7f\u56fe\u66f4\u968f\u673a\u3002\n\n\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n//deque\u4f18\u5316\u7684SPFA\n#include<bits/stdc++.h>\nusing namespace std;\nconst int M=500005;\nconst int N=100005;\ninline int read(){\n\tchar ch=getchar();int x=0;\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn x;\n}\nint n,m,s;\nint u[M],v[M],w[M];\nint next[M],first[N];\nbool vis[N];\nint dis[N];\ndeque<int> q;//\u53cc\u7aef\u961f\u5217 \ninline void init(){//\u521d\u59cb\u5316 \n\tfor(int i=1;i<=n;i++)dis[i]=2147483647;\n\tdis[s]=0;q.push_back(s);\n\tvis[s]=1;\n}\ninline void spfa(){\n\twhile(q.size()){\n\t\tint x=*q.begin();q.pop_front();\n\t\tvis[x]=0;\n\t\t//\u53d6\u51fa\u961f\u5217\u5934\u5c3e\u4e24\u70b9\u4e2d\u8ddd\u79bb\u8f83\u5c0f\u7684\u8fdb\u884c\u677e\u5f1b \n\t\t//\u6ce8\u610f\u52a0q.size()\u4e00\u53e5\uff0c\u5426\u5219\u5728\u53d6\u51fax\u540e\u961f\u5217\u4e3a\u7a7a\u65f6\u4f1aRE \n\t\tif(q.size() && dis[*q.begin()]>dis[*(q.end()-1)])\n\t\t\tswap(*q.begin(),*(q.end()-1));\n\t\tfor(int i=first[x];i;i=next[i]){\n\t\t\tint y=v[i];\n\t\t\tif(dis[x]+w[i]<dis[y]){\n\t\t\t\tdis[y]=dis[x]+w[i];\n\t\t\t\tif(!vis[y]){\n\t\t\t\t\tvis[y]=1;\n\t\t\t\t\t//\u7ef4\u62a4\u9996<\u5c3e \n\t\t\t\t\tif(q.size() && dis[y]>dis[*q.begin()])q.push_back(y);\n\t\t\t\t\telse q.push_front(y);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<=m;i++){\n\t\tu[i]=read(),v[i]=read(),w[i]=read();\n\t\t//\u90bb\u63a5\u8868 \n\t\tnext[i]=first[u[i]];\n\t\tfirst[u[i]]=i;\n\t}\n\tinit();\n\tspfa();\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dis[i]);\n\tputs(\"\");\n    return 0;\n}\n```\n\u8dd1\u5f97\u8d3c\u5feb, 5\u4e2a\u70b9161ms\u3002\n\n#### **Update** \n\u73b0\u5728\u51fa\u4e86\u7b2c\u516d\u4e2a\u5927\u6570\u636e\uff0chack\u5f97\u771f\u597d\uff0c\u8dd1\u4e86900+ms\n\n\u4f46\u5bf9SPFA\u7684\u4f18\u5316\u662f\u4e0d\u4f1a\u505c\u7684\uff01SPFA\u662f\u4e0d\u4f1a\u6b7b\u7684\uff01\n\n",
        "postTime": 1565171792,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "2019/11/15 \u66f4\u65b0\u65e5\u5fd7\n\n\u53d1\u73b0\u6211\u7684Dijstra\u4f18\u5148\u961f\u5217\u6a21\u677f\u6709\u70b9\u95ee\u9898\uff0c\u4fee\u6539\u4e86\uff0c\u5e76\u5728\u591a\u5904\u5220\u7e41\u5c31\u7b80\uff0c\u589e\u6dfb\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n-----------\n\n\u6628\u5929\uff1a __[\u56fe\u8bba-\u6982\u5ff5\u4e0e\u8bb0\u5f55\u56fe\u7684\u65b9\u6cd5](https://www.luogu.org/blogAdmin/article/edit/137066)__\n\n\u4ee5\u4e0a\u662f\u6628\u5929\u7684Blog\uff0c\u6709\u9700\u8981\u8005\u8bf7\u5148\u9605\u8bfb\u5b8c\u4ee5\u4e0a\u518d\u9605\u8bfb\u4eca\u5929\u7684Blog\u3002\n\n\u53ef\u80fd\u4eca\u5929\u7684\u6709\u70b9\u4e71\uff0c\u597d\u597d\u7406\u7406\uff0c\u8ba4\u771f\u770b\u5b8c\u76f8\u4fe1\u4f60\u4f1a\u61c2\u5f97\n\n------------\n\n\u5206\u5272\u7ebf\n\n------------\n\n# \u7b2c\u4e8c\u5929\n\n\u5f15\u5b50\uff1a\u6628\u5929\u6211\u4eec~~\u7b80\u5355~~\u8bb2\u4e86\u8bb2\u56fe\u7684\u6982\u5ff5\u4e0e\u8bb0\u5f55\u56fe\u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u5927\u5bb6\u6709\u4e00\u5b9a\u7684\u5e95\u5b50\u4e86\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u521d\u6b65\u63a5\u89e6\u56fe\u8bba\u7b97\u6cd5\u4e86\uff01\n\n\u6211\u4eec\u53ea\u8bb2Dijkstra\u548cFloyd\uff0c\u56e0\u4e3a\u5176\u5b9e\u5728\u6bd4\u8d5b\u4e2d\u4f1a\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u5c31\u5f88\u597d\u4e86\u3002\n\n__\u4eca\u5929\u6211\u4eec\u8981\u8bb2\u7684\u662f\uff1a\u6700\u77ed\u8def\u5f84\u95ee\u9898__\n\n## Top1\uff1a\u6700\u77ed\u8def\u7684\u6982\u5ff5\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u77e5\u9053\u6709\u4e00\u6b3eMade in China\u7684\u5bfc\u822a\u8f6f\u4ef6\u2014\u2014\u767e\u5ea6\u5bfc\u822a\u3002\u90a3\u4e48\u4ed6\u4eec\u662f\u600e\u4e48\u4e3a\u6211\u4eec\u5bfc\u822a\u7684\uff1f\u5c31\u662f\u4f7f\u7528\u4e86\u4eca\u5929\u6211\u4eec\u8981\u5b66\u7684\u95ee\u9898 __\u6700\u77ed\u8def\u5f84__ \u3002\n\n~~\u8bf4\u4e0d\u5b9a\u4f60\u5b66\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u505a\u4e00\u4e2a\u5bfc\u822a\u7684~~ __~~\u662f\u4e0d\u662f\u6709\u70b9\u5c0f\u6fc0\u52a8\uff1f~~__ \n\n__$\\color{red}\\text{ \u91cd\u70b9\uff1a\u6700\u77ed\u8def\u95ee\u9898\u5c31\u662f\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u6700\u77ed\u7684\u8def\u5f84\uff01 }$__\n\n------------\n\n### \u6700\u77ed\u8def~~\u4e13\u4e1a~~\u672f\u8bed\uff1a\n\n__\u4e2d\u8f6c\u70b9\uff1a__ \u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u4e0d\u4e00\u5b9a\u662f\u6709\u76f4\u63a5\u9053\u8def\u8fde\u63a5\u7684\uff0c\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u4e00\u4e9b\u522b\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u53eb\u90a3\u4e9b\u70b9\u53eb\u505a __\u4e2d\u8f6c\u70b9__ \u3002\n\n__\u677e\u5f1b\uff1a__ \u6bd4\u5982\u73b0\u5728\u4ece $I$ \u70b9\u5230 $J$ \u70b9\u7684\u8fb9\u6743\u4e3a $X$ \uff0c\u800c\u73b0\u5728\u6709\u4e00\u4e2a\u70b9 $K$ \uff0c$K$ \u5230 $I$ \u7684\u8fb9\u6743\u4e3a $Y$ \uff0c$K$ \u5230 $J$ \u7684\u8fb9\u6743\u4e3a $Z$\u3002\u5982\u679c $Y$ + $Z$ < $X$ \uff0c\u4e5f\u5c31\u662f ($I$ \u70b9\u5230 $J$ \u70b9\u7684\u8def\u5f84\u8fb9\u6743) \u6bd4 ($K$ \u5230 $J$ \u7684\u8fb9\u6743) \u52a0\u4e0a ($K$ \u5230 $I$ \u7684\u8fb9\u6743) \u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u663e\u800c\u6613\u89c1\uff0c __$I$ \u5230 $J$ \u7684\u76f4\u63a5\u8def\u5f84 $X$ \u53ef\u4ee5\u7531\u4e2d\u8f6c\u70b9 $K$ \u964d\u5230 $Y + Z$\uff0c\u4f7f\u5f97 $I$ \u5230 $J$ \u7684\u6700\u77ed\u8def\u5f84\u66f4\u4f18\u3002__\n\n------------\n\n## Top2:Floyd\u7b97\u6cd5\n\n\u73b0\u5728\u5927\u5bb6\u90fd\u77e5\u9053\u6700\u77ed\u8def\u662f\u4ec0\u4e48\u4e86\uff0c\u90a3\u4e48\u4ece\u7b80\u5355\u5230\u590d\u6742\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u65b0\u624b\u5fc5\u61c2\u7684\u7b97\u6cd5\u3002\n\nFloyd\u7b80\u5355\u7c97\u66b4\uff0c\u5c31\u662f\u679a\u4e3e\u4e09\u4e2a\u70b9\uff0c\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e00\u4e2a\u7ec8\u70b9\uff0c\u4e00\u4e2a\u4e2d\u8f6c\u70b9\u3002\u770b __\u8d77\u70b9\u5230\u4e2d\u8f6c\u70b9\u7684\u8def\u5f84__ \u52a0\u4e0a __\u4e2d\u8f6c\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84__ \u662f\u4e0d\u662f\u5c0f\u4e8e __\u76ee\u524d\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84__ \u5373\u53ef\uff08\u5c31\u662f\u4e0d\u65ad\u677e\u5f1b\uff09\u3002\n\n\u663e\u800c\u6613\u89c1\uff0cFloyd\u7b97\u6cd5\u5f88\u597d\u61c2\uff0c\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u4e86\u70b9\u2014\u2014 $N^3$ \u7684\u590d\u6742\u5ea6\u3002\u800c\u4e14\uff0cFloyd\u662f\u591a\u6e90\u6700\u77ed\u8def\uff0c\u8be2\u95ee\u65f6\u53ea\u9700\u8c03\u7528dis\u5c31\u884c\u4e86\u3002\n\n\u6240\u4ee5\uff0c __\u5f53 N \u5927\u4e8e1000\u65f6\uff0c\u614e\u7528\uff01__\n\n\u4ee3\u7801\u5c31\u5f88\u7b80\u7b54\u5566(\u849f\u84bb\u7528\u90bb\u63a5\u77e9\u9635\u5199\u7684)\uff1a\n\n```\n//\u5982\u679c\u4e3a\u65e0\u5411\u56fe,dis\u5c31\u4f1a\u5bf9\u79f0,Floyd\u7684j\u5c31\u53ea\u8981\u5230i,\u4e14dis[i][j]dis[j][i] \u8981\u4e00\u8d77\u66f4\u65b0 \n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1000 + 10;\nint n,m;\nint x,y,z;\nint dis[MAXN][MAXN];\nvoid Floyd(){\n\tfor(int k = 1;k <= n; k++)\n\t\tfor(int i = 1;i <= n; i++)\n\t\t\tfor(int j = 1;j <= n/*i*/; j++)\n\t\t\t\tif(dis[i][k] + dis[k][j] < dis[i][j])dis[i][j] = dis[i][k] + dis[k][j];\n\treturn;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i = 1;i <= n; i++)dis[i][i] = 0;\n\tfor(int i = 1;i <= n; i++)\n\t\tfor(int j = 1;j <= n; j++){\n\t\t\tif(i != j)dis[i][j] = 1e9;\n\t\t}\n\tfor(int i = 1;i <= m; i++){\n\t\tcin>>x>>y>>z;\n\t\tdis[x][y] = z;\n\t}\n\tFloyd();\n\tfor(int i = 1;i <= n; i++){\n\t\tfor(int j = 1;j <= n; j++){\n\t\t\tcout<<dis[i][j]<<\" \";\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n```\n\n## Top3\uff1aDijkstra\u7b97\u6cd5\n\nDijkstra\u4e0eFloyd\u76f8\u53cd\uff0c\u662f\u5355\u5143\u6700\u77ed\u8def\uff0c\u5373\u53ea\u80fd\u6c42\u51fa\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002\n\nDijkstra\u5c5e\u4e8e\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6b63\u89e3\uff1a\n\n\u9996\u5148\u5b9a\u4e49\u4e24\u4e2a\u79cd\u7c7b\u2014\u2014\u9ed1\u70b9\u548c\u767d\u70b9\uff0c\u9ed1\u70b9\u5c31\u662f\u5728\u76ee\u524d\u7b97\u5b8c\u6700\u77ed\u8def\u5f84\u7684\u70b9\uff0c\u767d\u70b9\u53cd\u4e4b\u3002\n\n\u6bcf\u6b21\u5728\u767d\u70b9\u4e2d\u627e\u4e00\u4e2a\u79bb\u76ee\u524d\u4efb\u610f\u4e00\u4e2a\u9ed1\u70b9\u6700\u8fd1\u7684\uff0c\u52a0\u5165\u9ed1\u70b9\uff0c\u66f4\u65b0\u767d\u70b9\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684dis\u4e0d\u518d\u662f\u90bb\u63a5\u77e9\u9635\uff0c\u662f\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002tot\u624d\u662f\u90bb\u63a5\u77e9\u9635\uff01\n\n\u90bb\u63a5\u77e9\u9635\uff0c\u849f\u84bb\u662f\u7528\u6d1b\u8c37[P1828 \u9999\u751c\u7684\u9ec4\u6cb9 Sweet Butter](https://www.luogu.org/problemnew/show/P1828) \u4f5c\u4e3a\u4f8b\u9898\u5199\u7684\u6a21\u677f\uff0c\u4f53\u8c05\u4e00\u4e0b\n\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 100 + 10;\nstruct Node{\n\tint x,y;\n}f[MAXN];\nint n,m,a,b,s,t;\nbool black[MAXN];\ndouble dis[MAXN];\ndouble tot[MAXN][MAXN];\ndouble calc(int i,int j){\n\treturn sqrt((f[i].x - f[j].x) * (f[i].x - f[j].x) + (f[i].y - f[j].y) * (f[i].y - f[j].y));\n}\ndouble Dijkstra(int start,int end){\n\tfor(int i = 1;i <= n; i++){\n\t\tdis[i] = tot[start][i];\n\t}\n\tdis[start] = 0;\n\tblack[start] = true;\n\tfor(int i = 1;i < n; i++){\n\t\tdouble M = 2e9;\n\t\tint u = start;\n\t\tfor(int j = 1;j <= n; j++){\n\t\t\tif(dis[j] < M && !black[j]){\n\t\t\t\tM = dis[j];\n\t\t\t\tu = j;\n\t\t\t}\n\t\t}\n\t\tif(u == start)continue;\n\t\t//\u6b64\u5904\u7684\u5224\u65ad\u4e0e\u524d\u9762\u7684u = start\u5bf9\u5e94,\u82e5\u8be5\u56fe\u5b58\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\u8fd9\u91cc\u5c31\u8981\u52a0\u4e0a\n\t\t//\u5426\u5219\u53ef\u4ee5u = 0,\u8fd9\u4e2a\u5224\u65ad\u5220\u6389 \n\t\tblack[u] = true;\n\t\tfor(int j = 1;j <= n; j++){\n\t\t\tif(black[j])continue;\n\t\t\tif(dis[u] + tot[u][j] < dis[j]){\n\t\t\t\tdis[j] = dis[u] + tot[u][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[end];\n} \nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i <= n; i++)\n\t\tfor(int j = 1;j <= n; j++){\n\t\t\ttot[i][j] = i == j ? 0 : 1e9;\n\t\t}\n\tfor(int i = 1;i <= n; i++){\n\t\tscanf(\"%d%d\",&f[i].x,&f[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i = 1;i <= m; i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\ttot[a][b] = calc(a,b);\n\t\ttot[b][a] = tot[a][b];\n\t}\n\tscanf(\"%d%d\",&s,&t);\n\tprintf(\"%.2f\",Dijkstra(s,t));\n\treturn 0;\n}\n\n```\n\n__\u6240\u4ee5\uff0cDijkstra\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $N^2$__\n\n\u600e\u4e48\u4f18\u5316\u5462\uff1f\u5f88\u7b80\u5355\u2014\u2014\u5728\u5bfb\u627e\u79bb\u9ed1\u70b9\u6700\u8fd1\u7684\u767d\u70b9\u65f6\uff0c\u4f7f\u7528\u4f18\u5148\u961f\u5217\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u6734\u7d20\u7684\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\uff0c\u5728\u6d1b\u8c37 [P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84](https://www.luogu.org/problem/P4779) \u4e2d\u4f1aTLE\u3002\n\n> \u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u6211\u4eec\u7684\u4f18\u5148\u961f\u5217\u4e0d\u60f3 set \u7b49 STL \uff0c\u6ca1\u6709\u81ea\u52a8\u53bb\u91cd\u7684\u529f\u80fd\u3002\u6240\u4ee5\u5f53\u961f\u5217\u4e2d\u6709\u591a\u4e2a\u76f8\u540c\u7684\u5143\u7d20\u65f6\uff0cDijkstra\u7684\u6548\u7387\u4f1a\u5927\u5927\u51cf\u5c11\u3002\n\n__\u6240\u4ee5__ \uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2abool\u578b\u7684\u6570\u7ec4\uff0c\u4e0d\u96be\u60f3\u5230\uff0c\u8be5\u6570\u7ec4\u7528\u6765\u8bb0\u5f55 __\u6bcf\u4e2a\u5143\u7d20\u5f53\u524d\u5728\u961f\u5217\u4e2d\u662f\u5426\u5b58\u5728\u3002__\n\n__\u7ec6\u8282\u53c8\u6765\u4e86\u3002__ \u6211\u4eecbool\u578b\u6570\u7ec4\u7684\u5b9a\u4e49\u662f __\u6bcf\u4e2a\u5143\u7d20\u5f53\u524d\u5728\u961f\u5217\u4e2d\u662f\u5426\u5b58\u5728\u3002__ \u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u5728\u4f18\u5148\u961f\u5217\u5f39\u51fa\u961f\u9996\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u9700\u8981 __\u5c06\u961f\u9996\u7684bool\u6807\u8bb0\u53d6\u6d88\u3002__ \n\n\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u591a\u6b21\u5355\u72ec\u51fa\u73b0\u5728\u961f\u5217\uff0c\u4f46\u662f\u4e0d\u80fd\u4e00\u6b21\u591a\u4e2a\u51fa\u73b0\u5728\u961f\u5217\u3002\n\n\u867d\u7136\u591a\u6b21\u62d3\u5c55\u5230\u961f\u9996\uff0c\u4f46\u662f\u961f\u9996\u5230\u6e90\u70b9\u7684\u6700\u77ed\u8def\u5f84 \u53ef\u80fd \u66f4\u65b0\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u518d\u6b21\u4ece\u961f\u9996\u518d\u6b21\u8fdb\u884c\u62d3\u5c55\uff0c\u66f4\u65b0\u5468\u56f4\u70b9\u7684\u7b54\u6848\u3002 __\u8fd9\u5c31\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5c06\u961f\u9996\u7684bool\u6807\u8bb0\u53d6\u6d88\u3002__\n\n__\u4f18\u5148\u961f\u5217Dijkstra\uff1a__\n\n```\n#include<bits/stdc++.h>\n#include<cctype>\n#pragma GCC optimize(2)\n\n#define in(a) a = read()\n#define out(a) write(a),printf(\" \")\n#define outn(a) write(a),putchar('\\n')\n\n#define ll long long\n#define rg register\n#define New int\n\nusing namespace std;\n\nnamespace IO_Optimization{\n\n\tinline New read()\n\t{\n\t    New X = 0,w = 0;\n\t\tchar ch = 0;\n\n\t\twhile(!isdigit(ch))\n\t\t{\n\t\t\tw |= ch == '-';\n\t\t\tch=getchar();\n\t\t}\n\t    while(isdigit(ch))\n\t\t{\n\t\t\tX = (X << 3) + (X << 1) + (ch ^ 48);\n\t\t\tch = getchar();\n\t\t}\n\t    return w ? -X : X;\n\t}\n\n\tinline void write(New x)\n\t{\n\t     if(x < 0) putchar('-'),x = -x;\n\t     if(x > 9) write(x/10);\n\t     putchar(x % 10 + '0');\n\t}\n\n\t#undef New\n}\nusing namespace IO_Optimization;\n\nconst int MAXN = 1000000 + 2;\n\nint n,m,s,x,y,z,len,p;\nint dis[MAXN],nxt,val;\nstruct Node\n{\n\tint num,dist;\n\tinline bool operator <(const Node &nnxt)const{\n\t\treturn dist > nnxt.dist;\n\t}\n};\nvector<Node> nei[MAXN];\nbool vis[MAXN];\n\ninline void Dijkstra(int start)\n{\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tpriority_queue<Node>q;\n\tNode cur = {start,0};\n\n\tq.push(cur);\n\tdis[start] = 0;\n\tvis[start] = true;\n\n\twhile(!q.empty())\n\t{\n\t\tcur = q.top();\n\t\tq.pop();\n\t\tp = cur.num;\n\t\tvis[p] = false;\n\t\tlen = nei[p].size();\n\n\t\tfor(rg int i = 0;i < len; ++i)\n\t\t{\n\t\t\tnxt = nei[p][i].num;\n\t\t\tval = nei[p][i].dist;\n\n\t\t\tif(dis[nxt] > dis[p] + val)\n\t\t\t{\n\t\t\t\tdis[nxt] = dis[p] + val;\n\t\t\t\tif(!vis[nxt])\n\t\t\t\t{\n\t\t\t\t\tNode tmp = {nxt,dis[nxt]};\n\t\t\t\t\tq.push(tmp);\n\t\t\t\t\tvis[nxt] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n\nint main()\n{\n\tin(n),in(m),in(s);\n\tfor(rg int i = 1;i <= m; ++i)\n\t{\n\t\tin(x),in(y),in(z);\n\t\tnei[x].push_back((Node){y,z});\n\t}\n\n\tDijkstra(s);\n\t\n\tfor(rg int i = 1;i <= n; ++i)\n\t\tout(dis[i] == 0x3f3f3f3f ? 2147483647 : dis[i]);\n\n\treturn 0;\n}\n\n```\n## \u987a\u4fbf\u5e26\u4e00\u4e0bSPFA\u7684\u7b97\u6cd5\u6a21\u677f\u548c\u7528\u52a8\u6001\u6570\u7ec4\u8bb0\u5f55\u7684Dijkstra(\u8fd9\u91cc\u4e0d\u505a\u8be6\u89e3\u4e86\uff0c\u6709\u9700\u8981\u7684\u4eba\u53ef\u4ee5\u590d\u5236\u770b\u4e00\u4e0b)\n\nSPFA\uff1a\n\n```\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstring> \nusing namespace std;\nint n, p, c, cow[801], a, b, d, cnt = 0, sum = 0, ans = 2147483647;\nint dis[10000], w[10000], next[10000], to[10000], first[10000] = {0};\nbool exist[10000] = {false};\nqueue<int> q;\n\nvoid addEdge(int u, int v, int weight)\n{\n\tcnt++; //\u8fb9\u7684\u7f16\u53f7 \n\tto[cnt] = v; //\u7b2ccnt\u6761\u8fb9\u6307\u5411\u70b9v \n\tw[cnt] = weight; //\u7b2ccnt\u6761\u8fb9\u7684\u6743\u503c \n\tnext[cnt] = first[u]; // \u7b2ccnt\u6761\u8fb9\u6307\u5411\u8fde\u63a5\u70b9u\u7684\u7b2c\u4e00\u6761\u8fb9 \n\tfirst[u] = cnt; //\u5c06\u8fde\u63a5\u70b9u\u7684\u7b2c\u4e00\u6761\u8fb9\u66f4\u65b0\u4e3a\u7b2ccnt\u6761\u8fb9\n\treturn; \n} \n\nvoid spfa(int start)\n{\n\tmemset(exist, false, sizeof(exist)); //\u4e00\u5f00\u59cb\u6240\u6709\u70b9\u5728\u961f\u5217\u5916 \n\tmemset(dis, 0x7f, sizeof(dis)); //\u5c06\u6240\u6709\u70b9\u5230\u8d77\u59cb\u70b9\u7684\u8ddd\u79bb\u7f6e\u4e3a\u6781\u5927\u503c \n\tdis[start] = 0; \n\tq.push(start); //\u8d77\u59cb\u70b9\u5165\u961f\u5217 \n\texist[start] = true; \n\twhile(!q.empty())\n\t{\n\t\tint head = q.front(); //\u53d6\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u70b9 \n\t\tq.pop();\n\t\texist[head] = false;\n\t\tfor(int e = first[head]; e != 0; e = next[e]) //\u5faa\u73afhead\u8fde\u63a5\u7684\u6bcf\u4e00\u6761\u8fb9 \n\t\t{\n\t\t\t//\u677e\u5f1b\u64cd\u4f5c \n\t\t\tif(dis[head] + w[e] < dis[to[e]])\n\t\t\t{\n\t\t\t\tdis[to[e]] = dis[head] + w[e];\n\t\t\t\tif(exist[to[e]] == false)\n\t\t\t\t{\n\t\t\t\t\tq.push(to[e]); //\u5c06\u88ab\u66f4\u65b0\u7684\u70b9\u5165\u961f\u5217 \n\t\t\t\t\texist[to[e]] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n\nint main()\n{\n\tcin >> n >> p >> c;\n\tfor(int i=1; i <= n; i++) //\u8f93\u5165\u6bcf\u5934\u725b\u6240\u5728\u7684\u4f4d\u7f6e \n\t{\n\t\tcin >> cow[i];\n\t}\n\tfor(int e=1; e <= c; e++) //\u8f93\u5165\u6bcf\u4e00\u6761\u8fb9 \n\t{\n\t\tcin >> a >> b >> d;\n\t\taddEdge(a, b, d);\n\t\taddEdge(b, a, d);\n\t}\n\tfor(int i=1; i <= p; i++) //\u6ce8\u610f\u662f\u5faa\u73af\u7267\u573a\n\t{\n\t\tspfa(i);\n\t\tsum = 0;\n\t\tfor(int j=1; j <= n; j++)\n\t\t{\n\t\t\tsum = sum + dis[cow[j]];\n\t\t}\n\t\tans = min(ans, sum);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n\n\n```\n\n\u52a8\u6001\u6570\u7ec4Dijkstra\uff1a\n\n```\n#include<iostream>\n#include<cmath>\n#include<queue>\n#include<vector>\nusing namespace std;\nint n, p, c;\nconst int INF = 1e9;\nint cow[805], dis[805], vertex[805][805];\nvector<int> neighbor[805]; \n\nstruct Node\n{\n\tint id, dist;\n\tbool operator < (const Node & second) const\n\t{\n\t\treturn dist > second.dist;\n\t}\n};\n\nvoid dijkstra(int start)\n{\n\tpriority_queue<Node> pq;\n\tfor(int i = 1; i <= p; i++)\n    {\n        dis[i] = INF;\n    }\n\tdis[start] = 0;\n\tNode cur = {start, 0}; //\u8d77\u59cb\u70b9\u548c\u5176\u5230dis[start] \n    pq.push(cur);\n    while(!pq.empty())\n    {\n    \tcur = pq.top();\n    \tpq.pop();\n    \tint u = cur.id;\n    \tfor(int i=0; i <= neighbor[u].size() - 1; i++)\n    \t{\n    \t\tint v = neighbor[u][i]; //\u4e0eu\u76f8\u90bb\u7684\u8fb9v \n    \t\tif(dis[u] + vertex[u][v] < dis[v])\n    \t\t{\n    \t\t\tdis[v] = dis[u] + vertex[u][v];\n    \t\t\tNode next;\n    \t\t\tnext.id = v;\n    \t\t\tnext.dist = dis[v];\n    \t\t\tpq.push(next);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n} \n\nint main()\n{\n\tcin >> n >> p >> c;\n\tfor(int i = 1; i <= n; i++) //\u8f93\u5165\u6bcf\u5934\u725b\u6240\u5728\u7684\u4f4d\u7f6e \n\t{\n\t\tcin >> cow[i];\n\t}\n\tfor(int i=1; i <= p; i++)\n\t{\n\t\tfor(int j=1; j <= p; j++)\n\t\t{\n\t\t\tvertex[i][j] = (i == j) ? 0 : INF;\n\t\t}\n\t}\n\tfor(int i=1; i <= c; i++) //\u8f93\u5165\u6bcf\u4e00\u6761\u8fb9 \n\t{\n\t\tint a, b, d;\n\t\tcin >> a >> b >> d;\n\t\tvertex[a][b] = d;\n\t\tvertex[b][a] = d;\n\t\tneighbor[a].push_back(b);\n\t\tneighbor[b].push_back(a); \n\t}\n\tint ans = INF;\n\tfor(int i=1; i <= p; i++) //\u6ce8\u610f\u662f\u5faa\u73af\u7267\u573a\n\t{\n\t\tdijkstra(i); //\u5047\u5982\u628a\u7cd6\u653e\u5728\u7b2ci\u4e2a\u7267\u573a \n\t\tint sum = 0;\n\t\tfor(int j=1; j <= n; j++)\n\t\t{\n\t\t\tsum = sum + dis[cow[j]];\n\t\t}\n\t\tans = min(ans, sum);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n\n\n```\n\n# \u597d\u4e86\uff0c\u7b2c\u4e8c\u5929\u5c31\u5230\u8fd9\u91cc\uff0c\u662f\u4e0d\u662f\u90fd\u542c\u61c2\u4e86\u5462~~\u72d7\u5c41~~\uff1f\u6b22\u8fce\u5728\u4e0b\u65b9\u7559\u8a00\uff01",
        "postTime": 1560154192,
        "uid": 37682,
        "name": "\u5fa1\u00b7Dragon",
        "ccfLevel": 0,
        "title": "\u56fe\u8bba-\u6700\u77ed\u8def\u5f84<Dijkstra,Floyd>"
    },
    {
        "content": "### \u524d\u8a00\n~~\u5173\u4e8espfa\uff0c\u5b83\u6b7b\u4e86~~  \n\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u7a33\u5b9a\u7684\u7b97\u6cd5\u2014\u2014dijkstra.  \n\n\u7a33\u5b9a\u7684$O(n^2)$\u7b97\u6cd5\uff0c\u4f60\u503c\u5f97\u62e5\u6709\uff01~~TLE~~\n\n---\n### \u6b63\u89e3\n\u597d\u4e86\u4e0d\u80e1\u626f\u4e86\uff0c\u5176\u5b9e\u88f8dijkstra($O(n^2)$)\u662f\u4f1a\u8d85\u65f6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4f18\u5316\u5b83\n\n\u60f3\u4e00\u60f3\uff0cdij\u6700\u8017\u65f6\u95f4\u7684$O(n)$\u5728\u54ea\u91cc\u5462\uff1f  \n\u6269\u5c55\u8282\u70b9\u3001\u6807\u8bb0\u767d\u70b9\uff01\n\n\u6269\u5c55\u8282\u70b9\u4ee5\u6211\u4eec\u8fd9\u79cd\u6c34\u5e73\u662f\u96be\u4ee5\u4f18\u5316\u7684\u4e86\uff0c\u4f46\u6807\u8bb0\u767d\u70b9\u5462\uff1f  \n\u56e0\u4e3a\u6211\u4eec\u6bcf\u4e00\u6b21\u53ea\u7528\u9009\u6700\u5c0f\u7684\u8282\u70b9\u6765\u6807\u8bb0\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u4f18\u5316\u6210$O(logn)$\n\n\u6240\u4ee5\uff0c\u4f18\u5316\u540e\u7684\u590d\u6742\u5ea6\u2026\u2026~~\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u53cd\u6b63\u6211\u8fc7\u4e86\uff09~~\u6709\u5927\u4f6c\u544a\u8bc9\u6211\u5417\uff1f\n\n\u8fd8\u6709\uff0c\u672c\u6765\u6211\u662f\u624b\u6253\u5806\u7684\uff0c\u70b8\u4e86\u3002\u3002\n\n\u4e8e\u662f\u7528\u4e86STL\u4f18\u5148\u961f\u5217\uff08\u5927\u90e8\u5206\u90fd\u4e0d\u4f1a\uff0c\u6211\u6ca1\u5b66\u8fc7STL\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26[@Gaussian](https://www.luogu.org/space/show?uid=139340)\u5927\u4f6c\u5e2e\u5fd9\u7684\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#define ARRLEN 100005\n#define INF 2147483647\nusing namespace std;\nstruct Node\n{\n\tint start;\n\tint value;\n\tbool operator <(const Node&R) const\n\t{\n\t\treturn R.value<value;\n\t}\n};\npriority_queue<Node> h;\nstruct Edge\n{\n\tint next;\n\tint to;\n\tint val;\n}edge[ARRLEN*2];\nint head[ARRLEN],len,n,m,s,dis[ARRLEN];\nbool white[ARRLEN];\nvoid add_edge(int start,int end,int v)\n{\n\tlen++;\n\tedge[len].next=head[start];\n\tedge[len].to=end;\n\tedge[len].val=v;\n\thead[start]=len;\n}\nvoid dij(int start)\n{\n\tint u,v;\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=INF;\n\tdis[start]=0;\n\t// white[start]=true;\n\th.push((Node){start,0});\n\twhile(!h.empty())\n\t{\n\t\tNode tmp=h.top();\n\t\tu=tmp.start;\n\t\th.pop();\n\t\tif(white[u])\n\t\t\tcontinue;\n\t\twhite[u]=true;\n\t\tfor(int i=head[u];i!=0;i=edge[i].next)\n\t\t{\n\t\t\tv=edge[i].to;\n\t\t\tif(dis[v]>dis[u]+edge[i].val)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].val;\n\t\t\t\tif(!white[v])\n\t\t\t\t{\n\t\t\t\t\th.push((Node){v,dis[v]});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint u,v,f;\n\tscanf(\"%d %d %d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d %d\",&u,&v,&f);\n\t\tadd_edge(u,v,f);\n\t}\n\tdij(s);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dis[i]);\n\treturn 0;\n}\n```\n\n\u5f53\u65f6\u6211\u5c31\u61f5\u4e86\uff0c\u8fd9\u662f\u4ec0\u4e48\u64cd\u4f5c\uff1f\uff1f\u4e0d\u884c\uff0c\u6211\u8fd9\u4e2a\u72fc\u706b\u600e\u4e48\u80fd\u8fd9\u6837\u9760\u5185\u7f6e\u51fd\u6570\uff01  \n\u4e0a\u5427\uff0c\u6211\u7684\u624b\u6253\u5806\uff01\n\n\u6ce8\uff1a\n- \u767d\u70b9\uff1a\u5df2\u7ecf\u4e0d\u80fd\u677e\u5f1b\u7684\u70b9\n- \u84dd\u70b9\uff1a\u53ef\u4ee5\u8fdb\u884c\u677e\u5f1b\u7684\u70b9\n\n```cpp\n#include <cstdio>\n#define ARRLEN 100005//\u6570\u7ec4\u957f\u5ea6\uff0c\u8fb9\u6570\u8981\u5f002\u500d\n#define INF 2147483647//\u65e0\u9650\u5927 2^31-1\nusing namespace std;\nstruct Node\n{\n\tint start;//\u9876\u70b9(\u5176\u5b9e\u662f\u7ec8\u70b9)\n\tint value;//\u8fb9\u6743\n}h[ARRLEN];//\u5728\u5806\u4e2d\u7684\u7ed3\u6784\u4f53\nvoid swap(Node &a,Node &b)\t{Node t=a;a=b;b=t;}//\u4ea4\u6362\u4e0d\u89e3\u91ca\nstruct Edge\n{\n\tint next;\n\tint to;\n\tint val;\n}edge[ARRLEN*2];//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\nint head[ARRLEN],len,n,m,s,dis[ARRLEN],hl;\nbool white[ARRLEN];//\u767d\u70b9\nvoid Up(int wz)//\u5411\u4e0a\u64cd\u4f5c\n{\n\twhile(h[wz].value<h[wz/2].value&&wz>1)\n\t{\n\t\tswap(h[wz],h[wz/2]);\n\t\twz/=2;\n\t}\n}\nvoid Down(int wz)//\u5411\u4e0b\u64cd\u4f5c\n{\n\twhile((h[wz].value>h[wz*2].value&&wz*2<=hl)\n    ||\n    (h[wz].value>h[wz*2+1].value&&wz*2+1<=hl))\n\t{\n\t\tint t=wz*2;\n\t\tif(h[t+1].value<h[t].value&&t+1<=hl)\n\t\t\tt++;\n\t\tswap(h[wz],h[t]);\n\t\twz=t;\n\t}\n}\nvoid Ins(Node in)//\u63d2\u5165\u64cd\u4f5c\n{\n\thl++;\n\th[hl]=in;\n\tUp(hl);\n}\nvoid Del(int wz)//\u5220\u9664\u64cd\u4f5c\n{\n\tif (h[wz].value>h[hl].value)\n\t{\n\t\th[wz]=h[hl];\n\t\thl--;\n\t\tUp(wz);\n\t}\n\telse if(h[wz].value<h[hl].value)\n\t{\n\t\th[wz]=h[hl];\n\t\thl--;\n\t\tDown(wz);\n\t}\n\telse\n\t{\n\t\th[wz]=h[hl];\n\t\thl--;\n\t}\n}\n\nvoid add_edge(int start,int end,int v)\n{\n\tlen++;\n\tedge[len].next=head[start];\n\tedge[len].to=end;\n\tedge[len].val=v;\n\thead[start]=len;\n}\nvoid dij(int start)\n{\n\tint u,v;\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=INF;\n\tdis[start]=0;\n\tIns((Node){start,0});//\u5728\u8fd9\u91cc\u5148\u628a\u8d77\u70b9\u653e\u8fdb\u5806\u91cc\n\twhile(hl)//\u76f8\u5f53\u4e8eh.size()\n\t{\n\t\tNode tmp=h[1];//\u53d6\u51fa\u5806\u9876\n\t\tu=tmp.start;\n\t\tDel(1);//\u5220\u9664\u5806\u9876\n\t\tif(white[u])//\u5982\u679c\u4e0d\u80fd\u677e\u5f1b\n\t\t\tcontinue;\n\t\twhite[u]=true;//\u5c06\u4e0a\u4e00\u6b21\u66f4\u65b0\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u7684\u70b9\u66f4\u65b0\u4e3a\u767d\u70b9\n\t\tfor(int i=head[u];i!=0;i=edge[i].next)//\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\n\t\t{\n\t\t\tv=edge[i].to;\n\t\t\tif(dis[v]>dis[u]+edge[i].val)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].val;\n\t\t\t\tif(!white[v])//\u5982\u679c\u4e0d\u662f\u767d\u70b9\n\t\t\t\t{\n\t\t\t\t\tIns((Node){v,dis[v]});//\u63d2\u5165\u65b0\u8fb9\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint u,v,f;\n\tscanf(\"%d %d %d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d %d\",&u,&v,&f);\n\t\tadd_edge(u,v,f);//\u52a0\u65b0\u8fb9\n\t}\n\tdij(s);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dis[i]);\n\treturn 0;\n}\n\n```\n\n\u5173\u4e8e\u5806\uff0c\u4e0d\u61c2\u7684\u670b\u53cb\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://www.luogu.org/blog/BlueHedgehog/solution-p2676)\u8d85\u8be6\u7ec6\u4fdd\u8bc1\u4f1a\uff01\uff1b  \n\u5173\u4e8edijkstra\uff0c\u4e0d\u61c2\u7684\u670b\u53cb\u8bf7\u79fb\u6b65[\u5f31\u5316\u7248](https://www.luogu.org/problemnew/show/P3371)\uff1b  \n#### END.",
        "postTime": 1548730343,
        "uid": 112395,
        "name": "Martin_MHT",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# SPFA\u7684\u9898\u89e3\u5728\u54ea\u91cc\uff1f\uff1f\uff1f\n\n## SPFA\u8fd8\u6ca1\u6709\u6b7b\uff01\uff01\uff01\n\n\u65e2\u7136dijkstra\u53ef\u4ee5\u4f7f\u7528\u5806\u4f18\u5316\uff0cspfa\u4e00\u6837\u53ef\u4ee5\uff01\n\nspfa\u7684\u5806\u4f18\u5316\uff1a\u6bcf\u6b21\u4ece\u5806\u4e2d\u53ea\u9700\u8981\u53d6\u51fa\u6700\u5c0f\u7684\u5143\u7d20\u8fdb\u884c\u677e\u5f1b\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u5927\u5927\u7f29\u5c0f\u677e\u5f1b\u7684\u6b21\u6570\uff0c\u6548\u7387\u4ece\u800c\u5f97\u5230\u63d0\u9ad8\u3002\n\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=2147483647;\nconst int N=100005;\nint d[N];\nvector<pair<int,int>>edge[N];\npriority_queue<pair<int,int> >q;\nint main()\n{\n\tint n,m,s,f,g,w;\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&f,&g,&w);\n\t\tedge[f].push_back(make_pair(g,w));\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\td[i]=INF;\n\td[s]=0;\n\tq.push(make_pair(0,s));\n\twhile(!q.empty())\n\t{\n\t\tint k=q.top().second;\n\t\tif(d[k]!=-q.top().first)\n\t\t{\n\t\t\tq.pop();\n\t\t\tcontinue;\n\t\t}\n\t\tq.pop();\n\t\tfor(int i=0;i<(int)edge[k].size();i++)\n\t\t{\n\t\t\tint v=edge[k][i].first,u=edge[k][i].second;\n\t\t\tif(d[v]>d[k]+u)\n\t\t\t{\n\t\t\t\td[v]=d[k]+u;\n\t\t\t\tq.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",d[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1535103285,
        "uid": 67896,
        "name": "AllureLove",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u542c\u8bf4\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6570\u636e\u52a0\u5f3a\uff0c\u5174\u81f4\u52c3\u52c3\u7684\u8dd1\u6765\u5199\u4e86\u4e00\u53d1dijkstra+\u4f18\u5148\u961f\u5217\u4f18\u5316\uff0c\u4e00\u5f00\u59cb\u91cd\u8f7d\u62ec\u53f7\u8fd0\u7b97\u7b26WA\u4e86\u4e00\u4e2a\u70b9\uff0c\u540e\u6765\u542c\u4e86\u795e\u7287\u7684\u8bdd\u8001\u8001\u5b9e\u5b9e\u5199\u7ed3\u6784\u4f53\uff0c\u4e8e\u662fAC\u4e86OwO\n\n\u849f\u84bb\u5bf9dijkstra\u4e0d\u662f\u975e\u5e38\u719f\u7ec3\uff0c\u6709\u9519\u8bef\u53ef\u4ee5\u7acb\u523b\u8e22\u51fa\uff01\n\n------------------\n\u8bdd\u8bf4\u4eca\u5929\u6570\u636e\u53c8\u52a0\u5f3a\u4e86\uff0c\u4e4b\u524d\u7684\u4ee3\u7801dist\u521d\u59cb\u53162147483647\u5c31AC\u4e86...\n\n```cpp\n#include <bits/stdc++.h>\n#define N 200000+100\nusing namespace std;\nint n, m, num, nt[N], p[N], q[N], b[N];\nbool flag[N];\nlong long dist[N], w[N];\nvoid add(int x, int y, long long z)\n{\n\tb[++num] = y;\n\tw[num] = z;\n\tnt[num] = p[x];\n\tp[x] = num;\n}\nstruct Node {\n\tint bh;\n\tlong long dist;\n\tNode(int x, long long y)\n\t{\n\t\tbh = x;\n\t\tdist = y;\n\t}\n\tbool operator <(const Node &s)const\n\t{\n\t\treturn s.dist<dist;\n\t}\n};\nvoid dijkstra(int st)\n{\n\tfor (int i = 1; i <= n; ++i)dist[i] = 2147483647;\n\tdist[st] = 0;\n\tpriority_queue<Node>q;\n\tq.push(Node(st, 0));\n\twhile (!q.empty())\n\t{\n\t\tNode k = q.top(); q.pop();\n\t\tif (!flag[k.bh])\n\t\t{\n\t\t\tflag[k.bh] = true;\n\t\t\tint e = p[k.bh];\n\t\t\twhile (e)\n\t\t\t{\n\t\t\t\tint kk = b[e];\n\t\t\t\tif (dist[kk] - dist[k.bh]>w[e])\n\t\t\t\t\tdist[kk] = dist[k.bh] + w[e];\n\t\t\t\tq.push(Node(kk, dist[kk]));\n\t\t\t\te = nt[e];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint st;\n\tscanf(\"%d%d%d\", &n, &m, &st);\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint x, y;\n\t\tlong long z;\n\t\tscanf(\"%d%d%lld\", &x, &y, &z);\n\t\tadd(x, y, z);\n\t}\n\tdijkstra(st);\n\tfor (int i = 1; i <= n; ++i)\n\t\tprintf(\"%lld \", dist[i]);\n\treturn 0;\n}\n```",
        "postTime": 1532334527,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u663e\u7136\u8981\u7528$Dijkstra$\u7b97\u6cd5\n\n$Dijkstra$\u7b97\u6cd5\u91c7\u7528\u7684\u662f\u4e00\u79cd\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4dis\u6765\u4fdd\u5b58\u6e90\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u4e00\u4e2a\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u7684\u96c6\u5408\uff1a$T$\uff0c\u521d\u59cb\u65f6\uff0c\u539f\u70b9$s$\u7684\u8def\u5f84\u6743\u91cd\u88ab\u8d4b\u4e3a$0$ ,$(dis[s]=0)$\u3002\u82e5\u5bf9\u4e8e\u9876\u70b9 $s $\u5b58\u5728\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8fb9$\uff08s,m\uff09$\uff0c\u5219\u628a$dis[m]$\u8bbe\u4e3a$w(s,m)$,\u540c\u65f6\u628a\u6240\u6709\u5176\u4ed6\uff08$s$\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\uff09\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002\u521d\u59cb\u65f6\uff0c\u96c6\u5408$T$\u53ea\u6709\u9876\u70b9$s$\u3002\n\n\u7136\u540e\uff0c\u4ece$dis$\u6570\u7ec4\u9009\u62e9\u6700\u5c0f\u503c\uff0c\u5219\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u7684\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u628a\u8be5\u70b9\u52a0\u5165\u5230$T$\u4e2d\uff0c$OK$\uff0c\u6b64\u65f6\u5b8c\u6210\u4e00\u4e2a\u9876\u70b9\uff0c\u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u770b\u770b\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\u5e76\u4e14\u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u8fd9\u4e9b\u9876\u70b9\u5728$dis$\u4e2d\u7684\u503c\u3002\n\n\u7136\u540e\uff0c\u53c8\u4ece$dis$\u4e2d\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u91cd\u590d\u4e0a\u8ff0\u52a8\u4f5c\uff0c\u76f4\u5230T\u4e2d\u5305\u542b\u4e86\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```\n#include <bits/stdc++.h>\n#define F(i, l, r) for(int i = (l), _end_ = (int)(r); i <= _end_; ++i)\n#define f(i, r, l) for(int i = (r), _end_ = (int)(l); i >= _end_; --i)\n#define Set(a, v) memset(a, v, sizeof(a))\n#define file(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\nusing namespace std;\n\nbool chkmin(int &a, int b) {return b < a ? a = b, 1 : 0;}\nbool chkmax(int &a, int b) {return b > a ? a = b, 1 : 0;}\n\ninline int read() {\n int x = 0, fh = 1; char ch = getchar();\n    for (; !isdigit(ch); ch = getchar() ) if (ch == '-') fh = -1;\n    for (; isdigit(ch); ch = getchar() ) x = (x<<1) + (x<<3) + (ch ^ '0');\n    return x * fh;\n}\nint n,m,s;\nint he[100005],to[200005],ne[200005],cost[200005],e;\nint dis[100005];\nvoid add(int x,int y,int z){\n     to[++e]=y;\n\t ne[e]=he[x];\n\t he[x]=e;\n\t cost[e]=z;\n}\n#define PII pair<int,int>\nint flag[100005];\npriority_queue<PII,vector<PII> ,greater<PII> >Q;\nvoid spfa(){\n    F(i,1,n)dis[i]=2107483647;\n   dis[s]=0;\n   Q.push(make_pair(dis[s],s));\n   while(!Q.empty()){\n    PII now=Q.top();\n    Q.pop();\n\t if(flag[now.second])continue;\n    flag[now.second]=1;\n    for(int i=he[now.second];i;i=ne[i]){\n         int v=to[i];\n        if(dis[now.second]+cost[i]<dis[v]){\n            dis[v]=dis[now.second]+cost[i];\n            if(!flag[v])\n              Q.push(make_pair(dis[v],v));\n        }\n    }\n   }\n}\nint main () {\n#ifndef ONLINE_JUDGE\nfile(\"4779\");\n#endif\n    n=read();\n\tm=read();\n\ts=read();\n\tF(i,1,m){\n\t   int x=read(),y=read(),z=read();\n\t   add(x,y,z);\n\t}\n    spfa();\n\tF(i,1,n)printf(\"%d \",dis[i]);\n    return 0;\n}\n```\n\n\u6700\u540e\u518d\u8bf4\u4e00\u4ef6\u4e8b\n\n~~\u5173\u4e8e~~$spfa$~~,\u5b83\u5df2\u7ecf\u6b7b\u4e86~~",
        "postTime": 1532330851,
        "uid": 44829,
        "name": "psk011102",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "...\u597d\u5c34\u5c2c\u554a\n\n\u6700\u8fd1\u624d\u77e5\u9053\u4f18\u5148\u961f\u5217\u8fd9\u4e1c\u897f\n\n\u4e0a\u6b21\u5728P3371 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09\u4e0a\u88ab\u5361\u4e86\u4e4b\u540e\u624d\u77e5\u9053\u81ea\u5df1\u7684dijkstra\u4e00\u76f4\u90fd\u6ca1\u6709\u4f18\u5316\u3002\n\n\u4f18\u5316\u4f3c\u4e4e\u4e5f\u4e0d\u96be\uff0c\u5c31\u662f\u62ff\u4f18\u5148\u961f\u5217\u4f18\u5316\u627e\u6700\u77ed\u7684\u5c31\u597d\n\n### \u795e\u7287\u52ff\u55b7,\u8fd9\u662f\u521d\u7ea7\u7684\u849f\u84bbAC\u7b97\u6cd5\uff1a\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.StreamTokenizer;\nimport java.util.ArrayList;\nimport java.util.PriorityQueue;\n\npublic class Main {\n\n\tprivate static StreamTokenizer stk;\n\tprivate static int n;// \u70b9\u6570\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static void main(String[] args) {\n\t\tstk = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));// \u4f18\u5316\u8f93\u5165\n\t\tn = getInt();\n\t\tint m = getInt();// \u8fb9\u6570\n\t\tint start = getInt();// \u8d77\u70b9\n\t\tArrayList<Edge_4779>[] a = new ArrayList[n + 1];\n\t\tint[] results = new int[n + 1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\ta[i] = new ArrayList<Edge_4779>();\n\t\t\tresults[i] = 0x7fffffff;// \u8fd9\u91cc\u6700\u5f00\u59cb\u5168\u90fd\u662f\u65e0\u7a77\u5927\n\t\t}\n\t\twhile (m-- > 0) {\n\t\t\tint f = getInt();\n\t\t\tint g = getInt();\n\t\t\tint w = getInt();\n\t\t\ta[f].add(new Edge_4779(g, w));// \u5b58\u56fe\n\t\t}\n\n\t\tDijkstra(a, results, start);\n\n\t\tStringBuilder s = new StringBuilder();\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\ts.append(results[i]);\n\t\t\ts.append(\" \");\n\t\t}\n\t\t// \u4f18\u5316\u8f93\u51fa\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tout.println(s);\n\t\tout.flush();\n\n\t}\n\n\t// \u4f7f\u7528\u4f18\u5148\u961f\u5217\u8fdb\u884c\u4f18\u5316\u7684Dijkstra\n\tprivate static void Dijkstra(ArrayList<Edge_4779>[] a, int[] results, int start) {\n\t\tint count = 0;\n\t\tboolean[] bool = new boolean[n + 1];\n\n\t\tPriorityQueue<Edge_4779> pq = new PriorityQueue<Edge_4779>();// \u4f18\u5148\u961f\u5217\n\t\tpq.add(new Edge_4779(start, 0));\n\n\t\twhile (pq.size() > 0 && count < n) {// \u6ca1\u6709\u8fb9\u4e86\u6216\u8005\u5168\u90e8\u70b9\u90fd\u8ba1\u7b97\u8fc7\u4e86\u5c31\u7ed3\u675f\n\t\t\tEdge_4779 t = pq.poll();// \u53d6\u51fa\u6700\u5c0f\u7684\n\t\t\tint g = t.G;\n\t\t\tint w = t.W;\n\t\t\tif (!bool[g]) {// \u5224\u65ad\u662f\u5426\u904d\u5386\u8fc7\n\t\t\t\tbool[g] = true;\n\t\t\t\tcount++;\n\t\t\t\tresults[g] = w;\n\t\t\t\tfor (Edge_4779 temp : a[g]) {// \u904d\u5386\u6bcf\u6761\u51fa\u8fb9\n\t\t\t\t\tint tg = temp.G;\n\t\t\t\t\tint tw = temp.W;\n\t\t\t\t\tpq.add(new Edge_4779(tg, w + tw));// \u5165\u961f\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static int getInt() {\n\t\ttry {\n\t\t\tstk.nextToken();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn (int) stk.nval;\n\n\t}\n}\n\nclass Edge_4779 implements Comparable<Edge_4779> {\n\tint G, W;\n\n\tpublic Edge_4779(int g, int w) {\n\t\tG = g;// \u76ee\u6807\u70b9\n\t\tW = w;// \u957f\u5ea6\n\t}\n\n\t@Override\n\tpublic int compareTo(Edge_4779 o) {\n\t\treturn this.W - o.W;\n\t}\n\n}\n```\n",
        "postTime": 1567149092,
        "uid": 165785,
        "name": "\u6e21_\u5ddd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5176\u5b9e\u6211\u4e0d\u559c\u6b22\u8dd1dijkstra\u7684\u3002\u3002\u3002\u4f46\u662f\u672c\u9898\u8981\u5361SPFA\uff0c\u6240\u4ee5\u3002\u3002\u3002\n\n\n\u8eab\u4e3a\u4e00\u4e2a\u849f\u84bb\u7684\u6211\u81ea\u7136\u4e0d\u60f3\u5728\u5404\u4f4d\u5927\u4f6c\u9762\u524d\u4f5c\u6b7b\uff0c\u4f46\u662f\u6211\u60f3\u7eaa\u5ff5\u4e00\u4e0b\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u4f7f\u7528\u2014\u2014\n\n# \u6307\u9488\u90bb\u63a5\u8868\uff01\uff01\uff01\n\n\u4e0b\u9762\u5c31\u662f\u4ee3\u7801\u4e86\n\n~~\uff08\u7801\u98ce\u5927\u5bb6\u4e0d\u559c\u6b22\u7684\u8bdd\uff0c\u79c1\u4fe1\u672c\u849f\u84bb\uff0c\u672c\u849f\u84bb\u4e00\u5b9a\u4f1a\u6539\u54e6\uff01\uff09~~\n\n## code\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define N 100000\nusing namespace std;\nstruct ed{\n\tint to,w;\n\ted *next;\n}*edge,*head[N+10];\nint n,m,dis[N+10],s;\ninline void add(int u,int v,int w)\n{\n\tedge=new ed;//\u7533\u8bf7\u52a8\u6001\u5185\u5b58\n\tedge->next=head[u];\n\tedge->to=v;\n\tedge->w=w;\n\thead[u]=edge;\n}\nstruct node{\n\tint w,id;\n\tbool friend operator < (node a,node b)\n\t{\n\t\treturn a.w>b.w;//\u5c0f\u8ddf\u5806\n\t}\n};\npriority_queue<node>q;\nbool vis[N+10];\nvoid dijkstra()\n{\n\tfor(register int i=1;i<=n;++i)dis[i]=0x7f7f7f7f;\n\tmemset(vis,0,sizeof(vis));\n\twhile(!q.empty())q.pop();\n\tnode n1;\n\tn1.id=s;n1.w=0;dis[s]=0;q.push(n1);\n\twhile(!q.empty())\n\t{\n\t\tn1=q.top();q.pop();\n\t\tint u=n1.id;\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tfor(register ed *i=head[u];i;i=i->next)\n\t\t{\n\t\t\tint v=i->to;\n\t\t\tif(dis[v]>dis[u]+i->w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+i->w;\n\t\t\t\tn1.id=v;n1.w=dis[v];q.push(n1);\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tint a,b,c;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t}\n\tdijkstra();\n\tfor(register int i=1;i<=n;++i)printf(\"%d \",dis[i]);\n\treturn 0;\n}\n```",
        "postTime": 1542340270,
        "uid": 111990,
        "name": "\u849f\u84bb\u521d\u97f3\u30df\u30af",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# dijkstra+\u5c0f\u6839\u5806\u4f18\u5316\n\u4e0d\u4f1adijkstra\u7684\u8bf7\u5148\u770b\u4e00\u4e0b[\u8fd9\u4f4d\u5927\u4f6c\u535a\u5ba2\u7684\u8bb2\u7684dijkstra\u7684\u57fa\u672c\u601d\u60f3\uff08\u770b\u4e0d\u61c2\u4ee3\u7801\u6ca1\u5173\u7cfb\uff0c\u6211\u4e5f\u770b\u4e0d\u61c2\uff0c\u8fd9\u7bc7\u9898\u89e3\u6709\u5177\u4f53\u7684\u4ee3\u7801\uff09](https://blog.csdn.net/qq_35644234/article/details/60870719)\n\n\u4e00\u770b\u5230\u7740\u8fd9\u9898\u7684n_max\u503c\uff1a100000\uff0c\u53c8\u60f3\u5230SPFA\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u590d\u6742\u5ea6$O(kE)$\uff08\u6700\u574f\u597d\u50cf\u662f$O(VE)$\uff09\uff08k\u4e3a\u5e38\u6570\uff0c\u4e00\u822c<=2\uff09\u81ea\u7136\u8981\u60f3\u5230\u7528[dijkstra](https://baike.baidu.com/item/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95?fromtitle=Dijkstra%E7%AE%97%E6%B3%95&fromid=215612)\u4e86\u3002\n\n\u4f46\u662f\uff0c\u5982\u679c\u76f4\u63a5\u7528dijkstra\u4f1aTLE\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7528\u5230\u5806\u4f18\u5316\uff0c\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6cd5\u662f\u7528[\u4f18\u5148\u961f\u5217](https://baike.baidu.com/item/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/9354754?fr=aladdin)\uff08priority_queue\uff09\uff0c\u4f18\uff0c\u90a3\u4e48\u8fd8\u662f\u8981\u5b66\u4e00\u5b66\u7528[\u4e8c\u53c9\u5806](https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E5%A0%86/10978086?fr=aladdin)\uff08[\u5c0f\u6839\u5806](https://www.luogu.org/blog/lc-2018-Canton/shou-xie-er-cha-dui-xiao-gen-dui-post)\uff09\uff0c\u4e5f\u5c31\u662f\u4f18\u5148\u961f\u5217\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u6765\u505a\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u662f\u4e8c\u53c9\u5806\u5462\uff1f\u4e8c\u53c9\u5806\u5c31\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u6216\u8005\u662f\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5c0f\u6839\u5806\u662f\u4e00\u79cd\u4e8c\u53c9\u5806\u3002\n\n## \u5173\u4e8e\u5c0f\u6839\u5806\u7684\u4e00\u4e9b\u89c4\u5219\uff1a\n\n**1\u3001\u8fd9\u662f\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u6216\u8005\u662f\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u3002**\n\n**2\u3001\u8fd9\u68f5\u6811\u91cc\u7684\u6bcf\u4e00\u68f5\u6811\u7684\u6839\u7684\u513f\u5b50\uff08\u5de6\u513f\u5b50\u3001\u53f3\u513f\u5b50\uff09\u90fd\u5c0f\u4e8e\u8fd9\u68f5\u6811\u7684\u6839\u3002**\n\n**3\u3001\u8fd9\u68f5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff08\u9664\u6839\u8282\u70b9\u5916\uff09\u7684\u7236\u4eb2\u90fd\u662f\u7f16\u53f7$floor(num/2)$\uff08\u5411\u4e0b\u53d6\u6574\uff09\uff0c\u540c\u7406\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff08\u9664\u53f6\u8282\u70b9\u5916\uff09\u7684\u7f16\u53f7\u90fd\u662f$2*num$\u3001$2*num+1$\u3002**\n\n### \u63d2\u5165\u7684\u89c4\u5219\uff1a\n\n**\u76f4\u63a5\u5c06\u5143\u7d20\u585e\u5165\u5806\u5c3e\uff0c\u7136\u540e\u4e0d\u65ad\u4e0e\u5176\u7236\u8282\u70b9\uff08\u4e0d\u662f\u5806\u91cc\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff09\u6bd4\u8f83\uff0c\u5982\u679c\u8fd9\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5176\u7236\u8282\u70b9\uff0c\u5219\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u4e3a\u6839\u6216\u7b26\u5408\u6761\u4ef6\u4e3a\u6b62\u3002**\n\n### \u5220\u9664\u5806\u9876\u7684\u89c4\u5219\uff1a\n\n**\u73b0\u5c06\u5806\u9876\u5143\u7d20\u5220\u9664\uff0c\u518d\u5c06\u5806\u5e95\u7684\u5143\u7d20a\u52a0\u5165\u5806\u9876\uff0c\u5148\u627e\u5176\u513f\u5b50\u8282\u70b9\uff0c\u6bd4\u8f83\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u5982\u679ca\u6bd4\u5c0f\u7684\u90a3\u4e2a\u5143\u7d20\u5927\uff0c\u5219\u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u518d\u7ee7\u7eed\u6bd4\u8f83a\u73b0\u5728\u7684\u513f\u5b50\uff0c\u76f4\u5230a\u6210\u4e3a\u53f6\u8282\u70b9\u6216\u7b26\u5408\u6761\u4ef6\u4e3a\u6b62\u3002**\n\n\u8fd9\u6837\uff0c\u5c0f\u6839\u5806\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7edd\u5bf9\u662f\u6700\u5c0f\u7684\uff08\u540e\u9762\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f\uff0c\u4f46\u4e00\u5b9a\u6ee1\u8db3\u6bcf\u4e00\u4e2a\u8282\u70b9\uff08\u9664\u6839\u8282\u70b9\u5916\uff09\u90fd\u5c0f\u4e8e\u5176\u7236\u8282\u70b9\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8c\u53c9\u5806\u6765\u4ee3\u66ff\u4f18\u5148\u961f\u5217\u4e86\u3002\n\n\u5177\u4f53\u4ee3\u7801\u548c\u8be6\u89e3\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n\n#define N 100001\n#define M 200001\n#define INF 0x7fffffff\n\nusing namespace std;\n\nint n,m,s,head[N],to[M],w[M],nxt[M],dis[N],cnt;\nbool vis[N];\n\nstruct data{//u\u8868\u793a\u5f53\u524d\u7684\u70b9\u7684\u7f16\u53f7\uff0cs\u8868\u793a\u5f53\u524d\u7684\u8017\u8d39\uff08\u8def\u7a0b\uff09\n    int u,s;\n}now;\n\nclass Heap_little {//\u5c0f\u6839\u5806\n    public://\u516c\u5f00\u7684\u53d8\u91cf/\u51fd\u6570\n        int size(){//\u8fd4\u56de\u957f\u5ea6\n            return len;\n        }\n        data top(){//\u8fd4\u56de\u5806\u9876\u5143\u7d20\n            return heap[1];\n        }\n        void push(data x) {//\u63d2\u5165\u5143\u7d20\n            heap[++len]=x;\n            int now=len;\n            while(now!=1&&heap[now/2].s>heap[now].s) {//\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u5b83\u7684\u7236\u4eb2\u8282\u70b9\u5c0f\uff0c\u5219\u4ea4\u6362\u8fd9\u4e24\u4e2a\u8282\u70b9\n                swap(heap[now/2],heap[now]);\n                now/=2;//\u66f4\u65b0\u5f53\u524d\u8282\u70b9\n            }\n        }\n        void pop(){\n            heap[1]=heap[len--];//\u5f39\u51fa\u5806\u9876\u5143\u7d20\uff0c\u5c06\u5806\u5c3e\u5143\u7d20\u653e\u5165\u5806\u9876\n            int pa=1,s;\n            while(1){\n                s=pa*2;//\u8fd9\u4e2a\u70b9\u7684\u5de6\u513f\u5b50\n                if(s<=len&&heap[s+1].s<heap[s].s){\n                    s++;//\u5982\u679c\u53f3\u513f\u5b50\u66f4\u5c0f\uff0c\u5219\u628as\u6539\u4e3a\u53f3\u513f\u5b50\n                }\n                if(s>len||heap[pa].s<=heap[s].s){\n                    break;//\u5982\u679c\u5df2\u7ecf\u5230\u5806\u5c3e\u6216\u7b26\u5408\u6761\u4ef6\u4e86\uff0c\u5219\u9000\u51fa\n                }\n                swap(heap[pa],heap[s]);//\u4ea4\u6362\u8fd9\u4e24\u4e2a\u5143\u7d20\n                pa=s;\n            }\n        }\n        bool empty(){//\u5224\u65ad\u5806\u662f\u5426\u4e3a\u7a7a\n            if(!len){\n                return true;\n            }else{\n                return false;\n            }\n        }\n    private://\u4e0d\u516c\u5f00\u7684\u53d8\u91cf/\u51fd\u6570\n        int len;\n\t\tdata heap[N];\n}q;\n\nvoid adde(int u,int v,int wi){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n    cnt++;\n    to[cnt]=v;//\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\n    w[cnt]=wi;//\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n    nxt[cnt]=head[u];//\u8bb0\u5f55nxt\n    head[u]=cnt;//\u66f4\u65b0head\n}\n\nvoid dijkstra(){\n    memset(dis,127,sizeof(dis));//\u73b0\u5c06dis\u6570\u7ec4\u8bbe\u4e3a\u6700\u5927\n    q.push((data){s,0});//\u5c06\u8d77\u70b9\u6254\u8fdb\u5806\u91cc\n    while(!q.empty()){//\u5982\u679c\u5806\u6ca1\u6709\u7a7a\n        now=q.top();\n        q.pop();\n        if(vis[now.u]){//\u5982\u679c\u5df2\u7ecf\u6709\u4eba\u6765\u8fc7\u4e86\uff0c\u5219continue\n            continue;\n        }\n        vis[now.u]=true;//\u6807\u8bb0\n        dis[now.u]=now.s;//\u66f4\u65b0dis\n        for(int i=head[now.u];i;i=nxt[i]){\n            if(!vis[to[i]]&&now.s+w[i]<dis[to[i]]){//\u5982\u679c\u6ca1\u6709\u53bb\u8fc7\u5e76\u4e14\u662f\u66f4\u4f18\u65b9\u6848\uff0c\u5c31\u6254\u8fdb\u5806\u91cc\n                q.push((data){to[i],now.s+w[i]});\n            }\n        }\n    }\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        adde(u,v,w);//\u5efa\u8fb9\n    }\n    dijkstra();\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",dis[i]);//\u8f93\u51fa\n    }\n    puts(\"\");//\u8f93\u51fa\u540e\u6362\u884c\uff0c\u517b\u6210\u597d\u4e60\u60ef\n    return 0;\n}\n```\n\n\u5728\u8865\u5145\u4e00\u7bc7\u7528**\u4f18\u5148\u961f\u5217**\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n\n#define N 100001\n#define M 200001\n#define INF 0x7fffffff\n\nusing namespace std;\n\nint n,m,s,head[N],to[M],w[M],nxt[M],dis[N],cnt;\nbool vis[N];\n\nstruct data{\n    int u,s;\n    bool operator < (const data &a) const {//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n        return s>a.s;\n    }\n}now;\n\npriority_queue<data>q;//\u4f18\u5148\u961f\u5217\n\nvoid adde(int u,int v,int wi){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n    cnt++;\n    to[cnt]=v;//\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\n    w[cnt]=wi;//\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n    nxt[cnt]=head[u];//\u8bb0\u5f55nxt\n    head[u]=cnt;//\u66f4\u65b0head\n}\n\nvoid dijkstra(){\n    memset(dis,127,sizeof(dis));//\u73b0\u5c06dis\u6570\u7ec4\u8bbe\u4e3a\u6700\u5927\n    q.push((data){s,0});//\u5c06\u8d77\u70b9\u6254\u8fdb\u961f\u5217\u91cc\n    while(!q.empty()){//\u5982\u679c\u961f\u5217\u6ca1\u6709\u7a7a\n        now=q.top();\n        q.pop();\n        if(vis[now.u]){//\u5982\u679c\u5df2\u7ecf\u6709\u4eba\u6765\u8fc7\u4e86\uff0c\u5219continue\n            continue;\n        }\n        vis[now.u]=true;//\u6807\u8bb0\n        dis[now.u]=now.s;//\u66f4\u65b0dis\n        for(int i=head[now.u];i;i=nxt[i]){\n            if(!vis[to[i]]&&now.s+w[i]<dis[to[i]]){//\u5982\u679c\u6ca1\u6709\u53bb\u8fc7\u5e76\u4e14\u662f\u66f4\u4f18\u65b9\u6848\uff0c\u5c31\u6254\u8fdb\u961f\u5217\u91cc\n                q.push((data){to[i],now.s+w[i]});\n            }\n        }\n    }\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=m;i++){\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        adde(u,v,w);//\u5efa\u8fb9\n    }\n    dijkstra();\n    for(int i=1;i<=n;i++){\n        printf(\"%d \",dis[i]);//\u8f93\u51fa\n    }\n    puts(\"\");\n    return 0;\n}\n```\n\n\u987a\u4fbf\u8865\u5145\u4e00\u70b9\uff1a\u6709\u8d1f\u6743\u5343\u4e07\u522b\u6709dijkstra\uff0c\u4e56\u4e56\u7528~~\u6b7b\u4e86\u7684~~SPFA\u5427~~\uff08Floyd\u5c31\u4e0d\u60f3\u8bf4\u4e86\uff0c\u7528\u90a3\u4e2a\u4e1c\u897f\u8fd8\u4e0d\u5982\u6253\u66b4\u529b\uff09~~\u3002",
        "postTime": 1538744889,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "dijk\u5176\u5b9e\u53ef\u4ee5\u88ab\u5f88\u591a\u4f18\u5316\uff0c\u4f46\u597d\u50cf\u5728\u5408\u7406\u65f6\u9650\u5185\uff0c\u6700\u5feb\u7684\u662fzkw\u7ebf\u6bb5\u6811(\u672c\u9898\u53ef\u80fd\u4e0d\u662f,\u53c2\u8003[\u6b64\u9898](https://www.lydsy.com/JudgeOnline/problem.php?id=3040)\u6570\u636e\u8303\u56f4)\uff0c\u6240\u4ee5\u7279\u6765\u6b64\u53d1\u8868\u9898\u89e3\uff0c\u5206\u4eab\u4e00\u4e0b\n\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u53ef\u4ee5\u770b\u697c\u4e0b\u9898\u89e3\uff0c\u60f3\u5b66zkw\u7684\u53ef\u4ee5\u53c2\u8003\u672c\u4eba\u535a\u5ba2[\u6d45\u8c08zkw\u4e4blazy\u6807\u8bb0](https://www.cnblogs.com/czx-1010/articles/9679412.html)\u548c\u8bba\u6587[\u300a\u7edf\u8ba1\u7684\u529b\u91cf\u300b](https://wenku.baidu.com/view/0c1bbba40029bd64783e2cca.html)\n```C++\n#pragma GCC optimize(2)\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=='-'&&(f=-1),ch=getchar();\n\twhile (ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x*f;\n}//\u5feb\u901f\u8bfb\u5165\nconst int N=1e6+10,M=1e7+10,inf=0x3f3f3f3f;\nint n,m,tot;\nint last[N],dis[N];\nstruct AC{int v,w,to;}e[M];\nvoid add(int x,int y,int z){e[++tot]=(AC){y,z,last[x]};last[x]=tot;}//\u52a0\u8fb9\u64cd\u4f5c\n\nint t[N<<2],num[N<<2],tn;\nvoid first(){memset(t,0x3f,sizeof t);}\nvoid build(){tn=1;while(tn<n)tn<<=1;--tn;for (int i=1;i<=n;++i)num[i+tn]=i;}\nvoid change(int p,ll k)\n{\n\tp+=tn;t[p]=k,p>>=1;\n\twhile (p){\n\tif (t[p<<1]<t[p<<1|1]) t[p]=t[p<<1],num[p]=num[p<<1];\n\telse t[p]=t[p<<1|1],num[p]=num[p<<1|1];p>>=1;\n\t}\n}\n//\u4e0a\u9762\u4e3azkw\u7ebf\u6bb5\u6811\nint main()\n{\n\tn=read(),m=read();int s=read();first();build();//first\u548cbuild\u662f\u7ed9\u7ebf\u6bb5\u6811\u8d4b\u521d\u503c\n\tfor (int i=tot,x,y,z;i<m;++i)x=read(),y=read(),z=read(),add(x,y,z);\n\t{\n\t\tint x;\n\t\tmemset(dis,0x3f,(n+1)<<2);dis[s]=0;change(s,0);\n\t\twhile (t[1]!=inf)\n\t\t{\n\t\t\tx=num[1];change(x,inf);\n\t\t\tfor (int i=last[x],v=e[i].v;i;i=e[i].to,v=e[i].v)\n\t\t\tif (dis[v]>dis[x]+e[i].w)\n\t\t\t\tdis[v]=dis[x]+e[i].w,change(v,dis[v]);\n\t\t}\n\t}//\u62ec\u53f7\u5185\u4e3adijkstra\n\tfor (int i=1;i<=n;++i)printf(\"%d \",dis[i]);\n\treturn 0;\n}\n```",
        "postTime": 1538209373,
        "uid": 22041,
        "name": "1010_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u83ab\u540d\u611f\u89c9\u6211\u88ab\u5751\u4e86\u3002\u3002\u3002\u3002\u3002\u5624\u5624\u5624\uff01\n\n\u8fd9\u9898\u5728p3371\u7528spfa\u6b7b\u5f97\u597d\u60e8\uff0cT\u6389\u4e86\u4e09\u4e2a\u70b9\u3002\n\n\u7edd\u671b\u4e4b\u4e0b\u6765\u6b21\u6b64\u4f5c\u6b7b\u3002\n\n**\u7ed3\u679c\u5c45\u7136\u8fc7\u4e86\uff01\uff01\uff01**\n\n\u770b\u6765\u7a20\u5bc6\u56fe\u662f\u4e0d\u4e00\u6837\u3002\u4f46\u4e0d\u5efa\u8bae\u5728\u4e0d\u540c\u6bd4\u8d5b\u4e2d\u5199\u8fd9\u4e2a\u3002\n\n\u5173\u4e8espfa\uff0c\n\n\u4ed6\u6b7b\u4e86\u3002\u3002\u3002\n\u4e8e\u662f\u53ef\u7231\u7684Dij\u5f00\u59cb\u4ee5\u72ec\u7acb\u7684\u59ff\u6001\u767b\u4e0a\u653f\u6cbb\u821e\u53f0\u3002\n\n\u7136\u800c\u4eca\u5929spfa\u7ffb\u8eab\u4e86\uff01\n\n\u901a\u8fc7\u4e00\u6837\u7684\u4f18\u5316spfa\u518d\u6b21\u63a8\u7ffbDij\u4f2a\u653f\u6743\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u5f88\u597d\u7406\u89e3\uff0c\u73b0\u5c06\u5c0f\u6839\u5806\u91cd\u8f7d\u4e3a\u5927\u6839\u5806\u5728\u4e13\u95e8\u5199\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\n\n\u6700\u540eSTL\u4f18\u5148\u961f\u5217\u7684\u53d6\u9876\u64cd\u4f5c\u8981\u7528q.top();\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684spfa\u4e86\uff01\u6211\u7528\u4e86\u524d\u5411\u661f\u5b58\u56fe\uff0cvecter\u4e0d\u4f1a\u7528\u5404\u4f4d\u5927\u4f6c\u89c1\u8c05\uff1b\n\u597d\u5427\u597d\u5427\uff01\u4e0a\u4ee3\u7801\uff01\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\nusing namespace std;\nlong long n,m,s;\n#define N 100005\n#define M 200005\n#define ll long long\nll head[N],vis[N],dis[N];\nll En=0;\nstruct edge{\n\tll next,to,dis;\n}E[M];\nvoid E_add(ll from,ll to,ll dis){\n\tEn++;\n\tE[En].next=head[from];\n\tE[En].to=to;\n\tE[En].dis=dis;\n\thead[from]=En;\n}//\u524d\u5411\u661f\u5c31\u4e0d\u7528\u8be6\u8bf4\u4e86\uff1b\nstruct node{\n\tll u,v;\n\tbool operator < (const node &nt) const {\n\t\treturn v>nt.v;\n\t}\n};//\u9632\u6b62\u53ef\u7231\u7684\u5806\u51fa\u9519\nvoid clear(){\n\tfor(int i=1;i<=n;++i)dis[i]=2147483647,vis[i]=0;\n}\nvoid spfa(ll s){\n\tclear();\n\tpriority_queue<node> q;\n\tdis[s]=0;vis[s]=1;q.push((node){s,dis[s]});\n\twhile(!q.empty()){\n\t\tnode tmp=q.top();q.pop();vis[tmp.u]=0;//\u592a\u53ef\u6015\u4e86\uff0c\u6211pop\u6ca1\u5199\u67e5\u4e86\u4e09\u5341\u5206\u949f\u3002\u3002\u3002\n\t\tfor(int i=head[tmp.u];i;i=E[i].next){\n\t\t\tll v=E[i].to;\n\t\t\tif(dis[v]>dis[tmp.u]+E[i].dis){\n\t\t\t\tdis[v]=dis[tmp.u]+E[i].dis;\n\t\t\t\tif(vis[v]==0){\n\t\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%lld%lld%lld\",&n,&m,&s);\n\tfor(int i=1;i<=m;++i){\n\t\tll u,v,w;\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tE_add(u,v,w);\n\t}\n\tspfa(s);\n\tfor(int i=1;i<=n;++i)printf(\"%lld \",dis[i]);\n}\n```\n\u8981\u8bf4\u7684\u5927\u6982\u5c31\u8fd9\u4e9b\u4e86\uff0c\u795d\u5927\u5bb6while(1)rp++;",
        "postTime": 1536931560,
        "uid": 87075,
        "name": "\u4e8c\u54e5\u5543\u83dc\u5305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u5982\u679c\u4f60\u9700\u8981\u5b8c\u6574\u4ee3\u7801\u548c\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u53ef\u4ee5\u524d\u5f80\u6211\u7684\u535a\u5ba2\uff1a[https://www.cnblogs.com/zhylj/p/9492055.html](https://www.cnblogs.com/zhylj/p/9492055.html)\n\n\u7ebf\u6bb5\u6811\u4f18\u5316$\\rm dijkstra$\n\n\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4$[l,r]$\u4e2d$dist$\u6700\u5c0f\u7684\u70b9\uff0c\u5220\u9664\u5219\u628a\u8be5\u70b9$dist$\u8d4b\u503c\u4e3a$+\\infty$\uff0c\u7136\u540e\u66f4\u65b0\u8be5\u70b9\u5f71\u54cd\u5230\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u5176\u4ed6\u8282\u70b9\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u5f97\u5230\u201c\u66f4\u65b0\u8be5\u8282\u70b9\u5f71\u54cd\u5230\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u5176\u4ed6\u8282\u70b9\u201d\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\uff08\u7ebf\u6bb5\u6811\u6570\u7ec4$\\rm st[]$\uff09\n\n```\nvoid pushup(int x) {\n    st[x] = dist[st[x << 1]] < dist[st[x << 1 | 1]] ? st[x << 1] : st[x << 1 | 1];\n}\n\nvoid updata(int x, int l, int r, int q) {  //\u66f4\u65b0\u4fe1\u606f\n    if(l != r) {\n        int mid = (l + r) >> 1;\n        if(q <= mid) updata(x << 1, l, mid, q);\n        else updata(x << 1 | 1, mid + 1, r, q);\n        pushup(x);\n    }\n}\n```\n\n\u7136\u540e$\\rm dijkstra$\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n//\u6b64\u5904ans\u4e3a\u6700\u7ec8\u6570\u7ec4\nvoid dijkstra(int s) {\n    ans[s] = dist[s] = 0;\n    build(1, 1, n);  //\u5efa\u6811\n    while(dist[st[1]] < inf) {\n        int v = st[1]; vis[v] = 1; //\u53d6\u51fa\u6700\u5c0f\u7684\n        for(int i = head[v]; i != -1; i = edges[i].nxt) if(!vis[edges[i].to]) { //\u66f4\u65b0\u76f8\u90bb\u8282\u70b9\n            dist[edges[i].to] = min(dist[edges[i].to], dist[v] + edges[i].val);//\u4fee\u6539dist\n            updata(1, 1, n, edges[i].to);//\u66f4\u65b0\u6240\u5f71\u54cd\u7684\u8282\u70b9\n        }\n        ans[v] = dist[v]; dist[v] = inf;//\u8bb0\u5f55\u7b54\u6848\uff0c\u5220\u9664\u8282\u70b9\n        updata(1, 1, n, v);  //\u66f4\u65b0\u6240\u5f71\u54cd\u7684\u8282\u70b9\n    }\n}\n```",
        "postTime": 1534473901,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\u65f6\uff0c\u849f\u84bb\u7684\u6211\u5f00\u5fc3\u6781\u4e86\u3002\n\u56e0\u4e3a\u6211\u4e0d\u4f1aSPFA\u53ea\u4f1adikjstra\n\uff08~~\u4f46\u6211\u7684\u540c\u5b66\u7528STL\u5806\u4f18\u5316\u8c8c\u4f3cT\u4e86~~\uff09\u6ca1\u4e8b\uff0c\u6211\u7528\u7684\u662f\u624b\u6253\u3002\n\u5806\u4f18\u5316\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u8d34\u4ee3\u7801\u5427\uff0c\u7531\u4e8e\u662f\u624b\u6253\uff0c\u7801\u91cf\u8f83\u4e3a\u9002\u4e2d~~NOI2018\u7684\u6897~~\ntree\u5c31\u662f\u5806\uff0cnum\u662f\u8bb0\u6bcf\u4e00\u4e2a\u70b9\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7528\u4e8e\u7ef4\u62a4\u5806\u3002\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<iomanip>\n#include<cstring>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\nint n,m,t,head[100001],dis[100001],maxn=2147483647,tree[100001],tot=0,num[100001];\nbool pd[100001];\nstruct sb\n{\n    int next;\n    int to;\n    int l;\n}a[200001];\nint put(int k)\n{\n    tot++;\n    tree[tot]=k;\n    num[k]=tot;\n    int bj=tot,xia;\n    while(bj!=1)\n    {\n        xia=bj/2;\n        if(dis[tree[xia]]<=dis[tree[bj]])\n            return 0;\n        num[tree[xia]]=bj;\n        num[tree[bj]]=xia;\n        int change=tree[xia];\n        tree[xia]=tree[bj];\n        tree[bj]=change;\n        bj=xia;\n    }\n}\nint bian(int zone)\n{\n    int bj=zone,xia;\n    while(bj!=1)\n    {\n        xia=bj/2;\n        if(dis[tree[xia]]<=dis[tree[bj]])\n            return 0;\n        num[tree[xia]]=bj;\n        num[tree[bj]]=xia;\n        int change=tree[xia];\n        tree[xia]=tree[bj];\n        tree[bj]=change;\n        bj=xia;\n    }\n}\nint get()\n{\n    tree[1]=tree[tot];\n    num[tree[tot]]=1;\n    tot--;\n    int bj=1,xia;\n    while(bj*2<=tot)\n    {\n        xia=bj*2;\n        if(dis[tree[xia+1]]<dis[tree[xia]] && xia+1<=tot)\n            xia++;\n        if(dis[tree[xia]]>=dis[tree[bj]])\n            return 0;\n        num[tree[xia]]=bj;\n        num[tree[bj]]=xia;\n        int change=tree[xia];\n        tree[xia]=tree[bj];\n        tree[bj]=change;\n        bj=xia;\n    }\n}\nint main()\n{\n    cin>>n>>m>>t;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        a[i].to=y;\n        a[i].l=z;\n        a[i].next=head[x];\n        head[x]=i;\n    }\n    for(int i=1;i<=n;i++)\n    \tdis[i]=maxn;\n    dis[t]=0;\n    put(t);\n    for(int i=1;i<=n;i++)\n    {\n        int bj=tree[1];\n        num[bj]=0;\n        pd[bj]=1;\n        get();\n        for(int j=head[bj];j!=0;j=a[j].next)\n            if(pd[a[j].to]==0 && dis[a[j].to]>dis[bj]+a[j].l)\n            {\n                dis[a[j].to]=dis[bj]+a[j].l;\n                if(num[a[j].to]==0)\n                    put(a[j].to);\n                else\n                    bian(num[a[j].to]);\n            }\n    }\n    for(int i=1;i<=n;i++)\n        cout<<dis[i]<<\" \";\n    cout<<endl;\n    return 0;\n}\n```",
        "postTime": 1533374382,
        "uid": 36933,
        "name": "zhy12138",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u4e0d\u660e\u539f\u56e0TLE\u7684\u770b\u8fd9\u91cc\u3002\n# \u524d\u8a00\n\u4e4b\u6240\u4ee5\u60f3\u7ed9\u8fd9\u9898\u5199\u9898\u89e3\u5462\uff0c\u662f\u56e0\u4e3a\u4e4b\u524d\u53d1\u9898\u89e3\u7684\u8bf4\u7684\u90fd\u6cdb\u6cdb\uff0c\u5176\u4e2d$Dijkstra$\u7684\u4f18\u5316\uff08\u6211\u4e0b\u9762\u4f1a\u8bb2\uff09\u53ea\u6709\u4e00\u4e2a\u4eba\u63d0\u4e86\u4e00\u4e0b\uff0c\u4e5f\u6ca1\u5177\u4f53\u5206\u6790\u3002\u7136\u800c10\u6b21\u5b9e\u8df5\u7ecf\u9a8c\u4e0d\u59821\u6b21\u7406\u8bba\u603b\u7ed3\u3002\u6211\u5206\u6790\u4e86\u4e00\u4e0b\u90a3\u4f18\u5316\uff0c\u7136\u540e\u6253\u51fa\u4e86\u6211\u81ea\u8ba4\u4e3a\u7b49\u610f\u4e49\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\u6211\u60f3\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u90a3\u6837\u4f18\u5316\u7684\u610f\u4e49\u3002\n\n# \u521d\u59cb\u7248\u672c\n```cpp\nvoid Dijkstra()\n{\n    fill(d+1,d+n+1,1e9+7);\n    d[s]=0;\n    Q.push(P(-d[s],s));\n    while(!Q.empty())\n    {\n        int x=Q.top().second; // \u6ce8\u610f\u8fd9\u91cc\u548c\u4e0b\u9762\u7684\u6709\u4ec0\u4e48\u4e0d\u540c\n        Q.pop();\n        for(int i=head[x];i;i=E[i].nx)\n        {\n            int y=E[i].to;\n            if(d[x]+E[i].w<d[y])\n            {\n                d[y]=d[x]+E[i].w;\n                Q.push(P(-d[y],y));// \u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48push(-d[y])\uff0c\u662f\u56e0\u4e3a\u6211\u7528\u7684\u662fSTL\u7684\u4f18\u5148\u961f\u5217\uff0c\u800c\u6211\u60f3\u53d6\u6bcf\u6b21\u6700\u5c0f\u7684\u3002\n            }\n        }\n    }\n}\n```\n\u8fd9\u6837\u6211\u81ea\u4fe1\u6ee1\u6ee1\u7684\u4ea4\u4e0a\u53bb\uff0cRE\u4e86\u3002\u6211\u4e0b\u8f7d\u6570\u636e\u6765\u770b\u8dd1\u4e866\u79d2\uff0c\u662fTLE\u4e86\uff08\u843d\u8c37\u4f1a\u5224\u90a3\u4e9b\u8dd1\u5f97\u8fc7\u4e45\u7684\u7a0b\u5e8fRE\uff09\u3002\u4e3a\u4ec0\u4e48\u5462?\n\n# \u4f18\u5316\u7248\u672c\n```cpp\nint d[MAXN];\npriority_queue<P>Q;\ninline void Dijkstra()\n{\n    fill(d+1,d+n+1,1e9+7);\n    d[s]=0;\n    Q.push(P(-d[s],s));\n    while(!Q.empty())\n    {\n        int x=Q.top().second,dis=-Q.top().first;\n        Q.pop();\n        if(dis>d[x]) continue; // \u6ce8\u610f\u8fd9\u91cc\u7684\u53d8\u5316\n        for(rg int i=head[x];i;i=E[i].nx)\n        {\n            int y=E[i].to;\n            if(d[x]+E[i].w<d[y])\n            {\n                d[y]=d[x]+E[i].w;\n                Q.push(P(-d[y],y));\n            }\n        }\n    }\n}\n```\n\u52a0\u8fd9\u4e2a\u526a\u679d\u662f\u4e0dTLE\u7684\u5173\u952e\u3002\n### \u7406\u8bba\u8bc1\u660e\n1. \u5728\u8bbf\u95ee\u4e00\u4e2a\u70b9\u4e4b\u524d\uff0c\u4ed6\u53ef\u80fd\u88ab\u591a\u6b21\u62d3\u5c55\u5230\uff0c\u6211\u4eec\u53ea\u5e0c\u671b\u62d3\u5c55\u4e00\u6b21\uff0c\u5373\u6700\u5c0f\u8ddd\u79bb\u7684\u90a3\u4e00\u6b21\u3002\n\n2. \u800c\u6700\u5c0f\u8ddd\u79bb\u5165\u7684\u961f\u5e94\u8be5\u662f\u6700\u5148\u62d3\u5c55\u7684\uff0c\u6240\u4ee5\u975e\u6700\u5c0f\u8ddd\u79bb\u7684\u62d3\u5c55\u662f\u5728\u6700\u5c0f\u8ddd\u79bb\u7684\u62d3\u5c55\u4e4b\u540e\uff0c\u4e14\u6beb\u65e0\u610f\u4e49\u7684\uff0c\u767d\u767d\u591a\u626b\u4e86\u4e00\u904d\u8fb9\uff0c\u589e\u52a0\u65f6\u95f4\u5f00\u9500\u3002\u5c3d\u7ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u4e0d\u53d8\uff0c\u4f46\u662f\u4f1aTLE\u3002 \n\n3. \u600e\u4e48\u529e\uff1f\u628a\u90a3\u4e9b\u975e\u6700\u5c0f\u8ddd\u79bb\u7684\u526a\u6389\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1O(nlogn)\u3002\n\n\u8fd9\u6837\u5c31\u4ece\u5f00O3\u90fd\u4f1aTLE-> \u666e\u901a\u5c31AC \n\n# \u7528\u5b9e\u8df5\u8bc1\u660e\n\u6309\u6211\u8bf4\u7684\u4e0d\u96be\u6253\u51fa\u5982\u4e0b\u7684\u7b49\u4ef7\u4ee3\u7801\n```cpp\ninline void Dijkstra()\n{\n    fill(d+1,d+n+1,1e9+7);\n    d[s]=0;\n    Q.push(P(-d[s],s));\n    while(!Q.empty())\n    {\n        int x=Q.top().second;\n        Q.pop();\n        if(vis[x]) continue; // \u7528dis\u5224\u65ad->\u7528vis\u5224\u65ad\n        vis[x]=1;\n        for(rg int i=head[x];i;i=E[i].nx)\n        {\n            int y=E[i].to;\n            if(d[x]+E[i].w<d[y])\n            {\n                d[y]=d[x]+E[i].w;\n                Q.push(P(-d[y],y));\n            }\n        }\n    }\n}\n```\n\u8fd9\u4e2a\u4e5f\u662fAC\u4e86\u7684\u4ee3\u7801\uff0c\u4e0d\u4f1aTLE\u3002\u4e0d\u8fc7\u76f8\u6bd4\u4e0a\u9762\u7684\u5199\u6cd5\u800c\u8a00\u8981\u6162200ms\uff0c\u8fd8\u591a\u4e86$O(n)$\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528\u3002",
        "postTime": 1533107159,
        "uid": 37834,
        "name": "autoint",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u55ef \u90aa\u6076\u7684\u51fa\u9898\u4eba\u4f3c\u4e4e\u662f\u5bf9spfa\u6709\u4ec0\u4e48\u504f\u89c1\u3002\u4f5c\u4e3a\u4e00\u4e2a\u504f\u7231spfa\u7684\u849f\u84bb\uff0c\u6211\u8fd8\u662f\u9009\u62e9spfa\u5148a\u6389P3371\u3002\n\n\u4e0d\u591a\u8bf4\uff0c\u7528spfa\u53ea\u80fd\u8fc7\u540e\u9762\u4e24\u4e2a\u70b940\u5206\u3002~~\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684~~\uff0c\n\u8fd9\u79cd\u90aa\u6076\u7684\u6570\u636e\u8981\u7528\u4f18\u5148\u961f\u5217+pair\u4f18\u5316\u7684dijkstra\uff08~~\u9898\u89e3\u91cc\u7684dalao\u8fd9\u9898\u5c45\u7136\u8fd8\u80fd\u7528\u5e73\u677f\u7535\u89c6\u5e93\uff0c\u849f\u84bb\u4e00\u70b9\u4e5f\u4e0d\u4f1a~~\uff09\uff0cdis\u6570\u7ec4\u4e0d\u5f00longlong\u6700\u540e\u4e00\u70b9\u4e5f\u4f1a\u7206\uff0c~~\u8fd9\u4e2a\u4e5f\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684~~\uff0c\u5c0f\u7ec6\u8282\u6539\u5b8c\u4e4b\u540e\u5c31\u662f\u5b8c\u7f8e\u7684O\uff08nlogn\uff09\u7684dij\u3002\n\n\u4e0d\u8fc7\u8fd8\u662f\u6709dalao\u7528\u5e73\u8861\u6811\u4e0a\u8dd1spfa+*\u2026\u2026&&%\uffe5#%\u2026\u2026*\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u9b3c\u4f18\u5316\uff09\u8fc7\u4e86\uff0c\u849f\u84bb\u8fd8\u662f\u4e00\u70b9\u4e5f\u4e0d\u4f1a\u3002\u3002\u3002\n\n```\n#include<bits/stdc++.h>\n#define inf 999999999//\u6211\u5c31\u662f\u559c\u6b22999999999\nusing namespace std;\nint vis[100005],head[100005],n,m,s,tot;\nlong long dis[100005];\ntypedef pair<long long,int> pa;\npriority_queue<pa,vector<pa>,greater<pa> >q;\nstruct Edge{\n\tint nxt;\n\tint to;\n\tlong long dis;\n}edge[200005];\nvoid dij()\n{\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=inf; \n\tdis[s]=0;\n\tq.push(make_pair(0,s));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif (vis[u]) \n\t\t\tcontinue;\n\t\tvis[u]=1;   \t\n\t\tfor (int p=head[u];p;p=edge[p].nxt)\n\t\t{\n\t\t\tint v=edge[p].to;\n\t\t\tif (dis[v]>dis[u]+edge[p].dis)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[p].dis; \n\t  \t\t\tq.push(make_pair(dis[v],v)); \n\t\t  \t}\n\t\t}\n\t} \n}\nvoid add_(int from,int to,long long dis)\n{\n\tedge[++tot].nxt=head[from];\n\tedge[tot].to=to;\n\tedge[tot].dis=dis;\n\thead[from]=tot;\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint f,t,d;\n\t\tscanf(\"%d%d%d\",&f,&t,&d);\n\t\tadd_(f,t,d);\n\t}\n\tdij();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%d \",dis[i]);//\u5b8c\u7f8e\n\t}\n\treturn 0;//\u518d\u89c1dij :)\n}\n```",
        "postTime": 1532509826,
        "uid": 25053,
        "name": "King_Han",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u672c\u6587\u4f7f\u7528$dijkstra$\u7b97\u6cd5\u3002\n\n\u8be5\u7b97\u6cd5\u65e0\u6cd5\u89e3\u51b3\u5e26\u8d1f\u6743\u8fb9\u95ee\u9898\uff0c\u6240\u4ee5\u5982\u679c\u9047\u5230\u5e26\u6709\u8d1f\u6743\u8fb9\u7684\u95ee\u9898\uff0c\u8bf7\u4f7f\u7528$BellmanFord$($SPFA$\u4e3a\u5176\u4e00\u4e2a\u5e38\u89c1\u4f18\u5316)\u4ee5\u53ca\u5176\u5b83\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u8003\u8651\u4ee5\u4e0b\u8d2a\u5fc3:\n\n1.\u5148\u5c06\u539f\u70b9\u76f8\u8fde\u7684\u70b9\u5168\u90e8\u5165\u961f\u5e76\u66f4\u65b0\u8ddd\u79bb\u3002\n\n2.\u5c06\u961f\u5185\u79bb\u539f\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u53d6\u51fa\u5e76\u66f4\u65b0\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u3002\u7136\u540e\u8be5\u70b9\u518d\u4e5f\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u3002\n\n\u56e0\u4e3a\u56fe\u4e2d\u6ca1\u6709\u8d1f\u6743\u8fb9\uff0c\u6240\u4ee5\u8be5\u7b97\u6cd5\u6b63\u786e\u6027\u663e\u7136\u3002\u4f46\u662f\u76f4\u63a5\u505a\u662f$O(n^2)$\u7684\u3002\u4e8e\u662f\u8003\u8651\u4f18\u5316\u7b2c\u4e8c\u6b65\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u70b9\u4e22\u5230\u4ee5\u8ddd\u79bb\u4e3a\u6743\u503c\u7684\u5c0f\u6839\u5806\u4e2d\u7ef4\u62a4\u3002\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a$O(n\\log n)$\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u597d\u5904\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\uff0c\u4e0d\u4f1a\u88ab\u5361\u3002\u800c$SPFA$\u53ef\u4ee5\u901a\u8fc7\u6784\u5efa\u4e09\u89d2\u7f51\u7edc\u56fe\u5361\u5230$O(n^2)$\u3002\u56e0\u6b64\u9047\u5230\u4e0d\u5e26\u8d1f\u6743\u7684\u56fe\u6700\u597d\u6539\u7528$dijkstra$\u6765\u8ba1\u7b97\u8ddd\u79bb(\u9632\u6b62\u6bd2\u7624\u51fa\u9898\u4eba)\u3002\n\n\u56e0\u4e3a\u5806\u4e2d\u5143\u7d20\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528$pbds$\u5185\u7684\u5f85\u4fee\u6539\u5806\u3002\n\n\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/priority_queue.hpp>\n#define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n#define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n#define For(i,a,b) for(i=(a),i<=(b);++i)\n#define Forward(i,a,b) for(i=(a),i>=(b);--i)\n#define Chkmax(a,b) a=a>b?a:b\ntemplate<typename T>inline void read(T &x)\n{\n    T f=1;x=0;char c;\n    for(c=getchar();!isdigit(c);c=getchar())if(c=='-')f=-1;\n    for(;isdigit(c);c=getchar())x=x*10+(c^48);\n    x*=f;\n}\n\ninline void write(int x)\n{\n    if(!x){putchar(48);putchar('\\n');return;}\n    static int sta[45],tp;\n    for(tp=0;x;x/=10)sta[++tp]=x%10;\n    for(;tp;putchar(sta[tp--]^48));\n    putchar('\\n');\n}\n\nusing namespace std;\nvoid file()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"water.in\",\"r\",stdin);\n    freopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\nconst int MAXN=1e5+7,MAXM=4e5+7;\n\nstatic int n,m;\n\nstatic struct edg\n{\n    int u,v,w,h;\n    friend bool operator<(edg a,edg b){return a.h>b.h;}\n}EDG[MAXM];\n\nstatic struct edge\n{\n    int v,w,nxt;\n}P[MAXM<<1];\n\nstatic int head[MAXN],e;\n\ninline void add(int u,int v,int w)\n{P[++e]=(edge){v,w,head[u]};head[u]=e;}\n\n__gnu_pbds::priority_queue<pair<int,int>,greater<pair<int,int> > >G;\n\n__gnu_pbds::priority_queue<pair<int,int>,greater<pair<int,int> > >::point_iterator its[MAXN];\n\nstatic int dis[MAXN];\n\nconst int INF=2e9+7;\n\ninline void dijkst(int s)\n{\n    G.clear();\n    its[s]=G.push(make_pair(0,s));dis[s]=0;\n    Rep(i,2,n)dis[i]=INF,its[i]=G.push(make_pair(INF,i));\n    static int u;\n    while(!G.empty())\n    {\n        u=G.top().second;G.pop();\n        for(register int v=head[u];v;v=P[v].nxt)\n            if(dis[P[v].v]>dis[u]+P[v].w)\n            {\n                dis[P[v].v]=dis[u]+P[v].w;\n                G.modify(its[P[v].v],make_pair(dis[u]+P[v].w,P[v].v));\n            }\n    }\n}\n\nstatic int s;\n\ninline void init()\n{\n    read(n);read(m);read(s);\n\tstatic int u,v,w;\n    Rep(i,1,m)read(u),read(v),read(w),add(u,v,w);\n}\n\ninline void solve()\n{\n    dijkst(s);\n\tRep(i,1,n)printf(\"%d \",dis[i]);\n\tputs(\"\");\n\n}\n\nint main()\n{\n    file();\n    init();\n    solve();\n\tcerr<<1.0*clock()/CLOCKS_PER_SEC<<endl;\n    return 0;\n}\n```",
        "postTime": 1532304563,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u867d\u7136\u597d\u591a\u4eba\u53d1\u4e86\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u60f3\u53d1\u4e00\u4e0b\uff0c\u6211\u662f\u849f\u84bb=-=\n\n\u4e00\u9053\u6a21\u677f\u6700\u77ed\u8def\u9898\u84dd\u8272\u96be\u5ea6\u7740\u5b9e\u4ee4\u4eba\u5bb3\u6015\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u8981\u7528\u90bb\u63a5\u8868+\u5806\u4f18\u5316\u7684dijsktra\u624d\u80fd\u8fc7\n\n\u6211\u4e5f\u4e13\u95e8\u5b66\u4e60\u4e86\u4e00\u4e0b\u5806\u4f18\u5316\u7684dijsktra\u3002\n\n\u5728dijsktra\u7684\u6734\u7d20\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u8981\u5148\u5faa\u73af\u6bcf\u4e2a\u70b9\u5148\u627e\u51fa\u6700\u5c0f\u7684\u70b9\u518d\u628a\u4e0e\u627e\u51fa\u7684\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u70b9\u7684\u6700\u77ed\u8def\u66f4\u65b0\u4e00\u4e0b\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u52a0\u5165\u4e86\u592a\u591a\u7684\u5197\u4f59\u5224\u65ad\u4e86\uff0c\u800c\u5806\u4f18\u5316\u5c31\u7701\u53bb\u4e86**\u5faa\u73af\u6bcf\u4e2a\u70b9\u5148\u627e\u51fa\u6700\u5c0f\u7684\u70b9** \u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5806\u4e2d\u6bcf\u4e2a\u8282\u70b9\u653e\u7f6e\u5f53\u524ddis[i]\u548ci\uff0c\u4f7f\u5f97\u6bcf\u6b21\u7684\u6839\u8282\u70b9\u5c31\u662f\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u8fd9\u4e2a\u6839\u8282\u70b9\u76f4\u63a5\u53d6\u51fa\uff0c\u76f4\u63a5\u66f4\u65b0\u4e0e\u8fd9\u4e2a\u70b9i\u76f8\u8fde\u7684\u70b9\u6700\u77ed\u8def\u4e86\u3002\n\n~~\uff08\u4f46\u662f\u6211\u61d2~~ \n\n\u6240\u4ee5\u6211\u9009\u62e9\u4f7f\u7528\u4f18\u5148\u961f\u5217\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4f46\u4f18\u5148\u961f\u5217\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u6211\u4eec\u4f18\u5148\u961f\u5217\u91cc\u6bcf\u4e2a\u961f\u5217\u7a7a\u95f4\u91cc\u9700\u8981\u653e\u4e24\u4e2a\u503c\uff1adis[i]\u548ci\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u5b66\u4e60\u4e00\u79cd\u65b0\u7684\u8bbe\u7f6e\u4f18\u5148\u961f\u5217\u4e00\u4e2a\u961f\u5217\u7a7a\u95f4\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u503c\u7684\u8bed\u6cd5\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u8fd8\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\n\n\u8fd9\u91cc\u8981\u9996\u5148\u8981\u5b66\u4e60\uff1a**\u91cd\u8f7d\u8fd0\u7b97\u7b26**\n\n\u5bf9\u4e8e\u7f51\u7ad9\u535a\u5ba2\u4e0a\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u5b9a\u4e49\u5b9e\u5728\u662f\u592a\u6df1\u5965\u770b\u4e0d\u61c2\uff0c\u6211\u4e5f\u662f\u901a\u8fc7yj\u5927\u4f6c\u7684\u8010\u5fc3\u56de\u7b54\u4e0b\u7406\u89e3\u4e86\u8fd9\u4e2a\u73a9\u610f\u662f\u5e72\u5565\u7684\uff0c\u4e5f\u5c31\u662f\u5b57\u9762\u7684\u610f\u601d\n\n\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u539f\u672c\u5b58\u5728\u7684\u8fd0\u7b97\u7b26\u65b0\u7684\u8fd0\u7b97\u5f62\u5f0f\n\n\u4f8b\u5982\u52a0\u53f7\u201c+\u201d\n\n\u672c\u6765+\u53f7\u4e24\u8fb9\u53ea\u80fd\u52a0\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u91cd\u65b0\u5b9a\u4e49\n\u6bd4\u5982 \u5b9a\u4e49\u6210 long long + double\n\n\u8fd9\u6837\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u5f62\u5f0f \n\n\u4e00\u5f00\u59cb\u6211\u6709\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u89c9\u5f97\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u4f60\u5b9a\u4e49\u65b0\u7684\u8fd0\u7b97\u5f62\u5f0f\u4e4b\u540e\uff0c\u90a3\u8ba1\u7b97\u673a\u4f1a\u600e\u4e48\u6837\u53bb\u6267\u884c\u4f60\u7684\u8fd0\u7b97\u7b26\u5230\u5e95\u662f\u4ed6\u539f\u672c\u7f16\u8bd1\u5668\u6240\u5b9a\u4e49\u7684\u8fd0\u7b97\u7b26\u8fd0\u7b97\u5f62\u5f0f\u8fd8\u662f\u4f60\u81ea\u5df1\u65b0\u5b9a\u4e49\u7684\u5462\uff1f\n\n**\u55ef\uff0c\u8ba1\u7b97\u673a\u4f1a\u81ea\u5df1\u5e2e\u4f60\u5224\u65ad\u7684~**\n\n\u770b\u4e00\u4e0b\u8fd9\u91cc\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49\n````cpp\n    struct node\n    {\n    \tint dis;\n    \tint pos;  //dis\u5b58\u50a8\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0cpos\u5b58\u7684\u662f\u8fd9\u4e2a\u70b9\u7684\u4e0b\u6807\n    \tbool operator <(const node &x)const\n    \t{\n    \t\treturn x.dis < dis;  //\u5229\u7528\u91cd\u8f7d\u8fd0\u7b97\u7b26\n    \t\t}\n    };\n    priority_queue <node> q;\n````\n\u90a3\u4e48\u8fd9\u91cc\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff0c\u5728\u539f\u672c\u7684\u4f18\u5148\u961f\u5217\u5185\u90e8\u64cd\u4f5c\u91cc\uff0c\u5c31\u662f\u4f7f\u7528\"<\"\u6765\u5b9a\u4e49\u5927\u6839\u5806\u5c0f\u6839\u5806\uff0c\u4f46\u662f\u5728\u539f\u672c\u4f18\u5148\u961f\u5217\u4e2d\u4ec5\u4ec5\u6307\u7684\u5728\u6bcf\u4e2a\u961f\u5217\u7a7a\u95f4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\u4e00\u4e2a\u5143\u7d20\u548c\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u3002\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u5c31\u662f\u5c06\u8fd9\u4e2a\u4f18\u5148\u961f\u5217\u5185\u90e8\u64cd\u4f5c\u91cc\u9762\u7684\u539f\u672c\u90a3\u6837\u7684\u64cd\u4f5c\u53d8\u6210\u73b0\u5728\u6bcf\u4e2a\u961f\u5217\u7a7a\u95f4\u91cc\u9762\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u6839\u636e\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u51b3\u5b9a\u4f18\u5148\u961f\u5217\u91cc\u987a\u5e8f\u5224\u65ad\u3002\n\n\u8fd9\u91cc\u7684\u64cd\u4f5c\u6709\u70b9\u7c7b\u4f3c\u4e8esort\u51fd\u6570\u7684\u5199cmp\u51fd\u6570\u4e3a\u7ed3\u6784\u4f53\u6392\u5e8f\u7684\u601d\u60f3\u5427\uff01\n\n\u8fd9\u91cc\u5c31\u662f\u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49\u95ee\u9898\uff0c\u90a3\u4e48\u8fd8\u6709\u5728\u6bcf\u6b21\u7684\u5b58\u50a8\u95ee\u9898\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e0d\u6b62\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u5b58\u50a8\u5728\u4e00\u4e2a\u7a7a\u95f4\u91cc\uff0c\u6240\u4ee5\u5b58\u50a8\u65f6\u4e5f\u9700\u8981\u6709\u65b0\u7684\u8bed\u6cd5\u683c\u5f0f\uff1a\uff08\u8bbe\u5f53\u524d\u8fd9\u4e2a\u70b9\u4e3as\uff0cdis[s]=0\uff09\n````cpp\nq.push(( node ) {dis[s],s});\n````\n\u6ce8\u610f\uff01\u6211\u4eec\u8fd9\u91cc\u5229\u7528\u5927\u62ec\u53f7\u4e2d\u95f4\u7684\u6570\u5fc5\u987b\u6309\u7167\u5b9a\u4e49\u65f6\u7684\u987a\u5e8f\u5b58\u50a8\uff0c\u5982\u679c\u53cd\u8fc7\u6765{s,dis[s]}\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u8ba1\u7b97\u673a\u5c31\u4f1a\u8ba4\u4e3as\u662f\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0cdis[s]\u662f\u8fd9\u4e2a\u70b9\u7684\u4e0b\u6807\u4e86\u3002\n\n\u5728\u8fdb\u884c\u5806\u4f18\u5316\u7684dijsktra\u4e2d\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u8fdb\u884c\u6539\u53d8\uff0c\u5728\u4e00\u5f00\u59cb\u6211\u4eec\u76f4\u63a5\u53d6\u51fa\u961f\u5934\u5143\u7d20\uff0c\u5224\u65ad\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5728\u4e4b\u524d\u627e\u5230\u8fc7\u6807\u8bb0\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u5219\u6839\u636e\u90bb\u63a5\u8868\u76f4\u63a5\u66f4\u65b0\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\u7684\u6700\u77ed\u8def\u7684\u503c\uff0c\u5e76\u4e14\u628a\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\u5168\u90e8\u90fd\u653e\u5165\u961f\u5217\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u5230\u6734\u7d20\u7b97\u6cd5\u4e2d\u539f\u672c\u5faa\u73af\u6bcf\u4e2a\u70b9\u8fdb\u884c\u627e\u5f53\u524d\u6700\u5c0fdis\u503c\u7684\u8fc7\u7a0b\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <queue>\nusing namespace std;\nint b[200001],n,m,s,top,dis[200001],h[200001];\nstruct CZP\n{\n\tint next,to,di;\n}a[200001]; \nstruct node\n{\n\tint dis;\n\tint pos;\n\tbool operator <(const node &x)const\n\t{\n\t\treturn x.dis < dis;\n\t\t}\n}; //\u5b9a\u4e49\u65b0\u7684\u4f18\u5148\u961f\u5217\nvoid cun(int from,int to,int dis)\n{\n\ta[++top].next=h[from];\n\ta[top].to=to;\n\ta[top].di=dis;\n\th[from]=top;\n}  //\u90bb\u63a5\u8868\npriority_queue <node> q;\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor (int i=1;i<=n;i++)\n\th[i]=-1;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tcun(x,y,z);\n\t}\n\tfor (int i=1;i<=n;i++)\n\tdis[i]=1e9;  //\u8fd9\u91cc\u4e0d\u9700\u8981\u628adis[i]\u7684\u503c\u5b9a\u4e49\u6210\u8d77\u70b9\u5230i\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u76f4\u63a5\u6700\u5927\u503c\u5373\u53ef\uff08\u4f46\u662f\u5e94\u8be5\u5b9a\u4e49\u6210\u8def\u5f84\u957f\u5ea6\u6ca1\u5565\u592a\u5927\u95ee\u9898\uff09\n\tdis[s]=0;\n\tq.push(( node ) {0,s});  //\u5148\u628a\u8d77\u70b9\u653e\u5165\u961f\u5217\u4e2d\n\twhile (!q.empty())\n\t{\n\t\tnode x=q.top();\n\t\tq.pop();\n\t\tint k=x.pos;\n\t\tif (b[k]==1)\n\t\tcontinue;  //\u5de7\u5999\u8fc7\u7a0b\uff0c\u7701\u53bb\u4e86while\u8bed\u53e5\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u6267\u884c\u4e0b\u9762\u7684\u8bed\u53e5\u7ee7\u7eed\u6267\u884c\u4e0a\u65b9\u4e09\u884c\u8bed\u53e5\u76f4\u5230\u627e\u5230\u6ca1\u6709\u6807\u8bb0\u8fc7\u7684\n\t\tb[k]=1;\nint v=h[k];\n\t\twhile (v!=-1)\n\t\t{\n\t\t\tif (dis[a[v].to]>dis[k]+a[v].di)\n\t\t\t{\n\t\t\t\tdis[a[v].to]=dis[k]+a[v].di;  //\u66f4\u65b0\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u70b9\u7684dis\u6700\u77ed\u8def\n\t\t\t\tif (!b[a[v].to])\n\t\t\t\tq.push( ( node ) { dis[a[v].to],a[v].to} );  //\u5e76\u4e14\u52a0\u5165\u961f\u5217\uff0c\u5fc5\u987b\u6bcf\u6b21\u66f4\u65b0\u5b8c\u90fd\u52a0\u4e00\u6b21\uff0c\u56e0\u4e3adis\u503c\u5728\u6539\u53d8\uff0c\u53ef\u80fd\u5728\u66f4\u65b0\u4e4b\u524d\u5728\u4f18\u5148\u961f\u5217\u4e2d\u6392\u540d\u4e0d\u5728\u524d\u9762\uff0c\u4f46\u662f\u66f4\u65b0\u4e4b\u540e\u4f18\u5148\u961f\u5217\u6392\u5728\u7b2c\u4e00\u4f4d\u4e86\n\t\t\t}\n\t\t\tv=a[v].next;\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++)\n\tprintf(\"%d \",dis[i]);\n\treturn 0;\n}\n```\n\n\u8fd8\u662f\u6709\u5f88\u591a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u7684\uff0c\u6211\u5728\u590d\u4e60\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u5019\uff0c\u6253\u7684\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u662f\u5c31\u662f\u6ee1\u4e0d\u4e86\u5206\uff0c\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6253\u5165\u961f\u5217\u90a3\u51e0\u884c\u8bed\u53e5\u8ddf\u7b2c\u4e00\u6b21\u6253\u7684\u7a7a\u683c\u5c11\u4e86\u51e0\u4e2a\uff0c\u6211\u5c31\u628a\u5c0f\u62ec\u53f7\u4e2d\u62ec\u53f7\u4efb\u4f55\u95f4\u9699\u90fd\u52a0\u4e86\u7a7a\u683c=-=\u7136\u540e\u5c31\u8fc7\u4e86awa\n\n\u53ef\u80fd\u6709\u5f88\u591a\u662f\u6211\u81ea\u5df1\u7406\u6240\u5f53\u7136\u4e86\u89e3\u7684\u60f3\u6cd5\u4e0d\u592a\u5bf9\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u5728\u5f53\u4e0b\uff0c\u8fd9\u79cd\u60f3\u6cd5\u4e5f\u8fd8\u662f\u53ef\u4ee5\u652f\u6491\u6211\u80fd\u591f\u77e5\u9053\u5806\u4f18\u5316\u7684dijsktra\u6bcf\u884c\u5565\u610f\u601d\u5427=-",
        "postTime": 1568824185,
        "uid": 24812,
        "name": "Sakura_Peng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u601d\u8def \u524d\u5411\u661f\u5b58\u56fe\n\n\u5806\u4f18\u5316\u7684djk\n\n\u4ee3\u7801\u6709\u6ce8\u91ca\u54e9~~\n\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n\nconst int MaxN = 100010, MaxM = 500010;\n\nstruct Edge\n{\n    int to, val, next;\n}Edge[MaxM]; // \u94fe\u5f0f\u524d\u5411\u661f \nint head[MaxN], dis[MaxN], num=0;\nbool vis[MaxN];\nint n, m, s;\n\ninline void add_Edge( int u, int v, int d ) //\u52a0\u8fb9\u64cd\u4f5c \n{\n    ++num;\n    Edge[num].val = d; //\u8d4b\u6743 \n    Edge[num].to = v; // \u8fd9\u6761\u8fb9\u7ec8\u70b9 \n    Edge[num].next = head[u]; //\u4e0b\u4e00\u6761\u8fb9\u7684\u4e0b\u6807 \n    head[u] = num;//\u8bbe\u7f6e\u7b2c\u4e00\u6761\u8fb9\u4e3a\u5f53\u524d\u8fb9 \n}\n\nstruct node \n{\n\tint val; //\u8ddd\u79bb \n\tint pos; //\u70b9\u7684\u4f4d\u7f6e\n\tnode(){}\n\tnode(int p , int v)\n\t{\n\t\tpos=p;\n\t\tval=v;\n\t}\n\t\n\tbool operator < (const node &a)const\n\t{\n\t\treturn val > a.val;\n\t} \n\t//\u91cd\u8f7d\"<\" \n\t\n} ;//\u7ed3\u6784\u4f53 \u7ed3\u70b9\n\ninline void dijkstra(int start)\n{\n\tstd::priority_queue<node>que;\n/*for(int i = 1 ; i<=n ; ++i)\n\t{\n\t\tdis[i]=0x3f;\n\t\tvis[i]=false;\n\t}*/\n\tdis[start]=0;\n\tque.push( node(start,0) );\n\t\n\twhile(!que.empty())\n\t{\n\t\tnode temp=que.top(); //\u4f18\u5148\u961f\u5217\u9996\u5143\u7d20\u5c31\u662fdist\u6570\u7ec4\u6700\u5c0f\u503c\n\t\tque.pop();\n\t\tint mini=temp.pos; //\u6700\u5c0f\u503c\u4e3a\u9996\u5143\u7d20\u8282\u70b9\n\t\tif(vis[mini])\n\t\t\tcontinue;\n\t\t \n\t\t \n\t\t \n\t\t \tvis[mini]=true;\n\t\n\t\t //\u5224\u65ad\u6700\u5c0f\u503c\u662f\u5426\u88ab\u627e\u8fc7\uff0c\u5982\u679c\u627e\u8fc7\u5219\u8df3\u8fc7\u7ee7\u7eed\u3002 \n\t\t \n\t\t for(int i=head[mini] ; i ; i=Edge[i].next)//\u9996\u5c3e\u76f8\u8fde\u66f4\u65b0\u8ddd\u79bb \n\t\t {\n\t\t \tint to=Edge[i].to;\n\t\t \tif(dis[to]>dis[mini]+Edge[i].val)\n\t\t \t{\n\t\t \t\tdis[to]=dis[mini]+Edge[i].val;\n\t\t \t\tif(!vis[to])\n\t\t \t\t{\n\t\t \t\t\tque.push(node(to,dis[to]));\n\t\t\t\t }\n\t\t\t\n\t\t\t\t \n\t\t\t }\n\t\t }\n\t } \n} \nint main()\n{\n\t\n\t scanf( \"%d%d%d\", &n, &m, &s );\n    for(int i = 1; i <= n; ++i)dis[i] = 0x7fffffff;\n    for( register int i = 0; i < m; ++i )\n    {\n        register int u, v, d;\n        scanf( \"%d%d%d\", &u, &v, &d );\n        add_Edge( u, v, d );\n    }\n    dijkstra(1);\n    for( int i = 1; i <= n; i++ )\n        printf( \"%d \", dis[i] );\n    return 0;\n}\n\n \n\n```\n\n",
        "postTime": 1568609216,
        "uid": 58693,
        "name": "SunRichard",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u90bb\u63a5\u94fe\u8868\u5b58\u56fe\u7684\u4f3c\u4e4e\u4e0d\u591a\u4e86                            \n\u6240\u4ee5\u5c31\u5199\u4e86\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u90bb\u63a5\u94fe\u8868                                      \n\u4e5f\u6bd4\u8f83\u5bb9\u6613\u6253  \n\n\u6bcf\u6b21\u627e\u5230\u6700\u8fd1\u7684\u70b9\u7684\u65f6\u5019\n\n\u628a\u8fd9\u4e2a\u70b9\u7684\u8fde\u8fb9\u7684\u70b9\u52a0\u8fdb\u5c0f\u6839\u5806\u91cc\u9762\n\n\u90bb\u63a5\u94fe\u8868\u7684\u8bdd\u5c31\u6307\u9488l=l->Next\u8fed\u4ee3\u5c31\u884c\u4e86\n\n\u6ce8\u610f\u7ed3\u6784\u4f53\u7684.next\u548c->next\u7684\u533a\u522b\u54e6                \n\u524d\u4e00\u4e2a\u662f\u5b9e\u5728\u7684\u53d8\u91cf\u7684\u6210\u5458               \n\u540e\u4e00\u4e2a\u662f\u6307\u9488\u6307\u5411\u7684\u53d8\u91cf\u7684\u6210\u5458\n\n\u8fd9\u4e2a\u5806\u4e0d\u53ea\u8981\u653e\u5165dis\u503c            \n\u4e0b\u6807\u4e5f\u8981\u653e\u8fdb\u53bb\n\u6bd5\u7adf\u4f60\u8981\u77e5\u9053\u4f60\u60f3\u66f4\u65b0\u7684dis\u662f\u54ea\u4e00\u4e2a                        \n\u6240\u4ee5\u5806\u7528\u7ed3\u6784\u4f53\u5f88\u597d\u64cd\u4f5c \u5e76\u4e14\u5728\u7ed3\u6784\u4f53\u4ea4\u6362\u7684\u65f6\u5019swap\u5c31\u662f\u795e\u5668\u4e86\n\n\u6700\u540e\u8bb0\u5f97\u52a0\u4e0a\u4f18\u5316if(sign[disd[1].s]){pop();}\n\u8d70\u8fc7\u7684\u70b9\u8981\u5f39\u6389\n\nso        \n\u5806\u52a0\u901f\u7684dijkstra\u8dd1\u7684\u633a\u5feb\u7684\n\n\u6d4b\u5f97\u8dd1\u4e86264ms  \u4ee3\u7801\u5e94\u8be5\u8fd8\u662f\u7b80\u5355\u6613\u61c2\u7684\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct note{int end,w;\n\tstruct note *next;\n};struct note edge[100001];//\u4e0b\u6807\u4ee3\u8868\u8d77\u70b9\nlong long dis[100001];bool sign[100001];int n,m,s,a,b,c;\nstruct opp{\n\tint dis;int s;\n};struct opp disd[100001];int end=0;\nvoid pushin(int data,int sp){register int s=++end;//\u5c0f\u6839\u5806\u63d2\u5165\ndisd[s].dis=data;disd[s].s=sp;\n        while(s>0){\n        if(disd[s].dis<disd[s>>1].dis){swap(disd[s],disd[s/2]); s=s>>1;}\n        else{break;}}\n}\nvoid pop(){swap(disd[end],disd[1]);end--;//\u5c0f\u6839\u5806\u5f39\u51fa\n    for(int i=1,j=2;j<=end;i=j,j=i<<1){\n    if(j+1<=end&&disd[j].dis>disd[j+1].dis){j++;}\n    if(disd[i].dis>disd[j].dis){swap(disd[i],disd[j]);}\n    else{break;}\n\t}\n}\ninline int read(){int s=0,w=1;char ch=getchar();//\u5feb\u8bfb\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();return s*w;\n}\nvoid dj(int x){if(x==-1){return;}sign[x]=1;\n\tfor(struct note *l=edge[x].next;l!=NULL;l=l->next){\n\tif(dis[x]+l->w<dis[l->end]){dis[l->end]=dis[x]+l->w;pushin(dis[l->end],l->end);};}\n\tint sp=-1,mind=2147483647;\n\twhile(end>0){\n\tif(sign[disd[1].s]){pop();}\n\tif(!sign[disd[1].s]){sp=disd[1].s;dj(sp);break;}\n\t}\n}\nint main(){cin>>n>>m>>s;//\u9884\u5904\u7406\u6211\u653e\u5728\u4e86\u4e3b\u51fd\u6570\u91cc\n    for(register int i=1;i<=n;i++)\n    edge[i].next=NULL;\n\tfor(register int i=1;i<=m;i++){a=read();b=read();c=read();\n\tstruct note *l=(note *)malloc(sizeof(note));l->end=b;l->w=c;\n\tl->next=edge[a].next;edge[a].next=l;}\n\tfor(register int i=1;i<=n;i++){dis[i]=2147483647;}dis[s]=0;\n\tdj(s);\n\tfor(register int i=1;i<=n;i++){cout<<dis[i]<<\" \";}\n\treturn 0;\n}\n```\nend~~~~",
        "postTime": 1565006084,
        "uid": 33879,
        "name": "\u83dc\u9e1f\u81f3\u5c0a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u5e94\u8be5\u4e3a\u5c0fF\u540c\u5b66\u7684\u884c\u4e3a\u800c\u611f\u52a8\uff0c\u4ed6\u7528\u81ea\u5df1\u7684\u4eb2\u8eab\u7ecf\u5386\u544a\u8bc9\u6211\u4eec$SPFA$\u5df2\u6b7b\uff0c$dijkstra$\u624d\u662f\u6b63\u7edf\uff08\u9003\n\n\u4f46\u662f\u5f88\u660e\u663e\uff0c\u5728\u8fd9\u9898\u4e2d\u4e0d\u7ba1\u662f\u67d0\u5df2\u6b7b\u7b97\u6cd5\u8fd8\u662f\u65e0\u4f18\u5316\u7684$dijkstra$\u90fd\u4f1a\u88ab\u6570\u636e\u5361\u6210\u86c7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u666e\u901a\u7684$dijkstra$\u589e\u52a0\u4e00\u4e9b\u4f18\u5316\u3002\n\n\u89c2\u5bdf\u65e0\u4f18\u5316\u7684\u6a21\u677f\uff0c\u6211\u4eec\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u4e0d\u4e0a\u53bb\u7684\u6839\u672c\u539f\u56e0\u662f\u627e\u5168\u5c40\u6700\u5c0f\u503c\u7684\u65f6\u95f4\u82b1\u8d39\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u4f7f\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u4e3a$\\mathcal{O}(n\\log n)$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528priority_queue\u6765\u5b9e\u73b0\u5806\uff0c\u4f46\u662falgorithm\u4e2d\u4e5f\u6709\u4e09\u4e2a\u51fd\u6570\u53ef\u4ee5\u5c06\u5e8f\u5217\u7ef4\u62a4\u6210\u5806\u7684\u5f62\u5f0f\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217$a[i]$\uff1a\n\n$make\\_heap(a + 1, a + n + 1, cmp)$\u8868\u793a\u5c06\u5e8f\u5217\u4e2d\u76841~n\u7684\u90e8\u5206\u5efa\u7acb\u6210\u4e00\u4e2a\u5806\uff0c\u7528\u7684\u662f\u6570\u7ec4\u5b58\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff08cmp\u4e3a\u6bd4\u8f83\u51fd\u6570\uff0c\u5927\u6839\u5806return a < b\uff0c\u5c0f\u6839\u5806\u53cd\u4e4b\uff09\u3002\n\n$push\\_heap(a + 1, a + n + 1,cmp)$\u8868\u793a\u5c06\u7b2cn\u4e2a\u5143\u7d20\u653e\u5165\u5806\u4e2d\u3002\n\n$pop\\_heap(a + 1, a + n + 1, cmp)$\u5f39\u51fa\u5806\u9876\u3002\n\n\u53d6\u51fa\u5806\u9876\u5373\u4e3aa[1]\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7684\u4f18\u5316\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nstruct Edge {\n\tint d, to, next;\n} e[200010 << 1];\n\nstd::pair<int, int> heap[200010 << 1];\nint size, n, m, dist[100010], head[100010], tot;\nbool v[200010];\n\ninline cmp(std::pair<int, int> a, std::pair<int, int> b) {//\u6bd4\u8f83\u51fd\u6570\n\treturn a.first > b.first;\n}\n\ninline void add(int u, int v, int w) {\n\te[++tot].to = v;\n\te[tot].d = w;\n\te[tot].next = head[u];\n\thead[u] = tot;\n\t\n}\n\nvoid dijkstra() {\n\tmemset(dist, 0x3f, sizeof(dist));\n\tmemset(v,0, sizeof(v));\n\tdist[1] = 0;\n\theap[++size] = std::make_pair(0, 1);\n\twhile (size) {\n\t\tint x = heap[1].second;\n\t\tstd::pop_heap(heap + 1, heap + size + 1, cmp);//\u5f39\u51fa\u5806\u9876\n\t\tsize--;\n\t\tif (v[x]) continue;\n\t\tv[x] = 1;\n\t\tfor (int i = head[x]; i; i = e[i].next) {\n\t\t\tint y = e[i].to, z = e[i].d;\n\t\t\tif (dist[y] > dist[x] + z) {\n\t\t\t\tdist[y] = dist[x] + z;\n\t\t\t\theap[++size] = std::make_pair(dist[y], y);\n\t\t\t\tstd::push_heap(heap + 1, heap + size + 1, cmp);//\u628a\u4e8c\u5143\u7ec4\u63d2\u5165\u5806\u4e2d\n\t\t\t} \n\t\t}\n\t}\n}\n \nint main() {\n\tint s;\n\tscanf(\"%d %d %d\", &n, &m, &s);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v, w;\n\t\tscanf(\"%d %d %d\", &u, &v, &w);\n\t\tadd(u, v, w);\n\t}\n\tdijkstra();\n\tfor (int i = 1; i <= n; i++) {\n\t\tprintf(\"%d \", dist[i]);\n\t}\n\treturn 0;\n}\n```\n\n\u4ee3\u7801\u5df2\u589e\u52a0\u9632\u6284\u88ad\uff0c\u8bf7\u5927\u5bb6\u5728\u4e0d\u5173\u952e\u7684\u5730\u65b9\u627e\u95ee\u9898\n\n\u672c\u9898\u89e3\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u73b0\u5806\u7684\u4e0d\u540c\u601d\u8def\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u4ece\u4e2d\u83b7\u76ca\u3002\n",
        "postTime": 1563593761,
        "uid": 86409,
        "name": "Night_star",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "## $\\text{Description}$\n\n\u7ed9\u5b9a\u4e00\u4e2a $N$ \u4e2a\u70b9\uff0c$M$ \u6761\u6709\u5411\u8fb9\u7684\u5e26\u975e\u8d1f\u6743\u56fe\uff0c\u8bf7\u4f60\u8ba1\u7b97\u4ece $S$ \u51fa\u53d1\uff0c\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u4f60\u80fd\u4ece $S$ \u51fa\u53d1\u5230\u4efb\u610f\u70b9\u3002\n\n\n$u_i,v_i$ \u8868\u793a\u7b2c $i$ \u6761\u6709\u5411\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c$w_i$ \u8868\u793a\u7b2c $i$ \u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n$1 \\leq u_i, v_i \\leq N \\leq 100000,$\n\n$1 \\leq M \\leq 200000,S = 1,$\n\n$0 \\leq w_i,\\sum w_i \\leq 10 ^ 9$ \u3002\n\n## $\\text{Solution}$\n\n\u8fd9\u9053\u9898\u76ee\u4f1a\u628a\u6700\u574f\u590d\u6742\u5ea6\u4e3a $O(nm)$ \u7684 SPFA \u5361\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230 Dijkstra \u4e86\u3002\n\nDijkstra \u7684\u6d41\u7a0b\u5c31\u662f\u6bcf\u6b21\u5728\u672a\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u4e2d\u627e\u4e00\u4e2a $dis$ \u503c\u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u7528\u5b83\u6765\u66f4\u65b0\u522b\u7684\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u6807\u4e3a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u3002\u76f4\u5230\u6240\u6709\u70b9\u90fd\u786e\u5b9a\u4e86\u6700\u77ed\u8def\u4e3a\u6b62\u3002\n\n$$dis_i\\;\\text{\u8868\u793a\u7684\u662f\u4ece}\\;S\\;\\text{\u5230}\\;i\\;\\text{\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6}$$\n\n\u5982\u679c\u5728\u6bcf\u6b21\u505a\u5b8c\u540e\u6211\u4eec\u66b4\u529b\u627e $dis$ \u503c\u6700\u5c0f\u7684\u70b9\uff0c\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\u3002\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u4f18\u5316\u5b83\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\u5b83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7ed9\u964d\u5230 $O(n\\;\\log\\;n)$ \u4e86\u3002\n\n\u8fd9\u91cc\u7684\u5806\u6211\u662f\u624b\u5199\u7684\uff0c\u7801\u91cf\u8f83\u5927\u3002\n\n\u6211\u7684 Dijkstra \u53ef\u80fd\u601d\u8def\u6709\u4e9b\u5947\u602a\uff0c\u4f46\u8fd8\u662f Dijkstra \u3002\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u76ee\u4e0d\u5355\u6b62\u53ef\u4ee5\u7528\u5806\u7ef4\u62a4\uff0c\u8fd8\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7b49\u7ef4\u62a4\u7684\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u4e00\u4e0b\u3002\n\n## $\\text{Code}$\n\n```\n#include <cstdio>\n#define inf 2147483647/2\nstruct node{ int x,y,c,g; } a[1000001];\nint heap[1000001][2],bj[1000001],h[1000001];\nint ans[1000001];\nint len=0,n=0,m=0,st=0;\nvoid ins(int x,int y,int c)\n{\n    len++;\n    a[len].x=x;\n    a[len].y=y;\n    a[len].c=c;\n    a[len].g=h[x];\n    h[x]=len;\n}\nvoid pushup(int x)\n{\n    int fa=x/2;\n    if(fa==0)\n    {\n        return ;\n    }\n    if(heap[x][0]<heap[fa][0])\n    {\n    \tint t=bj[heap[x][1]];\n    \tbj[heap[x][1]]=bj[heap[fa][1]];\n    \tbj[heap[fa][1]]=t;\n    \t\n\t    t=heap[fa][0];\n        heap[fa][0]=heap[x][0];\n        heap[x][0]=t;\n        \n        t=heap[fa][1];\n        heap[fa][1]=heap[x][1];\n        heap[x][1]=t;\n        \n        pushup(fa);\n    }\n}\nvoid pushdown(int x)\n{\n    if(x*2>n)\n    {\n        return ;\n    }\n    int lson=x*2;\n    int rson=x*2+1;\n    int disl=heap[lson][0];\n    int disr=heap[rson][0];\n    int disx=heap[x][0];\n    if(lson>n)\n    {\n        disl=inf+1;\n    }\n    if(rson>n)\n    {\n        disr=inf+1;\n    }\n    if(disx>disl && disx>disr)\n    {\n        if(disl<disr)\n        {\n            int t=bj[heap[x][1]];\n            bj[heap[x][1]]=bj[heap[lson][1]];\n            bj[heap[lson][1]]=t;\n            \n\t\t\tt=heap[x][0];\n            heap[x][0]=heap[lson][0];\n            heap[lson][0]=t;\n            \n            t=heap[x][1];\n            heap[x][1]=heap[lson][1];\n            heap[lson][1]=t;\n            \n            pushdown(lson);\n        }\n        else\n        {\n        \tint t=bj[heap[x][1]];\n            bj[heap[x][1]]=bj[heap[rson][1]];\n            bj[heap[rson][1]]=t;\n            \n            t=heap[x][0];\n            heap[x][0]=heap[rson][0];\n            heap[rson][0]=t;\n            \n            t=heap[x][1];\n            heap[x][1]=heap[rson][1];\n            heap[rson][1]=t;            \n            \n            pushdown(rson);\n        }\n    }\n    else if(disx>disl)\n    {\n    \tint t=bj[heap[x][1]];\n        bj[heap[x][1]]=bj[heap[lson][1]];\n        bj[heap[lson][1]]=t;\n        \n        t=heap[x][0];\n        heap[x][0]=heap[lson][0];\n        heap[lson][0]=t;\n        \n        t=heap[x][1];\n        heap[x][1]=heap[lson][1];\n        heap[lson][1]=t;\n        \n        pushdown(lson);\n    }\n    else if(disx>disr)\n    {\n    \tint t=bj[heap[x][1]];\n        bj[heap[x][1]]=bj[heap[rson][1]];\n        bj[heap[rson][1]]=t;\n        \n        t=heap[x][0];\n        heap[x][0]=heap[rson][0];\n        heap[rson][0]=t;\n        \n        t=heap[x][1];\n        heap[x][1]=heap[rson][1];\n        heap[rson][1]=t;\n        \n        pushdown(rson);\t\n    }\n}\nvoid Dijkstra()\n{\n    int len=n;\n    heap[st][0]=0;\n    pushup(st);\n    while(len!=0)\n    {\n        int x=heap[1][1];\n        ans[x]=heap[1][0];\n//  \t\tprintf(\"x=%d\\n\",x);\n//  \t\tfor(int i=1;i<=n;i++)\n//  \t\t{\n//  \t\t\tprintf(\"%d \",bj[i]);\n//  \t\t}\n//  \t\tprintf(\"\\n\");\n//  \t\tprintf(\"Ans:\");\n//  \t\tfor(int i=1;i<=n;i++)\n//  \t\t{\n//  \t\t\tprintf(\"%d \",ans[i]);\n// \t\t}\n// \t\tprintf(\"\\n\"); \n// \t\tprintf(\"--------------sta------------\\n\");\n//  \t\tfor(int i=1;i<=n;i++)\n//  \t\t{\n//  \t\t\tprintf(\"%d %d\\n\",heap[i][0],heap[i][1]);\n//  \t\t}\n        for(int i=h[x];i>0;i=a[i].g)\n        {\n            int y=a[i].y;\n            if(heap[bj[y]][0]>inf)\n            {\n                continue;\n            }\n \t\t\t// printf(\"x=%d,y=%d\\n\",x,y);\n \t\t\t// printf(\"%d,%d,%d,%d\\n\",ans[x],a[i].c,heap[bj[y]][0],bj[y]);\n            if(ans[x]+a[i].c<heap[bj[y]][0])\n            {\n                heap[bj[y]][0]=ans[x]+a[i].c;\n                pushup(bj[y]);\n            }\n        }\n//  \t\tprintf(\"--------------bef------------\\n\");\n//  \t\tfor(int i=1;i<=n;i++)\n//  \t\t{\n//  \t\t\tprintf(\"%d %d\\n\",heap[i][0],heap[i][1]);\n//  \t\t}\n        len--;\n        heap[1][0]=inf+1;\n        pushdown(1);\n//  \t\tprintf(\"-------------aft-------------\\n\");\n//  \t\tfor(int i=1;i<=n;i++)\n//  \t\t{\n//  \t\t\tprintf(\"%d %d\\n\",heap[i][0],heap[i][1]);\n//  \t\t}\n    }\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&st);\n    for(int i=1;i<=n;i++)\n    {\n        bj[i]=i;\n        heap[i][0]=inf-1;\n        heap[i][1]=i;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x=0,y=0,c=0;\n        scanf(\"%d %d %d\",&x,&y,&c);\n        ins(x,y,c);\n    }\n    Dijkstra();\n    for(int i=1;i<=n;i++)\n    {\n        printf(\"%d \",ans[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1549759038,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "# \u672c\u849f\u84bb\u53c8\u6765\u53d1\u5e03\u9898\u89e3\u4e86\n### \u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u662f\u4e00\u9053\u7528\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u505a\u7684\u9898\uff0c\u81f3\u4e8e\u8fea\u6770\u65af\u7279\u62c9\u662f\u5565\uff0c\u524d\u9762\u5df2\u7ecf\u6709\u5de8\u4f6c\u89e3\u91ca\u8fc7\u4e86\u3002\n### \u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u4e00\u822c\u7684\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u662fO(n^2)\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684\u6570\u636e\u6765\u8bf4\uff0c\u8fd9\u672a\u514d\u6709\u4e9b\u9ad8\uff0c\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u53ea\u6709nlogn\u53ca\u4e00\u4e0b\u7ea7\u522b\u7b97\u6cd5\u624d\u80fd\u901a\u8fc7\u6b64\u9898\u3002\n### \u53cd\u8fc7\u6765\u518d\u60f3\u4e00\u4e0b\u8fea\u6770\u65af\u7279\u62c9\uff0c\u6bcf\u6b21\u90fd\u662f\u53d6\u51fa\u6765\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u8fb9\u3002\n# \u7b49\u7b49\uff01\u6700\u5c0f\u7684\uff01\n### \u8fd9\u53ef\u4ee5\u7acb\u523b\u8054\u60f3\u5e26\u5806\uff0c\u786e\u5207\u7684\u8bf4\u662f\u5c0f\u6839\u5806\u3002\n## \u65e2\u7136\u601d\u8def\u6709\u4e86\uff0c\u5c31\u770b\u4ee3\u7801\u5b9e\u73b0\u4e86\u3002\n#### \u9996\u5148\u662f\u8bfb\u5165\uff0c\u8fd9\u5f88\u7b80\u5355\uff0c\u5229\u7528\u8fb9\u94fe\u8868\u8bfb\u5165\u3002\n### \u8fb9\u94fe\u8868\u662f\u4e00\u4e2a\u5f88\u5e38\u7528\u7684\u4e1c\u897f\uff0c\u5927\u5bb6\u8981\u7406\u89e3\u8fb9\u94fe\u8868\u7684\u542b\u4e49\uff0c\u5b9e\u5728\u7406\u89e3\u4e0d\u4e86\u7684\u5c31\u786c\u80cc\u3002\n```cpp\nvoid add(int x,int y,int z)\n{\n\tne[++cnt]=no[x];\n\tno[x]=cnt;\n\tla[cnt]=y;\n\tval[cnt]=z;\n\treturn ;\n}\n```\n#### \u8fb9\u94fe\u8868\u521b\u5efa\u7a0b\u5e8f\u5b8c\u6210\uff0c\u63a5\u7740\u662f\u6574\u4e2a\u8bfb\u5165\u8fc7\u7a0b\n```cpp\nfor(int i=1;i<=m;i++)\n{\n\tint x,y,z;\n\tscanf(\"%d%d%d\",&x,&y,&z);\n\tadd(x,y,z);\n}\n```\n## \u7136\u540e\u662f\u5806\uff0c\u5806\u662f\u4ec0\u4e48\u6211\u5c31\u4e0d\u518d\u8fd9\u91cc\u4ecb\u7ecd\u4e86\uff0c\u8be6\u60c5\u8bf7\u770b\u7b2c[P3378](https://www.luogu.org/problemnew/show/P3378)\n```cpp\n\tfor(N=1;N<=m;N<<=1);\n\tfor(int i=1;i<=N*2;i++)\n\t\ta[i]=MAX;\n```\n### \u8fd9\u662f\u5806\u7684\u521d\u59cb\u5316\uff0c\u63a5\u4e0b\u6765\u662f\u89c1\u5230\u4e00\u4e2a\u70b9\u5c31\u628a\u4ed6\u7684\u63d2\u8fdb\u5806\u91cc\uff0c\u63d2\u8fdb\u5806\u91cc\u7684\u51fd\u6570\u5982\u4e0b\uff08\u4e5f\u662f\u5806\u7684\u63d2\u5165\uff0c\u770b\u7b2cp3378\u9898\uff09\n```cpp\nvoid ins(int i,int x)\n{\n\ta[N+i]=x;\n\tnum[N+i]=i;\n\tfor(int j=(N+i)>>1;j>=1;j>>=1)\n\t{\n\t\ta[j]=min(a[j<<1],a[j<<1|1]);\n\t\tnum[j]=(a[j<<1]<a[j<<1|1])?num[j<<1]:num[j<<1|1];\n\t}\n\treturn;\n}\n```\n### \u5176\u4e2di\u548cx\u4ee3\u8868\u5c06x\u63d2\u5165\u5806\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\uff0cnum\u662f\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u90a3\u68f5\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n### \u8fd9\u4ec5\u4ec5\u662f\u63d2\u5165\u8fc7\u7a0b\uff0c\u8981\u60f3\u5bfb\u627e\u5230\u8be5\u63d2\u90a3\u4e2a\u70b9\u8fd8\u9700\u8981\u4e00\u4e2afor\u5faa\u73af\n```cpp\nvoid update(int x)\n{\n\tfor(int i=no[x];i!=0;i=ne[i])\n\t{\n\t\tif(check[la[i]]!=0)\n\t\tcontinue;\n\t\tdis[la[i]]=min(val[i]+dis[x],dis[la[i]]);\n\t\tins(la[i],dis[la[i]]);\n\t}\n\tins(x,MAX);\n\tcheck[x]=1;\n\treturn;\n}\n```\n# check\u662f\u770b\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u6765\u8fc7\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff01\n## \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5077\u61d2\u7684\u5199\u6cd5\uff0c\u90a3\u5c31\u662f\u5c06\u51fa\u53d1\u70b9\u7684\u8ddd\u79bb\u8d4b\u62100\uff0c\u8fd9\u6837\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u5c31\u662f\u51fa\u53d1\u70b9\u4e86\u3002\n```cpp\n\tdis[s]=0;\n\tins(s,0);\n```\n### \u6700\u540e\u662f\u4e0d\u65ad\u66f4\u65b0\uff08\u53ea\u9700\u8981n\u6b21\uff09\n```cpp\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tupdate(num[1]);\t\n\t}\n```\n## \u5168\u90e8\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<stdlib.h>\n#include<algorithm>\n#include<cstring>\n#include<vector> //\u4e00\u5768\u5934\u6587\u4ef6\uff0c\u4e0d\u7528\u7ec6\u770b\n#define MAXN 800005\n#define MAX 2147483647//int \u7684\u8fb9\u754c\u503c\nusing namespace std;\nint ne[MAXN],la[MAXN],no[MAXN],cnt=0,val[MAXN],dis[MAXN],N=1,check[MAXN];\nint a[2*MAXN],num[2*MAXN];\nvoid add(int x,int y,int z)//\u8fb9\u94fe\u8868\n{\n\tne[++cnt]=no[x];\n\tno[x]=cnt;\n\tla[cnt]=y;\n\tval[cnt]=z;\n\treturn ;\n}\nvoid ins(int i,int x)//\u63d2\u5165\n{\n\ta[N+i]=x;\n\tnum[N+i]=i;\n\tfor(int j=(N+i)>>1;j>=1;j>>=1)\n\t{\n\t\ta[j]=min(a[j<<1],a[j<<1|1]);\n\t\tnum[j]=(a[j<<1]<a[j<<1|1])?num[j<<1]:num[j<<1|1];\n\t}\n\treturn;\n}\nvoid update(int x)//\u66f4\u65b0\n{\n\tfor(int i=no[x];i!=0;i=ne[i])\n\t{\n\t\tif(check[la[i]]!=0)\n\t\tcontinue;\n\t\tdis[la[i]]=min(val[i]+dis[x],dis[la[i]]);\n\t\tins(la[i],dis[la[i]]);\n\t}\n\tins(x,MAX);\n\tcheck[x]=1;\n\treturn;\n}\nint m,n,s;\nint main()\n{\n\t//freopen(\"dijiesitela.in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tfor(int i=0;i<MAXN;i++)\n\t\tdis[i]=MAX;\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\tfor(N=1;N<=m;N<<=1);\n\tfor(int i=1;i<=N*2;i++)\n\t\ta[i]=MAX;\n\tdis[s]=0;\n\tins(s,0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tupdate(num[1]);\t\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d \",dis[i]);\n    return 0;\n}\n```\n# \u7ed3\u675f\uff01\n## \u5e0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u653e\u8fc7 ",
        "postTime": 1544886671,
        "uid": 66350,
        "name": "wxy2005",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u6211\u4e00\u53ea\u849f\u84bb\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c  \n\u5728\u6b64\u8865\u5145 @HNFMS\u90ce\u624d\u5c3d\u6c5f\u6df9 \u7684\u9898\u89e3\uff0c\u7528\u7ed3\u6784\u4f53\u534a\u5c01\u88c5\u4e00\u4e0b\uff0c\u52a0\u4e86\u5f88\u591a\u6ce8\u91ca\u7684\u4ee3\u7801\u3002~~\u5feb\u8bfb\u90fd\u6ca1\u6709\u5199~~  \n  \u601d\u8def\uff1a\u7528 **\u4f18\u5148\u961f\u5217** \u548c **$pair$** \u4f18\u5316\u7684 **\u8fea\u6770\u65af\u7279\u62c9** \u7b97\u6cd5  \n    \u4ee3\u7801\u89c1\u4e0b \n  ```cpp\n#include <bits/stdc++.h>\n#include <queue> \nusing namespace std;\nint n, m, s;\nstruct NodePath{\n\tint net;//\u8fb9 -> \u8fb9   \u8fd9\u6761\u8fb9\u7684\u51fa\u53d1\u70b9\u4e0a\u51fa\u53d1\u7684\u4e0a\u4e00\u6761\u8fb9\u7684\u7f16\u53f7 \n\tint v;//\u8fb9 -> \u70b9  \u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\u7f16\u53f7 \n\tint w;//\u8fb9 -> \u503c  \u8fd9\u6761\u8fb9\u7684\u6743\u503c \n} ph[500000 + 9];\nstruct NodePoint{\n\tint head;//\u70b9 -> \u8fb9   \u4ece\u8fd9\u4e2a\u70b9\u51fa\u6765\u7684\u6700\u65b0\u7684\u4e00\u6761\u8fb9\u7684\u7f16\u53f7 \n\tlong long dis;//\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \n//\tNodePoint():head(0), dis(0x3f3f3f3f){}\n\tNodePoint(int a = 0, long long b = 0x3f3f3f3f)//\u521d\u59cb\u65e0\u7a77\u5927 \n\t{\n\t\thead = a;\n\t\tdis = b;\n\t}\n} pt[100000 + 9];\ntypedef pair <long long, int> point;//\u7b2c\u4e00\u9879\u662f\u5230\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7b2c\u4e8c\u9879\u662f\u8be5\u70b9\u7684\u7f16\u53f7 \nvoid node(int x, int y, int ww, int e);//\u90bb\u63a5\u8868\u521d\u59cb\u5316 \npriority_queue <point, vector<point>, greater<point> > q;\n//\u4f18\u5148\u961f\u5217\uff0c\u4f18\u5148\u8fd4\u56de\u8f83\u5c0f\u503c \uff08\u9ed8\u8ba4\u5148\u6392 pair \u7684\u7b2c\u4e00\u4f4d\uff09 \nint main()\n{\n\tcin >> n >> m >> s;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint x, y, ww;\n\t\tcin >> x >> y >> ww;\n\t\tnode (x, y, ww, i);//\u90bb\u63a5\u8868 \n\t}\n//\tint inf = 0x3f3f3f3f;\n//\tfill(pt+1, pt+1+n, NodePoint(0,inf));\n\tpt[s].dis = 0;//\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0 \n\tq.push(point(0,s));//\u6e90\u70b9\u5165\u961f \n\twhile (!q.empty())\n\t{\n\t\tpoint x = q.top();\n\t\tq.pop();\n\t\tif (x.first > pt[x.second].dis)//\u526a\u679d\uff1a\u6ca1\u6709\u7ee7\u7eed\u627e\u4e0b\u53bb\u7684\u5fc5\u8981 \n\t\t\tcontinue;\n\t\tfor (int i = pt[x.second].head; i != 0; i = ph[i].net)//\u628a\u8fd9\u4e2a\u70b9\u7684\u6bcf\u6761\u51fa\u8fb9\u8dd1\u4e00\u6b21 \n\t\t{\n\t\t\tint z = ph[i].v; //\u628a\u7ec8\u70b9\u8bb0\u5f55 \n\t\t\tif (x.first + ph[i].w < pt[z].dis)//\u5230 x \u70b9\u7684\u6700\u77ed\u8ddd\u79bb + \u8be5\u8fb9\u6743\u503c < \u5230 z \u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n\t\t\t{\n\t\t\t\tpt[z].dis = x.first + ph[i].w;//\u6536\u7f29\n\t\t\t\tq.push(point(pt[z].dis, z));//\u5c06\u8be5\u70b9\u66f4\u65b0 \n\t\t\t} \n\t\t} \n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tcout << pt[i].dis <<\" \";\n\tcout << endl;\n\treturn 0;  \n}\nvoid node(int x, int y, int ww, int e)//\u90bb\u63a5\u8868\u521d\u59cb\u5316 \n{\n\tph[e].net = pt[x].head;//\u6307\u5411\u8be5\u9876\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9 \n\tpt[x].head = e;\n\tph[e].v = y;\n\tph[e].w = ww;\n}\n\n  ```",
        "postTime": 1532503005,
        "uid": 65436,
        "name": "n0000000000o",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684.\n\n\u5751\u5b9a\u662f\u5361SPFA\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u8fea\u6770\u65af\u7279\u8fbe(\u5806\u4f18\u5316)\u7684\u677f\u5b50.\n\n\u666e\u901a\u8fea\u6770\u65af\u7279\u62c9\u5751\u5b9a\u8fc7\u4e0d\u4e86(n^2),\u52a0\u4e86\u5806\u4f18\u5316\u5c31\u8dd1\u7684\u98de\u5feb(nlogn).\n\n\n```cpp\n//dijkstra-dyh\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define MAXN 10010\nusing namespace std;\ntypedef pair<int,int>Pair;\n\nstruct node {\n  int u,w,v,next;\n}e[500010];\n\nint dis[MAXN],st[MAXN];\nbool flag[MAXN];\nint tot,start,n,m,x,y,z;\n\nvoid add(int x,int y,int z)\n{\n  e[++tot].u=x;e[tot].v=y;\n  e[tot].w=z;\n  e[tot].next=st[x];st[x]=tot;\n}\n\nint dijsktra(int start)\n{\n  memset(dis,127,sizeof dis);\n  memset(flag,0,sizeof flag);\n  dis[start]=0;priority_queue< Pair,vector<Pair>,greater<Pair> >que;\n  que.push(make_pair(dis[start],start));\n  while (!que.empty()) {\n    Pair now=que.top();que.pop();\n    if (flag[now.second]) continue;\n    flag[now.second]=1;\n    for (int i=st[now.second];i;i=e[i].next)\n    if (dis[now.second]+e[i].w<dis[e[i].v]) {\n      dis[e[i].v]=dis[now.second]+e[i].w;\n      if (!flag[e[i].v]) que.push(make_pair(dis[e[i].v],e[i].v));\n    }\n  }\n  for (int i=1;i<=n;i++) {\n    if (dis[i]==2139062143) dis[i]=2147483647;\n    printf(\"%d \",dis[i]);\n  }\n}\nint main()\n{\n  scanf(\"%d%d%d\",&n,&m,&start);\n  for (int i=1;i<=m;i++) {\n    scanf(\"%d%d%d\",&x,&y,&z);\n    add(x,y,z);\n  }\n  dijsktra(start);\n}\n```",
        "postTime": 1532309786,
        "uid": 45781,
        "name": "fyfy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "Dijskra\u7b97\u6cd5+\u5806\u4f18\u5316\uff0c\u4f46\u662f\u6570\u636e\u6709\u70b9\u5927\uff0c\u4e0d\u80fd\u7528\u90bb\u63a5\u77e9\u9635\u50a8\u5b58\uff0c\u7528\u90bb\u63a5\u8868\u3002\n\u597d\u4e86\uff0c\u5176\u4ed6\u4e5f\u6ca1\u4ec0\u4e48\u53ef\u8bf4\u7684\u4e86\u3002\u8fd9\u7bc7\u9898\u89e3\u5462\uff0c\u662f\u5927\u91cf\u5229\u7528STL\u7684\uff0c\u8981\u662f\u770b\u4e0d\u61c2STL\u7684\u8bf7\u89c1\u697c\u4e0b\u9898\u89e3\u3002\u3002\u3002\n```cpp\n//\u6839\u636e\u6570\u636e\u8303\u56f4(\u4ee5P4779\u4e3a\u51c6\uff0c\u8fd9\u4e2a\u4ee3\u7801\u4e24\u9898\u901a\u7528)\uff0c\u6211\u51b3\u5b9a\u91c7\u7528Dijskra\u7684\u5806\u4f18\u5316 \n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<list>\nusing namespace std;\nstruct Edge{\n    int to,len;\n};\nint n,m,s , u,v,w;\nvector<list<Edge> > dis;\t\t//\u4e00\u770b\u6570\u636e\uff0c\u90bb\u63a5\u77e9\u9635\u80af\u5b9aPass\u4e86\uff0c\u4e0a\u90bb\u63a5\u8868\uff08\u9ad8\u7ea7\u5199\u6cd5\uff09 \n\nstruct Dot{\n    int dist,t;\n    bool operator < (Dot a)const{\n        return dist>a.dist;\n    }\n};\npriority_queue<Dot> q;\nvector<int>f;\t\t\t\t\t//\u79bb\u8d77\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb \nint tot;\n\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n//\tfreopen(\"testdata.out\",\"w\",stdout); \n    scanf(\"%d%d%d\",&n,&m,&s);\n    dis.reserve(n+1);\n    f.reserve(n+1);\n    for(int i=0;i<=n;i++)\n        dis.push_back(list<Edge>());\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        if(u!=v) dis[u].push_back( {v,w} );\t\t//\u6570\u636e\u6709\u6bd2\uff0c\u6709\u4ecea\u5230a\u8ddd\u79bb\u4e3a??(>0)\u7684\u8fd9\u79cd\u4e1c\u897f\u9020\u6210\u6b7b\u5faa\u73af\u3002\u3002\u3002 \n    }\t\t\t\t\t\t\t//\u8bfb\u5165 \n    \n    for(int i=0;i<=n;i++)\n        f.push_back(2147483647);\n    q.push( Dot{0,s} );\n    tot=n;\t\t\t\t\t//\u521d\u59cb\u5316 \n    for(;tot>0&&!q.empty();){\t\t//\u5fc5\u987b\u8981\u52a0!q.empty()\uff0c\u5426\u5219\u5c31\u4f1a\u56e0\u4e3a\u8fbe\u4e0d\u5230\u7684\u70b9\u5361\u6b7b\uff0ctot\u662f\u8282\u7701\u65f6\u95f4 \n        Dot now=q.top(); q.pop();\n        if(f[now.t]<=now.dist) continue;\n        f[now.t]=now.dist; tot--;\n        for(list<Edge>::const_iterator i=dis[now.t].begin();i!=dis[now.t].end();i++)\n             q.push( Dot{now.dist+i->len,i->to} );\n    }\n    for(int i=1;i<n;i++) printf(\"%d \",f[i]); printf(\"%d\\n\",f[n]);\n//\tfclose(stdin);\n//\tfclose(stdout);\n    return 0;\n} \n```\n",
        "postTime": 1535528193,
        "uid": 16588,
        "name": "panhuachao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "\u4e00\u9053\u6807\u51c6\u7684dijkstra\u7684\u5806\u4f18\u5316\n\n\u4e8c\u53c9\u5806\u5c31\u4e0d\u8bb2\u4e86~~\uff08\u53cd\u6b63\u4e5f\u6ca1\u4eba\u7528\uff09~~\uff0c\u7528STL\u91cc\u7684\u4f18\u5148\u961f\u5217priority_queue\u4ee3\u66ff\u5c31\u884c\u4e86\uff0c\u8bb0\u5f97\u91cd\u8f7d\u5c0f\u4e8e\u8fd0\u7b97\u7b26\u5c31\u884c\u4e86\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=100010,M=200010;\n\nint head[N],ver[M],edge[M],next[M],d[N];\nint n,m,tot=0,s;\nbool visit[N];\n\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y,edge[tot]=z,next[tot]=head[x],head[x]=tot;\n}\n\nstruct aa\n{\n\tint v,pos;\n} ;\nbool operator<(const aa &a,const aa &b) //\u91cd\u8f7d\u5c0f\u4e8e\u8fd0\u7b97\u7b26\n{\n\treturn a.v>b.v;\n}\npriority_queue<aa> q;\n\nvoid push(int v,int pos) //\u4ee3\u66ffq.push()\n{\n\taa a;\n\ta.pos=pos,a.v=v;\n\tq.push(a);\n}\n\nvoid dijkstra()\n{\n\tmemset(d,0x3f,sizeof(d));\n\td[s]=0;\n\tmemset(visit,false,sizeof(visit));\n\tfor(;q.size();q.pop());\n\tpush(0,s);\n\tfor(;q.size();)\n\t{\n\t\taa x=q.top();\n\t\tq.pop();\n\t\tint pos=x.pos,v=x.v;\n\t\tif(visit[pos]) continue; //\u91cd\u70b9\u6ce8\u610f\uff08\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u5728\u8fd9\u513fTLE\u4e86\u597d\u51e0\u6b21\uff09\n\t\tvisit[pos]=true;\n\t\tfor(int i=head[pos];i;i=next[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(visit[y]) continue;\n\t\t\tif(d[y]>v+edge[i])\n\t\t\t{\n\t\t\t\td[y]=v+edge[i];\n\t\t\t\tpush(d[y],y);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint read()\n{\n\tint a=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-') w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t\ta=(a<<3)+(a<<1)+ch-'0',ch=getchar();\n\treturn a*w;\n}\n\nvoid write(int x)\n{\n     if(x<0) putchar('-'),x=-x;\n     if(x>9) write(x/10);\n     putchar(x%10+'0');\n}\n\nint main()\n{\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\ta=read(),b=read(),c=read(); //\u6015\u88ab\u5361\u6240\u4ee5\u9001\u4e86\u5feb\u8bfb\n        add(a,b,c);\n\t}\n\tdijkstra(); //dijkstra\n\tfor(int i=1;i<=n;i++) write(d[i]),putchar(' ');\n\tprintf(\"\\n\");\n\treturn 0;\n} \n```",
        "postTime": 1532347535,
        "uid": 54728,
        "name": "wangxuye",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u3011"
    },
    {
        "content": "lyd\u7684\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\u8fd8\u662f\u4e00\u672c\u4e0d\u9519\u7684\u4e66\n\n\u5728\u6b64\u4ec5\u505a\u4ee3\u7801\u642c\u8fd0\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<map>\n#include<queue>\n#define ll long long\nusing namespace std;\n\nll head[10010],ver[500010],edge[500010],Next[500010],d[500010];\nbool v[10010];\nll n,m,tot,s;\npriority_queue<pair<ll,ll> >q;\n\ninline ll read(){\n    ll tmp=1,x=0;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        if(ch=='-') tmp=-1;\n        ch=getchar();\n    }\n   \n    while(isdigit(ch)){\n        x=x*10+ch-48;\n        ch=getchar();\n    }\n    return tmp*x;\n}\n\ninline void addEdge(ll x,ll y,ll z){\n    ver[++tot]=y;\n    edge[tot]=z;\n    Next[tot]=head[x];\n    head[x]=tot;\n}\n\nvoid dijkstra(){\n    for(ll i=1; i<=500005; i++)d[i]=2147483647;\n    //memset(d,0x3f3f3f3f,sizeof(d));\n    memset(v,0,sizeof(v));\n    d[s]=0;\n    q.push(make_pair(0,s));\n    while(q.size()){\n        ll x=q.top().second; q.pop();\n        if(v[x]) continue;\n        v[x]=1;\n        for(ll i=head[x]; i; i=Next[i]){\n            ll y=ver[i],z=edge[i];\n            if(d[y]>d[x]+z){\n                d[y]=d[x]+z;\n                q.push(make_pair(-d[y],y));\n            }\n        }\n    }\n}\n\nint main(){\n    n=read(); m=read(); s=read();\n    for(ll i=1; i<=m; i++){\n        ll x=read(),y=read(),z=read();\n        addEdge(x,y,z);\n    }\n    dijkstra();\n    for(ll i=1; i<=n; i++){\n        printf(\"%lld \",d[i]);\n    }\n}\n```",
        "postTime": 1532326545,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4779 \u3010\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    }
]