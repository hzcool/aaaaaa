[
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u8d2a\u5fc3\u3002\n\n\n\u8d2a\u5fc3\u7684\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff1a\u5148\u6ee1\u8db3\u53e3\u611f\u8981\u6c42\u6700\u9ad8\u7684\u5976\u725b\uff0c\u7136\u540e\u76f8\u540c\u53e3\u611f\u7684\uff0c\u6309\u7167\u4ef7\u683c\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\u3002\n\n\n\u7136\u540e\u6bcf\u6b21\u9009\u53d6\u8349\u7684\u65f6\u5019\uff0c\u53ea\u8981\u7528$multiset$\u7ef4\u62a4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u5168\u8c37rk1\uff09\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstdio>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nint n,m;\n\npair <int,int> c[100001],g[100001];\n\ninline char nc()\n{\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline int read()\n{\n    char ch=nc();int sum=0;\n    while(!(ch>='0'&&ch<='9'))ch=nc();\n    while(ch>='0'&&ch<='9')sum=sum*10+ch-48,ch=nc();\n    return sum;\n}\n\nint main()\n{\n    n=read();\n    m=read();\n    for (int i=0;i<n;i++)\n    {\n        c[i].first=read();\n        c[i].second=read();\n    }\n    for (int i=0;i<m;i++)\n    {\n        g[i].first=read();\n        g[i].second=read();\n    }\n    sort(c,c+n);\n    sort(g,g+m);\n    multiset<int>T;\n    long long ans=0;\n    int j=0;\n    for (int i=0;i<m;i++)\n    {\n        while (j<n && c[j].first<=g[i].first)\n        {\n            T.insert(-c[j].second);\n            j++;\n        }\n        auto p=T.lower_bound(-g[i].second);\n        if (p!=T.end())\n        {\n            ans+=g[i].first;\n            T.erase(p);\n        }\n    } \n    if (j==n && T.empty())\n        printf(\"%lld\\n\",ans);\n    else printf(\"%d\\n\",-1);\n    return 0;\n}\n```\n\n\u8fd9\u4efd\u4ee3\u7801\u6211\u56e0\u4e3a~~\u6bd4\u8f83\u61d2~~\uff0c\u6240\u4ee5\u6bcf\u6b21\u90fd\u5bf9\u8981\u64cd\u4f5c\u7684\u6570\u5b57\u53d6\u53cd\uff0c\u8fd9\u6837\u5916\u9762\u7684for\u5faa\u73af\u5c31\u53ef\u4ee5\u5199\u7684\u8212\u670d\u4e00\u4e9b\n\n\n\u7136\u540e\u6bd5\u7adf\u8fd9\u9053\u9898\u76ee\u80fd\u7528stl\u91cc\u9762\u7684sort\uff0c\u7136\u540e\u6211\u5c31\u7528\u4e86treap\u7ef4\u62a4\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u4ee3\u7801\uff0c\u56e0\u4e3a\u6211\u5199\u7684treap\u5e38\u6570\u4e0d\u592a\u597d\uff0c\u6240\u4ee5\u6548\u7387\u4e0d\u592a\u9ad8\u3002treap\u7684\u57fa\u672c\u64cd\u4f5c\u53ef\u4ee5\u770b[Treap\u6a21\u677f\u9898](https://www.luogu.org/problemnew/show/3369)\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint dup[100050],L[100050],R[100050],k[100050],h[100050],sz,n,m,root;\n\npair <int,int> c[100050],g[100050];\n\ninline char nc()\n{\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline int read()\n{\n    char ch=nc();int sum=0;\n    while(!(ch>='0'&&ch<='9'))ch=nc();\n    while(ch>='0'&&ch<='9')sum=sum*10+ch-48,ch=nc();\n    return sum;\n}\n\nint Left_Rotate(int root)\n{\n    int y=R[root];\n    R[root]=L[y];\n    L[y]=root;\n    return y;\n}\n\nint Right_Rotate(int root)\n{\n    int y=L[root];\n    L[root]=R[y];\n    R[y]=root;\n    return y;\n}\n\nint pop(int root)\n{\n    int y=0;\n    if (L[root]==0)\n        return R[root];\n    else if (R[root]==0)\n        return L[root];\n    else if (h[L[root]]>h[R[root]])\n    {\n        y=Right_Rotate(root);\n        R[y]=pop(root);\n    }\n    else\n    {\n        y=Left_Rotate(root);\n        L[y]=pop(root);\n    }\n    return y;\n}\n\nint Delete(int root,int key)\n{\n    if (root==0)\n        return 0;\n    else if (k[root]<key)\n        R[root]=Delete(R[root],key);\n    else if (key<k[root])\n        L[root]=Delete(L[root],key);\n    else if (dup[root]>0)\n        dup[root]--;\n    else\n        return pop(root);\n    return root;\n}\n\nint Insert(int root,int key)\n{\n    if (root==0)\n    {\n        sz++;\n        k[sz]=key;\n        h[sz]=rand();\n        return sz;\n    }\n    else if (key<k[root])\n    {\n        L[root]=Insert(L[root],key);\n        if (h[L[root]]>h[root])//>\n            root=Right_Rotate(root);\n    }\n    else if (k[root]<key)\n    {\n        R[root]=Insert(R[root],key);\n        if (h[R[root]]>h[root])//>\n            root=Left_Rotate(root);\n    }\n    else dup[root]++;\n    return root;\n}\n\nint find(int root,int key)\n{\n    int p=root,val=0;\n    while (p!=0)\n    {\n        if (k[p]<=key)\n        {\n            val=p;\n            //cerr << \"val=\" << k[p] << endl;\n            p=R[p];\n        }\n        else p=L[p];\n    }\n    return val;\n}\n\nint main()\n{\n    srand(19260817);\n    n=read();\n    m=read();\n    for (int i=0;i<n;i++)\n    {\n        c[i].first=read();\n        c[i].second=read();\n    }\n    for (int i=0;i<m;i++)\n    {\n        g[i].first=read();\n        g[i].second=read();\n    }\n    sort(c,c+n);\n    sort(g,g+m);\n    long long ans=0;\n    int j=0;\n    //cout << \"-------------------------\" << endl;\n    for (int i=0;i<m;i++)\n    {\n        while (j<n && c[j].first<=g[i].first)\n        {\n            //cout << c[j].first << \" \" << g[i].first << endl;\n            root=Insert(root,c[j].second);\n            j++;\n        }\n        int p=find(root,g[i].second);\n        //cerr << \"p=\" << p << endl;\n        if (p!=0)\n        {\n            ans+=g[i].first;\n            //cout << g[i].first << endl;\n            root=Delete(root,k[p]);\n        }\n    } \n    if (j==n && root==0)\n        printf(\"%lld\\n\",ans);\n    else printf(\"-1\\n\");\n    return 0;\n}\n```",
        "postTime": 1516541301,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2869 \u3010[USACO07DEC]\u7f8e\u98df\u7684\u98df\u8349\u52a8\u7269Gourmet Grazers\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u662f\u6ea2\u6c34\u7684\u84dd\u9898\uff08\u6bd5\u7adf\u7528 `multiset` \u505a\u5c31\u662f\u5982\u6b64\uff09\uff01\uff01\n### \u601d\u8def\n\u8fd9\u9053\u9898\u6211\u4eec\u901a\u8fc7\u6392\u5e8f\u6765\u524a\u6389\u53e3\u611f\u90a3\u4e2a\u6307\u6807\uff01\n\n\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u65b9\u4fbf\u6392\u5e8f\uff09\n\n```cpp\nstruct A{\n\tint a,b,c;//a\u3001b\u4e3a\u9898\u76ee\u4e2d\u7684\u610f\u601d\uff0cc=0\u8868\u793a\u5f53\u524d\u7684\u4e3a\u725b\uff0c\u76f8\u53cd\uff0cc=1\u8868\u793a\u5f53\u524d\u7684\u4e3a\u5e72\u8349\n}a[200010];\n\n```\n\n\u518d\u5b9a\u4e49\u4e00\u4e2a\u53ef\u91cd\u96c6 `multiset` \u3002\n\n```cpp\nmultiset<int>s;\n```\n\n\u6240\u4ee5\u6211\u4eec\u5148\u628a\u8349\u548c\u725b\u6309\u7167\u53e3\u611f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\n```cpp\nbool cmp(A a,A b){\n\tif(a.b==b.b)\n\t\treturn a.c>b.c;\n\treturn a.b>b.b;\n}\nsort(a+1,a+n+1,cmp);\n```\n\n\u6211\u4eec\u518d\u4ece\u524d\u5f80\u540e\u904d\u5386\u6392\u5e8f\u540e\u7684\u6570\u7ec4\n\n1. \u5982\u679c\u9047\u5230\u4e86\u8349\uff0c\u6211\u4eec\u628a\u5b83\u7684\u4ef7\u94b1\u52a0\u8fdb `multiset` \u91cc\n```cpp\nif(a[i].c==1)\n\ts.insert(a[i].a);\n```\n\n\n2. \u5982\u679c\u9047\u5230\u4e86\u725b\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u6307\u6807\u4e5f\u5c31\u662f\u53e3\u611f\u6ee1\u8db3\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u725b\u7684\u53e3\u611f\uff0c\u6240\u4ee5\u4e0d\u7528\u7ba1\uff0c\u6bd5\u7adf\u6211\u4eec\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff08\u6210\u529f\u524a\u6389\u4e00\u4e2a\u6307\u6807\uff09\u3002\u7136\u540e\u6211\u4eec\u5462\u518d\u901a\u8fc7 `multiset` \u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u5f97\u5230\u6700\u5c0f\u7684\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u6240\u9700\u4ef7\u94b1\u7684\u5e72\u8349\u3002\n\n```cpp\nelse{\n\tset<int>::iterator it=s.lower_bound(a[i].a);\n\tif(s.empty()||it==s.end()){\n\t\tcout<<-1<<endl;\n\t\treturn 0;\n\t}\n\tans+=*it;\n\ts.erase(it);\n}\n\n```\n\n\u6700\u540e\u8f93\u51fa\u6240\u6709\u5e72\u8349\u4ef7\u94b1\u7684\u548c\u5373\u53ef\n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nstruct A{\n\tint a,b,c;\n}a[200010];\nint n,m,ans;\nmultiset<int>s;\nbool cmp(A a,A b){\n\tif(a.b==b.b)\n\t\treturn a.c>b.c;\n\treturn a.b>b.b;\n}\nsigned main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld%lld\",&a[i].a,&a[i].b);\n\t\ta[i].c=0;\n\t}\n\tn+=m;\n\tfor(int i=n-m+1;i<=n;i++){\n\t\tscanf(\"%lld%lld\",&a[i].a,&a[i].b);\n\t\ta[i].c=1;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++){\n\t\tif(a[i].c==1)\n\t\t\ts.insert(a[i].a);\n\t\telse{\n\t\t\tset<int>::iterator it=s.lower_bound(a[i].a);\n\t\t\tif(s.empty()||it==s.end()){\n\t\t\t\tcout<<-1<<endl;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tans+=*it;\n\t\t\ts.erase(it);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1648277586,
        "uid": 341946,
        "name": "zac2010",
        "ccfLevel": 7,
        "title": "P2869 [USACO07DEC]Gourmet Grazers G"
    },
    {
        "content": "\u660e\u663e\u672c\u9898\u6309\u7167w\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u4e4b\u540e\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u67e5\u627e\u5927\u4e8ea[i].v\u7684\u6700\u5c0fvalue   \n\u7531\u4e8e\u662f\u67e5\u627e\u540e\u7ee7\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u68f5\u5e73\u8861\u6811  \n\u6b64\u5904\u4ecb\u7ecd\u4e00\u79cdSTL\u2014\u2014multiset  \n\u652f\u6301\u5bf9\u5143\u7d20\u7684\u63d2\u5165\uff0c\u5220\u9664\uff0c\u4ee5\u53ca\u67e5\u8be2\u540e\u7ee7  \n```cpp\nmultiset<int>s;//\u5b9a\u4e49   \n\ns.insert(i);//\u63d2\u5165  \n\ns.find(i);//\u8fd4\u56dei\u5728\u96c6\u5408\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\uff08\u8fed\u4ee3\u5668\uff09\n\ns.erase(i);//\u5982\u679ci\u662f\u6570\u503c\uff0c\u5220\u9664\u6240\u6709\u4e3ai\u7684\u5143\u7d20\n//\u5982\u679ci\u662f\u8fed\u4ee3\u5668\uff0c\u5220\u9664\u6240\u6307\u5411\u7684\u5143\u7d20\n//\u6240\u4ee5\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5199\u4e3as.erase(s.find(i));\n\ns.count(i);//i\u5143\u7d20\u5728\u96c6\u5408\u4e2d\u6570\u91cf\n\ns.lower_bound(i);//\u67e5\u8be2i\u5143\u7d20\u540e\u7ee7\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668\n//\u6ce8\u610f\u4e0d\u80fd\u5199\u6210lower_bound(s.begin(),s.end(),i);\u7edd\u5bf9\u9519\u8bef\n```\n\u7531\u6b64\u672c\u9898\u7684\u4ee3\u7801\u5c31\u975e\u5e38\u7b80\u6d01\u4e86  \n\u6ce8\u610f\u4e00\u4e0b\u8fb9\u754c\u6761\u4ef6\u5373\u53ef   \n~~\u6211\u624d\u4e0d\u4f1a\u8bf4\u662f\u56e0\u4e3a\u6211\u61d2\u5f97\u5199\u975e\u65cbtreap~~ \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nmultiset<int>s;\nmultiset<int>::iterator it;\nstruct Node{\n\tint v,w;//\u4ef7\u683c\uff0c\u53e3\u611f \n}a[100010],b[100010];\nbool cmp(const Node &x,const Node &y){\n\t//if(x.w==y.w)return x.v>y.v;\n\treturn x.w>y.w;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d%d\",&a[i].v,&a[i].w);\n\tfor(int i=1;i<=m;++i) \n\t\tscanf(\"%d%d\",&b[i].v,&b[i].w);\n\tsort(a+1,a+n+1,cmp);\n\tsort(b+1,b+m+1,cmp);\n\tint now=1;\n\tlong long ans=0;\n\tfor(int i=1;i<=n;++i){\n\t\twhile(now<=m&&b[now].w>=a[i].w)\n\t\t\ts.insert(b[now++].v);\n\t\tit=s.lower_bound(a[i].v);\n\t\tif(it==s.end()){\n\t\t\tprintf(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tans+=*it;\n\t\ts.erase(s.find(*it));\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1571904799,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "multiset\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e2a\u8d2a\u5fc3\uff0c\u8003\u8651\u4e00\u4e0b\u6309\u53e3\u611f\u5ea6\u964d\u5e8f\u6392\u5217\u53ef\u4f9b\u7684\u7267\u8349\u548c\u5976\u725b\uff0c\n\n\u5047\u5982\u73b0\u5728\u662f\u7b2c i \u5934\u5976\u725b\uff0c\n\n\u4ece\u964d\u5e8f\u6392\u5217\u7684\u7267\u8349\u4e2d\u9009\u62e9\u6ee1\u8db3\u4ed6\u53e3\u611f\u7684\u7267\u8349\uff0c\n\n\u52a0\u5165\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d(\u96fe)\n\n\u7136\u540e\u8d2a\u5fc3\u5730\u627e\u4e0d\u4f4e\u4e8e\u4ed6\u8981\u6c42\u7684\u4ef7\u683c\u7684\u7267\u8349\u4e2d\u6700\u5c0f\u7684\n\n~~\u5220\u9664~~\u5403\u6389\n\n\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u4e0b\u4e00\u5934\u5976\u725b j\n\n\u73b0\u6709\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u7267\u8349\u5fc5\u5b9a\u6ee1\u8db3\u4ed6\u7684\u53e3\u611f(\u56e0\u4e3a\u662f\u964d\u5e8f\u6392\u5e8f\u7684)\n\n\u8fd9\u6837\u5c31\u8981\u6c42\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\n\n1.\u52a0\u5165\u67d0\u4e2a\u6570\n\n2.\u5220\u9664\u67d0\u4e2a\u6570\n\n3.\u6c42\u67d0\u4e2a\u6570\u7684\u540e\u7ee7\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e0a\u5e73\u8861\u6811(STL\u4e5f\u53ef\u4ee5)\n\n\u8fd9\u91cc\u5199\u7684\u662fFHQTreap\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    char c=getchar();\n    int x=0,f=1;\n    while(c<'0'||c>'9'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\nconst int maxn=1e5+10;\nint n,m;\nstruct E{\n    int a,b;\n}a[maxn],b[maxn];\nbool cmp(E a,E b){\n    return a.b>b.b;\n}\nlong long ans;\nint ch[maxn][2],sz[maxn],val[maxn],rnd[maxn],id,root,x,y,z;\ninline void update(int now){\n    sz[now]=1+sz[ch[now][1]]+sz[ch[now][0]];\n}\ninline int new_node(int x){\n    sz[++id]=1;\n    rnd[id]=rand();\n    val[id]=x;\n    return id;\n}\ninline int split(int now,int k,int &x,int &y){\n    if(!now)x=y=0;\n    else {\n        if(val[now]<=k){\n            x=now,split(ch[now][1],k,ch[now][1],y);\n        }\n        else {\n            y=now,split(ch[now][0],k,x,ch[now][0]);\n        }\n        update(now);\n    }\n}\ninline int merge(int x,int y){\n    if(!x||!y)return x+y;\n    if(rnd[x]<rnd[y]){\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else{\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nint tmp=-1;\ninline void find(int now,int a){\n    while(now!=0){\n        tmp=val[now];\n        now=ch[now][0];\n    }\n    return;\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;i++){\n        a[i].a=read();\n        a[i].b=read();\n    }\n    for(int i=1;i<=m;i++){\n        b[i].a=read();\n        b[i].b=read();\n    }\n    sort(a+1,a+1+n,cmp);\n    sort(b+1,b+1+m,cmp);\n    int j=1;\n    for(int i=1;i<=n;i++){\n        tmp=-1;\n        while(b[j].b>=a[i].b&&j<=m){\n            split(root,b[j].a,x,y);\n            root=merge(merge(x,new_node(b[j].a)),y);\n            j++;//\u63d2\u5165\n        }\n        split(root,a[i].a-1,x,y);\n        find(y,a[i].a);\n        root=merge(x,y);//\u5bfb\u627e\n        if(tmp==-1){\n            puts(\"-1\");\n            return 0;\n        }\n        ans+=tmp;\n        split(root,tmp,x,z);\n        split(x,tmp-1,x,y);\n        y=merge(ch[y][0],ch[y][1]);\n        root=merge(merge(x,y),z);//\u5220\u9664\n    }\n    cout<<ans;\n}\n```\n\u5e38\u6570\u60e8\u4e0d\u5fcd\u7779...",
        "postTime": 1523793294,
        "uid": 46750,
        "name": "DefFrancis",
        "ccfLevel": 6,
        "title": "[USACO07DEC]\u7f8e\u98df\u7684\u98df\u8349\u52a8\u7269Gourmet Grazers"
    },
    {
        "content": "## \u9898\u610f\u5206\u6790\n\u6b64\u9898\u9650\u5236\u6761\u4ef6\u8f83\u591a\uff0c\u4e00\u773c\u770b\u4e0a\u53bb\u5f88\u61f5\uff0c\u4f46\u77e5\u9053\u4e00\u4e2a\u539f\u5219\uff0c\u5c3d\u53ef\u80fd\u5728\u6ee1\u8db3\u725b\u7684\u9700\u6c42\u7684\u60c5\u51b5\u4e0b\u4f7f\u4ef7\u683c\u6700\u5c0f\u3002\n\n\u6211\u4eec\u8003\u8651\u5148\u5c06\u725b\u5bf9\u8349\u7684\u65b0\u9c9c\u7a0b\u5ea6\u548c\u8349\u7684\u65b0\u9c9c\u7a0b\u5ea6\u9012\u51cf\u6392\u5e8f\u3002\n\n\u56e0\u4e3a\u5728\u4ef7\u683c\u76f8\u540c\u65f6\uff0c\u65b0\u9c9c\u7a0b\u5ea6\u5bf9\u7b54\u6848\u7684\u6700\u5c0f\u9650\u5236\u6ca1\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u5e94\u8be5\u628a\u6700\u65b0\u9c9c\u7684\u8349\u7ed9\u8981\u6c42\u6700\u9ad8\u7684\u5976\u725b\u3002\n\n\u7136\u540e\uff0c\u65b0\u9c9c\u7a0b\u5ea6\u5728\u5976\u725b\u4e4b\u524d\u7684\u662f\u53ef\u4ee5\u9009\u62e9\u7684\uff0c\u9009\u62e9\u4ef7\u683c\u6700\u5c0f\u7684\u5373\u53ef\u3002\u8fd9\u6837\u4e0d\u4f1a\u5bf9\u4e4b\u540e\u7684\u5976\u725b\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u4e3a\u5976\u725b\u4e4b\u524d\u7684\u8349\u90fd\u662f\u6ee1\u8db3\u8981\u6c42\u7684\u3002\n\n\u6700\u540e\uff0c\u67e5\u627e\u8fc7\u7a0b\u53ef\u4ee5\u7528 $stl$ \u6765\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\u7684\u5e8f\u5217\u8981\u7528\u53ef\u4ee5\u5b58\u91cd\u590d\u7684\u961f\u5217\u3002\n\n\u4e00\u5b9a\u8981\u5f00 $long\\ long$\uff01\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N = 1e5 + 10;\nint n,m,ans = 0;\nstruct node{\n    int deli,pri;\n}a[N],b[N];//a \u4e3a\u725b\u6570\u7ec4\uff0cb \u4e3a\u8349\u6570\u7ec4\nmultiset<int> p;\nbool cmp(node aa,node bb){\n    return aa.deli > bb.deli;\n}//\u6392\u5e8f\nsigned main(){\n   cin >> n >> m;\n    for(int i = 1;  i <= n; i ++) cin >> a[i].pri >> a[i].deli;\n    for(int i = 1; i <= m ; i ++) cin >> b[i].pri >> b[i].deli;\n   sort(a + 1,a + 1 + n,cmp);\n   sort(b + 1,b + 1 + m,cmp);\n   int id = 1;\n    for(int  i = 1 ; i <= n ; i ++){\n        while(id <= m && b[id].deli >= a[i].deli){\n                   p.insert(b[id++].pri);\n        }//\u628a\u7b26\u5408\u7684\u52a0\u5165\u96c6\u5408\n        multiset<int>::iterator it = p.lower_bound(a[i].pri);//\u8fd4\u56de\u7684\u662f\u8fed\u4ee3\u5668\n        if(it == p.end()){cout << -1;return 0;}\n        else {\n            ans += *it;\n            p.erase(it);\n        } \n    }\n     cout << ans;\n}\n```\n",
        "postTime": 1632800745,
        "uid": 420102,
        "name": "phmaprostrate",
        "ccfLevel": 4,
        "title": "P2869"
    },
    {
        "content": "\u5199\u6b64\u9898\u65f6\u5e76\u4e0d\u4f1amultiset\uff0c\u5c31\u5199\u4e86\u4e2a\u6811\u72b6\u6570\u7ec4\n\n\u5148\u628a100,000,000\u7684\u6570\u636e**\u79bb\u6563\u5316**\u4e86\uff0c\u6700\u591a\u5c31\u5bf9\u6620\u52301-200,000\uff08\u7406\u7531\u89c1\u6570\u636e\u8303\u56f4\n\n\u5f00**\u6743\u503c\u6811\u72b6\u6570\u7ec4**\uff0c\u53731-200,000\u7684\u8303\u56f4\n\n\u6392\u5e8f\u540e**\u8d2a\u5fc3**\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u67e5\u8be2\u7b2c1\u4e2a\u5927\u4e8e\u7b49\u4e8e\u662f\u4ec0\u4e48\u6570\u65f6\u5c31**\u4e8c\u5206**\n\n\u521d\u59cb\u533a\u95f4\u4e3a\n\n\u5de6\u7aef\u70b9\uff1a\u5f53\u524d\u5976\u725b\u82b1\u94b1\u6700\u5c0f\u503c\n\n\u53f3\u7aef\u70b9\uff1aN+M\n\n\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u533a\u95f4**\u662f\u5426\u6709\u6570**\uff08\u5373**\u533a\u95f4\u548c**\uff09\uff0c\u6709\u6570\u5c31\u7f29\u5c0f\u53f3\u7aef\u70b9\uff08\u533a\u95f4\u548c**\u4e0d\u4e3a\u96f6**\uff09\uff0c\u5426\u5219\u589e\u5927\u5de6\u7aef\u70b9\n\n**\u65e0\u89e3**\u60c5\u51b5\u5c31\u662f\u6709\u4e00\u5934\u5976\u725b**\u521d\u59cb\u533a\u95f4\u548c\u4e3a0**\n\n\u4e0d\u8fc7multiset\uff0c\u786e\u5b9e\u65b9\u4fbf\u8bb8\u4e00\u4e9b\uff0c~~\u800c\u4e14\u5feb\u5f97\u591a~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n\n#define ri register int\n#define u long long\n\nnamespace opt {\n\n\tinline u in() {\n\t\tu x(0),f(1);\n\t\tchar s(getchar());\n\t\twhile(s<'0'||s>'9') {\n\t\t\tif(s=='-') f=-1;\n\t\t\ts=getchar();\n\t\t}\n\t\twhile(s>='0'&&s<='9') {\n\t\t\tx=(x<<1)+(x<<3)+s-'0';\n\t\t\ts=getchar();\n\t\t}\n\t\treturn x*f;\n\t}\n\n}\n\nusing opt::in;\n\n#define NN 200005\n\n#include<algorithm>\n\nnamespace mainstay {\n\n\tu N,M,ans(0),now(1),t[NN],cnt,len,pre[NN],w[NN<<1];\n\n\tstruct node {\n\t\tu x,y;\n\t} a[NN],b[NN];\n\n\tvoid add(const u &x,const u &y) {\n\t\tfor(ri i(x); i<=N+M; i+=i&-i) t[i]+=y;\n\t}\n\n\tu ask(const u &x) {\n\t\tu _re(0);\n\t\tfor(ri i(x); i>=1; i-=i&-i) _re+=t[i];\n\t\treturn _re;\n\t}\n\n\tinline bool cmp(const node &x,const node &y) {\n\t\treturn x.y>y.y;\n\t}\n\n\tvoid li_sanhua() {\n\t\tcnt=0;\n\t\tfor(ri i(1); i<=N; ++i) w[++cnt]=a[i].x;\n\t\tfor(ri i(1); i<=M; ++i) w[++cnt]=b[i].x;\n\t\tstd::sort(w+1,w+cnt+1),len=std::unique(w+1,w+cnt+1)-w-1;\n\t\tfor(ri i(1); i<=N; ++i) pre[std::lower_bound(w+1,w+len+1,a[i].x)-w]=a[i].x;\n\t\tfor(ri i(1); i<=M; ++i) pre[std::lower_bound(w+1,w+len+1,b[i].x)-w]=b[i].x;\n\t\tfor(ri i(1); i<=N; ++i) a[i].x=std::lower_bound(w+1,w+len+1,a[i].x)-w;\n\t\tfor(ri i(1); i<=M; ++i) b[i].x=std::lower_bound(w+1,w+len+1,b[i].x)-w;\n\t\tcnt=0;\n\t\tfor(ri i(1); i<=N; ++i) w[++cnt]=a[i].y;\n\t\tfor(ri i(1); i<=M; ++i) w[++cnt]=b[i].y;\n\t\tstd::sort(w+1,w+cnt+1),len=std::unique(w+1,w+cnt+1)-w-1;\n\t\tfor(ri i(1); i<=N; ++i) a[i].y=std::lower_bound(w+1,w+len+1,a[i].y)-w;\n\t\tfor(ri i(1); i<=M; ++i) b[i].y=std::lower_bound(w+1,w+len+1,b[i].y)-w;\n\t}\n\n\tinline void solve() {\n\t\tN=in(),M=in();\n\t\tfor(ri i(1); i<=N; ++i) a[i].x=in(),a[i].y=in();\n\t\tfor(ri i(1); i<=M; ++i) b[i].x=in(),b[i].y=in();\n\t\tli_sanhua(),std::sort(a+1,a+N+1,cmp),std::sort(b+1,b+M+1,cmp);\n\t\tfor(ri i(1); i<=N; ++i) {\n\t\t\twhile(b[now].y>=a[i].y) add(b[now].x,1),++now;\n\t\t\tu _re,_l(a[i].x),_r(N+M);\n\t\t\tif(!(ask(_r)-ask(_l-1))) {\n\t\t\t\tprintf(\"-1\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twhile(_l<=_r) {\n\t\t\t\tu mid(_l+_r>>1);\n\t\t\t\tif((ask(mid)-ask(_l-1))>0) _r=mid-1,_re=mid;\n\t\t\t\telse _l=mid+1;\n\t\t\t}\n\t\t\tans+=pre[_re],add(_re,-1);\n\t\t}\n\t\tstd::cout<<ans;\n\t}\n\n}\n\nint main() {\n\n\t//freopen(\"food.in\",\"r\",stdin);\n\t//freopen(\"food.out\",\"w\",stdout);\n\tstd::ios::sync_with_stdio(false);\n\tmainstay::solve();\n\n}\n```\n",
        "postTime": 1573110679,
        "uid": 113183,
        "name": "limi_sanhua",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2869 \u3010[USACO07DEC]\u7f8e\u98df\u7684\u98df\u8349\u52a8\u7269Gourmet Grazers\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\n\u5e94\u8be5\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u9898\u53ef\u4ee5\u7528\u8d2a\u5fc3\u3002\u6709\u4e24\u4e2a\u503c\u9700\u8981\u6ee1\u8db3\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u8be2\u95ee\u548c\u7267\u8349\u6309\u7167\u53e3\u611f\uff08\u7eff\u8272\u503c\uff09\u6392\u5e8f\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee(Ai,Bi)\uff0c\u53ea\u8981\u4ece\u53e3\u611f\u5927\u4e8e\u7b49\u4e8eBi\u7684\u7267\u8349\u4e2d\u9009\u51fa\u4ef7\u683c\u6700\u5c0f\u7684\u4e14\u5927\u4e8e\u7b49\u4e8eAi\u7684\u7267\u8349\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bc1\u660e\u662f\u6700\u4f18\u7684\u3002\u5982\u679c\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u7267\u8349\uff0c\u5c31\u662f\u65e0\u89e3\u3002\n\n\n\u7528multiset\u6765\u7ef4\u62a4\u7267\u8349\u7684\u4ef7\u683c\u5f88\u65b9\u4fbf\uff0c\u652f\u6301\u6240\u6709\u64cd\u4f5c\uff0c\u5f53\u7136\u4ef7\u683c\u53ef\u4ee5\u91cd\u590d\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(N\\log N)$\n\n\n## \u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005;\npair<int,int> cow[N],grass[N];\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        cin>>cow[i].second>>cow[i].first;\n    sort(cow+1,cow+n+1);\n    for(int i=1;i<=m;i++)\n        cin>>grass[i].second>>grass[i].first;\n    sort(grass+1,grass+m+1);\n    multiset<int> S;\n    int j=m;\n    long long ans=0;\n  //\u6ce8\u610f\u752864\u4f4d\u6574\u6570\u4fdd\u5b58\u7ed3\u679c\n    for(int i=n;i;i--)\n    {\n        for(;j&&grass[j].first>=cow[i].first;j--)\n            S.insert(grass[j].second);\n      //\u63d2\u5165\u53e3\u611f\u6ee1\u8db3\u8981\u6c42\u7684\u7267\u8349\n        multiset<int>::iterator it=S.lower_bound(cow[i].second);\n      //\u627e\u5230\u7b2c\u4e00\u4e2a\u4ef7\u683c\u7684\u5927\u4e8e\u7b49\u4e8eAi\u7684\u7267\u8349\n        if(it==S.end())\n        {\n            cout<<-1<<endl;\n            return 0;\n        }\n        ans+=*it;\n        S.erase(it);\n      //\u522b\u5fd8\u4e86\u5220\u9664\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1497495066,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2869 \u3010[USACO07DEC]\u7f8e\u98df\u7684\u98df\u8349\u52a8\u7269Gourmet Grazers\u3011"
    },
    {
        "content": "\u7528 `multiset` \u7684\u9898\u89e3\u5f88\u591a\u4e86\uff0c\u6765\u4e00\u53d1 `FHQTreap`\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u548c\u677f\u5b50\u9898\u76f8\u6bd4\u8fd9\u9898\u7684\u540e\u7ee7\u662f\u53ef\u4ee5\u5305\u542b\u672c\u8eab\u7684\uff0c\u6ce8\u610f\u4e00\u4e0b\u3002\n\n\u8d2a\u5fc3\u601d\u8def\u548c\u5176\u4ed6\u9898\u89e3\u4e00\u6837\u4e86\u3002~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u7684\u5e73\u8861\u6811\u8dd1\u5f97\u98de\u5feb\uff0c\u751a\u81f3\u8fdb\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u9875~~\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u5305\u542b\u4e86\u5e73\u8861\u6811\u677f\u5b50\uff1a\n\n```cpp\n/*Source:T1.\n**Coder:NemonadePanda\n**Powered By VS-Code*/\n#include<bits/stdc++.h>\ntypedef long long ll;\n#define pfor(i,x,y) for(register int i=x;i<=y;++i)\n#define mfor(i,x,y) for(register int i=x;i>=y;--i)\ntemplate<typename T=int>inline T read(){\n  T x=0;bool f=false;char c=getchar();\n  while(c<'0'||c>'9')f|=(c=='-'),c=getchar();\n  while(c>='0'&&c<='9')x=x*10+c-48,c=getchar();\n  return f?-x:x;}\ntemplate<typename T>inline void write(T x){\n  if(x<0){putchar('-');x=-x;}if(x/10)\n\twrite(x/10);putchar((x%10)^48);return;}\nusing std::max;using std::min;using std::abs;\nusing std::cin;using std::cout;using std::endl;\nconst int N=1e5+5,M=1e6+5,MOD=1e9+7,INF=0x3f3f3f3f;\n#define int long long\nstruct Grass{int cost,taste;}a[N],b[N];\ninline bool cmp(Grass a,Grass b){\n\treturn a.taste>b.taste;\n}\nint n,m,res;\ntemplate<typename T>struct FhqTreapNode{int lch,rch,size,key;T data;};\ntemplate<typename T>class FhqTreap{\nprivate:\n\tFhqTreapNode<T> t[N];int rt,tot,x,y,z;\n\tinline int Node(T d){t[++tot].data=d,t[tot].key=rand();t[tot].size=1;return tot;}\n\tinline void pushup(int p){t[p].size=t[t[p].lch].size+t[t[p].rch].size+1;return;}\n\tinline int data_(int p,int d){while(true){if(d==t[t[p].lch].size+1) return p;\n\t\tif(d<=t[t[p].lch].size) p=t[p].lch;else d-=t[t[p].lch].size+1,p=t[p].rch;}return 0;}\npublic:\n\tinline void split(int p,int &x,int &y,T d){\n\t\tif(!p){x=y=0;return;}if(t[p].data<=d) split(t[x=p].rch,t[p].rch,y,d);\n\t\telse split(t[y=p].lch,x,t[p].lch,d);pushup(p);return;}\n\tinline int merge(int x,int y){if(x==0||y==0) return x+y;\n\t\tif(t[x].key<t[y].key){t[x].rch=merge(t[x].rch,y);pushup(x);return x;}\n\t\telse{t[y].lch=merge(x,t[y].lch);pushup(y);return y;}return 0;}\n\tinline void insert(T d){split(rt,x,y,d);rt=merge(merge(x,Node(d)),y);return;}\n\tinline void erase(T d){split(rt,x,z,d),split(x,x,y,d-1);rt=merge(merge(x,merge(t[y].lch,t[y].rch)),z);return;}\n\tinline int rank(T d){split(rt,x,y,d-1);int res=t[x].size+1;rt=merge(x,y);return res;}\n\tinline T data(int d){return t[data_(rt,d)].data;}\n\tinline T pre(T d){split(rt,x,y,d-1);T res=t[data_(x,t[x].size)].data;rt=merge(x,y);return res;}\n\tinline T nxt(T d){split(rt,x,y,d-1/*\u8fd9\u91cc\u8981-1\u54e6*/);T res=t[data_(y,1)].data;rt=merge(x,y);return res;}\n};\nFhqTreap<int> set;\nsigned main(){\n\tn=read(),m=read();\n\tpfor(i,1,n) a[i].cost=read(),a[i].taste=read();\n\tpfor(i,1,m) b[i].cost=read(),b[i].taste=read();\n\tstd::sort(a+1,a+n+1,cmp);\n\tstd::sort(b+1,b+m+1,cmp);\n\tint p=1;set.insert(INF);\n\tpfor(i,1,n){\n\t\twhile(p<=m&&b[p].taste>=a[i].taste) set.insert(b[p++].cost);\n\t\tint it=set.nxt(a[i].cost);\n\t\tif(it==INF){puts(\"-1\");return 0;}\n\t\tres+=it;set.erase(it);\n\t}\n\tcout<<res;\n\treturn 0;\n}\n```",
        "postTime": 1681968337,
        "uid": 389797,
        "name": "NemonadePanda",
        "ccfLevel": 0,
        "title": "P2869 [USACO07DEC]Gourmet Grazers G"
    }
]