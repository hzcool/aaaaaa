[
    {
        "content": "\u5e26\u4fee\u6539\u7684\u83ab\u961f\uff0c\u548c\u539f\u7248\u83ab\u961f\u76f8\u6bd4\uff0c\u591a\u4e86\u4e00\u4e2a\u65f6\u95f4\u8f74\n\n\u539f\u7248\u83ab\u961f\u662f\u5c06\u533a\u95f4(l,r)\u89c6\u4e3a\u70b9(l,r)\uff0c\u5e26\u4fee\u6539\u7684\u5373\u52a0\u4e00\u7ef4\u65f6\u95f4\u8f74(l,r,t)\n\n\u5bf9\u4e8et\u8f74\u7684\u79fb\u52a8\u53ef\u4ee5\u4fdd\u5b58\u6bcf\u6b21\u4fee\u6539\uff0c\u5982\u679c\u4fee\u6539\u5728(l,r)\u95f4\u5219\u66f4\u65b0\n\n\u5206\u5757\u65b9\u6cd5\u53ef\u4ee5\u53c2\u7167\u539f\u7248\u83ab\u961f\uff0c\u5148\u5c06l\u5206\u5757\uff0c\u518d\u8bb2r\u5206\u5757\uff0c\u540c\u4e00\u5757\u7684\u6309t\u6392\u5e8f\n\n\u5757\u5927\u5c0f\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8124.png) \u53ef\u4ee5\u8fbe\u5230\u6700\u5feb\u7684\u7406\u8bba\u590d\u6742\u5ea6 ![](https://cdn.luogu.com.cn/upload/pic/8123.png) \uff0c\u8bc1\u660e\u5982\u4e0b\n\n\u8bbe\u5206\u5757\u5927\u5c0f\u4e3aa\uff0c\u83ab\u961f\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u4e3at\u8f74\u79fb\u52a8\uff0c\u540cr\u5757l,r\u79fb\u52a8\uff0cl\u5757\u95f4\u7684r\u79fb\u52a8\u4e09\u90e8\u5206\n\nt\u8f74\u79fb\u52a8\u7684\u590d\u6742\u5ea6\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8125.png) \uff0c\u540cr\u5757l,r\u79fb\u52a8\u590d\u6742\u5ea6\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8126.png) \uff0cl\u5757\u95f4\u7684r\u79fb\u52a8\u590d\u6742\u5ea6\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8127.png)\n\n\u4e09\u4e2a\u51fd\u6570max\u7684\u6700\u5c0f\u503c\u5f53a\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8124.png) \u53d6\u5f97\uff0c\u4e3a ![](https://cdn.luogu.com.cn/upload/pic/8123.png)\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\n#define go(a,b,c) for(int a=b;a>=c;a--)\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nconst int N=10001;\nint a[N],p[1000001],ans[N],divi;\nstruct nod{int pla,pre,suc;}cg[N];\nstruct node{int l,r,t,bel;}ls[N];\nint cmp(node a,node b){\n    if(a.l/divi!=b.l/divi)return a.l/divi<b.l/divi;\n    if(a.r/divi!=b.r/divi)return a.r/divi<b.r/divi;\n    return a.t<b.t; \n}\nint main(){\n    int n=read(),m=read(),ln=0,tn=0,l=1,r=0,t=0,num=0;\n    fo(i,1,n)a[i]=read();\n    fo(i,1,m){\n        scanf(\"\\n\");\n        if(getchar()=='R'){//\u5982\u679c\u8bfb\u5165\u4fee\u6539\u5219\u8bb0\u5f55\u4fee\u6539\u7684\u5730\u70b9\uff0c\u4fee\u6539\u524d\u7684\u6570\u5b57\u548c\u4fee\u6539\u540e\u7684\u6570\u5b57\n            ++tn;cg[tn].pla=read(),cg[tn].suc=read();\n            cg[tn].pre=a[cg[tn].pla];\n            a[cg[tn].pla]=cg[tn].suc;\n        } \n        else ls[++ln]=(node){read(),read(),tn,ln};\n    }\n    divi=ceil(exp((log(n)+log(tn))/3));//\u5206\u5757\u5927\u5c0f\n    go(i,tn,1)a[cg[i].pla]=cg[i].pre;\n    sort(ls+1,ls+ln+1,cmp);\n    fo(i,1,m){\n        while(ls[i].l<l)num+=!p[a[--l]]++;\n        while(ls[i].l>l)num-=!--p[a[l++]];//l\u79fb\u52a8\n        while(ls[i].r>r)num+=!p[a[++r]]++;\n        while(ls[i].r<r)num-=!--p[a[r--]];//r\u79fb\u52a8\n        while(ls[i].t<t){\n            int pla=cg[t].pla;\n            if(l<=pla&&pla<=r)num-=!--p[a[pla]];\n            a[pla]=cg[t--].pre;\n            if(l<=pla&&pla<=r)num+=!p[a[pla]]++;\n        };\n        while(ls[i].t>t){\n            int pla=cg[++t].pla;\n            if(l<=pla&&pla<=r)num-=!--p[a[pla]];\n            a[pla]=cg[t].suc;\n            if(l<=pla&&pla<=r)num+=!p[a[pla]]++;\n        };//t\u79fb\u52a8\n        ans[ls[i].bel]=num;\n    }\n    fo(i,1,ln)printf(\"%d\\n\",ans[i]); \n    return 0;\n}\n```",
        "postTime": 1505984320,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u8fd9\u91cc](http://www.cnblogs.com/zwfymqz/p/7154145.html)\n\n## pre\n\u5f88\u65e9\u4e4b\u524d\u5c31\u5b66\u4e60\u4e86\u83ab\u961f\u7b97\u6cd5\u3002\n\n\u8001\u5e08\u8bb2\u8bfe\u7684\u65f6\u5019\u5c31\u63d0\u5230\u8fc7\u5e26\u4fee\u6539\u83ab\u961f\u5728\u7ebf\u83ab\u961f\u6811\u4e0a\u83ab\u961f\u6811\u4e0a\u5e26\u4fee\u6539\u83ab\u961f\u2026\u2026\u4f46\u662f\u4e00\u76f4\u90fd\u6ca1\u6709\u505a\u5230\u8fc7\u6709\u5173\u7684\u9898\uff0c\n\n\u4eca\u5929\u6709\u5e78\u505a\u4e86\u4e00\u9053\u88f8\u7684\u5e26\u4fee\u6539\u83ab\u961f\u7684\u9898\uff0c\n\n\u90a3\u5c31\u6765\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u7684\u7ecf\u9a8c\n\n## \u5e26\u4fee\u6539\u7684\u83ab\u961f\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0c\u666e\u901a\u7684\u83ab\u961f\u7b97\u6cd5\u662f\u4e0d\u8d44\u74f7\u4fee\u6539\u64cd\u4f5c\u7684\uff0c\n\n\u4e0d\u8fc7\u540e\u4eba\u5bf9\u83ab\u961f\u7b97\u6cd5\u52a0\u4ee5\u6539\u8fdb\n\n\u53d1\u660e\u4e86\u8d44\u74f7\u4fee\u6539\u7684\u83ab\u961f\u7b97\u6cd5\n\n## \u601d\u8def\n\n\u5728\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u4fee\u6539\u64cd\u4f5c\u662f\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\u7684(\u5e9f\u8bdd)\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u907f\u514d\u4fee\u6539\u64cd\u4f5c\u5e26\u6765\u7684\u5f71\u54cd\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u628a\u67e5\u8be2\u64cd\u4f5c\u548c\u4fee\u6539\u64cd\u4f5c**\u5206\u522b**\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u5728\u8bb0\u5f55\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55**\u79bb\u672c\u6b21\u67e5\u8be2\u6700\u8fd1\u7684\u4fee\u6539**\u7684\u4f4d\u7f6e\n\n\n\u7136\u540e\u5957\u4e0a\u83ab\u961f\u7684\u677f\u5b50\uff0c\u4e0e\u666e\u901a\u83ab\u961f\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u4f60\u9700\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55**\u5f53\u524d\u5df2\u7ecf\u8fdb\u884c\u4e86\u51e0\u6b21\u4fee\u6539**\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u5982\u679c\u5f53\u524d\u6539\u7684\u6bd4\u672c\u6b21\u67e5\u8be2\u9700\u8981\u6539\u7684\u5c11\uff0c\u5c31\u6539\u8fc7\u53bb\n\n\u53cd\u4e4b\u5982\u679c\u6539\u591a\u4e86\u5c31\u6539\u56de\u6765\n\n \n\u8bf4\u7684\u542c\u7ed5\u53e3\u7684\n\n\u6bd4\u5982\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u8fdb\u884c\u4e863\u6b21\u4fee\u6539\uff0c\u672c\u6b21\u67e5\u8be2\u662f\u5728\u7b2c5\u6b21\u4fee\u6539\u4e4b\u540e\uff0c\u90a3\u6211\u4eec\u5c31\u6267\u884c\u7b2c4,5\u6b21\u4fee\u6539\n\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u4fee\u6539\u64cd\u4f5c\u5bf9\u7b54\u6848\u4ea7\u751f\u7684\u5f71\u54cd\u4e86\n\n\n## code\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=2*1e6+10;\ninline int read()\n{\n    char c=getchar();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0',c=getchar();}\n    return x*f;\n}\nint N,M;\nint a[MAXN],where[MAXN];\nstruct Query\n{\n    int x,y,pre,id;\n}Q[MAXN];\nint Qnum=0;\nstruct Change\n{\n    int pos,val;\n}C[MAXN];\nint Cnum=0;\nint color[MAXN],ans=0,base,out[MAXN];\nint comp(const Query &a,const Query &b)\n{\n    if(a.x!=b.x) return where[a.x]<where[b.x];\n    if(a.y!=b.y) return where[a.y]<where[b.y];\n    return a.pre<b.pre;\n}\nvoid Add(int val)\n{    \n    if(++color[val]==1) ans++;\n} \nvoid Delet(int val)\n{\n    if(--color[val]==0) ans--;\n}\nvoid Work(int now,int i)\n{\n    if(C[now].pos>=Q[i].x&&C[now].pos<=Q[i].y)//\u6ce8\u610f\uff1a\u53ea\u6709\u4fee\u6539\u5728\u67e5\u8be2\u7684\u533a\u95f4\u5185\u624d\u4f1a\u5bf9\u67e5\u8be2\u7684\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd \n    {\n        if( --color[a[C[now].pos]] == 0 ) ans--;\n        if( ++color[C[now].val] == 1)      ans++; \n    }\n    swap(C[now].val,a[C[now].pos]);\n    //\u8fd9\u91cc\u6709\u4e2a\u5f88\u5de7\u5999\u7684\u64cd\u4f5c\n    //\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c\uff0c\u4e0b\u4e00\u6b21\u9700\u8981\u4e3a\u7684\u989c\u8272\u662f\u672c\u6b21\u88ab\u6539\u53d8\u7684\u989c\u8272\n    //\u6bd4\u5982\uff0c\u6211\u628a\u989c\u82723\u6539\u4e3a\u4e867\uff0c\u90a3\u4e48\u518d\u8fdb\u884c\u8fd9\u6b21\u4fee\u6539\u7684\u65f6\u5019\u5c31\u662f\u628a7\u6539\u4e3a3\n    //\u6240\u4ee5\u76f4\u63a5\u4ea4\u6362\u4e24\u79cd\u989c\u8272\u5c31\u597d \n}\nvoid MoQueue()\n{\n    int l=1,r=0,now=0; \n    for(int i=1;i<=Qnum;i++)\n    {\n        while(l<Q[i].x)    Delet(a[l++]);\n        while(l>Q[i].x) Add(a[--l]);\n        while(r<Q[i].y) Add(a[++r]);\n        while(r>Q[i].y) Delet(a[r--]);//\u4ee5\u4e0a\u56db\u53e5\u4e3a\u83ab\u961f\u6a21\u677f \n        while(now<Q[i].pre) Work(++now,i);//\u6539\u5c11\u4e86\uff0c\u6539\u8fc7\u53bb \n        while(now>Q[i].pre) Work(now--,i);//\u6539\u591a\u4e86\uff0c\u6539\u56de\u6765 \n        out[Q[i].id]=ans;//\u7edf\u8ba1\u7b54\u6848 \n    }\n    for(int i=1;i<=Qnum;i++)\n        printf(\"%d\\n\",out[i]);\n}\nint main()\n{\n    N=read();M=read();\n    base=sqrt(N);\n    for(int i=1;i<=N;i++) a[i]=read(),where[i]=(i-1)/base+1;\n    while(M--)\n    {\n        char opt[5];\n        scanf(\"%s\",opt);\n        if(opt[0]=='Q')\n        {\n            Q[++Qnum].x=read();\n            Q[Qnum].y=read();\n            Q[Qnum].pre=Cnum;//\u522b\u5fd8\u4e86\u8bb0\u5f55\u6700\u8fd1\u7684\u4fee\u6539\u4f4d\u7f6e \n            Q[Qnum].id=Qnum;        \n        }\n        else if(opt[0]=='R')\n        {\n            C[++Cnum].pos=read();\n            C[Cnum].val=read();\n        }\n    }\n    sort(Q+1,Q+Qnum+1,comp);//\u7384\u5b66\u6392\u5e8f \n    MoQueue();\n    return 0;\n}\n```\n## \u8fb9\u754c\u95ee\u9898\n\u7531\u4e8e\u521a\u5f00\u59cb\u7684$now=0$\n\n\u6240\u4ee5\u9700\u8981\u5148\u589e\u540e\u6267\u884c\n\n\u64a4\u9500\u7684\u65f6\u5019\u9700\u8981\u5c06\u6700\u540e\u4e00\u6b21\u7684\u4fee\u6539\u64a4\u9500\u6389\n\n\u6240\u4ee5\u5148\u6267\u884c\u540e\u51cf\n",
        "postTime": 1514099819,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "## \u9898\u89e3 \u517c \u5b66\u4e60\u7b14\u8bb0\n\n\u660e\u663e\u7684\u4e00\u9053\u5e26\u4fee\u83ab\u961f\uff0c\u4e8e\u662f\u53bb\u8ba4\u771f\u5b66\u4e60\u4e86\u4e00\u756a\uff0c\u5bf9\u83ab\u961f\u4e5f\u6709\u4e86\u4e00\u4e9b\u65b0\u7684\u7406\u89e3\u3002\n\n**\u8fd9\u4e00\u5207\u7684\u4e00\u5207\uff0c\u90fd\u8981\u4ece\u6700\u521d\u7684\u95ee\u9898\u8bf4\u8d77\u2026\u2026**\n\n\u201c\u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u6709\u4e00\u4e2a\u5e8f\u5217\u2026\u2026\u201d\n\n\u5f53\u5e8f\u5217\u4e0a\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\uff0c\u4f8b\u5982\uff0c\u6c42\u533a\u95f4\u989c\u8272\u79cd\u6570\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5$O(n)$\u65f6\u95f4\u5185\u89e3\u51b3\u8fd9\u4e00\u4e2a\u5b64\u96f6\u96f6\u7684\u95ee\u9898\u3002\n\n\u4f46\u662f\uff0c\u5f53\u8be2\u95ee\u6570\u53d8\u6210\u4e86m\uff0c~~\u8fd9\u9898\u5c31\u53d8\u6210\u4e86[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)~~\uff0c\u6211\u4eec\u4e0d\u80fd\u603b\u662f\u4e00\u4e2a\u4e00\u4e2a\u6c42\uff0c\u660e\u663eTLE\u3002\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u60f3\u5230\uff0c\u7531\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\uff0c\u901a\u8fc7\u5bf9\u5de6\u53f3\u7aef\u70b9\u7684\u79fb\u52a8\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u51fa\u65b0\u7684\u89e3\u3002\n\n\u4ece`[l,r]`\u5230`[l+1,r]`\u3001`[l-1,r]`\u3001`[l,r+1]`\u3001`[l,r-1]`\u7684\u8f6c\u79fb\u90fd\u662f$O(1)$\u7684\uff0c\u6240\u4ee5\u2026\u2026**\u7b49\u7b49!**\n\n\u8981\u662f\u6211\u4eec\u628a\u4e2d\u62ec\u53f7\u6539\u6210\u5c0f\u62ec\u53f7\u2026\u2026\n\n`(l,r)->(l-1,r)(l+1,r)(l,r-1)(l,r+1)`\n\n\u8fd9\u4e0d\u5c31\u662f\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5417\uff01\n\n\u4e00\u4e0d\u505a\u4e8c\u4e0d\u4f11\uff0c\u628a\u5b83\u753b\u51fa\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/71501.png)\n\n\uff08\u56fe\u4e11\u8f7b\u55b7\u2026\uff09\n\n\u56fe\u4e2d\u56db\u4e2a\u7bad\u5934\u7684\u79fb\u52a8\u90fd\u662f\u53ef\u4ee5$O(1)$\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u4e24\u70b9\u4e4b\u95f4\u7684[**\u66fc\u54c8\u987f\u8ddd\u79bb**](https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB/743092?fr=aladdin)\u5c31\u662f\u4ece\u4e00\u4e2a\u72b6\u6001\u5230\u53e6\u4e00\u4e2a\u72b6\u6001\u6240\u9700\u8981\u7684\u6700\u5c0f\u632a\u52a8\n\n\uff08\u4e0d\u4e86\u89e3\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u540c\u5b66\u6233\u4e0a\u9762\u52a0\u7c97\u5b57\u4f53\uff09\n\n\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u7684\u67e5\u8be2\uff0c\u6700\u5feb\u7684\u529e\u6cd5\u5c31\u662f\u5728\u5750\u6807\u7cfb\u4e0a\u627e\u5230[\u66fc\u54c8\u987f\u6700\u5c0f\u751f\u6210\u6811](https://www.cnblogs.com/xzxl/p/7237246.html)\n\n~~\uff08\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u4f1a\u8fd9\u4e2a\u56e0\u4e3a\u592a\u9ebb\u70e6\u4e86\uff09~~\n\n\u4f60\u4e5f\u8bb8\u4f1a\u8bf4\uff1a\u201c\u6211\u4e0d\u4f1a\u554a\uff01\u201d\n\n**\u8fd9\u5b8c\u5168\u6ca1\u6709\u5173\u7cfb**\uff0c\u56e0\u4e3a\n\n~~\u6211\u4e5f\u4e0d\u4f1a~~\n\n\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u5fc5\u8981\u5f97\u5230\u6700\u4f73\u7b54\u6848\uff0c\u80fd\u5361\u8fc7\u53bb\u5c31\u591f\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u91c7\u7528\u5206\u5757\u7684\u60f3\u6cd5\uff0c\u5c06\u5176\u5206\u6210`(n/sz)`\u4e2a\u957f\u5ea6\u4e3a`sz`\u7684\u5757\uff0c\u5728\u6bcf\u4e00\u4e2a\u5757\u4e2d\u6309\u7167\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6765\u79fb\u52a8\n\n\u5c31\u50cf\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/71508.png)\n\n\u81f3\u5c11\u8fd9\u6837\u4e0d\u4f1a\u88ab\u5361\u6389\u2026\u2026\n\n\u81f3\u4e8e\u5757\u7684\u5927\u5c0f\uff1f$\\sqrt n$\u5457\u3002\n\n\uff08\u5b9e\u9645\u4e0a\u4e25\u8c28\u7684\u8bf4\uff0c\u5e94\u8be5\u662f$\\dfrac {n}{\\sqrt {m}}$\uff0c\u5177\u4f53\u4e3a\u5565\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u7814\u7a76\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\u5757\u7684\u5927\u5c0f$\\sqrt n$\u8db3\u77e3\uff0c\u56e0\u6b64\u4e0d\u5728\u6b64\u4ecb\u7ecd\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8bb2\u597d\u4e86\u672c\u9898\u2026\u2026\u7684\u524d\u7f6e\u90e8\u5206\u2026\u2026\n\n\u597d\u4e86\uff01\u73b0\u5728\u6211\u4eec\u5728\u8fd9\u91cc\u52a0\u5165\u4e86\u4fee\u6539\uff0c\u201c\u6211\u8be5\u600e\u4e48\u529e\u5462qwq\u201d\n\n\u53ef\u4ee5\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u5e8f\u5217\u7684\u503c\u662f\u968f\u7740**\u65f6\u95f4**\u800c\u53d8\u5316\u7684\n\n\u90a3\u6211\u4eec\u5c31\u5728\u5750\u6807\u7cfb\u4e0a\u518d\u52a0\u4e0a\u4e00\u4e2a\u65f6\u95f4\u7ef4\u5ea6\uff0c\u7528`(l,r,t)`\u6765\u8868\u793a\u4e00\u4e2a\u67e5\u8be2\n\n![](https://cdn.luogu.com.cn/upload/pic/71519.png)\n\n\u2191\u5927\u6982\u5c31\u662f\u8fd9\u6837\n\n\u5f88\u660e\u663e\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u6309\u7167`l`\u4e0e`r`\u5206\u5757\uff0c\u5728\u540c\u4e00\u5757\u5185\u7684\u8be2\u95ee\u6309\u7167t\u4ece\u5c0f\u5230\u5927\u5b8c\u6210\u3002\u5757\u7684\u5927\u5c0f\u5c31\u662f${\\sqrt [3] {n^{2}}}=n^{0.6666...}$\n\n\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8fd8\u662f\u770b\u522b\u7684\u9898\u89e3\u5427\uff0c\u7a9d\u592a\u83dc\u5ed6\uff09\n\n\u6240\u4ee5\u603b\u7684\u6765\u8bf4\uff0c\u53ea\u9700\u8981\u5728\u539f\u6709\u7684\u666e\u901a\u83ab\u961f\u4e0a\u5728\u52a0\u4e00\u4e2a\u65f6\u95f4\u7ef4\u5ea6\u5c31\u53ef\u4ee5\u4e86\n\n$Code\\ Below$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 233333\n#define M 1111111\n\nint sum, cnt[M], a[N], ans[N], cntq = 0, cntr = 0, n, m, sz;\n\nstruct ques\n{\n\tint l, r, t, id;\n} qq[N], qr[N];//\u4e24\u4e2a\u6570\u7ec4\u5206\u89e3\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8be2\u95ee\u4ee5\u53ca\u4fee\u6539\u7684\u72b6\u6001\n\ninline void add(int x)\n{\n\tsum += !cnt[x]++;\n}\n\ninline void del(int x)\n{\n\tsum -= !--cnt[x];\n}\n\n//add\u4e0edel\u662f\u666e\u901a\u83ab\u961f\u539f\u6709\u64cd\u4f5c\n\ninline void upd(int x, int t)//upd\u662f\u5bf9\u4e8e\u65f6\u95f4\u4e0a\u7684\u53d8\u5316\u6240\u9020\u6210\u53d8\u5316\u7684\u7ef4\u62a4\n{\n\tif (qq[x].l <= qr[t].l && qr[t].l <= qq[x].r)\n\t{\n\t\tdel(a[qr[t].l]);\n\t\tadd(qr[t].r);\n\t} //\u5982\u679c\u8fd9\u4e2a\u4fee\u6539\u7684\u503c\u5728[l,r]\u533a\u95f4\u5185\uff0c\u5219\u5176\u53d8\u5316\u5c06\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\n\tswap(a[qr[t].l], qr[t].r);//\u56e0\u4e3a\u4fee\u6539\u540e\u7684\u4e0b\u4e00\u6b21\u64cd\u4f5c\u4e00\u5b9a\u76f8\u53cd(\u5373\u4fee\u6539\u8be5\u4f4d\u7f6e->\u8fd8\u539f\u8be5\u4f4d\u7f6e->\u4fee\u6539\u8be5\u4f4d\u7f6e...\u5982\u6b64\u5faa\u73af)\uff0c\u6240\u4ee5\u53ea\u9700\u4ea4\u6362\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u5199\u4e24\u4e2a\u51fd\u6570\n}\n\nbool cmp (const ques &a, const ques &b)\n{\n\treturn a.l / sz == b.l / sz ? a.r / sz == b.r / sz ? a.t < b.t : a.r < b.r : a.l < b.l;\n}//\u9b54\u6539\u7248cmp\uff0c\u9700\u8981\u5224\u65adt\u7684\u5927\u5c0f\n\nint main()\n{\n\tcin >> n >> m; sz = pow(n, 0.666);//\u8bbe\u7f6e\u5757\u7684\u5927\u5c0f\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", a + i);\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tchar op[5];\n\t\tint l, r;\n\t\tscanf(\"%s%d%d\", op, &l, &r);\n\t\tif (op[0] == 'Q') ++cntq, qq[cntq].id = cntq, qq[cntq].l = l, qq[cntq].r = r, qq[cntq].t = cntr;//\u8be2\u95ee\u7684\u65f6\u95f4\u5373\u4e3a\u8be5\u8be2\u95ee\u4ee5\u524d\u5df2\u7ecf\u6267\u884c\u4e86\u591a\u5c11\u6b21\u4fee\u6539\u64cd\u4f5c\n\t\telse qr[++cntr].l = l, qr[cntr].r = r;\n\t}\n\tsort(qq + 1, qq + cntq + 1, cmp);\n\tint lcur = 1, rcur = 0, tcur = 0;\n\tfor (int i = 1; i <= cntq; i++)\n\t{\n\t\twhile (lcur > qq[i].l) add(a[--lcur]);\n\t\twhile (lcur < qq[i].l) del(a[lcur++]);\n\t\twhile (rcur > qq[i].r) del(a[rcur--]);\n\t\twhile (rcur < qq[i].r) add(a[++rcur]);\n\t\twhile (tcur < qq[i].t) upd(i, ++tcur);\n\t\twhile (tcur > qq[i].t) upd(i, tcur--);//\u589e\u52a0t\u8f74\u4e0a\u7684\u79fb\u52a8\n\t\tans[qq[i].id] = sum;//\u5f97\u5230\u6700\u7ec8\u7b54\u6848\n\t}\n\tfor (int i = 1; i <= cntq; i++) printf(\"%d\\n\", ans[i]);\n\treturn 0;//\u7ed3\u675f&AC!\n}\n```\n\u6c42\u8d5eQwQ\n\n\u987a\u4fbf\u65e0\u803b\u5730\u6253\u4e2aAD\uff1a[$My Blog$](https://www.luogu.org/blog/IAMZJD/)",
        "postTime": 1565599310,
        "uid": 36908,
        "name": "Gu_Pigeon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "[\u8fd9\u9898\u7adf\u7136\u6ca1\u6709\u6811\u5957\u6811\u9898\u89e3\uff1f](http://www.cnblogs.com/xzz_233/p/8321150.html)\n\n\n\u5f88\u4e45\u4ee5\u524d\u5199\u7684\uff0c\u4f46\u56e0\u4e3a\u62ff\u6765\u51fa\u9898\u4e00\u76f4\u6ca1\u6562FA\u9898\u89e3\u3002\u3002\u3002\n\n\n\u8fd9\u662f\u4e00\u4efd\u6811\u5957\u6811\u7684\u9898\u89e3\uff0cn,m<=50000\u5e94\u8be5\u662f\u53ef\u4ee5\u8dd1\u7684\u3002\n\n\n[HH\u7684\u9879\u94fe\u9898\u89e3](http://www.cnblogs.com/xzz_233/p/cogs421.html)\n\n\n\u5728\u90a3\u4efd\u9898\u89e3\u91cc\u6211\u5199\u4e86\u6811\u5957\u6811\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u8981\u6765\u5199\u8fd9\u9053\u9898\u61d2\u5f97\u6539\u4e86\u3002\u3002\u3002\u3002\n\n\n\u9996\u5148\u7ef4\u62a4100000\u9897set\uff0c\u6bcf\u4e2aset\u91cc\u7684\u70b9\u989c\u8272\u4e00\u6837\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7684\u6c42\u51fa\u540c\u79cd\u989c\u8272\u7684\u524d\u9a71\u540e\u7ee7\u548c\u4fee\u6539\n\n\n\u7136\u540e\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff0c\u4fee\u6539\u7684\u8bdd\u641e\u51falst\u503c\u5c31\u53ef\u4ee5\u8fa3\n\n\n```cpp\n// It is made by XZZ\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<algorithm>\n#include<set>\n#define il inline\n#define rg register\n#define vd void\n#define sta static\ntypedef long long ll;\ntypedef const int& fast;\nusing namespace std;\nil int gi(){\n    rg int x=0,f=1;rg char ch=getchar();\n    while(ch<'0'||ch>'9')f=ch=='-'?-1:f,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nconst int maxn=10000;\nint n,m;\nnamespace Tree{\n    namespace SGT{\n        const double alpha=0.7233333;\n        int root[1000001],id,val[maxn*50],ch[maxn*50][2],siz[maxn*50],cover[maxn*50],b[maxn*50];\n        bool del[maxn*50];\n        il int newnode(int _val){val[++id]=_val,ch[id][0]=ch[id][1]=0,siz[id]=cover[id]=1;return id;}\n        il vd dfs(const int&rt){\n            if(!rt)return;\n            dfs(ch[rt][0]);\n            if(!del[rt])b[++b[0]]=rt;\n            dfs(ch[rt][1]);\n        }\n        il int divide(int l,int r){\n            if(l>r)return 0;\n            int mid=(l+r)>>1;\n            ch[b[mid]][0]=divide(l,mid-1);\n            ch[b[mid]][1]=divide(mid+1,r);\n            siz[b[mid]]=siz[ch[b[mid]][0]]+siz[ch[b[mid]][1]]+!del[b[mid]];\n            cover[b[mid]]=cover[ch[b[mid]][0]]+cover[ch[b[mid]][1]]+1;\n            return b[mid];\n        }\n        il vd rebuild(int&rt){b[0]=0;dfs(rt);rt=divide(1,b[0]);}\n        il int*_Insert(int&rt,fast num){\n            if(!rt){rt=newnode(num);return NULL;}\n            ++siz[rt],++cover[rt];\n            int*ret=_Insert(ch[rt][num>=val[rt]],num);\n            if(max(cover[ch[rt][0]],cover[ch[rt][1]])>alpha*cover[rt])ret=&rt;\n            return ret;\n        }\n        il vd Insert(fast y,fast x){int*ls=_Insert(root[y],x);if(ls)rebuild(*ls);}\n        il int Rank(fast y,fast x){\n            int ret=1,now=root[y];\n            while(now)\n                if(x<=val[now])now=ch[now][0];\n                else ret+=siz[ch[now][0]]+!del[now],now=ch[now][1];\n            return ret;\n        }\n        il vd _Delete(fast y,int k){\n            int now=root[y];\n            while(now){\n                --siz[now];\n                if(!del[now]&&k==siz[ch[now][0]]+1){del[now]=1;return;}\n                if(k<=siz[ch[now][0]])now=ch[now][0];\n                else k-=siz[ch[now][0]]+!del[now],now=ch[now][1];\n            }\n        }\n        il vd Delete(fast y,fast x){\n            _Delete(y,Rank(y,x));\n            if(siz[root[y]]<cover[root[y]]*alpha)rebuild(root[y]);\n        }\n    }\n    il int lb(fast x){return x&-x;}\n    il vd Update(rg int x,fast y){if(!x)return;while(x<=n)SGT::Insert(x,y),x+=lb(x);}\n    il vd Update_(rg int x,fast y){if(!x)return;while(x<=n)SGT::Delete(x,y),x+=lb(x);}\n    il int Query(rg int l,rg int r,fast y){\n        int ret=0;\n        while(r)ret+=SGT::Rank(r,y+1)-1,r-=lb(r);\n        --l;while(l)ret-=SGT::Rank(l,y+1)-1,l-=lb(l);\n        return ret;\n    }\n}\nnamespace Set FA\u2642Q{\n    set<int>st[1000001];\n    il vd del(fast x,fast y){st[x].erase(st[x].find(y));}\n    il vd ins(fast x,fast y){st[x].insert(y);}\n    il pair<int,int>find(fast x,fast y){\n        set<int>::iterator it=st[x].find(y);\n        pair<int,int>ret=make_pair(0,0);\n        if(it!=st[x].begin())--it,ret.first=*it,++it;\n        ++it;if(it!=st[x].end())ret.second=*it;\n        return ret;\n    }\n}\nint num[maxn],__lst[1000001];\nint main(){\n    n=gi();m=gi();\n    for(rg int i=1;i<=n;++i)num[i]=gi(),Tree::Update(i,__lst[num[i]]),Set::ins(num[i],i),__lst[num[i]]=i;\n    int x,y;pair<int,int>s;char opt[10];\n    while(m--){\n        scanf(\"%s\",opt),x=gi(),y=gi();\n        if(opt[0]=='Q')printf(\"%d\\n\",Tree::Query(x,y,x-1));\n        else{\n            s=Set::find(num[x],x);\n            Tree::Update_(x,s.first),Tree::Update_(s.second,x),Tree::Update(s.second,s.first);\n            Set::del(num[x],x),Set::ins((num[x]=y),x);\n            s=Set::find(num[x],x);\n            Tree::Update_(s.second,s.first),Tree::Update(s.second,x),Tree::Update(x,s.first);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1516437701,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    },
    {
        "content": "\u524d\u4e24\u5929\u5b66\u83ab\u961f\u7684\u65f6\u5019\uff0c\u5728\u4f59\u59da\u96c6\u8bad\u7684\u597d\u770b\u5c0f\u59d0\u59d0\u7ed9\u5c0f\u840c\u65b0\u63a8\u8350\u4e86\u4e00\u9053\u5e26\u4fee\u83ab\u961f\u9898\u3002\n\n\u5f53\u65f6\u89c9\u5f97\u7528\u83ab\u961f\u5199\u5e94\u8be5\u4e0d\u662f\u5f88\u96be\uff0c\u5c31\u653e\u4e0b\u4e86\u4e00\u76f4\u6ca1\u5199\u3002\u6ca1\u60f3\u5230\u4eca\u5929\u8bb2\u8bfe\u7684\u597d\u770b\u5b66\u59d0\u5c31\u628a\u8fd9\u4e2a\u9898\u5e03\u7f6e\u51fa\u6765\u4e86$qwq$\u3002\n\n\u672c\u6765\u51c6\u5907\u8001\u8001\u5b9e\u5b9e\u5199\u5e26\u4fee\u83ab\u961f\uff0c\u7ed3\u679c\u5728\u67d0$blog$\u4e0a\u770b\u5230\u4e00\u7bc7\u9898\u89e3\u8bf4\u53ef\u4ee5\u79bb\u6563\u5316$+$\u66b4\u529b\u3002\u7136\u540e\u5c31$attempt$\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd8\u771f\u7684\u80fd\u8fc7\u3002\n\n\u53bb\u5411\u5c0f\u59d0\u59d0\u70ab\u8000\u4e86\u4e00\u4e0b\u7ed3\u679c\u88ab\u5632\u8bbd\u4ea4\u4f60\u5495\u4f1a\u6302\uff0c\u987a\u5e26\u88ab\u5c0f\u59d0\u59d0\u518d\u6b21\u6559\u80b2\u4e86\u4e00\u756a\u8981\u597d\u597d\u5199\u83ab\u961f\u3002\n\n\u4f60\u5495\u6570\u636e\u6709\u52a0\u5f3a\uff0c\u521a\u5f00\u59cb\u7206\u5f69\u8679\uff0c$RE + TLE + WA$\uff0c\u6700\u540e\u6570\u7ec4\u5f00\u5927\uff0c\u52a0\u4e2a\u5feb\u8bfb\uff0c\u5438\u4e2a\u6c27\u6c14\uff0c$cout$\u6539\u6210$printf$\u5c31\u5361\u8fc7\u53bb\u4e86\uff08\u5176\u5b9e\u4e5f\u4e0d\u7b97\u5361\u5566\uff0c\u53ea\u7528\u4e86\u4e0d\u5230\u4e00\u534a\u7684\u65f6\u95f4\uff09\n\n _~~\u7136\u540e\u6210\u529f\u5730\u4fd8\u83b7\u4e86\u5c0f\u59d0\u59d0\u82b3\u5fc3\uff0c\u5e94\u5979\u7684\u8981\u6c42\u624d\u6765\u5199\u7684\u9898\u89e3[\u5927\u96fe]~~_ \n\n**\u597d\u4e86\u8fdb\u5165\u6b63\u9898**\uff08\u524d\u9762\u8bb2\u90a3\u4e48\u591a\u53ea\u662f\u4e3a\u4e86\u8ba9\u5404\u4f4d$dalao$\u6ce8\u610f\u5230\u8fd9\u7bc7\u66b4\u529b$qwq$\uff09\n\n\u8fd9\u7bc7\u66b4\u529b\u548c\u5916\u9762\u90a3\u4e9b\u5996\u8273\u66b4\u529b\u53ef\u4e0d\u4e00\u6837\uff08\u624b\u52a8\u72d7\u5934\uff09\u3002\n\n\u5927\u4f53\u601d\u8def\u561b\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u66b4\u529b\u8fd8\u9700\u8981\u4ec0\u4e48\u601d\u8def\u3002\u5728\u7ebf\u505a\uff0c\u5982\u679c\u8981\u6c42\u4fee\u6539\u5c31\u76f4\u63a5\u4fee\u6539\uff0c\u5982\u679c\u8981\u8be2\u95ee\u5c31\u4ece$l\\longrightarrow r$\u626b\u4e00\u904d\uff0c$bool$\u4e00\u4e2a$vis$\u6570\u7ec4\u8bb0\u5f55\u626b\u5230\u7684\u6570\u51fa\u73b0\u4e86\u6ca1\u6709\uff0c\u5982\u679c\u626b\u5230\u7684\u6570\u6ca1\u51fa\u73b0\u90a3\u4e48$vis$\u6539\u4e3a$true$\uff0c\u7136\u540e$ans$++\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5b50\u4f1a$T$\u98de\u6389\uff0c\u6240\u4ee5\u8981\u52a0\u4e24\u4e2a\u5c0f\u4f18\u5316\uff0c\u4e0d\u52a0\u4e5f\u80fd\u62ff\u9ad8\u5206\u4f46\u662f\u6ca1\u529e\u6cd5$AC$\u3002\uff08\u6ca1\u529e\u6cd5$AC\\Longleftrightarrow$\u4e0d\u80fd\u5f97\u5230\u5c0f\u59d0\u59d0\u7684\u5938\u8d5e$qwq$\uff09\n  \n  - \u79bb\u6563\u5316\uff0c\u4e0d\u9700\u8981$sort + unique$\uff0c\u53ea\u9700\u8981\u989d\u5916\u5f00\u4e2a\u6570\u7ec4\u590d\u5236\u4e00\u4e0b\u5373\u53ef\uff0c\u7b80\u5355\u7c97\u66b4\uff08\u4e0d\u7136\u600e\u4e48\u53eb\u66b4\u529b\uff09\n  \n  - \u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u66b4\u529b\u67e5\u8be2$l \\longrightarrow r$\u7684\u65f6\u5019\u90fd\u9700\u8981$memset$\u4e00\u904d$vis$\u6570\u7ec4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u6807\u53f7\u6cd5\uff0c\u5373\u626b\u7684\u8fc7\u7a0b\u4e2d\u82e5$vis[a[ j ]]$\u8fd8\u4e0d\u662f$i$\u5c31\u628a\u4ed6\u8d4b\u6210$i$\uff0c\u5e76\u628a$ans$\u52a0\u4e00\u3002\n  \n  \u522b\u7684\u5c31\u771f\u7684\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\uff0c\u66b4\u529b\u5373\u53ef\u3002\n  \n  \u9644\u4e0a$AC$\u4ee3\u7801\uff0c\u6570\u7ec4\u5f00\u7684\u6bd4\u8f83\u5306\u5fd9\uff0c\u53ef\u80fd\u5f00\u5927\u4e86\u3002\u8bb0\u5f97\u5438\u6c27\uff0c\u4e0d\u7136$90$\u3002\n  \n  ```cpp\n// luogu-judger-enable-o2\n#include<stdio.h>\n#define maxn 10000005\n#define maxm 100005\nusing namespace std;\nint n, m, l, r, ans, cnt = 0;\nint a[maxn], b[maxm];\nint vis[maxm + 10000];\nchar c;\ninline int read() {\n    int s = 0, w = 1; \n    char ch = getchar();\n    while( ch < '0' || ch > '9' ) {\n        if( ch == '-' ) w = -1;\n        ch = getchar();\n    }\n    while( ch >= '0' && ch <= '9' ) {\n        s = s * 10 + ch - '0';\n        ch = getchar();\n    }\n    return s * w;\n} \nint main() {\n    n = read(); m = read();\n    for( int i = 1; i <= n; i ++ ) {\n        int o = read();\n        if( !a[o] ) a[o] = ++ cnt;\n        b[i] = a[o];\n    }\n    for( int i = 1; i <= m; i ++ ) {\n        c = ' ';\n        while( c != 'Q' && c != 'R' ) c = getchar();\n    \tl = read(); r = read();\n    \tif( c == 'R' ) {\n    \t\tif( !a[r] ) a[r] = ++ cnt;\n    \t\tb[l] = a[r];\n    \t\tcontinue;\n        }\n        ans = 0;\n        for( int j = l; j <= r; j ++ ) {\n            if( vis[b[j]] != i ) {\n                ans ++;\n                vis[b[j]] = i;\n            }\n        }\n        printf( \"%d\\n\", ans );\n    }\n}\n```\n",
        "postTime": 1563423039,
        "uid": 135655,
        "name": "Lauzun",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37\u2014P1903\u2014[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217 \u79bb\u6563\u5316+\u66b4\u529b\u4f18\u5316"
    },
    {
        "content": "\u8fd9\u4f30\u8ba1\u662f\u4e00\u4e2a\u6bd4\u66b4\u529b\u590d\u6742\u5ea6\u8fd8\u52a3\u7684\u505a\u6cd5\u2026\u2026\r\n\r\n\r\n\u76f4\u63a5\u5927\u529b\u5206\u5757\uff0c\u5bf9\u6bcf\u4e2a\u5757\u7ef4\u62a4bitset\r\n\r\n\r\n\u4fee\u6539\u76f4\u63a5\u505a\uff0c\u67e5\u8be2\u76f4\u63a5\u5408\u5e76bitset\r\n\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f$O(n^2/w)$\r\n\r\n\r\n\u7136\u540e\u5361\u7740\u8fc7\u53bb\u4e86\u3002\u3002\u3002\r\n\r\n```cpp\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <ctime>\r\n#include <map>\r\n#include <queue>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <climits>\r\n#include <set>\r\n#include <vector>\r\n#include <bitset>\r\nusing namespace std;\r\ninline int read(){\r\n    int k=0,f=1;char ch=getchar();\r\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\r\n    while(ch>='0'&&ch<='9'){k=k*10+ch-'0';ch=getchar();}\r\n    return k*f;\r\n}\r\ninline void write(int x){\r\n    if(x<0)putchar('-'),x=-x;\r\n    if(x>9)write(x/10);putchar(x%10+'0');\r\n}\r\ninline void writeln(int x){\r\n    write(x);puts(\"\");\r\n}\r\nstruct ppap{int op,x,y;}q[100010];\r\nbitset<20010>r[110],ans;\r\nint n,m,a[100010],b[100010],p[100010];\r\nint k[110][20010];\r\nint main()\r\n{\r\n    n=read();m=read();\r\n    int P=sqrt(n);\r\n    for(int i=1;i<=n;i++){\r\n        a[i]=b[i]=read();\r\n        p[i]=(i-1)/P+1;\r\n    }\r\n    int cnt=n;\r\n    for(int i=1;i<=m;i++){\r\n        char c[5];scanf(\"%s\",c);\r\n        q[i].op=(c[0]=='R');\r\n        q[i].x=read();q[i].y=read();\r\n        if(q[i].op)b[++cnt]=q[i].y;\r\n    }\r\n    sort(b+1,b+cnt+1);cnt=unique(b+1,b+cnt+1)-b-1;\r\n    for(int i=1;i<=n;i++){\r\n        a[i]=lower_bound(b+1,b+cnt+1,a[i])-b;\r\n        k[p[i]][a[i]]++;if(k[p[i]][a[i]]==1)r[p[i]][a[i]]=1;\r\n    }\r\n    for(int i=1;i<=m;i++){\r\n        int x=q[i].x,y=q[i].y;\r\n        if(q[i].op){\r\n            y=lower_bound(b+1,b+cnt+1,y)-b;\r\n            k[p[x]][a[x]]--;if(k[p[x]][a[x]]==0)r[p[x]][a[x]]=0;\r\n            a[x]=y;k[p[x]][y]++;if(k[p[x]][y]==1)r[p[x]][y]=1;\r\n        }else{\r\n            ans.reset();\r\n            for(int j=p[x]+1;j<p[y];j++)ans|=r[j];\r\n            for(int j=x;p[j]==p[x]&&j<=y;j++)ans[a[j]]=1;\r\n            for(int j=y;p[j]==p[y]&&j>=x;j--)ans[a[j]]=1;\r\n            writeln(ans.count());\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1516865346,
        "uid": 5716,
        "name": "jzqjzq",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    },
    {
        "content": "**\u5e26\u4fee\u83ab\u961f\u677f\u5b50\u9898**\n***\n\u4ec0\u4e48\u662f\u5e26\u4fee\u83ab\u961f\u5462\uff1f~~\u5c31\u662f\u5e26\u4fee\u6539\u7684\u83ab\u961f\u5566~~\n\n\u4ec0\u4e48\uff0c\u4f60\u95ee\u4ec0\u4e48\u4e8b\u83ab\u961f\uff1f~~\u8bf7\u70b9\u51fb[\u8fd9\u4e2a](http://iwo.im/?q=%E8%8E%AB%E9%98%9F)~~\n***\n\u597d\u4e86\uff0c~~\u4f17\u6240\u5468\u77e5~~\uff0c\u666e\u901a\u83ab\u961f\u662f\u4e0d\u652f\u6301\u4fee\u6539\u7684\uff0c\u4e8e\u662f\u5c31\u51fa\u73b0\u7684\u652f\u6301\u4fee\u6539\u7684\u83ab\u961f\uff0c\u4e5f\u5c31\u662f\u5e26\u4fee\u83ab\u961f\u5566\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u5b9e\u73b0\u5462\uff1f~~\u5c31\u662f\u52a0\u4e00\u4e2a\u65f6\u95f4\u8f74\u5566\uff08\u9003~~\n\n\u63a5\u4e0b\u6765\u7528\u4ee3\u7801\u8bb2\u89e3\uff08\u56e0\u4e3a\u7406\u8bba\u8bb2\u4e0d\u6e05\u695a~~\u4ee3\u7801\u53ef\u80fd\u4e5f\u662f~~\uff09\n\n~~~cpp\n#include<bits/stdc++.h>\n#define RI register int\nusing namespace std;\n\nint in()\n{\n\tint aa=0;char cc=getchar();\n\tfor(;!isdigit(cc);cc=getchar());\n\tfor(;isdigit(cc);cc=getchar())aa=(aa<<1)+(aa<<3)+(cc&15);\n\treturn aa;\n}\n\nconst int M=1e6+5;\nconst int N=233333;\n\nstruct H\n{\n\tint l,r,t,id;\n}q[N];//\u8bb0\u5f55\u67e5\u8be2\u7684\u4fe1\u606f\n\nstruct HH\n{\n\tint id,col;\n}c[N];//\u8bb0\u5f55\u4fee\u6539\u7684\u4fe1\u606f\n\nchar op;\nint n,m;\nint size,now;\nint l,r,t,ql,qr,qt;\nint cnt_q=0,cnt_c=0;\nint a[N],cnt[M],be[N],ans[N];\n//\u662f\u4e0d\u662f\u5f88\u6709\u5c42\u6b21\u611f\uff1f\n\ninline int cmp(H x,H y)\n{\n\treturn x.l/size==y.l/size?(x.r/size==y.r/size?x.t<y.t:x.r<y.r):x.l<y.l;\n}\n\ninline void update(int l,int r,int x)\n{\n\tint id=c[x].id,&col=c[x].col;//\u51cf\u5c11\u7801\u91cf\uff08\u7b11\uff09\n\tif(id>=l && id<=r)//\u5982\u679c\u5f53\u524d\u8981\u66f4\u65b0\u7684\u70b9\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u5c31\u8fdb\u884c\u8ba1\u6570\u64cd\u4f5c\uff08\u6709\u70b9\u50cf\u7ebf\u6bb5\u6811\uff09\n\t{\n\t\tnow-=!--cnt[a[id]];\n\t\tnow+=!cnt[col]++;\n\t}\n\tswap(a[id],col);//\u65e0\u8bba\u662f\u5426\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u90fd\u8981\u4ea4\u6362\u4e24\u8005\u7684\u503c\uff0c\u4f7fa[id]\u53d8\u4e3a\u539f\u503c\u6216\u4fee\u6539\u540e\u7684\u503c\n}\n\nint main()\n{\n\tn=in(),m=in();size=pow(n,0.666);\n\tfor(RI i=1;i<=n;++i) a[i]=in();\n\tfor(RI i=1;i<=m;++i)\n\t{\n\t\top=getchar();\n\t\twhile(op!='Q' && op!='R') op=getchar();//\u8fd9\u4e2a\u5b57\u7b26\u7684\u8f93\u5165\u662f\u4e0d\u662f\u5f88\u5f3a\uff1f\uff08\u4e0d\u662f\u6211\u60f3\u7684\uff09 \n\t\tif(op=='Q')\n\t\t{\n\t\t\t++cnt_q;//\u8bb0\u5f55\u8981\u67e5\u8be2\u7684\u4e2a\u6570 \n\t\t\tq[cnt_q].l=in(),q[cnt_q].r=in();\n\t\t\tq[cnt_q].id=cnt_q,q[cnt_q].t=cnt_c;//t\u8bb0\u5f55\u5728\u8fd9\u4e4b\u524d\u6709\u51e0\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5373\u65f6\u95f4\n\t\t}else \n\t\t{\n\t\t\t++cnt_c;//\u8bb0\u5f55\u8981\u4fee\u6539\u7684\u4e2a\u6570 \n\t\t\tc[cnt_c].id=in(),c[cnt_c].col=in();\n\t\t}\n\t}\n\t\n\tsort(q+1,q+1+cnt_q,cmp);\n\t\n\tl=1,r=0,t=0,now=0;\n\tfor(RI i=1;i<=cnt_q;++i)\n\t{\n\t\tql=q[i].l,qr=q[i].r,qt=q[i].t;\n\t\twhile(l<ql) now-=!--cnt[a[l++]];//\u5e38 \n\t\twhile(l>ql) now+=!cnt[a[--l]]++;//\u89c4 \n\t\twhile(r<qr) now+=!cnt[a[++r]]++;//\u64cd \n\t\twhile(r>qr) now-=!--cnt[a[r--]];//\u4f5c \n\t\twhile(t<qt) update(ql,qr,++t);//t<qt\uff0c\u8bf4\u660e\u5728(t,qt)\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u5185\u6709\u9700\u8981\u4fee\u6539\u7684\u70b9\uff08\u5230\u4e86\u5b83\u4fee\u6539\u7684\u65f6\u95f4\uff09\u8fd8\u672a\u4fee\u6539\uff0c\u5728\u6b64\u66f4\u65b0\n\t\twhile(t>qt) update(ql,qr,t--);//t>qt\uff0c\u8bf4\u660e\u5728(qt,t]\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u5185\u6709\u4e0d\u9700\u8981\u4fee\u6539\u7684\u70b9\uff08\u672a\u5230\u5b83\u4fee\u6539\u7684\u65f6\u95f4\uff09\u7ed9\u4fee\u6539\u4e86\uff0c\u5728\u6b64\u66f4\u65b0 \n\t\tans[q[i].id]=now;//\u8bb0\u5f55\u7b54\u6848 \n\t}\n\t\n\tfor(RI i=1;i<=cnt_q;++i) printf(\"%d\\n\",ans[i]);\n\t\n\treturn 0;\n}\n~~~\n\u5173\u4e8e\u6392\u5e8f\u65b9\u6cd5\uff0c\u5c31\u662f\n>\u5982\u679c\u5de6\u7aef\u70b9\u5728\u540c\u4e00\u533a\u5757\u4e14\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u533a\u5757\uff0c\u5219\u6309\u65f6\u95f4\u6392\u5e8f\uff1b  \n\u5982\u679c\u5de6\u7aef\u70b9\u5728\u540c\u4e00\u533a\u5757\u800c\u53f3\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u533a\u5757\uff0c\u5219\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff1b  \n\u5982\u679c\u5de6\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u533a\u5757\uff0c\u5219\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\n\n\u7b80\u5355\u70b9\u8bf4\uff0c\u5c31\u662f\n>\u4ee5\u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u53f3\u7aef\u70b9\u6240\u5728\u5757\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u4ee5\u65f6\u95f4\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u4e2a\u4eba\u8ba4\u4e3a\u628a\u5b83\u4eec\u8fd9\u4e48\u7ffb\u8bd1\u7684\u8bdd\u6bd4\u8f83\u597d\u8bb0\n***\n\u5173\u4e8e\u533a\u5757\u7684\u5927\u5c0f\uff0c\u6709\u7bc7\u9898\u89e3\u8bc1\u660e\u662f\u53d6$ceil(exp((log(n)+log(cnt-q))/3))$\u65f6\u6700\u5feb,\u4f46\u662f\u6211\u5b9e\u6d4b\u53d6$n^{\\frac{2}{3}}$\u4f1a\u6bd4\u8f83\u5feb\uff08\u6211\u4e0d\u4f1a\u8bc1\u660e\uff0c~~\u6570\u5b66\u592a\u5f31~~\uff09\uff0c\u4f46\u53ef\u4ee5\u770b\u8fd9\u4e2a\u5927\u4f6c\u7684[\u535a\u5ba2](https://www.cnblogs.com/ouuan/p/MoDuiTutorial.html)\uff0c\u6709\u8bc1\u660e\uff08\u5927\u6982\u5728$\\frac{1}{3}$\u5904\uff09\n***\n\u6700\u540e\uff0c\u8fd9\u9898\u5361\u5e38\uff01\n>\u672c\u9898\u53ef\u80fd\u8f7b\u5fae\u5361\u5e38\u6570\n\n~~\u6211\u6000\u7591\u662f\u72c2\u5361\uff08\u6bd2\u7624cz\uff0c\u5361\u4e86\u4fe9\u83ab\u961f\u4e86\uff09\uff0c\u4e3a\u6b64\u6211\u8d21\u732e\u4e862\u9875\u7684\u8bc4\u6d4b\u8bb0\u5f55~~\uff0c\u5176\u5b9e\u4e5f\u662f\u56e0\u4e3a\u83ab\u961f\u7684\u590d\u6742\u5ea6\u4e0d\u591f\u4f18\u79c0\u3002\u5c3d\u7ba1\u5b83\u662f\u4f18\u96c5\u7684\u66b4\u529b\uff0c\u4f46\u4e5f\u625b\u4e0d\u4f4f$n,m<=133333$\u5440\uff0c\u5982\u679c\u662f$n,m<=88888$\u7684\u8bdd\u8fd8\u662f\u53ef\u4ee5\u4f18\u96c5\u7684\u8dd1\u8fc7\u7684\uff08\u6ca1\u6d4b\u8fc7\uff0c\u4f30\u4e2a\u559c\u5e86\u7684\u6570\uff09\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6765\u53e3\u6c27\u6c14\uff08\u8bdd\u8bf4lg\u7684\u6c27\u6c14\u8d28\u91cf\u771f\u7684\u597d\uff0c\u76f4\u63a5\u628a9.5s\u780d\u6210\u4e863.8s\uff0c\u624b\u52a8\u5438\u81ed\u6c27\u90fd\u6bd4\u4e0d\u8fc7\uff09\n***\n**\u5f69\u86cb\uff01**\u6709\u6ca1\u6709\u53d1\u73b0\u4ee3\u7801\u4e00\u5171\u6709$88$\u884c\uff08\u5305\u62ec\u6ce8\u91ca\u4f46\u4e0d\u5305\u62ec\u6ce8\u91ca\u70b8\u51fa\u7684\u884c\u6570\uff09\uff1f~~\u6211\u53ef\u80fd\u592a\u8ff7\u4fe1\u4e86~~",
        "postTime": 1571896485,
        "uid": 171014,
        "name": "R\u00b7Buffoon",
        "ccfLevel": 0,
        "title": "\u5e26\u4fee\u83ab\u961f/\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "\u5927\u66b4\u529b\u3002\n\nzkw\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u5f00\u4e00\u4e2abitset\u8bb0\u5f55\u8be5\u533a\u95f4\u91cc\u6709\u54ea\u4e9b\u6570\u3002\u4e3a\u4e86\u6570\u7684\u8303\u56f4\u4e0d\u5927\uff0c\u5f00\u4e00\u4e2amap\u6765\u5b9e\u65f6\u79bb\u6563\u5316\uff08\u53cd\u6b63\u79bb\u6563\u5316\u4e0d\u8981\u6c42\u5927\u5c0f\uff09\u3002\n\n\u6ca1\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O((n+m)\\log n*n/b)$\uff0c\u5176\u4e2d$b$\u662f\u5b57\u957f\uff0832\u621664\uff09\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <bitset>\n#include <map>\nconst int N = 12000;\nunsigned A[N];\nstd::bitset<N> B[32768];\nstd::bitset<N> ans;\nint L;\nvoid build(int n) {\n  L = 1;\n  while (L < n) L <<= 1;\n  for (int i = 0; i < L; ++i) {\n    B[i + L].reset();\n    B[i + L].set((unsigned)A[i]);\n  }\n  for (int i = L - 1; i; --i)\n    B[i] = B[i << 1] | B[i << 1 | 1];\n}\nvoid modify(int x, unsigned y) {\n  unsigned z = A[x];\n  if (z == y) return;\n  int i = x + L;\n  A[x] = y;\n  do {\n    B[i].set(y); i >>= 1;\n  } while (i && !B[i].test(y));\n  B[i = x + L].reset(z);\n  while (i > 1 && !B[i ^ 1].test(z))\n    B[i >>= 1].reset(z);\n}\nint query(int x, int y) {\n  ans.reset();\n  --x; ++y;\n  for (x += L, y += L; x != (y ^ 1); x >>= 1, y >>= 1) {\n    if (~x & 1) ans |= B[x ^ 1];\n    if (y & 1) ans |= B[y ^ 1];\n  }\n  return (int)ans.count();\n}\nunsigned get(int x) {\n  static unsigned p = 0;\n  static std::map<int, unsigned> M;\n  if (M.count(x)) return M[x];\n  return M[x] = p++;\n}\nchar s[10];\nint main() {\n  int n, q, x, y;\n  scanf(\"%d%d\", &n, &q);\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%d\", &x);\n    A[i] = get(x);\n  }\n  build(n + 2);\n  while (q--) {\n    scanf(\"%s%d%d\", s, &x, &y);\n    if (*s == 'R') modify(x, get(y));\n    else printf(\"%d\\n\", query(x, y));\n  }\n  return 0;\n}\n```\n\u4e0d\u8981\u55b7\u6211\uff0c\u6bd5\u7adf@huang\\_yue \u90fd\u628a***\u7eaf***\u66b4\u529b\u6254\u4e0a\u53bb\u4e86qwq\u3002\n",
        "postTime": 1514267786,
        "uid": 7868,
        "name": "_rqy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "\u7b97\u6cd5\u81ea\u7136\u4e24\u79cd\u2014\u2014\u6811\u5957\u6811\u548c\u5e26\u4fee\u83ab\u961f  \n|  | \u7a7a\u95f4 | \u65f6\u95f4 |\n| -----------: | -----------: | -----------: |\n| \u6811\u5957\u6811 | O($ nlogn^2 $) |O($ nlogn^2 $)  |\n|\u83ab\u961f| $ n$ | O($nsqrt(n)$) |  \n\u663e\u7136\u6811\u5957\u6811\u901f\u5ea6\u66f4\u5feb\uff0c\u83ab\u961f\u7a7a\u95f4\u66f4\u5c0f\uff0c\u53ef\u4ee5\u6839\u636e\u65f6\u7a7a\u9650\u5236\u914c\u60c5\u9009\u62e9  \n\u800c\u8fd9\u9053\u9898\u4e24\u4e2a\u90fd\u53ef\u4ee5\uff1a \n\n### \u6811\u5957\u6811\uff1a  \n\n\u7528set\u7ef4\u62a4\u4e00\u79cd\u989c\u8272\u4e0a\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c  \n\u518d\u7528\u524d\u65e0\u53e4\u4eba\u540e\u65e0\u6765\u8005\u7684bit+splay\u67e5\u8be2\n\n### code:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e+5;\nconst int M=N<<7;\nint rt[N<<2];\nint n,m,col[N];\nnamespace st\n{\n    set<int>s[1000001];\n    void del(int x,int y){s[x].erase(s[x].find(y));}\n    void ins(int x,int y){s[x].insert(y);}\n    pair<int,int> fd(int x,int y)\n    {\n        set<int>::iterator it=s[x].find(y);\n        pair<int,int> anss=make_pair(0,N-5);\n        if(it!=s[x].begin())it--,anss.first=*it,it++;\n        it++;\n        if(it!=s[x].end())anss.second=*it;\n        return anss;\n    }\n}\ninline int lb(int x){return x&-x;}\nnamespace sp\n{\n    int siz[M],c[M][2],fa[M],val[M],cnt;\n    inline void up(int x){siz[0]=0;siz[x]=siz[c[x][0]]+siz[c[x][1]]+1;}\n    inline int gs(int x){return x==c[fa[x]][1];}\n    inline void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],sx=gs(x),sy=gs(y);\n        fa[x]=z;c[z][sy]=x;\n        c[y][sx]=c[x][sx^1]; fa[c[x][sx^1]]=y;\n        fa[y]=x; c[x][sx^1]=y;\n        up(y);up(x);\n    }\n    inline void splay(int x,int &root)\n    {\n        while(fa[x])\n        {\n            int y=fa[x];\n            if(fa[y])\n            {\n                if(gs(y)==gs(x))rotate(y);\n                else rotate(x);\n            }\n            rotate(x);\n        }\n        root=x;\n    }\n    inline void Insert(int &now,int x)\n    {\n        if(!now)\n        {\n            now=++cnt;\n            val[now]=x;\n            siz[now]=1;\n            return ;\n        }\n        if(x<val[now])\n        {\n            Insert(c[now][0],x);\n            fa[c[now][0]]=now;\n        }\n        else\n        {\n            Insert(c[now][1],x);\n            fa[c[now][1]]=now;\n        }\n        up(now);\n    }\n    inline void ins(int x,int &now)\n    {\n        siz[0]=0;\n        Insert(now,x);\n        splay(cnt,now);\n    }\n    inline int smaller(int x,int now)\n    {\n        siz[0]=0;\n        if(now==0) return 0;\n        if(val[now]>x) return smaller(x,c[now][0]);\n        if(val[now]<x) return smaller(x,c[now][1])+siz[c[now][0]]+1;\n        return siz[c[now][0]];\n    }\n    inline int fd(int x,int now)\n    {\n        siz[0]=0;\n        if(now==0)return now;\n        if(val[now]<x)return fd(x,c[now][1]);\n        if(val[now]>x)return fd(x,c[now][0]);\n        return now;\n    }\n    inline void del(int x,int &root)\n    {\n        siz[0]=0;\n        x=fd(x,root);\n        siz[0]=0;\n        splay(x,root);\n        if(!c[x][0])\n        {\n            root=c[x][1];\n            fa[c[x][1]]=0;\n            siz[0]=0;\n            up(c[x][1]);\n            return ;\n        }\n        int now=c[x][0];\n        while(c[now][1])\n            now=c[now][1];\n        splay(now,root);\n        c[now][1]=c[x][1]; fa[c[x][1]]=now;\n        siz[0]=0;\n        up(now);\n    }\n}\nint la[1000001];\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>col[i];\n        for(int j=i;j<=n;j+=lb(j))\n            sp::ins(la[col[i]],rt[j]);\n        st::ins(col[i],i);\n        la[col[i]]=i;\n    }\n    char opt;\n    int x,y;\n    pair<int,int>ret;\n    while(m--)\n    {\n        cin>>opt>>x>>y;\n        int now=0,anss=0;\n        if(opt=='Q')\n        {\n            for(int j=y;j>0;j-=lb(j))\n                anss+=sp::smaller(x,rt[j]);\n            for(int j=x-1;j>0;j-=lb(j))\n                anss-=sp::smaller(x,rt[j]);\n            cout<<anss<<endl;\n        }\n        else\n        {\n            ret=st::fd(col[x],x);\n            for(int j=x;j<=n;j+=lb(j))\n                sp::del(ret.first,rt[j]);\n            for(int j=ret.second;j<=n;j+=lb(j))\n                sp::del(x,rt[j]),sp::ins(ret.first,rt[j]);\n            st::del(col[x],x);\n            st::ins(y,x);\n            col[x]=y;\n            ret=st::fd(y,x);\n            for(int j=x;j<=n;j+=lb(j))\n                sp::ins(ret.first,rt[j]);\n            for(int j=ret.second;j<=n;j+=lb(j))\n                sp::del(ret.first,rt[j]),sp::ins(x,rt[j]);\n        }\n    }\n    return 0;\n}\n\n```\n\n\n\n------------\n\n### \u5e26\u4fee\u6539\u83ab\u961f\uff1a\n\u5e26\u4fee\u6539\u7684\u52a0\u4e00\u7ef4\u65f6\u95f4\u8f74(l,r,t)   \n\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bb2\u7684\u5341\u5206\u8be6\u7ec6\u4e86\uff0c  \n\u5c31\u662f\u5728\u666e\u901a\u83ab\u961f\u4e0a\u52a0\u4e00\u4e2a\u6700\u8fd1\u7684\u4fee\u6539\u5373\u53ef  \n\u6211\u53ea\u662f\u66f4\u6b63\u4e00\u4e0b\u5757\u6700\u4f18\u5927\u5c0f\uff0c\n\u7406\u8bba\u6700\u4f18\u5e94\u662f pow(n,2.0/3.0)\n### code:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50005;\nint col[N],n,m,sum[1000005],be[N];\nint ANS,qnum,cnum,ans[N];\nstruct qs{\n    int l,r,t,id;\n}q[N];\nstruct cs{\n    int x,i;\n}c[N];\nbool cmp(qs x,qs y)\n{\n    if(be[x.l]!=be[y.l])return x.l<y.l;\n    if(be[x.r]!=be[y.r])return x.r<y.r;\n    return x.t<y.t;\n}\nvoid upd1(int x)\n{\n    if(!sum[col[x]])\n        ++ANS;\n    ++sum[col[x]];\n}\nvoid upd2(int x)\n{\n    --sum[col[x]];\n    if(!sum[col[x]])\n        --ANS;\n}\nint l,r,now;\nvoid change(int x)\n{\n    if(c[x].i<=r && c[x].i>=l)\n    {\n        --sum[col[c[x].i]];\n        if(!sum[col[c[x].i]])\n            --ANS;\n        if(!sum[c[x].x])\n            ++ANS;\n        ++sum[c[x].x];\n    }\n    swap(c[x].x,col[c[x].i]);\n}\nint main()\n{\n    cin>>n>>m;\n    int xx=pow(n,2.0/3.0);\n    char opt; \n    for(int i=1;i<=n;i++)\n    {\n        cin>>col[i];\n        be[i]=i/xx+1;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        cin>>opt;\n        if(opt=='Q')\n        {\n            ++qnum;\n            cin>>q[qnum].l>>q[qnum].r;\n            q[qnum].t=cnum;\n            q[qnum].id=qnum;\n        }\n        else\n        {\n            ++cnum;\n            cin>>c[cnum].i>>c[cnum].x;\n        }\n    }\n    sort(q+1,q+qnum+1,cmp);\n    l=r=ANS=now=0;\n    for(int i=1;i<=qnum;i++)\n    {\n        while(l<q[i].l)upd2(l++);\n        while(l>q[i].l)upd1(--l);\n        while(r>q[i].r)upd2(r--);\n        while(r<q[i].r)upd1(++r);\n        while(now<q[i].t)change(++now);\n        while(now>q[i].t)change(now--);\n        ans[q[i].id]=ANS;\n    }\n    for(int i=1;i<=qnum;i++)\n        cout<<ans[i]<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1543316145,
        "uid": 103990,
        "name": "asd_a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "## \u5927\u5bb6\u597d\uff0c \u849f\u84bb\u5c0fJf\u5f88\u559c\u6b22\u5206\u5757\uff0c \u4e8e\u662f\u5c31\u8bf4\u4e00\u4e0b\u65f6\u95f4\u4e3a (n+m) sqrt (n) \u7a7a\u95f4\u4e3a\u7ebf\u6027\u7684\u5728\u7ebf\u5206\u5757\u505a\u6cd5\u5427qwq  \n\n\u9996\u5148n^(5/3)\u7684\u66b4\u529b\u5206\u5757\u5e94\u8be5\u4e0d\u96be\u60f3\uff0c \u8bbe\u5757\u5927\u5c0f\u4e3aT\uff0c\u7ef4\u62a4\u6bcf\u4e24\u4e2a\u5757\u4e4b\u95f4\u7684\u7b54\u6848ans\uff0c\u518d\u7ef4\u62a4\u4e00\u4e0bcnt\uff08i, j\uff09\u8868\u793a\u524di\u4e2a\u5757\u4e2dj\u8fd9\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u67e5\u8be2\u65f6\u53ef\u4ee5\u5728T\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u6563\u5757\u7684\u4fe1\u606f\u7edf\u8ba1\uff1b \u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u4fee\u6539\uff08n/T\uff09^2\u7684ans\u3002 \u5f53T\u53d6\u5230n^(2/3)\u7684\u65f6\u5019\u590d\u6742\u5ea6\u4e3an^(5/3)\u3002 \u8fd9\u4e2a\u4e1c\u897f\u663e\u7136\u4e0d\u5982\u5e26\u4fee\u83ab\u961f\uff0c \u6240\u4ee5\u8981\u5bf9\u5176\u8fdb\u4e00\u6b65\u8fdb\u884c\u4f18\u5316\u3002\n\n### \u4f18\u5316\u65b9\u6848\uff1a\n\n\u8003\u8651\u5230\u4fee\u6539ans\u7684\u590d\u6742\u5ea6\u662f\u63a5\u8fd1On\u7ea7\u522b\u7684\uff0c \u4e14\u4e0d\u662f\u5f88\u597d\u4f18\u5316\uff0c \n\u6240\u4ee5\u8003\u8651\u7528\u591a\u4e2a\u4fee\u6539\u64cd\u4f5c\u6765\u5e73\u644a\u8fd9\u4e2a\u590d\u6742\u5ea6(\u5b9a\u671f\u91cd\u6784\uff09\n\n\u5177\u4f53\u505a\u6cd5\u662f\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e24\u4e2a\u5757\u4e2d\u7684\u7b54\u6848\uff0c  \u7136\u540e\u7528vector\u5b58\u4e00\u4e0b\u6bcf\u4e2a\u6570\u6bcf\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c \u6bcf\u4e2a\u4f4d\u7f6e\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5728\u5e8f\u5217\u4e2d\u7b2c\u51e0\u6b21\u51fa\u73b0\u7684\u3002 \u8fd9\u4e24\u4e2a\u4fe1\u606f\u90fd\u662fn\u7ea7\u522b\u7684\u3002\n\n> \u5bf9\u4e8e\u4e0d\u8d85\u8fc7sqrt\u6b21\u4fee\u6539\uff0c \u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u5f97\u5230\u7b54\u6848\u3002\n\n> \u6bcfsqrt\u6b21\u4fee\u6539\u5c31\u9700\u8981\u91cd\u6784\u4e00\u4e0b\u3002 \n\n\u8bbe\u6bcf\u4e2a\u4fee\u6539\u7684\u4f4d\u7f6e\u662fposnow\uff0c \u8fd9\u4e2a\u989c\u8272\u524d\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u662fposx\uff0c \u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u662fposy\u3002 \u7b54\u6848\u6570\u7ec4\u662fans\n\n\u90a3\u4e48\u53d8\u5316\u7684\u53ea\u6709b[posx] < i <= b[posnow] \u4e14  b[posnow] <= j < b[posy] \u7684 ans(i, j)\u4fe1\u606f\u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u628aans\u6570\u7ec4\u653e\u5728\u4e8c\u4f4d\u5e73\u9762\u91cc\u5dee\u5206\u4e00\u4e0b\uff08\u4e00\u7ef4\u662fi\u4e00\u7ef4\u662fj\uff0c \u4e24\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u90fd\u662fsqrt\u7ea7\u522b\u7684\uff09\u3002 \u5355\u6b21\u5dee\u5206\u7684\u590d\u6742\u5ea6\u5c31\u662fsqrt n\uff0c sqrt\u6b21\u5c31\u662fOn\uff0c \u7136\u540e\u518d\u7528O(sqrt*sqrt)\u626b\u4e00\u904d\u5dee\u5206\u6570\u7ec4, On\u91cd\u65b0\u5904\u7406\u4e00\u4e0bvector\u5c31\u80fd\u5b8c\u6210\u91cd\u6784\u4e86\u3002\n\n\u8fd9\u6837\u6700\u591a\u91cd\u6784sqrt (m) \u6b21\uff0c \u603b\u590d\u6742\u5ea6\u5c31\u662f (m+n) sqrt (n) \n\n\u90a3\u4e48\u5230\u8fd9\u91cc\u5c31\u8bb2\u5b8c\u5566\u3002 \u8fd8\u6709\u4ec0\u4e48\u4e0d\u660e\u767d\u7684\u5c31\u79c1\u4fe1\u5c0f\u849f\u84bb\u5427>_<\n",
        "postTime": 1558950204,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "\n\u5206\u4eab\u4e00\u4e0b\u66b4\u529b\u7834\u89e3\u6cd5 , \u975e\u5e38\u7b80\u5355\u6613\u61c2. \n\n\u9996\u5148\u7528\u4e00\u4e2a\u901a\u7528\u7684\u65b9\u6cd5, \u6765\u907f\u514d\u603b\u662f\u4f7f\u7528map\u6216\u8005set\u6765\u7edf\u8ba1\u989c\u8272\u4e2a\u6570.\n\u5728\u51fd\u6570get_index_of_number\u7684\u5b9e\u73b0\u91cc, \n\u5f3a\u5236\u628anumber \u8f6c\u6362\u4e3a0,1,2,3,4,..... \n\n\u8fd9\u6837, \u65e0\u8bbanumber\u7684\u53d6\u503c\u8303\u56f4\u662f\u4ec0\u4e48, \n\u90fd\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u6570\u7ec4\u7684\u7edf\u8ba1\u65b9\u5f0f\u6765\u66ff\u4ee3map\u7edf\u8ba1\u4e86. \n\n\u540e\u9762\u7528\nunsigned int indexarr[110000];\n\u6765\u505a\u7edf\u8ba1, \n\u56e0\u4e3aN\u548cM\u7684\u6700\u5927\u503c\u90fd\u662f50000, \u5176\u4e2dR\u6307\u4ee4\u6570\u91cf\u4e0d\u786e\u5b9a\n\u6240\u4ee5\u63d0\u4f9b\u7684\u989c\u8272\u6570\u91cf\u662f\u53ef\u4ee5\u8fbe\u5230100000\u4e2a\u7684.\n\u6240\u4ee5\u6570\u7ec4\u6570\u91cf\u968f\u4fbf\u53d6\u4e2a 110000\n\nget_colors_of_range\u51fd\u6570\u7528\u4e8e\u7edf\u8ba1\u533a\u57df\u5185\u7684\u989c\u8272\u6570\u91cf. \n\u8fd9\u91cc\u9996\u5148\u8981\u7ed9indexarr\u6e05\u96f6. \n\u76f4\u63a5\u6839\u636e_indexmap\u7684\u6570\u91cf\u6765\u6e05, \u8981\u6e05\u591a\u4e00\u4f4d , \u56e0\u4e3a0\u662f\u4e0d\u653e\u8fdb_indexmap\u5185\u7684.\n\n\n\u53e6\u5916\u4e00\u4e2a\u7ec6\u8282\u662f\nif (indexarr[valuearr[i]]++ == 0)count++\n\u8fd9\u79cd\u5224\u65ad\n\u662f\u8981\u6bd4\nif (indexarr[valuearr[i]] == 0)\n{\n\tcount++;\n\tindexarr[valuearr[i]]=1;\n}\n\u8fd9\u79cd\u7c7b\u578b\u8981\u5feb\u5f88\u591a. \n\n\n```cpp\n\n#include <cstring>\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\n\nunordered_map<int, int> _indexmap;\nint get_index_of_number(int number)\n{\n\tif (number == 0)return 0;\n\tint index = _indexmap[number];\n\tif (index == 0)\n\t{\n\t\tindex = _indexmap.size();\n\t\t_indexmap[number] = index;\n\t}\n\treturn index;\n}\n\nint valuearr[55000];\n\nunsigned int indexarr[110000];\n\nint get_colors_of_range(int start, int endnotinc)\n{\n\tmemset(indexarr, 0, _indexmap.size() * 4 + 4);\n\n\tint count = 0;\n\tfor (int i = start; i < endnotinc; i++)\n\t{\n\t\tif (indexarr[valuearr[i]]++ == 0)\n\t\t\tcount++;\n\t}\n\n\treturn count;\n}\n\nint main()\n{\n\tchar c;\n\tint N, M, v1, v2;\n\n\tcin >> N >> M;\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tcin >> valuearr[i];\n\t\tvaluearr[i] = get_index_of_number(valuearr[i]);\n\t}\n\n\tfor (int i = 0; i < M; i++)\n\t{\n\t\tcin >> c >> v1 >> v2;\n\t\tif (c == 'Q')\n\t\t\tcout << get_colors_of_range(v1 - 1, v2) << endl;\n\t\tif (c == 'R')\n\t\t\tvaluearr[v1 - 1] = get_index_of_number(v2);\n\t}\n\n\treturn 0;\n}\n\n\n\n```\n",
        "postTime": 1565064616,
        "uid": 234252,
        "name": "ZHDX",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "### \u6765\u4e00\u4e2a\u4e0d\u592a\u4f18\u79c0\u4f46\u8fd8\u7b97\u6b63\u7ecf\u7684\u505a\u6cd5\uff08\u8981\u5f00O2)\n\u770b\u9898\u9762\uff0c\u5c31\u662f\u5e26\u4fee\u7684[HH\u7684\u9879\u94fe](https://www.luogu.org/problemnew/show/P1972)\u561b\uff0c\u601d\u8def\u7acb\u523b\u5c31\u6709\u4e86\u3002\n#### 1\u3001\u52a8\u6001\u4e3b\u5e2d\u6811\n#### 2\u3001\u5e26\u4fee\u83ab\u961f\n\u90fd\u6ca1\u5b66\u8fc7\uff0c\u544a\u8f9e\u4e86\u3002\u3002\u3002\n## \u4f46\u662f\uff01\u5f53\u4f60\u60f3\u4e0d\u5230\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u6b63\u89e3\u65f6\uff0c\u603b\u8fd8\u6709\u4e00\u6761\u8def\uff1a\u7528\u5206\u5757\u4e71\u641e\uff01\n\u6ce8\u610f\uff0c\u5206\u5757\u4e0d\u4e00\u5b9a\u8981\u53ea\u80fd\u53d6\u5e73\u65b9\uff0c\u5757\u7684\u5927\u5c0f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9898\u76ee\u8c03\u6574\u3002\n\n### \u5927\u4f53\u601d\u8def\n\u89c2\u5bdf\u9898\u76ee\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u5355\u70b9\u4fee\u6539\uff1f\u90a3\u5c31\u7528\u5206\u5757\u7ef4\u62a4\u524d\u7f00\u548c\u554a\uff01\u5047\u8bbe\u6211\u4eec\u5206\u4e3aT\u5757\uff0c\u6bcf\u6bb5\u957f\u4e3aL\uff0c\u5bf9\u4e8e\u7b2cl\u5757\u5230\u7b2cr\u5757\u7684\u533a\u95f4[l,r],\u8f93\u5165\u65f6\u628a\u989c\u8272\u79bb\u6563\u5316\u5c31\u53ef\u4ee5\u9884\u5904\u7406\u533a\u95f4\u4e2d\u51fa\u5404\u4e2a\u989c\u8272\u7684\u6570\u91cf\u4ee5\u53ca\u533a\u95f4\u4e2d\u4e0d\u540c\u989c\u8272\u7684\u603b\u6570\uff0c\u590d\u6742\u5ea6O\uff08T^2*N)(N\u4e3a\u989c\u8272\u603b\u6570\uff0c\u9884\u5904\u7406\u65f6\u4e0d\u8d85\u8fc7n\uff09\u3002\u67e5\u8be2\u65f6O\uff081\uff09\u5f97\u5230\u6574\u5757\u7684\u989c\u8272\u603b\u6570\uff0c\u518d\u7528\u4e0d\u8d85\u8fc7O\uff082L\uff09\u7684\u66b4\u529b\u6dfb\u52a0\u975e\u6574\u5757\u7684\u7b54\u6848\uff0c\u4fee\u6539\u4e00\u4e2a\u6570\u65f6\u9700\u8981\u628a\u6240\u6709\u5305\u542b\u8fd9\u4e2a\u6570\u7684\u533a\u95f4\u4fee\u6539\uff0c\u590d\u6742\u5ea6O\uff08T^2)\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662fO\uff08nT^2+mn/T),\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08nT^2)\u3002\u5f53nT^2=mn/T\u65f6\uff0cT\u53d6n\u7684\u7acb\u65b9\u6839\uff0c\u6240\u4ee5\u6700\u540e\u7684\u590d\u6742\u5ea6\u5c31\u662fO\uff08n^(5/3))\uff0c\u65f6\u95f4\u7a7a\u95f4\u90fd\u662f\u60ca\u9669\u5361\u8fc7\uff0c\u4ee3\u7801\u4e5f\u4e0d\u77ed\uff0c\u4f46\u662f\uff1a\n\n## \u601d\u8def\u76f4\u89c2\uff0c\u5b9e\u73b0\u7b80\u5355\u554a\uff01\n~~\uff08\u5206\u5757\u5927\u6cd5\u543c\u554a\uff01\uff09~~\n\n### \u7f16\u7a0b\u7ec6\u8282&\u4ee3\u7801\n1\u3001\u4fee\u6539\u65f6\u51fa\u73b0\u7684\u989c\u8272\u53ef\u80fd\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u4f46\u662f\u5b83\u7684\u503c\u5c0f\u4e8e1e6\uff0c\u6570\u7ec4\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\uff0c\u6240\u4ee5\u628a\u6240\u6709\u6570\u88c5\u8fdb\u4e00\u4e2a\u6876\u91cc\u5373\u53ef\u79bb\u6563\u5316\u3002\n\n2\u3001\u66b4\u529b\u67e5\u8be2\u540e\u8981\u518d\u626b\u4e00\u904d\u8fd8\u539f\u6570\u7ec4\n\n\u4ee3\u7801\uff1a\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register//\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u7684\u5361\u5e38\ninline int read(){\n    int a=0;\n    char c=getchar();\n    while(c>'9'||c<'0') c=getchar();\n    while('0'<=c&&c<='9') {\n        a=(a<<3)+(a<<1)+c-48;\n        c=getchar();\n    }\n    return a;\n}\ninline char getc(){\n    char c=getchar();\n    while(c!='Q'&&c!='R') c=getchar();\n    return c;\n}\n//\u5feb\u8bfb\n#define MN 50005\nint n,m,col[MN],C[MN*20],N,T,L,x,y,f[40][40][MN*2],sum[40][40],s[40][MN*2];\n//col\uff1a\u989c\u8272\u7f16\u53f7 C\uff1a\u79bb\u6563\u5316\u540e\u7684\u989c\u8272\u7f16\u53f7 N\uff1a\u989c\u8272\u603b\u6570 \n//f:\u533a\u95f4\u5185\u5404\u4e2a\u989c\u8272\u7684\u4e2a\u6570 sum\uff1a\u533a\u95f4\u5185\u4e0d\u540c\u989c\u8272\u7684\u603b\u6570 \n//s:\u4e00\u5757\u533a\u95f4\u5185\u5404\u4e2a\u989c\u8272\u7684\u6570\u91cf\ninline int Find(int a){\n    if(C[a]) return C[a];\n    return C[a]=++N;\n}\n//\u79bb\u6563\u5316\nint main(){\n    n=read();m=read();\n    for(T=1;T*T*T<=n;++T);//T\u53d6n\u7684\u7acb\u65b9\u6839\n    L=n/T;//\u5757\u957f\n    for(int i=1;i<=n;++i){\n        col[i]=read();\n        col[i]=Find(col[i]);\n    }\n    for(int i=1;i<=T;++i){\n        int l=(i-1)*L+1,r=i*L;\n        for(int j=l;j<=r;++j)\n            s[i][col[j]]++;\n    }//\u5148\u6c42\u51fa\u6bcf\u4e00\u5757\u533a\u95f4\u5404\u4e2a\u989c\u8272\u7684\u6570\u91cf\n    for(re int i=1;i<=T;++i)\n        for(re int j=i;j<=T;++j){\n            sum[i][j]=sum[i][j-1];\n            for(re int k=1;k<=N;++k){\n                f[i][j][k]=f[i][j-1][k]+s[j][k];\n                if(f[i][j][k]&&!f[i][j-1][k])sum[i][j]++;//\u53d1\u73b0\u65b0\u7684\u989c\u8272\u7f16\u53f7\uff0c\u603b\u6570\u52a01\n            }\n        }\n    for(re int i=1;i<=m;++i){\n        char c=getc();\n        x=read();y=read();\n        if(c=='Q'){\n            int l=((x-1)/L)+2,r=y/L;//\u4ece\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u533a\u95f4\n            if((l-1)*L+1-L>=x)l--;\n\t\t\t//\u8fd9\u91cc\u6211\u6ca1\u4ec0\u4e48\u597d\u529e\u6cd5\uff0c\u8fb9\u754c\u603b\u662f\u5904\u7406\u4e0d\u597d\uff0c\u53ea\u80fd\u7279\u5224\uff0c\u6c42\u5927\u795e\u6307\u70b9\n\t\t\tint ans=sum[l][r];\n            for(re int j=x;j<=y;++j){\n                if(j==(l-1)*L+1&&r*L+1>j){if(r*L+1>y) break;j=r*L+1;}\n                if(!f[l][r][col[j]]) ans++;\n                f[l][r][col[j]]++;\n            }//\u66b4\u529b\u67e5\u8be2\n            printf(\"%d\\n\",ans);\n            for(re int j=x;j<=y;++j){\n                if(j==(l-1)*L+1&&r*L+1>j){if(r*L+1>y)break; j=r*L+1;}\n                f[l][r][col[j]]--;\n            }//\u8fd8\u539f\u6570\u7ec4\n        }//\u67e5\u8be2\n        else{\n            int loc=(x-1)/L+1,COL=Find(y);\n            //\u627e\u5230x\u6240\u5728\u7684\u5757\u7684\u4f4d\u7f6e\n            for(re int j=1;j<=loc;++j)\n                for(re int k=loc;k<=T;++k){\n                    f[j][k][col[x]]--;\n                    if(!f[j][k][col[x]]) sum[j][k]--;\n                    if(!f[j][k][COL]) sum[j][k]++;\n                    f[j][k][COL]++;\n            }\n            col[x]=COL;\n            //\u4fee\u6539\n        }\n    }\n    return 0;\n}\n\n```\n### \u603b\u7ed3\n\n\u867d\u7136\u5206\u5757\u5341\u5206\u66b4\u529b\uff0c\u601d\u8def\u4e5f\u7b80\u5355\uff0c\u4f46\u5728\u5f88\u591a\u65f6\u5019\uff08\u5c24\u51761e4<=n<=1e5\u8fd9\u79cd\u8303\u56f4\uff09\u80fd\u53d1\u6325\u5947\u6548\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5e38\u6570\u3002\u5e73\u65f6\u5927\u591a\u6570\u6253\u6811\u5f62\u7ed3\u6784\u7684\u540c\u5b66\uff08\u6bd4\u5982\u6211\uff09\u53ef\u80fd\u5165\u95e8\u65f6\u4e0d\u592a\u4e60\u60ef\uff0c\u53d8\u91cf\u641e\u6df7\u7b49\uff0c\u4f46\u662f\u4e5f\u6bd4\u8f83\u597d\u8c03\uff0c\u8981\u591a\u52a0\u5de9\u56fa\uff0c\u719f\u80fd\u751f\u5de7\uff0c\u987a\u4fbf\u63a8\u8350\u4e00\u4e0b\u4e00\u9053\u548c\u8fd9\u9898\u601d\u8def\u63a5\u8fd1\u7684\u9898\u76ee\uff1a[\u84b2\u516c\u82f1](https://www.luogu.org/problemnew/show/P4168)~~\uff08\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u4ea4\u8fd9\u9898\u4ea4\u4e86\u63a5\u8fd120\u53d1\u5462\uff09~~\uff0c\u6211\u7684\u9996\u9ed1\u5c31\u662f\u8fd9\u9898\u3002\n",
        "postTime": 1551676908,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4f5c\u4e3a [P4690](/problem/P4690) \u7684\u5f31\u5316\u7248\u5c45\u7136\u6ca1\u6709\u7528 CDQ \u5206\u6cbb\u505a\u7684\u9898\u89e3\uff1f\n\n\u90a3\u6211\u590d\u5236\u4e00\u4e0b\u6211\u5199\u7684 P4690 \u9898\u89e3\uff1a\n\n\u5148\u8003\u8651\u4e0d\u5e26\u4fee\u600e\u4e48\u505a\uff0c\u5373 [P1972](/problem/P1972)\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4 $pre_i$ \u4ee3\u8868\u4e0e\u5b83\u989c\u8272\u76f8\u540c\u4e14\u4e0b\u6807\u5728\u5b83\u4e4b\u524d\u7684\uff0c\u4e0b\u6807\u6700\u5927\u7684\u70b9\u7684\u4e0b\u6807\u3002\uff08\u597d\u7ed5\u53e3\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u8be2\u95ee\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\uff0c\u53ea\u7edf\u8ba1\u5b83\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u6700\u5de6\u8fb9\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u67e5\u8be2\u6709\u591a\u5c11 $l \\leq i \\leq r$\uff0c\u6ee1\u8db3 $pre_i<l$\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f5c\u4e8c\u7ef4\u504f\u5e8f\u6765\u5f97\u5230\u7b54\u6848\u3002\n\n\u6709\u4e86\u4e0d\u5e26\u4fee\u7684\u505a\u6cd5\uff0c\u5355\u70b9\u4fee\u6539\u7684\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u3002\u6ce8\u610f\u5230\u8fdb\u884c\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u5bf9 $pre$ \u6570\u7ec4\u7684\u5f71\u54cd\u662f $O(1)$ \u7684\u3002\u56e0\u6b64\u6211\u4eec\u628a\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u53d8\u6210\u4e00\u6b21\u5220\u9664\u548c\u4e00\u6b21\u63d2\u5165\uff0c\u8fd9\u6837\u5c31\u662f\u5728\u4e8c\u7ef4\u504f\u5e8f\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u65f6\u95f4\u7ef4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f5c\u4e09\u7ef4\u504f\u5e8f\u3002CDQ \u5206\u6cbb\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u53cc $\\log$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\uff0c\u4f18\u4e8e\u6811\u5957\u6811\u548c\u83ab\u961f\u505a\u6cd5\u3002",
        "postTime": 1678424086,
        "uid": 363415,
        "name": "251Sec",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217"
    },
    {
        "content": "\u7b2c\u4e00\u904d\u63d0\u4ea4\u5c45\u7136\u88ab\u62d2\u4e86\uff1a\u91cd\u590d\u7684\u89e3\u6cd5\u2026\u2026\u6211\u90fd\u7ffb\u904d\u4e94\u9875\u9898\u89e3\u4e86\u90fd\u6ca1\u770b\u5230\u7528\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u7684\uff0c\u8981\u561b\u662f\u5e26\u4fee\u83ab\u961f\uff0c\u8981\u561b\u662fbit\u5957\u5e73\u8861\u6811/\u5206\u5757\uff0c\u8981\u561b\u662f\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff0c\u6216\u8005\u662f\u5176\u4e2d\u4e00\u68f5\u5e73\u8861\u6811\u7528set\u7684\uff0c\u54ea\u6709\u8ddf\u6211\u4e00\u6837\u7684\u2026\u2026\u800c\u4e14\u6211\u8fd9\u662f\u7528\u6307\u9488\u5199\u7684\u597d\u5417\n\n\u90a3\u4e48\u8fd9\u91cc\u63d0\u4f9b\u4e00\u7bc7\u7ebf\u6bb5\u6811\u5957Splay(\u6307\u9488)\n\n\u5f31\u5316\u7248\u7684\u9898\u76ee:[HH\u7684\u9879\u94fe](https://www.luogu.org/problemnew/show/P1972)\n\n\u9759\u6001\u533a\u95f4\u6570\u989c\u8272\uff0c\u7528\u4e3b\u5e2d\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u7528**last[x]**\u8868\u793a\u4f4d\u7f6ex\u524d\u4e0ex\u989c\u8272\u76f8\u540c\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6bd4\u5982banana(\u4e0b\u6807\u4ee51\u5f00\u59cb)\uff0clast[6]=4\uff0c\u5373\u7b2c\u516d\u4e2a\u5b57\u7b26'a'\u4e4b\u524d\u7684\u76f8\u540c\u6700\u8fd1\u5b57\u7b26\u662f\u7b2c\u56db\u4e2a\u5b57\u7b26\n\n\u90a3\u4e48\u53ea\u8981\u4f4d\u7f6epos\u2208[l,r]\u5185\uff0c\u82e5**last[pos]<l**\uff0c\u5219\u8bf4\u660epos\u7684\u989c\u8272\u5728\u533a\u95f4[l,pos]\u4e2d\u662f\u552f\u4e00\u7684\uff0c\u4fbf\u53ef\u7edf\u8ba1\u5165\u7b54\u6848\uff0c\u5426\u5219\u5219\u8bf4\u660epos\u7684\u989c\u8272\u5728\u533a\u95f4[l,pos-1]\u4e2d\u5c31\u5df2\u51fa\u73b0\u8fc7\uff0c\u4e0d\u80fd\u91cd\u590d\u7d2f\u52a0\u7b54\u6848\n\n\u5355\u6b21\u5728log\u65f6\u95f4\u5185\u8ba1\u7b97\u51falast[pos]<l\u7684pos\u6b21\u6570\uff0c\u4e3b\u5e2d\u6811\u5c31\u597d\u4e86\n\n\u90a3\u4e48\u8003\u8651\u8fd9\u9053\u9898\uff0c\u52a8\u6001\u533a\u95f4\u6570\u989c\u8272\uff0c\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\n\n\u65e2\u7136\u5e26\u4fee\u6539\uff0c\u5355\u4e00\u7684\u4e3b\u5e2d\u6811\u4e0d\u80fd\u7528\u4e86\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811/\u5e26\u4fee\u83ab\u961f\uff0c~~\u4f46\u662f\u6211\u4e0d\u4f1a~~\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u6211\u6bd4\u8f83\u62ff\u624b\u7684\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\n\n\u6309\u7167\u533a\u95f4\u7ebf\u6bb5\u6811\u5efa\u6811\uff0c\u7ebf\u6bb5\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5957\u4e0a\u4e2aSplay\uff0c\u5b58\u50a8\u5bf9\u5e94\u533a\u95f4\u5185\u6bcf\u4e2a\u6570\u7684last\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5355\u6b21\u5728log\u65f6\u95f4\u5185\u901a\u8fc7\u5e73\u8861\u6811\u67e5\u8be2\u8be5\u533a\u95f4\u5185<l\u7684last\u4e2a\u6570\u4e86\n\n\u8003\u8651\u52a8\u6001\u4fee\u6539\u3002\u5173\u952e\u5728\u4e8e\u5982\u4f55\u52a8\u6001\u7ef4\u62a4last[]\u3002\u6570\u5b57\u6700\u5927\u4e3a1e6\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u5f001e6\u68f5\u72ec\u7acb\u7684Splay\uff0c\u7b2ci\u68f5Splay(\u4ee5\u4e0b\u7b80\u79f0R[i])\u5b58\u50a8\u989c\u8272\u4e3ai\u7684\u6240\u6709\u4f4d\u7f6e\u3002\u5982\u6b64\uff0c\u5728R[i]\u4e2d\uff0c**\u4f4d\u7f6ek\u7684\u524d\u9a71\u4fbf\u662flast[k]**\u3002\n\n\u5e73\u8861\u6811\u4f7f\u5f97last\u80fd\u591f\u88ab\u52a8\u6001\u7ef4\u62a4\uff0c\u8003\u8651\u4fee\u6539\u4e4b\u540e\u9020\u6210\u7684\u5f71\u54cd\uff0c\u628a\u4f4d\u7f6epos\u7684\u989c\u8272\u8f6c\u6210col(\u5047\u8bbe\u5176\u539f\u989c\u8272\u4e3aorg)\uff1a\n\n1.R[pos]\u4e2dpos\u5c06\u88ab\u5220\u9664\uff0c\u5176\u539f\u6765\u7684\u524d\u9a71(pre)\u4e0e\u540e\u7ee7(nxt\uff0c\u5047\u8bbe\u5b58\u5728)\u5c06\u9760\u5728\u4e00\u8d77\uff0c\u6545\uff0c**last[nxt]\u5c06\u53d8\u6210pre**,\u5728\u6811\u5957\u6811\u4e2d\u4fbf\u628anxt\u7684last\u4fee\u6539\u4e3apre\n\n2.R[col]\u4e2d\u5c06\u63d2\u5165pos\uff0c\u63d2\u5165\u540e\u5176pre\u4e0e\u5176\u81ea\u8eab\u5c06\u9760\u5728\u4e00\u8d77\uff0c\u6545**last[pos]\u5c06\u53d8\u6210pre**\uff0c\u540c\u6837\u5728\u6811\u5957\u6811\u4e2d\u4fee\u6539;\u63d2\u5165\u540e\u5176\u81ea\u8eab\u4e0e\u5176nxt\u5c06\u9760\u5728\u4e00\u8d77\uff0c\u6545**last[nxt]\u5c06\u53d8\u6210pos**\uff0c\u540c\u7406\u6811\u5957\u6811\u4fee\u6539\n\n\u8be2\u95ee\u7684\u8bdd\u53ea\u8981\u5728\u6811\u5957\u6811\u4e2d\u67e5\u8be2[l,r]\u7684\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684Splay\u7684<l\u7684\u503c\u7684\u4e2a\u6570\u7684\u548c\u5373\u53ef\n\n\u603b\u590d\u6742\u5ea6\u5747\u644aO(m log\u00b2 n)\n\n```cpp\n#include<cstdio>\nconst int N=1e6+10;\nint n,m,last[N],tmp[N],col[N];\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();short fh=1;\n\twhile (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n\tin*=fh;\n}\nnamespace Splay\n{\n\tstruct tree\n\t{\n\t\tint val,cnt,size;\n\t\ttree *fa,*son[2];\n\t\tinline const void pushup()\n\t\t{\n\t\t\tsize=son[0]->size+cnt+son[1]->size;\n\t\t}\n\t\tinline const bool identity()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t}memory_pool[N<<5],*recycle[N<<5],*tail,*null,*root[N];\n\tint top;\n\tinline const void init()\n\t{\n\t\ttail=memory_pool;\n\t\tnull=tail++;\n\t\tnull->val=null->cnt=null->size=top=0;\n\t\tnull->fa=null->son[0]=null->son[1]=null;\n\t\tfor (int i=1;i<N;i++)root[i]=null;\n\t}\n\tinline tree *spawn(int key)\n\t{\n\t\ttree *p=top?recycle[--top]:tail++;\n\t\tp->val=key;\n\t\tp->size=p->cnt=1;\n\t\tp->fa=p->son[0]=p->son[1]=null;\n\t\treturn p;\n\t}\n\tinline const void erase(tree *&p)\n\t{\n\t\trecycle[top++]=p;\n\t\tp=null;\n\t}\n\tinline const void connect(tree *p,tree *fa,bool which)\n\t{\n\t\tif (p!=null)p->fa=fa;\n\t\tif (fa!=null)fa->son[which]=p,fa->pushup();\n\t}\n\tinline const void rotate(tree *p)\n\t{\n\t\ttree *fa=p->fa;\n\t\tbool id=p->identity();\n\t\tconnect(p,fa->fa,fa->identity());\n\t\tconnect(p->son[id^1],fa,id);\n\t\tconnect(fa,p,id^1);\n\t}\n\tinline const void splay(tree *&root,tree *p)\n\t{\n\t\tfor (tree *fa;(fa=p->fa)!=null;rotate(p))\n\t\t\tif (fa->fa!=null)\n\t\t\t\trotate(p->identity()^fa->identity()?fa:p);\n\t\troot=p;\n\t}\n\tinline const void insert(tree *&root,int key)\n\t{\n\t\tif (root==null)return (void)(root=spawn(key));\n\t\ttree *now=root;\n\t\twhile (1)\n\t\t{\n\t\t\tif (now->val==key)\n\t\t\t\treturn now->cnt++,now->pushup(),splay(root,now);\n\t\t\ttree *fa=now;\n\t\t\tbool nxt=fa->val<key;\n\t\t\tnow=fa->son[nxt];\n\t\t\tif (now==null)\n\t\t\t\treturn now=spawn(key),connect(now,fa,nxt),splay(root,now);\n\t\t}\n\t}\n\tinline const void find(tree *&root,int key)\n\t{\n\t\ttree *now=root;\n\t\twhile (now->son[now->val<key]!=null&&now->val!=key)\n\t\t\tnow=now->son[now->val<key];\n\t\tsplay(root,now);\n\t}\n\tinline tree *precursor(tree *&root,int key)\n\t{\n\t\tfind(root,key);\n\t\tif (root->val<key)return root;\n\t\ttree *now=root->son[0];\n\t\twhile (now->son[1]!=null)now=now->son[1];\n\t\treturn now;\n\t}\n\tinline tree *successor(tree *&root,int key)\n\t{\n\t\tfind(root,key);\n\t\tif (root->val>key)return root;\n\t\ttree *now=root->son[1];\n\t\twhile (now->son[0]!=null)now=now->son[0];\n\t\treturn now;\n\t}\n\tinline const void Delete(tree *&root,int key)\n\t{\n\t\tfind(root,key);tree *p=root;\n\t\tif (p->cnt>1)return p->cnt--,p->pushup();\n\t\tif (p->son[0]==null&&p->son[1]==null)return root=null,erase(p);\n\t\tif (p->son[0]==null)return (root=p->son[1])->fa=null,erase(p);\n\t\tif (p->son[1]==null)return (root=p->son[0])->fa=null,erase(p);\n\t\ttree *pre=precursor(root,key);splay(root,pre);connect(p->son[1],pre,1);erase(p);\n\t}\n\tinline const int less(tree *&root,int key)\n\t{\n\t\ttree *now=root;int tot=0;\n\t\twhile (now!=null)\n\t\t\tif (key<now->val)now=now->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\ttot+=now->son[0]->size;\n\t\t\t\tif (now->val==key)return tot;\n\t\t\t\ttot+=now->cnt;\n\t\t\t\tnow=now->son[1];\n\t\t\t}\n\t\treturn tot;\n\t}\n}using namespace Splay;\nclass Segment_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tSplay::tree *root;\n\t\t\ttree *lson,*rson;\n\t\t\tinline const void update(int l,int r,int pos,int key)\n\t\t\t{\n\t\t\t\tDelete(root,last[pos]);\n\t\t\t\tinsert(root,key);\n\t\t\t\tif (l==r)return;\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\tif (pos<=mid)lson->update(l,mid,pos,key);\n\t\t\t\telse rson->update(mid+1,r,pos,key);\n\t\t\t}\n\t\t\tinline const int query(int l,int r,int L,int R)\n\t\t\t{\n\t\t\t\tif (l>R||r<L)return 0;\n\t\t\t\tif (l>=L&&r<=R)return less(root,L);\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\treturn lson->query(l,mid,L,R)+rson->query(mid+1,r,L,R);\n\t\t\t}\n\t\t}memory_pool[N<<2],*tail;\n\t\tinline const void init()\n\t\t{\n\t\t\ttail=memory_pool;\n\t\t}\n\t\tinline tree *spawn()\n\t\t{\n\t\t\ttree *p=tail++;\n\t\t\tp->root=null;\n\t\t\tp->lson=p->rson=NULL;\n\t\t\treturn p;\n\t\t}\n\tpublic:\n\t\ttree *root;\n\t\tinline Segment_Tree(){init();}\n\t\tinline const void build(tree *&p,int l,int r)\n\t\t{\n\t\t\tp=spawn();\n\t\t\tfor (int i=l;i<=r;i++)\n\t\t\t\tinsert(p->root,last[i]);\n\t\t\tif (l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tbuild(p->lson,l,mid);\n\t\t\tbuild(p->rson,mid+1,r);\n\t\t}\n}sgt;\nint main()\n{\n\tinit();\n\tread(n);read(m);\n\tfor (int i=1;i<=n;i++)\n\t\tread(col[i]),\n\t\tlast[i]=tmp[col[i]],\n\t\tinsert(root[col[i]],tmp[col[i]]=i);\n\tsgt.build(sgt.root,1,n);\n\tchar opt;int x,y;\n\twhile (m--)\n\t\tif (scanf(\" %c\",&opt),read(x),read(y),opt=='R')\n\t\t{\n\t\t\tint pre=precursor(root[col[x]],x)->val,\n\t\t\t\tnxt=successor(root[col[x]],x)->val;\n\t\t\tDelete(root[col[x]],x);\n\t\t\tif (nxt)sgt.root->update(1,n,nxt,pre),last[nxt]=pre;\n\t\t\tinsert(root[col[x]=y],x);\n\t\t\tpre=precursor(root[y],x)->val;\n\t\t\tnxt=successor(root[y],x)->val;\n\t\t\tif (nxt)sgt.root->update(1,n,nxt,x),last[nxt]=x;\n\t\t\tsgt.root->update(1,n,x,pre);last[x]=pre;\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\",sgt.root->query(1,n,x,y));\n\treturn 0;\n}\n```",
        "postTime": 1548600224,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "## \u601d\u8def\n    \u5bf9\u533a\u95f4\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e26\u4fee\u83ab\u961f\u6765\u89e3\u51b3\n---------------\n## \u524d\u7f6e\u77e5\u8bc6\n\n\n     \u786e\u4fdd\u5df2\u7ecf\u6e05\u695a\u666e\u901a\u83ab\u961f\u7684\u7528\u6cd5\u548c\u539f\u7406\n\u63d0\u4f9b\u4e00\u9053\u666e\u901a\u83ab\u961f\u7684\u6a21\u677f\u9898\uff1a\n[P2709 \u5c0fB\u7684\u8be2\u95ee](https://www.luogu.org/problem/P1903)\n\n~~\u8fd9\u91cc\u5b89\u5229\u4e00\u4e0b\u6211\u7684[blog](https://www.luogu.org/blog/I-O-I/solution-p2709)~~\n\n\n\n--------\n## \u5e26\u4fee\u6539\u83ab\u961f\n\n    \u7406\u89e3\u4e86\u83ab\u961f\u4e4b\u540e\uff0c\u518d\u6765\u770b\u770b\u80fd\u4e0d\u80fd\u5c06\u83ab\u961f\u5e26\u4e0a\u4fee\u6539\n\n1. \u666e\u901a\u83ab\u961f\u662f\u53ea\u79fb\u52a8l,r\u6307\u9488,\u5e76\u4e0d\u4f1a\u8003\u8651\u4fee\u6539\u67d0\u4e2a\u503c,\u800c\u5e26\u4fee\u83ab\u961f\u9700\u8981\u514b\u670d\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5728\u79fb\u52a8\u6307\u9488\u7684\u8fc7\u7a0b\u4e2d\u6765\u8fdb\u884c\u5bf9\u961f\u5217\u4fee\u6539\u7684\u7ef4\u62a4\u64cd\u4f5c.\n\n2. \u5bf9\u4e8e\u666e\u901a\u83ab\u961f,\u53ea\u8003\u8651\u4e86\u5bf9\u533a\u95f4\u8303\u56f4\u7684\u7ef4\u62a4.\u90a3\u4e48\u5e26\u4fee\u83ab\u961f\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u8f74\u6765\u8fdb\u884c\u5bf9\u533a\u95f4\u7684\u7ef4\u62a4.\n\n3. \u5bf9\u4e8e\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4,\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u666e\u901a\u83ab\u961f\u627e\u5230\u9700\u8981\u67e5\u627e\u7684\u533a\u95f4\u6bb5\u7136\u540e\u5728\u65f6\u95f4\u8f74\u4e0a\u8fdb\u884c\u79fb\u52a8,\u76f4\u5230\u5230\u8fbe\u6211\u4eec\u60f3\u6c42\u7684\u533a\u95f4.(\u79fb\u52a8\u662fO(1)\u7684)\n\n### ~~\u53c8\u355b\u53cc\u53d2\u53d5~~\u7528\u56fe\u6765\u5c55\u793a\u4e00\u4e0b\u8fc7\u7a0b\n    \u8d77\u521d\u7684\u533a\u95f4                                     \u6309\u7167\u666e\u901a\u83ab\u961f\uff0c\u5148\u5bf9\u533a\u95f4\u5206\u5feb\uff0c\u5bf9\u8baf\u95ee\u6392\u5e8f\n![\u8d77\u521d\u7684\u533a\u95f4](https://cdn.luogu.com.cn/upload/pic/70434.png) ![\u533a\u95f4\u5206\u5757](https://cdn.luogu.com.cn/upload/pic/70437.png)\n\n\n\u533a\u522b\u4e8e\u666e\u901a\u83ab\u961f,\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u65f6\u95f4\u8f74(\u4e0d\u540c\u65f6\u95f4\u7684\u533a\u95f4\u4e0d\u7528\u5206\u522b\u5b58\u50a8)\n\n![\u7ef4\u62a4\u65f6\u95f4\u8f74](https://cdn.luogu.com.cn/upload/pic/70439.png)\n\n\u8fd9\u65f6\u5019\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u4e86\n    \n------    \n\u7531\u4e8e\u7bc7\u5e45\u6709\u9650,\u6240\u4ee5\u8fd9\u91cc\u53ea\u6a21\u62df\u5bf9\u533a\u95f46\u7684\u67e5\u8be2 \n\n\u521d\u59cb\u5316\u83ab\u961f\n\n![\u5f00\u59cb\u83ab\u961f](https://cdn.luogu.com.cn/upload/pic/70443.png)\n\n\u79fb\u52a8\u53f3\u6307\u9488\n\n![\u83ab\u961f1](https://cdn.luogu.com.cn/upload/pic/70451.png)\n\n\u79fb\u52a8\u5de6\u6307\u9488\n\n![\u83ab\u961f2](https://cdn.luogu.com.cn/upload/pic/70454.png)\n\n\u79fb\u52a8\u65f6\u95f4\u8f74\n\n![\u83ab\u961f3](https://cdn.luogu.com.cn/upload/pic/70455.png) ![\u83ab\u961f4](https://cdn.luogu.com.cn/upload/pic/70456.png)\n\n\u6700\u540e\u67e5\u8be2\u5230\u76ee\u6807\u533a\u95f4\n\n![\u83ab\u961f5](https://cdn.luogu.com.cn/upload/pic/70458.png)\n\n--------\n\n## \u4ee3\u7801\u601d\u8def\n\n1. \u5bf9\u8baf\u95ee\u8fdb\u884c\u6392\u5e8f\n```cpp\nstruct question{\n\tint l,r,num,time;//\u50a8\u5b58\u8be2\u95ee\u7684\u533a\u95f4\u4f4d\u7f6e.num\u5e8f\u53f7,time\u6240\u5728\u65f6\u95f4\u8f74 \n\tbool operator<(const question p1) const{\n\t\tif(i[this->l] != i[p1.l]) return i[this->l] < i[p1.l];\n\t\tif(i[this->r] != i[p1.r]){//\u6ce8\u610f\u5bf9r\u8fdb\u884c\u5206\u5757\u540e,\u4ee4time\u76f8\u8fd1\u7684\u5728\u4e00\u8d77 \n\t\t\treturn this->r < p1.r;\n\t\t}\n\t\treturn this->time < p1.time;\n\t}\n}q[maxn];\n```\n```cpp\n/*\n\u53ef\u80fd\u6709\u4eba\u4e0d\u559c\u6b22\u7ed3\u6784\u4f53\u51fd\u6570,\u5199\u4e00\u4efdcmp\u6bd4\u8f83 \n*/ \nstruct question{\n\tint l,r,num,time;\n};\nbool cmp(question p1, question p2){\n\tif(i[p1.l] != i[p2.l]) return i[p1.l] < i[p2.l];\n\tif(i[p1.r] != i[p2.r]) return i[p1.r] < i[p2.r];\n\treturn p1.time < p2.time;\n}\n```\n\n\n2. \u65f6\u95f4\u8f74\u4e0a\u7684\u79fb\u52a8(\u6838\u5fc3)\n```cpp\n\tfor(; time_now > q[t].time ; time_now--){//\u5c06\u65f6\u95f4\u8f74\u5411\u5de6\u79fb\u52a8 \n\t\t\tc[tim[time_now].num] = tim[time_now].back;\n\t\t\tif(tim[time_now].num <= r_now && tim[time_now].num >= l_now) {//\u4fee\u6539\u4f4d\u7f6e\u5728\u7ef4\u62a4\u533a\u95f4\u5185\n\t\t\t\tif(!cnt[tim[time_now].back]) ans++;\n\t\t\t\tcnt[tim[time_now].in]--;\n\t\t\t\tcnt[tim[time_now].back]++;\n\t\t\t\tif(!cnt[tim[time_now].in]) ans--;\n\t\t\t}\n\t\t}\n\t\tfor(++time_now ; time_now <= q[t].time ; time_now++){//\u5c06\u65f6\u95f4\u8f74\u5411\u53f3\u79fb\u52a8 \n\t\t\tc[tim[time_now].num] = tim[time_now].in;\n\t\t\tif(tim[time_now].num <= r_now && tim[time_now].num >= l_now) {\n\t\t\t\tif(!cnt[tim[time_now].in]) ans++;\n\t\t\t\tcnt[tim[time_now].in]++;\n\t\t\t\tcnt[tim[time_now].back]--;\n\t\t\t\tif(!cnt[tim[time_now].back]) ans--;\n\t\t\t}\n\t\t}\n```\n\n## \u6700\u540e\u9644\u4e0aAC\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int maxn = 1e6+17;\n\nlong long read() {\n\tlong long x=0;\n\tchar ch = getchar();\n\twhile(ch>'9'||ch<'0') {\n\t\tch=getchar();\n\t}\n\twhile(ch<='9'&&ch>='0') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x;\n}\nlong long a[maxn],c[maxn],i[maxn],q_m,cnt_q,cnt[maxn],cnt_time,ans,pri[maxn];\nlong long l_now,r_now,time_now;\nstruct question{\n\tint l,r,num,time;//\u50a8\u5b58\u8be2\u95ee\u7684\u533a\u95f4\u4f4d\u7f6e.num\u5e8f\u53f7,time\u6240\u5728\u65f6\u95f4\u8f74 \n\tbool operator<(const question p1) const{\n\t\tif(i[this->l] != i[p1.l]) return i[this->l] < i[p1.l];\n\t\tif(i[this->r] != i[p1.r]){//\u6ce8\u610f\u5bf9r\u8fdb\u884c\u5206\u5757\u540e,\u4ee4time\u76f8\u8fd1\u7684\u5728\u4e00\u8d77 \n\t\t\treturn this->r < p1.r;\n\t\t}\n\t\treturn this->time < p1.time;\n\t}\n}q[maxn];\nstruct change{\n\tint num,in,back;//\u7b2cnum\u652f\uff0c\u53d8\u6210in\uff0c\u53d8\u56deback \n}tim[maxn];\nint main(){\n\tlong long n=read(),m=read();\n\tq_m = pow(m,(double)2/(double)3);//\u5f53\u5757\u7684\u5927\u5c0f\u4e3am^(2/3)\u65f6,\u901f\u5ea6\u6700\u5feb \n\tfor(int t = 1 ; t <= n ; t++){\n\t\ta[t] = c[t] = read();\n\t\ti[t] = (t-1)/q_m+1;//\u5bf9\u4f4d\u7f6e\u5206\u5757\n\t}\n\tfor(int t = 1 ; t <= m ; t++){\n\t\tchar ch = getchar();\n\t\tif(ch == 'Q') {\n\t\t\t++cnt_q;\n\t\t\tq[cnt_q].l = read();q[cnt_q].r = read();\n\t\t\tq[cnt_q].time = cnt_time,q[cnt_q].num = cnt_q;//\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\u67e5\u8be2,\u8bb0\u5f55\u4e0b\u5b83\u662f\u5728\u54ea\u4e2a\u65f6\u95f4\u8f74\u4e0a \n\t\t}\n\t\telse if(ch == 'R'){\n\t\t\t++cnt_time;//\u5bf9\u6bcf\u6b21\u7684\u4fee\u6539,\u8bb0\u5f55\u4e0b\u65f6\u95f4 \n\t\t\ttim[cnt_time].num=read();\n\t\t\ttim[cnt_time].in = read();\n\t\t\ttim[cnt_time].back = a[tim[cnt_time].num];\n\t\t\ta[tim[cnt_time].num] = tim[cnt_time].in;\n\t\t}\n\t\telse t--;\n\t}\n\tsort(q+1,q+cnt_q+1);\n\tfor(int t = q[1].l ; t <= q[1].r ; t++){//\u66b4\u529b\u6c42\u51fa\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7b54\u6848 \n\t\tif(!cnt[c[t]]) ans++;\n\t\tcnt[c[t]]++;\n\t}\n\tl_now = q[1].l;r_now = q[1].r;\n\tfor(int t = 0 ; t <= q[1].time ; t++){//\u8fdb\u884c\u65f6\u95f4\u8f74\u4e0a\u7684\u79fb\u52a8 \n\t\tc[tim[t].num] = tim[t].in;\n\t\tif(tim[t].num <= r_now && tim[t].num >= l_now) {\n\t\t\tif(!cnt[tim[time_now].in]) ans++;\n\t\t\tcnt[tim[t].in]++;\n\t\t\tcnt[tim[t].back]--;\n\t\t\tif(!cnt[tim[t].back]) ans--;\n\t\t}\n\t}\n\ttime_now = q[1].time;pri[q[1].num] = ans;\n\tfor(int t = 2 ; t <= cnt_q ; t++){\n\t\tfor(; time_now > q[t].time ; time_now--){//\u5c06\u65f6\u95f4\u8f74\u5411\u5de6\u79fb\u52a8 \n\t\t\tc[tim[time_now].num] = tim[time_now].back;\n\t\t\tif(tim[time_now].num <= r_now && tim[time_now].num >= l_now) {\n\t\t\t\tif(!cnt[tim[time_now].back]) ans++;\n\t\t\t\tcnt[tim[time_now].in]--;\n\t\t\t\tcnt[tim[time_now].back]++;\n\t\t\t\tif(!cnt[tim[time_now].in]) ans--;\n\t\t\t}\n\t\t}\n\t\tfor(++time_now ; time_now <= q[t].time ; time_now++){//\u5c06\u65f6\u95f4\u8f74\u5411\u53f3\u79fb\u52a8 \n\t\t\tc[tim[time_now].num] = tim[time_now].in;\n\t\t\tif(tim[time_now].num <= r_now && tim[time_now].num >= l_now) {\n\t\t\t\tif(!cnt[tim[time_now].in]) ans++;\n\t\t\t\tcnt[tim[time_now].in]++;\n\t\t\t\tcnt[tim[time_now].back]--;\n\t\t\t\tif(!cnt[tim[time_now].back]) ans--;\n\t\t\t}\n\t\t}\n\t\tfor( ; l_now < q[t].l ; l_now++){//\u666e\u901a\u83ab\u961f,\u67e5\u627e\u5bf9\u5e94\u7684\u533a\u95f4 \n\t\t\tcnt[c[l_now]]--;\n\t\t\tif(!cnt[c[l_now]]) ans--;\n\t\t}\n\t\tfor(++r_now ; r_now <= q[t].r ; r_now++){\n\t\t\tif(!cnt[c[r_now]]) ans++;\n\t\t\tcnt[c[r_now]]++;\n\t\t}\n\t\tfor(--l_now ; l_now >= q[t].l ; l_now--){\n\t\t\tif(!cnt[c[l_now]]) ans++;\n\t\t\tcnt[c[l_now]]++;\n\t\t}\n\t\tfor(--r_now ; r_now > q[t].r ; r_now--){\n\t\t\tcnt[c[r_now]]--;\n\t\t\tif(!cnt[c[r_now]]) ans--;\n\t\t}\n\t\tl_now = q[t].l;r_now = q[t].r;time_now = q[t].time;pri[q[t].num] = ans;//\u5bf9\u79fb\u8fc7\u7684\u4f4d\u7f6e\u8fdb\u884c\u4fee\u6539 \n\t}\n\tfor(int t = 1 ; t <= cnt_q ; t++){\n\t\tprintf(\"%lld\\n\",pri[t]);\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n",
        "postTime": 1565265202,
        "uid": 93555,
        "name": "\u4e00\u53ea\u5c0f\u5175",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "[\u8fdb\u5165\u6211\u7684blog\u67e5\u770b](https://ctz45562.github.io/2019/03/20/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P1903-%E3%80%90-%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E6%95%B0%E9%A2%9C%E8%89%B2-%E7%BB%B4%E6%8A%A4%E9%98%9F%E5%88%97%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1903)\n\n\u5b89\u5229\u4e00\u4e0b\u65e2\u597d\u5199\u53c8\u7f8e\u89c2\u7684\u6811\u5957\u6811\uff08\u5927\u96fe\n\n\u601d\u8def\u548c[HH\u7684\u9879\u94fe](https://www.luogu.org/problemnew/show/P1972)\u4e00\u6837\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u4e0b\u4e00\u4e2a\u548c\u5b83\u76f8\u540c\u989c\u8272\u7684\u4f4d\u7f6e$nex[i]$\uff0c\u67e5\u8be2\u65f6\u5c31\u627e$nex[i]>R$\u4e14$L\\le i\\le R$\u7684\u4e2a\u6570\uff08$[L,R]$\u4e3a\u5f85\u67e5\u8be2\u533a\u95f4\uff0c\u4e0b\u540c\uff09\u3002\n\n\u4e24\u4e2a\u9650\u5236\u6761\u4ef6\u81ea\u7136\u60f3\u5230\u6811\u5957\u6811\u3002\u5916\u5c42\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4$nex[i]$\uff0c\u6bcf\u4e2a\u8282\u70b9\u5185\u90e8\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u6216\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4f4d\u7f6e\u3002\u67e5\u8be2\u65f6\u76f4\u63a5\u67e5\u5916\u5c42$[R+1,n+1]$\uff08\u8fd9\u91cc\u63d0\u524d\u628a$nex[i]$\u4e3a$0$\u7684\u90fd\u6539\u4e3a$n+1$\uff09\u4e2d\uff0c\u5185\u5c42\u4f4d\u4e8e$[L,R]$\u7684\u6570\u91cf\u3002\n\n\u4e0d\u8fc7\u4fee\u6539\u6bd4\u8f83\u9ebb\u70e6\uff1a\n\n\u8bb0$i$\u4e3a\u4fee\u6539\u70b9\uff0c$last$\u4e3a\u4e0a\u4e00\u4e2a\u548c$i$\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\uff08\u53ef\u4ee5\u5f00\u6570\u7ec4\u8bb0\u4e0b\u6765\uff0c\u60f3\u5077\u61d2\u7684\u8bdd\u76f4\u63a5\u5f00\u5e73\u8861\u6811\u67e5\u4e5f\u884c\uff09\uff0c$j$\u4e3a$i$\u524d\u9762\u7b2c\u4e00\u4e2a\u989c\u8272\u4e3a\u8981\u4fee\u6539\u7684\u989c\u8272\u7684\u4f4d\u7f6e\uff0c\u4e8c\u5143\u7ec4$(x,y)$\u4e3a\u5916\u5c42\u4e3a$x$\uff0c\u5185\u5c42\u4e3a$y$\u3002\u4fee\u6539\u64cd\u4f5c\u5c31\u4e3a\uff1a\n\n- \u5220\u9664$(i,last)$\n- \u63d2\u5165$(nex[i],last)$\n- \u8d4b\u503c$nex[last]=nex[i]$\n- \u5220\u9664$(nex[i],i)$\n- \u63d2\u5165$(nex[j],i)$\n- \u5220\u9664$(nex[j],j)$\n- \u63d2\u5165$(i,j)$\n- \u8d4b\u503c$nex[i]=nex[j],nex[j]=i$\n\n\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u753b\u4e2a\u56fe\uff0c\u89c2\u5bdf\u4e00\u4e0b\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u4f1a\u5bf9$last,nex[i],j,nex[j]$\u4ea7\u751f\u7684\u5f71\u54cd\u3002\n\n\u56e0\u4e3a\u6709\u53ef\u80fd$j$\u6216$last$\u4e3a$0\u200b$\uff0c\u9700\u8981\u8bb0\u4e00\u4e0b\u6bcf\u79cd\u989c\u8272\u5f53\u524d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5224\u65ad\u4fee\u6539\u3002\n\n\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811$2900ms$\uff08$O_2$\uff09\uff0c\u6811\u72b6\u6570\u7ec4\u5957\u7ebf\u6bb5\u6811$1300ms$\uff08$O_2$\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 50005\n#define inf 0x3f3f3f3f\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n\tT x=0;\n\tint y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nint n;\n#define ls(x) ls[x]\n#define rs(x) rs[x]\nstruct Treap{\n\tint dat[maxn<<2],ls[maxn<<2],rs[maxn<<2],siz[maxn<<2],ra[maxn<<2],cnt;\n\tinline void update(int node){\n\t\tsiz[node]=siz[ls(node)]+siz[rs(node)]+1;\n\t}\n\tvoid right(int &node){\n\t\tint rec=ls(node);\n\t\tls(node)=rs(rec);\n\t\trs(rec)=node;\n\t\tnode=rec;\n\t\tupdate(rs(node)),update(node);\n\t}\n\tvoid left(int &node){\n\t\tint rec=rs(node);\n\t\trs(node)=ls(rec);\n\t\tls(rec)=node;\n\t\tnode=rec;\n\t\tupdate(ls(node)),update(node);\n\t}\n\tvoid insert(int &node,int d){\n\t\tif(!node){\n\t\t\tnode=++cnt;\n\t\t\tra[node]=ran(),dat[node]=d,siz[node]=1;\n\t\t\treturn;\n\t\t}\n\t\tif(dat[node]<d){\n\t\t\tinsert(rs(node),d);\n\t\t\tif(ra[rs(node)]>ra[node])left(node);\n\t\t}\n\t\telse {\n\t\t\tinsert(ls(node),d);\n\t\t\tif(ra[ls(node)]>ra[node])right(node);\n\t\t}\n\t\t++siz[node];\n\t}\n\tvoid del(int &node,int d){\n\t\tif(dat[node]==d){\n\t\t\tif(ls(node)&&rs(node)){\n\t\t\t\tif(ra[ls(node)]>ra[rs(node)])right(node),del(rs(node),d);\n\t\t\t\telse left(node),del(ls(node),d);\n\t\t\t\t--siz[node];\n\t\t\t}\n\t\t\telse node=ls(node)|rs(node);\n\t\t\treturn;\n\t\t}\n\t\tif(dat[node]<d)del(rs(node),d);\n\t\telse del(ls(node),d);\n\t\t--siz[node];\n\t}\n\tint getpre(int node,int d){\n\t\tint ans=0;\n\t\twhile(node){\n\t\t\tif(dat[node]<d)ans=max(ans,dat[node]),node=rs(node);\n\t\t\telse node=ls(node);\n\t\t}\n\t\treturn ans;\n\t}\n}tr;\nstruct Data_Segment_Tree{\n\tint ls[maxn<<5],rs[maxn<<5],sum[maxn<<5],cnt;\n\tvoid add(int poi,int l,int r,int &node,int d){\n\t\tif(!node)node=++cnt;\n\t\tsum[node]+=d;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tif(poi<=mid)add(poi,l,mid,ls(node),d);\n\t\telse add(poi,mid+1,r,rs(node),d);\n\t}\n\tint ask(int L,int R,int l,int r,int node){\n\t\tif(!node)return 0;\n\t\tif(L<=l&&R>=r)return sum[node];\n\t\tint mid=l+r>>1,ans=0;\n\t\tif(L<=mid)ans=ask(L,R,l,mid,ls(node));\n\t\tif(R>mid)ans+=ask(L,R,mid+1,r,rs(node));\n\t\treturn ans;\n\t}\n}dst;\n#undef ls\n#undef rs\n/*==============\u6811\u72b6\u6570\u7ec4\u5957\u7ebf\u6bb5\u6811===============*/\nstruct Binary_Indexed_Tree{\n\tint root[maxn];\n#define lowb(x) (x&-x)\n\tinline void add(int x,int pl,int d){\n\t\twhile(x<=n+1)dst.add(pl,1,n,root[x],d),x+=lowb(x);\n\t}\n\tinline int ask(int x,int l,int r){\n\t\tint ans=0;\n\t\twhile(x)ans+=dst.ask(l,r,1,n,root[x]),x-=lowb(x);\n\t\treturn ans;\n\t}\n}bit;\nint root[1000005],fir[1000005],nex[maxn],pre[1000005],a[maxn];\ninline void change(int i,int d){\n\tif(a[i]==d)return;\n\tint last=tr.getpre(root[a[i]],i),j=tr.getpre(root[d],i);\n\tif(fir[a[i]]==i)fir[a[i]]=nex[i];\n\tif(last){\n\t\tbit.add(i,last,-1);\n\t\tbit.add(nex[i],last,1);\n\t\tnex[last]=nex[i];\n\t}\n\tbit.add(nex[i],i,-1);\n\tif(j){\n\t\tbit.add(nex[j],i,1);\n\t\tbit.add(nex[j],j,-1);\n\t\tbit.add(i,j,1);\n\t\tnex[i]=nex[j];\n\t\tnex[j]=i;\n\t}\n\telse {\n\t\tbit.add(fir[d],i,1);\n\t\tnex[i]=fir[d],fir[d]=i;\n\t}\n\ttr.del(root[a[i]],i),tr.insert(root[d],i);\n\ta[i]=d;\n}\n/*==================End====================*/\n/*=========================================*/\n/*==============\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811===============*/\n#define ls(x) x<<1\n#define rs(x) x<<1|1\nstruct Next_Segment_Tree{\n    int root[maxn<<2];\n    void add(int poi,int l,int r,int node,int pl,int d){\n        dst.add(pl,1,n,root[node],d);\n        if(l==r)return;\n        int mid=l+r>>1;\n        if(poi<=mid)add(poi,l,mid,ls(node),pl,d);\n        else add(poi,mid+1,r,rs(node),pl,d);\n    }\n    int ask(int L,int l,int r,int node,int ll,int rr){\n        if(L<=l)return dst.ask(ll,rr,1,n,root[node]);\n        int mid=l+r>>1;\n        return (L<=mid?ask(L,l,mid,ls(node),ll,rr):0)+ask(L,mid+1,r,rs(node),ll,rr);\n    }\n}nst;\nint root[1000005],fir[1000005],nex[maxn],pre[1000005],a[maxn];\ninline void change(int i,int d){\n    if(a[i]==d)return;\n    int last=tr.getpre(root[a[i]],i),j=tr.getpre(root[d],i);\n    if(fir[a[i]]==i)fir[a[i]]=nex[i];\n    if(last){\n        nst.add(i,1,n+1,1,last,-1);\n        nst.add(nex[i],1,n+1,1,last,1);\n        nex[last]=nex[i];\n    }\n    nst.add(nex[i],1,n+1,1,i,-1);\n    if(j){\n        nst.add(nex[j],1,n+1,1,i,1);\n        nst.add(nex[j],1,n+1,1,j,-1);\n        nst.add(i,1,n+1,1,j,1);\n        nex[i]=nex[j];\n        nex[j]=i;\n    }\n    else {\n        nst.add(fir[d],1,n+1,1,i,1);\n        nex[i]=fir[d],fir[d]=i;\n    }\n    tr.del(root[a[i]],i),tr.insert(root[d],i);\n    a[i]=d;\n}\n/*==============End===============*/\nint main(){\n\tn=read();\n\tint m=read();\n\tfor(register int i=1;i<=n;++i){\n\t\ta[i]=read(),nex[pre[a[i]]]=i,pre[a[i]]=i;\n\t\tif(!fir[a[i]])fir[a[i]]=i;\n\t\ttr.insert(root[a[i]],i);\n\t}\n\tfor(register int i=1;i<=n;++i){\n\t\tif(!nex[i])nex[i]=n+1;\n\t\tbit.add(nex[i],i,1);\n\t}\n\tfor(register int i=1;i<=1000000;++i)\n\t\tif(!fir[i])fir[i]=n+1;\n\tchar s[2];\n\tint l,r;\n\twhile(m--){\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='Q')l=read(),r=read(),printf(\"%d\\n\",bit.ask(n+1,l,r)-bit.ask(r,l,r));\n\t\telse l=read(),r=read(),change(l,r);\n\t}\n}\n\n```\n\n",
        "postTime": 1553069775,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "## [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/9991671.html)\n\n\u83ab\u961f\u5b9e\u9645\u5f88\u7b80\uff08du\uff09\u5355\uff08liu\uff09\n\n\u4f9d\u7167\u67d0\u4f4ddalao\u7684\u8bf4\u6cd5\uff0c\u5c31\u662f\u4e24\u53ea\u5c0f\u624b\uff08two-pointers\uff09\u778e\u8df3\n\n## \u4e00.\u83ab\u961f\uff08\u9759\u6001\u83ab\u961f\uff09\n\n\u6211\u4eec\u4ee5[Luogu P3901 \u6570\u5217\u627e\u4e0d\u540c](https://www.luogu.org/problemnew/show/P3901)\u4e3a\u4f8b\u8bb2\u4e00\u4e0b\u9759\u6001\u83ab\u961f\n\n\u8fd9\u9053\u9898\u662f\u4e2a\u7eff\u9898\uff0c\u56e0\u4e3a\u6570\u636e\u6bd4\u8f83\u5f31\uff0c\u4f46\u771f\u662f\u4e00\u9053\u826f\u5fc3\u7684\u83ab\u961f\u7ec3\u624b\u9898\n\n\u83ab\u961f\u662f\u7531\u524d\u56fd\u5bb6\u961f\u961f\u957f\u83ab\u6d9b\u53d1\u660e\u7684\n\n\u83ab\u961f\u7b97\u6cd5\u7684\u7cbe\u9ad3\u5c31\u662f\u901a\u8fc7\u5408\u7406\u5730\u5bf9\u8be2\u95ee\u6392\u5e8f\uff0c\u7136\u540e\u4ee5\u8f83\u4f18\u7684\u987a\u5e8f\u66b4\u529b\u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u3002\u5904\u7406\u5b8c\u4e00\u4e2a\u8be2\u95ee\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684\u4fe1\u606f\u5f97\u5230\u4e0b\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\u7684\u7b54\u6848\u3002~~\uff08\u4e24\u4e2a\u5c0f\u624b\u778e\u8df3\uff09~~\n\n\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u77e5\u9053\u533a\u95f4[1,5]\u6bcf\u4e2a\u6570\u7684\u6570\u91cf\uff0c\u5982\u4f55\u6c42\u51fa[2,6]\u6bcf\u4e2a\u6570\u7684\u6570\u91cf\n\n\u7b97\u6cd51\uff1a\u66b4\u529b\u626b\u4e00\u904d~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u7b97\u6cd52\uff1a\u73c2\u4ee5\u5728\u533a\u95f4[1,5]\u7684\u57fa\u7840\u4e0a\uff0c\u53bb\u6389\u4f4d\u7f6e1\uff08\u5373\u5c06\u5de6\u7aef\u70b9\u53f3\u79fb\u4e00\u4f4d\uff09\uff0c\u52a0\u4e0a\u4f4d\u7f6e6\uff08\u5373\u5c06\u53f3\u7aef\u70b9\u53f3\u79fb\u4e00\u4f4d\uff09\uff0c\u5f97\u5230\u533a\u95f4[2,6]\u7684\u7b54\u6848\u3002\n\n\u5982\u679c\u6309\u8fd9\u6837\u5199\uff0c\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u6784\u9020\u6570\u636e\u5c31\u80fd\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u628a\u7b97\u6cd52\u4e5f\u9001\u4e0a\u5929\uff1a\u5148\u8be2\u95ee[1,2]\uff0c\u518d\u8be2\u95ee[99999,100000],\u591a\u91cd\u590d\u51e0\u6b21\u5c31gg\n\n\u4f46\u83ab\u961f\u7b97\u6cd5\u662f\u7b97\u6cd52\u7684\u6539\u8fdb\u7248\n\n\u8981\u8fdb\u884c\u5408\u7406\u7684\u6392\u5e8f\uff0c\u4f7f\u5f97\u6bcf\u4e24\u4e2a\u533a\u95f4\u7684\u8ddd\u79bb\u6700\u5c0f\n\n\u4f46\u5982\u4f55\u8fdb\u884c\u5408\u7406\u7684\u6392\u5e8f\uff1f\n\n\u83ab\u961f\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u4e2a\u6392\u5e8f\u65b9\u6848\uff1a\u5c06\u539f\u5e8f\u5217\u4ee5$\\sqrt n$\u4e3a\u4e00\u5757\u8fdb\u884c\u5206\u5757\uff08**\u5206\u5757\u7684\u5927\u5c0f\u4e5f\u73c2\u4ee5\u8c03\u6574**\uff09\uff0c\u6392\u5e8f\u7b2c\u4e00\u5173\u952e\u5b57\u662f\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u6240\u5728\u5757\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u662f\u8be2\u95ee\u7684\u53f3\u7aef\u70b9\u672c\u8eab\u7684\u4f4d\u7f6e\uff0c\u90fd\u662f\u5347\u5e8f\u3002\u7136\u540e\u6211\u4eec\u7528\u4e0a\u9762\u63d0\u5230\u7684\u201c\u79fb\u52a8\u5f53\u524d\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u201d\u7684\u65b9\u6cd5\uff0c\u6309\u987a\u5e8f\u6c42\u6bcf\u4e2a\u8be2\u95ee\u533a\u95f4\u7684\u7b54\u6848\uff0c\u79fb\u52a8\u6bcf\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u53ef\u4ee5\u6c42\u51fa\u4e0b\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u3002\n\n\u8fd9\u5c31\u662f\u4e00\u822c\u7684\u83ab\u961f\u6392\u5e8f\n\n```cpp\ninline bool cmp(register query a,register query b)\n{\n\treturn a.bl==b.bl?a.r<b.r:a.bl<b.bl;\n}\n```\n\n\u4f46\u7531\u4e8e\u51fa\u9898\u4eba\u8fc7\u4e8e~~\u6bd2\u7624~~\n\n\u53c8\u591a\u51fa\u4e00\u79cd\u4f18\u5316\uff0c\u53eb\u505a\u5947\u5076\u4f18\u5316\n\n**\u6309\u5947\u5076\u5757\u6392\u5e8f**\u3002\u8fd9\u4e5f\u662f\u6bd4\u8f83\u901a\u7528\u7684\u3002\u5982\u679c\u533a\u95f4\u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\uff1b\u5982\u679c\u76f8\u540c\uff0c\u5947\u5757\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u5076\u5757\u6309\u53f3\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u6392\u3002\n\n```cpp\ninline bool cmp(register query a,register query b)\n{\n    return a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\n```\n\n\u83ab\u961f\u6838\u5fc3\u4ee3\u7801qaq\uff1a\n\n```cpp\nsort(q+1,q+m+1,cmp); //\u8bb2\u8be2\u95ee\u6309\u4e0a\u8ff0\u65b9\u6cd5\u6392\u5e8f \nint l=1,r=0; //\u5f53\u524d\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u521d\u503c\uff08\u4e24\u53ea\u5c0f\u624btwo-pointers\uff09 \nfor(register int i=1;i<=m;++i) //\u5bf9\u6392\u5e8f\u540e\u7684\u8be2\u95ee\u4e00\u4e2a\u4e2a\u8f6c\u79fb \n{\n\tint ll=q[i].l,rr=q[i].r; //\u672c\u6b21\u8be2\u95ee\u7684\u533a\u95f4 \n\t//\u8f6c\u79fb\uff0c++--\u8fd9\u4e9b\u4e1c\u897f\u6bd4\u8f83\u5bb9\u6613\u5199\u9519\uff0c\u9700\u8981\u6ce8\u610f \n\twhile(l<ll)\n\t\tdel(l++);\n\twhile(l>ll)\n\t\tadd(--l);\n\twhile(r<rr)\n\t\tadd(++r);\n\twhile(r>rr)\n\t\tdel(r--);\n\tans[q[i].id]=sth; //\u8be2\u95ee\u662f\u6392\u8fc7\u5e8f\u7684\uff0c\u5b58\u5230\u7b54\u6848\u6570\u7ec4\u91cc\u9700\u8981\u8fd4\u56de\u539f\u987a\u5e8f \n}\n```\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51fa\u7b54\u6848\u4e86\uff01\n\n\u2014\u2014\u53ef\u662f\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f\u4ec0\u4e48\uff1f\n\n#### \u5927\u7ea6\u662f$O(n\\sqrt n)$\n\nLuogu P3901 AC\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#define N 100005\nusing namespace std;\ninline int read()\n{\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\nint v[N],blocksize=0;\nstruct query{\n\tint l,r,id,bl;\n}q[N];\nint sum[N];\nbool ans[N];\nint cnt=0;\ninline void add(register int x)\n{\n\tif(++sum[v[x]]==1)\n\t\t++cnt; \n}\ninline void del(register int x)\n{\n\tif(--sum[v[x]]==0)\n\t\t--cnt;\n}\ninline bool cmp(register query a,register query b)\n{\n    return a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\nint main()\n{\n\tmemset(sum,0,sizeof(sum));\n\tint n=read(),m=read();\n\tblocksize=sqrt(n);\n\tfor(register int i=1;i<=n;++i)\n\t\tv[i]=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint l=read(),r=read();\n\t\tq[i]=(query){l,r,i,(l-1)/blocksize+1};\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tint l=1,r=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint ll=q[i].l,rr=q[i].r;\n\t\twhile(l<ll)\n\t\t\tdel(l++);\n\t\twhile(l>ll)\n\t\t\tadd(--l);\n\t\twhile(r<rr)\n\t\t\tadd(++r);\n\t\twhile(r>rr)\n\t\t\tdel(r--);\n\t\tans[q[i].id]=(cnt==rr-ll+1)?1:0;\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t\tif(ans[i])\n\t\t\tputs(\"Yes\");\n\t\telse\n\t\t\tputs(\"No\");\n\treturn 0;\n } \n```\n\n### \u4f8b\u9898\uff1a\n\n1.[Luogu P3901 \u6570\u5217\u627e\u4e0d\u540c](https://www.luogu.org/problemnew/show/P3901)\n\n[~~\u8bb2\u89e3\u6bd4\u4e0a\u9762\u66b4\u529b~~](https://www.cnblogs.com/yzhang-rp-inf/p/9971041.html )\n\n2.[Luogu CF375D Tree and Queries](https://www.luogu.org/problemnew/show/CF375D)\n\n[\u6811\u94fe\u5256\u5206\u540e\u8dd1\u83ab\u961f](https://www.cnblogs.com/yzhang-rp-inf/p/9954741.html )\n\n## \u4e8c.\u52a8\u6001\u83ab\u961f\uff08\u5355\u70b9\u4fee\u6539\uff09\n\n\u5199\u5b8c\u4e86\u4e0a\u9762\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u666e\u901a\u7684\u83ab\u961f\u7b97\u6cd5\u6ca1\u6709\u652f\u6301\u4fee\u6539\u3002\u90a3\u4e48\u5982\u4f55\u6539\u9020\u8be5\u7b97\u6cd5\u4f7f\u5b83\u652f\u6301\u4fee\u6539\u5462\uff1f\n\n\u83ab\u961f\u4fd7\u79f0**\u4f18\u96c5\u7684\u66b4\u529b**\n\n\u6211\u4eec\u4ee5[Luogu P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217](https://www.luogu.org/problemnew/show/P1903)\u8bb2\u89e3\u4e00\u4e0b\u52a8\u6001\u83ab\u961f\n\n\u90a3\u4e48\u6211\u4eec\u6539\u9020\u83ab\u961f\u7b97\u6cd5\u7684\u601d\u8def\u4e5f\u53ea\u6709\u4e00\u4e2a\uff1a\u6539\u9020\u8be2\u95ee\u6392\u5e8f\u7684\u65b9\u5f0f\uff0c\u7136\u540e\u7ee7\u7eed\u66b4\u529b\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u628a\u67e5\u8be2\u64cd\u4f5c\u548c\u4fee\u6539\u64cd\u4f5c**\u5206\u522b**\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u5728\u8bb0\u5f55\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u79bb\u672c\u6b21\u67e5\u8be2**\u6700\u8fd1\u7684\u4fee\u6539**\u7684\u4f4d\u7f6e\n\n\u7136\u540e\u5957\u4e0a\u83ab\u961f\u7684\u677f\u5b50\uff0c\u4e0e\u666e\u901a\u83ab\u961f\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u4f60\u9700\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8fdb\u884c\u4e86\u51e0\u6b21\u4fee\u6539\n\n\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u65f6\uff0c\u5148\u4ece\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u201c\u7a7f\u8d8a\u201d\u5230\u5f53\u524d\u8be2\u95ee\u7684\u65f6\u95f4\uff1a\u5982\u679c\u5f53\u524d\u8be2\u95ee\u7684\u65f6\u95f4\u66f4\u9760\u540e\uff0c\u5219\u987a\u5e8f\u6267\u884c\u6240\u6709\u4fee\u6539\uff0c\u76f4\u5230\u8fbe\u5230\u5f53\u524d\u8be2\u95ee\u65f6\u95f4\uff1b\u5982\u679c\u5f53\u524d\u8be2\u95ee\u7684\u65f6\u95f4\u66f4\u9760\u524d\uff0c\u5219\u201c\u65f6\u5149\u5012\u6d41\u201d\uff0c\u8fd8\u539f\u6240\u6709\u591a\u4f59\u7684\u4fee\u6539\u3002\u8fdb\u884c\u63a8\u79fb\u65f6\u95f4\u7684\u64cd\u4f5c\u65f6\uff0c\u5982\u679c\u6d89\u53ca\u5230\u5f53\u524d\u533a\u95f4\u5185\u7684\u4f4d\u7f6e\u7684\u4fee\u6539\uff0c\u8981\u5bf9\u7b54\u6848\u8fdb\u884c\u76f8\u5e94\u7684\u7ef4\u62a4\u3002\n\n\u6392\u5e8f\u6709\u4e09\u4e2a\u5173\u952e\u5b57\uff1a\n\n#### 1.\u5de6\u7aef\u70b9\u6240\u5728\u5757\u6570 2.\u53f3\u7aef\u70b9\u6240\u5728\u5757\u6570 3.\u5728\u8fd9\u6b21\u4fee\u6539\u4e4b\u524d\u67e5\u8be2\u7684\u6b21\u6570\n\n```cpp\ninline bool cmp(register query a,register query b)\n{\n\treturn a.bll!=b.bll?a.bll<b.bll:(a.blr!=b.blr?a.blr<b.blr:a.pre<b.pre);\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\uff0c\u4ee3\u7801\u4e2d\u6709\u8be6\u7ec6\u6ce8\u91ca\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#define N 50005\nusing namespace std;\ninline int read()\n{\n\tregister int x=0,f=1;register char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\ninline void write(register int x)\n{\n\tif(!x)putchar('0');if(x<0)x=-x,putchar('-');\n\tstatic int sta[25];int tot=0;\n\twhile(x)sta[tot++]=x%10,x/=10;\n\twhile(tot)putchar(sta[--tot]+48);\n}\nstruct change{    //\u8bb0\u5f55\u4fee\u6539\u64cd\u4f5c\u7684\u7ed3\u6784\u4f53\uff0cplace\u4e3a\u4fee\u6539\u7684\u4f4d\u7f6e\uff0cpre\u662f\u4fee\u6539\u4e4b\u524d\u7684\u503c\uff0csuf\u662f\u4fee\u6539\u4e4b\u540e\u7684\u503c \n\tint place,pre,suf;\n}cg[N];\nstruct query{     //\u8bb0\u5f55\u67e5\u8be2\u64cd\u4f5c\u7684\u7ed3\u6784\u4f53\uff0cl\uff0cr\u4e3a\u67e5\u8be2\u5de6\u53f3\u7aef\u70b9\uff0cpre\u8868\u793a\u4e4b\u524d\u6709\u8fc7\u51e0\u6b21\u4fee\u6539\uff0cid\u8868\u793a\u8fd9\u662f\u7b2c\u51e0\u6b21\u67e5\u8be2\uff0cbll\uff0cblr\u8868\u793a\u5de6\u53f3\u7aef\u70b9\u6240\u5728\u7684\u5757 \n\tint l,r,pre,id,bll,blr;\n}q[N];\nint a[N],blocksize=0,p[1000001],ans[N];\ninline bool cmp(register query a,register query b) //\u6309\u4e0a\u8ff0\u4e09\u4e2a\u5173\u952e\u5b57\u6392\u5e8f \n{\n\treturn a.bll!=b.bll?a.bll<b.bll:(a.blr!=b.blr?a.blr<b.blr:a.pre<b.pre);\n}\nint main()\n{\n\tint n=read(),m=read(),tota=0,totb=0;\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tchar ch=getchar();\n\t\twhile(ch!='R'&&ch!='Q')\n\t\t\tch=getchar();\n\t\tif(ch=='R') //\u4fee\u6539 \n\t\t{\n\t\t\tcg[++tota].place=read(),cg[tota].suf=read();\n\t\t\tcg[tota].pre=a[cg[tota].place]; //\u4e3a\u4e86\u65b9\u4fbf\u5148\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539 \n\t\t\ta[cg[tota].place]=cg[tota].suf;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint l=read(),r=read();\n\t\t\tq[++totb]=(query){l,r,tota,totb,0};\n\t\t}\n\t}\n\tblocksize=ceil(exp((log(n)+log(tota))/3)); //\u5947\u5999\u7684\u5757\u7684\u5927\u5c0f \n\tfor(register int i=1;i<=totb;++i)\n\t\tq[i].bll=(q[i].l-1)/blocksize+1,q[i].blr=(q[i].r-1)/blocksize+1;\n\tfor(register int i=tota;i>=1;--i) //\u8fd8\u539f\u6570\u7ec4 \n\t\ta[cg[i].place]=cg[i].pre;\n\tsort(q+1,q+totb+1,cmp); //\u6392\u5e8f \n\tint l=1,r=0,num=0,ti=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint ll=q[i].l,rr=q[i].r,t=q[i].pre;\n\t    //\u6b63\u5e38\u83ab\u961f\u64cd\u4f5c \n\t\twhile(ll<l)\n\t\t\tnum+=!p[a[--l]]++;\n\t\twhile(ll>l)\n\t\t\tnum-=!--p[a[l++]];\n\t\twhile(rr>r)\n\t\t\tnum+=!p[a[++r]]++;\n\t\twhile(rr<r)\n\t\t\tnum-=!--p[a[r--]];\n\t\twhile(t<ti) //\u5f53\u672c\u6b21\u67e5\u8be2\u65f6\u4fee\u6539\u7684\u6b21\u6570\u5c0f\u4e8e\u5df2\u7ecf\u4fee\u6539\u7684\u6b21\u6570\uff0c\u65f6\u5149\u5012\u6d41 \uff08\u8fd8\u539f\u4fee\u6539\uff09 \n\t\t{\n\t\t\tint pla=cg[ti].place;\n\t\t\tif(l<=pla&&pla<=r)\n\t\t\t\tnum-=!--p[a[pla]];\n\t\t\ta[pla]=cg[ti--].pre;\n\t\t\tif(l<=pla&&pla<=r)\n\t\t\t\tnum+=!p[a[pla]]++;\n\t\t}\n\t\twhile(t>ti) //\u5f53\u672c\u6b21\u67e5\u8be2\u65f6\u4fee\u6539\u7684\u6b21\u6570\u5927\u4e8e\u5df2\u7ecf\u4fee\u6539\u7684\u6b21\u6570\uff0c\u7a7f\u8d8a \uff08\u628a\u8be5\u4fee\u6539\u7684\u4fee\u6539\uff09 \n\t\t{\n\t\t\tint pla=cg[++ti].place;\n\t\t\tif(l<=pla&&pla<=r)\n\t\t\t\tnum-=!--p[a[pla]];\n\t\t\ta[pla]=cg[ti].suf;\n\t\t\tif(l<=pla&&pla<=r)\n\t\t\t\tnum+=!p[a[pla]]++;\n\t\t}\n\t\tans[q[i].id]=num;\n\t}\n\tfor(register int i=1;i<=totb;++i)\n\t{\n\t\twrite(ans[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1542809220,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217\u3011"
    },
    {
        "content": "#\u5e26\u4fee\u6539\u83ab\u961f\u8bb2\u89e3\n\n\n\n##\u9605\u524d\u63d0\u793a\uff1a\n\n\u62e5\u6709\u666e\u901a\u83ab\u961f\u7684\u57fa\u7840\u77e5\u8bc6\uff1b\u7406\u89e3\u83ab\u961f\u7684\u601d\u60f3\uff1b\n\n\n##\u7b80\u4ecb\uff1a\n\n\u83ab\u961f\u652f\u6301\u7684\u662f\u79bb\u7ebf\u64cd\u4f5c\uff0c\u666e\u901a\u83ab\u961f\u53ea\u652f\u6301\u67e5\u8be2\u64cd\u4f5c\uff1b\n\n\u800c\u5e26\u4fee\u6539\u83ab\u961f\u8fd8\u652f\u6301\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\u3002\n\n\n##\u539f\u7406\uff1a\n\n\n\u666e\u901a\u83ab\u961f\u6bcf\u4e00\u4e2a\u8be2\u95ee\u6709L\uff0cR\uff0cID\u4e09\u4e2a\u5c5e\u6027\uff1b\u56e0\u4e3a\u53ea\u6709\u67e5\u8be2\u64cd\u4f5c\uff0c\u6240\u4ee5\u6539\u53d8\u5176\u67e5\u8be2\u987a\u5e8f\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff1b\u800c\u52a0\u5165\u5355\u70b9\u4fee\u6539\u540e\uff0c\u5c31\u4e0d\u80fd\u4efb\u610f\u6539\u53d8\u987a\u5e8f\uff0c\u8fd9\u4f1a\u5f71\u54cd\u6700\u7ec8\u7b54\u6848\uff1b\u5e26\u4fee\u6539\u83ab\u961f\u7684\u601d\u8def\u5c31\u662f\u5728\u67e5\u8be2\u4e2d\u52a0\u4e00\u4e2a\u5c5e\u6027TM\uff0c\u8868\u793a\u5728\u539f\u987a\u5e8f\u4e2d\u8be5\u67e5\u8be2\u4e4b\u524d\u79bb\u5176\u6700\u8fd1\u7684\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u7684ID\uff1b\u6bcf\u6b21\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u524d\u90fd\u6267\u884c\u5728\u5b83\u4e4b\u524d\u7684\u4fee\u6539\uff0c\u5e76\u5c06\u5728\u5b83\u4e4b\u540e\u7684\u4fee\u6539\u64cd\u4f5c\u4e2d\u5df2\u6267\u884c\u7684\u53d6\u6d88\uff1b\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u6539\u53d8\u539f\u59cb\u7684\u987a\u5e8f\u4e86\u3002\n\n\n##\u5b9e\u73b0\n\n\n\u5728\u5b58\u50a8\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u524d\u5411\u661f\u601d\u60f3\uff1aPRE\uff0cCOLOR\uff0cPOS\uff0c\u5206\u522b\u8868\u793a\u524d\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u3001\u8be5\u4fee\u6539\u64cd\u4f5c\u4fee\u6539\u7684\u989c\u8272\u3001\u64cd\u4f5c\u7684\u6570\uff1b\u90a3\u904d\u5386\u65f6\u53ea\u9700\u4f9d\u6b21\u5411\u524d\u5373\u53ef\uff1b\n\n\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e2d\u5c06\u4f1a\u770b\u89c1\n\nfor (int j=e[i-1].tm+1;j<=e[i].tm;++j)\u5373\u53ef\u5b9e\u73b0\u4ece\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u53ef\u80fd\u6ca1\u6709\u88ab\u64cd\u4f5c\u8fc7\u7684\u4fee\u6539\n\nfor (int j=e[i-1].tm;j>=e[i].tm+1;--j)\u5373\u53ef\u5b9e\u73b0\u4ece\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u53ef\u80fd\u6267\u884c\u8fc7\u7684\u591a\u4f59\u7684\u4fee\u6539\n\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\nint CL=1,CR=0,ans=0,tim,n,m,k,cnt=0,sz=0;\nint color[50010],num[1000010];//num\u5b58\u8be5\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570 \nint las[50010],answer[200010];\n    //las\u5b58x\u4e2a\u6570\u7684\u524d\u4e00\u4e2a\u989c\u8272\uff0c\u5177\u4f53\u64cd\u4f5c\u7c7b\u4f3c\u4e8e\u524d\u5411\u661f \nbool vis[50010];//\n\nstruct XY{ //\u5b58sz\u4e2a\u8be2\u95ee \n    int L,R,id,tm;\n}e[200010];\nstruct XX{ //\u5b58cnt\u4e2a\u4fee\u6539 \n    int ps,cl,pre;\n}w[200010];\n\n\nbool cmp(XY a,XY b){ //\u83ab\u961f\u7684\u6392\u5e8f\uff08\u4e0d\u6e05\u695a\u7684\u53ef\u4ee5\u5148\u505a\u83ab\u961f\u7684\u6a21\u677f\uff09 \n    return (a.L/tim)==(b.L/tim)? a.R<b.R : a.L<b.L;\n};\n\nvoid cala(int x){ //\u76f8\u5f53\u4e8e\u83ab\u961f\u7684Inc\u548cdec\n    if (vis[x]){\n        if ((--num[color[x]])==0) --ans;\n            //\u5982\u679c\u6b64\u6b21\u51cf\u6389\u7684\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u989c\u8272\u6570-1 \n    }else{\n        if ((++num[color[x]])==1) ++ans;\n            //\u5982\u679c\u662f\u65b0\u589e\u7684\u6570\uff0c\u5219\u989c\u8272\u6570+1 \n    }\n    vis[x]=!vis[x]; //vis\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6807\u8bc6\u7b26\n                    //\uff08\u5373\u662f\u5426\u4f1a\u5f71\u54cd\u6216\u5728\u4e0a\u4e00\u6b21\u67e5\u8be2\u4e2d\uff09 \n                    //\u800c\u66f4\u65b0\u8fc7\u7b54\u6848\u540e\u5e94\u5c06\u5176\u91cd\u7f6e\uff08\u53d6\u53cd\uff09\n                    //\u8bbe\u5b9a\u4e3a\u53d6\u53cd\u5219\u5728change\u64cd\u4f5c\u4e2d\u4fbf\u4e8e\u5b9e\u73b0 \n}  \n\nvoid change(int x,int c){ //\u5c06\u7b2cx\u4e2a\u6539\u6210\u989c\u8272c \n    if (vis[x]){\n        cala(x);color[x]=c;cala(x);\n            //\u5047\u5982\u5b58\u5728x\u7684\u4fee\u6539\u53ef\u80fd\u5f71\u54cd\u6b63\u786e\u6027\uff0c\u5219\u5728\u4fee\u6539\n            //\u989c\u8272\u524d\u540e\u90fd\u5e94\u66f4\u65b0\u7b54\u6848\uff0c\u800c\u4e24\u4e2acala\u5219\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u6307\u9488 \n    }else color[x]=c;\n} \n\nint main(){\n    char cha;int x,y;\n    cin >>n>>m;tim=sqrt(n);//tim\u662f\u83ab\u961f\u7684\u6838\u5fc3\u4e86\u5427 \n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",&color[i]),las[i]=color[i];//\u521d\u59cb\u989c\u8272 \n    for (int i=1;i<=m;++i){\n        cin >>cha;scanf(\"%d%d\",&x,&y);\n        if (cha=='R'){\n            ++cnt;w[cnt].ps=x;w[cnt].cl=y;w[cnt].pre=las[x];las[x]=y;\n                //\u524d\u5411\u661f\u5f0f\u5b58\u4fee\u6539 \n        }else{\n            ++sz;e[sz].L=x;e[sz].R=y;e[sz].id=sz;e[sz].tm=cnt;\n                //\u5b58\u8be2\u95ee\u65f6\u8981\u52a0\u4e0a\u6700\u8fd1\u4e00\u6b21\u4fee\u6539\u7684ID\uff08tm\uff09\uff0c\u4fbf\u4e8e\u540e\u9762\u64cd\u4f5c \n        }\n    }\n    \n    sort(e+1,e+1+sz,cmp);\n    \n    for (int i=1;i<=sz;++i){\n        for (int j=e[i-1].tm+1;j<=e[i].tm;++j)\n            change(w[j].ps,w[j].cl); //\u5c06\u6240\u6709\u672a\u4fee\u6539\u7684\u70b9\u4fee\u6539 \n        for (int j=e[i-1].tm;j>=e[i].tm+1;--j)\n            change(w[j].ps,w[j].pre);//\u5c06\u6240\u6709\u5df2\u4fee\u6539\u7684\u70b9\u8fd8\u539f\n                                     //\uff08\u4e0a\u6b21\u64cd\u4f5c\u591a\u4f59\u7684\u4fee\u6539\uff09\n        int l=e[i].L,r=e[i].R;  //\u4e0b\u9762\u5c31\u662f\u666e\u901a\u83ab\u961f\u4e86 \n        while (CL<l) cala(CL++);\n        while (CL>l) cala(--CL);\n        while (CR<r) cala(++CR);\n        while (CR>r) cala(CR--);\n        answer[e[i].id]=ans;\n    }\n    for (int i=1;i<=sz;++i)\n        printf(\"%d\\n\",answer[i]); \n    return 0;\n}\n```",
        "postTime": 1495712316,
        "uid": 20360,
        "name": "zj\u4f59\u80fd",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P1903)\n\n\u5e26\u4fee\u83ab\u961f\u6a21\u677f\u9898\u3002\u628a\u8be2\u95ee\u770b\u505a\u4e09\u7ef4\u7684\uff0c\u989d\u5916\u7ef4\u62a4\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u6233\uff0c\u8f6c\u79fb\u65f6\u91cd\u73b0\u4e00\u904d\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n\nint n,m,change[50001][3],count[1000001],pos[50001],block,col[50001],t,x,y,top,nowans,ans[50001];\nchar opt;\nstruct point{\n    int l,r,t,o;\n}num[50001];\nbool cmp(point a,point b){\n    if(pos[a.l]!=pos[b.l])return pos[a.l]<pos[b.l];\n    if(pos[a.r]!=pos[b.r])return pos[a.r]<pos[b.r];\n    return a.t<b.t; \n}\nvoid get(){\n    opt=getchar();\n    while(opt!='Q'&&opt!='R')opt=getchar();\n}\nvoid del(int x){\n    count[x]--;\n    if(!count[x])nowans--;\n}\nvoid add(int x){\n    if(!count[x])nowans++;\n    count[x]++;\n}\nvoid add_to(int l,int r,int now,int nxt){\n    if(now<nxt){\n        for(int i=now+1;i<=nxt;i++){\n            if(l<=change[i][0]&&r>=change[i][0])del(change[i][1]),add(change[i][2]);\n            col[change[i][0]]=change[i][2];\n        }\n    }\n    else{\n        for(int i=now;i>nxt;i--){\n            if(l<=change[i][0]&&r>=change[i][0])del(change[i][2]),add(change[i][1]);\n            col[change[i][0]]=change[i][1];\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    block=(int)pow(n,0.667);\n    for(int i=1;i<=n;i++)scanf(\"%d\",col+i),pos[i]=(i-1)/block+1;\n    for(int i=1;i<=m;i++){\n        get();\n        scanf(\"%d%d\",&x,&y);\n        if(opt=='Q')num[i-t]=(point){x,y,t,i};\n        else{\n            change[++t][0]=x;\n            change[t][1]=col[x];\n            change[t][2]=y;\n            col[x]=y;\n        }\n    }\n    top=n-t;\n    std::sort(num+1,num+top+1,cmp);\n    add_to(0,0,t,num[1].t);\n    for(int i=num[1].l;i<=num[1].r;i++)add(col[i]);\n    ans[num[1].o]=nowans;\n    for(int i=2;i<=top;i++){\n        add_to(num[i-1].l,num[i-1].r,num[i-1].t,num[i].t);\n        if(num[i-1].l<num[i].l)for(int j=num[i-1].l;j<num[i].l;j++)del(col[j]);\n        else for(int j=num[i].l;j<num[i-1].l;j++)add(col[j]);\n        if(num[i-1].r<num[i].r)for(int j=num[i-1].r+1;j<=num[i].r;j++)add(col[j]);\n        else for(int j=num[i].r+1;j<=num[i-1].r;j++)del(col[j]);\n        ans[num[i].o]=nowans;\n    }\n    for(int i=1;i<=n;i++)if(ans[i])printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1537779924,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP1903 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217"
    },
    {
        "content": "\u8868\u793a\u672c\u849f\u84bb\u505a\u8fd9\u9053\u9898\u770b\u597d\u591a\u9898\u89e3\u8fd8\u662f\u6ca1\u770b\u61c2\n\n\u6700\u540e\u5728\u67d0\u5927\u4f6c\uff20Twilight_\u7684\u6307\u70b9\u4e4b\u4e0b\n\n\u7ec8\u4e8e\u660e\u767d\u4e86\u8fd9\u9053\u9898\n\n\u4ee5\u6b64\u9e23\u8c22\u67d0\u5927\u4f6c\n\n\u3001\uff3c\uff08\uff3e\uff4f\uff3e\uff09\uff0f\uff5e\n\n\u5f85\u4fee\u6539\u7684\u83ab\u961f\uff0c\u8fd8\u6ca1\u505a\u8fc7\u7684\u83ab\u961f\u5efa\u8bae\u5148\u505a\uff28\uff28\u7684\u9879\u94fe\uff08\u677f\u5b50\u9898\uff09\n\n\u8fd9\u91cc\u591a\u4e86\u4e00\u4e2a\u4fee\u6539\uff0c\u9996\u5148\u6211\u4eec\u8981\u76f8\u4fe1\u4e00\u4e2a\u771f\u7406\uff1a\u66b4\u529b\u51fa\u5947\u8ff9\n\n\u83ab\u961f\u5c31\u662f\u76f8\u5f53\u4e0e\u5bf9\u66b4\u529b\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u6807\u8bb0\u5b83\u7684\u65f6\u95f4\uff08\u4e5f\u5c31\u662f\u524d\u9762\u6709\u51e0\u4e2a\u4fee\u6539\uff09\n\n\u7136\u540e\u50cf\u666e\u901a\u83ab\u961f\u4e00\u6837\u505a\uff0c\u5982\u679c\u65f6\u95f4\u4e0d\u7b26\u5408\uff0c\u90a3\u5c31\u66b4\u529b\u4fee\u6539\uff4f\uff52\u66b4\u529b\u64a4\u9500\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u7528now\u8bb0\u5f55\u73b0\u5728\u7684X(\u7edf\u8ba1\u5230\u7684\u989c\u8272\u4e2a\u6570\uff09\u662f\u5efa\u7acb\u5728\u54ea\u6b21\u4fee\u6539\u540e\u7684\u57fa\u7840\u4e0a\u7684\uff08\u5373\u65f6\u95f4\uff09\n\n\u90a3\u4e48\u6211\u4eec\u7528\u6570\u7ec4\u5b58\u4e0b\u4e86\u6bcf\u4e2a\u4fee\u6539\uff0c\u5e76\u4e14\u7528last\u5b58\u4e0b\u67d0\u6b21\u4fee\u6539\u524d\u5b83\u8981\u4fee\u6539\u7684\u90a3\u4e2a\u7a7a\u91cc\u9762\u539f\u672c\u5b58\u7684\u989c\u8272\n\n\u8fd9\u6837\u6709\u70b9\u7ed5\u53e3\uff0c\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n\u6bd4\u5982\u539f\u6570\u5217: 1 3 7 4 6\n\n\u73b0\u5728\u6709\u7b2c\u4e8c\u6b21\u4fee\u6539\uff13\u3000\uff15(\u628a\u7b2c\uff13\u4e2a\u4fee\u6539\u4e3a\uff15\uff09\n\n\u90a3\u4e48last[2]=7(\u5f53\u524d\u6570)\n\n\u7136\u540e\u4fee\u6539\u4e3a\uff1a\u30001 3 5 4 6\n\n\u8fd9\u5c31\u662f\u6211\u4eec\u66b4\u529b\u5411\u540e\u4fee\u6539\u7684\u8fc7\u7a0b\n\n\u5982\u679c\u662f\u64a4\u9500\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u662f\u628a\u7b2ci\u6b21\u4fee\u6539\u7684\u4f4d\u7f6e\u6539\u4e3alast[i]\u5373\u53ef\n\n\u7136\u540e\u4e3a\u4e86\u5904\u7406\u65b9\u4fbf\uff0c\u6211\u4eec\u5148\u79fb\u52a8\u533a\u95f4\uff0c\u6700\u540e\u4fee\u6539\u989c\u8272\u5230\u76ee\u6807\u65f6\u95f4\n\n\u4fee\u6539\u65f6\u6ce8\u610f\uff0c\u5982\u679c\u8981\u4fee\u6539\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u533a\u95f4\u5185(\u8fd9\u4e5f\u662f\u5148\u5904\u7406\u533a\u95f4\u7684\u539f\u56e0)\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0ans,\n\n\u5426\u5219\u76f4\u63a5\u4fee\u6539\n\n\u81f3\u4e8e\u6392\u5e8f\uff0c\uff0c\uff0c\u5927\u6982\u662f\u7384\u5b66\u590d\u6742\u5ea6\u5427\uff0c\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u53c2\u89c1\uff1a\n\nhttps://www.cnblogs.com/Paul-Guderian/p/6933799.html\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define Ri register int\n#define AC 10500\n#define D printf(\"line in %d\\n\",i);\nint n,m,color[AC],s[AC],block,tot,cnt,ans[AC],have[AC],X,last[AC];\nint L,R,now,ll,rr,tt;\nstruct ABC{\n\tint x,w;\t\n}T[AC];\nstruct abc{\n\tint l,r,num,t;\n}ques[AC];\n\ninline int read()\n{\n\tint x=0;char c=getchar();\n\twhile(c>'9' || c<'0') c=getchar();\n\twhile(c>='0' && c<='9')x=x*10+c-'0',c=getchar();\n\treturn x;\n}\n\nbool cmp(abc a,abc b)\n{\n\tif(a.l/block != b.l/block) return a.l < b.l;\n\telse if(a.r!=b.r) return a.r<b.r;\n\telse return a.t<b.t;\n}\n\nvoid pre()\n{\n\tchar c;\n\tn=read(),m=read(),block=sqrt(n);\n\tfor(Ri i=1;i<=n;i++)  s[i]=read();\n\tfor(Ri i=1;i<=m;i++)\n\t{\n\t\tcin>>c;\n\t\tif(c=='Q')\n\t\t\tques[++cnt].l=read() , ques[cnt].r=read() , ques[cnt].t=tot , ques[cnt].num=cnt;\n\t\telse \n\t\t\tT[++tot].x=read(),T[tot].w=read();\n\t}\n\tsort(ques+1,ques+cnt+1,cmp);\n}\n\nvoid change()//\u4fee\u6539\u65f6\u95f4\n{\n\twhile(now < tt)\n\t{\n\t\tfor(Ri j=++now;j<=tt;j++)\n\t\t{\n\t\t\tint go=T[j].x;\n\t\t\tif(!last[j]) last[j]=s[go];//\u5b58\u4e0b\u4e0a\u4e00\u4e2a\u65f6\u95f4\u65f6\u7684\u989c\u8272\uff0c\u65b9\u4fbf\u64a4\u9500\n\t\t\tif(go < L || go > R)//\u5982\u679c\u4e0d\u5728\u533a\u95f4\u5185\u5c31\u76f4\u63a5\u4fee\u6539\n\t\t\t\ts[go]=T[j].w;\n\t\t\telse //\u4e0d\u7136\u7684\u8bdd\u5728\u4fee\u6539\u7684\u540c\u65f6\u8fd8\u8981\u66f4\u65b0\u7b54\u6848\n\t\t\t{\n\t\t\t\tcolor[s[go]]--;\n\t\t\t\tif(!color[s[go]]) X--;\n\t\t\t\ts[go]=T[j].w;\n\t\t\t\tif(!color[s[go]]) X++;\n\t\t\t\tcolor[s[go]]++;\n\t\t\t} \n\t\t}\n\t\tnow=tt;\n\t}\n\twhile(now > tt)\n\t{\n\t\tfor(Ri j=now;j>tt;j--)\n\t\t{\n\t\t\tint go=T[j].x;\n\t\t\tif(go < L || go > R)\n\t\t\t\ts[go]=last[j];//\u6539\u56de\u53bb\n\t\t\telse \n\t\t\t{\n\t\t\t\tcolor[s[go]]--;\n\t\t\t\tif(!color[s[go]]) X--;\n\t\t\t\ts[go]=last[j];\n\t\t\t\tif(!color[s[go]]) X++;//\u5982\u679c\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u989c\u8272\u5c31\u7edf\u8ba1\u5165\u7b54\u6848\n\t\t\t\tcolor[s[go]]++;\t\t\t\n\t\t\t}\n\t\t}\n\t\tnow=tt;\n\t}\n}\n\nvoid work()\n{\n\tnow=ques[1].t , L=ques[1].l , R=ques[1].r;\n\tfor(Ri i=1;i<=now;i++)\n\t{ \n\t\tint go=T[i].x;\n\t\tlast[i]=s[go];//error!!!\u51e1\u662f\u4fee\u6539\u4e86\u90fd\u8981\u8bb0\u5f55last\n\t\ts[go]=T[i].w;\n\t}\n\tfor(Ri i=L;i<=R;i++)\n\t{\n\t\tif(!color[s[i]]) X++;\n\t\tcolor[s[i]]++;\n\t}\n\tans[ques[1].num]=X;\n\tfor(Ri i=2;i<=cnt;i++)//\u83ab\u961f\n\t{\n\t\tll=ques[i].l,rr=ques[i].r,tt=ques[i].t;\n\t\twhile(L < ll)\n\t\t{\n\t\t\tcolor[s[L]]--;\n\t\t\tif(!color[s[L]]) X--;\n\t\t\t++L;\n\t\t}\n\t\twhile(L > ll)\n\t\t{\n\t\t\tif(!color[s[--L]]) X++;\n\t\t\tcolor[s[L]]++;\n\t\t}\n\t\twhile(R > rr)\n\t\t{\n\t\t\tcolor[s[R]]--;\n\t\t\tif(!color[s[R]]) X--;\n\t\t\t--R;\n\t\t}\n\t\twhile(R < rr)\n\t\t{\n\t\t\tif(!color[s[++R]]) X++;\n\t\t\tcolor[s[R]]++;\n\t\t}\n\t\tchange();//\u4fee\u6539\u65f6\u95f4\u653e\u5165\u51fd\u6570\u4ee5\u663e\u7b80\u6d01\n\t\tans[ques[i].num]=X;\n\t}\n\tfor(Ri i=1;i<=cnt;i++) printf(\"%d\\n\",ans[i]);\n}\n\nint main()\n{\n\tfreopen(\"in.in\",\"r\",stdin);\n\tpre();\n\twork();\n\tfclose(stdin);\n\treturn 0;\n}\n```",
        "postTime": 1520930048,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/P1903)\n\n\u524d\u6392\u63d0\u9192\uff1a\u8fd9\u7bc7\u9898\u89e3\u4e0d\u592a\u662f(\u5565\u73a9\u610f=\u3002=\uff1f\uff1f\uff1f)\u6b63\u89e3\uff0c\u53ea\u80fd\u5728O2\u4f18\u5316\u540e\u901a\u8fc7(O2\u540e\u6700\u5feb\u7684\u8bdd\u6700\u6162\u7684\u4e00\u4e2a\u70b9\u8dd1\u4e86300+ms\uff0c\u4e0dO2\u76f4\u63a5TLE(\u6216\u8bb8\u6709\u4ec0\u4e48\u624b\u5199bitset\u8fd9\u79cd\u4e1c\u897f\u53ef\u4ee5\u8fc7=\u3002=\uff1f))\n\n\u521d\u5b66\u5206\u5757\u7684\u849f\u84bb\u7528\u66b4\u529b\u7684\u5206\u5757\u5361\u8fc7\u53bb\u4e86\u60f3\u5199\u7bc7\u9898\u89e3\uff0cdalao\u4eec\u8f7b\u55b7=\u3002=\n\n\u76f4\u63a5\u5206\u5757+bitset\uff0c\u79bb\u6563\u5316\u540e\u8bb0\u5f55\u6bcf\u5757\u5185\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u4e00\u6b21\u4fee\u6539\u662f$O(1)$\u7684(\u4e0d\u7b97\u79bb\u6563\u5316\u7684\u8bdd)\u3002\u7136\u800c\u67e5\u8be2\u65f6\u56e0\u4e3a\u8981\u5408\u5e76\u5757\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f\u6574\u5757\u957f\u5ea6\u4e4b\u548c\u8fd9\u4e2a\u7ea7\u522b\u7684\u7684(\u867d\u7136\u6709\u4e2abitset\u7684$\\frac{1}{32}$)\uff0c\u76f4\u63a5\u628a\u5757\u5927\u5c0f$siz$\u8bbe\u6210$sqrt(n)$\u505a\u5927\u6982\u4f1a\u6bd4\u8f83\u6162\u3002\n\n\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u8fd9\u91cc\u53ef\u4ee5\u9002\u5f53\u52a0\u5927\u5757\u7684\u5927\u5c0f\uff0c\u8fd9\u6837\u5757\u5408\u5e76\u4f1a\u53d8\u5c11\u800c\u96f6\u6563\u533a\u95f4\u7684\u7edf\u8ba1\u4f1a\u53d8\u591a\uff0c\u5728\u8fd9\u4e2a\u9898\u6548\u7387\u4f1a\u66f4\u9ad8\u4e00\u70b9(\u6211\u4e00\u5f00\u59cb\u5f04\u4e86\u4e00\u4e2a$n^{\\frac{3}{5}}$\u7684\u5757\u5927\u5c0f(\u5757\u6700\u5927\u7684\u65f6\u5019\u5927\u6982\u662f660)\u5361\u8fc7\u53bb\u4e86\uff0c\u6700\u6162\u7684\u70b9\u8dd1\u4e86600+ms\uff0c\u540e\u6765\u53c8\u8bd5\u4e86\u8bd5\u7136\u540e\u8fd8\u52a0\u4e86\u4e2a\u201c\u8f93\u51fa\u4f18\u5316(\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u7528\u554a=\u3002=)\u201d\uff0c\u628a\u5757\u5927\u5c0f\u641e\u6210$n^{\\frac{3}{4}}$\u8dd1\u7684\u66f4\u5feb\u4e86\u4e9b(\u5757\u6700\u5927\u7684\u65f6\u5019\u5927\u6982\u662f3400)\uff0c\u5c31\u662f\u4e0a\u9762\u8bf4\u7684300ms+)\n\n```cpp\n// luogu-judger-enable-o2\n#include<cmath>\n#include<cstdio>\n#include<cctype>\n#include<bitset>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=50005,M=100005,Sq=20;\nstruct a\n{\n    int typ;\n    int ll,rr;\n}q[N];\nint n,m,t1,t2,t3,t4,sqr,cnt,xnt,len;\nint pts[Sq][2],app[Sq][M]; \nint a[N],blo[N],uni[2*N];\nbitset<M> sta[Sq],qry; \nchar rd[5];\ninline int read()\n{\n    int ret=0;\n    char ch=getchar();\n    while(!isdigit(ch))\n        ch=getchar();\n    while(isdigit(ch))\n        ret=(ret<<1)+(ret<<3)+(ch^48),ch=getchar();\n    return ret;\n}\ninline void write(int x)\n{\n    if(x>9) write(x/10);\n    putchar(x%10+48);\n}\nint main()\n{\n    register int i,j;\n    n=read(),m=read(),xnt=n;\n    sqr=pow(n,0.75),pts[cnt=1][0]=1;\n    for(i=1;i<=n;i++)\n    {\n        a[i]=read(),uni[i]=a[i];\n        blo[i]=(i-1)/sqr+1;\n        if(i%sqr==0)\n        {\n            pts[cnt++][1]=i;\n            pts[cnt][0]=i+1; \n        }\n    }\n    pts[cnt][1]=n; \n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%s\",rd),t1=read(),t2=read();\n        q[i].ll=t1,q[i].rr=t2,q[i].typ=(rd[0]=='R');\n        if(q[i].typ) uni[++xnt]=t2;\n    }\n    sort(uni+1,uni+1+xnt),len=unique(uni+1,uni+1+xnt)-uni-1;\n    for(i=1;i<=n;i++)\n    {\n        a[i]=lower_bound(uni+1,uni+1+len,a[i])-uni;\n        if(++app[blo[i]][a[i]]==1) sta[blo[i]][a[i]]=true;\n    }\n    for(i=1;i<=m;i++)\n    {\n        t1=q[i].ll,t2=q[i].rr;\n        if(q[i].typ)\n        {\n            int bel=blo[t1],newc=lower_bound(uni+1,uni+1+len,t2)-uni;\n            if(!(--app[bel][a[t1]])) sta[bel][a[t1]]=false;\n            if(++app[bel][newc]==1) sta[bel][newc]=true; a[t1]=newc;\n        }\n        else \n        {\n            qry.reset(),t3=blo[t1],t4=blo[t2];\n            if(t3!=t4)\n            {\n                for(j=t1;j<=pts[t3][1];j++) qry[a[j]]=true;\n                for(j=pts[t4][0];j<=t2;j++) qry[a[j]]=true;\n                for(j=t3+1;j<=t4-1;j++) qry|=sta[j];\n            }\n            else for(j=t1;j<=t2;j++) qry[a[j]]=true;\n            write((int)qry.count()),puts(\"\");\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1542158477,
        "uid": 56967,
        "name": "ydnhaha",
        "ccfLevel": 0,
        "title": "\u89e3\u9898\uff1aluogu p1903 \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217"
    },
    {
        "content": "\u5e26\u4fee\u6539\u83ab\u961f\u65b9\u6cd5\uff1a<http://blog.csdn.net/blue\\_cuso4/article/details/77940771>\n\n\u7ade\u4e89\u4f18\u52bf\uff1a\u901f\u5ea6\u524d\u51e0+\u4ee3\u780160\u884c\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <iostream>\n#define N 10005\nusing namespace std;\nint qid=0,tim=0,cx[1000005],res,block[N],ans[N],a[N];\nstruct ask{int l,r,t,id;}q[N];\nstruct chan{int x,y;}ch[1005];\nint cmp(ask a,ask b){\n    if (block[a.l]==block[b.l])\n    {\n        if (a.r==b.r) return a.t<b.t;\n        else return a.r<b.r;\n    }else return a.l<b.l;\n}\nvoid change(int now,int i)\n{\n    if (ch[now].x>=q[i].l && ch[now].x<=q[i].r) \n    {\n        cx[a[ch[now].x]]--;\n        if (cx[a[ch[now].x]]==0) res--;\n        if (cx[ch[now].y]==0) res++;\n        cx[ch[now].y]++;            \n    }\n    swap(a[ch[now].x],ch[now].y);\n}\nint main()\n{\n    int n,m,i;\n    scanf(\"%d%d\",&n,&m);\n    int size=sqrt(n);\n    for (i=1;i<=n;i++) scanf(\"%d\",&a[i]),block[i]=(i-1)/size+1;\n    for (i=1;i<=m;i++)\n    {\n        int l,r;char s[5];\n        scanf(\"%s%d%d\",s,&l,&r);\n        if (s[0]=='Q'){\n            q[++qid].l=l; q[qid].r=r; q[qid].id=qid; q[qid].t=tim;\n        }\n        else ch[++tim].x=l,ch[tim].y=r;\n    }\n    sort(q+1,q+qid+1,cmp);\n    int l=0,r=0,now=0;\n    for (i=1;i<=qid;i++)\n    {\n        while (l<q[i].l){cx[a[l]]--;if (cx[a[l]]==0) res--; l++;}\n        while (l>q[i].l){l--;if (cx[a[l]]==0) res++; cx[a[l]]++;}\n        while (r<q[i].r){r++;if (cx[a[r]]==0) res++; cx[a[r]]++;}\n        while (r>q[i].r){cx[a[r]]--;if (cx[a[r]]==0) res--; r--;}\n        while (now<q[i].t){now++;change(now,i);}\n        while (now>q[i].t){change(now,i);now--;}\n        ans[q[i].id]=res;\n    }\n    for (i=1;i<=qid;i++)  printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1505197874,
        "uid": 17774,
        "name": "wwyx2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "###**\u5206\u5757\u89e3\u6cd5**\n\n\uff08\u8fd9\u91cc\u53c2\u8003\u7684\u662f\u9ec4\u5b66\u957f\u7684\u505a\u6cd5\uff0c\u8be6\u89c1 [http://hzwer.com/2793.html](http://hzwer.com/2793.html)\uff09\n\n\u5982\u679c\u4e0d\u8003\u8651\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7c7b\u4f3c\u533a\u95f4\u4f17\u6570\u7684\u65b9\u6cd5\u6c42\u89e3\uff0c\u4f46\u52a0\u5165\u4fee\u6539\u5c31\u663e\u5f97\u9ebb\u70e6\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8bb0\u5f55\u4e24\u4e2a\u6570\u7ec4 lst[],pr[]\uff1a\n\n\u00b7 pr[i] \u8868\u793a\u524d\u4e00\u4e2a\u548c i \u76f8\u540c\u989c\u8272\u7684\u753b\u7b14\u7684\u6240\u5728\u4f4d\u7f6e\n\n\u00b7 lst[i] \u8868\u793a\u989c\u8272\u4e3a i \u7684\u753b\u7b14\u4e4b\u524d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7528\u4e8e\u66f4\u65b0pr[i]\n\n\u90a3\u4e48\uff0c\u8be2\u95ee [l, r]\uff1a\n\n\u00b7 \u5bf9\u4e8e\u4e0d\u5b8c\u6574\u7684\u5757\uff0c\u66b4\u529b\u5224\u65ad\uff1a\u5f53 pr[i] < l  \u65f6\uff0c\u5219\u5f53\u524d\u533a\u95f4\u6ca1\u6709\u753b\u7b14\u548c i \u989c\u8272\u76f8\u540c\uff0c\u6211\u4eec\u5c06\u8bb0\u5f55\u7684\u7b54\u6848++\n\n\uff08\u9ec4\u5b66\u957f\u7684\u535a\u5ba2\u4e2d pr[i] < r \u5e94\u8be5\u5c5e\u4e8e\u7b14\u8bef\uff09\n\n\u00b7 \u5bf9\u4e8e\u5b8c\u6574\u7684\u5757\uff0c\u6211\u4eec\u7528\u7c7b\u4f3c [\u6559\u4e3b\u7684\u9b54\u6cd5](https://www.luogu.org/problem/show?pid=2801) \u7684\u505a\u6cd5\uff0c\u5c06 pr[i] \u5b58\u5165\u53e6\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u4ee5 l \u4e3a\u754c\u4e8c\u5206\uff0c\u5219\u533a\u95f4\u5206\u754c\u5de6\u8fb9\u90fd\u6ee1\u8db3 pr[i] < l\uff0c\u8ba1\u5165\u7b54\u6848\u5373\u53ef\n\n\u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4fee\u6539\u64cd\u4f5c\u4f3c\u4e4e\u53ea\u80fd\u66b4\u529b\u91cd\u6784\u4e86\uff0c\u4f46\u6211\u4eec\u6ce8\u610f\u5230\u9898\u76ee\u4e2d **\u4fee\u6539\u64cd\u4f5c\u4e0d\u591a\u4e8e1000\u6b21** \u4e14 N\u226410000\uff0cM\u226410000\uff0c\u56e0\u6b64\u66b4\u529b\u53ef\u4ee5\u5361\u8fc7\u3002\uff08\u4e0d\u8fc7\u6211\u8fd9\u91cc\u7684\u5199\u6cd5\u548c\u9ec4\u5b66\u957f\u4e0d\u592a\u4e00\u6837\uff0c\u9ec4\u5b66\u957f\u662f\u4e00\u65e6\u53d1\u73b0 pr[] \u503c\u6539\u53d8\u5c31\u91cd\u65b0\u5bf9\u6240\u5728\u5757\u6392\u5e8f\uff0c\u4f46\u6211\u662f\u5c06\u8fd9\u4e9b\u6539\u53d8\u60c5\u51b5\u5408\u5e76\u5230\u4e00\u4e2a\u4e2a\u5757\u5185\u5904\u7406\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8981\u5feb\u4e9b\uff09\n\n\u6700\u540e\u9644\u4e0a**\u4ee3\u7801\uff1a**\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 1e4 + 5, M = 105;\nint bl[M], br[M], a[N], tr[N], pr[N], lst[N * M];\nint n, m, s, S, Q;\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void Flag(const int x)\n{\n    int L = bl[x], R = br[x];\n    for (int i = L; i <= R; ++i) tr[i] = pr[i];\n    sort(tr + L, tr + R + 1);\n}\ninline int Find(const int x, const int vi)\n{\n    int l = bl[x], r = br[x];\n    while (l <= r)\n    {\n        int mid = l + r >> 1;\n        if (tr[mid] < vi) l = mid + 1;\n         else r = mid - 1;\n    }\n    return l - bl[x];\n}\ninline void Und(const int x, const int vi)\n{\n    for (int i = 1; i <= n; ++i) lst[a[i]] = 0;\n    a[x] = vi; bool f; int cur;\n    for (int i = 1; i <= s; ++i)\n    {\n        f = false;\n        for (int j = bl[i]; j <= br[i]; ++j)\n        {\n            cur = pr[j];\n            pr[j] = lst[a[j]];\n            if (pr[j] != cur) f = true;\n            lst[a[j]] = j;\n        } \n        if (f) Flag(i);\n    }\n}\ninline int Que(const int l, const int r)\n{\n    int L = (l - 1) / S + 1, R = (r - 1) / S + 1, num = 0;\n    if (r - l < (S << 1))\n    {\n        for (int i = l; i <= r; ++i) if (pr[i] < l) num++;\n        return num;\n    }\n    if (l == bl[L]) L--; if (r == br[R]) R++;\n    int ed = br[L], st = bl[R];\n    for (int i = l; i <= ed; ++i) if (pr[i] < l) num++;\n    for (int i = st; i <= r; ++i) if (pr[i] < l) num++;\n    for (int i = L + 1; i < R; ++i) num += Find(i, l);\n    return num;\n}\nint main()\n{\n    n = get(); Q = get(); S = sqrt(n);\n    int x, y; char tp;\n    for (int i = 1; i <= n; ++i) a[i] = get();\n    for (int i = 1; i <= n; ++i)\n     if (i % S == 1) br[s] = i - 1, bl[++s] = i;\n    br[s] = n; bl[s + 1] = br[s + 1] = n + 1;\n    for (int i = 1; i <= n; ++i)\n     pr[i] = lst[a[i]], lst[a[i]] = i;\n    for (int i = 1; i <= s; ++i) Flag(i); \n    while (Q--)\n    {\n        while ((tp = getchar()) != 'Q' && tp != 'R');\n        x = get(); y = get();\n        if (tp == 'Q') put(Que(x, y)), putchar('\\n');\n         else Und(x, y);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1496105047,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "\u672c\u9898\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f\n\n1\uff1a\u5206\u5757\n\n2\uff1a\u83ab\u961f\n\n\u5176\u5b9e\u90fd\u662f\u5dee\u4e0d\u591a\u7684\u3002\n\n\u5148\u7ed9\u51fa\u5206\u5757\u7684\u65b9\u6cd5\u3002\n\n\u521d\u59cb\u5316\n-\n\u5c06\u6574\u4e2a\u6570\u7ec4\u5206\u4e3a\u82e5\u5e72\u5757\u3002\n\nspre[i]\u8868\u793a\u5728i\u4e4b\u524d\u4e0ei\u76f8\u540c\u989c\u8272\u6700\u8fd1\u7684\u90a3\u4e2a\u753b\u7b14\u4f4d\u7f6e\u3002\n\n\u5728\u6bcf\u4e00\u5757\u91cc\uff0c\u5c06pre[i]\u5347\u5e8f\u6392\u5217\u3002\n\n\u67e5\u8be2\n-\n\u82e5 \u67e5\u8be2 \u7684$[l,r]$\u5728\u4e00\u4e2a\u5757\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u67e5\u627e\u3002\n\n\u5f88\u660e\u663e\uff0c\u5f53spre[i]< l\u65f6\uff0c\u5373\u4e3a\u4e00\u4e2a\u4e0d\u540c\u7684\u989c\u8272\u3002\n\n\u5f53 \u67e5\u8be2 \u7684$[l,r]$\u4e0d\u5728\u4e00\u4e2a\u5757\u5185\u65f6\uff0c\u5bf9\u4e8e **l** \u7684\u5757\u548c **r** \u7684\u5757\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u4e0a\u9762\u7684\u66b4\u529b\u65b9\u6cd5\u7edf\u8ba1\u3002\n\n\u5bf9\u4e8e\u5939\u5728\u4e2d\u95f4\u7684\u5757\uff0c\u7531\u4e8e\u4e00\u6574\u5757\u6570\u636e\u5168\u90e8\u5728\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9pre\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u8fbe\u5230\u5feb\u901f\u67e5\u627e\u3002\n\n\u4fee\u6539\n-\n\u5bf9\u4e8e\u4fee\u6539 **i** \u4f4d\u7f6e\u7684\u753b\u7b14\u7684\u989c\u8272\n\n\u5f71\u54cd\u6709\u4e09\u4e2a\u753b\u7b14\u3002\n\n1\uff1a\u8be5\u753b\u7b14\u672c\u8eab\u7684spre\u4ee5\u53ca\u6240\u5728\u5757\u5185\u7684pre\n\n2\uff1a\u4fee\u6539\u4e4b\u524d\u4e0e\u8be5\u753b\u7b14\u989c\u8272\u76f8\u540c\u7684\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u753b\u7b14\u7684spre\u4ee5\u53ca\u6240\u5728\u5757\u5185\u7684pre\n\n3\uff1a\u4fee\u6539\u4e4b\u540e\u4e0e\u8be5\u753b\u7b14\u989c\u8272\u76f8\u540c\u7684\u540e\u9762\u7684\u7b2c\u4e00\u4e2a\u753b\u7b14\u7684spre\u4ee5\u53ca\u6240\u5728\u5757\u5185\u7684pre\n\u4f9d\u6b21\u4fee\u6539\u5373\u53ef\u3002\n\n\n```\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstring> \n#define il inline\nusing namespace std;\nconst int maxm=200000;\nint pre[maxm],c[maxm],front[maxm],spre[maxm];\nint lx[maxm],rx[maxm],pos[maxm];\nint block_num,block_len;\nint n,q;\nil int read()\n{\n\tint x=0;char ch=0;\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x;\n}\nil void init()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tpre[i]=front[c[i]];\n\t\tfront[c[i]]=i;\n\t}\n\tmemcpy(spre,pre,sizeof(pre));\n\tfor(int i=1;i<=block_num;i++)\n\t{\n\t\tlx[i]=(i-1)*block_len+1,rx[i]=min(i*block_len,n);\n\t    for(int j=lx[i];j<=rx[i];j++) \n\t     pos[j]=i;\n\t    sort(pre+lx[i],pre+rx[i]+1);\n\t}\n}\nil int ask(int l,int r)\n{\n\tint ans=0;\n\tif(pos[l]==pos[r]) \n\t{\n\t  for(int i=l;i<=r;i++)\n       if(spre[i]<l) ans++; \t\n\t}\n\telse\n\t{\n\t\tfor(int i=l;i<=rx[pos[l]];i++) \n\t\t if(spre[i]<l) ans++;\n\t\tfor(int i=lx[pos[r]];i<=r;i++)\n\t\t if(spre[i]<l) ans++;\n\t\tfor(int i=pos[l]+1;i<pos[r];i++)\n\t\t ans+=(lower_bound(pre+lx[i],pre+rx[i]+1,l)-(pre+lx[i]));\n\t}\n\treturn ans;\n}\nil void mofidy(int x,int p)\n{\n\tint xx=spre[x];\n\tfor(int i=x+1;i<=n;i++)\n\t if(c[i]==c[x]) \n\t  {\n\t  \tspre[i]=xx;\n\t  \tint poi=lower_bound(pre+lx[pos[i]],pre+rx[pos[i]]+1,x)-pre;\n\t  \tpre[poi]=xx;\n\t  \tsort(pre+lx[pos[i]],pre+rx[pos[i]]+1);\n\t  \tbreak;\n\t  }\n\tc[0]=p;\n\tfor(int i=x-1;i>=0;i--)\n\t if(c[i]==p)\n\t {\n\t \tspre[x]=i;\n\t \tint poi=lower_bound(pre+lx[pos[x]],pre+rx[pos[x]]+1,xx)-pre;\n\t\tpre[poi]=i;\n\t\tsort(pre+lx[pos[x]],pre+rx[pos[x]]+1);\n\t\tbreak;\n\t }\n\tfor(int i=x+1;i<=n;i++)\n\t if(c[i]==p)\n\t {\n\t \tint poi=lower_bound(pre+lx[pos[i]],pre+rx[pos[i]]+1,spre[i])-pre;\n\t \tpre[poi]=x;\n\t \tspre[i]=x;\n\t \tsort(pre+lx[pos[i]],pre+rx[pos[i]]+1);\n\t    break;\n\t }\n\tc[x]=p;\n}\nint main()\n{\n\tn=read(),q=read();\n\tblock_len=sqrt((double)n);\n\tblock_num=n/block_len;\n\tif(n%block_len) block_num++;\n    for(int i=1;i<=n;i++)\n\t c[i]=read();\n\tinit();\n\tchar s[3];\n\tfor(int i=1,l,r;i<=q;i++)\n\t{\n\t\tscanf(\"%s%d%d\",s,&l,&r);\n\t\tif(s[0]=='Q')\n\t\t printf(\"%d\\n\",ask(l,r));\n\t\telse mofidy(l,r);\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1523353284,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u83ab\u961f\u7684\u9898\uff0c\u7528\u6876\u6392\u51fa\u5b58\u4e24\u4e2a\u7ed3\u6784\u4f53\u5206\u522b\u8bb0\u5f55\u67e5\u8be2\u548c\u4fee\u6539\uff0c\u5728\u8f93\u5165\u67e5\u8be2\u7684\u540c\u65f6\u5c06G[i].pre\u8d4b\u503c\u4e3actot\uff0c\u5373\u5230\u73b0\u5728\u4e3a\u6b62\u9700\u8981\u505a\u591a\u5c11\u6b21\u4fee\u6539\uff0c\u5206\u5757\u52a0\u4e0a\u67d3\u8272\u548c\u83ab\u961f\u6a21\u7248\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u6700\u91cd\u8981\u7684\u662f\u5728\u4fee\u6539\u65f6\u76f4\u63a5swap\u5c31\u597d\uff0c\u53ef\u4ee5\u5728\u56de\u9000\u7684\u65f6\u5019\u5728\u4ea4\u6362\u56de\u6765\u3002\r\n\r\n \r\n  \r\n\r\n        \r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ninline int read()\r\n{\r\n    int x=0,f=1;\r\n    char c=getchar();\r\n    while(c>'9'||c<'0')\r\n    {\r\n        if(c=='-')\r\n        f=-1;\r\n        c=getchar();\r\n    }\r\n    while(c>='0'&&c<='9')\r\n    {\r\n        x=x*10+c-'0';\r\n        c=getchar();\r\n    }\r\n    return x*f;\r\n } \r\n int n,m,k;\r\n int tot,ctot;\r\n struct edge{\r\n     int l,r,id,pre;\r\n }G[100010];\r\n struct node{\r\n     int where,pos;\r\n }C[100010];\r\n int a[100010];\r\n int bl[400010]; \r\n int ans;\r\n int cnt[1000010];\r\n bool cmp(edge a,edge b)\r\n {\r\n     if(bl[a.l]==bl[b.l])\r\n     return a.r<b.r;\r\n     else\r\n     return bl[a.l]<bl[b.l]; \r\n }\r\n int Add(int x)\r\n {\r\n     if(cnt[x]==0)\r\n     ans++;\r\n     cnt[x]++;\r\n }\r\n int Del(int x)\r\n {\r\n     if(cnt[x]==1)\r\n     ans--;\r\n     cnt[x]--;\r\n }\r\n int work(int now,int i)\r\n {\r\n      if(C[now].where>=G[i].l&&C[now].where<=G[i].r)\r\n           {\r\n               if(--cnt[a[C[now].where]]==0)\r\n               ans--;\r\n               if(++cnt[C[now].pos]==1)\r\n               ans++;\r\n           }\r\n               swap(C[now].pos,a[C[now].where]);                    \r\n }\r\n int bala[100010];\r\n void moqueue()\r\n {\r\n   int L=1,R=n;\r\n   int now=0;\r\n   for(int i=1;i<=tot;i++)\r\n   {\r\n         while(L<G[i].l)Del(a[L]),L++;\r\n      while(R>G[i].r)Del(a[R]),R--;\r\n      while(L>G[i].l)L--,Add(a[L]);\r\n      while(R<G[i].r)R++,Add(a[R]);\r\n      while(now<G[i].pre) work(++now,i);\r\n      while(now>G[i].pre)  work(now--,i);\r\n       bala[G[i].id]=ans;      \r\n       }    \r\n       for(int i=1;i<=tot;i++)\r\n        printf(\"%d\\n\",bala[i]);\r\n }\r\n int main()\r\n {\r\n     n=read(),m=read();\r\n     int blk=sqrt(n);\r\n       for(int i=1;i<=n;i++)\r\n        bl[i]=(i-1)/blk+1;\r\n       for(int i=1;i<=n;i++)\r\n     {\r\n         a[i]=read();\r\n          Add(a[i]);\r\n     }\r\n      tot=0,ctot=0;\r\n     for(int i=1;i<=m;i++)\r\n     {\r\n          char b[2];\r\n          scanf(\"%s\",b);\r\n          char c=b[0];\r\n           if(c=='Q')\r\n            G[++tot].l=read(),G[tot].r=read(),G[tot].id=tot,G[tot].pre=ctot; \r\n           if(c=='R')\r\n           C[++ctot].where=read(),C[ctot].pos=read();\r\n}\r\n      sort(G+1,G+1+tot,cmp);\r\n       moqueue();\r\n       return 0;                 \r\n}\r\n```",
        "postTime": 1516587772,
        "uid": 31826,
        "name": "RetrO",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    },
    {
        "content": "\u770b\u4e86\u697c\u4e0b\u7684\u9898\u89e3\uff0c\u8868\u793a\u4ec0\u4e48\u90fd\u770b\u4e0d\u61c2\uff08\u6211\u6ca1\u5b66\u8fc7\u666e\u901a\u83ab\u961f\u3002\u3002\uff09\n\n\u4e8e\u662f\u51b3\u5b9a\u5199\u4efd\u9898\u89e3\u3002\u3002\n\n\u539f\u7248\u83ab\u961f\uff1a\n\n**\u65f6\u95f4\u590d\u6742\u5ea6O(n\\*\u221an)**\uff0c\u4e0d\u652f\u6301\u4fee\u6539\uff0c\u5c31\u62ff\u672c\u9898\u4e3a\u4f8b\uff1a\n\n\u5982\u679c\u6211\u4eec\u77e5\u9053(L,R)\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u989c\u8272\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728O(1)\u7684\u65f6\u95f4\u6c42\u51fa(L,R+1)\u6216(L+1,R)\u6216(L-1,R)\u6216(L,R-1)\u7684\u503c\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\n\n5\u4e2a\u6570\uff0c\u989c\u8272\u5206\u522b\u4e3a2 3 1 4 5\n\n\u6211\u4eec\u77e5\u9053(2,3)\u7684\u7b54\u6848\u4e3a2\uff0c\u8981\u77e5\u9053(2,4)\u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5224\u65adcolor[4]\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u5426\uff0c\u90a3\u4e48ans++\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6807\u8bb0color[4]\u51fa\u73b0\u7684\u6b21\u6570+1\u3002\n\n\u83ab\u961f\u662f\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u88ab\u79f0\u4e3a\u4f18\u96c5\u7684\u66b4\u529b\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u662f\u628a\u6240\u6709\u8be2\u95ee\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u4ea4\u6362\u56de\u7b54\u7684\u987a\u5e8f\uff0c\u6309\u4e0a\u9762\u7684\u7b97\u6cd5\u53bb\u505a\u3002\n\n\u4ece(L,R)\u8f6c\u79fb\u5230(L1,R1)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f|L1-L|+|R1-R|\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u6574\u4e2a\u7a0b\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6O(n\\*\u221an)\u3002\n\u90a3\u4e48\u600e\u4e48\u4ea4\u6362\u987a\u5e8f\u5462\uff1f\n\n\u53ea\u9700\u8981\u5148\u5c06\u6bcf\u4e2a\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u5206\u5757\uff0c\u5206\u6210\u221an\u5757\uff0c\u6bcf\u5757\u221an\uff0c\u6700\u540e\u591a\u51fa\u7684\u65b0\u5f00\u4e00\u5757\uff0c\n\n\u7136\u540e\u6309\u5de6\u7aef\u70b9\u6240\u5728\u5757\u7684\u5e8f\u53f7\uff08L/sqrt(n)\uff09\u4e3a\u7b2c\u4e00\u5173\u952e\u8bcd\uff0c\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u8bcd\u6392\u5e8f\u5c31\u884c\u4e86\u3002\n\n\u6392\u5e8f\u5b8c\u76f4\u63a5\u6309\u4e4b\u524d\u8bf4\u7684\u8f6c\u79fb\u72b6\u6001\u5c31\u884c\u4e86\u3002\n\n\u81f3\u4e8e\u5e26\u4fee\u6539\u83ab\u961f\uff0c\u6211\u4eec\u9700\u8981\u52a0\u4e00\u4e2a\u8bb0\u5f55\u8be2\u95ee\u7684\u53d8\u91cfX\uff0c\u8868\u793a\u5728\u8fd9\u4e2a\u8be2\u95ee\u4e4b\u524d\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u4fee\u6539\u3002\n\n\u5e76\u4e14\u8981\u8bb0\u5f55\u6bcf\u6b21\u4fee\u6539\uff0c\u4fee\u6539\u7684\u4f4d\u7f6e\uff0c\u4fee\u6539\u524d\u7684\u989c\u8272\uff0c\u4fee\u6539\u540e\u7684\u989c\u8272\u3002\n\n\u548c\u666e\u901a\u83ab\u961f\u4e00\u6837\u5904\u7406\uff0c\n\n\u5f53\u78b0\u5230\u4e00\u4e2a\u8be2\u95ee\u9700\u8981X\u6b21\u4fee\u6539\uff0c\u800c\u5f53\u524d\u53ea\u6267\u884c\u4e86X-3\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u5c31\u8981\u6267\u884c\u90a33\u6b21\u4fee\u6539\u3002\n\n\u540c\u6837\u5730\uff0c\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u6267\u884c\u4e86X+3\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u5c31\u8981\u5012\u90003\u6b21\u4fee\u6539\u3002\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u3002\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u65f6\u95f4\u590d\u6742\u5ea6O(n^3/5)\n\n\u4ee3\u7801\u4e11\uff0c\uff0c\u56e0\u4e3a\u6211\u6539\u4e86\u592a\u4e45\uff0c\uff0c\u5f88\u70e6\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <stack>\n#include <list>\n#define rep(i,m,n) for(int i=m;i<=n;i++)\n#define dop(i,m,n) for(int i=m;i>=n;i--)\n#define lowbit(x) (x&(-x))\n#define ll long long\n#define INF 2147483647\nusing namespace std;\ninline int read(){\n    int s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\nconst int maxn=10010;\nconst int maxm=10010;\nstruct Ask{      //\u8bb0\u5f55\u8be2\u95ee\n    int L,R,X,id,lk;        //L,R\u8be2\u95ee\u533a\u57df\uff0clk\u5de6\u7aef\u70b9\u6240\u5728\u5757\n}A[maxm];\nstruct Do{        //\u8bb0\u5f55\u4fee\u6539\n    int x,f,t;      //x\u4f4d\u7f6e\uff0cf\u539f\u6765\u7684\u989c\u8272\uff0ct\u4fee\u6539\u540e\u7684\u989c\u8272\n}D[maxm];\nint l,r,a[maxn],n,m,color[maxn],ans,len,m1,m2,x,Ans[maxm],c[maxn];\nchar ch;\nvoid move(int now,int mode){               \n    color[a[now]]+=mode;\n    if(!color[a[now]]&&mode==-1) ans--;\n    if(color[a[now]]==1&&mode==1) ans++;\n}\nint cmp(const Ask &A,const Ask &B){\n    if(A.lk==B.lk) return A.R<B.R;\n    return A.lk<B.lk;\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    len=(int)sqrt(n);   //\u5757\u7684\u5927\u5c0f\n    rep(i,1,n)\n       cin>>a[i],c[i]=a[i];      //\u628aa\u6570\u7ec4\u5907\u4efd\n    rep(i,1,m){\n       cin>>ch;\n       if(ch=='Q'){\n         cin>>A[++m1].L;             //m1\u8be2\u95ee\u6b21\u6570\n         cin>>A[m1].R;\n         A[m1].X=m2;\n         A[m1].id=m1;\n         A[m1].lk=(A[m1].L-1)/len+1;  \n       }\n       else{       //m2\u4fee\u6539\u6b21\u6570\n         cin>>D[++m2].x;     //\u4fee\u6539\u7684\u4f4d\u7f6e\n         D[m2].f=a[D[m2].x];  //\u4fdd\u5b58\u539f\u6765\u7684\u989c\u8272\n         cin>>D[m2].t;       //\u8bfb\u5165\u4fee\u6539\u540e\u7684\u989c\u8272\n         a[D[m2].x]=D[m2].t;  //\u4fee\u6539\u989c\u8272\n       }\n    }\n    rep(i,1,n) a[i]=c[i];   //\u628aa\u6570\u7ec4\u8fd8\u539f\n    color[a[1]]=1;\n    ans=1;\n    l=r=1;\n    sort(A+1,A+m1+1,cmp);    //\u628a\u8be2\u95ee\u6392\u5e8f\n    rep(i,1,m1){   //\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\n                         //\u83ab\u961f\n       while(x<A[i].X){                //x\u662f\u5df2\u6267\u884c\u7684\u4fee\u6539\n         Do tmp=D[++x];\n         if(l<=tmp.x&&r>=tmp.x){\n           color[a[tmp.x]]--;\n           ans-=!color[a[tmp.x]];\n           a[tmp.x]=tmp.t;\n           color[a[tmp.x]]++;\n           ans+=color[a[tmp.x]]==1;\n         }\n         a[tmp.x]=tmp.t;\n       }\n       while(x>A[i].X){\n         Do tmp=D[x--];\n         if(l<=tmp.x&&r>=tmp.x){\n           color[a[tmp.x]]--;\n           ans-=!color[a[tmp.x]];\n           a[tmp.x]=tmp.f;\n           color[a[tmp.x]]++;\n           ans+=color[a[tmp.x]]==1;\n         }\n         a[tmp.x]=tmp.f;\n       }\n       Ask tmp=A[i];\n       while(l<tmp.L) move(l-0,-1),l++;       //\u666e\u901a\u83ab\u961f\n       while(l>tmp.L) move(l-1,+1),l--;\n       while(r<tmp.R) move(r+1,+1),r++;\n       while(r>tmp.R) move(r+0,-1),r--;\n       Ans[tmp.id]=ans;\n    }\n    rep(i,1,m1) printf(\"%d\\n\",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1506777713,
        "uid": 54636,
        "name": "Riven_Yasuo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1903 \u3010\u3010\u6a21\u677f\u3011\u5206\u5757/\u5e26\u4fee\u6539\u83ab\u961f\uff08\u6570\u989c\u8272\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u732e\u4e0a\u4e00\u4efd\u7f13\u6162\u7684\u6811\u5957\u6811\u9898\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684pre\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u4e00\u4e2a\u540c\u8272\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u7136\u540e\u5efa\u7acb\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u6309\u7167[\u8fd9\u91cc](http://www.cnblogs.com/xzz_233/p/cogs421.html)\u7684\u65b9\u6cd5\u5c31\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u65f6\u5019\u7684pre\uff0c\u6211\u4eec\u5f001e6\u9897set\u8fdb\u884c\u66b4\u529b\u7684\u7ef4\u62a4\u3002\n\n\u7531\u4e8e\u9996\u5c3e\u989c\u8272\u7684\u5904\u7406\u4f1a\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u8fdb\u884c\u4e86\u63d2\u51650\u548cN+10\u7684\u8fb9\u754c\u503c\u5f97\u64cd\u4f5c\uff08\u7c7b\u4f3csplay\u7684\u533a\u95f4\u64cd\u4f5c\uff09\uff0c\u7136\u540e\u5728\u6811\u5957\u6811\u5185\u8fdb\u884c\u4fee\u6539\u65f6\u7279\u5224\u3002\n\n\u8fd9\u91cc\u662flengthy\u7684\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define lowbit(x) ((x)&(-x))\nusing namespace std;\n//defs========================\nint N,M;\nint a[50020];\nint pre[50020],nxt[50020];\nint last[1000020];\n//fotile_BIT_tree\nstruct node {\n    int l,r,sum;\n}T[50010*600];\nint Tcnt,Root[50020];\nint lid[30],lsz,rid[30],rsz;\nvoid modify(int &id,int L,int R,int pos,int vv) {\n    T[++Tcnt]=T[id];\n    id=Tcnt;\n    T[id].sum+=vv;\n    if(L==R)    return;\n    int mid=(L+R)>>1;\n    if(pos<=mid) modify(T[id].l,L,mid,pos,vv);\n    else         modify(T[id].r,mid+1,R,pos,vv);\n}\nvoid pre_modify(int id,int pos,int vv) {\n    if(id==0||id>N)   return;\n    for(int i=id;i<=N;i+=lowbit(i)) {\n        modify(Root[i],1,N+2,pos,vv);\n    }\n}\nint query(int id,int L,int R,int k) {//\u5bf9\u5355\u68f5\u6811\u8fdb\u884c\u67e5\u8be2,\u8fd9\u91cc\u7684L\uff0cR\u662f\u503c\u57df\u533a\u95f4 \u67e5\u8be2[1,k]\n    if(L>k) return 0;\n    if(R<=k)    return T[id].sum;\n    int mid=(L+R)>>1;\n    return query(T[id].l,L,mid,k)+query(T[id].r,mid+1,R,k);\n}\nint pre_query(int L,int R,int k) {//\u67e5\u8be2[L,R]\u4e4b\u5185\u5728[1,k]\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8fd9\u91cc\u7684L\uff0cR\u662f\u6811\u72b6\u6570\u7ec4\u4e0a\u7684\u533a\u95f4\n    memset(lid,0,sizeof lid),memset(rid,0,sizeof rid),lsz=rsz=0;\n    int ret=0;\n    for(int i=R;i;i-=lowbit(i))     ret+=query(Root[i],1,N+2,k);//,printf(\"ret+=%d\\n\",query(Root[i],1,N+2,k));\n    for(int i=L-1;i;i-=lowbit(i))   ret-=query(Root[i],1,N+2,k);//,printf(\"ret-=%d\\n\",query(Root[i],1,N+2,k));\n    return ret;\n}\n//pre && nxt\ntypedef set<int>::iterator Iter;\nset<int> S[1000100];\nmap<int,int> vis;\nvoid init() {\n    For(i,1,N) {\n        S[a[i]].insert(i);\n        if(!vis[a[i]]) {\n            ++vis[a[i]];\n            S[a[i]].insert(0),S[a[i]].insert(N+10);\n        }\n    }\n}\nvoid change(int pos,int col) {////////////////TODO\n    if(!vis[col]) {\n        ++vis[col];\n        S[col].insert(0),S[col].insert(N+10);\n    }\n    int ori=a[pos];\n    ///now deleting\n    Iter it=S[a[pos]].find(pos),it_pre,it_nxt;\n    it_pre=--it;++it;\n    it_nxt=++it;--it;\n\n    pre_modify(*it_nxt,pre[*it_nxt]+1,-1);\n    pre_modify(*it,pre[*it]+1,-1);\n\n    pre[*it_nxt]=*it_pre;\n    nxt[*it_pre]=*it_nxt;\n    pre_modify(*it_nxt,pre[*it_nxt]+1,1);\n    S[a[pos]].erase(it);\n\n    ///now adding\n    a[pos]=col;\n    S[a[pos]].insert(pos);\n    it=S[a[pos]].find(pos);\n    it_pre=--it;++it;\n    it_nxt=++it;--it;\n\n    pre_modify(*it_nxt,pre[*it_nxt]+1,-1);\n    pre[*it_nxt]=*it;\n    nxt[*it]=*it_nxt;\n    nxt[*it_pre]=*it;\n    pre[*it]=*it_pre;\n\n    pre_modify(*it_nxt,pre[*it_nxt]+1,1);\n    pre_modify(*it,pre[*it]+1,1);\n}\n//main=======================\nint main() {\n    scanf(\"%d%d\",&N,&M);\n    For(i,1,N) {\n        scanf(\"%d\",a+i);\n        pre[i]=last[a[i]],nxt[pre[i]]=i,last[a[i]]=i;\n    }\n    init();\n    For(i,1,N) pre_modify(i,pre[i]+1,1);\n    while(M--) {\n        char opt[30];\n        scanf(\"%s\",opt);\n        switch(opt[0]) {\n            case 'Q':\n                int L,R;\n                scanf(\"%d%d\",&L,&R);\n                printf(\"%d\\n\",pre_query(L,R,L));\n                break;\n            case 'R':\n                int P,C;\n                scanf(\"%d%d\",P,&C);\n                change(P,C);\n                break;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1526534182,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1903 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272\u3011"
    }
]