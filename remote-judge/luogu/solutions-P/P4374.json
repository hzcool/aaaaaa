[
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u4e5f\u53ef\u4ee5\u4e0d\u7528\u6811\u5256\uff0c\u5148\u628a\u65b0\u52a0\u7684\u9053\u8def\u6309\u7167\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f\uff0c\u8fd9\u6837\u6bcf\u6b21\u5f80\u4e0a\u8d70\u7684\u65f6\u5019\u539f\u6765\u8bbf\u95ee\u8fc7\u7684\u5c31\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u4e86\uff08\u56e0\u4e3a\u7b54\u6848\u4e0d\u4f1a\u53d8\u5f97\u66f4\u4f18\uff09\uff0c\u8fd9\u6837\u76f4\u63a5\u5c31\u53ef\u4ee5\u7528\u7c7b\u4f3c\u5e76\u67e5\u96c6\u7684\u65b9\u6cd5\u5c31\u884c\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint ans[50010];\nint n,m;\nint par[50010][17];\nint dep[50010];\nint po[50010];\nint to[50010];\nvector<pair<int,int> >G[50010];\npair<int,pair<int,int> >roads[50010];\nint getto(int x)\n{\n\tif(to[x]==x)return x;\n\treturn to[x]=getto(to[x]);\n}\nvoid dfs(int x,int p)\n{\n\tfor(int i=0;i<G[x].size();i++)\n\t{\n\t\tint y=G[x][i].first,id=G[x][i].second;\n\t\tif(y==p)continue;\n\t\tpo[id]=y;\n\t\tpar[y][0]=x;\n\t\tdep[y]=dep[x]+1;\n\t\tdfs(y,x);\n\t}\n}\nint lca(int x,int y)\n{\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=16;i>=0;i--)if(dep[par[x][i]]>=dep[y])x=par[x][i];\n\tif(x==y)return x;\n\tfor(int i=16;i>=0;i--)if(par[x][i]!=par[y][i])x=par[x][i],y=par[y][i];\n\treturn par[x][0];\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tG[x].push_back(make_pair(y,i));\n\t\tG[y].push_back(make_pair(x,i)); \n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\troads[i]=make_pair(z,make_pair(x,y));\n\t}\n\tdep[0]=-1;\n\tdfs(1,0);\n\tfor(int i=1;i<=16;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)par[j][i]=par[par[j][i-1]][i-1];\n\t}\n\tfor(int i=1;i<=n;i++)to[i]=i;\n\tfor(int i=1;i<=n;i++)ans[i]=-1;\n\tsort(roads+1,roads+m+1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint v=roads[i].first;\n\t\tint x=roads[i].second.first,y=roads[i].second.second;\n\t\tint xy=lca(x,y);\n\t\tfor(x=getto(x);dep[x]>dep[xy];x=getto(par[x][0]))\n\t\t{\n\t\t\tans[x]=v;\n\t\t\tto[x]=par[x][0];\n\t\t}\n\t\tfor(y=getto(y);dep[y]>dep[xy];y=getto(par[y][0]))\n\t\t{\n\t\t\tans[y]=v;\n\t\t\tto[y]=par[y][0];\n\t\t}\n\t}\n\tfor(int i=1;i<n;i++)printf(\"%d\\n\",ans[po[i]]);\n\treturn 0;\n}\n```",
        "postTime": 1531466472,
        "uid": 59551,
        "name": "ASSWECAN",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "\u65e2\u7136\u6ca1\u6709\u6709\u56fe\u7684\u9898\u89e3\uff0c\u90a3\u6211\u5c31\u8fc7\u6765\u8865\u4e2a\u56fe\u52a0\u601d\u8def\u4e86\n### \u753b\u56fe\n\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u9897\u6811\n![](https://i.loli.net/2019/03/06/5c7f0e0adb762.png)\n\u73b0\u5728\u591a\u4e86\u4e00\u6761\u989d\u5916\u9053\u8def\n![](https://i.loli.net/2019/03/06/5c7f0e497d85c.png)\n\u5219\u5f53\u4e14\u4ec5\u5f53\u989d\u5916\u9053\u8def\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u8054\u901a\u5757\u5185\u65f6\uff0c\u8fd9\u6761\u8fb9\u624d\u6709\u8d21\u732e\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5206\u5f00\u7684\u8fb9\u6807\u8bb0\u51fa\u6765\n![](https://i.loli.net/2019/03/06/5c7f0d7dd41c9.png)\n\u53d1\u73b0\u8fd9\u4e9b\u8fb9\u6784\u6210\u7684\u8def\u5f84\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u7b80\u5355\u8def\u5f84\uff0c\u76f4\u63a5\u7528\u6811\u5256\u7ef4\u62a4\u533a\u95f4\u6781\u503c\u5373\u53ef\n\uff08\u4e0d\u8981\u95ee\u6211\u524d\u4e24\u5f20\u56fe\u4e3a\u4ec0\u4e48\u90a3\u4e48\u602a\uff0c\u56e0\u4e3a\u6211\u662f\u7531\u7ed3\u679c\u6539\u51fa\u8fc7\u7a0b\uff08\u7b80\u79f0\u61d2\uff09\uff09\n### \u8bc1\u660e\n\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5feb\u5185\uff0c\u5373\u4e24\u70b9\u4e4b\u95f4\u4e0d\u5b58\u5728\u7b80\u5355\u8def\u5f84\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u4e24\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u53ea\u6709\u5207\u65ad\u7b80\u5355\u8def\u5f84\u624d\u80fd\u4f7f\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u8bc1\u6bd5\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=50009;\nint head[N],to[N<<1],nt[N<<1];\nstruct gzw\n{\n    int st,ed,val;\n}way[N];\nint n,m,bh,totid;\nint top[N],siz[N],mxson[N],fa[N],dep[N],id[N];\nint u[N],v[N];\nint val[N<<4],tag[N<<4];\nbool rnk(gzw a,gzw b)\n{\n    return a.val>b.val;\t\n}\nvoid add(int u,int v)\n{\n    bh++;\n    nt[bh]=head[u];\n    head[u]=bh;\n    to[bh]=v;\n}\nvoid dfs1(int now,int fath,int depth)\n{\n    fa[now]=fath;\n    dep[now]=depth;\n    siz[now]=1;\n    for(int i=head[now],mx=0;i;i=nt[i])\n    {\n        if(to[i]!=fath)\n        {\n            dfs1(to[i],now,depth+1);\n            siz[now]+=siz[to[i]];\n            if(siz[to[i]]>mx) mx=siz[to[i]],mxson[now]=to[i];\t\n        }\n    }\n}\nvoid dfs2(int now,int tp)\n{\n    id[now]=++totid;\n    top[now]=tp;\n    if(mxson[now])\n    {\n        dfs2(mxson[now],tp);\n    }\n    for(int i=head[now];i;i=nt[i])\n    {\n        if(to[i]!=fa[now]&&to[i]!=mxson[now])\n        {\n            //cout<<now<<\" \"<<to[i]<<endl;\n            dfs2(to[i],to[i]);\n        }\n    }\n}\nvoid upd (int &x,int k)\n{\n    x=(x==-1?k:min(x,k));\t\n}\nvoid pushdown(int now)\n{\n    if(tag[now]!=-1)\n    {\n        upd(val[now],tag[now]);\n        upd(tag[now<<1],tag[now]);\n        upd(tag[now<<1|1],tag[now]);\n        tag[now]=-1;\n    }\n}\nint query(int now,int l,int r,int pos)\n{\n    //cout<<l<<\" \"<<r<<\" \"<<pos<<endl;\n    pushdown(now);\n    if(l==pos&&r==pos)\n    {\n        return val[now];\n    }\n    int mid=(l+r)>>1;\n    if(mid>=pos) query(now<<1,l,mid,pos);\n    else query(now<<1|1,mid+1,r,pos);\n}\nvoid change(int now,int l,int r,int ql,int qr,int k)\n{\n    pushdown(now);\n    if(ql<=l&&qr>=r)\n    {\n        //cout<<now<<\" \"<<ql<<\" \"<<qr<<\" \"<<l<<\" \"<<r<<\" 666\"<<endl;\n        upd(val[now],k);\n        upd(tag[now<<1],k);\n        upd(tag[now<<1|1],k);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(mid>=qr) change(now<<1,l,mid,ql,qr,k);\n    else if(mid<ql) change(now<<1|1,mid+1,r,ql,qr,k);\n    else change(now<<1,l,mid,ql,qr,k),change(now<<1|1,mid+1,r,ql,qr,k);\n    return;\n}\nvoid C(int x,int y,int k)\n{\n    int tx=top[x],ty=top[y];\n    while(tx!=ty)\n    {\n        if(dep[tx]<dep[ty]) swap(x,y),swap(tx,ty);\n        //cout<<id[tx]<<\" \"<<id[x]<<\" \"<<k<<\" 233\"<<endl;\n        change(1,1,n,id[tx],id[x],k);\n        x=fa[tx],tx=top[x];\n    }\n    if(x!=y) \n    {\n        if(id[x]>id[y]) swap(x,y);\n        //cout<<id[x]+1<<\" \"<<id[y]<<\" \"<<k<<\" 233\"<<endl;\n        change(1,1,n,id[x]+1,id[y],k);//???\n    }\n}\nvoid bl(int now,int l,int r)\n{\n    pushdown(now);\n    //cout<<now<<\" \"<<l<<\" \"<<r<<\" \"<<val[now]<<endl;\n    if(l>=r) return;\t\n    bl(now<<1,l,(l+r)>>1);\n    bl(now<<1|1,((l+r)>>1)+1,r);\n}\nint main() \n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<n;i++)\n    {\n    \tscanf(\"%d %d\",&u[i],&v[i]);\n    \tadd(u[i],v[i]);\n    \tadd(v[i],u[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n    \tscanf(\"%d %d %d\",&way[i].st,&way[i].ed,&way[i].val);\t\n    }\n    sort(way+1,way+m+1,rnk);\n    dfs1(1,0,1);\n    dfs2(1,1);\n    \n    memset(val,-1,sizeof(val));\n    memset(tag,-1,sizeof(tag));\n    for(int i=1;i<=m;i++)\n    {\n    \tC(way[i].st,way[i].ed,way[i].val);\t\n    \t//bl(1,1,n);\n    \t//cout<<endl;\n    }\n    for(int i=1,ls;i<n;i++)\n    {\n    \t//cout<<(dep[u[i]]>dep[v[i]]?id[u[i]]:id[v[i]])<<\" \"<<666<<endl;\n        ls=query(1,1,n,dep[u[i]]>dep[v[i]]?id[u[i]]:id[v[i]]);\n    \tprintf(\"%d\\n\",ls);\n    }\n}\n/*\n\n*/\n```",
        "postTime": 1551704794,
        "uid": 26199,
        "name": "wenjing233",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u9898\u662f\u4e00\u79cd\u6bd4\u8f83\u5957\u8def\u7684\u9898\u76ee\uff0c\u8003\u8651\u6b63\u5411\u53bb\u601d\u8003\uff0c\u53d1\u73b0\u4e0d\u662f\u5f88\u597d\u641e\uff0c\u56e0\u4e3a\u5220\u9664\u6bcf\u6761\u8fb9\u4e4b\u540e\u90fd\u8981\u53bb\u5b50\u6811\u91cc\u8fb9\u5bfb\u627e\u53ef\u4ee5\u66ff\u4ee3\u7684\u8fb9\uff0c\u6240\u4ee5\u6b63\u96be\u5219\u53cd\uff0c\u8003\u8651$m$\u6761\u8fb9\u4e2d\u6bcf\u6761\u8fb9\u7684\u8d21\u732e\u3002\n\n\u753b\u4e00\u4e0b\u56fe\u5373\u53ef\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fde\u63a5$<x,y>$\u7684\u8fb9\uff0c\u5b83\u80fd\u591f\u66f4\u65b0\u4ece$x,y$\u5230$lca$\u4e4b\u95f4\u7684\u6240\u6709\u8fb9\uff0c\u5bf9\u8fb9\u64cd\u4f5c\u4e0d\u662f\u5f88\u597d\u641e\u6240\u4ee5\u53c8\u7528\u5230\u4e00\u4e2a\u5957\u8def\uff0c\u5c06\u7236\u8fb9\u4e0b\u653e\u5230\u5b50\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u5c31\u6709\u4e86\u4e00\u4e2a$nlog^2n$\u7684\u6811\u5256\u7ebf\u6bb5\u6811\u5199\u6cd5\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\u8db3\u591f\u4e86\uff0c\u4f46\u662f\u8fd9\u6837\u771f\u7684\u662f\u6700\u4f18\u7684\u5417\uff1f\n\n\u663e\u7136\u5e94\u8be5\u4e0d\u662f\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5176\u5b9e\u4f1a\u6709\u5f88\u591a\u65e0\u7528\u7684\u66f4\u65b0\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u6765\u8bf4\u6709\u7528\u7684\u66f4\u65b0\u53ea\u6709\u4e00\u6b21\uff0c\u5c31\u662f\u80fd\u591f\u66f4\u65b0\u5230\u5b83\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u8fb9\u7684\u6743\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e0b\u4e00\u6b21\u66f4\u65b0\u7684\u70b9\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(n\\times(\\text{\u5e76\u67e5\u96c6}))$\n\n```cpp\n/*\n6 3\n1 2\n1 3\n4 1\n4 5\n6 5\n2 3 7\n3 6 8\n6 4 5\n*/\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=5e4+10;\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\nint h[N],idx=1;\nvoid Ins(int a,int b){\n\te[++idx].to=b;e[idx].nxt=h[a];h[a]=idx;\n}\nint f[N];\nint find(int x){\n\treturn f[x]==x?x:(f[x]=find(f[x]));\n}\nstruct Node{\n\tint x,y,w;\n\tNode(){}\n\tNode(int a,int b,int c){\n\t\tx=a;y=b;w=c;\n\t}\n\tbool operator < (const Node&A)const{\n\t\treturn w<A.w;\n\t}\n}a[N];\nint fa[N],dep[N],son[N],len[N],tp[N],edg[N<<1],ans[N];\nvoid dfs1(int u){\n\tlen[u]=1;\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==fa[u])continue;\n\t\tfa[v]=u;\n\t\tdep[v]=dep[u]+1;\n\t\tedg[i]=edg[i^1]=v;\n\t\tdfs1(v);\n\t\tlen[u]=max(len[u],len[v]+1);\n\t\tif(len[v]>len[son[u]])son[u]=v;\n\t}\n}\nvoid dfs2(int u,int t){\n\ttp[u]=t;\n\tif(son[u])dfs2(son[u],t);\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\nint lca(int x,int y){\n\twhile(tp[x]^tp[y]){\n\t\tif(dep[tp[x]]>dep[tp[y]])x=fa[tp[x]];\n\t\telse y=fa[tp[y]];\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2;i<=n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tIns(x,y);Ins(y,x);\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].w);\n\tsort(a+1,a+m+1);\n\tfor(int i=1;i<=n;i++)\n\t\tf[i]=i;\n\tmemset(ans,-1,sizeof(ans));\n\tfor(int i=1;i<=m;i++){\n\t\tint x=find(a[i].x),y=find(a[i].y);\n\t\tint now=dep[lca(a[i].x,a[i].y)];\n\t\twhile(dep[x]>now){\n\t\t\tans[x]=a[i].w;\n\t\t\tf[x]=find(fa[x]);\n\t\t\tx=find(x);\n\t\t}\n\t\twhile(dep[y]>now){\n\t\t\tans[y]=a[i].w;\n\t\t\tf[y]=find(fa[y]);\n\t\t\ty=find(y);\n\t\t}\n\t}\n\tfor(int i=2;i<=idx;i+=2)\n\t\tprintf(\"%d\\n\",ans[edg[i]]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1604228293,
        "uid": 305262,
        "name": "Su_Zipei",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption P\u3011"
    },
    {
        "content": "\u770b\u5230\u662f\u7d2b\u9898\u6709\u70b9\u5bb3\u6015\uff0c\u7ed3\u679c\u60f3\u4e86\u60f3\u53d1\u73b0\u662f\u677f\u5b50\u3002\n\n\u672c\u9898\u89e3\u91c7\u7528\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u3002\n\n\u9898\u610f\u662f\u7ed9\u51fa\u4e00\u68f5\u6811\u548c\u4e00\u4e9b\u5e26\u8fb9\u6743\u7684\u989d\u5916\u8fb9\uff0c\u8981\u6c42\u4f9d\u6b21\u56de\u7b54\u53bb\u6389\u6bcf\u4e00\u6761\u6811\u8fb9\u540e\uff0c\u82e5\u9009\u53d6\u4e00\u6761\u989d\u5916\u8fb9\u4f7f\u5f97\u6811\u4ecd\u8054\u901a\uff0c\u9009\u53d6\u8fb9\u7684\u8fb9\u6743\u6700\u5c0f\u662f\u591a\u5c11\u3002\u65e0\u89e3\u8f93\u51fa `-1`\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u989d\u5916\u8fb9\uff0c\u5047\u8bbe\u4e24\u7aef\u70b9\u5206\u522b\u4e3a `x` \u548c `y`\uff0c\u90a3\u4e48**\u8fd9\u6761\u8fb9\u4f1a\u548c\u539f\u6765\u6811\u4e0a `x` \u548c `y` \u4e4b\u95f4\u7684\u94fe\u6784\u6210\u4e00\u4e2a\u73af**\u3002\u8fd9\u4e2a\u73af\u4e0a\u4efb\u4f55\u4e00\u6761\u6811\u8fb9\u88ab\u65ad\uff0c\u65ad\u5f00\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u6211\u4eec\u521a\u52a0\u7684\u8fd9\u6761\u989d\u5916\u8fb9\u4fdd\u6301\u8054\u901a\u3002\u800c\u4e14\u5982\u679c\u4e00\u6761\u6811\u8fb9\u4e0d\u5728\u8fd9\u4e2a\u73af\u4e0a\uff0c\u90a3\u4e48\u65ad\u4e86\u8fd9\u6761\u6811\u8fb9\uff0c\u8fd9\u6761\u989d\u5916\u8fb9\u4e5f\u65e0\u6cd5\u4f7f\u6811\u4fdd\u6301\u8054\u901a\u3002\u8fd9\u4e2a\u663e\u7136\u5427\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8fb9\u8f6c\u70b9\u3002\u5728\u70b9\u7684\u65f6\u95f4\u6233\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u6bcf\u7247\u53f6\u5b50\u7ef4\u62a4\u201c\u5220\u6389\u8fd9\u4e2a\u70b9\u6240\u4ee3\u8868\u7684\u8fb9\u540e\uff0c\u4f7f\u6811\u8054\u901a\u9700\u8981\u7684\u6700\u77ed\u8fb9\u7684\u8fb9\u6743\u201d\u3002\u533a\u95f4\u4fe1\u606f\u90fd\u4e0d\u7528\u5408\u5e76\uff0c\u56e0\u4e3a\u662f\u5355\u70b9\u67e5\u8be2\u3002\n\n\u8fd9\u6837\u6211\u4eec\u6bcf\u6b21\u8bfb\u5165\u4e00\u6761\u4e24\u7aef\u70b9\u5206\u522b\u4e3a `x` \u548c `y` \uff0c\u6743\u503c\u4e3a `k` \u7684\u989d\u5916\u8fb9\uff0c\u5e38\u89c4\u6811\u5256\u5199\u6cd5\uff0c\u5728\u6811\u4e0a\u4ee5 `x` \u548c `y` \u4e3a\u7aef\u70b9\u7684\u94fe\u4e0a\u8fdb\u884c\u548c `k` \u53d6 `min`\u3002\n\n\n\u67e5\u8be2\u7684\u65f6\u5019\u5148\u5f97\u5230\u8fd9\u6761\u8fb9\u5bf9\u5e94\u7684\u70b9\uff0c\u7136\u540e\u5355\u70b9\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010,INF=1000000100;\nint n,m;\nint head[N],nex[N*2],to[N*2],cnt;\nvoid add(int x,int y){\n\tcnt++;\n\tnex[cnt]=head[x];\n\tto[cnt]=y;\n\thead[x]=cnt;\n}\nint fa[N],dep[N],tp[N],sz[N],son[N],tot,dfn[N];\nvoid dfs1(int x,int f){\n\tfa[x]=f;\n\tdep[x]=dep[f]+1;\n\tsz[x]=1;\n\tint maxn=-1;\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(y==f)\n\t\t\tcontinue;\n\t\tdfs1(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>maxn){\n\t\t\tmaxn=sz[y];\n\t\t\tson[x]=y;\n\t\t}\n\t}\n}\nvoid dfs2(int x,int top){\n\ttp[x]=top;\n\ttot++;\n\tdfn[x]=tot;\n\tif(son[x])\n\t\tdfs2(son[x],top);\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(y==fa[x]||y==son[x])\n\t\t\tcontinue;\n\t\tdfs2(y,y);\n\t}\n}\nstruct ST{\n\tint minn;\n\tint tag;\n}st[N*4];\nstruct Edge{\n\tint x;\n\tint y;\n}g[N];\nint res;\ninline int min(int x,int y){\n\tif(x<y)\n\t\treturn x;\n\treturn y;\n}\nvoid push_down(int root,int l,int r){\n\tint k=st[root].tag;\n\tst[root].tag=INF;\n\tst[root*2].minn=min(st[root*2].minn,k);\n\tst[root*2+1].minn=min(st[root*2+1].minn,k);\n\tst[root*2].tag=min(st[root*2].tag,k);\n\tst[root*2+1].tag=min(st[root*2+1].tag,k);\n}\nvoid change(int root,int l,int r,int x,int y,int k){\n\tif(l>=x&&r<=y){\n\t\tst[root].minn=min(st[root].minn,k);\n\t\tst[root].tag=min(st[root].tag,k);\n\t\treturn;\n\t}\n\tif(l!=r&&st[root].tag!=INF)\n\t\tpush_down(root,l,r);\n\tint mid=(l+r)/2;\n\tif(mid>=x)\n\t\tchange(root*2,l,mid,x,y,k);\n\tif(mid+1<=y)\n\t\tchange(root*2+1,mid+1,r,x,y,k);\n}\nvoid ask(int root,int l,int r,int x){\n\tif(l==r){\n\t\tres=st[root].minn;\n\t\treturn;\n\t}\n\tif(l!=r&&st[root].tag!=INF)\n\t\tpush_down(root,l,r);\n\tint mid=(l+r)/2;\n\tif(mid>=x)\n\t\task(root*2,l,mid,x);\n\tif(mid+1<=x)\n\t\task(root*2+1,mid+1,r,x);\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tg[i].x=x;\n\t\tg[i].y=y;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs1(1,1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n*4;i++)\n\t\tst[i].minn=st[i].tag=INF;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,k;\n\t\tcin>>x>>y>>k;\n\t\twhile(tp[x]!=tp[y]){\n\t\t\tif(dep[tp[x]]<dep[tp[y]])\n\t\t\t\tswap(x,y);\n\t\t\tchange(1,1,n,dfn[tp[x]],dfn[x],k);\n\t\t\tx=fa[tp[x]];\n\t\t}\n\t\tif(x!=y){\n\t\t\tif(dep[x]>dep[y])\n\t\t\t\tswap(x,y);\n\t\t\tchange(1,1,n,dfn[x]+1,dfn[y],k);\n\t\t}\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tres=INF;\n\t\task(1,1,n,max(dfn[g[i].x],dfn[g[i].y]));\n\t\tif(res==INF)\n\t\t\tprintf(\"-1\\n\");\n\t\telse\n\t\t\tprintf(\"%d\\n\",res);\n\t}\n\treturn 0;\n}\n\n \n```",
        "postTime": 1639111613,
        "uid": 140360,
        "name": "LKawaii",
        "ccfLevel": 0,
        "title": "P4374\u9898\u89e3"
    },
    {
        "content": "### \u9898\u610f\uff1a\u7ed9\u4f60 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u518d\u7ed9\u4f60 $m$ \u6761\u8fb9\uff0c\u6c42\u6362\u4e0a\u8fd9\u6761\u8fb9\u540e\uff0c\u5728\u4fdd\u8bc1\u8fde\u901a\u6027\u65f6\uff0c\u53ef\u4ee5\u5220\u53bb\u54ea\u4e9b\u8fb9\u3002\u6700\u540e\u95ee\u6bcf\u6761\u8fb9\u53ef\u4ee5\u6539\u53d8\u7684\u503c\u4e2d\u6700\u5c0f\u7684\u503c\u3002\n\n#### \u5148\u753b\u56fe\u5206\u6790(\u624b\u73a9\u6837\u4f8b)\uff1a\n\n#### \u8fd9\u662f\u52a0\u8fb9\u4e4b\u540e\u7684\u6811\u7684\u6837\u5b50(\u7ea2\u8fb9\u662f\u65b0\u52a0\u7684)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mtadw03w.png)\n\n#### \u8fd9\u662f\u8fb9\u53ef\u4ee5\u9009\u62e9\u7684\u6700\u5c0f\u503c\n![](https://cdn.luogu.com.cn/upload/image_hosting/pvl90ozf.png)\n#### \u5176\u5b9e\u53ef\u4ee5\u5f88\u597d\u53d1\u73b0\uff1a\n\n- \u52a0\u4e0a\u4e00\u6761\u8fb9\u4e4b\u540e\uff0c\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\u662f\u4e0e\u8fd9\u6761\u65b0\u52a0\u7684\u8fb9\u6784\u6210\u7684\u73af\u4e2d\u7684\u8fb9\u3002\n- \u539f\u6811\u7684\u5f62\u6001\u4e0d\u53d8\uff0c\u5f53\u4e00\u6761\u8fb9\u5728\u88ab\u591a\u6761\u8fb9\u6784\u6210\u7684\u73af\u4e2d\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u7684\u6700\u5c0f\u503c\u662f\u65b0\u52a0\u8fb9\u7684\u6700\u5c0f\u503c\n- \u6811\u4e0a\u5bf9\u8fb9\u8d4b\u503c\uff0c\u5df2\u7ecf\u660e\u793a\u4e86\u7b54\u6848 -> \u6811(\u91cd)\u94fe\u5256\u5206\n\n\u5982\u679c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6811\u94fe\u5256\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nlog^2n)$\n\u8fd9\u65f6\u5019\u5176\u5b9e\u60a8\u5df2\u7ecf\u53ef\u4ee5 $AC$ \u4e86\u3002\n\n### \u4f46\u662f\u4f7f\u7528LCT\u53ef\u4ee5\u505a\u5230 $O(nlogn)$\n\n\u901a\u8fc7\u52a8\u6001\u7ef4\u62a4\u8def\u5f84\uff0c\u4e00\u6b21\u8be2\u95ee\u505a\u5230 $O(logn)$\n\n\u7136\u800c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898LCT\u53ea\u80fd\u7ef4\u62a4\u70b9\u503c\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u5c06\u8fb9\u62c6\u6210\u4e24\u7aef\u70b9\u4e2d\u95f4\u7684\u4e00\u4e2a\u65b0\u70b9\n\n#### \u8bdd\u8bf4LCT\u7684\u7801\u91cf\u6bd4\u8d77\u6811\u94fe\u5256\u5206\u53cb\u597d\u591a\u4e86\uff0c\u82e5\u4e0d\u77e5\u9053LCT\u7684\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684[\u535a\u5ba2](https://www.cnblogs.com/flashhu/p/8324551.html)\n\n\u4ee3\u7801\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 551000\n#define inf 0x3f3f3f3f\nint c[N][2],ad[N],f[N],v[N],to[N],from[N];\nint n,m;\nbool r[N];\nvoid pushr(int x){swap(c[x][0],c[x][1]);r[x]^=1;}\nvoid pusha(int x,int k){v[x] = min(k,v[x]);ad[x] = min(k,ad[x]);}\nbool isroot(int x){return c[f[x]][1] == x||c[f[x]][0] == x;}\nvoid pushdown(int x)\n{\n\tif(ad[x]!=inf){pusha(c[x][1],ad[x]);pusha(c[x][0],ad[x]);ad[x] = inf;}\n\tif(r[x])\n\t{\n\t\tif(c[x][1]) pushr(c[x][1]);\n\t\tif(c[x][0]) pushr(c[x][0]);\n\t\tr[x] = 0;\n\t}\n}\nvoid rotate(int x)\n{\n\tint y = f[x],z = f[y],k = c[y][1] == x,w = c[x][1^k];\n\tif(isroot(y)) c[z][c[z][1] == y] = x;\n\tc[x][1^k] = y;\n\tc[y][k] = w;\n\tif(w)f[w] = y;\n\tf[y] = x;\n\tf[x] = z;\n}\nvoid push(int x)\n{\n\tif(isroot(x)) push(f[x]);\n\tpushdown(x);\n}\nvoid splay(int x)\n{\n\tint y = x,z = 0;\n\tpush(x);\n\twhile(isroot(x))\n\t{\n\t\ty = f[x];z = f[y];\n\t\tif(isroot(y))\n\t\t{\n\t\t\trotate((c[y][1] == x)^(c[z][1] == y)?x:y);\n\t\t}\n\t\trotate(x);\n\t}\n}\nvoid access(int x){\n\tfor(int y = 0;x;x = f[y = x])\n\tsplay(x),c[x][1] = y;\n}\nvoid makeroot(int x){access(x);splay(x);pushr(x);}\nvoid split(int x,int y){makeroot(x);access(y);splay(y);}\nvoid link(int x,int y){makeroot(x);f[x] = y;}\nstruct E{\n\tint a,b,w;\n}e;\n\nint main()\n{\n\tmemset(ad,inf,sizeof(ad));\n\tmemset(v,inf,sizeof(v));\n\tcin>>n>>m;\n\tfor(int i = 1;i < n;i++){\n\tint a,b;\n\tcin>>a>>b;\n\tto[i] = a;\n\tfrom[i] = b;\n\tlink(i+n,a);\n\tlink(i+n,b);\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tcin>>e.a>>e.b>>e.w;\n\t\tsplit(e.a,e.b);\n\t\tpusha(e.b,e.w);\n\t}\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tsplit(to[i],from[i]);\n\t\tif(v[i+n]==inf)cout<<\"-1\"<<endl;\n\t\telse cout<<v[i+n]<<endl;\n\t}\n}\n```\n",
        "postTime": 1579332967,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "\u9664\u4e86\u4f20\u7edf\u7684\u6811\u5256+\u7ebf\u6bb5\u6811\u505a\u6cd5\u4ee5\u5916\uff0c\u8fd9\u91cc\u518d\u63d0\u4f9b\u4e00\u79cd\u6811\u5256+\u73c2\u6735\u8389\u6811\u7684\u505a\u6cd5\u3002\uff08\u73c2\u6735\u8389\u771f\u662f\u592a\u53ef\u7231\u8fa3\uff09\n\n\u6211\u4eec\u628a\u6240\u6709\u989d\u5916\u7684\u8fb9\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5f3a\u884c\u5c06\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\u8def\u5f84\u4e0a\uff0c\u9664\u4e86LCA\u4ee5\u5916\u7684\u6240\u6709\u70b9\u7684\u7b54\u6848\u4fee\u6539\u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\u55ef\uff0c\u533a\u95f4\u63a8\u5e73\uff0c\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u800c\u4e14\u53ea\u6709\u8fd9\u4e00\u4e2a\u64cd\u4f5c\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(nlog^2n)$ \u7684\uff0c\u548c\u6811\u5256+\u7ebf\u6bb5\u6811\u4e00\u6837\u3002\u4e0d\u8fc7\u5b9e\u9645\u8fd0\u884c\u901f\u5ea6\u8c8c\u4f3c\u4e0d\u5c3d\u4eba\u610f\uff08\u672c\u849f\u84bb\u7ebf\u6bb5\u6811\u505a\u6cd5638ms,\u73c2\u6735\u8389\u68111345ms\uff09\u53ef\u80fd\u662fset\u5e38\u6570\u592a\u5927\u4e86\uff1f\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\n#define LL long long\n#define PII pair<int,int>\n#define IT set<node>::iterator\nusing namespace std;\n\nconst int N=1e5+50;\nint n,m,to[N<<1],ne[N<<1],head[N],cnt=0;\nPII Edge[N];\nint fa[N],dep[N],siz[N],wson[N],dfn[N],id[N],tot=0,top[N];\n\ninline int read() {\n\tint x=0,f=1;\n\tchar ch=getchar();\n\tfor(; !isdigit(ch); ch=getchar())if(ch=='-')f=-1;\n\tfor(; isdigit(ch); ch=getchar())x=(x<<3)+(x<<1)+ch-'0';\n\treturn x*f;\n}\n\nnamespace Prework {  //\u5efa\u6811\uff0c\u6811\u5256\n\tinline void Addedge(int x,int y) {\n\t\tto[++cnt]=y;ne[cnt]=head[x];head[x]=cnt;\n\t}\n\tvoid DFS_first(int x,int f) {\n\t\tfa[x]=f;dep[x]=dep[f]+1;siz[x]=1;\n\t\tfor(int i=head[x]; i; i=ne[i])if(to[i]!=f) {\n\t\t\tDFS_first(to[i],x);\n\t\t\tsiz[x]+=siz[to[i]];\n\t\t\tif(siz[to[i]]>siz[wson[x]])wson[x]=to[i];\n\t\t}\n\t}\n\tvoid DFS_second(int x,int tp) {\n\t\tdfn[x]=++tot;id[tot]=x;top[x]=tp;\n\t\tif(wson[x])DFS_second(wson[x],tp);\n\t\tfor(int i=head[x]; i; i=ne[i])if(to[i]!=fa[x] && to[i]!=wson[x]) {\n\t\t\tDFS_second(to[i],to[i]);\n\t\t}\n\t}\n\tvoid Solve() {\n\t\tn=read(),m=read();\n\t\tfor(int i=1; i<n; ++i) {\n\t\t\tEdge[i].first=read(),Edge[i].second=read();\n\t\t\tAddedge(Edge[i].first,Edge[i].second);\n\t\t\tAddedge(Edge[i].second,Edge[i].first);\n\t\t}\n\t\tDFS_first(1,0);DFS_second(1,1);\n\t}\n}\nnamespace Mian{\n\tstruct MoreEdge{\n\t\tint x,y,w;\n\t\tbool operator < (const MoreEdge &x)const {\n\t\t\treturn w>x.w;\n\t\t}\n\t}E[N];\n\tstruct node{\n\t\tint L,R;\n\t\tmutable int v;\n\t\tnode(int _L,int _R=-1,int _v=0) : L(_L),R(_R),v(_v){}\n\t\tbool operator < (const node &x)const {\n\t\t\treturn L<x.L;\n\t\t}\n\t};\n\tset<node> Chtholly;\n\tint Ans[N];\n    //\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5c\n\tIT split(int x){\n\t\tIT it=Chtholly.lower_bound(node(x));\n\t\tif(it!=Chtholly.end() && it->L==x)return it;\n\t\t--it;\n\t\tint L=it->L,R=it->R,v=it->v;\n\t\tChtholly.erase(it);Chtholly.insert(node(L,x-1,v));\n\t\treturn Chtholly.insert(node(x,R,v)).first;\n\t}\n\tvoid assign(int L,int R,int v) {\n\t\tIT Right=split(R+1),Left=split(L);\n\t\tChtholly.erase(Left,Right);\n\t\tChtholly.insert(node(L,R,v));\n\t}\n\tvoid Cover(int T) {\n\t\tint x=E[T].x,y=E[T].y,w=E[T].w;\n\t\twhile(top[x]!=top[y]) {\n\t\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\t\tassign(dfn[top[x]],dfn[x],w);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y])swap(x,y);\n\t\tif(x!=y)assign(dfn[x]+1,dfn[y],w);\n\t}\n\tvoid Solve() {\n\t\tChtholly.insert(node(1,n,-1));\n\t\tfor(int i=1; i<=m; ++i) {\n\t\t\tE[i].x=read(),E[i].y=read(),E[i].w=read();\n\t\t}\n\t\tsort(E+1,E+m+1);\n\t\tfor(int i=1;i<=m;++i)Cover(i);\n\t\tfor(IT it=Chtholly.begin();it!=Chtholly.end();++it){\n\t\t\tfor(int i=it->L;i<=it->R;++i)Ans[id[i]]=it->v;\n\t\t}\n\t\tfor(int i=1;i<n;++i){\n\t\t\tint x=(dep[Edge[i].first]<dep[Edge[i].second]?Edge[i].second:Edge[i].first);\n\t\t\tprintf(\"%d\\n\",Ans[x]);\n\t\t}\t\n\t}\n}\n\nint main() {\n\tPrework::Solve();\n\tMian::Solve();\n\treturn 0;\n}\n```",
        "postTime": 1539934075,
        "uid": 27003,
        "name": "Bruteforces",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "## [$\\text{Description}$](https://www.luogu.com.cn/problem/P4374)\n\n\n\n\u7ed9\u5b9a\u4e00\u9897\u6709 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u53e6\u7ed9\u51fa $m$ \u6761\u6709\u8fb9\u6743\u7684\u8fb9\u3002\u6c42\u65ad\u6389\u4e00\u6761\u8fb9\u540e\u80fd\u4f7f\u539f\u6811\u8054\u901a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n## [$\\text{Solution}$](https://www.luogu.com.cn/paste/jokul7s8)\n\n\n\n\u975e\u5e38\u6709\u610f\u601d\u7684\u4e00\u9053\u6811\u5256\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/j9oqhatv.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u63a5\u7740\u6211\u4eec\u601d\u8003\u65ad\u6389\u4e00\u6761\u8fb9\uff0c\u5bfb\u627e\u6700\u5c0f\u7684\u80fd\u4f7f\u56fe\u8054\u901a\u7684\u8fb9\uff08\u8fd9\u91cc\u5efa\u8bae\u624b\u6a21\u4e00\u4e0b\uff09\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff1a\n\n**\u53ea\u6709\u5f53\u88ab\u65ad\u6389\u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5728\u989d\u5916\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\u7684\u8def\u5f84\u4e0a\uff08\u4e5f\u5c31\u662f\u5f62\u6210\u73af\uff09\u65f6\uff0c\u8fd9\u6761\u989d\u5916\u8fb9\u624d\u6709\u8d21\u732e**\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5f53\u65ad\u6389 $1-2$ \u8fd9\u6761\u8fb9\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1 $1-2$ \u4e4b\u95f4\u8054\u901a\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8fb9\u6743\u4e3a $3$ \u7684\u7ea2\u8fb9\uff0c\u800c\u5f53\u65ad\u6389 $1-3$ \u4e4b\u95f4\u7684\u8fb9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8fb9\u6743\u4e3a $3$ \u7684\u7ea2\u8fb9\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u8fb9\u6743\u4e3a $5  $ \u7684\u7ea2\u8fb9\uff08\u56e0\u4e3a $1-3$ \u4e4b\u95f4\u7684\u8fb9\u548c\u4ed6\u4eec\u90fd\u5f62\u6210\u4e86\u73af\uff09\uff0c\u800c\u5f53\u65ad\u6389 $2-5$ \u4e4b\u95f4\u7684\u8fb9\u65f6\uff0c\u7531\u4e8e\u6ca1\u6709\u7ea2\u8fb9\u548c\u4ed6\u4eec\u5f62\u6210\u73af\uff0c\u6240\u4ee5\u5c31\u65e0\u89e3\u4e86\u3002\n\n\u6240\u4ee5\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u6a21\u677f\uff1a\u533a\u95f4\u4fee\u6539\u6c42\u6700\u5c0f + \u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(n\\log^2n)$\uff08\u6811\u5256\u590d\u6742\u5ea6\uff09\n\n\u4ee3\u7801\u5728\u94fe\u63a5\u91cc\u3002",
        "postTime": 1616318829,
        "uid": 413147,
        "name": "_Alejandro_",
        "ccfLevel": 0,
        "title": "P4374\u9898\u89e3"
    },
    {
        "content": "## Before the Beginning\n\n\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e[\u4e2a\u4eba\u535a\u5ba2](https://www.codein.icu/lp4374/)\u3002\n\n## \u89e3\u6cd5\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u989d\u5916\u7684\u53cc\u5411\u9053\u8def\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5728\u6811\u4e0a\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u88ab\u5272\u65ad\u540e\uff0c\u90fd\u53ef\u4ee5\u8d70\u8fd9\u6761\u53cc\u5411\u9053\u8def\u3002  \n\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u4f7f\u7528\u8f7b\u91cd\u94fe\u5256\u5206\u52a0\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u8fdb\u884c\u533a\u95f4\u53d6 min \u66f4\u65b0\uff0c\u590d\u6742\u5ea6 $O(n \\log ^2 n)$.  \n\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9\u53cc\u5411\u9053\u8def\u7684\u8fb9\u6743\u8fdb\u884c\u6392\u5e8f\uff0c\u8f6c\u5316\u4e3a\u67d3\u8272\u95ee\u9898\u3002  \n\u5177\u4f53\u5730\uff0c\u5c06\u53cc\u5411\u9053\u8def\u4ee5\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8f6c\u5316\u4e3a\u533a\u95f4\u67d3\u8272\uff0c\u6bcf\u6b21\u67d3\u8272\u90fd\u80fd\u8986\u76d6\u4e0a\u6b21\u7684\u989c\u8272\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u76f8\u5f53\u7ecf\u5178\u4e86\u3002  \n\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u8986\u76d6\u6765\u7ef4\u62a4\u67d3\u8272\uff0c\u4f46\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(n \\log ^2 n)$ \u7684\u3002  \n\u7136\u800c\uff0c\u67d3\u8272\u95ee\u9898\u6709\u7740\u66f4\u4f18\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u6709\u7684\u4eba\u79f0\u4e3a\u5e76\u67e5\u96c6\uff0c\u6216\u8005\u53cc\u5411\u94fe\u8868\u3001\u7f29\u70b9\u7b49\u7b49\u3002  \n\n[\u67d3\u8272\u4f8b\u9898](https://www.luogu.com.cn/problem/P2391)\n\n\u6838\u5fc3\u601d\u60f3\uff1a\u9006\u5e8f\u5904\u7406\uff0c\u5c06\u8986\u76d6\u8f6c\u5316\u4e3a\u8df3\u8fc7\u3002\u7531\u4e8e\u67d3\u8272\u7684\u533a\u95f4\u8fde\u7eed\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u9047\u5230\u4e00\u6bb5\u5df2\u67d3\u8272\u533a\u95f4\u65f6\uff0c\u8df3\u8fc7\u8be5\u6bb5\u533a\u95f4\uff0c\u4f7f\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4f1a\u88ab\u67d3\u8272\u4e00\u6b21\u3002  \n\u611f\u6027\u7406\u89e3\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\uff0c\u8fd9\u91cc\u4e0d\u6df1\u5165\u7814\u7a76\u4e86\u3002  \n\n---\n\nUpdate on 10/21/2020:    \n\u7ecf\u8fc7\u4e00\u5b9a\u7684\u601d\u8003\uff0c\u53d1\u73b0\u6211\u539f\u5148\u7684\u4ee3\u7801\u590d\u6742\u5ea6\u5e94\u8be5\u662f\u5047\u7684\u3002    \n\u539f\u5148\u7684\u5199\u6cd5\u76f8\u5f53\u4e8e\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u867d\u7136\u53ea\u9700\u8981\u67d3\u8272\u4e00\u6b21\uff0c\u4f46\u4f1a\u91cd\u590d\u8df3\u5230\u5df2\u88ab\u67d3\u8272\u7684\u70b9\u4e0a\u3002\u5177\u4f53\u5730\uff0c\u4ece\u6df1\u5411\u6d45\u67d3\u8272\u4e00\u6761\u94fe\uff0c\u6bcf\u6b21\u8981\u6c42\u4ece\u94fe\u9876\u5230\u94fe\u5e95\u67d3\u8272\uff0c\u6bcf\u6b21\u9700\u8981\u4ece\u94fe\u5e95\u8df3\u5230\u94fe\u9876\uff0c\u800c\u7531\u4e8e\u6ca1\u6709\u8def\u5f84\u538b\u7f29\uff0c\u76f8\u5f53\u4e8e\u66b4\u529b\u8df3\u70b9\uff0c\u4f1a\u9000\u5316\u5230 $O(n^2)$.  \n\u56e0\u6b64\u9700\u8981\u5bf9\u8fd9\u4e2a\u5e76\u67e5\u96c6\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u4f18\u5316\u3002\u800c\u7531\u4e8e\u4e0d\u4f7f\u7528\u6309\u79e9\u5408\u5e76\uff0c\u6700\u574f\u590d\u6742\u5ea6\u662f $O(\\log n)$ \u7684\u3002   \n\n\u8fd9\u91cc\u653e\u4e00\u4e0b\u539f\u5148\u7684\u4ee3\u7801\u3002   \n[Old Version](https://www.luogu.com.cn/paste/f1ht6kg5)\n\n---\n\n\u5728\u672c\u9898\u4e2d\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u529e\u6cd5\u6765\u8fdb\u884c\u67d3\u8272\u3002  \n\u53cc\u5411\u9053\u8def\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002  \n\u5c06\u7b80\u5355\u8def\u5f84\u62c6\u6210 $\\texttt{u} \\to \\texttt{lca}$ \u4e0e $\\texttt{v} \\to \\texttt{lca}$ \u4e24\u6761\uff0c\u5206\u522b\u8fdb\u884c\u67d3\u8272\u5373\u53ef\u3002    \n\u5e76\u67e5\u96c6\u7ef4\u62a4\u67d0\u4e2a\u70b9\u7684\u7956\u5148\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u672a\u88ab\u67d3\u8272\u7684\u70b9\u3002    \n\u5c06\u8fb9\u8f6c\u5316\u4e3a\u70b9\u540e\uff0c\u6ce8\u610f $\\texttt{lca}$ \u8282\u70b9\u4ee3\u8868\u5176\u901a\u5411\u7236\u4eb2\u7684\u8fb9\uff0c\u662f\u4e0d\u7528\u67d3\u8272\u7684\u3002    \n\n## \u4ee3\u7801\n\n\u5b9e\u73b0\u4e2d\uff0c\u4f7f\u7528\u4e86\u8f7b\u91cd\u94fe\u5256\u5206\u6c42 $\\texttt{lca}$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$.  \n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <ctype.h>\nconst int bufSize = 1e6;\nconst int maxn = 5e4 + 100;\ninline char nc()\n{\n    #ifdef DEBUG\n    return getchar();\n    #endif\n    static char buf[bufSize], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, bufSize, stdin), p1 == p2) ? EOF : *p1++;\n}\ntemplate<typename T>\ninline T read(T &r)\n{\n    static char c;\n    r = 0;\n    for (c = nc(); !isdigit(c); c = nc()) ;\n    for (; isdigit(c); c = nc()) r = r * 10 + c - 48;\n    return r;\n}\n\nstruct node\n{\n    int to, next,id;\n} E[maxn << 1];\nint head[maxn], tot;\ninline void add(int x, int y, int id) { E[++tot].next = head[x], E[tot].to = y, E[tot].id = id, head[x] = tot; }\nstruct edge\n{\n    int u, v, w;\n} G[maxn];\nbool cmp(const edge& a, const edge& b) { return a.w < b.w; }\n\n//you can skip this part\nint dep[maxn], size[maxn], son[maxn], top[maxn], fa[maxn], id[maxn], ANS[maxn];\nvoid dfs1(int u)\n{\n    size[u] = 1;\n    for (int p = head[u]; p; p = E[p].next)\n    {\n        int v = E[p].to;\n        if(v == fa[u]) continue;\n        id[v] = E[p].id, fa[v] = u, dep[v] = dep[u] + 1, dfs1(v), size[u] += size[v];\n        if (size[v] > size[son[u]]) son[u] = v;\n    }\n}\nvoid dfs2(int u)\n{\n    if(!son[u]) return;\n    top[son[u]] = top[u], dfs2(son[u]);\n    for (int p = head[u]; p; p = E[p].next)\n    {\n        int v = E[p].to;\n        if (v == fa[u] || v == son[u]) continue;\n        top[v] = v, dfs2(v);\n    }\n}\nint lca(int x, int y)\n{\n    for (; top[x] != top[y]; x = fa[top[x]]) if (dep[top[x]] < dep[top[y]]) std::swap(x, y);\n    return dep[x] < dep[y] ? x : y;\n}\n//region end\n\nint bel[maxn], up[maxn];\nint find(int x) { return x == up[x] ? x : up[x] = find(up[x]); }\nvoid update(int x, int y, int c)  //y is the ancestor of x\n{\n    //update from x to y (excluding y) with color c\n    for (x = find(x); dep[x] > dep[y]; x = find(x)) bel[x] = c, up[x] = fa[x];\n    //only set up[x] to fa[x], then leave it to path compression\n}\nint n, m;\nint main()\n{\n    read(n), read(m);\n    for (int i = 1, a, b; i < n; ++i) read(a), read(b), add(a, b, i), add(b, a, i);\n    dep[1] = 1, dfs1(1), top[1] = 1, dfs2(1);\n    for (int i = 1; i <= m; ++i) read(G[i].u), read(G[i].v), read(G[i].w);\n    std::sort(G + 1, G + 1 + m, cmp);\n    for (int i = 1; i <= n; ++i) up[i] = i;\n    for (int i = 1; i <= m; ++i)\n    {\n        int l = lca(G[i].u, G[i].v);\n        update(G[i].u, l, i), update(G[i].v, l, i);\n    }\n    for (int i = 2; i <= n; ++i) ANS[id[i]] = bel[i] ? G[bel[i]].w : -1;\n    for (int i = 1; i < n; ++i) printf(\"%d\\n\", ANS[i]);\n    return 0;\n}\n```",
        "postTime": 1603259053,
        "uid": 220159,
        "name": "Clouder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption P\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problem/P4374)\n\n[\u5f3a\u884c\u5b89\u5229\u6211\u7684\u535a\u5ba2](https://www.luogu.org/blog/ueettttujzzr/p4374-usaco18opendisruption)\n\n\u6b64\u9898\u6811\u5256\u53ef\u5199\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6761\u65b0\u52a0\u7684\u8fb9\uff0c\u5b83\u4e0e\u539f\u8fb9\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u7684\u8fb9\u90fd\u53ef\u4ee5\u7528\u8be5\u65b0\u8fb9\u66ff\u4ee3\u3002\u8bbe\u65b0\u52a0\u7684\u8fb9\u4e3a$(x,y,z)$\uff0c\u5219\u7528\u6811\u5256\u7ef4\u62a4\u70b9$x\\sim y$\u7684\u8def\u5f84(\u8def\u5f84\u662f\u552f\u4e00\u7684)\uff0c\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u53ef\u4ee5\u88ab\u65b0\u8fb9\u66ff\u4ee3\u3002\u6545\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u7ef4\u62a4\u4e00\u4e2a\u53ef\u4ee5\u66ff\u4ee3\u6b64\u8fb9\u7684\u65b0\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u503c$z$\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u90fd\u8fd4\u56de\u8fd9\u4e2a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\n- \u6b64\u9898\u662f\u8fb9\u6743\u3002\n\n- $lazy,minn$\u8981\u53d6\u6700\u5c0f\u503c(\u8be6\u89c1\u4ee3\u7801)\n\n- $lazy,minn$\u521d\u59cb\u5316\u8d4b\u65e0\u7a77\u5927\n\n\u8d34\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 1000000000000\nlong long n,m,head[50010],tot,cnt;\nstruct node{\n\tlong long nex,to;\n};\nnode edge[100010];\nstruct data2{\n\tlong long xx,yy;\n};\ndata2 edge2[100010];\nstruct data{\n\tlong long fa,size,son,id,deep,top;\n};\ndata tree[50010];\nstruct node2{\n\tlong long minn,lazy;\n};\nnode2 tree2[200010];\nvoid add(long long x,long long y){\n\tedge[++tot].to=y;\n\tedge[tot].nex=head[x];\n\thead[x]=tot;\n}\nvoid pushup(long long rt){\n\ttree2[rt].minn=min(tree2[rt*2].minn,tree2[rt*2+1].minn);\n}\nvoid pushdown(long long rt){\n\ttree2[rt*2].lazy=min(tree2[rt*2].lazy,tree2[rt].lazy);\n\ttree2[rt*2+1].lazy=min(tree2[rt*2+1].lazy,tree2[rt].lazy);//\u6ce8\u610f\u53d6\u6700\u5c0f\u503c \n\ttree2[rt*2].minn=min(tree2[rt*2].minn,tree2[rt].lazy);\n\ttree2[rt*2+1].minn=min(tree2[rt*2+1].minn,tree2[rt].lazy);\n\ttree2[rt].lazy=maxn;\n}\nvoid changed(long long rt,long long l,long long r,long long x,long long y,long long z){ //\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 \n\tif(x<=l && y>=r){\n\t\ttree2[rt].lazy=min(tree2[rt].lazy,z);\n\t\ttree2[rt].minn=min(tree2[rt].minn,z); //\u6ce8\u610f\u8981\u53d6\u6700\u5c0f\u503c \n\t\treturn ;\n\t}\n\tpushdown(rt);\n\tlong long mid=(l+r)/2;\n\tif(x<=mid) changed(rt*2,l,mid,x,y,z);\n\tif(y>mid) changed(rt*2+1,mid+1,r,x,y,z);\n\tpushup(rt);\n}\nlong long ask(long long rt,long long l,long long r,long long x,long long y){\n\tif(x<=l && y>=r){\n\t\treturn tree2[rt].minn;\n\t}\n\tpushdown(rt);\n\tlong long mid=(l+r)/2;\n\tlong long anss=maxn;\n\tif(x<=mid) anss=min(anss,ask(rt*2,l,mid,x,y));\n\tif(y>mid) anss=min(anss,ask(rt*2+1,mid+1,r,x,y));\n\treturn anss;\n}\nvoid dfs1(long long rt,long long father,long long depp){ //\u6811\u5256\u64cd\u4f5c \n\ttree[rt].fa=father;\n\ttree[rt].deep=depp;\n\ttree[rt].size=1;\n\tlong long maxson=-1;\n\tfor(long long i=head[rt];i;i=edge[i].nex){\n\t\tlong long y;\n\t\ty=edge[i].to;\n\t\tif(y==father) continue ;\n\t\tdfs1(y,rt,depp+1);\n\t\ttree[rt].size+=tree[y].size;\n\t\tif(maxson<tree[y].size){\n\t\t\tmaxson=tree[y].size;\n\t\t\ttree[rt].son=y;\n\t\t}\n\t}\n}\nvoid dfs2(long long rt,long long topp){\n\ttree[rt].top=topp;\n\ttree[rt].id=++cnt;\n\tif(tree[rt].son==0) return ;\n\tdfs2(tree[rt].son,topp);\n\tfor(long long i=head[rt];i;i=edge[i].nex){\n\t\tlong long y;\n\t\ty=edge[i].to;\n\t\tif(y==tree[rt].fa || y==tree[rt].son) continue ;\n\t\tdfs2(y,y);\n\t}\n}\nvoid update(long long x,long long y,long long z){//\u66f4\u65b0\u64cd\u4f5c \n\twhile(tree[x].top!=tree[y].top){\n\t\tif(tree[tree[x].top].deep<tree[tree[y].top].deep) swap(x,y);\n\t\tchanged(1,1,n,tree[tree[x].top].id,tree[x].id,z);\n\t\tx=tree[tree[x].top].fa;\n\t}\n\tif(tree[x].id>tree[y].id) swap(x,y);\n\tchanged(1,1,n,tree[x].id+1,tree[y].id,z);\n}\nlong long updateask(long long x,long long y){  //\u67e5\u8be2 \n\tlong long anss=maxn;\n\twhile(tree[x].top!=tree[y].top){\n\t\tif(tree[tree[x].top].deep<tree[tree[y].top].deep) swap(x,y);\n\t\tanss=min(anss,ask(1,1,n,tree[tree[x].top].id,tree[x].id));\n\t\tx=tree[tree[x].top].fa;\n\t}\n\tif(tree[x].id>tree[y].id) swap(x,y);\n\tanss=min(anss,ask(1,1,n,tree[x].id+1,tree[y].id));\n\treturn anss;\n}\nint main(){\n\tscanf(\"%lld %lld\",&n,&m);\n\ttot=1;\n\tfor(long long i=1;i<=4*n;i++){\n\t\ttree2[i].minn=maxn;\n\t\ttree2[i].lazy=maxn;\n\t}\n\tlong long b,c;\n\tfor(long long i=1;i<n;i++){\n\t\tscanf(\"%lld %lld\",&b,&c);\n\t\tadd(b,c);\n\t\tadd(c,b);\n\t\tedge2[i].xx=b;\n\t\tedge2[i].yy=c;  //\u8bb0\u4e0b\u8be2\u95ee \n\t}\n\tdfs1(1,-1,1);\n\tdfs2(1,-1);\n\tlong long d;\n\tfor(long long i=1;i<=m;i++){\n\t\tscanf(\"%lld %lld %lld\",&b,&c,&d);\n\t\tupdate(b,c,d);      //\u66f4\u65b0\u53ef\u4ee5\u66ff\u4ee3\u6b64\u8fb9\u7684\u65b0\u8fb9\u8fb9\u6743\u6700\u5c0f\u503c \n\t}\n\tfor(long long i=1;i<n;i++){ //\u679a\u4e3e\u8be2\u95ee \n\t\tlong long kk;\n\t\tkk=updateask(edge2[i].xx,edge2[i].yy);\n\t\tif(kk!=maxn) printf(\"%lld\\n\",kk);\n\t\telse printf(\"-1\\n\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565697003,
        "uid": 55843,
        "name": "ueettttuj",
        "ccfLevel": 0,
        "title": "P4374 [USACO18OPEN]Disruption"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/oldherd/solution-p4374)  \n### \u4f7f\u7528\u6811\u94fe\u5256\u5206\u6a21\u677f\u5373\u53ef\u89e3\u51b3\u672c\u9898\u3002\n\u6a21\u578b\u6784\u9020\uff1a  \n\u5bf9\u4e8e\u4e00\u6761\u65b0\u589e\u7684\u8def,\u7531\u4e8e\u539f\u56fe\u662f\u4e00\u68f5\u6811,\u56e0\u800c\u589e\u52a0\u8def\u540e\u6210\u4e00\u4e2a\u7b80\u5355\u73af\u3002\u8fd9\u6761\u8def\u5c31\u53ef\u4ee5\u66ff\u4ee3\u73af\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u539f\u6709\u8def\u5f84,\u6362\u8a00\u4e4b,\u73af\u4e0a\u539f\u6709\u7684\u8def\u5f84\u53ef\u4ee5\u88ab\u66ff\u4ee3\u3002  \n\u56e0\u800c\u672c\u95ee\u9898\u6d89\u53ca\u5230\u5728\u6811\u4e0a\u7684\u4e24\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u7edf\u8ba1(\u6700\u5c0f\u503c)\u64cd\u4f5c,\u8003\u8651\u5957\u7528\u6811\u5256\u6a21\u677f\u89e3\u9898\u3002  \n\u7ec6\u8282\u5206\u6790:  \n1.\u672c\u9898\u662f\u5bf9\u8fb9\u7684\u7edf\u8ba1\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u6811\u5256\u8fb9\u8f6c\u70b9,\u5373\u628a\u6bcf\u4e00\u6761\u8fb9\u6620\u5c04\u5230\u5b83\u6240\u8fde\u7684\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u70b9(\u5c31\u662f\u5b69\u5b50\u7ed3\u70b9\u5bf9\u5e94\u4ece\u5b83\u7684\u7236\u4eb2\u7ed3\u70b9\u4f38\u5411\u5b83\u7684\u8fb9)\u3002  \n2.\u672c\u9898\u662f\u6309\u7167\u6240\u7ed9\u8fb9\u7684\u5148\u540e\u987a\u5e8f\u8f93\u51fa,\u5b83\u4e0e\u6211\u4eec\u7ed3\u70b9\u5bf9\u5e94\u8fb9\u7684\u5173\u7cfb\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21dfs(\u5efa\u6811)\u65f6\u7edf\u8ba1,\u5177\u4f53\u89c1\u4ee3\u7801dfs1\u4e2d\u7684idn\u6570\u7ec4\u7684\u7ef4\u62a4\u3002  \n3.\u672c\u9898\u5b9e\u9645\u4e0a\u53ea\u8981\u7ef4\u62a4\u5355\u70b9\u6700\u5c0f\u503c\u5373\u53ef,\u6211\u7684\u4ee3\u7801\u7ebf\u6bb5\u6811\u6709\u70b9\u5199\u591a\u4e86\u3002\n\n\u7ed9\u51faAC\u4ee3\u7801(\u603b\u7528\u65f61352ms,O2 776ms\u5de8\u6162)\n```cpp\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 50010;\nconst int inf = 0x3f3f3f3f;\n\nint n, idn[maxn], ids[maxn];\n\ninline int min(int x, int y) {\n\treturn x < y ? x : y;\n}\n\ninline void swap(int &x, int &y) {\n\tint t = x; x = y; y = t;\n}\n\n#define gc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,2000000,stdin), p1==p2)?EOF:*p1++)\nchar buf[2000000], *p1 = buf, *p2 = buf;\ninline void read(int &x) {\n    x = 0;\n    char ch = gc();\n    while(ch < '0' || ch > '9') ch = gc();\n    while(ch >= '0' && ch <= '9') x = (x<<3)+(x<<1)+(ch&15), ch = gc();\n}\n\nstruct edge{\n    int to, nex, id;\n}e[maxn<<1];\nint head[maxn], tot = 0;\ninline void addedge(int u, int v, int _id) {\n    e[tot] = (edge){v, head[u], _id}; head[u] = tot++;\n    e[tot] = (edge){u, head[v], _id}; head[v] = tot++;\n}\n\nint fa[maxn], d[maxn], son[maxn], size[maxn], top[maxn], dfn[maxn], rk[maxn], dfs_clock = 1;\nvoid dfs1(int pre, int cur) {\n    fa[cur] = pre; d[cur] = d[pre]+1; size[cur] = 1;\n    for(int i = head[cur]; i != -1; i = e[i].nex)\n        if(e[i].to != pre) {\n            dfs1(cur, e[i].to);\n            size[cur] += size[e[i].to];\n            if(size[e[i].to] > size[son[cur]]) son[cur] = e[i].to;\n\t\t\tidn[e[i].to] = e[i].id;\n        }\n}\n\nvoid dfs2(int tp, int cur) {\n    rk[dfs_clock] = cur; top[cur] = tp; dfn[cur] = dfs_clock++;\n    if(!son[cur]) return;\n    dfs2(tp, son[cur]);\n    for(int i = head[cur]; i != -1; i = e[i].nex)\n        if(!dfn[e[i].to])\n            dfs2(e[i].to, e[i].to);\n}\n\nstruct seg{\n    int l, r, dat, laz;\n}t[maxn<<4];\n\ninline void build(int p, int l, int r) {\n    t[p].l = l; t[p].r = r; t[p].dat = t[p].laz = inf;\n    if(l == r) return;\n    int mid = (l+r) >> 1;\n    build(p<<1, l, mid);\n    build(p<<1|1, mid+1, r);\n}\n\ninline void pushdown(int p) {\n\tt[p<<1].dat = min(t[p<<1].dat, t[p].laz);\n\tt[p<<1|1].dat = min(t[p<<1|1].dat, t[p].laz);\n\tt[p<<1].laz = min(t[p<<1].laz, t[p].laz);\n\tt[p<<1|1].laz = min(t[p<<1|1].laz, t[p].laz);\n\tt[p].laz = inf;\n}\n\ninline void change(int p, int l, int r, int v) {\n\tif(l <= t[p].l && t[p].r <= r) {\n\t\tt[p].dat = min(t[p].dat, v);\n\t\tt[p].laz = min(t[p].laz, v);\n\t\treturn;\n\t}\n\tif(t[p].laz != inf) pushdown(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif(l <= mid) change(p<<1, l, r, v);\n\tif(r > mid) change(p<<1|1, l, r, v);\n\tt[p].dat = min(t[p<<1].dat, t[p<<1|1].dat);\n}\n\ninline int query(int p, int l, int r) {\n\tif(l <= t[p].l && t[p].r <= r)\n\t\treturn t[p].dat;\n\tif(t[p].laz != inf) pushdown(p);\n\tint mid = (t[p].l + t[p].r) >> 1, res = inf;\n\tif(l <= mid) res = min(res, query(p<<1, l, r));\n\tif(r > mid) res = min(res, query(p<<1|1, l, r));\n\treturn res;\n}\n\ninline void cg(int x, int y, int v) {\n\twhile(top[x] != top[y]) {\n\t\tif(d[top[x]] < d[top[y]]) swap(x, y);\n\t\tchange(1, dfn[top[x]], dfn[x], v);\n\t\tx = fa[top[x]];\n\t}\n\tif(d[x] < d[y]) swap(x, y);\n\tchange(1, dfn[y]+1, dfn[x], v);\n}\n\nint main() {\n    int m, u, v, w;\n    read(n); read(m);\n    memset(head, -1, sizeof(head));\n    for(int i = 1; i < n; i++) {\n        read(u); read(v);\n        addedge(u, v, i);\n    }\n    dfs1(0, 1);\n    dfs2(1, 1);\n    build(1, 1, n);\n    while(m--) {\n\t\tread(u); read(v); read(w);\n\t\tif(u == v) continue;\n\t\tcg(u, v, w);\n    }\n\tfor(int i = 2; i <= n; i++) ids[idn[i]] = i;\n\tfor(int i = 1; i < n; i++) {\n\t\tint t = query(1, dfn[ids[i]], dfn[ids[i]]);\n\t\tprintf(\"%d\\n\", t==inf ? -1 : t);\n\t}\n    return 0;\n}\n```\n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u518d\u6b21\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)  ",
        "postTime": 1555074284,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5408\u5e76  \n\u7ed3\u679c\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u6ca1\u5224-1\u840e\u6389\u4e86  \n\u95ee\u9898\u53ef\u4ee5\u62bd\u8c61\u6210\u5728\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u91cc\u8f83\u6df1\u7684\u70b9\u7684\u5b50\u6811\u91cc\u627e\u4e00\u6761\u8fb9\uff0c\u8fde\u63a5\u8be5\u70b9\u7684\u7236\u4eb2\uff0c\u4e14\u8fd9\u6761\u8fb9\u8fb9\u6743\u6700\u5c0f\n\n\u663e\u7136\u53ef\u4ee5\u628a\u8fb9\u6743\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u7136\u540e\u6811\u4e0a\u5dee\u5206\uff0c\u8fd9\u90fd\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u5c0ftrick  \n\u63a5\u7740\u5c31\u53ef\u4ee5\u968f\u4fbf\u7ebf\u6bb5\u6811\u5408\u5e76\u4e86\n\n# \u6ce8\u610f\u8981\u5224-1\uff01\uff01\uff01\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define lson tr[now].l\n#define rson tr[now].r\n#define mp make_pair\n#define pii pair<int,int>\nusing namespace std;\n\nstruct tree\n{\n\tint sum,l,r;\n}tr[5000060];\n\nstruct edge\n{\n\tint from,to,w;\n}e[100010];\n\nvector<pii> g[100010];\nvector<int> op[100010],op2[100010];\n\nint n,m,tmp[100010],cnt,rt[100010],deep[100010],fa[100010][18],cnt2,ans[100010];\nint N=100010;\n\nint push_up(int now)\n{\n\ttr[now].sum=tr[lson].sum+tr[rson].sum;\n}\n\nint insert(int &now,int l,int r,int pos,int val)\n{\n\tif(!now) now=++cnt2;\n\tif(l==r)\n\t{\n\t\ttr[now].sum+=val;\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)\n\t{\n\t\tinsert(lson,l,mid,pos,val);\n\t}\n\telse\n\t{\n\t\tinsert(rson,mid+1,r,pos,val);\n\t}\n\tpush_up(now);\n}\n\nint query(int now,int l,int r)\n{\n\tif(l==r) return tr[now].sum==0?-1:l;\n\tint mid=(l+r)>>1;\n\tif(tr[lson].sum) return query(lson,l,mid);\n\telse return query(rson,mid+1,r);\n}\n\nint merge(int a,int b,int l,int r)\n{\n\tif(!a) return b;\n\tif(!b) return a;\n\tif(l==r)\n\t{\n\t\ttr[a].sum+=tr[b].sum;\n\t\treturn a;\n\t}\n\tint mid=(l+r)>>1;\n\ttr[a].l=merge(tr[a].l,tr[b].l,l,mid);\n\ttr[a].r=merge(tr[a].r,tr[b].r,mid+1,r);\n\tpush_up(a);\n\treturn a;\n}\n\nvoid init()\n{\n\tsort(tmp+1,tmp+cnt+1);\n\tint tot=unique(tmp+1,tmp+cnt+1)-tmp-1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\te[i].w=lower_bound(tmp+1,tmp+cnt+1,e[i].w)-tmp;\n\t}\n}\n\nint dfs(int now,int f,int dep)\n{\n\tdeep[now]=dep;\n\tfa[now][0]=f;\n\trt[now]=now;\n\t++cnt2;\n\tfor(int i=1;i<=17;i++)\n\t{\n\t\tfa[now][i]=fa[fa[now][i-1]][i-1];\n\t}\n\tfor(int i=0;i<g[now].size();i++)\n\t{\n\t\tif(g[now][i].first==f) continue;\n\t\tdfs(g[now][i].first,now,dep+1);\n\t}\n}\n\nint lca(int x,int y)\n{\n\tif(deep[y]>deep[x]) swap(x,y);\n\tfor(int i=17;i>=0;i--)\n\t{\n\t\tif(deep[fa[x][i]]>=deep[y]) x=fa[x][i];\n\t}\n\tif(x==y) return x;\n\tfor(int i=17;i>=0;i--)\n\t{\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t{\n\t\t\tx=fa[x][i];\n\t\t\ty=fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\n\nint solve(int now,int f,int id)\n{\n\tfor(int i=0;i<op[now].size();i++)\n\t{\n\t\tinsert(rt[now],1,N,op[now][i],1);\n\t}\n\tfor(int i=0;i<op2[now].size();i++)\n\t{\n\t\tinsert(rt[now],1,N,op2[now][i],-2);\n\t}\n\tfor(int i=0;i<g[now].size();i++)\n\t{\n\t\tif(g[now][i].first==f) continue;\n\t\tsolve(g[now][i].first,now,g[now][i].second);\n\t\tmerge(rt[now],rt[g[now][i].first],1,N);\n\t}\n\tans[id]=tmp[query(rt[now],1,N)];\n}\n\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin>>n>>m;\n\tint from,to;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tcin>>from>>to;\n\t\tg[from].push_back(mp(to,i));\n\t\tg[to].push_back(mp(from,i));\n\t}\n\tdfs(1,0,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>e[i].from>>e[i].to>>e[i].w;\n\t\ttmp[++cnt]=e[i].w;\n\t}\n\tinit();\n\ttmp[0]=-1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint anc=lca(e[i].from,e[i].to);\n\t\top[e[i].from].push_back(e[i].w);\n\t\top[e[i].to].push_back(e[i].w);\n\t\top2[anc].push_back(e[i].w);\n\t}\n\tsolve(1,0,0);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tcout<<ans[i]<<endl;\n\t}\n}\n```\n\n",
        "postTime": 1539920667,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u5c0f trick \u4e3a\u4e00\u6761\u7ed9\u7684\u865a\u8fb9\u4f1a\u5f71\u54cd\u5230\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u5b9e\u8fb9\u8def\u5f84\n\n\u5982\u56fe\uff1a \u7ea2\u8272\u7684\u4e3a\u7ed9\u7684\u865a\u8fb9\n\n![](https://z3.ax1x.com/2021/10/31/IpBYaF.png)\n\n\u800c\u8fd9\u6761\u865a\u8fb9\u5f71\u54cd\u7684\u8def\u5f84\u5c31\u662f\uff1a\n\n![](https://z3.ax1x.com/2021/10/31/IpBrqK.png)\n\n\u56e0\u4e3a\u53ea\u8981\u8fd9\u4e24\u4e2a\u70b9\u8fde\u4e86\u53e6\u5916\u4e00\u6761\u8fb9\uff0c\u4ed6\u4eec\u4e4b\u95f4\u539f\u672c\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u5373\u4f7f\u65ad\u5f00\u4ed6\u4eec\u4e5f\u4f9d\u65e7\u8054\u901a\u3002\n\n\u6240\u4ee5\u8fdb\u884c\u7684\u64cd\u4f5c\u5c31\u662f\u533a\u95f4\u8d4b\u503c\u548c\u6c42\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u7528\u6811\u5256\u6765\u5b9e\u73b0\u3002\n\n\u4f46\u662f\u6253\u8d4b\u503c tag \u7684\u65f6\u5019\uff0c\u8981\u4e00\u6b21\u6027\u628a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u6bcf\u4e00\u5c0f\u6bb5\u80fd\u6253 tag \u7684\u90fd\u6253\u4e0a\uff0c\u5373\u4f7f\u8fd9\u4e00\u533a\u95f4\u7684\u6700\u5c0f\u503c\u5c0f\u4e8e\u4f60\u7684 tag\uff0c\u56e0\u4e3a\u533a\u95f4\u53ef\u4ee5\u8986\u76d6\u6389\u5b83\u4e0b\u9762\u5927\u7684 tag\n\n\u5982\u56fe\n\n![](https://z3.ax1x.com/2021/10/31/IpruXq.png)\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define int long long\nconst int N = 4e5 + 10, inf = 2e9;\nint h[N], ne[N], e[N], idx;\nint n,m;\nint fa[N], sz[N], dep[N], cnt, top[N], son[N], id[N];\nstruct seg\n{\n\tint l, r;\n\tint tag, minn;\n}tr[N << 1];\nstruct Edge\n{\n\tint u, v;\n}edge[N];\nvoid add(int a, int b)\n{\n\te[idx] = b;\n\tne[idx] = h[a];\n\th[a] = idx ++;\n}\nvoid dfs1(int u, int fat, int depth)\n{\n\tsz[u] = 1;\n\tfa[u] = fat;\n\tdep[u] = depth;\n\tfor(int i = h[u]; ~i; i = ne[i])\n\t{\n\t\tint y = e[i];\n\t\tif(y == fat) continue;\n\t\t\n\t\tdfs1(y,u,depth+ 1);\n\t\tsz[u] += sz[y];\n\t\tif(sz[son[u]] < sz[y]) son[u] = y;\n\t}\n}\nvoid dfs2(int u, int t)\n{\n\ttop[u] = t;\n\tid[u] = ++ cnt;\n\tif(!son[u]) return;\n\tdfs2(son[u], t);\n\tfor(int i = h[u]; ~i; i = ne[i])\n\t{\n\t\tint y = e[i];\n\t\tif(y == fa[u] || y == son[u]) continue;\n\t\tdfs2(y,y);\n\t}\n}\nvoid pushup(int u)\n{\n\ttr[u].minn = min(tr[u << 1].minn, tr[u << 1 | 1].minn);\n}\nvoid build(int u, int l, int r)\n{\n\ttr[u].l = l, tr[u].r = r, tr[u].tag = inf, tr[u].minn = inf;\n\tif(l == r) return;\n\tint mid = l + r >> 1;\n\tbuild(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n}\nvoid pushdown(int u)\n{\n\tif(tr[u].tag != inf)\n\t{\n\t\ttr[u << 1].tag = min(tr[u].tag, tr[u << 1].tag);\n\t\ttr[u << 1 | 1].tag = min(tr[u].tag, tr[u << 1 | 1].tag);\n\t\tif(tr[u << 1].minn >= tr[u].tag)\n\t\t{\n\t\t\ttr[u << 1].minn = tr[u].tag;\n\t\t}\n\t\tif(tr[u << 1 | 1].minn >= tr[u].tag)\n\t\t{\n\t\t\ttr[u << 1 | 1].minn = tr[u].tag;\n\t\t}\n\t\ttr[u].tag = inf;\n\t}\n}\nvoid modify(int u, int l, int r, int k)\n{\n\tif(tr[u].l >= l && tr[u].r <= r)\n\t{\n\t\ttr[u].tag = min(k, tr[u].tag);\n\t\tif(tr[u].minn >= k)\n\t\t{\n\t\t\ttr[u].minn = k;\n\t\t}\n\t\treturn;\n\t}\n\tpushdown(u);\n\tint mid = tr[u].l + tr[u].r >> 1;\n\tif(l <= mid) modify(u << 1, l, r, k);\n\tif(r > mid) modify(u << 1 | 1, l, r, k);\n\tpushup(u);\n}\nvoid pre_modify(int u, int v, int k)\n{\n\twhile(top[u] != top[v])\n\t{\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u,v);\n\t\tmodify(1, id[top[u]], id[u], k);\n\t\tu = fa[top[u]];\n\t}\n\tif(dep[u] > dep[v]) swap(u,v);\n\tmodify(1, id[u] + 1, id[v], k);\n}\nint query(int u, int pos)\n{\n\tif(tr[u].l == pos && tr[u].r == pos)\n\t{\n\t\treturn tr[u].minn;\n\t}\n\tpushdown(u);\n\tint mid = tr[u].l + tr[u].r >> 1;\n\tif(pos <= mid) return query(u << 1, pos);\n\telse if(pos > mid) return query(u << 1 | 1, pos);\n}\n\nsigned main()\n{\n\tcin >> n >> m;\n\tmemset(h, -1, sizeof h);\n\tfor(int i = 1; i <= n - 1; i ++)\n\t{\n\t\tint a,b;\n\t\tcin >> a >> b;\n\t\tadd(a,b), add(b,a);\n\t\tedge[i].u = a, edge[i].v = b;\n\t}\n\tdfs1(1,0,1), dfs2(1,1), build(1,1,n);\n\twhile(m --)\n\t{\n\t\tint l, r, len;\n\t\tcin >> l >> r >> len;\n\t\tpre_modify(l,r,len);\n\t}\n\t\n\tfor(int i = 1; i <= n - 1; i ++)\n\t{\n\t\tint u = edge[i].u, v = edge[i].v;\n\t\tint val;\n\t\tif(dep[u] < dep[v])\n\t\t{\n\t\t\tval = query(1,id[v]);\n\t\t}\n\t\telse val = query(1, id[u]);\n\t\tif(val >= inf) puts(\"-1\");\n\t\telse cout << val << endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n\n```",
        "postTime": 1635687292,
        "uid": 49677,
        "name": "miserExist",
        "ccfLevel": 5,
        "title": "P4374 [USACO18OPEN]Disruption P \u9898\u89e3"
    },
    {
        "content": "    \u4ecb\u7ecd\u4e00\u79cd\u81ea\u8ba4\u4e3a\u597d\u7406\u89e3\u7684 DSU on tree \u505a\u6cd5\u3002\n  \n## Solution\uff1a\n\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u51fa\u5220\u53bb\u6bcf\u6761\u8fb9\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u8003\u8651\u79bb\u7ebf\u5904\u7406\u3002\n![](https://z3.ax1x.com/2021/10/22/5cRQmQ.png)\n\n\uff08\u56fe\u793a\u9ed1\u7ebf\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8272\u4e3a\u989d\u5916\u8fb9\uff09\n\n\u5982\u56fe\u6240\u793a\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5c06\u5176\u65ad\u5f00\uff0c\u90fd\u80fd\u5c06\u6574\u68f5\u6811\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u5355\u72ec\u7684\u4e00\u9897\u5b50\u6811\u3002\u4ece\u8fd9\u9897\u5b50\u6811\u4e2d\u8fde\u51fa\u7684\u989d\u5916\u8fb9\u4e2d\u8fb9\u6743\u6700\u5c0f\u503c\u4fbf\u662f\u5bf9\u4e8e\u8fd9\u6761\u8fb9\u7684\u7b54\u6848\u3002\n\n\u663e\u800c\u6613\u89c1\uff0cDSU \u4fbf\u53ef\u4ee5\u7ef4\u62a4\u5b50\u6811\u4e2d\u8fde\u63a5\u7684\u6240\u6709\u989d\u5916\u8fb9\uff0c\u7528 DFS\u5e8f \u5c31\u80fd\u68c0\u9a8c\u4e00\u6761\u989d\u5916\u8fb9\u662f\u5426\u8fde\u51fa\u5b50\u6811\uff0c\u6700\u540e\u901a\u8fc7\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u6700\u5c0f\u503c\u3002\n\n\n**\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f**\uff0c\u867d\u7136\u4e00\u5171\u6709 $m$ \u6761\u989d\u5916\u8fb9\u9700\u8981\u6211\u4eec\u7ef4\u62a4\uff0c\u4f46\u4e00\u4e2a\u70b9\u81f3\u591a\u5728 DSU \u4e2d\u66b4\u529b\u5408\u5e76 $\\log n$ \uff0c\u56e0\u6b64\u4e00\u6761\u989d\u5916\u8fb9\u6700\u591a\u4f1a\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d $2*\\log n$ \u6b21\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a $O(n\\log^{2}n)$\u3002\n\n## Code\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define inl inline\n#define PA pair<int,int>\n#define MP make_pair\nusing namespace std;\nconst int maxn=1e5+1;\nstruct node\n{\n\tint next,to;\n}edge[maxn<<1];\nstruct node1\n{\n\tint next,to,val;\n}exedge[maxn<<1];\nstruct node2\n{\n\tint h,exh,size,son,st,ed,num;     // num : \u6bcf\u4e2a\u70b9\u7236\u4eb2\u8fb9\u7684\u7f16\u53f7 \n}a[maxn];\npriority_queue<PA,vector<PA>,greater<PA> > q;     // pair \u7684 first \u8bb0\u5f55\u8fb9\u6743\uff0c second \u8bb0\u5f55\u7ec8\u70b9\u7684 DFS \u5e8f \nint n,m,cnt,zs,ans[maxn];     // zs : \u5f53\u524d\u7684\u91cd\u513f\u5b50\u7f16\u53f7 \ninl int Read()     // \u5feb\u8bfb \n{\n\tint s=0; char c;\n\twhile(!isdigit(c=getchar()));\n\tfor(;isdigit(c);c=getchar()) s=s*10+c-'0';\n\treturn s;\n}\ninl void Write(int x)     // \u5feb\u8f93 \n{\n\tshort cnt=0,s[10];\n\tif(x<0) putchar('-'), x=-x;\n\tdo s[++cnt]=x%10; while((x/=10));\n\twhile(cnt--) putchar(s[cnt+1]+'0');\n}\ninl void Add(int y,int x)     // \u65b0\u589e\u6811\u8fb9 \n{\n\tedge[++cnt]=(node){a[x].h,y}; a[x].h=cnt;\n\tedge[++cnt]=(node){a[y].h,x}; a[y].h=cnt;\n}\ninl void Exadd(int val,int y,int x)     // \u65b0\u589e\u989d\u5916\u8fb9 \n{\n\texedge[++cnt]=(node1){a[x].exh,y,val}; a[x].exh=cnt;\n\texedge[++cnt]=(node1){a[y].exh,x,val}; a[y].exh=cnt;\n}\nvoid DFS(int p,int prt)     // \u627e\u91cd\u513f\u5b50 \n{\n\ta[p].size=1; a[p].st=++cnt;\n\tfor(int i=a[p].h,to;i;i=edge[i].next)\n\t{\n\t\tto=edge[i].to;\n\t\tif(to==prt) continue;\n\t\ta[to].num=(i+1)>>1;\n\t\tDFS(to,p); a[p].size+=a[to].size;\n\t\tif(a[to].size>a[a[p].son].size) a[p].son=to;\n\t}\n\ta[p].ed=cnt;\n}\nvoid Calc(int p,int prt)     // \u904d\u5386\u5b50\u6811\u5185\u5176\u4ed6\u989d\u5916\u8fb9 \n{\n\tfor(int i=a[p].exh;i;i=exedge[i].next) q.push(MP(exedge[i].val,a[exedge[i].to].st));\n\tfor(int i=a[p].h;i;i=edge[i].next)\n\t\tif((edge[i].to!=prt)&&(edge[i].to!=zs)) Calc(edge[i].to,p);\n}\nvoid DSU(int p,int prt,bool flag)     // flag \uff1a \u5f53\u524d\u5b50\u6811\u662f\u5426\u9700\u8981\u6e05\u7a7a \n{\n\tfor(int i=a[p].h;i;i=edge[i].next)\n\t\tif((edge[i].to!=prt)&&(edge[i].to!=a[p].son)) DSU(edge[i].to,p,true);\n\tif(a[p].son) DSU(a[p].son,p,false), zs=a[p].son;\n\tCalc(p,prt); zs=0;\n\twhile((!q.empty())&&q.top().second>=a[p].st&&q.top().second<=a[p].ed) q.pop();     // \u6392\u9664\u8fde\u63a5\u5b50\u6811\u5185\u4e24\u70b9\u7684\u989d\u5916\u8fb9\n\t     // \u5982\u679c\u5728\u91cd\u513f\u5b50\u65f6\u4e00\u6761\u8fb9\u5c31\u8fde\u63a5\u4e86\u4e24\u4e2a\u5b50\u6811\u5185\u7684\u70b9\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u70b9\u8fd9\u6761\u8fb9\u4e00\u5b9a\u4e5f\u8fde\u63a5\u4e86\u4e24\u4e2a\u5b50\u6811\u5185\u7684\u70b9\n\tif(q.empty()) ans[a[p].num]=-1;     // \u65e0\u89e3\n\telse ans[a[p].num]=q.top().first;\n\tif(flag)      // \u6e05\u7a7a \n\t{\n\t\tpriority_queue<PA,vector<PA>,greater<PA> > em;\n\t\tswap(q,em);     // \u4e00\u79cd\u6bd4 while \u5faa\u73af pop \u66f4\u5feb\u7684\u6e05\u7a7a\u65b9\u5f0f \n\t}\n}\nint main()\n{\n\tn=Read(); m=Read();\n\tfor(int i=1;i<n;++i) Add(Read(),Read());\n\twhile(m--) Exadd(Read(),Read(),Read());\n\tcnt=0; DFS(1,0); cnt=0; DSU(1,0,0);     // \u52b3\u6a21 cnt \u2026\n\tfor(int i=1;i<n;++i) Write(ans[i]), putchar('\\n');\n\treturn 0;\n}\n```\n\n\n------------\n    p.s.\u8fd9\u9053\u9898\u65e2\u6709\u7c7b\u5e76\u67e5\u96c6\u505a\u6cd5\uff0c\u4e5f\u6709\u6811\u5256\u505a\u6cd5\uff0c\u6240\u4ee5 DSU on tree \u5f88\u5408\u7406\u5427~",
        "postTime": 1634912323,
        "uid": 224693,
        "name": "D_F_S",
        "ccfLevel": 7,
        "title": "P4374 [USACO18OPEN]Disruption P \u9898\u89e3"
    },
    {
        "content": "**\u9898\u76ee\u5927\u610f\uff1a**\n\n\u7ed9\u4e00\u68f5 $N$ \u4e2a\u70b9\u7684\u6811\u548c $M$ \u6761\u7279\u6b8a\u8fb9\uff0c\u7279\u6b8a\u8fb9\u6709\u8fb9\u6743\u3002\u5e0c\u671b\u6c42\u51fa\u53bb\u6389\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u540e\uff0c\u52a0\u4e00\u6761\u7279\u6b8a\u8fb9\u4f7f\u56fe\u8fde\u901a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$2\\le N\\le 5\\times 10^4,M\\le 5\\times10^4$ .\n\n> \u77e5\u8bc6\u50a8\u5907\uff1a\u5e76\u67e5\u96c6\uff0c\u500d\u589eLCA\n\n> \u9898\u76ee\u96be\u5ea6\uff1a\u7701\u9009/USACO Platinum\n\n**\u89e3\u6790\uff1a**\n\n*\uff08\u8fd9\u9053\u9898\u7a0d\u4e3a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u8003\u8651\u7279\u6b8a\u8fb9\u80fd\u7ed9\u54ea\u4e9b\u8fb9\u7684\u7b54\u6848\u5e26\u6765\u8d21\u732e\uff0c\u5e76\u7528\u6811\u5256+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O(N\\log^2 N)$ \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u66f4\u4e3a\u7cbe\u5999\u7684\u79bb\u7ebf\u505a\u6cd5\u3002\uff09*\n\n\u5bf9\u7279\u6b8a\u8fb9\u6309\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\u3002\u8003\u8651\u7279\u6b8a\u8fb9 $(u,v)$ \u80fd\u6210\u4e3a\u54ea\u4e9b\u6811\u4e0a\u8fb9\u7684\u7b54\u6848\u3002\u53bb\u6389\u4e00\u6761\u8fb9\u52a0\u4e0a $(u,v)$ \u540e\u539f\u56fe\u4ecd\u4e3a\u6811\uff0c\u4e0d\u96be\u53d1\u73b0\u53bb\u6389\u7684\u8fd9\u6761\u8fb9\u5fc5\u987b\u5728 $[u,v]$ \u7684\u6811\u4e0a\u8def\u5f84\u4e0a\u3002\u5176\u6b21\uff0c\u5f53\u8fd9\u6761\u6811\u8fb9\u7684\u7b54\u6848\u5df2\u7ecf\u786e\u5b9a\u540e\uff0c\u4e0d\u9700\u8981\u518d\u8003\u8651\u8fd9\u6761\u8fb9\u65ad\u5f00\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u4e24\u4e2a\u7aef\u70b9\u3002\n\n\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u9884\u5904\u7406\u500d\u589e LCA \uff0c\u4ece\u5c0f\u5230\u5927\u904d\u5386\u7279\u6b8a\u8fb9\uff0c\u5bf9\u6811\u4e0a\u8fb9\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(M\\alpha(n))$ .\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\n#define per(i,a,b) for(int i=(a);i>=(b);--i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n    while (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\nconst int N=2e5+5;\nint n,m,fa[N][20],Log[N],pos[N],dep[N];\nint dsu[N],ans[N];\nint find(int x){return x==dsu[x]?x:dsu[x]=find(dsu[x]);}\nstruct Edge{\n    int u,v,w;\n    bool operator <(const Edge a)const{\n        return w<a.w;\n    }\n}e[N];\nvector <pii> G[N];\nvoid dfs(int u,int f){\n    dep[u]=dep[f]+1,fa[u][0]=f;\n    for(auto x:G[u]){\n        if(x.fi==f)continue;\n        pos[x.se]=x.fi;\n        dfs(x.fi,u);\n    }\n}\nint lca(int x,int y) {\n\tif(dep[x]<dep[y])swap(x,y);\n\twhile(dep[x]>dep[y]){\n\t    x=fa[x][Log[dep[x]-dep[y]]];\n\t}\n    if(x==y)return x;\n    for(int i=Log[dep[x]];i>=0;i--){\n        if(fa[x][i]!=fa[y][i]){\n            x=fa[x][i];\n            y=fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nvoid init(){\n    Log[0]=-1;\n    rep(i,1,n){\n        Log[i]=Log[i>>1]+1;\n        ans[i]=-1;\n        dsu[i]=i;\n    }\n    rep(i,1,16){\n        rep(j,1,n)fa[j][i]=fa[fa[j][i-1]][i-1];\n    }\n    sort(e+1,e+m+1);\n}\nint main(){\n    //freopen(\"disrupt.in\",\"r\",stdin);\n    //freopen(\"disrupt.out\",\"w\",stdout);\n    n=read(),m=read();\n    rep(i,1,n-1){\n        int u=read(),v=read();\n        G[u].pb({v,i}),G[v].pb({u,i});\n    }\n    dfs(1,0);\n    rep(i,1,m){\n        e[i]={read(),read(),read()};\n    }\n    init();\n    rep(i,1,m){\n        int u=e[i].u,v=e[i].v,w=e[i].w;\n        int L=lca(u,v);\n        for(u=find(u);dep[u]>dep[L];u=find(fa[u][0])){\n            ans[u]=w,dsu[u]=fa[u][0];\n        }\n        for(v=find(v);dep[v]>dep[L];v=find(fa[v][0])){\n            ans[v]=w,dsu[v]=fa[v][0];\n        }\n    }\n    rep(i,1,n-1)printf(\"%d\\n\",ans[pos[i]]);\n    return 0;\n}\n```\n\n",
        "postTime": 1625404874,
        "uid": 218501,
        "name": "ETHANK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 [USACO18OPEN]Disruption P"
    },
    {
        "content": "## \u524d\u8a00\n\u770b\u5230\u9898\u89e3\u5927\u4f6c\u4eecLCA+\u5e76\u67e5\u96c6\u3001\u6811\u5256\u3001LCT\u5404\u79cd\u5404\u6837\u7684\u505a\u6cd5\uff0c\u849f\u84bb\u745f\u745f\u53d1\u6296\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u770b\u5230\u6211\u5728\u6a21\u62df\u8d5b\u4e0a\u7684\u601d\u8def\uff0c\u4e8e\u662f\u6765\u8865\u5145\u4e00\u4e0b\u3002\n## \u601d\u8def\n\u672c\u9898\u662f\u8ba9\u6211\u4eec\u53bb\u6c42\u5728\u4e00\u68f5\u6811\u4e0a\u4efb\u610f\u5207\u65ad\u4e00\u6761\u8fb9\uff0c\u8fde\u63a5\u65ad\u5f00\u7684\u4e24\u90e8\u5206\u7684\u989d\u5916\u8fb9\u7684\u6700\u5c0f\u503c\u3002\n\n\u7531\u4e8e\u6811\u4e0a\u5207\u65ad\u4e00\u6761\u8fb9\uff0c\u5206\u6210\u7684\u4e24\u90e8\u5206\u4e00\u5b9a\u6709\u8fd9\u6761\u8fb9\u4e0b\u7684\u5b50\u6811\uff0c\u5904\u7406\u5b50\u6811\u95ee\u9898\u6709\u4e00\u79cd\u65b9\u6cd5\uff1a\u6b27\u62c9\u5e8f\u5217\u3002\u7c7b\u4f3c\u4e8eDFS\u5e8f\uff0c\u6b27\u62c9\u5e8f\u5217\u5728DFS\u8bbf\u95ee\u548c\u56de\u6eaf\u65f6\u5404\u8bb0\u4e00\u6b21\u65f6\u95f4\u6233\uff0c\u5219\u6709\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\uff1a\u4e00\u9897\u5b50\u6811\u7684\u8282\u70b9\u5728\u6b27\u62c9\u5e8f\u5217\u4e2d\u4e00\u5b9a\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff08\u8bbf\u95ee\u5b8c\u7236\u8282\u70b9\u540e\u5fc5\u5148\u8bbf\u95ee\u5b8c\u5176\u5b50\u8282\u70b9\u518d\u56de\u6eaf\uff09\uff0c\u50cf\u6811\u5256\u4e00\u6837\u5c06\u5b50\u6811\u95ee\u9898\u8f6c\u6362\u4e3a\u533a\u95f4\u95ee\u9898\u3002\n[![yZFdC4.png](https://s3.ax1x.com/2021/02/01/yZFdC4.png)](https://imgchr.com/i/yZFdC4)\n\n\u5982\u6b64\u56fe\uff0c\u6b27\u62c9\u5e8f\u5217\u4e3a\uff1a1 2 3 4 4 5 5 3 2 6 7 7 6 1\n\n\u5176\u4e2d 3 4 4 5 5 3 \u5bf9\u5e94\u4e09\u7684\u5b50\u6811\u3002\n\n\u8bbe\u4e00\u4e2a\u8282\u70b9 $i$ \u5bf9\u5e94\u7684\u4e0b\u6807\u4e3a $l_i$ \u548c $r_i$ ($l_i<r_i$)\uff0c\u5219\u8be5\u8282\u70b9\u5728\u5b50\u6811 $x$ \u4e2d\u7684\u5224\u5b9a\u6807\u51c6\u4e3a $l_x \\leq l_i \\leq r_x$ \u6216 $l_x \\leq r_i \\leq r_x$\u3002\u82e5\u4e00\u6761\u989d\u5916\u8fb9 $(u,v)$ \u5728 $x$ \u7684\u7236\u4eb2\u8fb9\u5207\u65ad\u65f6\u88ab\u7edf\u8ba1\uff0c\u5219\u6709 $r_u< l_x \\leq r_v \\leq r_x$ \u6216 $l_x \\leq l_u \\leq r_x < l_v$\u3002\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\u8fdb\u884c\u7edf\u8ba1\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u8fb9\uff0c\u6309\u9012\u589e\u626b\u63cf\u6bcf\u4e00\u4e2a $l_x$ \uff0c\u6b64\u65f6\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8fb9\u90fd\u6709 $r_u<l_x$ \uff08\u56e0\u4e3a\u4e0d\u5b58\u5728\u4e24\u4e2a\u8282\u70b9\u6ee1\u8db3 $l_i<l_j<r_i<r_j$\uff09 ,\u56e0\u6b64\u7edf\u8ba1\u5176\u4e2d $r_v \\in [l_x,r_x]$ \u7684\u8fb9\u7684\u6700\u5c0f\u503c\uff08\u5373\u67e5\u8be2 $l_x$~$r_x$\u4e2d\u8bb0\u5f55\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff09\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u7684\u989d\u5916\u8fb9\u52a0\u5165\u7ebf\u6bb5\u6811\u4e2d\uff08\u5373\u5728 $r_v$\u7684\u4f4d\u7f6e\u8bb0\u5f55 $w_{u,v}$\uff09\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8fb9\u540c\u7406\u9012\u51cf\u626b\u63cf $r_x$\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=100005,M=200005;\nconst int INF=1000000007;\nint hd[N],nxt[M],to[M],id[M],tot=1;\nint shd[N],snxt[M],sto[M],sval[M],stot;\nint dfn1[N],dfn2[N];\nint s[N],o[N],snum,onum;\nint n,m;\nint ans[N],num,yxh[N];\n\n\n//-----\u7ebf\u6bb5\u6811------- \nclass Segment_Tree{\nprivate:\n\t#define l(p) t[p].l\n\t#define r(p) t[p].r\n\t#define lc(p) (p<<1)\n\t#define rc(p) ((p<<1)|1)\n\tstruct Segment_Tree_Node{\n\t\tint dat,l,r;\n\t}t[8*N];\npublic:\n\tvoid change(int p,int x,int v){\n\t\tif (l(p)==r(p)) {t[p].dat=min(t[p].dat,v); return;}\n\t\tint mid=(l(p)+r(p))>>1;\n\t\tif (x<=mid) change(lc(p),x,v);\n\t\telse change(rc(p),x,v);\n\t\tt[p].dat=min(t[lc(p)].dat,t[rc(p)].dat);\n\t}\n\tvoid init(int p,int l,int r){\n\t\tl(p)=l; r(p)=r;\n\t\tt[p].dat=INF;\n\t\tif (l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tinit(lc(p),l,mid);\n\t\tinit(rc(p),mid+1,r);\n\t}\n\tint ask(int p,int l,int r){\n\t\tif (l<=l(p)&&r>=r(p)) return t[p].dat;\n\t\tint mid=(l(p)+r(p))>>1;\n\t\tint val=INF;\n\t\tif (l<=mid) val=min(val,ask(lc(p),l,r));\n\t\tif (r>mid) val=min(val,ask(rc(p),l,r));\n\t\treturn val;\n\t}\n\t#undef l\n\t#undef r\n\t#undef lc\n\t#undef rc\n\t#undef dat\n}st,ot;\n//-----\u7ebf\u6bb5\u6811------- \n\n\ninline void add(int u,int v,int w){\n\ttot++;\n\tnxt[tot]=hd[u];\n\thd[u]=tot;\n\tto[tot]=v;\n\tid[tot]=w;\n}\ninline void sadd(int u,int v,int w){\n\tstot++;\n\tsnxt[stot]=shd[u];\n\tshd[u]=stot;\n\tsto[stot]=v;\n\tsval[stot]=w;\n}\nvoid label(int u,int in_edge){\n\tdfn1[u]=++num; s[++snum]=u; //\u8bbf\u95ee\u65f6\u8bb0\u5f55 \n\tyxh[u]=id[in_edge];  //\u6ce8\u610f\u662f\u8981\u6309\u8fb9\u8f93\u51fa\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u8fb9\u5e8f\u53f7 \n\tfor (int i=hd[u]; i; i=nxt[i]){\n\t\tif (i==(in_edge^1)) continue;\n\t\tlabel(to[i],i);\n\t}\n\tdfn2[u]=++num; o[++onum]=u; //\u56de\u6eaf\u65f6\u8bb0\u5f55 \n}\n\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1; i<n; i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v,i);\n\t\tadd(v,u,i);\n\t}\n\tlabel(1,tot+2);\n\tfor (int i=1; i<=m; i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tsadd(u,v,w);\n\t\tsadd(v,u,w);\n\t}\n\tfor (int i=1; i<n; i++) ans[i]=INF;\n\t//\u9012\u589e\u679a\u4e3eli \n\tst.init(1,1,2*n);\n\tfor (int i=1; i<=n; i++){\n\t\tint pos=s[i],ld=dfn1[pos],rd=dfn2[pos];\n\t\tans[yxh[pos]]=min(ans[yxh[pos]],st.ask(1,ld,rd));\n\t\tfor (int j=shd[pos]; j; j=snxt[j]) st.change(1,dfn2[sto[j]],sval[j]); //\u52a0\u5165\u4e0e\u8be5\u8282\u70b9\u76f8\u8fde\u7684\u989d\u5916\u8fb9 \n\t}\n\t//\u9012\u51cf\u679a\u4e3eri \n\tot.init(1,1,2*n);\n\tfor (int i=n; i; i--){\n\t\tint pos=o[i],ld=dfn1[pos],rd=dfn2[pos];\n\t\tans[yxh[pos]]=min(ans[yxh[pos]],ot.ask(1,ld,rd));\n\t\tfor (int j=shd[pos]; j; j=snxt[j]) ot.change(1,dfn1[sto[j]],sval[j]);\n\t}\n\tfor (int i=1; i<n; i++) if (ans[i]<INF) printf(\"%d\\n\",ans[i]); else puts(\"-1\"); //\u6ce8\u610f\u5224\u65ad\u65e0\u89e3 \n\treturn 0;\n}\n```\n\u65f6\u6548\u4e0a $O(n\\log_2n)$\uff0c\u5199\u8d77\u6765\u76f8\u5bf9\u6811\u5256\u5e94\u8be5\u8f7b\u677e\u4e00\u4e9b\uff0c\u7ebf\u6bb5\u6811\u90fd\u4e0d\u7528\u61d2\u6807\u8bb0\u3002",
        "postTime": 1612153142,
        "uid": 163729,
        "name": "yyyyxh",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption P\u3011"
    },
    {
        "content": "\u867d\u8bf4\u662f\u6811\u5256\u88f8\u9898\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u505a\u6cd5\u8fd8\u86ee\u591a\u7684\u3002\n\n\u9898\u89e3\u91cc\u5df2\u7ecf\u6709\u4e00\u4e2a **\u7ebf\u6bb5\u6811\u5408\u5e76+\u6811\u4e0a\u5dee\u5206** \u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u53ea\u7528 **\u7ebf\u6bb5\u6811\u5408\u5e76** \uff0c\u4e0d\u7528 **\u6811\u4e0a\u5dee\u5206** \u7684\u65b9\u6cd5\u3002\n\n\u4e00\u6761\u8fb9\u53ea\u6709\u4e00\u7aef\u5728\u5b50\u6811\u5185\uff0c\u53e6\u4e00\u7aef\u5728\u5b50\u6811\u5916\uff0c\u624d\u6709\u53ef\u80fd\u5bf9\u5f53\u524d\u5b50\u6811\u7684\u6839\u7684\u5411\u4e0a\u8fde\u8fb9\u4ea7\u751f\u8d21\u732e\uff0c\u6240\u4ee5\u5408\u5e76\u65f6\u82e5\u76f8\u540c\u4f4d\u7f6e\u7684\u503c\u5728\u4e24\u4e2a\u8981\u5408\u5e76\u7684\u7ebf\u6bb5\u6811\u4e2d\u90fd\u5b58\u5728\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u8d4b\u503c INF \uff0c\u5c31\u7701\u53bb\u4e86\u5dee\u5206\u3002\n\ncode\uff1a\n```\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\nusing namespace std;\nconst int N=5e4+5,MAXN=2e6+5;\nint n,m,ans[N],rt[N],tree[MAXN],ls[MAXN],rs[MAXN],tot;\nstruct edge{\n\tint next,to,id;\n}e[N<<1];\nint head[N],cnt;\nvoid add(int u,int v,int id)\n{\n\te[++cnt]={head[u],v,id};\n\thead[u]=cnt;\n}\n#define mid (l+r>>1)\nvoid ins(int l,int r,int &k,int x,int y)\n{\n\tif(!k) k=++tot;\n\tif(l==r) return tree[k]=y,void();\n\tif(x<=mid) ins(l,mid,ls[k],x,y);\n\telse ins(mid+1,r,rs[k],x,y);\n\ttree[k]=min(tree[ls[k]],tree[rs[k]]);\n}\nvoid merge(int l,int r,int &k1,int k2)\n{\n\tif(!k2) return;\n\tif(!k1) return k1=k2,void();\n\tif(l==r) return tree[k1]=INF,void();\n\tmerge(l,mid,ls[k1],ls[k2]);\n\tmerge(mid+1,r,rs[k1],rs[k2]);\n\ttree[k1]=min(tree[ls[k1]],tree[rs[k1]]);\n}\n#undef mid\nvoid dfs(int x,int fa)\n{\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==fa) continue;\n\t\tdfs(y,x),ans[e[i].id]=tree[rt[y]];\n\t\tmerge(1,m,rt[x],rt[y]);\n\t}\n}\nint main()\n{\n\tios_base::sync_with_stdio(false),cin.tie(0);\n\tcin>>n>>m;\n\ttree[0]=INF;\n\tfor(int i=1,u,v;i<n;i++)\n\t\tcin>>u>>v,add(u,v,i),add(v,u,i);\n\tfor(int i=1,u,v,w;i<=m;i++)\n\t{\n\t\tcin>>u>>v>>w;\n\t\tins(1,m,rt[u],i,w);\n\t\tins(1,m,rt[v],i,w);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<n;i++) cout<<(ans[i]==INF?-1:ans[i])<<endl;\n}\n```\n",
        "postTime": 1606884876,
        "uid": 304995,
        "name": "PanH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption P\u3011"
    },
    {
        "content": "[$\\huge\\color{blue}Bl\\color{red}{og}$](http://geiz-revive.github.io/)\n\n[$\\large\\color{blue} {Describe}$](https://www.luogu.org/problemnew/show/P4374)\n\n\u849f\u84bb\u56de\u53bb\u9893\u4e86\u5341\u5929\u6587\u5316\u8bfe\u4ee5\u540e\u56de\u6765\u7684\u7b2c\u4e00\u9898\u3002\n\n\u5206\u6790\u9898\u610f\u53ef\u77e5\uff0c\u8fd9\u9898\u53ef\u4ee5\u62bd\u8c61\u6210\u7ed9\u94fe\u4e0a\u7684\u6bcf\u6761\u8fb9\u8d4b\u503c\uff0c\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u4e3a\u8fd9\u4e2a\u8d4b\u7684\u503c\u548c\u539f\u6709\u503c\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5c31\u662f\u677f\u5b50\u4e86\uff0c\u6811\u5256$log^2$\uff0c$LCT$ $log$\uff0c\u8fd9\u91cc\u9009\u62e9\u7528$LCT$\uff0c\u56e0\u4e3a\u8981\u8fb9\u8f6c\u70b9\u6240\u4ee5\u5e38\u6570\u8fd8\u662f\u633a\u5927\u7684\u3002\n\n\u8fd8\u6709\u5c31\u662f\u6ce8\u610f\u521d\u59cb\u5316\u548c\u8981\u5224\u65ad\u65e0\u89e3\u60c5\u51b5\uff0c\u521d\u59cb\u5316\u6240\u6709\u6743\u503c\u548c\u6807\u8bb0\u4e3a$inf$\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u5982\u679c\u4e00\u6761\u8fb9\u7684\u6743\u4e3a$inf$\u5c31\u8f93\u51fa$-1$\n\n$\\large{Code}$\uff1a\n\n```cpp\n#pragma region revive\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define son(x,y) t[x].child[y]\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 26], *p, *pend; }in; struct { char buff[1 << 26], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 26, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n\tif (x == 0) return (void)putchar('0');\n\tif (x < 0)putchar('-'), x = -x;\n\tstatic char buf[30];\n\tchar* p = buf;\n\twhile (x) {\n\t\t*(p++) = x % 10 + '0';\n\t\tx /= 10;\n\t}\n\twhile (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n\tchar *begin = s, c = getchar();\n\twhile (c < 33 || c>127) {\n\t\tc = getchar();\n\t}\n\twhile (c >= 33 && c <= 127) {\n\t\t*(s++) = c;\n\t\tc = getchar();\n\t}\n\t*s = 0;\n\treturn s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n\tIO x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\n#pragma endregion\nstruct node {\n\tint fa, child[2], w, tag;\n\tbool filp;\n}t[1000001];\ninl void change(int x, int w) {\n\tt[x].w = min(t[x].w, w), t[x].tag = min(t[x].tag, w);\n}\ninl void reverse(int x) {\n\tswap(ls(x), rs(x)), t[x].filp ^= 1;\n}\ninl void pushdown(int x) {\n\tif (t[x].filp) {\n\t\tif (ls(x))reverse(ls(x));\n\t\tif (rs(x))reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n\tif (t[x].tag != inf) {\n\t\tif (ls(x))change(ls(x), t[x].tag);\n\t\tif (rs(x))change(rs(x), t[x].tag);\n\t\tt[x].tag = inf;\n\t}\n}\ninl bool nroot(int x) { return ls(fa(x)) == x || rs(fa(x)) == x; }\ninl bool poi(int x) { return rs(fa(x)) == x; }\ninl void push(int x) {\n\tif (nroot(x))push(fa(x));\n\tpushdown(x);\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\tif (nroot(f))t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\tif (s)fa(s) = f;\n\tfa(x) = gf, fa(f) = x;\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n}\ninl void access(int x) { for (re i = 0; x; x = fa(i = x)) splay(x), rs(x) = i; }\ninl void makeroot(int x) { access(x), splay(x), reverse(x); }\ninl void split(int x, int y) { makeroot(y), access(x), splay(x); }\ninl void link(int x, int y) { split(x, y), fa(y) = x; }\nstruct edge {\n\tint u, v;\n}e[1000001];\nsigned main() {\n\tre n = read<int>(), m = read<int>(), x, y, w;\n\tfor (re i = 0; i <= n; i++)t[i].w = t[i + n].w = inf;\n\tfor (re i = 1; i < n; i++)x = read<int>(), y = read<int>(), e[i] = edge{ x,y }, link(x, i + n), link(y, i + n);\n\twhile (m--) {\n\t\tx = read<int>(), y = read<int>(), w = read<int>();\n\t\tsplit(x, y), change(x, w);\n\t}\n\tfor (re i = 1; i < n; i++)split(e[i].u, e[i].v), writeln(t[i + n].w == inf ? -1 : t[i + n].w);\n}\n```\n\n",
        "postTime": 1560676184,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4374 [USACO18OPEN]Disruption"
    },
    {
        "content": "\u8fd9\u4e2a\u597d\u50cf\u5b8c\u5168\u5c31\u662f\u8054\u7cfb\u6811\u5256\u7684\u6a21\u677f\u9898\u3002\n\u5f88\u660e\u663e\u989d\u5916\u52a0\u7684\u8def\u5f84\u53ef\u4ee5\u62ff\u6765\u66f4\u65b0\u4e24\u70b9\u95f4\u7684\u90a3\u4e9b\u8fb9\u7684\u6700\u4f18\u7b54\u6848\uff0c\u7136\u540e\u5c31\u76f4\u63a5\u6811\u5256\u5c31\u53ef\u4ee5\u4e86\u3002\n\u8981\u6ce8\u610f\u66f4\u65b0\u7684\u65f6\u5019\u4e24\u70b9\u7684\u516c\u5171\u7956\u5148\u7684\u60f3\u4e0a\u8fde\u7684\u8fb9\u4e0d\u80fd\u88ab\u66f4\u65b0\u3002\n\u5514\uff0c\u9002\u5408\u7528\u6765\u7ec3\u4e60\u6811\u5256\u3002\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define maxn 8*50009\n#define maxx 1000000009\n#include<vector>\nusing namespace std;\nint w[maxn],num,cnt,n,m,fa[maxn],size[maxn],dep[maxn],son[maxn],top[maxn];\nint f[maxn],head[maxn],fx[maxn];\nstruct ding{\n  int t,nex;\n}e[maxn];\nvoid add(int u,int v)\n{e[++num].t=v;e[num].nex=head[u];head[u]=num;}\npair<int,int>q[maxn];\nvoid dfs1(int x,int y)\n{\n  fa[x]=y; size[x]=1;son[x]=0;int now=0;\n  for (int i=head[x];i;i=e[i].nex)\n  {\n  \tint to=e[i].t;if (to==y) continue;\n  \tdep[to]=dep[x]+1;dfs1(to,x);size[x]+=size[to];\n  \tif (size[to]>now) now=size[to],son[x]=to;\n  }\n}\nvoid dfs2(int x,int y)\n{\n  w[x]=++cnt;\n  if (son[x]!=0) top[son[x]]=top[x],dfs2(son[x],x);\n  for (int i=head[x];i;i=e[i].nex)\n  {\n  \tint to=e[i].t;\n  \tif ((to==y)||(to==son[x])) continue;\n  \ttop[to]=to;\n  \tdfs2(to,x);\n  }\n}\nvoid build(int x,int l,int r)\n{\n  f[x]=maxx;\n  if (l==r) return;\n  int mid=(l+r)>>1;\n  build(x<<1,l,mid);build(x<<1|1,mid+1,r);\n}\nvoid push(int x)\n{\n  f[x<<1]=min(f[x<<1],f[x]);\n  f[x<<1|1]=min(f[x<<1|1],f[x]);\n}\nvoid up(int x,int l,int r,int lef,int righ,int val)\n{\n  if ((l>=lef)&&(r<=righ))\n  {\n  \tf[x]=min(f[x],val); return;\n  } \n  int mid=(l+r)>>1;push(x);\n  if (lef<=mid)up(x<<1,l,mid,lef,righ,val);\n  if (righ>mid)up(x<<1|1,mid+1,r,lef,righ,val);\n}\nint query(int x,int l,int r,int y)\n{\n  if ((l==y)&&(r==y)) return f[x];\n  push(x);\n  int mid=(l+r)>>1;\n  if (y<=mid) return query(x<<1,l,mid,y);\n  if (y>mid) return query(x<<1|1,mid+1,r,y);\n}\nvoid update(int x,int y,int val)\n{\n  int now,tx=top[x],ty=top[y],ans=0; \n  //if ((x==1)&&(y==4)) cout<<\"$\"<<tx<<\" \"<<ty<<endl;\n  while (tx!=ty)\n  {\n  \tif (dep[tx]<dep[ty]) swap(x,y),swap(tx,ty);\n  \tup(1,1,n,w[tx],w[x],val);\n  \tx=fa[tx]; tx=top[x];\n  }\n  if (x==y) return;\n  if (w[x]>w[y]) swap(x,y);\n  up(1,1,n,w[x]+1,w[y],val);\n}\ninline int read()\n{\n  int ex=0;char ch;\n  ch=getchar();\n  while ((ch<'0')||(ch>'9')) ch=getchar();\n  while ((ch>='0')&&(ch<='9'))\n  {\n  \tex=ex*10+ch-'0';\n  \tch=getchar();\n  }\n  return ex;\n}\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  int x,y,r;\n  for (int i=1;i<n;i++)\n  {\n  \tx=read();y=read();add(x,y);add(y,x);\n  \tq[i]=make_pair(x,y);\n  }\n  top[1]=1;dep[1]=1;\n  dfs1(1,1);dfs2(1,1);\n  build(1,1,n); \n  for (int i=1;i<=m;i++)\n  {\n  \tx=read();y=read();r=read();\n  \t//if ((fa[x]==y)||(fa[y]==x)) continue;\n  \tupdate(x,y,r);\n  }\n  int tp;\n  for (int i=1;i<n;i++)\n  {\n   if (dep[q[i].first]>dep[q[i].second]) \n   tp=query(1,1,n,w[q[i].first]);\n   else tp=query(1,1,n,w[q[i].second]);\n   if (tp!=maxx) printf(\"%d\\n\",tp);\n   else cout<<\"-1\"<<endl;\n  }\n  return 0;\n}\n\n```",
        "postTime": 1524930917,
        "uid": 21621,
        "name": "nihanchu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4374 \u3010[USACO18OPEN]Disruption\u3011"
    }
]