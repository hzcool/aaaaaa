[
    {
        "content": "### [\u539f\u9898\u63cf\u8ff0](https://www.luogu.org/problemnew/show/P4949)\n\n### ~~\u8fd9\u9053\u9898\u9898\u76ee\u7b80\u77ed\uff0c\u9898\u610f\u6e05\u695a\uff0c\u7ed9\u4e2a\u597d\u8bc4~~\n#### \u8fd9\u4e2a\u9898\u76ee\u662f\u7ed9\u4e86\u4e00\u4e2a\u73af\u5957\u6811\uff0c\u6709Q\u6b64\u8be2\u95ee\uff0c\u6bcf\u4e00\u6b21\u8be2\u95ee\u662f\u6539\u53d8\u4e00\u4e2a\u8fb9\u7684\u6743\u503c\u6216\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c~~\u5e9f\u8bdd~~\u3002\n\u6211\u4eec\u73c2\u4ee5\u5148\u8003\u8651\u5047\u8bbe\u8fd9\u4e9b\u64cd\u4f5c\u6c60\u5728\u4e00\u73c2\u6811\u4e0a\u7684\u3002\n\n\u8fd9\u5c31\u5f88\u597d\u505a\uff0c\u7528\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u5c31\u8db3\u4ee5\u89e3\u51b3\u3002\n\n\u8fb9\u6743\u600e\u4e48\u641e\uff1f\u73c2\u4ee5\u628a\u4e00\u4e2a\u8fb9\u7684\u6743\u503c\u770b\u6210\u8fd9\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u8282\u70b9\u6df1\u5ea6\u66f4\u6df1\u7684\u513f\u5b50\u7684\u70b9\u6743\u3002\n\n~~[Spoj375](https://www.luogu.org/problemnew/show/SP375)\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u4f46\u7279\u522b\u5361\u65f6\u9650\u3002~~\n\n\u4f46\u662f\uff0c\u9898\u76ee\u4e2d\u662f\u73af\u5957\u6811(~~\u9ed1\u9898\u54ea\u6709\u90a3\u4e48\u7b80\u5355\uff1f~~)\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u628a\u73af\u5957\u6811\u5206\u6210\u4e00\u73c2\u6811\u548c\u53e6\u5916\u4e00\u4e2a\u591a\u4f59\u7684\u8fb9\u3002\n\u8fd9\u663e\u7136\u73c2\u4ee5\u7528\u5e76\u8336\u51e0\u641e\u51fa\u6765\u3002\n\n\u63a5\u7740\uff0c\u6bcf\u4e00\u6b21\u8be2\u95ee\u5206\u4fe9\u5757\uff1a\n\n1. \u67e5\u8be2\u5728\u6811\u4e2d\u7684\u8def\u5f84\u7684\u957f\u5ea6\n1. \u8003\u8651\u7ecf\u8fc7\u591a\u4f59\u7684\u8fb9\uff0c\u67e5\u8be2\u8def\u5f84\u4e00\u4e2a\u8282\u70b9\u5230\u591a\u4f59\u7684\u8fb9\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u518d\u6b21\u67e5\u8be2\u8def\u5f84\u53e6\u4e00\u4e2a\u8282\u70b9\u5230\u591a\u4f59\u7684\u8fb9\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u52a0\u8d77\u6765\uff0c\u518d\u52a0\u4e0a\u591a\u4f59\u8fb9\u7684\u6743\u503c\uff08\u6ce8\u610f\u8fd8\u8981\u53cd\u8fc7\u6765\u52a0\u4e00\u6b21\uff01\uff01\uff09\n\n#### ~~\u7ed3\u675f\u4e86\u4e48\uff1f\u7ed3\u675f\u4e86~~\n\n\u6700\u540e\u653e\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include <stdio.h>\n#include <string.h>\n\n#define Maxn 100010\n\nint n, q, eu, ev, ew, ed;\nint b[Maxn], a[Maxn];\n\nint fa[Maxn];\nint find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\ninline bool unite(int x, int y) {\n\tx = find(x), y = find(y);\n\tif (x == y) return false;\n\treturn (fa[x] = y) | 1;\n}\n\nstruct Edge {\n\tint to, next, weight;\n} e[Maxn << 1];\nint head[Maxn], _cnt;\ninline void AddEdge(int u, int v, int w) {\n\te[_cnt] = (Edge) {v, head[u], w};\n\thead[u] = _cnt ++;\n}\n\nint par[Maxn], dep[Maxn];\nint sz[Maxn], son[Maxn];\nint top[Maxn], ind[Maxn], indx;\nvoid dfs1(int u, int parent, int depth) {\n\tpar[u] = parent, dep[u] = depth, sz[u] = 1;\n\tfor (int i = head[u]; ~i; i = e[i].next) {\n\t\tint v = e[i].to;\n\t\tif (v == parent) continue;\n\t\tdfs1(v, u, depth + 1); sz[u] += sz[v];\n\t\tif (sz[son[u]] < sz[v]) son[u] = v;\n\t\tb[v] = e[i].weight;\n\t}\n}\nvoid dfs2(int u, int topv) {\n\ttop[u] = topv, ind[u] = ++ indx, a[indx] = b[u];\n\tif (son[u]) dfs2(son[u], topv);\n\tfor (int i = head[u]; ~i; i = e[i].next)\n\t\tif (e[i].to != par[u] && e[i].to != son[u])\n\t\t\tdfs2(e[i].to, e[i].to);\n}\n\nint bit[Maxn];\ninline void modify(int x, int y) {\n\twhile (x <= n) bit[x] += y, x += x & -x;\n}\ninline int query(int x) {\n\tint ans = 0;\n\twhile (x) ans += bit[x], x -= x & -x;\n\treturn ans;\n}\n\ninline int TreeSum(int x, int y) {\n\tint ans = 0;\n\twhile (top[x] ^ top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) x ^= y ^= x ^= y;\n\t\tans += query(ind[x]) - query(ind[top[x]] - 1);\n\t\tx = par[top[x]];\n\t}\n\tif (ind[x] > ind[y]) x ^= y ^= x ^= y;\n\tans += query(ind[y]) - query(ind[x]);\n\treturn ans;\n}\n\ninline void change(int x, int y)\n{\n\tint l1 = (x << 1) - 1, l2 = x - 1 << 1;\n\tint a = e[l1].to, b = e[l2].to;\n\tint v = dep[a] < dep[b] ? b : a;\n\tint now = query(ind[v]) - query(ind[v] - 1);\n\tmodify(ind[v], y - now);\n}\n\nint main() {\n\tmemset(head, -1, sizeof head);\n\tscanf(\"%d %d\", &n, &q);\n\tfor (int i = 1; i <= n; ++ i) fa[i] = i;\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tint u, v, w; scanf(\"%d %d %d\", &u, &v, &w);\n\t\tif (unite(u, v)) AddEdge(u, v, w), AddEdge(v, u, w);\n\t\telse eu = u, ev = v, ew = w, ed = i, _cnt += 2;\n\t}\n\tdfs1(1, 0, 1);\n\tdfs2(1, 1);\n\tfor (int i = 1; i <= n; ++ i)\n\t\tmodify(i, a[i]);\n\twhile (q --) {\n\t\tint opt, x, y;\n\t\tscanf(\"%d %d %d\", &opt, &x, &y);\n\t\tif (opt == 1) {\n\t\t\tif (x == ed) ew = y;\n\t\t\telse change(x, y);\n\t\t}\n\t\telse {\n\t\t\tint ans = TreeSum(x, y);\n\t\t\tint ans1 = TreeSum(x, eu) + TreeSum(y, ev) + ew;\n\t\t\tint ans2 = TreeSum(x, ev) + TreeSum(y, eu) + ew;\n\t\t\tprintf(\"%d\\n\", ans < (ans1 < ans2 ? ans1 : ans2) ? ans : (ans1 < ans2 ? ans1 : ans2));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n## \u6700\u540e\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u5b8c\u7ed3\u6563\u82b1\uff01\uff01\n\n",
        "postTime": 1551099351,
        "uid": 114495,
        "name": "libra9z",
        "ccfLevel": 0,
        "title": "LuoguP4949"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u652f\u6301\u4fee\u6539\u67d0\u6761\u8fb9\u7684\u6743\u503c\u548c\u67e5\u8be2\u56fe\u4e0a\u4e24\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n### \u601d\u8def\uff1a\n\n\u5982\u679c\u8fd9\u79cd\u64cd\u4f5c\u653e\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u90a3\u4e48\u5c31\u662f\u5bfb\u627e\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u5e76\u6c42\u548c\uff0c\u4f7f\u7528\u6811\u94fe\u5256\u5206\u53ef\u4ee5\u65b9\u4fbf\u5730\u89e3\u51b3\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u56fe\u6539\u53d8\u6210\u4e00\u68f5\u6811\u4f7f\u5b83\u53ef\u4ee5\u88ab\u89e3\u51b3\u3002\n\n\u53d1\u73b0\u6b64\u56fe\u8fde\u901a\uff0c\u81f3\u5c11\u6709 $n-1$ \u6761\u8fb9\uff0c\u4f46\u8fd9\u4e2a\u56fe\u6709 $n$ \u6761\u8fb9\uff0c\u591a\u51fa\u6765\u4e86\u4e00\u6761\u8fb9\uff0c\u628a\u8fd9\u6761\u8fb9\u5148\u627e\u51fa\u6765\uff08\u4efb\u610f\u4e00\u6761\u591a\u51fa\u7684\u90fd\u53ef\u4ee5\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u67e5\u627e\u5230\uff0c\u5b58\u50a8\u4e0b\u7f16\u53f7\u7b49\u4fe1\u606f\u3002\n\n\u73b0\u5728\u8fd9\u4e2a\u56fe\u53d8\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff0c\u5148\u5ffd\u7565\u591a\u51fa\u7684\u8fb9\u7684\u5f71\u54cd\uff08\u5373\u6700\u77ed\u8def\u4e0d\u7ecf\u8fc7\u90a3\u6761\u8fb9\uff09\u6765\u6c42\u51fa\u64cd\u4f5c\u4e8c\u4e2d $x$ \u5230 $y$ \u7684\u8def\u5f84\uff0c\u7136\u540e\u518d\u8003\u8651\u591a\u51fa\u7684\u8fb9\u7684\u5f71\u54cd\u3002\n\n\u82e5\u591a\u51fa\u7684\u8fb9\u6709\u5f71\u54cd\uff0c\u5219\u6700\u77ed\u8def\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u6b64\u8fb9\uff0c\u8bbe\u6b64\u8fb9\u4e24\u7aef\u70b9\u4e3a $cu,cv$\uff0c\u8fb9\u6743\u4e3a $w$\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u5f84\u662f\uff1a$x$ \u6216 $y$ \u7ecf\u8fc7\u6811\u4e0a\u7684\u8fb9\u5230 $cu$ \u518d\u5230 $cv$\uff0c\u6700\u540e\u518d\u7ecf\u8fc7\u6811\u4e0a\u7684\u8fb9\u5230\u8fbe $x,y$ \u4e2d\u53e6\u4e00\u4e2a\u70b9\u3002\n\n\u53ef\u4ee5\u5206\u8d77\u59cb\u70b9\u8ba8\u8bba\uff0c\u6700\u540e\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- $x-cu-cv-y$\uff0c\u603b\u548c\u4e3a $\\operatorname{dis}(x,cu)+cw+\\operatorname{dis}(cv,y)$\n- $x-cv-cu-y$\uff0c\u603b\u548c\u4e3a $\\operatorname{dis}(x,cv)+cw+\\operatorname{dis}(cu,y)$\n\n\u518d\u7b97\u4e0a\u5ffd\u7565\u5f71\u54cd\u65f6\u7684\u7ed3\u679c\uff0c\u4e09\u79cd\u60c5\u51b5\u5206\u522b\u6c42\u51fa\u7ed3\u679c\uff0c\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6700\u540e\u4e00\u70b9\uff1a\u6b64\u9898\u8981\u6c42\u8fb9\u6743\uff0c\u6811\u94fe\u5256\u5206\u53ef\u4ee5\u7ef4\u62a4\u70b9\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u8fb9\u7684\u4fe1\u606f\u65e0\u6cd5\u7ef4\u62a4\uff0c\u8003\u8651\u628a\u8fb9\u6743\u653e\u5230\u6811\u4e0a\u7684\u66f4\u6df1\u7684\u70b9\u4f5c\u4e3a\u70b9\u6743\uff0c\u4f46\u8fd9\u6837\u9700\u8981\u8003\u8651 $\\operatorname{lca}(x,y)$ \u7684\u70b9\u6743\u662f\u4e0a\u9762\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u4e0d\u9700\u8981\u52a0\u5728\u7ed3\u679c\u4e2d\uff0c\u6700\u540e\u5f53\u4e24\u70b9\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u65f6\uff0c\u4e0d\u6c42\u66f4\u6d45\u7684\u90a3\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u662f $\\operatorname{lca}(x,y)$\uff0c\u4e0d\u80fd\u52a0\u8fdb\u53bb\u3002\n\n\u6811\u94fe\u5256\u5206\u7684\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5b8c\u6210\uff0c\u65e0\u6839\u6811\u4ee5 $1$ \u4e3a\u6839\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <cstring>\n#include <queue>\n#include <map>\nusing namespace std;\ntypedef long long ll;\n//1e5+10\nint n,m,fa[100010];\nint cu,cv,cw,ch;\nint fin(int x)\n{\n\tif(fa[x]!=x) return fa[x]=fin(fa[x]);\n\treturn x;\n}//\u5e76\u67e5\u96c6\u6c42\u591a\u4f59\u7684\u8fb9\nint c[100010];\nint lowbit(int x)\n{\n\treturn x&-x;\n}\nvoid upd(int x,int k)\n{\n\twhile(x<=n)\n\t{\n\t\tc[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\nint query(int x)\n{\n\tint res=0;\n\twhile(x>=1)\n\t{\n\t\tres+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}//\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\nint hed[100010],nxt[200020],ww[200020],to[200020],cnt;\nstruct Edge\n{\n\tint u,v,w;\n}e[100010];//\u4e3a\u4e86\u5904\u7406\u64cd\u4f5c\u4e00\uff0c\u6211\u5f00\u4e86\u4e00\u4e2a\u5b58\u8fb9\u7684\u6570\u7ec4\uff0c\u4f7f\u7528\u5176\u5b83\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\nvoid adde(int u,int v,int w)\n{\n\tcnt++;\n\tto[cnt]=v;\n\tww[cnt]=w;\n\tnxt[cnt]=hed[u];\n\thed[u]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u6c42\u8fb9\uff0c\u8bb0\u5f97\u5f002\u500d\u7a7a\u95f4\nint siz[100010],f[100010],top[100010],son[100010],dep[100010],id[100010],dfscnt,wt[100010];//wt\u5b58\u8be5dfs\u5e8f\u7684\u70b9\u6743\uff0c\u521d\u59cb\u5316\u65f6\u9700\u8981\u7528\uff0c\u5176\u5b83\u540c\u666e\u901a\u6811\u94fe\u5256\u5206\nvoid dfs1(int u,int from)\n{\n\tsiz[u]=1;\n\tf[u]=from;\n\tdep[u]=dep[from]+1;\n\tfor(int i=hed[u];i!=0;i=nxt[i])\n\t{\n\t\tif(to[i]!=from)\n\t\t{\n\t\t\tdfs1(to[i],u);\n            siz[u]+=siz[to[i]];\n\t\t    if(siz[to[i]]>siz[son[u]])\n\t\t    {\n\t\t\t    son[u]=to[i];\n\t\t    }\n\t\t}\n\t\t\n\t}\n}\nvoid dfs2(int u,int topf,int w)\n{\n\tdfscnt++;\n\twt[dfscnt]=w;\n\tid[u]=dfscnt;\n\ttop[u]=topf;\n    for(int i=hed[u];i!=0;i=nxt[i])\n    {\n        if(to[i]==son[u]&&son[u]!=0) dfs2(son[u],topf,ww[i]);\n    }\n\tfor(int i=hed[u];i!=0;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v!=f[u]&&v!=son[u]) dfs2(v,v,ww[i]);\n\t}\n}\nint ask(int x,int y)\n{\n\tif(x==y) return 0;\n\tint fx=top[x],fy=top[y],res=0;\n\twhile(fx!=fy)\n\t{\n\t\tif(dep[fx]<dep[fy])\n\t\t{\n\t\t\tres+=query(id[y])-query(id[fy]-1);\n\t\t\ty=f[top[y]];fy=top[y];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres+=query(id[x])-query(id[fx]-1);//\u5dee\u5206\u6c42\u548c\n\t\t\tx=f[top[x]];fx=top[x];\n\t\t}\n\t}\n\tif(id[x]<id[y]) res+=query(id[y])-query(id[x]);\n\telse res+=query(id[x])-query(id[y]);//\u91cd\u70b9\uff1a\u8fb9\u6743\u4e0b\u653e\u70b9\u6743\u65f6\u7684lca\u4e0d\u88ab\u7edf\u8ba1\uff0c\u53ea\u67e5\u8be2(x,y]\u7684\u548c\n\treturn res;\n}\nint main()\n{\n\tcin>>n>>m;\n    for(int i=1;i<=n;i++) fa[i]=i;//\u8bb0\u5f97\u521d\u59cb\u5316\uff01\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tif(fin(u)!=fin(v))\n\t\t{\n\t\t\tfa[fin(u)]=fin(v);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcu=u;\n\t\t\tcv=v;\n\t\t\tcw=w;\n\t\t\tch=i;//\u5b58\u50a8\u591a\u4f59\u8fb9\u7684\u4fe1\u606f\n\t\t\tcontinue;\n\t\t}\n\t\tadde(u,v,w);\n\t\tadde(v,u,w);\n\t\te[i].u=u;\n\t\te[i].v=v;\n\t\te[i].w=w;\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1,0);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tupd(i,wt[i]);\n\t}//\u521d\u59cb\u5316\u6811\u72b6\u6570\u7ec4\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u65e0\u70b9\u6743\u6240\u4ee5\u4ece1\u6765\u5faa\u73af\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt,x,y;\n\t\tcin>>opt>>x>>y;\n\t\tif(opt==1)\n\t\t{\n\t\t\tif(x==ch) cw=y;//\u82e5\u6539\u7684\u662f\u591a\u4f59\u7684\u8fb9\uff0c\u76f4\u63a5\u4fee\u6539\u8fb9\u6743\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(f[e[x].u]==e[x].v)//\u4fee\u6539\u65f6\u9700\u8981\u5224\u65ad\u6b64\u8fb9\u9700\u8981\u653e\u5230\u54ea\u91cc\u4f5c\u70b9\u6743\n\t\t\t\t{\n\t\t\t\t\tupd(id[e[x].u],y-e[x].w);\n\t\t\t\t}\n\t\t\t\telse\n                {\n                    upd(id[e[x].v],y-e[x].w); //\u6539\u53d8\u503c\u548c\u589e\u52a0\u503c\u5dee\u4e0d\u591a\uff0c\u6c42\u5dee\u5373\u53ef\n                } \n                e[x].w=y;//\u4fee\u6539\u8fb9\u6743\u540e\u4e5f\u8981\u5728\u539f\u6570\u7ec4\u4fee\u6539\uff0c\u7b80\u5316\u8fd0\u7b97\uff0c\u51cf\u5c0f\u5e38\u6570\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint ans=min(ask(x,y),min(ask(x,cu)+ask(y,cv)+cw,ask(x,cv)+ask(y,cu)+cw));//\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\n\t\t\tcout<<ans<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605321074,
        "uid": 191868,
        "name": "monstersqwq",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "# P4949 \u9898\u89e3\n\n\u5efa\u8bae\u5148\u8fc7[P3384 \u3010\u6a21\u677f\u3011\u8f7b\u91cd\u94fe\u5256\u5206/\u6811\u94fe\u5256\u5206](https://www.luogu.com.cn/problem/P3384)\u4ee5\u53ca[P4315 \u6708\u4e0b\u201c\u6bdb\u666f\u6811\u201d](https://www.luogu.com.cn/problem/P4315)\u3002\n\n[\u672c\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P4949)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002\n\n\u4f60\u9700\u8981\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u4fee\u6539 \u7b2c $x$  \u6761\u8fb9\u7684\u957f\u5ea6\u4e3a $y$ \uff1b\n\n2. \u67e5\u8be2 \u70b9 $x$ \u5230\u70b9 $y$ \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u5171\u6709 $m$ \u6b21\u64cd\u4f5c\u3002\n\n---\n\n## 1.\u5206\u6790\n\n\u5982\u679c\u662f $n$ \u4e2a\u70b9 $n-1$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff08\u5c31\u662f\u4e00\u68f5\u6811\uff09\uff0c\u90a3\u4e48\u70b9 $x$ \u5230\u70b9 $y$ \u5c31**\u53ea\u6709\u4e00\u6761\u8def\u5f84**\uff0c\u76f4\u63a5\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u89e3\u51b3\u5373\u53ef\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u5c31\u65e0\u6cd5\u76f4\u63a5\u5904\u7406\uff0c\u4eff\u7167\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9 $n$ \u6761\u8fb9**\u5206\u6210\u4e24\u90e8\u5206**\uff1a\u4e00\u90e8\u5206\u662f $n-1$ \u6761\u8fb9\u5e76\u6784\u6210\u4e00\u68f5\u6811\uff08\u540e\u6587\u63d0\u5230\u7684\u6811\u90fd\u662f\u5b83\uff09\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u591a\u51fa\u7684\u90a3\u4e00\u6761\u8fb9\u3002\n\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u8bb0\u591a\u51fa\u6765\u7684\u90a3\u6761\u8fb9\u4e3a\u7b2c $k$ \u6761\uff0c\u5176\u8fb9\u6743\u4e3a $w$ \uff0c\u8fde\u63a5 $u$ \u4e0e $v$ \u4e24\u70b9\uff1b\u8bb0 $dis(x,y)$ \u4e3a\u6811\u4e0a $x,y$ \u7684\u8ddd\u79bb\uff0c $ans(x,y)$ \u4e3a\u56fe\u4e0a $x,y$ \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u64cd\u4f5c\u4e00\u5c31\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u4fee\u6539\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u6211\u4eec\u4e0d\u96be\u63a8\u51fa\u4ee5\u4e0b\u5f0f\u5b50\uff1a\n\n$$ans(x,y)=\\min(dis(x,y),dis(x,u)+w+dis(v,y),dis(x,v)+w+dis(u,y))$$\n\n$\\min$ \u51fd\u6570\u91cc\u9762\u7684\u4e09\u4e2a\u5f0f\u5b50\u4e5f\u6b63\u597d\u662f $x$ \u5230 $y$ \u7684**\u4e09\u79cd\u4e0d\u540c\u7684\u8def\u7ebf**\uff01\n\n$dis(x,y)$ \u662f $x$ \u4e0e $y$ \u7684**\u6811\u4e0a\u8ddd\u79bb**\uff08\u7eaf\u5728\u6811\u4e0a\u8d70\uff09\u3002\n\n$dis(x,u)+w+dis(v,y)$ \u662f\u4ece\u70b9 $x$ \u5728\u6811\u4e0a\u8d70\u5230 $u$\uff0c\u518d\u8d70\u8fc7\u591a\u51fa\u6765\u7684\u8fb9\uff0c\u6700\u540e\u4ece $v$ \u8d70\u5230 $y$ \u7684**\u603b\u8ddd\u79bb**\u3002\n\n$dis(x,v)+w+dis(u,y)$ \u540c\u7406\u3002\n\n## 2.\u7ec6\u8282\u5904\u7406\n\n\u5224\u65ad\u591a\u51fa\u6765\u7684\u8fb9\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5224\u65ad\uff0c\u7c7b\u4f3c\u4e8eKruskal\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\u3002\n\n\u4fee\u6539\u6811\u4e0a\u7684\u8fb9\u76f4\u63a5\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u591a\u51fa\u6765\u7684\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u3002\n\n\u5269\u4e0b\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\u4e86\\~\u3002\n\n## 3.\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define S 100010\n#define int long long\nusing namespace std;\ninline int read()\n{\n    int f=1,x=0;\n    char c=getchar();\n    while(c!='-'&&(c<'0'||c>'9')) c=getchar();\n    while(c=='-') f=-f,c=getchar();\n    while('0'<=c&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return f*x;\n}\nint n,m,a[S],b[S];\nint set[S],ans,xu,xv,w;\nint head[S],len;\nint fa[S],son[S],dep[S],size[S];\nint top[S],dfn[S],cnt;\nint seq[S];\nstruct link\n{\n    int u,v,w,nxt;\n}edge[S<<1];\ninline int find(int x)//-----------\u5e76\u67e5\u96c6---------------\n{\n    if(x==set[x]) return x;\n    return set[x]=find(set[x]);\n}\ninline void add(int u,int v,int w,bool p)\n{\n    edge[++len]=(link){u,v,w,head[u]};\n    if(p) head[u]=len;\n}\ninline void dfs1(int x,int f)\n{\n    fa[x]=f,size[x]=1,dep[x]=dep[f]+1;\n    for(int i=head[x];~i;i=edge[i].nxt)\n    {\n        int t=edge[i].v;\n        if(t==f) continue;\n        dfs1(t,x);\n        size[x]+=size[t];\n        if(size[t]>size[son[x]]) son[x]=t;\n    }\n}\ninline void dfs2(int x,int topf)\n{\n    top[x]=topf,dfn[x]=++cnt,a[cnt]=b[x];\n    if(!son[x]) return;\n    dfs2(son[x],topf);\n    for(int i=head[x];~i;i=edge[i].nxt)\n    {\n        int t=edge[i].v;\n        if(!dfn[t]) dfs2(t,t);\n    }\n}\nstruct seg//----------------\u7ebf\u6bb5\u6811----------------\n{\n    #define ls o<<1\n    #define rs o<<1|1\n    int sum[S<<2];\n    inline void pushup(int o)\n    {\n        sum[o]=sum[ls]+sum[rs];\n    }\n    inline void build(int o,int l,int r)\n    {\n        if(l==r) {sum[o]=a[l];return;}\n        int mid=(l+r)>>1;\n        build(ls,l,mid);\n        build(rs,mid+1,r);\n        pushup(o);\n    }\n    inline void update(int o,int l,int r,int x,int k)\n    {\n        if(l==r) {sum[o]=k;return;}\n        int mid=(l+r)>>1;\n        if(x<=mid) update(ls,l,mid,x,k);\n        else update(rs,mid+1,r,x,k);\n        pushup(o);\n    }\n    inline int ask(int o,int l,int r,int ql,int qr)\n    {\n        if(ql<=l&&r<=qr) return sum[o];\n        int mid=(l+r)>>1,res=0;\n        if(ql<=mid) res+=ask(ls,l,mid,ql,qr);\n        if(qr>mid) res+=ask(rs,mid+1,r,ql,qr);\n        return res;\n    }\n}c;\ninline int lca(int x,int y)\n{\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    return x;\n}\ninline int dis(int x,int y)\n{\n    int res=0,LCA=lca(x,y);\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        res+=c.ask(1,1,n,dfn[top[x]],dfn[x]);\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    res+=c.ask(1,1,n,dfn[x],dfn[y]);\n    res-=c.ask(1,1,n,dfn[LCA],dfn[LCA]);\n    return res;\n}\ninline void debug()\n{\n    for(int i=1;i<=n;i++) printf(\"%lld \",b[i]);\n    printf(\"\\n\");\n}\nsigned main()\n{\n    memset(head,-1,sizeof head);\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) set[i]=i;\n    for(int i=1;i<=n;i++)\n    {\n        int u=read(),v=read(),w=read(),p=1;\n        if(find(u)==find(v)) p=0,ans=i;//\u5e76\u67e5\u96c6\n        else set[find(u)]=find(v);//\u5e76\u67e5\u96c6\n        add(u,v,w,p),add(v,u,w,p);\n    }\n    dfs1(1,0);\n    for(int i=1;i<=n;i++)//\u8fb9\u6743\u8f6c\u70b9\u6743\n    {\n        if(i==ans)\n        {\n            seq[i]=-1;\n            xu=edge[i<<1].u;\n            xv=edge[i<<1].v;\n            w=edge[i<<1].w;\n            continue;\n        }\n        int u=edge[i<<1].u,v=edge[i<<1].v;\n        seq[i]=dep[u]>dep[v]?u:v;\n        b[seq[i]]=edge[i<<1].w;\n    }\n    dfs2(1,1);\n    c.build(1,1,n);\n    while(m--)\n    {\n        int op=read(),x=read(),y=read();\n        if(op==1)\n        {\n            if(x==ans) w=y;\n            else c.update(1,1,n,dfn[seq[x]],y);\n        }\n        else printf(\"%lld\\n\",min(dis(x,y),min(dis(x,xu)+dis(y,xv),dis(x,xv)+dis(y,xu))+w));//\u5f0f\u5b50\n    }\n    return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n```",
        "postTime": 1662905146,
        "uid": 453059,
        "name": "kbtyyds",
        "ccfLevel": 5,
        "title": "P4949 \u9898\u89e3"
    },
    {
        "content": "~~\u6211\u539f\u672c\u6b63\u5728\u627e\u6811\u5256\u9898\u505a\uff0c\u7136\u540e\u5c31\u770b\u5230\u4e86\u8fd9\u9053\u9898~~\n\n\u7136\u540e\u6211\u5c31\u4e00\u8138\u61f5\u903c\u4e86\uff0c\u8fd9TM\u4e00\u4e2a\u56fe\u600e\u4e48\u7528\u6811\u5256\uff0c\u7136\u540e\u4ed4\u7ec6\u4e00\u770b\uff1a\n\n-  \u7ed9\u51fa\u4e00\u4e2a n \u4e2a\u70b9 n \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002\n\n\u53ea\u591a\u4e86\u4e00\u6761\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u62ff\u51fa\u4e00\u6761\u591a\u4f59\u7684\u8fb9\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u8fd9\u4e2a\u62ff\u51fa\u8fb9\u7684\u64cd\u4f5c~~\u5f88\u660e\u663e~~\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u3002\n\n\u7136\u540e\u5c06\u8fb9\u6743\u538b\u5230\u70b9\u91cc\u53bb\u3002\n\n\u5bf9\u4e8e x \u5230 y\uff0c\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\n\u5047\u8bbe\u6211\u4eec\u62ff\u51fa\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f u \u548c v\u3002\n\n\u5219 x \u5230 y \u6709 3 \u79cd\u60c5\u51b5\n\n1. x -> y \uff0c\u76f4\u63a5\u6c42\u4e2a\u533a\u95f4\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n2. x -> u\uff0cu -> v\uff0cv -> y\uff0c\u6c42\u4e24\u4e2a\u533a\u95f4\u548c\u518d\u52a0\u4e00\u4e2a\u8bb0\u5f55\u4e0b\u6765\u7684\u6743\u503c\u3002\n\n3. x -> v\uff0cv -> u, u -> y,\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u5dee\u4e0d\u591a\u7684\u3002\n\n\u7b54\u6848\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002\n\n~~\u7136\u540e\u8c8c\u4f3c\u5c31\u6ca1\u6709\u4e86~~\n\n\u653e\u4e00\u4e0b\u4ee3\u7801\uff1a~~\u6211\u77e5\u9053\u4f60\u4eec\u53ea\u770b\u8fd9\u4e2a~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nconst int N = 100000 + 10;\n\ninline int read()\n{\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')res=(res<<3)+(res<<1)+(ch^48),ch=getchar();\n\treturn res;\n}\n#define fir first\n#define sec second\nint n,Q;\n\nvector <pair<int,int> > edge;\n\nstruct Edge{\n\tint next,to,w;\n}r[N<<1];\n\nint head[N],tot;\n\nvoid add(int u,int v,int w)\n{\n\tr[++tot]=(Edge){head[u],v,w};\n\thead[u]=tot;\n\tr[++tot]=(Edge){head[v],u,w};\n\thead[v]=tot;\n}\n\nint fa[N];\n\nint find(int x)\n{\n\tif(fa[x]==x)\n\t\treturn fa[x];\n\treturn fa[x]=find(fa[x]);\n}\n\nint dep[N],size[N],top[N],son[N],id[N],cnt;\n\nint a[N],b[N];\n\nvoid dfs1(int u,int father)\n{\n\tdep[u]=dep[father]+1,size[u]=1,fa[u]=father;\n\tfor(int e=head[u],v;e;e=r[e].next)\n\t{\n\t\tv=r[e].to;\n\t\tif(v==father)continue;\n\t\tdfs1(v,u),a[v]=r[e].w;\n\t\tsize[u]+=size[v];\n\t\tif(size[son[u]]<size[v])\n\t\t\tson[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int topf)\n{\n\tid[u]=++cnt;\n\ttop[u]=topf;\n\tb[cnt]=a[u];\n\tif(!son[u])\n\t\treturn ;\n\tdfs2(son[u],topf);\n\tfor(int e=head[u],v;e;e=r[e].next)\n\t{\n\t\tv=r[e].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint sum[N];\n#define lowbit(x) x&(-x)\nvoid modify(int x,int y)\n{\n\twhile(x<=n)\n\t\tsum[x]+=y,x+=lowbit(x);\n}\n\nint query(int x)\n{\n\tint res=0;\n\twhile(x>=1)\n\t\tres+=sum[x],x-=lowbit(x);\n\treturn res;\n}\n\nvoid change(int x,int y)\n{\n\tint u=dep[edge[x-1].fir]>dep[edge[x-1].sec]?edge[x-1].fir:edge[x-1].sec;\n\tmodify(id[u],y-query(id[u])+query(id[u]-1));\n}\n\nint Tquery(int x,int y)\n{\n\tint res=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tres+=query(id[x])-query(id[top[x]]-1);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tswap(x,y);\n\tres+=query(id[y])-query(id[x]);\n\treturn res;\n}\n\nint ans,ans1,ans2,lastw,last,lastu,lastv,opt,x,y;\n\nint main()\n{\n\tn=read(),Q=read();\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tfor(int i=1,u,v,w,r1,r2;i<=n;i++)\n\t{\n\t\tu=read(),v=read(),w=read();\n\t\tedge.push_back(make_pair(u,v));\n\t\tr1=find(u),r2=find(v);\n\t\tif(r1!=r2)\n\t\t\tadd(u,v,w),fa[r1]=r2;\n\t\telse last=i,lastw=w,lastu=u,lastv=v;//\u5c06\u591a\u4f59\u7684\u8fb9\u8bb0\u5f55\u4e0b\u6765\n\t}\n\tdfs1(1,0),dfs2(1,1);\n\tfor(int i=1;i<=n;i++)\n\t\tmodify(i,b[i]);\n\twhile(Q--)\n\t{\n\t\topt=read(),x=read(),y=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tif(x==last)lastw=y;\n\t\t\telse change(x,y);\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tans=Tquery(x,y);//\u60c5\u51b51\n\t\t\tans1=Tquery(x,lastu)+Tquery(y,lastv)+lastw;//\u60c5\u51b52\n\t\t\tans2=Tquery(x,lastv)+Tquery(y,lastu)+lastw;//\u60c5\u51b53\n\t\t\tprintf(\"%d\\n\",min(min(ans1,ans2),ans));\n\t\t}\t\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1576157349,
        "uid": 236021,
        "name": "C_\u65ed",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u4e00\u770b\u9898\u76ee\u4eba\u50bb\u4e86\uff1a\u52a8\u6001\u5168\u6e90\u6700\u77ed\u8def\uff1f\uff1f\u8fd9\u80fd\u505a\uff1f\uff1f\n\n\u7136\u540e\u51b7\u9759\u4e00\u4e0b\u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\u7684\u662f $n$ \u70b9 $n$ \u8fb9\u7684\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u4e5f\u5c31\u662f**\u57fa\u73af\u6811**\u3002\n\n\u5982\u679c\u662f\u666e\u901a\u7684\u6811\u76f4\u63a5\u6811\u5256\u5c31\u505a\u5b8c\u4e86\u3002\u57fa\u73af\u6811\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u68f5\u6811\u591a\u4e86\u4e00\u6761\u8fb9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u8981\u7b97\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u53ea\u9700\u8981\u8ba8\u8bba\u4e00\u4e0b\u4ed6\u4eec\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u662f\u5426\u7ecf\u8fc7\u90a3\u6761\u591a\u51fa\u6765\u7684\u8fb9\u5373\u53ef\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u968f\u4fbf\u6254\u6389\u4e00\u6761\u8fb9 $(u,v)$ \u5f97\u5230\u4e00\u68f5\u6811\uff0c\u8bbe\u5176\u8fb9\u6743\u4e3a $w$\uff0c\u5982\u679c\u8be2\u95ee\u7684\u662f $x,y$ \u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u4e0b\u9762\u4e09\u4e2a\u4e2d\u7684\u6700\u5c0f\u503c\uff1a\n\n- \u76f4\u63a5\u5728\u6811\u4e0a\u8d70\uff0c\u5373 $\\text{dist}(x,y)$\n- \u5148\u8d70\u5230 $u$\uff0c\u7ecf\u8fc7 $(u,v)$ \u518d\u8d70\u5230 $w$\uff0c\u5373 $\\text{dist}(x,u)+w+\\text{dist}(v,y)$\n- \u5148\u8d70\u5230 $v$\uff0c\u7ecf\u8fc7 $(v,u)$ \u518d\u8d70\u5230 $w$\uff0c\u5373 $\\text{dist}(x,v)+w+\\text{dist}(u,y)$\n\n\u5176\u4e2d $\\text{dist}(i,j)$ \u8868\u793a\u6254\u6389\u8fd9\u6761\u8fb9\u540e\u6811\u4e0a\u4e24\u70b9 $i,j$ \u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u8fd9\u53ef\u4ee5\u7528\u6811\u5256\u505a\u5230 $O(\\log ^2n)$ \u6c42\u503c\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u5728 $O(m\\log ^2n)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define int long long\n\n#define lson(o) (o<<1)\n#define rson(o) (o<<1|1)\n\nusing namespace std;\n\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    for(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n    for(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n    return x*f;\n}\n\nconst int MN=1e5+10;\nint n,q;\n\nstruct Edge{\n\tint to,cost;\n\tEdge(int T,int C):to(T),cost(C){}\n\tEdge(){}\n};\nvector<Edge>G[MN];\nint dep[MN],fa[MN],p[MN],dfn[MN],top[MN],sz[MN],hson[MN],tot,val[MN],wei[MN];\n\nint find(int x){return (x==p[x])?x:(p[x]=find(p[x]));}\n\nstruct SegTree{\n\t\n\tint d[MN<<2];\n\t\n\tinline void pushup(int o){\n\t\td[o]=d[lson(o)]+d[rson(o)];\n\t}\n\t\n\tinline void build(int l,int r,int o){\n\t\tif(l==r){d[o]=val[l];return ;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,lson(o));\n\t\tbuild(mid+1,r,rson(o));\n\t\tpushup(o);\n\t}\n\t\n\tinline int query(int l,int r,int ql,int qr,int o){\n\t\tif(l<=ql&&qr<=r)return d[o];\n\t\tint mid=(ql+qr)>>1,ans=0;\n\t\tif(l<=mid)ans+=query(l,r,ql,mid,lson(o));\n\t\tif(r>mid)ans+=query(l,r,mid+1,qr,rson(o));\n\t\treturn ans;\n\t}\n\t\n\tinline void modify(int pos,int k,int ql,int qr,int o){\n\t\tif(ql==qr){d[o]=k;return ;}\n\t\tint mid=(ql+qr)>>1;\n\t\tif(pos<=mid)modify(pos,k,ql,mid,lson(o));\n\t\telse modify(pos,k,mid+1,qr,rson(o));\n\t\tpushup(o);\n\t}\n\n};\n\nSegTree tree;\n\nint dfs1(int u,int de){\n\tdep[u]=de,sz[u]=1;\n\tfor(int i=0;i<G[u].size();i++){\n\t\tint v=G[u][i].to,w=G[u][i].cost;\n\t\tif(v==fa[u])continue;\n\t\tfa[v]=u,wei[v]=w,sz[u]+=dfs1(v,de+1);\n\t\tif(sz[v]>sz[hson[u]])hson[u]=v;\n\t}\n\treturn sz[u];\n}\n\nvoid dfs2(int u,int tp){\n\ttop[u]=tp,dfn[u]=++tot,val[tot]=wei[u];\n\tif(hson[u])dfs2(hson[u],tp);\n\tfor(int i=0;i<G[u].size();i++){\n\t\tint v=G[u][i].to;\n\t\tif(v!=fa[u]&&v!=hson[u])dfs2(v,v);\n\t}\n}\n\nint querysum(int x,int y){\n\tint ans=0;if(x==y)return 0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tans+=tree.query(dfn[top[x]],dfn[x],1,n,1);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tans+=tree.query(dfn[x]+1,dfn[y],1,n,1);\n\treturn ans;\n}\n\nint cu,cv,cw;\nint x[MN],y[MN];\n\nsigned main(void){\n\t\n\tn=read();q=read();\n\tfor(int i=1;i<=n;i++)p[i]=i;\n\tfor(int i=1;i<=n;i++){\n\t\tint u=read(),v=read(),w=read();x[i]=u,y[i]=v;\n\t\tint uu=find(u),vv=find(v);\n\t\tif(uu==vv)cu=u,cv=v,cw=w;\n\t\telse p[uu]=vv,G[u].push_back(Edge(v,w)),G[v].push_back(Edge(u,w));\n\t}\n\t\n\tdfs1(1,1);dfs2(1,1);\n\ttree.build(1,n,1);\n\t\n\twhile(q--){\n\t\tint op=read(),a=read(),b=read();\n\t\tif(op==1){\n\t\t\tif(x[a]==cu&&y[a]==cv){cw=b;continue;}\n\t\t\tint u=x[a],v=y[a];if(u==fa[v])swap(u,v);\n\t\t\ttree.modify(dfn[u],b,1,n,1);\n\t\t}\n\t\telse{\n\t\t\tint r=querysum(a,b);\n\t\t\tint s=querysum(a,cu)+cw+querysum(cv,b);\n\t\t\tint t=querysum(a,cv)+cw+querysum(cu,b);\n\t\t\tcout<<min(r,min(s,t))<<endl;\n\t\t}\n\t}\n\n    return 0;\n}\n```",
        "postTime": 1634823280,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "P4949 \u6700\u77ed\u8ddd\u79bb"
    },
    {
        "content": "\u524d\u8a00\uff1a\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9053\u9898\u771f\u7684\u662f\u4e00\u9053\u597d\u9898\uff0c\u5bf9\u4e8e\u6811\u5256\u548c\u6811\u4e0a\u64cd\u4f5c\u7684\u7406\u89e3\u5f88\u6709\u5e2e\u52a9\n\n### \u4e00\u3001\u9898\u610f:\n\n\u7ed9\u4f60\u4e00\u4e2a$n$\u4e2a\u70b9$n$\u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8ba9\u4f60\u6c42$x$\u70b9\u5230$y$\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u4e2d\u8fd8\u6709\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\uff1a\u4fee\u6539\u6bcf\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n### \u4e8c\u3001\u601d\u8def\n\n\u6211\u4eec\u62ff\u5230\u8fd9\u9053\u9898\u65f6\uff0c\u663e\u7136\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u68f5\u6811\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u663e\u800c\u6613\u89c1\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u628a\u52a0\u4e0a\u7684\u8fb9\u6c42\u51fa\u6765\uff1a\u8fd9\u90e8\u5206\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u5728\u60f3\uff0c\u5982\u679c\u53ea\u662f\u4e00\u68f5\u6811\u5462\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u5c31\u662f\u4e00\u4e2a\u6811\u5256\u6a21\u677f\uff08\u56e0\u4e3a\u5728\u4e00\u68f5\u6811\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u662f\u552f\u4e00\u7684\uff09\u3002\n\n\u65e2\u7136\u6211\u4eec\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u8bbe\u8fd9\u6761\u8fb9\u662f\u4eceU\u5230V\u7684\uff0c\u90a3\u4e48\u4ece$x$\u5230$y$\u7684\u6700\u77ed\u8def\u5f84\u53ea\u6709\u4e09\u79cd\u53ef\u80fd\uff1a\n\n 1.\u539f\u6765\u6811\u4e0a\u7684$x$\u5230$y$(\u6811\u5256\u7ef4\u62a4\uff09\u3002\n \n 2.$x$\u5230$U$\u7684\u8ddd\u79bb+$U$\u5230$V$\u7684\u8ddd\u79bb+$V$\u5230$y$\u7684\u8ddd\u79bb\u3002\uff08\u5206\u522b\u7528\u6811\u5256\u6c42\u4e00\u4e0b\u6811\u4e0a\u7684\u4e24\u6bb5\u8ddd\u79bb\uff09\n\n 3.$x$\u5230$V$\u7684\u8ddd\u79bb+$V$\u5230$U$\u7684\u8ddd\u79bb+$U$\u5230$y$\u7684\u8ddd\u79bb\u3002\uff08\u540c\u4e0a\uff09\n\nok\uff0c\u5927\u4f53\u601d\u8def\u5df2\u7ecf\u51fa\u6765\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u7528\u6811\u5256\u7ef4\u62a4\u8ddd\u79bb\u5462\uff1f\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u91cc\u662f\u8fb9\u6743\u548c\uff0c\u800c\u4e00\u822c\u7684\u6811\u5256\u662f\u7ef4\u62a4\u70b9\u6743\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5427\u8fb9\u6743\u4e0b\u653e\u5230\u70b9\u6743\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6811\u5256\u7ef4\u62a4\u4e86\u3002\uff08~~\u5176\u5b9e\u5c31\u662f\u6811\u5256\u6a21\u677f~~\uff09\u8fd9\u91cc\u7ef4\u62a4\u70b9\u6743\u548c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\uff0c\u5355\u70b9\u4fee\u6539\u533a\u95f4\u548c~~\u4e5f\u662f\u6a21\u677f~~\u3002\n\n### \u4e09\u3001\u4ee3\u7801\n\n\u4ee3\u7801\u7684\u7ec6\u8282\u5f88\u591a\uff0c\u6211\u4f1a\u5199\u5230\u6ce8\u91ca\u91cc\uff1a\n\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1e5+10;\nint n,m;\nint f[MAXN];//\u6ce8\u610f\u4e0d\u8981\u8ddf\u6811\u5256\u7684fa\u6570\u7ec4\u91cd\u540d\u4e86\nint find(int a){//\u5e76\u67e5\u96c6\u6a21\u677f\n\tif(f[a]==a){\n\t\treturn a;\n\t}\n\treturn f[a]=find(f[a]);\n} \nvoid merge(int x,int y){//\u5e76\u67e5\u96c6\u5408\u5e76\n\tf[find(x)]=find(y);\n}\nstruct Edge{\n\tint u,v,w,next;\n} pool[MAXN<<1];\nint head[MAXN],uu;\nvoid add(int u,int v,int w){\n\tpool[++uu].u=u;\n\tpool[uu].v=v;\n\tpool[uu].w=w;\n\tpool[uu].next=head[u];\n\thead[u]=uu;\n}\nint U,V,W,Id;//\u8fd9\u91cc\u662f\u591a\u51fa\u6765\u7684\u8fb9\u7684\u4fe1\u606f\uff0cId\u662f\u8fd9\u662f\u7b2c\u51e0\u6761\u8fb9\u3002\nint cnt;\nint val[MAXN],wt[MAXN];\nint dep[MAXN],fa[MAXN],siz[MAXN],son[MAXN];\nint top[MAXN],id[MAXN];\nvoid dfs1(int u,int father){//\u6811\u5256\u7b2c\u4e00\u6b21dfs\n\tdep[u]=dep[father]+1;\n\tfa[u]=father;\n\tsiz[u]=1;\n\tint maxson=0;\n\tfor(int i=head[u];i;i=pool[i].next){\n\t\tint v=pool[i].v;\n\t\tint w=pool[i].w;\n\t\tif(v!=father){\n\t\t\tdfs1(v,u);\n\t\t\tsiz[u]+=siz[v];\n\t\t\tval[v]=w;//\u4e0b\u653e\u5230\u70b9\u6743\n\t\t\tif(siz[v]>maxson){\n\t\t\t\tson[u]=v;\n\t\t\t\tmaxson=siz[v];\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs2(int u,int topf){//\u7b2c\u4e8c\u6b21dfs\n\ttop[u]=topf;\n\tid[u]=++cnt;//\u5efa\u7acb\u6811\u7684dfs\u5e8f\n\twt[cnt]=val[u];\n\tif(!son[u]){//\u5982\u679c\u6ca1\u6709\u91cd\u513f\u5b50\u7684\u8bdd\u5c31\u4ee3\u8868\u8fd9\u662f\u53f6\u5b50\n\t\treturn;\n\t}\n\tdfs2(son[u],topf);//\u5148\u904d\u5386\u91cd\u513f\u5b50\n\tfor(int i=head[u];i;i=pool[i].next){\n\t\tint v=pool[i].v;\n\t\tif(v!=fa[u]&&v!=son[u]){\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n}\n//\u8fd9\u91cc\u5f80\u4e0b\u662f\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\nint sum[MAXN<<2];\ninline int lc(int p){return p<<1;}\ninline int rc(int p){return p<<1|1;}\nvoid pushUp(int p){//\u66f4\u65b0\u7236\u8282\u70b9\u4fe1\u606f\n\tsum[p]=sum[lc(p)]+sum[rc(p)];\n}\nvoid build(int p,int l,int r){//\u5efa\u6811\n\tif(l==r){\n\t\tsum[p]=wt[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc(p),l,mid);\n\tbuild(rc(p),mid+1,r);\n\tpushUp(p);\n}\nvoid update(int p,int l,int r,int x,int d){//\u5355\u70b9\u4fee\u6539\n\tif(l==r){\n\t\tsum[p]=d;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid){\n\t\tupdate(lc(p),l,mid,x,d);\n\t}else{\n\t\tupdate(rc(p),mid+1,r,x,d);\n\t}\n\tpushUp(p);\n}\nint query(int p,int l,int r,int ql,int qr){//\u67e5\u8be2\u533a\u95f4\u548c\n\tif(ql<=l&&r<=qr){\n\t\treturn sum[p];\n\t}\n\tint mid=(l+r)>>1;\n\tint res=0;\n\tif(ql<=mid){\n\t\tres+=query(lc(p),l,mid,ql,qr);\n\t}\n\tif(mid<qr){\n\t\tres+=query(rc(p),mid+1,r,ql,qr); \n\t}\n\treturn res;\n}\n//\u63a5\u4e0b\u6765\u662f\u672c\u9898\u7684\u4e24\u4e2a\u64cd\u4f5c\nvoid change(int x,int y){//\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\uff08\u9700\u4fee\u6539\u4e0b\u653e\u7684\u70b9\u6743\uff09\n\tx<<=1;//\u94fe\u5f0f\u524d\u5411\u661f\u53cc\u5411\u5efa\u8fb9\uff0c\u6240\u4ee5\u4e582\n\tint u=pool[x].u;\n\tint v=pool[x].v;\n\tif(dep[u]>dep[v]){//\u4fee\u6539\u6df1\u5ea6\u5927\u7684\u70b9\n\t\tswap(u,v);\n\t}\n\tupdate(1,1,n,id[v],y);\n}\nint ask(int x,int y){//\u6811\u5256\u6c42\u4e24\u70b9\u8ddd\u79bb\n\tint res=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]){//\u522b\u5fd8\u4e86\u662ftop[x]\u548ctop[y]\u6bd4\u8f83\n\t\t\tswap(x,y);\n\t\t}\n\t\tres+=query(1,1,n,id[top[x]],id[x]);\n\t\tx=fa[top[x]];\n\t}\n\tif(x==y){//\u56e0\u4e3a\u662f\u4e0b\u653e\u70b9\u6743\uff0c\u6240\u4ee5\u4e24\u4e2a\u70b9\u7684lca\u4e0d\u7b97\u5165\u8ddd\u79bb\n\t\treturn res;\n\t}\n\tif(dep[x]>dep[y]){\n\t\tswap(x,y);\n\t}\n\tres+=query(1,1,n,id[x]+1,id[y]);//\u540c\u4e0a\uff0c\u522b\u5fd8\u4e86\u52a01\n\treturn res;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=i;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tif(find(u)!=find(v)){//\u5e76\u67e5\u96c6\u5224\u73af\n\t\t\tmerge(u,v);\n\t\t\tadd(u,v,w);\n\t\t\tadd(v,u,w);\n\t\t}else{\n\t\t\tU=u;\n\t\t\tV=v;\n\t\t\tW=w;\n\t\t\tId=i;\n\t\t\tuu+=2;//\u94fe\u5f0f\u524d\u5411\u661f\u7684uu\u8bb0\u5f97\u52a02\n\t\t}\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\twhile(m--){\n\t\tint op;\n\t\tscanf(\"%d\",&op);\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(op==1){\n\t\t\tif(x==Id){//\u5982\u679c\u662f\u52a0\u8fb9\u5c31\u8fd9\u5c4a\u4fee\u6539\n\t\t\t\tW=y;\n\t\t\t}else{\n\t\t\t\tchange(x,y);\n\t\t\t}\n\t\t}else{\n        //\u8fd9\u4e09\u884c\u5206\u522b\u662f\u90a3\u4e09\u79cd\u60c5\u51b5\n\t\t\tint ans=ask(x,y);\n\t\t\tans=min(ans,ask(x,U)+W+ask(V,y));\n\t\t\tans=min(ans,ask(x,V)+W+ask(U,y));\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;//\u5b8c\u7ed3\u6492\u82b1\n}\n```\n\n\u603b\u4e4b\uff0c\u8fd9\u9053\u9898\u4e0d\u662f\u5f88\u96be\u60f3\uff0c\u4e0d\u8fc7\u4ee3\u7801\u7684\u7ec6\u8282\u4e00\u5b9a\u8981\u5904\u7406\u597d\uff0cqwq\n",
        "postTime": 1605323305,
        "uid": 219668,
        "name": "zhanghzqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": " #### \u672c\u4f53\u662f\u4e00\u9053\u57fa\u73af\u6811\u548c\u6811\u94fe\u5256\u5206\u7684\u9898\uff0c\u53ef\u4ee5\u5148\u66b4\u529b\u627e\u73af\uff0c\u7136\u540e\u518d\u5c06\u73af\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u5176\u4ed6\u90e8\u5206\u7528\u6811\u5256\u7ef4\u62a4\u5373\u53ef\u3002\n![\u5982\u56fe](https://cdn.luogu.com.cn/upload/pic/59390.png)\n#### \u5982\u56fe\u5148\u627e\u5230\u73af1 - 2 - 3 - 4\uff0c\u6bd4\u5982\u627e1 - 6\u8ddd\u79bb\uff0c\u5148\u627e\u52306\u7684\u68394\u548c1\u7684\u68391\uff0c\u7528\u6811\u5256\u7b97\u51fa\u8ddd\u79bb\u4e4b\u548c\uff0c\u518d\u7528\u6811\u72b6\u6570\u7ec4\u7b97\u51fa1 - 2 - 4\u4e0e1 - 3 - 4\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\uff0c\u5373\u53ef\u5feb\u901f\u6c42\u51fa\u7b54\u6848\u3002(\u6811\u8fb9\u957f\u5ea6\u5ffd\u7565\uff09\n#### \u4e0b\u9762\u7c98\u8d34\u9898\u89e3\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nint n,m,t;\nconst int N=3e5+50;\n//\u5efa\u56fe \nint s[N<<1],sl[N<<1],len[N<<1];\nint gx[N],gy[N],gt[N],f;\nvoid addline(int x,int y,int z){\n    s[++t]=y;\n    sl[t]=sl[x];\n    sl[x]=t;\n    len[t]=z;\n    s[++t]=x;\n    sl[t]=sl[y];\n    sl[y]=t;\n    len[t]=z;\n    return;\n}\n// \u627e\u73af \nbool book[N];\nint d[N<<1],dl[N<<1],q,q1,root[N],bood[N],deep[N];\nint rof[N],r;\nvoid bfs(int x){\n    int j1,j2;\n    q=0;q1=0;book[x]=1;deep[x]=1;\n    d[++q]=x;dl[q]=0;bood[x]=q;\n    while(q1<q){\n        int u=d[++q1],u1=deep[u];\n        for(int i=sl[u];i;i=sl[i]){\n            int de=s[i];\n            if(de==d[dl[bood[u]]]) continue;\n            //cout<<de<<\" \"<<u<<endl;\n            if(!book[de]){\n                book[de]=1;d[++q]=de;\n                dl[q]=q1;bood[de]=q;\n                deep[de]=u1+1;\n            }\n            else{\n                j1=u;j2=de;\n                if(root[u]!=u)\n                root[u]=u,rof[++r]=u;\n                if(root[de]!=de)\n                root[de]=de,rof[++r]=de;\n                if(deep[j1]<deep[j2]) swap(j1,j2);\n                while(deep[j1]!=deep[j2]){\n                \tint f1=bood[j1];\n                \tf1=dl[f1];\n                \tj1=d[f1];\n                \tif(root[j1]!=j1)\n                \troot[j1]=j1,rof[++r]=j1;\n                }\n                while(j1!=j2){\n                    int f1=bood[j1],f2=bood[j2];\n                    f1=dl[f1],f2=dl[f2];\n                    j1=d[f1],j2=d[f2];\n                    if(root[j1]!=j1)\n                    root[j1]=j1,rof[++r]=j1;\n                    if(root[j2]!=j2)\n                    root[j2]=j2,rof[++r]=j2;\n                } \n                return;\n            }\n        }\n    }\n    return;\n}\n//\u5efa\u6811\nint num[N],fa[N],son[N],siz[N],dep[N],top[N],cnt;\nint a[N<<2],tag[N<<2],w[N],wt[N]; \nint root1;\nvoid dfs1(int x,int y,int dd){\n    fa[x]=y;dep[x]=dd;siz[x]=1;root[x]=root1;\n    int ms=-1;\n    for(int i=sl[x];i;i=sl[i]){\n        int de=s[i];\n        if(root[de]!=0) continue;\n        w[de]=len[i];\n        dfs1(de,x,dd+1);\n        siz[x]+=siz[de];\n        if(ms<siz[de]){\n            ms=siz[de];son[x]=de;\n        }\n    }\n    return;\n}\nvoid dfs2(int x,int topp){\n    top[x]=topp;num[x]=++cnt;wt[cnt]=w[x];\n    if(!son[x]) return;\n    dfs2(son[x],topp);\n    for(int i=sl[x];i;i=sl[i]){\n        int de=s[i];\n        if(root[de]!=root1||de==fa[x]||de==son[x]) continue;\n        dfs2(de,de);\n    }\n    return;\n}\nvoid build(int l,int r,int p){\n    if(l>r) return;\n    if(l==r){\n        a[p]=wt[l];\n        return;\n    }\n    int mid=(l+r)/2;\n    build(l,mid,p*2);\n    build(mid+1,r,p*2+1);\n    a[p]=a[p*2]+a[p*2+1];\n    return;\n}\n//\u5efa\u6811\u72b6\u6570\u7ec4\nint tree[N<<2],sround[N],g,ysh,yhs[N<<2];\nint par[N];\nint lowbit(int x){return x&(-1*x);}\nvoid add(int x,int y){\n    tree[x]+=y;\n    while(x<=r*2){\n        x+=lowbit(x);\n        tree[x]+=y;\n    }\n    return;\n}\nvoid bfs1(int x){\n    memset(book,0,sizeof book);\n    q=0;q1=0;d[++q]=x;\n    sround[++g]=x;book[x]=1;\n    int u;\n    while(q1<q){\n        u=d[++q1];\n        for(int i=sl[u];i;i=sl[i]){\n            int de=s[i];\n            if(root[de]==de&&!book[de]){\n                add(++ysh,len[i]);\n                add(ysh+r,len[i]);\n                yhs[u]=ysh;par[de]=u;\n                d[++q]=de;sround[++g]=de;book[de]=1;\n                break;\n            }\n        }\n    }\n    for(int i=sl[u];i;i=sl[i]){\n        int de=s[i];\n        if(de==d[1]){\n            add(++ysh,len[i]);\n            add(ysh+r,len[i]);\n            yhs[u]=ysh;par[d[1]]=u;\n        }\n    }\n    return;\n}\n//opt=1\nvoid pushdown(int p,int rr){\n    tag[p*2]+=tag[p];\n    tag[p*2+1]+=tag[p];\n    a[p*2]+=tag[p]*(rr-(rr/2));\n    a[p*2+1]+=tag[p]*(rr/2);\n    tag[p]=0;\n    return;\n}\nvoid update(int p,int l,int r,int L,int R,int k){\n    if(L<=l&&R>=r){\n        tag[p]+=k;\n        a[p]+=k*(r-l+1);\n        return;\n    }\n    if(tag[p]) pushdown(p,r-l+1);\n    int mid=(l+r)/2;\n    if(L<=mid) update(p*2,l,mid,L,R,k);\n    if(R>mid) update(p*2+1,mid+1,r,L,R,k);\n    a[p]=a[p*2]+a[p*2+1];\n    return;\n}\n//opt=2\nint res;\nvoid quary(int p,int l,int r,int L,int R){\n    if(L<=l&&R>=r){\n        res+=a[p];return;\n    }\n    if(tag[p]) pushdown(p,r-l+1);\n    int mid=(l+r)/2;\n    if(L<=mid) quary(p*2,l,mid,L,R);\n    if(R>mid) quary(p*2+1,mid+1,r,L,R);\n    return;\n}\nint sum(int x,int y){\n    int ans=0;\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        res=0;\n        quary(1,1,n,num[top[x]],num[x]);ans+=res;\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    res=0;\n    quary(1,1,n,num[x]+1,num[y]);\n    ans+=res;\n    return ans;\n}\nint sum1(int x){\n    int ans=0;\n    while(x>0){\n        ans+=tree[x];\n        x-=lowbit(x);\n    }\n    return ans;\n} \nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int suml;\n    int i,x,y,z,opt,dx,dy,dt,cha;t=n;\n    for(i=1;i<=n;++i){\n        s[i]=i;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        gx[++f]=x;gy[f]=y;gt[f]=t+1;\n        addline(x,y,z);\n    }\n    bfs(1);\n    for(i=1;i<=r;++i){\n        root1=rof[i];\n        dfs1(rof[i],0,1);\n        dfs2(rof[i],rof[i]);\n    }\n    \n    build(1,cnt,1);\n    bfs1(rof[1]);\n    while(m--){\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        if(opt==1){\n            dx=gx[x];dy=gy[x];dt=gt[x];\n            cha=y-len[dt];\n            len[dt]=y;len[dt+1]=y;\n            if(root[dx]==dx&&root[dy]==dy){\n                dx=yhs[dx];dy=yhs[dy];\n                if(dx>dy) swap(dx,dy);\n                if(dx==1&&dy==g){\n                \tadd(dy,cha);\n                \tadd(dy+r,cha);\n                }\n                else{\n                    add(dx,cha);\n                    add(dx+r,cha);\n                }\n            }\n            else{\n                if(fa[dx]==dy){\n                    update(1,1,n,num[dx],num[dx],cha);\n                }\n                else{\n                    update(1,1,n,num[dy],num[dy],cha);\n                }\n            }\n        }\n        else{\n            suml=0;\n            if(root[x]==root[y]){\n                suml+=sum(x,y);\n            }\n            else{\n                suml+=sum(root[x],x)+sum(root[y],y);\n            \tdx=yhs[root[x]];dy=yhs[root[y]];\n              \tif(dx>dy) swap(dx,dy);\n              \t//cout<<dx<<\" \"<<dy<<endl;\n             \tsuml+=min((sum1(dy-1)-sum1(dx-1)),(sum1(dx+r-1)-sum1(dy-1)));\n            }\n            \n            printf(\"%d\\n\",suml);\n        }\n    }\n    return 0;\n } \n```\n#### \u795d\u5927\u5bb6AC\u6109\u5feb\uff01\uff01\uff01",
        "postTime": 1558750614,
        "uid": 70142,
        "name": "\u51b0\u971c_\u51ef\u6492",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u4eba\u6240\u4ee5\u5c31\u6765\u4e86 \u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u554a233333\n\u57fa\u672c\u5c31\u662f\u88f8\u7684\u6811\u94fe\u5256\u5206\uff0c\u552f\u4e00\u7684\u95ee\u9898\u5728\u4e8e\u591a\u4e86\u4e00\u6761\u8fb9\n\u8fd8\u597d\u53ea\u591a\u4e86\u4e00\u6761\uff0c\u4e8e\u662f\u628a\u8fd9\u6761\u8fb9\u5148\u62ff\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u8fb9\u7ec4\u6210\u4e00\u68f5\u6811\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u5728\u6811\u4e0a\u6216\u8005\u5355\u72ec\u7684\u8fd9\u6761\u8fb9\u4e0a\u76f4\u63a5\u4fee\u6539\u5c31\u53ef\u4ee5\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u8003\u8651\u6700\u77ed\u8def\u5f84\u662f\u5426\u901a\u8fc7\u5355\u72ec\u7684\u8fd9\u6761\u8fb9\n\u4e8e\u662f\u53ef\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u4e0d\u7ecf\u8fc7\u5355\u72ec\u8fd9\u6761\u8fb9\u76f4\u63a5\u5728\u6811\u4e0a\u505a\uff0c\u53e6\u4e00\u79cd\u662f\u4e00\u5b9a\u8fc7\u8fd9\u6761\u8fb9\uff0c\u4e8e\u662f\u8def\u5f84\u4e3a\u5355\u72ec\u8fb9\u7684\u957f\u5ea6\u52a0\u4e0a\u5355\u72ec\u8fb9\u7684\u4e24\u70b9\u5206\u522b\u5230\u76ee\u6807\u4e24\u70b9\u7684\u8ddd\u79bb\n\u8fb9\u6743\u5b58\u4e3a\u70b9\u6743\u7684\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879\u8fd9\u91cc\u5c31\u4e0d\u518d\u8ba8\u8bba\u4e86 \u795d\u5927\u5bb6AC\u6109\u5feb\uff01\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<vector>\n#include<set>\n#include<map>\n#include<stack>\n#include<queue>\n#include<time.h>\n#include<climits>\nusing namespace std;\n#define fi first\n#define se second\n#define fio ios::sync_with_stdio(false);cin.tie(0)\n#define pb push_back\n#define Max(x,y) (x>y?x:y)\n#define Min(x,y) (x<y?x:y)\n#define ls (rt<<1)\n#define rs (rt<<1|1)\ntypedef long long LL;\ntypedef unsigned long long uLL;\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e5 + 10;\nconst int MOD = 1e9 + 7;\nconst double pi = acos(-1.0);\nLL read()\n{\n    LL x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint gcd(int a, int b)\n{\n\treturn b?gcd(b,a%b):a;\n}\nint N,M;\nint head[MAXN];\nstruct node\n{\n\tint to,nxt;\n\tint w;\n}e[MAXN<<1];\nint all;\nvoid add(int a, int b, int w)\n{\n\te[all].to=b;\n\te[all].nxt=head[a];\n\te[all].w=w;\n\thead[a]=all++;\n}\nint fa[MAXN];\nint find(int x)\n{\n\tif(fa[x]==x)\treturn x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid Union(int a, int b)\n{\n\tint ra=find(a), rb=find(b);\n\tif(ra==rb)\treturn ;\n\tfa[ra]=rb;\n}\nint f[MAXN],d[MAXN],size[MAXN],son[MAXN],rk[MAXN],top[MAXN],id[MAXN];\nint cnt;\nint val[MAXN];\nvoid dfs1(int u, int pre, int dep)\n{\n\tf[u]=pre;\n\td[u]=dep;\n\tsize[u]=1;\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==pre)\tcontinue;\n\t\tdfs1(v,u,dep+1);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\nvoid dfs2(int u, int t)\n{\n\ttop[u]=t;\n\tid[u]=++cnt;\n\trk[cnt]=u;\n\tif(!son[u])\n\t\treturn ;\n\tdfs2(son[u],t);\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v!=son[u]&&v!=f[u])\n\t\t\tdfs2(v,v);\n\t}\n}\nvoid Dfs(int u, int pre)\n{\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tint w=e[i].w;\n\t\tif(v==pre)\tcontinue;\n\t\tval[v]=w;\n\t\tDfs(v,u);\n\t}\n}\nint c[MAXN];\nint lowbit(int x)\n{\n\treturn x & (-x);\n}\nint query(int x)\n{\n\tint res = 0;\n\twhile(x>0)\n\t{\n\t\tres+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}\nvoid modify(int x, int v)\n{\n\twhile(x <= N)\n\t{\n\t\tc[x]+=v;\n\t\tx+=lowbit(x);\n\t}\n}\nint ran[MAXN<<2],deep[MAXN<<2],first[MAXN<<2],_pow[25],tot=1,dp[MAXN<<2][20],dep[MAXN<<2];\nvoid dfs(int u, int pre)\n{\n\tran[tot++]=u;\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==pre)\tcontinue;\n\t\tdeep[v]=deep[u]+1;\n\t\tdfs(v,u);\n\t\tran[tot++]=u;\n\t}\n}\nvoid ST(int len)\n{\n\tint K = (int)(log((double)len) / log(2.0));\n\tfor(int i=1;i<=len;i++)\n\t\tdp[i][0]=i;\n\tfor(int j=1;j<=K;j++)\n\t\tfor(int i=1;i+_pow[j]-1<=len;i++)\n\t\t{\n\t\t\tint a = dp[i][j-1], b=dp[i+_pow[j-1]][j-1];\n\t\t\tif(dep[a]<dep[b])\tdp[i][j]=a;\n\t\t\telse\tdp[i][j]=b;\n\t\t}\n}\nint RMQ(int x, int y)\n{\n\tint K = (int)(log((double)(y-x+1))/log(2.0));\n\tint a=dp[x][K], b=dp[y-_pow[K]+1][K];\n\tif(dep[a]<dep[b])\treturn a;\n\telse\treturn b;\n}\nint LCA(int u, int v)\n{\n\tint x=first[u],y=first[v];\n\tif(x>y)\tswap(x,y);\n\tint res=RMQ(x,y);\n\treturn ran[res];\n}\nvoid change(int x, int y)\n{\n\tint l1=2*x-1,l2=2*x-2;\n\tint a=e[l1].to;\n\tint b=e[l2].to;\n\tint v=d[a]<d[b]?b:a;\n\tint now=query(id[v])-query(id[v]-1);\n\tmodify(id[v],y-now);\n}\nint sum(int x, int y)\n{\n\tint p=LCA(x,y);\n\tint save=query(id[p])-query(id[p]-1);\n\tint ans=0,fx=top[x],fy=top[y];\n\twhile(fx!=fy)\n\t{\n\t\tif(d[fx]>=d[fy])\n\t\t{\n\t\t\tans+=query(id[x])-query(id[fx]-1);\n\t\t\tx=f[fx],fx=top[x];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans+=query(id[y])-query(id[fy]-1);\n\t\t\ty=f[fy],fy=top[y];\n\t\t}\n\t}\n\tif(id[x]<=id[y])\n\t\tans+=query(id[y])-query(id[x]-1);\n\telse\n\t\tans+=query(id[x])-query(id[y]-1);\n\treturn ans-save;\n}\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tfor(int i=1;i<=N;i++)\n\t\tfa[i]=i;\n\tmemset(first,-1,sizeof(first));\n\t_pow[0]=1;\n\tfor(int i=1;i<=20;i++)\n\t\t_pow[i]=_pow[i-1]<<1;\n}\nvoid solve()\n{\n\tint ex,ey,ew,ei;\n\tscanf(\"%d%d\",&N,&M);\n\tinit();\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tint x,y,w;\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\tif(find(x)!=find(y))\n\t\t{\n\t\t\tadd(x,y,w);add(y,x,w);\n\t\t\tUnion(x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tex=x;ey=y;ew=w;ei=i;\n\t\t\tall++;all++;\n\t\t}\n\t}\n\tDfs(1,-1);\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tdfs(1,-1);\n\tfor(int i=1;i<tot;i++)\n\t\tdep[i]=deep[ran[i]];\n\tfor(int i=1;i<tot;i++)\n\t{\n\t\tif(first[ran[i]]==-1)\n\t\t\tfirst[ran[i]]=i;\n\t}\n\tST(2*N-1);\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tmodify(i,val[rk[i]]);\n\t}\n\tint op;\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1)\n\t\t{\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(x==ei)\n\t\t\t{\n\t\t\t\tew=y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchange(x,y);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tint ans=sum(x,y);\n\t\t\tans=min(ans,ew+sum(x,ex)+sum(y,ey));\n\t\t\tans=min(ans,ew+sum(x,ey)+sum(y,ex));\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\nint main()\n{\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1540570107,
        "uid": 88746,
        "name": "\u9646\u62fe\u91cc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u8fb9\u70b9\u6570\u91cf\u76f8\u540c\u7684\u8fde\u901a\u56fe\uff0c\u90a3\u663e\u7136\u5c31\u662f\u57fa\u73af\u6811\u3002  \n\u5982\u679c\u662f\u5728\u6811\u4e0a\u7684\u8bdd\uff0c\u90a3\u4e48\u8def\u5f84\u663e\u7136\u53ea\u6709\u4e00\u6761\uff0c\u52a0\u4e0a\u5e26\u6539\u53ef\u4ee5\u6811\u5256\u505a\u3002\u8fd9\u91cc\u53c2\u89c1 [P1505](\\problem\\P1505)\u3002  \n\u7136\u800c\u73b0\u5728\u662f\u57fa\u73af\u6811\uff0c\u6ca1\u6cd5\u6811\u5256\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u628a\u73af\u4e0a\u4e00\u6761\u8fb9\u62c6\u4e0b\u6765\uff0c\u5206\u6bb5\u8003\u8651\u3002\u5047\u8bbe\u62c6\u51fa\u6765\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a $x,y$\uff0c\u8fb9\u6743\u4e3a $z$\uff0c\u90a3\u4e48 $u,v$ \u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u4e3a\uff1a\n$$\\min\\{\\operatorname{dis}(u,v),\\operatorname{dis}(u,x)+\\operatorname{dis}(y,v)+z,\\operatorname{dis}(u,y)+\\operatorname{dis}(x,v)+z\\}$$\n\u62c6\u8fb9\u7528\u5e76\u67e5\u96c6\u641e\u4e00\u641e\u3002  \n# AC \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 2e5 + 10;\n\nconst int inf = ~0u >> 1;\n\nstruct edge {\n\tint v, w, nxt;\n} e[MAXN << 1];\n\nint head[MAXN], tot;\n\ninline \nvoid add(int u, int v, int w) {\n\te[++tot] = { v, w, head[u] }, head[u] = tot;\n}\n\nstruct pos {\n\tint u, v;\n} a[MAXN];\n\nint dep[MAXN], fa[MAXN], size[MAXN], tv[MAXN], son[MAXN];\nint top[MAXN], id[MAXN], rev[MAXN], val[MAXN], cnt;\n\nvoid dfs1(int u, int f) {\n\tdep[u] = dep[f] + 1, fa[u] = f, size[u] = 1;\n\tfor (int i = head[u], v; i; i = e[i].nxt) {\n\t\tv = e[i].v;\n\t\tif (v == f) continue;\n\t\tdfs1(v, u);\n\t\ttv[v] = e[i].w, size[u] += size[v];\n\t\tif (size[son[u]] < size[v]) son[u] = v;\n\t}\n}\n\nvoid dfs2(int u, int t) {\n\ttop[u] = t, id[u] = ++cnt, rev[cnt] = u, val[cnt] = tv[u];\n\tif (son[u]) dfs2(son[u], t);\n\tfor (int i = head[u], v; i; i = e[i].nxt) {\n\t\tv = e[i].v;\n\t\tif (v == fa[u] || v == son[u]) continue;\n\t\tdfs2(v, v);\n\t}\n}\n\nstruct node {\n\tint l, r, sum;\n} t[MAXN << 2];\n\ninline \nvoid pushup(int p) {\n\tt[p].sum = t[p << 1].sum + t[p << 1 | 1].sum;\n}\n\ninline \nvoid build(int l, int r, int p) {\n\tt[p].l = l, t[p].r = r;\n\tif (l == r) return t[p].sum = val[l], void();\n\tint mid = l + r >> 1;\n\tbuild(l, mid, p << 1), build(mid + 1, r, p << 1 | 1);\n\tpushup(p);\n}\n\ninline \nvoid change(int x, int k, int p) {\n\tif (t[p].l == t[p].r) return t[p].sum = k, void(0);\n\tint mid = t[p].l + t[p].r >> 1;\n\tchange(x, k, p << 1 | (x > mid));\n\tpushup(p);\n}\n\ninline \nint query(int l, int r, int p) {\n\tif (l <= t[p].l && t[p].r <= r) return t[p].sum;\n\tint mid = t[p].l + t[p].r >> 1, res = 0;\n\tif (l <= mid) res += query(l, r, p << 1);\n\tif (r > mid) res += query(l, r, p << 1 | 1);\n\treturn res;\n}\n\ninline \nint sum(int x, int y) {\n\tint res = 0;\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tres += query(id[top[x]], id[x], 1);\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) swap(x, y);\n\tif (x != y) res += query(id[x] + 1, id[y], 1);\n\treturn res;\n}\n\nint f[MAXN];\n\nint find(int k) {\n\treturn k == f[k] ? k : f[k] = find(f[k]);\n}\n\nbool merge(int x, int y) {\n\treturn (x = find(x)) ^ (y = find(y)) ? f[x] = y : 0; \n}\n\nint n, m, p;\n\nint u[MAXN], v[MAXN], w[MAXN];\n\nint opt, x, y;\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; i++) f[i] = i;\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d%d%d\", &u[i], &v[i], &w[i]);\n\t\tif (!p && !merge(u[i], v[i])) p = i;\n\t\telse add(u[i], v[i], w[i]), add(v[i], u[i], w[i]);\n\t}\t\n\tdfs1(1, 0), dfs2(1, 1), build(1, n, 1);\n\twhile (m--) {\n\t\tscanf(\"%d%d%d\", &opt, &x, &y);\n\t\tif (opt == 1) {\n\t\t\tif (x == p) w[p] = y;\n\t\t\telse change(id[dep[u[x]] > dep[v[x]] ? u[x] : v[x]], y, 1);\n\t\t} else printf(\"%d\\n\", min({ sum(x, y), sum(x, u[p]) + sum(v[p], y) + w[p], sum(x, v[p]) + sum(u[p], y) + w[p] }));\n\t}\n}\n```",
        "postTime": 1665118042,
        "uid": 406941,
        "name": "Register_int",
        "ccfLevel": 6,
        "title": "P4949 \u9898\u89e3"
    },
    {
        "content": "\u9898\u76ee\u5f88\u7b80\u6d01\u4e86\uff0c\u652f\u6301\u57fa\u73af\u6811\u4e0a\u4fee\u6539\u8fb9\u6743\u548c\u67e5\u8be2\u4e24\u70b9\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bd5\u7740\u65ad\u5f00\u4e00\u6761\u5728\u73af\u4e0a\u7684\u8fb9\uff0c\u5bf9\u4e8e\u8fd9\u6761\u8fb9\u5355\u72ec\u7ef4\u62a4\u6743\u503c\uff0c\u5269\u4e0b\u7684\u5c31\u53ef\u4ee5\u7b80\u5355\u6811\u5256\u5904\u7406\u4e86\u3002\n\n\u6211\u628a\u8fd9\u6761\u8fb9\u53eb\u505a\u201c\u7981\u8fb9\u201d\u3002\n\n\u6211\u4eec\u5148\u62d3\u6251\u6392\u5e8f\u6c42\u51fa\u6240\u6709\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u5c31\u662f\u6700\u540e\u5ea6\u6570\u591a\u4e8e1\u7684\u70b9\uff0c\u7136\u540e\u968f\u4fbf\u627e\u51fa\u4e00\u6761\u4e24\u7aef\u90fd\u5728\u73af\u4e0a\u7684\u8fb9\u5f53\u505a\u7981\u8fb9\uff0c\u518d\u968f\u4fbf\u627e\u51fa\u4e00\u4e2a\u5728\u73af\u4e0a\u7684\u70b9\u5f53\u505a\u6811\u6839\u3002\n\n\u4fee\u6539\uff1a\n\n\u5f53\u4fee\u6539\u7684\u662f\u7981\u8fb9\u65f6\uff0c\u6211\u4eec\u76f4\u63a5\u8fdb\u884c\u8d4b\u503c\uff0c\u5426\u5219\u5c31\u662f\u8001\u5957\u8def\uff0c\u628a\u8fb9\u6743\u8f6c\u5316\u6210\u8fd9\u6761\u8fb9\u4e24\u7aef\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u7684\u70b9\u6743\uff0c\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u4fee\u6539\u8fb9\u6743\u5c31\u662f\u770b\u8fd9\u6761\u8fb9\u4e24\u7aef\u54ea\u4e2a\u70b9\u6df1\u5ea6\u8f83\u5927\uff0c\u5355\u70b9\u52a0\u4e0a\u5f53\u524d\u7ed9\u51fa\u7684\u8fb9\u6743\u548c\u539f\u6765\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u7684\u5dee\u503c\u3002\n\n\u67e5\u8be2\uff1a\n\n\u6211\u4eec\u8bbe $rt_i$ \u8868\u793a $i$ \u70b9\u7956\u5148\u4e2d\u7b2c\u4e00\u4e2a\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5728\u62d3\u6251\u65f6\u987a\u4fbf\u6c42\u51fa\u3002\n\n\u5f53\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u7684 $rt$ \u76f8\u540c\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u6811\u5256\u67e5\u8be2\u5373\u53ef\u3002\n\n\u5426\u5219\u6211\u4eec\u5206\u6700\u77ed\u8def\u7ecf\u8fc7\u7981\u8fb9\u548c\u4e0d\u7ecf\u8fc7\u7981\u8fb9\u8fdb\u884c\u8ba8\u8bba\uff1a\n\n\u5982\u679c\u4e0d\u7ecf\u8fc7\u7981\u8fb9\uff0c\u90a3\u4e48\u4e24\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u5b83\u4eec\u5230\u81ea\u5df1 $rt$ \u7684\u8ddd\u79bb\u52a0\u4e0a\u8fd9\u4e24\u4e2a $rt$ \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5426\u5219\u5c31\u662f\u5b83\u4eec\u5230\u81ea\u5df1 $rt$ \u7684\u8ddd\u79bb\u52a0\u4e0a\u6574\u4e2a\u73af\u7684\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e24\u4e2a $rt$ \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u524d\u8005\u5f88\u597d\u6c42\uff0c\u5206\u4e09\u90e8\u5206\u6811\u5256\uff0c\u540e\u8005\u4e2d\u7684\u201c\u6574\u4e2a\u73af\u7684\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e24\u4e2a $rt$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u201d\u53ef\u4ee5\u8f6c\u5316\u6210\u7981\u8fb9\u4e24\u4e2a\u7aef\u70b9\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\u51cf\u53bb\u51cf\u53bb\u8fd9\u4e24\u4e2a $rt$ \u4e4b\u95f4\u7684\u8ddd\u79bb\u518d\u52a0\u4e0a\u7981\u8fb9\u957f\u5ea6\u3002\u4e24\u8005\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6700\u8fd1\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u88ab\u5361\u5e38\u81ea\u95ed\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u7684\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u5e38\u6570\u6781\u5c0f\uff0c\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u4e2a\uff0c\u6bd4\u7b2c\u4e8c\u540d\u5feb\u4e86\u4e00\u500dqwq\n\n## Code\n```cpp\n#include<cstring>\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nnamespace EMT{\n\ttypedef long long ll;typedef double db;//(double)clock() / (double)CLOCKS_PER_SEC;\n\t#define pf printf\n\t#define F(i,a,b) for(int i=a;i<=b;i++)\n\t#define D(i,a,b) for(int i=a;i>=b;i--)\n\tinline int read(){int x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();return x*f;}\n\tinline void file(){auto it=freopen(\"in.in\",\"r\",stdin);it=freopen(\"my.out\",\"w\",stdout);it++;}\n\tinline int max(int a,int b){return a>b?a:b;}inline int min(int a,int b){return a<b?a:b;}\n\tinline void pi(int x){pf(\"%d \",x);}inline void pn(){pf(\"\\n\");}\n\tconst int N=1e5+10;\n\tint top[N],dfn[N],ti,siz[N],son[N],fa[N],n,m,in[N],co=1,head[N],rt[N],ban,deep[N],val[N],Rt,vv;\n\tstruct node{int next,to,w;}e[N<<1];\n\tinline void add(int next,int to,int w){e[++co]=(node){head[next],to,w},head[next]=co;}\n\tinline void toposort(){\n\t\tstatic int q[N],hd=1,tl;\n\t\tF(i,1,n)if(in[i]==1)q[++tl]=i;\n\t\twhile(hd<=tl){\n\t\t\tint x=q[hd++];\n\t\t\tfor(int i=head[x];i;i=e[i].next){\n\t\t\t\tint j=e[i].to;\n\t\t\t\tif(in[j]>1){\n\t\t\t\t\tin[j]--;\n\t\t\t\t\tif(in[j]==1)q[++tl]=j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tF(i,1,n)if(in[i]>1)rt[i]=i;\n\t\tF(i,1,n)if(rt[i]==i){\n\t\t\tq[hd=tl=1]=i;\n\t\t\twhile(hd<=tl){\n\t\t\t\tint x=q[hd++];\n\t\t\t\tfor(int I=head[x];I;I=e[I].next){\n\t\t\t\t\tint j=e[I].to;if(rt[j])continue;\n\t\t\t\t\trt[j]=rt[x];q[++tl]=j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!ban){\n\t\t\t\tfor(int I=head[i];I;I=e[I].next){\n\t\t\t\t\tint j=e[I].to;if(rt[j]==j){\n\t\t\t\t\t\tban=I;break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}if(!Rt)Rt=i;\n\t\t}\n\t}\n\tinline void dfs1(int k,int f){\n\t\tsiz[k]=1;\n\t\tfor(int i=head[k],j;i;i=e[i].next)if((j=e[i].to)!=f&&i!=ban&&i!=(ban^1)){\n\t\t\tfa[j]=k,deep[j]=deep[k]+1,val[j]=e[i].w;\n\t\t\tdfs1(j,k);siz[k]+=siz[j];\n\t\t\tif(siz[son[k]]<siz[j])son[k]=j;\n\t\t}\n\t}\n\tinline void dfs2(int k,int tp){\n\t\ttop[k]=tp;dfn[k]=++ti;\n\t\tif(!son[k])return;\n\t\tdfs2(son[k],tp);\n\t\tfor(int i=head[k];i;i=e[i].next)if(e[i].to!=fa[k]&&e[i].to!=son[k]&&i!=ban&&i!=(ban^1))dfs2(e[i].to,e[i].to);\n\t}\n\tstruct BIT{\n\t\tint t[N];\n\t\tinline void add(int x,int v){while(x<=n)t[x]+=v,x+=x&-x;}\n\t\tinline int ask(int x){int ans=0;while(x)ans+=t[x],x-=x&-x;return ans;}\n\t\tinline int ask(int l,int r){return ask(r)-ask(l-1);}\n\t}bit;\n\tinline int ask(int x,int y){\n\t\tint ans=0;\n\t\twhile(top[x]!=top[y])if(deep[top[x]]>=deep[top[y]])ans+=bit.ask(dfn[top[x]],dfn[x]),x=fa[top[x]];\n\t\telse ans+=bit.ask(dfn[top[y]],dfn[y]),y=fa[top[y]];\n\t\tif(deep[x]<=deep[y])ans+=bit.ask(dfn[x]+1,dfn[y]);\n\t\telse ans+=bit.ask(dfn[y]+1,dfn[x]);\n\t\treturn ans;\n\t}\n\tinline short main(){\n\t\t// file();\n\t\tn=read(),m=read();\n\t\tF(i,1,n){int x=read(),y=read(),z=read();in[x]++,in[y]++;add(x,y,z),add(y,x,z);}\n\t\ttoposort();\n\t\tdfs1(Rt,0);dfs2(Rt,Rt);\n\t\tF(i,1,n)bit.add(dfn[i],val[i]);\n\t\tvv=ask(e[ban].to,e[ban^1].to);\n\t\twhile(m--){\n\t\t\tint opt=read();\n\t\t\tif(opt==1){\n\t\t\t\tint x=read(),y=read();\n\t\t\t\tif(x*2==ban||x*2==(ban^1)){\n\t\t\t\t\te[ban].w=y;\n\t\t\t\t}else{\n\t\t\t\t\tint id=x*2;\n\t\t\t\t\tif(deep[e[id].to]<deep[e[id^1].to])id^=1;\n\t\t\t\t\tbit.add(dfn[e[id].to],y-val[e[id].to]),val[e[id].to]=y;\n\t\t\t\t\tif(rt[e[id].to]==e[id].to&&rt[e[id^1].to]==e[id^1].to)vv=ask(e[ban].to,e[ban^1].to);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tint x=read(),y=read();\n\t\t\t\tif(rt[x]==rt[y])pi(ask(x,y)),pn();\n\t\t\t\telse{\n\t\t\t\t\tint base=ask(x,rt[x])+ask(y,rt[y]);\n\t\t\t\t\tint v1=ask(rt[x],rt[y]),v2=vv-v1+e[ban].w;\n\t\t\t\t\tpi(base+min(v1,v2)),pn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n}\nsigned main(){return EMT::main();}\n```",
        "postTime": 1635858359,
        "uid": 451066,
        "name": "letitdown",
        "ccfLevel": 9,
        "title": "P4949 \u6700\u77ed\u8ddd\u79bb"
    },
    {
        "content": "### \u5927\u610f\n\n\u7ed9\u51fa $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u56fe\uff0c\u8ba9\u4f60\u6c42 $x$ \u5230 $y$ \u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec\u4fee\u6539\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u8bfb\u5b8c\u9898\u4ee5\u540e\u53ef\u4ee5\u5f97\u77e5\u8fd9\u662f\u4e00\u9897\u6811\u52a0\u4e0a\u4e00\u6761\u8fb9\u3002\n\n### \u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6765\u591a\u51fa\u6765\u7684\u90a3\u6761\u8fb9\uff0c\u90a3\u5982\u4f55\u627e\u5462\uff1f\n\n\u7528\u5e76\u67e5\u96c6\uff01\n\n```\nif(gett(u)!=gett(v)){\n\tmerge(u,v);\n\tadd(u,v,w);\n\tadd(v,u,w);\n}\nelse{\n\tu1=u;\n\tv1=v;\n\tw1=w;\n\tid=i;\n\tcnt+=2;\n}//\u5e76\u67e5\u96c6\u627e\u5230\u591a\u51fa\u6765\u7684\u8fb9\u3002 \n```\n\n\u7136\u540e\u8003\u8651\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u662f\u4e00\u9897\u6811\u3002\n\n\u5982\u679c\u53ea\u6709\u4e00\u68f5\u6811\u7684\u8bdd\uff0c\u90a3\u8fd9\u5c31\u662f\u6811\u5228\u7684\u6a21\u677f\u9898\u3002\n\n\u90a3\u5982\u679c\u52a0\u4e0a\u591a\u51fa\u6765\u7684\u90a3\u6761\u8fb9\u5462\uff1f\n\n\u90a3\u5c31\u6709\u4e09\u79cd\u60c5\u51b5\u3002\n\n1.  \u76f4\u63a5\u8d70\u6811\u8fb9 $x$ \u5230 $y$ \u3002\n\n2.  \u4ece $x$ \u8d70\u5230\u591a\u51fa\u6765\u7684\u8fb9\u7684\u8d77\u70b9 $u_1$\uff0c\u52a0\u4e0a\u591a\u51fa\u6765\u7684\u8fb9\u7684\u957f\u5ea6  $w_1$\uff0c\u518d\u4ece\u591a\u51fa\u6765\u7684\u8fb9\u7684\u7ec8\u70b9 $v_1$ \u8d70\u5230  $y$ \u3002\n\n2.  \u4ece $x$ \u8d70\u5230\u591a\u51fa\u6765\u7684\u8fb9\u7684\u7ec8\u70b9 $v_1$\uff0c\u52a0\u4e0a\u591a\u51fa\u6765\u7684\u8fb9\u7684\u957f\u5ea6  $w_1$\uff0c\u518d\u4ece\u591a\u51fa\u6765\u7684\u8fb9\u7684\u8d77\u70b9 $u_1$ \u8d70\u5230  $y$ \u3002\n\n\u4e4b\u540e\u8981\u6ce8\u610f\u628a\u8fb9\u6743\u4e0b\u653e\u4e3a\u70b9\u6743\u3002\n\n\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e5f\u662f\u6a21\u677f\u3002\n\n\ncode:\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#define lc(p) p<<1\n#define rc(p) p<<1|1\nusing namespace std;\nconst int MAXN=1e5+10;\nint n,m;\nint f[MAXN];\nint gett(int a){\n\tif(f[a]==a) return a;\n\treturn f[a]=gett(f[a]);\n} \nvoid merge(int x,int y){\n\tf[gett(x)]=gett(y);\n}//\u5e76\u67e5\u96c6 \nstruct Edge{\n\tint u,v,w,nxt;\n} e[MAXN<<1];\nint cnt;\nint head[MAXN];\nvoid add(int u,int v,int w){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].w=w;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}//\u94fe\u5f0f\u524d\u5411\u661f \nint dep[MAXN],fa[MAXN];\nint siz[MAXN],son[MAXN];\nint val[MAXN],wt[MAXN];\nvoid dfs1(int u,int father){\n\tdep[u]=dep[father]+1;\n\tfa[u]=father;\n\tsiz[u]=1;\n\tint maxs=0;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tint w=e[i].w;\n\t\tif(v!=father){\n\t\t\tdfs1(v,u);\n\t\t\tsiz[u]+=siz[v];\n\t\t\tval[v]=w;\n\t\t\tif(siz[v]>maxs){\n\t\t\t\tson[u]=v;\n\t\t\t\tmaxs=siz[v];\n\t\t\t}\n\t\t}\n\t}\n}\nint top[MAXN],num[MAXN];\nvoid dfs2(int u,int topf){\n\ttop[u]=topf;\n\tnum[u]=++cnt;\n\twt[cnt]=val[u];\n\tif(!son[u]) return;\n\tdfs2(son[u],topf);\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v!=fa[u]&&v!=son[u]){\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n}//\u6811\u5228\u5904\u7406dfs\u5e8f \nint sum[MAXN<<2];\nvoid pushup(int p){\n\tsum[p]=sum[lc(p)]+sum[rc(p)];\n}\nvoid build(int p,int l,int r){\n\tif(l==r){\n\t\tsum[p]=wt[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc(p),l,mid);\n\tbuild(rc(p),mid+1,r);\n\tpushup(p);\n}\nvoid update(int p,int l,int r,int x,int d){\n\tif(l==r){\n\t\tsum[p]=d;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid) update(lc(p),l,mid,x,d);\n\telse update(rc(p),mid+1,r,x,d);\n\tpushup(p);\n}\nint query(int p,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr) return sum[p];\n\tint mid=(l+r)>>1;\n\tint ans=0;\n\tif(ql<=mid) ans+=query(lc(p),l,mid,ql,qr);\n\tif(mid<qr) ans+=query(rc(p),mid+1,r,ql,qr); \n\treturn ans;\n}//\u6811\u5228\u6a21\u677f \nvoid opt1(int x,int y){\n\tx<<=1;\n\tint u=e[x].u;\n\tint v=e[x].v;\n\tif(dep[u]>dep[v]) swap(u,v);\n\tupdate(1,1,n,num[v],y);\n}//\u4fee\u6539 \nint opt2(int x,int y){\n\tint ans=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans+=query(1,1,n,num[top[x]],num[x]);//\u8bb0\u5f55 \n\t\tx=fa[top[x]];\n\t}\n\tif(x==y) return ans;\n\tif(dep[x]>dep[y]) swap(x,y);\n\tans+=query(1,1,n,num[x]+1,num[y]);//\u8bb0\u5f55 \n\treturn ans;\n}//\u6c42\u503c \nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++) f[i]=i;\n    int u1,v1,w1,id;\n\tfor(int i=1;i<=n;i++){\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tif(gett(u)!=gett(v)){\n\t\t\tmerge(u,v);\n\t\t\tadd(u,v,w);\n\t\t\tadd(v,u,w);\n\t\t}//\u521d\u59cb\u5316 \n\t\telse{\n\t\t\tu1=u;\n\t\t\tv1=v;\n\t\t\tw1=w;\n\t\t\tid=i;\n\t\t\tcnt+=2;\n\t\t}//\u5e76\u67e5\u96c6\u627e\u5230\u591a\u51fa\u6765\u7684\u8fb9\u3002 \n\t}\n\tdfs1(1,0);\n\tcnt=0;\n\tdfs2(1,1);\n\tbuild(1,1,n);//\u521d\u59cb\u5316 \n\twhile(m--){\n\t\tint opt;\n\t\tcin>>opt;\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(opt==1){\n\t\t\tif(x==id) w1=y;\n\t\t\telse opt1(x,y);\n\t\t}//\u4fee\u6539 \n\t\telse{\n\t\t\tint ans=opt2(x,y);\n\t\t\tans=min(ans,opt2(x,u1)+w1+opt2(v1,y));\n\t\t\tans=min(ans,opt2(x,v1)+w1+opt2(u1,y));\n\t\t\tcout<<ans<<endl;\n\t\t}//\u53d6\u4e09\u79cd\u7b54\u6848\u7684\u6700\u5c0f\u503c\uff0c\u8f93\u51fa\u3002 \n\t}\n}\n```\n",
        "postTime": 1616562732,
        "uid": 300024,
        "name": "miao5",
        "ccfLevel": 4,
        "title": "P4949"
    },
    {
        "content": "## \u9898\u610f\n\u4e00\u9897\u5e26\u6743\u7684\u6709\u8fb9\u6743\u7684\u6709 $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u56fe\u3002\u6c42\u95ee\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\n## \u5206\u6790\n\u5982\u679c\u662f $n$ \u4e2a\u70b9 $n-1$ \u6761\u8fb9 \uff0c\u800c\u4e14\u4e0d\u7528\u5355\u70b9\u4fee\u6539\u3002\u53ef\u4ee5\u7528\u6811\u4e0a\u8ddd\u79bb $O(\\log n)$ \u6c42\u89e3\u3002\n$$\nans = dis[x] + dis[y] -2\\times dis[lca(x,y)]\n$$\n\u8003\u8651\u662f\u5982\u679c\u662f $n$ \u4e2a\u70b9 $n-1$ \u6761\u8fb9 \uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\u53ef\u4ee5\u7528 $LCT$   $O(\\log n)$ \uff0c\u6216\u8005\u6811\u94fe\u5256\u5206 $O(\\log^2 n)$ \u6c42\u89e3\uff0c\u8003\u8651\u8fb9\u6743\u7531\u513f\u5b50\u70b9\u6620\u5c04\u3002\n$$\nans = \\sum_{i\\in U ,i \\ne lca}^n val[i] \n$$\n\u5982\u679c $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9 \uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\u8fd9\u4e2a\u6811\u4e0a\u7b80\u5355\u8def\u5f84\u6700\u591a\u4e5f\u53ea\u4f1a\u591a\u4e00\u6761\u3002\u76f4\u63a5\u5355\u72ec\u8003\u8651\u7b2c $n$ \u6761\u8fb9\u3002\n$$\nans = \\min(dis(x,y),dis(x,A)+dis(B,y)+C,dis(x,B)+dis(A,y)+C)\n$$\n\u8fd9\u6837\u5c31\u4f1a\u628a\u6240\u6709\u72b6\u51b5\u5168\u90e8\u8003\u8651\u3002\u56e0\u4e3a\u6ca1\u6709 $LCT$ \u7684\u9898\u89e3\uff0c\u8fd9\u91cc\u8bf4\u8bf4\u4e00\u4e0b\u62c6\u8fb9\u6210\u70b9\u7684\u65b9\u6cd5\uff0c\u5177\u4f53\u5c31\u89c1\u4ee3\u7801\u4e86\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*f;\n}\nconst int N = 2001001;\nint n,Q;\nint c[N][2],f[N],val[N],sum[N],Fa[N],A,B,C,D;\nbool r[N];\nint find(int x)\n{\n\treturn Fa[x] == x?x:Fa[x] = find(Fa[x]);\n}\nbool nroot(int x)\n{\n\treturn c[f[x]][1] == x || c[f[x]][0] == x;\t\n} \nvoid pushr(int x)\n{\n\tswap(c[x][1],c[x][0]);\n\tr[x]^=1;\n}\nvoid pushup(int x)\n{\n\tif(x > n) sum[x] = val[x];\n\telse sum[x] = 0;\n\tif(c[x][1]) sum[x] += sum[c[x][1]];\n\tif(c[x][0]) sum[x] += sum[c[x][0]];\n}\nvoid pushdown(int x)\n{\n\tif(r[x])\n\t{\n\t\tif(c[x][1]) pushr(c[x][1]);\n\t\tif(c[x][0]) pushr(c[x][0]);\n\t\tr[x] = 0;\n\t}\n}\nvoid rotate(int x)\n{\n\tint y = f[x],z = f[y],k = c[y][1] == x,w = c[x][!k];\n\tif(nroot(y)){c[z][c[z][1] == y] = x;}\n\tc[y][k] = w;c[x][!k] = y;\n\tf[x] = z;f[y] = x;f[w] = y;\n\tpushup(y);\n}\nvoid push(int x)\n{\n\tif(nroot(x)) push(f[x]);\n\tpushdown(x);\n}\nvoid splay(int x)\n{\n\tpush(x);\n\twhile(nroot(x))\n\t{\n\t\tint y = f[x],z = f[y];\n\t\tif(nroot(y))\n\t\t{\n\t\t\trotate((c[y][1] == x)^(c[z][1] == y)?x:y);\n\t\t}\n\t\trotate(x);\n\t\tpushup(x);\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y = 0;x;x=f[y=x])\n\t{splay(x);c[x][1] = y;pushup(x);}\n}\nvoid makeroot(int x)\n{\n\taccess(x);splay(x);pushr(x);\n}\nvoid split(int x,int y)\n{\n\tmakeroot(x);access(y);splay(y);\n}\nvoid link(int x,int y)\n{\n\tsplit(x,y);f[x] = y;\n}\nvoid work(int &ans,int x,int y,int X,int Y)\n{\n\tsplit(x,y);\n\tint ans1 = sum[y];\n\tsplit(X,Y);\n\tans1 += sum[Y];\n\tans1 += C;\n\tans = min(ans,ans1); \n}\nint main()\n{\n\tn = read();Q = read();\n\tfor(int i = 1;i <= n;i++) Fa[i] = i;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tint x = read(),y = read(),z = read();\n\t\tint fx = find(x),fy = find(y);\n\t\tif(fx == fy)\n\t\t{\n\t\t\tA = x;B = y;C = z;D = i+n;\n\t\t\tcontinue;\n\t\t}\n\t\tFa[fx] = fy;\n\t\tlink(x,i+n);\n\t\tlink(i+n,y);\n\t\tval[i+n] = z;\n\t}\n\twhile(Q--)\n\t{\n\t\tint opt = read(),a = read(),b = read();\n\t\tif(opt == 1)\n\t\t{\n\t\t\tif(a+n == D)\n\t\t\t{\n\t\t\t\tC = b;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmakeroot(a+n);\n\t\t\tval[a+n] = b;\n\t\t\tcontinue;\n\t\t}\n\t\tsplit(a,b);\n\t\tint ans1 = sum[b];\n\t\twork(ans1,a,A,B,b);\n\t\twork(ans1,a,B,A,b);\n\t\tprintf(\"%d\\n\",ans1);\n\t}\n}\n```\n\n\n[\u5730\u5740](https://www.luogu.com.cn/blog/xzc/solution-p4949)",
        "postTime": 1592652583,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u57fa\u73af\u6811\uff0c\u652f\u6301\u4fee\u6539\u8fb9\u6743\u548c\u67e5\u8be2\u4e24\u70b9\u95f4\u6700\u77ed\u8ddd\u79bb\n\n---\n# \u5206\u6790\n\u5982\u679c\u662f\u4e00\u68f5\u6811\u90a3\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6811\u94fe\u5256\u5206\uff0c\u5c06\u8fb9\u6743\u53d8\u6210\u5b50\u8282\u70b9\u7684\u70b9\u6743\uff0c\n\n\u7136\u540e\u56e0\u4e3a\u53ea\u6709\u5355\u8fb9\u4fee\u6539\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5e38\u6570\u6bd4\u8f83\u5c0f\u7684\u6811\u72b6\u6570\u7ec4\uff1b\n\n\u4f46\u662f\u8fd9\u662f\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u8003\u8651\u5c06\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\u62ce\u51fa\u6765\uff0c\u5bf9\u5176\u5b83\u8fb9\u7528\u6811\u7684\u65b9\u6cd5\u505a$x->y$\uff0c\n\n\u8fd9\u6761\u8fb9\u7279\u5224\uff0c\u4e5f\u5c31\u662f$x->zx->zy->y$\u6216\u8005$x->zy->zx->y$\uff0c\u4e00\u5171\u4e09\u79cd\u60c5\u51b5\u6c42\u6700\u5c0f\u503c\uff0c\u6ce8\u610f\u67e5\u8be2\u65f6\u7684\u533a\u95f4\u8fb9\u754c\n\n---\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cctype>\n#define rr register\nusing namespace std;\nconst int N=100011; struct node{int y,w,next;}e[N<<1];\nint c[N],a[N],dep[N],dfn[N],top[N],f[N];\nint fat[N],big[N],son[N],ls[N],tot,n,m,K=1,zx,zy,zw,zp;\ninline signed iut(){\n\trr int ans=0; rr char c=getchar();\n\twhile (!isdigit(c)) c=getchar();\n\twhile (isdigit(c)) ans=(ans<<3)+(ans<<1)+(c^48),c=getchar();\n\treturn ans;\n}\ninline void print(int ans){\n\tif (ans>9) print(ans/10);\n\tputchar(ans%10+48);\n}\ninline void add(int x,int y){for (;x<=n;x+=-x&x) c[x]+=y;}\ninline signed query(int x){rr int ans=0; for (;x;x-=-x&x) ans+=c[x]; return ans;}\ninline signed getf(int u){return f[u]==u?u:f[u]=getf(f[u]);}\ninline signed Query(int x,int y){\n\trr int ans=0;\n\twhile (top[x]!=top[y]){\n\t\tif (dep[top[x]]<dep[top[y]]) x^=y,y^=x,x^=y;\n\t\tans+=query(dfn[x])-query(dfn[top[x]]-1);\n\t\tx=fat[top[x]];\n\t}\n\tif (dep[x]>dep[y]) x^=y,y^=x,x^=y;\n\treturn ans+=query(dfn[y])-query(dfn[x]);//[dfn[x]+1~dfn[y]]\u6700\u4e0a\u9762\u7684\u70b9\u6743\u4e0d\u7b97\n}\ninline void dfs1(int x,int fa,int W){\n\tdep[x]=dep[fa]+1,fat[x]=fa,son[x]=1,c[x]=W;\n\tfor (rr int i=ls[x],mson=-1;i;i=e[i].next)\n\tif (e[i].y!=fa){\n\t\tdfs1(e[i].y,x,e[i].w);\n\t\tson[x]+=son[e[i].y];\n\t\tif (son[e[i].y]>mson) big[x]=e[i].y,mson=son[e[i].y];\n\t}\n}\ninline void dfs2(int x,int linp){\n\tdfn[x]=++tot,a[tot]=c[x],top[x]=linp;\n\tif (!big[x]) return; dfs2(big[x],linp);\n\tfor (rr int i=ls[x];i;i=e[i].next)\n\tif (e[i].y!=fat[x]&&e[i].y!=big[x]) dfs2(e[i].y,e[i].y);\n}\nsigned main(){\n\tn=iut(); m=iut();\n\tfor (rr int i=1;i<=n;++i) f[i]=i;\n\tfor (rr int i=1;i<=n;++i){\n\t\trr int x=iut(),y=iut(),w=iut();\n\t\trr int fa=getf(x),fb=getf(y);\n\t\tif (fa==fb) {zx=x,zy=y,zw=w,zp=i,K+=2; continue;}\n\t\tif (fa>fb) fa^=fb,fb^=fa,fa^=fb; f[fa]=fb;\n\t\te[++K]=(node){y,w,ls[x]},ls[x]=K;\n\t\te[++K]=(node){x,w,ls[y]},ls[y]=K;\n\t}\n\tdfs1(1,0,0),dfs2(1,1);\n\tfor (rr int i=1;i<=n;++i) c[i]=c[i-1]+a[i];\n\tfor (rr int i=n;i>=1;--i) c[i]-=c[i&(i-1)];//O(n)\u9884\u5904\u7406\u6811\u72b6\u6570\u7ec4\n\tfor (rr int i=1;i<=m;++i){\n\t\trr int op=iut(),x=iut(),y=iut();\n\t\tif (op==1){\n\t\t\tif (x==zp) zw=y;\n\t\t\telse{\n\t\t\t\trr int xx=e[x<<1].y,yy=e[x<<1|1].y;\n\t\t\t\tif (dep[xx]<dep[yy]) xx^=yy,yy^=xx,xx^=yy;\n\t\t\t\tadd(dfn[xx],y-a[dfn[xx]]),a[dfn[xx]]=y;\n\t\t\t}\n\t\t}else{\n\t\t\trr int t1=Query(x,zx)+Query(y,zy);\n\t\t\trr int t2=Query(x,zy)+Query(y,zx);\n\t\t\trr int ans1=Query(x,y),ans2=(t1<t2?t1:t2)+zw;\n\t\t\tprint(ans1<ans2?ans1:ans2),putchar(10);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1582091576,
        "uid": 37782,
        "name": "lemondinosaur",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u672c\u9898rk2\u6765\u6c34\u4e00\u6ce2\u9898\u89e3\u2026\u2026\n\n\u672c\u9898\u662f\u57fa\u73af\u6811\uff0c\u53ef\u4ee5\u8003\u8651\u65ad\u6389\u73af\u4e0a\u7684\u4e00\u6761\u8fb9 $(uu,vv)$\uff0c\u90a3\u4e48 $(u,v)$ \u7684\u6700\u77ed\u8ddd\u79bb\u5c31\u662f $\\min(dis(u,v),dis(u,uu)+dis(v,vv)+w,dis(u,vv)+dis(v,uu)+w)$\u3002\n\n\uff08\u5176\u4e2d $w$ \u662f\u65ad\u6389\u7684\u8fb9\u7684\u8fb9\u6743\uff0c$dis(u,v)$ \u8868\u793a $u,v$ \u4e24\u70b9\u5728\u6811\u4e0a\u7684\u8ddd\u79bb\uff09\n\n\u800c $dis(u,v)=d_u+d_v-d_{lca}$\u3002$d_u$ \u8868\u793a\u4ece\u6839\u5230 $u$ \u7684\u8ddd\u79bb\u3002\u90a3\u4e48\u4e00\u6b21\u8be2\u95ee\u53ef\u4ee5\u505a\u5230 $O(\\log n)$\u3002\n\n\u8003\u8651\u4fee\u6539\u3002\u5982\u679c\u4fee\u6539\u7684\u662f\u65ad\u6389\u7684\u8fb9\uff0c\u76f4\u63a5\u4fee\u6539 $w$ \u5373\u53ef\u3002\u5426\u5219\u76f8\u5f53\u4e8e\u628a\u4ee5 $v$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u7684 $d$ \u52a0\u4e00\u4e2a\u6570\u3002\n\n\u7ebf\u6bb5\u6811\uff1f\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u76f4\u63a5\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\log n)$\uff0c\u5e76\u4e14\u5e38\u6570\u5de8\u5c0f\u3002%%%rk1 Sooke\u7237%%%\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=100010;\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline int read(){\n\tint x=0,f=0;char ch=getchar();\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nstruct edge{\n\tint u,v,w,id;\n}e[maxn];\nint n,q,el=1,head[maxn],to[maxn*2],nxt[maxn*2],w[maxn*2],dep[maxn],fa[maxn],son[maxn],sz[maxn],top[maxn],dfn[maxn],dfs_clock,hid;\nll dis[maxn];\nbool vis[maxn];\ninline void add(int u,int v,int w_){\n\tto[++el]=v;nxt[el]=head[u];head[u]=el;w[el]=w_;\n}\nvoid dfs1(int u,int f){\n\tdfn[u]=++dfs_clock;\n\tdep[u]=dep[fa[u]=f]+1;\n\tsz[u]=1;\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==f) continue;\n\t\tif(vis[v]){hid=i>>1;continue;}\n\t\tvis[v]=true;\n\t\te[i>>1].id=i;\n\t\tdis[v]=dis[u]+w[i];\n\t\tdfs1(v,u);\n\t\tsz[u]+=sz[v];\n\t\tif(sz[v]>sz[son[u]]) son[u]=v;\n\t}\n}\nvoid dfs2(int u,int topf){\n\ttop[u]=topf;\n\tif(son[u]) dfs2(son[u],topf);\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa[u] || v==son[u] || u==e[hid].u && v==e[hid].v || u==e[hid].v && v==e[hid].u) continue;\n\t\tdfs2(v,v);\n\t}\n}\nint lca(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\treturn dep[u]<dep[v]?u:v;\n}\nstruct BIT{\n\tll a[maxn];\n\tvoid update_(int p,ll x){\n\t\tfor(int i=p;i<=n;i+=i&-i) a[i]+=x;\n\t}\n\tll query(int p){\n\t\tll s=0;\n\t\tfor(int i=p;i;i-=i&-i) s+=a[i];\n\t\treturn s;\n\t}\n\tvoid update(int l,int r,ll x){\n\t\tupdate_(l,x);update_(r+1,-x);\n\t}\n}tr;\nll calc(int u,int v){\n\treturn tr.query(dfn[u])+tr.query(dfn[v])-2*tr.query(dfn[lca(u,v)]);\n}\nint main(){\n\tn=read();q=read();\n\tFOR(i,1,n){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w);add(v,u,w);\n\t\te[i]=(edge){u,v,w,0};\n\t}\n\tvis[1]=true;\n\tdfs1(1,0);dfs2(1,1);\n\tFOR(i,1,n) tr.update(dfn[i],dfn[i],dis[i]);\n\twhile(q--){\n\t\tint op=read(),x=read(),y=read();\n\t\tif(op==2) printf(\"%lld\\n\",min(min(calc(x,y),calc(x,e[hid].u)+e[hid].w+calc(y,e[hid].v)),calc(x,e[hid].v)+e[hid].w+calc(y,e[hid].u)));\n\t\telse{\n\t\t\tif(x==hid) e[hid].w=y;\n\t\t\telse{\n\t\t\t\tint dy=y-e[x].w;\n\t\t\t\te[x].w=y;\n\t\t\t\ttr.update(dfn[to[e[x].id]],dfn[to[e[x].id]]+sz[to[e[x].id]]-1,dy);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1553589573,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "# \u543c\u9898\u554a\n\u521a\u5f00\u59cb\u770b\u4e0a\u53bb\u53c8\u4ee5\u4e3a\u662fLCT\u5565\u5b50\u7684\u3002\n\n\u540e\u6765\u53d1\u73b0\uff0cTM\u662f\u4e2a\u56fe\u3002\n\n\u7136\u540e\u679c\u65ad\u51c6\u5907\u653e\u5f03\uff0c\u7a81\u7136\u53d1\u73b0\u53ea\u6709N\u4e2a\u70b9N\u6761\u8fb9\u3002\n\nwoc\uff0c\u8fd9\u4e0d\u5c31\u4e00\u4e2a\u57fa\u73af\u6811\u4e0a\u6811\u94fe\u5256\u5206\u5417\u3002\u3002\u3002\n\n\u5173\u4e8e\u57fa\u73af\u6811\u95ee\u9898\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u4e00\u5b9a\u5f88\u6709\u7ecf\u9a8c\u4e86\u5427\uff0c\u7528\u4e2a\u5e76\u67e5\u96c6\u627e\u51fa\u591a\u7684\u8fb9\uff0c\u7136\u540e\u628a\u56fe\u5206\u6210\u4e00\u68f5\u6811\u548c\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u6811\u4e0a\u5c31\u6811\u4e0a\u505a\uff0c\u591a\u51fa\u6765\u7684\u8fb9\u5c31\u53ef\u4ee5\u53e6\u5916\u5904\u7406\u3002\n\n\u5173\u4e8e\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u76f4\u63a5\u5728\u67e5\u8be2\u7684\u6700\u540e\u51cf\u53bbLCA\u7684\u70b9\u6743\u5c31OK\u4e86\uff0c\u5176\u4ed6\u5f53\u6210\u70b9\u6743\u5904\u7406\u3002\n\n\u5173\u4e8e\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u5927\u5bb6\u90fd\u4f1a\u6539\u5427\u3002\u3002\u3002\n\n\u5173\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u76f4\u63a5\u627e\u51fa\u76f8\u5e94\u7684\u70b9\u6743\uff0c\u7136\u540e\u4fee\u6539\u5c31\u884c\u4e86\uff0c\u627e\u70b9\u6743\u8bb0\u5f97\u5148\u8fb9\u7684\u7f16\u53f7\u4e582\n\n\u603b\u4e4b\u8fd8\u662f\u5f88\u7b80\u5355\u7684\n\n\u4e0b\u9762\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\u6ce8\u91ca\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 4000001\n#define L(x) (x<<1)\n#define R(x) ((x<<1)|1)\nusing namespace std;\nint tree[maxn],tag[maxn];\nint rev[maxn],dep[maxn],size[maxn],seg[maxn],top[maxn],son[maxn],father[maxn];\nint n,m,root,x,y,z,a[maxn],visx[maxn],visy[maxn],tot,mode;\nint cnt,from[maxn],to[maxn],Next[maxn],head[maxn];\nint Gx,Gy,Gz,Gd;\nint fa[maxn],X[maxn],Y[maxn],Z[maxn];\nint find(int x){\n    if(fa[x]==x)return x;\n    else return fa[x]=find(fa[x]);\n}\nbool merge(int x,int y){\n    int i=find(x),j=find(y);\n    if(i==j)return false;\n    fa[i]=j;return true;\n}\nvoid add(int x,int y){\n    cnt++;\n    from[cnt]=x;to[cnt]=y;\n    Next[cnt]=head[x];head[x]=cnt;\n}\nvoid update(int node,int begin,int end,int x,int y,int val){\n    if(begin>y||end<x)return;\n    if(begin>=x&&end<=y){\n        tree[node]=val;\n        return;\n    }else{\n        int mid=(begin+end)>>1;\n        if(x<=mid)update(L(node),begin,mid,x,y,val);\n        if(y>mid) update(R(node),mid+1,end,x,y,val);\n        tree[node]=tree[L(node)]+tree[R(node)];\n    }\n}\nint query(int node,int begin,int end,int x,int y){\n    if(begin>=x&&end<=y){\n        return tree[node];\n    }else{\n        int mid=(begin+end)>>1,sum=0;\n        if(x<=mid)sum+=query(L(node),begin,mid,x,y);\n        if(y>mid) sum+=query(R(node),mid+1,end,x,y);\n        return sum;\n    }\n}\nint dfs1(int x){\n    size[x]=1;\n    dep[x]=dep[father[x]]+1;\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i],big=0;\n        if(father[x]==v)continue;\n        father[v]=x;\n        big=dfs1(v);\n        size[x]+=big;\n        if(big>size[son[x]])son[x]=v;\n    }\n    return size[x]; \n}\nvoid dfs2(int x){\n    if(son[x]){\n        seg[son[x]]=++seg[0];\n        top[son[x]]=top[x];\n        rev[seg[0]]=son[x];\n        dfs2(son[x]);\n    }\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i];\n        if(!top[v]){\n            seg[v]=++seg[0];\n            top[v]=v;\n            rev[seg[0]]=v;\n            dfs2(v);\n        }\n    }\n}\nint linkquery(int x,int y){\n    int fx=top[x],fy=top[y],ans=0;\n    while(fx!=fy){\n        if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n        ans+=query(1,1,seg[0],seg[fx],seg[x]);\n        x=father[fx];fx=top[x];\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    ans+=query(1,1,seg[0],seg[x],seg[y]);\n    ans-=query(1,1,seg[0],seg[x],seg[x]);\n    return ans;\n}\nvoid change(int x,int y){                       //\u4fee\u6539\u8fb9\u6743\n    x*=2;       //\u8bb0\u5f97\u4e582\n    x=dep[from[x]]>dep[to[x]]?from[x]:to[x];    //\u56e0\u4e3a\u8fb9\u6743\u94a6\u5b9a\u7684\u662f\u6df1\u5ea6\u5927\u7684\u70b9\n    update(1,1,seg[0],seg[x],seg[x],y);         //\u76f4\u63a5\u6539\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);root=1;\n    for(int i=1;i<=n;i++)fa[i]=i;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        if(merge(x,y)){add(x,y),add(y,x);}\n        else Gx=x,Gy=y,Gz=z,Gd=i,cnt+=2;        //\u5e76\u67e5\u96c6\u5224\u591a\u7684\u8fb9\n        X[i]=x;Y[i]=y;Z[i]=z;\n    }\n    dfs1(root);\n    seg[root]=++seg[0];\n    rev[seg[0]]=root;\n    top[root]=root;\n    dfs2(root);\n    for(int i=1;i<=n;i++)if(Gd!=i)change(i,Z[i]);   //\u56e0\u4e3a\u672c\u4eba\u61d2\u5f97\u5199build\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&mode,&x,&y);\n        if(mode==1){\n            if(x==Gd)Gz=y;          //\u5982\u679c\u662f\u591a\u4f59\u7684\u8fb9\u5c31\u76f4\u63a5\u6539\n            else change(x,y);       //\u4e0d\u7136\u5c31\u53e6\u5916\u6539\n        }else{\n            int ans;\n            ans=linkquery(x,y);         //\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0d\u7ecf\u8fc7\u591a\u4f59\u7684\u8fb9\n            ans=min(ans,Gz+min(linkquery(x,Gx)+linkquery(Gy,y),linkquery(x,Gy)+linkquery(Gx,y)));   //\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u7ecf\u8fc7\u591a\u4f59\u7684\u8fb9\n            printf(\"%d\\n\",ans);\n        }\n    }\n}\n```",
        "postTime": 1552976140,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "[\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2](https://www.cnblogs.com/cold-cold/p/10049804.html)\n\n\u6b64\u9898\u662f\u4e00\u9053\u57fa\u73af\u6811\u4e0a\u6811\u94fe\u5256\u5206\u9898\u76ee\n\n\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u57fa\u73af\u6811\u5176\u5b9e\u53ef\u4ee5\u770b\u505a\u4e00\u68f5\u6811\u591a\u8fde\u4e86\u4e00\u6761\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u8fb9\u65f6\u7ef4\u62a4\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u6765\u627e\u51fa\u591a\u7684\u90a3\u6761\u8fb9\u3002\n\n\u5c06\u90a3\u6761\u591a\u51fa\u7684\u8fb9\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651u\u5230v\u7684\u6700\u5927\u503c\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\n\n&ensp;&ensp;&ensp;1. u\u76f4\u63a5\u5728\u6811\u4e0a\u5230v\n\n&ensp;&ensp;&ensp;2. u\uff0cv\u5230\u591a\u51fa\u7684\u90a3\u6761\u8fb9\u7684\u4e24\u7aef\uff0c\u901a\u8fc7\u8fd9\u6761\u8fb9\u8fde\u5728\u4e00\u8d77\n\n\u4e0e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u5728\u6811\u4e0a\u8dd1\u6811\u94fe\u5256\u5206\u4e86\uff0c\u6ce8\u610f\u6b64\u9898\u662f\u8fb9\u6743\u800c\u4e0d\u662f\u70b9\u6743\n\n\u90a3\u6211\u4eec\u5bf9\u4e8eu\u5230v\u6743\u503c\u4e3aw\u7684\u4e00\u6761\u8fb9\u53ef\u4ee5\u770b\u505au->xx->v\uff0cu,v\u70b9\u6743\u4e3a0\uff0cxx\u70b9\u6743\u4e3aw\uff0c\u5c31\u53ef\u5c06\u8fb9\u6743\u8f6c\u5316\u4e3a\u70b9\u6743\u4e86\uff0c\u70b9\u6570\u7ffb\u500d\uff0c\u8bb0\u5f97\u6570\u7ec4\u5927\u5c0f\u7ffb\u500d\u54df\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u6211\u4e00\u5f00\u59cb\u7ebf\u6bb5\u6811\u7684\u6570\u7ec4\u5fd8\u8bb0\u5f004\u500d\u4e86\uff0c\u7ed3\u679c\u53c8WA\u53c8TLE40\u5206\uff0c\u641e\u5f97\u6211\u8fd8\u4ee5\u4e3a\u54ea\u91cc\u5199\u9519\u4e86\u5462\n\n\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#define lson l,mid,o<<1\n#define rson mid+1,r,o<<1|1\nusing namespace std;\ntypedef long long ll;\ninline int read()\n{\n    int a=0,p=0;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') p=1,ch=getchar();\n    while(ch>='0'&&ch<='9') a=(a<<3)+(a<<1)+ch-'0',ch=getchar();\n    return p?-a:a;\n}\nconst int N=200100;\nint n,q,op,u,v,w,cnt,sum[N<<2],head[N],top[N],fe[N],fa[N],id[N],dep[N],size[N],son[N],ww[N],wn[N],tim=0,t1,t2,keu,kev,kew,kex,xu;\nint getf(int u){return fe[u]==u?u:fe[u]=getf(fe[u]);}\nstruct EDGE{int nxt,to;}e[N<<1];\nvoid add(int u,int v){e[++cnt]=(EDGE){head[u],v};head[u]=cnt;}\nvoid build(int l,int r,int o)\n{\n    if(l==r){sum[o]=wn[l];return;}\n    int mid=(l+r)>>1;\n    build(lson);build(rson);\n    sum[o]=sum[o<<1]+sum[o<<1|1];\n}\nvoid update(int pre,int val,int l,int r,int o)\n{\n    if(l==r){sum[o]=val;return;}\n    int mid=(l+r)>>1;\n    if(pre<=mid) update(pre,val,lson);\n    else update(pre,val,rson);\n    sum[o]=sum[o<<1]+sum[o<<1|1];\n}\nint query(int L,int R,int l,int r,int o)\n{\n    if(L<=l&&r<=R) return sum[o];\n    int mid=(l+r)>>1,ans=0;\n    if(L<=mid) ans+=query(L,R,lson);\n    if(R> mid) ans+=query(L,R,rson);\n    return ans;\n}\nint query_tree(int u,int v)\n{\n    int ans=0;\n    while(top[u]!=top[v])\n    {\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans+=query(id[top[u]],id[u],1,n,1);\n        u=fa[top[u]];\n    }\n    if(dep[u]>dep[v]) swap(u,v);\n    return ans+query(id[u],id[v],1,n,1);\n}\nvoid dfs1(int u,int ff)\n{\n    fa[u]=ff;dep[u]=dep[ff]+1;size[u]=1;\n    int maxson=0;\n    for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to) if(v!=ff)\n    {\n        dfs1(v,u);\n        size[u]+=size[v];\n        if(size[v]>maxson) maxson=size[v],son[u]=v;\n    }\n}\nvoid dfs2(int u,int topf)\n{\n    id[u]=++tim;top[u]=topf;wn[tim]=ww[u];\n    if(!son[u]) return;\n    dfs2(son[u],topf);\n    for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to) if(v!=fa[u]&&v!=son[u])\n        dfs2(v,v);\n}\nint main()\n{\n//    freopen(\"input\",\"r\",stdin);\n//    freopen(\"output\",\"w\",stdout);\n    xu=n=read(),q=read();\n    for(int i=1;i<=n;i++) fe[i]=i;\n    for(int i=1;i<=n;i++)\n    {\n        u=read(),v=read(),w=read();\n        t1=getf(u),t2=getf(v);\n        if(t1!=t2)\n        {\n            fe[t1]=t2;xu=n+i;ww[xu]=w;\n            add(u,xu);add(xu,u);\n            add(v,xu);add(xu,v);\n        }\n        else {keu=u;kev=v;kew=w;kex=i;}\n    }\n    n<<=1;\n    dfs1(1,1);dfs2(1,1);build(1,n,1);\n    int ans=0;\n    while(q--)\n    {\n        op=read(),u=read(),v=read();\n        if(op==1)\n\t\t{\n\t\t\tif(u==kex) kew=v;\n\t\t\telse update(id[u+(n>>1)],v,1,n,1);\n\t\t}\n        else\n        {\n            ans=query_tree(u,v);\n            printf(\"%d\\n\",min(ans,kew+min(query_tree(u,keu)+query_tree(v,kev),query_tree(u,kev)+query_tree(v,keu))));\n        }\n    }\n    return 0;\n}\n/*\n9 4\n1 2 2\n2 3 9\n3 4 7\n3 5 1\n1 6 7\n6 7 1\n4 8 9\n6 9 8\n8 9 2\n1 9 3\n1 1 5\n2 9 7\n2 4 5\n*/\n```",
        "postTime": 1543651548,
        "uid": 48934,
        "name": "cold_cold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "# P4949 \u6700\u77ed\u8ddd\u79bb\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u51fa\u4e00\u4e2a N \u4e2a\u70b9 N \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002\n\n\u4f60\u9700\u8981\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. \u4fee\u6539 \u7b2c x \u6761\u8fb9\u7684\u957f\u5ea6\u4e3a y \uff1b\n2. \u67e5\u8be2 \u70b9 x \u5230\u70b9 y \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u5171\u6709 M \u6b21\u64cd\u4f5c\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\n\n\u8f93\u5165\u5171 N + M + 1 \u884c\uff1a\n\n\u7b2c 1 \u884c\uff0c\u5305\u542b 2 \u4e2a\u6b63\u6574\u6570 N\uff0cM\uff0c\u8868\u793a\u70b9\u6570\u5373\u8fb9\u6570\uff0c\u64cd\u4f5c\u6b21\u6570\u3002\n\n\u7b2c 2 \u884c\u5230\u7b2c N + 1 \u884c\uff0c\u6bcf\u884c\u5305\u542b 3 \u4e2a\u6b63\u6574\u6570 x\uff0cy\uff0cz\uff0c\u8868\u793a x \u4e0e y \u95f4\u6709\u4e00\u6761\u957f\u5ea6 \u4e3a z \u7684\u8fb9\u3002\n\n\u7b2c N + 2 \u5230 N + M + 1 \u884c\uff0c\u6bcf\u884c\u5305\u542b 3 \u4e2a\u6b63\u6574\u6570 opt\uff0cx\uff0cy\uff0c\u8868\u793a\u64cd\u4f5c\u79cd\u7c7b\uff0c\u64cd\u4f5c\u7684\u53c2\u6570\uff08\u542b\u4e49\u89c1\u3010\u9898\u76ee\u63cf\u8ff0\u3011\uff09\u3002\n\n\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\n\n\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c 2 \u8f93\u51fa\u67e5\u8be2\u7684\u7ed3\u679c\u3002\n\n\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a\n\n\n\n```\n4 5\n1 2 11\n1 3 12\n2 3 13\n1 4 15\n2 2 3\n1 2 1\n2 2 3\n2 2 4\n2 3 4\n```\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a\n\n\n\n```\n13\n12\n26\n16\n```\n\n## \u8bf4\u660e\n\n![Luogu](Images/37934-1542366203739.png)\n\n## \u9898\u89e3\n\n\u8fd9\u9053\u9898\u601d\u7ef4\u96be\u5ea6\u8fd8\u884c\uff0c\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u7565\u9ad8\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\u7684\u51fd\u6570\uff1a\n\n- O(1)\u67e5\u8be2\u6bcf\u6761\u8fb9\u4ee3\u8868\u7684\u70b9\uff0c\u65ad\u8fb9\u4e3a0\u5373\u53ef\n- O(1)\u7ef4\u62a4\u73af\u4e0a\u8fb9\u6743\u603b\u548c\n- O(1)\u67e5\u8be2\u4e00\u6761\u8fb9\u662f\u5426\u4e3a\u5272\u8fb9\u3002\n- O(1)\u67e5\u8be2\u90bb\u63a5\u8868\u4e2d\u6bcf\u4e2a\u7f16\u53f7\u6240\u5bf9\u5e94\u7684\u8bfb\u5165\u987a\u5e8f\n- O(1)\u67e5\u8be2\u4e00\u4e2a\u70b9\u6240\u5c5e\u7684\u73af\u5b50\u6811\n\n\u63a5\u4e0b\u6765\u4efb\u9009\u4e00\u6761\u8fb9\u65ad\u5f00\uff0c\u5c06\u8fd9\u9897\u6811\u7528HPD\u7ef4\u62a4\u3002\n\n\u5f53\u7ed9\u51fa\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u65f6\n\n- \u5982\u679c\u662f\u6811\u8fb9\uff0c\u76f4\u63a5HPD\u7ef4\u62a4\uff0c\n  $$\n  O(nlogn)\n  $$\n\n\n- \u5982\u679c\u662f\u73af\u8fb9\uff0cO(1)\u5728\u6570\u7ec4\u4e2d\u4fee\u6539\u8fd9\u6761\u73af\u8fb9\u8fb9\u6743\uff0cO(1)\u66f4\u65b0\u73af\u4e0a\u8fb9\u6743\u603b\u548c\uff0cO(nlogn)\u66f4\u65b0HPD\u8fd9\u6761\u8fb9\u5bf9\u5e94\u70b9\u70b9\u6743\n\n\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\n\n- \u5982\u679c\u4e24\u70b9\u5c5e\u4e8e\u540c\u4e00\u73af\u5b50\u6811\uff0c\u76f4\u63a5\u67e5\u8be2\u4e24\u70b9\u8ddd\u79bb\uff0c\n  $$\n  O(nlog^2n)\n  $$\n\n\n- \u5982\u679c\u5c5e\u4e8e\u4e0d\u540c\u5b50\u6811\uff0c\u9700\u8981\u8003\u8651\u73af\u4e0a\u53e6\u4e00\u6761\u8def\u5f84\u957f\u5ea6\uff08O(1)\u67e5\u8be2\u5373\u53ef\uff09\uff0c\u590d\u6742\u5ea6\u540c\u6837\n\n\u4e0a\u4e00\u4e0b\u4e00\u904d\u8fc7\u7684Code\uff08NOIP\u8981\u662f\u6211\u4ee3\u7801\u80fd\u529b\u53d1\u6325\u51fa\u5199\u8fd9\u9898\u7684\u4e00\u534a\u5c31\u4e0d\u4f1a\u70b8\u8fd9\u4e48\u60e8\u3002\u3002\u3002\uff09\uff1a\n\n```c++\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <iostream>\n#include <stack>\n#define maxn 105005\n#define ll long long\nint n , head[maxn] , cnt = 1 , u , v , circle[maxn] , m , eref[maxn << 1];\nll val[maxn];\nstruct edge{\n\tint next , to ;\n\tll dis;\n}e[maxn<<1];\ninline bool isEdge(int x , int y)\n{\n\tif(x == u && y == v)\treturn false;\n\tif(x == v && y == u)\treturn false;\n\treturn true;\n}\ninline bool c(int x){\n\treturn circle[x];\n}\ninline void add(int x , int y , ll d)\n{\n\te[++cnt].next = head[x];\n\te[cnt].to = y;\n\te[cnt].dis = d;\n\thead[x] = cnt;\n}\nnamespace cir{\n\tint dfn[maxn] , low[maxn] , idx , tot , cirnum , sz[maxn];\n\tbool flag;\n\tstd::stack<int> st;\n\tvoid DFS_CIRCLE(int x , int pre)\n\t{\n\t\tif(flag)\treturn;\n\t\tdfn[x] = low[x] = ++idx;\n\t\tst.push(x);\n\t\tfor(int i = head[x] ; i ; i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\tif(!dfn[v]){\n\t\t\t\tDFS_CIRCLE(v , x);\n\t\t\t\tlow[x] = std::min(low[x] , low[v]);\n\t\t\t}\n\t\t\telse if(v != pre)\tlow[x] = std::min(low[x] , dfn[v]);\n\t\t}\n\t\tif(dfn[x] == low[x])\n\t\t{\n\t\t\t++tot;\n\t\t\twhile(st.top() != x)\n\t\t\t{\n\t\t\t\tcircle[st.top()] = tot;\n\t\t\t\t++sz[tot];\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\tcircle[st.top()] = tot;\n\t\t\t++sz[tot];\n\t\t\tst.pop();\n\t\t\tif(sz[tot] > 1)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t\tcirnum = tot;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tvoid pre()\n\t{\n\t\tDFS_CIRCLE(1,1);\n\t\tfor(int i = 1 ; i <= n ; ++i)\n\t\t\tif(circle[i] != cirnum)\n\t\t\t\tcircle[i] = 0;\n\t\tfor(int i = 1 ; i <= n ; ++i){\n\t\t\tif(circle[i]){\n\t\t\t\tu = i;\n\t\t\t\tfor(int j = head[i] ; j ; j = e[j].next){\n\t\t\t\t\tif(circle[e[j].to])\tv = e[j].to;\n\t\t\t\t}\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nstruct SegmentTree\n{\n\t#define ls(x) (x << 1)\n\t#define rs(x) (x << 1 | 1)\n\t#define pushup(x) sum[x] = sum[ls(x)] + sum[rs(x)] \n\tll sum[maxn<<2];\n\tvoid build(int l , int r , int Node , ll v[])\n\t{\n\t\tif(l == r)\n\t\t{\n\t\t\tsum[Node] = v[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(l , mid , ls(Node) , v);\n\t\tbuild(mid + 1 , r , rs(Node) , v);\n\t\tpushup(Node);\n\t}\n\tvoid update(int p , int l , int r , int Node , ll v)\n\t{\n\t\tif(l == r){\n\t\t\tsum[Node] = v;\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tif(p <= mid) \tupdate(p , l , mid , ls(Node) , v);\n\t\telse update(p , mid + 1 , r , rs(Node) , v);\n\t\tpushup(Node);\n\t}\n\tll query(int L , int R , int l , int r , int Node)\n\t{\n\t\tif(L <= l && r <= R){\n\t\t\treturn sum[Node];\n\t\t}\n\t\tint mid = l + r >> 1 ;\n\t\tll ans = 0;\n\t\tif(L <= mid)\tans += query(L , R , l , mid , ls(Node));\n\t\tif(R > mid)\t\tans += query(L , R , mid + 1 , r , rs(Node));\n\t\treturn ans;\n\t}\n};\nstruct HPD\n{\n\tint id[maxn] , hs[maxn] , sz[maxn] , top[maxn] , f[maxn] , dep[maxn] , idx;\n\tll v[maxn];\n\tSegmentTree tr;\n\tvoid dfs1(int x , int fx)\n\t{\n\t\tdep[x] = dep[fx] + 1;\n\t\tf[x] = fx;\n\t\tsz[x] = 1;\n\t\tfor(int i = head[x] ; i ; i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\tif(v == fx || !isEdge(x , v))\tcontinue;\n\t\t\tdfs1(v , x);\n\t\t\tsz[x] += sz[v];\n\t\t\tif(sz[v] > sz[hs[x]])\ths[x] = v;\n\t\t}\n\t}\n\tvoid dfs2(int x , int topv)\n\t{\n\t\ttop[x] = topv;\n\t\tid[x] = ++idx;\n\t\tv[id[x]] = val[x];\n\t\tif(!hs[x])\treturn;\n\t\tdfs2(hs[x] , topv);\n\t\tfor(int i = head[x] ; i ; i = e[i].next){\n\t\t\tint ver = e[i].to;\n\t\t\tif(ver == f[x] || !isEdge(x , ver) || ver == hs[x])\tcontinue;\n\t\t\tdfs2(ver , ver);\n\t\t}\n\t}\n\tvoid build(){\n\t\ttr.build(1,n,1,v);\n\t}\n\tinline ll query(int x , int y)\n\t{\n\t\tll ans = 0;\n\t\twhile(top[x] != top[y]){\n\t\t\tif(dep[top[x]] < dep[top[y]])\tstd::swap(x,y);\n\t\t\tans += tr.query(id[top[x]] , id[x] , 1 , n , 1);\n\t\t\tx = f[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y])\tstd::swap(x,y);\n\t\tans += tr.query(id[y] , id[x] , 1 , n , 1);\n\t\tans -= tr.query(id[y] , id[y] , 1 , n , 1);\n\t\treturn ans;\n\t}\n\tvoid update(int p , ll x){\n\t\tif(!p)\treturn;\n\t\ttr.update(id[p] , 1 , n , 1 , x);\n\t}\n}forest;\nnamespace Solve\n{\n\tll cirsum , cirEdis[maxn << 1];\n\tint eid[maxn << 1] , bl[maxn] , cirnum; // the edge to the point \n\tbool cire[maxn << 1]; // the type of points\n\tvoid DFS_Down(int x , int fx , ll dis , int Enum) // Enum -> the real id of edge\n\t{\n\t\tval[x] = dis;\n\t\teid[Enum] = x;\n\t\tfor(int i = head[x] ; i ; i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\tif(v == fx)\tcontinue;\n\t\t\tif(!isEdge(x , v))\tcontinue;\n\t\t\tDFS_Down(v , x , e[i].dis , eref[i]);\n\t\t}\n\t}\n\tvoid getBelong(int x , int fx , int rt)\n\t{\n\t\tbl[x] = rt;\n\t\tfor(int i = head[x] ; i ; i = e[i].next)\n\t\t\tif(e[i].to != fx && !circle[e[i].to])\n\t\t\t\tgetBelong(e[i].to , x , rt);\n\t}\n\tinline ll q(int x , int y)\n\t{\n\t\tif(bl[x] == bl[y]){\n\t\t\treturn forest.query(x,y);\n\t\t}\n\t\telse{\n\t\t\tll ans = forest.query(x,y);\n\t\t\tll tmp = forest.query(bl[x] , bl[y]);\n\t\t\tans -= tmp;\n\t\t\ttmp = std::min(tmp , cirsum - tmp);\n\t\t\tans += tmp;\n\t\t\treturn ans;\n\t\t}\n\t}\n\tinline void upd(int x , ll y)\n\t{\n\t\tint p = eid[x];\n\t\tif(cire[x]){\n\t\t\tcirsum += y - cirEdis[x];\n\t\t\tcirEdis[x] = y;\n\t\t}\n\t\tforest.update(p , y);\n\t}\n\tinline void solve()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(int i = 1 ; i <= n ; ++i){\n\t\t\tint x , y ;\n\t\t\tll d;\n\t\t\tscanf(\"%d%d%lld\",&x,&y,&d);\n\t\t\tadd(x,y,d) , eref[cnt] = i , add(y,x,d) , eref[cnt] = i;\n\t\t}\n\t\tcir::pre();// get the circle , identify the edge to cut\n\t\tDFS_Down(1 , 1 , 0 , 0); // the root must be invalid !!\n\t\tforest.dfs1(1 , 1);\n\t\tforest.dfs2(1 , 1);\n\t\tforest.build();\n\t\tfor(int i = 1 ; i <= n ; ++i){\n\t\t\tif(circle[i]){\n\t\t\t\tgetBelong(i , i , i);\n\t\t\t\tfor(int j = head[i] ; j ; j = e[j].next)\n\t\t\t\t\tif(circle[e[j].to])\n\t\t\t\t\t\tcire[eref[j]] = true , cirsum += e[j].dis , cirEdis[eref[j]] = e[j].dis;\n\t\t\t} \n\t\t}\n\t\tcirsum >>= 1;\n\t\tfor(int i = 1 ; i <= m ; ++i){\n\t\t\tint op ,x , z;\n\t\t\tll y;\n\t\t\tscanf(\"%d\",&op);\n\t\t\tif(op == 1){\n\t\t\t\tscanf(\"%d%lld\",&x,&y);\n\t\t\t\tupd(x,y);\n\t\t\t}\n\t\t\tif(op == 2){\n\t\t\t\tscanf(\"%d%d\",&x,&z);\n\t\t\t\tprintf(\"%lld\\n\",q(x,z));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tSolve::solve();\n}\n```\n\n",
        "postTime": 1542366839,
        "uid": 100712,
        "name": "Starrydream",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u57fa\u73af\u6811\uff0c\u4e0d\u662f\u7279\u522b\u7684\u590d\u6742\n\n\u5982\u679c\u5148\u628a\u4e00\u6761\u591a\u4f59\u7684\u8fb9\u62ff\u6389\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\n\n - \u6700\u77ed\u8def\u5f84\u4e0d\u7ecf\u8fc7\u591a\u4f59\u8fb9\uff0c\u76f4\u63a5\u6811\u4e0a\u6c42\u4e24\u70b9\u95f4\u8ddd\u79bb\n - \u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u591a\u4f59\u8fb9\uff0c\u6811\u4e0a\u6c42\u591a\u4f59\u8fb9\u4e24\u7aef\u70b9\u5206\u522b\u5230\u4e24\u4e2a\u8be2\u95ee\u70b9\u7684\u8ddd\u79bb\uff0c\u52a0\u4e0a\u591a\u4f59\u8fb9\u957f\u5ea6\n\n\u4e24\u79cd\u60c5\u51b5\u6bd4\u5927\u5c0f\u5373\u53ef\n\n\u81f3\u4e8e\u5982\u4f55\u6c42\u5f97\u6811\u4e0a\u4e24\u70b9\u95f4\u8ddd\u79bb\uff0c\u56e0\u4e3a\u6709\u4fee\u6539\u64cd\u4f5c\u65e0\u6cd5\u76f4\u63a5\u500d\u589e\u89e3\u51b3\n\n\u6240\u4ee5\u7528\u4e0a\u6811\u5256\uff0c\u7136\u540e\u8ddd\u79bb\u53ef\u4ee5\u7528\u5e38\u6570\u66f4\u5c0f\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\n\n\u6ce8\u610f\u8fd9\u91cc\u7528\u4ee5\u70b9\u4ee3\u8fb9\uff0c\u7ec6\u8282\u5904\u7406\u9700\u6ce8\u610f\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nstruct Edge{\n\tint to, next, len;\n}edge[maxn << 1];\nstruct Line{\n\tint x, y, z;\n}line[maxn << 1];\nint num, head[maxn], size[maxn], son[maxn], fa[maxn], d[maxn], val[maxn], id[maxn], top[maxn];\nint Index, U, V, Len, n, m, tree[maxn];\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n} \n\nvoid addedge(int x, int y, int z){ edge[++num] = (Edge) {y, head[x], z}; head[x] = num; }\n\nvoid dfs(int u){\n\tsize[u] = 1, son[u] = -1;\n\tfor (int i = head[u]; i; i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif (!size[v]){\n\t\t\tfa[v] = u, d[v] = d[u] + 1, val[v] = edge[i].len;\n\t\t\tdfs(v);\n\t\t\tsize[u] += size[v];\n\t\t\tif (son[u] == -1 || son[u] != -1 && size[son[u]] < size[v]) son[u] = v;\t\n\t\t} else\n\t\tif (v != fa[u]) U = u, V = v, Len = edge[i].len;\n\t}\n}\n\nvoid dfs(int u, int x){\n\ttop[u] = x, id[u] = ++Index;\n\tif (son[u] == -1) return;\n\tdfs(son[u], x);\n\tfor (int i = head[u]; i; i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif (v != son[u] && v != fa[u] && !(u == U && v == V) && !(u == V && v == U)) dfs(v, v);\n\t}\n}\n\nvoid add(int x, int y){ for (; x <= n; x += x & -x) tree[x] += y; }\nint query(int x){ int sum = 0; for (; x; x -= x & -x) sum += tree[x]; return sum; }\n\nint qrylen(int u, int v){\n\tint sum = 0;\n\twhile (top[u] != top[v]){\n\t\tif (d[top[u]] < d[top[v]]) swap(u, v);\n\t\tsum += query(id[u]) - query(id[top[u]] - 1);\n\t\tu = fa[top[u]];\n\t}\n\tif (u == v) return sum;\n\tif (d[u] < d[v]) swap(u, v);\n\treturn sum + query(id[u]) - query(id[v]);\n}\n\nint main(){\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; ++i){\n\t\tline[i] = (Line){read(), read(), read()};\n\t\taddedge(line[i].x, line[i].y, line[i].z);\n\t\taddedge(line[i].y, line[i].x, line[i].z);\n\t}\n\tdfs(1); dfs(1, 1);\n\tfor (int i = 1; i <= n; ++i) add(id[i], val[i]);\n\twhile (m--){\n\t\tint opt = read(), x = read(), y = read();\n\t\tif (opt == 1){\n\t\t\tint u = line[x].x, v = line[x].y;\n\t\t\tif (u == U && v == V || u == V && v == U) Len = y; else{\n\t\t\t\tif (d[u] < d[v]) swap(u, v);\n\t\t\t\tadd(id[u], y - line[x].z);\n\t\t\t\tline[x].z = y;\n\t\t\t}\n\t\t} else{\n\t\t\tint sum = qrylen(x, y),\n\t\t\t\tsum1 = qrylen(x, U) + qrylen(y, V) + Len,\n\t\t\t\tsum2 = qrylen(x, V) + qrylen(y, U) + Len;\n\t\t\tprintf(\"%d\\n\", min(sum, min(sum1, sum2)));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565741048,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4949 \u3010\u6700\u77ed\u8ddd\u79bb\u3011"
    }
]