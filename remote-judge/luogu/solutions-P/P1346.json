[
    {
        "content": "\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728**\u5efa\u56fe**\n\n\u628a\u6bcf\u4e00\u4e2a\u8f66\u7ad9\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5c06\u8fd9\u4e2a\u8f66\u7ad9\u76f8\u8fde\u7684\u7b2c\u4e00\u4e2a\u8f66\u7ad9\u5efa\u7acb\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9\uff0c\u5bf9\u4e8e\u5b83\u6240\u76f8\u8fde\u7684\u5176\u4ed6\u8f66\u7ad9\uff0c\u5efa\u7acb\u8fb9\u6743\u4e3a1\u7684\u8fb9\uff1b\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u56fe\uff1b\n\n\u8d77\u70b9\uff0c\u7ec8\u70b9\u90fd\u77e5\u9053\u4e86\uff0c\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\n\n\u6700\u77ed\u8def\u53ef\u4ee5\u7528spfa\uff0cfloyd\uff0c\u8fea\u6770\u65af\u7279\u62c9\uff1b\n\n\u56e0\u4e3an\u53ea\u6709200\uff0c\u8dd1\u904dfloyd\u5c31\u884c\uff1b\n\n\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1b\n\n\u5bf9\u4e8e\u6211\u4eec\u5efa\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u90fd\u53ea\u662f\u5355\u5411\u8fb9\uff0c\u4e0d\u8981\u52a0\u4e0af\u3010i\u3011\u3010j\u3011=f\u3010j\u3011\u3010i\u3011\uff1b\n\n\u9644ac\u4ee3\u7801\n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int maxn=100+10;\nconst int inf=1e+8;\nint g[maxn][maxn];\nint n,m,k,f,t;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&f,&t);\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=n;j++)\n    {g[i][j]=inf;g[i][i]=0;} \n    for(int i=1;i<=n;i++){\n    scanf(\"%d\",&k);\n    for(int j=1;j<=k;j++){\n    int a;\n    scanf(\"%d\",&a);\n    if(j==1)g[i][a]=0;\n    else g[i][a]=1;\n    }\n    }\n    for(int k=1;k<=n;k++)\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=n;j++)\n    g[i][j]=min(g[i][j],g[i][k]+g[k][j]);\n    if(g[f][t]==inf)puts(\"-1\");\n    else printf(\"%d\",g[f][t]);\n}\n//\u7c7b\u4f3c\u8fd9\u79cd\u8f6c\u5316\u7684\u8fd8\u53ef\u4ee5\u770b\u770b \u6d1b\u8c37\u4e0a\u5947\u602a\u7684\u7535\u68af\uff0c\u601d\u8def\u5dee\u4e0d\u591a\u76f8\u540c\u4f46\u662f\u8981\u7528spfa\uff1b\n//\u5e0c\u671b\u5bf9\u4f60\u4eec\u6709\u5e2e\u52a9\uff0crp++\n```",
        "postTime": 1507632628,
        "uid": 43601,
        "name": "\u56e7\u4eba232",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "## \u53cc\u7aef\u961f\u5217\u5e7f\u641c\u624d\u5e94\u8be5\u662f\u6b63\u89e3\uff01\n\n\u6b64\u9898\u4e0e\u666e\u901aBFS\u533a\u522b\u5728\u4e8e\u67090\uff0c1\u4e4b\u5206\uff0c\u961f\u5217\u5355\u8c03\u6027\u96be\u4ee5\u4fdd\u6301\uff08\u5b66\u8fc7BFS\u90fd\u5e94\u8be5\u77e5\u9053\u8fd9\u4e2a\uff09\n\n#### \u4e8e\u662f\u6211\u4eec\u628a0\u4ece\u5934\u63d2\u5165\uff0c\u628a1\u4ece\u5c3e\u63d2\u5165\uff0c\u7ef4\u62a4\u961f\u5217\u5355\u8c03\u6027\n\n\u8be6\u89c1\u4ee3\u7801\n\n\n------------\n\n```cpp\n//\u53cc\u7aef\u961f\u5217\u5e7f\u641c\uff0c\u9884\u8ba1\u590d\u6742\u5ea6O(n) \n#include<bits/stdc++.h>\nusing namespace std;\nint n,s,t;//s\u4e3a\u8d77\u70b9\uff0ct\u4e3a\u7ec8\u70b9 \nint e[105][105],k[105];//e\u5b58\u8fb9\uff0ck\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u51fa\u8fb9\u6761\u6570 \nint dis[105];//\u8ddd\u79bb \ninline int read(){\n    int x=0;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    while(ch<='9'&&ch>='0')x=(x<<3)+(x<<1)+ch-48,ch=getchar();\n    return x;\n}\ndeque<int> q;//\u53cc\u7aef\u961f\u5217\u662f\u4e00\u79cd\u7279\u522b\u9a9a\u7684STL\uff0c\u5efa\u8bae\u5b66\u4e00\u5b66\uff0c\u5f88\u7b80\u5355\u3002 \nbool vis[105];\nint main(){\n\t//\u521d\u59cb\u5316\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x7f,sizeof(dis)); \n\t//\u8bfb\u5165 \n\tn=read();s=read();t=read();\n\tfor(int i=1;i<=n;i++){\n\t\tk[i]=read();\n\t\tfor(int j=1;j<=k[i];j++){\n\t\t\te[i][j]=read();\n\t\t}\n\t}\n\tq.push_back(s);dis[s]=0;\n\t//BFS \n\twhile(q.size()){\n\t\tint x=q.front();q.pop_front();\n\t\tif(vis[x])continue;//\u7b2c\u4e00\u6b21\u53d6\u51fa\u5c31\u662f\u8be5\u70b9\u6700\u77ed\u8def\uff0c\n\t\t//\u53ef\u907f\u514d\u70b9\u91cd\u590d\u53d6\u51fa\uff08\u7c7b\u4f3cDIJIKSTRA\uff09 \n\t\tvis[x]=1;\n\t\tif(x==t){\n\t\t\tprintf(\"%d\\n\",dis[t]);\n\t\t\treturn 0;\n\t\t}\n\t\t//\u626b\u63cf\u51fa\u8fb9 \n\t\tfor(int i=1;i<=k[x];i++){\n\t\t\tint y=e[x][i];\n\t\t\tif(!k[y])continue;//\u526a\u679d\uff1a\u4e0d\u5230\u6ca1\u6709\u51fa\u8fb9\u7684\u70b9 \n\t\t\tif(i==1){\n\t\t\t\tdis[y]=min(dis[y],dis[x]);\n\t\t\t\tif(!vis[y])q.push_front(y);//\u56e0\u4e3adis[y]<=dis[x],\u6240\u4ee5\u5728\u961f\u5217\u4e2d\u6700\u5c0f\n\t\t\t\t//\u4ece\u5934\u63d2\u5165\u7ef4\u62a4\u961f\u5217\u5355\u8c03\u6027 \n\t\t\t}\n\t\t\telse{\n\t\t\t\tdis[y]=min(dis[y],dis[x]+1);\n\t\t\t\tif(!vis[y])q.push_back(y);//\u56e0\u4e3adis[y]\u5728dis[x]\u201c\u4e0b\u4e00\u5c42\u201d \uff0c \n\t\t\t\t//\u4ece\u5c3e\u63d2\u5165\u7ef4\u62a4\u961f\u5217\u5355\u8c03\u6027 \n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"-1\");\n\treturn 0;\n}\n\n```\n\n\n------------\n\n\u6570\u636e\u592a\u5f31\uff0c\u4f53\u73b0\u4e0d\u51fa\u672c\u89e3\u6cd5\u4e0e\u6700\u77ed\u8def\u7684\u5dee\u5f02\u3002\u5927\u5bb6\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u81ea\u9020\u5927\u6570\u636e\u6d4b\u8bd5\u3002\n",
        "postTime": 1562514225,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "# \u7535\u8f66\n\n\n**\u9898\u76ee\u63cf\u8ff0**\n\n\u5728\u4e00\u4e2a\u795e\u5947\u7684\u5c0f\u9547\u4e0a\u6709\u7740\u4e00\u4e2a\u7279\u522b\u7684\u7535\u8f66\u7f51\u7edc\uff0c\u5b83\u7531\u4e00\u4e9b\u8def\u53e3\u548c\u8f68\u9053\u7ec4\u6210\uff0c\u6bcf\u4e2a\u8def\u53e3\u90fd\u8fde\u63a5\u7740\u82e5\u5e72\u4e2a\u8f68\u9053\uff0c\u6bcf\u4e2a\u8f68\u9053\u90fd\u901a\u5411\u4e00\u4e2a\u8def\u53e3\uff08\u4e0d\u6392\u9664\u6709\u7684\u89c2\u5149\u8f68\u9053\u8f6c\u4e00\u5708\u540e\u8fd4\u56de\u8def\u53e3\u7684\u53ef\u80fd\uff09\u3002\u5728\u6bcf\u4e2a\u8def\u53e3\uff0c\u90fd\u6709\u4e00\u4e2a\u5f00\u5173\u51b3\u5b9a\u7740\u51fa\u53bb\u7684\u8f68\u9053\uff0c\u6bcf\u4e2a\u5f00\u5173\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u72b6\u6001\uff0c\u6bcf\u8f86\u7535\u8f66\u884c\u9a76\u5230\u8def\u53e3\u4e4b\u540e\uff0c\u53ea\u80fd\u4ece\u5f00\u5173\u6240\u6307\u5411\u7684\u8f68\u9053\u51fa\u53bb\uff0c\u5982\u679c\u7535\u8f66\u53f8\u673a\u60f3\u8d70\u53e6\u4e00\u4e2a\u8f68\u9053\uff0c\u4ed6\u5c31\u5fc5\u987b\u4e0b\u8f66\u5207\u6362\u5f00\u5173\u7684\u72b6\u6001\u3002\n\n\u4e3a\u4e86\u884c\u9a76\u5411\u76ee\u6807\u5730\u70b9\uff0c\u7535\u8f66\u53f8\u673a\u4e0d\u5f97\u4e0d\u7ecf\u5e38\u4e0b\u8f66\u6765\u5207\u6362\u5f00\u5173\uff0c\u4e8e\u662f\uff0c\u4ed6\u4eec\u60f3\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8ba1\u7b97\u4e00\u8f86\u4ece\u8def\u53e3A\u5230\u8def\u53e3B**\u6700\u5c11**\u9700\u8981\u4e0b\u8f66\u5207\u6362\u51e0\u6b21\u5f00\u5173\u3002\n\n\n\n\n------------\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u6700\u77ed\u8def\u5f84\u7684\u4e00\u4e2a\u6a21\u677f\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u601d\u8def\u662f\u505a\u4e0d\u51fa\u6765\u7684\uff0c\u6709\u4e86\u601d\u8def\u5c31\u7b80\u5355\u4e86\u3002\n\n### \u601d\u8def\uff1a\n\n**\u53ef\u4ee5\u628a\u4e00\u4e2a\u8def\u53e3\u770b\u4f5c\u4e00\u5f20\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u8f68\u9053\u662f\u56fe\u4e2d\u7684\u8fb9\uff08\u6ce8\u610f\uff1a\u8fd9\u662f\u6709\u5411\u56fe\uff09\uff0c\u6bcf\u4e00\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u8fd9\u4e2a\u8fb9\u6240\u8054\u901a\u7684\u70b9\u662f\u5426\u9700\u8981\u6309\u6309\u94ae\uff08\u9700\u8981\u6309\u6309\u94ae\u5c31\u662f1\uff0c\u4e0d\u9700\u8981\u6309\u6309\u94ae\u5c31\u662f0\uff09\u7136\u540e\u5c31\u7528\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u7b97\u51fa\u6700\u5c11\u9700\u8981\u6309\u7684\u5f00\u5173\u6570\u3002**\n\n\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u6709\u4e09\u79cd\u2014\u2014**Floyed**\u7b97\u6cd5\uff0c**Dijkstra**\u7b97\u6cd5, **Spfa**\u7b97\u6cd5\u3002\n\n## 1.Floyed\u7b97\u6cd5\uff08\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\uff09\n**\u7b97\u6cd5\u601d\u60f3\uff1a\u901a\u8fc7\u4e2d\u95f4\u70b9k\u6c42\u5f97\u662f\u4ecei ---> j\u8fd1\u8fd8\u662f\u4ecei ---> k ---> j \u8fd1\uff0c\u4ece\u800c\u6c42\u5f97\u70b9a\u5230\u70b9b\u7684\u6700\u77ed\u8def\u5f84\uff08a\u548cb\u90fd\u662f\u968f\u673a\u70b9\uff09**\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08n\u00b3\uff09**\n\ncode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define INF 0x3f3f3f3f//\u5de8\u5927\u65e0\u6bd4\u7684\u4e00\u4e2a\u6570\uff01 \nusing namespace std;\nint n, s, e, m, x, f[1001][1001];//f[i][j]\u8868\u793a\u4ecei\u5230j\u7684\u957f\u5ea6 \nvoid floy()//floyed\u6a21\u677f \n{\n\tfor(int k = 1; k <= n; k++)\n\t{\n\t\tfor(int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t{\n\t\t\t\tif(!(i == j || i == k || j == k))//i\u4e0d\u80fd\u7b49\u4e8ej\uff0c j\u4e0d\u80fd\u7b49\u4e8ek\uff0c i\u4e0d\u80fd\u7b49\u4e8ek \n\t\t\t\t{\n\t\t\t\t\tf[i][j] = min(f[i][k] + f[k][j], f[i][j]);//\u53d6\u6700\u5c0f\u503c \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(f, INF, sizeof(f));//\u521d\u59cb\u5316f \n\tscanf(\"%d %d %d\", &n, &s, &e);\n\tfor(int i = 1; i <= n; i++)//\u81ea\u5df1\u5230\u81ea\u5df1\u4e0d\u7528\u6309\u5f00\u5173 \n\t{\n\t\tf[i][i] = 0;\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &m);\n\t\tfor(int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &x);\n\t\t\tif(j == 1)//\u7b2c\u4e00\u4e2a\u8d4b\u503c\u4e3a0 \n\t\t\t{\n\t\t\t\tf[i][x] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tf[i][x] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfloy();\n\tif(f[s][e] == INF)\n\t{\n\t\tprintf(\"-1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"%d\", f[s][e]);\n\t}\n\treturn 0;\n}\n```\n\n\n------------\n\n## 2.Dijkstra\u7b97\u6cd5\uff08\u6234\u514b\u65af\u7279\u62c9\u7b97\u6cd5\uff09\n\n**\u7f3a\u9677\uff1a\u53ea\u80fd\u8ba1\u7b97\u8d77\u70b9\u53ea\u6709\u4e00\u4e2a\u7684\u60c5\u51b5\uff0c\u4e0d\u80fd\u51fa\u73b0\u8d1f\u8fb9\u6743\u7684\u60c5\u51b5**\n\n**\u7b97\u6cd5\u601d\u60f3\uff1aDijkstra\u7b97\u6cd5\u662f\u901a\u8fc7\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u65b0\u8282\u70b9\u52a0\u5165\u96c6\u5408\uff0c\u76f4\u5230\u6240\u6709\u70b9\u52a0\u5165\u505c\u6b62\u7684 \u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002**\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO\uff08n\u00b2\uff09**\n\ncode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define INF 0x3f3f3f3f//\u5de8\u5927\u65e0\u6bd4\u7684\u4e00\u4e2a\u6570\uff01 \nusing namespace std;\nint n, s, e, m, x, f[1001][1001], dis[100001];//f[i][j]\u8868\u793a\u4ecei\u5230j\u7684\u957f\u5ea6 , dis[i]\u8868\u793a\u4eces(\u8d77\u70b9)\u5230i\u7684\u957f\u5ea6 \nbool vis[100001];//vis\u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u6700\u77ed\u8def\u5f84\u4e2d\uff0c\u5728vis[i] = true, \u4e0d\u5728vis[i] = false \nint main()\n{\n\tmemset(f, INF, sizeof(f));//\u521d\u59cb\u5316f \n\tmemset(dis, INF, sizeof(dis));//\u521d\u59cb\u5316dis \n\tscanf(\"%d %d %d\", &n, &s, &e);\n\tfor(int i = 1; i <= n; i++)//\u81ea\u5df1\u5230\u81ea\u5df1\u4e0d\u7528\u6309\u5f00\u5173 \n\t{\n\t\tf[i][i] = 0;\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &m);\n\t\tfor(int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &x);\n\t\t\tif(j == 1)//\u7b2c\u4e00\u4e2a\u8d4b\u503c\u4e3a0\n\t\t\t{\n\t\t\t\tf[i][x] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tf[i][x] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++)//\u628af\u8d4b\u503c\u5230dis\u4e0a \n\t{\n\t\tdis[i] = f[s][i];//\u7531\u4e8edis[i]\u662fs\u5230i, \u90a3f\u5c31\u8981\u8d4b\u7ed9\u5b83f[s][i] \n\t}\n\tdis[s] = 0;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tint minn = INF;//minn\u53d6\u5f88\u5927\u4e00\u4e2a\u6570\uff0c \u6765\u66f4\u65b0\u6700\u77ed\u8def\u5f84 \n\t\tint k = 0;//k\u8868\u793a\u8fd9\u6b21\u5faa\u73af\u653e\u8fdb\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u6570\u7684\u4e0b\u6807 \n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(!vis[j] && dis[j] < minn)//\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u4e14\u8def\u5f84\u957f\u5c0f\u4e8eminn \n\t\t\t{\n\t\t\t\tminn = dis[j];\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\tif(!k)//\u6700\u77ed\u8def\u5f84\u5df2\u627e\u5230 \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tvis[k] = true;//\u628a\u8fd9\u4e2a\u6570\u653e\u8fdb\u6700\u77ed\u8def\u5f84\u4e2d \n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(!vis[j] && dis[j] > dis[k] + f[k][j])//\u7528\u6700\u77ed\u8def\u5f84\u4e2d\u65b0\u66f4\u65b0\u7684\u70b9\u6765\u66f4\u65b0\u5176\u4ed6\u7684\u70b9\u4e14\u4e0d\u80fd\u662f\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u70b9 \n\t\t\t{\n\t\t\t\tdis[j] = dis[k] + f[k][j];//\u66f4\u65b0 \n\t\t\t}\n\t\t}\n\t}\n\tif(dis[e] == INF)\n\t{\n\t\tprintf(\"-1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"%d\", dis[e]);\n\t}\n\treturn 0;\n}\n```\n\n\n\n------------\n## 3.Spfa\u7b97\u6cd5\uff08\u798f\u7279\u961f\u5217\u4f18\u5316\u7b97\u6cd5\uff09\n\n**\u5173\u4e8eSpfa\uff1a**\n\n# ~~\u5b83\u6b7b\u4e86~~\n\n\n\n\n\n\n\n###  \u7ed3\u675ffinish(\uff5e\uffe3\u25bd\uffe3)\uff5e",
        "postTime": 1556532199,
        "uid": 143681,
        "name": "Strong_Jelly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u7684\u91cd\u70b9\u662f\u7406\u89e3\u9898\u76ee\u5728\u8ba9\u4f60\u5e72\u4ec0\u4e48~~\n## \u601d\u8def\n### \u9898\u610f\n\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u6c42\u6700\u5c0f\u603b\u8def\u7a0b\u3002\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u8d70\u5230\u7684\u70b9\u662f\u8fd9\u4e2a\u70b9\u8fde\u51fa\u7684\u7b2c\u4e00\u6761\u8fb9\uff0c\u603b\u8def\u7a0b\u4e0d\u52a0\uff1b\u5982\u679c\u662f\u5176\u5b83\u8fb9\uff0c\u5c31\u52a0\u4e00\u3002\n\n\u6240\u4ee5\uff0c\u5728\u5efa\u8fb9\u524d\uff0c\u6240\u6709\u8fb9\u90fd\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff1b\u5efa\u8fb9\u65f6\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6761\u8fb9\uff0c\u5c31\u628a\u8fd9\u6761\u8fb9\u7684\u503c\u8d4b\u4e3a$0$\uff0c\u5426\u5219\u8d4b\u4e3a$1$\u3002\n\n### \u6c42\u6cd5\n\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff1a$n\u2264100$\u3002\u54c8\u54c8\uff0c\u76f4\u63a5$Floyd$\u4e0d\u5c31\u6c42\u51fa\u6765\u4e86\u5417\uff01\uff08~~\u4e0d\u8981\u544a\u8bc9\u6211\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662fFloyd~~\uff09\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u4e00\u4e2a\u4e09\u5c42\u66b4\u529b\uff0c\u6253\u51fa\u6765\u5c31\u7ed3\u675f\u4e86\u3002\u4e0d\u8fc7\u2026\u2026\n\n## \u7ec6\u8282\n\u8fd9\u9053\u9898\u5173\u4e8e$Floyd$\u7684\u7ec6\u8282\u8fd8\u6bd4\u8f83\u591a\uff0c\u8bf4\u4e00\u4e0b\u3002\n\n1. \u4e0a\u9762\u63d0\u5230\u8fc7\u7684\uff0c\u6240\u6709\u8fb9**\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77**\u3002\n\n2. $d[i][j]$\u548c$d[j][i]$\u53ef\u662f**\u4e0d\u4e00\u6837**\u7684\uff0c\u5343\u4e07\u4e0d\u80fd\u641e\u53cd\u3002\u6bd4\u5982\u6838\u5fc3\u4ee3\u7801\u4e2d\uff0c\u5e94\u8be5\u4e3a\n```cpp\n//d[i][j]\u8868\u793ai\u5230j\u7684\u8ddd\u79bb\uff0ck\u4e3a\u679a\u4e3e\u7684\u4e2d\u8f6c\u8282\u70b9\nd[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n```\n\u800c\u4e0d\u662f\n```cpp\nd[i][j]=min(d[i][j],d[i][k]+d[j][k]);\n```\n\u4e5f\u5c31\u662f\u8bf4$d[i][j]\u2260d[j][i]$\u3002\n\n3. \u5982\u679c\u4e0d\u80fd\u5230\u8fbe\uff0c**\u8f93\u51fa**$-1$\u3002\n\n## \u4ee3\u7801\n~~\u76f8\u4fe1\u6ca1\u6709\u591a\u5c11\u4eba\u559c\u6b22\u4e0a\u9762\u7684\u4e00\u901a\u5206\u6790\u5427~~\uff0c\u90a3\u4e48\uff0c\u4f60\u4eec\u559c\u6b22\u7684\u4ee3\u7801\u6765\u4e86\u2014\u2014\n\n\u4e0d\u52a0\u6ce8\u91ca\u957f\u5ea6$26$\u884c\uff08~~\u6709\u4e00\u4e9b\u6211\u5f88\u4e60\u60ef\u7684\u538b\u884c~~\uff09\uff0c\u6700\u5927\u6d4b\u8bd5\u70b9\u65f6\u95f4$10ms$\uff08~~\u6bd4\u8f83\u5feb~~\uff09\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>//\u7528\u5230memset\nusing namespace std;\nconst int MAXN=110;\nint d[MAXN][MAXN];//d[i][j]\u8868\u793ai\u5230j\u7684\u8ddd\u79bb\nint main(){\n\tmemset(d,0x3f,sizeof(d));//\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\n\tint n,m,s,t,v;//s\u662f\u8d77\u70b9\uff0ct\u662f\u7ec8\u70b9\n\tscanf(\"%d%d%d\",&n,&s,&t);\n\tfor(int i=1;i<=n;i++){//\u8bfb\u5165\u8fb9\n\t\tscanf(\"%d\",&m);\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tscanf(\"%d\",&v);\n\t\t\td[i][v]=(j==1)?0:1;//\u5efa\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u662f\u7b2c\u4e00\u6761\u8fb9\n            //\u8fd9\u91cc\u7528\u5230\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u7b49\u540c\u4e8eif(j==1) d[i][v]=0; else d[i][v]=1;\n\t\t}\n\t}\n    //floyd\n\tfor(int k=1;k<=n;k++)//\u904d\u5386\u4e2d\u8f6c\u8282\u70b9\n\t\tfor(int i=1;i<=n;i++)//\u904d\u5386\u8282\u70b9\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(i==j||i==k||j==k) continue;//\u5224\u65ad\u662f\u5426\u6709\u91cd\n\t\t\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);//\u516c\u5f0f\n\t\t\t}\n\tprintf(\"%d\",(d[s][t]==0x3f3f3f3f)?-1:d[s][t]);//\u8f93\u51fa\uff0c\u6ce8\u610f\u65e0\u6cd5\u5230\u8fbe\u8981\u8f93\u51fa-1\n\treturn 0;//\u534e\u4e3d\u7ed3\u675f\n}\n```\n\u770b\u6211\u8fd9\u4e48\u8f9b\u82e6\uff0c\u603b\u5f97\u70b9\u4e2a\u8d5e\u518d\u8d70\u5440~",
        "postTime": 1576503970,
        "uid": 130981,
        "name": "dingcx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u00b7\u4f60\u6253\u7b97\u76f4\u63a5\u8df3\u8fc7\u56fe\u8bba\u6765\u505a\u6700\u77ed\u8def\n\n\u00b7\u4f60\u7528\u4e86C++dijkstra\u90bb\u63a5\u77e9\u9635\u6765\u505a\u8fd9\u4e00\u9898\n\n\u00b7\u4f60\u53d1\u73b0\u8fd9\u9898\u8981\u4ee5\u6309\u5f00\u5173\u6765\u5f53\u505a\u6743\u503c\n\n\u00b7\u662f\u9ed8\u8ba4\u72b6\u6001\u8bf4\u660e\u8fd9\u4e2a\u8def\u53e3\u5230\u9ed8\u8ba4\u8def\u53e3\u7684\u8f68\u9053\u6743\u503c\u4e3a0\n\n\u00b7\u5426\u5219\u4e3a1\n\n```cpp\n    #include<cstdio>\n    using namespace std;\n    const int INF=2e9,maxn=101;\n    int n,a,b,curr,mn,g[maxn][maxn],dis[maxn];\n    bool vis[maxn];\n    int main()\n    {\n        for(int i=0;i<maxn;i++)\n          for(int j=0;j<maxn;j++)\n            g[i][j]=INF;\n        for(int i=0;i<maxn;i++)g[i][i]=0;\n        for(int i=0;i<maxn;i++)dis[i]=INF;\n        scanf(\"%d%d%d\",&n,&a,&b);\n        for(int i=0,m;i<n;i++)\n        {\n            scanf(\"%d\",&m);\n            for(int j=0,d;j<m;j++)\n            {\n                scanf(\"%d\",&d);\n                if(j==0)g[i+1][d]=0;\n                else g[i+1][d]=1;\n            }\n        }\n        curr=a;vis[a]=true;dis[a]=0;\n        while(!vis[b])\n        {\n            for(int i=1;i<=n;i++)\n            {\n                if(vis[i]||g[curr][i]==INF)continue;\n                if(dis[i]>g[curr][i]+dis[curr])dis[i]=g[curr][i]+dis[curr];\n            }\n            mn=INF;\n            for(int i=1;i<=n;i++)\n            {\n                if(vis[i]||dis[i]>=mn)continue;\n                curr=i;mn=dis[i];\n            }\n            if(mn==INF)\n            {\n                printf(\"-1\");\n                return 0;\n            }\n            vis[curr]=true;\n        }\n        printf(\"%d \",dis[b]);\n}\n```",
        "postTime": 1513081808,
        "uid": 52914,
        "name": "MornEveGlow",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u521a\u521a\u4e0a\u624b\u6700\u77ed\u8def\u7684\u4eba\n\n\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u4e2a\u9898\u6211\u662f\u5413\u50bb\u4e86\u7684\n\n\u540e\u6765\u4e00\u60f3\n\n\u5f00\u4e00\u6b21\u5f00\u5173\uff0c\u8fb9\u6743\u4e3a1\uff1b\n\n\u4e0d\u7528\u5f00\u5f00\u5173\uff0c\u8fb9\u6743\u4e3a0.\n\n\u56e0\u4e3a\u91cd\u590d\u8d70dist\u4f1a\u66f4\u5927\uff0c\u6240\u4ee5\u4f1a\u88ab\u81ea\u52a8\u8fc7\u6ee4\u6389\n\n\u89e3\u51b3\u4e86\uff01\n\n\u5c0f\u7ec6\u8282\uff1a\n\n\u6b64\u9898\u4e3a\u5355\u5411\u8fb9\u3002\n\n\u5e76\u4e14\u7528\u90bb\u63a5\u8868\u5b58\u7684\u65f6\u5019\uff0c1\u4e2a\u8def\u53e3\u53ef\u4ee5\u901a\u5f8099\u4e2a\u8def\u53e3\uff0c\u6240\u4ee5\u6570\u7ec4\u8981\u5f00$100*100$\u81f3\u5c11\n\n(\u6211\u5f00\u90bb\u63a5\u8868\u7684\u6570\u7ec4\u603b\u662f\u5f00\u5c0f\uff0c\u96be\u53d7\u6781\u4e86)\n\nSPFA\u4ee3\u7801\uff1a\n```\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#define INF 100000000\nusing namespace std;\nint n,a,b,head[201],nxt[20002],w[20002],to[20002],k,dist[101],en,t;\nqueue<int> q;\nbool v[20002];\nvoid add(int x,int y,int z){\n\ten++;\n\tnxt[en]=head[x];\n\thead[x]=en;\n\tto[en]=y;\n\tw[en]=z;\n}\nvoid spfa(){\n\tfor(int i=1;i<=n;i++) dist[i]=INF;//\u521d\u59cb\u5316\n\tdist[a]=0;\n\tq.push(a);\n\tv[a]=true;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tv[x]=false;\n\t\tfor(int i=head[x];i!=-1;i=nxt[i])\n\t\t\tif(to[i]!=-1){\n\t\t\t\tif(dist[to[i]]>dist[x]+w[i]){\n\t\t\t\t\tdist[to[i]]=dist[x]+w[i];\n\t\t\t\t\tif(!v[to[i]]) q.push(to[i]),v[to[i]]=true;\t\t\n\t\t\t\t}\n\t\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&a,&b);\n\tfor(int i=1;i<=n;i++) to[i]=-1,head[i]=-1,nxt[i]=-1;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&t);\n\t\tfor(int j=1;j<=t;j++){\n\t\t\tscanf(\"%d\",&k);\n\t\t\tif(j==1) add(i,k,0);//\u8f68\u9053\u5f53\u524d\u6307\u5411\u7684\u8def\u53e3\uff0c\u8fd9\u6761\u8def\u8fb9\u6743\u4e3a0\n\t\t\telse add(i,k,1);//\u8fb9\u6743\u4e3a\u4e00\u7684\u60c5\u51b5\uff0c\u5373\u8981\u6309\u5f00\u5173\n\t\t}\n\t}\n\tspfa();\n\tif(dist[b]==INF){\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}//\u8bb0\u5f97\u8981\u5224\u65ad\u662f\u5426\u6709\u89e3\u54e6\uff01\uff01\uff01\uff01\uff01\n\tprintf(\"%d\\n\",dist[b]);\n\treturn 0;\n} \n```\n\n\uff08\u5b66\u4f1aSPFA\u540e\u5c31\u7231\u4e0a\u4e86\u5b83\u3002\u3002\u3002\uff09",
        "postTime": 1535441627,
        "uid": 44424,
        "name": "zhutier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "luogu P1346\u7535\u8f66 \u9898\u89e3\n\nqwq\u914d\u5408[Blog](https://www.luogu.org/blog/149815/solution-p1346)\u98df\u7528\u66f4\u4f73\n\n[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1346)\n\n~~\u8bf4\u53e5\u95f2\u8bdd\uff1a\u8981\u4e0d\u662f\u4e3a\u4e86\u5237\u793e\u533a\u8d21\u732e\u6211\u624d\u4e0d\u4f1a\u6765\u505a\u8fd9\u9053\u6c34\u9898\u5462~~\n\n\u8fd9\u9898\u5f88\u660e\u663e\u6700\u77ed\u8def\uff0c\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u662f\u5426\u4e0b\u8f66\u5207\u6362\u5f00\u5173\uff0c\u63a5\u4e0b\u6765\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5373\u53ef\n\n## \u5173\u4e8e\u6700\u77ed\u8def\n\n\u76ee\u524d\u6700\u77ed\u8def\u4e3b\u6d41\u7b97\u6cd5\u6709\u4e09\u79cd\uff1aFloyd\uff0cDijkstra\uff0cSPFA\n\n### Floyd\u7b97\u6cd5\n\n\u65e0\u8111dp\u2026\u2026\u7531\u4e8e\u5176O($N^{3}$)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u4ecb\u7ecd\n\n### Dijkstra\u7b97\u6cd5\n\n\u8fd9\u662f\u76ee\u524dOIer\u4eec\u6700\u7231\u7528\u7684\u7b97\u6cd5\uff0c\u7ecf\u8fc7\u5806\u4f18\u5316\u7684Dij\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(N log N)\n\n~~\u5982\u679c\u4e0d\u61c2Dij\u51fa\u95e8\u5de6\u8f6c[\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09](https://www.luogu.org/problemnew/solution/P4779)~~\n\nCode\u2193\n```cpp\n#include<cstdio>\n#include<queue>\n#define MAXN 101\n#define MAXM 10001\n#define INF 2147483647\n#define ri register int \nusing namespace std;\nint n,s,t,edge_sum;\nint dis[MAXN],head[MAXN];\nbool vis[MAXN];\nstruct Edge{\n\tint next,to,dis;\n}edge[MAXM];//\u524d\u5411\u661f\u5b58\u56feQwQ\nvoid addedge(int from,int to,int dis){\n\tedge[++edge_sum].next=head[from];\n\tedge[edge_sum].to=to;\n\tedge[edge_sum].dis=dis;\n\thead[from]=edge_sum;\n}\nstruct Node{\n\tint u,v;\n\tbool operator <(const Node& rhs) const {\n        return v>rhs.v;\n    }\n};\npriority_queue<Node> q;//STL\u4f18\u5148\u961f\u5217\uff0c\u7528\u6765\u6a21\u62df\u5c0f\u6839\u5806\nvoid dijkstra(){//\u5806\u4f18\u5316Dijkstra\n\tfor(ri i=1;i<=n;i++) dis[i]=INF;//\u521d\u59cb\u5316\u4e3a2147483647\n\tdis[s]=0;\n\tq.push((Node){s,0});\n\twhile(!q.empty()){\n\t\tNode t=q.top();\n\t\tq.pop();\n\t\tint u=t.u;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(register int j=head[u];j;j=edge[j].next){\n\t\t\tif(dis[u]+edge[j].dis<dis[edge[j].to])//\u5982\u679c\u66f4\u77ed\u5c31\u66f4\u65b0{\n\t\t\t\tdis[edge[j].to]=dis[u]+edge[j].dis;\n\t\t\t\tif(!vis[edge[j].to]) q.push((Node){edge[j].to,dis[edge[j].to]});//\u5165\u961f\n\t\t\t} \n    \t}\n\t}\n}\nint main(){\n\tscanf(\"%d %d %d\",&n,&s,&t);\n\tfor(ri i=1;i<=n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d\",&x);\n\t\tif(x==0) continue ;\n\t\tscanf(\"%d\",&y);\n\t\taddedge(i,y,0);//\u4e0d\u9700\u8981\u5207\u5f00\u5173\n\t\tfor(ri j=2;j<=x;j++){\n\t\t\tscanf(\"%d\",&y);\n\t\t\taddedge(i,y,1);//\u9700\u8981\u5207\u5f00\u5173\n\t\t}\n\t} \n\tdijkstra();\n\tif(dis[t]==INF) printf(\"-1\\n\");\n\telse printf(\"%d\\n\",dis[t]);\n\treturn 0;\n} \n```\n\u6ce8\u610f\uff01Dijkstra\u4e0d\u80fd\u5904\u7406**\u5e26\u8d1f\u6743\u56de\u8def\u7684\u56fe**\uff01\n\nSPFA\u7b97\u6cd5\n\nSPFA\u53ef\u4ee5\u7528\u6765\u5904\u7406\u5e26\u8d1f\u6743\u56de\u8def\u7684\u56fe\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(NM)\n\n\n\u4ec0\u4e48\uff0c\u4f60\u95ee\u6211\u4ee3\u7801\u5728\u54ea\u513f\uff1f\n\n~~\u8fd9\u90fd9012\u5e74\u4e86\u8fd8\u7528SPFA\uff1f\uff1f\uff1f~~\n\n# \u5173\u4e8eSPFA\n### ~~\u5b83\u6b7b\u4e86~~\n\nNOI2018D1T1\uff0c\u8840\u7684\u6559\u8bad\n\n**\u7406\u60f3\u4e2d\u7684\u5355\u6e90\u6700\u77ed\u8def**\uff1a~~n<=100000\uff0c\u5e26\u6709\u8d1f\u6743\u56de\u8def~~\n\n**qwq**",
        "postTime": 1566372686,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u9996\u5148\u5efa\u56fe\u5728[\u8fd9\u91cc](https://www.luogu.org/blog/user43601/solution-p1346)\u5df2\u7ecf\u8bb2\u7684\u5f88\u597d\u4e86\uff0c\u6211\u5c31\u4e0d\u8bb2\u4e86\u3002  \n\u6211\u53ea\u662f\u6765\u8bb2\u4e0b 01BFS \u600e\u4e48\u5199\u3002  \n\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u90fd\u53ea\u6709 0 \u6216 1 \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528 01BFS \u6c42\u89e3\u3002\n## \u4e3a\u4ec0\u4e48\u8981\u5b66 01BFS\n01BFS\u7684\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002  \n## 01BFS\n1. \u5c06\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u8d4b\u4e3a INF\n2. \u5c06\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u8d4b\u4e3a 0\n3. \u5c06\u6e90\u70b9\u7684\u6807\u53f7\u5165\u961f\n4. \u53d6\u51fa\u961f\u5934\u70b9 $u$ \uff0c\u904d\u5386\u51fa\u8fb9 $v$  \n$\\quad$\u5982\u679c\u53ef\u4ee5\u677e\u5f1b\uff0c\u5219  \n$\\quad\\quad$\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c  \n$\\quad\\quad$\u5982\u679c $e=(u,v)$ \u8fb9\u6743\u4e3a 0 \uff0c\u5219\u5c06 $v$ \u538b\u5165\u961f\u5934  \n$\\quad\\quad$\u5426\u5219\u5c06 $v$ \u538b\u5165\u961f\u5c3e\n5. \u82e5\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u5219\u91cd\u590d\u6b65\u9aa44  \n\n**\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002**\uff08\u76f8\u5173\u5185\u5bb9\u89c1\u201c\u5199\u5728\u540e\u9762\u201d\uff09  \n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstring>\n#include <iostream>\n#include <queue>\n\nusing namespace std;\n\nconst int MAXN = 107, MAXM = MAXN * MAXN - MAXN;\n\nstruct Edge\n{\n  int to, next, len;\n  Edge() {}\n  Edge(int to, int next, int len)\n      : to(to), next(next), len(len) {}\n} e[MAXM];\nint tot, head[MAXN];\ninline void addEdge(int from, int to, int len)\n{\n  e[++tot] = Edge(to, head[from], len);\n  head[from] = tot;\n}\n\nint a, b, n, dis[MAXN];\n\ndeque<int> q;\ninline int bfs()\n{\n  memset(dis, 0x3f, sizeof(dis));\n  dis[a] = 0;\n  q.push_back(a);\n  while (!q.empty())\n  {\n    int x = q.front();\n    q.pop_front();\n    for (int to, i = head[x]; i; i = e[i].next)\n    {\n      if (dis[to = e[i].to] <= dis[x] + e[i].len) continue;\n      dis[to] = dis[x] + e[i].len; // \u677e\u5f1b\n      if (e[i].len)                // len[i] = 1\n        q.push_back(to);\n      else\n        q.push_front(to);\n    }\n  }\n  return dis[b] == 0x3f3f3f3f ? -1 : dis[b];\n}\n\nint main()\n{\n  cin >> n >> a >> b;\n  for (int i = 1, j, k; i <= n; i++)\n  {\n    cin >> k;\n    bool flag = false;\n    while (k--)\n    {\n      cin >> j;\n      addEdge(i, j, flag);\n      flag = true;\n    }\n  }\n  cout << bfs() << endl;\n  return 0;\n}\n```\n\n## \u5199\u5728\u540e\u9762\n[01BFS\u6559\u7a0b](https://codeforces.com/blog/entry/22276)  \n[\u6211\u7684\u535a\u5ba2\uff08\u8fd9\u4e2a\u94fe\u63a5\u4f3c\u4e4e\u76ee\u524d\u8bbf\u95ee\u4e0d\u4e86\uff09](https://oi.callg.cf/2018/12-19/LG1346/)  \n~~\u5176\u5b9e 01BFS \u5b9e\u9645\u6548\u7387\u5e76\u6ca1\u6709\u6bd4\u5176\u4ed6\u7b97\u6cd5\u9ad8\u5230\u4e0d\u77e5\u9053\u54ea\u91cc\u53bb~~",
        "postTime": 1545230081,
        "uid": 55249,
        "name": "callG",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u5e76\u6ca1\u6709\u4eba\u7528Floyd\uff0c\uff0c\u8fd9\u91cc\u6211\u5c31\u4ecb\u7ecd\u4e00\u4e0bFloyd\u7684\u505a\u6cd5\u5427\uff0c\u4e0d\u77e5\u9053Floyd\u7684\u81ea\u884c\u767e\u5ea6\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint Map[110][110],n,from,want,z[110][110];\nint main()\n{\n    int i,k,j,num;\n    scanf(\"%d%d%d\",&n,&from,&want);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n            Map[i][j]=99999; //\u56e0\u4e3a\u540e\u9762\u8981\u7528min\u51fd\u6570\uff0c\u6240\u4ee5\u5148\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u6781\u5927\u503c\uff08\u8868\u793a\u672c\u849f\u84bb\u5e76\u4e0d\u77e5\u9053\u4e8c\u7ef4\u6570\u7ec4\u600e\u4e48\u521d\u59cb\u5316\uff0c\uff0c\u4e8e\u662f\uff0c\uff0c\uff09\n    for(i=1;i<=n;i++)//\u8bfb\u5165\n    {\n        scanf(\"%d\",&num);\n        for(j=1;j<=num;j++)\n        {\n            scanf(\"%d\",&k);\n            if(j==1) Map[i][k]=0;//\u7b2c\u4e00\u4e2a\u7684\u8f6c\u6362\u6b21\u6570\u4e3a0\n            else Map[i][k]=1;\n            z[i][k]=1;//z\u8bb0\u5f55\u80fd\u4e0d\u80fd\u5230\u8fbe\n        }\n    }\n    for(k=1;k<=n;k++)//k\u8981\u653e\u5728\u6700\u524d\u9762\n        for(i=1;i<=n;i++)\n            for(j=1;j<=n;j++)\n                if(z[i][k]==1&&z[k][j]==1) Map[i][j]=min(Map[i][k]+Map[k][j],Map[i][j]),z[i][j]=1;//\u5982\u679ci\u5230k\uff0ck\u5230j\u90fd\u662f\u6709\u8def\u7684\uff0c\u90a3\u5c31\u53d6\u6700\u5c0f\u503c\uff0c\u5e76\u4e14\u628ai\uff0cj\u4e4b\u95f4\u8bbe\u4e3a\u53ef\u5230\u8fbe\uff08\u8fd9\u91cc\u6ce8\u610fz[i][j]\u8fd9\u6b65\u5fc5\u987b\u6709\uff0c\u5e76\u4e14\u8981\u7528min\u51fd\u6570\uff0c\u4e0d\u80fd\u653e\u5728if\u91cc\u9762\uff0c\u7b2c\u4e00\u6b21\u63d0\u4ea4\u5c31\u662f\u8fd9\u4e2a\u9519\u7684\uff0c\uff0c\u5168\u90e8\u8f93\u51fa-1\uff0c\u56e0\u4e3a\u90fd\u653e\u5728if\u91cc\u9762\u53ef\u80fd\u8fdb\u4e0d\u4e86if\uff08\u6211\u4e4b\u524d\u6ca1\u6709\u521d\u59cb\u5316\u4e3a99999\uff09\u4e8e\u662f\u53ef\u80fd\u5c31\u4f1a\u88ab\u8bb0\u5f55\u4e3a\u4e0d\u53ef\u5230\u8fbe\uff0c\uff0c\u7136\u540e\u5c31\u4e0d\u65ad\u8f93\u51fa-1.\u3002\uff09 \n    if(z[from][want]==1)printf(\"%d\",Map[from][want]);//\u5982\u679c\u53ef\u5230\u8fbe\uff0c\u8f93\u51fa\u6700\u77ed\u8def\n    else printf(\"-1\");//\u4e0d\u80fd\u8f93\u51fa-1\n    return 0;\n}\n\n```",
        "postTime": 1501220545,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u672c\u9898\u7684\u96be\u70b9\u5728\u5efa\u56fe\u4e0a\uff08\u8981\u4e0d\u5c31\u662f\u4e2a\u6734\u7d20\u7684\u6700\u77ed\u8def\u6a21\u677f\uff09\n\n\u56e0\u6570\u636e<=100\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\u7684Floyd\u53ef\u4ee5\u8dd1\u8fc7\n\n\u5c31\u662f\u628a\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7684\u8fb9\u6743\u8bbe\u4e3a0\uff0c\u9700\u8981\u63b0\u2642\u5f00\u5173\u7684\u8fb9\u6743\u8bbe\u4e3a1\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u6109\u5feb\u5730\u505a\u9898\u5566\n\n\u5148\u4ecb\u7ecd\u4e00\u4e0bFloyd\u7684\u6a21\u677f:\n```\nfor(int k=1;k<=n;k++)//k\u76f8\u5f53\u4e8e\u9636\u6bb5\uff0c\u521d\u5b66\u8005\u5bb9\u6613\u5199\u6210i,j,k\uff0c\u8981\u6ce8\u610f\u54e6\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tdis[i][j]=min(dis[i][k]+dis[k][j],dis[i][j]);//\u8fd9\u662f\u677e\u5f1b\u64cd\u4f5c\uff08\u4e5f\u662f\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u57fa\u7840\uff09\n                //\u7531\u4e09\u89d2\u5f62\u4e24\u8fb9\u4e4b\u548c\u5927\u4e8e\u7b2c\u4e09\u8fb9\u53ef\u4ee5\u63a8\u51fa\n\t\t\t}\n\t\t}\n\t}\n```\n\u6211\u4eec\u53ef\u80fd\u4f1a\u5947\u602a\uff0c\u8fd9\u4e2aFloyd\u770b\u8d77\u6765\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u719f\u6089\u5462\uff1f\n\n\u6ca1\u9519\uff0c\u5b83\u5c31\u662f\u4e2aDP\uff01\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b:\n```\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&s,&e);//\u8282\u70b9\u6570\uff0c\u8d77\u70b9\uff0c\u7ec8\u70b9\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tdis[i][j]=0x3f;//\u90bb\u63a5\u6570\u7ec4\u91cd\u7f6e\n\tfor(int i=1;i<=n;i++)  dis[i][i]=0;//\u90bb\u63a5\u6570\u7ec4\u91cd\u7f6e\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&k);\n\t\tfor(int j=1;j<=k;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(j==1)  dis[i][x]=0;//\u5982\u679c\u4e0d\u9700\u6273\u5f00\u5173\u5c31\u8bbe\u4e3a1\n\t\t\telse dis[i][x]=1;//\u5426\u5219\u4e3a0\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++)\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\t{\n\t\tdis[i][j]=min(dis[i][j],dis[k][j]+dis[i][k]);//\u4e0a\u6587\u6240\u63d0\u5230\u7684FLoyd\n\t}\n\tif(dis[s][e]==0x3f)  cout<<-1;//\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u5c31\u8f93\u51fa1\n\telse printf(\"%d\",dis[s][e]);//\u5426\u5219\u8f93\u51fa\u6700\u77ed\u8def\n\treturn 0;\n}\n\u6b64\u9898\u8fd8\u53ef\u4ee5\u7528Dijkstra\uff08n^2,\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9\u6743\uff09\uff0cSPFA\uff08\u5df2\u6b7b\uff09\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u81ea\u5df1\u63a2\u7d22\u3002\n\n\u6700\u540e\uff0c\u5e0c\u671b\u7ba1\u7406\u5927\u5927\u80fd\u591f\u901a\u8fc7\u8fd9\u7bc7\u9898\u89e3!",
        "postTime": 1569165452,
        "uid": 118300,
        "name": "\u626c\u76932006",
        "ccfLevel": 0,
        "title": "P1346 \u7535\u8f66 \u9898\u89e3"
    },
    {
        "content": "\u521a\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u5176\u5b9e\u662f\u6709\u70b9\u61f5\u7684\uff0c\u4f46\u4ed4\u7ec6\u4e00\u60f3\uff0c\u53ea\u8981\u628a\u8fb9\u7684\u6743\u503c\u5904\u7406\u597d\u4e86\uff0c\u8fd9\u5c31\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u6a21\u677f\u9898\n\n\u90a3\u4e48\u600e\u6837\u53bb\u5efa\u56fe\u5462\uff1f\u9898\u76ee\u7ed9\u7684\u6761\u4ef6\u63d0\u5230\n```\n\u6bcf\u4e2a\u5f00\u5173\u90fd\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u72b6\u6001\uff0c\u6bcf\u8f86\u7535\u8f66\u884c\u9a76\u5230\u8def\u53e3\u4e4b\u540e\uff0c\u53ea\u80fd\u4ece\u5f00\u5173\u6240\u6307\u5411\u7684\u8f68\u9053\u51fa\u53bb\uff0c\u5982\u679c\u7535\u8f66\u53f8\u673a\u60f3\u8d70\u53e6\u4e00\u4e2a\u8f68\u9053\uff0c\u4ed6\u5c31\u5fc5\u987b\u4e0b\u8f66\u5207\u6362\u5f00\u5173\u7684\u72b6\u6001\n```\n\u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\u6765\u770b\uff0c\u5982\u679c\u53f8\u673a\u8d70\u8be5\u8def\u53e3\u4e0e\u4e00\u5f00\u59cb\u5f00\u5173\u6240\u6307\u5411\u7684\u8def\u53e3\u7684\u8fd9\u6761\u8fb9\uff0c\u662f\u4e0d\u7528\u5207\u6362\u5f00\u5173\u7684\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u8d4b\u4e3a\u96f6\uff0c\u5426\u5219\u5c31\u628a\u8fb9\u7684\u6743\u503c\u8d4b\u4e3a1\uff0c\u8fd9\u6837\u5c31\u628a\u95ee\u9898\u8f6c\u6362\u6210\u4e86\u88f8\u7684\u6700\u77ed\u8def\n\n\u770b\u5230\u6570\u636e\u8303\u56f42<=$n$<=100\uff08~~\u8fd9\u4e48\u5c0f\u7684\u6570\u636e~~\uff09,n\u4e09\u65b9\u8fc7\u6389\u7ef0\u7ef0\u6709\u4f59\uff0c\u4e0d\u7981\u60f3\u5230\u4e86\u7528Floyed\uff0c\u4ee3\u7801\u7b80\u5355\u800c\u4e14\u597d\u5199\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,a,b,k,x,f[103][103];\nint main()\n{\n\tcin>>n>>a>>b;\n\tfor(int i=1; i<=n; i++)\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tf[i][j]=1e9;  //\u7ed9\u6bcf\u4e00\u6761\u8fb9\u5148\u521d\u59cb\u5316\u6210\u6700\u5927\u503c \n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tcin>>k;\n\t\tfor(int j=0; j<k; j++)\n\t\t{\n\t\t\tcin>>x;\n\t\t\tif(j==0)\n\t\t\t\tf[i][x]=0;  //\u7b2c\u4e00\u6761\u8fb9\u6743\u503c\u4e3a0 \n\t\t\telse\n\t\t\t\tf[i][x]=1;  //\u53e6\u5916\u7684\u8fb9\u6743\u503c\u4e3a1 \n\t\t}  //\u8fd8\u6709\u6ce8\u610f\u8fd9\u662f\u5355\u5411\u8fb9 \n\t}\n\tfor(int l=1; l<=n; l++)\n\t\tfor(int i=1; i<=n; i++)\n\t\t\tfor(int j=1; j<=n; j++)\n\t\t\t\tf[i][j]=min(f[i][l]+f[l][j],f[i][j]);  //Floyed\u8dd1\u4e00\u904d\u6700\u77ed\u8def \n\tif(f[a][b]==1e9)  //\u5982\u679c\u65e0\u89e3\u5c31\u8f93\u51fa-1 \n\t\tcout<<-1;\n\telse\n\t\tcout<<f[a][b]; \n\treturn 0;\n}\n```\n",
        "postTime": 1565537110,
        "uid": 78001,
        "name": "dz_ice",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u6570\u636e\u975e\u5e38\u7684\u5c0f\uff0c\u4ee5\u81f3\u4e8e\u5404\u79cd\u7b97\u6cd5\u90fd\u80fd\u6c34\u8fc7\uff0c\u5176\u5b9e\u6211\u662f\u770b\u5230\u8fd9\u9898\u662f\u6700\u77ed\u8def\u4ee5\u540e\u60f3\u6765\u7ec3\u7ec3\u6700\u77ed\u8def\u7684\uff0c\u7136\u540e\u8bfb\u5b8c\u9898\u679c\u65ad\u5199\u4e86\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u77e5\u9053\u8fd9\u9898dp\u53ef\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u5728\u73af\u4e0a\u8dd1dp\u3002\u3002\u3002\u3002\n\n\u4e0b\u9762\u8bf4\u4e00\u4e0b\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u5bf9\u6839\u8282\u70b9\u8fdb\u884cdfs\uff0c\u540c\u65f6\u8bb0\u4e00\u4e2avis\u6570\u7ec4\uff0c\u9996\u5148\u8dd1\u9ed8\u8ba4\u7684\u8def\uff0c\u8fd9\u6837\u6743\u503c\u4e0d\u4f1a+1\uff0c\u7136\u540e\u5728\u8dd1\u5176\u4ed6\u7684\u8def\uff0c\u540c\u65f6\u6743\u503c+1.\u6211\u4eec\u6bcf\u6b21\u53d6\u6700\u5c0f\u503c\uff0c\u7136\u540e\u8bb0\u5f55\u5728dp\u6570\u7ec4\u4e2d\uff0c\u56e0\u4e3a\u662f\u56fe\uff0c\u6240\u4ee5\u4ee5\u540e\u904d\u5386\u5230\u8fd9\u4e2a\u8282\u70b9\u65f6\u76f4\u63a5\u8fd4\u56dedp\u7684\u503c\u5373\u53ef\u3002\n\n\u90a3\u4e48dp\u6570\u7ec4\u8bb0\u5f55\u7684\u5c31\u662f\u5f53\u524d\u8282\u70b9\u5230\u76ee\u6807\u70b9\u82b1\u8d39\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u9898\u4e2d\u8bf4\u4e86\u6709\u73af\u3002\u90a3\u4e48\u5176\u5b9e\u8bb0\u5fc6\u5316\u641c\u7d22\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u5462\uff1f\uff1f\n\n\u6211\u4eec\u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff0c1\u76ee\u6807\u70b9\u5728\u73af\u4e2d\uff0c2\u76ee\u6807\u70b9\u4e0d\u5728\u73af\u4e2d\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u6211\u4eec\u5728\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65f6\u5019\u81ea\u52a8\u5c31\u89e3\u51b3\u4e86\uff0c\u5982\u679c\u8dd1\u5165\u4e86\u73af\u4e2d\uff0c\u4f46\u662f\u6709\u76ee\u6807\u70b9\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de0\uff0c\u4e5f\u5c31\u662f\u8bf4\u73af\u90fd\u8dd1\u4e0d\u5b8c\u5c31\u88ab\u76ee\u6807\u70b9\u5361\u4f4f\u4e86\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u6211\u4eec\u8fdb\u884c\u7279\u5224\uff0c\u8fd9\u65f6\u5c31\u7528\u5230\u4e86vis\u6570\u7ec4\u3002\u56e0\u4e3a\u5982\u679c\u51fa\u73b0\u4e86\u73af\uff0c\u90a3\u4e48\u73af\u8d77\u70b9\u7684dp\u503c\u8fd8\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u4f46\u662f\u4ed6\u7684vis\u503c\u5df2\u7ecf\u88ab\u6539\u53d8\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5224\u65ad\uff0c\u5982\u679c\u51fa\u73b0\u4e86dp\u6ca1\u88ab\u66f4\u65b0\u4e14vis\u503c\u4e3a\u771f\u65f6\uff0c\u5373\u4e3a\u73af\u3002\u90a3\u4e48\u51fa\u73b0\u4e86\u73af\u6211\u4eec\u80af\u5b9a\u662f\u4e0d\u8d70\u4e86\uff08\u4e0d\u8d70\u6574\u4e2a\u73af\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4e0d\u8d70\u90e8\u5206\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73af\u4e0a\u63a5\u51fa\u4e00\u6761\u94fe\u662f\u6211\u4eec\u8981\u8d70\u7684\uff0c\u90a3\u4e48\u94fe\u540e\u7684\u90e8\u5206\u6211\u4eec\u4e00\u5b9a\u4e0d\u8d70\u3002\u7ed9\u4ed6\u8d4b\u4e00\u4e2a\u6781\u5927\u503c\u5e9f\u6389\u8fd9\u6761\u94fe\u5c31\u597d\u4e86\u3002\u5728\u5206\u53c9\u70b9\u5904\u81ea\u7136\u5c31\u4f1a\u5728\u53d6min\u7684\u8fc7\u7a0b\u4e2d\u628a\u8fd9\u4e2a\u6781\u5927\u503c\u820d\u53bb\uff0c\u4e5f\u5c31\u662f\u4e0d\u8d70\u73af\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint n,s,t,tot;\nstruct line\n{\n\tint to,next;\n}edge[100000];\nint dp[200],g[200],first[200];\t//first means acquiescent edge; g means head of adjacency list \nbool vis[200];\nvoid add1(int a,int b)\n{\n\tedge[++tot].to=b;\n\tedge[tot].next=g[a];\n\tg[a]=tot;\n}\nint dfs(int u)\n{\n\tif(dp[u]!=-1)return dp[u];//\u88ab\u66f4\u65b0\u4e86\u5c31\u76f4\u63a5\u8fd4\u56de \n\tif(u==t)return 0;\t\t\t//\u76ee\u6807\u70b9\uff0c\u8fd4\u56de0. \n\tif(dp[u]==-1&&vis[u])return 99999999;\t//\u53d1\u73b0\u73af\uff0c\u8fd4\u56de\u6781\u5927\u503c\u5e9f\u9664\u5f53\u524d\u8def\u5f84\u3002 \n\tvis[u]=true;//\u5df2\u904d\u5386 \n\tdp[u]=dfs(first[u]);//\u5148\u8dd1\u9ed8\u8ba4\u7684\u8def\u5f84 \n\tint temp=g[u];\n\twhile(temp)\n\t{\n\t\tdp[u]=min(dp[u],dfs(edge[temp].to)+1);//\u904d\u5386\u5176\u4ed6\u7684\u8def\u5f84\uff0c\u5e76+1 \n\t\ttemp=edge[temp].next;\n\t}\n\treturn dp[u];\n}\nint main()\n{\n\tcin>>n>>s>>t;\n\tfor(int i=1;i<=n;i++)\t\t\t\t//\u6c34\u8bfb\u5165\uff0c\u5ffd\u89c6\u5c31\u597d\u3002 \n\t{\n\t\tint k=0;\n\t\tcin>>k;\n\t\tif(k==0)continue;\n\t\tcin>>first[i];\n\t\tfor(int j=2;j<=k;j++)\n\t\t{\n\t\t\tint x=0;\n\t\t\tcin>>x;\n\t\t\tadd1(i,x);\n\t\t}\n\t}\n\tmemset(dp,-1,sizeof(dp));\t\t\t//dp\u521d\u59cb\u5316\u3002\u56e0\u4e3a\u89e3\u53ef\u80fd\u4e3a0\uff0c\u6240\u4ee5\u6211\u4eec\u8d4b-1 \n\tdfs(s);\t\t\t\t\t\t\t\t//dfs source \n\tif(dp[s]==99999999)cout<<\"-1\";\t\t//\u5982\u679c\u662f\u6781\u5927\u503c\u8bf4\u660e\u4e0d\u80fd\u5230\u76ee\u6807\u70b9\uff0c\u8fd4\u56de-1 \n\telse cout<<dp[s];\t\t\t\t\t//output answer\n\treturn 0;\n}\n```",
        "postTime": 1532318344,
        "uid": 54825,
        "name": "ysj1173886760",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\n**\u9898\u9762\uff1a**[\u6d1b\u8c37]( https://www.luogu.org/problem/P1346 )\n\n\u6709\u4e00\u4e2a\u7535\u8f66\u7f51\u7edc\u6709$N$\u4e2a\u8def\u53e3\uff0c\u6bcf\u4e2a\u5165\u53e3\u6709\u4e00\u4e2a\u5f00\u5173\u6307\u5411\u4e0e\u8be5\u8def\u53e3\u8054\u901a\u7684\u7b2c\u4e00\u4e2a\u8f68\u9053\uff0c\u53f8\u673a\u53ef\u4ee5\u4e0b\u8f66\u6539\u53d8\u5f00\u5173\u7684\u65b9\u5411\uff0c\u6c42\u4ece\u8def\u53e3$A$\u5230\u8def\u53e3$B$\u8981**\u6700\u5c11**\u8981\u6539\u53d8\u51e0\u6b21\u5f00\u5173\u7684\u65b9\u5411\u3002\n\n## \u9898\u89e3\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u8f6c\u6362\u4e3a\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709$N$\u4e2a\u8282\u70b9\u7684\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u76f8\u90bb\u7684\u7b2c\u4e00\u6761\u8fb9\u6743\u503c\u4e3a$0$\uff0c\u5176\u4f59\u8fb9\u4e3a$1$\uff0c\u6c42\u4ece$A$\u8282\u70b9\u5230$B$\u8282\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u8f6c\u6362\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u628a\u6743\u503c\u7406\u89e3\u4e3a\u5f00\u5f00\u5173\u7684\u6b21\u6570\u3002\u5047\u8bbe\u6211\u4eec\u8981\u9a76\u5411\u4e0e\u8def\u53e3\u76f8\u90bb\u7684\u7b2c\u4e00\u4e2a\u8f68\u9053\uff0c\u90a3\u4e48\u56e0\u4e3a\u5f00\u5173\u9ed8\u8ba4\u6307\u5411\u7b2c\u4e00\u4e2a\u8f68\u9053\uff0c\u6240\u4ee5\u9a76\u5411\u7b2c\u4e00\u4e2a\u8f68\u9053\u9700\u8981\u5f00\u5f00\u5173\u7684\u6b21\u6570\u4e3a$0$\u3002\u81ea\u7136\uff0c\u5176\u4ed6\u8282\u70b9\u56e0\u4e3a\u9700\u8981\u4e0b\u8f66\u6539\u53d8\u65b9\u5411\uff0c\u6240\u4ee5\u9700\u8981\u5f00\u4e00\u6b21\u5f00\u5173\uff0c\u6240\u4ee5\u6743\u503c\u4e3a$1$\u3002\n\n\u5c06\u95ee\u9898\u8f6c\u6362\u8fc7\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a0/1\u8fb9\u6743\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5199\u4e00\u4e2a0/1\u8fb9\u6743BFS\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\u5177\u4f53\u7684\u7ec6\u8282\u4ee3\u7801\u6ce8\u91ca\u91cc\u6709\u3002\n\n01\u8fb9\u6743BFS\u5f53\u7136\u662f\u8981\u6bd4\u5176\u4ed6\u7684\u7b97\u6cd5\u5feb\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n + m)$\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 1e2 + 10;//\u6700\u5927\u8282\u70b9\u6570\n\nvector<int> G[maxn];//\u50a8\u5b58\u56fe\u7684\u6570\u7ec4\nint dis[maxn];//\u50a8\u5b58a\u70b9\u81f3\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u7684\u6570\u7ec4\nbool done[maxn];//\u6807\u8bb0\u6570\u7ec4\ndeque<int> que;//\u53cc\u7aef\u961f\u5217\n\nint main() {\n    memset(dis, 0x3f3f3f3f, sizeof(dis));//\u521d\u59cb\u5316dis\u4e3aINF\n    int n, a, b;\n    scanf(\"%d %d %d\", &n, &a, &b);\n    for (int i = 1; i <= n; i ++) {//\u8bfb\u5165\n        int m;\n        scanf(\"%d\", &m);//i\u8282\u70b9\u7684\u5927\u5c0f\n        for (int j = 1; j <= m; j ++) {\n            int x;\n            scanf(\"%d\", &x);\n            G[i].push_back(x);//\u5efa\u56fe\n        }\n    }\n    que.push_back(a);//\u8d77\u70b9\u5165\u961f\uff0c\u51c6\u5907\u904d\u5386\n    dis[a] = 0;//init\n    while (!que.empty()) {//01\u8fb9\u6743BFS\n        int u = que.front();//\u50a8\u5b58\u961f\u9996\n        que.pop_front();//\u5f39\u51fa\u961f\u9996\n        if (done[u]) continue;//\u5982\u679c\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86\u90a3\u4e48\u5c31\u8df3\u8fc7\n        done[u] = true;//\u6807\u8bb0\n        for (int i = 0; i < G[u].size(); i ++) {//\u904d\u5386u\u7684\u6bcf\u4e00\u6761\u8fb9\n            int v = G[u][i];//\u50a8\u5b58\u5f53\u524d\u8282\u70b9\n            if (!done[v]) {//\u5982\u679cv\u6ca1\u6709\u88ab\u5904\u7406\u8fc7\n                dis[v] = min(dis[v] , dis[u] + (i != 0));//dis[v] min= dis[u] + w \n                if (i == 0) {//\u5982\u679cw\u4e3a0\uff08\u4e5f\u5c31\u662fi\u4e3a0\n                    que.push_front(v);//\u4ece\u524d\u7aef\u63d2\u5165\n                }else {//\u5426\u5219\n                    que.push_back(v);//\u4ece\u540e\u7aef\u63d2\u5165\n                }\n            }\n        }\n    }\n    if (dis[b] == 0x3f3f3f3f) {//\u5982\u679c\u65e0\u89e3\uff08\u4e5f\u5c31\u662f\u9ed8\u8ba4\u7684\u521d\u59cb\u5316\u72b6\u6001\n        printf(\"-1\");//\u8f93\u51fa-1\n        return 0;\n    }\n    printf(\"%d\", dis[b]);//\u8f93\u51fa\u7b54\u6848\n}\n```\n\n\n\n",
        "postTime": 1573040536,
        "uid": 117489,
        "name": "HAO233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709\u5927\u4f6c\u53d1\u53cc\u7aef\u961f\u5e7f\u641c\u7684\u5199\u6cd5\uff0c\u6211\u6765\u53d1\u4e00\u6ce2\u3002\n\n\u5bf9\u4e8e\u8fb9\uff08u,v\uff09\uff0c\u5982\u679c\u5f00\u5173\u9ed8\u8ba4\u6307\u5411v\uff0c\u5219\u8fb9\u6743\u4e3a0\uff0c\u5426\u5219\u8fb9\u6743\u4e3a1\uff0c\u56e0\u4e3a\u8981\u4e0b\u6765\u8fdb\u884c\u4e00\u6b21\u5f00\u5173\u7684\u8c03\u6574\u3002\n\n\u7136\u540e\u5efa\u7acb\u4e00\u4e2a\u53cc\u7aef\u961f\uff0c\u5f00\u59cb\u65f6\u961f\u4e2d\u53ea\u6709\u8d77\u70b9\n1. \u8bbe\u5f53\u524d\u961f\u5934\u8282\u70b9\u4e3au\uff0c\u5bf9\u4e8e\u5b83\u7684\u6bcf\u4e00\u6761\u8fb9\uff08u,v,w\uff09\uff0c\u5982\u679cd[v]>d[u]+w,\u5219\u66f4\u65b0d[v]\u3002\n2. \u6bcf\u66f4\u65b0\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679cw\u4e3a1\uff0c\u5219\u4ece\u961f\u5c3e\u5165\u961f\uff1b\u5982\u679cw\u4e3a0\uff0c\u5219\u4ece\u961f\u5934\u5165\u961f\u3002\n3. \u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002\n\n\u8d34\u4ee3\u7801\uff0c30ms\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int  N=110,M=N*(N-1);\nint head[N],next[M],ver[M],w[M];\ninline void addEdge(int u,int v,int k){\n\tstatic int now=0;\n\tnow++;\n\tnext[now]=head[u];\n\tver[now]=v;\n\thead[u]=now;\n\tw[now]=k;\n}\nint n,st,ed;\nint d[N];\ndeque<int>q;\nint main(){\n\tint k,u,v,e;\n\tmemset(d,0x3f,sizeof(d));\n\tcin>>n>>st>>ed;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&k);\n\t\tif(k==0)\n\t\t\tcontinue;\n\t\tscanf(\"%d\",&v);\n\t\taddEdge(i,v,0);\n\t\tfor(int j=1;j<k;j++){\n\t\t\tscanf(\"%d\",&v);\n\t\t\taddEdge(i,v,1);\n\t\t}\n\t}\n\tq.push_back(st);\n\td[st]=0;\n\twhile(q.size()){\n\t\tu=q.front();\n\t\tq.pop_front();\n\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\tv=ver[i];\n\t\t\te=w[i];\n\t\t\tif(d[v]>d[u]+e){\n\t\t\t\td[v]=d[u]+e;\n\t\t\t\tif(e)\n\t\t\t\t\tq.push_back(v);\n\t\t\t\telse\n\t\t\t\t\tq.push_front(v);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=d[ed]==0x3f3f3f3f?-1:d[ed];\n\tcout<<ans;\n}\n```\n",
        "postTime": 1554805924,
        "uid": 144732,
        "name": "Alear",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u849f\u84bbtyq\u4e00\u770b\uff1a\u8fd9\u4e0d\u6700\u77ed\u8def\u5417\n\n\u5927\u4f6c\uff1a\u662f\uff0c\u4f46\u662f\u5982\u679c\u52a0\u5f3a\u4e3a$\\sum_{i=1}^{n} K*N<=1e7$\u5462\n\n\u849f\u84bbtyq\uff1a\u6211\u4e0d\u4f1a\u3002\u3002\u3002\u81ea\u95ed\u4e86\u3002\u3002\u3002\n\n\u5927\u4f6c\uff1a\u8fd9\u4e0d\u5c31\u4e00\u4e2a\u88f8\u768401-bfs\u5417\uff1f\u5207\u4e86\u5207\u4e86\n\n\u849f\u84bbtyq\u4fbf\u72c2\u641c\u6559\u7a0b\uff0c\u7ec8\u4e8e\u53d1\u73b0\uff1a\n\n\u9996\u5148\uff0cSPFA\u5728\u8fb9\u6743\u975e\u8d1f\u65f6\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u5c0f\u6839\u5806\u6765\u4fdd\u8bc1O(NlogM)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5f53\u7136\u8fb9\u6743\u4e3a0/1\u65f6\u4e5f\u4e0d\u4f8b\u5916\n\n\u4f46\u662f\u771f\u7684\u8981\u7ef4\u62a4\u5c0f\u6839\u5806\u5417\uff1f\u5176\u5b9e\u4e0d\u7528\uff0c\u56e0\u4e3a\u8fb9\u6743\u4e3a0/1\uff0c\u6240\u4ee5\u8bf4\u6269\u5c55\u65f6\u8fb9\u6743\u4e3a0\u5c31\u4ece\u961f\u5c3e\u5165\u961f\uff0c\u8fb9\u6743\u4e3a1\u662f\u4ece\u961f\u5934\u5165\u961f\u5373\u53ef\n\n\u53ef\u80fd\u8bed\u8a00\u6bd4\u8f83\u62bd\u8c61\uff0c\u770b\u4ee3\u7801\u5427\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<cstring>\nusing namespace std ;\nint head[100005] , Next[100005] , ver[100005] , edge[100005] , dist[100005] ;\ndeque<int> Q ; //\u53cc\u7aef\u961f\u5217 \nint inq[100005] ;\nint n , s , t , tot ;\n \n//\u52a0\u8fb9\uff08\u94fe\u5f0f\u524d\u5411\u661f\uff09 \nvoid add(int x , int y , int z){\n\tedge[++tot] = z , Next[tot] = head[x] , ver[tot] = y , head[x] = tot ;\n}\n\n//\u66f4\u65b0\u8ddd\u79bb\u7684\u51fd\u6570 \nvoid update(int u){\n\tfor(int i = head[u] ; i ; i = Next[i]){\n\t\t//cout<<\"visit \"<<ver[i]<<endl ;\n\t\tint v = ver[i] , wei = edge[i] ;\n\t\tif(dist[v] > dist[u]+wei){\n\t\t\tdist[v] = dist[u]+wei ;\n\t\t\tif(!inq[v]){\n\t\t\t\tif(wei==0) Q.push_front(v) ; \n\t\t\t\telse Q.push_back(v) ;\n\t\t\t\tinq[v] = 1 ;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//\u4e00\u4e2aBFS\u6846\u67b6 \nvoid spfa(int s){\n\tmemset(inq , 0 , sizeof(inq)) ;\n\tmemset(dist , 0x3f , sizeof(dist)) ; \n\tQ.push_front(s) ; inq[s] = 1 ; dist[s] = 0 ;\n\twhile(!Q.empty()){\n\t\tint u = Q.front() ; Q.pop_front() ;\n\t\t//cout<<\"u=\"<<u<<\" && inq[\"<<u<<\"]=\"<<inq[u]<<endl ;\n\t\tupdate(u) ;\n\t}\n}\n\n//\u5feb\u8bfb \nchar ch ; int flg ;\nvoid read(int& x){\n\tch = ' ' ; x = 0 ; flg = 1 ;\n\twhile(!isdigit(ch)){\n\t\tch = getchar() ; \n\t\t//if(ch=='-'){flg = -1 ;}\n\t}\n\twhile(isdigit(ch)){\n\t\tx = x*10 + (ch ^ 48) ; ch = getchar() ;\n\t}\n}\n\n//\u8f93\u51fa \nvoid output(int d){\n\tif(dist[d] == 0x3f3f3f3f) cout<<\"-1\"<<endl ;\n\telse cout<<dist[d]<<endl ;\n}\n\n\nint main(){\n\tread(n) , read(s) , read(t) ;\n\tfor(int i = 1 ; i <= n ; ++i){\n\t\tint k , fir , temp ; read(k) ;\n\t\tif(k==0) continue ;\n\t\tread(fir) , add(i , fir , 0) ;\n\t\tfor(int j = 2 ; j <= k ; ++j){\n\t\t\tread(temp) , add(i , temp , 1) ;\n\t\t}\n\t}\n\tspfa(s) ; output(t) ;\n}\n\n//30ms , \u4e0d\u77e5\u9053\u90a3\u4e9b0ms\u7684\u662f\u600e\u4e48\u56de\u4e8b\u3002\u3002\n//\u611f\u89c9\u6ca1\u6709\u6bd4\u8fd9\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u5427\u3002\u3002\n//O(N+M) \n```",
        "postTime": 1545832266,
        "uid": 107494,
        "name": "cecilia_sankta",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u5f88\u7b80\u5355\u7684spfa\uff0c\u53ea\u8981\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u641c\u5373\u53ef\u3002\n\u6ce8\u610f\u5230\u4e0d\u4e86\u7684\u8981\u8f93\u51fa-1\nc++AC\u4ee3\u7801\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint Read(){\n\tint x=0;\n\tchar c=getchar();\n\twhile(c>'9'||c<'0')c=getchar();\n\twhile(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n\treturn x;\n}//\u8bfb\u5199\u4f18\u5316\u662f\u4e2a\u597d\u4e60\u60ef \nint n,a,b;\nstruct way{\n\tint k;\n\tint zhong[101];\n}dian[101];//\u4e0e\u6bcf\u4e2a\u70b9\u76f8\u8fde\u7684\u8def \nqueue <int > q;\nint dist[101];\nint inque[101];\nint vis[101];\nvoid spfa(int s){\n\tmemset(dist,0x3f,sizeof(dist));//\u521d\u59cb\u5316 \n\tdist[s]=0;\n\tq.push(s);\n\tinque[s]=1;\n\twhile(!q.empty()){\n\tint u=q.front();\n\tq.pop();\n\tinque[u]=0;\n\tif(vis[u]==0)\n\tfor(int i=1;i<=dian[u].k;i++){\n\tif(i==1){\n\tdist[dian[u].zhong[1]]=min(dist[dian[u].zhong[1]],dist[u]);\t\n\t}//\u4e0d\u6309\u5f00\u5173 \n\telse if(dist[u]+1<dist[dian[u].zhong[i]]){\n\t\tdist[dian[u].zhong[i]]=dist[u]+1;\n\t}//\u6309\u5f00\u5173\u4e14\u6bd4\u539f\u6765\u6b21\u6570\u5c11 \n\tif(inque[dian[u].zhong[i]]==0){\n\t\t\tinque[dian[u].zhong[i]]=1;\n\t\t\tq.push(dian[u].zhong[i]);\n\t\t}\n\t}//\u9632\u6b62\u91cd\u590d\u5165\u961f \n\tvis[u]=1;//\u9632\u6b62\u91cd\u590d\u641c\u540c\u4e00\u4e2a\u70b9 \n\t}\n}\nint main(){\n\tn=Read(),a=Read(),b=Read();\n\tint i,j;\n\tfor(i=1;i<=n;i++){\n\tdian[i].k=Read();\n\tfor(j=1;j<=dian[i].k;j++)dian[i].zhong[j]=Read();\n\t}\n\tspfa(a);\n\tif(dist[b]==1061109567)printf(\"-1\");//\u5230\u4e0d\u4e86 \n\telse printf(\"%d\",dist[b]);\n\treturn 0;\n}\n```",
        "postTime": 1524550145,
        "uid": 28088,
        "name": "\u94b1\u9038\u51e1",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u6b64\u9898\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u8fb9\u6743\u53ea\u53ef\u80fd\u4e3a1\u62160\u7684\u6709\u5411\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u3002\n\n\u5982\u4f55\u52a0\u8fb9\uff1a\u5982\u679c\u8282\u70b9u\u662f\u4ece\u8282\u70b9i\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u5230\u8fbe\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fb9\u6743\u4e3a0\uff0c\u5426\u5219\u8fb9\u6743\u4e3a1\n\n\u5982\u4f55\u5b58\u8fb9\uff1a\u672c\u7bc7\u9898\u89e3\u901a\u8fc7\u8fb9\u8868\uff08\u524d\u5411\u661f\uff09\u5b58\u8fb9\uff0c\u4f18\u70b9\uff1a\u904d\u5386\u6240\u6709\u51fa\u5ea6\u8282\u70b9\u901f\u5ea6\u5feb\uff0c\u901f\u5ea6\u6bd4O2\u4f18\u5316\u524d\u7684vector\u4e0d\u77e5\u9053\u597d\u5230\u54ea\u91cc\u53bb\u4e86\uff0c\u7a7a\u95f4\u5f00\u9500\u5c0f\uff08\u76f8\u5bf9\u800c\u8a00\uff09\n\n\u5982\u4f55\u8ba1\u7b97\u6700\u77ed\u8def\uff1a\u672c\u7bc7\u9898\u89e3\u7528SPFA\u7b97\u6cd5\u8ba1\u7b97\u5355\u6e90\u6700\u77ed\u8def\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(me)\uff08m<=2\\*n\uff09\uff08\u4ec5\u961f\u5217\u4f18\u5316\u540e\uff09\uff0c\u968f\u673a\u56fe\u5b9e\u8df5\u6027\u5f88\u597d\n\n\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u91cd\u70b9\u4ecb\u7ecdSPFA\u7b97\u6cd5\uff1a\u5b9a\u4e49dist[i]\u4e3a\u8282\u70b9s\uff08\u56fa\u5b9a\uff09\u5230\u8282\u70b9i\u7684\u76ee\u524d\u8ba1\u7b97\u51fa\u7684\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u503c\uff0c\u8bbe\u7acb\u4e00\u4e2aqueue\u7528\u6765\u8868\u793a\u5f85\u4f18\u5316\u7684\u8282\u70b9\uff0c\u6bcf\u6b21\u628a\u961f\u9996\u7684\u8282\u70b9x\u53d6\u51fa\uff0c\u5bf9\u6240\u6709x\u7684\u51fa\u8fb9\u8fde\u5411\u7684\u8282\u70b9y\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679c\u5230y\u70b9\u7684dist\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u5c06y\u70b9\u52a0\u5165\u961f\u5c3e\uff0c\u8fd9\u6837\u76f4\u5230\u961f\u5217\u7a7a\u4e3a\u6b62\u3002\n\n\u7b97\u6cd5\u7684\u8bc1\u660e\uff08\u4e0d\u592a\u4e25\u8c28\uff09\uff1a\u53ea\u8981\u6700\u77ed\u8def\u5f84\u5b58\u5728\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u5728\u961f\u5217\u4e2d\u7684\u8282\u70b9\uff0c\u9664\u4e86\u4e00\u5f00\u59cb\u52a0\u5165\u7684\u8282\u70b9s\u5916\uff0c\u6240\u6709\u8282\u70b9\u90fd\u662f\u901a\u8fc7\u677e\u5f1b\u64cd\u4f5c\u52a0\u5165\u7684\u3002\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u90fd\u4f1a\u4f7fdist[]\u7684\u503c\u51cf\u5c0f\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6700\u77ed\u8def\u5f84\u662f\u5b58\u5728\u7740\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u4f1a\u65e0\u4f11\u6b62\u7684\u66f4\u65b0\uff0c\u961f\u5217\u6700\u540e\u4e00\u5b9a\u662f\u7a7a\u7684\u3002\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6837\u6c42\u51fa\u7684dist\u6570\u7ec4\u4e00\u5b9a\u662f\u6700\u77ed\u7684\u8def\u5f84\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=20010;\nconst int inf=2147483647;\nint n,s,t,k,u,cur=0,x,j;\nint head[maxn],next_[maxn],point[maxn],weight[maxn],dist[maxn];\nbool visit[maxn];\nqueue<int>spfa;\ninline void add_edge(int u,int v,int w)\n{\n    cur++;\n    next_[cur]=head[u];\n    head[u]=cur;\n    point[cur]=v;\n    weight[cur]=w;\n}//\u8fb9\u8868\u5b58\u8fb9\nint main()\n{\n    scanf(\"%d%d%d\",&n,&s,&t);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&k);\n        if(k&&k--)scanf(\"%d\",&u),add_edge(i,u,0);//\u8fd9\u4e2a\u52a0\u8fb9\u683c\u5f0f\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u56e0\u4e3ak\u53ef\u80fd\u7b49\u4e8e0\uff0c\u6211\u4e4b\u524d\u7684\u7a0b\u5e8f\u5c31\u662f\u8fd9\u6837\u5361\u7206\u7684\n        while(k--)scanf(\"%d\",&u),add_edge(i,u,1);//\u4e4b\u540e\u7684\u52a0\u8fb9\u5c31\u5f88\u6b63\u5e38\u4e86\n    }\n    for(int i=1;i<=n;i++)dist[i]=inf;//\u4e00\u5f00\u59cb\u8bbe\u7f6e\u521d\u59cb\u503c\n    dist[s]=0;spfa.push(s);visit[s]=true;//\u5c06s\u63d2\u5165\u961f\u5217\uff0cs\u5230\u81ea\u5df1\u7684\u8def\u7a0b\u80af\u5b9a\u662f0\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u5df2\u8bbf\u95ee\n    while(!spfa.empty())///\u961f\u5217\u975e\u7a7a\n    {\n        x=spfa.front();j=head[x];//\u53d6\u961f\u5217\u5934\n        while(j)//\u8bbf\u95ee\u6240\u6709\u51fa\u8fb9\u8fde\u5411\u7684\u70b9\n        {\n            if(dist[point[j]]>dist[x]+weight[j])//\u677e\u5f1b\u64cd\u4f5c\u6761\u4ef6\n            {\n                dist[point[j]]=dist[x]+weight[j];\n                if(!visit[point[j]])spfa.push(point[j]),visit[point[j]]=true;//\u63d2\u5165point[j]\u8282\u70b9\n            }\n            j=next_[j];//\u4e0b\u4e00\u4e2a\u51fa\u8fb9\n        }\n        visit[x]=false;\n        spfa.pop();//\u5f39\u51fa\u961f\u5217\n    }\n    if(dist[t]==inf)printf(\"-1\\n\");//\u5982\u679c\u6ca1\u6709\u6539\u53d8\u8fc7dist[t]\u7684\u503c\uff0c\u5c31\u662f\u6ca1\u6709\u901a\u8def\uff0c\u8f93\u51fa-1\n    else printf(\"%d\\n\",dist[t]);\n    return 0;\n}\n```",
        "postTime": 1508332609,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u662f\u8bfb\u9898\uff01\n\u5207\u6362\u5f00\u5173\u7684\u72b6\u6001\u540e\uff0c\u5b83\u4f1a\u81ea\u52a8\u590d\u539f~~\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u9b3c\u5f00\u5173~~\n\n\u628a\u6bcf\u4e2a\u8282\u70b9\u770b\u4f5c\u662f\u70b9\uff0c\u8f68\u9053\u770b\u4f5c\u662f\u8fb9\u3002\u8f6c\u6362\u4e00\u6b21\u5f00\u5173\u72b6\u6001\u770b\u4f5c\u8fb9\u6743\u4e3a1\u3002\u7531\u4e8e\u9898\u4e2dn\u7684\u8303\u56f4\u662f100\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6700\u66b4\u529b\u597d\u5199\u7684Floyd\u7b97\u6cd5\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,s,e;//end\u662f\u4fdd\u7559\u5b57\nint d[107][107];//\u5b58\u56fe\nint main(){\n    cin>>n>>s>>e;\n    memset(d,0x3f,sizeof(d));\n    for(int i=1;i<=n;++i)d[i][i]=0;//\u8bb0\u5f97\u8fd9\u4e00\u6b65\uff0c\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\n    for(int i=1;i<=n;++i){\n        int x;//\u5373Ki\uff0c\u8f68\u9053\u6570\n        cin>>x;\n        for(int j=1;j<=x;++j){\n            int y;\n            cin>>y;//\u53e6\u4e00\u7aef\u7684\u8def\u53e3\n            if(j==1)d[i][y]=0;//\u5355\u884c\u9053\u3002\u56e0\u4e3a\u5f00\u5173\u90fd\u662f\u63a7\u5236\u7740\u201c\u51fa\u53bb\u7684\u9053\u8def\u201d\u3002\u800c\u4e14\u672c\u9898\u4e2d\u662f\u51fa\u53d1\u53bb\u76ee\u7684\u5730\uff0c\u518d\u56de\u6765\u6ca1\u6709\u610f\u4e49\u3002\n            else d[i][y]=1;//\u8fd9\u91cc\u4e24\u5904\u624b\u6b8b\u628ai\u6253\u6210\u4e86x\n        }\n    }\n    for(int k=1;k<=n;++k)//k\u8bb0\u5f97\u5199\u5728\u6700\u5916\u9762\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=n;++j)\n    d[i][j]=min(d[i][j],d[i][k]+d[k][j]);//Floyd\n    if(d[s][e]>=0x3f3f3f3f)cout<<-1<<endl;//\u4e2d\u9014\u67d0\u8fb9\u5176\u5b9e\u662f\u4e0d\u5b58\u5728\u7684\uff08\u8fb9\u6743\u4e3a0x3f3f3f3f\uff0c\u56e0\u4e3amemset\u6309\u5b57\u8282\u8d4b\u503c\uff09\n    else cout<<d[s][e]<<endl;//\u53ef\u4ee5\u5230\u8fbe\n    return 0;\n}\n```\n",
        "postTime": 1579774759,
        "uid": 164840,
        "name": "zhaowangji",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "# ~~\u5f88\u660e\u663e\u8fd9\u9053\u9898\u5e76\u4e0d\u96be~~\n\n### \u8fd9\u9053\u9898\u7684\u8003\u70b9\u5927\u6982\u5c31\u662f\u5efa\u7acb\u90bb\u63a5**\u77e9\u9635**or**\u8868**\n\n~~\u5f88\u660e\u663e\u5efa\u77e9\u9635\u6211\u662f\u4e0d\u4f1a\u7684~~\n```cpp\n \tfor(re ll u=1;u<=n;u++)\n \t{\n \t\tll r=read();\n \t\tfor(re ll w=0;w<r;w++)\n \t\t{\n \t\t\tll v=read();\n \t\t\tif(w==0)add(u,v,0);\n\t\t\telse add(u,v,1);\n\t\t }\n\t }\n```\n#### \u6839\u636e\u9898\u610f\u73b0\u5bf9\u6bcf\u4e2a\u70b9u\u8bfb\uff0c\u7136\u540e\u8bfb\u5165\u8fd9\u4e2a\u70b9\u6709\u51e0r\u4e2a\u8fb9\uff0c\u9ed8\u8ba4\u7b2c\u4e00\u6761\u8fb9\u82b1\u8d39w\u4e3a0\uff0c\u5176\u4ed6\u8fb9\u4e3a1\uff1b\n##### \u5f88\u660e\u663e\u8fd9\u5c31\u662f\u53ea\u8981\u4e00\u4e2a\u6a21\u677f\u7684\u95ee\u9898\u4e86\n \n####  _Dijkstra_  or  _SPFA_ \n------------\n\n######   _~~\u5148\u653e\u6a21\u677f~~_ \n ```cpp\nvoid SPFA(ll s){\n\tqueue<ll>q;\n\tq.push(s);vis[s]=1;dis[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tll r=q.front();\n\t\tfor(ll k=first[r];k>0;k=e[k].next)\n\t\t{\n\t\t\tif(dis[e[k].v]>dis[r]+e[k].w)\n\t\t\t{\n\t\t\t\tdis[e[k].v]=dis[r]+e[k].w;\n\t\t\t\tif(!vis[e[k].v])\n\t\t\t\t{\n\t\t\t\t\tq.push(e[k].v);\n\t\t\t\t\tvis[e[k].v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[r]=0;\n\t\tq.pop();\n\t}\n}\n```\n------------\n```cpp\nvoid DIJ(ll s){\n\tpriority_queue< pair<ll,ll> > q;\n\tmemset(vis,0,sizeof(vis));\n\tfor(ll i=1;i<=n;i++)dis[i]=inf;\n\tdis[s]=0;\n    q.push(M(0,s));\n\twhile(!q.empty())\n\t{\n\t\tll u=q.top().second;\n\t\tq.pop();\n\t\tif(vis[u])continue;vis[u]=1;\n\t\tfor(ll i=first[u];i>0;i=e[i].next){\n\t\t\tll v=e[i].v;\n\t\t\tif(dis[u]+e[i].w<dis[v]){\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tif(!vis[v])q.push(M(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n------------\n### \u628a\u4ed6\u4eec\u7ed3\u5408\u8d77\u6765\u90a3\u4e0d\u5c31\u8fc7\u4e86\u5417\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\u8fd8\u662f\u653e\u4e0bAC\u7684\u4ee3\u7801\u5427\uff08**\u5185\u542b\u4e2a\u4eba\u7684\u67d0\u4e9b\u7f16\u7a0b\u4e60\u60ef**\uff09\n```\n#include<cctype>//isdigit()\n#include<cstdio>//getchar()\n#include<cstdlib>//\u5f88\u660e\u663e\u6ca1\u7528\n#include<cstring>//memset()\n#include<algorithm>\n#include<queue>//priority_queue\n#include<iostream>\n#include<stack>\n#define inf 0x7ffffffffffffff\n#define M(x,y) make_pair(x,y)//priority_queue\n#define ll long long\n#define re register\n#define in inline\n#define mian main \n#define maxn 20000\n#define maxm 20000000\n#define mod\nusing namespace std;\nll n,a,b,num,num_edge=0;\nll first[maxn],vis[maxn],dis[maxn];\nstruct edge{\n\tll v,w,n;\n}e[maxm];//v\uff1a\u6307\u5411\u7684\u70b9\uff1bw\uff1a\u8fb9\u6743\uff1bn\uff1a\u4e0b\u4e00\u6761\u8fb9\nvoid add(ll u,ll v,ll w)\n{\n\tll k=++num_edge;\n\te[k].n=first[u];\n\tfirst[u]=k;\n\te[k].v=v;\n\te[k].w=w;\n}\nin ll read()//\u5feb\u8bfb\n{\n\tll x=0,y=0;char ch;\n\twhile(!isdigit(ch)){if(ch=='-')y=1;ch=getchar();} \n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn y?-x:x; \n } \n in void init()//\u8bfb\u5165\n {\n \tn=read();a=read();b=read();\n \tmemset(first,0,sizeof(first));\n \tmemset(vis,0,sizeof(vis));\n \tfor(re ll i=1;i<=n;i++)dis[i]=inf;\n \tfor(re ll u=1;u<=n;u++)\n \t{\n \t\tll r=read();\n \t\tfor(re ll w=0;w<r;w++)\n \t\t{\n \t\t\tll v=read();\n \t\t\tif(w==0)add(u,v,w);\n\t\t\telse add(u,v,1);\n\t\t }\n\t }\n \treturn;\n }\n in void doit()//Dijkstra\n {\n \tpriority_queue<pair<ll,ll> >q;\n \tdis[a]=0;q.push(M(0,a));\n \twhile(q.size())\n \t{\n \t\tll u=q.top().second;q.pop();\n \t\tif(vis[u])continue;vis[u]=1;\n \t\tfor(re ll i=first[u];i;i=e[i].n)\n \t\t{\n \t\t\tll v=e[i].v;\n \t\t\tif(dis[v]>dis[u]+e[i].w)\n \t\t\t{\n \t\t\t\tdis[v]=dis[u]+e[i].w;\n \t\t\t\tq.push(M(-dis[v],v));\n                //\u4f18\u5148\u961f\u5217\u9ed8\u8ba4\u5927\u6839\u5806\n\t\t\t }\n\t\t }\n\t }\n \treturn;\n }\n in void outit()//\u8f93\u51fa\n {\n        if(dis[b]==inf)printf(\"-1\");\n \telse printf(\"%lld\",dis[b]);\n \treturn;\n }\nsigned mian()\n{\n\tinit();\n\tdoit();\n\toutit();\n\treturn 0;\n}\n```\n\n _**\u4e3a\u4ec0\u4e48\u4e0d\u7528SPFA\u5462??**_ \uff08\u624b\u52a8\u6ed1\u7a3d\uff09\n~~Ag->Cu~~\n",
        "postTime": 1569635407,
        "uid": 158869,
        "name": "\u76e7\u92c5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6700\u77ed\u8def\u7684\u88f8\u9898\uff0c\u53ea\u662f\u8981\u60f3\u4e00\u4e0b\u5982\u4f55\u8bb0\u4e0b\u5207\u6362\u5f00\u5173\u7684\u6b21\u6570\u3002\n\n\u9996\u5148\uff0c\u7b2ci\u4e2a\u8282\u70b9\u4f1a\u8fde\u63a5k\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u8bb0\u4e3aa[k]\uff0c\u9053\u8def\u6700\u5f00\u662f\u6307\u5411a[1]\u7684\uff0c\u6240\u4ee5\u4ecei\u5230a[1]\u4e0d\u7528\u5207\u6362\u7684\uff0c\u6240\u4ee5\u5c06w\u8bb0\u4e3a0\uff0c\u4e4b\u540e\u7684\u70b9\u5c06w\u8bb0\u4e3a1\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5269\u4e0b\u7684\u5c31\u662f\u8dd1\u6700\u77ed\u8def\u5c31\u597d\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u94c1\u8f68\u662f\u6709\u5411\u8fb9\u3002\n\n\u6211\u7528\u7684\u662fdij+\u5806\u4f18\u5316\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u4e00\u4e0b\u3002\n\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int N=205;\nint n,head[N],tot,d[N],vis[N],s,t;\nstruct node{\n\tint next,to,w;\n}a[N*N];\nvoid add(int x,int y,int z)\n{\n\ta[++tot].next=head[x];\n\ta[tot].to=y;\n\ta[tot].w=z;\n\thead[x]=tot;\n}\npriority_queue<pair<int,int> >q;\nvoid dij(int s)\n{\n\tmemset(d,inf,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\td[s]=0; q.push(make_pair(0,s));\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second; q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(d[v]>d[u]+a[i].w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+a[i].w;\n\t\t\t\tq.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&s,&t);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint k,a;\n\t\tscanf(\"%d\",&k);\n\t\tfor(int j=1;j<=k;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&a);\n\t\t\tif(j==1) add(i,a,0);//\u5c06\u7b2c\u4e00\u4e2a\u5230\u7684\u8282\u70b9\u7684\u8fb9\u6743\u8bb0\u4e3a0\uff1b\n\t\t\telse add(i,a,1);\n\t\t}\n\t}\n\tdij(s);\n\tif(d[t]!=inf) printf(\"%d\",d[t]);\n\telse printf(\"%d\",-1);\n\treturn 0;\n}\n```\n",
        "postTime": 1564486517,
        "uid": 113699,
        "name": "president",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u5927\u81f4\u7684\u524d\u9762\u5927\u4f6c\u90fd\u6709\u8bb2\u8fc7\uff0c\u6211\u8fd9\u91cc\u5c31\u7a0d\u5fae\u6296\u4e2a\u673a\u7075\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u5b58\u56fe\u3002\u3002\u3002\n\uff08\u5176\u5b9e\u5c31\u662f\u4e2a\u5047\u7684\u62c9\u94fe\u8868\uff09\nEdge\u6570\u7ec4\u4e2d\uff0c0\u5b58Ki\uff0c\u540e\u9762\u5b58\u901a\u5411\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u901a\u5411E1\u7684\u6743\u503c\u5c31\u662f0\uff0c\u5176\u4f591\n\n```cpp\n// P1346\n\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint N, A, B;\nshort E[200][200];\nint V[200];\nbool U[200] = {false};\n\nint get() {\n\tint res = 0;\n\tfor (int i = 1; i <= N; i++) {\n\t\tif (!U[i] && V[i] <= V[res]) {\n\t\t\tres = i;\n\t\t}\n\t}\n\treturn res;\n}\n\nint main() {\n\tfreopen(\"P1346.in\", \"r\", stdin);\n\tmemset(V, 0x6f, sizeof(V));\n\tcin >> N >> A >> B;\n\tfor (int i = 1; i <= N; i++) {\n\t\tcin >> E[i][0];\n\t\tfor (int j = 1; j <= E[i][0]; j++) {\n\t\t\tcin >> E[i][j];\n\t\t}\n\t}\n\tV[A] = 0;\n\tfor (int i = 1, now; i < N; i++) {\n\t\tnow = get();\n\t\tif (E[now][0] > 0){\n\t\t\tV[E[now][1]] = min(V[E[now][1]], V[now]);\n\t\t\tfor (int j = 2; j <= E[now][0]; j++) {\n\t\t\t\tV[E[now][j]] = min(V[E[now][j]], V[now] + 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tU[now] = true;\n\t}\n\tcout << ((V[B] == V[0]) ? -1 : V[B]);\n\treturn 0;\n}\n```\n\n\u4ee3\u7801AC\uff0c\u501f\u9274\u8bf7\u81ea\u4fbf\uff08\u771f\u7684\u4fe1\u6211\uff09",
        "postTime": 1552975091,
        "uid": 105934,
        "name": "MXR612",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "dij\u6700\u77ed\u8def~~\uff08\u597d\u5427\u6211\u77e5\u9053bfs\u53ef\u80fd\u66f4\u597d\uff09~~\n\n\u5efa\u56fe\u7559\u70b9\u5fc3\u5c31\u597d\n\n\u8fb9\u7684\u7f16\u53f7\u4e3a1\u65f6\uff0c\u6743\u503c\u8bbe\u62100\n\n\u4e0d\u4e3a1\u65f6\u8bbe\u62101\n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int MAXN=100 + 3;\nconst int INF=1<<30;\n\nint read()//\u5feb\u8bfb\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-48; c=getchar();}\n\treturn x*w;\t\n}\n\nint n,s,e,g[MAXN][MAXN]={0};\nint d[MAXN],vis[MAXN]={0};//d[i]\u8868\u793a\u4ece1\u5230i\u6240\u9700\u7684\u6700\u5c11\u5207\u6362\u6b21\u6570 \npriority_queue<pair<int,int> > Q;\nvoid dij() \n{\n\tfor(int i=1;i<=n;i++) d[i]=INF;\n\td[s]=0;\n\tQ.push(make_pair(-d[s],s));\n\twhile(!Q.empty())\n\t{\n\t\tpair<int,int> p=Q.top();\n\t\tQ.pop();\n\t\tint u=p.second;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int v=1;v<=n;v++)\n\t\t{\n\t\t\tif(g[u][v]!=INF)\n\t\t\t{\n\t\t\t\tif(d[v]>d[u]+g[u][v])\n\t\t\t\t{\n\t\t\t\t\td[v]=d[u]+g[u][v];\n\t\t\t\t\tQ.push(make_pair(-d[v],v));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn=read(),s=read(),e=read();\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tg[i][j]=(i==j)?0:INF;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint k=read();\n\t\tfor(int m=1;m<=k;m++)\n\t\t{\n\t\t\tint j=read();\n\t\t\tg[i][j]=(m==1)?0:1;//\u5982\u679c\u7f16\u53f7\u4e3a1\uff0c\u5219\u4e0d\u7528\u5207\u6362\uff0c\u6545\u4e3a0\uff0c\u5176\u4ed6\u4e3a1 \n\t\t}\n\t}\n\tdij();\n\tif(d[e]==INF) printf(\"-1\\n\");\n\telse printf(\"%d\\n\",d[e]);\n\treturn 0;\t\n} \n```\n",
        "postTime": 1552820007,
        "uid": 88736,
        "name": "Sober_Clever",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011\u6d1b\u8c371346"
    },
    {
        "content": "---\nSolution\n---\nd[i][j]\u76f8\u5f53\u4e8ei\u5230j\u6700\u5c11\u7528\u7684\u5f00\u5173\u6570\n\u628ad[][]\u7684\u521d\u59cb\u503c\u8d4b\u7684\u8d85\u7ea7\u5927,\u7136\u540e\u9ed8\u8ba4\u5f00\u5173\u6253\u62100,\u975e\u9ed8\u8ba4\u5f00\u5173\u6253\u4e3a1\n\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u884c\u4e86\n```\n#include<bits/stdc++.h>\nconst int INF=1e+8;\n#define rg register\nusing namespace std;\ninline int gi(){\n    char ch=getchar();int x=0,q=0;\n    while(ch<'0' || ch>'9') ch=='-'?q=1:0,ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return q?(-x):x;\n}\nint n,A,B,d[110][110];\nint main(){\t\n    //freopen(\"elec.in\",\"r\",stdin);\n    //freopen(\"elec.out\",\"w\",stdout);\n    n=gi();A=gi();B=gi();\n    int k,to;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\td[i][j]=INF;\n\tfor(rg int i=1;i<=n;i++){\n\t\tk=gi();\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tto=gi();\n\t\t\tif(j==1) d[i][to]=0;\n\t\t\telse d[i][to]=1;\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\tif(d[A][B]==INF) puts(\"-1\");\n    else  cout<<d[A][B]<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1519229082,
        "uid": 61360,
        "name": "KingBenQi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "###\u672c\u9898\u662f\u4e00\u9053\u7eafSPFA\u7684\u9898\uff0c\u53ea\u8981\u628a\u7b2c\u4e00\u4e2a\u70b9\u8bbe\u4e3a0\uff0c\u628a\u5269\u4f59\u70b9\u6743\u503c\u8bbe\u4e3a1\u5373\u53ef\n\n    \n         \n    \n    \n         \n    \n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,begin,end;\nstruct pel**\u94fe\u5f0f\u524d\u5411\u661f**\n{\n    int to;\n    int next;\n    int dis;\n};\nint h[10000];\npel a[10000];\nint num=0;\nint add(int x,int y,int z)**\u5efa\u56fe\u51fd\u6570**\n{\n    num++;\n    a[num]=(pel){y,h[x],z};\n    h[x]=num;\n}\ndeque<int> que;\nint dis[10000];\nvoid SPFA()**\u8d70\u4e00\u904dSPFA**\n{\n    int i;\n    dis[begin]=0;\n    que.push_front(begin);**\u4ee5\u8d77\u70b9\u5f00\u59cb**\n    while(!que.empty())\n     {\n         int past=que.front();\n         que.pop_front();\n         for(i=h[past];i;i=a[i].next)\n          {\n           int now=a[i].to;\n           if(dis[now]>dis[past]+a[i].dis)\n            {\n                dis[now]=dis[past]+a[i].dis;\n                if(!que.empty()&&dis[now]<dis[que.front()])**SLF\u4f18\u5316**\n                 que.push_front(now);\n                  else que.push_back(now);\n           }    \n         }\n     }\n}\nint main()\n{\n   scanf(\"%d%d%d\",&n,&begin,&end);    \n    int i,j,x,many;\n    for(i=1;i<=n;i++)\n     {\n         scanf(\"%d\",&many);\n         for(j=1;j<=many;j++)\n          {\n           scanf(\"%d\",&x);    \n           if(j==1)**\u5f53\u7535\u8f66\u8d70\u7b2c\u4e00\u6761\u8def\u65f6\uff0c\u5219\u6743\u503c\u4e3a0\uff0c\u5f53\u7535\u8f66\u8d70\u5176\u4ed6\u8def\u65f6\uff0c\u6743\u503c\u4e3a1**\n            add(i,x,0);\n           else add(i,x,1);\n         }\n     }\n    for(i=1;i<=n;i++)\n     dis[i]=200000000;\n    SPFA();\n    if(dis[end]!=200000000)\n     printf(\"%d\",dis[end]);\n     else printf(\"-1\");\n}\n```",
        "postTime": 1511664015,
        "uid": 40562,
        "name": "q2368126021",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "### \u672c\u9898\u53ea\u8981\u7406\u89e3\u5c31\u660e\u767d\u4e86 \u8fd9\u5176\u5b9e\u4e00\u9053\u6709\u5411\u56fe\u6700\u77ed\u8def\u95ee\u9898\u88f8\u9898\n\n\u56e0\u4e3a\u6211\u4ee5\u524d\u4e3bdijstra\u7684 \u987a\u4fbf\u62ff\u8fd9\u9053\u7ec3\u4e86spfa\n\n\u6ca1\u7528stl\u8fdb\u884c\u4f18\u5316\n\n\u7eaf\u624b\u5de5\u6a21\u62dfspfa 233\n\n\\* \u9996\u5148\u662f\u8fd9\u9053\u9898\u5efa\u8fb9\u65f6\u5019 \u7b2c\u4e00\u4e2a\u70b9\u8ddf\u539f\u70b9\u6784\u56fe \u6743\u503c\u4e3a0 \u540e\u9762\u7684\u70b9\u4e3a1\u5c31ok\u4e86\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u4f60\u7b2c\u4e00\u4e2a\u70b9\uff0c\u662f\u4e0d\u9700\u8981\u5f00\u5173\u7684\uff0c\u800c\u540e\u51e0\u4e2a\u70b9\u9700\u8981\u52a8\u5f00\u5173\uff0c\u5e76\u4e14\u53ea\u80fd\u52a8\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u6b21\u52a8\u7684\u70b9\u4e0d\u4e00\u6837\u3002\n\n*** \u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u4e00\u5f00\u59cb \u7406\u89e3\u9519\u4e86 \u7406\u89e3\u6210\u8f93\u5165\u70b9\u6784\u56fe\u6743\u503c\u4e3a1 \u672a\u8f93\u5165\u70b9\u4e3a0 \u7ed3\u679c\u53ea\u8fc7\u4e862\u4e2a\u70b9 \u5e76\u4e14\u5fd8\u8bb0\u52a0\u7279\u5224\u8f93\u51fa-1 2333 ***\n\n\\* \u7b2c\u4e8c\u8fd9\u9053\u9898\u662f\u6709\u5411\u56fe\n\n\\* \u524d\u5411\u661f\u5b58\u56fe\u65f6\u5019\u8bb0\u5f97\u5f00\u503c\u662f\u8fb9\u6570\u4e0d\u662f\u70b9\u6570 \u4e00\u5f00\u59cb\u6253\u7684\u65f6\u5019\u5fd8\u8bb0\u76f8\u4e58\u4e86 \u7ed3\u679c\u53d1\u73b0\u8f93\u4e0d\u8fdb\u6570\u636e\n\n#### \u4e0b\u9762\u662f\u4e24\u79cd\u4ee3\u7801\uff1a\n\n1. spfa(\u672a\u4f18\u5316)\uff1a\n\n\u2019\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxn 110\n#define INF 0x7f\nusing namespace std;\nstruct edge{\n    int next;\n    int to;\n    int dis;\n}edge[maxn*maxn];\nint head[maxn],q[maxn],inq[maxn],dis[maxn],vis[maxn];\nint n,s,z,num,h,t,k;\ninline int lop(int &x){x++;if(x==maxn*2) x=1;}\nvoid add_edge(int u,int v,int w)\n{\n    num++;\n    edge[num].next=head[u];\n    edge[num].to=v;\n    edge[num].dis=w;\n    head[u]=num;\n}\nvoid spfa(int v0)\n{\n    for(int i=1;i<=n;i++) dis[i]=INF;\n    h=t=1;\n    q[h]=v0;\n    inq[v0]=1;\n    t++;\n    dis[v0]=0;\n    while(t!=h)\n    {\n        int u=q[h];\n        inq[u]=0;\n        lop(h);\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            int w=edge[i].dis;\n            if(dis[v]>dis[u]+w) \n            {\n                dis[v]=dis[u]+w;\n                if(!inq[v])\n                {\n                    inq[v]=1;\n                    q[t]=v;\n                    lop(t);\n                }\n            }            \n        }\n    }\n}\nint main()\n{\n    cin>>n>>s>>z;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>k;\n        for(int j=1;j<=k;j++)\n        {\n            int xx;\n            cin>>xx;\n            if(j==1)\n            add_edge(i,xx,0);\n            else\n            add_edge(i,xx,1);\n        }\n    }\n    spfa(s);\n    if(dis[z]!=INF)\n    cout<<dis[z]<<endl;\n    else\n    cout<<\"-1\"<<endl;\n    return 0;\n}\n```\n\u2018\n2.dijstra+\u5806\u4f18\u5316\uff1a\n\n\u2019\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define maxn 110\n#define INF 0x7f\nusing namespace std;\nstruct edge{\n    int next;\n    int to;\n    int dis;\n}edge[maxn*maxn];\nint head[maxn],dis[maxn],vis[maxn];\nint n,s,z,num,h,t,k;\ninline int lop(int &x){x++;if(x==maxn*2) x=1;}\nvoid add_edge(int u,int v,int w)\n{\n    num++;\n    edge[num].next=head[u];\n    edge[num].to=v;\n    edge[num].dis=w;\n    head[u]=num;\n}\nstruct Node{\n    int d,id;\n    Node(){}\n    Node(int d,int id):d(d),id(id){}\n    bool operator < (const Node& sph)const {       \n           return d>sph.d;\n    }\n };\nvoid dijstra(int v0)\n{\n     for(int i=1;i<=n;i++) dis[i]=INF;\n     dis[v0]=0;\n     priority_queue<Node>q;\n     q.push(Node(0,v0));\n     while(!q.empty())\n     {\n         Node u=q.top();\n        q.pop();\n         if(vis[u.id]) continue;  \n        vis[u.id]=1;\n         for(int i=head[u.id];i;i=edge[i].next)\n         {\n             int v=edge[i].to;\n             int w=edge[i].dis;\n             if(dis[v]>w+u.d) \n               {\n                 dis[v]=w+u.d;\n                 q.push(Node(dis[v],v));\n               }    \n         }\n     }\n}\nint main()\n{\n    cin>>n>>s>>z;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>k;\n        for(int j=1;j<=k;j++)\n        {\n            int xx;\n            cin>>xx;\n            if(j==1)\n            add_edge(i,xx,0);\n            else\n            add_edge(i,xx,1);\n        }\n    }\n    dijstra(s);\n    if(dis[z]!=INF)\n    cout<<dis[z]<<endl;\n    else\n    cout<<\"-1\"<<endl;\n    return 0;\n}\n\u2018\n```",
        "postTime": 1509875958,
        "uid": 14191,
        "name": "\u8017\u7eb8\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u548c\u5e95\u4e0b\u7684dalao\u4eec\u4e0d\u5927\u4e00\u6837\uff0c\u6211\u5148\u60f3\u5230\u7684\u662fBFS\u6c42\u6700\u77ed\u8def<\u849f\u84bbStock\u4e00\u679a>\n\n\u663e\u7136\u6211\u4eec\u662f\u8981\u627e\u6539\u53d8\u5f00\u5173\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u90a3\u4e48\u6211\u5c31\u53ef\u4ee5\u628a\u521d\u59cb\u5f00\u5173\u6307\u5411\u7684\u8f68\u9053\u6807\u8bb0\u4e3a0\u6743\u503c\uff0c\u5176\u4f59\u53ef\u8fbe\u5230\u7684\u8282\u70b9\u5bf9\u5e94\u8f68\u9053\u6743\u503c\u6807\u8bb0\u4e3a1\uff0c\u5269\u4e0b\u7684\u4e0d\u901a\u7684\u81ea\u5df1\u770b\u7740\u529e\u53d8\u6210\u4e00\u4e2aMAX\u5c31\u884c\u3002\n\n\u56e0\u4e3a\u6570\u636e\u8303\u56f4\u8f83\u5c0f[2,100]\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u5927\u80c6\u7684\u7528\u7a7a\u95f4\uff0c\u5b58\u50a8\u65b9\u6cd5\u53ef\u4ee5\u6548\u4eff\u4e0b\u9762\u7684\u4ee3\u7801\u3002\n\n\n##BFS\u6838\u5fc3\u4ee3\u7801\uff1a##\n\n\n\n```cpp\nvoid bfs()\n{\n    mov[0]=st,now[st]=0;\n    int head=0,tail=1;\n    while(head<=tail&&tail<80500)\n    {\n        poi=road[mov[head]][1];\n        now[poi]=min(now[mov[head]],now[poi]);\n        mov[tail]=poi;\n        tail++;\n        for(j=2;j<=k[mov[head]];j++)\n        {\n        poi=road[mov[head]][j];\n        mov[tail]=poi;\n        now[poi]=min(now[mov[head]]+1,now[poi]);\n        tail++;\n        if(poi==en)\n        {tail--;mov[tail]=0;}\n        }\n        if(!now[en])return;\n        head++;\n    }\n}\n```\n##\u5b58\u50a8\u65b9\u6cd5\uff1a##\n```cpp\n    for(i=1;i<=n;i++)\n    {\n        cin>>k[i];\n        if(k[i])\n        {\n        cin>>x;\n        road[i][1]=x;\n        for(j=2;j<=k[i];j++)\n        {cin>>x;\n        road[i][j]=x;}}\n    }\n```\n##\u6700\u7ec8\u8f93\u51fa\u5224\u65ad\uff08\u7279\u5224\u554a\u554a\u554a\uff09##\n```cpp\n    if(now[en]!=2139062143)//MAX\u8868\u793a\u4e0d\u53ef\u7528\n    cout<<now[en];\n    else\n    cout<<-1;//\u6ce8\u610f-1\u7684\u7279\u5224\uff0c\u6ca1\u6709\u7279\u5224\u5e94\u8be5\u662f#8\u8fc7\u4e0d\u4e86\u5427\u3002\u3002\u3002\n\u5982\u679c\u8fd8\u6709\u95ee\u9898\uff0c\u8fd8\u8bf7\u6c42dalao\u6307\u70b9\u4e00\u4e0borz\u3002\u3002\u3002\n```",
        "postTime": 1487470281,
        "uid": 17407,
        "name": "sunyt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u90a3\u6211\u5c31\u6765\u4e2adijkstra\u7684\u89e3\u6cd5\u5427orz\n\n\u8bf4\u5b9e\u8bdd\u8fd9\u9898n<=100\u5b9e\u5728\u662f\u592a\u6c34\u4e86...\u819c\u4e00\u4e0b\u9876\u697c\u7684DFS...\n\n\u6570\u636e\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u624b\u52a8\u5b58\u4e24\u904d.\n\n\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u70b9\u8fdb\u884c\u904d\u5386\u7684\u65f6\u5019\uff0c\u5f53\u8bbf\u95ee\u7684\u662f\u7b2c\u4e00\u4e2a\u70b9\uff08\u4e5f\u5c31\u662f\u6570\u636e\u4e2d\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u70b9\uff09\u65f6\uff0c\u6743\u503c\u4e3a0\uff0c\u9664\u6b64\u4ee5\u5916\u6743\u503c\u4e3a1\u3002\u4e4b\u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u641e\uff0c\u662f\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u6700\u591a\u5c31\u8bbf\u95ee\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8def\u53e3\u4e5f\u6700\u591a\u53d8\u66f4\u4e00\u6b21\u72b6\u6001\u3002\n\n\u6240\u4ee5\u8fd9\u4e5f\u5c31\u5dee\u4e0d\u591a\u662f\u4e2a\u88f8\u7684\u6700\u77ed\u8def\u4e86orz\n\n\n```cpp\n/* P1346\n * Au: SJoshua\n */\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\nstruct edge {\n    int u, v;\n} edges[20000];\n\nstruct node {\n    int u, d; \n    bool operator < (const node &n) const {\n        return d > n.d;\n    }\n};\n\nvector <int> mp[101];\npriority_queue <node> q;\n\nbool visited[101];\nint dis[101];\n\nint main(void) {\n    int n, a, b, links, p = 0;\n    scanf(\"%d %d %d\", &n, &a, &b);\n    for (int k = 1; k <= n; k++) {\n        scanf(\"%d\", &links);\n        for (int i = 0; i < links; i++) {\n            scanf(\"%d\", &edges[p].v);\n            edges[p].u = k;\n            mp[k].push_back(p++); \n        }\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    q.push((node){a});\n    while (!q.empty()) {\n        node t = q.top();\n        q.pop();\n        if (visited[t.u]) {\n            continue;\n        }\n        visited[t.u] = true;\n        for (unsigned int k = 0; k < mp[t.u].size(); k++) {\n            edge &e = edges[mp[t.u][k]];\n            if (t.d + (k != 0) < dis[e.v]) {\n                q.push((node){e.v, dis[e.v] = t.d + (k != 0)});\n            }\n        }\n    }\n    printf(\"%d\", dis[b] == 0x3f3f3f3f ? -1 : dis[b]);\n    return 0; \n} \n```",
        "postTime": 1475128596,
        "uid": 790,
        "name": "\u7ea6\u4fee\u4e9a_RK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u4eca\u5929\u597d\u4e0d\u5728\u72b6\u6001 \u8fd9\u6ca1\u7b80\u5355\u7684\u9898\u5404\u79cd\u65e0\u8bed\n\n\u5f88\u7b80\u5355 spfa \u5982\u679c\u662f\u76f4\u63a5\u53ef\u4ee5\u5230\u7684\u8bdd\u6743\u503c\u4e3a0\u5426\u5219\u4e3a0\uff0c\u5b9e\u5728\u4e0d\u77e5\u9053\u8fd8\u80fd\u600e\u4e48\u8bb2\u4e86\n\n\u4eca\u5929\u592a\u8ff7\u4e86\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<vector>\n#include<queue>\nusing namespace std;\nint n,A,B,d[105],vis[105];\nvector<int >g[10500];\nvector<int >v[10500];\nqueue<int>q;\nvoid spfa(){\n    d[A]=0;\n    vis[A]=1;\n    q.push(A);\n    while(!q.empty()){\n        int u=q.front();\n        vis[u]=0;\n        q.pop() ;\n        for(int i=0;i<g[u].size();i++){\n            int t=g[u][i];\n            int c=v[u][i];\n            if(d[t]>d[u]+c){\n                d[t]=d[u]+c;\n                if(!vis[t]){\n                    q.push(t); \n                }\n            }\n        }\n    } \n}\nint main(){\n    scanf(\"%d%d%d\",&n,&A,&B);\n    for(int i=1;i<=n;i++)d[i]=1e9;\n    for(int i=1;i<=n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        for(int j=1;j<=x;j++){\n            int y;\n            scanf(\"%d\",&y);\n            if(y==i)continue;\n            g[i].push_back(y);\n            if(j==1)v[i].push_back(0);\n            else v[i].push_back(1); \n        }\n    }\n    spfa();\n    if(d[B]==1e9)printf(\"%d\",-1);\n    else{\n        printf(\"%d\",d[B]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1467637678,
        "uid": 18431,
        "name": "intruder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "\u6784\u56fe\u5f88\u7b80\u5355\uff0c\u9700\u8981\u5207\u5f00\u5173\u7684\u8fb9\u6743\u503c\u4e3a1\uff0c\u4e0d\u9700\u8981\u7684\uff08\u9ed8\u8ba4\u6307\u5411\u7684\u8fb9\uff09\u6743\u503c\u4e3a0\n\n\u6570\u636e\u672c\u8eab\u5c31\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u505a\u7279\u6b8a\u5904\u7406\n\n\u7136\u540e\u6c42\u6700\u77ed\u8def\u5c31AC\u4e86\n\n\n\n\n```cpp\nconst\n  inf=100;\nvar\n  map:array[1..110,1..110] of integer;\n  dis,bool:array[1..110] of integer;\n  n,a,b,i,j,k,ki,min:integer;\nfunction opr(x:integer):integer;\n  begin\n    if x=1 then exit(0)\n    else exit(1);\n  end;\nbegin\n  read(n,a,b);\n  for i:=1 to n do\n    for j:=1 to n do\n      map[i,j]:=inf;\n  for i:=1 to n do\n    begin\n      read(k);\n      for j:=1 to k do\n        begin\n          read(ki);\n          map[i,ki]:=opr(j);\n        end;\n    end;\n  for i:=1 to n do dis[i]:=map[a,i];\n  for i:=1 to n do bool[i]:=0;\n  bool[a]:=1;\n  for i:=1 to n-1 do\n    begin\n      min:=maxint;k:=0;\n      for j:=1 to n do\n        if (dis[j]<min) and (bool[j]=0) then\n          begin\n            min:=dis[j];\n            k:=j;\n          end;\n      if k=0 then break;\n      bool[k]:=1;\n      for j:=1 to n do\n        if (dis[k]+map[k,j]<dis[j]) and (bool[j]=0) then\n          dis[j]:=dis[k]+map[k,j];\n    end;\n  if dis[b]=inf then writeln(-1)\n  else writeln(dis[b]);\nend.\n```",
        "postTime": 1457232389,
        "uid": 5938,
        "name": "\u5c0f\u9ed1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "**\nmadan  \u672c\u6765\u60f3\u6253dfs\u66b4\u529b= =\n\n\u7ed3\u679c\u53ea\u80fd\u8fc750  \u800c\u4e14\u6709\u4e00\u4e2a\u70b9\u662fWA\u4e86QAQ\n\n\u7136\u540e\u6211\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6781\u5176\u50bb\u903c\u7684\u7528Floyd\u90fd\u80fd\u8fc7\u7684\u6c34\u9898\n\n\u53ea\u662f\u5728\u9898\u610f\u7406\u89e3\u4e0a\u51fa\u4e86\u70b9\u95ee\u9898= =\u6211\u4ee5\u4e3a\u662f\u8981\u6309\u987a\u5e8f\u6765\n\n\u6bd4\u5982\u8bf4\u6709\u4e00\u4e2a\u8f66\u7ad9\u662f  3  1 2 3\n\n\u90a3\u4e48\u6211\u5c31\u4ee5\u4e3a\u6362\u52303\u8981\u6362\u4e24\u6b21\u3002\u3002\u3002\u3002\u3002  \u7ed3\u679c\u53ea\u8981\u4e00\u6b21-> ->\n\n\u6211\u8bed\u6587\u4e0d\u597d  \u5c31\u8fd9\u6837\u5427\n\n\u6362\u4e0aFloyd\u4e4b\u540e\u4ee3\u7801\u975e\u5e38\u7b80\u6d01\n\n**\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define rep(x) for(int x=1;x<=n;x++)\nusing namespace std;\nconst int maxn=100+10;\nconst int INF =(1<<30);\n\nint d[maxn][maxn];\nint n,s,t;\n\nvoid Floyd()\n{\n    for(int k=1;k<=n;k++)\n      for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n          if(d[i][k]!=INF&&d[k][j]!=INF)\n            d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n}\n\nint main()\n{\n    cin>>n>>s>>t;\n    rep(i) rep(j) d[i][j]=INF;\n    for(int u=1,tmp;u<=n;u++)\n    {\n        scanf(\"%d\",&tmp);\n        for(int j=1,v;j<=tmp;j++)\n        {\n            scanf(\"%d\",&v);\n            d[u][v]=(j==1?0:1);\n        }\n    }\n    Floyd();\n    printf(\"%d\",d[s][t]==INF?-1:d[s][t]);\n    return 0;\n}\n\n\n```",
        "postTime": 1451968490,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint path[105][105],dist[105],vi[110],n;//dist\u5230\u8d77\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb vi\u8d70\u8fc7 \nvoid dijkstra(int u)//dijkstra\u7b97\u6cd5 http://www.cnblogs.com/biyeymyhjob/archive/2012/07/31/2615833.html\n{    vi[u]=1;\n     dist[u]=0;\n     for(int i=1;i<=n;i++)\n        if(path[u][i]!=-1)\n          dist[i]=path[u][i];\n     for(int i=1;i<=n;i++)\n        {    int v=109;\n             for(int j=1;j<=n;j++)\n               if(vi[j]==-1&&dist[j]<dist[v])\n                 v=j;\n             vi[v]=1;\n             for(int l=1;l<=n;l++)\n                if(vi[l]==-1&&path[v][l]!=-1)\n                  {dist[l]=min(dist[l],dist[v]+path[v][l]);\n                  };\n        }\n}\nint main()\n{   int a,b;\n    dist[109]=1000;\n    cin>>n>>a>>b;\n    memset(path,255,sizeof(path));\n    memset(dist,1,sizeof(dist));\n    memset(vi,255,sizeof(vi));\n    for(int i=1;i<=n;i++)\n       {int k,v;\n        cin>>k;\n        for(int j=0;j<k;j++)\n           {if(j==0)\n              {cin>>v;\n               path[i][v]=0;//\u6ce8\u610f\u8fd9\u662f\u6709\u5411\u56fe\uff0c\u5199\u6210\u65e0\u5411\u53ea\u5f9750 \n              \n              }\n            else {cin>>v;\n                  path[i][v]=1;\n                  \n            };\n              \n           };\n       };\n    dijkstra(a);\n    if(dist[b]>200)cout<<\"-1\"<<endl;\n    else cout<<dist[b]<<endl;\n    return 0;\n} \n```",
        "postTime": 1445691305,
        "uid": 7591,
        "name": "\u963f\u82cf\u52d2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "DFS\u5373\u53ef\n\n```cpp\nvoid search(int m,int s)\n{\n    if(s>=ans) return; //\u4f18\u5316\n    if(m==b) {ans=s;return;} //\u76ee\u6807\u72b6\u6001\n    t[m]=true; //\u6807\u8bb0\n    if(!t[f[m][1]]) search(f[m][1],s);\n    for(int i=2;i<=f[m][0];++i) if(!t[f[m][i]]) search(f[m][i],s+1);\n    t[m]=false; //\u8fd8\u539f\n}\n```",
        "postTime": 1375696860,
        "uid": 173,
        "name": "cxy004",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1346 \u3010\u7535\u8f66\u3011"
    },
    {
        "content": "~~\u5207\u7d2b\u9898\u5207\u7d2f\u4e86\uff0c\u6240\u4ee5\u5207\u4e86\u9053\u9ec4\u9898~~\n\n\u597d\u5427\u5176\u5b9e\u56e0\u4e3aspfa\u5b66\u5f97\u592a\u70c2\u4e86\u6765\u627e\u81ea\u4fe1\u7684\n\n\u5148\u5efa\u56fe\uff1a\n\n\u56e0\u4e3a\u5f00\u5173\u9ed8\u8ba4\u6307\u5411\u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u7684\u8f68\u9053\uff0c\u6240\u4ee5\u8fde\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u540e\u9762\u7684\u70b9\u5747\u8fde\u6743\u503c\u4e3a1\u7684\u8fb9\u3002\n\n\u6ce8\u610f\uff1a\u8fde\u8fb9\u5747\u4e3a\u5355\u5411\u8fb9\n\n\u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9SPFA\u4e86\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<string>\nusing namespace std;\nconst int inf=1e9+7;\nstruct node\n{\n    int next,to,w;\n}a[1000000];\nint head[1000000],vis[1000000],q[1000000],dis[1000000];\nint n,k,i,j,l,r,s,t,x,y,cnt;\nvoid add(int x,int y,int z)\n{\n    cnt++;\n    a[cnt].next=head[x];\n    a[cnt].to=y;\n    a[cnt].w=z;\n    head[x]=cnt;\n}\nint main(){\n    scanf(\"%d %d %d\",&n,&s,&t);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&k);\n        for(j=1;j<=k;j++)\n        {\n            scanf(\"%d\",&y);\n            if(j==1) add(i,y,0); //\u7b2c\u4e00\u4e2a\u70b9\uff0c\u8fde\u8fb9\u6743\u503c\u4e3a0\n            else add(i,y,1);\t //\u540e\u9762\u7684\u70b9\uff0c\u8fde\u8fb9\u6743\u503c\u4e3a1\n        }\n    }\n    for(i=1;i<=1000001;i++)  //SPFA\u5927\u6cd5\u597d\n\t\tdis[i]=inf;\n    l=0;r=1;\n    dis[s]=0;q[1]=s;\n    while(l<r)\n    {\n        l++;\n        x=q[l];vis[x]=0;\n        for(i=head[x];i;i=a[i].next)\n        {\n            int y=a[i].to;\n            if(dis[y]>dis[x]+a[i].w)\n            {\n                dis[y]=dis[x]+a[i].w;\n                if(!vis[y])\n                {\n                    vis[y]=1;\n                    r++;\n                    q[r]=y;\n                }\n            }\n        }\n    }\n    if(dis[t]==inf) printf(\"-1\");\n    else printf(\"%d\",dis[t]);\n}\n```",
        "postTime": 1531220606,
        "uid": 44438,
        "name": "\u671b\u773c\u6d6e\u4e91",
        "ccfLevel": 0,
        "title": "\u7535\u8f66"
    }
]