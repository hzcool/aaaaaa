[
    {
        "content": "**\u9898\u610f**:\n\n\u6709 $n$ \u4e2a\u706f\u6ce1,\u7528\u7ea2\u8272\u8fb9\u8fde\u6210\u4e00\u68f5\u7ea2\u8272\u6811,\u518d\u7528\u84dd\u8272\u8fb9\u8fde\u6210\u4e00\u68f5\u84dd\u8272\u6811\u3002\n\n\u95ee\u6709\u591a\u5c11\u4e2a\u706f\u6ce1\u7684\u5b50\u96c6,\u5728\u7ea2\u8272\u6811\u4e0a\u5f62\u6210\u8054\u901a\u5757,\u5728\u84dd\u8272\u6811\u4e0a\u5f62\u6210\u4e00\u6761\u94fe\u3002\n\n\u591a\u7ec4\u6570\u636e, $T\\leq 3,n\\leq 10^5$ ,\u65f6\u9650$\\texttt{5s}$\u3002\n\n------------\n\n\u597d\u7684\u5957\u8def\u9898\u3002\n\n**\u7ed3\u8bba** : \u6811\u4e0a\u70b9\u96c6\u5f62\u6210\u7684\u8fde\u901a\u5757\u4e2a\u6570\u4e3a : \u70b9\u6570$-$\u70b9\u96c6\u5185\u90e8\u7684\u8fb9\u6570\u3002\n\n- \u84dd\u8272\u6811\u4e3a\u94fe\n\n\u8003\u8651\u9010\u6b65\u79fb\u52a8\u84dd\u8272\u533a\u95f4\u7684 $r$ ,\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 $l$\u3002\n\n\u8bb0 $R[i]$ \u4e3a\u5de6\u7aef\u70b9\u4e3a $l$ \u65f6\u5f62\u6210\u7684\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u5f53\u52a0\u5165 $r$ \u70b9\u65f6,\u6240\u6709\u533a\u95f4\u90fd\u4f1a\u52a0\u5165\u4e00\u4e2a\u70b9,\u7ed9 $R[1,r]$ \u52a0\u4e00\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ea2\u6811\u4e0a\u7684\u90bb\u5c45 $u$ \u56e0\u4e3a $l\\in [1,u]$ \u65f6\u4f1a\u5305\u542b\u8be5\u70b9,\u4e5f\u5c31\u4f1a\u65b0\u4ea7\u751f\u4e00\u6761\u8fb9,\u5c06 $R[1,u]$ \u51cf\u4e00\u3002\n\n\u6211\u4eec\u9700\u8981\u7edf\u8ba1 $1$ \u7684\u4e2a\u6570,\u4e0d\u96be\u53d1\u73b0 $R$ \u4e2d\u6700\u5c0f\u503c\u603b\u662f $1$ ,\u53ea\u9700\u8981\u7edf\u8ba1\u6700\u5c0f\u503c\u4e2a\u6570\u5373\u53ef\u3002\n\n\u5ea6\u6570\u7684\u603b\u548c\u662f $O(n)$ \u7684,\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n- \u4e00\u822c\u60c5\u51b5\n\n\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$ ,\u7ef4\u62a4\u5f53\u524d $p$ \u70b9\u5230 $u$ \u7684\u94fe\u5f62\u6210\u51e0\u4e2a\u8054\u901a\u5757\u3002\u5bf9\u4e8e $p=1 $\u7684\u60c5\u51b5,\u4f7f\u7528\u4e00\u6b21 `dfs` \u9884\u5148\u8ba1\u7b97\u3002\n\n\u8003\u8651\u7c7b\u4f3c\u6362\u6839\u7684\u64cd\u4f5c,\u5c06 $p$ \u6309\u7167 `dfs` \u7684\u987a\u5e8f\u79fb\u52a8\u3002\u5176\u4e2d\u7684\u4e00\u6b65\u79fb\u52a8\u5982\u56fe :\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xqqc5pph.png)\n\n\u90a3\u4e48,\u84dd\u8272\u90e8\u5206\u7684\u94fe\u90fd\u9700\u8981\u589e\u52a0\u7ea2\u70b9,\u800c\u7ea2\u8272\u90e8\u5206\u7684\u94fe\u90fd\u9700\u8981\u5220\u53bb\u84dd\u70b9\u3002\n\n\u679a\u4e3e\u7ea2\u70b9\u5728\u7ea2\u6811\u4e0a\u7684\u90bb\u5c45 $u$ ,\u5f53\u94fe\u7aef\u70b9\u5728 $u$ \u7684\u5b50\u6811 (\u9ed8\u8ba4\u6811\u4ee5 $p$ \u4e3a\u6839) \u4e2d,\u624d\u4f1a\u5305\u542b $u$ ,\u4e5f\u5c31\u5305\u542b\u4e86\u4e00\u6761\u65b0\u7684\u94fe\u3002\n\n\u6240\u4ee5\u5220\u9664\u548c\u589e\u52a0\u64cd\u4f5c\u5bf9\u5e94\u7740\u82e5\u5e72\u4e2a\u5b50\u6811\u4fee\u6539\u3002\n\n\u5728\u6362\u6839\u7684\u60c5\u51b5\u4e0b\u5982\u4f55\u5b50\u6811\u4fee\u6539 : [[DS\u8bb0\u5f55]P3979 \u9065\u8fdc\u7684\u56fd\u5ea6](https://www.luogu.com.cn/blog/command-block/ds-ji-lu-p3979-yao-yuan-di-guo-du)\n\n\u95ee\u9898\u5728\u4e8e,\u6211\u4eec\u53ea\u80fd\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u79fb\u52a8,\u5bf9\u4e8e\u5ea6\u6570\u5927\u7684\u70b9,\u4f1a\u53cd\u590d\u7ecf\u8fc7\u5f88\u591a\u6b21,\u82e5\u5176\u5728\u7ea2\u6811\u5ea6\u6570\u4e5f\u5f88\u5927,\u590d\u6742\u5ea6\u5c06\u4f1a\u9000\u5316\u3002\n\n\u5728\u5982\u4e0a\u56fe $p$ \u70b9\u7684\u513f\u5b50\u95f4\u5904\u7406\u65f6,\u201c\u7ed9\u84dd\u8272\u90e8\u5206\u5220\u53bb\u7ea2\u70b9\u201d\u8fd9\u4e00\u6b65,\u6bcf\u4e2a\u7ea2\u70b9\u53ea\u4f1a\u505a\u4e00\u6b21,\u590d\u6742\u5ea6\u6ca1\u95ee\u9898\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\u7684\u74f6\u9888\u5728\u4e8e\u9700\u8981\u5220\u53bb $O($\u513f\u5b50\u6570\u91cf$)$ \u6b21\u7684\u84dd\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0,\u679a\u4e3e\u7ea2\u6811\u90bb\u5c45\u65f6,\u8fd8\u9644\u5e26\u7740\u5728\u7ea2\u8272\u5b50\u6811\u5185\u7684\u8981\u6c42,\u5426\u5219\u6ca1\u6709\u8d21\u732e\u3002\u800c\u540c\u4e00\u4e2a\u70b9\u7684\u5404\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u663e\u7136\u662f\u4e0d\u4ea4\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u90bb\u5c45\u6309\u7167 `dfs` \u5e8f\u6392\u5e8f,\u8fd9\u6837\u6bcf\u6b21\u53ea\u9700\u8981\u5904\u7406\u4e00\u6bb5\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define ll long long\n#define pb push_back\n#define MaxN 100500\nusing namespace std;\nint read(){\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nstruct Node{\n  int m,c,tg;\n  inline void ladd(int add)\n  {m+=add;tg+=add;}\n}a[MaxN<<2];\ninline void up(int u){\n  int l=u<<1,r=u<<1|1;\n  a[u].m=min(a[l].m,a[r].m);\n  a[u].c=(a[l].m==a[r].m) ? a[l].c+a[r].c\n        :(a[l].m<a[r].m ? a[l].c : a[r].c);\n}\nint n,R[MaxN],tp[MaxN];\nvoid build(int l=1,int r=n,int u=1)\n{\n  a[u].tg=0;\n   if (l==r){\n    a[u].m=R[tp[l]];\n    a[u].c=1;return ;\n  }int mid=(l+r)>>1;\n  build(l,mid,u<<1);\n  build(mid+1,r,u<<1|1);\n  up(u);\n}\ninline void ladd(int u){\n  if (a[u].tg){\n    a[u<<1].ladd(a[u].tg);\n    a[u<<1|1].ladd(a[u].tg);\n    a[u].tg=0;\n  }   \n}\nint wfl,wfr,wfc;\nvoid add(int l=1,int r=n,int u=1)\n{\n  if (wfl<=l&&r<=wfr)\n    {a[u].ladd(wfc);return ;}\n  int mid=(l+r)>>1;ladd(u);\n  if (wfl<=mid)add(l,mid,u<<1);\n  if (mid<wfr)add(mid+1,r,u<<1|1);\n  up(u);\n}\nvector<int> g[MaxN],g2[MaxN];\nint dfn[MaxN],out[MaxN],tim,f[17][MaxN],dep[MaxN];\nvoid pfs(int u)\n{\n  tp[dfn[u]=++tim]=u;\n  for (int i=0,v;i<g[u].size();i++)\n    if (!dfn[v=g[u][i]]){\n      dep[v]=dep[u]+1;\n      f[0][v]=u;\n      pfs(v);\n    }\n  out[u]=tim;\n}\nvoid pfs2(int u)\n{\n  for (int i=0,v;i<g2[u].size();i++){\n    v=g2[u][i];\n    if (dfn[v]<=dfn[u]&&dfn[u]<=out[v])\n      R[u]--;\n  }\n  for (int i=0,v;i<g[u].size();i++)\n    if (dfn[v=g[u][i]]>dfn[u]){\n      R[v]=R[u]+1;\n      pfs2(v);\n    }\n}\nint las(int u,int v){\n  int k=16;\n  while(k--)\n    while(dep[f[k][u]]>dep[v])\n      u=f[k][u];\n  return u;\n}\nstruct Data{\n  int l,r,c;\n  void undo()\n  {wfl=l;wfr=r;wfc=-c;add();}\n}stk[MaxN<<2];\nint top;\n#define pre(x,y,c) {\\\n  wfl=x;wfr=y;wfc=c;\\\n  stk[++top]=(Data){wfl,wfr,wfc};\\\n}\nvoid upd(int u,int c)\n{\n  for (int i=0,v;i<g2[u].size();i++){\n    v=g2[u][i];\n    if (dfn[v]<dfn[u]||out[u]<dfn[v]){\n      if (dfn[v]<=dfn[u]&&dfn[u]<=out[v]){\n        int t=las(u,v);\n        if (1<dfn[t]){pre(1,dfn[t]-1,c);add();}\n        if (out[t]<n){pre(out[t]+1,n,c);add();}\n      }else {pre(dfn[v],out[v],c);add();}\n    }\n  }\n}\nbool cmp(int A,int B)\n{return dfn[A]<dfn[B];}\nll ans;\nvoid dfs(int u)\n{\n  ans+=a[1].c;\n  sort(g2[u].begin(),g2[u].end(),cmp);\n  int sav=top;\n  for (int i=0,v,p=0;i<g[u].size();i++)\n    if (dfn[v=g[u][i]]>dfn[u]){\n      a[1].ladd(1);upd(v,-1);\n      pre(dfn[v],out[v],-2);wfc=-2;add();\n      for (int r;p<g2[u].size()&&dfn[r=g2[u][p]]<=out[v];p++)\n        if (dfn[v]<=dfn[r])\n          {pre(dfn[r],out[r],1);add();}\n      dfs(v);\n      a[1].ladd(-1);\n      while(top>sav)stk[top--].undo();\n    }\n}\nvoid clear()\n{\n  for (int i=1;i<=n;i++){\n    g[i].clear();g2[i].clear();\n    dfn[i]=0;\n  }ans=tim=0;\n}\nvoid solve()\n{\n  n=read();\n  for (int i=1,fr,to;i<n;i++){\n    fr=read();to=read();\n    g2[fr].pb(to);g2[to].pb(fr);\n  }for (int i=1,fr,to;i<n;i++){\n    fr=read();to=read();\n    g[fr].pb(to);g[to].pb(fr);   \n  }dep[1]=1;pfs(1);\n  for (int j=1;j<16;j++)\n    for (int i=1;i<=n;i++)\n      f[j][i]=f[j-1][f[j-1][i]];\n  R[1]=1;pfs2(1);build();\n  ans=0;dfs(1);\n  printf(\"%lld\\n\",(ans+n)/2);\n  clear();\n}\nint main()\n{\n  int T=read();\n  while(T--)solve();\n  return 0;\n}\n```\n\n",
        "postTime": 1596980632,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6556 \u3010The Forest\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u548c\u540c\u5b66\u60f3\u4e86\u597d\u4e45\u70b9\u5206\u6cbb\u5e76\u628a\u4e24\u4e2a\u4eba\u90fd\u7ed9\u60f3\u6655\uff08\u751f\u7269\u610f\u4e49\u4e0a\uff09\u7136\u540e\u8f6c\u6362\u601d\u8def\u540e\u53d1\u73b0\u89e3\u6cd5\u548c\u70b9\u5206\u6cbb\u5e76\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u7684\u6545\u4e8b\u3002\u8fd9\u4e2a\u6545\u4e8b\u544a\u8bc9\u6211\u4eec\uff0c\u4e0d\u8981\u5728\u4e00\u4e2a\u6811\u679d\u4e0a\u540a\u6b7b\u3002\u6b7b\u524d\u597d\u6b79\u60f3\u60f3\u522b\u7684\u505a\u6cd5\u3002\u88ab\u4e24\u5e74\u534a\u524d\u7684\u9ad8\u7238\u540a\u7740\u6253\u3002\n\n\u9996\u5148\u8003\u8651\u94fe\u5982\u4f55\u505a\u3002\u76f8\u5f53\u4e8e\u7edf\u8ba1\u6709\u591a\u5c11\u533a\u95f4 $[l,r]$ \u6ee1\u8db3\u5728\u53e6\u4e00\u68f5\u6811\u4e0a\u533a\u95f4\u7684\u6240\u6709\u70b9\u8fde\u901a\u3002\u8fd9\u79cd\u7edf\u8ba1\u533a\u95f4\u7684\u9898\u76ee\u53ef\u4ee5\u8003\u8651\u7528\u7c7b\u4f3c\u626b\u63cf\u7ebf\u7684\u505a\u6cd5\u3002\u5bf9\u4e8e\u76ee\u524d\u626b\u63cf\u7ebf\u6240\u5728\u7684\u70b9 $i$\uff0c\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4 $[j,i]$ \u533a\u95f4\u7684\u8fde\u901a\u5757\u6570\u91cf $a_j$\u3002\u52a0\u8fdb\u6765 $i$ \u540e\uff0c\u770b\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\n\n1. \u6240\u6709\u70b9\u4f1a\u52a0\u4e0a $1$\u3002\n2. \u7136\u540e\u6211\u4eec\u8fde\u8fb9\u3002\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $x<i$ \u7684\u6811\u8fb9 $(x,i)$\uff0c\u6211\u4eec\u53d1\u73b0\u8fde\u4e0a\u540e\u4ec5\u4f1a\u5f71\u54cd $[1,x]$ \u7684 $a$ \u503c\u3002\u66f4\u8fdb\u4e00\u6b65\uff0c\u8fd9\u4e2a\u53d8\u5316\u662f\u6240\u6709 $a_1,\\dots, a_x$ \u4f1a\u51cf\u5c11\u4e00\u3002\n3. \u7edf\u8ba1\u8d21\u732e\u3002\u8fde\u901a\u5757\u4e2a\u6570\u5373 $a_j=1$ \u7684\u4e2a\u6570\uff08\u901a\u8fc7\u7ef4\u62a4\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u4e2a\u6570\u5f97\u5230\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u628a\u8fd9\u4e2a\u505a\u6cd5\u642c\u5230\u6811\u4e0a\u6765\u3002\u641c\u5230 $u$ \u65f6\uff0c\u7ef4\u62a4\u5168\u6811\u7684 $v$\uff0c\u6c42\u5176\u5230 $u$ \u7684\u94fe\u5728\u53e6\u4e00\u68f5\u6811\u4e0a\u7684\u8fde\u901a\u5757\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u53bb\u652f\u6301\u6362\u6839\u3002\u8fd9\u4e2a\u5e76\u4e0d\u56f0\u96be\u3002\u7531\u4e8e\u65e0\u8bba\u662f\u52a0\u4e00\u4e2a\u70b9\u8fd8\u662f\u5220\u4e00\u4e2a\u70b9\uff0c\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u5b50\u6811\u7684\u51cf\u6216\u52a0\uff0c\u6240\u4ee5\u6211\u4eec\u5728 dfs \u5e8f\u4e0a\u4fee\u6539\uff0c\u6bcf\u4e2a\u5b50\u6811\uff08\u65e0\u8bba\u4ee5\u54ea\u4e2a\u8282\u70b9\u4e3a\u6839\uff09\u90fd\u53ef\u4ee5\u62c6\u5206\u6210\u81f3\u591a\u4e24\u4e2a\u533a\u95f4\u7684\u64cd\u4f5c\u3002\n\n\u518d\u7406\u4e00\u4e0b\u6211\u4eec\u628a\u6839\u4ece $u$ \u6362\u6210 $v$ \u9700\u8981\u7684\u64cd\u4f5c\uff08\u7ea2\u8fb9\u4e3a $A$ \u6811\u4e0a\u7684\u8fb9\u4e86\uff0c\u84dd\u8fb9\u4e3a $B$ \u6811\u4e0a\u7684\u8fb9\uff09\n\n1. \uff08$u$ \u4e3a\u6839\uff09\u5c06\u6ee1\u8db3 $x\\in T_v$ \u7684\u7ea2\u8fb9 $(u,x)$ \u5168\u90e8\u5220\u9664\uff0c\u5373\u5bf9\u4e8e\u8fd9\u4e9b $x$\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e00\u6b21\u5b50\u6811\u52a0\u4e00\u3002\n2. \uff08$u$ \u4e3a\u6839\uff09\u5bf9\u4e8e $x\\in T_v$ \u7684\u70b9\uff0c\u5b83\u4eec\u5230\u6839\u7684\u94fe\u4e0a\u4e0d\u518d\u6709 $u$ \u4e86\u3002\u4e8e\u662f\u5bf9\u4e8e $v$\uff0c\u6211\u4eec\u505a\u4e00\u6b21\u5b50\u6811\u51cf\u4e00\u3002\n3. \u5c06\u6839\u6362\u6210 $v$\u3002\u8fd9\u4e00\u6b65\u4e0d\u9700\u6709\u4efb\u4f55\u64cd\u4f5c\u3002\n4. \uff08$v$ \u4e3a\u6839\uff09\u5bf9\u4e8e $x\\in T_u$ \u7684\u70b9\uff0c\u5b83\u4eec\u5230\u6839\u4e0a\u7684\u94fe\u4f1a\u591a\u51fa\u4e86 $v$\u3002\u4e8e\u662f\u5bf9\u4e8e $u$\uff0c\u6211\u4eec\u505a\u4e00\u6b21\u5b50\u6811\u52a0\u4e00\u3002\n5. \uff08$v$ \u4e3a\u6839\uff09\u5c06\u6ee1\u8db3 $x\\in T_u$ \u4e14 $x\\notin T_v$ \u7684\u7ea2\u8fb9 $(v,x)$ \u5168\u90e8\u52a0\u5165\uff0c\u5373\u5bf9\u4e8e\u8fd9\u4e9b $x$\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e00\u6b21\u5b50\u6811\u51cf\u4e00\u3002\uff08\u8fd9\u4e00\u4e2a\u64cd\u4f5c\u8981\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a$x$ \u662f $u$ \u7684\u7956\u5148\uff0c$x=u$\uff0c\u548c\u5176\u4ed6\u60c5\u51b5\uff09\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5982\u679c\u66b4\u529b\u627e $x$ \u662f\u5047\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u90fd\u9700\u8981\u627e\u7ea2\u6811\u4e0a\u5ea6\u6570\u4e58\u84dd\u6811\u4e0a\u5ea6\u6570\u6b21\u3002\u4f46\u662f\u6211\u4eec\u51b7\u9759\u601d\u8003\u4e00\u4e0b\uff0c$u$ \u6362\u6839\u5230 $v$ \u65f6\uff0c\u5220\u9664 $(u,x)$ \u65f6\u4fee\u6539\u7684\u8282\u70b9\u5fc5\u7136\u662f\u5728 $T_v$ \u5185\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u6bcf\u4e2a\u70b9\u7684\u7ea2\u8272\u51fa\u8fb9\u6309\u7167\u84dd\u6811 dfn \u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u76f4\u63a5\u5b9a\u4f4d\u5230 $T_v$ \u533a\u95f4\u5185\uff0c\u627e\u5230\u90a3\u4e9b\u70b9\u5373\u53ef\uff1b\u800c\u6dfb\u52a0 $(v,x)$ \u65f6\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u5c31\u884c\u4e86\u3002\n\n```cpp\nconst int N=1e5+9;\nint T,n,st[N],ed[N],tick,ans;\nvi a[N],b[N],son[N];\n\nnamespace SegT {\n    int ls[N<<1],rs[N<<1],tag[N<<1],tot;\n    pii s[N<<1];\n    pii operator + (pii &a,pii &b) {\n        if((!a.se)||(!b.se)) return a.se?a:b;\n        else if(a.fi==b.fi) return pii(a.fi,a.se+b.se);\n        else return a.fi<b.fi?a:b;\n    }\n    void build(int p,int l,int r) {\n        s[p]=pii(0,r-l+1); tag[p]=0;\n        if(l==r) return; int mid=l+r>>1;\n        build(ls[p]=++tot,l,mid), build(rs[p]=++tot,mid+1,r);\n    }\n    void init() {\n        tot=1;\n        build(1,1,n);\n    }\n    void pushdown(int p) {\n        if(!tag[p]) return;\n        s[ls[p]].fi+=tag[p], s[rs[p]].fi+=tag[p];\n        tag[ls[p]]+=tag[p], tag[rs[p]]+=tag[p];\n        tag[p]=0;\n    }\n    void add(int p,int l,int r,int x,int y,int z) {\n        if(x>y) return;\n        if(l==x&&r==y) {s[p].fi+=z,tag[p]+=z; return;} int mid=l+r>>1;\n        pushdown(p);\n        if(y<=mid) add(ls[p],l,mid,x,y,z);\n        else if(x>mid) add(rs[p],mid+1,r,x,y,z);\n        else add(ls[p],l,mid,x,mid,z), add(rs[p],mid+1,r,mid+1,y,z);\n        s[p]=s[ls[p]]+s[rs[p]]; \n    }\n    int qry() {\n        return s[1].se;\n    }\n}\n\nbool cmpd(int x,int y) {\n    return st[x]<st[y];\n}\nvoid clear() {\n    rep(i,1,n) st[i]=ed[i]=0; tick=0;\n    rep(i,1,n) a[i].clear(), b[i].clear(), son[i].clear();\n    SegT::init();\n    ans=0;\n}\nvoid readin() {\n    rep(i,2,n) {\n        int u=read(), v=read();\n        a[u].emplace_back(v), a[v].emplace_back(u);\n    }\n    rep(i,2,n) {\n        int u=read(), v=read();\n        b[u].emplace_back(v), b[v].emplace_back(u);\n    }\n}\n\nbool in(int x,int y) { //y \\in T_x\n    return st[x]<=st[y]&&ed[y]<=ed[x];\n}\nvoid predfs(int u,int fa) { //\u8ba1\u7b97dfn\u548c\u6c42\u51fason\n    st[u]=++tick;\n    for(auto v:b[u]) if(v!=fa) {\n        predfs(v,u);\n        son[u].emplace_back(v);\n    }\n    ed[u]=tick;\n}\nvoid dfs1(int u) { //\u5148\u628au=1\u7684\u60c5\u51b5\u7ef4\u62a4\u51fa\u6765\n    for(auto v:son[u]) {\n        dfs1(v);\n    }\n    SegT::add(1,1,n,st[u],ed[u],1);\n    for(auto v:a[u]) if(in(u,v)) {\n        SegT::add(1,1,n,st[v],ed[v],-1);\n    }\n}\nvoid dfs2(int u) {\n    int x=0; ans+=SegT::qry();\n    while(x<a[u].size()&&!in(u,a[u][x])) x++;\n    for(auto v:son[u]) {\n        stack<pair<pii,int> >op; //\u7528\u6808\u8bb0\u5f55\u64cd\u4f5c\u4e4b\u540e\u65b9\u4fbf\u64a4\u9500\n        while(x<a[u].size()&&in(v,a[u][x])) { //Operation 1\n            SegT::add(1,1,n,st[a[u][x]],ed[a[u][x]],1);\n            op.push(make_pair(pii(st[a[u][x]],ed[a[u][x]]),-1));\n            x++;\n        }\n        SegT::add(1,1,n,st[v],ed[v],-1); //Operation 2\n        op.push(make_pair(pii(st[v],ed[v]),1));\n        SegT::add(1,1,n,1,st[v]-1,1), SegT::add(1,1,n,ed[v]+1,n,1); //Operation 4\n        op.push(make_pair(pii(1,st[v]-1),-1)), op.push(make_pair(pii(ed[v]+1,n),-1));\n        for(auto x:a[v]) if(!in(v,x)) { //Operation 5\n            if(in(x,u)&&x!=u) {\n                int l=0,r=son[x].size()-1,y=-1;\n                while(l<=r) {\n                    int mid=l+r>>1;\n                    if(st[son[x][mid]]<=st[u]) y=son[x][mid], l=mid+1;\n                    else r=mid-1;\n                }\n                SegT::add(1,1,n,1,st[y]-1,-1), SegT::add(1,1,n,ed[y]+1,n,-1);\n                op.push(make_pair(pii(1,st[y]-1),1)), op.push(make_pair(pii(ed[y]+1,n),1));\n            } else if(x==u) {\n                SegT::add(1,1,n,1,st[v]-1,-1), SegT::add(1,1,n,ed[v]+1,n,-1);\n                op.push(make_pair(pii(1,st[v]-1),1)), op.push(make_pair(pii(ed[v]+1,n),1));\n            } else {\n                SegT::add(1,1,n,st[x],ed[x],-1);\n                op.push(make_pair(pii(st[x],ed[x]),1));\n            }\n        }\n        dfs2(v);\n        while(!op.empty()) {\n            auto x=op.top(); op.pop();\n            SegT::add(1,1,n,x.fi.fi,x.fi.se,x.se);\n        }\n    }\n}\n\nsigned main() {\n    T=read();\n    while(T--) {\n        n=read();\n        clear();\n        readin();\n        predfs(1,0);\n        rep(i,1,n) sort(a[i].begin(),a[i].end(),cmpd);\n        dfs1(1);\n        dfs2(1);\n        printf(\"%lld\\n\",(ans+n)/2);\n    }\n    return 0;\n}\n```",
        "postTime": 1660012219,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "P6556 The Forest"
    }
]