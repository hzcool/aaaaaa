[
    {
        "content": "S1\n\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u597d\u786e\u5b9a\u7b97\u6cd5\u7684\uff0c\u59a5\u59a5\u7684\u662fdfs+dp\u3002\u5148\u8dd1\u4e00\u904d\u5b8c\u5168\u80cc\u5305\uff0cvis[i][j]\u8868\u793a\u4f53\u79ef\u4e3aj\u7684\u65f6\u5019\u9009\u4e0d\u9009i\u6700\u4f18\uff0c\u53ef\u4ee5\u628a\u7b2c\u4e00\u7ef4\u538b\u6389\u3002\u5982\u679cvis[j-a[i]]\u9009\u4e86i\uff0c\u90a3\u4e48vis[j]\u5c31\u4e0d\u7528\u518d\u9009\u4e00\u904d\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u5b9a\u51fa\u6765\u4e00\u5171\u9009\u4e86\u591a\u5c11\u79cd\u6728\u6876\uff0c\u4e4b\u540e\u641c\u7d22\uff0c\u518d\u8dd1\u5e03\u5c14\u5b8c\u5168\u80cc\u5305\uff0c\u56e0\u4e3a\u5df2\u7ecf\u628a\u6876\u7684\u5927\u5c0f\u6392\u8fc7\u5e8f\u4e86\uff0c\u90a3\u4e48\u5982\u679c\u53ef\u4ee5\u62fc\u6210\u4f53\u79ef\u4e3aq\u7684\u5c31\u76f4\u63a5\u8f93\u51fa\u7ed3\u675f\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002\n\nS2\n\u6ce8\u610f\u4e24\u4e2a\u5c0f\u9519\u8bef\u3002\n\n\u7b2c\u4e00\u4e2a\uff0c\u5728\u6700\u521d\u7684\u90a3\u4e00\u904d\u5b8c\u5168\u80cc\u5305\u4e2d\uff0c\u5982\u679cf[j-a[i]]+value\u7b49\u4e8ef[j]\uff0c\u90a3\u4e5f\u8981\u628avis[j]\u8bbe\u4e3a1\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u6700\u4f18\u2014\u2014\u5728\u540c\u6837\u7684f[j]\u4e0b\uff0c\u5982\u679cvis[j]=1\uff0c\u90a3\u4e48f[j+a[i]]\u7684\u503c\u4f1a\u5c11\u52a01\uff0c\u4ece\u800c\u4fdd\u8bc1\u6700\u7ec8\u7684\u7ed3\u679c\u6700\u4f18\u3002\n\n\u7b2c\u4e8c\u4e2a\uff0c\u8fd9\u4e2a\u771f\u662f\u65e0\u8bed\uff0c\u5c0f\u9519\u8bef\u5bb3\u6b7b\u4eba\u554a\u3002\u5728\u641c\u7d22\u5b8c\u7684\u90a3\u6b21\u5b8c\u5168\u80cc\u5305\u4e2d\uff0c\u6211\u7684\u521d\u59cb\u5316\u4e0d\u662fg[i]=big\uff0c\u800c\u662fg[q]=big\u2026\u2026\u624b\u4e00\u6ed1\uff0c\u4e09\u4e2a\u4eba\u68c0\u67e5\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u6b7b\u6d3b\u68c0\u67e5\u4e0d\u51fa\u6765\uff0c\u4ece\u7f51\u4e0a\u4e0b\u4e86\u6570\u636e\u624d\u51fa\u6765\u7684\u2026\u2026\u68c0\u67e5\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u4ed4\u7ec6\u770b\uff0c\u4e0d\u8981\u56e0\u4e3a\u8bed\u53e5\u7b80\u5355\u5c31\u4e0d\u770b\u4e86\uff0c\u7b80\u5355\u7684\u8bed\u53e5\u4e5f\u53ef\u80fd\u624b\u6ed1\u6253\u9519\u3002\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#define rint register int\n#define inv inline void\n#define big 1e9\nusing namespace std;\nint p,q,a[101],f[20001],que[101],cnt;\nbool use[101],vis[20001],g[20001];\ninv dp()\n{\n    for (rint i=0;i<=q;i++) g[i]=0;g[0]=1;\n    for (rint i=1;i<=f[q];i++)\n        for (rint j=a[que[i]];j<=q;j++)\n            if (g[j-a[que[i]]]) g[j]=1;\n    if (g[q])\n    {\n        printf(\"%d \",f[q]);\n        for (rint i=1;i<=f[q];i++) printf(\"%d \",a[que[i]]);\n        exit(0);\n    }\n}\ninv dfs(int x,int dep)\n{\n    if (dep==f[q]) \n    {\n        dp();\n        return;\n    }\n    if (f[q]-dep>p-x) return;\n    for (rint i=x+1;i<=p;i++)\n    {\n        que[dep+1]=i;\n        dfs(i,dep+1);\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&q,&p);\n    for (rint i=1;i<=p;i++) scanf(\"%d\",&a[i]);\n    sort(a+1,a+p+1);\n    for (rint i=0;i<=q;i++) f[i]=big;f[0]=0;    \n    for (rint i=1;i<=p;i++)\n        for (rint j=0;j<=q;j++)\n        {\n            vis[j]=0;\n            if (j>=a[i])\n            {\n                int value=vis[j-a[i]]^1;\n                if (f[j-a[i]]+value<=f[j])\n                {\n                    f[j]=f[j-a[i]]+value;\n                    vis[j]=1;\n                }\n            }\n        }\n    dfs(0,0);\n} \n```\n\u603b\u7ed3\uff1a\n\n1.  \u8981\u601d\u8003\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u641c\u51fa\u6765\u7684\u662f\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u662f\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u526a\u6389\u3002\n\n2.  \u4e00\u5b9a\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u7b49\u4e8e\u53f7\u52a0\u4e0d\u52a0\u662f\u4e2a\u95ee\u9898\uff0c\u4ed4\u7ec6\u601d\u8003\u3002\u51fa\u9519\u7684\u65f6\u5019\u4e00\u53e5\u4e00\u53e5\u8ba4\u771f\u68c0\u67e5\uff0c\u5343\u4e07\u4e0d\u8981\u5acc\u9ebb\u70e6\uff0c\u53d1\u6101\u7684\u65f6\u95f4\u6bd4\u68c0\u67e5\u7684\u65f6\u95f4\u957f\u591a\u4e86\u3002\n",
        "postTime": 1514070035,
        "uid": 43470,
        "name": "xMinh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u548c\u5cb3\u9e93\u5c71\u4e0a\u6253\u6c34\u662f\u4e00\u6837\u7684\n\n\u5148\u628a\u539f\u6765\u7684\u9898\u89e3\u53d1\u4e00\u904d\n\n\u867d\u8bf4\u6807\u7b7e\u662fDP\uff0c\u8fed\u4ee3\u641c\u7d22\u672a\u5c1d\u4e0d\u53ef\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define xyf main\nconst int maxn =105;\nconst int maxv=21000;\nint f[maxv];\nint a[maxn];\nint v[maxn];\nint V,n;\nint maxd;\ninline void read(int& d)\n{\n    d=0;\n    bool mark=false;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')mark=true;ch=getchar();}\n    while(ch<='9'&&ch>='0'){d=(d<<3)+(d<<1)+ch-'0';ch=getchar();}\n    if(mark)d=-d;\n}\ninline void write(int x)\n{\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\ninline void init()\n{\n    read(V);\n    read(n);\n    for(int i=1;i<=n;++i)\n        read(v[i]);\n}\ninline void print()\n{\n    write(maxd),putchar(' ');\n    for(int i=1;i<=maxd;++i)\n        write(a[i]),putchar(' ');;\n    exit(0);\n}\ninline bool check(int x)\n{\n    int &s=f[x];\n    if(s!=-1)\n        return s;\n    if(x==0)\n        return s=1;\n    for(int i=1;i<=maxd;++i)\n        if(x>=a[i]&&check(x-a[i]))\n            return s=1;\n    return s=0;\n}\ninline void dfs(int depth,int k)\n{\n    if(depth>maxd)\n    {\n        memset(f,-1,sizeof(f));\n        if(check(V))\n            print();\n        return;\n    }\n    if(k>n)\n        return;\n    a[depth]=v[k];\n    dfs(depth+1,k+1);\n    dfs(depth,k+1);\n}\ninline void id_dfs()\n{\n    sort(v+1,v+n+1);\n    n=unique(v+1,v+n+1)-v-1;\n    for(maxd=1;maxd<=n;++maxd)\n        dfs(1,1);\n}\nint xyf()\n{\n    init();\n    id_dfs();\n    return 0;\n}\n```\n\u672c\u4e32\u4ee3\u7801\u4e2d\uff0c\u5229\u7528\u4e86\u8bfb\u5165\u548c\u8f93\u51fa\u4f18\u5316\uff0c\u5f53\u7136\u662f\u96d5\u866b\u5c0f\u6280\u3002\u5728\u8fdb\u884c\u641c\u7d22\u65f6\uff0c\u4f7f\u7528maxd\u63a7\u5236\u641c\u7d22\u6df1\u5ea6\u3002 \u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6280\u5de7\uff0cdfs\u51fd\u6570\u4e2d\uff0c\u5148\u7b97\u9009\u53d6\uff0c\u518d\u7b97\u4e0d\u9009\u53d6\uff0c\u5de7\u5999\u7684\u8986\u76d6\u4e86~~~\n\n\u56e0\u4e3a\u6bcf\u4e2a\u6c34\u6876\u53ef\u4ee5\u7528\u65e0\u9650\u591a\u6b21\n\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5b8c\u5168\u80cc\u5305\u6765\u89e3\u51b3\n\n\n\u56e0\u4e3a\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u80fd\u88c5\u6ee1\u6240\u4ee5\u6211\u4eec\u7528f[]\u76840\u62161\u6765\u8868\u793a\u80fd\u5426\u5230\u8fbe\n\n\n\u7136\u540e\u5b8c\u5168\u80cc\u5305\u5237\u4e00\u904d\u5373\u53ef\n\n\n\u8fd9\u91cc\u53ef\u4ee5\u7528\u9012\u63a8\u5730\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\uff0c\u9012\u5f52\u4f1a\u6bd4\u9012\u63a8\u5feb\u5f88\u591a~\n\n\n\u56e0\u4e3a\u9012\u63a8\u8981\u5168\u90e8\u5237\u4e00\u904d\u590d\u6742\u5ea6\u662fO(nV)\u7684\uff0c\u800c\u9012\u5f52\u9012\u5f52\u4e0b\u53bb\u627e\u5230\u4e00\u4e2a\u53ef\u884c\u89e3\u5c31\u662f\u8fde\u7eed\u9012\u5f52\u8fd4\u56de\uff0c\u6240\u4ee5\u6548\u7387\u9ad8\u4e86\u5f88\u591a(220ms-45ms)\n\n\n\u4e0b\u9762\u8bb2\u4e00\u8bb2\u4ee3\u7801\u91cc\u7684\u5c0f\u4f18\u5316\n\n\u5148\u7ed9\u51fa\u4e00\u4e32\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e4+10;\nconst int maxm = 1e2+10;\n#define xyf main\nint V,n,maxd;\nint f[maxn];\nint v[maxm];\nint a[maxm];\ninline void read(int& d)\n{\n    d=0;\n    bool mark=false;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')mark=true;ch=getchar();}\n    while(ch>='0'&&ch<='9'){d=(d<<3)+(d<<1)+ch-'0';ch=getchar();}\n    if(mark)d=-d;\n}\ninline void write(int d)\n{\n    if(d<0)putchar('-'),d=-d;\n    if(d>9)write(d/10);\n    putchar(d%10+'0');\n}\ninline void init()\n{\n    read(V);\n    read(n);\n    for(int i=1;i<=n;++i)\n        read(v[i]);\n}\ninline void print()\n{\n    write(maxd);\n    putchar(' ');\n    for(int i=1;i<=maxd;++i)\n        write(a[i]),putchar(' ');\n    exit(0);\n}\ninline bool check(int x)\n{\n    int s=f[x];\n    if(s!=-1)\n        return s;\n    if(x==0)\n        return s=1;\n    for(int i=1;i<=maxd;++i)\n        if(x>=a[i]&&check(x-a[i]))\n            return s=1;\n    return s=0;\n}\ninline void dfs(int depth,int k)\n{\n    if(depth>maxd)\n    {\n        memset(f,-1,sizeof(f));\n        if(check(V))\n            print();\n        return;\n    }\n    if(k>n)\n        return;\n    a[depth]=v[k];\n    dfs(depth+1,k+1);\n    dfs(depth,k+1);\n}\ninline void id_dfs()\n{\n    sort(v+1,v+n+1);\n    for(maxd=1;maxd<=n;++maxd)\n        dfs(1,1);\n}\nint xyf(int argc, char const *argv[])\n{\n    init();\n    id_dfs();\n    return 0;\n}\n```\n\u8fd9\u4e32\u4ee3\u7801\u4e4d\u4e00\u770b\u548c\u4e0a\u9762\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u662f\u8d85\u65f6\u3002\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u5bf9\u6bd4\u4e00\u4e0b\n\n\u6709\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5730\u65b9\n\n\u4e24\u4e2a\u4ee3\u7801\u90fd\u7528\u4e86\u8bfb\u5165\u8f93\u51fa\u4f18\u5316\uff0c\u4f46\u8fd8\u662f\u4f1a\u67093\u4e2a\u70b9\u7684\u5dee\u8ddd\uff0c\u53ef\u89c1\u8fd9\u4e00\u9898\u6570\u636e\u662f\u591a\u4e48\u7684sxbk\u3002\n\n\u7b2c\u4e00\u5904\u5927\u6982\u5c31\u662f\n\nunique(v+1,v+n+1)-v-1;\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86unique\u51fd\u6570\uff0c\u91cd\u590d\u7684\u7b52\u5b50\u5220\u6389\uff0c\u53ef\u80fd\u53ea\u6709\u4e00\u70b9\u5c0f\u5c0f\u7684\u6539\u8fdb\u5427\u3002\n\n\u4f46\u4e0b\u9762\u7684\u8fd9\u4e00\u70b9\u597d\u50cf\u5f88\u6709\u7528\n\n\u5728check\u51fd\u6570\u4e2d\uff0c\u6709\u4e00\u53e5int &s=f[x]\n\n\u4f7f\u7528\u4e86\u53d6\u5730\u5740\n\n\u66f4\u5feb\u66f4\u6709\u6548\u7684\u8fdb\u884c\u53d6\u503c\uff08\u4f30\u8ba1\u4e24\u4e2a\u4ee3\u7801\u7684\u4e3b\u8981\u5dee\u8ddd\u5c31\u5728\u8fd9\u91cc\u4e86\uff09\n\n\u7531\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u7ecf\u9a8c\n\n\u5728\u5bf9\u6570\u7ec4\u4e2d\u7684\u53d8\u91cf\u8fdb\u884c\u5f15\u7528\u65f6\uff0c\u4f7f\u7528&\u4f1a\u5feb\u4e0d\u5c11\u5462\n\n\u5177\u4f53\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u6d89\u53ca\u5230c++\u7684\u4e00\u4e9b\u57fa\u672c\u539f\u7406\uff0c\u5927\u6982\u5c31\u662f\u4e0e\u6570\u7ec4\u5e76\u4e0d\u662f\u201c\u4e00\u7b49\u516c\u6c11\u201d\u6709\u5173\u5427\uff08\u6709\u5173\u53c2\u89c1\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\uff09\u3002\n\n\u8fd8\u6709\u4ec0\u4e48\u4e0d\u660e\u767d\uff0c\u53ef\u4ee5\u79c1\u6211\u3002\n",
        "postTime": 1506573839,
        "uid": 54205,
        "name": "xzyyf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u7528\u5b8c\u5168\u80cc\u5305\u6765\u505a\n\n\u9996\u5148\uff0c\u770b\u4e00\u4e0b70\u5206\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[110];\nint f[21000][110];\nbool bk[21000][110];\ninline bool bijiao(int x,int y)\n{\n    for(int i=1;i<=f[x][0];i++)\n    {\n        if(f[x][i]<f[y][i]) return true;\n        if(f[x][i]>f[y][i]) return false;\n    }\n    return false;\n}\nint main()\n{\n    int i,j,k,t;\n    scanf(\"%d%d\",&m,&n);\n    for(i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    for(i=1;i<=m;i++) f[i][0]=200;\n    sort(a+1,a+n+1);\n    memset(bk,false,sizeof(bk));bk[0][0]=true;\n    for(i=1;i<=n;i++) \n    {\n        for(j=a[i];j<=m;j++)\n        {\n            if(bk[j-a[i]][0]==false) continue;\n            t=f[j-a[i]][0];\n            if(bk[j-a[i]][i]==false) t++;\n            if(t>f[j][0]) continue;\n            if(t<f[j][0] || bijiao(j-a[i],j)==true)\n            {\n        \t\tmemset(bk[j],false,sizeof(bk[j]));bk[j][0]=true;\n                f[j][0]=t;\n                for(k=1;k<=f[j-a[i]][0];k++) f[j][k]=f[j-a[i]][k],bk[j][f[j][k]]=true;\n                if(bk[j-a[i]][i]==false) f[j][t]=i,bk[j][i]=true;\n            }\n        }\n    }\n    printf(\"%d\",f[m][0]);\n    for(i=1;i<=f[m][0];i++) \n    {\n        //if(a[f[m][i]]==1576) a[f[m][i]]=949;\n        printf(\" %d\",a[f[m][i]]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n\u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5c31\u662f\u5bb9\u6613\u5728\u8fd8\u6ca1\u6709\u627e\u5230\u7684\u65f6\u5019\u5c31\u88ab\u8986\u76d6\u4e86\n\n\u6240\u4ee5\u9700\u8981\u6539\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint a[110],s,fa; \n\tnode()\n\t{\n\t\tmemset(a,2,sizeof(a));\n\t\ts=200;\n\t}\n}f[21000];\nint t,n,m,ans;\nstruct box\n{\n\tint x,d;\n}a[210000];//\u8bb0\u5f55\u6876 \nbool bk[11000];\ninline bool pd(node x,node y)//\u5b57\u5178\u8bb8\u5224\u65ad \n{\n\tfor(int i=1;i<=x.s;i++)\n\t{\n\t\tif(x.a[i]>y.a[i]) return false;\n\t\tif(x.a[i]<y.a[i]) return true;\n\t}\n\treturn false;\n}\ninline int cmp(const void *xx,const void *yy)//\u5feb\u6392 \n{\n    box x=*(box*)xx;\n    box y=*(box*)yy;\n    if(x.x!=y.x)\n    {\n        return x.x<y.x?0:1;\n    }\n    return x.d<y.d?0:1;\n}\nint main()\n{\n\tint i,j,x,y;\n\tscanf(\"%d%d\",&m,&t);\n\tmemset(bk,true,sizeof(bk));//\u8bb0\u5f55\u662f\u5426\u627e\u8fc7 \n\tfor(i=1;i<=t;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tif(bk[x]==true)\n\t\t{\n\t\t\tbk[x]=false;\n\t\t\ty=1;\n\t\t\twhile(x*y<=m)//\u6539\u4e3a\u500d\u589e \n\t\t\t{\n\t\t\t\tn++;\n\t\t\t\ta[n].x=x;a[n].d=y*x;\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\tqsort(a+1,n,sizeof(box),cmp);//\u6392\u5e8f \n\tf[0].s=0;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=0;j<=m;j++)\n\t\t{\n\t\t\tif(a[i].x!=a[i-1].x) f[j].fa=0;//\u5982\u679c\u8fd9\u4e2a\u6876\u548c\u524d\u9762\u7684\u6876\u4e0d\u662f\u540c\u4e00\u4e2a\u500d\u589e\u6765\u7684\uff0c\u7956\u5148\u5c31\u4e0d\u4e00\u6837 \n\t\t\tif(j-a[i].d<0)continue;//\u5982\u679c\u5c0f\u4e8e0 \n\t\t\tif(f[j-a[i].d].s!=200)//\u5982\u679c\u524d\u9762\u7684\u80fd\u5230\u8fbe \n\t\t\t{\n\t\t\t\tif(f[j].fa==0) \n\t\t\t\t{\n\t\t\t\t\tif(f[j-a[i].d].s+1<f[j].s)\n\t\t\t\t\t{\n\t\t\t\t\t\tf[j]=f[j-a[i].d];\n\t\t\t\t\t\tf[j].a[++f[j].s]=a[i].x;\n\t\t\t\t\t\tf[j].fa=1;\n\t\t\t\t\t}\n\t\t\t\t\telse if(f[j-a[i].d].s+1==f[j].s)\n                    {\n                        f[j-a[i].d].a[++f[j-a[i].d].s]=a[i].x;\n                        if(pd(f[j-a[i].d],f[j])==true)//\u5224\u65ad\u5b57\u5178\u5e8f \n                        {\n                            f[j]=f[j-a[i].d];\n                            f[j].fa=f[j].s;\n                        }\n                        f[j-a[i].d].s--;\n                    }\n                }\n                if(f[j-a[i].d].fa!=0)//\u5982\u679c\u662f \n                {\n                    if(f[j-a[i].d].s<f[j].s)f[j]=f[j-a[i].d];\n                    else if(f[j-a[i].d].s==f[j].s)\n                    {\n                        if(pd(f[j-a[i].d],f[j])==true)f[j]=f[j-a[i].d];\n                    }\n                }\n            }\n        }\n    }\n    printf(\"%d\",f[m].s);//\u8f93\u51fa \n    for(i=1;i<=f[m].s;i++) printf(\" %d\",f[m].a[i]);\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n\u8fd9\u6837\u5c31\u4e0d\u4f1a\u88ab\u63d0\u524d\u8986\u76d6\u4e86\n\n\u53ef\u662f\u8fd9\u6837\u5b50\u6709\u4e9b\u6162\uff0c\u542c\u5927\u4f6c\u4eec\u8bf4\u7528dfs\uff0c\u6211\u5c31\u6539\u4e86\u4e00\u4e0bdfs\u7684\n\n\u4ee3\u7801\uff0c0ms\uff0c\u65e0\u540e\u6548\u6027\uff08dfs\u4e00\u6b21\u6027\u641c\u5230\u4f4e\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nint a[110];\nint d[110],f[110],flag;//d\u8868\u793a\u6682\u65f6\u50a8\u5b58\uff0cf\u8868\u793a\u6700\u540e\u7ed3\u679c \nbool bk=false;//bk\u8868\u793a\u662f\u5426\u627e\u5230 \nvoid dfs(int k,int v,int s)//k\u8868\u793a\u5f53\u524d\u50a8\u5b58\u7684\u7ed3\u679c\u6570\uff0cv\u8868\u793a\u5269\u4f59\u7684\u5976\u91cf\uff0cs\u8868\u793a\u679a\u4e3e\u5230\u7684\u6876\u7684\u7f16\u53f7 \n{\n\tif(k==flag)//\u5982\u679c\u5230\u4e86 \n\t{\n\t\tif(v==0)//\u6ca1\u6709\u5269\u4f59\u7684 \n\t\t{\n\t\t\tmemcpy(f,d,sizeof(d));//\u590d\u5236 \n\t\t\tbk=true;//\u8bb0\u4e3a\u53ef\u4ee5 \n\t\t}\n\t\treturn;//\u8fd4\u56de \n\t}\n\tif(s>n || /* k>flag */a[s]>f[k]) return;//\u5982\u679c\u8d85\u8fc7\u4e86\u5927\u5c0f\uff0c\u6216\u8005\u5b57\u5178\u5e8f\u66f4\u5927\uff0c\u90fd\u8981\u9000 \n\td[k]=a[s];//\u8bb0\u5f55\u4e0b\u6765 \n\tfor(int i=1;i*a[s]<=v;i++)//\u679a\u4e3e\u500d\u6570 \n\t{\n\t\tdfs(k+1,v-i*a[s],s+1);//\u6df1\u641c \n\t}\n\tif(s<n) dfs(k,v,s+1);//\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u5c31\u662f\u4e0d\u7528\u8fd9\u4e2a\u6876\u76f4\u63a5\u73a9\u4e0b\u6df1\u641c \n}\nint main()\n{\n\tint i;\n\tscanf(\"%d%d\",&m,&n);\n\tmemset(f,2,sizeof(f));//\u53d8\u5f97\u65e0\u9650\u5927 \n\tfor(i=1;i<=n;i++) scanf(\"%d\",&a[i]);//\u8f93\u5165\u548c\u6392\u5e8f \n\tsort(a+1,a+n+1);\n\tfor(flag=1;flag<=n;flag++)//\u679a\u4e3eflag\u4e2a\u6876\u662f\u5426\u53ef\u4ee5 \n\t{\n\t\tdfs(0,m,1);//\u6df1\u641c \n\t\tif(bk==true) break;\n\t}\n\tprintf(\"%d\",flag);\n\tfor(i=0;i<flag;i++) printf(\" %d\",f[i]);\n\tprintf(\"\\n\");return 0;\n}\n```",
        "postTime": 1527573894,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4e5f\u7528\u4e86\u7eafDP\uff0c\u4e0d\u8fc7\uff0c\u4e0d\u540c\u7684\u662f\uff0c\u6211\u7528\u4e86\u4e00\u79cd\u795e\u5947\u7684\u500d\u589e\uff0c\u5e76\u4e14\uff0c\u80cc\u5305\u6570\u7ec4\u8fd8\u989d\u5916\u7ef4\u62a4\u4e86zx\u4e00\u4e2a\u53d8\u91cf\uff0c\u6765\u8bb0\u5f55\u4ed6\u9700\u4e0d\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u6876\uff01\n\n\u4e0d\u8bf4\u4e86\uff0c\u9738\u738b\u786c\u4e0a\u5f13\uff0c\u770b\u4ee3\u7801\uff01\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\nusing  namespace std;\nstruct  node\n{\n    int  a[101],d/*\u8ba1\u7b97\u9700\u8981\u591a\u5c11\u4e2a\u6876*/,zx;\n    node()\n    {\n    \tmemset(a,1,sizeof(a));\n    \td=99999999;\n    }\n}v[20003];int  n,m,ans=99999999,nn;//\u7528\u6765dp\u7684\u6570\u7ec4 \nstruct  tong\n{\n    int  d,x;\n}a[201000];//\u50a8\u5b58\u6876\u7684\u4fe1\u606f \nbool  oo[11000];\ninline  int  mymin(int  x,int  y){return  x<y?x:y;}\ninline  int  mymax(int  x,int  y){return  x>y?x:y;}\ninline  bool  pd(node  x,node  y)\n{\n    for(int  i=1;i<=x.d;i++)\n    {\n    \tif(x.a[i]!=y.a[i])return  x.a[i]<y.a[i];\n    }\n    return  false;\n}//\u5b57\u5178\u5e8f\u6bd4\u8f83 \ninline  bool  cmp(tong  x,tong  y){return  x.x!=y.x?x.x<y.x:x.d<y.d;}//\u795e\u5947\u7684\u6392\u5e8f\uff08\u4e09\u7ea7\u8fd0\u7b97\u7b26\u7248\uff09 \nint  main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int  i=1;i<=n;i++)\n    {\n        int  x;\n        scanf(\"%d\",&x);\n        if(oo[x]==false)\n        {\n            oo[x]=true;//\u53bb\u91cd\u662f\u4e2a\u597d\u4e1c\u897f \n            int  t=1;\n            while(t*x<=m)\n            {\n                a[++nn].x=x;\n                a[nn].d=t*x;\n                t++;\n            }//\u795e\u5947\u7684\u500d\u589e\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u9700\u8981\u51cf\u53bb \n        }\n    }\n    sort(a+1,a+nn+1,cmp);\n    v[0].d=0;\n    for(int  i=1;i<=nn;i++)\n    {\n        for(int  j=0;j<=m;j++)\n        {\n        \tif(a[i].x!=a[i-1].x)v[j].zx=0;//\u628a\u4ee5\u524d\u7684zx\u6807\u8bb0\u53bb\u6389 \n        \tif(j-a[i].d<0)continue;\n            if(v[j-a[i].d].d!=99999999)//\u4ee5\u524d\u88ab\u66f4\u65b0\u6211\u518d\u53bb\u7b97 \n        \t{\n        \t\tif(v[j-a[i].d].zx==0)\n        \t\t{\n        \t\t\tif(v[j-a[i].d].d+1<v[j].d)\n                    {\n                        v[j]=v[j-a[i].d];\n                        v[j].a[++v[j].d]=a[i].x;\n                        v[j].zx=1;//\u6807\u8bb0 \n                    }//\u66f4\u65b0 \n                    else  if(v[j-a[i].d].d+1==v[j].d)\n                    {\n                        v[j-a[i].d].a[++v[j-a[i].d].d]=a[i].x;\n                        if(pd(v[j-a[i].d],v[j])==true)\n                        {\n                            v[j]=v[j-a[i].d];\n                            v[j].zx=v[j].d;\n                        }\n                        --v[j-a[i].d].d;\n                    }//\u7ef4\u62a4\u5b57\u5178\u5e8f \n                }\n                if(v[j-a[i].d].zx!=0)\n        \t\t{\n        \t\t\tif(v[j-a[i].d].d<v[j].d)v[j]=v[j-a[i].d];\n                    else  if(v[j-a[i].d].d==v[j].d)\n                    {\n                        if(pd(v[j-a[i].d],v[j])==true)v[j]=v[j-a[i].d];\n                    }\n                }//\u8fd9\u4e2a\u6876\u4e4b\u524d\u51fa\u73b0\u8fc7\uff0c\u5c31\u5c11\u4e86\u4f17\u591a\u64cd\u4f5c \n            }\n        }\n    }\n    ans=v[m].d;\n    printf(\"%d\",ans);\n    for(int  i=1;i<=ans;i++)printf(\" %d\",v[m].a[i]);//\u8f93\u51fa \n    printf(\"\\n\");\n    return  0;\n}\n```\n\n\u4e8e\u662f\uff0c\u8fd9\u9053\u9898\u5c31\u8fd9\u4e48\u6f02\u4eae\u7684\u89e3\u51b3\u5566\uff01",
        "postTime": 1527486300,
        "uid": 65602,
        "name": "\u7231\u559d\u654c\u654c\u754f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u5e0c\u671b\u5927\u795e\u53ef\u4ee5\u6559\u6211\u52a8\u5f52........555555\n\n\u867d\u7136\u6211\u611f\u89c9\u4e0d\u80fd\u7528\u52a8\u5f52\uff0c.....\n\n\u6211\u7528\u7206\u641c\u505a\u7684\uff0c\u62fc\u547d\u4f18\u5316\n\n```cpp\nint a[101],an[101],ans[101];\nint n,m,x,sum;\nbool p;\nvoid getnew(int z){\n    sum=z;\n    for(int i=1;i<=z;i++)ans[i]=an[i];\n}\nvoid dfs(int x,int y,int z){//\u7b2cx\u4f4d\uff0c\u5269\u4f59y\uff0c\u5f53\u524d\u5df2\u4e70\u4e86z\u4e2a\u6876 \n    if(z>sum)return;\n    an[z]=a[x];\n    if(y%a[x]==0){\n        if(z>sum)return;else\n        if(z<sum)getnew(z);else{\n            for(int i=1;i<=z;i++)if(an[i]!=ans[i]){\n                if(an[i]<ans[i])getnew(z);\n                break;\n            }\n        }\n        return;\n    }\n    if(x==n)return;\n    for(int j=1;j<=y/a[x];j++)dfs(x+1,y-a[x]*j,z+1);\n    dfs(x+1,y,z);\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    sum=1e9;\n    sort(a+1,a+n+1);\n    dfs(1,m,1);\n    printf(\"%d\",sum);\n    for(int i=1;i<=sum;i++)printf(\" %d\",ans[i]);\n}\n```",
        "postTime": 1485957143,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "# \u91cd\u70b9\uff1a\u4e00\u79cd~~\u7384\u5b66~~\u526a\u679d\u4f18\u5316\n\n\u6b64\u9898\u7684\u5176\u4ed6\u90e8\u5206\u90fd\u5927\u81f4\u8bb2\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u90fd\u662f \u526a\u679d\u540e\u7684dfs+\u5b8c\u5168\u80cc\u5305\u53ef\u8fbe\u6027dp \uff0c\u849f\u84bb\u5728\u6b64\u8bb2\u8ff0\u4e00\u4e2a\u975e\u5e38\u6709\u6548\u7684\u526a\u679d\u65b9\u6cd5qwq\n\n\u5bf9\u4e8e\u6bcf\u4e2a $a_i$ \uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u6570\u5217\u4e2d\u7b5b\u9664\u5b83\u7684 $2$ \u500d\u4ee5\u4e0a\u500d\u6570\u3002\n\n\u539f\u56e0\u663e\u7136\uff0c\u90fd\u662f\u5b8c\u5168\u80cc\u5305\uff0c\u6240\u4ee5\u4f5c\u4e3a\u6bcf\u4e2a $a_i$ \u7684\u500d\u6570\u7684\uff0c\u5fc5\u4e0d\u4e00\u5b9a\u5bf9\u6700\u4f18\u89e3\u505a\u51fa\u8d21\u732e\uff0c\u80af\u5b9a\u53ef\u4ee5\u7b5b\u9664\uff0c\u7f29\u5c0f\u641c\u7d22\u89c4\u6a21\u3002\n\n\u4e8e\u662f\u4ee3\u7801\u51fa\u6765\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<8,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<8],*p1=buf,*p2=buf;\nint n,q,a[101],k,tmx,at; \nbool bz[101],f[20001],t[10001];\ninline bool ck()\n{\n\tmemset(f,0,sizeof(f));f[0]=1;for(register int i=1;i<=n;++i)if(bz[i])for(register int j=a[i];j<=q;++j)f[j]|=f[j-a[i]];\n\treturn f[q];\n}\ninline void dfs(int cnt)\n{\n\tif(cnt==k+1){if(ck()){printf(\"%d \",k);for(register int i=1;i<=n;++i)if(bz[i])printf(\"%d \",a[i]);exit(0);}return;}\n\tfor(register int i=cnt;i<=n;++i)if(!bz[i])bz[i]=1,dfs(cnt+1),bz[i]=0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&q,&n);\n\tfor(register int i=1;i<=n;++i)scanf(\"%d\",&at),t[at]=1,tmx=(at>tmx)?at:tmx;\n\tn=0;\n\tfor(register int i=2;i<=tmx;++i)if(t[i])for(register int j=i+i;j<=tmx;j+=i)t[j]=0;\n\tfor(register int i=0;i<=tmx;++i)if(t[i])a[++n]=i;\n\tfor(k=1;k<=n;++k)dfs(1);\n\treturn 0;\n}\n```",
        "postTime": 1601295778,
        "uid": 121995,
        "name": "SmallTualatin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "/\\*\n\u4e0b\u9762\u9898\u89e3\u7684DP\u7a0b\u5e8f\u6c42\u65b9\u6848\u7684\u505a\u6cd5\u592a\u9ebb\u70e6\u4e86\u3002\u5176\u5b9e\u53ea\u8981\u4e00\u4e2abool\u6570\u7ec4\u5c31ok\u4e86\n\n\\*/\n    \n```cpp\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define Rep(i,a,b) for(register int i=a;i>=b;--i)\nconst int oo=1e9+7;\nusing namespace std;\nint n,v,t[101],f[20001];        //t\u5c31\u662f\u6876\u5b50\uff0cf\u8868\u793a\u6700\u5c11\u7684\u65b9\u6848\u6570\nbool pre[20010][105];            //pre[i][j]\u5b58\u50a8\u72b6\u6001i\u7528\u4e86\u54ea\u4e9bj\u7684\u6876\nint read(){\n    char x;\n    while((x=getchar())>'9' || x<'0');\n    int u=x-'0';\n    while((x=getchar())>='0' && x<='9')\n    u=u*10+x-'0';\n    return u;\n    }\nbool pd(int a,int b){            //\u6bd4\u8f83\u4e24\u79cd\u65b9\u6848\u8c01\u66f4\u4f18\n                                //\"\u5bf9\u4e8e\u7ed9\u51fa\u7684\u4e24\u4e2a\u6781\u5c0f\u6876\u96c6\u5408\uff0c\u4ed6\u4f1a\u9009\u62e9\u201c\u66f4\u5c0f\u7684\u201d\u4e00\u4e2a\"\n    For(i,1,n)\n        if(pre[a][i]^pre[b][i]==1){\n            if(pre[a][i]) return 1;\n            else return 0;\n        }\n    return 1;\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"output.out\", \"w\", stdout);\n#endif\n    int i,j,k,sum;\n    v=read(); n=read();\n    For(i,1,n) t[i]=read();\n    sort(t+1,t+n+1);        //\u6392\u5e8f\u4fdd\u8bc1\u8f93\u51fa\u65f6\u4ece\u5927\u5230\u5c0f\n    memset(f,63,sizeof(f));\n    f[v]=0;\n    For(i,1,n)                //\u65e0\u9650\u80cc\u5305\n        Rep(j,v,1)\n            for(k=1;;k++){\n                sum=j-t[i]*k;\n                if(sum<0) break;\n                if(f[sum]==f[j]+1){        //\u5982\u679c\u8f6c\u79fb\u65f6\u7b2c\u4e00\u95ee\u6ee1\u8db3\u4e86\n                    if(!pd(sum,j)){        //\u5b58\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\n                        memcpy(pre[sum],pre[j],sizeof(pre[sum]));\n                        pre[sum][i]=1;\n                    }\n                }\n                else if(f[sum]>f[j]+1){\n                    f[sum]=f[j]+1;\n                    memcpy(pre[sum],pre[j],sizeof(pre[sum]));\n                    pre[sum][i]=1;\n                }\n            }\n    printf(\"%d \",f[0]);\n    For(i,1,n)\n        if(pre[0][i]){ printf(\"%d \",t[i]); } //\u5982\u679c\u6709\u5c31\u8f93\u51fa\n    return 0;\n}\n\n```",
        "postTime": 1504101549,
        "uid": 19622,
        "name": "\u7f57\u65c5\u6d32",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u7528\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22\u6765\u505a\n\n\u63a7\u5236\u6876\u7684\u6570\u91cf\u4f5c\u4e3a\u6df1\u5ea6\n\n\u4f9d\u6b21\u679a\u4e3e\u3002\n\n\u627e\u5230\u89e3\u4e4b\u540e\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u800c\u6bcf\u6b21\u8fed\u4ee3\u53cd\u590d\u8ba1\u7b97\u7684\u4e1c\u897f\uff0c\u548c\u6bcf\u4e00\u5c42\u62d3\u5c55\u51fa\u6765\u7684\u76f8\u6bd4\uff0c\u4e0d\u503c\u4e00\u63d0\u3002\n\n\u6d1b\u8c37\u8fd9\u9898\u7684\u6570\u636e\u7565\u6c34\n\n\u6211\u4eec\u81ea\u5df1rand\u7684\u6570\u636e\u6211\u8981\u5361\u5e38\u540e\u624d\u80fd\u8fc7\n\n\uff08\u8fd9\u4efd\u4ee3\u7801\u6ca1\u6709\u5361\u5e38\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define MAX 200\nint Q,p;\nint v[MAX];//\u4f53\u79ef\nbool fl=false;//\u6807\u8bb0\u662f\u5426\u627e\u5230\u89e3 \nint dep;//\u6307\u5b9a\u7684\u6df1\u5ea6 \nint C[MAX];//\u8bb0\u5f55\u9009\u5b9a\u7684\u6876 \nbool f[MAX*MAX];\ninline bool ok()\n{\n       memset(f,0,sizeof(f));\n       f[0]=true;\n       for(int i=1;i<=Q;++i)\n                for(int j=0;j<dep;++j)\n                 if(i>=C[j])\n                    f[i]|=f[i-C[j]];\n       return f[Q];\n}\ninline void outp()\n{\n       cout<<dep<<' ';\n       for(int i=0;i<dep;++i)\n         cout<<C[i]<<' ';\n       cout<<endl;       \n}\nvoid DFS(int x,int tot)//\u4e0a\u4e2a\u6876\u7684\u7f16\u53f7\u4ee5\u53ca\u5df2\u7ecf\u9009\u7684\u6876\u7684\u6570\u91cf \n{\n       if(tot==dep)\n       {\n                if(ok())\n                {\n                       outp();\n                       fl=true;\n                }\n                return;\n       }\n       if(fl)return;\n       for(int i=x+1;i<=p&&!fl;++i)\n       {\n                 if(p-i+1<dep-tot)//\u6876\u7684\u4e2a\u6570\u4e0d\u591f\u5230\u8fbe\u6307\u5b9a\u6df1\u5ea6 \n                    break;\n                 C[tot]=v[i];\n              DFS(i,tot+1);\n              C[tot]=0;\n       } \n}\nint main()\n{\n      cin>>Q;\n      cin>>p;\n      for(int i=1;i<=p;++i)\n        cin>>v[i];\n      sort(&v[1],&v[p+1]);\n      for(int i=1;i<=p;++i)//\u8fed\u4ee3\u52a0\u6df1\n      {\n               dep=i;//\u6700\u5927\u6df1\u5ea6\n             DFS(0,0); \n             if(fl)break;\n      }\n      return 0;\n}\n```",
        "postTime": 1499589573,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u88f8\u7684IDDFS~\uff08DFS\u597d\u50cf\u4e5f\u53ef\u4ee5\uff0c\u7136\u800c\u201c\u81ea\u5e26\u5de8\u5927\u5e38\u6570\u201d\u6280\u80fd\u4f7f\u672c\u849f\u84bb\u679c\u65ad\u653e\u5f03\uff09\n\n\n\u5bf9\u4e8eIDDFS\u662f\u4ec0\u4e48\u561b\u3002\u3002\u3002\u672c\u849f\u84bb\u7b80\u5355\u7684\u53e3\u80e1\u4e00\u4e0b\uff08\u5927\u795e\u4eec\u8bf7\u65e0\u89c6\u5e76\u76f4\u63a5goto\u6b63\u6587\uff09\n\n\nIDDFS\u7b80\u4ecb\uff1a\n\n\u5c31\u662f\u4e00\u79cd\u9650\u5236\u6df1\u5ea6\u7684DFS\u2026\u2026\n\n\u6709\u70b9\u7c7b\u4f3c\u7a7a\u95f4\u6781\u5c0f\u7248\u7684\u5e7f\u641c\uff0c\u4f46\u65f6\u95f4\u663e\u7136\u662f\u4e0d\u80fd\u6bd4\u7684~\uff08\u5927\u7ea6\u6162\u4e86\u4e0d\u5230\u4e00\u500d\u5427\u2026\u2026\u6709\u9519\u8f7b\u55b7\uff09\n\n\u4f46\uff0c\u5982\u679c\u5e7f\u641c\u70b8\u7a7a\u95f4\uff08\u6216\u4e0d\u77e5\u6700\u7ec8\u6240\u9700\u7a7a\u95f4\u662f\u5426\u4f1a\u70b8\uff09\u65f6\uff0c\u5b83\u5c31\u663e\u5f97\u7279\u522b\u6709\u7528\u3002\n\n\u6bcf\u6b21\u6211\u4eec\u7ed9DFS\u8bbe\u7f6e\u4e00\u4e2a\u6df1\u5ea6\u4e0a\u9650\uff0c\u5230\u8fbe\u8fd9\u4e2a\u4e0a\u9650\u4fbf\u7acb\u5373\u505c\u6b62DFS\uff0c\u56de\u6eaf\u3002\n\n\u82e5\u5728\u5f53\u524d\u6700\u5927\u6df1\u5ea6\u65e0\u89e3\u5219\u6700\u5927\u6df1\u5ea6\u589e\u52a0\u5e76\u4ece\u6839\u8282\u70b9\u91cd\u65b0\u641c\u7d22~\n\n\u8fd9\u6837\u4e0a\u4e00\u6b21\u641c\u7d22\u7684\u7ed3\u679c\u4e0d\u662f\u6d6a\u8d39\u4e86\u5417\uff1f\n\n\u662f\u7684\uff0c\u5c31\u662f\u6d6a\u8d39\u4e86\uff08\u3002\u3002\u3002\uff09\uff0c\u4f46\u4e3a\u4e86\u4e0d\u70b8\u7a7a\u95f4\u53ea\u80fd\u8fd9\u6837\u3002\u3002\u3002\n\n\u800c\u4e14\u636e\u672c\u6821\u67d0\u5927\u89e6\u79f0\uff0c\u6bcf\u4e00\u6b21\u52a0\u5927\u6700\u5927\u6df1\u5ea6\u65f6\u91cd\u65b0\u641c\u7d22\u5df2\u641c\u8fc7\u7684\u72b6\u6001\u6240\u9700\u7684\u65f6\u95f4\u548c\u641c\u5b8c\u6269\u5c55\u51fa\u7684\u65b0\u72b6\u6001\u5c42\u6240\u9700\u65f6\u95f4\u76f8\u6bd4 \"\u4e0d\u503c\u4e00\u63d0\"\uff08\u539f\u8bdd\uff0c\u6709\u9519...\u4e0d\u5173\u6211\u4e8b...\uff09\n\n\n\u6b63\u6587\uff1a\n\n\n\u7528IDDFS\u9650\u5236\u6bcf\u6b21\u641c\u7d22\u7684\u6df1\u5ea6\uff0c\u5728\u8fd9\u91cc\u662f\u9009\u4e2d\u7684\u6876\u7684\u4e2a\u6570\u3002\n\n\u641c\u5230\u6700\u5927\u6df1\u5ea6\u65f6\u7528\u5b8c\u5168\u80cc\u5305\u5224\u65ad\u73b0\u6709\u6876\u80fd\u5426\u8fbe\u5230\u6240\u6c42\u89e3\uff0c\u80fd\u5c31\u505a\u5b8c\u4e86\uff0c\u4e0d\u80fd...\u7ee7\u7eed\u641c\u554a...\n\n\u771f\u7684\u4e0d\u4f1aT\uff0c\u771f\u7684\uff08\u672c\u849f\u84bb\u5e38\u6570\u5de8\u5927\u7684\u7a0b\u5e8f\u6700\u540e\u4e00\u4e2a\u70b9\u624d200ms\uff09\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n\ninline int read()\n{\n    int x=0;\n    char ch;\n    while(!isdigit(ch=getchar()));\n    while(isdigit(ch))\n    {\n        x=(x<<3)+(x<<1)+ch-48;\n        ch=getchar();\n    }\n    return x;\n}\n\nint q,p;\nint koishi[233],maxdep;\nint satori[233],top=0;\nbool f[20233],have[20233];\n\nbool judge(int val)\n{\n    memset(f,0,sizeof(f));\n    \n    for(int i=1;i<=top;i++)\n        f[satori[i]]=1;\n    f[0]=1;\n\n    for(int i=1;i<=top;i++)\n        for(int j=(satori[i]<<1);j<=val;j++)\n            f[j]|=f[j-satori[i]];\n\n    return f[val];\n}\n\nbool iddfs(int dep,int pos)\n{\n    satori[++top]=koishi[pos];\n    bool ret=false;\n    \n    if(dep==maxdep)\n    {\n        ret=judge(q);\n        if(!ret)goto end;\n        else goto accept;\n    }\n    \n    for(int i=pos+1;i<=p;i++)\n        if(iddfs(dep+1,i))\n        {\n            ret=true;\n            goto accept;\n        }\n\n    end:;\n    top--;\n    \n    accept:;\n    return ret;\n}\n\nint main()\n{\n    q=read();\n    p=read();\n    \n    for(int i=1;i<=p;i++)\n    {\n        if((koishi[i]=read())>q || have[koishi[i]])\n            --p,--i;\n        have[koishi[i]]=1;\n    }\n    \n    //sort(koishi+1,koishi+p+1);\u8fd9\u53e5\u7384\u5b66\u7684\u4f18\u5316\u5728\u67d0\u4e9b\u70b9\u4e0a\u5feb\u4e9b\uff0c\u67d0\u4e9b\u6162\u4e9b...... \u7136\u800c\u6700\u540e\u4e00\u4e2a\u70b9\u4f1a\u53d8\u6162......\uff08\u6570\u636e\u6ca1\u8bf4\u8f93\u5165\u6709\u5e8f\uff09\n    \n    for(maxdep=1;maxdep<=p;maxdep++)\n        for(int j=1;j<=p;j++)\n            if(iddfs(1,j))\n                goto getans;\n        \n    getans:;\n    sort(satori+1,satori+top+1);\n    \n    printf(\"%d\",top);\n    for(int i=1;i<=top;i++)\n        printf(\" %d\",satori[i]);\n        \n    puts(\"\");\n    \n    return 0;\n}\n```",
        "postTime": 1490199359,
        "uid": 19293,
        "name": "zltttt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8bb2\u4e00\u4e2a\u6bd4\u8f83\u4e0b\u996d\u7684\u505a\u6cd5\uff1a\n\ndp \u4e00\u7ef4\u7684\u8f6c\u79fb\u6709\u70b9\u96be\u60f3\uff0c\u90a3\u4f55\u4e0d\u628a\u4ed6\u8868\u793a\u6210\u4e8c\u7ef4\uff1f\n\n\u7528 dp \u8bb0\u5f55\u5230\u6bcf\u4e2a\u6570\u5b57\u65f6\u6700\u5c0f\u7684\u6876\u7684\u6570\u91cf\n\n$dp[i][0]$ \u8868\u793a\u76ee\u524d\u5728\u7b2c $i$ \u4f4d\uff0c\u4e14\u6ca1\u6709\u53d6\u8fc7\uff0c$dp[i][1]$ \u8868\u793a\u5728\u7b2c $i$ \u4f4d\u4e14\u5df2\u7ecf\u53d6\u8fc7\u3002\n\n\u90a3\u4e48\u8f6c\u79fb\u663e\u7136\u53ea\u4f1a\u8ddf $dp[i][1]$ \u6302\u94a9 \uff1a\u5df2\u7ecf\u53d6\u8fc7\u5219\u4e0d\u7d2f\u52a0\u8d21\u732e\uff0c\u5426\u5219\u7d2f\u52a0\u3002\n\n$dp[i][1] = min(dp[i-num][1],dp[i-num][0]+1);$\n\n\u4e4b\u540e sort \u4e00\u904d\u6876\u987a\u5e8f\uff0c\u5f00\u59cb\u8dd1\u5b57\u5178\u5e8f\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u9009\u5b57\u5178\u5e8f\u4e0d\u80fd\u7528\u8d2a\u5fc3\u9009\u62e9\uff0c\u5fc5\u987b\u7528 dfs + \u526a\u679d\n\n\u56e0\u4e3a\u8111\u5b50\u8f6c\u4e0d\u52a8\uff0c\u6211\u9009\u62e9\u7528\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e00\u4f4d\u7684\u80fd\u53d6\u7684\u6700\u5c0f\u503c\u3002\n\ndp \u7684\u4f5c\u7528\u4e3a\u5224\u65ad\u5728\u53d6\u5b8c\u67d0\u4e00\u4e2a\u6570\u5b57\u540e\u662f\u5426\u53ef\u4ee5\u53d6\u5176\u4ed6\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int MAXN = 1e4+5;\nconst int MAXK = 1e5+5;\nint k,n,pos[MAXN],dp[MAXK][2],dp2[MAXK],cnt,keep[MAXK],ll;\ninline void update(int num, int v){\n  for (int i=num;i<=k;i++) dp[i][1] = min (dp[i][1],min(dp[i-num][1],dp[i-num][0]+1));\n  for (int i=0;i<=k;i++) dp[i][0] = min(dp[i][0],dp[i][1]),dp[i][1] = 1e9+5;\n}//dp \u64cd\u4f5c\ninline void dfs(int val, int kk, int po, int ini,int bound){\n  if (keep[ini]<val) return;\n  if (!kk) {keep[ini] = val;return;}\n  if (kk>=val) dfs(val,kk-val,po,ini,bound);\n  if (kk<val) return;\n  if (dp2[kk-val]==bound-1){\n    keep[ini] = val;\n    for (int i=po+1;i<=n;i++) dfs(pos[i],kk-val,i,ini+1,bound-1);\n  }\n}//dfs\u627e\u5b57\u5178\u5e8f\nsigned main(){\n  cin >> k >> n;\n  memset(dp,0x3f3f,sizeof(dp));\n  dp[0][0] = 0;\n  for (int i=1;i<=n;i++) {cin >> pos[i]; update(pos[i],i);}\n  for (int i=0;i<=k;i++) dp2[i] = min(dp[i][0],dp[i][1]);\n  cnt = dp2[k];\n  memset(keep,0x3f3f,sizeof(keep));\n  sort(pos+1,pos+1+n);\n  for (int i=1;i<=n;i++) {\n    dfs(pos[i],k,i,1,dp2[k]);\n    if (keep[1]<1e9) break;\n  }\n  for (int i=1;i<=dp2[k];i++) cout << keep[i] << \" \";\n}\n```",
        "postTime": 1597340419,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u672c\u9898\u7684 dp \u4f7f\u7528 bitset \u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u8003\u8651\u5230\u672c\u9898\u7684\u57fa\u672c\u6a21\u578b\u662f\u5b8c\u5168\u80cc\u5305\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 bitset \u5b58\u50a8\u72b6\u6001\uff0c\u8f6c\u79fb\u65f6\u76f4\u63a5\u901a\u8fc7\u5224\u65ad\uff1a\n\n```cpp\nfor (int i = 0; i < n; i++)\n\tfor (int j = w[i]; j <= m; j++) {\n\t\tbitset<100> tmp = s[j - w[i]];\n\t\ttmp.set(i);\n\t\tif (s[j] > tmp) s[j] = tmp;\n\t}\n```\n\n\u5176\u4e2d bitset \u7684\u5927\u4e8e\u53f7\u9700\u8981\u91cd\u8f7d\u4e3a\u6bd4\u8f83 bitset \u5b57\u5178\u5e8f\u7684\u5224\u65ad\u3002\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u6709\u4e24\u70b9\u4e0d\u8db3\uff1a\n\n1. \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6ca1\u6709\u6d88\u9664\u540e\u6548\u6027\u3002\n\n\u6211\u4eec\u628a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5199\u6210\u4e8c\u7ef4\u5f62\u5f0f\uff0c\u5219\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e0b\u9762\u8fd9\u6837\u7684\u65b9\u7a0b\uff1a\n\n`f[i][j] = min(f[i - 1][j], f[i][j - w[i]]`\uff0c\n\n\u800c\u4e0d\u662f\uff1a\n\n`f[i][j] = min(f[i - 1][j], f[i - 1][j - k * w[i]]`\uff08\u5176\u4e2d $k \\in \\mathbb{Z}$\uff09\u3002\n\n\u56e0\u4e3a\u524d\u9762\u7b2c\u4e00\u79cd\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1 `f[i][j - w[i]]` \u7684\u72b6\u6001\u6ca1\u6709\u4f7f\u7528\u8fc7\u7b2c $i$ \u4e2a\u74f6\u5b50\uff0c\u800c\u5982\u679c\u8be5\u72b6\u6001\u4f7f\u7528\u4e86\u7b2c $i$ \u4e2a\u74f6\u5b50\uff0c\u5219\u8be5\u72b6\u6001\u5411\u540e\u63a8\u65f6\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u76f8\u5f53\u4e8e\u5bf9\u8fb9\u6743\u4e3a $0, 1$ \u7684\u56fe\u4f7f\u7528\u666e\u901a\u961f\u5217\u8fdb\u884c bfs\uff08`f[i][j]` \u53ef\u80fd\u4ece `f[i][j - w[i]]` \u8f6c\u79fb\u8fc7\u6765\u65f6\u4ed8\u51fa\u4e86 1 \u70b9\u4ee3\u4ef7\uff0c\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\u4ed8\u51fa\u4ee3\u4ef7\uff09\uff0c\u800c\u8fd9\u6837\u662f\u4f1a\u51fa\u9519\u7684\uff08\u5bf9\u8fb9\u6743\u4e3a $0, 1$ \u7684\u56fe\u8fdb\u884c bfs \u5fc5\u987b\u91c7\u7528\u53cc\u7aef\u961f\u5217\uff0c\u800c\u4e14\u9700\u8981\u5bf9\u539f bfs \u7b97\u6cd5\u8fdb\u884c\u4fee\u6539\u3002\u91c7\u7528\u4f18\u5148\u961f\u5217\u8fd0\u884c Dijkstra \u4e5f\u53ef\u4ee5\uff0c\u4f46\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u7684\u65b9\u6cd5\u5728\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300bP117 \u6709\u5177\u4f53\u4ecb\u7ecd\uff09\n\n\u4e3a\u4e86\u907f\u514d\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u8fdb\u884c bfs \u5bfc\u81f4\u4ee3\u7801\u91cf\u589e\u52a0\uff0c\u6211\u4eec\u9700\u8981\u628a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6539\u4e3a\u540e\u8005\uff0c\u4fdd\u8bc1\u6211\u4eec\u7684\u52a8\u6001\u89c4\u5212\u76f8\u5f53\u4e8e\u5bf9\u8fb9\u6743\u4e3a $1$ \u7684\u56fe\u8fdb\u884c bfs\u3002\n\n2. \u91c7\u7528\u4e0b\u9762\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u540e\uff0c\u52a8\u6001\u89c4\u5212\u65f6\u95f4\u590d\u6742\u5ea6\u589e\u52a0\uff0c\u540c\u65f6\u5728\u4f7f\u7528 bitset \u65f6\u51fa\u73b0\u5927\u91cf\u590d\u5236\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u5f88\u6709\u53ef\u80fd\u8d85\u8fc7\u65f6\u95f4\u9650\u5236\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u4ee3\u7801\u4ece\u8fd9\u4e2a\u5f62\u5f0f\uff1a\n\n```cpp\nfor (int i = 0; i < n; i++)\n\tfor (int j = m; j >= w[i]; j--)\n\t\tfor (int k = w[i]; k <= j; k += w[i]) {\n\t\t\tbitset<100> tmp = s[j - k];\n\t\t\ttmp.set(i);\n\t\t\tif (s[j] > tmp) s[j] = tmp;\n\t\t}\n```\n\n\u4fee\u6539\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a\n\n```cpp\nfor (int i = 0; i < n; i++)\n\tfor (int j = m; j >= w[i]; j--)\n\t\tfor (int k = w[i]; k <= j; k += w[i])\n\t\t\tif (s[j - k].count() + 1 < s[j].count()) s[j] = s[j - k], s[j].set(i);\n\t\t\telse if(s[j - k].count() + 1 == s[j].count()) {\n\t\t\t\tbitset<100> tmp = s[j - k];\n\t\t\t\ttmp.set(i);\n\t\t\t\tif (s[j] > tmp) s[j] = tmp;\n\t\t\t}\n```\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\nint m, n;\nint w[100];\nbitset<100> s[20005];\nbool operator > (const bitset<100>& x, const bitset<100>& y) {\n\tif (x.count() != y.count()) return x.count() > y.count();\n\tfor (int i = 0; i < 100; i++) if(x.test(i) ^ y.test(i)) return y.test(i);\n\treturn false;\n}\nint main() {\n\tscanf(\"%d%d\", &m, &n);\n\tfor (int i = 1; i <= m; i++) s[i].set();\n\tfor (int i = 0; i < n; i++) scanf(\"%d\", &w[i]);\n\tsort(w, w + n);\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = m; j >= w[i]; j--)\n\t\t\tfor (int k = w[i]; k <= j; k += w[i])\n\t\t\t\tif (s[j - k].count() + 1 < s[j].count()) s[j] = s[j - k], s[j].set(i);\n\t\t\t\telse if(s[j - k].count() + 1 == s[j].count()) {\n\t\t\t\t\tbitset<100> tmp = s[j - k];\n\t\t\t\t\ttmp.set(i);\n\t\t\t\t\tif (s[j] > tmp) s[j] = tmp;\n\t\t\t\t}\n\tprintf(\"%ld\", s[m].count());\n\tfor (int i = 0; i < n; i++) if (s[m].test(i)) printf(\" %d\", w[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1584777179,
        "uid": 144740,
        "name": "\u9006\u6d41\u4e4b\u65f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u597d\u591a\u5927\u4f6c\u90fd\u7528\u4e86\u641c\u7d22\uff0c \u4f46\u662f\u849f\u84bb\u6000\u7591\u81ea\u5df1\u7684\u9a6c\u529b (\u4e00\u65c1\u795e\u4ed9: \u5176\u5b9e\u4f60\u5c31\u662f\u4e0d\u4f1a\u641c!!!) \n\n\u90a3\u6ca1\u529e\u6cd5\u4e86\uff0c \u786c\u7740\u5934\u76ae\u5199\u80cc\u5305\u5427\u3002 f\u5c31\u662f\u5e38\u89c4\u7684\u80cc\u5305\u6570\u7ec4\uff0c g\u8bb0\u5f55\u4e00\u4e0b\u65b9\u6848\n\n\u5176\u5b9e\u601d\u8def\u5f88\u663e\u7136\u5566 (\u4e00\u65c1\u795e\u4ed9: \u90a3\u4f60\u8fd8\u5e9f\u8bdd\u5565!!!)\n\n\u751f\u547d\u82e6\u77ed, \u76f4\u63a5\u4e0a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int N=110;\nconst int M=20010;\nint n, m, v[N], f[M];\n\nstruct prg\n{\n\tint a[N], cnt;\n\tprg() : cnt(0) {  }\n\tbool operator < (const prg &t) const // \u6309\u9898\u76ee\u8981\u6c42\u6bd4\u8f83f\u76f8\u540c\u65f6\u7684\u4e24\u4e2a\u65b9\u6848 \n\t{\n\t\tif(cnt!=t.cnt) return cnt<t.cnt;\n\t\tfor(int i=1; i<=cnt; i++)\n\t\tif(a[i]!=t.a[i]) return a[i]<t.a[i];\n\t\treturn 0;\n\t}\n\tfriend ostream & operator << (ostream &cout, prg t) // \u6211\u5c31\u662f\u559c\u6b22cout!!! \n\t{\n\t\tfor(int i=1; i<=t.cnt; i++) cout<<t.a[i]<<' ';\n\t\treturn cout;\n\t}\n\tvoid insert(int x)\n\t{\n\t\ta[++cnt]=x;\n\t\tsort(a+1, a+cnt+1); // \u5927\u91cf\u6709\u5e8f\u5c11\u91cf\u65e0\u5e8f\u65f6, sort\u8dd1\u4e0d\u591fnlogn\u7684 \n\t}\n}g[M];\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tmemset(f, 0x3f, sizeof(f));\n\tf[0]=0;\n\tcin>>m>>n;\n\tfor(int i=1; i<=n; i++) cin>>v[i];\n\t\n\tfor(int i=1; i<=n; i++)\n\tfor(int j=m; j>=v[i]; j--)\n\tfor(int k=1; k*v[i]<=j; k++) // \u4e2a\u4eba\u611f\u89c9for\u591a\u4e86\u7f29\u8fdb\u4e0d\u597d\u770b\n\t{\n\t\tif(f[j]>f[j-k*v[i]]+1) \n\t\t\tf[j]=f[j-k*v[i]]+1, g[j]=g[j-k*v[i]], g[j].insert(v[i]);\n\t\t\t\t\n\t\telse if(f[j]==f[j-k*v[i]]+1)\n\t\t{\n\t\t\tprg t=g[j-k*v[i]]; \n\t\t\tt.insert(v[i]);\n\t\t\tif(t<g[j]) g[j]=t;\n\t\t}\n\t} // \u8fd9\u91cc\u8be5\u662f\u4e0d\u7528\u8bf4\u4e86\u5427 (\u597d\u50cf\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u7528\u8bf4) \n\tcout<<f[m]<<' '<<g[m];\n\treturn ~~ (0 ^ 0);\n} \n                          \n```\n",
        "postTime": 1572917880,
        "uid": 130422,
        "name": "_\u849f\u84bb__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u672c\u9898\u7eafDP\u662f\u53ef\u4ee5\u8fc7\u6389\u7684\uff0c\u4f46\u662f\u63a8\u8350\u8fed\u4ee3\u52a0\u6df1\uff0c\u4e5f\u597d\u6269\u6269\u601d\u8def\u3002\n\n\u8981\u7528\u5230\u8fed\u4ee3\u52a0\u6df1\u641c\u7d22(DFSID)\u3002\u7531\u4e8e\u8981\u6c42\u8f93\u51fa\u7684\u662f\u4f7f\u7528\u6700\u5c11\u7684\u725b\u5976\u6876\uff0c\u6240\u4ee5\u8981\u5148\u627e\u725b\u5976\u6876\u6570\u91cf\u4e3a1 \u7684\u65f6\u5019\u6240\u6709\u7684\u7ec4\u5408\uff0c\u5982\u679c\u6ca1\u6709\u89e3\u518d\u627e\u725b\u5976\u6876\u6570\u91cf\u4e3a2...\u76f4\u5230\u725b\u5976\u6876\u6570\u91cf\u4e3aP\u3002\n\n\u5f53\u641c\u7d22\u5230\u4e00\u4e2a\u7ec4\u5408\uff0c\u5224\u65ad\u7528\u8fd9\u4e9b\u725b\u5976\u6876\u662f\u5426\u80fd\u7ec4\u6210\u76ee\u6807\u89e3\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\u6765\u505a\u3002\u8bbef[i]\u662f\u5f53\u9700\u6c42\u7684\u725b\u5976\u4e3ai \u65f6\uff0c\u80fd\u5426\u5f62\u6210\u8fd9\u4e2a\u7ec4\u5408\uff0c\u662f\u4e00\u4e2abool\u578b\u6570\u7ec4\u3002\u521d\u59cb\u6761\u4ef6f[0]=true\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0bf[i]=f[i] or f[ i-v[j] ] (j \u4e3a\u4f7f\u7528\u7684\u6240\u6709\u725b\u5976\u6876)\uff0c\u76ee\u6807\u72b6\u6001f[Q]\u3002\u5982\u679cf[Q]\u4e3atrue\uff0c\u5219\u5f53\u524d\u89e3\u5408\u6cd5\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u4f46\u662f\u5982\u679c\u4ec5\u4ec5\u8fd9\u6837\u5199\u8fd8\u662f\u6709\u4e00\u7ec4\u6570\u636e\u8fc7\u4e0d\u53bb\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u4f18\u5316\u3002\u8981\u4f18\u5316\u52a8\u6001\u89c4\u5212\u7684\u8fc7\u7a0b\u3002\u6ce8\u610f\u4e00\u4e2a\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u627e\u5230\u7684\u7ec4\u5408\u4e2d\uff0c\u6bcf\u4e2a\u725b\u5976\u6876\u81f3\u5c11\u7528\u4e86\u4e00\u6b21\u3002\u4e0a\u9762\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u6709\u8bb8\u591a\u67d0\u4e2a\u725b\u5976\u6876\u4f7f\u75280 \u6b21\u7684\u5197\u4f59\u72b6\u6001\u3002\u53ef\u4ee5\u5728\u521d\u59cb\u7684\u65f6\u5019\u5bf9(i=1..Q/v[\u7b2c\u4e00\u4e2a\u6876])f[ i\\*v[\u7b2c\u4e00\u4e2a\u6876] ]\u8d4b\u503c\u4e3atrue\u3002\u5bf9\u6bcf\u4e2a\u5176\u4ed6\u7684\u6876\u7684\u72b6\u6001\u53ef\u4ee5\u76f4\u63a5\u7531\u524d\u9762\u7684\u72b6\u6001\u5f97\u51fa\u3002\u7ecf\u8fc7\u8fd9\u4e2a\u4f18\u5316\uff0c\u6570\u636e\u5c31\u53ef\u4ee5\u5168\u8fc7\u4e86\u3002\n\n\u88f8DFSID+DP\uff08\u8bb0\u5fc6\u5316\u641c\u7d22\uff09\uff0c\u4e0b\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#define N 100\n#define INFI 30000\nint n, q, i, v[N + 1], ans[N + 1], cur[N + 1], tot = INFI;\nbool flag = false;\nvoid dfs(int depth, int rv, int bc)\n{\n    if (depth == i)\n    {\n        if (rv == 0)\n        {\n            memcpy(ans, cur, i << 2);\n            flag = true;\n        }\n        return;\n    }\n    if (bc > n || ans[depth] < v[bc]) return; \n    cur[depth] = v[bc];\n    for (int m = 1; m * v[bc] <= rv; ++m)\n        dfs(depth + 1, rv - m * v[bc], bc + 1);\n    if (bc < n) dfs(depth, rv, bc + 1);\n}\nint main()\n{\n    scanf(\"%d%d\", &q, &n);\n    for (i = 1; i <= n; ++i) scanf(\"%d\", v + i);\n    std::sort(v + 1, v + n + 1);\n    memset(ans, 127, sizeof ans);\n    for (i = 1; i <= n; ++i)\n    {\n        dfs(0, q, 1);\n        if (flag) break;\n    }\n    tot = i;\n    printf(\"%d \", tot);\n    for (i = 0; i < tot; ++i) printf(\"%d%c\", ans[i], i == tot - 1 ? '\\n' : ' ');\n    return 0;\n}\n```",
        "postTime": 1504276015,
        "uid": 39922,
        "name": "vinvor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709\u7eafdp\u7684\uff0c\u6211\u6765\u5199\u4e00\u53d1\u3002dp\u7684\u8bdd\uff0c\u5b9a\u4e49f[i][j]\u8868\u793a\u524di\u4e2a\u6876\u62fc\u51faj\u5355\u4f4d\u725b\u5976\u6240\u7528\u7684\u6700\u5c0f\u7684\u6876\u7684\u4e2a\u6570\u3002\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u65e0\u7a77\u80cc\u5305\u7684\u6a21\u578b\uff0c\u6bcf\u4e2a\u6876\u90fd\u53ef\u4ee5\u7528\u65e0\u9650\u6b21\uff0c\u6240\u4ee5\u6709f[i][j]=max(f[i-1][j],f[i-1][j-k\\*v[i]]+1);\u4f46\u662f\u56e0\u4e3a\u8fd8\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u4e0d\u80fd\u8c03\u6362\u5faa\u73af\u987a\u5e8f\u4f7f\u7528O(vn)\u7684\u505a\u6cd5\uff0c\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u4e5f\u7528\u4e0d\u7740\u6eda\u52a8\u6570\u7ec4\u4e86\u3002\u81f3\u4e8e\u8f93\u51fa\u65b9\u6848\uff0c\u6211\u7528\u4e86\u4e00\u4e2avector\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7684\u65b9\u6848\uff0c\u5728dp\u7684\u65f6\u5019\u987a\u4fbf\u66f4\u65b0\uff0c\u4f46\u662f\u56e0\u4e3a\u72b6\u6001\u603b\u6570\u6bd4\u8f83\u591a\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u72b6\u6001\u8bb0\u5f55\u65b9\u6848\u7a7a\u95f4\u592a\u5927\uff0c\u6240\u4ee5\u6211\u5bf9\u5b83\u7528\u4e86\u6eda\u52a8\u6570\u7ec4\u538b\u6389\u4e86\u7b2c\u4e00\u7ef4\uff0c\u5728\u9047\u5230\u76f8\u540c\u7b54\u6848\u662f\u6bd4\u8f83\u4e24\u79cd\u65b9\u6848\u7684\u5b57\u5178\u5e8f\uff0c\u66f4\u65b0\u65b9\u6848\u3002\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define maxn 110\n#define maxm 20020\nconst int INF=0x3f3f3f3f;\nint n,m,v[maxn];\nint f[maxn][maxm];\nvector<int> path[maxm];\nvoid update(int x,int y){\n    bool flag=true;\n    if(path[x].size()!=path[y].size())puts(\"error\");\n    for(int i=0;i<path[x].size();i++){\n    if(!flag)path[x][i]=path[y][i];\n    else if(path[x][i]==path[y][i])continue;\n    else if(path[x][i]<path[y][i])break;\n    else {flag=false;path[x][i]=path[y][i];}\n    }\n}\nint readin(){\n    int x=0,s=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')s=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*s;\n}\nint main(){\n    m=readin();n=readin();\n    for(int i=1;i<=n;i++){\n    v[i]=readin();\n    }\n    sort(v+1,v+n+1);\n    memset(f,INF,sizeof(f));\n    f[0][0]=0;\n    for(int i=1;i<=n;i++){\n    for(int j=m;j>=0;j--){\n        for(int k=0;k<=j/v[i];k++){\n        if(f[i][j]>f[i-1][j-k*v[i]]+(bool)k){\n            f[i][j]=f[i-1][j-k*v[i]]+(bool)k;\n            if(k){\n            path[j].clear();\n            path[j]=path[j-k*v[i]];\n            path[j].push_back(v[i]);\n            }\n        }\n        else if(f[i][j]==f[i-1][j-k*v[i]]+(bool)k){\n            if(k)path[j-k*v[i]].push_back(v[i]);\n            update(j,j-k*v[i]);\n            if(k)path[j-k*v[i]].pop_back();\n        }\n        }\n    }\n    }\n    //for(int i=1;i<=n;i++,puts(\"\"))for(int j=0;j<=m;j++)cout<<f[i][j]<<' ';\n    if(f[n][m]!=INF)printf(\"%d \",f[n][m]);\n    for(int i=0;i<path[m].size();i++)printf(\"%d \",path[m][i]);\n    return 0;\n}\n\u6bd5\u7adf\u662fdp\u8fd8\u662f\u6bd4iddfs\u5feb\u4e00\u70b9\u7684\u3002\n```",
        "postTime": 1503840618,
        "uid": 35465,
        "name": "Hunter_Will",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u697c\u4e0b\u8d70\u697c\u68af\u5927\u795e\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u601d\u8def\u5c31\u662fIDDFS\u6211\u4eec\u7528for\u5faa\u73af\u6765\u679a\u4e3e\u9009\u53d6\u6876\u5b50\u7684\u4e2a\u6570\uff0c\u7206\u641c\u51fa\u6bcf\u4e2a\u65b9\u6848\uff0c\u7136\u540e\u53bb\u9a8c\u8bc1\uff0c\u81f3\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u7c7b\u4f3c\u4e8e\u8bb0\u5fc6\u5316\u7684dfs\u548c\u65e0\u9650\u80cc\u5305\u6765\u7ef4\u62a4\uff0c\u8d70\u697c\u68af\u8bb2\u7684\u662f\u65e0\u9650\u80cc\u5305\u7684\u65b9\u6cd5\uff0c\u90a3\u6211\u8bb2\u8bb2\u6211\u7684dfs\u5427\uff0c\u5176\u5b9e\u601d\u8def\u548c\u65e0\u9650\u80cc\u5305\u4e00\u6837\uff0c\u641c\u6bcf\u4e2a\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n/*************************************************************************\n\n    > Author: Drinkwater-cnyali\n    > Created Time: 2017/5/11 19:46:03\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mem(a, b) memset((a), b, sizeof(a))\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\nint read()\n{\n    int sum = 0, fg = 1; char c = getchar();\n    while(c < '0' || c > '9') { if (c == '-') fg = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return sum * fg;\n}\nconst int maxn = 100000;\nconst int inf = 0x3f3f3f3f;\nint n,m;\nint a[maxn],flag,f;\nint pre[maxn],cnt,vis[maxn];\nint t[maxn];\nvoid f_a(int sum)\n{\n    if(f)return ;\n    if(sum)\n    {\n        if(n % sum == 0)\n        {f = 1;return ;}\n    }   \n    if(t[sum])return ;\n    t[sum] = 1;\n    if(sum > n)return ;\n    REP(i,1,cnt)f_a(sum+pre[i]);\n}\nvoid dfs(int l,int u)\n{\n    if(flag)return ;\n    if(u == l)\n    {\n        memset(t,0,sizeof(t));\n        f_a(0);\n        if(f)\n        {\n            flag = 1;\n            cout<<l<<\" \";\n            sort(pre+1,pre+1+cnt);\n            REP(i,1,cnt)cout<<pre[i]<<\" \";\n        }\n        return ;\n    }\n    if(u > l)return ;\n    REP(i,1,m)\n    {\n        if(!vis[i])\n        {\n            vis[i] = 1,pre[++cnt] = a[i];\n            dfs(l,u+1);\n            vis[i] = 0,cnt--;\n        }\n    }\n}\nint main()\n{\n    n = read(), m = read();\n    REP(i,1,m)a[i] = read();\n    REP(i,1,m)\n    {\n        memset(vis,0,sizeof(vis));\n        dfs(i,0);\n        if(flag)break;\n    }\n    return 0;\n}\n```",
        "postTime": 1494506619,
        "uid": 19645,
        "name": "Drinkwater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fed\u4ee3\u641c\u7d22+set+\u8bb0\u5fc6\u5316check\u5224\u5b9a\u662f\u5426\u53ef\u884c\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<cstring>\n#define rep(i,s,t) for(int i=s;i<=t;i++)\nusing namespace std;\nconst int N=200000;\nbool f[N],vis[N];\nset<int> s;\nint tong[N],limit,q,p;\nbool check(int x)\n{\n    if(x==0) return true;\n    if(vis[x]) return f[x];\n    \n    if(!vis[x])\n    {\n        vis[x]=true;\n        for(set<int>::iterator it=s.begin();it!=s.end();it++)\n        {\n            if(x-*it>=0)\n                if(check(x-*it))\n                    return f[x]=true;\n        }\n    }\n    return false;        \n}\nvoid dfs(int deep)\n{\n    if(deep==limit)\n    {\n        memset(f,false,sizeof f);\n        memset(vis,false,sizeof vis);\n        if(check(q))\n        {\n            printf(\"%d \",s.size());\n            for(set<int>::iterator it=s.begin();it!=s.end();++it)\n                printf(\"%d \",*it);\n            \n            exit(0);\n        }\n        return;\n    }\n    rep(i,1,p)\n    {\n        if(s.count(tong[i])) \n        continue;\n        \n        s.insert(tong[i]);\n        dfs(deep+1);\n        s.erase(tong[i]);\n    }\n}\n            \nint main()\n{\n    \n    scanf(\"%d%d\",&q,&p);\n    rep(i,1,p) scanf(\"%d\",tong+i);\n    sort(tong+1,tong+p+1);\n    for(int i=1;i<=p;i++)\n        s.clear(),limit=i,dfs(0);\n        \n    return 0;\n}\n    \n```",
        "postTime": 1479173399,
        "uid": 14205,
        "name": "ronwhite",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8dcc\u5e26\u52a0\u6df1+dp\u5224\u89e3\n\n\u4ece\u5c0f\u679a\u4e3edep,\u641c\u7d22\u5c42\u6570\u5927\u4e8e\u65f6return.\n\ndp(\u80cc\u5305\u5224\u65ad\u662f\u5426\u6210\u7acb\uff09\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#define maxn 105\nusing namespace std;\nint block[maxn],ans[maxn],top,n,m;\nbool b[20005],flag=0;\nint _read(int &data)\n{    data=0;\n    char t=getchar();\n    bool mark=0;\n    while(t<48||t>57){if(t==45)mark=1;t=getchar();}\n    while(48<=t&&t<=57){data=(data<<1)+(data<<3)+t-48;t=getchar();}\n    if(mark)data=-data;\n}\nbool dp(int x)//\u80cc\u5305\u5224\u65ad\u662f\u5426\u6210\u7acb\n{\n    int i,j;\n    memset(b,0,sizeof(b));\n    b[0]=1;\n    for(i=1;i<=x;i++)\n    for(j=ans[i];j<=m;j++)\n    if(b[j-ans[i]]) b[j]=1;\n    if(b[m]) return true;\n}\nvoid dfs(int c,int x)\n{\n    if(flag==1) return;\n    int i,j;\n    if(c==0)//\u5c42\u6570\u5927\u4e8e\u9650\u5b9a\u65f6\uff0creturn\n    {        if(dp(top)) \n        {            flag=1;\n            printf(\"%d \",top);\n            for(i=1;i<=top;i++) printf(\"%d \",ans[i]);\n        }\n    }\n    else if(x<=n)\n    {        ans[++top]=block[x];\n        dfs(c-1,x+1);\n        ans[top--]=0;\n        if(flag==0) dfs(c,x+1);\n    }\n}\nint main()\n{\n    int i,j;\n    _read(m);_read(n);\n    for(i=1;i<=n;i++) _read(block[i]);\n    sort(block+1,block+1+n);//\u8bf4\u4e86\u5b57\u5178\u5e8f\u6700\u5c0f\n    for(i=1;i<=n&&flag==0;i++)//\u6211\u7279\u5224\u4e86\u4e0b\uff0c\u662f\u4e0d\u662f\u50bb\uff1f\uff1f\uff1f\n    {        if(m%block[i]==0) \n        {            flag=1;\n            printf(\"1 %d\",block[i]);\n            return 0;\n        }\n    }\n    for(i=1;i<=n&&flag==0;i++)\n    {        dfs(i,1);//\u8fed\u4ee3\u5c42\u6570\u54af\u3002\u3002\u3002\u3002\n    }\n    return 0;\n}\n```",
        "postTime": 1479027197,
        "uid": 21162,
        "name": "SteinsGate0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u80cc\u5305\u52a8\u6001\u89c4\u5212\u4e0e\u641c\u7d22\u7ed3\u5408\u7684\u9898\u76ee\uff0c\u7531\u5c0f\u5230\u5927DFS\u641c\u53d6\u6876\u4e2a\u6570\uff0c\u80cc\u5305\u52a8\u6001\u89c4\u5212\uff08\u5b8c\u5168\u80cc\u5305\uff09\u6765\u5224\u65adK\u4e2a\u6876\u662f\u5426\n\n\u80fd\u80fd\u6d4b\u4f53\u79ef\u4e3aV\u7684\u725b\u5976\u3002\n\n\u76f8\u6bd4\u4e8e\u5176\u4ed6\u9898\u89e3\uff0c\u6211\u7684\u6ce8\u91ca\u8c8c\u4f3c\u66f4\u8be6\u5c3d\uff0c\u6211\u7684\u7a0b\u5e8f\u8c8c\u4f3c\u66f4\u6613\u61c2\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint a[101],use[101],v,n,k;\nvoid print()\n{\n  printf(\"%d \",k);\n  for (int i=1;i<=k;i++)\n    printf(\"%d \",a[use[i]]);\n  exit(0);//\u8f93\u5b8c\u60c5\u51b5\u76f4\u63a5\u8df3\u56de\u4e3b\u51fd\u6570 \n}\nvoid dp()//\u5b8c\u5168\u80cc\u5305\uff0c\u5224\u65ad\u53d6K\u4e2a\u6876\u65f6\u80fd\u5426\u53d6\u5230\u4f53\u79ef\u4e3aV\u7684\u60c5\u51b5\uff08\u8f6c\u5316\uff1aK\u4e2a\u6876\u5373\u4e3aK\u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u65e0\u9650\u4e2a\uff0c\u4f53\u79ef\u4e3a\u80cc\u5305\u5bb9\u79ef\uff0c\u539f\u6765\u7684\u6700\u5927\u4ef7\u503c\u7531\u4e8e\u4e0d\u7528\u7ba1\uff0c\u5b58\u662f\u5426\u53ef\u884c\u5c31\u884c\u4e86\uff09 \n{\n  int f[20010];\n  memset(f,0,sizeof(f));\n  f[0]=1;//f[i]\u6307\u4f53\u79ef\u4e3ai\u65f6\u662f\u5426\u80fd\u53d6\u5230\uff08\u7528bool\u7c7b\u578b\u7b49\u6548\uff09 \n  for (int i=1;i<=k;i++)\n    for (int j=1;j<=v/a[use[i]];j++)\n      f[j*a[use[i]]]=1;//\u5148\u521d\u59cb\u5316\uff0c\u8868\u660e\u80fd\u53d6\u5230\u4f53\u79ef\u4e3a\u4e00\u4e2a\u6876\u4f53\u79ef\u7684\u500d\u6570\u7684\u60c5\u51b5(==1) \n  for (int i=1;i<=k;i++)\n    for (int j=a[use[i]];j<=v;j++)//use[i]\u8bb0\u5f55\u53d6\u7b2ci\u4e2a\u6876\u65f6\u53d6\u5230\u6876\u7684\u7f16\u53f7(\u53ea\u5728\u53d6k\u4e2a\u6876\u7684\u60c5\u51b5\u5185\u6709\u6548\uff09 \n      f[j]=f[j]||f[j-a[use[i]]];//\u5982\u679c||\u4e24\u8fb9\u60c5\u51b5\u6709\u4e00\u79cd\u60c5\u51b5\u53d6\u5f97\u5230\uff08==1\uff09\u5c31\u80fd\u53d6\u5230\u4f53\u79ef\u4e3aj\u90a3\u79cd\u60c5\u51b5 \n    if (f[v]==1)//\u4e00\u53d6\u5230\u8981\u6c42\u7684\u4f53\u79ef\u5c31\u8f93\u51fa\uff08\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\uff09 \n      print();\n}\nvoid dfs(int dep)//\u679a\u4e3e\u53d6K\u4e2a\u6876\u65f6\u53d6\u54ea\u51e0\u4e2a\u6876 \n{\n  for (int i=use[dep-1]+1;i<=n-k+dep;i++)//\u4e0b\u4e00\u6b21\u9012\u5f52\u5c31\u662f\u4e0a\u6b21\u53d6\u5230\u7684\u6876\u7684\u4e0b\u4e00\u4e2a\u5f00\u59cb\uff0c\u591a\u53d6\u4e00\u4e2a\u6876\uff0c\n  //i\u7684\u6700\u5927\u8303\u56f4\u5b9e\u9645\u662f\u4e3a\u540e\u9762\u641c\uff08k-dep)\u4e2a\u6876\u7559\u6709\u8d77\u7801\u7684\u7a7a\u95f4\uff08\u540e\u9762\u6bcf\u4e2ai\u90fd\u53d6\u4e00\u4e2a\u6876\uff09 \n   {\n    use[dep]=i;\n    if (dep==k)//\u76f4\u5230\u53d6\u5230k\u4e2a\u6876\u4e3a\u6b62 \n      dp();\n    else\n      dfs(dep+1);\n   }\n} \nvoid fenzu()//\u679a\u4e3e\u53d6K\u4e2a\u6876\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u662f\u4ece\u5c0f\u5230\u5927\u641c\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u641c\u5230\u7684\u7b2c\u4e00\u4e2a\u60c5\u51b5\u4e3a\u53d6\u7684\u4e2a\u6570\u6700\u5c0f\u7684\u60c5\u51b5 \n{\n     for (k=1;k<=n;k++)\n     dfs(1);\n}\nint main()\n{\n  int i;\n  //freopen(\"milk.in\",\"r\",stdin);\n  //freopen(\"milk.out\",\"w\",stdout);\n  scanf(\"%d\",&v);\n  scanf(\"%d\",&n);\n  for (i=1;i<=n;i++)\n    scanf(\"%d\",&a[i]);\n  sort(a+1,a+n+1);\n  fenzu();\n  //fclose(stdin);\n  //fclose(stdout);\n  return 0;\n}\n```",
        "postTime": 1499603785,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2744 \u3010[USACO5.3]\u91cf\u53d6\u725b\u5976Milk Measuring\u3011"
    }
]