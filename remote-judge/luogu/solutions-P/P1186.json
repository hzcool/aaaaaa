[
    {
        "content": "\u6682\u65f6\u8fd0\u884c\u6548\u7387rank1\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u6ca1\u6709\u4fe1\u4ef0\uff0c\u4ee5\u4e3a$O(n^3)$\u8fc7\u4e0d\u4e861000\uff0c\u6240\u4ee5\u5199\u4e86\u4e2a$O(n^2 log_2n)$\u3002\n\n\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u9898\u662f\u4e00\u5f20\u7a20\u5bc6\u56fe\uff0c\u6240\u4ee5\u7528$O(n^2)$\u7684$dijkstra$\u5373\u53ef\uff0c\u6240\u8c13\u7684\u5806\u4f18\u5316\u5176\u5b9e\u662f\u52a3\u5316\u3002\u5173\u4e8eSPFA\uff0c\u867d\u7136\u8fd9\u91cc\u6ca1\u6709\u6b7b\uff0c\u4f46\u662f\u5df2\u7ecf\u6b7b\u4e86\u3002\n\n\u662f\u67d0\u9053[\u9898\u76ee](https://www.luogu.org/problemnew/show/P2685)\u7684\u7b80\u5316\u7248\uff1a\u505a\u6cd5\u4e00\u6837\u3002\n\n\u9996\u5148\u6211\u4eec\u8fdb\u884c\u4e00\u6b21dijkstra\uff0c\u5f97\u5230\u70b91\u5230\u70b9n\u7684\u6700\u77ed\u8def\u5f84\uff08\u5982\u679c\u6709\u591a\u6761\uff0c\u968f\u4fbf\u627e\u4e00\u6761\uff09\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u79fb\u9664\u7684\u4e0d\u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u8d21\u732e\u662f\u4e0d\u53d8\u7684\uff0c\u73b0\u5728\u8003\u8651\u5982\u679c\u79fb\u9664\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u53e6\u5916\u7684\u67d0\u4e00\u6761\u8def\u5f84\uff0c\u53ef\u4ee5\u53bbupdate\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u8fb9\n\n\u5982\u679c\u6700\u77ed\u8def\u5f84\u662fA->B->...->C->D\uff0c\u5b58\u5728\u4e00\u6761\u8def\u5f84A->B->E->C->D\uff0c\u90a3\u4e48\u5728B->...->C\u8fd9\u4e00\u6bb5\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5982\u679c\u53bb\u6389\uff0c\u8fd8\u6709\u90a3\u6761\u8def\u7ecf\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u65b0\u3002\n\n\u90a3\u4e48\u8f6c\u5316\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff1a\u533a\u95f4\u53d6min\uff0c\u6700\u540e\u6c42\u6240\u6709\u503c\u3002\n\n\u8fd9\u4e2a\u76f4\u63a5\u7ebf\u6bb5\u6811\u533a\u95f4\u53d6min\uff08\u6807\u8bb0\u6c38\u4e45\u5316\uff09\uff0c\u6700\u540edfs\u4e00\u904d\u5f97\u5230\u6240\u6709\u8def\u5f84\u4e0a\u5220\u6389\u4e4b\u540e\u7684max\uff08\u8fd8\u53ef\u4ee5\u6392\u5e8f\u4e4b\u540e\u5e76\u67e5\u96c6\u7ef4\u62a4\uff09\n\n\u6ce8\u610f\u8fd9\u91cc\u7684\u6211\u4eec\u7ef4\u62a4\u7684\u5bf9\u4e8e1~n\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u6bcf\u6761\u8fb9\uff0c\u5220\u6389\u5b83\u4e4b\u540e\u76841\u5230n\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u6765\u53e3\u80e1\u4e00\u4e0b\u8bc1\u660e\uff0c\u663e\u7136\u5982\u679c\u4e00\u6761\u8fb9\u8de8\u8d8a\u663e\u7136\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u8fd9\u6761\u8fb9\u4e00\u5b9a\u53ef\u4ee5\u6b63\u786e\u5730\u66f4\u65b0\u7b54\u6848\u3002\n\n\u5982\u679c\u6709\u8d85\u8fc7\u4e00\u6761\u8fb9\u8de8\u8d8a\uff0c\u8fd9\u6761\u94fe\u4e0e1\u5230n\u6700\u77ed\u8def\u5f84\u7684\u76f8\u8fde\u7684\u70b9\u4e00\u5b9a\u662f\u76f4\u63a5\u8d70\u6700\u77ed\u8def\u5f84\u6700\u4f18\uff08\u4e0d\u4f1a\u52a3\uff09\uff0c\u90a3\u4e48\u4e2d\u95f4\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u4e00\u5b9a\u6709\u8def\u5f841->\u8fd9\u6761\u8def\u5f84->n\uff0c\u663e\u7136\u4e0d\u91cd\u590d\u3002\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf = 0x3f3f3f3f;\ntypedef long long ll;\n#define gc getchar\n#define Rep(i,a,b) for(register int i=(a);i<=int(b);++i)\n#define Dep(i,a,b) for(register int i=(a);i>=int(b);--i)\n#define rep(i,a,b) for(register int i=(a);i<int(b);++i)\ninline ll read(){\n    register ll x=0,f=1;register char c=gc();\n    for(;!isdigit(c);c=gc())if(c=='-')f=-1;\n    for(;isdigit(c);c=gc())x=(x<<1)+(x<<3)+(c^48);\n    return x*f;\n}\n#define pc putchar\nvoid write(ll x){if(x<0)x=-x,pc('-');if(x>=10)write(x/10);putchar(x%10+'0');}\nvoid writeln(ll x){write(x);puts(\"\");}\nconst int maxn = 1005;\nbool vis[maxn];\nint d1[maxn],dn[maxn],pre[maxn];\nint n,m;\nint a[maxn][maxn];\nvoid dijkstra(int S,int dist[]){\n    Rep(i,1,n) vis[i] = false;\n    Rep(i,1,n) dist[i] = inf; \n    dist[S] = 0;pre[S]=0;\n    Rep(i,1,n){\n        int k = -1;\n        Rep(j,1,n){\n            if(vis[j]) continue;\n            if(k == -1 || dist[k] > dist[j]) k = j;\n        }\n        vis[k] = true;\n        Rep(j,1,n){\n            if(vis[j]) continue;\n            if(dist[j] > dist[k] + a[k][j]){\n                dist[j] = dist[k] + a[k][j];\n                pre[j] = k;\n            }\n        }\n    }\n}\nvector<int> edge[maxn];\nint fa[maxn];\nint mx,pos[maxn];\ninline int find(int x){return fa[x] == x ? x : fa[x] = find(fa[x]);}\n#define lson (o<<1)\n#define rson ((o<<1|1))\nint tag[maxn<<2];\nvoid modify(int o,int l,int r,int x,int y,int v){\n    if(l==x&&r==y){tag[o] = min(tag[o],v);return ;}\n    int mid = (l + r) >> 1;\n    if(y<=mid) modify(lson,l,mid,x,y,v); else\n    if(mid+1<=x)modify(rson,mid+1,r,x,y,v); else{\n        modify(lson,l,mid,x,mid,v);\n        modify(rson,mid+1,r,mid+1,y,v);\n    }\n}\nvoid build(int o,int l,int r){\n    tag[o]=inf;\n    if(l==r)return;\n    int mid = (l+r)>>1;\n    build(lson,l,mid);build(rson,mid+1,r);\n}\nint query(int o,int l,int r,int x){\n    if(l==r) return tag[o];\n    int mid = (l+r)>>1;\n    if(x<=mid) return min(query(lson,l,mid,x),tag[o]); else\n               return min(query(rson,mid+1,r,x),tag[o]);\n}\nint main(){\n    n = read(),m = read();\n    Rep(i,1,n)Rep(j,1,n) a[i][j] = inf;\n    Rep(i,1,m){\n        int x = read(),y = read(),v = read();\n        a[x][y] = a[y][x] = v;\n    }\n    dijkstra(n,dn);\n    dijkstra(1,d1);\n    Rep(i,1,n) fa[i] = pre[i];\n    mx = 0;\n    for(int i=n;i;i=pre[i]){\n        pos[i] = ++mx;\n        fa[i] = i;\n        if(pre[i])\n            a[i][pre[i]] = a[pre[i]][i] = inf;\n    }\n    build(1,1,n);\n    Rep(i,1,n){\n        Rep(j,1,n){\n            if(i==j) continue;\n            if(a[i][j] != inf){\n                int w = min(dn[i] + d1[j] + a[i][j],dn[j]+d1[i]+a[i][j]);\n                int x = pos[find(i)],y = pos[find(j)];\n                if(x>y)swap(x,y);\n                if(x==y) continue;\n                modify(1,1,mx,x+1,y,w);\n            }\n        }\n    }\n    int ans = d1[n];\n    Rep(i,2,n) ans = max(ans,query(1,1,mx,i));\n    writeln(ans);\n}\n\n```",
        "postTime": 1532168150,
        "uid": 21182,
        "name": "wzporz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1186 \u3010\u739b\u4e3d\u5361\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n> \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\u3002\u73b0\u5728\u9700\u8981\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u6700\u5927\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u957f\u5ea6\u3002  \n> $1\\le n\\le 10^3;1\\le m\\le \\frac{n(n-1)}{2}$\u3002\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\u3001\u91cd\u8fb9\u3002\n\n## \u9898\u89e3\n\n\u5927\u591a\u6570\u9519\u8bef\u7684\u505a\u6cd5\u662f\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5e76\u5220\u9664\uff0c\u7136\u540e\u91cd\u65b0\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u5982\u679c\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\uff08\u52a3\u5316\uff09\u7684 $\\text{Dijkstra}$\uff0c\u8fd9\u4e48\u505a\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(nm\\log m)$\uff1b\u54ea\u6015\u4f7f\u7528\u4e86\u6734\u7d20\u7684 $\\text{Dijkstra}$\uff0c\u590d\u6742\u5ea6\u4e5f\u662f $\\mathcal O(mn^2)$\uff0c\u65e0\u6cd5\u901a\u8fc7\u5728\u795e $\\text{\\color{red}\\textcolor{black}Imakf}$ \u6dfb\u52a0\u7684\u4e09\u4e2a $\\text{Hack}$ \u6570\u636e\u3002\n\n\u4f46\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u6211\u4eec\u4e0d\u5927\u80fd\u5feb\u901f\u6c42\u51fa\u5220\u9664\u4e86\u4e00\u6761\u8fb9\u540e\u7684 $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u5728\u5f3a\u884c\u8ba9\u4e00\u6761\u8fb9\u88ab\u8d70\uff0c\u53ef\u4ee5\u8ba9\u54ea\u4e9b\u539f\u5148\u6700\u77ed\u8def\u4e0a\u7684\u8fb9**\u4e0d\u9700\u8981**\u88ab\u8d70\u3002\u5f53\u6211\u4eec\u5220\u9664\u4e86\u539f\u5148\u6700\u77ed\u8def\u4e0a\u7684\u67d0\u6761\u8fb9 $e$ \u540e\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e9b\u66ff\u4ee3\u8def\u5f84\uff0c\u8fd9\u4e48\u505a\u672c\u8d28\u4e0a\u5c31\u662f\u679a\u4e3e\u4e86\u66ff\u4ee3\u8def\u5f84\u4e0a\u9762\u7684\u8fb9\uff0c\u6c42\u51fa\u5220\u6389 $e$ \u540e\u4f1a\u4ea7\u751f\u7684\u6700\u77ed\u8def\u3002\u66ff\u4ee3\u8def\u5f84\u7684\u957f\u5ea6\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u662f\u5220\u9664 $e$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u4e0b\u6587\u4e2d\uff0c\u8bbe $\\mathcal{E}$ \u4e3a\u539f\u5148\u7684\u6700\u77ed\u8def\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c$\\mathcal{E}$ \u4e0a\u539f\u6765\u5fc5\u987b\u8981\u8d70\uff0c\u540e\u6765\u4e0d\u9700\u8981\u88ab\u8d70\u7684\u8fb9\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6761\u8def\u5f84\u3002\u4f7f\u7528\u53cd\u8bc1\u6cd5\u3002\u6211\u4eec\u786c\u70b9\u4e86\u4e00\u6761\u8def\u5f84 $s\\to t$\u3002\u8003\u8651 $\\mathcal{E}$ \u4e0a\u8def\u5f84 $a\\to b\\to c\\to d$\uff0c\u5176\u4e2d $a\\to b,c\\to d$ \u8fd9\u4e24\u6bb5\u90fd\u662f\u786c\u70b9\u524d\u5fc5\u987b\u8981\u8d70\uff0c\u786c\u70b9\u540e\u4e0d\u9700\u8981\u88ab\u8d70\u7684\u8def\u5f84\uff08\u4f46\u662f $a,d$ \u8fd9\u4e24\u4e2a\u70b9\u662f\u4e00\u76f4\u8981\u88ab\u7ecf\u8fc7\u7684\uff09\uff0c\u800c $b\\to c$ \u5219\u662f\u4e00\u76f4\u8981\u8d70\u7684\u8def\u5f84\u3002\u5982\u679c $a\\to b$ \u540e\u6765\u4e0d\u9700\u8981\u8d70\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u8d70\u6cd5\u7ed5\u8fc7\u4e86 $a\\to b$\uff1a\u4ece $1$ \u8d70\u5230\u4e86 $s\\to t$\uff0c\u518d\u7ecf\u8fc7\u4e86\u4e00\u4e9b\u8fb9\u5230\u4e86 $b$\uff08\u5fc5\u987b\u4f1a\u5230\u8fbe $b$\uff0c\u4e0d\u7136\u65e0\u6cd5\u4fdd\u8bc1 $b\\to c$ \u662f\u5fc5\u987b\u8d70\u7684\u8fb9\uff1b\u540c\u65f6\u5728 $b$ \u4e4b\u524d\u5fc5\u7136\u4f1a\u7ecf\u8fc7 $s\\to t$\uff0c\u5426\u5219\u5c31\u4e0e $a\\to b$ \u539f\u6765\u5fc5\u987b\u8981\u8d70\u7684\u5047\u8bbe\u77db\u76fe\u4e86\uff09\uff1b\u540c\u7406\uff0c\u5b58\u5728\u8d70\u6cd5\u4ece $c$ \u8d70\u5230 $s\\to t$ \u518d\u5230\u7ec8\u70b9 $n$\u3002\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b58\u5728\u4e00\u79cd\u66f4\u77ed\u7684\u65b9\u6848\u4e0d\u7ecf\u8fc7 $b\\to c$\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\u56e0\u6b64\u8fd9\u4e9b\u88ab\u6401\u7f6e\u7684\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u8def\u5f84\u3002\n\n\u4e0b\u9762\u8003\u8651\u600e\u4e48\u6c42\u51fa\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u3002\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u662f\uff0c\u5206\u522b\u4ee5 $1$ \u548c $n$ \u4f5c\u4e3a\u8d77\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5206\u522b\u6c42\u51fa\u5728\u8fd9\u4e24\u6b21\u5355\u6e90\u6700\u77ed\u8def\u8fc7\u7a0b\u4e2d\uff0c\u5230\u8fbe\u5b83\u6240\u7ecf\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u539f\u5148\u5728 $\\mathcal{E}$ \u4e0a\u7684\u70b9\uff08\u4e0d\u59a8\u5206\u522b\u8bb0\u4e3a $A_i,B_i$\uff09\u3002\u5f53\u6211\u4eec\u679a\u4e3e\u66ff\u4ee3\u8def\u5f84\u4e0a\u7684\u8fb9 $u\\to v$ \u65f6\uff0c\u6211\u4eec\u65ad\u8a00 $\\mathcal{E}$ \u4e0a\u7684 $A_u,B_v$ \u4e2d\u95f4\u7684\u8fb9\u662f\u4f1a\u88ab\u6401\u7f6e\u7684\u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u6b63\u786e\u7684\u5462\uff1f\u9996\u5148\uff0c\u786c\u70b9\u540e $1\\to A_u\\to u\\to v\\to B_v\\to n$ \u80af\u5b9a\u662f\u73b0\u5728\u7684\u6700\u77ed\u8def\u3002\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u90e8\u5206 $\\mathcal{E}$ \u4e0a $A_u,B_v$ \u7684\u8def\u5f84\uff0c\u80af\u5b9a\u662f\u4e0d\u4f18\u7684\u3002\u4f46\u53ef\u80fd\u6709\u4e9b\u4e0d\u5fc5\u8981\u88ab\u8d70\u7684\u8fb9\u4e0d\u5728 $\\mathcal{E}$ \u4e0a $A_u,B_v$ \u4e4b\u95f4\u7684\u8fb9\u91cc\u3002\u8fd9\u6837\u662f\u4e0d\u4f1a\u5f71\u54cd\u5230\u7b54\u6848\u7684\u6b63\u786e\u6027\u7684\uff1a\u5047\u8bbe\u6709\u4e00\u6761\u4e0d\u5728\u5176\u4e2d\u7684\u8fb9 $e$ \u6210\u4e86\u6f0f\u7f51\u4e4b\u9c7c\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u6709\u4e00\u6761\u8def\u5f84\u6a2a\u8de8 $e$ \u7684\u4e24\u4fa7\uff1b\u540e\u6765\u6211\u4eec\u80af\u5b9a\u4f1a\u679a\u4e3e\u5230\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u7136\u540e\u91cd\u65b0\u628a $e$ \u7ed9\u6807\u8bb0\u4e86\u3002\n\n\u6574\u7406\u4e00\u4e0b\u6211\u4eec\u8981\u505a\u7684\u4e8b\u60c5\uff1a\n\n- \u6c42\u51fa\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def $\\mathcal{E}$\u3002  \n- \u5206\u522b\u6c42\u51fa $1$ \u548c $n$ \u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u6700\u540e\u7684 $\\mathcal{E}$ \u4e0a\u7684\u70b9\u7684\u6807\u53f7\u3002  \n- \u679a\u4e3e\u6bcf\u6761\u8fb9\u5e76\u786c\u70b9\u5b83\u5fc5\u7136\u88ab\u9009\u3002\u6c42\u51fa\u65b0\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u66f4\u65b0\u5728\u6700\u77ed\u8def\u8def\u5f84\u4e0a $A_u,B_v$ \u4e24\u70b9\u95f4\u6240\u6709\u7684\u8fb9\u7684\u6743\u503c\u3002  \n- \u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u6240\u6709\u8fb9\uff0c\u53d6\u6240\u6709\u6743\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u5173\u4e8e\u7b2c\u4e8c\u6b65\uff0c\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\u56e0\u4e3a\u8dd1\u5b8c\u5355\u6e90\u6700\u77ed\u8def\u540e\u672c\u8d28\u4e0a\u5f62\u6210\u4e86\u4e00\u68f5\u7c7b\u4f3c\u4e8e\u6811\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u524d\u9a71\u8282\u70b9\u3002\u6211\u4eec\u628a $\\mathcal{E}$ \u4e0a\u7684\u8282\u70b9\u7684\u524d\u9a71\u8d4b\u503c\u4e3a\u5b83\u672c\u8eab\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u62c6\u6210\u4e86\u4e00\u5806\u6811\uff0c\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\u90fd\u662f $\\mathcal{E}$ \u4e0a\u7684\u8282\u70b9\u3002\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff0c\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u4e00\u4e2a\u8282\u70b9\u6240\u5904\u5b50\u6811\u7684\u6839\u8282\u70b9\u662f\u4ec0\u4e48\uff08\u4e5f\u5c31\u662f\u5230\u8fbe\u5b83\u7684\u6700\u77ed\u8def\u4e0a\u6700\u540e\u7684 $\\mathcal{E}$ \u4e0a\u7684\u70b9\u7684\u6807\u53f7\uff09\u3002\n\n\u5173\u4e8e\u7b2c $3,4$ \u6b65\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u9996\u5148\u628a\u6574\u4e2a\u6700\u77ed\u8def\u6309\u7167\u987a\u5e8f\u6620\u5c04\u6210 $1,2,\\cdots$ \u90a3\u4e48\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u5c31\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e32\u8fde\u7eed\u7684\u6570\u5b57\u3002\u6211\u4eec\u8981\u505a\u7684\u662f\u533a\u95f4\u8d4b\u503c\u3001\u5355\u70b9\u67e5\u8be2\u5386\u53f2\u6700\u5c0f\u503c\u3002\u8003\u8651\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u65b9\u6cd5\uff1a\u6bcf\u4e2a\u7ebf\u6bb5\u5bf9\u5e94\u7684\u8282\u70b9\u5b58\u50a8\u4e00\u4e2a $\\text{tag}$\uff0c\u5f53\u8fdb\u884c\u533a\u95f4\u8d4b\u503c\u65f6\uff0c\u82e5\u8be5\u7ebf\u6bb5\u88ab\u5b8c\u5168\u8986\u76d6\uff0c\u5219\u5c06 $\\text{tag}$ \u66f4\u65b0\u4e3a\u6743\u503c\u548c $\\text{tag}$ \u503c\u7684\u6700\u5c0f\u503c\uff1b\u82e5\u6ca1\u5b8c\u5168\u8986\u76d6\uff0c\u5219\u9012\u5f52\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u67e5\u8be2\u65f6\uff0c\u7edf\u8ba1\u67e5\u8be2\u7684\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684 $\\text{tag}$ \u7684**\u6700\u5c0f\u503c**\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u79cd\u505a\u6cd5\u7684\u6b63\u786e\u6027\u3002\n\n\u867d\u7136\u8bc1\u660e\u5185\u5bb9\u5199\u8d77\u6765\u86ee\u591a\u7684\uff0c\u4e5f\u4e0d\u5927\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u4ee3\u7801\u8fd8\u7b97\u597d\u5199\u2026\u2026\u603b\u590d\u6742\u5ea6 $\\mathcal O(n^2\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7 $\\text{\\color{red}\\textcolor{black}Imakf}$ \u7684\u4e09\u4e2a $\\text{Hack}$ \u6570\u636e\u548c\u539f\u6765\u7684\u6570\u636e\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define up(l,r,i) for(int i=l,END##i=r;i<=END##i;++i)\n#define dn(r,l,i) for(int i=r,END##i=l;i>=END##i;--i)\nusing namespace std;\ntypedef long long i64;\nconst int INF =1e9;\nconst int MAXN=1e3+3;\nnamespace Seg{\n    const int SIZ=MAXN*4; int T[SIZ];\n    #define lc(t) (t<<1)\n    #define rc(t) (t<<1|1)\n    void bld(int t,int a,int b){\n        T[t]=INF; if(a==b) return; int c=a+b>>1;\n        bld(lc(t),a,c),bld(rc(t),c+1,b);\n    }\n    void sst(int t,int a,int b,int l,int r,int w){\n        if(l<=a&&b<=r) T[t]=min(T[t],w); else {\n            int c=a+b>>1;\n            if(l<=c) sst(lc(t),a,c  ,l,r,w);\n            if(r> c) sst(rc(t),c+1,b,l,r,w);\n        }\n    }\n    int  qry(int t,int a,int b,int p){\n        if(a==b) return T[t]; int c=a+b>>1;\n        if(p<=c) return min(T[t],qry(lc(t),a,c  ,p));\n        else     return min(T[t],qry(rc(t),c+1,b,p));\n    }\n}\nnamespace Slv{\n    int n,m,o,ans; bool U[MAXN][MAXN];\n    int A[MAXN],B[MAXN],W[MAXN][MAXN]; bool V[MAXN];\n    int P[MAXN],Q[MAXN],I[MAXN];\n    int qread(){\n        int w=1,c,ret;\n        while((c=getchar())> '9'||c< '0') w=(c=='-'?-1:1); ret=c-'0';\n        while((c=getchar())>='0'&&c<='9') ret=ret*10+c-'0';\n        return ret*w;\n    }\n    void dij(int s,int t,int *D,int *E){\n        up(1,n,i) D[i]=INF,V[i]=false; D[s]=0; up(1,n,i){\n            int f=0;\n            up(1,n,j) if((!f||D[j]<D[f])&&!V[j]) f=j; V[f]=true;\n            up(1,n,j) if(!V[j]&&D[f]+W[f][j]<D[j]) D[j]=D[f]+W[f][j],E[j]=f;\n        }\n        if(!o){\n            for(int p=t;p;p=E[p]) I[p] =--o; o=-o;\n            for(int p=t,q=t;p;q=p,p=E[p]) I[p]+=o+1,U[p][q]=true;\n        }\n        up(1,n,i) if(I[i]) E[i]=i;\n    }\n    int gtf(int x,int *F){return x==F[x]?x:F[x]=gtf(F[x],F);}\n    void slv(){\n        n=qread(),m=qread();\n        up(1,n,i) up(1,n,j) W[i][j]=INF;\n        up(1,m,i){\n            int u=qread(),v=qread(),w=qread();\n            if(w<W[u][v])   W[u][v]=W[v][u]=w;\n        }\n        dij(1,n,A,P),dij(n,1,B,Q),Seg::bld(1,1,o);\n        up(1,n,i) up(1,n,j) if(!U[i][j]&&!U[j][i]){\n            int w=A[i]+W[i][j]+B[j],s=I[gtf(i,P)],t=I[gtf(j,Q)];\n            if(s<t) Seg::sst(1,1,o,s,t-1,w);\n        }\n        up(1,o-1,i) ans=max(ans,Seg::qry(1,1,o,i));\n        printf(\"%d\\n\",ans);\n    }\n}\nint main(){\n    Slv::slv(); return 0;\n}\n```",
        "postTime": 1630913954,
        "uid": 330759,
        "name": "\u56e7\u4ed9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1186 \u3010\u739b\u4e3d\u5361\u3011"
    },
    {
        "content": "- ## \u9898\u76ee\u5927\u610f\uff1a\n\t\u6c42\u51fa\u5207\u4efb\u610f\u4e00\u6761\u8fb9\u540e\u7684 1->n \u7684\u6700\u77ed\u8def\u7684\u6700\u5927\u503c ~~\uff08\u6709\u70b9\u7ed5\uff09~~\n- ### \u601d\u8def\uff1a\n\t\u5176\u5b9e\u4e0d\u9700\u8981\u5272\u6389\u6240\u6709\u8fb9\uff0c\u53ea\u9700\u8981\u5272\u6389 **\u6700\u77ed\u8def\u5f84** \u4e0a\u7684\u8fb9\n\t#### \u4e3e\u4e2a\u6817\u5b50\uff1a\n    ![](https://cdn.luogu.com.cn/upload/pic/72932.png)\n    \u56fe\u4e2d\u7eff\u8272\u7ebf\u8def\u4e3a\u5f53\u524d\u4e0d\u5220\u8fb9\u60c5\u51b5\u7684\u6700\u77ed\u8def\n    \n    \u5982\u679c\u5220\u53bb\u975e\u7eff\u8272\u7ebf\u8def\u7684\u8fb9\uff0c\u4ece 1->n \u7684\u6700\u77ed\u8def\u4ecd\u7136\u4e3a\u7eff\u8272\u7ebf\u8def\uff0c\u4e3a9\n    \n    \u82e5\u5220\u53bb\u7eff\u8272\u7ebf\u8def\u7684\u8fb9\uff0c\u5219\u6700\u77ed\u8def\u7ebf\u4e00\u5b9a\u4f1a\u53d1\u751f\u6539\u53d8\n    \n    \u6240\u4ee5\u53ea\u9700\u8981\u5220\u53bb\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u5373\u53ef\n- ### \u6d41\u7a0b\n\t1. \u9996\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8bb0\u5f55\u524d\u9a71\uff0c\u627e\u5230\u6700\u77ed\u8def\u5f84\n   2. \u6807\u8bb0\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u4e0d\u7ecf\u8fc7\u6b64\u8fb9\u627e\u6700\u77ed\u8def\u5f84\n   3. \u5bf9\u6bcf\u4e00\u6b21\u5220\u8fb9\u540e\u7684\u6700\u77ed\u8def\u627e\u4e00\u4e2a\u6700\u5927\u503c\n- ### code\n\t```cpp\n      #include<map>\n      #include<list>\n      #include<queue>\n      #include<cstdio>\n      #include<cstring>\n      #include<iostream>\n      #include<algorithm>\n      using namespace std;\n      const int inf=0x3f3f3f3f;\n      const int M=(1e6)+10;\n\n      int n,m;\n      int k=0,ans;\n      int head[M];\n      int dis[M],pre[M];\n      bool book;\n      bool vis[M];\n      bool vi[1010][1010];\n\n      struct node{\n          int to,next;\n          int val;\n      }edge[M<<1];\n\n      void adde(int u,int v,int w){\n          edge[++k].to=v;\n          edge[k].val=w;\n          edge[k].next=head[u];\n          head[u]=k;\n      }\n\n      void spfa(){\n          queue<int> q;\n          for(int i=1;i<=n;i++) dis[i]=inf;\n          q.push(1);\n          vis[1]=true;\n          dis[1]=0;\n          while(!q.empty()){\n              int u=q.front();q.pop();\n              vis[u]=false;\n              for(int i=head[u];i!=-1;i=edge[i].next){\n                  int v=edge[i].to;\n                  if(vi[u][v]) continue ;//\u6b64\u8fb9\u82e5\u4e3a\u8981\u5220\u7684\u8fb9\uff0c\u5219\u4e0d\u8d70 \n                  if(dis[v]>dis[u]+edge[i].val){\n                      dis[v]=dis[u]+edge[i].val;\n                      if(!book) pre[v]=u;//\u7b2c\u4e00\u904dspfa\u8bb0\u5f55\u524d\u9a71 \n                      if(!vis[v]){\n                          q.push(v);\n                          vis[v]=true;\n                      }\n                  }\n              }\n          }\n          ans=max(ans,dis[n]);\n      }\n\n      int main(){\n          memset(head,-1,sizeof(head));\n          scanf(\"%d%d\",&n,&m);\n          for(int i=1,u,v,w;i<=m;i++){\n              scanf(\"%d%d%d\",&u,&v,&w);\n              adde(u,v,w);\n              adde(v,u,w);\n          }\n          spfa();\n          book=true;\n          for(int i=n;i;i=pre[i]){\n              if(i==1) break;\n              vi[i][pre[i]]=vi[pre[i]][i]=true;//\u6807\u8bb0\u5220\u8fc7\u7684\u8fb9 \n              spfa();\n              vi[i][pre[i]]=vi[pre[i]][i]=false;//\u89e3\u9664\u6807\u8bb0 \n          }\n          printf(\"%d\\n\",ans);\n          return 0;\n      }\n   ```\n",
        "postTime": 1566044653,
        "uid": 111851,
        "name": "\u745e\u6e90\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1186 \u3010\u739b\u4e3d\u5361\u3011"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u66f4\u65b0\u4e8e[\u535a\u5ba2\u56ed](https://www.cnblogs.com/Gingerhe/p/15876978.html)\n# \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5220\u9664\u4e00\u6761\u8fb9\u540e\uff0c\u6700\u77ed\u8def\u7684\u6700\u5927\u503c\u3002\n# \u9898\u89e3\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u5220\u9664\u7684\u8fb9\u4e0d\u5728\u539f\u56fe\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u5bf9\u7ed3\u679c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8981\u5148\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c\u7528 $pre$ \u6570\u7ec4\u8bb0\u5f55\u4e0b\u539f\u56fe\u6700\u77ed\u8def\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u3002\u63a5\u7740\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u5c06\u6bcf\u4e00\u6761\u8fb9\u5220\u9664\u540e\u7684\u6700\u77ed\u8def\uff0c\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\u7136\u540e\u6211\u4eec\u5f00\u5f00\u5fc3\u5fc3\u7684\u4ea4\u4e0a\u53bb\uff0c\u53d1\u73b0 [TLE](https://www.luogu.com.cn/record/59606878) \u4e86\u3002  \n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f18\u5316\uff0c\u4f46\u662f\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u4f18\u5316\u600e\u4e48\u529e\uff1f\u4e0d\u4f1a\u6590\u6ce2\u90a3\u5951\u5806\u600e\u4e48\u529e\uff1f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 `clock` \u51fd\u6570\u6765\u63a7\u5236\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u5728\u5feb\u8981\u8d85\u65f6\u7684\u65f6\u5019\u8f93\u51fa\u6700\u4f18\u89e3\u5373\u53ef\u3002  \n## Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1005; \nint n,m,g[maxn][maxn],dis[maxn],minn,k,ans,x,y;\nbool vis[maxn],flag;\nint pre[maxn];\nint min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nvoid dijkstra()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tdis[1]=0;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tminn=dis[0];\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(!vis[j]&&dis[j]<minn)\n\t\t\t{\n\t\t\t\tminn=dis[j];\n\t\t\t\tk=j;\n\t\t\t}\n\t\t}\n\t\tvis[k]=true;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(flag&&((k==x&&j==y)||(k==y&&j==x)))\n\t\t\t\tcontinue;\n\t\t\tif(!vis[j]&&dis[k]+g[k][j]<dis[j])\n\t\t\t{\n\t\t\t\tdis[j]=dis[k]+g[k][j];\n\t\t\t\tif(!flag)\n\t\t\t\t\tpre[j]=k;\n\t\t\t}\n\t\t}\n\t}\n\tans=max(ans,dis[n]); \n}\nint main()\n{\n\tmemset(g,0x3f,sizeof(g));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,v;\n\t\tscanf(\"%d%d%d\",&a,&b,&v);\n\t\tg[a][b]=g[b][a]=min(g[a][b],v);\n\t}\n\tdijkstra();\n\tflag=true;//flag\u8bb0\u5f55\u662f\u6c42\u539f\u56fe\u7684\u6700\u77ed\u8def\u8fd8\u662f\u5220\u8fb9\u4e4b\u540e\u7684\u6700\u77ed\u8def\n\tfor(int i=n;i;i=pre[i])\n\t{\n\t\tx=i;\n  \t\ty=pre[i];\n\t\tdijkstra();\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n# \u540e\u8bb0\n\u8fd9\u5e94\u8be5\u662f\u6211\u63d0\u4ea4\u6b21\u6570\u6700\u591a\u7684\u4e00\u9053\u9898\u4e86\u2026\u2026",
        "postTime": 1644230094,
        "uid": 379058,
        "name": "Ginger_he",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37P1186\u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3\n\n\u7b14\u8005\u4e00\u770b\u8fd9\u9053\u9898\uff0c\u76f2\u76ee\u8ba4\u4e3a\u9898\u76ee\u8d85\u6c34\uff0c\u679c\u65ad\u5199\u4e86\u4e00\u4e2a dijkstra,\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u6700\u77ed\u8def\u7684\u8fb9\uff0c\u5c06\u5176\u5220\u53bb\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u904d dijkstra \u6c42\u5f53\u524d\u6700\u77ed\u8def\uff0c\u5982\u679c\u5f53\u524d\u7684\u6700\u77ed\u8def\u5927\u4e8e $ans$ \u5c31\u66f4\u65b0\uff0c\u8fd9\u6837\u5c31\u6c42\u51fa\u4e86\u6700\u5927\u6b21\u77ed\u8def\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define reg register\n#define ri reg int\n\nstruct node{\n\tll v,w,nxt;\n}edge[2001000];\n\nll n,m,u,v,w;\n\nll head[1100],dis[1100],pre[1100],pred[1100];\n\nbool vis[1100];\n\nll tot;\n\ninline void Add_edge(ll u,ll v,ll w){\n\tedge[++tot].v=v;\n\tedge[tot].nxt=head[u];\n\tedge[tot].w=w;\n\thead[u]=tot;\n}\n\npriority_queue<pair<ll ,ll > > Q;\n\nvoid Dij(){\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tQ.push(make_pair(0ll,1ll));\n\tdis[1]=0;\n\twhile(Q.size()){\n\t\tll x=Q.top().second;\n\t\tQ.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=true;\n\t\tfor(ll i=head[x];i;i=edge[i].nxt){\n\t\t\tll v=edge[i].v;\n\t\t\tif(dis[v]>dis[x]+edge[i].w){\n\t\t\t\tpre[v]=x;\n\t\t\t\tif(i%2)pred[v]=i;\n\t\t\t\telse pred[v]=i-1;\n\t\t\t\tdis[v]=dis[x]+edge[i].w;\n\t\t\t\tQ.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid _Dij(){\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tQ.push(make_pair(0ll,1ll));\n\tdis[1]=0;\n\twhile(Q.size()){\n\t\tll x=Q.top().second;\n\t\tQ.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=true;\n\t\tfor(ll i=head[x];i;i=edge[i].nxt){\n\t\t\tll v=edge[i].v;\n\t\t\tif(dis[v]>dis[x]+edge[i].w){\n\t\t\t\tdis[v]=dis[x]+edge[i].w;\n\t\t\t\tQ.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(ll i=1;i<=m;i++){\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tAdd_edge(u,v,w);\n\t\tAdd_edge(v,u,w);\n\t}\n\tDij();\n\tll ans=-1;\n\tfor(ll i=n;i;i=pre[i]){\n\t\tll p=edge[pred[i]].w;\n\t\tedge[pred[i]].w=1e17;\n\t\tedge[pred[i]+1].w=1e17;\n\t\t_Dij();\n\t\tedge[pred[i]].w=p;\n\t\tedge[pred[i]+1].w=p;\n\t\tans=max(dis[n],ans);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\u4f46\u4e0d\u77e5\u9053\u90a3\u4e2a\u6bd2\u7624\u5927\u4f6c\u51fa\u7684\u6700\u540e\u4e09\u4e2a\u6570\u636e\uff0c\u65e0\u8bba\u600e\u4e48\u4f18\u5316\uff0c\u90fd\u4e1d\u6beb\u65e0\u6cd5\u64bc\u52a8\u90a3\u4e09\u4e2a TLE\uff0c\u4f46\u6211\u4e1d\u6beb\u4e0d\u52a8\u6447\u51b3\u5fc3\uff0c\u51b3\u5b9a\u8981\u641e\u4e8b\u3002\n\n\u770b\u5230\u6211\u7684\u4ee3\u7801\u662f\u904d\u5386\u6700\u77ed\u8def\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u4e8e\u662f\u8eab\u4e3a\u559c\u6b22\u7384\u5b66\u7684\u849f\u84bb\uff0c\u4e8e\u662f\u6211\u52a0\u4e86\u4e00\u4e2a\u975e\u5e38\u770b\u8138\u7684\u4e1c\u4e1c\uff0c\u5176\u540d\u66f0\uff1a\n\n```clock()```\n\n\u6211\u4eec\u7528 ```clock()```\uff0c\u7b49\u5230\u5feb\u5230\u8d85\u65f6\u7684\u65f6\u5019\u5c31\u8df3\u51fa\uff0c\u76f4\u63a5\u8f93\u51fa  $ans$,\u52a0\u4e0a\u540e\uff0c\u4e00\u4ea4\uff1a\n\n```Wrong Answer```\n\n\u8ba9\u6211\u4eec\u5148\u60f3\u60f3\u4e3a\u5565\u4f1a WA\u3002\n\n\u6211\u4eec\u662f\u4ece\u540e\u5f80\u524d\u904d\u5386\uff0c\u4f46\u53ef\u80fd\u662f\u8981\u5220\u524d\u9762\u7684\u8fb9\u624d\u4f1a\u51fa\u7b54\u6848\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4\u6b63\u5e8f\u5b58\u8d77\u6765\uff0c\u7136\u540e\u5728\u904d\u5386\u8bd5\u8bd5\u3002\n\n```\n  int ans=-1,flag=0,now=n,nu;\n  while(now!=1){\n    way[++nu]=pred[now];\n    now=pre[now];\n  }\n```\n\u7136\u540e\uff0c\u6211\u53c8\u5c06 ```long long``` \u5168\u90e8\u6539 ```int```,\u52a0\u4e0a\u5feb\u8bfb\u5feb\u5199\uff0c\u7136\u540e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hoxum0w7.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\n\u9644\u4e0a AC \u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define ri reg int\n\nstruct node{\n\tint v,w,nxt;\n}edge[2001000];\n\nint n,m,u,v,w;\n\nint head[1100],dis[1100],pre[11000000],pred[11000000],way[110000000];\n\nbool vis[1100];\n\nint tot;\n\nvoid z(int &x){ \n\tint f=1;x=0;char s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\n\ninline void Add_edge(int u,int v,int w){\n\tedge[++tot].v=v;\n\tedge[tot].nxt=head[u];\n\tedge[tot].w=w;\n\thead[u]=tot;\n}\n\npriority_queue<pair<int ,int > > Q;\n\nvoid Dij(){\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tQ.push(make_pair(0,1));\n\tdis[1]=0;\n\twhile(Q.size()){\n\t\tint x=Q.top().second;\n\t\tQ.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=true;\n\t\tfor(int i=head[x];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].v;\n\t\t\tif(dis[v]>dis[x]+edge[i].w){\n\t\t\t\tpre[v]=x;\n\t\t\t\tif(i%2)pred[v]=i;\n\t\t\t\telse pred[v]=i-1;\n\t\t\t\tdis[v]=dis[x]+edge[i].w;\n\t\t\t\tQ.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tz(n),z(m);\n\tfor(int i=1;i<=m;i++){\n\t\tz(u),z(v),z(w);\n\t\tAdd_edge(u,v,w);\n\t\tAdd_edge(v,u,w);\n\t}\n\tDij();\n\tint ans=-1,flag=0,now=n,nu;\n    while(now!=1){\n    \tway[++nu]=pred[now];\n    \tnow=pre[now];\n    }\n\tfor(int i=nu;i>=1;i--){\n\t\tint p=edge[way[i]].w;\n\t\tedge[way[i]].w=1e9;\n\t\tedge[way[i]+1].w=1e9;\n\t\tDij();\n\t\tedge[way[i]].w=p;\n\t\tedge[way[i]+1].w=p;\n\t\tans=max(dis[n],ans);\n\t\tif((double)clock()/CLOCKS_PER_SEC>0.987) break;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n~~\u7384\u5b66\u5927\u53d1\u597d~~",
        "postTime": 1631366281,
        "uid": 470194,
        "name": "VectorChange",
        "ccfLevel": 0,
        "title": "P1186\u9898\u89e3"
    },
    {
        "content": "~~\u65e2\u7136\u6807\u7b7e\u662f\u66b4\u529b\uff0c\u90a3\u5c31\u522b\u52a0\u540e\u9762\u4e09\u4e2a\u70b9\u554a\uff01\u6bd5\u7adf\u6807\u7b7e\u6ca1\u6709\u7ebf\u6bb5\u6811\u3002~~\n\n\u4f20\u9001\u95e8\uff1a[P1186](https://www.luogu.com.cn/problem/P1186)\n\n\u4e0d\u5c31\u662f\u66b4\u529b\u5417\uff1f\u5148\u8dd1\u4e00\u904d Dijkstra\uff0c\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u6bcf\u4e00\u6761\u8fb9\u3002\u7136\u540e\u5220\u9664\u6bcf\u4e00\u6761\u8fb9\u518d\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\u5e76\u66f4\u65b0\u7b54\u6848\u3002\u4f46\u662f\u8fd9\u6837\u4f1a\u8d85\u65f6\uff0c\u6700\u540e\u4e09\u4e2a\u70b9\u8fc7\u4e0d\u53bb\u3002\u4f46\u662f\uff0c\u4e0d\u8981\u5fd8\u4e86\uff0c\u6211\u4eec\u6709\u65f6\u5728\u6bd4\u8d5b\u65f6\u4e0d\u4f1a\u5199 dp \u7684\u9898\u76ee\u53ef\u4ee5\u66b4\u529b dfs\uff0c\u867d\u7136\u4f1a\u8d85\u65f6\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u8bb0\u5f55\u4e0b\u6765\u603b\u5171 dfs \u4e86\u591a\u5c11\u6b21\uff0c\u5728\u4e2d\u9014\u5feb\u8d85\u65f6\u505c\u4e0b\u6765\uff0c\u53ef\u80fd\u4e5f\u4f1a AC\uff0c\u53cd\u6b63\u907f\u514d\u4e86 TLE\u3002\u501f\u52a9\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5220\u9664\u8fb9\u65f6\u8bb0\u5f55\u603b\u5171\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\uff0c\u8fc7\u5927\u65f6\u505c\u4e0b\u3002\u518d\u501f\u52a9\u795e\u5947\u7684 register\u3001O2\u3001scanf\uff0c\u5c31\u53ef\u4ee5\u5207\u6389\u8fd9\u4e2a\u84dd\u9898\u4e86\uff01\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <ctime>\n#include <cstdlib>\n#include <cstring>\nusing namespace std;\n\n#define int long long\n\nconst int N = 1e4 + 5;\nint n, m, ans = 0;\n\nstruct Edge\n{\n\tint place, cost;\n\tEdge(int x, int y)\n\t{\n\t\tplace = x;\n\t\tcost = y;\n\t}\n};\n\nstruct Node\n{\n\tint pos, dist;\n\tNode(int q, int w) { pos = q, dist = w; }\n\tbool operator<(const Node& e) const\n\t{\n\t\treturn e.dist < dist;\n\t}\n};\n\nvector<Edge> vec[N];\nint dis[N];\nvector<int> pre(N);\nbool vis[N];\nbool cant[N][N];\n\nvoid dijkstra()\n{\n\tpriority_queue<Node> q;\n\tq.push(Node(1, 0));\n\tpre[1] = 0;\n\tdis[1] = 0;\n\twhile (!q.empty())\n\t{\n\t\tNode l = q.top();\n\t\tregister int places = l.pos;\n\t\tq.pop();\n\t\tvis[l.pos] = true;\n\t\tfor (register int i = 0; i < vec[places].size(); i++)\n\t\t{\n\t\t\tregister int news = vec[places][i].place;\n\t\t\tif (dis[news] > dis[places] + vec[places][i].cost)\n\t\t\t{\n\t\t\t\tdis[news] = dis[places] + vec[places][i].cost;\n\t\t\t\tpre[news] = places;\n\t\t\t\tif (!vis[news]) q.push(Node(news, dis[places] + vec[places][i].cost));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid dijkstra2()\n{\n\tpriority_queue<Node> q;\n\tq.push(Node(1, 0));\n\tdis[1] = 0;\n\twhile (!q.empty())\n\t{\n\t\tNode l = q.top();\n\t\tregister int places = l.pos;\n\t\tq.pop();\n\t\tvis[l.pos] = true;\n\t\tfor (register int i = 0; i < vec[places].size(); i++)\n\t\t{\n\t\t\tif (cant[places][vec[places][i].place]) continue;\n\t\t\tregister int news = vec[places][i].place;\n\t\t\tif (dis[news] > dis[places] + vec[places][i].cost)\n\t\t\t{\n\t\t\t\tdis[news] = dis[places] + vec[places][i].cost;\n\t\t\t\tif (!vis[news]) q.push(Node(news, dis[places] + vec[places][i].cost));\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main()\n{\n\tint pl = 0;\n\tscanf(\"%lld %lld\", &n, &m);\n\tfor (register int i = 1; i <= m; i++)\n\t{\n\t\tint u, v, w;\n\t\tscanf(\"%lld %lld %lld\", &u, &v, &w);\n\t\tvec[u].push_back(Edge(v, w));\n\t\tvec[v].push_back(Edge(u, w));\n\t}\n\tmemset(dis, 0x3f, sizeof(dis));\n\tdijkstra();\n\tregister int now = n, l = 250;\n\twhile (pre[now])\n\t{\n\t\tpl++;\n\t\tmemset(dis, 0x3f, sizeof(dis));\n\t\tmemset(vis, 0, sizeof(vis));\n\t\tcant[pre[now]][now] = true;\n\t\tdijkstra2();\n\t\tans = max(ans, dis[n]);\n\t\tcant[pre[now]][now] = false;\n\t\tnow = pre[now];\n\t\tif (pl >= l) break;\n\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1642228035,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P1186 \u739b\u4e3d\u5361"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u7684\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u518d\u679a\u4e3e\u5207\u65ad\u6700\u77ed\u8def\u4e0a\u6bcf\u4e00\u6761\u8def\u540e\u7684\u65b0\u7684\u7b54\u6848\u3002\n\n\u6253\u5b8c\u4e00\u4ea4,TLE\u4e86\uff0c\u539f\u56e0\u662f\u6700\u540e\u4e09\u4e2a\u70b9\u7684~~\u6bd2\u7624~~\u6570\u636e\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u5e76\u67e5\u96c6\u548c\u7ebf\u6bb5\u6811\u7684\u4f18\u5316\uff0c\u6216\u8005\u7528\u6590\u6ce2\u90a3\u5951\u5806\u6765\u5b9e\u73b0Dijkstra\u4e2d\u7684\u4f18\u5148\u961f\u5217\uff0c\u4f46\u662f\u849f\u84bb\u4e0d\u4f1a\uff0c\u90a3\u5c31\u53ea\u80fd\u7528\u7384\u5b66\u5927\u6cd5\u4e86:\u7528\u51fd\u6570\u6765\u63a7\u5236\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u95f4\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,fir[1005],cnt,dis[1005],x,y,ans,las[1005],nxt[1000005],val[1000005],son[1000005];\nbool vis[1005],F;\ninline int read(){\n    char ch=getchar();int x=0;\n    while(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return x;\n}\nstruct edge{\n\tint cur,val;\n\tbool operator<(const edge &a)const{\n\treturn val>a.val;\n\t}\n};\ninline void add(int u,int v,int w){\n\tson[++cnt]=v;\n\tval[cnt]=w;\n\tnxt[cnt]=fir[u];\n\tfir[u]=cnt;\n}\npriority_queue<edge>q;\ninline void dij(int s){\n\tmemset(dis,0x3f,sizeof dis);\n\tmemset(vis,0,sizeof vis);\n\tdis[s]=0;\n\tq.push((edge){s,0});\n\twhile(!q.empty()){\n\t\tif(clock()>=995000){\n\t\t\tprintf(\"%d\",ans);\n\t\t\texit(0);\n\t\t}\n\t\tint u=q.top().cur;q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=true;\n\t\tfor(int i=fir[u];i;i=nxt[i]){\n\t\t\tif((x==son[i]&&y==u)||(x==u&&y==son[i]))continue;\n\t\t\tif(dis[son[i]]>dis[u]+val[i]){\n\t\t\t\tdis[son[i]]=dis[u]+val[i];\n\t\t\t\tif(!F)las[son[i]]=u;\n\t\t\t\tq.push((edge){son[i],dis[son[i]]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tu=read(),v=read(),w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdij(1);\n\tF=true;//\u5f00\u59cb\u5207\u65ad\u8fb9\u4e86\uff0c\u505c\u6b62\u6807\u8bb0\u3002\n\tint f=n;\n\twhile(f){\n\t\tx=f,y=las[f];//las\u8bb0\u5f55\u7ecf\u8fc7\u8282\u70b9\u3002\n\t\tif(clock()>=995000){//clock\uff08\uff09\u51fd\u6570\u8868\u793a\u8fd0\u884c\u65f6\u95f4\uff0c\u5f53\u65f6\u95f4\u8fc7\u5927\u65f6\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\uff0c\u4f46\u4e0d\u80fd\u592a\u5c0f\uff0c\u5426\u5219\u672a\u6c42\u51fa\u6b63\u89e3\u4f1aWA\u3002\n\t\t\tcout<<ans;\n\t\t\treturn 0;\n\t\t}\n\t\tdij(1);\n\t\tans=max(dis[n],ans);\n\t\tf=las[f];\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1631855543,
        "uid": 434929,
        "name": "Usada_Pekora",
        "ccfLevel": 7,
        "title": "\u7384\u5b66\u9898\u89e3"
    }
]