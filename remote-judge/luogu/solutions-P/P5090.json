[
    {
        "content": "\u6ce8\uff1a\u6b64\u505a\u6cd5\u4ea6\u53ef\u901a\u8fc7 [\u52a0\u5f3a\u7248](https://www.luogu.com.cn/problem/P6590)\u3002\u5e76\u4e14\u5728\u52a0\u5f3a\u7248\u4e2d\u8868\u73b0\u5f97\u66f4\u52a0\u4f18\u79c0\u3002\n\n\uff08~~\u4e3a\u4e86\u6c34\u4f30\u503c~~\uff0c\u6211\u4e5f\u4f1a\u628a\u8fd9\u4e2a\u505a\u6cd5\u53d1\u5230\u52a0\u5f3a\u7248\u4e2d\uff09\n\n---\n\n\u65e2\u7136\u662f\u4e2a\u63d0\u7b54\uff0c\u901a\u5e38\u4e0d\u4f1a\u6709\u4ec0\u4e48\u590d\u6742\u5ea6\u6b63\u7ecf\u7684\u505a\u6cd5\uff0c\u591a\u534a\u662f\u8003\u9a8c\u4e71\u641e\u80fd\u529b\u3002\n\n\uff08\u4e0d\u8fc7\u8fd9\u9898\u597d\u50cf xtq \u7b49\u5927\u4f6c\u4ea4\u4e86 cpp \u6587\u4ef6\u5c31\u8dd1\u8fc7\u53bb\u4e86\uff0c\u6211\u4e0d\u5f97\u4e0d%%%\u3002\uff09\n\n## \u6838\u5fc3\u601d\u60f3\uff1a\u968f\u673a\u5316 + \u8d2a\u5fc3\n\n### \u968f\u673a\u5316\uff1a\n\n\u968f\u673a\u51fa\u6765\u4e00\u4e2a\u6392\u5217\uff0c\u5373\u628a\u6bcf\u4e2a\u8981\u586b\u7684\u6570\u968f\u51fa\u6765\u4e2a\u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u8f83\u9ad8\u7684\u4f18\u5148\u8003\u8651\u3002\n\n\u76f4\u63a5\u6bcf\u6b21 `random_shuffle` \u5373\u53ef\u3002\n\n### \u8d2a\u5fc3\uff1a\n\n\u4ece\u6839\uff08\u53ef\u4ee5\u81ea\u5df1\u89c4\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u968f\u673a\uff09\u51fa\u53d1\uff0cdfs \u4e00\u904d\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u586b\u5165\u5269\u4e0b\u7684\u6570\u4e2d\u4e0e\u7236\u4eb2\u8282\u70b9\u4e92\u8d28\u4e14\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u6570\u3002\n\n\u7528 `set` \u7ef4\u62a4\u5269\u4f59\u7684\u6570\u5373\u53ef\u3002\n\n---\n\n\u6839\u636e\u4ee5\u4e0a\u4e24\u6761\u5c31\u8db3\u4ee5\u901a\u8fc7\u6b64\u9898\u4e86 ^_^ \u3002\n\n\u6211\u5c31\u653e\u4e0b\u4ee3\u7801\u5427\u3002\n\n***code:***\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\n#define N 100010\nint T,n,x[N],y[N],p[N],ans[N],mn,tot,tmp[N];\nset<int> s;\ninline int _gcd(int a,int b){\n\tif(b==0)return a;\n\treturn _gcd(b,a%b);\n}\nvector<int> G[N];\nvoid dfs(int u,int fa){\n\tfor(auto i:s){\n\t\tif(!fa||_gcd(tmp[fa],p[i])==1){\n\t\t\ttmp[u]=p[i],s.erase(s.find(i));\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!tmp[u]){\n\t\t++tot;\n\t\ttmp[u]=p[(*s.begin())];\n\t\ts.erase(s.begin());\n\t}\n\tfor(auto v:G[u]){\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\n\t}\n}\nint main(){\n\tfreopen(\"x.in\",\"r\",stdin);\n\tfreopen(\"x.out\",\"w\",stdout);\n\tT=read();\n\twhile(T--){\n\t\tn=read();\n\t\tfor(int i=1;i<=n;++i)G[i].clear(),p[i]=i;\n\t\tfor(int i=1;i<n;++i){\n\t\t\tint u=read(),v=read();\n\t\t\tG[u].push_back(v),G[v].push_back(u);\n\t\t}\n\t\tmn=n;\n\t\tfor(int Test=1;;++Test){\n\t\t\ts.clear();\n\t\t\trandom_shuffle(p+1,p+n+1);\n\t\t\tfor(int i=1;i<=n;++i)tmp[i]=0,s.insert(i);\n\t\t\ttot=0;\n\t\t\tdfs(1,0);\n\t\t\tif(tot<mn){\n\t\t\t\tmn=tot;\n\t\t\t\tfor(int i=1;i<=n;++i){\n\t\t\t\t\tans[i]=tmp[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!mn)break;\n\t\t}\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tprintf(\"%d \",ans[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\u5982\u679c\u6ca1\u6709\u8010\u5fc3\uff0c\u90a3\u4e48\u968f\u4fbf\u8dd1\u8dd1\u5373\u53ef\u83b7\u5f97 $95+$ \u7684\u9ad8\u5206\u3002\uff08\u6d4b\u8bd5\u70b9 $1\\sim 6$ \u53ef\u4ee5\u79d2\u51fa\u3002\uff09\n\n\u5982\u679c\u6709\u4e00\u70b9\u8010\u5fc3\uff0c\u7528\u4e0d\u5230 $30min$ \u5373\u53ef\u5f97\u5230 $100$ \u5206\u3002\n\n\u5728**\u52a0\u5f3a\u7248**\u4e2d\u5c31\u66f4\u52a0\u4f18\u79c0\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u4e0d\u5230 $1min$ \u5c31\u8dd1\u5b8c\u4e86\u3002\u6709\u56fe\u4e3a\u8bc1\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ntfacqso.png)\n\n---\n\n\u56e0\u4e3a\u662f\u4e2a\u63d0\u7b54\uff0c\u5e76\u4e14\u6211\u6bd4\u8f83\u61d2\uff0c\u6240\u4ee5\u5230\u8fd9\u91cc\u6211\u5c31\u7ed3\u675f\u4e86\u3002\n\n\u5176\u5b9e\u8fd8\u6709\u975e\u5e38\u591a\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\u3002\uff08\u5176\u5b9e\u8fd9\u79cd\u9898\u76ee\u5c31\u662f\u4ec1\u8005\u89c1\u4ec1\uff0c\u667a\u8005\u89c1\u667a\u561b\u3002\uff09\n\n\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff1a\u628a\u8282\u70b9\u6309\u5ea6\u6570\u6392\u5e8f\uff0c\u5ea6\u6570\u5927\u7684\u653e\u4e0a\u5927\u8d28\u6570\u3002\n\n\u5f53\u7136\uff0c\u505a\u5b8c\u540e\u4e5f\u4e0d\u59a8\u601d\u8003\u4e00\u4e0b\u6709\u6728\u6709\u591a\u9879\u5f0f\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002\n\n---\n\n[*Froggy's blog*](https://www.luogu.org/blog/1445353309froggy/)\n\n#### \u5471!!",
        "postTime": 1591704797,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5090 \u3010[eJOI2018]\u4e92\u7d20\u6811\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u63d0\u7b54\u9898\u5c31\u4e0d\u5199\u9898\u610f\u4e86\u3002\n\n### \u9898\u89e3\n\n\u7ed9\u70b9\u4e0e\u4f17\u4e0d\u540c\u7684\u7406\u89e3\u5427\uff0c\u505a\u6cd5\u5e94\u8be5\u4e0e $\\texttt{F\\color{red}roggy}$ \u5728\u65f6\u95f4\u6548\u7387\u4e0a\u6301\u5e73\uff0c\u800c\u4e14\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u6280\u5de7\u3002\n\n\u6211\u5199\u7684\u662f\u968f\u673a\u5316\u8d2a\u5fc3+\u5206\u5757\u5904\u7406\u3002\n\n\u7531\u4e8e\u6211\u662f\u62b9\u9ed1\u524d\u884c\uff0c\u6240\u4ee5\u8fd9\u7bc7\u9898\u89e3\u4f1a\u8be6\u7ec6\u8bb0\u5f55\u6574\u4e2a\u7684\u5386\u7a0b\u4ee5\u53ca\u8981\u70b9\uff0c\u6240\u4ee5\u4e0b\u9762\u4ee3\u7801\u633a\u591a\u7684\uff0c\u5e0c\u671b\u5927\u5bb6\u8010\u5fc3\u770b\u5b8c\u3002\n\n#### $\\texttt{Subtask 1}\\sim \\texttt{6}$\n\n\u5bf9\u6bcf\u4e2a\u6570\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u4f18\u5148\u503c\uff0c\u7136\u540e\u4ece\u6839\u51fa\u53d1 $\\texttt{dfs}$ \u4e00\u904d\uff0c\u5230\u67d0\u4e2a\u70b9\u7684\u65f6\u5019\u6709\u4ee5\u4e0b\u4e24\u79cd\u8003\u8651\uff1a\n\n- \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u503c\u4f7f\u5f97\u5b83\u4e0e\u7236\u8282\u70b9\u7684\u503c\u4e92\u8d28\uff0c\u76f4\u63a5\u586b\u4e0a\u3002\n\n- \u5426\u5219\u586b\u4f18\u5148\u7ea7\u6700\u5927\u7684\u503c\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u8fc7\u5b50\u4efb\u52a1 $1\\sim 6$ \u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve()\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res));\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        random_shuffle(perm+1,perm+n+1),v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v==0)\n        {\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read(),srand(12387123);\n    for(register int i=0;i<test;i++)\n    {\n        solve();\n    }\n}\n```\n\n\u8fd9\u91cc\u4e00\u5f00\u59cb\u8f93\u5165\u7684 `str` \u8868\u793a\u5b50\u4efb\u52a1\u7f16\u53f7\uff0c$12387123$ \u662f\u4e00\u4e2a\u778e\u6253\u7684\u79cd\u5b50\uff0c\u4f46\u662f\u5230\u65f6\u5019\u6709\u7528\u3002\n\n#### $\\texttt{Subtask 9,10}$\n\n\u8fd9\u4e24\u4e2a\u70b9\u9700\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\u6d4b\u4eb2\u6d4b $\\texttt{Subtask 9}$ \u4e3a $\\texttt{15 min}$\uff0c$\\texttt{Subtask 10}$ \u5219\u66f4\u957f\uff0c\u4f46\u662f\u90fd\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002\n\n#### $\\texttt{Subtask 7,8}$\n\n\u6211\u89c9\u5f97\u8fd9\u4e48\u505a\u8fd9\u9898\u6700\u8003\u9a8c\u505a\u9898\u8005\u7684\u5c31\u662f\u8fd9\u4e24\u4e2a\u5b50\u4efb\u52a1\u4e86\uff0c\u9996\u5148\u5148\u4ecb\u7ecd\u4e00\u79cd\u5feb\u901f\u903c\u8fd1\u6b63\u89e3\u7684\u505a\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u67d0\u4e9b\u6d4b\u8bd5\u6570\u636e\u6c42\u51fa\u6b63\u89e3\u7684\u96be\u5ea6\u592a\u5927\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u8003\u8651\u89c4\u5b9a\u4e00\u4e2a\u9608\u503c\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u9608\u503c\u7684\u89e3\u6211\u4eec\u5c31\u628a\u4ed6\u79f0\u4f5c\u201c\u6b63\u89e3\u201d\uff0c\u4e8e\u662f\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nmt19937 mt(123456);\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve(ll tst)\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res));\n    test=0;\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        test++,random_shuffle(perm+1,perm+n+1),v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v<=10||(tst==8&&v<=100))\n        {\n            cerr<<\"trial: \"<<test<<endl;\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read(),srand(12387123);\n    for(register int i=0;i<test;i++)\n    {\n        cerr<<\"start test \"<<i<<endl;\n        solve(i);\n    }\n}\n```\n\n`cerr` \u7684\u8f93\u51fa\u7528\u6765\u8c03\u8bd5\uff0c\u7136\u540e\u5224\u65ad `tst` \u662f\u56e0\u4e3a $\\texttt{Subtask 7}$ \u7684\u7b2c $8$ \u7ec4\u6570\u636e\u65e0\u6cd5\u5f88\u5feb\u7684\u6536\u655b\u5230\u5c0f\u4e8e $10$ \u7684\u503c\u3002\n\n\u4e8e\u662f\u7ed3\u5408\u4ee5\u4e0a\u7b97\u6cd5\u5c31\u80fd\u5728 $\\texttt{LOJ}$ \u4e0a\u83b7\u5f97 $\\texttt{98 pts}$\uff0c\u9644[\u63d0\u4ea4\u8bb0\u5f55](https://loj.ac/submission/873218)\n\n\u63a5\u4e0b\u6765\u8bb2\u6b63\u89e3\uff0c\u5f97\u51fa\u6b63\u89e3\u7684\u9014\u4e2d\u4f60\u9700\u8981\u6709\u70b9\u8010\u5fc3\u3002\n\n\u8003\u8651\u5bf9\u8fd9\u4e24\u4e2a\u5b50\u4efb\u52a1\u4e2d\u7684\u6240\u6709\u6570\u636e\u5168\u90e8\u5206\u5f00\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u53ea\u5305\u542b\u4e00\u7ec4\u6570\u636e\uff0c\u8fd9\u6837\u65b9\u4fbf\u5e76\u884c\u3002\n\n\u5206\u5f00\u6570\u636e\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nll test;\nll n,x,y;\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\nint main()\n{\n    freopen(\"07.in\",\"r\",stdin);\n    test=read();\n    for(register int i=1;i<=test;i++)\n    {\n        freopen((i==10?\"10\":\"0\"+to_string(i)).c_str(),\"w\",stdout);\n        n=read(),printf(\"1\\n%d\\n\",n);\n        for(register int j=0;j<n-1;j++)\n        {\n            x=read(),y=read();\n            printf(\"%d %d\\n\",x,y);\n        }\n    }\n}\n```\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5bf9\u6bcf\u7ec4\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u5728 $\\texttt{Subtask 7}$ \u4e2d\uff0c\u9664\u4e86\u7b2c $8,9$ \u4e24\u7ec4\u6570\u636e\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u90fd\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5feb\u901f\u8dd1\u51fa\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nmt19937 mt(123456);\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve(ll tst)\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res));\n    srand(85635453),test=0;\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        test++,random_shuffle(perm+1,perm+n+1),v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(test%100==0)\n        {\n            cerr<<\"trial \"<<test<<\": mn=\"<<mn<<endl;\n        }\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v==0)\n        {\n            cerr<<\"trial: \"<<test<<endl;\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read();\n    for(register int i=0;i<test;i++)\n    {\n        cerr<<\"start test \"<<i<<endl;\n        solve(i);\n    }\n}\n```\n\n\u8fd9\u4e2a\u79cd\u5b50\u662f\u6211\u968f\u673a\u4e86\u591a\u6b21\u627e\u51fa\u6765\u7684\u3002\n\n\u63a5\u4e0b\u6765\u5148\u6765\u770b\u7b2c $9$ \u7ec4\u6570\u636e\u3002\n\n\u8003\u8651\u6bcf\u4e00\u5b9a\u7684\u6b21\u6570\u6362\u4e00\u6b21\u968f\u673a\u6570\u5145\u5f53\u968f\u673a\u79cd\u5b50\uff0c\u4e8e\u662f\u5f97\u5230\u5982\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nmt19937 mt(123444);\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve(ll tst)\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res)),test=0;\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        test++,random_shuffle(perm+1,perm+n+1),v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(test%100==0)\n        {\n            srand(mt()%10000);\n            cerr<<\"trial \"<<test<<\": mn=\"<<mn<<endl;\n        }\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v==0)\n        {\n            cerr<<\"trial: \"<<test<<endl;\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read();\n    for(register int i=0;i<test;i++)\n    {\n        cerr<<\"start test \"<<i<<endl;\n        solve(i);\n    }\n}\n```\n\n\u6700\u540e\u5230\u4e86\u7b2c $8$ \u7ec4\u3002\u8fd9\u7ec4\u6570\u636e\u7684\u7279\u70b9\u662f\u7a0d\u4e0d\u6ce8\u610f\u574f\u8fb9\u7684\u6570\u91cf\u53ef\u4ee5\u968f\u968f\u4fbf\u4fbf\u8fbe\u5230\u56db\u4f4d\u6570\u800c\u4e14\u62d6\u957f\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5c3d\u53ef\u80fd\u8ba9\u574f\u8fb9\u7684\u6570\u91cf\u5feb\u901f\u6536\u655b\u3002\n\n\u8003\u8651\u8bbe\u4e2a\u9608\u503c\uff0c\u8fd9\u91cc\u4e3a $1000$\uff0c\u63a5\u4e0b\u6765\u6bcf\u6b21\u8fed\u4ee3\uff0c\u5982\u679c\u7b54\u6848\u5728\u8fd9\u4e2a\u9608\u503c\u4ee5\u5185\u6211\u4eec\u5c31\u4e0d\u6574\u4e2a\u6570\u7ec4\u968f\u673a\u6253\u4e71\u800c\u662f\u968f\u673a\u6362 $100$ \u6b21\u3002\u4eb2\u6d4b\u5728\u7b2c $8$ \u7ec4\u6570\u636e\u4e0a\u8868\u73b0\u975e\u5e38\u597d\uff0c\u53ea\u7528\u4e86\u4e8c\u5341\u51e0\u6b21\u5c31\u5f97\u51fa\u4e86\u7b54\u6848\uff0c\u540c\u6837\uff0c\u8fd9\u91cc\u653e\u51fa\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nmt19937 mt(123444);\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve(ll tst)\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res)),test=0;\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        \n        test++;\n        if(mn<=1000)\n        {\n            for(register int i=1;i<=100;i++)\n            {\n                ll x=rand()%n+1,y=rand()%n+1;\n                swap(perm[x],perm[y]);\n            }\n        }\n        else\n        {\n            random_shuffle(perm+1,perm+n+1);\n        }\n        v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(test%100==0)\n        {\n            srand(mt()%10000);\n            cerr<<\"trial \"<<test<<\": mn=\"<<mn<<endl;\n        }\n        cerr<<v<<endl;\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v==0)\n        {\n            cerr<<\"trial: \"<<test<<endl;\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read(),srand(123456);\n    for(register int i=0;i<test;i++)\n    {\n        cerr<<\"start test \"<<i<<endl;\n        solve(i);\n    }\n}\n```\n\n\u6700\u540e\u628a\u6bcf\u4e00\u7ec4\u7684\u7b54\u6848\u6574\u5408\u8d77\u6765\uff0c\u8fd9\u91cc\u7ee7\u7eed\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\nint main()\n{\n    freopen(\"7.out\",\"w\",stdout);\n    for(register int i=1;i<=10;i++)\n    {\n        freopen((i==10?\"10.out\":\"0\"+to_string(i)+\".out\").c_str(),\"r\",stdin);    \n        for(register int j=1;j<=10000;j++)\n        {\n            printf(\"%d \",read());\n        }\n        puts(\"\");\n    }\n}\n```\n\n\u6700\u540e\u662f $\\texttt{Subtask 8}$\u3002\u524d\u4e09\u7ec4\u7528\u6734\u7d20\u5c31\u597d\u4e86\uff0c\u540e\u9762\u4e24\u7ec4\u6211\u8c03\u53c2\u4e4b\u540e\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\ntypedef int ll;\ntypedef long long int li;\nconst ll MAXN=2e5+51;\nset<ll>s;\nvector<ll>g[MAXN];\nstring str;\nmt19937 mt(123444);\nll test,n,x,y,v,mn,tst;\nll fa[MAXN],cur[MAXN],res[MAXN],perm[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void dfs(ll node,ll fa)\n{\n    for(register int u:s)\n    {\n        if(!fa||__gcd(perm[u],cur[fa])==1)\n        {\n            cur[node]=perm[u],s.erase(u);\n            break;\n        }\n    }\n    if(!cur[node])\n    {\n        cur[node]=perm[*s.begin()],v++,s.erase(s.begin());\n    }\n    for(register int to:g[node])\n    {\n        to!=fa?dfs(to,node):(void)(1);\n    }\n}\ninline void solve(ll tst)\n{\n    mn=n=read(),memset(g,0,sizeof(g)),memset(res,0,sizeof(res)),test=0;\n    for(register int i=0;i<n-1;i++)\n    {\n        x=read(),y=read();\n        g[x].push_back(y),g[y].push_back(x);\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        perm[i]=i;\n    }\n    while(1)\n    {\n        test++,random_shuffle(perm+1,perm+n+1),v=0;\n        for(register int i=1;i<=n;i++)\n        {\n            cur[i]=0,s.insert(i);\n        }\n        dfs(1,0);\n        if(test%100==0)\n        {\n            srand(mt()%10000);\n            cerr<<\"trial \"<<test<<\": mn=\"<<mn<<endl;\n        }\n        cerr<<v<<endl;\n        if(v<mn)\n        {\n            mn=v;\n            for(register int i=1;i<=n;i++)\n            {\n                res[i]=cur[i];\n            }\n        }\n        if(v==0)\n        {\n            cerr<<\"trial: \"<<test<<endl;\n            break;\n        }\n    }\n    for(register int i=1;i<=n;i++)\n    {\n        printf(\"%d \",res[i]);\n    }\n    puts(\"\");\n}\nint main()\n{\n    cin>>str;\n    freopen(str.c_str(),\"r\",stdin);\n    freopen((str+\".out\").c_str(),\"w\",stdout);\n    test=read(),srand(123456);\n    for(register int i=0;i<test;i++)\n    {\n        cerr<<\"start test \"<<i<<endl;\n        solve(i);\n    }\n}\n```\n\n\u81f3\u6b64\uff0c\u4f60\u5c31\u53ef\u4ee5\u62ff\u5230\u5168\u90e8\u7684\u5206\u6570\u4e86\u3002\n\n**\u56e0\u4e3a\u8fd9\u4e9b\u53ef\u4ee5\u5e76\u884c\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c0f\u4e8e\u534a\u5c0f\u65f6\u5185\u8fc7\u3002**",
        "postTime": 1595490120,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5090 \u3010[eJOI2018]\u4e92\u7d20\u6811\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u76f4\u63a5\u4ea4\u4ee3\u7801\u5c31\u80fd\u8fc7\u7684\u9898\u89e3\n\n\u867d\u7136\u6211\u4e0d\u4f1a\u8bc1\u660e\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u662f\u5b83\u5c31\u662f\u8dd1\u5f97\u5feb\uff01\uff011\n\n\u5177\u4f53\u505a\u6cd5\uff1a\n\n\u53d1\u73b0 $2$ \u7684\u500d\u6570\u975e\u5e38\u591a\uff0c\u5360\u5230\u4e86\u4e00\u534a\uff0c\u5148\u8003\u8651\u5c06\u8fd9\u68f5\u6811\u4e8c\u5206\u56fe\u67d3\u8272\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u9ed1\u767d\u4e24\u8272\u4e2d\u81f3\u5c11\u6709\u4e00\u79cd\u989c\u8272\u4e2a\u6570\u8d85\u8fc7\u4e00\u534a\uff0c\u90a3\u4e48\u4ece\u8fd9\u79cd\u989c\u8272\u4e2d\u968f\u673a\u9009\u51fa\u4e00\u4e9b\u6309\u987a\u5e8f\u586b\u4e0a $2$ \u7684\u500d\u6570\u3002\n\n\u7136\u540e\u5c06\u5269\u4e0b\u7684\u6570 random_shuffle \u4e00\u4e0b\uff0c\u76f8\u5f53\u4e8e\u968f\u673a\u987a\u5e8f\uff0c\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u4f9d\u6b21\u627e\u5230\u7f16\u53f7\u6700\u5c0f\u7684\u80fd\u591f\u586b\u5b83\u7684\u4f4d\u7f6e\u5e76\u586b\u4e0a\u3002\n\n\u5982\u679c\u4e0d\u653e\u5fc3\u53ef\u4ee5\u628a\u7f16\u53f7\u4e5f random_shuffle \u4e00\u4e0b\uff0c\u4e0d\u8fc7\u6211\u6ca1\u8fd9\u4e48\u505a\u3002\n\n\u627e\u5230\u89e3\u7684\u6982\u7387\u5b8c\u5168\u4e0d\u4f1a\u7b97\uff0c\u4f46\u662f\u8dd1\u7684\u98de\u5feb\uff0c300ms \u4e0d\u5230\u5c31\u8fc7\u4e86\u3002\n\n\u6709\u4e00\u4e9b\u4f18\u5316\u65b9\u6cd5\u53ef\u80fd\u53ef\u4ee5\u8dd1\u5f97\u66f4\u5feb\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u4e0d\u80fd\u770b\u3002\n\n- \u5c3d\u91cf\u5c06\u5927\u8d28\u6570\u586b\u5728\u5ea6\u6570\u5927\u7684\u8282\u70b9\u4e0a\u3002\n\n- \u5c06\u66f4\u591a\u5c0f\u8d28\u6570\u7684\u500d\u6570\u9884\u5148\u586b\u4e0a\u53bb\uff0c\u800c\u4e0d\u53ea\u662f $2$ \u7684\u500d\u6570\u3002\n\n- random_shuffle \u4f3c\u4e4e\u4e0d\u662f\u5747\u5300\u968f\u673a\uff08?\uff09\u53ef\u4ee5\u624b\u5199\u4e00\u4e2a\u51fa\u6765\u3002\n\n- ~~\u4ea4\u4e4b\u524d\u6d17\u628a\u8138~~\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 100005\n#define pb push_back \n#define set(a,vl) memset(a,vl,sizeof(a))\nint T,n,ord[N],a[N];bool col[N];set<int> z;\nvector<int> vc1[2],e[N];\nint gcd(int x,int y) {return y?gcd(y,x%y):x;}\nvoid dfs(int u,int f)\n{\n\tcol[u]=col[f]^1;vc1[col[u]].pb(u);\n\tfor(int i=0,v;i<e[u].size();++i)\n\t{v=e[u][i];if(v!=f) dfs(v,u);}\n}\nbool chk(int u,int x)\n{\n\tfor(int i=0,v;i<e[u].size();++i)\n\t{v=e[u][i];if(a[v] && gcd(x,a[v])>1) return 0;}return 1;\n}\nvoid upd(int u,int x) {a[u]=x;z.erase(u);}\nbool slv1()\n{\n\tord[0]=0;set(a,0);z.clear();\n\trandom_shuffle(vc1[0].begin(),vc1[0].end());\n\tfor(int i=2;i<=n;i+=2) a[vc1[0][i/2-1]]=i;\n\tfor(int i=1;i<=n;i+=2) ord[++ord[0]]=i; \n\trandom_shuffle(ord+1,ord+ord[0]+1);\n\tfor(int i=1;i<=n;++i) if(!a[i]) z.insert(i); \n\tfor(int i=1,j;i<=ord[0];++i)\n\t{\n\t\tbool fl=0;\n\t\tfor(set<int>::iterator it=z.begin();it!=z.end();++it)\n\t\t{j=*it;if(chk(j,ord[i])) {upd(j,ord[i]);fl=1;break;}}\n\t\tif(!fl) return 0;\n\t}return 1;\n}\nvoid slv()\n{\n\tscanf(\"%d\",&n);vc1[0].clear();vc1[1].clear();\n\tfor(int i=1;i<=n;++i) e[i].clear();\n\tfor(int i=1,u,v;i<n;++i)\n\t\tscanf(\"%d %d\",&u,&v),e[u].pb(v),e[v].pb(u);dfs(1,0);\n\tif(vc1[0].size()<vc1[1].size()) swap(vc1[0],vc1[1]);\n\twhile(1) if(slv1()) break;\n\tfor(int i=1;i<=n;++i) printf(\"%d \",a[i]);puts(\"\");\n}\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d\",&T);while(T--) slv();return 0;\n}\n```",
        "postTime": 1620702648,
        "uid": 119621,
        "name": "Kubic",
        "ccfLevel": 10,
        "title": "[eJOI2018]\u4e92\u7d20\u6811"
    },
    {
        "content": "\u8bb0\u5f55\u4e00\u4e0b\u6211\u6240\u6709\u7684\u60f3\u6cd5\u4ee5\u53ca\u5f97\u5230\u6700\u540e\u65b9\u6cd5\u7684\u601d\u8003\u8fc7\u7a0b\uff1a\n\n - \u6a21\u62df\u9000\u706b\n   1. \u6bcf\u6b21\u627e\u4e00\u6761\u8fb9\uff0c\u9000\u706b\u7684\u65f6\u5019\u5c1d\u8bd5\u628a\u4e00\u4e2a\u968f\u673a\u8fb9\u7684\u6570\u4ea4\u6362\n   2. \u7b2c\u4e00\u6b21\u5199\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u4e86\u7b54\u6848\uff0c\u53ea\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u6570\u636e\u70b9\n   3. \u7b2c\u4e8c\u6b21\u5199\u4ec5\u4ec5\u66f4\u65b0\u5c40\u90e8\u7b54\u6848\uff0c\u5feb\u4e86\u4e00\u4e9b\u4f46\u662f\u8fd8\u662f\u4e0d\u80fd\u5b8c\u5168\u505a\u597d\u7b2c\u4e8c\u4e2a\u70b9\n   4. \u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u53ef\u884c\uff0c\u4ece\u4e00\u4e2a\u968f\u673a\u6392\u5217\u5230\u4e00\u4e2a\u6700\u4f18\u89e3\u9700\u8981\u592a\u591a\u592a\u591a\u7684\u8fb9\u4ea4\u6362\n - \u968f\u673a\u4f18\u5148\u7ea7\n   1. \u53d1\u73b0\u6765 AC \u5fc5\u987b\u4e00\u4e2a\u574f\u8fb9\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u627e\u63a5\u8fd1\u6700\u4f18\u89e3\u7684\u89e3\u5b8c\u5168\u6ca1\u610f\u4e49\n   2. \u6bcf\u4e00\u8f6e\u4f1a\u6240\u6709 1 \u5230 n \u7684\u6570\u4e00\u4e2a\u968f\u673a\u4f18\u5148\u7ea7\n   3. \u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u5c1d\u8bd5\u628a\u6570\u586b\u5165\uff0c\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u5148\u586b\u5165\n   4. \u6211\u628a\u6811\u8fdb\u884c bfs\uff0c\u7136\u540e\u7528 bfs \u5e8f\u505a\u66b4\u529b\uff0c\u770b\u4e00\u4e2a\u4f4d\u7f6e\u80fd\u4e0d\u80fd\u586b\uff0c\u586b\u4e86\u4e00\u5b9a\u6b21\u6570\uff08\u4e00\u767e\u4e07\uff09\u8fd8\u6ca1\u627e\u5230\u89e3\u505c\u6b62\uff0c\u91cd\u590d\u505a\u7b49\u5230\u627e\u5230\u89e3\n   5. \u8fc7\u4e86 2, 3, 4 \u70b9\uff0c\u4f46\u662f\u5230\u4e86 4 \u5df2\u7ecf\u7279\u522b\u6162\n   6. \u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u53ef\u884c\uff0c\u4e00\u4e2a\u6570\u586b\u5165\u5230\u4e00\u4e2a\u8282\u70b9\u4f46\u662f\u5b50\u6811\u65e0\u6cd5\u586b\u5165\u4f1a\u9700\u8981\u592a\u957f\u7684\u65f6\u95f4\u624d\u53d1\u73b0\n   7. \u76f4\u63a5\u8d2a\u5fc3\u586b\u5165\uff1a\u505a dfs\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u548c\u7236\u4eb2\u8282\u70b9\u586b\u5165\u503c\u4e92\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7acb\u523b\u505c\u6b62\uff0c\u968f\u673a\u5b89\u6392\u4f18\u5148\u7ea7\n   8. \u8fd9\u6837\u4e00\u4e2a\u8f6e\u5c31\u5feb\u5f88\u591a\uff0c4\uff0c5\uff0c6 \u70b9\u90fd\u633a\u5feb\u4e86\uff0c\u4f46\u662f 7 \u5c31\u5361\u4e00\u6bb5\u65f6\u95f4\u4e86\n   9. \u8003\u8651\u4f18\u5316\uff1a\u6211\u672c\u6765\u662f\u7528 set \u7ef4\u62a4\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u4f46\u662f\u56e0\u4e3a\u4f18\u5148\u7ea7\u56fa\u5b9a\uff0c\u53ef\u4ee5\u7528 list\uff08c++ \u81ea\u5e26\u53cc\u5411\u94fe\u8868\uff09\uff0c\u5feb\u4e0d\u5c11\uff0c\u653e\u4e00\u6bb5\u65f6\u95f4\u53ef\u4ee5\u8fc7\u6240\u6709\u6d4b\u8bd5\u70b9\n\n\u76f4\u63a5\u63d0\u4ea4\u4ee3\u7801\u90fd\u53ef\u4ee5\u62ff\u5230 40 \u5206\n\n\u53e6\u5916\u90a3\u4e9b\u76f4\u63a5\u63d0\u4ea4\u4ee3\u7801\u7684\u5de8\u4f6c\u662f\u600e\u4e48\u505a\u7684\u554a QAQ\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// writer: w33z8kqrqk8zzzx33\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define iter(i, a, b) for(int i=(a); i<(b); i++)\n#define rep(i, a) iter(i, 0, a)\n#define rep1(i, a) iter(i, 1, (a)+1)\n#define fi first\n#define se second\n#define pb push_back\n \n#define ll long long\n#define pii pair<int, int>\n//#define int ll\nconst int MOD = 1000000007;\n\nmt19937 rng;\nint rnd(int n) { return rng() % n; }\n\nlist<int> order;\n#define MAXN 100005\nint val[MAXN];\n\nint n;\nvector<int> elist[MAXN];\nint seq[MAXN];\n\nvoid init() {\n    memset(val, 0, sizeof val);\n    vector<int> seq; rep1(i, n) seq.pb(i);\n    random_shuffle(seq.begin(), seq.end(), rnd);\n    order.clear();\n    rep(i, n) order.pb(seq[i]);\n}\nint fails = 0;\n\nlist<int>::iterator f(int c) { \n    auto t = order.begin();\n    while(t != order.end()) {\n        if(__gcd(c, *t) == 1) return t;\n        t = next(t);\n    }\n    return t;\n}\nint far(int c) { \n    auto k = f(c); \n    if(k == order.end()) return -1;\n    int v = *k;\n    order.erase(k); \n    return v; \n}\n\nbool dfs(int u, int fa) {\n    for(int& v:elist[u]) {\n        if(v == fa) continue;\n        int p = far(val[u]);\n        if(p == -1) return 0;\n        val[v] = p;\n        if(!dfs(v, u)) return 0;\n    }\n    return 1;\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    rng.seed(108616); // wxq AK IOI\n    int t; cin >> t;\n    rep1(vvv, t){\n    \tcerr << \"test case \" << vvv << endl;\n    \tcin >> n;\n    \trep1(i, n) elist[i].clear();\n    \trep(i, n-1) {\n    \t\tint u, v; cin >> u >> v;\n    \t\telist[u].pb(v);\n    \t\telist[v].pb(u);\n    \t}\n    \tint cnt = 0;\n    \twhile(1) {\n    \t    init();\n        \tfails = 0;\n        \tval[1] = far(1);\n        \tcnt++;\n        \tif(dfs(1, -1)) { \n        \t    rep1(i, n) cout << val[i] << ' '; \n        \t    cout << endl; \n        \t    cerr << \"ok [\" << cnt << \"]\" << endl; \n        \t    break; \n        \t}\n    \t}\n    }\n}\n\n```",
        "postTime": 1594128360,
        "uid": 220037,
        "name": "w33z8kqrqk8zzzx33",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5090 \u3010[eJOI2018]\u4e92\u7d20\u6811\u3011"
    }
]