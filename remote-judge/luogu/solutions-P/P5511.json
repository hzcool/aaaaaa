[
    {
        "content": "2020/12/28:\u66f4\u65b0\u5757\u72b6\u94fe\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\n\n\u6ce8\uff1a\u51fa\u9898\u4eba\u8868\u793a\uff0c\u6811\u5957\u6811\u7684\u590d\u6742\u5ea6\u5206\u6790\u6bd4\u8f83\u56f0\u96be\n\n~~\u542c\u8bf4\u6709\u4eba\u7528\u7384\u5b66\u505a\u6cd5\u6c34\u8fc7\u53bb\u4e86\uff0c\u8fd8\u6709\u4e0d\u5c11\u4eba\u7528\u66b4\u529b\u5f97\u4e86\u4e0d\u5c11\u5206~~\n\n\u8bdd\u8bf4\u6700\u540e\u4e00\u884c\u7684\"\u4e0d\u4fdd\u8bc1\u6570\u636e\u968f\u673a\"\u6709\u4eba\u770b\u5230\u4e86\u5417QWQ\n\n\u51fa\u9898\u4eba\u672c\u6765\u60f3\u5361\u5757\u72b6\u94fe\u8868\uff0c\u4f46\u662f\u6811\u5957\u6811\u8dd1\u5f97\u5f88\u6162\uff0c\u800c\u4e14\u592a\u5bb9\u6613MLE\u4e86\uff0c\u6240\u4ee5\u6700\u540e\u51b3\u5b9a\u90fd\u653e\u8fc7\u53bb\n\n## \u7b97\u6cd51\n\n\u7eaf\u66b4\u529b\uff0c\u6309\u7167\u9898\u610f\u6a21\u62df\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nm)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\n\n\u671f\u671b\u5f97\u5206\uff1a4\u5206\n\n\u5f53\u7136\u5927\u529b\u5361\u5e38\u80fd\u8fc7#2\u548c#3\n\n## \u7b97\u6cd52\n\n\u9488\u5bf9#2\n\n\u53d1\u73b0$h$\u53ea\u80fd\u662f0\u62161\n\n\u4e8e\u662f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u8d4b\u503c\u548c\u533a\u95f4\u6c42\u548c\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log n)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\n\n\u671f\u671b\u5f97\u5206\uff1a14\u5206\n\n\u7ed3\u5408\u7b97\u6cd51\u671f\u671b\u5f97\u5206\uff1a18\u5206\n\n## \u7b97\u6cd53\n\n\u9488\u5bf9#2 #5\n\n\\#5\u7684\u533a\u522b\u662f\u5f3a\u5236\u5728\u7ebf\uff0c\u800c\u4e14$n$\u8303\u56f4\u7279\u522b\u5927\n\n\u6240\u4ee5\u548c\u7b97\u6cd52\u57fa\u672c\u76f8\u540c\uff0c\u52a8\u6001\u5f00\u70b9\u5c31\u53ef\u4ee5\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log n)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(m \\log n)$\n\n\u671f\u671b\u5f97\u5206\uff1a26\u5206\n\n\u7ed3\u5408\u7b97\u6cd51\u671f\u671b\u5f97\u5206\uff1a30\u5206\n\n## \u7b97\u6cd54\n\n\u8003\u8651\u7b97\u6cd53\u7684\u7f3a\u9677\n\n\u5982\u679c\u80fd\u7ef4\u62a4\u5f88\u591a\u6570\uff0c\u90a3\u4e48\u5c31\u80fdAC\n\n\u8fd9\u65f6\u53d1\u73b0\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u4e0d\u884c\u4e86\n\n\u753b\u4e00\u4e2a\u8fd9\u6837\u7684\u56fe\uff08\u8fd9\u662f\u6837\u4f8b\u6700\u540e\u4e00\u6b21\u4fee\u6539\u540e\u7684\u60c5\u51b5\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/72137.png)\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u533a\u95f4\u8d4b\u503c\uff0c\u8be2\u95ee\u53ef\u4ee5\u8f6c\u5316\u4e3a\u533a\u95f4\u6c42\u548c\n\n\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u4e0d\u8fc7\u76f4\u63a5\u5f00\u7a7a\u95f4\u80af\u5b9a\u5f00\u4e0d\u4e0b\uff0c\u6240\u4ee5\u9700\u8981\u52a8\u6001\u5f00\u70b9\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log^2n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(m\\log^2 n)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u5c0f\uff0c\u800c\u4e14\u5e38\u6570\u4e0d\u592a\u5927\uff0c\u4f46\u7a7a\u95f4\u5f00\u9500\u76f8\u5f53\u5927\uff0c\u6709MLE\u98ce\u9669\n\n\u671f\u671b\u5f97\u5206100\u5206\uff0c\u4f46\u5f88\u6709\u53ef\u80fd\u88abMLE\u5361\u621051\u5206\u751a\u81f3\u66f4\u4f4e\n\n~~\u51fa\u9898\u4eba\u5e76\u4e0d\u4f1a\u5199\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6ca1\u8bd5\u8fc7~~\n\n## \u7b97\u6cd55\n\n\u9488\u5bf9#6\n\n\u53d1\u73b0\u5148\u4fee\u6539\u540e\u8be2\u95ee\n\n\u6240\u4ee5\uff0c\u8003\u8651\u5148\u6c42\u51fa\u4fee\u6539\u540e\u7684\u60c5\u51b5\uff0c\u518d\u5904\u7406\u8be2\u95ee\n\n\u5904\u7406\u4fee\u6539\u7684\u60c5\u51b5\u65f6\uff0c\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u5f53\u7136\u8fd9\u4e2a\u70b9\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u4e5f\u53ef\u4ee5\u79bb\u6563\u5316\uff09\n\n\u5904\u7406\u5b8c\u540e\uff0c\u53d1\u73b0\u5c31\u662f\u9759\u6001\u533a\u95f4\u6c42\u67d0\u6570\u6392\u540d\n\n\u7136\u540e\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811/\u6811\u5957\u6811\u5b8c\u6210\u5269\u4e0b\u7684\u90e8\u5206\n\n\u7528\u6811\u5957\u6811\u5c31\u57fa\u672c\u662f\u677f\u5b50\u4e86\uff0c\u53ef\u4ee5\u53c2\u8003\u6a21\u677f\u9898\u7684\u9898\u89e3\n\n\u7528\u4e3b\u5e2d\u6811\uff1a\n\n\u6309\u7167\u6570\u5b57\u4ece\u5c0f\u5230\u5927\uff0c\u4f9d\u6b21\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u8d4b\u503c\u4e3a1\u7684\u64cd\u4f5c\uff0c\u4fdd\u7559\u5386\u53f2\u7248\u672c\n\n\u5904\u7406\u8be2\u95ee\u65f6\uff0c\u53ea\u8981\u627e\u5230\u5bf9\u5e94\u7248\u672c\uff0c\u8be2\u95ee\u533a\u95f4\u548c\u5373\u53ef\n\n\u4e3b\u5e2d\u6811\uff1a\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log n)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(m \\log n)$\n\n\u6811\u5957\u6811\uff1a\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log m \\log n)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(m \\log n)$\n\n\u671f\u671b\u5f97\u5206\uff1a14\u5206\n\n\u7ed3\u5408\u5176\u5b83\u7b97\u6cd5\u53ef\u4ee5\u5f97\u66f4\u9ad8\u5f97\u5206\u6570\n\n## \u7b97\u6cd56\n\n\u524d\u9762\u7684\u6811\u5957\u6811\u505a\u6cd5\uff0c\u5982\u679c\u80fd\u652f\u6301\u4fee\u6539\uff0c\u5c31\u80fdAC\n\n\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\u7ef4\u62a4\u52a8\u6001\u5f00\u70b9\u6811\u5957\u6811\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4e0e$h$\u53d6max/min\u6807\u8bb0\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u548c\u6a21\u677f\u57fa\u672c\u4e00\u81f4\uff0c\u4f46\u9047\u5230\u672a\u5efa\u7684\u8282\u70b9\u9700\u8981\u7279\u6b8a\u5904\u7406\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u66b4\u529b\u5efa\u51fa\u6765\uff0c\u4e0d\u5f71\u54cd\u590d\u6742\u5ea6\uff09\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5148\u6309\u666e\u901a\u7ebf\u6bb5\u6811\u9012\u5f52\u5904\u7406\n\n\u9012\u5f52\u5230\u7684\u8282\u70b9\uff0c\u628a\u5b83\u7684\u5e73\u8861\u6811\u524a\u53bb\u4e00\u5757\uff0c\u5e76\u628a\u524a\u53bb\u7684\u4e00\u5757\u62cd\u6241\uff0c\u968f\u540e\u52a0\u4e0a\u6807\u8bb0\n\n\u5728\u56de\u53bb\u7684\u65f6\u5019\uff0c\u4e0a\u9762\u7684\u8282\u70b9\u4e5f\u5e94\u5220\u53bb\u5bf9\u5e94\u5185\u5bb9\n\n\u4e0b\u653e\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u4e5f\u662f\u628a\u5e73\u8861\u6811\u524a\u53bb\u4e00\u5757\uff0c\u4e0d\u8fc7\u4e0d\u7528\u5904\u7406\u4e0a\u8fb9\n\n\u590d\u6742\u5ea6\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5fc5\u987b\u5148\u88ab\u63d2\u5165\u624d\u80fd\u88ab\u5220\u9664\uff0c\u6240\u4ee5\u6c42\u51fa\u5e73\u8861\u6811\u4e2d\u8282\u70b9\u603b\u6570\u5373\u53ef\n\n\u4fee\u6539\u65f6\uff0c\u5982\u679c\u628a\u5e73\u8861\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u62c6\u5f00\uff0c\u4e5f\u5c31\u662f\uff0c\u6bcf\u6b21\u9012\u5f52\u5230\u4e00\u4e2a\u5b8c\u6574\u533a\u95f4\uff0c\u5c31\u4f1a\u4f7f\u5176\u4e0a\u9762\u6240\u6709\u8282\u70b9\u4e2d\u52a0\u5165\u4e00\u4e2a\u70b9\n\n\u8fd9\u6837\u8282\u70b9\u603b\u6570\u662f$O(\\log^2 n)$\u7684\uff0c\u800cpushdown\u6700\u5dee\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u80fd\u589e\u52a0\u8282\u70b9\u6570\uff0c\u53ea\u80fd\u628a\u4e00\u5806\u8282\u70b9\u7684\u6570\u6539\u53d8\n\n\u5220\u9664\u65f6\u6700\u591a\u5220\u6389$O(m\\log ^2 n)$\u4e2a\u8282\u70b9\n\n\u800c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u76f8\u540c\u6570\u5b57\u7684\u70b9\u5408\u5e76\uff0c\u964d\u4f4e\u6811\u9ad8\uff0c\u4f7f\u6bcf\u6b21\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a$O(\\log m)$\n\n\u4e00\u6b21pushdown\u64cd\u4f5c\u53d6\u51b3\u4e8e\u5e73\u8861\u6811\u7684\u6811\u9ad8\uff0c\u800c\u64cd\u4f5c\u6b21\u6570\u662f$O(m \\log n)$\u7684\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(m\\log m\\log^2n)$\n\n\u4f46\u662f\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u5f97\u590d\u6742\u5ea6\u8dd1\u4e0d\u6ee1\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\n\n\u8003\u8651\u6700\u591a\u5b58\u5728\u7684\u8282\u70b9\u6570\n\n\u5728\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u6d89\u53ca\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6700\u591a\u589e\u52a0\u4e00\u79cd\u6570\uff0c\u800c\u6bcf\u6b21\u6d89\u53ca\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6570\u662f$O(\\log n)$\u7684\uff0cpushdown\u4e0d\u4f1a\u589e\u52a0\u6d89\u53ca\u8282\u70b9\u7684\u6570\u5b57\u79cd\u6570\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(m\\log n)$\n\n\uff08\u5982\u679c\u8ba4\u4e3a\u590d\u6742\u5ea6\u5206\u6790\u6709\u95ee\u9898\uff0c\u8bf7\u79c1\u4fe1\u4f5c\u8005\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log m \\log^2n)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(m \\log n)$\n\n\u4e0d\u8fc7\u5e38\u6570\u5f88\u5927\n\n\u671f\u671b\u5f97\u5206\uff1a100\u5206\n\n\u5b9e\u9645\u5f97\u5206\u53d6\u51b3\u4e8e\u5e38\u6570\u548c\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5\uff0c\u5982\u679c~~\u5199\u5f97\u4e11~~\u53ef\u80fd\u4f1a\u5361\u5e38\u6216\u8005MLE\n\nstd\u6700\u5927\u7684\u70b9\u7528\u65f62s\u591a\u4e00\u70b9\uff0c\u7a7a\u95f4\u7ea6270MB\n\n\u6ce8\uff1alxl\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e24\u4e2alog\uff0c\u7136\u800c\u6211\u4e0d\u4f1a\u5206\u6790\n\n```\ni_m_a_ 2019-08-15 08:57\ndalao\u80fd\u5e2e\u6211\u5206\u6790\u4e00\u4e0b\u6211\u90a3\u9053\u9898\u4e2d\u6811\u5957\u6811\u7684\u590d\u6742\u5ea6\u5417/kel\n\nnoip \u6bd2\u7624 2019-08-15 11:30\n\u663e\u7136\u662fnlog^2n\u5427\uff0c\u6211\u8bb0\u5f97\u662fjry\u8bba\u6587\u91cc\u9762\u5199\u8fc7\uff1f\n\nnoip \u6bd2\u7624 2019-08-15 11:30\n*\u96c6\u8bad\u961f\u8bba\u6587\n```\n\n## \u7b97\u6cd57\n\n\u9488\u5bf9#4\n\n\u8fd9\u4e2a\u70b9$n$\u5f88\u5927\uff0c\u4f46\u662f$m$\u5f88\u5c0f\n\n\u8003\u8651\u628a\u4e00\u6bb5\u533a\u95f4\u538b\u7f29\n\n\u5bf9\u4e8e\u64cd\u4f5c\uff0c\u4f4d\u4e8e\u8fb9\u754c\u4e0a\u7684\u533a\u95f4\u62c6\u6210\u4e24\u7aef\uff0c\u4e2d\u95f4\u90e8\u5206\u76f4\u63a5\u4fee\u6539\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u6c42\u51fa\u5728\u533a\u95f4\u5185\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u5e94\u8be5\u52a0\u5230\u7b54\u6848\u91cc\n\n\u4e00\u4e2a\u4f18\u5316\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0c\u5c06\u76f8\u90bb\u4e14\u6570\u5b57\u76f8\u540c\u7684\u533a\u95f4\u5408\u5e76\n\n\u8fd9\u6837y\u4f18\u5316\u540e\uff0c\u662f\u53ef\u4ee5\u8fc7\u7eaf\u968f\u673a\u6570\u636e\u7684\n\n\u4f46\u662f\uff0c\u6700\u540e\u4e00\u884c\u7684\u5b57\u544a\u8bc9\u6211\u4eec\uff0c~~\u66b4\u529b\u4e0d\u80fd\u51fa\u5947\u8ff9~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m^2)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(m)$\n\n\u671f\u671b\u5f97\u5206\uff1a14\u5206\n\n## \u7b97\u6cd58\n\n\u8003\u8651\u7528\u4f18\u96c5\u7684\u66b4\u529b\uff1a\u5757\u72b6\u94fe\u8868\n\n\u5757\u72b6\u94fe\u8868\u53ef\u4ee5$O(\\sqrt n)$\u7ef4\u62a4\u5f88\u591a\u533a\u95f4\u64cd\u4f5c\uff0c\u800c\u4e14\u652f\u6301\u63d2\u5165\n\n\u9996\u5148\uff0c\u6bcf\u4e2a\u5757\u7ef4\u62a4\u5e8f\u5217\uff0c\u4ee5\u53ca\u5e8f\u5217\u88ab\u6392\u5e8f\u7684\u7ed3\u679c\n\n\u5bf9\u4e8e\u533a\u95f4\u8be2\u95ee\uff0c\u8fb9\u89d2\u81ea\u7136\u662f\u66b4\u529b\uff0c\u4e2d\u95f4\u90e8\u5206\u53ef\u4ee5\u4e8c\u5206\n\n\u5bf9\u4e8e\u533a\u95f4\u64cd\u4f5c\uff0c\u8fb9\u89d2\u8fd8\u662f\u66b4\u529b\uff0c\u4e2d\u95f4\u76f4\u63a5\u6253\u6807\u8bb0\n\n\u8fb9\u89d2\u5904\u7406\u5b8c\u540e\uff0c\u9700\u8981\u91cd\u65b0\u6392\u5e8f\n\n\u9700\u8981\u4e0b\u653e\u6807\u8bb0\u65f6\uff0c\u76f4\u63a5\u66b4\u529b\u628a\u5e8f\u5217\u4ee5\u53ca\u6392\u5e8f\u7684\u7ed3\u679c\u4fee\u6539\u5373\u53ef\n\n\u6392\u5e8f\u65f6\uff0c\u7528\u57fa\u6570\u6392\u5e8f\uff0c\u7136\u540e\u628a\u5757\u7684\u5927\u5c0f\u8bbe\u4e3a${\\sqrt{n}}{\\log n}$\uff0c\u5c31\u53ef\u4ee5\u505a\u5230$O(n \\sqrt{n \\log n})$\n\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n \\sqrt{n} \\log n)$\u6216$O(n \\sqrt{n \\log n})$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(m)$\n\n\u5728\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u6811\u5957\u6811\u63a5\u8fd1\uff0c\u800c\u4e14\u5e38\u6570\u6bd4\u6811\u5957\u6811\u5c0f\uff0c\u6240\u4ee5\u8dd1\u5f97\u6bd4\u6811\u5957\u6811\u5feb\uff0cstd\u6700\u6162\u7684\u70b9\u4e0d\u52301s\uff0c\u540c\u65f6k\u7a7a\u95f4\u590d\u6742\u5ea6\u5c0f\uff0c\u4e5f\u6ca1\u6709MLE\u7684\u98ce\u9669\n\n~~\u6240\u4ee5\u4e8b\u5b9e\u662f\uff1a\u66b4\u529b\u53ef\u4ee5\u51fa\u5947\u8ff9~~\n\n\u671f\u671b\u5f97\u5206\uff1a100\u5206\n\n## \u5173\u4e8e$O(n \\sqrt{n \\log n})$\u5206\u6790\uff1a\n\n\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u5206\u5757\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u4e00\u5171\u6709$O(\\frac{\\sqrt{n}}{\\log n})$\u4e2a\u5757\n\n\u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u66b4\u529b\u5904\u7406\u4e24\u4e2a\u5757\uff0c\u7136\u540e\u5904\u7406$O(\\frac{\\sqrt{n}}{\\log n})$\u4e2a\u5b8c\u6574\u7684\u5757\n\n\u5bf9\u4e8e\u66b4\u529b\u90e8\u5206\uff0c\u8be2\u95ee\u3001\u64cd\u4f5c\u548c\u4e0b\u653e\u6807\u8bb0\u90fd\u662f\u5355\u6b21$O(1)$\u7684\uff0c\u56e0\u800c\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(\\frac{\\sqrt{n}}{\\log n})$\u7684\n\n\u5bf9\u4e8e\u6574\u5757\uff0c\u4e8c\u5206\u662f\u5355\u6b21$O(\\log n)$\uff0c\u6253\u6807\u8bb0\u662f$O(1)$\uff0c\u4e58\u4ee5\u5757\u7684\u4e2a\u6570\uff0c\u5c31\u80fd\u5f97\u5230\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O({\\sqrt{n}}{\\log n})$\n\n\u4e0a\u9762\u7684\u5206\u6790\u5e94\u8be5\u4e0d\u5b8c\u5168\u6b63\u786e\uff0c\u4e0d\u8fc7\u6700\u591a\u5dee\u4e00\u4e2a$O(\\log \\log n)$\n\n## \u5176\u5b83\n\n\u53ef\u80fd\u4e5f\u6709\u9488\u5bf9#7\u7684\u79bb\u7ebf\u505a\u6cd5\uff0c\u671f\u671b\u5f97\u520667\u5206\uff0c\u4e0d\u8fc7\u6211\u6ca1\u60f3\u51fa\u6765\n\n~~\u4e5f\u8bb8\u590d\u6742\u5ea6\u5206\u6790\u9519\u662f\u6811\u5957\u6811\u8dd1\u5f97\u6bd4\u9884\u60f3\u4e2d\u6162\u7684\u539f\u56e0~~\n\n~~lxl\u8bf4\u53ef\u4ee5\u5361\u5757\u72b6\u94fe\u8868\uff0c\u4e0d\u8fc7\u6211\u611f\u89c9\u96be\u5ea6\u5f88\u5927~~\n\n## \u4ee3\u7801\n\n\u7b97\u6cd56\u548c\u7b97\u6cd58\u90fd\u5f88\u96be\u5199\uff0c\u7ec6\u8282\u975e\u5e38\u591a\n\n\u4ee3\u7801\u5f88\u957f\uff0c\u800c\u4e14\u5f88\u4e71\uff0c\u57fa\u672c\u6ca1\u6cd5\u770b\uff0c\u4e0d\u8fc7\u8fd8\u662f\u53d1\u4e00\u4e0b\u5427\n\n~~\u7531\u4e8e\u51fa\u9898\u4eba\u5e76\u4e0d\u4f1a\u5199\u7b97\u6cd54\u7684\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6ca1\u6709\u76f8\u5e94\u4ee3\u7801~~\n\n\u7b97\u6cd56\uff1a\n\n```cpp\n#include<cstdio>\n#define gsz(x) (x?x->size:0)\nconst int Q=100007,logQ=20,logN=30;\nconst bool DEBUG=0;\nconst int INF=0x7fffffff;\nbool f=0;\nlong long read(){\n    long long n=0;char c=getchar();bool f=0;\n    while(c!='-'&&(c<'0'||c>'9'))c=getchar();\n    if(c=='-'){f=1;c=getchar();}\n    while(c>='0'&&c<='9'){n=n*10+c-'0';c=getchar();}\n    if(f)return -n;\n    else return n;\n}\nchar res[25];\nvoid write(long long num){\n    if(num==0){putchar('0');return;}\n    if(num<0){putchar('-');num=-num;}\n    int t=0;\n    while(num){res[t++]=num%10+'0';num/=10;}\n    while(t--)putchar(res[t]);\n}\nstruct range{\n\tint num,len;\n};\nrange list[Q*logQ*2];\nint scnt;\nint slen;\nnamespace FHQ{\n\tstruct node{\n\t\tint num,cnt,rand,size;\n\t\tnode *lcd,*rcd;\n\t\tvoid pushup(){\n\t\t\tsize=gsz(lcd)+cnt+gsz(rcd);\n\t\t\tcheck();\n\t\t}\n\t\tvoid cseq(){\n\t\t\tif(lcd)lcd->cseq();\n\t\t\tlist[scnt++]=(range){num,cnt};\n\t\t\tslen+=cnt;\n\t\t\tif(rcd)rcd->cseq();\n\t\t}\n\t\tvoid check(){\n\t\t\tif(this==lcd||this==rcd){\n\t\t\t\tthrow 1;\n\t\t\t}\n\t\t}\n\t};\n\tnamespace mem{\n\t\tint top;\n\t\tnode mem[Q*logN*4];\n\t\tnode *recy[Q*logN*4];\n\t\tint c;\n\t\tlong long seed=84512021546LL;\n\t\tint rand(){\n\t\t\treturn (int)(seed=seed*998244353+17);\n\t\t}\n\t\tnode* get(int num,int cnt){\n\t\t\tif(cnt==0)return 0;\n\t\t\tnode *cur;\n\t\t\tcur=mem+(++top);\n\t\t\tcur->num=num;\n\t\t\tcur->cnt=cnt;\n\t\t\tcur->size=cnt;\n\t\t\tcur->rand=rand();\n\t\t\tcur->lcd=cur->rcd=0;\n\t\t\treturn cur;\n\t\t}\n\t\tvoid del(node *tr){\n\t\t\tif(!tr)return;\n\t\t\tif(tr->lcd)del(tr->lcd);\n\t\t\tif(tr->rcd)del(tr->rcd);\n\t\t\trecy[c++]=tr;\n\t\t}\n\t}\n\tvoid split_num(node *tr,int num,node * &l,node * &r){\n\t\tif(tr==0){l=r=0;return;}\n\t\tif(tr->num<num){\n\t\t\tsplit_num(tr->rcd,num,tr->rcd,r);\n\t\t\tl=tr;\n\t\t\tl->pushup();\n\t\t}else{\n\t\t\tsplit_num(tr->lcd,num,l,tr->lcd);\n\t\t\tr=tr;\n\t\t\tr->pushup();\n\t\t}\n\t}\n\tnode *merge(node *l,node *r){\n\t\tif(l==0)return r;\n\t\tif(r==0)return l;\n\t\tif(l->rand>r->rand){\n\t\t\tl->rcd=merge(l->rcd,r);\n\t\t\tl->pushup();\n\t\t\treturn l;\n\t\t}else{\n\t\t\tr->lcd=merge(l,r->lcd);\n\t\t\tr->pushup();\n\t\t\treturn r;\n\t\t}\n\t}\n\tnode *insert(node *tr,int num,int cnt){\n\t\tif(cnt==0)return tr;\n\t\tnode *l,*m,*r;\n\t\tsplit_num(tr,num,l,r);\n\t\tsplit_num(r,num+1,m,r);\n\t\tif(m){m->cnt+=cnt;m->size+=cnt;}\n\t\telse m=mem::get(num,cnt);\n\t\treturn merge(l,merge(m,r));\n\t}\n\tnode *del(node *tr,int num,int cnt){\n\t\tif(cnt==0)return tr;\n\t\tnode *l,*m,*r;\n\t\tsplit_num(tr,num,l,r);\n\t\tsplit_num(r,num+1,m,r);\n\t\tif(m->cnt==cnt){\n\t\t\tmem::del(m);\n\t\t\treturn merge(l,r);\n\t\t}\n\t\telse{\n\t\t\tm->cnt-=cnt;\n\t\t\tm->size-=cnt;\n\t\t\treturn merge(l,merge(m,r));\n\t\t}\n\t}\n\tint qrank(node *tr,int num){\n\t\tint ans=0;\n\t\twhile(tr){\n\t\t\tif(tr->num<num){\n\t\t\t\tans+=gsz(tr->lcd)+tr->cnt;\n\t\t\t\ttr=tr->rcd;\n\t\t\t}else{\n\t\t\t\ttr=tr->lcd;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n\nnamespace seg{\n\tstruct node{\n\t\tint tmax,tmin;\n\t\tnode *lcd,*rcd;\n\t\tFHQ::node *tr;\n\t\tvoid pushdown(int ll,int rr);\n\t\tFHQ::node * smax(int num);\n\t\tFHQ::node * smin(int num);\n\t\tint qrank(int l,int r,int num,int ll,int rr){\n\t\t\tif(l<=ll&&rr<=r){\n\t\t\t\tif(tr){\n\t\t\t\t\treturn FHQ::qrank(tr,num);\n\t\t\t\t}else{\n\t\t\t\t\tif(tmax<num)return rr-ll+1;\n\t\t\t\t\telse return 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(l>rr||ll>r)return 0;\n\t\t\tpushdown(ll,rr);\n\t\t\tint ans=0;\n\t\t\tint mid=((ll+rr)>>1);\n\t\t\tans+=lcd->qrank(l,r,num,ll,mid);\n\t\t\tans+=rcd->qrank(l,r,num,mid+1,rr);\n\t\t\treturn ans;\n\t\t}\n\t\tvoid smax(int l,int r,int num,int ll,int rr){\n\t\t\tif(l<=ll&&rr<=r){\n\t\t\t\tif(tr){\n\t\t\t\t\tFHQ::node *t=smax(num);\n\t\t\t\t\tif(t){t->cseq();FHQ::mem::del(t);}\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tif(tmax>num){\n\t\t\t\t\t\t\n\t\t\t\t\t\tslen+=rr-ll+1;\n\t\t\t\t\t\tlist[scnt++]=(range){tmin,rr-ll+1};\n\t\t\t\t\t\ttmax=tmin=num;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(l>rr||ll>r)return;\n\t\t\tpushdown(ll,rr);\n\t\t\tint prcnt=scnt,prlen=slen;\n\t\t\tint mid=((ll+rr)>>1);\n\t\t\tlcd->smax(l,r,num,ll,mid);\n\t\t\trcd->smax(l,r,num,mid+1,rr);\n\t\t\tfor(;prcnt<scnt;prcnt++){\n\t\t\t\ttr=FHQ::del(tr,list[prcnt].num,list[prcnt].len);\n\t\t\t}\n\t\t\ttr=FHQ::insert(tr,num,slen-prlen);\n\t\t}\n\t\tvoid smin(int l,int r,int num,int ll,int rr){\n\t\t\tif(l<=ll&&rr<=r){\n\t\t\t\tif(tmin>=num)return;\n\t\t\t\tif(tr){\n\t\t\t\t\tFHQ::node *t=smin(num);\n\t\t\t\t\tif(t){t->cseq();FHQ::mem::del(t);}\n\t\t\t\t}else{\n\t\t\t\t\tslen+=rr-ll+1;\n\t\t\t\t\tlist[scnt++]=(range){tmin,rr-ll+1};\n\t\t\t\t\ttmax=tmin=num;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(l>rr||ll>r)return;\n\t\t\tpushdown(ll,rr);\n\t\t\tint prcnt=scnt,prlen=slen;\n\t\t\tint mid=((ll+rr)>>1);\n\t\t\tlcd->smin(l,r,num,ll,mid);\n\t\t\t\n\t\t\t\n\t\t\trcd->smin(l,r,num,mid+1,rr);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor(;prcnt<scnt;prcnt++){\n\t\t\t\ttr=FHQ::del(tr,list[prcnt].num,list[prcnt].len);\n\t\t\t}\n\t\t\ttr=FHQ::insert(tr,num,slen-prlen);\n\t\t}\n\t};\n\tnamespace mem{\n\t\tint top;\n\t\tnode mem[Q*logN*3];\n\t\tint c;\n\t\tnode *recy[Q*logN*3];\n\t\tnode *get(int num){\n\t\t\tnode *cur;\n\t\t\tif(c)cur=recy[--c];\n\t\t\telse cur=mem+(++top);\n\t\t\tcur->tmax=cur->tmin=num;\n\t\t\tcur->tr=0;\n\t\t\tcur->lcd=cur->rcd=0;\n\t\t\treturn cur;\n\t\t}\n\t\tvoid del(node *tr){\n\t\t\tif(tr->lcd)del(tr->lcd);\n\t\t\tif(tr->rcd)del(tr->rcd);\n\t\t\tif(tr->tr)FHQ::mem::del(tr->tr);\n\t\t\trecy[c++]=tr;\n\t\t}\n\t}\n\tFHQ::node * node::smin(int num){\n\t\tif(tmin>=num)return 0;\n\t\ttmin=num;\n\t\tif(num>=tmax){\n\t\t\tFHQ::node *r=tr;\n\t\t\ttmax=tmin=num;\n\t\t\tFHQ::mem::del(tr);\n\t\t\ttr=0;\n\t\t\tif(lcd)mem::del(lcd);\n\t\t\tif(rcd)mem::del(rcd);\n\t\t\tlcd=rcd=0;\n\t\t\treturn r;\n\t\t}\n\t\tFHQ::node *l,*r;\n\t\tFHQ::split_num(tr,num+1,l,r);\n\t\ttr=FHQ::merge(FHQ::mem::get(num,gsz(l)),r);\n\t\treturn l;\n\t}\n\tFHQ::node * node::smax(int num){\n\t\tif(tmax<=num)return 0;\n\t\ttmax=num;\n\t\tif(num<=tmin){\n\t\t\tFHQ::node *r=tr;\n\t\t\ttmax=tmin=num;\n\t\t\tFHQ::mem::del(tr);\n\t\t\ttr=0;\n\t\t\tif(lcd)mem::del(lcd);\n\t\t\tif(rcd)mem::del(rcd);\n\t\t\tlcd=rcd=0;\n\t\t\treturn r;\n\t\t}\n\t\tFHQ::node *l,*r;\n\t\tFHQ::split_num(tr,num,l,r);\n\t\ttr=FHQ::merge(l,FHQ::mem::get(num,gsz(r)));\n\t\treturn r;\n\t}\n\tvoid node::pushdown(int ll,int rr){\n\t\tif(ll==16&&rr==20){\n\t\t\tll++;\n\t\t\tll--;\n\t\t}\n\t\tif(!tr){\n\t\t\tlcd=mem::get(tmax);\n\t\t\trcd=mem::get(tmax);\n\t\t\ttr=FHQ::mem::get(tmax,rr-ll+1);\n\t\t\ttmax=INF;\n\t\t\ttmin=0;\n\t\t\treturn;\n\t\t}\n\t\tif(tmax!=INF){\n\t\t\tlcd->smax(tmax);\n\t\t\trcd->smax(tmax);\n\t\t\ttmax=INF;\n\t\t}\n\t\tif(tmin!=0){\n\t\t\tlcd->smin(tmin);\n\t\t\trcd->smin(tmin);\n\t\t\ttmin=0;\n\t\t}\n\t}\n}\nseg::node *root;\nint lastans,k,opt,l,r,num,n,m,v;\nint main(){\n\tn=read();m=read();k=read();\n\troot=seg::mem::get(0);\n\tfor(int t=1;t<=m;t++){\n\t\tif(t==43){\n\t\t\tt=t+1;\n\t\t\tt--;\n\t\t}\n\t\tscnt=slen=0;\n\t\topt=read();\n\t\tswitch(opt){\n\t\t\tcase 1:\n\t\t\t\tl=(read()^lastans*k);\n\t\t\t\tr=(read()^lastans*k);\n\t\t\t\tnum=(read()^lastans*k);\n\t\t\t\tlastans=root->qrank(l,r,num,1,n);\n\t\t\t\twrite(lastans);putchar('\\n');\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tl=(read()^lastans*k);\n\t\t\t\tr=(read()^lastans*k);\n\t\t\t\tnum=(read()^lastans*k);\n\t\t\t\troot->smax(l,r,num,1,n);\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tl=(read()^lastans*k);\n\t\t\t\tr=(read()^lastans*k);\n\t\t\t\tnum=(read()^lastans*k);\n\t\t\t\troot->smin(l,r,num,1,n);\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\treturn 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n\u7b97\u6cd58\uff1a\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nconst int N=1000007,sqrtN=2000;\nbool f=0;\nlong long read(){\n    long long n=0;char c=getchar();bool f=0;\n    while(c!='-'&&(c<'0'||c>'9'))c=getchar();\n    if(c=='-'){f=1;c=getchar();}\n    while(c>='0'&&c<='9'){n=n*10+c-'0';c=getchar();}\n    if(f)return -n;\n    else return n;\n}\nchar res[25];\nvoid write(long long num){\n    if(num==0){putchar('0');return;}\n    if(num<0){putchar('-');num=-num;}\n    int t=0;\n    while(num){res[t++]=num%10+'0';num/=10;}\n    while(t--)putchar(res[t]);\n}\nstruct range{\n    int len,num;\n    void put(){\n        for(int i=0;i<len;i++){\n            write(num);\n            putchar(' ');\n        }\n    }\n};\nint cntl[256];\nrange swp[sqrtN*4];int cnt;\nvoid sort(range *st,range *en){\n\tint n=en-st;\n\trange *list=st;\n\t\n\tfor(int i=0;i<256;i++)cntl[i]=0;\n\tfor(int i=0;i<n;i++)cntl[list[i].num&0xff]++;\n\tfor(int i=1;i<256;i++)cntl[i]+=cntl[i-1];\n\tfor(int i=n-1;i>=0;i--)swp[--cntl[list[i].num&0xff]]=list[i];\n\t\n\tfor(int i=0;i<256;i++)cntl[i]=0;\n\tfor(int i=0;i<n;i++)cntl[(swp[i].num>>8)&0xff]++;\n\tfor(int i=1;i<256;i++)cntl[i]+=cntl[i-1];\n\tfor(int i=n-1;i>=0;i--)list[--cntl[(swp[i].num>>8)&0xff]]=swp[i];\n\t\n\tfor(int i=0;i<256;i++)cntl[i]=0;\n\tfor(int i=0;i<n;i++)cntl[(list[i].num>>16)&0xff]++;\n\tfor(int i=1;i<256;i++)cntl[i]+=cntl[i-1];\n\tfor(int i=n-1;i>=0;i--)swp[--cntl[(list[i].num>>16)&0xff]]=list[i];\n\t\n\tfor(int i=0;i<256;i++)cntl[i]=0;\n\tfor(int i=0;i<n;i++)cntl[(swp[i].num>>24)&0xff]++;\n\tfor(int i=1;i<256;i++)cntl[i]+=cntl[i-1];\n\tfor(int i=n-1;i>=0;i--)list[--cntl[(swp[i].num>>24)&0xff]]=swp[i];\n}\nbool cmp(range a,range b){\n    return a.num<b.num;\n}\n\nstruct block;\nint deflen;\nint slen; \nstruct block{\n    block* nxt;\n    int len;\n    int size;\n    int tmax,tmin;\n    range list[sqrtN*2],sorted[sqrtN*2];\n    \n    int sum[sqrtN*2];\n    \n    void build(){\n        size=0;\n        tmax=0x7fffffff;\n        tmin=0;\n        for(int i=0;i<len;i++){\n            sorted[i]=list[i];\n        }\n        sort(sorted,sorted+len);\n        sum[0]=0;\n        for(int i=1;i<=len;i++){\n            sum[i]=sum[i-1]+sorted[i-1].len;\n        }\n        size=sum[len];\n    }\n    void pushdown(){\n        int i=0;\n        for(;i<len;i++){\n            if(list[i].num<tmin)list[i].num=tmin;\n            if(list[i].num>tmax)list[i].num=tmax;\n        }\n        i=0;\n        for(;i<len;i++){\n            if(sorted[i].num<tmin)sorted[i].num=tmin;\n            if(sorted[i].num>tmax)sorted[i].num=tmax;\n        }\n        tmax=0x7fffffff;\n        tmin=0;\n    }\n    void rebuild();\n    int qrank(int num){\n        if(num>tmax)return size;\n        if(num<=tmin)return 0;\n        int l=0,r=len,mid;\n        while(l!=r){\n            mid=((l+r)>>1);\n            if(sorted[mid].num<num)l=mid+1;\n            else r=mid;\n        }\n        return sum[l];\n    }\n    int qrank(int l,int r,int num){\n        pushdown();\n        if(num>tmax)return r-l+1;\n        if(num<=tmin)return 0;\n        if(l<0)l=0;\n        if(r>=size)r=size-1;\n        int ans=0,pre=0,i;\n        for(i=0;;i++){\n            if(pre+list[i].len-1>=l)break;\n            pre+=list[i].len;\n        }\n        if(pre+list[i].len-1>=r){\n            if(list[i].num<num)ans=r-l+1;\n            else ans=0;\n        }else{\n            if(list[i].num<num)ans+=(pre+list[i].len)-l;\n            pre+=list[i].len;\n            i++;\n            for(;;i++){\n                if(pre+list[i].len-1>=r)break;\n                if(list[i].num<num)ans+=list[i].len;\n                pre+=list[i].len;\n            }\n            if(list[i].num<num)ans+=r-pre+1;\n        }\n        return ans;\n    }\n    void smax(int num){\n        if(num<tmax){\n            tmax=num;\n            if(num<tmin){\n                tmin=num;\n            }\n        }\n    }\n    bool smax(int l,int r,int num){\n        slen-=len;\n        pushdown();\n        if(l<0)l=0;\n        if(r>=size)r=size-1;\n        int i=0,pre=0,j=0;\n        for(;;i++){\n            if(list[i].len==0)continue;\n            if(pre+list[i].len-1>=l)break;\n            swp[j++]=list[i];\n            pre+=list[i].len;\n        }\n        if(pre+list[i].len-1>=r){\n            if(list[i].num>num){\n                int ll=pre,rr=pre+list[i].len-1;\n                if(ll!=l)swp[j++]=(range){l-ll,list[i].num};\n                swp[j++]=(range){r-l+1,num};\n                if(rr!=r)swp[j++]=(range){rr-r,list[i].num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                pre+=list[i].len;\n                swp[j++]=list[i++];\n            }\n        }else{\n            if(list[i].num>num){\n                int ll=pre,rr=pre+list[i].len-1;\n                if(ll!=l)swp[j++]=(range){l-ll,list[i].num};\n                swp[j++]=(range){rr-l+1,num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                pre+=list[i].len;\n                swp[j++]=list[i++];\n            }\n            for(;;i++){\n                if(list[i].len==0)continue;\n                if(pre+list[i].len-1>=r)break;\n                if(list[i].num>num){\n                    swp[j++]=(range){list[i].len,num};\n                }else{\n                    swp[j++]=list[i];\n                }\n                pre+=list[i].len;\n            }\n            if(list[i].num>num){\n                int ll=pre,rr=pre+list[i].len-1;\n                swp[j++]=(range){r-ll+1,num};\n                if(ll!=l)swp[j++]=(range){rr-r,list[i].num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                pre+=list[i].len;\n                swp[j++]=list[i++];\n            }\n        }\n        for(;i<len;i++){\n            if(list[i].len==0)continue;\n            swp[j++]=list[i];\n            pre+=list[i].len;\n        }\n        \n        cnt=j;\n        if(j!=1&&j>=deflen){\n            rebuild();\n            slen+=len;\n            return 1;\n        }else{\n            len=j;\n            for(i=0;i<j;i++){\n                list[i]=swp[i];\n            }\n            build();\n            slen+=len;\n            return 0;\n        }\n        \n    }\n    void smin(int num){\n        if(num>tmin){\n            tmin=num;\n            if(num>tmax){\n                tmax=num;\n            }\n        }\n    }\n    bool smin(int l,int r,int num){\n        slen-=len;\n        pushdown();\n        if(l<0)l=0;\n        if(r>=size)r=size-1;\n        int i=0,pre=0,j=0;\n        for(;;i++){\n            if(list[i].len==0)continue;\n            if(pre+list[i].len-1>=l)break;\n            swp[j++]=list[i];\n            pre+=list[i].len;\n        }\n        if(pre+list[i].len-1>=r){\n            if(list[i].num<num){\n                int ll=pre,rr=pre+list[i].len-1;\n                if(ll!=l)swp[j++]=(range){l-ll,list[i].num};\n                swp[j++]=(range){r-l+1,num};\n                if(rr!=r)swp[j++]=(range){rr-r,list[i].num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                swp[j++]=list[i++];\n            }\n        }else{\n            if(list[i].num<num){\n                int ll=pre,rr=pre+list[i].len-1;\n                if(ll!=l)swp[j++]=(range){l-ll,list[i].num};\n                swp[j++]=(range){rr-l+1,num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                pre+=list[i].len;\n                swp[j++]=list[i++];\n            }\n            for(;;i++){\n                if(list[i].len==0)continue;\n                if(pre+list[i].len-1>=r)break;\n                if(list[i].num<num){\n                    swp[j++]=(range){list[i].len,num};\n                }else{\n                    swp[j++]=list[i];\n                }\n                pre+=list[i].len;\n            }\n            if(list[i].num<num){\n                int ll=pre,rr=pre+list[i].len-1;\n                swp[j++]=(range){r-ll+1,num};\n                if(ll!=l)swp[j++]=(range){rr-r,list[i].num};\n                pre+=list[i].len;\n                i++;\n            }else{\n                swp[j++]=list[i++];\n            }\n        }\n        for(;i<len;i++){\n            if(list[i].len==0)continue;\n            swp[j++]=list[i];\n            pre+=list[i].len;\n        }\n        \n        cnt=j;\n        if(j!=1&&j>=deflen){\n            rebuild();\n            slen+=len;\n            return 1;\n        }else{\n            len=j;\n            for(i=0;i<j;i++){\n                list[i]=swp[i];\n            }\n            build();\n            slen+=len;\n            return 0;\n        }\n    }\n    void clr(int num,int _len){\n        slen-=len;\n        list[0]=(range){_len,num};\n        sorted[0]=(range){_len,num};\n        sum[0]=0;\n        sum[1]=_len;\n        len=1;\n        size=_len;\n        tmax=0x7fffffff;\n        tmin=0;\n        slen+=len;\n    }\n    void chklen(int pre,int sum){\n        for(int i=0;i<len;i++){\n            pre+=list[i].len;\n        }\n        if(nxt)nxt->chklen(pre,sum);\n        else{\n            if(pre!=sum){\n                throw 1;\n            }\n        }\n    } \n};\nnamespace mem{\n    block mem[sqrtN*3];\n    int top;\n    block* recy[sqrtN*3];\n    int rc;\n    block* get(){\n        if(rc){\n            return recy[--rc];\n        }else{\n            return mem+(top++);\n        }\n    }\n    void del(block* t){\n        recy[rc++]=t;\n    }\n    \n}\nvoid block::rebuild(){\n    if(cnt==1)return;\n    block* nx1=mem::get();\n    int m=(cnt>>1);\n    for(int i=0;i<m;i++)list[i]=swp[i];\n    for(int i=m,j=0;i<cnt;i++,j++)nx1->list[j]=swp[i];\n    nx1->len=cnt-m;\n    len=m;\n    build();\n    nx1->build();\n    nx1->nxt=nxt;\n    nxt=nx1;\n    if((sum[1]!=sorted[0].len)||(nxt->sum[1]!=nxt->sorted[0].len)){\n    \tthrow 1;\n    }\n}\nblock *st;\nbool jmp;\nint lastans,k,opt,l,r,num,n,m,v;\nint main(){\n    n=read();m=read();k=read();\n    \n    deflen=sqrt(m*log(m+4)/35/log(2))+1;\n    slen=1;\n    \n    st=mem::get();\n    st->list[0]=(range){n,0};\n    st->len=1;\n    st->build();\n    \n    for(int t=1;t<=m;t++){\n        opt=read();\n        block *cur=st;\n        int pre=0;\n        switch(opt){\n            case 1:\n                l=(read()^lastans*k)-1;\n                r=(read()^lastans*k)-1;\n                num=(read()^lastans*k);\n                lastans=0;\n                while(1){\n                    if(pre+cur->size-1>=l)break;\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                }\n                if(pre+cur->size-1>=r){\n                    lastans=cur->qrank(l-pre,r-pre,num);\n                }else{\n                    lastans+=cur->qrank(l-pre,cur->size-1,num);\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                    while(1){\n                        if(pre+cur->size-1>=r)break;\n                        lastans+=cur->qrank(num);\n                        pre+=cur->size;\n                        cur=cur->nxt;\n                    }\n                    lastans+=cur->qrank(0,r-pre,num);\n                }\n                write(lastans);putchar('\\n');\n                \n                break;\n            case 2:\n                l=(read()^lastans*k)-1;\n                r=(read()^lastans*k)-1;\n                num=(read()^lastans*k);\n                \n                while(1){\n                    if(pre+cur->size-1>=l)break;\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                }\n                if(pre+cur->size-1>=r){\n                    jmp=cur->smax(l-pre,r-pre,num);\n                    if(jmp){pre+=cur->size;cur=cur->nxt;}\n                }else{\n                    jmp=cur->smax(l-pre,cur->size-1,num);\n                    if(jmp){pre+=cur->size;cur=cur->nxt;}\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                    \n                    while(1){\n                        if(pre+cur->size-1>=r)break;\n                        cur->smax(num);\n                        pre+=cur->size;\n                        cur=cur->nxt;\n                    }\n                    cur->smax(0,r-pre,num);\n                }\n                \n                break;\n            case 3:\n                l=(read()^lastans*k)-1;\n                r=(read()^lastans*k)-1;\n                num=(read()^lastans*k);\n                \n                while(1){\n                    if(pre+cur->size-1>=l)break;\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                }\n                if(pre+cur->size-1>=r){\n                    jmp=cur->smin(l-pre,r-pre,num);\n                    if(jmp){pre+=cur->size;cur=cur->nxt;}\n                }else{\n                    jmp=cur->smin(l-pre,cur->size-1,num);\n                    if(jmp){pre+=cur->size;cur=cur->nxt;}\n                    pre+=cur->size;\n                    cur=cur->nxt;\n                    \n                    while(1){\n                        if(pre+cur->size-1>=r)break;\n                        cur->smin(num);\n                        pre+=cur->size;\n                        cur=cur->nxt;\n                    }\n                    cur->smin(0,r-pre,num);\n                }\n                \n                break;\n            case 4:\n                return 1;\n                break;\n        }\n        f=0;\n    }\n}\n```\n~~\u4ee3\u7801\u957f\u5ea6\u582a\u6bd4\u732a\u56fd\u6740~~",
        "postTime": 1565704724,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u51b3\u6218-\u9898\u89e3"
    }
]