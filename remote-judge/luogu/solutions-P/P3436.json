[
    {
        "content": "\t\t\t\t\u2014\u2014\u697c\u4e0a\u67d0\u7bc7\u9898\u89e3\u8c8c\u4f3c\u6709\u70b9\u95ee\u9898\uff1f\n\n\n\u73b0\u5728\u6211\u4eec\u6765\u89e3\u51b3\u8fd9\u4e2a~~\u4f5c\u6b7b\u7684\u8001~~\u6559\u6388\u7684\u95ee\u9898\u5427\uff01\n--\n\n\n\u9996\u5148\u8fd9\u9053\u9898\u505a\u6cd5\u5c31\u662f\u6bd4\u8f83\u5e38\u89c4\u7684 tarjan \u7f29\u70b9 + topo \u4f20\u9012\u95ed\u5305\uff0c\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u662f\uff1a\n\nn\u662f\u6559\u5b66\u697c\uff08\u51fa\u53d1\u70b9\uff09\uff0c\u662f\u4e0d\u80fd\u7b97\u8fdb\u516c\u5bd3\u91cc\u9762\u7684\uff0c\u800c\u5982\u679c\u6559\u5b66\u697c\u6709\u81ea\u73af\u7684\u8bdd\uff0c\u90a3\u4e48\u6309\u7167\u697c\u4e0a\u67d0\u4f4d\u5927\u4f6c\u7684\u7a0b\u5e8f\u662f\u4f1a\u8f93\u51fan\u7684\uff01\u800c\u4e14res\u7684\u7b54\u6848\u8fd8\u4f1a\u591a1\n\n\n\u90a3\u4e48\u591a\u7684\u7ec6\u8282\u5c31\u5728\u4ee3\u7801\u91cc\u9762\u8bb2\u597d\u4e86\n\n# code\n------------\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long LL;\nusing namespace std;\nconst int M=1100000;\ninline int read()\n{\n\tint x=0; char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x;\n}\nint n,m,tim,top,pat;\nint part,ans,res;\nint has[M],d[M],f[M];\n//has--\u8be5\u8fde\u901a\u5feb\u4e2d\u7684\u8282\u70b9\u6570  \uff1bd--\u8be5\u8fde\u901a\u5feb\u7684\u5165\u5ea6\n//f--\u8be5\u8fde\u901a\u5feb\u5230\u8fbe\u8d77\u70b9\uff08\u6559\u5b66\u697c\uff09\u7684\u9053\u8def\u6570\u91cf\uff1b\nint dfn[M],low[M],blg[M]; //tarjan\u91cd\u8981\u7528\u7684\u4e1c\u897f\nint last[M],head[M]; //last\u5728\u4e8c\u6b21\u6784\u56fe\u7684\u65f6\u5019\u7528\nbool is[M];  //\u8bb0\u5f55\u8be5\u8fde\u901a\u5757\u662f\u5426\u662f\u6709\u73af\u7684\u8054\u901a\u5757\nstack<int> stk;\nstruct edge { int v,next; }e[M],g[M]; \n\nvoid add(int u,int v) { e[pat].next=head[u]; e[pat].v=v; head[u]=pat++; } //\u4e00\u6b21\u6784\u56fe\u7684\u65f6\u5019\u7528\nvoid add2(int u,int v) { g[pat].next=last[u]; g[pat].v=v; last[u]=pat++; } //\u4e8c\u6b21\u6784\u56fe\u7684\u65f6\u5019\u7528\nvoid tarjan(int u)\n{\n\tbool flag=false; //\u8bb0\u5f55\u662f\u5426\u6709\u81ea\u73af\n\tdfn[u]=low[u]=++tim;\n\tstk.push(u);\n\tfor(int i=head[u];i!=-1;i=e[i].next)\n\t{\n\t\tint v=e[i].v; if(u==v) flag=true; //\u81ea\u73af\u7684\u5224\u65ad\n\t\tif(!dfn[v]) tarjan(v),low[u]=min(low[u] , low[v]);\n\t\telse if(!blg[v]) low[u]=min(low[u] , dfn[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tint j=0; ++part;\n\t\tif(flag || stk.top()!=u) is[part]=true; //\u5224\u65ad\u662f\u5426\u6709\u73af\uff08\u6216\u8005\u81ea\u73af\uff09\uff0c\u6709\u7684\u8bdd\u90a3\u4e48\u51fa\u53d1\u70b9\u5230\u8be5\u8054\u901a\u5757\u540e\u5c31\u6709\u65e0\u6570\u6761\u8def\u597d\u8d70\u4e86\n\t\tdo{\n\t\t\tj=stk.top();stk.pop();\n\t\t\tblg[j]=part;\n\t\t\t++has[part];\n\t\t}while(j!=u);\n\t}\n}\n\nvoid topo()\n{\n\tqueue<int> Q; f[blg[n]]=1;\n\tfor(int i=1;i<=part;++i) if(!d[i]) Q.push(i);\n\twhile(!Q.empty()) //\u628a\u90a3\u4e9b\u6ca1\u6709\u5165\u5ea6\u7684\u70b9\uff08\u9664\u4e86\u51fa\u53d1\u70b9\uff09\u5f39\u51fa\uff0c\u4e8b\u5b9e\u4e0a\u4e0d\u5f39\u4e5f\u6ca1\u4e8b\u513f\uff01\n\t{\n\t\tint now=Q.front(); Q.pop();\n\t\tif(now==blg[n]) continue;\n\t\tfor(int i=last[now];i!=-1;i=g[i].next)\n\t\t{ --d[g[i].v]; if(!d[g[i].v]) Q.push(g[i].v); }\n\t}\n\tQ.push(blg[n]); //\u65e0\u8bba\u5982\u4f55\u8981\u628a\u8d77\u70b9\u585e\u56de\u53bb\n\n\twhile(!Q.empty()) //\u7136\u540e\u4e00\u76f4\u62d3\u6251\u5c31ok\u4e86\n\t{\n\t\tint now=Q.front(); Q.pop();\n\t\tif(is[now] && f[now]) f[now]=36501; //\u6709\u73af\u5c31\u7ed9\u6700\u5927\u503c\n\t\tfor(int i=last[now];i!=-1;i=g[i].next)\n\t\t{\n\t\t\tf[g[i].v]=min(f[g[i].v]+f[now] , 36501);//\u6700\u5927\u4e3a36501\n\t\t\t--d[g[i].v]; if(!d[g[i].v]) Q.push(g[i].v);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tmemset(head , -1 , sizeof(head));\n\tmemset(last , -1 , sizeof(last));\n\tn=read(); m=read(); ++n;\n\tfor(int i=0;i<m;++i) //\u53cd\u7740\u52a0\u8fb9\uff0c\u7b49\u4e0b\u64cd\u4f5c\u4f1a\u65b9\u4fbf\u5f88\u591a\n\t\t{ int u=read(),v=read(); add(v,u); } pat=0;\n\t\n\tfor(int i=1;i<=n;++i)  //tarjan\u7f29\u70b9 \n\t\tif(!dfn[i]) tarjan(i);\n\t\n\tfor(int i=1;i<=n;++i)  //\u91cd\u6784\u56fe \n\tfor(int j=head[i];j!=-1;j=e[j].next)\n\t\tif(blg[i]!=blg[e[j].v]) add2(blg[i] , blg[e[j].v]),++d[blg[e[j].v]];\n\ttopo(); for(int i=1;i<=part;++i) ans=max(ans , f[i]);\n    //\u62d3\u6251\u4e00\u4e0b\u540e\u627e\u5230\u8d77\u70b9\u9053\u8def\u6570\u6700\u5927\u7684\u70b9\n\tif(ans==36501) printf(\"zawsze\\n\");\n\telse printf(\"%d\\n\",ans); //\u8fd9\u90fd\u662f\u6309\u9898\u76ee\u8bb2\u7684\u6765\u505a\u4e86\n\tif(ans==f[blg[n]]) --res; //\u632a\uff0c\u8fd9\u91cc\u5c31\u662f\u533a\u522b\uff0c\u7b49\u4f1a\u513f\u8bb2\n\tfor(int i=1;i<=part;++i)\n\t\tif(ans==f[i]) res+=has[i];\n\tprintf(\"%d\\n\",res);\n\tfor(int i=1;i<n;++i) //\u8fd9\u91cc\u4e5f\u662f\u533a\u522b\u6ef4~~~\n\t\tif(ans==f[blg[i]]) printf(\"%d \",i);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n----\n",
        "postTime": 1522816827,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3436 \u3010[POI2006]PRO-Professor Szu\u3011"
    },
    {
        "content": "> [P3436 [POI2006]PRO-Professor Szu](https://www.luogu.com.cn/problem/P3436)\n\n\u9996\u5148\uff0c\u5bb9\u6613\u53d1\u73b0\u82e5\u4e00\u4e2a\u5927\u5c0f\u5927\u4e8e $1$ \u7684 SCC \u6216\u81ea\u73af\uff08\u4e0b\u79f0\u4e3a\u4e0d\u5408\u6cd5\u7ed3\u6784\uff09\u80fd\u591f\u5230\u8fbe\u6559\u5b66\u697c\uff0c\u5219\u8be5\u4e0d\u5408\u6cd5\u7ed3\u6784\u5185\u90e8\u6bcf\u4e2a\u70b9\u5230\u6559\u5b66\u697c\u7684\u8def\u5f84\u6570\u91cf\u90fd\u662f\u65e0\u7a77\u5927\u3002\u56e0\u6b64 SCC \u7f29\u70b9 + **\u5efa\u53cd\u56fe** \u62d3\u6251\u6392\u5e8f\uff0c\u4e0d\u5408\u6cd5\u7ed3\u6784\u4e0d\u80fd\u5165\u961f\u3002\u62d3\u6251\u6392\u5e8f\u540c\u65f6\u8bb0\u5f55\u8def\u5f84\u6570 $f_i$ \u8868\u793a\u4ece $i$ \u5230 $n+1$ \u7684\u8def\u5f84\u6570\u91cf\u3002\u56e0\u4e3a\u4e0d\u80fd\u53d6\u6a21\uff0c\u6240\u4ee5\u8981\u5bf9 $36501$ \u53d6 $\\min$\u3002\n\n\u4f46\u9898\u76ee\u6ca1\u6709\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u90fd\u80fd\u5230\u6559\u5b66\u697c\uff08\u9898\u9762\u6709\u8bef\uff09\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5c06\u53cd\u56fe\u4e0a\u5165\u5ea6\u4e3a $0$ \u7684\u975e\u6559\u5b66\u697c\u70b9\u5165\u961f\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u3002\u6ce8\u610f\u6b64\u65f6\u4e0d\u5408\u6cd5\u7ed3\u6784\u53ef\u4ee5\u5165\u961f\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u5230\u8fbe\u6559\u5b66\u697c\u7684\u8def\u5f84\u3002\n\n\u6700\u540e\uff0c\u82e5\u51fa\u73b0\u6ca1\u6709\u5165\u961f\u7684\u70b9\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u80fd\u591f\u5230\u8fbe\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7ed3\u6784\uff0c\u56e0\u6b64\u8def\u5f84\u6570\u540c\u6837\u4e3a\u65e0\u7a77\u5927\u3002\u6b64\u5916\uff0c\u82e5 $f_i>36500$ \u4e5f\u4e0d\u7b26\u5408\u9898\u610f\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n- \u5982\u679c $n + 1$ \u6240\u5728 SCC \u662f\u4e0d\u5408\u6cd5\u7ed3\u6784\uff0c\u90a3\u4e48\u4e0d\u80fd\u5165\u961f\u3002\n- \u4f7f\u7528 `vector` \u5b58\u56fe\u4f1a MLE\uff0c\u539f\u9898\u7a7a\u95f4\u9650\u5236 64MB\u3002\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 5;\nint n, m, ed, ban[N], deg[N], f[N];\nint dn, dfn[N], low[N], cn, col[N], top, stc[N], vis[N];\nstruct linklist {\n  int cnt, hd[N], nxt[N], to[N];\n  void add(int u, int v) {nxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v;}\n} e, g;\nvoid tarjan(int id) {\n  dfn[id] = low[id] = ++dn, stc[++top] = id, vis[id] = 1; // 0 -> 1\n  for(int _ = e.hd[id]; _; _ = e.nxt[_]) {\n    int it = e.to[_];\n    if(!dfn[it]) tarjan(it), low[id] = min(low[id], low[it]);\n    else if(vis[it]) low[id] = min(low[id], dfn[it]);\n  }\n  if(low[id] == dfn[id]) {\n    col[id] = ++cn, ban[cn] = stc[top] != id;\n    while(stc[top] != id) col[stc[top]] = cn, vis[stc[top--]] = 0; // id -> cn\n    vis[id] = 0, top--;\n  }\n}\nint main() {\n#ifdef ALEX_WEI\n  freopen(\"1.in\", \"r\", stdin);\n  freopen(\"1.out\", \"w\", stdout);\n#endif\n  cin >> n >> m;\n  for(int i = 1; i <= m; i++) {\n    int u, v;\n    scanf(\"%d%d\", &u, &v);\n    e.add(u, v);\n  }\n  for(int i = 1; i <= n + 1; i++) if(!dfn[i]) tarjan(i);\n  for(int i = 1; i <= n + 1; i++)\n    for(int _ = e.hd[i]; _; _ = e.nxt[_]) {\n      int it = e.to[_];\n      if(i == it) ban[col[i]] = 1;\n      else if(col[i] != col[it]) g.add(col[it], col[i]), deg[col[i]]++;\n    }\n  ed = col[n + 1];\n  queue<int> q;\n  for(int i = 1; i <= cn; i++) if(i != ed && !deg[i]) q.push(i);\n  memset(vis, 0, sizeof(vis));\n  while(!q.empty()) {\n    int t = q.front();\n    q.pop(), vis[t] = 1;\n    for(int _ = g.hd[t]; _; _ = g.nxt[_]) {\n      int it = g.to[_];\n      if(!--deg[it] && it != ed) q.push(it);\n    }\n  }\n  if(!ban[ed]) assert(!deg[ed]), q.push(ed), f[ed] = 1;\n  while(!q.empty()) {\n    int t = q.front();\n    q.pop(), vis[t] = 1;\n    for(int _ = g.hd[t]; _; _ = g.nxt[_]) {\n      int it = g.to[_];\n      if(ban[it]) continue;\n      f[it] = min(36501, f[it] + f[t]);\n      if(!--deg[it]) q.push(it);\n    }\n  }\n  vector<int> ans;\n  for(int i = 1; i <= n; i++)\n    if(!vis[col[i]] || f[col[i]] == 36501)\n      ans.push_back(i);\n  if(!ans.empty()) puts(\"zawsze\");\n  else {\n    int mx = 0;\n    for(int i = 1; i <= n; i++) {\n      if(f[col[i]] > mx) mx = f[col[i]], ans.clear();\n      if(f[col[i]] == mx) ans.push_back(i);\n    }\n    cout << mx << \"\\n\";\n  }\n  cout << ans.size() << \"\\n\";\n  for(int it : ans) cout << it << \" \";\n  return cerr << \"Time: \" << clock() << endl, 0;\n}\n/*\n2022/5/25\nstart coding at 8:35\nfinish debugging at 9:11\n*/\n```",
        "postTime": 1639375323,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3436 [POI2006]PRO-Professor Szu"
    },
    {
        "content": "\u63a8\u5e7f\u4e00\u6ce2 [$\\texttt{BLOG}$](https://stevebraveman.github.io/)\n\n\u8fdb\u5165\u6b63\u9898\uff1a\n\n# \u62d3\u6251\u6392\u5e8f + Tarjan\u7f29\u70b9 + DP\n\n\u4e3a\u4e86\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe\uff0c\u7136\u540e\u8dd1\u4e00\u904dTarjan\u8fdb\u884c\u7f29\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u5927\u4e8e1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u80af\u5b9a\u90fd\u6709\u65e0\u7a77\u591a\u79cd\u65b9\u6848\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u628a\u81ea\u73af\u4e5f\u5f53\u505a\u662f\u4e00\u79cd\u5927\u5c0f\u5927\u4e8e1\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u7136\u540e\u8dd1\u62d3\u6251\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662f\u8981\u8bb0\u4f4f\uff0c**\u4e0d\u80fd\u88ab\u8d77\u70b9\u5230\u8fbe\u7684\u70b9\u4e0d\u80fd\u7edf\u8ba1**\u3002\n\n\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u5f88\u7b80\u5355\uff1a$\\texttt{dp[to] = dp[to] + dp[u]}$\u3002\n\n$\\texttt{Code}$\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define MAXN 1000100\n#define LIM 36500\nstruct Edge {\n\tint v, nx;\n}e[MAXN << 2];\nint min(int a, int b) {\n\tif (a < b) return a;\n\telse return b;\n}\nint max(int a, int b) {\n\tif (a > b) return a;\n\telse return b;\n}\nint head[MAXN], ecnt, n, m, x[MAXN], y[MAXN], tim, dfn[MAXN], low[MAXN], dp[MAXN];\nint f[MAXN], num, top, st[MAXN], in[MAXN], siz[MAXN], ent[MAXN], ans, tot;\nbool vis[MAXN];\nvoid add(int f, int t) {\n\te[++ecnt] = (Edge) {t, head[f]};\n\thead[f] = ecnt;\n}\nvoid tarjan(int u) {\n\tdfn[u] = low[u] = ++tim;\n\tst[++top] = u;\n\tvis[u] = 1;\n\tfor (int i = head[u]; i; i = e[i].nx) {\n\t\tint v = e[i].v;\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t}\n\t\telse if (vis[v]) low[u] = min(low[u], dfn[v]);\n\t}\n\tif (low[u] == dfn[u]) {\n\t\tint v;\n\t\tnum++;\n\t\tdo {\n\t\t\tv = st[top--];\n\t\t\tvis[v] = 0;\n\t\t\tin[v] = num;\n\t\t\tsiz[num]++;\n\t\t} while (v != u);\n\t}\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d%d\", &y[i], &x[i]);\n\t\tadd(x[i], y[i]);\n\t}\n\tfor (int i = 1; i <= n + 1; i++) {\n\t\tif (!dfn[i]) tarjan(i);\n\t}\n\tmemset(e, 0, sizeof(e));\n\tmemset(head, 0, sizeof(head));\n\tecnt = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (x[i] == y[i]) {\n\t\t\tsiz[in[x[i]]]++;\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tif (in[x[i]] != in[y[i]]) {\n\t\t\tadd(in[x[i]], in[y[i]]);\n\t\t\tent[in[y[i]]]++;\n\t\t}\n\t}\n\tstd::queue <int> q;\n\tfor (int i = 1; i <= num; i++) {\n\t\tif (!ent[i]) q.push(i);\n\t}\n\tdp[in[n + 1]] = 1;\n\tmemset(vis, 0, sizeof(vis));\n\tvis[in[n + 1]] = 1;\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[u]; i; i = e[i].nx) {\n\t\t\tint to = e[i].v;\n\t\t\tent[to]--;\n\t\t\tif (!ent[to]) {\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t\tif (vis[u]) vis[to] = 1;\n\t\t\tdp[to] += dp[u];\n\t\t\tif (siz[to] > 1 && vis[to]) dp[to] = LIM;\n\t\t\tif (dp[to] > LIM) {\n\t\t\t\tdp[to] = LIM;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (vis[in[i]]) {\n\t\t\tf[i] = dp[in[i]];\n\t\t\tans = max(ans, f[i]);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (vis[in[i]]) {\n\t\t\tif (f[i] == ans) tot++;\n\t\t}\n\t}\n\tif (ans == LIM) {\n\t\tputs(\"zawsze\");\n\t}\n\telse {\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\tprintf(\"%d\\n\", tot);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (vis[in[i]]) {\n\t\t\tif (f[i] == ans) {\n\t\t\t\tprintf(\"%d \", i);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1553085550,
        "uid": 96570,
        "name": "RiverFun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3436 \u3010[POI2006]PRO-Professor Szu\u3011"
    },
    {
        "content": " _~~Szu\u6559\u6388\u6015\u4e0d\u662f\u6559\u4e66\u6559\u50bb\u4e86233~~_ \n\n\u9996\u5148\u8003\u8651 **tarjan** \u7f29\u70b9\uff0c\u627e\u51fa\u6240\u6709\u7684\u5f3a\u8054\u901a\u5206\u91cf(scc)\uff0c\u663e\u7136\u5f53\u4e00\u4e2ascc\u4e2d\u7684\u70b9\u8d85\u8fc71\u4e2a\u65f6\uff0c\u90a3\u4e48\u5230\u8fd9\u4e2ascc\u4e2d\u7684\u70b9\u7684\u65b9\u6848\u5c31\u6709\u65e0\u6570\u79cd\uff08\u56e0\u4e3a\u8fd9\u4e2a\u6559\u6388\u53ef\u4ee5\u7ed5\u7740\u5708\u4e00\u76f4\u8d70\uff09\uff0c\u7136\u540e\u5c06\u91cd\u6784\u540e\u7684\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff08**Topological_Sort**\uff09\uff0c\u7b97\u51fa\u65b9\u6848\u6570\u5373\u53ef\u3002\n\nPS\uff1a\u91cd\u590d\u4f7f\u7528\u6570\u7ec4d\u548cmoo\uff0c\u8fd8\u6709\u4e2d\u9014\u5220\u9664\u6570\u7ec4\u90fd\u662f\u56e0\u4e3aBZOJ\u5361\u7a7a\u95f4\u7684\u7f18\u6545\u3002\u3002\u3002\u5c31\u5f53\u666e\u901a\u6570\u7ec4\u770b\u5c31\u597d\u4e86QAQ\u3002\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<string>\n#include<cstring>\nusing namespace std;\n\n#define MAXN 1000000+10\n#define INF 36500\n\nint n,m,DFNT,cnt;\nint *DFN,*LOW,Belong[MAXN],d[MAXN],f[MAXN];\nvector<int> *G,*H;\nbool moo[MAXN];\nstack<int> s;\n\nint read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile (!isdigit(ch))\n\t{\n\t\tif (ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile (isdigit(ch))\n\t\tx=x*10+ch-'0',ch=getchar();\n\treturn x*f;\n}\n\nvoid tarjan(int u)\n{\n\tDFN[u]=LOW[u]=++DFNT;\n\ts.push(u);\n\tmoo[u]=true;\n\tfor (int i=0;i<G[u].size();i++)\n\t{\n\t\tint v=G[u][i];\n\t\tif (!DFN[v])\n\t\t\ttarjan(v),LOW[u]=min(LOW[u],LOW[v]);\n\t\telse if (moo[v])\n\t\t\tLOW[u]=min(LOW[u],DFN[v]);\n\t}\n\tint tmp=0;\n\tif (DFN[u]==LOW[u])\n\t{\n\t\tcnt++;\n\t\tdo\n\t\t{\n\t\t\ttmp=s.top();\n\t\t\ts.pop();\n\t\t\tmoo[tmp]=false;\n\t\t\tBelong[tmp]=cnt;\n\t\t}\n\t\twhile (tmp!=u);\n\t}\n}\n\nvoid Rebuild()\n{\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=0;j<G[i].size();j++)\n\t\t\tif (Belong[i]!=Belong[G[i][j]])\n\t\t\t\tH[Belong[i]].push_back(Belong[G[i][j]]),d[Belong[G[i][j]]]++;\n\t\t\telse\n\t\t\t\tmoo[Belong[i]]=true;\n}\n\nvoid Topological_Sort(int t)\n{\n\tqueue<int> q;\n\tfor (int i=1;i<=cnt;i++)\n\t\tif (!d[i])\n\t\t\tq.push(i);\n\tf[Belong[t]]=1;\n\tif (moo[Belong[t]])\n\t\tf[Belong[t]]+=INF;\n\twhile (!q.empty())\n\t{\n\t\tint tmp=q.front();\n\t\tq.pop();\n\t\tfor (int i=0;i<H[tmp].size();i++)\n\t\t{\n\t\t\tint to=H[tmp][i];\n\t\t\tf[to]+=f[tmp];\n\t\t\tif (f[to]>INF)\n\t\t\t\tf[to]=INF+1;\n\t\t\td[to]--;\n\t\t\tif (!d[to])\n\t\t\t{\n\t\t\t\tif (moo[to]&&f[to])\n\t\t\t\t\tf[to]=INF+1;\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn=read()+1,m=read();\n\tG=new vector<int>[n+1];\n\tLOW=new int[n+100];\n\tDFN=new int[n+100];\n\tmemset(LOW,0,n+100);\n\tmemset(DFN,0,n+100);\n\twhile (m--)\n\t{\n\t\tint u=read(),v=read();\n\t\tG[v].push_back(u);\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (!DFN[i])\n\t\t\ttarjan(i);\n\tmemset(moo,false,sizeof(moo));\n\tdelete []LOW;\n\tdelete []DFN;\n\tH=new vector<int>[cnt+1];\n\tRebuild();\n\tTopological_Sort(n);\n\tdelete []G;\n\tdelete []H;\n\tint ans=0,res=0;\n\tfor (int i=1;i<n;i++)\n\t\tans=max(ans,f[Belong[i]]);\n\tfor (int i=1;i<n;i++)\n\t\tif (ans==f[Belong[i]])\n\t\t\td[++res]=i;\n\tprintf(ans>INF ? \"zawsze\":\"%d\",ans);\n\tprintf(\"\\n%d\\n\",res);\n\tfor (int i=1;i<=res;i++)\n\t\tprintf(\"%d \",d[i]);\n\treturn 0;\n}\n```",
        "postTime": 1523257337,
        "uid": 54186,
        "name": "YANG_XIAO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3436 \u3010[POI2006]PRO-Professor Szu\u3011"
    },
    {
        "content": "\u3010POI\u8865\u5168\u8ba1\u5212#20 POI2006 PRO\u3011\n\n\u9996\u5148\u4e3a\u4e86\u65b9\u4fbf\uff0c\u628a\u201c\u4ece\u522b\u5885\u8d70\u5230\u4e3b\u5efa\u7b51\u697c\u201d\u89c6\u4e3a\u201c\u4ece\u4e3b\u5efa\u7b51\u697c\u8d70\u5230\u522b\u5885\u201d\uff0c\u7136\u540e\u628a\u6240\u6709\u8fb9\u53cd\u5411\uff08\u4e3a\u4e86\u65b9\u4fbfdfs\uff09\uff0c\u8fd9\u6837\u5bf9\u9898\u76ee\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\n\n\u63a5\u4e0b\u6765\u8bb0\u5f55\u4e3b\u5efa\u7b51\u80fd\u8d70\u5230\u90a3\u4e9b\u5efa\u7b51\uff0c\u628a\u8d70\u4e0d\u5230\u7684\u5efa\u7b51\uff08\u548c\u5b83\u4eec\u7684\u51fa\u8fb9\uff09\u4ece\u56fe\u4e2d\u53bb\u6389\n\n\u7136\u540e\u5728\u80fd\u8d70\u5230\u7684\u5efa\u7b51\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\uff08\u4e0d\u5305\u542b\u4ece\u201c\u8d70\u4e0d\u5230\u7684\u5efa\u7b51\u201d\u8fde\u5411\u201c\u80fd\u8d70\u9053\u7684\u5efa\u7b51\u201d\u7684\u8fb9\uff09\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n\n\u5728\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u65b9\u6848\u6570\uff0c\u5982\u679c\u6392\u5230\u4e00\u534a\u53d1\u73b0\u6ca1\u6709\u5f85\u5904\u7406\u7684\uff0c\u5165\u5ea6\u4e3a0\u7684\u70b9\u65f6\u8bf4\u660e\u5269\u4e0b\u7684\u70b9\u4e2d\u5b58\u5728\u73af\uff0c\u53ef\u4ee5\u6709\u65e0\u9650\u79cd\u65b9\u6848\u8d70\u5411\u5269\u4f59\u7684\u70b9\n\n\u5728\u8bb0\u5f55\u65b9\u6848\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u9047\u5230\u65b9\u6848\u6570>36500\u7684\u70b9\u5219\u8bbe\u4e3a\u4e00\u4e2a\u56fa\u5b9a\u7684\uff0c\u7565\u5927\u4e8e36500\u7684\u6570\uff0c\u9632\u6b62\u7206int\n\n\u6700\u540e\u8f93\u51fa\u4e00\u4e0b\u65b9\u6848\u5c31\u597d\u4e86\uff0c\u6ce8\u610f\u65e0\u9650\u79cd\u65b9\u6848\u548c\u65b9\u6848\u6570>36500\u7684\u70b9\u90fd\u9700\u8981\u8f93\u51fa\n\n\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1000010;\nstruct edge\n{\n    int v;\n    edge *next;\n}*h[MAXN],pool[MAXN];\nint deg[MAXN],top,cnt;\ninline void addedge(int v,int u)\n{\n    edge *tmp=&pool[++top];tmp->v=v;tmp->next=h[u];h[u]=tmp;deg[v]++;\n}\nint dp[MAXN],vis[MAXN];\nvector<int> ans;\nvoid dfs(int u)\n{\n    vis[u]=1;cnt++;\n    for(edge *tmp=h[u];tmp;tmp=tmp->next)\n    {\n        if(!vis[tmp->v])dfs(tmp->v);\n    }\n}\nqueue<int> q;\nint main()\n{\n    int n,m,a,b;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        addedge(a,b);\n    }\n    dfs(n+1);\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        {\n            for(edge *tmp=h[i];tmp;tmp=tmp->next)\n            {\n                deg[tmp->v]--;\n            }\n        }\n    }\n    q.push(n+1);\n    dp[n+1]=1;\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        cnt--;vis[u]=0;\n        for(edge *tmp=h[u];tmp;tmp=tmp->next)\n        {\n            dp[tmp->v]+=dp[u];\n            deg[tmp->v]--;\n            if(deg[tmp->v]==0)\n            {\n                if(dp[tmp->v]>36500)\n                {\n                    dp[tmp->v]=36501;\n                    ans.push_back(tmp->v);\n                    cnt++;\n                }\n                q.push(tmp->v);\n            }\n        }\n    }\n    if(cnt==0)\n    {\n        int maxx=0;\n        for(int i=1;i<=n;i++)\n        {\n            if(dp[i]>maxx)\n            {\n                maxx=dp[i];\n                ans.clear();\n                ans.push_back(i);\n            }\n            else if(dp[i]==maxx)ans.push_back(i);\n        }\n        sort(ans.begin(),ans.end());\n        printf(\"%d\\n%d\\n\",maxx,ans.size());\n        for(auto x:ans)printf(\"%d \",x);\n        return 0;\n    }\n    for(int i=1;i<=n;i++)if(vis[i])ans.push_back(i);\n    sort(ans.begin(),ans.end());\n    printf(\"zawsze\\n%d\\n\",ans.size());\n    for(auto x:ans)printf(\"%d \",x);\n    return 0;\n}\n```",
        "postTime": 1506934598,
        "uid": 3346,
        "name": "oscar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3436 \u3010[POI2006]PRO-Professor Szu\u3011"
    },
    {
        "content": "\u76f4\u63a5\u8bf4\u89e3\u6cd5\u3002\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u56fe\u4e2d\u51fa\u73b0\u73af\uff0c\u5c31\u4f1a\u51fa\u73b0\u65e0\u6570\u6761\u8def\u5f84\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u73af\u91cc\u8d70\u65e0\u6570\u5708\u6765\u589e\u52a0\u8def\u5f84\u6570\u91cf\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7f29\u70b9\u5904\u7406\u73af\uff0c\u987a\u4fbf\u5904\u7406\u73af\u4e0a\u70b9\u7684\u4e2a\u6570\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u975e\u73af\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5728\u91cd\u5efa\u56fe\u540e\u7528\u62d3\u6251\u6392\u5e8f\u7b80\u5355 DP \u6765\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\u603b\u6570\u3002\u7279\u522b\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8def\u5f84\u603b\u6570\u8d85\u51fa\u8303\u56f4\u7684\u70b9\uff08\u5305\u62ec\u73af\u4e0a\u7684\u70b9\uff09\u76f4\u63a5\u8d4b\u503c\u4e3a $36500$\u3002\n\n\u7136\u540e\u7edf\u8ba1\u8f93\u51fa\uff0c\u5c31\u505a\u5b8c\u4e86\u3002\n\n```cpp\nvoid add(int fr,int to){\n  e[++tot]=(edge){fr,to,head[fr]};\n  head[fr]=tot;\n}\n\nvoid Add(int fr,int to){\n  E[++TOT]=(edge){fr,to,Head[fr]};\n  Head[fr]=TOT;  \n}\n\nvoid tarjan(int u){\n  dfn[u]=low[u]=++cnt;\n  vis[u]=1;zhan[++top]=u;\n  for(int i=head[u];i;i=e[i].nxt){\n    int to=e[i].to;\n    if(!dfn[to]) tarjan(to),low[u]=min(low[u],low[to]);\n    else if(vis[to]) low[u]=min(low[u],dfn[to]);\n  }\n  if(dfn[u]==low[u]){\n    ++siz[++t];\n    int pre=zhan[top--];\n    num[pre]=t;vis[pre]=0;\n    while(pre!=u){\n      ++siz[t];\n      pre=zhan[top--];\n      num[pre]=t;vis[pre]=0;\n    }\n  }\n}\n\nvoid topsort(){\n  queue<int> q;\n  for(int i=1;i<=t;i++)\n    if(!du[i]) q.push(i);\n  while(!q.empty()){\n    int u=q.front();q.pop();\n    for(int i=Head[u];i;i=E[i].nxt){\n      int to=E[i].to;\n      if(--du[to]==0) q.push(to); \n      if(flag[u]) flag[to]=1;dp[to]+=dp[u];\n      if(siz[to]>1&&flag[to]) dp[to]=UP;\n      if(dp[to]>UP) dp[to]=UP;\n    }\n  }\n}\n\nsigned main(){\n  n=read();m=read();\n  for(int i=1;i<=m;i++){\n    fr[i]=read(),to[i]=read();\n    add(to[i],fr[i]);\n  }\n  for(int i=1;i<=n+1;i++) if(!dfn[i]) tarjan(i);\n  \n  for(int i=1;i<=m;i++){\n    if(fr[i]==to[i]) ++siz[num[fr[i]]];\n    else if(num[fr[i]]!=num[to[i]]) \n      Add(num[to[i]],num[fr[i]]),du[num[fr[i]]]++;\n  }\n  \n  flag[num[n+1]]=1;\n  dp[num[n+1]]=1;topsort();\n  for(int i=1;i<=n;i++){\n    if(!flag[num[i]]) continue;\n    ans=max(ans,dp[num[i]]);\n  }\n  for(int i=1;i<=n;i++){\n    if(!flag[num[i]]) continue;\n    all+=(dp[num[i]]==ans);\n  }\n  if(ans==UP) puts(\"zawsze\");\n  else printf(\"%d\\n\",ans);printf(\"%d\\n\",all);\n  for(int i=1;i<=n;i++){\n    if(!flag[num[i]]) continue;\n    if(dp[num[i]]==ans) printf(\"%d \",i);\n  }\n  return 0;\n}\n```",
        "postTime": 1634683703,
        "uid": 281497,
        "name": "KEBrantily",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3436  \u3010[POI2006]PRO-Professor Szu\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/16449003.html)\n\n# \u9898\u76ee\u5927\u610f\n\n\u67d0\u5927\u5b66\u6821\u5185\u6709\u4e00\u680b\u4e3b\u697c\uff0c\u8fd8\u6709 $n$ \u680b\u4f4f\u5b85\u697c\u3002\u8fd9\u4e9b\u697c\u4e4b\u95f4\u7531\u4e00\u4e9b\u5355\u5411\u9053\u8def\u8fde\u63a5\uff0c\u4f46\u662f\u4efb\u610f\u4e24\u680b\u697c\u4e4b\u95f4\u53ef\u80fd\u6709\u591a\u6761\u9053\u8def\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u4e3a\u540c\u4e00\u680b\u697c\u7684\u73af\u8def\u3002\u5df2\u77e5\u4efb\u610f\u4e00\u680b\u4f4f\u5b85\u697c\u90fd\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u524d\u5f80\u4e3b\u697c\u7684\u8def\u7ebf\u3002\n\n\u73b0\u5728\u6709\u4e00\u4f4d\u53e4\u602a\u7684\u6559\u6388\uff0c\u4ed6\u5e0c\u671b\u6bcf\u5929\u53bb\u4e3b\u697c\u4e0a\u73ed\u7684\u8def\u7ebf\u4e0d\u540c\u3002\n\n\u4e00\u6761\u4e0a\u73ed\u8def\u7ebf\u4e2d\uff0c\u6bcf\u680b\u697c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u591a\u6b21\u3002\u6211\u4eec\u79f0\u4e24\u6761\u4e0a\u73ed\u8def\u7ebf\u662f**\u4e0d\u540c\u7684**\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u6761\u8def\u7ebf\u4e2d\u5b58\u5728\u4e00\u6761\u8def\u662f\u4e0d\u540c\u7684\uff08\u4e24\u680b\u697c\u4e4b\u95f4\u7684\u591a\u6761\u9053\u8def\u88ab\u89c6\u4e3a\u662f\u4e0d\u540c\u7684\u9053\u8def\uff09\u3002\n\n\u73b0\u5728\u6559\u6388\u5e0c\u671b\u77e5\u9053\uff0c\u4ece\u54ea\u4e9b\u4f4f\u5b85\u697c\u524d\u5f80\u4e3b\u697c\u7684\u4e0a\u73ed\u8def\u7ebf\u6570\u6700\u591a\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0d\u59a8\u53cd\u7740\u5efa\u56fe\uff0c\u8fd9\u6837\u9898\u76ee\u5c31\u8f6c\u5316\u4e3a\u4ece\u4e3b\u697c\u524d\u5f80\u54ea\u4e9b\u4f4f\u5b85\u697c\u7684\u4e0a\u73ed\u8def\u7ebf\u6570\u6700\u591a\uff0c\u591a\u70b9\u8f6c\u6362\u4e3a\u4e86\u5355\u70b9\uff0c\u53ef\u4ee5 $\\verb!tarjan!$ \u7f29\u70b9\u540e\u76f4\u63a5\u5957\u8def\u4e0a\u62d3\u6251\u6392\u5e8f\u5373\u53ef\u3002\n\n\u8fd9\u9053\u9898\u601d\u8def\u4e0d\u96be\uff0c\u91cd\u8981\u7684\u662f\u5982\u4e0b\u7684\u51e0\u9879\u96be\u70b9\uff1a\n\n+ \u53ef\u80fd\u5b58\u5728 $(u,v),u=v$ \u7684\u6570\u636e\uff08\u5373\u81ea\u73af\uff09\uff0c\u6b64\u65f6\u6211\u4eec\u628a\u5b83\u4e5f\u5f53\u6210\u8fde\u901a\u5757\u5927\u5c0f\u5927\u4e8e $1$ \u7684\u8fde\u901a\u5757\u3002\n\n+ \u62d3\u6251\u6392\u5e8f\u65f6\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u53ef\u4ee5\u88ab\u8bbf\u95ee\u5230\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e5f\u80fd\u88ab\u8bbf\u95ee\u5230\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u8282\u70b9\u80fd\u88ab\u8bbf\u95ee\u5230\uff0c\u5219\u6709 $dp_v\\gets dp_v+dp_u$\uff0c$dp$ \u8868\u793a\u65b9\u6848\u6570\u3002\n\n+ \u7279\u6b8a\u5730\uff0c\u56e0\u4e3a\u6240\u6709\u8def\u5f84\u548c\u70b9\u53ef\u4ee5\u65e0\u9650\u6b21\u7ecf\u8fc7\uff0c\u6240\u4ee5\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u6240\u6709\u70b9\u90fd\u6709\u65e0\u6570\u79cd\u65b9\u6848\u6570\uff0c\u800c\u4e4b\u524d\u6211\u4eec\u63d0\u5230\u6b64\u5904\u89c6\u81ea\u73af\u7684\u5927\u5c0f\u5927\u4e8e $1$ \u4e14\u5c5e\u4e8e\u8fde\u901a\u5757\uff0c\u6240\u4ee5\u89e3\u51b3\u4e86\u81ea\u73af\u7684\u95ee\u9898\u3002\u5982\u679c\u65b9\u6848\u6570\u8d85\u8fc7\u4e86 $36500$\uff0c\u5219\u5f3a\u5236\u6539\u4e3a $36500$\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n#ifndef ONLINE_JUDGE\n#define getc getchar\n#endif\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline double double_read() {\n\t\tlong long ret = 0,w = 1,aft = 0,dot = 0,num = 0;\n\t\tchar ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif (ch == '-') w = -1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch) || ch == '.') {\n\t\t\tif (ch == '.') {\n\t\t\t\tdot = 1;\n\t\t\t} else if (dot == 0) {\n\t\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\t} else {\n\t\t\t\taft = (aft << 3) + (aft << 1) + ch - '0';\n\t\t\t\tnum ++;\n\t\t\t}\n\t\t\tch = getc();\n\t\t}\n\t\treturn (pow(0.1,num) * aft + ret) * w;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\n\nconst int N = 1e6 + 5;\nstruct Graph {\n\tstruct Node {\n\t\tint u,v,nxt;\n\t} gra[N];\n\tint head[N];\n\tint idx;\n\tinline void add(int u,int v) {\n\t\tgra[++ idx] = (Node){u,v,head[u]},head[u] = idx;\n\t}\n} g1,g2;\nint in[N],id[N],dfn[N],low[N],dp[N],g[N],siz[N];\nbool in_stack[N],vis[N];\nstd::stack <int> st;\nint n,m,dfntim,cnt;\n\ninline void tarjan(int now) {\n\tdfn[now] = low[now] = ++ dfntim,in_stack[now] = true;\n\tst.push(now);\n\tfor (register int i = g1.head[now];i;i = g1.gra[i].nxt) {\n\t\tint v = g1.gra[i].v;\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[now] = std::min(low[now],low[v]);\n\t\t} else if (in_stack[v]) {\n\t\t\tlow[now] = std::min(low[now],dfn[v]);\n\t\t}\n\t}\n\tif (dfn[now] == low[now]) {\n\t\tcnt ++;\n\t\tint u;\n\t\tdo {\n\t\t\tu = st.top();st.pop();\n\t\t\tin_stack[u] = false,id[u] = cnt,siz[cnt] ++;\n\t\t} while (u != now);\n\t}\n}\ninline void topo() {\n\tstd::queue <int> q;\n\tfor (register int i = 1;i <= cnt; ++ i) {\n\t\tif (!in[i]) q.push(i);\n\t}\n\tvis[id[n]] = true,dp[id[n]] = 1;\n\twhile (!q.empty()) {\n\t\tint u = q.front();q.pop();\n\t\tfor (register int i = g2.head[u];i;i = g2.gra[i].nxt) {\n\t\t\tint v = g2.gra[i].v;\n\t\t\tin[v] --;\n\t\t\tif (!in[v]) q.push(v);\n\t\t\tif (vis[u]) vis[v] = true;\n\t\t\tdp[v] += dp[u];\n\t\t\tif (siz[v] > 1 && vis[v]) dp[v] = 36500;\n\t\t\tif (dp[v] > 36500) dp[v] = 36500;\n\t\t}\n\t}\n}\nint main(void) {\n\tn = read() + 1,m = read();\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tint u = read(),v = read();\n\t\tg1.add(v,u);\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (!dfn[i]) tarjan(i);\n\t}\n\tfor (register int i = 1;i <= g1.idx; ++ i) {\n\t\tif (g1.gra[i].u == g1.gra[i].v) siz[id[g1.gra[i].u]] ++;\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = g1.head[i];j;j = g1.gra[j].nxt) {\n\t\t\tint v = g1.gra[j].v;\n\t\t\tif (id[i] != id[v]) {\n\t\t\t\tg2.add(id[i],id[v]);\n\t\t\t\tin[id[v]] ++;\n\t\t\t}\n\t\t}\n\t}\n\ttopo();\n\tint ans = 0,num = 0;\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (vis[id[i]]) {\n\t\t\tg[i] = dp[id[i]];\n\t\t\tans = std::max(ans,g[i]);\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (vis[id[i]] && g[i] == ans) num ++;\n\t}\n\tif (ans == 36500) {\n\t\tputs(\"zawsze\");\n\t} else {\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\tprintf(\"%d\\n\",num);\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tif (vis[id[i]] && g[i] == ans) {\n\t\t\tprintf(\"%d \",i);\n\t\t}\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1657033502,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P3436 [POI2006]PRO-Professor Szu"
    }
]