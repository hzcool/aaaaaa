[
    {
        "content": "# [Ynoi2006] rldcot\r\n## \u601d\u8def\r\n\r\n\r\n\r\n\u559c\u63d0\u76ee\u524d\u6700\u52a3\u89e3\uff0c\u53d1\u4e2a\u9898\u89e3\u5e86\u795d\u4e00\u4e0b\u5427\u3002\r\n\r\n\u9996\u5148\u539f\u9898\u6709\u4e2a\u6ca1\u8bf4\u6e05\u695a\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u662f\u9009\u62e9\u7684\u4e24\u4e2a\u70b9 $i,j$ \u53ef\u4ee5\u76f8\u540c\u3002\r\n\r\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$ \u6c42\u51fa\u4ed6\u5f53\u4f5c $lca$ \u65f6\u5bf9\u90a3\u4e9b\u8be2\u95ee\u6709\u8d21\u732e\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u80fd\u5f53\u4f5c $lca$ \u5f53\u4e14\u4ec5\u5f53\u4e09\u79cd\u60c5\u51b5\u4e2d\u51fa\u73b0\r\n\r\n- \u4ed6\u81ea\u5df1\u6ee1\u8db3 $l\\leq x\\leq r$\r\n- \u4ed6\u548c\u4ed6\u7684\u4e00\u4e2a\u513f\u5b50\u90fd\u6ee1\u8db3 $l\\leq x,son\\leq r$\r\n- \u5728\u4ed6\u7684\u4e0d\u540c\u5b50\u6811\u5185\u6709\u4e24\u4e2a\u70b9 $u,v$ \u6ee1\u8db3 $l\\leq u,v\\leq r$\r\n\r\n\u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u6761\u4ef6 2 \u5f31\u4e8e\u6761\u4ef6 1\uff0c\u800c\u6761\u4ef61\u53ea\u6709 $O(n)$ \u4e2a\u4e0d\u540c\u7684\u70b9\uff0c\u8fd9\u90e8\u5206\u7684\u8d21\u732e\u53ef\u4ee5\u5e73\u51e1\u5904\u7406\u3002\r\n\r\n\u540c\u7406\uff0c\u5bf9\u4e8e\u6761\u4ef6 3\uff0c\u6211\u4eec\u8bbe $a,b,c,d$ \u662f\u5728\u8282\u70b9 $u$ \u4e0d\u540c\u5b50\u6811\u5185\u7684\u56db\u4e2a\u8282\u70b9\u4e14\u6ee1\u8db3 $a\\leq b\\leq c\\leq d$ \uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u53d6\u503c\u8303\u56f4\u5728 $1\\leq l\\leq a, d\\leq r\\leq n$ \u5185\u7684\u67e5\u8be2 $l,r$ \u4e00\u5b9a\u662f\u88ab $1\\leq l\\leq b, c\\leq r\\leq n$ \u5305\u62ec\uff0c\u5373 $l\\leq a, d\\leq r$ \u662f $l\\leq b,c\\leq r$ \u7684\u5145\u5206\u6761\u4ef6\uff0c\u6211\u4eec\u518d\u8ba8\u8bba $a,d$ \u7684\u8d21\u732e\u5df2\u7ecf\u6ca1\u6709\u610f\u4e49\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5728\u8ba8\u8bba\u4e00\u4e2a\u70b9 $u$ \u7684\u8d21\u732e\u65f6\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u5728\u5b83\u5b50\u6811\u5185\u627e\u4e24\u4e2a\u6709\u6781\u8fd1\u5173\u7cfb\uff08\u524d\u9a71\u540e\u7ee7\uff09\u7684\u70b9\u3002\r\n\r\n\u6211\u4eec\u8003\u8651 Dsu on tree\uff0c\u6bcf\u6b21\u6211\u4eec\u5728\u5c06\u8f7b\u513f\u5b50\u5411\u91cd\u513f\u5b50\u5408\u5e76\u7684\u65f6\u5019\uff0c\u540c\u65f6\u5bf9\u91cd\u513f\u5b50\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff08 `set`  \u5373\u53ef\uff09\u5148\u627e\u5230\u8f7b\u513f\u5b50\u4e2d\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u6700\u540e\u518d\u5c06\u8fd9\u4e2a\u8f7b\u513f\u5b50\u4e2d\u6240\u6709\u70b9\u63d2\u5165\u5e73\u8861\u6811\uff0c\u5373\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u91cd\u4e0d\u6f0f\uff0c\u800c\u4e14\u771f\u6b63\u6709\u8d21\u732e\u7684\u70b9\u5bf9\u4e2a\u6570\u4e5f\u51cf\u5c11\u5230\u4e86\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u590d\u6742\u5ea6\uff0c\u5373 $O(n \\log n)$ \u3002\r\n\r\n\u90a3\u95ee\u9898\u73b0\u5728\u53d8\u6210\u4e86\u7ed9\u4f60 $n\\log n$ \u4e2a\u70b9\u5bf9\uff0c\u6c42\u533a\u95f4\u5185\u70b9\u5bf9\u7684\u5b58\u5728\u6027\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u626b\u63cf\u7ebf\u7ef4\u62a4\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u8be2\u95ee\u770b\u6210\u5e73\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9 $(l,r)$\uff0c\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(a,b)$ \u5bf9\u67d0\u6b21\u67e5\u8be2\u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53 $1\\leq l\\leq a, b\\leq r\\leq n$\u3002\u8fd9\u662f\u4e00\u4e2a 2-side \u77e9\u5f62\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e9b\u77e9\u5f62\u6c42\u9762\u79ef\u5e76\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u77e9\u5f62\u52a0\u4e00\uff0c\u90a3\u6700\u7ec8\u7684\u95ee\u9898\u53d8\u6210\u4e86 $n \\log n$ \u4e2a\u77e9\u5f62\u52a0\uff0c\u67e5\u5355\u70b9\u95ee\u9898\u3002\u5982\u679c\u9898\u76ee\u4e2d\u7684\u8fb9\u6743\u90fd\u4e3a\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6811\u7684\u6bcf\u4e00\u5c42\u90fd\u7528\u4e00\u4e2a\u626b\u63cf\u7ebf\u7ef4\u62a4\u77e9\u5f62\u9762\u79ef\u5e76\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684 $dep$ \u6392\u5e8f\uff0c\u76f8\u540c\u7684 $dep$ \u7528\u4e00\u4e2a\u626b\u63cf\u7ebf\u5373\u53ef\u3002\r\n\r\n![1](https://cdn.luogu.com.cn/upload/image_hosting/5g913ugf.png)\r\n\r\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n+q \\log n)$\u3002\r\n\r\n## code\r\n\r\n~~\u7531\u4e8e\u672c\u4eba\u975e\u5e38\u83dc\uff0c\u6240\u4ee5\u4ee3\u7801\u7a0d\u957f~~\r\n\r\n```c++\r\n#include <bits/stdc++.h>\r\n#define Lson rt << 1, l, mid\r\n#define Rson rt << 1 | 1, mid + 1, r\r\n#define iter set <int> :: iterator\r\n#define int long long\r\n#define lob lower_bound\r\nusing namespace std;\r\nconst int N = 1e6 + 10; // \u4e0d\u5f00\u5927\u70b9\u4f1aRE\r\nconst int M = 1e6 + 10;\r\nconst int INF = LLONG_MAX;\r\ninline int read ( )\r\n{\r\n    int x = 0, f = 1;\r\n    char ch = getchar ( );\r\n    while (ch < '0' || ch > '9') {if (ch == '-') f = - 1; ch = getchar ( );}\r\n    while (ch >= '0' && ch <='9') {x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar ( );}\r\n    return x * f;\r\n}\r\nint n, m;\r\nstruct edge {\r\n    int ver, nxt, val;\r\n}e[N << 1];\r\nint head[N], tot;\r\nvoid add_edge (int u, int v, int w) { e[++tot] = (edge) {v, head[u], w}; head[u] = tot; }\r\nint fa[N], siz[N], son[N];\r\nint cnt;\r\nset <int> s;\r\nvector <pii> vec[N];\r\nint ans[N];\r\nstruct node {\r\n    int id, dis;\r\n    node () {}\r\n    node (int ID, int DIS) { id = ID; dis = DIS; }\r\n    bool operator < (const node &a) const {\r\n        return dis < a.dis;\r\n    }\r\n}a[N];\r\nstruct scanline {\r\n    int x, y1, y2, op;\r\n    bool operator < (const scanline &a) const {\r\n        if (x == a.x) return op > a.op;\r\n        return x < a.x;\r\n    }\r\n    scanline () {}\r\n    scanline (int x1, int y11, int y22, int op1) { x = x1, y1 = y11, y2 = y22; op = op1; }\r\n}line[M << 1];\r\nstruct point {\r\n    int x, y, op;\r\n    point () {}\r\n    point (int x1, int y1, int opt) { x = x1; y = y1; op = opt; }\r\n    bool operator < (const point &a) const {\r\n        return x < a.x;\r\n    }\r\n}sh[M << 1]; int stot;\r\nstruct query {\r\n    int x, y, id;\r\n    bool operator < (const query &a) const {\r\n        return x < a.x;\r\n    }\r\n}q[M];\r\nstruct  Segment_tree {\r\n    int pos;\r\n    struct Seg_tree {\r\n        int sum, Add;\r\n        bool tag;\r\n        #define sum(rt) tree[rt].sum\r\n        #define Add(rt) tree[rt].Add\r\n        #define tag(rt) tree[rt].tag\r\n        #define lson rt << 1\r\n        #define rson rt << 1 | 1\r\n    }tree[N << 2];\r\n    void pushup (int rt, int l, int r)\r\n    {\r\n        sum(rt) = sum(lson) + sum(rson);\r\n        tag(rt) = sum(rt) > 0 ? 0 : 1;\r\n    }\r\n    void spread (int rt, int l, int r)\r\n    {\r\n        if (Add(rt) != 0)\r\n        {\r\n            int mid = (l + r) >> 1;\r\n            sum(lson) += Add(rt) * (mid - l + 1); sum(rson) += Add(rt) * (r - mid);\r\n            Add(lson) += Add(rt); Add(rson) += Add(rt);\r\n            Add(rt) = 0;\r\n        }\r\n        tag(lson) = sum(lson) > 0 ? 0 : 1; tag(rson) = sum(rson) > 0 ? 0 : 1;\r\n    }\r\n    void modify (int rt, int l, int r, int L, int R, int val)\r\n    {\r\n        if (L <= l && r <= R)\r\n        {\r\n            sum(rt) += val * (r - l + 1);\r\n            Add(rt) += val;\r\n            tag(rt) = sum(rt) > 0 ? 0 : 1;\r\n            return ;\r\n        }\r\n        int mid = (l + r) >> 1;\r\n        spread (rt, l, r);\r\n        if (L <= mid) modify (Lson, L, R, val);\r\n        if (R > mid) modify (Rson, L, R, val);\r\n        pushup (rt, l, r);\r\n    }\r\n    void find (int rt, int l, int r)\r\n    {\r\n        tag(rt) = sum(rt) > 0 ? 0 : 1;\r\n        if (tag(rt)) { pos = max (pos, r + 1); return ; }\r\n        if (l == r) return ;\r\n        int mid = (l + r) >> 1;\r\n        spread (rt, l, r);\r\n        if (!tag(lson)) find (Lson);\r\n        else pos = max (pos, mid + 1), find (Rson);\r\n    }\r\n}T;\r\nstruct BIT {\r\n    int tree[N];\r\n    void modify (int x, int val) {for ( ; x <= n; x += (x & (-x))) tree[x] += val; }\r\n    int query (int x) { int res = 0; for ( ; x > 0; x -= (x & (-x))) res += tree[x]; return res; } \r\n}bit;\r\nvoid dfs (int u, int f, int dis)\r\n{\r\n    fa[u] = f; a[u] = node(u, dis); siz[u] = 1;\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n    {\r\n        int v = e[i].ver;\r\n        if (v == f) continue;\r\n        dfs (v, u, dis + e[i].val);\r\n        siz[u] += siz[v];\r\n        if (siz[son[u]] < siz[v]) son[u] = v;\r\n    }\r\n}\r\nvoid clean (int u)\r\n{\r\n    s.erase (u);\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n        if (e[i].ver != fa[u]) clean (e[i].ver);\r\n}\r\nvoid ins (int u)\r\n{\r\n    s.insert (u);\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n        if (e[i].ver != fa[u]) ins (e[i].ver);\r\n}\r\nvoid add(int u, int f)\r\n{\r\n    s.insert (u);\r\n    iter t1 = s.lob (u), t2 = s.lob (u);\r\n    if (t1 != s.begin ()) vec[f].pb (mk((*--t1), u));\r\n    if (t2 != (--s.end ())) vec[f].pb (mk (u, (*++t2)));\r\n    s.erase (u);\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n        if (e[i].ver != fa[u]) add (e[i].ver, f);\r\n}\r\nvoid dfs1 (int u)\r\n{\r\n    vec[u].pb (mk(u, u));\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n    {\r\n        int v = e[i].ver;\r\n        if (v == fa[u] || v == son[u]) continue;\r\n        dfs1 (v);\r\n        clean (v);\r\n    }\r\n    if (!son[u]) { s.insert (u); return ; }\r\n    dfs1 (son[u]);\r\n    for (int i = head[u]; i; i = e[i].nxt)\r\n    {\r\n        int v = e[i].ver;\r\n        if (v == fa[u] || v == son[u]) continue;\r\n        add (v, u);\r\n        ins (v);\r\n    }\r\n    s.insert (u);\r\n}\r\nvoid Scan ()\r\n{\r\n    sort (line + 1, line + cnt + 1);\r\n    int now = 1; T.pos = INF;\r\n    while (now <= cnt && line[now].op == 1)\r\n    {\r\n        T.modify (1, 1, n, line[now].y1, line[now].y2, line[now].op);\r\n        T.pos = min (T.pos, line[now].y1);\r\n        now++;\r\n    }\r\n    int lst = 1;\r\n    for ( ; now <= cnt; now++)\r\n    {\r\n        sh[++stot] = point(line[now].x + 1, T.pos, -1);\r\n        sh[++stot] = point(lst, T.pos, 1);\r\n        T.modify (1, 1, n, line[now].y1, line[now].y2, line[now].op); T.find (1, 1, n);\r\n        lst = line[now].x + 1;\r\n    }\r\n}\r\nsigned main()\r\n{\r\n    n = read ( ), m = read ( );\r\n    for (int i = 1, u, v, w; i < n; i++)\r\n    {\r\n        u = read ( ), v = read ( ), w = read ( );\r\n        add_edge (u, v, w); add_edge (v, u, w);\r\n    }\r\n    dfs (1, 0, 0); \r\n    sort (a + 1, a + n + 1);\r\n    dfs1 (1);\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        cnt = 0; int j = i;\r\n        while (a[j].dis == a[j + 1].dis && j < n) j++;\r\n        for (int k = i; k <= j; k++)\r\n        {\r\n            for (int s = 0; s < vec[a[k].id].size (); s++)\r\n            {\r\n                int x = vec[a[k].id][s].fi, y = vec[a[k].id][s].se;\r\n                line[++cnt] = scanline (1, y, n, 1);\r\n                line[++cnt] = scanline (x, y, n, -1);\r\n            }\r\n        } i = j;\r\n        if (cnt) Scan ();\r\n    }\r\n    for (int i = 1; i <= m; i++) q[i].x = read ( ), q[i].y = read ( ), q[i].id = i;\r\n    sort (sh + 1, sh + stot + 1);\r\n    sort (q + 1, q + m + 1);\r\n    int now = 1;\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        while (now <= stot && sh[now].x <= q[i].x)\r\n        {\r\n            bit.modify (sh[now].y, sh[now].op);\r\n            now++;\r\n        }\r\n        ans[q[i].id] = bit.query (q[i].y);\r\n    }\r\n    for (int i = 1; i <= m; i++) printf (\"%lld\\n\", ans[i]);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1637109055,
        "uid": 177837,
        "name": "violin_wyl",
        "ccfLevel": 6,
        "title": "P7880 [Ynoi2006] rldcot"
    },
    {
        "content": "\u6211\u4eec\u53d1\u73b0\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u533a\u95f4\u865a\u6811\u7684\u989c\u8272\u4e2a\u6570\uff0c\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5de6\u7aef\u70b9\u7684\u865a\u6811\u7684\u7b54\u6848\u3002\n\n\u6211\u4eec\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9 $i$\uff0c\u865a\u6811\u4e0a\u6700\u591a\u52a0\u4e24\u4e2a\u70b9\uff0c\u5176\u4e2d\u4e00\u4e2a\u662f\u8fd9\u4e2a\u70b9\u672c\u8eab\uff0c\u5f71\u54cd\u5230\u4e86\u5de6\u7aef\u70b9\u4e3a $[1,i]$ \u7684\u865a\u6811\u3002\n\n\u53e6\u4e00\u4e2a\u70b9\u6211\u4eec\u5728 LCT \u4e0a access \u4e00\u4e0b\uff0c\u5c06\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u94fe\u7684\u6743\u503c\u8d4b\u503c\u4e3a $i$\u3002\n\naccess \u65f6\u7ecf\u8fc7\u7684\u6bcf\u4e00\u6761\u865a\u8fb9\u7684\u7236\u4eb2\u5c31\u662f\u53ef\u80fd\u7684\u4e00\u4e2a\u65b0\u589e\u7684\u8282\u70b9\uff0c\u5176\u5f71\u54cd\u5230\u7684\u865a\u6811\u662f\u4e00\u4e2a\u524d\u7f00\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4f46\u524d\u9762\u7684\u6bcf\u9897\u865a\u6811\u90fd\u5df2\u7ecf\u6709\u8fd9\u4e2a\u70b9\u4e86\uff0c\u6211\u4eec\u518d\u52a0\u4e00\u904d\u4e5f\u6ca1\u4e8b\uff09\uff0c\u524d\u7f00\u5927\u5c0f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u6743\u503c\u3002\n\n\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u53d8\u4e3a\uff0c\u6211\u4eec\u6709 $n$ \u4e2a\u96c6\u5408\uff0c$O(n\\log n)$ \u6b21\u4fee\u6539\uff0c\u4e00\u6b21\u4fee\u6539\u5f62\u5982\u5411\u4e00\u4e2a\u524d\u7f00\u4e2d\u52a0\u5165\u4e00\u4e2a\u989c\u8272\uff0c\u4e00\u6b21\u67e5\u8be2\u5f62\u5982\u5355\u70b9\u67e5\u8be2\u96c6\u5408\u5927\u5c0f\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u79cd\u989c\u8272\u8bb0\u5f55\u5f53\u524d\u957f\u5ea6\u4e3a\u591a\u5c11\u7684\u524d\u7f00\u5df2\u7ecf\u5305\u542b\u8fd9\u79cd\u989c\u8272\uff0c\u79f0\u4e3a $pos_i$\uff0c\u90a3\u4e48\u4e00\u6b21\u4fee\u6539\u5c31\u662f\u533a\u95f4 $(pos_i,k]$ \u52a0 1\uff0c$pos_i\\larr \\max(pos_i,k)$\uff0c\u4e00\u6b21\u67e5\u8be2\u5c31\u662f\u5355\u70b9\u67e5\u8be2\uff0c\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n+m\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n\u770b\u61c2\u4e86\u7684\u5e94\u8be5\u90fd\u4f1a\u5b9e\u73b0\uff0c\u5c31\u4e0d\u653e\u4ee3\u7801\u4e86\u3002",
        "postTime": 1632445804,
        "uid": 55707,
        "name": "gxy001",
        "ccfLevel": 9,
        "title": "P7880 [Ynoi2006] rldcot"
    },
    {
        "content": "\u8fd9\u4e2a\u61a8\u6279 DPair \u4e3a\u4e86\u62a2\u4e00\u8840\u5199\u4e86\u4e00\u4e2a\u4e0b\u5348\u7684\u6839\u53f7\u505a\u6cd5\u7136\u540e\u5361\u4e86\u4e00\u4e2a\u665a\u4e0a\u7684\u5e38\uff0c\u6700\u7ec8\u5728 **\u795e\u00b7zhoukangyang** \u79d2\u6389\u8fd9\u9053\u9898\u540e~~\u53d1\u73b0\u4ed6\u4ee3\u7801\u91cc\u6ca1\u5206\u5757~~\u624d\u89c9\u609f\u8fc7\u6765\u6709\u8d85\u7ea7 naive \u7684 polylog \u505a\u6cd5\n\n***\n\n\u8003\u8651\u8fd9\u9053\u9898\u4e25\u683c\u96be\u4e8e\u533a\u95f4\u6570\u989c\u8272\uff0c\u56e0\u6b64\u4e0d\u662f\u626b\u63cf\u7ebf\u5c31\u662f\u83ab\u961f\n\n\u83ab\u961f\u505a\u6cd5\u7684\u5927\u5e38\u6570\u96be\u4ee5\u901a\u8fc7\u672c\u9898\uff0c\u56e0\u6b64\u8003\u8651\u626b\u63cf\u7ebf\n\n\u626b\u63cf\u7ebf\u6570\u989c\u8272\u7684\u7ecf\u5178\u5957\u8def\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u989c\u8272\u7ef4\u62a4\u51fa\u5176\u6700\u540e\u4e00\u6b21\u4ea7\u751f\u8d21\u732e\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6c42\u4e00\u4e2a\u533a\u95f4\u548c\n\n\u8003\u8651\u8fd9\u9053\u9898\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u4e00\u4e2a LCA **\u53ef\u80fd** \u4f1a\u5728 **\u540e\u5f80\u524d\u7b2c\u4e00\u6b21** \u51fa\u73b0\u7684\u4f4d\u7f6e\u4e0a\u4ea7\u751f\u8d21\u732e\n\n\u7136\u540e\u6211\u4eec\u5148\u8003\u8651\u6c42\u51fa\u6240\u6709\u8fd9\u79cd\u4f4d\u7f6e\n\n\u53d1\u73b0\u82e5\u4e00\u4e2a\u70b9\u8981\u4f5c\u4e3a LCA \u4ea7\u751f\u8d21\u732e\uff0c\u9996\u5148\u5b83\u4e00\u5b9a\u53ef\u4ee5\u5728\u5b83\u672c\u8eab\u7684\u4f4d\u7f6e\u4ea7\u751f\u4e00\u6b21\u8d21\u732e\uff0c\u90a3\u4e48\u8fd9\u7c7b\u8d21\u732e\u603b\u5171\u6709 $O(n)$ \u4e2a\uff0c\u6309\u4e00\u822c\u7684\u505a\u6cd5\u5904\u7406\u5373\u53ef\n\n\u7136\u540e\u8003\u8651\u5269\u4e0b\u7684\u8d21\u732e\u5fc5\u7136\u662f\u8fd9\u4e2a\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u4e2d\u5206\u522b\u53d6\u4e00\u4e2a\u70b9\n\n\u4f46\u662f\u8fd9\u6837\u7684\u70b9\u5bf9\u4e2a\u6570\u8fc7\u591a\u4e86\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u6211\u4eec\u8003\u8651\u51cf\u6389\u65e0\u7528\u70b9\u5bf9\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e09\u5bf9 **\u5408\u6cd5** \u70b9 $(u, v), (u, w), (v, w)$\uff0c\u82e5 $u<v<w$ \uff0c\u90a3\u4e48\u663e\u7136 $(u, w)$ \u662f\u4e0d\u53ef\u80fd\u8ba1\u5165\u8d21\u732e\u7684\u3002\n\n\u56e0\u6b64\u80fd\u548c\u4e00\u4e2a\u70b9\u5f62\u6210\u4e00\u4e2a **\u8ba1\u5165\u8d21\u732e\u7684\u5408\u6cd5\u70b9\u5bf9** \u5fc5\u7136\u662f\u5b83\u548c\u5b83\u5728\u5176\u4ed6\u5b50\u6811\u5185\u7684\u524d\u9a71\u540e\u7ee7\n\n\u8003\u8651\u6211\u4eec\u5728\u66f4\u524d\u9762\u7684\u70b9\u5904\u4ea7\u751f\u8d21\u732e\uff0c\u90a3\u4e48\u5c31\u662f\u5b83\u5728\u5176\u4ed6\u5b50\u6811\u5185\u7684\u524d\u9a71\n\n\u90a3\u4e48\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u7528 dsu on tree \u89e3\u51b3\n\n\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u4e5f\u4e00\u5e76\u89e3\u51b3\u4e86\uff0c\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u4f1a\u53d1\u73b0\u8fd9\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u5206\u6790\u548c DSU on tree \u662f\u7c7b\u4f3c\u7684\uff0c\u8bbf\u95ee\u5230\u7684\u70b9\u6570\u662f $O(n\\log n)$ \u7ea7\u522b\u7684\uff0c\u800c\u6bcf\u4e00\u4e2a\u70b9\u4ea7\u751f\u7684\u8d21\u732e\u662f $O(1)$\uff0c\u56e0\u6b64\u8fd9\u6837\u7684\u70b9\u6570\u5c31\u662f $O(n\\log n)$ \u7684\n\n\u56e0\u6b64\u603b\u5171\u662f $O(n\\log n)$ \u6b21\u5355\u70b9\u4fee\u6539\u548c\u524d\u9a71\u540e\u7ee7\u64cd\u4f5c\uff0c\u7136\u540e\u662f $O(q)$ \u6b21\u533a\u95f4\u4fee\u6539\n\n\u7531\u4e8e\u672c\u9898 $n, q$ \u4e0d\u540c\u9636\uff0c\u76f4\u63a5\u4e0a\u6811\u72b6\u6570\u7ec4\u5c31\u884c\u4e86\n\n\u6700\u7ec8\u590d\u6742\u5ea6 $O(n\\log^2 n+q\\log n)$ \n\n",
        "postTime": 1632405881,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u3010P7880 [Ynoi2006] rldcot\u3011"
    },
    {
        "content": "\u8fd8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\u3002\n\n\u5148\u6765\u8bb2\u4e00\u79cd\u6bd4\u8f83\u597d\u60f3\u7684\u5927\u4f17\u505a\u6cd5\uff0c\u6211\u521a\u5f00\u59cb\u4e5f\u662f\u8fd9\u4e48\u641e\u7684\uff0c\u611f\u89c9\u601d\u7ef4\u633a\u8fde\u8d2f\u7684\uff0c\u6ca1\u6709\u4ec0\u4e48\u9700\u8981\u5f00\u62d3\u4eba\u7c7b\u667a\u6167\u7684\u5730\u65b9\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u70b9\u53ea\u6709\u53ef\u80fd\u88ab\u81ea\u5df1\u6216\u8005\u6765\u81ea\u4e0d\u540c\u5b50\u6811\u7684\u4e24\u4e2a\u70b9\u8d21\u732e\u3002\n\n\u81ea\u5df1\u8d21\u732e\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u7edf\u8ba1\u5565\u7684\u53cd\u6b63\u5f88\u597d\u505a\u3002\n\n\u6765\u81ea\u4e0d\u540c\u5b50\u6811\u7684\u4e24\u4e2a\u70b9\uff0c\u5957\u8def\u5730\u6bd4\u8f83\u60f3\u9700\u8981\u7edf\u8ba1\u7684\u70b9\u5bf9\u6570\u91cf\u7ea7\u4e00\u5b9a\u8fdc\u8fdc\u5c0f\u4e8e $|siz| ^ 2$\uff0c\u5176\u4e2d $siz$ \u662f\u5b50\u6811\u5927\u5c0f\uff0c\u56e0\u4e3a\u663e\u7136\u82e5\u5bf9\u4e8e\u5b50\u6811\u4e2d\u7684\u56db\u4e2a\u70b9 $a,b,c,d$\uff0c\u6ee1\u8db3 $a,d$ \u6765\u81ea\u4e0d\u540c\u5b50\u6811\uff0c$b,c$ \u6765\u81ea\u4e0d\u540c\u5b50\u6811\u4e14 $a < b < c < d$\uff0c\u4e00\u4e2a\u533a\u95f4\u5305\u4f4f\u4e86 $a,d$ \u663e\u7136\u4e5f\u5305\u4f4f\u4e86 $b,c$\uff0c\u6240\u4ee5 $a,d$ \u663e\u7136\u88ab\u6392\u9664\u4e86\u7edf\u8ba1\u70b9\u5bf9\u7684\u8303\u7574\u3002\n\n\u6b64\u65f6\u4e00\u4e2a\u6bd4\u8f83\u76f4\u89c2\u7684\u601d\u60f3\u662f\u7ef4\u62a4\u4e00\u4e2a\u70b9\u5176\u5b50\u6811\u5185\u4efb\u610f\u70b9 $x$ \u5728\u5176\u4ed6\u5b50\u6811\u7684\u6807\u53f7\u524d\u9a71/\u540e\u7ee7\uff0c\u6839\u636e\u4e0a\u8ff0\u7ed3\u8bba\u663e\u7136\u4e0e $x$ \u76f8\u5173\u7684\u7edf\u8ba1\u70b9\u5bf9\u53ea\u6709\u53ef\u80fd\u662f $(pre_x,x),(x,suf_x)$ \u4e24\u79cd\u70b9\u5bf9\u3002\n\n\u4f46\u662f\u81f3\u6b64\uff0c\u6784\u9020\u7684\u6570\u636e\u4ecd\u7136\u53ef\u4ee5\u5c06\u5168\u5c40\u70b9\u5bf9\u91cf\u5361\u5230 $O(n ^ 2)$ \u7ea7\u522b\uff0c\u9700\u8981\u7ee7\u7eed\u538b\u7f29\u70b9\u5bf9\u91cf\u3002\n\n\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c$n \\leq 10 ^ 5,m \\leq 5 \\times 10 ^ 5$\uff0c\u731c\u6d4b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\log ^ 2 n + m \\log n)$\uff0c\u731c\u6d4b\u7edf\u8ba1\u70b9\u5bf9\u91cf\u6700\u540e\u53ef\u4ee5\u88ab\u538b\u5230 $O(n \\log n)$ \u7ea7\u522b\u3002\n\n\u8003\u8651\u5230\u4e00\u79cd\u526a\u679d\u65b9\u6cd5\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u5f00\u59cb\u52a0\u5165\u4e00\u68f5\u5b50\u6811\u7684\u65f6\u5019\uff0c\u4e0d\u5355\u72ec\u5c06\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u4f5c\u4e3a\u57fa\u51c6\u52a0\u5165\u7edf\u8ba1\u70b9\u5bf9\u5185\uff0c\u800c\u5728\u540e\u9762\u7684\u5b50\u6811\u52a0\u5165\u65f6\u624d\u5c06\u5b50\u6811\u5185\u7684\u70b9\u4f5c\u4e3a $x$\uff0c\u5c06 $(pre_x,x),(x,suf_x)$ \u52a0\u5165\u7edf\u8ba1\u70b9\u5bf9\u3002\n\n\u5176\u4ed6\u9898\u89e3\u5e76\u672a\u7ed9\u51fa\u8fd9\u4e48\u505a\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u4e0d\u8fc7\u4e5f\u633a\u597d\u7406\u89e3\u7684\u3002\u6211\u4eec\u77e5\u9053\u6b64\u65f6\u552f\u4e00\u770b\u4f3c\u65e0\u6cd5\u4fdd\u8bc1\u7684\u662f\u7b2c\u4e00\u68f5\u5b50\u6811\u5185\u4ea7\u751f\u7684\u7edf\u8ba1\u70b9\u5bf9\u662f\u5426\u80fd\u7edf\u8ba1\u5b8c\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u50cf\u524d\u9a71\u540e\u7ee7\u8fd9\u4e9b\u4e1c\u897f\u672c\u8eab\u5c31\u6709\u4e00\u4e9b\u7c7b\u4f3c\u5bf9\u79f0\u6027\u7684\u5173\u7cfb\uff1a$x$ \u7684\u524d\u9a71\u662f $pre_x$\uff0c$pre_x$ \u7684\u540e\u7ee7\u81ea\u7136\u5c31\u662f $x$\uff1b$x$ \u7684\u540e\u7ee7\u662f $suf_x$\uff0c$suf_x$ \u7684\u540e\u7ee7\u662f $x$\u3002\u5373\u7b2c\u4e00\u68f5\u5b50\u6811\u4ea7\u751f\u7684\u7edf\u8ba1\u70b9\u5bf9\u88ab\u56ca\u62ec\u5728\u4e86\u540e\u9762\u5b50\u6811\u4ea7\u751f\u7684\u7edf\u8ba1\u70b9\u5bf9\u5185\u3002              \n\n\u540c\u65f6\u4e5f\u4f1a\u51fa\u73b0\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u4ee5\u540e\u7ee7\u4e3e\u4f8b\uff0c\u7b2c\u4e00\u68f5\u5b50\u6811\u5185\u7684\u8282\u70b9 $x$ \u5728\u5176\u4ed6\u5b50\u6811\u5185\u7684\u540e\u7ee7\u662f $suf_x$\uff0c\u800c $suf_x$ \u5728\u5176\u5b83\u5b50\u6811\u5185\u7684\u524d\u9a71\u4e0d\u662f $x$ \u800c\u662f $y$\uff0c\u6b64\u65f6 $y$ \u663e\u7136\u662f\u548c $x$ \u90fd\u5728\u7b2c\u4e00\u68f5\u5b50\u6811\u5185\u7684\uff0c\u800c\u663e\u7136 $[x,suf_x] \\in [y,suf_x]$\uff0c\u6b64\u65f6\u7edf\u8ba1\u70b9\u5bf9\u8fd8\u662f\u88ab\u7edf\u8ba1\u5230\u4e86\u3002 \n\n\u800c\u81f3\u4e8e\u7b2c\u4e00\u9897\u5b50\u6811\u5185\u90e8\u662f\u4e0d\u80fd\u4e92\u76f8\u4f5c\u4e3a\u7edf\u8ba1\u70b9\u5bf9\u7684\uff0c\u8fd9\u4e2a\u526a\u679d\u7684\u6b63\u786e\u6027\u5c31\u5f97\u5230\u4e86\u4fdd\u8bc1\u3002\n\n\u63a5\u7740\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u5f88\u81ea\u7136\u4e86\u3002\u76f4\u63a5\u628a\u91cd\u513f\u5b50\u5bf9\u5e94\u7684\u5b50\u6811\u7ed9\u5f53\u4f5c\u7b2c\u4e00\u68f5\u5b50\u6811\uff0c\u5176\u5b83\u7684\u5b50\u6811\u66b4\u529b\u7b97\u5b83\u4eec\u4ea7\u751f\u7684\u8d21\u732e\u70b9\u5bf9\uff0c\u6839\u636e\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u590d\u6742\u5ea6\u53ef\u77e5\uff0c\u603b\u7684\u70b9\u5bf9\u6570\u91cf\u7ea7\u88ab\u538b\u5230\u4e86 $O(n \\log n)$\u3002          \n\n\u95ee\u9898\u73b0\u5728\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u5f62\u5f0f\uff1a\u6709 $O(n \\log n)$ \u6570\u91cf\u7ea7\u7684\u4e09\u5143\u7ec4 $(l,r,x)$\uff0c\u8868\u793a\u82e5\u4e00\u4e2a\u533a\u95f4 $[L,R]$ \u5305\u542b\u4e86 $[l,r]$ \u5c31\u5177\u6709\u4e00\u79cd\u989c\u8272 $x$\uff0c\u73b0\u5728\u6709 $q$ \u6b21\u67e5\u8be2\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 $[L,R]$ \u7684\u989c\u8272\u6570\u3002\n\n\u8fd9\u4e2a\u626b\u63cf\u7ebf\u7ecf\u5178\u9898\u5427\u2026\u2026\u628a\u6240\u6709\u4e09\u5143\u7ec4\u6309\u7167 $r$ \u6392\u5e8f\u540e\u770b\u5f53\u524d\u989c\u8272 $x$ \u52a0\u5230\u4e86\u54ea\u4e2a\u524d\u7f00\uff0c\u518d\u5728\u524d\u7f00\u540e\u9762\u4e00\u76f4\u52a0\u52a0\u5230 $l$ \u540e\u66f4\u65b0\u4e00\u4e0b $x$ \u989c\u8272\u52a0\u5230\u7684\u524d\u7f00\uff0c\u505a\u5b8c\u4e86\u3002                   \n\n\u4ee5\u4e0a\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u5927\u4f17\u505a\u6cd5\uff0c\u5176\u5b9e\u60f3\u8d77\u6765\u53ef\u80fd\u5f88\u5feb\uff0c\u4f46\u662f\u4e3a\u4e86\u4e00\u4e9b\u521d\u5b66\u6570\u636e\u7ed3\u6784\u7684 Oier \u8fd8\u662f\u8bb2\u7684\u6bd4\u8f83\u8be6\u7ec6\u3002\n\n\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4e2a\u4eba\u5199\u7684 LCT \u505a\u6cd5\uff0c~~\u5f53\u7136\u662f\u81ea\u5df1\u6ca1\u60f3\u5230\u7684\u3002~~\n\n\u8fd8\u662f\u57fa\u4e8e\u4e00\u79cd\u67d3\u8272\u7684\u601d\u60f3\u4ee5\u53ca access \u7684\u5e94\u7528\u3002\n\n\u8fd8\u662f\u5148\u626b\u63cf\u7ebf\uff0c\u6bcf\u6b21\u5411\u53f3\u8fb9\u626b\u63cf $r$ \u7684\u65f6\u5019\u5c06 $1 \\sim r$ \u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u67d3\u8272\u6210 $r$\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u67d3\u8272\u6307\u7684\u5c31\u662f $r$\uff0c\u800c\u4e0d\u662f $dep_r$\u3002\u8fd9\u91cc\u67d3\u8272\u662f\u4e3a\u4e86\u65b9\u4fbf\u5728\u540e\u9762\u76f4\u63a5\u62ff\u51fa\u6765\u7b97\u7edf\u8ba1\u70b9\u5bf9\u3002\n\n\u8003\u8651\u5982\u679c\u4e4b\u540e\u626b\u63cf\u5230\u4e00\u4e2a\u70b9 $z,z>r$\uff0c\u90a3\u4e48 $z,r$ \u53ea\u4f1a\u5728 $lca(z,r)$ \u5904\u8d21\u732e\u4e00\u4e0b\uff0c\u4e4b\u540e\u90fd\u4e0d\u4f1a\u8d21\u732e\u4e86\u3002                 \n\n\u7136\u540e\u5c31\u6709 @[gxy001](https://www.luogu.com.cn/user/55707) \u795e\u4ed9\u60f3\u5230\u4e86 LCT\u3002\n\n\u5c06\u8def\u5f84\u8d4b\u503c\u770b\u4f5c LCT \u4e0a\u7684 access \u5e76\u5bf9\u8def\u5f84\u4e0a\u7684\u70b9\u8d4b\u503c\u3002\u82e5\u51fa\u73b0\u4e86\u865a\u8fb9\u548c\u5b9e\u8fb9\u53d8\u5316\uff0c\u8bf4\u660e\u9700\u8981\u5728\u4ea4\u754c\u5904\u7684\u8282\u70b9\u8d21\u732e\uff0c\u4ea7\u751f\u4e00\u4e2a\u4e0a\u6587\u6240\u8ff0\u7684 $(l,r,x)$ \u7684\u4e09\u5143\u7ec4\u7edf\u8ba1\u70b9\u5bf9\u3002\n\n\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u505a\u6b63\u786e\u6027\u80af\u5b9a\u662f\u6709\u7684\u3002\u786e\u786e\u5b9e\u5b9e\u53ea\u80fd\u5728\u865a\u5b9e\u53d8\u5316\u5904\u627e\u5230\u4e92\u76f8\u8d21\u732e\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u7531\u4e8e\u662f\u5411\u540e\u63a8\u8fdb\u7684\u8d4b\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u5230\u7684\u524d\u7f00\u51fa\u73b0\u5730\u4e5f\u80af\u5b9a\u662f\u5728\u5408\u6cd5\u6027\u4e0b\u6700\u9760\u540e\u7684\u3002\n\n\u7136\u540e\u4ea7\u751f\u7684\u70b9\u5bf9\u6570\u91cf\u7ea7\u662f\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\uff0cLCT access \u65f6\u865a\u8fb9\u548c\u5b9e\u8fb9\u53d8\u5316\u65f6\u7684\u6570\u91cf\u7ea7\u4e3a $O(n \\log n)$\uff0c\u7136\u540e\u5c31\u662f\u4e00\u6837\u7684\u626b\u63cf\u7ebf\u64cd\u4f5c\u4e86\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4e0d\u5361\u5e38\u4e0d\u5361\u7a7a\u95f4\u4e5f\u4e0d\u8fc7\u4e8e\u56f0\u96be\u5b9e\u73b0\u4e5f\u6bd4\u8f83\u7b80\u5355\uff08\u81f3\u5c11 LCT \u5199\u6cd5\u662f\uff09\uff0c\u5f88\u597d\u7684\u4e00\u9053\u9898\u3002\n\n",
        "postTime": 1646965549,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7880 [Ynoi2006] rldcot"
    },
    {
        "content": "## \u6811\u4e0a\u70b9\u5bf9+\u6570\u989c\u8272\u95ee\u9898\n\n\u70b9\u5bf9 $O(n^2)$ \u4e2a\u70b9\u5bf9\u663e\u7136\u662f\u70b8\u4e86\u7684 \u8003\u8651\u4f18\u5316 \u8be2\u95ee\u5728\u533a\u95f4\u4e2d\u4e8c\u5143\u7ec4 \u5178\u578b\u5957\u8def\u662f set \u7ef4\u62a4\u7f16\u53f7\u524d\u9a71\u540e\u7ee7 [P6617 \u67e5\u627e Search](https://www.luogu.com.cn/problem/P6617)\n\n\u4e0a\u9762\u4f8b\u9898\u662f\u9700\u8981\u5e26\u4fee\u7684 \u73b0\u5728\u7684\u95ee\u9898\u4e0d\u5e26\u4fee\u5f31\u4e0d\u5c11\n\ndsu on tree \u5904\u7406\u70b9\u5bf9\u95ee\u9898\u7ecf\u5178\u5957\u8def\u662f\u679a\u4e3e lca \u6211\u4eec\u5206\u522b\u5904\u7406\u6bcf\u4e2a lca \u7684\u8d21\u732e\n\n\u8003\u8651\u73b0\u5728\u5904\u7406\u8282\u70b9 $x$ \u5b58\u5728\u7684 $3$ \u79cd\u70b9\u5bf9 \n\n1. \u5728\u540c\u5b50\u6811\u5185\n\n2. \u4e00\u70b9\u4e3a $x$\n\n3. \u4e24\u70b9\u5f02\u5b50\u6811\n\n\u7c7b\u578b 1 \u5206\u6cbb\u4e0b\u53bb\u5c31\u597d \n\n\u7c7b\u578b 2 \u5fc5\u7136\u5305\u542b\u70b9\u5bf9  $(x,x)$ \u6240\u4ee5\u6ca1\u5fc5\u8981\u5904\u7406\n\n\u7c7b\u578b 3 \u6211\u4eec\u6bcf\u6b21\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u4e00\u4e9b\u5b50\u6811 \u5bf9\u4e8e\u4e00\u4e2a\u65b0\u5b50\u6811 \u5148\u5168\u90e8\u67e5\u8be2\u5176\u4e2d\u70b9 \u5728\u5168\u90e8\u63d2\u5165\u5df2\u5904\u7406\u5b8c\u7684\u90e8\u5206\u5373\u53ef \u5177\u4f53\u5730\u5373\u5148\u67e5\u5f53\u524d\u5904\u7406\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u5728\u5df2\u5904\u7406\u5b8c\u5730\u6240\u6709\u5b50\u6811\u70b9\u7f16\u53f7\u7684\u4e00\u4e2a set \u4e2d\u7684\u524d\u9a71\u540e\u7ee7 \u5c06 $(p,pre)$ \u548c $(p,suf)$ \u8bb0\u5f55\u5728\u5bf9\u5f53\u524d\u5904\u7406\u7684 lca \u7684 dep \u5373 $x$ \u7684 dep \u7684\u8d21\u732e\u4e2d \u50a8\u5b58\u4e00\u4e2a vector \u5373\u53ef\n\n\u8fd9\u6837\u7531\u4e8e dsu \u662f\u81f3\u591a\u6709 $O(n\\log n)$ \u6b21\u63d2\u5165 \u6240\u4ee5\u53ea\u6709 $O(n\\log n)$ \u4e2a\u70b9\u5bf9 \n\n\u68b3\u7406\u4e00\u4e0b\u73b0\u5728\u6211\u4eec\u7684\u4efb\u52a1\n\n\u6211\u4eec\u6709 $O(n)$ \u4e2a vector \u5176\u4e2d\u603b\u5171\u6709 $O(n\\log n)$ \u4e2a\u70b9\u5bf9 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee \u82e5\u5b8c\u5168\u5305\u542b\u5176\u4e2d\u4e00\u4e2a vector \u4e2d\u7684\u4e00\u4e2a\u70b9\u5bf9 \u5219\u6b64 vector \u5bf9\u6b64\u8be2\u95ee\u6709\u8d21\u732e\n\n\u7531\u4e8e vector \u4e2d\u6709\u8bb8\u591a\u70b9\u5bf9 \u6211\u4eec\u8003\u8651\u53bb\u91cd \u5bf9\u6bcf\u4e2a\u70b9\u5bf9\u76f8\u5f53\u4e8e\u4e8c\u7ef4\u5e73\u9762\u4e0a\u4e00\u4e2a\u70b9 \n\n\u6211\u4eec\u8003\u8651\u4ed6\u5bf9\u90a3\u4e9b\u8be2\u95ee\u6709\u8d21\u732e \u663e\u7136\u662f\u6bd4\u4ed6\u5728 $l$ \u7ef4\u5ea6\u5c0f $r$ \u7ef4\u5ea6\u5927\u7684 \u5c06\u8fd9\u4e9b\u8d21\u732e\u4f5c\u4e3a 2 side \u77e9\u5f62 \u4ecd\u6709\u91cd\u590d\u90e8\u5206 \u7528\u5355\u8c03\u6808\u5dee\u5206\u4e3a 3 side \u77e9\u5f62\u5373\u53ef \u8fd9\u6837\u540c\u4e00 vector \u6bcf\u6b21\u81f3\u591a\u8d21\u732e\u4e3a 1\n\n\u603b\u7ed3\u8d77\u6765\u5c31\u662f\u989c\u8272\u5206\u522b\u505a\u8d21\u732e\n\n\u6ca1\u4e86\n\n\u6ce8\u610f dsu \u7ec6\u8282 \u4e00\u4e2a\u8282\u70b9\u5904\u7406\u5b8c\u4e4b\u540e\u4e5f\u8981\u628a\u4ed6\u81ea\u8eab\u63d2\u8fdb set \u6211\u4e00\u76f4\u4ee5\u4e3a\u6211\u626b\u63cf\u7ebf\u6709\u9505\u7ed3\u679c\u8c03\u4e86\u534a\u5929\u6ca1\u51fa\u6765\u3002\u3002\u6211\u8fd8\u662f\u592a\u84bb\u4e86 qnq\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n;\ninline int read()\n{\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')f=1;\n\t\tc=getchar();\n\t}\n\twhile(c<='9'&&c>='0')\n\t{\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int N=1e5+3;\nconst int M=5e5+3;\n#define ll long long\n#define oo 11451419\nstruct node\n{\n\tint to;\n\tint nxt;\n\tll w;\n}e[N<<1];\nint h[N],etot;\ninline void eadd(int x,int y,int w)\n{\n\te[++etot].to=y;\n\te[etot].nxt=h[x];\n\te[etot].w=w*1ll;\n\th[x]=etot;\n}\n\nint fa[N],son[N],siz[N],dep[N];\nll w[N];\nvoid build(int x)\n{\n\tsiz[x]=1;\n\tint maxson=-1;\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa[x])\n\t\t{\n\t\t\tfa[e[i].to]=x;\n\t\t\tdep[e[i].to]=dep[x]+1;\n\t\t\tw[e[i].to]=w[x]+e[i].w;\n\t\t\tbuild(e[i].to);\n\t\t\tsiz[x]+=siz[e[i].to];\n\t\t\tif(siz[e[i].to]>maxson)\n\t\t\t{\n\t\t\t\tmaxson=siz[e[i].to];\n\t\t\t\tson[x]=e[i].to;\n\t\t\t}\n\t\t}\n\t}\n}\nset<int>s;\ninline int get_pre(int x)\n{\n\tset<int>::iterator it;\n\tit=s.lower_bound(x);\n\tit--;\n\treturn *it;\n}\ninline int get_suf(int x)\n{\n\tset<int>::iterator it;\n\tit=s.upper_bound(x);\n\treturn *it;\n}\nmap<ll,int>mp;\nint tot;\nstruct dot\n{\n\tint x,y;\n\tbool friend operator < (const dot a,const dot b)\n\t{\n\t\treturn a.x<b.x;\n\t}\n};\nvector<dot>v[N];\ninline void add(int a,int b,int lca)\n{\n\tll d=w[lca];\n\tif(!mp[d])\n\t{\n\t\tmp[d]=++tot;\n\t\t//cout<<\"color:\"<<d<<endl;\n\t}\n\tif(a>b)swap(a,b);\n\tv[mp[d]].emplace_back((dot){a,b});\n}\nint tmp[N],cnttmp;\nvoid dfs(int x,int rt)\n{\n\tint pre=get_pre(x);\n\tint suf=get_suf(x);\n\tif(pre)add(x,pre,rt);\n\tif(suf!=oo)add(x,suf,rt);\n\ttmp[++cnttmp]=x;\n\tfor(int i=h[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to!=fa[x])\n\t\tdfs(e[i].to,rt);\n\t}\n}\n\nvoid dsu(int x)\n{\n\tif(son[x])\n\t{\n\t\tfor(int i=h[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tif(e[i].to!=fa[x]&&e[i].to!=son[x])\n\t\t\t{\n\t\t\t\tdsu(e[i].to);\n\t\t\t\ts.clear();\n\t\t\t\ts.insert(0);\n\t\t\t\ts.insert(oo);\n\t\t\t}\n\t\t}\n\t\tdsu(son[x]);\n\t\tfor(int i=h[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tif(e[i].to!=fa[x]&&e[i].to!=son[x])\n\t\t\t{\n\t\t\t\tdfs(e[i].to,x);\n\t\t\t\twhile(cnttmp)s.insert(tmp[cnttmp--]);\n\t\t\t}\n\t\t}\n\t}\n\tadd(x,x,x);\n\ts.insert(x);\n}\n\ndot stc[N*100];\nint topm;\nstruct _line\n{\n\tint pos,r,v;\n\tbool friend operator < (const _line a,const _line b)\n\t{\n\t\treturn a.pos<b.pos;\n\t}\n}line[N*200];\nint ltot;\ninline void rec_add(int x,int y,int v)\n{\n\tline[++ltot].pos=x;\n\tline[ltot].r=y;\n\tline[ltot].v=v;\n}\n\ninline void into_rec(int id)\n{\n\tsort(v[id].begin(),v[id].end());\n\ttopm=0;\n\tfor(int i=0;i<v[id].size();i++)\n\t{\n\t\twhile(topm&&v[id][i].y<=stc[topm].y)--topm;\n\t\tif(topm)stc[++topm]=v[id][i];\n\t\telse\n\t\tstc[++topm]=v[id][i];\n\t}\n\tint lst=1;\n\tfor(int i=1;i<=topm;i++)\n\t{\n\t\trec_add(lst,stc[i].y,1);\n\t\trec_add(stc[i].x+1,stc[i].y,-1);\n\t\tlst=stc[i].x+1;\n\t}\n}\nstruct qes \n{\n\tint id;\n\tint l,r;\n\tbool friend operator < (const qes a,const qes b)\n\t{\n\t\treturn a.l<b.l;\n\t}\n}q[M];\nll ans[M];\n\nll t[N];\n#define lb x&-x\ninline void modify(int x,int dx)\n{\n\tfor(;x<=n;x+=lb)t[x]+=dx;\n}\ninline ll query(int x)\n{\n\tll res=0;\n\tfor(;x;x-=lb)res+=t[x];\n\treturn res;\n}\n\nsigned main()\n{\n\tn=read();\n\tint m=read();\n\ts.insert(0);\n\ts.insert(oo);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read(),w=read();\n\t\teadd(x,y,w);\n\t\teadd(y,x,w);\n\t}\n\tdep[1]=1;\n\tbuild(1);\n\tdsu(1);\n\tfor(int i=1;i<=tot;i++)\n\tif(!v[i].empty())into_rec(i);\n\t//cout<<tot<<endl;\n\tsort(line+1,line+ltot+1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tq[i].id=i;\n\t\tq[i].l=read();\n\t\tq[i].r=read();\n\t}\n\tsort(q+1,q+m+1);\n\tint lcnt=1,qcnt=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\twhile(line[lcnt].pos==i)\n\t\t{\n\t\t\tmodify(line[lcnt].r,line[lcnt].v);\n\t\t\tlcnt++;\n\t\t}\n\t\twhile(q[qcnt].l==i)\n\t\t{\n\t\t\tans[q[qcnt].id]=query(q[qcnt].r);\n\t\t\tqcnt++;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1646482139,
        "uid": 223560,
        "name": "_HL_",
        "ccfLevel": 0,
        "title": "P7880 [Ynoi2006] rldcot \u9898\u89e3"
    }
]