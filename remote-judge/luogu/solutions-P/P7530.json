[
    {
        "content": "\u8003\u8651\u679a\u4e3e\u6bcf\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u5de6\u7aef\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n\n\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u7684\u70b9\u4e3a $i$\uff0c\u503c\u4e3a $b_i$\uff0c\u4e0a\u4e00\u4e2a\u51fa\u73b0 $b_i$ \u7684\u4f4d\u7f6e\u4e3a $pre_{b_i}$\uff0c\u663e\u7136\u5de6\u7aef\u70b9\u53ea\u80fd\u5728 $(pre_{b_i},i-1)$ \u8303\u56f4\u5185\u53d6\n\n\u8003\u8651\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9 $x$ \u5bf9\u6bcf\u4e2a\u5de6\u7aef\u70b9\u7684\u8d21\u732e\uff0c\u90a3\u4e48\u6240\u6709\u5728 $(pre_{b_x},x)$ \u4e2d\u7684\u5de6\u7aef\u70b9\u7684\u65b9\u6848\u6570\u90fd\u53ef\u4ee5 +1\uff08\u8fd9\u4e9b\u5de6\u7aef\u70b9\u53ef\u4ee5\u9009 $x$ \u4f5c\u4e3a\u4e2d\u95f4\u70b9\uff09\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u80fd\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7684\u70b9\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u7b49\u4e8e $0/1$ \u7684\u7cfb\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u7aef\u70b9\n\n\u90a3\u4e48\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u5c31\u662f\u5355\u70b9\u6539\u7cfb\u6570\uff0c\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u4e8e\u662f\u968f\u4fbf\u6253\u4e00\u4e2a\u6807\u8bb0\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\n\ncode:\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 200010\n#define int long long\nusing namespace std;\nint n,b[MAXN];\nstruct segtree{\n\tint t[MAXN<<2],sz[MAXN<<2];\n\t//  answer     size\n\tint val[MAXN<<2],tag[MAXN<<2];\n\t//  real         lazytag\n\tvoid pushup(int p){t[p]=t[p<<1]+t[p<<1|1];sz[p]=sz[p<<1]+sz[p<<1|1];}\n\tvoid pushdown(int p){\n\t\tif(!tag[p])return;\n\t\tval[p<<1]+=tag[p];val[p<<1|1]+=tag[p];\n\t\tt[p<<1]+=tag[p]*sz[p<<1];t[p<<1|1]+=tag[p]*sz[p<<1|1];\n\t\ttag[p<<1]+=tag[p];tag[p<<1|1]+=tag[p];\n\t\ttag[p]=0;\n\t}\n\tvoid update(int p,int l,int r,int pos,int sgn){\n\t\t//size modify\n\t\tif(l==r){sz[p]+=sgn;t[p]=sz[p]*val[p];return;}\n\t\tpushdown(p);int mid=(l+r)>>1;\n\t\tif(pos<=mid)update(p<<1,l,mid,pos,sgn);\n\t\telse update(p<<1|1,mid+1,r,pos,sgn);\n\t\tpushup(p);\n\t}\n\tvoid modify(int p,int l,int r,int L,int R,int sgn){\n\t\t//real number modify\n\t\tif(L>R)return;\n\t\tif(L<=l&&r<=R){\n\t\t\ttag[p]+=sgn;val[p]+=sgn;\n\t\t\tt[p]+=sgn*sz[p];return;\n\t\t}pushdown(p);int mid=(l+r)>>1;\n\t\tif(L<=mid)modify(p<<1,l,mid,L,R,sgn);\n\t\tif(R>mid)modify(p<<1|1,mid+1,r,L,R,sgn);\n\t\tpushup(p);\n\t}\n\tint query(int p,int l,int r,int L,int R){\n\t\tif(L>R)return 0;\n\t\tif(L<=l&&r<=R)return t[p];\n\t\tpushdown(p);int mid=(l+r)>>1;\n\t\tif(R<=mid)return query(p<<1,l,mid,L,R);\n\t\tif(L>mid)return query(p<<1|1,mid+1,r,L,R);\n\t\treturn query(p<<1,l,mid,L,R)+query(p<<1|1,mid+1,r,L,R);\n\t}\n}T;\nint pre[MAXN],ppre[MAXN],ans;\nsigned main(){\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&b[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tint now=b[i];\n\t\tif(pre[now])T.update(1,1,n,pre[now],-1);\n\t\tif(pre[now])T.modify(1,1,n,ppre[now]+1,pre[now]-1,-1);\n\t\tans+=T.query(1,1,n,pre[now]+1,i-1);\n\t\tT.modify(1,1,n,pre[now]+1,i-1,1);T.update(1,1,n,i,1);\n\t\tppre[now]=pre[now];pre[now]=i;\n\t}printf(\"%lld\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1619881889,
        "uid": 65681,
        "name": "UltiMadow",
        "ccfLevel": 7,
        "title": "[\u9898\u89e3] P7530 [USACO21OPEN] United Cows of Farmer John P"
    },
    {
        "content": "\u58f0\u660e\uff1a\u672c\u9898\u89e3\u662f\u642c\u8fd0\u5e76\u7ffb\u8bd1\u4e86\u6b64\u9898\u51fa\u9898\u4eba Benjamin Qi \u7684\u89e3\u9898\u62a5\u544a\u3002\n\n\u6ce8\u610f\uff1a\u672c\u9898\u89e3\u5185\u6211\u5c06\u5976\u725b\u4eec\u6807\u53f7\u4e3a $0 \\cdots N-1$ \u800c\u4e0d\u662f $1 \\cdots N$\u3002\n\n\u4e3a\u4e86\u5728 $O(N^{2})$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u672c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u53f3\u7aef\u70b9 $r$ \u56fa\u5b9a\u5e76\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u5de6\u7aef\u70b9 $l$\u3002\u8bbe $unique_{l,r}$ \u8868\u793a\u533a\u95f4 $l \\cdots r$ \u5185\u54c1\u79cd\u72ec\u7279\u7684\u725b\u7684\u6570\u91cf\u3002\n\n\u5f53\u6211\u4eec\u5c06\u5de6\u7aef\u70b9 $l$ \u5de6\u79fb\u4e00\u4f4d\uff08\u51cf\u5c11 $1$\uff09\u65f6\uff1a\n\n - \u5982\u679c $B_{l}=B_{r}$\uff0c\u8bc1\u660e\u5976\u725b $r$ \u4e0d\u80fd\u4f5c\u4e3a\u4ee3\u8868\u961f $(l,r)$ \u7684\u9886\u961f\u3002\u90a3\u6b64\u65f6\u7ed3\u675f\u64cd\u4f5c\u3002\n - \u5982\u679c $B_{l}$ \u5728 $l \\cdots r$ \u4e2d\u662f\u6ca1\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c06 $unique_{l+1,r-1}$ \u7edf\u8ba1\u5165\u7b54\u6848\u4e2d\uff0c\u5e76\u4ee4 $unique_{l,r-1}=unique_{l+1,r-1+1}$\u3002\n - \u5982\u679c $B_{l}$ \u5728 $l+1 \\cdots r$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u8bc1\u660e $B_l$ \u5728 $l+1 \\cdots r$ \u4e2d\u662f\u552f\u4e00\u7684\u800c\u5728 $l \\cdots r$ \u4e2d\u4e0d\u662f\u3002\u90a3\u4ee4 $unique_{l,r-1}=unique_{l+1,r-1}-1$\n \n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n \nint main() {\n\tint N; cin >> N;\n\tvector<int> B(N); for (int& b: B) cin >> b;\n\tint64_t ans = 0;\n\tfor (int r = 0; r < N; ++r) {\n\t\tvector<int> occ(N+1);\n\t\tint unique = 0;\n\t\tfor (int l = r-1; l >= 0; --l) {\n\t\t\tif (B[l] == B[r]) break;\n\t\t\tint& o = occ[B[l]]; ++o;\n\t\t\tif (o == 1) {\n\t\t\t\tans += unique;\n\t\t\t\t++unique;\n\t\t\t} else if (o == 2) {\n\t\t\t\t--unique;\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << \"\\n\";\n}\n```\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5c31\u662f\u5728\u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e2a $0 \\cdots N-1$ \u4e2d\u7684 \u53f3\u7aef\u70b9 $r$ \u7684 $active_{r}[l]$\uff0c$unique_{r}[l]$ \u548c $val_{r}[l]$\u3002\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $l \\le r$ \u6211\u4eec\u5b9a\u4e49\uff1a\n\n - \u82e5 $B_{l}$ \u5728 $B_{l},B_{l+1} \\cdots B_{r}$ \u662f\u552f\u4e00\u7684\uff0c\u5219 $active_{r}[l]=1$ \u5426\u5219 $active_{r}[l]=0$.\n - $unique_{r}[l]=unique_{l+1,r-1}$\n - $val_{r}[l]=active_{r}[l] \\times unique_{l+1,r-1}$\n\n\u5bf9\u4e8e\u6bcf\u4e2a $r$\uff0c\u6211\u4eec\u5c06 $val_r$ \u7684\u540e\u7f00\u52a0\u5165\u7b54\u6848\u4e2d\u3002\n\n\u4e3a\u4e86\u5728 $O(N \\log N)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u9ad8\u6548\u5730\u5c06 $r$ \u4ece $r-1$ \u5904\u8f6c\u79fb\u6765\u3002\u5b9a\u4e49 $prev\\_oc[j]$ \u8868\u793a\u6700\u5927\u7684 $i$ \uff08$i<j$\uff09\u6ee1\u8db3 $B_i=B_j$\u3002\u9664\u4e86\u4e0b\u5217\u7684\u66f4\u6539\u5916 $active_r$ \u548c $unique_r$ \u90fd\u5206\u522b\u4e0e $active_{r-1}$ \u548c $unique_{r-1}$ \u76f8\u540c\uff1a\n\n - $active_{r}[r]=1$\n - $active_{r}[prev\\_oc[r]]=0$\n - $unique_{r}[prev\\_oc[r] \\cdots r-1]$ \u5fc5\u987b\u9010\u4e2a\u9012\u589e $1$ \uff08\u6bcf\u4e2a\u90fd\u5fc5\u987b\u6bd4\u524d\u4e00\u4e2a\u5927 $1$\uff09\n - $unique_{r}[prev\\_oc[prev\\_oc[r]] \\cdots prev\\_oc[r]-1]$ \u5fc5\u987b\u9010\u4e2a\u9012\u51cf $1$\uff08\u6bcf\u4e2a\u90fd\u5fc5\u987b\u6bd4\u524d\u4e00\u4e2a\u5c0f $1$\uff09\n \n\u8fd9\u4e9b\u66f4\u65b0\u4ee5\u53ca\u5bf9\u4e8e $val_r$ \u7684\u533a\u95f4\u548c\u67e5\u8be2\uff0c\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 [\u5e26\u4e0b\u4f20\u61d2\u6807\u8bb0\u7684\u7ebf\u6bb5\u6811](https://usaco.guide/plat/RURQ#lazy-segment-tree) \u5728 $O(N \\log N)$ \u5185\u88ab\u89e3\u51b3\u3002\u5bf9\u4e8e\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4 $x \\cdots y$\uff0c\u6211\u4eec\u7ef4\u62a4 $\\sum_{i=x}^{y}active_{r}[i]$\uff0c$\\sum_{i=x}^{y}val_r[i]$ \u548c\u4e00\u4e2a\u8868\u793a\u533a\u95f4\u503c\u53d8\u5316\u7684\u61d2\u6807\u8bb0\u3002\u4f60\u53ef\u4ee5\u5728\u9898\u76ee [\u6570\u5e72\u8349\u579b](http://www.usaco.org/current/data/sol_haybales_platinum_dec15.html) \u7684\u89e3\u9898\u62a5\u544a\u4e2d\u627e\u5230\u5173\u4e8e\u7ebf\u6bb5\u6811\u7684\u4ecb\u7ecd\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nusing T = uint64_t;\nconst int SZ = 1<<18;\n\nstruct LazySeg {\n\tT sum[2*SZ], lazy[2*SZ], num_active[2*SZ];\n\tLazySeg() {\n\t\tfor (int i = 0; i < SZ; ++i) \n\t\t\tnum_active[SZ+i] = 1;\n\t\tfor (int i = SZ-1; i > 0; --i) \n\t\t\tnum_active[i] = num_active[2*i]+num_active[2*i+1];\n\t}\n\tvoid push(int ind, int L, int R) {\n\t\tsum[ind] += num_active[ind]*lazy[ind];\n\t\tif (L != R) for (int i = 0; i < 2; ++i) \n\t\t\tlazy[2*ind+i] += lazy[ind];\n\t\tlazy[ind] = 0;\n\t}\n\tvoid pull(int ind) {\n\t\tsum[ind] = sum[2*ind]+sum[2*ind+1];\n\t\tnum_active[ind] = num_active[2*ind]+num_active[2*ind+1];\n\t}\n\tvoid increment(int lo,int hi, int val, int ind=1,int L=0, int R=SZ-1) {\n\t\tpush(ind,L,R); if (hi < L || R < lo) return;\n\t\tif (lo <= L && R <= hi) { \n\t\t\tlazy[ind] = val; push(ind,L,R); return; }\n\t\tint M = (L+R)/2; \n\t\tincrement(lo,hi,val,2*ind,L,M); \n\t\tincrement(lo,hi,val,2*ind+1,M+1,R); \n\t\tpull(ind);\n\t}\n\tT query(int lo, int hi, int ind=1, int L=0, int R=SZ-1) {\n\t\tpush(ind,L,R); \n\t\tif (lo > R || L > hi) return 0;\n\t\tif (lo <= L && R <= hi) return sum[ind];\n\t\tint M = (L+R)/2;\n\t\treturn query(lo,hi,2*ind,L,M)+query(lo,hi,2*ind+1,M+1,R);\n\t}\n\tvoid deactivate(int pos, int ind=1, int L=0, int R=SZ-1) {\n\t\tpush(ind,L,R); \n\t\tif (pos > R || L > pos) return;\n\t\tif (pos <= L && R <= pos) {\n\t\t\tassert(num_active[ind] == 1);\n\t\t\tsum[ind] = num_active[ind] = 0;\n\t\t\treturn;\n\t\t}\n\t\tint M = (L+R)/2; \n\t\tdeactivate(pos,2*ind,L,M);\n\t\tdeactivate(pos,2*ind+1,M+1,R);\n\t\tpull(ind);\n\t}\n} Seg;\n\nint main() {\n\tcin.tie(0)->sync_with_stdio(0);\n\tint N; cin >> N;\n\tvector<int> B(N); for (int& b: B) cin >> b;\n\tvector<int> last(N+1,-1), prev_oc(N);\n\tint64_t ans = 0;\n\tfor (int r = 0; r < N; ++r) {\n\t\tint& last_oc = last[B[r]];\n\t\tans += Seg.query(last_oc+1,SZ-1);\n\t\tif (last_oc != -1) {\n\t\t\tSeg.deactivate(last_oc);\n\t\t\tSeg.increment(prev_oc[last_oc],last_oc-1,-1);\n\t\t}\n\t\tSeg.increment(last_oc,r-1,1);\n\t\tprev_oc[r] = last_oc; last_oc = r;\n\t}\n\tcout << ans << \"\\n\";\n}\n```\n\n\u4e39\u5c3c\u00b7\u7c73\u5854\u5c14\uff08Danny Mittal\uff09\u7684\u4ee3\u7801\uff1a\n\n```cpp\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n \npublic class TriplesOfCows {\n \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(in.readLine());\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        int[] last2 = new int[n + 1];\n        int[] last = new int[n + 1];\n        long answer = 0;\n        SegmentTree segTree = new SegmentTree(n);\n        for (int j = 1; j <= n; j++) {\n            int k = Integer.parseInt(tokenizer.nextToken());\n            segTree.updateSingle(last[k], -1);\n            segTree.updateRange(last2[k] + 1, last[k] - 1, -1);\n            answer += segTree.query(last[k] + 1, j - 1);\n            segTree.updateRange(last[k] + 1, j - 1, 1);\n            segTree.updateSingle(j, 1);\n            last2[k] = last[k];\n            last[k] = j;\n        }\n        System.out.println(answer);\n    }\n \n    static class SegmentTree {\n        final int n;\n        final long[] value = new long[530000];\n        final long[] singles = new long[530000];\n        final long[] lazy = new long[530000];\n \n        SegmentTree(int n) {\n            this.n = n;\n        }\n \n        void propagate(int node) {\n            value[2 * node] += lazy[node] * singles[2 * node];\n            value[(2 * node) + 1] += lazy[node] * singles[(2 * node) + 1];\n            lazy[2 * node] += lazy[node];\n            lazy[(2 * node) + 1] += lazy[node];\n            lazy[node] = 0;\n        }\n \n        void updateSingle(int index, long delta, int node, int segFrom, int segTo) {\n            if (segFrom == segTo) {\n                value[node] += delta * lazy[node];\n                singles[node] += delta;\n            } else {\n                propagate(node);\n                int mid = (segFrom + segTo) / 2;\n                if (index <= mid) {\n                    updateSingle(index, delta, 2 * node, segFrom, mid);\n                } else {\n                    updateSingle(index, delta, (2 * node) + 1, mid + 1, segTo);\n                }\n                value[node] = value[2 * node] + value[(2 * node) + 1];\n                singles[node] = singles[2 * node] + singles[(2 * node) + 1];\n            }\n        }\n \n        void updateSingle(int index, long delta) {\n            if (index > 0) {\n                updateSingle(index, delta, 1, 1, n);\n            }\n        }\n \n        void updateRange(int from, int to, long delta, int node, int segFrom, int segTo) {\n            if (segTo < from || to < segFrom) {\n \n            } else if (from <= segFrom && segTo <= to) {\n                value[node] += delta * singles[node];\n                lazy[node] += delta;\n            } else {\n                propagate(node);\n                int mid = (segFrom + segTo) / 2;\n                updateRange(from, to, delta, 2 * node, segFrom, mid);\n                updateRange(from, to, delta, (2 * node) + 1, mid + 1, segTo);\n                value[node] = value[2 * node] + value[(2 * node) + 1];\n                singles[node] = singles[2 * node] + singles[(2 * node) + 1];\n            }\n        }\n \n        void updateRange(int from, int to, long delta) {\n            updateRange(from, to, delta, 1, 1, n);\n        }\n \n        long query(int from, int to, int node, int segFrom, int segTo) {\n            if (segTo < from || to < segFrom) {\n                return 0;\n            } else if (from <= segFrom && segTo <= to) {\n                return value[node];\n            } else {\n                propagate(node);\n                int mid = (segFrom + segTo) / 2;\n                return query(from, to, 2 * node, segFrom, mid) + query(from, to, (2 * node) + 1, mid + 1, segTo);\n            }\n        }\n \n        long query(int from, int to) {\n            return query(from, to, 1, 1, n);\n        }\n    }\n}\n```\n\n~~\u8bd1\u8005\u603b\u7ed3~~\n\n\u56fa\u5b9a\u53f3\u7aef\u70b9 $r$\uff0c\u7136\u540e\u627e\u5de6\u7aef\u70b9 $l$ \u6ee1\u8db3 $[l,r]$ \u4e2d\u6ca1\u6709\u4e0e $l$ \u76f8\u540c\u54c1\u79cd\u7684\u725b\u3002\n\n\u4e4b\u540e\u5bf9\u4e8e\u8fd9\u4e2a $[l,r]$ \u627e\u4e00\u4e0b\u91cc\u9762\u6709\u591a\u5c11\u4e2a\u725b\u7684\u54c1\u79cd\u662f\u552f\u4e00\u4e00\u6b21\u51fa\u73b0\u7684\u3002\n\n\u90fd\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u6bcf\u6b21\u7ed3\u679c\u4e58\u8d77\u6765\u52a0\u8fdb\u7b54\u6848\u91cc\uff0c\u6ca1\u4e86\u3002",
        "postTime": 1628930458,
        "uid": 94659,
        "name": "JerryZheng",
        "ccfLevel": 0,
        "title": "\u3010\u642c\u8fd0\u3011\u9898\u89e3 by\u300aUnited Cows of Farmer John P\u300b"
    },
    {
        "content": "[link](https://www.luogu.com.cn/problem/P7530)\n\n### \u5927\u81f4\u9898\u610f\uff1a\n\n\u6709 $N$ \u5934\u5976\u725b\u53c2\u52a0\u4e86\u4ee3\u8868\u961f\u9009\u62d4\u3002\u5979\u4eec\u7ad9\u6210\u4e00\u884c\uff0c\u5976\u725b $i$ \u7684\u54c1\u79cd\u4e3a $b_i$\u3002\n\n\u4ee3\u8868\u961f\u5c06\u4f1a\u7531\u5305\u542b\u81f3\u5c11\u4e09\u5934\u5976\u725b\u7684\u8fde\u7eed\u533a\u95f4\u7ec4\u6210\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6ee1\u8db3 $1\\le l<r\\le N$ \u4e14 $r-l\\ge 2$ \u7684\u5976\u725b $l\\dots r$\u3002\u9009\u5b9a\u533a\u95f4\u5185\u7684\u4e09\u5934\u5976\u725b\u5c06\u4f1a\u88ab\u6307\u5b9a\u4e3a\u9886\u961f\u3002\u51fa\u4e8e\u6cd5\u5f8b\u539f\u56e0\uff0c\u6700\u8fb9\u4e0a\u7684\u4e24\u5934\u5976\u725b\u5fc5\u987b\u662f\u9886\u961f\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u907f\u514d\u79cd\u5185\u51b2\u7a81\uff0c\u6bcf\u4e00\u540d\u9886\u961f\u90fd\u5fc5\u987b\u4e0e\u4ee3\u8868\u961f\u7684\u5176\u4ed6\u6210\u5458\uff08\u5305\u62ec\u9886\u961f\uff09\u54c1\u79cd\u4e0d\u540c\u3002\n\n\u8bf7\u5e2e\u52a9 UCFJ \u6c42\u51fa\uff08\u7531\u4e8e\u7eb3\u7a0e\u539f\u56e0\uff09\u4ed6\u4eec\u53ef\u4ee5\u9009\u6d3e\u53c2\u52a0 IOI \u7684\u4ee3\u8868\u961f\u7684\u65b9\u6cd5\u6570\u3002\u5982\u679c\u4e24\u4e2a\u4ee3\u8868\u961f\u62e5\u6709\u4e0d\u540c\u7684\u6210\u5458\u6216\u4e0d\u540c\u7684\u9886\u961f\uff0c\u5219\u88ab\u8ba4\u4e3a\u662f\u4e0d\u540c\u7684\u3002\n\n$1\\le n\\le 2\\times 10^5$\u3002\n\n### Sol.\n\n\u6a21\u62df\u8d5b\u8003\u5230\u8fd9\u9898\uff0c\u7136\u540e\u5c31\u61f5\u6389\u4e86\u3002\n\n\u9996\u5148\u80af\u5b9a\u662f\u679a\u4e3e\u4e00\u4e2a\u53f3\u7aef\u70b9 $r$\uff0c\u7136\u540e\u786e\u5b9a $l$ \u548c $mid$\u3002\n\n\u80af\u5b9a\u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n- $l,mid$ \u5728 $r$ \u7684\u524d\u9a71\u7684\u540e\u9762\u3002\n\n- $l$ \u5728 $mid$ \u7684\u524d\u9a71\u7684\u540e\u9762\u3002\n\n- $l,mid$ \u7684\u540e\u7ee7\u5728 $r$ \u7684\u540e\u9762\u3002\n\n\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7ffb\u8bd1\uff1a$l,mid\\in [L_r+1,r-1]$\u3002\n\n\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7ffb\u8bd1\uff1a$l\\in [L_{mid}+1,mid-1]$\u3002\n\n\u7b2c\u4e09\u4e2a\u6761\u4ef6\u7ffb\u8bd1\uff1a$l,mid$ \u662f\u5728 $[L_{r}+1,r-1]$ \u4e2d\u6700\u540e\u51fa\u73b0\u7684\u3002\n\n\u5148\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$ \uff0c\u5982\u679c\u4ed6\u505a $mid$\uff0c\u90a3\u4e48 $l$ \u5fc5\u987b\u5728 $[L_i+1,i-1]$ \u4e2d\u9009\u53d6\uff0c\u5728\u8fd9\u91cc\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u518d\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff1a\u5728\u7ebf\u6bb5\u6811\u4e0a\u53ea\u8003\u8651\u533a\u95f4 $[L_r+1,r-1]$\u3002\n\n\u7b2c\u4e09\u4e2a\u6761\u4ef6\uff1a\u5982\u679c $pre$ \u51fa\u73b0\u8fc7\u7684\u8bdd\u90a3\u4e48\u4e45\u628a\u4ed6\u5220\u6389\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define ls p<<1\n#define rs p<<1|1\n#define I inline\n#define RI register int\n#define rep(i,a,b) for(RI i=a;i<=b;++i)\n#define dow(i,a,b) for(RI i=a;i>=b;--i)\nusing namespace std;\nconst int N=4e5+5;\nstruct Segment_Tree{\n\tstruct tree{\n\t\tint l,r,sz,val,tag;\n\t\tlong long sum;\n\t} tr[N<<1];\n\tI void build(int l,int r,int p){\n\t\ttr[p].l=l,tr[p].r=r;\n\t\tif(l==r) return;\n\t\tRI mid=l+r>>1;\n\t\tbuild(l,mid,ls),build(mid+1,r,rs);\n\t}\n\tI void up(int p){\n\t\ttr[p].sz=tr[ls].sz+tr[rs].sz;\n\t\ttr[p].sum=tr[ls].sum+tr[rs].sum;\n\t}\n\tI void down(int p){\n\t\tif(tr[p].tag){\n\t\t\ttr[ls].tag+=tr[p].tag,tr[ls].val+=tr[p].tag,tr[ls].sum+=1ll*tr[ls].sz*tr[p].tag;\n\t\t\ttr[rs].tag+=tr[p].tag,tr[rs].val+=tr[p].tag,tr[rs].sum+=1ll*tr[rs].sz*tr[p].tag;\n\t\t\ttr[p].tag=0;\n\t\t}\n\t}\n\tI void update_size(int pos,int p,int v){\n\t\tif(tr[p].l==tr[p].r)\n\t\t\treturn tr[p].sz+=v,tr[p].sum=1ll*tr[p].sz*tr[p].val,void();\n\t\tRI mid=tr[p].l+tr[p].r>>1;\n\t\tdown(p);\n\t\tif(pos>mid) update_size(pos,rs,v);\n\t\telse update_size(pos,ls,v);\n\t\tup(p);\n\t}\n\tI void update_Val(int l,int r,int p,int v){\n\t\tif(l>r) return;\n\t\tif(tr[p].l==l&&tr[p].r==r){\n\t\t\ttr[p].tag+=v;\n\t\t\ttr[p].val+=(tr[p].r-tr[p].l+1)*v;\n\t\t\ttr[p].sum+=tr[p].sz*v;\n\t\t\treturn;\n\t\t}\n\t\tdown(p);\n\t\tRI mid=tr[p].l+tr[p].r>>1;\n\t\tif(l>mid) update_Val(l,r,rs,v);\n\t\telse if(r<=mid) update_Val(l,r,ls,v);\n\t\telse update_Val(l,mid,ls,v),update_Val(mid+1,r,rs,v);\n\t\tup(p);\n\t}\n\tI long long query(int l,int r,int p){\n\t\tif(l>r) return 0;\n\t\tif(tr[p].l==l&&tr[p].r==r)\n\t\t\treturn tr[p].sum;\n\t\tRI mid=tr[p].l+tr[p].r>>1;\n\t\tdown(p);\n\t\tif(l>mid) return query(l,r,rs);\n\t\telse if(r<=mid) return query(l,r,ls);\n\t\telse return query(l,mid,ls)+query(mid+1,r,rs);\n\t}\n} T;\nint n,a[N],vis[N],pre[N];\nlong long ans;\nint main(){\n\tscanf(\"%d\",&n);\n\trep(i,1,n) scanf(\"%d\",&a[i]),pre[i]=vis[a[i]],vis[a[i]]=i;\n\tT.build(1,n,1);\n\trep(i,1,n){\n\t\tif(pre[i])\n\t\t\tT.update_size(pre[i],1,-1),T.update_Val(pre[pre[i]]+1,pre[i]-1,1,-1);\n\t\tans+=T.query(pre[i]+1,i-1,1);\n\t\tT.update_size(i,1,1),T.update_Val(pre[i]+1,i-1,1,1);\n\t}\n\treturn printf(\"%lld\\n\",ans),0;\n}\n```\n\n### \u603b\u7ed3\uff1a\n\n\u9047\u5230\u591a\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u4e0d\u8981\u614c\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5199\u51fa\u6765\uff0c\u518d\u9010\u4e2a\u7834\u89e3\u3002\u4e0d\u8981\u614c\u4e86\u795e\uff0c\u7528\u77aa\u773c\u6cd5\u778e\u60f3\u3002\n\n\u8fd8\u6709\u533a\u95f4\u4e58\u6cd5\u7684\u601d\u60f3\u771f\u7684\u5f88\u5999\uff0c\u6309\u4f4d\u76f8\u4e58\uff0c\u6269\u5927\u8303\u56f4\uff0c\u7528\u5408\u6cd5\u7684\u533a\u95f4\u6765\u67e5\u770b\u3002",
        "postTime": 1636773458,
        "uid": 115857,
        "name": "resound_WANYI_13Ell",
        "ccfLevel": 0,
        "title": "P7530 [USACO21OPEN] United Cows of Farmer John P"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\uff1a\n\n\u6574\u4f53\u601d\u8def\u662f\u4f9d\u6b21\u52a0\u5165\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u7edf\u8ba1\u51fa\u5f53\u524d\u4f4d\u7f6e\u4f5c\u4e3a\u53f3\u7aef\u70b9\u65f6\u7684\u8d21\u732e\u3002\n\n\u9996\u5148\u8981\u6c42\u4f5c\u4e3a\u7aef\u70b9\u7684\u9886\u961f\u4e0d\u80fd\u548c\u961f\u4f0d\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6210\u5458\u7684\u79cd\u7c7b\u76f8\u540c\uff0c\u8fd9\u4e5f\u5c31\u662f\u8bf4\u53ea\u80fd\u5728\u4e0a\u4e00\u4e2a\u8be5\u79cd\u65cf\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e4b\u540e\u7684\u4f4d\u7f6e\u4e2d\u627e\u7edf\u8ba1\u8d21\u732e\u3002\n\n\u540c\u65f6\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u7aef\u70b9\u4e5f\u5c31\u662f\u8981\u6c42\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u7f6e\u4e0a\u4e0d\u5b58\u5728\u548c\u8fd9\u4e2a\u8282\u70b9\u76f8\u540c\u7684\u79cd\u7c7b\u3002\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u79cd\u7c7b\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u7aef\u70b9\u4e3a\u540e\u7eed\u7684\u53f3\u7aef\u70b9\u63d0\u4f9b\u8d21\u732e\u3002\n\n\u6700\u540e\u8003\u8651\u4e2d\u95f4\u7684\u8282\u70b9\uff0c\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u95f4\u7684\u9886\u961f\u4e5f\u5c31\u662f\u8981\u6c42\u8fd9\u4e2a\u8282\u70b9\u5728\u6240\u8981\u7684\u5de6\u8282\u70b9\u4e4b\u540e\uff0c\u800c\u4e14\u5728\u8fd9\u4e2a\u5de6\u8282\u70b9\u5230\u53f3\u8282\u70b9\u4e4b\u95f4\u53ea\u5b58\u5728\u4e00\u4e2a\u8fd9\u6837\u7684\u79cd\u7c7b\u5976\u725b\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u662f\u8bf4\u53ea\u5728\u6700\u9760\u53f3\u7684\u5230\u7b2c\u4e8c\u9760\u53f3\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u5de6\u8282\u70b9\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u79cd\u7c7b\u7684\u5976\u725b\u4f5c\u4e3a\u4e2d\u95f4\u8282\u70b9\u4ea7\u751f\u8d21\u732e\u3002\n\n---\n\u5b9e\u73b0\u4e0a\u53ef\u4ee5\u91c7\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u5de6\u8282\u70b9\u6743\u503c $val$ \u548c\u5b9e\u9645\u53ef\u80fd\u4f5c\u4e3a\u5de6\u8282\u70b9\u4ea7\u751f\u8d21\u732e\u7684\u4e2a\u6570 $size$\uff0c\u4ee5\u53ca\u7edf\u8ba1\u7ed3\u679c\u7684 $ans$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u52a0\u5165\u7684\u8282\u70b9\uff0c\u5c06\u8fd9\u4e2a\u8282\u70b9\u524d\u4e00\u4e2a\u8282\u70b9\u5230\u518d\u524d\u4e00\u4e2a\u8282\u70b9\u76f4\u63a5\u4ea7\u751f\u7684\u8d21\u732e\u53d6\u6d88\uff0c\u5e76\u53d6\u6d88\u524d\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7684\u53ef\u80fd\u6027\u3002\u7edf\u8ba1\u5f53\u524d\u8282\u70b9\u5230\u4e0a\u4e00\u4e2a\u76f8\u540c\u79cd\u7c7b\u4e4b\u95f4\u8282\u70b9\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7684\u8d21\u732e\u4e4b\u548c\u3002\n\n\u7136\u540e\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u8d21\u732e\uff0c\u5c06\u6240\u6709\u5728\u4e0a\u4e00\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u4e4b\u95f4\u7684\u53ef\u80fd\u5de6\u7aef\u70b9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u53ef\u80fd\u7684\u4e2d\u95f4\u7aef\u70b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u7684\u8bbe\u7f6e\u4e3a\u53ef\u80fd\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7b49\u5f85\u88ab\u66f4\u65b0\u3002\n\n---\n\u7279\u522b\u6ce8\u610f\uff0c\u5728 $\\text{push down}$ \u6807\u8bb0\u7684\u65f6\u5019\uff0c\u5343\u4e07\u4e0d\u8981\u548c\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u4e00\u6837\u76f4\u63a5\u7528 $size\\times val$ \u8fdb\u884c\u66f4\u65b0\uff0c\u800c\u662f\u76f4\u63a5\u5c06\u6807\u8bb0\u52a0\u5230 $ans$ \u4e0a\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u975e\u53f6\u5b50\u8282\u70b9\u7684 $val$ \u90fd\u662f\u6ca1\u6709\u610f\u4e49\u7684\u7a7a\u53d8\u91cf\u3002\n\n~~\u8fd9\u4e2a\u9519\u8bef\u8c03\u4e86\u4e00\u5e74\u3002~~\n\n---\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst int MAXN=200005;\nstruct str{\n\tint sz,val,ans,tag;\n}t[MAXN*4];\nint n,a[MAXN],last[MAXN],pre_last[MAXN],ans;\nvoid push_up(int p){\n\tt[p].ans=t[p<<1].ans+t[p<<1|1].ans;\n\tt[p].sz=t[p<<1].sz+t[p<<1|1].sz;\n}\nvoid push_down(int p){\n\tif(t[p].tag==0)return;\n\t\n\tt[p<<1].tag+=t[p].tag;\n\tt[p<<1].val+=t[p].tag;\n\tt[p<<1].ans+=t[p].tag*t[p<<1].sz;\n\t\n\tt[p<<1|1].tag+=t[p].tag;\t\n\tt[p<<1|1].val+=t[p].tag;\n\tt[p<<1|1].ans+=t[p].tag*t[p<<1|1].sz;\n\t\n\tt[p].tag=0;\n}\nvoid modify_size(int p,int l,int r,int x,int val){\n\tif(l==r){\n\t\tt[p].sz+=val;\n\t\tt[p].ans=t[p].sz*t[p].val;\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid=l+r>>1;\n\tif(x<=mid)modify_size(p<<1,l,mid,x,val);\n\telse modify_size(p<<1|1,mid+1,r,x,val);\n\tpush_up(p);\n}\nvoid modify_val(int p,int l,int r,int L,int R,int val){\n\tif(L>R)return;\n\tif(L<=l&&r<=R){\n\t\tt[p].tag+=val;\n\t\tt[p].val+=val;\n\t\tt[p].ans+=val*t[p].sz;\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid=l+r>>1;\n\tif(L<=mid)modify_val(p<<1,l,mid,L,R,val);\n\tif(R>mid)modify_val(p<<1|1,mid+1,r,L,R,val);\n\tpush_up(p);\n}\nint query(int p,int l,int r,int L,int R){\n\tif(L>R)return 0;\n\tif(L<=l&&r<=R)return t[p].ans;\n\tpush_down(p);\n\tint mid=l+r>>1;\n\tif(R<=mid)return query(p<<1,l,mid,L,R);\n\tif(L>mid)return query(p<<1|1,mid+1,r,L,R);\n\treturn query(p<<1,l,mid,L,R)+query(p<<1|1,mid+1,r,L,R);\n}\nsigned main(){\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lld\",&a[i]);\n\t\tif(last[a[i]])modify_size(1,1,n,last[a[i]],-1);\n\t\tif(last[a[i]])modify_val(1,1,n,pre_last[a[i]]+1,last[a[i]]-1,-1);\n\t\tans+=query(1,1,n,last[a[i]]+1,i-1);\n\t\tmodify_val(1,1,n,last[a[i]]+1,i-1,1);\n\t\tmodify_size(1,1,n,i,1);\n\t\tpre_last[a[i]]=last[a[i]];\n\t\tlast[a[i]]=i;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n/*\n15\n2 12 4 5 5 8 1 10 10 10 12 1 12 1 9\n\n(2,4,9)\n(2,8,9)\n(4,8,9)\n(5,8,9)\n(12,1,9)\n\n*/\n\n```\n",
        "postTime": 1656772327,
        "uid": 223559,
        "name": "qxp101",
        "ccfLevel": 6,
        "title": "P7530 [USACO21OPEN] United Cows of Farmer John P \u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u8bbe\u533a\u95f4\u5185\u7684\u4e09\u4e2a\u70b9\u5206\u522b\u4e3a $i$ , $j$ , $k$ \uff0c\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u5982\u4e0b\u4e0d\u7b49\u5f0f\uff1a\n$$\n\\begin{aligned}\n\\left\\{\n\\begin{array}{ll}\ni<j<k  \\\\\nr_i>k  \\\\\nl_k<i  \\\\\nr_j>k  \\\\\nl_j<i  \\\\\n\\end{array}\n\\right.\n\\end{aligned}\n$$\n\u5176\u4e2d $l_i$ \u8868\u793a\u4e0e $i$ \u540c\u989c\u8272\u7684\u524d\u9a71\uff0c $r_i$ \u8868\u793a\u540e\u7ee7\u3002\n\n\u6211\u4eec\u679a\u4e3e $k$ \uff0c\u8054\u7cfb\u4e0a\u9762\u7684\u5f0f\u5b50\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 $l_k<i<j<k$ \u3002\n\n\u518d\u89c2\u5bdf\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u53d1\u73b0 $r_i>k$ \u4e14 $r_j>k$ \uff0c\u6240\u4ee5\u5bf9\u4e8e\u53ef\u884c\u7684 $i$ \u548c $j$ \uff0c\u90fd\u5fc5\u987b\u4fdd\u8bc1\u4e0a\u8ff0\u6761\u4ef6\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad $r_x$ \u662f\u5426\u5927\u4e8e $k$ \u5462\uff1f\u6211\u4eec\u4ece\u524d\u5f80\u540e\u679a\u4e3e $k$ \uff0c\u8bbe $k'=l_k$ \uff0c\u5982\u679c $k'>0$ \uff0c\u5c31\u8bf4\u660e $r_{k'}=k$ \uff0c\u6240\u4ee5\u5bf9\u4e8e $x<k$ \uff0c $r_{k'}>x$ \u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u7b54\u6848\uff0c\u6211\u4eec\u628a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u4f4d\u7f6e\u90fd\u653e\u8fdb\u7ebf\u6bb5\u6811\u91cc\u3002\u56e0\u4e3a\u8fd9\u4e9b\u4f4d\u7f6e\u65e2\u53ef\u4ee5\u4f5c\u4e3a $i$ \uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a $j$ \uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5b58\u4e24\u6b21\uff1a\u5f53\u4f4d\u7f6e\u4f5c\u4e3a $i$ \u65f6\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u4f4d\u7f6e+1\uff1b\u5f53\u4f5c\u4e3a $j$ \u65f6\uff0c\u80fd\u653e $i$ \u7684\u4f4d\u7f6e\u5c31\u662f $[l_x+1,x-1]$ \uff08\u8ddf $k$ \u662f\u4e00\u6837\u7684\uff09\uff0c\u7136\u540e\u5c31\u628a\u8fd9\u6bb5\u533a\u95f4+1\u3002\u5f53\u51fa\u73b0\u8d85\u51fa $k$ \u65f6\uff0c\u5c31\u5220\u6389\u524d\u9a71\u7684\u6240\u6709\u8d21\u732e\u3002\u5bf9\u4e8e\u6bcf\u4e2a $k$ \uff0c\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u4e0a $i$ \u7684\u4e2a\u6570 $\\times$ $j$ \u7684\u4e2a\u6570\u3002\n\n\u6211\u7684\u4ee3\u7801\u6dfb\u52a0\u4e86\u4e00\u4e2a $ll$ \u6570\u7ec4\uff0c\u8868\u793a\u524d\u9a71\u7684\u524d\u9a71\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u5220\u9664\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200005\n#define ls now<<1\n#define rs now<<1|1\nusing namespace std;\nint n;\nlong long lazy[N*5];\nint a[N],l[N],ll[N],id[N];\nstruct Node{\n\tlong long v,num,ans;\n}tree[N*5];\nvoid update(int now,int l,int r)\n{\n\ttree[now].ans=tree[l].ans+tree[r].ans;\n\ttree[now].num=tree[l].num+tree[r].num;\n}\nvoid pushdown(int now,int l,int r)\n{\n\tif(lazy[now])\n\t{\n\t\tlazy[l]+=lazy[now],lazy[r]+=lazy[now];\n\t\ttree[l].v+=lazy[now],tree[r].v+=lazy[now];\n\t\ttree[l].ans+=lazy[now]*tree[l].num,tree[r].ans+=lazy[now]*tree[r].num;\n\t\tlazy[now]=0;\n\t}\n}\nvoid change1(int now,int l,int r,int x,int y)\n{\n\tif(l==r)\n\t{\n\t\ttree[now].num+=y;\n\t\ttree[now].ans=tree[now].num*tree[now].v;\n\t\treturn;\n\t}\n\tpushdown(now,ls,rs);\n\tint mid=(l+r)>>1;\n\tif(mid>=x)  change1(ls,l,mid,x,y);\n\telse  change1(rs,mid+1,r,x,y);\n\tupdate(now,ls,rs); \n}\nvoid change2(int now,int l,int r,int x,int y,int z) \n{\n\tif(x>y)  return;\n\tif(l==x && r==y)\n\t{\n\t\tlazy[now]+=z;\n\t\ttree[now].v+=z;\n\t\ttree[now].ans+=z*tree[now].num;\n\t\treturn;\n\t}\n\tpushdown(now,ls,rs);\n\tint mid=(l+r)>>1;\n\tif(mid>=y)  change2(ls,l,mid,x,y,z);\n\telse\n\t{\n\t\tif(mid<x)  change2(rs,mid+1,r,x,y,z);\n\t\telse  change2(ls,l,mid,x,mid,z),change2(rs,mid+1,r,mid+1,y,z);\n\t}\n\tupdate(now,ls,rs); \n}\nlong long query(int now,int l,int r,int x,int y)\n{\n\tif(x>y)  return 0;\n\tif(l==x && r==y)\n\t\treturn tree[now].ans;\n\tpushdown(now,ls,rs);\n\tint mid=(l+r)>>1;\n\tif(mid>=y)  return query(ls,l,mid,x,y);\n\telse\n\t{\n\t\tif(mid<x)  return query(rs,mid+1,r,x,y);\n\t\telse  return query(ls,l,mid,x,mid)+query(rs,mid+1,r,mid+1,y);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tlong long ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tl[i]=id[a[i]];\n\t\tll[i]=l[l[i]];\n\t\tif(l[i])\n\t\t{\n\t\t\tchange1(1,1,n,l[i],-1);\n\t\t\tchange2(1,1,n,ll[i]+1,l[i]-1,-1);\t\n\t\t}\t\n\t\tans+=query(1,1,n,l[i]+1,i-1);\n\t\tchange1(1,1,n,i,1);\n\t\tchange2(1,1,n,l[i]+1,i-1,1);\n\t\tid[a[i]]=i;\n\t} \n\tprintf(\"%lld\\n\",ans);\n}\n```\n",
        "postTime": 1629185470,
        "uid": 372917,
        "name": "moring",
        "ccfLevel": 0,
        "title": "P7530 [USACO21OPEN] United Cows of Farmer John P"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u91d1\u7ec4T1\u52a0\u5f3a\u7248\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42\u5e8f\u5217\u4e2d\u4e09\u5143\u7ec4 $(i,j,k),i<j<k$ \u7684\u4e2a\u6570\u6ee1\u8db3 $a_i,a_j,a_k$ \u5728\u533a\u95f4 $[i,k]$ \u4e2d\u90fd\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u5ef6\u7eed\u91d1\u7ec4\u7684\u601d\u8def\uff0c\u6211\u4eec\u56fa\u5b9a $k$ \uff0c\u5219\u6ee1\u8db3\u6761\u4ef6\u7684 $i$ \u4e00\u5b9a\u5728\u533a\u95f4 $[pre_k+1,k-1]$ \u5185\u3002\n\n\u540c\u65f6\u9700\u8981\u6ee1\u8db3 $nxt_i>k$ \u3002\n\n\u5982\u679c\u53ea\u6709\u8fd9\u4e24\u4e2a\u6761\u4ef6\uff0c\u5219\u662f\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\u3002\n\n\u6211\u4eec\u8fd8\u6709 $j$ \u7684\u9650\u5236\u3002\u8981\u6c42 $a_j$ \u5728\u533a\u95f4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u628a $i,j$ \u6346\u7ed1\u5230\u4e00\u8d77\u8ba1\u7b97\uff0c\u7136\u540e\u53ea\u7528\u5bf9\u6bcf\u4e2a $k$ \u8ba1\u7b97\u5bf9\u5e94\u7684 $i$ \u7684\u6743\u503c\u3002\n\n\u6bcf\u4e2a $j$ \u4f1a\u5bf9 $pre_j<i<j$ \u7684 $i$ \u4ea7\u751f\u8d21\u732e\uff0c\u6211\u4eec\u53ea\u7528\u5728\u4e8c\u7ef4\u504f\u5e8f\u7684\u57fa\u7840\u4e0a\u7ef4\u62a4\u5728\u7ebf\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n\u770b\u8d77\u6765\u5341\u5206\u4e0d\u53ef\u505a\uff1f\u5927\u529b\u5206\u5757\u3002\u3002\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5757\u5757\u5185\u6392\u5e8f\uff0c\u6574\u5757\u76f4\u63a5\u6253\u6807\u8bb0\uff0c\u5757\u5185\u67e5\u8be2\u76f4\u63a5\u4e8c\u5206\u3002\u8fd9\u6837\u53ef\u4ee5\u505a\u5230$\\rm O(N\\sqrt{N\\log N})$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u3002\n\n\u5982\u679c\u5f00\u6876\uff0c\u53ef\u4ee5\u505a\u5230$\\rm O(N\\sqrt{N})$ \u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u3002\n\n\u4e00\u4e0b\u662f\u5206\u5757\u4e8c\u5206\u505a\u6cd5\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(register int i=a;i<=b;i++)\n#define pre(i,a,b) for(register int i=a;i>=b;i--)\n#define N 200005\nusing namespace std;\nint n,c[N],nxt[N],pre[N],u[N],bas,w[N],t[N],s[900][233];\nstruct node{\n\tint rl,ps,vl;\n\tnode(int X=0,int Y=0){ps=X;rl=Y;vl=0;}\n\tbool operator<(const node o)const{return rl<o.rl;}\n}a[900][233];\nvoid change(int l,int r,int val){\n\tif(l>r)return;\n\tregister int L=(l-1)/bas+1,R=(r-1)/bas+1;\n\tif(L==R){\n\t\trep(i,1,w[L])a[L][i].vl+=t[L]+val*(l<=a[L][i].ps&&a[L][i].ps<=r);\n\t\trep(i,1,w[L])s[L][i]=s[L][i-1]+a[L][i].vl;\n\t\tt[L]=0;\n\t}\n\telse{\n\t\trep(i,1,w[L])a[L][i].vl+=t[L]+val*(l<=a[L][i].ps&&a[L][i].ps<=r);\n\t\trep(i,1,w[L])s[L][i]=s[L][i-1]+a[L][i].vl;\n\t\tt[L]=0;\n\t\trep(i,1,w[R])a[R][i].vl+=t[R]+val*(l<=a[R][i].ps&&a[R][i].ps<=r);\n\t\trep(i,1,w[R])s[R][i]=s[R][i-1]+a[R][i].vl;\n\t\tt[R]=0;\n\t\trep(i,L+1,R-1)t[i]+=val;\n\t}\n}\nint ask(int l,int r,int lim){\n\tif(l>r)return 0;\n\tregister int L=(l-1)/bas+1,R=(r-1)/bas+1,sum=0,cur;\n\tif(L==R){\n\t\trep(i,1,w[L])sum+=(t[L]+a[L][i].vl)*(l<=a[L][i].ps&&a[L][i].ps<=r&&a[L][i].rl>=lim);\n\t\treturn sum;\n\t}\n\telse{\n\t\trep(i,1,w[L])sum+=(t[L]+a[L][i].vl)*(l<=a[L][i].ps&&a[L][i].ps<=r&&a[L][i].rl>=lim);\n\t\trep(i,1,w[R])sum+=(t[R]+a[R][i].vl)*(l<=a[R][i].ps&&a[R][i].ps<=r&&a[R][i].rl>=lim);\n\t\trep(i,L+1,R-1){\n\t\t\tcur=lower_bound(a[i]+1,a[i]+w[i]+1,node(0,lim))-a[i]-1;\n\t\t\tsum+=s[i][w[i]]-s[i][cur]+(w[i]-cur)*t[i];\n\t\t}\n\t\treturn sum;\n\t}\n}\nchar buf[1<<22],*p1=buf,*p2=buf;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n    int x=0;char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return x;\n}\nint main(){\n\t//freopen(\"INPUT\",\"r\",stdin);\n\tn=read();bas=230;\n\trep(i,1,n)u[i]=read();\n\trep(i,1,n){\n\t\tif(c[u[i]])pre[i]=c[u[i]],nxt[c[u[i]]]=i;\n\t\tc[u[i]]=i;\t\n\t}\n\tregister int cur;\n\trep(i,1,n){\n\t\tcur=(i-1)/bas+1;\n\t\tif(nxt[i])a[cur][++w[cur]]=node(i,nxt[i]-1);\n\t\telse a[cur][++w[cur]]=node(i,n+1);\n\t}\n\tpre(i,(n-1)/bas+1,1)sort(a[i]+1,a[i]+w[i]+1);\n\tregister long long ans=0;\n\trep(i,1,n){\n\t\tans+=ask(pre[i]+1,i-1,i);\n\t\tif(pre[i]!=0)change(pre[pre[i]]+1,pre[i]-1,-1);\n\t\tchange(pre[i]+1,i-1,1);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n} \n```",
        "postTime": 1619659917,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P7530 [USACO21OPEN] United Cows of Farmer John P"
    }
]