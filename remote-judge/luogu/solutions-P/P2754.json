[
    {
        "content": "\u601d\u8def\uff1a\u679a\u4e3e+\u5e76\u67e5\u96c6+\u6700\u5927\u6d41\r\n\r\n\u611f\u89c9\u697c\u4e0b\u7528\u7b54\u6848\u679a\u4e3e\u8d85\u8fc7\u4e00\u4e2a\u5927\u6570\u5c31\u8bf4\u660e\u65e0\u89e3\u4e0d\u592a\u79d1\u5b66......\u8fd8\u662f\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u6709\u89e3\u6cd5\u3002\u5c06\u4e00\u8258\u98de\u8239\u53ef\u4ee5\u5230\u8fbe\u7684\u6240\u6709\u661f\u7403\u5e76\u67e5\u96c6\u8fde\u8d77\u6765\uff0c\u6700\u540e\u5982\u679c\u5730\u7403\u548c\u6708\u7403\u65e0\u6cd5\u8fde\u63a5\uff0c\u5219\u65e0\u89e3\u3002\r\n\r\n\u7136\u540e\u679a\u4e3e\u7b54\u6848\u3002\r\n\r\n\u6240\u6709\u7684\u70b9\u4e3a\u201c\u7b2ci\u4e2a\u661f\u9645\u7ad9\u5728\u7b2ct\u79d2\u201d\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001\u7684\u70b9\uff0c\u90a3\u4e48\u679a\u4e3e\u7684\u7b54\u6848\u6bcf\u589e\u52a01\uff0c\u5c31\u9700\u8981\u65b0\u5efa\u201c\u4e00\u5957\u201d\u5730\u7403\u548c\u592a\u7a7a\u7ad9\u7684\u70b9\u3002\r\n\r\n\u6e90\u70b9\u5411\u6bcf\u4e00\u4e2a\u201c\u5730\u7403\u201d\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u6bcf\u4e2a\u7a7a\u95f4\u7ad9\u5411\u4e0b\u4e00\u65f6\u95f4\u7684\u8be5\u7a7a\u95f4\u7ad9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u4ee3\u8868\u65f6\u95f4\u95f4\u7684\u8f6c\u79fb\u3002\r\n\r\n\u6bcf\u4e2a\u98de\u8239\u73b0\u5728\u5728\u54ea\u4e2a\u661f\u7403\uff0c\u4e0b\u4e00\u79d2\u4f1a\u98de\u5230\u54ea\u4e00\u4e2a\u661f\u7403\u90fd\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\uff0c\u6240\u4ee5\u76f4\u63a5\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u98de\u8239\u8f7d\u4eba\u91cf\u3002\r\n\r\n\u6708\u7403\u5c31\u662f\u6c47\u70b9\u3002\r\n\r\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41\u5927\u4e8e\u9700\u8981\u8f6c\u79fb\u7684\u4eba\u6570\u4e86\uff0c\u90a3\u4e48\u5c31\u5f97\u5230\u4e86\u89e3\u3002\r\n\r\n\u7531\u4e8e\u6211\u7528\u7684\u6700\u5927\u6d41\u7b97\u6cd5\u662fdinic\uff0c\u6240\u4ee5\u679a\u4e3e\u7136\u540e\u6bcf\u6b21\u5efa\u7acb\u65b0\u8fb9\uff0c\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u53cd\u800c\u6bd4\u4e8c\u5206\u7b54\u6848\u540e\u5efa\u7acb\u65b0\u56fe\u91cd\u8dd1\u6700\u5927\u6d41\u5feb\u3002\r\n\r\n\u4ee3\u7801\u91cc\u7684\u8bf4\u660e\u4e0d\u662f\u5f88\u8be6\u7ec6\uff0c\u56e0\u4e3a\u8bf4\u660e\u90fd\u5728\u4e0a\u9762\u4e86\u3002\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int inf=0x3f3f3f3f,M=1000005;\r\nint n,m,k,s,t,tot=1,ans,mx;\r\nint f[100],p[100],g[100][100],num[100];//\u8fd9\u91cc\u4e0d\u5f00\u8fd9\u4e48\u5927\u7b2c\u4e8c\u4e2a\u70b9\u4f1aRE\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\r\nint ne[M],to[M],h[M],flow[M],lev[M],q[M];\r\nint find(int x) {\r\n    if(f[x]==x) return x;\r\n    f[x]=find(f[x]);return f[x];\r\n}\r\nvoid uni(int x,int y) {//\u5e76\u67e5\u96c6\u7684\u8fde\u63a5\u64cd\u4f5c\r\n    x=find(x),y=find(y);\r\n    if(x!=y) f[x]=y;\r\n}\r\nvoid add(int x,int y,int z) {\r\n    to[++tot]=y,ne[tot]=h[x],h[x]=tot,flow[tot]=z;\r\n    to[++tot]=x,ne[tot]=h[y],h[y]=tot,flow[tot]=0;\r\n}\r\nint dfs(int x,int liu) {\r\n    if(x==t) return liu;\r\n    int kl,sum=0;\r\n    for(int i=h[x];i;i=ne[i])\r\n        if(flow[i]>0&&lev[to[i]]==lev[x]+1) {\r\n        kl=dfs(to[i],min(flow[i],liu-sum));\r\n        sum+=kl,flow[i]-=kl,flow[i^1]+=kl;\r\n        if(sum==liu) return sum;\r\n    }\r\n    return sum;\r\n}\r\nint bfs() {\r\n    for(int i=1;i<=ans*(n+1);++i) lev[i]=0;\r\n    int he=1,ta=1,x;lev[t]=0,q[1]=s;\r\n    while(he<=ta) {\r\n        x=q[he],++he;\r\n        if(x==t) return 1;\r\n        for(int i=h[x];i;i=ne[i])\r\n            if(flow[i]>0&&!lev[to[i]])\r\n            lev[to[i]]=lev[x]+1,q[++ta]=to[i];\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int x,y;\r\n    scanf(\"%d%d%d\",&n,&m,&k);\r\n    s=0,t=M-2;\r\n    for(int i=1;i<=n+2;++i) f[i]=i;\r\n    for(int i=1;i<=m;++i) {\r\n        scanf(\"%d%d\",&p[i],&num[i]);\r\n        for(int j=0;j<num[i];++j) {\r\n            scanf(\"%d\",&g[i][j]);\r\n            if(g[i][j]==0) g[i][j]=n+1;\r\n            if(g[i][j]==-1) g[i][j]=n+2;\r\n            if(j!=0) uni(g[i][j-1],g[i][j]);\r\n        }\r\n    }\r\n    if(find(n+1)!=find(n+2)) {puts(\"0\");return 0;}//\u5982\u679c\u6ca1\u6709\u8f6c\u79fb\u65b9\u6848\r\n    for(ans=1;;++ans) {//\u679a\u4e3e\u7b54\u6848\r\n        add(s,(ans-1)*(n+1)+n+1,inf);//n+1\u662f\u5730\u7403\uff0c\u6c47\u70b9\u662f\u6708\u7403\u3002\u5411\u5730\u7403\u8fdeinf\u7684\u8fb9\r\n        for(int i=1;i<=m;++i) {\r\n            x=(ans-1)%num[i],y=ans%num[i];\r\n            if(g[i][x]==n+2) x=t;\r\n            else x=(ans-1)*(n+1)+g[i][x];\r\n            if(g[i][y]==n+2) y=t;\r\n            else y=ans*(n+1)+g[i][y];\r\n            add(x,y,p[i]);//\u4e00\u8258\u98de\u8239\u4e00\u6761\u8fb9\r\n        }\r\n        while(bfs()) mx+=dfs(s,inf);//dinic\u7f51\u7edc\u6d41\r\n        if(mx>=k) {printf(\"%d\\n\",ans);return 0;}\r\n        for(int i=1;i<=n+1;++i) add((ans-1)*(n+1)+i,ans*(n+1)+i,inf);//\u65f6\u95f4\u95f4\u7684\u8f6c\u79fb\r\n    }\r\n    return 0;\r\n}\r\n\r\n```",
        "postTime": 1512020052,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2754 \u3010\u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u5206\u5c42\u56fe\u6700\u5927\u6d41\u95ee\u9898\r\n\r\n\u6837\u4f8b\u7684\u5206\u5c42\u56fe\u5927\u6982\u957f\u8fd9\u6837\u2193\r\n\r\n![](https://cdn.luogu.com.cn/upload/pic/15957.png)\r\n\r\n\u6309\u65f6\u95f4\u5206\u5c42\uff0c\u8fde\u8fb9\uff0c\u8dd1\u6700\u5927\u6d41\u5373\u53ef\uff0cdinic\u5229\u7528\u6b8b\u91cf\u7f51\u7edc\u53ef\u4ee5\u8dd1\u5f97\u66f4\u5feb\u4e00\u4e9b\u3002\r\n\r\n\u5bf9\u4e8e\u65e0\u89e3\u7684\u5224\u65ad\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u3002\r\n\r\n\u4e0a\u4ee3\u7801\u2193\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<algorithm>\r\nusing namespace std;\r\n\r\nconst int INF=2e9;\r\n\r\nint n,m,s,t,np=1,p,mfl;\r\nint l[21][21],f[21],h[5005],cur[5005],tp[5005],q[50050];\r\nstruct rpg{\r\n\tint li,nx,ln;\r\n}a[50050];\r\n\r\nvoid add(int ls,int nx,int ln){\r\n\ta[++np]=(rpg){h[ls],nx,ln};\r\n\th[ls]=np;\r\n\ta[++np]=(rpg){h[nx],ls,0};\r\n\th[nx]=np;\r\n}\r\n\r\nint find(int x){\r\n\tif(f[x]==x) return x;\r\n\telse return f[x]=find(f[x]);\r\n}void un(int a,int b){\r\n\tint fa=find(a),fb=find(b);\r\n\tif(fa!=fb) f[fa]=fb;\r\n}\r\n\r\nbool bfs(int ps){\r\n\tmemset(tp,0,sizeof(tp));\r\n\tint hd=1,tl=1;\r\n\tq[hd]=s;\r\n\ttp[s]=1;\r\n\twhile(hd<=tl){\r\n\t\tint nw=q[hd++];\r\n\t\tfor(int i=h[nw];i;i=a[i].li){\r\n\t\t\tif(a[i].ln&&!tp[a[i].nx]){\r\n\t\t\t\ttp[a[i].nx]=tp[nw]+1;\r\n\t\t\t\tq[++tl]=a[i].nx;\r\n\t\t\t}\r\n\t\t}\r\n\t}return tp[t];\r\n}\r\n\r\nint dfs(int u,int maxn){\r\n\tif(u==t||!maxn) return maxn;\r\n\tint sum=0;\r\n\tfor(int& i=cur[u];i;i=a[i].li){\r\n\t\tif(a[i].ln&&tp[a[i].nx]==tp[u]+1){\r\n\t\t\tint f=dfs(a[i].nx,min(maxn,a[i].ln));\r\n\t\t\tif(f){\r\n\t\t\t\tmaxn-=f;\r\n\t\t\t\tsum+=f;\r\n\t\t\t\ta[i].ln-=f;\r\n\t\t\t\ta[i^1].ln+=f;\r\n\t\t\t\tif(!maxn) break;\r\n\t\t\t}\r\n\t\t}\r\n\t}return sum;\r\n}\r\n\r\nvoid dnc(int ps){\r\n\twhile(bfs(ps)){\r\n\t\tfor(int i=0;i<=ps;++i) cur[i]=h[i];\r\n\t\twhile(int d=dfs(s,INF)) mfl+=d;\r\n\t}\r\n}\r\n\r\nint main(){\r\n\t\r\n\tscanf(\"%d%d%d\",&n,&l[0][0],&p);t=n+1;\r\n\tfor(int i=1;i<=n+1;++i) f[i]=i;\r\n\t\r\n\tfor(int i=1;i<=l[0][0];++i){\r\n\t\tscanf(\"%d%d\",&l[0][i],&l[i][0]);\r\n\t\tfor(int j=1;j<=l[i][0];++j){\r\n\t\t\tscanf(\"%d\",&l[i][j]);\r\n\t\t\tif(l[i][j]==-1) l[i][j]=n+1;\r\n\t\t\tif(j>1) un(l[i][j],l[i][j-1]);\r\n\t\t}\r\n\t}if(find(0)!=find(n+1)){\r\n\t\tputs(\"0\");\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfor(int ti=1;;++ti){\r\n\t\t\r\n\t\tfor(int i=0;i<=n;++i){\r\n\t\t\tadd(i+(ti-1)*(n+2),i+ti*(n+2),INF);\r\n\t\t}add(n+1+ti*(n+2),n+1+(ti-1)*(n+2),INF);\r\n\t\tfor(int i=1;i<=l[0][0];++i){\r\n\t\t\tint tmp=(ti-1)%l[i][0]+1;\r\n\t\t\tadd(l[i][tmp]+(ti-1)*(n+2),l[i][ti%l[i][0]+1]+ti*(n+2),l[0][i]);\r\n\t\t}\r\n\t\t\r\n\t\tdnc((ti+1)*(n+2));\r\n\t\tif(mfl>=p){\r\n\t\t\tprintf(\"%d\\n\",ti);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t}return 0;\r\n}\r\n```",
        "postTime": 1521683846,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed\u3011"
    },
    {
        "content": "\u83dc\u9e21\u5927\u5b66\u751f\u653e\u4e00\u4e0b\u7528*\u6548\u7387*\u548c*\u884c\u6570*\u6362\u6765\u7684*\u53ef\u8bfb\u6027*\uff08\u771f\u7684\u6709\u5417\uff09\u4ee3\u7801\u9898\u89e3\u3002\n\n---\n### \u7b97\u6cd5\u601d\u8def\n\u6574\u4f53\u601d\u8def\u662f\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u518d\u6309\u65f6\u95f4\u5206\u5c42\u5efa\u56fe\uff0c\u7136\u540e**\u679a\u4e3e\u65f6\u95f4**\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u8dd1\u6700\u5927\u6d41\u770b\u4ec0\u4e48\u65f6\u5019\u6700\u5927\u6d41\u5927\u4e8e\u7b49\u4e8e\u4eba\u6570\uff0c\u5f53\u524d\u65f6\u95f4\u5c31\u662f\u7b54\u6848\u3002\n\n\u5efa\u56fe\u65b9\u6cd5\u5176\u5b83\u5927\u4f6c\u8bf4\u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u6211\u8fd9\u91cc\u5c31\u76f4\u63a5\u8bf4\u4e86\uff1a\n\n1. \u5c42: $0$\u5230$t$\u5c42\uff0c\u8868\u793a\u65f6\u95f4\uff0c\u6bcf\u5c42\u6709$(n+2)$\u4e2a\u70b9\u6570.\n2. \u8282\u70b9: \n\t- \u6e90\u70b9: $0$ \n\t- \u6c47\u70b9: $(n+2)*t+n+1$\uff08\u7b2ct\u5c42\u7684\u6708\u7403\uff09\n\t- \u7b2cf\u5c42\u5730\u7403: $(n+2)*f+0$\n\t- \u7b2cf\u5c42\u7a7a\u95f4\u7ad9i: $(n+2)*f+i$\n\t- \u7b2cf\u5c42\u6708\u7403: $(n+2)*f+n+1$.\n3. \u5f27:\n\t- ($t$\u5c42\u8282\u70b9, $t+1$\u5c42\u5bf9\u5e94\u8282\u70b9, INF)\n\t- ($t$\u5c42\u8282\u70b9, $t$\u65f6\u523b\u98de\u8239\u8def\u5f84\u5230\u8fbe\u7684\u8282\u70b9, \u98de\u8239\u5bb9\u91cf)\n4. \u6700\u5927\u6d41:\n\t- \u6ee1\u8db3\u6700\u5927\u6d41\u5927\u4e8e\u7b49\u4e8e\u521d\u59cb\u4eba\u6570\u7684\u6700\u5c0f\u65f6\u95f4$t$\u5373\u4e3a\u7b54\u6848\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6ca1\u6709\u5355\u72ec\u5efa\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u8dd1\u51fa\u7684\u6700\u5927\u6d41\u53ef\u80fd\u4f1a\u6070\u5927\u4e8e\u4eba\u6570k\uff0c\u5982\u679c\u4ee5\u7b49\u4e8e\u4eba\u6570k\u53bb\u5224\u65ad\uff0c\u4f1aTLE\u5230\u7206\u70b8\uff08\u8840\u6cea\u6559\u8bad\uff09\u3002\n\n---\n### \u4ee3\u7801\n\u9700\u8981C++11\n\n1. dinic\u677f\u5b50\n\n\u53ef\u4ee5\u8c03\u7528\u7684\u51fd\u6570\u4e00\u5171\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f\u6dfb\u52a0\u8fb9\u7684addEdge\u548c\u6c42\u6700\u5927\u6d41\u7684maxflow\u3002\naddEdge\u4f1a\u81ea\u52a8\u6dfb\u52a0\u53cd\u5411\u5f27\u3002\n\n```cpp\nstruct Dinic\n{\n    void addEdge(int from, int to, int cap);\n    int maxflow(int _s, int _t);\n}dinic;\n```\n\u9700\u8981\u4e24\u4e2a\u5168\u5c40\u5e38\u6570 `const int M = 100016, INF = 1000000007;`\n\n2. \u98de\u8239\n\nget_path\u53ef\u4ee5\u63a5\u6536\u5929\u6570\uff0c\u8fd4\u56de\u67d0\u6761\u5f27\u7684\u8d77\u59cb\u70b9\u3002\n```cpp\nstruct SpaceShip\n{\n\tint limit; //\u4eba\u6570\u9650\u5236\n\tint cycle; //\u5468\u671f\n\tvector<int> path; //\u8def\u5f84\n\tpair<int,int> get_path(int day)\n\t{\n\t\treturn {path[day%cycle], path[(day+1)%cycle]};\n\t}\n}ship[32];\n```\n\n3. \u5e76\u67e5\u96c6\n\n\u4e3a\u4e86\u51cf\u5c11\u5168\u5c40\u53d8\u91cf\u548c\u5168\u5c40\u51fd\u6570\u5f3a\u884cstruct\u3002\n```cpp\nstruct UnionFindSet\n{\n\tint fa[20]={};\n\tvoid init()\n\t{\n\t\tfor(int i=1;i<20;++i)\n\t\t\tfa[i] = i;\n\t}\n\tint find(int a)\n\t{\n\t\treturn fa[a]==a ? a : fa[a]=find(fa[a]);\n\t}\n\tvoid add(int a, int b)\n\t{\n\t\tfa[find(a)] = find(b);\n\t}\n\tbool check(int a, int b)\n\t{\n\t\treturn find(a) == find(b);\n\t}\n}ufs;\n```\n\n    \n4. \u4e3b\u5e72\u4ee3\u7801: \u8bfb\u5165\u4e0e\u5224\u65ad\u65e0\u89e3\n\n\n```cpp\n\tint n=read(), m=read(), k=read(); //\u592a\u7a7a\u7ad9\u6570,\u592a\u7a7a\u8239\u6570,\u4eba\u6570\n\tufs.init();\n\tfor(int i=0; i<m; ++i)\n\t{\n\t\tship[i].limit = read();\n\t\tship[i].cycle = read();\n\t\tfor(int j=0; j<ship[i].cycle; ++j)\n\t\t{\n\t\t\tint star=read();\n\t\t\tif(star==-1) star=n+1; //\u5c06\u6708\u7403\u7684-1\u53d8\u6210n+1\n\t\t\tship[i].path.push_back(star);\n\t\t\tufs.add(star, ship[i].path[0]);\n\t\t}\n\t}\n\tif(!ufs.check(0,n+1))\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n```\n\n5. \u4e3b\u5e72\u4ee3\u7801\uff1a\u679a\u4e3e\u7b54\u6848\n```cpp\n\tfor(int day=1, maxflow=0; ; ++day)\n\t{\n\t\tint off1 = (day-1)*(n+2), off2 = day*(n+2); //\u4e0a\u4e00\u5c42\u548c\u672c\u5c42\u7684\u504f\u79fb\u91cf\n\t\tfor(int i=0; i<=n+1; ++i)\n\t\t\tdinic.addEdge(off1+i, off2+i, INF); //\u4e0d\u8f6c\u79fb\n\t\tfor(int i=0, s, t; i<m; ++i)\n\t\t{\n\t\t\ttie(s,t) = ship[i].get_path(day-1);;\n\t\t\tdinic.addEdge(off1+s, off2+t, ship[i].limit);  //\u8f6c\u79fb\n\t\t}\n\t\tmaxflow += dinic.maxflow(0, off2+n+1);\n\t\tif(maxflow>=k)\n\t\t{\n\t\t\tprintf(\"%d\\n\",day );\n\t\t\treturn 0;\n\t\t}\n\t}\n```\n\n\u9664\u4e86\u8fd9\u4e9b\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u5feb\u8bfb\u677f\u5b50\uff0c\u56e0\u4e3a\u548c\u9898\u76ee\u5173\u7cfb\u4e0d\u5927\uff0c\u5c31\u4e0d\u5355\u72ec\u5217\u51fa\u4e86\u3002\n\n### \u5b8c\u6574\u4ee3\u7801\n```cpp\n/* LittleFall : Hello! */\n#include <bits/stdc++.h>\nusing namespace std; typedef long long ll; inline int read();\nconst int M = 100016, INF = 1000000007;\n\nstruct Dinic\n{\n    struct Edge\n    {\n        int from, to, cap, flow;\n    };\n    int s, t; //\u8282\u70b9\u6570,\u8fb9\u6570,\u6e90\u70b9\u7f16\u53f7,\u6c47\u70b9\u7f16\u53f7\n    vector<Edge> edges; //\u8fb9\u8868,edges[e]\u548cedges[e^1]\u4e92\u4e3a\u53cd\u5411\u5f27\n    vector<int> G[M]; //\u90bb\u63a5\u8868,G[i][j]\u8868\u793a\u8282\u70b9i\u7684\u7b2cj\u6761\u8fb9\u5728e\u4e2d\u7684\u5e8f\u53f7\n    bool vis[M]; //bfs\u7528\n    int d[M]; //\u4ece\u8d77\u70b9\u5230i\u7684\u8ddd\u79bb\n    int cur[M]; //\u5f53\u524d\u5f27\u4e0b\u6807\n    void addEdge(int from, int to, int cap)\n    {\n        edges.push_back({from, to, cap, 0});\n        edges.push_back({to, from, 0, 0});\n        G[from].push_back(edges.size() - 2);\n        G[to].push_back(edges.size() - 1);\n    }\n    bool BFS()\n    {\n        memset(vis, 0, sizeof(vis));\n        queue<int> q;\n        q.push(s);\n        d[s] = 0;\n        vis[s] = 1;\n        while(!q.empty())\n        {\n            int u = q.front();\n            q.pop();\n            for(int id : G[u])\n            {\n                Edge &e = edges[id];\n                if(!vis[e.to] && e.cap > e.flow)\n                {\n                    vis[e.to] = 1;\n                    d[e.to] = d[u] + 1;\n                    q.push(e.to);\n                }\n            }\n        }\n        return vis[t];\n    }\n    int DFS(int u, int a)\n    {\n        if(u == t || a == 0) return a;\n        int flow = 0, f;\n        for(int &i = cur[u]; i < (int)G[u].size(); ++i)\n        {\n            Edge &e = edges[G[u][i]];\n            if(d[u] + 1 == d[e.to] && \n                (f = DFS(e.to, min(a, e.cap - e.flow))) > 0)\n            {\n                e.flow += f;\n                edges[G[u][i] ^ 1].flow -= f;\n                flow += f;\n                a -= f;\n                if(a == 0) break;\n            }\n        }\n        return flow;\n    }\n    int maxflow(int _s, int _t)\n    {\n        s = _s;\n        t = _t;\n        int flow = 0;\n        while(BFS())\n        {\n            memset(cur, 0, sizeof(cur));\n            flow += DFS(s, INF);\n        }\n        return flow;\n    }\n}dinic;\n\n/* \u6309\u65f6\u95f4\u5206\u5c42\u7684\u6700\u5927\u6d41\u7b97\u6cd5\n\u5c42: \u8868\u793a\u65f6\u95f4,\u4ece0\u5f00\u59cb,\u6bcf\u5c42\u6709(n+2)\u7684\u504f\u79fb.\n\u8282\u70b9: \n\t\u6e90\u70b9: 0 \n\t\u6c47\u70b9: (n+2)*t+n+1\n\t\u7b2cf\u5c42\u5730\u7403: (n+2)*f+0\n\t\u7b2cf\u5c42\u7a7a\u95f4\u7ad9i: (n+2)*f+i\n\t\u7b2cf\u5c42\u6708\u7403: (n+2)*f+n+1.\n\u5f27:\n\t(t\u5c42\u8282\u70b9, t+1\u5c42\u5bf9\u5e94\u8282\u70b9, INF)\n\t(t\u5c42\u8282\u70b9, t\u65f6\u523b\u98de\u8239\u8def\u5f84\u5230\u8fbe\u7684\u8282\u70b9, \u98de\u8239\u5bb9\u91cf)\n\u6700\u5927\u6d41:\n\t\u6ee1\u8db3\u6700\u5927\u6d41\u7b49\u4e8e\u521d\u59cb\u4eba\u6570\u7684\u6700\u5c0f\u65f6\u95f4t\u5373\u4e3a\u7b54\u6848\n*/\nstruct SpaceShip\n{\n\tint limit;\n\tint cycle;\n\tvector<int> path;\n\tpair<int,int> get_path(int day)\n\t{\n\t\treturn {path[day%cycle], path[(day+1)%cycle]};\n\t}\n}ship[32];\nstruct UnionFindSet\n{\n\tint fa[20]={};\n\tvoid init()\n\t{\n\t\tfor(int i=1;i<20;++i)\n\t\t\tfa[i] = i;\n\t}\n\tint find(int a)\n\t{\n\t\treturn fa[a]==a ? a : fa[a]=find(fa[a]);\n\t}\n\tvoid add(int a, int b)\n\t{\n\t\tfa[find(a)] = find(b);\n\t}\n\tbool check(int a, int b)\n\t{\n\t\treturn find(a) == find(b);\n\t}\n}ufs;\nint main(void)\n{\n\t#ifdef _LITTLEFALL_\n\tfreopen(\"in.txt\",\"r\",stdin);\n    #endif\n\n\tint n=read(), m=read(), k=read(); //\u592a\u7a7a\u7ad9\u6570,\u592a\u7a7a\u8239\u6570,\u4eba\u6570\n\tufs.init();\n\tfor(int i=0; i<m; ++i)\n\t{\n\t\tship[i].limit = read();\n\t\tship[i].cycle = read();\n\t\tfor(int j=0; j<ship[i].cycle; ++j)\n\t\t{\n\t\t\tint star=read();\n\t\t\tif(star==-1) star=n+1;\n\t\t\tship[i].path.push_back(star);\n\t\t\tufs.add(star, ship[i].path[0]);\n\t\t}\n\t}\n\tif(!ufs.check(0,n+1))\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\n\tfor(int day=1, maxflow=0; ; ++day)\n\t{\n\t\tint off1 = (day-1)*(n+2), off2 = day*(n+2); //\u4e0a\u4e00\u5c42\u548c\u672c\u5c42\u7684\u504f\u79fb\u91cf\n\t\tfor(int i=0; i<=n+1; ++i)\n\t\t\tdinic.addEdge(off1+i, off2+i, INF); //\u4e0d\u8f6c\u79fb\n\t\tfor(int i=0, s, t; i<m; ++i)\n\t\t{\n\t\t\ttie(s,t) = ship[i].get_path(day-1);;\n\t\t\tdinic.addEdge(off1+s, off2+t, ship[i].limit);  //\u8f6c\u79fb\n\t\t}\n\t\tmaxflow += dinic.maxflow(0, off2+n+1);\n\t\tif(maxflow>=k)\n\t\t{\n\t\t\tprintf(\"%d\\n\",day );\n\t\t\treturn 0;\n\t\t}\n\t}\n    return 0;\n}\n\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n```\n\n\n",
        "postTime": 1555925751,
        "uid": 43358,
        "name": "LittleFall",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed\u3011"
    },
    {
        "content": "# \u661f\u9645\u8f6c\u79fb\u95ee\u9898\n\n\u9898\u76ee:[\u81ea\u5df1\u5eb7](https://www.luogu.org/problem/P2754)\n\n## \u89e3\u6cd5:(~~\u54b1\u5f88\u83dc \u54b1\u4e0d\u77e5\u9053\u600e\u4e48\u8bb2\u8fd9\u4e00\u9898~~)\n\u6839\u636e\u9898\u610f \u548c\u6837\u4f8b\u6570\u636e \u53ef\u4ee5yy\u51fa\u4e0b\u9762\u8fd9\u5f20\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w3dld7mc.png)\n\n\u6bcf\u4e2a\u70b9\u53ef\u80fd\u4f1a\u5b58\u591a\u6b21 \u800c\u6bcf\u6761\u8fb9\u4e5f\u4f1a\u6839\u636e\u65f6\u95f4\u53d8\u5316\u53d1\u751f\u6539\u53d8      \n\u6240\u4ee5 \u6211\u4eec\u4ee5\u65f6\u95f4\u4e3a\u57fa\u51c6 \u6765\u8fdb\u884c\u5206\u5c42     \n\u6b64\u65f6 \u95ee\u9898\u5c31\u8f6c\u53d8\u4e3a \u4ece0\u5f00\u59cb\u679a\u4e3e\u65f6\u95f4 \u6bcf\u6b21\u679a\u4e3e\u65f6\u95f4\u540e \u6dfb\u52a0\u4e00\u5b9a\u91cf\u7684\u8fb9  \n\u4f7f\u65b0\u56fe\u4e0e\u65e7\u56fe\u4ea7\u751f\u8054\u7cfb \u5f53\u56fe\u4e2d\u7684\u6700\u5927\u6d41\u91cf\u6bd4\u603b\u4eba\u6570\u5927\u7684\u65f6\u5019 \u8f93\u51fa\u8fd9\u65f6\u7684\u65f6\u95f4\n\n\u56e0\u4e3a\u98de\u8239\u4f1a\u6839\u636e\u4e00\u5b9a\u5468\u671f\u53d1\u751f\u4f4d\u7f6e\u53d8\u5316 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 **\u5f53\u524d\u65f6\u95f4mod\u5468\u671f**\n\u5f53\u524d\u65f6\u95f4 \u98de\u8239\u6240\u5728\u7684\u4f4d\u7f6e \u548c \u98de\u8239\u4e0a\u4e00\u65f6\u95f4\u6240\u5728\u7684\u4f4d\u7f6e  \n\u4e4b\u540e \u6211\u4eec\u628a\u4e24\u4e2a\u4f4d\u7f6e\u8fde\u5728\u4e00\u8d77 \u5176\u4e2d \u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a\u98de\u8239$i$\u7684\u5bb9\u91cf$hp[i]$  \n$ship[i][j]$ \u7b2c $i$ \u8258\u8239\u5728\u5468\u671f\u4e2d\u7b2c $j$ \u6b21\u7684\u4f4d\u7f6e     \n \n\u6839\u636eyy\u7684\u56fe\u53ef\u4ee5\u53d1\u73b0 \u4ee5\u6e90\u70b9\u4e3a0\u6765\u8ba1\u7b97    \n\u4e0d\u540c\u7684\u70b9(\u51fa\u53bb\u6e90\u70b9\u548c\u6c47\u70b9)\u5171\u6709n+2\u4e2a(n\u4e2a\u592a\u7a7a\u7ad9 \u5730\u7403 \u6708\u7403)   \n(\u4e0b\u9762n=n+2_(:\u0437\u309d\u2220)_)                     \n**\u628a\u6bcf\u4e2a\u7a7a\u95f4\u7ad9(\u5305\u62ec\u5730\u6708)\u4e0e\u5b83\u4eec\u5728\u4e0a\u4e00\u5929\u7684\u70b9\u8fde\u5728\u4e00\u8d77**\n```cpp\nae((day-1)*n+i,day*n+i,inf);\nae(day*n+i,(day-1)*n+i,0);\n```\n\n\u4e4b\u540e\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e2a\u98de\u8239\u7684\u60c5\u51b5 \u628a\u98de\u8239\u5f53\u524d\u70b9\u4e0e\u5b83\u4eec\u5728\u4e0a\u4e00\u5929\u7684\u70b9\u8fde\u5728\u4e00\u8d77  \n(!\u6ce8 \u6bcf\u6761\u8fb9\u4e3a\u98de\u8239\u7684\u5bb9\u91cf\n\n**\u4ee3\u7801\u9171 OVO\u2193**\n\n```cpp\n//CTSC1999 \u5bb6\u56ed\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define N 500001\n#define M 100\n#define maxt 500\n#define v to[i]\n#define inf 0x7f7f7f7f\n\nint n,m,k,s,t;\nint sum,ans,day;//day:0->maxt\nint dep[N],vis[N];\nint ship[M][M],turn[M],hp[M];//\u8239[i]\u5728[j]\u65f6\u523b\u7684\u4f4d\u7f6e \u8239i\u7684\u5faa\u73af\u5468\u671f \u8239i\u5bb9\u91cf \nint head[N],to[N],from[N],nex[N],w[N],ecnt;\n\nvoid ae(int x,int y,int z){\n    from[ecnt]=x;\n    to[ecnt]=y;\n    w[ecnt]=z;\n    nex[ecnt]=head[x];\n    head[x]=ecnt++;\n}\n\nbool bfs(){\n    memset(dep,-1,sizeof(dep));\n    queue<int> q;\n    dep[s]=1;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i!=-1;i=nex[i]){\n            if(dep[v]==-1 and w[i]>0){\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[t]!=-1;\n}\n\nint dfs(int u,int low){\n    if(u==t)\n        return low;\n    int ret=low;\n    for(int i=head[u];i!=-1;i=nex[i]){\n        if(dep[v]==dep[u]+1 and w[i]>0){\n            int flow=dfs(v,min(ret,w[i]));\n            if(flow>0){\n                w[i]-=flow;\n                w[i^1]+=flow;\n            }\n            ret-=flow;\n            if(!ret)\n                break;\n        }\n    }\n    return low-ret;\n}\n\nint dinic(){\n    int res=0;\n    while(bfs()){\n        res+=dfs(s,inf);\n    }\n    return res;\n}\n\nvoid init(){\n    int x;\n    scanf(\"%d%d%d\",&n,&m,&k);\n    n+=2;//n=\u592a\u7a7a\u7ad9\u6570+2(\u5730\u7403+\u6708\u7403\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&hp[i],&turn[i]);\n        for(int j=1;j<=turn[i];j++){\n            scanf(\"%d\",&ship[i][j]);\n            ship[i][j]+=2;//\u6708\u74031 \u5730\u74032 \u5176\u4ed6\u661f\u7403\u5168+2\n        }\n    }\n}\n\nint main(){\n    init();\n    sum=0,day=0;\n    memset(head,-1,sizeof(head));\n    s=0,t=10000;//\u4e71\u641e \u628a\u6c47\u70b9\u8bbe\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\n    \n    while(day<maxt){    \n        \n        ae(s,day*n+2,inf);//\u7b2cday\u5929\u7684\u5730\u7403\u548c\u6e90\u70b9\u8fde\u5728\u4e00\u8d77\n        ae(day*n+2,s,0);\n        \n        ae(day*n+1,t,inf);//\u7b2cday\u5929\u7684\u6708\u4eae\u548c\u6c47\u70b9\u8fde\u5728\u4e00\u8d77\n        ae(t,day*n+1,0);\n        \n        if(day!=0){//\u5982\u679c\u4e0d\u662f\u7b2c0\u5929 \u5373\u521d\u72b6\u6001\n            for(int i=1;i<=n;i++){//\u628a\u540c\u4e00\u661f\u7403\u524d\u540e\u4e24\u5929\u8fde\u8d77\u6765\n                ae((day-1)*n+i,day*n+i,inf);\n                ae(day*n+i,(day-1)*n+i,0);\n            }\n            for(int i=1;i<=m;i++){\n                //\u901a\u8fc7\u53d6\u4f59\u5f97\u5230\u7b2cday\u5929 \u98de\u8239i\u5230\u5faa\u73af\u7684\u54ea\u4e2a\u5730\u65b9\n                int x=ship[i][(day-1)%turn[i]+1];//\u4e0a\u4e00\u4e2a\u5730\u65b9\n                int y=ship[i][day%turn[i]+1];//\u4e0b\u4e00\u4e2a\u5730\u65b9\n                ae((day-1)*n+x,day*n+y,hp[i]);\n                ae(day*n+y,(day-1)*n+x,0);\n            }\n        }\n        \n        sum+=dinic();\n        if(sum>=k)\n            break;\n        day++;\n    }\n    if(day==maxt){\n        printf(\"0\\n\");\n        return 0;\n    }\n    else{\n        printf(\"%d\\n\",day);\n        return 0;\n    }\n    return 0;\n}\n```",
        "postTime": 1572954701,
        "uid": 58751,
        "name": "VanillaYuzume",
        "ccfLevel": 0,
        "title": "\u661f\u9645\u8f6c\u79fb\u95ee\u9898"
    },
    {
        "content": "# \u7b97\u6cd5\uff1a\u7f51\u7edc\u6d41\uff08\u6700\u5927\u6d41\uff09+\u5e76\u67e5\u96c6\uff08\u5224\u8054\u901a\uff09\n\n\n# \u601d\u8def\uff1a\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e00\u5929\u98de\u8239\u505c\u9760\u7684\u5730\u65b9\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4e8e\u662f\u6211\u4eec~~\u5f88\u81ea\u7136~~\u4f5b\u745e\u60f3\u5230\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u7a7a\u95f4\u7ad9\u7684\u6bcf\u4e2a\u65f6\u95f4\u70b9\u8fdb\u884c\u62c6\u70b9\uff08\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u52a8\u6001\u56fe\uff0c\u6bcf\u8fc7\u4e00\u4e2a\u65f6\u95f4\u70b9\u90fd\u53ef\u4ee5\u5efa\u4e00\u4e2a\u56fe\uff09\n\u603b\u7ed3\u6765\u8bf4\u5c31\u662f\u5bf9\u4e8e\u8fd9\u79cd\u4e00\u4e2a\u70b9\uff08\u8868\u9762\u610f\u4e49\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u4f4d\u7f6e\uff09\u5bf9\u5e94\u591a\u79cd\u60c5\u51b5\u7684\uff08\u6bd4\u5982\u8bf4\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6709\u7740\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u800c\u4e14\u8fd9\u79cd\u72b6\u6001>2\uff09\uff0c\u6211\u4eec\u8003\u8651\u5728\u7c7b\u4f3c\u4e8e\u5206\u5c42\u56fe\u4e0a\u9762\u8dd1\u7f51\u7edc\u6d41\u3002\n\n## \u63a5\u4e0b\u6765\u662f\u5efa\u56fe\uff1a\n\n\n\u9996\u5148\u5730\u7403\u662f\u8d77\u59cb\u7ad9\uff0c\u6e90\u70b9\u80af\u5b9a\u8981\u5411\u6bcf\u4e2a\u65f6\u523b\u7684\u5730\u7403\u8fde\u8fb9\u5427\uff0c\u5bb9\u91cfINF\u3002\u7136\u540e\u6708\u7403\u662f\u7ec8\u70b9\uff0c\u6240\u4ee5\u8981\u5411\u6bcf\u4e2a\u65f6\u523b\u7684\u6708\u7403\u8fde\u8fb9\uff0c\u5bb9\u91cfINF\u3002\u4e4b\u540e\u5bf9\u4e8e\u5728\u7a7a\u95f4\u7ad9\u7684\u4eba\u4eec\u5c31\u662f\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u4eba\u4eec\u53ef\u4ee5\u9009\u62e9\u6b64\u65f6\u5728\u8be5\u7a7a\u95f4\u7ad9\u7684\u98de\u8239\uff0c\u98de\u5411\u4e0b\u4e00\u4e2a\u7a7a\u95f4\u7ad9\uff08/\u5730\u7403/\u6708\u7403\uff09\u3002\n2. \u65e0\u6cd5\u79fb\u52a8\uff0c\u6240\u4ee5\u7559\u5728\u6b64\u5904\u3002\n\n\u663e\u7136\u6211\u4eec\u628a\u65f6\u523b\u62c6\u5f00\u4e4b\u540e\uff0c\u5f88\u8f7b\u6613\u5c31\u80fd\u8ba1\u7b97\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u98de\u8239\uff0c\u5f53\u524d\u65f6\u523b\u7684\u4f4d\u7f6e\u548c\u4e0b\u4e00\u65f6\u523b\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u5728\u5206\u5c42\u56fe\u4e0a\u8fde\u8fb9\u5373\u53ef\uff0c\u5bb9\u91cf\u4e3a\u6700\u5927\u8f7d\u91cd\u3002\u56e0\u4e3a\u4eba\u6709\u53ef\u80fd\u65e0\u6cd5\u79fb\u52a8\uff0c\u800c\u4e14\u7a7a\u95f4\u7ad9\u7684\u5bb9\u91cf\u4e3a\u65e0\u9650\u5927\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7a7a\u95f4\u7ad9\uff0c\u8981\u5411\u4e0b\u4e00\u4e2a\u65f6\u523b\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cfINF\u3002\n## \u603b\u7ed3\u6765\u8bf4\uff1a\n-  \u6e90\u70b9\u5411\u6bcf\u4e2a\u65f6\u523b\u7684\u5730\u7403\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\n-  \u540c\u7406\uff0c\u5411\u6bcf\u4e2a\u65f6\u523b\u7684\u6708\u7403\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\n-  t\u65f6\u523b\u7684x\u7a7a\u95f4\u7ad9\u5411t+1\u65f6\u523b\u7684x\u7a7a\u95f4\u7ad9\u8fde\u4e00\u6761\u8fb9\uff08\u4eba\u4eec\u53ef\u4ee5\u7559\u5728\u8be5\u7a7a\u95f4\u7ad9\uff09\n-  \u82e5x\u7a7a\u95f4\u7ad9\u53ef\u4ee5\u5230\u8fbey\u7a7a\u95f4\u7ad9\uff0c\u5219\u4ecet\u65f6\u523b\u7684x\u7a7a\u95f4\u7ad9\u5728\u5411t+1\u65f6\u523b\u7684y\u7a7a\u95f4\u7ad9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u98de\u8239\u6d41\u91cf\u9650\u5236\u7684\u8fb9\n\n**\u6700\u540e\uff0c\u5f53\u5f53\u524d\u7684\u6700\u5927\u6d41\u5df2\u7ecf\u8d85\u8fc7\u603b\u4eba\u6570\u65f6\uff0c\u5219\u6b64\u65f6\u6240\u6709\u4eba\u90fd\u5df2\u7ecf\u88ab\u8fd0\u5230\u6708\u7403\uff0c\u6b64\u65f6\u8f93\u51fa\u65f6\u95f4\u5c31\u597d\u4e86**\n\n# \u6700\u540e\u7684\u6700\u540e\uff0c\u6ce8\u610f\uff1a\n-  \u9996\u5148\u9700\u8981\u5224\u65ad\u662f\u5426\u4f1a\u6709\u7b54\u6848\uff0c\u5373\u5730\u7403\u5230\u592a\u9633\u662f\u5426\u8fde\u901a\uff0c\u5728\u8fd9\u91cc\u7528\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86\n-  \u6ce8\u610fn\u8981+=2\uff0c\u5730\u7403\u548c\u6708\u7403\u4e5f\u7b97\u7a7a\u95f4\u7ad9\n\n**\u8fd9\u4e9b\u90fd\u7406\u89e3\u4ee5\u540e\u5c31\u662f\u4e00\u4e2a\u677f\u5b50\u9898\u4e86!**\n\n# \u4ee3\u7801\u9644\u4e0a\uff1a(dinic)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100005;\nconst int maxm=1005;\nconst int INF=0x3f3f3f3f;\nint n,m,k,Time,Tot,sum,tot=1,S,T=10000;\n//S,T\u5373\u8d77\u70b9\uff0c\u7ec8\u70b9\nint head[maxn],dep[maxn],cur[maxn],fa[maxn],num[maxn],cap[maxn],to[maxm][maxm];\n//\u6ca1\u5565\u597d\u8bf4\u7684\nvector<int> v[maxm];\nqueue<int> q;\nstruct node\n{\n\tint from,to,next;\n\tint val;\n}edge[maxn];\n\ninline int read()\n{\n\tint s=0,f=1;\n\tchar c=getchar();\n\twhile (c<'0'||c>'9')\n\t{\n\t\tif (c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile (c>='0'&&c<='9')\n\t{\n\t\ts=s*10+c-48;\n\t\tc=getchar();\n\t}\n\treturn s*f;\n}\n\ninline void add(int x,int y,int z)\n{\n\tedge[++tot].next=head[x];\n\tedge[tot].from=x;\n\tedge[tot].to=y;\n\tedge[tot].val=z;\n\thead[x]=tot;\n\tedge[++tot].next=head[y];\n\tedge[tot].from=y;\n\tedge[tot].to=x;\n\tedge[tot].val=0;\n\thead[y]=tot;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f,\u53cc\u5411\u8fb9\ninline int find(int x)\n{\n\tif (fa[x]==x)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\treturn fa[x]=find(fa[x]);\n\t}\n}\n//\u5e76\u67e5\u96c6\ninline void unionn(int x,int y)\n{\n\tint sx=find(x),sy=find(y);\n\tif (sx!=sy)\n\t{\n\t\tfa[sx]=sy;\n\t}\n}\n//\u5224\u65ad\u8fde\u901a\ninline bool bfs()\n{\n\tmemset(dep,-1,sizeof(dep));\n\tmemcpy(cur,head,sizeof(head));\n\tq.push(S);\n\tdep[S]=0;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor (int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (dep[v]==-1&&edge[i].val)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif (dep[T]==-1)\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\ninline int dfs(int u,int low)\n{\n\tif (u==T)\n\t{\n\t\treturn low;\n\t}\n\tint ret=low;\n\tfor (int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint to=edge[i].to,w=edge[i].val;\n\t\tif (dep[to]==dep[u]+1&&w>0)\n\t\t{\n\t\t\tint flow=dfs(to,min(ret,w));\n\t\t\tif (flow>0)\n\t\t\t{\n\t\t\t\tedge[i].val-=flow;\n\t\t\t\tedge[i^1].val+=flow;\n\t\t\t}\n\t\t\tret-=flow;\n\t\t\tif (!ret)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn low-ret;\n}\ninline int dinic()\n{\n\tint ret=0;\n\twhile (bfs())\n\t{\n\t\tret+=dfs(S,INF);\n\t}\n\treturn ret;\n}\n\n//dinic\u677f\u5b50\u4e0d\u591a\u8bf4\nint mian()\t\t\t\t\t\t\t//\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u54e6\n{\n\tn=read(),m=read(),k=read();\n\tfor (int i=1;i<=n+2;i++)\n\t{\n\t\tfa[i]=i;\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tcap[i]=read(),num[i]=read();\n\t\tfor (int j=1;j<=num[i];j++)\n\t\t{\n\t\t\tint p=read();\n\t\t\tif (p==-1)\n\t\t\t{\n\t\t\t\tp=n+2;\n\t\t\t}\n\t\t\telse if (p==0)\n\t\t\t{\n\t\t\t\tp=n+1;\n\t\t\t\t//\u65b9\u4fbf\u4e00\u70b9\n\t\t\t}\n\t\t\tv[i].push_back(p);\n\t\t\tif (j!=1)\n\t\t\t{\n\t\t\t\tunionn(p,v[i][v[i].size()-2]);\n\t\t\t}\n\t\t}\n\t}\n\t//v\u5b58\u7684\u662f\u6bcf\u4e2a\u98de\u8239\u505c\u7559\u7684\u5730\u65b9\n\tif (find(n+1)!=find(n+2))\n\t{\n\t\tcout<<\"0\"<<endl;\n\t\treturn 0;\n\t}\n\tn+=2;\n\tadd(S,n-1,INF);\n\tadd(n,T,INF);\n\twhile (1)\n\t{\n\t\tTime++;\n\t\t//\u679a\u4e3e\u6bcf\u4e2a\u65f6\u95f4\u6bb5\n\t\tfor (int i=1;i<=m;i++)\n\t\t{\n\t\t\tint now=v[i][Time%num[i]],pre=v[i][(Time-1+num[i])%num[i]];\n\t\t\tadd(n*(Time-1)+pre,n*Time+now,cap[i]);\n\t\t}\n\t\tadd(S,n*Time+n-1,INF);\n\t\tadd(Time*n+n,T,INF);\n\t\tfor (int j=1;j<=n;j++)\n\t\t{\n\t\t\tadd((Time-1)*n+j,Time*n+j,INF);\n\t\t}\n\t\t//\u5efa\u56fe\n\t\tsum+=dinic();\n\t\tif (sum>=k)\n\t\t{\n\t\t\tcout<<Time<<endl;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n**\u4e0d\u8981\u590d\u5236\uff01\uff01\uff01\u540e\u679c\u81ea\u8d1fqaq**\n\n## \u6c42\u8d5eovo\u6700\u540e\u770b\u5b8c\u89c9\u5f97\u6709\u5e2e\u52a9\u7684\u70b9\u4e2a\u8d5e\u518d\u8d70\u54e6qaq\n",
        "postTime": 1582370183,
        "uid": 69036,
        "name": "\u8c26\u8c26\u541b\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed / \u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "\u5206\u5c42\u56fe\u6700\u5927\u6d41\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u90fd\u5efa\u4e00\u5c42\u5305\u542b\u5730\u7403\u548c\u7a7a\u95f4\u7ad9\u56fe\u3002\n\n\u5efa\u7acb\u6e90\u70b9\uff0c\u4ece\u6e90\u70b9\u5411\u6bcf\u5c42\u7684\u5730\u7403\u8fde\u8fb9\u6743\u662f $inf$ \u7684\u8fb9\uff0c\u8868\u793a\u539f\u6765\u5728\u5730\u7403\u4e0a\u7684\u4eba\u3002\n\n\u6c47\u70b9\u5c31\u662f\u6708\u7403\u3002\n\n\u8003\u8651\u8fb9\u7684\u8f6c\u79fb\uff0c\u56e0\u4e3a\u6bcf\u8258\u98de\u8239\u8981 $1$ \u7684\u65f6\u95f4\u4ece\u4e00\u7ad9\u5230\u4e0b\u4e00\u7ad9\uff0c\u6240\u4ee5\u4ece\u6bcf\u4e24\u7ad9\u4e4b\u95f4\u90fd\u4ece\u4e0a\u4e00\u5c42\u5411\u4e0b\u4e00\u5c42\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u8be5\u98de\u8239\u5bb9\u91cf\u7684\u8fb9\u3002\n\n\u56e0\u4e3a\u4eba\u4e0b\u98de\u8239\u540e\u53ef\u4ee5\u7b49\u5f85\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7a7a\u95f4\u7ad9\u4ece\u4e0a\u4e00\u5c42\u5230\u4e0b\u4e00\u5c42\u8fde\u8fb9\u6743\u4e3a $inf$ \u7684\u8fb9\u3002\n\n\u8ba1\u7b97\u7b54\u6848\u53ef\u4ee5\u4e8c\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u3002\u4ece\u6e90\u70b9\u5411\u6c47\u70b9\u7684\u6700\u5927\u6d41\u8d85\u8fc7 $k$ \u65f6\u8fd9\u4e2a\u7b54\u6848\u5c31\u662f\u53ef\u884c\u7684\uff0c\n\n\u56e0\u4e3a dinic \u53ef\u4ee5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6240\u4ee5\u53ef\u80fd\u679a\u4e3e\u8981\u6bd4\u4e8c\u5206\u91cd\u65b0\u8dd1\u5feb\u3002\n\n\u6700\u540e\u662f\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u628a\u6bcf\u8258\u98de\u8239\u80fd\u5230\u8fbe\u7684\u7ad9\u70b9\u5408\u5e76\u5230\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u770b\u5730\u7403\u548c\u6708\u7403\u662f\u5426\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u5373\u53ef\u3002\n\n$\\sf{Code}$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 2001001\n#define MAX 2001\n#define re register\n#define inf 1e15\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ninline void read(re ll &ret)\n{\n\tret=0;re char c=getchar();re bool pd=false;\n\twhile(!isdigit(c)){pd|=c=='-';c=getchar();}\n\twhile(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();}\n\tret=pd?-ret:ret;\n\treturn;\n}\nll n,m,k,h[N],r[N],tmp,head[N],cnt=-1,fa[N],s,t,ans,all,maxn,now[N],dep[N];\nvector<ll>v[N];\nstruct edge\n{\n\tll from,to,dis,nxt;\n}e[N];\ninline void add(re ll u,re ll v,re ll d)\n{\n\te[++cnt].from=u;\n\te[cnt].to=v;\n\te[cnt].dis=d;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n\treturn;\n}\ninline ll find(re ll deep)\n{\n\treturn fa[deep]==deep?deep:fa[deep]=find(fa[deep]);\n}\ninline bool bfs()\n{\n\tmemset(dep,0,(maxn+1)*sizeof(ll));\n\tdep[t]=0;\n\tqueue<ll>q;\n\tq.push(s);\n\tdep[s]=2;\n\twhile(!q.empty())\n\t{\n\t\tre ll ver=q.front();\n\t\tq.pop();\n\t\tnow[ver]=head[ver];\n\t\tfor(re int i=head[ver];~i;i=e[i].nxt)\n\t\t{\n\t\t\tif(!dep[e[i].to]&&e[i].dis)\n\t\t\t{\n\t\t\t\tdep[e[i].to]=dep[ver]+1;\n\t\t\t\tq.push(e[i].to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\ninline ll dfs(re ll ver,re ll lim)\n{\n\tif(ver==t)\n\t\treturn lim;\n\tre ll out=0;\n\tfor(re ll (&i)=now[ver];(~i)&&lim;i=e[i].nxt)\n\t{\n\t\tif(e[i].dis&&dep[e[i].to]==dep[ver]+1)\n\t\t{\n\t\t\tre ll tmp=dfs(e[i].to,min(lim,e[i].dis));\n\t\t\te[i].dis-=tmp;\n\t\t\te[i^1].dis+=tmp;\n\t\t\tlim-=tmp;\n\t\t\tout+=tmp;\n\t\t}\n\t\tif(!lim)\n\t\t\tbreak;\n\t}\n\tif(!out)\n\t\tdep[ver]=0;\n\treturn out;\n}\ninline ll dinic(re ll s,re ll t)\n{\n\tre ll ret=0;\n\twhile(bfs())\n\t\tret+=dfs(s,inf);\n\treturn ret;\n}\nsigned main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n);\n\tread(m);\n\tread(k);\n\ts=0;\n\tt=N-1;\n\tfor(re int i=s;i<=t;i++)\n\t\tfa[i]=i;\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tread(h[i]);\n\t\tread(r[i]);\n\t\tfor(re int j=1;j<=r[i];j++)\n\t\t{\n\t\t\tread(tmp);\n\t\t\tif(tmp==-1)\n\t\t\t\ttmp=n+2;\n\t\t\telse if(!tmp)\n\t\t\t\ttmp=n+1;\n\t\t\tv[i].push_back(tmp);\n\t\t\tif(j>1)\n\t\t\t{\n\t\t\t\tre ll r1=find(v[i][j-2]),r2=find(v[i][j-1]);\n\t\t\t\tfa[r1]=r2;\n\t\t\t}\n\t\t}\n\t}\n\tif(find(n+1)!=find(n+2))\n\t{\n\t\tputs(\"0\");\n\t\texit(0);\n\t}\n\tfor(ans=1;;ans++) \n\t{\n\t\tadd(s,(ans-1)*(n+1)+n+1,inf);\n\t\tadd((ans-1)*(n+1)+n+1,s,0);\n\t\tmaxn=ans*(n+1)+n+1;\n\t\tfor(re int i=1;i<=m;i++)\n\t\t{\n\t\t\tre ll x=(ans-1)%r[i],y=ans%r[i];\n\t\t\tre ll tmp1=v[i][x],tmp2=v[i][y];\n\t\t\tif(tmp1==n+2)\n\t\t\t\ttmp1=t;\n\t\t\telse\n\t\t\t\ttmp1=(ans-1)*(n+1)+tmp1;\n\t\t\tif(tmp2==n+2)\n\t\t\t\ttmp2=t;\n\t\t\telse\n\t\t\t\ttmp2=ans*(n+1)+tmp2;\n\t\t\tadd(tmp1,tmp2,h[i]);\n\t\t\tadd(tmp2,tmp1,0);\n\t\t}\n\t\tall+=dinic(s,t);\n\t\tif(all>=k)\n\t\t{\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\texit(0);\n\t\t}\n\t\tfor(re int i=1;i<=n+1;i++)\n\t\t{\n\t\t\tadd((ans-1)*(n+1)+i,ans*(n+1)+i,inf);\n\t\t\tadd(ans*(n+1)+i,(ans-1)*(n+1)+i,0);\n\t\t}\n\t}\n\texit(0);\n}\n```\n",
        "postTime": 1614327884,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed / \u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "# [P2754 \u661f\u9645\u8f6c\u79fb\u95ee\u9898](https://www.luogu.com.cn/problem/P2754)\n\n## \u601d\u8def\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u5730\u7403\u80fd\u5426\u5230\u8fbe\u6708\u7403\u7684\u95ee\u9898\uff0c\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u6bcf\u8258\u98de\u8239\u80fd\u591f\u5230\u8fbe\u7684\u7ad9\u70b9\uff0c\u653e\u8fdb\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u82e5\u4e24\u8258\u98de\u8239\u7684\u96c6\u5408\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u5c31\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u6700\u540e\u53ea\u8981\u5730\u7403\u548c\u6708\u4eae\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u5373\u53ef\u5230\u8fbe\u3002\n\n\u7136\u540e\u5c31\u662f\u591a\u5c11\u5929\u9001\u5b8c\u7684\u95ee\u9898\u3002\n\n\u60f3\u8981\u6700\u5c11\u5929\u6570\u9001\u5b8c\uff0c\u90a3\u4e48\u6bcf\u6b21\u5c31\u5c3d\u53ef\u80fd\u5730\u591a\u9001\uff0c\u8003\u8651\u6700\u5927\u6d41\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5efa\u56fe\uff1f\n\n\u5148\u653e $n+4$ \u4e2a\u70b9\uff08 $n$ \u4e2a\u7a7a\u95f4\u7ad9 + \u5730\u7403\u548c\u6708\u7403 + \u6e90\u70b9 +\u6c47\u70b9 \uff09\uff0c\u60f3\u5f53\u7136\u5730\uff0c\u6e90\u70b9-->\u5730\u7403\uff0c\u5bb9\u91cf\u4e3a $k$ \uff08\u521d\u59cb\u65f6\u5730\u7403\u4e0a\u7684\u4eba\u6570\uff09\uff0c\u6708\u7403\u6307\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf $inf$ \u3002\uff08\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5730\u7403\u4e3a $0$ \uff0c\u6708\u7403\u4e3a $n+1$ \uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hpcqii3z.png)\n\n\u90a3\u4e48\u600e\u4e48\u8868\u793a\u592a\u7a7a\u8239\u5728\u5404\u4e2a\u592a\u7a7a\u7ad9\u4e4b\u95f4\u7684\u79fb\u52a8\u5462\uff1f\n\n\u5206\u5c42\u3002\n\n\u6309\u65f6\u95f4\u5206\u5c42\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5b58\u5728\u7b2c $i$ \u8258\u98de\u8239\u7684\u822a\u7ebf\u4e3a $(3,1,2)$ \uff0c\u90a3\u4e48\u5728\u7b2c\u4e00\u4e2a\u65f6\u523b\uff0c\u5b83\u5728\u7b2c $3$ \u4e2a\u7a7a\u95f4\u7ad9\uff1b\u5728\u7b2c\u4e8c\u4e2a\u65f6\u523b\uff0c\u5b83\u5728\u7b2c $1$ \u4e2a\u7a7a\u95f4\u7ad9\uff1b\u4ee5\u6b64\u7c7b\u63a8\u3002\u4e8e\u662f\u6211\u4eec\u8fde\u63a5\u7b2c\u4e00\u65f6\u523b\u7684 $3$ \u4e0e\u7b2c\u4e8c\u65f6\u523b\u7684 $1$ \uff0c\u5373 $(1,3)$ --> $(2,1)$ \uff0c\u5bb9\u91cf\u4e3a $h_i$ \uff08\u7b2c $i$ \u8258\u98de\u8239\u7684\u5bb9\u91cf\uff09\u3002\u5f53 $(1,3)$ \u6709\u6d41\u5411 $(2,1)$ \u7684\u6d41\u65f6\uff0c\u5c31\u8868\u793a\u7b2c\u4e00\u65f6\u523b\u5230\u7b2c\u4e8c\u65f6\u523b\uff0c\u6709\u4eba\u4e58\u5750\u7b2c $i$ \u8258\u98de\u8239\u4ece\u7a7a\u95f4\u7ad9 $3$ \u5230\u4e86\u7a7a\u95f4\u7ad9 $1$ \u3002\n\n\u8fd9\u6837\u4fbf\u5f97\u5230\u4e86\u4e00\u4e2a\u6a2a\u5411\u4e3a\u65f6\u95f4\uff0c\u7eb5\u5411\u4e3a\u7ad9\u70b9\u7684\u5206\u5c42\u56fe\u3002\n\n\u53c8\u56e0\u4e3a\u5730\u7403\u3001\u6708\u7403\u3001\u7a7a\u95f4\u7ad9\u7684\u5bb9\u91cf\u65e0\u9650\uff0c\u6240\u4ee5\u5404\u4e2a\u7ad9\u70b9\u5728\u6bcf\u4e2a\u65f6\u523b\u8054\u901a\uff0c\u5373 $(1,x)$ --> $(2,x)$ --> $(3,x)$ --> $\\dots$ , $x$ \u4e3a $n+2$ \u4e2a\u7ad9\u70b9\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u76f8\u5f53\u4e8e\u4eba\u505c\u5728\u8be5\u7ad9\u70b9\u4e0d\u52a8\u3002\u53cc\u56e0\u4e3a\uff0c\u65e0\u8bba\u54ea\u4e2a\u65f6\u523b\u5230\u8fbe\u6708\u7403\u90fd\u7b97\u9001\u8fbe\uff0c\u6240\u4ee5\u6bcf\u4e2a\u65f6\u523b\u7684\u6708\u7403\u90fd\u5411 $t$ \u8fde\u8fb9\uff0c\u5373 $(y,n+1)$ --> $t$ \uff0c$y$ \u4e3a\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\u3002\n\n\u6700\u540e\u4ece $1$ \u5f00\u59cb\u679a\u4e3e\u65f6\u95f4\uff0c\u76f4\u5230\u6e90\u70b9\u6d41\u51fa\u7684 $k$ \u4efd\u6d41\u91cf\u5168\u90e8\u6d41\u5165\u4e86\u6c47\u70b9\u518d\u8df3\u51fa\u3002\n\n\u6837\u4f8b\u5efa\u56fe\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tr0uzyo3.png)\n\n\u76f4\u5230\u7b2c\u516d\u4e2a\u65f6\u523b\uff0c\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u624d\u4e3a $1$ \uff0c\u5171\u5386\u65f6 $5$ \u4e2a\u65f6\u523b\uff0c\u7b54\u6848\u4e3a $5$ \u3002\n\n## Code\n\n```\n#include<bits/stdc++.h>\n//#define int long long //\u7956\u5b97\n#define mp(a,b) make_pair(a,b)\nusing namespace std;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\nconst int N=3000,M=5e5+5;\nint first[N],nex[M],to[M],w[M],num=1; \nint n,m,k,s,t,ans,Maxflow;\nint h[N],r[N],p[25][25];\ninline void add(int u,int v,int val)\n{\n\tnex[++num]=first[u];\n\tfirst[u]=num;\n\tto[num]=v;\n\tw[num]=val;\n}\ninline void Add(int u,int v,int val)\n{\n\tadd(u,v,val);\n\tadd(v,u,0);\n}\nnamespace ISAP\n{\n\tint dep[N],gap[N],cur[N],NUM;\n\tvoid bfs()\n\t{\n\t\tmemset(dep,-1,sizeof(dep));\n\t\tqueue<int> q;\n\t\tq.push(t);\n\t\tdep[t]=0;gap[0]=1;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front();q.pop();\n\t\t\tfor(int i=first[u];i;i=nex[i])\n\t\t\t{\n\t\t\t\tint v=to[i];\n\t\t\t\tif(dep[v]!=-1) continue;\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tgap[dep[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tinline int dfs(int u,int in)\n\t{\n\t\tif(u==t) return in;\n\t\tint out=0;\n\t\tfor(int i=cur[u];i;i=nex[i])\n\t\t{\n\t\t\tcur[u]=i;\n\t\t\tint v=to[i];\n\t\t\tif(!w[i]||dep[v]!=dep[u]-1) continue;\n\t\t\tint res=dfs(v,min(w[i],in-out));\n\t\t\tw[i]-=res;\n\t\t\tw[i^1]+=res;\n\t\t\tout+=res;\n\t\t\tif(out==in) return out;\n\t\t}\n\t\tgap[dep[u]]--;\n\t\tif(!gap[dep[u]]) dep[s]=NUM+1;\n\t\tdep[u]++;\n\t\tgap[dep[u]]++;\n\t\treturn out;\n\t}\n\tvoid work(int t)\n\t{\n\t\tNUM=(n+1)*(t+1)+2;//\u5f53\u524d\u7f51\u7edc\u7684\u70b9\u7684\u4e2a\u6570\uff08\u4f9bISAP\u7528\uff0c\u5982\u679c\u4f60\u662fDinic\u5c31\u65e0\u89c6\u5b83\uff09\n\t\tbfs();\n\t\twhile(dep[s]<NUM)\n\t\t{\n\t\t\tmemcpy(cur,first,sizeof(first));\n\t\t\tMaxflow+=dfs(s,1e9);\n\t\t}\n\t}\t\n}\nnamespace UFS//\u5e76\u67e5\u96c6,\u5224\u65ad\u662f\u5426\u8054\u901a \n{\n\tint fa[N];\n\tvoid init(){for(int i=0;i<N;++i) fa[i]=i;}\n\tinline int getfa(int u)\n\t{\n\t\tif(fa[u]==u) return u;\n\t\treturn fa[u]=getfa(fa[u]);\n\t}\n\tinline void merge(int u,int v)\n\t{\n\t\tint a=getfa(u),b=getfa(v);\n\t\tif(a!=b) fa[a]=b;\n\t}\n}\ninline int turn(int t,int p){return (t-1)*(n+2)+p;}//\u5c06t\u65f6p\u5730\u7684\u4f4d\u7f6e\u8f6c\u5316\u4e3a\u70b9\u7684\u7f16\u53f7 \nmain()\n{//0->\u5730\u7403\n //n+1->\u6708\u7403 \n\tusing namespace UFS;\n\tinit();\n\tn=read(),m=read(),k=read();s=N-1,t=N-2;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\th[i]=read();r[i]=read();\n\t\tfor(int j=1;j<=r[i];++j)\n\t\t{\n\t\t\tp[i][j]=read();//\u7b2ci\u8258\u8239\u7b2cj\u4e2a\u7ad9\u70b9\u7684\u4f4d\u7f6e\u4e3ap[i][j]\n\t\t\tif(p[i][j]==-1) p[i][j]=n+1;\n\t\t\tif(j!=1)merge(p[i][j],p[i][j-1]);\n\t\t\t//\u4f4d\u7f6ep[i][j]\u4e0e\u4f4d\u7f6ep[i][j+1]\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7b2ci\u8258\u8239\u5230\u8fbe \n\t\t}\n\t}\n\tif(getfa(0)!=getfa(n+1))\n\t{\n\t\tprintf(\"0\");\n\t\treturn 0;\n\t}\n\tint ans=2;//\u679a\u4e3e\u65f6\u95f4,t==1\u65f6,\u4eba\u90fd\u5728\u5730\u7403\u4e0a\n\tAdd(s,turn(1,0),k);//\u4ece\u6e90\u70b9\u5230t==1\u65f6\u7684\u5730\u7403 \n\tAdd(turn(1,n+1),t,1e9);\n\tMaxflow=0;\n\twhile(1)\n\t{\n\t\tAdd(turn(ans,n+1),t,1e8);//\u4ece\u5f53\u524d\u65f6\u523b\u7684\u6708\u4eae\u5230\u6c47\u70b9\n\t\tfor(int i=0;i<=n+1;++i) Add(turn(ans-1,i),turn(ans,i),1e9);//\u4e0e\u4e0a\u4e00\u65f6\u523b\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tint a=turn(ans,p[i][(ans-1)%r[i]+1]);//\u7b2ci\u8258\u8239\u7b2cans\u65f6\u523b\u6240\u5728\u7684\u70b9 \n\t\t\tint b=turn(ans-1,p[i][(ans-2)%r[i]+1]);//\u7b2ci\u8258\u8239\u7b2cans-1\u65f6\u523b\u6240\u5728\u7684\u70b9 \n\t\t\t//\u5206\u6790\u4e00\u4e0b\u5c31\u7406\u89e3\u4e86\n\t\t\tAdd(b,a,h[i]);\n\t\t}\n\t\tISAP::work(ans);//\u4e0d\u7528\u91cd\u7f6e\uff0c\u6bcf\u6b21\u52a0\u5b8c\u8fb9\u540e\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8dd1\uff0c\u5c06\u6bcf\u6b21\u6d41\u91cf\u7d2f\u79ef\u5373\u4e3a\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\n\t\tif(Maxflow>=k)\n\t\t{\n\t\t\tprintf(\"%d\",ans-1);\n\t\t\treturn 0;\n\t\t}\n\t\tans++;\n\t}\n\treturn 0;\n}\n/*   \u5351\u52a3\u7684\u624b\u6253\u5206\u5c42\u56fe\n     time->\t\t\tans\nplace\t       da1   da2   ...  ans\n  |  earth     0_1   0_2   ... 0_ans\n  V station_1  1_1   1_1   ... 1_ans\n       .        .     .    ...   .\n       .\t.     .    ...   .\nn+1   moon    n+1_1 n+1_2 ... n+1_ans\n*/\n```\n",
        "postTime": 1613825853,
        "uid": 205541,
        "name": "Aftglw",
        "ccfLevel": 0,
        "title": "P2754 \u661f\u9645\u8f6c\u79fb\u95ee\u9898"
    },
    {
        "content": "### \u661f\u9645\u8f6c\u79fb\u95ee\u9898\n\n\u9898\u76ee\u94fe\u63a5 [$link$](https://www.luogu.com.cn/problem/P2754)\n\n\u5982\u679c\u5c06\u592a\u7a7a\u8239\u89c6\u4f5c\u8fb9\u7684\u8bdd\uff0c\u6709\u89e3\u5c31\u662f $0$ \u548c $n+1$ \u53f7\u70b9\u8054\u901a\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8bd5\u7740\u7528\u5e76\u67e5\u96c6\u6216\u8005\u641c\u7d22\u5bfb\u627e\u662f\u5426\u6709\u89e3\u3002\n\n\u65e0\u89e3\u4e0d\u8bf4\u4e86\uff0c\u6765\u770b\u770b\u6709\u89e3\u65f6\u600e\u4e48\u627e\u6700\u5feb\u89e3\u3002\n\n\u76f4\u63a5\u89e3\u662f\u4e0d\u5927\u53ef\u884c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u6765\u601d\u8003\uff1a**\u5982\u679c\u6211\u4eec\u7528 $q$ \u5929\u80fd\u5426\u5c06\u6240\u6709\u4eba\u8fd0\u5230\u6708\u7403**\u3002\n\n\u5728\u7f51\u7edc\u6d41\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528**\u5206\u5c42\u56fe**\u7684\u6982\u5ff5\u5c06\u6d41\u91cf\u4e0e\u8ddd\u79bb\u7ed3\u5408\u5224\u65ad\u3002\n\n\u5177\u4f53\u5230\u9898\u6765\u8bb2\uff0c\u6211\u4eec**\u53ef\u4ee5\u5c06\u4e00\u4e2a\u56fe\u5206\u4e3a $q+1$ \u5c42(\u6bcf\u5929\u5206\u4e00\u5c42)\u3002 \u4f7f\u7528 $<x,n>$ \u6765\u8bb0\u7b2c $n$ \u5c42\u7684\u7b2c $x$ \u53f7\u70b9**\u3002\n\n\u53ef\u4ee5\u521d\u6b65\u5f97\u5230\u5982\u4e0b\u7684\u70b9\uff1a~~\u8bf7\u65e0\u89c6\u6389\u5de6\u4e0b\u7684\u8f93\u5165\u6cd5QwQ~~\n\n![](https://img.imgdb.cn/item/601b6fb13ffa7d37b341060d.png)\n\n\u7136\u540e\u8003\u8651\u600e\u6837\u8f6c\u79fb\u3002\n\n\u5728\u7b2c $0$ \u5929\u7684\u65f6\u5019\u6240\u6709\u4eba\u90fd\u5728\u8d77\u70b9\uff0c\u6240\u4ee5 $S_0$ \u5411 $<0,0>$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u603b\u4eba\u6570 $k$ \u7684\u8fb9\u3002\n\n\u800c\u6c47\u70b9\u65e0\u8bba\u5728\u54ea\u4e00\u5929\uff0c\u53ea\u8981\u4f60\u5230\u4e86\u6708\u7403\uff0c\u90a3\u5c31\u7b97\u5230\u7ec8\u70b9\u4e86\uff0c\u6240\u4ee5\u6240\u6709\u7684 $<n+1,i>$ \u90fd\u8981\u8fde\u5411 $T_0$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u592a\u7a7a\u8239\uff0c\u5f53\u5929\u6570\u56fa\u5b9a\u65f6\uff0c\u5b83\u8fde\u63a5\u7684\u4e24\u4e2a\u7a7a\u95f4\u7ad9\u4e5f\u662f\u56fa\u5b9a\u7684\u3002\u6211\u4eec\u5c31\u4f9d\u636e\u6b64\u6765\u5efa\u8fb9\u3002\n\n\u6bd4\u5982\u6709\u4e00\u4e2a\u592a\u7a7a\u8239\uff0c\u5b83\u5728\u7b2c\u4e00\u5929\u4ece $0$\u53f7 \u5230 $1$ \u53f7\u70b9\u8fd0\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728 $<0,0>$ \u8fde\u4e00\u6761\u8fb9\u5230 $<1,1>$ \uff0c\u5bb9\u91cf\u4e3a\u592a\u7a7a\u8239\u5bb9 $r_i$\u3002\n\n\u4f46\u662f\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u4eba\u8fd8\u80fd\u5728\u7a7a\u95f4\u7ad9\u505c\u7559\uff0c\u4e14\u7a7a\u95f4\u7ad9\u53ef\u4ee5\u5bb9\u7eb3\u65e0\u9650\u591a\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u6bcf\u4e00\u4e2a $x$ \u548c $i$ \u4ece $<x,i>$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $+\\infty$ \u7684\u8fb9\u5230 $<x,i+1>$\u3002\n\n\u4e00\u79cd\u53ef\u80fd\u7684\u5efa\u8fb9\u60c5\u51b5:\n\n![](https://img.imgdb.cn/item/601b74493ffa7d37b343db83.png)\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u539f\u95ee\u9898\u7684\u6bcf\u4e2a\u65b9\u6848\u90fd\u80fd\u5bf9\u5e94\u4e00\u4e2a\u53ef\u884c\u6d41\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5efa\u7acb\u51fa\u6765\u7684\u56fe\u4e2d\u8dd1\u6700\u5927\u6d41\uff0c\u5224\u5b9a\u662f\u5426\u7b49\u4e8e $k$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u4e2a $q$ \u53ef\u4ee5\u4e8c\u5206\uff0c\u4f46\u662f\u8fd9\u4e2a\u56fe\u6709\u4e00\u4e9b\u7279\u6b8a\u6027\u8d28\u3002\n\n\u901a\u8fc7\u4e0a\u9762\u6784\u5efa\u56fe\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c**\u8fd9\u4e2a\u56fe\u7684\u70b9\u6570\u662f\u548c $q$ \u6210\u6b63\u6bd4\u7684**\u3002\n\n\u4e8e\u662f\u4ece\u7f51\u7edc\u6d41\u7684\u539f\u7406\u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u70b9\u589e\u591a\u65f6\uff0c\u5728\u539f\u7f51\u7edc\u4e0a\u76f4\u63a5\u589e\u52a0\uff0c\u7ee7\u7eed\u589e\u5e7f\u3002\n\n\u4e5f\u5c31\u662f\u8fd9\u4e2a\u9898\u76f4\u63a5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $q$ \u53ef\u80fd\u6bd4\u76f4\u63a5\u4e8c\u5206\u6765\u5f97\u66f4\u4f18\uff0c\u53cd\u6b63 $q$ \u4e5f\u4e0d\u4f1a\u5927\u5230\u54ea\u91cc\u53bb\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=2e5+10,M=4e5+10,INF=1e8;\n\nint n,m,k;\nint S,T;\nint head[N],ver[M],nxt[M],cc[M],tot=0;\nvoid add(int x,int y,int c)\n{\n\tver[tot]=y; cc[tot]=c; nxt[tot]=head[x]; head[x]=tot++;\n\tver[tot]=x; cc[tot]=0; nxt[tot]=head[y]; head[y]=tot++;\n}\nint q[N],d[N],cur[N];\nstruct node\n{\n\tint h,r,pos[22];\n} sp[N];\n\nint fa[N];\nint find(int x)\n{\n\tint x_root=x;\n\twhile(fa[x_root]!=x_root)\n\t\tx_root=fa[x_root];\n\twhile(x!=x_root)\n\t{\n\t\tint tmp=fa[x];\n\t\tfa[x]=x_root; x=tmp;\n\t}\n\treturn x_root;\n}\n\nint id(int xx,int dd)\n{\n\treturn dd*(n+2)+xx;\n}\n\nbool bfs()\n{\n\tint hh=0,tt=0;\n\tmemset(d,-1,sizeof d);\n\tq[0]=S,d[S]=0,cur[S]=head[S];\n\twhile(hh<=tt)\n\t{\n\t\tint x=q[hh++];\n\t\tfor(int i=head[x];~i;i=nxt[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y]==-1 && cc[i])\n\t\t\t{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tcur[y]=head[y];\n\t\t\t\tif(y==T) return 1;\n\t\t\t\tq[++tt]=y;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint find(int u,int lim)\n{\n\tif(u==T) return lim;\n\tint flow=0;\n\tfor(int i=cur[u];~i && flow<lim;i=nxt[i])\n\t{\n\t\tint y=ver[i];\n\t\tcur[u]=i;\n\t\tif(d[y]==d[u]+1 && cc[i])\n\t\t{\n\t\t\tint tmp=find(y,min(cc[i],lim-flow));\n\t\t\tif(!tmp) d[y]=-1;\n\t\t\tcc[i]-=tmp; cc[i^1]+=tmp; flow+=tmp;\n\t\t}\n\t}\n\treturn flow;\n}\n\nint dinic()\n{\n\tint res=0,flow;\n\twhile(bfs())\n\t{\n\t\twhile(flow=find(S,INF)) res+=flow;\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tS=N-8,T=N-9;\n\tmemset(head,-1,sizeof head);\n\tfor(int i=0;i<N;++i)  fa[i]=i;\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint rr,hh;\n\t\tscanf(\"%d%d\",&rr,&hh);\n\t\tsp[i].r=rr,sp[i].h=hh;\n\t\tfor(int j=0;j<hh;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tif(x==-1) x=n+1;\n\t\t\tsp[i].pos[j]=x;\n\t\t\tif(j)\n\t\t\t{\n\t\t\t\tint lst=sp[i].pos[j-1];\n\t\t\t\tfa[find(lst)]=find(x);//\u5e76\u67e5\u96c6\u5408\u5e76\n\t\t\t}\n\t\t}\n\t}\n\tif(find(0)!=find(n+1))\n\t{\n\t\tprintf(\"0\");\n\t\treturn 0;\n\t}\n\tadd(S,id(0,0),k);\n\tadd(id(n+1,0),T,INF);\n\tint q=1,res=0;//\u4ece\u7b2c\u4e00\u5929\u5f00\u59cb\n\twhile(1)\n\t{\n\t\tadd(id(n+1,q),T,INF);//\u5f53\u524d\u5929\u6570\u7684\u7ec8\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\n\t\tfor(int i=0;i<=n+1;i++)\n\t\t\tadd(id(i,q-1),id(i,q),INF);//\u7a7a\u95f4\u7ad9\u4e4b\u95f4\u7684\u8fb9\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\tint r=sp[i].h;\n\t\t\tint a=sp[i].pos[(q-1)%r] ,b=sp[i].pos[q%r];\n\t\t\tadd(id(a,q-1),id(b,q),sp[i].r);\n\n\t\t}\n\t\tres+=dinic();\n\t\tif(res>=k) break;\n\t\t++q;\n\t}\n\tprintf(\"%d\",q);\n}\n\n```",
        "postTime": 1612420707,
        "uid": 278259,
        "name": "RemiliaScarlet\u25ce",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed / \u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "### \u8fd9\u662fGD\u521d\u4e8c\u849f\u84bb $lolte$ \u7684\u9898\u89e3\n\n\u7206\u5237\u7f51\u7edc\u6d41ing\n\n\u505a\u7684\u65f6\u5019\u60f3\u4e860.5h\u90fd\u6ca1\u60f3\u51fa\u6765\u600e\u4e48\u5efa\u6a21\uff0c\u770b\u4e86\u4e00\u4e0b @litble \u7684\u9898\u89e3\u5c31\u8305\u585e\u987f\u5f00\u4e86\uff0c\u4e8e\u662f\u4e5f\u60f3\u53bb\u8bf4\u4e00\u4e0b\u6211\u7684\u7406\u89e3\u3002\n\n---\n\n\u5728\u8dd1\u7f51\u7edc\u6d41\u4e4b\u524d\uff0c\u5148\u628a\u6709\u65e0\u53ef\u884c\u65b9\u6848\u89e3\u51b3\u3002\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\n\n\u5148\u628a\u6bcf\u4e2a\u592a\u7a7a\u7ad9\u548c\u5730\u7403\u548c\u6708\u4eae\u5206\u522b\u770b\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\uff0c\u7136\u540e\u6839\u636e\u592a\u7a7a\u8239\u6240\u505c\u9760\u7684\u70b9\uff0c\u5c06\u592a\u7a7a\u8239\u6240\u505c\u9760\u7684\u70b9**\u5408\u5e76**\u3002\u6700\u540e\u6bd4\u8f83\u5730\u7403\u548c\u6708\u4eae\u7684**\u7956\u5148\u8282\u70b9**\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002\n\n---\n\n\u8003\u8651\u6309\u65f6\u523b\u9012\u589e\u6765\u679a\u4e3e\u7b54\u6848\uff0c$ans$ \u4ece $1$ \u5f00\u59cb\u4e0d\u65ad\u5f80\u4e0b\u679a\u4e3e\u3002\n\n\u8003\u8651\u7f51\u7edc\u6d41\u3002\n\n\u7531\u4e8e\u5230\u8fbe\u6708\u4eae\u7684\u4e58\u5ba2\u5373\u53ef\u4e0d\u518d\u7ba1\uff0c\u6240\u4ee5\u53ef\u77e5**\u6708\u4eae\u4e3a\u8be5\u7f51\u7edc\u6c47\u70b9 $v$ **\u3002\n\n\u90a3\u662f\u4e0d\u662f\u4e0e\u5176\u76f8\u5bf9\u7684\u5730\u7403\u5c31\u662f\u8d77\u70b9\u4e86\u5462\uff1f\n\n\u7b54\u6848\u5f88\u660e\u663e\uff1a\u4e0d\u662f\u3002\n\n\u56e0\u4e3a\u4eba\u6d41\u91cf\u5ef6\u592a\u7a7a\u8239\u7684\u79fb\u52a8\u800c\u79fb\u52a8\uff0c\u800c\u5730\u7403\u4e0d\u4e00\u5b9a\u662f\u521d\u59cb\u70b9\uff0c\u6545\u5730\u7403\u4e0d\u4e3a\u6e90\u70b9\uff0c\u4ea6\u53ef\u77e5\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5176\u4ed6\u70b9\u53ef\u4e3a\u6e90\u70b9\u3002\u6545\u6211\u4eec\u8bbe\u4e00\u4e2a\u65b0\u70b9\u4e3a\u6e90\u70b9 $s$\uff0c\u4e14\u6e90\u70b9\u4e0e\u4efb\u4f55\u65f6\u523b\u7684\u5730\u7403\u4e4b\u95f4\u7684\u6d41\u91cf\u5747\u4e3a $inf$\u3002\uff08\u56e0\u4e3a\u4eba\u6700\u521d\u5728\u5730\u7403\u4e0a\uff09\n\n\u56e0\u4e3a\u4eba\u6d41\u91cf\u5ef6\u592a\u7a7a\u8239\u7684\u79fb\u52a8\u800c\u79fb\u52a8\uff0c\u4e14\u6839\u636e\u65f6\u523b\u6765\u8fdb\u884c\u7edf\u8ba1\uff0c\u6545\u8003\u8651\u6839\u636e\u65f6\u523b\u6765\u5efa\u8fb9\u3002\u660e\u663e\uff0c\u82e5\u6bcf\u4e2a\u592a\u7a7a\u7ad9\u4ee5\u53ca\u5730\u7403\u5206\u522b\u53ea\u662f\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u65e0\u6cd5\u8868\u793a\u51fa\u65f6\u523b\u3002\u6545\u8003\u8651\u5728\u6bcf\u4e2a\u65f6\u523b\u5efa\u7acb\u4e00\u5957**\u4e0d\u5305\u62ec\u6708\u4eae**\u7684\u65b0\u70b9\uff0c\u4ee5\u8868\u793a\u65f6\u523b\u5dee\u5f02\u3002\n\n\u7136\u540e\u6839\u636e\u6bcf\u8258\u592a\u7a7a\u8239\u7684\u79fb\u52a8\uff0c\u5efa\u7acb\u4e00\u6761**\u4e0a\u4e00\u65f6\u523b\u7684\u70b9\u5230\u5f53\u524d\u65f6\u523b\u7684\u70b9**\u7684\u8fb9\uff0c\u5176\u5bb9\u91cf\u663e\u7136\u4e3a\u592a\u7a7a\u8239\u7684\u5bb9\u91cf\u3002\n\n\u4e4b\u540e\u5728\u6bcf\u4e00\u65f6\u523b\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\uff0c\u82e5\u6700\u5927\u6d41\u4e0d\u5c0f\u4e8e\u603b\u4eba\u6570\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u7b54\u6848\uff0c\u5426\u5219\u7ee7\u7eed\u505a\u3002\n\n---\n\n### code\ndinic,189ms(\u65e0O2)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    int x=0,f=0;\n    char ch=getchar();\n    for (;ch<'0'||ch>'9';ch=getchar()) f^=(ch=='-');\n    for (;ch>='0'&&ch<='9';ch=getchar()) x=x*10+ch-'0';\n    return f ? -x : x;\n}\nconst int maxn=100,maxm=1000000,inf=2147483600;\nint n,m,k,dep[maxm],head[maxm],q[maxm],l,r,ans,maxflow=0;\nint fa[maxn],lo[maxn],g[maxn][maxn],cnt=1,qwq[maxn],cur[maxm];\nint s=maxm-5,t=maxm-4;\nbool vis,inq[maxm];\nstruct node{\n    int to,nxt,w;\n}e[maxm];\ninline void add(int u,int v,int w) {\n    e[++cnt].to=v;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\ninline int getf(int x) {\n    return x==fa[x] ? x : fa[x]=getf(fa[x]);\n}\nvoid merge(int a,int b) {\n    int t1=getf(a),t2=getf(b);\n    if (t1!=t2) {\n        fa[t1]=t2;\n    }\n}\nbool bfs(){\n    memset(dep,0x7f,sizeof(dep));\n    memset(inq,0,sizeof(inq));\n    memcpy(cur,head,sizeof(head));\n    l=1;r=0;\n    q[++r]=s;inq[s]=1;dep[s]=0;\n    while (l<=r) {\n        int u=q[l++];\n        inq[u]=0;\n        for (int i=head[u];i;i=e[i].nxt) {\n            int v=e[i].to;\n            if (e[i].w&&dep[v]>dep[u]+1) {\n                dep[v]=dep[u]+1;\n                if (!inq[v]) {\n                    inq[v]=1;\n                    q[++r]=v;\n                }\n            }\n        }\n    }\n    return dep[t]<maxm+10000;\n}\nint dfs(int u,int flow) {\n    if (u==t) {\n        maxflow+=flow;\n        vis=1;\n        return flow;\n    }\n    int goflow=0,used=0;\n    for (int &i=cur[u];i;i=e[i].nxt) {\n        int v=e[i].to;\n        if (e[i].w&&dep[v]==dep[u]+1) {\n            goflow=dfs(v,min(e[i].w,flow-used));\n            if (!goflow) continue;\n            e[i].w-=goflow;\n            e[i^1].w+=goflow;\n            used+=goflow;\n            if (used==flow) break;\n        }\n \t}\n \treturn used;\n}\nvoid dinic(){\n    while (bfs()) {\n        vis=1;\n        while (vis) {\n            vis=0;\n            dfs(s,inf);\n        }\n    }\n}\nint main(){\n    int a=0,b=0;\n    n=read();\n    m=read();\n    k=read();\n    for (int i=1;i<=n+2;++i) fa[i]=i;\n    for (int i=1;i<=m;++i) {\n        qwq[i]=read();\n        lo[i]=read();\n        for (int j=1;j<=lo[i];++j) {\n            g[i][j]=read();//\u8bb0\u5f55\u6bcf\u8258\u592a\u7a7a\u8239\u6bcf\u4e2a\u65f6\u95f4\u6240\u5728\u7684\u5730\u65b9 \n            if (!g[i][j]) g[i][j]=n+1;//\u8fd9\u4e2a\u662f\u5730\u7403 \n            else if (g[i][j]==-1) g[i][j]=n+2;//\u6708\u4eae \n            if (j>1) merge(g[i][j-1],g[i][j]);//\u5408\u5e76 \n        }\n    }\n    if (getf(n+1)!=getf(n+2)) {//\u5224\u65ad \n        puts(\"0\");\n        return 0;\n    }\n    for (ans=1;;++ans) {//\u679a\u4e3e\u65f6\u523b \n        add(s,ans*(n+1),inf);//\u6e90\u70b9\u5411\u5730\u7403\u8fde\u8fb9 \n        add(ans*(n+1),s,0);\n        for (int i=1;i<=m;++i) {\n            a=(ans-1)%lo[i]+1;//\u4e0a\u4e00\u65f6\u523b \n            b=ans%lo[i]+1;//\u5f53\u524d \n            if (g[i][a]==n+2) a=t;//\u6708\u4eae \n            else a=(ans-1)*(n+1)+g[i][a];//\u65b0\u65f6\u523b\u8282\u70b9 \n            if (g[i][b]==n+2) b=t;//\u540c\u4e0a \n            else b=ans*(n+1)+g[i][b];\n            add(a,b,qwq[i]);//\u5efa\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u592a\u7a7a\u8239\u5bb9\u91cf \n            add(b,a,0);\n        }\n        dinic();\n        if (maxflow>=k) {\n            printf(\"%d\\n\",ans);\n            return 0;\n        }\n        for (int i=1;i<=n+1;++i) {\n            add((ans-1)*(n+1)+i,ans*(n+1)+i,inf);\n            add(ans*(n+1)+i,(ans-1)*(n+1)+i,0);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1545121020,
        "uid": 78752,
        "name": "lolte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7ed9\u51fa\u4e86\u592a\u7a7a\u8239\u7684\u98de\u884c\u8def\u7ebf \u76f8\u5f53\u4e8e\u7ed9\u51fa\u4e86\u7a7a\u95f4\u7ad9\u4e4b\u95f4\u7684\u5173\u7cfb \u4f46\u662f\u6bcf\u4e00\u5929\u98de\u8239\u7684\u4f4d\u7f6e\u90fd\u4e0d\u4e00\u6837 \u4e8e\u662f\u8fd9\u6837\u5c31\u542f\u793a\u6211\u4eec\u4ee5\u65f6\u95f4\u5206\u5c42 \u56e0\u4e3a\u603b\u65f6\u95f4\u4e0d\u786e\u5b9a \u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u7b54\u6848\r\n\r\n\u9488\u5bf9\u6bcf\u4e00\u5929\u5efa\u56fe \u6d41\u91cf\u4ee3\u8868\u4eba\u6570 \u67d0\u4e00\u65f6\u523b\u603b\u6d41\u91cf>=k \u90a3\u4e48\u5c31\u662f\u7b54\u6848\r\n\r\n\u5efa\u6a21\u6b65\u9aa4:\r\n\r\n1.\u5efa\u8bbe\u6e90\u70b9S\u4e0e\u5730\u7403\u8fde\u8fb9 \u5bb9\u91cf\u4e3ainf\r\n\r\n2.\u4e0a\u4e00\u5929\u7684\u4f4d\u7f6e\u4e0e\u8fd9\u4e00\u5929\u7684\u4f4d\u7f6e\u8fde\u8fb9 \u5bb9\u91cf\u4e3a\u8f7d\u4eba\u6570\r\n\r\n3.\u56e0\u4e3a\u4eba\u53ef\u4ee5\u9009\u62e9\u4e0d\u4e0a\u98de\u8239 \u4e14\u7a7a\u95f4\u7ad9\u5bb9\u91cf\u65e0\u9650 \u6240\u4ee5\u4e0a\u4e00\u5929\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u4e0e\u8fd9\u4e00\u5929\u8fd9\u4e2a\u4f4d\u7f6e\u8fde\u8fb9 \u5bb9\u91cf\u4e3ainf\r\n\r\n\u7edf\u8ba1\u6d41\u91cf >=k\u65f6\u5373\u4e3a\u7b54\u6848\r\n\r\n\r\n\r\n\r\n\r\n\r\n           \r\n\r\n\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<cstdlib>\r\n#include<algorithm>\r\n#define maxn 500\r\nusing namespace std;\r\nint n,m,k,s,t,qhead,qtail,k1=-1,d=0,ans=0;\r\nint cost[maxn+50],p[maxn+50],boat[maxn+50][maxn+50],dis[maxn*maxn+50];\r\nint queue[maxn*maxn+50],f[maxn*maxn+50],head[maxn*maxn+50],c[maxn*maxn+50];\r\nstruct node{\r\n    int to,next,c;\r\n}e[maxn*maxn+50];\r\nvoid add(int u,int v,int c)\r\n{\r\n    e[++k1].next=head[u],e[k1].to=v,e[k1].c=c,head[u]=k1;\r\n    e[++k1].next=head[v],e[k1].to=u,e[k1].c=0,head[v]=k1;\r\n}\r\nint find(int x)\r\n{\r\n    if(x==f[x]) return x;\r\n    return f[x]=find(f[x]);\r\n}\r\nbool judge()\r\n{\r\n    for(int i=1;i<=m;i++) \r\n    for(int j=1;j<p[i];j++)\r\n    {\r\n        int fx=find(boat[i][j]);\r\n        int fy=find(boat[i][j+1]);\r\n        if(fx!=fy) f[fx]=fy;\r\n    }\r\n    if(find(0)!=find(n+1)) return false;\r\n    return true;\r\n}\r\nbool bfs(int tail)\r\n{\r\n    memset(dis,-1,sizeof(dis));\r\n    qhead=qtail=dis[t+1]=0;\r\n    queue[++qtail]=t+1;\r\n    while(qhead<qtail)\r\n    {\r\n        int p=queue[++qhead];\r\n        for(int i=head[p];i!=-1;i=e[i].next)\r\n        {\r\n            if(e[i].c && dis[e[i].to]==-1)\r\n             dis[e[i].to]=dis[p]+1,queue[++qtail]=e[i].to;\r\n        }\r\n    }\r\n    if(dis[tail]==dis[t+2]) return false;\r\n    return true;\r\n}\r\nint dfs(int u,int c)\r\n{\r\n    int inc=0;\r\n    if(u==n+1+d*(n+2) || !c) return c;\r\n    for(int i=head[u];i!=-1;i=e[i].next)\r\n      if(dis[e[i].to]==dis[u]+1 && e[i].c)\r\n      {\r\n           int flow=dfs(e[i].to,min(e[i].c,c-inc));\r\n           e[i].c-=flow,e[i^1].c+=flow,inc+=flow;\r\n           if(inc==c) break;\r\n      }\r\n    if(!inc) dis[u]==-1;\r\n    return inc;  \r\n}\r\nvoid Dinic(int d)\r\n{\r\n    for(int i=0;i<=n+1;++i) \r\n    add(i+(d-1)*(n+2),i+d*(n+2),0xfff);\r\n    for(int i=1,b;i<=m;i++)\r\n    {\r\nb=c[i]+1<=p[i]?c[i+1]:1;\r\n        add(boat[i][c[i]]+(d-1)*(n+2),boat[i][b]+d*(n+2),cost[i]);\r\n        c[i]=b;\r\n    }\r\n    while(bfs(n+1+d*(n+2))) ans+=dfs(t+1,0xfff);\r\n}\r\nint main()\r\n{\r\n    memset(head,-1,sizeof(head));\r\n    scanf(\"%d%d%d\",&n,&m,&k);t=maxn*maxn;\r\n    for(int i=0;i<=n;i++) f[i]=i;f[t]=t;\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        scanf(\"%d%d\",&cost[i],&p[i]);\r\n        for(int j=1;j<=p[i];j++) \r\n        {\r\n          scanf(\"%d\",&boat[i][j]);\r\n          if(boat[i][j]==-1) boat[i][j]=n+1;    \r\n        }\r\n    }    \r\n    add(t+1,0,0xfff);\r\n    for(int i=1;i<=m;i++) c[i]=1;\r\n    while(1)\r\n    {\r\n        d++;Dinic(d);\r\n        if(ans>=k) {printf(\"%d\",d);exit(0);}\r\n        if(d>=1010) {printf(\"0\");exit(0);}//\u7c97\u7565\u7684\u8ba1\u7b97\u4e00\u4e0b\u6700\u5927\u5929\u6570 \u5f53\u7136\u4fdd\u9669\u4e5f\u53ef\u4ee5\u66f4\u5927\u4e00\u70b9(\u522b\u8d85\u65f6...) \r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1486632160,
        "uid": 22060,
        "name": "Memorize",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010\u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "**\u8fd9\u4e2a\u95ee\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u8868\u793a\u65f6\u95f4\u7684\u6d41\u901d**\n\n$\u5f88\u5bb9\u6613\u60f3\u5230\u6e90\u70b9\u662f\u5730\u7403,\u7136\u540e\u4e2d\u95f4\u4e00\u4e32\u7684\u7a7a\u95f4\u7ad9,\u6700\u540e\u8fde\u5411\u6c47\u70b9\u6708\u7403$\n\n$\u7a7a\u95f4\u7ad9\u95f4\u5404\u81ea\u8fde\u8fb9,\u6d41\u91cf\u662f\u98de\u8239\u7684\u5bb9\u91cf$\n\n\u8fd9\u6837\u8dd1\u6700\u5927\u6d41\u8dd1\u51fa\u6765\u7684\u5176\u5b9e\u662f**\u4e00\u5929**\u80fd\u5230\u7684\u6700\u591a\u7684\u4eba,\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\n\n$\u5047\u5982\u6211\u4eec\u518d\u5f00\u4e00\u6761\u4e0a\u9762\u7684\u94fe\u5462?\u4e5f\u8bb8\u5c31\u80fd\u8868\u793a\u4e24\u5929\u7684\u6700\u5927\u6d41\u4e86\u3002$\n\n$\u6240\u4ee5\u601d\u8def\u5927\u6982\u6709\u70b9\u8f6e\u5ed3,\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u7c7b\u4f3c\u5206\u5c42\u56fe\u7684\u4e1c\u897f$\n\n$\u6309\u7167\u65f6\u95f4\u5206\u5c42,\u5c31\u80fd\u8868\u793ax\u5929\u7684\u6700\u5927\u6d41$\n\n---\n\n$\u6bcf\u5929\u7684\u56fe\u90fd\u662f\u5730\u7403-\u7a7a\u95f4\u7ad9-\u6708\u7403$\n\n$\u90a3\u4e48\u6e90\u70b9\u5411\u6bcf\u4e00\u5929\u7684\u5730\u7403\u8fde\u8fb9,\u5bb9\u91cfinf$\n\n$\u6bcf\u4e00\u5929\u7684\u6708\u7403\u5411\u6c47\u70b9\u8fde\u8fb9,\u5bb9\u91cfinf$\n\n$\u5bf9\u4e8e\u6bcf\u4e2a\u98de\u8239,\u524d\u4e00\u5929\u7684\u4f4d\u7f6e\u5411\u540e\u4e00\u5929\u4f4d\u7f6e\u8fde\u8fb9,\u8868\u793a\u65f6\u95f4\u7684\u6d41\u901d,\u5bb9\u91cf\u662f\u98de\u8239\u5bb9\u91cf$\n\n$\u5bf9\u4e8e\u6bcf\u5929\u7684\u7a7a\u95f4\u7ad9\u5411\u4e0b\u4e00\u5929\u7684\u8fd9\u4e2a\u7a7a\u95f4\u7ad9\u8fde\u8fb9,\u5bb9\u91cfinf,\u8868\u793a\u4eba\u53ef\u4ee5\u505c\u5728\u8fd9\u4e2a\u7a7a\u95f4\u7ad9$\n\n\u679a\u4e3e\u7b54\u6848\u8dd1\u6700\u5927\u6d41\u5373\u53ef\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int inf=1e9;\nconst int maxn=2e5+10;\nstruct edge{\n\tint to,flow,nxt;\n}d[maxn]; int head[maxn],cnt=1,ans;\nvoid add(int u,int v,int flow){\n\td[++cnt]=(edge){v,flow,head[u] },head[u]=cnt;\n\td[++cnt]=(edge){u,0,head[v]},head[v]=cnt;\n}\nint dis[maxn],p[maxn],num[maxn],g[209][209],pre[maxn];\nint n,m,k,s,t;\nint find(int x){\n\treturn x==pre[x]?x:pre[x]=find( pre[x] );\n}\nvoid join(int q,int w){\n\tpre[find(q)]=find(w);\n}\nbool bfs()\n{\n\tqueue<int>q;\n\tfor(int i=0;i<=ans*(n+1);i++)\tdis[i]=0;\n\tdis[t]=0;\n\tdis[s]=1,q.push(s);\n\twhile( !q.empty() )\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=head[u];i;i=d[i].nxt )\n\t\t{\n\t\t\tint v=d[i].to;\n\t\t\tif( dis[v]==0&&d[i].flow )\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tif( v==t )\treturn true;\n\t\t\t\tq.push( v );\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint dinic(int u,int flow)\n{\n\tif( u==t )\treturn flow;\n\tint res=flow;\n\tfor(int i=head[u];i;i=d[i].nxt)\n\t{\n\t\tint v=d[i].to;\n\t\tif( dis[v]==dis[u]+1&&d[i].flow )\n\t\t{\n\t\t\tint temp=dinic(v,min(res,d[i].flow) );\n\t\t\tif( temp==0 )\tdis[v]=0;\n\t\t\td[i].flow-=temp;\n\t\t\td[i^1].flow+=temp;\n\t\t\tres-=temp;\n\t\t}\n\t\tif( res==0 )\tbreak;\n\t}\n\treturn flow-res;\n}\nint main()\n{\n\tcin >> n >> m >> k;\n\ts=0,t=1e5;\n\tfor(int i=1;i<=n+2;i++)\tpre[i]=i;\n\tfor(int i=1;i<=m;i++)//\u592a\u7a7a\u8239 \n\t{\n\t\tcin >> p[i] >> num[i];\n\t\tfor(int j=0;j<num[i];j++)\n\t\t{\n\t\t\tcin >> g[i][j];\n\t\t\tif( g[i][j]==0 )\tg[i][j]=n+1;//\u8d77\u70b9\n\t\t\tif( g[i][j]==-1 )\tg[i][j]=n+2;//\u6c47\u70b9\n\t\t\tif( j!=0 )\tjoin( g[i][j-1],g[i][j] ); \n\t\t}\n\t}\n\tif( find(n+1)!=find(n+2) )\n\t{\n\t\tcout << 0;\n\t\treturn 0;\n\t}\n\tint kk=0;\n\tfor(ans=1;;ans++)\n\t{\n\t\tadd( s,ans*(n+1),inf );//\u6e90\u70b9\u8fde\u5411\u4eca\u5929\u7684\u5730\u7403 \n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint x=(ans-1)%num[i],y=ans%num[i];\n\t\t\tif( g[i][x]==n+2 )\tx=t;//\u6708\u4eae\u662f\u6c47\u70b9 \n\t\t\telse\tx=(ans-1)*(n+1)+g[i][x];//\u6bcf\u5c42\u6709n+1\u4e2a\u70b9\n\t\t\tif( g[i][y]==n+2 )\ty=t;\n\t\t\telse\ty=ans*(n+1)+g[i][y];\n\t\t\tadd(x,y,p[i] );\n\t\t}\n\t\twhile( bfs() )\tkk+=dinic(s,inf);\n\t\tif( kk>=k )\n\t\t{\n\t\t\tcout << ans;\n\t\t\treturn 0;\n\t\t}\n\t\tfor(int i=1;i<=n+1;i++)\n\t\t\tadd( (ans-1)*(n+1)+i,ans*(n+1)+i,inf );//\u5728\u8fd9\u4e2a\u7ad9\u505c\u4e0b\u6765 \n\t}\n}\n```",
        "postTime": 1597826251,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed / \u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2754)\n\n------------\n\n# Solution\n\n\u5224\u65ad\u6709\u65e0\u89e3\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u5982\u679c\u6700\u540e\u5730\u7403\u548c\u6708\u7403\u80fd\u5904\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u80af\u5b9a\u53ef\u4ee5\u5230\u8fbe\uff0c\u53ea\u662f\u65f6\u95f4\u957f\u77ed\u7684\u95ee\u9898\u3002\n\n\u56e0\u4e3a\u591a\u4e2a\u98de\u8239\u662f\u540c\u65f6\u98de\u884c\u7684\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u4e0d\u597d\u76f4\u63a5\u5904\u7406\u3002\u8003\u8651\u661f\u7403\u7684\u4e2a\u6570\u7279\u522b\u5c11\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u6309\u7167\u65f6\u95f4\u8f74\u5efa\u7acb\u5206\u5c42\u56fe\uff0c$S$\u5411\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u5730\u7403\u8fde\u5bb9\u91cf\u4e3a$INF$\u7684\u6709\u5411\u8fb9\uff0c\u6bcf\u4e2a\u661f\u7403\u5411\u4e0b\u4e2a\u65f6\u95f4\u70b9\u7684\u540c\u4e00\u4e2a\u661f\u7403\u8fde\u5bb9\u91cf\u4e3a$INF$\u7684\u6709\u5411\u8fb9\uff0c\u8868\u793a\u8fd9\u4e2a\u661f\u7403\u7684\u4eba\u7b49\u5f85\u5230\u4e86\u4e0b\u4e2a\u65f6\u95f4\u70b9\uff1b\u6bcf\u4e2a\u98de\u8239\u6240\u5728\u661f\u7403\u5411\u98de\u8239\u4e0b\u4e2a\u65f6\u95f4\u70b9\u5230\u8fbe\u7684\u661f\u7403\u8fde\u5bb9\u91cf\u4e3a\u627f\u8f7d\u4eba\u7684\u6570\u91cf\u7684\u6709\u5411\u8fb9\uff0c\u8868\u793a\u53ef\u4ee5\u8fdb\u884c\u98de\u884c\u8f6c\u79fb\u3002\n\n\u7136\u540e\u679a\u4e3e\u65f6\u95f4\uff0c\u5982\u679c\u67d0\u4e2a\u65f6\u95f4\u70b9\u6700\u5927\u6d41\u7684\u6bd4$k$\u5927\u5c31\u8f93\u51fa\u65f6\u95f4\uff0c\u6bcf\u6b21\u76f4\u63a5\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8fdb\u884c\u589e\u5e7f\u5373\u53ef\u3002\n\n------------\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int N = 50050;\t\nconst int M = 100050;\nconst int INF = 999999999;\n\nint n, m, s, t, head[N], num = 1, vis[N], d[N], mincost, maxflow, cur[N], k, a[5550][5550], fa[N], tim, b[500];\n\nstruct Node\n{\n\tint next, to, flow;\n} edge[M * 2];\n\nvoid Addedge(int u, int v, int w)\n{\n\tedge[++num] = (Node){head[u], v, w};\n\thead[u] = num;\n}\n\nvoid Add(int u, int v, int w)\n{\n//\tcout << u << \" \" << v << endl;\n\tAddedge(u, v, w);\n\tAddedge(v, u, 0);\n\treturn;\n}\n\ntemplate <class T>\nvoid Read(T &x)\n{\n\tx = 0; int p = 0; char st = getchar();\n\twhile (st < '0' || st > '9') p = (st == '-'), st = getchar();\n\twhile (st >= '0' && st <= '9') x = (x << 1) + (x << 3) + st - '0', st = getchar();\n\tx = p ? -x : x;\n\treturn;\n}\n\ntemplate <class T>\nvoid Put(T x)\n{\n\tif (x < 0) putchar('-'), x = -x;\n\tif (x > 9) Put(x / 10);\n\tputchar(x % 10 + '0');\n\treturn;\n}\n\nint Find(int x) { return fa[x] == x ? fa[x] : Find(fa[x]); }\n\nvoid Merge(int a, int b)\n{\n\tint pa = Find(a), pb = Find(b);\n\tif (pa == pb) return;\n\telse fa[pa] = pb;\t\n} \n\nbool Bfs()\n{\n    queue<int> q;\n    for (int i = 0; i <= t; i++) d[i] = 0;\n    d[s] = 1; q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = edge[i].next)\n            if (!d[edge[i].to] && edge[i].flow)\n            {\n                d[edge[i].to] = d[u] + 1;\n                q.push(edge[i].to);\n                if (edge[i].to == t) return 1;\n            }\n    }\n    return 0;\n}\n\nint Dinic(int x, int flow)\n{\n    if (x == t || !flow) return flow;\n    int rest = flow;\n    for (int i = head[x]; i && rest; i = edge[i].next)\n        if (edge[i].flow && d[edge[i].to] == d[x] + 1)\n        {\n            int v = edge[i].to;\n            int tmp = Dinic(v, min(rest, edge[i].flow));\n            rest -= tmp;\n            edge[i].flow -= tmp;\n            edge[i ^ 1].flow += tmp;\n            if (!tmp) d[v] = 0;\n        }\n    return flow - rest;\n}\n\nint Maxflow()\n{\n\tint maxflow = 0, tmp;\n\twhile (Bfs())\n\t{\n\t\ttmp = Dinic(s, INF);\n\t\tif (tmp) maxflow += tmp;\n\t}\n\treturn maxflow;\n}\n\nvoid Solve()\n{\n\twhile(Bfs())\n\t{\n\t\tfor (int i = 0; i <= t; i++) cur[i] = head[i];\n\t\tmaxflow += Dinic(s, INF);\n\t}\n\treturn; \n}\n\nint Id(int a, int b)\n{\n\tif (b == t) return t;\n\treturn (n + 1) * a + b;\n}\n\nint main()\n{\n\tRead(n); Read(m); Read(k);\n\tt = 50000;\n\tfor (int i = 1; i <= t; i++) fa[i] = i;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tRead(b[i]); Read(a[i][0]);\n\t\tfor (int j = 1; j <= a[i][0]; j++) \n\t\t{\n\t\t\tRead(a[i][j]);\n\t\t\tif (a[i][j] == 0) a[i][j] = n + 1;\n\t\t\tif (a[i][j] == -1) a[i][j] = t;\n\t\t\tif (j > 1) Merge(a[i][j], a[i][j - 1]);\n\t\t}\n\t\tMerge(a[i][1], a[i][a[i][0]]);\n\t}\n\tif (Find(t) != Find(n + 1)) { puts(\"0\"); return 0; }\n\tfor (tim = 1; ; tim++)\n\t{\n\t\tAdd(s, Id(tim - 1, n + 1), INF);\n\t\tfor (int i = 1; i <= m; i++) \n\t\t{\n\t\t\tint pos1 = tim % a[i][0] == 0 ? a[i][0] : tim % a[i][0], pos2 = (tim + 1) % a[i][0] == 0 ? a[i][0] : (tim + 1) % a[i][0];\n\t\t//\tif (a[i][pos1] == t) continue;\n\t\t\tAdd(Id(tim - 1, a[i][pos1]), Id(tim, a[i][pos2]), b[i]);\n\t\t}\n\t\twhile(Bfs())\n\t\t{\n\t\t\tmaxflow += Dinic(s, INF);\n\t\t}\n\t\tif (maxflow >= k) { Put(tim); return 0; }\n\t\tfor (int i = 1; i <= n + 1; i++) Add(Id(tim - 1, i), Id(tim, i), INF);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1584347702,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2754 \u3010[CTSC1999]\u5bb6\u56ed / \u661f\u9645\u8f6c\u79fb\u95ee\u9898\u3011"
    }
]